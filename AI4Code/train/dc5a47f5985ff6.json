{"cell_type":{"d2f4f8ae":"code","4f5c0f99":"code","db6b98a4":"code","36c497fc":"code","a5d72f83":"code","4ac2aae7":"code","5baaf664":"code","2f98ddd9":"code","4d436c5e":"code","63ab8a8c":"code","eb089d7a":"code","5d7d092a":"code","695f8642":"code","9ee82e35":"code","92f57faf":"code","ac25cc81":"code","d8390a95":"code","c5e1c1b1":"code","76a9f3b0":"code","ca96caf3":"code","c7b3dadf":"code","0ff7f1c5":"code","ab75773c":"code","9b02622d":"code","7def5021":"code","d9cf8adb":"code","20e5ed35":"code","a0c912db":"code","89c27850":"code","0d97b1d5":"code","e541874c":"code","2b7f4329":"code","d0c5fdd3":"code","e3bac6b6":"code","4a6ba26e":"code","83db4840":"code","a1078c73":"code","5f16e3cf":"code","34ca483a":"code","097cdec6":"code","577f7927":"code","0c785572":"code","63689dd5":"code","473c936d":"code","96484ffa":"code","612034d2":"code","0e9457a8":"code","3aab9def":"code","339c3674":"code","3b20ba8d":"code","3fb43cba":"code","51086c51":"code","c391a254":"code","25a3ffe4":"code","41cc8901":"code","f51c2890":"code","ff579862":"code","efec1711":"code","c1f26e81":"markdown","a7b6170f":"markdown","1d8e09d6":"markdown","4e1a6f43":"markdown","8d5f52d6":"markdown","19b4aee1":"markdown","1e70dd8f":"markdown","82ed80bd":"markdown","e586b009":"markdown","cff415db":"markdown","edd1af7a":"markdown","a662404b":"markdown","53438e9d":"markdown","25693488":"markdown","e0882889":"markdown","6738baa5":"markdown","41b729a4":"markdown","29368739":"markdown","6bed730e":"markdown","fe43c69b":"markdown","a52176d3":"markdown","bbc4143b":"markdown","88183c64":"markdown","293237e0":"markdown","42f24882":"markdown","dc1fd393":"markdown","9b86b31d":"markdown","e2c1a99f":"markdown","eafb882b":"markdown","3e74a1c5":"markdown","a5dedec3":"markdown","7a33902a":"markdown","be367b12":"markdown","b8baab8b":"markdown","703506cc":"markdown","db83c643":"markdown","3636c946":"markdown"},"source":{"d2f4f8ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4f5c0f99":"import matplotlib.pyplot as plt\nimport seaborn as sns","db6b98a4":"sales = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\nitem_cat = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\nitems = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/items.csv')\ntest = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')","36c497fc":"print (\"Rows     : \" ,sales.shape[0])\nprint (\"Columns  : \" ,sales.shape[1])\nprint (\"\\nFeatures : \\n\" ,sales.columns.tolist())\nprint (\"\\nMissing values \\n:\", sales.isnull().any())\nprint (\"\\nUnique values :  \\n\",sales.nunique())","a5d72f83":"sales.info()","4ac2aae7":"# formatting date column dtype from object to datetime\nsales['date'] = pd.to_datetime(sales['date'], format='%d.%m.%Y')","5baaf664":"print('The data type of our date columns is converted from object to', sales.date.dtype)\nsales.head()\n","2f98ddd9":"sales.describe().T","4d436c5e":"plt.figure(figsize=(12,6))\nsns.distplot(sales['item_id'])","63ab8a8c":"# lets look at the distribution of shops in our sales data\nplt.figure(figsize=(15,6))\nsns.countplot(sales['shop_id'])","eb089d7a":"plt.figure(figsize=(18,6))\nplt.subplot(1,2,1)\nsns.boxplot(sales['item_cnt_day'])\nplt.subplot(1,2,2)\nsns.boxplot(sales['item_price'])","5d7d092a":"print (\"Rows     : \" ,test.shape[0])\nprint (\"Columns  : \" ,test.shape[1])\nprint (\"\\nFeatures : \\n\" ,test.columns.tolist())\nprint (\"\\nMissing values \\n:\", test.isnull().any())\nprint (\"\\nUnique values :  \\n\",test.nunique())","695f8642":"plt.figure(figsize=(18,6))\nplt.subplot(1,2,1)\nsns.histplot(test['shop_id'])\nplt.subplot(1,2,2)\nsns.histplot(test['item_id'])","9ee82e35":"\nmissing_items_in_sales = [item for item in sales.item_id.unique() if item not in test.item_id.unique()]\nmissing_items_in_test = [item for item in test.item_id.unique() if item not in sales.item_id.unique()]\n\nprint('Total number unique of item_id that are not present in sales dataset but is present in test dataset:',len(missing_items_in_sales))\nprint('Total number unique of item_id that are not present in test dataset but is present in sales dataset:',len(missing_items_in_test))","92f57faf":"shop_id_notin_test = [id for id in sales.shop_id.unique() if id not in test.shop_id.unique()]\nprint('shops that are present in sales data but not in test data\\n',shop_id_notin_test)","ac25cc81":"shop_id = 0\nshop_id_month_miss = []\n\nfor months in sales.groupby(['shop_id'])['date_block_num'].unique():\n    if 33 not in months:\n        shop_id_month_miss.append(shop_id)\n        shop_id +=1\n    else:\n        shop_id +=1\n\nprint('shops with missing sales data for the last month\\n', shop_id_month_miss)     \n        \n        \n    ","d8390a95":"''' \nso lets find out the shops which have last month sales data given but still \nnot present in our test data'''\n\nfor shop in shop_id_notin_test:\n    if shop not in shop_id_month_miss:\n        print(f'Shop {shop} have last month sales data given but still not in our test dataset')\n        ","c5e1c1b1":"print(sales.groupby(['shop_id'])['date_block_num'].unique()[9])\nprint(sales.groupby(['shop_id'])['date_block_num'].unique()[20])","76a9f3b0":"popular_shops = sales.groupby('shop_id').item_cnt_day.agg([sum])","ca96caf3":"popular_shops = popular_shops.sort_values(by='sum')","c7b3dadf":"\npopular_shops.plot.barh(figsize=(16,12))\nplt.title('Most popular shop by sales', fontsize=20)\nplt.xlabel('Total Sales', fontsize=14)","0ff7f1c5":"sales.groupby('shop_id')['item_id'].nunique().sort_values().plot.barh(figsize=(16,12))\nplt.title('Most items available at the shop', fontsize=20)\nplt.xlabel('Total number of items at shop', fontsize=14)\n","ab75773c":"df = sales.groupby(['shop_id','item_id']).item_cnt_day.sum()   #.sort_values()  #ascending=False","9b02622d":"df.loc[df.groupby(level=0).idxmax()].sort_values()","7def5021":"df.loc[df.groupby(level=0).idxmax()].sort_values().plot.barh(figsize=(16,12))\nplt.title('Most sold single item at each shop', fontsize=20)\nplt.xlabel('Total Sales', fontsize=14)\n","d9cf8adb":"sales.groupby('item_id')['item_cnt_day'].sum().sort_values(ascending=False)[:25].sort_values().plot.barh(figsize=(16,12))\nplt.title('Top 25 sold Items', fontsize=20)\nplt.xlabel('Total Sales', fontsize=14)\n","20e5ed35":"sales.groupby('item_id')['item_cnt_day'].sum().sum()","a0c912db":"(sales.groupby('item_id')['item_cnt_day'].sum()\/sales.groupby('item_id')['item_cnt_day'].sum().sum()*100).sort_values(ascending=False)[:25].sort_values().plot.barh(figsize=(16,12))\nplt.title('Percentage Sale of each Top 25 Product out of Total Sale', fontsize=20)\nplt.xlabel('Percentage Sale', fontsize=14)","89c27850":"sales.groupby([\"date_block_num\"])[\"item_cnt_day\"].sum().plot(figsize=(16,8))\nplt.title('Total Sales of the company month wise', fontsize=20)\nplt.ylabel('Sales', fontsize=14)\n","0d97b1d5":"sales.groupby([\"date_block_num\"])[\"item_cnt_day\"].sum()","e541874c":"data = sales.groupby([\"date_block_num\",'shop_id'])[\"item_cnt_day\"].sum()\ndata.loc[data.groupby(level=0).idxmax()].plot.bar(figsize=(16,10))\nplt.title('Shop with highest sale for each month', fontsize=20)\nplt.ylabel('Sales', fontsize=14)\n","2b7f4329":"sales1 = sales.copy()\nsales1['weekday'] = sales1.date.dt.day_name()\nsales1\n","d0c5fdd3":"sales1.groupby('weekday')['item_cnt_day'].sum().sort_values().plot.barh(figsize=(10,6))\nplt.title('Sales for each day of the week', fontsize=20)\nplt.xlabel('Sales', fontsize=14)","e3bac6b6":"sales1['month']=sales1.date.dt.month_name()\nsales1[sales1['date'] < '2015-01-01'].groupby('month')['item_cnt_day'].sum().sort_values().plot.barh(figsize=(12,8), color='green')\nplt.title('Total sale for each month for the combined year of 2013 and 2014', fontsize=20)\nplt.xlabel('Sales', fontsize=14)","4a6ba26e":"sales1['year'] = sales1.date.dt.year\nsales1.groupby(['month','year'])['item_cnt_day'].sum().plot.bar(figsize=(16,10))\nplt.title('Month wise sale for each year', fontsize=20)\nplt.ylabel('Sales', fontsize=14)","83db4840":"sales1.month.unique()","a1078c73":"sales2 = sales1[sales1.month.isin(['January', 'February', 'March', 'April', 'May', 'June', 'July','August', 'September', 'October'])]\nsales2","5f16e3cf":"yearly_sales = sales2.groupby('year')['item_cnt_day'].sum()\nyearly_sales","34ca483a":"def percent_of(a,b):\n    return round(100-((a-b)\/a)*100,0)   ","097cdec6":"print(percent_of(yearly_sales[2013],yearly_sales[2014]))\nprint(percent_of(yearly_sales[2014],yearly_sales[2015]))","577f7927":"# Lets extract day feature first from our date column\nsales1['day'] = sales1.date.dt.day\nsales1","0c785572":"# finding out total sale on each day of the month as well as how many times each day appear\nsales_day = sales1.groupby('day')['item_cnt_day','day'].agg({'item_cnt_day':'sum','day':'count'})","63689dd5":"sales_day.tail()","473c936d":"# we are mutiplyiing day 31 item_cnt_day sum with (34\/20 * 0.87) because we have 34 months and in our test data 20 have months have 31 days and also\n# multiplying it with 0.87 because on average we have 0.87 sale of previous year. \n\nsales_day.loc[31, 'item_cnt_day'] = round(sales_day.loc[31, 'item_cnt_day'] * (34\/20)*0.87,0)\nsales_day.tail()","96484ffa":"sales_day.sort_values(by='item_cnt_day')['item_cnt_day'].plot.barh(figsize=(15,10))\nplt.title('Sales on each day of the month', fontsize=20)\nplt.ylabel('Day of month', fontsize=14)","612034d2":"plt.figure(figsize=(12,6))\nplt.subplot(1,2,1)\nsns.boxplot(sales.item_cnt_day)\nplt.subplot(1,2,2)\nsns.boxplot(sales.item_price)","0e9457a8":"sales[sales['item_cnt_day'] >= 1000]","3aab9def":"sales[sales['item_id'] == 11373].sort_values(by='item_cnt_day', ascending = False)","339c3674":"sales[sales['item_id'] == 20949].sort_values(by='item_cnt_day', ascending = False)","3b20ba8d":"sales = sales[sales.item_cnt_day<1001]\nsales = sales[sales.item_price<100000]","3fb43cba":"sales[sales.item_price<=0]","51086c51":"sales.loc[sales.item_price<=0, 'item_price'] = sales[sales.item_id==2973]['item_price'].median()","c391a254":"plt.figure(figsize=(12,6))\nplt.subplot(1,2,1)\nsns.boxplot(sales.item_cnt_day)\nplt.subplot(1,2,2)\nsns.boxplot(sales.item_price)","25a3ffe4":"from itertools import product","41cc8901":"matrix = []\ncols = ['date_block_num','shop_id','item_id']\nfor i in range(34):\n    sales_df = sales[sales.date_block_num==i]\n    matrix.append(np.array(list(product([i], sales_df.shop_id.unique(), sales_df.item_id.unique())), dtype='int16'))","f51c2890":"matrix","ff579862":"cols = ['date_block_num','shop_id','item_id']\nmatrix = pd.DataFrame(np.vstack(matrix), columns=cols)\nmatrix","efec1711":"matrix.shop_id.unique()","c1f26e81":"## Q: Which months has highest sale for year 2013 and 2014 combined?\n","a7b6170f":"# Question Answer\n### Q: Which are the most popular shop and what is the total sale at each shop?","1d8e09d6":"### BUT why?\n* why is that we have some Shops for which sales data is given for last month but are not present in test data\n* maybe due to less monthly data given so lets see.\n","4e1a6f43":"## Q: Which Shop has the most items available and number of unique items?","8d5f52d6":"### Q: Whats the total sales for each month? ","19b4aee1":"#### learning materials on how convert any date column to datetime dtype: \n\n1. https:\/\/pandas.pydata.org\/docs\/user_guide\/timeseries.html#providing-a-format-argument\n2. https:\/\/www.kaggle.com\/alexisbcook\/parsing-dates\n","1e70dd8f":"lets check item_cent_day value greater than or equal to 1000","82ed80bd":"### Q: Whats the percentage contribution of each Top 25 products of total sales?","e586b009":"## Lets Explore our Test Dataset","cff415db":"# SUMMARY\n#### 1. Most popular shop is 31 and least popular shop is shop 36\n#### 2. Shop 25 has most variety of items where as shop 36 has least variety of items.\n#### 3. Shop 31 has the highest sale for most month except the last two month of the data.\n#### 4. item_id 20959 is most sold item as well as it is most sold item for maximum no of shop\n#### 5. item_id 1590 is the least sold item.\n#### 6. Weekends sale is more than weekdays and on saturday our sale is maximum.\n#### 7. Sale is maximum in the month of December and minimum in the month of April.\n#### 8. Highest sale is recorded on 2nd day of the month and lowest sale is recorded on the 11th day of the month.\n#### 9. Each passing year our sale is decreasing.","edd1af7a":"## Outliers","a662404b":"### item_id 20949 is the most sold item at each shop","53438e9d":"## Q: Which are the Top 25 sold Items?","25693488":"#### WE see that their are some shop_id missing in our test data it might be for the shops which has less number of monthly data or the shops which last month data is missing ie. 33","e0882889":"## Loading the Files","6738baa5":"### Q: Which shop has the highest sale for each month and whats the total sale?","41b729a4":"### We see that year on year our sale is decreasing for every month.","29368739":"### 2nd day of the month have the highest sale and 11th day of the month has the lowest sale.","6bed730e":"### We see that during weekends our sale is more as compared to weekdays with sale on saturday the highest.","fe43c69b":"lets use box plot to check the outlies in our sales dataset ","a52176d3":"lets only take item_cnt_day with values < 1001 and item_price < 100000 ","bbc4143b":"## Q: Which is the most sold item at each shop?","88183c64":"#### we are mutiplyiing day 31 item_cnt_day sum with (34\/20 * 0.87) because we have 34 months and in our train data 20 months out of 34 months have 31 days and also multiplying it with 0.87 because on average our sale is decreasing and is 0.87 of sale of previous year. ","293237e0":"Our date column Dtype is **object**, so we need it to convert to **datetime** datatype for our timeseries analysis","42f24882":"# **Predicting Future Sales**\nWe are provided with daily historical sales data day wise.\n\n### The task is to forecast the total amount of products sold in every shop for month November 2015 for the test set.\n\nWe have got 6 files which includes one sample dataset for submission purpose, lets look at the data fields\n\n## File descriptions\n* sales_train.csv - the training set. Daily historical data from January 2013 to October 2015.\n* test.csv - the test set. You need to forecast the sales for these shops and products for November 2015.\n* sample_submission.csv - a sample submission file in the correct format.\n* items.csv - supplemental information about the items\/products.\n* item_categories.csv  - supplemental information about the items categories.\n* shops.csv- supplemental information about the shops\n\n## **Data Feilds**\n* ID - an Id that represents a (Shop, Item) tuple within the test set\n* shop_id - unique identifier of a shop\n* item_id - unique identifier of a product\n* item_category_id - unique identifier of item category\n* item_cnt_day - number of products sold. You are predicting a monthly amount of this measure\n* item_price - current price of an item\n* date - date in format dd\/mm\/yyyy\n* date_block_num - a consecutive month number, used for convenience. January 2013 is 0, February 2013 is 1,..., October 2015 is 33\n* item_name - name of item\n* shop_name - name of shop\n* item_category_name - name of item category\n","dc1fd393":"## Q: Which day of the month on our sale is most?\n\n#### ","9b86b31d":"### item_id 20949 is the most sold item.","e2c1a99f":"### Q: How many total items are sold on each weekday?","eafb882b":"sales.head(","3e74a1c5":"### So we have got \n* shops that are present in **sales data** but not in **test data** - shop_id_notin_test \n+ shops with **missing sales data** for the **last month** - shop_id_month_miss","a5dedec3":"## Q: What is the Month wise sale for each Year?","7a33902a":"## Lets explore our sales dataset first ","be367b12":"#### So due to less data for shop_id 9,20 test test data for this shop are also not given","b8baab8b":"https:\/\/www.kaggle.com\/snanilim\/sales-preprocessing-and-prediction-by-xgboost\n* https:\/\/www.kaggle.com\/dlarionov\/feature-engineering-xgboost\n* https:\/\/www.kaggle.com\/jagangupta\/time-series-basics-exploring-traditional-ts","703506cc":"### We can see that we have different no. of unique items and shops in both the sales dataset and test dataset \n * In test dataset we have 5100 unique items whereas in sales dataset there are 21807 items\n * Also in test data we have 42 unique shops but in sales data we have got 60.\n\n#### So it might be that some items and shops from both the test dataset and sales data will be missing.","db83c643":"#### Now lets find out **shop_id** that are not present in **test** dataset but are not present in our **sales** dataset","3636c946":"https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.vstack.html"}}