{"cell_type":{"1ad96999":"code","6c078344":"code","7f78af19":"code","12533829":"code","a2c635ef":"code","4593464d":"code","850776f0":"code","bb1d7749":"code","5974a1b6":"code","76a20a4f":"markdown","180feb20":"markdown","cac48d16":"markdown","78da2853":"markdown","af0ef6e7":"markdown","072a87ab":"markdown","8c34dd04":"markdown"},"source":{"1ad96999":"import os\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import (EarlyStopping, ModelCheckpoint, \n                                        ReduceLROnPlateau)\nnp.random.seed(452)","6c078344":"main_dir = '..\/input\/cassava-leaf-disease-classification'\ntrain_df = pd.read_csv(main_dir + '\/train.csv')\ntrain_df['label'] = train_df['label'].astype('str')\ntrain_df.head()","7f78af19":"# check the shape of the images\ntrain_image_paths = main_dir + '\/train_images'\n\nfor file in train_df.image_id[:5]:\n    print(plt.imread(os.path.join(train_image_paths, file)).shape)","12533829":"IMAGE_SIZE = (224, 224)\nBATCH_SIZE = 16 \nSTEPS_PER_EPOCH = len(train_df) * 0.8 \/\/ BATCH_SIZE\nVALIDATION_STEPS = len(train_df) * 0.2 \/\/ BATCH_SIZE\nEPOCHS = 10","a2c635ef":"# create train and validation augmentations\ntrain_aug = ImageDataGenerator(rotation_range = 40,\n                               width_shift_range = 0.2, \n                               height_shift_range = 0.2, \n                               zoom_range = 0.2,\n                               shear_range = 0.2, \n                               brightness_range = [0.2, 1.0], \n                               horizontal_flip = True, \n                               vertical_flip = True, \n                               validation_split = 0.2, \n                               fill_mode = 'nearest')\n\n\nval_aug = ImageDataGenerator(validation_split = 0.2)\n\n\n# create train and validation generators\n# If class_mode = 'sparse', y_col = 'label' column values must be strings\ntrain_gen = train_aug.flow_from_dataframe(train_df, \n                                          directory = train_image_paths, \n                                          subset = 'training', \n                                          x_col = 'image_id',\n                                          y_col = 'label', \n                                          target_size = IMAGE_SIZE, \n                                          batch_size = BATCH_SIZE, \n                                          class_mode = 'sparse', \n                                          seed = 42, \n                                          shuffle = True)\n\n\nval_gen = val_aug.flow_from_dataframe(train_df, \n                                      directory = train_image_paths, \n                                      subset = 'validation', \n                                      x_col = 'image_id',\n                                      y_col = 'label', \n                                      target_size = IMAGE_SIZE, \n                                      batch_size = BATCH_SIZE, \n                                      class_mode = 'sparse', \n                                      seed = 42, \n                                      shuffle = False)","4593464d":"# base model\nbase_model = tf.keras.applications.EfficientNetB0(weights = 'imagenet', \n                                                  include_top = False, \n                                                  input_shape = IMAGE_SIZE + (3, ))\n\nx = layers.GlobalAveragePooling2D()(base_model.output)\nx = layers.Dropout(0.5)(x)\noutput = layers.Dense(5, activation = 'softmax')(x)\nmodel = tf.keras.Model(base_model.input, output)","850776f0":"# save model weights\nmodel_path = ModelCheckpoint('best_weights.h5', \n                             save_best_only = True, \n                             monitor = 'val_loss', \n                             mode = 'min', \n                             verbose = 1)\n\n# learning rate scheduler\nreduce_lr = ReduceLROnPlateau(monitor = 'val_loss', \n                              factor = 0.3, \n                              patience = 2, \n                              min_lr = 1e-6, \n                              mode = 'min', \n                              verbose = 1)\n\n# early stopping\nearly_stopping = EarlyStopping(monitor = 'val_loss', \n                               patience = 3, \n                               mode = 'min', \n                               verbose = 1, \n                               restore_best_weights = True)","bb1d7749":"# compile the model\nmodel.compile(optimizer = tf.keras.optimizers.Adam(1e-3), \n              loss = 'sparse_categorical_crossentropy', \n              metrics = ['accuracy'])\n\n# fit the model\nhistory = model.fit(train_gen, \n                    steps_per_epoch = STEPS_PER_EPOCH, \n                    epochs = EPOCHS, \n                    validation_data = val_gen, \n                    validation_steps = VALIDATION_STEPS, \n                    callbacks = [model_path, early_stopping, reduce_lr])","5974a1b6":"# plot the loss and accuracy of the model\nhistory_df = pd.DataFrame(history.history)\nhistory_df.loc[:, ['loss', 'val_loss']].plot()\nhistory_df.loc[:, ['accuracy', 'val_accuracy']].plot();","76a20a4f":"## Load pretrained EfficientNetB7 Model","180feb20":"## Set up some global variables","cac48d16":"## Callbacks","78da2853":"## Compile and fit the model","af0ef6e7":"## Import Section","072a87ab":"## Data Augmentation","8c34dd04":"## Read image data "}}