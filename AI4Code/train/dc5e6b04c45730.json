{"cell_type":{"a98fdfad":"code","042ae5cd":"code","72ca1d81":"code","ed2bfff4":"code","cfeaf9ae":"code","fe65e969":"code","e71d061b":"code","82b9a2eb":"code","d2255d1a":"code","671c7a44":"code","dd9e5805":"code","293712e1":"code","0c4077cc":"code","f3fe5d70":"code","b5319295":"code","38cf5d94":"code","1664dc9b":"code","c166f885":"markdown","81c8f114":"markdown","ed3be841":"markdown","ad3e0711":"markdown","a990e278":"markdown","2511f05c":"markdown"},"source":{"a98fdfad":"# Importing Libraries\nimport os\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras import layers as KL\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, ModelCheckpoint\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D as Convolution2D\nfrom tensorflow.keras.layers import MaxPooling2D\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.preprocessing import image","042ae5cd":"TRAIN_PATH = '\/kaggle\/input\/histopathologic-cancer-detection\/train\/'\nTRAIN_LABELS = '\/kaggle\/input\/histopathologic-cancer-detection\/train_labels.csv'\nSIZE_IMG = 96\nEPOCHS = 10\n\nmodel_path = '..\/input\/resnet-cancer-detection\/my_model.h5'\nsaved_model = os.path.isfile(model_path)","72ca1d81":"df = pd.read_csv(TRAIN_LABELS, dtype=str)\n\n#remove unwanted data detected by other kaggle users\ndf = df[df['id'] != 'dd6dfed324f9fcb6f93f46f32fc800f2ec196be2']\ndf = df[df['id'] != '9369c7278ec8bcc6c880d99194de09fc2bd4efbe']\n\nprint(df['label'].value_counts(), \n      '\\n\\n', df.describe(), \n      '\\n\\n', df.head())","ed2bfff4":"def display_random_data(dataframe, path, rows):\n\n    imgs = dataframe.sample(rows *2)\n    fig, axarr = plt.subplots(2, rows, figsize=(rows*10, rows*4))\n\n    for i in range(1,rows*2+1):\n        img_path = path + imgs.iloc[i-1]['id'] + '.tif'\n        img = image.load_img(img_path, target_size=(96, 96))\n        img = image.img_to_array(img)\/255\n        axarr[i\/\/(rows+1),i%rows].imshow(img)\n        axarr[i\/\/(rows+1),i%rows].set_title(imgs.iloc[i-1]['label'], fontsize=35)\n        axarr[i\/\/(rows+1),i%rows].axis('off')\n        \ndisplay_random_data(df,TRAIN_PATH, 5)","cfeaf9ae":"#add .tif to ids in the dataframe to use flow_from_dataframe\ndf[\"id\"]=df[\"id\"].apply(lambda x : x +\".tif\")\ndf.head()","fe65e969":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)","e71d061b":"train_generator=train_datagen.flow_from_dataframe(\n    dataframe=df,\n    directory=TRAIN_PATH,\n    x_col=\"id\",\n    y_col=\"label\",\n    subset=\"training\",\n    batch_size=64,\n    shuffle=True,\n    class_mode=\"binary\",\n    target_size=(96,96))","82b9a2eb":"valid_generator=train_datagen.flow_from_dataframe(\n    dataframe=df,\n    directory=TRAIN_PATH,\n    x_col=\"id\",\n    y_col=\"label\",\n    subset=\"validation\",\n    batch_size=64,\n    shuffle=True,\n    class_mode=\"binary\",\n    target_size=(96,96))","d2255d1a":"def build_model():\n    # Initialising the CNN\n    classifier = Sequential()\n\n    classifier.add(Convolution2D(32, (3, 3), input_shape = (96, 96, 3), activation = 'relu'))\n\n    classifier.add(MaxPooling2D(pool_size = (2, 2)))\n    classifier.add(Convolution2D(32, (3, 3), activation = 'relu'))\n    classifier.add(MaxPooling2D(pool_size = (2, 2)))\n\n    classifier.add(Flatten())\n\n    classifier.add(Dense(128, activation = 'relu'))\n    classifier.add(Dense(1, activation = 'sigmoid'))\n\n    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n    \n    return classifier","671c7a44":"classifier = build_model()\nclassifier.summary()","dd9e5805":"history = classifier.fit_generator(train_generator,\n                              steps_per_epoch=train_generator.n\/\/train_generator.batch_size, \n                              validation_data=valid_generator,\n                              validation_steps=valid_generator.n\/\/valid_generator.batch_size,\n                              epochs=EPOCHS)","293712e1":"def analyse_results(epochs):\n    metrics = ['loss', \"accuracy\"]\n        \n    plt.style.use(\"ggplot\")\n    (fig, ax) = plt.subplots(1, 2, figsize=(30, 5))\n    fig.subplots_adjust(hspace=0.1, wspace=0.3)\n\n    for (i, l) in enumerate(metrics):\n        title = \"Loss for {}\".format(l) if l != \"loss\" else \"Total loss\"\n        ax[i].set_title(title)\n        ax[i].set_xlabel(\"Epoch #\")\n        ax[i].set_ylabel(l.split('_')[-1])\n        ax[i].plot(np.arange(0, epochs), history.history[l], label=l)\n        ax[i].legend() \n\nif EPOCHS > 1 and saved_model == False:        \n    analyse_results(EPOCHS)","0c4077cc":"test_path = '\/kaggle\/input\/histopathologic-cancer-detection\/test\/'\ndf_test = pd.read_csv('..\/input\/histopathologic-cancer-detection\/sample_submission.csv')\ndf_test[\"id\"]=df_test[\"id\"].apply(lambda x : x +\".tif\")","f3fe5d70":"test_datagen = ImageDataGenerator(rescale=1.\/255,\n                                 samplewise_std_normalization= True)\n\ntest_generator = test_datagen.flow_from_dataframe(\n    dataframe=df_test,\n    directory=test_path,\n    x_col=\"id\",\n    y_col=None,\n    target_size=(96, 96),\n    color_mode=\"rgb\",\n    batch_size=64,\n    class_mode=None,\n    shuffle=False,\n)","b5319295":"test_generator.reset()\npred=classifier.predict_generator(test_generator,verbose=1).ravel()","38cf5d94":"results = dict(zip(test_generator.filenames, pred))\n\nlabel = []\nfor i in range(len(df_test[\"id\"])):\n    label.append(results[df_test[\"id\"][i]])\n    \ndf_test[\"id\"]=df_test[\"id\"].apply(lambda x : x[:-4])","1664dc9b":"submission=pd.DataFrame({\"id\":df_test[\"id\"],\n                      \"label\":label})\nsubmission.to_csv(\"submission.csv\",index=False)\nsubmission.head()","c166f885":"## Load Data","81c8f114":"## Build Model","ed3be841":"## Predictions","ad3e0711":"## Data Generator","a990e278":"## CSV Submission","2511f05c":"## Import Libraries"}}