{"cell_type":{"6f5d0bbb":"code","f95c7896":"code","3332954a":"code","27cafc26":"code","3945cacd":"code","8c751996":"code","f7e6e34b":"code","431befef":"code","84d70d78":"code","232aeb5b":"code","4d2c9ba5":"code","d3a90638":"code","7d6f74b4":"code","818e8f02":"code","0414f713":"code","937fd082":"code","7727ae61":"code","1cc8db35":"code","560b0a77":"code","9a8b52c4":"code","1e1c9d25":"code","08fb5f59":"code","e484bb9c":"code","f5d7c78d":"code","1ee8807b":"code","459b9718":"code","31dd3e93":"code","b506b4c2":"code","fa34b71c":"code","db0dde19":"code","a200ba59":"code","7fe2ccfe":"code","772c84ad":"code","1b3d4a71":"code","6168fadd":"code","b8749a2a":"code","f7ffa543":"code","153e16b3":"code","2c86380d":"code","78b50b93":"code","2752d7d6":"code","a96ab571":"code","5ee37ef3":"code","767d20ec":"code","4a4da7e2":"code","c0e258a3":"code","5b58d583":"code","a044ce2c":"code","4a08dcb5":"code","f41b9395":"code","9c83914d":"code","ff6f76e4":"code","3e303aad":"code","045d4df7":"code","95f210a5":"code","06697395":"code","39ec49f8":"code","62a9f5bd":"code","80cce1fc":"code","cd2b1de0":"markdown","e4ac4e85":"markdown","ca1b1f26":"markdown","71a4e6c2":"markdown","628a2237":"markdown","95f6d31b":"markdown","8689a168":"markdown","4061ad79":"markdown","57072a54":"markdown","8acb7c63":"markdown","e779f548":"markdown","8b1c30ab":"markdown","0c7173b2":"markdown","0b141a1e":"markdown","67d0f751":"markdown","bc1d5731":"markdown"},"source":{"6f5d0bbb":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport re\nimport plotly.graph_objects as go\n","f95c7896":"df = pd.read_csv('..\/input\/data-engineer-jobs\/DataEngineer.csv')\ndf.head()","3332954a":"df.shape","27cafc26":"df.drop(['Competitors','Easy Apply'], axis=1, inplace =True)","3945cacd":"df.replace(['-1'], [np.nan], inplace=True)\ndf.replace(['-1.0'], [np.nan], inplace=True)\ndf.replace([-1], [np.nan], inplace=True)","8c751996":"missing_data = df.isnull()\nfor column in missing_data.columns.values.tolist():\n    print(column)\n    print(missing_data[column].value_counts())\n    print(\"\")\ndf.info()","f7e6e34b":"new_salary_range = df['Salary Estimate'].str.rsplit('-',expand=True)\nMin_Salary = new_salary_range[0]\nMin_Salary = Min_Salary.str.replace('K','')\nMin_Salary = Min_Salary.str.replace('$','', regex=True)\n\nMax_Salary = new_salary_range[1]\n\n#RegEx pattern to find (AAAA) anthing in and including the crackets\n\npattern =r'\\(([^)]+)\\)'\nMax_Salary = Max_Salary.str.replace(pattern,'', regex=True)\n\nMax_Salary = Max_Salary.str.replace('K','', regex=True)\nMax_Salary = Max_Salary.str.replace('$','', regex=True)","431befef":"df['Minimum Salary(in grand)'] = Min_Salary\ndf['Maximum Salary(in grand)'] = Max_Salary\ndf.drop(['Salary Estimate'], axis =1,inplace=True)\n#conversion of min salary object type to int64 dtypes\ndf['Minimum Salary(in grand)'] = pd.to_numeric(df['Minimum Salary(in grand)'])\ndf['Maximum Salary(in grand)'] = pd.to_numeric(df['Maximum Salary(in grand)'])","84d70d78":"#cleaning the company column\ndf['Company Name'] = df['Company Name'].str.replace('\\n.*', ' ',regex=True)","232aeb5b":"Location = df['Location'].str.rsplit(',',expand=True)\nLocation_City = Location[0]\nLocation_State = Location[1]\ndf['Location City'] = Location_City\ndf['Location State'] = Location_State\ndf.drop('Location', axis =1, inplace= True)\n\nHeadquarters = df['Headquarters'].str.split(',',expand=True)\nHeadquarters_City = Headquarters[0]\nHeadquarters_State = Headquarters[1]\ndf['Headquarters City'] = Headquarters_City\ndf['Headquarters State'] = Headquarters_State\ndf.drop('Headquarters',axis =1, inplace= True)\n","4d2c9ba5":"df['Job Title'].value_counts()","d3a90638":"department = df['Job Title'].str.split(',', expand = True)\ndf['Job Title'], df['Department'] = department[0],department[1]","7d6f74b4":"df['Department'].isnull().value_counts()","818e8f02":"df.drop('Department',axis =1,inplace =True)","0414f713":"df['Job Title'].value_counts()","937fd082":"#reaplce the Sr. with Senion\ndf['Job Title'] = df['Job Title'].str.replace('Sr.','Senior', regex=True)","7727ae61":"refine_job_title = list(df['Job Title'])\noutput = []\nfor element in refine_job_title:\n#Re will find the pattern with the following expression [\\w\\s\\S]*Data[\\w\\s\\S]*Engineer[\\w\\s\\S]*\n    x = re.sub(\"[\\w\\s\\S]*Data[\\w\\s\\S]*Engineer[\\w\\s\\S]*\",'Data Engineer', element,flags=re.IGNORECASE)\n    output.append(x)","1cc8db35":"#converting that output column to data frame \ndf['Job_Title']=pd.DataFrame(output)\n#droping the Job title coumn\ndf.drop('Job Title',axis=1,inplace =True)\n\n#if you find any other jib title it will cleaned through the same way I used above","560b0a77":"df['Job_Title'].value_counts()","9a8b52c4":"#We will clean the revenue field and divide the data into Min revenue and Max revenue \ndf['Revenue'].value_counts()","1e1c9d25":"#subsituting the N\/A value with none\ndf['Revenue'] = df['Revenue'].replace('Unknown \/ Non-Applicable',None)\n#We define the RegEx pattern so that it will remove (USD) from end\npattern_1 = r'\\(([^)]+)\\)'\ndf['Revenue'] = df['Revenue'].str.replace(pattern_1,'', regex=True)\ndf['Revenue'] =df['Revenue'].str.replace('$','',regex=True)\ndf['Revenue'] =df['Revenue'].str.replace('+','',regex=True)","08fb5f59":"df['Revenue'].value_counts()","e484bb9c":"df['Revenue'] = df['Revenue'].str.replace('2 to 5 billion', '2billion to 5 billion',regex=True)\ndf['Revenue'] = df['Revenue'].str.replace('5 to 10 billion', '5billion to 10billion',regex=True)\ndf['Revenue'] = df['Revenue'].str.replace('1 to 2 billion', '1billion to 2billion',regex=True)\ndf['Revenue'] = df['Revenue'].str.replace('Less than 1 million', '0 to 1million',regex=True)\ndf['Revenue'] = df['Revenue'].str.replace('10 billion', '10billion to 20billion',regex=True) #$10 Billion+ for this max amount could be anything.\ndf['Revenue'] = df['Revenue'].str.replace(' billion', 'billion',regex=True)","f5d7c78d":"df['Revenue'].value_counts()","1ee8807b":"df['Revenue'] = df['Revenue'].str.replace('million', '',regex=True)\ndf['Revenue'] = df['Revenue'].str.replace('billion', '000',regex=True)","459b9718":"df['Revenue'].value_counts()","31dd3e93":"Revenue =df['Revenue'].str.split('to',expand =True)\ndf['Minimum Revenue'] = Revenue[0]\ndf['Maximum Revenue'] = Revenue[1]\ndf['Maximum Revenue'] = pd.to_numeric(df['Maximum Revenue'])\ndf['Minimum Revenue'] = pd.to_numeric(df['Minimum Revenue'])","b506b4c2":"df['Size'].value_counts()","fa34b71c":"df['Size'] = df['Size'].str.replace('employees', '',regex=True)\ndf['Size'] = df['Size'].str.replace('+', '',regex=True)\ndf['Size'] = df['Size'].replace('Unknown', None)\ndf['Size'] = df['Size'].str.replace('10000', '11000',regex=True) #10000+ employess max could be any number. We take a ranadon number\ndf[['Min_EmployeeSize','Max_EmployeeSize']] = df['Size'].str.split('to',expand=True)\ndf.drop('Size',axis=1,inplace= True)","db0dde19":"df.head()","a200ba59":"jobs_total = df.groupby(['Job_Title'], as_index=False)['Company Name'].count().sort_values('Company Name',ascending=False).head(15)\n","7fe2ccfe":"fig = px.bar(jobs_total, \n             x='Job_Title',\n             y='Company Name', \n             title='Top 15 Jobs',\n             labels = {\"Company Name\": \"Total number of Jobs\"},\n             color='Job_Title',\n             text='Company Name'\n            )\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n# Displaying the graph\nfig.show()","772c84ad":"jobs_company = df.groupby(['Company Name'], as_index=False)['Job_Title'].count().sort_values('Job_Title',ascending=False).head(20)","1b3d4a71":"fig1 = px.bar(jobs_company, x='Company Name',\n              y='Job_Title', \n              title='Top 20 companies with highest number of jobs',\n              labels = {\"Job Title\": \"Total number of Jobs\"},\n              color ='Company Name',\n              text='Job_Title'\n             )\nfig1.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n# Displaying the graph\nfig1.show()","6168fadd":"max_hq = df.groupby(['Company Name'], as_index=False)['Headquarters City'].count().sort_values('Headquarters City',ascending=False).head(20)\nhq_city = df[\"Headquarters City\"].value_counts().sort_values(ascending=False).head(25).rename_axis('Headquarters City').reset_index(name='count')\n","b8749a2a":"fig4 = px.pie(data_frame = max_hq, \n              names='Company Name',\n              values='Headquarters City', \n              labels = {\"Headquarters City\": \"No. of HQ's\"},\n              title = \"Top 25 companies with Maximum number of Headquarters\")   \nfig4.show()\n\nfig3 = px.pie(hq_city, \n              names='Headquarters City', \n              values='count',\n              labels = {\"count\":\"No. of HQ's\"},\n              title = \"Total Number of Headquarters each city have\")\n  \n\nfig3.show()\n#fig.update_layout(height=600, width=800, title_text=\"Side By Side Subplots\")\n","f7ffa543":"df_rev = df.groupby('Company Name', as_index=False)[['Minimum Revenue','Maximum Revenue']].mean()","153e16b3":"fig6 = px.scatter(df_rev,\n                  x='Company Name',\n                  y='Maximum Revenue', \n                  color='Company Name',\n                  title='Maxmimum Revenue by each company',\n                  labels = {'Maximum Revenue':'Revenue(Million Dollars)'}\n                 )\nfig6.show()\nfig7 = px.scatter(df_rev,\n                  x='Company Name',\n                  y='Minimum Revenue', \n                  color='Company Name',\n                  title='Minimum Revenue by each company',\n                  labels = {'Minimum Revenue':'Revenue(Million Dollars)'}\n                 )\nfig7.show()\n","2c86380d":"df_sec = df.groupby('Sector', as_index=False)[['Minimum Revenue','Maximum Revenue']].mean()\ndf_sec.sort_values('Minimum Revenue',inplace=True, ascending=False)\ndf_sec['Average Revenue'] = df_sec[['Minimum Revenue','Maximum Revenue']].mean(axis=1)","78b50b93":"import plotly.graph_objects as go\n\n\nfig8 = go.Figure()\nfig8.add_trace(go.Bar(\n    x=df_sec['Sector'],\n    y=df_sec['Maximum Revenue'],\n    text=df_sec['Maximum Revenue'],\n    marker_color=['#ffff00','#000080', '#0000ff', '#e87d7d', '#008080',\n                  '#00ffff', '#ffa500', '#c99c9c', '#7fffd4', '#8a2be2',\n                 '#1f77b4',  '#ff7f0e','#2ca02c',  '#d62728', '#9467bd',  \n                 '#8c564b', '#e377c2', '#7f7f7f',  '#bcbd22','#17becf',\n                '#ff00ff', '#008000', '#00ff00', '#808000'],\n    showlegend=False\n))\nfig8.add_trace(go.Bar(\n    x=df_sec['Sector'],\n    y=df_sec['Minimum Revenue'],\n    text=df_sec['Minimum Revenue'],\n    marker_color=['#ffff00','#000080', '#0000ff', '#e87d7d', '#008080',\n                  '#00ffff', '#ffa500', '#c99c9c', '#7fffd4', '#8a2be2',\n                 '#1f77b4',  '#ff7f0e','#2ca02c',  '#d62728', '#9467bd',  \n                 '#8c564b', '#e377c2', '#7f7f7f',  '#bcbd22','#17becf',\n                '#ff00ff', '#008000', '#00ff00', '#808000'],\n    showlegend=False\n))\n\nfig8.add_trace(go.Scatter(\n    x=df_sec['Sector'],\n    y=df_sec['Average Revenue'],\n    mode='lines+markers',\n    name='Average Revenue'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig8.update_layout( xaxis_tickangle=-45,title='Maximum,Minimum & Average Revenue by each sector', \n                  xaxis_title='Sector',\n                  yaxis_title='Revenue(Million Dollars)',\n                  showlegend=True\n                  )\nfig8.update_traces(texttemplate='%{text:.2s}',textposition='auto',selector=dict(type='bar'))\nfig8.show()","2752d7d6":"#If anybody want to plot the chart with py express\n'''fig8 = px.bar(df_sec,\n              x='Sector',\n              y='Maximum Revenue', \n              color='Sector', \n              title='Maximum Revenue by each sector',\n              text='Maximum Revenue',\n              labels={'Maximum Revenue':'Revenue(Million Dollars)'})\nfig8.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig8.show()\nfig9 = px.bar(df_sec,\n              x='Sector',\n              y='Minimum Revenue', \n              color='Sector',\n              text='Minimum Revenue',\n              title='Minimum Revenue by each sector',\n              labels={'Minimum Revenue':'Revenue(Million Dollars)'})\nfig9.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig9.show()'''","a96ab571":"df_ind = df.groupby('Industry', as_index=False)[['Minimum Revenue','Maximum Revenue']].mean()\ndf_ind.sort_values('Minimum Revenue',inplace=True, ascending=False)\ndf_ind['Average Revenue'] = df_ind[['Minimum Revenue','Maximum Revenue']].mean(axis=1)","5ee37ef3":"fig9 = go.Figure()\nfig9.add_trace(go.Bar(\n    x=df_ind['Industry'],\n    y=df_ind['Maximum Revenue'],\n    text=df_ind['Maximum Revenue'],\n    name='Maximum Revenue'\n))\nfig9.add_trace(go.Bar(\n    x=df_ind['Industry'],\n    y=df_ind['Minimum Revenue'],\n    text=df_ind['Minimum Revenue'],\n    name='Minumum Revenue'\n\n))\nfig9.add_trace(go.Scatter(\n    x=df_ind['Industry'],\n    y=df_ind['Average Revenue'],\n    mode='lines+markers',\n    name='Average Revenue'\n))\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig9.update_layout( xaxis_tickangle=-45,title='Maximum, Minimum & Average Revenue by each Industry', \n                  xaxis_title='Industry',\n                  yaxis_title='Revenue(Million Dollars)',\n                  )\nfig9.update_traces(texttemplate='%{text:.2s}',textposition='auto',selector=dict(type='bar'))\nfig9.show()","767d20ec":"df_job = df.groupby('Job_Title', as_index=False)[['Minimum Salary(in grand)','Maximum Salary(in grand)']].mean().sort_values(['Maximum Salary(in grand)','Minimum Salary(in grand)'], ascending=False).head(20)","4a4da7e2":"fig10 = go.Figure()\nfig10.add_trace(go.Bar(\n    y=df_job['Job_Title'],\n    x=df_job['Minimum Salary(in grand)'],\n    text=df_job['Minimum Salary(in grand)'],\n    name='Minimum Revenue',\n    orientation='h',\n))\nfig10.add_trace(go.Bar(\n    y=df_job['Job_Title'],\n    x=df_job['Maximum Salary(in grand)'],\n    text=df_job['Maximum Salary(in grand)'],\n    name='Maximum Revenue',\n    orientation='h'\n\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig10.update_layout(barmode='group', xaxis_tickangle=-45,title='Maximum and Minmum salaries of different jobs', \n                  xaxis_title='Salary in grand(K)',\n                  yaxis_title='Job Title',\n                  )\nfig10.update_traces(texttemplate='%{text:.2s}',textposition='outside')\nfig10.show()","c0e258a3":"'''from wordcloud import WordCloud\n# instantiate a word cloud object\njob = df['Job Title']\nwc = WordCloud(background_color='white').generate(str(' '.join(job)))\n\n# display the cloud\nfig = plt.figure()\nfig.set_figwidth(14)\nfig.set_figheight(18)\n\nplt.imshow(wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()'''","5b58d583":"fig10 = px.box(df['Rating'],points=\"all\", title=\"Rating's\")\nfig10.show()","a044ce2c":"df_found = df.value_counts('Founded')","4a08dcb5":"fig11 = px.bar(df_found,\n               title='Number of comapny founded in differnet years',\n                labels = {\"Founded\": \"Year\"})\nfig11.show()\n","f41b9395":"usa_maps = df.groupby('Location State', as_index=False)['Job_Title'].count()","9c83914d":"\nfig11 = px.choropleth(data_frame=usa_maps,locations= ['AZ','CA','DE','FL','IL','NJ','NY','PA','TX'],  locationmode=\"USA-states\", \n                      color = ['200', '600','16','128','200', '24','187','173','1000'],\n                      labels={'color':'number of jobs', 'locations':'State'}, \n                      scope=\"usa\") \nfig11.update_layout( title_text = 'Total No. of Jobs in different states',geo_scope='usa',showlegend=False)\nfig11.show()\n","ff6f76e4":"usa_maps1 = df.groupby('Location State', as_index=False)[['Minimum Salary(in grand)', 'Maximum Salary(in grand)']].mean().sort_values(['Minimum Salary(in grand)', 'Maximum Salary(in grand)'],ascending=False)\nusa_maps1['Average salary'] = usa_maps1[['Minimum Salary(in grand)', 'Maximum Salary(in grand)']].mean(axis=1)","3e303aad":"fig12 = px.choropleth(data_frame=usa_maps1,locations=['CA','IL', 'NY', 'DE', 'AZ', 'NJ', 'PA', 'TX', 'FL'] , locationmode=\"USA-states\", \n                      color = ['127.61833333333334','102.58500000000001','99.38235294117646','112.96875','99.1625','97.10416666666666','100.73121387283237','89.821','61.9765625'],\n                      labels={'color':'Average Salary(in grand\"k\")', 'locations':'State'}, \n                      scope=\"usa\") \nfig12.update_layout( title_text = 'Average salary in different states',geo_scope='usa',showlegend=False)\nfig12.show()","045d4df7":"job = list(df['Job Description'])\njob_des = [x.lower() for x in job]","95f210a5":"lang = ['javascript', 'html\/css', 'java', 'powershell','python', 'sql', 'php', 'c#', 'c++','go']\ndatabase = ['mysql','microsoft sql', 'postgresql', 'sqlite', 'mongodb', 'redis', 'elasticsearch', 'oracle', 'mariadb', 'dynamodb']\nplatform = ['aws','linux','windows','docker','google cloud', 'macos', 'kubernetes','android','slack','azure']\nwebframe = ['asp.net','angular','django','express','flask','laravel','react.js','spring','vue.js','jquery']","06697395":"x = []\nfor a in lang:\n    for y in job_des:\n        if a in y:\n            x.append(a)\ndf_lang = pd.DataFrame(data=x,columns=['Languages'])\ndf_lang= df_lang.value_counts().rename_axis('Language').reset_index(name='counts')\n\n\n\nb = []\nfor a in webframe:\n    for y in job_des:\n        if a in y:\n            b.append(a)\ndf_web = pd.DataFrame(data=b,columns=['webframe'])\ndf_web= df_web.value_counts().rename_axis('Webframe').reset_index(name='counts')\n\n\nc = []\nfor a in database:\n    for y in job_des:\n        if a in y:\n            c.append(a)\ndf_db = pd.DataFrame(data=c,columns=['database'])\ndf_db= df_db.value_counts().rename_axis('Database').reset_index(name='counts')\n\n\nd = []\nfor a in platform:\n    for y in job_des:\n        if a in y:\n            d.append(a)\ndf_pl= pd.DataFrame(data=d,columns=['platform'])\ndf_pl= df_pl.value_counts().rename_axis('Platform').reset_index(name='counts')\n","39ec49f8":"fig_2 = make_subplots(rows=2, cols=2,\n                      subplot_titles=(\"Top 10 languages \", \n                                      \" Top 10 webframe \",\n                                     \" Top 10 database \",\n                                     \" Top 10 platform \"))\nfig_2.add_trace(go.Bar(\n    x=df_lang['Language'],\n    y=df_lang['counts'],\n    name='',\n    marker_color=['#ffff00','#000080', '#0000ff', '#e87d7d', '#008080',\n                  '#00ffff', '#ffa500', '#c99c9c', '#7fffd4', '#8a2be2']\n    ),\n              row=1,col=1 )\n\nfig_2.add_trace(go.Bar(\n    x=df_web['Webframe'],\n    y=df_web['counts'],\n    name='',\n    marker_color=['#ffff00','#000080', '#0000ff', '#e87d7d', '#008080',\n                  '#00ffff', '#ffa500', '#c99c9c', '#7fffd4', '#8a2be2']\n    ),\n              row=1,col=2 )\n\nfig_2.add_trace(go.Bar(\n    x=df_db['Database'],\n    y=df_db['counts'],\n    marker_color=['#ffff00','#000080', '#0000ff', '#e87d7d', '#008080',\n                  '#00ffff', '#ffa500', '#c99c9c', '#7fffd4', '#8a2be2'],\n    name='',\n    ),\n              row=2,col=1 )\n\nfig_2.add_trace(go.Bar(\n    x=df_pl['Platform'],\n    y=df_pl['counts'],\n    marker_color=['#ffff00','#000080', '#0000ff', '#e87d7d', '#008080',\n                  '#00ffff', '#ffa500', '#c99c9c', '#7fffd4', '#8a2be2',],\n    name='',\n    ),\n              row=2,col=2 )\n\nfig_2.update_layout(showlegend=False, \n                    plot_bgcolor='rgba(0,0,0,0)',\n                    font=dict(family='Arial', \n                              size=12, \n                              color='black'))\nfig_2.show()","62a9f5bd":"df_own = df['Type of ownership'].value_counts().rename_axis('Type of ownership').reset_index(name='counts')","80cce1fc":"fig_4 = px.pie(df_own,\n              names='Type of ownership',\n              values='counts',\n              title='Type of ownership',\n              color_discrete_sequence=px.colors.sequential.RdBu)\nfig_4.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\n\nfig_4.show()","cd2b1de0":"**Dropping Rows**\n","e4ac4e85":"# Data cleaning\n\n\n**There are some unnecessary coloumuns that we need to drop**\n\n1. Competitors\n1. Easy Apply\n","ca1b1f26":"* There are some job titles are same but has different name For example . \n 1. Big Data Engineer == Data Engineer\n 1. Data Engineer Lead == Data Engineer\n* We will clean these","71a4e6c2":"Since Department has too many empty cells. We will drop that row.","628a2237":"# Data engineer Job's data analysis\n","95f6d31b":"**Making seprate city and state columns for both Location and Headquaters**","8689a168":"* Job Title contains some extra data for departments that we dont need.\n","4061ad79":"Replacing the Billions with '000' and millions with \" \"","57072a54":"Cleaning the Employee size columns","8acb7c63":"# Data Visualisation","e779f548":"**Analyzing Job Description column**","8b1c30ab":"**Now we will delete the unnecessary (Glassdoor.net) at the end of the Max Salary Range**","0c7173b2":"Replacing \"-1\" with np.nan because salary and revenue field contain and it doesnt make much sense there.","0b141a1e":"**Lets see our cleaned data**","67d0f751":"**Now check if there is any missing data**","bc1d5731":"**Now salary coloumn contains the Salary Estimate. We will seprate those range into two coloumns and clean those columns**\n1. Max Salary\n1. Min Salary"}}