{"cell_type":{"2e9868d4":"code","ff749700":"code","7c0e4480":"code","2e804045":"code","6f305f30":"code","71c483b1":"code","0b976fa4":"code","cf75738f":"code","f3d2638d":"code","aab46758":"code","549a441b":"code","035a405b":"code","26fd86b5":"code","07126b63":"code","717d4912":"code","08ef3ed8":"code","19a08236":"code","110d8f9b":"code","710aa72f":"code","ac63a949":"code","421ed2b2":"code","e80866e7":"code","8ab2ecb3":"code","d1719500":"code","969588de":"code","6b9f9886":"code","ae53fce4":"code","d9ef7e48":"markdown","dfe9911b":"markdown","79273ca8":"markdown","3d0cc67d":"markdown","ce4c7fa0":"markdown","112dc156":"markdown","ba576b6f":"markdown","2348d408":"markdown"},"source":{"2e9868d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ff749700":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nimport sklearn.metrics as metrics\nimport os","7c0e4480":"df=pd.read_csv('\/kaggle\/input\/loan-prediction-based-on-customer-behavior\/Training Data.csv')\ndf.head()","2e804045":"df=df.drop('Id',axis=1)\ndf.head()","6f305f30":"df.isnull().sum()","71c483b1":"df.info()","0b976fa4":"df['Profession'].value_counts()","cf75738f":"df['CITY'].head()","f3d2638d":"df['STATE'].unique()","aab46758":"df=df.drop('CITY',axis=1)","549a441b":"en = LabelEncoder()\ncatCols = ['Married\/Single','House_Ownership','Car_Ownership','Profession','STATE']\nfor cols in catCols:\n    df[cols] = en.fit_transform(df[cols])","035a405b":"df.head()","26fd86b5":"df.info()","07126b63":"Y = df[\"Risk_Flag\"]\nX = df.drop(\"Risk_Flag\",axis = 1)","717d4912":"X.head()","08ef3ed8":"Y.head()","19a08236":"Y=pd.DataFrame(Y)","110d8f9b":"Y.head()","710aa72f":"X.shape","ac63a949":"Y.shape","421ed2b2":"X_train,X_test,Y_train,Y_test=train_test_split(X,Y,train_size=0.8,test_size=0.2,random_state=0)","e80866e7":"Y_train.head()","8ab2ecb3":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix,precision_score,recall_score,f1_score,accuracy_score,roc_auc_score\n\nclf=XGBClassifier(learning_rate=0.1,\n                 n_estimators=1000,\n                 use_label_encoder=False,\n                random_state=42)\nclf.fit(X_train,Y_train,eval_metric='logloss')\ny_predict=clf.predict(X_test)\n\nprint(\"Accuracy_score:\",str(accuracy_score(Y_test,y_predict)))\n\n","d1719500":"print(\"F1 Score:\"+str(f1_score(Y_test,y_predict)))\nprint(\"Recall Score:\"+str(recall_score(Y_test,y_predict)))\nprint(\"ROC AUC Score : \"+str(roc_auc_score(Y_test,y_predict)))","969588de":"from sklearn.tree import tree\ndtc = tree.DecisionTreeClassifier()\ndtc.fit(X_train, Y_train)\npredsdtc = dtc.predict(X_test)\nprint(\"accuracy_score: \" + str(accuracy_score(Y_test, predsdtc)))","6b9f9886":"print(\"F1 score:\"+str(f1_score(Y_test,predsdtc)))","ae53fce4":"print(\"ROC AUC SCORE\"+str(roc_auc_score(Y_test,predsdtc)))","d9ef7e48":"### Decision Tree Classifier","dfe9911b":"### Preprocessing The Data","79273ca8":"#### Encoding The Categorical data","3d0cc67d":"### Splitting Data as Test Validation ","ce4c7fa0":"### Reading Data","112dc156":"# Thanks :)","ba576b6f":"### Splitting The Data","2348d408":"### XGB Classifier"}}