{"cell_type":{"42f8e324":"code","21db3984":"code","7f76f7dc":"code","8b2044f7":"code","2679c624":"code","6906cb42":"code","bb08c90e":"code","ddd72f1e":"code","085aa651":"code","a4294542":"code","517429ed":"code","a58d80c8":"code","266ebf13":"code","63af193c":"code","4ba80df1":"code","5f9ce6b8":"code","1845bb80":"code","66a524de":"code","0972a14b":"code","2630b0e1":"code","fe4334cc":"code","275efbbc":"code","acb283f7":"code","9189e0d1":"code","08a96930":"code","f46f461c":"code","5377812a":"code","cd6250c5":"code","ae36dd6e":"code","c3a3e162":"code","2ab90bfb":"code","b7b3b859":"code","268f04ee":"code","7a740004":"code","758ecd75":"code","4b664575":"code","25c2c753":"code","0d0ed3b2":"code","febd23b3":"code","2bc3228f":"code","032b65ca":"code","fd108fb1":"code","2a040f4f":"code","0ca8a36b":"code","f573770a":"code","d80d337f":"code","7a19eb4d":"code","301aeb5c":"code","a621cb9d":"code","93faa036":"code","47b4a870":"code","500c5290":"code","d340b23e":"code","adaa85d4":"code","24ef04e4":"code","205f6dde":"code","246d2104":"code","07dc610a":"code","f394cb62":"code","3752d8a8":"code","0a1ac6fd":"code","0bf6d76b":"code","2e733bcc":"code","52e85c30":"code","b1efa6ac":"markdown","db8b517c":"markdown","66af957c":"markdown","bd20ac28":"markdown","85bbaea3":"markdown","40fb4998":"markdown","b23330f3":"markdown","29043b22":"markdown","d8fb1a60":"markdown","16147449":"markdown","d2c67a3d":"markdown","5c582362":"markdown"},"source":{"42f8e324":"import numpy as np\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix, average_precision_score, classification_report\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import cross_val_predict, train_test_split, StratifiedKFold, RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nimport xgboost as xgb\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","21db3984":"working_folder = '\/kaggle\/input\/predict-employee-quiting\/'","7f76f7dc":"training_data = pd.read_csv(working_folder + 'train_data.csv')","8b2044f7":"training_data = training_data[training_data.columns[1:]]","2679c624":"training_data.describe().T","6906cb42":"training_data.info()","bb08c90e":"training_data.head()","ddd72f1e":"training_data['Attrition'].value_counts()","085aa651":"356 \/ 1849","a4294542":"def show_unique(df):\n    unique = {}\n    \n    for col in df.columns:\n        values = np.sort(df[col].unique())\n        unique[col] = [len(values), values]\n    \n    for col in unique:\n        print('Column {} has {} unique values: {} \\n'.format(col, unique[col][0], unique[col][1]))","517429ed":"show_unique(training_data)","a58d80c8":"BusinessTravel_map = {\n    'Non-Travel': 0,\n    'Travel_Rarely': 1,\n    'Travel_Frequently': 2\n}","266ebf13":"training_data['BusinessTravel'] = training_data['BusinessTravel'].map(BusinessTravel_map)","63af193c":"training_data.drop('StandardHours', axis=1, inplace=True)","4ba80df1":"training_data.isnull().sum()","5f9ce6b8":"training_median = training_data.median()\ntraining_data.fillna(training_median, inplace=True)","1845bb80":"training_data.isnull().sum()","66a524de":"for col in training_data.columns:\n    if (training_data[col].dtype != 'object') & (len(training_data[col].unique()) > 10):\n        training_data[col].plot(kind='box')\n        plt.show()","0972a14b":"training_data = pd.get_dummies(training_data, prefix_sep='_', drop_first=True)","2630b0e1":"training_data","fe4334cc":"training_data.info()","275efbbc":"pca = PCA(n_components=2, svd_solver= 'full')","acb283f7":"X_train_PCA = pca.fit_transform(training_data)\nX_train_PCA = pd.DataFrame(X_train_PCA)\nX_train_PCA.index = training_data.index","9189e0d1":"X_train_PCA","08a96930":"def cov_matrix(data, verbose=False):\n    covariance_matrix = np.cov(data, rowvar=False)\n    if is_pos_def(covariance_matrix):\n        inv_covariance_matrix = np.linalg.inv(covariance_matrix)\n        if is_pos_def(inv_covariance_matrix):\n            return covariance_matrix, inv_covariance_matrix\n        else:\n            print(\"Error: Inverse of Covariance Matrix is not positive definite!\")\n    else:\n        print(\"Error: Covariance Matrix is not positive definite!\")","f46f461c":"def MahalanobisDist(inv_cov_matrix, mean_distr, data, verbose=False):\n    inv_covariance_matrix = inv_cov_matrix\n    vars_mean = mean_distr\n    diff = data - vars_mean\n    md = []\n    for i in range(len(diff)):\n        md.append(np.sqrt(diff[i].dot(inv_covariance_matrix).dot(diff[i])))\n    return md","5377812a":"def MD_detectOutliers(dist, extreme=False, verbose=False):\n    k = 3. if extreme else 2.\n    threshold = np.mean(dist) * k\n    outliers = []\n    for i in range(len(dist)):\n        if dist[i] >= threshold:\n            outliers.append(i)\n    return np.array(outliers)","cd6250c5":"def MD_threshold(dist, extreme=False, verbose=False):\n    k = 3. if extreme else 2.\n    threshold = np.mean(dist) * k\n    return threshold","ae36dd6e":"def is_pos_def(A):\n    if np.allclose(A, A.T):\n        try:\n            np.linalg.cholesky(A)\n            return True\n        except np.linalg.LinAlgError:\n            return False\n    else:\n        return False","c3a3e162":"data_train = np.array(X_train_PCA.values)\ncov_matrix, inv_cov_matrix  = cov_matrix(data_train)\nmean_distr = data_train.mean(axis=0)\ndist_train = MahalanobisDist(inv_cov_matrix, mean_distr, data_train, verbose=False)\nthreshold = MD_threshold(dist_train, extreme = True)","2ab90bfb":"threshold","b7b3b859":"plt.figure()\nsns.distplot(np.square(dist_train),\n             bins = 10, \n             kde= False);\nplt.xlim([0.0,15])","268f04ee":"plt.figure()\nsns.distplot(dist_train,\n             bins = 10, \n             kde= True, \n            color = 'green');\nplt.xlim([0.0,5])\nplt.xlabel('Mahalanobis dist')","7a740004":"threshold = 3.2","758ecd75":"anomaly_train = pd.DataFrame()\nanomaly_train['Mob dist']= dist_train\nanomaly_train['Thresh'] = threshold\nanomaly_train['Anomaly'] = anomaly_train['Mob dist'] > anomaly_train['Thresh']\nanomaly_train.index = X_train_PCA.index","4b664575":"anomaly_train['Anomaly'].value_counts()","25c2c753":"training_data = training_data[~anomaly_train['Anomaly']]","0d0ed3b2":"training_data.shape","febd23b3":"target_variable_name = 'Attrition'","2bc3228f":"training_values = training_data[target_variable_name]","032b65ca":"training_values.shape","fd108fb1":"training_points = training_data.drop(target_variable_name, axis=1)","2a040f4f":"training_points.shape","0ca8a36b":"skfold = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)","f573770a":"clf1 = LogisticRegression(random_state=1)","d80d337f":"clf2 = RandomForestClassifier(random_state=1)","7a19eb4d":"clf3 = xgb.XGBClassifier(eval_metric='auc', objective='binary:logistic', alpha=1)","301aeb5c":"eclf = VotingClassifier(estimators=[ ('lr', clf1), ('rf', clf2),('xgb', clf3)], voting='soft')","a621cb9d":"eclf_params = {\n    'lr__C': np.linspace(1, 3, 10),\n    'lr__penalty':['l1', 'l2'],\n    \n    'rf__n_estimators' : list(range(50, 101, 10)),\n    'rf__max_features': ['auto', 'log2'],\n    \n    'xgb__subsample': [0.8, 0.9],\n    'xgb__colsample_bytree': np.linspace(0.6, 1, 5),\n    'xgb__eta': np.linspace(0.001, 0.5, 20),\n    'xgb__n_estimators': [100, 250, 500],\n    'xgb__max_depth': [4, 5, 6],\n    'xgb__min_child_weight': [2, 3, 4],\n}","93faa036":"voting_clf = RandomizedSearchCV(eclf, eclf_params, random_state=0, scoring='roc_auc', cv=skfold)","47b4a870":"%%time\nvoting_search = voting_clf.fit(training_points, training_values)","500c5290":"voting_search.best_score_","d340b23e":"voting_search.best_params_","adaa85d4":"best_model = voting_search.best_estimator_","24ef04e4":"test_data = pd.read_csv(working_folder + 'test_data.csv')","205f6dde":"test_data = test_data.drop('Unnamed: 0', axis = 1)","246d2104":"test_data.describe().T","07dc610a":"test_data['BusinessTravel'] = test_data['BusinessTravel'].map(BusinessTravel_map)\ntest_data.drop('StandardHours', axis=1, inplace=True)\ntest_data.fillna(training_median, inplace=True)\ntest_data = pd.get_dummies(test_data, prefix_sep='_', drop_first=True)","f394cb62":"id_variable_name = 'index'\nids = test_data[id_variable_name]\ntest_points = test_data.drop(id_variable_name, axis=1)","3752d8a8":"test_points.shape","0a1ac6fd":"test_predictions = best_model.predict_proba(test_points)[:, 1]","0bf6d76b":"result = pd.DataFrame(columns=['index', 'Attrition'])","2e733bcc":"result['index'] = ids\nresult['Attrition'] = test_predictions","52e85c30":"result.to_csv('result.csv', index=False)","b1efa6ac":"\u0417\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a **BusinessTravel** \u043a\u0430\u043a \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u043e\u043d\u043d\u044b\u0439.","db8b517c":"\u041e\u0431\u0443\u0447\u0438\u043c \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u044c \u0438\u0437 3 \u0440\u0430\u0437\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439. \u041f\u0440\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0443\u0434\u0443\u0442 \"\u0433\u043e\u043b\u043e\u0441\u043e\u0432\u0430\u0442\u044c\" \u0437\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442.","66af957c":"\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.","bd20ac28":"\u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0438 \u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0444\u0430\u0439\u043b.","85bbaea3":"\u0412\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u043e\u0446\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b.","40fb4998":"\u0412\u044b\u044f\u0432\u0438\u043c \u0438 \u0443\u0434\u0430\u043b\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438\u0437 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438.\n\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0420\u0421\u0410 (principal component analysis). \u042d\u0442\u043e \u043c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437 \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043d\u0438\u043c \u043a\u0430\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \"\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u0439\" \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0438 \u043e\u0446\u0435\u043d\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u043f\u043e\u0440\u043e\u0433, \u0438 \u0443\u0434\u0430\u043b\u0438\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438.","b23330f3":"\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.","29043b22":"\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0438\u0445 \u0442\u0430\u043a\u0436\u0435, \u043a\u0430\u043a \u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435.","d8fb1a60":"\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u043c \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0430\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 \u0444\u043e\u043b\u0434\u044b.","16147449":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438.","d2c67a3d":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.","5c582362":"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438."}}