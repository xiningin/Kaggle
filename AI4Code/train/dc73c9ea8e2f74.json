{"cell_type":{"7aeb4709":"code","72a6e7b4":"code","0ca52e08":"code","793f0192":"code","506f7ae1":"code","3f4ca67c":"code","9053e57d":"code","42fd666d":"code","3f7c41e2":"code","6a166954":"code","dadbd461":"code","fc1dd6f3":"code","f1702f13":"code","a180643c":"code","822f4fba":"code","2f545733":"code","bc1ae71c":"code","e6f4eb6a":"code","46161d8e":"code","3914a903":"markdown"},"source":{"7aeb4709":"# The Imports\nimport os\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt","72a6e7b4":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0ca52e08":"Data = pd.read_csv(\"..\/input\/sunspots\/Sunspots.csv\")","793f0192":"Data.head()","506f7ae1":"Data.isna().sum()","3f4ca67c":"Sunspots = Data['Monthly Mean Total Sunspot Number']\nseries = np.array(Sunspots)\ntime = np.arange(0, 3235)","9053e57d":"# The function to plot series data\ndef plotter(time, series, format=\"-\", start=0, end=None):\n    plt.plot(time[start:end], series[start:end], format)\n    plt.xlabel(\"Time (Months)\")\n    plt.ylabel(\"Sunspots\")\n    plt.grid(True)","42fd666d":"# Plotting the data to have a 'first look'\nplt.figure(figsize = (20, 6))\nplotter(time, series)","3f7c41e2":"# Defining the parameters\nwindow_size = 100\nbatch_size = 256\nshuffle_buffer_size = 1000","6a166954":"# Windowing the dataset\ndef train_data_pipeline(series, window_size, batch_size, shuffle_buffer_size):\n    series = tf.expand_dims(series, axis=-1)\n    data = tf.data.Dataset.from_tensor_slices(series)\n    data = data.window(window_size+1, shift=1, drop_remainder=True)\n    data = data.flat_map(lambda w: w.batch(batch_size))\n    data = data.shuffle(shuffle_buffer_size)\n    data = data.map(lambda w: (w[:-1], w[1:]))\n    return data.batch(batch_size).prefetch(1)\n    \ntrain = train_data_pipeline(series, window_size, batch_size, shuffle_buffer_size)","dadbd461":"# Something new that I designed out of the blue.\ntf.keras.backend.clear_session()\n\n# The model\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv1D(filters=100, kernel_size=3, padding='causal', activation='relu', input_shape=[None, 1]),\n    tf.keras.layers.Reshape((100, 100, 1)),\n    tf.keras.layers.Conv2D(filters=16, kernel_size=(3, 3), padding='valid', activation='relu'),\n    tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),\n    tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), padding='valid', activation='relu'),\n    tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),\n    tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 3), padding='valid', activation='relu'),\n    tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(8),\n    tf.keras.layers.Dense(1),\n    tf.keras.layers.Lambda(lambda x: x*400)\n])\n\nmodel.summary()","fc1dd6f3":"# Compiling nad Training the model\nmodel.compile(loss=tf.keras.losses.Huber(), optimizer='adam', metrics=['mae'])\nhistory = model.fit(train, epochs=100, verbose=0)","f1702f13":"# Plotting loss values\nplt.plot(history.history['loss'][50:])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.show()\n\n# Plotting mae values\nplt.plot(history.history['mae'][50:])\nplt.title('Model Mae')\nplt.ylabel('Mae')\nplt.xlabel('Epoch')\nplt.show()","a180643c":"# That thing didn't work. So, here's a different model.\ntf.keras.backend.clear_session()\n\n# The model\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Conv1D(filters=64, kernel_size=5, strides=1, padding='causal', activation='relu', input_shape=[None, 1]),\n  tf.keras.layers.LSTM(64, return_sequences=True),\n  tf.keras.layers.LSTM(64, return_sequences=True),\n  tf.keras.layers.LSTM(64, return_sequences=True),\n  tf.keras.layers.Dense(32, activation=\"relu\"),\n  tf.keras.layers.Dense(16, activation=\"relu\"),\n  tf.keras.layers.Dense(1),\n  tf.keras.layers.Lambda(lambda x: x * 400)\n])\n\nmodel.summary()","822f4fba":"# Compiling and Training the Model\nmodel.compile(loss=tf.keras.losses.Huber(), optimizer='adam', metrics=[\"mae\"])\nhistory = model.fit(train, epochs=500, verbose=0)","2f545733":"# Plotting loss values\nplt.plot(history.history['loss'][50:])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.show()\n\n# Plotting mae values\nplt.plot(history.history['mae'][50:])\nplt.title('Model Mae')\nplt.ylabel('Mae')\nplt.xlabel('Epoch')\nplt.show()","bc1ae71c":"# Okay. That looks good.\n\n# Windowing the data for testing\ndef test_data_pipeline(series):\n    series = tf.expand_dims(series, axis=-1)\n    data = tf.data.Dataset.from_tensor_slices(series)\n    data = data.window(window_size, shift=1, drop_remainder=True)\n    data = data.flat_map(lambda w: w.batch(window_size))\n    data = data.batch(batch_size).prefetch(1)\n    return data","e6f4eb6a":"# Predicting on the same dataset\ntest = test_data_pipeline(series)\nforecast = model.predict(test)\nforecast = forecast[:, -1, 0]","46161d8e":"# Forecasting sunspots using the trained model\ntime_valid = time[window_size+1:]\nseries_ori = series[window_size+1:]\nforecast = np.reshape(forecast, (-1))\nforecast = forecast[:-1]\nplt.figure(figsize=(20, 6))\nplotter(time_valid[2000:2500], series_ori[2000:2500])\nplotter(time_valid[2000:2500], forecast[2000:2500])","3914a903":"Okay. That somehow worked. Thank you for reading my notebook."}}