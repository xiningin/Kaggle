{"cell_type":{"a8b4efd2":"code","dcc7757f":"code","249bcc3c":"code","f592c067":"code","a21a3b57":"code","32b8bd0b":"code","6596fb60":"code","87bd822b":"markdown"},"source":{"a8b4efd2":"# Visualize Tensorboard within the notebook\n%load_ext tensorboard.notebook\n%tensorboard --logdir logs","dcc7757f":"# Path to dataset folder (the zip), containing npy files\nDATA_PATH = \"..\/input\/classwork_dataset\"\n# Path to images\nIMG_PATH = \"..\/input\/classwork_dataset\/dataset\"\nFOLDER_IMG = \".\/folders_dataset\"\n# Path where to save Tensorboard checkpoints\nTB_PATH = \".\/logs\"","249bcc3c":"# If you want to inspect local files and download them run\n# this cell, then click on links\nfrom IPython.display import FileLink, FileLinks\nFileLinks('.')","f592c067":"import os\nimport numpy as np\nimport shutil\n\ndef move_files(imgs, src, dst, lbl=None):\n    for i, img in enumerate(imgs):\n        src_img = os.path.join(src, img + '.JPG')\n        if lbl is not None:\n            dst_img = os.path.join(dst, str(lbl[i]), img + '.JPG')\n        else:\n            dst_img = os.path.join(dst, img + '.JPG')\n\n        os.makedirs(os.path.dirname(dst_img), exist_ok=True)\n        shutil.copy(src=src_img, dst=dst_img)\n\n# Split images in folders\ntest_imgs = np.load(os.path.join(DATA_PATH, \"test_inputs.npy\"))\ntrain_imgs = np.load(os.path.join(DATA_PATH, \"training_inputs.npy\"))\ntrain_lbls = np.load(os.path.join(DATA_PATH, \"training_targets.npy\"))\nval_imgs = np.load(os.path.join(DATA_PATH, \"validation_inputs.npy\"))\nval_lbls = np.load(os.path.join(DATA_PATH, \"validation_targets.npy\"))\n\n#move_files(test_imgs, \"..\/input\/classwork_dataset\/dataset\", \".\/folders_dataset\/test\")\n#move_files(train_imgs, \"..\/input\/classwork_dataset\/dataset\", \".\/folders_dataset\/train\", lbl=train_lbls)\n#move_files(val_imgs, \"..\/input\/classwork_dataset\/dataset\", \".\/folders_dataset\/validation\", lbl=val_lbls)\n","a21a3b57":"import os\nimport base64\nimport numpy as np\nfrom datetime import datetime\nfrom IPython.display import HTML\n\n# A notebook version of the same function you find in utils.py\n# Once executed, this function displays a link that you can use to\n# download your csv file!\ndef create_csv(results, results_dir='.\/'):\n\n    csv_fname = 'results_'\n    csv_fname += datetime.now().strftime('%b%d_%H-%M-%S') + '.csv'\n\n    content = 'Id,Category\\n'\n    for key, value in results.items():\n        content += key + ',' + str(value) + '\\n'\n\n    b64 = base64.b64encode(content.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">Download result csv file<\/a>'\n    html = html.format(payload=payload,filename=csv_fname)\n    \n    file_path = os.path.join(results_dir, csv_fname)\n    with open(file_path, 'w') as f:\n        f.write(content)\n    print(\"Results file create at: \", file_path)\n    print(\"Click the link below to download!\")\n    \n    return HTML(html)","32b8bd0b":"# Train loop.....\n# ....\n\nfrom PIL import Image\nresults = {}\nfor img_name in test_imgs:\n    img = Image.open(os.path.join(\".\/folders_dataset\/test\", img_name + \".JPG\"))\n    img = np.array(img, dtype=np.float32).reshape(1, 100, 100, 3)\n    lbl = model.predict(img)[0]\n    cls = np.argmax(lbl)\n    results[img_name] = cls","6596fb60":"# Run create_csv on a separate cell to create a download link\ncreate_csv(results)","87bd822b":"**Note**\n\nIf you are using PyTorch, use `from tensorboardX import SummaryWriter` to import tensorboard <br>\ninstead of  ~~`from torch.utils.tensorboard import SummaryWriter`~~\n\n---"}}