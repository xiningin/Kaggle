{"cell_type":{"ea41fa93":"code","542e7b81":"code","cc9c820e":"code","3783024b":"code","6accf79d":"code","4e0b7368":"code","22dde030":"code","2519b194":"code","c233b213":"code","ebb4a0ac":"code","ec0d9aca":"code","7bcb05ed":"code","51004888":"code","0b472b53":"code","ea848bcc":"code","42ace103":"code","dfeca9ed":"code","fe1f8eef":"code","a9562a7c":"code","38437387":"code","5b7b5b9d":"code","dffdb89c":"code","6865bd2e":"code","15e5b771":"code","2d59a236":"code","8b2ec3ae":"code","2c558a08":"code","bd3c5c45":"code","1cc523f5":"code","d894c236":"code","b1893b33":"code","51c29eba":"code","b0f8d621":"code","9e58ea5a":"code","5e618d94":"code","b426c70a":"code","966e7254":"code","82a7d15d":"code","6ab1f716":"code","48a9758a":"code","51adb593":"code","16423dbd":"code","43d940de":"code","0839a481":"code","8c8aa092":"code","6a0b24ac":"code","c67edeb1":"code","b66504d6":"code","abfe3fac":"code","14b05269":"code","938eeeb5":"code","98aa459f":"code","c7d4ad83":"code","d48f5101":"code","2d6d1371":"code","fb543ffe":"code","448ae25d":"code","33d297e3":"code","c121814b":"code","7731fb00":"code","37db6f95":"code","d3743107":"code","bc980533":"code","54c19817":"code","98f372fc":"code","1a2de7f2":"code","b4732428":"code","f53426aa":"markdown","a6fcc053":"markdown","01bf3be3":"markdown","795850eb":"markdown","df277c9c":"markdown","e39d5266":"markdown","12833eef":"markdown","d74bc169":"markdown","36c48784":"markdown","43582912":"markdown","25dfa407":"markdown","9ec81312":"markdown","f763b08b":"markdown","56a617b8":"markdown","12accb5c":"markdown","2170794b":"markdown","21df8d7a":"markdown","8e575206":"markdown","f558214d":"markdown","f8ae5885":"markdown","afc440f3":"markdown","3352d9bd":"markdown","77f9c115":"markdown"},"source":{"ea41fa93":"import numpy as np\nimport pandas as pd\nimport re\nimport copy\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import log_loss\nfrom sklearn.metrics import mean_squared_error\n\nimport lightgbm as lgb\n\nimport torch \nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom PIL import Image\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 20,10\n\nimport warnings\nwarnings.simplefilter('ignore')","542e7b81":"df_test = pd.read_csv(\"..\/input\/beginnersquest-with-titanic-data\/test.csv\")\ndf_submission = pd.read_csv(\"..\/input\/beginnersquest-with-titanic-data\/sample_submission.csv\")\ndf_train = pd.read_csv(\"..\/input\/train-data\/train_titanic.csv\")","cc9c820e":"display(df_test.head(1))\ndisplay(df_submission.head(1))\ndisplay(df_train.head(1))","3783024b":"print(df_test.info())\nprint(df_train.info())","6accf79d":"#\u9023\u7d9a\u5024\u3092\u53d6\u308b\u5909\u6570\u306e\u57fa\u672c\u7d71\u8a08\u91cf\ndf_train.describe()","4e0b7368":"df_train = df_train[~df_train[\"Embarked\"].isnull()]\ndf_test = df_test.fillna({'Fare': df_train[\"Fare\"].mean()})","22dde030":"print(df_test.info())\nprint(df_train.info())","2519b194":"not_use_col = [\"PassengerId\"]","c233b213":"category_col = [\"Name\",\"Sex\",\"Ticket\",\"Embarked\",\"Pclass\",\"Cabin\"]","ebb4a0ac":"print(df_train[\"Sex\"].unique())\nprint(df_train[\"Ticket\"].unique()[0:10])\nprint(df_train[\"Name\"].unique()[0:10])\nprint(df_train[\"Embarked\"].unique()[0:10])\nprint(df_train[\"Pclass\"].unique()[0:10])\nprint(df_train[\"Cabin\"].unique()[0:10])","ec0d9aca":"print(len(df_train[\"Cabin\"].unique()),df_train.shape)","7bcb05ed":"df_train[\"Cabin\"].unique()","51004888":"#cabin\u306f\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3067\u5224\u5225\u3067\u304d\u305d\u3046\n\n#\u5224\u5225\u7a2e\u985e\n##nan\n##\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\n##2\u90e8\u5c4b\u4ee5\u4e0a\u306e\u60c5\u5831\u306f\u5148\u982d\u3092\u63a1\u7528\n\n#nan\u3092@\u306b\u5909\u63db\ndf_train[\"Cabin\"] = df_train[\"Cabin\"].fillna(\"@\")\n#\u5148\u982d\u4e00\u6587\u5b57\u3092\u53d6\u5f97\u3059\u308b\ndf_train[\"Cabin_category\"] = df_train[\"Cabin\"].apply(lambda x: \"Cabin_\"+x[0])\ndf_train[\"Cabin_category\"].value_counts()","0b472b53":"#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3082\u540c\u69d8\u306b\u884c\u3046\ndf_test[\"Cabin\"] = df_test[\"Cabin\"].fillna(\"@\")\ndf_test[\"Cabin_category\"] = df_test[\"Cabin\"].apply(lambda x: \"Cabin_\"+x[0])\ndf_test[\"Cabin_category\"].value_counts()","ea848bcc":"#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u306f\u3001T\u306e\u90e8\u5c4b\u60c5\u5831\u304c\u306a\u3044\u305f\u3081\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5408\u308f\u305b\u308b\ntest_cabin = pd.get_dummies(df_test[\"Cabin_category\"])\ntrain_cabin = pd.get_dummies(df_train[\"Cabin_category\"])\n\ndf_train = pd.concat([df_train,train_cabin[test_cabin.columns.tolist()]],axis=1)\ndf_test = pd.concat([df_test,test_cabin],axis=1)","42ace103":"not_use_col += [\"Cabin\",\"Cabin_category\"]","dfeca9ed":"print(len(df_train[\"Ticket\"].unique()),df_train.shape)","fe1f8eef":"df_train[\"Ticket\"].unique()[0:100]","a9562a7c":"#\u5224\u5225\u7a2e\u985e\n##\u6570\u5024\n##\u3088\u304f\u308f\u304b\u3089\u3093\u3000\uff0b\u3000\u6570\u5024\n\ndf_train[\"Ticket2\"] = df_train[\"Ticket\"].apply(lambda x: x.split(\" \")[0])\ndf_train[\"Ticket2\"].unique()[100:200]","38437387":"#SCO\/W\u306f\u5148\u982d\u3092\u63a1\u7528\n#\u6570\u5024\u306f\u5148\u982d\u3068\u4f55\u6841\u304b\u3092\u6c42\u3081\u308b\n\ndf_train[\"Ticket3\"] = df_train[\"Ticket2\"].apply(lambda x: x.split(\"\/\")[0])\n\n\ndef cheak_ticket(a):\n    if a[\"Ticket3\"][0] in [str(e) for e in range(10)]:\n        len_num = len(a[\"Ticket3\"])\n        return \"Ticket_\"+a[\"Ticket3\"][0]+\"_\"+str(len_num)\n    else:\n        return \"Ticket_\"+a[\"Ticket3\"]\ndf_train[\"Ticket4\"] = df_train.apply(cheak_ticket,axis=1) \ndf_train[\"Ticket4\"].value_counts()","5b7b5b9d":"#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3082\u9069\u5fdc\u3059\u308b\ndf_test[\"Ticket2\"] = df_test[\"Ticket\"].apply(lambda x: x.split(\" \")[0])\ndf_test[\"Ticket3\"] = df_test[\"Ticket2\"].apply(lambda x: x.split(\"\/\")[0])\ndf_test[\"Ticket4\"] = df_test.apply(cheak_ticket,axis=1) \ndf_test[\"Ticket4\"].value_counts()","dffdb89c":"len(df_test[\"Ticket4\"].unique()),len(df_train[\"Ticket4\"].unique())","6865bd2e":"#\u5171\u901a\u3092\u7528\u3044\u308b\nsame_ticket = list(set(df_train[\"Ticket4\"])&set(df_test[\"Ticket4\"]))\ntest_ticket = pd.get_dummies(df_test[\"Ticket4\"])\ntrain_ticket = pd.get_dummies(df_train[\"Ticket4\"])\n\ndf_train = pd.concat([df_train,train_ticket[same_ticket]],axis=1)\ndf_test = pd.concat([df_test,test_ticket[same_ticket]],axis=1)","15e5b771":"not_use_col += [\"Ticket\",\"Ticket2\",\"Ticket3\",\"Ticket4\"]","2d59a236":"train_sex = pd.get_dummies(df_train['Sex'])\ntest_sex = pd.get_dummies(df_test['Sex'])\ntrain_embarked = pd.get_dummies(df_train['Embarked'])\ntest_embarked = pd.get_dummies(df_test['Embarked'])\ntrain_pclass = pd.get_dummies(df_train['Pclass'])\ntest_pclass = pd.get_dummies(df_test['Pclass'])","8b2ec3ae":"display(train_sex.head(1))\ndisplay(train_embarked.head(1))\ndisplay(train_pclass.head(1))","2c558a08":"df_train = pd.concat([df_train,train_sex,train_embarked,train_pclass],axis=1)\ndf_test = pd.concat([df_test,test_sex,test_embarked,test_pclass],axis=1)","bd3c5c45":"df_train.head(1)","1cc523f5":"#Sex\u3068Embarked\u3068Pclass\u3082\u5fc5\u8981\u306a\u304f\u306a\u3063\u305f\u306e\u3067\u8ffd\u52a0\u3057\u3066\u304a\u304f\nnot_use_col += [\"Sex\",\"Embarked\",\"Pclass\"]","d894c236":"not_use_col","b1893b33":"df_train[\"Name_class\"] = df_train[\"Name\"].apply(lambda x: re.sub(\"\\s\",\"\",x.split(\".\")[0].split(\",\")[1]))\ndf_test[\"Name_class\"] = df_test[\"Name\"].apply(lambda x: re.sub(\"\\s\",\"\",x.split(\".\")[0].split(\",\")[1]))","51c29eba":"train_name = pd.get_dummies(df_train['Name_class'])\ntest_name = pd.get_dummies(df_test['Name_class'])","b0f8d621":"display(train_name.head(1))\ndisplay(test_name.head(1))","9e58ea5a":"#\u5171\u901a\u3067\u7528\u3044\u3089\u308c\u3066\u3044\u308b\u656c\u79f0\u3092\u7528\u3044\u308b\nsame_name = list(set(train_name.columns.tolist())&set(test_name.columns.tolist()))","5e618d94":"df_train = pd.concat([df_train,train_name[same_name]],axis=1)\ndf_test = pd.concat([df_test,test_name[same_name]],axis=1)","b426c70a":"#Name\u3068Name_class\u3082\u5fc5\u8981\u306a\u304f\u306a\u3063\u305f\u306e\u3067\u8ffd\u52a0\u3057\u3066\u304a\u304f\nnot_use_col += [\"Name\",\"Name_class\"]","966e7254":"train = df_train.drop(not_use_col,axis=1)\ntest = df_test.drop(not_use_col,axis=1)","82a7d15d":"print(train.info())\nprint(test.info())","6ab1f716":"age_train_data = train[~train[\"Age\"].isnull()].drop([\"Survived\"],axis=1)\nage_test_data = test[~test[\"Age\"].isnull()]\nage_data = pd.concat([age_test_data,age_train_data],axis=0)","48a9758a":"age_train_data.shape,age_test_data.shape,age_data.shape","51adb593":"#8:2\u306e\u5272\u5408\u3067\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\ntrain_x,test_x,train_y,test_y = train_test_split(age_data.drop([\"Age\"],axis=1),age_data[\"Age\"],test_size=0.2,random_state=0)","16423dbd":"#7:3\u306e\u5272\u5408\u3067\u5b66\u7fd2\u30c7\u30fc\u30bf\u304b\u3089\u8a55\u4fa1\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\ntrain_x,val_x,train_y,val_y = train_test_split(train_x,train_y,test_size=0.3,random_state=0)","43d940de":"#lgb\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\nlgb_train = lgb.Dataset(train_x,train_y)\nlgb_val = lgb.Dataset(val_x,val_y)\n\n# \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u63a2\u7d22\nparam = {\"objective\":\"regression\",\"verbose\":0, \"metrics\":\"mse\"}\nnum_round = 100\n\nmodel = lgb.train(param, lgb_train,num_boost_round=num_round,\n                 valid_names = [\"train\",\"valid\"], valid_sets=[lgb_train,lgb_val],\n                 early_stopping_rounds=10)\n\npred = model.predict(test_x)\nmean_squared_error(pred,test_y)","0839a481":"#\u5b66\u7fd2\u306b\u4f7f\u3063\u305f\u5909\u6570\u3092\u53d6\u5f97\nage_col = train_x.columns.tolist()","8c8aa092":"pred_train_age = model.predict(train[train.Age.isnull()][age_col])\npred_test_age = model.predict(test[test.Age.isnull()][age_col])","6a0b24ac":"train.loc[train.Age.isnull(),\"Age\"] = pred_train_age\ntest.loc[test.Age.isnull(),\"Age\"] = pred_test_age","c67edeb1":"print(train.info())\nprint(test.info())","b66504d6":"#\u76ee\u7684\u5909\u6570\ntarget_col = [\"Survived\"]\n#\u8aac\u660e\u5909\u6570\n#\u9023\u7d9a\u5024\u3092\u3068\u308b\u5909\u6570\u306f\u6a19\u6e96\u5316\u3059\u308b\nnum_col = [\"Age\",\"Fare\",\"SibSp\",\"Parch\"]\nexplain_col = test.columns.tolist()\nnp.array(explain_col)","abfe3fac":"Train = copy.deepcopy(train)\nTest = copy.deepcopy(test)","14b05269":"#holdout\n#7:3\u306e\u5272\u5408\u3067\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u8a55\u4fa1\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\ntrain_x,val_x,train_y,val_y = train_test_split(Train[explain_col],Train[target_col],test_size=0.3,random_state=0)","938eeeb5":"#lgb\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\nlgb_train = lgb.Dataset(train_x,train_y)\nlgb_val = lgb.Dataset(val_x,val_y)\n\n# \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u63a2\u7d22\nparam = {\"objective\":\"binary\",\"verbose\":0, \"metrics\":\"auc\"}\nnum_round = 100\n\nmodel = lgb.train(param, lgb_train,num_boost_round=num_round,\n                 valid_names = [\"train\",\"valid\"], valid_sets=[lgb_train,lgb_val],\n                 early_stopping_rounds=10)","98aa459f":"pred_lgb = model.predict(Test)","c7d4ad83":"pred_lgb[0:5]","d48f5101":"#\u6a19\u6e96\u5316\u3059\u308b\nScaler1 = StandardScaler()\n\ntrain_num = pd.DataFrame(data = Scaler1.fit_transform(Train[num_col]),columns = num_col)\n#Embarked\u3067\u524a\u9664\u3057\u305f\u4e8c\u500b\u306e\u305b\u3044\u3067index\u304c\u9023\u756a\u3067\u306f\u306a\u3044\n#train[target_col]\u306f\u9023\u756a\u306b\u76f4\u3057\u3066\u304a\u304f\ntrain_nn = pd.concat([train_num,Train[target_col].reset_index(drop=True),\n                   Train[list(set(explain_col)-set(num_col))].reset_index(drop=True)],axis=1)\n\ntest_num = pd.DataFrame(data = Scaler1.fit_transform(Test[num_col]),columns = num_col)\ntest_nn = pd.concat([test_num,\n                   Test[list(set(explain_col)-set(num_col))].reset_index(drop=True)],axis=1)","2d6d1371":"train_nn.head(1)","fb543ffe":"train_x,val_x,train_y,val_y = train_test_split(train_nn[explain_col],train_nn[target_col],\n                                               test_size=0.3,random_state=0)","448ae25d":"class Titanic(torch.utils.data.Dataset):\n    def __init__(self,dataframe,test=False):\n        self.df = dataframe\n        self.test = test\n    \n    def __len__(self):\n        return self.df.shape[0]\n    \n    def __getitem__(self,idx):\n        if self.test == True:#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u306fSurvived\u306f\u306a\u3044\u306e\u30670\u3092\u8fd4\u3059\n            label = 0\n        else:\n            label = self.df.iloc[idx].Survived\n        features = self.df.iloc[idx][explain_col]\n        \n        #pytorch\u3067\u4f7f\u3046\u578b\u306b\u5909\u63db\u3059\u308b\n        label_tensor = torch.tensor(label,dtype=torch.long)#int\u578b\u306b\u5bfe\u5fdc\n        features_tensor = torch.from_numpy(features.values.astype(np.float32))#float\u578b\u306b\u5bfe\u5fdc\n            \n        return label_tensor,features_tensor","33d297e3":"train_dataset = Titanic(pd.concat([train_x,train_y],axis=1))\nvalid_dataset = Titanic(pd.concat([val_x,val_y],axis=1))","c121814b":"#train\u306e\u4e00\u884c\u76ee\u306e\u30c7\u30fc\u30bf\u3092pytorch\u3067\u6271\u3048\u308b\u578b\u306b\u3057\u3066\u8fd4\u3059\ntrain_dataset[0]","7731fb00":"#\u53c2\u8003\n\"https:\/\/www.atmarkit.co.jp\/ait\/articles\/2006\/08\/news031.html\"\n\nclass Net(nn.Module):\n    def __init__(self,num_feature):\n        super(Net, self).__init__()\n        self.fc1 = nn.Linear(num_feature,64)#\u7279\u5fb4\u91cf\u306e\u500b\u6570\n        self.fc2 = nn.Linear(64, 128)\n        self.fc3 = nn.Linear(128,1)#1\u500b\u306e\u7279\u5fb4\u91cf\u3092\u8fd4\u3059\n        self.dropout = nn.Dropout(p=0.3)#dropout\u5c64\u306e\u8ffd\u52a0\n\n    def forward(self, x):\n        x = F.relu(self.fc1(x))\n        x = self.dropout(x)\n        x = F.relu(self.fc2(x))\n        x = self.dropout(x)\n        x = self.fc3(x)\n        return F.sigmoid(x)","37db6f95":"# GPU\u304c\u6709\u52b9\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\ndevice","d3743107":"#len(train)%batch==1\u306b\u306a\u308b\u3068\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u304b\u3089\u6ce8\u610f\nbatch_size = 64\n#valid\u306f\uff11\u500b\u305a\u3064\u691c\u8a3c\u3059\u308b\nvalid_batch_size = 1\nnum_epochs = 30\n\n#fold\u6bce\u306bmodel\u3092\u521d\u671f\u5316\nmodel = Net(len(explain_col))\n#model\u3092GPU\u306b\u6e21\u3059\nmodel = model.to(device)\n#\u640d\u5931\u95a2\u6570\ncriterion = nn.BCELoss()\n#\u6700\u9069\u5316\u624b\u6cd5\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\nmax_auc = 0\n\nepoch_loss = []\nepoch_auc = []\n\nfor epoch in range(num_epochs):#\u4f55\u56de\u5b66\u7fd2\u3059\u308b\u304b\uff1f\n    train_dataloader = torch.utils.data.DataLoader(train_dataset, batch_size, shuffle=True)\n    #valid\u306f\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u306a\u3044\n    valid_dataloader = torch.utils.data.DataLoader(valid_dataset, valid_batch_size, shuffle=False)\n    \n    #\u8a08\u7b97\u3057\u305floss\u3092\u4fdd\u7ba1\u3059\u308b\n    losses = []\n    ####\u3053\u3053\u306b\u5b66\u7fd2\u30b3\u30fc\u30c9####\n    for label,data in train_dataloader:\n        #data\u3092GPU\u306b\u6e21\u3059\n        data = data.to(device)\n        #label\u3092GPU\u306b\u6e21\u3059\n        label = label.to(device)\n        #\u4e88\u6e2c\u7d50\u679c\u3092\u53d6\u5f97\n        out = model(data)\n        #loss\u3092\u8a08\u7b97 batch_size\u3092\u307e\u3068\u3081\u3066\u8a08\u7b97\u3059\u308b\n        loss = criterion(out.squeeze(),label.float())\n        #loss\u3092\u683c\u7d0d\n        losses.append(loss)\n        #optimizer\u306e\u521d\u671f\u5316\n        optimizer.zero_grad()\n        #\u8aa4\u5dee\u9006\u4f1d\u64ad\n        loss.backward()\n        #\u6700\u9069\u5316\n        optimizer.step()\n    #1epoch\u306eloss\u306e\u5e73\u5747\n    loss_mean = sum(losses)\/len(train_dataloader)\n    \n    ##\u8a55\u4fa1\u30b3\u30fc\u30c9\u3092\u66f8\u304f###\n    #vaild\u306f\u91cd\u307f\u3092\u5f04\u3089\u306a\u3044\n    with torch.no_grad():\n        #\u4e88\u6e2c\u78ba\u7387\u3092\u683c\u7d0d\u3059\u308b\n        pred_list = []\n        #\u6b63\u89e3\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\n        label_list = []\n        for label,data in valid_dataloader:\n            #data\u3092GPU\u306b\u6e21\u3059\n            data = data.to(device)\n            #\u4e88\u6e2c\u7d50\u679c\u3092\u53d6\u5f97\n            out = model(data)\n            #\u4e88\u6e2c\u5024\u3092\u53d6\u5f97\n            pred = out.item()\n            pred_list.append(pred)\n            label_list.append(label)\n        #auc\u3092\u8a08\u7b97\u3059\u308b\n        pred_list = np.array(pred_list)\n        label_list = np.array(label_list)\n        auc = roc_auc_score(label_list,pred_list)\n        \n    epoch_loss.append(loss_mean.item())\n    epoch_auc.append(auc)\n    \n    if auc > max_auc:\n        max_auc = auc\n        #\u6700\u9ad8\u7cbe\u5ea6\u306e\u30e2\u30c7\u30eb\u3092\u4fdd\u7ba1\n        best_model = model\n        print(\"epoch{}\/{}:loss:{}:auc:{}\".format(epoch,num_epochs,loss_mean,auc))","bc980533":"#\u53ef\u8996\u5316\u3059\u308b\ndf_plot = pd.DataFrame()\ndf_plot[\"loss\"] = epoch_loss\ndf_plot[\"auc\"] = epoch_auc\ndf_plot.plot()","54c19817":"test_dataset = Titanic(Test,test=True)\n#shuffle\u306fFalse\ntestloader = torch.utils.data.DataLoader(test_dataset, 1, shuffle=False)\n#\u7d50\u679c\u306e\u683c\u7d0d\npred_list = []\n#\u4e88\u6e2c\nfor label,data in testloader:\n    with torch.no_grad():\n        data = data.to(device)\n        out = best_model(data)\n        pred = out.item()\n    pred_list.append(pred)","98f372fc":"np.array(pred_list)[0:5]","1a2de7f2":"pred_lgb[0:5]","b4732428":"#Lightgbm\u306e\u4e88\u6e2c\u3068NN\u306e\u4e88\u6e2c\u3092\u8db3\u3057\u3066\uff12\u3067\u5272\u308b\ndf_submission[\"Predicted\"] = (pred_list+pred_lgb)\/2\ndf_submission.to_csv(\"submissin.csv\",index=False)","f53426aa":"# \u6b20\u640d\u5024\u51e6\u7406","a6fcc053":"### Lightgbm\u3092\u7528\u3044\u305f\u30e2\u30c7\u30eb","01bf3be3":"## \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u8a55\u4fa1\u30c7\u30fc\u30bf\u306e\u4f5c\u6210","795850eb":"## Sex\u3068Embarked\u3068Pclass\u3092\u7f6e\u304d\u63db\u3048\u308b","df277c9c":"# Age\u3092\u4e88\u6e2c\u3059\u308b","e39d5266":"## \u4f7f\u7528\u3057\u306a\u3044\u30ab\u30e9\u30e0","12833eef":"## \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u5909\u63db","d74bc169":"## \u30e2\u30c7\u30eb\u4f5c\u6210","36c48784":"# \u524d\u51e6\u7406\u7d42\u4e86","43582912":"## Cabin(\u90e8\u5c4b\u306e\u60c5\u5831(\u6d77\u5074\u3068\u304b))\u3064\u3044\u3066\u66f4\u306b\u8abf\u3079\u308b","25dfa407":"* PassengerId\u306f\u5fc5\u8981\u306a\u3055\u305d\u3046\n* pclass\uff1a \u65c5\u5ba2\u30af\u30e9\u30b9\uff081\uff1d1\u7b49\u30012\uff1d2\u7b49\u30013\uff1d3\u7b49\uff09\u3002\u88d5\u798f\u3055\u306e\u76ee\u5b89\u3068\u306a\u308b  \n***\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u6271\u3063\u305f\u65b9\u304c\u826f\u3044\u304b\u3082***\n* sibsp\uff1a \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306b\u540c\u4e57\u3057\u3066\u3044\u308b\u5144\u5f1f\uff08Siblings\uff09\u3084\u914d\u5076\u8005\uff08Spouses\uff09\u306e\u6570\n* parch\uff1a \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306b\u540c\u4e57\u3057\u3066\u3044\u308b\u89aa\uff08Parents\uff09\u3084\u5b50\u4f9b\uff08Children\uff09\u306e\u6570","9ec81312":"## \u8a55\u4fa1\u3059\u308b","f763b08b":"## \u6b20\u640d\u5024\u306e\u3042\u308btrain\u306eEmbarked\uff12\u500b\u306f\u5b66\u7fd2\u306b\u52a0\u3048\u306a\u3044\n## \u6b20\u640d\u5024\u306e\u3042\u308btest\u306eFare\u306ftrain\u306e\u5e73\u5747\u5024\u3067\u7f6e\u304d\u63db\u3048\u308b","56a617b8":"## Ticket\u306b\u3064\u3044\u3066\u66f4\u306b\u8abf\u3079\u308b","12accb5c":"## dataset\u306e\u4f5c\u6210","2170794b":"## NN\u3092\u7528\u3044\u305f\u30e2\u30c7\u30eb","21df8d7a":"## Name\u304b\u3089\u656c\u79f0\u3092\u62bd\u51fa\u3059\u308b","8e575206":"* test\u306fAge Fare Cabin\n* train\u306fAge Cabin Embarked\n* Name Sex Ticket Cabin Embarked\u306f\u6570\u5024\u3067\u306f\u306a\u3044","f558214d":"# \u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3092\u884c\u3046\n\n1. Lightgbm\u3092\u7528\u3044\u305f\u30e2\u30c7\u30eb\n1. NN\u3092\u7528\u3044\u305f\u30e2\u30c7\u30eb","f8ae5885":"# NN\u30e2\u30c7\u30eb\u4f5c\u6210\u624b\u9806\n1. dataloader\u3092\u4f5c\u308b\n    1. \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u8a55\u4fa1\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\n    1. dataset\u3092\u4f5c\u308b(pytorch\u3067\u4f7f\u3046\u578b\u306b\u5909\u63db\u3059\u308b)    \n1. \u30e2\u30c7\u30eb\u3092\u4f5c\u308b\n1. \u5b66\u7fd2\u3059\u308b\n1. \u8a55\u4fa1\u3059\u308b\n1. \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u9069\u5fdc\u3059\u308b","afc440f3":"## \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","3352d9bd":"## lightgbm\u3092\u4f7f\u7528","77f9c115":"## \u5b66\u7fd2\u3001\u8a55\u4fa1\u30c7\u30fc\u30bf\u306e\u4f5c\u6210"}}