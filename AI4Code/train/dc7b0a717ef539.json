{"cell_type":{"483c4a83":"code","54ab4cb8":"code","8260627b":"code","7d1722df":"code","b0a07e1a":"code","d13339d0":"code","e104a78b":"code","b9e1ecc9":"code","da54efbe":"code","5edcd0ae":"code","cdb7e0c7":"code","aa278c61":"code","80f961eb":"code","4e2bca84":"code","4ab8abc5":"code","aa388eac":"code","e677c5e2":"code","2bf34d7c":"code","dde32631":"code","87115bca":"code","6cf3ce56":"code","c48ee425":"code","c1bf86f5":"code","abbe8155":"code","e5a65105":"code","78ac6e01":"code","4ce3db1c":"code","cf3556cd":"code","95707727":"code","0e944d48":"code","7f293efc":"code","10d4d7d9":"code","e6ea6760":"code","309da8a5":"code","898a12e2":"code","84787a00":"code","4132ddce":"code","b2d7abf9":"code","783f705e":"code","e84ab520":"code","997a8a93":"code","71632ff6":"code","8a08f7ca":"code","330b5a45":"code","ff3b9017":"code","fc16b006":"code","90575a82":"code","b647548b":"code","0d114ae6":"code","9fb165b6":"code","f4fdd607":"code","83169c16":"code","857db5d0":"code","fbb2c2cf":"code","39fa351c":"code","63271661":"code","a569525c":"code","3ca67f1a":"code","d012e60d":"code","c113447f":"code","210eb29c":"code","01d3e587":"code","533df872":"code","0d0d468e":"code","689933fe":"code","7e7df05c":"code","21491a03":"code","fe5d704b":"code","8f7d640f":"code","e0012a35":"code","9708166b":"code","237995d2":"code","b9a97e58":"code","5f8a3191":"code","549984d9":"code","0a4a304e":"code","eb81e432":"code","2e9c43d9":"code","bc15f4d5":"code","1b35ee50":"code","ba17ffc0":"code","bac210c6":"code","95082292":"code","e4510dc1":"code","48f4b7d2":"code","69137b4d":"code","cfb6de84":"code","de5f2193":"markdown","967b26ea":"markdown","0c32f022":"markdown","e7ea9d50":"markdown","7603ff34":"markdown","55396622":"markdown","309ec3e9":"markdown","d39782b3":"markdown","fc80f806":"markdown","4e39bab5":"markdown","b70a58cf":"markdown","ec6b65ec":"markdown","e7a495b3":"markdown","0436bd1f":"markdown","f8cb4335":"markdown","4b35cc02":"markdown","edd3845f":"markdown"},"source":{"483c4a83":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","54ab4cb8":"import plotly.graph_objects as go\nimport plotly.express as px","8260627b":"covid19 = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')","7d1722df":"covid19.info()","b0a07e1a":"covid19['Active'] = covid19['Confirmed'] - covid19['Deaths'] - covid19['Recovered']","d13339d0":"covid19['ObservationDate'] = pd.to_datetime(covid19['ObservationDate'],  format='%m\/%d\/%Y')","e104a78b":"covid19.sample(5)","b9e1ecc9":"total_countries = []\nfor i in covid19['ObservationDate'].unique():\n    total_countries.append(covid19[covid19['ObservationDate']==i]['Country\/Region'].unique().size)","da54efbe":"plt.figure(figsize=(20,5))\nplt.plot(covid19['ObservationDate'].unique(), total_countries, label='number of countries')\nplt.legend()\nplt.xticks(rotation=75)\nplt.show()","5edcd0ae":"by_day = covid19.groupby('ObservationDate').sum().sort_values(by='Confirmed')","cdb7e0c7":"by_day.tail()","aa278c61":"def plot_cases_by_day(df):\n    fig, ax1 = plt.subplots(1,1,figsize=(18,7))\n    ax1.plot(df['Confirmed'], label='Confirmed')\n    ax1.legend(loc='upper left')\n    ax1.set_xticklabels(by_day.index, rotation=75)\n    ax1.set_ylabel(by_day.columns[1:2][0], fontsize=15, color='b')\n\n    ax2=ax1.twinx()\n    ax2._get_lines.prop_cycler = ax1._get_lines.prop_cycler\n    ax2.plot(df['Deaths'], 'r', label='Deaths')\n    ax2.legend(loc='upper center', bbox_to_anchor=(.3, .998))\n    ax2.set_ylabel('Deaths', fontsize=15, color='r')\n\n    ax3=ax1.twinx()\n    ax3.spines['right'].set_position(('axes', 1.06))\n    ax3._get_lines.prop_cycler = ax1._get_lines.prop_cycler\n    ax3.plot(df['Recovered'], 'g', label='Recovered')\n    ax3.legend(loc='upper right', bbox_to_anchor=(.6, .998))\n    ax3.set_ylabel('Recovered', fontsize=15, color='g')\n    ax3.set_xticks(df.index)\n    ","80f961eb":"plot_cases_by_day(by_day)","4e2bca84":"def plot_ratio(df):\n    fig, ax1 = plt.subplots(1,1,figsize=(20,7))\n    ax1.plot(df['Deaths']\/df['Confirmed'], 'r', label='Death Ratio')\n    ax1.legend(loc='upper left')\n    ax1.set_xticklabels(by_day.index, rotation=75)\n    ax1.set_ylabel('Death Ratio', fontsize=15, color='r')\n\n    ax2=ax1.twinx()\n    ax2._get_lines.prop_cycler = ax1._get_lines.prop_cycler\n    ax2.plot(df['Recovered']\/df['Confirmed'], 'g', label='Recovered Ratio')\n    ax2.legend(loc='upper center')\n    ax2.set_ylabel('Recovered Ratio', fontsize=15, color='g')\n","4ab8abc5":"plot_ratio(by_day)","aa388eac":"plt.figure(figsize=(20,7))\nplt.bar(by_day.index, by_day['Deaths'], label='Deaths')\nplt.bar(by_day.index, by_day['Active'], bottom=by_day['Deaths'], label='Under Treatment')\nplt.bar(by_day.index, by_day['Recovered'], bottom = by_day['Confirmed'] - by_day['Recovered'], label='Recovered')\n# plt.bar(by_day.index, by_day['Recovered'], bottom=by_day['Deaths'], label='Recovered')\n# plt.bar(by_day.index, by_day['Confirmed'] - (by_day['Deaths']+by_day['Recovered']), bottom=by_day['Deaths']+by_day['Recovered'], label='Under Treatment')\nplt.legend()\nplt.xticks(rotation=75)\nplt.show()","e677c5e2":"def plot_recovery_days(df):\n    recovery_days = [0]\n    for i in range(df.shape[0]):\n        for j in range(recovery_days[-1], df.shape[0]):\n            if df.iloc[j]['Deaths'] + df.iloc[j]['Recovered'] > df.iloc[i]['Confirmed']:\n                recovery_days.append(j - i)\n                break\n        else:\n            break\n#     return recovery_days\n    plt.plot(recovery_days[1:])\n    plt.ylabel('days')","2bf34d7c":"plot_recovery_days(by_day)","dde32631":"(by_day['Deaths'] \/ (by_day['Deaths'] + by_day['Recovered'])).tail(40).plot(figsize=(10,5))","87115bca":"china_by_day = covid19[(covid19['Country\/Region']=='Mainland China')].groupby('ObservationDate').sum()","6cf3ce56":"china_by_day.tail()","c48ee425":"plot_cases_by_day(china_by_day)","c1bf86f5":"plot_ratio(china_by_day)","abbe8155":"plot_recovery_days(china_by_day)","e5a65105":"(china_by_day['Deaths'] \/ (china_by_day['Deaths'] + china_by_day['Recovered'])).tail(25).plot(figsize=(10,5))","78ac6e01":"fig = go.Figure(data=[\n    go.Bar(name='Deaths', x=china_by_day.index, y=china_by_day['Deaths']),\n    go.Bar(name='Under Treatment', x=china_by_day.index, y=china_by_day['Active']),\n    go.Bar(name='Recovered', x=china_by_day.index, y=china_by_day['Recovered'])],\n                \n    layout=go.Layout(height=500))\nfig.update_layout(barmode='stack')\nfig.show()","4ce3db1c":"Hubei_by_day = covid19[covid19['Province\/State']=='Hubei'].groupby('ObservationDate').sum()","cf3556cd":"fig = go.Figure(data=[\n    go.Bar(name='Deaths', x=Hubei_by_day.index, y=Hubei_by_day['Deaths']),\n    go.Bar(name='Under Treatment', x=Hubei_by_day.index, y=Hubei_by_day['Active']),\n    go.Bar(name='Recovered', x=Hubei_by_day.index, y=Hubei_by_day['Recovered'])],\n                \n    layout=go.Layout(height=500))\nfig.update_layout(barmode='stack')\nfig.show()","95707727":"plot_cases_by_day(Hubei_by_day)","0e944d48":"plot_ratio(Hubei_by_day)","7f293efc":"(Hubei_by_day['Deaths'] \/ (Hubei_by_day['Deaths'] + Hubei_by_day['Recovered'])).tail(25).plot(figsize=(10,5))","10d4d7d9":"Non_hubei = covid19[(covid19['Province\/State']!='Hubei') & (covid19['Country\/Region']=='Mainland China')].groupby('ObservationDate').sum()","e6ea6760":"fig = go.Figure(data=[\n    go.Bar(name='Deaths', x=Non_hubei.index, y=Non_hubei['Deaths']),\n    go.Bar(name='Under Treatment', x=Non_hubei.index, y=Non_hubei['Active']),\n    go.Bar(name='Recovered', x=Non_hubei.index, y=Non_hubei['Recovered'])],\n                \n    layout=go.Layout(height=500))\nfig.update_layout(barmode='stack')\nfig.show()","309da8a5":"plot_cases_by_day(Non_hubei)","898a12e2":"plot_ratio(Non_hubei)","84787a00":"(Non_hubei['Deaths'] \/ (Non_hubei['Deaths'] + Non_hubei['Recovered'])).tail(25).plot(figsize=(10,5))","4132ddce":"plot_recovery_days(Non_hubei)","b2d7abf9":"plt.figure(figsize=(15,5))\nplt.plot(Non_hubei.index, Non_hubei['Confirmed'].diff() \/ Non_hubei['Confirmed'].diff().shift(1)[:30])\nplt.plot(Non_hubei.index, [1 for i in range(len(Non_hubei.index))])","783f705e":"plt.figure(figsize=(15,5))\nplt.plot((Non_hubei['Confirmed'].diff(2) \/ Non_hubei['Confirmed'].diff(2).shift(1))[:30])\nplt.plot(Non_hubei.index, [1 for i in range(len(Non_hubei.index))])","e84ab520":"Non_hubei.loc['02\/05\/2020', 'Confirmed']","997a8a93":"Non_china = covid19[(covid19['Country\/Region']!='Mainland China')].groupby('ObservationDate').sum()","71632ff6":"Non_china.tail()","8a08f7ca":"plot_cases_by_day(Non_china)","330b5a45":"plot_ratio(Non_china)","ff3b9017":"plot_recovery_days(Non_china)","fc16b006":"(Non_china['Deaths'] \/ (Non_china['Deaths'] + Non_china['Recovered'])).plot(figsize=(10,5))","90575a82":"plt.figure(figsize=(15,5))\nplt.plot(Non_china['Confirmed'].diff() \/ Non_china['Confirmed'].diff().shift(1))\nplt.plot(Non_china.index, [1 for i in range(len(Non_china.index))])","b647548b":"plt.figure(figsize=(15,5))\nplt.plot(Non_china['Confirmed'].diff(3) \/ Non_china['Confirmed'].diff(3).shift())\nplt.plot(Non_china.index, [1 for i in range(len(Non_china.index))])","0d114ae6":"by_country = covid19[covid19['ObservationDate']==covid19['ObservationDate'].unique()[-1]].groupby('Country\/Region').sum().iloc[:, 1:].sort_values(by='Confirmed', ascending=False)","9fb165b6":"by_country['Case Fatality Rate'] = by_country['Deaths'] \/ by_country['Confirmed']","f4fdd607":"by_country = by_country.reset_index()","83169c16":"px.bar(by_country[:30], x = 'Country\/Region', y = 'Confirmed', log_y=True, height=500)","857db5d0":"px.bar(by_country.sort_values(by='Active', ascending=False)[:30], x = 'Country\/Region', y = 'Active', log_y=True, height=500)","fbb2c2cf":"px.bar(by_country.sort_values(by='Deaths', ascending=False)[:30], x = 'Country\/Region', y = 'Deaths', height=500)","39fa351c":"px.bar(by_country[by_country['Confirmed']>100].sort_values(by='Case Fatality Rate', ascending=False).iloc[:40, :], x = 'Country\/Region', y = 'Case Fatality Rate', height=500)","63271661":"by_country = by_country.set_index('Country\/Region')","a569525c":"death_ratio = (by_country['Deaths']\/(by_country['Deaths'] + by_country['Recovered']))[((by_country['Recovered'])>20)].sort_values(ascending=False)","3ca67f1a":"px.bar(x=death_ratio.index, y=death_ratio.values)","d012e60d":"data = go.Choropleth(z = by_country['Confirmed'], locations = by_country.index, locationmode = 'country names', text = 'Confirmed', colorscale = 'YlOrRd', \n        reversescale=False, marker_line_color='darkgray', marker_line_width=0.5, colorbar_tickprefix = '', colorbar_title = 'cases')\n    \nlayout = go.Layout(autosize=False, width=1000, height=500, title_text='Confirmed Cases',\n        geo=dict(showframe=True, showcoastlines=True, projection_type='robinson'))\n\nfig = go.Figure(data = data, layout = layout)\n\nfig.show()","c113447f":"data = go.Choropleth(z = by_country['Deaths'], locations = by_country.index, locationmode = 'country names', text = 'Deaths', colorscale = 'Reds', autocolorscale=False,\n        reversescale=False, marker_line_color='darkgray', marker_line_width=0.5, colorbar_tickprefix = '', colorbar_title = 'Deaths')\n    \nlayout = go.Layout(autosize=False, width=1000, height=500, title_text='Deaths',\n        geo=dict(showframe=True, showcoastlines=True, projection_type='robinson'))\n\nfig = go.Figure(data = data, layout = layout)\n\nfig.show()","210eb29c":"covid19[covid19['ObservationDate']==covid19['ObservationDate'].unique()[-1]].groupby(['Country\/Region', 'Province\/State']).sum().groupby(['Country\/Region']).size()","01d3e587":"USA = covid19[covid19['ObservationDate']==covid19['ObservationDate'].unique()[-1]].groupby(['Country\/Region','Province\/State']).sum().xs('US').iloc[:, 1:].sort_values('Confirmed', ascending=False)","533df872":"px.bar(USA, x=USA.index, y='Confirmed')","0d0d468e":"fig = px.line(covid19[(covid19['Country\/Region']!='Mainland China')].groupby(['ObservationDate', 'Country\/Region']).sum().reset_index().iloc[1000:, :],\n              x=\"ObservationDate\", y=\"Confirmed\", color='Country\/Region')\nfig.show()","689933fe":"df = covid19.groupby(['Country\/Region','ObservationDate']).sum()","7e7df05c":"country_100 = []\nfor i in by_country.index[by_country['Confirmed'] >= 100]:\n    country_100.append(pd.Series(df[df['Confirmed'] > 100].loc[i].reset_index()['Confirmed'], name=i))","21491a03":"country_100 = pd.concat(country_100, axis=1)","fe5d704b":"country_100","8f7d640f":"px.line(pd.melt(country_100.reset_index(), id_vars='index', var_name='Country', value_name='Confirmed Cases'), x='index', y='Confirmed Cases', color='Country', log_y=True)","e0012a35":"South_Korea = covid19[covid19['Country\/Region']=='South Korea'].groupby('ObservationDate').sum()","9708166b":"fig = go.Figure(data=[\n    go.Bar(name='Deaths', x=South_Korea.index, y=South_Korea['Deaths']),\n    go.Bar(name='Under Treatment', x=South_Korea.index, y=South_Korea['Active']),\n    go.Bar(name='Recovered', x=South_Korea.index, y=South_Korea['Recovered'])],\n                \n    layout=go.Layout(height=500))\nfig.update_layout(barmode='stack')\nfig.show()","237995d2":"plt.figure(figsize=(15,5))\nplt.plot((South_Korea['Confirmed'].diff() \/ South_Korea['Confirmed'].diff().shift(1))[35:])\nplt.plot(South_Korea.index, [1 for i in range(len(South_Korea.index))])","b9a97e58":"Italy = covid19[covid19['Country\/Region']=='Italy'].groupby('ObservationDate').sum()","5f8a3191":"fig = go.Figure(data=[\n    go.Bar(name='Deaths', x=Italy.index, y=Italy['Deaths']),\n    go.Bar(name='Under Treatment', x=Italy.index, y=Italy['Active']),\n    go.Bar(name='Recovered', x=Italy.index, y=Italy['Recovered'])],\n                \n    layout=go.Layout(height=500))\nfig.update_layout(barmode='stack')\nfig.show()","549984d9":"plt.figure(figsize=(15,5))\nplt.plot(Italy['Confirmed'].diff(2) \/ Italy['Confirmed'].diff(2).shift()[30:])\nplt.plot(Italy.index, [1 for i in range(len(Italy.index))])","0a4a304e":"India = covid19[covid19['Country\/Region']=='India'].groupby('ObservationDate').sum()","eb81e432":"fig = go.Figure(data=[\n    go.Bar(name='Deaths', x=India.index, y=India['Deaths']),\n    go.Bar(name='Under Treatment', x=India.index, y=India['Active']),\n    go.Bar(name='Recovered', x=India.index, y=India['Recovered'])],\n                \n    layout=go.Layout(height=500))\nfig.update_layout(barmode='stack')\nfig.show()","2e9c43d9":"plt.figure(figsize=(15,5))\nplt.plot(India['Confirmed'].diff(2) \/ India['Confirmed'].diff(2).shift(1)[35:])\nplt.plot(India.index, [1 for i in range(len(India.index))])","bc15f4d5":"df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv')","1b35ee50":"df.isnull().sum()","ba17ffc0":"df[(df['age']>0) & (df['age']<=65) & (df['death']=='1')].shape[0] \/ df[(df['age']>0) & (df['age']<=65)].shape[0]","bac210c6":"df[(df['age']>55) & (df['age']<=60) & (df['death']=='1')].shape[0] \/ df[(df['age']>55) & (df['age']<=60)].shape[0]","95082292":"df[(df['age']>60) & (df['age']<=65) & (df['death']=='1')].shape[0] \/ df[(df['age']>60) & (df['age']<=65)].shape[0]","e4510dc1":"df[(df['age']>65) & (df['death']=='1')].shape[0] \/ df[df['age']>65].shape[0]","48f4b7d2":"df[(df['age']>75) & (df['death']=='1')].shape[0] \/ df[df['age']>75].shape[0]","69137b4d":"df['age'].sort_values().reset_index()['age'].plot(kind='hist')","cfb6de84":"df[df['death']=='1']['age'].sort_values().reset_index()['age'].plot(kind='hist')","de5f2193":"Mortality Rates by age","967b26ea":"## Logistic Function","0c32f022":"## Observations","e7ea9d50":"1. Deaths as a percentage of confirmed cases are stabilized at 3.4% and then increasing\n2. Around 30% of the confirmed cases are recovered.","7603ff34":"1. Non-China cases are increasing almost exponentially.\n2. Only 10% of people are recovered.\n3. Mortality rate compared to Recovered people is around 30 %\n4. Growth factor is very volatile in the initial days because of small no.of cases. In recent days even though it touched 1 a few times, still above 1 most of the times.\n5. So, midpoint of Logistic Function is not reached yet.","55396622":"Calculating the days for all confirmed cases to become either deaths or recovered.","309ec3e9":"1. Confirmed Cases plateaued by the end of February, then started increasing again as disease spreads to the other countries.\n2. Recovered Cases are increasing linearly now.","d39782b3":"# Introduction","fc80f806":"# Non China Cases","4e39bab5":"It is taking 14 days to recover on average now","b70a58cf":"1. Confirmed cases in China are almost constant in the past few days as new cases are very low.\n2. Around 90% of people are recovered.","ec6b65ec":"Mortality Rate is around 4.5% compared to Recovered cases in China.","e7a495b3":"1. Epidemics Usually follow Logistic Function pattern(https:\/\/en.wikipedia.org\/wiki\/Logistic_function) where the initial growth is exponential then will become linear and finally plateaus.\n2. The midpoint of Logistic Function is where the growth factor is 1. Growth factor is defined as ratio of new cases in a day to new cases previous day. So, Total cases would be double the cases at midpoint.\n3. Confirmed Cases of Non-Hubei provinces of china roughly follows Logistic function.","0436bd1f":"If take the midpoint as 02\/05\/2020 then total cases can expected at around 15000","f8cb4335":"1. Most of the people are recovered in Non-Hubei provinces of China.\n2. Mortality Rate is around 0.9%","4b35cc02":"Since many people are still under treatment ratio of deaths compared to recovered gives better idea about mortality rate, assuming all infected people are documented.","edd3845f":"# China Cases"}}