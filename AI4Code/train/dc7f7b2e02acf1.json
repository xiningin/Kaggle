{"cell_type":{"4a37b7cd":"code","5db3b42f":"code","bd954ea0":"code","9101ea83":"code","d750cf6e":"code","5b40a2c3":"code","7af72eac":"code","e140c383":"code","177d7000":"code","11b5990e":"code","6b064890":"code","feec04a5":"code","2b8a6a66":"code","42de156f":"code","cfc41dd9":"code","985fb9e6":"code","45165768":"code","b96c19a9":"code","efc1b4a4":"code","dec8603b":"code","0098013a":"code","714427b1":"markdown","7cd8983b":"markdown","efad02b1":"markdown","977ad486":"markdown"},"source":{"4a37b7cd":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport random\nimport os\nimport cv2\nimport glob\nimport gc\n\nfrom matplotlib import pyplot as plt\n\nfrom sklearn import model_selection,datasets\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n\nfrom tensorflow.keras.models import Sequential, load_model\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten,Conv2D, MaxPooling2D \nfrom tensorflow.keras.utils import to_categorical\n","5db3b42f":"def lire_images(img_dir, xdim, ydim, nmax=5000) :\n    \"\"\" \n    Lit les images dans les sous r\u00e9pertoires de img_dir\n    nmax images lues dans chaque r\u00e9pertoire au maximum\n    Renvoie :\n    X : liste des images lues, matrices xdim*ydim\n    y : liste des labels num\u00e9riques\n    label : nombre de labels\n    label_names : liste des noms des r\u00e9pertoires lus\n    \"\"\"\n    label = 0\n    label_names = []\n    X = []\n    y=[]\n    for dirname in os.listdir(img_dir):\n        label_names.append(dirname)\n        data_path = os.path.join(img_dir + \"\/\" + dirname,'*g')\n        files = glob.glob(data_path)\n        n=0\n        for f1 in files:\n            if n>nmax : break\n            img = cv2.imread(f1) # Lecture de l'image dans le repertoire\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # Conversion couleur RGB\n            img = cv2.resize(img, (xdim,ydim)) # Redimensionnement de l'image\n            X.append(np.array(img)) # Conversion en tableau et ajout a la liste des images\n            y.append(label) # Ajout de l'etiquette de l'image a la liste des etiquettes\n            n=n+1\n        print(dirname,' : ',n,' images lues')\n        label = label+1\n    X = np.array(X)\n    y = np.array(y)\n    gc.collect() # R\u00e9cup\u00e9ration de m\u00e9moire\n    return X,y, label, label_names","bd954ea0":"os.listdir(\".\")","9101ea83":"X,y,Nombre_classes,Classes = lire_images(\"..\/input\/covid-19-ct-scan-dataset\/CT\", 224, 224, 1000)","d750cf6e":"plt.figure(figsize=(20,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    j = random.randint(0,len(X))\n    plt.axis('off')\n    plt.imshow(X[j])\n    plt.title(Classes[y[j]])","5b40a2c3":"y = to_categorical(y)\nX = X \/ 255   # Normalisation entre 0 et 1\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1) #10% en jeu de test\ndel X,y","7af72eac":"# R\u00e9seau convolutionnel simple\nmodel = Sequential()\nmodel.add(Conv2D(32, (5, 5), input_shape=(224, 224, 3), activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(Nombre_classes, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","e140c383":"model.summary()","177d7000":"# Apprentissage\ntrain1 = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, verbose=1)","11b5990e":"# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","6b064890":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Score')\n    plt.legend()\n    plt.show()","feec04a5":"plot_scores(train1)","2b8a6a66":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(224, 224, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(Nombre_classes, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","42de156f":"model.summary()","cfc41dd9":"# Apprentissage\ntrain2 = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, verbose=1)\n\n# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","985fb9e6":"plot_scores(train2)","45165768":"from tensorflow.keras.applications import VGG16\nvgg16 = VGG16(weights='imagenet', include_top=False, input_shape=(224,224,3))\nvgg16.trainable = False\nvgg16.summary()\nmodel = Sequential()\nmodel.add(vgg16)\nmodel.add(Flatten())\nmodel.add(Dense(Nombre_classes, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()\ntrain3 = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, verbose=1)","b96c19a9":"# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))\nplot_scores(train3)","efc1b4a4":"scores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","dec8603b":"def plot_scores_3(train1,train2,train3) :\n    accuracy3 = train3.history['accuracy']\n    val_accuracy3 = train3.history['val_accuracy']\n    epochs = range(len(accuracy3))\n    #plt.plot(epochs, accuracy3, 'g', label='Score apprentissage Transfer Learning')\n    plt.plot(epochs, val_accuracy3, 'g', label='Score validation Transfer Learning')\n    \n    accuracy2 = train2.history['accuracy']\n    val_accuracy2 = train2.history['val_accuracy']\n    epochs = range(len(accuracy2))\n    #plt.plot(epochs, accuracy2, 'r', label='Score apprentissage CNN profond')\n    plt.plot(epochs, val_accuracy2, 'r', label='Score validation CNN profond')\n    \n    accuracy1 = train1.history['accuracy']\n    val_accuracy1 = train1.history['val_accuracy']\n    epochs = range(len(accuracy1))\n    #plt.plot(epochs, accuracy1, 'b', label='Score apprentissage CNN')\n    plt.plot(epochs, val_accuracy1, 'b', label='Score validation CNN')\n    \n    plt.title('Score')\n    plt.legend()\n    plt.show()","0098013a":"plot_scores_3(train1,train2,train3)","714427b1":"# Comparaison des 3 m\u00e9thodes utilis\u00e9es","7cd8983b":"# Une Couche Convolutionnelle","efad02b1":"# Transfer Learning","977ad486":"# Mod\u00e8le CNN plus profond"}}