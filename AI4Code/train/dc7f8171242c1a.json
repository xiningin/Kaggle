{"cell_type":{"78b2cff2":"code","4aefa52e":"code","ab56901d":"code","d6cff5de":"code","31c6fb75":"code","f08d2319":"code","62a1d475":"code","e816153f":"code","5d3bcebd":"code","e48deb60":"code","d9c2898c":"code","4e1b1b91":"markdown","13b11d38":"markdown","4cc87d88":"markdown","25641dfa":"markdown"},"source":{"78b2cff2":"import pandas as pd\nimport scipy.io\nfrom array import *\nimport numpy as np\nimport re\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer","4aefa52e":"df_train = pd.read_csv ('..\/input\/tweet-sentiment-extraction\/train.csv')\ndf_train.head()","ab56901d":"df_test = pd.read_csv ('..\/input\/tweet-sentiment-extraction\/test.csv')\ndf_test.head()","d6cff5de":"def unique_list(l):\n    ulist = []\n    [ulist.append(x) for x in l if x not in ulist]\n    return ulist","31c6fb75":"def choosing_selectedword(df_process):\n    train_data = df_process['text']\n    train_data_sentiment = df_process['sentiment']\n    selected_text_processed = []\n    analyser = SentimentIntensityAnalyzer()\n    for j in range(0 , len(train_data)):\n        text = re.sub(r'http\\S+', '', str(train_data.iloc[j]))\n        if(train_data_sentiment.iloc[j] == \"neutral\" or len(text.split()) < 2):\n            selected_text_processed.append(str(text))\n        if(train_data_sentiment.iloc[j] == \"positive\" and len(text.split()) >= 2):\n            aa = re.split(' ', text)\n        \n            ss_arr = \"\"\n            polar = 0\n            for qa in range(0,len(aa)):\n                score = analyser.polarity_scores(aa[qa])\n                if score['compound'] >polar:\n                    polar = score['compound']\n                    ss_arr = aa[qa]\n            if len(ss_arr) != 0:\n                selected_text_processed.append(ss_arr)   \n            if len(ss_arr) == 0:\n                selected_text_processed.append(text)\n        if(train_data_sentiment.iloc[j] == \"negative\"and len(text.split()) >= 2):\n            aa = re.split(' ', text)\n        \n            ss_arr = \"\"\n            polar = 0\n            for qa in range(0,len(aa)):\n                score = analyser.polarity_scores(aa[qa])\n                if score['compound'] <polar:\n                    polar = score['compound']\n                    ss_arr = aa[qa]\n            if len(ss_arr) != 0:\n                selected_text_processed.append(ss_arr)   \n            if len(ss_arr) == 0:\n                selected_text_processed.append(text)  \n    return selected_text_processed","f08d2319":"selected_text_train = choosing_selectedword(df_train)","62a1d475":"def jaccard(str1, str2): \n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","e816153f":"train_selected_data = df_train['selected_text']\naverage = 0;\nfor i in range(0,len(train_selected_data)):\n    ja_s = jaccard(str(selected_text_train[i]),str(train_selected_data[i]))\n    average = ja_s+average\nprint('Training Data accuracey')\nprint(average\/len(selected_text_train))","5d3bcebd":"selected_text_test = choosing_selectedword(df_test)","e48deb60":"df_textid = df_test['textID']\ntext_id_list = []\nfor kk in range(0,len(df_textid)):\n    text_id_list.append(df_textid.iloc[kk])\ndf_sub = pd.DataFrame({'textID':text_id_list,'selected_text':selected_text_test})\ndf_sub.head()","d9c2898c":"df_sub.to_csv('submission.csv',index=False)","4e1b1b91":"# Below code will get the words with highest polarity **","13b11d38":"# Checking training data accuracey","4cc87d88":"This method includes following 2 steps\n* First split the tweet into words.\n* Finding the word with highest intensity of sentiment using SentimentIntensityAnalyzer","25641dfa":"# Here I will give the simple solution for tweet text extraction using SentimentIntensityAnalyzer."}}