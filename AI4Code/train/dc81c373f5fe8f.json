{"cell_type":{"bf128da0":"code","7e43716d":"code","bf9bc36e":"code","6fbe385f":"code","ff8119c3":"code","615cfecc":"code","0e3a809f":"code","38c0f5e0":"code","c78d006f":"code","b5ce4281":"code","bc10a67c":"code","153ab8f9":"code","40ef7bb8":"code","42ce7885":"code","e3ac7792":"code","073a8137":"code","512cf052":"code","52bde72d":"code","447f4e75":"code","62ab8b3c":"code","d46a7a57":"code","d9e8bb23":"code","6700d91e":"code","142f8a78":"code","cedf9e32":"code","3cbc58c3":"markdown","97b409f5":"markdown","7eea912e":"markdown","5cc5b8b5":"markdown","048d066d":"markdown","85acb9d0":"markdown","62b9a711":"markdown","2ad97d1a":"markdown","5b91f831":"markdown","56ff478b":"markdown","2914625e":"markdown"},"source":{"bf128da0":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e43716d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import BatchNormalization,Dropout,Dense,Flatten,Conv1D\nfrom tensorflow.keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","bf9bc36e":"data = pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')\ndata.head()","6fbe385f":"data.shape","ff8119c3":"data.info()","615cfecc":"data.Class.unique()","0e3a809f":"data.Class.value_counts()","38c0f5e0":"a = data[data.Class==0]\nb = data[data.Class==1]","c78d006f":"a = data.sample(738)","b5ce4281":"data_1 = b.append(a,ignore_index=True)","bc10a67c":"data_1.shape","153ab8f9":"X = data.drop(['Class'],axis=1)\ny=data['Class']","40ef7bb8":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,stratify=y)","42ce7885":"X_train.shape,X_test.shape","e3ac7792":"scaler=StandardScaler()\nX_train=scaler.fit_transform(X_train)\nX_test=scaler.transform(X_test)","073a8137":"y_train=y_train.to_numpy()\ny_test=y_test.to_numpy()","512cf052":"X_train=X_train.reshape(X_train.shape[0],X_train.shape[1],1)\nX_test=X_test.reshape(X_test.shape[0],X_test.shape[1],1)","52bde72d":"model=Sequential()\nmodel.add(Conv1D(64,2,activation='relu',input_shape=X_train[0].shape))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv1D(128,2,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\nmodel.add(Dense(512,activation='relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(1,activation='sigmoid'))","447f4e75":"model.summary()","62ab8b3c":"model.compile(optimizer=Adam(learning_rate=0.0001),loss='binary_crossentropy',metrics=['accuracy'])","d46a7a57":"history = model.fit(X_train,y_train,\n                    steps_per_epoch = 25\n                    ,epochs=20\n                    ,validation_steps=2\n                    ,verbose=1\n                    ,validation_data=(X_test,y_test))","d9e8bb23":"acc=history.history['accuracy']\nval_acc=history.history['val_accuracy']\n\nepochs=range(len(acc)) \nplt.figure(figsize=(20, 6))\n\nplt.plot(epochs, acc,color='blue', label='Training Accuracy')\nplt.plot(epochs, val_acc,color='orange', label='Validation Accuracy')\nplt.legend(bbox_to_anchor=(1.15, 1.0), loc='upper right')\nplt.title('Training VS Validation Accuracy')","6700d91e":"anomaly = pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')\ndata.head()","142f8a78":"import seaborn as sns\nsns.countplot(anomaly.Class)\nplt.show()\nprint(anomaly.Class.value_counts())","cedf9e32":"timedelta = pd.to_timedelta(anomaly['Time'], unit='s')\nanomaly['Time_hour'] = (timedelta.dt.components.hours).astype(int)\n\nplt.figure(figsize=(12,5))\nsns.distplot(anomaly[anomaly['Class'] == 0][\"Time_hour\"], color='b')\nsns.distplot(anomaly[anomaly['Class'] == 1][\"Time_hour\"], color='r')\nplt.title('Fraud and Normal Transactions by Hours', fontsize=17)\nplt.xlim([-1,25])\nplt.show()","3cbc58c3":"# **Anomaly Detection**","97b409f5":"# **Build CNN Model**","7eea912e":"# **Compiling and Fiting**","5cc5b8b5":"# **Gathering and assessing the data**","048d066d":"## We have 492 fraud cases in the dataset which are anomalies.","85acb9d0":"# **Importing Libraries**","62b9a711":"# **Split Train and Test **","2ad97d1a":"# **EDA**","5b91f831":"# Lets transofrm this feature into hours to get a better understanding.","56ff478b":"# **Reshaping**","2914625e":"# **Applying StandardScaler to obtain all the features**"}}