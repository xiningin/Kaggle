{"cell_type":{"a9f42861":"code","20c5c982":"code","105b2f8e":"code","014cfe0d":"code","8914a6a0":"code","5325c419":"code","503eb07b":"code","934f77c1":"code","d0f96e0d":"code","309668e8":"code","f30400de":"code","7c3dc472":"code","ea2df976":"markdown","93861ab4":"markdown","e27d62bd":"markdown","ff2324b4":"markdown","1eb23e34":"markdown","aaa12ee9":"markdown","61058fec":"markdown","e41b33de":"markdown","5df55623":"markdown","fda8c56d":"markdown"},"source":{"a9f42861":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","20c5c982":"df=pd.read_csv('\/kaggle\/input\/earthquake\/all_month.csv')","105b2f8e":"import re\ndf['short place']=[re.findall(r'\\w+',i)[-1] for i in df['place']]\ndf.dropna(subset=['mag'],inplace=True)","014cfe0d":"features=[i for i in df.columns if df[i].isna().sum()==0] # features include only place, type and source of an earthquake\nfor i in ['mag','place','time','id','updated','net','magType','depth']:\n    features.remove(i)\n    \nX=df[features]\ny=df[['mag','depth', 'depthError']] # we try to predict magnitude, depth as well as depthError  ","8914a6a0":"categorical=[]\nfor i in features:\n    if df[i].dtype==\"object\":\n        categorical.append(i)","5325c419":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nfor i in categorical:\n    X[i]=le.fit_transform(X[i])\nfor i in [i for i in y.columns if y[i].dtype=='object']:\n    y[i]=le.fit_transform(y[i])","503eb07b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.10)","934f77c1":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.datasets import make_classification\nclf = RandomForestRegressor(n_estimators=100, criterion='mse', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='auto', max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, bootstrap=True, oob_score=False, n_jobs=None, random_state=None, verbose=0, warm_start=False, ccp_alpha=0.0, max_samples=None)\nclf.fit(X_train, y_train)","d0f96e0d":"from sklearn.model_selection import cross_val_score\nprint(cross_val_score(clf, X, y, cv=5).mean())","309668e8":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = [\n{'n_estimators': [10, 25], 'max_features': [5, 10], \n 'max_depth': [10, 50, None], 'bootstrap': [True, False]}\n]\n\ngrid_search_forest = GridSearchCV(clf, param_grid, cv=10, scoring='neg_mean_squared_error')\ngrid_search_forest.fit(X_train, y_train)","f30400de":"print(cross_val_score(grid_search_forest.best_estimator_, X, y, cv=5).mean())","7c3dc472":"y_predicted=grid_search_forest.best_estimator_.predict(X_test)\ny_predicted=pd.DataFrame(y_predicted, columns=y_test.columns)\ncorrmatrix=pd.DataFrame()\nfor i in y_predicted.columns:\n    corrmatrix[i+'_predicted']=y_predicted[i].values\n    corrmatrix[i+'_test']=y_test[i].values\nimport plotly.graph_objects as go\nx=list(corrmatrix.corr().index)\ny=list(corrmatrix.corr().columns)\nvalues=np.array(corrmatrix.corr().values)\nfig = go.Figure(data=go.Heatmap(\n    z=values,\n    x=x,\n    y=y,\n                 \n    \n                   hoverongaps = False))\nfig.show()","ea2df976":"<p style = \"font-family:palatino linotype,serif;font-size:25px;\">\n    Encode categorical data to integers\n    <\/p>","93861ab4":"<p style = \"font-family:palatino linotype,serif;font-size:25px;\">\n    Cross-validation\n    <\/p>","e27d62bd":"<p style = \"font-family:palatino linotype,serif;font-size:25px;\">\n    Separate categorical data\n    <\/p>","ff2324b4":"<p style = \"font-family:palatino linotype,serif;font-size:25px;\">\n    Split the data into test and train\n    <\/p>","1eb23e34":"<p style = \"font-family:palatino linotype,serif;font-size:25px;\">\n    Build a random forest regressor\n    <\/p>","aaa12ee9":"<p style = \"font-family:palatino linotype,serif;font-size:25px;\">\n    Hyperparameters tuning by gridsearch\n    <\/p>","61058fec":"<p style = \"font-family:palatino linotype,serif;font-size:25px;\">\n    Keep only name of a state from 'place' column \n    <\/p>","e41b33de":"<p style = \"font-family:palatino linotype,serif;font-size:25px;\"> \n    Make features\n    <\/p>","5df55623":" <p style = \"font-family:palatino linotype,serif;font-size:25px;\">\n    Let's plot heatmap to check correlation of prediction and test data\n    <\/p>","fda8c56d":"<p style = \"font-family:palatino linotype,serif;font-size:25px;\">\n    in my case +few % of the score\n    <\/p>"}}