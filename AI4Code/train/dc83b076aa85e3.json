{"cell_type":{"aebe2d06":"code","7ba7e47b":"code","771b759e":"code","1a62be5a":"code","3dfb6ebc":"code","e1dcfb68":"code","6a394496":"code","33d1496c":"code","dee992ae":"code","c2412e38":"code","ad40c4da":"code","cf296a8a":"code","3a3ec5d6":"code","509948cb":"code","932f08d2":"code","fc815bf8":"code","65068631":"code","20d22d2b":"code","a1709d5a":"code","eec71fdb":"code","373c8d24":"code","19c7abc2":"code","6f605d62":"code","a001086a":"code","229161fc":"code","4ab521c3":"code","983cb2ca":"markdown","43fd3d71":"markdown","12519c75":"markdown","fbb508f6":"markdown","7c6ef7b5":"markdown","f3b272b3":"markdown","29f64520":"markdown","b9249c11":"markdown","cd9cb569":"markdown","00f78607":"markdown","2e43b51a":"markdown","729813ce":"markdown","c0dcc32b":"markdown","b62b06e1":"markdown","f36a135a":"markdown","b8be448a":"markdown","a25c856f":"markdown","33a790db":"markdown","f0999af1":"markdown","36a3c936":"markdown"},"source":{"aebe2d06":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nimport plotly.graph_objects as go\nimport seaborn as sns","7ba7e47b":"confirmed_cases = pd.read_csv('\/kaggle\/input\/covid19-01222020-to-02272020\/COVID-19-master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Confirmed.csv')\n\ndeaths_cases = pd.read_csv('\/kaggle\/input\/covid19-01222020-to-02272020\/COVID-19-master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Deaths.csv')\n\nrecovered_cases = pd.read_csv('\/kaggle\/input\/covid19-01222020-to-02272020\/COVID-19-master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Recovered.csv')\n\n","771b759e":"confirmed_cases.head()","1a62be5a":"confirmed_cases.info()","3dfb6ebc":"confirmed_by_country = confirmed_cases.groupby('Country\/Region')\ndeaths_by_country = deaths_cases.groupby('Country\/Region')\nrecovered_by_country = recovered_cases.groupby('Country\/Region')\n\n","e1dcfb68":"\naggr_confirmed_country = confirmed_by_country.apply(lambda df:df.iloc[:,4:].sum()).iloc[:,-1]\naggr_deaths_country = deaths_by_country.apply(lambda df:df.iloc[:,4:].sum()).iloc[:,-1]\naggr_recovered_country = recovered_by_country.apply(lambda df:df.iloc[:,4:].sum()).iloc[:,-1]\n\naggr_confirmed_country = aggr_confirmed_country.rename(index = \n                                 {'Mainland China':'China','North Macedonia':'Macedonia',\n                                  'South Korea':'Korea, Republic of','UK':'United Kingdom',\n                                  'Macau':'Maca','US':'United States of America'})\n\naggr_deaths_country = aggr_deaths_country.rename(index = \n                                 {'Mainland China':'China','North Macedonia':'Macedonia',\n                                  'South Korea':'Korea, Republic of','UK':'United Kingdom',\n                                  'Macau':'Maca','US':'United States of America'})\n\naggr_recovered_country = aggr_recovered_country.rename(index = \n                                 {'Mainland China':'China','North Macedonia':'Macedonia',\n                                  'South Korea':'Korea, Republic of','UK':'United Kingdom',\n                                  'Macau':'Maca','US':'United States of America'})","6a394496":"from io import StringIO\nimport requests\nheaders = {'User-Agent': 'Mozilla\/5.0 (Windows NT 6.1; WOW64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/56.0.2924.76 Safari\/537.36'}\nurl = 'https:\/\/pkgstore.datahub.io\/JohnSnowLabs\/country-and-continent-codes-list\/country-and-continent-codes-list-csv_csv\/data\/b7876b7f496677669644f3d1069d3121\/country-and-continent-codes-list-csv_csv.csv'\ns=requests.get(url, headers= headers).text\ncountry_info = pd.read_csv(StringIO(s))\n\ndef get_tree_letter_code(s):\n    country = country_info[country_info['Country_Name'].str.contains(s)]\n    if country.empty:\n        return ''\n    else:\n        return country['Three_Letter_Country_Code'].values[0]\n","33d1496c":"\naggr_country_df = pd.DataFrame()\naggr_country_df['country'] = aggr_confirmed_country.index\naggr_country_df['confirmed'] = aggr_confirmed_country.values\naggr_country_df['deaths'] = aggr_deaths_country.values\naggr_country_df['recovered'] = aggr_recovered_country.values\naggr_country_df['Three_Letter_Country_Code'] = aggr_country_df['country'].apply(get_tree_letter_code)\naggr_country_df.head()","dee992ae":"def draw_world_map(zindex,cscale,title,color_title):\n    fig = go.Figure(data=go.Choropleth(\n        locations = aggr_country_df['Three_Letter_Country_Code'],\n        z = zindex,\n        text = aggr_country_df['country'],\n        colorscale = cscale,\n        autocolorscale=False,\n        reversescale=False,\n        marker_line_color='darkgray',\n        marker_line_width=0.5,\n        colorbar_title = color_title,\n    ))\n\n    fig.update_layout(\n        title_text=title,\n        geo=dict(\n            showframe=False,\n            showcoastlines=False,\n            projection_type='equirectangular'\n        )\n    )\n    fig.show()\n","c2412e38":"draw_world_map(aggr_country_df['confirmed'],'Reds','Confirmed covid19','number of confirmed')","ad40c4da":"\naggr_country_df['log-confirmed'] = np.log(aggr_country_df['confirmed']+ 1e-7 )\naggr_country_df['deaths-ratio'] = aggr_country_df['deaths']\/aggr_country_df['confirmed']\naggr_country_df['recovered-ratio'] = aggr_country_df['recovered']\/aggr_country_df['confirmed']\naggr_country_df.head()\n","cf296a8a":"draw_world_map(aggr_country_df['log-confirmed'],'Blues','logarithmic distribution of confirmed cases','log of num of confirmed')","3a3ec5d6":"draw_world_map(aggr_country_df['deaths-ratio'],'Reds','distribution of deaths-ratio cases','ratio')","509948cb":"draw_world_map(aggr_country_df['recovered-ratio'],'Greens',' distribution of recovered-ratio cases','ration')","932f08d2":"\ntime_series_confirmed = confirmed_by_country.apply(lambda df:df.iloc[:,4:].sum())\ntime_series_deaths = deaths_by_country.apply(lambda df:df.iloc[:,4:].sum())\ntime_series_recovered = recovered_by_country.apply(lambda df:df.iloc[:,4:].sum())\n\ntime_series_deaths_ratio = time_series_deaths.divide((time_series_confirmed + 1e-10))\ntime_series_recovered_ratio = time_series_recovered.divide((time_series_confirmed + 1e-10))","fc815bf8":"\ndef draw_growth_plot(country):\n    \n    test_df = pd.DataFrame()\n    t1 = np.trim_zeros(time_series_confirmed.loc[country].values)\n    t2 = time_series_deaths.loc[country].values[-t1.shape[0]:]\n    t3 = time_series_recovered.loc[country].values[-t1.shape[0]:]\n\n    test_df['day'] = range(len(t1))\n    test_df['conf'] = t1\n    test_df['death'] =t2\n    test_df['rec'] = t3\n\n    test_df = pd.melt(test_df, id_vars=['day'],value_vars=['conf', 'death','rec'])\n    test_df\n    fig, ax1 = plt.subplots(figsize=(10, 10))\n    sns.barplot(x='day', y='value', hue='variable', data=test_df,ax = ax1)\n","65068631":"draw_growth_plot('Iran')","20d22d2b":"draw_growth_plot('Mainland China')\n","a1709d5a":"\ndraw_growth_plot('South Korea')","eec71fdb":"draw_growth_plot('US')","373c8d24":"cmap = sns.diverging_palette(220, 10, as_cmap=True)\nfig, ax = plt.subplots(figsize=(10,10)) \nsns.heatmap(time_series_confirmed.transpose().corr(),cmap = cmap,linewidths=.5,vmax=1,ax=ax)","19c7abc2":"cmap = sns.diverging_palette(220, 10, as_cmap=True)\nfig, ax = plt.subplots(figsize=(10,10)) \nsns.heatmap(time_series_deaths_ratio.transpose().corr(),cmap = cmap,linewidths=.5,ax=ax)","6f605d62":"cmap = sns.diverging_palette(220, 10, as_cmap=True)\nfig, ax = plt.subplots(figsize=(10,10)) \nsns.heatmap(time_series_recovered_ratio.transpose().corr(),cmap = cmap,linewidths=.5,ax=ax)","a001086a":"# time_series_confirmed \n\ndef draw_comparison_growth(arr,lower_bound_treshold,title):\n    temp = arr.transpose()\n    temp = temp.set_index([pd.Index([i for i in range(len(temp.index))])])\n    plt.figure(figsize=(10,10))\n    aggr_count = temp.iloc[-1,:]\n    for cnt in temp.columns:\n        if cnt == 'Mainland China' or cnt =='Others' or aggr_count[cnt] < lower_bound_treshold :\n            pass\n        else:\n            plt.plot(temp[cnt])\n    plt.legend()\n    plt.title(title)\n    \ndraw_comparison_growth(time_series_confirmed,50,'Growth of confirmed cases which at least has 400 confirmed case')","229161fc":"draw_comparison_growth(time_series_deaths,5,'Growth of death cases which at least has 5 death case') ","4ab521c3":"# time_series_recovered\ndraw_comparison_growth(time_series_recovered,5,'Growth of recovered cases which at least has 5 recovered case') ","983cb2ca":"Now all the data is provided to make a dataframe consist of countries, number of confirmed\/deaths\/recovered cases and Three_Letter_Country_Code","43fd3d71":"The following code find the total number of (confirmed\/deaths\/recovered) cases in each group(country)\nI also renamed some indexes of dataframes because of making them compatible with another csv file containing Three_Letter_Country_Code which I need to use them for rendering world map.","12519c75":"# Importing data\nthis data base includes archived_data and csse_covid_19_data folder. As we can see in folder description, the csse_covid_19_data has been updated daily until now. So we use this folder data.","fbb508f6":"For exmaple from the deaths ratio world map we can see Iran has a larger ratio than other countries.\nAlso I depict Mainland China and South Korea for other examples.","7c6ef7b5":"The below figure illustrate recovered ratio based on confirmed cases in each country.","f3b272b3":"The following method is defined to get the zindex(the attribute based on this each country assinged a color) and color scale and title and color title and draw world map plot.","29f64520":"The following method get country name and illustrate the changes of (confirmed\/deaths\/recovered) case through the time","b9249c11":"# exploring data\nfrom the last step the confirmed_cases and deaths_cases and recovered_cases are Pandas dataframes with similar structure. It can be seen in the below format:\n","cd9cb569":"Up to now, I illustrate the aggregate data based on each country.\nNow I want to illustrate and analyis the changes through the time.","00f78607":"In the below code I want to illustrate heat map of correlations among deaths growth of all the participant countries.","2e43b51a":"so I add a log-confirmed column to this dataframe to eliminate the large numbers.\nalso we want to see the number of deaths\/recovered ratio based on the confirmed case, so I add deaths-ratio and recovered-ratio column to this dataframe.","729813ce":"The below method get a timeseries and a lower_bound_treshold and title, to add all counties growth in one plot which satisfy the bound limitation.","c0dcc32b":"In the below code I want to illustrate heat map of correlations among deaths growth of all the participant countries.","b62b06e1":"In the below code I want to illustrate heat map of correlations among confirmed growth of all the participant countries.","f36a135a":"Now we can call the draw_world_map with log-confirmed data and we can see the distribution of confirmed cases along the world map.","b8be448a":"The below figure illustrate deaths ratio based on confirmed cases in each country.","a25c856f":"In the next step, group cases by Country\/Region column.","33a790db":"country_info is contain some information about countries which I want for render world map.\n","f0999af1":"we can also get some information about these dataframes with following method. Up to now the number of countries which seen coronavirus is 105 and we can see timeseries data (confirmed\/deaths\/recovered cases) with lenght 37 in each country. The following method print some info about confirmed cases.","36a3c936":"In the next call draw_world_map for confirmed cases, as we can see in the below plot because the number of confirmed cases in china is about 1.5M people and too far with other countries, this plot is not informative."}}