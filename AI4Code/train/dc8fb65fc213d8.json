{"cell_type":{"dbc8a273":"code","1172655e":"code","6f57a336":"code","5f508cfd":"code","c4cd84d5":"code","24c6c176":"code","d05ee88e":"code","83d69e33":"code","04c5f668":"code","ab4c1d16":"code","760f9a4e":"code","92a2cfee":"code","b9c45f12":"code","d3714262":"code","465ba0ef":"code","b613cbaf":"code","92ef28fa":"code","e59fd6dd":"code","14ec0449":"code","1fd80fe5":"code","90aa2717":"code","eb3c4799":"code","c4137db1":"code","331ce393":"markdown","422d8b74":"markdown","671196bd":"markdown","851f0128":"markdown","177afc0b":"markdown","d58ecd58":"markdown","a3398c0d":"markdown","ddb1ef3a":"markdown","d47591db":"markdown","d632be79":"markdown","d402fc3f":"markdown"},"source":{"dbc8a273":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras import layers,models\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras import regularizers\nfrom sklearn.utils import shuffle\ncars_data=pd.read_csv('..\/input\/car-price-prediction\/CarPrice_Assignment.csv')\n\n\n\n  ","1172655e":"cars_data.head()","6f57a336":"cars_data.corr()","5f508cfd":"cars_data.describe()","c4cd84d5":"cars_data.info()","24c6c176":"cars_data=shuffle(cars_data)\ncars_data=cars_data.drop('CarName',axis=1)\ncars_data=cars_data.drop('car_ID',axis=1)","d05ee88e":"cars_data.head()","83d69e33":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\ncars_data['fueltype']=labelencoder.fit_transform(cars_data['fueltype'])\ncars_data['aspiration']=labelencoder.fit_transform(cars_data['aspiration'])\ncars_data['doornumber'] = cars_data['doornumber'].map({'two':2,'four':4})\ncars_data['carbody']=labelencoder.fit_transform(cars_data['carbody'])\ncars_data['drivewheel']=labelencoder.fit_transform(cars_data['drivewheel'])\ncars_data['enginelocation']=labelencoder.fit_transform(cars_data['enginelocation'])\ncars_data['enginetype']=labelencoder.fit_transform(cars_data['enginetype'])\ncars_data['fuelsystem']=labelencoder.fit_transform(cars_data['fuelsystem'])\ncars_data['cylindernumber'] = labelencoder.fit_transform(cars_data['cylindernumber'])\n\n","04c5f668":"cars_data.info()","ab4c1d16":"train_data=cars_data.iloc[:103]\ntrain_targets=cars_data.price.iloc[:103]\ntrain_targets=np.asarray(train_targets)\ntrain_data.drop('price',axis=1,inplace=True)\n\n\nprint(train_data.shape)\n\ntest_data=cars_data.iloc[103:166]\ntest_targets=cars_data.price.iloc[103:166]\ntest_targets=np.asarray(test_targets)\ntest_data.drop('price',axis=1,inplace=True)\n\n\nprint(test_data.shape)","760f9a4e":"\nval_data=cars_data.iloc[166:]\nval_data.drop('price',axis=1,inplace=True)\n\nval_targets=cars_data.price.iloc[166:]\nval_targets=np.asarray(val_targets)\n\n","92a2cfee":"train_data.isna().sum()","b9c45f12":"test_data.isna().sum()","d3714262":"val_data.isna().sum()","465ba0ef":"\nmodel = models.Sequential()\nmodel.add(layers.Dense(10, kernel_regularizer=regularizers.l2(0.01),activation='relu',input_shape=(train_data.iloc[1].shape)))\nmodel.add(layers.Dropout(0.5))\n\n#model.add(layers.Dropout(0.5))\n\nmodel.add(layers.Dense(5,kernel_regularizer=regularizers.l2(0.01),activation='relu'))\n\nmodel.add(layers.Dense(1))\nmodel.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])\nhis=model.fit(train_data,train_targets,epochs=500,batch_size=1,validation_data=(val_data,val_targets))","b613cbaf":"model.evaluate(test_data,test_targets)","92ef28fa":"\nmodel.summary()","e59fd6dd":"his.history.keys()","14ec0449":"import matplotlib.pyplot as plt\n\nvalmae=his.history['val_mae']\nepochs=range(500)\nplt.plot(epochs,valmae,'b',label='val mae')\n","1fd80fe5":"model = models.Sequential()\nmodel.add(layers.Dense(10, kernel_regularizer=regularizers.l2(0.01),activation='relu',input_shape=(train_data.iloc[1].shape)))\nmodel.add(layers.Dropout(0.5))\n\n#model.add(layers.Dropout(0.5))\n\nmodel.add(layers.Dense(5,kernel_regularizer=regularizers.l2(0.01),activation='relu'))\n\nmodel.add(layers.Dense(1))\nmodel.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])\nhis=model.fit(train_data,train_targets,epochs=120,batch_size=1,validation_data=(val_data,val_targets))","90aa2717":"model.evaluate(test_data,test_targets)","eb3c4799":"pred=model.predict(test_data)\npred[3]","c4137db1":"test_targets[3]","331ce393":"# **Evauating results on test data**","422d8b74":"# **Importing Libraries**","671196bd":"# **Predicting value**","851f0128":"# **Checking for null values**","177afc0b":"# **Making new model according to the plotted graph**","d58ecd58":"# **Checking for relationships between features**","a3398c0d":"# **Plotting epochs vs validation mae**","ddb1ef3a":"# **Manually splitting data**","d47591db":"# **Creating model with 500 epochs **","d632be79":"# **Shuffling data and removing irrelevant data**","d402fc3f":"# **Encoding the features**"}}