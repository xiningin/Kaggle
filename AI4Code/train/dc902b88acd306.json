{"cell_type":{"deaf1561":"code","039c6d22":"code","7397affd":"code","8ad2cb5d":"code","dc4d8775":"code","f72ecb61":"code","43dd1d24":"code","e4b69f88":"code","98ae7152":"code","3149f853":"markdown"},"source":{"deaf1561":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","039c6d22":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as dt\nfrom typing import Tuple\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nimport plotly.offline\n\n\n# read data\nin_kaggle = True\n\n# base report output path\nreports_folder = 'reports\/'\n\ndef get_data_file_path(is_in_kaggle: bool) -> Tuple[str, str, str, str, str]:\n    train_path = ''\n    test_path = ''\n\n    if is_in_kaggle:\n        # running in Kaggle, inside the competition\n        train_path = '..\/input\/lish-moa\/train_features.csv'\n        train_targets_path = '..\/input\/lish-moa\/train_targets_scored.csv'\n        train_targets_nonscored_path = '..\/input\/lish-moa\/train_targets_nonscored.csv'\n        test_path = '..\/input\/lish-moa\/test_features.csv'\n        sample_submission_path = '..\/input\/lish-moa\/sample_submission.csv'\n    else:\n        # running locally\n        train_path = 'data\/train_features.csv'\n        train_targets_path = 'data\/train_targets_scored.csv'\n        train_targets_nonscored_path = 'data\/train_targets_nonscored.csv'\n        test_path = 'data\/test_features.csv'\n        sample_submission_path = 'data\/sample_submission.csv'\n\n    return train_path, train_targets_path, train_targets_nonscored_path, test_path, sample_submission_path\n    \n","7397affd":"# Import data\ntrain_set_path, train_set_targets_path, train_set_targets_nonscored_path, test_set_path, sample_subm_path = get_data_file_path(in_kaggle)\n\n","8ad2cb5d":"a = pd.read_csv(train_set_path)\nb = pd.read_csv(test_set_path)\nc = pd.read_csv(train_set_targets_nonscored_path)\nd = pd.read_csv(train_set_targets_path)\n\nprint(a.shape,b.shape,c.shape,d.shape)","dc4d8775":"merged = pd.concat([a,b])\n\n# Datasets for treated and control experiments\ntreated = a[a['cp_type'] == 'trt_cp']\ncontrol = a[a['cp_type'] == 'ctl_vehicle']\n\n# Treatment time datasets\ncp24 = a[a['cp_time']== 24]\ncp48 = a[a['cp_time']== 48]\ncp72 = a[a['cp_time']== 72]\n\n# Merge scored and nonscored labels\nall_drugs = pd.merge(d, c, on='sig_id', how='inner')\n\n# Treated drugs without control\ntreated_list = treated['sig_id'].to_list()\ndrugs_tr = d[d['sig_id'].isin(treated_list)]\n\n# Non-treated control observations\ncontrol_list = control['sig_id'].to_list()\ndrugs_cntr = d[d['sig_id'].isin(control_list)]\n\n# Treated drugs:\nnonscored = c[c['sig_id'].isin(treated_list)]\nscored = d[d['sig_id'].isin(treated_list)]\n\n# adt = All Drugs Treated\nadt = all_drugs[all_drugs['sig_id'].isin(treated_list)]\n\n# Select the columns c-\nc_cols = [col for col in a.columns if 'c-' in col]\n\n# Filter the columns c-\ncells_tr = treated[c_cols]\ncells_cntr = control[c_cols]\n\n\n# Select the columns g-\ng_cols = [col for col in a.columns if 'g-' in col]\n\n# Filter the columns g-\ngenes_tr = treated[g_cols]\ngenes_cntr = control[g_cols]\n\nlabels_in_training = pd.merge(a, d, on='sig_id', how='inner')\ntreated_labels_in_training = labels_in_training[labels_in_training['sig_id'].isin(treated_list)]\n\ntarget_label = 'nfkb_inhibitor'\ncols_to_research = c_cols.copy()\ncols_to_research.append(target_label)\n\nfinal_training_df = treated_labels_in_training[cols_to_research]","f72ecb61":"!pip install autoviz ","43dd1d24":"final_training_df.dtypes","e4b69f88":"from autoviz.AutoViz_Class import AutoViz_Class","98ae7152":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\ndft = AV.AutoViz(filename='', sep='' , depVar='nfkb_inhibitor', dfte=final_training_df, header=0, verbose=2, lowess=False, \n                 chart_format='svg', max_rows_analyzed=25000, max_cols_analyzed=40)\n","3149f853":"## This is a test Notebook for AutoViz using some code from the original here:\nhttps:\/\/gist.github.com\/gvyshnya\/7644fd77567051203ad96d95fbc7ef2a\nThanks to gvyshnya for the original code!"}}