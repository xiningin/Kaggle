{"cell_type":{"88506779":"code","8cbcdc20":"code","12321a72":"code","e024817b":"code","9cc6f7bd":"code","bb0e6983":"code","3d463a3f":"code","c07ef85e":"code","b7793bea":"code","4e69805b":"code","43409359":"code","6e19e366":"code","33ba5fd3":"code","8180a316":"code","af3e00e3":"code","279bdc6c":"code","6b939398":"code","2600a4ff":"code","8f39c835":"code","64cc8b53":"code","bd65c476":"code","58d4f7e8":"code","9ab0af45":"code","55c137a1":"code","1d7fda9e":"code","806a53ca":"code","11469b4a":"code","07fe1617":"markdown","f023866e":"markdown","f10b42f7":"markdown","028acbf9":"markdown","fa3c257c":"markdown","be699a11":"markdown","5e7e489d":"markdown","cd513b43":"markdown","94398b17":"markdown","90b7e4a6":"markdown","b844d5eb":"markdown","bfefc007":"markdown","8806618c":"markdown","38475ead":"markdown","44bb8c09":"markdown","42bcb020":"markdown","469259a1":"markdown","b74b6158":"markdown","0651c332":"markdown","7135d161":"markdown"},"source":{"88506779":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.lines as lines\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\nplt.rcParams['font.family'] = 'monospace'","8cbcdc20":"df = pd.read_csv('..\/input\/predict-test-scores-of-students\/test_scores.csv')","12321a72":"cmap0 = ['#68595b','#7098af','#6f636c','#907c7b']\ncmap1 = ['#484146','#8da0b3','#796d72','#9fa9ba']\ncmap2 = ['#545457','#a79698','#5284a2','#bbbcc4']\n\nbg_color = '#fbfbfb'\ntxt_color = '#5c5c5c'\n\nsns.palplot(cmap0)\nsns.palplot(cmap1)\nsns.palplot(cmap2)","e024817b":"print(f\"Shape: {df.shape}\")\nprint('--'*20)\ndf.head(3)","9cc6f7bd":"df.info()","bb0e6983":"# check for missing values\nfig, ax = plt.subplots(tight_layout=True, figsize=(12,6))\n\nfig.patch.set_facecolor(bg_color)\nax.set_facecolor(bg_color)\n\nmv = df.isna()\nax = sns.heatmap(data=mv, cmap=sns.color_palette(cmap0), cbar=False, ax=ax, )\n\nax.set_ylabel('')\nax.set_yticks([])\nax.set_xticklabels(labels=mv.columns,rotation=45)\nax.tick_params(length=0)\n\nfig.text(\n    s=':Missing Values',\n    x=0, y=1.1,\n    fontsize=17, fontweight='bold',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    we can't see any ...\n    ''',\n    x=0, y=1.075,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nplt.show()","3d463a3f":"# helper functions\ndef despine_ax(ax, spines=['top','left','right','bottom']):\n    for spine in spines:\n        ax.spines[spine].set_visible(False)\n\ndef get_line(x=[0,0], y=[0,0], alpha=0.5, lw=1):\n    return lines.Line2D(xdata=x, ydata=y, lw=lw, alpha=alpha, color='#aeaeae', transform=fig.transFigure, figure=fig)","c07ef85e":"fig, (ax0, ax1) = plt.subplots(2, 1, tight_layout=True, sharex=True, figsize=(12,6))\nfig.patch.set_facecolor(bg_color)\n\nmean = df['posttest'].mean()\nmedian = df['posttest'].median()\n\nax0.boxplot(\n    data=df, x='posttest',\n    vert=False, patch_artist=True,\n    boxprops=dict(facecolor=cmap0[1], lw=0, alpha=0.75),\n    whiskerprops=dict(color='gray', lw=1, ls='--'),\n    capprops=dict(color='gray', lw=1, ls='--'),\n    medianprops=dict(color='#fff', lw=0),\n    flierprops=dict(markerfacecolor=cmap0[0],alpha=0.75),\n    zorder=0\n)\n\nax1 = sns.kdeplot(\n    data=df, x='posttest', shade=True, \n    color=cmap0[0], edgecolor='#000', lw=1, \n    zorder=0, alpha=0.8, ax=ax1\n)\n\nax0.axvline(x=mean, ymin=0.4, ymax=0.6, color=bg_color, ls=':', zorder=1, label='mean')\nax1.axvline(x=mean, ymin=0, ymax=0.9, color=bg_color, ls=':', zorder=1)\n\nax0.axvline(x=median, ymin=0.4, ymax=0.6, color=bg_color, ls='--', zorder=1)\nax1.axvline(x=median, ymin=0, ymax=0.9, color=bg_color, ls='--', zorder=1)\n\nax0.axis('off')\nax0.set_facecolor(bg_color)\n\nax1.set_ylabel('')\nax1.set_xlabel('')\nax1.set_yticks([])\nax1.tick_params(length=0)\nax1.set_facecolor(bg_color)\n\ndespine_ax(ax1, ['top','left','right'])\n\nfig.text(\n    s=':Posttest - Distribution',\n    x=0, y=1.05,\n    fontsize=17, fontweight='bold',\n    color=txt_color, \n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    in the plot below we can see signs\n    of a binominal distribution, with \n    one peak at around 57-62 and the other \n    at approx. 72-79 points.\n    ''',\n    x=0, y=1.02,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nfig.text(\n    s=f\"Mean: {np.round(mean,1)}\\nMedian: {np.round(median,1)}\",\n    x=0.56, y=0.925,\n    fontsize=9, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nl1 = get_line(x=[0.55,0.55], y=[0.85,0.95])\nfig.lines.extend([l1])\n\nplt.show()","b7793bea":"fig, ax = plt.subplots(tight_layout=True, figsize=(12,2.5))\nfig.patch.set_facecolor(bg_color)\n\nuniq_scores = df['posttest'].nunique()\n\nax.barh(\n    y=1, width=uniq_scores, \n    color=cmap0[1], alpha=0.75,lw=1, edgecolor='white'\n)\nax.barh(\n    y=1, width=100-uniq_scores, left=uniq_scores,\n    color=cmap1[1], alpha=0.25, lw=1, edgecolor='white'\n)\n\nax.axis('off')\n\nax.annotate(\n    s=f\"{uniq_scores}\",\n    xy=(35,1.05),\n    va='center', ha='center',\n    fontsize=36, fontweight='bold', fontfamily='serif',\n    color='#fff'\n)\n\nax.annotate(\n    s='unqiue scores',\n    xy=(35,0.85),\n    va='center', ha='center',\n    fontsize=16, fontstyle='italic', fontfamily='serif',\n    color='#fff'\n)\n\nfig.text(\n    s=':Unique Number of Scores',\n    x=0, y=1.25,\n    fontsize=17, fontweight='bold',\n    color=txt_color, \n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    68 unique scores have been scored \n    from a total of 100 possible outcomes.\n    ''',\n    x=0, y=1.2,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nl1 = get_line(x=[0.645,0.645], y=[0,1], lw=3, alpha=1)\nfig.lines.extend([l1])\n\nplt.show()","4e69805b":"!pip install circlify","43409359":"from circlify import circlify, Circle\n\n# prepare top 10 df\nschools_by_num_students = df.groupby('school').count()[['posttest']].reset_index().sort_values(by='posttest',ascending=False).rename(columns={'posttest':'count'})\nschools_by_num_students['ratio'] = df['school'].value_counts().values \/ len(df['school'])\nschools_by_num_students = schools_by_num_students[:10]\n\n# plot\nfig, ax = plt.subplots(tight_layout=True, figsize=(8,8))\n\nfig.patch.set_facecolor(bg_color)\nax.patch.set_facecolor(bg_color)\n\n# circle plot\ncircles = circlify(\n    data=schools_by_num_students['count'].tolist(), \n    show_enclosure=False, \n    target_enclosure=Circle(x=0, y=0, r=1)\n)\n\nlim = max(\n    max(\n        abs(circle.x) + circle.r,\n        abs(circle.y) + circle.r,\n    ) for circle in circles)\n\nax.set_xlim(-lim, lim)\nax.set_ylim(-lim, lim)\n\nlabels = schools_by_num_students['school'][::-1]\ncounts = schools_by_num_students['count'][::-1]\nratios = schools_by_num_students['ratio'][::-1]\n\nfor circle, label, count, ratio in zip(circles, labels, counts, ratios):\n    x, y, r = circle\n    ax.add_patch(\n        plt.Circle(\n            (x,y), r, \n            lw=1, fill=True,\n            alpha=1*(ratio*10), \n            facecolor=cmap0[1]\n        )\n    )\n    ax.annotate(\n        s=f\"{label}\",\n        xy=(x,y),\n        fontweight='bold',\n        va='center',ha='center', color='#fff'\n    )\n    ax.annotate(\n        s=f\"#{count} ({int(ratio*100)}%)\",\n        xy=(x,y-0.04),\n        fontstyle='italic',fontsize=9,\n        va='center',ha='center', color='#fff'\n    )\n\nax.axis('off')\n\nfig.text(\n    s=':TOP 10 - Schools',\n    x=0, y=1,\n    fontsize=17, fontweight='bold',\n    color=txt_color, \n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    by number of students\n    ''',\n    x=0, y=0.985,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nfig.text(\n    s=f\"{df['school'].nunique()}\",\n    x=1.04,y=0.8,\n    fontsize=52, fontfamily='serif',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    unique \n    schools''',\n    x=1.13,y=0.82,\n    fontsize=11, fontfamily='serif',\n    color=txt_color,\n    va='top', ha='left'\n)\n   \n\nfig.text(\n    s='''\n    The students are nearly \n    equally distributed\n    among the total of 23 \n    different schools\n    ''',\n    x=1,y=0.65,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nl1 = get_line(x=[1,1], y=[0.45,0.8])\nfig.lines.extend([l1])\n\nplt.show()","6e19e366":"# create alternating y-coords for each school\nnp.random.seed(9)\nlow_coords = [np.round(np.random.uniform(0.35,0.85),2) for _ in range(0,23)] \nhigh_coords = [np.round(np.random.uniform(1.35,1.75),2) for _ in range(0,23)] \n\ny_coords = [low_coords[idx] if idx % 2 == 0 else high_coords[idx] for idx in range(0,23)]\ny_coords = pd.DataFrame(data=y_coords, columns=['y_coords'])\n\nschools_by_avg_score = df.groupby('school').mean()[['posttest']].rename(columns={'posttest':'mean_score'}).sort_values(by='mean_score').reset_index()\nschools_by_avg_score = pd.concat([schools_by_avg_score, y_coords], axis=1)\n\n# plot schools in timeline style\nfig, ax = plt.subplots(tight_layout=True, figsize=(12,6))\n\nfig.patch.set_facecolor(bg_color)\nax.set_facecolor(bg_color)\n\nax.set_ylim(0,2)\n\nax.axhline(\n    y=1, zorder=0, color=txt_color\n)\n\nsns.scatterplot(\n    data=df, \n    x=schools_by_avg_score['mean_score'], y=schools_by_avg_score['y_coords'],\n    s=650, linewidth=1, alpha=0.75, zorder=1,\n    edgecolor='#fff', facecolor=cmap0[0], ax=ax\n)\n\nsns.scatterplot(\n    data=df, \n    x=schools_by_avg_score['mean_score'], y=1,\n    s=50, linewidth=1, zorder=1,\n    edgecolor=txt_color, facecolor=bg_color, ax=ax\n)\n\nfor idx in range(0, len(schools_by_avg_score['mean_score'])):\n    name = schools_by_avg_score['school'][idx]\n    x = schools_by_avg_score['mean_score'][idx]\n    y = schools_by_avg_score['y_coords'][idx]\n\n    ax.annotate(\n        s=f\"{name}\",\n        xy=(x,y),\n        va='center', ha='center',\n        fontsize=7, fontweight='bold',\n        color='white'\n    )\n\n    ax.vlines(\n        x=x,\n        ymin=min(1,y+0.06),\n        ymax=max(1,y-0.06),\n        color=txt_color,\n        lw=1, zorder=0, alpha=0.25, ls='--'\n    )\n\nax.axis('off')\n\nfig.text(\n    s=':Schools vs. Scores',\n    x=0, y=1.25,\n    fontsize=17, fontweight='bold',\n    color=txt_color, \n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    ...and the winner is UKPGS. This plot clearly \n    shows the distribution around the mean-value \n    of 67-68 points. Furthermore we can tell that \n    we have 2 'elite schools' in our dataset.'UKPGS' \n    also belongs to one of the TOP 10 Schools by \n    number of total students.\n    ''',\n    x=0, y=1.23,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    'elite-schools'\n    ''',\n    x=0.79, y=0.93,\n    fontsize=7, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nl1 = get_line(x=[0.9,0.9],y=[0.25,0.75], lw=125, alpha=0.075)\nfig.lines.extend([l1])\n\nplt.show()","33ba5fd3":"import squarify\n\nsizes = df['school_setting'].value_counts().values\nlabels = [label+'\\n#'+str(size) for label, size in zip(df['school_setting'].value_counts().index, sizes)]\n\nfig, (ax0, ax1) = plt.subplots(nrows=1, ncols=2, tight_layout=False, figsize=(12,6))\n\nax0 = squarify.plot(\n    sizes=sizes,\n    label=labels,\n    color=cmap2,\n    alpha=0.8,\n    pad=True,\n    text_kwargs=dict(color='white', fontsize=9, fontstyle='italic'),\n    ax = ax0\n)\n\nax1 = sns.boxplot(\n    data=df,\n    x='posttest',\n    y='school_setting',\n    palette=sns.color_palette(\"ch:start=.2,rot=-.3\"),\n    linewidth=1,\n    showmeans=True,\n    meanprops=dict(markerfacecolor='white', markeredgecolor='white', marker='x'),\n    boxprops=dict(edgecolor='white'),\n    medianprops=dict(color='white'),\n    whiskerprops=dict(color=txt_color, ls=':'),\n    capprops=dict(ls=':'),\n    flierprops=dict(markersize=2, marker='D'),\n    ax=ax1,\n)\n\n\nfig.patch.set_facecolor(bg_color)\nfig.subplots_adjust(wspace=0.25)\n\nax0.set_facecolor(bg_color)\nax1.set_facecolor(bg_color)\n\nax0.axis('off')\ndespine_ax(ax1, ['top','left','right'])\n\nax1.set_xlabel('')\nax1.set_ylabel('')\nax1.set_yticklabels(df['school_setting'].value_counts().index, rotation=90, va='center', ha='center')\nax1.tick_params(axis='both',length=0, labelcolor=txt_color)\n\nfig.text(\n    s=':School Setting',\n    x=0.1, y=1.1,\n    fontsize=17, fontweight='bold',\n    color=txt_color, \n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    most of the students attend an urban \n    or suburban school. The suburban schools \n    achieve the highest scores on average.\n    ''',\n    x=0.1, y=1.08,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    setting vs. scores\n    ''',\n    x=0.505, y=0.75,\n    rotation=90,\n    fontsize=7, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nl1 = get_line(x=[0.52,0.52], y=[0.45,0.8])\nfig.lines.extend([l1])\n\nplt.show()","8180a316":"df_school_type = df.groupby('school_type').count()[['posttest']].rename(columns={'posttest':'count'}).reset_index()\npublic_count = df_school_type[df_school_type['school_type'] == 'Public']['count'].squeeze() \nnon_public_count = df_school_type[df_school_type['school_type'] == 'Non-public']['count'].squeeze() \n\nfig, ax = plt.subplots(tight_layout=True, figsize=(12,2.5))\n\nfig.patch.set_facecolor(bg_color)\nax.set_facecolor(bg_color)\n\nax.barh(\n    y=1, width=public_count,\n    color=cmap0[1], alpha=0.75,lw=1, edgecolor='white'\n)\nax.barh(\n    y=1, width=non_public_count, left=public_count,\n    color=cmap1[1], alpha=0.25, lw=1, edgecolor='white'\n)\n\nax.axis('off')\n\nax.annotate(\n    s=f\"#{public_count}\",\n    xy=((public_count\/2),1.05),\n    va='center', ha='center',\n    fontsize=36, fontweight='bold', fontfamily='serif',\n    color='#fff'\n)\n\nax.annotate(\n    s='Public Students',\n    xy=((public_count\/2),0.85),\n    va='center', ha='center',\n    fontsize=16, fontstyle='italic', fontfamily='serif',\n    color='#fff'\n)\n\nax.annotate(\n    s=f\"#{non_public_count}\",\n    xy=((public_count+non_public_count-non_public_count\/2),1.05),\n    va='center', ha='center',\n    fontsize=36, fontweight='bold', fontfamily='serif',\n    color=txt_color \n)\n\nax.annotate(\n    s='Non-Public Students',\n    xy=((public_count+non_public_count-non_public_count\/2),0.85),\n    va='center', ha='center',\n    fontsize=16, fontstyle='italic', fontfamily='serif',\n    color=txt_color\n)\n\nfig.text(\n    s=':School Types',\n    x=0, y=1.25,\n    fontsize=17, fontweight='bold',\n    color=txt_color, \n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    by number of students\n    ''',\n    x=0, y=1.2,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nl1 = get_line(x=[0.7,0.7],y=[0,1], lw=3, alpha=1)\nfig.lines.extend([l1])\n\nplt.show()","af3e00e3":"fig, ax = plt.subplots(2, 1, sharex=True, figsize=(12,6))\n\nfig.patch.set_facecolor(bg_color)\nfig.subplots_adjust(hspace=-0.75)\n\nsns.kdeplot(\n    data=df[df['school_type']=='Public'],\n    x='posttest',\n    shade=True,\n    color=cmap0[0],\n    edgecolor='w',\n    lw=2,\n    alpha=1,\n    ax=ax[0]\n)\n\nsns.kdeplot(\n    data=df[df['school_type']!='Public'],\n    x='posttest',\n    shade=True,\n    color=cmap0[1],\n    edgecolor='w',\n    lw=2,\n    alpha=1,\n    ax=ax[1]\n)\n\nfor idx, axis in enumerate(ax):\n    axis.axhline(lw=5, color=cmap0[idx])\n    axis.set_xlabel('')\n    axis.set_ylabel('')\n    axis.set_yticks([])\n    axis.tick_params(length=0, labelcolor=txt_color)\n    axis.patch.set_alpha(0)\n    despine_ax(axis)\n\nfig.text(\n    s=':School Types vs. Scores',\n    x=0.1, y=1.2,\n    fontsize=17, fontweight='bold',\n    color=txt_color, \n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    the average score by a public school student is\n    lower (~12 points) than the average score of a student \n    visiting a non-public school. However we can see a \n    small group of public students who score above average.\n    ''',\n    x=0.1, y=1.18,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nfig.text(\n    s='Public',\n    x=0.125, y=0.305,\n    fontsize=11, fontweight='bold',\n    color=cmap0[0],\n    va='top', ha='left'\n)\n\nfig.text(\n    s='Non-Public',\n    x=0.125, y=0.155,\n    fontsize=11, fontweight='bold',\n    color=cmap0[1],\n    va='top', ha='left'\n)\n\nmean_public = df[df['school_type'] == 'Public'].mean()['posttest']\nmean_non_public = df[df['school_type'] != 'Public'].mean()['posttest']\n\nl1 = get_line(x=[0.75,0.75], y=[0.70,0.85])\nfig.lines.extend([l1])\n\nfig.text(\n    s=f\"Public Mean: {np.round(mean_public,1)}\\nNon-Public Mean: {np.round(mean_non_public,1)}\",\n    x=0.76, y=0.81,\n    fontsize=9, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nplt.show()","279bdc6c":"df_teaching_method = df.groupby('teaching_method').count()['student_id']\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12,6))\nfig.patch.set_facecolor(bg_color)\n\nax[0].barh(\n    y=df_teaching_method.index,\n    width=df_teaching_method.values, \n    height=0.75,\n    color=cmap0[1]\n)\n\nax[1] = sns.boxplot(\n    data=df,\n    x='posttest',\n    y='teaching_method',\n    palette=sns.color_palette(\"ch:start=.2,rot=-.3\"),\n    linewidth=1,\n    showmeans=True,\n    meanprops=dict(markerfacecolor='white', markeredgecolor='white', marker='x'),\n    boxprops=dict(edgecolor='white'),\n    medianprops=dict(color='white'),\n    whiskerprops=dict(color=txt_color, ls=':'),\n    capprops=dict(ls=':'),\n    flierprops=dict(markersize=2, marker='D'),\n    ax=ax[1],\n)\n\nfor idx in range(0, len(df_teaching_method.index)):\n    value = df_teaching_method.values[idx]\n    ratio = np.round(value\/sum(df_teaching_method.values)*100,1)\n\n    ax[0].annotate(\n        s=f\"{value} #\\n{ratio} %\",\n        xy=(value-100,idx),\n        va='center', ha='right',\n        fontsize=11, fontstyle='italic',\n        color='white'\n    )\n\nfor axis in ax:\n    axis.tick_params(length=0, labelcolor=txt_color)\n    axis.set_facecolor(bg_color)\n    axis.set_xlabel('')\n    axis.set_ylabel('')\n\ndespine_ax(ax[0])\ndespine_ax(ax[1], ['top','left','right'])\n\nax[0].set_xticks([])\nax[0].set_yticklabels(df_teaching_method.index, rotation=90, va='center')\nax[1].set_yticks([])\n\nl1 = get_line(x=[0.52,0.52], y=[0.2,0.8])\nfig.lines.extend([l1])\n\nfig.text(\n    s=':Teaching Method',\n    x=0.1, y=1.1,\n    fontsize=17, fontweight='bold',\n    color=txt_color, \n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    64.4 % of the students are taught by conventional methods.\n    The experimental teaching methods however perform better\n    (~10 points on average) in terms of test-scores.\n    ''',\n    x=0.1, y=1.08,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    teaching method vs. scores\n    ''',\n    x=0.505, y=0.75,\n    rotation=90,\n    fontsize=7, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nplt.show()","6b939398":"fig, ax = plt.subplots(tight_layout=True, figsize=(12,6))\n\nfig.patch.set_facecolor(bg_color)\nax.set_facecolor(bg_color)\n\nax = sns.kdeplot(\n    data=df,\n    x='n_student',\n    shade=True,\n    color=cmap0[0],\n    edgecolor='black',\n    lw=1,\n    alpha=0.8,\n    ax=ax\n)\n\ndespine_ax(ax, ['top','left','right'])\nax.tick_params(length=0, labelcolor=txt_color)\nax.set_xlabel('')\nax.set_ylabel('')\nax.set_yticks([])\n\nmean = df['n_student'].mean()\nn_min = df['n_student'].min()\nn_max = df['n_student'].max()\n\nfig.text(\n    s=':Number of Students - Distribution',\n    x=0, y=1.2,\n    fontsize=17, fontweight='bold',\n    color=txt_color, \n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    the average number of students per class is ~23,\n    while ranging from a minimum of 14 to a maximum of 31\n    students. Furthermore we can spot two 'size-clusters'.\n    One around 23, the other at about 27 students per class.\n    ''',\n    x=0, y=1.18,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nl1 = get_line(x=[0.75,0.75], y=[0.71,0.86])\nfig.lines.extend([l1])\n\nfig.text(\n    s=f\"{int(np.round(mean,0))}\",\n    x=0.76, y=0.85,\n    fontsize=52, fontstyle='italic', fontfamily='serif',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nfig.text(\n    s='avg. students\\nper class',\n    x=0.84, y=0.835,\n    fontsize=9, fontstyle='italic', fontfamily='serif',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nfig.text(\n    s=f\"Range: {int(n_min)}-{int(n_max)}\",\n    x=0.84, y=0.78,\n    fontsize=7, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nplt.show()","2600a4ff":"# prepare df\nby_type = df.groupby('school_type').mean()['n_student']\nby_setting = df.groupby('school_setting').mean()['n_student']\ndf_students_means = pd.concat([by_type, by_setting]).sort_values(ascending=True).reset_index()\ndf_students_means['y_coords'] = [1.5 if i%2==0 else 0.5 for i in range(0, len(df_students_means))]\n\n# plot\nfig, ax = plt.subplots(tight_layout=True, figsize=(12,6))\n\nfig.patch.set_facecolor(bg_color)\nax.set_facecolor(bg_color)\n\nax.set_ylim(0,2)\n\nax.axhline(\n    y=1, zorder=0, color=txt_color\n)\n\nsns.scatterplot(\n    data=df_students_means, \n    x='n_student', y='y_coords',\n    s=3e3, linewidth=1, alpha=0.75, zorder=1,\n    edgecolor='w', facecolor=cmap0[0], ax=ax\n)\n\nsns.scatterplot(\n    data=df_students_means, \n    x='n_student', y=1,\n    s=50, linewidth=1, zorder=1,\n    edgecolor=txt_color, facecolor=bg_color, ax=ax\n)\n\nfor idx in range(0, len(df_students_means['n_student'])):\n    name = df_students_means['index'][idx]\n    x = df_students_means['n_student'][idx]\n    y = df_students_means['y_coords'][idx]\n\n    ax.annotate(\n        s=f\"{name}\\n{int(np.round(x))}\",\n        xy=(x,y),\n        va='center', ha='center',\n        fontsize=7, fontweight='bold',\n        color='white'\n    )\n\n    ax.vlines(\n        x=x,\n        ymin=min(1,y+0.06),\n        ymax=max(1,y-0.06),\n        color=txt_color,\n        lw=1, zorder=0, alpha=0.25, ls='--'\n    )\n\nax.axis('off')\n\nfig.text(\n    s=':Number of Students vs. School Type & Setting',\n    x=0, y=1.2,\n    fontsize=17, fontweight='bold',\n    color=txt_color, \n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    From the graph below we can tell, that Urban- & Public-\n    Schools have the most number of students per class on average.\n    Whereas Non-Public Schools have the least number of students\n    per class on average.\n    ''',\n    x=0, y=1.18,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nplt.show()","8f39c835":"df_student_scores = df.groupby('n_student').mean()['posttest']\n\n# plot\nfig, ax = plt.subplots(tight_layout=True, figsize=(12,6))\nfig.patch.set_facecolor(bg_color)\nax.set_facecolor(bg_color)\n\nax.fill_between(x=df_student_scores.index, y1=0, y2=df_student_scores.values, color=cmap0[1], alpha=0.9)\n\nax.set_xlim(df_student_scores.index.min()-0.5, df_student_scores.index.max()+0.5)\nax.set_ylim(0, df_student_scores.values.max()+10)\n\nsns.scatterplot(\n    x=df_student_scores.index, \n    y=df_student_scores.values, \n    s=200, linewidth=1, zorder=1,\n    edgecolor=cmap0[0], facecolor=bg_color, ax=ax\n)\n\nax.set_xlabel('')\nax.set_ylabel('')\nax.tick_params(length=0, labelcolor=txt_color)\ndespine_ax(ax,['top','left','right'])\n\nfig.text(\n    s=':Number of Students vs. Score (avg)',\n    x=0, y=1.2,\n    fontsize=17, fontweight='bold',\n    color=txt_color, \n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    the average score declines when the number\n    of students per class rises. The optimal size\n    seems to be between 16-18 students per class.\n    ''',\n    x=0, y=1.18,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nplt.show()","64cc8b53":"fig, (ax0, ax1) = plt.subplots(nrows=1, ncols=2, tight_layout=False, figsize=(12,6))\n\nax0.bar(\n    x=df['gender'].value_counts().index,\n    height=df['gender'].value_counts().values,\n    color=cmap0[0],\n    alpha=0.8\n)\n\nfor idx in range(0, len(df['gender'].unique())):\n    x = df['gender'].value_counts().index[idx]\n    y = df['gender'].value_counts().values[idx]\n    ax0.annotate(\n        s=f\"#{y}\",\n        xy=(x,y-10),\n        va='top', ha='center',\n        fontsize=11, fontstyle='italic',\n        color='white'\n    )\n\nax1 = sns.boxplot(\n    data=df,\n    x='posttest',\n    y='gender',\n    palette=sns.color_palette(\"ch:start=.2,rot=-.3\"),\n    linewidth=1,\n    showmeans=True,\n    meanprops=dict(markerfacecolor='white', markeredgecolor='white', marker='x'),\n    boxprops=dict(edgecolor='white'),\n    medianprops=dict(color='white'),\n    whiskerprops=dict(color=txt_color, ls=':'),\n    capprops=dict(ls=':'),\n    flierprops=dict(markersize=2, marker='D'),\n    ax=ax1,\n)\n\nfig.patch.set_facecolor(bg_color)\nfig.subplots_adjust(wspace=0.25)\n\nax0.set_facecolor(bg_color)\nax1.set_facecolor(bg_color)\n\ndespine_ax(ax0, ['top','left','right'])\ndespine_ax(ax1, ['top','left','right'])\n\nax0.tick_params(axis='both',length=0, labelcolor=txt_color)\nax0.set_yticks([])\n\nax1.set_xlabel('')\nax1.set_ylabel('')\nax1.set_yticklabels(df['gender'].unique(), rotation=90, va='center', ha='center')\nax1.tick_params(axis='both',length=0, labelcolor=txt_color)\n\nfig.text(\n    s=':Gender',\n    x=0.1, y=1.1,\n    fontsize=17, fontweight='bold',\n    color=txt_color, \n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    the number of male & female students are nearly the same.\n    Moreover the gender doesn't play an essential role when\n    it comes to the final test-scores.\n    ''',\n    x=0.1, y=1.08,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    gender vs. scores\n    ''',\n    x=0.505, y=0.75,\n    rotation=90,\n    fontsize=7, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nl1 = get_line(x=[0.52,0.52], y=[0.45,0.8])\nfig.lines.extend([l1])\n\nplt.show()","bd65c476":"fig, ax = plt.subplots(tight_layout=True, figsize=(12,2.5))\nfig.patch.set_facecolor(bg_color)\n\nlabels = df['lunch'].value_counts().index\nvalues = df['lunch'].value_counts().values\n\nax.barh(\n    y=1, width=values[0], \n    color=cmap0[1], alpha=0.75,lw=1, edgecolor='white'\n)\nax.barh(\n    y=1, width= sum(values) - values[0], left=values[0],\n    color=cmap1[1], alpha=0.25, lw=1, edgecolor='white'\n)\n\nax.axis('off')\n\nfor idx in range(0,len(labels)):\n    if idx == 0:\n        x = values[idx] \/ 2\n    else:\n        x = (values[0] + values[idx]) - values[idx] \/ 2\n        \n    ax.annotate(\n        s=f\"#{values[idx]}\",\n        xy=(x,1.05),\n        va='center', ha='center',\n        fontsize=36, fontweight='bold', fontfamily='serif',\n        color='#fff'\n    )\n    ax.annotate(\n        s=f\"{labels[idx]}\",\n        xy=(x,0.85),\n        va='center', ha='center',\n        fontsize=16, fontstyle='italic', fontfamily='serif',\n        color='#fff'\n    )\n\nfig.text(\n    s=':Lunch',\n    x=0, y=1.25,\n    fontsize=17, fontweight='bold',\n    color=txt_color, \n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    ~57% of the students does not qualify\n    for a reduced or free lunch.\n    ''',\n    x=0, y=1.2,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nl1 = get_line(x=[0.54,0.54], y=[0,1], lw=3, alpha=1)\nfig.lines.extend([l1])\n\nplt.show()","58d4f7e8":"fig, ax = plt.subplots(2, 1, sharex=True, figsize=(12,6))\n\nfig.patch.set_facecolor(bg_color)\nfig.subplots_adjust(hspace=-0.75)\n\nsns.kdeplot(\n    data=df[df['lunch']=='Does not qualify'],\n    x='posttest',\n    shade=True,\n    color=cmap0[0],\n    edgecolor='w',\n    lw=2,\n    alpha=1,\n    ax=ax[0]\n)\n\nsns.kdeplot(\n    data=df[df['lunch']!='Does not qualify'],\n    x='posttest',\n    shade=True,\n    color=cmap0[1],\n    edgecolor='w',\n    lw=2,\n    alpha=1,\n    ax=ax[1]\n)\n\nfor idx, axis in enumerate(ax):\n    axis.axhline(lw=5, color=cmap0[idx])\n    axis.set_xlabel('')\n    axis.set_ylabel('')\n    axis.set_yticks([])\n    axis.tick_params(length=0, labelcolor=txt_color)\n    axis.patch.set_alpha(0)\n    despine_ax(axis)\n\nfig.text(\n    s=':Lunch vs. Scores',\n    x=0.1, y=1.2,\n    fontsize=17, fontweight='bold',\n    color=txt_color, \n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    students not-qualified for a free lunch score\n    ~ 17 points higher on average than students who \n    are qualified for free lunch.\n    ''',\n    x=0.1, y=1.18,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nfig.text(\n    s='Does not qualify',\n    x=0.125, y=0.305,\n    fontsize=11, fontweight='bold',\n    color=cmap0[0],\n    va='top', ha='left'\n)\n\nfig.text(\n    s='Does qualify',\n    x=0.125, y=0.155,\n    fontsize=11, fontweight='bold',\n    color=cmap0[1],\n    va='top', ha='left'\n)\n\nmean_not_qualified = df[df['lunch'] == 'Does not qualify'].mean()['posttest']\nmean_qualified = df[df['lunch'] != 'Does not qualify'].mean()['posttest']\n\nl1 = get_line(x=[0.72,0.72], y=[0.70,0.85])\nfig.lines.extend([l1])\n\nfig.text(\n    s=f\"Not-Qualified Mean: {np.round(mean_not_qualified,1)}\\nQualified Mean: {np.round(mean_qualified,1)}\",\n    x=0.73, y=0.81,\n    fontsize=9, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nplt.show()","9ab0af45":"fig, (ax0, ax1) = plt.subplots(2, 1, tight_layout=True, sharex=True, figsize=(12,6))\nfig.patch.set_facecolor(bg_color)\n\nmean = df['pretest'].mean()\nmedian = df['pretest'].median()\n\nax0.boxplot(\n    data=df, x='pretest',\n    vert=False, patch_artist=True,\n    boxprops=dict(facecolor=cmap0[1], lw=0, alpha=0.75),\n    whiskerprops=dict(color='gray', lw=1, ls='--'),\n    capprops=dict(color='gray', lw=1, ls='--'),\n    medianprops=dict(color='#fff', lw=0),\n    flierprops=dict(markerfacecolor=cmap0[0],alpha=0.75),\n    zorder=0\n)\n\nax1 = sns.kdeplot(\n    data=df, x='pretest', shade=True, \n    color=cmap0[0], edgecolor='#000', lw=1, \n    zorder=0, alpha=0.8, ax=ax1\n)\n\nax0.axvline(x=mean, ymin=0.4, ymax=0.6, color=bg_color, ls=':', zorder=1, label='mean')\nax1.axvline(x=mean, ymin=0, ymax=0.9, color=bg_color, ls=':', zorder=1)\n\nax0.axvline(x=median, ymin=0.4, ymax=0.6, color=bg_color, ls='--', zorder=1)\nax1.axvline(x=median, ymin=0, ymax=0.9, color=bg_color, ls='--', zorder=1)\n\nax0.axis('off')\nax0.set_facecolor(bg_color)\n\nax1.set_ylabel('')\nax1.set_xlabel('')\nax1.set_yticks([])\nax1.tick_params(length=0)\nax1.set_facecolor(bg_color)\n\ndespine_ax(ax1, ['top','left','right'])\n\nfig.text(\n    s=':Pretest - Distribution',\n    x=0, y=1.05,\n    fontsize=17, fontweight='bold',\n    color=txt_color, \n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    from the plot below we can tell,\n    that the students scored ~12 points less on average\n    in the pretest than they did in the posttest.\n    ''',\n    x=0, y=1.02,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nfig.text(\n    s=f\"Mean: {np.round(mean,1)}\\nMedian: {np.round(median,1)}\",\n    x=0.56, y=0.925,\n    fontsize=9, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nl1 = get_line(x=[0.55,0.55], y=[0.85,0.95])\nfig.lines.extend([l1])\n\nplt.show()","55c137a1":"fig, ax = plt.subplots(tight_layout=True, figsize=(12,6))\n\nfig.patch.set_facecolor(bg_color)\nax.set_facecolor(bg_color)\n\nsns.scatterplot(\n    data=df, \n    x='pretest',\n    y='posttest',\n    color=cmap0[1],\n    alpha=0.65,\n    s=5*df['posttest'],\n    ax=ax\n)\n\ndespine_ax(ax,['top','right'])\nax.tick_params(length=0, labelcolor=txt_color)\nax.set_xlabel('')\nax.set_ylabel('')\n\nfig.text(\n    s=':Pretest vs. Posttest',\n    x=0, y=1.15,\n    fontsize=17, fontweight='bold',\n    color=txt_color, \n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    there is clearly a strong linear \n    relationship evident, with a correlation\n    coefficient of 0.95.\n    ''',\n    x=0, y=1.13,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\ncorr = df.corr()['pretest'][2]\n\nfig.text(\n    s=f\"{np.round(corr,2)}\",\n    x=0.7, y=0.4,\n    fontsize=52, fontfamily='serif',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nfig.text(\n    s='Correlation Coefficient',\n    x=0.69, y=0.29,\n    fontsize=11, fontfamily='serif',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nl1 = get_line(x=[0.675,0.675], y=[0.225,0.425])\nfig.lines.extend([l1])\n\nplt.show()","1d7fda9e":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OrdinalEncoder, StandardScaler\nfrom sklearn.compose import make_column_transformer\n\n# prepare dataset and drop id columns\nX = df.drop(columns=['student_id','posttest']).copy()\ny = df['posttest'].copy()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=1, shuffle=True)\n\n# get all numerical & categorical features\ncat_cols = [col for col in X_train.columns if X_train[col].dtype == 'object']\nnum_cols = [col for col in X_train.columns if X_train[col].dtype == 'float']\n\n# build transformer\npreprocessing = make_column_transformer(\n    (StandardScaler(),num_cols),\n    (OrdinalEncoder(),cat_cols)\n)\n\n# preprocess data\nX_train = preprocessing.fit_transform(X_train)\nX_test = preprocessing.transform(X_test)","806a53ca":"from sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge, ElasticNet\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\nfrom xgboost import XGBRegressor\n\nresults = dict()\n\nmodels = [\n    ('Linreg',LinearRegression()),\n    ('Lasso',Lasso()),\n    ('Ridge',Ridge()),\n    ('ElasticNet',ElasticNet()),\n    ('LGBM',LGBMRegressor()),\n    ('CATB',CatBoostRegressor(verbose=0)),\n    ('XGB',XGBRegressor(verbosity=0)),\n]\n\nfor name, model in models:\n    model.fit(X_train, y_train),\n    y_hat = model.predict(X_test)\n    rmse = mean_squared_error(y_test, y_hat, squared=False)\n    results[name] = rmse","11469b4a":"df_results = pd.DataFrame([results], index=['RMSE']).transpose()\n\nfig, ax = plt.subplots(tight_layout=True, figsize=(12,6))\nfig.patch.set_facecolor(bg_color)\nax.set_facecolor(bg_color)\n\nax.barh(\n    y=df_results.index,\n    width=df_results['RMSE'], \n    height=0.75,\n    color=cmap0[1]\n)\n\nfor idx in range(0, len(df_results)):\n    x = df_results['RMSE'][idx]\n    ax.annotate(\n        s=f\"RMSE: {np.round(x,2)}\",\n        xy=(x-0.2,idx),\n        va='center', ha='right',\n        fontsize=9, fontstyle='italic',\n        color='white'\n    )\n\ndespine_ax(ax)\nax.set_ylabel('')\nax.set_xlabel('')\nax.set_xticks([])\nax.tick_params(length=0, labelcolor=txt_color)\n\nfig.text(\n    s=':Model Evaluation',\n    x=0, y=1.15,\n    fontsize=17, fontweight='bold',\n    color=txt_color, \n    va='top', ha='left'\n)\n\nfig.text(\n    s='''\n    with default parameter \n    CatBoost & LGBM perform the best.\n    ''',\n    x=0, y=1.13,\n    fontsize=11, fontstyle='italic',\n    color=txt_color,\n    va='top', ha='left'\n)\n\nplt.show()","07fe1617":"#### <div style='background:#2b6684;color:white;padding:0.5em;border-radius:0.2em'>:: School Type<\/div>","f023866e":"### The dataset \nat hand contains information about a test written by some students.\nIt includes features such as: School-Setting, School-Type, Gender etc.<br><br>\n\nWhile working with this dataset I will put a special **emphasis on the 'Exploratory Data Analysis'**\nand try to not only craft visual appealing but also meaningful visuals.\n\nAfter the analyis I will try to **predict** the test-score, **compare and evaluate** different baseline-models.<br><br>\n\n**Thank you already for taking some time and checking out my notebook.**<br>\n**Feel free to leave an upvote if you like my work :)**\n\nLet's get started...","f10b42f7":"## <div style='background:#2b6684;color:white;padding:0.5em;border-radius:0.2em'>Import Data<\/div>","028acbf9":"#### <div style='background:#2b6684;color:white;padding:0.5em;border-radius:0.2em'>:: Teaching Method<\/div>","fa3c257c":"#### <div style='background:#2b6684;color:white;padding:0.5em;border-radius:0.2em'>:: Pre-Test<\/div>","be699a11":"## <div style='background:#2b6684;color:white;padding:0.5em;border-radius:0.2em'>Conclusion<\/div>","5e7e489d":"<div style='border-radius:3px;background:#b1d3e3;padding:2em;text-align:left;font-family:monospace;font-weight:light;font-size:1.1em;color:black'>\n    <b>Thanks for checking out my notebook!<\/b><br>\n    Feel free to leave a comment, a suggestion, an upvote or just a simple message to say hello :)\n<\/div>","cd513b43":"#### <div style='background:#2b6684;color:white;padding:0.5em;border-radius:0.2em'>:: Schools<\/div>","94398b17":"#### <div style='background:#2b6684;color:white;padding:0.5em;border-radius:0.2em'>:: School Setting<\/div>","90b7e4a6":"**Take a look at some of my other work here:**\n* [Water-Quality EDA & Model-Comparison](https:\/\/www.kaggle.com\/mlanhenke\/waterquality-eda-baseline-model-comparison)\n* [Netflix-Awesome EDA & Prediction (CB,LGBM,XGB)](https:\/\/www.kaggle.com\/mlanhenke\/netflix-awesome-eda-prediction-cb-lgbm-xgb)","b844d5eb":"I had a lot of fun working with this dataset and tried to put a special emphasis on the EDA.\n\nThe most important features when it comes to predicting the score seem to be:\n* the pretest score\n* the school_type & setting\n* the teaching_method\n* the size or number of students per class\n* the fact if you qualify for 'free lunch' or not\n\nSo boiled down one can conclude the following. \nIf you're a student in a suburban, non-public school, \nexposed to experimental methods in a small sized classroom \nwhile you have a well (financially) situated background - you should do well!\n\nThe difference in gender does not contribute to a higher \/ lower score.\n\nThings to improve ... \nI just compared some baseline models, from here on one should do hyperparameter tuning to achieve a better RMSE.","bfefc007":"## <div style='background:#2b6684;color:white;padding:0.5em;border-radius:0.2em'>Color Palettes<\/div>","8806618c":"## <div style='background:#2b6684;color:white;padding:0.5em;border-radius:0.2em'>Modeling<\/div>","38475ead":"## <div style='background:#2b6684;color:white;padding:0.5em;border-radius:0.2em'>Basic Overview<\/div>","44bb8c09":"#### <div style='background:#2b6684;color:white;padding:0.5em;border-radius:0.2em'>:: Gender<\/div>","42bcb020":"## <div style='background:#2b6684;color:white;padding:0.5em;border-radius:0.2em'>Feature Analysis<\/div>","469259a1":"#### <div style='background:#2b6684;color:white;padding:0.5em;border-radius:0.2em'>:: Number of Students<\/div>","b74b6158":"## <div style='background:#2b6684;color:white;padding:0.5em;border-radius:0.2em'>Introduction<\/div>","0651c332":"#### <div style='background:#2b6684;color:white;padding:0.5em;border-radius:0.2em'>:: Lunch<\/div>","7135d161":"## <div style='background:#2b6684;color:white;padding:0.5em;border-radius:0.2em'>Target Analysis: Posttest<\/div>"}}