{"cell_type":{"732c4b70":"code","2ea99b4b":"code","b98f60ab":"code","04877748":"code","513673cb":"code","430c1cb7":"code","dea2d2b9":"code","d1ee6fde":"code","81192abf":"code","54f1a78f":"code","432c4f6b":"code","c0b2a78c":"code","571b195d":"code","92ffed75":"code","64a26dd7":"markdown","1a8dd93d":"markdown","f3044dae":"markdown","417f9d61":"markdown","700b880c":"markdown","ad9213a2":"markdown","3c982c09":"markdown","059fbdc3":"markdown","197969f4":"markdown","11c75320":"markdown","17188711":"markdown"},"source":{"732c4b70":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport numpy as np\nimport pandas as pd\nimport time\nimport glob\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import imshow\nimport os\nimport cv2\nimport shutil","2ea99b4b":"base_path = '..\/input\/indian-sign-language-isl\/Indian\/'","b98f60ab":"classes = os.listdir(base_path)\nfilepaths = []\nlabels = []\nfor d in classes:\n    flist = os.listdir(base_path + d)\n    for f in flist:\n        fpath = os.path.join(base_path + d + '\/' + f)\n        filepaths.append(fpath)\n        labels.append(d)\nprint ('filepaths: ', len(filepaths), '   labels: ', len(labels))","04877748":"Fseries=pd.Series(filepaths, name='file_paths')\nLseries=pd.Series(labels, name='labels')\ndf=pd.concat([Fseries,Lseries], axis=1)\ndf=pd.DataFrame(np.array(df).reshape(42745,2), columns = ['file_paths', 'labels'])\nprint(df['labels'].value_counts())","513673cb":"plt.figure(figsize=(14,10))\nfor i in range(20):\n    random = np.random.randint(1,len(df))\n    plt.subplot(4,5,i+1)\n    plt.imshow(cv2.imread(df.loc[random,\"file_paths\"]))\n    plt.title(df.loc[random, \"labels\"], size = 10, color = \"black\") \n    plt.xticks([])\n    plt.yticks([])\n    \nplt.show()","430c1cb7":"train_df, test_df = train_test_split(df, train_size=0.95, random_state=0)\ntrain_df, valid_df = train_test_split(train_df, train_size=0.9, random_state=0)\nprint(train_df.labels.value_counts())\nprint(valid_df.labels.value_counts())\nprint(test_df.labels.value_counts())","dea2d2b9":"target_size=(299,299)\nbatch_size=64","d1ee6fde":"train_datagen = ImageDataGenerator(preprocessing_function=tf.keras.applications.inception_resnet_v2.preprocess_input, zoom_range=0.15, rotation_range=30, height_shift_range=0.1, width_shift_range=0.1)\ntest_datagen = ImageDataGenerator(preprocessing_function=tf.keras.applications.inception_resnet_v2.preprocess_input)\ntrain_gen = train_datagen.flow_from_dataframe(train_df, x_col='file_paths', y_col='labels', target_size=target_size, batch_size=batch_size, color_mode='rgb', class_mode='categorical')\nvalid_gen = test_datagen.flow_from_dataframe(valid_df, x_col='file_paths', y_col='labels', target_size=target_size, batch_size=batch_size, color_mode='rgb', class_mode='categorical')\ntest_gen = test_datagen.flow_from_dataframe(test_df, x_col='file_paths', y_col='labels', target_size=target_size, batch_size=batch_size, color_mode='rgb', class_mode='categorical')","81192abf":"base_model = tf.keras.applications.InceptionResNetV2(include_top=False, input_shape=(299,299,3))","54f1a78f":"model = tf.keras.Sequential([\n    base_model, \n    tf.keras.layers.GlobalAveragePooling2D(), \n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.BatchNormalization(), \n    tf.keras.layers.Dropout(0.2), \n    tf.keras.layers.Dense(35, activation='softmax')\n])","432c4f6b":"lr=0.001\nmodel.compile(loss='categorical_crossentropy', optimizer=Adam(lr=lr), metrics=['accuracy'])","c0b2a78c":"patience = 1\nstop_patience = 3\nfactor = 0.5\n\ncallbacks = [\n    tf.keras.callbacks.ModelCheckpoint(\"classify_model.h5\", save_best_only=True, verbose = 0),\n    tf.keras.callbacks.EarlyStopping(patience=stop_patience, monitor='val_loss', verbose=1),\n    tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=factor, patience=patience, verbose=1)\n]","571b195d":"epochs = 30\nhistory = model.fit(train_gen, validation_data=valid_gen, epochs=epochs, callbacks=callbacks, verbose=1)","92ffed75":"best_model = model\nbest_model.load_weights('.\/classify_model.h5')\nbest_model.evaluate(test_gen)","64a26dd7":"# **Image Data Generator**","1a8dd93d":"# **Splitting Dataframe into Train, Valid, and Test**","f3044dae":"# **Create Dataframe from Images**","417f9d61":"# **Custom Callbacks to Improve Training**","700b880c":"# **Visualize Data**","ad9213a2":"Looks like we should do some zooming, a little bit of rotation, and some height and width shifting with Image Data Generator. ","3c982c09":"# **Import Libraries**","059fbdc3":"# **Predictions on Test Dataframe**","197969f4":"# **Building CNN Model**","11c75320":"Dataset is mostly balanced. ","17188711":"# **Model Training**"}}