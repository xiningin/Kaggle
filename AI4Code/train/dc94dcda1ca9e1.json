{"cell_type":{"ec7acf0f":"code","f3b0fc40":"code","01d5cba9":"code","7a078608":"code","d9842ecf":"code","65edea3e":"code","a875eadc":"code","d0fe3a7b":"code","176954c8":"code","32d3f3c4":"code","42013761":"code","a87ba0d1":"code","61b2853c":"code","35ca38be":"code","f6b2aff2":"code","18d6fbc4":"code","07c407e3":"code","873a090b":"code","ec92b7cf":"code","64e72b31":"code","a638d69d":"code","8c9a1915":"code","61002632":"code","27214b38":"code","2bb5b49a":"code","63717b44":"code","f791e3ca":"code","84e97bbe":"code","6cae2c46":"code","0f538f3c":"code","c8dcc819":"code","f0fb4c56":"code","99b20965":"code","f20c1591":"code","34427005":"code","3e019225":"code","aa713435":"code","a98c1c6c":"code","509b991b":"code","1692688a":"code","ab827682":"code","c003ad26":"code","c6b96e5d":"code","0044c54c":"code","1411686d":"code","e788e074":"code","5273bca3":"code","8a9f49dd":"code","b6b6fa59":"code","0b6025b5":"code","22d77bfb":"code","e22ba7b4":"code","511ba1f2":"code","78e81a96":"code","502db479":"code","61eccdd3":"code","9c15e4d7":"code","17a251da":"code","60046aa0":"code","bf55697e":"code","b089441c":"code","ffb9238f":"code","f74aff4b":"code","c2d7dad0":"code","d4185447":"code","c86bbefe":"code","b90e4aab":"code","90344b73":"code","71e14172":"code","e42019db":"code","772c7e41":"code","0fb612d9":"code","11c4038e":"code","e0564285":"code","41b6c3ba":"code","a20a2cd7":"code","8729cb19":"code","21c13372":"code","efbaab23":"code","93b7d011":"code","f812592b":"code","13fd4eeb":"code","1fe62f2d":"code","4d35cf80":"code","439c96b8":"code","1fa81d22":"code","e7217f3e":"code","b88718cd":"code","547527ee":"code","5e4d509c":"code","49b32d37":"code","af5d611a":"code","cf61aab2":"code","c4eed557":"code","1ad01f8b":"code","c8d051e8":"code","d4b83809":"code","117e5d83":"code","c8f67030":"code","61637dda":"code","be9243ad":"code","f5a17070":"code","f3dca06e":"code","19da05e9":"code","1bb0d0b0":"code","fbe5df6f":"code","cd1c4247":"markdown","3ec37220":"markdown","07b8b566":"markdown","2724e998":"markdown","cb47c793":"markdown","8e828ae3":"markdown","467e4ac0":"markdown","8a598449":"markdown","7cbc8be2":"markdown","939de997":"markdown","750617a5":"markdown","89e8d884":"markdown","d3b6417c":"markdown","4763c903":"markdown","0a46d831":"markdown","cd89a497":"markdown","7a87bea3":"markdown","bf609f70":"markdown","b3b5cc92":"markdown","43a0994a":"markdown","da09fef9":"markdown","d00f3a71":"markdown","c1721f07":"markdown","485b8cb2":"markdown","e0567a78":"markdown","d594379e":"markdown","c1b7d2ff":"markdown","f77c6e60":"markdown","aee4d405":"markdown","73131d26":"markdown","e4b7dec9":"markdown","39a4ada2":"markdown"},"source":{"ec7acf0f":"# from IPython.core.display import HTML","f3b0fc40":"# HTML('''<div class=\"flourish-embed flourish-cards\" data-src=\"visualisation\/1810417\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1810417\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","01d5cba9":"# HTML('''<div class=\"flourish-embed flourish-cards\" data-src=\"visualisation\/1816605\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1816605\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","7a078608":"# get latest version of pip\n# !pip install --upgrade pip\n\n# for calender map\n# ! pip install calmap\n\n# to convert us statenames to state codes\n# ! pip install us\n\n# to get continent name from country name\n# ! pip install pycountry_convert","d9842ecf":"# math opeations\n# import math\n# produce random numbers\n# import random\n# to load json files\nimport json\n# datetime oprations\nfrom datetime import timedelta\n# to get web contents\nfrom urllib.request import urlopen\n\n# for numerical analyiss\nimport numpy as np\n# to store and process data in dataframe\nimport pandas as pd","65edea3e":"# basic visualization package\nimport matplotlib.pyplot as plt\n# advanced ploting\nimport seaborn as sns\n\n# interactive visualization\nimport plotly.express as px\nimport plotly.graph_objs as go\n# import plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots","a875eadc":"# for offline ploting\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","d0fe3a7b":"# converter\n# from pandas.plotting import register_matplotlib_converters\n# register_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# to USA states details\n# import us","176954c8":"# color pallette\ncnf, dth, rec, act = '#393e46', '#ff2e63', '#21bf73', '#fe9801' \n\n# seaborn plot style\n# sns.set_style('darkgrid')","32d3f3c4":"# list files\n# ==========\n\n# !ls ..\/input\/corona-virus-report","42013761":"# Full data\n# =========\n\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv')\n# full_table.head()","a87ba0d1":"# Grouped by day, country\n# =======================\n\nfull_grouped = pd.read_csv('..\/input\/corona-virus-report\/full_grouped.csv')\nfull_grouped['Date'] = pd.to_datetime(full_grouped['Date'])\n# full_grouped.head()","61b2853c":"# Day wise\n# ========\n\nday_wise = pd.read_csv('..\/input\/corona-virus-report\/day_wise.csv')\nday_wise['Date'] = pd.to_datetime(day_wise['Date'])\n# day_wise.head()","35ca38be":"# Country wise\n# ============\n\ncountry_wise = pd.read_csv('..\/input\/corona-virus-report\/country_wise_latest.csv')\ncountry_wise = country_wise.replace('', np.nan).fillna(0)\n# country_wise.head()","f6b2aff2":"# Worldometer data\n# ================\n\nworldometer_data = pd.read_csv('..\/input\/corona-virus-report\/worldometer_data.csv')\nworldometer_data = worldometer_data.replace('', np.nan).fillna(0)\n# worldometer_data.head()","18d6fbc4":"temp = day_wise[['Date','Deaths', 'Recovered', 'Active']].tail(1)\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\nfig = px.treemap(temp, path=[\"variable\"], values=\"value\", height=225, \n                 color_discrete_sequence=[act, rec, dth])\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","07c407e3":"def plot_map(df, col, pal):\n    df = df[df[col]>0]\n    fig = px.choropleth(df, locations=\"Country\/Region\", locationmode='country names', \n                  color=col, hover_name=\"Country\/Region\", \n                  title=col, hover_data=[col], color_continuous_scale=pal)\n#     fig.update_layout(coloraxis_showscale=False)\n    fig.show()","873a090b":"plot_map(country_wise, 'Confirmed', 'matter')","ec92b7cf":"plot_map(country_wise, 'Deaths', 'matter')","64e72b31":"plot_map(country_wise, 'Deaths \/ 100 Cases', 'matter')","a638d69d":"# Over the time\n\nfig = px.choropleth(full_grouped, locations=\"Country\/Region\", \n                    color=np.log(full_grouped[\"Confirmed\"]),\n                    locationmode='country names', hover_name=\"Country\/Region\", \n                    animation_frame=full_grouped[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    title='Cases over time', color_continuous_scale=px.colors.sequential.matter)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","8c9a1915":"def plot_daywise(col, hue):\n    fig = px.bar(day_wise, x=\"Date\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","61002632":"def plot_daywise_line(col, hue):\n    fig = px.line(day_wise, x=\"Date\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","27214b38":"temp = full_grouped.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case', height=600, width=700,\n             title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","2bb5b49a":"plot_daywise('Confirmed', '#333333')","63717b44":"plot_daywise('Active', '#333333')","f791e3ca":"plot_daywise('New cases', '#333333')","84e97bbe":"plot_daywise('Deaths', dth)","6cae2c46":"plot_daywise('New deaths', dth)","0f538f3c":"plot_daywise('Recovered', rec)","c8dcc819":"plot_daywise('New recovered', rec)","f0fb4c56":"plot_daywise_line('Deaths \/ 100 Cases', dth)","99b20965":"plot_daywise_line('Deaths \/ 100 Recovered', dth)","f20c1591":"plot_daywise_line('Recovered \/ 100 Cases', rec)","34427005":"plot_daywise('No. of countries', '#035aa6')","3e019225":"temp = day_wise[['Date', 'Recovered', 'Active']]\ntemp = temp.melt(id_vars='Date', value_vars=['Recovered', 'Active'], \n                 var_name='Variable', value_name='Count')\npx.line(temp, x='Date', y='Count', color='Variable')","aa713435":"def plot_hbar(df, col, n, hover_data=[]):\n    fig = px.bar(df.sort_values(col).tail(n), \n                 x=col, y=\"Country\/Region\", color='WHO Region',  \n                 text=col, orientation='h', width=700, hover_data=hover_data,\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","a98c1c6c":"def plot_hbar_wm(col, n, min_pop=1000000, sort='descending'):\n    df = worldometer_data[worldometer_data['Population']>min_pop]\n    df = df.sort_values(col, ascending=True).tail(n)\n    fig = px.bar(df,\n                 x=col, y=\"Country\/Region\", color='WHO Region',  \n                 text=col, orientation='h', width=700, \n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_layout(title=col+' (Only countries with > 1M Pop)', \n                      xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","509b991b":"plot_hbar(country_wise, 'Confirmed', 15)","1692688a":"plot_hbar(country_wise, 'Active', 15)","ab827682":"plot_hbar(country_wise, 'New cases', 15)","c003ad26":"plot_hbar(country_wise, 'Deaths', 15)","c6b96e5d":"plot_hbar(country_wise, 'New deaths', 15)","0044c54c":"plot_hbar(country_wise, 'Deaths \/ 100 Cases', 15)","1411686d":"plot_hbar(country_wise, 'Recovered', 15)","e788e074":"plot_hbar(country_wise, 'New recovered', 15)","5273bca3":"plot_hbar(country_wise, 'Recovered \/ 100 Cases', 15)","8a9f49dd":"plot_hbar(country_wise, '1 week change', 15)","b6b6fa59":"plot_hbar(country_wise, '1 week % increase', 15)","0b6025b5":"plot_hbar_wm('Tot Cases\/1M pop', 15, 1000000)","22d77bfb":"plot_hbar_wm('Deaths\/1M pop', 15, 1000000)","e22ba7b4":"plot_hbar_wm('TotalTests', 15, 1000000)","511ba1f2":"plot_hbar_wm('Tests\/1M pop', 15)","78e81a96":"def plot_stacked(col):\n    fig = px.bar(full_grouped, x=\"Date\", y=col, color='Country\/Region', \n                 height=600, title=col, \n                 color_discrete_sequence = px.colors.cyclical.mygbm)\n    fig.update_layout(showlegend=True)\n    fig.show()","502db479":"def plot_line(col):\n    fig = px.line(full_grouped, x=\"Date\", y=col, color='Country\/Region', \n                  height=600, title=col, \n                  color_discrete_sequence = px.colors.cyclical.mygbm)\n    fig.update_layout(showlegend=True)\n    fig.show()","61eccdd3":"plot_stacked('Confirmed')","9c15e4d7":"plot_stacked('Deaths')","17a251da":"plot_stacked('New cases')","60046aa0":"plot_stacked('Active')","bf55697e":"plot_line('Confirmed')","b089441c":"plot_line('Deaths')","ffb9238f":"plot_line('New cases')","f74aff4b":"plot_line('Active')","c2d7dad0":"temp = pd.merge(full_grouped[['Date', 'Country\/Region', 'Confirmed', 'Deaths']], \n                day_wise[['Date', 'Confirmed', 'Deaths']], on='Date')\ntemp['% Confirmed'] = round(temp['Confirmed_x']\/temp['Confirmed_y'], 3)*100\ntemp['% Deaths'] = round(temp['Deaths_x']\/temp['Deaths_y'], 3)*100\ntemp.head()","d4185447":"fig = px.bar(temp, x='Date', y='% Confirmed', color='Country\/Region', \n             range_y=(0, 100), title='% of Cases from each country', \n             color_discrete_sequence=px.colors.qualitative.Prism)\nfig.show()","c86bbefe":"fig = px.bar(temp, x='Date', y='% Deaths', color='Country\/Region', \n             range_y=(0, 100), title='% of Cases from each country', \n             color_discrete_sequence=px.colors.qualitative.Prism)\nfig.show()","b90e4aab":"def gt_n(n):\n    countries = full_grouped[full_grouped['Confirmed']>n]['Country\/Region'].unique()\n    temp = full_table[full_table['Country\/Region'].isin(countries)]\n    temp = temp.groupby(['Country\/Region', 'Date'])['Confirmed'].sum().reset_index()\n    temp = temp[temp['Confirmed']>n]\n    # print(temp.head())\n\n    min_date = temp.groupby('Country\/Region')['Date'].min().reset_index()\n    min_date.columns = ['Country\/Region', 'Min Date']\n    # print(min_date.head())\n\n    from_nth_case = pd.merge(temp, min_date, on='Country\/Region')\n    from_nth_case['Date'] = pd.to_datetime(from_nth_case['Date'])\n    from_nth_case['Min Date'] = pd.to_datetime(from_nth_case['Min Date'])\n    from_nth_case['N days'] = (from_nth_case['Date'] - from_nth_case['Min Date']).dt.days\n    # print(from_nth_case.head())\n\n    fig = px.line(from_nth_case, x='N days', y='Confirmed', color='Country\/Region', \n                  title='N days from '+str(n)+' case', height=600)\n    fig.show()","90344b73":"gt_n(100000)","71e14172":"fig = px.scatter(country_wise.sort_values('Deaths', ascending=False).iloc[:20, :], \n                 x='Confirmed', y='Deaths', color='Country\/Region', size='Confirmed', \n                 height=700, text='Country\/Region', log_x=True, log_y=True, \n                 title='Deaths vs Confirmed (Scale is in log10)')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","e42019db":"def plot_treemap(col):\n    fig = px.treemap(country_wise, path=[\"Country\/Region\"], values=col, height=700,\n                 title=col, color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.data[0].textinfo = 'label+text+value'\n    fig.show()","772c7e41":"plot_treemap('Confirmed')","0fb612d9":"plot_treemap('Deaths')","11c4038e":"def plot_bubble(col, pal):\n    temp = full_grouped[full_grouped[col]>0].sort_values('Country\/Region', ascending=False)\n    fig = px.scatter(temp, x='Date', y='Country\/Region', size=col, color=col, height=3000,\n                    color_continuous_scale=pal)\n    fig.update_layout(yaxis = dict(dtick = 1))\n    fig.update(layout_coloraxis_showscale=False)\n    fig.show()","e0564285":"plot_bubble('New cases', 'Viridis')","41b6c3ba":"plot_bubble('Active', 'Viridis')","a20a2cd7":"temp = full_grouped[['Date', 'Country\/Region', 'New cases']]\ntemp['New cases reported ?'] = temp['New cases']!=0\ntemp['New cases reported ?'] = temp['New cases reported ?'].astype(int)\n# temp.head()","8729cb19":"fig = go.Figure(data=go.Heatmap(\n        z=temp['New cases reported ?'],\n        x=temp['Date'],\n        y=temp['Country\/Region'],\n        colorscale='Emrld',\n        showlegend=False,\n        text=temp['New cases reported ?']))\n\nfig.update_layout(yaxis = dict(dtick = 1))\nfig.update_layout(height=3000)\nfig.show()","21c13372":"# HTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1571387\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","efbaab23":"# temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths']\n# temp = temp.sum().diff().reset_index()\n\n# mask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\n# temp.loc[mask, 'Confirmed'] = np.nan\n# temp.loc[mask, 'Deaths'] = np.nan\n\n# countries = full_table[full_table['Confirmed']>100000]['Country\/Region'].unique()\n\n# temp = temp[temp['Country\/Region'].isin(countries)]\n\n\n# n_cols = 3\n# n_rows = math.ceil(len(countries)\/n_cols)\n\n# fig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=countries)\n\n# for ind, country in enumerate(countries):\n#     row = int((ind\/n_cols)+1)\n#     col = int((ind%n_cols)+1)\n#     fig.add_trace(go.Bar(x=temp['Date'], y=temp.loc[temp['Country\/Region']==country, 'Confirmed'], name=country), row=row, col=col)\n    \n# fig.update_layout(height=4000, title_text=\"No. of new cases in each Country\")\n# fig.update_layout(showlegend=False)\n# fig.show()","93b7d011":"usa_df = pd.read_csv('..\/input\/corona-virus-report\/usa_county_wise.csv')\nusa_latest = usa_df[usa_df['Date'] == max(usa_df['Date'])]\nusa_grouped = usa_latest.groupby('Province_State')['Confirmed', 'Deaths'].sum().reset_index()","f812592b":"us_code = {'Alabama': 'AL', 'Alaska': 'AK', 'American Samoa': 'AS', 'Arizona': 'AZ', 'Arkansas': 'AR', \n    'California': 'CA','Colorado': 'CO','Connecticut': 'CT','Delaware': 'DE', 'District of Columbia': 'DC', \n    'Florida': 'FL', 'Georgia': 'GA', 'Guam': 'GU', 'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL',\n    'Indiana': 'IN','Iowa': 'IA','Kansas': 'KS','Kentucky': 'KY','Louisiana': 'LA','Maine': 'ME',\n    'Maryland': 'MD','Massachusetts': 'MA','Michigan': 'MI','Minnesota': 'MN','Mississippi': 'MS',\n    'Missouri': 'MO','Montana': 'MT','Nebraska': 'NE','Nevada': 'NV','New Hampshire': 'NH', 'New Jersey': 'NJ',\n    'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Northern Mariana Islands':'MP',\n    'Ohio': 'OH', 'Oklahoma': 'OK', 'Oregon': 'OR', 'Pennsylvania': 'PA', 'Puerto Rico': 'PR',\n    'Rhode Island': 'RI', 'South Carolina': 'SC', 'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX',\n    'Utah': 'UT', 'Vermont': 'VT', 'Virgin Islands': 'VI', 'Virginia': 'VA', 'Washington': 'WA',\n    'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY'}\n\nusa_grouped['Code'] = usa_grouped['Province_State'].map(us_code)","13fd4eeb":"fig = px.choropleth(usa_grouped, color='Confirmed', locations='Code', locationmode=\"USA-states\", \n                    scope=\"usa\", color_continuous_scale=\"RdGy\", title='No. of cases in USA')\nfig","1fe62f2d":"# with urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json') as response:\n#     counties = json.load(response)\n\n# fig = px.choropleth(usa_latest, geojson=counties, locations='FIPS', color='Confirmed',\n#                            color_continuous_scale=\"Peach\",\n#                            scope=\"usa\",\n#                            labels={'Confirmed':'Confirmed'})\n# fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n# fig.show()","4d35cf80":"who = country_wise.groupby('WHO Region')['Confirmed', 'Deaths', 'Recovered', 'Active',\n                                         'New cases', 'Confirmed last week'].sum().reset_index()\nwho['Fatality Rate'] = round((who['Deaths'] \/ who['Confirmed']) * 100, 2)\nwho['Recovery Rate'] = (who['Recovered'] \/ who['Confirmed']) * 100\n\nwho_g = full_grouped.groupby(['WHO Region', 'Date'])['Confirmed', 'Deaths', 'Recovered', \n                                                     'Active','New cases', 'New deaths'].sum().reset_index()","439c96b8":"def plot_hbar(col, hover_data=[]):\n    fig = px.bar(who.sort_values(col), \n                 x=col, y=\"WHO Region\", color='WHO Region',  \n                 text=col, orientation='h', width=700, hover_data=hover_data,\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","1fa81d22":"plot_hbar('Confirmed')","e7217f3e":"plot_hbar('Deaths')","b88718cd":"plot_hbar('Fatality Rate')","547527ee":"temp = worldometer_data[worldometer_data['WHO Region']!=0]","5e4d509c":"fig = px.scatter(temp, x='TotalCases', y='TotalDeaths', color='WHO Region', \n                 height=700, hover_name='Country\/Region', log_x=True, log_y=True, \n                 title='Confirmed vs Deaths',\n                 color_discrete_sequence=px.colors.qualitative.Vivid)\nfig.update_traces(textposition='top center')\n# fig.update_layout(showlegend=False)\n# fig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","49b32d37":"fig = px.scatter(temp, x='Population', y='TotalCases', color='WHO Region', \n                 height=700, hover_name='Country\/Region', log_x=True, log_y=True, \n                 title='Population vs Confirmed',\n                 color_discrete_sequence=px.colors.qualitative.Vivid)\nfig.update_traces(textposition='top center')\n# fig.update_layout(showlegend=False)\n# fig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","af5d611a":"px.bar(who_g, x=\"Date\", y=\"Confirmed\", color='WHO Region', \n       height=600, title='Confirmed', \n       color_discrete_sequence=px.colors.qualitative.Vivid)","cf61aab2":"px.bar(who_g, x=\"Date\", y=\"New cases\", color='WHO Region', \n       height=600, title='New cases', \n       color_discrete_sequence=px.colors.qualitative.Vivid)","c4eed557":"px.box(worldometer_data, x='WHO Region', y='TotalCases', color='WHO Region',\n       title='Distribution of country wise no. of cases in different WHO Region')","1ad01f8b":"full_grouped['Week No.'] = full_grouped['Date'].dt.strftime('%U')\nweek_wise = full_grouped.groupby('Week No.')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases', 'New deaths', 'New recovered'].sum().reset_index()","c8d051e8":"def plot_weekwise(col, hue):\n    fig = px.bar(week_wise, x=\"Week No.\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","d4b83809":"plot_weekwise('Confirmed', '#000000')","117e5d83":"plot_weekwise('Deaths', dth)","c8f67030":"plot_weekwise('New cases', '#cd6684')","61637dda":"full_grouped['Month'] = pd.DatetimeIndex(full_grouped['Date']).month\nmonth_wise = full_grouped.groupby('Month')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases', 'New deaths', 'New recovered'].sum().reset_index()","be9243ad":"def plot_monthwise(col, hue):\n    fig = px.bar(month_wise, x=\"Month\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","f5a17070":"plot_monthwise('Confirmed', '#000000')","f3dca06e":"plot_monthwise('Deaths', dth)","19da05e9":"plot_monthwise('New cases', '#cd6684')","1bb0d0b0":"temp = country_wise[country_wise['Active']==0]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp.reset_index(drop=True)","fbe5df6f":"happiness_report = pd.read_csv('..\/input\/world-happiness\/2019.csv')\nhappiness_report = happiness_report[['Country or region', 'Healthy life expectancy']]\n\ntemp = country_wise.merge(happiness_report, left_on='Country\/Region', right_on='Country or region')\npx.scatter(temp, y='Deaths \/ 100 Cases', x='Healthy life expectancy', color='WHO Region', hover_data=['Country\/Region'])","cd1c4247":"# Latest","3ec37220":"# Graph after 1M cases","07b8b566":"# WHO Region Wise","2724e998":"# Country Wise","cb47c793":"# Comparison with similar epidemics","8e828ae3":"# Date vs","467e4ac0":"### Color, theme, color palettes","8a598449":"# Bubble Plot","7cbc8be2":"### Timeline","939de997":"### Install libraries","750617a5":"# Maps","89e8d884":"https:\/\/www.kaggle.com\/imdevskp\/covid19-vs-sars-vs-mers-vs-ebola-vs-h1n1\n\n","d3b6417c":"https:\/\/www.kaggle.com\/imdevskp\/mers-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/sars-2003-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/western-africa-ebola-outbreak-analysis\n","4763c903":"# USA","0a46d831":"# Confirmed vs Deaths","cd89a497":"https:\/\/app.flourish.studio\/visualisation\/1571387\/edit\n\n","7a87bea3":"# Analysis on similar pandemic\/epidemic\/outbreak","bf609f70":"# Healthy life expectancy vs Deaths \/ 100 Cases","b3b5cc92":"> *https:\/\/en.wikipedia.org\/wiki\/WHO_regions*","43a0994a":"# Dataset","da09fef9":"### Load libraries","d00f3a71":"# Composition of Cases","c1721f07":"# Epidemic Span","485b8cb2":"## Weekly Statistics","e0567a78":"# Libraries","d594379e":"## Monthly statistics","c1b7d2ff":"# Running Bar Chart","f77c6e60":"# Cases over the time","aee4d405":"### Ships that had passengers with COVID-19","73131d26":"![](https:\/\/im.haberturk.com\/2020\/04\/06\/ver1586181618\/2637285_810x458.jpg)","e4b7dec9":"# Countries with no more active cases","39a4ada2":"# Top 20 Countries"}}