{"cell_type":{"ad983b3f":"code","0545b42a":"code","5319e90a":"code","86b0b8d6":"code","12201a16":"code","1e9baeba":"code","022ee8fe":"code","dfdc0d37":"code","a708313b":"code","a44adb68":"code","4c306298":"code","5f476974":"code","24692b0a":"code","93bc9e6f":"code","5dfe89e3":"code","a739f410":"code","d17eedf1":"code","080471db":"code","c4294a70":"code","f11fac25":"code","07e95582":"code","3fc374e0":"code","17a2699c":"code","a1a907bf":"code","eeca0521":"code","9f71105d":"code","94e8d063":"code","a6e33045":"code","40a9edf5":"code","ed64771c":"code","1414c502":"code","86030583":"code","cff8d91d":"code","e0b5d8a3":"code","fa810a25":"code","4a9e5638":"code","d79b108f":"code","ef8bbb9b":"code","578ed289":"code","86f48eb3":"code","b0f0eb80":"code","131c3bc8":"code","aba4d3fc":"code","d11e8e1e":"code","1df63f53":"code","9704e42b":"code","beb55aa8":"code","5ebf9892":"code","4095a78f":"code","85a2aa00":"code","8fdd2c71":"code","6da6cc2e":"code","e42c4245":"code","9080b207":"code","d564c97b":"code","6440938d":"code","4767fa56":"code","6a414bad":"code","899fa730":"code","2d690a56":"code","4d40dc2c":"code","6f7c9cf6":"code","92aad076":"code","2582ac99":"code","aba15319":"code","6e18f2ce":"code","a8751042":"code","190dfbcc":"code","3c42168d":"code","24c6c5d7":"code","f6642519":"code","e550866b":"code","9493bd54":"code","480768ea":"code","723d345e":"code","80074445":"code","2452ea91":"code","bf651d38":"code","129270e6":"code","910c5eaf":"code","b995261b":"code","a91ae21e":"code","5efefebb":"code","5cabaf56":"code","313bc02d":"code","51452962":"code","9a73c65b":"code","1ed164ca":"code","c6c29d39":"code","16775fe5":"code","498d5161":"code","2f535999":"code","8a6e1ba7":"code","65f0ee45":"markdown","90c9aff5":"markdown","60f18f35":"markdown","d4146c49":"markdown","d55bd8d8":"markdown","5768e1e5":"markdown","3fc37889":"markdown","7b23322e":"markdown","83b734be":"markdown","9fc9c605":"markdown","55cb3d8d":"markdown","8e1e9b8f":"markdown","8f535120":"markdown","f39f8c68":"markdown","f802e3d8":"markdown","392ee2f1":"markdown","f12dbbd2":"markdown","1daba841":"markdown","5c1ba429":"markdown","308bc4b0":"markdown","21b104f9":"markdown","df112389":"markdown","c04ea0af":"markdown","286048d7":"markdown","fc0ae73a":"markdown","ad9ca071":"markdown","06b807a6":"markdown","a474ce15":"markdown","64946740":"markdown","a190721b":"markdown","54679c12":"markdown","81f2cc34":"markdown","69c538ce":"markdown","2c80638a":"markdown","b3bc1bb3":"markdown","60f514d5":"markdown","d9825bfe":"markdown"},"source":{"ad983b3f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","0545b42a":"df = pd.read_csv('..\/input\/train.csv')","5319e90a":"df.head()","86b0b8d6":"df.columns","12201a16":"df.describe()","1e9baeba":"f,ax = plt.subplots(1,2,figsize=(18,5))\n#ax[0], ax[1]\n## First Plot\ndf['Survived'].value_counts().plot.pie(explode=[0,0.1],\n                                         autopct='%1.1f%%',\n                                         shadow=True,\n                                         colormap = 'Accent',\n                                         ax = ax[0])\nax[0].set_title('Survived')\n\n### second plot\nsns.countplot('Survived',data=df,ax=ax[1])\nax[1].set_title('Survived')\n","022ee8fe":"sns.countplot('Sex',data =df,hue = 'Survived',palette ='rocket_r')","dfdc0d37":"df.info()","a708313b":"sns.pairplot(df,diag_kind = 'kde')","a44adb68":"sns.swarmplot(x='Embarked',y='Age',data =df,hue = 'Sex',palette = 'magma')","4c306298":"f,ax=plt.subplots(1,3,figsize=(18,8))\n## first plot\ndf['Pclass'].value_counts().plot.bar(color=['r','c','g'],ax=ax[0])\n\nax[0].set_title('Number Of Passengers By Pclass')\nax[0].set_ylabel('Count')\n# second plot\npd.crosstab(df.Pclass,df.Survived).plot.bar(ax=ax[1],stacked = True,colormap ='rainbow_r')\nax[1].set_title('Pclass:Survived vs Dead')\n# third plot\nsns.countplot('Survived',hue='Pclass',data=df,ax=ax[2],palette ='prism_r')\nax[2].set_title('Survived vs Pclass')","5f476974":" y= df.loc[:,['Survived']]","24692b0a":"\nX=df.loc[:,['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']]","93bc9e6f":"X.head()","5dfe89e3":"df.corr()","a739f410":"sns.heatmap(df.corr(),cmap ='summer',annot = True,lw = 0.5,linecolor='black')","d17eedf1":"# Checking for null values in the dataset\nX.isnull().sum()","080471db":"y.Survived.value_counts()","c4294a70":"X['Title_split'] = X.Name.str.split('[.,]').str.get(1)\nX.Title_split = X.Title_split.str.strip()\nX.Title_split.value_counts()","f11fac25":"# Creating the new columns Title_reg for the title which is extracted from the name column\nX['Title_reg']=''\nfor i in df:\n    X['Title_reg']=X.Name.str.extract('([A-Za-z]+)\\.')\n    #lets extract the Salutationsd\\.","07e95582":"X[['Title_reg','Name']].head()","3fc374e0":"X['Title'] = X.Title_split","17a2699c":"X.columns","a1a907bf":"# Dropping the columns from the dataset Title_split and Title_reg\nX.drop(['Title_split','Title_reg'], axis = 1, inplace = True)","eeca0521":"## no. of unique \nprint(X.Title.describe())\nprint(X.Title.nunique())","9f71105d":"# Unique value count from the column name Title from dataset\nX.Title.value_counts()","94e8d063":"#Checking the Initials with the Sex\npd.crosstab(X.Title,X.Sex,margins=True).T.style.background_gradient(cmap='summer_r') ","a6e33045":"# Classify according to the Title\n# Miss >> Mlle,Mme\n# Mrs >> Ms,Lady,the countess\n# Mr >> Dr,Major,Capt,Sir,Don,Jonkheer,Col,Rev\n\nX['Title_1']=X['Title']\nX['Title_1'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','the Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],\n                                       ['Miss','Miss','Mrs','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],\n                      inplace=True)","40a9edf5":"# calculating the total counts of each unique Title\nX['Title_1'].value_counts()","ed64771c":"X['Title'] =X.Title_1","1414c502":"X.columns","86030583":"X.drop(['Title_1'],axis =1,inplace = True)","cff8d91d":"X.columns","e0b5d8a3":"#lets check the average age by Initials\nX.groupby('Title')['Age'].mean() ","fa810a25":"X[X.Title=='Master'].Age.isnull().sum()","4a9e5638":"## Assigning the NaN Values with the Ceil values of the mean ages\nX.loc[(X.Age.isnull())&(X.Title=='Mr'),'Age']=33\nX.loc[(X.Age.isnull())&(X.Title=='Mrs'),'Age']=36\nX.loc[(X.Age.isnull())&(X.Title=='Master'),'Age']=5\nX.loc[(X.Age.isnull())&(X.Title=='Miss'),'Age']=22\nX.loc[(X.Age.isnull())&(X.Title=='Other'),'Age']=46","d79b108f":"X.Age.isnull().sum()","ef8bbb9b":"f,ax=plt.subplots(1,2,figsize=(18,5))\ndf[df['Survived']==0].Age.plot.hist(ax=ax[0],\n                                        bins=20,\n                                        edgecolor='black',\n                                        color='red')\nax[0].set_title('Dead')\nx1=list(range(0,85,10))\nax[0].set_xticks(x1)\n\ndf[df['Survived']==1].Age.plot.hist(ax=ax[1],\n                                        color='green',\n                                        bins=20,\n                                        edgecolor='black')\nax[1].set_title('Survived')\nx2=list(range(0,85,5))\nax[1].set_xticks(x2)\nplt.show()","578ed289":"# Replacing the null values for Embarked\nX['Embarked'].value_counts()","86f48eb3":"X['Embarked'].fillna('S',inplace=True)","b0f0eb80":"X.isnull().sum()","131c3bc8":"X.head()","aba4d3fc":"X.drop(['PassengerId','Name','Ticket','Cabin'], axis=1,inplace =True)\n","d11e8e1e":"X.isnull().sum()","1df63f53":"# When cleaning the test data \n# X.Fare.fillna(35.6271,inplace =True)","9704e42b":"X.drop(['Title'],axis =1,inplace = True)","beb55aa8":"X.head()","5ebf9892":"sns.pairplot(X,diag_kind = 'kde')","4095a78f":"X.SibSp.value_counts()","85a2aa00":"#pd.get_dummies(df_train['Sex'], drop_first=True)\ndf_train_dummied = pd.get_dummies(X, columns=[\"Sex\"])","8fdd2c71":"df_train_dummied.head()","6da6cc2e":"X = pd.get_dummies(df_train_dummied, columns=[\"Embarked\"])","e42c4245":"X.head()","9080b207":"X.Sex_female.value_counts()","d564c97b":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nX = scaler.fit_transform(X)","6440938d":"X","4767fa56":"y = y['Survived'].values","6a414bad":"%time\n# Splitting the dataset\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size =0.3,random_state=1)","899fa730":"%time\n# Importing the LR model from scikit learn linear model\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression()","2d690a56":"# Fitting the LR model on training dataset\nclassifier.fit(X_train,y_train)","4d40dc2c":"# Predicting the values on independent variables testing dataset\ny_pred = classifier.predict(X_test)","6f7c9cf6":"# Confusion matrix for evaluation to get the accuracy of the model\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test,y_pred)\ncm","92aad076":"sns.heatmap(cm,annot = True,cmap ='plasma')","2582ac99":"# Accuracy of the LR model is base on Actual values and predicting values by the model\nfrom sklearn.metrics import accuracy_score\nmodel_accuracy = accuracy_score(y_test,y_pred)\nprint('Accuracy of the model : ',model_accuracy)","aba15319":"# Cross validation score of 10 Kfolds\nfrom sklearn.model_selection import cross_val_score\naccuracy = cross_val_score(estimator = classifier,X=X_train,y=y_train,cv=10)\naccuracy","6e18f2ce":"print(\"The mean accuracy for  10 Kfolds :  \",accuracy.mean())","a8751042":"print(\"The Std deviation of the model :\",accuracy.std())","190dfbcc":"%time\n# Importing the model from scikit learn tree\nfrom sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier()\n","3c42168d":"# fitting the DT model on training dataset\nclassifier.fit(X_train,y_train)","24c6c5d7":"# Predicting the values on independent variables testing dataset\ny_pred = classifier.predict(X_test)","f6642519":"# Confusion matrix for evaluation to get the accuracy of the model\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test,y_pred)","e550866b":"#Confusion Matrix\ncm","9493bd54":"sns.heatmap(cm,annot = True)","480768ea":"# Accuracy of the DT model is base on Actual values and predicting values by the model\nfrom sklearn.metrics import accuracy_score\nmodel_accuracy = accuracy_score(y_test,y_pred)\nprint(\"The accuracy of the DT model :\",model_accuracy)","723d345e":"# Cross validation score of 10 Kfolds\nfrom sklearn.model_selection import cross_val_score\naccuracy = cross_val_score(estimator = classifier,X=X_train,y=y_train,cv=10)\naccuracy","80074445":"print('The mean accuracy for 10 Kfold :',accuracy.mean())","2452ea91":"print(\"The standard deviation of the DT model :\",accuracy.std())","bf651d38":"%time\n# Importing the RF model from scikit learn ensemble \nfrom sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier()\nmodel = classifier.fit(X_train,y_train)\nmodel\n","129270e6":"# Predicting the values on independent variables testing dataset\ny_pred = classifier.predict(X_test)","910c5eaf":"# Confusion matrix for evaluation to get the accuracy of the RF model\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test,y_pred)\ncm","b995261b":"sns.heatmap(cm,annot = True,cmap = 'viridis')","a91ae21e":"# Accuracy of the DT model is base on Actual values and predicting values by the model\nfrom sklearn.metrics import accuracy_score\nmodel_accuracy = accuracy_score(y_test,y_pred)\nprint('The accuracy of the RF model : ',model_accuracy)","5efefebb":"# Cross validation score of 10 Kfolds\nfrom sklearn.model_selection import cross_val_score\naccuracy = cross_val_score(estimator = classifier,X=X_train,y=y_train,cv=10)\naccuracy","5cabaf56":"print('The mean accuracy for 10 Kfold :',accuracy.mean())","313bc02d":"print(\"The standard deviation of the DT model :\",accuracy.std())","51452962":"%time\n# Importing the XGBoost model from scikit learn ensemble \nfrom xgboost import XGBClassifier\nclassifier = XGBClassifier(n_estimator =1000)\nclassifier.fit(X_train,y_train)","9a73c65b":"# Predicting the values on independent variables testing dataset\ny_pred = classifier.predict(X_test)","1ed164ca":"# Confusion matrix for evaluation to get the accuracy of the XGBoost model\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test,y_pred)\ncm","c6c29d39":"sns.heatmap(cm,annot = True,cmap=\"cividis\")","16775fe5":"# Accuracy of the XGBoost model is base on Actual values and predicting values by the model\nfrom sklearn.metrics import accuracy_score\nmodel_accuracy = accuracy_score(y_test,y_pred)\nmodel_accuracy","498d5161":"# Cross validation score of 10 Kfolds\nfrom sklearn.model_selection import cross_val_score\naccuracy = cross_val_score(estimator = classifier,X=X_train,y=y_train,cv=10)\naccuracy","2f535999":"print('The mean accuracy for 10 Kfold :',accuracy.mean())","8a6e1ba7":"print(\"The standard deviation of the DT model :\",accuracy.std())","65f0ee45":"### Reponse variable or dependent variable","90c9aff5":"# Random Forest Classifier","60f18f35":"### Splitting the dataset into training and testing with the ratio of 70:30 ","d4146c49":"### 70% of the data is goes for training ","d55bd8d8":"In this Titanic dataset we have 891 observations and 12 columns where age and Cabin  columns contain the null values and datatypes is of float,int and object.","5768e1e5":"# Importing the libraries","3fc37889":"Handling the null values of Age columns \nAs I can do the fillna with mean but it will make no sense as the mean of the age column is 29 \nlike I  am replacing it with 4 year old child which is meaningless so instead I can find out \nthe number of child,women,men in the dataset by extracting the Title from the name columns and will accordingly fill the values\nlike if the Title in the name is master then we can fill it will 4 years old and similarily we do for","7b23322e":"### Importing the Titanic dataset","83b734be":"The sinking of the RMS Titanic is one of the most infamous shipwrecks in history.  On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. This sensational tragedy shocked the international community and led to better safety regulations for ships.\n\nOne of the reasons that the shipwreck led to such loss of life was that there were not enough lifeboats for the passengers and crew. Although there was some element of luck involved in surviving the sinking, some groups of people were more likely to survive than others, such as women, children, and the upper-class.\n\nIn this challenge, we ask you to complete the analysis of what sorts of people were likely to survive. In particular, we ask you to apply the tools of machine learning to predict which passengers survived the tragedy.","9fc9c605":"data.Name\nmaster --> young boy\nMr ---> adult\nmiss --> young girls\nmrs ---> married\nms\nm","55cb3d8d":"In this we can see the Title according to the gender and can see the distribution of the gender with the Title \nSo with this knowledge we can fill the null values accordingly to the Title like if some observation say with \nthe title name of Master then we can fill the null value with 5 years old and accordingly we do it for all","8e1e9b8f":"## Dependent variable","8f535120":"# Logistic Regression Model","f39f8c68":"# The Champion model out of all Models is XGBoost","f802e3d8":"## Data understanding and Exploration","392ee2f1":"# XGBoost Model","f12dbbd2":"## Independent variables","1daba841":" Checking for the null values as we see the columns Age and Embarked there is no null values\n in case of Cabin columns 50% of the values are null so will drop the column and has not giving\n any meaning to the Dataset\n","5c1ba429":"Here from above graph we can observed from 1st graph  that the number of travelling passenger is belong to the Pclass 3 as the Fare is very low for that class.\nIn second graph the most dead people is from Pclass 3 it is around 350\nAnd in the graph it is stated that the number of most dead people from Pclass 3 and number of most survived from Pclass 1 as that after female and child the perference is given to the Pclass wise to aboard from the ship.","308bc4b0":"### Graph Interpretation","21b104f9":"Heatmap is use to find the multicolinearity withing the predictor as we can see there is no multicolinearity\nwithin the predictor and if the correlation between predictor and response is strongly correlated then \nwe can say it is significance variable with respective to response.","df112389":"### Understanding the dataset by Descriptive statistic and Exploring the data through visualization \n#### Describe >> Gives the overview of the distribution of the data by looking mean and std and how the quartiles are distributed\n#### Info >> Gives the information that is any Null values in the dataset and gives understanding of  datatypes and structure\n#### head >> Gives the top five observations of the dataset\n#### columns >>  contain columns in the dataset","c04ea0af":"### 30% of the data is reserved for testing","286048d7":"#### X_test is the independent variables testing dataset which is 30% of the total\n#### y_test is the dependent variables testing dataset which is 30% of the total","fc0ae73a":"##### X_train is the independent variables training dataset which is 70% of the total.\n##### y_train is the dependent varaible dataset for training which is 70% of the total","ad9ca071":"As we can see above Age,Cabin and Embarked  has null values","06b807a6":"##### Here in the dataset the Name column has the title like Mr,Miss,Master,Mrs and so on.\n","a474ce15":"#### Here we observed that out of total passengers only 38.4% is survived and 61.6% of the people are not survived ","64946740":"Dropping the columns which are meaningless and of dtype as object as Machine Learning model only understand the \nfloat,int,bool values","a190721b":"## Titanic : Machine Learning from Disaster","54679c12":"### Handling the null values i.e Age,Cabin and Embarked","81f2cc34":"# Decision Tree Classifier","69c538ce":"Here we can distinguish that above 400 of  male are dead and only 100 are able to survived but in case of female \nmost of female are able to survived and less no. of female are dead it is because female and child given the first preference to abroad from Titanic Ship as we can observed.","2c80638a":"#### Extracting the Title from the name column and finding the columns","b3bc1bb3":"In this above swarm plot show us that distribution of the age into the Embarked. \nAnd most of the people of age between 19 to 50 is belong to Embarked S ","60f514d5":"### Features or independent variables","d9825bfe":"As we see above the most occurance value in Column Embarked is S so we will replace Null values with S"}}