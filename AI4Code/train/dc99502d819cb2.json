{"cell_type":{"99b0357d":"code","62ee1328":"code","d65e001f":"code","7a8d8ce6":"code","4669db92":"code","b18a6f7a":"code","30b39d81":"code","aa4485e8":"code","bb9f46d2":"code","e0aaa7d8":"code","3d7841d0":"code","288a3d16":"code","a1bc45c5":"code","bc3b86f2":"markdown","8579e067":"markdown"},"source":{"99b0357d":"import pandas as pd\nimport numpy as np\n\nfrom sklearn import ensemble\nfrom sklearn import metrics\nfrom sklearn import model_selection\nfrom sklearn import preprocessing\nfrom sklearn import decomposition\nfrom sklearn import pipeline","62ee1328":"from functools import partial\nfrom skopt import space\nfrom skopt import gp_minimize","d65e001f":"from hyperopt import fmin\nfrom hyperopt import hp\nfrom hyperopt import tpe\nfrom hyperopt import Trials","7a8d8ce6":"from hyperopt.pyll.base import scope #for the format int","4669db92":"df = pd.read_csv('..\/input\/mobile-price-classification\/train.csv')\nX  = df.drop('price_range', axis = 1).values\ny  = df['price_range'].values","b18a6f7a":"def optimize(params, x, y):\n    \n    model  = ensemble.RandomForestClassifier(**params) #**params to read the dict\n    kf     = model_selection.StratifiedKFold(n_splits = 5)\n    \n    accuracies = []\n    for idx in kf.split(X=x, y=y):\n        train_idx, test_idx = idx[0], idx[1]\n        \n        xtrain = x[train_idx]\n        ytrain = y[train_idx]\n        xtest = x[test_idx]\n        ytest = y[test_idx]\n        \n        model.fit(xtrain, ytrain)\n        preds = model.predict(xtest)\n        fold_acc = metrics.accuracy_score(ytest, preds)\n        \n        accuracies.append(fold_acc)\n    \n    return -1*np.mean(accuracies)","30b39d81":"#dictionalry\nparam_space = {\n    \"max_depth\":scope.int(hp.quniform(\"max_depth\", 3,15, 1)), #hp.quniform(label, low, high, q)\n    \"n_estimators\":scope.int(hp.quniform(\"n_estimators\", 100, 600, 1)),\n    \"criterion\":hp.choice(\"criterion\", [\"gini\", \"entropy\"]),\n    \n    \"max_features\":hp.uniform(\"max_features\", 0.1,1)\n}","aa4485e8":"optimization_func = partial(optimize, x = X, y = y)","bb9f46d2":"trials = Trials()","e0aaa7d8":"result = fmin(fn = optimization_func, space = param_space, algo = tpe.suggest, max_evals = 15, trials = trials, verbose = 10)","3d7841d0":"print(result)","288a3d16":"classifier = ensemble.RandomForestClassifier(criterion ='entropy', max_depth = 8, \n                                        max_features = 0.8917683974762745, n_estimators = 411, n_jobs=-1)","a1bc45c5":"from sklearn.model_selection import cross_val_score\nscore = cross_val_score(classifier,X,y, cv=10)\nprint('scores\\n',score)\nprint('\\ncv values', score.shape)\nprint('\\nScore_Mean', score.mean())","bc3b86f2":"# Hyperopt","8579e067":"https:\/\/www.youtube.com\/watch?v=5nYqK-HaoKY&t=2153s"}}