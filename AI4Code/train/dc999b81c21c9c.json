{"cell_type":{"5fdec8f2":"code","876110a6":"code","f5611f15":"code","5a1fa349":"code","530cca24":"code","dde7b6a5":"code","33287146":"code","ec6845b4":"code","d0b8e0d6":"code","5750ef19":"code","65572027":"code","e010d478":"code","8a754408":"code","2edae8f2":"code","77c9bbd1":"code","a1a3c56e":"code","c64452c5":"code","ff9fd5a1":"code","ab0c8e5b":"code","566980f8":"code","3643c76e":"code","f7036401":"code","f88ef20f":"code","c496b587":"code","a16b1acf":"code","8e33a3f0":"code","9a3b2998":"code","9ef6ba93":"code","23a3961a":"code","c9bc9ea6":"code","406ca334":"code","2b5faa4e":"code","857f1c32":"code","d5abb07d":"code","53057e65":"code","28422919":"code","eeabcd81":"code","8856dbb5":"code","14edd51b":"code","ed125d24":"code","1a1e8acc":"code","bb8cf9a3":"code","70b0c625":"code","d9b45a87":"code","9e2f6166":"code","9d7aebe5":"code","4899c391":"code","fd59c129":"code","ee036fcb":"code","f5e354f2":"code","17ea48ae":"code","be0efcb3":"code","e06dc63e":"code","b2c6740b":"code","025df443":"code","c3682d03":"code","03639910":"code","a05357b0":"code","5e102d25":"code","16c3508d":"code","fef3c089":"code","1039d599":"code","53db9219":"code","b3df7601":"code","b9082315":"code","819a05a0":"code","2a79de98":"code","5d9b3ec4":"code","de627c5e":"code","f888ff1f":"code","a44d24a7":"code","f66c348c":"code","50633229":"code","e45828b9":"code","60ebf97d":"code","070e343d":"code","db7fc172":"code","c74ae1ea":"code","e48ccb47":"code","febd3f7f":"code","705a6640":"code","74d4a860":"code","455de061":"code","900a1081":"code","fefbfdeb":"code","8d434a3f":"code","3745b452":"code","c056ac43":"code","1cf05e5f":"code","36990b0b":"code","8ad74e57":"code","d66273ae":"code","ac2803ee":"code","2ddafb24":"code","c814ed1a":"code","a858067b":"code","faa9d31b":"code","4eae9f74":"code","08445e4a":"code","dc531901":"code","e2f54497":"code","802af029":"code","899bb5e0":"code","aa6c4fda":"code","6e8a9173":"code","c369d32f":"code","900d7efb":"code","4219095d":"code","a60260fa":"code","e3a98d4a":"code","212df4da":"code","cb7f782b":"code","62647534":"code","c71edf29":"code","42c5c8db":"code","b37e482a":"code","33baf1b2":"code","f1b70950":"code","6fbff8ed":"code","608ca71e":"code","d954dc02":"code","5857d7c2":"code","bb7720eb":"code","8e8359d9":"code","c9c92abb":"code","dbb07f4d":"markdown","2b97ab3c":"markdown","9fba6808":"markdown","d950f2f5":"markdown","000774c5":"markdown","ef921aab":"markdown","0e49d7b5":"markdown","1683febe":"markdown","fe38793d":"markdown","9e04f202":"markdown","223112ba":"markdown","c645cfc4":"markdown","6ea1a0c2":"markdown","0ef09ebb":"markdown","4e767c5a":"markdown","509a3e64":"markdown","2ed9d978":"markdown","3a46f1f1":"markdown","74723d91":"markdown","0abcf754":"markdown","312e2f4f":"markdown","50c3569a":"markdown","41b31bb3":"markdown","8d49a458":"markdown","e203e498":"markdown","5a3e3f2d":"markdown","547394f4":"markdown","15ede273":"markdown","e51a3b9f":"markdown","e22d82f6":"markdown","157768e5":"markdown","5fe089d0":"markdown","f6949b96":"markdown","f3b067cb":"markdown","64720b2a":"markdown","f9c98c47":"markdown"},"source":{"5fdec8f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","876110a6":"# import libraries\nimport pandas as pd\nimport numpy as np\nimport pandas_profiling\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport shap\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nfrom sklearn.metrics import  accuracy_score, roc_auc_score\nfrom sklearn.metrics import  classification_report, plot_confusion_matrix\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom category_encoders import OrdinalEncoder\n\nfrom xgboost import XGBClassifier\n\nimport eli5\nfrom eli5.sklearn import PermutationImportance\n\nfrom pdpbox.pdp import pdp_isolate, pdp_plot, pdp_interact, pdp_interact_plot","f5611f15":"raw_data = pd.read_csv('\/kaggle\/input\/heart-failure-prediction\/heart.csv')\n\nprint(raw_data.shape)\nprint('---')\n\nraw_data.head(3)","5a1fa349":"raw_data.info()","530cca24":"# Drop duplicates\nraw_data.drop_duplicates(inplace=True)\nraw_data.shape","dde7b6a5":"# check NaN\nraw_data.isna().sum()","33287146":"raw_data_corr = raw_data.corr()\n\nplot_corr = sns.clustermap(data = raw_data_corr,\n                           metric=\"correlation\",\n                           annot=True,\n                           cmap=\"YlGnBu\"\n                           )\n\nplot_corr.ax_heatmap.set_yticklabels(plot_corr.ax_heatmap.get_yticklabels(),\n                                     rotation=0)","ec6845b4":"# HeartDisease ratio\nfig = px.histogram(raw_data,\n                   x='HeartDisease',\n                   color='HeartDisease'\n                   )\n\nfig.update_layout(barmode=\"overlay\",\n                  bargap=0.1\n                  )\nfig.show()","d0b8e0d6":"# Ratio of Sex\nfig = px.histogram(raw_data,\n                   x='Sex',\n                   color='Sex',\n                   )\nfig.show()","5750ef19":"# Distribution of Age\nAge_data = pd.DataFrame(raw_data['HeartDisease'].groupby(raw_data['Age']).count()).reset_index()\nfig = px.bar(Age_data,\n             x='Age',\n             y='HeartDisease'\n             )\nfig.show()","65572027":"sns.pairplot(raw_data, diag_kind='kde', hue=\"HeartDisease\")","e010d478":"raw_data.info()","8a754408":"# categorical columns\nstr_col = raw_data.select_dtypes(include=\"object\").columns\nraw_data[str_col] = raw_data[str_col].astype(\"string\")\nstr_col = raw_data.select_dtypes(\"string\").columns.to_list()\nstr_col","2edae8f2":"# numerical columns\nnum_col = raw_data.select_dtypes(\"int64\").columns.to_list()\nnum_col = num_col + raw_data.select_dtypes(\"float64\").columns.to_list()\nnum_col.remove(\"HeartDisease\")\nnum_col","77c9bbd1":"target = \"HeartDisease\"","a1a3c56e":"raw_data[raw_data['Oldpeak']<0]","c64452c5":"raw_data.loc[raw_data['Oldpeak']<0,'Oldpeak'] = raw_data[raw_data['Oldpeak']<0]['Oldpeak']*(-1)\nraw_data[raw_data['Oldpeak']<0]","ff9fd5a1":"raw_data[raw_data['Cholesterol'] == 0]","ab0c8e5b":"for i in range(2):\n    raw_data.loc[(raw_data['Cholesterol'] == 0) & (raw_data.FastingBS == i), 'Cholesterol'] = raw_data[(raw_data['FastingBS'] == i) & (raw_data['Cholesterol'] != 0)]['Cholesterol'].median()","566980f8":"raw_data.loc[raw_data['RestingBP'] == 0, 'RestingBP'] = raw_data['RestingBP'].median()\nraw_data","3643c76e":"# one-hot encoding\nlogistic_data = pd.get_dummies(raw_data, columns=str_col)\nlogistic_data.head()","f7036401":"logistic_train_all, logistic_test = train_test_split(logistic_data, test_size=0.2, random_state=2)\nlogistic_train, logistic_val = train_test_split(logistic_train_all, test_size=0.2, random_state=2)\n\n# train_all\nlogistic_X_train_all = logistic_train_all.drop(target, axis=1)\nlogistic_y_train_all = logistic_train_all[target]\n\n# train\nlogistic_X_train = logistic_train.drop(target, axis=1)\nlogistic_y_train = logistic_train[target]\n\n# val\nlogistic_X_val = logistic_val.drop(target, axis=1)\nlogistic_y_val = logistic_val[target]\n\n# test\nlogistic_X_test = logistic_test.drop(target, axis=1)\nlogistic_y_test = logistic_test[target]","f88ef20f":"tree_data = pd.get_dummies(raw_data, columns=str_col)\ntree_data.head()","c496b587":"tree_train_all, tree_test = train_test_split(tree_data, test_size=0.2, random_state=2)\ntree_train, tree_val = train_test_split(tree_train_all, test_size=0.2, random_state=2)\nprint(\"tree_train shape: \", tree_train.shape)\nprint(\"tree_val shape: \", tree_val.shape)\nprint(\"tree_test shape: \", tree_test.shape)","a16b1acf":"# train_all\ntree_X_train_all = tree_train_all.drop(target, axis=1)\ntree_y_train_all = tree_train_all[target]\n\n# train\ntree_X_train = tree_train.drop(target, axis=1)\ntree_y_train = tree_train[target]\n\n# val\ntree_X_val = tree_val.drop(target, axis=1)\ntree_y_val = tree_val[target]\n\n# test\ntree_X_test = tree_test.drop(target, axis=1)\ntree_y_test = tree_test[target]","8e33a3f0":"base_train, base_test = train_test_split(raw_data, test_size=0.2, random_state=2)\nprint(\"base_train shape: \", base_train.shape)\nprint(\"base_test shape: \", base_test.shape)","9a3b2998":"# \ud0c0\uac9f \ub370\uc774\ud130 \ubc94\uc8fc\uc758 \ube44\uc728\uc744 \ud655\uc778\nbase_y_train = base_train[target]\nbase_y_train.value_counts(normalize=True)","9ef6ba93":"sns.countplot(x = base_y_train);","23a3961a":"# mode(): Return the highest frequency value in a Series. \ucd5c\ube48\uac12\nmajor = base_y_train.mode()[0]\n\n# \ud0c0\uac9f \uc0d8\ud50c \uc218 \ub9cc\ud07c 0\uc774 \ub2f4\uae34 \ub9ac\uc2a4\ud2b8\ub97c \ub9cc\ub4ed\ub2c8\ub2e4. \uae30\uc900\ubaa8\ub378\ub85c \uc608\uce21\nbase_y_train_pred = [major] * len(base_y_train)\n\n# \ucd5c\ub2e4 \ud074\ub798\uc2a4\uc758 \ube48\ub3c4\uac00 \uc815\ud655\ub3c4\uac00 \ub429\ub2c8\ub2e4.\nprint(\"training accuracy: \", accuracy_score(base_y_train, base_y_train_pred))\n\n# \uac80\uc99d\uc138\ud2b8 \uc5d0\uc11c\ub3c4 \uc815\ud655\ub3c4\ub97c \ud655\uc778\ud574 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nbase_y_test = base_test[target]\nbase_y_test_pred = [major] * len(base_y_test)\nprint(\"---\")\nprint(\"test\")\nbase_acc = accuracy_score(base_y_test, base_y_test_pred)\nbase_auc = roc_auc_score(base_y_test, base_y_test_pred)\nprint('accuracy_score :', base_acc)\nprint('auc_score :', base_auc)","c9bc9ea6":"logistic_pipe = make_pipeline(\n    StandardScaler(),\n    LogisticRegression(n_jobs=-1)\n)\n\nlogistic_pipe.fit(logistic_X_train, logistic_y_train)\nprint('Train Accuracy: ', logistic_pipe.score(logistic_X_train, logistic_y_train))\nprint('Val Accuracy: ', logistic_pipe.score(logistic_X_val, logistic_y_val))","406ca334":"# cross-validation\nlogistic_model = make_pipeline(\n    StandardScaler(),\n    LogisticRegression(n_jobs=-1)\n)\n\nk = 5\nlogistic_cv_scores = cross_val_score(logistic_model,\n                                     logistic_X_train_all,\n                                     logistic_y_train_all,\n                                     cv=k,\n                                     scoring='accuracy'\n                                     )\n\nlogistic_cv_scores.mean()","2b5faa4e":"GridSearchCV\nparam_grid = {\n    \"penalty\" : [\"l1\", \"l2\", \"elasticnet\"],\n    \"l1_ratio\" : np.linspace(0, 1, 20),\n    \"C\" : np.logspace(0, 10, 20)}\n\n\nlog_grid_model = LogisticRegression(solver='saga',\n                                    max_iter=5000,\n                                    class_weight = \"balanced\"\n                                    )\n\nlog_grid_model = GridSearchCV(log_grid_model,\n                              param_grid = param_grid,\n                              cv=3)","857f1c32":"# log_grid_model.fit(logistic_X_train_all, logistic_y_train_all)","d5abb07d":"# print(log_grid_model.best_params_)\n# print(log_grid_model.best_estimator_)","53057e65":"log_grid_model = LogisticRegression(class_weight='balanced', l1_ratio=0.0, max_iter=5000,\n                   penalty='l1', solver='saga')\nlog_grid_model.fit(logistic_X_train_all, logistic_y_train_all)","28422919":"# permutation importances\npermuter = PermutationImportance(\n    log_grid_model,                  # model\n    scoring='accuracy',              # metric\n    n_iter=5,                        # Using Other random seeds 5 times\n    random_state=2\n)\n\n# Actually, this process means rescoring process not fitting\npermuter.fit(logistic_X_train_all, logistic_y_train_all);","eeabcd81":"feature_names = logistic_X_train_all.columns.tolist()\npd.Series(permuter.feature_importances_, feature_names).sort_values(ascending=False)","8856dbb5":"# Checkig feature scores\neli5.show_weights(\n    permuter, \n    top=None,                      # You can set top n , if None, setting all features\n    feature_names=feature_names    # It has to be list type\n)","14edd51b":"minimum_importance = 0.001\nmask = permuter.feature_importances_ > minimum_importance\nfeatures = logistic_X_train_all.columns[mask]\nlog_X_train_selected = logistic_X_train_all[features]\nlog_X_test_selected = logistic_X_test[features]","ed125d24":"logistic_model = LogisticRegression(class_weight='balanced',\n                                    l1_ratio=0.0,\n                                    max_iter=5000,\n                                    penalty='l1',\n                                    solver='saga'\n                                    )\n\nlogistic_model.fit(log_X_train_selected, logistic_y_train_all);","1a1e8acc":"logistic_y_test_pred = logistic_model.predict(log_X_test_selected)\n\nlog_acc = accuracy_score(logistic_y_test, logistic_y_test_pred)\nlog_auc = roc_auc_score(logistic_y_test, logistic_y_test_pred)\nprint('accuracy_score :', log_acc)\nprint('auc_score :', log_auc)\nprint('---')\nprint(classification_report(logistic_y_test, logistic_y_test_pred))","bb8cf9a3":"# confusion matrix\nfig, ax = plt.subplots()\npcm = plot_confusion_matrix(logistic_model,\n                            log_X_test_selected,\n                            logistic_y_test,\n                            cmap=plt.cm.Blues,\n                            ax=ax);\nplt.title('Confusion matrix, n = {}'.format(len(logistic_y_test)), fontsize=15)\nplt.show()","70b0c625":"decision_pipe = make_pipeline(\n    DecisionTreeClassifier(random_state=2,\n                           min_samples_leaf=10,\n                           max_depth=6,\n                           criterion='entropy'\n                           )\n)\n\ndecision_pipe.fit(tree_X_train, tree_y_train)\nprint('Train Accuracy: ', decision_pipe.score(tree_X_train, tree_y_train))\nprint('Val Accuracy: ', decision_pipe.score(tree_X_val, tree_y_val))","d9b45a87":"# cross-validation\ndecision_model = DecisionTreeClassifier(random_state=2,\n                                        min_samples_leaf=10,\n                                        max_depth=6,\n                                        criterion='entropy'\n                                        )\n\nk = 5\ndecision_cv_scores = cross_val_score(decision_model,\n                                     tree_X_train_all,\n                                     tree_y_train_all,\n                                     cv=k,\n                                     scoring='accuracy'\n                                     )\n\ndecision_cv_scores.mean()","9e2f6166":"# GridSearchCV\nparam_grid = {\"splitter\":[\"best\", \"random\"],\n              \"max_features\":[None, 3, 5, 7],\n              \"max_depth\": [None, 3, 5, 7],\n              \"min_samples_leaf\": [2, 3, 5],\n              \"min_samples_split\": [3, 5, 7]}\n\nDT_grid_model = DecisionTreeClassifier(class_weight = \"balanced\", random_state=42)\n\nDT_grid_model = GridSearchCV(DT_grid_model,\n                            param_grid=param_grid,\n                            scoring='recall',\n                            n_jobs = -1,\n                            verbose = 2\n                            )","9d7aebe5":"# DT_grid_model.fit(tree_X_train_all, tree_y_train_all)","4899c391":"# print(DT_grid_model.best_params_)\n# print(DT_grid_model.best_estimator_)","fd59c129":"DT_grid_model = DecisionTreeClassifier(class_weight='balanced',\n                                       max_depth=5,\n                                       max_features=5,\n                                       min_samples_leaf=3,\n                                       min_samples_split=7,\n                                       random_state=42\n                                      )\n                    \nDT_grid_model.fit(tree_X_train_all, tree_y_train_all)","ee036fcb":"# permutation importances\npermuter = PermutationImportance(\n    DT_grid_model,\n    scoring='accuracy',\n    n_iter=5,\n    random_state=2\n)\n\npermuter.fit(tree_X_train_all, tree_y_train_all);","f5e354f2":"feature_names = tree_X_train_all.columns.tolist()\npd.Series(permuter.feature_importances_, feature_names).sort_values(ascending=False)","17ea48ae":"eli5.show_weights(\n    permuter, \n    top=None,\n    feature_names=feature_names\n)","be0efcb3":"minimum_importance = 0.001\nmask = permuter.feature_importances_ > minimum_importance\nfeatures = tree_X_train_all.columns[mask]\ntree_X_train_selected = tree_X_train_all[features]\ntree_X_test_selected = tree_X_test[features]","e06dc63e":"DT_model = DT_grid_model\n\nDT_model.fit(tree_X_train_selected, tree_y_train_all);","b2c6740b":"decision_y_test_pred = DT_model.predict(tree_X_test_selected)\n\ndecision_acc = accuracy_score(tree_y_test, decision_y_test_pred)\ndecision_auc = roc_auc_score(tree_y_test, decision_y_test_pred)\nprint('accuracy_score :', decision_acc)\nprint('auc_score :', decision_auc)\nprint('---')\nprint(classification_report(tree_y_test, decision_y_test_pred))","025df443":"# confusion matrix\nfig, ax = plt.subplots()\npcm = plot_confusion_matrix(DT_model,\n                            tree_X_test_selected,\n                            tree_y_test,\n                            cmap=plt.cm.Blues,\n                            ax=ax);\nplt.title('Confusion matrix, n = {}'.format(len(tree_y_test)), fontsize=15)\nplt.show()","c3682d03":"RF_pipe = make_pipeline(\n    RandomForestClassifier(n_jobs=-1,\n                           random_state=2,\n                           min_samples_leaf=10,\n                           max_depth=6,\n                           oob_score=True\n                           )\n)\n\nRF_pipe.fit(tree_X_train, tree_y_train)\nprint('Train Accuracy: ', RF_pipe.score(tree_X_train, tree_y_train))\nprint('Val Accuracy: ', RF_pipe.score(tree_X_val, tree_y_val))","03639910":"# cross-validation\nRF_model = RandomForestClassifier(n_jobs=-1,\n                                  random_state=2,\n                                  min_samples_leaf=10,\n                                  max_depth=6,\n                                  oob_score=True\n                                  )\n\nk = 5\nRF_cv_scores = cross_val_score(RF_model,\n                                     tree_X_train_all,\n                                     tree_y_train_all,\n                                     cv=k,\n                                     scoring='accuracy'\n                                     )\n\nRF_cv_scores.mean()","a05357b0":"# GridSearchCV\nparam_grid = {'n_estimators':[50, 100],\n             'max_features':[2, 3, 4],\n             'max_depth':[3, 5, 7],\n             'min_samples_split':[2, 5, 8]}\n\nRF_grid_model = RandomForestClassifier(random_state=11)\n\nRF_grid_model = GridSearchCV(estimator=RF_grid_model, \n                             param_grid=param_grid, \n                             scoring = \"recall\", \n                             n_jobs = -1,\n                             verbose = 2\n                             )","5e102d25":"# RF_grid_model.fit(tree_X_train_all, tree_y_train_all)","16c3508d":"# print(RF_grid_model.best_params_)\n# print(RF_grid_model.best_estimator_)","fef3c089":"RF_grid_model = RandomForestClassifier(max_depth=7,\n                                       max_features=2,\n                                       min_samples_split=8,\n                                       random_state=11\n                                      )\n\nRF_grid_model.fit(tree_X_train_all, tree_y_train_all)","1039d599":"# permutation importances\npermuter = PermutationImportance(\n    RF_grid_model,\n    scoring='accuracy',\n    n_iter=5,\n    random_state=2\n)\n\npermuter.fit(tree_X_train_all, tree_y_train_all);","53db9219":"feature_names = tree_X_train_all.columns.tolist()\npd.Series(permuter.feature_importances_, feature_names).sort_values(ascending=False)","b3df7601":"eli5.show_weights(\n    permuter, \n    top=None,\n    feature_names=feature_names\n)","b9082315":"minimum_importance = 0.001\nmask = permuter.feature_importances_ > minimum_importance\nfeatures = tree_X_train_all.columns[mask]\ntree_X_train_selected = tree_X_train_all[features]\ntree_X_test_selected = tree_X_test[features]","819a05a0":"RF_model = RF_grid_model\n\nRF_model.fit(tree_X_train_selected, tree_y_train_all);","2a79de98":"RF_y_test_pred = RF_model.predict(tree_X_test_selected)\n\nRF_acc = accuracy_score(tree_y_test, RF_y_test_pred)\nRF_auc = roc_auc_score(tree_y_test, RF_y_test_pred)\nprint('accuracy_score :', RF_acc)\nprint('auc_score :', RF_auc)\nprint('---')\nprint(classification_report(tree_y_test, RF_y_test_pred))","5d9b3ec4":"# confusion matrix\nfig, ax = plt.subplots()\npcm = plot_confusion_matrix(RF_model,\n                            tree_X_test_selected,\n                            tree_y_test,\n                            cmap=plt.cm.Blues,\n                            ax=ax);\nplt.title('Confusion matrix, n = {}'.format(len(tree_y_test)), fontsize=15)\nplt.show()","de627c5e":"Ada_pipe = make_pipeline(\n    AdaBoostClassifier(random_state=2)\n)\n\nAda_pipe.fit(tree_X_train, tree_y_train)\nprint('Train Accuracy: ', Ada_pipe.score(tree_X_train, tree_y_train))\nprint('Val Accuracy: ', Ada_pipe.score(tree_X_val, tree_y_val))","f888ff1f":"# cross-validation\nAda_model = AdaBoostClassifier(random_state=2)\n\nk = 5\nAda_cv_scores = cross_val_score(Ada_model,\n                                tree_X_train_all,\n                                tree_y_train_all,\n                                cv=k,\n                                scoring='accuracy'\n                                )\n\nAda_cv_scores.mean()","a44d24a7":"# GridSearchCV\nparam_grid = {\"n_estimators\": [15, 20, 50],\n              \"learning_rate\": [0.5, 0.6, 0.7]}\n\nAda_grid_model = AdaBoostClassifier(random_state=22)\nAda_grid_model = GridSearchCV(Ada_grid_model,\n                              param_grid=param_grid,\n                              scoring= 'f1'\n                              )","f66c348c":"# Ada_grid_model.fit(tree_X_train_all, tree_y_train_all)","50633229":"# print(Ada_grid_model.best_params_)\n# print(Ada_grid_model.best_estimator_)","e45828b9":"Ada_grid_model = AdaBoostClassifier(learning_rate=0.6,\n                                    n_estimators=20,\n                                    random_state=22\n                                   )\n\nAda_grid_model.fit(tree_X_train_all, tree_y_train_all)","60ebf97d":"# permutation importances\npermuter = PermutationImportance(\n    Ada_grid_model,\n    scoring='accuracy',\n    n_iter=5,\n    random_state=2\n)\n\npermuter.fit(tree_X_train_all, tree_y_train_all);","070e343d":"feature_names = tree_X_train_all.columns.tolist()\npd.Series(permuter.feature_importances_, feature_names).sort_values(ascending=False)","db7fc172":"eli5.show_weights(\n    permuter, \n    top=None,\n    feature_names=feature_names\n)","c74ae1ea":"minimum_importance = 0.001\nmask = permuter.feature_importances_ > minimum_importance\nfeatures = tree_X_train_all.columns[mask]\ntree_X_train_selected = tree_X_train_all[features]\ntree_X_test_selected = tree_X_test[features]","e48ccb47":"Ada_model = Ada_grid_model\n\nAda_model.fit(tree_X_train_selected, tree_y_train_all)","febd3f7f":"Ada_y_test_pred = Ada_model.predict(tree_X_test_selected)\n\nAda_acc = accuracy_score(tree_y_test, Ada_y_test_pred)\nAda_auc = roc_auc_score(tree_y_test, Ada_y_test_pred)\nprint('accuracy_score :', Ada_acc)\nprint('auc_score :', Ada_auc)\nprint('---')\nprint(classification_report(tree_y_test, Ada_y_test_pred))","705a6640":"# confusion matrix\nfig, ax = plt.subplots()\npcm = plot_confusion_matrix(Ada_model,\n                            tree_X_test_selected,\n                            tree_y_test,\n                            cmap=plt.cm.Blues,\n                            ax=ax);\nplt.title('Confusion matrix, n = {}'.format(len(tree_y_test)), fontsize=15)\nplt.show()","74d4a860":"Grad_pipe = make_pipeline(\n    GradientBoostingClassifier(random_state=2)\n)\n\nGrad_pipe.fit(tree_X_train, tree_y_train)\nprint('Train Accuracy: ', Grad_pipe.score(tree_X_train, tree_y_train))\nprint('Vak Accuracy: ', Grad_pipe.score(tree_X_val, tree_y_val))","455de061":"# cross-validation\nGrad_model = GradientBoostingClassifier(random_state=2)\n\nk = 5\nGrad_cv_scores = cross_val_score(Grad_model,\n                                tree_X_train_all,\n                                tree_y_train_all,\n                                cv=k,\n                                scoring='accuracy'\n                                )\n\nGrad_cv_scores.mean()","900a1081":"# GridSearchCV\nparam_grid = {\"n_estimators\":[100, 200, 300],\n             \"subsample\":[0.5, 1],\n             \"max_features\" : [None, 2, 3, 4],\n             \"learning_rate\": [0.2, 0.5, 0.6, 0.75, 0.85, 1.0, 1.25, 1.5]}\n\nGrad_grid_model = GradientBoostingClassifier(random_state=42)\n\nGrad_grid_model = GridSearchCV(Grad_grid_model,\n                               param_grid=param_grid,\n                               scoring = \"f1\",\n                               verbose=2,\n                               n_jobs = -1\n                               )","fefbfdeb":"# Grad_grid_model.fit(tree_X_train_all, tree_y_train_all)","8d434a3f":"# print(Grad_grid_model.best_params_)\n# print(Grad_grid_model.best_estimator_)","3745b452":"Grad_grid_model = GradientBoostingClassifier(learning_rate=0.2,\n                                             max_features=3,\n                                             random_state=42,\n                                             subsample=1\n                                            )\n\nGrad_grid_model.fit(tree_X_train_all, tree_y_train_all)","c056ac43":"# permutation importances\npermuter = PermutationImportance(\n    Grad_grid_model,\n    scoring='accuracy',\n    n_iter=5,\n    random_state=2\n)\n\npermuter.fit(tree_X_train_all, tree_y_train_all);","1cf05e5f":"feature_names = tree_X_train_all.columns.tolist()\npd.Series(permuter.feature_importances_, feature_names).sort_values(ascending=False)","36990b0b":"eli5.show_weights(\n    permuter, \n    top=None,\n    feature_names=feature_names\n)","8ad74e57":"minimum_importance = 0.01\nmask = permuter.feature_importances_ > minimum_importance\nfeatures = tree_X_train_all.columns[mask]\ntree_X_train_selected = tree_X_train_all[features]\ntree_X_test_selected = tree_X_test[features]","d66273ae":"Grad_model = Grad_grid_model\n\nGrad_model.fit(tree_X_train_selected, tree_y_train_all);","ac2803ee":"Grad_y_test_pred = Grad_model.predict(tree_X_test_selected)\n\nGrad_acc = accuracy_score(tree_y_test, Grad_y_test_pred)\nGrad_auc = roc_auc_score(tree_y_test, Grad_y_test_pred)\nprint('accuracy_score :', Grad_acc)\nprint('auc_score :', Grad_auc)\nprint('---')\nprint(classification_report(tree_y_test, Grad_y_test_pred))","2ddafb24":"# confusion matrix\nfig, ax = plt.subplots()\npcm = plot_confusion_matrix(Grad_model,\n                            tree_X_test_selected,\n                            tree_y_test,\n                            cmap=plt.cm.Blues,\n                            ax=ax);\nplt.title('Confusion matrix, n = {}'.format(len(tree_y_test)), fontsize=15)\nplt.show()","c814ed1a":"xgb_pipe = make_pipeline(\n    XGBClassifier(random_state=2)\n)\n\nxgb_pipe.fit(tree_X_train, tree_y_train)\nprint('Train Accuracy: ', xgb_pipe.score(tree_X_train, tree_y_train))\nprint('Val Accuracy: ', xgb_pipe.score(tree_X_val, tree_y_val))","a858067b":"# cross-validation\nxgb_model = XGBClassifier(random_state=2)\n\nk = 5\nxgb_cv_scores = cross_val_score(xgb_model,\n                                tree_X_train_all,\n                                tree_y_train_all,\n                                cv=k,\n                                scoring='accuracy'\n                                )\n\nxgb_cv_scores.mean()","faa9d31b":"# GridSearchCV\nparam_grid = {\"n_estimators\":[100, 200],\n              \"max_depth\":[4, 5, 6], \n              \"learning_rate\": [0.1, 0.3],\n              \"subsample\":[0.5, 1],\n              \"colsample_bytree\":[0.5, 1]}\n\nxgb_grid_model = XGBClassifier(random_state=42)\nxgb_grid_model = GridSearchCV(xgb_grid_model,\n                              param_grid=param_grid,\n                              scoring = \"f1\",\n                              verbose=2,\n                              n_jobs = -1\n                              )","4eae9f74":"# xgb_grid_model.fit(tree_X_train_all, tree_y_train_all)","08445e4a":"# print(xgb_grid_model.best_params_)\n# print(xgb_grid_model.best_estimator_)","dc531901":"xgb_grid_model = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.5,\n              enable_categorical=False, gamma=0, gpu_id=-1,\n              importance_type=None, interaction_constraints='',\n              learning_rate=0.1, max_delta_step=0, max_depth=5,\n              min_child_weight=1, missing=np.nan, monotone_constraints='()',\n              n_estimators=100, n_jobs=12, num_parallel_tree=1,\n              predictor='auto', random_state=42, reg_alpha=0, reg_lambda=1,\n              scale_pos_weight=1, subsample=1, tree_method='exact',\n              validate_parameters=1, verbosity=None)\n\nxgb_grid_model.fit(tree_X_train_all, tree_y_train_all)","e2f54497":"# permutation importances\npermuter = PermutationImportance(\n    xgb_grid_model,\n    scoring='accuracy',\n    n_iter=5,\n    random_state=2\n)\n\npermuter.fit(tree_X_train_all, tree_y_train_all);","802af029":"feature_names = tree_X_train_all.columns.tolist()\npd.Series(permuter.feature_importances_, feature_names).sort_values(ascending=False)","899bb5e0":"eli5.show_weights(\n    permuter, \n    top=None,\n    feature_names=feature_names\n)","aa6c4fda":"minimum_importance = 0.0\nmask = permuter.feature_importances_ > minimum_importance\nfeatures = tree_X_train_all.columns[mask]\ntree_X_train_selected = tree_X_train_all[features]\ntree_X_test_selected = tree_X_test[features]","6e8a9173":"xgb_model = xgb_grid_model\n\nxgb_model.fit(tree_X_train_selected, tree_y_train_all);","c369d32f":"xgb_y_test_pred = xgb_model.predict(tree_X_test_selected)\n\nxgb_acc = accuracy_score(tree_y_test, xgb_y_test_pred)\nxgb_auc = roc_auc_score(tree_y_test, xgb_y_test_pred)\nprint('accuracy_score :', xgb_acc)\nprint('auc_score :', xgb_auc)\nprint('---')\nprint(classification_report(tree_y_test, xgb_y_test_pred))","900d7efb":"# confusion matrix\nfig, ax = plt.subplots()\npcm = plot_confusion_matrix(xgb_model,\n                            tree_X_test_selected,\n                            tree_y_test,\n                            cmap=plt.cm.Blues,\n                            ax=ax);\nplt.title('Confusion matrix, n = {}'.format(len(tree_y_test)), fontsize=15)\nplt.show()","4219095d":"compare_models = pd.DataFrame({\"Model\": [\"Baseline\", \"Logistic Regression\", \"Decision Tree\", \"Random Forest\", \"AdaBoost\", \"GradientBoost\", \"XGBoost\"],\n                               \"Accuracy\": [base_acc, log_acc, decision_acc, RF_acc, Ada_acc, Grad_acc, xgb_acc],\n                               \"ROC_AUC\": [base_auc, log_auc, decision_auc, RF_auc, Ada_auc, Grad_auc, xgb_auc]})","a60260fa":"plt.figure(figsize=(14,14))\n\ndef labels(ax):\n    for p in ax.patches:\n        width = p.get_width()\n        ax.text(width,\n                p.get_y() + p.get_height() \/ 2,\n                '{:1.4f}'.format(width),\n                ha = 'left',\n                va = 'center'\n                )\n\nplt.subplot(211)\ncompare = compare_models.sort_values(by=\"Accuracy\", ascending=False)\nax=sns.barplot(x=\"Accuracy\", y=\"Model\", data=compare)\nlabels(ax)\n\nplt.subplot(212)\ncompare = compare_models.sort_values(by=\"ROC_AUC\", ascending=False)\nax=sns.barplot(x=\"ROC_AUC\", y=\"Model\", data=compare)\nlabels(ax)","e3a98d4a":"xgb_model","212df4da":"tree_X_test_selected.head(3)","cb7f782b":"tree_X_test_selected.columns","62647534":"# Image Quality adjusting\nplt.rcParams['figure.dpi'] = 80\n\n# For 4 features\nfeatures = tree_X_test_selected.columns\n\nfor i in features:\n    isolated = pdp_isolate(\n        model = xgb_model, \n        dataset = tree_X_test_selected, \n        model_features = tree_X_test_selected.columns,\n        feature = i\n        )\n    pdp_plot(isolated, feature_name=i);","c71edf29":"features","42c5c8db":"interaction = pdp_interact(\n    model=xgb_model, \n    dataset=tree_X_test_selected,\n    model_features=tree_X_test_selected.columns, \n    features= [features[0], features[3]]\n)","b37e482a":"pdp_interact_plot(interaction, plot_type='grid', \n                  feature_names=[features[0], features[3]]);","33baf1b2":"explainer = shap.TreeExplainer(xgb_model)","f1b70950":"row = tree_X_test_selected.iloc[[1]]\nrow","6fbff8ed":"shap_values = explainer.shap_values(row)","608ca71e":"shap.initjs()\nshap.force_plot(\n    base_value=explainer.expected_value, \n    shap_values=shap_values,\n    features=row\n)","d954dc02":"row = tree_X_test_selected.iloc[[2]]\nrow","5857d7c2":"shap_values = explainer.shap_values(row)\nshap.initjs()\nshap.force_plot(\n    base_value=explainer.expected_value, \n    shap_values=shap_values,\n    features=row\n)","bb7720eb":"### Draw SHAP plots ###\nshap_values = explainer.shap_values(tree_X_test_selected)\nshap.summary_plot(shap_values, tree_X_test_selected)","8e8359d9":"shap.summary_plot(shap_values, tree_X_test_selected, plot_type=\"violin\")","c9c92abb":"shap.summary_plot(shap_values, tree_X_test_selected, plot_type=\"bar\")","dbb07f4d":"## 3.2 Non-Tree Model","2b97ab3c":"### 1. Non-tree Model","9fba6808":"### 3.3.3 AdaBoosting","d950f2f5":"#### To find Best Hyperparameters, I did GridSearchCV","000774c5":"**You can find 'Oldpeak' (+), 'Cholesterol', 'MaxHR' (-)**","ef921aab":"### Cholesterol cannot be 0\n### so, Cholesterol has high relation to FastingBS\n### made 0 values to median value","0e49d7b5":"## 3. Encoding","1683febe":"# 1. EDA & Data Pre-Processing","fe38793d":"I tried to seperate Non-tree model & Tree-model\n\nSo I once tried to do One-hot Encoding for Non-tree model and Ordinal Encoding( or target Encoding ) for Tree model\n\nBecause Ordinal Encoding returns the value by category values \"1, 2, 3, 4\" like this.\n\nBut, it was easy to interprete model by doing one-hot encoding for both so I did one-hot encoding to both.","9e04f202":"### Correlations","223112ba":"### Oldpeak value cannot be (-)\n### so, made it to (+)","c645cfc4":"#### GridSearchCV Result in Local\n> class_weight='balanced', l1_ratio=0.0, max_iter=5000, penalty='l1', solver='saga'","6ea1a0c2":"### Cholesterol cannot be 0\n### so, made 0 values to median value","0ef09ebb":"#### GridSearchCV result in Local\n\n> DecisionTreeClassifier(class_weight='balanced', max_depth=5, max_features=5,\n                       min_samples_leaf=3, min_samples_split=7,\n                       random_state=42)","4e767c5a":"### 2. Tree Model","509a3e64":"### 3.3.4 GradientBoosting","2ed9d978":"#### To find Best Hyperparameters, I did GridSearchCV in Local","3a46f1f1":"#### GridsearchCV result in local\n\n> GradientBoostingClassifier(learning_rate=0.2, max_features=3, random_state=42,\n                           subsample=1)","74723d91":"## Comparison Models","0abcf754":"# 3. Model","312e2f4f":"## 3.1 Baseline Model","50c3569a":"# Import Libraries","41b31bb3":"#### GridSearchCV result in Local\n\n> XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.5,\n              enable_categorical=False, gamma=0, gpu_id=-1,\n              importance_type=None, interaction_constraints='',\n              learning_rate=0.1, max_delta_step=0, max_depth=5,\n              min_child_weight=1, missing=nan, monotone_constraints='()',\n              n_estimators=100, n_jobs=12, num_parallel_tree=1,\n              predictor='auto', random_state=42, reg_alpha=0, reg_lambda=1,\n              scale_pos_weight=1, subsample=1, tree_method='exact',\n              validate_parameters=1, verbosity=None)","8d49a458":"# 4. Interpreting Models","e203e498":"### 3.3.5 xgboost","5a3e3f2d":"#### GridSearchCV result in Local\n\n> AdaBoostClassifier(learning_rate=0.6, n_estimators=20, random_state=22)","547394f4":"#### 3.3.2 Random Forests","15ede273":"#### < Models >\n1. Baseline Model\n2. Logistic Model\n3. Decision Tree Model\n4. Random Forest Model\n5. Adaboost Model\n6. Gradient Model\n7. Xgboost Model","e51a3b9f":"### 3.2.1 Logistic Regression","e22d82f6":"### 3.3.1 Decision Tree","157768e5":"#### GridSearchCV result in local\n\n> RandomForestClassifier(max_depth=7, max_features=2, min_samples_split=8,\n                       random_state=11)","5fe089d0":"## 3.3 Tree Model","f6949b96":"### load dataset","f3b067cb":"#### GridSearchCV took too long in Kaggle, I did this in local","64720b2a":"## 2. Data Pre-processing","f9c98c47":"## 1.1 EDA"}}