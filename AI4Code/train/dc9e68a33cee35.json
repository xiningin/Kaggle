{"cell_type":{"20beb20b":"code","d735114d":"code","512b0bc9":"code","d1c16f22":"code","8f9452ce":"code","c627363a":"code","ab4de428":"code","4d1061d9":"code","7f4d1a13":"code","0da5d2b0":"code","c3cb0abc":"code","71fc81c9":"code","dd3afa8a":"code","4fe273b7":"code","f1061aa5":"code","f4b75770":"code","a9c22201":"code","a25fd665":"code","cfffec65":"code","1bed1892":"code","6d9ea20c":"code","4cbb7637":"code","25120228":"code","271c55f4":"code","c98f4bbd":"code","2f46abcc":"code","14d850f2":"code","fb244702":"code","ff551ec9":"code","d9a06bc3":"code","7d95b4bb":"code","96f61df1":"code","f7011d68":"code","05878231":"code","16add3b1":"code","2f8aa577":"code","af56a2a0":"code","ce98465b":"code","0b17b62a":"code","5adbe1f4":"code","41025b51":"code","02ffa483":"code","e16b5093":"code","d0d8f677":"code","ba081d7b":"code","fcf7fe25":"code","104efb93":"code","5954d367":"code","c811e6a6":"code","d3028dad":"code","41010443":"code","22557ad8":"code","97bcbbd7":"code","e440b2f9":"code","6065dfc8":"code","a3e13221":"code","82096256":"code","b6c3b1ea":"code","11cb32f3":"code","8905887c":"code","a5a77e92":"code","ec9acf83":"code","0cb1611d":"code","362258ea":"code","cc6d67b9":"code","0f9482a6":"code","b5cc4b0c":"code","f4c92f34":"code","ef098c0f":"code","0c222cb2":"code","d532a4e4":"code","666c919b":"code","60ba1f7d":"code","bb44acf6":"code","2a9896a4":"code","73f2764a":"code","eef021ec":"code","e5c53dbc":"code","de3cf6e3":"code","e433546c":"code","68780abb":"code","3c302c47":"code","bfbb3ce0":"code","105f24a7":"code","d1b326e3":"code","1e0a645d":"code","ac3648f9":"code","5bd4de89":"code","8ad94501":"code","d65d1917":"code","174a699a":"code","3a0c6573":"code","fef3da31":"code","2e08762d":"code","b56561f7":"code","4e6c9b8f":"code","473e75fd":"code","26e66cd6":"code","960e7886":"code","c2057828":"code","8a0fe360":"code","411078de":"code","91ba3e92":"code","d05dd22f":"code","c8ccd4f2":"code","1e1fc0bc":"code","aa91bf62":"code","39fb4613":"code","59117af6":"code","aa8d0883":"code","a32d6cc9":"code","1fa6e6cd":"code","2402a682":"code","0894de50":"code","ad329c64":"code","c930a935":"code","baa442e7":"code","6cc84fea":"code","7d9bf5f0":"code","2aeea693":"code","18408cbc":"code","aa6d8984":"code","da0fdce5":"code","61f1de12":"code","f52d5804":"code","6be604bb":"code","eeff489a":"code","aba08ab6":"code","5f7419bc":"code","7af740f6":"code","9c89e1a4":"code","8e7cbccd":"code","0f37eca2":"code","dee98b3f":"code","e4b5b73e":"code","ba6b7a1a":"code","d71278c7":"code","b118b087":"code","1ee04b39":"code","674be69c":"code","eb240655":"code","e2c8828b":"code","ff1947b6":"code","a9330645":"code","618553e7":"code","fe5906ae":"code","e84736ae":"code","1229671c":"code","65fb6dbd":"code","0ca57c18":"code","4206913d":"code","d561d545":"code","80174713":"code","2cac5d16":"code","9f3255d9":"code","e4c9c434":"code","000cdb6d":"code","568468df":"code","156fa679":"code","a23c6944":"code","4e4fb669":"code","682fcf9d":"code","de7b19c3":"code","af0a74ad":"code","bf3fc487":"code","4ceb5aec":"code","93548bbc":"code","fec64152":"code","7367684f":"code","607e7fd0":"code","71497fec":"code","c8be7648":"code","79bb64ae":"code","6bc42fe9":"markdown","8028ba91":"markdown","cdf60628":"markdown","f07c9c27":"markdown","9d7bfc39":"markdown","a5a4d13c":"markdown","72b710ba":"markdown","5c230826":"markdown","8625e646":"markdown","1783060e":"markdown","0ea17298":"markdown","df9b30c6":"markdown","b413c79f":"markdown","45158716":"markdown","5916a418":"markdown","a650612a":"markdown","8e6b211c":"markdown","fc3c83f2":"markdown","9ce727bd":"markdown","93aaeaba":"markdown","58956553":"markdown","e13c1bed":"markdown","e2a1b625":"markdown","ddd32efd":"markdown","c774c160":"markdown","0aae15d8":"markdown","03a975d2":"markdown","afdefbf0":"markdown","e921068c":"markdown","b40f7295":"markdown"},"source":{"20beb20b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d735114d":"import matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format='retina'\nplt.style.use('ggplot')\n\nimport seaborn as sns\nfrom datetime import datetime","512b0bc9":"df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')","d1c16f22":"df.head()","8f9452ce":"df.info()","c627363a":"countries = df.groupby(['ObservationDate','Country\/Region'])[['Confirmed','Deaths','Recovered']].sum()","ab4de428":"countries.reset_index(inplace=True)","4d1061d9":"countries['Country\/Region'].value_counts()","7f4d1a13":"provinces = df.groupby(['ObservationDate','Country\/Region', 'Province\/State'])[['Confirmed','Deaths','Recovered']].sum()","0da5d2b0":"provinces.reset_index(inplace=True)","c3cb0abc":"countries.head()","71fc81c9":"def feature_eng(dataset):\n    \n    dataset['Active_Cases'] = [ c-r-d for c,r,d in zip(dataset.Confirmed,dataset.Recovered, dataset.Deaths)]\n\n    dataset['Death_Proportion'] = [ (d\/c)*100 if c != 0 and d !=0 else 0 for c,d in zip(dataset.Confirmed, dataset.Deaths)]\n    \n    dataset['Recover_Proportion'] = [ (r\/c)*100 if c != 0 and r !=0 else 0 for c,r in zip(dataset.Confirmed, dataset.Recovered)]\n    \n    dataset.reset_index(inplace=True)\n    \n    return dataset\n\n","dd3afa8a":"countries = feature_eng(countries)","4fe273b7":"countries.head()","f1061aa5":"countries.tail()","f4b75770":"# As I'd identified that some data are with different pattern, I start to see the length of data field to adjust it after that\ncountries['dt_len'] = [len(d) for d in countries.ObservationDate]","a9c22201":"# Adjusting years that has different pattern\ncountries['Date'] = [dt+ '20' if l<10 else dt for dt,l in zip(countries.ObservationDate, countries.dt_len)]","a25fd665":"ranking = countries.groupby('Country\/Region')[['Deaths','Confirmed','Recovered','Active_Cases']].max()","cfffec65":"def rankings(dataset, nivel='top'):\n    \n    '''\n    nivel (str) -> 'top' or 'bottom'\n    '''\n    \n    if nivel=='top':\n        \n        print('Top 10 Ranking With Mainland China')\n\n        fig,ax = plt.subplots(2,2)\n\n        dataset.sort_values(by='Confirmed',ascending=False)['Confirmed'][:10].plot(kind='barh',color='blue', ax=ax[0][0], figsize=(20,8))\n        ax[0][0].title.set_text('Confirmed Cases')\n        dataset.sort_values(by='Deaths',ascending=False)['Deaths'][:10].plot(kind='barh',color='red', ax=ax[0][1])\n        ax[0][1].title.set_text('Deaths Cases')\n        dataset.sort_values(by='Recovered',ascending=False)['Recovered'][:10].plot(kind='barh',color='green', ax=ax[1][0])\n        ax[1][0].title.set_text('Recovered Cases')\n        dataset.sort_values(by='Active_Cases',ascending=False)['Active_Cases'][:10].plot(kind='barh',color='gold', ax=ax[1][1])\n        ax[1][1].title.set_text('Active Cases')\n\n        plt.show()\n\n\n        print('Top 10 Ranking Without Mainland China')\n\n        fig,ax = plt.subplots(2,2)\n\n        dataset[dataset.index != 'Mainland China'].sort_values(by='Confirmed',ascending=False)['Confirmed'][:10].plot(kind='barh',color='blue', ax=ax[0][0], figsize=(20,8))\n        ax[0][0].title.set_text('Confirmed Cases')\n        dataset[dataset.index != 'Mainland China'].sort_values(by='Deaths',ascending=False)['Deaths'][:10].plot(kind='barh',color='red', ax=ax[0][1])\n        ax[0][1].title.set_text('Deaths Cases')\n        dataset[dataset.index != 'Mainland China'].sort_values(by='Recovered',ascending=False)['Recovered'][:10].plot(kind='barh',color='green', ax=ax[1][0])\n        ax[1][0].title.set_text('Recovered Cases')\n        dataset[dataset.index != 'Mainland China'].sort_values(by='Active_Cases',ascending=False)['Active_Cases'][:10].plot(kind='barh',color='gold', ax=ax[1][1])\n        ax[1][1].title.set_text('Active Cases')\n        plt.show()\n        \n    else:\n        \n        print('Rankings')\n\n        fig,ax = plt.subplots(2,2)\n\n        dataset[(dataset.Confirmed >= 50) ].sort_values(by='Confirmed',ascending=True)['Confirmed'][:10].plot(kind='barh', ax=ax[0][0], figsize=(20,8))\n        ax[0][0].title.set_text('Confirmed More than 50 Cases')\n        dataset[(dataset.Deaths >= 20) ].sort_values(by='Deaths',ascending=True)['Deaths'][:10].plot(kind='barh',color='red', ax=ax[0][1])\n        ax[0][1].title.set_text('More than 20 Deaths Cases')\n        dataset[(dataset.Recovered >= 50) ].sort_values(by='Recovered',ascending=True)['Recovered'][:10].plot(kind='barh',color='green', ax=ax[1][0])\n        ax[1][0].title.set_text('More Than 50 Recovered Cases')\n        dataset[(dataset.Active_Cases >= 30) ].sort_values(by='Active_Cases',ascending=True)['Active_Cases'][:10].plot(kind='barh',color='gold', ax=ax[1][1])\n        ax[1][1].title.set_text('More Than 30 Active Cases')\n\n        plt.show()\n\n\n        print('Bottom 10 Ranking Different of 0')\n\n        fig,ax = plt.subplots(2,2)\n\n        dataset[(dataset.Confirmed != 0) ].sort_values(by='Confirmed',ascending=True)['Confirmed'][:10].plot(kind='barh', ax=ax[0][0], figsize=(20,8))\n        ax[0][0].title.set_text('Confirmed Cases')\n        dataset[(dataset.Deaths != 0)].sort_values(by='Deaths',ascending=True)['Deaths'][:10].plot(kind='barh',color='red', ax=ax[0][1])\n        ax[0][1].title.set_text('Deaths Cases')\n        dataset[(dataset.Recovered != 0)].sort_values(by='Recovered',ascending=True)['Recovered'][:10].plot(kind='barh',color='green', ax=ax[1][0])\n        ax[1][0].title.set_text('Recovered Cases')\n        dataset[(dataset.Active_Cases != 0)].sort_values(by='Active_Cases',ascending=True)['Active_Cases'][:10].plot(kind='barh',color='gold', ax=ax[1][1])\n        ax[1][1].title.set_text('Active Cases')\n        plt.show()\n\n    ","1bed1892":"rankings(ranking)","6d9ea20c":"rankings(ranking, nivel='bottom')","4cbb7637":"ranking.reset_index(inplace=True)","25120228":"proportion_rank = feature_eng(ranking)\nproportion_rank.drop(columns='index', inplace=True)","271c55f4":"proportion_rank.sort_values(by=['Death_Proportion','Recover_Proportion'],ascending=False)[['Country\/Region','Death_Proportion','Recover_Proportion']][:50]\\\n.plot(x='Country\/Region',kind='bar', figsize=(20,5))\nplt.title('Death x Recover Proportion look in each country')\nplt.show()","c98f4bbd":"def country_view(dataset, country):\n    \n    ds = dataset[dataset['Country\/Region']== country]\n    \n    print(country + \" Behavior from: \" + np.min(ds.Date) + ' to: '+ np.max(ds.Date))\n    \n    fig,ax = plt.subplots(2,2)\n\n    ds[['Date','Confirmed']].plot(x='Date', figsize=(20,8),\\\n                                                                                                                    ax=ax[0][0])\n    ax[0][0].title.set_text('Confirmed Cases')\n\n    ds[['Date','Active_Cases']].plot(x='Date', figsize=(20,8),color='gold' ,\\\n                                                                                                                    ax=ax[0][1])\n    ax[0][1].title.set_text('Active Cases')\n\n    ds[['Date','Recover_Proportion']].plot(x='Date', figsize=(20,8),color='green',\\\n                                                                                                                    ax=ax[1][0])\n    ax[1][0].title.set_text('\\nRecovered Proportion Cases')\n\n    ds[['Date','Death_Proportion']].plot(x='Date', figsize=(20,8),color='red',\\\n                                                                                                                    ax=ax[1][1])\n    ax[1][1].title.set_text('Death Proportion Cases')\n\n    plt.show()\n    \n    ","2f46abcc":"country_view(countries, 'Mainland China')","14d850f2":"country_view(countries, 'Italy')","fb244702":"country_view(countries, 'US')","ff551ec9":"country_view(countries, 'Canada')","d9a06bc3":"country_view(countries, 'Brazil')","7d95b4bb":"country_view(countries, 'Australia')","96f61df1":"country_view(countries, 'Portugal')","f7011d68":"country_view(countries, 'France')","05878231":"country_view(countries, 'Spain')","16add3b1":"# Calculating the total of deaths, confirmed, recovered, active cases in the world\n# I tranform it in list to can interate over and calculate the proportion for each country \n\ntotal_deaths = [ranking['Deaths'].sum()] * len(ranking)\ntotal_cases = [ranking['Confirmed'].sum()]  * len(ranking)\ntotal_recovers = [ranking['Recovered'].sum() ]  * len(ranking)\ntotal_active_cases = [ranking['Active_Cases'].sum()]  * len(ranking)","2f8aa577":"print('Corona Death rate in the hole World: {0:.3f} %'.format(((total_deaths[0] \/ total_cases[0]) * 100)) )","af56a2a0":"print('Corona Recovered rate in the hole World: {0:.3f} %'.format(((total_recovers[0] \/ total_cases[0]) * 100)) )","ce98465b":"print('Corona Active cases rate in the hole World: {0:.3f} %'.format(((total_active_cases[0] \/ total_cases[0]) * 100)) )","0b17b62a":"# Creating the data frame using the country\/region column\nworld_proportion = pd.DataFrame(ranking['Country\/Region'], columns=['Country\/Region']) ","5adbe1f4":"# Calculating the proportion for each country, comparing his total values with the hole world   \n\nworld_proportion['Active_Cases'] = [ (a\/t)*100 for a,t in zip(ranking.Active_Cases, total_active_cases )]\n\nworld_proportion['Death_Proportion'] = [ (d\/t)*100 if d != 0 and t !=0 else 0 for d,t in zip(ranking.Deaths, total_deaths)]\n\nworld_proportion['Recover_Proportion'] = [ (r\/t)*100 if t != 0 and r !=0 else 0 for r,t in zip(ranking.Recovered, total_recovers)]\n\nworld_proportion['Confirmed_Proportion'] = [ (c\/t)*100 if c != 0 and t !=0 else 0 for c,t in zip(ranking.Confirmed, total_cases)]\n","41025b51":"world_proportion.sort_values('Death_Proportion', ascending=False)[:30].plot(x='Country\/Region',kind='bar', figsize=(20,5))\nplt.title('Ranking of Death Proportion (With China)')\nplt.show()","02ffa483":"world_proportion[world_proportion['Country\/Region'] != 'Mainland China'].sort_values('Death_Proportion', ascending=False)[:30].plot(x='Country\/Region',kind='bar', figsize=(20,5))\nplt.title('Ranking of Death Proportion (Without China)')\nplt.show()","e16b5093":"from fbprophet import Prophet\nfrom fbprophet.plot import add_changepoints_to_plot","d0d8f677":"world = countries.groupby('Date')[['Confirmed','Deaths','Recovered','Active_Cases']].sum()","ba081d7b":"world.reset_index(inplace=True)","fcf7fe25":"china_ds = countries[countries['Country\/Region'] == 'Mainland China']\nitaly_ds = countries[countries['Country\/Region'] == 'Italy']\nfrance_ds = countries[countries['Country\/Region'] == 'France']\nbrazil_ds = countries[countries['Country\/Region'] == 'Brazil']\ncanada_ds = countries[countries['Country\/Region'] == 'Canada']\nspain_ds = countries[countries['Country\/Region'] == 'Spain']\nportugal_ds = countries[countries['Country\/Region'] == 'Portugal']\nus_ds = countries[countries['Country\/Region'] == 'US']","104efb93":"brazil_ds.head()","5954d367":"#np.diff()","c811e6a6":"italy = italy_ds[['Date','Confirmed','Deaths']]\nitaly['T'] = [i for i in np.arange(len(italy))]","d3028dad":"brazil = brazil_ds[['Date','Confirmed','Deaths']]\nbrazil['T'] = [i for i in np.arange(len(brazil))]","41010443":"us = us_ds[['Date','Confirmed','Deaths']]\nus['T'] = [i for i in np.arange(len(us))]","22557ad8":"compare_itl_brz = italy.merge(brazil, left_on='T' , right_on='T', how='left', suffixes=('_Italy', '_Brazil'))","97bcbbd7":"compare_itl_brz.head()","e440b2f9":"compare_itl_brz = compare_itl_brz.merge(us,left_on='T' , right_on='T', how='left')\n","6065dfc8":"compare_itl_brz.rename(columns={'Confirmed':'Confirmed_US', 'Date':'Date_US','Deaths':'Deaths_US'}, inplace=True)","a3e13221":"china = china_ds[['Date','Confirmed','Deaths']]\nchina['T'] = [i for i in np.arange(len(china))]","82096256":"compare_itl_brz = china.merge(compare_itl_brz,left_on='T' , right_on='T', how='left')\n","b6c3b1ea":"compare_itl_brz.rename(columns={'Confirmed':'Confirmed_China','Date':'Date_China','Deaths':'Deaths_China'}, inplace=True)","11cb32f3":"compare_itl_brz[:5]","8905887c":"lck_down_china = '01\/23\/2020'\ncompare_itl_brz['China_lck_Down'] = [1 if  i == lck_down_china else 0  for i in compare_itl_brz.Date_China]\nday_lck_china = compare_itl_brz[compare_itl_brz['China_lck_Down'] == 1]['T']","a5a77e92":"lck_down_italy = '03\/09\/2020'\ncompare_itl_brz['Italy_lck_Down'] = [1 if  i == lck_down_italy else 0  for i in compare_itl_brz.Date_Italy]\nday_lck_italy = compare_itl_brz[compare_itl_brz['Italy_lck_Down'] == 1]['T']","ec9acf83":"lck_down_brz = '03\/27\/2020'\ncompare_itl_brz['Brazil_lck_Down'] = [1 if  i == lck_down_brz else 0  for i in compare_itl_brz.Date_Brazil]\nday_lck_brz = compare_itl_brz[compare_itl_brz['Brazil_lck_Down'] == 1]['T']","0cb1611d":"day_lck_brz","362258ea":"plt.style.use('ggplot')\nax = compare_itl_brz.plot(x='T', y=['Confirmed_Italy'],figsize=(20,8), color='g')\ncompare_itl_brz.plot(x='T', y=['Confirmed_Brazil'], color='red', ax=ax)\ncompare_itl_brz.plot(x='T', y=['Confirmed_US'], color='blue', ax=ax)\ncompare_itl_brz.plot(x='T', y=['Confirmed_China'], color='orange', ax=ax)\n\nplt.axvline(day_lck_china.values, ls='--',color='orange')\nplt.axhline(compare_itl_brz[compare_itl_brz.China_lck_Down == 1]['Confirmed_China'].values, ls='--', color='orange')\n\nplt.axvline(day_lck_italy.values, ls='--', color='g')\nplt.axhline(compare_itl_brz[compare_itl_brz.Italy_lck_Down == 1]['Confirmed_Italy'].values, ls='--', color='g')\n\nplt.axvline(day_lck_brz.values, ls='--', color='red')\nplt.axhline(compare_itl_brz[compare_itl_brz.Brazil_lck_Down == 1]['Confirmed_Brazil'].values, ls='--', color='red')\n\nplt.title(\"Comparing the brute values curve of China x Brazil x US x Italy curve\")\nax.set_xlabel('Day Count')\nax.set_ylabel('Confirmed cases')\nplt.show()","cc6d67b9":"compare_itl_brz.head()","0f9482a6":"compare_itl_brz['Diff_China'] = compare_itl_brz['Confirmed_China'].diff()\ncompare_itl_brz['Diff_Italy'] = compare_itl_brz['Confirmed_Italy'].diff()\ncompare_itl_brz['Diff_Brazil'] = compare_itl_brz['Confirmed_Brazil'].diff()\ncompare_itl_brz['Diff_US'] = compare_itl_brz['Confirmed_US'].diff()","b5cc4b0c":"compare_itl_brz['Diff_China'][0] = compare_itl_brz['Confirmed_China'][0]\ncompare_itl_brz['Diff_Italy'][0] = compare_itl_brz['Confirmed_Italy'][0]\ncompare_itl_brz['Diff_Brazil'][0] = compare_itl_brz['Confirmed_Brazil'][0]\ncompare_itl_brz['Diff_US'][0] = compare_itl_brz['Confirmed_US'][0]","f4c92f34":"compare_itl_brz['Diff_Death_China'] = compare_itl_brz['Deaths_China'].diff()\ncompare_itl_brz['Diff_Death_Italy'] = compare_itl_brz['Deaths_Italy'].diff()\ncompare_itl_brz['Diff_Death_Brazil'] = compare_itl_brz['Deaths_Brazil'].diff()\ncompare_itl_brz['Diff_Death_US'] = compare_itl_brz['Deaths_US'].diff()","ef098c0f":"compare_itl_brz['Diff_Death_China'][0] = compare_itl_brz['Deaths_China'][0]\ncompare_itl_brz['Diff_Death_Italy'][0] = compare_itl_brz['Deaths_Italy'][0]\ncompare_itl_brz['Diff_Death_Brazil'][0] = compare_itl_brz['Deaths_Brazil'][0]\ncompare_itl_brz['Diff_Death_US'][0] = compare_itl_brz['Deaths_US'][0]","0c222cb2":"compare_itl_brz['Log_Diff_Death_China'] = np.log(compare_itl_brz['Deaths_China']).diff()\ncompare_itl_brz['Log_Diff_Death_Italy'] = np.log(compare_itl_brz['Deaths_Italy']).diff()\ncompare_itl_brz['Log_Diff_Death_Brazil'] = np.log(compare_itl_brz['Deaths_Brazil']).diff()\ncompare_itl_brz['Log_Diff_Death_US'] = np.log(compare_itl_brz['Deaths_US']).diff()","d532a4e4":"compare_itl_brz['Log_Diff_Death_China'][0] = np.log(compare_itl_brz['Deaths_China'][0]+1)\ncompare_itl_brz['Log_Diff_Death_Italy'][0] = np.log(compare_itl_brz['Deaths_Italy'][0]+1)\ncompare_itl_brz['Log_Diff_Death_Brazil'][0] = np.log(compare_itl_brz['Deaths_Brazil'][0]+1)\ncompare_itl_brz['Log_Diff_Death_US'][0] = np.log(compare_itl_brz['Deaths_US'][0]+1)","666c919b":"us_ds.tail()","60ba1f7d":"compare_itl_brz[compare_itl_brz.Italy_lck_Down == 1].head()","bb44acf6":"compare_itl_brz[compare_itl_brz.Italy_lck_Down == 1]['Confirmed_Italy'].values, compare_itl_brz[compare_itl_brz.China_lck_Down == 1]['Confirmed_China'].values","2a9896a4":"compare_itl_brz[compare_itl_brz.Italy_lck_Down == 1]['Deaths_Italy'].values, compare_itl_brz[compare_itl_brz.China_lck_Down == 1]['Deaths_China'].values","73f2764a":"log_compare = compare_itl_brz.copy()\nlog_compare['Confirmed_Brazil'] = [np.log(i) for i in compare_itl_brz['Confirmed_Brazil']+1]\nlog_compare['Confirmed_Italy'] = [np.log(i) for i in compare_itl_brz['Confirmed_Italy']]\nlog_compare['Confirmed_China'] = [np.log(i) for i in compare_itl_brz['Confirmed_China']]\nlog_compare['Confirmed_US'] = [np.log(i) for i in compare_itl_brz['Confirmed_US']]","eef021ec":"plt.style.use('ggplot')\nax = log_compare.plot(x='T', y=['Confirmed_Italy'],figsize=(20,8), color='g')\nlog_compare.plot(x='T', y=['Confirmed_Brazil'], color='red', ax=ax)\nlog_compare.plot(x='T', y=['Confirmed_US'], color='blue', ax=ax)\nlog_compare.plot(x='T', y=['Confirmed_China'], color='orange', ax=ax)\n\nplt.axvline(day_lck_china.values, ls='--',color='orange')\nplt.axhline(log_compare[log_compare.China_lck_Down == 1]['Confirmed_China'].values, ls='--', color='orange')\n\nplt.axvline(day_lck_italy.values, ls='--', color='g')\nplt.axhline(log_compare[log_compare.Italy_lck_Down == 1]['Confirmed_Italy'].values, ls='--', color='g')\n\nplt.axvline(day_lck_brz.values, ls='--', color='red')\nplt.axhline(log_compare[log_compare.Brazil_lck_Down == 1]['Confirmed_Brazil'].values, ls='--', color='red')\n\nplt.title(\"Comparing the log values curve of China x Brazil x US x Italy curve\")\nax.set_xlabel('Day Count')\nax.set_ylabel('Log of confirmed cases')\nplt.show()","e5c53dbc":"plt.style.use('ggplot')\nax = log_compare.plot(x='T', y=['Deaths_Italy'],figsize=(20,8), color='g')\nlog_compare.plot(x='T', y=['Deaths_Brazil'], color='red', ax=ax)\nlog_compare.plot(x='T', y=['Deaths_US'], color='blue', ax=ax)\nlog_compare.plot(x='T', y=['Deaths_China'], color='orange', ax=ax)\n\nplt.axvline(day_lck_china.values, ls='--',color='orange')\nplt.axhline(log_compare[log_compare.China_lck_Down == 1]['Deaths_China'].values, ls='--', color='orange')\n\nplt.axvline(day_lck_italy.values, ls='--', color='g')\nplt.axhline(log_compare[log_compare.Italy_lck_Down == 1]['Deaths_Italy'].values, ls='--', color='g')\n\nplt.axvline(day_lck_brz.values, ls='--', color='red')\nplt.axhline(log_compare[log_compare.Brazil_lck_Down == 1]['Deaths_Brazil'].values, ls='--', color='red')\n\nplt.title(\"Comparing the log values curve of China x Brazil x US x Italy curve\")\nax.set_xlabel('Day Count')\nax.set_ylabel('Log of Deaths cases')\nplt.show()","de3cf6e3":"plt.style.use('ggplot')\nax = compare_itl_brz.plot(x='T', y=['Diff_Death_Italy'],figsize=(20,8), color='g')\ncompare_itl_brz.plot(x='T', y=['Diff_Death_Brazil'], color='red', ax=ax)\ncompare_itl_brz.plot(x='T', y=['Diff_Death_US'], color='blue', ax=ax)\ncompare_itl_brz.plot(x='T', y=['Diff_Death_China'], color='orange', ax=ax)\n\nplt.axvline(day_lck_china.values, ls='--',color='orange')\nplt.axhline(compare_itl_brz[compare_itl_brz.China_lck_Down == 1]['Diff_Death_China'].values, ls='--', color='orange')\n\nplt.axvline(day_lck_italy.values, ls='--', color='g')\nplt.axhline(compare_itl_brz[compare_itl_brz.Italy_lck_Down == 1]['Diff_Death_Italy'].values, ls='--', color='g')\n\nplt.axvline(day_lck_brz.values, ls='--', color='red')\nplt.axhline(compare_itl_brz[compare_itl_brz.Brazil_lck_Down == 1]['Diff_Death_Brazil'].values, ls='--', color='red')\n\n\nplt.title(\"Comparing the Difference of death values curve of China x Brazil x US x Italy curve\")\nax.set_xlabel('Day Count')\nax.set_ylabel('Difference of Death cases')\nplt.show()","e433546c":"plt.style.use('ggplot')\nax = compare_itl_brz.plot(x='T', y=['Log_Diff_Death_Italy'],figsize=(20,8), color='g')\ncompare_itl_brz.plot(x='T', y=['Log_Diff_Death_Brazil'], color='red', ax=ax)\ncompare_itl_brz.plot(x='T', y=['Log_Diff_Death_US'], color='blue', ax=ax)\ncompare_itl_brz.plot(x='T', y=['Log_Diff_Death_China'], color='orange', ax=ax)\n\nplt.axvline(day_lck_china.values, ls='--',color='orange')\nplt.axhline(compare_itl_brz[compare_itl_brz.China_lck_Down == 1]['Log_Diff_Death_China'].values, ls='--', color='orange')\n\nplt.axvline(day_lck_italy.values, ls='--', color='g')\nplt.axhline(compare_itl_brz[compare_itl_brz.Italy_lck_Down == 1]['Log_Diff_Death_Italy'].values, ls='--', color='g')\nplt.title(\"Comparing the Difference of death values curve of China x Brazil x US x Italy curve\")\n\nplt.axvline(day_lck_brz.values, ls='--', color='red')\nplt.axhline(compare_itl_brz[compare_itl_brz.Brazil_lck_Down == 1]['Log_Diff_Death_Brazil'].values, ls='--', color='red')\n\nax.set_xlabel('Day Count')\nax.set_ylabel('Difference of Death cases')\nplt.show()","68780abb":"plt.style.use('ggplot')\nax = compare_itl_brz.plot(x='T', y=['Diff_Italy'],figsize=(20,8), color='g')\ncompare_itl_brz.plot(x='T', y=['Diff_Brazil'], color='red', ax=ax)\ncompare_itl_brz.plot(x='T', y=['Diff_US'], color='blue', ax=ax)\ncompare_itl_brz.plot(x='T', y=['Diff_China'], color='orange', ax=ax)\n\nplt.axvline(day_lck_china.values, ls='--',color='orange')\nplt.axhline(compare_itl_brz[compare_itl_brz.China_lck_Down == 1]['Diff_China'].values, ls='--', color='orange')\n\nplt.axvline(day_lck_italy.values, ls='--', color='g')\nplt.axhline(compare_itl_brz[compare_itl_brz.Italy_lck_Down == 1]['Diff_Italy'].values, ls='--', color='g')\n\n\n\n\nplt.title(\"Comparing the Difference of Confirmed cases values curve of China x Brazil x US x Italy curve\")\nax.set_xlabel('Day Count')\nax.set_ylabel('Difference of confirmed cases')\nplt.show()","3c302c47":"density_compare = compare_itl_brz.copy()\ndensity_compare['Confirmed_Brazil'] = [np.log(i) for i in compare_itl_brz['Confirmed_Brazil']]\ndensity_compare['Confirmed_Italy'] = [np.log(i) for i in compare_itl_brz['Confirmed_Italy']]\ndensity_compare['Confirmed_China'] = [np.log(i) for i in compare_itl_brz['Confirmed_China']]\ndensity_compare['Confirmed_US'] = [np.log(i) for i in compare_itl_brz['Confirmed_US']]","bfbb3ce0":"len(brazil_ds), len(italy_ds)","105f24a7":"def prophet_predictions(dataset,country_name, measure = 'Deaths', periods=60 ):\n    \n    import warnings\n    warnings.filterwarnings(\"ignore\")\n    \n    \n    dataset['ds'] = [d for d in dataset.Date]\n    dataset['y'] = [m for m in dataset[measure]]\n    \n    print(\"Period from: \" + np.min(dataset['ds']) + ' to: ' + np.max(dataset['ds']) )\n    \n    #instantiating the model and training\n    m = Prophet()\n    m.fit(dataset)\n    \n    # Creating the range of next dates to predict\n    future = m.make_future_dataframe(periods=periods)\n    \n    # Making the prediction\n    forecast = m.predict(future)\n    \n    \n    # Plotting the predict results\n    print(country_name + \" forecasting results\")\n    fig1 = m.plot(forecast)\n    a = add_changepoints_to_plot(fig1.gca(), m, forecast)\n    \n    # Plotting the commponents\n    print(country_name + \" forecasting components\")\n    fig2 = m.plot_components(forecast)\n    \n ","d1b326e3":"def exponential_results(dataset, column_list, days_to_predict=30):\n    t = days_to_predict\n    column = column_list[1]\n    \n    br_reg_data = dataset[column_list]\n    \n    br_reg_data.reset_index(inplace=True)\n    br_reg_data.rename(columns={'index':'Orgiginal_index'}, inplace=True)\n    \n    br_reg_data['Time'] = [i for i in br_reg_data.index]\n    br_reg_data['Log_Confirmed'] = [np.log(i) if i!= 0 else 0 for i in br_reg_data[column]]\n    \n    print(br_reg_data.head())\n    \n    \n    import statsmodels.api as sm\n    \n    X = br_reg_data.Time\n    X = sm.add_constant(X) \n    \n    y = br_reg_data.Log_Confirmed\n    \n    ln_reg = sm.OLS(y,X)\n    result = ln_reg.fit()\n    print(result.summary())\n    \n    a = np.exp(result.params[0])\n    b = np.exp(result.params[1])\n    \n    lista = []\n    \n    for i in np.arange(t+1):\n        lista.append(a * b ** i)  \n    \n    y = a * (b ** t)\n    \n    print('\\nO valor de ' + column + ' estimado \u00e9 de: '+ str(int(y)))\n    \n    return lista\n    \n    \n    ","1e0a645d":"prophet_predictions(world, 'World')","ac3648f9":"prophet_predictions(world, 'World','Confirmed')","5bd4de89":"prophet_predictions(world, 'World','Recovered')","8ad94501":"prophet_predictions(world, 'World','Active_Cases')","d65d1917":"prophet_predictions(china_ds, 'China')","174a699a":"prophet_predictions(china_ds, 'China','Confirmed')","3a0c6573":"prophet_predictions(china_ds, 'China','Recovered')","fef3da31":"exp_predicao = exponential_results(italy_ds, column_list=['Date','Deaths'], days_to_predict=50)","2e08762d":"plt.figure(figsize=(20,8))\n#plt.plot(italy_ds.Deaths)\nplt.plot(exp_predicao)","b56561f7":"prophet_predictions(italy_ds, 'Italy')","4e6c9b8f":"exponential_results(italy_ds, column_list=['Date','Confirmed'], days_to_predict=40)","473e75fd":"prophet_predictions(italy_ds, 'Italy','Confirmed')","26e66cd6":"prophet_predictions(italy_ds, 'Italy','Recovered')","960e7886":"prophet_predictions(france_ds, 'France','Confirmed')","c2057828":"prophet_predictions(france_ds, 'France','Deaths')","8a0fe360":"prophet_predictions(france_ds, 'France','Recovered')","411078de":"prophet_predictions(spain_ds, 'Spain','Confirmed')","91ba3e92":"prophet_predictions(spain_ds, 'Spain','Deaths')","d05dd22f":"prophet_predictions(spain_ds, 'Spain','Recovered')","c8ccd4f2":"prophet_predictions(portugal_ds, 'Portugal','Confirmed')","1e1fc0bc":"prophet_predictions(portugal_ds, 'Portugal','Deaths')","aa91bf62":"prophet_predictions(portugal_ds, 'Portugal','Recovered')","39fb4613":"brazil_ds.head()","59117af6":"exponential_results(brazil_ds, column_list=['Date','Confirmed'], days_to_predict=30)","aa8d0883":"prophet_predictions(brazil_ds[1:], 'Brazil','Confirmed')","a32d6cc9":"prophet_predictions(brazil_ds[1:], 'Brazil','Deaths')","1fa6e6cd":"prophet_predictions(brazil_ds[1:], 'Brazil','Recovered')","2402a682":"prophet_predictions(canada_ds, 'Canada','Deaths')","0894de50":"prophet_predictions(canada_ds, 'Canada','Confirmed')\n","ad329c64":"prophet_predictions(canada_ds, 'Canada','Recovered')","c930a935":"prophet_predictions(us_ds, 'US','Deaths')","baa442e7":"prophet_predictions(us_ds, 'US','Confirmed')","6cc84fea":"prophet_predictions(us_ds, 'US','Recovered')","7d9bf5f0":"provinces.head()","2aeea693":"us_provinces = provinces[provinces['Country\/Region'] == 'US']","18408cbc":"sum_us_provinces = us_provinces.groupby('Province\/State')[['Confirmed','Deaths','Recovered']].sum()","aa6d8984":"sum_us_provinces.reset_index(inplace=True)","da0fdce5":"sum_us_provinces.sort_values('Confirmed', ascending=False)[['Province\/State','Confirmed','Deaths','Recovered']]","61f1de12":"provinces = sum_us_provinces.sort_values('Confirmed', ascending=False)[['Province\/State','Confirmed','Deaths','Recovered']]","f52d5804":"provinces [provinces['Province\/State'] == 'Maryland']","6be604bb":"sum_us_provinces.sort_values('Deaths', ascending=False)[:18][['Province\/State','Confirmed','Deaths','Recovered']]","eeff489a":"sum_us_provinces.sort_values('Recovered', ascending=False)[:18][['Province\/State','Confirmed','Deaths','Recovered']]","aba08ab6":"#Install the dc-stat-think library\n!pip install dc-stat-think","5f7419bc":"import dc_stat_think as dcst","7af740f6":"italy_population =  60487480\nchina_population =  1437710279\n\nitaly_demographic_density = italy_population \/ 301339\nchina_demographic_density = china_population \/ 9596960","9c89e1a4":"italy_confirmed_mean = (np.mean(italy_ds.Confirmed) \/  italy_population) * 100\nchina_confirmed_mean = (np.mean(china_ds.Confirmed[:len(italy_ds)]) \/ china_population) * 100\n\nprint('Populational Proportion of the Mean confirmed cases in Italy: ' + str(italy_confirmed_mean) + '\\nPopulational Proportion of the Mean confirmed cases in China (equal period of Italy): ' + str(china_confirmed_mean) )","8e7cbccd":"italy_confirmed_std = (np.std(italy_ds.Confirmed) \/  italy_population) * 100 \nchina_confirmed_std = (np.std(china_ds.Confirmed[:len(italy_ds)]) \/ china_population) * 100","0f37eca2":"print('Confirmed variance in Italy: ' + str(italy_confirmed_std) + '\\nConfirmed variance in China (equal period of Italy): ' + str(china_confirmed_std) )","dee98b3f":"italy_confirmed_mean = (np.mean(italy_ds.Deaths) \/  italy_population) * 100\nchina_confirmed_mean = (np.mean(china_ds.Deaths[:len(italy_ds)]) \/ china_population) * 100\n\nprint('Populational Proportion of the Mean deaths cases in Italy: ' + str(italy_confirmed_mean) + '\\nPopulational Proportion of the Mean deaths cases in China (equal period of Italy): ' + str(china_confirmed_mean) )","e4b5b73e":"brazil_population =   212119183\n\nbrazil_demographic_density = brazil_population \/ 8514215","ba6b7a1a":"brazil_confirmed_mean = (np.mean(brazil_ds.Confirmed) \/ brazil_population ) * 100 \nchina_confirmed_mean = (np.mean(china_ds.Confirmed[:len(brazil_ds)]) \/ china_population) * 100\n\nprint('Mean of confirmed cases in Brazil: ' + str(brazil_confirmed_mean) + '\\nMean of confirmed cases in China (in equal period of Brazil): ' + str(china_confirmed_mean) )","d71278c7":"0.000012728693189432095","b118b087":"brazil_confirmed_std = (np.std(brazil_ds.Confirmed) \/ brazil_population ) * 100 \nchina_confirmed_std = (np.std(china_ds.Confirmed[:len(brazil_ds)]) \/ china_population) * 100\n\nprint('Variation of confirmed cases in Brazil: ' + str(brazil_confirmed_std) + '\\nVariation of confirmed cases in China (in equal period of Brazil): ' + str(china_confirmed_std) )","1ee04b39":"0.0000211590020223276 < 0.0009185691144710906","674be69c":"brazil_confirmed_mean = (np.mean(brazil_ds.Confirmed) \/ brazil_population ) * 100 \nitaly_confirmed_mean = (np.mean(italy_ds.Confirmed[:len(brazil_ds)]) \/ italy_population) * 100\n\nprint('Mean of confirmed cases in Brazil: ' + str(brazil_confirmed_mean) + '\\nMean of confirmed cases in Italy (in equal period of Brazil): ' + str(italy_confirmed_mean) )","eb240655":"brazil_confirmed_mean > italy_confirmed_mean","e2c8828b":"brazil_death_mean = (np.mean(brazil_ds.Deaths) \/ brazil_population ) * 100 \nitaly_death_mean = (np.mean(italy_ds.Deaths[:len(brazil_ds)]) \/ italy_population) * 100\n\nprint('Mean of confirmed cases in Brazil: ' + str(brazil_death_mean) + '\\nMean of death cases in Italy (in equal period of Brazil): ' + str(italy_death_mean) )","ff1947b6":"brazil_death_mean > italy_death_mean","a9330645":"brazil_demographic_density, italy_demographic_density","618553e7":"# Difference of demographic density between Brazil and Italy\nitaly_demographic_density - brazil_demographic_density","fe5906ae":"italy_demographic_density \/ brazil_demographic_density","e84736ae":"brazil_death_mean = (np.mean(brazil_ds.Deaths) \/ (brazil_demographic_density + 175.8) ) * 100 \nitaly_death_mean = (np.mean(italy_ds.Deaths[:len(brazil_ds)]) \/ (italy_demographic_density)  ) * 100\n\nprint('Mean of confirmed cases in Brazil: ' + str(brazil_death_mean) + '\\nMean of death cases in Italy (in equal period of Brazil): ' + str(italy_death_mean) )","1229671c":"df_list = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv')","65fb6dbd":"df_list.info()","0ca57c18":"# df_list.drop(columns=['Unnamed: 33','Unnamed: 34','Unnamed: 35','Unnamed: 36','Unnamed: 37','Unnamed: 38','Unnamed: 39','Unnamed: 40',\\\n#                        'Unnamed: 41','Unnamed: 42','Unnamed: 43','Unnamed: 44'], inplace=True)\n\ndf_list.drop(columns=['Unnamed: 21','Unnamed: 22','Unnamed: 23','Unnamed: 24','Unnamed: 25','Unnamed: 26'], inplace=True)","4206913d":"age_range = []\nfor age in df_list.age:\n    if age <= 10.0:\n        age_range.append('0-10')\n    elif age > 10.0 and age <= 20.0:\n        age_range.append('11-20')\n    elif age > 20.0 and age <= 30.0:\n        age_range.append('21-30')    \n    elif age > 30.0 and age <= 40.0:\n        age_range.append('31-40')    \n    elif age > 40.0 and age <= 50.0:\n        age_range.append('41-50')    \n    elif age > 50.0 and age <= 60.0:\n        age_range.append('51-60')        \n    elif age > 60.0 and age <= 70.0:\n        age_range.append('61-70')    \n    elif age > 70.0 and age <= 80.0:\n        age_range.append('71-80')    \n    else:\n        age_range.append('81 and more')\n        ","d561d545":"df_list['Age_Range'] = age_range","80174713":"df_list['death'].fillna(-1, inplace=True)","2cac5d16":"ages_fillup = df_list[df_list['death'] != -1]","9f3255d9":"ages_fillup['DEATHS'] = ['1' if (d != '1' and d != '0') else d for d in ages_fillup.death ]","e4c9c434":"ages_fillup['DEATHS'] = ages_fillup['DEATHS'].astype('int64')","000cdb6d":"age_freq = pd.DataFrame(ages_fillup.groupby('Age_Range')['DEATHS'].sum())","568468df":"total_deaths = np.sum(age_freq.DEATHS)\nprint(total_deaths)\n","156fa679":"age_freq['DEATH_PROPORTION'] =  [ (d\/t)*100 for d,t in zip(age_freq.DEATHS,[total_deaths] * len(age_freq.DEATHS) ) ]","a23c6944":"age_freq['DEATH_PROPORTION']","4e4fb669":"gender_freq = pd.DataFrame(ages_fillup.groupby('gender')['DEATHS'].sum())","682fcf9d":"(gender_freq \/ total_deaths) * 100","de7b19c3":"gender_freq = pd.DataFrame(ages_fillup.groupby(['gender','Age_Range'])['DEATHS'].sum())","af0a74ad":"gender_freq","bf3fc487":"from sklearn.feature_extraction.text import CountVectorizer","4ceb5aec":"vectorizer = CountVectorizer(analyzer='word', ngram_range=(1, 2))","93548bbc":"def exclude_numbs(dataset, column):\n    pass","fec64152":"X = vectorizer.fit_transform(df_list.summary.fillna('no_values'))","7367684f":"print(vectorizer.get_feature_names())","607e7fd0":"X.toarray()","71497fec":"df_list.head()","c8be7648":"# df_open_list = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/COVID19_open_line_list.csv')","79bb64ae":"# df_open_list.drop(columns=['Unnamed: 33','Unnamed: 34','Unnamed: 35','Unnamed: 36','Unnamed: 37','Unnamed: 38','Unnamed: 39','Unnamed: 40',\\\n#                         'Unnamed: 41','Unnamed: 42','Unnamed: 43','Unnamed: 44'], inplace=True)","6bc42fe9":"#### Portugal Forecast","8028ba91":"#### Canada recovered cases","cdf60628":"#### Spain","f07c9c27":"#### Main China Number of Confirmed Cases Forecast ","9d7bfc39":"#### Seems that in Italy the grow rate is bigger than in China (for equal period), the best manner to see it is compare the confidence interval for the slope rate ","a5a4d13c":"### Ranking By proportion (Proportion calculated by total cases in the country)","72b710ba":"### View By Country","5c230826":"### Comparing Brazil with China in equal period\n[Brazil Territory length](https:\/\/en.wikipedia.org\/wiki\/Geography_of_Brazil)","8625e646":"##### Create the columns used by pattern for prophet\n    - First I'll try apply the numbers of deaths to get the projection for the next days","1783060e":"#### World Forecast","0ea17298":"#### Number of Confirmed Cases Forecast in Canda ","df9b30c6":"### Making Projections Using Forecast","b413c79f":"#### Main China Number of Deaths Forecast ","45158716":"#### Deaths forecast for France","5916a418":"### Trying exponential model to predict ","a650612a":"### Adjusting the ObservationDate Field to has the same pattern","8e6b211c":"### Now we gonna look how each country is compared with the hole world","fc3c83f2":"### Creating Exponential model","9ce727bd":"##### China population: [China population](https:\/\/www.worldometers.info\/world-population\/china-population\/)\n##### Italy population: [Italy population](https:\/\/www.worldometers.info\/world-population\/italy-population\/)\n\n","93aaeaba":"### Creating the Top 10 Rankings ","58956553":"#### Number of Confirmed Cases Forecast in Brazil","e13c1bed":"### List Data Set Analyses","e2a1b625":"##### The proportion in Italy is alarmant, offcourse that China is bigger than Italy in population, but analyzing the proportion in each population, the Italy stay worst than the China situation, looking at the same period","ddd32efd":"### Exploring the summary column\n    - Wich kind of word is most frequent?\n    - Could it show to us the main symthoms?","c774c160":"#### US","0aae15d8":"#### Italy Number of Deaths Forecast ","03a975d2":"### Let's start to use statistical thynking to comprove (or not) some hypothesis","afdefbf0":"#### Number of Confirmed Cases Forecast in Italy ","e921068c":"### Comparing results by the total population of each country","b40f7295":"#### Number of Death Cases Forecast in Canada "}}