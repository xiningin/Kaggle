{"cell_type":{"c4aa6d42":"code","af986ded":"code","b67684cb":"code","da63dfb5":"code","f664c081":"code","0ffd3d72":"code","a921b36c":"code","551890eb":"code","ce6cb363":"code","9df21d06":"code","426bc1fa":"code","f1ca202f":"code","16e0e553":"code","df8facad":"code","1ad44bcc":"code","4dc8abf1":"code","c8b1b0fd":"code","ddd50273":"code","d7675cb0":"code","1d830710":"code","15feb180":"code","4c214cf0":"code","c4b72044":"markdown","8764d454":"markdown","31088ab4":"markdown","3829bc37":"markdown","78571403":"markdown","fe4fd754":"markdown","6eccfe64":"markdown","c2308191":"markdown","7cec7de7":"markdown","f90750f5":"markdown","d750ce49":"markdown","6088ceb7":"markdown","bdedcc88":"markdown"},"source":{"c4aa6d42":"# Solution problem with Event Loop in Jupyter kernel https:\/\/github.com\/jupyter\/notebook\/issues\/3397#issuecomment-376803076\n\n!pip install nest_asyncio\n\nimport nest_asyncio\nnest_asyncio.apply()","af986ded":"# Install lib for asynchronous work with http.\n!pip install aiohttp -qq","b67684cb":"import asyncio\nimport aiohttp\nimport socket\n\nfrom bs4 import BeautifulSoup\n\n\nSEMA = asyncio.BoundedSemaphore(200)# 100 - 500 | the more the faster, and the greater the chance to get a ban.\n####################### Get all PMID (page id: https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/  -> 32361862 <-) #########################\n\nasync def get_session_and_inputs(page, items_per_page):\n\n    headers = {\"User-Agent\" : \"Mozilla\/5.0\", \"Connection\": \"close\"}\n    async with aiohttp.ClientSession(headers=headers) as session:\n        async with session.get(GETURL, verify_ssl=False) as response:\n            data = await response.text()\n            soup = BeautifulSoup(data, \"lxml\")\n\n            inputs = {i['name']: i.get('value', '') for i\n                      in soup.select('form#EntrezForm input[name]')}\n            inputs['EntrezSystem2.PEntrez.PubMed.Pubmed_ResultsPanel.Pubmed_DisplayBar.PageSize'] = ITEMS_PER_PAGE\n            inputs['EntrezSystem2.PEntrez.PubMed.Pubmed_ResultsPanel.Pubmed_DisplayBar.PrevPageSize'] = ITEMS_PER_PAGE\n            inputs['EntrezSystem2.PEntrez.DbConnector.Cmd'] = 'PageChanged'\n\n            inputs['EntrezSystem2.PEntrez.PubMed.Pubmed_ResultsPanel.Pubmed_Pager.CurrPage'] = page\n            inputs['EntrezSystem2.PEntrez.PubMed.Pubmed_ResultsPanel.Pubmed_Pager.cPage'] = page\n\n        async with session.post(POSTURL, data=inputs) as response2:\n            data = await response2.text()\n            soup = BeautifulSoup(data, \"lxml\")\n            PMID.append([pmid.text for pmid in soup('dd')])\n\n\nasync def get_all_pmid():\n    tasks = []\n    for page in range(NUM_PAGES):\n        task = asyncio.ensure_future(get_session_and_inputs(page=page,\n                                                            items_per_page=NUM_PAGES))\n        tasks.append(task)\n\n    await asyncio.gather(*tasks)\n\n############# Get all data in MAP from each uniq PMID articles (Title and Abstract) ###################\n\"\"\"Example:\nTitle\nBrain Recording, Mind-Reading, and Neurotechnology: Ethical Issues from Consumer Devices to Brain-Based Speech Decoding.\n\nAbstract\nBrain reading technologies are rapidly being developed in a number of neuroscience fields. \n...\n...\n...\netc\"\"\";\n\n\nasync def parse_text_from_paper(pmid):\n    '''\n    From link to science paper (pmid) - get html,\n    then get document's body (data) from one page.\n    '''\n    \n    conn = aiohttp.TCPConnector(family=socket.AF_INET)\n    headers={\"User-Agent\" : \"Mozilla\/5.0\",\n             \"Connection\": \"close\"}\n    \n    async with aiohttp.ClientSession(headers=headers, connector=conn) as session:\n        async with SEMA, session.get(f\"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/{pmid}\") as response:\n            data = await response.text()\n            soup = BeautifulSoup(data, \"lxml\")\n\n            title = [text.find('h1').text for text in soup.find_all(\"div\", class_=\"rprt_all\")]\n            data = [text.find('p').text for text in soup.find_all(\"div\", class_=\"abstr\")]\n            pubmed_MAP[POSTURL+pmid] = data, title[0]\n                \nasync def get_all_data_p(PMID):\n\n    tasks = []\n    pmid_items = [pmid_i for lst in PMID for pmid_i in lst]\n\n    for pmid in pmid_items:\n\n        task = asyncio.ensure_future(parse_text_from_paper(pmid))\n        tasks.append(task)\n\n    await asyncio.gather(*tasks)","da63dfb5":"def remove_none(data):\n    print(\"Before removing nan:\", len(data))\n    filtered = {k: v for k, v in data.items() if v is not None}\n    data.clear()\n    data.update(filtered)\n    print(\"After removing nan:\", len(data))\n    return data","f664c081":"import pandas as pd\n\n# Initializing an empty dataframe\ndf = pd.DataFrame()","0ffd3d72":"%%time\n\nTopic = \"Deep Learning\"\n\nGETURL = \"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/?term=deep+learning\"\nPOSTURL = \"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/\"\n\nPMID = []\nITEMS_PER_PAGE = 100\nNUM_PAGES = 133\npubmed_MAP = {}\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(get_all_pmid())\nloop = asyncio.get_event_loop()\nloop.run_until_complete(get_all_data_p(PMID))\n\nprint(f\"{Topic} Done!\\nMap length: {len(pubmed_MAP)}\")","a921b36c":"# Remove empty rows\npubmed_MAP = remove_none(pubmed_MAP)\n\n# Write in dataframe\ndf[\"deep_learning\"] = pubmed_MAP.values()\ndf[\"deep_learning_links\"] = pubmed_MAP.keys()\ndf","551890eb":"%%time\n\nTopic = \"Covid 19\"\n\nGETURL = \"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/?term=covid+19\"\nPOSTURL = \"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/\"\n\nPMID = []\nITEMS_PER_PAGE = 100\nNUM_PAGES = 89\npubmed_MAP = {}\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(get_all_pmid())\nloop = asyncio.get_event_loop()\nloop.run_until_complete(get_all_data_p(PMID))\n\nprint(f\"{Topic} Done!\\nMap length: {len(pubmed_MAP)}\")","ce6cb363":"# Remove empty rows\npubmed_MAP = remove_none(pubmed_MAP)\n\n# Write in dataframe\ndf[\"covid_19\"] = pd.Series(list(pubmed_MAP.values()))\ndf[\"covid_19_links\"] = pd.Series(list(pubmed_MAP.keys()))\ndf","9df21d06":"%%time\n\nTopic = \"Human Connectome\"\n\nGETURL = \"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/?term=human+connectome\"\nPOSTURL = \"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/\"\n\nPMID = []\nNUM_PAGES = 48\nITEMS_PER_PAGE = 100\npubmed_MAP = {}\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(get_all_pmid())\nloop = asyncio.get_event_loop()\nloop.run_until_complete(get_all_data_p(PMID))\n\nprint(f\"{Topic} Done!\\nMap length: {len(pubmed_MAP)}\")","426bc1fa":"# Remove empty rows\npubmed_MAP = remove_none(pubmed_MAP)\n\n# Write in dataframe\ndf[\"human_connectome\"] = pd.Series(list(pubmed_MAP.values()))\ndf[\"human_connectome_links\"] = pd.Series(list(pubmed_MAP.keys()))\ndf","f1ca202f":"%%time\n\nTopic = \"Virtual Reality\"\n\nGETURL = \"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/?term=virtual+reality\"\nPOSTURL = \"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/\"\n\nPMID = []\nITEMS_PER_PAGE = 100\nNUM_PAGES = 114\npubmed_MAP = {}\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(get_all_pmid())\nloop = asyncio.get_event_loop()\nloop.run_until_complete(get_all_data_p(PMID))\n\nprint(f\"{Topic} Done!\\nMap length: {len(pubmed_MAP)}\")","16e0e553":"# Remove empty rows\npubmed_MAP = remove_none(pubmed_MAP)\n\n# Write in dataframe\ndf[\"virtual_reality\"] = pd.Series(list(pubmed_MAP.values()))\ndf[\"virtual_reality_links\"] = pd.Series(list(pubmed_MAP.keys()))\ndf","df8facad":"%%time\n\nTopic = \"Brain-Machine Interfaces\"\n\nGETURL = \"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/?term=Brain-Machine+Interfaces\"\nPOSTURL = \"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/\"\n\nPMID = []\nITEMS_PER_PAGE = 100\nNUM_PAGES = 43\npubmed_MAP = {}\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(get_all_pmid())\nloop = asyncio.get_event_loop()\nloop.run_until_complete(get_all_data_p(PMID))\n\nprint(f\"{Topic} Done!\\nMap length: {len(pubmed_MAP)}\")","1ad44bcc":"# Remove empty rows\npubmed_MAP = remove_none(pubmed_MAP)\n\n# Write in dataframe\ndf[\"brain_machine_interfaces\"] = pd.Series(list(pubmed_MAP.values()))\ndf[\"brain_machine_interfaces_links\"] = pd.Series(list(pubmed_MAP.keys()))\ndf","4dc8abf1":"%%time\n\nTopic = \"Electroactive Polymers\"\n\nGETURL = \"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/?term=electroactive+Polymers\"\nPOSTURL = \"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/\"\n\nPMID = []\nITEMS_PER_PAGE = 100\nNUM_PAGES = 10\npubmed_MAP = {}\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(get_all_pmid())\nloop = asyncio.get_event_loop()\nloop.run_until_complete(get_all_data_p(PMID))\n\nprint(f\"{Topic} Done!\\nMap length: {len(pubmed_MAP)}\")","c8b1b0fd":"# Remove empty rows\npubmed_MAP = remove_none(pubmed_MAP)\n\n# Write in dataframe\ndf[\"electroactive_polymers\"] = pd.Series(list(pubmed_MAP.values()))\ndf[\"electroactive_polymers_links\"] = pd.Series(list(pubmed_MAP.keys()))\ndf","ddd50273":"%%time\n\nTopic = \"PEDOT electrodes\"\n\nGETURL = \"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/?term=PEDOT+electrodes\"\nPOSTURL = \"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/\"\n\nPMID = []\nITEMS_PER_PAGE = 100\nNUM_PAGES = 8\npubmed_MAP = {}\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(get_all_pmid())\nloop = asyncio.get_event_loop()\nloop.run_until_complete(get_all_data_p(PMID))\n\nprint(f\"{Topic} Done!\\nMap length: {len(pubmed_MAP)}\")","d7675cb0":"# Remove empty rows\npubmed_MAP = remove_none(pubmed_MAP)\n\n# Write in dataframe\ndf[\"pedot_electrodes\"] = pd.Series(list(pubmed_MAP.values()))\ndf[\"pedot_electrodes_links\"] = pd.Series(list(pubmed_MAP.keys()))\ndf","1d830710":"Topic = \"Neuroprosthetics\"\n\nGETURL = \"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/?term=neuroprosthetics\"\nPOSTURL = \"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/\"\n\nPMID = []\nITEMS_PER_PAGE = 100\nNUM_PAGES = 8\npubmed_MAP = {}\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(get_all_pmid())\nloop = asyncio.get_event_loop()\nloop.run_until_complete(get_all_data_p(PMID))\n\nprint(f\"{Topic} Done!\\nMap length: {len(pubmed_MAP)}\")","15feb180":"# Remove empty rows\npubmed_MAP = remove_none(pubmed_MAP)\n\n# Write in dataframe\ndf[\"neuroprosthetics\"] = pd.Series(list(pubmed_MAP.values()))\ndf[\"neuroprosthetics_links\"] = pd.Series(list(pubmed_MAP.keys()))\ndf","4c214cf0":"# Sorted\ncols = df.columns.tolist()\ndf = df[cols[::2] + cols[1::2]]\n\n# Save to CSV\ndf.to_csv('pubmed_abstracts.csv')\ndf","c4b72044":"### Removing empty values from scraped dict","8764d454":"### Save data to CSV","31088ab4":"### PEDOT electrodes [755 articles]","3829bc37":"### Virtual Reality [11419 articles]","78571403":"# Script for asynchronous web scraping from [PubMed](https:\/\/www.ncbi.nlm.nih.gov\/pubmed)","fe4fd754":"### Deep Learning [13335 articles]","6eccfe64":"### Covid 19 [8954 articles]","c2308191":"### Neuroprosthetics [715 articles]","7cec7de7":"### Electroactive Polymers [907 articles]","f90750f5":"### Brain-Machine Interfaces [4377 articles]","d750ce49":"### Human Connectome [4877 articles]","6088ceb7":"### Creating a Dataframe to write crawled data","bdedcc88":"We will scrape data from - [National Library of Medicine.](https:\/\/www.ncbi.nlm.nih.gov\/).\n\nNamely, **Abstract**s where the features of the topic are indicated and the essence of the article.\n\nSample article page - https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/32356091.\n\nAbstracts\/Annotations to articles will be on the following topics:\n1. [Deep Learning](https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/?term=deep+learning) [13335 articles] \n2. [Covid 19](https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/?term=covid+19) [8954 articles]\n3. [Human Connectome](https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/?term=human+connectome) [4877 articles]\n4. [Virtual Reality](https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/?term=virtual+reality) [11419 articles]\n5. [Brain-Machine Interfaces](https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/?term=Brain-Machine+Interfaces) [4377 articles] :\n\n     6. [Electroactive Polymers](https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/?term=electroactive+Polymers) [907 articles]\n     7. [PEDOT electrodes](https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/?term=PEDOT+electrodes) [755 articles]\n     8. [Neuroprosthetics](https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/?term=neuroprosthetics) [715 articles]\n\n\n\nThere are only 8 topics, but since 3 of them differ greatly in the amount of data from the rest, I assigned them to point 5 (Brain-machine interfaces), and, in addition, they should all be semantically correlated; in fact, we can assume that the data will correspond to 5 different topics."}}