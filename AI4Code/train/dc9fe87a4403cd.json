{"cell_type":{"56eb7db3":"code","ce436d2a":"code","3302e1fe":"code","31352dab":"code","7ed9de01":"code","d549cb91":"code","25a9038b":"code","f723ef24":"code","90a0332e":"code","c53f8a59":"code","9ee3b69d":"code","648d1d2d":"code","8dd314cd":"code","aa05e5fc":"code","cc944dc2":"code","adb93376":"code","744591ed":"code","8c628d83":"code","1849aed0":"code","4c353481":"code","ad709d98":"markdown","1f793299":"markdown","8809b315":"markdown"},"source":{"56eb7db3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ce436d2a":"# load data\ntrain_data = pd.read_csv('..\/input\/leaf-classification\/train.csv.zip', index_col ='id')\ntest_data = pd.read_csv('..\/input\/leaf-classification\/test.csv.zip')","3302e1fe":"test_ids = test_data.id\ntest_data = test_data.drop(['id'], axis =1)","31352dab":"train_data.head()","7ed9de01":"# taking care of missing values\ntrain_data.isnull().any().sum()","d549cb91":"test_data.head()","25a9038b":"test_data.isnull().any().sum()","f723ef24":"# encoding catagorical\ntrain_data.info()","90a0332e":"test_data.info()","c53f8a59":"train_data.shape","9ee3b69d":"test_data.shape","648d1d2d":"train_data['species'].nunique()","8dd314cd":"# IV and DV\nx = train_data.drop('species',axis=1)\ny = train_data['species']","aa05e5fc":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\ny_fit = encoder.fit(train_data['species'])\ny_label = y_fit.transform(train_data['species']) \nclasses = list(y_fit.classes_) \nclasses","cc944dc2":"# splitting\nfrom sklearn.model_selection import  train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y_label, test_size = 0.2, random_state =1)","adb93376":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 40)\nclassifier.fit(x_train, y_train)","744591ed":"from sklearn.metrics import classification_report\npredictions = classifier.predict(x_test)\nprint (classification_report(y_test, predictions))","8c628d83":"final_predictions = classifier.predict_proba(test_data)","1849aed0":"submission = pd.DataFrame(final_predictions, columns=classes)\nsubmission.insert(0, 'id', test_ids)\nsubmission.reset_index()","4c353481":"submission.to_csv('submission.csv', index = False)","ad709d98":"# Building model","1f793299":"# Data Prepocessing","8809b315":"The target y is the only catagorical column"}}