{"cell_type":{"48ff3792":"code","28d56485":"code","a62eac6d":"code","1406f21d":"code","5cf7a645":"code","74da0718":"code","2cc89f3f":"code","6c0b77c0":"code","e3833b39":"markdown"},"source":{"48ff3792":"#Import necessay libraries\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport matplotlib\nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)\nimport seaborn as sns\n\n#Preprocessing\nfrom sklearn.experimental import enable_iterative_imputer  # noqa\nfrom sklearn.impute import IterativeImputer\n\nfrom sklearn import model_selection,metrics\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split,KFold,StratifiedKFold\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler,OrdinalEncoder,LabelEncoder,RobustScaler,MinMaxScaler\nfrom sklearn.model_selection import RepeatedKFold\n\n#Model\nfrom sklearn.ensemble import RandomForestRegressor,RandomForestClassifier\nfrom sklearn.metrics import mean_squared_error,roc_auc_score\nfrom xgboost import XGBRegressor,XGBClassifier\nfrom lightgbm import LGBMRegressor,LGBMClassifier\nimport lightgbm as lgb\nfrom catboost import CatBoostRegressor,CatBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier,AdaBoostRegressor\nimport time","28d56485":"#import the data and shape\ntrain = pd.read_csv(\"..\/input\/song-popularity-prediction\/train.csv\")\ntest = pd.read_csv(\"..\/input\/song-popularity-prediction\/test.csv\")\nsample=pd.read_csv(\"..\/input\/song-popularity-prediction\/sample_submission.csv\")\nprint(train.shape,test.shape,sample.shape)\ntrain.describe().transpose()","a62eac6d":"train.info()","1406f21d":"# Imputer\n# !rm -r kuma_utils\n!git clone https:\/\/github.com\/analokmaus\/kuma_utils.git\n    \nimport sys\nsys.path.append(\"kuma_utils\/\")\nfrom kuma_utils.preprocessing.imputer import LGBMImputer\n\nimputer = LGBMImputer(n_iter=1000,verbose=True)\ntrain_im = pd.DataFrame(imputer.fit_transform(train))\ntest_im = pd.DataFrame(imputer.fit_transform(test))\n#remove column\ntrain_im.columns = train.columns\ntest_im.columns = test.columns\n\ntrain = train_im\ntest = test_im","5cf7a645":"#insert the kfold columns\ntrain['kfold'] = -1\n#distributing the data\nkfold=KFold(n_splits=5,random_state=42)\nfor fold, (tr_i,va_i) in enumerate(kfold.split(X=train)):\n    train.loc[va_i,'kfold'] = fold\n    \nprint(train.kfold.value_counts())\ntrain.to_csv(\"folds_5.csv\",index=False)\nprint(\"successfully folds\")","74da0718":"#feature separation\ndf = pd.read_csv(\".\/folds_5.csv\")\n\n#features taken to train\nfeatures = [f for f in df.columns if f not in(\"id\",\"kfold\",\"song_popularity\")]\ntest= test[features]","2cc89f3f":"#initialize the model\nprediction = []\nscore = []\n\nfor fold in range (5):\n    xtrain = df[df.kfold != fold].reset_index(drop=True)\n    xvalid = df[df.kfold == fold].reset_index(drop=True)\n    xtest = test.copy()\n    \n    ytrain = xtrain.song_popularity\n    yvalid = xvalid.song_popularity\n    \n    xtrain = xtrain[features]\n    xvalid = xvalid[features]\n    \n    lE = RobustScaler()\n    xtrain[features] = lE.fit_transform(xtrain[features])\n    xvalid[features] = lE.transform(xvalid[features])\n    xtest[features] = lE.transform(xtest[features])\n    \n    \n    model = AdaBoostRegressor(n_estimators=15000, random_state=42)\n    model.fit(xtrain, ytrain)\n    \n    preds_valid = model.predict(xvalid)\n    \n    test_pre = model.predict(xtest)\n    prediction.append(test_pre)\n    \n    roc1= roc_auc_score(yvalid,preds_valid)\n    #Score \n    score.append(roc1)\n    print(f\"fold|split:{fold},roc:{roc1}\")\n    \nprint(np.mean(score),np.std(score))","6c0b77c0":"#reconfigure of split data\nfinal_predict = np.mean(np.column_stack(prediction),axis=1)\nprint(final_predict)\nsample.song_popularity = final_predict\nsample.to_csv(\"submission.csv\",index=False)\nprint(\"Final achieve to send Adaboost output data\")","e3833b39":"Thankyou! \n\nVersion 5: AdaBoostingClassifier\n\nHow to improve and initialize the gpu! its very slow? Any Suggestion\n\n## **Refer it:**\n#### https:\/\/www.kaggle.com\/prashant111\/adaboost-classifier-tutorial#5.-Difference-between-AdaBoost-and-Gradient-Boosting-"}}