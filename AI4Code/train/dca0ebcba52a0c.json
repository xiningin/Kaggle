{"cell_type":{"acd36c2f":"code","6582a536":"code","efcc87b3":"code","8402fdd7":"code","a6e932bc":"code","9f0f9add":"code","a8b681aa":"code","c4d43d26":"code","e172b054":"code","2ccc1c88":"code","ec737f21":"code","4d214df9":"code","0e356279":"code","b903c2f8":"code","ba4541d5":"code","255d61f2":"code","5319bed3":"code","a002c009":"code","73b381df":"code","db6b5e12":"code","97d1e980":"code","f64232de":"code","8a39d1c3":"code","2dc21aa6":"code","4e1c8263":"markdown"},"source":{"acd36c2f":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import  DecisionTreeClassifier\nfrom sklearn import tree\nfrom sklearn.metrics import classification_report\nfrom sklearn import preprocessing","6582a536":"fraud = pd.read_csv(\"\/media\/gargi\/Data\/DataSets\/Fraud_check.csv\")","efcc87b3":"fraud","8402fdd7":"fraud.rename(columns={'Taxable.Income': 'ti', 'City.Population': 'cp', 'Work.Experience': 'we'}, inplace=True)","a6e932bc":"fraud.describe","9f0f9add":"fraud[\"ti\"] = pd.cut(fraud[\"ti\"], bins =[10000,30000,100000],labels = [\"Risky\",\"Good\"] )","a8b681aa":"fraud","c4d43d26":"label_encoder = preprocessing.LabelEncoder()\nfraud['Marital.Status']= label_encoder.fit_transform(fraud['Marital.Status']) ","e172b054":"label_encoder = preprocessing.LabelEncoder()\nfraud['ti']= label_encoder.fit_transform(fraud['ti']) ","2ccc1c88":"label_encoder = preprocessing.LabelEncoder()\nfraud['Urban']= label_encoder.fit_transform(fraud['Urban']) ","ec737f21":"label_encoder = preprocessing.LabelEncoder()\nfraud['Undergrad']= label_encoder.fit_transform(fraud['Undergrad']) ","4d214df9":"fraud","0e356279":"x=fraud[['Undergrad','Marital.Status','cp','we','Urban']]\ny=fraud[['ti']]","b903c2f8":"x","ba4541d5":"y","255d61f2":"fraud['ti'].unique()","5319bed3":"fraud.ti.value_counts()","a002c009":"colnames = list(fraud.columns)\ncolnames","73b381df":"x_train, x_test,y_train,y_test = train_test_split(x,y, test_size=0.4,random_state=80)","db6b5e12":"model = DecisionTreeClassifier(criterion = 'entropy',max_depth=4)\nmodel.fit(x_train,y_train)","97d1e980":"tree.plot_tree(model);","f64232de":"fn=[\n 'Undergrad','Marital.Status','cp','we','Urban']\ncn=['Good','Risky']\nfig, axes = plt.subplots(nrows = 1,ncols = 1,figsize = (4,4), dpi=300)\ntree.plot_tree(model,\n               feature_names = fn, \n               class_names=cn,\n               filled = True);","8a39d1c3":"preds = model.predict(x_test) # predicting on test data set \npd.Series(preds).value_counts() # getting the count of each category ","2dc21aa6":"preds","4e1c8263":"# Building Decision Tree Classifier using Entropy Criteria"}}