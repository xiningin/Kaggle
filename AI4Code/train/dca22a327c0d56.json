{"cell_type":{"76d998a3":"code","bf10362b":"code","b381f056":"code","741fa781":"code","d91ac825":"code","b62f1fcc":"code","b5de7230":"code","2d5576ef":"code","b9fd6b5d":"code","d755995e":"code","b6b14619":"code","db0fce8d":"code","a505bbba":"code","dbf284ad":"code","f0a974a4":"code","d2fc455c":"code","d89f47e0":"code","403c3f02":"code","f5409279":"code","e1e5fe6e":"code","01613963":"code","d7e66c34":"code","7ef7f2a0":"code","761617ca":"code","a8da1c20":"code","fc438e15":"code","bd3b13c4":"code","1cae7c3a":"code","ab62ba47":"code","573066fd":"code","9dee6e4b":"code","0e024dc6":"code","65a47707":"code","e9e6fa1c":"code","4c7db679":"code","b509052e":"code","ba4ca4eb":"code","7a98bbda":"code","8f744d98":"code","f1a26132":"code","506b5c5a":"code","60e81905":"code","d7421ea0":"code","680b448e":"code","b43adfa8":"code","42398a60":"code","a9509408":"code","864e7957":"code","c1bb0e11":"code","f2e9ed1d":"code","c9b704fc":"code","2fdd98fe":"code","052c364a":"code","aa30ed1b":"code","ef6be04f":"code","80b4b59d":"code","2a885ea9":"code","3be505df":"code","5bac2f11":"code","26a003b3":"code","bfbc9a50":"code","457dd039":"code","f234ea23":"code","df94b9c6":"code","a70764dc":"code","de59b9fc":"code","4716f857":"code","bfdf553b":"code","40a98189":"code","f678ad8d":"code","442b5005":"code","660a5e6c":"code","1965c29c":"code","70e9bc92":"code","2d8929ea":"code","ca71200c":"code","9553a322":"code","ef8a62d6":"code","2af8157c":"code","4c19c339":"code","6bec58eb":"code","d082f72b":"markdown","beb05fa6":"markdown","b9acb3b3":"markdown","4f4161d7":"markdown","5fc88f6d":"markdown","dbb76409":"markdown","0fd2eeb3":"markdown","28469e00":"markdown","b4054b65":"markdown","b8b39bfe":"markdown","53a1cbc0":"markdown","e85248ca":"markdown","15ab6b27":"markdown","b792cb04":"markdown","63871ef5":"markdown","bf21ee72":"markdown","aee0ed89":"markdown","f9aaee90":"markdown","182efcd8":"markdown","f1519a07":"markdown","9590f314":"markdown","bfdf57ef":"markdown","ce0ba154":"markdown","d0445beb":"markdown"},"source":{"76d998a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bf10362b":"file = open('\/kaggle\/input\/datasetjupyter\/files\/adult.data', 'r')","b381f056":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n     data1=line.split(', ')\n     if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])","741fa781":"# print(data)","d91ac825":"print (data[1:2])\nprint (data[1])","b62f1fcc":"df = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.head()","b5de7230":"df.tail()","2d5576ef":"df.shape","b9fd6b5d":"counts = df.groupby('country').size()\n\nprint (counts) ","d755995e":"counts = df.groupby('age').size() # grouping by age\nprint (counts)","b6b14619":"counts.head(30)","db0fce8d":"counts.max()","a505bbba":"counts[counts==counts.max()]","dbf284ad":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape","f0a974a4":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","d2fc455c":"fm =df[(df.sex == 'Female')]\nfm.shape","d89f47e0":"fm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","403c3f02":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","f5409279":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')","e1e5fe6e":"print ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')","01613963":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()\n\nprint ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)","d7e66c34":"ml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)","7ef7f2a0":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)","761617ca":"ml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)","a8da1c20":"ml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)","fc438e15":"import matplotlib.pyplot as plt","bd3b13c4":"ml_age=ml['age']\nml_age.hist(density=False, histtype='stepfilled', bins=20)","1cae7c3a":"fm_age=fm['age']\nfm_age.hist(density=False, histtype='stepfilled', bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()","ab62ba47":"import seaborn as sns\nfm_age.hist(density=0, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=0, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Samples',fontsize=15)\nplt.show()","573066fd":"fm_age.hist(density=1, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=20)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('PMF',fontsize=15)\nplt.show()","9dee6e4b":"ml_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","0e024dc6":"fm_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","65a47707":"ml_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","e9e6fa1c":"fm_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","4c7db679":"ml_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5)   # default number of bins = 10\nfm_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","b509052e":"ml_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20)\nfm_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","ba4ca4eb":"print (\"The mean sample difference is \", ml_age.mean() - fm_age.mean()) ","7a98bbda":"df['age'].median()","8f744d98":"len(df[(df.income == '>50K\\n') & (df['age'] < df['age'].median() - 15)])","f1a26132":"len(df[(df.income == '>50K\\n') & (df['age'] > df['age'].median() + 35)])","506b5c5a":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] > df['age'].median()-15)])\n\ndf2.shape","60e81905":"ml1_age=ml1['age']\nfm1_age=fm1['age']","d7421ea0":"ml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age>df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age > df['age'].median()- 15)])","680b448e":"mu2ml = ml2_age.mean()\nstd2ml = ml2_age.std()\nmd2ml = ml2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income male population\n\nprint (\"Men statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", ml2_age.min(), \"Max:\",ml2_age.max())","b43adfa8":"mu3ml = fm2_age.mean()\nstd3ml = fm2_age.std()\nmd3ml = fm2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income female population\nprint (\"Women statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", fm2_age.min(), \"Max:\",fm2_age.max())","42398a60":"print ('The mean difference with outliers is: %4.2f.'% (ml_age.mean() - fm_age.mean()))\nprint (\"The mean difference without outliers is: %4.2f.\"% (ml2_age.mean() - fm2_age.mean()))","a9509408":"plt.figure(figsize=(13.4,5))\n\ndf.age[(df.income == '>50K\\n')].plot(alpha=.25, color='blue')\ndf2.age[(df2.income == '>50K\\n')].plot(alpha=.45,color='red')\n\nplt.ylabel('Age')\nplt.xlabel('Samples')","864e7957":"countx,divisionx = np.histogram(ml2_age, density=True)\ncounty,divisiony = np.histogram(fm2_age, density=True)","c1bb0e11":"val = [(divisionx[i]+divisionx[i+1])\/2 for i in range(len(divisionx)-1)]\n\nplt.plot(val, countx-county,'o-')\nplt.title('Differences in promoting men vs. women')\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Differences',fontsize=15)\nplt.show()","f2e9ed1d":"print (\"Remember:\\n We have the following mean values for men, women and the difference:\\nOriginally: \", ml_age.mean(), fm_age.mean(),  ml_age.mean()- fm_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"For high-income: \", ml1_age.mean(), fm1_age.mean(), ml1_age.mean()- fm1_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"After cleaning: \", ml2_age.mean(), fm2_age.mean(), ml2_age.mean()- fm2_age.mean()) # The difference between the mean values of male and female populations.)\n\nprint (\"\\nThe same for the median:\")\nprint (ml_age.median(), fm_age.median(), ml_age.median()- fm_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml1_age.median(), fm1_age.median(), ml1_age.median()- fm1_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml2_age.median(), fm2_age.median(), ml2_age.median()- fm2_age.median()) # The difference between the mean values of male and female populations.)","c9b704fc":"def skewness(x):\n    res=0\n    m=x.mean()\n    s=x.std()\n    for i in x:\n        res+=(i-m)*(i-m)*(i-m)\n    res\/=(len(x)*s*s*s)\n    return res\n\nprint (\"The skewness of the male population is:\", skewness(ml2_age))\nprint (\"The skewness of the female population is:\", skewness(fm2_age))","2fdd98fe":"def pearson(x):\n    return 3*(x.mean()-x.median())\/x.std()\n\nprint (\"The Pearson's coefficient of the male population is:\", pearson(ml2_age))\nprint (\"The Pearson's coefficient of the female population is:\", pearson(fm2_age))","052c364a":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\n\nml2 = ml1.drop(ml1.index[(ml1['age']>df['age'].median() +35)&(ml1['age']> df['age'].median()- 15)])\n\nfm2 = fm1.drop(fm1.index[(fm1['age']> df['age'].median() + 35)& (fm1['age']> df['age'].median() - 15)])\n\nprint (ml2.shape, fm2.shape)","aa30ed1b":"print (\"Men grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(ml2_age[ml2_age<41])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(ml2_age[ml2_age >44])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(ml2_age[(ml2_age>40) & (ml2_age< 45)])\/float(len(ml2_age.index)))),\"%.\")","ef6be04f":"print (\"Women grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(fm2_age[fm2_age <41])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(fm2_age[fm2_age >44])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(fm2_age[(fm2_age>40) & (fm2_age< 45)])\/float(len(fm2_age.index)))),\"%.\")","80b4b59d":"print (\"The male mean:\", ml2_age.mean())\nprint (\"The female mean:\", fm2_age.mean())","2a885ea9":"ml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(1-ml2_young\/fm2_young))","3be505df":"ml2_elder = len(ml2_age[(ml2_age>44)])\/float(len(ml2_age.index))\nfm2_elder  = len(fm2_age[(fm2_age>44)])\/float(len(fm2_age.index))\nprint (\"The relative risk of male late promotion is: \", 100*ml2_elder\/fm2_elder)","5bac2f11":"l = 3\nx=np.arange(0,2.5,0.1)\ny= 1- np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential CDF: $\\lambda$ =%.2f'% l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","26a003b3":"from __future__ import division\nimport scipy.stats as stats\n\nl = 3\nx=np.arange(0,2.5,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential PDF: $\\lambda$ =%.2f'% l, fontsize=15)\nplt.xlabel('x', fontsize=15)\nplt.ylabel('PDF', fontsize=15)\nplt.show()","bfbc9a50":"l = 0.25\n\nx=np.arange(0,25,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential: $\\lambda$ =%.2f' %l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('PDF',fontsize=15)\nplt.show()","457dd039":"u=6 # mean\ns=2 # standard deviation\n\nx=np.arange(0,15,0.1)\n\ny=(1\/(np.sqrt(2*np.pi*s*s)))*np.exp(-(((x-u)**2)\/(2*s*s)))\n\nplt.plot(x,y,'-')\nplt.title('Gaussian PDF: $\\mu$=%.1f, $\\sigma$=%.1f'%(u,s),fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('Probability density',fontsize=15)\nplt.show()","f234ea23":"fig, ax = plt.subplots(1, 4, sharey=True, squeeze=True, figsize=(14, 5))\nx = np.linspace(0, 1, 100)\nfor i in range(4):\n    f = np.mean(np.random.random((10000, i+1)), 1)\n    m, s = np.mean(f), np.std(f, ddof=1)\n    fn = (1\/(s*np.sqrt(2*np.pi)))*np.exp(-(x-m)**2\/(2*s**2))  # normal pdf            \n    ax[i].hist(f, 40, density=True, color=[0, 0.2, .8, .6]) \n    ax[i].set_title('n=%d' %(i+1))\n    ax[i].plot(x, fn, color=[1, 0, 0, .6], linewidth=5)\nplt.suptitle('Demonstration of the central limit theorem for a uniform distribution', y=1.05)\nplt.show()","df94b9c6":"from scipy.stats.distributions import norm\n\n# Some random data\ny = np.random.random(15) * 10\nx = np.linspace(0, 10, 100)\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\ny = np.r_[x1, x2] # r_ Translates slice objects to concatenation along the first axis.\nx = np.linspace(min(y), max(y), 100)\n\n# Smoothing parameter\ns = 0.4\n\n# Calculate the kernels\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'go', ms=10)","a70764dc":"from scipy.stats import kde\n\nx1 = np.random.normal(-1, 0.5, 15)\n\n# parameters: (loc=0.0, scale=1.0, size=None)\n\nx2 = np.random.normal(6, 1, 10)\ny = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\n\nx = np.linspace(min(y), max(y), 100)\ns = 0.4   # Smoothing parameter\n\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\n# Calculate the kernels\ndensity = kde.gaussian_kde(y)\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'bo', ms=10)","de59b9fc":"xgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(y, bins=28, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","4716f857":"# Create a bi-modal distribution with a mixture of Normals.\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\n\n# Append by row\nx = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\nplt.hist(x, bins=18, density=True)","bfdf553b":"density = kde.gaussian_kde(x)\nxgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(x, bins=18, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","40a98189":"x = np.random.normal(0.0, 1.0, 10000)\na = plt.hist(x,50,density='True')","f678ad8d":"print ('The empirical mean of the sample is ', x.mean())","442b5005":"NTs=200\nmu=0.0\nvar=1.0\nerr = 0.0\nNPs=1000\nfor i in range(NTs):\n    x = np.random.normal(mu, var, NPs)\n    err += (x.mean()-mu)**2\n\nprint ('MSE: ', err\/NTs)","660a5e6c":"def Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nX = [5, -1, 3.3, 2.7, 12.2]\nX= np.array(X)\nY = [10, 12, 8, 9, 11]\n\nprint (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\n\nprint (\"Cov(X, Y) = %.2f\" % Cov(X, Y))","1965c29c":"MAXN=100\nMAXN=40\n\nX=np.array([[1,9],[3, 2], [5,3],[5.5,4],[6,4],[6.5,4],[7,3.5],[7.5,3.8],[8,4],\n[8.5,4],[9,4.5],[9.5,7],[10,9],[10.5,11],[11,11.5],[11.5,12],[12,12],[12.5,12],[13,10]])","70e9bc92":"plt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('Economic growth(T)',fontsize=15)\nplt.ylabel('Stock market returns(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","2d8929ea":"X=np.array([[1,8],[2, 7], [3,6],[4,8],[5,8],[6,7],[7,7],[8,5],[9,5],[10,6],[11,4],[12,5],[13,3],[14,2],[15,2],[16,1]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('World Oil Production(T)',fontsize=15)\nplt.ylabel('Gasoline prices(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","ca71200c":"def Corr(X, Y):\n    assert len(X) == len(Y)\n    return Cov(X, Y) \/ np.prod([np.std(V) for V in [X, Y]])\n\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\n\nY=np.random.random(len(X))\n\nprint (\"Corr(X, Y) = %.5f\" % Corr(X, Y))","9553a322":"def list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nl = [7, 1, 2, 5]\nprint (\"ranks: \", list2rank(l))\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nX = [10, 20, 30, 40, 1000]\nY = [-70, -1000, -50, -10, -20]\nplt.plot(X,'ro')\nplt.plot(Y,'go')\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, Y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X, Y))","ef8a62d6":"X=np.array([[10.0, 8.04,10.0, 9.14, 10.0, 7.46, 8.0, 6.58],\n[8.0,6.95, 8.0, 8.14, 8.0, 6.77, 8.0, 5.76],\n[13.0,7.58,13.0,8.74,13.0,12.74,8.0,7.71],\n[9.0,8.81,9.0,8.77,9.0,7.11,8.0,8.84],\n[11.0,8.33,11.0,9.26,11.0,7.81,8.0,8.47],\n[14.0,9.96,14.0,8.10,14.0,8.84,8.0,7.04],\n[6.0,7.24,6.0,6.13,6.0,6.08,8.0,5.25],\n[4.0,4.26,4.0,3.10,4.0,5.39,19.0,12.50],\n[12.0,10.84,12.0,9.13,12.0,8.15,8.0,5.56],\n[7.0,4.82,7.0,7.26,7.0,6.42,8.0,7.91],\n[5.0,5.68,5.0,4.74,5.0,5.73,8.0,6.89]])","2af8157c":"plt.subplot(2,2,1)\nplt.scatter(X[:,0],X[:,1],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","4c19c339":"plt.subplot(2,2,2)\nplt.scatter(X[:,2],X[:,3],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.subplot(2,2,3)\nplt.scatter(X[:,4],X[:,5],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","6bec58eb":"plt.subplot(2,2,4)\nplt.scatter(X[:,6],X[:,7],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.gcf().set_size_inches((10,10))","d082f72b":"The amount of cases for each country, so make sure that the amount of data for each country is sufficient to generalise.","beb05fa6":"- Q23) What do you obtain as a result?\n\nThe MSE is computed for a set of random data, so it changes each time the code is ran. One result is the following: MSE = 0.0007951621357964347","b9acb3b3":"- Q22) What does the figure show?\n\n","4f4161d7":"- Q21) Explain the result.\n\nBoth men and women have a distribution that skews right. Women skew a bit more to the right than men and their age distibution is thus more asymmetric.","5fc88f6d":"- Q14) Show the graphics and an explain the result.\n\n- Q15) Show the graphics and an explain the result.\n\nThe PMF was already discussed in question 13 for both men and women.","dbb76409":"- Q5)  How many items are there for USA? and for Mexico?\n\nThere are 29170 items for the US and 643 for Mexico.","0fd2eeb3":"- Q17) Show the graphics and an explain the result.\n\nSame can be done for women. If we take age 40 as an example again, the chance increases to about 70%, again indicating that the population of women is younger in the data.","28469e00":"- Q18) Show the graphics and an explain the result.\n\nAlready discussed in question 13, this time the number of bins is only 10, so more ages are aggregated to one block.","b4054b65":"- Q19) Show the graphics and an explain the result.\n\nAs said before, the CDF of women is higher, indicating that the population of women in the data are younger than men.","b8b39bfe":"- Q4) Describe an explain the result.\n\nThe amount of rows and columns of df are shown. There are 32561 rows and 15 columns of data in the dataframe df. This means that there are 32561 people in the dataframe, with 18 different properties of per person.","53a1cbc0":" - Q1) What is the obtained result? What did you ask for in the previous command? Explain.\n \nA row of the data is printed. It shows the info of one person in the data showing age, ethnicity, earnings, nationality...","e85248ca":"- Q10) Show the graphics and an explain the result.\n\nThe plot shows the distribution of age among the men in the dataframe. It is clear that most men within the population of this data is around 40, as the mean and median already suggested.","15ab6b27":"- Q7) Decribe and explain the result.\n\nThe result shows the percentage of people from the entire data in df that has higher income than 50k a year. In general, this is 24% of all people. There is a big difference between men and women though. Only 10 % of woman have high income, while this is 30% for men.","b792cb04":"- Q16) Show the graphics and an explain the result.\n\nThe cumulative distribution function (CDF), or just distribution function, describes the probability that a real-valued random variable X with a given probability distribution will be found to have a value less than or equal to x. So for example there is a sixty percent chance that a random age X is equal to or lower than 40 years old.","63871ef5":"- Q20) Explain the result.\n\nThe woman in this data population are on average 2.6 years younger than the men.","bf21ee72":"- Q10) Describe an explain the result.\n\nThe median is calculated for:\n\n1) Men and women\n2) Men and women with high income\n3) Hours per week for men and women\n\nThe results are comparable to the ones for the average.","aee0ed89":"- Q6) What is the age of the most represented people?\n\nThe most represented age is 36","f9aaee90":"- Q2) Describe an explain the result.\n\nNow we obtain the data in a more organised structure: a dataframe, a tabular data structure. It gives a better oversight of the data present.\n\n","182efcd8":"- Q8) Describe an explain the result.\n\nThe general average age for both men and women is lower than the high income average age. This means most people start earning more when they get older. The women in the data are about 3 years younger on average.","f1519a07":"- Q11) Show the graphics and an explain the result.\n\nThe same kind of plot is shown for women. The data is a bit more spread here, as the larger std value already suggested.","9590f314":"- Q12) Show the graphics and an explain the result.\n\nThis plot shows the same as the previous two, but the number of bins are doubled. This means the number of bars shown is twice as much as the previous plots. Both ages for men and women are plotted this time, so they are easier to compare. It is clear that the amount of men represented in this population of the data is much larger than the amount of women. This is also shown in the shape of the dataframe: 21790 men and 10771 women.\n\n","bfdf57ef":"- Q13) Show the graphics and an explain the result.\n\nNow both histograms are normalized and thus even better comparable (divided by number of samples). It shows that there are relatively more young women than young men in the population and more older men than older woman. This can be a possible explanation of why the ratio of high earning women is that much lower (10 vs 30%) as calculated ealier.","ce0ba154":"- Q9) Describe and explain the result\n\nThere are three statistics shown for both men and women concerning the amount of hours they work each week:\n1) The average\n2) The variance, which shows that there is a large spread in the data\n3) The standard deviation is calculated as well, in general this shows how spread out the data is as well, but it's easier to interpret. It is a measure of how far each observed value is from the mean. In any distribution, about 95% of values will be within 2 standard deviations of the mean.","d0445beb":"- Q3) Describe and explain the result. Compare with the previous one.\n\nThe final 5 persons\/rows are shown. The representation of the data is the same, but instead of the first 5, the final 5 rows are shown."}}