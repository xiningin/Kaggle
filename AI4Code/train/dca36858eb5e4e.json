{"cell_type":{"874e9e57":"code","2cd1fa73":"code","4eb99fcc":"code","88ab74f2":"code","bdddaa75":"code","e67dc171":"code","69cc2e3f":"code","8b6fe88f":"code","de5aa05b":"code","a6795a0f":"code","117a4d34":"code","2bcab81e":"code","eb999ce1":"code","f1d0e2b8":"code","b73781b7":"code","21eb78ed":"code","65809610":"code","c75e7b38":"code","3b41b2c0":"code","f6fea178":"code","b8da4f34":"code","ccb40565":"code","8ecc3ea7":"code","9795ee84":"code","e0b6493b":"code","12d3c415":"code","5ebefd06":"code","bdbc74e0":"code","6d1ff896":"code","10c39895":"code","8bad28db":"code","e086cc7c":"code","25fef083":"code","2b81c098":"code","b585a0d4":"code","2e64b8b5":"code","74257972":"code","7af51be8":"code","be9891a8":"code","3a1c50ad":"markdown","b29af82f":"markdown","a3b69daa":"markdown","cdecf0c1":"markdown","7ab89392":"markdown","16d41e68":"markdown","98581282":"markdown","6abc4f4d":"markdown","95cc0d4d":"markdown","de441927":"markdown","4f04e010":"markdown","d2896d10":"markdown","48a196f7":"markdown","c629a6c7":"markdown"},"source":{"874e9e57":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2cd1fa73":"song_df = pd.read_csv(\"..\/input\/spotify-dataset-19212020-160k-tracks\/data.csv\")","4eb99fcc":"song_df.head()","88ab74f2":"data_desc = song_df.describe()\ndata_desc","bdddaa75":"data_desc.to_csv(\"..\/working\/data_desc.csv\")","e67dc171":"song_filtered = song_df[song_df.popularity >= 30]\nsong_filtered.count()","69cc2e3f":"features = song_filtered.drop([\"id\", \"artists\", \"explicit\",\"mode\", \"popularity\", \"release_date\",  \"year\", \"name\", \"duration_ms\"], axis=1)\nfeatures.head()","8b6fe88f":"songs = song_filtered[[\"id\", \"name\", \"artists\", \"explicit\",\"mode\", \"popularity\",  \"year\", \"duration_ms\"]]\nsongs = songs.rename({\"id\": \"song_id\"}, axis=\"columns\")\nsongs = songs.astype({'mode':'int32', 'explicit':'int32'})\nsongs.head()","de5aa05b":"songs.count()","a6795a0f":"songs.to_csv('..\/working\/songs.csv', index_label='id')","117a4d34":"from sklearn.metrics.pairwise import cosine_distances\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.preprocessing import MinMaxScaler","2bcab81e":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","eb999ce1":"sns.set(style=\"white\", palette=\"muted\", color_codes=True)\nrs = np.random.RandomState(10)\n\n# Set up the matplotlib figure\nf, axes = plt.subplots(3, 3, figsize=(15, 15))\nsns.despine(left=True)\nft = features.drop(\"key\", axis=1)\nfor i, col in enumerate(ft.columns):\n    r = i \/\/ 3\n    c = i % 3\n    sns.distplot(features[col], color=\"m\", ax=axes[r, c])","f1d0e2b8":"sns.distplot(features[\"valence\"], color=\"m\")","b73781b7":"from sklearn.metrics.pairwise import euclidean_distances\nfrom sklearn.manifold import Isomap\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import minmax_scale\nimport json","21eb78ed":"feature_vals = features.values\nfeature_vals = minmax_scale(feature_vals)\nsample_size = 5000\nnp.random.seed(13437375)\nsample_ids = np.random.choice(feature_vals.shape[0], sample_size, replace=False)\nfeature_samples = feature_vals[sample_ids, :]","65809610":"scaled_features = pd.DataFrame(feature_vals, columns=features.columns)","c75e7b38":"scaled_features.to_csv('..\/working\/scaled_features.csv')","3b41b2c0":"songs_temp = songs.reset_index()","f6fea178":"embedding = Isomap(n_components=3)\nfeature_transformed = embedding.fit_transform(feature_samples)","b8da4f34":"df = pd.DataFrame(feature_transformed, columns=['X', 'Y', 'Z'])\ndf_isomap = df\ndf.head()","ccb40565":"# Make the plot\nfig = plt.figure()\nax = fig.gca(projection='3d')\nax.plot_trisurf(df['Y'], df['X'], df['Z'], cmap=plt.cm.viridis, linewidth=0.2)\nplt.show()","8ecc3ea7":"pca = PCA(n_components=3)\nlinear_embeddings = pca.fit_transform(feature_samples)","9795ee84":"df = pd.DataFrame(linear_embeddings, columns=['X', 'Y', 'Z'])\ndf_pca = df\ndf.head()","e0b6493b":"# Make the plot\nfig = plt.figure()\nax = fig.gca(projection='3d')\nax.plot_trisurf(df['Y'], df['X'], df['Z'], cmap=plt.cm.viridis, linewidth=0.2)\nplt.show()","12d3c415":"#idx for 4e5lEqydMatcEio6ef9Dpf (Phenomenal by Eminem)\nsample_id = songs_temp[songs_temp.song_id == '4e5lEqydMatcEio6ef9Dpf'].index.tolist()[0]\nprint(sample_id)\nsample_id = np.where(sample_ids == sample_id)[0][0]\nprint(sample_id)","5ebefd06":"sample_ids[sample_id]","bdbc74e0":"# cosine\ndef cosine_dist(u, v):\n    u_l2 = np.sqrt(np.dot(np.transpose(u), u))\n    v_l2 = np.sqrt(np.dot(np.transpose(v), v))\n    \n    numerator = np.dot(np.transpose(u), v)\n    dist = np.arccos((numerator)\/(u_l2*v_l2))\/np.pi\n    return dist\n","6d1ff896":"# euclidean\ndef euclidean_dist(u, v):\n    a = np.subtract(u, v)\n    dist = np.dot(np.transpose(a), a)\n    return dist","10c39895":"def dist_2songs(feature1, feature2, metric=\"cosine\"):\n    print(metric)\n    dist = -1;\n    if(metric == \"cosine\"):\n        #print(\"calculating cosine\")\n        dist = cosine_dist(feature1, feature2)\n    elif(metric == \"euclidean\"):\n        #print(\"calculating euclidean\")\n        a = np.subtract(feature1, feature2)\n        dist = np.dot(np.transpose(a), a)\n        \n    return dist\n","8bad28db":"distances = []\nfor i in feature_samples:\n    distances.append(cosine_dist(feature_samples[sample_id], i))\n    \nprint(len(distances))\ncosine_recoms = np.argsort(np.array(distances))[1:16]\ncosine_recoms = sample_ids[cosine_recoms]\ncosine_rec_name = songs_temp.name[cosine_recoms].tolist()\ncosine_rec_ids = songs_temp.song_id[cosine_recoms].tolist()\n\nprint(cosine_rec_name)   \n    ","e086cc7c":"distances = []\nfor i in feature_samples:\n    distances.append(euclidean_dist(feature_samples[sample_id], i))\n    \nprint(len(distances))\neuc_recoms = np.argsort(np.array(distances))[1:16]\neuc_recoms = sample_ids[euc_recoms]\neuc_rec_name = songs_temp.name[euc_recoms].tolist()\neuc_rec_ids = songs_temp.song_id[euc_recoms].tolist()\n\nprint(euc_rec_name)    \n    ","25fef083":"distances = []\nfor i in df_pca.values:\n    distances.append(euclidean_dist(df_pca.values[sample_id], i))\n    \nprint(len(distances))\npca_recoms = np.argsort(np.array(distances))[1:16]\npca_recoms = sample_ids[pca_recoms]\npca_rec_name = songs_temp.name[pca_recoms].tolist()\npca_rec_ids = songs_temp.song_id[pca_recoms].tolist()\n\nprint(pca_rec_name)    \n    ","2b81c098":"distances = []\nfor i in df_isomap.values:\n    distances.append(euclidean_dist(df_isomap.values[sample_id], i))\n    \nprint(len(distances))\niso_recoms = np.argsort(np.array(distances))[1:16]\niso_recoms = sample_ids[iso_recoms]\niso_rec_name = songs_temp.name[iso_recoms].tolist()\niso_rec_ids = songs_temp.song_id[iso_recoms].tolist()\n\nprint(iso_rec_name)    \n    ","b585a0d4":"df = pd.DataFrame({'cosine':cosine_rec_name, 'euclidean': euc_rec_name, 'pca': pca_rec_name, 'isomap': iso_rec_name})\ndf","2e64b8b5":"def get_recommendation(current_feature, threshold):\n    a = np.subtract(feature_vals, current_feature)\n    a = np.multiply(a, a)\n    distances = np.sum(a, axis=1)\n    distances = distances[distances > threshold]\n    recom_list = songs_temp.song_id[np.argsort(distances)[1:4]].tolist()\n    return recom_list","74257972":"def create_recommendations(idx):\n    recommendations = []\n    for i in range(idx, min(idx+sample_size, feature_vals.shape[0])):\n        recommendation = dict()\n        recommendation['name'] = songs_temp.song_id[i]\n        recommendation[\"neighbors\"] = get_recommendation(feature_vals[i], 0.5)\n        recommendations.append(recommendation)\n    return recommendations\n","7af51be8":"import time\nstart_time = time.time()\n\nfor i in range(0, feature_vals.shape[0], sample_size):\n    recom = create_recommendations(i)\n    filename = f\"..\/working\/recom_{i}.json\"\n    print(f\"writing file {i\/sample_size}\")\n    with open(filename, \"w\") as outfile:\n        json.dump(recom, outfile) \n\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","be9891a8":"dist_2songs('3rJAP9G6hjx2kN8Jsvas09', '1fipvP2zmef6vN2IwXfJhY')","3a1c50ad":"### PCA - euclidean based recommendations","b29af82f":"## **Vizualization of feature space using Linear and Non Linear decomposition**","a3b69daa":"## **Visualization**","cdecf0c1":"### Euclidean distance based recommendations","7ab89392":"save a copy of scaled_features","16d41e68":"## Scaling the values using min max scaler","98581282":"## Generating Recommendations","6abc4f4d":"### Comparative View","95cc0d4d":"### ISOMAP","de441927":"## PCA","4f04e010":"### ISOMAP - euclidean based recommendations","d2896d10":"## Survey of Distance Metrics","48a196f7":"### Cosine Distance based recommendations","c629a6c7":"**Run the code below when you want to generate recommendations. With current data it outputs 20 files and takes around 10 minutes to run**"}}