{"cell_type":{"6000a7a8":"code","5f9c201e":"code","ccf62a73":"code","0341fd8e":"code","d2b31a0e":"code","46254dba":"code","5a8f483e":"code","828e7057":"code","1f06c6bf":"code","407a4d94":"code","1289e8a8":"code","664d5850":"code","e38b339b":"code","4d99ba4f":"code","0cb64903":"code","4f48dbe8":"code","d0b9eafb":"code","8556c5bc":"code","1211aa91":"code","dc17c49b":"code","90a9bf5c":"code","b94cb4db":"code","7bc77acb":"code","67b046f4":"code","6171d452":"code","9c328b38":"code","39b581d7":"code","0aa6d370":"code","c6613fd2":"markdown","224e00de":"markdown","63a1ffa4":"markdown","ac5c91d7":"markdown","36c98ae2":"markdown","edae4701":"markdown","53347ada":"markdown","97042bdd":"markdown","c766fdb9":"markdown","6ac85b5b":"markdown","50873df6":"markdown","831eb183":"markdown","52b6b8f4":"markdown","5b50378d":"markdown"},"source":{"6000a7a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5f9c201e":"pip install pywaffle","ccf62a73":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","0341fd8e":"dataset = pd.read_csv('\/kaggle\/input\/diabetic-dataset\/diabetic_data.csv')\ndataset = dataset.drop(['weight', 'payer_code', 'diag_1','diag_2', 'diag_3'], axis=1)\ndataset['race'] = dataset['race'].ffill()\ndataset.medical_specialty.mode()\ndataset[\"medical_specialty\"].fillna(\"InternalMedicine\", inplace = True) \ndataset.head(5)","d2b31a0e":"dataset[['race','gender', 'medical_specialty', \n         'change' , 'diabetesMed' ,\n         'age']] = dataset[['race','gender',\n                            'medical_specialty'\n                            , 'change', 'diabetesMed', 'age']].astype('category')\ndataset[['encounter_id', 'patient_nbr']] = dataset[['encounter_id',\n                                                    'patient_nbr']].astype('int')                            \ndataset[['admission_type_id', 'discharge_disposition_id',\n         'admission_source_id', 'time_in_hospital']] = dataset[['admission_type_id', \n                                                                'discharge_disposition_id', \n                                                                'admission_source_id' , \n                                                                'time_in_hospital']].astype('int')\ndataset[['num_lab_procedures' , 'num_procedures' ,\n         'num_medications', 'number_outpatient' , \n         'number_emergency' , 'number_inpatient', \n         'number_diagnoses']] = dataset[['num_lab_procedures' , 'num_procedures' ,\n         'num_medications', 'number_outpatient' , \n         'number_emergency' , 'number_inpatient', \n         'number_diagnoses']].astype(\"int\")                                                        \ndataset.dtypes       \nfeatures_discription = dataset.describe(include = \"all\")      \nfeatures_discription              ","46254dba":"plt.boxplot(dataset['number_diagnoses'] ,vert=True )\nplt.ylabel('Number of Diagonsis Entered')\nplt.title(\"Outliers in Attribute :Number of diagonsis\")\nplt.show()\n","5a8f483e":"plt.boxplot(dataset['time_in_hospital'] ,vert=True )\nplt.ylabel('Time spent in Hospital(Days)')\nplt.title(\"Outliers in Attribute :Time in hospital\")\nplt.show()","828e7057":"plt.boxplot(dataset['num_lab_procedures'] , vert=True)\nplt.ylabel('Number of Lab Procedures for the patient')\nplt.title(\"Outlier Analysis for numlab_procedures\") \nplt.show()","1f06c6bf":"plt.boxplot(dataset['num_procedures'] , vert=True)\nplt.ylabel('Number of Procedures for the patient ')\nplt.title(\"Outlier Analysis for num_procedures\") \nplt.show()","407a4d94":"plt.boxplot(dataset['num_medications'] , vert=True)\nplt.ylabel('Number of Medication recorded at time of Admission ')\nplt.title(\"Outlier Analysis for num_medications\") \nplt.show()","1289e8a8":"dummy_dataset1 = dataset[(dataset['num_lab_procedures'] >= 8) & (dataset['num_lab_procedures'] <= 96) ]\ndummy_dataset2 =  dataset[(dataset['num_medications'] >= 5) & (dataset['num_medications'] <= 35) ]\n\ntemp1 = pd.DataFrame()\ntemp1 = temp1.assign(encounter=dummy_dataset1['encounter_id'], \n                     labprocedure=dummy_dataset1['num_lab_procedures'])\n\nUnwanted = pd.DataFrame()\nUnwanted =  Unwanted.assign(encounter=dummy_dataset2['encounter_id'], \n                            medications=dummy_dataset2['num_medications'])\n\ntemp1['medications_no'] = Unwanted.medications\ntemp1 = temp1.dropna()\ntemp1","664d5850":"plt.boxplot(temp1['labprocedure'] , vert= True)\nplt.title(\"Outlier Analysis for numlab_procedures after elimating Outliers\")\nplt.ylabel('Number of Lab Procedures for the patient ') \nplt.show()\n\nplt.boxplot(temp1['medications_no'] , vert= True)\nplt.title(\"Outlier Analysis for num_medications after elimating Outliers\") \nplt.ylabel('Number of Medication recorded at time of Admission ')\nplt.show()","e38b339b":"plt.scatter(temp1['labprocedure'], temp1['medications_no'])\nplt.xlabel('Number of Lab Procedures for the patient')\nplt.ylabel('Medication recorded at the time of Admission')\nplt.title('Scatter Plot')\nplt.show()","4d99ba4f":"temp1['Diagonsis_entered'] = dataset.number_diagnoses\nplt.scatter(temp1['labprocedure'] , temp1['Diagonsis_entered'])\nplt.xlabel('Number of Lab Procedures for the patient')\nplt.ylabel('Number of Diagonsis Entered at the time of Admission')\nplt.title(\"Scatter Plot\" , fontsize = 14)\nplt.show()","0cb64903":"plt.scatter(temp1['Diagonsis_entered'] , temp1['medications_no'])\nplt.xlabel('Number of Diagonsis Entered at the time of Admission')\nplt.ylabel('Medication recorded at the time of Admission')\nplt.title(\"Scatter Plot\" , fontsize = 14)\nplt.show()","4f48dbe8":"AgeClassification = dataset.age.value_counts()\nAgeClassification = AgeClassification.reset_index()\nAgeClassification.columns = ['Age_Bins' , 'Number_of_Patients']\n#AgeClassification = AgeClassification.sort_values('Number_of_Patients')\n#AgeClassification.to_frame()\nsns.barplot(x='Number_of_Patients' , y='Age_Bins' , \n            data=AgeClassification , order=AgeClassification['Age_Bins'], palette=\"coolwarm\" , )\nplt.title(\"Barplot:No of Patients Across each Age Group\", fontsize =18)\nplt.ylabel('Age Bins', fontsize=10)\nplt.legend(labels=['Number of Patients'], loc=4)\nplt.show() ","d0b9eafb":"SexBifercation = dataset.gender.value_counts()\nSexBifercation = SexBifercation.reset_index()\nSexBifercation.columns = ['Sex_Patient', 'Total_No_of_Patients']\nMalePercentage = SexBifercation.Total_No_of_Patients[1]\/len(dataset)*100\nFemalePercentage = SexBifercation.Total_No_of_Patients[0]\/len(dataset)*100\n\n\nfrom pywaffle import Waffle\n\ndata= {'Male': 46.23, 'Female': 53.75, 'NotDisclosed': 0.28}\nfig = plt.figure(\n    FigureClass=Waffle, \n    rows=5, \n    values=data, \n    colors=(\"#983D3D\", \"#232066\", \"#DCB732\"),\n    title={'label': 'Waffle Graph:Patient Sex Bifercation', 'loc': 'left'},\n    labels=[\"{0} ({1}%)\".format(k, v) for k, v in data.items()],\n    legend={'loc': 'lower left', 'bbox_to_anchor': (0, -0.4), 'ncol': len(data), 'framealpha': 0}\n)\nfig.gca().set_facecolor('#EEEEEE')\nfig.set_facecolor('#EEEEEE')\nplt.show()","8556c5bc":"Stay_Patient_Hospital = dataset.time_in_hospital.value_counts()\nStay_Patient_Hospital = Stay_Patient_Hospital.reset_index()\nStay_Patient_Hospital.columns = ['No_of_Days' , 'Total_Number_of_Patients']\nLabels = ['1-3 Days', '4-7 Days' , '8-11 Days', '12-14 Days']\nValues = [49188 , 37288 , 11590 , 3700 ]\nlegend = ['48.4%' , '36.7%' , '11.3%' , '3.6%']\n\nDonut=plt.Circle( (0,0), 0.7, color='white')\nplt.pie(Values, labels=Labels, colors=['red','Skyblue','blue','Green'])\nplt.title(\"Donut Chart: Patients Stay at Hospitals in terms of binned  Days\", fontsize=16)\np=plt.gcf()\np.gca().add_artist(Donut)\np.legend(legend , loc= 'lower left')\nplt.show()","1211aa91":"dummy_dataset3 = dataset[(dataset['admission_type_id'] <= 4)]\ndummy_dataset3 = dummy_dataset3.admission_type_id.value_counts()\ndummy_dataset3 = dummy_dataset3.reset_index()\ndummy_dataset3.columns = ['Type of Admission' , 'Frequency']\n\ntemp2 = dummy_dataset3['Frequency']\ntemp2 = list(temp2)\n\nv1 = 53990\/91349*100\nv2 = 18869\/91349*100\nv3 = 18480\/91349*100\nv4 = 10\/91349*100\n","dc17c49b":"data1= {'Emergency': 59.10  , 'Urgent' : 20.65  , 'Elective' : 20.23  ,}\nfig = plt.figure(\n    FigureClass=Waffle, \n    rows=5, \n    values=data1,\n    colors=( \"#232066\" , \"#983D3D\",  \"#DCB732\"),\n    title={'label': 'Waffle Graph:Admission Type for the patients', 'loc': 'left'},\n    labels=[\"{0} ({1}%)\".format(k, v) for k, v in data1.items()],\n    legend={'loc': 'lower left', 'bbox_to_anchor': (0, -0.4), 'ncol': len(data), 'framealpha': 0}\n)\nfig.gca().set_facecolor('#EEEEEE')\nfig.set_facecolor('#EEEEEE')\nplt.show() ","90a9bf5c":"dict1 = {'Insulin' : 54383,\n         'Metformin' : 19998,\n         'Glipizide' : 12686,\n         'Glyburide' : 10650, \n         'Pioglitazone' : 7328,\n         'Rosiglitazone' : 6365\n         }\n\nplt.bar(dict1.keys() , dict1.values() , color = 'Brown')\nplt.xticks(rotation = 20)\nplt.xlabel('Name of Medicine' , fontsize = 12)\nplt.ylabel(' Number of Patients' , fontsize = 12)\nplt.title('Top Medicine that were adviced by the Doctors' , fontsize = 16)\nplt.show()","b94cb4db":" X_df = dataset.gender\n X_df = X_df.replace(to_replace = \"Unknown\/Invalid\" , value = \"Female\")\n X_df.value_counts()\n \nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nX_df = le.fit_transform(X_df)\nX_df = pd.DataFrame(X_df , columns=['Gender'])\n\nMedication_Status = dataset.diabetesMed\nMedication_Status = le.fit_transform(Medication_Status)\nX_df['Medication_status'] = Medication_Status\n\nX_df['Days_in_hospital'] = dataset.time_in_hospital\nX_df['Number_of_Procedures'] = dataset.num_procedures\nX_df['Number_of_lab_procedures'] = dataset.num_lab_procedures\nX_df['Number_Outpatient_visit'] = dataset.number_outpatient\nX_df['Number_Inpatient_visit'] = dataset.number_inpatient\nX_df['Number_Emergency_visit'] = dataset.number_emergency\nX_df['Number_of_DiagonsisEntered'] = dataset.number_diagnoses\n\n","7bc77acb":"X_df['EncounterNo'] = dataset.encounter_id\nX_df = X_df.set_index('EncounterNo')\n\nY_df = pd.read_csv('\/kaggle\/input\/labelencodedfeaturesdiabeticdataset\/NominalVar_Encoded.csv')\nY_df = Y_df.set_index('encounter_id')\nY_Dependent_df = Y_df.iloc[: , 41].values\nY_Dependent_df = pd.DataFrame(Y_Dependent_df , columns=['Readmission'])\nY_df = Y_df.drop(columns = ['readmitted'])\n\nVar_Independent_df = pd.concat([X_df, Y_df], axis=1)","67b046f4":"from sklearn.model_selection import train_test_split\nX_train , X_test , Y_train , Y_test = train_test_split(Var_Independent_df , Y_Dependent_df , \n                                                       test_size = 0.2 , random_state = 0) ","6171d452":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","9c328b38":"from sklearn.decomposition import PCA\npca = PCA(n_components = 15)\nX_train = pca.fit_transform(X_train)\nX_test = pca.transform(X_test)\nexplained_varience = pca.explained_variance_ratio_\n\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, Y_train)\nY_pred = classifier.predict(X_test)\nY_test = Y_test.to_numpy()\n#Y_pred = Y_pred.to_numpy()\nY_test = Y_test.astype(int)\nY_pred = Y_pred.astype(int)","39b581d7":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(Y_test , Y_pred)\ncm","0aa6d370":"Model_Accuracy = (9643+199+914)\/20354*100\nprint(\"The Model Accuracy is '\\n'\",  str(Model_Accuracy) + 'percent')\nAccuracy_NoReadmissionCase = (9643\/10997)*100\nprint(\"Accuracy of Model for no readmission cases is '\\n'\",  str(Accuracy_NoReadmissionCase) + 'percent')","c6613fd2":"# Confusion Matrix","224e00de":"# Removing the Outliers","63a1ffa4":"# Note: Some of the Complex Business Reporting is done using BI tool as they required Data Modelling . Those will be Part of the final Report \n\n# In case of any Queries Contact the Developer.\n# Thanks","ac5c91d7":"# Defining Dtypes\n","36c98ae2":"# End of Code !","edae4701":"# Diabetic Patient Analysis - Ten Years Dataset for Patients in United States","53347ada":"# Feature Scaling ","97042bdd":"# Data Modelling","c766fdb9":"# Exploratory Analysis","6ac85b5b":"# Splitting the Dataset into Test and Train Set","50873df6":"# Checking for the Accuracy ","831eb183":"# Importing the Dataset","52b6b8f4":"# Outliers Analysis","5b50378d":"# Applying Dimensionality Reduction (PCA) and Classifying Using Naive Bayes"}}