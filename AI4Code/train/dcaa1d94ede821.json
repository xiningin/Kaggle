{"cell_type":{"33380cf9":"code","373923cf":"code","33e32a05":"code","f3230eb5":"code","b3a9cf46":"code","e52e3ce0":"code","83c66636":"code","6a658821":"code","7b38b038":"code","bd6a6d08":"code","222b890d":"code","dfd28fef":"code","29a35c4e":"code","4548cff5":"code","79e69d66":"code","7f7dd159":"code","270bbd2d":"code","703aadda":"code","78a8612d":"code","1247d01b":"code","31b867c0":"code","d41b6a56":"code","c156a8fc":"code","899d075e":"code","564f72fd":"code","d68c0904":"code","ea0e975f":"code","616560a3":"markdown","cb1c7117":"markdown","afde05cc":"markdown","2b899560":"markdown","41238904":"markdown","760a9b5c":"markdown","b89ce2d8":"markdown","c864410d":"markdown"},"source":{"33380cf9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","373923cf":"df=pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')","33e32a05":"df.head()","f3230eb5":"df.isnull().any()","b3a9cf46":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","e52e3ce0":"df['quality'].value_counts().plot(kind='bar')","83c66636":"cor=df.corr()\ncor","6a658821":"sns.heatmap(cor)","7b38b038":"x=df.iloc[:,[0,1,2,3,4,5,6,7,8,9,10]]\ny=df.iloc[:,[11]]","bd6a6d08":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()","222b890d":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,random_state=5,test_size=0.2)","dfd28fef":"x_train=sc.fit_transform(x_train)\nx_test=sc.transform(x_test)","29a35c4e":"x_train.shape","4548cff5":"x_test.shape\n","79e69d66":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=11)","7f7dd159":"knn.fit(x_train,y_train)","270bbd2d":"pred=knn.predict(x_test)\npred","703aadda":"from sklearn.metrics import accuracy_score,confusion_matrix","78a8612d":"print(accuracy_score(y_test,pred))\nprint(confusion_matrix(y_test,pred))","1247d01b":"import xgboost\nxgb=xgboost.XGBClassifier()","31b867c0":"xgb.fit(x_train,y_train)","d41b6a56":"pre=xgb.predict(x_test)","c156a8fc":"print(accuracy_score(y_test,pre))\nprint(confusion_matrix(y_test,pre))","899d075e":"from sklearn.tree import DecisionTreeClassifier\ntr= DecisionTreeClassifier()","564f72fd":"tr.fit(x_train,y_train)","d68c0904":"pr=tr.predict(x_test)","ea0e975f":"print(accuracy_score(y_test,pr))\nprint(confusion_matrix(y_test,pr))","616560a3":"## model creation","cb1c7117":"### KNN model","afde05cc":"## data preprocessing\n","2b899560":" ## feature selection","41238904":"## decision tree model","760a9b5c":"## xgboost model","b89ce2d8":"## readind the data","c864410d":"## data cleaning and visualization"}}