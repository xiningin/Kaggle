{"cell_type":{"435401a7":"code","15fa1a12":"code","c3bfcd20":"code","1f1fbd54":"code","3437eb49":"code","573a3403":"code","5d051728":"code","99c6ef6a":"code","bb41826d":"code","372c48df":"code","f02eea65":"code","89e1e0e0":"code","16bd505d":"code","4ca4f03d":"code","55c25808":"code","9bc3ef5e":"code","79c33c14":"code","3427332b":"code","6cbe05a1":"code","abd78c34":"code","c8b2e848":"code","f63ac614":"code","1d5e3d69":"code","d989c128":"code","a4ede6fd":"code","c904e8d7":"code","c0e55cdc":"code","e32736cb":"code","2abdc34b":"code","c4d98f60":"code","62585053":"markdown","590802d2":"markdown","fa7a2fe2":"markdown","3f8980d5":"markdown","c1fec156":"markdown","58a17abe":"markdown","c1e4252c":"markdown","b39137ba":"markdown","46abece2":"markdown","514a1605":"markdown","7fb262b5":"markdown","44725109":"markdown","9bcd1a65":"markdown","d216b551":"markdown","b48ed6e6":"markdown","1d77459c":"markdown","3394dbc8":"markdown","1e8cc91a":"markdown","cff66dfb":"markdown","add29e80":"markdown","625417c7":"markdown","6ca0286d":"markdown","0dde7d44":"markdown","9d76fe92":"markdown","a55ba95b":"markdown","9af12dbf":"markdown","ca0dcebe":"markdown","d76709a1":"markdown","43e4ec6e":"markdown","b59619a5":"markdown","c7abe280":"markdown","2c39731c":"markdown","a780e9f2":"markdown","457bbf11":"markdown","9d90e6cd":"markdown","276efd6e":"markdown","1abfcc99":"markdown","47b8bbed":"markdown","24cbfadc":"markdown","a2870a49":"markdown"},"source":{"435401a7":"import pandas as pd\nimport numpy as np\nimport missingno as msno\nfrom collections import defaultdict\nimport re\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle, ConnectionPatch, Arc\nfrom matplotlib.font_manager import FontProperties\nfrom functools import reduce\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)\npd.set_option('display.max_columns', None)\npd.options.mode.chained_assignment = None\n\n\ndef open_fifa_version_df(fifa_version):\n    df = pd.read_csv('\/kaggle\/input\/fifa-22-complete-player-dataset\/players_' + str(fifa_version) + '.csv', low_memory = False)\n    df['fifa_version'] = int(fifa_version)\n    new_cols_order = ['fifa_version'] + df.columns.to_list()[:-6] # removing picture URLs\n    df = df[new_cols_order]\n    return df\n\n\nplayers_df = pd.DataFrame()\nfor fifa_version in range(15, 23): # upper bound excluded from range\n    players_df = players_df.append(open_fifa_version_df(fifa_version))\nprint(len(players_df))\nplayers_df.head(5)","15fa1a12":"null_values_series = players_df.isnull().sum().where(lambda x : x > 0).dropna().astype('Int32')\nprint(null_values_series.to_string()) # to_string() removes the name and dtype from the output\nmsno.matrix(players_df[null_values_series.index.tolist()], figsize=(15, 8));","c3bfcd20":"# adding the 'best_position' and 'value_million_eur' fields to each df\ndef add_position_and_value_fields(input_df):\n    input_df['best_position'] = input_df['player_positions'].str.split(',').str[0]\n    # about 1k players through all FIFA versions have no values associated - the NaN 'value_eur' values are replaced with 0\n    input_df['value_eur'] = input_df['value_eur'].fillna(0)\n    input_df['value_million_eur'] = pd.to_numeric(input_df['value_eur'], errors='coerce') \/ 1000000\n    return input_df\n\n\nplayers_df = add_position_and_value_fields(players_df)\ndf15 = add_position_and_value_fields(players_df[players_df['fifa_version'] == 15])\ndf16 = add_position_and_value_fields(players_df[players_df['fifa_version'] == 16])\ndf17 = add_position_and_value_fields(players_df[players_df['fifa_version'] == 17])\ndf18 = add_position_and_value_fields(players_df[players_df['fifa_version'] == 18])\ndf19 = add_position_and_value_fields(players_df[players_df['fifa_version'] == 19])\ndf20 = add_position_and_value_fields(players_df[players_df['fifa_version'] == 20])\ndf21 = add_position_and_value_fields(players_df[players_df['fifa_version'] == 21])\ndf22 = add_position_and_value_fields(players_df[players_df['fifa_version'] == 22])\n\n# functions for the lineup visualizations\n# original code taken from https:\/\/towardsdatascience.com\/advanced-sports-visualization-with-pandas-matplotlib-and-seaborn-9c16df80a81b\n\n!pip install mplsoccer\nfrom mplsoccer.pitch import VerticalPitch\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle, ConnectionPatch, Arc\nplt.rcParams['axes.facecolor'] = 'white'\nplt.rcParams['figure.facecolor'] = 'white'\n\nformations_dict = {'4-3-1-2': ['GK', 'RB|RWB', 'LCB|CB', 'RCB|CB', 'LB|LWB', 'CDM|CM', 'CDM|CM', 'CDM|CM', 'CAM|CF', 'CF|ST', 'CF|ST'],\n                   '4-3-2-1': ['GK', 'RB|RWB', 'LCB|CB', 'RCB|CB', 'LB|LWB', 'CDM|CM', 'CDM|CM', 'CDM|CM', 'CAM|CF', 'CAM|CF', 'CF|ST'],\n                   '4-3-3': ['GK', 'RB|RWB', 'LCB|CB', 'RCB|CB', 'LB|LWB', 'CDM|CM', 'CDM|CM', 'CDM|CM', 'RW|RF|ST', 'CF|ST', 'LW|LF|ST'],\n                   '4-4-2': ['GK', 'RB|RWB', 'RCB|CB', 'LCB|CB', 'LB|LWB', 'RM|RW', 'CDM|CM', 'CDM|CM', 'LM|LW', 'CF|ST', 'CF|ST'],\n                   '4-5-1': ['GK', 'RB|RWB', 'RCB|CB', 'LCB|CB', 'LB|LWB', 'RM|RW', 'CDM|CM', 'CDM|CM', 'LM|LW', 'CF|ST', 'CF|ST'],\n                   '3-4-1-2': ['GK', 'RCB|CB', 'CB', 'LCB|CB', 'RM|RW', 'CDM|CM', 'CDM|CM', 'LM|LW', 'CAM|CF', 'CF|ST', 'CF|ST'],\n                   '3-4-3': ['GK', 'RCB|CB', 'CB', 'LCB|CB', 'RWB|RM', 'CDM|CM', 'CDM|CM', 'LWB|LM', 'RW|RF|ST', 'CF|ST', 'LW|LF|ST'],\n                   '3-5-2': ['GK', 'RCB|CB', 'CB', 'LCB|CB', 'RM|RWB|RB', 'CDM|CM', 'CDM|CM', 'CDM|CM', 'LM|LWB|LB', 'CF|ST', 'CF|ST']}\n\n# dictionary used to calculate the player coordinates on the pitch, based on the number of players per team section such as defence, etc.\nxaxis_locations = {1: [40], 2: [30, 50], 3: [25, 40, 55], 4: [10, 30, 50, 70], 5: [10, 25, 40, 55, 70]}\n\n\ndef get_players_section_coord_col(players_coord_dict, players_col_dict, color_val, players_in_section, yaxis_val, team_order):\n    if team_order == 'home':\n        xaxis_val = xaxis_locations\n    elif team_order == 'away':\n        xaxis_val = {k: v[::-1] for k, v in xaxis_locations.items()} # reversing the X-axis for the opponent lineup \n        yaxis_val = 120 - yaxis_val # total pitch length is 120, so positions have the same distintance from the own team's goal\n    else:\n        raise ValueError('Invalid team_order value provided - Can be only \"home\" or \"away\"')\n    for idx, val in enumerate(range(players_in_section)):\n        players_coord_dict[len(players_coord_dict)] = [xaxis_val[players_in_section][idx], yaxis_val]\n        players_col_dict[len(players_col_dict)] = color_val\n    return players_coord_dict, players_col_dict\n\n\ndef get_player_locations_colors(formation, team_type='home'):\n    lineup_sections = formation.split('-')\n    defenders = int(lineup_sections[0])\n    midfielders = int(lineup_sections[1])\n    if len(lineup_sections) == 4:\n        # trequartista spots are occupied\n        trequartistas = int(lineup_sections[2])\n        strikers = int(lineup_sections[3])\n    elif len(lineup_sections) == 3:\n        trequartistas = 0\n        strikers = int(lineup_sections[2])\n    if len(lineup_sections) not in [3, 4] or (defenders + midfielders + trequartistas + strikers) != 10:\n        raise ValueError('Formation invalid - Missing or extra player sections other than defence, midfield, and offence')\n    # getting the player locations and colors in two dictionaries that are gradually populated\n    locations_dict = {}\n    colors_dict = {}\n    locations_dict, colors_dict = get_players_section_coord_col(locations_dict, colors_dict, 'darkslategrey', 1, 112, team_type) # GK\n    locations_dict, colors_dict = get_players_section_coord_col(locations_dict, colors_dict, 'blue', defenders, 98, team_type) # DEFs\n    locations_dict, colors_dict = get_players_section_coord_col(locations_dict, colors_dict, 'gold', midfielders, 84, team_type) # MIDs\n    if trequartistas > 0:\n        locations_dict, colors_dict = get_players_section_coord_col(locations_dict, colors_dict, 'red', trequartistas, 77, team_type) # CAMs\n    locations_dict, colors_dict = get_players_section_coord_col(locations_dict, colors_dict, 'red', strikers, 70, team_type) # STRs\n    return locations_dict, colors_dict\n\n\ndef get_best_formation(formation_df, club_name='', measurement='overall'):\n    if club_name != '':\n        formation_df = formation_df[formation_df['club_name'] == club_name]\n    formations_total_vals = {}\n    for formation in formations_dict:\n        copied_df = formation_df.copy()\n        pos_list = formations_dict[formation]\n        total_vals = []\n        for pos in pos_list:\n            # get best record based on 'overall' or 'potential', then drop that record from copied df, so that it cannot be selected again\n            if not np.isnan(copied_df[copied_df['best_position'].str.contains(pos)][measurement].max()):\n                total_vals.append(copied_df[copied_df['best_position'].str.contains(pos)][measurement].max())\n                copied_df.drop(copied_df[copied_df['best_position'].str.contains(pos)][measurement].idxmax(), inplace=True)\n        if len(total_vals) == 11:\n            formations_total_vals[formation] = sum(total_vals)\n        else: # some formations might not find 11 available players - these ones need to be excluded from any possible calcuation\n            formations_total_vals[formation] = 0\n    best_formation = max(formations_total_vals, key=formations_total_vals.get)\n    return best_formation\n\n\ndef get_best_lineup(lineup_df, club_name='', formation='', measurement=''):\n    if club_name != '':\n        df_copy = lineup_df[lineup_df['club_name'] == club_name]\n    else:\n        df_copy = lineup_df.copy()\n    # if formation is not chosen, then the best one is calculated with a formula\n    if formation == '':\n        formation = get_best_formation(lineup_df, club_name, measurement)\n    squad_lineup = formations_dict[formation]\n    squad_default_dict = dict()\n    for pos in squad_lineup:\n        best_player_record = df_copy.loc[[df_copy[df_copy['best_position'].str.contains(pos)][measurement].idxmax()]]\n        squad_default_dict[best_player_record['short_name'].to_string(index=False).strip(' \\t')] = [\n            best_player_record['best_position'].to_string(index=False).strip(' \\t'),\n            int(best_player_record[measurement].to_string(index=False)),\n            int(best_player_record['age'].to_string(index=False)),\n            float(best_player_record['value_million_eur'].to_string(index=False)),\n            best_player_record['club_name'].to_string(index=False).strip(' \\t')]\n        df_copy.drop(df_copy[df_copy['best_position'].str.contains(pos)][measurement].idxmax(), inplace=True)\n    return formation, squad_default_dict\n\n\ndef draw_pitch(axis):\n    # pitch outline and centre line\n    pitch = Rectangle([0, 0], width=80, height=120, edgecolor='black', fill=False) # facecolor='#23E04F'\n    # left and right penalty area and midline\n    left_penalty = Rectangle([22.3, 0], width=35.3, height=14.6, fill=False)\n    right_penalty = Rectangle([22.3, 105.4], width=35.3, height=14.6, fill=False)\n    midline = ConnectionPatch([0, 60], [80, 60], 'data', 'data')\n    # left and right six-yard box\n    left_six_yard = Rectangle([32, 0], width=16, height=4.9, fill=False)\n    right_six_yard = Rectangle([32, 115.1], width=16, height=4.9, fill=False)\n    # prepare circles\n    centre_circle = plt.Circle((40, 60), 8.1, color='black', fill=False)\n    centre_spot = plt.Circle((40, 60), 0.4, color='black')\n    # penalty spots and arcs around penalty boxes\n    # left_pen_spot = plt.Circle((40, 9.7), 0.4, color='black')\n    # right_pen_spot = plt.Circle((40, 110.3), 0.4, color='black')\n    left_arch = Arc((40, 9.5), width=16.2, height=16.2, angle=90, theta1=310, theta2=50, color='black')\n    right_arch = Arc((40, 110.4), width=16.2, height=16.2, angle=90, theta1=130, theta2=230, color='black')\n    elements_list = [pitch, left_penalty, right_penalty, midline, left_six_yard, right_six_yard, centre_circle, centre_spot,\n                     left_arch, right_arch]\n    for element in elements_list:\n        axis.add_patch(element)\n\n\ndef draw_teams_matchup(home_df, away_df, home_title, away_title, home_team_name='', away_team_name='',\n                       home_team_formation='', away_team_formation='', measurement='overall', drawn_pitch='manual'):\n    # setting the figure where the matchup will be plotted\n    fig = plt.figure()\n    fig.set_size_inches(10, 14)\n    ax = fig.add_subplot(1, 1, 1)\n    if drawn_pitch == 'mplsoccer': # plotting the fancy pitch from 'mplsoccer'\n        pitch = VerticalPitch(pitch_color='grass', line_color='white', stripe=True)\n        pitch.draw(ax=ax)\n    else: # calling the function that draws the pitch\n        draw_pitch(ax)\n    # setting the field columns shown on the right-hand side of the figure\n    if measurement == 'overall':\n        note_columns = ('Position', 'Player Name', 'Overall Attribute', 'Age', 'Player Value (in \u20acM)', 'Club Name')\n    elif measurement == 'potential':\n        note_columns = ('Position', 'Player Name', 'Potential Attribute', 'Age', 'Player Value (in \u20acM)', 'Club Name')\n    else:\n        raise ValueError('Measurement value provided is not valid (nor \"overall\" neither \"potential\")')\n    # drawing home team lineup\n    home_formation, home_players = get_best_lineup(home_df, home_team_name, home_team_formation, measurement)\n    home_players_list = list(home_players)\n    home_locations_dict, home_colors_dict = get_player_locations_colors(home_formation, team_type='home')\n    for i in range(len(home_players_list)):\n        player_x, player_y = home_locations_dict[i][0], home_locations_dict[i][1]\n        player_color = home_colors_dict[i]\n        if '. ' in home_players_list[i]:\n            player_name = home_players_list[i].split('. ', 1)[1]\n        else:\n            player_name = home_players_list[i]\n        plt.annotate(player_name,\n                     xy = (player_x, player_y), xytext = (0, 18),\n                     bbox=dict(boxstyle='round', fc='w'), va='center', ha='center', textcoords='offset points')\n        plt.scatter(player_x, player_y, s=250, c=player_color)\n    # adding notes on the right-hand side of the home team\n    home_team_list = []\n    for k, v in home_players.items():\n        home_team_list.append([v[0], k, v[1], v[2], v[3], v[4]])\n    home_sum_rating = home_sum_age = home_sum_value = 0\n    for k, v in home_players.items():\n        home_sum_rating = home_sum_rating + v[1]\n        home_sum_age = home_sum_age + v[2]\n        home_sum_value = home_sum_value + v[3]\n    home_notes = [[home_title],\n                  ['Average rating: {avg_rating}'.format(avg_rating=round((home_sum_rating\/11), 1))],\n                  ['Average age: {avg_age}'.format(avg_age=round((home_sum_age\/11), 1))],\n                  ['Total Value (in \u20acM): {total_value:,}'.format(total_value=round(home_sum_value, 1))]]\n    plt_table = plt.table(cellText=home_team_list, colLabels=note_columns,\n                          colWidths=[0.3, 0.5, 0.35, 0.2, 0.4, 0.5], cellLoc='right', loc='right', bbox=[1, 0.505, 1.7, 0.36])\n    plt_table.scale(1.5, 2)\n    for (row, col), cell in plt_table.get_celld().items():\n        if (row == 0):\n            cell.set_text_props(fontproperties=FontProperties(weight='bold'))\n    plt_home_notes = plt.table(cellText=home_notes, cellLoc='left', loc='left', bbox=[0.9, 0.87, 1.1, 0.12])\n    for key, cell in plt_home_notes.get_celld().items():\n        cell.set_linewidth(0)\n        cell.set_text_props(fontproperties=FontProperties(weight='bold'))\n    # drawing away team lineup\n    away_formation, away_players = get_best_lineup(away_df, away_team_name, away_team_formation, measurement)\n    away_players_list = list(away_players)\n    away_locations_dict, away_colors_dict = get_player_locations_colors(away_formation, team_type='away')\n    for i in range(len(away_players_list)):\n        player_x, player_y = away_locations_dict[i][0], away_locations_dict[i][1]\n        player_color = away_colors_dict[i]\n        if '. ' in away_players_list[i]:\n            player_name = away_players_list[i].split('. ', 1)[1]\n        else:\n            player_name = away_players_list[i]\n        plt.annotate(player_name,\n                     xy = (player_x, player_y), xytext = (0, 18),\n                     bbox=dict(boxstyle='round', fc='w'), va='center', ha='center', textcoords='offset points')\n        plt.scatter(player_x, player_y, s=250, c=player_color)\n    # adding notes on the right-hand side of the away team\n    away_team_list = []\n    for k, v in away_players.items():\n        away_team_list.append([v[0], k, v[1], v[2], v[3], v[4]])\n    away_sum_rating = away_sum_age = away_sum_value = 0\n    for k, v in away_players.items():\n        away_sum_rating = away_sum_rating + v[1]\n        away_sum_age = away_sum_age + v[2]\n        away_sum_value = away_sum_value + v[3]\n    away_notes = [[away_title],\n                  ['Average rating: {avg_rating}'.format(avg_rating=round((away_sum_rating\/11), 1))],\n                  ['Average age: {avg_age}'.format(avg_age=round((away_sum_age\/11), 1))],\n                  ['Total Value (in \u20acM): {total_value:,}'.format(total_value=round(away_sum_value, 1))]]\n    plt_table = plt.table(cellText=away_team_list, colLabels=note_columns,\n                          colWidths=[0.3, 0.5, 0.35, 0.2, 0.4, 0.5], cellLoc='right', loc='right', bbox=[1, 0.015, 1.7, 0.36])\n    plt_table.scale(1.5, 2)\n    for (row, col), cell in plt_table.get_celld().items():\n        if (row == 0):\n            cell.set_text_props(fontproperties=FontProperties(weight='bold'))\n    plt_away_notes = plt.table(cellText=away_notes, cellLoc='left', loc='left', bbox=[0.9, 0.38, 1.1, 0.12])\n    for key, cell in plt_away_notes.get_celld().items():\n        cell.set_linewidth(0)\n        cell.set_text_props(fontproperties=FontProperties(weight='bold'))\n    # adding the final settings to the plot\n    plt.xlim(-2, 82)\n    plt.ylim(-2, 122)\n    plt.axis('off')\n    plt.show()","1f1fbd54":"draw_teams_matchup(df22, df15, 'Dream Team in FIFA 22', 'Dream Team in FIFA 15', drawn_pitch='mplsoccer')","3437eb49":"draw_teams_matchup(df22, df15, 'Highest Potential Team in FIFA 22', 'Highest Potential Team in FIFA 15', measurement='potential')","573a3403":"draw_teams_matchup(df21, df20, 'Highest Potential Team in FIFA 21', 'Highest Potential Team in FIFA 20', measurement='potential')","5d051728":"draw_teams_matchup(df19, df18, 'Highest Potential Team in FIFA 19', 'Highest Potential Team in FIFA 18', measurement='potential')","99c6ef6a":"draw_teams_matchup(df17, df16, 'Highest Potential Team in FIFA 17', 'Highest Potential Team in FIFA 16', measurement='potential')","bb41826d":"draw_teams_matchup(df22, df22, 'Liverpool in FIFA 22', 'ManCity in FIFA 22', home_team_name='Liverpool', away_team_name='Manchester City', drawn_pitch='mplsoccer')","372c48df":"draw_teams_matchup(df15, df15, 'Liverpool in FIFA 15', 'ManCity in FIFA 15', home_team_name='Liverpool', away_team_name='Manchester City')","f02eea65":"draw_teams_matchup(df22, df22, 'RealMadrid in FIFA 22', 'Barcelona in FIFA 22', home_team_name='Real Madrid CF', away_team_name='FC Barcelona', drawn_pitch='mplsoccer')","89e1e0e0":"draw_teams_matchup(df15, df15, 'RealMadrid in FIFA 15', 'Barcelona in FIFA 15', home_team_name='Real Madrid CF', away_team_name='FC Barcelona')","16bd505d":"draw_teams_matchup(df22, df22, 'Juventus in FIFA 22', 'InterMilan in FIFA 22', home_team_name='Juventus', away_team_name='Inter', drawn_pitch='mplsoccer')","4ca4f03d":"draw_teams_matchup(df15, df15, 'Juventus in FIFA 15', 'InterMilan in FIFA 15', home_team_name='Juventus', away_team_name='Inter')","55c25808":"draw_teams_matchup(df22, df22, 'BayernMunich in FIFA 22', 'BDortmund in FIFA 22', home_team_name='FC Bayern M\u00fcnchen', away_team_name='Borussia Dortmund', drawn_pitch='mplsoccer')","9bc3ef5e":"draw_teams_matchup(df15, df15, 'BayernMunich in FIFA 15', 'BDortmund in FIFA 15', home_team_name='FC Bayern M\u00fcnchen', away_team_name='Borussia Dortmund')","79c33c14":"draw_teams_matchup(df22, df22, 'PSG in FIFA 22', 'Olympique in FIFA 22', home_team_name='Paris Saint-Germain', away_team_name='Olympique Lyonnais', drawn_pitch='mplsoccer')","3427332b":"draw_teams_matchup(df15, df15, 'PSG in FIFA 15', 'Olympique in FIFA 15', home_team_name='Paris Saint-Germain', away_team_name='Olympique Lyonnais')","6cbe05a1":"def get_club_lineup_data(lineup_df, fifa_version, club_name):\n    df_copy = lineup_df[lineup_df['club_name'] == club_name]\n    formation = get_best_formation(lineup_df, club_name, measurement='overall')\n    squad_lineup = formations_dict[formation]\n    if len(df_copy) < 20:\n        raise ValueError('Club ' + club_name + ' does not have enough players in FIFA ' + str(fifa_version) + ': ' + str(len(df_copy)))\n    # granular-level df with the players data\n    squad_players_df = pd.DataFrame(columns=['position', 'overall', 'age', 'value'])\n    for pos in squad_lineup:\n        best_player_record = df_copy.loc[[df_copy[df_copy['best_position'].str.contains(pos)]['overall'].idxmax()]]\n        squad_players_df.loc[best_player_record['short_name'].to_string(index=False).strip(' \\t')] = [\n            best_player_record['best_position'].to_string(index=False).strip(' \\t'),\n            float(best_player_record['overall']), float(best_player_record['age']), float(best_player_record['value_million_eur'])]\n        df_copy.drop(df_copy[df_copy['best_position'].str.contains(pos)]['overall'].idxmax(), inplace=True)\n    # aggregate-level df with grouped data\n    squad_players_df = squad_players_df.sort_values(by=['value', 'overall'], ascending=[False, False])\n    squad_df = pd.DataFrame({'fifa_version': [fifa_version], 'club_name': [club_name], 'formation': [formation],\n                'overall': [round(squad_players_df['overall'].mean(), 2)], 'age': [round(squad_players_df['age'].mean(), 2)],\n                'value': [round(squad_players_df['value'].mean(), 2)],\n                'position_best_overall': [squad_players_df.loc[squad_players_df['overall'].idxmax()]['position']],\n                'position_best_value': [squad_players_df.loc[squad_players_df['value'].idxmax()]['position']]})\n    return squad_df\n\n\n# getting the first 100 clubs based on the current player overall ratings in FIFA 22\n# the FIFA 22 dataset is already sorted by the overall attributes, so it is failry easy to find the first 100 club names in the file\ntop100_clubs = df22[~df22['club_name'].isnull()]['club_name'].unique().tolist()[:100]\ntop100_clubs_df = pd.DataFrame(columns=['fifa_version', 'club_name', 'formation', 'overall', 'age', 'value',\n                                        'position_best_overall', 'position_best_value'])\n\nfor version_n in [15, 16, 17, 18, 19, 20, 21, 22]:\n    filtered_df = players_df[players_df['fifa_version'] == version_n][\n        ['short_name', 'club_name', 'league_name', 'best_position', 'overall', 'age', 'value_million_eur']]\n    for top100_club_name in top100_clubs:\n        try:\n            club_df = get_club_lineup_data(filtered_df, fifa_version=version_n, club_name=top100_club_name)\n        except ValueError: # raised for clubs that do not have enough players in the roster to have their best lineup cauclated\n            continue\n        top100_clubs_df = pd.concat([top100_clubs_df, club_df], axis=0)\ntop100_clubs_df.index = range(1, len(top100_clubs_df)+1) # assigning a unique index value to each record\nfifa22_club_leagues_df = players_df[players_df['fifa_version'] == 22].drop_duplicates(subset='club_name')[['club_name', 'league_name']]\ntop100_clubs_df = top100_clubs_df.merge(right=fifa22_club_leagues_df, how='left')\n\n# filtering only the clubs' data for the major leagues, so that further details can emerge from the plots\ntop_leagues = ['English Premier League', 'Spain Primera Division', 'Italian Serie A', 'German 1. Bundesliga', 'French Ligue 1']\nleagues_top100_clubs_df = top100_clubs_df[top100_clubs_df['league_name'].isin(top_leagues)]\n\n# below is the info needed for the plotly graphs\ntotal_boxes = len(top100_clubs_df['fifa_version'].unique().tolist())\nclrs = ['hsl('+str(h)+',50%'+',50%)' for h in np.linspace(0, 360, total_boxes + 1)]\n\n# displaying the top15 clubs data in FIFA 22 based on their best players' overall attributes\ntop100_clubs_df[top100_clubs_df['fifa_version'] == 22].sort_values(by='overall', ascending=False).head(15)","abd78c34":"fig = go.Figure()\nfor i, version_n in enumerate(top100_clubs_df['fifa_version'].unique()):\n    df_plot = top100_clubs_df[top100_clubs_df['fifa_version'] == version_n]\n    fig.add_trace(go.Box(y=df_plot['value'], x=df_plot['fifa_version'], name=str(version_n),\n                         boxpoints='outliers', jitter=0.5, whiskerwidth=0.2, line=dict(color='black'),\n                         fillcolor=clrs[i], marker_size=2, line_width=1,\n                         hovertext=df_plot['club_name'], hovertemplate='<b>%{hovertext}<\/b>:<br>value: %{y:.2f}'))\nfig.update_layout(title='Value (in \u20acM) distribution of Top100 clubs for each FIFA version', title_x=0.5, font=dict(size=12),\n                  template='plotly_white', autosize=False, width=800, height=500, margin=dict(l=10, r=10, t=60, b=10),\n                  legend_title='FIFA Version', xaxis=dict(title='FIFA Version', zeroline=False), yaxis=dict(title='Value (in \u20acM)', zeroline=False))\nfig.show()","c8b2e848":"fig = go.Figure()\nfor i, version_n in enumerate(top100_clubs_df['fifa_version'].unique()):\n    df_plot = top100_clubs_df[top100_clubs_df['fifa_version'] == version_n]\n    fig.add_trace(go.Box(y=df_plot['overall'], x=df_plot['fifa_version'], name=str(version_n),\n                         boxpoints='outliers', jitter=0.5, whiskerwidth=0.2, line=dict(color='black'),\n                         fillcolor=clrs[i], marker_size=2, line_width=1,\n                         hovertext=df_plot['club_name'], hovertemplate='<b>%{hovertext}<\/b>:<br>overall: %{y:.2f}'))\nfig.update_layout(title='Overall attribute distribution of Top100 clubs for each FIFA version', title_x=0.5, font=dict(size=12),\n                  template='plotly_white', autosize=False, width=800, height=500, margin=dict(l=10, r=10, t=60, b=10),\n                  legend_title='FIFA Version', xaxis=dict(title='FIFA Version', zeroline=False), yaxis=dict(title='Overall', zeroline=False))\nfig.show()","f63ac614":"fig = go.Figure()\nfor i, version_n in enumerate(top100_clubs_df['fifa_version'].unique()):\n    df_plot = top100_clubs_df[top100_clubs_df['fifa_version'] == version_n]\n    fig.add_trace(go.Box(y=df_plot['age'], x=df_plot['fifa_version'], name=str(version_n),\n                         boxpoints='outliers', jitter=0.5, whiskerwidth=0.2, line=dict(color='black'),\n                         fillcolor=clrs[i], marker_size=2, line_width=1,\n                         hovertext=df_plot['club_name'], hovertemplate='<b>%{hovertext}<\/b>:<br>Age: %{y:.2f}'))\nfig.update_layout(title='Age distribution of Top100 clubs for each FIFA version', title_x=0.5, font=dict(size=12), template='plotly_white',\n                  autosize=False, width=800, height=500, margin=dict(l=10, r=10, t=60, b=10), legend_title='FIFA Version',\n                  xaxis=dict(title='FIFA Version', zeroline=False), yaxis=dict(title='Age', zeroline=False))\nfig.show()","1d5e3d69":"fig = px.line(top100_clubs_df[top100_clubs_df['club_name'].isin(\n    top100_clubs_df[top100_clubs_df['fifa_version']==22].sort_values(by='overall', ascending=False)['club_name'][:15])],\n              x='fifa_version', y='overall', color='club_name')\nfig.update_layout(title='Overall attribute trend of the current Top15 clubs from FIFA 15 to FIFA 22', title_x=0.5, font=dict(size=12),\n                  template='plotly_white', autosize=False, width=800, height=500, margin=dict(l=10, r=10, t=60, b=10),\n                  legend_title='Club Name', xaxis=dict(title='FIFA Version', zeroline=False), yaxis=dict(title='Overall', zeroline=False))\nfig.show()","d989c128":"fig = px.box(leagues_top100_clubs_df, x='fifa_version', y='value', color='league_name', hover_data=['club_name'])\nfig.update_layout(title='Value (in \u20acM) distribution of Top100 clubs for each FIFA version - Broken down by league', title_x=0.5, font=dict(size=12),\n                  template='plotly_white', autosize=False, width=800, height=500, margin=dict(l=10, r=10, t=60, b=10),\n                  legend_title='FIFA Version', xaxis=dict(title='FIFA Version', zeroline=False), yaxis=dict(title='Value (in \u20acM)', zeroline=False))\nfig.show()","a4ede6fd":"fig = px.box(leagues_top100_clubs_df, x='fifa_version', y='overall', color='league_name', hover_data=['club_name'])\nfig.update_layout(title='Overall attribute distribution of Top100 clubs for each FIFA version - Broken down by league', title_x=0.5, font=dict(size=12),\n                  template='plotly_white', autosize=False, width=800, height=500, margin=dict(l=10, r=10, t=60, b=10),\n                  legend_title='FIFA Version', xaxis=dict(title='FIFA Version', zeroline=False), yaxis=dict(title='Overall', zeroline=False))\nfig.show()","c904e8d7":"fig = px.box(leagues_top100_clubs_df, x='fifa_version', y='age', color='league_name', hover_data=['club_name'])\nfig.update_layout(title='Age distribution of Top100 clubs for each FIFA version - Broken down by league', title_x=0.5, font=dict(size=12),\n                  template='plotly_white', autosize=False, width=800, height=500, margin=dict(l=10, r=10, t=60, b=10),\n                  legend_title='FIFA Version', xaxis=dict(title='FIFA Version', zeroline=False), yaxis=dict(title='Age', zeroline=False))\nfig.show()","c0e55cdc":"# manually amending the Mbappe's short name on FIFA 17 and Neymar's on FIFA 20, 21, and 22\ntop15_players_df = players_df.copy(deep=True)\ntop15_players_df.loc[top15_players_df['short_name'] == 'K. Mbappe Lottin', 'short_name'] = 'K. Mbapp\u00e9'\ntop15_players_df.loc[top15_players_df['short_name'] == 'Neymar Jr', 'short_name'] = 'Neymar'\ntop15_players_df = top15_players_df[top15_players_df['long_name'].isin(\n    top15_players_df[top15_players_df['fifa_version']==22].sort_values(by=['overall', 'potential'], ascending=[False, False])['long_name'][:15])]\ntop15_players_df['short_name'] = [x.rsplit('.', 1)[1].strip(' \\t') if len(x.rsplit('.', 1)) > 1 else x for x in top15_players_df['short_name']]\n\nfig = px.line(data_frame=top15_players_df, x='fifa_version', y='overall', color='short_name')\nfig.update_layout(title='Overall attribute trend of the current Top15 players from FIFA 15 to FIFA 22', title_x=0.5, font=dict(size=12),\n                  template='plotly_white', autosize=False, width=800, height=500, margin=dict(l=10, r=10, t=60, b=10),\n                  legend_title='Player Name', xaxis=dict(title='FIFA Version', zeroline=False), yaxis=dict(title='Overall', zeroline=False))\nfig.show()","e32736cb":"# split the whole dataset and see the ratio of GKs, DFs, MFs, and FWs for each fifa version, and especially for each category of age and overall\npositions_generic_dict = {'GK': 'GK', 'RWB': 'DF', 'RB': 'DF', 'CB': 'DF', 'LB': 'DF', 'LWB': 'DF',\n                          'RM': 'MF', 'CM': 'MF', 'CDM': 'MF', 'LM': 'MF', 'CAM': 'MF',\n                          'RW': 'FW', 'CF': 'FW', 'ST': 'FW', 'LW': 'FW'}\nplayers_df['generic_position'] = players_df['best_position'].map(positions_generic_dict)\n\n# create the qcut categories for the 'age' and 'value' fields\n# age_group\nage_group_bins = pd.qcut(players_df['age'], q=5, retbins=False).astype(str)\nage_group_list = sorted(age_group_bins.unique().tolist())\nage_group_bins = ['<' + re.findall(',\\s+(\\d{1,3})', x)[0] if age_group_list.index(x) != len(age_group_list) - 1\n                  else '>=' + re.findall('\\((\\d{1,3})', x)[0] for x in age_group_list]\nplayers_df['age_group'] = pd.qcut(players_df['age'], q=5, labels=age_group_bins)\n# value_group\nvalue_group_bins = pd.qcut(players_df['value_million_eur'], q=5, retbins=False).astype(str)\nvalue_group_list = sorted(value_group_bins.unique().tolist())\nvalue_group_bins = ['<' + re.findall(',\\s+(\\d{1,3}\\.\\d{1,3})', x)[0] if value_group_list.index(x) != len(value_group_list) - 1\n                    else '>=' + re.findall('\\((\\d{1,3}\\.\\d{1,3})', x)[0] for x in value_group_list]\nplayers_df['value_group'] = pd.qcut(players_df['value_million_eur'], q=5, labels=value_group_bins)\n\n# grouping the qcut categories by age_group\ngrouped_players_df = players_df.groupby(['fifa_version', 'age_group', 'generic_position']).agg({'sofifa_id': 'count'}).reset_index()\npositions_age_df = grouped_players_df.groupby(['fifa_version', 'age_group'])['sofifa_id'].sum().reset_index()\ngrouped_players_df.rename(columns={'sofifa_id': 'records'}, inplace=True)\npositions_age_df.rename(columns={'sofifa_id': 'records_sum'}, inplace=True)\npositions_age_df = grouped_players_df.merge(right=positions_age_df, how='inner', on=['fifa_version', 'age_group'])\npositions_age_df['perc'] = [round(100 * x \/ y, 1) for x, y in zip(positions_age_df['records'], positions_age_df['records_sum'])]\npositions_age_df.drop(columns=['records', 'records_sum'], inplace=True)\n# pivoting the data with the generic_positions categories as columns containing the frequency in % for each FIFA version and age_group\npivoted_age_df = positions_age_df.pivot(\n    index=['fifa_version', 'age_group'], columns='generic_position', values='perc')#.reindex(drop=True)#.droplevel(level=1)\npivoted_age_df.columns = pivoted_age_df.columns.astype(str)\npivoted_age_df = pivoted_age_df.reset_index()\n\n# grouping the qcut categories by value_group\ngrouped_players_df = players_df.groupby(['fifa_version', 'value_group', 'generic_position']).agg({'sofifa_id': 'count'}).reset_index()\npositions_value_df = grouped_players_df.groupby(['fifa_version', 'value_group'])['sofifa_id'].sum().reset_index()\ngrouped_players_df.rename(columns={'sofifa_id': 'records'}, inplace=True)\npositions_value_df.rename(columns={'sofifa_id': 'records_sum'}, inplace=True)\npositions_value_df = grouped_players_df.merge(right=positions_value_df, how='inner', on=['fifa_version', 'value_group'])\npositions_value_df['perc'] = [round(100 * x \/ y, 1) for x, y in zip(positions_value_df['records'], positions_value_df['records_sum'])]\npositions_value_df.drop(columns=['records', 'records_sum'], inplace=True)\n# pivoting the data with the generic_positions categories as columns containing the frequency in % for each FIFA version and value_group\npivoted_value_df = positions_value_df.pivot(\n    index=['fifa_version', 'value_group'], columns='generic_position', values='perc')#.reindex(drop=True)#.droplevel(level=1)\npivoted_value_df.columns = pivoted_value_df.columns.astype(str)\npivoted_value_df = pivoted_value_df.reset_index()","2abdc34b":"groups = ['GK', 'DF', 'MF', 'FW']\ncolors = ['darkslategrey', 'blue', 'gold' ,'red']\nnames = ['Goalkeepers', 'Defenders', 'Midfielders', 'Forwards']\n\nfig = go.Figure()\nfor g, n, c in zip(groups, names, colors):\n    for a in age_group_bins: # list of bins previously selected when creating the qcut categories\n        display_legend = True if age_group_bins.index(a) == 0 else False\n        fig.add_trace(go.Bar(x=[pivoted_age_df[pivoted_age_df['age_group']==a]['fifa_version'], [a]*len(pivoted_age_df['fifa_version'])],\n                             y=pivoted_age_df[pivoted_age_df['age_group']==a][g], marker_color=c, name=n, showlegend=display_legend))\nfig.update_layout(barmode='stack',\n                  title='Distribution of player Generic Positions for each FIFA Version and Age Group (as % to Total)', title_x=0.5,\n                  font=dict(size=12), template='plotly_white', autosize=False, width=800, height=500, margin=dict(l=10, r=10, t=60, b=10),\n                  legend_title='Player Generic Position', xaxis=dict(title='FIFA Version', zeroline=False),\n                  yaxis=dict(title='Generic Position Distribution', zeroline=False))\nfig.show()","c4d98f60":"groups = ['GK', 'DF', 'MF', 'FW']\ncolors = ['darkslategrey', 'blue', 'gold' ,'red']\nnames = ['Goalkeepers', 'Defenders', 'Midfielders', 'Forwards']\n\nfig = go.Figure()\nfor g, n, c in zip(groups, names, colors):\n    for a in value_group_bins: # list of bins previously selected when creating the qcut categories\n        display_legend = True if value_group_bins.index(a) == 0 else False\n        fig.add_trace(go.Bar(x=[pivoted_value_df[pivoted_value_df['value_group']==a]['fifa_version'], [a]*len(pivoted_value_df['fifa_version'])],\n                             y=pivoted_value_df[pivoted_value_df['value_group']==a][g], marker_color=c, name=n, showlegend=display_legend))\nfig.update_layout(barmode='stack',\n                  title='Distribution of player Generic Positions for each FIFA Version and Value Group (as % to Total)', title_x=0.5,\n                  font=dict(size=12), template='plotly_white', autosize=False, width=800, height=500, margin=dict(l=10, r=10, t=60, b=10),\n                  legend_title='Player Generic Position', xaxis=dict(title='FIFA Version', zeroline=False),\n                  yaxis=dict(title='Generic Position Distribution', zeroline=False))\nfig.show()","62585053":"Reading the dataset using the pandas library and displaying the first 5 records.","590802d2":"# <a id='4'>4. Clubs Analysis<\/a>","fa7a2fe2":"#### Highest Potential Team of previous FIFA versions (Potential attributes)\n\n<br>\n\n<i>In the match-up between the FIFA 20 and 21 players - based on the potential attribute - there is no significant difference in the average player overall rating (92.2 for FIFA 21 vs 92.5 for FIFA 20), but the difference in the average player age is quite evident (with FIFA 21 having younger players on the pitch compared to FIFA 20 - 23.6 vs 25.5).<\/i>\n\n<i>Jao Felix was considered one of the best potential strikers in FIFA 20 and 21, but did not keep the high promises given that he has been excluded from the top 11 potential players in FIFA 22.<\/i>","3f8980d5":"#### Real Madrid and Barcelona FIFA 22 and FIFA 15 squads with the best players (Overall attributes)\n\n<br>\n\n<i>In the match-up between RealMadrid and Barcelona in the latest FIFA version - based on the overall attribute - both teams have now lost their top scorer (C. Ronaldo departing RealMadrid in 2018 and Messi departing Barcelona in 2021), but have remained competitive with their average overall rating around 85 (RealMadrid 85.8 vs Barcelona 84.6).<\/i>\n\n<i>Barcelona is a younger team compared to RealMadrid, with Pedri (18 yo) representing a positive outlier and a great prospect.<\/i>","c1fec156":"Displaying the distribution across FIFA versions of teams' lineup average age among the top100 clubs.\n\n<i>The last three FIFA editions have seen a small increase in the average age of the top100 clubs, shifting from the median age of 27.5 years in FIFA 20 to 28 years in FIFA 22.<\/i>\n\n<i>It is worth to notice the outliers Be\u015fikta\u015f JK, with an average lineup age of 32.7 years, and Ajax, the club with the two lowest historical values overall (21.9 years in FIFA 16 and 22.6 years in FIFA 17)<\/i>","58a17abe":"Displaying the trend of average lineup ratings across FIFA versions among the top15 clubs.\n\n<i>The last three FIFA editions have seen a small increase in the average age of the top100 clubs, shifting from the median age of 27.5 years in FIFA 20 to 28 years in FIFA 22.<\/i>\n\n<i>The two highest average lineup ratings were recorded in FIFA 19 for Barcelona (87.9) and RealMadrid (87.7 - tied with BayernMunich rating in FIFA 17), but both teams started to fall up to FIFA 22, where they are not even in the top3 teams - which are PSG, Liverpool, and ManCity.<\/i>","c1e4252c":"# <a id='2'>2. Dataset<\/a>\n\n<div class=\"alert alert-block alert-info\" style=\"font-size:14px; line-height: 1.7em\">\n<p>\u26a0\ufe0f <b>Warnings<\/b>:\n<li>The FIFA players data was collected from sofifa, which is the most reliable website sharing this type of information. However, some issues regarding missing data still exist.<\/li>\n<li>The <i>mentality_compusure<\/i> attribute did not exist in FIFA 15, so the field is blank in the dataset for all players in the version 15<\/li>\n<li>The <i>goalkeeping_speed<\/i> field is only provided on sofifa for goalkeepers<\/li>\n<\/p>\n<\/div>","b39137ba":"Displaying the distribution across FIFA versions and best leagues of lineup age among the top100 clubs.\n\n<i>The Spanish and Italian leagues are the ones with the oldest players in their clubs' lineup, with Genoa and Juventus marking the highest historical average age values.<\/i>\n\n<i>A virtuous league regarding this aspect is the French Ligue 1, who has kept players in the lineup with low average age, especially in the clubs LOSC Lille and OGC Nice.<\/i>\n\n<i>The German Bundesliga used to have clubs with very low average age, but there has been a significant age increase in the last five years (from FIFA 18).<\/i>","46abece2":"Calculating the distribution of age and value of the four main player categories: goalkeepers, defenders, midfielders, and forwards.","514a1605":"#### Juventus and Inter FIFA 22 and FIFA 15 squads with the best players (Overall attributes)\n\n<br>\n\n<i>In the match-up between Juventus and InterMilan in the latest FIFA version - based on the overall attribute - both teams have the same 3-5-2 formation and similar average player ratings (84.1 for Juventus vs 83.5 for InterMilan) after the suffered departures of C. Ronaldo and Lukaku.<\/i>\n\n<i>The average player age is quite similar, with InterMilan showing a sligthly lower value (28.1) compared to Juventus (28.5).<\/i>","7fb262b5":"<i>In the same match-up in the first available FIFA version - based on the overall attribute -  shows a much weaker version of Liverpool, which has an average player rating of 80.4 - much lower than the ManCity's 83.3.<\/i>\n\n<i>On the other hand, ManCity had an older lineup, with an average player age of 27.7 - much higher than the Liverpool's 25.1.<\/i>","44725109":"Here below are the formulas that add the 'best_position' and 'value_million_eur', and wrap all the actions required to visualize the best players on the pitch for two opposing teams selected from the FIFA dataset.","9bcd1a65":"#### Bayern Munich and Borussia Dortmund FIFA 22 and FIFA 15 squads with the best players (Overall attributes)\n\n<br>\n\n<i>In the match-up between BayernMunich and BorussiaDortmund in the latest FIFA version - based on the overall attribute - Bayern has a better team, with a higher average player rating (84.6 vs 82.3 for BorussiaDortmund), while the average player age is similar in the two teams (27.8 for BayernMunich vs 27.6 for BorussiaDortmund).<\/i>\n\n<i>Quite suprisingly, the worst player on the pitch in this match-up plays for BayernMunich (Choupo-Moting, with 76 overall rating).<\/i>","d216b551":"#### Dream Team of FIFA 22 vs FIFA 15 (Overall attributes)\n\n<br>\n\n<i>In the match-up between the latest and first available FIFA version - based on the overall attribute - there is no significant difference in the average player overall rating (90.2 for FIFA 22 vs 89.2 for FIFA 15), but the difference in the average player age is quite evident (with FIFA 15 having younger players on the pitch compared to FIFA 22 - 28.8 vs 31.2).<\/i>\n\n<i>Only players in the best lineup for the first avilable and last FIFA version are Messi, C. Ronaldo, and Sergio Ramos.<\/i>","b48ed6e6":"Displaying the distribution across FIFA versions of teams' lineup overall attributes among the top100 clubs.\n\n<i>The highest average rating a lineup has ever had was Barcelona in FIFA 19, with an average player attribute in the 11-man lineup of 87.9, even higher than PSG in FIFA 22 (87.3 average player rating in the best lineup).<\/i>\n\n<i>In general, club values started to dramatically increase in FIFA 21, with the upper quartile range rising from \u20ac30M of the previous year to \u20ac50M. Club values increased in a such evident way that the upper quartile range of \u20ac30M in FIFA 20 was very close to the highest team average value in FIFA 15 (BayernMunich - 31.4 average player rating in the best lineup)<\/i>","1d77459c":"<i>In the same match-up in the first available FIFA version - based on the overall attribute - both teams have similar average player rating compared to FIFA 22 and the same total player value (\u20ac319.5 M).<\/i>\n\n<i>Barcelona was a sligthly better team than Real Madrid, with the strikers Messi, Suarez, and Neymat (also known as MSN) making the difference.<\/i>","3394dbc8":"Visualizing the columns with missing values using the missingno library.\n\nThe main fields with missing data are 'club_loaned_from', 'nation_team_id', 'nation_position', 'nation_jersey_number', 'player_tags', and 'goalkeeping_speed'.","1e8cc91a":"## <a id='32'>3.2. Lineup Visualizations of most popular European national leagues<\/a>","cff66dfb":"Displaying the relative distribution of age values based on the players' position.\n\n<i>Striker players on FIFA are, in general, younger than the other categories such as goalkeepers and defenders. A potential explanation for this trend is that strikers tend to retire from football earlier than the other types of players.<\/i>\n\n<i>Across the latest 8 FIFA versions, the main peculiar trend that can be spotted is that strikers are still the youngest type of player, but their average age is slightly increasing in the last few FIFA versions.<\/i>","add29e80":"# <a id='3'>3. Lineup Visualizations<\/a>","625417c7":"<i>In the match-up between the FIFA 18 and 19 players - based on the potential attribute - there is no significant difference in the average player overall rating (92.2 for FIFA 18 vs 92.6 for FIFA 19) and age (26.0 for FIFA 18 vs 26.3 for FIFA 19).<\/i>\n\n<i>Varane was considered one of the best potential defenders in FIFA 18 and 19, but did not keep the high promises given that he has been excluded from the top 11 potential players in FIFA 20.<\/i>","6ca0286d":"# <a id='1'>1. Introduction<\/a>\n\n<div class=\"alert alert-block alert-info\" style=\"font-size:14px; line-height: 1.7em\">\n<p>\ud83c\udfaf <b>Goals<\/b>:\n<li>Creating the functions that easily allow to draw the best lineups for two facing FIFA teams<\/li>\n<li>Analysing the FIFA clubs, leagues, and players<\/li>\n<\/p>\n<br>\n<p>\ud83d\udd28 <b>Tools<\/b>:\n<li><i>numpy<\/i> and <i>pandas<\/i> for data manipulation<\/li>\n<li><i>missingno<\/i> to display the missing data in the FIFA 22 dataset<\/li>\n<li><i>seaborn<\/i> and <i>plotly<\/i> for data visualization<\/li>\n<\/p>\n<\/div>","0dde7d44":"#### Liverpool and ManCity FIFA 22 and FIFA 15 squads with the best players (Overall attributes)\n\n<br>\n\n<i>In the match-up between Liverpool and ManCity in the latest FIFA version - based on the overall attribute - both teams have the same 4-3-3 formation, but Liverpool has a sligthly better average overall rating (86.7 vs 86.1) while ManCity has a lower average player age (26.7 vs 28.2).<\/i>\n\n<i>The younger ManCity players also exhibit a higher market value compared to Liverpool, with a total of \u20ac858 M.<\/i>","9d76fe92":"# <a id='6'>6. Players Analysis<\/a>","a55ba95b":"Displaying the distribution across FIFA versions and best leagues of lineup overall values (in million \u20ac) among the top100 clubs.\n\n<i>Clubs in the English Premier League significatly increased their value in the last two FIFA editions, driven mainly by Liverpool and ManCity.<\/i>\n\n<i>French Ligue 1 is the only league that has always had an outlier (PSG) for each FIFA edition regarding the club overall values (in million \u20ac).<\/i>\n\n<i>Italian Serie A have experienced a decrease in the clubs' overall value between FIFA 21 and FIFA 22, considering the important departures of players like C. Ronaldo, Lukaku, Donnarumma, and Hakimi, who were not replaced appropriately.<\/i>","9af12dbf":"Displaying the distribution across FIFA versions of teams' lineup overall values (in million \u20ac) among the top100 clubs.\n\n<i>The highest value a lineup has ever had was Liverpool in FIFA 21, with an average player value in the 11-man lineup of \u20ac88.6M, even higher than PSG in FIFA 22 (\u20ac80.2M average player value in the best lineup).<\/i>\n\n<i>In general, club values started to dramatically increase in FIFA 21, with the upper quartile range rising from \u20ac30M of the previous year to \u20ac50M. Club values increased in a such evident way that the upper quartile range of \u20ac30M in FIFA 20 was very close to the highest team average value in FIFA 15 (BayernMunich - 31.4 average player rating in the best lineup)<\/i>","ca0dcebe":"<i>In the match-up between the FIFA 16 and 17 players - based on the potential attribute - there is quite a difference in the average player overall rating (90.7 for FIFA 16 vs 92.0 for FIFA 17) and age (26.9 for FIFA 16 vs 25.1 for FIFA 17).<\/i>\n\n<i>J. Rodriguez was considered one of the best potential midfielders in FIFA 16 and 17, but did not keep the high promises given that he has been excluded from the top 11 potential players in FIFA 18.<\/i>","d76709a1":"<i>In the same match-up in the first available FIFA version - based on the overall attribute - BayernMunich was a stronger side (86.2 average rating in FIFA 15 vs 84.6 in FIFA 22) while BorussiaDortmund did not improve dramatically but was much younger (26.1 average age in FIFA 15 vs 27.6 in FIFA 22).<\/i>\n\n<i>BayernMunich used to play with the inconic pair of wingers Ribery and Robben, which were the among the oldest players in the team, second only to Pizarro.<\/i>","43e4ec6e":"#### Highest Potential Team of FIFA 22 vs FIFA 15 (Potential attributes)\n\n<br>\n\n<i>In the match-up between the latest and first available FIFA version - based on the potential attribute - there is a difference of 1.7 in the average player potential rating (91.9 for FIFA 22 vs 90.2 for FIFA 15) and a difference of 1.1 in the average player age (25.7 for FIFA 22 vs 26.8 for FIFA 15).<\/i>\n\n<i>Only players in the best lineup - based on overall and potential attribute - for the first avilable FIFA version are Messi, Suarez, and Ibrahimovic.<\/i>\n\n<i>It is worth to notice that the FIFA 22 best potential lineup includes the rising stars Haaland and Mbappe.<\/i>","b59619a5":"Displaying the distribution across FIFA versions and best leagues of lineup overall attributes among the top100 clubs.\n\n<i>Considering the parameter used to select the top100 clubs was based on their top players' overall attributes, it is understandable to see an overall improvement for some leagues where clubs such as FC Union Berlin, RB Leipzig, Bologna, and Granada CF used to have low overall attributes in earlier versions of the game.<\/i>\n\n<i>The overall improvement of English Premier League clubs have been stale over the years, with a peak in FIFA 21 thanks to the excellent Liverpool overall value. Other leagues, such as Spain Primera Division have seen their top teams suffering a drop in the overall attribute.<\/i>","c7abe280":"## <a id='31'>3.1. Lineup Visualizations of best FIFA players from each game version<\/a>","2c39731c":"<i>In the same match-up in the first available FIFA version - based on the overall attribute - both teams were weaker, with PSG falling from an average player rating of 87.3 to 82.8, and Lyon falling from 79.7 to 76.5.<\/i>\n\n<i>PSG maintained the same 4-4-2 formation, but without a single player from FIFA 15 that remained in the PSG lineup of FIFA 22.<\/i>","a780e9f2":"Displaying the trend of the top 15 player ratings across FIFA versions.\n\n<i>In the race for the best overall player, Messi and C. Ronaldo have been the contenders for several years, but Messi have won the contest most of the times (only in FIFA 17 C. Ronaldo had a higher rating, while in FIFA 18 they were tied at 94). The race for the best overall player has in FIFA 22 a new potential candidate, with Lewandowski being more rated than C. Ronaldo (now third at 91, tied with Neymar, De Bruyne, Oblak, and Mbapp\u00e9)<\/i>\n\n<i>It is worth to notice that, among the top15 players in FIFA 22, the one that had the lowest historical overall attribute was Kimmich in FIFA 15, in which he exhibited an overall value of 63.<\/i>","457bbf11":"The following analysis of clubs, leagues, and players is based on the top100 clubs that have been selected based on their best players' overall attributes in the latest FIFA version.\n\nOnce the 100 clubs with the best players in FIFA 22 have been selected, their best 11-man lineup was calculated, along with values such as average overall attribute, age, player values, etc.\n\nAn alterntive - and quicker - approach would have been the calculation of clubs' overall attributes based on the lineup players that FIFA select as being part of their best 11-man lineup, but that would have excluded all injured players or players that were not included in the latest games due to lack of fitness, coach decisions, etc.","9d90e6cd":"Displaying the relative distribution of values (in million \u20ac) based on the players' position.\n\n<i>Goalkeepers are by far the position where most of the players are low-valued; on the other end, strikers are the most values players. This trend has become more prominent in FIFA year after year.<\/i>\n\n<i>The defenders' value has a slighly downward trend, opposite to the upward trend for midfielders.<\/i>","276efd6e":"### Paris Saint-Germain and Olympique Lyonnais FIFA 22 and FIFA 15 squads with the best players (Overall attributes)\n\n<br>\n\n<i>In the match-up between PSG and Lyon in the latest FIFA version - based on the overall attribute - PSG has a much better team, with a higher average player rating (87.3 vs 79.7 for Lyon), while has a younger lineup (26.4 average age for Lyon vs 27.7 for PSG) mainly due to the veterans Messi and Sergio Ramos.<\/i>\n\n<i>PSG is the only team in FIFA 22 to have three offensive players with an overall rating above 90 (Messi, Neymar, and Mbappe).<\/i>","1abfcc99":"<i>In the same match-up in the first available FIFA version - based on the overall attribute - both teams were much worse compared to the last FIFA version, but the difference in average player rating is more evident for InterMilan (83.5 in FIFA 22 vs 79.3 in FIFA 15).<\/i>\n\n<i>Juventus was very old in FIFA 15, especially in the defence with Buffon (36), Barzagli (33), and Chiellini (29).<\/i>","47b8bbed":"FIFA is one of the most popular videogames that get released every year.\n\nThe purpose of this notebook is to analyse the FIFA players dataset available at this [Kaggle link](https:\/\/www.kaggle.com\/stefanoleone992\/fifa-22-complete-player-dataset), which provide information regarding players such as age, overall and potential attributes, club and league name, positions, and many others from the latest 8 editions of FIFA (from the 15th to the 22nd).\n\nOnce the dataset is read with *pandas* and the missing data gets displayed with the *missingno* library, some customized Python functions allow to draw the match-up against the best lineups of two teams on a football pitch.\n\nThe next step is the analysis of the players dataset, looking for insights about clubs, leagues and players.","24cbfadc":"# <a id='5'>5. Leagues Analysis<\/a>","a2870a49":"<center><img src=\"https:\/\/imgur.com\/f2fbbR6.jpg\"><\/center>\n\n<br>\n<center><h1>\ud83d\udcd0 FIFA 22 players - Lineup visualization and more<\/h1><\/center>\n\n# <a id='0'>Notebook Content<\/a>\n\n### - <a href='#1'>1. Introduction<\/a>\n### - <a href='#2'>2. Dataset<\/a>\n### - <a href='#3'>3. Lineup Visualizations<\/a>\n#### &ensp; - <a href='#31'>3.1. Lineup Visualizations of best FIFA players from each game version<\/a>\n#### &ensp; - <a href='#32'>3.2. Lineup Visualizations of most popular European national leagues<\/a>\n### - <a href='#4'>4. Clubs Analysis<\/a>\n### - <a href='#5'>5. League Analysis<\/a>\n### - <a href='#6'>6. Players Analysis<\/a>"}}