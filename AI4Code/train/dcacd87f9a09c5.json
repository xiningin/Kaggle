{"cell_type":{"4b17bcbd":"code","5d4e81b9":"code","6ea85bb2":"code","6c29edee":"code","37f46fe4":"code","89c48106":"code","b678d6b0":"code","dbb3247f":"code","a6d1d86c":"code","dfe8afb8":"code","a39d9153":"code","7cd8fb50":"code","aaa3c01e":"code","046efbe0":"code","821a3bb9":"code","536f05ef":"code","887eadd6":"code","ef6fc0d1":"code","ab886f82":"code","5531d35b":"code","579259d9":"code","505ef1ae":"code","b5dc3352":"code","04d9e047":"code","39d5c53c":"code","4e905420":"code","87ecebe4":"code","e7f7b961":"code","9b7431b1":"code","5de61c30":"code","38728c60":"code","dd7c7a20":"code","e2076c86":"code","c921de64":"code","e90c087a":"code","03783be8":"code","5582ad4c":"code","0c6a3e38":"code","6bd2aaa1":"code","6ec0793f":"code","fd590e63":"code","a28b791a":"code","53394c14":"code","36dfa458":"code","23b57936":"code","65bc2100":"code","39665028":"code","ceba1222":"code","b4b719d1":"code","7463be97":"code","4fd31ebe":"code","d7523fc8":"code","2c9d0af2":"code","a6b7299b":"code","c62553af":"markdown","33fee717":"markdown","7abe150d":"markdown","df54d05d":"markdown","d7932e8e":"markdown","72c2c510":"markdown","2ef65af4":"markdown","905429c5":"markdown","079b9829":"markdown","ba17a0be":"markdown","7fffcb92":"markdown"},"source":{"4b17bcbd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5d4e81b9":"import numpy as np\nimport pandas  as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression","6ea85bb2":"train = pd.read_csv(\"..\/input\/StudentsPerformance.csv\")","6c29edee":"print (\"Number of entries in the given dataset are\",train.shape[0])\nprint (\"Number of columns in the given dataset are\",train.shape[1])","37f46fe4":"train.head()","89c48106":"print (\"Columns present in the given dataset are:-\")\nfor i in train.columns:\n    print(i,)\n","b678d6b0":"print (\"Some basic evaluations :-\")\nprint (train.describe())","dbb3247f":"train.info()\nprint()\nprint (\"There are no null values in the dataset\")","a6d1d86c":"sns.countplot(train[\"gender\"])\nprint (train['gender'].value_counts())","dfe8afb8":"sns.countplot(train['race\/ethnicity'],order=['group A','group B','group C','group D','group E'])\nprint (train['race\/ethnicity'].value_counts())","a39d9153":"sns.countplot(train['parental level of education'])\nplt.xticks(rotation=30)\nprint (train['parental level of education'].value_counts())","7cd8fb50":"sns.countplot(train['test preparation course'],palette='spring')\nprint (train['test preparation course'].value_counts())","aaa3c01e":"# Let passing marks be 33 marks\ntrain['Math_Pass_Status']=np.where(train['math score']>=33,'P','F')\nprint(train['Math_Pass_Status'].value_counts())\nsns.countplot(train['Math_Pass_Status'])","046efbe0":"# Let passing marks be 33 marks\ntrain['Reading_Pass_Status']=np.where(train['reading score']>=33,'P','F')\nprint(train['Reading_Pass_Status'].value_counts())\nsns.countplot(train['Reading_Pass_Status'])","821a3bb9":"# Let passing marks be 33 marks\ntrain['Writing_Pass_Status']=np.where(train['writing score']>=33,'P','F')\nprint(train['Writing_Pass_Status'].value_counts())\nsns.countplot(train['Writing_Pass_Status'])","536f05ef":"f,axes = plt.subplots(figsize=(20,10),sharex=True)\nsns.scatterplot(x='math score',y='reading score',data=train,hue=train['gender'])","887eadd6":"f,axes = plt.subplots(figsize=(10,10),sharex=True)\nsns.scatterplot(x='writing score',y='reading score',data=train,hue=train['gender'])","ef6fc0d1":"f,axes = plt.subplots(figsize=(10,10),sharex=True)\nsns.scatterplot(x='writing score',y='math score',data=train,hue=train['gender'])","ab886f82":"train.corr()","5531d35b":"sns.heatmap(train.corr())","579259d9":"train.plot(subplots=True)\nplt.show()","505ef1ae":"train['lunch'].value_counts()","b5dc3352":"fig,ax = plt.subplots(figsize=(5,5))\nax.pie(train[\"Math_Pass_Status\"].value_counts(),labels=['P','F'],explode=(0.05,0.05),autopct='%1.1f%%',shadow=True,startangle=90)\nax.axis('equal')  \nplt.tight_layout()\nplt.legend()\nplt.show()","04d9e047":"fig,ax = plt.subplots(figsize=(5,5))\nax.pie(train[\"Reading_Pass_Status\"].value_counts(),labels=['P','F'],explode=(0.05,0.05),autopct='%1.1f%%',shadow=True,startangle=90)\nax.axis('equal')  \nplt.tight_layout()\nplt.legend()\nplt.show()","39d5c53c":"fig,ax = plt.subplots(figsize=(5,5))\nax.pie(train[\"Writing_Pass_Status\"].value_counts(),labels=['P','F'],explode=(0.05,0.05),autopct='%1.1f%%',shadow=True,startangle=90)\nax.axis('equal')  \nplt.tight_layout()\nplt.legend()\nplt.show()\n","4e905420":"sns.countplot(train['parental level of education'],hue=train['Math_Pass_Status'])\nplt.xticks(rotation=90)\nprint(\"This shows that more children are failed in maths\")\nprint (\"whose parents are having high school level of education.\")","87ecebe4":"sns.countplot(train['parental level of education'],hue=train['Reading_Pass_Status'])\nplt.xticks(rotation=90)\nprint(\"This shows that more children are failed in reading\")\nprint (\"whose parents are having high school level of education.\")","e7f7b961":"sns.countplot(train['parental level of education'],hue=train['Writing_Pass_Status'])\nplt.xticks(rotation=90)\nprint(\"This shows that more children are failed in writing\")\nprint (\"whose parents are having high school level of education.\")","9b7431b1":"def compute_percentage(x):\n    pct = (x['math score']+x['reading score']+x['writing score'])\/3.0\n    return round(pct,2)\ntrain['Percentage'] =(compute_percentage(train))","5de61c30":"def compute_grade(train):\n    if train['Percentage']<33.0:\n        return 'F'\n    elif train['Percentage']>=90.0:\n        return 'A1'\n    elif 80.0<=train['Percentage']<90.0:\n        return 'A2'\n    elif 70.0<=train['Percentage']<80.0:\n        return 'B1'\n    elif 60.0<=train['Percentage']<70.0:\n        return 'B2'\n    elif 50.0<=train['Percentage']<60.0:\n        return 'C'\n    elif 40.0<=train['Percentage']<50.0:\n        return 'D'\n    elif 33.0<=train['Percentage']<40.0:\n        return 'E'\ntrain['Grade'] = train.apply(compute_grade,axis=1)\n","38728c60":"sns.countplot(train['Grade'],order=['A1','A2','B1','B2','C','D','E','F'])\nprint(train['Grade'].value_counts())","dd7c7a20":"sns.countplot(train['Grade'],hue=train['test preparation course'],order=['A1','A2','B1','B2','C','D','E','F'])","e2076c86":"one_hot = pd.get_dummies(train['gender'],drop_first=True)\ntrain = train.join(one_hot)\none_hot =  pd.get_dummies(train['race\/ethnicity'],drop_first=True)\ntrain = train.join(one_hot)\none_hot =  pd.get_dummies(train['parental level of education'],drop_first=True)\ntrain = train.join(one_hot)\none_hot =  pd.get_dummies(train['test preparation course'],drop_first=True)\ntrain = train.join(one_hot)\none_hot =  pd.get_dummies(train['Grade'],drop_first=True)\ntrain = train.join(one_hot)\n","c921de64":"train = train.drop(['gender','race\/ethnicity','parental level of education','test preparation course','Grade'],axis=1)","e90c087a":"#train = train.drop(['Math_Pass_Status','Reading_Pass_Status','Writing_Pass_Status'],axis=1)","03783be8":"train = train.drop(['lunch'],axis=1)","5582ad4c":"X = train.drop(columns=['Math_Pass_Status','Reading_Pass_Status','Writing_Pass_Status'])\ny = train['Math_Pass_Status']","0c6a3e38":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","6bd2aaa1":"model = DecisionTreeClassifier()","6ec0793f":"model.fit(X_train,y_train)","fd590e63":"y_pred = model.predict(X_test)","a28b791a":"print(\"Model Accuracy (%):\", accuracy_score(y_test,y_pred)*100)","53394c14":"X = train.drop(columns=['Math_Pass_Status','Reading_Pass_Status','Writing_Pass_Status'])\ny = train['Reading_Pass_Status']","36dfa458":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","23b57936":"model = SVC()","65bc2100":"model.fit(X_train,y_train)\n","39665028":"y_pred = model.predict(X_test)","ceba1222":"print(\"Model Accuracy (%):\", accuracy_score(y_test,y_pred)*100)","b4b719d1":"X = train.drop(columns=['Math_Pass_Status','Reading_Pass_Status','Writing_Pass_Status'])\ny = train['Writing_Pass_Status']","7463be97":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","4fd31ebe":"model = LogisticRegression()","d7523fc8":"model.fit(X_train,y_train)","2c9d0af2":"y_pred = model.predict(X_test)","a6b7299b":"print(\"Model Accuracy (%):\", accuracy_score(y_test,y_pred)*100)","c62553af":"# WRITING SCORE AND PASS STATUS","33fee717":"# MATH SCORE AND PASS STATUS","7abe150d":"# LOADING DATASET","df54d05d":"# PREDICTING MATH PASS STATUS USING DECISION TREE CLASSIFIER","d7932e8e":"# CORRELATION BETWEEN THE READING,WRITING AND MATH SCORE OF A STUDENT","72c2c510":"# READING SCORE AND PASS STATUS","2ef65af4":"# DATA VISUALISATION","905429c5":"# PREDICTING WRITING PASS STATUS USING LOGISTIC REGRESSION","079b9829":"# RELATIONS BETWEEN READING,WRITING AND MATH SCORE OF A STUDENT","ba17a0be":"# PREDICTING READING PASS STATUS USING SVC","7fffcb92":"# IMPORTING LIBRARIES"}}