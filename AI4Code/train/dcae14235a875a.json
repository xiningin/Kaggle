{"cell_type":{"a9d3cc4c":"code","ed05bed1":"code","3637ebd7":"code","16673bae":"code","5bd00ad8":"code","d333ac04":"code","0ca5b189":"code","5d56d064":"code","6bdb72a4":"code","fa0b0c67":"code","599f5903":"code","c395322f":"code","141d5f41":"code","3629b361":"code","b348bdb5":"code","66a4c38c":"code","c55fada2":"code","bf6a4f7d":"code","46809e8c":"code","2ca5aa24":"code","c7b82c91":"markdown","52fe4768":"markdown","001d984e":"markdown","30e0e894":"markdown","73dd748b":"markdown","4d96b9d7":"markdown"},"source":{"a9d3cc4c":"# Check the versions of libraries\n\n# Python version\nimport sys\nprint('Python: {}'.format(sys.version))\n# scipy\nimport scipy\nprint('scipy: {}'.format(scipy.__version__))\n# numpy\nimport numpy\nprint('numpy: {}'.format(numpy.__version__))\n# matplotlib\nimport matplotlib\nprint('matplotlib: {}'.format(matplotlib.__version__))\n# pandas\nimport pandas\nprint('pandas: {}'.format(pandas.__version__))\n# scikit-learn\nimport sklearn\nprint('sklearn: {}'.format(sklearn.__version__))","ed05bed1":"# Load libraries\nfrom pandas import read_csv\nfrom pandas.plotting import scatter_matrix\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","3637ebd7":"# Check Kaggle filename\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","16673bae":"# Load dataset\nurl = \"\/kaggle\/input\/iris\/Iris.csv\"\n#names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']\ndataset = read_csv(url)","5bd00ad8":"# shape\nprint(dataset.shape)","d333ac04":"# head\nprint(dataset.head(20))","0ca5b189":"# descriptions\nprint(dataset.iloc[:,1:].describe())","5d56d064":"# Create a dataset backup\ndataset_bak = dataset","6bdb72a4":"dataset.iloc[:,0]","fa0b0c67":"# Remove first column - Id\ndataset = dataset.drop(['Id'], axis=1)\n# head\nprint(dataset.head(20))","599f5903":"# box and whisker plots\nfig=plt.figure(figsize=(10,5), dpi=100, facecolor='w', edgecolor='k')\ndataset.plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)\nplt.show()","c395322f":"# histograms\ndataset.hist()\nplt.show()","141d5f41":"# scatter plot matrix\nscatter_matrix(dataset)\nplt.show()","3629b361":"# Split-out validation dataset\narray = dataset.values\nX = array[:,0:4]\ny = array[:,4]\n\n# Split 80-20 train-test data\nX_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.20, random_state=1)","b348bdb5":"# Visualize first ten results of train data\nX_train[1:10,]","66a4c38c":"# Visualize first ten results of validation data\nX_validation[1:10,]","c55fada2":"# Visualize first ten results of train predictor\nY_train[1:10,]","bf6a4f7d":"# Visualize first ten results of validation predictor\nY_validation[1:10,]","46809e8c":"# Spot Check Algorithms\nmodels = []\nmodels.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC(gamma='auto')))","2ca5aa24":"# evaluate each model in turn\nresults = []\nnames = []\nfor name, model in models:\n    kfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)\n    cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    print('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))","c7b82c91":"## Machine Learning Part\n\nOften the hardest part of solving a machine learning problem can be finding the right estimator for the job.\nDifferent estimators are better suited for different types of data and different problems.\nThe flowchart below is designed to give users a bit of a rough guide on how to approach problems with regard to which estimators to try on your data.\n\nPlease check official chart here > [flowchart by SciKit-Learn](https:\/\/scikit-learn.org\/stable\/tutorial\/machine_learning_map\/index.html)\n\n![](https:\/\/scikit-learn.org\/stable\/_static\/ml_map.png)","52fe4768":"## ML models\n\nWe choose some machine learning model as:\n\n* Logistic Regression\n* Linear Discriminant Analysis\n* K-Neighbors Classifier\n* Decision Tree Classifier\n* Gaussian NB\n* SVC\n\nAlso we can manipulate them with other parameter, or in simple words **tuning ML model**","001d984e":"## Load dataset\n\n**Data Set Information:**\n\nThis is perhaps the best known database to be found in the pattern recognition literature. Fisher's paper is a classic in the field and is referenced frequently to this day. (See Duda & Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other.\n\nPredicted attribute: class of iris plant.\n\nThis is an exceedingly simple domain.\n\nThis data differs from the data presented in Fishers article (identified by Steve Chadwick, spchadwick '@' espeedaz.net ). The 35th sample should be: 4.9,3.1,1.5,0.2,\"Iris-setosa\" where the error is in the fourth feature. The 38th sample: 4.9,3.6,1.4,0.1,\"Iris-setosa\" where the errors are in the second and third features.\n\n\nAttribute Information:\n\n1. sepal length in cm\n2. sepal width in cm\n3. petal length in cm\n4. petal width in cm\n5. class:\n-- Iris Setosa\n-- Iris Versicolour\n-- Iris Virginica\n\n","30e0e894":"## Data Set Information:\n\nThis is perhaps the best known database to be found in the pattern recognition literature. Fisher's paper is a classic in the field and is referenced frequently to this day. (See Duda & Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other.\n\n![florecita iris](https:\/\/archive.ics.uci.edu\/ml\/assets\/MLimages\/Large53.jpg)\n\n[UCI MACHINE LEARNING](https:\/\/archive.ics.uci.edu\/ml\/datasets\/iris)","73dd748b":"## Final thoughts\n\nFor a simple dataset like Iris, we have only 150 observations for to calculate a machine learning model. Anyway we have a good results >95%. So, our conclusions are good and we validate ml models above.\n\nThank you for to read my first job and thanks for your time and upvote!\n\nThanks\n[marcusRB](https:\/\/www.marcusrb.com)\n","4d96b9d7":"# EDA\n\nWith the Exploratory Data Analyisis we explore the dataset, summary and stat datas."}}