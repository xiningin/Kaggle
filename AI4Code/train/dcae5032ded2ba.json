{"cell_type":{"2a8bf38e":"code","55f29a63":"code","9c2b2fca":"code","2dc344b5":"code","b3b43117":"code","22b3a4a8":"code","a1364422":"code","3899af9e":"code","fcdf12a7":"code","8e16e22f":"code","dc08c051":"markdown","c2248346":"markdown","fd078422":"markdown","12c58e7b":"markdown","dc36b043":"markdown","4bc84984":"markdown","12d14035":"markdown","9393d21f":"markdown","b569afae":"markdown"},"source":{"2a8bf38e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt","55f29a63":"def pond(miu):\n    \"\"\"\n    Calcular el factor de ponderaci\u00f3n para cada direcci\u00f3n.\n    \"\"\"\n    ponderaciones = []\n    for i in range(len(miu)-1):\n        ponderaciones.append(miu[i]-miu[i+1])\n    ponderaciones.append(miu[-1])\n    ponderaciones = np.array(ponderaciones)\n    \n    return ponderaciones","9c2b2fca":"def simulacion(dx = 0.001, dt= 0.025, x_0 = 0.0, t_0 = 0.05, dir = 20,v = 1, St = 1, Ss=0.5, x_f= 1,PhiAn=None,ponderaciones = False):\n    \"\"\"\n    \n    \"\"\"\n    \n    #Aignaci\u00f3n de valores\n    \n    #Nodos y tiempos\n    x = x_0;\n    t = t_0;\n    \n    #Direcciones\n    dd = 1\/dir;\n    miu = -np.sort(-np.arange(dd,1+dd,dd));   #Discretizaci\u00f3n del dominio angular\n    \n    #B\n    B = 1\/(v*dt);\n    \n    # Phi Nodo Anterior    \n    # Condiciones Iniciales\n    # matriz de un solo nodo con filas de tiempos y columnas de direcciones\n    PhiA = PhiAn;\n    \n    #Temporal Nodos y tiempo Nodo Actual\n    TempTN = np.concatenate((np.array([[0,0]]),np.array([[0,dt]]),np.array([[0,2*dt]]),np.array([[0,3*dt]])),axis=0);\n    \n    # -------  |  Nodo  |   tiempo \n    #               0        0     \n    #               0        0.025 \n    #               0        2*dt\n    #               0        3*t\n    \n    PhiA = np.concatenate((TempTN,PhiA),axis=1);\n    \n    # -------  |  Nodo  |   tiempo   |   Phi 1\/20  |  Phi 2\/20  |  .... | Phi 1 \n    #               0        0             0                0               0      #transanterior\n    #               0        0.025         0\/1            0\/1               1      #Anterir           #trananterior\n    #               0        2*dt            0            0                 0      #Anterior\n    #               0        3*t              0            0                0\n    \n    \n    # Condiciones iniciales\n    # Resultados finales de la simulaci\u00f3n\n    Phi = PhiA[0:2];  # Guarda 2 primeras filas en vector final\n\n    # Valores actuales resultado de cada simulaci\u00f3n\n    # Valores del nodo actual\n    PhiN = np.zeros([1,dir+2]);\n\n    #Variable para navegar en el nodo anterior\n    cont = 0;\n\n    #Variables de ayuda\n    val1 = [];     #Valores del nodo anterior tiempo anterior\n    val2 = [];     #Valores del nodo anterior tiempo anterior anterior\n\n    while (x <= x_f):\n        val1 = PhiA[cont+1,2:];\n        val2 = PhiA[cont,2:];\n        \n        phic = np.array([val1 + (dx)*( ( (B+St)*( ( val2 \/ (1+v*St*dt)) - val1 ) ) + ( (Ss\/2)* np.sum(val1)*dd ) )\/miu]);\n\n        # Verificar si el resultado es 0\n        if (phic == np.zeros([1,dir])).all():  #Termin\u00edn\u00f3 el nodo\n            \n            Phi = np.concatenate((Phi,PhiN[1:]),axis=0);  #Push nuevos nodos\n            \n            PhiA = np.concatenate((np.zeros([1,dir+2]),PhiN,np.zeros([1,dir+2]),np.zeros([1,dir+2])),axis = 0);         #Nodo anterior\n            \n            PhiN = np.zeros([1,dir+2]);\n            \n            x = x + dx;    # Pasar al siguiente nodo\n            t = 25*x+dt;   # Paso al tiempo v\u00e1lido del nodo\n            \n            cont = 1;    \n            \n        else:      # No he terminado el nodo\n            PhiN = np.concatenate((PhiN,np.concatenate((np.array([[x,t]]),phic),axis = 1)),axis=0);    #Push nuevo calculo\n            t = t+dt;\n            cont = cont +1;\n    \n    #Crear el Dataframe\n    columnas = [\"Nodo\",\"Tiempo\"]\n    for i,k in enumerate(miu):\n        columnas.append(\"Phi \"+ '{:.5}'.format(str(k)))\n\n    df = pd.DataFrame(Phi[1:],columns=columnas);\n    \n    if (ponderaciones):\n        ponde = pond(miu)\n        return (df,ponde,columnas);\n    else:\n        return (df,columnas);","2dc344b5":"Ss = np.array([0.1,0.5,0.7,0.9,0.99999]);\n\nTotales = pd.DataFrame();\nPrimeros = pd.DataFrame();\nTotalCol = [];\n\nfl_o = 1;\ndir = 20;\nCondIni = np.concatenate((np.zeros([1,dir]),np.ones([1,dir]),np.zeros([1,dir]),np.zeros([1,dir])),axis = 0);\nv = 1000000\n\nfor i,k in enumerate(Ss):\n    \n    df,ponderaciones,columnas = simulacion(Ss = k, v = v,dir = dir,x_f = 3,PhiAn = CondIni,ponderaciones=True);\n    \n    Primeros = df.groupby('Nodo')[columnas[2:]].nth(0);\n    \n    Totales['Total Ss = ' + str(k)] = np.sum(np.multiply(Primeros[columnas[2:]],ponderaciones),axis=1)    ## C\u00e1lculo de flujo total ponderado\n    TotalCol.append('Total Ss = ' + str(k))\n    \n    # Gr\u00e1ficas Flujos Dispersos y Ponderado\n    plt.figure(figsize=(15,15))\n    for w,a in enumerate(columnas[2:]):\n        plt.plot(Primeros.index,Primeros[a],label = '{:.8}'.format(str(a)))\n\n    plt.scatter(Primeros.index,Totales['Total Ss = ' + str(k)],c='red')   #Pintar ponderada\n    plt.grid(True)\n    plt.title(\"Flujos Dispersos y ponderado con Ss = \" + str(k))\n    plt.xlabel(\"Nodo x (cm)\");\n    plt.ylabel(\"Flujo\");\n    plt.legend()\n    plt.show()\n    \n#graficar fliujos ponderados\nplt.figure(figsize=(15,15))    \nfor i ,k in enumerate(TotalCol):\n    plt.plot(Primeros.index,Totales[k],label = k)\n    plt.grid(True)\n    plt.xlabel(\"Nodo x (cm)\");\n    plt.ylabel(\"Flujos Totales\");\nplt.legend()\nplt.show()","b3b43117":"\nv = np.array([100,1000,10000,1000000,10000000]);\n\nTotales = pd.DataFrame();\nPrimeros = pd.DataFrame();\nTotalCol = [];\nSs = 0.7\n\nfl_o = 1;\ndir = 20;\nCondIni = np.concatenate((np.zeros([1,dir]),np.ones([1,dir]),np.zeros([1,dir]),np.zeros([1,dir])),axis = 0);\n\nfor i,k in enumerate(v):\n    \n    df,ponderaciones,columnas = simulacion(Ss = Ss, v = k,dir = dir,x_f = 3,PhiAn = CondIni,ponderaciones=True);\n    \n    Primeros = df.groupby('Nodo')[columnas[2:]].nth(0);\n    \n    Totales['Total v = ' + str(k)] = np.sum(np.multiply(Primeros[columnas[2:]],ponderaciones),axis=1)\n    TotalCol.append('Total v = ' + str(k))\n    \n    # Gr\u00e1ficas Flujos Dispersos y Ponderado\n    plt.figure(figsize=(15,15))\n    for w,a in enumerate(columnas[2:]):\n        plt.plot(Primeros.index,Primeros[a],label = '{:.8}'.format(str(a)))\n\n    plt.scatter(Primeros.index,Totales['Total v = ' + str(k)],c='red')\n    plt.grid(True)\n    plt.title(\"Flujos Dispersos y ponderado con v = \" + str(k))\n    plt.xlabel(\"Nodo x (cm)\");\n    plt.ylabel(\"Flujo\");\n    plt.legend()\n    plt.show()\n    \nplt.figure(figsize=(15,15))    \n\nfor i ,k in enumerate(TotalCol):\n    plt.plot(Primeros.index,Totales[k],label = k)\n    plt.grid(True)\n    plt.xlabel(\"Nodo x (cm)\");\n    plt.ylabel(\"Flujos Totales\");\nplt.legend()\nplt.show()","22b3a4a8":"#Valores de las simulaciones\n\nSs = np.array([0.4140003,0.3553593,0.3537399,0.4637000,0.0859787]);\nSt = np.array([0.4140398,0.3553656,0.3537402,0.4637032,0.1141542]);\nv = np.array([0.00021876,0.0013835,0.043751,1.3835,4.3751])*np.power(10,9);\nev = np.array([0.0253,1,1000,1000000,10000000]);\nfn = np.array([2.501181,2.055437,2043.516,2020819,6404553])*(1\/np.power(10,15));\n\ngen = np.array([Ss,St,v,ev,fn]).T\n\nTotales = pd.DataFrame();\nPrimeros = pd.DataFrame();\nTotalCol = [];\n\nfl_o = 1;\ndir = 20;\nCondIni = np.concatenate((np.zeros([1,dir]),np.ones([1,dir]),np.zeros([1,dir]),np.zeros([1,dir])),axis = 0);\n\n\nfor i,k in enumerate(gen):\n    \n    df,ponderaciones,columnas = simulacion(Ss = k[0],St = k[1], v = k[2],dir = dir,x_f = 3,PhiAn = CondIni,ponderaciones=True);\n    \n    Primeros = df.groupby('Nodo')[columnas[2:]].nth(0);\n    \n    Totales['Total Ss = ' + str(k[0]) + ', St =  ' + str(k[1])  + ', v =  ' + str(k[2])+ ', ev =  ' + str(k[3])+ ', fn =  ' + str(k[-1])] = np.power(10,12)*np.sum(np.multiply(Primeros[columnas[2:]],ponderaciones),axis=1)\n    TotalCol.append('Total Ss = ' + str(k[0]) + ', St =  ' + str(k[1])  + ', v =  ' + str(k[2])+ ', ev =  ' + str(k[3]) + ', fn =  ' + str(k[-1]))\n    \n############ MULTIPLICAR POR F_0 10^12\n    \n# Gr\u00e1ficas Flujos Totales\nplt.figure(figsize=(15,15))    \nfor i ,k in enumerate(TotalCol):\n    plt.plot(Primeros.index,Totales[k],label = k)\n    plt.grid(True)\n    plt.xlabel(\"Nodo x (cm)\");\n    plt.ylabel(\"neutrones\/(cm^2*s)\");\nplt.legend()\nplt.show()\n\n\nDosis = pd.DataFrame();\n\nfor i,k in enumerate(TotalCol):\n    Dosis[k] = gen[i,-1]*Totales[k]\n\n# Gr\u00e1ficas Dosis    \nplt.figure(figsize=(15,15))       ## ^-15\nfor i ,k in enumerate(TotalCol[0:2]):\n    ymax = Dosis[k].max()\n    plt.plot(Primeros.index,Dosis[k],label = \"Dosis \"+ k + \" , Dosis_Max ={:1.4f}\".format(ymax))    \n    plt.grid(True)\n    plt.xlabel(\"Nodo x (cm)\");\n    plt.ylabel(\"TASA DE DOSIS (cGy\/s)\");\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(15,15))     ## ^-12\nymax = Dosis[TotalCol[2]].max()\nplt.plot(Primeros.index,Dosis[TotalCol[2]],label = \"Dosis \"+ TotalCol[2] + \" , Dosis_Max ={:1.4f}\".format(ymax))   \nplt.grid(True)\nplt.xlabel(\"Nodo x (cm)\");\nplt.ylabel(\"TASA DE DOSIS (cGy\/s)\");\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(15,15))    \nfor i ,k in enumerate(TotalCol[3:]):   ## ^-9\n    ymax = Dosis[k].max()\n    plt.plot(Primeros.index,Dosis[k],label = \"Dosis \"+ k + \" , Dosis_Max ={:1.4f}\".format(ymax))   \n    plt.grid(True)\n    plt.xlabel(\"Nodo x (cm)\");\n    plt.ylabel(\"TASA DE DOSIS (cGy\/s)\");\nplt.legend()\nplt.show()\n\n","a1364422":"\nSs = np.array([0.1,0.5,0.7,0.9,0.99999]);\nTotales = pd.DataFrame();\nPrimeros = pd.DataFrame();\nTotalCol = [];\n\nfl_o = 1;\ndir = 20;\nCondIni = np.concatenate((np.zeros([1,dir]),np.array([np.append(fl_o,np.zeros([1,dir-1]))]),np.zeros([1,dir]),np.zeros([1,dir])),axis = 0);\n\nfor i,k in enumerate(Ss):\n    \n    df,columnas = simulacion(Ss = k, v = 1000000,dir = dir,x_f = 5,PhiAn = CondIni);\n    \n    Primeros = df.groupby('Nodo')[columnas[2:]].nth(0);\n    \n    Totales['Total Ss = ' + str(k)] = np.sum(Primeros[columnas[2:]],axis=1)\n    TotalCol.append('Total Ss = ' + str(k))\n    \n    # Gr\u00e1ficas Flujos dispersos\n    plt.figure(figsize=(15,15))\n    for w,a in enumerate(columnas[3:]):\n        plt.plot(Primeros.index,Primeros[a],label = '{:.8}'.format(str(a)))\n\n    plt.grid(True)\n    plt.title(\"Flujos Dispersos con Ss = \" + str(k))\n    plt.xlabel(\"Nodo x (cm)\");\n    plt.ylabel(\"Flujo\");\n    plt.legend()\n    plt.show()\n    \n    plt.figure(figsize=(15,15))\n    plt.plot(Primeros.index,Primeros[columnas[2]],label = columnas[2])\n    plt.plot(Primeros.index,Totales['Total Ss = ' + str(k)],c='red',label = 'Flujo Total')\n    plt.grid(True)\n    plt.title(\"Flujo incidente y Total con Ss = \" + str(k))\n    plt.xlabel(\"Nodo x (cm)\");\n    plt.ylabel(\"Flujo\");\n    plt.legend()\n    plt.show()\n\nplt.figure(figsize=(15,15))    \n\nfor i ,k in enumerate(TotalCol):\n    xmax = np.argmax(Totales[k]);\n    ymax = Totales[k].max()\n    plt.plot(Primeros.index,Totales[k],label = k + \" x_Max (cm)= {:1.4f}, Flujo_Total_Max ={:1.4f}\".format(xmax, ymax))\n    plt.grid(True)\n    plt.xlabel(\"Nodo x (cm)\");\n    plt.ylabel(\"Flujos Totales\");\nplt.legend()\nplt.show()","3899af9e":"v = np.array([100,1000,10000,1000000,10000000]);\n\nTotales = pd.DataFrame();\nPrimeros = pd.DataFrame();\nTotalCol = [];\nSs = 0.7\n\nfl_o = 1;\ndir = 20;\nCondIni = np.concatenate((np.zeros([1,dir]),np.array([np.append(fl_o,np.zeros([1,dir-1]))]),np.zeros([1,dir]),np.zeros([1,dir])),axis = 0);\n\nfor i,k in enumerate(v):\n    \n    df,columnas = simulacion(Ss = Ss, v = k,dir = dir,x_f = 3,PhiAn = CondIni);\n    \n    Primeros = df.groupby('Nodo')[columnas[2:]].nth(0);\n    \n    Totales['Total v = ' + str(k)] = np.sum(Primeros[columnas[2:]],axis=1)\n    TotalCol.append('Total v = ' + str(k))\n    \n    # Gr\u00e1ficas Flujos dispersos\n    plt.figure(figsize=(15,15))\n    for w,a in enumerate(columnas[3:]):\n        plt.plot(Primeros.index,Primeros[a],label = '{:.8}'.format(str(a)))\n\n    plt.grid(True)\n    plt.title(\"Flujos Dispersos con v = \" + str(k))\n    plt.xlabel(\"Nodo x (cm)\");\n    plt.ylabel(\"Flujo\");\n    plt.legend()\n    plt.show()\n    \n    #Gr\u00e1fica de Flujo incidente y Total\n    plt.figure(figsize=(15,15))\n    plt.plot(Primeros.index,Primeros[columnas[2]],label = columnas[2])\n    plt.plot(Primeros.index,Totales['Total v = ' + str(k)],c='red',label = 'Flujo Total')\n    plt.grid(True)\n    plt.title(\"Flujo incidente y Total con v = \" + str(k))\n    plt.xlabel(\"Nodo x (cm)\");\n    plt.ylabel(\"Flujo\");\n    plt.legend()\n    plt.show()\n\nplt.figure(figsize=(15,15))    \n\nfor i ,k in enumerate(TotalCol):\n    xmax = np.argmax(Totales[k]);\n    ymax = Totales[k].max()\n    plt.plot(Primeros.index,Totales[k],label = k + \" x_Max (cm)= {:1.4f}, Flujo_Total_Max ={:1.4f}\".format(xmax, ymax))\n    plt.grid(True)\n    plt.xlabel(\"Nodo x (cm)\");\n    plt.ylabel(\"Flujos Totales\");\nplt.legend()\nplt.show()","fcdf12a7":"#Valores de las simulaciones\n\nSs = np.array([0.4140003,0.3553593,0.3537399,0.4637000,0.0859787]);\nSt = np.array([0.4140398,0.3553656,0.3537402,0.4637032,0.1141542]);\nv = np.array([0.00021876,0.0013835,0.043751,1.3835,4.3751])*np.power(10,9);\nev = np.array([0.0253,1,1000,1000000,10000000]);\nfn = np.array([2.501181,2.055437,2043.516,2020819,6404553])*(1\/np.power(10,15));\n\ngen = np.array([Ss,St,v,ev,fn]).T\n\nTotales = pd.DataFrame();\nPrimeros = pd.DataFrame();\nTotalCol = [];\n\nfl_o = 1;\ndir = 20;\nCondIni = np.concatenate((np.zeros([1,dir]),np.array([np.append(fl_o,np.zeros([1,dir-1]))]),np.zeros([1,dir]),np.zeros([1,dir])),axis = 0);\n\nfor i,k in enumerate(gen):\n    \n    df,columnas = simulacion(Ss = k[0],St = k[1], v = k[2],dir = dir,x_f = 5,PhiAn = CondIni);\n    \n    Primeros = df.groupby('Nodo')[columnas[2:]].nth(0);\n    \n    Totales['Total Ss = ' + str(k[0]) + ', St =  ' + str(k[1])  + ', v =  ' + str(k[2])+ ', ev =  ' + str(k[3])+ ', fn =  ' + str(k[-1])] = np.power(10,12)*np.sum(Primeros[columnas[2:]],axis=1)\n    TotalCol.append('Total Ss = ' + str(k[0]) + ', St =  ' + str(k[1])  + ', v =  ' + str(k[2])+ ', ev =  ' + str(k[3]) + ', fn =  ' + str(k[-1])) \n","8e16e22f":"# Gr\u00e1ficas Flujos Totales\nplt.figure(figsize=(18,18))    \nfor i ,k in enumerate(TotalCol):\n    xmax = np.argmax(Totales[k]);\n    ymax = Totales[k].max()\n    plt.plot(Primeros.index,Totales[k],label = k + \" x_Max (cm)= {:1.4f}, Flujo_Total_Max ={:1.4f}\".format(xmax, ymax))   \n    plt.grid(True)\n    plt.xlabel(\"Nodo x (cm)\");\n    plt.ylabel(\"neutrones\/(cm^2*s)\");\nplt.legend()\nplt.show()\n\nDosis = pd.DataFrame();\n\nfor i,k in enumerate(TotalCol):\n    Dosis[k] = gen[i,-1]*Totales[k]\n\n# Gr\u00e1ficas Dosis    \nplt.figure(figsize=(18,18))       ## ^-15\nfor i ,k in enumerate(TotalCol[0:2]):\n    xmax = np.argmax(Dosis[k]);\n    ymax = Dosis[k].max()\n    plt.plot(Primeros.index,Dosis[k],label = \"Dosis \" + k + \" x_Max (cm)= {:1.4f}, Dosis_Max ={:1.4f}\".format(xmax, ymax))   \n    plt.grid(True)\n    plt.xlabel(\"Nodo x (cm)\");\n    plt.ylabel(\"TASA DE DOSIS (cGy\/s)\");\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(18,18))     ## ^-12\nxmax = np.argmax(Dosis[TotalCol[2]]);\nymax = Dosis[TotalCol[2]].max()\nplt.plot(Primeros.index,Dosis[TotalCol[2]],label = \"Dosis \" + TotalCol[2] + \" x_max (cm)= {:1.4f}, Dosis_Max ={:1.4f}\".format(xmax, ymax))   \nplt.grid(True)\nplt.xlabel(\"Nodo x (cm)\");\nplt.ylabel(\"TASA DE DOSIS (cGy\/s)\");\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(18,18))    \nfor i ,k in enumerate(TotalCol[3:]):   ## ^-9\n    xmax = np.argmax(Dosis[k]);\n    ymax = Dosis[k].max()\n    plt.plot(Primeros.index,Dosis[k],label = \"Dosis \"+ k + \" x_max(cm)= {:1.4f}, Dosis_Max ={:1.4f}\".format(xmax, ymax))   \n    plt.grid(True)\n    plt.xlabel(\"Nodo x (cm)\");\n    plt.ylabel(\"TASA DE DOSIS (cGy\/s)\");\nplt.legend()\nplt.show()","dc08c051":"## Tercera Simulaci\u00f3n    \n\nSimulaci\u00f3n con valores Reales De Agua\n\nAc\u00e1 poner la tabla","c2248346":"\n# Incidencia Perpendicular\n\n## Primera simulaci\u00f3n\n$$v = 1^6 $$\n\n$$\\Sigma t = 1 $$ \n\n$$ \\Sigma s = [ 0.1 , 0.5 , 0.7 , 0.9 , 0.9999 ] $$","fd078422":"# C\u00f3digo general\n## Funci\u00f3n auxiliar para generar los valores de ponderaciones","12c58e7b":"## Funci\u00f3n auxiliar para ejecutar la simulaci\u00f3n","dc36b043":"## Tercer Simulaci\u00f3n    \n\nSimulaci\u00f3n con valores Reales De Agua\n\nAc\u00e1 poner la tabla","4bc84984":"## Segunda Simulaci\u00f3n\n$$v = [ 100 , 1000 , 10000, 1000000 ]$$\n$$\\Sigma _t = 1$$\n$$\\Sigma _s = 0.7$$\n","12d14035":"## Segunda simulaci\u00f3n\n$$v = [ 100 , 1000 , 10000, 1000000 ]$$\n$$\\Sigma _t = 1$$\n$$\\Sigma _s = 0.7$$\n","9393d21f":"# C\u00f3digo de simulaci\u00f3n flujo neutronico","b569afae":"# Incidencia Isotr\u00f3pica \n## Primera Simulaci\u00f3n\n\n$$v = 10^6$$\n$$\\Sigma _t = 1$$\n$$\\Sigma _s = [ 0.1, 0.5 , 0.7 , 0.9 , 0.999 ]$$\n\n"}}