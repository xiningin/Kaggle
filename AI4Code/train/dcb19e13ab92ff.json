{"cell_type":{"119a0758":"code","79e8286d":"code","64af360d":"code","e64993bb":"code","b8581d37":"code","6429c5f9":"code","c244881c":"code","af48d436":"code","40d248e8":"code","aca2607a":"code","74973e40":"code","af2f620b":"code","fdc833b4":"code","c50e7fe1":"code","de42a768":"code","9b678df8":"code","c7bb16f1":"code","517d1a47":"code","33b0ce3d":"markdown","f70c90c0":"markdown","582565a8":"markdown","8cff6d05":"markdown","9a80cb47":"markdown","544ce6b2":"markdown","062709c6":"markdown","d9f3ada8":"markdown","a5fec2c8":"markdown","1086b5c4":"markdown","85382bc9":"markdown","5da6277c":"markdown"},"source":{"119a0758":"# Installing youtube tool\n!pip install youtube-search-python=='1.3.1'","79e8286d":"# Import the needs\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\n\nimport json\nfrom youtubesearchpython import SearchVideos # YouTube search tool","64af360d":"# Get a Song str search\ndef getMusicName(elem):\n    return '{} - {}'.format(elem['artist'], elem['song_title'])\n\n\n# Function to search a YouTube Video\ndef youtubeSearchVideo(music, results=1):\n    searchJson = SearchVideos(music, offset=1, mode=\"json\", max_results=results).result()\n    searchParsed = json.loads(searchJson)\n    searchParsed = searchParsed['search_result'][0]\n    return {'title': searchParsed['title'], \\\n            'duration': searchParsed['duration'], \\\n            'views': searchParsed['views'], \\\n            'url': searchParsed['link'] }","e64993bb":"# Load dataset\ndfSongs = pd.read_csv('\/kaggle\/input\/spotifyclassification\/data.csv', index_col=0)\n\n# Number of rows and columns\nrows, cols = dfSongs.shape\nprint('Number of songs: {}'.format(rows))\nprint('Number of attributes per song: {}'.format(cols))","b8581d37":"# Print the columns\ndisplay(dfSongs.columns)","6429c5f9":"# Print the attributes type\ndfSongs.info()","c244881c":"dfSongs[['song_title', 'artist']].head(5)","af48d436":"# Select a song\nanySong = dfSongs.loc[0]\n# Get the song name\nanySongName = getMusicName(anySong)\nprint('name:', anySongName)\n\n# Search in YouTube\nyoutubeSearchVideo(anySongName)","40d248e8":"# K-query\ndef knnQuery(queryPoint, arrCharactPoints, k):\n    tmp = arrCharactPoints.copy(deep=True)\n    tmp['dist'] = tmp.apply(lambda x: np.linalg.norm(x-queryPoint), axis=1)\n    tmp = tmp.sort_values('dist')\n    return tmp.head(k).index\n\n# Range query\ndef rangeQuery(queryPoint, arrCharactPoints, radius):\n    tmp = arrCharactPoints.copy(deep=True)\n    tmp['dist'] = tmp.apply(lambda x: np.linalg.norm(x-queryPoint), axis=1)\n    tmp['radius'] = tmp.apply(lambda x: 1 if x['dist'] <= radius else 0, axis=1)\n    return tmp.query('radius == 1').index","aca2607a":"# Execute k-NN removing the 'query point'\ndef querySimilars(df, columns, idx, func, param):\n    arr = df[columns].copy(deep=True)\n    queryPoint = arr.loc[idx]\n    arr = arr.drop([idx])\n    response = func(queryPoint, arr, param)\n    return response","74973e40":"# Selecting song and attributes\nsongIndex = 1936 # query point, selected song\ncolumns = ['acousticness','danceability','energy','instrumentalness','liveness','speechiness','valence']\n\n# Selecting query parameters\nfunc, param = knnQuery, 3 # k=3\n\n# Querying\nresponse = querySimilars(dfSongs, columns, songIndex, func, param)","af2f620b":"# Select a song\nanySong = dfSongs.loc[songIndex]\n# Get the song name\nanySongName = getMusicName(anySong)\n# Retrive a YouTube link\nyoutube = youtubeSearchVideo(anySongName)\n\n# Print\nprint('# Query Point')\nprint(songIndex, anySongName)\nprint(youtube['url'])","fdc833b4":"print('# Similar songs')\nfor idx in response:\n    anySong = dfSongs.loc[idx]\n    anySongName = getMusicName(anySong)\n    youtube = youtubeSearchVideo(anySongName)\n    \n    print(idx, anySongName)\n    print(youtube['url'])","c50e7fe1":"# Selecting song and attributes\nsongIndex = 5 # query point, selected song\ncolumns = ['acousticness','danceability','energy','instrumentalness','liveness','speechiness','valence']\n\n# Selecting query parameters\nfunc, param = rangeQuery, 0.15 # threshold distance\n\n# Querying\nresponse = querySimilars(dfSongs, columns, songIndex, func, param)","de42a768":"# Select a song\nanySong = dfSongs.loc[songIndex]\n# Get the song name\nanySongName = getMusicName(anySong)\n# Retrive a YouTube link\nyoutube = youtubeSearchVideo(anySongName)\n\n# Print\nprint('# Query Point')\nprint(songIndex, anySongName)\nprint(youtube['url'])","9b678df8":"print('# Similar songs')\nfor idx in response:\n    anySong = dfSongs.loc[idx]\n    anySongName = getMusicName(anySong)\n    youtube = youtubeSearchVideo(anySongName)\n    \n    print(idx, anySongName)\n    print(youtube['url'])","c7bb16f1":"# Defining the query point and the attributes\nk = 3\nqueryPoint = [1, 1, 1] # query point\ncolumns = ['danceability','energy','valence']\n\n# Searching for the songs\narr = dfSongs[columns].copy(deep=True)\nresponse = knnQuery(queryPoint, arr, k)\n\n# Printing\nprint('# Active, cheerful songs')\nfor idx in response:\n    anySong = dfSongs.loc[idx]\n    anySongName = getMusicName(anySong)\n    youtube = youtubeSearchVideo(anySongName)\n    \n    print(idx, anySongName)\n    print(youtube['url'])","517d1a47":"# Defining the query point and the attributes\nk = 3\nqueryPoint = [0, 0, 0] # query point\ncolumns = ['danceability','energy','valence']\n\n# Searching for the songs\narr = dfSongs[columns].copy(deep=True)\nresponse = knnQuery(queryPoint, arr, k)\n\n# Printing\nprint('# Active, cheerful songs')\nfor idx in response:\n    anySong = dfSongs.loc[idx]\n    anySongName = getMusicName(anySong)\n    youtube = youtubeSearchVideo(anySongName)\n    \n    print(idx, anySongName)\n    print(youtube['url'])","33b0ce3d":"Printing the first rows.","f70c90c0":"# Introduction\n\nHave you ever asked yourself how we can recommend songs music based on your taste? **Similarity** is the answer.\nSimilarity measures how much two objects have similar shapes, values, or distances.\nThus, we can use similarity to measure similar songs and create a fine recommendation for the users based on previously listened songs.\n\nDataset: [Spotify Song Attributes](https:\/\/www.kaggle.com\/geomack\/spotifyclassification) - An attempt to build a classifier that can predict whether or not I like a song.\n\n**Disclaimer**: This is a simple study case of similarity. There are many state-of-art algorithms for song recommendation. Anyway, this notebook can be used as a first step for this study, and also a base test algorithm for your experiments.","582565a8":"What are the song attributes?","8cff6d05":"# Making questions\n\nSo far, we have been able to make queries searching for similar songs based on distance to a query point, using knnQuery and rangeQuery. In this way, it is possible to find similar songs based on a user's tastes.\n\n## What are the most active, cheerful songs?\n\nAnyway, we can also create our own personalized query points and modify the columns to explore other options. For example, query the most cheerful songs, selecting a specific set of song attributes `columns = ['danceability','energy','valence']`; and searching for the $k$ most high values of `'danceability'=1,'energy'=1,'valence'=1`. Thus, **question**: _What are the top 5 active, cheerful songs on our list?_","9a80cb47":"### $k$ query\n\nTrying a query using `knnQuery`.\n\nFor example, let's search for $k=3$ similar songs to a query point `songIndex=5` (music: `\"Drake - Sneakin\"`).","544ce6b2":"## What are the less active, or not energized songs?\n\nWe can also change of perspective. In this way, **question**: _What are the top 5 less active or not animated songs on our list?_ We just need to change our query point to values of `'danceability'=0,'energy'=0,'valence'=0`.","062709c6":"# Similarity Queries\n\nWe created queries to retrive the elements more similar based on [Euclidean distance](https:\/\/en.wikipedia.org\/wiki\/Euclidean_distance).\n\"In mathematics, the Euclidean distance between two points is a number, the length of a line segment between the two points.\"\nIn this sense, the distance the closer to 0 the more similar the songs are.","d9f3ada8":"### Range query\n\nTrying a query using `rangeQuery`.\n\nFor example, let's search similar songs using $dist \\leq 0.15$, and query point `songIndex=10` (music: `\"The Avalanches - Subways - In Flagranti Extended Edit\"`).","a5fec2c8":"## k-nearest neighbors algorithm (k-NN)\n\nThe [k-NN algoritm](https:\/\/en.wikipedia.org\/wiki\/K-nearest_neighbors_algorithm) searches for the $k$ similar elements based on a query point at the center; or a threshold distance limit based on a query point, which is in a pre defined radius. Thus, we have two kinds of k-NN:\n\n* $k$ query: return $k$ closest songs.\n* Range query: return all songs with 'distance' $\\leq$ 'threshold'.","1086b5c4":"Searching some video, for example.","85382bc9":"## Loading data\n\nHow many songs do we have?","5da6277c":"## Pre Definitions\n\nImport packages, and create useful functions (code hidden)."}}