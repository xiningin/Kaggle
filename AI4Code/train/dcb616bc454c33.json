{"cell_type":{"bd18af34":"code","4fbdf5c5":"code","9cecc674":"code","2160cee4":"code","4ca00800":"code","30331363":"code","37bccea7":"code","8cd2382e":"code","0105d92d":"code","289cd9c6":"code","d9614936":"code","fcc78082":"code","c02be907":"code","13b3b542":"code","2d0dcb98":"code","731f14d9":"code","e68ec312":"code","a54725b4":"code","eb2d15b3":"code","c17680f2":"code","929a51f5":"code","b12fb01d":"code","a5f24395":"code","2e17a248":"code","6d5609f3":"code","12d16962":"code","18c93e65":"code","60702589":"code","f830b9e9":"code","5a49a62a":"code","6abb4f6d":"code","ffcda06b":"code","2b76b489":"code","ab365b14":"code","332ad026":"code","d9187a68":"code","fe3fa7e1":"code","9407af2a":"code","a9026470":"code","79a3b30d":"code","e6a4082e":"code","3df17d80":"code","e4958a7c":"code","a404032b":"code","a90ebbfe":"code","f4648b8e":"code","c2039334":"markdown","9e7752b7":"markdown","973ec70e":"markdown","2463c8ae":"markdown","87b4db27":"markdown","aff83eaf":"markdown","422cde15":"markdown","61ea56b6":"markdown","222d0f3e":"markdown","94bf29d7":"markdown","4af29f96":"markdown","b131deba":"markdown","490bd682":"markdown","370f421c":"markdown","a40e840d":"markdown","32f491dd":"markdown","03561b2b":"markdown","3b35355c":"markdown","07bbfff5":"markdown","9bd5142e":"markdown","06abd1d4":"markdown","01af0827":"markdown","ac4af3e7":"markdown","bbb9683d":"markdown","c9ddbc44":"markdown","b5ed9e27":"markdown","ba29d3fe":"markdown","e960df49":"markdown"},"source":{"bd18af34":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n%matplotlib inline\n\nimport math\n\nimport warnings\nwarnings.filterwarnings('ignore')","4fbdf5c5":"df = pd.read_csv('..\/input\/covid19-analysis-data-set\/country_daywise.csv')\ndf3 = pd.read_csv('..\/input\/covid19-analysis-data-set\/countrywise.csv')","9cecc674":"df.head()","2160cee4":"df3.head()","4ca00800":"print(df.isna().sum())\nprint(df3.isna().sum())","30331363":"print(df.duplicated().sum())\nprint(df3.duplicated().sum())","37bccea7":"df.dtypes\n# df3 not needed for date checking","8cd2382e":"df.Date\n# There is inconsistency in year formatting","0105d92d":"df[0] = df.Date.str.split('\/',expand=True)[0]\ndf[1] = df.Date.str.split('\/',expand=True)[1]\ndf[2] = df.Date.str.split('\/',expand=True)[2]\n\ndf[0] = df[0].astype(str).str.zfill(2)\ndf[1] = df[1].astype(str).str.zfill(2)\ndf.loc[df[2]=='2020',2] = '20'\n\ndf.drop('Date',axis=1)\ndf[\"Date\"] = df[0].astype(str) + df[1].astype(str) + df[2].astype(str)\ndf.drop([0,1,2],axis=1,inplace=True)\n\ndf['Date'] = pd.to_datetime(df['Date'], format='%m%d%y')","289cd9c6":"df.dtypes","d9614936":"df.columns = df.columns.str.replace(' ','_').str.lower()\ndf3.columns = df3.columns.str.replace('\/','per').str.replace(' ','_').str.replace('%','percentage').str.lower()","fcc78082":"df.sort_values('date',inplace=True)","c02be907":"df[(df['confirmed']<0) | (df['deaths']<0) | (df['recovered']<0) | (df['active']<0) | (df['new_cases']<0)]","13b3b542":"df.loc[38747,'active'] = 111           #According to worldometer\ndf.loc[38747,'recovered'] = 958","2d0dcb98":"df3[(df3['confirmed']<0) | (df3['deaths']<0) | (df3['recovered']<0) | (df3['active']<0) | (df3['deaths_per_100_cases']<0) | (df3['population']<0) | (df3['cases_per_million_people']<0)]\n# India and China have wrong population numbers ","731f14d9":"df3.loc[36,'population'] = 1441256866            # China's population according to worldometer\ndf3.loc[36,'cases_per_million_people'] = 3.28    # 3.28 = 4733 \/ (1441256866 \/ 1000000)\n\ndf3.loc[79,'population'] = 1384764473            # India's population according to worldometer\ndf3.loc[79,'cases_per_million_people'] = 54.21   # 54.21 = 75062 \/ (1384764473 \/ 1000000)","e68ec312":"print(df[df['country']=='MS Zaandam'].index)\nprint(df[df['country']=='Diamond Princess'].index)\ndf = df[df['country']!='MS Zaandam']\ndf = df[df['country']!='Diamond Princess']","a54725b4":"print(df3[df3['country']=='MS Zaandam'].index)\nprint(df3[df3['country']=='Diamond Princess'].index)\ndf3 = df3.drop([104,48])","eb2d15b3":"ld = df[df['date']==max(df['date'])]\nprint(max(df['date']))","c17680f2":"pandemics = pd.DataFrame({\n    'pandemics' : ['COVID-19', 'SARS', 'EBOLA', 'MERS', \"H1N1\"],\n    'start_year' : [2019, 2002, 2013, 2012, 2009],\n    'end_year' : [2020, 2004, 2016, 2020, 2010],\n    'confirmed' : [ld['confirmed'].sum(), 8437, 28646, 2519, 6724149],\n    'deaths' : [ld['deaths'].sum(), 813, 11323, 866, 19654]\n})\n\npandemics['mortality'] = round((pandemics['deaths']\/pandemics['confirmed'])*100,2)","929a51f5":"temp = pandemics.melt(id_vars='pandemics', value_vars=['confirmed', 'deaths', 'mortality'], var_name='Case', value_name='Value')\n\nfig = px.bar(temp, x='pandemics', y='Value', color='pandemics', text='Value', facet_col='Case', color_discrete_sequence=px.colors.qualitative.Bold)\n\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide',title='COVID-19 vs Other Pandemics')\nfig.update_yaxes(showticklabels = False)\nfig.layout.yaxis2.update(matches = None)\nfig.layout.yaxis3.update(matches = None)\nfig.show()","b12fb01d":"temp = ld.sort_values('confirmed', ascending=False)\n\nheaderColor = 'grey'\nrowEvenColor = 'lightgrey'\nrowOddColor = 'white'\n\nfig = go.Figure(data=[go.Table(\n  header=dict(\n    values=['Country','Confirmed Cases'],\n    line_color='darkslategray',\n    fill_color=headerColor,\n    align=['left','center'],\n      \n    font=dict(color='white', size=12)\n  ),\n  cells=dict(\n    values=[\n      temp['country'],\n      temp['confirmed'],\n      ],\n    line_color='darkslategray',\n    # 2-D list of colors for alternating rows\n    fill_color = [[rowOddColor,rowEvenColor,rowOddColor, rowEvenColor]*len(temp)],\n    align = ['left', 'center'],\n    font = dict(color = 'darkslategray', size = 11)\n    ))\n])\nfig.update_layout(\n    title='Confirmed Cases In Each Country',\n)\nfig.show()","a5f24395":"plt.style.use('ggplot')\n\ndeaths = ld['deaths'].sum()\nrecovered = ld['recovered'].sum()\nactive = ld['active'].sum()\nsizes = [deaths,recovered,active]\ncolors = ['#a5a5a5', '#66b3ff', '#ff9999']\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, colors = colors, autopct='%1.1f%%', startangle=90)\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.set_size_inches(5.5,5.5)\nfig.gca().add_artist(centre_circle)\nax1.axis('equal')  \nplt.tight_layout()\nplt.title(f\"Total COVID-19 Cases: {int(ld['confirmed'].sum()):,}\")\nplt.legend(['Total Deaths','Total Recovered', 'Total Active'])","2e17a248":"ld_country = ld.groupby('country').sum()\ntemp = ld_country.reset_index()\ntemp\nfig = px.choropleth(temp, locations=temp['country'],\n                    color=temp['deaths'],locationmode='country names', \n                    hover_name=temp['country'], \n                    color_continuous_scale=px.colors.sequential.Tealgrn,template='plotly_dark', )\nfig.update_layout(\n    title='Total Deaths by Country',\n)\nfig.show()","6d5609f3":"ld_country = ld.groupby('country').sum()\n#Grouping of countries with latest data available","12d16962":"temp = ld_country.reset_index()\nfig = px.scatter(temp,\n                 x='confirmed', y='deaths',color='country', height = 700,\n                 log_x=True, log_y=True, title=\"World: Death vs Confirmed Cases (log10 scale)\")\n\nfig.update_traces(textposition = 'top center')\nfig.update_layout(showlegend = False)\nfig.update_layout(xaxis_rangeslider_visible = True)\nfig.show()","18c93e65":"temp = ld_country.reset_index()\n\ntemp2 = temp[(temp['country']=='Singapore') | (temp['country']=='Burundi') | (temp['country']=='Yemen')]\ntemp3 = temp[(temp['country']!='Singapore') & (temp['country']!='Burundi') & (temp['country']!='Yemen')]\n\nfig = px.scatter(temp2,\n                 x='confirmed', y='deaths',color='country', height = 700,\n                 log_x=True, log_y=True, title=\"Outliers: Death vs Confirmed Cases (log10 scale)\",text='country')\n\nfig.add_trace(go.Scatter(x=temp3['confirmed'], y=temp3['deaths'],marker_line_color=\"midnightblue\", marker_color=\"lightskyblue\",mode='markers',text=temp2['country']))\nfig.update_traces(textposition = 'top center')\n\nfig.update_layout(showlegend = False,xaxis_title=\"confirmed\",\n    yaxis_title=\"deaths\")\nfig.update_layout(xaxis_rangeslider_visible = True)\n\nfig.show()","60702589":"top = 15\nfig = px.scatter(temp.sort_values('confirmed',ascending=False).head(top),\n                 x='confirmed', y='deaths',color='country',size='active', height = 700,\n                 text='country',log_x=True, log_y=True, title=\"Top 15: Death vs Confirmed Cases (log10 scale)\")\n\nfig.update_traces(textposition = 'top center')\nfig.update_layout(showlegend = False)\nfig.update_layout(xaxis_rangeslider_visible = True)\nfig.show()","f830b9e9":"temp = df3[df3['deaths_per_100_cases']!=0].sort_values('deaths_per_100_cases').head(10)\nx = temp['country']\ny = temp['deaths_per_100_cases']\n\ntrace = go.Bar(x = x, y=y,name='countries')\nlayout=go.Layout(title= 'Lowest Deaths per 100 Cases')\nfigure = go.Figure(data=trace,layout=layout)\n\nfigure.show()","5a49a62a":"a = {'x':[0,70],'y':[1250,1250]}\nline1 = pd.DataFrame(a)  \nb = {'x':[2.1,2.1],'y':[0,200000]}\nline2 = pd.DataFrame(b)\n\nfig = px.scatter(df3, x='deaths_per_100_cases', y='cases_per_million_people',color='country', height = 700, log_x=True, log_y=True, title=\"4 Quadrant Analysis\")\n\nfig.add_trace(go.Scatter(x=line1['x'], y=line1['y'],marker_line_color=\"midnightblue\", marker_color=\"black\",text='Confirmed Cases per 1 Million People Axis'))\nfig.add_trace(go.Scatter(x=line2['x'], y=line2['y'],marker_line_color=\"midnightblue\", marker_color=\"black\",text='Deaths per 100 Cases Axis'))\nfig.update_traces(textposition = 'top center')\n\nfig.update_layout(showlegend = False,xaxis_title=\"Deaths per 100 Cases\",\n    yaxis_title=\"Confirmed Cases per 1 Million People\")\nfig.update_layout(xaxis_rangeslider_visible = True)\nfig.show()","6abb4f6d":"a = {'x':[0,70],'y':[1250,1250]}\nline1 = pd.DataFrame(a)  \nb = {'x':[2.1,2.1],'y':[0,200000]}\nline2 = pd.DataFrame(b)\n\ntemp = df3[(df3['country']=='Qatar') | (df3['country']=='Singapore') | (df3['country']=='Burundi') | (df3['country']=='San Marino') | (df3['country']=='China') | (df3['country']=='Yemen')]\ntemp2 = df3[(df3['country']!='Qatar') & (df3['country']!='Singapore') & (df3['country']!='Burundi') & (df3['country']!='San Marino') & (df3['country']!='China') & (df3['country']!='Yemen')]\n\nfig = px.scatter(temp, x='deaths_per_100_cases', y='cases_per_million_people',color='country', height = 700, log_x=True, log_y=True, title=\"4 Quadrant Analysis (Outliers)\", text='country')\n\nfig.add_trace(go.Scatter(x=line1['x'], y=line1['y'],marker_line_color=\"midnightblue\", marker_color=\"black\",text='Confirmed Cases per 1 Million People Axis'))\nfig.add_trace(go.Scatter(x=line2['x'], y=line2['y'],marker_line_color=\"midnightblue\", marker_color=\"black\",text='Deaths per 100 Cases Axis'))\nfig.add_trace(go.Scatter(x=temp2['deaths_per_100_cases'], y=temp2['cases_per_million_people'],marker_line_color=\"midnightblue\", marker_color=\"lightskyblue\",mode='markers',text=temp2['country']))\nfig.update_traces(textposition = 'top center')\n\nfig.update_layout(showlegend = False,xaxis_title=\"Deaths per 100 Cases\",\n    yaxis_title=\"Confirmed Cases per 1 Million People\")\nfig.update_layout(xaxis_rangeslider_visible = True)\n\nfig.show()","ffcda06b":"df_date = df.groupby('date').sum()\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df_date.index, y=df_date['confirmed'],name='Confirmed'))\nfig.add_trace(go.Scatter(x=df_date.index, y=df_date['deaths'],name='Deaths'))\nfig.add_trace(go.Scatter(x=df_date.index, y=df_date['recovered'],name='Recovered'))\nfig.add_trace(go.Scatter(x=df_date.index, y=df_date['active'],name='Active'))\nfig.update_layout(title = 'World', xaxis_tickfont_size = 14, yaxis = dict(title = 'Number of Cases'))\n\nfig.show()","2b76b489":"singapore = df.loc[df['country']=='Singapore',['date','confirmed','deaths','recovered','active']]\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=singapore['date'], y=singapore['confirmed'],name='Confirmed'))\nfig.add_trace(go.Scatter(x=singapore['date'], y=singapore['deaths'],name='Deaths'))\nfig.add_trace(go.Scatter(x=singapore['date'], y=singapore['recovered'],name='Recovered'))\nfig.add_trace(go.Scatter(x=singapore['date'], y=singapore['active'],name='Active'))\nfig.update_layout(title = 'Singapore', xaxis_tickfont_size = 14, yaxis = dict(title = 'Number of Cases'))\n\nfig.show()","ab365b14":"Qatar = df.loc[df['country']=='Qatar',['date','confirmed','deaths','recovered','active']]\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=Qatar['date'], y=Qatar['confirmed'],name='Confirmed'))\nfig.add_trace(go.Scatter(x=Qatar['date'], y=Qatar['deaths'],name='Deaths'))\nfig.add_trace(go.Scatter(x=Qatar['date'], y=Qatar['recovered'],name='Recovered'))\nfig.add_trace(go.Scatter(x=Qatar['date'], y=Qatar['active'],name='Active'))\nfig.update_layout(title = 'Qatar', xaxis_tickfont_size = 14, yaxis = dict(title = 'Number of Cases'))\n\nfig.show()","332ad026":"china = df.loc[df['country']=='China',['date','confirmed','deaths','recovered','active']]\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=china['date'], y=china['confirmed'],name='Confirmed'))\nfig.add_trace(go.Scatter(x=china['date'], y=china['deaths'],name='Deaths'))\nfig.add_trace(go.Scatter(x=china['date'], y=china['recovered'],name='Recovered'))\nfig.add_trace(go.Scatter(x=china['date'], y=china['active'],name='Active'))\nfig.update_layout(title = 'China', xaxis_tickfont_size = 14, yaxis = dict(title = 'Number of Cases'))\n\nfig.show()","d9187a68":"yemen = df.loc[df['country']=='Yemen',['date','confirmed','deaths','recovered','active']]\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=yemen['date'], y=yemen['confirmed'],name='Confirmed'))\nfig.add_trace(go.Scatter(x=yemen['date'], y=yemen['deaths'],name='Deaths'))\nfig.add_trace(go.Scatter(x=yemen['date'], y=yemen['recovered'],name='Recovered'))\nfig.add_trace(go.Scatter(x=yemen['date'], y=yemen['active'],name='Active'))\nfig.update_layout(title = 'Yemen', xaxis_tickfont_size = 14, yaxis = dict(title = 'Number of Cases'))\n\nfig.show()","fe3fa7e1":"Burundi = df.loc[df['country']=='Burundi',['date','confirmed','deaths','recovered','active']]\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=Burundi['date'], y=Burundi['confirmed'],name='Confirmed'))\nfig.add_trace(go.Scatter(x=Burundi['date'], y=Burundi['deaths'],name='Deaths'))\nfig.add_trace(go.Scatter(x=Burundi['date'], y=Burundi['recovered'],name='Recovered'))\nfig.add_trace(go.Scatter(x=Burundi['date'], y=Burundi['active'],name='Active'))\nfig.update_layout(title = 'Burundi', xaxis_tickfont_size = 14, yaxis = dict(title = 'Number of Cases'))\n\nfig.show()","9407af2a":"San_Marino = df.loc[df['country']=='San Marino',['date','confirmed','deaths','recovered','active']]\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=San_Marino['date'], y=San_Marino['confirmed'],name='Confirmed'))\nfig.add_trace(go.Scatter(x=San_Marino['date'], y=San_Marino['deaths'],name='Deaths'))\nfig.add_trace(go.Scatter(x=San_Marino['date'], y=San_Marino['recovered'],name='Recovered'))\nfig.add_trace(go.Scatter(x=San_Marino['date'], y=San_Marino['active'],name='Active'))\nfig.update_layout(title = 'San Marino', xaxis_tickfont_size = 14, yaxis = dict(title = 'Number of Cases'))\n\nfig.show()","a9026470":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(ld_country.sort_values('confirmed')[\"confirmed\"].index[-10:],ld_country.sort_values('confirmed')[\"confirmed\"].values[-10:],color=\"darkcyan\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Confirmed Cases)\",fontsize=20)\nplt.grid(alpha=0.3)","79a3b30d":"sg_confirmed = ld_country.loc['Singapore','confirmed']\nprint(f\"In comparison, Singapore's total number of confirmed cases is {sg_confirmed}\")","e6a4082e":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(ld_country.sort_values('deaths')[\"deaths\"].index[-10:],ld_country.sort_values('deaths')[\"deaths\"].values[-10:],color=\"#a5a5a5\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Death Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Death Cases)\",fontsize=20)\nplt.grid(alpha=0.3)","3df17d80":"sg_death = ld_country.loc['Singapore','deaths']\nprint(f\"In comparison, Singapore's total number of death cases is {sg_death}\")","e4958a7c":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(ld_country.sort_values('recovered')[\"recovered\"].index[-10:],ld_country.sort_values('recovered')[\"recovered\"].values[-10:],color=\"#66b3ff\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Recovered Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Recovered Cases)\",fontsize=20)\nplt.grid(alpha=0.3)","a404032b":"sg_recovered = ld_country.loc['Singapore','recovered']\nprint(f\"In comparison, Singapore's total number of recovered cases is {sg_recovered}\")","a90ebbfe":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(ld_country.sort_values('active')[\"active\"].index[-10:],ld_country.sort_values('active')[\"active\"].values[-10:],color=\"#ff9999\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Active Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Active Cases)\",fontsize=20)\nplt.grid(alpha=0.3)","f4648b8e":"sg_active = ld_country.loc['Singapore','active']\nprint(f\"In comparison, Singapore's total number of active cases is {sg_active}\")","c2039334":"###  Checking for Negative Numbers","9e7752b7":"### World Map Analysis","973ec70e":"Next we will move on to the time series analysis of the world and the outliers in the 4 different quadrants\n\nThe outliers are:\n- Singapore and Qatar (high cases, low deaths)\n- China and Yemen (low cases, high deaths)\n- Burundi (low cases, low deaths)\n- San Marino (high cases, high deaths)","2463c8ae":"Many of the visualisations uses Plotly's Python graphing library which makes the graph and data interactive","87b4db27":"### Changing Column Names\nFor ease of parsing data","aff83eaf":"### Sort Values by Date","422cde15":"###  Checking for Missing or Duplicate Data ","61ea56b6":"###  Dropping of Cruise Ships Included in the Data Sets","222d0f3e":"There can be 4 different types of correlation between COVID-19 cases & deaths. Hence, a 4 quadrant analysis is carried out in order to get a comprehensive understanding of this relationship. \n\nThe 4 quadrants are as follows:\n- High cases, Low deaths\n- High cases, High deaths\n- Low cases, High deaths\n- Low cases, Low deaths","94bf29d7":"## Overview","4af29f96":"## Time Series Analysis","b131deba":"## Correlation between Total Cases and Total Deaths","490bd682":"# Importing of Data Sets","370f421c":"### High Cases, High Deaths","a40e840d":"# COVID-19 Data Analysis","32f491dd":"### Low Cases, Low Deaths","03561b2b":"### COVID-19 vs Other Epidemics\n\n\nRetrieved from the following websites (1st Nov 2020): \n\n[SARS](https:\/\/www.who.int\/csr\/sars\/country\/2003_07_11\/en\/) | [EBOLA](https:\/\/en.wikipedia.org\/wiki\/List_of_epidemics) | [MERS](https:\/\/www.who.int\/csr\/don\/24-february-2020-mers-saudi-arabia\/en\/#:~:text=From%202012%20until%2031%20January,(IHR%202005)%20to%20date.) | [H1N1](https:\/\/en.wikipedia.org\/wiki\/List_of_epidemics)\n","3b35355c":"### Low Cases, High Deaths","07bbfff5":"## 4 Quadrants Analysis","9bd5142e":"### Changing Date Consistency and Formatting ","06abd1d4":"## Top 10 Cases Analysis","01af0827":"China and India contains error in population numbers and cases per million, the right population figures are manually added based on cross references to figures from [worldometers](https:\/\/www.worldometers.info\/) as of 1st Nov 2020.\n\nThe cases per million people are manually calculated based on the population figures.","ac4af3e7":"Active and recovered cases in row 38747 is wrong and manual changes are made based on cross references to [worldometers](https:\/\/www.worldometers.info\/)\n- As of 1st Nov 2020","bbb9683d":"### High Cases, Low Deaths","c9ddbc44":"![Covid-19-Webpage-banner-1170x240-opt2.jpg](attachment:Covid-19-Webpage-banner-1170x240-opt2.jpg)","b5ed9e27":"# Data Checking and Cleaning","ba29d3fe":"## Quadrant centred around the average of the cluster\n\nThe graph above illustrates the confirmed cases per 1 million people over deaths per 100 cases. It shows the relationship between confirmed cases per 1 million people and deaths per 100 cases for every country in the dataset. \n\n- The top left quadrant are the countries with a higher than average number of confirmed cases per million people but have lower than average deaths per 100 cases.\n\n\n- The bottom left quadrant are the countries with lower than average confirmed cases per million as well as lower than average deaths per 100 cases.\n\n\n- The top right quadrant are the countries with both higher than average number of confirmed cases per million as well as higher than average deaths per 100 cases.\n\n\n- The bottom right quadrant are the countries with lower than average number of confirmed cases per million but higher than average deaths per 100 cases. \n\nEssentially, going clockwise from the top left quadrant, the four quadrants represent:\n- High cases, Low deaths\n- High cases, High deaths\n- Low cases, High deaths\n- Low cases, Low deaths\n \n\nAs we can see, Singapore is situated in the quadrant with a high number of cases per million people however, it has very few deaths per 100 cases. In fact, it is the left most country on the entire graph, indicating that out of all the countries in our dataset, Singapore is the number 1 country for lowest deaths per 100 cases. ","e960df49":"# Data Analysis on COVID-19 Infection and Death Rates\nAs of 10th Oct 2020."}}