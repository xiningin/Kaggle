{"cell_type":{"86a80a11":"code","577d8e29":"code","be7afda5":"code","a148499b":"code","4b6ae3f7":"code","760e2c6e":"code","b5311e92":"code","1b6fbb81":"code","452bce7b":"markdown","40d897d8":"markdown","90c5f78f":"markdown","1fd7f52f":"markdown","0f54a68b":"markdown","9c678b0a":"markdown","78c422ff":"markdown","f8221fd1":"markdown","1038fcf9":"markdown","488f7a4c":"markdown","d4ff3913":"markdown","9b2232ad":"markdown","d3517862":"markdown"},"source":{"86a80a11":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt","577d8e29":"df_train_raw = pd.read_csv(\"\/kaggle\/input\/tensorflow-great-barrier-reef\/train.csv\")\ndf_train_raw","be7afda5":"df_train_raw.duplicated().sum()","a148499b":"df_train_raw[df_train_raw.annotations.str.len() > 2]","4b6ae3f7":"import ast\nast.literal_eval(df_train_raw.iloc[16].annotations)","760e2c6e":"from os import listdir\nfrom PIL import Image\n\ndef validate_images(video_id):\n    path = '\/kaggle\/input\/tensorflow-great-barrier-reef\/train_images\/video_{}\/'.format(video_id)\n    \n    print(\"Verifying that video {} frames are valid...\".format(video_id))\n    for filename in listdir(path):\n        if filename.endswith('.jpg'):\n            try:\n                img = Image.open(path+filename)\n                img.verify() # Verify it is in fact an image\n            except (IOError, SyntaxError) as e:\n                print('Bad file:', filename) # Print out the names of corrupt files\n    print(\"Verified! Video {} has all valid images\".format(video_id))\n\nfor video_id in range(3):\n    validate_images(video_id)","b5311e92":"from PIL import Image, ImageDraw\n\ndef fetch_image_list(df_tmp, video_id, num_images, start_frame_idx):\n    def fetch_image(frame_id):\n        path_base = '\/kaggle\/input\/tensorflow-great-barrier-reef\/train_images\/video_{}\/{}.jpg'\n        raw_img = Image.open(path_base.format(video_id, frame_id))\n\n        row_frame = df_tmp[(df_tmp.video_id == video_id) & (df_tmp.video_frame == frame_id)].iloc[0]\n        bounding_boxes = ast.literal_eval(row_frame.annotations)\n\n        for box in bounding_boxes:\n            draw = ImageDraw.Draw(raw_img)\n            x0, y0, x1, y1 = (box['x'], box['y'], box['x']+box['width'], box['y']+box['height'])\n            draw.rectangle( (x0, y0, x1, y1), outline=180, width=3)\n        return raw_img\n\n    return [np.array(fetch_image(start_frame_idx + index)) for index in range(num_images)]\n\nimages = fetch_image_list(df_train_raw, video_id = 0, num_images = 80, start_frame_idx = 25)\n\nprint(\"Num images: \", len(images))\nplt.imshow(images[0], interpolation='nearest')\nplt.axis('off')\nplt.show()","1b6fbb81":"from matplotlib import animation, rc\nrc('animation', html='jshtml')\n\n\ndef create_animation(ims):\n    fig = plt.figure(figsize=(9, 9))\n    plt.axis('off')\n    im = plt.imshow(ims[0])\n\n    def animate_func(i):\n        im.set_array(ims[i])\n        return [im]\n\n    return animation.FuncAnimation(fig, animate_func, frames = len(ims), interval = 1000\/\/12)\n\ncreate_animation(images)","452bce7b":"Validate if there is corrupted data","40d897d8":"Visualize one of the bounding boxes (annotations)","90c5f78f":"#### Imports","1fd7f52f":"## Exploration notebook\n\nSo far:\n- Visualize dataframe\n- Animate video frames and include bounding boxes of the starfish.\n\nNext steps:\n\n- Start with image segmentation approaches","0f54a68b":"Load sequence of images with annotations","9c678b0a":"Check whether there is duplicate data. In this case all data is unique!","78c422ff":"Check # of frames with bounding boxes","f8221fd1":"Visualize list of images as animation","1038fcf9":"First load the main imports","488f7a4c":"## Images","d4ff3913":"And that's it for now! Please leave a like and share your comments! \ud83d\ude42","9b2232ad":"Load the raw (training) dataframe","d3517862":"## Dataframes"}}