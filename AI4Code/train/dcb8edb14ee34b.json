{"cell_type":{"095d476f":"code","afa2099b":"code","4ec723ce":"code","43fb4fb5":"code","e59a2bc5":"code","a18dc422":"code","e28a7841":"code","5247475f":"code","6d9f7496":"code","2b87ae21":"code","f0c155ea":"code","32802757":"code","164c30cf":"code","e36bbf5e":"code","fdb020be":"code","674a6e5b":"code","04235716":"code","5900f928":"code","a569c717":"code","dee2b702":"code","c3716506":"code","b31ae4b1":"code","19b7a04d":"code","9a677472":"code","0cfef635":"code","8d4f01a4":"code","380afd0b":"code","da455cfa":"code","4242c69c":"code","2e27b454":"code","42d7177b":"code","8745f24c":"code","af6b162d":"code","26b721b1":"code","87523b7b":"code","a0252c3a":"code","1bcebf18":"code","0767953b":"code","bbc498c4":"code","283ba4d0":"markdown","7ec6231b":"markdown","09a5972e":"markdown","f039f052":"markdown","34cb5bd8":"markdown","8a90899d":"markdown"},"source":{"095d476f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","afa2099b":"ratings = pd.read_table('\/kaggle\/input\/movielens-case-study\/ratings.dat', header = None, sep = '::', \n                        names=['UserId', 'MovieID', 'Rating', 'Timestamp'])\n\nmovies = pd.read_table('\/kaggle\/input\/movielens-case-study\/movies.dat', header = None, sep = '::', names=['MovieID', 'Title', 'Genres'])\n\nusers = pd.read_table('\/kaggle\/input\/movielens-case-study\/users.dat', header = None, sep = '::', \n                      names=['UserId', 'Gender', 'Age', 'Occupation', 'Zipcode'])","4ec723ce":"print(ratings.shape)\nprint(movies.shape)\nprint(users.shape)","43fb4fb5":"merge_ratings_movies = pd.merge(ratings, movies, on='MovieID', how='left')\nmerge_three = pd.merge(merge_ratings_movies, users, on='UserId', how='left')","e59a2bc5":"merge_three.shape","a18dc422":"master_data = merge_three.drop(['Timestamp', 'Zipcode'], axis = 1)","e28a7841":"master_data.head(6)","5247475f":"master_data.describe()","6d9f7496":"age_group = master_data.groupby('Age').size()\nage_group","2b87ae21":"plt.figure(figsize=(8,6))\nplt.hist(bins = 50, x = master_data.Age, data = age_group, color='orange')\nplt.title('Distribution of users age')\nplt.ylabel('count of users')\nplt.xlabel('Age');","f0c155ea":"gender_group = master_data.groupby('Gender').size()\ngender_group","32802757":"plt.figure(figsize=(8,8))\ngender_group.plot(kind='bar')","164c30cf":"master_data.pivot_table('Rating', index = 'Genres', columns = 'Gender')","e36bbf5e":"user_group = master_data.groupby(['UserId']).size()\nuser_group.head(10)","fdb020be":"plt.figure(figsize=(25,10))\nplt.hist(x=[master_data\t.UserId], bins=1000, color='#F1948A')\nplt.show()","674a6e5b":"### User rating of the movie \u201cToy Story\u201d\n\ntoy_story_data = master_data.loc[master_data['Title'] == 'Toy Story (1995)']\ntoy_story_data.head(10)","04235716":"toy_story_data.groupby('Rating').size()","5900f928":"plt.figure(figsize=(8,8))\nplt.hist(x=toy_story_data['Rating'], color='#2FA39C')\nplt.title('Ratings of Toy Story movie')\nplt.ylabel('count of users')\nplt.xlabel('Ratings');","a569c717":"print(toy_story_data.groupby('Age').size())\n\nplt.figure(figsize=(12,8))\nplt.hist(x = master_data['Age'], data=toy_story_data, bins=15, color = '#2FA353')\nplt.xlabel(\"Age of viewers\")\nplt.ylabel(\"No of views\")\nplt.title(\"Viewership data of Toystory movie\")\nplt.show()\n","dee2b702":"movie_rating = master_data.groupby(['MovieID'], as_index=False)\naverage_movie_ratings = movie_rating.agg({'Rating':'mean'})\ntop_25_movies = average_movie_ratings.sort_values('Rating', ascending=False).head(25)\ntop_25_movies","c3716506":"top_25_plot = pd.merge(top_25_movies, master_data, how='left', left_on=['MovieID'], right_on=['MovieID'])\ntop_25_plot.head(25)","b31ae4b1":"### Ratings for all the movies reviewed by for a particular user of user id = 2696\n\nuser_id_data = master_data.loc[master_data['UserId'] == 2696]\nuser_id_data.head(20)","19b7a04d":"# plotting the above data\nplt.figure(figsize=(12,7))\nplt.scatter(x=user_id_data['MovieID'], y=user_id_data['Rating'])\nplt.show()","9a677472":"master_data['Genres'].unique()","0cfef635":"master_data['Genres'] = master_data['Genres'].str.split('|', expand = True)\nmaster_data['Genres'].unique()","8d4f01a4":"master_data.isnull().sum()","380afd0b":"# As we have the col MovieId which represents unique movies, we can remove ``Title`` col\nmaster_data = merge_three.drop(['Title', 'Timestamp'], axis = 1)","da455cfa":"master_data.head(4)","4242c69c":"# Print the unique values of the categorical columns\nprint(master_data['Genres'].unique())\n\nprint()\n\nprint(master_data['Gender'].unique())","2e27b454":"# From Sklearn library we will ues Label Encoder to encode cat features to numeric\n#label_encode = LabelEncoder()\n\n#master_data.iloc[:,3] = label_encode.fit_transform(master_data.iloc[:,3].values)\n#master_data.iloc[:,4] = label_encode.fit_transform(master_data.iloc[:,4].values)","42d7177b":"# Print values of cat feature after conversion\n\n#print(master_data['Genres'].unique())\n\n#print()\n\n#print(master_data['Gender'].unique())","8745f24c":"x = master_data[['Genres', 'Gender', 'Age', 'Occupation']].values\ny = master_data.Rating.values","af6b162d":"cols = ['Genres', 'Gender', 'Age', 'Occupation']\nct = ColumnTransformer([('encoder', 'one_hot_encoder', OneHotEncoder(categories='auto'))],\n                       remainder='passthrough')\nX = ct.fit_transform(x[cols])\nX","26b721b1":"print(X.shape)\nprint(y.shape)","87523b7b":"# Splitting the data set into 80% Training & 20% Testing\ntrain_X, test_X, train_y, test_y = train_test_split(X,y, test_size = 0.2, random_state = 42)\ntrain_X.shape, test_X.shape, train_y.shape, test_y.shape","a0252c3a":"#cardinality_cols = ['Gender', 'Genres']\n#OH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\n#OH_cols_train = pd.DataFrame(OH_encoder.fit_transform(train_X[cardinality_cols]))\n#OH_cols_test = pd.DataFrame(OH_encoder.transform(test_X[cardinality_cols]))","1bcebf18":"feature_scale = StandardScaler(with_mean=False)\ntrain_X = feature_scale.fit_transform(train_X)\ntest_X = feature_scale.transform(test_X)","0767953b":"rf = RandomForestClassifier(n_estimators=200, criterion=\"entropy\", max_depth=10, random_state=42)\n\nrf.fit(train_X, train_y)\n\npred_rand_for = rf.predict(test_X)\n\nrand_for_acc_test = accuracy_score(test_y, pred_rand_for)\nprint('Random Forest Accuracy:', rand_for_acc_test)","bbc498c4":"plt.figure(figsize=(8,5))\nsns.set(font_scale=1.3)\nsns.heatmap(confusion_matrix(pred_rand_for, test_y), annot = True, fmt = \".0f\", cmap = \"Set2\")\nplt.xlabel(\"Predicted Values\")\nplt.ylabel(\"Actual Values\")\nplt.title(\"Random Forest Confusion Matrix\\n\\n\")\nplt.grid()\nplt.show()","283ba4d0":"svm_model_rbf = SVC(kernel = 'rbf', random_state=42)\nsvm_model_rbf.fit(train_X, train_y)\nsvm_pred_1 = svm_model_rbf.predict(test_X)\n\nsvm_accuracy_rbf = accuracy_score(svm_pred_1, test_y)\nprint(\"SVC Linear Accuracy: \", svm_accuracy_rbf)","7ec6231b":"plt.figure(figsize=(8,5))\nsns.set(font_scale=1.3)\nsns.heatmap(confusion_matrix(svm_pred, test_y), annot = True, fmt = \".0f\", cmap = \"magma\")\nplt.xlabel(\"Predicted Values\")\nplt.ylabel(\"Actual Values\")\nplt.title(\"SVM Confusion Matrix Linear\\n\\n\")\nplt.show()","09a5972e":"### From the above plot we can see most the users are nearly 25 years old.","f039f052":"svm_model_lin = SVC(kernel = 'linear', random_state=42)\nsvm_model_lin.fit(train_X, train_y)\nsvm_pred = svm_model_lin.predict(test_X)\n\nsvm_accuracy_lin = accuracy_score(svm_pred, test_y)\nprint(\"SVC Linear Accuracy: \", svm_accuracy_lin)","34cb5bd8":"### The above graph shows ``Toy Story`` has the maximum rating of 4","8a90899d":"plt.figure(figsize=(8,5))\nsns.set(font_scale=1.3)\nsns.heatmap(confusion_matrix(svm_pred_1, test_y), annot = True, fmt = \".0f\", cmap = 'Pastel1')\nplt.xlabel(\"Predicted Values\")\nplt.ylabel(\"Actual Values\")\nplt.title(\"SVM Confusion Matrix\\n\\n\")\nplt.show()"}}