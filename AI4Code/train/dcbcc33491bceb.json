{"cell_type":{"74da32ae":"code","0bf5d57c":"code","afcfc547":"code","d935c5ee":"code","b7e62985":"code","c86435d3":"code","7d20a94f":"code","0441b6ef":"code","ff5e78a7":"code","d9e3a24b":"code","296ef82a":"code","589e3fc1":"code","a1cc926a":"code","e04619d6":"code","00298baa":"code","872e1647":"code","08e537aa":"code","71ce79db":"code","d5e9cc32":"code","c9202470":"code","f1c5cb72":"code","dd65dc89":"code","911bdbfb":"code","853d96bd":"code","1cee922f":"code","830c5f98":"code","6b21921d":"code","00cb6cad":"code","cbc46e9d":"markdown","c9d0c38b":"markdown","9e9bb56e":"markdown","df5ed3f7":"markdown","6ffc416e":"markdown","c63281c0":"markdown","da7722f0":"markdown"},"source":{"74da32ae":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets, transforms, models # add models to the list\nfrom torchvision.utils import make_grid\nimport os\nimport random\nfrom sklearn.model_selection import train_test_split\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0bf5d57c":"train_transform=transforms.Compose([\n        transforms.RandomRotation(10),      # rotate +\/- 10 degrees\n        transforms.RandomHorizontalFlip(),  # reverse 50% of images\n        transforms.Resize(224),             # resize shortest side to 224 pixels\n        transforms.CenterCrop(224),         # crop longest side to 224 pixels at center\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406],\n                             [0.229, 0.224, 0.225])\n])","afcfc547":"test_transform=transforms.Compose([\n    transforms.Resize(224),\n    transforms.CenterCrop(224),\n    transforms.ToTensor(),\n    transforms.Normalize([0.485,0.456,0.406],\n                         [0.229,0.224,0.225])\n])","d935c5ee":"train_data=datasets.ImageFolder(root=(\"..\/input\/rock-paper-scissors-dataset\/rps\/rps\"),transform=train_transform)\ntest_data=datasets.ImageFolder(root=(\"..\/input\/rock-paper-scissors-dataset\/rps-test-set\/rps-test-set\"),transform=train_transform)","b7e62985":"class_names=train_data.classes\nprint(class_names)\nprint(len(class_names))","c86435d3":"train_loader=DataLoader(train_data,batch_size=10,shuffle=True)\ntest_loader=DataLoader(test_data,batch_size=10)","7d20a94f":"print(len(train_data))\nprint(len(test_data))","0441b6ef":"for images, labels in train_loader:\n    break\n#print the labels\nprint('Label:', labels.numpy())\nprint('Class:', *np.array([class_names[i] for i in labels]))\n\nim=make_grid(images,nrow=5)","ff5e78a7":"plt.figure(figsize=(10,10))\nplt.imshow(np.transpose(im.numpy(),(1,2,0)))","d9e3a24b":"inv_normalize=transforms.Normalize(mean=[-0.485\/0.229,-0.456\/0.224,-0.406\/0.225],\n                                     std=[1\/0.229,1\/0.224,1\/0.225])\nim=inv_normalize(im)","296ef82a":"plt.figure(figsize=(10,10))\nplt.imshow(np.transpose(im.numpy(),(1,2,0)))","589e3fc1":"class ConvolutionalNetwork(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1=nn.Conv2d(3,6,3,1)\n        self.conv2=nn.Conv2d(6,16,3,1)\n        self.fc1=nn.Linear(16*54*54,120)\n        self.fc2=nn.Linear(120,84)\n        self.fc3=nn.Linear(84,20)\n        self.fc4=nn.Linear(20,3)\n    def forward(self,X):\n        X=F.relu(self.conv1(X))\n        X=F.max_pool2d(X,2,2)\n        X=F.relu(self.conv2(X))\n        X=F.max_pool2d(X,2,2)\n        X=X.view(-1,16*54*54)\n        X=F.relu(self.fc1(X))\n        X=F.relu(self.fc2(X))\n        X=F.relu(self.fc3(X))\n        X=self.fc4(X)\n        \n        return F.log_softmax(X, dim=1)","a1cc926a":"CNNmodel=ConvolutionalNetwork()\ncriterion=nn.CrossEntropyLoss()\noptimizer=torch.optim.Adam(CNNmodel.parameters(),lr=0.001)","e04619d6":"CNNmodel","00298baa":"def count_parameters(model):\n    params = [p.numel() for p in model.parameters() if p.requires_grad]\n    for item in params:\n        print(f'{item:>8}')\n    print(f'________\\n{sum(params):>8}')\ncount_parameters(CNNmodel)","872e1647":"import time\nstart_time=time.time()\ntrain_losses=[]\ntest_losses=[]\ntrain_correct=[]\ntest_correct=[]\nepochs=10\nfor i in range(epochs):\n    trn_corr=0\n    tst_corr=0\n    for b, (X_train,y_train) in enumerate(train_loader):\n        b+=1                                            \n        y_pred=CNNmodel(X_train)\n        loss=criterion(y_pred,y_train)\n        #true predictions\n        predicted=torch.max(y_pred.data,1)[1]\n        batch_corr=(predicted==y_train).sum()\n        trn_corr+=batch_corr\n        \n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        \n        if b%200==0:\n            print(f\"epoch: {i} loss: {loss.item} batch: {b} accuracy: {trn_corr.item()*100\/(10*b):7.3f}%\")\n    loss=loss.detach().numpy()\n    train_losses.append(loss)\n    train_correct.append(trn_corr)\n    \n    \n    with torch.no_grad():\n        for b, (X_test,y_test) in enumerate(test_loader):\n            y_val=CNNmodel(X_test)\n            loss=criterion(y_val,y_test)\n            \n            predicted=torch.max(y_val.data,1)[1]\n            btach_corr=(predicted==y_test).sum()\n            tst_corr+=btach_corr\n            \n        loss=loss.detach().numpy()\n        test_losses.append(loss)\n        test_correct.append(tst_corr)\n        \nprint(f'\\nDuration: {time.time() - start_time:.0f} seconds')    ","08e537aa":"plt.plot(train_losses,label=\"train_losses\")\nplt.plot(test_losses,label=\"test_losses\")\nplt.legend()","71ce79db":"alexnetmodel= models.alexnet(pretrained=True)","d5e9cc32":"alexnetmodel","c9202470":"for param in alexnetmodel.parameters():\n    param.requires_grad=False","f1c5cb72":"torch.manual_seed(42)\n\nalexnetmodel.classifier=nn.Sequential(nn.Linear(9216,1024),\n                                     nn.ReLU(),\n                                     nn.Dropout(p=0.5),\n                                     nn.Linear(1024,3),\n                                     nn.LogSoftmax(dim=1))\nalexnetmodel","dd65dc89":"count_parameters(alexnetmodel)","911bdbfb":"criterion=nn.CrossEntropyLoss()\noptimizer=torch.optim.Adam(alexnetmodel.classifier.parameters(),lr=0.001)","853d96bd":"import time\nstart_time=time.time()\ntrain_losses=[]\ntest_losses=[]\ntrn_correct=[]\ntst_correct=[]\n\nepochs=10\nfor i in range(epochs):\n    trn_corr=0\n    tst_corr=0\n    for b, (X_train,y_train) in enumerate(train_loader):\n        b+=1\n        \n        y_pred=alexnetmodel(X_train)\n        loss=criterion(y_pred,y_train)       \n        #Update parameters\n        predicted=torch.max(y_pred.data,1)[1]\n        batch_corr=(predicted==y_train).sum()\n        trn_corr+= batch_corr\n        \n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        \n        if b%200==0:\n            print(f'epoch: {i:2}  batch: {b:4} [{10*b:6}\/8000]  loss: {loss.item():10.8f}  \\\naccuracy: {trn_corr.item()*100\/(10*b):7.3f}%')\n    \n    loss=loss.detach().numpy()\n    train_losses.append(loss)\n    train_correct.append(trn_corr)\n                  \n    with torch.no_grad():\n        for b, (X_test,y_test) in enumerate(test_loader):\n            b+=1\n                  \n            y_val=alexnetmodel(X_test)\n            predicted=torch.max(y_val.data,1)[1]\n            btach_corr=(predicted==y_test).sum()\n            tst_corr+=btach_corr\n\n    loss=criterion(y_val,y_test)\n    loss=loss.detach().numpy()\n    test_losses.append(loss)\n    test_correct.append(tst_corr)\n                  \nprint(f'\\nDuration: {time.time() - start_time:.0f} seconds')        ","1cee922f":"x=202\nim = inv_normalize(test_data[x][0])\nplt.imshow(np.transpose(im.numpy(),(1,2,0)))","830c5f98":"test_data[x][0].shape","6b21921d":"CNNmodel.eval()\nwith torch.no_grad():\n    new_pred=CNNmodel(test_data[x][0].view(1,3,224,224)).argmax()\nprint(f'Predicted value: {new_pred.item()} {class_names[new_pred.item()]}')","00cb6cad":"alexnetmodel.eval()\nwith torch.no_grad():\n    new_pred_1=alexnetmodel(test_data[x][0].view(1,3,224,224)).argmax()\nprint(f'Predicted value: {new_pred.item()} {class_names[new_pred.item()]}')","cbc46e9d":"# AlexNetModel","c9d0c38b":"---\n# Torch with CNN Model and AlexNetModel\n* cf. https:\/\/www.kaggle.com\/stpeteishii\/four-shapes-classify-torch-cnn-alexnet\n---","9e9bb56e":"# Prediction","df5ed3f7":"# CNN Model","6ffc416e":"# Check Images and Labels","c63281c0":"train_indices, test_indices = train_test_split(list(range(len(dataset.targets))), test_size=0.2, stratify=dataset.targets)\ntrain_data = torch.utils.data.Subset(dataset, train_indices)\ntest_data = torch.utils.data.Subset(dataset, test_indices)","da7722f0":"# Train and Test Setting"}}