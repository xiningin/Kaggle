{"cell_type":{"49e0d84f":"code","373fc81c":"code","b4fe35be":"code","0e576377":"code","00bd3be2":"code","d04743c5":"code","edc8f0a9":"code","af911fb5":"code","dd9fb582":"code","2a2a6e00":"code","3967876f":"code","bd0e371b":"code","868dcf02":"code","6ac2b60d":"code","8370bf59":"code","8362b1fd":"code","2f8e79b2":"code","c0c49f81":"code","dbdde5b5":"code","e8551f50":"code","71a6972f":"code","be5a1f7a":"code","5b17288b":"code","d3d7abb1":"code","913f4eac":"code","89d3e178":"code","efef0a7e":"code","4fb5097c":"code","ffbdaf31":"code","e94d5576":"code","f29caacc":"code","5ddedf38":"code","a1d3b5a2":"code","332f98b0":"code","25f1f42f":"code","46bd8dd6":"code","57122b24":"code","399d4bc8":"code","8b95de0d":"markdown","26f1c88b":"markdown","dc00b40f":"markdown","0040f628":"markdown","6da89115":"markdown","4017609c":"markdown","f52ae8d2":"markdown","c6584808":"markdown","9e362b88":"markdown","ace4a3d3":"markdown","89f633f8":"markdown","58bd59cf":"markdown","1eafdb68":"markdown","08278138":"markdown","94569863":"markdown","1c31d826":"markdown","16ffd303":"markdown","907f4a59":"markdown","f3bda7dd":"markdown","6be751c8":"markdown","d33df8a3":"markdown","ae0f991d":"markdown"},"source":{"49e0d84f":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\n\nimport string\nimport warnings\nwarnings.filterwarnings('ignore')\n\nSEED = 42","373fc81c":"df_all = pd.read_csv('..\/input\/water-potability\/water_potability.csv')\ndf_all.name = 'All Set' \n\nprint('Number of Data Examples = {}'.format(df_all.shape[0]))\nprint('Data X Shape = {}'.format(df_all.shape))\nprint('Data y Shape = {}\\n'.format(df_all['Potability'].shape[0]))\nprint(df_all.columns)\n","b4fe35be":"df_all.head(5)","0e576377":"print(df_all.info())","00bd3be2":"df_all.describe()","d04743c5":"def display_missing(df):    \n    for col in df.columns.tolist():          \n        print('{} column missing values: {}'.format(col, df[col].isnull().sum()))\n    print('\\n')\n    \nprint('{}'.format(df_all.name))\ndisplay_missing(df_all)","edc8f0a9":"Potable = df_all['Potability'].value_counts()[1]\nnot_Potable = df_all['Potability'].value_counts()[0]\nPotable_per = Potable \/ df_all.shape[0] * 100\nnot_Potable_per = not_Potable \/ df_all.shape[0] * 100\n\nprint('{} of {} Potable and it is the {:.2f}% .'.format(Potable, df_all.shape[0], Potable_per))\nprint('{} of {} not Potable and it is the {:.2f}% .'.format(not_Potable, df_all.shape[0], not_Potable_per))\n\nplt.figure(figsize=(10, 8))\nsns.countplot(df_all['Potability'])\n\nplt.xlabel('Potability', size=15, labelpad=15)\nplt.ylabel('Count', size=15, labelpad=15)\nplt.xticks((0, 1), ['Not Potable ({0:.2f}%)'.format(not_Potable_per), 'Potable ({0:.2f}%)'.format(Potable_per)])\nplt.tick_params(axis='x', labelsize=13)\nplt.tick_params(axis='y', labelsize=13)\n\nplt.title('Data Set Potability Distribution', size=15, y=1.05)\n\nplt.show()","af911fb5":"plt.figure(figsize = (15,9))\nsns.heatmap(df_all.corr(), annot = True, cmap='coolwarm')","dd9fb582":"features = ['ph', 'Trihalomethanes', 'Sulfate', 'Solids', 'Hardness', 'Organic_carbon', 'Chloramines', 'Conductivity', 'Turbidity']\nsurv = df_all['Potability'] == 1\n\nfig, axs = plt.subplots(ncols=2, nrows=5, figsize=(20, 20))\nplt.subplots_adjust(right=1.5, top=2)\n\nfor i, feature in enumerate(features, 1):\n    plt.subplot(5, 2, i)\n    sns.distplot(df_all[~surv][feature], label='Not Potable', hist=True, color='#e74c3c')\n    sns.distplot(df_all[surv][feature], label='Potable', hist=True, color='#2ecc71')\n    plt.xlabel('{}'.format(feature), size=15, labelpad=5)\n    plt.ylabel('', size=10, labelpad=5)\n    plt.legend(['Not Potable', 'Potable'], loc='upper right', prop={'size': 18})\n    plt.title('Count of Potability in {} Feature'.format(feature), size=20, y=1.0)","2a2a6e00":"df = df_all","3967876f":"df['ph'] = pd.qcut(df['ph'], 10)","bd0e371b":"fig, axs = plt.subplots(figsize=(22, 9))\nsns.countplot(x='ph', hue='Potability', data=df)\n\nplt.xlabel('ph', size=15, labelpad=20)\nplt.ylabel('Count', size=15, labelpad=20)\nplt.tick_params(axis='x', labelsize=10)\nplt.tick_params(axis='y', labelsize=15)\n\nplt.legend(['Not Potable', 'Potable'], loc='upper right', prop={'size': 15})\nplt.title('Count of {} Feature'.format('ph'), size=15, y=1)\n\nplt.show()","868dcf02":"df['Trihalomethanes'] = pd.qcut(df_all['Trihalomethanes'], 10)","6ac2b60d":"fig, axs = plt.subplots(figsize=(22, 9))\nsns.countplot(x='Trihalomethanes', hue='Potability', data=df)\n\nplt.xlabel('Trihalomethanes', size=15, labelpad=20)\nplt.ylabel('Count', size=15, labelpad=20)\nplt.tick_params(axis='x', labelsize=10)\nplt.tick_params(axis='y', labelsize=15)\n\nplt.legend(['Not Potable', 'Potable'], loc='upper right', prop={'size': 15})\nplt.title('Count of {} Feature'.format('Trihalomethanes'), size=15, y=1)\n\nplt.show()","8370bf59":"df['Sulfate'] = pd.qcut(df_all['Sulfate'], 10)","8362b1fd":"fig, axs = plt.subplots(figsize=(22, 9))\nsns.countplot(x='Sulfate', hue='Potability', data=df)\n\nplt.xlabel('Sulfate', size=15, labelpad=20)\nplt.ylabel('Count', size=15, labelpad=20)\nplt.tick_params(axis='x', labelsize=10)\nplt.tick_params(axis='y', labelsize=15)\n\nplt.legend(['Not Potable', 'Potable'], loc='upper right', prop={'size': 15})\nplt.title('Count of {} Feature'.format('Sulfate'), size=15, y=1)\n\nplt.show()","2f8e79b2":"df['Solids'] = pd.qcut(df_all['Solids'], 10)","c0c49f81":"fig, axs = plt.subplots(figsize=(22, 9))\nsns.countplot(x='Solids', hue='Potability', data=df)\n\nplt.xlabel('Solids', size=15, labelpad=20)\nplt.ylabel('Count', size=15, labelpad=20)\nplt.tick_params(axis='x', labelsize=10)\nplt.tick_params(axis='y', labelsize=15)\n\nplt.legend(['Not Potable', 'Potable'], loc='upper right', prop={'size': 15})\nplt.title('Count of {} Feature'.format('Solids'), size=15, y=1)\n\nplt.show()","dbdde5b5":"df['Hardness'] = pd.qcut(df_all['Hardness'], 10)","e8551f50":"fig, axs = plt.subplots(figsize=(22, 9))\nsns.countplot(x='Hardness', hue='Potability', data=df)\n\nplt.xlabel('Hardness', size=15, labelpad=20)\nplt.ylabel('Count', size=15, labelpad=20)\nplt.tick_params(axis='x', labelsize=10)\nplt.tick_params(axis='y', labelsize=15)\n\nplt.legend(['Not Potable', 'Potable'], loc='upper right', prop={'size': 15})\nplt.title('Count of {} Feature'.format('Hardness'), size=15, y=1)\n\nplt.show()","71a6972f":"df['Organic_carbon'] = pd.qcut(df_all['Organic_carbon'], 10)","be5a1f7a":"fig, axs = plt.subplots(figsize=(22, 9))\nsns.countplot(x='Organic_carbon', hue='Potability', data=df)\n\nplt.xlabel('Organic_carbon', size=15, labelpad=20)\nplt.ylabel('Count', size=15, labelpad=20)\nplt.tick_params(axis='x', labelsize=10)\nplt.tick_params(axis='y', labelsize=15)\n\nplt.legend(['Not Potable', 'Potable'], loc='upper right', prop={'size': 15})\nplt.title('Count of {} Feature'.format('Organic_carbon'), size=15, y=1)\n\nplt.show()","5b17288b":"df['Chloramines'] = pd.qcut(df_all['Chloramines'], 10)","d3d7abb1":"fig, axs = plt.subplots(figsize=(22, 9))\nsns.countplot(x='Chloramines', hue='Potability', data=df)\n\nplt.xlabel('Chloramines', size=15, labelpad=20)\nplt.ylabel('Count', size=15, labelpad=20)\nplt.tick_params(axis='x', labelsize=10)\nplt.tick_params(axis='y', labelsize=15)\n\nplt.legend(['Not Potable', 'Potable'], loc='upper right', prop={'size': 15})\nplt.title('Count of {} Feature'.format('Chloramines'), size=15, y=1)\n\nplt.show()","913f4eac":"df['Conductivity'] = pd.qcut(df_all['Conductivity'], 10)","89d3e178":"fig, axs = plt.subplots(figsize=(22, 9))\nsns.countplot(x='Conductivity', hue='Potability', data=df)\n\nplt.xlabel('Conductivity', size=15, labelpad=20)\nplt.ylabel('Count', size=15, labelpad=20)\nplt.tick_params(axis='x', labelsize=10)\nplt.tick_params(axis='y', labelsize=15)\n\nplt.legend(['Not Potable', 'Potable'], loc='upper right', prop={'size': 15})\nplt.title('Count of {} Feature'.format('Conductivity'), size=15, y=1)\n\nplt.show()","efef0a7e":"df['Turbidity'] = pd.qcut(df_all['Turbidity'], 10)","4fb5097c":"fig, axs = plt.subplots(figsize=(22, 9))\nsns.countplot(x='Turbidity', hue='Potability', data=df)\n\nplt.xlabel('Turbidity', size=15, labelpad=20)\nplt.ylabel('Count', size=15, labelpad=20)\nplt.tick_params(axis='x', labelsize=10)\nplt.tick_params(axis='y', labelsize=15)\n\nplt.legend(['Not Potable', 'Potable'], loc='upper right', prop={'size': 15})\nplt.title('Count of {} Feature'.format('Turbidity'), size=15, y=1)\n\nplt.show()","ffbdaf31":"df_all = pd.read_csv('..\/input\/water-potability\/water_potability.csv')","e94d5576":"print(df_all['ph'].plot.box())","f29caacc":"print(df_all['Trihalomethanes'].plot.box())","5ddedf38":"print(df_all['Sulfate'].plot.box())","a1d3b5a2":"print(df_all['Solids'].plot.box())","332f98b0":"print(df_all['Hardness'].plot.box())","25f1f42f":"print(df_all['Organic_carbon'].plot.box())","46bd8dd6":"print(df_all['Chloramines'].plot.box())","57122b24":"print(df_all['Conductivity'].plot.box())","399d4bc8":"print(df_all['Turbidity'].plot.box())","8b95de0d":"# Overview\n\n* Potability is the target variable we are trying to predict (0 or 1):\n  * 1 = Potable\n  * 0 = Not Potable\n* ph: pH of 1. water (0 to 14).\n* Hardness: Capacity of water to precipitate soap in mg\/L.\n* Solids: Total dissolved solids in ppm.\n* Chloramines: Amount of Chloramines in ppm.\n* Sulfate: Amount of Sulfates dissolved in mg\/L.\n* Conductivity: Electrical conductivity of water in \u03bcS\/cm.\n* Organic_carbon: Amount of organic carbon in ppm.\n* Trihalomethanes: Amount of Trihalomethanes in \u03bcg\/L.\n* Turbidity: Measure of light emiting property of water in NTU.","26f1c88b":"# Introduction","dc00b40f":"# Exploratory Data Analysis","0040f628":"* Data set has 3276 rows\n* Data set have 10 features\n* One extra feature in Data set is 'Potability' feature, which is the target variable","6da89115":"# Correlations\n\nFeatures are low correlated with each other and not dependent to each other.","4017609c":"# Box plot","f52ae8d2":"## Chloramines","c6584808":"## Conductivity","9e362b88":"## Organic_carbon","ace4a3d3":"## Hardness","89f633f8":"## ph","58bd59cf":"## Solids","1eafdb68":"I referred to the URL : https:\/\/www.kaggle.com\/gunesevitan\/titanic-advanced-feature-engineering-tutorial","08278138":"# Target Distribution in Features","94569863":"# Binning Continuous Features","1c31d826":"## Trihalomethanes","16ffd303":"# Conclusion\n\nI hope these are useful for data analysis. Thank you for reading.","907f4a59":"### Missing Values","f3bda7dd":"# Target Distribution\n\n* 39.01% (1278\/3276) of data set is Class 1\n* 60.99% (1998\/3276) of data set is Class 0","6be751c8":"## Continuous Features","d33df8a3":"## Turbidity","ae0f991d":"## Sulfate"}}