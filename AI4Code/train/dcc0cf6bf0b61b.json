{"cell_type":{"54d3e135":"code","1dab283c":"code","aa93d9d5":"code","1332074a":"markdown","fd250bcb":"markdown","5517f1d3":"markdown","6645a962":"markdown"},"source":{"54d3e135":"import pandas as pd\nfrom collections import Counter\nsudokus = pd.read_csv('..\/input\/sudoku\/sudoku.csv')","1dab283c":"class Sudoku():\n    \"\"\"Attempts to solve the sudoku in a systematic approach.\"\"\"\n\n    def __init__(self):\n        pass\n\n    def init_board(self):\n        \"\"\"Map the values to board positions. If value is 0, map all possible digits to that position. \n        These are to be later removed iteratively according to constraints.\"\"\"\n        i = 0\n        for row in C_Rows:\n            for col in C_Cols:\n                if C_Unsolved[i] == '0':\n                    C_Boxes[row + col] = '123456789'\n                else:\n                    C_Boxes[row + col] = C_Unsolved[i]\n                i += 1\n        del C_Boxes['X']\n\n    def board_match(self, X, Y):\n        \"\"\"Match board rows and columns to return the cell.\"\"\"\n        return [r + c for r in X for c in Y]\n\n    def popdigit(self, links, k, p):\n        \"\"\"Remove a digit from the list of possible values for that cell.\"\"\"\n        for ele in links[k]:\n            C_Boxes[ele] = C_Boxes[ele].replace(p, '')\n\n    def reduce(self, board_lnk, board_box):\n        \"\"\"If there is only one digit in a cell, remove that digit from all dependent cells - \n        be it in same row, same column or same box.\"\"\"\n        for cell in board_box:\n            if len(C_Boxes[cell]) == 1:\n                self.popdigit(board_lnk, cell, C_Boxes[cell])\n\n    def unique(self, board_seg):\n        \"\"\"Ignoring cells that have already been confidently filled in a row \/ column \/ box, \n        if the other unpredicted cells have a loose digit - make the loose digit the actual prediction.\n        Example: Considering a 3x3 square in the puzzle:\n                                 1   2   3\n                              --------------   \n                           A |   9   8   7\n                           B |   6   23  4\n                           C |   23  5   123\n        \n        Here A1, A2, A3, B1, B3, C2 have been confidently predicted. Of the cells B2 and C1, 2 and 3 can occur only in those two.\n        Hence it is safe to remove 2 and 3 from the list of possible numbers from C3. \n        \n        \"\"\"\n        for seg in board_seg:\n            fixnum = ''\n            unqcnt = 0\n            string = ''.join([C_Boxes[cell] for cell in seg if len(C_Boxes[cell]) != 1])\n            stringcnts = Counter(string)\n            if len(stringcnts) > 2:\n                for k1, v1 in stringcnts.items():\n                    if v1 == 1:\n                        unqcnt += 1\n                        fixnum += k1\n            if unqcnt == 1:\n                for cell in seg:\n                    if fixnum in C_Boxes[cell]:\n                        C_Boxes[cell] = fixnum\n\n    def evaluate(self, board_seg):\n        \"\"\"Check the sum on each row, column and square to validate the correctness of the solution.\"\"\"\n        sums = 0\n        for seg in board_seg:\n            for cell in seg:\n                sums += int(C_Boxes[cell])\n        if sums == 405:\n            return True\n        else:\n            return False\n\n    def join_board(self):\n        \"\"\"Join the board as a string to compare against the solutions in the dataset.\"\"\"\n        solved_board = ''\n        for row in C_Rows:\n            for col in C_Cols:\n                solved_board += C_Boxes[row + col]\n        return solved_board\n\n    def solve(self):\n        \"\"\"Begin solving the puzzle after defining the board and establishing dependency cells for each cell.\"\"\"\n        board_box = self.board_match(C_Rows, C_Cols)\n        board_row = [self.board_match(R, C_Cols) for R in C_Rows]\n        board_col = [self.board_match(C_Rows, C) for C in C_Cols]\n        board_sqr = [self.board_match(Rs, Cs) for Rs in ('ABC', 'DEF', 'GHI') for Cs in ('123', '456', '789')]\n        board_lst = board_row + board_col + board_sqr\n        board_all = dict((cell, [lst for lst in board_lst if cell in lst]) for cell in board_box)\n        board_lnk = dict((cell, sorted(set(sum(board_all[cell], [])) - set([cell]))) for cell in board_box)\n        for i in range(5):\n            for j in range(3):\n                self.reduce(board_lnk, board_box)\n            for board_seg in [board_sqr, board_col, board_row]:\n                self.unique(board_seg)\n        a = self.join_board()\n        return a\n\n    def display_board(self):\n        \"\"\"Display the solved board\"\"\"\n        print('-' * 37)\n        for row in C_Rows:\n            board = '|'\n            for col in C_Cols:\n                board += '  ' + C_Boxes[row + col]\n                if col in '369':\n                    board += '  |'\n            print(board)\n            if row in 'CF':\n                print('-' * 37)\n        print('-' * 37)  \n        ","aa93d9d5":"C_Rows = 'ABCDEFGHI'\nC_Cols = '123456789'\nC_Correct = 0\ngame = Sudoku()\nfor i in range(len(sudokus)):\n    C_Unsolved = sudokus.quizzes[i]\n    C_Unsolved = ''.join([char for char in C_Unsolved if char != '.'])\n    C_Boxes = {'X' : 0}\n    solution = sudokus.solutions[i]\n    game.init_board() \n    a = game.solve()\n    if a == solution:\n        C_Correct += 1\nprint(f\"{C_Correct} out of {len(sudokus)} correct. Accuracy is {(C_Correct \/ len(sudokus)) * 100:.4f}%\")","1332074a":"### **Sudoku Solver Class**\nA systematic and simple approach to solve sudoku","fd250bcb":"# Sudoku Solver - A Systematic Approach\nAuthor : Naveen Chakravarthy Balasubramanian","5517f1d3":"### **Imports and Data**\nImport necessary libraries and load the data","6645a962":"### **Run**"}}