{"cell_type":{"1cf55e2e":"code","b189bb4a":"code","3a6b799c":"code","862d313b":"code","59ce9086":"code","d7545a32":"code","67fd31f0":"code","2972d74e":"code","c250e111":"code","59ce937f":"code","febd29d8":"code","cf857388":"code","8ed4f4fc":"code","3809d353":"markdown","3b6d3432":"markdown","6f8bf946":"markdown","46847658":"markdown"},"source":{"1cf55e2e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # visualization\nimport seaborn as sns  # visualization\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b189bb4a":"data_movies = pd.read_csv(\"..\/input\/tmdb_5000_movies.csv\")\n\ndata_movies.info()","3a6b799c":"#correlation map\n\nf,ax = plt.subplots(figsize=(15,15))\nsns.heatmap(data_movies.corr(), annot=True, linewidth=0.3, fmt=\".1f\", ax=ax)\nplt.show\n","862d313b":"data_movies.columns\n","59ce9086":"data_movies.budget.plot(kind=\"line\", color=\"b\", label=\"Budgets\", linewidth=0.85, alpha=0.7, grid=True, figsize=(10,10))\ndata_movies.revenue.plot(kind=\"line\", color=\"r\", label=\"Revenue\", linewidth=0.75, alpha=0.5,)\nplt.legend(loc=\"upper center\")\nplt.show()\n","d7545a32":"data_movies.plot(kind=\"Scatter\", x=\"budget\", y=\"revenue\", alpha=0.6, grid=True, color=\"green\", figsize=(10,10))\nplt.show()","67fd31f0":"data_movies.revenue.plot(kind=\"hist\", bins=50, figsize=(10,10))\nplt.show","2972d74e":"filtre = data_movies[\"vote_average\"]>8\ndata_movies[filtre]","c250e111":"filtre2 = data_movies[(data_movies[\"vote_average\"]>8) & (data_movies[\"vote_count\"]>3000)]\nfiltre2","59ce937f":"best_movies = filtre2\n\nbest_movies.info()\nbest_movies.columns","febd29d8":"f,ax = plt.subplots(figsize=(15,15))\nsns.heatmap(best_movies.corr(), annot=True, linewidth=0.3, fmt=\".1f\", ax=ax)\nplt.show","cf857388":"best_movies.plot(kind=\"Scatter\", x=\"budget\", y=\"revenue\", alpha=0.6, grid=True, color=\"green\", figsize=(10,10), s=150)\nplt.show()","8ed4f4fc":"best_movies.budget.plot(kind=\"line\", color=\"b\", label=\"Budgets\", linewidth=3, alpha=0.7, grid=True, figsize=(10,10))\nbest_movies.revenue.plot(kind=\"line\", color=\"r\", label=\"Revenue\", linewidth=3, alpha=0.5,grid=True)\nplt.legend(loc=\"upper center\")\nplt.show()\n","3809d353":"now i have got a dataframe which could be assumed as movies should be watched :). maybe now i should do some analysis just on this dataframe. so ill call this new dataframe as best movies.","3b6d3432":"lets have a look if there is another correlation, when compared to all movies, between variables in \"best movies\"","6f8bf946":"i have found the movies have got a vote average higher than 8 but i noticed that some movies has been voted by just 2 or 3 people. so i want to eliminate these. to do that i will improve my filter which will filter not just vote average but also vote count.","46847658":"applying a filter for finding movies that owns higher votes ( higher than 8)\n"}}