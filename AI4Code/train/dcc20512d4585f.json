{"cell_type":{"88b85ee0":"code","001accfa":"code","38c5338e":"code","8ef1f17b":"code","dea84f8a":"code","bcd1dd35":"code","829fada8":"code","1822ed3c":"code","cd4f8bb0":"code","daeb86eb":"code","46171bbb":"code","950f5fb6":"markdown","4e216a22":"markdown"},"source":{"88b85ee0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","001accfa":"# Import Library\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","38c5338e":"# Import Dataset\ndataset = pd.read_csv('\/kaggle\/input\/purchase-capacity-prediction-logistic-regression\/Social_Network_Ads.csv')\nX = dataset.iloc[:,:-1].values\ny = dataset.iloc[:,-1].values","8ef1f17b":"# Split dataset into train and test\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2)","dea84f8a":"# Feature Scaling of dependent and independent variable\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train_sc = sc.fit_transform(X_train)","bcd1dd35":"# Apply Logistic Regression on dataset\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train_sc,y_train)","829fada8":"# Predict test data\ny_pred = classifier.predict(sc.transform(X_test))\nprint(np.concatenate((y_test.reshape(len(y_test),1),y_pred.reshape(len(y_pred),1)),1))","1822ed3c":"# Evaluate The Model performance\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nnp.set_printoptions(precision=2)\ncm = confusion_matrix(y_test,y_pred)\nprint(cm)\nprint(f\"Accuracy score is {accuracy_score(y_test,y_pred)}\")","cd4f8bb0":"# Predict A new result\nclassifier.predict(sc.transform([[30, 87000]]))","daeb86eb":"# Visualizing the training Result\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = (sc.inverse_transform(X_train_sc), y_train)\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i,j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Logistic Regression (Training Set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","46171bbb":"# Visualizing the test Result\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_test, y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i,j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Logistic Regression (Test Set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","950f5fb6":"This is dataset which contains age, salary with purchase behavior. There are different age customer with different salary. Here age and salary is the indepdent variables whereas purchase is the dependent variable. We have to see which salary group has the highest probabilities of purchasing car whereas which salary group has minimum probabilities of purchasing car.","4e216a22":"From the above graph, the line between green and red clearly differntiating which customers are interesting in purchasing car and which are not. The green shows the customers who are interested in purchasing car but the red area shows the customer who are not interested in purchasing car."}}