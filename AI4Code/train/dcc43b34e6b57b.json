{"cell_type":{"e7008925":"code","791f47d8":"code","cbebcef7":"code","2dba8c10":"code","d92d8d6b":"code","a6696f10":"code","930ac48b":"markdown","804b074a":"markdown","5835c451":"markdown","be23f7a1":"markdown","ce42a19e":"markdown","b1f70221":"markdown","6495af99":"markdown","1a287d2a":"markdown"},"source":{"e7008925":"# T# 1. Enable Internet in the Kernel (Settings side pane)\n\n# 2. Curl cache may need purged if v0.1.6 cannot be found (uncomment if needed). \n# !curl -X PURGE https:\/\/pypi.org\/simple\/kaggle-environments\n\n# Halite environment was defined in v0.2.1\n!pip install 'kaggle-environments>=0.2.1'","791f47d8":"from kaggle_environments import evaluate, make\n\nenv = make(\"halite\", debug=True)\nenv.render()","cbebcef7":"%%writefile submission.py\n# for Debug previous line (%%writefile submission.py) should be commented out, uncomment to write submission.py\n\n#FUNCTIONS###################################################\ndef set_map_and_average_halite(s_env):\n    \"\"\"\n        set average amount of halite per halite source\n        and map as two dimensional array of objects and set amounts of halite in each cell\n    \"\"\"\n    s_env[\"map\"] = []\n    halite_sources_amount = 0\n    halite_total_amount = 0\n    for x in range(conf.size):\n        s_env[\"map\"].append([])\n        for y in range(conf.size):\n            s_env[\"map\"][x].append({\n                # value will be ID of owner\n                \"shipyard\": None,\n                # value will be ID of owner\n                \"ship\": None,\n                # value will be amount of halite\n                \"ship_cargo\": None,\n                # amount of halite\n                \"halite\": s_env[\"obs\"].halite[conf.size * y + x]\n            })\n            if s_env[\"map\"][x][y][\"halite\"] > 0:\n                halite_total_amount += s_env[\"map\"][x][y][\"halite\"]\n                halite_sources_amount += 1\n    s_env[\"average_halite\"] = halite_total_amount \/ halite_sources_amount\n\ndef update_map(s_env):\n    \"\"\"\n        update locations of ships and shipyards on the map,\n        get lists of coords of Swarm's units,\n        get targets for \"torpedoes\"\n    \"\"\"\n    global torpedo_targets\n    torpedo_targets = []\n    # arrays of (x, y) coords\n    s_env[\"swarm_shipyards_coords\"] = []\n    s_env[\"swarm_ships_coords\"] = []\n    # place on the map locations of units of every player\n    for player in range(len(s_env[\"obs\"].players)):\n        # set torpedo targets\n        target_index = 0\n        for i in range(len(torpedo_targets)):\n            while (target_index < len(torpedo_targets) and\n                    s_env[\"obs\"].players[player][0] < torpedo_targets[target_index][\"halite\"]):\n                target_index += 1\n        torpedo_targets.insert(target_index, {\n            \"player\": player,\n            \"shipyards\": [],\n            \"halite\": s_env[\"obs\"].players[player][0]\n        })\n        # place on the map locations of every shipyard of the player\n        shipyards = list(s_env[\"obs\"].players[player][1].values())\n        for shipyard in shipyards:\n            x = shipyard % conf.size\n            y = shipyard \/\/ conf.size\n            # place shipyard on the map\n            s_env[\"map\"][x][y][\"shipyard\"] = player\n            torpedo_targets[target_index][\"shipyards\"].append({\"x\": x, \"y\": y})\n            if player == s_env[\"obs\"].player:\n                s_env[\"swarm_shipyards_coords\"].append((x, y))\n        # place on the map locations of every ship of the player\n        ships = list(s_env[\"obs\"].players[player][2].values())\n        for ship in ships:\n            x = ship[0] % conf.size\n            y = ship[0] \/\/ conf.size\n            # place ship on the map\n            s_env[\"map\"][x][y][\"ship\"] = player\n            s_env[\"map\"][x][y][\"ship_cargo\"] = ship[1]\n            if player == s_env[\"obs\"].player:\n                s_env[\"swarm_ships_coords\"].append((x, y))\n\ndef get_c(c):\n    \"\"\" get coordinate, considering donut type of the map \"\"\"\n    return c % conf.size\n\ndef clear(x, y, player, game_map):\n    \"\"\" check if cell is safe to move in \"\"\"\n    # if there is no shipyard, or there is player's shipyard\n    # and there is no ship\n    if ((game_map[x][y][\"shipyard\"] == player or game_map[x][y][\"shipyard\"] == None) and\n            game_map[x][y][\"ship\"] == None):\n        return True\n    return False\n\ndef get_closest_coords(x_initial, y_initial, s_env, coords_list):\n    \"\"\" get from coords_list x and y closest to x_initial and y_initial \"\"\"\n    closest_coords_index = 0\n    min_distance = None\n    for i in range(len(coords_list)):\n        to_x = coords_list[i][\"x\"]\n        to_y = coords_list[i][\"y\"]\n        # choose x route\n        if x_initial > to_x:\n            normal_route_x = x_initial - to_x\n            donut_route_x = conf.size - x_initial + to_x\n        else:\n            normal_route_x = to_x - x_initial\n            donut_route_x = conf.size - to_x + x_initial\n        # x distance to shipyard\n        x_dist = donut_route_x if donut_route_x < normal_route_x else normal_route_x\n        # choose y route\n        if y_initial > to_y:\n            normal_route_y = y_initial - to_y\n            donut_route_y = conf.size - y_initial + to_y\n        else:\n            normal_route_y = to_y - y_initial\n            donut_route_y = conf.size - to_y + y_initial\n        # y distance to shipyard\n        y_dist = donut_route_y if donut_route_y < normal_route_y else normal_route_y\n        dist = x_dist + y_dist\n        if min_distance == None or dist < min_distance:\n            min_distance = dist\n            closest_coords_index = i\n    return coords_list[closest_coords_index]\n\ndef move_to_cell(to_x, to_y, x_initial, y_initial, actions, s_env, ship_index):\n    \"\"\" move ship to cell with to_x and to_y coords, if possible \"\"\"\n    ship_id = s_env[\"ships_keys\"][ship_index]\n    ship_cargo = s_env[\"ships_values\"][ship_index][1]\n    \n    # choose x route\n    if x_initial > to_x:\n        normal_route_x = x_initial - to_x\n        donut_route_x = conf.size - x_initial + to_x\n        # x direction to shipyard\n        x_dir = \"WEST\"\n    else:\n        normal_route_x = to_x - x_initial\n        donut_route_x = conf.size - to_x + x_initial\n        x_dir = \"EAST\"\n    # x distance to shipyard\n    x_dist = donut_route_x if donut_route_x < normal_route_x else normal_route_x\n    \n    # choose y route\n    if y_initial > to_y:\n        normal_route_y = y_initial - to_y\n        donut_route_y = conf.size - y_initial + to_y\n        # y direction to shipyard\n        y_dir = \"NORTH\"\n    else:\n        normal_route_y = to_y - y_initial\n        donut_route_y = conf.size - to_y + y_initial\n        y_dir = \"SOUTH\"\n    # y distance to shipyard\n    y_dist = donut_route_y if donut_route_y < normal_route_y else normal_route_y\n\n    # get possible directions\n    for direction in directions_list:\n        if direction[\"direction\"] == x_dir:\n            x = direction[\"x\"](x_initial)\n        elif direction[\"direction\"] == y_dir:\n            y = direction[\"y\"](y_initial)\n\n    # choose direction\n    # if this ship is not a \"torpedo\"\n    if ships_data[s_env[\"ships_keys\"][ship_index]][\"target_coords\"] == None:\n        if x_dist > y_dist:\n            if (clear(x, y_initial, s_env[\"obs\"].player, s_env[\"map\"]) and\n                    not hostile_ship_near(x, y_initial, s_env[\"obs\"].player, s_env[\"map\"], ship_cargo)):\n                s_env[\"map\"][x_initial][y_initial][\"ship\"] = None\n                s_env[\"map\"][x][y_initial][\"ship\"] = s_env[\"obs\"].player\n                actions[ship_id] = x_dir\n                return True\n        else:\n            if (clear(x_initial, y, s_env[\"obs\"].player, s_env[\"map\"]) and\n                    not hostile_ship_near(x_initial, y, s_env[\"obs\"].player, s_env[\"map\"], ship_cargo)):\n                s_env[\"map\"][x_initial][y_initial][\"ship\"] = None\n                s_env[\"map\"][x_initial][y][\"ship\"] = s_env[\"obs\"].player\n                actions[ship_id] = y_dir\n                return True\n    # if this ship is a \"torpedo\"\n    else:\n        if x_dist > y_dist:\n            if s_env[\"map\"][x][y_initial][\"ship\"] == None:\n                s_env[\"map\"][x_initial][y_initial][\"ship\"] = None\n                s_env[\"map\"][x][y_initial][\"ship\"] = s_env[\"obs\"].player\n                actions[ship_id] = x_dir\n                return True\n        else:\n            if s_env[\"map\"][x_initial][y][\"ship\"] == None:\n                s_env[\"map\"][x_initial][y_initial][\"ship\"] = None\n                s_env[\"map\"][x_initial][y][\"ship\"] = s_env[\"obs\"].player\n                actions[ship_id] = y_dir\n                return True\n    return False\n\ndef return_to_shipyard(x_initial, y_initial, actions, s_env, ship_index):\n    \"\"\" return to shipyard's coords \"\"\"\n    ship_id = s_env[\"ships_keys\"][ship_index]\n    ship_cargo = s_env[\"ships_values\"][ship_index][1]\n    # if ship is currently at shipyard's coords\n    if x_initial == shipyard_coords[\"x\"] and y_initial == shipyard_coords[\"y\"]:\n        # if there is no shipyard at shipyard's coords\n        if (s_env[\"map\"][x_initial][y_initial][\"shipyard\"] == None and\n                (ship_cargo + s_env[\"swarm_halite\"]) >= conf.convertCost):\n            actions[ship_id] = \"CONVERT\"\n            s_env[\"map\"][x_initial][y_initial][\"ship\"] = None\n            return True\n        # if ship is going to move out from shipyard's coords\n        else:\n            global movement_tactics_index\n            ships_data[ship_id][\"moves_done\"] = 0\n            ships_data[ship_id][\"ship_max_moves\"] = 1\n            ships_data[ship_id][\"directions\"] = movement_tactics[movement_tactics_index][\"directions\"]\n            ships_data[ship_id][\"directions_index\"] = 0\n            movement_tactics_index += 1\n            if movement_tactics_index >= movement_tactics_amount:\n                movement_tactics_index = 0\n    else:\n        # if ship has to return to shipyard's coords\n        if ship_cargo >= s_env[\"return_threshold\"]:\n            return move_to_cell(\n                shipyard_coords[\"x\"], shipyard_coords[\"y\"], x_initial, y_initial, actions, s_env, ship_index)\n    return False\n\ndef move_ship(x_initial, y_initial, actions, s_env, ship_index):\n    \"\"\" move the ship according to first acceptable tactic \"\"\"\n    if go_for_halite(x_initial, y_initial, s_env[\"ships_keys\"][ship_index], actions, s_env, ship_index):\n        return\n    standard_patrol(x_initial, y_initial, s_env[\"ships_keys\"][ship_index], actions, s_env, ship_index)\n\ndef go_for_halite(x_initial, y_initial, ship_id, actions, s_env, ship_index):\n    \"\"\" ship will go to safe cell with enough halite, if it is found \"\"\"\n    # if current cell has enough halite\n    if (s_env[\"map\"][x_initial][y_initial][\"halite\"] > s_env[\"low_amount_of_halite\"] and\n            not hostile_ship_near(x_initial, y_initial, s_env[\"obs\"].player, s_env[\"map\"], s_env[\"ships_values\"][ship_index][1])):\n        most_halite = s_env[\"map\"][x_initial][y_initial][\"halite\"]\n    else:\n        # biggest amount of halite among scanned cells\n        most_halite = s_env[\"low_amount_of_halite\"]\n    direction = None\n    for d in range(len(directions_list)):\n        x = directions_list[d][\"x\"](x_initial)\n        y = directions_list[d][\"y\"](y_initial)\n        # if cell is safe to move in\n        if (clear(x, y, s_env[\"obs\"].player, s_env[\"map\"]) and\n                not hostile_ship_near(x, y, s_env[\"obs\"].player, s_env[\"map\"], s_env[\"ships_values\"][ship_index][1])):\n            # if current cell has more than biggest amount of halite\n            if s_env[\"map\"][x][y][\"halite\"] > most_halite:\n                most_halite = s_env[\"map\"][x][y][\"halite\"]\n                direction = directions_list[d][\"direction\"]\n                direction_x = x\n                direction_y = y\n    # if cell is safe to move in and has substantial amount of halite\n    if most_halite > s_env[\"low_amount_of_halite\"] and direction != None:\n        actions[ship_id] = direction\n        s_env[\"map\"][x_initial][y_initial][\"ship\"] = None\n        s_env[\"map\"][direction_x][direction_y][\"ship\"] = s_env[\"obs\"].player\n        return True\n    # if current cell has biggest amount of halite\n    elif most_halite == s_env[\"map\"][x_initial][y_initial][\"halite\"]:\n        return True\n    return False\n\ndef standard_patrol(x_initial, y_initial, ship_id, actions, s_env, ship_index):\n    \"\"\" \n        ship will move in expanding circles clockwise or counterclockwise\n        until reaching maximum radius, then radius will be minimal again\n    \"\"\"\n    directions = ships_data[ship_id][\"directions\"]\n    # set index of direction\n    i = ships_data[ship_id][\"directions_index\"]\n    for j in range(len(directions)):\n        x = directions[i][\"x\"](x_initial)\n        y = directions[i][\"y\"](y_initial)\n        # if cell is ok to move in\n        if (clear(x, y, s_env[\"obs\"].player, s_env[\"map\"]) and\n                (s_env[\"map\"][x][y][\"shipyard\"] == s_env[\"obs\"].player or\n                not hostile_ship_near(x, y, s_env[\"obs\"].player, s_env[\"map\"], s_env[\"ships_values\"][ship_index][1]))):\n            ships_data[ship_id][\"moves_done\"] += 1\n            # apply changes to game_map, to avoid collisions of player's ships next turn\n            s_env[\"map\"][x_initial][y_initial][\"ship\"] = None\n            s_env[\"map\"][x][y][\"ship\"] = s_env[\"obs\"].player\n            # if it was last move in this direction\n            if ships_data[ship_id][\"moves_done\"] >= ships_data[ship_id][\"ship_max_moves\"]:\n                ships_data[ship_id][\"moves_done\"] = 0\n                ships_data[ship_id][\"directions_index\"] += 1\n                # if it is last direction in a list\n                if ships_data[ship_id][\"directions_index\"] >= len(directions):\n                    ships_data[ship_id][\"directions_index\"] = 0\n                    ships_data[ship_id][\"ship_max_moves\"] += 1\n                    # if ship_max_moves reached maximum radius expansion\n                    if ships_data[ship_id][\"ship_max_moves\"] > max_moves_amount:\n                        ships_data[ship_id][\"ship_max_moves\"] = 3\n            actions[ship_id] = directions[i][\"direction\"]\n            break\n        else:\n            # loop through directions\n            i += 1\n            if i >= len(directions):\n                i = 0\n\ndef get_directions(i0, i1, i2, i3):\n    \"\"\" get list of directions in a certain sequence \"\"\"\n    return [directions_list[i0], directions_list[i1], directions_list[i2], directions_list[i3]]\n\ndef hostile_ship_near(x, y, player, m, cargo):\n    \"\"\" check if hostile ship is in one move away from game_map[x][y] and has less or equal halite \"\"\"\n    # m = game map\n    n = get_c(y - 1)\n    e = get_c(x + 1)\n    s = get_c(y + 1)\n    w = get_c(x - 1)\n    if (\n            (m[x][n][\"ship\"] != player and m[x][n][\"ship\"] != None and m[x][n][\"ship_cargo\"] <= cargo) or\n            (m[x][s][\"ship\"] != player and m[x][s][\"ship\"] != None and m[x][s][\"ship_cargo\"] <= cargo) or\n            (m[e][y][\"ship\"] != player and m[e][y][\"ship\"] != None and m[e][y][\"ship_cargo\"] <= cargo) or\n            (m[w][y][\"ship\"] != player and m[w][y][\"ship\"] != None and m[w][y][\"ship_cargo\"] <= cargo)\n        ):\n        return True\n    return False\n\ndef spawn_ship(actions, s_env, ships_amount, i):\n    \"\"\" spawn ship, if possible \"\"\"\n    if s_env[\"swarm_halite\"] >= conf.spawnCost and ships_amount < s_env[\"ships_max_amount\"]:\n        x = s_env[\"swarm_shipyards_coords\"][i][0]\n        y = s_env[\"swarm_shipyards_coords\"][i][1]\n        # if there is currently no ship at shipyard\n        if clear(x, y, s_env[\"obs\"].player, s_env[\"map\"]):\n            s_env[\"swarm_halite\"] -= conf.spawnCost\n            actions[s_env[\"shipyards_keys\"][i]] = \"SPAWN\"\n            s_env[\"map\"][x][y][\"ship\"] = s_env[\"obs\"].player\n            ships_amount += 1\n        return True, ships_amount\n    return False, ships_amount\n\ndef this_is_new_ship(s_env, i):\n    \"\"\" add this ship to ships_data \"\"\"\n    global movement_tactics_index\n    ships_data[s_env[\"ships_keys\"][i]] = {\n        \"moves_done\": 0,\n        \"ship_max_moves\": 3,\n        \"directions\": movement_tactics[movement_tactics_index][\"directions\"],\n        # coords of target if ship is launched as a torpedo\n        \"target_coords\": None,\n        \"directions_index\": 0\n    }\n    movement_tactics_index += 1\n    if movement_tactics_index >= movement_tactics_amount:\n        movement_tactics_index = 0\n        \ndef send_as_torpedo(x_initial, y_initial, actions, s_env, i):\n    \"\"\"\n        send this ship as a torpedo to closest shipyard of the player that is one position ahead of the Swarm\n        or one position below, if Swarm is the leader\n    \"\"\"\n    if ships_data[s_env[\"ships_keys\"][i]][\"target_coords\"] == None:\n        # minimal ships amount to launch ship as a torpedo\n        if len(s_env[\"ships_keys\"]) > 10 and s_env[\"torpedoes_amount\"] < torpedoes_max_amount:\n            for j in range(len(torpedo_targets)):\n                if torpedo_targets[j][\"player\"] == s_env[\"obs\"].player:\n                    target_index = j - 1 if j > 0 else j + 1\n                    if len(torpedo_targets[target_index][\"shipyards\"]) > 0:\n                        coords = get_closest_coords(x_initial, y_initial, s_env, torpedo_targets[target_index][\"shipyards\"])\n                        ships_data[s_env[\"ships_keys\"][i]][\"target_coords\"] = coords\n                    else:\n                        return False\n        else:\n            return False\n    x = ships_data[s_env[\"ships_keys\"][i]][\"target_coords\"][\"x\"]\n    y = ships_data[s_env[\"ships_keys\"][i]][\"target_coords\"][\"y\"]\n    if move_to_cell(x, y, x_initial, y_initial, actions, s_env, i):\n        return True\n    else:\n        return False\n\ndef proceed_as_torpedo(x_initial, y_initial, actions, s_env, i):\n    \"\"\" proceed to the target, if ship is a torpedo \"\"\"\n    if ships_data[s_env[\"ships_keys\"][i]][\"target_coords\"] != None:\n        x = ships_data[s_env[\"ships_keys\"][i]][\"target_coords\"][\"x\"]\n        y = ships_data[s_env[\"ships_keys\"][i]][\"target_coords\"][\"y\"]\n        # if target coords reached and are empty\n        if x == x_initial and y == y_initial:\n            ships_data[s_env[\"ships_keys\"][i]][\"target_coords\"] = None\n        elif move_to_cell(x, y, x_initial, y_initial, actions, s_env, i):\n            return True\n    return False\n\ndef this_is_last_step(x, y, actions, s_env, i):\n    \"\"\" actions of ship, if it is last step \"\"\"\n    if s_env[\"obs\"].step == (conf.episodeSteps - 2) and s_env[\"ships_values\"][i][1] >= conf.convertCost:\n        actions[s_env[\"ships_keys\"][i]] = \"CONVERT\"\n        s_env[\"map\"][x][y][\"ship\"] = None\n        return True\n    return False\n\ndef to_spawn_or_not_to_spawn(s_env):\n    \"\"\" to spawn, or not to spawn, that is the question \"\"\"\n    # get ships_max_amount to decide whether to spawn new ships or not\n    ships_max_amount = s_env[\"average_halite\"] \/\/ 5\n    # if ships_max_amount is less than minimal allowed amount of ships in the Swarm\n    if ships_max_amount < ships_min_amount:\n        ships_max_amount = ships_min_amount\n    return ships_max_amount\n\ndef define_some_globals(observation, configuration):\n    \"\"\" define some of the global variables \"\"\"\n    global conf\n    global max_moves_amount\n    global globals_not_defined\n    conf = configuration\n    max_moves_amount = 7\n    # set coords of the shipyard\n    start_ship_coords = list(observation.players[observation.player][2].values())[0][0]\n    shipyard_coords[\"x\"] = start_ship_coords % conf.size\n    shipyard_coords[\"y\"] = start_ship_coords \/\/ conf.size\n    globals_not_defined = False\n\ndef adapt_environment(observation, configuration, s_env):\n    \"\"\" adapt environment for the Swarm \"\"\"\n    s_env[\"obs\"] = observation\n    if globals_not_defined:\n        define_some_globals(observation, configuration)\n    set_map_and_average_halite(s_env)\n    s_env[\"low_amount_of_halite\"] = 4 if s_env[\"average_halite\"] < 4 else s_env[\"average_halite\"]\n    s_env[\"return_threshold\"] = s_env[\"average_halite\"] * 2\n    s_env[\"swarm_halite\"] = s_env[\"obs\"].players[s_env[\"obs\"].player][0]\n    update_map(s_env)\n    s_env[\"ships_keys\"] = list(s_env[\"obs\"].players[s_env[\"obs\"].player][2].keys())\n    s_env[\"ships_values\"] = list(s_env[\"obs\"].players[s_env[\"obs\"].player][2].values())\n    s_env[\"shipyards_keys\"] = list(s_env[\"obs\"].players[s_env[\"obs\"].player][1].keys())\n    s_env[\"ships_max_amount\"] = to_spawn_or_not_to_spawn(s_env)\n    s_env[\"torpedoes_amount\"] = 0\n    \ndef actions_of_ships(actions, s_env):\n    \"\"\" actions of every ship of the Swarm \"\"\"\n    # calculate amount of \"torpedo\" ships\n    for i in range(len(s_env[\"ships_keys\"])):\n        if (s_env[\"ships_keys\"][i] in ships_data and\n                ships_data[s_env[\"ships_keys\"][i]][\"target_coords\"] != None):\n            s_env[\"torpedoes_amount\"] += 1\n    for i in range(len(s_env[\"swarm_ships_coords\"])):\n        x = s_env[\"swarm_ships_coords\"][i][0]\n        y = s_env[\"swarm_ships_coords\"][i][1]\n        # if this is a new ship\n        if s_env[\"ships_keys\"][i] not in ships_data:\n            this_is_new_ship(s_env, i)\n            # send this ship as a \"torpedo\", if possible\n            if send_as_torpedo(x, y, actions, s_env, i):\n                s_env[\"torpedoes_amount\"] += 1\n                continue\n        # proceed to the target, if ship is a torpedo\n        if proceed_as_torpedo(x, y, actions, s_env, i):\n            continue\n        # if it is last step\n        if this_is_last_step(x, y, actions, s_env, i):\n            continue\n        # if ship has to return to shipyard\n        if return_to_shipyard(x, y, actions, s_env, i):\n            continue\n        move_ship(x, y, actions, s_env, i)\n\ndef actions_of_shipyards(actions, s_env):\n    \"\"\" actions of every shipyard of the Swarm \"\"\"\n    ships_amount = len(s_env[\"ships_keys\"])\n    # spawn ships from every shipyard, if possible\n    for i in range(len(s_env[\"shipyards_keys\"])):\n        # spawn a ship\n        ok, ships_amount = spawn_ship(actions, s_env, ships_amount, i)\n        if not ok:\n            break\n\n\n#GLOBAL_VARIABLES#############################################\nconf = None\n# max amount of moves in one direction before turning\nmax_moves_amount = None\n# object with ship ids and their data\nships_data = {}\n# max amount of \"torpedo\" ships\ntorpedoes_max_amount = 1\n# list of torpedo targets\ntorpedo_targets = []\n# initial movement_tactics index\nmovement_tactics_index = 0\n# minimum amount of ships that should be in the Swarm at any time\nships_min_amount = 3\n# coords of the shipyard\nshipyard_coords = {\"x\": None, \"y\": None}\n# not all global variables are defined\nglobals_not_defined = True\n\n# list of directions\ndirections_list = [\n    {\n        \"direction\": \"NORTH\",\n        \"x\": lambda z: z,\n        \"y\": lambda z: get_c(z - 1)\n    },\n    {\n        \"direction\": \"EAST\",\n        \"x\": lambda z: get_c(z + 1),\n        \"y\": lambda z: z\n    },\n    {\n        \"direction\": \"SOUTH\",\n        \"x\": lambda z: z,\n        \"y\": lambda z: get_c(z + 1)\n    },\n    {\n        \"direction\": \"WEST\",\n        \"x\": lambda z: get_c(z - 1),\n        \"y\": lambda z: z\n    }\n]\n\n# list of movement tactics\nmovement_tactics = [\n    # N -> E -> S -> W\n    {\"directions\": get_directions(0, 1, 2, 3)},\n    # S -> E -> N -> W\n    {\"directions\": get_directions(2, 1, 0, 3)},\n    # N -> W -> S -> E\n    {\"directions\": get_directions(0, 3, 2, 1)},\n    # S -> W -> N -> E\n    {\"directions\": get_directions(2, 3, 0, 1)},\n    # E -> N -> W -> S\n    {\"directions\": get_directions(1, 0, 3, 2)},\n    # W -> S -> E -> N\n    {\"directions\": get_directions(3, 2, 1, 0)},\n    # E -> S -> W -> N\n    {\"directions\": get_directions(1, 2, 3, 0)},\n    # W -> N -> E -> S\n    {\"directions\": get_directions(3, 0, 1, 2)}\n]\nmovement_tactics_amount = len(movement_tactics)\n\n\n#THE_SWARM####################################################\ndef swarm_agent(observation, configuration):\n    \"\"\" RELEASE THE SWARM!!! \"\"\"\n    # s_env -> swarm environment\n    s_env = {}\n    actions = {}\n    adapt_environment(observation, configuration, s_env)\n    actions_of_ships(actions, s_env)\n    actions_of_shipyards(actions, s_env)\n    return actions","2dba8c10":"if \"swarm_agent\" in globals():\n    # reset variables\n    ships_data = {}\n    movement_tactics_index = 0\n\n    # Play as first position against random agent.\n    trainer = env.train([None, \"random\"])\n\n    observation = trainer.reset()\n\n    while not env.done:\n        my_action = swarm_agent(observation, env.configuration)\n        print(\"Step: {0}, My Action: {1}\".format(observation.step, my_action))\n        observation, reward, done, info = trainer.step(my_action)\n        # env.render(mode=\"ipython\", width=100, height=90, header=False, controls=False)\n    env.render()","d92d8d6b":"def mean_reward(rewards):\n    wins = 0\n    ties = 0\n    loses = 0\n    for r in rewards:\n        r0 = 0 if r[0] is None else r[0]\n        r1 = 0 if r[1] is None else r[1]\n        if r0 > r1:\n            wins += 1\n        elif r1 > r0:\n            loses += 1\n        else:\n            ties += 1\n    return f'wins={wins\/len(rewards)}, ties={ties\/len(rewards)}, loses={loses\/len(rewards)}'\n\n# Run multiple episodes to estimate its performance.\n# Setup agentExec as LOCAL to run in memory (runs faster) without process isolation.\nprint(\"Swarm Agent vs Random Agent:\", mean_reward(evaluate(\n    \"halite\",\n    [\"submission.py\", \"random\"],\n    num_episodes=10, configuration={\"agentExec\": \"LOCAL\"}\n)))","a6696f10":"env.run([\"submission.py\", \"submission.py\"])\n#env.run([\"submission.py\", \"random\"])\nenv.render(mode=\"ipython\", width=800, height=600)","930ac48b":"# Install kaggle-environments","804b074a":"# Create Halite Environment","5835c451":"# Create a Submission (agent)","be23f7a1":"# Test your Agent","ce42a19e":"# **This is a copy of the original** [**Halite Swarm Intelligence**](https:\/\/www.kaggle.com\/yegorbiryukov\/halite-swarm-intelligence) **notebook**","b1f70221":"# Submit to Competition\n\n1. Commit this kernel.\n2. View the commited version.\n3. Go to \"Data\" section and find submission.py file.\n4. Click \"Submit to Competition\"\n5. Go to [My Submissions](https:\/\/kaggle.com\/c\/halite\/submissions) to view your score and episodes being played.","6495af99":"# Debug your Agent","1a287d2a":"# Evaluate your Agent"}}