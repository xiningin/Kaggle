{"cell_type":{"8ca4e386":"code","bff1b9fd":"code","fcb071a1":"code","0edba757":"code","a167084b":"code","d4322884":"code","b271f2e9":"code","22bbfee3":"code","9bbf8adc":"code","c001a4f8":"code","5b6908e8":"code","0d33e5d3":"code","0c8ffc38":"code","dbb30126":"code","df4636fc":"code","d55d2bcd":"code","3956bb1d":"code","2540cba6":"code","150efa2e":"code","fc1249f1":"code","6dacbf3c":"code","cd1270a5":"code","0d7526cb":"code","77a884ec":"code","d7307aaf":"code","1e9798df":"code","bf2ac179":"code","48e28eb3":"code","94d481f8":"code","3f926361":"code","b96dbb6e":"code","4d19fa33":"code","fcd1dc09":"code","569026af":"code","b0959a4a":"code","5dbb8333":"code","b27c951f":"markdown","b8850f8b":"markdown","28d9de59":"markdown","7ad457ce":"markdown","7ac0d2d7":"markdown","297c5d2f":"markdown","8b03ca88":"markdown","728b3a0a":"markdown","99455d76":"markdown","7a8c40c1":"markdown","48e235ef":"markdown","1ce992aa":"markdown","6519f07c":"markdown","5c054c97":"markdown","383b44b2":"markdown","b05dff96":"markdown","c696b52b":"markdown","1a15511d":"markdown","72961474":"markdown","0dcc7e7e":"markdown","6d42e452":"markdown","f6d44b5c":"markdown","77d8fb52":"markdown","f0a42c9b":"markdown","fa552282":"markdown","90bd736b":"markdown","7bef8973":"markdown","c2a46503":"markdown","bada974a":"markdown"},"source":{"8ca4e386":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","bff1b9fd":"data = pd.read_csv(\"..\/input\/dota.csv\")","fcb071a1":"warnings.filterwarnings(\"ignore\")\nprint(\"warnings closed\")","0edba757":"data.head()","a167084b":"data.info()","d4322884":"data[\"Alignment\"].unique()","b271f2e9":"len(data[\"Alignment\"].unique())","22bbfee3":"data.corr()","9bbf8adc":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","c001a4f8":"data.columns","5b6908e8":"list1 = data['Armor']\nlist2 = data['AttackSpeed']\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","0d33e5d3":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip)\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","0c8ffc38":"data.Mana.plot(kind = 'line', color = 'g',label = 'Mana',linewidth=1,alpha = 1,grid = True,linestyle = ':')\ndata.Health.plot(color = 'r',label = 'Health',linewidth=1, alpha = 1,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')\nplt.xlabel('Mana')             \nplt.ylabel('Health')\nplt.title('Mana - Health \/ Line Plot')          \nplt.show()","dbb30126":"data.plot(kind='scatter', x='Damage', y='Range',alpha = 1,color = 'red')\nplt.xlabel('Damage')    \nplt.ylabel('Range')\nplt.title('Damage - Range') ","df4636fc":"data.Range.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","d55d2bcd":"x = data['MovementSpeed']<295\ndata[x]","3956bb1d":"data[(data['Health']>500) & (data['Damage']>55)]","2540cba6":"first_filter = data.Mana > 230\nsecond_filter = data.Damage > 55\ndata[first_filter & second_filter]","150efa2e":"threshold = sum(data.Mana)\/len(data.Damage)\ndata[\"mana_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Mana]\ndata.loc[:10,[\"mana_level\",\"Mana\"]]","fc1249f1":"data[[\"Mana\",\"Damage\"]]","6dacbf3c":"def div(n):\n    return n\/4\ndata.Mana.apply(div)","cd1270a5":"sns.lmplot(x='Health', y='Mana', data=data)","0d7526cb":"for index,value in data[['AttackSpeed']][0:7].iterrows():\n    print(index,\" : \",value)","77a884ec":"sns.swarmplot(x='Type', y='Health', data=data)","d7307aaf":"sns.swarmplot(x='MovementSpeed', y='Range', data=data, palette='Set2')","1e9798df":"plt.figure(figsize=(10,6))\nsns.violinplot(x='Type',y='Health', data=data, inner=None)\nsns.swarmplot(x='Type', y='Health', data=data, color='k', alpha=0.7) \nplt.title('Health by Type')","bf2ac179":"sns.pairplot(data, hue = 'Alignment')","48e28eb3":"sns.distplot(data.Mana)","94d481f8":"sns.countplot(x='Type', data=data)\nplt.xticks(rotation=60)","3f926361":"name_list = list(data['Name'].unique())\nHealth = []\nMana = []\nDamage  = []\nMovementSpeed = []\nRange = []\n#Armor = []\n#MovementSpeed = []\n\nfor i in name_list:\n    x = data[data['Name']==i]\n    Health.append(sum(x.Health)\/len(x))\n    Mana.append(sum(x.Mana)\/len(x))\n    Damage.append(sum(x.Damage)\/len(x))\n    MovementSpeed.append(sum(x.MovementSpeed)\/len(x))\n    Range.append(sum(x.AttackSpeed)\/len(x))\n#    Armor.append(sum(x.Armor) \/ len(x))\n#    MovementSpeed.append(sum(x.MovementSpeed) \/ len(x))\n\n# visualization\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=Health,y=name_list,color='green',alpha = 0.5,label='Health' )\nsns.barplot(x=Mana,y=name_list,color='red',alpha = 0.7,label='Mana')\nsns.barplot(x=Damage,y=name_list,color='black',alpha = 0.6,label='Damage')\nsns.barplot(x=MovementSpeed,y=name_list,color='grey',alpha = 0.6,label='MovementSpeed')\nsns.barplot(x=Range,y=name_list,color='yellow',alpha = 0.6,label='Range')\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel='Percentage of Name', ylabel='Name',title = \"Percentage of Name's Population\")","b96dbb6e":"sns.jointplot(x=data[\"Health\"], y=data[\"Mana\"], kind='scatter')\nsns.jointplot(x=data[\"Health\"], y=data[\"Mana\"], kind='hex')\nsns.jointplot(x=data[\"Health\"], y=data[\"Mana\"], kind='kde')","4d19fa33":"plt.figure(figsize=(10,6))\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=data, palette=pal, inner=\"points\")\nplt.show()","fcd1dc09":"sns.set(style=\"white\")\ng = sns.PairGrid(data, diag_sharey=False)\ng.map_lower(sns.kdeplot)\ng.map_upper(sns.scatterplot)\ng.map_diag(sns.kdeplot, lw=3)","569026af":"labels = data.Health.value_counts().index\ncolors = ['grey','blue','red','yellow','green','brown', 'cyan', 'purple', 'orange', 'lightcoral' ]\nexplode = [0,0,0,0,0,0,0,0,0,0]\nsizes = data.Health.value_counts().values\n\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=None, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Characters Health Rate',color = 'blue',fontsize = 15)\nplt.show()","b0959a4a":"labels = 'Health', 'Mana', 'Damage', 'AttackSpeed'\nsizes = [215, 130, 245, 210]\ncolors = ['gold', 'lightskyblue', 'red', 'lightcoral']\nexplode = (0.1, 0, 0, 0) \n\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\nplt.axis('equal')\nplt.show()","5dbb8333":"sns.set()\n\nr = np.linspace(0, 10, num=100)\ndata = pd.DataFrame({'r': r, 'slow': r, 'medium': 2 * r, 'fast': 4 * r})\n\ndata = pd.melt(data, id_vars=['r'], var_name='AttackSpeed', value_name='Armor')\n\ng = sns.FacetGrid(data, col=\"AttackSpeed\", hue=\"Armor\", subplot_kws=dict(projection='polar'), height=4.5, sharex=False, sharey=False, despine=False)\n\ng.map(sns.scatterplot, \"Armor\", \"r\")\n","b27c951f":"> > **pairplot**","b8850f8b":"> > **Join Plot**","28d9de59":"****INTRODUCTION****\n\nWelcome to the Defense Of The Ancients World! The most popular game of all time : dotA all-star so i did some good analysis about its characters. You can find everything about beginner and intermediate level : Pyhton, NumPy, Pandas, Seaborn examples *I hope you can Like and Vote my dataset* \nYou can write a comment to me everything about dataset","7ad457ce":"> > **Count Plot**","7ac0d2d7":"> > **Histogram**","297c5d2f":"> > **Bar Plot**","8b03ca88":"> > **closed  warning alerts**","728b3a0a":"> > **Line plot**","99455d76":"> > **Cubelix**","7a8c40c1":"> >  **Know your data about with info() ** ","48e235ef":"> > **Check your first 5 items with head() ** ","1ce992aa":"> > **Look yours data's Alignment.Unique items length like that** ","6519f07c":"> > **Seaborn visualization parts**","5c054c97":"> > **Look yours data's Alignment.Unique items  with unique() ** ","383b44b2":"> > **zipped  armor and attackspeed**","b05dff96":" **REFERENCES**\n\n1.**About Dota_Heroes Datas** : dota.wikia.com\/wiki\/Dota_Heroes\n\n2.**Seborn Charts** : seaborn.pydata.org\/examples\n\n3.**The Ultimate Python Seaborn Tutorial: Gotta Catch \u2018Em All** : elitedatascience.com\/python-seaborn-tutorial","c696b52b":"> > **scatter plot**","1a15511d":"**here, just selected some columns**","72961474":"> > **why divided mana's to 4 ? cause need to check how many times later i should to refresh my mana pot**","0dcc7e7e":"> > **Filters**","6d42e452":"> > **Pie Plot**","f6d44b5c":"> > **unzipped  armor and attackspeed**","77d8fb52":"> >**Check yours data's correlation table and map** ","f0a42c9b":"> > **FacetGrid**","fa552282":"> > **Paired density and scatterplot**","90bd736b":">> > ****Now we're starting to check our data's plots\n**** firstly we check columns..","7bef8973":"> > **distplot**","c2a46503":"****Data Overview ****\n\nAs you see below, firstly i closed warning alerts.. then checked first 5 items of data..","bada974a":"> > **# Swarm plot with Char color palette**"}}