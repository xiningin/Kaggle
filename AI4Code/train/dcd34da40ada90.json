{"cell_type":{"cc0121d8":"code","7328c0cc":"markdown"},"source":{"cc0121d8":"#imports \nimport numpy as np\n\n# generate a 10 x 10 identity matrix A\nA = np.identity(10)\nprint('(a) Identity matrix A:')\nprint(A)\n\n# Change all elements in 7th column of A to 8\nA[:, 6] = 8\nprint('\\n(b) Change elements of 7th column of A to 8')\nprint(A)\n\n# Sum all elements in a matrix\nsum = 0\nfor i in range(A.shape[0]):\n  for j in range(A.shape[1]):\n    sum += A[i][j]\nprint('\\n(c) sum all matrices')\nprint(sum)\n\n# Transpose the matrix\n# A = A.transpose()\n# A\n\n# Transpose the matrix\nA_transpose = np.zeros((10, 10))\nfor i in range(A.shape[0]):\n  for j in range(A.shape[1]):\n    A_transpose[j][i] = A[i][j]\nA = A_transpose\nprint('\\n(d) Transpose of A')\nprint(A)\n\n# Calculate sum of 1st row in the matrix A\nsum_1st_row = A.sum(axis=1)\nprint('\\n (e) sum of 1st row in the matrix A')\nprint(sum_1st_row[0])\n\n# Calculate sum of the diagonal in the matrix A\n# sum_diagonal = A.trace()\n# sum_diagonal\n\n# Calculate sum of the diagonal in the matrix A\nsum_diagonal = 0\nfor i in range(A.shape[0]):\n  sum_diagonal += A[i][i]\nprint('(e) sum of the diagonal in the matrix A')\nprint(sum_diagonal)\n\n# Calculate sum of 2nd column in the matrix A\nsum_2nd_column = A.sum(axis=0)\nprint('(e) sum of 2nd column in the matrix A')\nprint(sum_2nd_column[1])\n\n# Generate 10 x 10 matrix B following Gaussian Distribution with mean 12 and variance pi=3.14\nB = np.random.normal(12, pow(np.pi, 0.5), (10,10))\nprint('\\n(f) Matrix B following Gaussian Distribution with mean 12 and variance pi=3.14')\nprint(B)\n\n# From A and B, use matrix operations to get a new 3\u00d710 matrix C such that, \n# the first row of C is equal to the 1st row of B times the 8th row of A minus the 3rd column of B, \n# the second row of C is equal to the 4th row of A minus the 7th column of B, \n# and the third row of C is equal to the sum of the 10th column of A and 1st row of B.\nprint('\\n(g) matrix operations to get new C from A and B')\nC = np.zeros((3,10))\nC[0] = B[0] * A[7] - B[:, 2]\nC[1] = A[3] - B[:, 6]\nC[2] = A[:, 9] + B[0]\nprint(C)\n\n# From C, using one matrix operation to get a new matrix D such that, the first\n# column of D is equal to the first column of C times 3, \n# the second column of D is equal to the second column of C times 4 and so on.\n# D = np.column_stack((3 * C[:, 0], 4 * C[:, 1], 5 * C[:, 2], 6 * C[:, 3], \n#                      7 * C[:, 4], 8 * C[:, 5], 9 * C[:, 6], 10 * C[:, 7], \n#                      11 * C[:, 8], 12 * C[:, 9]))\n# print(D)\n\n# From C, using one matrix operation to get a new matrix D such that, the first \n# column of D is equal to the first column of C times 3, \n# the second column of D is equal to the second column of C times 4 and so on.\nprint('\\n(h) Get a new matrix D from C')\nD = np.zeros((3, 10))\nfor i in range(C.shape[1]):\n  D[:, i] = (i+3) * C[:, i]\nprint(D)\n\n# X, Y, Z, M, N, P are 4 x 1 matrices. Compute their covariance matrix.\nX = np.array([2, 0, 2, 0])\nY = np.array([9, 8, 4, 3])\nZ = np.array([7, 1, 7, 9])\nM = np.array([6, 4, 8, 2])\nN = np.array([5, 4, 9, 3])\nP = np.array([1, 5, 2, 4])\nprint('\\n(i) Covariance matrix of X, Y, Z, M, N, P')\ndata = np.array([X, Y, Z, M, N, P])\ndata_cov = np.cov(data)\nprint(data_cov)\n\n# Compute Pearson coefficient of X and Y\npearson_coefficient = np.corrcoef(X, Y)\nprint('(i) Pearson Coefficient of X and Y')\nprint(pearson_coefficient[0][1])\n\nprint('\\n(j) Equation for population standard deviation')\nX = np.array([19, 12, 16, 6, 11, 27, 1, 29])\npopulation_std = np.std(X)\nprint('Population standard deviation: ' + str(population_std))\n\nX_square = np.square(X)\nX_square_mean = np.mean(X_square)\nprint('LHS of the equation: ' + str(X_square_mean))\n\nX_mean = np.mean(X)\nX_mean_square = pow(X_mean, 2)\n\npopulation_variance = pow(population_std, 2)\npopulation_rhs = X_mean_square + population_variance\nprint('RHS of the equation: ' + str(population_rhs))\nprint('As LHS = RHS, the equation holds true for population standard deviation')\n\nprint('\\n(j) Equation for sample standard deviation')\nX = np.array([19, 12, 16, 6, 11, 27, 1, 29])\nsample_std = np.std(X, ddof=1)\nprint('Sample standard deviation: ' + str(sample_std))\n\nX_square = np.square(X)\nX_square_mean = np.mean(X_square)\nprint('LHS of the equation: ' + str(X_square_mean))\n\nX_mean = np.mean(X)\nX_mean_square = pow(X_mean, 2)\n\nsample_variance = pow(sample_std, 2)\nsample_rhs = X_mean_square + sample_variance\nprint('RHS of the equation: ' + str(sample_rhs))\nprint('As LHS = RHS, the equation doen not hold true for sample standard deviation')","7328c0cc":"I have created this notebook to study the matrix operations using Numpy and using regular iterations. Even though libraries are available, deeper understasing of Matrices is really important. "}}