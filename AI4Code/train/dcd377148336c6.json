{"cell_type":{"39ea13ca":"code","f9b24f31":"code","5c352783":"code","14602f05":"code","d0626214":"code","62ab5db2":"code","dd9c59a4":"code","31aba649":"code","eb305102":"code","f024a07e":"code","7568cbb3":"code","daa95cec":"code","d870218a":"markdown","945d2e5c":"markdown","8b7f18e5":"markdown","1f8fcf49":"markdown","f0df3bfa":"markdown","17e8f7ea":"markdown","d49713d6":"markdown","20216fc4":"markdown","7ed6b40e":"markdown","5c7efe33":"markdown","0f6f6986":"markdown","5b114170":"markdown","09d63e56":"markdown"},"source":{"39ea13ca":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import LearningRateScheduler","f9b24f31":"batch_size = 86\nnum_nets = 15","5c352783":"digits_train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ndigits_test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","14602f05":"print(digits_train.columns)","d0626214":"X = digits_train.drop(columns=\"label\").values.reshape(digits_train.shape[0],28,28,1) \/ 255.0\nY = to_categorical(digits_train[\"label\"], num_classes=10)\nX_test = digits_test.values.reshape(digits_test.shape[0],28,28,1) \/ 255.0","62ab5db2":"plt.figure(figsize=(15, 4.5))\nfor i in range(30):\n    plt.subplot(3, 10, i+1)\n    plt.imshow(X[i].reshape((28,28)), cmap=plt.cm.binary)\n    plt.axis(\"off\")\nplt.subplots_adjust(wspace=-0.1, hspace=-0.1)\nplt.show()","dd9c59a4":"datagen_train = ImageDataGenerator(\n    rotation_range = 10,\n    zoom_range = 0.10,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)","31aba649":"X_ = X[9,].reshape((1,28,28,1))\nY_ = Y[9,].reshape((1,10))\n\n\nplt.figure(figsize=(15,4.5))\nfor i in range(30):  \n    plt.subplot(3, 10, i+1)\n    X_generated, Y_generated = datagen_train.flow(X_,Y_).next()\n    plt.imshow(X_generated[0].reshape((28,28)),cmap=plt.cm.binary)\n    plt.axis('off')\n    if i==9: X_ = X[11,].reshape((1,28,28,1))\n    if i==19: X_ = X[18,].reshape((1,28,28,1))\nplt.subplots_adjust(wspace=-0.1, hspace=-0.1)\nplt.show()","eb305102":"model = [0] * num_nets\nfor j in range(num_nets):\n    model[j] = Sequential()\n    \n    model[j].add(Conv2D(32, kernel_size = 3, activation = \"relu\", input_shape = (28, 28, 1)))\n    model[j].add(BatchNormalization())\n    model[j].add(Conv2D(32, kernel_size = 3, activation = \"relu\"))\n    model[j].add(BatchNormalization())\n    model[j].add(Conv2D(32, kernel_size = 5, strides = 2, padding = \"same\", activation = \"relu\"))\n    model[j].add(BatchNormalization())\n    model[j].add(Dropout(0.4))\n    \n    model[j].add(Conv2D(64, kernel_size = 3, activation = \"relu\"))\n    model[j].add(BatchNormalization())\n    model[j].add(Conv2D(64, kernel_size = 3, activation = \"relu\"))\n    model[j].add(BatchNormalization())\n    model[j].add(Conv2D(64, kernel_size = 5, strides = 2, padding = \"same\", activation = \"relu\"))\n    model[j].add(BatchNormalization())\n    model[j].add(Dropout(0.4))\n    \n    model[j].add(Conv2D(128, kernel_size = 4, activation = \"relu\"))\n    model[j].add(BatchNormalization())\n    model[j].add(Flatten())\n    model[j].add(Dropout(0.4))\n    model[j].add(Dense(10, activation = \"softmax\"))\n    \n    \n    model[j].compile(optimizer = \"adam\", loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","f024a07e":"annealer = LearningRateScheduler(lambda x: 1e-3 * 0.95 ** x)\nhistory = [0] * num_nets\nepochs = 45\nfor j in range(num_nets):\n    x_train, x_val, y_train, y_val = train_test_split(X, Y, test_size = 0.1)\n    history[j] = model[j].fit_generator(datagen_train.flow(x_train, y_train, batch_size = 64),\n                                       epochs = epochs, \n                                       steps_per_epoch = x_train.shape[0] \/\/ 64,\n                                       validation_data = (x_val, y_val), \n                                       callbacks = [annealer],\n                                       verbose = 0)\n    print(\"CNN {0:d}: Epochs={1:d}, Train accuracy={2:.5f}, Validation accuracy={3:.5f}\".format(\n        j+1,epochs,max(history[j].history['accuracy']),max(history[j].history['val_accuracy']) ))","7568cbb3":"# PREDICTIONS AND SUBMIT\nresults = np.zeros((X_test.shape[0], 10))\nfor j in range(num_nets):\n    results = results + model[j].predict(X_test)\nresults = np.argmax(results, axis = 1)\nresults = pd.Series(results, name = \"Label\")\nsubmission = pd.concat([pd.Series(range(1, 28001), name = \"ImageId\"), results], axis = 1)\nsubmission.ImageId = submission.ImageId.astype(int)\nsubmission.to_csv(\"prediction.csv\", index = False)","daa95cec":"plt.figure(figsize=(15,6))\nfor i in range(40):  \n    plt.subplot(4, 10, i+1)\n    plt.imshow(X_test[i].reshape((28,28)),cmap=plt.cm.binary)\n    plt.title(results[i],y=0.95)\n    plt.axis('off')\nplt.subplots_adjust(wspace=0.3, hspace=-0.1)\nplt.show()","d870218a":"# Import libraries","945d2e5c":"# Ensemble CNNs predictions and submit","8b7f18e5":"Plot some generated images","1f8fcf49":"# Train CNNs","f0df3bfa":"# Build CNNs Model","17e8f7ea":"# Data exploration\nColumns","d49713d6":"Show Image This is how 784 pixels of each row form to be images","20216fc4":"Preview predictions","7ed6b40e":"# Generate more images\nBy randomly rotating, scaling, and shifting ","5c7efe33":"Setting batch size for training data and number of CNNs","0f6f6986":"# Imoport data\nData input train and test data","5b114170":"We create Features (X) variable and Labels (Y) variable, reshaped X and normalize X to be in a range [0,1] (the same with our data to submit (X_test))   ","09d63e56":"We can see that data have label and other pixels columns. Which label present the digit and pixel present pixel of image"}}