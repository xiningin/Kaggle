{"cell_type":{"675bf418":"code","daf0b391":"code","8bd02395":"code","47313863":"code","2878ea1e":"code","4002464e":"code","867de5bf":"code","bfd1c54e":"code","5e9c16b9":"code","1fd50532":"code","b778a67c":"code","39c2004e":"code","e8ffad16":"code","eb9c6d0f":"code","e62a2042":"code","009ddfd3":"code","dcb712c7":"code","eced1ff6":"code","0798e6e9":"markdown","9f6f03c5":"markdown"},"source":{"675bf418":"# Basic Data Preprocessing\nimport numpy as np\nimport pandas as pd \n\n# Data Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\n# Data Preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\n\n\n#Modelling\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n\n#\nfrom sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay,accuracy_score\nfrom sklearn import metrics","daf0b391":"# Reading Test and Train data \n# Dropping ID column\ntrain_df= pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/train.csv').iloc[:,1:]\ntest_df= pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/test.csv')","8bd02395":"# Find Different types of column data types\ntrain_df.dtypes.unique()","47313863":"# Display first 5 rows\ntrain_df.describe(include='all')","2878ea1e":"# Create new DF without ID column from scoring dataset\ntest_df_X = test_df.iloc[:,1:]\n# Create DF of ID column to be used later while submission\ntest_df_id = test_df.iloc[:,:1]","4002464e":"# Shape of train dataframe\ntrain_df.shape, test_df.shape","867de5bf":"# Check for Null values\ntrain_df.isnull().values.sum(), test_df.isnull().values.sum()","bfd1c54e":"# Seperate target from Train Dataset\ntrain_df_Y = train_df.target\ntrain_df_X = train_df.iloc[:,:285]\n\n# Find categorical and continuous variables\ncategorical_variables_train = train_df_X.select_dtypes(\"int64\")\ncontinuous_variables_train = train_df_X.select_dtypes(\"float64\")","5e9c16b9":"# Scale and transform dataset\ndef data_scaler_fit(option,df):\n    if option == 1:\n        transformer = StandardScaler().fit(df)\n    if option == 2 :\n        transformer = RobustScaler().fit(df)\n    return transformer","1fd50532":"transformer = data_scaler_fit(1,continuous_variables_train)","b778a67c":"train_df_X = np.concatenate([transformer.transform(continuous_variables_train),categorical_variables_train.to_numpy()],axis=1)\ntest_df_X = np.concatenate([transformer.transform(test_df_X[continuous_variables_train.columns]),test_df_X[categorical_variables_train.columns].to_numpy()],axis=1)\n\n# Divide into train and test\nX_train, X_test, y_train, y_test = train_test_split(train_df_X, train_df_Y, test_size=0.30, random_state=45)","39c2004e":"# Define Different training Models\ndef training_models(model_type,X_train,y_train):\n    # Stochastic Gradient Descent\n    if model_type == 'SGD':\n        model = SGDClassifier(loss=\"log\", penalty=\"l2\", max_iter=100)\n    \n    # Multi-layer Perceptron\n    if model_type == 'MLP':\n        model = MLPClassifier(alpha=1e-5,learning_rate = 'adaptive',warm_start=True,early_stopping = True,\n                              max_iter=300,random_state=1)\n    # Decision Tree\n    if model_type == 'DTC':\n        model = DecisionTreeClassifier(max_depth = 10,max_features = 'auto', random_state = 1)\n        \n    # Random Forest\n    if model_type == 'RFC':\n        model = RandomForestClassifier(max_depth = 10, warm_start=True,random_state = 1)\n    \n    model.fit(X_train, y_train)\n    return model","e8ffad16":"model = training_models('MLP',X_train,y_train.to_numpy())","eb9c6d0f":"target_predict = pd.DataFrame(model.predict(X_test),columns = ['pred_target'])","e62a2042":"conf_metrix = confusion_matrix(y_test,target_predict.to_numpy(), labels=model.classes_ , normalize= 'true')\ndisp = ConfusionMatrixDisplay(confusion_matrix = conf_metrix ,display_labels=model.classes_)\ndisp.plot()\nplt.show()","009ddfd3":"print('Accuracy: '+ str(accuracy_score(y_test,target_predict.to_numpy()) * 100) + '%')","dcb712c7":"# Predict on actual test dataset\nprobability = pd.DataFrame(model.predict(test_df_X),columns = ['target'])","eced1ff6":"# Submit Predictions\nsubmission = pd.concat([test_df_id,probability],axis = 1)\nsubmission.to_csv('submission.csv',index=False)","0798e6e9":"### Predict and Submit to leaderboard","9f6f03c5":"## Tabular Playground - October 2021\n> Models Based on [Sklearn](https:\/\/scikit-learn.org\/stable\/user_guide.html) python package"}}