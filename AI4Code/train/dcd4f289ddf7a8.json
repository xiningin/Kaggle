{"cell_type":{"6239e172":"code","08186fbd":"code","db3f2807":"code","4399b229":"code","3f7519c2":"code","e413fc8a":"code","4b077923":"code","dadfa86a":"code","23aacaa2":"code","d98c161b":"code","ff3bdce0":"code","d555a412":"code","77e1806f":"code","3d7b8c44":"code","28f356ca":"code","3c75dee2":"code","d2897f76":"code","600c24e5":"code","655a1b97":"code","e4072f2b":"code","76cc89fd":"code","7a5dfea8":"code","30366c30":"code","8b85bb0d":"code","3e4e508e":"code","40182162":"code","0e2ccadf":"code","19b1af05":"code","e8dd6f55":"code","4b333077":"code","cb96277c":"code","98c129d8":"code","544002d4":"code","ef31cb2c":"code","a3bb371d":"code","a6ef45ff":"code","d83beeb7":"code","f45ea7c6":"markdown","3bd0d99f":"markdown","82873b21":"markdown","945971ff":"markdown","1f0ecc32":"markdown","e5236127":"markdown","fdcd2fc3":"markdown"},"source":{"6239e172":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","08186fbd":"import matplotlib.pyplot as plt  #importing the necessary libraries\nimport seaborn as sns\n%matplotlib inline","db3f2807":"google_data = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')  #read the csv file\n","4399b229":"google_data.head()  #inspecting first 5 rows","3f7519c2":"google_data.tail() #last 5 rows","e413fc8a":"type(google_data) #type of data","4b077923":"google_data.shape  #orientation of data","dadfa86a":"google_data.describe() #Gives only one column, because only rating is numerical, rest all are categorical","23aacaa2":"google_data.boxplot()","d98c161b":"google_data.hist()","ff3bdce0":"google_data.info()","d555a412":"google_data.isnull()","77e1806f":"google_data.isnull().sum()","3d7b8c44":"google_data[google_data.Rating > 5]","28f356ca":"google_data.drop([10472], inplace = True)\n","3c75dee2":"google_data[10470: 10475]","d2897f76":" google_data.boxplot() #Most of the data is focussed from 4 to 4.5","600c24e5":"google_data.hist()","655a1b97":"threshold = len(google_data) * 0.1\nthreshold","e4072f2b":"print(google_data.isnull().sum())","76cc89fd":"google_data.shape #In this dataset, it remains the same ","7a5dfea8":"def impute_median(series): #series means -> a column\n    return series.fillna(series.median())","30366c30":" google_data.Rating = google_data['Rating'].transform(impute_median) #for each value in rating column, we are calling the impute_median function (passing each value to the function)","8b85bb0d":"google_data.isnull().sum()","3e4e508e":"print(google_data['Type'].mode())\nprint(google_data['Current Ver'].mode())\nprint(google_data['Android Ver'].mode())","40182162":"google_data['Type'].fillna(str(google_data['Type'].mode().values[0]), inplace = True)\ngoogle_data['Current Ver'].fillna(str(google_data['Current Ver'].mode().values[0]), inplace = True)\ngoogle_data['Android Ver'].fillna(str(google_data['Android Ver'].mode().values[0]), inplace = True)\n                                  ","0e2ccadf":"google_data.isnull().sum()","19b1af05":"google_data['Price'] = google_data['Price'].apply(lambda x: str(x).replace('$', '') if '$' in str(x) else str(x))\ngoogle_data['Price'] = google_data['Price'].apply(lambda x: float(x)) \ngoogle_data['Reviews'] = pd.to_numeric(google_data['Reviews'], errors = 'coerce') #coerce ignores the errors","e8dd6f55":"google_data['Installs'] = google_data['Installs'].apply(lambda x: str(x).replace('+', '') if '+' in str(x) else str(x))\ngoogle_data['Installs'] = google_data['Installs'].apply(lambda x: str(x).replace(',', '') if ',' in str(x) else str(x))\ngoogle_data['Installs'] = google_data['Installs'].apply(lambda x: float(x))","4b333077":"google_data.head(10)","cb96277c":"google_data.describe()","98c129d8":"grp = google_data.groupby('Category') #Grouping apps based on cateory\nx = grp['Rating'].agg(np.mean)  #agg=> aggregate, jus combines everything\ny = grp['Price'].agg(np.sum)\nz = grp['Reviews'].agg(np.mean)\nprint(x)\n","544002d4":"print(y)","ef31cb2c":"print(z)","a3bb371d":"plt.figure(figsize = (15, 7))\nplt.plot(x, 'ro')\nplt.xticks(rotation = 90) #making the x label texts vertical\nplt.title('Category wise rating')\nplt.xlabel('Categories')\nplt.ylabel('Rating')\nplt.show()\n","a6ef45ff":"plt.figure(figsize = (15,7))\nplt.plot(y, 'b--')\nplt.xticks(rotation = 90)\nplt.title('Category wise pricing')\nplt.xlabel('Categories')\nplt.ylabel('Prices')\nplt.show()","d83beeb7":"plt.figure(figsize = (15,6))\nplt.plot(z, 'g^')\nplt.xticks(rotation = 90)\nplt.xlabel('Categories')\nplt.ylabel('Reviews')\nplt.title('Category wise Reviews')\nplt.show()\n\n","f45ea7c6":"Load the csv file","3bd0d99f":"We are removing the columns that doesn't have even 1084 (or) threshold level or 10% of the overall data filled","82873b21":"Check the mode for the filling the missing values in the categorical columns","945971ff":"Data Visualization","1f0ecc32":"**Data Imputaion and Manipulation**\n\nFor categorical values, we are using mode and for numerical values we are using median and not mean, because based on the histogram, we can understand that the data is right skewed. \n\n1. Right and left skewed data -> we will use median and not mode","e5236127":"If for some dataset, 90% of the columns are empty, we just take 10% of data out of it","fdcd2fc3":"Index[0] because, we will be using the first mode value in case there are any bi-moded values"}}