{"cell_type":{"4ada245e":"code","a646dc1d":"code","968c951b":"code","1c42fe00":"code","89ca5e74":"code","a9c08dc0":"code","a4a4c0fb":"code","4cf862e8":"code","7a68510c":"code","0669cc96":"code","3a362106":"code","0fc501d1":"code","269fc1ca":"code","ab078e15":"code","05562994":"code","b4c30235":"code","eb53d3ce":"code","35ee5a8d":"code","b9a6fd30":"code","412399f3":"code","b3e81a46":"code","df772922":"code","f7021724":"code","833ba5ac":"code","8467e6e3":"code","fb7d4e83":"code","9af944ce":"code","db1474d1":"code","198015fc":"code","0beecfe5":"code","2cb7f78e":"code","258f177b":"code","49e56e73":"code","d7ec81f8":"code","24d94058":"code","7a2b72fa":"code","341735f2":"code","40356200":"code","d0e2292d":"code","528fc222":"code","e4b93779":"code","f2385759":"code","ae101e87":"code","ce098f33":"code","3aeeceb6":"code","8ae48037":"code","3848d7c8":"code","10312e2d":"code","f8737ba2":"code","099673a8":"code","c165deb4":"code","2f76a52f":"code","639b0e66":"code","a0a387f0":"code","5194ce7a":"code","18c03fea":"code","dd614b65":"code","7680c5f3":"code","5cf256b9":"code","a232b7fc":"code","02ba3008":"code","43776324":"code","7e90b4ac":"code","9a71bff8":"code","2b4e981c":"code","b86936d8":"code","ea13c56f":"code","e486357e":"code","6a74c911":"code","96122f61":"code","f61aa992":"code","4d463172":"code","5b4b17ba":"code","ced334fc":"code","9bd56c9e":"code","e2513b75":"code","998522ce":"code","f194d1d5":"code","2a65f1ba":"code","dc1800b8":"markdown","95bf29fb":"markdown","fc793411":"markdown","974613ff":"markdown","6b5c2bc5":"markdown","fcab6809":"markdown","b78c71bd":"markdown","c81e7d26":"markdown","2220a512":"markdown","f11bfc71":"markdown","96b54993":"markdown","2a72bb6e":"markdown","a36763af":"markdown","e6240c7a":"markdown","a8642553":"markdown","b5b4e947":"markdown","d0f76566":"markdown","3fc5da61":"markdown","0d0c4697":"markdown","25d448c9":"markdown","15577a76":"markdown","5e97bf8f":"markdown","7c11dcde":"markdown","8649dcdc":"markdown","6ff254e5":"markdown","caadc9f5":"markdown","7c879492":"markdown","7abd3d45":"markdown","65a934fb":"markdown","6a4bcf85":"markdown","30178b67":"markdown"},"source":{"4ada245e":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.","a646dc1d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud\n%matplotlib inline","968c951b":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom collections import OrderedDict","1c42fe00":"# Load dataset\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","89ca5e74":"train.shape, test.shape","a9c08dc0":"train.head()","a4a4c0fb":"test.head()","4cf862e8":"train.info()","7a68510c":"train.nunique()","0669cc96":"train['revenue'].describe()","3a362106":"train['budget'].describe()","0fc501d1":"train.plot.scatter('budget','revenue')","269fc1ca":"# top ten movies with the costliest budgets.\nbudget = train.sort_values(by='budget', ascending=False)\nprint((budget.loc[:, \"budget\"]).head(10))","ab078e15":"# Top ten movies with the highet revenue\nrevenue = train.sort_values(by='revenue', ascending=False)\nprint(\"Top ten movies with the highet revenue\\n\")\nprint((revenue.loc[:,\"revenue\"]).head(10))","05562994":"#first removing features which are irrelevant for our prediction\ntrain.drop(['imdb_id','poster_path'],axis=1,inplace=True)\ntest.drop(['imdb_id','poster_path'],axis=1,inplace=True)","b4c30235":"#we have a lot of null values for homepage\n#Converting homepage as binary\ntrain['has_homepage'] = 0\ntrain.loc[train['homepage'].isnull() == False, 'has_homepage'] = 1\ntest['has_homepage'] = 0\ntest.loc[test['homepage'].isnull() == False, 'has_homepage'] = 1\n\n#Homepage v\/s Revenue\nsns.catplot(x='has_homepage', y='revenue', data=train);\nplt.title('Movies revenues with and without homepage');","eb53d3ce":"train = train.drop(['homepage'],axis =1)\ntest = test.drop(['homepage'],axis =1)","35ee5a8d":"#Converting collections as binary\ntrain['collection'] = 0\ntrain.loc[train['belongs_to_collection'].isnull() == False, 'collection'] = 1\ntest['collection'] = 0\ntest.loc[test['belongs_to_collection'].isnull() == False, 'collection'] = 1\n\n#collections v\/s Revenue\nsns.catplot(x='collection', y='revenue', data=train);\nplt.title('Movies Revenue with and without collection');","b9a6fd30":"#Collection too increaes the revenue\ntrain=train.drop(['belongs_to_collection'],axis =1)\ntest=test.drop(['belongs_to_collection'],axis =1)","412399f3":"fig, ax = plt.subplots(figsize=(15, 15))\nax.tick_params(axis='both', labelsize=12)\nplt.title('Original Language and Revenue', fontsize=20)\nplt.xlabel('Revenue', fontsize=16)\nplt.ylabel('Original Language', fontsize=16)\nsns.boxplot(ax=ax, x='revenue', y='original_language', data=train, showfliers=False, orient='h')\nplt.show()","b3e81a46":"#How language contributes to revenue\nplt.figure(figsize=(15,11)) #figure size\n\n#It's another way to plot our data. using a variable that contains the plot parameters\ng1 = sns.boxenplot(x='original_language', y='revenue', \n                   data=train[(train['original_language'].isin((train['original_language'].sort_values().value_counts()[:10].index.values)))])\ng1.set_title(\"Revenue by language\", fontsize=20) # title and fontsize\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45) # It's the way to rotate the xticks when we use variable to our graphs\ng1.set_xlabel('Language', fontsize=18) # Xlabel\ng1.set_ylabel('Revenue', fontsize=18) #Ylabel\n\nplt.show()","df772922":"plt.figure(figsize = (12, 8))\ntext = ' '.join(train['original_language'])\nwordcloud = WordCloud(max_font_size=None, background_color='white', collocations=False,\n                      width=1200, height=800).generate(text)\nplt.imshow(wordcloud)\nplt.title('Top Languages', fontsize=20)\nplt.axis(\"off\")\nplt.show()","f7021724":"#Taking only en and zh into consideration as they are the highest grossing\ntrain['original_language'] = train['original_language'].apply(lambda x: 1 if x=='en' else(2 if x=='zh' else 0))\ntest['original_language'] = test['original_language'].apply(lambda x: 1 if x=='en' else(2 if x=='zh' else 0))","833ba5ac":"genres = []\nrepeated_revenues = []\nfor i in range(len(train)):\n  if train['genres'][i] == train['genres'][i]:\n      movie_genre = [genre['name'] for genre in eval(train['genres'][i])]\n      genres.extend(movie_genre)\n      repeated_revenues.extend([train['revenue'][i]]*len(movie_genre))\n  \ngenre = pd.DataFrame(np.zeros((len(genres), 2)))\ngenre.columns = ['genre', 'revenue']\ngenre['genre'] = genres\ngenre['revenue'] = repeated_revenues","8467e6e3":"fig, ax = plt.subplots(figsize=(15, 15))\nax.tick_params(axis='both', labelsize=12)\nplt.title('Genres and Revenue', fontsize=20)\nplt.xlabel('revenue', fontsize=16)\nplt.ylabel('genre', fontsize=16)\nsns.boxplot(ax=ax, x=repeated_revenues, y=genres, showfliers=False, orient='h')\nplt.show()","fb7d4e83":"#adding number of genres for each movie\ngenres_count=[]\nfor i in train['genres']:\n    if(not(pd.isnull(i))):\n        \n        genres_count.append(len(eval(i)))\n        \n    else:\n        genres_count.append(0)\ntrain['num_genres'] = genres_count","9af944ce":"#Genres v\/s revenue\nsns.catplot(x='num_genres', y='revenue', data=train);\nplt.title('Revenue for different number of genres in the film');","db1474d1":"plt.figure(figsize = (12, 8))\ntext = ' '.join(genres)\nwordcloud = WordCloud(max_font_size=None, background_color='white', collocations=False,\n                      width=1200, height=800).generate(text)\nplt.imshow(wordcloud)\nplt.title('Top Genres', fontsize=30)\nplt.axis(\"off\")\nplt.show()","198015fc":"#Adding genres count for test data\ngenres_count_test=[]\nfor i in test['genres']:\n    if(not(pd.isnull(i))):\n        \n        genres_count_test.append(len(eval(i)))\n        \n    else:\n        genres_count_test.append(0)\ntest['num_genres'] = genres_count_test","0beecfe5":"#Dropping genres\ntrain.drop(['genres'],axis=1, inplace = True)\ntest.drop(['genres'],axis=1, inplace = True)","2cb7f78e":"#Adding production_companies count for data\nprod_comp_count=[]\nfor i in train['production_companies']:\n    if(not(pd.isnull(i))):\n        \n        prod_comp_count.append(len(eval(i)))\n        \n    else:\n        prod_comp_count.append(0)\ntrain['num_prod_companies'] = prod_comp_count","258f177b":"#number of prod companies vs revenue\nsns.catplot(x='num_prod_companies', y='revenue', data=train)\nplt.title('Revenue for different number of production companies in the film')\n","49e56e73":"#Adding production_companies count for  test data\nprod_comp_count_test=[]\nfor i in test['production_companies']:\n    if(not(pd.isnull(i))):\n        \n        prod_comp_count_test.append(len(eval(i)))\n        \n    else:\n        prod_comp_count_test.append(0)\ntest['num_prod_companies'] = prod_comp_count_test","d7ec81f8":"#number of prod companies vs revenue\nsns.catplot(x='num_prod_companies', y='revenue', data=train);\nplt.title('Revenue for different number of production companies in the film');","24d94058":"#Dropping production_companies\ntrain.drop(['production_companies'],axis=1, inplace = True)\ntest.drop(['production_companies'],axis=1, inplace = True)","7a2b72fa":"#Adding production_countries count for  data\nprod_coun_count=[]\nfor i in train['production_countries']:\n    if(not(pd.isnull(i))):\n        \n        prod_coun_count.append(len(eval(i)))\n        \n    else:\n        prod_coun_count.append(0)\ntrain['num_prod_countries'] = prod_coun_count","341735f2":"#number of prod countries vs revenue\nsns.catplot(x='num_prod_countries', y='revenue', data=train);\nplt.title('Revenue for different number of production countries in the film');","40356200":"#Adding production_countries count for  test data\nprod_coun_count_test=[]\nfor i in test['production_countries']:\n    if(not(pd.isnull(i))):\n        \n        prod_coun_count_test.append(len(eval(i)))\n        \n    else:\n        prod_coun_count_test.append(0)\ntest['num_prod_countries'] = prod_coun_count_test","d0e2292d":"#Dropping production_countries\ntrain.drop(['production_countries'],axis=1, inplace = True)\ntest.drop(['production_countries'],axis=1, inplace = True)","528fc222":"#handling overview\n#mapping overview present to 1 and nulls to 0\ntrain['overview']=train['overview'].apply(lambda x: 0 if pd.isnull(x) else 1)\ntest['overview']=test['overview'].apply(lambda x: 0 if pd.isnull(x) else 1)\nsns.catplot(x='overview', y='revenue', data=train);\nplt.title('Revenue for film with and without overview');","e4b93779":"train = train.drop(['overview'],axis=1)\ntest = test.drop(['overview'],axis=1)","f2385759":"#cast\n#Adding cast count for  data\ntotal_cast=[]\nfor i in train['cast']:\n    if(not(pd.isnull(i))):\n        \n        total_cast.append(len(eval(i)))\n        \n    else:\n        total_cast.append(0)\ntrain['cast_count'] = total_cast","ae101e87":"plt.figure(figsize=(16, 8))\nplt.subplot(1, 2, 1)\nplt.scatter(train['cast_count'], train['revenue'])\nplt.title('Number of cast members vs revenue');","ce098f33":"#cast\n#Adding cast count for  test data\ntotal_cast=[]\nfor i in test['cast']:\n    if(not(pd.isnull(i))):\n        \n        total_cast.append(len(eval(i)))\n        \n    else:\n        total_cast.append(0)\ntest['cast_count'] = total_cast","3aeeceb6":"#Dropping cast\ntrain = train.drop(['cast'],axis=1)\ntest = test.drop(['cast'],axis=1)","8ae48037":"#crew\ntotal_crew=[]\nfor i in train['crew']:\n    if(not(pd.isnull(i))):\n        \n        total_crew.append(len(eval(i)))\n        \n    else:\n        total_crew.append(0)\ntrain['crew_count'] = total_crew","3848d7c8":"plt.figure(figsize=(16, 8))\nplt.subplot(1, 2, 1)\nplt.scatter(train['crew_count'], train['revenue'])\nplt.title('Number of crew members vs revenue');","10312e2d":"#Adding crew count for  test data\ntotal_crew=[]\nfor i in test['crew']:\n    if(not(pd.isnull(i))):\n        \n        total_crew.append(len(eval(i)))\n        \n    else:\n        total_crew.append(0)\ntest['crew_count'] = total_crew","f8737ba2":"#Dropping crew\ntrain = train.drop(['crew'],axis=1)\ntest = test.drop(['crew'],axis=1)","099673a8":"#Dropping original_title\ntrain = train.drop(['original_title'],axis=1)\ntest = test.drop(['original_title'],axis=1)","c165deb4":"col = ['revenue','budget','popularity','runtime']\n\nplt.subplots(figsize=(10, 8))\n\ncorr = train[col].corr()\n\nsns.heatmap(corr, xticklabels=col,yticklabels=col, linewidths=.5, cmap=\"Reds\")","2f76a52f":"#budget and revenue are highly correlated\nsns.regplot(x=\"budget\", y=\"revenue\", data = train)","639b0e66":"#Check how revenue depends of day\ntrain['release_date'] = pd.to_datetime(train['release_date'])\ntest['release_date'] = pd.to_datetime(test['release_date'])","a0a387f0":"release_day = train['release_date'].value_counts().sort_index()\nrelease_day_revenue = train.groupby(['release_date'])['revenue'].sum()\nrelease_day_revenue.index = release_day_revenue.index.dayofweek\nsns.barplot(release_day_revenue.index,release_day_revenue, data = train,ci=None)\nplt.show()","5194ce7a":"#adding day feature to the data\n\ntrain['release_day'] = train['release_date'].dt.dayofweek \ntest['release_day'] = test['release_date'].dt.dayofweek ","18c03fea":"#filling nulls in test\ntest['release_day'] = test['release_day'].fillna(0)","dd614b65":"train.drop(['release_date'],axis=1,inplace=True)\ntest.drop(['release_date'],axis=1,inplace=True)","7680c5f3":"#status\nprint(\"train data\")\nprint(train['status'].value_counts())\nprint(\"test data\")\ntest['status'].value_counts()","5cf256b9":"#Feature is irrelevant hence dropping\ntrain.drop(['status'],axis=1,inplace =True)\ntest.drop(['status'],axis=1,inplace =True)","a232b7fc":"#keywords\nKeywords_count=[]\nfor i in train['Keywords']:\n    if(not(pd.isnull(i))):\n        \n        Keywords_count.append(len(eval(i)))\n        \n    else:\n        Keywords_count.append(0)\ntrain['Keywords_count'] = Keywords_count","02ba3008":"#number of prod countries vs revenue\nsns.catplot(x='Keywords_count', y='revenue', data=train);\nplt.title('Revenue for different number of Keywords in the film');","43776324":"Keywords_count=[]\nfor i in test['Keywords']:\n    if(not(pd.isnull(i))):\n        \n        Keywords_count.append(len(eval(i)))\n        \n    else:\n        Keywords_count.append(0)\ntest['Keywords_count'] = Keywords_count","7e90b4ac":"#Dropping title and keywords\ntrain = train.drop(['Keywords'],axis=1)\ntrain = train.drop(['title'],axis=1)\ntest = test.drop(['Keywords'],axis=1)\ntest = test.drop(['title'],axis=1)","9a71bff8":"\ntrain['isTaglineNA'] = 0\ntrain.loc[train['tagline'].isnull() == False, 'isTaglineNA'] = 1\ntest['isTaglineNA'] = 0\ntest.loc[test['tagline'].isnull() == False, 'isTaglineNA'] = 1\n\n#Homepage v\/s Revenue\nsns.catplot(x='isTaglineNA', y='revenue', data = train);\nplt.title('Revenue for film with and without tagline');","2b4e981c":"train.drop(['tagline'],axis=1,inplace =True)\ntest.drop(['tagline'],axis=1,inplace =True)","b86936d8":"#runtime has 2 nulls; setting it to the mean\n#filling nulls in test\ntrain['runtime'] = train['runtime'].fillna(train['runtime'].mean())\ntest['runtime'] = test['runtime'].fillna(test['runtime'].mean())","ea13c56f":"#adding number of spoken languages for each movie\nspoken_count=[]\nfor i in train['spoken_languages']:\n    if(not(pd.isnull(i))):\n        \n        spoken_count.append(len(eval(i)))\n        \n    else:\n        spoken_count.append(0)\ntrain['spoken_count'] = spoken_count\n\n\nspoken_count_test=[]\nfor i in test['spoken_languages']:\n    if(not(pd.isnull(i))):\n        \n        spoken_count_test.append(len(eval(i)))\n        \n    else:\n        spoken_count_test.append(0)\ntest['spoken_count'] = spoken_count_test","e486357e":"#dropping spoken_languages\ntrain.drop(['spoken_languages'],axis=1,inplace=True)\ntest.drop(['spoken_languages'],axis=1,inplace=True)","6a74c911":"train.info()","96122f61":"train.head()","f61aa992":"test.head()","4d463172":"print(train.shape)\nprint(test.shape)","5b4b17ba":"train['budget'] = np.log1p(train['budget'])\ntest['budget'] = np.log1p(test['budget'])","ced334fc":"y= train['revenue'].values\ncols = [col for col in train.columns if col not in ['revenue', 'id']]\nX= train[cols].values\ny = np.log1p(y)","9bd56c9e":"from sklearn.linear_model import LinearRegression\nclf = LinearRegression()\nscores = cross_val_score(clf, X, y, scoring=\"neg_mean_squared_error\", cv = 8)\nrmse_scores = np.sqrt(-scores)\nprint(rmse_scores.mean())","e2513b75":"from sklearn.ensemble import RandomForestRegressor\nregr = RandomForestRegressor(max_depth=10, min_samples_split=5, random_state = 10,\n                             n_estimators=500)\nscores = cross_val_score(regr, X, y, scoring=\"neg_mean_squared_error\", cv = 10)\nrmse_scores = np.sqrt(-scores)\nprint(rmse_scores.mean())","998522ce":"cols = [col for col in test.columns if col not in ['id']]\nX_test= test[cols].values","f194d1d5":"regr.fit(X,y)\ny_pred = regr.predict(X_test)","2a65f1ba":"y_pred=np.expm1(y_pred)\npd.DataFrame({'id': test.id, 'revenue': y_pred}).to_csv('submission_RF.csv', index=False)","dc1800b8":"# TMDB Box Office Movie's Revenue Prediction\n\n![](https:\/\/cdn.onebauer.media\/one\/empire-tmdb\/films\/284054\/images\/6ELJEzQJ3Y45HczvreC3dg0GV5R.jpg?quality=50&width=1800&ratio=16-9&resizeStyle=aspectfill&format=jpg)\n\n### My job to predict the international box office revenue for each movie in this given dataset","95bf29fb":"#### Release Date","fc793411":"Visualize the relationship between the genre and revenue of the movie\n","974613ff":"### Check correlation between variables","6b5c2bc5":"It looks like some movie genres tend to earn more revenue than others on average. Animation and Adventure movies lead the way in terms of revenue, but Family and Fantasy are not far behind.","fcab6809":"### Exploratory Data Analysis","b78c71bd":"![](https:\/\/media.tenor.com\/images\/ba3ec917b6414b01fa85d33979336864\/tenor.gif)","c81e7d26":"#### Crew","2220a512":"#### Spoken languages","f11bfc71":"![](https:\/\/i.pinimg.com\/originals\/42\/44\/d8\/4244d86f56e6b8d25c8bd67732165021.gif)","96b54993":"I hope this kernal is useful to you.\n\nIf find this notebook help you to learn, **Please Upvote**.","2a72bb6e":"#### Tagline ","a36763af":"### # Testing the model","e6240c7a":"#### Missing or Null Values in the given dataset","a8642553":"#### Production Countries","b5b4e947":"Let's check dataset","d0f76566":"#### Find the Most Profitable Movie languages wise","3fc5da61":"### Lanaguage","0d0c4697":"The most common movie genres seem to be Drama, Comedy, Thriller, Action and Adventure.","25d448c9":"#### Data Analysis","15577a76":"#### Production Company","5e97bf8f":"### Prepare dataset for train the Model","7c11dcde":"### Import all necesary libraries","8649dcdc":"### Traning the model\n\n1. Linear Regression\n2. Random Forest Regression","6ff254e5":"### Model2: Random Forest Regression","caadc9f5":"#### Most Common Languages","7c879492":"Some languages seem to attract greater audiences than others and end up generating more revenue. For example, the highest revenue movies are in English, Chinese and Turkish. ('en', 'zh' and 'tr'). Hindi ('hi') and Japanese ('ja') are not far behind.","7abd3d45":"#### Movie Cast","65a934fb":"### Genre","6a4bcf85":"### Model1: Linear Regression","30178b67":"The most common languages in the movie data seem to be English ('en'), French ('fr'), Russian ('ru'), Hindi ('hi') etc"}}