{"cell_type":{"1d46bc77":"code","75badb4d":"code","6075748c":"code","1ef85cd8":"code","76bc969e":"code","812b2c2f":"code","ee3fd31c":"code","74299f6f":"markdown","8dc98f07":"markdown","446ab816":"markdown","4cbee7a0":"markdown","4fbfa50d":"markdown","a8d5ca5c":"markdown"},"source":{"1d46bc77":"import numpy as np\nimport os\nimport PIL\n\nimport tensorflow as tf\nimport tensorflow_datasets as tfds\nfrom tensorflow.keras import layers, models\n\nimport pathlib\n\nimport matplotlib.pyplot as plt","75badb4d":"img_path = \"\/kaggle\/input\/tire-texture-image-recognition\/Tire Textures\"\ntest_data_dir = pathlib.Path(img_path,\"testing_data\")\ntrain_data_dir = pathlib.Path(img_path, \"training_data\")","6075748c":"train_dataset = tf.keras.utils.image_dataset_from_directory(\n    train_data_dir,\n    shuffle=True,\n    seed=1\n)\ntest_dataset = tf.keras.utils.image_dataset_from_directory(\n    test_data_dir,\n    shuffle=True,\n    seed=1\n)","1ef85cd8":"val_ratio = 0.3\ntrain_size = int(len(train_dataset) * (1-val_ratio))\n\ntrain_split = train_dataset.take(train_size)\nval_split = train_dataset.take(len(train_dataset) - train_size)","76bc969e":"model = models.Sequential()\nmodel.add(layers.Rescaling(1.\/255))\nmodel.add(layers.Conv2D(64, 5, activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, 3, activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, 2, activation='relu'))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(2))","812b2c2f":"model.compile(\n    optimizer='adam',\n    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n    metrics=['accuracy']\n)\nhistory = model.fit(train_split, epochs=10, validation_data=val_split)","ee3fd31c":"model.evaluate(test_dataset)","74299f6f":"Not so good results here! It seems we are overfitting the train set, but at least our architecture is learning something.","8dc98f07":"Pretty good results for the train set! Let's see how it performs on the test set","446ab816":"# Classification using CNN\nIn this notebook we will attempt to classify the images using a simple convolutional neural network built with Tensorflow's Keras.","4cbee7a0":"We will use a simple architecture with three convolution layers and max pooling, decreasing in kernel sizes so as to capture finer details in subsequent layers. We will also need a rescaling layer to normalize our input values from RGB values.","4fbfa50d":"In this first attempt we will use the handy keras utility `image_dataset_from_directory` that automatically generates and preprocesses datasets from image folders.","a8d5ca5c":"We will split the training dataset so we have a validation dataset too"}}