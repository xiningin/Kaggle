{"cell_type":{"ac186957":"code","df06a15f":"code","a1c3d3b8":"code","0d664205":"code","3e002305":"code","9eb9c500":"code","c917d4fb":"code","ca341d3b":"code","ddbdc56e":"code","0bea120c":"code","5255b7d3":"markdown","06dca375":"markdown","46c1f348":"markdown","6d78a2ad":"markdown","cd3ae69a":"markdown","3e66ebdd":"markdown","cd946c93":"markdown","a8d38cd3":"markdown","329cf592":"markdown","c506f4c4":"markdown","c49d1bf0":"markdown"},"source":{"ac186957":"!git clone https:\/\/github.com\/ar4\/PyTorchWavelets.git > \/dev\/null\n%cd PyTorchWavelets\n!pip install -r requirements.txt > \/dev\/null\n!python setup.py install > \/dev\/null","df06a15f":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nfrom scipy import signal\nfrom scipy.cluster.vq import whiten\nimport torch\nfrom torch.utils.data import Dataset\nfrom wavelets_pytorch.transform import WaveletTransform # Use WaveletTransformTorch to use with PyTorch\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n%matplotlib inline","a1c3d3b8":"num_samples = 4 # first N samples to process","0d664205":"class G2NetDataset(Dataset):\n    def __init__(self, paths, targets, use_filter=True): \n        self.paths = paths\n        self.targets = targets\n        self.use_filter = use_filter\n        if self.use_filter:\n            self.bHP, self.aHP = signal.butter(8, (20, 500), btype='bandpass', fs=2048)\n\n    def __len__(self):\n        return len(self.paths)\n    \n    def __getitem__(self, index):      \n        waves = np.load(self.paths[index])\n        waves = np.concatenate(waves, axis=0)\n        if self.use_filter:\n            waves *= signal.tukey(4096*3, 0.2)\n            waves = signal.filtfilt(self.bHP, self.aHP, waves)\n        waves = waves \/ np.max(waves)\n        targets = self.targets[index]\n                \n        return {\n            \"waves\": torch.tensor(waves, dtype=torch.float),\n            \"target\": torch.tensor(targets, dtype=torch.long),\n        }","3e002305":"ROOT_DIR = '\/kaggle\/input\/g2net-gravitational-wave-detection'\ndf = pd.read_csv(os.path.join(ROOT_DIR, 'training_labels.csv'))\ndf['path'] = df['id'].apply(lambda x: f'{ROOT_DIR}\/train\/{x[0]}\/{x[1]}\/{x[2]}\/{x}.npy')","9eb9c500":"transform = WaveletTransform(dt=0.1)  \n\nds = G2NetDataset(df['path'], df['target'], use_filter=False)\nds_f = G2NetDataset(df['path'], df['target'], use_filter=True)\n\nwaves = []\nwaves_f = []\ncwts = []\ncwts_f = []\nfor i in range(num_samples):\n    waves.append(ds.__getitem__(i)['waves'])\n    waves_f.append(ds_f.__getitem__(i)['waves'])\n    cwts.append(transform.power(waves[i]).squeeze())\n    cwts_f.append(transform.power(waves_f[i]).squeeze())","c917d4fb":"fig, axs = plt.subplots(num_samples)\nfig.set_figheight(15)\nfig.set_figwidth(15)\nfor i in range(num_samples):\n    nid = df['id'][i]\n    ntarget = df['target'][i]\n    axs[i].title.set_text(f'{nid}.npy, target: {ntarget}')\n    axs[i].plot(waves[i])","ca341d3b":"fig, axs = plt.subplots(num_samples)\nfig.set_figheight(15)\nfig.set_figwidth(15)\nfor i in range(num_samples):\n    nid = df['id'][i]\n    ntarget = df['target'][i]\n    axs[i].title.set_text(f'{nid}.npy, target: {ntarget}')\n    axs[i].pcolormesh(cwts[i])","ddbdc56e":"fig, axs = plt.subplots(num_samples)\nfig.set_figheight(15)\nfig.set_figwidth(15)\nfor i in range(num_samples):\n    nid = df['id'][i]\n    ntarget = df['target'][i]\n    axs[i].title.set_text(f'{nid}.npy, target: {ntarget}')\n    axs[i].plot(waves_f[i])","0bea120c":"fig, axs = plt.subplots(num_samples)\nfig.set_figheight(15)\nfig.set_figwidth(15)\nfor i in range(num_samples):\n    nid = df['id'][i]\n    ntarget = df['target'][i]\n    axs[i].title.set_text(f'{nid}.npy, target: {ntarget}')\n    axs[i].pcolormesh(cwts_f[i])","5255b7d3":"This notebook shows how Constant Wavelet Transform from waves can be calculated with usage of PyTorchWavelets package (https:\/\/github.com\/tomrunia\/PyTorchWavelets).\n\nNote: due to unfixed bug of the official version, I use fixed version from https:\/\/github.com\/ar4\/PyTorchWavelets\/blob\/master\/wavelets_pytorch\/transform.py\n\nPyTorchWavelets is a SciPy\/PyTorch implementation for the wavelet analysis outlined in Torrence and Compo (BAMS, 1998). \n\nHave any questions or suggestions? Please comment below.\n\n**<font color='red'>And if you liked this notebook, please upvote it!<\/font>**\n\n**Changelog**\n* v2 - number of processed samples can be now easily changed via num_samples variable\n* v1 - initial version","06dca375":"You can use WaveletTransformTorch() as your model block to convert waves to CWT on-the-fly in PyTorch models.","46c1f348":"## Define dataset","6d78a2ad":"### With a filter with Tukey window","cd3ae69a":"Now we read training labels data, and get npy paths.","3e66ebdd":"Let's define a dataset to work with.","cd946c93":"## Import packages","a8d38cd3":"## Read training labels","329cf592":"Let's calculate CWT for 4 first signals with and without usage of a bandpass filter (20-500Hz), and plot results!","c506f4c4":"## Demonstrate CWT usage","c49d1bf0":"### Without a filter"}}