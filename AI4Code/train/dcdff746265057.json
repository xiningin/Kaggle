{"cell_type":{"ac783a8f":"code","be00d217":"code","97ec78f6":"code","33167f1f":"code","c0d6918b":"code","8162b3cc":"code","c0003e00":"code","50bcece6":"code","6c2314f7":"code","7da13283":"code","2728a23c":"code","bfc44bd7":"code","54de7ea7":"code","7937923e":"code","57570b1c":"code","ad7c2246":"code","6366fb5c":"markdown"},"source":{"ac783a8f":"# load doc into memory\ndef load_doc(filename):\n    # open the file as read only\n    file = open(filename, 'r')\n    # read all text\n    text = file.read()\n    # close the file\n    file.close()\n    return text","be00d217":"# save tokens to file, one dialog per line\ndef save_doc(lines, filename):\n    data = '\\n'.join(lines)\n    file = open(filename, 'w')\n    file.write(data)\n    file.close()","97ec78f6":"# load text\nraw_text = load_doc('..\/input\/rhymetxt\/rhyme.txt')\nprint(raw_text)\n\n# clean\ntokens = raw_text.split()\nraw_text = ' '.join(tokens)\n","33167f1f":"# organize into sequences of characters\nlength = 10\nsequences = list()\nfor i in range(length, len(raw_text)):\n\t# select sequence of tokens\n\tseq = raw_text[i-length:i+1]\n\t# store\n\tsequences.append(seq)\nprint('Total Sequences: %d' % len(sequences))\n\n","c0d6918b":"sequences","8162b3cc":"# save sequences to file\nout_filename = 'char_sequences.txt'\nsave_doc(sequences, out_filename)","c0003e00":"from numpy import array\nfrom pickle import dump\nfrom tensorflow.keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM","50bcece6":"# load doc into memory\ndef load_doc(filename):\n\t# open the file as read only\n\tfile = open(filename, 'r')\n\t# read all text\n\ttext = file.read()\n\t# close the file\n\tfile.close()\n\treturn text\n\n# load\nin_filename = 'char_sequences.txt'\nraw_text = load_doc(in_filename)\nlines = raw_text.split('\\n')","6c2314f7":"# integer encode sequences of characters\nchars = sorted(list(set(raw_text)))\nprint(chars)\nmapping = dict((c, i) for i, c in enumerate(chars))\nprint(mapping)\nsequences = list()\nfor line in lines:\n\t# integer encode line\n\tencoded_seq = [mapping[char] for char in line]\n\t# store\n\tsequences.append(encoded_seq)\n\n# vocabulary size\nvocab_size = len(mapping)\nprint('Vocabulary Size: %d' % vocab_size)","7da13283":"# separate into input and output\nsequences = array(sequences)\nX, y = sequences[:,:-1], sequences[:,-1]\nsequences = [to_categorical(x, num_classes=vocab_size) for x in X]\nX = array(sequences)\ny = to_categorical(y, num_classes=vocab_size)","2728a23c":"print(X)\nprint(\"------------\")\nprint(y)","bfc44bd7":"# define model\nmodel = Sequential()\nmodel.add(LSTM(75, input_shape=(X.shape[1], X.shape[2])))\nmodel.add(Dense(vocab_size, activation='softmax'))\nprint(model.summary())\n# compile model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n# fit model\nmodel.fit(X, y, epochs=100, verbose=2)","54de7ea7":"# save the model to file\nmodel.save('model.h5')\n# save the mapping\ndump(mapping, open('mapping.pkl', 'wb'))","7937923e":"from pickle import load\nfrom keras.models import load_model\nfrom keras.preprocessing.sequence import pad_sequences\n\n# generate a sequence of characters with a language model\ndef generate_seq(model, mapping, seq_length, seed_text, n_chars):\n\tin_text = seed_text\n\t# generate a fixed number of characters\n\tfor _ in range(n_chars):\n\t\t# encode the characters as integers\n\t\tencoded = [mapping[char] for char in in_text]\n\t\t# truncate sequences to a fixed length\n\t\tencoded = pad_sequences([encoded], maxlen=seq_length, truncating='pre')\n\t\t# one hot encode\n\t\tencoded = to_categorical(encoded, num_classes=len(mapping))\n\t\t# predict character\n\t\tyhat = model.predict_classes(encoded, verbose=0)\n\t\t# reverse map integer to character\n\t\tout_char = ''\n\t\tfor char, index in mapping.items():\n\t\t\tif index == yhat:\n\t\t\t\tout_char = char\n\t\t\t\tbreak\n\t\t# append to input\n\t\tin_text += char\n\treturn in_text\n\n# load the model\nmodel = load_model('model.h5')\n# load the mapping\nmapping = load(open('mapping.pkl', 'rb'))\n\n","57570b1c":"# test start of rhyme\nprint(generate_seq(model, mapping, 10, 'Sing a son', 20))\n# test mid-line\nprint(generate_seq(model, mapping, 10, 'king was i', 20))\n# test not in original\nprint(generate_seq(model, mapping, 10, 'hello worl', 20))\n# Test\nprint(generate_seq(model, mapping, 10, 'was in his', 20))","ad7c2246":"y\n","6366fb5c":"<a href=\"https:\/\/colab.research.google.com\/github\/san5627\/Next-Word-Prediction-using-NLP\/blob\/main\/Next_word_prediction.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>"}}