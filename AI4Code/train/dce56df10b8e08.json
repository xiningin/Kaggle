{"cell_type":{"d620e7bb":"code","6c5a8714":"code","14e98021":"code","97f07c98":"code","1499d8ed":"code","23f13288":"code","b9456c93":"code","fb3e0811":"code","3c199985":"code","dbfb24eb":"code","4813ecc6":"code","78401b3e":"code","37180a8b":"code","c4161c3d":"code","0468bb38":"code","07af712e":"code","1a1065f9":"code","68c520d1":"code","fc837bf3":"code","305e782f":"code","24f5334d":"code","b1dbd1a5":"code","3393ef39":"code","eb944d57":"code","0fa50000":"code","9e1331e9":"code","2469167c":"code","1a8f6fdb":"code","0390fbdb":"code","6a133a99":"code","c2174835":"code","c2af0984":"code","f02d35e0":"code","ad7c10ba":"markdown","6b96db6f":"markdown","527461ea":"markdown","e6f0b58d":"markdown","05b170e3":"markdown"},"source":{"d620e7bb":"import numpy as np\n\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib import image\nimport seaborn as sns\n%matplotlib inline\n\n\n\nfrom scipy.spatial import distance\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom tensorflow.keras.utils  import plot_model, model_to_dot\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import EarlyStopping,LearningRateScheduler,ReduceLROnPlateau\nfrom sklearn.model_selection import train_test_split, StratifiedShuffleSplit","6c5a8714":"DSPATH=\"..\/input\/olivetti-faces\/\"\nX = np.load(DSPATH+\"olivetti_faces.npy\")\ny = np.load(DSPATH+\"olivetti_faces_target.npy\")\n\n \nThiefImage={}\nThiefImage[\"False\"]= image.imread(\"..\/input\/thief-images\/False.jpg\")\nThiefImage[\"True\"]=image.imread(\"..\/input\/thief-images\/True.jpg\")\n \n\n\n\n ","14e98021":"ClASSES=np.unique(y)\n# N_CLASSES=len(np.unique(labels))","97f07c98":"# Split into train\/val\n\nStratifiedSplit = StratifiedShuffleSplit( test_size=0.4, random_state=0)\nStratifiedSplit.get_n_splits(X, y)\nfor train_index, test_index in StratifiedSplit.split(X, y):\n    X_train, X_test, y_train, y_test= X[train_index], X[test_index], y[train_index], y[test_index]\n    \n# X_train, X_test, y_train, y_test = train_test_split(    \n#     X, y, test_size=.40, random_state=42)\n ","1499d8ed":"import seaborn as sns\ng = sns.countplot(y_train)\n\n","23f13288":"# calculate class mean \nclass_mean=[]\nfor i in range(len(X_train)):\n    class_mean.append(X_train[y_train==i].mean(axis = 0))","b9456c93":"#Show Data\n\ndef ShowTrainingData(showNclasses=5):\n    if showNclasses>=40:\n        showNclasses=ClASSES\n    rows,cols=2,4\n    \n    for i in range(showNclasses+1):\n        fig,ax =  plt.subplots(rows,cols )\n        j=0\n        for face in X_train[y_train==i]:\n            j+=1\n            if j==cols:\n                j=5\n            ax=plt.subplot(rows,cols,j)\n            ax.imshow(face ,'gray' )\n\n        ax = plt.subplot(1,cols,cols)\n       \n        ax.imshow( class_mean[i], 'gray' )\n        plt.xlabel(\"Class \"+str(i)+\" mean \" )\n        fig.tight_layout(pad=1.0)\n        plt.show()\n    ","fb3e0811":"#Show Data\n\ndef ShowTrainingData2(showNclasses):\n    if showNclasses>=40:\n        showNclasses=ClASSES\n    rows,cols=2,4\n    \n    for i in range(showNclasses+1):\n        fig = plt.figure(figsize=(8, 4))\n    \n        j=0\n        for face in X_train[y_train==i]:\n            j+=1\n            if j==cols:\n                j=5\n            fig.add_subplot(rows, cols, j)\n            plt.imshow(face, cmap = plt.get_cmap('gray'))\n \n            plt.axis('off')\n\n        \n        fig.add_subplot(1,cols,cols)\n        plt.imshow(class_mean[i], cmap = plt.get_cmap('gray'))\n        plt.title(\"class_mean {}\".format(i), fontsize=16)\n        plt.axis('off')\n #         fig.tight_layout(pad=1.0)\n\n\n        plt.suptitle(\"There are 6 image for class {}\".format(i), fontsize=15)\n        plt.show()\n\n    ","3c199985":"def ShowPredictions(predic_Model,ShowNPredictions=5):\n    \n    if ShowNPredictions>=len(y_predictions):\n        ShowNPredictions=len(y_predictions)\n    rows,cols=1,3\n \n    for index, row in y_predictions.iterrows():\n        if (index>ShowNPredictions):\n            break\n            \n        x=int(row[\"x\"])\n        actually=int(row[\"actually\"])\n        y_predic=int(row[predic_Model+\"_predic\"])\n        IsTrue=str(row[predic_Model+\"_True\"])\n\n        fig,ax =  plt.subplots(rows,cols )\n        j=1\n        ax=plt.subplot(rows,cols,j)\n        ax.imshow(X_test[x] ,'gray' )\n        plt.xlabel(\"Test Number :\"+str(x)  )\n\n        j=2\n        ax=plt.subplot(rows,cols,j)\n        ax.imshow(class_mean[y_predic] ,'gray' )\n        plt.xlabel(\"Class \"+str(y_predic)+\" mean \" )\n\n        j=3\n        ax=plt.subplot(rows,cols,j)\n        ax.imshow(ThiefImage[IsTrue] ,'gray' )\n        plt.xlabel(\"Class \"+str(actually)+\" mean \" )\n\n\n\n        fig.tight_layout(pad=2.0)\n        plt.show()   \n   ","dbfb24eb":"ShowTrainingData2(5)","4813ecc6":"distanceTable=np.array([(i,y_test[i],c,distance.euclidean(X_test[i].flatten() , class_mean[c].flatten() )) for c in ClASSES  for i in range(len(X_test))])","78401b3e":"distanceTable","37180a8b":"distanceTable=distanceTable.T\n# distanceTable.shape=(4,6400)","c4161c3d":" \nd = {'x': distanceTable[0], 'actually':distanceTable[1],'KNN_predic':distanceTable[2],'distance':distanceTable[3]}\ndf= pd.DataFrame(data=d)\ndf.head()\n","0468bb38":"df[df.x==0]","07af712e":"y_predictions=pd.merge(df ,df.groupby([\"x\",\"actually\"]).distance.min(), how = 'inner',  on=[\"x\",\"actually\",\"distance\"])","1a1065f9":"y_predictions[\"KNN_True\"]=y_predictions[\"KNN_predic\"]==y_predictions[\"actually\"]","68c520d1":"correct_predictions = np.nonzero(y_predictions[\"KNN_True\"].values==1)[0]\nincorrect_predictions = np.nonzero(y_predictions[\"KNN_True\"].values==0)[0]\nprint(len(correct_predictions),\" classified correctly\")\nprint(len(incorrect_predictions),\" classified incorrectly\")","fc837bf3":"print(\"KNN_predic\")\nprint(\"=============\")\n\nShowPredictions(\"KNN\",5)","305e782f":"X_train = X_train.reshape(-1,64,64,1)\nX_test = X_test.reshape(-1,64,64,1)\n \n\nprint(\"X_train shape: \",X_train.shape,\"y_train shape: \",y_train.shape)\nprint(\"x_test shape: \", X_test.shape,\"y_test shape: \",y_test.shape)","24f5334d":"model = Sequential()\n\nmodel.add(Conv2D(filters = 20, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (64,64,1)))\n\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 50, kernel_size = (6,6),padding = 'Same', \n                 activation ='relu'))\n\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 150, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (64,64,1)))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(40, activation = \"softmax\"))\n\n","b1dbd1a5":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.7, \n                                            min_lr=0.00000000001)\nearly_stopping_monitor = EarlyStopping(patience=2)","3393ef39":"model.summary()","eb944d57":"plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)","0fa50000":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\nmodel.compile(optimizer = optimizer , loss='sparse_categorical_crossentropy',\n            metrics=['sparse_categorical_accuracy'])\nepoch = 37\nbatch_size = 20\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=5,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.05, # Randomly zoom image \n        width_shift_range=0,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\ndatagen.fit(X_train)\n\nhistory = model.fit_generator(\n                              datagen.flow(X_train,y_train, batch_size=batch_size),\n                              epochs = epoch, \n                              validation_data = (X_test,y_test),\n                              verbose = 2, \n                              steps_per_epoch=X_train.shape[0] \/\/ batch_size,\n                              callbacks=[learning_rate_reduction]\n                             )","9e1331e9":"print(history.history.keys())\n# summarize history for accuracy\nplt.plot(history.history['sparse_categorical_accuracy'])\nplt.plot(history.history['val_sparse_categorical_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","2469167c":"print(\"CNN_predic\")\nprint(\"=============\")\n\nscore = model.evaluate(X_test,y_test,batch_size=32)\nprint(score)","1a8f6fdb":"CNN_predic=model.predict_classes(X_test)","0390fbdb":"X_test = X_test.reshape(-1,64,64)","6a133a99":"del y_predictions\n\ndistanceTable=np.array([(i,y_test[i],CNN_predic[i] )  for i in range(len(X_test))])\ndistanceTable=distanceTable.T\nd = {'x': distanceTable[0], 'actually':distanceTable[1],'CNN_predic':distanceTable[2] }\ny_predictions= pd.DataFrame(data=d)\ny_predictions.head()\ny_predictions[\"CNN_True\"]=y_predictions[\"CNN_predic\"]==y_predictions[\"actually\"]\n\n","c2174835":"y_predictions.head(100)","c2af0984":"correct_predictions = np.nonzero(y_predictions[\"CNN_True\"].values==1)[0]\nincorrect_predictions = np.nonzero(y_predictions[\"CNN_True\"].values==0)[0]\nprint(len(correct_predictions),\" classified correctly\")\nprint(len(incorrect_predictions),\" classified incorrectly\")\n","f02d35e0":"\n\nShowPredictions(\"CNN\")\n\n\n","ad7c10ba":"# **StratifiedSplit Data**","6b96db6f":"# **Calculate Class mean**","527461ea":"# **Show Training Data**","e6f0b58d":"# **CNN Model**","05b170e3":"# **KNN Model**"}}