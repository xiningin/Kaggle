{"cell_type":{"2048cafe":"code","dff6278e":"code","dcb2527e":"code","959a7b0d":"code","426ee797":"code","923cf39d":"code","a97a5e2c":"code","c8fb80dc":"code","b5daf5ad":"code","fac4d632":"code","cc2dc47c":"code","e655eabb":"code","ccf0734f":"code","1e05ef03":"markdown","6009183e":"markdown","187bd053":"markdown"},"source":{"2048cafe":"import numpy as np\nimport pandas as pd\nimport math\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","dff6278e":"# pd.set_option('display.max_colwidth', 0)\n","dcb2527e":"train = pd.read_csv('..\/input\/17k-apple-app-store-strategy-games\/appstore_games.csv')\ntrain.head()","959a7b0d":"train['User Rating Count'] = train['User Rating Count'].fillna(np.mean(train['User Rating Count']))\ntrain['Average User Rating'] = train['Average User Rating'].fillna(np.mean(train['Average User Rating']))\ntrain['User Rating Count'] = train['User Rating Count'].apply(lambda x: int(math.log(x,10)))\ntrain['User Rating Count'] = train['User Rating Count'].apply(lambda x: 1 if x>=3 else 0)\n\nprint(train.groupby('User Rating Count')['ID'].nunique())","426ee797":"import matplotlib.pyplot as plt\nx = np.arange(1,3)\ny = train.groupby(train['User Rating Count'])['Average User Rating'].mean()\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(x, y)\nplt.show()","923cf39d":"train['Price'] = train['Price'].fillna(np.mean(train['Price']))\ntrain['Price'] = train['Price'].apply(lambda x: 5.99 if x>=5.99 else x)\nprint(train.groupby('Price')['ID'].nunique())","a97a5e2c":"x = train.sort_values('Price',ascending=[True])\nx = x['Price'].unique()\ny = train.groupby(train['Price'])['Average User Rating'].mean()\nprint(x)\nprint(train.groupby(train['Price'])['Average User Rating'].mean())\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(x, y)\nplt.show()","c8fb80dc":"import tensorflow as tf\nprint(tf.__version__)\n","b5daf5ad":"training_sentences = []\ntraining_labels = []\n\ntesting_sentences = []\ntesting_labels = []\ntrain_length = int(len(train)\/2)\n\ntraining_sentences = (train['Description'][:train_length])\ntraining_labels = train['User Rating Count'][:train_length]\ntesting_sentences = (train['Description'][train_length:])\ntesting_labels = train['User Rating Count'][train_length:]# training_labels_final = np.array(training_labels)\n\ntraining_labels_final = np.array(training_labels)\ntesting_labels_final = np.array(testing_labels)","fac4d632":"vocab_size = 10000\nembedding_dim = 100\nmax_length = 150\ntrunc_type='post'\noov_tok = \"<OOV>\"\n\n\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\ntokenizer = Tokenizer(num_words = vocab_size, oov_token=oov_tok)\ntokenizer.fit_on_texts(training_sentences)\nword_index = tokenizer.word_index\nsequences = tokenizer.texts_to_sequences(training_sentences)\npadded = pad_sequences(sequences,maxlen=max_length, truncating=trunc_type)\n\ntesting_sequences = tokenizer.texts_to_sequences(testing_sentences)\ntesting_padded = pad_sequences(testing_sequences,maxlen=max_length)\n\n","cc2dc47c":"reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\n\ndef decode_review(text):\n    return ' '.join([reverse_word_index.get(i, '?') for i in text])\n\nprint(decode_review(padded[1]))\nprint(training_sentences[1])","e655eabb":"model = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(6, activation='relu'),\n    tf.keras.layers.Dense(1, activation='tanh')\n])\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nmodel.summary()","ccf0734f":"num_epochs = 10\nmodel.fit(padded, training_labels_final, epochs=num_epochs, validation_data=(testing_padded, testing_labels_final))","1e05ef03":"<div style = \"font-size:20px;line-height:25px;\">Log of **User Rating Count** plotted against **Average User Rating**.<br>\nThe figure above shows there is a correlation between how popular a game is vs it's rating\n<\/div>","6009183e":"<div style = \"font-size:20px;line-height:25px;\">**Log** of **Price** plotted against **Average User Rating**.<br>\nThe figure above shows there is a **loose** correlation between how popular a game is vs it's rating<\/div>","187bd053":"<div style = \"font-size:20px;line-height:23px;\">Vectorized the **Description** and fed into Deep Neural Network to see if they play a role in the number of downloads(**User Rating Count**).\nRelation not found. I encourage someone to play with hyperparameters to further test this hypothesis.<\/div>"}}