{"cell_type":{"fda2b1d0":"code","56908671":"code","fec6ced4":"code","a519638b":"code","7be537a6":"code","7c744259":"code","8fbb4c1a":"code","294e9f85":"code","4881366f":"code","50058425":"code","7cd8ea23":"code","921d5ae0":"code","9bda2c6a":"code","84e08991":"code","c5b838da":"code","55055ca9":"code","f7115e14":"code","3f556ced":"code","f405cfc4":"code","21f6c06f":"code","cbcc6e78":"code","751ba5fb":"code","966c1a5c":"code","365665e0":"code","b8c80822":"markdown","8a81f618":"markdown","5d306842":"markdown","f9c13e49":"markdown","7191c8ea":"markdown"},"source":{"fda2b1d0":"! git clone https:\/\/github.com\/Tessellate-Imaging\/Monk_Object_Detection.git","56908671":"! cd Monk_Object_Detection\/7_yolov3\/installation && cat requirements_colab.txt | xargs -n 1 -L 1 pip install","fec6ced4":"! mkdir '\/kaggle\/working\/drone\/'","a519638b":"! mkdir '\/kaggle\/working\/drone\/images\/'\n! mkdir '\/kaggle\/working\/drone\/labels\/'","7be537a6":"! cp \/kaggle\/input\/drone-dataset-uav\/drone_dataset_yolo\/dataset_txt\/*.jpg \/kaggle\/working\/drone\/images\/\n! cp \/kaggle\/input\/drone-dataset-uav\/drone_dataset_yolo\/dataset_txt\/*.txt \/kaggle\/working\/drone\/labels\/","7c744259":"! mv \/kaggle\/working\/drone\/labels\/classes.txt \/kaggle\/working\/drone\/classes.txt","8fbb4c1a":"# ! diff -bur '\/kaggle\/working\/drone\/images\/' '\/kaggle\/working\/drone\/labels\/'","294e9f85":"import os\nimport sys","4881366f":"root_dir = '\/kaggle\/working\/drone\/';\nimg_dir = '\/kaggle\/working\/drone\/images\/';\n\nlabels_dir = '\/kaggle\/working\/drone\/labels\/';\nclasses_file = '\/kaggle\/working\/drone\/classes.txt';","50058425":"sys.path.append(\"\/kaggle\/working\/Monk_Object_Detection\/7_yolov3\/lib\");","7cd8ea23":"from train_detector import Detector","921d5ae0":"gtf = Detector();","9bda2c6a":"gtf.set_train_dataset(img_dir, labels_dir, classes_file, batch_size=2)\ngtf.set_val_dataset(img_dir, labels_dir)","84e08991":"gtf.set_model(model_name=\"yolov3\");","c5b838da":"gtf.set_hyperparams(optimizer=\"sgd\", lr=0.00579, multi_scale=True, evolve=False);","55055ca9":"gtf.Train(num_epochs=5);","f7115e14":"from IPython.display import Image","3f556ced":"from infer_detector import Infer","f405cfc4":"gtf = Infer();","21f6c06f":"f = open(\"\/kaggle\/working\/drone\/classes.txt\");\nclass_list = f.readlines();\nf.close();","cbcc6e78":"model_name = \"yolov3\";\nweights = \"\/kaggle\/working\/weights\/last.pt\";\ngtf.Model(model_name, classes_file, weights, use_gpu=True, input_size=416);","751ba5fb":"img_path = \"\/kaggle\/working\/drone\/images\/0001.jpg\";\ngtf.Predict(img_path, conf_thres=0.4, iou_thres=0.5);","966c1a5c":"weights","365665e0":"type(weights)","b8c80822":"# Inference","8a81f618":"# Required Format - Yolo\n\n# Dataset Directory Structure\n    \n    drone (root)\n      |\n      |-------------images (img_dir)\n      |              |\n      |              |------------------img1.jpg\n      |              |------------------img2.jpg\n      |              |------------------.........(and so on)\n      |\n      |-----------labels (label_dir)\n      |              |\n      |              |------------------img1.txt\n      |              |------------------img2.txt\n      |              |------------------.........(and so on)\n      |\n      |------------classes.txt\n      \n\n# Classes file\n \n List of classes in every new line.\n The order corresponds to the IDs in annotation files\n\n Eg.\n      \n      class1               (------------------------------> if will be 0)\n      class2               (------------------------------> if will be 1)\n      class3               (------------------------------> if will be 2)\n      class4               (------------------------------> if will be 3)\n\n\n# Annotation file format\n\nCLASS_ID BOX_X_CENTER BOX_Y_CENTER WIDTH BOX_WIDTH BOX_HEIGHT\n\n(All the coordinates should be normalized)\n\n\n(X coordinates divided by width of image, Y coordinates divided by height of image)\n\nEx. \n\n    (One line per bounding box of object in image)\n    class_id x1 y1 w h\n    class_id x1 y1 w h\n    ..... (and so on)","5d306842":"# Training","f9c13e49":"# Availale model types\n\n* \"yolov3\";\n* \"yolov3s\";\n* \"yolov3-spp\";\n* \"yolov3-spp3\";\n* \"yolov3-tiny\";\n* \"yolov3-spp-matrix\";\n* \"csresnext50-panet-spp\";","7191c8ea":"# Hyper-params for evolving params\n\n* Set evolve as True\n* Set num_generations (Total epochs = num_generations*epochs)\n\n# Optimizers\n\n* \"sgd\"\n* \"adam\""}}