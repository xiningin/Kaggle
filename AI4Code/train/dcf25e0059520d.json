{"cell_type":{"0ea7c9dc":"code","bb53ecbb":"code","f014155b":"code","ef0ed826":"code","5855239f":"code","13d051b6":"code","94c73bf9":"code","e25028a5":"code","26d2fdc8":"code","f2ad7b0a":"code","d5c3ef26":"code","5e4c8d0e":"code","be746246":"code","29e207ad":"markdown","3f3f430d":"markdown","246c6a6f":"markdown","96930045":"markdown","f021eb3c":"markdown","810ac282":"markdown","3ea7e615":"markdown","9b0e1d28":"markdown","6fd7f336":"markdown","d60e3791":"markdown","e4f6c830":"markdown","db867a7b":"markdown","62938001":"markdown","5d4eb4ed":"markdown"},"source":{"0ea7c9dc":"import tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\nimport matplotlib.pyplot as plt","bb53ecbb":"fashion_mnist = keras.datasets.fashion_mnist \n\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()","f014155b":"train_images.shape","ef0ed826":"class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","5855239f":"plt.figure()\nplt.imshow(train_images[3])\nplt.colorbar()\nplt.show()","13d051b6":"train_images = train_images \/ 255.0\n\ntest_images = test_images \/ 255.0","94c73bf9":"\nmodel = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),  \n    keras.layers.Dense(128, activation='relu'),  \n    keras.layers.Dense(10, activation='softmax') \n])","e25028a5":"model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","26d2fdc8":"model.fit(train_images, train_labels, epochs=2)","f2ad7b0a":"test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=1) \n\nprint('Test accuracy:', test_acc)","d5c3ef26":"predictions = model.predict(test_images)","5e4c8d0e":"def show_prediction(img):\n    i=img\n    plt.figure()\n    plt.imshow(test_images[i])\n    plt.show()\n    print(\"the prediction is\",class_names[np.argmax(predictions[i])]+\" and the picture is of \",class_names[test_labels[i]]) ","be746246":"show_prediction(4546)","29e207ad":"The labels are in number, thus we need to assign the class name to each number 0-9. Total 10 classes","3f3f430d":"Hyper-parameter tuning for the nural network model\nto optimise our neural network use Adam; an algorithm for gradient-based optimization of stochastic objective function.It is computationally efficient and requires little memory. \nTo calculate the loss in every new model use sparse_categorical_crossentropy; it is the categorical cross entropy. Sparse means that it does use all the possible classes but some of them. This is useful when you have more classes, where softmax would be a very slow function and imrovement we want is accuracy.","246c6a6f":"check the results with model predition with the facts for desired picture number.","96930045":"It is advisable to normalise the data before we move further for training the model.\n\nwe know that each pixal is represented by a number in a matrix in the range of 0-255; black-white by dividing 255, we could transform it in the range of 0-1. This would save time while training and could improve the model performance.","f021eb3c":"prediction on test data ","810ac282":"import dataset from keras and splitting the data into training and testing dataset\n\n60000 images of 10 different categories in training dataset\n10000 images in testing dataset","3ea7e615":"For above results (number of pictures,Px width,Px hieght)","9b0e1d28":"In this kernel, I have tried to explain the workflow of Neural Network categorical computer vision problem with the help of tensorflow and keras in Python.\n\nPipeline\n\n1. Acquire training and testing data\n2. Normalizing data\n3. Neural network Model building\n4. Neural network hyper-parameter tuning\n5. Train the neural network\n6. Result assessment\n7. Prediction\n8. Prediction check","6fd7f336":"After normalising the data, start building the neural network.\nwe cannont train the model in matrix format, first flatten the matrix and make data in a single data vector\n1. input layer - input dense layer  \n2. hidden layer with activation method Rectified Linear Unit\n3. output layer with activation method softmax (gives probability distribution of classes)","d60e3791":"train the model on training data with 2 iterations","e4f6c830":"check the model performance on testing data","db867a7b":"now, overview the dataset","62938001":"using Matplotlib lets see the fourth image ","5d4eb4ed":"Firstly import tensorflow and basic supporting libraries"}}