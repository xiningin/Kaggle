{"cell_type":{"7249ca8c":"code","774971c3":"code","088a88e9":"code","8b7e1cf1":"code","1309f5af":"code","3d1ee677":"code","f6f33efe":"code","368ccba4":"code","91d00837":"code","b6b8275e":"code","20bc8174":"code","a22cb4b2":"code","fb0b1419":"code","7c7e9483":"code","c0b6df65":"code","fb58adb8":"code","3df92402":"markdown","cd69797b":"markdown","bd53d2c9":"markdown","f8e718e0":"markdown","3de44764":"markdown","7b167c5a":"markdown","62f46529":"markdown"},"source":{"7249ca8c":"#pip install kaggle --upgrade","774971c3":"from google.cloud import bigquery\nimport numpy as np\nimport pandas as pd","088a88e9":"client = bigquery.Client()\ndataset_ref = client.dataset(\"chicago_taxi_trips\", project=\"bigquery-public-data\")\ntaxi_dat = client.get_dataset(dataset_ref)","8b7e1cf1":"tables = list(client.list_tables(taxi_dat))\nfor table in tables:\n    print(table.table_id)","1309f5af":"table_ref = dataset_ref.table('taxi_trips')\ntable = client.get_table(table_ref)\ntable.schema","3d1ee677":"first_query = \"\"\"SELECT company, COUNT(1) AS number_of_trips \nFROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`\nGROUP BY company\nORDER BY number_of_trips DESC\n\"\"\"\n\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nfirst_query_job = client.query(first_query, job_config=safe_config)\nfirst_query_result = first_query_job.to_dataframe()\ndisplay(first_query_result)","f6f33efe":"plot_dat = first_query_result.head(10)\ndisplay(plot_dat)","368ccba4":"plot_dat = plot_dat.drop(1)\ndisplay(plot_dat)","91d00837":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.subplots(figsize=(12, 6))\nsns.barplot(x=plot_dat['number_of_trips'],y=plot_dat['company'], palette='Greens_r')#color='#4CB391')","b6b8275e":"company=plot_dat.company.unique()\nprint(company)","20bc8174":"second_query =\"\"\"\nSELECT EXTRACT(YEAR FROM trip_start_timestamp) AS year, \nCOUNT(1) AS num_trips, company\nFROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`\nGROUP BY year, company\nHAVING COUNT(1) >= 10000 \/*This creates a much shorter output*\/\nORDER BY year, company\n\"\"\" \n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nsecond_query_job =client.query(second_query,job_config=safe_config)\nsecond_query_result = second_query_job.to_dataframe()\nsecond_query_result.head(10)\n","a22cb4b2":"years = [2013,2014,2015,2016,2017,2018,2019,2020]\nfinal_frame = pd.DataFrame(index=years,columns=company)\ndisplay(final_frame) #Now to populate the data","fb0b1419":"cp_query =\"\"\"\nSELECT EXTRACT(YEAR FROM trip_start_timestamp) AS year, \nCOUNT(1) AS num_trips, company\nFROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`\nWHERE company = 'Taxi Affiliation Services'\nGROUP BY year, company\nORDER BY year\n\"\"\" \n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\ncp_query_job =client.query(cp_query,job_config=safe_config)\ncp_query_result = cp_query_job.to_dataframe()\nprint(cp_query_result)\nfinal_frame['Taxi Affiliation Services'] = pd.Series([x for x in cp_query_result.num_trips], index=final_frame.index)\nfinal_frame.head(9)","7c7e9483":"#cp_query stands for copy pasted query, alot of the following queries were copy pasted off an initial one I wrote\n#There probably was a better way to execute this, my guess is using subqueries\ncp_query =\"\"\"\nSELECT EXTRACT(YEAR FROM trip_start_timestamp) AS year, \nCOUNT(1) AS num_trips, company\nFROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`\nWHERE company = 'Flash Cab'\nGROUP BY year, company\nORDER BY year\n\"\"\" \nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\ncp_query_job =client.query(cp_query,job_config=safe_config)\ncp_query_result = cp_query_job.to_dataframe()\n\ncp_query_result2015 = pd.DataFrame(data=[[2015, 0, 'Flash Cab']], columns=['year', 'num_trips', 'company'],)\ncp_query_result2015.head(10)\ncp_query_result = cp_query_result.append(cp_query_result2015)\ncp_query_result = cp_query_result.sort_values(by=['year'])\nfinal_frame['Flash Cab'] = pd.Series([x for x in cp_query_result.num_trips], index=final_frame.index)\n\n#####\n\ncp_query =\"\"\"\nSELECT EXTRACT(YEAR FROM trip_start_timestamp) AS year, \nCOUNT(1) AS num_trips, company\nFROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`\nWHERE company = 'Dispatch Taxi Affiliation'\nGROUP BY year, company\nORDER BY year\n\"\"\" \n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\ncp_query_job =client.query(cp_query,job_config=safe_config)\ncp_query_result = cp_query_job.to_dataframe()\n\n\ncp_query_result2015 = pd.DataFrame(data=[[2019, 0, 'Dispatch Taxi Affiliation'],[2020, 0, 'Dispatch Taxi Affiliation']], columns=['year', 'num_trips', 'company'],)\ncp_query_result2015.head(10)\ncp_query_result = cp_query_result.append(cp_query_result2015)\ncp_query_result = cp_query_result.sort_values(by=['year'])\n\nfinal_frame['Dispatch Taxi Affiliation'] = pd.Series([x for x in cp_query_result.num_trips], index=final_frame.index)\n\n\n#####\n\ncp_query =\"\"\"\nSELECT EXTRACT(YEAR FROM trip_start_timestamp) AS year, \nCOUNT(1) AS num_trips, company\nFROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`\nWHERE company = 'Yellow Cab'\nGROUP BY year, company\nORDER BY year\n\"\"\" \n\n# Set up the query\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\ncp_query_job =client.query(cp_query,job_config=safe_config)\n# API request - run the query, and return a pandas DataFrame\ncp_query_result = cp_query_job.to_dataframe()\n# View results\n\ncp_query_result2015 = pd.DataFrame(data=[[2020, 0, 'Yellow Cab']], columns=['year', 'num_trips', 'company'],)\ncp_query_result2015.head(10)\ncp_query_result = cp_query_result.append(cp_query_result2015)\ncp_query_result = cp_query_result.sort_values(by=['year'])\n\nfinal_frame['Yellow Cab'] = pd.Series([x for x in cp_query_result.num_trips], index=final_frame.index)\n\n#####\n\ncp_query =\"\"\"\nSELECT EXTRACT(YEAR FROM trip_start_timestamp) AS year, \nCOUNT(1) AS num_trips, company\nFROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`\nWHERE company = 'Blue Ribbon Taxi Association Inc.'\nGROUP BY year, company\nORDER BY year\n\"\"\" \n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\ncp_query_job =client.query(cp_query,job_config=safe_config)\ncp_query_result = cp_query_job.to_dataframe()\nfinal_frame['Blue Ribbon Taxi Association Inc.'] = pd.Series([x for x in cp_query_result.num_trips], index=final_frame.index)\n\n\n#####\n\ncp_query =\"\"\"\nSELECT EXTRACT(YEAR FROM trip_start_timestamp) AS year, \nCOUNT(1) AS num_trips, company\nFROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`\nWHERE company = 'Chicago Carriage Cab Corp'\nGROUP BY year, company\nORDER BY year\n\"\"\" \n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\ncp_query_job =client.query(cp_query,job_config=safe_config)\ncp_query_result = cp_query_job.to_dataframe()\n\ncp_query_result2015 = pd.DataFrame(data=[[2013, 0, 'Chicago Carriage Cab Corp'],[2014, 0, 'Chicago Carriage Cab Corp'],[2015, 0, 'Chicago Carriage Cab Corp']], columns=['year', 'num_trips', 'company'],)\ncp_query_result = cp_query_result.append(cp_query_result2015)\ncp_query_result = cp_query_result.sort_values(by=['year'])\n\nfinal_frame['Chicago Carriage Cab Corp'] = pd.Series([x for x in cp_query_result.num_trips], index=final_frame.index)\n\n\n#####\n\ncp_query =\"\"\"\nSELECT EXTRACT(YEAR FROM trip_start_timestamp) AS year, \nCOUNT(1) AS num_trips, company\nFROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`\nWHERE company = 'Choice Taxi Association'\nGROUP BY year, company\nORDER BY year\n\"\"\" \n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\ncp_query_job =client.query(cp_query,job_config=safe_config)\ncp_query_result = cp_query_job.to_dataframe()\nfinal_frame['Choice Taxi Association'] = pd.Series([x for x in cp_query_result.num_trips], index=final_frame.index)\n\n\n#####\n\ncp_query =\"\"\"\nSELECT EXTRACT(YEAR FROM trip_start_timestamp) AS year, \nCOUNT(1) AS num_trips, company\nFROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`\nWHERE company = 'Chicago Elite Cab Corp. (Chicago Carriag'\nGROUP BY year, company\nORDER BY year\n\"\"\" \n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\ncp_query_job =client.query(cp_query,job_config=safe_config)\ncp_query_result = cp_query_job.to_dataframe()\ncp_query_result2015 = pd.DataFrame(data=[[2017, 0, 'Dispatch Taxi Affiliation'],[2018, 0, 'Chicago Elite Cab Corp. (Chicago Carriag'],[2019, 0, 'Dispatch Taxi Affiliation'], [2020, 0, 'Dispatch Taxi Affiliation']], columns=['year', 'num_trips', 'company'],)\ncp_query_result = cp_query_result.append(cp_query_result2015)\ncp_query_result = cp_query_result.sort_values(by=['year'])\n\nfinal_frame['Chicago Elite Cab Corp. (Chicago Carriag'] = pd.Series([x for x in cp_query_result.num_trips], index=final_frame.index)\n\n######\n\ncp_query =\"\"\"\nSELECT EXTRACT(YEAR FROM trip_start_timestamp) AS year, \nCOUNT(1) AS num_trips, company\nFROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`\nWHERE company = 'City Service'\nGROUP BY year, company\nORDER BY year\n\"\"\" \n\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\ncp_query_job =client.query(cp_query,job_config=safe_config)\ncp_query_result = cp_query_job.to_dataframe()\n\ncp_query_result2015 = pd.DataFrame(data=[[2013, 0, 'City Service'],[2014, 0, 'City Service'],[2015, 0, 'City Service']], columns=['year', 'num_trips', 'company'],)\ncp_query_result = cp_query_result.append(cp_query_result2015)\ncp_query_result = cp_query_result.sort_values(by=['year'])\n\n\nfinal_frame['City Service'] = pd.Series([x for x in cp_query_result.num_trips], index=final_frame.index)\nfinal_frame.head(9)","c0b6df65":"company = list(company)\n#print(company)","fb58adb8":"for col in company:\n    sns.lineplot(x=final_frame.index, y=final_frame[col])\n\n#This did not produce what i wanted but it shows an interesting trend\n#The blue line represents Taxi Affiliation Services","3df92402":"This kernal is for the \"Taxi company usually used in Chicago\" Task. For this challenge I would like to view which company has been the most popular overall and look to see if there is any seasonality to this trend. \n\nPart 2 of this notebook will cover the second task from the dataset: \"Mode of payment usually used\" and I'm planning to finish that by Febuary 3rd. I'm currently in week three of my personal challenge to compete one Kaggle task a week.\n\nThanks to:\n   * The city of Chicago for the dataset https:\/\/www.kaggle.com\/chicago\/chicago-taxi-trips-bq\n   * Tinotenda for the Task https:\/\/www.kaggle.com\/tinotendamhlanga","cd69797b":"# Initial summery:\n\nTaxi Affiliation Services is the most common entry, the next closest is none. I'll plot my initial findings and then we will look at the changes over the years. We'll begin by removing the data where the company wasn't recorded.","bd53d2c9":"I'm starting to suspect that Chicago Carriage Cab Corp and Chicago Elite Cab Corp. (Chicago Carriag might just be the same company. The names are very similair, they don't have any signifigant overlap in operational time (one didn't operate before 2016, the other stopped in 2016) and have you noticed the two are never in the same room at the same time >.>","f8e718e0":"# Final thoughts\nWe see a slight downward trend in taxi use as a whole (probably market disruption from Uber\/Lyft), but overall, Taxi Affiliation Services still takes the cake. \n\nFor the graph above one thing to note is that this includes data from 2020, which at the time of last commit was only a month underway so the downward spike at the end isn't signifigant. I chose not to exclude the final year so that this notebook could be reran for an updated veiw.\n\n\nAs one final note: I'm trying to do one Kaggle task a week (this would be my second week) if there is anything I could do to improve the format I'd appriciate any constructive feedback (for example how I could have written those queries better). You can message me directly or comment on the notebook itself.","3de44764":"![week_3_task.png](attachment:week_3_task.png)","7b167c5a":"# Further examination","62f46529":"Above we can see that overall the Taxi Affiliation Services is used almost twice as frequently as the next most popular option. See below for how this barchart was generated and other relevent info."}}