{"cell_type":{"0b94c619":"code","7352309c":"code","f6fa8cc6":"code","1ee17d50":"code","f5ea925d":"code","df7945be":"code","1ef55790":"code","db7ca60c":"code","c7079954":"code","c6e8147b":"code","ef566530":"code","b4c55ac4":"code","c5a9fecd":"code","4b54a75a":"code","7703dcf1":"code","da6c6fa2":"markdown","2ec22387":"markdown","781da5b7":"markdown","21824d5e":"markdown","6d553cb7":"markdown","fe0b82b4":"markdown","6b33226f":"markdown","b7b4bd76":"markdown","8843f3a2":"markdown","dd26bf45":"markdown"},"source":{"0b94c619":"import numpy as np\nimport pandas as pd\nimport json\nimport requests\nfrom tqdm import tqdm","7352309c":"def get_first_page_per_country(country):\n    \"\"\"\n    @country: the country for which we download metadata content \n    @returns: the content downloaded\n    \"\"\"\n    api_search = f\"https:\/\/www.xeno-canto.org\/api\/2\/recordings?query=cnt:{country}\"\n    response = requests.get(api_search)\n    if response.status_code == 200:\n        response_payload = json.loads(response.content)\n        return response_payload\n    else:\n        return None\n\ndef get_page_per_country(country, page):\n    \"\"\"\n    @country: the country for which we download metadata content \n    @page: the current page to be downloaded\n    @returns: the content downloaded\n    \"\"\"\n    api_search = f\"https:\/\/www.xeno-canto.org\/api\/2\/recordings?query=cnt:{country}&page={page}\"\n    response = requests.get(api_search)\n    if response.status_code == 200:\n        response_payload = json.loads(response.content)\n        return response_payload\n    else:\n        return None\n\ndef inspect_json(json_data):\n    \"\"\"\n    @json_data: json data to be inspected\n    \"\"\"\n    print(f\"recordings: {json_data['numRecordings']}\")\n    print(f\"species: {json_data['numSpecies']}\")\n    print(f\"page: {json_data['page']}\")\n    print(f\"number pages: {json_data['numPages']}\")\n\ndef get_recordings(payload):\n    \"\"\"\n    @payload: json data from which we extract the bird recordings metadata collection\n    @returns: birds recordings metadata collection\n    \"\"\"\n    return payload[\"recordings\"]\n\ndef download_suite_from_country(country, country_initial_payload):\n    \"\"\"\n    @country: the country for which we download metadata content \n    @country_initial_payload: the initial downloaded payload for the country (1st page). We download all the other pages.\n    @returns: the content recordings (all pages, including the original one)\n    \"\"\"\n    pages = country_initial_payload[\"numPages\"]\n    \n    all_recordings = []\n    all_recordings = all_recordings + get_recordings(country_initial_payload)\n    for page in tqdm(range(2,pages+1)):\n        payload = get_page_per_country(country, page)\n        recordings = get_recordings(payload)\n        all_recordings = all_recordings + recordings\n    \n    return all_recordings","f6fa8cc6":"def download_save_all_meta_for_country(country):\n    # download first batch. From here we extract the number of pages\n    birds = get_first_page_per_country(country)\n    # let's inspect the first batch\n    inspect_json(birds)\n    print(f\"recordings in first batch: {len(get_recordings(birds))}\")\n    # download entire suite (all pages)\n    suite = download_suite_from_country(country, birds)\n    # convert the collection in a dataFrame\n    data_df = pd.DataFrame.from_records(suite)\n    # export the dataframe as a csv\n    data_df.to_csv(f\"birds_{country}.csv\", index=False)\n    print(f\"suite length: {data_df.shape[0]}\")\n    return data_df","1ee17d50":"data_df = download_save_all_meta_for_country('france')","f5ea925d":"pd.set_option('max_columns', 30)\npd.set_option('max_colwidth', 100)\ndata_df.head()","df7945be":"data_df = download_save_all_meta_for_country('romania')","1ef55790":"data_df.head()","db7ca60c":"data_df = download_save_all_meta_for_country('bulgaria')","c7079954":"data_df.head()","c6e8147b":"data_df = download_save_all_meta_for_country('italy')","ef566530":"data_df.head()","b4c55ac4":"data_df = download_save_all_meta_for_country('india')","c5a9fecd":"data_df.head()","4b54a75a":"data_df = download_save_all_meta_for_country('brazil')","7703dcf1":"data_df.head()","da6c6fa2":"### 3. Application: download all metadata of recordings from a country\n\nWe are using the utility funtions to download and save the meta information for birdsongs recording for a specific country.","2ec22387":"#### 3.5. Download India data\n\nDownload and save all data for India.","781da5b7":"#### 3.6. Download Brazil data\n\nDownload and save all data for Brazil. Brazil is one of the countries with largest collection of recordings.","21824d5e":"#### 3.4. Download Italy data\n\nDownload and save all data for Italy.","6d553cb7":"#### 3.2. Download Romania data\n\nDownload and save all data for Romania.","fe0b82b4":"### 1. Introduction\n\nThis Notebook shows how you can download additional metadata for the birds songs recording so that you enhance your training data.  \nAs an application, we will just show how to download data from specific countries. As well, you can modify the scripts to download data per family or species.  \n\nWe will run requests for **xeno-canto** public API and use them to download the data, as specified in our request.  \nThe scripts download first page and then, based on the content of the first page response, will also run repeatedly, to download all pages of response.","6b33226f":"#### 3.3. Download Bulgaria data\n\nDownload and save all data for Bulgaria.","b7b4bd76":"### 2. Functions\n\nThe functions used to download content from **xeno-canto-org** are the following:  \n\n* **get_first_page_per_country** - get, for a specific country, the first page of response, as well as metadata for the next pages;  \n* **get_page_per_country** - get a specific page per country - this is called after a first page was downloaded and is called for each subsequent page;  \n* **inspect_json** - print metadata for the first response;  \n* **get_recordings** - retrieve payload from a downloaded page;   \n* **download_suite_from_country** - end-to-end suite for downloading content for a specific country - call the above described functions.\n","8843f3a2":"#### 3.1. Download France data\n\nDownload and save all data for France.","dd26bf45":"\n\n### 2. Load Packages\n\nWe will need Python packages for **json** (to read the requested data), **requests** (to build the request to the **xeno-canto** API). We also add **tqdm** package, to show progress of using the API."}}