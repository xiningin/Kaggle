{"cell_type":{"26443564":"code","fcb87647":"code","ec73f6db":"code","47cfe3cd":"code","9efab2d9":"code","4bfd1de1":"code","58f068d2":"code","1f454b35":"code","046c23b8":"code","3f7cab24":"code","e723d3bd":"code","4ac48dc2":"code","aa5e3202":"code","e5517067":"code","439c1b69":"code","2cb3277b":"code","6647bd19":"code","862517bb":"code","cdd7b8af":"code","a16ff059":"code","039bbe9d":"code","dc910fe4":"code","912213d1":"code","ad7da2f4":"markdown"},"source":{"26443564":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","fcb87647":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","ec73f6db":"print(f\"Training data has {train.isna().sum().sum()} missing values\")\nprint(f\"Testing data has {test.isna().sum().sum()} missing values\")","47cfe3cd":"train.head()","9efab2d9":"test.head()","4bfd1de1":"sns.countplot(x = train[\"label\"])","58f068d2":"for i in [1, 10, 100]:\n    plt.imshow(train.iloc[i][1:].values.reshape(28, 28))\n    plt.show()","1f454b35":"X_train = train.drop(\"label\", axis = 1)\ny = train[\"label\"]","046c23b8":"X_train = X_train \/ 255\nX_test = test \/ 255","3f7cab24":"X_train = X_train.values.reshape(-1, 28, 28, 1)\nX_test = X_test.values.reshape(-1, 28, 28, 1)","e723d3bd":"X_train.shape","4ac48dc2":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.compat.v1 import ConfigProto\nfrom tensorflow.compat.v1 import InteractiveSession\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.layers.experimental import preprocessing","aa5e3202":"y_train = to_categorical(y)","e5517067":"config = ConfigProto()\nconfig.gpu_options.allow_growth = True\nsession = InteractiveSession(config = config)","439c1b69":"model = keras.Sequential([\n    layers.InputLayer([28,28,1]),\n    \n    preprocessing.RandomTranslation(height_factor = 0.1, width_factor = 0.1),\n    \n    layers.Conv2D(filters = 32, kernel_size = 3, activation = \"relu\", padding = \"same\"),\n    layers.MaxPooling2D(),\n    layers.BatchNormalization(),\n    \n    layers.Conv2D(filters = 64, kernel_size = 3, activation = \"relu\", padding = \"same\"),\n    layers.MaxPooling2D(),\n    layers.BatchNormalization(),\n    \n    layers.Conv2D(filters = 128, kernel_size = 3, activation = \"relu\", padding = \"same\"),\n    layers.Conv2D(filters = 128, kernel_size = 3, activation = \"relu\", padding = \"same\"),\n    layers.MaxPooling2D(),\n    layers.BatchNormalization(),\n    \n    layers.Flatten(),\n    layers.Dense(128, activation = \"relu\"),\n    layers.Dropout(rate = 0.2),\n    layers.Dense(10, activation = \"softmax\")\n])","2cb3277b":"model.compile(optimizer = \"adam\", loss = \"categorical_crossentropy\", metrics = [\"categorical_accuracy\"])","6647bd19":"history = model.fit(X_train, y_train, validation_split = 0.2, batch_size = 64, epochs = 100)","862517bb":"history_df = pd.DataFrame(history.history)\nhistory_df","cdd7b8af":"history_df.loc[:, [\"loss\", \"val_loss\"]].plot()\nhistory_df.loc[:, [\"categorical_accuracy\", \"val_categorical_accuracy\"]].plot()","a16ff059":"results = np.argmax(model.predict(X_test), axis = -1)\nresults","039bbe9d":"X_test.shape","dc910fe4":"submission = pd.DataFrame({\"ImageId\": range(1, 28001), \"Label\": results})\nsubmission","912213d1":"submission.to_csv(\"submission.csv\")","ad7da2f4":"Data taken from [Kaggle Digit Recognizer Competition](https:\/\/www.kaggle.com\/c\/digit-recognizer)"}}