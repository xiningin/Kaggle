{"cell_type":{"7a8143e5":"code","05fce714":"code","9321e16a":"code","50db409a":"code","ef8e5b63":"code","49a3cc62":"code","0d463310":"code","e2e0f7fb":"code","a1e62fc0":"code","690656be":"code","a9df0b27":"code","07642992":"code","d742327c":"markdown","945db9ea":"markdown","e776da69":"markdown","7c1afced":"markdown","431a4deb":"markdown","4cd3e80a":"markdown","c97535d5":"markdown","6c0f7dea":"markdown","e762de70":"markdown","ff300730":"markdown"},"source":{"7a8143e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport glob\nimport cv2\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n\nimport os\n#print(os.listdir(\"..\/input\"))\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n# Any results you write to the current directory are saved as output.\n\n# Any results you write to the current directory are saved as output.","05fce714":"(\"..\/input\/fruits-360_dataset\/fruits-360\/Training\/Banana\/*.JPG\")\n\nfruits=[]\nfiles=glob.glob(\"..\/input\/fruits-360_dataset\/fruits-360\/Training\/Banana\/*\")\nfiles2=glob.glob(\"..\/input\/fruits-360_dataset\/fruits-360\/Training\/Avocado\/*\")\n\nfor i in files:\n    im=cv2.imread(i,0)\n    fruits.append(im)\nfor i in files2:\n    im2=cv2.imread(i,0)\n    fruits.append(im2)\n    \nfruits2=np.asarray(fruits)\nfruits2=fruits2\/255","9321e16a":"x=fruits2\nzeros=np.zeros(427)\nones=np.ones(490)\ny=np.concatenate((zeros,ones),axis=0).reshape(x.shape[0],1)\n    ","50db409a":"print(x.shape)\nprint(y.shape)","ef8e5b63":"plt.subplot(1,2,1)\nplt.imshow(x[260])\nplt.axis(\"off\")\nplt.subplot(1,2,2)\nplt.imshow(x[500])\nplt.axis(\"off\")\nplt.show()\nplt.subplot(1,2,1)\nplt.imshow(x[1])\nplt.axis(\"off\")\nplt.subplot(1,2,2)\nplt.imshow(x[900])\nplt.axis(\"off\")\nplt.show()\nplt.subplot(1,2,1)\nplt.imshow(x[120])\nplt.axis(\"off\")\nplt.subplot(1,2,2)\nplt.imshow(x[820])\nplt.axis(\"off\")\nplt.show()","49a3cc62":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)","0d463310":"x_train_flatten=x_train.reshape(x_train.shape[0],x_train.shape[1]*x_train.shape[2])\nx_test_flatten=x_test.reshape(x_test.shape[0],x_test.shape[1]*x_train.shape[2])","e2e0f7fb":"print(x_train_flatten.shape)\nprint(x_test_flatten.shape)","a1e62fc0":"def sigmoid(z):\n    y_head=1\/(1+np.exp(-z))\n    return y_head","690656be":"x_train_flatten.shape","a9df0b27":"from keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom keras.models import Sequential\nfrom keras.layers import  Dense\n\ndef build_classifier():\n    classifier=Sequential()\n    classifier.add(Dense(units=8,kernel_initializer=\"uniform\",activation=\"relu\",\n                         input_dim=x_train_flatten.shape[1]))\n    classifier.add(Dense(units=4,kernel_initializer=\"uniform\",activation=\"relu\"))\n    classifier.add(Dense(units=1,kernel_initializer=\"uniform\",activation=\"sigmoid\"))\n    classifier.compile(optimizer=\"adam\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])\n    \n    return classifier\nclassifier=KerasClassifier(build_fn=build_classifier,epochs=10)\naccuracies=cross_val_score(estimator=classifier,X=x_train_flatten,y=y_train,cv=3)\nmean=accuracies.mean()\nvariance=accuracies.std()\n\nprint(\"accuracy mean: \",str(mean))\nprint(\"accuracy variance: \",str(variance))\n","07642992":"import seaborn as sns\nfrom sklearn.metrics import confusion_matrix\nclassifier.fit(x_train_flatten,y_train)\ny_pred=classifier.predict(x_train_flatten)\nconf_mat=confusion_matrix(y_train,y_pred)\nf,ax=plt.subplots(figsize=(5,5))\nsns.heatmap(conf_mat,annot=True,linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\",fmt=\".1f\",ax=ax)\nplt.show()\n","d742327c":"3 samples of both fruits","945db9ea":"We defined our sigmoid function to calculate output values.","e776da69":"**We reduced our 3D matrix to 2D matrix in order to use our input labels, they should be 2D. Now they are in form of 100x100=10000 pixels.**","7c1afced":"**In conclusion, at the beginning we have only images. We wanted to make an image classification to seperate avocados and bananas.**\n1. We converted all images to array with their pixels.\n1. We marked bananas with number 1 and avocados with number 0.\n1. We used keras library to classify both fruits.\n1. We found accuracy and variance values.","431a4deb":"We predicted zeros(avocados) 100% but we should improve our system for bananas.","4cd3e80a":"**We have our datas as(x) and outputs(y),  y includes zeros(avocado) and ones(banana)                                             \namount of bananas are 490, amount of avocados are 427**","c97535d5":"**Normally the data is at image form. We should convert image data to array so we will use cv2 library.  **","6c0f7dea":"After conversion, the pixels are in array from.","e762de70":"We have a ccuracy 0.9331 and variance of 0.0037. They both are really good numbers.","ff300730":"917 is total amount of fruits (avocado and banana). 100x100 is our pixels."}}