{"cell_type":{"60a02eab":"code","c6391a92":"code","96b1282d":"code","8d4ada50":"code","d4d0ca4c":"code","d91f15b2":"code","3e778776":"code","1b8ea139":"code","383b0cb2":"code","2f4003df":"code","04fc4e8c":"code","9d98b8a5":"code","7e5135b4":"code","9b79770c":"code","ed59bf8c":"code","da89247c":"code","d4c84dfb":"code","b240415f":"code","7cbfac91":"code","49fa64c6":"code","dc7a6064":"markdown","56915cf1":"markdown","a447c729":"markdown","c4dd0ccc":"markdown","910531cc":"markdown","60bdc54e":"markdown"},"source":{"60a02eab":"import numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy","c6391a92":"REF = 1010\nmu,sigma = REF,5\ns = np.random.normal(mu, sigma, 200)\nsns.displot(s)","96b1282d":"#Init\n_x0_0 = 1000\n_x1_0 = _x0_0\nprevious_estimate = current_estimate = _x1_0\nnb_measure = 0\nkalman_gain = 1\nestimation = []\nfor measurement in s:\n    previous_estimate = current_estimate\n    nb_measure+=1\n    kalman_gain = 1\/nb_measure\n    current_estimate = previous_estimate + kalman_gain*(measurement-previous_estimate)\n    estimation.append(current_estimate)","8d4ada50":"from matplotlib.pyplot import figure\n\nfigure(figsize=(8, 6), dpi=80)\nplt.plot(s)\nplt.axhline(y=1010, color='r', linestyle='-')\nplt.plot(estimation)\nplt.show()","d4d0ca4c":"values =[30110.0,30265.0,30740.0,30750.0,31135.0,31015.0,31180.0,31610.0,31960.0,31865.0]\n_x0_0 = 30000.0\n_dx0_0 = 40.0\ndt = 5.0","d91f15b2":"#Init\nalpha,beta = 0.2,0.1\nprevious_estimate = current_estimate = next_estimate = _x0_0 + dt*_dx0_0\nd_previous_estimate = d_current_estimate = d_next_estimate = _dx0_0","3e778776":"for z in values:\n    previous_estimate = next_estimate\n    d_previous_estimate = d_next_estimate\n    \n    current_estimate = previous_estimate + alpha*(z - previous_estimate)\n    d_current_estimate = d_previous_estimate + beta*((z-previous_estimate))\/dt\n    \n    next_estimate  = current_estimate + dt*d_current_estimate\n    d_next_estimate = d_current_estimate\n    \n    print(current_estimate,d_current_estimate,next_estimate,d_next_estimate)","1b8ea139":"values = [30160,30365,30890,31050,31785,32215,33130,34510,36010,37265]\n_x0_0 = 30000.0\n_dx0_0 = 50.0\n_ddx0_0 = 0.0\n\nalpha =  0.5\nbeta = 0.4\ngamma = 0.1\ndt = 5.0","383b0cb2":"#init\n\nprevious_estimate = current_estimate = next_estimate = x1_0 = _x0_0 + _dx0_0*dt + _ddx0_0*((dt**2)\/2.0)\nd_previous_estimate = d_current_estimate = d_next_estimate = _dx1_0 = _dx0_0 + _ddx0_0*dt\ndd_previous_estimate = dd_current_estimate = dd_next_estimate = _ddx1_0 = _ddx0_0","2f4003df":"for z in values:\n    previous_estimate = next_estimate\n    d_previous_estimate  = d_next_estimate\n    dd_previous_estimate = dd_next_estimate\n    \n    #Calculating current estimate using state update equations\n    \n    current_estimate = previous_estimate + alpha*(z - previous_estimate)\n    d_current_estimate = d_previous_estimate + beta*((z-previous_estimate)\/dt)\n    dd_current_estimate = dd_previous_estimate + gamma*((z -previous_estimate)\/(0.5*(dt**2)))\n    \n    \n    #Calculating next state estimate using state extrapolation equations\n    \n    next_estimate = current_estimate + d_current_estimate*dt + dd_current_estimate*(dt**2)\/2.0\n    d_next_estimate = d_current_estimate + dd_current_estimate*dt\n    dd_next_estimate = dd_current_estimate\n    \n    print((\"{:.1f}  \"*6).format(current_estimate,d_current_estimate,dd_current_estimate,\n                               next_estimate,d_next_estimate,dd_next_estimate))\n    \n    ","04fc4e8c":"values = np.asarray([1030.0,989.0,1017.0,1009.0,1013.0,979.0,1008.0,1042.0,1012.0,1011.0])","9d98b8a5":"from matplotlib import rcParams\n\n# figure size in inches\nrcParams['figure.figsize'] = 15,1\nx_axis = np.arange(900, 1100, 0.0001)\nplt.plot(x_axis, scipy.stats.norm.pdf(x_axis,values[0],np.sqrt((1\/10)*np.sum(np.square(values-1030.0)))))\nplt.show()","7e5135b4":"values = [48.54,47.11,55.01,55.15,49.89,40.85,46.72,50.05,51.27,49.95]","9b79770c":"_x0_0 = 60\nvar0 = 225\np0_0 = var0\n_x1_0 = _x0_0\np1_0 = p0_0\nK = 0 \nr1 = 25 #standard deviation of the altimeter is 5\n\nuncertainty_estimate = extrapolated_estimate_uncertainty= p1_0\nuncertainty_measure = r1\nprevious_estimate = next_estimate =  _x1_0\nestimates_list = []","ed59bf8c":"for z in values:\n    \n    previous_estimate = next_estimate\n    \n    previous_uncertainty_estimate = extrapolated_estimate_uncertainty\n    \n    #State Update\n    \n    K = (previous_uncertainty_estimate)\/(previous_uncertainty_estimate + uncertainty_measure)\n    \n    current_estimate = previous_estimate + K*(z-previous_estimate)\n    estimates_list.append(current_estimate)\n    \n    current_estimate_uncertainty = (1-K)*uncertainty_estimate\n    \n    #Prediction\n    \n    next_estimate = current_estimate\n    \n    extrapolated_estimate_uncertainty = current_estimate_uncertainty\n    \n    print((\"{:.2f}  \"*6).format(z,K,current_estimate,current_estimate_uncertainty,\n                               next_estimate,extrapolated_estimate_uncertainty))\n    \n     \n    ","da89247c":"from matplotlib import rcParams\n\n# figure size in inches\nrcParams['figure.figsize'] = 15,8   \nsns.lineplot(x=np.arange(len(values)),y=values)\nsns.lineplot(x=np.arange(len(values)),y=50)\nsns.lineplot(x=np.arange(len(values)),y=estimates_list)\n    ","d4c84dfb":"true_values = [49.979,50.025,50.0,50.003,49.994,50.002,49.999,50.006,49.998,49.991]\nmeasured_values = [49.95,49.967,50.1,50.106,49.992,49.819,49.933,50.007,50.023,49.99]\ndt= 5.0\nmeasurement_error = 0.1**2\nq = 0.0001\ntrue_temp=50.0","b240415f":"len(true_values)==len(measured_values)","7cbfac91":"#Init\n\nnext_estimate = _x0_0 = _x1_0 = 10.0\np0_0 = 10000\nnext_estimate_uncertainty = p1_0 = p0_0 + q","49fa64c6":"for z in measured_values:\n    \n    previous_estimate_uncertainty = next_estimate_uncertainty\n    preivous_estimate =  next_estimate\n    \n    # Measurement\n    \n    # State Update\n    K = (previous_estimate_uncertainty)\/(previous_estimate_uncertainty + measurement_error)\n    \n    current_estimate = previous_estimate + K*(z-previous_estimate)\n    current_estimate_uncertainty = (1-K)*previous_estimate_uncertainty\n    \n    # State Extrapolation \/ Predict\n    \n    next_estimate = current_estimate\n    next_estimate_uncertainty = current_estimate_uncertainty\n    print((\"{:.8f}  \"*6).format(z,K,current_estimate,current_estimate_uncertainty,\n                               next_estimate,next_estimate_uncertainty))\n    ","dc7a6064":"**Estimate the height of a building**","56915cf1":"**2) Plane**","a447c729":"**One Dimensional Kalman Filter without Process Noise**","c4dd0ccc":"**1) Weight of Gold**","910531cc":"**Estimating the temperature of the liquid in a tank** \n\n(Not dynamic but with process noise)","60bdc54e":"**3) Plane - Alpha,Beta,Gamma filter**"}}