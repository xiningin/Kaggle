{"cell_type":{"e4071ab6":"code","675cd4b7":"code","fe66a021":"code","011ddca4":"code","454d1a45":"code","d4575f42":"code","1e46af8a":"code","27129534":"code","4ee0071b":"code","c8218635":"code","4655e337":"code","ca9525e5":"code","198b91a5":"code","de6bb3f4":"code","03f61b8f":"code","1a50f4a4":"code","5aaae238":"code","5c2f03e5":"code","bf329ce4":"code","dc6b6549":"code","aa2398ec":"code","90af67a9":"code","2df7ceb2":"code","d924b990":"code","e2713b4b":"code","7215ccad":"code","fda582b3":"code","ceea772b":"code","05bb7f23":"code","c8b8fabf":"code","9802b3fd":"code","a8200e12":"code","f6942375":"code","32d30fa7":"code","036d87ec":"code","c18fbd8f":"code","162e773f":"code","6746a35d":"code","7d24abe5":"code","6f0c4a2a":"code","edbbad2d":"code","05ffe3b5":"code","30032bbc":"code","cf184fd1":"code","bbb44b4e":"code","39bc627c":"code","4f85b47c":"code","6fea24ca":"code","48652436":"code","0e04af02":"code","4dc2f628":"code","46333cca":"code","e5d31f20":"code","7b05bb7c":"code","11e8336c":"code","27d4aadf":"code","26eadc22":"code","4fd44608":"code","4e8e4f5e":"code","44e0f96e":"code","529c4f31":"code","0036ec70":"code","919aefcf":"markdown","fe3d8225":"markdown","2896cb00":"markdown","7ec9e8a3":"markdown","116b5180":"markdown","cbb30c68":"markdown","fd996624":"markdown","e60caaf0":"markdown","221c5668":"markdown","564fdfe5":"markdown","617488aa":"markdown","7cab3e6c":"markdown","7d11b160":"markdown","b18f31a1":"markdown","eec9f541":"markdown","4d6c9e9e":"markdown","9bde67ca":"markdown","529b1f57":"markdown","b87aa1f5":"markdown","94c06d38":"markdown","542f82f3":"markdown","bbe8537b":"markdown","6736639d":"markdown","2af1ae01":"markdown","eb9db8a5":"markdown","76f7de67":"markdown","38ad4f59":"markdown","b4200d7a":"markdown","60524d64":"markdown","8832785f":"markdown","8f49ab63":"markdown","fabf1f3a":"markdown","11012954":"markdown","586b83d9":"markdown","0c09bedc":"markdown","8b6517f9":"markdown","9f2ae815":"markdown","e0183488":"markdown","08bfaa49":"markdown","37cce08f":"markdown","6fe101a8":"markdown","fcb31078":"markdown","53ab4dd8":"markdown","c5d364c0":"markdown","6b12c19a":"markdown","2d974449":"markdown","f1327fe5":"markdown","f1d2b3de":"markdown","0fd9e45a":"markdown"},"source":{"e4071ab6":"!pip install missingno --quiet","675cd4b7":"import numpy as np\nfrom scipy import stats\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport missingno as msno\n%matplotlib inline\n\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.model_selection import RepeatedStratifiedKFold, cross_val_score, RandomizedSearchCV\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.ensemble import AdaBoostClassifier, ExtraTreesClassifier, GradientBoostingClassifier, HistGradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.naive_bayes import BernoulliNB, GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.neighbors import KNeighborsClassifier, NearestCentroid\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.svm import LinearSVC, NuSVC, SVC\nfrom sklearn.linear_model import Lasso, LogisticRegression, PassiveAggressiveClassifier, Perceptron, RidgeClassifier, SGDClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import classification_report,confusion_matrix","fe66a021":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\ndf = pd.concat([train_df, test_df]).reset_index(drop=True)\ntest_passenger_ids = test_df['PassengerId']","011ddca4":"train_df.head()","454d1a45":"train_df.info()","d4575f42":"train_df.describe()","1e46af8a":"df.drop(columns=['PassengerId'], inplace=True)","27129534":"msno.matrix(df)","4ee0071b":"df.isnull().sum() * 100 \/ len(df)","c8218635":"df.dropna(thresh=int(len(df) \/ 2), axis=1, inplace=True)","4655e337":"df.replace({ 'Sex': { 'male': 'Male', 'female': 'Female' } }, inplace=True)","ca9525e5":"df.sample(5)","198b91a5":"df['Sex'] = df['Sex'].astype('category')\ndf['Embarked'] = df['Embarked'].astype('category')","de6bb3f4":"df.info()","03f61b8f":"sns.pairplot(data=train_df[['Age', 'Fare']])","1a50f4a4":"train_df_slice = df[:len(train_df)].copy()\nprint(f\"# of rows before using Z-Score: {len(train_df_slice['Fare'])}\")\nprint(f\"Skewness before using Z-Score: {train_df_slice['Fare'].skew()}\")\ntrain_df_slice['Fare'] = train_df_slice[np.abs(stats.zscore(train_df_slice['Fare']) < 3)]['Fare']\ntrain_df_slice.dropna(subset=['Fare'], inplace=True)\nprint(f\"# of rows after using Z-Score: {len(train_df_slice['Fare'])}\")\nprint(f\"Skewness after using Z-Score: {train_df_slice['Fare'].skew()}\")\ndf.drop(index=range(0, len(train_df)), inplace=True)\ndf = pd.concat([train_df_slice, df]).reset_index(drop=True)","5aaae238":"sns.pairplot(data=train_df, hue='Survived')","5c2f03e5":"plt.figure(figsize=(12, 8))\nsns.heatmap(train_df.corr(method='pearson'), annot=True)","bf329ce4":"sns.catplot(kind='count', x='Survived', data=train_df)","dc6b6549":"sns.catplot(kind='count', x='Pclass', data=train_df)","aa2398ec":"sns.catplot(kind='count', x='Sex', data=train_df)","90af67a9":"sns.catplot(kind='count', x='Survived', hue='Pclass', data=train_df)","2df7ceb2":"sns.catplot(kind='bar', x='Pclass', y='Survived', data=train_df)","d924b990":"train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","e2713b4b":"sns.catplot(kind='count', x='Survived', hue='Sex', data=train_df)","7215ccad":"sns.catplot(kind='bar', x='Sex', y='Survived', data=train_df)","fda582b3":"train_df[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","ceea772b":"sns.catplot(kind='count', x='Survived', hue='Pclass', col='Sex', data=train_df)","05bb7f23":"sns.catplot(kind='point', x='Pclass', y='Survived', data=train_df, col='Embarked', hue='Sex')","c8b8fabf":"sns.displot(kind='hist', x='Age', data=train_df, bins=8)","9802b3fd":"sns.displot(kind='hist', x='Age', data=train_df, col='Survived', bins=8)","a8200e12":"sns.displot(kind='hist', x='Age', data=train_df, row='Pclass', col='Survived', bins=8)","f6942375":"train_df[(train_df['Age'] <= 10) & (train_df['Survived'] == 0)]","32d30fa7":"plt.figure(figsize=(12, 6))\nsns.displot(kind='hist', x='Fare', data=train_df, kde=True, aspect=3)","036d87ec":"plt.figure(figsize=(12, 6))\nsns.displot(kind='hist', x='Fare', data=train_df, hue='Survived', kde=True, aspect=3)","c18fbd8f":"sns.catplot(kind='box', x='Survived', y='Fare', data=train_df)","162e773f":"sns.jointplot(x='Fare', y='Age', data=train_df, hue='Survived')","6746a35d":"sns.catplot(kind='bar', x='Sex', y='Fare', data=train_df, row='Embarked', col='Survived')","7d24abe5":"sns.catplot(kind='count', x='Parch', data=train_df)","6f0c4a2a":"sns.catplot(kind='bar', x='Parch', y='Survived', data=train_df)","edbbad2d":"train_df[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","05ffe3b5":"sns.catplot(kind='count', x='SibSp', data=train_df)","30032bbc":"sns.catplot(kind='bar', x='SibSp', y='Survived', data=train_df)","cf184fd1":"train_df[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","bbb44b4e":"sns.catplot(kind='violin', x='Survived', y='Parch', data=train_df[train_df['Parch'] > 0], hue='Sex', split=True)","39bc627c":"print(f\"\"\"\nFemales (Parch > 0, Survived = 0) {len(train_df[(train_df['Parch'] > 0) & (train_df['Sex'] == 'Female') & (train_df['Survived'] == 0)])}\nMales (Parch > 0, Survived = 0) {len(train_df[(train_df['Parch'] > 0) & (train_df['Sex'] == 'Male') & (train_df['Survived'] == 0)])}\nFemales (Parch > 0, Survived = 1) {len(train_df[(train_df['Parch'] > 0) & (train_df['Sex'] == 'Female') & (train_df['Survived'] == 1)])}\nMales (Parch > 0, Survived = 1) {len(train_df[(train_df['Parch'] > 0) & (train_df['Sex'] == 'Male') & (train_df['Survived'] == 1)])}\n\"\"\")","4f85b47c":"sns.catplot(kind='violin', x='Survived', y='SibSp', data=train_df[train_df['SibSp'] > 0], hue='Sex', split=True)","6fea24ca":"print(f\"\"\"\nFemales (SibSp > 0, Survived = 0) {len(train_df[(train_df['SibSp'] > 0) & (train_df['Sex'] == 'Female') & (train_df['Survived'] == 0)])}\nMales (SibSp > 0, Survived = 0) {len(train_df[(train_df['SibSp'] > 0) & (train_df['Sex'] == 'Male') & (train_df['Survived'] == 0)])}\nFemales (SibSp > 0, Survived = 1) {len(train_df[(train_df['SibSp'] > 0) & (train_df['Sex'] == 'Female') & (train_df['Survived'] == 1)])}\nMales (SibSp > 0, Survived = 1) {len(train_df[(train_df['SibSp'] > 0) & (train_df['Sex'] == 'Male') & (train_df['Survived'] == 1)])}\n\"\"\")","48652436":"sns.catplot(kind='count', x='Embarked', col='Survived', hue='Pclass', data=train_df)","0e04af02":"df['Title'] = df['Name'].str.extract('([A-Za-z]+)\\.', expand=False)\ndf['Title'] = df['Title'].replace(\n    ['Lady', 'Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],\n    'Rare'\n)\ndf['Title'] = df['Title'].replace({\n    'Mlle': 'Miss',\n    'Ms': 'Miss',\n    'Mme': 'Mrs'\n})\ndf['Title'] = df['Title'].astype('category')\n\ndf.drop(columns=['Name'], inplace=True)","4dc2f628":"sns.catplot(kind='count', x='Title', data=df)","46333cca":"sns.catplot(kind='point', x='Title', y='Survived', data=df)","e5d31f20":"df['Relatives'] = df['SibSp'] + df['Parch']","7b05bb7c":"sns.catplot(kind='count', x='Relatives', data=df)","11e8336c":"sns.catplot(kind='point', x='Relatives', y='Survived', data=df)","27d4aadf":"df['Ticket'] = [\n    ticket.replace('.', '').replace('\/', '').strip().split(' ')[0]\n    if not ticket.isdigit()\n    else 'X'\n    for ticket in list(df['Ticket'])\n]\ndf['Ticket'] = df['Ticket'].astype('category')","26eadc22":"df['Ticket'].value_counts()","4fd44608":"X_train = df[:len(train_df_slice)].copy()\ny_train = X_train['Survived'].astype('int32')\nX_train.drop(columns=['Survived'], inplace=True)\n\nX_test = df[len(train_df_slice):].copy()\nX_test.drop(columns=['Survived'], inplace=True)","4e8e4f5e":"nc_feature_names = ['Sex', 'Ticket', 'Embarked', 'Title']\nn_feature_names = ['Age', 'Fare']\noc_feature_names = ['Pclass', 'SibSp', 'Parch', 'Relatives']\n\nncfp = Pipeline([\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('encoder', OneHotEncoder(handle_unknown='ignore', sparse=False))\n])\n\nnfp = Pipeline([\n    ('imputer', SimpleImputer(strategy='mean')),\n    ('scaler', StandardScaler())\n])\n\npreprocessor = ColumnTransformer([\n    ('nc', ncfp, nc_feature_names),\n    ('n', nfp, n_feature_names)\n], remainder='passthrough')\n\nX_train = preprocessor.fit_transform(X_train)\nX_test = preprocessor.transform(X_test)\n\nX_train_df = pd.DataFrame(X_train, columns=[\n    *preprocessor.named_transformers_['nc']['encoder'].get_feature_names(nc_feature_names),\n    *n_feature_names,\n    *oc_feature_names\n])","44e0f96e":"models = [\n    ('ABC', AdaBoostClassifier()),\n    ('BNB', BernoulliNB()),\n    ('DTC', DecisionTreeClassifier()),\n    ('ETC', ExtraTreeClassifier()),\n    ('ETSC', ExtraTreesClassifier()),\n    ('GNB', GaussianNB()),\n    ('GPC', GaussianProcessClassifier()),\n    ('GBC', GradientBoostingClassifier()),\n    ('HGBC', HistGradientBoostingClassifier()),\n    ('KNC', KNeighborsClassifier()),\n    ('LDA', LinearDiscriminantAnalysis()),\n    ('LSVC', LinearSVC(max_iter=5000)),\n    ('LR', LogisticRegression()),\n    ('MLPC', MLPClassifier(max_iter=5000)),\n    ('NC', NearestCentroid()),\n    ('NSVC', NuSVC(max_iter=5000)),\n    ('PAC', PassiveAggressiveClassifier()),\n    ('P', Perceptron()),\n    ('RFC', RandomForestClassifier()),\n    ('RC', RidgeClassifier()),\n    ('SGDC', SGDClassifier()),\n    ('SVC', SVC()),\n    ('LGBMC', LGBMClassifier()),\n    ('XGBC', XGBClassifier(eval_metric='error', use_label_encoder=False)),\n    ('CBC', CatBoostClassifier(verbose=False))\n]\n\nnames = []\nresults = []\nfor name, model in models:\n    kfold = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=101)\n    cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring='accuracy')\n    names.append(name)\n    results.append(cv_results)\n    print(f'{name}: {cv_results.mean()} ({cv_results.std()})')\n\nfig = plt.figure(figsize=(16, 9))\nfig.suptitle('Model Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","529c4f31":"param_grid = {\n    'C': [0.01, 0.1, 1.0, 10, 100, 1000, 10000, 100000],\n    'gamma': ['scale', 'auto', 0.0001, 0.001, 0.01, 0.1, 1, 10],\n    'kernel': ['rbf'],\n    'random_state': [42]\n}\n\nmodel = SVC()\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=42)\nsearch = RandomizedSearchCV(model, param_grid, scoring='accuracy', cv=cv, random_state=42)\nsearch_result = search.fit(X_train, y_train)\nprint(f'Best Score: {search_result.best_score_}')\nprint(f'Best Hyper-parameters: {search_result.best_params_}')","0036ec70":"model = SVC(C=100000, gamma=0.0001, random_state=42)\nmodel.fit(X_train, y_train)\n\nresults = pd.concat([\n    test_passenger_ids,\n    pd.Series(model.predict(X_test), name='Survived')\n], axis=1)\n\nresults.to_csv('submission.csv',index=False)","919aefcf":"**Remark**: Unsurprisingly, majority of 3rd class passengers have not survived.","fe3d8225":"### Clean and Prepare","2896cb00":"**Remark**: It's no surprise to see that majority of males from 3rd class have not survived, but for some reason, it's pretty shocking to see the number of females from the 3rd class that have not survived, when compared to their counterparts from 1st or 2nd class.","7ec9e8a3":"#### Feature Creation","116b5180":"### Impute, Scale and Encode","cbb30c68":"**Remark**: `Fare` is the only continuous numerical feature whose data contains a lot of outliers, which makes it highly unnormalised.","fd996624":"### Analyse","e60caaf0":"**Remark**: The plots for passengers of 3rd class are looking shockingly different from the ones for 2nd and 1st class. No surprises, just another reaffirmation that the majority of the 3rd class passengers did not survive.","221c5668":"**Remark**: The best performing machine learning model is `SVC`, with an accuracy score of ~83.08%.","564fdfe5":"**Remark**: Unsurprisingly, kids aged between 0-10 years had the highest survival rate.","617488aa":"#### Drop Features with >=50% Missing Values","7cab3e6c":"### Pick a Model","7d11b160":"### Feature Transformation","b18f31a1":"## Feature Engineering","eec9f541":"# Titanic - Machine Learning from Disaster","4d6c9e9e":"### Train\/Test Split","9bde67ca":"On April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\n**Features**:\n* PassengerId - Passenger's Identifier\n* *Survived* - Survival (0 = No, 1 = Yes)\n* Pclass - Ticket Class (1 = 1st, 2 = 2nd, 3 = 3rd)\n* Name - Passenger's Name\n* Sex - Passenger's Sex\n* Age - Passenger's Age in Years\n* SibSp - # of Siblings\/Spouses Aboard the Titanic\n* Parch - # of Parents\/Children Aboard the Titanic\n* Ticket - Ticket Number\n* Fare - Passenger Fare\n* Cabin - Cabin Number\n* Embarked - Port of Embarkation (C = Cherbourg, Q = Queenstown, S = Southampton)","529b1f57":"#### Drop Irrelevant Features","b87aa1f5":"**Remark**: The majority of fares are below $50. Even though a lot of outliers were handled above, the distribution is nowhere near normal.","94c06d38":"## Exploratory Data Analysis (EDA)","542f82f3":"**Remark:** There are 63% more females that survived while having at least 1 parent\/child on board. The relationship is almost inverse when it comes to males, with increase of 43% in mortality when traveling with at least 1 parent\/child.","bbe8537b":"**Remark**: Port of embarkation correlates with survival rates.","6736639d":"**Remark**: Around 74% of female passengers survived, while only 18% of male passengers did.","2af1ae01":"**Remark**: It's no surprise that almost all kids from 1st and 2nd class have survived, but it's interesting to see that just a little less than half of the kids from 3rd class have survived as well.","eb9db8a5":"### Tune Hyper-parameters","76f7de67":"**Remark**: Passengers with 3 parents\/children on board had the highest chance of survival - 60%.","38ad4f59":"#### Type Cast","b4200d7a":"### Explore","60524d64":"**Remark**: A little over 60% of 1st class passengers did survive, while less than 30% of 3rd class passengers did.","8832785f":"**Remark**: Majority of people that paid the lowest fare price did not survive, the proportion of people that did survive increases with the fare price.","8f49ab63":"**Remark**: Female passengers had much better survival rate than males. Exception in `Embarked=C` where males had higher survival rate. This could be a correlation between `Pclass` and `Embarked` and in turn `Pclass` and `Survived`, not necessarily direct correlation between `Embarked` and `Survived`. Males had better survival rate in `Pclass=3` when compared with `Pclass=2` for C and Q ports. Ports of embarkation have varying survival rates for `Pclass=3` and among male passengers.","fabf1f3a":"**Remark**: There are 26 kids of age 10 or younger that didn't survive. It's interesting that one of them was a 1st class passenger travelling with 2 parents. Unfortunately, we can't query parents at this stage, as we have removed the `Name` feature, and there is no other at least partially reliable way to establish a relationship between data entries.","11012954":"### Evaluate Model","586b83d9":"**Remark**: `Age` is the only continuous numerical feature that contains fairly normalised data. We've slightly normalised `Fare`'s data by removing 20 extreme outliers during the `Handle Outliers` stage.","0c09bedc":"**Remark**: Passengers with 1 sibling\/spouse on board had the highest chance of survival - 53.62%.","8b6517f9":"## Import Packages","9f2ae815":"#### Handle Outliers","e0183488":"#### Remap Values","08bfaa49":"## Load Data","37cce08f":"**Remark**: It's pretty clear that `Parch` and `SibSp` are affecting survival probability in a very similar way. Hence, we can either drop one of the features or construct a `Relatives` feature that will represent a total number of passenger's parents\/children\/siblings\/spouses on board.","6fe101a8":"**Remark**: Unsurprisingly, females had a better chance of survival.","fcb31078":"**Remark**: Majority of passengers were traveling alone.","53ab4dd8":"**Remark**: The age does not have a strong correlation with the fare, there were a a lot of rich and poor people on board from all age groups. Generally, we can clearly see a better survival rate among those that paid over ~ $25-30.","c5d364c0":"## Model Training","6b12c19a":"**Numerical**: PassengerId, Age, Fare\n<br>\n**Categorical**: Survived, Pclass, Name, Sex, SibSp, Parch, Ticket, Cabin, Embarked","2d974449":"## Install Packages ","f1327fe5":"**Remark**: It's clear that we got no features that are highly correlated with the target (`Survived`).","f1d2b3de":"**Remark**: There are 54% more females that survived while having at least 1 sibling or a spouse on board. The relationship is almost inverse when it comes to males, with increase of 66% in mortality when traveling with at least 1 sibling or a spouse.","0fd9e45a":"**Remark**: The majority of people boarded the Titanic in Southampton. The majority of those were 3rd class passengers. Both of these facts explain the high mortality rate among those who boarded the ship in Southampton."}}