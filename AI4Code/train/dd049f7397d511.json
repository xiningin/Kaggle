{"cell_type":{"b95611b7":"code","924d8a90":"code","26624b2f":"code","cc625d4e":"code","a7449fb3":"code","24db83a0":"code","1f63e221":"code","40fbca0a":"code","562e0373":"code","bd66d1f6":"code","77135a20":"code","a7b7115c":"code","51aa527c":"code","b1a56650":"code","c8ae2b95":"code","bae831d2":"code","6ddf6d8f":"code","787724a3":"code","19fda1a4":"code","0c7a1049":"code","cb11b87c":"code","50fddd2a":"code","3ab0c010":"code","46eea573":"code","131de2ac":"code","cbb5e7cf":"code","d77c9dba":"code","f1a83cdc":"code","df34577b":"code","09b83364":"code","bb3fb349":"code","5e6be311":"code","3dae6dee":"code","db8b8026":"code","7ddcce50":"code","f824c8f3":"code","e9343a27":"code","4ac56f17":"code","af916bce":"code","86a06c4a":"code","9430a935":"code","c3ecf75f":"code","c6c52627":"code","b80544c9":"code","abe825d1":"code","fd8532a8":"code","be639da7":"code","71a65b18":"code","d6434ae2":"code","deee4e8f":"code","26eba4ce":"code","227fcfda":"code","e9aa8a3a":"code","09bd6d1d":"code","c50f20c4":"code","976156a1":"code","ef1a4a1d":"code","32da1482":"code","d6c40ddc":"code","2b0ec959":"code","b93d813e":"code","c88c8412":"code","cd236582":"code","3699091d":"code","2e7a7b6f":"code","c5a153da":"code","6f20d9d5":"code","d7bc3a85":"code","9a2a5e8b":"code","631583ee":"code","78f56d44":"code","cd96d835":"code","7bfea11c":"code","8636da7c":"code","7a0dbb34":"code","42f96e4b":"markdown","9fae54c2":"markdown","4530eb57":"markdown","694479b8":"markdown","fe17091d":"markdown","99547897":"markdown","b3b8da83":"markdown","b3c57ffc":"markdown","dc265ca5":"markdown","e891a645":"markdown","121fea57":"markdown","5cffa78d":"markdown","7d15ab46":"markdown","a38b82e8":"markdown"},"source":{"b95611b7":"# Printing the files in the current directory to the screen\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","924d8a90":"# NVIDIA (R) GPU driver Check\n!nvidia-smi","26624b2f":"# NVIDIA (R) Cuda compiler driver Check\n!nvcc --version","cc625d4e":"# Install RAPIDS (ML)\n!pip3 install rapids\n!pip3 install cuml","a7449fb3":"# import modules\nimport cudf, cupy, cuml\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# cudf \u2245 pandas\n# cupy \u2245 numpy\n# cuml \u2245 scikit-learn","24db83a0":"%%time\n# 1. CSV file\n# DataFrame (GPU)\ndata0 = cudf.read_csv(\"..\/input\/2000-16-traffic-flow-england-scotland-wales\/accidents_2005_to_2007.csv\")\ndata0.head()","1f63e221":"%%time\n# 2. CSV file\n# DataFrame (GPU)\ndata1 = cudf.read_csv(\"..\/input\/2000-16-traffic-flow-england-scotland-wales\/accidents_2009_to_2011.csv\")\ndata1.head()","40fbca0a":"%%time\n# 3. CSV file\n# DataFrame (GPU)\ndata2 = cudf.read_csv(\"..\/input\/2000-16-traffic-flow-england-scotland-wales\/accidents_2012_to_2014.csv\")\ndata2.head()","562e0373":"# concatenate all accident data\ndata_accidents=cudf.concat([data0, data1, data2])\ndata_accidents_original=data_accidents","bd66d1f6":"# now, our data is that:\ndata_accidents.head(3)","77135a20":"# Let's divide our data into two part and put on the screen to see all the column information more clearly.\n\n# first 16 columns of our data:  \ndata_accidents_columns=data_accidents.columns\ndata_accidents.loc[:3, data_accidents_columns[:16]]","a7b7115c":"# first 16 columns of our data:  \n\ndata_accidents.loc[:3, data_accidents_columns[16:33]]","51aa527c":"# Now, lets take a look about non values on more clear scheme: \ndata_accidents.isnull().sum()","b1a56650":"data_accidents[\"LSOA_of_Accident_Location\"][:20]","c8ae2b95":"data_accidents[\"LSOA_of_Accident_Location\"].nunique()","bae831d2":"features_to_ignore=[\"Accident_Index\",\n                    \"Police_Force\", # polis kuvveti\n                    \"Local_Authority_(District)\", # yerel y\u00f6netim - il\u00e7e \n                    \"Local_Authority_(Highway)\", #yerel y\u00f6netim - karayolu\n                    \"Junction_Detail\", # kav\u015fak detay\u0131\n                    \"Junction_Control\", # kav\u015fak kontrol\u00fc\n                    \"Did_Police_Officer_Attend_Scene_of_Accident\", # polis kaza yerine geldi mi\n                    \"LSOA_of_Accident_Location\", #kaza konumunun lsoa bilgisi? -> idk what it's. \n                   ]\n# dropping\ndata_accidents.drop(axis=1, columns=features_to_ignore, inplace=True);","6ddf6d8f":"data_accidents.info()","787724a3":"data_accidents.head(4)","19fda1a4":"features_to_convert_to_float=[\n    'Location_Easting_OSGR',\n    'Location_Northing_OSGR',\n    'Longitude',\n    'Latitude'    \n]\nfeatures_to_convert_to_int=[\n    'Accident_Severity',\n    'Number_of_Vehicles',\n    'Number_of_Casualties',\n    'Speed_limit'\n ]","0c7a1049":"# converting data types:\ndata_accidents[features_to_convert_to_float]=data_accidents.loc[:, features_to_convert_to_float].astype('float')\n\n\n# Because there is missing values cannot convert to int. So should be fill missing values. For now, i did this using median. \n# It is not right to fill features with median without looking details of the features. Now, for quickly pass, i fill median. We should discuss about it with Team. \n# Later, we should focus this details but now, we'll go on \ndata_accidents[features_to_convert_to_int] = data_accidents.loc[:, features_to_convert_to_int].astype('int')","cb11b87c":"data_accidents.describe().T","50fddd2a":"# Histogram graphs of data:\ndata_accidents.to_pandas().hist(bins=80, figsize=(18, 10))\nplt.show()","3ab0c010":"# Take a look Number_of_Casualties and Number_of_Vehicles values \ndata_accidents[\"Number_of_Casualties\"].to_pandas().value_counts(bins=10)","46eea573":"data_accidents[\"Number_of_Vehicles\"].to_pandas().value_counts(bins=10)","131de2ac":"## lats take a look correlation between numeric features and Accident_Severity features.  \ncorr_matrix = data_accidents.to_pandas().corr()\ncorr_matrix[\"Accident_Severity\"].sort_values(ascending=False)","cbb5e7cf":"data_accidents[\"Urban_or_Rural_Area\"].value_counts()","d77c9dba":"# this \"3\" values is meaningless. So i'll ignore these rows and visualise. \nUrban_or_Rural_Area_1or2=data_accidents[data_accidents.Urban_or_Rural_Area!=3]\n#Urban_or_Rural_Area_1or2","f1a83cdc":"sns.countplot(x=Urban_or_Rural_Area_1or2['Urban_or_Rural_Area'].to_pandas(), hue='Accident_Severity', data=Urban_or_Rural_Area_1or2.to_pandas())\nplt.title('Checking the Count of Genders Onboard')\nplt.rcParams[\"figure.figsize\"] = (9,4)","df34577b":"urban_area=data_accidents[data_accidents.Urban_or_Rural_Area==1].groupby(\"Accident_Severity\").size()\nrural_area=data_accidents[data_accidents.Urban_or_Rural_Area==2].groupby(\"Accident_Severity\").size()\n\nfig = plt.figure()\nax = fig.add_subplot(221)\n\nurban_area.to_pandas().plot(ax=ax, kind='pie', title='Accident Severity Rates For URBAN', figsize=[15,15],\n          autopct=lambda p: '{:.2f}%({:.0f})'.format(p,(p\/100)*urban_area.sum()))\nax = fig.add_subplot(222)\nrural_area.to_pandas().plot(ax=ax, kind='pie', title='Accident Severity Rates For RURAL', figsize=[15,15],\n          autopct=lambda p: '{:.2f}%({:.0f})'.format(p,(p\/100)*urban_area.sum()))\n","09b83364":"data_accidents[data_accidents.Urban_or_Rural_Area==1].groupby(\"Accident_Severity\").size()","bb3fb349":"road_types=data_accidents.Road_Type.unique()\nroad_types","5e6be311":"def pie_graph(nrows, ncols, conditions):\n  road_types=data_accidents[conditions]\n  print(road_types)\npie_graph(1,1,\"Road_Type\")","3dae6dee":"conditions=\"Road_Type\"\nroad_types=data_accidents[conditions].unique() #take road type names \nfor i in (range(len(road_types))):\n  print(i)","db8b8026":"# This function will display all the features that we want to see how its effect to severity of accidents \ndef pie_graph(condition):\n  cond_types=data_accidents[condition].to_pandas().unique() #take road type names \n  x = lambda x: [data_accidents[data_accidents[condition]==i].to_pandas().groupby(\"Accident_Severity\").size() for i in x] #count all severity of accident according to condition types \n  severity_counts=x(cond_types)\n  fig, axes = plt.subplots(nrows=int((len(cond_types)\/3))+1, ncols=3)\n  for i in range(len(cond_types)):\n    severity_counts[i].plot(ax=axes[int(i\/3),i%3], kind='pie', title=str(cond_types[i]), figsize=[18,18], colors=['#F0DE20', '#4AA3A7', '#FF5555'],\n          autopct=lambda p: '{:.2f}%({:.0f})'.format(p,(p\/100)*severity_counts[i].sum()))\n  plt.show()\n    \npie_graph(\"Road_Type\")","7ddcce50":"data_accidents.Light_Conditions.unique()","f824c8f3":"# now i took 5 features that it would be useful to have a look at how they affect accidents severity.\n# I took this 5 columns name --> [\"Light_Conditions\", \"Weather_Conditions\", \"Road_Surface_Conditions\", \"Speed_limit\", \"Day_of_Week\"]\nprint()\nprint(\"--------------------Effect of Light_Conditions conditions--------------------\")\npie_graph(\"Light_Conditions\")","e9343a27":"# This visualizations says to we there is no significant different between light conditions but \"No street lights\" is different. Thats weird because we excepted \"no street lights\" is more risky. But sometimes we may miss other contitions, for example, why there is no street lights? The reason of that may also be the cause of less risky accidents. May be there is less vehicle so there is no light, etc.\n\npie_graph(\"Weather_Conditions\")","4ac56f17":"# As we wait, bad weather conditions's couse to more risky accidents. There is no very big differance but there is. If we'll be goverment we can say to the our peoples; \"Be carefull snowing days if u driving\" :d\n\npie_graph(\"Road_Surface_Conditions\")","af916bce":"#\"Be carefull snowing days if u driving\"\n\npie_graph(\"Speed_limit\")","86a06c4a":"# Looking at this pie graphs. We can see there is less accident severity at 10 speed and weirdly less for 60 speed than the other, and this difference may be significant(anlaml\u0131). Thats not seems because of instance change, there is 1.6 million observe. This looking weird situation can be investigated.\n\npie_graph(\"Day_of_Week\")","9430a935":"# Road_Type\t\nlabels = data_accidents.to_pandas().Road_Type.values\nlabels = pd.unique(labels)\nsizes = data_accidents.to_pandas().Road_Type.value_counts()\nplt.bar(labels, sizes)","c3ecf75f":"labels = data_accidents.to_pandas().Road_Type.values\nlabels = pd.unique(labels)\nsizes = data_accidents.to_pandas().Road_Type.value_counts()\ncolors = ['red', 'blue', 'lightskyblue', 'orange','darkblue','yellow']\npatches, texts = plt.pie(sizes, colors=colors, shadow=True, startangle=90)\nplt.legend(patches, labels, loc=\"best\")\nplt.axis('equal')\nplt.tight_layout()\nplt.show()","c6c52627":"#Speed_limit\nlabels = data_accidents.to_pandas().Speed_limit.values\nlabels = pd.unique(labels)\nsizes = data_accidents.to_pandas().Speed_limit.value_counts()\nplt.bar(labels, sizes)","b80544c9":"labels = data_accidents.to_pandas().Speed_limit.values\nlabels = pd.unique(labels)\nsizes = data_accidents.to_pandas().Speed_limit.value_counts()\ncolors = ['red', 'blue', 'grey','gold','mediumspringgreen','lightskyblue', 'orange','darkblue']\npatches, texts = plt.pie(sizes, colors=colors, shadow=True, startangle=90)\nplt.legend(patches, labels, loc=\"best\")\nplt.axis('equal')\nplt.tight_layout()\nplt.show()","abe825d1":"#Pedestrian_Crossing-Human_Control\n#Let's change the column name first\ndata_accidents.rename(columns={'Pedestrian_Crossing-Human_Control':'Pedestrian_Crossing_Human_Control'}, inplace=True)\ndata_accidents.Pedestrian_Crossing_Human_Control","fd8532a8":"data_accidents.Pedestrian_Crossing_Human_Control.unique()","be639da7":"data_accidents.Pedestrian_Crossing_Human_Control.isnull().sum() ","71a65b18":"#Pedestrian_Crossing-Physical_Facilities\n#Let's change the column name first\ndata_accidents.rename(columns={'Pedestrian_Crossing-Physical_Facilities':'Pedestrian_Crossing_Physical_Facilities'}, inplace=True)\ndata_accidents.Pedestrian_Crossing_Physical_Facilities","d6434ae2":"data_accidents.Pedestrian_Crossing_Physical_Facilities.unique()","deee4e8f":"data_accidents.Pedestrian_Crossing_Physical_Facilities.isnull().sum() ","26eba4ce":"# Light_Conditions\nlabels = data_accidents.to_pandas().Light_Conditions.values\nlabels = pd.unique(labels)\nsizes = data_accidents.to_pandas().Light_Conditions.value_counts()\nplt.figure(figsize=(20,10))\nplt.bar(labels, sizes, width=0.5, align='center')","227fcfda":"labels = data_accidents.to_pandas().Light_Conditions.values\nlabels = pd.unique(labels)\nsizes = data_accidents.to_pandas().Light_Conditions.value_counts()\ncolors = ['red', 'blue', 'grey','gold','mediumspringgreen']\npatches, texts = plt.pie(sizes, colors=colors,  shadow=True, startangle=90)\nplt.legend(patches, labels, loc=\"best\")\nplt.axis('equal')\nplt.tight_layout()\nplt.show()","e9aa8a3a":"# Weather_Conditions\ndata_accidents.Weather_Conditions.unique()","09bd6d1d":"data_accidents.Weather_Conditions.isnull().sum() ","c50f20c4":"data_accidents.Road_Surface_Conditions.isnull().sum() ","976156a1":"data0['Road_Type'] = data0['Road_Type'].replace(\"Dual carriageway\",\"1\")\ndata0['Road_Type'] = data0['Road_Type'].replace(\"One way street\",\"2\")\ndata0['Road_Type'] = data0['Road_Type'].replace(\"Roundabout\",\"3\")\ndata0['Road_Type'] = data0['Road_Type'].replace(\"Single carriageway\",\"4\")\ndata0['Road_Type'] = data0['Road_Type'].replace(\"Slip road\",\"5\")\ndata0['Road_Type'] = data0['Road_Type'].replace(\"Unknown\",\"0\")\ndata0['Road_Type'] = cudf.to_numeric(data0['Road_Type'])\n\ndata0['Light_Conditions'] = data0['Light_Conditions'].replace(\"Darkeness: No street lighting\",\"1\")\ndata0['Light_Conditions'] = data0['Light_Conditions'].replace(\"Darkness: Street lighting unknown\",\"2\")\ndata0['Light_Conditions'] = data0['Light_Conditions'].replace(\"Darkness: Street lights present and lit\",\"3\")\ndata0['Light_Conditions'] = data0['Light_Conditions'].replace(\"Darkness: Street lights present but unlit\",\"4\")\ndata0['Light_Conditions'] = data0['Light_Conditions'].replace(\"Daylight: Street light present\",\"5\")\ndata0['Light_Conditions'] = cudf.to_numeric(data0['Light_Conditions'])\n\ndata0['Pedestrian_Crossing-Human_Control'] = data0['Pedestrian_Crossing-Human_Control'].fillna(0)\ndata0['Pedestrian_Crossing-Human_Control'] = data0['Pedestrian_Crossing-Human_Control'].replace(\"Control by other authorised person\",\"1\")\ndata0['Pedestrian_Crossing-Human_Control'] = data0['Pedestrian_Crossing-Human_Control'].replace(\"Control by school crossing patrol\",\"2\")\ndata0['Pedestrian_Crossing-Human_Control'] = data0['Pedestrian_Crossing-Human_Control'].replace(\"None within 50 metres\",\"3\")\ndata0['Pedestrian_Crossing-Human_Control'] = cudf.to_numeric(data0['Pedestrian_Crossing-Human_Control'])\n\ndata0['Pedestrian_Crossing-Physical_Facilities'] = data0['Pedestrian_Crossing-Physical_Facilities'].fillna(0)\ndata0['Pedestrian_Crossing-Physical_Facilities'] = data0['Pedestrian_Crossing-Physical_Facilities'].replace(\"Central refuge\",\"1\")\ndata0['Pedestrian_Crossing-Physical_Facilities'] = data0['Pedestrian_Crossing-Physical_Facilities'].replace(\"Footbridge or subway\",\"2\")\ndata0['Pedestrian_Crossing-Physical_Facilities'] = data0['Pedestrian_Crossing-Physical_Facilities'].replace(\"No physical crossing within 50 meters\",\"3\")\ndata0['Pedestrian_Crossing-Physical_Facilities'] = data0['Pedestrian_Crossing-Physical_Facilities'].replace(\"Pedestrian phase at traffic signal junction\",\"4\")\ndata0['Pedestrian_Crossing-Physical_Facilities'] = data0['Pedestrian_Crossing-Physical_Facilities'].replace(\"Zebra crossing\",\"5\")\ndata0['Pedestrian_Crossing-Physical_Facilities'] = data0['Pedestrian_Crossing-Physical_Facilities'].replace(\"non-junction pedestrian crossing\",\"6\")\ndata0['Pedestrian_Crossing-Physical_Facilities'] = cudf.to_numeric(data0['Pedestrian_Crossing-Physical_Facilities'])\n\ndata0['Weather_Conditions'] = data0['Weather_Conditions'].fillna(0)\ndata0['Weather_Conditions'] = data0['Weather_Conditions'].replace(\"Fine with high winds\",\"1\")\ndata0['Weather_Conditions'] = data0['Weather_Conditions'].replace(\"Fine without high winds\",\"2\")\ndata0['Weather_Conditions'] = data0['Weather_Conditions'].replace(\"Fog or mist\",\"3\")\ndata0['Weather_Conditions'] = data0['Weather_Conditions'].replace(\"Other\",\"4\")\ndata0['Weather_Conditions'] = data0['Weather_Conditions'].replace(\"Raining with high winds\",\"5\")\ndata0['Weather_Conditions'] = data0['Weather_Conditions'].replace(\"Raining without high winds\",\"6\")\ndata0['Weather_Conditions'] = data0['Weather_Conditions'].replace(\"Snowing with high winds\",\"7\")\ndata0['Weather_Conditions'] = data0['Weather_Conditions'].replace(\"Snowing without high winds\",\"8\")\ndata0['Weather_Conditions'] = data0['Weather_Conditions'].replace(\"Unknown\",\"0\")\ndata0['Weather_Conditions'] = cudf.to_numeric(data0['Weather_Conditions'])\n\ndata0['Road_Surface_Conditions'] = data0['Road_Surface_Conditions'].fillna(0)\ndata0['Road_Surface_Conditions'] = data0['Road_Surface_Conditions'].replace(\"Dry\",\"1\")\ndata0['Road_Surface_Conditions'] = data0['Road_Surface_Conditions'].replace(\"Flood (Over 3cm of water)\",\"2\")\ndata0['Road_Surface_Conditions'] = data0['Road_Surface_Conditions'].replace(\"Frost\/Ice\",\"3\")\ndata0['Road_Surface_Conditions'] = data0['Road_Surface_Conditions'].replace(\"Snow\",\"4\")\ndata0['Road_Surface_Conditions'] = data0['Road_Surface_Conditions'].replace(\"Wet\/Damp\",\"5\")\ndata0['Road_Surface_Conditions'] = cudf.to_numeric(data0['Road_Surface_Conditions'])\n\ndata0['Special_Conditions_at_Site'] = data0['Special_Conditions_at_Site'].fillna(0)\ndata0['Special_Conditions_at_Site'] = data0['Special_Conditions_at_Site'].replace(\"Auto traffic signal partly defective\",\"1\")\ndata0['Special_Conditions_at_Site'] = data0['Special_Conditions_at_Site'].replace(\"Auto traffic singal out\",\"2\")\ndata0['Special_Conditions_at_Site'] = data0['Special_Conditions_at_Site'].replace(\"Mud\",\"3\")\ndata0['Special_Conditions_at_Site'] = data0['Special_Conditions_at_Site'].replace(\"None\",\"0\")\ndata0['Special_Conditions_at_Site'] = data0['Special_Conditions_at_Site'].replace(\"Ol or diesel\",\"5\")\ndata0['Special_Conditions_at_Site'] = data0['Special_Conditions_at_Site'].replace(\"Permanent sign or marking defective or obscured\",\"6\")\ndata0['Special_Conditions_at_Site'] = data0['Special_Conditions_at_Site'].replace(\"Road surface defective\",\"7\")\ndata0['Special_Conditions_at_Site'] = data0['Special_Conditions_at_Site'].replace(\"Roadworks\",\"8\")\ndata0['Special_Conditions_at_Site'] = cudf.to_numeric(data0['Special_Conditions_at_Site'])\n\ndata0['Carriageway_Hazards'] = data0['Carriageway_Hazards'].fillna(0)\ndata0['Carriageway_Hazards'] = data0['Carriageway_Hazards'].replace(\"Any animal (except a ridden horse)\",\"1\")\ndata0['Carriageway_Hazards'] = data0['Carriageway_Hazards'].replace(\"Dislodged vehicle load in carriageway\",\"2\")\ndata0['Carriageway_Hazards'] = data0['Carriageway_Hazards'].replace(\"Involvement with previous accident\",\"3\")\ndata0['Carriageway_Hazards'] = data0['Carriageway_Hazards'].replace(\"None\",\"0\")\ndata0['Carriageway_Hazards'] = data0['Carriageway_Hazards'].replace(\"Other object in carriageway\",\"5\")\ndata0['Carriageway_Hazards'] = data0['Carriageway_Hazards'].replace(\"Pedestrian in carriageway (not injured)\",\"6\")\ndata0['Carriageway_Hazards'] = cudf.to_numeric(data0['Carriageway_Hazards'])\n\ndata0['Did_Police_Officer_Attend_Scene_of_Accident'] = data0['Did_Police_Officer_Attend_Scene_of_Accident'].fillna(0)\ndata0['Did_Police_Officer_Attend_Scene_of_Accident'] = data0['Did_Police_Officer_Attend_Scene_of_Accident'].replace(\"Yes\",\"1\")\ndata0['Did_Police_Officer_Attend_Scene_of_Accident'] = data0['Did_Police_Officer_Attend_Scene_of_Accident'].replace(\"No\",\"0\")\ndata0['Did_Police_Officer_Attend_Scene_of_Accident'] = cudf.to_numeric(data0['Did_Police_Officer_Attend_Scene_of_Accident'])","ef1a4a1d":"drop_list = [\"Accident_Index\",\"Location_Easting_OSGR\",\"Location_Northing_OSGR\",\"Longitude\",\n            \"Latitude\",\"Date\",\"Time\",\"Local_Authority_(District)\",\n            \"Local_Authority_(Highway)\",\"1st_Road_Number\",\"Junction_Detail\",\"Junction_Control\",\n            \"2nd_Road_Number\",\"LSOA_of_Accident_Location\",\"Year\"]\ndata0 = data0.drop(drop_list,axis=1)\ndata0.info()","32da1482":"data1['Road_Type'] = data1['Road_Type'].replace(\"Dual carriageway\",\"1\")\ndata1['Road_Type'] = data1['Road_Type'].replace(\"One way street\",\"2\")\ndata1['Road_Type'] = data1['Road_Type'].replace(\"Roundabout\",\"3\")\ndata1['Road_Type'] = data1['Road_Type'].replace(\"Single carriageway\",\"4\")\ndata1['Road_Type'] = data1['Road_Type'].replace(\"Slip road\",\"5\")\ndata1['Road_Type'] = data1['Road_Type'].replace(\"Unknown\",\"0\")\ndata1['Road_Type'] = cudf.to_numeric(data1['Road_Type'])\n\ndata1['Junction_Control'] = data1['Junction_Control'].replace(\"Authorised person\",\"1\")\ndata1['Junction_Control'] = data1['Junction_Control'].replace(\"Automatic traffic signal\",\"2\")\ndata1['Junction_Control'] = data1['Junction_Control'].replace(\"Giveway or uncontrolled\",\"3\")\ndata1['Junction_Control'] = data1['Junction_Control'].replace(\"Stop Sign\",\"4\")\ndata1['Junction_Control'] = cudf.to_numeric(data1['Junction_Control'])\n\ndata1['Light_Conditions'] = data1['Light_Conditions'].replace(\"Darkeness: No street lighting\",\"1\")\ndata1['Light_Conditions'] = data1['Light_Conditions'].replace(\"Darkness: Street lighting unknown\",\"2\")\ndata1['Light_Conditions'] = data1['Light_Conditions'].replace(\"Darkness: Street lights present and lit\",\"3\")\ndata1['Light_Conditions'] = data1['Light_Conditions'].replace(\"Darkness: Street lights present but unlit\",\"4\")\ndata1['Light_Conditions'] = data1['Light_Conditions'].replace(\"Daylight: Street light present\",\"5\")\ndata1['Light_Conditions'] = cudf.to_numeric(data1['Light_Conditions'])\n\ndata1['Pedestrian_Crossing-Human_Control'] = data1['Pedestrian_Crossing-Human_Control'].replace(\"Control by other authorised person\",\"1\")\ndata1['Pedestrian_Crossing-Human_Control'] = data1['Pedestrian_Crossing-Human_Control'].replace(\"Control by school crossing patrol\",\"2\")\ndata1['Pedestrian_Crossing-Human_Control'] = data1['Pedestrian_Crossing-Human_Control'].replace(\"None within 50 metres\",\"3\")\ndata1['Pedestrian_Crossing-Human_Control'] = cudf.to_numeric(data1['Pedestrian_Crossing-Human_Control'])\n\ndata1['Pedestrian_Crossing-Physical_Facilities'] = data1['Pedestrian_Crossing-Physical_Facilities'].replace(\"Central refuge\",\"1\")\ndata1['Pedestrian_Crossing-Physical_Facilities'] = data1['Pedestrian_Crossing-Physical_Facilities'].replace(\"Footbridge or subway\",\"2\")\ndata1['Pedestrian_Crossing-Physical_Facilities'] = data1['Pedestrian_Crossing-Physical_Facilities'].replace(\"No physical crossing within 50 meters\",\"3\")\ndata1['Pedestrian_Crossing-Physical_Facilities'] = data1['Pedestrian_Crossing-Physical_Facilities'].replace(\"Pedestrian phase at traffic signal junction\",\"4\")\ndata1['Pedestrian_Crossing-Physical_Facilities'] = data1['Pedestrian_Crossing-Physical_Facilities'].replace(\"Zebra crossing\",\"5\")\ndata1['Pedestrian_Crossing-Physical_Facilities'] = data1['Pedestrian_Crossing-Physical_Facilities'].replace(\"non-junction pedestrian crossing\",\"6\")\ndata1['Pedestrian_Crossing-Physical_Facilities'] = cudf.to_numeric(data1['Pedestrian_Crossing-Physical_Facilities'])\n\ndata1['Weather_Conditions'] = data1['Weather_Conditions'].fillna(0)\ndata1['Weather_Conditions'] = data1['Weather_Conditions'].replace(\"Fine with high winds\",\"1\")\ndata1['Weather_Conditions'] = data1['Weather_Conditions'].replace(\"Fine without high winds\",\"2\")\ndata1['Weather_Conditions'] = data1['Weather_Conditions'].replace(\"Fog or mist\",\"3\")\ndata1['Weather_Conditions'] = data1['Weather_Conditions'].replace(\"Other\",\"4\")\ndata1['Weather_Conditions'] = data1['Weather_Conditions'].replace(\"Raining with high winds\",\"5\")\ndata1['Weather_Conditions'] = data1['Weather_Conditions'].replace(\"Raining without high winds\",\"6\")\ndata1['Weather_Conditions'] = data1['Weather_Conditions'].replace(\"Snowing with high winds\",\"7\")\ndata1['Weather_Conditions'] = data1['Weather_Conditions'].replace(\"Snowing without high winds\",\"8\")\ndata1['Weather_Conditions'] = data1['Weather_Conditions'].replace(\"Unknown\",\"0\")\ndata1['Weather_Conditions'] = cudf.to_numeric(data1['Weather_Conditions'])\n\ndata1['Road_Surface_Conditions'] = data1['Road_Surface_Conditions'].fillna(0)\ndata1['Road_Surface_Conditions'] = data1['Road_Surface_Conditions'].replace(\"Dry\",\"1\")\ndata1['Road_Surface_Conditions'] = data1['Road_Surface_Conditions'].replace(\"Flood (Over 3cm of water)\",\"2\")\ndata1['Road_Surface_Conditions'] = data1['Road_Surface_Conditions'].replace(\"Frost\/Ice\",\"3\")\ndata1['Road_Surface_Conditions'] = data1['Road_Surface_Conditions'].replace(\"Snow\",\"4\")\ndata1['Road_Surface_Conditions'] = data1['Road_Surface_Conditions'].replace(\"Wet\/Damp\",\"5\")\ndata1['Road_Surface_Conditions'] = cudf.to_numeric(data1['Road_Surface_Conditions'])\n\ndata1['Special_Conditions_at_Site'] = data1['Special_Conditions_at_Site'].fillna(0)\ndata1['Special_Conditions_at_Site'] = data1['Special_Conditions_at_Site'].replace(\"Auto traffic signal partly defective\",\"1\")\ndata1['Special_Conditions_at_Site'] = data1['Special_Conditions_at_Site'].replace(\"Auto traffic singal out\",\"2\")\ndata1['Special_Conditions_at_Site'] = data1['Special_Conditions_at_Site'].replace(\"Mud\",\"3\")\ndata1['Special_Conditions_at_Site'] = data1['Special_Conditions_at_Site'].replace(\"None\",\"4\")\ndata1['Special_Conditions_at_Site'] = data1['Special_Conditions_at_Site'].replace(\"Ol or diesel\",\"5\")\ndata1['Special_Conditions_at_Site'] = data1['Special_Conditions_at_Site'].replace(\"Permanent sign or marking defective or obscured\",\"6\")\ndata1['Special_Conditions_at_Site'] = data1['Special_Conditions_at_Site'].replace(\"Road surface defective\",\"7\")\ndata1['Special_Conditions_at_Site'] = data1['Special_Conditions_at_Site'].replace(\"Roadworks\",\"8\")\ndata1['Special_Conditions_at_Site'] = cudf.to_numeric(data1['Special_Conditions_at_Site'])\n\ndata1['Carriageway_Hazards'] = data1['Carriageway_Hazards'].fillna(0)\ndata1['Carriageway_Hazards'] = data1['Carriageway_Hazards'].replace(\"Any animal (except a ridden horse)\",\"1\")\ndata1['Carriageway_Hazards'] = data1['Carriageway_Hazards'].replace(\"Dislodged vehicle load in carriageway\",\"2\")\ndata1['Carriageway_Hazards'] = data1['Carriageway_Hazards'].replace(\"Involvement with previous accident\",\"3\")\ndata1['Carriageway_Hazards'] = data1['Carriageway_Hazards'].replace(\"None\",\"4\")\ndata1['Carriageway_Hazards'] = data1['Carriageway_Hazards'].replace(\"Other object in carriageway\",\"5\")\ndata1['Carriageway_Hazards'] = data1['Carriageway_Hazards'].replace(\"Pedestrian in carriageway (not injured)\",\"6\")\ndata1['Carriageway_Hazards'] = cudf.to_numeric(data1['Carriageway_Hazards'])\n\ndata1['Did_Police_Officer_Attend_Scene_of_Accident'] = data1['Did_Police_Officer_Attend_Scene_of_Accident'].fillna(0)\ndata1['Did_Police_Officer_Attend_Scene_of_Accident'] = data1['Did_Police_Officer_Attend_Scene_of_Accident'].replace(\"Yes\",\"1\")\ndata1['Did_Police_Officer_Attend_Scene_of_Accident'] = data1['Did_Police_Officer_Attend_Scene_of_Accident'].replace(\"No\",\"0\")\ndata1['Did_Police_Officer_Attend_Scene_of_Accident'] = cudf.to_numeric(data1['Did_Police_Officer_Attend_Scene_of_Accident'])","d6c40ddc":"drop_list = [\"Accident_Index\",\"Location_Easting_OSGR\",\"Location_Northing_OSGR\",\"Longitude\",\n            \"Latitude\",\"Date\",\"Time\",\"Local_Authority_(District)\",\n            \"Local_Authority_(Highway)\",\"1st_Road_Number\",\"Junction_Detail\",\"Junction_Control\",\n            \"2nd_Road_Number\",\"LSOA_of_Accident_Location\",\"Year\"]\ndata1 = data1.drop(drop_list,axis=1)\ndata1.info()","2b0ec959":"data2['Road_Type'] = data2['Road_Type'].replace(\"Dual carriageway\",\"1\")\ndata2['Road_Type'] = data2['Road_Type'].replace(\"One way street\",\"2\")\ndata2['Road_Type'] = data2['Road_Type'].replace(\"Roundabout\",\"3\")\ndata2['Road_Type'] = data2['Road_Type'].replace(\"Single carriageway\",\"4\")\ndata2['Road_Type'] = data2['Road_Type'].replace(\"Slip road\",\"5\")\ndata2['Road_Type'] = data2['Road_Type'].replace(\"Unknown\",\"0\")\ndata2['Road_Type'] = cudf.to_numeric(data2['Road_Type'])\n\ndata2['Light_Conditions'] = data2['Light_Conditions'].replace(\"Darkeness: No street lighting\",\"1\")\ndata2['Light_Conditions'] = data2['Light_Conditions'].replace(\"Darkness: Street lighting unknown\",\"2\")\ndata2['Light_Conditions'] = data2['Light_Conditions'].replace(\"Darkness: Street lights present and lit\",\"3\")\ndata2['Light_Conditions'] = data2['Light_Conditions'].replace(\"Darkness: Street lights present but unlit\",\"4\")\ndata2['Light_Conditions'] = data2['Light_Conditions'].replace(\"Daylight: Street light present\",\"5\")\ndata2['Light_Conditions'] = cudf.to_numeric(data2['Light_Conditions'])\n\ndata2['Pedestrian_Crossing-Human_Control'] = data2['Pedestrian_Crossing-Human_Control'].replace(\"Control by other authorised person\",\"1\")\ndata2['Pedestrian_Crossing-Human_Control'] = data2['Pedestrian_Crossing-Human_Control'].replace(\"Control by school crossing patrol\",\"2\")\ndata2['Pedestrian_Crossing-Human_Control'] = data2['Pedestrian_Crossing-Human_Control'].replace(\"None within 50 metres\",\"3\")\ndata2['Pedestrian_Crossing-Human_Control'] = cudf.to_numeric(data2['Pedestrian_Crossing-Human_Control'])\n\ndata2['Pedestrian_Crossing-Physical_Facilities'] = data2['Pedestrian_Crossing-Physical_Facilities'].replace(\"Central refuge\",\"1\")\ndata2['Pedestrian_Crossing-Physical_Facilities'] = data2['Pedestrian_Crossing-Physical_Facilities'].replace(\"Footbridge or subway\",\"2\")\ndata2['Pedestrian_Crossing-Physical_Facilities'] = data2['Pedestrian_Crossing-Physical_Facilities'].replace(\"No physical crossing within 50 meters\",\"3\")\ndata2['Pedestrian_Crossing-Physical_Facilities'] = data2['Pedestrian_Crossing-Physical_Facilities'].replace(\"Pedestrian phase at traffic signal junction\",\"4\")\ndata2['Pedestrian_Crossing-Physical_Facilities'] = data2['Pedestrian_Crossing-Physical_Facilities'].replace(\"Zebra crossing\",\"5\")\ndata2['Pedestrian_Crossing-Physical_Facilities'] = data2['Pedestrian_Crossing-Physical_Facilities'].replace(\"non-junction pedestrian crossing\",\"6\")\ndata2['Pedestrian_Crossing-Physical_Facilities'] = cudf.to_numeric(data2['Pedestrian_Crossing-Physical_Facilities'])\n\ndata2['Weather_Conditions'] = data2['Weather_Conditions'].fillna(0)\ndata2['Weather_Conditions'] = data2['Weather_Conditions'].replace(\"Fine with high winds\",\"1\")\ndata2['Weather_Conditions'] = data2['Weather_Conditions'].replace(\"Fine without high winds\",\"2\")\ndata2['Weather_Conditions'] = data2['Weather_Conditions'].replace(\"Fog or mist\",\"3\")\ndata2['Weather_Conditions'] = data2['Weather_Conditions'].replace(\"Other\",\"4\")\ndata2['Weather_Conditions'] = data2['Weather_Conditions'].replace(\"Raining with high winds\",\"5\")\ndata2['Weather_Conditions'] = data2['Weather_Conditions'].replace(\"Raining without high winds\",\"6\")\ndata2['Weather_Conditions'] = data2['Weather_Conditions'].replace(\"Snowing with high winds\",\"7\")\ndata2['Weather_Conditions'] = data2['Weather_Conditions'].replace(\"Snowing without high winds\",\"8\")\ndata2['Weather_Conditions'] = data2['Weather_Conditions'].replace(\"Unknown\",\"0\")\ndata2['Weather_Conditions'] = cudf.to_numeric(data2['Weather_Conditions'])\n\ndata2['Road_Surface_Conditions'] = data2['Road_Surface_Conditions'].fillna(0)\ndata2['Road_Surface_Conditions'] = data2['Road_Surface_Conditions'].replace(\"Dry\",\"1\")\ndata2['Road_Surface_Conditions'] = data2['Road_Surface_Conditions'].replace(\"Flood (Over 3cm of water)\",\"2\")\ndata2['Road_Surface_Conditions'] = data2['Road_Surface_Conditions'].replace(\"Frost\/Ice\",\"3\")\ndata2['Road_Surface_Conditions'] = data2['Road_Surface_Conditions'].replace(\"Snow\",\"4\")\ndata2['Road_Surface_Conditions'] = data2['Road_Surface_Conditions'].replace(\"Wet\/Damp\",\"5\")\ndata2['Road_Surface_Conditions'] = cudf.to_numeric(data2['Road_Surface_Conditions'])\n\ndata2['Special_Conditions_at_Site'] = data2['Special_Conditions_at_Site'].fillna(0)\ndata2['Special_Conditions_at_Site'] = data2['Special_Conditions_at_Site'].replace(\"Auto traffic signal partly defective\",\"1\")\ndata2['Special_Conditions_at_Site'] = data2['Special_Conditions_at_Site'].replace(\"Auto traffic singal out\",\"2\")\ndata2['Special_Conditions_at_Site'] = data2['Special_Conditions_at_Site'].replace(\"Mud\",\"3\")\ndata2['Special_Conditions_at_Site'] = data2['Special_Conditions_at_Site'].replace(\"None\",\"4\")\ndata2['Special_Conditions_at_Site'] = data2['Special_Conditions_at_Site'].replace(\"Ol or diesel\",\"5\")\ndata2['Special_Conditions_at_Site'] = data2['Special_Conditions_at_Site'].replace(\"Permanent sign or marking defective or obscured\",\"6\")\ndata2['Special_Conditions_at_Site'] = data2['Special_Conditions_at_Site'].replace(\"Road surface defective\",\"7\")\ndata2['Special_Conditions_at_Site'] = data2['Special_Conditions_at_Site'].replace(\"Roadworks\",\"8\")\ndata2['Special_Conditions_at_Site'] = cudf.to_numeric(data2['Special_Conditions_at_Site'])\n\ndata2['Carriageway_Hazards'] = data2['Carriageway_Hazards'].fillna(0)\ndata2['Carriageway_Hazards'] = data2['Carriageway_Hazards'].replace(\"Any animal (except a ridden horse)\",\"1\")\ndata2['Carriageway_Hazards'] = data2['Carriageway_Hazards'].replace(\"Dislodged vehicle load in carriageway\",\"2\")\ndata2['Carriageway_Hazards'] = data2['Carriageway_Hazards'].replace(\"Involvement with previous accident\",\"3\")\ndata2['Carriageway_Hazards'] = data2['Carriageway_Hazards'].replace(\"None\",\"4\")\ndata2['Carriageway_Hazards'] = data2['Carriageway_Hazards'].replace(\"Other object in carriageway\",\"5\")\ndata2['Carriageway_Hazards'] = data2['Carriageway_Hazards'].replace(\"Pedestrian in carriageway (not injured)\",\"6\")\ndata2['Carriageway_Hazards'] = cudf.to_numeric(data2['Carriageway_Hazards'])\n\ndata2['Did_Police_Officer_Attend_Scene_of_Accident'] = data2['Did_Police_Officer_Attend_Scene_of_Accident'].fillna(0)\ndata2['Did_Police_Officer_Attend_Scene_of_Accident'] = data2['Did_Police_Officer_Attend_Scene_of_Accident'].replace(\"Yes\",\"1\")\ndata2['Did_Police_Officer_Attend_Scene_of_Accident'] = data2['Did_Police_Officer_Attend_Scene_of_Accident'].replace(\"No\",\"0\")\ndata2['Did_Police_Officer_Attend_Scene_of_Accident'] = cudf.to_numeric(data2['Did_Police_Officer_Attend_Scene_of_Accident'])","b93d813e":"drop_list = [\"Accident_Index\",\"Location_Easting_OSGR\",\"Location_Northing_OSGR\",\"Longitude\",\n            \"Latitude\",\"Date\",\"Time\",\"Local_Authority_(District)\",\n            \"Local_Authority_(Highway)\",\"1st_Road_Number\",\"Junction_Detail\",\"Junction_Control\",\n            \"2nd_Road_Number\",\"LSOA_of_Accident_Location\",\"Year\"]\ndata2 = data2.drop(drop_list,axis=1)\ndata2.info()","c88c8412":"datas = cudf.concat([data0,data1,data2],axis=0)\ndatas.info()","cd236582":"datas = datas.to_pandas()\nf, ax = plt.subplots(figsize=(18,18))\nsns.heatmap(datas.corr(),annot=True, linewidths=.5, ax=ax)\nplt.savefig(\"corr.png\")\nplt.show()","3699091d":"year = [\"2005-2007\",\"2009-2011\",\"2012-2014\"]\naccident = [len(data0[data0['Accident_Severity'] == 3].to_pandas()),\n            len(data1[data1['Accident_Severity'] == 3].to_pandas()),\n            len(data2[data2['Accident_Severity'] == 3].to_pandas())]\n\nplt.plot(year,accident)\nplt.xlabel(\"Year\")\nplt.ylabel(\"Accident Severity\")\nplt.title(\"The Number of Most Severity Accident\")\nplt.show()","2e7a7b6f":"year = [\"2005-2007\",\"2009-2011\",\"2012-2014\"]\nurban = [len(data0[data0['Urban_or_Rural_Area'] == 1].to_pandas()),\n            len(data1[data1['Urban_or_Rural_Area'] == 1].to_pandas()),\n            len(data2[data2['Urban_or_Rural_Area'] == 1].to_pandas())]\n\nrural = [len(data0[data0['Urban_or_Rural_Area'] == 2].to_pandas()),\n            len(data1[data1['Urban_or_Rural_Area'] == 2].to_pandas()),\n            len(data2[data2['Urban_or_Rural_Area'] == 2].to_pandas())]\n\nplt.plot(year,urban)\nplt.plot(year,rural)\nplt.xlabel(\"Year\")\nplt.ylabel(\"Number of Urban and Rural\")\nplt.title(\"Number of Urban and Rural\")\nplt.show()","c5a153da":"data0_day = data0.to_pandas()\ndata0_day = data0_day.loc[:,{'Day_of_Week','Accident_Severity'}] \n\nplt.figure(figsize=(7,15))\nsns.barplot(x=\"Day_of_Week\",y=\"Accident_Severity\",data=data0_day)\nplt.show()","6f20d9d5":"data1_day = data1.to_pandas()\ndata1_day = data1_day.loc[:,{'Day_of_Week','Accident_Severity'}] \n\nplt.figure(figsize=(7,15))\nsns.barplot(x=\"Day_of_Week\",y=\"Accident_Severity\",data=data1_day)\nplt.show()","d7bc3a85":"data2_day = data2.to_pandas()\ndata2_day = data2_day.loc[:,{'Day_of_Week','Accident_Severity'}] \n\nplt.figure(figsize=(7,10))\nsns.barplot(x=\"Day_of_Week\",y=\"Accident_Severity\",data=data2_day)\nplt.show()","9a2a5e8b":"from sklearn.model_selection import train_test_split\n\ntrain_X, test_X, train_Y, test_Y = train_test_split(datas.drop(\"Accident_Severity\",axis=1),datas['Accident_Severity'],test_size=0.2)\n\ndel train_test_split\n\ntrain_X = cudf.DataFrame(train_X, dtype = np.float32)\ntest_X = cudf.DataFrame(test_X, dtype = np.float32)\n\ntrain_Y = cudf.Series(train_Y, dtype = np.float32)\ntest_Y = cudf.Series(test_Y, dtype = np.float32)","631583ee":"from cuml.linear_model import LogisticRegression\nfrom cuml.multiclass import MulticlassClassifier\n\nreg = LogisticRegression()\ncls_reg = MulticlassClassifier(reg, strategy='ovo')\ncls_reg.fit(train_X,train_Y)\n\nprediction_lr = cls_reg.predict(test_X)\nprint(prediction_lr.value_counts())","78f56d44":"from cuml.naive_bayes import MultinomialNB\n\nmodel = MultinomialNB()\ncls_model = MulticlassClassifier(model, strategy='ovo')\ncls_model.fit(train_X,train_Y)\n\nprediction_nb = cls_model.predict(test_X)\nprint(prediction_nb.value_counts())","cd96d835":"from cuml.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=3)\n\nknn_model = MulticlassClassifier(knn, strategy='ovo')\nknn_model.fit(train_X,train_Y)\n\nprediction_knn = knn_model.predict(test_X)\nprint(prediction_knn.value_counts())","7bfea11c":"from sklearn.metrics import classification_report\n\nprint(classification_report(test_Y.to_pandas(), prediction_lr.to_pandas()))","8636da7c":"from sklearn.metrics import classification_report\n\nprint(classification_report(test_Y.to_pandas(), prediction_nb.to_pandas()))","7a0dbb34":"from sklearn.metrics import classification_report\n\nprint(classification_report(test_Y.to_pandas(), prediction_knn.to_pandas()))","42f96e4b":"## Organizing data and preparing for training","9fae54c2":"## Installing required modules and importing data","4530eb57":"## Analyzing and visualizing data","694479b8":"# Traffic dataset with [RAPIDS](https:\/\/rapids.ai\/)\n\nMachine learning on GPU with RAPIDS using traffic dataset. \n\nThis project (notebook) was made as a graduation project within the scope of the [DSPG Patikas\u0131 Mentorship Program](https:\/\/app.patika.dev\/egitimler\/data-science-for-the-public-good-patikasi).\n\nPresentation of the graduation project (Google Slides): [Link](https:\/\/docs.google.com\/presentation\/d\/1zSCPWTMNyzz1dGw8QWs1MzlWHrEPDq-nT5o7Rzs6iYs\/edit?usp=sharing)\n\n@author [**Ahmet Furkan DEMIR**](https:\/\/www.ahmetfurkandemir.com\/), [**Ecem B\u00f6l\u00fck**](https:\/\/www.linkedin.com\/in\/ecemboluk\/),\n[**Gencay Toklu**](https:\/\/github.com\/getogeto),\n[**Fatih Es**](https:\/\/fatihes1.github.io\/),\n[**Bedirhan G\u00fcnd\u00f6ner**](https:\/\/www.linkedin.com\/in\/bedirhan-g%C3%BCnd%C3%B6ner-078935199\/), [**Filiz kaplan**](https:\/\/www.linkedin.com\/in\/filiz-kaplan-3b16851b0\/),  [**Hilal Cerit**](https:\/\/www.linkedin.com\/in\/hilal-cerit-839686200\/)","fe17091d":"Now i see a lot non values for **LSOA_of_Accident_Location** too. Actually these are about 7 percent of the all observations. So we can fix it healty but because its ooking useless for our target, we'll ignore it too :) No lets be sure and see what its. This features looking a unique value. if so, we'll ignore it:","99547897":"----------------------------------------\u00d6ZELL\u0130KLER\u0130N \u0130S\u0130MLER\u0130----------------------------------------\n- Accident_Index : Kaza Numaras\u0131\n- Location_Easting_OSGR : Konum (Do\u011fu)\n- Location_Northing_OSGR : Konum (Kuzey)\n- Longitude : Boylam\n- Latitude : Enlem\n- Police_Force : Polis Kuvveti\n- Accident_Severity : Kaza \u015eiddeti\n- Number_of_Vehicles : Ara\u00e7 Say\u0131s\u0131\n- Number_of_Casualties : Yaral\u0131 Say\u0131s\u0131\n- Date : Tarih\n- Day_of_Week : Haftan\u0131n G\u00fcn\u00fc\n- Time : Zaman\n- Local_Authority_(District): Yerel Y\u00f6netim (\u0130l\u00e7e)\n- Local_Authority_(Highway): Yerel Y\u00f6netim (Karayolu)\n- 1st_Road_Class : 1. Yol s\u0131n\u0131f\u0131\n- 1st_Road_Number : 1. Yol Numaras\u0131\n- Road_Type: Yol tipi\n- Speed_limit: H\u0131z limiti\n- Junction_Detail : Kav\u015fak detay\u0131\n- Junction_Contro : Kav\u015fak kontrol\u00fc\n- 2nd_Road_Class : 2. Yol s\u0131n\u0131f\u0131\n- 2nd_Road_Number : 2. Yol Numaras\u0131\n- Pedestrian_Crossing-Human_Control: Yaya ge\u00e7idi ve insan kontrol\u00fc (?)\n- Pedestrian_Crossing-Physical_Facilities: Yaya Ge\u00e7idi ve Fiziksel Tesis Durumu (?)\n- Light_Conditions : I\u015f\u0131k Durumu\n- Weather_Conditions : Hava Durumu\n- Road_Surface_Conditions : Yol Y\u00fczey Durumu\n- Special_Conditions_at_Site : Alandaki \u00d6zel Durumlar (?)\n- Carriageway_Hazards : Anayol Tehlikeleri\n- Urban_or_Rural_Area : Kentsel Alan m\u0131 K\u0131rsal Alan m\u0131\n- Did_Police_Officer_Attend_Scene_of_Accident : Polis memuru kaza yerine geldi mi\n- LSOA_of_Accident_Location : Kaza Konumunun LSOA Bilgisi (?)\n- Year : Y\u0131l","b3b8da83":"As we can see, accidents is more risky in Urban rather than Rural. This visualization is very usefull to see which conditions is affect severity of the accident.To see how much effect the severity of the accidents, i thing we should take a look to the other conditions.\n\nFor do that, i'll write a function otherwise, its may be get so fancy looking codes.","b3c57ffc":"Hmm.. It's looking spesific region names and could be more than one accident at one region. I thing its can be ignore\n\nIgnoring features that useless and contain many null values:","dc265ca5":"## Performing training by trying different algorithms","e891a645":"We can see there is null values for 17 columns of the data. Two of that, Junction_Detail and Junction_Control is little unsolvable. At least, we cant struggle with it here; we'll ignore this two columns. \n\nFor others, already there is very less missing values so we can be solve yhese using different ways. We'll do something about it later.","121fea57":"## Organizing data and preparing for training","5cffa78d":"## Identifying and testing our main model","7d15ab46":"![Python_logo_and_wordmark svg_2_136x](https:\/\/user-images.githubusercontent.com\/54184905\/133923919-60ee7275-74fd-44d5-a497-2d59017f72f1.png)  ![RAPIDS-logo-purple_2_136x](https:\/\/user-images.githubusercontent.com\/54184905\/133924473-e1d90fd8-77c5-4cb2-8a92-1ea975a8a875.png)\n\n![2560px-Pandas_logo svg_136x](https:\/\/user-images.githubusercontent.com\/54184905\/133924015-bbe0fef3-fbeb-4d5e-a4d7-e9aef64f704e.png)  ![1280px-NumPy_logo_2020 svg_136x](https:\/\/user-images.githubusercontent.com\/54184905\/133924217-dc8aee98-0266-4a44-8428-1365107b82bb.png)\n\n![logo2_compressed_1_136x](https:\/\/user-images.githubusercontent.com\/54184905\/133924286-56fd8b86-737b-48fc-aab5-7d28482054a4.png)  ![92255284-156f1180-eea0-11ea-9d2d-be8262670e8c_136x](https:\/\/user-images.githubusercontent.com\/54184905\/133924432-88e68885-5484-4628-a237-dd0885024e45.png)\n\n","a38b82e8":"Now we have 25 features. By the way, we dropped as well as null values like Police_Force, Did_Police_Officer_Attend_Scene_of_Accident. Because these are nor related with accident.\n\nNormally, this manipulations stuff should do on manipulating process but for clear looking and because these values are clearly useless, i dropped now these features.\n\nNow we have 25 features. Okay.\n\nWe have one more problem about 'data_accidents.info()' scheme.\n\nNow, did u notice all of the features is the one data type, 'Object'. But thats not right, because some of the features data type is actually intager, float, etc...\n\nWe must focus this problem. In this stiuation, i'll take a look to all features in a row and decide which one is object, intager, float or etc:"}}