{"cell_type":{"3bd620ed":"code","89f04924":"code","0ff44ccb":"code","21ba4845":"code","2c3f30f2":"code","f6283b01":"code","72558ec7":"code","86b485f3":"code","e5b12641":"code","836f9906":"code","57a0aaca":"code","9de639ab":"code","bec1e99d":"code","feb6527a":"code","8606bd64":"code","835f2e05":"code","163e42b3":"markdown","b5001476":"markdown","5c9fc239":"markdown","46d07dce":"markdown","f44d55b0":"markdown"},"source":{"3bd620ed":"#Importing required packages.\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\n%matplotlib inline\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected =True)\nimport plotly.graph_objs as go\nfrom plotly import tools\nfrom wordcloud import WordCloud    \nimport matplotlib.pyplot as plt \n","89f04924":"#Loading data\nwine = pd.read_csv('..\/input\/winequality-red.csv')\nwine.head()","0ff44ccb":"#change column names\nwine.rename(columns={\"fixed acidity\":\"fixed_acidity\", \"residual sugar\": \"residual_sugar\"}, inplace=True)","21ba4845":"#Information about the data columns\nwine.info()","2c3f30f2":"#Classify quality into three groups\ndef quality_group(x):   \n    if x <= 4:\n        qg = \"Low\"\n    elif (x > 4) & (x <= 6):\n        qg = \"Medium\"\n    else:\n        qg = \"High\"\n    return qg  \nwine['qualitygroup'] = wine.quality.apply(quality_group)\nwine.head()","f6283b01":"wine_df = wine.iloc[:1599,:]\ndonut= wine.qualitygroup.value_counts()\nlabels = wine.qualitygroup.value_counts().index\n\n#Creat figure\nfig = {\n    \"data\":\n    [\n        {\n            \"values\": donut,\n            \"labels\": labels,\n            \"domain\": {\"x\": [0, 1]},\n            \"name\": \"Quality Rate\",\n            \"hoverinfo\": \"label+percent+name\",\n            \"hole\": .4,\n            \"type\": \"pie\"\n        }, \n    ],\n    \"layout\":\n    {\n        \"title\":\"Composition of wine quality\",\n        \"annotations\":\n        [\n            { \n                \"font\":{\"size\":20},\n                \"showarrow\":False,\n                \"text\": \"\",\n                \"x\": 0,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","72558ec7":"# 100 wines 'fixed acidity', 'residual sugar' and 'alcohol' scores comparison with Scatter 3D Plot\nwine_small_df = wine.iloc[:100,:]\ntrace = go.Scatter3d(\n    x=wine_small_df.fixed_acidity,\n    y=wine_small_df.residual_sugar,\n    z=wine_small_df.alcohol,\n    text= wine_small_df.qualitygroup,\n    mode='markers',\n    marker=dict(\n        size=12,\n        #color= z,          #set color to an array\/list of desired value (plotly.ly)\n#When we enters 'Fork Notebook' he describes 'z'. But why doesn't he recognize this right now? \n        colorscale='Viridis',   #Choose a colorscale\n        opacity=0.8\n    )\n)\ndata = [trace]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0\n    )\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","86b485f3":"#Loading dataset\nwine = pd.read_csv('..\/input\/winequality-red.csv')","e5b12641":"bins = (0, 6.5, 8)\ngroup_names = ['bad', 'good']\nwine['quality'] = pd.cut(wine['quality'], bins = bins, labels = group_names)","836f9906":"label_quality = LabelEncoder()\n#Bad becomes 0 and good becomes 1 \nwine['quality'] = label_quality.fit_transform(wine['quality'])","57a0aaca":"sns.countplot(wine['quality'])","9de639ab":"#seperate respons variables and independant variable\nX = wine.drop('quality', axis = 1)\ny = wine['quality']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","bec1e99d":"sc = StandardScaler()","feb6527a":"X_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","8606bd64":"rfc = RandomForestClassifier(n_estimators=200)\nrfc.fit(X_train, y_train)\npred_rfc = rfc.predict(X_test)","835f2e05":"#Let's see how our model performed\nprint(classification_report(y_test, pred_rfc))","163e42b3":"# 3. Machine Learning---Random Forest #","b5001476":"## 1. Set an arbitrary cutoff for dependent variable (quality)\n##  Good quality: 0-6.5; Bad quality: 6.5-8","5c9fc239":"# 2. Data Processing #","46d07dce":"## Random forest gives the accuracy of 87%","f44d55b0":"# 1. EDA"}}