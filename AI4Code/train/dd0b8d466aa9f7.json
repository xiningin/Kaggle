{"cell_type":{"10608c51":"code","2910c588":"code","365abd84":"code","73a6d28e":"code","0908d1a2":"code","9dd325f8":"code","294c1047":"code","25e8d7da":"code","8d5f0a77":"code","57a0bd81":"code","4a15885b":"code","aabaf74b":"code","96e7e36d":"code","ace2b23b":"code","3aeab36d":"code","fbfe58ea":"code","5a060cca":"code","89da2aca":"code","719481d6":"code","39b58d49":"code","8fde4986":"code","272d820d":"code","f076e0f8":"code","a454e401":"code","eb38987d":"code","fa0616e9":"code","33526275":"code","9a562d18":"code","b382d12d":"code","c3550586":"code","ad8877ec":"code","b62d158a":"code","bb67d772":"code","7b6eb7d1":"code","ae2c2cf8":"code","28751db7":"code","9ed42d3c":"code","d3dd2b48":"code","84cdf229":"code","da16f671":"code","764e78ac":"code","ef7ea047":"code","86fe12f4":"code","e8924aef":"code","63499d4c":"code","f86c1c40":"code","ba9fe89c":"code","88880d72":"code","9800a86e":"code","18213b95":"code","78491644":"code","cd390398":"code","37c335c0":"code","23cba8ed":"code","eb29403b":"code","b86b5fe9":"code","c342942b":"markdown","1fac1aed":"markdown","6bbc0442":"markdown","087883bf":"markdown","6d7984dc":"markdown","af7bf2e8":"markdown","535da69c":"markdown","56270784":"markdown","2571f4cb":"markdown","17af650d":"markdown","76943a20":"markdown","6041eaea":"markdown","60bccdab":"markdown"},"source":{"10608c51":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2910c588":"#importing the libraries\nimport math\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')","365abd84":"data = pd.read_csv('\/kaggle\/input\/nyse\/prices-split-adjusted.csv')\ndata","73a6d28e":"data.isnull().sum()","0908d1a2":"data = data.loc[(data['symbol'] == 'AAPL')]\ndata = data.drop(columns=['symbol'])\ndata = data[['date','open','close','low','volume','high']]\ndata","9dd325f8":"#We shall find out the number of rows and column in the dataset now.\ndata.shape","294c1047":"plt.figure(figsize=(16,8))\nplt.title('Closing Price of the Stock Historically')\nplt.plot(data['close'])\nplt.xlabel('Year', fontsize=20)\nplt.ylabel('Closing Price Historically ($)', fontsize=20)\nplt.show()","25e8d7da":"data = data.filter(['close'])\ndataset = data.values\n\n#Find out the number of rows that are present in this dataset in order to train our model.\ntraining_data_len = math.ceil(len(dataset)* .8)\ntraining_data_len","8d5f0a77":"scaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(dataset)\nscaled_data","57a0bd81":"train_data = scaled_data[0:training_data_len , :]\nx_train = []\ny_train = []\n\nfor j in range(60, len(train_data)):\n    x_train.append(train_data[j-60:j,0])\n    y_train.append(train_data[j,0])\n    if j<=60:\n        print(x_train)\n        print(y_train)\n        print()","4a15885b":"x_train, y_train = np.array(x_train), np.array(y_train)\n","aabaf74b":"x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\nx_train.shape","96e7e36d":"model = Sequential()\nmodel.add(LSTM(50, return_sequences=True, input_shape = (x_train.shape[1], 1)))\nmodel.add(LSTM(50, return_sequences=False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))","ace2b23b":"model.compile(optimizer='adam', loss='mean_squared_error')\n","3aeab36d":"model.fit(x_train, y_train, batch_size=1, epochs=1)","fbfe58ea":"test_data = scaled_data[training_data_len - 60: , :]\nx_test = []\ny_test = dataset[training_data_len:, :]\n\nfor j in range(60, len(test_data)):\n    x_test.append(test_data[j-60:j, 0])\n    ","5a060cca":"x_test = np.array(x_test)","89da2aca":"x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))","719481d6":"predictions = model.predict(x_test)\npredictions = scaler.inverse_transform(predictions)\n","39b58d49":"rmse = np.sqrt( np.mean( predictions - y_test)**2)\nrmse","8fde4986":"train = data[:training_data_len]\nval = data[training_data_len:]\nval['Predictions'] = predictions\n\nplt.figure(figsize=(16,8))\nplt.title('LSTM Model Data')\nplt.xlabel('Date', fontsize=16)\nplt.ylabel('Close Price', fontsize=16)\nplt.plot(train['close'])\nplt.plot(val[['close', 'Predictions']])\nplt.legend(['Trained Dataset', 'Actual Value', 'Predictions'])\nplt.show()","272d820d":"val","f076e0f8":"new_data = pd.read_csv('\/kaggle\/input\/nyse\/prices-split-adjusted.csv')\nnew_data = data.filter(['close'])\nlast_60_days = new_data[-60:].values\nlast_60_scaled = scaler.transform(last_60_days)\nX_test = []\nX_test.append(last_60_scaled)\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\npredicted_price = model.predict(X_test)\npredicted_price = scaler.inverse_transform(predicted_price)\nprint('The predicted price of the final value of the dataset', predicted_price)","a454e401":"new_data.tail(1)","eb38987d":"#check predicted values\npredictions = model.predict(x_test) \n#Undo scaling\npredictions = scaler.inverse_transform(predictions)\n\n#Calculate RMSE score\nrmse=np.sqrt(np.mean(((predictions- y_test)**2)))\nrmse","fa0616e9":"neww_data = pd.read_csv('\/kaggle\/input\/nyse\/prices-split-adjusted.csv')","33526275":"val.describe()","9a562d18":"x = val.close.mean()\ny = val.Predictions.mean()\nAccuracy = x\/y*100\nprint(\"The accuracy of the model is \" , Accuracy)","b382d12d":"from sklearn import metrics\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport math","c3550586":"data = pd.read_csv('\/kaggle\/input\/nyse\/prices-split-adjusted.csv')\ndata\n\ndata = data.loc[(data['symbol'] == 'AAPL')]\ndata = data.drop(columns=['symbol'])\ndata = data[['date','open','close','low','volume','high']]\ndata","ad8877ec":"plt.scatter(data.date, data.close,  color='blue')\nplt.xlabel(\"Time\")\nplt.ylabel(\"Close\")\nplt.show()","b62d158a":"dataset.shape","bb67d772":"data['date'] = pd.to_datetime(data.date)","7b6eb7d1":"data.head()","ae2c2cf8":"data.describe()","28751db7":"print(len(data))","9ed42d3c":"data['close'].plot(figsize=(16,8))","d3dd2b48":"x1 = data[['open', 'high','low', 'volume']]\ny1 = data['close']","84cdf229":"from sklearn.model_selection import train_test_split\nx1_train, x1_test, y1_train, y1_test = train_test_split(x1, y1, random_state = 0)","da16f671":"x1_train.shape","764e78ac":"x1_test.shape","ef7ea047":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nregression = LinearRegression()","86fe12f4":"regression.fit(x1_train, y1_train)","e8924aef":"print(regression.coef_)","63499d4c":"print(regression.intercept_)","f86c1c40":"predicted=regression.predict(x1_test)","ba9fe89c":"print(x1_test)","88880d72":"predicted.shape","9800a86e":"dframe = pd.DataFrame(y1_test,predicted)\ndfr=pd.DataFrame({'Actual_Price':y1_test, 'Predicted_Price':predicted})\nprint(dfr)","18213b95":"dfr.head(10)","78491644":"from sklearn.metrics import confusion_matrix, accuracy_score","cd390398":"regression.score(x1_test, y1_test)","37c335c0":"print('Mean Absolute Error:', metrics.mean_absolute_error(y1_test, predicted))\nprint('Mean Squared Error:', metrics.mean_squared_error(y1_test, predicted))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y1_test, predicted)))","23cba8ed":"dfr.describe()","eb29403b":"x2 = dfr.Actual_Price.mean()\ny2 = dfr.Predicted_Price.mean()\nAccuracy1 = x2\/y2*100\nprint(\"The accuracy of the model is \" , Accuracy1)","b86b5fe9":"plt.scatter(dfr.Actual_Price, dfr.Predicted_Price,  color='red')\nplt.xlabel(\"Actual Price\")\nplt.ylabel(\"Predicted Price\")\n\nplt.show()","c342942b":"We need to create a seperate dataframe with the \"close\" column","1fac1aed":"**Thank you all for reading my notebook.**\n\n**Please leave your feedback, it will be deeply appreciated**","6bbc0442":"# **Data Preprocessing**","087883bf":"Now, we need to scale the data","6d7984dc":"**Plot the graph**","af7bf2e8":"**The predicted price is USD 118.51, whereas the actual observed value is USD 115.82**","535da69c":"Finding out the Root Mean Squared Error","56270784":"Let us graphically represent the closing prices of the stock. ","2571f4cb":"# **LSTM Algorithm**","17af650d":"Create the training data for the model","76943a20":"# **Building the LSTM Model**","6041eaea":"# **Regression Model**","60bccdab":"**Training the Model**"}}