{"cell_type":{"d3f463e4":"code","2c032662":"code","21499324":"code","8eac72bc":"code","93def947":"code","e5a2a8b8":"code","a71dcb82":"code","0a4f10ea":"code","721cf3f7":"code","ae2f3e4a":"code","a1007c00":"code","9a829d9c":"code","01d07529":"code","2a6431b5":"code","f390eea3":"code","69cb7ca9":"code","98a1bfc6":"code","f4c3000c":"code","2395e1bb":"code","9d067061":"code","5ead551a":"code","129a6ce1":"code","70ddece2":"code","1bcde0b0":"code","3f4c0d4a":"code","814646df":"code","a6c378be":"code","49df4aaa":"code","e9eea44a":"code","ec13bfd7":"code","a20ae679":"code","95833de4":"code","95972d15":"code","d104cbaf":"code","b5925a9e":"code","60ae2dab":"code","a4691c71":"code","2f4ad3fd":"code","198cd832":"code","4dac7b86":"code","e37d7602":"code","b9fcb15f":"code","788a5a62":"code","91cd6189":"code","5bd700c3":"code","b345bf16":"code","5bf95b08":"code","fd44c986":"code","d332b364":"code","2a14ef67":"code","84454843":"code","49a1e3ea":"code","d6e3d51f":"code","c83bc007":"code","9a76f91f":"code","3b5e3eed":"code","198644e7":"code","f4c2fc1f":"code","ecc4b1e9":"code","323e13a1":"code","0780d5c5":"code","c5a86e60":"code","de98814b":"code","bdf17376":"code","8e13b2a6":"code","b1ebd65b":"markdown","0e93dba7":"markdown","c3c3e1d3":"markdown","379aef79":"markdown","e6652a84":"markdown","e18d9be0":"markdown","b9dd0a59":"markdown","c1e3d484":"markdown","fd20a47e":"markdown","baf8cd3a":"markdown","72a6443d":"markdown","9aa0dacb":"markdown","31e694d4":"markdown","c223fdc4":"markdown","fb154d1e":"markdown","cc66a364":"markdown","d8718e33":"markdown","f77ce883":"markdown","65abbc07":"markdown","99f5aa69":"markdown","b5cad97b":"markdown","00516dea":"markdown","7698a374":"markdown","11f32e7d":"markdown","8b822d08":"markdown","c68fd8f5":"markdown","0c2945a4":"markdown","c090649e":"markdown","8d1994e3":"markdown","5a2acdc3":"markdown","dc0af837":"markdown","355e1b4a":"markdown","2294d356":"markdown","12173510":"markdown","8733f9b8":"markdown"},"source":{"d3f463e4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nfrom matplotlib.gridspec import GridSpec\nimport seaborn as sns\nfrom scipy import stats\n\nfrom sklearn. impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import make_column_selector,make_column_transformer\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score, train_test_split\nimport sklearn.metrics as metrics\n\nsns.set()\nstyle.use('fivethirtyeight')\npd.options.mode.chained_assignment = None  # default='warn'","2c032662":"data = pd.read_csv('..\/input\/housedata\/data.csv')","21499324":"data.head()","8eac72bc":"data.shape","93def947":"data.nunique()","e5a2a8b8":"data.info()","a71dcb82":"data.describe().T","0a4f10ea":"plt.figure(figsize=(17, 15))\ncorr_data = data.drop(['date'], axis=1)\n\ncorr_mask = np.triu(corr_data.corr())\nh_map = sns.heatmap(corr_data.corr(), mask=corr_mask, cmap='Blues')\nh_map","721cf3f7":"sns.histplot(data.price)","ae2f3e4a":"def remove_outliers(data, x):\n    q25 = np.percentile(data[x], 25)\n    q75 = np.percentile(data[x], 75)\n    iqr = q75 - q25\n    cut_off = iqr * 1.5\n    lower, upper = 1, (q75 + cut_off)\n    data = data[(data[x] < upper) & (data[x] > lower)]\n    print(f\"Outliers of {x} are removed\\n\")\n    return data","a1007c00":"data = remove_outliers(data, 'price')","9a829d9c":"fig = plt.figure(figsize=(17, 15))\ngrid = GridSpec(ncols=1, nrows=2, figure=fig)\n\n# Histogram\nax1 = fig.add_subplot(grid[0, :])\nsns.histplot(data['price'], ax=ax1, kde=True)\n\n# QQ plot\nax2 = fig.add_subplot(grid[1, :])\nstats.probplot(data['price'], plot=ax2)","01d07529":"y = np.array(data.price)\nplt.figure(figsize=(20, 6))\nplt.subplot(131)\nplt.plot(range(len(y)), y, '.')\nplt.ylabel('price')\nplt.xlabel('index')","2a6431b5":"data.shape","f390eea3":"data.date = pd.to_datetime(data.date)","69cb7ca9":"data.date.dt.year.value_counts()","98a1bfc6":"fig = plt.figure(figsize=(17, 15))\ngrid = GridSpec(ncols=1, nrows=2, figure=fig)\n\nax1 = fig.add_subplot(grid[0, :])\nsns.countplot(x=data.date.dt.month, ax=ax1)\n\nax2 = fig.add_subplot(grid[1, :])\nsns.boxplot(x=data.date.dt.month, y='price', data=data, ax=ax2)","f4c3000c":"fig = plt.figure(figsize=(15, 10))\nsns.countplot(data.date.dt.day)","2395e1bb":"\nsns.catplot(x=data.date.dt.day.values, y='price', data=data, height=5, aspect=2)","9d067061":"data.drop('date', axis=1, inplace=True)","5ead551a":"data.head(3)","129a6ce1":"sns.catplot(x='bedrooms', y='price', data=data, height=5, aspect=2)","70ddece2":"fig = plt.figure(figsize=(12, 8))\nsns.histplot(data.bedrooms)","1bcde0b0":"data = data[data.bedrooms < 7]","3f4c0d4a":"fig = plt.figure(figsize=(12, 8))\nsns.histplot(x=data.bedrooms)\nplt.ylabel('Amount')","814646df":"data.shape","a6c378be":"fig = plt.figure(figsize=(12, 8))\nsns.countplot(x=data['bathrooms'])","49df4aaa":"sns.catplot(x='bathrooms', y='price', data=data, height=5, aspect=2)","e9eea44a":"mask = (data.bathrooms < 3.75)\ndata = data[mask]\ndata.bathrooms = data.bathrooms.apply(lambda x: 1 if (x == 0.75)\n                                                      or\n                                                     (x == 1.25)\n                                                  else x)","ec13bfd7":"# Pretty good !\nsns.catplot(x='bathrooms', y='price', data=data, height=5, aspect=2)","a20ae679":"data.shape","95833de4":"sqft_cols = data.columns[data.columns.str.contains('sqft')]\nsqft_cols","95972d15":"def show_count_plots(data, cols):\n    fig = plt.figure(figsize=(10, 10))\n    grid = GridSpec(ncols=2,\n                    nrows=2, figure=fig)\n    for i, name in enumerate(cols):\n        ax = fig.add_subplot(grid[i])\n        sns.histplot(data[name], kde=True, ax=ax)","d104cbaf":"show_count_plots(data, sqft_cols)","b5925a9e":"sns.catplot(x='floors', y='price', data=data, height=5, aspect=2)","60ae2dab":"mask_floors = {1: 1, 1.5:1, 2:2, 2.5:3, 3:3, 3.5:3}\ndata.floors = data.floors.map(mask_floors)","a4691c71":"# Excellent !\nsns.catplot(x='floors', y='price', data=data, height=5, aspect=2)","2f4ad3fd":"data.head(3)","198cd832":"print(data.waterfront.value_counts())\nsns.catplot(x='waterfront', y='price', data=data,\n            kind='box', height=5, aspect=2)","4dac7b86":"print(data.view.value_counts())\nsns.catplot(x='view', y='price', data=data,\n            kind='boxen', height=5, aspect=2)","e37d7602":"print(data.condition.value_counts())\n\nfig = plt.figure(figsize=(15, 10))\n\nax1 = fig.add_subplot(121)\nsns.boxplot(x='condition', y='price', data=data, ax=ax1)\n\nax2 = fig.add_subplot(122)\nsns.stripplot(x='condition', y='price', data=data, ax=ax2)","b9fcb15f":"mask_cond = data.condition > 1\ndata = data[mask_cond]","788a5a62":"fig = plt.figure(figsize=(12, 8))\nsns.boxplot(x='condition', y='price', data=data)","91cd6189":"sns.histplot(data.yr_built, kde=True)","5bd700c3":"sns.histplot(data.yr_renovated, kde=True)","b345bf16":"data.yr_renovated = data.yr_renovated.apply(lambda x: 0 if x==0 else 1)","5bf95b08":"print(data.yr_renovated.value_counts())\nsns.catplot(x='yr_renovated', y='price', data=data,\n            kind='bar', height=5, aspect=2)","fd44c986":"data.head(3)","d332b364":"data.street.value_counts()","2a14ef67":"data.drop('street', axis=1, inplace=True)","84454843":"data.city.value_counts().head(10)","49a1e3ea":"fig = plt.figure(figsize=(12, 8))\n# Top 5 cities\ndata.city.value_counts().head(5).plot.pie()","d6e3d51f":"print(data.statezip.nunique())\nprint(data.statezip.value_counts())","c83bc007":"data.drop('statezip', axis=1, inplace=True)","9a76f91f":"sns.countplot(x=data.country)","3b5e3eed":"data.drop('country', axis=1, inplace=True)","198644e7":"h_map = sns.heatmap(corr_data.corr(), mask=corr_mask, cmap='Blues')\nh_map","f4c2fc1f":"print(data.shape)\ndata.head(3)","ecc4b1e9":"X = data.drop('price', axis=1)\ny = data.price.astype(int)","323e13a1":"# set up preprocessing numeric columns\nimp_median = SimpleImputer(strategy='median', add_indicator=True)\nscaler = StandardScaler()","0780d5c5":"# set up preprocessing categorical columns\nimp_constant = SimpleImputer(strategy='constant')\nohe = OneHotEncoder(handle_unknown='ignore')","c5a86e60":"# select columns by datatype\nnum_cols = make_column_selector(dtype_include='number')\ncat_cols = make_column_selector(dtype_exclude='number')","de98814b":"# do all preprocessing\npreprocessor = make_column_transformer(\n    (make_pipeline(imp_median, scaler), num_cols),\n    (make_pipeline(imp_constant, ohe), cat_cols)\n)","bdf17376":"# create a pipeline\ndef pipeline_model(X, y, data):\n    pipe = make_pipeline(preprocessor, LinearRegression())\n\n    print(cross_val_score(pipe, X, y).mean())\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,\n                                                        random_state=32)\n\n    pipe.fit(X_train, y_train)\n\n    predict = pipe.predict(X_test)\n    print(f'MSE             : {metrics.mean_squared_error(y_test, predict)}\\n'\n          f'\\nRMSE            : '\n          f'{np.sqrt(metrics.mean_squared_error(y_test, predict))}\\n'\n          f'MAE             : {metrics.mean_absolute_error(y_test, predict)}\\n'\n          #f'Mean abs % error: '\n          #f'{metrics.mean_absolute_percentage_error(y_test, predict)}\\n'\n          f'\\n'\n          f'Score (train)   : {pipe.score(X_train, y_train)}\\n'\n          f'Score (test)    : {pipe.score(X_test, y_test)}\\n')\n    comparison_of_results(X_test, y_test, pipe)\n    visualize_model_results(data, pipe)\n\ndef comparison_of_results(X_test, y_test, model, times=5):\n    for i in range(times):\n        rnd = np.random.randint(0, y_test.shape[0] - 1)\n        real = y_test.iloc[rnd]\n        pred = int(model.predict(X_test.iloc[rnd].to_frame().T)[0])\n        print(f'Real Value      ----->>>>> {real} $\\n'\n              f'Predicted Value ----->>>>> {pred} $')\n        print()\n\n\ndef visualize_model_results(data, model):\n    fig = plt.figure(figsize=(17, 10))\n    data = data.sort_values(by=['price'])\n    X = data.drop('price', axis=1)\n    y = data.price.astype(int)\n    \n    plt.scatter(range(X.shape[0]), y, color='red', label='Real')\n    plt.scatter(range(X.shape[0]), model.predict(X), marker='.', label='Predict')\n\n    plt.legend(loc=2, prop={'size': 25})","8e13b2a6":"pipeline_model(X, y, data)","b1ebd65b":"#### This attribute has outliers","0e93dba7":"# Loading Dataset\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/add-to-database.png?raw=true\" width=\"100\"\/>","c3c3e1d3":"### Price\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/price.png?raw=true\" width=\"100\"\/>\n\n#### Price-Column has got outliers","379aef79":"#### We can see outliers, when the value >= 7. Let's delete this one","e6652a84":"### Bathrooms\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/bathroom.png?raw=true\" width=\"100\"\/>","e18d9be0":"#### Street","b9dd0a59":"#### Delete column with value = 1","c1e3d484":"#### City","fd20a47e":"![](https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/LinePurplePink.jpg?raw=true)\n\n# Import Libraries\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/upload-icon.png?raw=true\" width=\"100\"\/>","baf8cd3a":"#### Let's check the attributes again","72a6443d":"### Years: built and renovated\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/years.png?raw=true\" width=\"100\"\/>","9aa0dacb":"# Prepare data for training\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/prepare.png?raw=true\" width=\"100\"\/>","31e694d4":"# Conclusions\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/conclusion.png?raw=true\" width=\"100\"\/>\n\n## <center> Random Forest Model showed a maximum ~72% (usually ~69) <\/center>\n","c223fdc4":"### Bedrooms\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/bedroom.png?raw=true\" width=\"100\"\/>","fb154d1e":"### Checking the dataset\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/checking.png?raw=true\" width=\"100\"\/>","cc66a364":"#### Checking:","d8718e33":"### Scaler","f77ce883":"### Location information\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/location.png?raw=true\" width=\"100\"\/>","65abbc07":"#### Country","99f5aa69":"#### This will prevent finding the common pattern","b5cad97b":"# EDA + FE: Exploratory Data Analysis and Feature Engineering\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/data%20analysis.png?raw=true\" width=\"100\"\/>","00516dea":"#### If house is renovated, set the value is equal 1. Else is equal 0","7698a374":"### Floors\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/floors.png?raw=true\" width=\"100\"\/>","11f32e7d":"### View\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/view-file.png?raw=true\" width=\"100\"\/>","8b822d08":"### We can see that this dataset doesn't have NaN values","c68fd8f5":"# Model training and visualising\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/external-training-lineal-.png?raw=true\" width=\"100\"\/>","0c2945a4":"#### Date-column have to be deleted","c090649e":"#### Checking the data","8d1994e3":"### Square footage\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/floor-plan.png?raw=true\" width=\"100\"\/>","5a2acdc3":"#### Let's delete it !","dc0af837":"### Condition\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/condition.png?raw=true\" width=\"100\"\/>","355e1b4a":"# <center> Thank You ! <\/center>\n\n<img height=\"150\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/thank-you.png?raw=true\" width=\"150\"\/>\n\n## <center> If you have found something useful for yourself in my work , please evaluate and comment <\/center>\n\n![](https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/LinePurplePink.jpg?raw=true)","2294d356":"#### State zip","12173510":"\n### Date\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/date.png?raw=true\" width=\"100\"\/>","8733f9b8":"### WaterFront\n<img height=\"100\" src=\"https:\/\/github.com\/GeorgeGalaxy\/PhotosFor...\/blob\/main\/icons\/water.png?raw=true\" width=\"100\"\/>"}}