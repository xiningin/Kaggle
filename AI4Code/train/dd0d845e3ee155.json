{"cell_type":{"2a52e70b":"code","28b6c22c":"code","7f1f6e12":"code","9ca4fb47":"code","006beda5":"code","357ef0ac":"code","9aa17b0a":"code","eff0c365":"code","f412518e":"code","cad1bc91":"code","02f6294b":"code","d837f8c3":"code","1b9fcdae":"code","13a18c9c":"code","4a183135":"code","44d2e5c7":"markdown","3fedfb90":"markdown","8eb1ad43":"markdown"},"source":{"2a52e70b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","28b6c22c":"#import data\ndata=pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\n","7f1f6e12":"#Get to know the data\ndata.shape\ndata.head()\ndata.columns\ndata[\"Species\"].unique()\ndata[\"Species\"].value_counts()\ndata.describe()","9ca4fb47":"# Scatter plot to visualize the relationship between Sepal Length and Sepal Width\nfig_sepal = data[data.Species=='Iris-setosa'].plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm',color='red', label='Setosa')\ndata[data.Species=='Iris-versicolor'].plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm',color='yellow', label='Versicolor',ax=fig_sepal)\ndata[data.Species=='Iris-virginica'].plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm',color='blue', label='Virginica', ax=fig_sepal)\nfig_sepal.set_xlabel(\"Sepal Length\")\nfig_sepal.set_ylabel(\"Sepal Width\")\nfig_sepal.set_title(\"Sepal Length VS Width\")\nfig_sepal=plt.gcf()\nfig_sepal.set_size_inches(8,4)\nplt.show()","006beda5":"# Scatter plot to visualize the relationship betweenPetal Length and Petal Width\nfig_petal = data[data.Species=='Iris-setosa'].plot.scatter(x='PetalLengthCm',y='PetalWidthCm',color='orange', label='Setosa')\ndata[data.Species=='Iris-versicolor'].plot.scatter(x='PetalLengthCm',y='PetalWidthCm',color='blue', label='versicolor',ax=fig_petal)\ndata[data.Species=='Iris-virginica'].plot.scatter(x='PetalLengthCm',y='PetalWidthCm',color='green', label='virginica', ax=fig_petal)\nfig_petal.set_xlabel(\"Petal Length\")\nfig_petal.set_ylabel(\"Petal Width\")\nfig_petal.set_title(\" Petal Length VS Width\")\nfig_petal=plt.gcf()\nfig_petal.set_size_inches(8,4)\nplt.show()","357ef0ac":"#delete column Id\ndel(data[\"Id\"])\ndata.columns","9aa17b0a":"#convert Species into integer\ntarget_var={\"Species\":{\"Iris-versicolor\": 0, \"Iris-setosa\": 1,\"Iris-virginica\":2}}\ndata.replace(target_var, inplace=True)","eff0c365":"data.dtypes","f412518e":"# correlation\nplt.figure(figsize=(8,8))\nsns.heatmap(data.corr(),vmax=0.9,square=True)\nplt.show();","cad1bc91":"#separate the features and predictor variable\ndata_array=data.values\nX=data_array[:, 0:4]\ny=data_array[:,4]\nprint(X)\nprint(y)","02f6294b":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train, y_test= train_test_split(X,y,random_state=1,test_size=0.3) ","d837f8c3":"#K Nearest Neighbor\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3) \nknn.fit(X,y)\ny_pred_knn = knn.predict(X_test) \nprint(\"Test set predictions ():\\n {}\".format(y_pred_knn))\nprint(\"Accuracy on training set: {:.3f}\".format(knn.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(knn.score(X_test, y_test)))\n\n","1b9fcdae":"#Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nlr= LogisticRegression()\nlr.fit(X,y)\ny_pred_lr = lr.predict(X_test)\nprint(\"Test set predictions:\\n {}\".format(y_pred_lr))\nprint(\"Accuracy on training set: {:.3f}\".format(lr.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(lr.score(X_test, y_test)))\n\n","13a18c9c":"#Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\ndc_tree=DecisionTreeClassifier(max_depth= 3, random_state=0)\ndc_tree.fit(X,y)\ny_pred_dc = dc_tree.predict(X_test)\nprint(\"Test set predictions:\\n {}\".format(y_pred_dc))\nprint(\"Accuracy on training set: {:.3f}\".format(dc_tree.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(dc_tree.score(X_test, y_test)))\n","4a183135":"X_new = np.array([[5, 2.9, 1, 0.2]]) \nprediction = knn.predict(X_new) \nprint(\"Prediction: {}\".format(prediction)) \n","44d2e5c7":"Three algorithms of Machine Learning K Nearest Neighbor, Logistic Regression and Decision Tree were used to predict the species of the iris flower.\nThe accuracy of all the three alogithms turned out better.\n\n","3fedfb90":"We will check out the species of the flower with features\nSepalLengthCm:5\nSepalWidthCm:2.9\nPetalLengthCm:1\nPetalWidthCm:0.2","8eb1ad43":"Predicted value is 1 which corresponds to Setosa Species\nTherefore the given features of flower is predicted as Setosa Iris Flower"}}