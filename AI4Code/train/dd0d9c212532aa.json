{"cell_type":{"b4a38fcb":"code","f1db7563":"code","d717e1ac":"markdown","49440f7c":"markdown"},"source":{"b4a38fcb":"%%writefile submission.py\n\n# Imports helper functions\nfrom kaggle_environments.envs.halite.helpers import *\n\nimport math\n\n# Returns best direction to move from one position (fromPos) to another (toPos)\ndef getDirTo(fromPos, toPos, size):\n    fromX, fromY = divmod(fromPos[0],size), divmod(fromPos[1],size)\n    toX, toY = divmod(toPos[0],size), divmod(toPos[1],size)\n    if fromY < toY: return ShipAction.NORTH\n    if fromY > toY: return ShipAction.SOUTH\n    if fromX < toX: return ShipAction.EAST\n    if fromX > toX: return ShipAction.WEST\n\n# Find objects of other players\ndef objectsOfOthers(board):\n    # list of (x, y) coords\n    other_ships = []\n    other_shipyards = []\n    \n    for player in board.opponents:\n        for ship in player.ships:\n            pos = ship.position\n            halite_ship = ship.halite\n            other_ships.append((pos, halite_ship))\n        for shipyard in player.shipyards:\n            pos = shipyard.position\n            num_ships = len(player.ships)\n            other_shipyards.append((pos, num_ships))\n                \n    return other_ships, other_shipyards\n\n# Find nearest objects to ships\ndef nearestObject(fromPos, positions, size):\n    fromX, fromY = fromPos\n    distance = []\n    for obj, halite in positions:\n        toX, toY = obj\n        distance.append(math.sqrt((toX-fromX)**2 + (toY-fromY)**2))\n    nearest = min(distance)\n    index = distance.index(nearest)\n    return positions[index]\n\n# Code to attack closest ship\ndef attackShip(ship, other_ships, size):\n    attack = nearestObject(ship.position, other_ships, size)\n    pos, halite = attack\n    if halite > 0:\n        return getDirTo(ship.position, pos, size)\n\ndef newPosition (old_position, next_step):\n    x, y = old_position\n    if next_step == ShipAction.NORTH: return (x, y+1)\n    if next_step == ShipAction.SOUTH: return (x, y-1)\n    if next_step == ShipAction.EAST: return (x+1, y)\n    if next_step == ShipAction.WEST: return (x-1, y)\n    if next_step == None: return (x, y)\n    \n\n# Code to attack shipyard: write if's in agent\n#def attackShipyard(ship, other_shipyards, size):\n#    attack = nearestObject(ship.position, other_shipyards, size)\n#    pos, halite = attack\n#    return getDirTo(ship.position, pos, size)\n    \n\n# Directions a ship can move\ndirections = [ShipAction.NORTH, ShipAction.EAST, ShipAction.SOUTH, ShipAction.WEST]\n\n# Will keep track of whether a ship is collecting halite or carrying cargo to a shipyard\nship_states = {}\n\n# Returns the commands we send to our ships and shipyards\ndef agent(obs, config):\n    size = config.size\n    board = Board(obs, config)\n    me = board.current_player\n\n    # If there are no ships, use first shipyard to spawn a ship.\n    if len(me.ships) == 0 and len(me.shipyards) > 0:\n        me.shipyards[0].next_action = ShipyardAction.SPAWN\n\n    # If there are no shipyards, convert first ship into shipyard.\n    if len(me.shipyards) == 0 and len(me.ships) > 0:\n        me.ships[0].next_action = ShipAction.CONVERT\n        \n        \n    other_ships, other_shipyards = objectsOfOthers(board)\n    ship_positions = []\n        \n    # Actions for each ships\n    for ship in me.ships:\n        if ship.next_action == None:\n            \n            ### Part 1: Set the ship's state \n            if ship.halite == 0 and me.halite>500:\n                ship_states[ship.id] = \"ATTACK\"\n            elif ship.halite <= 500: # Collect halite\n                ship_states[ship.id] = \"COLLECT\"\n            elif ship.halite > 500: # If cargo gets very big, deposit halite\n                ship_states[ship.id] = \"DEPOSIT\"\n                \n            ### Part 2: Use the ship's state to select an action\n            if ship_states[ship.id] == \"ATTACK\":\n                direction = attackShip(ship, other_ships, size)\n                if direction: ship.next_action = direction\n            if ship_states[ship.id] == \"COLLECT\":\n                # If halite at current location running low, \n                # move to the adjacent square containing the most halite\n                if ship.cell.halite < 100:\n                    neighbors = [ship.cell.north.halite, ship.cell.east.halite, \n                                 ship.cell.south.halite, ship.cell.west.halite]\n                    best = max(range(len(neighbors)), key=neighbors.__getitem__)\n                    ship.next_action = directions[best]\n            if ship_states[ship.id] == \"DEPOSIT\":\n                # Move towards shipyard to deposit cargo\n                direction = getDirTo(ship.position, me.shipyards[0].position, size)\n                if direction: ship.next_action = direction\n             \n            new_position = newPosition(ship.position, ship.next_action)\n            for other_position in ship_positions:\n                if new_position == other_position:\n                    ship.next_action = None\n                    new_position = ship.position\n            ship_positions.append(new_position)\n            \n    \n    for shipyards in me.shipyards:\n        spawnShip = True\n        for position in ship_positions:\n            if position == shipyards.position:\n                spawnShip = False\n        if shipyards.next_action == None and spawnShip == True:\n            if me.halite > 500 and len(me.ships) <= 10 and board.step > 5:\n                shipyards.next_action = ShipyardAction.SPAWN\n                \n                \n    return me.next_actions","f1db7563":"from kaggle_environments import make\nenv = make(\"halite\", debug=True)\nenv.run([\"submission.py\", \"random\", \"random\", \"random\"])\nenv.render(mode=\"ipython\", width=800, height=600)","d717e1ac":"References:\n\nhttps:\/\/www.kaggle.com\/alexisbcook\/getting-started-with-halite","49440f7c":"This is the starter code for a strategy that will be focused on attacking other ships with less halite.  Please provide any feedback\/suggestion, as they would be much appreciated.  \n\nSo far, it's score has been pretty low, but I think that the functions are still useful and that this strategy still has potential.  I will continue updating the code as I go."}}