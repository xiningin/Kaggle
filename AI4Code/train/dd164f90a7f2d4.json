{"cell_type":{"6a46a24b":"code","e1bb73ba":"code","ed12a633":"code","e1a9e98c":"code","d37d4dcd":"code","db7b8b42":"code","dcb85957":"code","92365ee4":"code","9715e679":"code","a1695a87":"code","28ea8bf2":"code","b3dac2c9":"code","267ef1b4":"code","18bcf619":"code","0d81c90a":"code","4fdb0ad9":"code","de4d0e41":"code","c2f2ed0d":"code","c1425fff":"code","2f007b61":"code","465645f9":"code","772db058":"code","2daf1f0c":"code","3fccac16":"code","173ec83e":"code","0a7fd76f":"code","e23ba506":"code","3445c2d5":"code","053c2083":"code","47f5bba2":"code","b5d1755c":"code","3ade0e6d":"code","fb86efa2":"code","c9beba4a":"code","dfbee8cd":"code","4171eb3a":"code","aafc92fe":"code","7c7e5868":"code","5f43e139":"code","4925e7ff":"code","2f099f2e":"code","7ffded20":"code","c5b49cb6":"code","1ebec033":"code","b242ca7e":"code","8605247f":"code","e1fc38b2":"code","3af47e26":"code","46c7393f":"code","15f680a4":"code","9cc444ef":"code","118926f2":"code","6adc8905":"code","94edd194":"code","b65aa4ab":"code","9d84dc4b":"code","b0bfaa7f":"code","bf4fd50d":"code","399fb9fd":"code","75c0e479":"code","e342a5b2":"code","497e8206":"code","c4b46d7c":"code","fb010a68":"code","fff954be":"code","7073abad":"code","529fce10":"code","e19c8d46":"code","cc4c0c6f":"code","7a839ec6":"code","f3e92c99":"code","2cd6e48f":"code","9b4a4c43":"code","1bade1d4":"code","06d5020b":"code","ff966b96":"code","f9831c2c":"code","366393c2":"code","212578a1":"code","3d248cf8":"code","02c073a2":"code","8835f82b":"code","e44640b6":"code","954e77e4":"code","beaee5b6":"code","82f3429d":"code","353be209":"code","7e9bd87e":"code","0aebc570":"code","b6dd11c6":"code","1e2c2a96":"code","a84b7a5e":"code","ebb17bdf":"code","2821b0c2":"code","efb8c9e1":"code","a6a655cf":"code","18a7de94":"code","edef880d":"code","21609d83":"code","51444e2b":"code","8c124f06":"code","a52de56c":"code","115045d6":"code","f0b624c6":"code","83976ceb":"code","9ac7d69b":"code","42cd1922":"code","5b231dae":"code","1483550a":"code","319b1983":"code","1b26fde8":"code","2c176c4f":"code","4981208c":"code","9d6ca12c":"code","37288598":"code","29bbacba":"code","8900d21e":"code","320bdff2":"code","983754e1":"code","f7f461d2":"code","b19988ac":"code","bc22bf70":"code","c3b5c00d":"code","e99c3786":"code","1d399a49":"code","fe733aa3":"code","7624afcd":"code","bb205349":"code","362378da":"code","792534f9":"code","53d0d37f":"code","6aa5f903":"code","c7d5a8d5":"code","46392fee":"code","03201233":"code","d9dcb78f":"code","6264c4bc":"code","9ad543d3":"code","ca59a0be":"code","4faf2b1b":"code","68ecf966":"code","2d861b12":"code","953cdaf5":"code","c66c125c":"code","727834a5":"code","01e01889":"code","47e33bd7":"code","73649188":"code","b2d6af38":"code","23c2015b":"code","d2664a7e":"code","dc01ae25":"code","50d28b0e":"code","abdba46d":"code","361dc772":"code","b50f6380":"code","842f6290":"code","ee4620f1":"code","b418c72a":"code","27ed207c":"code","91a4eb6d":"code","00a5090e":"code","96da0726":"code","dadc9d38":"code","d5e12464":"code","e8425501":"code","b1c25813":"code","23c9a243":"code","b923011f":"code","75a8f321":"code","0e7f6737":"code","e24ffa88":"code","9a3ce7db":"code","054f4140":"code","94a44448":"code","639106a2":"code","6a6c918b":"code","3f5996c3":"code","da6cbc05":"code","497e75e9":"code","b3fa32d6":"code","87347919":"code","e23b4990":"code","d2a7c072":"code","190cfe72":"code","620d3cf1":"code","5c40bd65":"code","4645387c":"code","cbd903d8":"code","02c15788":"code","946c1150":"code","d6736df3":"code","4d158878":"code","25f265fb":"code","e2dd1888":"code","afeb551c":"code","49c3a3cb":"code","3345ccc9":"code","a8b0b1b1":"code","f8055d4c":"code","bced1074":"code","0b1811a1":"code","fb5e18ad":"code","791d5aa2":"code","cc7afa31":"code","bd9abb95":"code","f7d165d1":"code","c03d4aea":"code","8a8d51a5":"code","dd9d9e16":"code","29e63c6a":"code","0ba40ab0":"code","18d7be17":"code","adc2883c":"code","2567740b":"code","062ae9ab":"code","0b95260f":"code","26f8b68a":"code","1b0567ed":"code","fec2176e":"code","e15cab26":"code","03825a30":"code","3681b54a":"code","1e902426":"code","c34f2709":"code","a434d66f":"code","88881994":"code","2f99ac5c":"code","306cfcb5":"code","0d98d3d2":"code","01404067":"code","682a30ac":"code","bfbf1e8b":"code","807aa814":"code","e4219260":"code","7c187e59":"code","1b7a15ba":"code","f258a8d0":"code","cd60f1cc":"code","47cc8925":"code","01b14702":"code","34b9dc4e":"code","2e011876":"code","3e6cfdf5":"code","8df65544":"code","de39fcd4":"code","7f1a8d16":"code","ef84cd56":"code","30b31df2":"code","40cde5b2":"code","84e36a66":"code","bf04b578":"code","16243ef2":"code","fd28830c":"code","101b1ae8":"code","4ab8251b":"code","edb1311f":"code","807a5633":"code","fd34cfee":"code","6b4b7c96":"code","faff10e3":"code","22ba21f3":"code","58e1ccf1":"code","e368288b":"code","c4d56a66":"code","6a92e6c9":"code","9bbf72fa":"code","39928d61":"code","4a7688cf":"code","0640d291":"code","446bda67":"code","b9673ec2":"code","c0a1ce82":"code","8d61876f":"code","bb77104a":"code","4bbc42c3":"code","e1950a8e":"code","316c4616":"code","3274f0b0":"code","d562aeca":"code","fc46c1c9":"code","3e04c878":"code","2c69b276":"code","f282cc28":"code","5c0d2935":"code","828ac871":"code","d0492588":"code","9f935c7d":"code","f8f3621e":"code","1523bb7c":"code","8655c386":"code","827e82a7":"code","ac595365":"code","abf2fec1":"code","79dd41d1":"code","3a64b306":"code","d356a1d0":"code","20abfd6a":"code","e935e142":"code","93e2fb72":"code","c5141e4e":"code","6202eca2":"code","8d52174b":"code","a4ef09a6":"code","0044328a":"code","70b6ef1e":"code","49d199a9":"code","023f664d":"code","cd7e3f0d":"code","84789563":"code","6fe9c79c":"code","f25a793c":"code","b2bbf453":"code","f2af46a5":"code","1c5d5fc3":"code","098ce57a":"code","94edbfe7":"code","7311f71a":"code","df20140a":"code","5c8d1524":"code","b96e5cee":"code","876fab36":"code","0a1ea2d3":"code","51fdc0d2":"code","e622d3e7":"code","9176dc1c":"code","b5d5baa8":"code","e8793ea7":"code","d7ce823c":"code","58fbd186":"code","53803472":"code","592f288e":"code","860b22af":"code","523790d3":"code","354aea9c":"code","699a1cf5":"code","3ac7875f":"code","a3aacf60":"code","b08cb735":"code","59b0407c":"code","3fb4e993":"code","e7c8387a":"code","07a3f60b":"code","78bb0c47":"code","2957308a":"code","17a7377c":"code","6c2971b7":"code","f357b204":"code","45075c6b":"code","239c11a3":"code","e8467300":"code","845f245c":"code","5aa53beb":"code","1ad8478a":"code","cc95a0d5":"code","b090d7e2":"code","527892a9":"code","50399cf5":"code","9110a915":"code","7d548a46":"code","484ebe77":"code","005d243e":"code","708a4059":"code","1fd2ee51":"code","59dca510":"code","a5f4da29":"code","e5c6323d":"code","e31c9702":"code","775b8c41":"code","097ef76d":"code","f509d3c9":"code","9e1dc83c":"code","6d27a94e":"code","76c69cc3":"code","6b4e2a32":"code","1c100878":"code","03292187":"code","1afb5769":"code","9b4fdefa":"code","a7b099d6":"code","83b50bcf":"code","7492c63f":"code","1c47c98a":"code","81be801a":"code","1022eb6c":"code","0057941f":"code","2e11209f":"code","253318b6":"code","ac52479c":"code","aaf7f26b":"code","0a784430":"code","f48c7b2a":"code","801a2cbc":"code","68e65876":"code","eba0a273":"code","7a66bedc":"code","a5a65188":"code","130490d6":"code","b26f0452":"code","9cbaf691":"markdown","0c25c99d":"markdown","989b1673":"markdown","1a394a05":"markdown","af9e2c32":"markdown","b3bea81f":"markdown","f8f2d503":"markdown","af3c0209":"markdown","36e33523":"markdown","d36bab76":"markdown","5af47429":"markdown","288185db":"markdown","281a8313":"markdown","b9bee532":"markdown","60c006f7":"markdown","ce02f08f":"markdown","70704145":"markdown","227168c6":"markdown","76643997":"markdown","a7f897bb":"markdown","19bb8f4f":"markdown","cce51097":"markdown","ecbcb83e":"markdown","c5114c57":"markdown","5f8a35f8":"markdown","47ff6fd8":"markdown","4744b50b":"markdown","74fe9951":"markdown","85f0d771":"markdown","ec580de0":"markdown","e1b3db61":"markdown","c638d9cd":"markdown","8977a097":"markdown","7182a14d":"markdown","8d7e4f61":"markdown","a60ab32b":"markdown","42ae9bc4":"markdown","5f118052":"markdown","42c6717c":"markdown","8f94658c":"markdown","caba558e":"markdown","acaef1a0":"markdown","49ded429":"markdown","ccf860c8":"markdown","1c384af0":"markdown","dbfc7c4b":"markdown","f7259208":"markdown","bc363b20":"markdown"},"source":{"6a46a24b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas_profiling\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e1bb73ba":"from sklearn import datasets\n# github \u5730\u5740\uff1ahttps:\/\/github.com\/paskhaver\/pandas-in-action","ed12a633":"iris = datasets.load_iris()  #\u5bfc\u5165\u9e22\u5c3e\u82b1\u6570\u636e\u96c6\npd.set_option('display.max_rows',10) # \u5168\u5c40\u8bbe\u7f6e\u663e\u793a\u7684\u884c\u6570\ndata = pd.DataFrame(iris.data,columns=iris.feature_names)\ndata","e1a9e98c":"# \u5bf9\u503c\u8fdb\u884c\u6392\u5e8f\ndata.sort_values(by='petal width (cm)',ascending=False) #\u964d\u5e8f\u6392\u5217","d37d4dcd":"data","db7b8b42":"data.iloc[[0]] # \u8fd4\u56de\u4e00\u884c\uff0c\u5982\u679c\u4e0d\u628a0\u653e\u5728\u5217\u8868\u4e2d\uff0c\u8fd4\u56de\u7684\u662f\u4e00\u4e2aSeries","dcb85957":"data.loc[[0]] #\u540c\u6837\u8fd4\u56de\u4e00\u884c\uff0c\u4f46\u662f\u8fd9\u91cc\u76840\u662f\u4f5c\u4e3a\u6807\u7b7e\u4f7f\u7528\u7684","92365ee4":"data[['petal width (cm)']] #\u5982\u679c\u5217\u540d\u6ca1\u6709\u7a7a\u683c\uff0c\u4e5f\u662f\u53ef\u4ee5\u4f7f\u7528\u70b9\u8bed\u6cd5\u7684","9715e679":"data['petal width (cm)'].value_counts().head()","a1695a87":"data[data['petal width (cm)'] == 1.4] # \u8fd4\u56de\u6240\u6709petal width \u4e3a1.4\u7684\u884c","28ea8bf2":"data[(data['petal width (cm)'] == 1.4) & (data['petal length (cm)'] == 4.4)] \n# \u4f7f\u7528 & (\u903b\u8f91\u4e14) \u8fde\u63a5\u4e24\u4e2a\u6761\u4ef6\uff0c\u7c7b\u4f3c\u7684 | \u8868\u793a\u903b\u8f91\u6216\uff0c~ \u8868\u793a\u903b\u8f91\u975e","b3dac2c9":"# \u4f7f\u7528between \u8fc7\u6ee4\u51fa\u4e00\u4e2a\u8303\u56f4\ndata[data['petal width (cm)'].between(1,2)] # \u5c06petal width \u57281\u548c2\u4e4b\u95f4\u7684\u884c\u8fd4\u56de","267ef1b4":"# \u6dfb\u52a0\u4e86\u4e00\u884clabels\ndata['labels'] = iris.target\ndata.head()","18bcf619":"# \u5c06labels\u4e2d\u7684\u6570\u5b57\u66ff\u6362\u6210\u5b57\u7b26\u4e32\ndata['labels'] = data['labels'].apply(lambda x:iris.target_names[x])\ndata","0d81c90a":"data['labels'].str.upper().head() # \u4f7f\u7528\u5b57\u7b26\u4e32\u4e2d\u7684\u529f\u80fd","4fdb0ad9":"# labels \u4e2d\u7684\u5b57\u7b26\u4e32\u4f5c\u4e3a\u8fc7\u6ee4\u6761\u4ef6\ndata[data['labels'].str.contains('sa')]","de4d0e41":"movies = pd.read_csv('..\/input\/pandasinaction\/Chapter 01 - Introducing Pandas\/movies.csv')\nmovies.head()","c2f2ed0d":"movies.info()","c1425fff":"# Gross\u8fd9\u4e00\u5217\u7684\u6570\u636e\u7c7b\u578b\u662f\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u662f\u6570\u5b57\uff0c\u63a5\u4e0b\u6765\u5904\u7406\u8be5\u5217\u6570\u636e\n# \u5c06\u6570\u636e\u4e2d\u7684\u7f8e\u5143\u7b26\u53f7\u548c\u9017\u53f7\u79fb\u9664,\u7136\u540e\u518d\u8f6c\u5316\u6210\u6570\u5b57\nmovies['Gross'].str.replace('$','',regex=True).str.replace(',','',regex = True).astype(np.float)","2f007b61":"movies['Gross'] = movies['Gross'].str.replace('$','',regex=True).str.replace(',','',regex = True).astype(np.float)\nmovies.info()","465645f9":"movies.head()","772db058":"movies['Gross'].mean() #\u5747\u503c","2daf1f0c":"# \u5206\u7ec4\u6c42\u5747\u503c\nmovies.groupby('Studio')['Gross'].mean()","3fccac16":"# \u4f7f\u7528\u5217\u8868\u521b\u5efaSeries\nice_cream_flavors = [\"Chocolate\", \"Vanilla\",\"Strawberry\", \"Rum Raisin\"]\n\npd.Series(ice_cream_flavors)","173ec83e":"pd.Series(ice_cream_flavors).values #\u83b7\u53d6Series\u7684\u503c","0a7fd76f":"pd.Series(ice_cream_flavors).index.tolist() #\u83b7\u53d6Series\u7684\u7d22\u5f15","e23ba506":"s1 = pd.Series(data = ice_cream_flavors,index = list('ABCD'),name='flavors')\ns2 = pd.Series(data = ice_cream_flavors,index = list('ABCD'),name='flavors2')\ns1","3445c2d5":"pd.concat([s1,s2],axis=1) # \u5f53\u8fde\u63a5\u4e24\u4e2aSeries\u7684\u65f6\u5019\uff0c\u521b\u5efaSeries\u65f6\u4f7f\u7528\u7684name\u53c2\u6570\u5c06\u4f1a\u88ab\u4f5c\u4e3a\u5217\u540d","053c2083":"# \u4f7f\u7528\u5b57\u5178\u521b\u5efaSeries,\u5b57\u5178\u7684\u952e\u5c06\u4f1a\u88ab\u4f5c\u4e3a\u7d22\u5f15\ncalorie_info = {\n\"Cereal\": 125,\n\"Chocolate Bar\": 406,\n\"Ice Cream Sundae\": 342\n}\npd.Series(calorie_info) ","47f5bba2":"pd.Series(data = [3, 3]).is_unique # \u6570\u636e\u662f\u5426\u552f\u4e00","b5d1755c":"pd.Series(data = [1, 3, 3, 5]).is_monotonic_decreasing #\u6570\u636e\u662f\u5426\u9012\u51cf","3ade0e6d":"pd.Series(data = [1, 3, 3, 5]).is_monotonic_increasing # \u6570\u636e\u662f\u5426\u9012\u589e","fb86efa2":"# \u83b7\u53d6\u524d\u51e0\u884c\u548c\u540e\u51e0\u884c\npd.Series(data = range(1,10)).head()","c9beba4a":"pd.Series(data = range(1,10)).tail()","dfbee8cd":"pd.Series(data = range(1,10)).sum(skipna=True) # \u7d2f\u52a0","4171eb3a":"pd.Series(data = range(1,10)).product(skipna=True) #\u7d2f\u4e58","aafc92fe":"pd.Series(data = range(1,10)).cumsum() # \u6eda\u52a8\u7d2f\u52a0\uff1a\u524d\u4e00\u9879\u7684\u548c\uff0c\u524d\u4e24\u9879\u7684\u548c\uff0c\u524d\u4e09\u9879\u7684\u548c\uff0c....","7c7e5868":"pd.Series(data = range(1,10)).cumprod() #\u5173\u4e1c\u7d2f\u4e58","5f43e139":"\npd.Series(data = range(1,10),index=range(1,10)).pct_change() # \u6ca1\u4e24\u9879\u4e4b\u95f4\u7684\u53d8\u5316\u7387","4925e7ff":"# \u663e\u793aSeries\u7684\u6240\u6709\u7edf\u8ba1\u4fe1\u606f\npd.Series(data = range(1,10)).describe()","2f099f2e":"pd.Series(data = range(1,10)).sample(3) #\u968f\u673a\u53d6\u6837","7ffded20":"pd.Series(data = np.random.randint(5,10,10)).unique() # \u53bb\u91cd\u8fd4\u56de","c5b49cb6":"pokemon = pd.read_csv('..\/input\/pandasinaction\/Chapter 03 - Series Methods\/pokemon.csv') #\u8bfb\u53d6\u5b9d\u53ef\u68a6\u6570\u636e\npokemon.head()","1ebec033":"pokemon.shape","b242ca7e":"pokemon = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 03 - Series Methods\/pokemon.csv\"\n                      , index_col = \"Pokemon\"\n                      , squeeze = True) # \u5f3a\u5236\u8bfb\u53d6\u5230Series\u4e2d\npokemon","8605247f":"pokemon.hasnans  # \u68c0\u67e5\u6570\u636e\u4e2d\u662f\u5426\u542b\u6709\u7a7a\u503c  NaN","e1fc38b2":"pokemon.index.hasnans","3af47e26":"pokemon.index.has_duplicates # \u67e5\u770b\u7d22\u5f15\u662f\u5426\u6709\u91cd\u590d\u7684","46c7393f":"google = pd.read_csv('..\/input\/pandasinaction\/Chapter 03 - Series Methods\/google_stocks.csv'\n                    ,index_col='Date' # \u6307\u5b9a\u7d22\u5f15\u5217\n                    ,parse_dates=['Date'] # \u89e3\u6790\u65f6\u95f4\n                    ,squeeze=True) # \u5f3a\u5236\u8f6c\u5316\u6210Series\ngoogle.head()","15f680a4":"pd.read_csv(\"..\/input\/pandasinaction\/Chapter 03 - Series Methods\/revolutionary_war.csv\")","9cc444ef":"battles = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 03 - Series Methods\/revolutionary_war.csv\",\n                        index_col = \"Start Date\",\n                        parse_dates = [\"Start Date\"],\n                        usecols = [\"State\", \"Start Date\"], #\u53ea\u4f7f\u7528\u4e24\u5217\u6570\u636e\n                        squeeze = True)\nbattles.head()","118926f2":"google.sort_values(ascending= True)","6adc8905":"battles.sort_values() # NaN \u4f1a\u9ed8\u8ba4\u6392\u5728\u6700\u540e","94edd194":"battles.sort_values(na_position='first') # NaN \u6392\u5728\u6700\u524d","b65aa4ab":"battles.dropna().sort_values() # \u5220\u9664\u6389\u7a7a\u503c\u540e\u518d\u6392\u5e8f","9d84dc4b":"# \u6392\u5e8f\u7d22\u5f15\npokemon.sort_index()","b0bfaa7f":"# \u8fd4\u56de\u6700\u5927\u76845\u4e2a\u6570\ngoogle.nlargest(n = 5)","bf4fd50d":"google.nsmallest(n = 6) #\u8fd4\u56de\u6700\u5c0f\u7684\u51e0\u4e2a\u503c","399fb9fd":"battles.sort_values(inplace=True) #\u539f\u5730\u4fee\u6539","75c0e479":"battles.head()","e342a5b2":"pokemon.value_counts() # \u7edf\u8ba1\u503c\u7684\u6570\u91cf","497e8206":"pokemon.value_counts(normalize=True) # \u8fd4\u56de\u6bcf\u4e2a\u552f\u4e00\u503c\u51fa\u73b0\u7684\u9891\u7387","c4b46d7c":"(pokemon.value_counts(normalize=True) * 100).round(2) # \u8fd4\u56de\u6bcf\u4e2a\u552f\u4e00\u503c\u51fa\u73b0\u7684\u9891\u7387\u7684\u767e\u5206\u6bd4","fb010a68":"bins = [0, 200, 400, 600, 800, 1000, 1200, 1400]\ngoogle.value_counts(bins = bins) # \u5206\u7bb1\uff0c\u9ed8\u8ba4\u503c\u662f\u6309\u7167\u964d\u5e8f\u6392\u5217\u7684","fff954be":"google.value_counts(bins = bins,sort=False) # \u4e0d\u6392\u5e8f","7073abad":"google.value_counts(bins = bins).sort_index() #\u4e5f\u53ef\u4ee5\u503c\u6392\u5e8f\u540e\u518d\u6392\u5e8f\u7d22\u5f15","529fce10":"# \u5bf9\u7d22\u5f15\u540c\u6837\u53ef\u4ee5\u8fdb\u884c\u503c\u7edf\u8ba1\n\nbattles.index","e19c8d46":"battles.index.value_counts()","cc4c0c6f":"google.head()","7a839ec6":"google.apply(round) # \u5e94\u7528\u4e00\u4e2a\u56db\u820d\u4e94\u5165\u51fd\u6570","f3e92c99":"pokemon.head()","2cd6e48f":"pokemon.apply(lambda x:'\/' in x).map({True:'Multi',False:'Single'}) # \u5e94\u7528\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u5e76\u4f7f\u7528map\u65b9\u6cd5","9b4a4c43":"pokemon.apply(lambda x:np.where('\/' in x,'Multi','Single')) # \u4e5f\u53ef\u4ee5\u4f7f\u7528np.where\u65b9\u6cd5\uff0c\u7c7b\u4f3c\u4e8eC++\u4e2d\u7684\u4e09\u5143\u8fd0\u7b97\u7b26","1bade1d4":"pokemon.apply(lambda x:np.where('\/' in x,'Multi','Single')).value_counts()","06d5020b":"wars = pd.read_csv('..\/input\/pandasinaction\/Chapter 03 - Series Methods\/revolutionary_war.csv'\n                  ,index_col='Start Date'\n                   ,squeeze= True\n                   ,usecols=['Start Date','Battle']\n                   ,parse_dates=['Start Date']\n                  )\nwars.head()","ff966b96":"wars.shape","f9831c2c":"wars.index.is_unique  # \u7d22\u5f15\u6709\u91cd\u590d\u503c","366393c2":"wars.index # \u7d22\u5f15\u65f6datetime\u683c\u5f0f","212578a1":"wars.index.to_series() # \u5c06\u7d22\u5f15\u8f6c\u6210Series","3d248cf8":"wars.index.to_series().isnull().sum() # \u67e5\u770b\u7a7a\u503c","02c073a2":"wars.index.to_series().dropna().dt.day_name() # \u8fd4\u56de\u6bcf\u4e00\u5929\u662f\u5468\u51e0","8835f82b":"wars.index.to_series().dropna().dt.day_name().value_counts()","e44640b6":"# \u521b\u5efa\u4e00\u4e2aDataFrame\n\ncity_data = {\n\"City\": [\"New York City\", \"Paris\", \"Barcelona\", \"Rome\"],\n\"Country\": [\"United States\", \"France\", \"Spain\", \"Italy\"],\n\"Population\": [8600000, 2141000, 5515000, 2873000]\n}\n\ncities = pd.DataFrame(data=city_data)\ncities.head()","954e77e4":"cities.T.head() # \u8f6c\u7f6e","beaee5b6":"# \u4ecenumpy N \u7ef4\u6570\u7ec4\u521b\u5efaDataFrame\n\npd.DataFrame(data = np.array([[25, 22, 80, 43, 42],\n                              [40, 89, 7, 21, 25],\n                              [89, 71, 32, 28, 39]])\n             ,index = [\"Morning\", \"Afternoon\", \"Evening\"]\n             ,columns = (\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\n            )","82f3429d":"# \u8bfb\u53d6csv\u6587\u4ef6\nnba = pd.read_csv('..\/input\/pandasinaction\/Chapter 04 - The DataFrame Object\/nba.csv'\n           ,parse_dates=['Birthday']\n           )\nnba.head()","353be209":"nba.dtypes.to_frame() # \u8fd4\u56de\u6bcf\u4e00\u7c7b\u7684\u7c7b\u578b","7e9bd87e":"nba.index #\u7d22\u5f15","0aebc570":"nba.columns # \u5217\u540d","b6dd11c6":"nba.values  # \u503c\uff0c\u8fd4\u56de\u4e00\u4e2anp array","1e2c2a96":"nba.count() #\u6570\u91cf","a84b7a5e":"nba.nunique() # \u552f\u4e00\u6027\u503c\u7684\u6570\u91cf","ebb17bdf":"nba.isnull().sum(axis = 0) # \u6ca1\u6709\u7a7a\u503c","2821b0c2":"nba.max() # \u9ed8\u8ba4\u8fd4\u56de\u6bcf\u4e00\u5217\u7684\u6700\u5927\u503c","efb8c9e1":"nba.nlargest(4,columns=['Salary']) # \u6307\u5b9a\u90a3\u4e00\u5217\u4e3a\u53c2\u7167","a6a655cf":"nba.sum(numeric_only=True) #\u4ec5\u4ec5\u7d2f\u52a0\u6570\u503c\u578b\u7684\u5217","18a7de94":"nba.mean(numeric_only=True)","edef880d":"nba.head()","21609d83":"# \u6309\u7167\u67d0\u4e00\u5217\u8fdb\u884c\u6309\u503c\u6392\u5e8f\n\nnba.sort_values(by='Salary',ascending=False).head()","51444e2b":"# \u6309\u884c\u7d22\u5f15\u8fdb\u884c\u6392\u5e8f\nnba.sort_index(axis=0,ascending=False).head() #\u9ed8\u8ba4axis\u4e3a0","8c124f06":"nba.sort_index(axis=1).head()","a52de56c":"# \u8bbe\u7f6e\u65b0\u7684\u7d22\u5f15\n\nnba.set_index(keys='Name').head()","115045d6":"# \u9009\u62e9\u5355\u72ec\u7684\u4e00\u5217\n\nnba.Name.to_frame().head()","f0b624c6":"# \u6216\u8005\nnba['Name'].to_frame().head()","83976ceb":"# \u9009\u62e9\u591a\u5217\n\nnba[['Name','Salary']]","9ac7d69b":"# \u9009\u62e9\u6307\u5b9a\u7c7b\u578b\u7684\u7c7b\n\nnba.select_dtypes(include='object').head()","42cd1922":"# \u6392\u9664\u5b57\u7b26\u4e32\u548c\u6574\u6570\u7684\u5217\nnba.select_dtypes(exclude = [\"object\", \"int\"]).head()","5b231dae":"nba.head()","1483550a":"nba.set_index(keys='Name',inplace=True)","319b1983":"# \u9009\u62e9\u4e00\u884c  The loc attribute accepts the label of a row to extract.\n\nnba.loc['Shake Milton']","1b26fde8":"# \u9009\u62e9\u591a\u884c\n\nnba.loc[['Shake Milton','Derrick Rose']]","2c176c4f":"# \u5207\u7247\u9009\u62e9\u591a\u884c\n\nnba.sort_index().loc[\"Otto Porter\":\"Patrick Beverley\"]","4981208c":"# \u5e03\u5c14\u7d22\u5f15\u9009\u62e9\u591a\u884c\n\nnba.sort_index().loc[nba.Position == 'SG'].head()","9d6ca12c":"# \u901a\u8fc7\u7d22\u5f15\u4f4d\u7f6e\u83b7\u53d6\u884c The iloc (index location) attribute extracts one or more rows by index position.\n\nnba.iloc[300] # \u4e00\u884c","37288598":"nba.iloc[[300,400]] # \u591a\u884c","29bbacba":"nba.iloc[0:4] #\u5207\u7247","8900d21e":"# \u63d0\u53d6\u503c\n\nnba.iloc[0,0]","320bdff2":"nba.loc['Shake Milton','Salary']","983754e1":"# \u91cd\u547d\u540d\u884c\u6216\u5217\n\nnba.columns","f7f461d2":"# \u53ef\u4ee5\u76f4\u63a5\u5bf9columns\u5c5e\u6027\u91cd\u65b0\u590d\u5236\uff0c\u4ece\u800c\u66ff\u6362\u6389\u539f\u6765\u7684column\n\nnba.columns = [\"Team\", \"Position\", \"Date of Birth\", \"Pay\"]\nnba.head()","b19988ac":"nba.columns","bc22bf70":"# \u4f7f\u7528rename \u8fdb\u884c\u91cd\u547d\u540d\uff0c\u65e2\u53ef\u4ee5\u91cd\u547d\u540d\u5217\u540d\uff0c\u4e5f\u53ef\u4ee5\u91cd\u547d\u540d\u7d22\u5f15\u540d\n\nnba.rename(columns={'Date of Birth':'Birthday'},inplace=True)\nnba.head()","c3b5c00d":"nba.loc[\"Giannis Antetokounmpo\"].to_frame()","e99c3786":"nba.rename(index={\"Giannis Antetokounmpo\": \"Greek Freak\"},inplace=True)\nnba.loc[\"Greek Freak\"].to_frame()","1d399a49":"# \u91cd\u7f6e\u7d22\u5f15","fe733aa3":"nba.head()","7624afcd":"nba.reset_index() #\u91cd\u7f6e\u7d22\u5f15\uff0c\u5e76\u4fdd\u7559\u539f\u59cb\u7d22\u5f15","bb205349":"employees = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 05 - Filtering a DataFrame\/employees.csv\"\n                        ,parse_dates = [\"Start Date\"])\nemployees.head()","362378da":"employees.info() # \u67e5\u770b\u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f","792534f9":"# Mgmt \u5217\uff0cpandas\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e94\u8be5\u662f\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6ce8\u610f\u91cc\u9762\u6709\u63a7\u5236\n\nemployees.Mgmt.isnull().sum() # 68\u4e2a\u7a7a\u503c","53d0d37f":"employees.Mgmt.astype(bool).isnull().sum() # \u63a7\u5236\u6ca1\u6709\u4e86\uff0c\u6240\u4ee5\u8fd9\u79cd\u65b9\u6cd5\u662f\u4e0d\u5bf9\u7684\uff0c\u5e94\u8be5\u5148\u5904\u7406\u6389\u7a7a\u503c\u518d\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c","6aa5f903":"# \u6682\u65f6\u4e0d\u8003\u8651\u7a7a\u503c\u7684\u60c5\u51b5\uff0c\u4f7f\u7528\u5e03\u5c14\u7c7b\u578b\u7684\u503c\u66ff\u6362\u6389\u539f\u5148\u7684Mgmt\u5217\n\nemployees.Mgmt = employees.Mgmt.astype(bool)\nemployees.info() # \u5185\u5b58\u4f7f\u7528\u51cf\u5c0f\u4e86","c7d5a8d5":"employees.Salary.fillna(0).tail()","46392fee":"employees.Salary = employees.Salary.fillna(0).astype(int)\nemployees.info()","03201233":"employees.nunique()","d9dcb78f":"# \u5bf9\u4e8e\u5206\u7c7b\u6bd4\u8f83\u5c11\u7684\u7c7b\uff0c\u53ef\u4ee5\u5c06\u5176\u7c7b\u578b\u8bbe\u7f6e\u4e3a\u201c\u5206\u7c7b\u7c7b\u578b\u201d\uff0c\u4ee5\u8282\u7701\u5185\u5b58\nemployees.Gender.astype('category')","6264c4bc":"employees.Gender = employees.Gender.astype('category')\nemployees.info()","9ad543d3":"employees.Team = employees.Team.astype('category')\nemployees.info()","ca59a0be":"# \u6761\u4ef6\u8fc7\u6ee4\n\nemployees.loc[employees[\"First Name\"] == \"Maria\"]","4faf2b1b":"# \u7b26\u5408\u6761\u4ef6\u8fd0\u7b97\u7b26  &  |  ~\nemployees.loc[~(employees[\"Salary\"] >= 100000)].head()","68ecf966":"# isin \u65b9\u6cd5\n\nemployees.loc[employees.Team.isin(['Marketing','Finance'])]","2d861b12":"employees.groupby('Team').Team.count()","953cdaf5":"# between \u65b9\u6cd5\n\nemployees.loc[employees['Start Date'].between(left = '1980-1-1',right='1980-3-10')].head()","c66c125c":"# isnull \u4e0e notnull \u65b9\u6cd5\n\nemployees.loc[employees.Team.isnull()].head()","727834a5":"employees['Start Date'].head().to_frame() # \u65f6\u95f4\u6709\u4e2a\u7a7a\u503c NaT  ","01e01889":"employees['Start Date'].isnull().head().to_frame() # NaT \u540c\u6837\u4f1a\u88ab\u8ba4\u4e3a\u662f \u7a7a\u503cNull","47e33bd7":"# \u5904\u7406\u7a7a\u503c\uff0c\u5148\u91cd\u65b0\u5bfc\u5165\u6570\u636e\n\nemployees = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 05 - Filtering a DataFrame\/employees.csv\"\n                        ,parse_dates = [\"Start Date\"])\nemployees.head()","73649188":"employees.dropna() # \u9ed8\u8ba4\u4f1a\u5220\u9664\u6389\u54ea\u4e9b\u6709NaN\u7684\u884c\uff0c\u4e0d\u7ba1\u67091\u4e2a\u8fd8\u662f6\u4e2a","b2d6af38":"employees.dropna().isnull().sum()","23c2015b":"employees.tail()","d2664a7e":"employees.dropna(how='all').tail() # \u53ea\u6709\u8fd9\u4e00\u884c\u5168\u662fNaN\u624d\u4f1a\u88ab\u5220\u9664","dc01ae25":"employees.dropna(subset=['Gender'])['Gender'].isnull().sum() # \u5220\u9664\u6389\u2018Gender\u2019\u5217\u4e3aNaN\u7684\u90a3\u4e9b\u884c","50d28b0e":"# \u5904\u7406\u91cd\u590d\u6570\u636e\nemployees[\"Team\"].to_frame()","abdba46d":"employees[\"Team\"].duplicated().head() # \u67e5\u770b\u662f\u5426\u6709\u91cd\u590d","361dc772":"# \u63d0\u53d6\u6bcf\u4e2ateam\u4e2d\u552f\u4e00\u7684\u4e00\u4e2a\u4eba\u5458\n\nemployees.loc[~employees.Team.duplicated()]","b50f6380":"employees.Team.nunique(dropna=False) # \u4e0d\u6392\u9664NaN","842f6290":"employees.drop_duplicates() # \u5220\u9664\u91cd\u590d\u7684\u6570\u636e\u884c\uff0c\u9ed8\u8ba4\u662f\u5f53\u884c\u7684\u6240\u6709\u5b57\u6bb5\u90fd\u4e00\u6837\u624d\u5220\u9664","ee4620f1":"employees.drop_duplicates(subset=['Team']) # \u53ea\u8981\u662fTeam\u8fd9\u4e2a\u5b57\u6bb5\u4e00\u6837\uff0c\u6574\u884c\u5c31\u4f1a\u88ab\u8ba4\u4e3a\u91cd\u590d\uff0c\u4ece\u800c\u88ab\u79fb\u9664","b418c72a":"employees.drop_duplicates(subset=['Team'],keep='last') # \u53bb\u91cd\u540e\u4fdd\u7559\u54ea\u4e00\u4e2a\uff0c\u9ed8\u8ba4\u662ffirst","27ed207c":"employees.drop_duplicates(subset = [\"First Name\"], keep = False) # \u5c06\u91cd\u590d\u7684\u90fd\u5220\u6389\uff0c\u4e0d\u4fdd\u7559\u4efb\u4f55\u4e00\u4e2a","91a4eb6d":"inspections = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 06 - Working with Text Data\/chicago_food_inspections.csv\")\ninspections","00a5090e":"inspections.info() # \u90fd\u662f\u5b57\u7b26\u4e32\u6570\u636e","96da0726":"inspections.Name.str","dadc9d38":"inspections.Name","d5e12464":"# \u53bb\u6389\u5b57\u7b26\u4e32\u5f00\u5934\u6216\u7ed3\u5c3e\u7684\u7a7a\u683c\n\ninspections.Name.str.strip()","e8425501":"inspections[\"Name\"] = inspections[\"Name\"].str.strip()","b1c25813":"inspections","23c9a243":"# \u904d\u5386 DataFrame ,\u53bb\u6389\u6240\u6709\u5217\u4e2d\u7684\u7a7a\u683c\n\nfor col in inspections.columns:\n    inspections[col] = inspections[col].str.strip()","b923011f":"inspections","75a8f321":"inspections[\"Risk\"].value_counts(dropna = False)","0e7f6737":"# \u6839\u636e\u4e1a\u52a1\u9700\u6c42\u770b\u662f\u5426\u9700\u8981\u5220\u9664NaN\uff0c\u5047\u8bbe\u8fd9\u91cc\u9700\u8981\u5220\u9664Risk\u4e3aNaN\u7684\u6240\u6709\u884c\ninspections.dropna(subset=['Risk'],inplace=True)\ninspections['Risk'].value_counts(dropna = False)","e24ffa88":"inspections.replace(to_replace = \"All\"\n                    ,value = \"Risk 4 (Extreme)\"\n                    #,inplace = True\n                   ).Risk.unique()  # \u66ff\u6362,\u6ce8\u610f\u8fd9\u4e2areplace\u662fDateFrame\u7684\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u4e2d\u7684\u65b9\u6cd5","9a3ce7db":"inspections.replace(to_replace = \"All\"\n                    ,value = \"Risk 4 (Extreme)\"\n                    ,inplace = True\n                   )\ninspections.Risk.value_counts(dropna=False)","054f4140":"# \u5207\u7247\n\ninspections.Risk.str.slice(5,6).head() # \u5207\u51fa\u4e2d\u95f4\u7684\u6570\u5b57","94a44448":"# \u6216\u8005\u76f4\u63a5\u4f7f\u7528\u4e2d\u62ec\u53f7\u5207\u7247\n\ninspections.Risk.str[5:6].head() # \u5207\u51fa\u4e2d\u95f4\u7684\u6570\u5b57","639106a2":"inspections.Risk.value_counts(dropna=False)","6a6c918b":"# \u5207\u51fa\u4e2d\u95f4\u7684 High,Medium \u7b49\u5b57\u7b26\u4e32\n\ninspections.Risk.str[8:-1].to_frame()","3f5996c3":"inspections.Risk.head().to_frame()","da6cbc05":"inspections.Risk.str.replace('Risk \\d \\(','',regex=True).str.replace('\\)','',regex=True).to_frame().head() # \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u66ff\u6362","497e75e9":"# \u4e00\u4e9b\u5e03\u5c14\u65b9\u6cd5\n# contains \u3001endswith\u3001startswith \u7b49\n\ninspections[\"Name\"].str.lower().str.contains(\"pizza\").to_frame().head()","b3fa32d6":"# \u5206\u5272\u5b57\u7b26\u4e32\n\ncustomers = pd.read_csv('..\/input\/pandasinaction\/Chapter 06 - Working with Text Data\/customers.csv')\ncustomers.head()","87347919":"customers.Name.str.len().to_frame().head()  # \u67e5\u770b\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 len\u65b9\u6cd5","e23b4990":"customers.Name.str.split(' ').to_frame().head() # \u5b57\u7b26\u4e32\u5207\u5272\uff0c\u8fd4\u56de\u5217\u8868","d2a7c072":"customers.Name.str.split(' ').str[0].to_frame().head() # \u5207\u5272\u4e4b\u540e\uff0c\u53ea\u4fdd\u7559\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20","190cfe72":"# split \u65b9\u6cd5\u9ed8\u8ba4\u662f\u6309\u7167\u6a21\u5f0f\u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u5339\u914d\u8fdb\u884c\u5207\u5272\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u53c2\u6570n,\u9650\u5b9a\u53ea\u5207\u51e0\u6b21\n\ncustomers.Name.str.split(' ',n = 1).to_frame().head()","620d3cf1":"customers.Name.str.split(' ',n = 1).str.get(-1).to_frame().head() # \u8fd8\u53ef\u4ee5\u4f7f\u7528get\u65b9\u6cd5\u83b7\u53d6\u5207\u5272\u540e\u5217\u8868\u4e2d\u7684\u5143\u7d20","5c40bd65":"customers[\"Name\"].str.split(pat = \" \",\n                            n = 1,\n                            expand = True).head() # \u8bbe\u7f6eexpand\u5c5e\u6027\uff0c\u53ef\u4ee5\u6269\u5c55\u6210\u4e00\u4e2aDataFrame","4645387c":"# \u5c06\u6269\u5c55\u51fa\u6765\u7684\u4e24\u5217\u8bbe\u7f6e\u5217\u540d\n\ncustomers[['First Name','Last Name']] = customers.Name.str.split(pat=' ',n = 1,expand=True) # \u589e\u52a0\u4e86\u4e24\u5217\ncustomers.head()","cbd903d8":"# \u5220\u9664\u6389 Name\u8fd9\u4e00\u5217\n\ncustomers.drop(labels='Name',axis=1,inplace=True)\ncustomers.head()","02c15788":"addresses = [\n    (\"8809 Flair Square\", \"Toddside\", \"IL\", \"37206\"), \n    (\"9901 Austin Street\", \"Toddside\", \"IL\", \"37206\"), \n    (\"905 Hogan Quarter\", \"Franklin\", \"IL\", \"37206\"), \n    (\"72 Savage Lane\", \"Talkanooga\", \"TN\", \"37341\")\n]\n\npd.MultiIndex.from_tuples(tuples=addresses) # \u591a\u5c42\u7d22\u5f15","946c1150":"my_index = pd.MultiIndex.from_tuples(\n                                    tuples = addresses,\n                                    names = [\"Street\", \"City\", \"State\", \"Zip\"]  # \u4e3a\u591a\u5c42\u7d22\u5f15\u5206\u522b\u8bbe\u7f6e\u540d\u79f0\n   )\nmy_index","d6736df3":"data=[\n            [\"A\", \"B+\"],\n            [\"C+\", \"C\"],\n            [\"D-\", \"A\"],\n            [\"B-\", \"F\"]\n]\ncolumns = [\"Schools\", \"Cost of Living\"] \narea_grades = pd.DataFrame(data = data,\n                           index=my_index,\n                           columns=columns)\n \narea_grades  # \u591a\u5c42\u7d22\u5f15\u6837\u4f8b","4d158878":"area_grades.index","25f265fb":"# Revenue  --  \u8425\u4e1a\u989d    Expenses  --  \u652f\u51fa\nsales = pd.read_csv('..\/input\/pandasinaction\/Chapter 08 - Reshaping and Pivoting\/sales_by_employee.csv'\n                   ,parse_dates=['Date']\n                   )\nsales.head()","e2dd1888":"# \u5236\u4f5c\u900f\u89c6\u8868\n\nsales.pivot_table(index = \"Date\")  # \u900f\u89c6\u8868\u9ed8\u8ba4\u4f1a\u6dfb\u52a0\u4e00\u4e2a\u805a\u5408\u51fd\u6570\uff0c\u9ed8\u8ba4\u662f\u5e73\u5747\u503c\n","afeb551c":"# The pivot table above shows the average expenses and average revenue organized by the 5 unique dates in sales.","49c3a3cb":"sales.pivot_table(index = \"Date\",aggfunc='sum')  # \u81ea\u5b9a\u4e49\u805a\u5408\u51fd\u6570","3345ccc9":"sales.pivot_table(index = \"Date\",aggfunc='mean',values = ['Revenue'])  # \u6307\u5b9a\u9700\u8981\u805a\u5408\u503c\u7684\u5217","a8b0b1b1":"sales.pivot_table(index = \"Date\"\n                  ,aggfunc='mean'\n                  ,values = ['Revenue']\n                  ,columns = 'Name'  #\u589e\u52a0\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u663e\u793a\u6bcf\u4e2a\u4eba\u7684\u5e73\u5747\u9500\u552e\u989d\n                 ) ","f8055d4c":"# \u4e0a\u9762\u7684\u8868\u683c\u5c31\u4f7f\u7528\u4e8c\u7ef4\u8868\u683c\u663e\u793a\u4e86\u4e09\u7ef4\u6570\u636e\n# \u663e\u793a\u7684\u662f\u6bcf\u4e00\u5929\u6bcf\u4e2a\u9500\u552e\u7684\u5e73\u5747\u9500\u552e\u989d\u6570\u636e","bced1074":"sales.pivot_table(index = \"Date\"\n                  ,aggfunc='sum'\n                  ,values = ['Revenue']\n                  ,columns = 'Name' \n                  ,fill_value=0 # \u5c06\u63a7\u5236\u8bbe\u7f6e\u4e3a0\n                 ) ","0b1811a1":"sales.pivot_table(index = \"Date\"\n                  ,aggfunc='sum'\n                  ,values = ['Revenue']\n                  ,columns = 'Name' \n                  ,fill_value=0 \n                  ,margins=True  # \u6dfb\u52a0\u6c47\u603b\n                  ,margins_name='\u603b\u9500\u552e\u989d' #\u81ea\u5b9a\u4e49\u540d\u79f0\uff0c \u9ed8\u8ba4\u53eb \u2018ALL\u2019\n                 ) ","fb5e18ad":"sales.pivot_table(index = \"Date\"\n                  ,aggfunc='count'\n                  ,values = ['Revenue']\n                  ,columns = 'Name' \n                  ,fill_value=0 \n                 ) \n# \u6bcf\u5929\u6bcf\u4e2a\u9500\u552e\u7684\u5f00\u5355\u6570","791d5aa2":"sales.pivot_table(index = \"Date\"\n                  ,aggfunc=['sum','count']\n                  ,values = ['Revenue'] # \u5982\u679c\u4e0d\u51e1\u5728\u5217\u8868\u4e2d\uff0c\u8be5\u503c\u4e0d\u4f1a\u518d\u900f\u89c6\u8868\u4e2d\u663e\u793a\n                  ,columns = 'Name' \n                  ,fill_value=0 \n                 ) \n# \u6bcf\u5929\u6bcf\u4e2a\u9500\u552e\u7684\u9500\u552e\u989d\u548c\u5f00\u5355\u6570","cc7afa31":"sales.pivot_table(index = \"Date\"\n                  ,aggfunc=['min','max']\n                  ,values = ['Revenue','Expenses'] \n                  ,columns = 'Name' \n                  ,fill_value=0 \n                 ) \n# \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0caggfunc\u548cvalues \u4e2d\u7684\u503c\u8fdb\u884c\u5168\u8fde\u63a5\uff0c\u4ea7\u751f\u56db\u4e2a\u8868","bd9abb95":"sales.pivot_table(index = \"Date\"\n                  ,aggfunc={'Revenue':'max','Expenses':'min'}\n                  ,values = ['Revenue','Expenses'] \n                  ,columns = 'Name' \n                  ,fill_value=0 \n                 ) \n# \u6307\u5b9a Revenue\u5217\u4f7f\u7528max\u805a\u5408\u51fd\u6570\uff0cExpenses\u4f7f\u7528min\u805a\u5408\u51fd\u6570","f7d165d1":"# \u4f7f\u7528\u591a\u5c42\u884c\u6807\u7b7e\u521b\u5efa\u900f\u89c6\u8868\n\nsales.pivot_table(\n                index = ['Name','Date']\n                ,values = ['Revenue']\n                ,aggfunc='sum'\n).head(10)","c03d4aea":"by_name_and_date = sales.pivot_table(index = \"Name\",\n                                    columns = \"Date\",\n                                    values = \"Revenue\",\n                                     fill_value=0,\n                                    aggfunc = \"sum\")\nby_name_and_date.head()","8a8d51a5":"by_name_and_date.stack().to_frame().head() # \u5c06 \u2019Date\u2018\u5217\u7d22\u5f15\u79fb\u5230\u884c\uff0c\u4ece\u800c\u8ba9\u884c\u7d22\u5f15\u53d8\u6210\u591a\u5c42\u7d22\u5f15","dd9d9e16":"# The inverse method to stack is unstack, which moves an index level from the rows to the columns.\n# unstack \u5c06\u4f1a\u5c06\u884c\u7684\u5241\u6210\u7d22\u5f15\u62c6\u5206\u5230\u5217","29e63c6a":"sales_by_customer = sales.pivot_table(\n                                    index = [\"Customer\", \"Name\"],\n                                    values = \"Revenue\",\n                                    aggfunc = \"sum\"\n)\nsales_by_customer.head()","0ba40ab0":"sales_by_customer.unstack() # \u5c06\u591a\u5c42\u7d22\u5f15\u4e2d\u7684Name\u79fb\u5230\u4e86\u5217\u4e0a","18d7be17":"video_game_sales = pd.read_csv(\n    \"..\/input\/pandasinaction\/Chapter 08 - Reshaping and Pivoting\/video_game_sales.csv\"\n)\nvideo_game_sales.head()","adc2883c":"video_game_sales.shape","2567740b":"video_game_sales.melt(id_vars = \"Name\", value_vars = \"NA\") # \u4f1a\u5c06\u6bcf\u4e2a\u6e38\u620f\u5728\u201cNA\u201d\u533a\u57df\u7684\u9500\u552e\u989d\u5217\u4e3e\u51fa\u6765","062ae9ab":"video_game_sales.columns[video_game_sales.columns !='Name'].to_list()","0b95260f":"video_game_sales.melt(\n    id_vars = \"Name\"\n    , value_vars = video_game_sales.columns[video_game_sales.columns !='Name'].to_list()\n) \n# \u4f1a\u5c06\u6bcf\u4e2a\u6e38\u620f\u5728\u6bcf\u4e2a\u533a\u57df\u7684\u9500\u552e\u989d\u5217\u4e3e\u51fa\u6765\n# \u53ef\u4ee5\u770b\u5230\u6570\u636e\u53d8\u6210\u4e8666264 \u884c","26f8b68a":"video_game_sales.melt(\n    id_vars = \"Name\"\n    , value_vars = video_game_sales.columns[video_game_sales.columns !='Name'].to_list()\n    ,var_name='\u533a\u57df'\n    ,value_name= '\u9500\u552e\u989d'\n) ","1b0567ed":"# \u5236\u4f5c\u900f\u89c6\u8868\uff1a\u6bcf\u4e2a\u6e38\u620f\u5728\u6bcf\u4e2a\u533a\u57df\u7684\u5e73\u5747\u9500\u552e\u989d\n\nvideo_game_sales_2 = video_game_sales.melt(\n    id_vars = \"Name\"\n    , value_vars = video_game_sales.columns[video_game_sales.columns !='Name'].to_list()\n    ,var_name='\u533a\u57df'\n    ,value_name= '\u9500\u552e\u989d'\n)","fec2176e":"video_game_sales_2.pivot_table(\n                                index='Name'\n                                ,columns=['\u533a\u57df']\n                                ,values = ['\u9500\u552e\u989d']\n                                ,aggfunc = 'mean'\n                                ,fill_value=0\n)","e15cab26":"recipes = pd.read_csv(\n    '..\/input\/pandasinaction\/Chapter 08 - Reshaping and Pivoting\/recipes.csv'\n)\nrecipes","03825a30":"recipes.info()","3681b54a":"recipes['Ingredients'].str.split(',') # \u8fd4\u56de\u4e00\u4e2a\u5143\u7d20\u4e3a\u5217\u8868\u7684Series","1e902426":"recipes['Ingredients'] = recipes['Ingredients'].str.split(',') \nrecipes","c34f2709":"recipes.explode('Ingredients')  # \u4f1a\u666f\u5217\u8868\u4e86\u7684\u5143\u7d20\u5206\u89e3\u5230\u591a\u884c","a434d66f":"cars = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 08 - Reshaping and Pivoting\/used_cars.csv\")\ncars.head()  # \u5404\u79cd\u8f66\u7684\u6570\u636e","88881994":"min_wage = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 08 - Reshaping and Pivoting\/minimum_wage.csv\")\nmin_wage.head(5) # \u7f8e\u56fd\u5404\u5dde\u6700\u4f4e\u5de5\u8d44","2f99ac5c":"# \u7b2c\u4e00\u4e2a\u95ee\u9898  \u805a\u5408\u6240\u6709\u8f66\u7684\u603b\u4ef7\uff0cfuel\u4f5c\u4e3a\u884c\u6807\u7b7e\n\ncars.pivot_table(\n                index = 'Fuel'\n                ,values = ['Price']\n                ,aggfunc='sum'\n)","306cfcb5":"# \u7b2c\u4e8c\u4e2a\u95ee\u9898\n# In the cars dataset, aggregate the count of cars, organized by the manufacturer on the index axis and the transmission type on the column axis. \n# Show the subtotals for both the rows and columns.\n\ncars.pivot_table(\n                index='Manufacturer',\n                columns=['Transmission'],\n                values = 'Price',\n                aggfunc=['count'],\n                fill_value=0,\n                margins=True\n)","0d98d3d2":"# \u95ee\u98983 \n# In the cars dataset, aggregate the mean of prices across the cars, organized by both the year \n# and the fuel type on the index axis and the transmission type on the column axis.\n\ncars.pivot_table(\n                values='Price'\n                ,aggfunc='mean'\n                ,index = ['Year','Fuel']\n                ,columns = 'Transmission'\n                ,fill_value=0\n        )","01404067":"# \u95ee\u98984 Given a DataFrame with the data from the previous bullet, move the transmission type level from the column axis to the row axis.\ncars_ = cars.pivot_table(\n                values='Price'\n                ,aggfunc='mean'\n                ,index = ['Year','Fuel']\n                ,columns = 'Transmission'\n                ,fill_value=0\n        )\n\ncars_","682a30ac":"cars_.stack().to_frame()","bfbf1e8b":"# \u95ee\u98985\n# In the min_wage dataset, convert the data from a \"wide\" format to a \"narrow\" format. \n# In other words, how can you move all of the data from the 8 year columns into a single column\n\nmin_wage","807aa814":"min_wage.melt(id_vars='State',value_vars=[str(i) for i in range(2010,2018)],value_name='minimum_wage',var_name = 'Year')","e4219260":"food_data = {\n    \"Item\": [\"Banana\", \"Cucumber\", \"Orange\", \"Tomato\", \"Watermelon\"],\n    \"Type\": [\"Fruit\", \"Vegetable\", \"Fruit\", \"Vegetable\", \"Fruit\"],\n    \"Price\": [0.99, 1.25, 0.25, 0.33, 3.00]\n}\nsupermarket = pd.DataFrame(data = food_data)\nsupermarket","7c187e59":"group = supermarket.groupby('Type')\n[*group] #\u5c06group\u5bf9\u8c61\u62c6\u89e3\u5f00\u6765","1b7a15ba":"group.get_group('Fruit')  # \u83b7\u53d6\u67d0\u4e00\u7ec4\u7684\u6570\u636e","f258a8d0":"group.mean() # \u805a\u5408\u6bcf\u4e2a\u5206\u7ec4\u7684\u6570\u636e","cd60f1cc":"fortune = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 09 - The GroupBy Object\/fortune1000.csv\") # \u8d22\u5bcc\u6570\u636e\nfortune.head() ","47cc8925":"sectors = fortune.groupby('Sector') # \u884c\u4e1a\nlen(sectors) # \u5171\u670921\u4e2a\u884c\u4e1a","01b14702":"fortune['Sector'].nunique() # 21\u4e2a\u884c\u4e1a","34b9dc4e":"sectors.size()  # \u8fd4\u56de\u6bcf\u4e2a\u5206\u7ec4\u4e2d\u7684\u6570\u91cf","2e011876":"fortune['Sector'].value_counts() # \u8fd4\u56de\u548c\u4e0a\u9762\u4e00\u6837\u7684\u6570\u636e","3e6cfdf5":"# \u7ec4\u5bf9\u8c61\u7684\u5c5e\u6027\u4e0e\u65b9\u6cd5\n\nsectors.first().head() # \u8fd4\u56de\u6bcf\u4e2a\u7ec4\u7684\u7b2c\u4e00\u884c\u6570\u636e","8df65544":"sectors.last().head() # \u8fd4\u56de\u6bcf\u4e2a\u7ec4\u7684\u6700\u540e\u4e00\u884c\u6570\u636e","de39fcd4":"sectors.nth(2).head()  # \u8fd4\u56de\u6bcf\u4e2a\u7ec4\u7684\u7b2c\u4e09\u884c\u6570\u636e\uff0c\u7d22\u5f15\u4ece0\u5f00\u59cb","7f1a8d16":"sectors.head(2)  #\u8fd4\u56de\u6ca1\u7ec4\u7684\u524d\u4e24\u884c\u6570\u636e\uff0c\u7c7b\u4f3c\u7684\u65b9\u6cd5\u4e3a   tail","ef84cd56":"sectors.get_group('Energy').head() # \u8fd4\u56de\u67d0\u4e2a\u7ec4\u7684\u6570\u636e","30b31df2":"# the sum method calculates the sum per sector for all numeric columns (Revenues, Profits, Employees) in the fortune DataFrame.\n\nsectors.sum()  # \u6bcf\u4e2a\u5206\u7ec4\u7684\u6240\u6709\u6570\u503c\u5217\u7684\u6c42\u548c","40cde5b2":"sectors['Profits'].sum().to_frame() # \u53ea\u9488\u5bf9\u7279\u5b9a\u7684\u5217\u6c47\u603b","84e36a66":"# \u4e0d\u540c\u7684\u5217\u5e94\u7528\u4e0d\u540c\u7684\u805a\u5408\u51fd\u6570\n\nsectors.agg({'Revenues':'min','Profits':'max','Employees':'sum'})","bf04b578":"# apply \u65b9\u6cd5\uff0c\u5e94\u7528\u4e00\u4e2a\u51fd\u6570\u5230\u6bcf\u4e00\u4e2a\u7ec4\u4e0a\n\nsectors.apply(lambda df:df.nlargest(2,'Revenues')) # \u6bcf\u4e2a\u7ec4\u8fd4\u56de\u4e24\u4e2aRevenues\u6700\u5927\u7684\u884c\u6570\u636e","16243ef2":"# \u591a\u5217\u5206\u7ec4\n\nsector_and_industry = fortune.groupby(by = [\"Sector\", \"Industry\"])\n[*sector_and_industry][:2]","fd28830c":"sector_and_industry.size()","101b1ae8":"sector_and_industry.get_group(('Business Services','Education'))","4ab8251b":"# \u6240\u6709\u7684\u805a\u5408\u65b9\u6cd5\u90fd\u5c06\u4f1a\u8fd4\u56de\u4e00\u4e2a\u591a\u5c42\u7d22\u5f15\u7684DataFrame \u6216 Series\n\nsector_and_industry.sum().head()","edb1311f":"members1 = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 10 - Merging, Joining, and Concatenating\/meetup\/members1.csv\")\nmembers2 = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 10 - Merging, Joining, and Concatenating\/meetup\/members2.csv\")\ngroups = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 10 - Merging, Joining, and Concatenating\/meetup\/groups.csv\")\ncategories = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 10 - Merging, Joining, and Concatenating\/meetup\/categories.csv\")\ncities = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 10 - Merging, Joining, and Concatenating\/meetup\/cities.csv\")\nevents1 = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 10 - Merging, Joining, and Concatenating\/meetup\/events1.csv\")\nevents2 = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 10 - Merging, Joining, and Concatenating\/meetup\/events2.csv\")","807a5633":"members1.head()","fd34cfee":"members2.head()","6b4b7c96":"groups.head() \n# organizer_id \u5bf9\u5e94\u7740 members\u8868\u4e2d\u7684member_id\n# category_id \u5bf9\u5e94\u7740 categories\u8868\u4e2d\u7684category_id\n# city_id \u5bf9\u5e94\u7740 cities\u8868\u4e2d\u7684city_id","faff10e3":"categories.head()","22ba21f3":"cities.head()","58e1ccf1":"events1.head()","e368288b":"# \u62fc\u63a5\u4e24\u4e2aDataFrame,members1\u548cmembers2\n\npd.concat([members1,members2],axis=0)","c4d56a66":"pd.concat([members1,members2],axis=0,ignore_index=True) # \u5ffd\u7565\u7d22\u5f15\uff0c\u76f8\u5f53\u4e8e\u91cd\u7f6e\u4e86\u7d22\u5f15","6a92e6c9":"members1.shape,members2.shape","9bbf72fa":"pd.concat([members1,members2],axis=0,ignore_index=True).shape[0],members1.shape[0]+members2.shape[0]","39928d61":"# \u4fdd\u7559\u539f\u59cbDataFrame\u7684\u7d22\u5f15\uff0c\u62fc\u63a5\u4e4b\u540e\u751f\u6210\u591a\u5c42\u7d22\u5f15\n\npd.concat([members1,members2],axis=0,keys=['members1','members2'])","4a7688cf":"events1.tail()","0640d291":"events2.tail()","446bda67":"# events1 \u548cevents2 \u8868\u4e2d\u90fd\u6709group_id \u8fd9\u4e00\u5217\n# \u63a5\u4e0b\u6765\u67e5\u627e\u51fa\u54ea\u4e9bgroup \u5373\u51fa\u73b0\u5728event1\u4e2d\u53c8\u51fa\u73b0\u5728events2\u4e2d\n\nevents1.merge(\n            right = events2\n            ,how = 'inner'\n            ,on = 'group_id'\n)","b9673ec2":"# \u62fc\u63a5\u4e4b\u540e\uff0c\u9ed8\u8ba4\u7b2c\u4e00\u4e2a\u8868\u7684\u5b57\u6bb5\u540d\u4f1a\u6dfb\u52a0_x\u540e\u7f00\uff0c\u7b2c\u4e8c\u4e2a\u8868\u5b57\u6bb5\u540d\u4f1a\u6dfb\u52a0 _y\u540e\u7f00\n\nevents1[events1.group_id == 5817262] # events1\u8868\u4e2dgroup_id \u4e3a5817262\u7684\u8bb0\u5f55\u4e3a\u56db\u4e2a","c0a1ce82":"events2[events2.group_id == 5817262] # events2\u8868\u4e2dgroup_id \u4e3a5817262\u7684\u8bb0\u5f55\u4e3a1\u4e2a","8d61876f":"# \u5728\u878d\u5408\u540e\u7684DataFrame\u4e2d\uff0c\u51fa\u73b0\u7684\u8bb0\u5f55\u4e3a4 * 1 ,\u6bcf\u4e2aevent1\u4e2d\u7684\u8bb0\u5f55\u90fd\u548cevents2\u4e2d\u7684\u4e00\u6761\u8bb0\u5f55\u76f8\u5339\u914d","bb77104a":"events1.merge(right = events2,\n                how = \"inner\",\n                on = \"group_id\",\n                suffixes = [\"_M1\", \"_M2\"] # \u4fee\u6539\u5b57\u6bb5\u540e\u7f00\u540d\n             ).head()","4bbc42c3":"events1.merge(right = events2,\n                how = \"inner\",\n                on = [\"group_id\", \"event_name\"], # \u4f9d\u8d56\u591a\u4e2a\u5b57\u6bb5(\u540c\u4e00\u4e2agroup\u7684\u540c\u4e00\u4e2aevent\u540c\u65f6\u51fa\u73b0\u5728\u4e24\u4e2aevents\u8868\u4e2d)\n                suffixes = [\" Month 1\", \" Month 2\"]\n             ).head()","e1950a8e":"events1.merge(\n            right=events2\n            ,how='outer'\n            ,on='group_id'\n)","316c4616":"events1.merge(\n            right=events2\n            ,how='outer'\n            ,on='group_id'\n            ,indicator=True # \u663e\u793agroup_id \u662f\u4e24\u4e2a\u8868\u683c\u90fd\u6709\uff0c\u8fd8\u662f\u53ea\u51fa\u73b0\u5728\u4e00\u4e2a\u8868\u683c\u4e2d\n)","3274f0b0":"events1.merge(\n            right=events2\n            ,how='left' # \u4fdd\u7559\u5168\u90e8\u7684\u5de6\u4fa7\u8868\u683c\u6570\u636e\n            ,on='group_id'\n            ,indicator=True # \u663e\u793agroup_id \u662f\u4e24\u4e2a\u8868\u683c\u90fd\u6709\uff0c\u8fd8\u662f\u53ea\u51fa\u73b0\u5728\u4e00\u4e2a\u8868\u683c\u4e2d\n)","d562aeca":"events1.merge(\n            right=events2\n            ,how='left' # \u4fdd\u7559\u5168\u90e8\u7684\u5de6\u4fa7\u8868\u683c\u6570\u636e\n            ,on='group_id'\n            ,indicator=True # \u663e\u793agroup_id \u662f\u4e24\u4e2a\u8868\u683c\u90fd\u6709\uff0c\u8fd8\u662f\u53ea\u51fa\u73b0\u5728\u4e00\u4e2a\u8868\u683c\u4e2d\n)._merge.value_counts()","fc46c1c9":"groups.head()","3e04c878":"# groups DataFrame\u662f\u4e00\u4e2a\u7edd\u4f73\u7684Left Join \u7684\u4f8b\u5b50\n# \u5176\u4e2d\u6709category_id\u3001city_id\u3001organizer_id\u5b57\u6bb5\uff0c\u5177\u4f53\u4fe1\u606f\u4fdd\u5b58\u5728\u4e86\u5176\u4ed6\u7684DataFrame\u4e2d\n# \u4f7f\u7528Left Join \u53ef\u4ee5\u5c06\u6240\u6709\u8be6\u7ec6\u4fe1\u606f\u878d\u5408\u5230\u4e00\u4e2a\u5927\u7684DataFrame\u4e2d\n\ngroups.merge(\n    right = categories # \u5c06categories\u8be6\u7ec6\u4fe1\u606f\u6dfb\u52a0\u8fdb\u6765\n    ,how='left'\n    ,on = 'category_id'\n            )","2c69b276":"# \u6ce8\u610f\u4e0a\u65b9\u8fd4\u56de\u7684DataFrame\u4e2d\u7d22\u5f15\u4e3a2\u548c4 \u7684 category_name \u4e3aNaN\n# \u8bf4\u660e\uff0cgroups DataFrame \u7684 category_id \u670926 \uff0c\u4f46\u662f\u4e0d\u5728 categories DataFrame\u4e2d","f282cc28":" cities.head(2)","5c0d2935":"cities.rename(columns={'city_id':'city identifier'},inplace=True)","828ac871":" cities.head(2)","d0492588":"# \u63a5\u4e0b\u6765\u878d\u5408\uff0cgrounps \u548c cities \u4e24\u4e2aDataFrame\uff0c\u5c06groups \u7684city\u4fe1\u606f\u663e\u793a\u51fa\u6765\n# \u9700\u8981\u6ce8\u610f\u7684\u662f\u4e24\u4e2aDataFrame\u4e2d\u8868\u793acity id \u7684\u5b57\u6bb5\u540d\u662f\u4e0d\u4e00\u6837\u7684\n\ngroups.merge(\n    right=cities\n    ,how='left'\n    ,left_on='city_id'\n    ,right_on='city identifier'\n).head()","9f935c7d":"members1.head()","f8f3621e":"# \u63a5\u4e0b\u6765\u5c06members1 DataFrame \u7684\u7d22\u5f15\u8bbe\u7f6e\u4e3amember_id \u8fd9\u4e00\u5217\n\nmembers1.set_index(keys='member_id',inplace=True)\nmembers1.head()","1523bb7c":"# \u63a5\u4e0b\u6765\u878d\u5408 groups \u548c members1 \u4e24\u4e2aDataFrame\n# \u5176\u4e2dmembrs1 \u7684member_id \u662f\u884c\u7d22\u5f15\n\ngroups.merge(\n    right= members1\n    ,how='left'\n    ,left_on= 'organizer_id'\n    ,right_index=True #\u4f7f\u7528\u53f3\u8fb9\u8868\u683c\u7684\u884c\u7d22\u5f15\u4f5c\u4e3a\u878d\u5408\u5b57\u6bb5\n).head()","8655c386":"# python \u5185\u7f6e\u7684DateTime\u6a21\u5757\nimport datetime as dt","827e82a7":"birthday = dt.date(year = 1991, month = 4, day = 12)  # \u65e5\u671f\u5bf9\u8c61\uff0c\u5305\u542b\u5e74\u6708\u65e5\nbirthday","ac595365":"birthday.year,birthday.month,birthday.day","abf2fec1":"alarm_clock = dt.time(hour = 6, minute = 43, second = 25) # \u65f6\u95f4\u5bf9\u8c61\uff0c\u5305\u542b\u65f6\u5206\u79d2\u5fae\u79d2\nalarm_clock","79dd41d1":"alarm_clock.hour,alarm_clock.minute,alarm_clock.second,alarm_clock.microsecond","3a64b306":"moon_landing = dt.datetime(year = 1969, month = 7, day = 20,hour = 22, minute = 56, second = 20) #\u65e5\u671f\u65f6\u95f4\u5bf9\u8c61\nmoon_landing","d356a1d0":"dt.timedelta(    #  \u65f6\u95f4\u95f4\u9694\u5bf9\u8c61\n    #weeks = 8\n    days = 1\n    ,hours = 3\n    #,minutes = 58\n    #,seconds = 12\n)","20abfd6a":"3*60*60","e935e142":"pd.Timestamp(year = 1991, month = 4, day = 12) # \u751f\u6210\u65f6\u95f4\u6233\u5bf9\u8c61","93e2fb72":"pd.Timestamp(year = 1991, month = 4, day = 12).year  # \u8bbf\u95ee\u5404\u79cd\u65f6\u95f4\u65e5\u671f\u76f8\u5173\u5c5e\u6027","c5141e4e":"pd.Timestamp(\"2015-03-31\") # \u5c06\u5b57\u7b26\u4e32\u89e3\u6790\u6210\u65f6\u95f4\u6233\u5bf9\u8c61","6202eca2":"string_dates = [\"2018\/01\/02\", \"2016\/04\/12\", \"2009\/09\/07\"]\npd.DatetimeIndex(data = string_dates)  # \u65e5\u671f\u65f6\u95f4\u7d22\u5f15\u5bf9\u8c61","8d52174b":"s = pd.Series(data = [100, 200, 300], index = pd.DatetimeIndex(data = string_dates))\ns","a4ef09a6":"# Date- and time-related operations become possible in pandas only when our values are\n# stored as Timestamps rather than as strings.\n\ns.sort_index() # \u6839\u636e\u65f6\u95f4\u81ea\u52a8\u6392\u5e8f","0044328a":"disney = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 11 - Working with Dates and Times\/disney.csv\")\ndisney.head()","70b6ef1e":"pd.to_datetime(disney[\"Date\"]).head() # \u4f7f\u7528to_datetime \u51fd\u6570\u5c06\u5b57\u7b26\u4e32\u89e3\u6790\u6210\u65f6\u95f4\u6233\u5bf9\u8c61","49d199a9":"# \u5c06 Date\u5217\u89e3\u6790\u4e3a\u65f6\u95f4\u6233\u5bf9\u8c61\uff0c\u5e76\u4f5c\u4e3a\u7d22\u5f15\n\ndisney = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 11 - Working with Dates and Times\/disney.csv\"\n                    ,parse_dates=['Date']\n                    )\ndisney.head()","023f664d":"disney.info()","cd7e3f0d":"disney.Date.dt  # dt accessors","84789563":"disney.Date.dt.day.head().to_frame()  # \u4f7f\u7528 dt accessors \u83b7\u53d6\u65e5\u671f","6fe9c79c":"disney.Date.dt.dayofweek.head().to_frame()  # \u4f7f\u7528 dt accessors \u83b7\u53d6\u65e5\u671f\u5728\u4e00\u5468\u7684\u7b2c\u51e0\u5929","f25a793c":"disney.Date.dt.day_name().head().to_frame()  # \u4f7f\u7528 dt accessors \u83b7\u53d6\u65e5\u671f\u7684\u661f\u671f\u540d\u79f0","b2bbf453":"disney['\u5468\u51e0'] = disney.Date.dt.day_name()","f2af46a5":"disney.head()","1c5d5fc3":"disney.groupby('\u5468\u51e0')[['Open','Close']].mean()","098ce57a":"disney[\"Date\"].dt.month_name().head().to_frame()# \u6708\u4efd\u540d\u79f0","94edbfe7":"disney[\"Date\"].dt.is_quarter_start.tail().to_frame()  #\u662f\u5426\u4e3a\u5b63\u5ea6\u7684\u5f00\u59cb\n# \u7c7b\u4f3c\u7684\u8fd8\u6709  is_quarter_end\u3001is_month_start\u3001is_month_end\u3001is_month_start\u3001is_month_end","7311f71a":"pd.DateOffset(years = 3, months = 4, days = 5)","df20140a":"disney[\"Date\"].head().to_frame()","5c8d1524":"(disney.Date + pd.DateOffset(days = 5)).head().to_frame()  # \u65f6\u95f4\u5411\u524d\u79fb\u52a85\u5929 \uff08move forward\uff09","b96e5cee":"(disney.Date - pd.DateOffset(days = 5)).head().to_frame()  # \u65f6\u95f4\u5411\u540e\u79fb\u52a85\u5929 \uff08move backward\uff09","876fab36":"duration = pd.Timedelta(days = 8, hours = 7,minutes = 6, seconds = 5)\nduration","0a1ea2d3":"pd.to_timedelta(\"3 hours, 5 minutes, 12 seconds\") # \u4f7f\u7528to_timedelta\u51fd\u6570\u89e3\u6790\u5b57\u7b26\u4e32","51fdc0d2":"pd.Timestamp(\"1999-02-05\") - pd.Timestamp(\"1998-05-24\") # \u8fd4\u56de\u65f6\u95f4\u95f4\u9694","e622d3e7":"deliveries = pd.read_csv(\"..\/input\/pandasinaction\/Chapter 11 - Working with Dates and Times\/deliveries.csv\")\ndeliveries.head()","9176dc1c":"deliveries.info()","b5d5baa8":"# \u8f6c\u5316\u65e5\u671f\n\nfor col in deliveries.columns:\n    deliveries[col] = pd.to_datetime(deliveries[col])\ndeliveries.head()","e8793ea7":"deliveries.info()","d7ce823c":"# \u914d\u9001\u65e5\u671f\u4e0e\u8ba2\u5355\u65e5\u671f\u76f8\u51cf\uff0c\u5f97\u5230\u914d\u9001\u65f6\u95f4\n\ndeliveries['duration'] = deliveries.delivery_date - deliveries.order_date\ndeliveries.head()","58fbd186":"deliveries.info()","53803472":"deliveries.sort_values(by='duration')  # \u6839\u636e\u914d\u9001\u65f6\u957f\u8fdb\u884c\u6392\u5e8f","592f288e":"# deliveries[deliveries.duration > '365 days']   #\u4f5c\u7528\u548c\u4e0b\u65b9\u4e00\u884c\u662f\u4e00\u6837\u7684\ndeliveries[deliveries.duration > pd.Timedelta(days = 365)] # \u7b5b\u9009\u51fa\u914d\u9001\u65f6\u957f\u5927\u4e8e365\u5929\u7684\u8ba2\u5355","860b22af":"happiness = pd.read_csv('..\/input\/pandasinaction\/Chapter 13 - Options and Settngs\/happiness.csv')\nhappiness.head()","523790d3":"pd.describe_option(\"display.max_rows\") # \u5c55\u793a\u6700\u5927\u663e\u793a\u884c\u6570","354aea9c":"pd.options.display.max_rows = 12   # \u8bbe\u7f6e\u6700\u5927\u663e\u793a\u884c\u6570","699a1cf5":"pd.describe_option(\"display.max_rows\")","3ac7875f":"pd.describe_option(\"display.max_col\") # \u663e\u793a\u7684\u5217\u6570","a3aacf60":"pd.options.display.max_columns = 4 # \u8bbe\u7f6e\u6700\u5927\u663e\u793a\u5217\u6570","b08cb735":"happiness.head()","59b0407c":" pd.describe_option(\"display.precision\") # \u6d6e\u70b9\u6570\u7684\u663e\u793a\u7cbe\u5ea6","3fb4e993":"pd.options.display.precision = 2 # \u4ec5\u4ec5\u662f\u663e\u793a\u7cbe\u5ea6\uff0c\u4e0d\u5f71\u54cd\u5b9e\u9645\u6570\u503c","e7c8387a":"happiness.head()","07a3f60b":"happiness.iloc[0,-1]","78bb0c47":"pd.options.display.precision = 6","2957308a":"pd.describe_option(\"display.max_colwidth\") # \u6700\u5927\u663e\u793a\u5217\u5bbd","17a7377c":"happiness.head(3)","6c2971b7":"pd.options.display.max_columns = 10","f357b204":"happiness.head(3)","45075c6b":"pd.options.display.max_colwidth = 5\nhappiness.head(3)","239c11a3":"pd.options.display.max_colwidth = 15\nhappiness.head(3)","e8467300":"import matplotlib.pyplot as plt\n%matplotlib inline","845f245c":"space_missions = pd.read_csv('..\/input\/pandasinaction\/Chapter 14 - Visualization\/space_missions.csv'\n                            ,parse_dates=['Date']\n                             ,index_col='Date'\n                            )\nspace_missions.head()","5aa53beb":"space_missions.info()","1ad8478a":"# \u7ed8\u5236\u6298\u7ebf\u56fe\n\nspace_missions.Cost.plot(figsize = (10,5),label = 'Cost') # \u9ed8\u8ba4\u4f1a\u5c06DataFrame\u7684\u884c\u7d22\u5f15\u4f5c\u4e3aX label\nplt.legend()\nplt.show()","cc95a0d5":"data = [\n            [2000, 3000000],\n            [5000, 5000000]\n        ]\n \ndf = pd.DataFrame(data = data, columns = [\"Small\", \"Large\"])\ndf","b090d7e2":"df.plot(kind='line') # \u9ed8\u8ba4kind \u53d6line\uff0c\u5373\u7ed8\u5236\u6298\u7ebf\u56fe\n# \u4f1a\u5c06\u6bcf\u4e00\u4e2a\u6570\u5b57\u5217\u90fd\u7ed8\u5236\u51fa\u6765","527892a9":"df.plot(\n    y = 'Small' , # \u6307\u5b9a\u7ed8\u5236\u90a3\u4e00\u5217\n    kind='line',  # \u56fe\u5f62\u7c7b\u578b\n    figsize = (10,5), # \u753b\u5e03\u5927\u5c0f\n    colormap = 'gray' # \u8bbe\u7f6e\u989c\u8272\u6a21\u5f0f\n)\nplt.legend()\nplt.show()","50399cf5":"# \u6253\u5370\u6240\u6709\u7684\u989c\u8272\u6a21\u5f0f\nplt.colormaps()  ","9110a915":"space_missions.head()","7d548a46":"space_missions['Company Name'].value_counts().to_frame()  # \u6bcf\u4e2a\u516c\u53f8\u7684\u592a\u7a7a\u4efb\u52a1\u6b21\u6570","484ebe77":"# \u4f7f\u7528\u67f1\u72b6\u56fe\u7ed8\u5236\nspace_missions['Company Name'].value_counts().plot(\n    figsize = (10,5),\n    kind='bar',\n    label = 'quantity',\n    colormap = 'spring'# tab10 summer winter tab10_r rainbow spring\n)\nplt.legend()\nplt.show()","005d243e":"# \u4f7f\u7528\u6c34\u5e73\u67f1\u72b6\u56fe\u7ed8\u5236\nspace_missions['Company Name'].value_counts().sort_values().plot( # \u6392\u5e8f\u540e\u518d\u7ed8\u5236\n    figsize = (10,5),\n    kind='barh',\n    label = 'quantity'\n)\nplt.legend()\nplt.show()","708a4059":"space_missions[\"Status\"].value_counts().to_frame() # \u53d1\u5c04\u72b6\u6001\u7edf\u8ba1","1fd2ee51":"# \u4f7f\u7528\u997c\u72b6\u56fe\u7ed8\u5236\nspace_missions['Status'].value_counts().plot(\n    figsize = (10,5),\n    kind='pie',\n    legend = True, # \u662f\u5426\u663e\u793a\u56fe\u4f8b\n    title = 'Pie',\n    ylabel = '',\n    colormap = 'Accent' # 'Accent', 'Accent_r', 'Blues', 'Blues_r', 'BrBG', 'BrBG_r', 'BuGn', 'BuGn_r', 'BuPu', 'BuPu_r', 'CMRmap', 'CMRmap_r', 'Dark2', 'Dark2_r', 'GnBu', 'GnBu_r', 'Greens', 'Greens_r', 'Greys', 'Greys_r', 'OrRd', 'OrRd_r', 'Oranges', 'Oranges_r', 'PRGn', 'PRGn_r', 'Paired', 'Paired_r', 'Pastel1', 'Pastel1_r', 'Pastel2', 'Pastel2_r', 'PiYG', 'PiYG_r', 'PuBu', 'PuBuGn', 'PuBuGn_r', 'PuBu_r', 'PuOr', 'PuOr_r', 'PuRd', 'PuRd_r', 'Purples', 'Purples_r', 'RdBu', 'RdBu_r', 'RdGy', 'RdGy_r', 'RdPu', 'RdPu_r', 'RdYlBu', 'RdYlBu_r', 'RdYlGn', 'RdYlGn_r', 'Reds', 'Reds_r', 'Set1', 'Set1_r', 'Set2', 'Set2_r', 'Set3', 'Set3_r', 'Spectral', 'Spectral_r', 'Wistia', 'Wistia_r', 'YlGn', 'YlGnBu', 'YlGnBu_r', 'YlGn_r', 'YlOrBr', 'YlOrBr_r', 'YlOrRd', 'YlOrRd_r', 'afmhot', 'afmhot_r', 'autumn', 'autumn_r', 'binary', 'binary_r', 'bone', 'bone_r', 'brg', 'brg_r', 'bwr', 'bwr_r', 'cividis', 'cividis_r', 'cool', 'cool_r', 'coolwarm', 'coolwarm_r', 'copper', 'copper_r', 'cubehelix', 'cubehelix_r', 'flag', 'flag_r', 'gist_earth', 'gist_earth_r', 'gist_gray', 'gist_gray_r', 'gist_heat', 'gist_heat_r', 'gist_ncar', 'gist_ncar_r', 'gist_rainbow', 'gist_rainbow_r', 'gist_stern', 'gist_stern_r', 'gist_yarg', 'gist_yarg_r', 'gnuplot', 'gnuplot2', 'gnuplot2_r', 'gnuplot_r', 'gray', 'gray_r', 'hot', 'hot_r', 'hsv', 'hsv_r', 'inferno', 'inferno_r', 'jet', 'jet_r', 'magma', 'magma_r', 'nipy_spectral', 'nipy_spectral_r', 'ocean', 'ocean_r', 'pink', 'pink_r', 'plasma', 'plasma_r', 'prism', 'prism_r', 'rainbow', 'rainbow_r', 'seismic', 'seismic_r', 'spring', 'spring_r', 'summer', 'summer_r', 'tab10', 'tab10_r', 'tab20', 'tab20_r', 'tab20b', 'tab20b_r', 'tab20c', 'tab20c_r', 'terrain', 'terrain_r', 'turbo', 'turbo_r', 'twilight', 'twilight_r', 'twiligh\n)\nplt.show()","59dca510":"# \u4e00\u822c\u4f7f\u7528\u65b9\u6cd5\nfig = plt.figure(figsize=(10,5))\nplt.plot([1,2,3],[3,9,12],label = 'y VS X')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.legend()\nplt.title('title')\nplt.suptitle('Super Title',size = 20,y = 1.03) # y \u8bbe\u7f6ey\u8f74\u4e0a\u7684\u504f\u79fb\u91cf\nplt.show()","a5f4da29":"# \u9762\u5411\u5bf9\u8c61\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\n\nfig,Axs = plt.subplots(\n    figsize = (10,5) # \u8bbe\u7f6e\u753b\u5e03\u5927\u5c0f\n    ,nrows = 1,ncols = 2  # \u8bbe\u7f6e\u5b50\u753b\u5e03\u6570\u91cf\uff0c\u884c\u4e0e\u5217\n    ,sharey= True   # \u662f\u5426\u5171\u4eab y\u8f74\n    ,subplot_kw={ # \u5b50\u753b\u5e03\u53c2\u6570\u8bbe\u7f6e,\u4f1a\u540c\u65f6\u8bbe\u7f6e\u6240\u6709\u7684\u5b50\u56fe\n        'ylabel':'y',\n        'xlim':[1,10],\n    }  \n)\n\nfig.set_facecolor('0.7')  #\u6574\u4e2a\u753b\u5e03\u7684\u80cc\u666f\u8272\n\n# Axs \u4e2d\u4fdd\u5b58\u7740\u4e24\u4e2a\u5b50\u56fe\u5bf9\u8c61\uff0c\u662f\u4e00\u4e2a\u6570\u7ec4\nAxs[0].set_title('Axs_1')  # \u5355\u72ec\u8bbe\u7f6e\u4e00\u4e2a\u5b50\u56fe\nAxs[0].plot([1,3,7,9],[3,5,3,8])\nAxs[1].set_title('Axs_2')  # \u5355\u72ec\u8bbe\u7f6e\u53e6\u4e00\u4e2a\u5b50\u56fe\nAxs[1].plot([1,3,7,9],[2,9,4,1])\nAxs[0].set_facecolor('#aaaaff')  # \u8bbe\u7f6e\u5b50\u56fe\u7684\u80cc\u666f\u8272\nAxs[0].spines['top'].set_visible(False)  # \u5c06\u5b50\u56fe\u4e0a\u65b9\u7684\u7ebf\u6761\u53d6\u6d88\u663e\u793a\nAxs[0].spines['right'].set_visible(False)\nfig.suptitle('Figure Title',size = 20,y = 1.03)\nplt.show()","e5c6323d":"df = pd.DataFrame(\nindex = ['Atiya','Abbas','Cornelia','Stephanie','Monte'],\n    data = {\n        'Apples':[20,10,40,20,50],\n        'Oranges':[35,40,25,19,33]\n    }\n)\ndf","e31c9702":"# \u7ed8\u5236\u67f1\u72b6\u56fe\n# DataFrame\u7684\u6807\u7b7e\u5c06\u4f5c\u4e3a \u753b\u5e03\u7684 X label\n\ncolor = ['0.2','0.7']\nax = df.plot.bar(color = color,figsize = (16,4))","775b8c41":"# KDE plot  \u5bc6\u5ea6\u56fe  (\u6838\u5bc6\u5ea6\u4f30\u8ba1(Kernel Density Estimates))\n\n# \u6240\u8c13\u6838\u5bc6\u5ea6\u4f30\u8ba1\uff0c\u5c31\u662f\u91c7\u7528\u5e73\u6ed1\u7684\u5cf0\u503c\u51fd\u6570(\u201c\u6838\u201d)\u6765\u62df\u5408\u89c2\u5bdf\u5230\u7684\u6570\u636e\u70b9\uff0c\u4ece\u800c\u5bf9\u771f\u5b9e\u7684\u6982\u7387\u5206\u5e03\u66f2\u7ebf\u8fdb\u884c\u6a21\u62df,\u4f5c\u7528\u548c\u76f4\u65b9\u56fe\u7c7b\u4f3c\uff0c\u662f\u4e3a\u4e86\u67e5\u770b\u6570\u636e\u7684\u5206\u5e03\u3002\n\n# KDE plot \u4f1a\u5ffd\u7565\u6389DataFrame\u7684\u884c\u7d22\u5f15\uff0c\u800c\u662f\u7ed8\u5236\u5404\u4e2a\u5217\u7684\u5bc6\u5ea6\u5206\u5e03\u56fe\u3002\n\nax = df.plot(\n    kind = 'kde'\n    ,color = color\n    ,figsize = (16,4)\n    ,grid = True\n)\nax.spines['left'].set_visible(True)","097ef76d":"# \u591a\u4e2a\u5b50\u56fe\u7ed8\u5236\u5728\u4e00\u8d77   \u6298\u7ebf\u56fe\uff0c\u6563\u70b9\u56fe\uff0c\u67f1\u72b6\u56fe","f509d3c9":"fig,(ax1,ax2,ax3) = plt.subplots(figsize = (16,4),nrows = 1,ncols = 3)\nfig.suptitle('Two Variable Plots',size = 20,y = 1.02)\n\ndf.plot(\n    ax = ax1 # \u6307\u5b9a\u5b50\u56fe\n    ,title = 'line plot'\n)\n\ndf.plot(\n    kind = 'scatter'\n    ,ax = ax2\n    ,title = 'Scatter plot'\n    ,x = 'Apples' # \u6307\u5b9aX\u8f74\u7684\u6570\u636e\n    ,y = 'Oranges' # \u6307\u5b9ay\u8f74\u7684\u6570\u636e\n)\n\ndf.plot(\n    kind = 'bar'\n    ,ax = ax3\n    ,title = 'bar plot'\n)\nfig.show()","9e1dc83c":"# \u591a\u4e2a\u5b50\u56fe\u7ed8\u5236\u5728\u4e00\u8d77   KED\u56fe\uff0c\u7bb1\u7ebf\u56fe\uff0c\u76f4\u65b9\u56fe","6d27a94e":"fig,(ax1,ax2,ax3) = plt.subplots(figsize = (16,4),nrows = 1,ncols = 3)\nfig.suptitle('One Variable Plots',size = 20,y = 1.02)\n\ndf.plot(\n    kind = 'kde'\n    ,ax = ax1 \n    ,title = 'KDE plot'\n)\n\ndf.plot(\n    kind = 'box'\n    ,ax = ax2\n    ,title = 'Box plot'\n)\n\ndf.plot(\n    kind = 'hist'\n    ,ax = ax3\n    ,title = 'Histogram'\n)\nfig.show()","76c69cc3":"\"\"\"\ndiverted  --  \u6539\u9053\ncanceled  --  \u53d6\u6d88\ndelayed   --  \u5ef6\u8fdf\nARR_DELAY  --  \u822a\u73ed\u5ef6\u8fdf\u65f6\u95f4\nDIST  --  \u8ddd\u79bb\n\n\"\"\"\nflights = pd.read_csv('..\/input\/pandas-cookbook\/data\/flights.csv')\nflights.head()","6b4e2a32":"# \u7edf\u8ba1\u4e00\u4e0b  diverted\uff08\u6539\u9053\uff09\uff0ccanceled(\u53d6\u6d88)\uff0cdelayed(\u5ef6\u8fdf),ontime\uff08\u51c6\u65f6\uff09\u7684\u822a\u73ed\u6570\n\n# DIVERTED \u8fd9\u4e00\u5217 \u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u7edf\u8ba1\u51fa\u6539\u9053\u7684\u822a\u73ed\u6570\uff0c\u5176\u672c\u7701\u5c31\u662f\u4e00\u4e2a\u4e8c\u5206\u7c7b\u7684\u503c\n# \u822a\u73ed\u88ab\u8ba4\u4e3a\u5ef6\u8fdf --  \u53ea\u8981\u6bd4\u9884\u5b9a\u65f6\u95f4(scheduled) \u65f6\u95f4\u665a15\u5206\u949f\u6216\u66f4\u957f\n# \u521b\u5efa\u4e24\u5217\u8bb0\u5f55\u822a\u73ed\u662f\u5426\u5ef6\u8fdf\uff0c\u662f\u5426\u51c6\u65f6\u5230\u8fbe\n\ncols = ['DIVERTED','CANCELLED','DELAYED']\n\nflights['DELAYED'] = (flights.ARR_DELAY >= 15).astype(int)\nflights.head()","1c100878":"flights[['DIVERTED','CANCELLED','DELAYED']].head() # \u8fd9\u662f\u822a\u73ed\u6ca1\u6709\u51c6\u65f6\u5230\u8fbe\u7684\u4e09\u79cd\u60c5\u51b5","03292187":"flights[cols].any(axis = 1).to_frame() # \u53ea\u8981\u8fd9\u4e09\u5217\u4e2d\u6709\u4efb\u4f55\u4e00\u4e2a\u4e3a1\uff0c\u5219\u8fd4\u56deTrue\uff0c\u4e5f\u5c31\u662f\u6ca1\u6709\u51c6\u65f6\u5230\u8fbe","1afb5769":"~flights[cols].any(axis = 1).to_frame()  # \u53d6\u53cd\uff0c\u53ef\u4ee5\u5f97\u5230\u54ea\u4e9b\u884c\u662f\u51c6\u65f6\u5230\u8fbe\u7684","9b4fdefa":"# \u589e\u52a0\u4e00\u5217 ON_TIME\nflights['ON_TIME'] = ~flights[cols].any(axis = 1) # \u6216\u8005\u4e5f\u53ef\u4ee5\u8f6c\u5316\u6210\u6574\u6570\nflights.head()","a7b099d6":"cols.append('ON_TIME')  # \u4e0d\u80fd\u591a\u6b21\u6267\u884c\nflights[cols].sum()","83b50bcf":"cols","7492c63f":"fig,ax_array = plt.subplots(nrows = 2,ncols = 3,figsize = (18,8))\n(ax1,ax2,ax3),(ax4,ax5,ax6) = ax_array # \u5206\u914d\u5b50\u56fe\n\nfig.suptitle('2015 US Flights -Univariate Summary',size = 20)\nac = flights['AIRLINE'].value_counts()  # \u7edf\u8ba1\u5404\u4e2a\u822a\u7ebf\u6570\u91cf\nac.plot(\n    kind = 'barh'\n    ,ax = ax1\n    ,title = 'Airline'\n)\n\nflights['ORG_AIR'].value_counts().plot(  # \u51fa\u53d1\u57ce\u5e02\n    kind = 'bar'\n    ,ax = ax2\n    ,rot = 0\n    ,title = 'Origin City'\n)\n\nflights['DEST_AIR'].value_counts().head(10).plot( # \u76ee\u7684\u5730\u57ce\u5e02\n    kind = 'bar'\n    ,ax = ax3\n    ,rot = 0\n    ,title = 'Destination City'\n)\n\nflights[cols].sum().plot( # \u822a\u73ed\u72b6\u6001\uff1a \u6539\u9053\uff0c\u53d6\u6d88\uff0c\u5ef6\u8fdf\uff0c\u51c6\u65f6\n    kind = 'bar'\n    ,ax = ax4\n    ,rot = 0\n    ,log = True  # \u5c06\u8f74\u7684\u53d6\u503c\u53d6\u5bf9\u6570\uff0c\u7f29\u5c0f\u503c\u7684\u8303\u56f4\uff0c\u65b9\u4fbf\u89c2\u5bdf\n    ,title = 'Flight Status'\n)\n\nflights['DIST'].plot(  # \u8ddd\u79bb\u5bc6\u5ea6\u56fe\n    kind = 'kde'\n    ,ax = ax5\n    ,xlim =(0,3000)\n    ,title = 'Distance KED'\n)\n\nflights['ARR_DELAY'].plot(  # \u822a\u73ed\u63a8\u8fdf\u65f6\u95f4\u7684\u76f4\u65b9\u56fe\n    kind = 'hist'\n    ,ax = ax6\n    ,title = 'Arrival Delay'\n    ,range = (0,200)\n)\n\nfig.show()","1c47c98a":"flights.head()","81be801a":"# \npandas_profiling.ProfileReport(flights)","1022eb6c":"pd.options.display.max_columns = 20\npd.options.display.max_colwidth = 20\nflights.head()","0057941f":"# \u7ed8\u5236\u6bcf\u5468\u822a\u73ed\u6570\u56fe\uff0c\u9700\u8981\u65e5\u671f\u7d22\u5f15\uff0c\u4f46\u662fDataFrame\u4e2d\u5e76\u6ca1\u6709\u65e5\u671f\u7d22\u5f15\n\n# SCHED_DEP  -->  \u8ba1\u5212\u8d77\u98de\u65f6\u95f4  -> \u4ece\u8fd9\u4e2a\u5b57\u6bb5\u91cc\u53ef\u4ee5\u62c6\u89e3\u51fa\u5c0f\u65f6\u4e0e\u5206\u949f\nprint(flights.SCHED_DEP.head()\/\/100)  #-> \u89e3\u6790\u51fa\u5c0f\u65f6\nprint(flights.SCHED_DEP.head()%100) #-> \u89e3\u6790\u51fa\u5206\u949f","2e11209f":"#\u6709\u4e86\u5e74\u6708\u65e5\uff0c\u5c0f\u65f6\u548c\u5206\u949f\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528pandas \u7684to_datetime \u89e3\u6790\u51fa\u65f6\u95f4\u6233\n\ndf_date = (\n    flights[['MONTH','DAY']].assign( # \u4f7f\u7528assign \u51fd\u6570\u5411DataFrame\u589e\u52a0\u5217\uff0c\u4e0d\u4f1a\u6539\u53d8\u539fDataFrame\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684DataFrame\n        YEAR = 2015,\n        HOUR = flights['SCHED_DEP'] \/\/100,\n        MINUTE = flights['SCHED_DEP'] % 100\n    )\n)\ndf_date.head()","253318b6":"flight_dep = pd.to_datetime(df_date)  # \u5f97\u5230\u822a\u73ed\u7684\u8d77\u98de\u65f6\u95f4\nflight_dep.head().to_frame()","ac52479c":"# \u5c06\u822a\u73ed\u8d77\u98de\u65f6\u95f4\u4f5c\u4e3a\u7d22\u5f15\nflights.set_index(keys=flight_dep,inplace=True)\nflights.head()","aaf7f26b":"#  \u7edf\u8ba1\u6bcf\u5468\u822a\u73ed\u6570\u91cf\nflights_perweek = flights.resample('W').count()\nflights_perweek","0a784430":"flights_perweek = flights.resample('W').size()\nflights_perweek","f48c7b2a":"sns.set_style('darkgrid')\nflights_perweek.plot(\n    figsize = (10,5),\n    kind = 'line',\n    title = 'Flights per Week'\n)\nplt.show()\n# \u4ece\u56fe\u4e2d\u53ef\u4ee5\u5206\u6790\u51fa\uff0c\u4f3c\u4e4e10\u6708\u4efd\u7f3a\u5c11\u4e86\u6570\u636e\uff0c\u5e76\u4e14\u7b2c\u4e00\u5468\u4e0e\u6700\u540e\u4e00\u5468\u7684\u822a\u73ed\u6570\u91cf\u8f83\u5c11\uff08\u53ef\u80fd\u8fd9\u4e24\u5468\u7684\u6570\u636e\u4e0d\u5168\uff09","801a2cbc":"# \u6848\u4f8b\u8bb2\u89e3\ndata = pd.DataFrame([[1,2,3,np.nan,6,6,np.nan],\n                    [12,22,32,42,np.nan,62,np.nan],\n                    [313,32,33,np.nan,np.nan,36,33]])\ndata","68e65876":"data.interpolate(limit_direction='both')","eba0a273":"flights_perweek.where(flights_perweek>600).isnull().sum() # where \u51fd\u6570\u4e2d\u53ea\u6709\u4e00\u4e2a\u6761\u4ef6\uff0c\u5982\u679c\u6761\u4ef6\u4e0d\u6ee1\u8db3\u9ed8\u8ba4\u586b\u5145NaN","7a66bedc":"data = flights_perweek.where(flights_perweek > 600).interpolate(limit_direction='both') # \u5c065\u4e2a\u5c0f\u4e8e600\u7684NaN\u8fdb\u884c\u5dee\u503c\u586b\u5145","a5a65188":"data[1:-1].plot(kind = 'line') # \u53bb\u6389\u9996\u5c3e\u4e24\u5468","130490d6":"flights.head()","b26f0452":"# DEST_AIR  -> \u5165\u5883\u822a\u73ed\nflights.groupby('DEST_AIR')","9cbaf691":"+ ## Grouping Data(\u805a\u5408\u6570\u636e)","0c25c99d":"+ ## \u7edf\u8ba1\u6570\u503c","989b1673":"## \u5b9e\u6218 -- Visualizing the flights dataset","1a394a05":"> # 14.2  Line Charts","af9e2c32":"+ ## Counting Values in a Series","b3bea81f":"## Coding Challenge:\n+ Our goal is\nto find out which day of the week saw the most battles during the Revolutionary War. The final\noutput should be a Series with the days of the week (i.e. Sunday, Monday) as index labels and a\ncount of battles on each day as the values. ","f8f2d503":"# \u5341\u4e00\u3001Working with Dates and Times\n+ python\u7684 DateTime\n+ pandas \u7684 DateTime","af3c0209":"# \u56db\u3001The DataFrame Object","36e33523":"## **8.5 Exploding a List of Values**\n+ Another common storage issue is multiple values being stored within a single cell.\n+ \u4e00\u4e2a\u683c\u5b50\u4e2d\u50a8\u5b58\u591a\u4e2a\u503c\u7684\u95ee\u9898","d36bab76":"1. In the cars dataset, aggregate the sum of prices across all cars, organized by the fuel\ntype on the index axis.\n2. In the cars dataset, aggregate the count of cars, organized by the manufacturer on the\nindex axis and the transmission type on the column axis. Show the subtotals for both the\nrows and columns.\n3. In the cars dataset, aggregate the mean of prices across the cars, organized by both the\nyear and the fuel type on the index axis and the transmission type on the column axis.\n4. Given a DataFrame with the data from the previous bullet, move the transmission type\nlevel from the column axis to the row axis.\n5. In the min_wage dataset, convert the data from a \"wide\" format to a \"narrow\" format. In\nother words, how can you move all of the data from the 8 year columns into a single\ncolumn","5af47429":"># pandas_profiling \u5e93\n+ \u53ef\u4ee5\u663e\u793aDataFrame\u7684\u6240\u6709\u8be6\u7ec6\u6982\u8ff0\u62a5\u544a","288185db":">## 14.4  Pie Charts\n+ \u997c\u72b6\u56fe","281a8313":"> # 10.4 Outer Joins\n+ \u4fdd\u7559\u6240\u6709\u8bb0\u5f55\uff0c\u53d6\u5408\u96c6\n+ \u4e0d\u662f\u540c\u65f6\u51fa\u73b0\u5728\u4e24\u4e2a\u8868\u4e2d\u7684\u8bb0\u5f55\u9ed8\u8ba4\u586b\u5145NaN","b9bee532":"# \u516d\u3001Working with Text Data\n+ A Series object includes a str attribute whose value is a StringMethods object that holds a\ntoolbox of powerful methods.","60c006f7":"# \u5341\u4e8c\u300112 Imports and Exports\n+ \u8bfb\u53d6csv\n+ \u8bfb\u53d6Excel","ce02f08f":"# \u4e94\u3001Filtering a DataFrame","70704145":"# \u5341\u4e09\u300113 Configuring Pandas","227168c6":"# **\u4e03\u3001MultiIndex DataFrames**","76643997":"+ ## \u9009\u62e9\u5217","a7f897bb":"> ## 14.3  Bar Graphs  \u67f1\u72b6\u56fe","19bb8f4f":"# \u4e09\u3001Series Methods","cce51097":"## 8.6 Coding Challenge","ecbcb83e":"# \u4e8c\u3001The Series Object","c5114c57":"## \u4e00\u3001Introducing Pandas","5f8a35f8":"# Visualization with Matplotlib,Pandas and Seaborn\n+ \u6765\u81ea Pandas 1.x Cookbook(\u7b2c\u4e8c\u7248)\n+ \u5927\u90e8\u5206\u53ef\u89c6\u5316\u7684\u65f6\u5019\u4f7f\u7528pandas\u548cseaborn\n+ \u975e\u5fc5\u987b\u4e0d\u7528matplotlib\n\n> github \u5730\u5740\uff1ahttps:\/\/github.com\/PacktPublishing\/Pandas-Cookbook-Second-Edition","47ff6fd8":"> # 10.5 Left and Right Joins\n+ \u5f53\u8bb0\u5f55\u4e0d\u662f\u540c\u65f6\u51fa\u73b0\u5728\u4e24\u4e2a\u8868\u4e2d\u65f6\uff0c\u4fdd\u7559\u5168\u90e8\u7684\u5de6\u4fa7\u8868\u683c\u6216\u53f3\u4fa7\u8868\u683c\u8bb0\u5f55","4744b50b":"### apply\u65b9\u6cd5\uff0c\u5c06\u4e00\u4e2a\u51fd\u6570\u4f5c\u7528\u5230Series\u4e2d\u7684\u6bcf\u4e2a\u503c\u4e0a","74fe9951":"## matplotlib \u90e8\u5206","85f0d771":"+ ## \u5bf9Series\u8fdb\u884c\u6392\u5e8f\n+ Series\u7684\u7d22\u5f15\u548c\u503c\u90fd\u53ef\u4ee5\u8fdb\u884c\u6392\u5e8f","ec580de0":"+ ## \u6839\u636e\u5217\u8fdb\u884c\u8fc7\u6ee4","e1b3db61":"## pandas \u586b\u8865\u7f3a\u5931\u503c\u7684\u65b9\u6cd5  interpolate\n+ \u63d2\u503c\u51fd\u6570","c638d9cd":">### 8.4 Melting a Dataset <br>In this section, we'll learn how to unpivot a pivot table or, <br>in other words, how to break up an aggregated collection of data into an unaggregated one.\n\n+ \u5c06\u6570\u636e\u4ece\u900f\u89c6\u8868\u4e2d\u62c6\u89e3\u51fa\u6765","8977a097":"> ### \u5f00\u59cb\u7ed8\u56fe","7182a14d":"### Stacking and Unstacking Index Levels\n+ **Stacking** describes the process of moving an index level from the columns to the rows. \n+ Stacking \u5c06\u5217\u7d22\u5f15\u79fb\u5230\u884c","8d7e4f61":"> # 10.3 Inner Joins\n+ The merge method merges one DataFrame into another. \n+ \u53d6\u4ea4\u96c6\n+ \u4e09\u79cdJoin\u65b9\u5f0f\u548cSQL\u6570\u636e\u5e93\u4e2d\u7684\u64cd\u4f5c\u539f\u7406\u662f\u4e00\u6837\u7684","a60ab32b":"# \u516b\u3001Reshaping and Pivoting\n+ \u5f62\u53d8\u548c\u900f\u89c6\u8868","42ae9bc4":"> # The timedelta Object\n+ \u65f6\u95f4\u95f4\u9694\u5bf9\u8c61","5f118052":"> # dt \u6a21\u5757\u4e2d\u5305\u542b\u56db\u4e2a\u7c7b\uff1adate, time, datetime \u548c timedelta.","42c6717c":"# \u5341\u3001Merging, Joining and Concatenating","8f94658c":"> # pandas\u5982\u4f55\u5904\u7406\u65e5\u671f\u65f6\u95f4","caba558e":"> # \u65f6\u95f4\u65e5\u671f\u7684\u52a0\u51cf\u8fd0\u7b97\n+ 11.5 Adding and Subtracting Durations of Time","acaef1a0":"> # 10.2 Concatenating the Datasets","49ded429":"## \u627e\u51fa\u5e73\u5747\u8ddd\u79bb\u6700\u957f\u768410\u4e2a\u5165\u5883\u822a\u73ed","ccf860c8":"+ ## \u5b57\u7b26\u4e32\u7684\u5e2e\u52a9\u51fd\u6570 str\uff08\u6216\u8005\u53eb\u6570\u636e\u8bbf\u95ee\u5668\uff09\n+ \u7c7b\u4f3c\u7684\u8fd8\u6709dt\uff08\u65e5\u671f\u65f6\u95f4\uff09\u548ccat(\u5206\u7c7b)","1c384af0":"# \u4e5d\u3001The GroupBy Object","dbfc7c4b":">## Plotting basics with pandas","f7259208":"+ ## \u9009\u62e9\u884c","bc363b20":"# \u5341\u56db\u300114 Visualization\n+ \u53ef\u89c6\u5316"}}