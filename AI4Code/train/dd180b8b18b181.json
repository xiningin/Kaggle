{"cell_type":{"97ab81ab":"code","7c0b3fe8":"code","bacb7140":"code","41ec774f":"code","af548b63":"code","36038426":"code","c5795dac":"code","1ec05412":"code","3ec2b822":"code","beafa0a7":"code","c4cf44ce":"code","1fe2241b":"code","54efccee":"code","75546536":"code","f45c0e6f":"code","e5536787":"code","ef2aea05":"code","7be85134":"code","dee8456d":"code","96b92b32":"code","9b76d70b":"code","e1b1391b":"code","bd881e7d":"code","b1b10e1e":"code","83a12ecc":"markdown","06e74a6c":"markdown","9e5f6f4b":"markdown","f787bc1c":"markdown","9d48c5d7":"markdown","67440537":"markdown","33c25879":"markdown","9acbd987":"markdown","77f7c145":"markdown","caf97945":"markdown","97540d35":"markdown","93f707de":"markdown","a29ee400":"markdown","9344d06d":"markdown","0110f326":"markdown","cc25da2b":"markdown","92193bd3":"markdown","9b3d0f5a":"markdown","4a37a76e":"markdown","013b2514":"markdown","9d488d47":"markdown","e14ed9e3":"markdown","faf20137":"markdown","f43cceaa":"markdown","e0ce7fa8":"markdown","79bebb1f":"markdown","5f518de9":"markdown","8016d09f":"markdown","5a8fedc1":"markdown","19dd0823":"markdown","ddffb2fb":"markdown","5c18a4bd":"markdown","ef46b510":"markdown","b7fbf81e":"markdown","af4fa2a7":"markdown","d7e35431":"markdown"},"source":{"97ab81ab":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nimport warnings\nwarnings.filterwarnings(\"ignore\")","7c0b3fe8":"df = pd.read_csv('..\/input\/supermarket-sales\/supermarket_sales - Sheet1.csv')","bacb7140":"df.head()","41ec774f":"df.info()","af548b63":"df['Date'] = pd.to_datetime(df['Date'], format='%m\/%d\/%Y')\ndf['Day'] = df['Date'].dt.day_name()\ndf['Hour'] = df['Time'].apply(lambda x: x.split(':')[0])","36038426":"def barPerc_with_hue(ax, feature, Number_of_categories, hue_categories, pos=2, size=12):\n    a = [p.get_height() for p in ax.patches]\n    patch = [p for p in ax.patches]\n    for i in range(Number_of_categories):\n        total = feature.value_counts().values[i]\n        for j in range(hue_categories):\n            percentage = '{:.1f}%'.format(100 * a[(j*Number_of_categories + i)]\/total)\n            x = patch[(j*Number_of_categories + i)].get_x() + patch[(j*Number_of_categories + i)].get_width() \/ pos - 0.15\n            y = patch[(j*Number_of_categories + i)].get_y() + patch[(j*Number_of_categories + i)].get_height() \n            ax.annotate(percentage, (x, y), size = size)\n\ndef barPerc_without_hue(ax, feature):\n    total = len(feature)\n    for p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/ 2 - 0.05\n        y = p.get_y() + p.get_height()\n        ax.annotate(percentage, (x, y), size = 12)\n\ndef barValue_vertical(ax):\n    for rect in ax.patches:\n        # Get X and Y placement of label from rect.\n        x_value = rect.get_width()\n        y_value = rect.get_y() + rect.get_height() \/ 2\n\n        # Number of points between bar and label. Change to your liking.\n        space = 5\n        # Vertical alignment for positive values\n        ha = 'left'\n\n        # If value of bar is negative: Place label left of bar\n        if x_value < 0:\n            # Invert space to place label to the left\n            space *= -1\n            # Horizontally align label at right\n            ha = 'right'\n\n        # Use X value as label and format number with one decimal place\n#         if x_value == max(df_group4['mean']):\n        label = \"{:.2f}\".format(x_value)\n#         else:\n#             label = ''\n\n        # Create annotation\n        plt.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(space, 0),          # Horizontally shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            va='center',                # Vertically center label\n            ha=ha)                      # Horizontally align label differently for\n                                        # positive and negative values.\n\ndef barValue_horizontal(ax):\n    for rect in ax.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n\n        # Number of points between bar and label. Change to your liking.\n        space = 2\n        # Vertical alignment for positive values\n        va = 'bottom'\n\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.2f}\".format(y_value)\n\n        # Create annotation\n        ax.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(1, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.","c5795dac":"sns.countplot(data=df, x='Branch', hue='City')\nplt.show()\nprint('From plot we know that Branch A is in Yangon, B in Mandalay and C in Naypyitaw')","1ec05412":"ax = sns.countplot(data=df, x='Branch', hue='Customer type', order=['A','B','C'])\nbarPerc_with_hue(ax, df['Branch'], 3, 2)\nplt.legend(loc=5)\nplt.title('Costumer Type Comparison Each Branch')\nplt.show()","3ec2b822":"ax = sns.countplot(data=df, x='Branch', hue='Gender', order=['A','B','C'])\nbarPerc_with_hue(ax, df['Branch'], 3, 2)\nplt.legend(loc=5)\nplt.title('Gender Comparison Each Branch')\nplt.show()","beafa0a7":"df_group = df.groupby(['Branch','Customer type','Gender'])['City'].count().reset_index(name='count')\nplt.figure(figsize=(15,15))\nfor i,column in enumerate(['All','A','B','C']):\n    plt.subplot(4, 2, i+1)\n    plt.suptitle(\"Customer Type VS Gender\", fontsize=20, x=0.5, y=1)\n    if i == 0:\n        sns.barplot(data=df_group, x='Customer type', y='count', hue='Gender')\n        plt.title(f\"All Branch\")\n    else:\n        sns.barplot(data=df_group[df_group['Branch']==column], x='Customer type', y='count', hue='Gender')\n        plt.title(f\"Branch {column}\")\n    plt.legend(loc=5)\n    plt.tight_layout()","c4cf44ce":"ax = sns.countplot(data=df, x='Product line')\nbarPerc_without_hue(ax, df['Product line'])\nplt.xticks(rotation=90)\nplt.title('Product Line Sale Count')\nplt.show()\n\nplt.figure(figsize=(10,5))\nax = sns.countplot(data=df, x='Branch', hue='Product line', order=['A','B','C'])\nbarPerc_with_hue(ax, df['Branch'], 3, 6, 1, 10)\nplt.legend(loc=8)\nplt.title('Product Line Sale Each Branch')\nplt.show()","1fe2241b":"df_group2 = df.groupby(['Branch','Gender','Product line'])['City'].count().reset_index(name='count')\nplt.figure(figsize=(15,15))\nfor i,column in enumerate(['All','A','B','C']):\n    plt.subplot(4, 2, i+1)\n    plt.suptitle(\"Product Line VS Gender\", fontsize=20, x=0.5, y=1)\n    if i == 0:\n        sns.barplot(data=df_group2, x='Gender', y='count', hue='Product line')\n        plt.title(f\"All Branch\")\n    else:\n        sns.barplot(data=df_group2[df_group2['Branch']==column], x='Gender', y='count', hue='Product line')\n        plt.title(f\"Branch {column}\")\n    plt.legend(loc=8)\n    plt.tight_layout()","54efccee":"plt.figure(figsize=(15,5))\nsns.histplot(df[df['Branch']=='A']['Unit price'], bins=50, color='red')\nsns.histplot(df[df['Branch']=='B']['Unit price'], bins=50, color='blue')\nsns.histplot(df[df['Branch']=='C']['Unit price'], bins=50, color='yellow')\nplt.legend(('A','B','C'))\nplt.title('Unit Price Distribution Each Branch')\nplt.show()\n\ndf_group4 = df.groupby(['Branch','Product line'])['Unit price'].mean().reset_index(name='mean')\nplt.figure(figsize=(15,15))\nfor i,column in enumerate(['All','A','B','C']):\n    plt.subplot(4, 2, i+1)\n    plt.suptitle(\"Average Price For Each Product Line\", fontsize=20, x=0.5, y=1)\n    if i == 0:\n        ax = sns.barplot(data=df_group4, y='Product line', x='mean', ci=False)\n        plt.title(f\"All Branch\")\n        barValue_vertical(ax)\n    else:\n        ax = sns.barplot(data=df_group4[df_group4['Branch']==column], x='mean', y='Product line')\n        plt.title(f\"Branch {column}\")\n        barValue_vertical(ax)\n        if i % 2 == 1:\n            plt.yticks([])\n            plt.ylabel('')\n    \n    plt.legend(loc=8)\n    plt.tight_layout()\nplt.show()\n\ndf.groupby(['Branch']).agg({\"Unit price\": [np.mean, np.sum, np.min, np.max]})","75546536":"# Average quantity for each product line\ndf_group3 = df.groupby(['Branch','Product line'])['Quantity'].mean().reset_index(name='mean')\nplt.figure(figsize=(15,15))\nfor i,column in enumerate(['All','A','B','C']):\n    plt.subplot(4, 2, i+1)\n    plt.suptitle(\"Average Number of Purchase For Each Product Line\", fontsize=20, x=0.5, y=1)\n    if i == 0:\n        ax = sns.barplot(data=df_group3, y='Product line', x='mean', ci=False)\n        plt.title(f\"All Branch\")\n        barValue_vertical(ax)\n    else:\n        ax = sns.barplot(data=df_group3[df_group3['Branch']==column], x='mean', y='Product line')\n        plt.title(f\"Branch {column}\")\n        barValue_vertical(ax)\n        if i % 2 == 1:\n            plt.yticks([])\n            plt.ylabel('')\n    \n    plt.legend(loc=8)\n    plt.tight_layout()","f45c0e6f":"g = sns.FacetGrid(df, col='Product line', row='Branch', row_order=['A','B','C'])\ng.map_dataframe(sns.scatterplot, x='Quantity', y='Unit price')","e5536787":"df_group5 = df.groupby(['Branch','Date'])['Total'].sum().reset_index(name='total')\nfig = px.line(df_group5, x=\"Date\", y=\"total\", color='Branch', title='Total Income From January To March')\nfig.show()","ef2aea05":"\ndf_group6 = df.groupby(['Branch','Date'])['Invoice ID'].count().reset_index(name='total')\nfor i in ['A','B','C']:\n    df_cp = df_group6[df_group6['Branch']==i].copy()\n    df_cp.set_index('Date', inplace=True)\n    analysis = df_cp[['total']].copy()\n    decompose_result_mult = seasonal_decompose(analysis, model=\"additive\", period=7)\n\n    decompose_result_mult.plot()\n    plt.suptitle(f'Branch {i}', x=0.05, y= 1)","7be85134":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,5))\nplt.suptitle('Number Of Buyer Each Day', size=15)\nax = sns.countplot(data=df, x='Day', order=['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'], ax=ax1)\nax1.set_title('All Branch')\nbarPerc_without_hue(ax, df['Day'])\n\nday_order = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']\nbranch_order = ['A','B','C']\nax = sns.countplot(data=df, x='Branch', hue='Day', hue_order=day_order, order=branch_order, ax=ax2)\nax2.set_title('Branch A,B,C')\nbarPerc_with_hue(ax, df['Branch'], 3, 7,1,10)\nplt.legend(loc=4)\nplt.show()","dee8456d":"# Average quantity for each product line\nhour_order = [str(i) for i in range(10,21)]\nplt.figure(figsize=(15,15))\nfor i,column in enumerate(['All','A','B','C']):\n    plt.subplot(4, 2, i+1)\n    plt.suptitle(\"Average Number of Purchase For Each Product Line\", fontsize=20, x=0.5, y=1)\n    if i == 0:\n        ax = sns.countplot(data=df, x='Hour', order=hour_order)\n        plt.title(f\"All Branch\")\n        barPerc_without_hue(ax, df['Hour'])\n    else:\n        ax = sns.countplot(data=df[df['Branch']==column], x='Hour',order=hour_order)\n        plt.title(f\"Branch {column}\")\n        barPerc_without_hue(ax, df[df['Branch']==column]['Hour'])\n    plt.tight_layout()","96b92b32":"# Average quantity for each product line\norder = ['Cash','Credit card', 'Ewallet']\nplt.figure(figsize=(15,15))\nfor i,column in enumerate(['All','A','B','C']):\n    plt.subplot(4, 2, i+1)\n    plt.suptitle(\"Count of Payment Method Each Branch\", fontsize=20, x=0.5, y=1)\n    if i == 0:\n        ax = sns.countplot(data=df, x='Payment', order=order)\n        plt.title(f\"All Branch\")\n        barPerc_without_hue(ax, df['Hour'])\n    else:\n        ax = sns.countplot(data=df[df['Branch']==column], x='Payment',order=order)\n        plt.title(f\"Branch {column}\")\n        barPerc_without_hue(ax, df[df['Branch']==column]['Payment'])\n    plt.tight_layout()","9b76d70b":"df.groupby(['Payment']).agg({\"Total\": [np.mean, np.sum, np.min, np.max], \"Quantity\": [np.mean, np.sum], \"Unit price\": [np.mean, np.sum, np.min, np.max]})","e1b1391b":"df_group7 = df.groupby('Branch')['Rating'].mean().reset_index(name='rating_mean')\nax = sns.barplot(data=df_group7, x='Branch', y='rating_mean')\nbarValue_horizontal(ax)","bd881e7d":"df_group8 = df.groupby(['Branch','Product line'])['Rating'].mean().reset_index(name='rating_mean')\nplt.figure(figsize=(15,15))\nfor i,column in enumerate(['All','A','B','C']):\n    plt.subplot(4, 2, i+1)\n    plt.suptitle(\"Average Rating For Each Product Line\", fontsize=20, x=0.5, y=1)\n    if i == 0:\n        ax = sns.barplot(data=df_group8, y='Product line', x='rating_mean', ci=False)\n        plt.title(f\"All Branch\")\n        barValue_vertical(ax)\n    else:\n        ax = sns.barplot(data=df_group8[df_group8['Branch']==column], x='rating_mean', y='Product line')\n        plt.title(f\"Branch {column}\")\n        barValue_vertical(ax)\n        if i % 2 == 1:\n            plt.yticks([])\n            plt.ylabel('')\n    \n    plt.legend(loc=8)\n    plt.tight_layout()","b1b10e1e":"df_group8 = df.groupby(['Branch'])['gross income'].sum().reset_index(name='earn')\nax = sns.barplot(data=df_group8, x='Branch', y='earn')\nbarValue_horizontal(ax)\nplt.title('Gross Income of Each Branch')","83a12ecc":"From the table :\n- People use cash if they want to buy expensive stuff\n- People use credit if they want to buy many stuff","06e74a6c":"## Count of Payment Method Each Branch","9e5f6f4b":"- There are 4 busy time : 10, 13, 15 and 19\n- At 10 i think its because people go to work or school, or maybe because time for short break\n- At 13 and 15 because lunch time\n- At 19 because many people come home after work\/school or maybe because its dinner time","f787bc1c":"## Gross Income Of Each Branch","9d48c5d7":"# Import Library","67440537":"Branch A and Branch B has more member customer than normal customer, but not in branch C","33c25879":"## Average Number of Purchase For Each Product Line","9acbd987":"- In general Saturday is most busy day\n- Sunday at Branch B is the day with the fewest visitors","77f7c145":"\n<div align=\"center\">\n<img src=\"https:\/\/img.shields.io\/badge\/Upvote-If%20you%20like%20my%20work-07b3c8?style=for-the-badge&logo=kaggle\" alt=\"upvote\">\n<\/div>","caf97945":"## Number Of Buyer Each Day","97540d35":"## Costumer Type Comparison Of Each Branch","93f707de":"## Customer Type VS Gender Of Each Branch","a29ee400":"# Little Feature Engineering","9344d06d":"# Load Data","0110f326":"## Count Of Product Line Sale","cc25da2b":"# THANK YOU","92193bd3":"## Trend, Seasonal, and Resid For Each Branch","9b3d0f5a":"## Payment Info","4a37a76e":"## Average Number of Purchase For Each Product Line","013b2514":"- Branch A : For Member and Normal Customer type dominated by male\n- Branch B : For member cutomer type Female more than Male, but for normal customer type Male more than Female\n- Branch C : For Member and Normal Customer type dominated by female","9d488d47":"## Average Rating For Each Product Line","e14ed9e3":"## Find Correlation Between Quantity And Unit Price","faf20137":"# Visualization","f43cceaa":"- Branch C is branch with highest rating and follow by A and then B","e0ce7fa8":"## Product Line VS Gender Of Each Branch","79bebb1f":"## Average Rating For Each Branch","5f518de9":"- In general female shop alot for 'Fashion accessories' and 'Food baverages', but in Branch A, female shop alot for 'Home and lifestyle' and 'Sports and travel'\n- For Male there are some differences for each branch","8016d09f":"- Branch A: Product 'Home and Lifestyle' become the best seling product\n- Branch B: There are 2 best selling products,'Sport and Travel' and 'Fashion accessories'\n- Branch C: Product 'Food and beverages' become the best selling product but only 0.3 percent more than 'Fashion accessories'","5a8fedc1":"- At Branch A and B many people use Ewallet, but at Branch C Cash is more than other payment method","19dd0823":"## Total Income Per Day From January To March","ddffb2fb":"## Unit Price Distribution & Average Price For Each Product Line","5c18a4bd":"## Gender Comparison Of Each Branch","ef46b510":"- from histogram we know that each branch have different price\n- Branch C is branch that sells goods at the most expensive prices","b7fbf81e":"- There is no correlation between Quantity and Unit price","af4fa2a7":"Branch A and Branch B has more Male customer than Female, but not in branch C","d7e35431":"## Every City Of Each Branch"}}