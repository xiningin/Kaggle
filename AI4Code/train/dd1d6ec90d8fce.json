{"cell_type":{"77149673":"code","c8a46bd2":"code","506bba1a":"code","973d9de8":"code","d3bef2f8":"code","540e9aeb":"code","672535f4":"code","1c9084af":"code","c4d1b8ef":"code","f1d78156":"code","59478153":"code","d7e74f98":"code","d19e1fd8":"code","f6484fce":"code","0d8e6ebb":"code","d6271648":"code","1b72dafe":"code","55b8f655":"code","be2b2f7b":"code","33b11a8c":"markdown","20fbf73f":"markdown","973613f7":"markdown","123de2c0":"markdown","d3cc48ce":"markdown","561bc299":"markdown","9f2478e5":"markdown","e3b0fbd8":"markdown","464d7507":"markdown","a904e719":"markdown","b00bcad8":"markdown","5a4a5946":"markdown","3c0d7da8":"markdown","827d2c23":"markdown","5b1f5728":"markdown","ccdd0a66":"markdown","138439b2":"markdown","63f54114":"markdown","b0c5818c":"markdown"},"source":{"77149673":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nnp.random.seed(42)\nrandom_state= 42\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c8a46bd2":"import pandas as pd\ndf_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')\nprint(df_train.shape)\nprint(df_test.shape)","506bba1a":"df_train.head()","973d9de8":"df_train.tail()","d3bef2f8":"df_train = df_train.set_index(\"Id\")\ndf_test = df_test.set_index(\"Id\")\n\ny_train = df_train[\"SalePrice\"]\ndf_train = df_train.drop(\"SalePrice\",axis=1)\ndf = pd.concat([df_train, df_test], sort = True)\ndf.describe()","540e9aeb":"missing = df.shape[0]-df.count()\nprint(missing[missing>0])","672535f4":"df[\"MasVnrType\"].fillna(\"None\",inplace=True)\n\ncat_columns = [\"MSSubClass\", \"MSZoning\", \"Alley\", \"LotShape\", \"LandContour\", \"LotConfig\", \"LandSlope\",\\\n               \"Neighborhood\", \"Condition1\", \"Condition2\", \"BldgType\", \"HouseStyle\", \"RoofStyle\", \"RoofMatl\", \"Exterior1st\",\\\n               \"Exterior2nd\", \"MasVnrType\", \"Foundation\", \"Heating\", \"Electrical\", \"GarageType\", \"MiscFeature\",\\\n               \"SaleType\", \"SaleCondition\"]\n\ndf = pd.get_dummies(df, prefix_sep=\"_\",columns=cat_columns)","1c9084af":"for s,i in zip([\"Grvl\",\"Pave\"],[0,1]):\n    df[\"Street\"] = df[\"Street\"].replace(s, i)\n    \nfor s,i in zip([\"AllPub\",\"NoSewr\",\"NoSeWa\",\"ELO\"],[4,3,2,1]):\n    df[\"Utilities\"] = df[\"Utilities\"].replace(s, i)   \n    \nfor s,i in zip([\"Ex\",\"Gd\",\"TA\",\"Fa\",\"Po\"],[5,4,3,2,1]):\n    df[\"ExterQual\"] = df[\"ExterQual\"].replace(s, i) \n    df[\"ExterCond\"] = df[\"ExterCond\"].replace(s, i) \n    df[\"BsmtQual\"] = df[\"BsmtQual\"].replace(s, i) \n    df[\"BsmtCond\"] = df[\"BsmtCond\"].replace(s, i) \n    df[\"HeatingQC\"] = df[\"HeatingQC\"].replace(s, i) \n    df[\"KitchenQual\"] = df[\"KitchenQual\"].replace(s, i) \n    df[\"FireplaceQu\"] = df[\"FireplaceQu\"].replace(s, i) \n    df[\"GarageQual\"] = df[\"GarageQual\"].replace(s, i) \n    df[\"GarageCond\"] = df[\"GarageCond\"].replace(s, i)\n    df[\"PoolQC\"] = df[\"PoolQC\"].replace(s, i) \n    \ndf[\"BsmtQual\"].fillna(0, inplace=True)\ndf[\"BsmtCond\"].fillna(0, inplace=True)\ndf[\"FireplaceQu\"].fillna(0, inplace=True)\ndf[\"GarageQual\"].fillna(0, inplace=True)\ndf[\"GarageCond\"].fillna(0, inplace=True)\ndf[\"PoolQC\"].fillna(0, inplace=True)\n\n\nfor s,i in zip([\"Gd\",\"Av\",\"Mn\",\"No\"],[4,3,2,1]):\n    df[\"BsmtExposure\"] = df[\"BsmtExposure\"].replace(s, i) \ndf[\"BsmtExposure\"].fillna(0, inplace=True)\n\nfor s,i in zip([\"GLQ\",\"ALQ\",\"BLQ\",\"Rec\",\"LwQ\",\"Unf\"],[6,5,4,3,2,1]):\n    df[\"BsmtFinType1\"] = df[\"BsmtFinType1\"].replace(s, i) \n    df[\"BsmtFinType2\"] = df[\"BsmtFinType2\"].replace(s, i) \ndf[\"BsmtFinType1\"].fillna(0, inplace=True)\ndf[\"BsmtFinType2\"].fillna(0, inplace=True)\n\nfor s,i in zip([\"N\",\"Y\"],[0,1]):\n    df[\"CentralAir\"] = df[\"CentralAir\"].replace(s, i) \n    \nfor s,i in zip([\"Typ\",\"Min1\",\"Min2\",\"Mod\",\"Maj1\",\"Maj2\",\"Sev\",\"Sal\"],[8,7,6,5,4,3,2,1]):\n    df[\"Functional\"] = df[\"Functional\"].replace(s, i) \n\nfor s,i in zip([\"Fin\",\"RFn\",\"Unf\"],[3,2,1]):\n    df[\"GarageFinish\"] = df[\"GarageFinish\"].replace(s, i) \ndf[\"GarageFinish\"].fillna(0, inplace=True)\n\nfor s,i in zip([\"Y\",\"P\",\"N\"],[3,2,1]):\n    df[\"PavedDrive\"] = df[\"PavedDrive\"].replace(s, i) \n\nfor s,i in zip([\"GdPrv\",\"MnPrv\",\"GdWo\",\"MnWw\"],[4,3,2,1]):    \n    df[\"Fence\"] = df[\"Fence\"].replace(s, i) \ndf[\"Fence\"].fillna(0, inplace=True)\n","c4d1b8ef":"df[\"MasVnrArea\"].fillna(0, inplace=True)\ndf = df.fillna(df.mean())","f1d78156":"df['Total_SF']= df[\"2ndFlrSF\"] +df[\"1stFlrSF\"] +df[\"TotalBsmtSF\"]\n\ndf['Total_No_Bathrooms'] = (df[\"FullBath\"] + (0.5 * df[\"HalfBath\"]) +\n                               df[\"BsmtFullBath\"] + (0.5 * df[\"BsmtHalfBath\"]))\n\ndf['Total_Porch_SF'] = (df[\"OpenPorchSF\"] + df[\"3SsnPorch\"] +\n                              df[\"EnclosedPorch\"] + df[\"ScreenPorch\"] +\n                              df[\"WoodDeckSF\"])\n\n\n","59478153":"X_train = df.loc[:1460,:]\nX_test = df.loc[1461:,:]\n","d7e74f98":"sns.distplot(y_train)","d19e1fd8":"from sklearn import metrics\nimport matplotlib.pyplot as plt \ndef evaluation(y,pred):\n    print('MAE:', metrics.mean_absolute_error(y, pred))\n    print('MSE:', metrics.mean_squared_error(y, pred))\n    print('RMSE:', np.sqrt(metrics.mean_squared_error(y, pred)))\n    print('RMSLE:', np.sqrt(metrics.mean_squared_log_error(y, pred)))\n\n    plt.figure(figsize=(8,8))\n    plt.scatter(y,pred)\n    plt.xlabel('Y Test')\n    plt.ylabel('Predicted Y')\n    plt.show()","f6484fce":"from sklearn.linear_model import Ridge, Lasso\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.preprocessing import PowerTransformer, RobustScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVR\nfrom math import sqrt\n\npipe = Pipeline([('scl', RobustScaler()), ('clf', Lasso(random_state = random_state, max_iter=1e7))])\nparam_range = np.arange(0.0002,0.0008,0.0001)\nparam_grid = [{'clf__alpha':param_range}]\n\n#Cross Validation\ngs = GridSearchCV(estimator = pipe, param_grid = param_grid, scoring = 'neg_mean_squared_error', cv = 5, n_jobs=-1)\ngs = gs.fit(X_train, np.log1p(y_train))\nprint(np.sqrt(-gs.best_score_))\nprint(gs.best_params_)\n\ny_pred = gs.predict(X_train)\n\nevaluation(y=y_train,pred=np.expm1(y_pred))\n\n#Nested Cross Validation\n# gs = GridSearchCV(estimator = pipe, param_grid = param_grid, scoring = 'neg_mean_squared_error', cv = 10, n_jobs=-1)\n# scores = cross_val_score(gs, X_train, np.log1p(y_train), scoring='neg_mean_squared_error', cv = 10)\n# print('N-CV: ' + str(np.sqrt(-np.mean(scores))) + ' ,std:'+   str(np.sqrt(np.std(scores))))","0d8e6ebb":"residual = np.log1p(y_train) - y_pred\nz_score = (residual - residual.mean()) \/ residual.std()\nz_score = z_score.abs()\noutliers = z_score > 3\noutliers[outliers]","d6271648":"plt.figure(figsize=(6, 6))\nplt.scatter(np.log1p(y_train), y_pred)\nplt.scatter(np.log1p(y_train)[outliers], y_pred[np.array(outliers)])\nplt.plot(range(10, 15), range(10, 15), color=\"red\")","1b72dafe":"X_train = X_train.drop(outliers[outliers].index)\ny_train = y_train.drop(outliers[outliers].index)","55b8f655":"pipe = Pipeline([('scl', RobustScaler()), ('clf', Lasso(random_state = random_state, max_iter=1e7))])\nparam_range = np.arange(0.0002,0.0008,0.0001)\nparam_grid = [{'clf__alpha':param_range}]\n\n\n#Cross Validation\ngs = GridSearchCV(estimator = pipe, param_grid = param_grid, scoring = 'neg_mean_squared_error', cv = 5, n_jobs=-1)\ngs = gs.fit(X_train, np.log1p(y_train))\nprint(\"Cross Validation Score:\")\nprint('RMSLE:', np.sqrt(-gs.best_score_))\nprint(\"Best Alpha\")\nprint(gs.best_params_)\n\ny_pred = gs.predict(X_train)\n\nprint(\"Scores on Training set:\")\nevaluation(y=y_train,pred=np.expm1(y_pred))\n","be2b2f7b":"model = gs.best_estimator_\nmodel.fit(X_train, np.log1p(y_train))\n\nsubmission_predictions = np.expm1(model.predict(X_test))\ndf_submission = pd.DataFrame(columns=[\"Id\",\"SalePrice\"])\ndf_submission[\"Id\"] = df_test.index\ndf_submission[\"SalePrice\"] = submission_predictions\ndf_submission.to_csv(\"submission.csv\", index=False)","33b11a8c":"\"LotFrontage\",\"MasVnrArea\",\"BsmtExposure\" and \"GarageYrBlt\" still have missing values. We will replace these with sensible values:","20fbf73f":"Split the dataset in the training and the test part again:\n","973613f7":"**Predictions**","123de2c0":"We have 19 columns with missing data. Some of them like the \"MiscFeature\" column, is NaN nearly for all samples. So, if we have to concentrate on some columns later on, we will probably not use this one.","d3cc48ce":"Is the target variable \"SalePrice\" normally distributed?:","561bc299":"Now lets delete some outliers, which seem to be not in line with the other samples:","9f2478e5":"**Model**\n","e3b0fbd8":"We will use a Lasso regression, which performs both variable selection and regularization in order to enhance the prediction accuracy and interpretability. With an robust scaler in front of it (https:\/\/scikit-learn.org\/stable\/auto_examples\/preprocessing\/plot_all_scaling.html)","464d7507":"Categorical Features with a clear ranking or boolean in nature:","a904e719":"**A Fist Look on the data**\n\nFirst, get the data and let's have a first look on the characteristics of the data.","b00bcad8":"**Outlier**","5a4a5946":"The index is just auto incrementing and has therefore no information. So we will set this column as index.","3c0d7da8":"The target variable is not normally distributed. So before performing a linear regression, I will correct for that during the fitting phase, with a simple log transformation.","827d2c23":"**Feature Engineering**","5b1f5728":"The feature \"MasVnrType\" has some missing values, we will replace these with \"None\", which is a official value of this feature. Afterwards we will one hot encode the categorical data.","ccdd0a66":"Train the model again, without the ouliers:","138439b2":"The trainig set has 1460 rows and 81 columns. Or in other words, we have 1460 samples and 79 features (1 is the id and the other is the dependent variable (SalePrice). Because of the limited training we can try some feature selection later on, due to problems arising whith many dimensions in sparse data sets (Curse of Dimensionality, https:\/\/en.wikipedia.org\/wiki\/Curse_of_dimensionality#Machine_learning).","63f54114":"As described in the data_description.txt, some data is categorical in nature, so it should be one-hot encoded later, if the size of the number doesn't have a quantitative meaning.The last column is the \"SalePrice\" we want to explain.\nLet's check, if there are any columns, with missing values (NaN).\n","b0c5818c":"\n**Data Preprocessing**\n\nWe have some clearly categorical data:\nMSSubClass, MSZoning,Alley,LotShape, LandContour, Utilities, LotConfig, LandSlope, Neighborhood, Condition1, Condition2, BldgType, HouseStyle, RoofStyle, RoofMatl, Exterior1st, Exterior2nd, MasVnrType, Foundation, Heating, Electrical, GarageType, Fence, MiscFeature, SaleType, SaleCondition\n\nAnd some mixed bags, with a clear ranking of the categories or boolean meaning:\nStreet, Utilities, ExterQual, ExterCond , BsmtQual , BsmtCond , BsmtExposure , BsmtFinType1, BsmtFinType2, HeatingQC, KitchenQual, FireplaceQu, GarageFinish, GarageQual, GarageCond, PoolQC, Functional, CentralAir, PavedDrive\n\nAnd some continous data:\nLotFrontage, LotArea, YearBuilt, YearRemodAdd, MasVnrArea, BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, 1stFlrSF, 2ndFlrSF,LowQualFinSF, GrLivArea,BsmtFullBath,BsmtHalfBath,FullBath,HalfBath,Bedroom,Kitchen, TotRmsAbvGrd, Fireplaces, GarageYrBlt, GarageCars, GarageArea, WoodDeckSF, OpenPortchSF, EnclosedPorch, 3SsnPorch, ScreenPorch, PoolArea, MiscVal, MoSold, YrSold\n\nWe also have some obvious connections in the data, which we could use to create new features:\n\nTotal Square Feet= \"2ndFlrSF\" + \"1stFlrSF\" + \"TotalBsmtSF\"\n\nNumber of Bathrooms = \"FllBath\" + \"BsmtFullBath\" + 0.5 * \"HalfBath\" + 0.5 * \"BsmtHalfBath\"\n\nTotal Porch Square Feet = \"OpenPorchSF\" + \"3SsnPorch\" + \"EnclosedPorch\" + \"ScreenPorch\" + \"WoodDeckSF\""}}