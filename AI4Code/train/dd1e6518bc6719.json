{"cell_type":{"69239a06":"code","22d3c11c":"code","a2414497":"code","e5390d01":"code","f0648eb3":"code","fd5ed4de":"code","da427493":"code","24487f08":"code","792e54cb":"markdown","ab798c7a":"markdown","59b50d8a":"markdown","25c11355":"markdown","9c72a5e3":"markdown","ea786b99":"markdown","c483728d":"markdown"},"source":{"69239a06":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","22d3c11c":"import librosa\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import to_categorical\nimport numpy as np\nfrom tqdm import tqdm\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import StratifiedKFold","a2414497":"DATA_PATH = '..\/input\/infantcry\/train\/'\nDATA_TEST_PATH = '..\/input\/infantcry\/test'\n\n\n\n\n\n\n\n\nlabels, _, _ = get_labels(DATA_PATH)\n\nfor label in labels:\n    mfcc_vectors = []\n\n    wavfiles = [path + label + '\/' + wavfile for wavfile in os.listdir(path + '\/' + label)]\n    print(wavfiles)\n    for wavfile in tqdm(wavfiles, \"Saving vectors of label - '{}'\".format(label)):\n        mfcc = np.zeros((20, 400))\n        mfcc_feat = wav2mfcc(wavfile)[:, :400]\n        mfcc[:, :mfcc_feat.shape[1]] = mfcc_feat\n        mfcc_vectors.append(mfcc)\n\n    mfcc_vectors = np.stack(mfcc_vectors)\n\n\n    np.save(label + '.npy', mfcc_vectors)\n\n        \n\ndef save_data_to_array_test(path=DATA_TEST_PATH):\n    mfcc_vectors = []\n        \n    wavfiles = [DATA_TEST_PATH + '\/' + wavfile for wavfile in os.listdir(DATA_TEST_PATH)]\n    for wavfile in tqdm(wavfiles, \"Saving vectors of label - '{}'\".format('test')):\n        mfcc = np.zeros((20, 400))\n        mfcc_feat = wav2mfcc(wavfile)[:, :400]\n        mfcc[:, :mfcc_feat.shape[1]] = mfcc_feat\n        mfcc_vectors.append(mfcc)\n            \n    mfcc_vectors = np.stack(mfcc_vectors)\n    np.save('test.npy', mfcc_vectors)\n        \n\n","e5390d01":"def get_model():\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(2, 2), activation='relu', input_shape=(20, 400, channel)))\n    model.add(Conv2D(48, kernel_size=(2, 2), activation='relu'))\n    model.add(Conv2D(128, kernel_size=(2, 2), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Flatten())\n    model.add(Dropout(0.25))\n    model.add(Dense(128, activation='relu'))\n    model.add(Dropout(0.25))\n    model.add(Dense(64, activation='relu'))\n    model.add(Dense(num_classes, activation='softmax'))\n    model.compile(loss=keras.losses.categorical_crossentropy,\n                  optimizer=keras.optimizers.Adadelta(),\n                  metrics=['accuracy'])\n    return model\n\n","f0648eb3":"feature_dim_2 = 32\n\nsave_data_to_array() \nsave_data_to_array_test()\n\nX, Y = get_train_test()\nskf = StratifiedKFold(n_splits=5)","fd5ed4de":"ls","da427493":"for idx, (tr_idx, val_idx) in enumerate(skf.split(X, Y)):\n    print(idx)\n\n    feature_dim_1 = 20\n    channel = 1\n    epochs = 50\n    batch_size = 32\n    verbose = 1\n    num_classes = 6\n\n    X_train, X_test = X[tr_idx], X[val_idx]\n    y_train, y_test = Y[tr_idx], Y[val_idx]\n    \n    X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], X_train.shape[2], channel) \/ 255.0\n    X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], X_test.shape[2], channel) \/ 255.0\n\n    y_train_hot = to_categorical(y_train)\n    y_test_hot = to_categorical(y_test)\n    \n    model = get_model()\n\n    my_callbacks = [\n        keras.callbacks.EarlyStopping(patience=5),\n        keras.callbacks.ModelCheckpoint(filepath='model-{0}.h5'.format(idx), save_best_only=True),\n    ]\n\n    model.fit(X_train, y_train_hot, \n              batch_size=batch_size, \n              epochs=epochs, \n              verbose=verbose, \n              validation_data=(X_test, y_test_hot),\n              callbacks=my_callbacks\n             )\n    model.load_weights('model-{0}.h5'.format(idx))\n    \n","24487f08":"test_pred = np.zeros((228, 6))\nfor path in ['model-0.h5', 'model-2.h5', 'model-3.h5'][:1]:\n    model.load_weights(path)\n    \n    X_test = np.load('test.npy') \/ 255.0\n    test_pred += model.predict(X_test.reshape(228, 20, 400, 1))\n\n\n\nwavfiles = [wavfile for wavfile in os.listdir(DATA_TEST_PATH)]   \n\nimport pandas as pd\ndf = pd.DataFrame()\n\ndf['id'] = [wavfile for wavfile in os.listdir(DATA_TEST_PATH)]\ndf['label'] = [['awake','diaper','hug', 'hungry','sleepy', 'uncomfortable'][x] for x in test_pred.argmax(1)]\ndf.to_csv('baseline.csv', index=None)","792e54cb":"# test code ","ab798c7a":"#  input draft","59b50d8a":"# import pythonlib","25c11355":"![](http:\/\/)","9c72a5e3":"# draft feature function","ea786b99":"# model designe","c483728d":"# train "}}