{"cell_type":{"53a8fb20":"code","065c3e78":"code","c2d75144":"code","f9ef2f48":"code","e7a6a365":"code","f98dc567":"code","9901594a":"code","7b27da11":"code","1ab5bfff":"code","c057165a":"code","4e8034ad":"code","4b8e11fd":"code","6a67b74d":"code","419b6ea7":"code","9b2e6536":"code","c1e13a41":"code","784c9689":"code","bf1444ea":"code","c66acf07":"code","0548a87b":"code","39de80b1":"code","402dcb2a":"code","a40d0ec6":"code","4daa6d48":"code","e6547d3e":"code","3b87e12e":"code","b2250140":"code","955371c8":"code","5d31d9c9":"code","398e00d1":"code","ed31f5a8":"code","a549dfe5":"code","00f95b4b":"code","513169c1":"code","e6653549":"code","1e9f2a7b":"code","4397a22c":"code","5fb4458d":"code","a6227211":"code","2f497ca5":"code","9e2809a1":"code","e18bdd70":"code","6e61b9a9":"code","172fcec9":"code","aa4f7326":"code","326ab1eb":"code","d45df723":"code","38c08bc8":"code","77f37578":"code","e9323206":"code","d953dff5":"code","e22fbf51":"code","d85329e1":"markdown","a9bfbea5":"markdown","06ca63cf":"markdown","5f52d946":"markdown","d48c63ed":"markdown","bfa967ae":"markdown","c5da67f8":"markdown","59b7adf3":"markdown","2450cba2":"markdown","9ee85025":"markdown","53feeace":"markdown","fc0ca6dc":"markdown","c4289e53":"markdown","91f7bc49":"markdown","100cb74e":"markdown","bc7acf9d":"markdown","a5050632":"markdown","0b7f7e2c":"markdown","614579e8":"markdown","d4d40598":"markdown"},"source":{"53a8fb20":"import gc\nimport re\nimport operator \n\nimport numpy as np\nimport pandas as pd\n\nfrom gensim.models import KeyedVectors\n\nfrom sklearn import model_selection\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Embedding, Input, Dense, CuDNNGRU,concatenate, Bidirectional, SpatialDropout1D, Conv1D, GlobalAveragePooling1D, GlobalMaxPooling1D\nfrom keras.layers import LeakyReLU, CuDNNLSTM\nfrom keras.optimizers import RMSprop, Adam\nfrom keras.models import Model, Sequential\nfrom keras.callbacks import EarlyStopping\n\nimport seaborn as sns","065c3e78":"train = pd.read_csv(\"..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/train.csv\")\ntest = pd.read_csv(\"..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/test.csv\")\n\nprint(\"Train shape : \",train.shape)\nprint(\"Test shape : \",test.shape)\n\n\ntrain.head()\n","c2d75144":"test.head()","f9ef2f48":"# Only 13GB of ram available, we gotta be careful !\n\ndf = pd.concat([train[['id','comment_text']], test], axis=0)\ndel(train, test)\ngc.collect()","e7a6a365":"ft_common_crawl = '..\/input\/fasttext-crawl-300d-2m\/crawl-300d-2M.vec'\nembeddings_index = KeyedVectors.load_word2vec_format(ft_common_crawl)","f98dc567":"gc.collect()","9901594a":"def build_vocab(texts):\n    sentences = texts.apply(lambda x: x.split()).values\n    vocab = {}\n    for sentence in sentences:\n        for word in sentence:\n            try:\n                vocab[word] += 1\n            except KeyError:\n                vocab[word] = 1\n    return vocab","7b27da11":"def check_coverage(vocab, embeddings_index):\n    known_words = {}\n    unknown_words = {}\n    nb_known_words = 0\n    nb_unknown_words = 0\n    for word in vocab.keys():\n        try:\n            known_words[word] = embeddings_index[word]\n            nb_known_words += vocab[word]\n        except:\n            unknown_words[word] = vocab[word]\n            nb_unknown_words += vocab[word]\n            pass\n\n    print('Found embeddings for {:.3%} of vocab'.format(len(known_words) \/ len(vocab)))\n    print('Found embeddings for  {:.3%} of all text'.format(nb_known_words \/ (nb_known_words + nb_unknown_words)))\n    unknown_words = sorted(unknown_words.items(), key=operator.itemgetter(1))[::-1]\n\n    return unknown_words","1ab5bfff":"df['comment_text'] = df['comment_text'].apply(lambda x: x.lower())\ngc.collect()","c057165a":"vocab = build_vocab(df['comment_text'])\noov = check_coverage(vocab, embeddings_index)\noov[:10]","4e8034ad":"gc.collect()","4b8e11fd":"contraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\" }","6a67b74d":"del(vocab,oov)\ngc.collect()","419b6ea7":"def known_contractions(embed):\n    known = []\n    for contract in contraction_mapping:\n        if contract in embed:\n            known.append(contract)\n    return known","9b2e6536":"print(\"- Known Contractions -\")\nprint(\"   FastText :\")\nprint(known_contractions(embeddings_index))","c1e13a41":"def clean_contractions(text, mapping):\n    specials = [\"\u2019\", \"\u2018\", \"\u00b4\", \"`\"]\n    for s in specials:\n        text = text.replace(s, \"'\")\n    text = ' '.join([mapping[t] if t in mapping else t for t in text.split(\" \")])\n    return text","784c9689":"df['comment_text'] = df['comment_text'].apply(lambda x: clean_contractions(x, contraction_mapping))","bf1444ea":"vocab = build_vocab(df['comment_text'])\noov = check_coverage(vocab, embeddings_index)\noov[:10]","c66acf07":"del(vocab,oov)\ngc.collect()","0548a87b":"punct = \"\/-'?!.,#$%\\'()*+-\/:;<=>@[\\\\]^_`{|}~\" + '\"\"\u201c\u201d\u2019' + '\u221e\u03b8\u00f7\u03b1\u2022\u00e0\u2212\u03b2\u2205\u00b3\u03c0\u2018\u20b9\u00b4\u00b0\u00a3\u20ac\\\u00d7\u2122\u221a\u00b2\u2014\u2013&'","39de80b1":"def unknown_punct(embed, punct):\n    unknown = ''\n    for p in punct:\n        if p not in embed:\n            unknown += p\n            unknown += ' '\n    return unknown","402dcb2a":"print(unknown_punct(embeddings_index, punct))","a40d0ec6":"punct_mapping = {\"_\":\" \", \"`\":\" \"}","4daa6d48":"def clean_special_chars(text, punct, mapping):\n    for p in mapping:\n        text = text.replace(p, mapping[p])    \n    for p in punct:\n        text = text.replace(p, f' {p} ')     \n    return text","e6547d3e":"df['comment_text'] = df['comment_text'].apply(lambda x: clean_special_chars(x, punct, punct_mapping))","3b87e12e":"vocab = build_vocab(df['comment_text'])\noov = check_coverage(vocab, embeddings_index)\n","b2250140":"oov[:100]","955371c8":"del(vocab,oov)\ngc.collect()","5d31d9c9":"swear_words = [\n    ' 4r5e ',\n    ' 5h1t ',\n    ' 5hit ',\n    ' a55 ',\n    ' anal ',\n    ' anus ',\n    ' ar5e ',\n    ' arrse ',\n    ' arse ',\n    ' ass ',\n    ' ass-fucker ',\n    ' asses ',\n    ' assfucker ',\n    ' assfukka ',\n    ' asshole ',\n    ' assholes ',\n    ' asswhole ',\n    ' a_s_s ',\n    ' b!tch ',\n    ' b00bs ',\n    ' b17ch ',\n    ' b1tch ',\n    ' ballbag ',\n    ' balls ',\n    ' ballsack ',\n    ' bastard ',\n    ' beastial ',\n    ' beastiality ',\n    ' bellend ',\n    ' bestial ',\n    ' bestiality ',\n    ' biatch ',\n    ' bitch ',\n    ' bitcher ',\n    ' bitchers ',\n    ' bitches ',\n    ' bitchin ',\n    ' bitching ',\n    ' bloody ',\n    ' blow job ',\n    ' blowjob ',\n    ' blowjobs ',\n    ' boiolas ',\n    ' bollock ',\n    ' bollok ',\n    ' boner ',\n    ' boob ',\n    ' boobs ',\n    ' booobs ',\n    ' boooobs ',\n    ' booooobs ',\n    ' booooooobs ',\n    ' breasts ',\n    ' buceta ',\n    ' bugger ',\n    ' bum ',\n    ' bunny fucker ',\n    ' butt ',\n    ' butthole ',\n    ' buttmuch ',\n    ' buttplug ',\n    ' c0ck ',\n    ' c0cksucker ',\n    ' carpet muncher ',\n    ' cawk ',\n    ' chink ',\n    ' cipa ',\n    ' cl1t ',\n    ' clit ',\n    ' clitoris ',\n    ' clits ',\n    ' cnut ',\n    ' cock ',\n    ' cock-sucker ',\n    ' cockface ',\n    ' cockhead ',\n    ' cockmunch ',\n    ' cockmuncher ',\n    ' cocks ',\n    ' cocksuck ',\n    ' cocksucked ',\n    ' cocksucker ',\n    ' cocksucking ',\n    ' cocksucks ',\n    ' cocksuka ',\n    ' cocksukka ',\n    ' cok ',\n    ' cokmuncher ',\n    ' coksucka ',\n    ' coon ',\n    ' cox ',\n    ' crap ',\n    ' cum ',\n    ' cummer ',\n    ' cumming ',\n    ' cums ',\n    ' cumshot ',\n    ' cunilingus ',\n    ' cunillingus ',\n    ' cunnilingus ',\n    ' cunt ',\n    ' cuntlick ',\n    ' cuntlicker ',\n    ' cuntlicking ',\n    ' cunts ',\n    ' cyalis ',\n    ' cyberfuc ',\n    ' cyberfuck ',\n    ' cyberfucked ',\n    ' cyberfucker ',\n    ' cyberfuckers ',\n    ' cyberfucking ',\n    ' d1ck ',\n    ' damn ',\n    ' dick ',\n    ' dickhead ',\n    ' dildo ',\n    ' dildos ',\n    ' dink ',\n    ' dinks ',\n    ' dirsa ',\n    ' dlck ',\n    ' dog-fucker ',\n    ' doggin ',\n    ' dogging ',\n    ' donkeyribber ',\n    ' doosh ',\n    ' duche ',\n    ' dyke ',\n    ' ejaculate ',\n    ' ejaculated ',\n    ' ejaculates ',\n    ' ejaculating ',\n    ' ejaculatings ',\n    ' ejaculation ',\n    ' ejakulate ',\n    ' f u c k ',\n    ' f u c k e r ',\n    ' f4nny ',\n    ' fag ',\n    ' fagging ',\n    ' faggitt ',\n    ' faggot ',\n    ' faggs ',\n    ' fagot ',\n    ' fagots ',\n    ' fags ',\n    ' fanny ',\n    ' fannyflaps ',\n    ' fannyfucker ',\n    ' fanyy ',\n    ' fatass ',\n    ' fcuk ',\n    ' fcuker ',\n    ' fcuking ',\n    ' feck ',\n    ' fecker ',\n    ' felching ',\n    ' fellate ',\n    ' fellatio ',\n    ' fingerfuck ',\n    ' fingerfucked ',\n    ' fingerfucker ',\n    ' fingerfuckers ',\n    ' fingerfucking ',\n    ' fingerfucks ',\n    ' fistfuck ',\n    ' fistfucked ',\n    ' fistfucker ',\n    ' fistfuckers ',\n    ' fistfucking ',\n    ' fistfuckings ',\n    ' fistfucks ',\n    ' flange ',\n    ' fook ',\n    ' fooker ',\n    ' fuck ',\n    ' fucka ',\n    ' fucked ',\n    ' fucker ',\n    ' fuckers ',\n    ' fuckhead ',\n    ' fuckheads ',\n    ' fuckin ',\n    ' fucking ',\n    ' fuckings ',\n    ' fuckingshitmotherfucker ',\n    ' fuckme ',\n    ' fucks ',\n    ' fuckwhit ',\n    ' fuckwit ',\n    ' fudge packer ',\n    ' fudgepacker ',\n    ' fuk ',\n    ' fuker ',\n    ' fukker ',\n    ' fukkin ',\n    ' fuks ',\n    ' fukwhit ',\n    ' fukwit ',\n    ' fux ',\n    ' fux0r ',\n    ' f_u_c_k ',\n    ' gangbang ',\n    ' gangbanged ',\n    ' gangbangs ',\n    ' gaylord ',\n    ' gaysex ',\n    ' goatse ',\n    ' God ',\n    ' god-dam ',\n    ' god-damned ',\n    ' goddamn ',\n    ' goddamned ',\n    ' hardcoresex ',\n    ' hell ',\n    ' heshe ',\n    ' hoar ',\n    ' hoare ',\n    ' hoer ',\n    ' homo ',\n    ' hore ',\n    ' horniest ',\n    ' horny ',\n    ' hotsex ',\n    ' jack-off ',\n    ' jackoff ',\n    ' jap ',\n    ' jerk-off ',\n    ' jism ',\n    ' jiz ',\n    ' jizm ',\n    ' jizz ',\n    ' kawk ',\n    ' knob ',\n    ' knobead ',\n    ' knobed ',\n    ' knobend ',\n    ' knobhead ',\n    ' knobjocky ',\n    ' knobjokey ',\n    ' kock ',\n    ' kondum ',\n    ' kondums ',\n    ' kum ',\n    ' kummer ',\n    ' kumming ',\n    ' kums ',\n    ' kunilingus ',\n    ' l3itch ',\n    ' labia ',\n    ' lmfao ',\n    ' lust ',\n    ' lusting ',\n    ' m0f0 ',\n    ' m0fo ',\n    ' m45terbate ',\n    ' ma5terb8 ',\n    ' ma5terbate ',\n    ' masochist ',\n    ' master-bate ',\n    ' masterb8 ',\n    ' masterbat3 ',\n    ' masterbate ',\n    ' masterbation ',\n    ' masterbations ',\n    ' masturbate ',\n    ' mo-fo ',\n    ' mof0 ',\n    ' mofo ',\n    ' mothafuck ',\n    ' mothafucka ',\n    ' mothafuckas ',\n    ' mothafuckaz ',\n    ' mothafucked ',\n    ' mothafucker ',\n    ' mothafuckers ',\n    ' mothafuckin ',\n    ' mothafucking ',\n    ' mothafuckings ',\n    ' mothafucks ',\n    ' mother fucker ',\n    ' motherfuck ',\n    ' motherfucked ',\n    ' motherfucker ',\n    ' motherfuckers ',\n    ' motherfuckin ',\n    ' motherfucking ',\n    ' motherfuckings ',\n    ' motherfuckka ',\n    ' motherfucks ',\n    ' muff ',\n    ' mutha ',\n    ' muthafecker ',\n    ' muthafuckker ',\n    ' muther ',\n    ' mutherfucker ',\n    ' n1gga ',\n    ' n1gger ',\n    ' nazi ',\n    ' nigg3r ',\n    ' nigg4h ',\n    ' nigga ',\n    ' niggah ',\n    ' niggas ',\n    ' niggaz ',\n    ' nigger ',\n    ' niggers ',\n    ' nob ',\n    ' nob jokey ',\n    ' nobhead ',\n    ' nobjocky ',\n    ' nobjokey ',\n    ' numbnuts ',\n    ' nutsack ',\n    ' orgasim ',\n    ' orgasims ',\n    ' orgasm ',\n    ' orgasms ',\n    ' p0rn ',\n    ' pawn ',\n    ' pecker ',\n    ' penis ',\n    ' penisfucker ',\n    ' phonesex ',\n    ' phuck ',\n    ' phuk ',\n    ' phuked ',\n    ' phuking ',\n    ' phukked ',\n    ' phukking ',\n    ' phuks ',\n    ' phuq ',\n    ' pigfucker ',\n    ' pimpis ',\n    ' piss ',\n    ' pissed ',\n    ' pisser ',\n    ' pissers ',\n    ' pisses ',\n    ' pissflaps ',\n    ' pissin ',\n    ' pissing ',\n    ' pissoff ',\n    ' poop ',\n    ' porn ',\n    ' porno ',\n    ' pornography ',\n    ' pornos ',\n    ' prick ',\n    ' pricks ',\n    ' pron ',\n    ' pube ',\n    ' pusse ',\n    ' pussi ',\n    ' pussies ',\n    ' pussy ',\n    ' pussys ',\n    ' rectum ',\n    ' retard ',\n    ' rimjaw ',\n    ' rimming ',\n    ' s hit ',\n    ' s.o.b. ',\n    ' sadist ',\n    ' schlong ',\n    ' screwing ',\n    ' scroat ',\n    ' scrote ',\n    ' scrotum ',\n    ' semen ',\n    ' sex ',\n    ' sh!t ',\n    ' sh1t ',\n    ' shag ',\n    ' shagger ',\n    ' shaggin ',\n    ' shagging ',\n    ' shemale ',\n    ' shit ',\n    ' shitdick ',\n    ' shite ',\n    ' shited ',\n    ' shitey ',\n    ' shitfuck ',\n    ' shitfull ',\n    ' shithead ',\n    ' shiting ',\n    ' shitings ',\n    ' shits ',\n    ' shitted ',\n    ' shitter ',\n    ' shitters ',\n    ' shitting ',\n    ' shittings ',\n    ' shitty ',\n    ' skank ',\n    ' slut ',\n    ' sluts ',\n    ' smegma ',\n    ' smut ',\n    ' snatch ',\n    ' son-of-a-bitch ',\n    ' spac ',\n    ' spunk ',\n    ' s_h_i_t ',\n    ' t1tt1e5 ',\n    ' t1tties ',\n    ' teets ',\n    ' teez ',\n    ' testical ',\n    ' testicle ',\n    ' tit ',\n    ' titfuck ',\n    ' tits ',\n    ' titt ',\n    ' tittie5 ',\n    ' tittiefucker ',\n    ' titties ',\n    ' tittyfuck ',\n    ' tittywank ',\n    ' titwank ',\n    ' tosser ',\n    ' turd ',\n    ' tw4t ',\n    ' twat ',\n    ' twathead ',\n    ' twatty ',\n    ' twunt ',\n    ' twunter ',\n    ' v14gra ',\n    ' v1gra ',\n    ' vagina ',\n    ' viagra ',\n    ' vulva ',\n    ' w00se ',\n    ' wang ',\n    ' wank ',\n    ' wanker ',\n    ' wanky ',\n    ' whoar ',\n    ' whore ',\n    ' willies ',\n    ' willy ',\n    ' xrated ',\n    ' xxx '    \n]","398e00d1":"replace_with_fuck = []\n\nfor swear in swear_words:\n    if swear[1:(len(swear)-1)] not in embeddings_index:\n        replace_with_fuck.append(swear)\n        \nreplace_with_fuck = '|'.join(replace_with_fuck)\nreplace_with_fuck\n        ","ed31f5a8":"def handle_swears(text):\n    text = re.sub(replace_with_fuck, ' fuck ', text)\n    return text","a549dfe5":"df['comment_text'] = df['comment_text'].apply(lambda x: handle_swears(x))\ngc.collect()","00f95b4b":"train = df.iloc[:1804874,:]\ntest = df.iloc[1804874:,:]\n\ntrain.head()","513169c1":"del(df)\ngc.collect()","e6653549":"train.head()","1e9f2a7b":"train_orig = pd.read_csv(\"..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/train.csv\")\ntrain_orig.head()","4397a22c":"train = pd.concat([train,train_orig[['target']]],axis=1)\ntrain.head()","5fb4458d":"del(train_orig)\ngc.collect()","a6227211":"train['target'] = np.where(train['target'] >= 0.5, True, False)","2f497ca5":"train_df, validate_df = model_selection.train_test_split(train, test_size=0.1)\nprint('%d train comments, %d validate comments' % (len(train_df), len(validate_df)))","9e2809a1":"MAX_NUM_WORDS = 100000\nTOXICITY_COLUMN = 'target'\nTEXT_COLUMN = 'comment_text'\n\n# Create a text tokenizer.\ntokenizer = Tokenizer(num_words=MAX_NUM_WORDS)\ntokenizer.fit_on_texts(train_df[TEXT_COLUMN])\n\n# All comments must be truncated or padded to be the same length.\nMAX_SEQUENCE_LENGTH = 256\ndef pad_text(texts, tokenizer):\n    return pad_sequences(tokenizer.texts_to_sequences(texts), maxlen=MAX_SEQUENCE_LENGTH)","e18bdd70":"gc.collect()","6e61b9a9":"EMBEDDINGS_DIMENSION = 300\nembedding_matrix = np.zeros((len(tokenizer.word_index) + 1,EMBEDDINGS_DIMENSION))","172fcec9":"num_words_in_embedding = 0\n\nfor word, i in tokenizer.word_index.items():\n    if word in embeddings_index.vocab:\n        embedding_vector = embeddings_index[word]\n        embedding_matrix[i] = embedding_vector        \n        num_words_in_embedding += 1","aa4f7326":"train_text = pad_text(train_df[TEXT_COLUMN], tokenizer)\ntrain_labels = train_df[TOXICITY_COLUMN]\nvalidate_text = pad_text(validate_df[TEXT_COLUMN], tokenizer)\nvalidate_labels = validate_df[TOXICITY_COLUMN]","326ab1eb":"gc.collect()","d45df723":"NODES = 64\nvocab_size = len(tokenizer.word_index) + 1\n\n\nmodel = Sequential()\n\nmodel.add(Embedding(vocab_size,EMBEDDINGS_DIMENSION,input_length = MAX_SEQUENCE_LENGTH,weights = [embedding_matrix],trainable = False))\n\nmodel.add(Bidirectional(CuDNNLSTM(100,return_sequences=True)))\nmodel.add(Conv1D(64,7,padding='same'))\nmodel.add(GlobalAveragePooling1D())\n\nmodel.add(Dense(128))\nmodel.add(LeakyReLU())\n\nmodel.add(Dense(NODES,activation = 'relu'))\n\nmodel.add(Dense(1,activation = 'sigmoid'))\n\nmodel.summary()\n","38c08bc8":"model.compile(optimizer = 'adam',loss='binary_crossentropy',metrics = ['accuracy'])","77f37578":"BATCH_SIZE = 1024\nNUM_EPOCHS = 100","e9323206":"model.fit(\n    train_text,\n    train_labels,\n    batch_size=BATCH_SIZE,\n    epochs=NUM_EPOCHS,\n    validation_data=(validate_text, validate_labels),\n    callbacks = [EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=3)])\n","d953dff5":"submission = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/sample_submission.csv', index_col='id')\nsubmission['prediction'] = model.predict(pad_text(test[TEXT_COLUMN], tokenizer))\nsubmission.reset_index(drop=False, inplace=True)\nsubmission.head()","e22fbf51":"\nsubmission.to_csv('submission.csv', index=False)","d85329e1":"# Import Data\n","a9bfbea5":"# Predict & Submit","06ca63cf":"# Embeddings\n\nTo start we'll just take the FastText Common Crawl embeddings. Later, we'll hopefully combine multiple embeddings.","5f52d946":"Create our embedding matrix","d48c63ed":"# Model Architecture\n\nAdding dropout \/ 1d conv \/ concatenated poolings based on the architecture presented @ https:\/\/www.kaggle.com\/tunguz\/bi-gru-cnn-poolings-gpu-kernel-version\n\nNow based on: https:\/\/www.kaggle.com\/samarthsarin\/toxication-with-embeddings-and-keras-lstm","bfa967ae":"## Swears\n\nLet's replace any swear words we don't have an embedding for with something we do ;)","c5da67f8":"Tokenize the text","59b7adf3":"# Import Libraries","2450cba2":"There is a lot of words here that just aren't going to have any embeddings. We could go further and try to correct mispellings, but that is likely a small improvement we can worry about when we're trying to improve the model further.","9ee85025":"# Preprocessing Text\n\nAs with most NLP tasks, we will start by using some pre-trained embeddings for our words. This provides us with a numerical representation of our input that we can use for modelling. Mapping words to embeddings isn't always straight forward, however: the data may not be very tidy.\n\nThe first step, then, is to ensure we get as many words mapped to a suitable embedding as possible. To do this, we'll make use of two excellent kernels:\n\n- https:\/\/www.kaggle.com\/christofhenkel\/how-to-preprocessing-when-using-embeddings \n- https:\/\/www.kaggle.com\/theoviel\/improve-your-score-with-text-preprocessing-v2 ","53feeace":"Split into train\/validation sets","fc0ca6dc":"We will lower() all words, then look up those that do not appear in lower case in the embeddings but do in upper case, and add them.","c4289e53":"Let's split the data back into train and test","91f7bc49":"Convert target to binary flag","100cb74e":"# Project 3\n\n\n# Conversations Toxicity Detection\n\n## Preproccesing and CuDNNLSTM Model\n\nJigsaw Unintended Bias in Toxicity Classification \n\nDetect toxicity across a diverse range of conversations\n\n\nhttps:\/\/www.kaggle.com\/c\/jigsaw-unintended-bias-in-toxicity-classification\/data#\n","bc7acf9d":"# Further Preparation","a5050632":"# Model Training","0b7f7e2c":"Looks like punctuation is the next issue here, so let's sort it out.","614579e8":"Let's submit this as our first submission. Once we have a reasonable pipeline setup, we can move on to looking at the competition metric in more detail.","d4d40598":"Immediately we see contractions are an issue for FastText (such as \"was not\" -> \"wasn't\"). Let's try and fix this."}}