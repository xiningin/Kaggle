{"cell_type":{"578da9f2":"code","b97bc516":"code","ba0dc9a4":"code","ab403ef4":"code","5e71378b":"code","478d4457":"code","782ce89c":"code","5b206022":"code","3c871178":"code","a5a793cb":"code","22792857":"code","5a771307":"code","8f9774f9":"code","ce6c4bc2":"code","57581e74":"code","b9edc201":"code","a86c4468":"code","5f204e5a":"code","0dcf3733":"markdown"},"source":{"578da9f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('..\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b97bc516":"\n\n# Import required librarues\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.preprocessing import RobustScaler\n\n# Import svm, multilinear regression, decision tree and xgboost\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom mlxtend.classifier import EnsembleVoteClassifier\nfrom mlxtend.plotting import plot_sequential_feature_selection as plot_sfs\n#from mlxtend.feature_selection import SequentialFeatureSelector as SFS\nfrom mlxtend.feature_selection import ExhaustiveFeatureSelector as EFS\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_validate\n\nfrom sklearn.metrics import accuracy_score\n\n","ba0dc9a4":"train = pd.read_csv(\"\/kaggle\/input\/learn-together\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/learn-together\/test.csv\")","ab403ef4":"# get target\ny = train['Cover_Type']\n\n# get features (TODO feature extraction)\nX = train.drop(['Cover_Type'],axis=1)\ntest_X = test\n\n\n\n# split data into training and validation data\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, test_size=0.0001, random_state=42)\n\ntrain_X = train_X.drop(['Id'], axis = 1)\nval_X = val_X.drop(['Id'], axis = 1)\ntest_X = test_X.drop(['Id'], axis = 1)","5e71378b":"train_X.describe()","478d4457":"val_X.describe()","782ce89c":"test_X.describe()","5b206022":"scaler_train = RobustScaler(quantile_range = (25, 75))\ntrain_X = pd.DataFrame(scaler_train.fit_transform(train_X), index = train_X.index, columns = train_X.columns)\ntrain_X.describe()","3c871178":"scaler_val = RobustScaler(quantile_range = (25, 75))\nval_X = pd.DataFrame(scaler_train.fit_transform(val_X), index = val_X.index, columns = val_X.columns)\nval_X.describe()","a5a793cb":"scaler_test = RobustScaler(quantile_range = (25, 75))\ntest_X = pd.DataFrame(scaler_train.fit_transform(test_X), index = test_X.index, columns = test_X.columns)\ntest_X.describe()","22792857":"len(train_X.columns), len(val_X.columns), len(val_X.columns)","5a771307":"len(train_X.index), len(val_X.index), len(test_X.index)","8f9774f9":"### define the classifiers\n\n\nclassifier_rf = RandomForestClassifier(n_estimators = 400, min_samples_split = 2,\n                                           min_samples_leaf = 1, max_features = 'sqrt',\n                                           bootstrap = False, random_state=42)\n","ce6c4bc2":"\n\nefs_eclf = EFS(classifier_rf,\n                    min_features=25,\n                    max_features=35,\n                    scoring = 'accuracy',\n                    print_progress = True,\n                    cv = 5, \n                    n_jobs = -1)\nefs_eclf = efs_eclf.fit(train_X, train_y.values.ravel())\n\n\nprint('best combination (ACC: %.3f): %s\\n' % (efs_eclf.k_score_, efs_eclf.k_feature_idx_))\nprint('all subsets:\\n', efs_eclf.subsets_)\nplot_sfs(efs_eclf.get_metric_dict(), kind='std_err');","57581e74":"train_X_sbs = classifier_rf.transform(train_X)\ntest_X_sbs = classifier_rf.transform(test_X)","b9edc201":"eclf.fit(train_X_sbs.values, train_y.values.ravel())","a86c4468":"test_ids = test[\"Id\"]\ntest_pred = classifier_rf.predict(test_X_sbs.values)\ntest_pred","5f204e5a":"# Save test predictions to file\noutput = pd.DataFrame({'Id': test_ids,\n                       'Cover_Type': test_pred})\noutput.to_csv('submission.csv', index=False)","0dcf3733":"### Feature Selection using Sequential Backward Selection"}}