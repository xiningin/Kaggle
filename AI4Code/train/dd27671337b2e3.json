{"cell_type":{"a59deb4e":"code","2a95fadf":"code","4e73f2b3":"code","991b2211":"code","f495105f":"code","1d44d448":"code","fc632257":"code","b41b5277":"code","77f6dafc":"code","45b0b2a4":"code","3ee3ead3":"code","43937116":"code","1d536d76":"code","86ba72a8":"code","55fff72c":"code","4c61342a":"code","bc31cfeb":"code","744465d9":"code","073ac9d9":"code","7e8efedf":"code","06b02558":"code","a1d17ed5":"code","51bed2d6":"code","f53deb36":"code","cbc53eeb":"code","4d92ab07":"code","46ebba81":"code","16188ed9":"code","530a10cd":"code","a76f0412":"code","833e0f2a":"code","5b6b1efb":"code","8eca70ab":"code","94b04114":"code","88e2950b":"code","88731858":"code","3a052a8c":"code","0077ddd5":"code","a01bd886":"code","05ddf7fd":"code","f069b224":"code","a4d4e87e":"code","8152bc1b":"markdown","776c8458":"markdown","1db4005a":"markdown","fe9e6dc5":"markdown","1f712549":"markdown","630c77fb":"markdown","fd0f2227":"markdown","4f7e71b9":"markdown","e885aa06":"markdown","2608907d":"markdown","7f9e0be2":"markdown"},"source":{"a59deb4e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2a95fadf":"df_train = pd.read_csv('\/kaggle\/input\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/test.csv')","4e73f2b3":"df_train.head()","991b2211":"df_test.head()","f495105f":"dados = pd.concat([df_train, df_test], sort=False).reset_index(drop=True)","1d44d448":"dados.head()","fc632257":"dados.tail()","b41b5277":"dados.info()","77f6dafc":"# Embarked\ndados['Embarked'].value_counts()","45b0b2a4":"dados['Embarked'].fillna('S', inplace=True)","3ee3ead3":"dados[dados['Fare'].isnull()]","43937116":"media = dados[dados['Pclass'] == 3]['Fare'].mean()\ndados['Fare'].fillna(media, inplace=True)","1d536d76":"media","86ba72a8":"for pc in sorted(dados['Pclass'].unique()):\n    for sex in dados['Sex'].unique():\n        loc = (dados['Pclass'] == pc) & (dados['Sex'] == sex)\n        media = dados[loc]['Age'].mean()\n        nulos = dados[loc]['Age'].isnull().sum()\n        conhecidos = len(dados[loc]['Age']) - nulos\n        print('Classe {}, g\u00eanero {} --> {:.1f}'.format(pc, sex, media))\n        print('Idade conhecida: {}, desconhecida: {}'.format(conhecidos, nulos))\n        dados.loc[loc, 'Age'] = dados[loc]['Age'].fillna(media)\n","55fff72c":"dados['Age'].describe()","4c61342a":"dados.info()","bc31cfeb":"dados['Cabin'].value_counts()","744465d9":"dados['Cabin'].fillna('X', inplace=True)\ndados['Cabin'] = dados['Cabin'].apply(lambda s: s[0])","073ac9d9":"dados['Cabin'].value_counts()","7e8efedf":"dados.info()","06b02558":"dados.describe()","a1d17ed5":"dados.drop('Ticket', axis=1, inplace=True)","51bed2d6":"novas_colunas_pclass = pd.get_dummies(dados['Pclass'], prefix='class') \nnovas_colunas_sex = pd.get_dummies(dados['Sex'], prefix='sex') \nnovas_colunas_embarked = pd.get_dummies(dados['Embarked'], prefix='embarked') \nnovas_colunas_embarked = pd.get_dummies(dados['Cabin'], prefix='cabin') \n\ndados = pd.concat([dados, novas_colunas_pclass, novas_colunas_sex, novas_colunas_embarked, novas_colunas_embarked], axis=1)\ndados.drop(['Pclass', 'Sex', 'Embarked', 'Cabin'], axis=1, inplace=True)","f53deb36":"dados.info()","cbc53eeb":"dados['Family'] = dados['SibSp'] + dados['Parch']\ndados.drop(['SibSp', 'Parch'], axis=1, inplace=True)","4d92ab07":"train = dados.loc[:len(df_train)-1]\ntest = dados.loc[len(df_train):]","46ebba81":"train = train.drop(['PassengerId', 'Name'], axis=1)\ntest = test.drop(['Survived', 'PassengerId', 'Name'], axis=1)","16188ed9":"train.head()","530a10cd":"test.head()","a76f0412":"y_train = train['Survived'].values\ntrain.drop('Survived', axis=1, inplace=True)","833e0f2a":"X_train, X_test = train.values, test.values","5b6b1efb":"from sklearn.model_selection import KFold\nnp.random.seed(5)","8eca70ab":"kf = KFold(n_splits=5, shuffle=True, random_state=5)","94b04114":"#Fun\u00e7\u00e3o id\u00eantica \u00e0 usada nos modelos de regress\u00e3o.\ndef avalia_classificador(clf, kf, X, y, f_metrica):\n    metrica_val = []\n    metrica_train = []\n    for train, valid in kf.split(X,y):\n        x_train = X[train]\n        y_train = y[train]\n        x_valid = X[valid]\n        y_valid = y[valid]\n        clf.fit(x_train, y_train)\n        y_pred_val = clf.predict(x_valid)\n        y_pred_train = clf.predict(x_train)\n        metrica_val.append(f_metrica(y_valid, y_pred_val))\n        metrica_train.append(f_metrica(y_train, y_pred_train))\n    return np.array(metrica_val).mean(), np.array(metrica_train).mean()","88e2950b":"def apresenta_metrica(nome_metrica, metrica_val, metrica_train, percentual = False):\n    c = 100.0 if percentual else 1.0\n    print('{} (valida\u00e7\u00e3o): {}{}'.format(nome_metrica, metrica_val * c, '%' if percentual else ''))\n    print('{} (treino): {}{}'.format(nome_metrica, metrica_train * c, '%' if percentual else ''))","88731858":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import tree\nfrom sklearn.metrics import accuracy_score, roc_auc_score","3a052a8c":"lr = LogisticRegression(solver='liblinear')\nmedia_acuracia_val, media_acuracia_train = avalia_classificador(lr, kf, X_train, y_train, accuracy_score) \napresenta_metrica('Acur\u00e1cia', media_acuracia_val, media_acuracia_train, percentual=True)\nmedia_auc_val, media_auc_train = avalia_classificador(lr, kf, X_train, y_train, roc_auc_score) \napresenta_metrica('AUC', media_auc_val, media_auc_train, percentual=True)","0077ddd5":"dt = tree.DecisionTreeClassifier(max_depth=3)\nmedia_acuracia_val, media_acuracia_train = avalia_classificador(dt, kf, X_train, y_train, accuracy_score) \napresenta_metrica('Acur\u00e1cia', media_acuracia_val, media_acuracia_train, percentual=True)\nmedia_auc_val, media_auc_train = avalia_classificador(dt, kf, X_train, y_train, roc_auc_score) \napresenta_metrica('AUC', media_auc_val, media_auc_train, percentual=True)","a01bd886":"preds = dt.fit(X_train, y_train).predict(X_test)","05ddf7fd":"resultado = {'PassengerId': df_test['PassengerId'], 'Survived': preds.astype('int')}\nresultado = pd.DataFrame.from_dict(resultado)","f069b224":"resultado.head()","a4d4e87e":"resultado.to_csv('resultado.csv', index=False, header=True)","8152bc1b":"Vou transformar considerando apenas a primeira letra de cada cabine. As desconhecidas irei chamar de X.","776c8458":"Regress\u00e3o Log\u00edstica","1db4005a":"#### Age","fe9e6dc5":"- Excluir vari\u00e1vel Ticket\n- Mudar Pclass, Sex e Embarked para vari\u00e1veis dummy","1f712549":"#### Vou aplicar a \u00e1rvore de regress\u00e3o nos dados de teste e salvar para enviar ao Kaggle","630c77fb":"### Pegando colinhas do Lab 5...","fd0f2227":"#### Juntando os dataframes para an\u00e1lise conjunta e imputa\u00e7\u00e3o de dados","4f7e71b9":"#### Come\u00e7ando a fazer tratamento de vari\u00e1veis","e885aa06":"Pegando os valores num\u00e9ricos","2608907d":"Familia","7f9e0be2":"Fare"}}