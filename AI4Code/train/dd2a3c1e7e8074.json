{"cell_type":{"f2e4e90f":"code","2c28d63f":"code","67f7f24a":"code","b81ecbe5":"code","2bdb4482":"markdown","0fef2727":"markdown","f159d086":"markdown","de2cae58":"markdown","ccb5461b":"markdown","784bafb9":"markdown","b9e7c3d7":"markdown"},"source":{"f2e4e90f":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nsns.set()\nimport os\n#print(os.listdir(\"..\/input\"))\n\nUsers = pd.read_csv('..\/input\/meta-kaggle\/Users.csv').rename(columns = {'Id': 'UsersId'})\nKernels = pd.read_csv('..\/input\/meta-kaggle\/Kernels.csv').rename(columns = {'Id': 'KernelsId'})\nKernelVersions = pd.read_csv('..\/input\/meta-kaggle\/KernelVersions.csv').rename(columns = {'Id': 'KernelVersionsId'})\nKernelVotes = pd.read_csv('..\/input\/meta-kaggle\/KernelVotes.csv').rename(columns = {'Id': 'KernelVotesId'})","2c28d63f":"# put your kernel slugs here (it is a final part of a kernel url)\nmy_kernels_list = ['hierarchical-clustering-approach', \n                   'principal-component-analysis-approach', \n                   'weighted-naive-benchmark-lb-2-081',\n                   'count-not-novices-kernels-upvotes-to-get-medal',\n                   'discussion-upvotes-how-long-till-the-medal',\n                   'logit-for-200-pca-features',\n                   'random-solution-auc-0-5', \n                   'naive-benchmark-extended-explanation',\n                   'xgboost-tuned-with-pipelines', \n                   'cross-validation-on-pipelines-for-xgboost']\n\n# error checking\n# if you created kernel 1 day ago it still can take time (1-2 days) to appear in the Kaggle open source database \n# so if the kernel is absent in the database or it is misspelled then script will through an error\nerror_counter = 0\nfor i, kernel in enumerate(my_kernels_list):\n    if(len(Kernels[Kernels.CurrentUrlSlug == kernel]['KernelsId']) == 0):\n        error_counter += 1\n        print(\"Error in the\", i, \"kernel slug: \", kernel, \n              \"\\n\\rCheck the correctness of the slug\\n\\ror probably it is not added to the Kaggle open source database yet. Try to check it tomorrow.\\n\\r\")\n\nif(error_counter == 0): print(\"Ok\")","67f7f24a":"# 'CountedUpvotes' is the target - this is the number of users who are not Novices and who didn't upwote his own kernel\n\n# result table\nkernel_upvotes = pd.DataFrame(\n    columns = ['Kernel', \n               'CountedUpvotes', # novices and own upvotes are excluded\n               'TotalUpvotes', # total upvotes\n               'RemainedUpvotes_Bronze', # = 5 - CountedUpvotes\n               'RemainedUpvotes_Silver', # = 20 - CountedUpvotes\n               'RemainedUpvotes_Gold' # = 50 - CountedUpvotes\n                ])\n\nfor i, kernel in enumerate(my_kernels_list):\n    print(i, kernel)\n    my_current_kernel_slug = my_kernels_list[i]\n    my_user_id = float(Kernels[Kernels.CurrentUrlSlug == my_current_kernel_slug]['AuthorUserId'])\n    my_kernel_id = float(Kernels[Kernels.CurrentUrlSlug == my_current_kernel_slug]['KernelsId'])\n    my_kernel_versions_id = KernelVersions[KernelVersions.ScriptId == my_kernel_id]['KernelVersionsId']\n    users_id_upvoted_my_kernel = KernelVotes[KernelVotes.KernelVersionId.isin(my_kernel_versions_id)]['UserId']\n    \n    total_upvotes_count = Users[Users.UsersId.isin(users_id_upvoted_my_kernel)]['UsersId'].count()\n    \n    # upvotes which are counted for a medal\n    counted_upvotes_count = Users[Users.UsersId.isin(users_id_upvoted_my_kernel) \n                                 & (Users.PerformanceTier > 0) \n                                 & (Users.UsersId != my_user_id)]['UsersId'].count()\n\n    # results\n    kernel_upvotes.loc[ i, 'Kernel'] = my_current_kernel_slug\n    kernel_upvotes.loc[ i, 'CountedUpvotes'] = counted_upvotes_count\n    kernel_upvotes.loc[ i, 'TotalUpvotes'] = total_upvotes_count\n    kernel_upvotes.loc[ i, 'RemainedUpvotes_Bronze'] = 5 - counted_upvotes_count if counted_upvotes_count < 5 else 0\n    kernel_upvotes.loc[ i, 'RemainedUpvotes_Silver'] = 20 - counted_upvotes_count if counted_upvotes_count < 20 else 0\n    kernel_upvotes.loc[ i, 'RemainedUpvotes_Gold'] = 50 - counted_upvotes_count if counted_upvotes_count < 50 else 0\n    \nkernel_upvotes","b81ecbe5":"plt.figure(figsize = (14, 8))\n\nsns.barplot(x = 'CountedUpvotes', \n            y = 'Kernel', \n            data = kernel_upvotes.sort_values(by = ['CountedUpvotes'], ascending = False))\n\n# bronze medal zone\nplt.axvline(x = 5, color = 'orange')\n# silver medal zone\nplt.axvline(x = 20, color = 'grey')\n# gold medal zone\nplt.axvline(x = 50, color = 'gold')\n\nplt.title('Number of \"not novices\" kernels upvotes', \n          {'fontsize':'16', \n           'fontweight':'bold'})\n\nif(max(kernel_upvotes.CountedUpvotes) > 50):\n    max_tick = max(kernel_upvotes.CountedUpvotes)+1\nelse:\n    max_tick = 50+1\n    \nplt.xticks(np.arange(0, max_tick, 1.0))\nplt.ylabel('Kernel')\nplt.xlabel('Upvotes count')\nplt.show()","2bdb4482":"# Basic setup","0fef2727":"# Visualization","f159d086":"# Kernel: how long till the gold medal?","de2cae58":"**The script helps to identify the number of upvotes counted for a medal.**\n\n**You can check your own or anybody else kernels.**\n\nNot every upvote of your kernel counts towards medals: \n\n> self-votes and votes by novices are excluded from medal calculation. \n\n\\* votes on old posts are also excluded from the medal calculation, but the script doesn't do this check.\n\n\\** there probably a 1 day lag in the amount of upvotes you see since the database is updated by kaggle not every hour\n\n\\*** Before running the script insure that add \"Meta Kaggle\" dataset via Add dataset->Datasets->Search for \"Meta Kaggle\" (Every time Kaggle updates the database, it deletes the previous one and it is no longer available).","ccb5461b":"My kernels to evaluate:\n\n* [Hierarchical clustering approach: https:\/\/www.kaggle.com\/darbin\/hierarchical-clustering-approach](https:\/\/www.kaggle.com\/darbin\/hierarchical-clustering-approach)\n* [Principal component analysis approach: https:\/\/www.kaggle.com\/darbin\/pca-blender-of-0-901-solutions](https:\/\/www.kaggle.com\/darbin\/principal-component-analysis-approach)\n* [Weighted naive benchmark: https:\/\/www.kaggle.com\/darbin\/weighted-naive-benchmark-lb-2-081](https:\/\/www.kaggle.com\/darbin\/weighted-naive-benchmark-lb-2-081)\n* [Count \"not novices\" upvotes: https:\/\/www.kaggle.com\/darbin\/count-not-novices-kernels-upvotes-to-get-medal](https:\/\/www.kaggle.com\/darbin\/count-not-novices-kernels-upvotes-to-get-medal)\n* [Discussion upvotes: how long till the medal?: https:\/\/www.kaggle.com\/darbin\/discussion-upvotes-how-long-till-the-medal](https:\/\/www.kaggle.com\/darbin\/discussion-upvotes-how-long-till-the-medal)\n* [Logit for 200 PCA features: https:\/\/www.kaggle.com\/darbin\/logit-for-200-pca-features](https:\/\/www.kaggle.com\/darbin\/logit-for-200-pca-features)\n* [Random solution (AUC = 0.5): https:\/\/www.kaggle.com\/darbin\/random-solution-auc-0-5](https:\/\/www.kaggle.com\/darbin\/random-solution-auc-0-5)\n* [Naive benchmark (extended explanation): https:\/\/www.kaggle.com\/darbin\/naive-benchmark-extended-explanation](https:\/\/www.kaggle.com\/darbin\/naive-benchmark-extended-explanation)\n* [XGBoost tuned with pipelines: https:\/\/www.kaggle.com\/darbin\/xgboost-tuned-with-pipelines](https:\/\/www.kaggle.com\/darbin\/xgboost-tuned-with-pipelines)\n* [CV on pipelines for XGBoost: https:\/\/www.kaggle.com\/darbin\/cross-validation-on-pipelines-for-xgboost](https:\/\/www.kaggle.com\/darbin\/cross-validation-on-pipelines-for-xgboost)","784bafb9":"# Count \"not novices\" upvotes","b9e7c3d7":"# Kernels to evaluate"}}