{"cell_type":{"3396e94e":"code","1480afce":"code","1a6493fc":"code","c7d1b7d2":"code","5a3507d4":"code","f4258fac":"code","416e948b":"code","e3d14346":"code","8acd546f":"code","479b1956":"code","789d0689":"code","c8cc665c":"code","37888626":"code","4eb03722":"code","37139048":"code","88e00d11":"code","08a3dc4a":"code","06d23ed3":"code","9808d339":"code","1ba7f6b9":"code","8c82faa2":"code","34637329":"code","f112d5a4":"code","988fc886":"markdown","eef97415":"markdown","bd6f0431":"markdown","546a1fd0":"markdown","f076717d":"markdown","9eec5791":"markdown","eba0bd3f":"markdown","03045f5f":"markdown","5ca4d9b5":"markdown","8041f4de":"markdown","2a2356a1":"markdown","1b2b9265":"markdown","ab5a65e7":"markdown","1f3d47f6":"markdown","0c51f2df":"markdown","ba82c817":"markdown","79489f0c":"markdown"},"source":{"3396e94e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\n\nfrom pathlib import Path\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\ni=0;\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        i+=1\n        print(os.path.join(dirname, filename))\n        if(i>10):\n            break\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1480afce":"data_dir = Path(\"..\/input\/captcha-version-2-images\/samples\/\")\nimages = list(data_dir.glob(\"*.png\"))","1a6493fc":"kernel =np.ones((3,1),np.uint8)\nborderType = cv2.BORDER_CONSTANT\ndef pad(src): \n    top = int(0.05 * src.shape[0])  # shape[0] = rows\n    bottom = top\n    left = int(0.15 * src.shape[1])  # shape[1] = cols\n    right = left\n    des=cv2.copyMakeBorder(src, top, bottom, left+1, right, borderType, None,255)\n    return cv2.bitwise_not(des)","c7d1b7d2":"x=[]\ny=[]\nfor image in images:\n    im=cv2.imread(str(image),0)\n    threshold=cv2.adaptiveThreshold(im, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY, 199, 5)\n    erosion =cv2.dilate(threshold,kernel,iterations=2)\n    s=str(image)\n    for i in range(5):\n        x.append(pad(erosion[:,(30+23*i):(30+23*(i+1))]))\n        y.append(s[-9+i])","5a3507d4":"plt.imshow(x[56])","f4258fac":"y[56]","416e948b":"x=np.array(x)\ny=np.array(y)","e3d14346":"(unique, counts) = np.unique(y, return_counts=True)\nfrequencies = np.asarray((unique, counts)).T\n\nprint(frequencies)","8acd546f":"data=np.reshape(x,(-1,54,30,1))","479b1956":"train = []\nl=['2','3','4','5','6','7','8','b','c','d','e','f','g','m','n','p','w','x','y']\nfor j in y:\n    i=l.index(j)\n    a=[]\n    for r in range(19):\n        if(r==i):\n            a.append(1)\n        else:\n            a.append(0)\n    a=np.array(a)\n    train.append(a)\ntrain=np.array(train)    ","789d0689":"import matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\n\nsns.set(style='white', context='notebook', palette='deep')","c8cc665c":"model = Sequential()\nmodel.add(Conv2D(filters = 16, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (50,30,1)))\nmodel.add(Conv2D(filters = 16, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(19, activation = \"softmax\"))","37888626":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","4eb03722":"epochs = 30 # Turn epochs to 30 to get 0.9967 accuracy\nbatch_size = 86","37139048":"X_train, X_val, Y_train, Y_val = train_test_split(data, train, test_size = 0.1, random_state= 2)\nX_train=X_train\/255.0\nX_val=X_val\/255.0","88e00d11":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=5,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = False, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","08a3dc4a":"history = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs =  30, validation_data = (X_val,Y_val),\n                              verbose = 1, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","06d23ed3":"fig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","9808d339":"Y_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \nerrors = (Y_pred_classes - Y_true != 0)\n\nY_pred_classes_errors = Y_pred_classes[errors]\nY_pred_errors = Y_pred[errors]\nY_true_errors = Y_true[errors]\nX_val_errors = X_val[errors]\n\ndef display_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \"\"\" This function shows 6 images with their predicted and real labels\"\"\"\n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True)\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((54,30)))\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(pred_errors[error],obs_errors[error]))\n            print(\"Predicted label :{}\\nTrue label :{}\".format(pred_errors[error],obs_errors[error]))\n            n += 1\n\n# Probabilities of the wrong predicted numbers\nY_pred_errors_prob = np.max(Y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(Y_pred_errors, Y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = Y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the delta prob errors\nsorted_dela_errors = np.argsort(delta_pred_true_errors)\n\n# Top 6 errors \nmost_important_errors = sorted_dela_errors[-6:]\n\n# Show the top 6 errors\ndisplay_errors(most_important_errors, X_val_errors, Y_pred_classes_errors, Y_true_errors)","1ba7f6b9":"def captcha(img,p):\n    im=cv2.imread(str(img),0)\n    threshold=cv2.adaptiveThreshold(im, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY, 199, 5)\n    erosion =cv2.dilate(threshold,kernel,iterations=2)\n    images=[]\n    for i in range(5):\n        images.append(pad(erosion[:,(30+23*i):(30+23*(i+1))]))\n    images=np.reshape(images,(-1,54,30,1))\n    pred=model.predict(images)\n    pred=np.argmax(pred,axis = 1)\n    predicted=str(l[pred[0]]+l[pred[1]]+l[pred[2]]+l[pred[3]]+l[pred[4]])\n    if(p):\n        print(predicted)\n    if(predicted==img[-9:-4]):\n        return 1\n    return 0\n    ","8c82faa2":"images = list(data_dir.glob(\"*.png\"))\nt=0\nfor i in images:\n    t+=captcha(str(i),False)","34637329":"print(\"total images\",len(images),\"correctly identified\",t)\nprint(\"Accuracy is\",t\/len(images))","f112d5a4":"img='\/kaggle\/input\/captcha-version-2-images\/samples\/y48c3.png'\ncaptcha(img,True)","988fc886":"# Fitting data into the Model","eef97415":"# Analysing losses","bd6f0431":"# Acuuracy","546a1fd0":"# Data Augmentation","f076717d":"# **Importing libraries to definne our model**","9eec5791":"# Converting labels in one-hot encoder form","eba0bd3f":"# Let's Test a single captcha code","03045f5f":"# **Defining architecture of our Model**","5ca4d9b5":"**Defining function for padding**","8041f4de":"# **Loading images**","2a2356a1":"# Analysis on Cpatcha images\nTil now we have evaluated and traied our model on charcter dataset, what we are going to do here is test the accuracy of our model on captcha images.\nA captcha image is said to be correctly predicted if all the characters in that image are correcty identified. ","1b2b9265":"**Optimizer Functions**","ab5a65e7":"**TO see which characters are present and their corresponding frequencies , to ensure that our data is not biased**","1f3d47f6":"**CREATING LABELLED DATA**","0c51f2df":"# Analysing out top-6 wrongly identified characters","ba82c817":"**Splitting Data**","79489f0c":"# Creating labelled data\nAs we know that each of our image contains a line , basically a thin line which cuts several characters.\nSo we are going to remove that line by morphological operations on our image(Erosion and dilation).\nFirst we wil threshold our image , we are gonna use Adaptive thresolding , then we will dilate to remove that line.\nIts also clearly visible that each image contains 5 characters and the positions of all 5 characters are always same.\nSo we wil hardcode character's position and from each image we will extract five characters with their corresponding label , and hence will get a labelled data.\nWe wil pad each character image to change it in required dimension."}}