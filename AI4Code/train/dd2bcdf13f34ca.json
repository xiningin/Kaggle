{"cell_type":{"14d88352":"code","fa5c43fb":"code","9bfe41ee":"code","ab5938f8":"code","bdef3c15":"code","b330d2be":"code","c1bf40ac":"code","f0a71d8c":"code","87daeed8":"code","270bf616":"code","3e9f9d58":"code","7b507f56":"code","43324845":"code","e90220d3":"code","0108a580":"code","58c1cc96":"code","130d4a82":"code","75758d7a":"code","3750bbae":"code","4f1e2255":"code","b542154a":"code","48d0722f":"code","4d7126b7":"code","90225e90":"markdown","5e150530":"markdown"},"source":{"14d88352":"cp -r ..\/input\/covid-19-china-visualization\/. .","fa5c43fb":"import pandas as pd\nimport pkg_resources\n# pkg_resources.require(\"folium==0.8.3\")\nimport folium\nfrom folium import Map, LayerControl, Choropleth","9bfe41ee":"CSV_PATH = \".\/CSV_Files\/\"\nCSV_FILE = \"covid_19_data.csv\"\nGEOJSON_PATH = \".\/GeoJson\/\"\nGEOJSON_FILE = \"china.json\"\nFILTER = [\"Mainland China\",\"Hong Kong\", \"Macau\", \"Taiwan\"]\n\ndf = pd.read_csv(CSV_PATH + CSV_FILE)","ab5938f8":"## Filter out Mainland China, Hong Kong, Macau, and Taiwan\ndf = df[df[\"Country\/Region\"].isin(FILTER)]\ndf","bdef3c15":"## Assign the corresponding geojson id to values in Province\/State so that we can draw a map for them\nimport json\ngeojson = json.load(open(GEOJSON_PATH + GEOJSON_FILE))\nfor values in geojson[\"features\"]:\n    print(values[\"properties\"])","b330d2be":"## Gotta correspond their English names to that of Chinese MANUALLY\nprint(df[\"Province\/State\"].unique())\nprint(len(df[\"Province\/State\"].unique()))","c1bf40ac":"## In alphabetical order\nids = ['34','11','50','35','62','44','45','52','46','13','23','41','81','42','43','15','32','36','22','21','82','64','63','61','37','31','14','51','71','12','54','65','53','33']\n\n## Lets check if we have mistaken the number or not\n\nprint(len(set(ids))) ## At least the number is right","f0a71d8c":"## Let's make a small dataframe so that we can do a left join\nprovince_df = pd.DataFrame({\"Province\/State\":df[\"Province\/State\"].unique(), \"id\":ids})\nprovince_df","87daeed8":"## Let's do a left join!\n\ndf = df.merge(province_df,on = \"Province\/State\", how = \"left\")","270bf616":"df","3e9f9d58":"## Let's draw a map for a single day!\nm = Map(location = [35,110],\n        zoom_start = 4)\nChoropleth(geo_data = GEOJSON_PATH + GEOJSON_FILE,\n            name = 'choropleth',\n            data = df[df[\"ObservationDate\"] == \"01\/22\/2020\"],\n            columns = ['id','Confirmed'],\n            key_on = 'feature.properties.id',\n            fill_opacity = 0.7,\n            line_opacity = 0.2,\n            line_color = 'red',\n            fill_color = 'YlOrRd'\n          ).add_to(m)\nLayerControl().add_to(m)\nm\n","7b507f56":"## Let's write the above code into a function so that we can automate the generation of maps\n## http:\/\/github.com\/python-visualization\/folium\/issues\/220 sometimes error happens\ndef plot_map(date):\n    m = Map(location = [35,110],\n        zoom_start = 4)\n    Choropleth(geo_data = GEOJSON_PATH + GEOJSON_FILE,\n                name = 'choropleth',\n                data = df[df[\"ObservationDate\"] == date],\n                columns = ['id','Confirmed'],\n                key_on = 'feature.properties.id',\n                fill_opacity = 0.7,\n                line_opacity = 0.2,\n                line_color = 'red',\n                fill_color = 'YlOrRd'\n              ).add_to(m)\n    LayerControl().add_to(m)\n    return m","43324845":"## Let's loop through the dates and plot them\nprint(df.ObservationDate.unique())","e90220d3":"from IPython.core.interactiveshell import InteractiveShell \nInteractiveShell.ast_node_interactivity = \"all\"\n\n## Tibet seems to be missing out in some of the first few days\n## Hubei is distorting our scale -- maybe we need a custom scale\n\nfor date in df.ObservationDate.unique()[:5]:\n    maps = plot_map(date)\n    maps","0108a580":"## Let's modify the previous function again with our custom color scale\n\n## You can also define your scale\n# def my_scale(column,m):\n#     import branca\n#     index = [column.quantile(q=i\/10) for i in range(0,12,2)]\n#     colormap = branca.colormap.linear.YlOrRd_09.scale(column.min(), column.max())\n#     colormap = colormap.to_step(index=index)\n#     colormap.caption = 'Confirmed Numbers'\n#     colormap.add_to(m)\n\n## fill_color (string, default 'blue') \u2013 Area fill color.\n## Can pass a hex code, color name, or if you are binding data, \n## one of the following color brewer palettes: \u2018BuGn\u2019, \u2018BuPu\u2019, \u2018GnBu\u2019, \u2018OrRd\u2019,\n## \u2018PuBu\u2019, \u2018PuBuGn\u2019, \u2018PuRd\u2019, \u2018RdPu\u2019, \u2018YlGn\u2019, \u2018YlGnBu\u2019, \u2018YlOrBr\u2019, and \u2018YlOrRd\u2019.\n\ndef plot_map(date,column,line_color,fill_color):\n    maximum = df[df[\"ObservationDate\"] == date][column].max()\n    maximum = maximum if maximum > 10000 else 10000\n    m = Map(location = [35,100],\n        zoom_start = 4)\n    Choropleth(geo_data = GEOJSON_PATH + GEOJSON_FILE,\n                name = 'choropleth',\n                data = df[df[\"ObservationDate\"] == date],\n                columns = ['id', column],\n                key_on = 'feature.properties.id',\n                fill_opacity = 0.7,\n                line_opacity = 0.2,\n                line_color = line_color,\n                fill_color = fill_color,\n#                 bins = [df[df[\"ObservationDate\"] == date][\"Confirmed\"].quantile(q=(10*i)**(0.5)\/10) for i in range(0,12,2)]\n                bins = [0,50,200,500,1000,maximum], ## as long as it's reasonable\n              ).add_to(m)\n#     my_scale(df[df[\"ObservationDate\"] == date][\"Confirmed\"],m)\n    LayerControl().add_to(m)\n    m.save(f\".\/maps\/{column}\/{date.replace('\/','')}.html\")\n    return m\n","58c1cc96":"## https:\/\/github.com\/python-visualization\/folium\/issues\/35 saving html as images\n\nfor date in df.ObservationDate.unique():\n    maps = plot_map(date,'Confirmed','red','YlOrRd')\n    maps\n    maps = plot_map(date,'Recovered','green','BuGn') ## Though we should be visualizing recovery rate instead\n    maps","130d4a82":"# Let's screenshot our html files and make it into a gif\n\n# !apt update -y\n# !apt install cutycapt -y ## This is capable of screenshoting our html files. Install this if you don't have it\n# !for file in .\/maps\/Confirmed\/*.html; do cutycapt --url=\"${file%.*}\".html --out=\"${file%.*}\".png --delay=1000 ; echo \"${file%.*}\"; done\n\n# import os\n# import subprocess\n\n# ## We're just open html files and taking screenshots via cutycapt\n\n# folder =  \"Confirmed\"\n# for file in os.listdir(f\".\/maps\/{folder}\"):\n#     command = f\"cutycapt --url=file:\/\/{os.getcwd()}\/maps\/{folder}\/{file} --out=.\/images\/{folder}\/{file.split('.')[0]}.png --delay=1000\"\n#     subprocess.run(command.split(\" \"))\n# #     print(command)\n\n","75758d7a":"# folder =  \"Recovered\"\n# for file in os.listdir(f\".\/maps\/{folder}\"):\n#     command = f\"cutycapt --url=file:\/\/{os.getcwd()}\/maps\/{folder}\/{file} --out=.\/images\/{folder}\/{file.split('.')[0]}.png --delay=1000\"\n#     subprocess.run(command.split(\" \"))","3750bbae":"## Couldn't apt get the tool I wanted, so I ran this on local and imported directly\n## Run The above code if you are able to get cutycapt running on local\n!cp -r ..\/input\/covid-19-china-images\/images .\/","4f1e2255":"## Example image\nfrom IPython.display import Image\nImage(filename='.\/images\/Confirmed\/03092020.png') ","b542154a":"## Making gif out of the images\n## run this if you're on local\n\n# import os\n# import subprocess\n\n# command = \"convert -delay 10 -loop 0 .\/images\/Recovered\/*.png .\/china_covid-19_visualization_recovered.gif\"\n# subprocess.run(command.split(\" \"))\n# command = \"convert -delay 10 -loop 0 .\/images\/Confirmed\/*.png .\/china_covid-19_visualization_confirmed.gif\"\n# subprocess.run(command.split(\" \"))\n\n\n","48d0722f":"from PIL import Image\nimport glob\n\nfiles = sorted(glob.glob('.\/images\/Confirmed\/*.png'))\nimages = list(map(lambda file: Image.open(file), files))\nimages[0].save('china_covid-19_visualization_confirmed.gif', save_all=True, append_images=images[1:], duration=10, loop=0)\n\nfiles = sorted(glob.glob('.\/images\/Recovered\/*.png'))\nimages = list(map(lambda file: Image.open(file), files))\nimages[0].save('china_covid-19_visualization_recovered.gif', save_all=True, append_images=images[1:], duration=10, loop=0)","4d7126b7":"## Example gif\n## run this if your on local\n# from IPython.display import HTML\n# HTML('<img src=\".\/china_covid-19_visualization_confirmed.gif\">')","90225e90":"## A Real-Time Map Visualization of COVID-19\n\nThis will be a short tutorial of how to present a dynamic map visualization primarily using folium and pandas. The temporal feature of this dataset spans from late January to early March. \n\n## Final Output\n\n<img src=\".\/china_covid-19_visualization_confirmed.gif\">\n<img src=\".\/china_covid-19_visualization_recovered.gif\">\n\n### Credits\n- [Here's the source of the data](https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset\/data)\n- [GeoJson file for China](https:\/\/github.com\/yezongyang\/china-geojson)\n\n### A Detailed Version [http:\/\/andy971022.com\/58e7c203-b961-4cdc-b242-6b61c5eb59a8\/](http:\/\/andy971022.com\/58e7c203-b961-4cdc-b242-6b61c5eb59a8\/)\n### My Personal Blog : [http:\/\/andy971022.com\/](http:\/\/andy971022.com\/)","5e150530":"<img src=\".\/china_covid-19_visualization_confirmed.gif\">\n<img src=\".\/china_covid-19_visualization_recovered.gif\">"}}