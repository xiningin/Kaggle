{"cell_type":{"cbd8d100":"code","2d0cef77":"code","93bff74d":"code","ab892af5":"code","94e9ed10":"code","28634767":"code","b977a1d1":"code","1f75b683":"code","6a9583c7":"code","0740abc1":"code","66afaf33":"code","f20d9859":"code","fe66dd4e":"code","97882f57":"code","7312bf2b":"code","b1549fdb":"code","39a94b92":"code","d23f5e12":"code","b762bc16":"code","777890fa":"code","ead42902":"code","d386f811":"code","17e21800":"code","ddb838ea":"code","469812e5":"code","0a66e08d":"code","16572747":"code","62d19432":"code","d100b4e5":"code","cd210e13":"code","40cbd1f7":"markdown","580f80f0":"markdown","b4fee6df":"markdown","cb51b968":"markdown","16465073":"markdown","33a7ec2d":"markdown","40637e0c":"markdown"},"source":{"cbd8d100":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","2d0cef77":"data0 = pd.read_csv(\"..\/input\/italy-earthquakes\/italy_earthquakes_from_2016-08-24_to_2016-11-30.csv\")\ndata0","93bff74d":"data0.columns","ab892af5":"data0['Magnitude'].value_counts()","94e9ed10":"n=len(data0)\nprint(n)","28634767":"N=[]\nfor i in range(n):\n    N+=[i]\nrandom.shuffle(N)","b977a1d1":"datay0=data0['Magnitude']\ndatax0=data0.drop(['Magnitude','Time'],axis=1)\ndatax0[0:5].T","1f75b683":"datax0.shape","6a9583c7":"datax2=np.array(datax0)\ndatay2=np.array(datay0)","0740abc1":"datax2.shape","66afaf33":"m=len(datax2)\nM=[]\nfor i in range(m):\n    M+=[i]\nrandom.shuffle(M)","f20d9859":"train=datax2[M[0:(n\/\/10)*8]]\ntest=datax2[M[(n\/\/10)*8:]]\ntrainy=datay2[M[0:(n\/\/10)*8]]\ntesty=datay2[M[(n\/\/10)*8:]]","fe66dd4e":"train.shape","97882f57":"df_columns = list(datax0.columns)\ndf_columns","7312bf2b":"train_df=pd.DataFrame(train)\ntest_df=pd.DataFrame(test)","b1549fdb":"train_df.columns=df_columns\ntest_df.columns=df_columns","39a94b92":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","d23f5e12":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","b762bc16":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","777890fa":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","ead42902":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","d386f811":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","17e21800":"y = trainy","ddb838ea":"from sklearn.model_selection import KFold\n\nfold = KFold(n_splits=10, shuffle=True, random_state=71)\ncv = list(fold.split(train_feat_df, y))\noof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)","469812e5":"fig,ax = plt.subplots(figsize=(8,8))\nax.set_xlabel('oof',fontsize=20)\nax.set_ylabel('train_y',fontsize=20)\nax.scatter(oof,y)","0a66e08d":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    ax.tick_params(axis='x', rotation=0)\n    ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    return fig,ax\n\nfig, ax = visualize_importance(models, train_feat_df)","16572747":"pred0 = np.array([model.predict(test_feat_df.values) for model in models])\npred1 = np.mean(pred0, axis=0)\npred1","62d19432":"testy2 = testy\ntesty2","d100b4e5":"fig,ax = plt.subplots(figsize=(8,8))\nax.set_xlabel('actual magnitude',fontsize=20)\nax.set_ylabel('predicted magnitude',fontsize=20)\nax.scatter(testy2,pred1)","cd210e13":"fig, ax = plt.subplots(figsize=(8,8))\nsns.histplot(pred1, label='Test Predict', ax=ax, color='black')\nsns.histplot(oof, label='Train Predict', ax=ax, color='C1')\nax.legend()\nax.grid()","40cbd1f7":"# Model","580f80f0":"# Predict","b4fee6df":"# Data preparation","cb51b968":"# Train and test setting","16465073":"# Target setting","33a7ec2d":"### 'Depth\/km' is the most imprtant factor for 'Magnitude'.","40637e0c":"# Visualize Importance"}}