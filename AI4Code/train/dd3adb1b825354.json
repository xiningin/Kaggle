{"cell_type":{"50487aa9":"code","b594cf46":"code","dc770709":"code","d1cc4d3c":"code","6a931505":"code","d9cacfbf":"code","1d06c5bb":"code","c2dfc8d1":"code","0f7ce535":"code","e9caca47":"code","546b3426":"code","bb41e873":"code","e622379c":"code","fd2e8316":"code","fae62903":"code","8a3391c0":"code","6256d7bb":"code","e855473e":"code","64655350":"code","b47d1254":"code","90fc823c":"code","208e8b81":"code","07a0e411":"code","d424e338":"code","39e0348c":"code","ea109e4a":"code","9e5cee84":"code","31bafd97":"code","1cd693c2":"code","18eb58eb":"markdown","f7af3682":"markdown","e0a68129":"markdown","e30837d5":"markdown","dd084c3c":"markdown","8f6311c8":"markdown","e1fa578f":"markdown","ddc83776":"markdown","93e39dc7":"markdown","43f653c6":"markdown","9569009f":"markdown"},"source":{"50487aa9":"\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b594cf46":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_log_error\n\nsns.set()","dc770709":"housingTrain_df = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\nhousingTest_df = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')","d1cc4d3c":"pd.set_option('display.max_columns', 90)","6a931505":"housingTrain_df.head()","d9cacfbf":"housingTrain_df.info()","1d06c5bb":"for df in [housingTrain_df, housingTest_df]:\n    df.drop(['Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature'], axis=1, inplace=True)","c2dfc8d1":"housingTrain_df.info()","0f7ce535":"for col in housingTrain_df.select_dtypes(include=['object']):\n    print(col, '\\n---------\\n')\n    print(housingTrain_df[col].value_counts(), '\\n')","e9caca47":"features_to_drop = ['Street', 'Utilities', 'Condition2', 'RoofMatl', 'Heating', 'CentralAir', 'GarageQual', 'GarageCond', 'Functional', 'Electrical', 'BsmtCond', 'LandSlope', 'LandContour']\nfor df in [housingTrain_df, housingTest_df]:\n    df.drop(features_to_drop, axis=1, inplace=True)","546b3426":"housingTrain_df.info()","bb41e873":"housingTrain_df.select_dtypes(include=['object']).isna().sum()","e622379c":"nan_object_columns = ['MasVnrType', 'BsmtQual', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'GarageType', 'GarageFinish']\n","fd2e8316":"housingTrain_df.fillna(value=housingTrain_df[nan_object_columns].mode().iloc[0], inplace=True)","fae62903":"housingTrain_df.info()","8a3391c0":"housingTrain_df.select_dtypes(include=['int64','float64']).isna().sum()","6256d7bb":"nan_num_columns = ['LotFrontage','MasVnrArea', 'GarageYrBlt']","e855473e":"housingTrain_df.fillna(value=housingTrain_df[nan_num_columns].mode().iloc[0], inplace=True)","64655350":"housingTrain_df.info()","b47d1254":"object_columns = housingTrain_df.select_dtypes(include=['object']).columns\nobject_columns","90fc823c":"housingTrain_df[object_columns] = housingTrain_df[object_columns].astype('category').apply(lambda x: x.cat.codes)\nhousingTest_df[object_columns] = housingTest_df[object_columns].astype('category').apply(lambda x: x.cat.codes)","208e8b81":"housingTrain_df.head()","07a0e411":"housingTest_df.info()","d424e338":"test_col_with_nan = ['LotFrontage', 'MasVnrArea','BsmtFinSF1', 'BsmtFinSF2','BsmtUnfSF', 'TotalBsmtSF', 'BsmtFullBath', \n                     'BsmtHalfBath', 'GarageYrBlt', 'GarageCars', 'GarageArea']\n\nhousingTest_df.fillna(value=housingTest_df[test_col_with_nan].mode().iloc[0], inplace=True)","39e0348c":"from sklearn.ensemble import RandomForestRegressor","ea109e4a":"X_train, X_test, y_train, y_test = train_test_split(housingTrain_df.drop(['SalePrice'],axis=1), housingTrain_df['SalePrice'], test_size=0.2, random_state=42)","9e5cee84":"rf_reg = RandomForestRegressor(random_state=42)\nrf_reg.fit(X_train, y_train)\n\nprint('RMSLE on training set: ',np.sqrt(mean_squared_log_error(y_train, rf_reg.predict(X_train))))\nprint('RMSLE on test set: ',np.sqrt(mean_squared_log_error(y_test, rf_reg.predict(X_test))))\n","31bafd97":"housingTest_df['SalePrice'] = rf_reg.predict(housingTest_df)","1cd693c2":"housingTest_df[['Id','SalePrice']].to_csv('\/kaggle\/working\/submission.csv', index=False)","18eb58eb":"# Encoding categorical variables","f7af3682":"# Handling NaN values","e0a68129":"columns 'Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature' have a lot of missing values. It is better to remove the columns","e30837d5":"### Fill NaN values with the mode value for categorical variables","dd084c3c":"some of the categorical columns have the majority of data in a single category. It is unlikely that these columns will be effective in predicting the house price","8f6311c8":"Some columns in test.csv contains nan. These instances will be imputed by the mean","e1fa578f":"# Import packages","ddc83776":"# Loading data","93e39dc7":"# Train a random forest regressor","43f653c6":"# Generating submission file","9569009f":"### Fill NaN values with the mean for numerical variables"}}