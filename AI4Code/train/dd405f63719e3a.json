{"cell_type":{"201f66a8":"code","48060f2f":"code","1ff48c77":"code","1f61f020":"code","5771c24a":"code","ca1d13ae":"code","33f17ab3":"code","70273833":"code","a1751146":"code","c26172c5":"code","1bb8be1c":"code","b763cabc":"markdown"},"source":{"201f66a8":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport os\ndata_paths = {}\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        data_paths[filename] = os.path.join(dirname, filename)\n        \nprint(data_paths)","48060f2f":"!pip -q install sklearn-crfsuite seqeval","1ff48c77":"ner_df = pd.read_csv(data_paths['ner_dataset.csv'], encoding = 'unicode_escape')\nner_df.fillna(method = 'ffill', inplace = True)\nner_df.rename(columns = {'Sentence #':'SentId'}, inplace = True)\nprint(ner_df.shape, ner_df.columns)\nner_df['SentId'] = ner_df['SentId'].apply(lambda x:x.split()[-1]).astype(int)\nner_df.head()","1f61f020":"agg_func = lambda s: [(w, p, t) for w, p, t in zip(s[\"Word\"].values,s[\"POS\"].values, s[\"Tag\"].values)]\ngrouped = ner_df.groupby('SentId').apply(agg_func)\nsentences = [s for s in grouped]","5771c24a":"val_end = int(47959 * 0.84)\ntrain_end = int(val_end*0.8)\ntrain_end, val_end","ca1d13ae":"train_sents = sentences[:train_end]\nval_sents = sentences[train_end:val_end]\ntest_sents = sentences[val_end:]\nlen(train_sents), len(val_sents), len(test_sents)","33f17ab3":"from nltk.stem import PorterStemmer \nfrom nltk.tokenize import word_tokenize \nfrom nltk.corpus import stopwords\neng_stops = stopwords.words('english')\nps = PorterStemmer() \n\ndef is_stopword(word):\n    r = set([word]) & set(eng_stops)\n    if len(r):\n        return True\n    return False\n    \ndef word2features(sent, i):\n    word = sent[i][0]\n    postag = sent[i][1]\n\n    features = {\n        'bias': 1.0,\n        'index':i,\n        'is_stopword':is_stopword(word.lower()), \n        'word.stem':ps.stem(word.lower()), \n        'word.lower': word.lower(),\n        'word[-3:]': word[-3:],\n        'word[-2:]': word[-2:],\n        'word.isupper': word.isupper(),\n        'word.istitle': word.istitle(),\n        'word.isdigit': word.isdigit(),\n        'postag': postag,\n        'postag[:2]': postag[:2],\n    }\n    if i > 0:\n        word1 = sent[i-1][0]\n        postag1 = sent[i-1][1]\n        features.update({\n            '-1:index':i-1,\n            '-1:is_stopword':is_stopword(word1.lower()), \n            '-1:word.stem':ps.stem(word1.lower()), \n            '-1:word.lower': word1.lower(),\n            '-1:word.istitle': word1.istitle(),\n            '-1:word.isupper': word1.isupper(),\n            '-1:word.isdigit': word1.isdigit(),\n            '-1:postag': postag1,\n            '-1:postag[:2]': postag1[:2],\n        })\n    else:\n        features['BOS'] = True\n\n    if i < len(sent)-1:\n        word1 = sent[i+1][0]\n        postag1 = sent[i+1][1]\n        features.update({\n            '+1:index':i+1, \n            '+1:is_stopword':is_stopword(word1.lower()), \n            '+1:word.stem':ps.stem(word1.lower()), \n            '+1:word.lower': word1.lower(),\n            '+1:word.istitle': word1.istitle(),\n            '+1:word.isupper': word1.isupper(),\n            '+1:word.isdigit': word1.isdigit(),\n            '+1:postag': postag1,\n            '+1:postag[:2]': postag1[:2],\n        })\n    else:\n        features['EOS'] = True\n\n    return features\n\ndef sent2features(sent):\n    return [word2features(sent, i) for i in range(len(sent))]\n\ndef sent2labels(sent):\n    return [label for token, postag, label in sent]\n\ndef sent2tokens(sent):\n    return [token for token, postag, label in sent]","70273833":"X_train = [sent2features(s) for s in train_sents]\ny_train = [sent2labels(s) for s in train_sents]\n\nX_val = [sent2features(s) for s in val_sents]\ny_val = [sent2labels(s) for s in val_sents]\n\nX_test = [sent2features(s) for s in test_sents]\ny_test = [sent2labels(s) for s in test_sents]","a1751146":"import sklearn_crfsuite\nfrom seqeval.metrics import f1_score, classification_report\n\ncrf = sklearn_crfsuite.CRF(algorithm='lbfgs',\n                           c1=0.3, c2=0.05,\n                           max_iterations=250,\n                           all_possible_transitions=True)\ncrf.fit(X_train, y_train)\n\nprint('Performance on TRAIN...')\ny_train_pred = crf.predict(X_train)\nprint(f1_score(y_train, y_train_pred))\nprint(classification_report(y_train, y_train_pred))","c26172c5":"print('Evaluation on DEV...')\ny_val_pred = crf.predict(X_val)\nprint('f1-score:', f1_score(y_val, y_val_pred))\nprint(classification_report(y_val, y_val_pred))","1bb8be1c":"print('Evaluation on TEST...')\ny_test_pred = crf.predict(X_test)\nprint('f1-score:',f1_score(y_test, y_test_pred))\nprint(classification_report(y_test, y_test_pred))","b763cabc":"#### Essential info about entities:\n\n- geo = Geographical Entity\n- org = Organization\n- per = Person\n- gpe = Geopolitical Entity\n- tim = Time indicator\n- art = Artifact\n- eve = Event\n- nat = Natural Phenomenon"}}