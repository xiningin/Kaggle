{"cell_type":{"0e7fe69d":"code","111acfee":"code","26e372ef":"code","cba00135":"code","06fb4de2":"code","b70ea812":"code","a697bed4":"code","c3274810":"code","5bd3c66d":"code","5540eda1":"code","aad70642":"code","d817dec7":"code","8ceacb45":"code","763e1bb1":"code","027ad77d":"code","618eb0b8":"code","7586b476":"code","c5fc7c26":"code","ebdbbf69":"code","7f436976":"code","ddf626e2":"markdown","d32aaccd":"markdown","fbebf7ee":"markdown","0c90ce10":"markdown","8daf4b9c":"markdown","8d4aa1fa":"markdown","0ab49797":"markdown","10a7ed50":"markdown","41911af2":"markdown","1a109dae":"markdown","a74bb4a5":"markdown","57d1442c":"markdown","fe0dc195":"markdown","fce6ec6f":"markdown","994c5cdf":"markdown","e5546022":"markdown","f8c7839c":"markdown"},"source":{"0e7fe69d":"#Basic libraries\nimport pandas as pd\nimport numpy as np\nimport os\n\n#Visualization libraries\nimport plotly \nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot, init_notebook_mode\nimport cufflinks as cf\nfrom cufflinks.offline import go_offline\n\n# You can go offline on demand by using\ncf.go_offline() \n\n# initiate notebook for offline plot\ninit_notebook_mode(connected=False)         \n\n# set some display options:\ncolors = px.colors.qualitative.Prism\npio.templates.default = \"plotly_white\"","111acfee":"class Information:\n    \"\"\"\n    This class shows some information about the dataset\n    \"\"\"\n    def __init__(self):\n        print()\n        print('Information object is created')\n        print()\n        \n    def get_missing_values(self, data):\n        \"\"\"\n        This function finds the missing values in the dataset\n        ...\n        Attributes\n        ----------\n        data : Pandas DataFrame\n        The data you want to see information about\n        \n        Returns\n        ----------\n        A Pandas Series contains the missing values in descending order\n        \"\"\"\n        #get the sum of all missing values in the dataset\n        missing_values = data.isnull().sum()\n        #sorting the missing values in a pandas Series\n        missing_values = missing_values.sort_values(ascending=False)\n        \n        #returning the missing values Series\n        return missing_values\n    \n    def _info_(self, data):\n        \"\"\"\n        This function shows some information about the data like \n        Feature names,data type, number of missing values for each feature \n        and ten samples of each feature\n        ...\n        Attributes\n        ----------\n        data : Pandas DataFrame\n            The data you want to see information about\n        \n        Returns\n        ----------\n        Information about the DataFrame\n        \"\"\"\n        self.data=data\n        feature_dtypes=self.data.dtypes\n        self.missing_values=self.get_missing_values(self.data)\n        feature_names=self.missing_values.index.values\n        missing_values=self.missing_values.values\n        rows, columns=data.shape\n\n        print(\"=\" * 50)\n        print('              Main Information')\n        print(\"=\" * 50)\n        print()\n        print('====> This data contains {} rows and {} columns'.format(rows,columns))\n        print()\n        \n        print(\"{:23} {:12} {:20} {:15}\".format('Feature Name'.upper(),\n                                               'Data Format'.upper(),\n                                               'Missing values (Num - Perc)'.upper(),\n                                               'Three Samples'.upper()))\n        for feature_name, dtype, missing_value in zip(feature_names,feature_dtypes[feature_names],missing_values):\n            print(\"{:25} {:12} {:25}\".format(feature_name,\n                                             str(dtype), \n                                             str(missing_value) + ' - ' + \n                                             str(round(100*missing_value\/sum(self.missing_values),3))+' %'), end=\"\")\n\n            for i in np.random.randint(0,len(data),3):\n                print(data[feature_name].iloc[i], end=\",\")\n            print()\n\n        print()\n        print(\"=\" * 50)\n        print('           Statistical Information')\n        print(\"=\" * 50)\n        print()\n\n        print(data[data.select_dtypes(exclude='object').columns].describe().T)","26e372ef":"class data_visualization:\n    \n    def __init__(self, data):\n        self.data=data\n        \n    def corr(self, columns):\n        #Correlation Map\n        if columns.lower()=='all':\n            corr = df.corr()\n        else:\n            corr = df[columns].corr()\n            \n        corr.iplot(kind='heatmap',colorscale='Blues',hoverinfo='all',\n                   layout = go.Layout(title='Correlation Heatmap',titlefont=dict(size=20)))\n    \n    def dist_plot(self, x):\n        self.data[x].dropna().iplot(kind='histogram',\n                                    subplots=True)\n        \n    def plot_missing_values(self):\n        #null percentage for each column\n        null_df = round(100*(self.data.isnull().sum().sort_values(ascending=False)\/df.isnull().sum().sum()),4)\\\n                       .to_frame().rename(columns={0:'Null values percentage'})[:15]\n        \n        null_df['Null values percentage'].apply(lambda x:str(x) + ' %').to_frame()\n        \n        #Pie plot for the percentage values\n        null_df.reset_index().iplot(kind='pie',\n                                    labels='index',\n                                    textinfo='label+text+percent',\n                                    values='Null values percentage',\n                                    layout = go.Layout(title='Pie plot for null values percentage',titlefont=dict(size=20),\n                                                       xaxis=dict(title=''),yaxis=dict(title='')))\n    \n\n    def scatter_plot(self, x, y):\n        fig = px.scatter(x=self.data[x], y=self.data[y])\n        fig['layout'] = dict(title='{} vs. {}'.format(x.title(), y.title()),titlefont=dict(size=20),\n                             xaxis=dict(title=x.title(), titlefont=dict(size=18)),\n                             yaxis=dict(title=y.title(), titlefont=dict(size=18)))\n        fig.show()","cba00135":"class OmdenaKandaObjectOriented:\n\n    def __init__(self):\n        #properties\n        self.data=None\n        self._info=Information()\n        \n        print()\n        print('Object Oriented object is created')\n        print()\n        \n    def add_data(self, data):\n        #properties\n        self.data=data\n        \n        print()\n        print('Your data has been added')\n        print()\n    \n    #using the objects\n    def information(self):\n        \"\"\"\n        using _info object gives summary about dataset\n        :return:\n        \"\"\"\n        print(self._info._info_(self.data))\n\n    class visualizer():\n        \n        def __init__(self, OmdenaKandaObjectOriented):\n            print()\n            print('Visualizer object is created')\n            print()\n            self.fw=OmdenaKandaObjectOriented\n            self.data=self.fw.data\n            self.data_vis=data_visualization(data=self.data)\n            \n        def dist_plot(self, x):\n            self.data_vis.dist_plot(x)\n            \n        def scatter_plot(self, x, y):\n            self.data_vis.scatter_plot(x, y)    \n            \n        def plot_nulls(self):\n            self.data_vis.plot_missing_values()\n            \n        def corr(self, columns='all'):\n            self.data_vis.corr(columns)    ","06fb4de2":"df = pd.read_csv('..\/input\/joined-initialraw\/Joined_InitialRaw.csv')","b70ea812":"oop = OmdenaKandaObjectOriented()","a697bed4":"oop.add_data(df)","c3274810":"oop.information()","5bd3c66d":"data = oop.data\ndata.head()","5540eda1":"visualizer = oop.visualizer(oop)","aad70642":"visualizer.plot_nulls()","d817dec7":"visualizer.dist_plot(x=['pressure','temperature'])","8ceacb45":"visualizer.dist_plot(['windSpeed','windDirection'])","763e1bb1":"visualizer.dist_plot(['geopotentialHeight','dewpointDepression'])","027ad77d":"visualizer.corr()","618eb0b8":"visualizer.scatter_plot(x='pressure', y='temperature')","7586b476":"visualizer.scatter_plot(x='windDirection', y='temperature')","c5fc7c26":"visualizer.scatter_plot(x='windSpeed', y='dewpointDepression')","ebdbbf69":"visualizer.scatter_plot(x='dewpointDepression', y='windDirection')","7f436976":"visualizer.scatter_plot(x='windSpeed', y='windDirection')","ddf626e2":"### Import the data","d32aaccd":"<a id=\"Phase I\"><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 100px;\">Phase I<\/p>","fbebf7ee":"### Correlation HeatMap","0c90ce10":"### Omdena Kanda OOP","8daf4b9c":"### Visualize our data","8d4aa1fa":"### Add the data","0ab49797":"### Visualize the null values percentages","10a7ed50":"### Create  OmdenaKandaObjectOriented","41911af2":"### Data Visualization Class","1a109dae":"<p style=\"background-color:skyblue; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 10px 100px;\">\n<b>The Problem<\/b><\/p><br>\n<b>Small-holder farmers in West Africa are very sensitive to rainfall and flooding events. Yet they do not have access to weather information, and furthermore, thunderstorm forecasts are poor, because satellites do not have the resolution to accurately predict these relatively small-scale weather features. \n\nThe Kanda Weather Group has a working IOT product that collects upper air data using a weather balloon at a very low cost and sends the data back to the ground receiver. We are also completing a weather app that can show a forecast in a dashboard format. We have been testing these weather balloon (also called radiosonde) launches at two universities in West Africa. \n\nOur most recent work has been to create an initial machine learning model using precipitation data to make a 12-hour rain forecast for the 500 square kilometer region that initiated the launch. Now, we would like to utilize a more complex ML or AI method to achieve the same outcome. \n\n<p style=\"background-color:skyblue; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 10px 100px;\">\n<b>The Project Goals<\/b><\/p><br>\nDevelop a model that forecasts 12-hour rainfall at a skill level better than the previous model and better than climatology. The training datasets to be used are (6000+) radiosonde weather balloon launches from National Weather Stations located in the United States that are cross-referenced to corresponding rainfall data 12 hours in the future for the same location. The creation of a model of this type implies that a good 12-hour rainfall forecast can be made after sending up a single weather balloon in the morning. \n\nFuture work includes further atmospheric modeling, including fire weather over California or air quality forecasts in polluted regions.","a74bb4a5":"### Information Class","57d1442c":"### Features Distributions","fe0dc195":"### Scatter plots","fce6ec6f":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:100%; text-align:center; border-radius: 15px 50px;\">Importing necessary modules and libraries\ud83d\udcda<\/p>","994c5cdf":"------------------------------------------\n------------------------------------------\n# <p style=\"background-color:#CCE3F2; font-family:newtimeroman; font-size:175%; text-align:center; border-radius: 15px 50px;\">Omdena - Kanda<br>Building a 12 hour Rainfall Forecast for West Africa<\/p>\n# <p style=\"background-color:gray; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 10px 100px; color:black; hight:max\"> By : Alaa sedeeq <\/p>\n------------------------------------------\n------------------------------------------\n\n<img src=\"https:\/\/cdn.al-ain.com\/lg\/images\/2019\/1\/03\/78-132107-climate-agenda-security-council_700x400.png\" alt=\"Omdena\" hight=50 width=1000><\/img>\n\n------------------------------------------\n------------------------------------------\n","e5546022":"###  See Information about the data","f8c7839c":"## We can add more visualization tools and plots but it's an initial version of the work just to get some insights about the data, also we can add the ML class to complete the whole project."}}