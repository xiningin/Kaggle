{"cell_type":{"fc87e540":"code","51eb467c":"code","236c8420":"code","14c1983a":"code","901c9203":"code","5adce73a":"code","acb9bd64":"code","8dfc5e86":"code","ad268c0e":"code","1b659322":"code","316cf9d0":"code","c5bd962e":"code","b26e1c48":"code","347be24b":"code","17bab8fb":"code","c070d7be":"code","0bb8516c":"code","0d5dbdbf":"code","381d5507":"code","c55c2cc7":"code","c4f12a0d":"code","b7a2eb3f":"code","02fee829":"code","a412cff3":"markdown","d8e6fc1c":"markdown","d05dba0f":"markdown"},"source":{"fc87e540":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","51eb467c":"import numpy as np\nimport pandas as pd\n\n# Visualization\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import FuncFormatter\nimport seaborn as sns\n\n# sklearn for feature extraction & modeling\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.externals import joblib\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV\n# Iteratively read files\nimport glob\nimport os\n\n# For displaying images in ipython\nimport seaborn as sns\nsns.set(color_codes = True)\n%matplotlib inline","236c8420":"! pip install joblib","14c1983a":"df = pd.read_csv('\/kaggle\/input\/amazon-fine-food-reviews\/Reviews.csv')\ndf.head()","901c9203":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator","5adce73a":"heading_1 = df[df[\"Score\"]==1][\"Summary\"] # Extract only sumary of reviws\ncollapsed_heading_1 = heading_1.str.cat(sep=' ')\n\nheading_2 = df[df[\"Score\"]==2][\"Summary\"] # Extract only sumary of reviws\ncollapsed_heading_2 = heading_2.str.cat(sep=' ')\n\nheading_3 = df[df[\"Score\"]==3][\"Summary\"] # Extract only sumary of reviws\ncollapsed_heading_3 = heading_3.str.cat(sep=' ')\n\nheading_4 = df[df[\"Score\"]==4][\"Summary\"] # Extract only sumary of reviws\ncollapsed_heading_4 = heading_4.str.cat(sep=' ')\n\nheading_5 = df[df[\"Score\"]==5][\"Summary\"] # Extract only sumary of reviws\ncollapsed_heading_5 = heading_4.str.cat(sep=' ')\n","acb9bd64":"# Create stopword list:\nstopwords = set(STOPWORDS)\n#stopwords.update([\"Subject\",\"re\",\"fw\",\"fwd\"])\n\nprint(\"Word Cloud for Sports\")\n\n# Generate a word cloud image\nwordcloud = WordCloud(stopwords=stopwords, background_color=\"white\",max_words=50).generate(collapsed_heading_1)\n\n# Display the generated image:\n# the matplotlib way:1\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()\n\nprint(\"\\nWord Cloud for Business\")\n\n# Generate a word cloud image\nwordcloud = WordCloud(stopwords=stopwords, background_color=\"white\",max_words=50).generate(collapsed_heading_2)\n\n# Display the generated image:\n# the matplotlib way:1\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()\n\nprint(\"\\nWord Cloud for Politics\")\n# Generate a word cloud image\nwordcloud = WordCloud(stopwords=stopwords, background_color=\"white\",max_words=50).generate(collapsed_heading_3)\n\n# Display the generated image:\n# the matplotlib way:1\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()\n\nprint(\"\\nWord Cloud for Technology\")\n\n# Generate a word cloud image\nwordcloud = WordCloud(stopwords=stopwords, background_color=\"white\",max_words=50).generate(collapsed_heading_4)\n\n# Display the generated image:\n# the matplotlib way:1\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()\n     \nprint(\"\\nWord Cloud for Entertainment\")\n# Generate a word cloud image\nwordcloud = WordCloud(stopwords=stopwords, background_color=\"white\",max_words=50).generate(collapsed_heading_5)\n\n# Display the generated image:\n# the matplotlib way:1\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","8dfc5e86":"# Building Pipeline for raw text transformation\nclf = Pipeline([\n    ('vect', CountVectorizer(stop_words= \"english\")),\n    ('tfidf', TfidfTransformer()),\n    ('classifier', MultinomialNB()),\n    ])","ad268c0e":"df_1 = df.dropna()\ndf_1.shape, df.shape","1b659322":"X_train, X_test, y_train, y_test = train_test_split(df_1[\"Summary\"], df_1[\"Score\"],random_state = 42,\n                                                   test_size = 0.20)\nX_train.shape,X_test.shape,y_train.shape","316cf9d0":"model = clf.fit(X_train,y_train)","c5bd962e":"print(\"Accuracy of Naive Bayes Classifier is {}\".format(model.score(X_test,y_test)))","b26e1c48":"# Predict on Test data\ny_predicted = model.predict(X_test)\ny_predicted[0:10]","347be24b":"#Confusion Matrix\n# Compute confusion matrix\ncnf_matrix = confusion_matrix(y_test, y_predicted)\nnp.set_printoptions(precision=2)\ncnf_matrix","17bab8fb":"import itertools\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.tight_layout()","c070d7be":"#With Normalization\nplt.figure()\nplot_confusion_matrix(cnf_matrix, classes=['sport','business','politics','tech','entertainment'],\n                      title='Confusion matrix, without normalization')\n# With normalization\nplt.figure()\nplot_confusion_matrix(cnf_matrix, classes= ['sport','business','politics','tech','entertainment'], normalize=True,title='Normalized confusion matrix')\n\nplt.show()","0bb8516c":"df_1.Score.value_counts()","0d5dbdbf":"# Building Pipeline for raw text transformation\nclf = Pipeline([\n    ('vect', CountVectorizer(stop_words= \"english\")),\n    ('tfidf', TfidfTransformer()),\n    ('classifier', RandomForestClassifier()),\n    ])","381d5507":"X_train, X_test, y_train, y_test = train_test_split(df_1[\"Summary\"], df_1[\"Score\"],random_state = 42,\n                                                   test_size = 0.20)\nX_train.shape,X_test.shape,y_train.shape","c55c2cc7":"model = clf.fit(X_train,y_train)","c4f12a0d":"print(\"Accuracy of Naive Bayes Classifier is {}\".format(model.score(X_test,y_test)))","b7a2eb3f":"#With Normalization\nplt.figure()\nplot_confusion_matrix(cnf_matrix, classes=['sport','business','politics','tech','entertainment'],\n                      title='Confusion matrix, without normalization')\n# With normalization\nplt.figure()\nplot_confusion_matrix(cnf_matrix, classes= ['sport','business','politics','tech','entertainment'], normalize=True,title='Normalized confusion matrix')\n\nplt.show()","02fee829":"# Predict on Test data\ny_predicted = model.predict(X_test)\ny_predicted[0:10]\n\n#Confusion Matrix\n# Compute confusion matrix\ncnf_matrix = confusion_matrix(y_test, y_predicted)\nnp.set_printoptions(precision=2)\ncnf_matrix\n\n#With Normalization\nplt.figure()\nplot_confusion_matrix(cnf_matrix, classes=['sport','business','politics','tech','entertainment'],\n                      title='Confusion matrix, without normalization')\n# With normalization\nplt.figure()\nplot_confusion_matrix(cnf_matrix, classes= ['sport','business','politics','tech','entertainment'], normalize=True,title='Normalized confusion matrix')\n\nplt.show()","a412cff3":"# Train the mode","d8e6fc1c":"# Building Pipeline","d05dba0f":"# 1. Load Libraries"}}