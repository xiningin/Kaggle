{"cell_type":{"6b2d6cce":"code","12746961":"code","7f9355ff":"code","e9f5aa31":"code","d8bfcd1a":"code","f5c1efc9":"code","d205f1b3":"code","fbe2d860":"code","69405be5":"code","b2b1fa8f":"code","f6508bc2":"code","22d42460":"code","ad451e0b":"code","f9c01a04":"code","c456c07f":"code","a418ac44":"code","1b61ae10":"code","d777c3b4":"code","31a71e83":"code","d7cb791a":"code","00e9da91":"code","880b366c":"code","fe5e3d47":"code","7bdc0831":"code","652969c9":"markdown","b30058db":"markdown","5e013ed7":"markdown","75ff29c5":"markdown","b4eaf629":"markdown","fffdf462":"markdown","9dc834c0":"markdown"},"source":{"6b2d6cce":"# This Python 3 environment comes with many helpful analytics libraries installed. This notebook is run on Kaggle\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","12746961":"# Library import part\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.preprocessing import OneHotEncoder","7f9355ff":"# Installing some libraries as they aren't present in Kaggle or Colab\n!pip install -q tensorflow-text\nimport tensorflow_text as text\nimport tensorflow_hub as hub\n\n# Below the code, it's a Universal Sentence Encoder where any text can be converted into tensors easily\nUSE = hub.load(\"https:\/\/tfhub.dev\/google\/universal-sentence-encoder-multilingual-large\/3\")","e9f5aa31":"# Example: How the sentences are equivalent\n\nsent_1 = [\"the location is great\"]\nsent_2 = [\"amazing location\"]\n\nemb1 = USE(sent_1)\nemb2 = USE(sent_2)\n\nprint(emb1.shape)\nprint(np.inner(emb1, emb2).flatten()[0])\n# The value will print some equivalent one close to 0.80 to 1","d8bfcd1a":"# Dataset part\ndataset = pd.read_csv(\"..\/input\/consumer-reviews-of-amazon-products\/Datafiniti_Amazon_Consumer_Reviews_of_Amazon_Products_May19.csv\")\n\ndataset.head()\n# Prints 1st 5 rows","f5c1efc9":"# Now, creating two columns for easy view!\n\ndataset[\"review\"] = dataset[\"reviews.text\"]\n\ndataset[\"score\"] = dataset[\"reviews.rating\"].apply(lambda x: \"negative\" if x<3 else \"positive\")\n\n# Creating a seperate new variable\n\ndf = dataset[[\"review\", \"score\"]]","d205f1b3":"# Testing the reviews....\ndf.head()\n\n# Saving in seperate CSV file, but it's not important\ndf.to_csv(\"results.csv\")","fbe2d860":"# Viewing values based on segregation we done\ndf.score.value_counts()","69405be5":"# Now, seperating values into two diff values\npositive_df = df[df[\"score\"] == \"positive\"]\nnegative_df = df[df[\"score\"] == \"negative\"]\n\nprint(positive_df.shape, negative_df.shape)","b2b1fa8f":"good_df = positive_df.sample(n=len(negative_df), random_state=42)\nbad_df = negative_df\n\n# This is done to make both data equal in number","f6508bc2":"review_df = good_df.append(bad_df).reset_index(drop=True)\nreview_df.shape","22d42460":"review_df.head()","ad451e0b":"from sklearn.preprocessing import OneHotEncoder\n\ntype_one_hot = OneHotEncoder(sparse=False).fit_transform(\n  review_df.score.to_numpy().reshape(-1, 1)\n)","f9c01a04":"from sklearn.model_selection import train_test_split\n\ntrain_reviews, test_reviews, y_train, y_test =\\\n  train_test_split(\n    review_df.review, \n    type_one_hot, \n    test_size=.1, \n    random_state=42\n  )","c456c07f":"from tqdm import tqdm\n\nX_train = []\nfor r in tqdm(train_reviews):\n  emb = USE(r)\n  review_emb = tf.reshape(emb, [-1]).numpy()\n  X_train.append(review_emb)\n\nX_train = np.array(X_train)\n\nX_test = []\nfor r in tqdm(test_reviews):\n  emb = USE(r)\n  review_emb = tf.reshape(emb, [-1]).numpy()\n  X_test.append(review_emb)\n\nX_test = np.array(X_test)","a418ac44":"from keras.utils.vis_utils import plot_model\nfrom keras.layers import LSTM, SpatialDropout1D\n\nmodel = keras.Sequential()\n\nmodel.add(\n  keras.layers.Dense(\n    units=256,\n    input_shape=(X_train.shape[1], ),\n    activation='relu'\n  )\n)\nmodel.add(\n  keras.layers.Dropout(rate=0.5)\n)\n\nmodel.add(\n  keras.layers.Dense(\n    units=128,\n    activation='relu'\n  )\n)\nmodel.add(\n  keras.layers.Dropout(rate=0.5)\n)\n\nmodel.add(\n  keras.layers.Dense(\n    units=64,\n    activation='relu',\n    kernel_regularizer='l1' # This one worked so yes\n  )\n)\n\nmodel.add(\n  keras.layers.Dropout(rate=0.3)\n)\n\nmodel.add(keras.layers.Dense(2, activation='softmax'))\nmodel.compile(\n    loss='categorical_crossentropy', \n    optimizer=keras.optimizers.Adam(0.001),\n    metrics=['accuracy']\n)\n\n\nprint(model.summary())\nplot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)","1b61ae10":"history = model.fit(\n    X_train, y_train, \n    epochs=22, \n    batch_size=16, \n    validation_split=0.1, \n    verbose=1, \n    shuffle=True\n)","d777c3b4":"import matplotlib.pyplot as plt\n\nplt.plot(history.history['loss'], label='train loss')\nplt.plot(history.history['val_loss'], label='val loss')\nplt.xlabel(\"epoch\")\nplt.ylabel(\"Cross-entropy loss\")\nplt.legend();","31a71e83":"plt.plot(history.history['accuracy'], label='train accuracy')\nplt.plot(history.history['val_accuracy'], label='val accuracy')\nplt.xlabel(\"epoch\")\nplt.ylabel(\"accuracy\")\nplt.legend();","d7cb791a":"model.evaluate(X_test, y_test)","00e9da91":"# Now, let's test the model with 3 examples\nprint(test_reviews.iloc[0])\nprint(\"Bad\" if y_test[0][0] == 1 else \"Good\")","880b366c":"y_pred = model.predict(X_test[:1])\nprint(y_pred)\n\"Bad\" if np.argmax(y_pred) == 0 else \"Good\"","fe5e3d47":"print(test_reviews.iloc[10])\nprint(\"Bad\" if y_test[1][0] == 1 else \"Good\")","7bdc0831":"# Saving the model in H5 type\n# Type from here!\nmodel.save(\"Analysis.h5\")","652969c9":"### Instructions for running this notebook:\nIf you want to run this notebook, make sure you have GPU for running this program, if no, then you can run this in Kaggle (best because any dataset can be imported directly throught there!) or Google Colab\n\n**Prerequisities needed**:\n - A good dataset (a large review dataset)\n - GPU (TPU is also preferred)\n - Tensorflow Text and Tensorflow Hub (need to install for obtaining the text encoder)","b30058db":"Now, as the data is somewhat unequal, that is, good reviews are more in number than bad ones\nSo, we're making them in equal to avoid problems!","5e013ed7":"The above model can be exported to use directly on Webpage (with help of Flask library in Python)","75ff29c5":"# Sentiment analysis of Product reviews using TensorFlow\n\n## Intro:\nWe all would have used Amazon in our day-to-day life, be it buying groceries, books, spare parts... It can be anything! But have you ever thought how Amazon shows you products, that too only filtered (if you apply them) based on ratings and reviews? Well, there comes sentiment analysis! \n\n## Definition:\nSentiment analysis (or opinion mining) is a natural language processing (NLP) technique used to determine whether data is positive, negative or neutral. Sentiment analysis is often performed on textual data to help businesses monitor brand and product sentiment in customer feedback, and understand customer needs. Many companies use this technique to improve their products and business.\n","b4eaf629":"After doing that, now we can encode the data and start splitting the dataset","fffdf462":"As the model now works correctly, it's time to export it!\nHere, we'll be exporting the model using TF Lite\/HDF5","9dc834c0":"Here comes the model!"}}