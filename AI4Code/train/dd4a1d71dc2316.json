{"cell_type":{"83ab9b45":"code","54735177":"code","49fc52f1":"code","a21b14bd":"code","b101b6ef":"code","22d6cb7c":"code","e3f6ddad":"code","a88d7687":"code","4cd71a6b":"code","e3dfcf78":"code","8b69794d":"code","1ad6a929":"code","f7b8f129":"code","719533f2":"code","51539b5b":"code","af33afee":"code","bda29afd":"code","3b43aeb9":"code","dc877871":"code","816a30d4":"code","a7b3bd56":"code","4ef86974":"code","bf1eb1ed":"code","824d1626":"code","71900a05":"code","4619dc78":"code","d1747387":"code","d5b593ed":"code","2640eff3":"code","debe8934":"code","a4300491":"code","95ba86fd":"code","150a9a49":"code","0bab6781":"code","ff613843":"code","c8548b03":"code","14829644":"code","f2438ac1":"markdown","f052f013":"markdown","6f71d747":"markdown","b6e37313":"markdown","4cae753c":"markdown","0ec584c0":"markdown","85bcbfdd":"markdown","92ea4aec":"markdown","e5292799":"markdown","0edb856b":"markdown","721476e0":"markdown","4b6b3e0b":"markdown","a29f5133":"markdown","87a72546":"markdown","a34dfe27":"markdown","9687f567":"markdown","18dde623":"markdown"},"source":{"83ab9b45":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","54735177":"import pandas as pd\nimport numpy as np\nimport re\nimport nltk","49fc52f1":"pd.set_option('display.max_columns', None)","a21b14bd":"df = pd.read_csv(\"\/kaggle\/input\/imdb-top-250-eng-movies-dataset\/IMDB_Top250Engmovies2_OMDB_Detailed.csv\")","b101b6ef":"df.head()","22d6cb7c":"df.tail()","e3f6ddad":"len(df)","a88d7687":"df.describe()","4cd71a6b":"df.info()","e3dfcf78":"df.shape","8b69794d":"df['Plot'][0]","1ad6a929":"# convert lowercase and remove numbers, punctuations, spaces, etc.,\ndf['clean_plot'] = df['Plot'].str.lower()\ndf['clean_plot'] = df['clean_plot'].apply(lambda x: re.sub('[^a-zA-Z]', ' ', x))\ndf['clean_plot'] = df['clean_plot'].apply(lambda x: re.sub('\\s+', ' ', x))\ndf['clean_plot']","f7b8f129":"df['clean_plot'] = df['clean_plot'].apply(lambda x: nltk.word_tokenize(x))\ndf['clean_plot']","719533f2":"stop_words = nltk.corpus.stopwords.words('english')\nplot = []\nfor sentence in df['clean_plot']:\n    temp = []\n    for word in sentence:\n        if word not in stop_words and len(word) >= 3:\n            temp.append(word)\n    plot.append(temp)\nplot","51539b5b":"df['clean_plot'] = plot","af33afee":"df['clean_plot']","bda29afd":"df.head()","3b43aeb9":"df['Genre'] = df['Genre'].apply(lambda x: x.split(','))\ndf['Actors'] = df['Actors'].apply(lambda x: x.split(',')[:4])\ndf['Director'] = df['Director'].apply(lambda x: x.split(','))","dc877871":"df['Actors'][0]","816a30d4":"def clean(sentence):\n    temp = []\n    for word in sentence:\n        temp.append(word.lower().replace(' ', ''))\n    return temp","a7b3bd56":"df['Genre'] = [clean(x) for x in df['Genre']]\ndf['Actors'] = [clean(x) for x in df['Actors']]\ndf['Director'] = [clean(x) for x in df['Director']]","4ef86974":"df['Actors'][0]","bf1eb1ed":"columns = ['clean_plot', 'Genre', 'Actors', 'Director']\nl = []\nfor i in range(len(df)):\n    words = ''\n    for col in columns:\n        words += ' '.join(df[col][i]) + ' '\n    l.append(words)\nl","824d1626":"df['clean_input'] = l\ndf = df[['Title', 'clean_input']]","71900a05":"df.head()","4619dc78":"from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer","d1747387":"tfidf = TfidfVectorizer()\nfeatures = tfidf.fit_transform(df['clean_input'])","d5b593ed":"from sklearn.metrics.pairwise import cosine_similarity","2640eff3":"cosine_sim = cosine_similarity(features, features)\nprint(cosine_sim)","debe8934":"index = pd.Series(df['Title'])","a4300491":"index.head()","95ba86fd":"def recommend_movies(title):\n    movies = []\n    idx = index[index == title].index[0]\n    score = pd.Series(cosine_sim[idx]).sort_values(ascending=False)\n    top10 = list(score.iloc[1:11].index)\n    \n    for i in top10:\n        movies.append(df['Title'][i])\n    return movies","150a9a49":"recommend_movies('The Dark Knight Rises')","0bab6781":"index[index == 'The Dark Knight Rises'].index[0]","ff613843":"pd.Series(cosine_sim[3]).sort_values(ascending=False)","c8548b03":"recommend_movies('The Shawshank Redemption')","14829644":"recommend_movies('The Avengers')","f2438ac1":"# Feature Extraction","f052f013":"# Import Modules","6f71d747":"# Now Read dataset","b6e37313":"# Now combining all the columns data","4cae753c":"# Now create cosine similarity matrix","0ec584c0":"# Now Split the data","85bcbfdd":"# Check the head dataset","92ea4aec":"# Check the tail of the dataset","e5292799":"# Now Movie Recommendation","0edb856b":"# Now Check The Length of the dataset","721476e0":"# Now Check The Recommendation System","4b6b3e0b":"# Data Preprocessing","a29f5133":"# Now calling the recommend_movies function","87a72546":"# Now remove stopwords","a34dfe27":"# Hi Everyone I'm Mr.Jillani Soft Tech hopefully you love this notebook. Please review this notebook also.","9687f567":"# Now tokenize the sentence","18dde623":"# Dataset Information\nData on Movies from IMDB (Includes Some Television as Well). Movie IDs to help gather much of this data come from one or two Kaggle projects. There is a workflow from original cobbled together spreadsheets to the final product with 27 variables and over 5000 observations. \\ Content based Filtering"}}