{"cell_type":{"c59e9f40":"code","693db897":"code","fc8f818c":"code","cd6e93e6":"code","4c23de40":"code","776de3da":"code","82911107":"code","e0078847":"code","75844f3e":"code","6b36ae1f":"code","f5dcdcc2":"code","8492e621":"code","89895e12":"code","cd49ff05":"code","08c8e57c":"code","9d85ee6c":"code","5e7a181e":"code","452ebf73":"code","6cd6804f":"code","c0fb982c":"code","16dad3a8":"code","283b4b4d":"markdown","d6dde204":"markdown","774b6901":"markdown","2e74b290":"markdown","085de235":"markdown","0d1ebd0e":"markdown","5f0d7799":"markdown","06b0acbe":"markdown","73c3f568":"markdown","56c067ac":"markdown","af6925fc":"markdown","4b64c03d":"markdown","897683fd":"markdown"},"source":{"c59e9f40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","693db897":"import tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt","fc8f818c":"#mnist dataset is available in tensorflow itself\nfrom tensorflow.keras.datasets.mnist import load_data\n(X_train, y_train), (X_test, y_test) = load_data()","cd6e93e6":"print(X_train.shape)\nprint(X_test.shape)","4c23de40":"#how one image looks like\nX_train[0]","776de3da":"#maplotlib function which helps to display the image of the array of numbers\nplt.matshow(X_train[0])","82911107":"#crosscheck\ny_train[0]","e0078847":"#data normalization\nX_train = X_train\/255\nX_test = X_test\/255\n\n\"\"\"\nWhy divided by 255?\nThe pixel value lie in the range 0 - 255 representing the RGB (Red Green Blue) value. \"\"\"","75844f3e":"#let's check\nX_train[0]","6b36ae1f":"X_train.shape","f5dcdcc2":"#2d to 1d conversion\nX_train_flattened = X_train.reshape(len(X_train), 28*28)\nX_test_flattened = X_test.reshape(len(X_test), 28*28)","8492e621":"X_train_flattened.shape","89895e12":"#1. Define the model\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom numpy.random import seed\nimport tensorflow","cd49ff05":"model = Sequential()\nmodel.add(Dense(10, input_shape=(784,), activation='sigmoid'))","08c8e57c":"model.summary()","9d85ee6c":"#2. Compile the model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","5e7a181e":"#3. Fitting the model\nmodel.fit(X_train_flattened, y_train, epochs=10)","452ebf73":"#4. Evaluate the model\nmodel.evaluate(X_test_flattened, y_test)","6cd6804f":"#5. Make Prediction\ny_predicted = model.predict(X_test_flattened)\ny_predicted[0]","c0fb982c":"#np.argmax finds a maximum element from an array and returns the index of it\nnp.argmax(y_predicted[0])","16dad3a8":"#check\nplt.matshow(X_test[0])","283b4b4d":"### Flatten the data\n\nWe convert a 2d data to 2dimension","d6dde204":"The performance of the model on very simple model with no hidden layer is 92.9 %. Not Bad!","774b6901":"## Loading Libraries","2e74b290":"## Loading Data","085de235":"## Objective\n\nIn this notebook we will classify handwritten digits using a simple neural network which has only input and output layers. We will then add a hidden layer and see how the performance of the model improves","0d1ebd0e":"The data is 3dimensional.\n\n6000 -> number of records\/images, first dimension\n\n28 * 28 -> shape of each image, second and third dimension","5f0d7799":"## Brief Data Exploration","06b0acbe":"### Data Preprocessing","73c3f568":"Correct!","56c067ac":"## Model Cycle\nThe five steps in the life-cycle are as follows:\n\n    Define the model.\n    Compile the model.\n    Fit the model.\n    Make predictions on the test data.\n    Evaluate the model.\n","af6925fc":"Generally for multi-class classification problem, it is suggested to use softmax. We tried both softmax activation and sigmoid activation, but sigmoid found to give better performance.","4b64c03d":"Our objective is to build a model that will tell you what digit does that 28X28 array represent. We will need to preprocess data and flatten it in order to predict the number in the image\n","897683fd":"The above numbers are the probabilities values for different digits. The maximum probability will confirm what is the predicted digit for first image in X_test."}}