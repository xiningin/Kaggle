{"cell_type":{"c6c93344":"code","d726d6ae":"code","c4c0ef23":"code","7c3f997b":"code","62987a87":"code","73848e7b":"code","82318edd":"code","f579b61f":"code","99c7d30d":"code","5941f8b8":"code","8e4a2aa5":"code","43d49b9b":"code","d7645090":"code","394f34e2":"code","b7bef79b":"code","6e2add2b":"code","ebe81b42":"code","b5cffe81":"code","e2c4574e":"code","47af6e8f":"code","a5653b18":"code","0de807f2":"code","876930e2":"code","babe20bf":"code","61b69f45":"code","4a4ec6d3":"code","66d8582a":"code","9d4cd8f1":"code","54a552e4":"code","011e4643":"code","3ffc2488":"code","000473e0":"code","a410f295":"code","7d252868":"code","fdc88b56":"code","baaae467":"code","5b4215cd":"code","36711175":"code","94ca21f2":"code","cdf30850":"code","6975c0ed":"code","dbf47815":"code","8d41398e":"code","198ed04a":"code","1d46426e":"markdown","b6e8ee0d":"markdown","d4994b6c":"markdown","1b164634":"markdown"},"source":{"c6c93344":"import gc\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport sklearn \nimport sklearn.utils\nimport matplotlib.pyplot as plt\nimport matplotlib\nfrom sklearn.model_selection import *\nfrom sklearn.preprocessing import *\nfrom sklearn.metrics import *\nfrom catboost import Pool, CatBoostClassifier \n\nimport warnings \nwarnings.filterwarnings('ignore')","d726d6ae":"train_data = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/train.csv\")\n# test_data = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/test.csv\")\n# ids = pd.DataFrame(test_data['Id'].values, columns=[\"Id\"])","c4c0ef23":"ids.head()","7c3f997b":"train_data.head()","62987a87":"train_data.describe()","73848e7b":"train_data.info()","82318edd":"cols = train_data.columns.values.tolist()","f579b61f":"train_data.drop(train_data[train_data['Cover_Type']==5].index,inplace=True)\ntrain_target = pd.DataFrame(train_data[\"Cover_Type\"].values , columns=[\"Cover_Type\"])\n# test_data = test_data.drop([\"Id\"], axis=1)","99c7d30d":"non_binary = ['Elevation','Aspect','Slope','Horizontal_Distance_To_Hydrology','Vertical_Distance_To_Hydrology','Horizontal_Distance_To_Roadways','Hillshade_9am','Hillshade_Noon','Hillshade_3pm','Horizontal_Distance_To_Fire_Points','Cover_Type']","5941f8b8":"t_corr = train_data[non_binary].corr()\nplt.figure(figsize=(12,12))\nsns.heatmap(t_corr, cmap='Blues', annot=True, annot_kws={'size':10})","8e4a2aa5":"sns.catplot(x=\"Aspect\", y=\"Cover_Type\", kind=\"point\", data=train_data, aspect=9, height=9)","43d49b9b":"sns.relplot(x=\"Horizontal_Distance_To_Roadways\", y=\"Horizontal_Distance_To_Fire_Points\", hue=\"Cover_Type\", data=train_data, aspect=5, height=5)","d7645090":"# sns.catplot(x=\"Cover_Type\",kind=\"count\",data=train_data)","394f34e2":"non_binary = ['Elevation','Aspect','Slope','Horizontal_Distance_To_Hydrology','Vertical_Distance_To_Hydrology','Horizontal_Distance_To_Roadways','Hillshade_9am','Hillshade_Noon','Hillshade_3pm','Horizontal_Distance_To_Fire_Points']\nbinary = ['Wilderness_Area1','Wilderness_Area2','Wilderness_Area3','Wilderness_Area4','Soil_Type1','Soil_Type2','Soil_Type3','Soil_Type4','Soil_Type5','Soil_Type6','Soil_Type7','Soil_Type8','Soil_Type9','Soil_Type10','Soil_Type11','Soil_Type12','Soil_Type13','Soil_Type14','Soil_Type15','Soil_Type16','Soil_Type17','Soil_Type18','Soil_Type19','Soil_Type20','Soil_Type21','Soil_Type22','Soil_Type23','Soil_Type24','Soil_Type25','Soil_Type26','Soil_Type27','Soil_Type28','Soil_Type29','Soil_Type30','Soil_Type31','Soil_Type32','Soil_Type33','Soil_Type34','Soil_Type35','Soil_Type36','Soil_Type37','Soil_Type38','Soil_Type39','Soil_Type40']","b7bef79b":"memory_usage = (train_data.memory_usage(deep=True) \/ 1024 ** 2) \n#+ (test_data.memory_usage(deep=True) \/ 1024 ** 2) \nstart_mem = memory_usage.sum()","6e2add2b":"for col in binary:\n    train_data[col] = train_data[col].astype(\"int8\")\n#     test_data[col] = test_data[col].astype(\"int8\")\nfor val in non_binary:\n    train_data[val] = train_data[val].astype(\"float16\")\n#     test_data[val] = test_data[val].astype(\"float16\")\n    \nmemory_usage = (train_data.memory_usage(deep=True) \/ 1024 ** 2) \n# + (test_data.memory_usage(deep=True) \/ 1024 ** 2) \nend_mem = memory_usage.sum()\nprint(\"Mem. usage decreased from {:.2f} MB to {:.2f} MB ({:.2f}% reduction)\".format(start_mem, end_mem, 100 * (start_mem - end_mem) \/ start_mem))\ngc.collect()","ebe81b42":"cols = train_data.columns.values.tolist()\ni = 1\nplt.figure()\nfig, ax = plt.subplots(8, 3,figsize=(32, 38))\nfor feature in cols[1:25]:\n    plt.subplot(8, 3,i)\n    sns.histplot(train_data[feature],color=\"green\", kde=True,bins=100, label=feature)\n    plt.xlabel(feature, fontsize=9); plt.legend()\n    i += 1\nplt.show()","b5cffe81":"cols = train_data.columns.values.tolist()\ni = 1\nplt.figure()\nfig, ax = plt.subplots(10, 3,figsize=(32, 38))\nfor feature in cols[25:55]:\n    plt.subplot(10, 3,i)\n    sns.histplot(train_data[feature],color=\"purple\", kde=True,bins=100, label=feature)\n    plt.xlabel(feature, fontsize=9); plt.legend()\n    i += 1\nplt.show()","e2c4574e":"train_data.isnull().sum()","47af6e8f":"train_data = train_data.drop([\"Id\",\"Cover_Type\"], axis=1)    ","a5653b18":"test_data.isnull().sum()","0de807f2":"MX = MinMaxScaler()\ntrain_data = pd.DataFrame(MX.fit_transform(train_data.values), columns=[train_data.columns.tolist()])\ntest_data = pd.DataFrame(MX.fit_transform(test_data.values), columns=[test_data.columns.tolist()])","876930e2":"# Adding some new features to make the final model more accurate ...\ntrain_data[\"mean\"]=train_data.mean(axis=1)\ntrain_data[\"min\"]=train_data.min(axis=1)\ntrain_data[\"var\"]=train_data.var(axis=1)\ntrain_data[\"std\"]=train_data.std(axis=1)\n#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\ntest_data[\"mean\"]=test_data.mean(axis=1)\ntest_data[\"min\"]=test_data.min(axis=1)\ntest_data[\"var\"]=test_data.var(axis=1)\ntest_data[\"std\"]=test_data.std(axis=1)","babe20bf":"test_data.head()","61b69f45":"train_data.tail()","4a4ec6d3":"# Splitting Data\nX_train, X_test, y_train, y_test = train_test_split(train_data, train_target, test_size=0.2, random_state=1)","66d8582a":"test_model = CatBoostClassifier(random_state=0 ,task_type=\"GPU\").fit(X_train, y_train)","9d4cd8f1":"test_model.score(X_test, y_test)","54a552e4":"parameters = [{\n                         'learning_rate':[0.2],                   \n                         'verbose':[True],\n                         'eval_metric':['Accuracy'],\n                         'subsample':[0.8],\n                         'max_depth':np.arange(5,30,5),\n                         'n_estimators':[2000],\n                         'colsample_bylevel':np.arange(0.1,0.9,0.1),\n                         'random_state':[2],\n                         'reg_lambda':np.arange(0.1,10,0.1),\n                         'min_child_samples':np.arange(5,50,5),\n                         'num_leaves':np.arange(1,20,1),\n                         'task_type':['GPU']\n}]","011e4643":"grid_search_model = GridSearchCV(estimator = test_model,\n                           param_grid = parameters,\n                           scoring = 'accuracy',\n                           cv = 5,\n                           n_jobs = -1)","3ffc2488":"grid_search_model.fit(X_train, y_train)","000473e0":"best_accuracy = grid_search_model.best_score_\nprint(\"Best Accuracy: {:.2f} %\".format(best_accuracy*100))","a410f295":"best_parameters = grid_search_model.best_params_\nprint(\"Best Parameters:\", best_parameters)","7d252868":"# parameters = [{\n#                          'learning_rate':[],                   \n#                          'verbose':[True],\n#                          'eval_metric':['Accuracy'],\n#                          'subsample':[0.8],\n#                          'max_depth':'',\n#                          'n_estimators':[],\n#                          'colsample_bylevel':'',\n#                          'random_state':'',\n#                          'reg_lambda':'',\n#                          'min_child_samples':'',\n#                          'num_leaves':'',\n#                          'task_type':['GPU']\n# }]","fdc88b56":"model_2 = CatBoostClassifier(**params).fit(X_train, y_train)","baaae467":"model_2.score(X_test, y_test)\n# First  Model 0.95994\n# Second Model 0.96109\n# Third  Model 0.96081\n# Fourth Model 0.95993\n# Fifth  Model 0.960715","5b4215cd":"prediction = model_2.predict(test_data)","36711175":"preds = pd.DataFrame(prediction, columns = [\"Cover_Type\"])","94ca21f2":"preds[\"Cover_Type\"].value_counts(normalize = True)*100","cdf30850":"sns.catplot(x=\"Cover_Type\",kind='count',data=preds,palette=\"ch:.95\")","6975c0ed":"result = pd.concat([ids,preds],axis=1)","dbf47815":"result.head()","8d41398e":"result.to_csv(\"submission.csv\",index=False)","198ed04a":"# M.Hossein Hashemi","1d46426e":"# Data Prep","b6e8ee0d":"# EDA","d4994b6c":"# Memmory Management","1b164634":"# TPS December \ni hope you'll find this notebook helpfull,\nmake sure to upvote it if you do.\n\ni will be more than happy to hear any suggestions or answer any questions about this note book in comments :))\nGOOD LUCK"}}