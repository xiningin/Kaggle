{"cell_type":{"2e30e395":"code","3e9fdd34":"code","52f4f5da":"code","ba3ad481":"code","3dd550cc":"code","a4e78935":"code","28e219a6":"code","678b82da":"code","b2029eb1":"code","c3e5f302":"code","d8ba3168":"code","2c3803be":"code","77b41fd7":"code","e1defd88":"code","41cf0a75":"code","450d96ba":"code","3bf0580b":"code","ec4c0c8c":"code","10e7381f":"code","4ab7e80e":"code","6fa98b36":"code","598f7096":"code","9c2ee525":"code","34813542":"markdown","088b5113":"markdown","e369144a":"markdown","d63c3f50":"markdown","e5973344":"markdown","abc5e372":"markdown","75a4318e":"markdown","e11f3e17":"markdown","69aad602":"markdown","233e5a87":"markdown","43d9745d":"markdown","961c2a3d":"markdown","b0b8800c":"markdown","57e645fa":"markdown","b9ef93bc":"markdown","599906dc":"markdown","05b1fd39":"markdown","3a6e0826":"markdown","17d277e4":"markdown","fc086581":"markdown","8c838f99":"markdown","a6472146":"markdown","7956f402":"markdown","3e9e4529":"markdown","00d49c05":"markdown","26fe69d6":"markdown","177db3ca":"markdown","263ce84e":"markdown","50efa08c":"markdown","bd7c5259":"markdown"},"source":{"2e30e395":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","3e9fdd34":"pd.read_csv('..\/input\/portfolio_data.csv', index_col = 'Date')","52f4f5da":"mydata = pd.read_csv('..\/input\/portfolio_data.csv', index_col = 'Date')","ba3ad481":"(mydata).plot(figsize = (25, 10));\nplt.show()","3dd550cc":"mydata.iloc[0]","a4e78935":"(mydata \/ mydata.iloc[0] * 100).plot(figsize = (25, 10));\nplt.show()","28e219a6":"returns = (mydata \/ mydata.shift(1)) - 1\nreturns.head","678b82da":"annual_returns = returns.mean() * 250\nannual_returns","b2029eb1":"weights_1 = np.array([0.25, 0.25, 0.25, 0.25])\nweights_2 = np.array([0.3, 0.3, 0.1, 0.3])","c3e5f302":"port_1 = np.dot(annual_returns, weights_1)\nport_2 = np.dot(annual_returns, weights_2)\n\nprint (port_1)\nprint (port_2)","d8ba3168":"def looks(x):\n    print ('The yearly discrete return of this portfolio is: ' + str(round(x,5)*100) + '%')\n       \nlooks(port_1)\nlooks(port_2)","2c3803be":"log_returns = np.log(mydata\/mydata.shift(1))\nlog_returns","77b41fd7":"amzn_annual_return = log_returns['AMZN'].mean()*250\namzn_annual_var = log_returns['AMZN'].var() *250\namzn_annual_std = log_returns['AMZN'].std()*250**.5\nprint (amzn_annual_return,amzn_annual_var, amzn_annual_std)","e1defd88":"dpz_annual_return = log_returns['DPZ'].mean()*250\ndpz_annual_var = log_returns['DPZ'].var()*250\ndpz_annual_std = log_returns['DPZ'].std()*250**.5\nprint (dpz_annual_return,dpz_annual_var, dpz_annual_std)","41cf0a75":"btc_annual_return = log_returns['BTC'].mean()*250\nbtc_annual_var = log_returns['BTC'].var()*250\nbtc_annual_std = log_returns['BTC'].std()*250**.5\nprint (btc_annual_return,btc_annual_var, btc_annual_std)","450d96ba":"nflx_annual_return = log_returns['NFLX'].mean()*250\nnflx_annual_var = log_returns['NFLX'].var()*250\nnflx_annual_std = log_returns['NFLX'].std()*250**.5\nprint (nflx_annual_return,nflx_annual_var, nflx_annual_std)","3bf0580b":"n_groups = 4\nreturns = (amzn_annual_return, dpz_annual_return, nflx_annual_return, btc_annual_return)\nstd = (amzn_annual_std, dpz_annual_std, nflx_annual_std, btc_annual_std)\n\nfig,ax = plt.subplots()\nindex = np.arange(n_groups)\nbar_width = 0.4\nopacity = 0.8\n\nrects1 = plt.bar(index, returns, bar_width,\nalpha = opacity,\ncolor ='b',\nlabel = 'log_returns_annual')\n\nrects2 = plt.bar(index + bar_width, std, bar_width,\nalpha = opacity,\ncolor ='g',\nlabel = 'std_annual')\n\nplt.xlabel('Stock')\nplt.ylabel('Percent')\nplt.title('Returns and Standard Deviation Annual Average (May 2013- May 2019)')\nplt.xticks(index + .33,('AMZN', 'DPZ', 'NFLX', 'BTC'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","ec4c0c8c":"cov_matrix_annual = log_returns.cov() * 250\ncov_matrix_annual","10e7381f":"corr_matrix = log_returns.corr()\ncorr_matrix","4ab7e80e":"pfolio_vol_annual_w1 = np.dot(weights_1.T,np.dot(log_returns.cov() * 250, weights_1)) **0.5\npfolio_vol_annual_w2 = np.dot(weights_2.T,np.dot(log_returns.cov() * 250, weights_2)) **0.5\n\ndef looks_2(x):\n    print ('The annual volatility of this portfolio is: ' + str(round(x,6)*100) + '%')\n    \nlooks_2(pfolio_vol_annual_w1)\nlooks_2(pfolio_vol_annual_w2)\n\npfolio_var_annual_w1 = np.dot(weights_1.T,np.dot(log_returns.cov() * 250, weights_1))\npfolio_var_annual_w2 = np.dot(weights_2.T,np.dot(log_returns.cov() * 250, weights_2))\n\ndef looks_3(x):\n    print ('The annual variance of this portfolio is: ' + str(round(x,6)*100) + '%')\n    \nlooks_3(pfolio_var_annual_w1)\nlooks_3(pfolio_var_annual_w2)\n","6fa98b36":"dr_1 = pfolio_var_annual_w1 - (weights_1[0] ** 2 * amzn_annual_var) - (weights_1[1] ** 2 * dpz_annual_var) - (weights_1[2] ** 2 * btc_annual_var)-(weights_1[3] ** 2 * nflx_annual_var)\n\nn_dr_1 = pfolio_var_annual_w1 - dr_1\n\ndr_1\nn_dr_1\n\nprint ('The diversifiable risk in portfolio 1 is ' + str(dr_1) + \n       'The non-diversifiable risk in portfolio 1 is ' + str(n_dr_1))","598f7096":"dr_2 = pfolio_var_annual_w2 - (weights_2[0] ** 2 * amzn_annual_var) - (weights_2[1] ** 2 * dpz_annual_var) - (weights_2[2] ** 2 * btc_annual_var)-(weights_2[3] ** 2 * nflx_annual_var)\n\nn_dr_2 = pfolio_var_annual_w2 - dr_2\n\nprint ('The diversifiable risk in portfolio 1 is ' + str(dr_2) + \n       'The non-diversifiable risk in portfolio 1 is ' + str(n_dr_2))","9c2ee525":"n_groups = 2\ndiversifiable = (dr_1, dr_2)\nnon_diversifiable = (n_dr_1, n_dr_2)\n\nfig,ax = plt.subplots()\nindex = np.arange(n_groups)\nbar_width = 0.5\nopacity = 1.0\n\nrects1 = plt.bar(index, diversifiable, bar_width,\nalpha = opacity,\ncolor ='r',\nlabel = 'dirversifiable risk')\n\nrects2 = plt.bar(index + bar_width, non_diversifiable, bar_width,\nalpha = opacity,\ncolor ='y',\nlabel = 'non_diversifiable')\n\nplt.xlabel('Portfolio')\nplt.ylabel('Percent')\nplt.title('Diversifiable and Non-diversifiable Risk by Portfolio')\nplt.xticks(index + .33,('Portfolio_1', 'Portfolio_2'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","34813542":"Lastly, I'm formatting those numbers to look better by using a function.","088b5113":"I calculated the average yearly return by finding total mean and then multiplying it by the number of trading days in a year. \nSide note: Bitcoin is traded 24\/7; In the data-processing phase of this project, I only deleted the non publically-traded days for bitcoin to make it compatible with the 3 stocks.","e369144a":"##Part 3\nCovariance and Correlations Matrices","d63c3f50":"With Weights 2: (30%AMZN + 30%DPZ + 10%BTC + 30%NFLX)","e5973344":"Let's calculate the diversifiable (dr) and non-diversifiable risk (n_dr) of these portfolios now.\nTo do this, we are going to take the annual portfolio variance and subtract the individual annual asset variance components.","abc5e372":"**DPZ** log_return, var, and std","75a4318e":"Next I will use the pandas \".iloc\" method for integer-location based indexing \/ selection by position. This selects the first row only of the data. I will use this next in the normalization process.","e11f3e17":"Let's go ahead and figure out the daily return fluctuations now. (P1\/P0) - 1 = daily price change. The shift method helps with this line of code.","69aad602":"The correlation is below\nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.corr.html","233e5a87":"**NFLX** log_return, var, and std","43d9745d":"Assigning the data to a variable named \"mydata\". This makes it so I can work with the data.","961c2a3d":"With Weights 1: (25%AMZN + 25%DPZ + 25%BTC + 25%NFLX)","b0b8800c":"I will now determine the covariance between the assets:\nhttps:\/\/corporatefinanceinstitute.com\/resources\/knowledge\/finance\/covariance\/\nIn the matrix, you can see that the when an asset matches with itself, that shows the annual variance figure from earlier. The higher positive value between 2 assets, the stronger the covariance.\n","57e645fa":"Conclusions: The extra 15% of bitcoin between portfolio 1 and 2 makes a huge difference in the non_diversifiable risk. All 4 assets have high risk independantly. Amazon and Netflix have a high positive covariance. Dominos has a smaller (but still positive) relationship with the blue chips. Bitcoin is more or less entirely independant with negligible covariances links with other 3 assets, creating the huge drop in non_diversifiable risk in the change from portfolio 1 to 2. ","b9ef93bc":"**AMZN** log_return,variance and std.\nFor yearly std, you multiply by the square root of 250 trading days","599906dc":"Dowloaded and organized in excel from Yahoo Finance, indexing the date column.","05b1fd39":"##Part 1\nImporting data, discrete returns, normalization, trend visualization","3a6e0826":"##**Outline:**\n* Provided are the daily adjusted closing prices for 3 notoriously high-return stocks (AMZN, DPZ, and NFLX) and 1 cryptoasset (BTC) from May 2013-May 2019.\n\nIn this analysis I'll be:\n\n* Visually comparing their discrete growth history, after normalizing the scaling. \n* Adding the assets into 2 arbitrily-weighted portfolios and seeing what the discrete returns look like in them.\n* Calculating the log returns of the assets for risk purposes\n* Calculating the annual returns, variances, and standard deviations for each asset\n* Visually comparing the assets by return and standard deviation\n* Calculating both the covariance and correlation matrices to see each asset's relationship with one another\n* Calculating portfolio volatility for the weighted portfolios used for the return analysis \n* Calculating the diversifiable and non-diversifiable risk for each portfolio, based on the covariance of the assets\n* Visually looking at the diversifiable and non-diversifiable risks per portfolio\n","17d277e4":"Now, let's look at some risk. First I will calulate the log_returns for these assets individually, and using that information, I will calculate daily standard deviation and yearly standard deviation.\nThe formula for log returns is simply ln(P1\/P0).","fc086581":"##Part 5\nDiversifiable vs Non-Diversifiable Risk","8c838f99":"**BTC** log_return,var,and std","a6472146":"**Importing the necessary packages: **\n\n**Numpy** - used for array method calculations in this analysis: \nhttps:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.array.html\nhttps:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.dot.html\n\n**Pandas** - used originally for me to pull in the csv file in original analysis:\nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.read_csv.html\n\n**Matplotlib** - used for visual graph\nhttps:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.pyplot.show.html\n","7956f402":"Visualized Returns to Standard Deviations: As you can see with Bitcoin, higher risk usually involves higher return!","3e9e4529":"##Part 2\nlog returns, variances, standard deviations","00d49c05":"I made a few arrays of arbitrary portfolio weight. The first is all 25%, the second is a bit more conservative with bitcoin at 10% and the others at 30% each. ","26fe69d6":"Now I will normalize the data. Basically, all I'm doing here is making it so the first row of data for all 4 columns starts at 100. This way growth can be comparable for them moving forward. You can normalize the data by dividing the entire dataset by the first row and then multiplying the entire set by 100. Below is the normalization and the graph. As you can see, bitcoin is in another dimension compared to the other 3 assets.","177db3ca":"##Part 4\nPortfolio volatility and variances","263ce84e":"Next, I set up the portfolios by multiplying the annual returns with each respective weight.","50efa08c":"Portfolio Risk:\nBelow is the portfolio volatility for \n**weight_1** (all assets having 25% weights) \n**weight_2** (the portfolio volatility of the 3 stocks 30% and BTC at 10%).\n\nThe Np.dot function is essentially multiplying 3 vectors together: (ab)^2 = a^2b^2 = [aT * b * a]\n* the transposed weights vector (hence the .T after weights)\n* the annualized covariance matrix from above\n* the non transposed weights vector\n\nSide note: portfolio volatility is the same thing as portfolio standard deviation.\nIf you want to calculate portfolio variance, simply take the square root off the end.\n","bd7c5259":"Here is a visual represention of the data before normalization. This isn't helpful because all the assets start off at different places."}}