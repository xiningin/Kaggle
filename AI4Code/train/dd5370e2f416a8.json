{"cell_type":{"b94eafac":"code","9dc9c8dd":"code","227f2442":"code","f1b73fe9":"code","8a6f0c50":"code","f5a7fc3b":"code","b40df96a":"code","dcbace79":"code","d9866460":"code","7c596386":"code","f3a63161":"code","6b868eae":"code","8d475fed":"code","158d732e":"code","6141c84d":"code","38fd4413":"code","666bbd52":"code","a0912905":"code","82262e8f":"code","519b73a3":"code","1370b801":"code","5efc530c":"code","2b66160f":"markdown","0358045c":"markdown","bbfa4841":"markdown","b6c18180":"markdown","7e0ddabc":"markdown","2d026427":"markdown","1aaa9f2b":"markdown","00f7febc":"markdown","ec461cdc":"markdown","c0d3a02f":"markdown","79895ce4":"markdown","cccffeae":"markdown","44cfaf7d":"markdown","bf0c1c3b":"markdown","0683ebf5":"markdown","aad0d1d5":"markdown","3de397ae":"markdown","20b3b090":"markdown","eb1f1cbd":"markdown","88428e8c":"markdown","9f98502a":"markdown","8b4a0ca0":"markdown","b3d29e87":"markdown"},"source":{"b94eafac":"import numpy as np \nimport pandas as pd\nimport os\nfrom sklearn.metrics import f1_score\nimport seaborn as sns\nfrom scipy.misc import derivative\nimport lightgbm as lgb\nfrom sklearn.model_selection import StratifiedKFold, KFold\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score,confusion_matrix,roc_curve,roc_auc_score,classification_report","9dc9c8dd":"train = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/sample_submission.csv')","227f2442":"train.columns, test.columns","f1b73fe9":"patient_only_cols = ['patient_id', 'sex', 'age_approx', 'anatom_site_general_challenge'] \npatient_only_train, patient_only_test = train[patient_only_cols+['target']].drop_duplicates(inplace=False), test[patient_only_cols].drop_duplicates(inplace=False)","8a6f0c50":"patient_only_train.head()","f5a7fc3b":"categoricals = ['sex', 'anatom_site_general_challenge']","b40df96a":"set(patient_only_train.sex.values.tolist())","dcbace79":"matching_sex = {'female':1, 'male':0}","d9866460":"set(patient_only_train.anatom_site_general_challenge.values.tolist())","7c596386":"matching_anatom = {'head\/neck':0,\n 'lower extremity':1,\n 'oral\/genital':2,\n 'palms\/soles':3,\n 'torso':4,\n 'upper extremity':5}","f3a63161":"patient_only_train.replace(to_replace={'anatom_site_general_challenge':matching_anatom, 'sex':matching_sex}, inplace=True)\npatient_only_test.replace(to_replace={'anatom_site_general_challenge':matching_anatom, 'sex':matching_sex}, inplace=True)","6b868eae":"Cols = ['sex', 'age_approx', 'anatom_site_general_challenge']\npatient_only_train[Cols] = patient_only_train[Cols].astype('int32', errors='ignore')\npatient_only_test[Cols] = patient_only_test[Cols].astype('int32', errors='ignore')\npatient_only_train.head()","8d475fed":"def MeanAveragePrecision(y_pred, y_true):\n    y_true = y_true.get_label()\n    df = pd.DataFrame({'true': y_true, 'pred_probas': y_pred})\n    n = df.shape[0]\n    df.sort_values(by='pred_probas', ascending=False, inplace=True)\n    df['loss'] = df['true'].cumsum()\/list(range(1, n+1))\n    df = df.loc[df['true']==1, 'loss']\n    return \"MeanAveragePrecision\", max(0, df.mean(axis=0)), True","158d732e":"def DataSetLgbm(Data,trn_idx,val_idx,target,features, categorical_features=\"\"):\n    trn_data=lgb.Dataset(Data.iloc[trn_idx][features], label=Data[target].iloc[trn_idx], categorical_feature=categorical_features)\n    val_data=lgb.Dataset(Data.iloc[val_idx][features], label=Data[target].iloc[val_idx], categorical_feature=categorical_features)\n    return trn_data,val_data\n\ndef TrainSimpleLgbm(Params,DataTrain,trn_idx,val_idx,target,features, categorical_features=\"\"): \n    trn_data,val_data=DataSetLgbm(DataTrain,trn_idx,val_idx,target,features, categorical_features=categorical_features)\n    clf=lgb.train(Params, trn_data, 30000, valid_sets = [trn_data, val_data],\n                verbose_eval=100,feval = MeanAveragePrecision, early_stopping_rounds = 500)\n    return clf\n\ndef mean_average_p(y_true, y_pred_p):\n    df = pd.DataFrame({'true': y_true, 'pred_probas': y_pred_p})\n    n = df.shape[0]\n    df.sort_values(by='pred_probas', ascending=False, inplace=True)\n    df['loss'] = df['true'].cumsum()\/list(range(1, n+1))\n    df = df.loc[df['true']==1, 'loss']\n    return max(0, df.mean(axis=0))","6141c84d":"ParN1 = {\n    'bagging_freq': 1,\n    'bagging_fraction': 0.95,\n    'boost_from_average':'true',\n    'boost': 'gbdt',\n    'feature_fraction': 0.5,\n    'learning_rate': 0.04,\n    'max_depth': -1,\n    'metric':'auc',\n    'is_unbalance':'true',\n    'min_data_in_leaf':80,\n    'lambda_l1' :1,\n    'lambda_l2':1,\n    'num_leaves': 2000,\n    'colsample_bytree': 0.9,\n    'tree_learner': 'serial',\n    'objective': 'cross_entropy',\n    'verbosity': 1}\n\nParN2 = {\n    'bagging_freq': 20,\n    'bagging_fraction': 0.9,\n    'boost_from_average':'true',\n    'boost': 'gbdt',\n    'feature_fraction': 0.9,\n    'learning_rate': 0.04,\n    'max_depth': -1,\n    'metric':'auc',\n    'is_unbalance':'true',\n    'lambda_l1' :10,\n    'lambda_l2':10,\n    'num_leaves': 7,\n    'colsample_bytree': 0.7,\n    'tree_learner': 'serial',\n    'objective': 'cross_entropy',\n    'verbosity': 1}","38fd4413":"test_preds = []\nfolds = StratifiedKFold(n_splits=5, shuffle=True, random_state=20_01_1998)\nfor fold,(trn_idx , val_idx) in enumerate(folds.split(patient_only_train[Cols],patient_only_train['target'])):\n    print(f'********************* Fitting on Fold {fold+1} ... ******************')\n    clf1=TrainSimpleLgbm(ParN1,patient_only_train,trn_idx,val_idx,\"target\",Cols, categoricals)\n    clf2=TrainSimpleLgbm(ParN2,patient_only_train,trn_idx,val_idx,\"target\",Cols, categoricals)\n    \n    pred_oof1 = clf1.predict(patient_only_train.iloc[val_idx][Cols], num_iteration=clf1.best_iteration)\n    pred_test1 = clf1.predict(patient_only_test[Cols], num_iteration=clf1.best_iteration)\n    test_preds.append(pred_test1)\n    pred_oof2 = clf2.predict(patient_only_train.iloc[val_idx][Cols], num_iteration=clf2.best_iteration)\n    pred_test2 = clf1.predict(patient_only_test[Cols], num_iteration=clf2.best_iteration)\n    test_preds.append(pred_test2)\n    mean_pred_oof=0.5*pred_oof1+0.5*pred_oof2\n    \n    m1=mean_average_p(patient_only_train[\"target\"].iloc[val_idx], pred_oof1)\n    m2=mean_average_p(patient_only_train[\"target\"].iloc[val_idx], pred_oof2)\n    m3=mean_average_p(patient_only_train[\"target\"].iloc[val_idx], mean_pred_oof)\n    \n    print(f' Mean Average M1 : {m1}  , M2 : {m2}   M3 : {m3}')\n    \n    \n    pred_oof1=(pred_oof1>=0.5).astype(int)\n    pred_oof2=(pred_oof2>=0.5).astype(int)\n    mean_pred_oof=(mean_pred_oof>=0.5).astype(int)\n    \n    print(\"*************  CR Param 1 *************************\")\n    print(classification_report(patient_only_train[\"target\"].iloc[val_idx],pred_oof1))\n    \n    print(\"*************  CR Param 2 *************************\")\n    print(classification_report(patient_only_train[\"target\"].iloc[val_idx],pred_oof2))\n    \n    print(\"*************  CR Mean *************************\")\n    print(classification_report(patient_only_train[\"target\"].iloc[val_idx],mean_pred_oof))\n   ","666bbd52":"feature_importance = pd.DataFrame({'Value':clf1.feature_importance(),'Feature':Cols})\nplt.figure()\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_importance.sort_values(by=\"Value\", ascending=False))\nplt.title('Features Importance')\nplt.tight_layout()\nplt.show()","a0912905":"train.groupby(['anatom_site_general_challenge'])['target'].mean().sort_values(ascending=False)","82262e8f":"patient_only_test['target'] = np.stack(test_preds, axis=1).mean(axis=1)","519b73a3":"sample_submission = submission[['image_name']].merge(test[['image_name', 'patient_id']].merge(patient_only_test[['patient_id', 'target']], how='outer', on='patient_id'), how='left', on='image_name').drop(columns='patient_id', inplace=False).drop_duplicates(subset='image_name', inplace=False)","1370b801":"sample_submission.isna().describe()","5efc530c":"sample_submission.to_csv('sample_submission.csv', index=False)","2b66160f":"Let's take a look at the feature importance. The most important feature seem to be, by far, the body part in which the melanoma is located.","0358045c":"# Submission","bbfa4841":"We will make use only of columns that are present both in train and test. It would be interesting, as future imporvement, to try and predict the column diagnosis in order to use it as an instrumental variable and help predict the target.","b6c18180":"# Please upvote this kernel if you found it interesting !","7e0ddabc":"Even if this competition's metric is the AUC, I always find it better to optimize on the mean average precision, especially when classes are extremely unbalanced. Mean Average Precision is more sensible to improvements of respective scoring at the top of the ranking than at the bottom, contrary to AUC which is indifferent.","2d026427":"## Defining useful variables","1aaa9f2b":"## Pre-processing categorical variables","00f7febc":"We will introduce to set of parameters for 2 different lgbms. Feel free to tamper with those and makeyour own experiments !","ec461cdc":"We had kept the `patient_id` column only to be able to perform the future merge of our results. Let's do it in two steps : first, adding our predictions to the `patient_only_test` database where we have `patient_id`, then merging it with the `test` database to match with the `image_name`, and finally using it to fill the `sample_submission` file.","c0d3a02f":"This first starter notebook is intended to give you an insight of building a model with only patient-level information (no image processing for the moment !). This simple LightGBM baseline can also be used as a more general pipeline for other projects :)","79895ce4":"If we're interested in what part of the body it's actually the most dangerous to get a melanoma, let's make a brief analysis :","cccffeae":"Mapping those columns to their integer matched values :","44cfaf7d":"LightGBM requires to specify, and transform to integers, all categorical variables. Note : we don't care about missing values, LGBM handles them quite well :)","bf0c1c3b":"Finally, let's define the columns we will use for prediction :","0683ebf5":"# LightGBM Pipeline","aad0d1d5":"# Start with preparing the patient-only data","3de397ae":"# Hi everyone !","20b3b090":"What values do we have in the `anatom_site_general_challenge` column ?","eb1f1cbd":"Matching them to integers :","88428e8c":"What values do we have in the `sex` column ?","9f98502a":"It seems that it is on the head or neck that you get the most malignant melanoma, with 3 times as much chances as when it is located on palms or soles !","8b4a0ca0":"Matching them to integers :","b3d29e87":"Great, the merging has performed well, we have no missing values !"}}