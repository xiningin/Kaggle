{"cell_type":{"46cbde96":"code","8c6774b3":"code","f201b9d3":"code","9e788528":"code","0a6c6c30":"code","20efd7d9":"code","267b0621":"code","204ac90d":"code","1dc69b61":"code","561ef51b":"code","58e234bd":"code","04497022":"code","6a716d61":"code","3921513f":"code","db49e80c":"code","f58ffb0a":"code","0f0e273c":"code","3c04cda8":"code","0e10dcfe":"code","2ae48f76":"code","ff4ec91e":"code","40e0a44c":"code","ed0bb12d":"code","d37da7db":"code","b8cc61d3":"code","6efd6009":"code","82860051":"code","b68493b5":"code","b3ae52f2":"code","63db257d":"code","f0a6dbf3":"code","26e6b68f":"code","9fc899aa":"code","ae8a0fbd":"code","18902ab5":"code","7188fe0c":"code","9e8fe89d":"code","3f078e22":"code","f41c90e4":"code","f2d3f43a":"code","339d9ef9":"code","03433e12":"code","642e80da":"code","c15c0752":"markdown","63c0eecf":"markdown","4ee8a6e1":"markdown","b9901d62":"markdown","5a3061e9":"markdown","f430d73e":"markdown","f28ea7b3":"markdown","fecfc5a4":"markdown","347e9bc5":"markdown","5c61553f":"markdown","7193557e":"markdown","4dab2bc9":"markdown","2b02e19a":"markdown","66dafae9":"markdown","5811ad7e":"markdown","2096da01":"markdown","f9a3f3a0":"markdown","d797577e":"markdown","99409813":"markdown","1296df8c":"markdown","1706af28":"markdown","61e32c41":"markdown","3d67ba84":"markdown","ecad650e":"markdown","3f67f265":"markdown","c5bbf7dd":"markdown","1552889c":"markdown","cfe2c416":"markdown","c1e9aac5":"markdown","59693e3f":"markdown","e55b4a65":"markdown"},"source":{"46cbde96":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn import linear_model, ensemble\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\nimport tensorflow as tf\n\nfrom tqdm.notebook import tqdm\n\nimport os\nfrom PIL import Image","8c6774b3":"train = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/train.csv')\ntest = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/test.csv')\nsubmission = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/sample_submission.csv')","f201b9d3":"train.head()","9e788528":"train.info()","0a6c6c30":"test.head()","20efd7d9":"test.info()","267b0621":"train.drop_duplicates(keep=False, inplace=True, subset=['Patient','Weeks'])","204ac90d":"submission['Patient'] = (\n    submission['Patient_Week']\n    .apply(\n        lambda x:x.split('_')[0]\n    )\n)\n\nsubmission['Weeks'] = (\n    submission['Patient_Week']\n    .apply(\n        lambda x: int(x.split('_')[-1])\n    )\n)\n\nsubmission =  submission[['Patient','Weeks', 'Confidence','Patient_Week']]\n\nsubmission = submission.merge(test.drop('Weeks', axis=1), on=\"Patient\")","1dc69b61":"submission.head()","561ef51b":"train['Dataset'] = 'train'\ntest['Dataset'] = 'test'\nsubmission['Dataset'] = 'submission'","58e234bd":"all_data = train.append([test, submission])\n\nall_data = all_data.reset_index()\nall_data = all_data.drop(columns=['index'])","04497022":"all_data.head()","6a716d61":"train_patients = train.Patient.unique()","3921513f":"fig, ax = plt.subplots(5, 1, figsize=(10, 20))\n\nfor i in range(5):\n    patient_log = train[train['Patient'] == train_patients[i]]\n\n    ax[i].set_title(train_patients[i])\n    ax[i].plot(patient_log['Weeks'], patient_log['FVC'])","db49e80c":"all_data['FirstWeek'] = all_data['Weeks']\nall_data.loc[all_data.Dataset=='submission','FirstWeek'] = np.nan\nall_data['FirstWeek'] = all_data.groupby('Patient')['FirstWeek'].transform('min')","f58ffb0a":"first_fvc = (\n    all_data\n    .loc[all_data.Weeks == all_data.FirstWeek][['Patient','FVC']]\n    .rename({'FVC': 'FirstFVC'}, axis=1)\n    .groupby('Patient')\n    .first()\n    .reset_index()\n)\n\nall_data = all_data.merge(first_fvc, on='Patient', how='left')","0f0e273c":"all_data.head()","3c04cda8":"all_data['WeeksPassed'] = all_data['Weeks'] - all_data['FirstWeek']","0e10dcfe":"all_data.head()","2ae48f76":"def calculate_height(row):\n    if row['Sex'] == 'Male':\n        return row['FirstFVC'] \/ (27.63 - 0.112 * row['Age'])\n    else:\n        return row['FirstFVC'] \/ (21.78 - 0.101 * row['Age'])\n\nall_data['Height'] = all_data.apply(calculate_height, axis=1)","ff4ec91e":"all_data.head()","40e0a44c":"all_data = pd.concat([\n    all_data,\n    pd.get_dummies(all_data.Sex),\n    pd.get_dummies(all_data.SmokingStatus)\n], axis=1)\n\nall_data = all_data.drop(columns=['Sex', 'SmokingStatus'])","ed0bb12d":"all_data.head()","d37da7db":"def scale_feature(series):\n    return (series - series.min()) \/ (series.max() - series.min())\n\nall_data['Weeks'] = scale_feature(all_data['Weeks'])\nall_data['Percent'] = scale_feature(all_data['Percent'])\nall_data['Age'] = scale_feature(all_data['Age'])\nall_data['FirstWeek'] = scale_feature(all_data['FirstWeek'])\nall_data['FirstFVC'] = scale_feature(all_data['FirstFVC'])\nall_data['WeeksPassed'] = scale_feature(all_data['WeeksPassed'])\nall_data['Height'] = scale_feature(all_data['Height'])","b8cc61d3":"feature_columns = [\n    'Percent',\n    'Age',\n    'FirstWeek',\n    'FirstFVC',\n    'WeeksPassed',\n    'Height',\n    'Female',\n    'Male', \n    'Currently smokes',\n    'Ex-smoker',\n    'Never smoked',\n]","6efd6009":"train = all_data.loc[all_data.Dataset == 'train']\ntest = all_data.loc[all_data.Dataset == 'test']\nsubmission = all_data.loc[all_data.Dataset == 'submission']","82860051":"train[feature_columns].head()","b68493b5":"model = linear_model.HuberRegressor(max_iter=200)","b3ae52f2":"model.fit(train[feature_columns], train['FVC'])","63db257d":"predictions = model.predict(train[feature_columns])","f0a6dbf3":"plt.bar(train[feature_columns].columns.values, model.coef_)\nplt.xticks(rotation=90)\nplt.show()","26e6b68f":"mse = mean_squared_error(\n    train['FVC'],\n    predictions,\n    squared=False\n)\n\nmae = mean_absolute_error(\n    train['FVC'],\n    predictions\n)\n\nprint('MSE Loss: {0:.2f}'.format(mse))\nprint('MAE Loss: {0:.2f}'.format(mae))","9fc899aa":"def competition_metric(trueFVC, predFVC, predSTD):\n    clipSTD = np.clip(predSTD, 70 , 9e9)  \n    deltaFVC = np.clip(np.abs(trueFVC - predFVC), 0 , 1000)  \n    return np.mean(-1 * (np.sqrt(2) * deltaFVC \/ clipSTD) - np.log(np.sqrt(2) * clipSTD))\n    \n\nprint(\n    'Competition metric: ', \n    competition_metric(train['FVC'].values, predictions, 285) \n)","ae8a0fbd":"train['prediction'] = predictions","18902ab5":"plt.scatter(predictions, train['FVC'])\n\nplt.xlabel('predictions')\nplt.ylabel('FVC (labels)')\nplt.show()","7188fe0c":"delta = predictions - train['FVC']\nplt.hist(delta, bins=20)\nplt.show()","9e8fe89d":"fig, ax = plt.subplots(5, 1, figsize=(10, 20))\n\nfor i in range(5):\n    patient_log = train[train['Patient'] == train_patients[i]]\n\n    ax[i].set_title(train_patients[i])\n    ax[i].plot(patient_log['WeeksPassed'], patient_log['FVC'], label='truth')\n    ax[i].plot(patient_log['WeeksPassed'], patient_log['prediction'], label='prediction')\n    ax[i].legend()","3f078e22":"submission[feature_columns].head()","f41c90e4":"sub_predictions = model.predict(submission[feature_columns])\nsubmission['FVC'] = sub_predictions","f2d3f43a":"test_patients = list(submission.Patient.unique())\nfig, ax = plt.subplots(5, 1, figsize=(10, 20))\n\nfor i in range(5):\n    patient_log = submission[submission['Patient'] == test_patients[i]]\n\n    ax[i].set_title(test_patients[i])\n    ax[i].plot(patient_log['WeeksPassed'], patient_log['FVC'])","339d9ef9":"submission = submission[['Patient_Week', 'FVC']]\n\nsubmission['Confidence'] = 285","03433e12":"submission.to_csv('submission.csv', index=False)","642e80da":"submission.head()","c15c0752":"Merge the datasets into one and reset the index.","63c0eecf":"## Evaluate\n\nLet's begin by having a look at the models weights. This gives us a good indication of what features are driving the models predictions.","4ee8a6e1":"## Feature Engineering\n\nThere is some good scope for engineering new features for this model. ","b9901d62":"With the model loaded, insert the features and labels for training.","5a3061e9":"Mark each example in each dataset with the name of the dataset they come from. This enables me to quickly split the dataset back up into the three component pieces at the end of the notebook.","f430d73e":"### Scale features\n\nNow scale all the features to get them onto the same range of numbers (0-1).","f28ea7b3":"So there's not a huge volume of tabular data. 1.5k of training examples with only 5 columns (weeks, percent, age, sex, smoking status) to construct features from.","fecfc5a4":"Add the predictions to the submission dataframe.","347e9bc5":"## Model\n\nAs I mentioned at the start of the notebook I didn't intend to experiment too much with model selection in this notebook so I have stuck with a simple Linear Regressor from SKLearn. While these non-deep models don't usually produce as accurate results as deep models they are super fast to train and easy to evaluate. This is great for notebooks focussing primarily on features.","5c61553f":"## Load data\n\nLet's begin by loading the data.","7193557e":"Specify what columns will be used as features. This is for easy filtering of the datasets later.","4dab2bc9":"When I first saw the osic pulmonary fibrosis competition I thought it looked like quite an interesting competition for its mix of tabular and image data and trying to produce a forecast based on that. This provides scope to try all sorts of things such as feature engineering, image embedding models and time series models. To get started I have focused on the tabular data only which as it turns out can get us quite far before even touching the images. I've tried to stay away from spending too much time on model selection and instead opted for feature experimentation.\n\nBut first a quick overview (disclaimer I'm not a medical expert so apologies if I get any of the medical stuff wrong). Pulmonary Fibrosis is a lung disease that causes the lungs to decline over time. The rate of decline can range between very rapid and very slow. We can measure the diseases progress through [FVC](https:\/\/lunginstitute.com\/blog\/fev1-and-fvc\/#:~:text=The%20forced%20vital%20capacity%20(FVC,the%20severity%20of%20the%20condition)) (Forced Vital Capacity) which involves the patient taking a deep breath and blowing as hard as they can into a tube. The amount of air they blow out is the FVC measured in ml. \n\nSo the challenge is when given a starting FVC for a patient to forecast the decline in the FVC value for all the upcoming weeks.","2b02e19a":"And write the submission to file.","66dafae9":"## Quick data analysis\n\nI think it's worth having a look at how the FVC (label) value declines for a sample of patients in the training dataset. Let's pick the first five in the data and plot the decline of the FVC.","5811ad7e":"### First FVC and First Week\nSome useful features might be the first FVC recorded per patient and the week it was recorded in","2096da01":"So the decline is kinda linear as it does generally trend down over time. There are some spikes back up along the way which could cause a few issues. However this means that a simple linear model could have a good go at producing forecasts on this challenge as the main thing we need to do is predict the rate of decline for a patient. Like a trend line for these charts.","f9a3f3a0":"And take a look at the features that will be used to train the model.","d797577e":"### Categorical columns\n\nThe sex and smoking status columns are categorical columns that need some transformation to turn them into numbers. Pandas get dummies makes this easy to achieve.","99409813":"Plot the forecasted FVC for five patients in the test set.","1296df8c":"Finally take the first five patients as a sample and compare the true FVC readings against the models predicted FVC readings.","1706af28":"## Merge datasets\n\nI've learned recently that it is good practice to merge the train, validation and test sets at the start of a notebook. This ensures that exactly the same transformation is applied to every example. First though, I'll make sure there are no duplicates in the training dataset.","61e32c41":"Make predictions","3d67ba84":"Let's also include a scatterplot and histogram to see an overview of how close the predictions are to the labels.","ecad650e":"Found code for competition metric [here](https:\/\/www.kaggle.com\/titericz\/tabular-simple-eda-linear-model#Calculate-competition-metric)","3f67f265":"Drop the surplus columns not needed for submission and add a dummy confidence column.","c5bbf7dd":"### Patient height\n\nApparently the height of a patient is an important variable when predicting FVC. Maybe tall people have larger lungs and thus more air to exhale. Thanks to Srikanth Potukuchi whose [notebook](https:\/\/www.kaggle.com\/srikanthpotukuchi\/osic-random-forest-new-height-extracted) showed me how to estimate a patients height using their FVC.","1552889c":"While mean squared error isn't the competition metric it is a simple loss metric to help understand how close the models predictions are to the actual labels. The limitation of this error number though is that it can't be too close to zero as that would indicate over-fitting a model that should only be producing a trend line.","cfe2c416":"### Weeks Passed\nThis feature measures how many weeks have passed since the patients first FVC reading.","c1e9aac5":"### Split dataframe\n\nSplit the data back into the three dataframes they started as.","59693e3f":"## Submission\n\nWith the model trained we can use it to make predictions. As the submission dataframe went through the same transformation as the train dataset it is ready for the model to infer on.","e55b4a65":"Then form the submission dataset. The test dataset needs expanding out across the 146 weeks per patient that the competition requires. This can be achieved by joining it to the sample submission."}}