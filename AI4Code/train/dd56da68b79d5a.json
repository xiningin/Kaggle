{"cell_type":{"0ef629b0":"code","5c8b2471":"code","73ac8f66":"code","290ac8dd":"code","c479818f":"code","e1cf765e":"code","bada2efe":"code","7d244935":"code","09e3a00f":"code","9b92f7a2":"code","1e14366d":"code","4aa3f91d":"code","15502dd1":"code","3ebdab61":"code","a396c04c":"code","8600e7fa":"code","ba546e18":"code","80418742":"markdown","57ade921":"markdown"},"source":{"0ef629b0":"# import useful libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5c8b2471":"# load the dataset\n\ndata= pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")\ndata","73ac8f66":"data.info()","290ac8dd":"# lets drop the two columns that doesnt contribute to the data\ncolumn = ['id', 'Unnamed: 32']\nnew_data = data.drop(column, axis = 1)","c479818f":"new_data.isnull().sum().sum()","e1cf765e":"new_data.describe()","bada2efe":"# visualizing the diagnosis column to be sure it isnt imbanced\nsns.countplot(new_data['diagnosis'])","7d244935":"# visulaize the correlation between the dataset\nplt.figure(figsize= (10,10))\nsns.heatmap(new_data.corr())","09e3a00f":"# split into target and features\n\nX = new_data.drop('diagnosis', axis = 1)\ny = new_data['diagnosis']","9b92f7a2":"# splitting the data set into train and test set\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y , test_size= 0.3, random_state = 42)","1e14366d":"X_train.shape","4aa3f91d":"X_test.shape","15502dd1":"# logistic regression model\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import LinearSVC\n\n# using a pipeline to make the code neater, with a feature selection and classigication model\nclf = Pipeline([\n  ('feature_selection', SelectFromModel(LinearSVC(C=0.01, penalty=\"l1\", dual=False))),\n  ('classification', LogisticRegression())\n])\nclf.fit(X, y)","3ebdab61":"pred= clf.predict(X_test)","a396c04c":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\nprint(classification_report(y_test, pred))","8600e7fa":"# view the classification result with confusion matrix\ncm = confusion_matrix(y_test, pred)\ncm","ba546e18":"# visualize the confusion matrix with a heatmap\n\nsns.heatmap(cm, annot= True, fmt= 'g')","80418742":"Based on the model, the accuracy is about 97%. There is a false positive of about 3 and False negatives of 2.\nGenerally, the model performed well.","57ade921":"### Build the classification model"}}