{"cell_type":{"9765a43a":"code","b7bc0206":"code","2c343ea7":"code","21d5be79":"code","ff6785d5":"code","e77894dc":"code","259c6321":"code","800e034d":"code","5383fc4d":"code","4bd6325d":"code","e2f70134":"code","9d1d5d0f":"code","31c4bf64":"markdown","5c531730":"markdown","7e1d5893":"markdown","38e0718d":"markdown","31d86b4d":"markdown","95a150cc":"markdown","9a51bd21":"markdown","a4697764":"markdown","cf6e5288":"markdown"},"source":{"9765a43a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom matplotlib import dates\nimport datetime\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","b7bc0206":"train = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/train.csv')\ntest = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/test.csv')","2c343ea7":"print (\"How many Province on train set ==> \" +str(len(train['Province\/State'].unique())))\nprint (\"How many country on train set ==> \" +str(len(train['Country\/Region'].unique())))\nprint (\"Date period for train set ==> \" +train['Date'].unique()[0]+\" to \"+train['Date'].unique()[-1])\nprint (\"How many Province on test set ==> \" +str(len(test['Province\/State'].unique())))\nprint (\"How many country on test set ==> \" +str(len(test['Country\/Region'].unique())))\nprint (\"Date period for test set ==> \" +test['Date'].unique()[0]+\" to \"+test['Date'].unique()[-1])","21d5be79":"train['Date_datetime'] = train['Date'].apply(lambda x: (datetime.datetime.strptime(x, '%Y-%m-%d')))","ff6785d5":"train.head()","e77894dc":"def plot_trend_by_date(df,value ='ConfirmedCases',title=None, mode='subplot'):\n    ax = plt.gca()\n    xaxis = df['Date_datetime'].tolist()\n    if value == 'ConfirmedCases':\n        yaxis = df['ConfirmedCases']\n    else:\n        yaxis = df['Fatalities']\n        \n    xaxis = dates.date2num(xaxis)\n    hfmt = dates.DateFormatter('%m\\n%d')\n    ax.xaxis.set_major_formatter(hfmt)\n\n    plt.xlabel('Date')\n    if value == 'ConfirmedCases':\n        plt.ylabel('ConfirmedCases')\n    else:\n        plt.ylabel('Fatalities')\n    plt.title(title)\n    plt.plot(xaxis, yaxis)\n    plt.tight_layout()\n\n    plt.show()","259c6321":"for country in train['Country\/Region'].unique():\n    country_pd_train = train[train['Country\/Region']==country]\n    if country_pd_train['Province\/State'].isna().unique()==True:\n        plt_title = country+' ConfirmedCase'\n        plot_trend_by_date(country_pd_train,value = 'ConfirmedCases',title = plt_title)\n    else:\n        state_count = len(country_pd_train['Province\/State'].unique())\n        row = state_count\/\/4+1\n        column = 4\n        fig =plt.figure(figsize = (4*6.4,row*4.8))\n        index = 1\n        for state in country_pd_train['Province\/State'].unique():\n            state_pd = country_pd_train[country_pd_train['Province\/State']==state]\n            plt_title = country+'  '+state+' ConfirmedCases'\n            ax = fig.add_subplot(row,column,index)\n            xaxis = state_pd['Date_datetime'].tolist()\n            yaxis = state_pd['ConfirmedCases']\n            xaxis = dates.date2num(xaxis)\n            hfmt = dates.DateFormatter('%m\\n%d')\n            ax.xaxis.set_major_formatter(hfmt)\n\n            plt.xlabel('Date')\n            plt.ylabel('ConfirmedCases')\n            plt.title(plt_title)\n            ax.plot(xaxis, yaxis)\n            index += 1\n        plt.show() \n            #plot_trend_by_date(state_pd,value = 'ConfirmedCases',title = plt_title)","800e034d":"for country in train['Country\/Region'].unique():\n    country_pd_train = train[train['Country\/Region']==country]\n    if country_pd_train['Province\/State'].isna().unique()==True:\n        plt_title = country+' Fatalities'\n        plot_trend_by_date(country_pd_train,value = 'Fatalities',title = plt_title)\n    else:\n        state_count = len(country_pd_train['Province\/State'].unique())\n        row = state_count\/\/4+1\n        column = 4\n        fig =plt.figure(figsize = (4*6.4,row*4.8))\n        index = 1\n        for state in country_pd_train['Province\/State'].unique():\n            state_pd = country_pd_train[country_pd_train['Province\/State']==state]\n            plt_title = country+'  '+state+' Fatalities'\n            ax = fig.add_subplot(row,column,index)\n            xaxis = state_pd['Date_datetime'].tolist()\n            yaxis = state_pd['Fatalities']\n            xaxis = dates.date2num(xaxis)\n            hfmt = dates.DateFormatter('%m\\n%d')\n            ax.xaxis.set_major_formatter(hfmt)\n\n            plt.xlabel('Date')\n            plt.ylabel('Fatalities')\n            plt.title(plt_title)\n            ax.plot(xaxis, yaxis)\n            index += 1\n        plt.show() \n            #plot_trend_by_date(state_pd,value = 'ConfirmedCases',title = plt_title)","5383fc4d":"from sklearn import linear_model\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LinearRegression\n\nfor country in train['Country\/Region'].unique():\n    print ('training model for country ==>'+country)\n    country_pd_train = train[train['Country\/Region']==country]\n    country_pd_test = test[test['Country\/Region']==country]\n    if country_pd_train['Province\/State'].isna().unique()==True:\n        x = np.array(range(len(country_pd_train))).reshape((-1,1))\n        y = country_pd_train['ConfirmedCases']\n        model = Pipeline([('poly', PolynomialFeatures(degree=2)),\n                         ('linear', LinearRegression(fit_intercept=False))])\n        model = model.fit(x, y)\n        predict_x = (np.array(range(len(country_pd_test)))+50).reshape((-1,1))\n        test.loc[test['Country\/Region']==country,'ConfirmedCases'] = model.predict(predict_x)\n    else:\n        for state in country_pd_train['Province\/State'].unique():\n            state_pd = country_pd_train[country_pd_train['Province\/State']==state] \n            state_pd_test = country_pd_test[country_pd_test['Province\/State']==state] \n            x = np.array(range(len(state_pd))).reshape((-1,1))\n            y = state_pd['ConfirmedCases']\n            model = Pipeline([('poly', PolynomialFeatures(degree=2)),\n                         ('linear', LinearRegression(fit_intercept=False))])\n            model = model.fit(x, y)\n            predict_x = (np.array(range(len(state_pd_test)))+50).reshape((-1,1))\n            test.loc[(test['Country\/Region']==country)&(test['Province\/State']==state),'ConfirmedCases'] = model.predict(predict_x)","4bd6325d":"for country in train['Country\/Region'].unique():\n    print ('training model for country ==>'+country)\n    country_pd_train = train[train['Country\/Region']==country]\n    country_pd_test = test[test['Country\/Region']==country]\n    if country_pd_train['Province\/State'].isna().unique()==True:\n        x = np.array(range(len(country_pd_train))).reshape((-1,1))\n        y = country_pd_train['Fatalities']\n        model = Pipeline([('poly', PolynomialFeatures(degree=2)),\n                         ('linear', LinearRegression(fit_intercept=False))])\n        model = model.fit(x, y)\n        predict_x = (np.array(range(len(country_pd_test)))+50).reshape((-1,1))\n        test.loc[test['Country\/Region']==country,'Fatalities'] = model.predict(predict_x)\n    else:\n        for state in country_pd_train['Province\/State'].unique():\n            state_pd = country_pd_train[country_pd_train['Province\/State']==state] \n            state_pd_test = country_pd_test[country_pd_test['Province\/State']==state] \n            x = np.array(range(len(state_pd))).reshape((-1,1))\n            y = state_pd['Fatalities']\n            model = Pipeline([('poly', PolynomialFeatures(degree=2)),\n                         ('linear', LinearRegression(fit_intercept=False))])\n            model = model.fit(x, y)\n            predict_x = (np.array(range(len(state_pd_test)))+50).reshape((-1,1))\n            test.loc[(test['Country\/Region']==country)&(test['Province\/State']==state),'Fatalities'] = model.predict(predict_x)","e2f70134":"submit = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/submission.csv')\nsubmit['Fatalities'] = test['Fatalities'].astype('int')\nsubmit['ConfirmedCases'] = test['ConfirmedCases'].astype('int')\nsubmit.to_csv('submission.csv',index=False)","9d1d5d0f":"submit.head()","31c4bf64":"### There are time overlap for train\/test set ==> 2020-03-12 to 2020-03-18\nSo we have 03-12 to 03-18's answer on train set, submit will freeze on **2020-03-26**, we need to predict how many comfirmedcase and fatalities on **2020-03-26** to **2020-04-23** time period, LB will keep update until **2020-04-23**","5c531730":"### Plot ConfirmedCase Trends","7e1d5893":"### Trained the normal linear regression model to predict\n### Fatalities","38e0718d":"## Check the data feature.\nLet's check below feature on train\/test set\n* date period\n* country count","31d86b4d":"## Load train\/test dataset","95a150cc":"### Trained the normal linear regression model to predict\n### ConfirmedCase","9a51bd21":"## Plot trend of country ConfirmedCase and Fatalities by days.","a4697764":"### Plot Fatalities Trends","cf6e5288":"## Submit result"}}