{"cell_type":{"615d999b":"code","c1b12248":"code","4ca097c1":"code","3bc9588f":"code","08fb902b":"code","da6193a5":"code","1c0d3706":"code","ba967b34":"code","d5f0b4e9":"code","17121aff":"code","2db03daa":"code","ebbbe659":"code","10fefe0f":"code","2dcd4a77":"code","c6b916fc":"code","efff0e6c":"code","b7b5f01d":"code","33edaced":"code","ce811053":"code","b408f7e6":"code","d2bf48ee":"code","cc795275":"code","26255941":"code","5d20fc80":"code","5e646610":"code","27fdfb1f":"code","07559aa4":"code","1c6a9ea4":"code","e51caf8b":"code","56f83860":"code","3d38d671":"markdown","e88c717b":"markdown","007d2e13":"markdown","97fc3110":"markdown","d0c38a77":"markdown","2ab41dc2":"markdown","c1ed5ec4":"markdown","790ede14":"markdown","e8677c64":"markdown","9f5ca55b":"markdown","bdf462bd":"markdown","a47aae50":"markdown","1238cbae":"markdown","39439fe8":"markdown","22cefa2f":"markdown","d69920af":"markdown","b836270c":"markdown"},"source":{"615d999b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n%matplotlib inline\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import LabelEncoder\nimport time\nimport os\nfrom itertools import product\nfrom pylab import rcParams\nfrom sklearn.linear_model import Ridge\nfrom sklearn.metrics import mean_squared_log_error\nfrom statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess, Fourier","c1b12248":"import os\nfor dirname , _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname,filename))\n\ndatafolder ='..\/input\/tabular-playground-series-jan-2022\/'","4ca097c1":"df_test= pd.read_csv(os.path.join(datafolder,'test.csv'))\ndf_train=pd.read_csv(os.path.join(datafolder,'train.csv'))\nsample_submission=pd.read_csv(os.path.join(datafolder,'sample_submission.csv'))","3bc9588f":"df_train.head()","08fb902b":"from IPython.core.display import HTML\n\ndef multi_table(table_list):\n    ''' Accepts a list of IpyTable objects and returns a table which contains each IpyTable in a cell\n    '''\n    return HTML(\n        '<table><tr style=\"background-color:white;\">' + \n        ''.join(['<td>' + table._repr_html_() + '<\/td>' for table in table_list]) +\n        '<\/tr><\/table>')","da6193a5":"clean=df_train.dropna()","1c0d3706":"clean.columns","ba967b34":"clean_nunique = {var: pd.DataFrame(clean[var].value_counts()) \n              for var in {'row_id' ,'date' ,'country', 'store' , 'product', \n                          'num_sold'}}","d5f0b4e9":"multi_table=([clean_nunique['row_id'],clean_nunique['date'],clean_nunique['country'], \n            clean_nunique['store'],clean_nunique['product'],clean_nunique['num_sold']])\n","17121aff":"multi_table ","2db03daa":" MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nLINEWIDTH=2\nALPHA=.6\n\ndfp = clean[['row_id','date' ,'country','store','product','num_sold']].copy()\n","ebbbe659":"# Extract the year and the month from the date column into indepedent columns\ndfp['date']  = pd.to_datetime(dfp['date'])\ndfp['year_month']  = dfp['date'].apply(lambda x : x.strftime('%Y-%m'))\ndfp['year']  = dfp['date'].dt.year\ndfp['month'] = dfp['date'].dt.month\ndfp","10fefe0f":"dfp_trend = dfp.groupby(['year','month']).sum()['num_sold'].reset_index()","2dcd4a77":"dfp_trend_country = dfp.groupby(['year','month','country']).sum()['num_sold'].reset_index()","c6b916fc":"dfp_trend_country ","efff0e6c":"plt.figure(figsize=(16,6))\n# Plot the sales from the year 2015 till 2018\nplt.plot(MONTHS, dfp_trend[dfp_trend.year==2015].num_sold, '-o', color='steelblue', linewidth=LINEWIDTH, alpha=ALPHA,label='2015')\nplt.plot(MONTHS, dfp_trend[dfp_trend.year==2016].num_sold, '-o', color='seagreen', linewidth=LINEWIDTH, alpha=ALPHA,label='2016')\nplt.plot(MONTHS, dfp_trend[dfp_trend.year==2017].num_sold, '-o', color='pink', linewidth=LINEWIDTH, alpha=ALPHA,label='2017')\nplt.plot(MONTHS, dfp_trend[dfp_trend.year==2018].num_sold, '-o', color='blue', linewidth=LINEWIDTH, alpha=ALPHA,label='2018')\n\nax = plt.gca()\nax.set_title('Sales per month')\nax.set_ylabel('Sales in dollars')\nax.grid(axis='y', color='gray', alpha=.2)\n\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.legend(loc=2, title='Legend')\nplt.show()","b7b5f01d":"dfp_trend_country2=dfp_trend_country[dfp_trend_country.country=='Finland']\ndfp_trend_country2","33edaced":"# for Finland\nplt.figure(figsize=(16,6))\n# Plot the sales of the year 2015\nplt.plot(MONTHS, dfp_trend_country2[dfp_trend_country2.year==2015].num_sold, '-o', color='steelblue', linewidth=LINEWIDTH, alpha=ALPHA,label='2015')\nplt.plot(MONTHS, dfp_trend_country2[dfp_trend_country2.year==2016].num_sold, '-o', color='seagreen', linewidth=LINEWIDTH, alpha=ALPHA,label='2016')\nplt.plot(MONTHS, dfp_trend_country2[dfp_trend_country2.year==2017].num_sold, '-o', color='pink', linewidth=LINEWIDTH, alpha=ALPHA,label='2017')\nplt.plot(MONTHS, dfp_trend_country2[dfp_trend_country2.year==2018].num_sold, '-o', color='blue', linewidth=LINEWIDTH, alpha=ALPHA,label='2018')\n\nax = plt.gca()\nax.set_title('FINLAND SALES PER MONTH')\nax.set_ylabel('Sales in dollars')\nax.grid(axis='y', color='gray', alpha=.2)\n\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.legend(loc=2, title='Legend')\nplt.show()","ce811053":"dfp_trend_country3=dfp_trend_country[dfp_trend_country.country=='Norway']\ndfp_trend_country3","b408f7e6":"# for NORWAY\nplt.figure(figsize=(16,6))\n# Plot the sales of the year 2015\nplt.plot(MONTHS, dfp_trend_country3[dfp_trend_country3.year==2015].num_sold, '-o', color='steelblue', linewidth=LINEWIDTH, alpha=ALPHA,label='2015')\nplt.plot(MONTHS, dfp_trend_country3[dfp_trend_country3.year==2016].num_sold, '-o', color='seagreen', linewidth=LINEWIDTH, alpha=ALPHA,label='2016')\nplt.plot(MONTHS, dfp_trend_country3[dfp_trend_country3.year==2017].num_sold, '-o', color='pink', linewidth=LINEWIDTH, alpha=ALPHA,label='2017')\nplt.plot(MONTHS, dfp_trend_country3[dfp_trend_country3.year==2018].num_sold, '-o', color='blue', linewidth=LINEWIDTH, alpha=ALPHA,label='2018')\n\nax = plt.gca()\nax.set_title('NORWAY SALES PER MONTH')\nax.set_ylabel('Sales in dollars')\nax.grid(axis='y', color='gray', alpha=.2)\n\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.legend(loc=2, title='Legend')\nplt.show()","d2bf48ee":"dfp_trend_country4=dfp_trend_country[dfp_trend_country.country=='Sweden']\ndfp_trend_country4  ","cc795275":"# for Sweden\nplt.figure(figsize=(16,6))\n# Plot the sales of the year 2015\nplt.plot(MONTHS, dfp_trend_country4[dfp_trend_country4.year==2015].num_sold, '-o', color='steelblue', linewidth=LINEWIDTH, alpha=ALPHA,label='2015')\nplt.plot(MONTHS, dfp_trend_country4[dfp_trend_country4.year==2016].num_sold, '-o', color='seagreen', linewidth=LINEWIDTH, alpha=ALPHA,label='2016')\nplt.plot(MONTHS, dfp_trend_country4[dfp_trend_country4.year==2017].num_sold, '-o', color='pink', linewidth=LINEWIDTH, alpha=ALPHA,label='2017')\nplt.plot(MONTHS, dfp_trend_country4[dfp_trend_country4.year==2018].num_sold, '-o', color='blue', linewidth=LINEWIDTH, alpha=ALPHA,label='2018')\n\nax = plt.gca()\nax.set_title('SWEDEN SALES PER MONTH')\nax.set_ylabel('Sales in dollars')\nax.grid(axis='y', color='gray', alpha=.2)\n\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.legend(loc=2, title='Legend')\nplt.show()","26255941":"import seaborn as sns\nsns.set()\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff","5d20fc80":"tmp = clean.country.value_counts()\nlabels = (np.array(tmp.index))\nsizes = (np.array((tmp \/ tmp.sum())*100))\n\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=sizes, hole=.4)])\nfig.update_layout( title_text=\"COUNTRIES \",\n    annotations=[dict(text='Country Distribution', x=0.5, y=0.52, font_size=40, showarrow=False)])\nfig.show()","5e646610":"# for Sweden,Finland,Norway \nplt.figure(figsize=(16,6))\n# Plot the sales of the year 2018\n\nplt.plot(MONTHS, dfp_trend_country2[dfp_trend_country2.year==2018].num_sold, '-o', color='seagreen', linewidth=LINEWIDTH, alpha=ALPHA,label='Finland')\nplt.plot(MONTHS, dfp_trend_country3[dfp_trend_country3.year==2018].num_sold, '-o', color='pink', linewidth=LINEWIDTH, alpha=ALPHA,label='Norway')\nplt.plot(MONTHS, dfp_trend_country4[dfp_trend_country4.year==2018].num_sold, '-o', color='blue', linewidth=LINEWIDTH, alpha=ALPHA,label='Sweden')\n \nax = plt.gca()\nax.set_title('Sales Comparison 2018')\nax.set_ylabel('Sales in dollars')\nax.grid(axis='y', color='gray', alpha=.2)\n\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.legend(loc=2, title='Legend')\nplt.show()","27fdfb1f":"# for Sweden,Finland,Norway \nplt.figure(figsize=(16,6))\n# Plot the sales of the year 2015\n\nplt.plot(MONTHS, dfp_trend_country2[dfp_trend_country2.year==2015].num_sold, '-o', color='seagreen', linewidth=LINEWIDTH, alpha=ALPHA,label='Finland')\nplt.plot(MONTHS, dfp_trend_country3[dfp_trend_country3.year==2015].num_sold, '-o', color='pink', linewidth=LINEWIDTH, alpha=ALPHA,label='Norway')\nplt.plot(MONTHS, dfp_trend_country4[dfp_trend_country4.year==2015].num_sold, '-o', color='blue', linewidth=LINEWIDTH, alpha=ALPHA,label='Sweden')\n\nax = plt.gca()\nax.set_title('Sales Comparison 2015')\nax.set_ylabel('Sales in dollars')\nax.grid(axis='y', color='gray', alpha=.2)\n\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.legend(loc=2, title='Legend')\nplt.show()","07559aa4":"Product_Sales=pd.DataFrame(dfp.groupby('product').sum()['num_sold'])","1c6a9ea4":"Sorted_Prod=Product_Sales.sort_values('num_sold',ascending=False)\nSorted_Prod[:10].plot(kind='bar',figsize=(13,6),color='red',title='Sales per product')\n\n","e51caf8b":"\nfrom tqdm import tqdm\ntest = tqdm(range(0, len(df_test)), desc='Matching')\nfor i in test:\n    for j in range(0, len(df_train)):\n        for k in range(1, len(df_test.columns)):\n            if df_test.iloc[i,k] == df_train.iloc[j,k]:\n                continue\n            else:\n                break\n        else:\n            sample_submission.iloc[i, 1] = df_train.iloc[j, -1]\n            break\ntest.close()","56f83860":"sample_submission.to_csv","3d38d671":"#### The most sold product or item are kaggle hats with sales above 500k followed by Mugs with sales in the excess of 300k. and lastly the Sticker being the lowest performing product amongst the three, with sales of about 150k.\n","e88c717b":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSaTEtuo6o3PiveRP343REE0_VpnBNpjSPxWqvh1zcMulH6hz2MwTaDDHY&s=10)","007d2e13":"### Modeling Sales \n#### tgmd method.","97fc3110":"## Sales Comparison, Monthly for all Countries ","d0c38a77":"## County Specific Sales\n\n### Finland \n### Norway \n### Sweden \n\n\n","2ab41dc2":"### Finland Monthly Sales","c1ed5ec4":"#### In 2018 the performance gap is clear to see, Norway out performed both Finland and Sweden throughout the entire year of 2018.\n#### On average Norway out sells the two countries in question by 250k sales each month.\n#### Sales in Finland are overall the lowest and Must be paid more attention.\n#### Maybe some sort of Customer incentives are needed or promotional content to try and boost Finland and maybe Sweden's Overall sales.","790ede14":" #### It is clear that in Norway the most number of items sold is just above 115k in 2018 around Jan, With its peak sales at Dec at around 120k.\n #### From the graph its clear to see that sales have been increasing positively since 2015.\n #### We notice that in Jan 2015 sales were just below 100k , and 100k at the end of the year.\n #### With its lowest ever sales of around 70k. making it a better performer with respect to sales against Finland and Sweden, which has a recorded Sales low of just above 40k.\n ","e8677c64":"### Sweden Monthly Sales ","9f5ca55b":"### Most sold Kaggle Product","bdf462bd":" #### It is clear that in Finland the most number of items sold is around 70K in 2018 around Jan, With its peak sales at Dec at around 75k.\n #### From the graph its clear to see that sales have been increasing positively since 2015.\n #### We notice that in Jan 2015 sales were just below 60k, and slightly above 60k at the end of the year.\n ","a47aae50":"# This is a report on the kaggle sales in Sweden, Finland and Norway. \n\n### We will go through the sales of each country to try and see which of the three is the best in terms of Kaggle products turn over. \n### We also want to see which product Is the most sold.\n\n### Basically this report will go into details about the kaggle sales in this respective countries.","1238cbae":"## Sales per County ","39439fe8":"## Country Distribution ","22cefa2f":" #### It is clear that in Sweden the most number of items sold is just above 85k in 2017 around Dec.\n #### From the graph its clear to see that sales have been increasing positively since 2015.\n #### We notice that in Jan 2015 sales were around 70k ,and slightly above 70k at the end of the year.\n #### With its lowest ever sales of around 50k in Sep. making it a better performer with respect to sales against Finland, which has a recorded Sales low of just above 40k.\n ","d69920af":"### Norway Monthly Sales ","b836270c":"### Plot of Sales per Month from 2015 till 2018"}}