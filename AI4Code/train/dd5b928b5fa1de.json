{"cell_type":{"f81f3131":"code","06bfd381":"code","a408590e":"code","1bf669b5":"code","ec711adf":"code","a02af75e":"code","a4c2ac78":"code","9d768b63":"code","e12a2ce4":"code","4e666776":"markdown","afd0a8dc":"markdown","bbdd1692":"markdown","fc70c4f6":"markdown"},"source":{"f81f3131":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport warnings  \nwarnings.filterwarnings('ignore')","06bfd381":"data = pd.read_csv('..\/input\/monthly-container-holding-of-ports-in-south-korea\/container.csv', index_col=0)\ndata.head()","a408590e":"data = data[data['Harbor']!='East Sea, Mukho']\ndata_notKR = data[data['isKorean']==False]\ndata = data[data['isKorean']==True]\ndata = pd.merge(data, data_notKR, how='left', on=['Harbor', 'Date'])\ndata.drop(['isKorean_x', 'isKorean_y'], axis=1, inplace=True)\nprint(data.shape)\ndata.head()","1bf669b5":"! pip install adamp\nfrom adamp import AdamP\nimport torch\nimport torch.optim as optim\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import preprocessing","ec711adf":"device = 'cuda'\n\nSEED = 777\ntorch.manual_seed(SEED)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(SEED)","a02af75e":"preds = []\nlabels = []\nfor harbor in data['Harbor'].unique():\n    h_data = data[data['Harbor']==harbor]\n    h_data.drop('Harbor', axis=1, inplace=True)\n    x = h_data[h_data['Date']<'2019-12-31']\n    x = x.drop('Date', axis=1)\n    \n    y = h_data[h_data['Date']<'2020-01-31']\n    y = y.drop('Date', axis=1)\n    y = y['Empty_40_x'] + y['Empty_40_y']\n    y = y.iloc[1:]\n    \n    x = np.array(x)\n    y = np.array(y)\n    \n    x_train = x[:x.shape[0]]\n    y_train = y[:x.shape[0]]\n    x_test = x[x.shape[0]-1]\n    y_test = y[x.shape[0]-1]\n    \n    Scaler=preprocessing.StandardScaler()\n    x_train = Scaler.fit_transform(x_train)\n    x_test = Scaler.transform(x_test.reshape(1, x_train.shape[1]))\n    \n    x_train=torch.FloatTensor(x_train).to(device)\n    y_train=torch.FloatTensor(y_train).to(device)\n    x_test=torch.FloatTensor(x_test).to(device)\n    \n    lin = torch.nn.Linear(x_train.shape[1],1)\n    torch.nn.init.xavier_uniform_(lin.weight)\n    model = torch.nn.Sequential(lin).to(device)\n    loss = torch.nn.MSELoss().to(device)\n    optimizer = AdamP(model.parameters(), lr=1000)\n    \n    epochs = 300\n    err_history = []\n    for epoch in range(1, epochs+1):\n        optimizer.zero_grad()\n        hypothesis = model(x_train)\n        cost = loss(hypothesis, y_train)\n        cost.backward()\n        err_history.append(cost.item())\n        optimizer.step()\n        \n    with torch.no_grad():\n        pred = model(x_test).detach().cpu().numpy()\n    preds.append(pred)\n    labels.append(y_test)","a4c2ac78":"npr = []\nerr = []\nfor i in range(len(preds)):\n    npr.append(float(preds[i][0]))\n    err.append(float(np.abs(labels[i]-preds[i][0])))","9d768b63":"print(data['Harbor'].unique())\nprint(labels)\nprint(npr)\nprint(err)\nprint()\nerr_rate = np.array(err)\/labels * 100\nprint(err_rate)\nprint(np.mean(err_rate))","e12a2ce4":"err_rate = np.array(err)\/labels * 100\nprint(err_rate)\nprint(np.mean(err_rate))","4e666776":"# Time Series Forecast using DNN model\nLet's predict stock of 10ft empty container of Busan Harbor.   \nTrained on 2018~2019 data and tested on 2020 Jan ~ 2020 May data.","afd0a8dc":"# Linear Regression","bbdd1692":"# Data Pre-Processing","fc70c4f6":"# Evaluate"}}