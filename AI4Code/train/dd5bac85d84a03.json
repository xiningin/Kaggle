{"cell_type":{"cdd5b9b3":"code","2e17dc18":"code","3fd2e0df":"code","2b834623":"code","6e56ca07":"code","8fd7924d":"code","66b05293":"code","fa0ce3ee":"code","7db462fd":"code","2b3c6668":"markdown","fef99b67":"markdown","9a49ab86":"markdown","c8c81e68":"markdown","5b697cab":"markdown","b158d2b9":"markdown","33324671":"markdown","a13d53bf":"markdown","b8331e73":"markdown","4ea08562":"markdown"},"source":{"cdd5b9b3":"import tensorflow as tf\n\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D\nfrom tensorflow.keras import Model","2e17dc18":"mnist = tf.keras.datasets.mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0\n\n# \ucc44\ub110 \ucc28\uc6d0\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4\nx_train = x_train[..., tf.newaxis].astype(\"float32\")\nx_test = x_test[..., tf.newaxis].astype(\"float32\")","3fd2e0df":"train_ds = tf.data.Dataset.from_tensor_slices(\n    (x_train, y_train)).shuffle(10000).batch(32)\n\ntest_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(32)","2b834623":"class MyModel(Model):\n    def __init__(self):\n        super(MyModel, self).__init__()\n        self.conv1 = Conv2D(32, 3, activation='relu')\n        self.flatten = Flatten()\n        self.d1 = Dense(128, activation='relu')\n        self.d2 = Dense(10)\n    \n    def call(self, x):\n        x = self.conv1(x)\n        x = self.flatten(x)\n        x = self.d1(x)\n        return self.d2(x)\n\nmodel = MyModel()","6e56ca07":"loss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n\noptimizer = tf.keras.optimizers.Adam()","8fd7924d":"train_loss = tf.keras.metrics.Mean(name='train_loss')\ntrain_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='train_accuracy')\n\ntest_loss = tf.keras.metrics.Mean(name='test_loss')\ntest_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='test_accuracy')","66b05293":"@tf.function\ndef train_step(images, labels):\n    with tf.GradientTape() as tape:\n        # training=True\ub294 \ud559\uc2b5\uacfc \ucd94\uc815\uc758 \uacfc\uc815 \uc911\uc5d0 \ub2e4\ub978 \ud589\ub3d9\uc744 \ud558\ub294 \uce35\uc774 \uc788\uc744 \uacbd\uc6b0\uc5d0\ub9cc \ud544\uc694\ud569\ub2c8\ub2e4.\n        # (\uc608: Dropout)\n        predictions = model(images, training=True)\n        loss = loss_object(labels, predictions)\n    gradients = tape.gradient(loss, model.trainable_variables)\n    optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n    \n    train_loss(loss)\n    train_accuracy(labels, predictions)","fa0ce3ee":"@tf.function\ndef test_step(images, labels):\n    # training=False\ub294 \ud559\uc2b5\uacfc \ucd94\uc815\uc758 \uacfc\uc815 \uc911\uc5d0 \ub2e4\ub978 \ud589\ub3d9\uc744 \ud558\ub294 \uce35\uc774 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub9cc \ud544\uc694\ud569\ub2c8\ub2e4.\n    # (\uc608: Dropout)\n    predictions = model(images, training=False)\n    t_loss = loss_object(labels, predictions)\n    \n    test_loss(t_loss)\n    test_accuracy(labels, predictions)","7db462fd":"EPOCHS = 5\n\nfor epoch in range(EPOCHS):\n    # \ub2e4\uc74c \uc138\ub300\ub97c \uc2dc\uc791\ud560 \ub54c\uc5d0 \ud3c9\uac00 \uc9c0\ud45c\ub97c \ucd08\uae30\ud654 \ud574\uc90d\ub2c8\ub2e4.\n    train_loss.reset_states()\n    train_accuracy.reset_states()\n    test_loss.reset_states()\n    test_accuracy.reset_states()\n    \n    for images, labels in train_ds:\n        train_step(images, labels)\n        \n    for test_images, test_labels in test_ds:\n        test_step(test_images, test_labels)\n        \n    print(\n        f'Epoch {epoch + 1}, '\n        f'Loss: {train_loss.result()}, '\n        f'Accuracy: {train_accuracy.result() * 100}, '\n        f'Test Loss: {test_loss.result()}, '\n        f'Test Accuracy: {test_accuracy.result() * 100}'\n    )","2b3c6668":"# \uc804\ubb38\uac00\ub97c \uc704\ud55c TensorFlow 2 \ube60\ub978\uc2dc\uc791","fef99b67":"\uc774 \uc774\ubbf8\uc9c0 \ubd84\ub958\uae30\ub294 \uc774\uc81c \uc774 \ub370\uc774\ud130 \uc138\ud2b8\uc5d0 \ub300\ud574\uc11c 98%\uc758 \uc815\ud655\ub3c4\ub97c \uac00\uc9c8 \ub9cc\ud07c \ud559\uc2b5\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ub354 \uc54c\uace0 \uc2f6\ub2e4\uba74, [TensorFlow \ud29c\ud1a0\ub9ac\uc5bc](https:\/\/www.tensorflow.org\/tutorials)\uc744 \uc77d\uc5b4\ubcf4\uc138\uc694.","9a49ab86":"\ubaa8\ub378\uc758 \uc190\uc2e4\uacfc \uc815\ud655\ub3c4\ub97c \uce21\uc815\ud558\uae30 \uc704\ud55c \ud3c9\uac00 \uc9c0\ud45c\ub97c \uc120\ud0dd\ud569\ub2c8\ub2e4. \uc774 \ud3c9\uac00 \uc9c0\ud45c\ub4e4\uc740 \uc5ec\ub7ec \uc138\ub300\uc5d0 \uac78\uccd0 \ub098\uc628 \uac12\ub4e4\uc744 \ub204\uc801\ud558\uace0 \uc804\uccb4\uc801\uc778 \uacb0\uacfc\ub97c \ucd9c\ub825\ud569\ub2c8\ub2e4.","c8c81e68":"\ud559\uc2b5\uc744 \uc704\ud55c \ucd5c\uc801\ud654 \ubc29\ubc95\uacfc \uc190\uc2e4 \ud568\uc218\ub97c \uc120\ud0dd\ud569\ub2c8\ub2e4.","5b697cab":"TensorFlow\ub97c \uac00\uc838\uc635\ub2c8\ub2e4.","b158d2b9":"\ubaa8\ub378\uc744 \ud3c9\uac00\ud569\ub2c8\ub2e4.","33324671":"[MNIST \ub370\uc774\ud130 \uc138\ud2b8](http:\/\/yann.lecun.com\/exdb\/mnist\/)\ub97c \ubd88\ub7ec\uc624\uace0 \uc900\ube44\ud569\ub2c8\ub2e4.","a13d53bf":"\ub370\uc774\ud130 \uc138\ud2b8\ub97c \ubb36\uace0 \uc11e\uae30 \uc704\ud574\uc11c [tf.data](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/data)\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","b8331e73":"\ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0a4\uae30 \uc704\ud574 [tf.GradientTape](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/GradientTape)\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","4ea08562":"Keras [\ubaa8\ub378 \uc0c1\uc18d API](https:\/\/www.tensorflow.org\/guide\/keras#model_subclassing)\ub97c \uc774\uc6a9\ud574 [tf.keras](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras) \ubaa8\ub378\uc744 \ub9cc\ub4ed\ub2c8\ub2e4."}}