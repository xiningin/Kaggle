{"cell_type":{"3801a643":"code","4f08bf68":"code","e6ace549":"code","34793957":"code","074f6825":"code","29a4dbd7":"code","cc8db7ec":"code","8e2c8969":"code","7dac5b13":"code","eb4aa2c7":"code","eae525d3":"code","214b10c0":"code","0d9a7bbe":"code","ee87f2e5":"code","181ab26c":"code","cfb0dfed":"code","fb9eb312":"code","d923e985":"code","a1131164":"code","9789ca08":"code","cac7a703":"code","b3058fb2":"code","52850604":"code","f5deb302":"code","6228017b":"code","645419e2":"code","70e41f6b":"code","fbe3dd9c":"code","48f459e9":"code","a7ba8411":"code","8961072e":"code","3c7498ac":"code","a3d212f0":"code","4545fa80":"code","fa72e065":"code","c6fcc652":"code","5cb43eaf":"markdown","df37563c":"markdown","49d41a2c":"markdown","4dbe89af":"markdown","6f0e1987":"markdown","e1eae143":"markdown","ab41c70f":"markdown","41478519":"markdown","2f14eb2e":"markdown","932d753f":"markdown","b2b3673a":"markdown","788c0727":"markdown","446a559f":"markdown","07ac60f7":"markdown","c4c0561f":"markdown","6bbbec43":"markdown","39d7655a":"markdown"},"source":{"3801a643":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4f08bf68":"data = pd.read_csv(\"\/kaggle\/input\/spam-text-message-classification\/SPAM text message 20170820 - Data.csv\")","e6ace549":"data.head()","34793957":"data.shape","074f6825":"data1 = data.copy()","29a4dbd7":"# For Lowercase\ndata1.Message.apply(lambda i: \" \".join(i.lower() for i in i.split()))","cc8db7ec":"#For Uppercase\ndata1.Message.apply(lambda i: \" \".join(i.upper() for i in i.split()))","8e2c8969":"data2 = data1.Message.apply(lambda i: \" \".join(i.lower() for i in i.split()))","7dac5b13":"data2.str.replace(\"[^\\w\\s]\",\"\")","eb4aa2c7":"data3 = data2.str.replace(\"[^\\w\\s]\",\"\")","eae525d3":"data3.str.replace(\"\\d\",\"\")","214b10c0":"data4 = data3.str.replace(\"\\d\",\"\")","0d9a7bbe":"import nltk\nfrom nltk.corpus import stopwords","ee87f2e5":"### I will use stopwords in the English language.\nsw = stopwords.words(\"english\")","181ab26c":"#Showing some sample from the sw\nprint(sw[:28])","cfb0dfed":"data4.apply(lambda x: \" \".join(x for x in x.split() if x not in sw))","fb9eb312":"data5 = data4.apply(lambda x: \" \".join(x for x in x.split() if x not in sw))","d923e985":"for i in range(0,10):\n    print(data4[i])","a1131164":"for i in range(0,10):\n    print(data5[i])","9789ca08":"data5","cac7a703":"data5 = pd.DataFrame(data5, columns=[\"Message\"])\ndata5.head()","b3058fb2":"#Looking at how many quantities each word there are in the dataset.\nwords_counts = pd.Series(\" \".join(data5.Message).split()).value_counts()\nwords_counts","52850604":"low = words_counts[words_counts<5]\nlen(low)","f5deb302":"high = words_counts[words_counts>100]\nlen(high)","6228017b":"data5 = data5.Message.apply(lambda x: \" \".join(x for x in x.split() if x not in low))\ndata5 = data5.apply(lambda x: \" \".join(x for x in x.split() if x not in high))","645419e2":"data5","70e41f6b":"nltk.download(\"punkt\")","fbe3dd9c":"import textblob\nfrom textblob import TextBlob","48f459e9":"data5[1]","a7ba8411":"TextBlob(data5[1]).words","8961072e":"data5.apply(lambda x: TextBlob(x).words)","3c7498ac":"data6 = data5.apply(lambda x: TextBlob(x).words)","a3d212f0":"from nltk.stem import PorterStemmer\nst = PorterStemmer()","4545fa80":"data5.apply(lambda x: \" \".join(st.stem(i) for i in x.split()))","fa72e065":"from textblob import Word\nnltk.download(\"wordnet\")","c6fcc652":"data5.apply(lambda x: \" \".join(Word(i).lemmatize() for i in x.split()))","5cb43eaf":"### Remove Punctuation Marks.","df37563c":"**If you think how you specify high and low border, it is completely secret in my heart :) I specified borders without analysis but if I chose an easy way to think the rule is so simple.  A high amount cause bias on the other hand low amount keep no insight for algorithms**","49d41a2c":"I tried to show which methods can be used in text mining and there are which sides that we must look from. If you look more watchful than me by using the methods that I have shown above you will take the better result.","4dbe89af":"**Before the process, I have to create a dataframe again to use some methods of pandas library.**","6f0e1987":"### Removing the Numbers.","e1eae143":"### Removing the words that its quantity lower and higher than normal.","ab41c70f":"I want to keep the lowercase style of Data 1, then I can move on to the next step where I will clear the punctuation marks.","41478519":"**At least lemmatization looks better than stemming.**","2f14eb2e":"### Tokenization","932d753f":"\nSo to speak stemming destroyed all of my words in data so I will apply lemmatization instead.","b2b3673a":"### Removing the Numbers.","788c0727":"### Stemming","446a559f":"### Lemmatization","07ac60f7":"\n### Uppercase - Lowercase.","c4c0561f":"I took help from  [Mustafa Vahit's](https:\/\/www.udemy.com\/course\/python-egitimi\/) udemy course.","6bbbec43":"When we need to standardize the shape of the letter, we can use this method with ease.","39d7655a":"If you look deeply at both sample sets that were taken from data4 and data5 above, you can notice what is the differences between them with ease."}}