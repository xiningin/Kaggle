{"cell_type":{"bf4f8643":"code","6c8036df":"code","60b17c2b":"code","0f9716be":"code","c0f98230":"code","2638bfae":"code","df11c273":"code","61b6510c":"code","3b3b1907":"code","3a443501":"code","c784eeb2":"code","ba808b7d":"code","23d71657":"code","8adf46ed":"code","9d2de704":"code","103f35af":"code","183962d4":"code","86526baf":"markdown","6b1521a5":"markdown","edde1de5":"markdown","57d55669":"markdown","ad3c1cf7":"markdown","545eec4a":"markdown","2a71a65b":"markdown","513cd74f":"markdown","fbb60338":"markdown","aae02a58":"markdown","7289d926":"markdown","2bc1a7b1":"markdown"},"source":{"bf4f8643":"import numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt","6c8036df":"df = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')\ndf.head()","60b17c2b":"df = df[['Name', 'Age', 'Overall', 'Value', 'Position']]\ndf['Value'] = df['Value'].str.replace('\u20ac','').str.replace('M',' 1000000').str.replace('K',' 1000')\ndf['Value'] = df['Value'].str.split(' ', expand=True)[0].astype(float) * df['Value'].str.split(' ', expand=True)[1].astype(float).fillna(0).astype(np.float32)\ndf = df[df['Position'].notnull()]\ndf = df[df['Value']>10000]\n\ndf.head()","0f9716be":"replace_dict = {\n    'GK': 'Goalkeeper',\n    'ST': 'Center Forward', \n    'CF': 'Center Forward',\n    'LF': 'Left Forward', \n    'LS': 'Left Forward',\n    'RF': 'Right Forward', \n    'RS': 'Right Forward',\n    'RCM': 'Center Half', \n    'LCM': 'Center Half', \n    'LDM': 'Center Half', \n    'CAM': 'Center Half', \n    'CDM': 'Center Half', \n    'RDM': 'Center Half', \n    'CM': 'Center Half',\n    'LW': 'Left Half', \n    'LAM': 'Left Half', \n    'LM': 'Left Half',\n    'RM': 'Right Half', \n    'RW': 'Right Half', \n    'RAM': 'Right Half',\n    'RCB': 'Center Defender',\n    'CB': 'Center Defender', \n    'LCB': 'Center Defender',\n    'LB': 'Left Defender',  \n    'LWB': 'Left Defender',\n    'RB': 'Right Defender', \n    'RWB': 'Right Defender'\n}\n\ndf['Position'] = df['Position'].replace(replace_dict)","c0f98230":"df['Position'].unique().tolist()","2638bfae":"class Player:\n    def __init__(self, name, age, overall, value, position):\n        self.name = name\n        self.age = age\n        self.overall = overall\n        self.value = value\n        self.position = position","df11c273":"def generate_player(player_df, genes, use_best=False):\n    gen_df = player_df.sort_values(['Overall'], ascending=False)\n    if use_best:\n        player = 0\n    else:\n        player = random.randint(0, len(gen_df)-1)\n    player_item = Player(\n        gen_df.iloc[player]['Name'], \n        gen_df.iloc[player]['Age'],\n        gen_df.iloc[player]['Overall'],\n        gen_df.iloc[player]['Value'],\n        gen_df.iloc[player]['Position']\n    )\n    \n    return player_item","61b6510c":"def create_individual(football_df):\n    genes = list()\n    positions = [\n        'Goalkeeper', 'Left Defender', 'Right Defender', \n        'Center Defender', 'Left Half', 'Right Half', \n        'Center Half', 'Left Forward', 'Right Forward', 'Center Forward'\n    ] \n    \n    for pos in positions:\n        player_df = football_df[football_df['Position'] == pos]\n        for i in range(2):\n            player_item = generate_player(player_df, genes)\n            genes.append(player_item)\n        if pos == 'Center Defender':\n            for i in range(2):\n                player_item = generate_player(player_df, genes)\n                genes.append(player_item)\n\n    return genes","3b3b1907":"def fitness(max_money, avg_age, individual):\n    score = cost = age = 0\n    for player in individual:\n        score += player.overall\n        cost += player.value\n        age += player.age\n\n    score += min(0, max_money-cost)\n    age_diff = (avg_age - age \/ 22) * 10\n    score += min(0, age_diff)\n    \n    if len(list(set([it.name for it in individual]))) != 22:\n        score -= 1000000\n        \n    return score","3a443501":"def mutate(individual, mutation_rate, mutation_best_rate, footbal_df):\n    new = list()\n    for gene in individual:\n        player_df = footbal_df[footbal_df['Position'] == gene.position]\n        if mutation_best_rate > random.random():\n            player_item = generate_player(player_df, individual, use_best=True)\n            new.append(player_item)\n            continue\n        if mutation_rate > random.random():\n            player_item = generate_player(player_df, individual)\n            new.append(player_item)\n        else:\n            player_item = generate_player(player_df, individual)\n            new.append(player_item)\n    return new","c784eeb2":"MAX_MONEY = 1200000000\nAVG_AGE = 25\nEPOCHS = 800\nCHILDREN = 25\nMUTATION_RATE = 0.15\nMUTATION_BEST_RATE = 0.1\nMUTATION_CHANGE_OVER_EPOCHS = 120\nMUTATION_DECREASE = 0.015\nINCREASE_IF_NO_IMPROVES = 80\nMUTATION_INCREASE = 0.0075\nCHILDREN_INCREASE = 2","ba808b7d":"ind = create_individual(df)\nstable_score = 0\nbest_score = fitness(MAX_MONEY, AVG_AGE, ind)\nbest_ind = ind\nfor i in range(EPOCHS):\n    improve_flag = False\n    if stable_score == INCREASE_IF_NO_IMPROVES:\n        stable_score = 0\n        print('Mutation rate increased to: ', MUTATION_RATE+MUTATION_INCREASE)\n        MUTATION_RATE += MUTATION_INCREASE\n        CHILDREN += CHILDREN_INCREASE\n    if i % 20 == 0:\n        print('Epoch: ', i, best_score)\n    if i % MUTATION_CHANGE_OVER_EPOCHS == 0 and i != 0:\n        print('Mutation rate decreased to: ', MUTATION_RATE-MUTATION_DECREASE)\n        MUTATION_RATE -= MUTATION_DECREASE\n    for i in range(CHILDREN):\n        child = mutate(ind, MUTATION_RATE, MUTATION_BEST_RATE, df)\n        child_score = fitness(MAX_MONEY, AVG_AGE, child)\n        if child_score >= best_score:\n            best_score = child_score\n            best_ind = child\n            improve_flag=True\n            \n    if improve_flag == False:\n        stable_score += 1","23d71657":"for player in best_ind:\n    print(player.name, player.overall)","8adf46ed":"def draw_pitch(pitch, line, orientation,view):\n    \n    orientation = orientation\n    view = view\n    line = line\n    pitch = pitch\n    \n    if view.lower().startswith(\"h\"):\n        fig,ax = plt.subplots(figsize=(20.8, 13.6))\n        plt.ylim(98, 210)\n        plt.xlim(-2, 138)\n    else:\n        fig,ax = plt.subplots(figsize=(13.6, 20.8))\n        plt.ylim(-2, 210)\n        plt.xlim(-2, 138)\n    ax.axis('off')\n\n    lx1 = [0, 0, 136, 136, 0]\n    ly1 = [0, 208, 208, 0, 0]\n\n    plt.plot(lx1,ly1,color=line,zorder=5)\n\n    lx2 = [27.68, 27.68, 108.32, 108.32] \n    ly2 = [208, 175, 175, 208]\n    plt.plot(lx2, ly2, color=line, zorder=5)\n\n    lx3 = [27.68, 27.68, 108.32, 108.32] \n    ly3 = [0, 33, 33, 0]\n    plt.plot(lx3,ly3,color=line,zorder=5)\n\n    lx4 = [60.68, 60.68, 75.32, 75.32]\n    ly4 = [208, 208.4, 208.4, 208]\n    plt.plot(lx4,ly4,color=line,zorder=5)\n\n    lx5 = [60.68,60.68,75.32,75.32]\n    ly5 = [0,-0.4,-0.4,0]\n    plt.plot(lx5,ly5,color=line,zorder=5)\n\n    lx6 = [49.68,49.68,86.32,86.32]\n    ly6 = [208,199,199,208]\n    plt.plot(lx6,ly6,color=line,zorder=5)\n\n    lx7 = [49.68,49.68,86.32,86.32]\n    ly7 = [0,9,9,0]\n    plt.plot(lx7,ly7,color=line,zorder=5)\n\n    lx8 = [0,136] \n    ly8 = [104,104]\n    plt.plot(lx8,ly8,color=line,zorder=5)\n\n    plt.scatter(68,186,color=line,zorder=5)\n    plt.scatter(68,22,color=line,zorder=5)\n    plt.scatter(68,104,color=line,zorder=5)\n\n    circle1 = plt.Circle((68,187), 18.30,ls='solid',lw=3,color=line, fill=False, zorder=1,alpha=1)\n    circle2 = plt.Circle((68,21), 18.30,ls='solid',lw=3,color=line, fill=False, zorder=1,alpha=1)\n    circle3 = plt.Circle((68,104), 18.30,ls='solid',lw=3,color=line, fill=False, zorder=2,alpha=1)\n\n    rec1 = plt.Rectangle((40, 175), 60,33,ls='-',color=pitch, zorder=1,alpha=1)\n    rec2 = plt.Rectangle((40, 0), 60,33,ls='-',color=pitch, zorder=1,alpha=1)\n    rec3 = plt.Rectangle((-1, -1), 140,212,ls='-',color=pitch, zorder=1,alpha=1)\n\n    ax.add_artist(rec3)\n    ax.add_artist(circle1)\n    ax.add_artist(circle2)\n    ax.add_artist(rec1)\n    ax.add_artist(rec2)\n    ax.add_artist(circle3)   ","9d2de704":"first_team = []\nsecond_team = []\n\ni = 0\nwhile i < len(best_ind):\n    if best_ind[i].overall >= best_ind[i+1].overall:\n        first_team.append(best_ind[i])\n        second_team.append(best_ind[i+1])\n    else:\n        first_team.append(best_ind[i+1])\n        second_team.append(best_ind[i])\n    i+=2\n    \nfirst_team.reverse()\nsecond_team.reverse()","103f35af":"draw_pitch(\n    \"#195905\",\n    \"#faf0e6\",\n    \"v\",\n    \"full\"\n)\n\nx = [\n    68, 28, 108, 68, 28, 108, 40, 90, 20, 112, 68\n]\ny = [160, 160, 160, 110, 110, 110, 40, 40, 60, 60, 1]\nn = [str(item.name) + ', ' + str(item.overall) for item in first_team]\n\nfor i, type in enumerate(n):\n    x_c = x[i]\n    y_c = y[i]\n    plt.scatter(\n        x_c, \n        y_c, \n        marker='o', \n        color='red', \n        edgecolors=\"black\", \n        zorder=10\n    )\n    plt.text(x_c-2.5, y_c+1, type, fontsize=16)\n","183962d4":"draw_pitch(\n    \"#195905\",\n    \"#faf0e6\",\n    \"v\",\n    \"full\"\n)\n\nx = [68, 28, 108, 68, 28, 108, 40, 90, 20, 112, 68]\ny = [160, 160, 160, 110, 110, 110, 40, 40, 60, 60, 1]\nn = [str(item.name) + ', ' + str(item.overall) for item in second_team]\n\nfor i, type in enumerate(n):\n    x_c = x[i]\n    y_c = y[i]\n    plt.scatter(\n        x_c, \n        y_c, \n        marker='o', \n        color='red', \n        edgecolors=\"black\", \n        zorder=10\n    )\n    \n    plt.text(\n        x_c-2.5, \n        y_c+1, \n        type, \n        fontsize=16\n    )","86526baf":"Finally - it is our best team.","6b1521a5":"### Everyone of us played FIFA and knows how it hard sometimes to select your best team. In this kernel I will present basic approach for genetic algorithm to select team using some constraints like total amount of money and average age of players. Let's do it!\n\n\n#### You can check EDA for this dataset: <a href=\"https:\/\/www.kaggle.com\/isaienkov\/eda-simple-modeling-football-field-visualization\/\">EDA. Simple modeling. Football field visualization<\/a>\n### Also my other sports notebooks: \n* <a href=\"https:\/\/www.kaggle.com\/isaienkov\/nba-2k20-data-analysis-visualization\">NBA 2k20. Data analysis & visualization<\/a>\n* <a href=\"https:\/\/www.kaggle.com\/isaienkov\/basketball-players-stats-extended-analysis\">Basketball Players Stats. Extended analysis.<\/a>","edde1de5":"Our second team","57d55669":"To simplify task we will use next positions: Center Forward, Left Forward, Right Forward, Center Half, Left Half, Right Half, Center Defender, Left Defender, Right Defender and Goalkeeper.\n\nWe will use standard scheme for team (4-3-3: 4 defenders, 3 halfs and 3 forwards) and select 2 teams (main and second). In total we will have 22 players.","ad3c1cf7":"To mutate individual we just select new player for current position if random value is less than mutation rate.","545eec4a":"<h1><center>Find your best team using genetic algorithms<\/center><\/h1>\n\n<center><img src=\"https:\/\/img.fifa.com\/image\/upload\/t_l1\/hmkwxxkgr5j8rqa8uhmw.jpg\"><\/center>\n","2a71a65b":"Now we are going to run our genetic algorithm. On every epoch we create N children from individual and select only 1 best for next epochs.","513cd74f":"To generate individual we will select 2 unique random players for every position. Only for position Central Defender we will select 4 players, because we need 2 of them on the field at the same time.","fbb60338":"Select and prepare columns that we will use.","aae02a58":"Our fitness function is a total power of a team (sum of Overall) minus amount of money that we spent over our limits and minus number of years * 10 over our limit (average age).","7289d926":"Let's define constants","2bc1a7b1":"Our first team"}}