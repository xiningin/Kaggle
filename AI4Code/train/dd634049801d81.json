{"cell_type":{"afbd9c98":"code","d9dd3bf1":"code","10889ef6":"code","ed054e35":"code","69f3ae35":"code","ca2ea177":"code","85ec2cd8":"code","9311c15e":"code","d7d5a9ec":"code","d61e4aaf":"code","6e7077cc":"code","e2e50a57":"code","9a4d616a":"code","c5d2b327":"code","42c1a76d":"code","3ab7b2e4":"code","6e6a26a3":"code","17483c32":"code","603285d6":"code","3f8d4d72":"code","f8d7fc8d":"code","474fa29d":"code","524a6ce4":"code","464a0d20":"code","a4aa27b0":"code","2d8eb134":"code","04136cb0":"code","c0baadfc":"code","11838338":"code","04c90fdd":"code","64265414":"code","83d2f3f8":"code","06ea4fef":"code","e77d88b8":"code","2c0c91e8":"code","07422616":"markdown","21e22b09":"markdown","520d57d5":"markdown","c5124551":"markdown","44debf49":"markdown","6aaadd52":"markdown","5e1bf8bc":"markdown","f95da980":"markdown","9d05840a":"markdown","bf3d930a":"markdown","08e0d6ee":"markdown","832c43f6":"markdown","9af7f15b":"markdown","9d1f87ce":"markdown","7236ef71":"markdown","b4cdae72":"markdown","dcfc7226":"markdown","d5317cb7":"markdown","5992131f":"markdown","e04c050d":"markdown","a1cabd77":"markdown","c8a9dbbd":"markdown","3f4a47a1":"markdown"},"source":{"afbd9c98":"import pandas as pd\nimport numpy as np\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport plotly.express as px\n\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.feature_selection import SelectKBest, mutual_info_regression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score","d9dd3bf1":"data = pd.read_csv(\"\/kaggle\/input\/insurance\/insurance.csv\")\n\ndata.head()","10889ef6":"data.describe()","ed054e35":"young_adult = data[(data['age'] >= 18) & (data['age'] <= 39)]\n\nmiddle_aged_adults = data[(data['age'] >= 40) & (data['age'] <= 59)]\n\nold_adults = data[data['age'] >= 60]","69f3ae35":"fig_age = go.Figure()\n\nfig_age.add_trace(go.Histogram(x = data['age']))\n\nfig_age.update_layout(\n    title_text = 'Age Distribution',\n    xaxis_title_text = 'Age',\n    yaxis_title_text = 'Count',\n    bargap = 0.05,\n    template = 'plotly_dark',\n    width = 750,\n    height = 600\n)\n\nfig_age.show()","ca2ea177":"fig_age = go.Figure()\n\nfig_age.add_trace(go.Bar(x = ['Young Adult'],\n                         y = [len(young_adult)],\n                         name = 'Young Adult'))\n\nfig_age.add_trace(go.Bar(x = ['Middle Aged Adults'],\n                         y = [len(middle_aged_adults)],\n                         name = 'Middle Aged Adults'))\n\nfig_age.add_trace(go.Bar(x = ['Old Adults'],\n                         y = [len(old_adults)],\n                         name = 'Old Adults'))\n\nfig_age.update_layout(\n    title_text = 'Total Count - Age Group',\n    xaxis_title_text = 'Group',\n    yaxis_title_text = 'Count',\n    bargap = 0.05,\n    template = 'plotly_dark',\n    width = 750,\n    height = 600\n)\n\nfig_age.show()","85ec2cd8":"fig_age = go.Figure()\n\nfig_age.add_trace(go.Box(y = young_adult['charges'], \n                         boxpoints = 'all', \n                         name = 'Young Adult'))\n\nfig_age.add_trace(go.Box(y = middle_aged_adults['charges'], \n                         boxpoints = 'all', \n                         name = 'Middle Aged Adults'))\n\nfig_age.add_trace(go.Box(y = old_adults['charges'], \n                         boxpoints='all', \n                         name = 'Old Adult'))\n\nfig_age.update_layout(\n    title_text = 'Age Group x Medical Cost',\n    xaxis_title_text = 'Group',\n    yaxis_title_text = 'Medical Cost',\n    template = 'plotly_dark',\n    width = 750,\n    height = 600\n)\n\nfig_age.show()","9311c15e":"male = data[data['sex'] == 'male']\n\nfemale = data[data['sex'] == 'female']","d7d5a9ec":"colors= ['#3da4ff', '#ff3e3b']\n\nlabels = ['Male', 'Female']\n\nvalues = [len(male), \n          len(female)]\n\nfig_sex = go.Figure()\n\nfig_sex.add_trace(go.Pie(labels = labels, \n                         values = values,\n                         hole = .4,\n                         marker_colors = colors))\n\nfig_sex.update_layout(\n    title_text = 'Total Count - Sex',\n    template = 'plotly_dark',\n    width = 750, \n    height = 600\n)\n\nfig_sex.show()","d61e4aaf":"fig_sex = go.Figure()\n\nfig_sex.add_trace(go.Box(y=male['charges'], \n                         boxpoints='all', \n                         marker_color = '#3da4ff', \n                         name='Male'))\n\nfig_sex.add_trace(go.Box(y=female['charges'],\n                         boxpoints='all', \n                         marker_color = '#ff3e3b', \n                         name='Female'))\n\nfig_sex.update_layout(\n    title_text = 'Sex x Medical Cost',\n    xaxis_title_text = 'Sex',\n    yaxis_title='Medical Cost',\n    template = 'plotly_dark',\n    width=750, \n    height=600\n)\n\nfig_sex.show()","6e7077cc":"fig_sex = go.Figure()\n\nfig_sex.add_trace(go.Histogram(x = male['charges'],\n                               name = 'Male', \n                               marker_color = '#3da4ff'))\n\nfig_sex.add_trace(go.Histogram(x = female['charges'],\n                               name = 'Female', \n                               marker_color = '#ff3e3b'))\n\nfig_sex.update_layout(\n    barmode='stack',\n    title_text = 'Sex Distribution',\n    xaxis_title_text = 'Medical Cost',\n    yaxis_title='Count',\n    template = 'plotly_dark',\n    bargap = 0.1,\n    width=750, \n    height=600\n)\n\nfig_sex.show()","e2e50a57":"underweight = data[data['bmi'] <= 18.5]\n\nnormal = data[(data['bmi'] > 18.5) & (data['bmi'] <= 24.9)]\n\noverweight = data[(data['bmi'] >= 25) & (data['bmi'] <= 29.9)]\n\nobese = data[data['bmi'] >= 30]","9a4d616a":"fig_bmi = go.Figure()\n\nfig_bmi.add_trace(go.Bar(x = ['Underweight'],\n                         y = [len(underweight)],\n                         name = 'Underweight',\n                         marker_color = '#ffb99a'))\n\nfig_bmi.add_trace(go.Bar(x = ['Normal'],\n                         y = [len(normal)],\n                         name = 'Normal',\n                         marker_color = '#ff6464'))\n\nfig_bmi.add_trace(go.Bar(x = ['Overweight'],\n                         y = [len(overweight)],\n                         name = 'Overweight',\n                         marker_color = '#db3056'))\n\nfig_bmi.add_trace(go.Bar(x = ['Obese'],\n                         y = [len(obese)],\n                         name = 'Obese',\n                         marker_color = '#851d41'))\n\n\nfig_bmi.update_layout(\n    title_text = 'Total Count - BMI ',\n    xaxis_title_text = 'Weight Status',\n    yaxis_title_text = 'Count',\n    bargap = 0.05,\n    template = 'plotly_dark',\n    width = 750,\n    height = 600\n)\n\nfig_bmi.show()","c5d2b327":"fig_bmi = go.Figure()\n\nfig_bmi.add_trace(go.Box(y = underweight['charges'], \n                         boxpoints = 'all', \n                         marker_color = '#ffb99a',\n                         name = 'Underweight'))\n\nfig_bmi.add_trace(go.Box(y = normal['charges'], \n                         boxpoints = 'all', \n                         marker_color = '#ff6464', \n                         name = 'Normal'))\n\nfig_bmi.add_trace(go.Box(y = overweight['charges'], \n                         boxpoints = 'all', \n                         marker_color = '#db3056', \n                         name = 'Overweight'))\n\nfig_bmi.add_trace(go.Box(y = obese['charges'], \n                         boxpoints = 'all', \n                         marker_color = '#851d41', \n                         name = 'Obese'))\n\nfig_bmi.update_layout(\n    title_text = 'Weight Status x Medical Cost',\n    xaxis_title_text = 'Weight Status',\n    yaxis_title_text = 'Medical Cost',\n    template = 'plotly_dark',\n    width = 750, \n    height = 600\n)\n\nfig_bmi.show()","42c1a76d":"fig_bmi = go.Figure()\n\nfig_bmi.add_trace(go.Scatter(x = underweight['bmi'],\n                             y = underweight['charges'],\n                             marker_color = '#ffb99a',\n                             mode = 'markers',\n                             name = 'Underweight'))\n\nfig_bmi.add_trace(go.Scatter(x = normal['bmi'],\n                             y = normal['charges'],\n                             marker_color = '#ff6464',\n                             mode = 'markers',\n                             name = 'Normal'))\n\nfig_bmi.add_trace(go.Scatter(x = overweight['bmi'],\n                             y = overweight['charges'],\n                             marker_color = '#db3056', \n                             mode = 'markers',\n                             name = 'Overweight'))\n\nfig_bmi.add_trace(go.Scatter(x = obese['bmi'],\n                             y = obese['charges'],\n                             marker_color = '#851d41', \n                             mode = 'markers',\n                             name = 'Obsese'))\n\nfig_bmi.update_layout(\n    title_text = 'Weight Status x Medical Cost',\n    xaxis_title_text = 'Weight Status',\n    yaxis_title_text = 'Medical Cost', \n    template = 'plotly_dark',\n    width = 750, \n    height = 600\n)\n\nfig_bmi.show()","3ab7b2e4":"fig_bmi = go.Figure()\n\nfig_bmi.add_trace(go.Histogram(x = data['bmi'],\n                               marker_color = '#ffb99a'))\n\nfig_bmi.update_layout(\n    title_text='BMI Distribution',\n    xaxis_title_text='BMI',\n    yaxis_title_text='Count', \n    bargap=0.05, \n    template = 'plotly_dark',\n    width=750, \n    height=600\n)\n\nfig_bmi.show()","6e6a26a3":"no_children = data[data['children'] == 0]\n\none_children = data[data['children'] == 1]\n\ntwo_children = data[data['children'] == 2]\n\nmore_children = data[data['children'] == 3]","17483c32":"fig_children = go.Figure()\n\nfig_children.add_trace(go.Bar(x = ['Zero'],\n                         y = [len(no_children)],\n                         name = 'Zero'))\n\nfig_children.add_trace(go.Bar(x = ['One'],\n                         y = [len(one_children)],\n                         name = 'One'))\n\nfig_children.add_trace(go.Bar(x = ['Two'],\n                         y = [len(two_children)],\n                         name = 'Two'))\n\nfig_children.add_trace(go.Bar(x = ['More'],\n                         y = [len(more_children)],\n                         name = 'More'))\n\n\nfig_children.update_layout(\n    title_text = 'Total Count - Children',\n    xaxis_title_text = 'Number Of Childrens',\n    yaxis_title_text = 'Count',\n    bargap = 0.05,\n    template = 'plotly_dark',\n    width = 750,\n    height = 600\n)\n\nfig_children.show()","603285d6":"fig_children = go.Figure()\n\nfig_children.add_trace(go.Box(y = no_children['charges'], \n                              boxpoints = 'all', \n                              name = 'Zero'))\n\nfig_children.add_trace(go.Box(y = one_children['charges'], \n                              boxpoints = 'all', \n                              name = 'One'))\n\nfig_children.add_trace(go.Box(y = two_children['charges'], \n                              boxpoints = 'all', \n                              name = 'Two'))\n\nfig_children.add_trace(go.Box(y = more_children['charges'], \n                              boxpoints = 'all', \n                              name = 'More'))\n\nfig_children.update_layout(\n    title_text = 'Number Of Childrens x Medical Cost',\n    xaxis_title_text = 'Number Of Childrens',\n    yaxis_title_text = 'Medical Cost',\n    template = 'plotly_dark',\n    width = 750, \n    height = 600\n)\n\nfig_children.show()","3f8d4d72":"smoker = data[data['smoker'] == 'yes']\n\nno_smoker = data[data['smoker'] == 'no']","f8d7fc8d":"colors= ['#ff3e3b', '#3da4ff']\n\nlabels = ['Smoker', 'No Smoker']\n\nvalues = [len(smoker), \n          len(no_smoker)]\n\nfig_smoker = go.Figure()\n\nfig_smoker.add_trace(go.Pie(labels = labels, \n                         values = values,\n                         hole = .4,\n                         marker_colors = colors))\n\nfig_smoker.update_layout(\n    title_text = 'Total Count - Smoker',\n    template = 'plotly_dark',\n    width = 750, \n    height = 600\n)\n\nfig_smoker.show()","474fa29d":"fig_smoker = go.Figure()\n\nfig_smoker.add_trace(go.Box(y = smoker['charges'], \n                            boxpoints = 'all', \n                            marker_color = '#ff3e3b', \n                            name = 'Smokers'))\n\nfig_smoker.add_trace(go.Box(y = no_smoker['charges'], \n                            boxpoints = 'all', \n                            marker_color = '#3da4ff', \n                            name = 'No smokers'))\n\nfig_smoker.update_layout(\n    title_text = 'Smoker x Medical Cost',\n    xaxis_title_text = 'Smoker',\n    yaxis_title_text = 'Medical Cost',\n    template = 'plotly_dark',\n    width = 750, \n    height = 600\n)\n\nfig_smoker.show()","524a6ce4":"southwest = data[data['region'] == 'southwest']\n\nsoutheast = data[data['region'] == 'southeast']\n\nnorthwest = data[data['region'] == 'northwest']\n\nnortheast = data[data['region'] == 'northeast']","464a0d20":"fig_region = go.Figure()\n\nfig_region.add_trace(go.Bar(x = ['Southwest'],\n                         y = [len(southwest)],\n                         name = 'Southwest',\n                         marker_color = '#2e3c5c'))\n\nfig_region.add_trace(go.Bar(x = ['southeast'],\n                         y = [len(southeast)],\n                         name = 'Southeast',\n                         marker_color = '#734a80'))\n\nfig_region.add_trace(go.Bar(x = ['northwest'],\n                         y = [len(northwest)],\n                         name = 'Northwest',\n                         marker_color = '#c44e7d'))\n\nfig_region.add_trace(go.Bar(x = ['northeast'],\n                         y = [len(northeast)],\n                         name = 'Northeast',\n                         marker_color = '#fb6956'))\n\n\nfig_region.update_layout(\n    title_text = 'Total Count - Region ',\n    xaxis_title_text = 'Region',\n    yaxis_title_text = 'Count',\n    bargap = 0.05,\n    template = 'plotly_dark',\n    width = 750,\n    height = 600\n)\n\nfig_region.show()","a4aa27b0":"fig_region = go.Figure()\n\nfig_region.add_trace(go.Box(y = southwest['charges'],\n                            marker_color = '#2e3c5c',\n                            boxpoints = 'all', \n                            name = 'Southwest'))\n\nfig_region.add_trace(go.Box(y = southeast['charges'],\n                            marker_color = '#734a80',\n                            boxpoints = 'all', \n                            name = 'Southeast'))\n\nfig_region.add_trace(go.Box(y = northwest['charges'],\n                            marker_color = '#c44e7d',\n                            boxpoints = 'all', \n                            name = 'Northwest'))\n\nfig_region.add_trace(go.Box(y = northeast['charges'],\n                            marker_color = '#fb6956',\n                            boxpoints = 'all', \n                            name = 'Northeast'))\n\nfig_region.update_layout(\n    title_text = 'Region x Medical Cost',\n    xaxis_title_text = 'Region',\n    yaxis_title_text = 'Medical Cost',\n    template = 'plotly_dark',\n    width = 750, \n    height = 600\n)\n\nfig_region.show()","2d8eb134":"fig_cost = go.Figure()\n\nfig_cost.add_trace(go.Histogram(x = data['charges']))\n\nfig_cost.update_layout(\n    title_text = 'Medical Cost Distribution',\n    xaxis_title_text = 'Medical Cost',\n    yaxis_title_text = 'Count', \n    bargap  = 0.05, \n    template = 'plotly_dark',\n    width = 750, \n    height = 600\n)\n\nfig_cost.show()","04136cb0":"fig_null_values = px.imshow(data.isnull(), color_continuous_scale = 'peach')\n\nfig_null_values.update_layout(\n    title = {\n        'text': \"Missing Values\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'}, \n    template = 'plotly_dark',\n    coloraxis_showscale = False, \n    width = 750, \n    height = 600\n)\n\nfig_null_values.show()","c0baadfc":"data = pd.get_dummies(data, columns = ['sex', 'smoker', 'region'])\n\ndata.drop(['sex_male', 'smoker_yes', 'region_southwest'], axis = 1, inplace = True)\n\ndata.head()","11838338":"fig_corr = px.imshow(data.corr(), color_continuous_scale = 'peach')\n\nfig_corr.update_layout(\n    title = {\n        'text': \"Features correlation\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'}, \n    template = 'plotly_dark',\n    coloraxis_showscale = False, \n    width = 750, \n    height = 600\n)\n\nfig_corr.show()","04c90fdd":"X = data[['smoker_no', 'bmi', 'age']]\n\ny = data['charges']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)","64265414":"linear_regression = LinearRegression()\n\nlinear_regression.fit(X_train, y_train)\n\ny_pred_linear = linear_regression.predict(X_test)\n\nrsq_linear = r2_score(y_test, y_pred_linear)\n\nrmse_linear = np.sqrt(mean_squared_error(y_test, y_pred_linear))\n\ncv_linear = cross_val_score(LinearRegression(), X, y, cv = 10).mean()","83d2f3f8":"polynomial_features = PolynomialFeatures(degree = 3)\n\npolynomial_features.fit(X_train)\n\nX_train_poly = polynomial_features.transform(X_train)\nX_test_poly = polynomial_features.transform(X_test)\n\nX_poly = polynomial_features.fit_transform(X)\n\npolynomial_regression = LinearRegression().fit(X_train_poly, y_train)\n\ny_pred_poly = polynomial_regression.predict(X_test_poly)\n\nrsq_poly = r2_score(y_test, y_pred_poly)\n\nrmse_poly = np.sqrt(mean_squared_error(y_test, y_pred_poly))\n\ncv_poly = cross_val_score(LinearRegression(), X_poly, y, cv = 10).mean()","06ea4fef":"rfr_parameters = {'n_estimators' : [10, 20, 50, 100],\n                  'max_depth' : [3, 5, 7, 9, 10]\n                 }\n\ngrid_search_rfr = GridSearchCV(estimator = RandomForestRegressor(), \n                           param_grid = rfr_parameters,\n                           cv = 10,\n                           n_jobs = -1)\n\ngrid_search_rfr.fit(X_train, y_train)\n\nrfr = grid_search_rfr.best_estimator_\n\ny_pred_rfr = rfr.predict(X_test)\n\nrsq_rfr = r2_score(y_test, y_pred_rfr)\n\nrmse_rfr = np.sqrt(mean_squared_error(y_test, y_pred_rfr))\n\ncv_rfr = cross_val_score(rfr, X, y, cv = 10).mean()","e77d88b8":"models = [('Linear Regression', rsq_linear, rmse_linear, cv_linear), \n          ('Polynomial Regression', rsq_poly, rmse_poly, cv_poly),\n          ('Random Forest Regression', rsq_rfr, rmse_rfr, cv_rfr)]\n\nmodel_comparasion = pd.DataFrame(models, columns = ['Model', 'R\u00b2', 'RMSE', 'CV Score'])\n\nmodel_comparasion.head()","2c0c91e8":"fig_prediction = make_subplots(rows = 1, cols = 3,\n                               shared_yaxes = True,\n                               subplot_titles = ((\"Linear (R\u00b2 = %.4f)\" %rsq_linear), \n                                                 (\"Polynomial (R\u00b2 = %.4f)\" %rsq_poly),  \n                                                 (\"RFR (R\u00b2 = %.4f)\" %rsq_rfr)))\n\n# Linear Regression\n\nfig_prediction.add_trace(go.Scatter(x = y_test, \n                                    y = y_test, \n                                    marker_color = '#3da4ff', \n                                    name = 'Perfect Prediction'),\n                         row = 1, col = 1)\n\nfig_prediction.add_trace(go.Scatter(x = y_test, \n                                    y = y_pred_linear, \n                                    marker_color = '#ff3e3b', \n                                    mode = 'markers', \n                                    name = 'Predictions'),\n                         row = 1, col =1)\n\n# Polynomial Regression\n\nfig_prediction.add_trace(go.Scatter(x = y_test, \n                                    y = y_test, \n                                    marker_color = '#3da4ff', \n                                    name = 'Perfect Prediction', \n                                    showlegend = False),\n                         row = 1, col = 2)\n\nfig_prediction.add_trace(go.Scatter(x = y_test, \n                                    y = y_pred_poly, \n                                    marker_color = '#ff3e3b', \n                                    mode = 'markers', \n                                    name = 'Predictions', \n                                    showlegend = False),\n                         row = 1, col = 2)\n\n# Random Forest Regression\n\nfig_prediction.add_trace(go.Scatter(x = y_test, \n                                    y = y_test, \n                                    marker_color = '#3da4ff', \n                                    name = 'Perfect Prediction',\n                                    showlegend = False),\n                         row = 1, col =3)\n\nfig_prediction.add_trace(go.Scatter(x = y_test, \n                                    y = y_pred_rfr, \n                                    marker_color = '#ff3e3b', \n                                    mode = 'markers', \n                                    name = 'Predictions', \n                                    showlegend = False),\n                         row = 1, col = 3)\n\n\nfig_prediction.update_layout(\n    xaxis_title_text = 'Actual Value',\n    yaxis_title_text = 'Predicted Value',\n    template = 'plotly_dark',\n    width = 1000, \n    height = 375\n)\n\nfig_prediction.show()","07422616":"<center><img src='https:\/\/biotechpossibilities.com\/wp-content\/uploads\/2015\/11\/Bio_BMI-chart_blog.jpg'><\/center>","21e22b09":"<center><img src='https:\/\/www.researchgate.net\/profile\/Wen_Bing_Horng\/publication\/228404297\/figure\/tbl1\/AS:646486622740481@1531145830144\/Age-intervals-and-age-groups.png'><\/center>","520d57d5":"### Random forest regression model","c5124551":"### Checking features correlation","44debf49":"### Enconding data","6aaadd52":"# Comparing models","5e1bf8bc":"### BMI","f95da980":"### Polynomial regression ","9d05840a":"### Data description","bf3d930a":"### Smoker","08e0d6ee":"### Sex","832c43f6":"### Checking for missing values","9af7f15b":"### Defining variables","9d1f87ce":"### Children","7236ef71":"### Age","b4cdae72":"# Personal Medical Cost Prediction\n\nThis project has the objective to demonstrate the use of different models of machine learning to predict personal Medical Cost\n\nThe dataset used in this project was the [\"Medical Cost Personal Datasets\"](https:\/\/www.kaggle.com\/mirichoi0218\/insurance)","dcfc7226":"# Libraries","d5317cb7":"# Data Analysis","5992131f":"### Linear regression","e04c050d":"# Data","a1cabd77":"### Region","c8a9dbbd":"# Machine learning models","3f4a47a1":"### Medical cost"}}