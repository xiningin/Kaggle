{"cell_type":{"6559c0e2":"code","c4637049":"code","ade0f9e0":"code","97eb1219":"code","4e21718c":"code","e710047f":"code","8cc64aed":"code","71f4e7af":"code","801765bc":"code","f08d2dde":"code","1596be97":"code","73ee978c":"code","dab9c65a":"code","a55da2ab":"code","371b87f7":"code","a4ca9f0c":"code","e9d81ac2":"code","49d4c812":"code","5dff8bb8":"code","55d3a389":"code","3acccdc6":"code","faaf5101":"code","86e4eeda":"code","6245a86d":"code","36e7da41":"markdown","21d96e08":"markdown","eeaf32bc":"markdown","29ce1c6a":"markdown","40ba50e2":"markdown","240269d8":"markdown","b5015729":"markdown","cab10370":"markdown","204c8872":"markdown","25cb1e13":"markdown","12ac982c":"markdown","5f4e2b81":"markdown","3d4e935e":"markdown","892b17f6":"markdown","82698a3e":"markdown","4c3b5d4c":"markdown","b9a589e4":"markdown","205c1fa5":"markdown","9c03189f":"markdown","e27b2695":"markdown","ab946bb6":"markdown","42b65b0a":"markdown","ed8e6877":"markdown","b1124d9e":"markdown","26d8cc29":"markdown","ec7a1103":"markdown","6f8e64f1":"markdown","db0566e5":"markdown","14db9a64":"markdown","fec3afef":"markdown","27eb66e2":"markdown","58a0da4e":"markdown","250dafa0":"markdown","6f82cba8":"markdown","da61e7cf":"markdown","29232c23":"markdown","65907523":"markdown","ba7e9de0":"markdown","84e71e76":"markdown","3382d17b":"markdown","e97bc41f":"markdown","577450f8":"markdown","2967939a":"markdown","3db8b67e":"markdown","febc70a8":"markdown","0988c1e6":"markdown","bceaea9b":"markdown","3d2f66ba":"markdown","57a50e8b":"markdown","3f8f2d23":"markdown","8758ce99":"markdown","0c6e1bfb":"markdown","bd493fe5":"markdown","9a4638ac":"markdown","66adebf5":"markdown","2ddbe550":"markdown","94885366":"markdown","98820ffd":"markdown","f00586df":"markdown","def99a26":"markdown","708ba4a1":"markdown","ae38ab8b":"markdown","5c9a0c84":"markdown","7c3f295b":"markdown","09c58324":"markdown","e42cf45f":"markdown","b359793a":"markdown","6c75de44":"markdown","21303347":"markdown","a5ea98dc":"markdown","d318a976":"markdown","11f856b8":"markdown","c6dc5322":"markdown","7c4ae969":"markdown","f8d98708":"markdown","ebf518af":"markdown","24330d1b":"markdown","4287b4f6":"markdown","a7213fb6":"markdown","9dc40224":"markdown","420ae638":"markdown","04d2989a":"markdown","191c17ef":"markdown","9fe31bbb":"markdown","70174c99":"markdown","c4597b0e":"markdown","6d0cbf13":"markdown","e116306b":"markdown","946017de":"markdown","529dc3f8":"markdown","2fc69d04":"markdown","90ae3c51":"markdown","36ff4332":"markdown","22a0b0f0":"markdown","10724837":"markdown","9e54511b":"markdown","99c0d656":"markdown","4054b6a8":"markdown","ac587a41":"markdown","e8480949":"markdown","ffba60d5":"markdown","b0f5f5d8":"markdown","f4483d54":"markdown","0f9fbf5c":"markdown","246b7cab":"markdown","472151ea":"markdown","2d66d0d5":"markdown","0e328809":"markdown","61dcfc5e":"markdown","45cfdba0":"markdown","dbb0301a":"markdown","b0c9cb42":"markdown","94cd8fc0":"markdown","e9564953":"markdown","6ebb67a4":"markdown"},"source":{"6559c0e2":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras","c4637049":"def get_model():\n    # \uac04\ub2e8\ud55c \ubaa8\ub378\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\n    inputs = keras.Input(shape=(32,))\n    outputs = keras.layers.Dense(1)(inputs)\n    model = keras.Model(inputs, outputs)\n    model.compile(optimizer=\"adam\", loss=\"mean_squared_error\")\n    return model\n\n\nmodel = get_model()\n\n# \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0b5\ub2c8\ub2e4.\ntest_input = np.random.random((128, 32))\ntest_target = np.random.random((128, 1))\nmodel.fit(test_input, test_target)\n\n# `save('my_model')` \ud638\ucd9c\uc740 SavedModel \ud3f4\ub354 `my_model`\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\nmodel.save(\"my_model\")\n\n# \ub3d9\uc77c\ud558\uac8c \ubaa8\ub378\uc744 \uc7ac\uac74\ucd95\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nreconstructed_model = keras.models.load_model(\"my_model\")\n\n# \ud655\uc778\ud574\ubd05\uc2dc\ub2e4:\nnp.testing.assert_allclose(\n    model.predict(test_input), reconstructed_model.predict(test_input)\n)\n\n# \uc7ac\uac74\ucd95\ub41c \ubaa8\ub378\uc740 \uc774\ubbf8 \ucef4\ud30c\uc77c\ub418\uc5b4 \uc788\uace0 \ucd5c\uc801\ud654\uae30 \uc0c1\ud0dc\ub97c \ubc1b\uc558\uae30 \ub54c\ubb38\uc5d0,\n# \ud559\uc2b5\uc774 \uc7ac\uac1c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4:\nreconstructed_model.fit(test_input, test_target)","ade0f9e0":"!ls my_model","97eb1219":"class CustomModel(keras.Model):\n    def __init__(self, hidden_units):\n        super(CustomModel, self).__init__()\n        self.hidden_units = hidden_units\n        self.dense_layers = [keras.layers.Dense(u) for u in hidden_units]\n    \n    def call(self, inputs):\n        x = inputs\n        for layer in self.dense_layers:\n            x = layer(x)\n        return x\n    \n    def get_config(self):\n        return {\"hidden_units\": self.hidden_units}\n    \n    @classmethod\n    def from_config(cls, config):\n        return cls(**config)\n\n\nmodel = CustomModel([16, 16, 10])\n# \ud638\ucd9c\ud568\uc73c\ub85c\uc368 \ubaa8\ub378\uc744 \ub9cc\ub4ed\ub2c8\ub2e4\ninput_arr = tf.random.uniform((1, 5))\noutputs = model(input_arr)\nmodel.save(\"my_model\")\n\n# \uc120\ud0dd 1: custom_object \uc778\uc790\ub85c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\nloaded_1 = keras.models.load_model(\n    \"my_model\", custom_objects={\"CustomModel\": CustomModel}\n)\n\n# \uc120\ud0dd 2: CustomModel \ud074\ub798\uc2a4 \uc5c6\uc774 \ubd88\ub7ec\uc635\ub2c8\ub2e4.\n\n# \ub9de\ucda4 \uc815\uc758\ub41c \ubaa8\ub378 \ud074\ub798\uc2a4\ub97c \uc9c0\uc6cc\n# \ubd88\ub7ec\uc62c \ub54c \uc811\uadfc\uc744 \uac00\uc9c0\uc9c0 \ubabb\ud558\uac8c \ubcf4\uc7a5\ud569\ub2c8\ub2e4.\ndel CustomModel\n\nloaded_2 = keras.models.load_model(\"my_model\")\nnp.testing.assert_allclose(loaded_1(input_arr), outputs)\nnp.testing.assert_allclose(loaded_2(input_arr), outputs)\n\nprint(\"Original model:\", model)\nprint(\"Model loaded with custom objects:\", loaded_1)\nprint(\"Model loaded without the custom object class:\", loaded_2)","4e21718c":"model = get_model()\n\n# \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0b5\ub2c8\ub2e4.\ntest_input = np.random.random((128, 32))\ntest_target = np.random.random((128, 1))\nmodel.fit(test_input, test_target)\n\n# `save('my_model.h5')`\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc740 `my_model.h5` h5 \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\nmodel.save(\"my_h5_model.h5\")\n\n# \uc774\uac83\uc740 \ubaa8\ub378\uc744 \ub3d9\uc77c\ud558\uac8c \uc7ac\uac74\ucd95\ud558\ub294\ub370\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nreconstructed_model = keras.models.load_model(\"my_h5_model.h5\")\n\n# \ud655\uc778\ud574\ubd05\uc2dc\ub2e4:\nnp.testing.assert_allclose(\n    model.predict(test_input), reconstructed_model.predict(test_input)\n)\n\n# \uc7ac\uac74\ucd95\ub41c \ubaa8\ub378\uc740 \uc774\ubbf8 \ucef4\ud30c\uc77c\ub418\uc5b4 \uc788\uace0 \ucd5c\uc801\ud654\uae30 \uc0c1\ud0dc\ub97c \ubc1b\uc544\uc654\uae30 \ub54c\ubb38\uc5d0,\n# \ud559\uc2b5\uc774 \uc7ac\uac1c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4:\nreconstructed_model.fit(test_input, test_target)","e710047f":"layer = keras.layers.Dense(3, activation=\"relu\")\nlayer_config = layer.get_config()\nnew_layer = keras.layers.Dense.from_config(layer_config)","8cc64aed":"model = keras.Sequential([keras.Input((32,)), keras.layers.Dense(1)])\nconfig = model.get_config()\nnew_model = keras.Sequential.from_config(config)","71f4e7af":"inputs = keras.Input((32,))\noutputs = keras.layers.Dense(1)(inputs)\nmodel = keras.Model(inputs, outputs)\nconfig = model.get_config()\nnew_model = keras.Model.from_config(config)","801765bc":"model = keras.Sequential([keras.Input((32,)), keras.layers.Dense(1)])\njson_config = model.to_json()\nnew_model = keras.models.model_from_json(json_config)","f08d2dde":"model.save(\"my_model\")\ntensorflow_graph = tf.saved_model.load(\"my_model\")\nx = np.random.uniform(size=(4, 32)).astype(np.float32)\npredicted = tensorflow_graph(x).numpy()","1596be97":"class CustomLayer(keras.layers.Layer):\n    def __init__(self, a):\n        self.var = tf.Variable(a, name=\"var_a\")\n    \n    def call(self, inputs, training=False):\n        if training:\n            return inputs * self.var\n        else:\n            return inputs\n    \n    def get_config(self):\n        return {\"a\": self.var.numpy()}\n    \n    # `cls(**config)`\ub97c \ubc18\ud658\ud558\ub294 \uac83\uc740 \uae30\ubcf8 \ud589\ub3d9\uc774\uae30\uc5d0,\n    # \uc2e4\uc81c\ub85c\ub294 \uc5ec\uae30\uc11c `from_config`\ub97c \uc815\uc758\ud560 \ud544\uc694\ub294 \uc5c6\uc2b5\ub2c8\ub2e4.\n    @classmethod\n    def from_config(cls, config):\n        return cls(**config)\n\n\nlayer = CustomLayer(5)\nlayer.var.assign(2)\n\nserialized_layer = keras.layers.serialize(layer)\nnew_layer = keras.layers.deserialize(\n    serialized_layer, custom_objects={\"CustomLayer\": CustomLayer}\n)","73ee978c":"keras.layers.serialize(layer)","dab9c65a":"class CustomLayer(keras.layers.Layer):\n    def __init__(self, units=32, **kwargs):\n        super(CustomLayer, self).__init__(**kwargs)\n        self.units = units\n    \n    def build(self, input_shape):\n        self.w = self.add_weight(\n            shape=(input_shape[-1], self.units),\n            initializer=\"random_normal\",\n            trainable=True,\n        )\n        self.b = self.add_weight(\n            shape=(self.units,), initializer=\"random_normal\", trainable=True\n        )\n    \n    def call(self, inputs):\n        return tf.matmul(inputs, self.w) + self.b\n    \n    def get_config(self):\n        config = super(CustomLayer, self).get_config()\n        config.update({\"units\": self.units})\n        return config\n\n\ndef custom_activation(x):\n    return tf.nn.tanh(x) ** 2\n\n\n# CustomLayer\uc640 custom_activation\uc73c\ub85c \ubaa8\ub378\uc744 \ub9cc\ub4ed\ub2c8\ub2e4\ninputs = keras.Input((32,))\nx = CustomLayer(32)(inputs)\noutputs = keras.layers.Activation(custom_activation)(x)\nmodel = keras.Model(inputs, outputs)\n\n# \uc124\uc815\uc744 \ubc1b\uc544\uc635\ub2c8\ub2e4\nconfig = model.get_config()\n\n# \ubd88\ub7ec\uc624\ub294 \uc2dc\uac04\uc5d0, `custom_object_scope`\uc73c\ub85c \ub9de\ucda4\ud615 \uac1d\uccb4\ub97c \ub4f1\ub85d\ud569\ub2c8\ub2e4:\ncustom_objects = {\"CustomLayer\": CustomLayer, \"custom_activation\": custom_activation}\nwith keras.utils.custom_object_scope(custom_objects):\n    new_model = keras.Model.from_config(config)","a55da2ab":"with keras.utils.custom_object_scope(custom_objects):\n    new_model = keras.models.clone_model(model)","371b87f7":"def create_layer():\n    layer = keras.layers.Dense(64, activation=\"relu\", name=\"dense_2\")\n    layer.build((None, 784))\n    return layer\n\n\nlayer_1 = create_layer()\nlayer_2 = create_layer()\n\n# layer 1\uc5d0\uc11c layer 2\ub85c \uac00\uc911\uce58\ub4e4\uc744 \ubcf5\uc0ac\ud569\ub2c8\ub2e4\nlayer_2.set_weights(layer_1.get_weights())","a4ca9f0c":"# \uac04\ub2e8\ud55c functional \ubaa8\ub378\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4\ninputs = keras.Input(shape=(784,), name=\"digits\")\nx = keras.layers.Dense(64, activation=\"relu\", name=\"dense_1\")(inputs)\nx = keras.layers.Dense(64, activation=\"relu\", name=\"dense_2\")(x)\noutputs = keras.layers.Dense(10, name=\"predictions\")(x)\nfunctional_model = keras.Model(inputs=inputs, outputs=outputs, name=\"3_layer_mlp\")\n\n# \ub3d9\uc77c\ud55c \uad6c\uc870\uc758 \uc0c1\uc18d\ub41c \ubaa8\ub378\uc744 \uc815\uc758\ud569\ub2c8\ub2e4\nclass SubclassedModel(keras.Model):\n    def __init__(self, output_dim, name=None):\n        super(SubclassedModel, self).__init__(name=name)\n        self.output_dim = output_dim\n        self.dense_1 = keras.layers.Dense(64, activation=\"relu\", name=\"dense_1\")\n        self.dense_2 = keras.layers.Dense(64, activation=\"relu\", name=\"dense_2\")\n        self.dense_3 = keras.layers.Dense(output_dim, name=\"predictions\")\n    \n    def call(self, inputs):\n        x = self.dense_1(inputs)\n        x = self.dense_2(x)\n        x = self.dense_3(x)\n        return x\n    \n    def get_config(self):\n        return {\"output_dim\": self.output_dim, \"name\": self.name}\n\n\nsubclassed_model = SubclassedModel(10)\n# \uac00\uc911\uce58\ub4e4\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud574 \uc0c1\uc18d\ub41c \ubaa8\ub378\uc744 \ud55c\ubc88 \ud638\ucd9c\ud569\ub2c8\ub2e4.\nsubclassed_model(tf.ones((1, 784)))\n\n# functional_model\uc5d0\uc11c subclassed_model\ub85c \uac00\uc911\uce58\ub4e4\uc744 \ubcf5\uc0ac\ud569\ub2c8\ub2e4.\nsubclassed_model.set_weights(functional_model.get_weights())\n\nassert len(functional_model.weights) == len(subclassed_model.weights)\nfor a, b in zip(functional_model.weights, subclassed_model.weights):\n    np.testing.assert_allclose(a.numpy(), b.numpy())","e9d81ac2":"inputs = keras.Input(shape=(784,), name=\"digits\")\nx = keras.layers.Dense(64, activation=\"relu\", name=\"dense_1\")(inputs)\nx = keras.layers.Dense(64, activation=\"relu\", name=\"dense_2\")(x)\noutputs = keras.layers.Dense(10, name=\"predictions\")(x)\nfunctional_model = keras.Model(inputs=inputs, outputs=outputs, name=\"3_layer_mlp\")\n\ninputs = keras.Input(shape=(784,), name=\"digits\")\nx = keras.layers.Dense(64, activation=\"relu\", name=\"dense_1\")(inputs)\nx = keras.layers.Dense(64, activation=\"relu\", name=\"dense_2\")(x)\n\n# \uc5b4\ub5a4 \uac00\uc911\uce58\ub3c4 \ud3ec\ud568\ud558\uc9c0 \uc54a\ub294 dropout \uce35\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4.\nx = keras.layers.Dropout(0.5)(x)\noutputs = keras.layers.Dense(10, name=\"predictions\")(x)\nfunctional_model_with_dropout = keras.Model(\n    inputs=inputs, outputs=outputs, name=\"3_layer_mlp\"\n)\n\nfunctional_model_with_dropout.set_weights(functional_model.get_weights())","49d4c812":"# \uc2e4\ud589 \uac00\ub2a5\ud55c \uc608\uc81c\nsequential_model = keras.Sequential(\n    [\n        keras.Input(shape=(784,), name=\"digits\"),\n        keras.layers.Dense(64, activation=\"relu\", name=\"dense_1\"),\n        keras.layers.Dense(64, activation=\"relu\", name=\"dense_2\"),\n        keras.layers.Dense(10, name=\"predictions\"),\n    ]\n)\nsequential_model.save_weights(\"ckpt\")\nload_status = sequential_model.load_weights(\"ckpt\")\n\n# `assert_consumed`\ub294 \ubaa8\ub4e0 \ubcc0\uc218\uac12\ub4e4\uc774 \uccb4\ud06c\ud3ec\uc778\ud2b8\ub85c\ubd80\ud130 \ubcf5\uc6d0\ub418\uc5c8\ub294\uc9c0 \uac80\uc99d\uc73c\ub85c\uc368 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n# Status \uac1d\uccb4 \uc548\uc758 \ub2e4\ub978 \uba54\uc18c\ub4dc\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294 `tf.train.Checkpoint.restore`\uc744 \ubcf4\uc138\uc694.\nload_status.assert_consumed()","5dff8bb8":"class CustomLayer(keras.layers.Layer):\n    def __init__(self, a):\n        self.var = tf.Variable(a, name=\"var_a\")\n\n\nlayer = CustomLayer(5)\nlayer_ckpt = tf.train.Checkpoint(layer=layer).save(\"custom_layer\")\n\nckpt_reader = tf.train.load_checkpoint(layer_ckpt)\n\nckpt_reader.get_variable_to_dtype_map()","55d3a389":"inputs = keras.Input(shape=(784,), name=\"digits\")\nx = keras.layers.Dense(64, activation=\"relu\", name=\"dense_1\")(inputs)\nx = keras.layers.Dense(64, activation=\"relu\", name=\"dense_2\")(x)\noutputs = keras.layers.Dense(10, name=\"predictions\")(x)\nfunctional_model = keras.Model(inputs=inputs, outputs=outputs, name=\"3_layer_mlp\")\n\n# \uc124\uc815 \uc808\uc5d0\uc11c \uc815\uc758\ub41c functional \ubaa8\ub378\uc758 \uc77c\ubd80\ub97c \ucd94\ucd9c\ud569\ub2c8\ub2e4.\n# \uc544\ub798\uc758 \uc904\ub4e4\uc740 functional \ubaa8\ub378\uc758 \ub9c8\uc9c0\ub9c9 \ucd9c\ub825\uce35\uc744 \uc81c\uc678\ud55c\n# \uc0c8\ub85c\uc6b4 \ubaa8\ub378\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\npretrained = keras.Model(\n    functional_model.inputs, functional_model.layers[-1].input, name=\"pretrained_model\"\n)\n# \"\ud559\uc2b5\ub41c\" \uac00\uc911\uce58\ub4e4\uc744 \ubb34\uc791\uc704\ub85c \ub300\uc785\ud569\ub2c8\ub2e4.\nfor w in pretrained.weights:\n    w.assign(tf.random.normal(w.shape))\npretrained.save_weights(\"pretrained_ckpt\")\npretrained.summary()\n\n# \uc774\uac83\uc774 \uc624\uc9c1 'pretrained_ckpt'\ub9cc \uc874\uc7ac\ud558\ub294 \ubcc4\ub3c4\uc758 \ud504\ub85c\uadf8\ub7a8\uc774\ub77c\uace0 \uac00\uc815\ud569\ub2c8\ub2e4.\n# \ub2e4\ub978 \ucd9c\ub825 \ucc28\uc6d0\uc744 \uac00\uc9c0\ub294 \uc0c8\ub85c\uc6b4 functional \ubaa8\ub378\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\ninputs = keras.Input(shape=(784,), name=\"digits\")\nx = keras.layers.Dense(64, activation=\"relu\", name=\"dense_1\")(inputs)\nx = keras.layers.Dense(64, activation=\"relu\", name=\"dense_2\")(x)\noutputs = keras.layers.Dense(5, name=\"predictions\")(x)\nmodel = keras.Model(inputs=inputs, outputs=outputs, name=\"new_model\")\n\n# pretrained_ckpt\uc5d0\uc11c \uac00\uc911\uce58\ub97c \ubaa8\ub378\ub85c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\nmodel.load_weights(\"pretrained_ckpt\")\n\n# \ubaa8\ub4e0 \uc0ac\uc804 \ud559\uc2b5\ub418\ub178 \uac00\uc911\uce58\ub4e4\uc774 \ubd88\ub7ec\uc640\uc84c\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\nfor a, b in zip(pretrained.weights, model.weights):\n    np.testing.assert_allclose(a.numpy(), b.numpy())\n\nprint(\"\\n\", \"-\" * 50)\nmodel.summary()\n\n# \uc608\uc81c 2: Sequential \ubaa8\ub378\n# \uc0ac\uc804 \ud559\uc229\ub41c \ubaa8\ub378\uc744 \uc7ac\uc0dd\uc131\ud558\uace0 \uc800\uc7a5\ub41c \uac00\uc911\uce58\ub4e4\uc744 \ubd88\ub7ec\uc635\ub2c8\ub2e4.\ninputs = keras.Input(shape=(784,), name=\"digits\")\nx = keras.layers.Dense(64, activation=\"relu\", name=\"dense_1\")(inputs)\nx = keras.layers.Dense(64, activation=\"relu\", name=\"dense_2\")(x)\npretrained_model = keras.Model(inputs=inputs, outputs=x, name=\"pretrained\")\n\n# Sequential \uc608\uc81c:\nmodel = keras.Sequential([pretrained_model, keras.layers.Dense(5, name=\"predictions\")])\nmodel.summary()\n\npretrained_model.load_weights(\"pretrained_ckpt\")\n\n# \uc8fc\uc758! `model.load_weights('pretrained_ckpt')`\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc740\n# \uc624\ub958\ub97c \ub0b4\uc9c0\ub294 \uc54a\uc9c0\ub9cc \uc608\uc0c1\ud588\ub358\ub300\ub85c \uc791\ub3d9\ud558\uc9c0\ub294 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4.\n# \uac00\uc911\uce58\ub4e4\uc744 \uc870\uc0ac\ud574\ubcf4\uba74, \uc5b4\ub5a4 \uac00\uc911\uce58\ub4e4\ub3c4 \ubd88\ub7ec\uc640\uc9c0\uc9c0 \uc54a\uc744 \uac83\uc744 \ubcf4\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4.\n# `pretrained_model.load_weights()`\uac00 \ud638\ucd9c\ud560 \uc62c\ubc14\ub978 \uba54\uc18c\ub4dc\uc785\ub2c8\ub2e4.","3acccdc6":"# \uadfc\ubcf8\uc801\uc73c\ub85c functional_model\uc758 \uccab\ubc88\uc9f8\uc640 \ub9c8\uc9c0\ub9c9 \uce35\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub294 \uc0c1\uc18d\ub41c \ubaa8\ub378\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\n# \uba3c\uc800, functional_model\uc758 \uccab\ubc88\uc9f8\uc640 \ub9c8\uc9c0\ub9c9 \ubc00\uc9d1 \uce35\ub4e4\uc758 \uac00\uc911\uce58\ub4e4\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4.\nfirst_dense = functional_model.layers[1]\nlast_dense = functional_model.layers[-1]\nckpt_path = tf.train.Checkpoint(\n    dense=first_dense, kernel=last_dense.kernel, bias=last_dense.bias\n).save(\"ckpt\")\n\n# \uc0c1\uc18d\ub41c \ubaa8\ub378\uc744 \uc815\uc758\ud569\ub2c8\ub2e4.\nclass ContrivedModel(keras.Model):\n    def __init__(self):\n        super(ContrivedModel, self).__init__()\n        self.first_dense = keras.layers.Dense(64)\n        self.kernel = self.add_variable(\"kernel\", shape=(64, 10))\n        self.bias = self.add_variable(\"bias\", shape=(10,))\n    \n    def call(self, inputs):\n        x = self.first_dense(inputs)\n        return tf.matmul(x, self.kernel) + self.bias\n\n\nmodel = ContrivedModel()\n# \uc785\ub825 \uc704\uc5d0\uc11c \ubaa8\ub378\uc744 \ud638\ucd9c\ud574 \ubc00\uc9d1 \uce35\uc758 \ubcc0\uc218\ub4e4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\n_ = model(tf.ones((1, 784)))\n\n# \uc804\uacfc \uac19\uc740 \uad6c\uc870\uc758 Checkpoint\ub97c \uc0dd\uc131\ud558\uace0 \uac00\uc911\uce58\ub4e4\uc744 \ubd88\ub7ec\uc635\ub2c8\ub2e4.\ntf.train.Checkpoint(\n    dense=model.first_dense, kernel=model.kernel, bias=model.bias\n).restore(ckpt_path).assert_consumed()","faaf5101":"# \uc2e4\ud589 \uac00\ub2a5\ud55c \uc608\uc81c\nsequential_model = keras.Sequential(\n    [\n        keras.Input(shape=(784,), name=\"digits\"),\n        keras.layers.Dense(64, activation=\"relu\", name=\"dense_1\"),\n        keras.layers.Dense(64, activation=\"relu\", name=\"dense_2\"),\n        keras.layers.Dense(10, name=\"predictions\"),\n    ]\n)\nsequential_model.save_weights(\"weights.h5\")\nsequential_model.load_weights(\"weights.h5\")","86e4eeda":"class NestedDenseLayer(keras.layers.Layer):\n    def __init__(self, units, name=None):\n        super(NestedDenseLayer, self).__init__(name=name)\n        self.dense_1 = keras.layers.Dense(units, name=\"dense_1\")\n        self.dense_2 = keras.layers.Dense(units, name=\"dense_2\")\n    \n    def call(self, inputs):\n        return self.dense_2(self.dense_1(inputs))\n\n\nnested_model = keras.Sequential([keras.Input((784,)), NestedDenseLayer(10, \"nested\")])\nvariable_names = [v.name for v in nested_model.weights]\nprint(\"variables: {}\".format(variable_names))\n\nprint(\"\\nChanging trainable status of one of the nested layers...\")\nnested_model.get_layer(\"nested\").dense_1.trainable = False\n\nvariable_names_2 = [v.name for v in nested_model.weights]\nprint(\"\\nvariables: {}\".format(variable_names_2))\nprint(\"variable ordering changed:\", variable_names != variable_names_2)","6245a86d":"def create_functional_model():\n    inputs = keras.Input(shape=(784,), name=\"digits\")\n    x = keras.layers.Dense(64, activation=\"relu\", name=\"dense_1\")(inputs)\n    x = keras.layers.Dense(64, activation=\"relu\", name=\"dense_2\")(x)\n    outputs = keras.layers.Dense(10, name=\"predictions\")(x)\n    return keras.Model(inputs=inputs, outputs=outputs, name=\"3_layer_mlp\")\n\nfunctional_model = create_functional_model()\nfunctional_model.save_weights(\"pretrained_weights.h5\")\n\n# \ubd84\ub9ac\ub41c \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c:\npretrained_model = create_functional_model()\npretrained_model.load_weights(\"pretrained_weights.h5\")\n\n# \uc6d0\ubcf8 \ubaa8\ub378\uc73c\ub85c\ubd80\ud130 \uce35\ub4e4\uc744 \ucd94\ucd9c\ud574 \uc0c8\ub85c\uc6b4 \ubaa8\ub378\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4:\nextracted_layers = pretrained_model.layers[:-1]\nextracted_layers.append(keras.layers.Dense(5, name=\"dense_3\"))\nmodel = keras.Sequential(extracted_layers)\nmodel.summary()","36e7da41":"#### \uc0c1\ud0dc \uc5c6\ub294 \uce35\uc758 \uacbd\uc6b0","21d96e08":"\ucc98\uc74c \ubd88\ub7ec\uc640\uc9c4 \ubaa8\ub378\uc740 \uc124\uc815\uacfc `CustomModel` \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud574 \ubd88\ub7ec\uc640\uc84c\uc2b5\ub2c8\ub2e4. \ub450\ubc88\uc9f8 \ubaa8\ub378\uc740 \uae30\uc874 \ubaa8\ub378\uacfc \uac19\uc774 \ud589\ub3d9\ud558\ub294 \ubaa8\ub378 \ud074\ub798\uc2a4\ub97c \ub3d9\uc801\uc73c\ub85c \uc0dd\uc131\ud568\uc73c\ub85c\uc368 \ubd88\ub7ec\uc640\uc84c\uc2b5\ub2c8\ub2e4.","eeaf32bc":"\uadfc\ubcf8\uc801\uc73c\ub85c, \ub450 \ubaa8\ub378\uc774 \ub3d9\uc77c\ud55c \uad6c\uc870\ub97c \uac00\uc9c0\ub294 \ud55c, \ub3d9\uc77c\ud55c \uccb4\ud06c\ud3ec\uc778\ud2b8\ub97c \uacf5\uc720\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4.","29ce1c6a":"* \ubaa8\ub4e0 \uac83\uc744 TensorFlow SavedModel \ud615\uc2dd(\ub610\ub294 \uc624\ub798\ub41c Keras H5 \ud615\uc2dd)\uc73c\ub85c \ub2e8\uc77c \ubaa8\uc74c\uc73c\ub85c \uc800\uc7a5. \uc774\uac83\uc774 \ud45c\uc900\uc801\uc778 \uad00\ud589\uc785\ub2c8\ub2e4.\n* \uad6c\uc870 \/ \uc124\uc815 \ub9cc\uc744 \uc800\uc7a5, \uc804\ud615\uc801\uc73c\ub85c JSON \ud30c\uc77c\ub85c\uc368.\n* \uac00\uc911\uce58 \uac12\ub9cc\uc744 \uc800\uc7a5. \uc774\uac83\uc740 \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0ac \ub54c \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4.","40ba50e2":"## \ubaa8\ub378\uc758 \uac00\uc911\uce58 \uac12\ub4e4\ub9cc \uc800\uc7a5 & \ubd88\ub7ec\uc624\uae30","240269d8":"### HDF5 \ud615\uc2dd","b5015729":"#### SavedModel \uc124\uc815\ud558\uae30","cab10370":"\ub9de\ucda4\ud615 \uc815\uc758\ub41c \ud568\uc218\ub4e4(\uc608\ub97c \ub4e4\uc5b4, \ud65c\uc131\ud654 \uc190\uc2e4 \ub610\ub294 \ucd08\uae30\ud654)\uc740 `get_config` \uba54\uc18c\ub4dc\ub97c \ud544\uc694\ub85c \ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub9de\ucda4\ud615 \uac1d\uccb4\ub85c\uc368 \ub4f1\ub85d\ub418\uc5b4 \uc788\uae30\uc5d0 \ud568\uc218 \uc774\ub984\uc73c\ub85c \ubd88\ub7ec\uc624\ub294\ub370\uc5d0 \ucda9\ubd84\ud569\ub2c8\ub2e4.","204c8872":"\ub9cc\uc57d \uc774 \uac00\uc774\ub4dc\ub97c \uc77d\uc744 \uc2dc\uac04\uc774 10\ucd08 \ubc16\uc5d0 \uc5c6\ub2e4\uba74, \uc5ec\uae30 \uc54c\uc544\uc57c \ud558\ub294 \uac83\uc785\ub2c8\ub2e4.","25cb1e13":"\uc608\uc81c:","12ac982c":"\uadf8\ub7fc\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0, \ub9de\ucda4\ud615 \ubaa8\ub378\uc774\ub098 \uce35 \ud074\ub798\uc2a4\ub97c \uc791\uc131\ud560 \ub54c\ub294 `get_config`\uc640 `from_config` \uba54\uc18c\ub4dc\ub4e4\uc744 \uc815\uc758\ud558\ub294 \uac83\uc774 \ud56d\uc0c1 \uc88b\uc740 \uc5f0\uc2b5\uc774 \ub429\ub2c8\ub2e4. \uc774\uac83\uc740 \ub098\uc911\uc758 \uacc4\uc0b0\uc744 \ud544\uc694\ud55c \uacbd\uc6b0\uc5d0 \uc27d\uac8c \uac31\uc2e0\ud560 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4. \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc704\ud574\uc11c\ub294 [\ub9de\ucda4\ud615 \uac1d\uccb4](https:\/\/www.tensorflow.org\/guide\/keras\/save_and_serialize#custom_objects)\uc5d0 \ub300\ud55c \uc808\uc744 \ubcf4\uc138\uc694.","5f4e2b81":"##### `get_config()`\uc640 `from_config()`","3d4e935e":"\uac00\uc911\uce58\ub97c \uba54\ubaa8\ub9ac \uc0c1\uc758 numpy \ubc30\uc5f4\ub85c \ubc1b\ub294 \ub2e4\ub978 \ubc29\ubc95\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uac01 API\ub294 \uc544\ub798\uc5d0 \uc790\uc138\ud558\uac8c \uc124\uba85\ub418\ub294 \uc7a5\uc810\uacfc \ub2e8\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4.","892b17f6":"#### \ub9de\ucda4\ud615 \uce35\uacfc \ud568\uc218 \uc608\uc81c","82698a3e":"**\uc608\uc81c**:","4c3b5d4c":"**\uc608\uc81c**:","b9a589e4":"`layer.trainable`\uc744 \ubc14\uafb8\ub294 \uac83\uc740 \ubaa8\ub378\uc774 \uc911\ucca9\ub41c \uce35\ub4e4\uc744 \uac00\uc9c8 \ub54c\uc5d0\ub294 \ub2e4\ub978 `layer.weights` \uc21c\uc11c\ub97c \ub9cc\ub4e4 \uc218\ub3c4 \uc788\ub2e4\ub294 \uac83\uc744 \uc8fc\ubaa9\ud558\uc138\uc694.","205c1fa5":"\uc774\ub7f0 \uc885\ub958\uc758 \ubaa8\ub378\ub4e4\uc740 \uce35\ub4e4\uc758 \uba85\ubc31\ud55c \uadf8\ub798\ud504\uc785\ub2c8\ub2e4: \uc774\uac83\ub4e4\uc758 \uc124\uc815\uc740 \ud56d\uc0c1 \uad6c\uc870\ud654\ub41c \ud615\ud0dc\uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4.","9c03189f":"\ubaa8\ub378\/\uce35 \uc124\uc815\uc758 \ubd80\uc7ac\uc5d0\uc11c\ub294, call \ud568\uc218\ub294 \ud559\uc2b5\ub418\uace0 \ud3c9\uac00\ub418\uace0 \ucd94\ub860\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub294 \uae30\uc874 \ubaa8\ub378\uacfc \uac19\uac8c \uc874\uc7ac\ud558\ub294 \ubaa8\ub378\uc744 \uc0dd\uc131\ud558\ub294\ub370\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.","e27b2695":"#### \uba54\ubaa8\ub9ac \uc0c1\uc5d0\uc11c \ud638\ud658\ub418\ub294 \uad6c\uc870\ub97c \uac00\uc9c0\ub294 \ud558\ub098\uc758 \ubaa8\ub378\uc5d0\uc11c \ub2e4\ub978 \ubaa8\ub378\ub85c \uac00\uc911\uce58 \uc804\uc774","ab946bb6":"#### \ubaa8\ub378\uacfc \uce35","42b65b0a":"**\uce35 \uc608\uc81c**:","ed8e6877":"\ub514\uc2a4\ud06c\uc5d0 \uc804\uccb4 \ubaa8\ub378\uc744 \uc800\uc7a5\ud558\ub294\ub370\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ub450\uac00\uc9c0 \ud615\uc2dd\uc774 \uc788\uc2b5\ub2c8\ub2e4: **TensorFlow SavedModel \ud615\uc2dd**\uacfc \uc608\uc804 Keras **H5 \ud615\uc2dd**\uc785\ub2c8\ub2e4. \ucd94\ucc9c\ub418\ub294 \ud615\uc2dd\uc740 SavedModel\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 `model.save()`\ub97c \uc0ac\uc6a9\ud560 \ub54c \uae30\ubcf8\uac12\uc785\ub2c8\ub2e4.","b1124d9e":"**\uc608\uc81c**:","26d8cc29":"[`tf.saved_model.load`\uc5d0 \ub300\ud55c \ud398\uc774\uc9c0](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/saved_model\/load)\uc5d0\uc11c \ub354 \ucc3e\uc544\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.","ec7a1103":"# Keras \ubaa8\ub378 \uc800\uc7a5 \ubc0f \ubd88\ub7ec\uc624\uae30","6f8e64f1":"#### SavedModel\uc774 \ud3ec\ud568\ud558\ub294 \uac83","db0566e5":"\uc774 \uc0ac\uc6a9\uc774 \uc9c0\uc591\ub428\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0, \uace4\uacbd\uc5d0\uc11c\ub294 \ub3c4\uc640\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4, \uc608\ub97c \ub4e4\uc5b4, \ub9de\ucda4\ud615 \uac1d\uccb4\uc758 \ucf54\ub4dc\ub97c \uc783\uc5b4\ubc84\ub838\uac70\ub098 [`tf.keras.models.load_model()`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/models\/load_model)\ub85c \ubaa8\ub378\uc744 \ubd88\ub7ec\uc624\ub294 \ub370\uc5d0 \ubb38\uc81c\uac00 \uc0dd\uae34 \uacbd\uc6b0\uc785\ub2c8\ub2e4.","14db9a64":"\ubaa8\ub378 \uad6c\uc870\uc640 \ud559\uc2b5 \uc124\uc815(\ucd5c\uc801\ud654\uae30, \uc190\uc2e4, \ud3c9\uac00 \uc9c0\ud45c\ub4e4\uc744 \ud3ec\ud568)\uc740 `saved_model.pb`\uc5d0 \uc800\uc7a5\ub429\ub2c8\ub2e4. \uac00\uc911\uce58\ub4e4\uc740 `variables\/` \ub514\ub809\ud1a0\ub9ac \uc548\uc5d0 \uc800\uc7a5\ub429\ub2c8\ub2e4.","fec3afef":"\uc0ac\uc591:","27eb66e2":"**Functional \ubaa8\ub378 \uc608\uc81c**:","58a0da4e":"Keras \ubaa8\ub378\uc740 \uc5ec\ub7ec \uc694\uc18c\ub4e4\ub85c \uad6c\uc131\ub429\ub2c8\ub2e4:","250dafa0":"## \uac1c\uc694","6f82cba8":"**\uc608\uc81c**:","da61e7cf":"#### \ub9de\ucda4\ud615 \uac1d\uccb4 \ub4f1\ub85d","29232c23":"Keras API\ub294 \ubaa8\ub4e0 \uc774 \uc870\uac01\ub4e4\uc744 \ub514\uc2a4\ud06c\uc5d0 \ud55c\ubc88\uc5d0 \uc800\uc7a5\ud558\uac70\ub098 \uba87\uac1c\ub9cc \uc120\ud0dd\uc801\uc73c\ub85c \uc800\uc7a5\ud560 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4:","65907523":"### \ub9de\ucda4\ud615 \uac1d\uccb4\ub4e4","ba7e9de0":"\uc774 \uba54\uc18c\ub4dc\ub294 \uba87\uac00\uc9c0 \uacb0\uc810\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4\ub294 \uac83\uc744 \uc8fc\ubaa9\ud558\uc138\uc694:","84e71e76":"\ub9de\ucda4\ud615 \uc815\uc758\ub41c \uce35\ub4e4\uc774 \uc788\ub294 \ubaa8\ub378 \ub610\ub294 \uc0c1\uc18d\ub41c \ubaa8\ub378\uc744 \uc800\uc7a5\/\ubd88\ub7ec\uc624\uae30 \uc704\ud574\uc11c\ub294, `get_config`\ub97c \uadf8\ub9ac\uace0 \uc120\ud0dd\uc801\uc73c\ub85c `from_config` \uba54\uc18c\ub4dc\ub97c \ub2e4\uc2dc \uc368\uc57c \ud569\ub2c8\ub2e4. \ucd94\uac00\uc801\uc73c\ub85c, Keras\uac00 \uc54c \uc218 \uc788\ub3c4\ub85d \ub9de\ucda4\ud615 \uac1d\uccb4\ub97c \ub4f1\ub85d\ud574\uc57c \ud569\ub2c8\ub2e4.","3382d17b":"TensorFlow \uccb4\ud06c\ud3ec\uc778\ud2b8 \ud615\uc2dd\uc740 \uac1d\uccb4 \uc18d\uc131 \uc774\ub984\ub4e4\uc744 \uc0ac\uc6a9\ud574 \uac00\uc911\uce58\ub4e4\uc744 \uc800\uc7a5\ud558\uace0 \ubcf5\uc6d0\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, [`tf.keras.layers.Dense`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/Dense) \uce35\uc744 \uace0\ub824\ud574\ubcf4\uc138\uc694. \uce35\uc740 \ub450\uac00\uc9c0 \uac00\uc911\uce58\ub97c \uac00\uc9d1\ub2c8\ub2e4: `dense_kernel`\uacfc `dense_bias`. \uce35\uc774 [`tf`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf) \ud615\uc2dd\uc73c\ub85c \uc800\uc7a5\ub418\uc5c8\uc744 \ub54c, \uacb0\uacfc \uccb4\ud06c\ud3ec\uc778\ud2b8\ub294 `\"kernel\"`\uacfc `\"bias\"` \ud0a4\ub4e4\uacfc \ub300\uc751\ud558\ub294 \uac00\uc911\uce58 \uac12\ub4e4\uc744 \uac00\uc9d1\ub2c8\ub2e4. \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc704\ud574\uc11c\ub294 [`TF \uccb4\ud06c\ud3ec\uc778\ud2b8 \uac00\uc774\ub4dc\uc758 \"\ubd88\ub7ec\uc624\ub294 \ubc29\ubc95\"`](https:\/\/www.tensorflow.org\/guide\/checkpoint#loading_mechanics)\uc744 \ubcf4\uc138\uc694.","e97bc41f":"`model.save('my_model')`\uc744 \ud638\ucd9c\ud558\ub294 \uac83\uc740 `my_model`\uc774\ub77c\ub294 \uc774\ub984\uc758 \ud3f4\ub354\ub97c \ub9cc\ub4e4\uba70 \ub2e4\uc74c\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4:","577450f8":"1. \ubd88\ub7ec\uc624\ub294 \ud568\uc218 \uc548\uc5d0\uc11c `custom_objects` \uc778\uc790\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. (\uc704\uc758 \"\uc124\uc815 \uba54\uc18c\ub4dc \uc815\uc758\" \uc808\uc758 \uc608\uc81c\ub97c \ubcf4\uc138\uc694)\n2. [`tf.keras.utils.custom_object_scope`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/utils\/CustomObjectScope) \ub610\ub294 [`tf.keras.utils.CustomObjectScope`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/utils\/CustomObjectScope)\n3. [`tf.keras.utils.register_keras_serializable`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/utils\/register_keras_serializable)","2967939a":"#### SavedModel\uc774 \ub9de\ucda4\ud615 \uac1d\uccb4\ub4e4\uc744 \ub2e4\ub8e8\ub294 \ubc29\ubc95","3db8b67e":"\ud558\ub098\uc758 \uc778\uacf5\ubb3c\ub85c \uc804\uccb4 \ubaa8\ub378\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 \ub2e4\uc74c\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4:\n* \ubaa8\ub378\uc758 \uad6c\uc870\/\uc124\uc815\n* \ubaa8\ub378\uc758 \uac00\uc911\uce58 \uac12\ub4e4 (\ud559\uc2b5\ud558\ub294 \ub3d9\uc548 \ud559\uc2b5\ub418\ub294 \uac83)\n* \ubaa8\ub378\uc758 \ucef4\ud30c\uc77c \uc815\ubcf4 (`compile()`\uc774 \ud638\ucd9c\ub418\uc5c8\ub2e4\uba74)\n* \ub9cc\uc57d \uc788\ub2e4\uba74, \ucd5c\uc801\ud654\uae30\uc640 \uadf8\uac83\uc758 \uc0c1\ud0dc (\uc774\uac83\uc740 \ub5a0\ub09c \uacf3\uc5d0\uc11c \ud559\uc2b5\uc744 \uc7ac\uc2dc\uc791\ud560 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4)","febc70a8":"* `get_config()`\uacfc `from_config()`\n* `tf.keras.models.model_to_json()`\uacfc [`tf.keras.models.model_from_json()`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/models\/model_from_json)","0988c1e6":"## \uc804\uccb4 \ubaa8\ub378 \uc800\uc7a5 & \ubd88\ub7ec\uc624\uae30","bceaea9b":"#### \uc804\uc774 \ud559\uc2b5 \uc608\uc81c","3d2f66ba":"**\ub2e4\uc2dc \ubaa8\ub378 \ubd88\ub7ec\uc624\uae30**:\n```python\nfrom tensorflow import keras\nmodel = keras.models.load_model('path\/to\/location')\n```","57a50e8b":"**\uc608\uc81c**:","3f8f2d23":"`model.save_weights`\uc5d0 \ub300\ud55c \uae30\ubcf8 \ud615\uc2dd\uc740 TensorFlow \uccb4\ud06c\ud3ec\uc778\ud2b8\uc785\ub2c8\ub2e4. \uc800\uc7a5 \ud615\uc2dd\uc744 \ud2b9\uc815\ud558\uae30 \uc704\ud55c \ub450\uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4:","8758ce99":"**Keras \ubaa8\ub378 \uc800\uc7a5**:\n```python\nmodel = ... # \ubaa8\ub378\uc744 \uac00\uc838\uc635\ub2c8\ub2e4 (Sequential, Functional \ubaa8\ub378, \ub610\ub294 Model \ud558\uc704 \ud074\ub798\uc2a4)\nmodel.save('path\/to\/location')\n```","0c6e1bfb":"* `get_config`\ub294 Keras \uad6c\uc870\uc640 \ubaa8\ub378 \uc800\uc7a5 API\ub4e4\uacfc \ud638\ud658\ub418\uae30 \uc704\ud558\uc5ec JSON \uc9c1\ub82c\ud654 \uac00\ub2a5\ud55c \uc0ac\uc804\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n* `from_config(config)`(`classmethod`)\ub294 \uc124\uc815\uc73c\ub85c\ubd80\ud130 \uc0dd\uc131\ub41c \uc0c8\ub85c\uc6b4 \uce35\uc774\ub098 \ubaa8\ub378\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4. \uae30\ubcf8 \uad6c\ud604\uc740 `cls(**config)`\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.","bd493fe5":"**\uc608\uc81c**:","9a4638ac":"SavedModel \ud615\uc2dd\uacfc \ube44\uad50\ud558\uc5ec, H5 \ud30c\uc77c\uc5d0 \ud3ec\ud568\ub418\uc9c0 \uc54a\ub294 \ub450\uac00\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4:","66adebf5":"#### \uc790\uc138\ud55c \ud615\uc2dd","2ddbe550":"#### \uc804\uc774 \ud559\uc2b5 \uc608\uc81c","94885366":"Keras\ub294 `from_config`\ub97c \ud638\ucd9c\ud558\ub294 \uc62c\ubc14\ub978 \ud074\ub798\uc2a4\ub97c \ucc3e\uae30 \uc704\ud574 \uc0ac\uc6a9\ub418\ub294 \ub0b4\uc81c\ub41c \uce35, \ubaa8\ub378, \ucd5c\uc801\ud654\uae30, \uadf8\ub9ac\uace0 \ud3c9\uac00 \ud074\ub798\uc2a4\ub4e4 \ubaa8\ub450\uc758 \uc911\uc694 \ubaa9\ub85d\uc744 \uc720\uc9c0\ud569\ub2c8\ub2e4. \ub9cc\uc57d \ud074\ub798\uc2a4\ub97c \ucc3e\uc744 \uc218 \uc5c6\ub2e4\uba74, \uc624\ub958\uac00 \ubc1c\uc0dd(`Value Error: Unknown layer`)\ud569\ub2c8\ub2e4. \uc774 \ubaa9\ub85d\uc5d0 \ub9de\ucda4\ud615 \ud074\ub798\uc2a4\ub97c \ub4f1\ub85d\ud558\ub294 \ub370\uc5d0\ub294 \uba87\uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4:","98820ffd":"#### \uba54\ubaa8\ub9ac \uc0c1\uc5d0\uc11c, \ud558\ub098\uc758 \uce35\uc5d0\uc11c \ub2e4\ub978 \uce35\uc73c\ub85c \uac00\uc911\uce58 \uc804\uc774","f00586df":"* \ucd94\uc801 \uac00\ub2a5\uc131\uc758 \uc774\uc720\ub85c, \uc0ac\uc6a9\ub418\ub294 \ub9de\ucda4\ud615 \uac1d\uccb4\ub4e4\uc5d0 \ub300\ud55c \uc811\uadfc\uc744 \ud56d\uc0c1 \uac00\uc9c0\uace0 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc7ac\uc0dd\uc131\ud560 \uc218 \uc5c6\ub294 \ubaa8\ub378\uc744 \uc0dd\uc0b0\ud558\uace0 \uc2f6\uc9c0\ub294 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4.\n* [`tf.saved_model.load`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/saved_model\/load)\uc5d0 \uc758\ud574 \ubc18\ud658\ub41c \uac1d\uccb4\ub294 Keras \ubaa8\ub378\uc774 \uc544\ub2d9\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc774\uac83\uc740 \uc0ac\uc6a9\ud558\uae30 \uc27d\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, `.predict()`\ub098 `.fit()`\uc5d0 \ub300\ud55c \uc811\uadfc\uc744 \uac00\uc9c0\uc9c0 \ubabb\ud560 \uac83\uc785\ub2c8\ub2e4.","def99a26":"\ubaa8\ub378 \uc124\uc815(\ub610\ub294 \uad6c\uc870)\uc740 \ubaa8\ub378\uc774 \ud3ec\ud568\ud558\ub294 \uce35\ub4e4\uc774 \ubb34\uc5c7\uc778\uc9c0, \uadf8\ub9ac\uace0 \uc774 \uce35\ub4e4\uc774 \uc5b4\ub5bb\uac8c \uc5f0\uacb0\ub418\uc5c8\ub294\uc9c0\ub97c \uba85\uc2dc\ud569\ub2c8\ub2e4*. \ub9cc\uc57d \ubaa8\ub378\uc758 \uc124\uc815\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \ubaa8\ub378\uc740 \uac00\uc911\uce58\uc5d0 \ub300\ud55c \ucd08\uae30 \uc0c1\ud0dc\uc640 \uc5c6\ub294 \ucef4\ud30c\uc77c \uc815\ubcf4\ub85c \uc0dd\uc131\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","708ba4a1":"\uc774 \uc120\ud0dd\uc9c0\ub4e4\uc758 \uac01\uac01\uc744 \uc0b4\ud3b4\ubd05\uc2dc\ub2e4. \uc5b8\uc81c \uc5b4\ub290 \uac83\uc744 \uc0ac\uc6a9\ud574\uc57c \ud558\uace0, \uc774\uac83\ub4e4\uc774 \uc5b4\ub5bb\uac8c \uc791\ub3d9\ud560\uae4c\uc694?","ae38ab8b":"Keras\uc5d0 \uc758\ud574 \uc0dd\uc131\ub41c TensorFlow \uadf8\ub798\ud504\ub97c \ubd88\ub7ec\uc624\ub294 \uac83\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4. \uc774 \uacbd\uc6b0\uc5d0\ub294, `custom_objects`\ub97c \uc81c\uacf5\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","5c9a0c84":"### SavedModel \ud615\uc2dd","7c3f295b":"\uc544\ub798 \uc608\uc81c\uc785\ub2c8\ub2e4.","09c58324":"* \ubaa8\ub378\uc774 \uc5b4\ub5a4 \uce35\ub4e4\uc744 \ud3ec\ud568\ud558\ub294\uc9c0\uc640 \uc5b4\ub5bb\uac8c \uc5f0\uacb0\ub418\uc5b4 \uc788\ub294\uc9c0 \ud2b9\uc815\ud558\ub294 \uad6c\uc870 \ud639\uc740 \uc124\uc815.\n* \uac00\uc911\uce58 \uac12\ub4e4\uc758 \uc9d1\ud569(\"\ubaa8\ub378\uc758 \uc0c1\ud0dc\").\n* (\ubaa8\ub378\uc744 \ucef4\ud30c\uc77c\ud568\uc73c\ub85c\uc368 \uc815\uc758\ub41c) \ucd5c\uc801\ud654\uae30.\n* (\ubaa8\ub378\uc744 \ucef4\ud30c\uc77c\ud558\uac70\ub098 `add_loss()`\ub098 `add_metric()`\uc744 \ud638\ucd9c\ud568\uc73c\ub85c\uc368 \uc815\uc758\ub41c ) \uc190\uc2e4\ub4e4\uacfc \ud3c9\uac00 \uc9c0\ud45c\ub4e4\uc758 \uc9d1\ud569.","e42cf45f":"\uc77c\ubc18\uc801\uc73c\ub85c \ubaa8\ub378\uc744 \ub9cc\ub4dc\ub294 \ub370\uc5d0 \ub3d9\uc77c\ud55c API\ub97c \uace0\uc218\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4. Sequential\uacfc Functional, \ub610\ub294 Functional\uacfc \uc0c1\uc18d\ub41c \ud074\ub798\uc2a4 \ub4f1 \uc0ac\uc774\uc5d0\uc11c \ubc14\uafbc\ub2e4\uba74, \ud56d\uc0c1 \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \uc7ac\uc0dd\uc131\ud558\uace0 \uadf8 \ubaa8\ub378\uc5d0 \uc0ac\uc804 \ud559\uc2b5\ub41c \uac00\uc911\uce58\ub4e4\uc744 \ubd88\ub7ec\uc635\ub2c8\ub2e4.","b359793a":"\uc0c1\ud0dc \uc5c6\ub294 \uce35\ub4e4\uc740 \uac00\uc911\uce58\ub4e4\uc758 \uc21c\uc11c\ub098 \uac1c\uc218\ub97c \ubc14\uafb8\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0, \ubaa8\ub378\ub4e4\uc740 \ub0a8\uc740\/\uc0ac\ub77c\uc9c4 \uc0c1\ud0dc \uc5c6\ub294 \uce35\ub4e4\uc774 \uc788\ub354\ub77c\ub3c4 \ud638\ud658\ub418\ub294 \uad6c\uc870\ub97c \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","6c75de44":"* \ucd94\ub860\uc744 \uc704\ud574\uc11c\ub9cc \ubaa8\ub378\uc774 \ud544\uc694\ud55c \uacbd\uc6b0: \uc774 \uacbd\uc6b0\uc5d0\uc11c\ub294 \ud559\uc2b5\uc744 \uc7ac\uc2dc\uc791\ud560 \ud544\uc694\uac00 \uc5c6\uc744 \uac83\uc774\ubbc0\ub85c, \ucef4\ud30c\uc77c \uc815\ubcf4\ub098 \ucd5c\uc801\ud654\uae30 \uc0c1\ud0dc\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n* \uc804\uc774 \ud559\uc2b5\uc744 \ud558\ub294 \uacbd\uc6b0: \uc774 \uacbd\uc6b0\uc5d0\uc11c\ub294 \uc774\uc804 \ubaa8\ub378\uc758 \uc0c1\ud0dc\ub97c \uc7ac\uc0ac\uc6a9\ud558\ub294 \uc0c8\ub85c\uc6b4 \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0ac \uac83\uc774\ubbc0\ub85c, \uc774\uc804 \ubaa8\ub378\uc758 \ucef4\ud30c\uc77c \uc815\ubcf4\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","21303347":"* [`tf.keras.layers.Layer.get_weights()`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/Layer#get_weights): numpy \ubc30\uc5f4\uc758 \ubaa9\ub85d\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n* [`tf.keras.layers.Layer.set_weights()`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/Layer#set_weights): \ubaa8\ub378 \uac00\uc911\uce58\ub4e4\uc744 `weights` \uc778\uc790 \uc548\uc758 \uac12\ub4e4\ub85c \uc124\uc815\ud569\ub2c8\ub2e4.","a5ea98dc":"\ub3d9\uc77c\ud55c \uc791\uc5c5 \ud750\ub984\uc774 \ubaa8\ub4e0 \uc9c1\ub82c\ud654 \uac00\ub2a5\ud55c \uce35\uc5d0 \ub300\ud574\uc11c\ub3c4 \uc791\ub3d9\ud569\ub2c8\ub2e4.","d318a976":"**Sequential \ubaa8\ub378 \uc608\uc81c**:","11f856b8":"**\uc608\uc81c**:","c6dc5322":"#### API\ub4e4","7c4ae969":"Keras\ub294 \uc124\uc815\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \uae30\ub85d\uc744 \uc720\uc9c0\ud569\ub2c8\ub2e4. \uc704\uc758 \uc608\uc81c\ub85c\ubd80\ud130, [`tf.keras.layers.serialize`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/serialize)\ub294 \ub9de\ucda4\ud615 \uce35\uc758 \uc9c1\ub82c\ud654 \ud615\ud0dc\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4:","f8d98708":"##### `to_json()`\uacfc [`tf.keras.models.model_from_json()`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/models\/model_from_json)","ebf518af":"#### TensorFlow \uadf8\ub798\ud504\ub9cc \ubd88\ub7ec\uc624\uae30","24330d1b":"\ub2e4\uc74c \uc9c8\ubb38\uc740, \ubaa8\ub378\uc758 \uad6c\uc870\uac00 \uaf64 \ub2e4\ub974\ub2e4\uba74, \uc5b4\ub5bb\uac8c \uac00\uc911\uce58\ub4e4\uc774 \ub2e4\ub978 \ubaa8\ub378\ub4e4\uc5d0 \uc800\uc7a5\ub418\uace0 \ubd88\ub7ec\uc640\uc9c8 \uc218 \uc788\ub294\uc9c0? \uc785\ub2c8\ub2e4. \ud574\ub2f5\uc740 \uc815\ud655\ud55c \uce35\/\ubcc0\uc218\ub4e4\uc744 \uc800\uc7a5\ud558\uace0 \ubcf5\uc6d0\ud558\uae30 \uc704\ud574 [`tf.train.Checkpoint`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/train\/Checkpoint)\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.","4287b4f6":"\ubaa8\ub378\uc758 \uac00\uc911\uce58 \uac12\ub4e4\ub9cc\uc744 \uc800\uc7a5 & \ubd88\ub7ec\uc62c \uc9c0 \uc120\ud0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uacbd\uc6b0\uc5d0 \uc720\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","a7213fb6":"HDF5 \ud615\uc2dd\uc740 \uce35 \uc774\ub984\ub4e4\ub85c \ubb36\uc5ec\uc9c4 \uac00\uc911\uce58\ub4e4\uc744 \uac00\uc9d1\ub2c8\ub2e4. \uac00\uc911\uce58\ub4e4\uc740 \ud559\uc2b5 \uac00\ub2a5\ud55c \uac00\uc911\uce58\ub4e4\uc758 \ubaa9\ub85d\uacfc \ud559\uc2b5 \ubd88\uac00\ub2a5\ud55c \uac00\uc911\uce58\ub4e4\uc758 \ubaa9\ub85d\uc744 \uc774\uc5b4\ubd99\uc5ec (`layer.weights`\uc640 \ub3d9\uc77c) \uc815\ub82c\ub41c \ubc30\uc5f4\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c, \ubaa8\ub378\uc740 \ub3d9\uc77c\ud55c \uce35\ub4e4\uacfc \ud559\uc2b5 \uac00\ub2a5 \uc5ec\ubd80 \uc0c1\ud0dc\ub4e4\uc744 \uccb4\ud06c\ud3ec\uc778\ud2b8\uc5d0 \uc800\uc7a5\ub418\uc5b4 \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, hdf5 \uccb4\ud06c\ud3ec\uc778\ud2b8\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","9dc40224":"\uc774\uc81c \uc790\uc138\ud55c \ub0b4\uc6a9\uc744 \uc0b4\ud3b4\ubd05\uc2dc\ub2e4.","420ae638":"* `save()`\uc5d0 `save_format='h5'`\ub97c \ub118\uaca8\uc8fc\uae30.\n* `save()`\uc5d0 `.h5`\ub098 `.keras`\ub85c \ub05d\ub098\ub294 \ud30c\uc77c \uc774\ub984\uc744 \ub118\uaca8\uc8fc\uae30.","04d2989a":"## \uc124\uc815","191c17ef":"\ub2e4\uc74c\uc744 \ud1b5\ud574 H5 \ud615\uc2dd\uc73c\ub85c \uc804\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","9fe31bbb":"**API**\ub4e4\n* `model.save()` \ub610\ub294 [`tf.keras.models.save_model()`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/models\/save_model)\n* [`tf.keras.models.load_model()`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/models\/load_model)","70174c99":"\\*\uc774\uac83\uc740 Functional\uc774\ub098 Sequential API\ub4e4\uc744 \uc0ac\uc6a9\ud574 \uc815\uc758\ub41c \ubaa8\ub378\ub4e4\uc5d0\ub9cc \uc801\uc6a9\ub418\uba70, \uc0c1\uc18d\ub41c \ubaa8\ub378\ub4e4\uc740 \uc81c\uc678\ub429\ub2c8\ub2e4.","c4597b0e":"\ubaa8\ub378\uacfc \uadf8 \uce35\ub4e4\uc744 \uc800\uc7a5\ud560 \ub54c, SavedModel \ud615\uc2dd\uc740 \ud074\ub798\uc2a4 \uc774\ub984, **call \ud568\uc218**, \uc190\uc2e4, \uac00\uc911\uce58\ub4e4(\uadf8\ub9ac\uace0 \uad6c\ud604\ub418\uc5b4 \uc788\ub2e4\uba74, \uc124\uc815)\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4. call \ud568\uc218\ub294 \ubaa8\ub378\/\uce35\uc758 \uacc4\uc0b0 \uadf8\ub798\ud504\ub97c \uc815\uc758\ud569\ub2c8\ub2e4.","6d0cbf13":"_TensorFlow 2.4\uc5d0\uc11c \ucd94\uac00_ SavedModel \ud568\uc218 \ucd94\uc801\uc744 \uaed0\ub2e4 \ucf24 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 `save_traces` \uc778\uc790\uac00 `model.save`\uc5d0 \ucd94\uac00 \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ud568\uc218\ub4e4\uc740 Keras\uac00 \ub9de\ucda4\ud615 \uac1d\uccb4\ub4e4\uc744 \uc6d0\ubcf8 \ud074\ub798\uc2a4 \uc815\uc758 \uc5c6\uc774\ub3c4 \ub2e4\uc2dc \ubd88\ub7ec\uc62c \uc218 \uc788\ub3c4\ub85d \ud558\uae30 \uc704\ud574 \uc800\uc7a5\ub418\uae30 \ub54c\ubb38\uc5d0, `save_traces=False` \uc77c \ub54c\ub294, \ubaa8\ub4e0 \ub9de\ucda4\ud615 \uac1d\uccb4\ub4e4\uc740 `get_config` \/ `from_config` \uba54\uc18c\ub4dc\ub4e4\uc744 \uc815\uc758\ud574\uc57c \ud569\ub2c8\ub2e4. \ubd88\ub7ec\uc62c \ub54c, \ub9de\ucda4\ud615 \uac1d\uccb4\ub4e4\uc740 `custom_objects` \uc778\uc790\uc5d0 \uc804\ub2ec\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4. `save_traces=False`\ub294 SavedModel\uc5d0 \uc758\ud574 \uc0ac\uc6a9\ub418\ub294 \ub514\uc2a4\ud06c \uacf5\uac04\uacfc \uc800\uc7a5 \uc2dc\uac04\uc744 \uc904\uc5ec\uc90d\ub2c8\ub2e4.","e116306b":"#### \ud55c\uacc4","946017de":"**\uc608\uc81c**:","529dc3f8":"SavedModel \ud615\uc2dd\uc758 \uc790\uc138\ud55c \uc815\ubcf4\ub97c \uc704\ud574\uc11c\ub294, [SavedModel \uac00\uc774\ub4dc (_\ub514\uc2a4\ud06c\uc5d0 SavedModel \ud615\uc2dd_)](https:\/\/www.tensorflow.org\/guide\/saved_model#the_savedmodel_format_on_disk)\ub97c \ubcf4\uc138\uc694.","2fc69d04":"* `model.add_loss()` & `model.add_metric()`\uc744 \ud1b5\ud574 \ucd94\uac00\ub41c **\uc678\ubd80 \uc190\uc2e4 & \ud3c9\uac00 \uc9c0\ud45c**\ub4e4\uc740 (SavedModel\uacfc \ub2ec\ub9ac) \uc800\uc7a5\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ubaa8\ub378\uc5d0 \uc774\ub7f0 \uc190\uc2e4 & \ud3c9\uac00 \uc9c0\ud45c\ub97c \uac00\uc9c0\uace0 \uc788\uace0 \ud559\uc2b5\uc744 \uc7ac\uac1c\ud558\uace0 \uc2f6\ub2e4\uba74, \ubaa8\ub378\uc744 \ubd88\ub7ec\uc628 \uc774\ud6c4\uc5d0 \uc774\ub7f0 \uc190\uc2e4\ub4e4\uc744 \uc9c1\uc811 \ucd94\uac00\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774\uac83\uc740 `self.add_loss()` & `self.add_metric()`\uc744 \ud1b5\ud574 \uce35\ub4e4\uc758 _\ub0b4\ubd80_ \uc5d0 \uc0dd\uc131\ub41c \uc190\uc2e4\/\ud3c9\uac00 \uc9c0\ud45c\ub4e4\uc5d0\ub294 \uc801\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc8fc\ubaa9\ud558\uc138\uc694. \uce35\uc774 \ubd88\ub7ec\uc640\uc9c0\ub294 \ub3d9\uc548, \uc774\ub7f0 \uc190\uc2e4 & \ud3c9\uac00 \uc9c0\ud45c\ub4e4\uc740 \uce35\uc758 `call` \uba54\uc18c\ub4dc\uc758 \uc77c\ubd80\uc774\uae30\uc5d0 \uc720\uc9c0\ub429\ub2c8\ub2e4.\n* \ub9de\ucda4\ud615 \uce35\ub4e4\uacfc \uac19\uc740 **\ub9de\ucda4\ud615 \uac1d\uccb4\uc758 \uacc4\uc0b0 \uadf8\ub798\ud504**\ub294 \uc800\uc7a5\ub41c \ud30c\uc77c\uc5d0 \ud3ec\ud568\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ubd88\ub7ec\uc624\ub294 \ub3d9\uc548\uc5d0, Keras\ub294 \ubaa8\ub378\uc744 \uc7ac\uac74\ucd95\ud558\uae30 \uc704\ud574 \uc774\ub7ec\ud55c \uac1d\uccb4\ub4e4\uc758 Python \ud074\ub798\uc2a4\/\ud568\uc218\ub4e4\uc5d0 \uc811\uadfc\uc774 \ud544\uc694\ud560 \uac83\uc785\ub2c8\ub2e4. [\ub9de\ucda4\ud615 \uac1d\uccb4](https:\/\/www.tensorflow.org\/guide\/keras\/save_and_serialize#custom_objects)\ub97c \ubcf4\uc138\uc694.","90ae3c51":"Keras\ub294 \ubaa8\ub378\uc758 \uad6c\uc870, \uac00\uc911\uce58 \uac12\ub4e4, `compile()` \uc815\ubcf4\ub97c \ud3ec\ud568\ud558\ub294 \ub2e8\uc77c HDF5 \ud30c\uc77c\uc744 \uc800\uc7a5\ud558\ub294 \uac83 \ub610\ud55c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 SavedModel\uc758 \uac00\ubcbc\uc6b4 \ub300\uccb4\uc81c\uc785\ub2c8\ub2e4.","36ff4332":"#### \ub9de\ucda4\ud615 \ud568\uc218","22a0b0f0":"SavedModel\uc740 \ubaa8\ub378 \uad6c\uc870, \uac00\uc911\uce58, call \ud568\uc218\ub4e4\uc758 \ucd94\uc801\ub418\ub294 Tensorflow \ubd80\ubd84 \uadf8\ub798\ud504\ub4e4\uc744 \uc800\uc7a5\ud558\ub294 \ub354 \uc885\ud569\uc801\uc778 \uc800\uc7a5 \ud615\uc2dd\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 Keras\uac00 \ub9de\ucda4\ud615 \uac1d\uccb4\ub4e4\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c \ub0b4\uc81c\ub41c \uce35\ub4e4 \ubaa8\ub450\ub97c \ubcf5\uc6d0\ud560 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4.","10724837":"\uac00\uc911\uce58\ub4e4\uc740 `get_weights`\uc640 `set_weights`\ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \ub2e4\ub978 \uac1d\uccb4\ub4e4 \uac04\uc5d0 \ubcf5\uc0ac\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","9e54511b":"### \uba54\ubaa8\ub9ac \uc0c1 \uac00\uc911\uce58 \uc804\uc774\ub97c \uc704\ud55c API\ub4e4","99c0d656":"### Keras H5 \ud615\uc2dd","4054b6a8":"### TF \uccb4\ud06c\ud3ec\uc778\ud2b8 \ud615\uc2dd","ac587a41":"### \uba54\ubaa8\ub9ac \uc0c1 \ubaa8\ub378 \ubcf5\uc81c","e8480949":"\uc0c1\uc18d\ub41c \ubaa8\ub378\uacfc \uce35\ub4e4\uc758 \uad6c\uc870\ub294 `__init__`\uacfc `call` \uba54\uc18c\ub4dc \uc548\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\ub4e4\uc740 JSON-\ud638\ud658 \uc124\uc815\uc73c\ub85c \uc9c1\ub82c\ud654\ub420 \uc218 \uc5c6\ub294 Python \ubc14\uc774\ud2b8\ucf54\ub4dc\ub85c \uace0\ub824\ub429\ub2c8\ub2e4 -- \ubc14\uc774\ud2b8\ucf54\ub4dc\ub97c \uc9c1\ub82c\ud654\ud558\ub294 \uac83\uc744 \uc2dc\ub3c4\ud574\ubcfc \uc218 \uc788\uc9c0\ub9cc(\uc608\ub97c \ub4e4\uc5b4, `pickle`\uc744 \ud1b5\ud574), \uc774\uac83\uc740 \uc804\uc801\uc73c\ub85c \ubd88\uc548\ud558\uace0 \ubaa8\ub378\uc774 \ub2e4\ub978 \uc2dc\uc2a4\ud15c \uc704\uc5d0\uc11c \ubd88\ub7ec\uc640\uc9c8 \uc218 \uc5c6\ub2e4\ub294 \uac83\uc744 \ub73b\ud569\ub2c8\ub2e4.","ffba60d5":"**\uc608\uc81c**:","b0f5f5d8":"## \uad6c\uc870 \uc800\uc7a5","f4483d54":"## \ubaa8\ub378\uc744 \uc800\uc7a5\ud558\uace0 \ubd88\ub7ec\uc624\ub294 \ubc95","0f9fbf5c":"`config = model.get_config()`\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc740 \ubaa8\ub378\uc758 \uc124\uc815\uc744 \ud3ec\ud568\ud558\ub294 Python \uc0ac\uc804\uc744 \ubc18\ud658\ud560 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \ub3d9\uc77c\ud55c \ubaa8\ub378\uc774 (`Sequential` \ubaa8\ub378\uc5d0 \ub300\ud574) [`Sequential.from_config(config)`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/Sequential#from_config)\ub098 (Functional API \ubaa8\ub378\uc5d0 \ub300\ud574) [`Model.from_config(config)`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/Model#from_config)\ub97c \ud1b5\ud574 \uc7ac\uac74\ucd95\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","246b7cab":"\uc18d\uc131\/\uadf8\ub798\ud504 \uac04\uc120\uc740 **\ubcc0\uc218\uc758 \uc774\ub984\uc774 \uc544\ub2cc, \ubd80\ubaa8 \uac1d\uccb4\uc5d0\uc11c \uc4f0\uc778 \uc774\ub984**\uc744 \ub530\uc11c \uc774\ub984\uc774 \ubd99\uc5ec\uc9d1\ub2c8\ub2e4. \uc544\ub798 \uc608\uc81c\uc5d0\uc11c `CustomLayer`\ub97c \uace0\ub824\ud574\ubcf4\uc138\uc694. \ubcc0\uc218 `CustomLayer.var`\ub294 \ud0a4\uc758 \uc77c\ubd80\ub85c\uc368 `\"var_a\"`\uac00 \uc544\ub2cc, `\"var\"`\ub85c \uc800\uc7a5\ub429\ub2c8\ub2e4.","472151ea":"\uc774\uac83\uc740 \ubaa8\ub378\uc744 \uc6d0\ubcf8 \ubaa8\ub378 \ud074\ub798\uc2a4\uac00 \uc5c6\uc774\ub3c4 \ubd88\ub7ec\uc640\uc9c8 \uc218 \uc788\uac8c \ud558\ub294 JSON \ubb38\uc790\uc5f4\ub85c \ubc14\uafbc\ub2e4\ub294 \uac83\uc744 \uc81c\uc678\ud558\uace0 `get_config` \/ `from_config`\uc640 \uc720\uc0ac\ud569\ub2c8\ub2e4. \ub610\ud55c \ubaa8\ub378\uc5d0\ub9cc \ud574\ub2f9\ub418\uba70, \uce35\uc5d0 \ub300\ud55c \uac83\uc774 \uc544\ub2d9\ub2c8\ub2e4.","2d66d0d5":"* TensorFlow \uccb4\ud06c\ud3ec\uc778\ud2b8\n* HDF5","0e328809":"### Sequential \ubaa8\ub378\uc774\ub098 Functional API \ubaa8\ub378\uc758 \uc124\uc815","61dcfc5e":"[`tf.keras.models.clone_model()`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/models\/clone_model)\uc744 \ud1b5\ud574 \ubaa8\ub378\uc758 \uba54\ubaa8\ub9ac \ub0b4\ubd80 \ubcf5\uc81c\ub97c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 \uc124\uc815\uc744 \uac00\uc838\uc624\uace0 \uc774 \uc124\uc815\uc73c\ub85c\ubd80\ud130 \ubaa8\ub378\uc744 \uc7ac\uc0dd\uc131\ud558\ub294 \uac83(\uadf8\ub798\uc11c \ucef4\ud30c\uc77c \uc815\ubcf4\ub098 \uce35 \uac00\uc911\uce58 \uac12\ub4e4\uc744 \ubcf4\uc874\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4)\uacfc \ub3d9\uc77c\ud569\ub2c8\ub2e4.","45cfdba0":"\uac00\uc911\uce58\ub4e4\uc740 \uc544\ub798\uc758 \ud615\uc2dd \uc548\uc5d0\uc11c `model.save_weights`\ub97c \ud638\ucd9c\ud568\uc73c\ub85c\uc368 \ub514\uc2a4\ud06c\uc5d0 \uc800\uc7a5\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","dbb0301a":"1. `save_format` \uc778\uc790: `save_format=\"tf\"`\ub098 `save_format=\"h5\"`\ub85c \uac12\uc744 \uc124\uc815\ud569\ub2c8\ub2e4.\n2. `path` \uc778\uc790: \uacbd\ub85c\uac00 `.h5`\ub098 `.hdf5`\ub85c \ub05d\ub09c\ub2e4\uba74, HDF5 \ud615\uc2dd\uc774 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ub2e4\ub978 \uc811\ubbf8\uc0ac\ub4e4\uc740 `save_format`\uc774 \uc124\uc815\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc740 \uc774\uc0c1 TensowFlow \uccb4\ud06c\ud3ec\uc778\ud2b8\ub85c \ub429\ub2c8\ub2e4.","b0c9cb42":"#### \uc124\uc815 \uba54\uc18c\ub4dc \uc815\uc758","94cd8fc0":"HDF5\ub85c\ubd80\ud130 \uc0ac\uc804 \ud559\uc2b5\ub41c \uac00\uc911\uce58\ub4e4\uc744 \ubd88\ub7ec\uc62c \ub54c, \uc6d0\ubcf8 \uccb4\ud06c\ud3ec\uc778\ud2b8\ub41c \ubaa8\ub378\uc5d0 \uac00\uc911\uce58\ub4e4\uc744 \ubd88\ub7ec\uc624\uace0, \uadf8 \uc774\ud6c4 \uc0c8\ub85c\uc6b4 \ubaa8\ub378\uc5d0 \uc6d0\ud558\ub294 \uac00\uc911\uce58\/\uce35\ub4e4\uc744 \ucd94\ucd9c\ud558\ub294 \uac83\uc774 \uad8c\uc7a5\ub429\ub2c8\ub2e4.","e9564953":"**\uc608\uc81c**:","6ebb67a4":"### \uac00\uc911\uce58\ub4e4\uc744 \ub514\uc2a4\ud06c\uc5d0 \uc800\uc7a5 & \ub2e4\uc2dc \ubd88\ub7ec\uc624\uae30 \uc704\ud55c API\ub4e4"}}