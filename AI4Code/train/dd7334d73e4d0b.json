{"cell_type":{"6e38df9a":"code","aa30c51c":"code","0981b71d":"code","7cd0a641":"code","85c67dab":"code","71e23ffc":"code","a0239217":"code","52986d7d":"code","0f114c1c":"code","abdc7629":"code","15314cbf":"code","afd833c6":"code","3774734a":"code","1e5361ce":"code","bece606c":"code","5dcd3d8e":"code","e79b9e73":"markdown","705bd064":"markdown","902807a2":"markdown","67ce64c5":"markdown","c8469a01":"markdown"},"source":{"6e38df9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa30c51c":"import gc\nimport dask.dataframe as ddf\nimport os","0981b71d":"FILEPATH = '\/kaggle\/input\/fifa19\/data.csv'","7cd0a641":"def get_filesize(filepath):\n    \n    file_bytes = os.stat(filepath).st_size \/ 1024\n    \n    file_kb = file_bytes \/ (1024)\n    \n    file_mb = file_bytes \/ (1024 * 1024)\n    \n    return file_kb","85c67dab":"get_filesize(FILEPATH)","71e23ffc":"def get_data_pandas(filepath = FILEPATH):\n    \n    df2 = pd.read_csv(filepath)\n    \n    return df2","a0239217":"%time\ndf_pandas = get_data_pandas(FILEPATH)\ngc.collect()","52986d7d":"df_pandas.head()","0f114c1c":"# df_pandas.columns","abdc7629":"dtypes = {\n    'Unnamed: 0' : 'object', \n    'ID' : 'object', \n    'Name' : 'object', \n    'Age' : 'object', \n    'Photo' : 'object', \n    'Nationality' : 'object', \n    'Flag' : 'object',\n    'Overall' : 'object', \n    'Potential' : 'object', \n    'Club' : 'object', \n    'Club Logo' : 'object', \n    'Value' : 'object', \n    'Wage' : 'object', \n    'Special' : 'object',\n    'Preferred Foot' : 'object', \n    'International Reputation' : 'object', \n    'Weak Foot' : 'object',\n    'Skill Moves' : 'object', \n    'Work Rate' : 'object', \n    'Body Type' : 'object', \n    'Real Face' : 'object', \n    'Position' : 'object',\n    'Jersey Number' : 'object', \n    'Joined' : 'object', \n    'Loaned From' : 'object', \n    'Contract Valid Until' : 'object',\n    'Height' : 'object', \n    'Weight' : 'object', \n    'LS' : 'object', \n    'ST' : 'object', \n    'RS' : 'object', \n    'LW' : 'object', \n    'LF' : 'object', \n    'CF' : 'object', \n    'RF' : 'object', \n    'RW' : 'object',\n    'LAM' : 'object', \n    'CAM' : 'object', \n    'RAM' : 'object', \n    'LM' : 'object', \n    'LCM' : 'object', \n    'CM' : 'object', \n    'RCM' : 'object', \n    'RM' : 'object', \n    'LWB' : 'object', \n    'LDM' : 'object',\n    'CDM' : 'object', \n    'RDM' : 'object', \n    'RWB' : 'object', \n    'LB' : 'object', \n    'LCB' : 'object', \n    'CB' : 'object', \n    'RCB' : 'object', \n    'RB' : 'object', \n    'Crossing' : 'object',\n    'Finishing' : 'object', \n    'HeadingAccuracy' : 'object', \n    'ShortPassing' : 'object', \n    'Volleys' : 'object', \n    'Dribbling' : 'object',\n    'Curve' : 'object', \n    'FKAccuracy' : 'object', \n    'LongPassing' : 'object', \n    'BallControl' : 'object', \n    'Acceleration' : 'object',\n    'SprintSpeed' : 'object', \n    'Agility' : 'object', \n    'Reactions' : 'object', \n    'Balance' : 'object', \n    'ShotPower' : 'object',\n    'Jumping' : 'object', \n    'Stamina' : 'object', \n    'Strength' : 'object', \n    'LongShots' : 'object', \n    'Aggression' : 'object',\n    'Interceptions' : 'object', \n    'Positioning' : 'object', \n    'Vision' : 'object', \n    'Penalties' : 'object', \n    'Composure' : 'object',\n    'Marking' : 'object', \n    'StandingTackle' : 'object', \n    'SlidingTackle' : 'object', \n    'GKDiving' : 'object', \n    'GKHandling' : 'object',\n    'GKKicking' : 'object', \n    'GKPositioning' : 'object', \n    'GKReflexes' : 'object', \n    'Release Clause' : 'object'    \n}","15314cbf":"def get_data_dask(filepath = FILEPATH, dtypes = None):\n    \n    df1 = ddf.read_csv(filepath, dtype = dtypes)\n    \n    df1 = df1.compute()\n    \n    return df1","afd833c6":"%time\ndf_dask = get_data_dask(FILEPATH, dtypes)\ngc.collect()","3774734a":"df_dask.shape","1e5361ce":"results = pd.DataFrame(columns = ['Rows', 'Cols', 'Time Taken'])","bece606c":"results.loc['Fifa Dataset - Dask']   = (18207, 89, '7.39 \u00b5s')\nresults.loc['Fifa Dataset - Pandas'] = (18207, 89, '9.06 \u00b5s')","5dcd3d8e":"results","e79b9e73":"**Results:**\n\n* For 18207 rows * 89 columns, we could save 1.30 \u00b5s which is quite good. \n* If we use big dataset, it would help us to save much time.\n* We have to specify the dataset manually which might be a little annoying. However, that's the only one way we could get higher performance","705bd064":"## Results","902807a2":"# **Goal:**\n\nWe all know Dask is good at reading the big dataset comparing Pandas. However, we would like to do a small bench marking with simple %timeit function to figure out how much it is taking on both libraries.","67ce64c5":"### Analyzing Dataset 1","c8469a01":"Note:\n\n* If you think a better way to do the comparision between Dask and Pandas, please let me know. Happy to learn\n\n* Also, if you **like my notebook**, <font style=\"color:blue;size:14px;\">please upvote it<\/font> as it will motivate me to come up with better approach in the upcoming notebooks."}}