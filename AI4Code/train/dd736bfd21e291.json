{"cell_type":{"1c5292f4":"code","80f3a343":"code","5536fb58":"code","d074fec3":"code","060bb8e0":"code","b0bbba1e":"code","e12e2643":"code","20d07c8e":"code","13e05013":"code","8843802a":"code","318c7f67":"code","95f061e7":"code","d6d4ceb5":"code","d8358113":"code","8daa6094":"code","e4d2352f":"code","afd8c80f":"code","c9bb644d":"code","cb1a2539":"code","1f9efabb":"code","edd60b91":"code","a134b5bd":"code","6348e3d0":"code","ba2aa302":"code","5c4cf83f":"code","5a3e0e45":"code","c70a24de":"code","6f10a16b":"code","7c62867d":"code","ec35dcfe":"code","2d35d370":"code","ba87c309":"code","687eebb0":"code","12be7cca":"code","97e1f6bb":"code","89cc8bf3":"code","f3990695":"code","9dcbc81b":"code","41407b7e":"code","01790521":"code","b1926eb8":"code","de07f916":"code","e2564fd4":"code","9a326a34":"code","eba839a0":"code","291a856b":"code","a6f6b4ff":"code","3bd816fe":"code","9edacd5d":"code","8068ba44":"code","ee63643a":"code","6476f57e":"code","2faab6d2":"code","9ed2cacd":"code","6c182953":"code","541fc032":"code","80801a3d":"code","c89053a3":"code","fb5b1bfe":"code","71a9631e":"code","b978e772":"code","7829b50c":"code","87571905":"code","1436bac0":"code","85579899":"code","05130c7a":"code","81643877":"code","1a4a916b":"code","d9fed7f8":"code","49c1717a":"code","9845a383":"code","6d2d00cd":"code","4633d94a":"code","da4f280e":"code","ea55f176":"code","e11c2ec0":"code","1395ea03":"code","61d9187e":"code","fbc41bf2":"code","5dbedba1":"code","c75f31ef":"code","40451f14":"code","e816aad2":"code","4b16d568":"code","a91eca83":"code","82154eec":"code","c9bae0e2":"code","2b00b7a2":"code","bb25bb80":"code","780f4862":"code","14adce6b":"code","b61a37f7":"code","8c8196ef":"code","d933f996":"code","375a45ce":"code","3ba07bd1":"code","af2f7f33":"markdown","ccc35be9":"markdown","4376703a":"markdown","958041cb":"markdown","574698bf":"markdown","cf9c51b6":"markdown","00d5e1cd":"markdown","a91c77ce":"markdown","b261ab7f":"markdown","e78bdb21":"markdown","e8cc3579":"markdown","671e1405":"markdown"},"source":{"1c5292f4":"import numpy as np \nimport pandas as pd\nimport pandas_profiling\nimport warnings\nwarnings.filterwarnings('ignore')\nimport datetime\nfrom datetime import date\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.set_style(\"whitegrid\")\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nimport xgboost as xg\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error","80f3a343":"bpi = pd.read_csv('..\/input\/bpi-process-dataset\/final_bpi.csv',parse_dates=['Timestamp'])\nbpi.rename(columns = {'case:RequestedAmount':'RequestedAmount'}, inplace = True)","5536fb58":"bpi","d074fec3":"bpi.describe(include='all')","060bb8e0":"fig, ax = plt.subplots()\nfig.set_size_inches(10, 8)\nsns.heatmap(bpi.corr(),annot=True,cmap='Blues', fmt='g')","b0bbba1e":"apptime=bpi.groupby('concept:name')['Timestamp'].count().sort_values(ascending=False)\nplt.figure(figsize=(16,8))\nax = sns.barplot(x=apptime.index, y=apptime.values)\nax.set(ylabel=\"Timetamps\", xlabel = \"application event\")\nax.set_title(\"Number of Timestamps per application event\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nplt.show()\n# it seems that event related to workflow are more likely to take significant amount of time since there is a \n# distinctive number of difference of timestamps belonging to Worklow and offer etc.\n# w_validate_application event has taken the most time and w call after offers, this makes sense\n# because validating the application has many steps and making the calls to the customer as part of worklow is a \n# time consuming task because once you make a call you have to wait a certain degree of time for their response to \n# come\n\n# here we can notice our other question about incompleteness in loan application process like W_call incomplete\n# files have frequency of 168529, the most frequenctly occuring event in the loan process at the third number.\n# and A_incomplete has frequency of 23055 events out of 1202267 events.","e12e2643":"bpi.groupby('EventOrigin').Timestamp.agg(['count']).sort_values(by=['count'],ascending=False)\n# it is clear that work flow are more likely to take significant amount of time, they might be the cause of delay\n# in the loan process as well\n# event origin is the genernalized categorization of concept name which is more detailed categorized in \n# defining these three event origins. ","20d07c8e":"bpi.Selected.value_counts()","13e05013":"loanam=bpi.groupby('case:LoanGoal').RequestedAmount.sum().sort_values(ascending=False)\nplt.figure(figsize=(16,8))\nax = sns.barplot(x=loanam.index, y=loanam.values)\nax.set(ylabel=\"Requested Amount\", xlabel = \"Loan goal\")\nax.set_title(\"Requested loan amount for every loan goal\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nplt.show()\n# we were paritally right about our hypothesis, these are the same top three loan goals which have \n# taken most of the time. \n# large sums of money was request for these three loan goals, this also means that large requestedamount takes\n# long time for loan application to process hence delaying the loan process for other loan goals as well.","8843802a":"# lets analyze if accepted offers take more time or unaccepted offers.\nbpi.groupby('Accepted').Timestamp.agg(['count']).sort_values(by='count',ascending=False)\n# from the results its quit clear that time taken by accepted offers was greater than the time taken by the \n# unaccepted offers, it implies that banks give priority to those application which are more likely to be accepted\n# giving their customers more call offers and then waiting for their response. ","318c7f67":"# now we will discuss whether the acceptance rate had anything to do with credit score.\nbpi.groupby('Accepted').CreditScore.agg(['sum']).sort_values(by='sum',ascending=False)\n# it is as clear as day that people with greater creditscore were most likely to get their loan application\n# accepted","95f061e7":"# from the description of the dataset above that application have the largest number of events, we will try find\n# out why.\nlarg=bpi[bpi['case:concept:name']=='Application_1219772874']\nlarg.head(50)","d6d4ceb5":"summ=larg.groupby('concept:name').sum().sort_values(by='RequestedAmount',ascending=False)\nsumm\n# this table tell many things about the targetted application\n# the amount requested by the applicant when the calls were made to the customer for the incomplete files. \n# offered amount at the offer creation was far less than the requested amounts. the customer must have decided to\n# not cooperate any longer.","d8358113":"larg['concept:name'].value_counts()\n# one of the reason of large event occurence must be the worflow call incomplete files, that means that loan\n# application files submitted by this client were mostly incomplete so bank had to call him for incomplete files\n# 100 times.\n# the resulting observation is that client who submit incomplete application files will have to face more trials\n# resulting in delay in their loan process and others as well.","8daa6094":"# first we will try analyse the \na_submitted = bpi[bpi['concept:name'] == 'A_Submitted']\noffer_sent = bpi[bpi['concept:name'] == 'O_Sent (mail and online)']\noffer_sent","e4d2352f":"offer_submit=a_submitted['concept:name'].agg(['count'])\noffer_submit\n# number of application submitted","afd8c80f":"offer_cent=offer_sent['concept:name'].agg(['count'])\noffer_cent\n# number of offers sent\n# number of offers are as twice as the number of application submitted, this is quit understandable because banks\n# can send multiple offers to their potential applicant to make them their customer","c9bb644d":"sub=a_submitted.groupby('case:LoanGoal')['concept:name'].count().sort_values(ascending=False)\nplt.figure(figsize=(16,8))\nax = sns.barplot(x=sub.index, y=sub.values)\nax.set(ylabel=\"Application Submitted\", xlabel = \"Loan Goals\")\nax.set_title(\"Number of application sumitted for each loan goal\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nplt.show()","cb1a2539":"ofs=offer_sent.groupby('case:LoanGoal')['concept:name'].count().sort_values(ascending=False)\nplt.figure(figsize=(16,8))\nax = sns.barplot(x=ofs.index, y=ofs.values)\nax.set(ylabel=\"Offers Sent\", xlabel = \"Loan Goals\")\nax.set_title(\"Number of offers sent for each loan goal\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nplt.show()","1f9efabb":"subdays=[]\ntime_int=a_submitted['Timestamp'].dt.strftime(\"%Y%m%d\").astype(int)\ntime_int1=offer_sent['Timestamp'].dt.strftime(\"%Y%m%d\").astype(int)\n\nfor a,o in zip(time_int,time_int1):\n\n    d0 = date(int(str(a)[0:4]),int(str(a)[4:6]),int(str(a)[6:8]))\n    d1 = date(int(str(o)[0:4]),int(str(o)[4:6]),int(str(o)[6:8]))\n    delta = d1 - d0\n    subdays.append(abs(delta.days))\ndays=pd.DataFrame(subdays,columns=['Days'])\ndays","edd60b91":"series=[]\nfor i in range(20423,1202267):\n    series.append(i)\npred_df=bpi\nr_days=np.random.randint(80,150,size=1181844,)\n\ns_days=pd.Series(r_days,index=series)\n\npred_df['Days']=days\npred_df['Days'].fillna(value=s_days,inplace=True,)\npred_df['Days']=pred_df['Days'].astype(int)\npred_df['Days'][20423:1202267]","a134b5bd":"pred_df['Days'].isna().sum()","6348e3d0":"pred_df['week'] = pred_df['Timestamp'].dt.strftime(\"%G_WK%V\")","ba2aa302":"pred_df","5c4cf83f":"loantime=bpi.groupby('case:LoanGoal').Timestamp.count().sort_values(ascending=False)[0:20436]\nplt.figure(figsize=(16,8))\nax = sns.barplot(x=loantime.index, y=loantime.values)\nax.set(ylabel=\"Timestamps\", xlabel = \"loan goals\")\nax.set_title(\"Number of timestamps per loan goal\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nplt.show()\n# the top three loan goals here seems to take most of the time but why ? does it have something to do with \n# the amount of money they request ? let's find out.","5a3e0e45":"fig, ax = plt.subplots()\nfig.set_size_inches(12, 8)\nsns.heatmap(pred_df[0:20423].corr(),annot=True,cmap='Blues', fmt='g')","c70a24de":"days=bpi.groupby('concept:name').Days.sum().sort_values(ascending=False)\nplt.figure(figsize=(16,8))\nax = sns.barplot(x=days.index, y=days.values)\nax.set(ylabel=\"Days\", xlabel = \"Application Process\")\nax.set_title(\"Number of days spent on each process\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nplt.show()","6f10a16b":"weeks=bpi.groupby('concept:name').week.count().sort_values(ascending=False)\nplt.figure(figsize=(16,8))\nax = sns.barplot(x=weeks.index, y=weeks.values)\nax.set(ylabel=\"Weeks\", xlabel = \"Application Process\")\nax.set_title(\"Number of weeks spent on each process\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nplt.show()","7c62867d":"# How many applications are created per week?\napp=bpi[bpi['concept:name']=='A_Create Application']\nweek_apps=app.groupby('week')['case:concept:name'].count()","ec35dcfe":"plt.figure(figsize=(16,8))\nax = sns.barplot(x=week_apps.index, y=week_apps.values)\nax.set(ylabel=\"Number of applications\", xlabel = \"Week\")\nax.set_title(\"Number of applications per week\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nplt.show()","2d35d370":"# What is the total number of successful applications per week?\nsucc=bpi[bpi['concept:name']=='A_Accepted']\nweek_succ=succ.groupby('week')['case:concept:name'].count()","ba87c309":"plt.figure(figsize=(16,8))\nax = sns.barplot(x=week_succ.index, y=week_succ.values)\nax.set(ylabel=\"Number of applications accepted\", xlabel = \"Week\")\nax.set_title(\"Number of applications accepted per week\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nplt.show()","687eebb0":"accepted = bpi[bpi['Accepted'] == True]\nunaccepted = bpi[bpi['Accepted'] == False]\n# getting cases which have been accepted and unaccepted ","12be7cca":"accepted.head(5)","97e1f6bb":"accepted[accepted['RequestedAmount']==accepted['OfferedAmount']]['Accepted'].value_counts()\n# there is a large acceptence rate when the requested amount is equal to offered ","89cc8bf3":"unaccepted[unaccepted['RequestedAmount']==unaccepted['OfferedAmount']]['Accepted'].value_counts()\n# when the requested amount is equal to offered amount the unaccepted rate was lower as compared figure above","f3990695":"# need find out what was acceptance rate when requestedamount was greater than the offeredamount and vice versa\n# and compare the figures.\naccepted[accepted['RequestedAmount']>accepted['OfferedAmount']]['Accepted'].value_counts()\n# we have 2630 accepted cases ","9dcbc81b":"# need find out what was acceptance rate when requestedamount was lesser than the offeredamount\naccepted[accepted['RequestedAmount']<accepted['OfferedAmount']]['Accepted'].value_counts()\n# we have 6567 cases \n# it's logicaly quit understandable that bank prefers someone who requests amount lesser than the amount offered\n# by the bank","41407b7e":"# need to find out what was unacceptance rate when requestedamount was greater than the offeredamount and vice \n# versa and compare the figures.\nunaccepted[unaccepted['RequestedAmount']>unaccepted['OfferedAmount']]['Accepted'].value_counts()","01790521":"unaccepted[unaccepted['RequestedAmount']<unaccepted['OfferedAmount']]['Accepted'].value_counts()\n# there is a small diference between these two figures in the unaccepted cases, more amount of cases \n# were refused even when the requested amount was lesser than offer amount, and unaccepted cases were lower even\n# though requestedamount was greater than the offeredamount","b1926eb8":"success_app=accepted.groupby('case:concept:name').Accepted.agg(['count']).sort_values(by=['count'],ascending=False)\nsuccess_app.head(10)\n# application with the most accepted cases Application_423354116 \t10 we will analyze this application \n# specifically to understand the behaviour of acceptance in the loan process","de07f916":"best_app=bpi[bpi['case:concept:name']=='Application_423354116']\nbest_app","e2564fd4":"plt.figure(figsize=(12,8))\ndata=[best_app['RequestedAmount'],best_app['FirstWithdrawalAmount'],best_app['NumberOfTerms'],\n      best_app['MonthlyCost'],best_app['CreditScore'],best_app['OfferedAmount']]\nsns.lineplot(data=data)\n# the secret of his acceptance comes from offers he got from the bank as per his application for the loan\n# but he has no creditscore whatsoever, might be because his loan goals are unknown. \n# his application types are all new credit, most of his application lifecycles are complete and he has good number \n# of offers \n# interestingly in the graph the OfferedAmount and FirstWithdrawalAmount are of the same pattern here, it implies\n# that the applicant after each offered amount makes a firstwithdrawal of atleast 33% out of the amount offered.\n# and leaves the rest. ","9a326a34":"loan_goals=accepted.groupby('case:LoanGoal').Accepted.count()\nloan_goals\n# customers who wanted to buy Car had the highest case acceptance \nplt.figure(figsize=(16,8))\nax = sns.barplot(x=loan_goals.index, y=loan_goals.values)\nax.set(ylabel=\"Acceptance rate\", xlabel = \"Loan goal\")\nax.set_title(\"Number of Accepted cases for every loan goal\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nplt.show()","eba839a0":"# earlier in the section we understood that the applicants with the greater creditscore were more likely to get\n# accepted again, if the accept rate of car loan goal is higher than anyone, does it correlate with creditscore\n# as well ?\ncr=accepted.groupby('case:LoanGoal').CreditScore.sum()\nplt.figure(figsize=(16,8))\nax = sns.barplot(x=cr.index, y=cr.values)\nax.set(ylabel=\"Credit Score\", xlabel = \"Loan goal\")\nax.set_title(\"Credit score for every loan goal\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nplt.show()\n# we were right, customers whose loan goal was to get car have the highest credit score that's why their accetance\n# rate was higher as well.","291a856b":"app_type=accepted.groupby('case:ApplicationType').Accepted.agg(['count']).sort_values(by=['count'],ascending=False)\napp_type\n# ","a6f6b4ff":"app_credit=accepted.groupby('case:LoanGoal').CreditScore.agg(['sum']).sort_values(by=['sum'],ascending=False)\napp_credit\n# customer who took loan for car, home improvement and existing loan takeover were more loyal \n# in returning the bills and loans","3bd816fe":"unsuccess_app=unaccepted.groupby('case:concept:name').Accepted.agg(['count']).sort_values(by=['count'],ascending=False)\nunsuccess_app.head(10)\n# lets just take the top one to analyze why this loan application was not accepted ","9edacd5d":"fail_app=bpi[bpi['case:concept:name']=='Application_1867093856']\nfail_app","8068ba44":"fail_app['concept:name'].value_counts()","ee63643a":"# he has no creditscore same as the most accepted applicant, his loan goals are only loan takeover.\n# his application types are all new credit, most of his application lifecycles are complete\n# but the main reason of unaccpetance of application might be the W_call incomplete files as shown above","6476f57e":"unaccepted.groupby('case:LoanGoal').Accepted.agg(['count']).sort_values(by='count',ascending=False)\n# unaccepted cases for each loan goal","2faab6d2":"df_model=(pred_df[['concept:name','case:LoanGoal','RequestedAmount','Accepted',\n                   'Days']][0:20430])","9ed2cacd":"df_model","6c182953":"df_model['Accepted'].fillna(method='ffill',inplace=True)\ndf_model[\"Accept_time\"] = np.where(df_model[\"Accepted\"] == True,1, 0)\ndf_model.drop('Accepted',axis=1,inplace=True)\n# filling up the missing values in the Accepted attribute Accepted application take more time so \n# converting the True -> 1 and False -> 0 into binary numericals will be good feature to have and \n# then dropping the column","541fc032":"df_model[\"hightime_event\"] = np.where(df_model[\"concept:name\"] == 'W_Validate application',1, 0)\ndf_model[\"hightime_event\"] = np.where(df_model[\"concept:name\"] == 'W_Call after offers',1, 0)\ndf_model[\"hightime_event\"] = np.where(df_model[\"concept:name\"] == 'W_Call incomplete files',1, 0)\ndf_model[\"hightime_event\"] = np.where(df_model[\"concept:name\"] == 'W_Complete application',1, 0)\ndf_model.drop('concept:name',axis=1,inplace=True)\n# these four events had highest time consumption rate so creating a feature out of it will be beneficial for \n# our model , where ever these 4 events are we have set the value to 1 and others to 0 and then drop the column","80801a3d":"df_model[\"hightime_loan\"] = np.where(df_model[\"case:LoanGoal\"] == 'Car',1, 0)\ndf_model[\"hightime_loan\"] = np.where(df_model[\"case:LoanGoal\"] == 'Home improvement',1, 0)\ndf_model[\"hightime_loan\"] = np.where(df_model[\"case:LoanGoal\"] == 'Existing loan takeover',1, 0)\ndf_model.drop('case:LoanGoal',axis=1,inplace=True)\n# these three loan goals were highest in time consumption as well so we created feature out of them the same as \n# well and then dropped the column.","c89053a3":"# we know that large requested amount applications tend to take longer time, lets see if it is true\nsns.lmplot(x='RequestedAmount',y='Days',data=df_model[0:20436])\n# there is definitely a correlation between days and requested amount, but that's not enough correlation to get the\n# best results out of the models. we will sort the requested amount and then see if that helps increase \n# correlation","fb5b1bfe":"sort_amount=[]\nfor i in df_model['RequestedAmount']:\n    sort_amount.append(i)\nsortra=pd.DataFrame(sorted(sort_amount),columns=['Days'])\ndf_model.drop('RequestedAmount',axis=1,inplace=True)\ndf_model['RA']=sortra","71a9631e":"# df_model.hightime_loan.value_counts()\ndf_model.head(10)","b978e772":"sns.lmplot(x='RA',y='Days',data=df_model[0:20436])\n# that went quit well as you can see the results here, the correlation is great and their seems to have outliers as\n# well.","7829b50c":"# train = df_model[1:15000]\n# test = df_model[15001:20430]\ntarget_df=(df_model[['RA','Days']])\ntarget_df","87571905":"X = target_df.iloc[:, :-1].values\ny = target_df.iloc[:, 1].values","1436bac0":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,random_state=42)","85579899":"regressor = LinearRegression()\nregressor.fit(X_train, y_train)","05130c7a":"y_pred = regressor.predict(X_test)","81643877":"lr = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})","1a4a916b":"lr","d9fed7f8":"plt.figure(figsize=(16,8))\nsns.lineplot(data=lr)","49c1717a":"regressor.score(X_test,y_test)*100","9845a383":"X2=df_model[['Accept_time','hightime_event','hightime_loan', 'RA']][0:20430]\ny2=df_model['Days'][0:20430]","6d2d00cd":"X_train, X_test, y_train, y_test = train_test_split(X2, y2, test_size=0.3,random_state=42)","4633d94a":"regressor2 = LinearRegression()\nregressor2.fit(X_train, y_train)","da4f280e":"y_pred2 = regressor2.predict(X_test)","ea55f176":"lr2 = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred2})","e11c2ec0":"lr2","1395ea03":"plt.figure(figsize=(16,8))\nsns.lineplot(data=lr2)","61d9187e":"regressor2.score(X_test,y_test)*100","fbc41bf2":"# Create and Train the Support Vector Machine (Regression) using radial basis function\nsvr_rbf = SVR(kernel='rbf', C=1e3, gamma=0.00001)\nsvr_rbf.fit(X_train, y_train)","5dbedba1":"y_pred3 = svr_rbf.predict(X_test)","c75f31ef":"svr = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred3})","40451f14":"svr","e816aad2":"plt.figure(figsize=(16,8))\nsns.lineplot(data=svr)","4b16d568":"svr_rbf.score(X_test,y_test)*100","a91eca83":"dtr = DecisionTreeRegressor(random_state=0)\ndtr.fit(X_train, y_train)","82154eec":"dtr_pred = dtr.predict(X_test)","c9bae0e2":"dtr_g = pd.DataFrame({'Actual': y_test, 'Predicted': dtr_pred})","2b00b7a2":"dtr_g","bb25bb80":"plt.figure(figsize=(16,8))\nsns.lineplot(data=dtr_g)","780f4862":"dtr.score(X_test,y_test)*100","14adce6b":"xgb_r = xg.XGBRegressor(objective ='reg:squarederror',n_estimators = 10, seed = 123)\nxgb_r.fit(X_train, y_train)","b61a37f7":"xgb_pred = xgb_r.predict(X_test)","8c8196ef":"xgb_df = pd.DataFrame({'Actual': y_test, 'Predicted': xgb_pred})","d933f996":"xgb_df","375a45ce":"plt.figure(figsize=(16,8))\nsns.lineplot(data=xgb_df)","3ba07bd1":"xgb_r.score(X_test,y_test)*100","af2f7f33":"Feature engineering for label column \"days\"","ccc35be9":"Decision tree regressor","4376703a":"Support vector regresssor","958041cb":"the above section end here, now we will analysing the thoughput time from application submitted to application\nsent and we will also produce our label feature \"days\" (from application submitted to offer sent)","574698bf":"simple linear regression","cf9c51b6":"XGBoost regressor","00d5e1cd":"analyzing the factors which delay in loan process, frequency of incompletness in loan application and some other factors regarding time taken by other attributes and customer behaviour.","a91c77ce":"This notebook is being created to understand the BPI dataset, we are to understand the processes of loan application and how offers are accepted and declined and other cases related to that.\n\nAnalyse:\n\nWe will be discussing about the throughput times spent in every process from application submitted till cancellation of offer\/refusal of the offer. The other aspect which will be discussed here will be the factors which causes delay in loan process and the frequency of incompleteness of loan applications.\n\nOur target is to :\n\npredict the time from application submitted to offer sent.\n\n-----------------------------------------------------------------\n\nMost of our hypothesis and visualizations will be intended to explore our target. \n\n-----------------------------------------------------------------\n\nColumn descriptions\n\nAction : \nconcept:name :: events happening for each of the case.\nEvent orgin : defines three general state changes for each event. general formation for concept:name.\nLoan Goal : Reason for Loan Application.\nApplication Type: Whether the Application is New Credit or Limit Raise.\nCredit Score: The Credit Score for the particular applicant. Credit score of some person represents how trustworthy that person is in terms of returning that specific bill or loan.\nRequested Amount: How much amount has the Applicant Requested for loan.\nfirstwithdrawalamount : first transaction of loan(money) made by the customer","b261ab7f":"predicting the time from application submitted to offer sent.\n\npotential features of interest:\n1. Timestamp\n2. concept:name\n3. case:LoanGoal\n4. case:concept:name\n5. RequestedAmount\n6. Accepted\n7. MonthlyCost\n8. CreditScore\n9. OfferedAmount\n\nFeature details\n1. W_Validate application , W_Call after offers , W_Call incomplete files , W_Complete application (concept:name) took the most time being related to workflow.\n2. Workflow 768823 Application 239595 Offer 193849 | workflow takes the most time but application and offer are important as well. (EventOrigin)\n3. Car, Home, and existing loan takover LoanGoal takes the most time in the LoanGoal and this is partially correlated to Requested amount as well (case:LoanGoal), the larger the amount requested for loan goal greater the time will be to process that application. \n4. Accepted applications have taken more time than unaccepted applications (Accepted)\n5. people with greater creditscore were most likely to get their loan application accepted\n6. W_Validate application , W_Call after offers , W_Call incomplete files , W_Complete application have taken the most of the weeks","e78bdb21":"this section ends here, Now we analyze the offers that have been accepted and have not been accepted","e8cc3579":"starting the feature engineering for predicting the time from application submitted to offer sent.","671e1405":"multiple linear regression"}}