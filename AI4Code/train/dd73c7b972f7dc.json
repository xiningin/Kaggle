{"cell_type":{"17928547":"code","14bb02e1":"code","4b805ad9":"code","9e82067a":"code","dcfc2f2c":"code","239a8e01":"code","57645fe8":"code","dd0bd821":"code","9342b5fc":"code","cb761ef9":"code","e960b94f":"code","d811727a":"code","95906582":"code","24f55c1a":"code","0418a420":"code","d2db7183":"code","f2aaf564":"code","fe6c67e6":"code","a53a184d":"code","ac36e6fd":"code","218b2dbd":"code","d2fde802":"code","8de8d013":"code","48216b54":"code","100fb589":"code","9aa39089":"code","5099d388":"code","5d460ac3":"code","378d3815":"code","b7d92054":"code","b2593def":"code","ec27e9a1":"code","b1ebbfa8":"code","d349540c":"code","70b58fc1":"code","8f808aef":"code","c80fc903":"code","53cfd4cb":"code","3747d114":"code","4ef15569":"code","b0eda7c8":"code","c25dbcdb":"code","ef83505d":"code","73b80156":"code","a36853e0":"code","b60326bf":"code","c4881274":"code","74ec8155":"code","7cb6d476":"code","d5786f22":"code","f224388d":"code","2bb16f1c":"code","6c138c4a":"code","48ace244":"markdown","a6eb074e":"markdown","17914ab2":"markdown","d7cbc6e5":"markdown","b8938abe":"markdown","cd3a0ab0":"markdown","f904abae":"markdown","9e217552":"markdown","dd3d491e":"markdown","bb0f6fa6":"markdown"},"source":{"17928547":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","14bb02e1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.special import boxcox1p\nfrom scipy.stats import skew\nfrom sklearn.linear_model import Lasso, LassoCV\nfrom sklearn.preprocessing import StandardScaler, RobustScaler","4b805ad9":"#bring in the six packs\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\ntest_c=pd.read_csv(\"..\/input\/test.csv\")\nprint(train.shape)\nprint(test.shape)","9e82067a":"#check the decoration\ntrain.columns","dcfc2f2c":"#descriptive statistics summary\ntrain['SalePrice'].describe()\n","239a8e01":"houses=pd.concat([train,test], sort=False)\nhouses.select_dtypes(include='object').head(10)","57645fe8":"houses.sample(5)","dd0bd821":"houses.select_dtypes(include=['float','int']).head(10)","9342b5fc":"#How many missing values does the dataset have?\nprint(train.isnull().sum().sum())\nprint(test.isnull().sum().sum())","cb761ef9":"#Let's plot these missing values vs column_names\nhouses.select_dtypes(include='object').isnull().sum()[houses.select_dtypes(include='object').isnull().sum()>0]","e960b94f":"numerical = houses.select_dtypes(include=['int','float']).isnull()\nnumerical_sum = numerical.sum()[houses.select_dtypes(include=['int','float']).isnull().sum()>0]\nnumerical_sum","d811727a":"# Which columns have the most missing values?\ndef missing_data(df):\n    total = df.isnull().sum()\n    percent = (df.isnull().sum()\/train.isnull().count()*100)\n    missing_values = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in df.columns:\n        dtype = str(df[col].dtype)\n        types.append(dtype)\n    missing_values['Types'] = types\n    missing_values.sort_values('Total',ascending=False,inplace=True)\n    return(np.transpose(missing_values))\nmissing_data(train)","95906582":"for col in ('Alley','Utilities','MasVnrType','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1',\n            'BsmtFinType2','Electrical','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond',\n           'PoolQC','Fence','MiscFeature'):\n    train[col]=train[col].fillna('None')\n    test[col]=test[col].fillna('None')","24f55c1a":"for col in ('MSZoning','Exterior1st','Exterior2nd','KitchenQual','SaleType','Functional'):\n    train[col]=train[col].fillna(train[col].mode()[0])\n    test[col]=test[col].fillna(train[col].mode()[0])","0418a420":"\nprint(train.isnull().sum().sum())","d2db7183":"for col in ('MasVnrArea','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath','GarageYrBlt','GarageCars','GarageArea'):\n    train[col]=train[col].fillna(0)\n    test[col]=test[col].fillna(0)","f2aaf564":"train['LotFrontage']=train['LotFrontage'].fillna(train['LotFrontage'].mean())\ntest['LotFrontage']=test['LotFrontage'].fillna(train['LotFrontage'].mean())","fe6c67e6":"print(test.isnull().sum().sum())","a53a184d":"train.hist(bins=50, figsize=(20,15))\nplt.tight_layout(pad=0.4)\nplt.show()","ac36e6fd":"test.hist(bins=50, figsize=(20,15))\nplt.tight_layout(pad=0.4)\nplt.show()","218b2dbd":"plt.figure(figsize=[30,15])\nsns.heatmap(train.corr(), annot=True)","d2fde802":"train_eda = train.copy()\nlabel_col = 'SalePrice'\n","8de8d013":"base_color = sns.color_palette()[0]\nplt.figure(figsize=(20,15))\nplt.xticks(rotation=45)\nsns.boxplot(data = train_eda, x = 'BedroomAbvGr', y = 'SalePrice', color = base_color);","48216b54":"''' \ntrain_eda.plot(kind=\"scatter\", x=label_col, y=\"GarageCars\", alpha=0.4,\n             s=train_eda[\"BedroomAbvGr\"], label=\"BedroomAbvGr\", figsize=(20,15),\n             c=\"YrSold\", cmap=plt.get_cmap(\"jet\"), colorbar=True,)\nplt.axis([0, 400000, 0, 1200])\nplt.legend();\n''' ","100fb589":"len_train=train.shape[0]\nprint(train.shape)","9aa39089":"#from 2 features high correlated, removing the less correlated with SalePrice\ntrain.drop(['GarageArea','1stFlrSF','TotRmsAbvGrd','2ndFlrSF'], axis=1, inplace=True)\ntest.drop(['GarageArea','1stFlrSF','TotRmsAbvGrd','2ndFlrSF'], axis=1, inplace=True)","5099d388":"#removing outliers recomended by author\ntrain = train[train['GrLivArea']<4000]","5d460ac3":"len_train=train.shape[0]\nprint(train.shape)","378d3815":"houses=pd.concat([train,test], sort=False)","b7d92054":"houses['MSSubClass']=houses['MSSubClass'].astype(str)","b2593def":"skew=houses.select_dtypes(include=['int','float']).apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nskew_df=pd.DataFrame({'Skew':skew})\nskewed_df=skew_df[(skew_df['Skew']>0.5)|(skew_df['Skew']<-0.5)]\n","ec27e9a1":"skewed_df.head(10)","b1ebbfa8":"skewed_df.index","d349540c":"train=houses[:len_train]\ntest=houses[len_train:]","70b58fc1":"lam=0.1\nfor col in ('MiscVal', 'PoolArea', 'LotArea', 'LowQualFinSF', '3SsnPorch',\n       'KitchenAbvGr', 'BsmtFinSF2', 'EnclosedPorch', 'ScreenPorch',\n       'BsmtHalfBath', 'MasVnrArea', 'OpenPorchSF', 'WoodDeckSF',\n       'LotFrontage', 'GrLivArea', 'BsmtFinSF1', 'BsmtUnfSF', 'Fireplaces',\n       'HalfBath', 'TotalBsmtSF', 'BsmtFullBath', 'OverallCond', 'YearBuilt',\n       'GarageYrBlt'):\n    train[col]=boxcox1p(train[col],lam)\n    test[col]=boxcox1p(test[col],lam)","8f808aef":"train['SalePrice']=np.log(train['SalePrice'])","c80fc903":"houses=pd.concat([train,test], sort=False)\nhouses=pd.get_dummies(houses)","53cfd4cb":"train=houses[:len_train]\ntest=houses[len_train:]","3747d114":"train.drop('Id', axis=1, inplace=True)\ntest.drop('Id', axis=1, inplace=True)","4ef15569":"x=train.drop('SalePrice', axis=1)\ny=train['SalePrice']\ntest=test.drop('SalePrice', axis=1)\n","b0eda7c8":"sc=RobustScaler()\nx=sc.fit_transform(x)\ntest=sc.transform(test)","c25dbcdb":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb\n\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","ef83505d":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\n#model = lasso\n","73b80156":"x.shape","a36853e0":"lasso.fit(x,y)","b60326bf":"score = rmsle_cv(lasso)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","c4881274":"''' \nlasso.fit(x,y)\n\ny_train_las = lasso.predict(x)\ny_test_las = lasso.predict(test)\n\n# Plot residuals\nplt.scatter(y_train_las, y_train_las - y, c = \"blue\", marker = \"s\", label = \"Training data\")\nplt.scatter(y_test_las, y_test_las - test, c = \"lightgreen\", marker = \"s\", label = \"Validation data\")\nplt.title(\"Linear regression with Lasso regularization\")\nplt.xlabel(\"Predicted values\")\nplt.ylabel(\"Residuals\")\nplt.legend(loc = \"upper left\")\nplt.hlines(y = 0, xmin = 10.5, xmax = 13.5, color = \"red\")\nplt.show()\n\n'''","74ec8155":"ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\nmodel = ENet\n","7cb6d476":"ENet.fit(x,y)","d5786f22":"score = rmsle_cv(ENet)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","f224388d":"pred=model.predict(test)\npreds=np.exp(pred)","2bb16f1c":"output=pd.DataFrame({'Id':test_c.Id, 'SalePrice':preds})\noutput.to_csv('submission.csv', index=False)","6c138c4a":"output.head(15)","48ace244":"**1.5 - Transformations**","a6eb074e":"**1.1- Imports**","17914ab2":"**1.2- Checking Types**","d7cbc6e5":"**DATA**","b8938abe":"1.6 - Prepare for model","cd3a0ab0":"**1.4 - Remove some features high correlated and outliers**","f904abae":"**2 - Model**","9e217552":"+ GELI\u015eTIRILEN \u00c7\u00d6Z\u00dcM:\n\nYap\u0131lan i\u015flem adimlar\u0131 s\u0131rs\u0131 ile \u015fu \u015fekildedir:\n 1. 1- \u00d6n \u0130\u015flemler Yapilmasi ve Verilerin Kontrol\u00fc \n    -   1.1 - K\u00fct\u00fcphane Ekleme \n    -   1.2 - Tip Kontrol \u0130\u015flemi\n    -   1.3 - Eksik De\u011ferler\n    -   1.4 - Baz\u0131 \u00f6zellikleri y\u00fcksek korelasyonlu ve ayk\u0131r\u0131 de\u011ferlerin kald\u0131r\u0131lmas\u0131\n    -   1.5 - D\u00f6n\u00fc\u015f\u00fcmler \n    -   1.6 - Model i\u00e7in haz\u0131rlan\u0131n\n    \n 2. 2- Model\n    -   2.1 - LASSO Regresyon\n    -   2.2 - Elastic Net Regression\n    \n 3.   3- Submission","dd3d491e":"**1.3 - Missing Values**","bb0f6fa6":"**3- Submission**"}}