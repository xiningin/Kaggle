{"cell_type":{"70327ed5":"code","5a4f17ab":"code","521d1332":"code","8fb38bc2":"code","22fb1679":"code","949f76b0":"code","54cf8d9d":"code","654f7678":"code","a1a4f48a":"code","9b439cc6":"code","d457c617":"code","0455c757":"code","f37754a0":"code","718fbec6":"code","fd3cc5ef":"code","56b2ef62":"code","399ddcab":"code","cdfdb112":"code","74f59216":"code","a037a0d8":"code","855cafe1":"code","2ab3b194":"code","938751c8":"code","e3b4aa4d":"code","34008af6":"code","4933b60a":"code","9114ac02":"code","88fdc546":"markdown","90ee71fd":"markdown","3235a274":"markdown","563901d7":"markdown","329e3d43":"markdown","8ad27b2f":"markdown","7f59d235":"markdown"},"source":{"70327ed5":"pip install imutils","5a4f17ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","521d1332":"import os\nimport random\nfrom tqdm import tqdm \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport cv2\nimport keras as tf\nfrom tensorflow.keras.preprocessing.image import load_img, ImageDataGenerator, array_to_img\nfrom tensorflow.keras.applications import EfficientNetB1\n\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Flatten, Dense, Conv2D, Dropout, GlobalAveragePooling2D\n\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n#import imutils\n\n","8fb38bc2":"train_dir = '..\/input\/brain-tumor-classification-mri\/Training\/'\ntest_dir = '..\/input\/brain-tumor-classification-mri\/Testing\/'","22fb1679":"classes = os.listdir(\"..\/input\/brain-tumor-classification-mri\/Training\/\")\nfiles_path_dict = {}\n\nfor c in classes:\n  files_path_dict[c] = list(map(lambda x : train_dir+c+'\/'+x, os.listdir(train_dir+c)))\n\nplt.figure(figsize=(17, 17))\nindex = 0\n\nfor c in classes:\n  random.shuffle(files_path_dict[c])\n  path_list = files_path_dict[c][:5]\n\n  for i in range(1, 5):\n    index += 1\n    plt.subplot(4, 4, index)\n    plt.imshow(load_img(path_list[i]))","949f76b0":"def crop_image(image, plot=False):\n    \n    img_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    img_gray = cv2.GaussianBlur(img_gray, (5, 5), 0)\n    \n    img_thresh = cv2.threshold(img_gray, 45, 255, cv2.THRESH_BINARY)[1]\n    img_thresh = cv2.erode(img_thresh, None, iterations=2)\n    img_thresh = cv2.dilate(img_thresh, None, iterations=2)\n\n    contours = cv2.findContours(img_thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n    contours = imutils.grab_contours(contours)\n    c = max(contours, key=cv2.contourArea)\n\n    extLeft = tuple(c[c[:, :, 0].argmin()][0])\n    extRight = tuple(c[c[:, :, 0].argmax()][0])\n    extTop = tuple(c[c[:, :, 1].argmin()][0])\n    extBot = tuple(c[c[:, :, 1].argmax()][0])\n    \n    new_image = image[extTop[1]:extBot[1], extLeft[0]:extRight[0]]            \n\n    if plot:\n        plt.figure()\n        plt.subplot(1, 2, 1)\n        plt.imshow(image)\n        plt.tick_params(axis='both', which='both', top=False, bottom=False, left=False, right=False,labelbottom=False, labeltop=False, labelleft=False, labelright=False)\n        plt.title('Original Image')\n        plt.subplot(1, 2, 2)\n        plt.imshow(new_image)\n        plt.tick_params(axis='both', which='both',top=False, bottom=False, left=False, right=False,labelbottom=False, labeltop=False, labelleft=False, labelright=False)\n        plt.title('Cropped Image')\n        plt.show()\n    \n    return new_image","54cf8d9d":"pip install imutils","654f7678":"import imutils","a1a4f48a":"example_img = cv2.imread(\"..\/input\/brain-tumor-classification-mri\/Training\/meningioma_tumor\/m (108).jpg\")\ncroppped_image = crop_image(example_img, plot = True)","9b439cc6":"os.mkdir('.\/CroppedTraining')","d457c617":"os.mkdir('.\/CroppedTraining\/glioma_tumor')\nos.mkdir('.\/CroppedTraining\/meningioma_tumor')\nos.mkdir('.\/CroppedTraining\/no_tumor')\nos.mkdir('.\/CroppedTraining\/pituitary_tumor')","0455c757":"os.mkdir('.\/CroppedTesting')","f37754a0":"os.mkdir('.\/CroppedTesting\/glioma_tumor')\nos.mkdir('.\/CroppedTesting\/meningioma_tumor')\nos.mkdir('.\/CroppedTesting\/no_tumor')\nos.mkdir('.\/CroppedTesting\/pituitary_tumor')","718fbec6":"os.listdir('.\/')","fd3cc5ef":"# Crop the Training Images and Save it to the Directory we previously cretaed\n\nglioma = train_dir + \"glioma_tumor\"\nmeningioma = train_dir + \"meningioma_tumor\"\nno_tumor = train_dir + 'no_tumor'\npituitary = train_dir + \"pituitary_tumor\"\n\nj = 0\nfor i in tqdm(os.listdir(glioma)):\n  path = os.path.join(glioma, i)\n  img = cv2.imread(path)\n  img = crop_image(img, plot=False)\n  if img is not None:\n    img = cv2.resize(img, (224, 224))\n    save_path = \".\/CroppedTraining\/glioma_tumor\/\" + str(j) + \".jpg\"\n    cv2.imwrite(save_path, img)\n    j = j + 1\n\nj = 0\nfor i in tqdm(os.listdir(meningioma)):\n  path = os.path.join(meningioma, i)\n  img = cv2.imread(path)\n  img = crop_image(img, plot=False)\n  if img is not None:\n    img = cv2.resize(img, (224, 224))\n    save_path = \".\/CroppedTraining\/meningioma_tumor\/\" + str(j) + \".jpg\"\n    cv2.imwrite(save_path, img)\n    j = j + 1\n\nj = 0\nfor i in tqdm(os.listdir(no_tumor)):\n  path = os.path.join(no_tumor, i)\n  img = cv2.imread(path)\n  img = crop_image(img, plot=False)\n  if img is not None:\n    img = cv2.resize(img, (224, 224))\n    save_path = \".\/CroppedTraining\/no_tumor\/\" + str(j) + \".jpg\"\n    cv2.imwrite(save_path, img)\n    j = j + 1\n\nj = 0\nfor i in tqdm(os.listdir(pituitary)):\n  path = os.path.join(pituitary, i)\n  img = cv2.imread(path)\n  img = crop_image(img, plot=False)\n  if img is not None:\n    img = cv2.resize(img, (224, 224))\n    save_path = \".\/CroppedTraining\/pituitary_tumor\/\" + str(j) + \".jpg\"\n    cv2.imwrite(save_path, img)\n    j = j + 1","56b2ef62":"# Crop the Testing Images and Save it to the Directory we previously created\n\nglioma = test_dir + \"glioma_tumor\"\nmeningioma = test_dir + \"meningioma_tumor\"\nno_tumor = test_dir + 'no_tumor'\npituitary = test_dir + \"pituitary_tumor\"\n\nj = 0\nfor i in tqdm(os.listdir(glioma)):\n  path = os.path.join(glioma, i)\n  img = cv2.imread(path)\n  img = crop_image(img, plot=False)\n  if img is not None:\n    img = cv2.resize(img, (224, 224))\n    save_path = \".\/CroppedTesting\/glioma_tumor\/\" + str(j) + \".jpg\"\n    cv2.imwrite(save_path, img)\n    j = j + 1\n\nj = 0\nfor i in tqdm(os.listdir(meningioma)):\n  path = os.path.join(meningioma, i)\n  img = cv2.imread(path)\n  img = crop_image(img, plot=False)\n  if img is not None:\n    img = cv2.resize(img, (224, 224))\n    save_path = \".\/CroppedTesting\/meningioma_tumor\/\" + str(j) + \".jpg\"\n    cv2.imwrite(save_path, img)\n    j = j + 1\n\nj = 0\nfor i in tqdm(os.listdir(no_tumor)):\n  path = os.path.join(no_tumor, i)\n  img = cv2.imread(path)\n  img = crop_image(img, plot=False)\n  if img is not None:\n    img = cv2.resize(img, (224, 224))\n    save_path = \".\/CroppedTesting\/no_tumor\/\" + str(j) + \".jpg\"\n    cv2.imwrite(save_path, img)\n    j = j + 1\n\nj = 0\nfor i in tqdm(os.listdir(pituitary)):\n  path = os.path.join(pituitary, i)\n  img = cv2.imread(path)\n  img = crop_image(img, plot=False)\n  if img is not None:\n    img = cv2.resize(img, (224, 224))\n    save_path = \".\/CroppedTesting\/pituitary_tumor\/\" + str(j) + \".jpg\"\n    cv2.imwrite(save_path, img)\n    j = j + 1","399ddcab":"# Use Image Data Generator to perform this task.\ndatagen = ImageDataGenerator(rotation_range=10, height_shift_range=0.2, horizontal_flip=True, validation_split=0.2)\ntrain_data = datagen.flow_from_directory('.\/CroppedTraining\/',\n                                         target_size = (224, 224),\n                                         batch_size = 32,\n                                         class_mode = 'categorical',\n                                         subset = 'training')\nvalid_data = datagen.flow_from_directory('.\/CroppedTraining\/',\n                                         target_size = (224, 224),\n                                         batch_size = 32,\n                                         class_mode = 'categorical',\n                                         subset = 'validation')\n\ntest_datagen = ImageDataGenerator()\ntest_data = test_datagen.flow_from_directory('.\/CroppedTesting\/',\n                                         target_size = (224, 224),                               \n                                         class_mode = 'categorical')","cdfdb112":"print(train_data.class_indices)\nprint(test_data.class_indices)","74f59216":"# View the augmented data.\nsample_x, sample_y = next(train_data)\nplt.figure(figsize=(12,9))\nfor i in range(6):\n  plt.subplot(2, 3, i+1)\n  sample = array_to_img(sample_x[i])\n  plt.axis('off')\n  plt.grid(False)\n  plt.imshow(sample)\nplt.show()","a037a0d8":"# Build the Model\neffnet = EfficientNetB1(weights=\"imagenet\", include_top=False, input_shape=(224, 224, 3) )\n\nmodel = effnet.output\nmodel = GlobalAveragePooling2D()(model)\nmodel = Dropout(0.5)(model)\nmodel = Dense(4, activation=\"softmax\" )(model)\nmodel = Model(inputs = effnet.input, outputs = model)\n\nmodel.summary()","855cafe1":"model.compile(optimizer=Adam(learning_rate=0.0001), loss = 'categorical_crossentropy', metrics=['accuracy'])\ncheckpoint = ModelCheckpoint('model.h5', monitor='val_accuracy', save_best_only=True, mode='auto', verbose=1)\nearlystop = EarlyStopping(monitor='val_accuracy', patience = 5, mode = 'auto', verbose = 1)","2ab3b194":"# Train the model\nhistory = model.fit(train_data, epochs = 7, validation_data=valid_data, verbose=1, callbacks=[checkpoint, earlystop])","938751c8":"# Plot the training curves\nplt.style.use(\"ggplot\")\nplt.figure(figsize=(12,6))\nepochs = range(1, 8)\nplt.subplot(1, 2, 1)\nplt.plot(epochs, history.history['accuracy'], 'go-')\nplt.plot(epochs, history.history['val_accuracy'], 'ro-')\nplt.title('Model Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend(['Train', 'Val'], loc = 'upper left')\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs, history.history['loss'], 'go-')\nplt.plot(epochs, history.history['val_loss'], 'ro-')\nplt.title('Model Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend(['Train', 'Val'], loc = 'upper left')\nplt.show()","e3b4aa4d":"# Evaluate the model on Test Set\nmodel.evaluate(test_data)","34008af6":"# Obtain Predictions on Test Images\n\nclass_dict = {0: \"glioma_tumor\", 1: \"meningioma_tumor\", 2: \"no_tumor\", 3: \"pituitary_tumor\"}\n\ntest_img1 = cv2.imread('.\/CroppedTesting\/no_tumor\/4.jpg')\nplt.imshow(test_img1)\nplt.grid(False)\ntest_img1 = np.expand_dims(test_img1, axis=0)\npred = model.predict(test_img1)\npred = np.argmax(pred)\npred_class = class_dict[pred]\nprint(pred_class)\nprint(pred)","4933b60a":"pip install dash","9114ac02":"import plotly.graph_objects as go","88fdc546":"Test to see Image cropper is working","90ee71fd":"Link Dataset ","3235a274":"Display and confirm dataset","563901d7":"Function to crop image","329e3d43":"Create folder for cropped training images","8ad27b2f":"Importing Libraries","7f59d235":"Crate folder for cropped testing images"}}