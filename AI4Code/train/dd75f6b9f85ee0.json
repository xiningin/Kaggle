{"cell_type":{"d95617b0":"code","e23bf56b":"code","805d0b31":"code","cfe38895":"code","3a070600":"code","fbdd4731":"code","37bc8df5":"code","bb4b55c1":"code","c805791d":"code","338b5172":"code","dc640d4e":"code","e3d3cbc3":"code","05c2c7cd":"code","54144711":"code","f281a5da":"code","07f523a1":"code","f29e9886":"code","fad1a636":"code","b044a4a9":"code","2971a48b":"code","9455b10c":"code","d70b7cbd":"code","a8b2ed3b":"code","f120eb21":"code","f8fd7801":"code","c77869b1":"code","31eb6c20":"code","dbcc21de":"markdown","c090baf5":"markdown"},"source":{"d95617b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e23bf56b":"import os \nimport sys\nimport torch \nimport matplotlib.pyplot as plt \nimport pandas as pd \nimport numpy as np \nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import train_test_split\nfrom PIL import Image\nsys.path.append(\"..\/input\/timm-pytorch-image-models\/pytorch-image-models-master\")\nfrom timm import create_model\nfrom fastai.vision.all import *","805d0b31":"train_df = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/test.csv\")\nsub_df = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/sample_submission.csv\")","cfe38895":"# checking if the values are all in jpg format \ndef check_values(mode=\"train\"):\n    value= 0 \n    total_vals = os.listdir(f\"..\/input\/petfinder-pawpularity-score\/{mode}\")\n    for x in os.listdir(f\"..\/input\/petfinder-pawpularity-score\/{mode}\"):\n        x = x[-3:]\n\n        if x == \"jpg\":\n            value += 1 \n        else : \n            print(f'another type ${x}')\n    print(f\"total values ${len(total_vals)} \\n and jpg values ${value}\")\n\ncheck_values()\ncheck_values(mode=\"test\")\n        ","3a070600":"def get_whole_path(id, mode = \"train\"):\n    \n    before_url = f\"..\/input\/petfinder-pawpularity-score\/{mode}\/\"\n    return before_url + id + \".jpg\"","fbdd4731":"Image.open(get_whole_path(train_df['Id'][0]))","37bc8df5":"train_df['Path'] = train_df['Id'].apply(lambda x: get_whole_path(id = x , mode = \"train\"))\ntrain_df = train_df.drop(\"Id\", axis=1)\ntrain_df = train_df.sample(frac = 1).reset_index(drop = True)\ntrain_df.head()\n","bb4b55c1":"# checking the distribution for pawpularity scores \ntrain_df['Pawpularity'].plot(kind= \"hist\")\nplt.xlabel(\"pawpularity score\")\nprint(f\"mean of the pawpularity is {train_df['Pawpularity'].mean()}\")\nprint(f\"median of the pawpularity is {train_df['Pawpularity'].median()}\")\nprint(f\"standard deviation of pawpularity is {train_df['Pawpularity'].std()}\")","c805791d":"# torch.log2(torch.tensor(len(train_df)))\nno_bins = int(np.ceil(2*(len(train_df)**(1\/3)) ))\nno_bins\n\n\ntrain_df[\"Norm\"] = train_df['Pawpularity']\/100","338b5172":"train_df['bins'] = pd.cut(train_df['Pawpularity'], bins=no_bins, labels=False)\ntrain_df['bins'].hist()","dc640d4e":"train_df.head()","e3d3cbc3":"# creating stratified k folds \ntrain_df['Fold'] = -1 \nn_folds = 10 \nstratified_k_folds = StratifiedKFold(n_splits=n_folds, shuffle = True )\nfor i, (shi, train_index) in enumerate(stratified_k_folds.split(train_df.index, train_df['bins'])):\n    train_df.iloc[train_index, -1] = i\ntrain_df['Fold'] = train_df['Fold'].astype('int')\ntrain_df.Fold.value_counts().plot.bar()","05c2c7cd":"train_df[train_df['Fold']==1].head()","54144711":"def petfinder_rmse(input,target):\n    return 100*torch.sqrt(F.mse_loss(F.sigmoid(input.flatten()), target))","f281a5da":"def get_data(fold):\n#     train_df_no_val = train_df.query(f'fold != {fold}')\n#     train_df_val = train_df.query(f'fold == {fold}')\n    \n#     train_df_bal = pd.concat([train_df_no_val,train_df_val.sample(frac=1).reset_index(drop=True)])\n    train_df_f = train_df.copy()\n    # add is_valid for validation fold\n    train_df_f['is_valid'] = (train_df_f['Fold'] == fold)\n    \n    dls = ImageDataLoaders.from_df(train_df_f, #pass in train DataFrame\n#                                valid_pct=0.2, #80-20 train-validation random split\n                               valid_col='is_valid', #\n                               seed=365, #seed\n                               fn_col='Path', #filename\/path is in the second column of the DataFrame\n                               label_col='Norm', #label is in the first column of the DataFrame\n                               y_block=RegressionBlock, #The type of target\n                               bs=32, #pass in batch size\n                               num_workers=4,\n                               item_tfms=Resize(224), #pass in item_tfms\n                               batch_tfms=setup_aug_tfms([Brightness(), Contrast(), Hue(), Saturation()])) #pass in batch_tfms\n    \n    return dls","07f523a1":"#Valid Kfolder size\nthe_data = get_data(0)\nassert (len(the_data.train) + len(the_data.valid)) == (len(train_df)\/\/32)","f29e9886":"def get_learner(fold_num):\n    data = get_data(fold_num)\n    \n    model = create_model('swin_large_patch4_window7_224', pretrained=True, num_classes=data.c)\n\n    learn = Learner(data, model, loss_func=BCEWithLogitsLossFlat(), metrics=petfinder_rmse).to_fp16()\n    \n    return learn","fad1a636":"test_df.head()","b044a4a9":"test_df['Pawpularity'] = [1]*len(test_df)\ntest_df['Path'] = test_df['Id'].map(lambda x:get_whole_path(id = x , mode = \"test\"))\ntest_df = test_df.drop(columns=['Id'])\ntest_df['Norm'] = test_df['Pawpularity']\/100\n","2971a48b":"test_df","9455b10c":"if not os.path.exists('\/root\/.cache\/torch\/hub\/checkpoints\/'):\n    os.makedirs('\/root\/.cache\/torch\/hub\/checkpoints\/')\n!cp '..\/input\/swin-transformer\/swin_large_patch4_window7_224_22kto1k.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/swin_large_patch4_window7_224_22kto1k.pth'","d70b7cbd":"get_learner(fold_num=0).lr_find(end_lr=3e-2)","a8b2ed3b":"import gc \nall_preds = []\n\nfor i in range(n_folds):\n\n    print(f'Fold {i} results')\n    \n    learn = get_learner(fold_num=i)\n\n    learn.fit_one_cycle(5, 2e-5, cbs=[SaveModelCallback(), EarlyStoppingCallback(monitor='petfinder_rmse', comp=np.less, patience=3)]) \n    \n    learn.recorder.plot_loss()\n\n    #learn = learn.to_fp32()\n    if i == n_folds - 1:\n#         learn.export(f'model_fold_{i}.pkl')\n        learn.save(f'model_fold_{i}.pkl')\n    \n    \n    dls = ImageDataLoaders.from_df(train_df, #pass in train DataFrame\n                               valid_pct=0.2, #80-20 train-validation random split\n                               seed=365, #seed\n                               fn_col='Path', #filename\/path is in the second column of the DataFrame\n                               label_col='Norm', #label is in the first column of the DataFrame\n                               y_block=RegressionBlock, #The type of target\n                               bs=32, #pass in batch size\n                               num_workers=4,\n                               item_tfms=Resize(224), #pass in item_tfms\n                               batch_tfms=setup_aug_tfms([Brightness(), Contrast(), Hue(), Saturation()])) \n    \n    test_dl = dls.test_dl(test_df)\n    \n    preds, _ = learn.tta(dl=test_dl, n=5, beta=0)\n    \n    all_preds.append(preds)\n    \n    del learn\n\n    torch.cuda.empty_cache()\n\n    gc.collect()","f120eb21":"all_preds","f8fd7801":"np.mean(np.stack(all_preds*100))","c77869b1":"sample_df = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/sample_submission.csv\")\npreds = np.mean(np.stack(all_preds), axis=0)\nsample_df['Pawpularity'] = preds*100\nsample_df.to_csv('submission.csv',index=False)","31eb6c20":"pd.read_csv('submission.csv').head()","dbcc21de":"# importing required libraries","c090baf5":"# Exploring dataset "}}