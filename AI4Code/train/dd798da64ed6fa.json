{"cell_type":{"8bf3ceeb":"code","76589fa4":"code","58ab821f":"code","159c9652":"code","85cd128a":"code","072d271c":"code","20698338":"code","33e1ae09":"code","b8e407fc":"markdown"},"source":{"8bf3ceeb":"!pip install wikipedia","76589fa4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport wikipedia\nfrom sklearn.cluster import KMeans\nimport random\n","58ab821f":"topics=['Mathematics','Number Theory','Earth','Physical Science','Chemistry','Molecule','Biology','Botany']","159c9652":"#Fetching articles from Wikipedia\n\nnames=[]\ncont=[]\n\nfor topic in topics:\n    names.append(topic)\n    try:\n        p = wikipedia.page(topic)\n        cont.append(p.content)\n        \n    except wikipedia.DisambiguationError as e:\n        s = random.choice(e.options)\n        p = wikipedia.page(s)\n        cont.append(p.content)","85cd128a":"#Vectorization of articles\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nvect=TfidfVectorizer(stop_words={'english'})\nvectors=vect.fit_transform(cont)","072d271c":"#Finding value of K\n\navg_dist=[]\nK=range(2,8)\n\nfor k in range(2,8):\n    km=KMeans(n_clusters=k,max_iter=100,n_init=10,random_state=0)\n    km=km.fit(vectors)\n    avg_dist.append(km.inertia_)\n    \nplt.plot(K,avg_dist) \nplt.xlabel('K')\nplt.ylabel('average distance')\nplt.title('Finding optimum value for K')\n\n","20698338":"kmeans=KMeans(n_clusters=5,max_iter=100,n_init=10,random_state=0)\nkmeans=kmeans.fit(vectors)\nlabels=kmeans.labels_\nclusters=pd.DataFrame(list(zip(names,labels)),columns=['Titles','Labels'])\nprint(clusters.sort_values(by=['Labels']))","33e1ae09":"from wordcloud import WordCloud\nresult={'cluster':labels,'wiki':cont}\nresult=pd.DataFrame(result)\nfor k in range(0,5):\n   s=result[result.cluster==k]\n   text=s['wiki'].str.cat(sep=' ')\n   text=text.lower()\n   text=' '.join([word for word in text.split()])\n   wordcloud = WordCloud(max_font_size=50, max_words=100, background_color=\"white\").generate(text)\n   print('Cluster: {}'.format(k))\n   print('Titles')\n   titles=clusters[clusters.Labels==k]['Titles']         \n   print(titles.to_string(index=False))\n   plt.figure()\n   plt.imshow(wordcloud, interpolation=\"bilinear\")\n   plt.axis(\"off\")\n   plt.show()\n","b8e407fc":"Here,we can see a small bend at 5. So let's take K as 5"}}