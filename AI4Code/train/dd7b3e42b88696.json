{"cell_type":{"e3ac7553":"code","627ff0fa":"code","732bfdc0":"code","b840b68c":"code","89c8666d":"code","374fdc3b":"code","322c7ab0":"code","377ce088":"code","533c3e3b":"code","7596c711":"code","f33a3253":"code","0266ddd7":"code","f0c20177":"code","0f242d2d":"code","eb1ddbd1":"code","e9816b39":"code","2db5a9f6":"code","28bd77b9":"code","36af77bf":"code","e460a632":"markdown","70d35bc1":"markdown","d251a714":"markdown","8b0acf99":"markdown","c0a6824f":"markdown","90a19137":"markdown","fe2bb597":"markdown"},"source":{"e3ac7553":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom PIL import Image # Show jpg images\nimport random #random numbers\nimport os # directories and files\nimport matplotlib.pyplot as plt # plot data\nimport seaborn as sns # plot data","627ff0fa":"# returns random image\ndef random_image(p, n, list_p = None):\n    if list_p == None:\n        n_img = len(os.listdir(p))\n        sample = random.sample(list(np.arange(0,n_img)), n)\n        for s in sample:\n                yield os.listdir(p)[s].split(\".\")[0], Image.open(os.path.join(p, os.listdir(p)[s]))\n\n    else:\n        n_img = len(list_p)        \n        sample = random.sample(list(np.arange(0,n_img)), n)\n        for s in sample:\n            yield list_p[s], Image.open(os.path.join(p, list_p[s]+\".jpg\"))\n            \n# shows image           \ndef show_sample(s, im):\n    f, ax = plt.subplots(figsize = (7, 7))\n    ax.axis(\"off\")\n    ax.imshow(im)","732bfdc0":"data_dir = os.path.join(os.getcwd(), os.pardir, 'input', 'petfinder-pawpularity-score')\nmeta_data = pd.read_csv(os.path.join(data_dir, 'train.csv'))","b840b68c":"sns.set_theme()\nsns.histplot(meta_data.Pawpularity);","89c8666d":"# Sample 25 images from all images with a pawpularity score of below 20\nbottomlist = list(meta_data.loc[meta_data.Pawpularity < 20, 'Id'])\nmybottomimage = random_image(os.path.join(data_dir, 'train'), 25, bottomlist)","374fdc3b":"s, im = next(mybottomimage)\nshow_sample(s, im)\npd.DataFrame(meta_data[meta_data.Id ==s])","322c7ab0":"# Sample 25 images from all images with a pawpularity score of over 100\ntoplist = list(meta_data.loc[meta_data.Pawpularity == 100, 'Id'])\nmytopimage = random_image(os.path.join(data_dir, 'train'), 25, toplist)","377ce088":"s, im = next(mytopimage)\nshow_sample(s, im)\npd.DataFrame(meta_data[meta_data.Id ==s])","533c3e3b":"# Sample 25 images from all images with a pawpularity score of over 80 and below 100\ntoplist2 = list(meta_data.loc[((meta_data.Pawpularity < 100)&(meta_data.Pawpularity > 80)), 'Id'])\nmytopimage2 = random_image(os.path.join(data_dir, 'train'), 25, toplist2)","7596c711":"s, im = next(mytopimage2)\nshow_sample(s, im)\npd.DataFrame(meta_data[meta_data.Id ==s])","f33a3253":"# Sample 25 images from all images with a pawpularity score of over 80 and below 100\nmediumlist = list(meta_data.loc[((meta_data.Pawpularity < 40)&(meta_data.Pawpularity > 20)), 'Id'])\nmymediumimage = random_image(os.path.join(data_dir, 'train'), 25, mediumlist)","0266ddd7":"s, im = next(mymediumimage)\nshow_sample(s, im)\npd.DataFrame(meta_data[meta_data.Id ==s])","f0c20177":"corr = meta_data.corr()","0f242d2d":"sns.set_style(\"ticks\")\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5});","eb1ddbd1":"from sklearn.decomposition import PCA","e9816b39":"X = meta_data.drop(columns = [\"Id\", \"Pawpularity\"]).to_numpy()","2db5a9f6":"pca = PCA(n_components=6, random_state=0)\npca.fit(X)\nX_transformed = pca.transform(X)\nX_transformed = pd.DataFrame(X_transformed)","28bd77b9":"meta_data = meta_data.merge(X_transformed, left_index = True, right_index = True)\ncorr = meta_data.corr()","36af77bf":"# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","e460a632":"# Explore Pawpularity","70d35bc1":"### Medium Scorers","d251a714":"# Correlation within Meta Data","8b0acf99":"### Top Scorers","c0a6824f":"# Load Data","90a19137":"### PCA with 6 components","fe2bb597":"### Bottom Scorers"}}