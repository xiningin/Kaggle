{"cell_type":{"cb235fa2":"code","f616cf73":"code","e290fc25":"code","c94c7f13":"code","f8df34a2":"code","ec78bcf1":"code","6c698c03":"code","d21179ee":"code","87bf1ee4":"code","9f4790f9":"code","9f3998aa":"code","43fe6e2d":"code","9eb8b1d9":"code","ff97aa1e":"code","629355d7":"code","8a9c724b":"markdown","cc32c0e6":"markdown","ae3e7b93":"markdown"},"source":{"cb235fa2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f616cf73":"df=pd.read_csv('\/kaggle\/input\/eergy-efficiency-dataset\/ENB2012_data.csv')\ndf.columns = ['relative_compactness', 'surface_area', 'wall_area', 'roof_area', 'overall_height',\n                'orientation', 'glazing_area', 'glazing_area_distribution', 'heating_load', 'cooling_load']\ndf=df.reset_index()\ndf","e290fc25":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Correlation between inputs and outputs\nplt.figure(figsize=(5,5))\nsns.pairplot(data=df, y_vars=['cooling_load','heating_load'],\n             x_vars=['relative_compactness', 'surface_area', 'wall_area', 'roof_area', 'overall_height',\n                     'orientation', 'glazing_area', 'glazing_area_distribution',])\nplt.show()","c94c7f13":"for column in df.columns:\n    print(\"\\n\" + column)\n    print(df[column].value_counts())","f8df34a2":"for column in df.columns:\n    print(\"\\n\" + column)\n    print(len(df[column].value_counts()))","ec78bcf1":"#from sklearn.preprocessing import Normalizer\n#nr = Normalizer(copy=False)\n\nX = df.drop(['heating_load','cooling_load'], axis=1)\n#X = nr.fit_transform(X)\ny = df[['heating_load','cooling_load']]","6c698c03":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 2)","d21179ee":"#Import decision tree regressor\nfrom sklearn.tree import DecisionTreeRegressor\n# Create decision tree model \ndt_model = DecisionTreeRegressor(random_state=2)\n# Apply the model\ndt_model.fit(X_train, y_train)\n# Predicted value\ny_pred1 = dt_model.predict(X_test)","87bf1ee4":"from sklearn.metrics import r2_score\nr2_score(y_test,y_pred1)","9f4790f9":"f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)\n#Visualize the heating load output before optimization\nax1.plot(X_test['index'],y_test['heating_load'],'o',color='red',label = 'Actual Values')\nax1.plot(X_test['index'],y_pred1[:,0],'X',color='yellow',label = 'Predicted Values')\nax1.set_xlabel('index')\nax1.set_ylabel('Heating Load')\nax1.set_title('Heating  Load Before Optimization')\nax1.legend(loc = 'upper right')\n\n#Visualize the cooling load output before optimization\nax2.plot(X_test['index'],y_test['cooling_load'].values,'o',color='green',label = 'Actual Values')\nax2.plot(X_test['index'],y_pred1[:,1],'X',color='blue',label = 'Predicted Values')\nax2.set_xlabel('index')\nax2.set_ylabel('Cooling Load')\nax2.set_title('Cooling Load Before Optimization')\nax2.legend(loc = 'upper right')\n\nax1.figure.set_size_inches(15, 8)\n\n\nplt.show()","9f3998aa":"# Finding the best decision tree optimization parameters\n\nf, (ax1, ax2) = plt.subplots(1, 2, sharey=True)\n# Max Depth\ndt_acc = []\ndt_depth = range(1,11)\nfor i in dt_depth:\n    dt = DecisionTreeRegressor(random_state=2, max_depth=i)\n    dt.fit(X_train, y_train)\n    dt_acc.append(dt.score(X_test, y_test))\nax1.plot(dt_depth,dt_acc)\nax1.set_title('Max Depth')\n\n#Min Samples Split\ndt_acc = []\ndt_samples_split = range(10,21)\nfor i in dt_samples_split:\n    dt = DecisionTreeRegressor(random_state=2, min_samples_split=i)\n    dt.fit(X_train, y_train)\n    dt_acc.append(dt.score(X_test, y_test))\nax2.plot(dt_samples_split,dt_acc)\nax2.set_title('Min Samples Split')\n\nplt.show()","43fe6e2d":"#Min Sample Leaf\nplt.figure(figsize = (5,5))\ndt_acc = []\ndt_samples_leaf = range(1,10)\nfor i in dt_samples_leaf:\n    dt = DecisionTreeRegressor(random_state=123, min_samples_leaf=i)\n    dt.fit(X_train, y_train)\n    dt_acc.append(dt.score(X_test, y_test))\n\nplt.plot(dt_samples_leaf,dt_acc)\nplt.title('Min Sample Leaf')\n\nplt.show()","9eb8b1d9":"# Decision tree optimization parameters\nfrom sklearn.model_selection import GridSearchCV\nparameters = {'max_depth' : [7,8,9],\n              'min_samples_split': [16,17,18],\n              'min_samples_leaf' : [6,7,8]}\n\n\n#Create new model using the GridSearch\ndt_random = GridSearchCV(dt_model, parameters)","ff97aa1e":"dt_random.fit(X_train, y_train)","629355d7":"dt_random.best_params_\n","8a9c724b":"Data from research paper\nhttps:\/\/www.sciencedirect.com\/science\/article\/abs\/pii\/S037877881200151X","cc32c0e6":"More precisely view how many different values there are for each column- many of these columns have less than ten different values, could cosider them categorical data potentially.","ae3e7b93":"View the different value counts for each column."}}