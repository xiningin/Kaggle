{"cell_type":{"50788545":"code","e53cbabf":"code","f6c103c2":"code","a51b1c0d":"code","e633ac3c":"code","be0ed33d":"code","034b2f95":"code","75bf6fa2":"code","472062f0":"code","e13cd9d3":"code","1307581f":"code","172572fa":"code","9a615a69":"code","bfe70e03":"code","52825ff9":"code","0d88ae6a":"code","cb376653":"code","1827aef0":"code","a489199d":"code","511cee96":"code","21b87649":"code","a466a3c5":"code","74916d29":"code","0b2b3db7":"code","136ba278":"code","4de28e3d":"code","01915aec":"code","f2dcf3a7":"code","c99930ca":"code","2e97a0bf":"code","9dc866db":"code","651e0925":"code","366a1332":"code","fd45fa4c":"code","e0559f22":"code","d376d79f":"code","e23595bb":"code","cce2a935":"code","a269989e":"code","4c2a95f8":"code","27424d40":"code","76cae7dd":"code","24e85b7b":"code","4521ed9c":"code","22383660":"code","b3ae43e9":"code","caf9bfbe":"code","0a26b8df":"code","6a5d0f60":"code","31c5f317":"code","61626705":"code","89209464":"code","ee67d69f":"code","079da847":"code","82c2e15d":"code","6da36d1d":"code","6bd7d52a":"code","4d42ea95":"code","3051cb98":"code","d0248910":"code","15f62bdd":"code","5591cc2e":"code","ae72664b":"code","aec0c169":"code","8c5cb0fb":"code","422229f7":"code","329de101":"code","1be02225":"code","9bd661ea":"code","43500f57":"code","85ba6db2":"code","2785fe41":"code","cd9a073b":"code","3433b9ef":"code","58d50292":"code","ec95d2ff":"code","118935ff":"code","9d5347f0":"code","0d2bee63":"code","9ac7243f":"code","188fdcf5":"code","1b6b1d97":"code","58eb53f0":"code","c4abaf19":"code","deefc558":"code","089cdfdd":"markdown","5c00da31":"markdown","635107e9":"markdown","8a9617d0":"markdown"},"source":{"50788545":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e53cbabf":"train = pd.read_csv('\/kaggle\/input\/av-genpact-hack-dec2018\/train.csv')\nmeal = pd.read_csv('\/kaggle\/input\/av-genpact-hack-dec2018\/meal_info.csv')\ncenter = pd.read_csv('\/kaggle\/input\/av-genpact-hack-dec2018\/fulfilment_center_info.csv')","f6c103c2":"train.head()","a51b1c0d":"data = train.merge(meal, on='meal_id')","e633ac3c":"data = data.merge(center, on='center_id')","be0ed33d":"data.head()","034b2f95":"df=data.copy()","75bf6fa2":"data.nunique()","472062f0":"corr = data.corr()\nimport seaborn as sns\nsns.heatmap(corr)","e13cd9d3":"ts_tot_orders = data.groupby(['week'])['num_orders'].sum()\nts_tot_orders = pd.DataFrame(ts_tot_orders)\nts_tot_orders","1307581f":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nplot_data = [\n    go.Scatter(\n        x=ts_tot_orders.index,\n        y=ts_tot_orders['num_orders'],\n        name='Time Series for num_orders',\n        marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",http:\/\/localhost:8888\/notebooks\/Kaggle_for_timepass\/hackathon\/Sigma-thon-master\/Sigma-thon-master\/eda1.ipynb#\n    )\n]\nplot_layout = go.Layout(\n        title='Total orders per week',\n        yaxis_title='Total orders',\n        xaxis_title='Week',\n        plot_bgcolor='rgba(0,0,0,0)'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","172572fa":"center_id = data.groupby(['center_id'])['num_orders'].sum()\ncenter_id = pd.DataFrame(center_id)","9a615a69":"center_id=center_id.reset_index()","bfe70e03":"import plotly.express as px\nfig = px.bar(center_id, x=\"center_id\", y=\"num_orders\", color='center_id')\nfig.update_layout({\n'plot_bgcolor': 'rgba(1, 1, 1, 1)',\n'paper_bgcolor': 'rgba(1, 1, 1, 1)',\n})\n\nfig.show()","52825ff9":"meal_id = data.groupby(['meal_id'])['num_orders'].sum()\nmeal_id = pd.DataFrame(meal_id)","0d88ae6a":"meal_id=meal_id.reset_index()","cb376653":"import plotly.express as px\nfig = px.bar(meal_id, x=\"meal_id\", y=\"num_orders\", color='meal_id')\nfig.update_layout({\n'plot_bgcolor': 'rgba(1, 1, 1, 1)',\n'paper_bgcolor': 'rgba(1, 1, 1, 1)',\n})\n\nfig.show()\n","1827aef0":"data","a489199d":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nfor i in cat_var:\n    grp=df.groupby([i])\n    grp=pd.DataFrame(grp)\n    lis=grp[0]\n    x=0\n    plot_data=[]\n    for j in lis:\n        print(i)\n        print(j)\n        data = df[df[i]==j]\n        data = pd.DataFrame(data)\n        tot_orders = data.groupby(['week'])['num_orders'].sum()\n        tot_orders = pd.DataFrame(tot_orders)\n       \n        plot_data.append(go.Scatter(\n                x=tot_orders.index,\n                y=tot_orders['num_orders'],\n                name=str(j),\n                #marker = dict(color = colors[x%12])\n                #x_axis=\"OTI\",\n                #y_axis=\"time\",\n            ))\n        \n        x+=1\n    plot_layout = go.Layout(\n            title='Total orders per week for '+str(i),\n            yaxis_title='Total orders',\n            xaxis_title='Week',\n            plot_bgcolor='rgba(0,0,0,0)'\n        )\n    fig = go.Figure(data=plot_data, layout=plot_layout)\n    pyoff.iplot(fig)","511cee96":"center_type = df.groupby(['center_type'])['num_orders'].sum()\ncenter_type = pd.DataFrame(center_type)","21b87649":"center_type","a466a3c5":"center_type=center_type.reset_index()","74916d29":"import plotly.express as px\nfig = px.bar(center_type, x=\"center_type\", y=\"num_orders\", color='center_type')\nfig.update_layout({\n'plot_bgcolor': 'rgba(1, 1, 1, 1)',\n'paper_bgcolor': 'rgba(1, 1, 1, 1)',\n})\n\nfig.show()","0b2b3db7":"category = df.groupby(['category'])['num_orders'].sum()\ncategory = pd.DataFrame(category)","136ba278":"category = category.reset_index()","4de28e3d":"import plotly.express as px\nfig = px.bar(category, x=\"category\", y=\"num_orders\", color='category')\nfig.update_layout({\n'plot_bgcolor': 'rgba(1, 1, 1, 1)',\n'paper_bgcolor': 'rgba(1, 1, 1, 1)',\n})\nfig.show()","01915aec":"cuisine = df.groupby(['cuisine'])['num_orders'].sum()\ncuisine = pd.DataFrame(cuisine)","f2dcf3a7":"cuisine = cuisine.reset_index()","c99930ca":"import plotly.express as px\nfig = px.bar(cuisine, x=\"cuisine\", y=\"num_orders\", color='cuisine')\nfig.update_layout({\n'plot_bgcolor': 'rgba(1, 1, 1, 1)',\n'paper_bgcolor': 'rgba(1, 1, 1, 1)',\n})\nfig.show()","2e97a0bf":"cat_ct=df.groupby(['category', 'center_type'])['num_orders'].sum()\n","9dc866db":"cat_ct = cat_ct.unstack().fillna(0)\ncat_ct","651e0925":"# Visualize this data in bar plot\nax = (cat_ct).plot(\nkind='bar',\nfigsize=(10, 7),\ngrid=True\n)\nax.set_ylabel('Count')\nplt.show()","366a1332":"cat_cu=df.groupby(['category', 'cuisine'])['num_orders'].sum()\ncat_cu = cat_cu.unstack().fillna(0)\ncat_cu\n","fd45fa4c":"# Visualize this data in bar plot\nax = (cat_cu).plot(\nkind='bar',\nfigsize=(10, 7),\ngrid=True\n)\nax.set_ylabel('Count')\nplt.show()","e0559f22":"ct_cu=df.groupby(['center_type', 'cuisine'])['num_orders'].sum()\nct_cu = ct_cu.unstack().fillna(0)\nct_cu","d376d79f":"# Visualize this data in bar plot\nax = (ct_cu).plot(\nkind='bar',\nfigsize=(10, 7),\ngrid=True\n)\nax.set_ylabel('Count')\nplt.show()","e23595bb":"center_id = 55\nmeal_id = 1885","cce2a935":"train_df = data[data['center_id']==center_id]\ntrain_df = train_df[train_df['meal_id']==meal_id]\n\n\n# data = train[train['center_id']==55]","a269989e":"train_df['Date'] = pd.date_range('2015-01-01', periods=145, freq='W')\n","4c2a95f8":"train_df","27424d40":"cat_var = ['center_type',\n 'category',\n 'cuisine']","76cae7dd":"colors=['#b84949', '#ff6f00', '#ffbb00', '#9dff00', '#329906', '#439c55', '#67c79e', '#00a1db', '#002254', '#5313c2', '#c40fdb', '#e354aa']","24e85b7b":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nfor i in cat_var:\n    grp=train_df.groupby([i])\n    grp=pd.DataFrame(grp)\n    lis=grp[0]\n    x=0\n    for j in lis:\n        print(i)\n        print(j)\n        data = train_df[train_df[i]==j]\n        data = pd.DataFrame(data)\n        tot_orders = data.groupby(['week'])['num_orders'].sum()\n        tot_orders = pd.DataFrame(tot_orders)\n        plot_data = [\n            go.Scatter(\n                x=tot_orders.index,\n                y=tot_orders['num_orders'],\n                name='Time Series for num_orders for '+str(j),\n                marker = dict(color = colors[x%12])\n                #x_axis=\"OTI\",\n                #y_axis=\"time\",\n            )\n        ]\n        plot_layout = go.Layout(\n                title='Total orders per week for '+str(j),\n                yaxis_title='Total orders',\n                xaxis_title='Week',\n                plot_bgcolor='rgba(0,0,0,0)'\n            )\n        fig = go.Figure(data=plot_data, layout=plot_layout)\n        x+=1\n        pyoff.iplot(fig)","4521ed9c":"train_df['Day'] = train_df['Date'].dt.day\ntrain_df['Month'] = train_df['Date'].dt.month\ntrain_df['Year'] = train_df['Date'].dt.year\ntrain_df['Quarter'] = train_df['Date'].dt.quarter","22383660":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nfor i in cat_var:\n    grp=train_df.groupby([i])\n    grp=pd.DataFrame(grp)\n    lis=grp[0]\n    x=0\n    plot_data=[]\n    for j in lis:\n        print(i)\n        print(j)\n        data = train_df[train_df[i]==j]\n        data = pd.DataFrame(data)\n        tot_orders = data.groupby(['week'])['num_orders'].sum()\n        tot_orders = pd.DataFrame(tot_orders)\n       \n        plot_data.append(go.Scatter(\n                x=tot_orders.index,\n                y=tot_orders['num_orders'],\n                name=str(j),\n                #marker = dict(color = colors[x%12])\n                #x_axis=\"OTI\",\n                #y_axis=\"time\",\n            ))\n        \n        x+=1\n    plot_layout = go.Layout(\n            title='Total orders per week for '+str(i),\n            yaxis_title='Total orders',\n            xaxis_title='Week',\n            plot_bgcolor='rgba(0,0,0,0)'\n        )\n    fig = go.Figure(data=plot_data, layout=plot_layout)\n    pyoff.iplot(fig)","b3ae43e9":"train_df.head()","caf9bfbe":"xb_data = train_df.drop(columns=['id','center_id','meal_id','category','cuisine','center_type'])\n\nxb_data = xb_data.set_index(['Date'])","0a26b8df":"x_train = xb_data.drop(columns='num_orders')\ny_train = xb_data['num_orders']\ny_train = np.log1p(y_train)\n\nX_train = x_train.iloc[:130,:]\nX_test = x_train.iloc[130:,:]\nY_train =  y_train.iloc[:130]\nY_test = y_train.iloc[130:]","6a5d0f60":"import matplotlib.pyplot as plt\nplt.figure(figsize=(20,5))\nplt.plot(Y_train)\nplt.plot(Y_test)","31c5f317":"from xgboost import XGBRegressor\nmodel_2 = XGBRegressor(\n learning_rate = 0.01,\n eval_metric ='rmse',\n    n_estimators = 50000,\n    max_depth = 5,\n    subsample = 0.8,\n    colsample_bytree = 1,\n    gamma = 0.5\n  \n  \n )\n#model.fit(X_train, y_train)\nmodel_2.fit(X_train, Y_train, eval_metric='rmse', \n          eval_set=[(X_test, Y_test)], early_stopping_rounds=500, verbose=100)","61626705":"a = (model_2.get_booster().best_iteration)\na","89209464":"xgb_model = XGBRegressor(\n     \n     learning_rate = 0.01,\n   \n    n_estimators = a,\n    max_depth = 5,\n    subsample = 0.8,\n    colsample_bytree = 1,\n    gamma = 0.5\n  \n  \n \n )","ee67d69f":"xgb_model.fit(X_train, Y_train)","079da847":"xgb_preds = xgb_model.predict(X_test)","82c2e15d":"xgb_preds = np.exp(xgb_preds)","6da36d1d":"train_df.tail()","6bd7d52a":"xgb_preds = pd.DataFrame(xgb_preds)\nxgb_preds.index = Y_test.index","4d42ea95":"xgb_preds","3051cb98":"Y_train = np.exp(Y_train)\nY_test = np.exp(Y_test)\n","d0248910":"plt.figure(figsize=(20,5))\nplt.plot(Y_train)\nplt.plot(Y_test)\nplt.plot(xgb_preds, color='cyan')","15f62bdd":"from lightgbm import LGBMRegressor\nlgb_fit_params={\"early_stopping_rounds\":500, \n            \"eval_metric\" : 'rmse', \n            \"eval_set\" : [(X_test,Y_test)],\n            'eval_names': ['valid'],\n            'verbose':100\n           }\n\nlgb_params = {'boosting_type': 'gbdt',\n 'objective': 'regression',\n 'metric': 'rmse',\n 'verbose': 0,\n 'bagging_fraction': 0.8,\n 'bagging_freq': 1,\n 'lambda_l1': 0.01,\n 'lambda_l2': 0.01,\n 'learning_rate': 0.001,\n 'max_bin': 255,\n 'max_depth': 6,\n 'min_data_in_bin': 1,\n 'min_data_in_leaf': 1,\n 'num_leaves': 31}\n\nY_train = np.log1p(Y_train)\nY_test = np.log1p(Y_test)\n","5591cc2e":"clf_lgb = LGBMRegressor(n_estimators=10000, **lgb_params, random_state=123456789, n_jobs=-1)\nclf_lgb.fit(X_train, Y_train, **lgb_fit_params)","ae72664b":"lgb_model = LGBMRegressor(bagging_fraction=0.8, bagging_freq=1, lambda_l1=0.01,\n              lambda_l2=0.01, learning_rate=0.01, max_bin=255, max_depth=6,\n              metric='rmse', min_data_in_bin=1, min_data_in_leaf=1,\n              n_estimators=10000, objective='regression',\n              random_state=123456789, verbose=0)","aec0c169":"lgb_model.fit(X_train,Y_train)","8c5cb0fb":"lgm_preds = lgb_model.predict(X_test)\nlgm_preds = np.exp(lgm_preds)","422229f7":"lgm_preds = pd.DataFrame(lgm_preds)\nlgm_preds.index = Y_test.index","329de101":"Y_train = np.exp(Y_train)\nY_test = np.exp(Y_test)\n","1be02225":"plt.figure(figsize=(20,5))\nplt.plot(Y_train)\nplt.plot(Y_test, label='Original')\nplt.plot(xgb_preds, color='cyan', label=\"xgb_prediction\")\nplt.plot(lgm_preds, color='red', label='light_lgm_prediction')\nplt.legend(loc='best')","9bd661ea":"train_df","43500f57":"prophet_data = train_df[['Date','num_orders']]\nprophet_data.index = xb_data.index\nprophet_data = prophet_data.iloc[:130,:]","85ba6db2":"# prophet_data['num_orders'] = np.log1p(prophet_data['num_orders'])","2785fe41":"prophet_data =prophet_data.rename(columns={'Date':'ds',\n                             'num_orders':'y'})\nprophet_data.head()","cd9a073b":"from fbprophet import Prophet\nm = Prophet(growth='linear',\n            seasonality_mode='multiplicative',\n#            changepoint_prior_scale = 30,\n           seasonality_prior_scale = 35,\n           holidays_prior_scale = 10,\n           daily_seasonality = True,\n           weekly_seasonality = False,\n           yearly_seasonality= False,\n           ).add_seasonality(\n                name='monthly',\n                period=30.5,\n                fourier_order=30\n            \n            ).add_seasonality(\n                name='weekly',\n                period=7,\n                fourier_order=55\n            ).add_seasonality(\n                name='yearly',\n                period=365.25,\n                fourier_order=20\n            )\n        \nm.fit(prophet_data)","3433b9ef":"future = m.make_future_dataframe(periods=15, freq='W')","58d50292":"forecast = m.predict(future)\n# forecast['yhat'] = np.exp(forecast['yhat'])\n# forecast['yhat_lower'] = np.exp(forecast['yhat_lower'])\n# forecast['yhat_upper'] = np.exp(forecast['yhat_upper'])\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","ec95d2ff":"from fbprophet.plot import plot_plotly\nimport plotly.offline as py\npy.init_notebook_mode()\n\nfig = plot_plotly(m, forecast)  # This returns a plotly Figure\npy.iplot(fig)","118935ff":"\nprophet_preds = forecast['yhat'].iloc[130:]\nprophet_preds.index = Y_test.index","9d5347f0":"plt.figure(figsize=(20,5))\nplt.plot(Y_train)\nplt.plot(Y_test, label='Original')\nplt.plot(xgb_preds, color='cyan', label=\"xgb_prediction\")\nplt.plot(lgm_preds, color='red', label='light_lgm_prediction')\nplt.plot(prophet_preds, color='green', label='prophet_prediction')\nplt.legend(loc='best')\n","0d2bee63":"Y_train1=pd.DataFrame(Y_train)\nY_train1","9ac7243f":"original=pd.DataFrame(Y_test)\nxgb_preds1=pd.DataFrame(xgb_preds)\nlgm_preds1=pd.DataFrame(lgm_preds)\nprophet_preds1=pd.DataFrame(prophet_preds)","188fdcf5":"prophet_preds1","1b6b1d97":"xgb_preds1","58eb53f0":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nplot_data = [\n    go.Scatter(\n        x=Y_train1.index,\n        y=Y_train1['num_orders'],\n        name='Time Series for num_orders',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=original.index,\n        y=original['num_orders'],\n        name='Original',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=xgb_preds1.index,\n        y=xgb_preds1[0],\n        name='xgb_prediction',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=lgm_preds1.index,\n        y=lgm_preds1[0],\n        name='light_lgm_prediction',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=prophet_preds1.index,\n        y=prophet_preds1['yhat'],\n        name='prophet_prediction',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    )\n    \n    \n]\nplot_layout = go.Layout(\n        title='Total orders per week',\n        yaxis_title='Total orders',\n        xaxis_title='Week',\n        plot_bgcolor='rgba(0,0,0,0)'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","c4abaf19":"plt.figure(figsize=(20,5))\n# plt.plot(Y_train)\nplt.plot(Y_test, label='Original')\nplt.plot(xgb_preds, color='cyan', label=\"xgb_prediction\")\nplt.plot(lgm_preds, color='red', label='light_lgm_prediction')\nplt.plot(prophet_preds, color='green', label='prophet_prediction')\nplt.legend(loc='best')","deefc558":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nplot_data = [\n    go.Scatter(\n        x=original.index,\n        y=original['num_orders'],\n        name='Original',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=xgb_preds1.index,\n        y=xgb_preds1[0],\n        name='xgb_prediction',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=lgm_preds1.index,\n        y=lgm_preds1[0],\n        name='light_lgm_prediction',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=prophet_preds1.index,\n        y=prophet_preds1['yhat'],\n        name='prophet_prediction',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    )\n    \n    \n]\nplot_layout = go.Layout(\n        title='Total orders per week',\n        yaxis_title='Total orders',\n        xaxis_title='Week',\n        plot_bgcolor='rgba(0,0,0,0)'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","089cdfdd":"# light lgb Model","5c00da31":"# Prophet model","635107e9":"Bivariate analysis of Categorical data","8a9617d0":"# XGB boost"}}