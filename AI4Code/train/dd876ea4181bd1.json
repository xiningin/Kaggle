{"cell_type":{"1167e7c0":"code","9b93394d":"code","dea0eadf":"code","3d339453":"code","ce4de32f":"code","43cc1420":"code","59227f66":"code","266693da":"code","463abc74":"code","eaff8ba4":"code","5c540270":"markdown","f8679459":"markdown","3874242f":"markdown","d0980827":"markdown","593415a9":"markdown","04fee6b0":"markdown"},"source":{"1167e7c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary filbes to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b93394d":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf = df.drop(['PassengerId','Name','Ticket','Cabin','Embarked'], axis=1)\n\nnumber_of_zeros = 0\nfor i in range(len(df)):\n    if df.iloc[i,3] != 'nan':\n        number_of_zeros += 1\n        sum_of_ages = np.sum(df.iloc[:,3:4])\n        \naverage_of_ages = sum_of_ages \/ number_of_zeros\n\nfor i in range(len(df)):\n    if str(df.iloc[i,3]) == 'nan':\n        df.iloc[i,3] = float(average_of_ages)\n        \nfor i in range(len(df)):\n    if str(df.iloc[i,2]) == 'male':\n        df.iloc[i,2] = 0\n    else:\n        df.iloc[i,2] = 1\ndf","dea0eadf":"test_csv = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_input = test_csv.drop(['Name','Ticket','Cabin','Embarked'], axis=1)\n\nage_index = 3\nsex_index = 2\nfare_index = 6\n\nnumber_of_zeros_age = 0\nnumber_of_zeros_fare = 0\n\n# For age\nfor i in range(len(test_input)):\n    if str(test_input.iloc[i,age_index]) != 'nan':\n        number_of_zeros_age += 1\n        sum_of_ages = np.sum(test_input.iloc[:,age_index:4])\n        \naverage_of_ages = sum_of_ages \/ number_of_zeros_age\n\n# For age\nfor i in range(len(test_input)):\n    if str(test_input.iloc[i,age_index]) == 'nan':\n        test_input.iloc[i,age_index] = float(average_of_ages)\n        \n# For sex\nfor i in range(len(test_input)):\n    if str(test_input.iloc[i,sex_index]) == 'male':\n        test_input.iloc[i,sex_index] = 0\n    else:\n        test_input.iloc[i,sex_index] = 1\n        \n# For Fare\nfor i in range(len(test_input)):\n    if str(test_input.iloc[i,fare_index]) != 'nan':\n        number_of_zeros_fare += 1\n        sum_of_fare = np.sum(test_input.iloc[:,age_index:6])\n\naverage_of_fare = sum_of_fare \/ number_of_zeros_fare\n\nfor i in range(len(test_input)):\n    if str(test_input.iloc[i,fare_index]) == 'nan':\n        test_input.iloc[i,fare_index] = float(average_of_ages)\n","3d339453":"targets_all = df.drop(['Pclass','Sex','Age','SibSp','Parch','Fare'], axis='columns')\ninputs_all = df.drop(['Survived'], axis='columns')\n\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()","ce4de32f":"model.fit(inputs_all, targets_all)","43cc1420":"test_input = test_input.reset_index().values[:,2:9]\ntest_input","59227f66":"score = []\npredictions = []\npassengerId = test_csv.PassengerId\n\n# %70 or greater = 1, append it into score with passenger ID\n# \nfor i in range(len(test_input)):\n    a  = model.predict([test_input[i]])\n    if a[0][0] >= 0.7:\n        score.append([test_csv.PassengerId[i],1])\nindex = []\n# Get index of same passenger ID in score\nfor i in range(len(score)):\n    for y in range(len(test_csv)):\n        if passengerId[y] == score[i][0]:\n            index.append(passengerId[passengerId == passengerId[y]].index[0])","266693da":"# Drop same ID in passengerId\npassenger_id=passengerId.drop(index)\n","463abc74":"# Append passenger_id to score and make it 418 \nfor i in range(len(test_csv.PassengerId)):\n    for y in range(len(test_csv.PassengerId)):\n        if i in index:\n            break\n        else:\n            score.append([passenger_id[i],0])\n            break\n\n","eaff8ba4":"output = pd.DataFrame(score, columns=['PassengerId','Survived'])\noutput.to_csv('my_submission03.csv', index=False)\n\nx = 0\nfor i in range(len(output)):\n    if output['Survived'][i] == 0:\n        x = x + 1\nprint('Survived : ', x)","5c540270":"## Model Fit","f8679459":"## Inputs and targets","3874242f":"## Predict Model","d0980827":"## Output","593415a9":"## Balance train dataset","04fee6b0":"## Balance test dataset"}}