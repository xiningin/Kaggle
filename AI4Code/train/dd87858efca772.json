{"cell_type":{"89482371":"code","f6bcf88f":"code","5367accb":"code","4b709de3":"code","fb723b7e":"code","b9922f41":"code","39874062":"code","482fe440":"code","95e2c059":"code","b00ebabe":"code","3f261a23":"code","7b742816":"code","02fbdd0d":"code","70b35fa9":"code","8aca7309":"code","7d8e973b":"code","87a199fd":"code","ec974971":"code","fb0256bb":"code","6809e12b":"code","c7b8f5b6":"code","a7373739":"code","ee20ef1d":"code","62901752":"code","35088400":"code","63e217a9":"code","0ee00148":"code","42359844":"code","7016640c":"code","fef01df9":"code","a2afffa5":"code","0eb51033":"code","c038fbef":"code","0e938b08":"code","86ba14cf":"code","457e5e3c":"code","18c83a1f":"code","dae9292f":"code","ca0309b8":"code","9e3ed011":"code","0c93dda2":"code","1b05091a":"code","d33ef084":"code","5f04b97a":"code","1e92a928":"code","ace7d1a7":"code","10a9f52e":"code","3cfd3c5b":"code","91a95e14":"code","4375c257":"code","5d05f206":"code","105cd603":"code","0a5d3534":"code","ef90e8f7":"code","b500ff73":"code","e09b10be":"code","2d6e115a":"code","81608b85":"code","bf090821":"code","8eb8d3ed":"code","f0d0496c":"code","5ae27380":"code","1f961f98":"code","9a36723c":"code","9d5ff92c":"code","32a69b93":"code","aa19aa29":"code","066f8523":"code","912f7116":"code","7904912b":"code","5342eab3":"code","f71810be":"code","b64051d2":"code","52e36e64":"code","6f1eec4b":"code","19501fd6":"code","777b5cb1":"code","1e6e2c2e":"code","1d3b88d8":"code","b98cb481":"code","d8ac17f7":"code","9c9fc824":"code","3da8ec01":"code","f79cf15e":"code","2e113355":"code","9c6d1312":"code","cf0b1c97":"code","7cbb3aa1":"code","18b907ac":"code","0f18148f":"code","a18c6167":"code","7cc8e2ba":"code","1e859fce":"code","4b510247":"code","3cb949d5":"code","019c3b8d":"code","bd8d62c2":"code","576dce0a":"code","78b21b7e":"code","dc7c8626":"code","fafc24ec":"code","b5da39bd":"code","f6cfabee":"code","e763c957":"code","82547a86":"code","2ec9a01a":"code","0e8c5eca":"code","ceeb5384":"code","787c6608":"code","9f8ad367":"code","306e0cce":"code","cbc70dbb":"code","a881af09":"code","e6874483":"code","de46ba1f":"code","9c84ed1a":"code","c508fcc3":"code","63477ecf":"code","d0bea2d9":"code","ab959b5f":"code","9c33ad51":"code","72739875":"code","8bd415ce":"code","a68c63ed":"code","0c5276c5":"code","6e5d9bd2":"code","09c42709":"code","d24c2c12":"code","a2692a96":"code","712612b2":"code","f324f293":"code","d7955045":"code","06a08cd2":"code","b71670c8":"code","63ac0739":"code","39afbf9b":"code","ee10e010":"markdown","31b36134":"markdown","25e20f37":"markdown","f68ca79e":"markdown","867463b9":"markdown","5ec47ce5":"markdown","b3c87563":"markdown","b672a370":"markdown","4883c72e":"markdown","23bbcc70":"markdown","5f163887":"markdown","3d45e6aa":"markdown","e7d6bdec":"markdown","43f90bf7":"markdown","767eaffe":"markdown","7ae339bd":"markdown","750e738a":"markdown","380418be":"markdown","01886517":"markdown","40215147":"markdown","59f6419b":"markdown","099123cd":"markdown","d3d95e7b":"markdown","07fe6b2e":"markdown","44e255ca":"markdown","b50efc2a":"markdown","c97a7521":"markdown","ccd50df1":"markdown","3218d328":"markdown","b1ba403d":"markdown","e40ff39e":"markdown","f33dcd6d":"markdown","6e409fb8":"markdown","658b0a8c":"markdown","facf4783":"markdown","ddce8261":"markdown","9e1f2eb3":"markdown","623f32cd":"markdown","06c2b303":"markdown","5fdd1a57":"markdown","8c2a70a2":"markdown","43662e12":"markdown","83afacc7":"markdown","9b17ad90":"markdown","1a7a7624":"markdown","63549ec7":"markdown","d0ad42a7":"markdown","5f99e5c0":"markdown","17500f20":"markdown","708dc4b9":"markdown","182e8eb6":"markdown","f3ab08bf":"markdown","7942f2cb":"markdown","334ee3f3":"markdown","c3205a39":"markdown","8adbb485":"markdown","377f3494":"markdown","563de20a":"markdown","9dd66a91":"markdown","6db7a077":"markdown","dd275bf2":"markdown","91179d1c":"markdown","1d8a74a1":"markdown","1df6a6b9":"markdown","42748d3f":"markdown","b2622656":"markdown","d73ee32a":"markdown","e98a4d22":"markdown","7cef2cdf":"markdown","c559b71d":"markdown","04d1bdf8":"markdown","f83154b4":"markdown","3bc0e19b":"markdown","c04e1fb7":"markdown","00703936":"markdown","f2b83a3d":"markdown","f47f039c":"markdown","6466e2bc":"markdown","feb8f799":"markdown","7bbeb729":"markdown","8218f3f5":"markdown","054b63b5":"markdown","65d9da1f":"markdown","85081e0f":"markdown","5aa9bb7e":"markdown","66af822d":"markdown","89845499":"markdown","e72a46fb":"markdown","d25b4699":"markdown","0ea26e88":"markdown","1b28917c":"markdown","e55ff945":"markdown","e509d850":"markdown","5c1d1cdc":"markdown","da50c1f3":"markdown","57433a2e":"markdown","f469e0d0":"markdown","14300fe4":"markdown","c89c621b":"markdown","ff7b14d6":"markdown","62f9b530":"markdown","6fd960fb":"markdown","2980a14c":"markdown","311aa2ac":"markdown","48b37bba":"markdown","997b9f77":"markdown","1f157de5":"markdown","490de454":"markdown","a58d495b":"markdown","a4aa6ac8":"markdown","6f635386":"markdown","c1ff6d34":"markdown","a26c80f9":"markdown","508b2266":"markdown","363c67c4":"markdown","49a3824b":"markdown","3f71031e":"markdown","255f3825":"markdown","96cee467":"markdown","9365cc75":"markdown","8860d8cb":"markdown","7126e3c3":"markdown","cb853f6f":"markdown","ee36df7b":"markdown","67530f5d":"markdown","78bd0e2d":"markdown","51afecef":"markdown","722304f0":"markdown","de76756c":"markdown","23f3715d":"markdown","59d83a97":"markdown","bc31864e":"markdown","593b2341":"markdown","3c7a9ceb":"markdown","04c7dafb":"markdown","3f7c6bcc":"markdown","ad113d8a":"markdown","755f3dfb":"markdown","690450ca":"markdown","91ec3ade":"markdown","3b74f1d5":"markdown"},"source":{"89482371":"import matplotlib.pyplot as plt","f6bcf88f":"%matplotlib inline","5367accb":"import numpy as np\nx = np.linspace(0, 5, 11)\ny = x ** 2","4b709de3":"x","fb723b7e":"y","b9922f41":"plt.plot(x, y, 'r') # 'r' is the color red\nplt.xlabel('X Axis Title Here')\nplt.ylabel('Y Axis Title Here')\nplt.title('String Title Here')\nplt.show()","39874062":"# plt.subplot(nrows, ncols, plot_number)\nplt.subplot(1,2,1)\nplt.plot(x, y, 'r--') # More on color options later\nplt.subplot(1,2,2)\nplt.plot(y, x, 'g*-');","482fe440":"# Create Figure (empty canvas)\nfig = plt.figure()\n\n# Add set of axes to figure\naxes = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # left, bottom, width, height (range 0 to 1)\n\n# Plot on that set of axes\naxes.plot(x, y, 'b')\naxes.set_xlabel('Set X Label') # Notice the use of set_ to begin methods\naxes.set_ylabel('Set y Label')\naxes.set_title('Set Title');","95e2c059":"# Creates blank canvas\nfig = plt.figure()\n\naxes1 = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # main axes\naxes2 = fig.add_axes([0.2, 0.5, 0.4, 0.3]) # inset axes\n\n# Larger Figure Axes 1\naxes1.plot(x, y, 'b')\naxes1.set_xlabel('X_label_axes2')\naxes1.set_ylabel('Y_label_axes2')\naxes1.set_title('Axes 2 Title')\n\n# Insert Figure Axes 2\naxes2.plot(y, x, 'r')\naxes2.set_xlabel('X_label_axes2')\naxes2.set_ylabel('Y_label_axes2')\naxes2.set_title('Axes 2 Title');","b00ebabe":"# Use similar to plt.figure() except use tuple unpacking to grab fig and axes\nfig, axes = plt.subplots()\n\n# Now use the axes object to add stuff to plot\naxes.plot(x, y, 'r')\naxes.set_xlabel('x')\naxes.set_ylabel('y')\naxes.set_title('title');","3f261a23":"# Empty canvas of 1 by 2 subplots\nfig, axes = plt.subplots(nrows=1, ncols=2)","7b742816":"# Axes is an array of axes to plot on\naxes","02fbdd0d":"for ax in axes:\n    ax.plot(x, y, 'b')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('title')\n\n# Display the figure object    \nfig","70b35fa9":"fig, axes = plt.subplots(nrows=1, ncols=2)\n\nfor ax in axes:\n    ax.plot(x, y, 'g')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('title')\n\nfig    \nplt.tight_layout()","8aca7309":"fig = plt.figure(figsize=(8,4), dpi=100)","7d8e973b":"fig, axes = plt.subplots(figsize=(12,3))\n\naxes.plot(x, y, 'r')\naxes.set_xlabel('x')\naxes.set_ylabel('y')\naxes.set_title('title');","87a199fd":"fig.savefig(\"filename.png\")","ec974971":"fig.savefig(\"filename.png\", dpi=200)","fb0256bb":"ax.set_title(\"title\");","6809e12b":"ax.set_xlabel(\"x\")\nax.set_ylabel(\"y\");","c7b8f5b6":"fig = plt.figure()\n\nax = fig.add_axes([0,0,1,1])\n\nax.plot(x, x**2, label=\"x**2\")\nax.plot(x, x**3, label=\"x**3\")\nax.legend();","a7373739":"# Lots of options....\n\nax.legend(loc=1) # upper right corner\nax.legend(loc=2) # upper left corner\nax.legend(loc=3) # lower left corner\nax.legend(loc=4) # lower right corner\n\n# .. many more options are available\n\n# Most common to choose\nax.legend(loc=0) # let matplotlib decide the optimal location\nfig","ee20ef1d":"# MATLAB style line color and style \nfig, ax = plt.subplots()\nax.plot(x, x**2, 'b.-') # blue line with dots\nax.plot(x, x**3, 'g--'); # green dashed line","62901752":"fig, ax = plt.subplots()\n\nax.plot(x, x+1, color=\"blue\", alpha=0.5) # half-transparant\nax.plot(x, x+2, color=\"#8B008B\")        # RGB hex code\nax.plot(x, x+3, color=\"#FF8C00\");      # RGB hex code","35088400":"fig, ax = plt.subplots(figsize=(12,6))\n\nax.plot(x, x+1, color=\"red\", linewidth=0.25)\nax.plot(x, x+2, color=\"red\", linewidth=0.50)\nax.plot(x, x+3, color=\"red\", linewidth=1.00)\nax.plot(x, x+4, color=\"red\", linewidth=2.00)\n\n# possible linestype options \u2018-\u2018, \u2018\u2013\u2019, \u2018-.\u2019, \u2018:\u2019, \u2018steps\u2019\nax.plot(x, x+5, color=\"green\", lw=3, linestyle='-')\nax.plot(x, x+6, color=\"green\", lw=3, ls='-.')\nax.plot(x, x+7, color=\"green\", lw=3, ls=':')\n\n# custom dash\nline, = ax.plot(x, x+8, color=\"black\", lw=1.50)\nline.set_dashes([5, 10, 15, 10]) # format: line length, space length, ...\n\n# possible marker symbols: marker = '+', 'o', '*', 's', ',', '.', '1', '2', '3', '4', ...\nax.plot(x, x+ 9, color=\"blue\", lw=3, ls='-', marker='+')\nax.plot(x, x+10, color=\"blue\", lw=3, ls='--', marker='o')\nax.plot(x, x+11, color=\"blue\", lw=3, ls='-', marker='s')\nax.plot(x, x+12, color=\"blue\", lw=3, ls='--', marker='1')\n\n# marker size and color\nax.plot(x, x+13, color=\"purple\", lw=1, ls='-', marker='o', markersize=2)\nax.plot(x, x+14, color=\"purple\", lw=1, ls='-', marker='o', markersize=4)\nax.plot(x, x+15, color=\"purple\", lw=1, ls='-', marker='o', markersize=8, markerfacecolor=\"red\")\nax.plot(x, x+16, color=\"purple\", lw=1, ls='-', marker='s', markersize=8, \n        markerfacecolor=\"yellow\", markeredgewidth=3, markeredgecolor=\"green\");","63e217a9":"fig, axes = plt.subplots(1, 3, figsize=(12, 4))\n\naxes[0].plot(x, x**2, x, x**3)\naxes[0].set_title(\"default axes ranges\")\n\naxes[1].plot(x, x**2, x, x**3)\naxes[1].axis('tight')\naxes[1].set_title(\"tight axes\")\n\naxes[2].plot(x, x**2, x, x**3)\naxes[2].set_ylim([0, 60])\naxes[2].set_xlim([2, 5])\naxes[2].set_title(\"custom axes range\");","0ee00148":"plt.scatter(x,y);","42359844":"from random import sample\ndata = sample(range(1, 1000), 100)\nplt.hist(data)","7016640c":"data = [np.random.normal(0, std, 100) for std in range(1, 4)]\n\n# rectangular box plot\nplt.boxplot(data,vert=True,patch_artist=True);","fef01df9":"fig, axes = plt.subplots(1, 2, figsize=(10,4))\n      \naxes[0].plot(x, x**2, x, np.exp(x))\naxes[0].set_title(\"Normal scale\")\n\naxes[1].plot(x, x**2, x, np.exp(x))\naxes[1].set_yscale(\"log\")\naxes[1].set_title(\"Logarithmic scale (y)\");","a2afffa5":"fig, ax = plt.subplots(figsize=(10, 4))\n\nax.plot(x, x**2, x, x**3, lw=2)\n\nax.set_xticks([1, 2, 3, 4, 5])\nax.set_xticklabels([r'$\\alpha$', r'$\\beta$', r'$\\gamma$', r'$\\delta$', r'$\\epsilon$'], fontsize=18)\n\nyticks = [0, 50, 100, 150]\nax.set_yticks(yticks)\nax.set_yticklabels([\"$%.1f$\" % y for y in yticks], fontsize=18); # use LaTeX formatted labels","0eb51033":"fig, ax = plt.subplots(1, 1)\n      \nax.plot(x, x**2, x, np.exp(x))\nax.set_title(\"scientific notation\")\n\nax.set_yticks([0, 50, 100, 150])\n\nfrom matplotlib import ticker\nformatter = ticker.ScalarFormatter(useMathText=True)\nformatter.set_scientific(True) \nformatter.set_powerlimits((-1,1)) \nax.yaxis.set_major_formatter(formatter)","c038fbef":"# distance between x and y axis and the numbers on the axes\nmatplotlib.rcParams['xtick.major.pad'] = 5\nmatplotlib.rcParams['ytick.major.pad'] = 5\n\nfig, ax = plt.subplots(1, 1)\n      \nax.plot(x, x**2, x, np.exp(x))\nax.set_yticks([0, 50, 100, 150])\n\nax.set_title(\"label and axis spacing\")\n\n# padding between axis label and axis numbers\nax.xaxis.labelpad = 5\nax.yaxis.labelpad = 5\n\nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\");","0e938b08":"# restore defaults\nmatplotlib.rcParams['xtick.major.pad'] = 3\nmatplotlib.rcParams['ytick.major.pad'] = 3","86ba14cf":"fig, ax = plt.subplots(1, 1)\n      \nax.plot(x, x**2, x, np.exp(x))\nax.set_yticks([0, 50, 100, 150])\n\nax.set_title(\"title\")\nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\")\n\nfig.subplots_adjust(left=0.15, right=.9, bottom=0.1, top=0.9);","457e5e3c":"fig, axes = plt.subplots(1, 2, figsize=(10,3))\n\n# default grid appearance\naxes[0].plot(x, x**2, x, x**3, lw=2)\naxes[0].grid(True)\n\n# custom grid appearance\naxes[1].plot(x, x**2, x, x**3, lw=2)\naxes[1].grid(color='b', alpha=0.5, linestyle='dashed', linewidth=0.5)","18c83a1f":"fig, ax = plt.subplots(figsize=(6,2))\n\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\n\nax.spines['left'].set_color('red')\nax.spines['left'].set_linewidth(2)\n\n# turn off axis spine to the right\nax.spines['right'].set_color(\"none\")\nax.yaxis.tick_left() # only ticks on the left side","dae9292f":"fig, ax1 = plt.subplots()\n\nax1.plot(x, x**2, lw=2, color=\"blue\")\nax1.set_ylabel(r\"area $(m^2)$\", fontsize=18, color=\"blue\")\nfor label in ax1.get_yticklabels():\n    label.set_color(\"blue\")\n    \nax2 = ax1.twinx()\nax2.plot(x, x**3, lw=2, color=\"red\")\nax2.set_ylabel(r\"volume $(m^3)$\", fontsize=18, color=\"red\")\nfor label in ax2.get_yticklabels():\n    label.set_color(\"red\")","ca0309b8":"fig, ax = plt.subplots()\n\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\nax.xaxis.set_ticks_position('bottom')\nax.spines['bottom'].set_position(('data',0)) # set position of x spine to x=0\n\nax.yaxis.set_ticks_position('left')\nax.spines['left'].set_position(('data',0))   # set position of y spine to y=0\n\nxx = np.linspace(-0.75, 1., 100)\nax.plot(xx, xx**3);","9e3ed011":"n = np.array([0,1,2,3,4,5])","0c93dda2":"fig, axes = plt.subplots(1, 4, figsize=(12,3))\n\naxes[0].scatter(xx, xx + 0.25*np.random.randn(len(xx)))\naxes[0].set_title(\"scatter\")\n\naxes[1].step(n, n**2, lw=2)\naxes[1].set_title(\"step\")\n\naxes[2].bar(n, n**2, align=\"center\", width=0.5, alpha=0.5)\naxes[2].set_title(\"bar\")\n\naxes[3].fill_between(x, x**2, x**3, color=\"green\", alpha=0.5);\naxes[3].set_title(\"fill_between\");","1b05091a":"fig, ax = plt.subplots()\n\nax.plot(xx, xx**2, xx, xx**3)\n\nax.text(0.15, 0.2, r\"$y=x^2$\", fontsize=20, color=\"blue\")\nax.text(0.65, 0.1, r\"$y=x^3$\", fontsize=20, color=\"green\");","d33ef084":"fig, ax = plt.subplots(2, 3)\nfig.tight_layout()","5f04b97a":"fig = plt.figure()\nax1 = plt.subplot2grid((3,3), (0,0), colspan=3)\nax2 = plt.subplot2grid((3,3), (1,0), colspan=2)\nax3 = plt.subplot2grid((3,3), (1,2), rowspan=2)\nax4 = plt.subplot2grid((3,3), (2,0))\nax5 = plt.subplot2grid((3,3), (2,1))\nfig.tight_layout()","1e92a928":"import matplotlib.gridspec as gridspec","ace7d1a7":"fig = plt.figure()\n\ngs = gridspec.GridSpec(2, 3, height_ratios=[2,1], width_ratios=[1,2,1])\nfor g in gs:\n    ax = fig.add_subplot(g)\n    \nfig.tight_layout()","10a9f52e":"fig, ax = plt.subplots()\n\nax.plot(xx, xx**2, xx, xx**3)\nfig.tight_layout()\n\n# inset\ninset_ax = fig.add_axes([0.2, 0.55, 0.35, 0.35]) # X, Y, width, height\n\ninset_ax.plot(xx, xx**2, xx, xx**3)\ninset_ax.set_title('zoom near origin')\n\n# set axis range\ninset_ax.set_xlim(-.2, .2)\ninset_ax.set_ylim(-.005, .01)\n\n# set axis tick locations\ninset_ax.set_yticks([0, 0.005, 0.01])\ninset_ax.set_xticks([-0.1,0,.1]);","3cfd3c5b":"alpha = 0.7\nphi_ext = 2 * np.pi * 0.5\n\ndef flux_qubit_potential(phi_m, phi_p):\n    return 2 + alpha - 2 * np.cos(phi_p) * np.cos(phi_m) - alpha * np.cos(phi_ext - 2*phi_p)","91a95e14":"phi_m = np.linspace(0, 2*np.pi, 100)\nphi_p = np.linspace(0, 2*np.pi, 100)\nX,Y = np.meshgrid(phi_p, phi_m)\nZ = flux_qubit_potential(X, Y).T","4375c257":"fig, ax = plt.subplots()\n\np = ax.pcolor(X\/(2*np.pi), Y\/(2*np.pi), Z, cmap=matplotlib.cm.RdBu, vmin=abs(Z).min(), vmax=abs(Z).max())\ncb = fig.colorbar(p, ax=ax)","5d05f206":"fig, ax = plt.subplots()\n\nim = ax.imshow(Z, cmap=matplotlib.cm.RdBu, vmin=abs(Z).min(), vmax=abs(Z).max(), extent=[0, 1, 0, 1])\nim.set_interpolation('bilinear')\n\ncb = fig.colorbar(im, ax=ax)","105cd603":"fig, ax = plt.subplots()\n\ncnt = ax.contour(Z, cmap=matplotlib.cm.RdBu, vmin=abs(Z).min(), vmax=abs(Z).max(), extent=[0, 1, 0, 1])","0a5d3534":"from mpl_toolkits.mplot3d.axes3d import Axes3D","ef90e8f7":"fig = plt.figure(figsize=(14,6))\n\n# `ax` is a 3D-aware axis instance because of the projection='3d' keyword argument to add_subplot\nax = fig.add_subplot(1, 2, 1, projection='3d')\n\np = ax.plot_surface(X, Y, Z, rstride=4, cstride=4, linewidth=0)\n\n# surface_plot with color grading and color bar\nax = fig.add_subplot(1, 2, 2, projection='3d')\np = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=matplotlib.cm.coolwarm, linewidth=0, antialiased=False)\ncb = fig.colorbar(p, shrink=0.5)","b500ff73":"fig = plt.figure(figsize=(8,6))\n\nax = fig.add_subplot(1, 1, 1, projection='3d')\n\np = ax.plot_wireframe(X, Y, Z, rstride=4, cstride=4)","e09b10be":"fig = plt.figure(figsize=(8,6))\n\nax = fig.add_subplot(1,1,1, projection='3d')\n\nax.plot_surface(X, Y, Z, rstride=4, cstride=4, alpha=0.25)\ncset = ax.contour(X, Y, Z, zdir='z', offset=-np.pi, cmap=matplotlib.cm.coolwarm)\ncset = ax.contour(X, Y, Z, zdir='x', offset=-np.pi, cmap=matplotlib.cm.coolwarm)\ncset = ax.contour(X, Y, Z, zdir='y', offset=3*np.pi, cmap=matplotlib.cm.coolwarm)\n\nax.set_xlim3d(-np.pi, 2*np.pi);\nax.set_ylim3d(0, 3*np.pi);\nax.set_zlim3d(-np.pi, 2*np.pi);","2d6e115a":"import seaborn as sns\n%matplotlib inline","81608b85":"tips = sns.load_dataset('tips')","bf090821":"tips.head()","8eb8d3ed":"sns.distplot(tips['total_bill'])\n# Safe to ignore warnings","f0d0496c":"sns.distplot(tips['total_bill'],kde=False,bins=30)","5ae27380":"sns.jointplot(x='total_bill',y='tip',data=tips,kind='scatter')","1f961f98":"sns.jointplot(x='total_bill',y='tip',data=tips,kind='hex')","9a36723c":"sns.jointplot(x='total_bill',y='tip',data=tips,kind='reg')","9d5ff92c":"sns.pairplot(tips)","32a69b93":"sns.pairplot(tips,hue='sex',palette='coolwarm')","aa19aa29":"sns.rugplot(tips['total_bill'])","066f8523":"# Don't worry about understanding this code!\n# It's just for the diagram below\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n#Create dataset\ndataset = np.random.randn(25)\n\n# Create another rugplot\nsns.rugplot(dataset);\n\n# Set up the x-axis for the plot\nx_min = dataset.min() - 2\nx_max = dataset.max() + 2\n\n# 100 equally spaced points from x_min to x_max\nx_axis = np.linspace(x_min,x_max,100)\n\n# Set up the bandwidth, for info on this:\nurl = 'http:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation#Practical_estimation_of_the_bandwidth'\n\nbandwidth = ((4*dataset.std()**5)\/(3*len(dataset)))**.2\n\n\n# Create an empty kernel list\nkernel_list = []\n\n# Plot each basis function\nfor data_point in dataset:\n    \n    # Create a kernel for each point and append to list\n    kernel = stats.norm(data_point,bandwidth).pdf(x_axis)\n    kernel_list.append(kernel)\n    \n    #Scale for plotting\n    kernel = kernel \/ kernel.max()\n    kernel = kernel * .4\n    plt.plot(x_axis,kernel,color = 'grey',alpha=0.5)\n\nplt.ylim(0,1)","912f7116":"# To get the kde plot we can sum these basis functions.\n\n# Plot the sum of the basis function\nsum_of_kde = np.sum(kernel_list,axis=0)\n\n# Plot figure\nfig = plt.plot(x_axis,sum_of_kde,color='indianred')\n\n# Add the initial rugplot\nsns.rugplot(dataset,c = 'indianred')\n\n# Get rid of y-tick marks\nplt.yticks([])\n\n# Set title\nplt.suptitle(\"Sum of the Basis Functions\")","7904912b":"sns.kdeplot(tips['total_bill'])\nsns.rugplot(tips['total_bill'])","5342eab3":"sns.kdeplot(tips['tip'])\nsns.rugplot(tips['tip'])","f71810be":"import seaborn as sns\n%matplotlib inline","b64051d2":"tips = sns.load_dataset('tips')","52e36e64":"tips.head()","6f1eec4b":"sns.distplot(tips['total_bill'])\n# Safe to ignore warnings","19501fd6":"sns.distplot(tips['total_bill'],kde=False,bins=30)","777b5cb1":"sns.jointplot(x='total_bill',y='tip',data=tips,kind='scatter')","1e6e2c2e":"sns.jointplot(x='total_bill',y='tip',data=tips,kind='hex')","1d3b88d8":"sns.jointplot(x='total_bill',y='tip',data=tips,kind='reg')","b98cb481":"sns.pairplot(tips)","d8ac17f7":"sns.pairplot(tips,hue='sex',palette='coolwarm')","9c9fc824":"sns.rugplot(tips['total_bill'])","3da8ec01":"# Don't worry about understanding this code!\n# It's just for the diagram below\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n#Create dataset\ndataset = np.random.randn(25)\n\n# Create another rugplot\nsns.rugplot(dataset);\n\n# Set up the x-axis for the plot\nx_min = dataset.min() - 2\nx_max = dataset.max() + 2\n\n# 100 equally spaced points from x_min to x_max\nx_axis = np.linspace(x_min,x_max,100)\n\n# Set up the bandwidth, for info on this:\nurl = 'http:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation#Practical_estimation_of_the_bandwidth'\n\nbandwidth = ((4*dataset.std()**5)\/(3*len(dataset)))**.2\n\n\n# Create an empty kernel list\nkernel_list = []\n\n# Plot each basis function\nfor data_point in dataset:\n    \n    # Create a kernel for each point and append to list\n    kernel = stats.norm(data_point,bandwidth).pdf(x_axis)\n    kernel_list.append(kernel)\n    \n    #Scale for plotting\n    kernel = kernel \/ kernel.max()\n    kernel = kernel * .4\n    plt.plot(x_axis,kernel,color = 'grey',alpha=0.5)\n\nplt.ylim(0,1)","f79cf15e":"# To get the kde plot we can sum these basis functions.\n\n# Plot the sum of the basis function\nsum_of_kde = np.sum(kernel_list,axis=0)\n\n# Plot figure\nfig = plt.plot(x_axis,sum_of_kde,color='indianred')\n\n# Add the initial rugplot\nsns.rugplot(dataset,c = 'indianred')\n\n# Get rid of y-tick marks\nplt.yticks([])\n\n# Set title\nplt.suptitle(\"Sum of the Basis Functions\")","2e113355":"sns.kdeplot(tips['total_bill'])\nsns.rugplot(tips['total_bill'])","9c6d1312":"sns.kdeplot(tips['tip'])\nsns.rugplot(tips['tip'])","cf0b1c97":"import seaborn as sns\n%matplotlib inline","7cbb3aa1":"flights = sns.load_dataset('flights')","18b907ac":"tips = sns.load_dataset('tips')","0f18148f":"tips.head()","a18c6167":"flights.head()","7cc8e2ba":"tips.head()","1e859fce":"# Matrix form for correlation data\ntips.corr()","4b510247":"sns.heatmap(tips.corr())","3cb949d5":"sns.heatmap(tips.corr(),cmap='coolwarm',annot=True)","019c3b8d":"flights.pivot_table(values='passengers',index='month',columns='year')","bd8d62c2":"pvflights = flights.pivot_table(values='passengers',index='month',columns='year')\nsns.heatmap(pvflights)","576dce0a":"sns.heatmap(pvflights,cmap='magma',linecolor='white',linewidths=1)","78b21b7e":"sns.clustermap(pvflights)","dc7c8626":"# More options to get the information a little clearer like normalization\nsns.clustermap(pvflights,cmap='coolwarm',standard_scale=1)","fafc24ec":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","b5da39bd":"iris = sns.load_dataset('iris')","f6cfabee":"iris.head()","e763c957":"# Just the Grid\nsns.PairGrid(iris)","82547a86":"# Then you map to the grid\ng = sns.PairGrid(iris)\ng.map(plt.scatter)","2ec9a01a":"# Map to upper,lower, and diagonal\ng = sns.PairGrid(iris)\ng.map_diag(plt.hist)\ng.map_upper(plt.scatter)\ng.map_lower(sns.kdeplot)","0e8c5eca":"sns.pairplot(iris)","ceeb5384":"sns.pairplot(iris,hue='species',palette='rainbow')","787c6608":"tips = sns.load_dataset('tips')","9f8ad367":"tips.head()","306e0cce":"# Just the Grid\ng = sns.FacetGrid(tips, col=\"time\", row=\"smoker\")","cbc70dbb":"g = sns.FacetGrid(tips, col=\"time\",  row=\"smoker\")\ng = g.map(plt.hist, \"total_bill\")","a881af09":"g = sns.FacetGrid(tips, col=\"time\",  row=\"smoker\",hue='sex')\n# Notice hwo the arguments come after plt.scatter call\ng = g.map(plt.scatter, \"total_bill\", \"tip\").add_legend()","e6874483":"g = sns.JointGrid(x=\"total_bill\", y=\"tip\", data=tips)","de46ba1f":"g = sns.JointGrid(x=\"total_bill\", y=\"tip\", data=tips)\ng = g.plot(sns.regplot, sns.distplot)","9c84ed1a":"import seaborn as sns\n%matplotlib inline","c508fcc3":"tips = sns.load_dataset('tips')","63477ecf":"tips.head()","d0bea2d9":"sns.lmplot(x='total_bill',y='tip',data=tips)","ab959b5f":"sns.lmplot(x='total_bill',y='tip',data=tips,hue='sex')","9c33ad51":"sns.lmplot(x='total_bill',y='tip',data=tips,hue='sex',palette='coolwarm')","72739875":"# http:\/\/matplotlib.org\/api\/markers_api.html\nsns.lmplot(x='total_bill',y='tip',data=tips,hue='sex',palette='coolwarm',\n           markers=['o','v'],scatter_kws={'s':100})","8bd415ce":"sns.lmplot(x='total_bill',y='tip',data=tips,col='sex')","a68c63ed":"sns.lmplot(x=\"total_bill\", y=\"tip\", row=\"sex\", col=\"time\",data=tips)","0c5276c5":"sns.lmplot(x='total_bill',y='tip',data=tips,col='day',hue='sex',palette='coolwarm')","6e5d9bd2":"sns.lmplot(x='total_bill',y='tip',data=tips,col='day',hue='sex',palette='coolwarm',\n          aspect=0.6,size=8)","09c42709":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\ntips = sns.load_dataset('tips')","d24c2c12":"sns.countplot(x='sex',data=tips)","a2692a96":"sns.set_style('white')\nsns.countplot(x='sex',data=tips)","712612b2":"sns.set_style('ticks')\nsns.countplot(x='sex',data=tips,palette='deep')","f324f293":"sns.countplot(x='sex',data=tips)\nsns.despine()","d7955045":"sns.countplot(x='sex',data=tips)\nsns.despine(left=True)","06a08cd2":"# Non Grid Plot\nplt.figure(figsize=(12,3))\nsns.countplot(x='sex',data=tips)","b71670c8":"# Grid Type Plot\nsns.lmplot(x='total_bill',y='tip',size=2,aspect=4,data=tips)","63ac0739":"sns.set_context('poster',font_scale=4)\nsns.countplot(x='sex',data=tips,palette='coolwarm')","39afbf9b":"sns.puppyplot()","ee10e010":"Notice how are legend overlaps some of the actual plot!\n\nThe **legend** function takes an optional keyword argument **loc** that can be used to specify where in the figure the legend is to be drawn. The allowed values of **loc** are numerical codes for the various places the legend can be drawn. See the [documentation page](http:\/\/matplotlib.org\/users\/legend_guide.html#legend-location) for details. Some of the most common **loc** values are:","31b36134":"Then you can specify the number of rows and columns when creating the subplots() object:","25e20f37":"It is also possible to set a logarithmic scale for one or both axes. This functionality is in fact only one application of a more general transformation system in Matplotlib. Each of the axes' scales are set seperately using `set_xscale` and `set_yscale` methods which accept one parameter (with the value \"log\" in this case):","f68ca79e":"___\n\n<a href='http:\/\/www.pieriandata.com'> <img src='..\/Pierian_Data_Logo.png' \/><\/a>\n___","867463b9":"## Introduction to the Object Oriented Method","5ec47ce5":"# Grids\n\nGrids are general types of plots that allow you to map plot types to rows and columns of a grid, this helps you create similar plots separated by features.","b3c87563":"Matplotlib allows the aspect ratio, DPI and figure size to be specified when the Figure object is created. You can use the `figsize` and `dpi` keyword arguments. \n* `figsize` is a tuple of the width and height of the figure in inches\n* `dpi` is the dots-per-inch (pixel per inch). \n\nFor example:","b672a370":"___\n# Matplotlib Object Oriented Method\nNow that we've seen the basics, let's break it all down with a more formal introduction of Matplotlib's Object Oriented API. This means we will instantiate figure objects and then call methods or attributes from that object.","4883c72e":"Manually adding axes with `add_axes` is useful for adding insets to figures:","23bbcc70":"We can configure the ranges of the axes using the `set_ylim` and `set_xlim` methods in the axis object, or `axis('tight')` for automatically getting \"tightly fitted\" axes ranges:","5f163887":"#### Axis position adjustments","3d45e6aa":"## Styles\n\nYou can set particular styles:","e7d6bdec":"Reference the documentation as necessary for grid types, but most of the time you'll just use the easier plots discussed earlier.\n# Great Job!","43f90bf7":"## jointplot\n\njointplot() allows you to basically match up two distplots for bivariate data. With your choice of what **kind** parameter to compare with: \n* \u201cscatter\u201d \n* \u201creg\u201d \n* \u201cresid\u201d \n* \u201ckde\u201d \n* \u201chex\u201d","767eaffe":"To remove the kde layer and just have the histogram use:","7ae339bd":"With the `grid` method in the axis object, we can turn on and off grid lines. We can also customize the appearance of the grid lines using the same keyword arguments as the `plot` function:","750e738a":"## PairGrid\n\nPairgrid is a subplot grid for plotting pairwise relationships in a dataset.","380418be":"# Great Job!","01886517":"Colormaps and contour figures are useful for plotting functions of two variables. In most of these functions we will use a colormap to encode one dimension of the data. There are a number of predefined colormaps. It is relatively straightforward to define custom colormaps. For a list of pre-defined colormaps, see: http:\/\/www.scipy.org\/Cookbook\/Matplotlib\/Show_colormaps","40215147":"Matplotlib is the \"grandfather\" library of data visualization with Python. It was created by John Hunter. He created it to try to replicate MatLab's (another programming language) plotting capabilities in Python. So if you happen to be familiar with matlab, matplotlib will feel natural to you.\n\nIt is an excellent 2D and 3D graphics library for generating scientific figures. \n\nSome of the major Pros of Matplotlib are:\n\n* Generally easy to get started for simple plots\n* Support for custom labels and texts\n* Great control of every element in a figure\n* High-quality output in many formats\n* Very customizable in general\n\nMatplotlib allows you to create reproducible figures programmatically. Let's learn how to use it! Before continuing this lecture, I encourage you just to explore the official Matplotlib web page: http:\/\/matplotlib.org\/\n\n## Installation \n\nYou'll need to install matplotlib first with either:\n\n    conda install matplotlib\nor\n    pip install matplotlib\n    \n## Importing","59f6419b":"That line is only for jupyter notebooks, if you are using another editor, you'll use: **plt.show()** at the end of all your plotting commands to have the figure pop up in another window.","099123cd":"Check out the documentation page for more info on these topics:\nhttps:\/\/stanford.edu\/~mwaskom\/software\/seaborn\/tutorial\/aesthetics.html","d3d95e7b":"# Style and Color\n\nWe've shown a few times how to control figure aesthetics in seaborn, but let's now go over it formally:","07fe6b2e":"## Further reading","44e255ca":"* http:\/\/www.matplotlib.org - The project web page for matplotlib.\n* https:\/\/github.com\/matplotlib\/matplotlib - The source code for matplotlib.\n* http:\/\/matplotlib.org\/gallery.html - A large gallery showcaseing various types of plots matplotlib can create. Highly recommended! \n* http:\/\/www.loria.fr\/~rougier\/teaching\/matplotlib - A good matplotlib tutorial.\n* http:\/\/scipy-lectures.github.io\/matplotlib\/matplotlib.html - Another good matplotlib reference.","b50efc2a":"So with our tips dataset:","c97a7521":"## Using a Grid\n\nWe can add more variable separation through columns and rows with the use of a grid. Just indicate this with the col or row arguments:","ccd50df1":"#### gridspec","3218d328":"#### subplot2grid","b1ba403d":"#### imshow","e40ff39e":"Here we can also optionally specify the DPI and choose between different output formats:","f33dcd6d":"### Placement of ticks and custom tick labels","6e409fb8":"# Great Job!","658b0a8c":"### Axis number and axis label spacing","facf4783":"___\n\n<a href='http:\/\/www.pieriandata.com'> <img src='..\/Pierian_Data_Logo.png' \/><\/a>\n___","ddce8261":"## Spine Removal","9e1f2eb3":"### Example\n\nLet's walk through a very simple example using two numpy arrays. You can also use lists, but most likely you'll be passing numpy arrays or pandas columns (which essentially also behave like arrays).\n\n** The data we want to plot:**","623f32cd":"Axes can be added to a matplotlib Figure canvas manually using `fig.add_axes` or using a sub-figure layout manager such as `subplots`, `subplot2grid`, or `gridspec`:","06c2b303":"___\n## Imports","5fdd1a57":"#### Coutour plots with projections","8c2a70a2":"## Heatmap\n\nIn order for a heatmap to work properly, your data should already be in a matrix form, the sns.heatmap function basically just colors it in for you. For example:","43662e12":"So with our tips dataset:","83afacc7":"## Size and Aspect","9b17ad90":"## Data\nSeaborn comes with built-in data sets!","1a7a7624":"___\n## Imports","63549ec7":"# Great Job!","d0ad42a7":"**Figure titles**\n\nA title can be added to each axis instance in a figure. To set the title, use the `set_title` method in the axes instance:","5f99e5c0":"To change the line width, we can use the `linewidth` or `lw` keyword argument. The line style can be selected using the `linestyle` or `ls` keyword arguments:","17500f20":"In addition to the regular `plot` method, there are a number of other functions for generating different kind of plots. See the matplotlib plot gallery for a complete list of available plot types: http:\/\/matplotlib.org\/gallery.html. Some of the more useful ones are show below:","708dc4b9":"With matplotlib, we can define the colors of lines and other graphical elements in a number of ways. First of all, we can use the MATLAB-like syntax where `'b'` means blue, `'g'` means green, etc. The MATLAB API for selecting line styles are also supported: where, for example, 'b.-' means a blue line with dots:","182e8eb6":"## Further reading","f3ab08bf":"### Legends","7942f2cb":"Annotating text in matplotlib figures can be done using the `text` function. It supports LaTeX formatting just like axis label texts and titles:","334ee3f3":"### Figures with multiple subplots and insets","c3205a39":"Unfortunately, when saving figures the labels are sometimes clipped, and it can be necessary to adjust the positions of axes a little bit. This can be done using `subplots_adjust`:","8adbb485":"You'll also need to use this line to see plots in the notebook:","377f3494":"___\n\n<a href='http:\/\/www.pieriandata.com'> <img src='..\/Pierian_Data_Logo.png' \/><\/a>\n___","563de20a":"**Axis labels**\n\nSimilarly, with the methods `set_xlabel` and `set_ylabel`, we can set the labels of the X and Y axes:","9dd66a91":"#### Scientific notation","6db7a077":"___\n\n<a href='http:\/\/www.pieriandata.com'> <img src='..\/Pierian_Data_Logo.png' \/><\/a>\n___","dd275bf2":"## pairplot\n\npairplot will plot pairwise relationships across an entire dataframe (for the numerical columns) and supports a color hue argument (for categorical columns).","91179d1c":"## Saving figures\nMatplotlib can generate high-quality output in a number formats, including PNG, JPG, EPS, SVG, PGF and PDF.","1d8a74a1":"### Twin axes","1df6a6b9":"## Creating Multiplots on Same Canvas","42748d3f":"### Figure size, aspect ratio and DPI","b2622656":"## subplots()\n\nThe plt.subplots() object will act as a more automatic axis manager.\n\nBasic use cases:","d73ee32a":"#### Wire-frame plot","e98a4d22":"### Axis spines","7cef2cdf":"## pairplot\n\npairplot will plot pairwise relationships across an entire dataframe (for the numerical columns) and supports a color hue argument (for categorical columns).","c559b71d":"With large numbers on axes, it is often better use scientific notation:","04d1bdf8":"# Great Job!","f83154b4":"To remove the kde layer and just have the histogram use:","3bc0e19b":"## Data\nSeaborn comes with built-in data sets!","c04e1fb7":"___\n\n<a href='http:\/\/www.pieriandata.com'> <img src='..\/Pierian_Data_Logo.png' \/><\/a>\n___\n# Matplotlib Overview","00703936":"## Facet Grid\n\nFacetGrid is the general way to create grids of plots based off of a feature:","f2b83a3d":"There are a number of more advanced methods for controlling major and minor tick placement in matplotlib figures, such as automatic placement according to different policies. See http:\/\/matplotlib.org\/api\/ticker_api.html for details.","f47f039c":"The same arguments can also be passed to layout managers, such as the `subplots` function:","6466e2bc":"## Aspect and Size\n\nSeaborn figures can have their size and aspect ratio adjusted with the **size** and **aspect** parameters:","feb8f799":"A common issue with matplolib is overlapping subplots or figures. We ca use **fig.tight_layout()** or **plt.tight_layout()** method, which automatically adjusts the positions of the axes on the figure canvas so that there is no overlapping content:","7bbeb729":"# Distribution Plots\n\nLet's discuss some plots that allow us to visualize the distribution of a data set. These plots are:\n\n* distplot\n* jointplot\n* pairplot\n* rugplot\n* kdeplot","8218f3f5":"### Working with Markers\n\nlmplot kwargs get passed through to **regplot** which is a more general form of lmplot(). regplot has a scatter_kws parameter that gets passed to plt.scatter. So you want to set the s parameter in that dictionary, which corresponds (a bit confusingly) to the squared markersize. In other words you end up passing a dictionary with the base matplotlib arguments, in this case, s for size of a scatter plot. In general, you probably won't remember this off the top of your head, but instead reference the documentation.","054b63b5":"You can use the **label=\"label text\"** keyword argument when plots or other objects are added to the figure, and then using the **legend** method without arguments to add the legend to the figure:","65d9da1f":"We can also change the properties of axis spines:","85081e0f":"* http:\/\/www.matplotlib.org - The project web page for matplotlib.\n* https:\/\/github.com\/matplotlib\/matplotlib - The source code for matplotlib.\n* http:\/\/matplotlib.org\/gallery.html - A large gallery showcaseing various types of plots matplotlib can create. Highly recommended! \n* http:\/\/www.loria.fr\/~rougier\/teaching\/matplotlib - A good matplotlib tutorial.\n* http:\/\/scipy-lectures.github.io\/matplotlib\/matplotlib.html - Another good matplotlib reference.","5aa9bb7e":"## clustermap\n\nThe clustermap uses hierarchal clustering to produce a clustered version of the heatmap. For example:","66af822d":"#### add_axes","89845499":"## JointGrid\n\nJointGrid is the general version for jointplot() type grids, for a quick example:","e72a46fb":"## kdeplot\n\nkdeplots are [Kernel Density Estimation plots](http:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation#Practical_estimation_of_the_bandwidth). These KDE plots replace every single observation with a Gaussian (Normal) distribution centered around that value. For example:","d25b4699":"In this section we will look at controlling axis sizing properties in a matplotlib figure.","0ea26e88":"## 3D figures","1b28917c":"# Special Plot Types\n\nThere are many specialized plots we can create, such as barplots, histograms, scatter plots, and much more. Most of these type of plots we will actually create using seaborn, a statistical plotting library for Python. But here are a few examples of these type of plots:","e55ff945":"To use 3D graphics in matplotlib, we first need to create an instance of the `Axes3D` class. 3D axes can be added to a matplotlib figure canvas in exactly the same way as 2D axes; or, more conveniently, by passing a `projection='3d'` keyword argument to the `add_axes` or `add_subplot` methods.","e509d850":"We can iterate through this array:","5c1d1cdc":"Code is a little more complicated, but the advantage is that we now have full control of where the plot axes are placed, and we can easily add more than one axis to the figure:","da50c1f3":"## rugplot\n\nrugplots are actually a very simple concept, they just draw a dash mark for every point on a univariate distribution. They are the building block of a KDE plot:","57433a2e":"## Basic Matplotlib Commands\n\nWe can create a very simple line plot using the following ( I encourage you to pause and use Shift+Tab along the way to check out the document strings for the functions we are using).","f469e0d0":"# Basic Example\n\nLet's walk through a very simple example using two numpy arrays:","14300fe4":"___\n\n<a href='http:\/\/www.pieriandata.com'> <img src='..\/Pierian_Data_Logo.png' \/><\/a>\n___","c89c621b":"### Control over axis appearance","ff7b14d6":"#### subplots","62f9b530":"## Setting colors, linewidths, linetypes\n\nMatplotlib gives you *a lot* of options for customizing colors, linewidths, and linetypes. \n\nThere is the basic MATLAB like syntax (which I would suggest you avoid using for more clairty sake:","6fd960fb":"## jointplot\n\njointplot() allows you to basically match up two distplots for bivariate data. With your choice of what **kind** parameter to compare with: \n* \u201cscatter\u201d \n* \u201creg\u201d \n* \u201cresid\u201d \n* \u201ckde\u201d \n* \u201chex\u201d","2980a14c":"Notice now how the years and months are no longer in order, instead they are grouped by similarity in value (passenger count). That means we can begin to infer things from this plot, such as August and July being similar (makes sense, since they are both summer travel months)","311aa2ac":"We can also define colors by their names or RGB hex codes and optionally provide an alpha value using the `color` and `alpha` keyword arguments. Alpha indicates opacity.","48b37bba":"### Text annotation","997b9f77":"___\n\n<a href='http:\/\/www.pieriandata.com'> <img src='..\/Pierian_Data_Logo.png' \/><\/a>\n___","1f157de5":"#### contour","490de454":"### Line and marker styles","a58d495b":"## Introduction","a4aa6ac8":"### Colors with the color= parameter","6f635386":"We can explicitly determine where we want the axis ticks with `set_xticks` and `set_yticks`, which both take a list of values for where on the axis the ticks are to be placed. We can also use the `set_xticklabels` and `set_yticklabels` methods to provide a list of custom text labels for each tick location:","c1ff6d34":"## Plot range","a26c80f9":"## Scale and Context\n\nThe set_context() allows you to override default parameters:","508b2266":"____\n## Legends, labels and titles","363c67c4":"# Advanced Matplotlib Concepts Lecture\n\nIn this lecture we  cover some more advanced topics which you won't usually use as often. You can always reference the documentation for more resources!","49a3824b":"## distplot\n\nThe distplot shows the distribution of a univariate set of observations.","3f71031e":"### Axes where x and y is zero","255f3825":"### Colormap and contour figures","96cee467":"# Seaborn","9365cc75":"## pairplot\n\npairplot is a simpler version of PairGrid (you'll use quite often)","8860d8cb":"## kdeplot\n\nkdeplots are [Kernel Density Estimation plots](http:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation#Practical_estimation_of_the_bandwidth). These KDE plots replace every single observation with a Gaussian (Normal) distribution centered around that value. For example:","7126e3c3":"You can use matplotlib's **plt.figure(figsize=(width,height) ** to change the size of most seaborn plots.\n\nYou can control the size and aspect ratio of most seaborn grid plots by passing in parameters: size, and aspect. For example:","cb853f6f":"To save a figure to a file we can use the `savefig` method in the `Figure` class:","ee36df7b":"\n### Axis grid","67530f5d":"## rugplot\n\nrugplots are actually a very simple concept, they just draw a dash mark for every point on a univariate distribution. They are the building block of a KDE plot:","78bd0e2d":"## distplot\n\nThe distplot shows the distribution of a univariate set of observations.","51afecef":"Import the `matplotlib.pyplot` module under the name `plt` (the tidy way):","722304f0":"#### pcolor","de76756c":"The main idea in using the more formal Object Oriented method is to create figure objects and then just call methods or attributes off of that object. This approach is nicer when dealing with a canvas that has multiple plots on it. \n\nTo begin we create a figure instance. Then we can add axes to that figure:","23f3715d":"You're probably wondering how to change the font size or control the aesthetics even more, check out the Style and Color Lecture and Notebook for more info on that!\n\n# Great Job!","59d83a97":"Now that we have covered the basics of how to create a figure canvas and add axes instances to the canvas, let's look at how decorate a figure with titles, axis labels, and legends.","bc31864e":"### Colors with MatLab like syntax","593b2341":"Or for the flights data:","3c7a9ceb":"### Other 2D plot styles","04c7dafb":"Sometimes it is useful to have dual x or y axes in a figure; for example, when plotting curves with different units together. Matplotlib supports this with the `twinx` and `twiny` functions:","3f7c6bcc":"# Distribution Plots\n\nLet's discuss some plots that allow us to visualize the distribution of a data set. These plots are:\n\n* distplot\n* jointplot\n* pairplot\n* rugplot\n* kdeplot","ad113d8a":"#### Surface plots","755f3dfb":"# Matrix Plots\n\nMatrix plots allow you to plot data as color-encoded matrices and can also be used to indicate clusters within the data (later in the machine learning section we will learn how to formally cluster data).\n\nLet's begin by exploring seaborn's heatmap and clutermap:","690450ca":"## lmplot()","91ec3ade":"# Regression Plots\n\nSeaborn has many built-in capabilities for regression plots, however we won't really discuss regression until the machine learning section of the course, so we will only cover the **lmplot()** function for now.\n\n**lmplot** allows you to display linear models, but it also conveniently allows you to split up those plots based off of features, as well as coloring the hue based off of features.\n\nLet's explore how this works:","3b74f1d5":"#### Logarithmic scale"}}