{"cell_type":{"29e0f4d5":"code","8abdfa91":"code","0098e9f6":"code","3bc7561e":"code","0e518283":"code","bce6630a":"code","2374cd84":"code","d3f8187d":"code","9942eb10":"code","f00a8a4f":"code","b5fe708d":"code","376326dc":"code","4cdc703a":"code","039e7a47":"code","e766aca6":"code","b4222b9e":"code","68e20fa0":"code","16084c5d":"code","672651c3":"code","9a4aa9df":"code","b7327e0b":"code","0395b0f3":"code","a5c4d7e4":"code","e2ffe302":"code","f0e9fa79":"code","cedfd2c9":"code","2ec33bc4":"code","05958438":"code","98a698d9":"code","415fc8b5":"code","f530d9a2":"code","492b3260":"code","aca4764d":"code","d5d50d49":"code","8ba3d03e":"code","da424c52":"code","0ddbf6cd":"code","0e473ebd":"code","68af3e99":"code","7e434d96":"code","05b03e46":"code","063dc997":"code","2feb95e8":"code","90469298":"code","0e714ee1":"code","e4306bce":"code","2dfdf75c":"code","6c882799":"code","e5fe3dde":"code","a359f0d8":"code","cba28dec":"code","b6fb6374":"code","4c2cabe8":"code","33ae001d":"code","8d2f2dc8":"code","c77d7d82":"code","1ae3d296":"code","6b27a6f8":"code","f6600534":"code","db143cad":"code","f5d7bd6c":"code","95a33a92":"markdown","2aceef77":"markdown","351cf3a6":"markdown","e4a5c64f":"markdown","892cd334":"markdown","b6a55cac":"markdown","b156d078":"markdown","72affa6b":"markdown","50d64ed0":"markdown","e0e6cf02":"markdown","aa80f426":"markdown","434d6aad":"markdown","abad932e":"markdown","ddaf6dca":"markdown","9e638eaa":"markdown","3c892892":"markdown","21587590":"markdown","055fd284":"markdown","266bb05e":"markdown","adc22525":"markdown","75bb0cca":"markdown","ee932f67":"markdown","c7dc92f7":"markdown","6e83f70b":"markdown","64dba9f0":"markdown","f1595f82":"markdown","8eb9d842":"markdown","056b2271":"markdown","f80df33f":"markdown","f0c7549b":"markdown","69267fbd":"markdown","bcb35b1f":"markdown","97257f97":"markdown","3b219b8e":"markdown","75ca1cfc":"markdown","703f0ac3":"markdown","f1de837a":"markdown","7e2ee542":"markdown","f9217404":"markdown","525b479c":"markdown","26b4ab83":"markdown","1c0be7f1":"markdown","26b552a5":"markdown","6ef9f2ad":"markdown","b59afbbc":"markdown","a774039e":"markdown","62ab2071":"markdown","30f8c2eb":"markdown","94423eea":"markdown","908e48e2":"markdown","ff5c28d6":"markdown","1bdd213b":"markdown","b1484944":"markdown","be4d2de4":"markdown","745f911c":"markdown","e4644fcf":"markdown","afbca8f2":"markdown","dd9a01ac":"markdown","2534b099":"markdown","30cea97e":"markdown","0d0c034c":"markdown","8476d722":"markdown","82577420":"markdown","5dab281c":"markdown"},"source":{"29e0f4d5":"import warnings\nwarnings.filterwarnings(\"ignore\") \nimport time\nfrom datetime import datetime\nimport math\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker \nimport pycountry_convert as pc\nimport folium\nimport missingno as msno\nfrom datetime import datetime,date\nfrom scipy.interpolate import make_interp_spline, BSpline\n%matplotlib inline\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error","8abdfa91":"data_confirmed_cases= pd.read_csv('\/kaggle\/input\/pakistan-covid19-deaths-and-confirmed-cases\/Pakistan_Confirmed_cases.csv')","0098e9f6":"data_confirmed_cases","3bc7561e":"data_confirmed_cases.columns","0e518283":"data_confirmed_cases.info()","bce6630a":"data_confirmed_cases.dtypes","2374cd84":"data_confirmed_cases.describe()","d3f8187d":"data_deaths=pd.read_csv('\/kaggle\/input\/pakistan-covid19-deaths-and-confirmed-cases\/Pakistan_Deaths.csv')","9942eb10":"data_deaths.head()","f00a8a4f":"data_deaths.columns","b5fe708d":"data_deaths.info()","376326dc":"data_deaths.dtypes","4cdc703a":"data_deaths.describe()","039e7a47":"df_confirmed = data_confirmed_cases.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndf_deaths = data_deaths.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})","e766aca6":"countries = np.asarray(df_confirmed[\"country\"])\ncountries","b4222b9e":"continents = {\n    'NA': 'North America',\n    'SA': 'South America', \n    'AS': 'Asia',\n    'OC': 'Australia',\n    'AF': 'Africa',\n    'EU' : 'Europe',\n    'na' : 'Others'\n}","68e20fa0":"def country_to_continent_code(country):\n    try:\n        return pc.country_alpha2_to_continent_code(pc.country_name_to_country_alpha2(country))\n    except :\n        return 'na'","16084c5d":"df_confirmed = df_confirmed.replace(np.nan, '', regex=True)\ndf_deaths = df_deaths.replace(np.nan, '', regex=True)","672651c3":"def plot_params(ax,axis_label= None, plt_title = None,label_size=15, axis_fsize = 15, title_fsize = 20, scale = 'linear' ):\n    # Tick-Parameters\n    ax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.tick_params(which='both', width=1,labelsize=label_size)\n    ax.tick_params(which='major', length=6)\n    ax.tick_params(which='minor', length=3, color='0.8')\n\n    # Grid\n    plt.grid(lw = 1, ls = '-', c = \"0.7\", which = 'major')\n    plt.grid(lw = 1, ls = '-', c = \"0.9\", which = 'minor')\n\n    # Plot Title\n    plt.title( plt_title,{'fontsize':title_fsize})\n    \n    # Yaxis sacle\n    plt.yscale(scale)\n    \n    # Plot Axes Labels\n    xl = plt.xlabel(axis_label[0],fontsize = axis_fsize)\n    yl = plt.ylabel(axis_label[1],fontsize = axis_fsize)\n    \ndef visualize_covid_cases(confirmed, deaths, continent=None , country = None , state = None, period = None, figure = None, scale = \"linear\"):\n    x = 0\n    if figure == None:\n        f = plt.figure(figsize=(10,10))\n        # Sub plot\n        ax = f.add_subplot(111)\n    else :\n        f = figure[0]\n        # Sub plot\n        ax = f.add_subplot(figure[1],figure[2],figure[3])\n    \n    plt.tight_layout(pad=10, w_pad=5, h_pad=5)\n    \n    stats = [confirmed, deaths]\n    label = [\"Confirmed\", \"Deaths\"]\n    \n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else: \n        params = [\"All\", \"All\"]\n\n    for i,stat in enumerate(stats):\n        if params[1] == \"All\" :\n            cases = np.sum(np.asarray(stat.iloc[:,5:]),axis = 0)[x:]\n        else :\n            cases = np.sum(np.asarray(stat[stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        date = np.arange(1,cases.shape[0]+1)[x:]\n        plt.plot(date,cases,label = label[i]+\" (Total : \"+str(cases[-1])+\")\")\n\n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(stats[0].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1].iloc[:,5:]),axis = 0)[x:]\n        \n    else :\n        Total_confirmed =  np.sum(np.asarray(stats[0][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n      \n        \n    text = \"From \"+stats[0].columns[4]+\" to \"+stats[0].columns[-2]+\"\\n\"\n    text += \"Mortality rate : \"+ str(int(Total_deaths[-1]\/(Total_confirmed[-1])*10000)\/100)+\"\\n\"\n    text += \"Last 5 Days:\\n\"\n    text += \"Confirmed : \" + str(Total_confirmed[-1] - Total_confirmed[-6])+\"\\n\"\n    text += \"Deaths : \" + str(Total_deaths[-1] - Total_deaths[-6])+\"\\n\"\n    text += \"Last 24 Hours:\\n\"\n    text += \"Confirmed : \" + str(Total_confirmed[-1] - Total_confirmed[-2])+\"\\n\"\n    text += \"Deaths : \" + str(Total_deaths[-1] - Total_deaths[-2])+\"\\n\"\n    \n    plt.text(0.02, 0.78, text, fontsize=14, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes,bbox=dict(facecolor='white', alpha=0.4))\n    \n    # Plot Axes Labels\n    axis_label = [\"Days (\"+df_confirmed.columns[5]+\" - \"+df_confirmed.columns[-1]+\")\",\"No of Cases\"]\n    \n    # Plot Parameters\n    plot_params(ax,axis_label,scale = scale)\n    \n    # Plot Title\n    if params[1] == \"All\" :\n        plt.title(\"COVID-19 Cases World\",{'fontsize':25})\n    else:   \n        plt.title(\"COVID-19 Cases for \"+params[0]+\" \"+params[1] ,{'fontsize':25})\n        \n    # Legend Location\n    l = plt.legend(loc= \"best\",fontsize = 13)\n    \n    if figure == None:\n        plt.show()\n        \ndef get_total_cases(cases, country = \"All\"):\n    if(country == \"All\") :\n        return np.sum(np.asarray(cases.iloc[:,5:]),axis = 0)[-1]\n    else :\n        return np.sum(np.asarray(cases[cases[\"country\"] == country].iloc[:,5:]),axis = 0)[-1]\n    \ndef get_mortality_rate(confirmed,deaths, continent = None, country = None):\n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else :\n        params = [\"All\", \"All\"]\n    \n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(confirmed.iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths.iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/Total_confirmed)*100,2)\n    else :\n        Total_confirmed =  np.sum(np.asarray(confirmed[confirmed[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths[deaths[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/Total_confirmed)*100,2)\n    \n    return np.nan_to_num(mortality_rate)\ndef dd(date1,date2):\n    return (datetime.strptime(date1,'%m\/%d\/%y') - datetime.strptime(date2,'%m\/%d\/%y')).days","9a4aa9df":"confirmed_cases =  df_confirmed.groupby([\"country\"]).sum().drop(['Lat','Long'],axis =1).iloc[:,-1]\ndeaths = df_deaths.groupby([\"country\"]).sum().drop(['Lat','Long'],axis =1).iloc[:,-1]\n\nconfirmed_cases.name = \"Confirmed Cases\"\ndeaths.name = \"Deaths Reported\"\ndf_countries_cases = pd.DataFrame([confirmed_cases,deaths]).transpose()","b7327e0b":"rows = 4\nf = plt.figure(figsize=(15,10*rows))\n\nstats = [df_confirmed,df_deaths]\nlabel = [\"Confirmed\",\"Deaths\"]\nthreshold = [1500,100]\nfor i, stat in enumerate(stats):\n    plt.tight_layout()\n    df_countries = stat.groupby([\"country\"]).sum()\n    df_countries = df_countries.sort_values(df_countries.columns[-1],ascending= False)\n    others = df_countries[df_countries[df_countries.columns[-1]] < threshold[i] ].sum()[-1]\n    df_countries = df_countries[df_countries[df_countries.columns[-1]] > threshold[i]]\n    df_countries = df_countries[df_countries.columns[-1]]\n    labels = [df_countries.index[i] +\" (\" + str(int(df_countries[i])) +\") \"for i in range(df_countries.shape[0])]\n\n    ax = f.add_subplot(rows,1,i+1)\n    plt.pie(df_countries, labels=labels,autopct='%1.1f%%',pctdistance=0.85, labeldistance=1.1,textprops = {'fontsize':10.5})\n    my_circle=plt.Circle( (0,0), 0.7, color='white')\n    p=plt.gcf()\n    p.gca().add_artist(my_circle)\n    plt.text(0.5,0.5,\"Total Pakistan \"+label[i]+ \" Cases\\n\"+str(get_total_cases(stat)), horizontalalignment='center',verticalalignment='center',transform=ax.transAxes, size=18, alpha = 0.6)\n\n\nplt.show()\n","0395b0f3":"pd.DataFrame(df_countries_cases.sum()).transpose().style.background_gradient(cmap='Wistia',axis=1)","a5c4d7e4":"world_map = folium.Map(location=[10,0], tiles=\"cartodbpositron\", zoom_start=2,max_zoom=6,min_zoom=2)\nfor i in range(0,len(df_confirmed)):\n    folium.Circle(\n        location=[df_confirmed.iloc[i]['Lat'], df_confirmed.iloc[i]['Long']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+df_confirmed.iloc[i]['country']+\"<\/h5>\"+\n                    \"<div style='text-align:center;'>\"+str(np.nan_to_num(df_confirmed.iloc[i]['state']))+\"<\/div>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #555;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed \"+str(df_confirmed.iloc[i,-1])+\"<\/li>\"+\n\n        \"<li>Deaths   \"+str(df_deaths.iloc[i,-1])+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius=(int((np.log(df_confirmed.iloc[i,-1]+1)))+0.2)*50000,\n        color='#ff6600',\n        fill_color='#ff8533',\n        fill=True).add_to(world_map)\n\nworld_map","e2ffe302":"df_countries = df_confirmed.groupby([\"country\"]).sum()\ndf_countries = df_countries.sort_values(df_countries.columns[-1],ascending = False)\ncountries = df_countries[df_countries[df_countries.columns[-1]] >= 1500].index\n\ncols =2\nrows = int(np.ceil(countries.shape[0]\/cols))\nf = plt.figure(figsize=(20,10*rows))\nfor i,country in enumerate(countries):\n    visualize_covid_cases(df_confirmed, df_deaths,country = country,figure = [f,rows,cols, i+1])\nplt.show()","f0e9fa79":"temp = df_confirmed.groupby('country').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(df_confirmed.columns[-1], ascending= False)\n\nthreshold = 50\nf = plt.figure(figsize=(10,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    if i >= 10:\n        if country != \"Pakistan\":\n            continue\n    x = 30\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:x]\n     \n    date = np.arange(0,len(t[:x]))\n    xnew = np.linspace(date.min(), date.max(), 10)\n    spl = make_interp_spline(date, t, k=1)  \n    power_smooth = spl(xnew)\n    if country != \"Pakistan\":\n        plt.plot(xnew,power_smooth,label = country,linewidth =2)\n    else:\n        marker_style = dict(linewidth=4, linestyle='-', marker='o',markersize=10, markerfacecolor='#ffffff')\n        plt.plot(date,t,\"-.\",label = country,**marker_style)\n\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,30,7),[ \"Day \"+str(i) for i in range(30)][::7])     \n\n\nx = np.arange(0,18)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of cases doubles every day\",(x[-2],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/2+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every socend day\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every week\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every month\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\n\n\nx = np.arange(0,26)\ny = 2**(x\/4+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"Red\")\nplt.annotate(\".. every 4 days\",(x[-3],y[-1]),color=\"Red\",xycoords=\"data\",fontsize=14,alpha = 0.8)\n\n\nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Confirmed Cases\",fontsize=17)\nplt.title(\"Trend of Pakistan Confirm cases\",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\nplt.show()","cedfd2c9":"df_continents= df_confirmed.groupby([\"continent\"]).sum()\ncontinents = df_continents.sort_values(df_continents.columns[-1],ascending = False).index\ncontinents = [\"All\"]+list(continents)\n\ncols =1\nrows = 2\naxis_label = [\"Days (\"+df_confirmed.columns[5]+\" - \"+df_confirmed.columns[-1]+\")\",\"Mortality Rate (of 100)\"]\n\nf = plt.figure(figsize=(15,10*rows))\n\n\nax = f.add_subplot(211)\nmortality_rate = get_mortality_rate(df_confirmed,df_deaths,continent=continents[0])\nplt.plot(np.arange(1,mortality_rate.shape[0]+1),mortality_rate,label = \"Current Mortality Rate \"+str(mortality_rate[-1]))\n\nplt_title = \"Mortality Rate Curve of Pakistan\"\nplot_params(ax,axis_label,plt_title)\nl = plt.legend(loc= \"best\")\nplt.show()\n","2ec33bc4":"df_confirmed_report = df_confirmed.copy()\ndf_confirmed_report = df_confirmed_report.groupby(\"country\").sum().drop([\"Lat\",\"Long\"],axis =1)\ndf_confirmed_report.loc[\"Total\"] = df_confirmed_report.sum()\ndf_confirmed_newcases = df_confirmed_report.groupby(level =0).diff(axis =1)\ndf_confirmed_newcases=df_confirmed_newcases.drop(columns=['1\/22\/20'])\n\ndf_deaths_report = df_deaths.copy()\ndf_deaths_report = df_deaths_report.groupby(\"country\").sum().drop([\"Lat\",\"Long\"],axis =1)\ndf_deaths_report.loc[\"Total\"] = df_deaths_report.sum()\ndf_deaths_newcases = df_deaths_report.groupby(level =0).diff(axis =1)\ndf_deaths_newcases=df_deaths_newcases.drop(columns=['1\/22\/20'])","05958438":"confirm=df_confirmed_newcases\nconfirm=confirm.T\n\nconfirm['Date']=confirm.index\n\nconfirm=confirm[['Date', 'Pakistan']]\n\nconfirm_cases=pd.DataFrame()\n\nconfirm_cases['Date']=confirm['Date']\nconfirm_cases['Pakistan cases']=confirm['Pakistan']\n\nconfirm_cases=confirm_cases.reset_index()\nconfirm_cases=confirm_cases.drop(columns=['index'])","98a698d9":"confirm_cases.head(60)","415fc8b5":"confirm_cases=confirm_cases[49:]\nconfirm_cases","f530d9a2":"confirm_cases['Pakistan cases']=confirm_cases['Pakistan cases'].replace(0,0.1)","492b3260":"confirm_cases['times'] = pd.to_datetime(confirm_cases['Date'])  \nconfirm_cases.set_index('times', inplace=True)                   \nconfirm_cases.sort_index(ascending=True, inplace=True)\ntar='Pakistan Confirm Cases Predictions'\nconfirm_cases.rename(columns={'Pakistan cases':tar}, inplace=True)\nconfirm_cases=confirm_cases[[tar]]","aca4764d":"def create_features(data, label=None):\n    data['date'] = data.index\n    data['month'] = data['date'].dt.month\n    data['year'] = data['date'].dt.year\n    data['dayofmonth'] = data['date'].dt.day\n    X = data[['month','year','dayofmonth']]\n    if label:\n        y = data[label]\n        return X, y\n    return X","d5d50d49":"test=confirm_cases.copy()\nX= create_features(test)\ny=confirm_cases","8ba3d03e":"from sklearn.cross_decomposition import PLSRegression\npls = PLSRegression()","da424c52":"x=np.array(X)\ny=np.array(y)\ny=y.ravel()\nkf = KFold(n_splits=5)\noutcomes2 = []\nClassR=0\nConM=0\nfold = 0\ni=0\nconf_matrix_list_of_arrays = []\nfor train_index, test_index in kf.split(x,y):\n    i=i+1\n    print('\\n')\n    print(\"Cross validation\",i)\n    fold += 1\n    Xtrain, Xtest = x[train_index], x[test_index]\n    ytrain, y_test = y[train_index], y[test_index]\n    pls.fit(Xtrain, ytrain)\n    y_pred = pls.predict(Xtest)\n    MAE=mean_absolute_error(y_test,y_pred)\n    print('Mean Absolute error: ', MAE)\n    mse=mean_squared_error(y_test,y_pred)\n    rmse = math.sqrt(mse)\n    print('Root mean squared error: ', rmse)","0ddbf6cd":"from sklearn.svm import LinearSVR\nsvr = LinearSVR()","0e473ebd":"x=np.array(X)\ny=np.array(y)\ny=y.ravel()\nkf = KFold(n_splits=5)\noutcomes2 = []\nClassR=0\nConM=0\nfold = 0\ni=0\nconf_matrix_list_of_arrays = []\nfor train_index, test_index in kf.split(x,y):\n    i=i+1\n    print('\\n')\n    print(\"Cross validation\",i)\n    fold += 1\n    Xtrain, Xtest = x[train_index], x[test_index]\n    ytrain, y_test = y[train_index], y[test_index]\n    svr.fit(Xtrain, ytrain)\n    y_pred = svr.predict(Xtest)\n    MAE=mean_absolute_error(y_test,y_pred)\n    print('Mean Absolute error: ', MAE)\n    mse=mean_squared_error(y_test,y_pred)\n    rmse = math.sqrt(mse)\n    print('Root mean squared error: ', rmse)","68af3e99":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()","7e434d96":"x=np.array(X)\ny=np.array(y)\ny=y.ravel()\nkf = KFold(n_splits=5)\noutcomes2 = []\nClassR=0\nConM=0\nfold = 0\ni=0\nconf_matrix_list_of_arrays = []\nfor train_index, test_index in kf.split(x,y):\n    i=i+1\n    print('\\n')\n    print(\"Cross validation\",i)\n    fold += 1\n    Xtrain, Xtest = x[train_index], x[test_index]\n    ytrain, y_test = y[train_index], y[test_index]\n    rf.fit(Xtrain, ytrain)\n    y_pred = pls.predict(Xtest)\n    MAE=mean_absolute_error(y_test,y_pred)\n    print('Mean Absolute error: ', MAE)\n    mse=mean_squared_error(y_test,y_pred)\n    rmse = math.sqrt(mse)\n    print('Root mean squared error: ', rmse)","05b03e46":"rf=RandomForestRegressor()\nx=np.array(X)\ny=np.array(y)\ny=y.ravel()\nRF=rf.fit(Xtrain, ytrain)","063dc997":"frequency='D'\nt=datetime.now()\ndef forecast(number):\n  datelist = pd.date_range(t, periods=number,freq=frequency)\n  datelist= pd.DataFrame(datelist,columns=['TIMESTAMP'])\n  datelist.index = datelist['TIMESTAMP']\n  datelist_featured=create_features(datelist)\n  prediction=RF.predict(datelist_featured)\n  pred=pd.DataFrame(prediction,columns=confirm_cases.columns)\n  pred.index = datelist['TIMESTAMP']\n  return pred","2feb95e8":"forecast=forecast(7)\nforecast","90469298":"forecast.plot(figsize=(20, 5), color='r')","0e714ee1":"deaths=df_deaths_newcases\ndeaths=deaths.T\n\ndeaths['Date']=deaths.index\n\ndeaths=deaths[['Date', 'Pakistan']]\n\ndeaths_cases=pd.DataFrame()\n\ndeaths_cases['Date']=deaths['Date']\ndeaths_cases['Pakistan cases']=deaths['Pakistan']\n\ndeaths_cases=deaths_cases.reset_index()\ndeaths_cases=deaths_cases.drop(columns=['index'])","e4306bce":"deaths_cases.head(60)","2dfdf75c":"deaths_cases=deaths_cases[65:]\ndeaths_cases","6c882799":"deaths_cases['Pakistan cases']=deaths_cases['Pakistan cases'].replace(0,0.1)","e5fe3dde":"deaths_cases['times'] = pd.to_datetime(deaths_cases['Date'])  \ndeaths_cases.set_index('times', inplace=True)                   \ndeaths_cases.sort_index(ascending=True, inplace=True)\ntar='Pakistan Deaths Predictions'\ndeaths_cases.rename(columns={'Pakistan cases':tar}, inplace=True)\ndeaths_cases=deaths_cases[[tar]]","a359f0d8":"def create_features(data, label=None):\n    data['date'] = data.index\n    data['month'] = data['date'].dt.month\n    data['year'] = data['date'].dt.year\n    data['dayofmonth'] = data['date'].dt.day\n    X = data[['month','year','dayofmonth']]\n    if label:\n        y = data[label]\n        return X, y\n    return X","cba28dec":"test=deaths_cases.copy()\nX= create_features(test)\ny=deaths_cases","b6fb6374":"from sklearn.cross_decomposition import PLSRegression\npls = PLSRegression()","4c2cabe8":"x=np.array(X)\ny=np.array(y)\ny=y.ravel()\nkf = KFold(n_splits=5)\noutcomes2 = []\nClassR=0\nConM=0\nfold = 0\ni=0\nconf_matrix_list_of_arrays = []\nfor train_index, test_index in kf.split(x,y):\n    i=i+1\n    print('\\n')\n    print(\"Cross validation\",i)\n    fold += 1\n    Xtrain, Xtest = x[train_index], x[test_index]\n    ytrain, y_test = y[train_index], y[test_index]\n    pls.fit(Xtrain, ytrain)\n    y_pred = pls.predict(Xtest)\n    MAE=mean_absolute_error(y_test,y_pred)\n    print('Mean Absolute error: ', MAE)\n    mse=mean_squared_error(y_test,y_pred)\n    rmse = math.sqrt(mse)\n    print('Root mean squared error: ', rmse)","33ae001d":"from sklearn.svm import LinearSVR\nsvr = LinearSVR()","8d2f2dc8":"x=np.array(X)\ny=np.array(y)\ny=y.ravel()\nkf = KFold(n_splits=5)\noutcomes2 = []\nClassR=0\nConM=0\nfold = 0\ni=0\nconf_matrix_list_of_arrays = []\nfor train_index, test_index in kf.split(x,y):\n    i=i+1\n    print('\\n')\n    print(\"Cross validation\",i)\n    fold += 1\n    Xtrain, Xtest = x[train_index], x[test_index]\n    ytrain, y_test = y[train_index], y[test_index]\n    svr.fit(Xtrain, ytrain)\n    y_pred = svr.predict(Xtest)\n    MAE=mean_absolute_error(y_test,y_pred)\n    print('Mean Absolute error: ', MAE)\n    mse=mean_squared_error(y_test,y_pred)\n    rmse = math.sqrt(mse)\n    print('Root mean squared error: ', rmse)","c77d7d82":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()","1ae3d296":"x=np.array(X)\ny=np.array(y)\ny=y.ravel()\nkf = KFold(n_splits=5)\noutcomes2 = []\nClassR=0\nConM=0\nfold = 0\ni=0\nconf_matrix_list_of_arrays = []\nfor train_index, test_index in kf.split(x,y):\n    i=i+1\n    print('\\n')\n    print(\"Cross validation\",i)\n    fold += 1\n    Xtrain, Xtest = x[train_index], x[test_index]\n    ytrain, y_test = y[train_index], y[test_index]\n    rf.fit(Xtrain, ytrain)\n    y_pred = pls.predict(Xtest)\n    MAE=mean_absolute_error(y_test,y_pred)\n    print('Mean Absolute error: ', MAE)\n    mse=mean_squared_error(y_test,y_pred)\n    rmse = math.sqrt(mse)\n    print('Root mean squared error: ', rmse)","6b27a6f8":"rf=RandomForestRegressor()\nx=np.array(X)\ny=np.array(y)\ny=y.ravel()\nRF=rf.fit(Xtrain, ytrain)","f6600534":"frequency='D'\nt=datetime.now()\ndef forecast(number):\n  datelist = pd.date_range(t, periods=number,freq=frequency)\n  datelist= pd.DataFrame(datelist,columns=['TIMESTAMP'])\n  datelist.index = datelist['TIMESTAMP']\n  datelist_featured=create_features(datelist)\n  prediction=RF.predict(datelist_featured)\n  pred=pd.DataFrame(prediction,columns=deaths_cases.columns)\n  pred.index = datelist['TIMESTAMP']\n  return pred","db143cad":"forecast=forecast(7)\nforecast","f5d7bd6c":"forecast.plot(figsize=(20, 5), color='r')","95a33a92":"### Mortality Rate Variation Over Period of Time. It is increasing very fast. ","2aceef77":"### Cross validation","351cf3a6":"### Spread of COVID-19 in  Pakistan, we can see mortality rate of all deaths with confirm cases and  deaths. In last 24 hours, confirm cases and deaths in Pakistan. ","e4a5c64f":"## Pre-processing of dataset","892cd334":"## -------------Machine Learning Algorithm and Evaluation---------------","b6a55cac":"## As we can see the results of three algorithms above but random forest regression algorithm performed well and we got minimum mean absolute error and root mean squared error. So now going to train all data on random forest algorithm and then we will get predictions of CONFIRM CASES","b156d078":"### Visualization of Pakistan on Map","72affa6b":"### Predictions death cases of next 7 days","50d64ed0":"### Spliting dates into  month, year and Day of month","e0e6cf02":"## General Analysis of Data","aa80f426":"### Getting country name","434d6aad":"### Data information","abad932e":"### Data types of all coloumns","ddaf6dca":"## Importing COVID-19 Confirmed cases of Pakistan","9e638eaa":" ### Functions for the plots and graphs\n - plot_params()\n - visualize_covid_cases()\n - get_mortality_rate()","3c892892":"### Defininng Function for getting continent code for country","21587590":"### Data Description, here we can see the values of columns as minimum value, maximum value, counts etc","055fd284":"## Pakistan Confirm Cases Predictions of COVID-19","266bb05e":"### Cross validation","adc22525":"### Cross validation","75bb0cca":"# <img src=\"https:\/\/static.dw.com\/image\/56988088_401.jpg\">","ee932f67":"### Forecasting function by using the trained model for predictions","c7dc92f7":"### Cross validation","6e83f70b":"### Importing Libraries","64dba9f0":"### Changing Continent code to Continent names as we will create a map and show the Pakistan ","f1595f82":"### Preparing deaths cases data for Training and predictions","8eb9d842":"### Preparing Pakistan confirm cases and Deaths for training the machine learning models","056b2271":"### If we look at the first 49 days so there are no cases in Pakistan but few in some day between but from index 46 to 49 increasing slowly ","f80df33f":"### Renaming the Province\/State into state and Country\/Region into country","f0c7549b":"### Data Description, here we can see the values of columns as minimum value, maximum value, counts etc","69267fbd":"<div class=\"alert alert-block alert-danger\">  \n<h1>If you like my work, please upvote ^ \ud83d\udc4d my kernel so that i will be motivated to share more content to Kaggle community. Thanks \ud83d\ude0d<\/h1>\n        <\/p>\n<\/div>","bcb35b1f":"### So going to Ignore fisrt above days data and goin to use the next ","97257f97":"### Support vector  Regressor Algorithm","3b219b8e":"## COVID-19 Spread Analysis","75ca1cfc":"### Total Pakistan confirm and deaths cases in graph","703f0ac3":"# ----------------Machine Learning Algorithm and Evaluation-----------------","f1de837a":"### Importing Deaths cases of COVID-19 directly from githubusercontent as updated dataset","7e2ee542":"### If we look at the first 65 days so there are no deaths in Pakistan but few in some day between but from index 48 to 65 increasing slowly ","f9217404":"### Random Forest  Regressor Algorithm","525b479c":"### Random Forest  Regressor Algorithm","26b4ab83":"### Data information","1c0be7f1":"### Data types of all coloumns","26b552a5":"### Trend of Pakistan Confirm cases. As we can see that the cases are increasing in blue line with every 4 days 10 power of 4 means around 10000 cases now. ","6ef9f2ad":"## Exploratory data analysis","b59afbbc":"### Forecasting function by using the trained model for predictions","a774039e":"### Cross validation","62ab2071":"### Getting country data as count of confirm cases and deaths ","30f8c2eb":"### So going to Ignore fisrt above days data and goin to use the next ","94423eea":"### Data for training input and prediction output","908e48e2":"### Cross validation","ff5c28d6":"### Repacing NaN values that we were getting in province so replacing with empty space","1bdd213b":"## Predictions confirm cases of next 7 days","b1484944":"### Coloumns\/features in data","be4d2de4":"### Coloumns\/features in data","745f911c":"### Date settings and Pakistan deaths_cases preparation accroding to dates","e4644fcf":"### As we can see the results of three algorithms above but random forest regression algorithm performed well and we got minimum mean absolute error and root mean squared error. So now going to train all data on random forest algorithm and then we will get predictions of DEATHS CASES","afbca8f2":"### Preparing Confirm cases data for Training and predictions","dd9a01ac":"### PLS Algorithm","2534b099":"### Support vector  Regressor Algorithm","30cea97e":"## Pakistan Deaths Predictions of COVID-19","0d0c034c":"### Date settings and Pakistan cases preparation accroding to dates","8476d722":"### Data for training input and prediction output","82577420":"### PLS Algorithm","5dab281c":"### Spliting dates into  month, year and Day of month"}}