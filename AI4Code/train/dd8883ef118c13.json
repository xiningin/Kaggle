{"cell_type":{"788247ac":"code","e6d84c66":"code","cc22ea79":"code","96b60578":"code","48f62a45":"code","40a093b3":"code","5b24fc94":"code","e9a87d65":"code","c0e166db":"code","2c7763c5":"code","4fc624df":"code","703695df":"code","c93a7fb1":"code","43688caf":"code","6a7c7beb":"code","6ae4ea90":"code","6360b88a":"code","29653bdb":"code","60a459bc":"code","4798d2ac":"code","e1eafdcc":"markdown","22b8824a":"markdown"},"source":{"788247ac":"import pandas as pd\nimport numpy as np\nfrom scipy.stats import skew\n# \uc0ac\uc774\ud30c\uc774(SciPy)\ub294 \uc218\uce58\ud574\uc11d\uae30\ub2a5\uc744 \uc81c\uacf5\ud558\ub294 \ud30c\uc774\uc36c \ud328\ud0a4\uc9c0\ub2e4. \n# stats \uc11c\ube0c\ud328\ud0a4\uc9c0\ub294 \ud655\ub960\ubd84\ud3ec \ubd84\uc11d\uc744 \uc704\ud55c \ub2e4\uc591\ud55c \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4.\nimport xgboost as xgb\nfrom sklearn.model_selection import KFold\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LogisticRegression\nfrom math import sqrt\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import KFold\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nimport gc","e6d84c66":"NFOLDS = 3\nSEED = 0\nNROWS = None\n\ndata = pd.read_csv('..\/input\/home-credit-default-risk\/application_train.csv')\ntest = pd.read_csv('..\/input\/home-credit-default-risk\/application_test.csv')\nprev = pd.read_csv('..\/input\/home-credit-default-risk\/previous_application.csv')","cc22ea79":"catgorical_feats = [f for f in data.columns if data[f].dtype == 'object']","96b60578":"for f_ in catgorical_feats:\n    # \ubc94\uc8fc\ud615 \ubcc0\uc218\uac00 \ubb38\uc790\uc5f4 data type\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uacbd\uc6b0, \ud074\ub798\uc2a4 \ub808\uc774\ube14\uc744 \uc815\uc218\ud615\uc73c\ub85c \uc778\ucf54\ub529 \uc9c4\ud589\n    data[f_], indexer = pd.factorize(data[f_])\n    test[f_] = indexer.get_indexer(test[f_])\n\ngc.enable()","48f62a45":"y_train = data['TARGET']\ndel data['TARGET']","40a093b3":"prev_cat_features = [f_ for f_ in prev.columns if prev[f_].dtype == 'object']\n\nfor f_ in prev_cat_features:\n    prev[f_], _ = pd.factorize(prev[f_])","5b24fc94":"avg_prev = prev.groupby('SK_ID_CURR').mean()\ncnt_prev = prev[['SK_ID_CURR', 'SK_ID_PREV']].groupby('SK_ID_CURR').count()\navg_prev['nb_app'] = cnt_prev['SK_ID_PREV']\ndel avg_prev['SK_ID_PREV']","e9a87d65":"x_train = data.merge(right = avg_prev.reset_index(), how = 'left', on = 'SK_ID_CURR')\nx_test = test.merge(right = avg_prev.reset_index(), how = 'left', on = 'SK_ID_CURR')\n\nx_train = x_train.fillna(0)\nx_test = x_test.fillna(0)\n\nntrain = x_train.shape[0]\nntest = x_test.shape[0]\n\nexcluded_feats = ['SK_ID_CURR']\nfeatures = [f_ for f_ in x_train.columns if f_ not in excluded_feats]","c0e166db":"x_train = x_train[features]\nx_test = x_test[features]\n\nkf = KFold(n_splits = NFOLDS, shuffle = True, random_state = SEED)","2c7763c5":"class SKlearnWrapper(object):\n    def __init__(self, clf, seed = 0, params = None):\n        params['random_state'] = seed\n        self.clf = clf(**params)\n        \n    def train(self, x_train, y_train):\n        self.clf.fit(x_train, y_train)\n    \n    def predict(self, x):\n        return self.clf.predict_proba(x)[:, 1]","4fc624df":"class CatboostWrapper(object):\n    def __init__(self, clf, seed = 0, params = None):\n        params['random_seed'] = seed\n        self.clf = clf(**params)\n    \n    def train(self, x_train, y_train):\n        self.clf.fit(x_train, y_train)\n        \n    def predict(self, x):\n        return self.clf.predict_proba(x)[:, 1]","703695df":"class LightGBMWrapper(object):\n    def __init__(self, clf, seed = 0, params = None):\n        params['feature_fraction_seed'] = seed\n        params['bagging_seed'] = seed\n        self.clf = clf(**params)\n    \n    def train(self, x_train, y_train):\n        self.clf.fit(x_train, y_train)\n        \n    def predict(self, x):\n        return self.clf.predict_proba(x)[:, 1]","c93a7fb1":"class XgbWrapper(object):\n    def __init__(self, seed = 0, params = None):\n        self.param = params\n        self.param['seed'] = seed\n        self.nrounds = params.pop('nrounds', 250)\n        \n    def train(self, x_train, y_train):\n        dtrain = xgb.DMatrix(x_train, label = y_train)\n        self.gbdt = xgb.train(self.param, dtrain, self.nrounds)\n        \n    def predict(self, x):\n        return self.gbdt.predict(xgb.DMatrix(x))","43688caf":"def get_oof(clf):\n    oof_train = np.zeros((ntrain, ))\n    oof_test = np.zeros((ntest, ))\n    oof_test_skf = np.empty((NFOLDS, ntest))\n    \n    for i, (train_index, test_index) in enumerate(kf.split(x_train)):\n        x_tr = x_train.loc[train_index]\n        y_tr = y_train.loc[train_index]\n        x_te = x_train.loc[test_index]\n        \n        clf.train(x_tr, y_tr)\n        \n        oof_train[test_index] = clf.predict(x_te)\n        oof_test_skf[i, :] = clf.predict(x_test)\n        \n    oof_test[:] = oof_test_skf.mean(axis = 0)\n    return oof_train.reshape(-1, 1), oof_test.reshape(-1, 1)","6a7c7beb":" et_params = {\n    'n_jobs': 16,\n    'n_estimators': 200,\n    'max_features': 0.5,\n    'max_depth': 12,\n    'min_samples_leaf': 2,\n}\n\nrf_params = {\n    'n_jobs': 16,\n    'n_estimators': 200,\n    'max_features': 0.2,\n    'max_depth': 12,\n    'min_samples_leaf': 2,\n}\n\nxgb_params = {\n    'seed': 0,\n    'colsample_bytree': 0.7,\n    'silent': 1,\n    'subsample': 0.7,\n    'learning_rate': 0.075,\n    'objective': 'binary:logistic',\n    'max_depth': 4,\n    'num_parallel_tree': 1,\n    'min_child_weight': 1,\n    'nrounds': 200\n}\n\ncatboost_params = {\n    'iterations': 200,\n    'learning_rate': 0.5,\n    'depth': 3,\n    'l2_leaf_reg': 40,\n    'bootstrap_type': 'Bernoulli',\n    'subsample': 0.7,\n    'scale_pos_weight': 5,\n    'eval_metric': 'AUC',\n    'od_type': 'Iter',\n    'allow_writing_files': False\n}\n\nlightgbm_params = {\n    'n_estimators':200,\n    'learning_rate':0.1,\n    'num_leaves':123,\n    'colsample_bytree':0.8,\n    'subsample':0.9,\n    'max_depth':15,\n    'reg_alpha':0.1,\n    'reg_lambda':0.1,\n    'min_split_gain':0.01,\n    'min_child_weight':2    \n}","6ae4ea90":"xg = XgbWrapper(seed = SEED, params = xgb_params)\net = SKlearnWrapper(clf = ExtraTreesClassifier, seed = SEED, params = et_params)\nrf = SKlearnWrapper(clf = RandomForestClassifier, seed = SEED, params = rf_params)\ncb = CatboostWrapper(clf = CatBoostClassifier, seed = SEED, params = catboost_params)\nlg = LightGBMWrapper(clf = LGBMClassifier, seed = SEED, params = lightgbm_params)","6360b88a":"xg_oof_train, xg_oof_test = get_oof(xg)\net_oof_train, et_oof_test = get_oof(et)\nrf_oof_train, rf_oof_test = get_oof(rf)\ncb_oof_train, cb_oof_test = get_oof(cb)","29653bdb":"print(\"XG-CV: {}\".format(sqrt(mean_squared_error(y_train, xg_oof_train))))\nprint(\"ET-CV: {}\".format(sqrt(mean_squared_error(y_train, et_oof_train))))\nprint(\"RF-CV: {}\".format(sqrt(mean_squared_error(y_train, rf_oof_train))))\nprint(\"RF-CV: {}\".format(sqrt(mean_squared_error(y_train, cb_oof_train))))","60a459bc":"x_train = np.concatenate((xg_oof_train, et_oof_train, rf_oof_train, cb_oof_train), axis=1)\nx_test = np.concatenate((xg_oof_test, et_oof_test, rf_oof_test, cb_oof_test), axis=1)\n\nprint(\"{},{}\".format(x_train.shape, x_test.shape))","4798d2ac":"logistic_regression = LogisticRegression()\nlogistic_regression.fit(x_train,y_train)\n\ntest['TARGET'] = logistic_regression.predict_proba(x_test)[:,1]\n\ntest[['SK_ID_CURR', 'TARGET']].to_csv('first_submission.csv', index=False, float_format='%.8f')","e1eafdcc":"#### This kernel used dataset from the Home Credit Default Risk and copied from the 'Stacking Test-Sklearn, XGBoost, CatBoost, LightGBM' written by Eliot Barril\n\n**Introduction to 'Stacking Test-Sklearn, XGBoost, CatBoost, LightGBM': [URL](https:\/\/www.kaggle.com\/eliotbarr\/stacking-test-sklearn-xgboost-catboost-lightgbm\/code)**\n\n*Thanks for sharing kernel, Eliot Barril*","22b8824a":"#### Stacking Starter based on Allstate Faron's Script\nURL : https:\/\/www.kaggle.com\/mmueller\/allstate-claims-severity\/stacking-starter\/run\/390867\n\n#### Preprocessing from ogrellier\nURL : https:\/\/www.kaggle.com\/ogrellier\/good-fun-with-ligthgbm\n"}}