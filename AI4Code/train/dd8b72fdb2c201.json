{"cell_type":{"e89d6cde":"code","58c80b32":"code","784023b0":"code","5e657b93":"code","43745cbc":"code","0f9f0c91":"code","311a672a":"code","2f3d6949":"code","b12689f5":"code","5fc3a702":"code","8c25a0af":"code","0646bcec":"markdown","0b3bb83d":"markdown","59853592":"markdown"},"source":{"e89d6cde":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58c80b32":"pip install pmdarima","784023b0":"import matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose","5e657b93":"airline = pd.read_csv(\"\/kaggle\/input\/air-passengers\/AirPassengers.csv\")\nairline.head()","43745cbc":"airline[\"Month\"] = pd.to_datetime(airline[\"Month\"])\nairline.set_index([\"Month\"],inplace=True)\nairline.head()","0f9f0c91":"result = seasonal_decompose(airline['#Passengers'],model = 'multiplicative')\nx=result.plot()","311a672a":"from pmdarima import auto_arima\nimport warnings\nwarnings.filterwarnings('ignore')\nstepwise_fit = auto_arima(airline['#Passengers'], start_p = 1, start_q = 1,\n                          max_p = 3, max_q = 3, m = 12,\n                          start_P = 0, seasonal = True,\n                          d = None, D = 1, trace = True,\n                          error_action ='ignore',   # we don't want to know if an order does not work\n                          suppress_warnings = True,  # we don't want convergence warnings\n                          stepwise = True)           # set to stepwise\n  \n# To print the summary\nstepwise_fit.summary()","2f3d6949":"train = airline.iloc[:len(airline)-12]\ntest = airline.iloc[len(airline)-12:]\n\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\n\nmodel = SARIMAX(train['#Passengers'],order=(0,1,1),seasonal_order=(2,1,0,12))\n\nresult = model.fit()\nresult.summary()","b12689f5":"start = len(train)\nend = len(train) + len(test) - 1\nprediction = result.predict(start , end , typ='level')\nprediction.plot()\ntest[\"#Passengers\"].plot()","5fc3a702":"from sklearn.metrics import mean_squared_error\nfrom statsmodels.tools.eval_measures import rmse\nprint(rmse(test[\"#Passengers\"],prediction))\nmean_squared_error(test[\"#Passengers\"],prediction)","8c25a0af":"model = SARIMAX(airline['#Passengers'],order=(0,0,1),seasonal_order=(2,1,1,12))\nresult = model.fit()\n\nforecast = result.predict(start = len(airline),\n                            end = (len(airline)-1)+3*12,\n                            typ = 'levels')\nairline['#Passengers'].plot()\nforecast.plot() ","0646bcec":"## Create Model","0b3bb83d":"## Prediction","59853592":"## Import required libraries"}}