{"cell_type":{"8e6fcdac":"code","787a8be7":"code","6e46831c":"code","f2af3c8e":"code","9e693fbc":"code","da7d4afe":"code","bed34603":"code","c7d199f3":"code","e305df23":"code","f8633d26":"code","2caabc1e":"code","e7a9bff4":"code","9623f3fb":"code","e72598c7":"code","0c3e214d":"code","76e5d72b":"code","3ac58309":"code","511679b0":"code","20cf0016":"code","b4b69d8a":"code","59d3302a":"code","75cdecd1":"code","8ef38832":"code","bdf5fc12":"code","98cd2f7d":"code","54ae3029":"code","f2515fef":"code","731bd648":"code","09abb2b1":"code","2b8d046b":"code","a572ff70":"code","c36a3edd":"code","26186316":"code","9dc7f062":"code","d012e3c1":"code","3b2fb4db":"code","76e44f62":"code","2021a8e8":"code","8a2721df":"code","13f27976":"code","633e3a90":"code","4431515a":"code","388f9163":"code","95835085":"code","246568a7":"code","e6d97e39":"markdown","755c263d":"markdown","5646a16e":"markdown","d02cf1a7":"markdown","cef255d3":"markdown","44262ac3":"markdown","941efe84":"markdown","1fad75c6":"markdown","b2c72d3f":"markdown","04a8b2a7":"markdown","12a4fa67":"markdown","4a080261":"markdown","31e97f48":"markdown","04d4d56a":"markdown","45770708":"markdown","1c9263de":"markdown","99c43550":"markdown","72f3e2fd":"markdown","5013f2b8":"markdown","7fe29a65":"markdown","43cce9ac":"markdown","486d640b":"markdown","31ab7476":"markdown","77885807":"markdown"},"source":{"8e6fcdac":"#https:\/\/github.com\/jakevdp\/nfft#basic-usage\n!pip install nfft\n\nfrom nfft import nfft         \nfrom nfft import nfft_adjoint ","787a8be7":"import os\nimport numpy  as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n#import tensorflow as tf\n\nimport scipy as sp\nfrom scipy import signal\nfrom scipy.signal import butter,filtfilt,freqz\nimport scipy.ndimage\nimport scipy.fftpack\nfrom scipy.fft import rfft, irfft\nimport scipy.signal as signal\nfrom scipy.interpolate import interp1d","6e46831c":"df_train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ndf_test  = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\ndf_sub   = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')","f2af3c8e":"df_train.head(3)","9e693fbc":"lag=1\nshift_t_step = df_train.groupby('breath_id')['time_step'].shift(lag).fillna(0)\ndf_train[f't_d{lag}'] = df_train['time_step'] - shift_t_step\n\ndf_train['t_max']  = df_train.groupby('breath_id')[f't_d{lag}'].transform('max')    #\ndf_train['t_mean']  = df_train.groupby('breath_id')[f't_d{lag}'].transform('mean')  #\ndf_train['t_std']  = df_train.groupby('breath_id')[f't_d{lag}'].transform('std')    #\ndf_train['t_uniform']  = df_train['t_std']\/df_train['t_mean']                       #lower the better","da7d4afe":"breath_id_1 = df_train.query('breath_id == 1').reset_index(drop = True)\n#breath_id1 = df_train.query('breath_id == 44245').reset_index(drop = True)\nbreath_id_1","bed34603":"col =['time_step','u_in','u_out','pressure']\ncol2 =['time_step','t_d1','t_mean','t_std','t_uniform']\nbreath_id_1[col].iloc[:80].plot()         \nbreath_id_1[col2].iloc[:80].plot()","c7d199f3":"breath_id_12 = df_train.query('breath_id == 12').reset_index(drop = True)\n#breath_id_12\nbreath_id_12[col].iloc[:80].plot()\nbreath_id_12[col2].iloc[:80].plot()","e305df23":"df_test.head(3)","f8633d26":"#define native fs the mean non uniform time-step interval\ndt1 = breath_id_1['t_mean'][0]\nprint(f'native time-interval=',dt1,',max acq time=',80*dt1, ',native fs=', 1\/dt1, 'Hz')","2caabc1e":"dt12 = breath_id_12['t_mean'][0]\nprint(f'native time-interval=',dt12,',max acq time=',80*dt12 , ',native fs=', 1\/dt12, 'Hz')","e7a9bff4":"def circular_shift_forward(arr, nroll):\n    arr_roll = np.zeros((nroll,len(arr))) #expand the arr dimension\n    #print(np.shape(arr_roll),nroll)\n    for i in range(nroll):\n        #print(i, np.roll(arr,i))\n        arr_roll[i] = np.roll(arr,i)\n    return arr_roll\n\ndef circular_shift_backward(arr, nroll):\n    arr_roll = np.zeros(np.shape(arr))  #keep dimension\n    for i in range(nroll):\n        #print(i, np.roll(arr[i],-i))\n        arr_roll[i] = np.roll(arr[i],-i)\n    return arr_roll\n\n#interpolation has a \"natural\" smoothing action and tend to represent lower freq\n#In this application, it's a low freq.\ndef interp1d_to_54Hz(t_54Hz, t_native, y_native):\n    #these are the number of samples cannot be interpolated beyond native time-steps\n    idx_max = np.where(t_54Hz > t_native[-1])[0]\n    \n    y_interp = interp1d(t_native, y_native)\n    dat_interp = y_interp(t_54Hz[0:idx_max[0]])\n    print(len(dat_interp))\n    \n    #Extrapolation, just fill the tail with their last value. \n    #One can fill the tail by extrapolating from the last to the first value.\n    dat_interp = np.append(dat_interp, y_native[-1]*np.ones(len(idx_max))) \n    return dat_interp\n\ndef interp1d_reverse(t_native, t_27Hz, y_27Hz):\n    y_interp = interp1d(t_27Hz, y_27Hz)\n    dat_interp = y_interp(t_native)\n    #print(len(dat_interp))\n    return dat_interp\n\ndef mae_loss(y_true, y_pred):\n    mae = np.sum(np.abs(y_true - y_pred))\n    return mae \/ len(y_true)\n\ndef plot_arr(arr):\n    for i in range(len(arr)):\n        plt.plot(arr[i])\n        \ndef uniform_fft(arr):\n    fft = np.fft.fft(arr)\n    psd = np.abs(fft) ** 2\n    fftfreq = sp.fftpack.fftfreq(len(psd),1\/fs)\n    i = fftfreq > 0\n    return fftfreq,i, psd       ","9623f3fb":"#Resample signal\n#Insert zeros to upsample the signal\n#Apply an FIR antialiasing filter\n#Discard samples to downsample\n\n#transform all non-uniform native fs to uniform fs @54Hz by interpolation\/extrapolation\n#- higher freq give better interpolation\n#- move signal away from Nyquist, then applied antialiasing filter\n#then downsample to uniform 27Hz\n\n#splitted 3sec into uniform 160 steps, this will double the sampling rate = 2*27Hz\n#fs = 54Hz, uniform time-step setting \n\ud835\udefft_res_54Hz = 3\/(2*80)                  #each time-step is \ud835\udefft sec.\nfs_54Hz = 1\/\ud835\udefft_res_54Hz                 #sample freq is 53.33 Hz\nlen_54Hz = int(3*fs_54Hz)               #len of 3sec samples\n\ud835\udefff_res_54Hz = fs_54Hz\/len_54Hz          #freq step @54Hz\n\ud835\udefff_axis_54Hz = \ud835\udefff_res_54Hz*np.arange(0, len_54Hz, dtype=float)\n\ud835\udefft_axis_54Hz = \ud835\udefft_res_54Hz*np.arange(0, len_54Hz, dtype=float) #time-step x-axis\n\n#decimate down to 27Hz, uniform time-step\nfs_27Hz = np.ceil(fs_54Hz\/2)\n\ud835\udefft_res_27Hz = 2*\ud835\udefft_res_54Hz\n\ud835\udefff_res_27Hz = 2*\ud835\udefff_res_54Hz #freq step @54Hz\n\ud835\udefff_axis_27Hz = \ud835\udefff_axis_54Hz[0:-1:2]\/2     #freq-step x-axis @27Hz, 80points, DC, pos, Nyq, neq\n\ud835\udefft_axis_27Hz = \ud835\udefft_axis_54Hz[0:-1:2]       #time-step x-axis @27Hz\nlen_27Hz = int(len_54Hz\/2)\n#len_54Hz, \ud835\udefft_res_54Hz, \ud835\udefff_res_54Hz \nprint( f'uniform sample rate=',fs_27Hz,'Hz,len sample=',len_27Hz, ',time-res=', \ud835\udefft_res_27Hz, ',freq-res=',\ud835\udefff_res_27Hz)","e72598c7":"T_id_1    = breath_id_1['time_step'].values\nP_id_1    = breath_id_1['pressure'].values\nUin_id_1  = breath_id_1['u_in'].values\nUout_id_1 = breath_id_1['u_out'].values\n\nT_id_12    = breath_id_12['time_step'].values\nP_id_12    =breath_id_12['pressure'].values\nUin_id_12  =breath_id_12['u_in'].values\nUout_id_12 = breath_id_12['u_out'].values\n\nplt.figure(figsize=(22,4))\nplt.subplot(1,4,1)\nplt.plot(P_id_1)\nplt.plot(P_id_12)\nplt.grid()\nplt.legend(['press 1','press 12'])\nplt.xlabel('time-step (delay-taps)')\n\nplt.subplot(1,4,2)\nplt.plot(T_id_1,P_id_1 )\nplt.plot(T_id_12,P_id_12)\nplt.grid()\nplt.legend(['press 1','press 12'])\nplt.xlabel('time-step (sec)')\n\nplt.subplot(1,4,3)\nplt.plot(T_id_1)\nplt.plot(T_id_12)\nplt.plot( \ud835\udefft_axis_27Hz )\nplt.plot(Uout_id_1)\nplt.plot(Uout_id_12)\nplt.grid()\nplt.legend(['T_id_1','T_id_12','uniform T-step @27Hz','Uout_id_1','Uout_id_12'])\nplt.xlabel('time-step (delay-taps)')","0c3e214d":"print(f'id_1 native fs=', 1.\/np.mean(breath_id_1['t_mean'][0]),', id_12 native fs=', 1.\/np.mean(breath_id_12['t_mean'][0]))","76e5d72b":"trn_step_min = df_train.groupby('breath_id')['time_step'].transform('last').min()\ntrn_step_max = df_train.groupby('breath_id')['time_step'].transform('last').max()\ntst_step_min = df_test.groupby('breath_id')['time_step'].transform('last').min()\ntst_step_max = df_test.groupby('breath_id')['time_step'].transform('last').max()\ndataset_step_min = min(trn_step_min, tst_step_min)\n\n#trn_step_min, trn_step_max, tst_step_min, tst_step_max, dataset_step_min\nprint(f'the fastest termination in time =',dataset_step_min, 'sec')","3ac58309":"#interp non-uniform to uniform time-step at 54Hz (160 delay taps)\n\n# Finding the interpolation, ID_1, Pressure\npressure_interp = interp1d_to_54Hz(\ud835\udefft_axis_54Hz,T_id_1,P_id_1)\nlen(pressure_interp) #interpolate 144 samples + 16 samples need extrapolation","511679b0":"# Finding the interpolation, ID_12, Pressure\npressure_interp2 = interp1d_to_54Hz(\ud835\udefft_axis_54Hz,T_id_12,P_id_12)\nlen(pressure_interp2) #interpolate 135 samples + 25 samples need extrapolation","20cf0016":"plt.figure(figsize=(18,4))\nplt.subplot(1,2,1)\n\n#down sample to 27Hz, need anti-aliasing before down-sample\nplt.plot(pressure_interp[:-1:2])  #ignore anti-aliasing for now\nplt.plot(pressure_interp2[:-1:2]) #ignore anti-aliasing for now\nplt.grid()\nplt.legend(['P_interp_id_1','P_interp_id_12'])\nplt.xlabel('time-step (delay-taps)')\n\nplt.subplot(1,2,2)\nplt.plot(T_id_1,P_id_1)\nplt.plot(\ud835\udefft_axis_27Hz, pressure_interp[:-1:2]) #ignore anti-aliasing for now\nplt.plot(T_id_12,P_id_12)\nplt.plot(\ud835\udefft_axis_27Hz, pressure_interp2[:-1:2]) #ignore anti-aliasing for now\nplt.grid()\nplt.legend(['P_id_1','P_interp_id_1','P_id_12','P_interp_id_12'])\nplt.xlabel('time-step (sec)')","b4b69d8a":"#extrapolated non uniform native fs to uniform 27Hz\n#when interpolate from uniform 27Hz back to native fs, the extrapolated portion will be discarded anyway.\nprint(f' the tails are extrapolated from' ,T_id_12[-1],'to',  \ud835\udefft_axis_27Hz[-1], 'sec')","59d3302a":"#interpolation error\nerr_y2 = np.sum(np.abs(P_id_12 - pressure_interp2[:-1:2] ))\/len(P_id_12) \nerr_y2\n\n#This error is invalid because:\n#- data is extrapolated beyond T_id_12[-1] = 2.52 sec\n#- data is not aligned, one in native fs and other in uniform fs=27Hz\n#For a fair comparison, one need to interp back to native fs","75cdecd1":"# Finding the interpolation\n# Do the same for u_in, u_out\n\nUin_interp = interp1d_to_54Hz(\ud835\udefft_axis_54Hz,T_id_1,Uin_id_1)\nUout_interp = interp1d_to_54Hz(\ud835\udefft_axis_54Hz,T_id_1,Uout_id_1)\nUin2_interp = interp1d_to_54Hz(\ud835\udefft_axis_54Hz,T_id_12,Uin_id_12)\nUout2_interp = interp1d_to_54Hz(\ud835\udefft_axis_54Hz,T_id_12,Uout_id_12)\n\n#Extrapolation, just fill the tail with their last value. \n#One can fill the tail by extrapolating from the last to the first value.","8ef38832":"plt.figure(figsize=(18,4))\nplt.subplot(131)\nplt.plot(Uin_id_1)\nplt.plot(Uin_interp[::2])\nplt.plot(Uin_id_12)\nplt.plot(Uin2_interp[::2])\nplt.grid()\nplt.legend(['Uin_id_1','Uin_interp_id_1','Uin_id_12','Uin_interp_id_12'])\nplt.xlabel('time-step (delay-taps)')\n\nplt.subplot(132)\n#plt.plot(T_id_1)\n#plt.plot(T_id_12)\n#plt.plot( \ud835\udefft_axis_27Hz )\n\nplt.plot(Uout_id_1,'b')\nplt.plot(Uout_interp[::2],'r--')\nplt.plot(Uout_id_12,'g')\nplt.plot(Uout2_interp[::2],'k.')\nplt.grid()\nplt.legend(['Uout_id_1','Uout_interp_id_1','Uout_id_12','Uout_interp_id_12'])\nplt.xlabel('time-step (delay-taps)')\n\nplt.subplot(133)\nplt.plot(T_id_1,Uin_id_1)\nplt.plot(\ud835\udefft_axis_27Hz,Uin_interp[::2])\nplt.plot(T_id_12,Uin_id_12)\nplt.plot(\ud835\udefft_axis_27Hz,Uin2_interp[::2])\nplt.grid()\nplt.legend(['Uin_id_1','Uin_interp_id_1','Uin_id_12','Uin_interp_id_12'])\nplt.xlabel('time-step (sec)')","bdf5fc12":"Uin_27Hz = Uin_interp[0:-1:2]  #ignore anti-aliasing filter\ndfs2 = circular_shift_forward(Uin_27Hz, 16)  #expand dimension to 2D\n\n#add noise\nimg = dfs2 \nmean = 0.0   \nstd = 1.0   \nnoisy_img = img + np.random.normal(mean, std, img.shape)\nnoisy_img_clipped = np.clip(noisy_img, 0, 255) \n\n#unroll\ndfs3 = circular_shift_backward(noisy_img_clipped, 16)\n\n#average them, for every 2^n = 16 averaging, you reduced the noise by 3*n dB ~= 12 dB\ndfs3_mean = np.mean(dfs3,axis=0)\n\n#Interpolate back to native fs, non-uniform time-step, clean vs. added noise\nUin_reconstruct = interp1d_reverse(T_id_1, \ud835\udefft_axis_27Hz, dfs3_mean ) #has reconstruct err + noise\n\n#Interpolate back to native fs, non-uniform time-step, clean vs. clean\nUin_recon_clean = interp1d_reverse(T_id_1, \ud835\udefft_axis_27Hz, Uin_27Hz )  #has pure reconstruct err","98cd2f7d":"plt.figure(figsize=(22,4))\n\nplt.subplot(151)\nplot_arr(dfs2)\nplt.title('roll circular shift')\n\nplt.subplot(152)\nplot_arr(noisy_img_clipped)\nplt.title('add noise')\n\nplt.subplot(153)\nplot_arr(dfs3)\nplt.title('unroll circular shift')\n\nplt.subplot(154)\nplt.plot((dfs2[0]))\nplt.plot(dfs3_mean)\nplt.title('average')\n\n#plt.figure(figsize=(12,4))\nplt.subplot(155)\nplt.plot(T_id_1)\nplt.plot(Uin_id_1)\nplt.plot(Uin_reconstruct)\nplt.plot(Uin_recon_clean)\nplt.legend(['T_id_1','Uin_id_1','Uin_recon_noise','Uin_recon_clean'])\nplt.title('non-uniform time-step')","54ae3029":"print(f'uniform MAE=',mae_loss( dfs2[0], dfs3_mean),', non-unif noise MAE=', mae_loss(Uin_id_1, Uin_reconstruct),', recon MAE=', mae_loss(Uin_id_1, Uin_recon_clean))","f2515fef":"fs = 54      # sample rate, 54 Hz\nnyq = 0.5 * fs # Nyquist Frequency\n\nfs_native = np.ceil(1\/dt1)\nnyq_native = 0.5 *fs_native\n\norder_lpf = 10   #filter order  \nlpf_cutoff= nyq-1  #Hz, \n\ndef butter_LPF_filter(data, cutoff_low, fs, order):\n    normal_cutoff_low = cutoff_low\/nyq\n     \n    # Get the filter coefficients \n    b, a = butter(order, normal_cutoff_low, btype='low', analog=False)\n    y = filtfilt(b, a, data)\n    return y\n\nbl, al = butter(order_lpf, lpf_cutoff\/nyq, btype='low', analog=False)\nwl,hl = freqz(bl,al, fs=fs)\n\n#lpf\nplt.figure(figsize=(22,4))\nplt.subplot(121)\nplt.plot(wl, 20 * np.log10(abs(hl)), 'b')\nplt.ylabel('Amplitude [dB]', color='b')\nplt.xlabel('Frequency [Hz]')\nplt.grid()\nplt.title('LPF, cutoff @ 27Hz')\n\nbins=50\nplt.subplot(122)\nplt.plot(wl[-bins:], 20 * np.log10(abs(hl[-bins:])), 'b')\nplt.ylabel('Amplitude [dB]', color='b')\nplt.xlabel('Frequency [Hz]')\nplt.grid()\nplt.title('Zoom-In LPF')","731bd648":"#Comparing Uin with vs without anti-aliasing filter\n\nUin_54Hz = butter_LPF_filter(Uin_interp, lpf_cutoff, fs, order_lpf)  #apply anti-aliasing filter\nUin_27Hz_LPF = Uin_54Hz[::2]    #decimate after anti-aliasing filter\nUin_27Hz     = Uin_interp[::2]  #decimate without anti-aliasing filter\n\nuin_27Hz_norm     = (Uin_27Hz - Uin_27Hz.mean())\/Uin_27Hz.std()\nuin_27Hz_norm_lpf = (Uin_27Hz_LPF - Uin_27Hz_LPF.mean())\/Uin_27Hz_LPF.std()\n\n\nplt.figure(figsize=(22,4))\nfor batch in range(1):\n    fft_f1, i1, psd1 = uniform_fft(uin_27Hz_norm)\n    fft_f2, i2, psd2 = uniform_fft(uin_27Hz_norm_lpf)\n    \n    plt.subplot(121)\n    plt.plot(uin_27Hz_norm,'b')\n    plt.plot(uin_27Hz_norm_lpf,'r--')\n    plt.ylabel('Amplitude [dB]', color='b')\n    plt.xlabel('time-samples')\n    plt.grid()\n    plt.title('LPF, cutoff @ 27Hz')\n    plt.legend(['unfilter','lpf'])\n    \n    plt.subplot(122)\n    plt.plot(fft_f1[i1], 10 * np.log10(psd1[i1]),'b')\n    plt.plot(fft_f2[i2], 10 * np.log10(psd2[i2]),'r--')\n    plt.xlabel('freq (Hz)')\n    plt.grid()\n    plt.legend(['unfilter','lpf'])","09abb2b1":"#Lomb-Scargle Periodogram for non uniform fs\n#Non uniform original Uin\nx= T_id_1\ny= Uin_id_1\n#x= ut\n#y= uin\nf= np.linspace(0.01, 14, len(x)) \npgram = signal.lombscargle(x, y, f, normalize=True)\nplt.figure(figsize=(12,4))\nplt.subplot(121)\nplt.plot(x, 10*np.log10(np.abs(y)+1), 'b+-')\nplt.xlabel('time (sec)')\nplt.grid()\nplt.subplot(122)\nplt.plot(f, pgram)\nplt.xlabel('freq (Hz)')\nplt.grid()\nplt.show()","2b8d046b":"#df_bid =[56152, 79152, 70251, 69150] # 85113, 49703, 11845, 19375, 69150]\ndf_bid = list(df_train['breath_id'].sample(4))\n\nN = 80\n#x = np.linspace(0.0,0.5, N)\nut_pt5 = np.zeros(N)\n\ud835\udefft_27Hz_pt5 = np.zeros(N)\nfor j in range(N):\n    #ut_pt5[j] = 0.5*ut[j]\/ut[-1]\n    \ud835\udefft_27Hz_pt5[j] = 0.5*\ud835\udefft_axis_27Hz[j]\/\ud835\udefft_axis_27Hz[-1]  #norm to 0.5  \n\nplt.figure(figsize=(24,18))\n\nfor i in range(0,len(df_bid)):\n    #print(df_bid[i])\n    uin_1st_sec  = np.zeros(N)\n    uin_3rd_sec  = np.zeros(N)\n    p_1st_sec    = np.zeros(N)\n    p_3rd_sec    = np.zeros(N)\n    \n    ut       = df_train.loc[df_train['breath_id'] == df_bid[i]]['time_step'].tolist()\n    dt_mean  = df_train.loc[df_train['breath_id'] == df_bid[i]]['t_mean'].tolist()[0]\n    uin      = df_train.loc[df_train['breath_id'] == df_bid[i]]['u_in'].tolist()\n    p        = df_train.loc[df_train['breath_id'] == df_bid[i]]['pressure'].tolist()\n    \n    R        = df_train.loc[df_train['breath_id'] == df_bid[i]]['R'].unique()[0]\n    C        = df_train.loc[df_train['breath_id'] == df_bid[i]]['C'].unique()[0]\n    S        = df_train.loc[df_train['breath_id'] == df_bid[i]]['t_max'].unique()[0]\n    name     = f'bid : {df_bid[i]}, R:{R}, C:{C}, S:{np.round(S,3)}'\n    \n    for j in range(N):\n        ut_pt5[j] = 0.5*ut[j]\/ut[-1]  #norm to 0.5    \n    \n    #Non-uniform FFT at native fs\n    uin_dc = np.mean(uin)\n    p_dc = np.mean(p)\n    uin_norm = (uin - uin_dc)\/np.std(uin)   \n    p_norm = (p - p_dc)\/np.std(p)\n    \n    ###############################################\n    # taking FFT straight from non-uniform sample\n    ###############################################\n    native_fs = np.ceil(1\/dt_mean)   #native fs\n    #print(dt_mean, native_fs)\n    f_uin_norm_k = nfft_adjoint(ut_pt5, uin_norm, N, truncated=False)\n    f_p_k        = nfft_adjoint(ut_pt5, p_norm, N, truncated=False)\n    uf = np.abs(np.fft.ifftshift(f_uin_norm_k)[:int(N\/2)+1])\n    pf = np.abs(np.fft.ifftshift(f_p_k)[:int(N\/2)+1])\n    #uniform after nFFT\n    \n    ###############################################\n    # taking FFT on uniform sample after interp and down-sample\n    ###############################################\n    #interplolated, Uniform Uin and Uniform P\n    Uin_interp = interp1d_to_54Hz(\ud835\udefft_axis_54Hz,ut,uin) \n    P_interp   = interp1d_to_54Hz(\ud835\udefft_axis_54Hz,ut,p) \n    #LPF anti-aliasing filter\n    Uin_interp_fltr_54Hz = butter_LPF_filter(Uin_interp, lpf_cutoff, fs, order_lpf)\n    #Uin_interp_fltr_54Hz = Uin_interp  #skip\n\n    P_interp_fltr_54Hz =  butter_LPF_filter(P_interp, lpf_cutoff, fs, order_lpf)\n    #P_interp_fltr_54Hz   = P_interp    #skip \n   \n    #Decimate to 27Hz\n    Uin_interp_fltr_27Hz = Uin_interp_fltr_54Hz[::2]\n    P_interp_fltr_27Hz   = P_interp_fltr_54Hz[::2]\n    #Norm\n    Uin_interp_fltr_27Hz_dc = np.mean(Uin_interp_fltr_27Hz)\n    P_interp_fltr_27Hz_dc = np.mean(P_interp_fltr_27Hz)\n    \n    uin_norm_27Hz = (Uin_interp_fltr_27Hz - Uin_interp_fltr_27Hz_dc)\/np.std(Uin_interp_fltr_27Hz)   \n    p_norm_27Hz   = (P_interp_fltr_27Hz - P_interp_fltr_27Hz_dc)\/np.std(P_interp_fltr_27Hz) \n    #FFT, uniform after resample, could have use uniform FFT\n    f_uin_norm_27Hz_k = nfft_adjoint(\ud835\udefft_27Hz_pt5, uin_norm_27Hz, N, truncated=False) \n    f_p_27Hz_k        = nfft_adjoint(\ud835\udefft_27Hz_pt5, p_norm_27Hz, N, truncated=False) \n    uin_norm_27Hz_f   = np.fft.ifftshift(f_uin_norm_27Hz_k)[:int(N\/2)+1]\n    p_norm_27Hz_f     = np.fft.ifftshift(f_p_27Hz_k)[:int(N\/2)+1]\n    \n    #DC and intrp_DC should be same, difference is likely due to extrapolation\n    print(f'u_dc=',uin_dc,',p_dc=',p_dc,',u_intrp_dc=',Uin_interp_fltr_27Hz_dc,',p_intrp_dc=',P_interp_fltr_27Hz_dc)\n    \n    ###############################################\n    # analyze spectral content on first sec and third sec\n    ###############################################\n    #copy 15 samples from the first sec and the third sec for FFT\n    # avoid transition transient signal during 2nd second\n    # avoid initial ramp input offset 5 samples \n    # tone3 or tone9 period is an integer multiple of fs=27Hz, important property to analyze phase delay\n    # Two seconds elapsed = 2\/3 * 80 = 53 samples\n    # Two seconds elapsed have integer 18 cycles(tone9) or 6 cycles(tone3) elapsed with the same starting phase. \n    offset = 5  #avoid initial ramp up input\n    elap = 53   #2 sec elapsed\n    dur = 15    # 15 samples for FFT\n    two_sec = offset+elap\n    two_dur = two_sec+dur\n    \n    uin_1st_sec[:dur]  = uin_norm_27Hz[offset:offset+dur]  #1st sec idx[0:80*1\/3]\n    uin_3rd_sec[:dur] = uin_norm_27Hz[two_sec:two_dur]  #3rd sec idx[80*2\/3:80]\n    p_1st_sec[:dur]    = p_norm_27Hz[offset:offset+dur]\n    p_3rd_sec[:dur]   = p_norm_27Hz[two_sec:two_dur]    \n    #FFT\n    uin_1st_sec_k   = nfft_adjoint(\ud835\udefft_27Hz_pt5, uin_1st_sec- np.mean(uin_1st_sec), N, truncated=False) #mean value is DC, important feature\n    uin_3rd_sec_k   = nfft_adjoint(\ud835\udefft_27Hz_pt5, uin_3rd_sec- np.mean(uin_3rd_sec), N, truncated=False) #mean value is DC, important feature\n    p_1st_sec_k     = nfft_adjoint(\ud835\udefft_27Hz_pt5, p_1st_sec- np.mean(p_1st_sec), N, truncated=False) #mean value is DC, important feature\n    p_3rd_sec_k     = nfft_adjoint(\ud835\udefft_27Hz_pt5, p_3rd_sec- np.mean(p_3rd_sec), N, truncated=False) #mean value is DC, important feature\n\n    uin_1st_sec_f   = np.fft.ifftshift(uin_1st_sec_k)[:int(N\/2)+1]\n    uin_3rd_sec_f   = np.fft.ifftshift(uin_3rd_sec_k)[:int(N\/2)+1]\n    p_1st_sec_f     = np.fft.ifftshift(p_1st_sec_k)[:int(N\/2)+1]\n    p_3rd_sec_f     = np.fft.ifftshift(p_3rd_sec_k)[:int(N\/2)+1]    \n    \n    ###############################################\n    \n    plt.subplot(4,4,4*i+1)\n    plt.plot(ut, uin_norm, color='blue')\n    plt.plot(ut, p_norm, 'r-')\n    plt.grid()\n    plt.legend(['u_in','pressure'])\n    \n    #xf = np.fft.fftfreq(N,1.\/N) #[0,1,...(N-1),-N,-(N-1),...-1], index 0 is DC, index N\/2 is Nyq\n    #f_res = 1\/dt_mean\/N\n    \n    plt.subplot(4,4,4*i+2)\n    plt.plot(2*native_fs*(ut_pt5)[:int(N\/2)+1], uf,'b',label='u_in') \n    plt.plot(2*native_fs*(ut_pt5)[:int(N\/2)+1], pf,'r--',label='pressure')\n    plt.grid()\n    plt.title(name)\n    plt.legend(['u_in','pressure'])    \n    \n    plt.subplot(4,4,4*i+3)\n    plt.plot(54*(\ud835\udefft_27Hz_pt5)[:int(N\/2)+1], np.abs(uin_norm_27Hz_f), 'b', label='u_in') \n    plt.plot(54*(\ud835\udefft_27Hz_pt5)[:int(N\/2)+1], np.abs(p_norm_27Hz_f), 'r--', label='pressure')  \n    plt.grid()\n    plt.legend(['u_in','pressure'])\n\n    plt.subplot(4,4,4*i+4)\n    plt.plot(54*(\ud835\udefft_27Hz_pt5)[:int(N\/2)+1], np.abs(uin_1st_sec_f), 'b', label='uin_1sec') \n    plt.plot(54*(\ud835\udefft_27Hz_pt5)[:int(N\/2)+1], np.abs(uin_3rd_sec_f), 'b+', label='uin_3sec')      \n    plt.plot(54*(\ud835\udefft_27Hz_pt5)[:int(N\/2)+1], np.abs(p_1st_sec_f), 'r', label='p_1sec') \n    plt.plot(54*(\ud835\udefft_27Hz_pt5)[:int(N\/2)+1], np.abs(p_3rd_sec_f), 'r+', label='p_3sec')      \n    plt.grid()\n    plt.legend(['uin_1sec','uin_3sec','p_1sec','p_3sec'])","a572ff70":"#\ud835\udefff_axis_27Hz                               # 80points, DC, pos, Nyq, neq\n\ud835\udefff_x_27Hz = 54*(\ud835\udefft_27Hz_pt5)[:int(N\/2)+1]   # 41points, DC, pos, Nyq\n\n#tone8 = 8.   \n#tone9 = 9.   \n#tone10 = 10. \n#tone8_idx = np.where(np.round(\ud835\udefff_axis_27Hz[:int(N\/2)],5) == tone8)\n#tone9_idx = np.where(np.round(\ud835\udefff_axis_27Hz[:int(N\/2)],5) == tone9)\n#tone10_idx = np.where(np.round(\ud835\udefff_axis_27Hz[:int(N\/2)],5) == tone10)\n\ntone2_idx = 6    #2Hz \/ 0.3375 = bin 6\ntone3_idx = 9    #3Hz \/ 0.3375 = bin 9\ntone4_idx = 12   #4Hz \/ 0.3375 = bin 12\ntone8_idx = 24   #8Hz \/ 0.3375 = bin 24\ntone9_idx = 27   #9Hz \/ 0.3375 = bin 27\ntone10_idx = 30  #10Hz\/ 0.3375 = bin 30\n\nTEST_TONE = 3\n\nif TEST_TONE == 3:\n    test_tone_minus1  = tone2_idx\n    test_tone         = tone3_idx\n    test_tone_plus1   = tone4_idx\nelse:\n    test_tone_minus1  = tone8_idx\n    test_tone         = tone9_idx\n    test_tone_plus1   = tone10_idx\n\nu_1 = uin_1st_sec_f[test_tone] .round(2)\nu_3 = uin_3rd_sec_f[test_tone] .round(2)\ndeg_u_1 = np.degrees(np.arctan2(u_1.imag,u_1.real)).round(2)\ndeg_u_3 = np.degrees(np.arctan2(u_3.imag,u_3.real)).round(2)\np_1 = p_1st_sec_f[test_tone].round(2)\np_3 = p_3rd_sec_f[test_tone].round(2)\ndeg_p_1 = np.degrees(np.arctan2(p_1.imag,p_1.real)).round(2)\ndeg_p_3 = np.degrees(np.arctan2(p_3.imag,p_3.real)).round(2)\nprint(f'test tone phase angle in cartesian coordinate (degree)')\nprint(f'1st uin',u_1,'(',deg_u_1,'deg)')\nprint(f'3rd uin',u_3,'(',deg_u_3,'deg)')\nprint(f'1st p',p_1,'(',deg_p_1,'deg)')\nprint(f'3rd p', p_3,'(',deg_p_3,'deg)')\n\nplt.figure(figsize=(22,4))\nplt.subplot(141)   #uin magnitude plot\nplt.plot(\ud835\udefff_x_27Hz[test_tone_minus1],np.abs(uin_1st_sec_f[test_tone_minus1]),'b*', label='tone2_1st')\nplt.plot(\ud835\udefff_x_27Hz[test_tone],np.abs(uin_1st_sec_f[test_tone]),'r*', label='tone3_1st')\nplt.plot(\ud835\udefff_x_27Hz[test_tone_plus1],np.abs(uin_1st_sec_f[test_tone_plus1]),'g*', label='tone4_1st')\nplt.plot(\ud835\udefff_x_27Hz[test_tone_minus1],np.abs(uin_3rd_sec_f[test_tone_minus1]),'b^', label='tone2_3rd')\nplt.plot(\ud835\udefff_x_27Hz[test_tone],np.abs(uin_3rd_sec_f[test_tone]),'r^', label='tone3_3rd')\nplt.plot(\ud835\udefff_x_27Hz[test_tone_plus1],np.abs(uin_3rd_sec_f[test_tone_plus1]),'g^', label='tone4_3rd')\nplt.xlabel('freq (Hz)')\nplt.ylabel('Magnitude')\nplt.title('|Uin|')\nplt.legend()\nplt.grid()\n\nplt.subplot(142)  #uin phase plot\nplt.scatter(uin_1st_sec_f[test_tone_minus1].real, uin_1st_sec_f[test_tone_minus1].imag,c='b',marker='*',label='tone2_1st')\nplt.scatter(uin_1st_sec_f[test_tone].real, uin_1st_sec_f[test_tone].imag,c='r',marker='*',label='tone3_1st')\nplt.scatter(uin_1st_sec_f[test_tone_plus1].real, uin_1st_sec_f[test_tone_plus1].imag,c='g',marker='*',label='tone4_1st')\nplt.scatter(uin_3rd_sec_f[test_tone_minus1].real,uin_3rd_sec_f[test_tone_minus1].imag,c='b',marker='^',label='tone2_3rd')\nplt.scatter(uin_3rd_sec_f[test_tone].real,uin_3rd_sec_f[test_tone].imag,c='r',marker='^',label='tone3_3rd')\nplt.scatter(uin_3rd_sec_f[test_tone_plus1].real,uin_3rd_sec_f[test_tone_plus1].imag,c='g',marker='^',label='tone4_3rd')\nplt.xlabel('real')\nplt.ylabel('imag')\nplt.title('Uin Phase')\nplt.legend()\nplt.grid()\n\nplt.subplot(143) #p magnitude plot\nplt.plot(\ud835\udefff_x_27Hz[test_tone_minus1],np.abs(p_1st_sec_f[test_tone_minus1]),'b*', label='tone2_1st')\nplt.plot(\ud835\udefff_x_27Hz[test_tone],np.abs(p_1st_sec_f[test_tone]),'r*', label='tone3_1st')\nplt.plot(\ud835\udefff_x_27Hz[test_tone_plus1],np.abs(p_1st_sec_f[test_tone_plus1]),'g*', label='tone4_1st')\nplt.plot(\ud835\udefff_x_27Hz[test_tone_minus1],np.abs(p_3rd_sec_f[test_tone_minus1]),'b^', label='tone2_3rd')\nplt.plot(\ud835\udefff_x_27Hz[test_tone],np.abs(p_3rd_sec_f[test_tone]),'r^', label='tone3_3rd')\nplt.plot(\ud835\udefff_x_27Hz[test_tone_plus1],np.abs(p_3rd_sec_f[test_tone_plus1]),'g^', label='tone4_3rd')\nplt.xlabel('freq (Hz)')\nplt.ylabel('Magnitude')\nplt.title('|pressure|')\nplt.legend()\nplt.grid()\n\nplt.subplot(144)  #p phase plot\nplt.scatter(p_1st_sec_f[test_tone_minus1].real, p_1st_sec_f[test_tone_minus1].imag,c='b',marker='*',label='tone2_1st')\nplt.scatter(p_1st_sec_f[test_tone].real, p_1st_sec_f[test_tone].imag,c='r',marker='*',label='tone3_1st')\nplt.scatter(p_1st_sec_f[test_tone_plus1].real, p_1st_sec_f[test_tone_plus1].imag,c='g',marker='*',label='tone4_1st')\nplt.scatter(p_3rd_sec_f[test_tone_minus1].real, p_3rd_sec_f[test_tone_minus1].imag,c='b',marker='^',label='tone2_3rd')\nplt.scatter(p_3rd_sec_f[test_tone].real, p_3rd_sec_f[test_tone].imag,c='r',marker='^',label='tone3_3rd')\nplt.scatter(p_3rd_sec_f[test_tone_plus1].real, p_3rd_sec_f[test_tone_plus1].imag,c='g',marker='^',label='tone4_3rd')\nplt.xlabel('real')\nplt.ylabel('imag')\nplt.title('pressure phase')\nplt.legend()\nplt.grid()","c36a3edd":"#should not include end point for reconstruction\nN=4  #linespace endpoint 0.5 is include by default\nnp.arange(N), np.linspace(-0.5,0.5,N), np.linspace(-.5, .5, N, endpoint=False), (np.arange(N)-N\/\/2)\/N","26186316":"#https:\/\/stackoverflow.com\/questions\/67350588\/example-python-nfft-fourier-transform-issues-with-signal-reconstruction-normal\n\ndef sine_lung():\n    # number of sample points\n    N = 400 #400\n    f1=5   #50.0  #Hz\n    f2=20  #80.0 #Hz\n    \n    f3=10\n    f4=0\n    \n    x_t = np.linspace(0.0,0.5-0.02, N) + np.random.random((N)) * 0.001  #non-uniform\n    #y = np.sin( 2.0*np.pi *f1 *x_t) + 0.5 * np.sin( 2.0* np.pi* f2* x_t)\n    p = np.sin( 2.0*np.pi *f1 *x_t) + 0.5 * np.sin( 2.0* np.pi* f2* x_t + np.pi\/2)\n    u = np.sin( 2.0*np.pi *f3 *x_t) + 0.5 * np.sin( 2.0* np.pi* f4* x_t)\n\n    p_f = nfft(x_t, p)\n    u_f = nfft(x_t, u)    \n    x_f = np.fft.fftfreq(N,1.\/N)\n    \n    plt.figure(figsize=(22,4))\n    plt.subplot(131)\n    plt.plot(x_t,p,'r')\n    plt.xlabel('time-samples')\n    plt.legend(['pressure 5Hz,20Hz'])\n    plt.grid()  \n    \n    plt.subplot(132)\n    plt.plot(x_f[:int(N\/2)], np.abs(p_f[:int(N\/2)]), color='red')\n    plt.legend(['pressure 5Hz,20Hz'])\n    plt.xlabel('freq (Hz)')\n    plt.grid()\n    \n    N2 = N  \n    p_fft_k = nfft_adjoint(x_t, p, N2, truncated=False)   #fft output  -ve freq, dc, +ve freq\n    u_fft_k = nfft_adjoint(x_t, u, N2, truncated=False)   #fft output  -ve freq, dc, +ve freq\n    #(f_k.r[-N2],f_k.i[-N2]), (f_k.r[- (N2-1)],f_k.i[-(N2-1)]),... \n    #(f_k.r[-1],f_k.i[-1]),(f_k.r[0],f_k.i[0]),(f_k.r[1],f_k.i[1])..,(f_k.r[N2-1],f_k.i[N2-1])\n    \n    #Reconstruct the original signal with nfft\n    p_recon = np.fft.fftshift(np.fft.ifft(np.fft.ifftshift(p_fft_k))) \/ (2*N \/ N2)\n    #x_recon = np.linspace(-.5, .5, N2, endpoint=False)\n    x_recon = (np.arange(N2)-N2\/\/2)\/N2  #should not include end point\n    \n    #Plot original vs reconstructed\n    plt.subplot(133)\n    plt.title('nfft')\n    plt.plot(x_t, p, 'b', label='p(x)') #original time-domain real data\n    plt.plot(np.flipud(x_recon), p_recon.real, 'r--', label='p_recon(x)')  #reconstructed time-domain real-part, residual imag-part\n    plt.xlabel('time-samples')\n    plt.legend(['orig p','recon p'])\n    plt.grid()\n    print(np.sum(abs(p_recon.imag)))\n    \n\n    #######################################################################\n    # comparing u_f, p_f, p_k  (all freq-domain)\n    #######################################################################\n    plt.figure(figsize=(22,4))\n    plt.subplot(131)\n    plt.plot(np.abs(u_f))\n    plt.plot(np.abs(p_f))\n    plt.plot(np.abs(p_fft_k))\n    plt.legend(['u','p','p_fft_k'])\n    plt.grid()\n    \n    #ifftshift\n    plt.subplot(132)\n    plt.plot(np.abs(p_fft_k))          #fft output=  -ve freq, dc, +ve freq\n    plt.plot(np.abs(np.fft.ifftshift(p_fft_k)),'r') # dc,+ve freq,-ve freq\n    plt.legend(['p_fft_k','ifftshift(p_fft_k)'])\n    plt.grid()\n    \n    plt.subplot(133)\n    plt.plot(x_t,p+4)  #original,  +\/- 4 for display\n    t1 = np.fft.ifft(np.fft.ifftshift(p_fft_k)\/ (2*N \/ N2)).real  #shift freq-domain signal, then ifft\n    plt.plot(x_recon,t1,'r')    \n    t2=np.fft.fftshift(t1)                        #shift time-domain signal\n    plt.plot(x_recon,t2-4,'g')  #-4 for display\n    plt.plot(x_recon,np.flipud(t2)-4,'c')         #flipud to recon\n    plt.legend(['p','t1=ifft(ifftshift(p_fft_k))','ifftshift(t1)','recon p',])\n    plt.grid()\n    \n    #using irfft to reconstruct\n    f_pos_freq = np.fft.ifftshift(p_fft_k)\/ (2*N \/ N2)  \n    f_pos_freq = f_pos_freq[:N\/\/2 +1]  #200\n    #pinv     = irfft(f_pos_freq, n=len(p))\n    pinv     = irfft(f_pos_freq)\n    pinv2    = np.fft.fftshift(pinv) \n    p_rec    = np.flipud(pinv2)\n    p_recon  = p_rec[N\/\/2:]\n    \n    plt.figure(figsize=(22,4))\n    plt.subplot(131)\n    plt.plot(np.abs(f_pos_freq))\n    plt.legend('Pressure +ve freq')\n    plt.xlabel('freq (Hz)'),plt.grid()\n    \n    plt.subplot(132)\n    plt.plot(pinv+2)  #2 for display\n    plt.plot(pinv2)\n    plt.plot(p_rec)\n    plt.legend(['irfft(+ve freq)','fftshift(p)','p_rec'])\n    plt.xlabel('time-domain'),plt.grid()\n    \n    #x_recon1 = np.linspace(0, .5, N2\/\/2, endpoint=False)\n    plt.subplot(133)\n    plt.plot(x_t,p, 'b', label='p(x)') #original time-domain real data\n    plt.plot(x_recon[x_recon>=0],p_recon,'r',label='p_recon')\n    plt.legend()\n    plt.xlabel('time-domain'),plt.grid()\n    \n    print(f'len=',np.shape(pinv),',DC=',pinv[0],',Nyq=',pinv[-1],np.shape(p_recon))\n    \n    return p,u, np.fft.ifftshift(u_fft_k)[:int(N2\/2)+1], np.fft.ifftshift(p_fft_k)[:int(N2\/2)+1], x_t, x_f","9dc7f062":"def reconstruct(ut1, p_norm1, uin_norm1, p_norm1_27Hz, uin_norm1_27Hz):      \n    #From the last example above\n    #native_fs = np.ceil(1\/dt_mean)   #native fs\n    #uf = np.abs(nfft(ut, uin_norm))  #ut,native time-step, non-uniform\n    #pf = np.abs(nfft(ut, p_norm))\n    #uin_norm_27Hz_f = nfft(\ud835\udefft_axis_27Hz, uin_norm_27Hz) \n    #p_norm_27Hz_f   = nfft(\ud835\udefft_axis_27Hz, p_norm_27Hz)\n    #xf = np.fft.fftfreq(N,1.\/N)  #[0,1,.....(N-1),-N,-(N-1),..-2,-1], index 0 is DC, index N\/2 is Nyq\n    #xf = np.fft.fftfreq(N,1.\/N)  #[0.,1...38.,39.,-40.,-39.,..-2,-1], freq bin in index\n    #xf = \ud835\udefff_axis_27Hz            #[0.,0.33333333,0.66666667,1.,..,26., 26.33333333], freq bin in Hz\n    #f_res = 1\/dt_mean\/N\n    \n    #After FFT, all time-steps are in uniform, use uniform ifft to reconstruct, then interpolate back to native fs\n    #y -> iFFT( FFT(y)) -> y_hat(uniform), interp1d_reverse(ut, y_hat)-> y_hat_native (native time-step)\n\n    N=len(ut1)   #native time step\n    N2=N\n    #x = np.linspace(0.0,0.5, N) \n\n    ut1_pt5 = np.zeros(N)\n    \ud835\udefft_27Hz_pt5 = np.zeros(N)\n    for i in range(N):\n        ut1_pt5[i] = 0.5*ut1[i]\/ut1[-1]\n        \ud835\udefft_27Hz_pt5[i] = 0.5*\ud835\udefft_axis_27Hz[i]\/\ud835\udefft_axis_27Hz[-1]\n        \n    #f_p_norm_k = nfft_adjoint(x, p_norm1, N2, truncated=False) \n    #f_p_norm_27Hz_k = nfft_adjoint(x, p_norm1_27Hz, N2, truncated=False) \n\n    f_uin_norm_k      = nfft_adjoint(ut1_pt5, uin_norm1, N2, truncated=False) \n    f_uin_norm_27Hz_k = nfft_adjoint(\ud835\udefft_27Hz_pt5, uin_norm1_27Hz, N2, truncated=False) \n    f_p_k             = nfft_adjoint(ut1_pt5, p_norm1, N2, truncated=False) \n    f_p_27Hz_k        = nfft_adjoint(\ud835\udefft_27Hz_pt5, p_norm1_27Hz, N2, truncated=False) \n    #f_px_k = nfft_adjoint(x, p_norm1, N2, truncated=False) #\n    #y_px_recon = np.fft.fftshift(np.fft.ifft(np.fft.ifftshift(f_px_k))) \/ (2*N \/ N2)\n    \n    y_p_recon      = np.fft.fftshift(np.fft.ifft(np.fft.ifftshift(f_p_k))) \/ (2*N \/ N2)\n    x_recon_native = 2*ut1[-1]*np.linspace(-.5, .5, N2, endpoint=False)   #maps -3sec to +3sec \n    y_p_27Hz_recon = np.fft.fftshift(np.fft.ifft(np.fft.ifftshift(f_p_27Hz_k))) \/ (2*N \/ N2)\n    x_recon_27Hz   = 2*\ud835\udefft_axis_27Hz[-1]*np.linspace(-.5, .5, N2, endpoint=False)   #maps -3sec to +3sec \n    #print(x[-1],ut1[-1])\n    \n    #Reconstruct the uniform signal with ifft, because after nfft, time-step is in uniform\n    y_p_norm_recon        = np.fft.fftshift(np.fft.ifft(np.fft.ifftshift(f_p_k))) \/ (2*N \/ N2)\n    y_p_norm_27Hz_recon   = np.fft.fftshift(np.fft.ifft(np.fft.ifftshift(f_p_27Hz_k))) \/ (2*N \/ N2)\n    y_uin_norm_recon      = np.fft.fftshift(np.fft.ifft(np.fft.ifftshift(f_uin_norm_k))) \/ (2*N \/ N2)\n    y_uin_norm_27Hz_recon = np.fft.fftshift(np.fft.ifft(np.fft.ifftshift(f_uin_norm_27Hz_k))) \/ (2*N \/ N2)\n    #x_recon = 6*np.linspace(-.5, .5, N2, endpoint=False)   #maps -3sec to +3sec \n\n    p_nat      = interp1d_reverse(x_recon_native[x_recon_native>=0], np.flipud(x_recon_native)[:int(N\/2)], y_p_norm_recon[:int(N\/2)].real )  \n    p_27Hz_nat = interp1d_reverse(x_recon_native[x_recon_native>=0], np.flipud(x_recon_27Hz)[:int(N\/2)], y_p_norm_27Hz_recon[:int(N\/2)].real )\n    u_nat      = interp1d_reverse(x_recon_native[x_recon_native>=0], np.flipud(x_recon_native)[:int(N\/2)], y_uin_norm_recon[:int(N\/2)].real )\n    u_27Hz_nat = interp1d_reverse(x_recon_native[x_recon_native>=0], np.flipud(x_recon_27Hz)[:int(N\/2)], y_uin_norm_27Hz_recon[:int(N\/2)].real )\n    \n    #time-domain\n    plt.figure(figsize=(22,4))\n    plt.subplot(131)\n    plt.plot(ut1, p_norm1, 'b',label='p_norm') #original time-domain real data\n    plt.plot(\ud835\udefft_axis_27Hz, p_norm1_27Hz,'b--', label='p_norm_27Hz')\n\n    plt.plot(ut1, uin_norm1, 'g',label='uin_norm') #original time-domain real data\n    plt.plot(\ud835\udefft_axis_27Hz, uin_norm1_27Hz,'g--', label='uin_norm_27Hz')\n    plt.xlabel('time-samples (sec)')\n    plt.legend(), plt.grid()\n    \n    #freq-domain\n    plt.subplot(132)\n    plt.plot(2*native_fs*(ut1_pt5)[:int(N\/2)+1], np.abs(np.fft.ifftshift(f_p_k)[:int(N\/2)+1]),'b',label='p_norm') \n    plt.plot(54*(\ud835\udefft_27Hz_pt5)[:int(N\/2)+1], np.abs(np.fft.ifftshift(f_p_27Hz_k)[:int(N\/2)+1]), 'b--', label='p_norm_27Hz')  \n\n    plt.plot(2*native_fs*(ut1_pt5)[:int(N\/2)+1], np.abs(np.fft.ifftshift(f_uin_norm_k)[:int(N\/2)+1]),'g',label='uin_norm') \n    plt.plot(54*(\ud835\udefft_27Hz_pt5)[:int(N\/2)+1], np.abs(np.fft.ifftshift(f_uin_norm_27Hz_k)[:int(N\/2)+1]), 'g--', label='uin_norm_27Hz')    \n    plt.xlabel('freq (Hz)')\n    plt.legend(),plt.grid()\n\n    #time-domain reconstruct to uniform time step\n    plt.subplot(133)\n    plt.title('nfft')\n    plt.plot(ut1, p_norm1, 'b',label='p_norm') #original time-domain real data\n    plt.plot(np.flipud(x_recon_native), y_p_norm_recon.real, 'b+', label='p_norm_recon')    \n    plt.plot(np.flipud(x_recon_27Hz), y_p_norm_27Hz_recon.real, 'b--', label='p_norm_27Hz_recon')     \n    print(np.sum(abs(y_p_norm_27Hz_recon.imag)))    \n   \n    plt.plot(ut1, uin_norm1, 'g',label='uin_norm') #original time-domain real data\n    plt.plot(np.flipud(x_recon_native), y_uin_norm_recon.real, 'g+', label='uin_norm_recon') \n    plt.plot(np.flipud(x_recon_27Hz), y_uin_norm_27Hz_recon.real, 'g--', label='uin_norm_27Hz_recon') \n    plt.xlabel('time-samples (sec)')\n    plt.legend(), plt.grid()     \n    \n    #time-domain reconstruct back to native time step\n    plt.figure(figsize=(22,4))\n    plt.subplot(121)\n    plt.plot(ut1, p_norm1, 'b',label='p_norm') #original time-domain real data    \n    plt.plot(x_recon_native[x_recon_native>=0], p_nat, 'c',label='p_nat')\n    plt.plot(x_recon_native[x_recon_native>=0], p_27Hz_nat, 'k',label='p_27Hz_nat')\n    plt.xlabel('time-samples (sec)')\n    plt.legend(), plt.grid() \n    \n    plt.subplot(122)\n    plt.plot(ut1, uin_norm1, 'b',label='uin_norm') #original time-domain real data  \n    plt.plot(x_recon_native[x_recon_native>=0], u_nat, 'c',label='uin_nat')\n    plt.plot(x_recon_native[x_recon_native>=0], u_27Hz_nat, 'k',label='uin_27Hz_nat')\n    plt.xlabel('time-samples (sec)')\n    plt.legend(), plt.grid()\n    \n    return","d012e3c1":"#Example using two non-uniform sine tones 5Hz and 20Hz to reconstruct.\np_s,u_s,u_sine_pos, p_sine_pos, t_axis_sine, f_axis_sine = sine_lung()","3b2fb4db":"def lung_tranfer_function(Uin_r, Prs_r, xf1, t_axis):\n    #Uin_r  => 41, dc,pos_freq,Nyq \n    #Prs_r  => 41, dc,pos_freq,Nyq \n    #xf1 => 41, freq(0,Nyq)\n    N = len(t_axis)  #80\n    N2 = N\n    \n    Uin = Uin_r\/2.\n    Prs = Prs_r\/2.\n    Iden=np.eye(len(Prs))\n    #In Freq-domain\n    #err = Prs - L_out,  L_out = L .* Uin\n    #0   = Prs - L .* Uin, for err = 0\n    #L   = Prs .* conj(Uin) .\/ ( Uin .* conj(Uin) )\n    D = Uin.dot(np.conj(np.diag(Uin)))+1  #avoid divide zero\n    \n    #Lung Transfer function or freq response\n    Lung_f = np.dot(np.conj(Uin), np.diag(1.\/D))*Iden  #  np.conj(Uin) .\/ ( Uin .* conj(Uin) )\n    Lung_f = np.dot(Prs,Lung_f)\n    print(np.shape(Uin),np.shape(Prs),np.shape(Lung_f))    \n\n    x_Lung = np.linspace(0, .5, N2, endpoint=True)\n    #x_recon1 = np.linspace(0, .5, N2\/\/2, endpoint=False)\n\n    #ifft Lung_out\n    l_out_2x_fft = np.zeros(2*len(Lung_f)-1, dtype=complex)       #80 \n    l_out_2x_fft[:len(Lung_f)] = Lung_f\n\n    pinv     = irfft(l_out_2x_fft)         #time-domain\n    pinv2    = np.fft.fftshift(pinv)       #time-swap\n    y_Lung_f = np.flipud(pinv2)            #160\n    y_Lung   = y_Lung_f[2*N\/\/2:]           #80\n   \n    plt.figure(figsize=(22,4))\n    plt.subplot(141)\n    plt.plot(xf1, np.abs(Prs), 'b')\n    plt.plot(xf1, np.abs(Uin), 'r--')\n    plt.legend(['pressure','u_in'])\n    plt.xlabel('freq (Hz)')\n    plt.grid()\n\n    plt.subplot(142)    \n    plt.plot(xf1, np.abs(Lung_f), color='b')\n    plt.legend(['Lung_f'])\n    plt.xlabel('freq (Hz)')\n    plt.grid()\n\n    #Plot original vs reconstructed\n    plt.subplot(143)\n    plt.title('ifft')\n    plt.plot( y_Lung, 'b', label='Lung_t')  #reconstructed time-domain real-part, residual imag-part\n    plt.xlabel('time-samples')\n    plt.legend()\n    plt.grid()\n    print(np.sum(abs(y_Lung.imag)))\n    \n    #plt.figure()\n    #plt.plot( np.abs(Lung_Nyq), color='b')\n    \n    return xf1, Lung_f, x_Lung, y_Lung","76e44f62":"#Example using two non-uniform sine tones 5Hz and 20Hz as Pressure, non-uniform sine tone 5Hz as u_in.\n# Err = Pressure - Lung .* u_in\n# if Err = 0, solve for Lung Freq\/Impulse responses. Basically it's a freq-domain equalizer(FEQ), equalize the phase and amplitude.\nf_axis_lung,lung_f, t_axis_lung,lung_t = lung_tranfer_function(u_sine_pos,\n                                                                p_sine_pos,\n                                                                800*t_axis_sine[:int(len(t_axis_sine)\/2)+1],  #double ifft points\n                                                                t_axis_sine\n                                                               )\n\n#np.shape(f_axis_lung), np.shape(lung_f), np.shape(t_axis_lung), np.shape(lung_t)","2021a8e8":"u_sine_dc = u_s.mean()\np_sine_dc = p_s.mean()\nl_gain_sine = u_sine_dc\/p_sine_dc\nprint(f'u_dc=',u_sine_dc,',p_dc=',p_sine_dc)\nprint('lung DC gain =',l_gain_sine)","8a2721df":"#######################################################################\n# Freq-domain Method:\n# Lung_output is freq multiply to match its Target Pressure\n# Lung_out_f = Lung_f * U_F\n# Lung_out_t = ifft(Lung_out_f)\n####################################################################### \nlen_p = len(t_axis_sine)                #400\nU_pos = u_sine_pos\/2.  #201,   np.fft.ifftshift(u_sine_fft)\/ 2  #400, get U positive freq\nP_pos = p_sine_pos\/2.  #201,   np.fft.ifftshift(p_sine_fft)\/ 2  #400, get Pressure positive freq\n#U_pos = U_F[:len_p\/\/2 +1]  #201\n#P_pos = P_F[:len_p\/\/2 +1]  #201\n\nl_out_fft = lung_f * U_pos\n\nplt.figure(figsize=(22,4))\nplt.subplot(131)\nplt.plot(np.abs(P_pos),'b')\nplt.plot(np.abs(l_out_fft),'r--')\n#plt.plot(np.abs(lung_f),'g--')\nplt.legend(['Pressure','Lung_output'])\nplt.xlabel('freq-domain')\nplt.grid()\n\n#ifft Lung_out from freq-domain\nl_out_2x_fft = np.zeros(2*len(l_out_fft)-1, dtype=complex)       #401, double ifft point\nl_out_2x_fft[:len(l_out_fft)] = l_out_fft\n#pinv     = irfft(l_out_fft)          #time-domain\npinv     = irfft(l_out_2x_fft)        #time-domain\npinv2    = np.fft.fftshift(pinv)      #time-swap\ny_Lung_f = np.flipud(pinv2)           #800\ny_Lung   = y_Lung_f[2*len_p\/\/2:]      #401\ny_Lung   = 2*y_Lung\n\nplt.subplot(132)\nplt.plot(p_s)\nplt.plot(y_Lung,'r--')\n#plt.plot(y_Lung\/l_gain_sine,'r--')\nplt.legend(['Pressure','Lung_output'])\nplt.xlabel('time-domain')\nplt.grid()\n\n#x_recon = np.linspace(0, .5, N1\/\/2, endpoint=False)\n#x_recon = (np.arange(len_p)-len_p\/\/2)\/len_p\nx_recon = np.linspace(0, .5, len_p, endpoint=False)   #maps -3sec to +3sec \n\n#Interpolate back to native fs, non-uniform time-step\np_recon_native = interp1d_reverse(t_axis_sine, x_recon, y_Lung)  #\n\n#Undo norm, std(p) then add p_dc\n#p_recon_norm_native = np.std(p_s)*p_recon_native+p_sine_dc\np_recon_norm_native = p_recon_native\n\n#plt.subplot(132)\n#plt.plot(pinv+2)  #2 for display\n#plt.plot(pinv2)\n#plt.plot(p_rec)\n#plt.legend(['irfft(+ve freq)','fftshift(p)','p_rec'])\n#plt.xlabel('time-domain'),plt.grid()\n    \nplt.subplot(133)\nplt.plot(t_axis_sine, p_s, 'b', label='p(x)') #original time-domain real data\nplt.plot(t_axis_sine, p_recon_norm_native,'r',label='p_recon_native')\nplt.legend()\nplt.xlabel('time-domain (sec)'),plt.grid()  \n\n#plt.figure()\n#plt.plot(2*(t_axis_sine[len(t_axis_sine)\/\/2:]-.25), p_s[len(t_axis_sine)\/\/2:], 'b', label='p(x)') #original time-domain real data\n#plt.plot(x_recon_native[x_recon_native>=0],2*p_recon_native1,'r',label='p_recon_native')\n#plt.plot(t_axis_sine, p_s, 'b', label='p(x)') #original time-domain real data\n#plt.plot(t_axis_sine, p_recon_native,'r',label='p_recon_native')\n\n#######################################################################\n# Time-domain Method: \n# Lung_output by time-domain conv to match its Target Pressure\n# Lung_out_t = conv(lung_t, uin)\n#\n# find delay in time-domain\n# correlate(uniform target, non uniform Lung_out_t)\n#######################################################################   \nl_out_s = np.convolve(lung_t, u_s)   #Lung output in time-domain = conv(lung_t, uin), len(lung_t)+len(u)-1  samples\ncorr_out_s = np.correlate(p_s,l_out_s,'full')   #corr(non uniform target, uniform Lung output), len(lung_t)+len(p)-1  samples\n#corr_out = np.correlate(l_out,u,'full')  #corr(Lung output, uin)\n\n#Find Delay\/breath boundary\npeak_loc_s = np.argmax(np.abs(corr_out_s))\ndelay_bdry_s = len(corr_out_s)-peak_loc_s\ndelay_s=0\nif delay_bdry_s <= len_p:\n    delay_s = len_p-delay_bdry_s\n    l_out1_s = np.roll(l_out_s,delay_s)[:len_p]\nprint(f'delay =',delay_s,'samples,  delay_bdry_s=',delay_bdry_s,'samples, peak_loc=',peak_loc_s, ', max_peak=', np.max(np.abs(corr_out_s)))  \n    \n#Interpolate back to native fs, non-uniform time-step\np_recon_t_native = interp1d_reverse(t_axis_sine, x_recon, l_out1_s )  # \n#Undo norm, std(p) then add p_dc\n#p_recon_t_native = 2*np.std(p_s)*p_recon_t_native+p_s_dc    \n    \nplt.figure(figsize=(22,4))\nplt.subplot(141)\nplt.plot(p_s)\nplt.legend('p')\nplt.xlabel('time-domain')\nplt.grid()\n\nplt.subplot(142)\nplt.plot(5*lung_t)  #display\nplt.plot(u_s)\nplt.legend(['lung_t','uin'])\nplt.xlabel('time-domain')\nplt.grid()\n\nplt.subplot(143)\nplt.plot(corr_out_s)\nplt.legend(['corr_out'])\nplt.xlabel('time-domain')\nplt.grid()\n\nplt.subplot(144)\nplt.plot(p_s)\nplt.plot(l_out_s)\nplt.plot(l_out1_s,'r--')\nplt.xlabel('time-domain')\nplt.grid()\nplt.legend(['p','l_out','l_out adjust delay'])\n\nplt.figure()\nplt.plot(t_axis_sine, p_s)\nplt.plot(t_axis_sine, p_recon_t_native,'r--')\nplt.legend(['p','l_out_nat'])\nplt.xlabel('time-domain(sec)')\nplt.grid()","13f27976":"N = len(ut)\n#x = np.linspace(0.0,0.5, N)\nut_pt5 = np.zeros(N)\n\ud835\udefft_27Hz_pt5 = np.zeros(N)\nfor i in range(N):\n    ut_pt5[i] = 0.5*ut[i]\/ut[-1]\n    \ud835\udefft_27Hz_pt5[i] = 0.5*\ud835\udefft_axis_27Hz[i]\/\ud835\udefft_axis_27Hz[-1]    #norm to 0.5\n    #print(ut1_pt5[i])","633e3a90":"#Reconstruct u_in, pressure, with native fs vs interpolated fs=27KHz\nreconstruct(ut,p_norm,uin_norm,         #ut=native time-step, p_norm=pressure, uin_norm=uin\n            p_norm_27Hz,uin_norm_27Hz,  #p_norm_27Hz=interp(p_norm), uin_norm_27Hz=interp(uin_norm)\n            )","4431515a":"#Lung Tranfer Function based on non-uniform native fs (u_in, pressure)\nf_axis_27Hz,lung_f_27Hz, t_axis_27Hz, lung_t_27Hz = lung_tranfer_function(uin_norm_27Hz_f,    #41, dc,pos_freq,Nyq \n                                                                          p_norm_27Hz_f,      #41, dc,pos_freq,Nyq  \n                                                                          54*(\ud835\udefft_27Hz_pt5)[:int(N\/2)+1],  #41 freq(Hz),dc,pos_freq,Nyq \n                                                                          \ud835\udefft_27Hz_pt5)        #N=80, dc,pos_freq,Nyq,neg_freq","388f9163":"l_gain = Uin_interp_fltr_27Hz_dc\/ P_interp_fltr_27Hz_dc\nl_gain_ideal = uin_dc\/ p_dc\np_dc_err = p_dc-P_interp_fltr_27Hz_dc\nu_dc_err = uin_dc-Uin_interp_fltr_27Hz_dc\nprint(f'u_dc=',uin_dc,',p_dc=',p_dc,',u_intrp_dc=',Uin_interp_fltr_27Hz_dc,',p_intrp_dc=',P_interp_fltr_27Hz_dc)\nprint('lung DC gain =',l_gain, ', P DC intrp err=',p_dc_err, ', U DC intrp err=',u_dc_err)","95835085":"#######################################################################\n# Freq-domain Method:\n# Lung_output is freq multiply to match its Target Pressure\n# Lung_out_f = Lung_f * U_F\n# Lung_out_t = ifft(Lung_out_f)\n####################################################################### \nlen_p = len(\ud835\udefft_27Hz_pt5)  #80\n\nU_pos = uin_norm_27Hz_f\/2.  #41, dc,pos_freq,Nyq  \nP_pos = p_norm_27Hz_f\/2.    #41, dc,pos_freq,Nyq  \nl_out_fft = lung_f_27Hz * U_pos\n\nplt.figure(figsize=(22,4))\nplt.subplot(131)\nplt.plot(np.abs(P_pos),'b')\nplt.plot(np.abs(l_out_fft),'r--')\nplt.legend(['Pressure','Lung_output'])\nplt.xlabel('freq')\nplt.grid()    \n\n#ifft Lung_out_t\nl_out_2x_fft = np.zeros(2*len(l_out_fft)-1, dtype=complex)       #2(41)-1 = 81, double ifft points \nl_out_2x_fft[:len(l_out_fft)] = l_out_fft\n#pinv     = irfft(l_out_fft)           #time-domain\npinv     = irfft(l_out_2x_fft)         #time-domain\npinv2    = np.fft.fftshift(pinv)       #time-swap\ny_Lung_f = np.flipud(pinv2)            #160\ny_Lung   = y_Lung_f[2*len_p\/\/2:]       #80\ny_Lung   = 2*y_Lung\n\nplt.subplot(132)\nplt.plot(p_norm_27Hz)\nplt.plot(y_Lung,'r--')\n#plt.plot(y_Lung+l_gain_ideal,'r--')\nplt.legend(['Pressure','Lung_output'])\nplt.xlabel('time-domain')\nplt.grid()\n\n#Interpolate back to native fs, non-uniform time-step\n#p_recon_norm_native = interp1d_reverse(ut, (27\/4.)*\ud835\udefft_27Hz_pt5, y_Lung\/l_gain )  #27\/2 * 1\/2 (double ifft pt)\np_recon_norm_native = interp1d_reverse(ut, (27\/4.)*\ud835\udefft_27Hz_pt5, y_Lung )  #27\/2 * 1\/2 (double ifft pt)\n\n#Undo norm, std(p) then add p_dc\np_recon_norm_native = np.std(p)*p_recon_norm_native+p_dc\n\nplt.subplot(133)\nplt.plot(ut, p, 'b', label='p(x)') #original time-domain real data\nplt.plot(ut, p_recon_norm_native,'r',label='p_recon_native')\nplt.legend()\nplt.xlabel('time-domain (sec)'),plt.grid()     \n\n#######################################################################\n# Time-domain Method: \n# Lung_output by time-domain conv to match its Target Pressure\n# Lung_out_t = conv(lung_t, uin)\n#\n# find delay in time-domain\n# correlate(uniform target, uniform Lung_out_t)\n#######################################################################    \nl_out = np.convolve(lung_t_27Hz, uin_norm_27Hz)   #Lung output in time-domain = conv(lung_t, uin), 80+40-1 = 119 samples\ncorr_out = np.correlate(p_norm_27Hz,l_out,'full')  #corr(target,Lung output) , 119+80-1 = 198 samples\npeak_loc = np.argmax(np.abs(corr_out))\ndelay_bdry = len(corr_out)-peak_loc\ndelay=0\nif delay_bdry <= len_p:\n    delay = len_p-delay_bdry\n    l_out1 = np.roll(l_out,delay)[:len_p]\nprint(f'delay=',delay,'samples, delay_bdry=',delay_bdry,'samples, peak_loc=',peak_loc, ',max_peak=', np.max(np.abs(corr_out)))   \n\n\n#Interpolate back to native fs, non-uniform time-step\n#p_recon_norm_t_native = interp1d_reverse(ut, (27\/4.)*\ud835\udefft_27Hz_pt5, l_out1\/l_gain )  #27\/2 * 1\/2 (double ifft pt)\np_recon_norm_t_native = interp1d_reverse(ut, (27\/4.)*\ud835\udefft_27Hz_pt5, l_out1 )  #27\/2 * 1\/2 (double ifft pt)\n#Undo norm, std(p) then add p_dc\np_recon_norm_t_native = np.std(p)*p_recon_norm_t_native+p_dc\n\nplt.figure(figsize=(22,4))\nplt.subplot(141)\nplt.plot(p_norm)\nplt.plot(p_norm_27Hz)\nplt.legend(['p_norm','p_norm_27Hz'])\nplt.xlabel('time-domain')\nplt.grid()\n\nplt.subplot(142)\nplt.plot(5*lung_t_27Hz)  #display\nplt.plot(uin_norm_27Hz)\nplt.legend(['lung_t_27Hz','uin_norm_27Hz'])\nplt.xlabel('time-domain')\nplt.grid()\n\nplt.subplot(143)\nplt.plot(corr_out)\nplt.legend(['corr_out'])\nplt.xlabel('time-domain')\nplt.grid()\n\nplt.subplot(144)\nplt.plot(p_norm_27Hz)\nplt.plot(l_out)\nplt.plot(l_out1,'g--')\nplt.legend(['p_norm_27Hz','l_out','l_out adjust delay'])\nplt.xlabel('time-domain')\nplt.grid()\n\nplt.figure()\nplt.plot(ut, p)\nplt.plot(ut, p_recon_norm_t_native,'g--')\nplt.legend(['p','l_out_nat'])\nplt.xlabel('time-domain (sec)')\nplt.grid()","246568a7":"p9=p_norm_27Hz_f[tone9_idx]           #pressure\nu9=uin_norm_27Hz_f[tone9_idx]         #uin \nl9=p9*np.conj(u9)\/(u9*np.conj(u9))    #lung\n\np9_hat = l9*u9                        #lung output\n#p9,l9,u9,p9_hat\nprint(f'pressure=',p9,',Lung out=',p9_hat)","e6d97e39":"First row plot: Freq-domain Method\n- Freq-domain Lung output, it matched the Target\n- iFFT(Freq-domain Lung output)\n- Time-domain, transform back to native time step\n\nSecond row plot: Time-domain Method\n- First plot, Target\/Pressure in time-domain\n- Second plot, Time-domain Lung_t, Lung input(Uin)\n- Third plot, correlate(Pressure, Lung_out), then find peak location as delay\n- Last plot, Lung_out and Pressure. (work in progress)\n\nThird row plot:\n- Pressure vs. Lung_out in native fs from time-domain method (work in progress)\n","755c263d":"Introduction:\n\nThree ways to analyze the spectral contents of the non-uniform(native) time step signal.\n- Non uniform fft (nfft), this is a special fft function\n- Lomb-Scargle Periodogram\n- Resample the signals, then take uniform fft\n\nThe nfft can perform fft based on the non uniform time step. After nfft, all the time steps are in uniform.  The Lung transfer can be calculated based on the uniform time-step. After the Lung model, Lung output, and Uin delay are calculated, then the Lung output in the time-domain can be transformed back to the native non uniform time-step. \n\nResample is another way to transform non-uniform to uniform time-steps. After resample, you can either use scipy.fft or nfft to transform to freq-domain, then the Lung model can be derived in the same way as described above.\n\nI don't use Lomb-Scargle to derive the Lung transfer function.\n\nThe difference between nfft and resample method is that nfft has uniform time-step for a given breath while resample is for all breaths.\nSuppose you have 3 step-sizes, small, medium, and large. Native time-step means that there can be any combinations in the 80 steps. nfft will have a small of this breath-id, and medium for other breath-id, etc. Resample will have standard, say medium for all breath-ids. Everytime you change the time step, the delay, filter coeff, or PID loop filter need to be recalculated. So, what is the advantage? The advantage is that, the resample method lets the NN to focus just on the Lung Model rather than combination recalculation of filter coeff, etc.\n","5646a16e":"Lung Transfer Function (uniform fs=27KHz)\n- The magnitudes of Lung_f and amplitude Lung_t are small because pressure and u_in are similar","d02cf1a7":"First row plot: Freq-domain Method\n- First plot, Freq-domain Lung output, it matched its Target\n- Middel plot, iFFT(Freq-domain Lung output)\n- Last plot, Transform back to native time steps\n\nSecond row plot: Time-domain Method\n- First plot, Pressure in time-domain\n- Second plot, Time-domain Lung_t, Lung input(Uin)\n- Third plot, correlate(Pressure, Lung_out), then find peak location as delay\n- Last plot, Lung_out after adjusting delay and Pressure.\n\nThird row plot: \n- Transform back to native time steps from time-domain method","cef255d3":"total id = 6,036,000 = breath_id * time-step = 75450 * 80\n\nfs = 80 uniform samples per 3 sec = 80\/3 = 26.67 Hz ~ 27Hz","44262ac3":"The second column plot is the non-uniform FFT at native fs.\n- Basically, the low-freq band is close to DC around 1Hz\n- Low-freq band magnitude, sometimes high or low. In closed-loop PID, the steady state error depends on the proportional DC gain. High gain, small steady state error.\n\nThe third column plot is the uniform FFT at fs=27Hz\n- The low-freq band has some variation bandwidth.\n- The freq responses of u_in and pressure are used to derive the Lung transfer functions.  Err = Pressure - Lung .* u_in\n- If Err = 0, the optimal Lung transfer function Lung_f = [ Pressure .* conj(u_in) ] .\/ [ u_in .* conj(u_in) ]\n- Need a software package to convert Lung_f to Lung_z(Z), where Z is a delay operator in discrete-time domain. \n- The closed-loop transfer function is defined as H_CL(Z) = Pressure(Z) \/ Lung_output(Z) => ZEROS \/ POLES\n- The closed-loop dynamic is defined as the denominator polynomial of H_CL(Z)\n- The roots(POLES) of the denominator H_CL polynomial must lied inside a unit circle\n- The proportional Gain controls the POLES locations, if the POLES are complex(overdamped), real (underdamped), on the unit circle (critical damped).\n- What if, in freq-domain, Lung_f is derived from pressure(native fs) vs. u_in(fs=27Hz)? LUNG_f output is in native fs, no need to re-interpolate back to native?\n\nThe last column plot is the 1st and 3rd sec of the uniform FFT at fs=27Hz\n- The magnitude, bandwidth, and phase delay are explained in next section","941efe84":"Lung Output\n- Freq-domain Method, Lung_out\n- Time-domain Method, Lung_out\n- Finding Delay between Target and Lung_out, this delay is Breath boundary\n- Assuming breath is repetitive\/periodic\n- Adjusting delay Lung_out in time-domain to match its Target","1fad75c6":"This notebook is about:\n- Interpolation\/Extrapolation of the signal (resample)\n- Circular Buffer Shift\n- Analyze Spectral Content of the Signal\n- Features Extraction\n- Model of Lung from a Breath of 3sec Instance\n- Finding the input Uin Delay\n- Summary","b2c72d3f":"Lung Output\n- Freq-domain Method\n- Time-domain Method","04a8b2a7":"Spectral content of the signal using Lomb-Scargel Periodogram","12a4fa67":"Lung Transfer Function\n- Left plot: Pressure (5Hz and 20 Hz), Uin (10Hz)\n- Middle plot: Lung_f magnitude response. It blocked Uin tone 10Hz, and output tones 5Hz and 20Hz to match the target. \n- Last plot: Lung_t model in time-domain.","4a080261":"First row plot:\n- First plot is non-uniform, two sine waves(5Hz and 20Hz) in time-domain\n- Middle plot is non-uniform nFFT in freq-domain\n- Last plot is reconstructed by iFFT and compared with the first plot.\n\nSecond row plot:\n- First plot, comparing nFFT, nFFT_adjoint. Also showing Pressure(5Hz,20Hz), Uin(10Hz)\n- Middle plot, the blue is nfft_adjoint format(-ve freq, dc, +ve freq). To take ifft you need format in red (dc,+ve freq,-ve freq) by performing ifftshift in freq\n- Last plot, to show iffshift in time, and flipud\n\nThird row plot:\n- First plot, Pressure in freq-domain, \n- Middle plot, using irfft to reconstruct (dc,pos freq,Nyq). Only use pos freq to work on the Lung transfer function. Neg freq can be obtained from pos freq.\n- Last plot, reconstructed time-domain signal","31e97f48":"# Interpolation\/Extrapolation\n\n- Resample the non-uniform to uniform time-step\n- Upsample to 54Hz with 160 uniform time-step \n- Apply interpolation\/extrapolation\n- then downsample to 27Hz with 80 uniform time-step","04d4d56a":"Numerical Values Check for Lung Output(tone9) in Freq-domain","45770708":"Comparing Uin with vs without anti-aliasing filter","1c9263de":"Frequency Error Analysis\n- Err = Target - LUNG_predict  =>  E(Z) = R(Z) - Y(Z)\n- E(Z)\/R(Z) = [1- Y(z)\/R(Z)]\n- For a unit step reference input, the phase of the input signal has a step change or frequency jumps\n- R(Z) = 1\/(1- Z^-1), this is unit step reference in Z-domain.\n- Applying the final value theorem, lim_(k->inf) e(kT) = lim_(z->1) (1-Z^-1) E(Z) , k= time-index, T= uniform time interval.\n- Steady State Error, is related to the proportional Gain, is the DC value evaluated at Z=1, a very important value.\n","99c43550":"Reconstruction Pressure and Uin (non-uniform vs uniform)\n\nTop row plot:\n- dash plot is uniform, solid plot is non-uniform\n\nBottom row plot:\n- This is the last step, transforming uniform signal back to the native time step.\n- For the interpolation case, due to interpolation having a \"natural\" smoothing action and tend to represent lower freq, they cannot reconstruct the spiky saw-tooth wave.\n- The interpolation can be improved by upsample many times then interpolate.\n- For native fs case, somehow it has smoothing action too.","72f3e2fd":"breath_id_12 fs is faster, at time-step 80, it terminated acquisition at 2.5sec","5013f2b8":"Lung DC gain","7fe29a65":"# Spectral content of the signal\n- Lomb-Scargle Periodogram\n- to analyze spectral content of non-uniform FFT(nFFT) at native sampling rate\n- to compare uniform FFT after interpolation at fs=27Hz\n- to analyze spectral content during inhale(1st sec) and exhale(3rd sec)\n- to analyze phase delay during inhale(1st sec) and exhale(3rd sec)","43cce9ac":"# Circular Buffer Shift\n\n**The idea** \n- To expand the dimension to 2D, treat this as an image if you want.\n- Averaging to reduce noise\n- Applicable to target, the NN output as dense expanded dim size, can be different from input dimension.\n- If the target is in a non-uniform time-step, the NN will map the uniform input time-step to whatever the target time-step, hopefully.\n- The cost function will need to be modified accordingly.","486d640b":"These are very important features, closed-loop PID systems. The PID params basically translated into loop filter and loop gain.\n- Information about closed-loop filter(H_LF), H_LF bandwidth\n- If H_LF bandwidth is too width, the tone9 will wander back and forth in a wide range\n- If H_LF bandwidth is too narrow, the system may not reach a steady state, or if its does, very jittery in tone3\n- Tone3 pressure's phase delay in 1st sec is always 180 degree phase shifted wrt 3rd sec.\n- In communication systems, they use this phase error to lock the receiver clock with its transmitter clock.","31ab7476":"# **Summary**\n\nAnalyze Spectral Content of the Signal\n- Lomb-Scargle Periodograms\n- nFFT, a non-uniform FFT\n- Uniform FFT after resample\n- Reconstruction of the signal from time to freq then back to time domain\n\nFeatures Extraction\n- Spectral Content\n- DC values\n- Magnitude, bandwidth, and phase delay\n\nModel of Lung from a Breath of 3sec Instance\n- Able to obtain Lung_f(freq) and Lung_t(time) models\n- Two methods to generate Target from the Lung Model\n- From Freq-domain of Lung output, then ifft(Lung_out in freq-domain)\n- From Time-domain of Lung output, this step is much complicated\n- Lung_out = convolve( Lung_t, Uin)\n- corr_out = correlate( Target, Lung_out)\n- Find breath boundary, by finding the peak location of the corr_out\n- The peak location is the delay\n- Close to match Lung_out with Target in time-domain\n- Able to match Lung_out with Target in freq-domain\n- During training, the delay is inserted in the Uin, then the during test, there is no need to correlate the lung output with its target to find the delay, NN with automatic generated delay.\n- With the Lung Model, you can generate many training data sets\n- Cost function should be evaluated at native time-step, not in uniform time-step, then transform to native time-step\n- Code need some fine tune\n","77885807":"LUNG Transfer Function\n- If the freq responses of u_in(f) and pressure(f) are known\n- err(f) = pressure(f) - LUNG_f .* u_in(f)\n- LUNG_f = pressure(f) .* conj(u_in) .\/ ( u_in .* conj(u_in) ), Lung freq response, if err(f)=0.\n- LUNG_t = ifft( LUNG_F ), Lung impulse response\n- LUNG_z = Z-transform of LUNG_f"}}