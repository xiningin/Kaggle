{"cell_type":{"c51c927e":"code","3ba1c792":"code","4386a3da":"code","8a3b68e4":"code","31ec3d66":"code","838c3b63":"code","5decfb0d":"code","fb1f3367":"code","076c9689":"code","cbe30fcb":"code","56b03629":"code","9c4552ce":"code","1318fb77":"code","cc265afa":"code","a0d35241":"code","aa2ba266":"code","158e6cbd":"code","413b01e1":"code","a01a451e":"code","340b1b92":"code","cbd5ea6d":"code","3c280564":"code","e4182b23":"code","7caedd14":"code","1f6a21b5":"code","b9eded67":"code","2a067169":"code","3f617f3f":"code","4873d015":"code","92890178":"code","aa8add93":"code","59a46240":"code","4fc84299":"code","7821ebc1":"code","adc083d1":"code","8f295329":"code","e00f9f73":"code","6b1f2b21":"code","e5c10629":"markdown","576e5273":"markdown"},"source":{"c51c927e":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport numpy as np # \u884c\u5217\u6f14\u7b97\nimport pandas as pd # \u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u3092\u6271\u3046\npd.set_option(\"display.max_columns\", 100) # \u30ab\u30e9\u30e0\u6570\u8868\u793a\u306e\u4e0a\u9650\u3092100\u306b\u7de9\u548c\n\nimport matplotlib.pyplot as plt # \u53ef\u8996\u5316\u30e9\u30a4\u30d6\u30e9\u30ea\nplt.style.use('ggplot')\n%matplotlib inline\n\nfrom category_encoders import CountEncoder # \u30ab\u30c6\u30b4\u30ea\u3092\u6570\u5024\u306b\u5909\u63db\uff08\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff09\nfrom sklearn.feature_extraction.text import TfidfVectorizer # scikit-learn\u3000python\u3067ML\u3084\u308b\u4e0a\u3067\u306e\u30c7\u30d5\u30a1\u30af\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import KFold\n\nfrom tqdm.notebook import tqdm # \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\nfrom xgboost import XGBRegressor # \u5b66\u7fd2\u5668\uff08\u5f37\u3044\u3084\u3064\uff09\nimport cv2 #opencv, \u753b\u50cf\u30c7\u30fc\u30bf\u306e\u5404\u7a2e\u51e6\u7406\u306b\u4f7f\u3046\n\n","3ba1c792":"import re\nfrom collections import Counter\nimport nltk\nfrom nltk.corpus import stopwords","4386a3da":"# lightGBM\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\nfrom lightgbm import LGBMRegressor","8a3b68e4":"# \u30e1\u30a4\u30f3\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u898b\u307e\u3059\ndf_train = pd.read_csv('\/kaggle\/input\/data-science-autumn-2021\/train.csv', parse_dates=['latest_saledate'])\ndf_test = pd.read_csv('\/kaggle\/input\/data-science-autumn-2021\/test.csv', parse_dates=['latest_saledate'])\npredict = pd.read_csv('..\/input\/datascienceautumn2021\/DataScienceAutumn2021_submit.csv') #\u3053\u3053\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305fcsv\u306e\u30d1\u30b9\u3092\u5165\u308c\u308b","31ec3d66":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3001\u4e88\u6e2c\u7d50\u679c\u306e\u884c\u6570\u3068\u5217\u6570\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_train.shape, df_test.shape, predict.shape","838c3b63":"#\u7d50\u5408\u3057\u307e\u3059\ndf_train2 = pd.merge(df_test, predict, on='zpid')\ndf_train = pd.concat([df_train, df_train2], axis=0)","5decfb0d":"#\u7d50\u5408\u3067\u304d\u3066\u3044\u308b\u304b\u78ba\u8a8d\uff01\ndf_train.shape","fb1f3367":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u5148\u982d\uff15\u884c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\n# \u3056\u3063\u3068\u307f\u305f\u3068\u3053\u308d\u3067\u306f\u3001\u6570\u5024\u3001\u30ab\u30c6\u30b4\u30ea\u3001\u65e5\u4ed8\u306e\u4ed6\u306b\u3001\u30c6\u30ad\u30b9\u30c8\uff08description\uff09\u3001\u5730\u7406\u7a7a\u9593\uff08latitude\/longitude\u306a\u3069\uff09\u3001\u753b\u50cf(homeImage)\u304c\u542b\u307e\u308c\u308b\u3088\u3046\u3067\u3059\u306d\u3002\n# \u753b\u50cf\u306ffile path\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\ndf_train.head()","076c9689":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5148\u982d\uff15\u884c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_test.head()","cbe30fcb":"df_train['homeImage'] # Series","56b03629":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5bfe\u5fdc\u3059\u308b\u753b\u50cf\u3092\u5148\u982d12\u679a\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# \u7dba\u9e97\u306a\u304a\u5bb6\u3067\u3059\u306d\u3002\u65e5\u672c\u3067\u306f\u306a\u304b\u306a\u304b\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\nn=12\nfiles = df_train['homeImage'].values[:n]\n\nplt.figure(figsize=[30,30])\nfor i, file in enumerate(files):\n    plt.subplot(n\/\/3,3,i+1)\n    img = cv2.imread('\/kaggle\/input\/data-science-autumn-2021\/train\/%s'%file)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.title(file)\n    plt.imshow(img)\nplt.show()","9c4552ce":"# 2021-10-14 updated:\u5bfe\u6570\u5909\u63db\ndf_train['latestPrice'] = np.log(df_train['latestPrice'])","1318fb77":"# \u8aac\u660e\u5909\u6570\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u306b\u5206\u5272\u3057\u3066\u304a\u304d\u307e\u3059\n# \u30c6\u30ad\u30b9\u30c8\u3068\u753b\u50cf\u4e00\u65e6\u9664\u3044\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u3089\u306e\u6271\u3044\u306b\u3064\u3044\u3066\u306f\u672c\u30b3\u30f3\u30da\u3092\u901a\u3058\u3066\u5b66\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u307e\u305f\u3001\u65e5\u4ed8\u3082year\u3068month\u304c\u65e2\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u4e00\u65e6\u4f7f\u308f\u306a\u3044\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002\ny_train = df_train.latestPrice\nX_train = df_train.drop(['latestPrice','homeImage','latest_saledate'], axis=1)\nX_test = df_test.drop(['homeImage','latest_saledate'], axis=1)","cc265afa":"# dtype\u304cobject\uff08\u6570\u5024\u3067\u306a\u3044\u3082\u306e\uff09\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30e6\u30cb\u30fc\u30af\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# streetAddress\u304c\u30e6\u30cb\u30fc\u30af\u306b\u8fd1\u3044\u3067\u3059\u306d\u3002\ncats = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, X_train[col].nunique())","a0d35241":"# streetAddress\u3082\u3042\u3068\u3067\u8003\u3048\u308b\u3053\u3068\u306b\u3057\u3066\u4e00\u65e6\u9664\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n# 2\u5ea6\u3042\u308b\u3053\u3068\u306f3\u5ea6\u3042\u308b\u65b9\u5f0f\u3067\u5b66\u7fd2\u3059\u308b\u306e\u304c\u6a5f\u68b0\u5b66\u7fd2\u3067\u3059\u306e\u3067\u3001\u5168\u90e81\u56de\u3057\u304b\u89b3\u6e2c\u3055\u308c\u306a\u3044\u73fe\u72b6\u306e\u307e\u307e\u3067\u306f\u76f4\u63a5\u306f\u610f\u5473\u3092\u306a\u3055\u306a\u3044\u304b\u3089\u3067\u3059\u3002\nX_train = X_train.drop(['streetAddress'], axis=1)\nX_test = X_test.drop(['streetAddress'], axis=1)","aa2ba266":"sw = stopwords.words('english')\nwords = []\nfor desc in X_train['description'].values:\n    desc = re.sub(r'[^\\w\\s]','',desc)\n    desc_split = desc.split()\n    desc_split = [word for word in desc_split if word not in sw]\n    words.extend(desc_split)\nCounter(words).most_common()[:99]","158e6cbd":"#\u6b63\u898f\u8868\u73fe\u62bd\u51fa\u3067zestimate\u3092\u62bd\u51fa\u3059\u308b\n    \nX_train['description'] = X_train['description'].str.lower() \n#\u5c0f\u6587\u5b57\u5316\nX_train['description'] = X_train['description'].str.replace(',', '', regex=True)\nX_train['description'] = X_train['description'].str.replace('$', '', regex=True)\n#  , \uff04\u3092\u6d88\u53bb\n\nX_train['zestimate'] = X_train['description'].str.extract('the\\szestimate\\sfor\\sthis\\shouse\\sis\\s([0-9]+)?').fillna(-1)\nX_train['zestimate'] = pd.to_numeric(X_train['zestimate'])\n#X_train['zestimate_month'] = X_train['description'].str.extract('the\\srent\\szestimate\\sfor\\sthis\\shome\\sis\\s([0-9]+)?').fillna(-1)\n#X_train['zestimate_month'] = pd.to_numeric(X_train['zestimate_month'])","413b01e1":"X_test['description'] = X_test['description'].str.lower()\nX_test['description'] = X_test['description'].str.replace(',', '', regex=True)\nX_test['description'] = X_test['description'].str.replace('$', '', regex=True)\n    \nX_test['zestimate'] = X_test['description'].str.extract('the\\szestimate\\sfor\\sthis\\shouse\\sis\\s([0-9]+)?').fillna(-1)\nX_test['zestimate'] = pd.to_numeric(X_test['zestimate'])\n#X_test['zestimate_month'] = X_test['description'].str.extract('the\\srent\\szestimate\\sfor\\sthis\\shome\\sis\\s([0-9]+)?').fillna(-1)\n#X_test['zestimate_month'] = pd.to_numeric(X_test['zestimate_month'])","a01a451e":"X_train[\"pool\"] = X_train['description'].str.contains('pool','Pool') \nX_test[\"pool\"] = X_test['description'].str.contains('pool','Pool') \n\nX_train[\"suite\"] = X_train['description'].str.contains('suite','Suite') \nX_test[\"suite\"] = X_test['description'].str.contains('suite','Suite')\n\nX_train[\"office\"] = X_train['description'].str.contains('office','Office') \nX_test[\"office\"] = X_test['description'].str.contains('office','Office') \n\nX_train[\"airport\"] = X_train['description'].str.contains('airport','Airport') \nX_test[\"airport\"] = X_test['description'].str.contains('airport','Airport') \n\nX_train[\"prime\"] = X_train['description'].str.contains('prime') \nX_test[\"prime\"] = X_test['description'].str.contains('prime') \n\nX_train[\"luxury\"] = X_train['description'].str.contains('luxury') \nX_test[\"luxury\"] = X_test['description'].str.contains('luxury') \n\nX_train[\"affordable\"] = X_train['description'].str.contains('affordable') \nX_test[\"affordable\"] = X_test['description'].str.contains('affordable') \n\nX_train[\"designed\"] = X_train['description'].str.contains('designed') \nX_test[\"designed\"] = X_test['description'].str.contains('designed') \n\nX_train[\"cellar\"] = X_train['description'].str.contains('cellar') \nX_test[\"cellar\"] = X_test['description'].str.contains('cellar') \n#\u30ef\u30a4\u30f3\u30bb\u30e9\u30fc\u3068\u304b\n\nX_train[\"containts\"] = X_train['description'].str.contains('containts')\nX_test[\"containts\"] = X_test['description'].str.contains('containts')\n#\u542b\u307e\u308c\u307e\u3059\n\nX_train[\"custom\"] = X_train['description'].str.contains('custom')\nX_test[\"custom\"] = X_test['description'].str.contains('custom')\n\nX_train[\"spacious\"] = X_train['description'].str.contains('spacious')\nX_test[\"spacious\"] = X_test['description'].str.contains('spacious')\n#\u5e83\u3005\u3068\u3057\u305f\n\nX_train[\"perfect\"] = X_train['description'].str.contains('perfect')\nX_test[\"perfect\"] = X_test['description'].str.contains('perfect')\n","340b1b92":"\n\nX_train[\"Agent\"] = X_train['latestPriceSource'].str.contains('Agent')\nX_test[\"Agent\"] = X_test['latestPriceSource'].str.contains('Agent')\n\nX_train[\"Broker\"] = X_train['latestPriceSource'].str.contains('Broker')\nX_test[\"Broker\"] = X_test['latestPriceSource'].str.contains('Broker')\n\nX_train[\"Public\"] = X_train['latestPriceSource'].str.contains('Public')\nX_test[\"Public\"] = X_test['latestPriceSource'].str.contains('Public')\n\nX_train[\"Keller\"] = X_train['latestPriceSource'].str.contains('Keller')\nX_test[\"Keller\"] = X_test['latestPriceSource'].str.contains('Keller')\n\n#X_train[\"Realty\"] = X_train['latestPriceSource'].str.contains('Realty')\n#X_test[\"Realty\"] = X_test['latestPriceSource'].str.contains('Realty')","cbd5ea6d":"#city\u306b\u3064\u3044\u3066\u3000\u4e0a\u4f4d\uff13\u70b9\u306e\u307f\u7279\u5fb4\u91cf\u5316\u3000driftwood\u3000\uff08\uff17\u70b9\uff09\u4ee5\u4e0b\u306f\u5c11\u306a\u3059\u304e\u308b\uff1f\n\nX_train[\"austin\"] = X_train['city'].str.contains('austin') \nX_test[\"austin\"] = X_test['city'].str.contains('austin') \n\nX_train[\"pflugerville\"] = X_train['city'].str.contains('pflugerville')\nX_test[\"pflugerville\"] = X_test['city'].str.contains('pflugerville')\n\nX_train[\"del valle\"] = X_train['city'].str.contains('del valle')\nX_test[\"del valle\"] = X_test['city'].str.contains('del valle')\n\n#X_train[\"driftwood\"] = X_train['city'].str.contains('driftwood')\n#X_test[\"driftwood\"] = X_test['city'].str.contains('driftwood')\n\n#X_train[\"manor\"] = X_train['city'].str.contains('manor')\n#X_test[\"manor\"] = X_test['city'].str.contains('manor')\n\n#X_train[\"dripping springs\"] = X_train['city'].str.contains('dripping springs')\n#X_test[\"dripping springs\"] = X_test['city'].str.contains('dripping springs')","3c280564":"X_train[\"Single\"] = X_train['homeType'].str.contains('Single')\nX_test[\"Single\"] = X_test['homeType'].str.contains('Single')\n\nX_train[\"Condo\"] = X_train['homeType'].str.contains('Condo')\nX_test[\"Condo\"] = X_test['homeType'].str.contains('Condo')\n\nX_train[\"Townhouse\"] = X_train['homeType'].str.contains('Townhouse')\nX_test[\"Townhouse\"] = X_test['homeType'].str.contains('Townhouse')\n\nX_train[\"Multiple\"] = X_train['homeType'].str.contains('Multiple')\nX_test[\"Multiple\"] = X_test['homeType'].str.contains('Multiple')\n\nX_train[\"Vacant\"] = X_train['homeType'].str.contains('Vacant')\nX_test[\"Vacant\"] = X_test['homeType'].str.contains('Vacant')\n\n#X_train[\"Apartment\"] = X_train['homeType'].str.contains('Apartment')\n#X_test[\"Apartment\"] = X_test['homeType'].str.contains('Apartment')\n\n#X_train[\"Mobile\"] = X_train['homeType'].str.contains('Mobile')\n#X_test[\"Mobile\"] = X_test['homeType'].str.contains('Mobile')\n\n#X_train[\"MultiFamily\"] = X_train['homeType'].str.contains('MultiFamily')\n#X_test[\"MultiFamily\"] = X_test['homeType'].str.contains('MultiFamily')","e4182b23":"#\u7def\u5ea6\u7d4c\u5ea6\u3092\uff19\u3064\u306e\u30a8\u30ea\u30a2\u306b\u5206\u3051\u308b\n\nX_train[\"area_a\"] = (X_train['latitude'] >= 30.36) & (X_train['longitude'] <= -97.79) \nX_test[\"area_a\"] = (X_test['latitude'] >= 30.36) & (X_test['longitude'] <= -97.79)\n\nX_train[\"area_b\"] = (X_train['latitude'] >= 30.36) & (X_train['longitude'] <= -97.72) & (X_train['longitude'] > -97.79) \nX_test[\"area_b\"] = (X_test['latitude'] >= 30.36) & (X_test['longitude'] <= -97.72) & (X_test['longitude'] > -97.79) \n\nX_train[\"area_c\"] = (X_train['latitude'] >= 30.36) & (X_train['longitude'] > -97.72) \nX_test[\"area_c\"] = (X_test['latitude'] >= 30.36) & (X_test['longitude'] > -97.72)\n\n\nX_train[\"area_d\"] = (X_train['latitude'] >= 30.22) & (X_train['latitude'] < 30.36) & (X_train['longitude'] < -97.79) \nX_test[\"area_d\"] = (X_test['latitude'] >= 30.22) & (X_test['latitude'] < 30.36) & (X_test['longitude'] < -97.79)\n\nX_train[\"area_e\"] = (X_train['latitude'] >= 30.22) & (X_train['latitude'] < 30.36) & (X_train['longitude'] <= -97.72) & (X_train['longitude'] > -97.79)\nX_test[\"area_e\"] = (X_test['latitude'] >= 30.22) & (X_test['latitude'] < 30.36) & (X_test['longitude'] <= -97.72) & (X_test['longitude'] > -97.79)\n\nX_train[\"area_f\"] = (X_train['latitude'] >= 30.22) & (X_train['latitude'] < 30.36) &  (X_train['longitude'] > -97.72)\nX_test[\"area_f\"] = (X_test['latitude'] >= 30.22) &  (X_test['latitude'] < 30.36)  & (X_test['longitude'] > -97.72)\n\n\nX_train[\"area_g\"] = (X_train['latitude'] < 30.22) & (X_train['longitude'] <= -97.79) \nX_test[\"area_g\"] = (X_test['latitude'] < 30.22) & (X_test['longitude'] <= -97.79)\n\nX_train[\"area_h\"] = (X_train['latitude'] < 30.22) & (X_train['longitude'] <= -97.72) & (X_train['longitude'] > -97.79) \nX_test[\"area_h\"] = (X_test['latitude'] < 30.22) & (X_test['longitude'] <= -97.72) & (X_test['longitude'] > -97.79) \n\nX_train[\"area_i\"] = (X_train['latitude'] < 30.22) & (X_train['longitude'] > -97.72) \nX_test[\"area_i\"] = (X_test['latitude'] < 30.22) & (X_test['longitude'] > -97.72)","7caedd14":"#\uff11\uff16\u500b\u306b\u30a8\u30ea\u30a2\u5206\u3051\u305f\u3051\u3069\u30b9\u30b3\u30a2\u30c0\u30a6\u30f3\u3057\u307e\u3057\u305f\n\n#X_train[\"area_1\"] = (X_train['latitude'] >= 30.45) & (X_train['longitude'] <= -97.85) \n#X_test[\"area_1\"] = (X_test['latitude'] >= 30.45) & (X_test['longitude'] <= -97.85)\n\n#X_train[\"area_2\"] = (X_train['latitude'] >= 30.45) & (X_train['longitude'] <= -97.75) & (X_train['longitude'] > -97.85) \n#X_test[\"area_2\"] = (X_test['latitude'] >= 30.45) & (X_test['longitude'] <= -97.75) & (X_test['longitude'] > -97.85) \n\n#X_train[\"area_3\"] = (X_train['latitude'] >= 30.45) & (X_train['longitude'] <= -97.65) & (X_train['longitude'] > -97.75) \n#X_test[\"area_3\"] = (X_test['latitude'] >= 30.45) & (X_test['longitude'] <= -97.65) & (X_test['longitude'] > -97.75) \n\n#X_train[\"area_4\"] = (X_train['latitude'] >= 30.45) & (X_train['longitude'] > -97.65) \n#X_test[\"area_4\"] = (X_test['latitude'] >= 30.45) & (X_test['longitude'] > -97.65)\n\n\n#X_train[\"area_5\"] = (X_train['latitude'] >= 30.35) & (X_train['latitude'] < 30.45) & (X_train['longitude'] < -97.85) \n#X_test[\"area_5\"] = (X_test['latitude'] >= 30.35) & (X_test['latitude'] < 30.45) & (X_test['longitude'] < -97.85)\n\n#X_train[\"area_6\"] = (X_train['latitude'] >= 30.35) & (X_train['latitude'] < 30.45) & (X_train['longitude'] <= -97.75) & (X_train['longitude'] > -97.85)\n#X_test[\"area_6\"] = (X_test['latitude'] >= 30.35) & (X_test['latitude'] < 30.45) & (X_test['longitude'] <= -97.75) & (X_test['longitude'] > -97.85)\n\n#X_train[\"area_7\"] = (X_train['latitude'] >= 30.35) & (X_train['latitude'] < 30.45) & (X_train['longitude'] <= -97.65) & (X_train['longitude'] > -97.75)\n#X_test[\"area_7\"] = (X_test['latitude'] >= 30.35) & (X_test['latitude'] < 30.45) & (X_test['longitude'] <= -97.65) & (X_test['longitude'] > -97.75)\n\n#X_train[\"area_8\"] = (X_train['latitude'] >= 30.35) & (X_train['latitude'] < 30.45) &  (X_train['longitude'] > -97.65)\n#X_test[\"area_8\"] = (X_test['latitude'] >= 30.35) &  (X_test['latitude'] < 30.45)  & (X_test['longitude'] > -97.65)\n\n\n#X_train[\"area_9\"] = (X_train['latitude'] >= 30.25) & (X_train['latitude'] < 30.35) & (X_train['longitude'] < -97.85) \n#X_test[\"area_9\"] = (X_test['latitude'] >= 30.25) & (X_test['latitude'] < 30.35) & (X_test['longitude'] < -97.85)\n\n#X_train[\"area_a\"] = (X_train['latitude'] >= 30.25) & (X_train['latitude'] < 30.35) & (X_train['longitude'] <= -97.75) & (X_train['longitude'] > -97.85)\n#X_test[\"area_a\"] = (X_test['latitude'] >= 30.25) & (X_test['latitude'] < 30.35) & (X_test['longitude'] <= -97.75) & (X_test['longitude'] > -97.85)\n\n#X_train[\"area_b\"] = (X_train['latitude'] >= 30.25) & (X_train['latitude'] < 30.35) & (X_train['longitude'] <= -97.65) & (X_train['longitude'] > -97.75)\n#X_test[\"area_b\"] = (X_test['latitude'] >= 30.25) & (X_test['latitude'] < 30.35) & (X_test['longitude'] <= -97.65) & (X_test['longitude'] > -97.75)\n\n#X_train[\"area_c\"] = (X_train['latitude'] >= 30.25) & (X_train['latitude'] < 30.35) &  (X_train['longitude'] > -97.65)\n#X_test[\"area_c\"] = (X_test['latitude'] >= 30.25) &  (X_test['latitude'] < 30.35)  & (X_test['longitude'] > -97.65)\n\n\n\n#X_train[\"area_d\"] = (X_train['latitude'] < 30.25) & (X_train['longitude'] <= -97.85) \n#X_test[\"area_d\"] = (X_test['latitude'] < 30.25) & (X_test['longitude'] <= -97.85)\n\n#X_train[\"area_e\"] = (X_train['latitude'] < 30.25) & (X_train['longitude'] <= -97.75) & (X_train['longitude'] > -97.85) \n#X_test[\"area_e\"] = (X_test['latitude'] < 30.25) & (X_test['longitude'] <= -97.75) & (X_test['longitude'] > -97.85) \n\n#X_train[\"area_f\"] = (X_train['latitude'] < 30.25) & (X_train['longitude'] <= -97.65) & (X_train['longitude'] > -97.75) \n#X_test[\"area_f\"] = (X_test['latitude'] < 30.25) & (X_test['longitude'] <= -97.65) & (X_test['longitude'] > -97.75) \n\n#X_train[\"area_g\"] = (X_train['latitude'] < 30.25) & (X_train['longitude'] > -97.65) \n#X_test[\"area_g\"] = (X_test['latitude'] < 30.25) & (X_test['longitude'] > -97.65)","1f6a21b5":"X_train = X_train.drop(['description'], axis=1)\nX_test = X_test.drop(['description'], axis=1)","b9eded67":"#\u6577\u5730\u9762\u7a4d\u3001\u5efa\u7269\u9762\u7a4d\u306e\u5927\u304d\u306a\u3082\u306e\u30d5\u30e9\u30b0\n\nX_train[\"SizeLL\"] = (X_train['lotSizeSqFt'] > 100000) \nX_test[\"SizeLL\"] = (X_test['lotSizeSqFt'] > 100000)\n\nX_train[\"AreaLL\"] = (X_train['livingAreaSqFt'] > 10000) \nX_test[\"AreaLL\"] = (X_test['livingAreaSqFt'] > 10000)","2a067169":"X_train.head()","3f617f3f":"# month\u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n#col = 'latest_salemonth'\n#summary = X_train[col].value_counts() # \u96c6\u8a08\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u3063\u3066,\n\n#X_train['%s_count'%col] = X_train[col].map(summary) \n# map\u3057\u307e\u3059\u3002pandas.Series\u3092map\u3059\u308b\u3068index\u306b\u5bfe\u3059\u308bvalue\u3092\u5165\u308c\u3089\u308c\u307e\u3059\u3002\n\n#X_test['%s_count'%col] = X_test[col].map(summary)\n\n#X_train.latest_salemonth_count.head(13)","4873d015":"X_train.head()","92890178":"# \u305d\u306e\u4ed6\u306b\u3082\u8272\u3005\u3084\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3082\u3046\u4e00\u62ec\u3057\u3066\u30a8\u30a4\u30e4\u3067Count Encoding\u3057\u3066\u3057\u307e\u3044\u307e\u3059\ncats = []\n\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \nce = CountEncoder(cols=cats)\n\nX_train = ce.fit_transform(X_train)\nX_test = ce.transform(X_test)","aa8add93":"# \uff15\u5206\u5272\u4ea4\u5dee\u691c\u5b9a\u3067\u4e88\u6e2c\u30b9\u30b3\u30a2\u3092\u898b\u7a4d\u3082\u3063\u3066\u307f\u307e\u3057\u3087\u3046\nscores = []\n\n# 2021-10-20 updated: 5 split to 4\ncv = KFold(n_splits=4, random_state=71, shuffle=True)\n# cv = KFold(n_splits=5, random_state=71, shuffle=True)\n\nfor i, (train_ix, val_ix) in tqdm(enumerate(cv.split(X_train, y_train))):\n    X_train_, y_train_ = X_train.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, y_val = X_train.iloc[val_ix], y_train.iloc[val_ix]\n\n#   2021-10-13 updated\n#     model = XGBRegressor(n_estimators=9999, learning_rate=0.05, random_state=71)\n    model = LGBMRegressor(n_estimators=9999, learning_rate=0.05, random_state=71, objective='mae')\n    model.fit(X_train_, y_train_, eval_set=[(X_val, y_val)], eval_metric='mae', early_stopping_rounds=30)\n    y_pred = model.predict(X_val)\n    score = mean_absolute_error(y_val, y_pred)\n    scores.append(score)\n    print('CV Score of Fold_%d is %f' % (i, score))","59a46240":"# \u5e73\u5747\u30b9\u30b3\u30a2\u3092\u7b97\u51fa\nnp.array(scores).mean()","4fc84299":"# \u3067\u306f\u3001\u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3066\u307f\u307e\u3057\u3087\u3046\n# \u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u6570\u306f\u5148\u307b\u3069\u306e\u6700\u9069\u5024\u3092\u7528\u3044\u3066\u307f\u307e\u3059\n\n# \u3053\u3053\u3082\u5c11\u3057\u3060\u3051\u5909\u3048\u307e\u3059\u3002\n# best_iter = model.best_iteration\nbest_iter = model.best_iteration_\n\n# 2021-10-13 updated\n# model = XGBRegressor(learning_rate=0.05, n_estimators=best_iter, random_state=71)\nmodel = LGBMRegressor(learning_rate=0.05, n_estimators=best_iter, random_state=71, objective='mae')\nmodel.fit(X_train, y_train)","7821ebc1":"# \u3044\u3088\u3044\u3088\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3057\u307e\u3059\ny_pred_test = model.predict(X_test)\ny_pred_test","adc083d1":"# \u63d0\u51fa\u7528\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u3057\u307e\u3059\u3002\nsubmission = pd.read_csv('\/kaggle\/input\/data-science-autumn-2021\/sample_submission.csv', index_col=0)\n# submission.latestPrice = y_pred_test\nsubmission.latestPrice = np.exp(y_pred_test) * 1.065 #\u4f4f\u5b85\u4e0d\u52d5\u7523\u4fa1\u683c\u306e\u5e74\u95938~12%\u306e\u4fa1\u683c\u4e0a\u6607\u30022021\u306e\u30c7\u30fc\u30bf\u306f\u5c11\u306a\u3044\u305f\u3081\u3001\u7c21\u6613\u7684\u306a\u51e6\u7406\u3092\u8ffd\u52a0","8f295329":"submission","e00f9f73":"# csv\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\nsubmission.to_csv('submission.csv')","6b1f2b21":"# feature importance \u306e\u30d7\u30ed\u30c3\u30c8\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(20, 30))\nimportances = pd.Series(model.feature_importances_, index = X_train.columns)\nimportances = importances.sort_values()\nimportances.plot(kind = \"barh\")\nplt.title(\"imporance in the xgboost Model\")\nplt.savefig('feature_importances-01.png')\nplt.show()","e5c10629":"###\u904b\u55b6\u306e\u592a\u53e4\u3055\u3093\u3001\u7f6e\u5869\u3055\u3093\u3001\u5c71\u672c\u5148\u751f\u3001\u8a98\u3063\u3066\u3044\u305f\u3060\u3044\u305f\u5927\u6b66\u3055\u3093\u3001\u53c2\u52a0\u8005\u306e\u7686\u69d8\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n\u534a\u5e74\u307b\u3069\u524d\u306b\u306fkaggle\u306e\u5b58\u5728\u3059\u3089\u77e5\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3001\u307e\u305f\u4e00\u4eba\u3067\u306f\u306a\u304b\u306a\u304b\u6700\u521d\u306e\u4e00\u6b69\u304c\u96e3\u3057\u3044\u3068\u601d\u3044\u307e\u3059\n\n\u3053\u308c\u304c\u7686\u3055\u3093\u306e\u304a\u304b\u3052\u3067\u8e0f\u307f\u51fa\u305b\u3001\u7d50\u679c\u5927\u5909\u9762\u767d\u304f\u53d6\u308a\u7d44\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u305f\u3060kaggle\u521d\u53c2\u52a0\u3067\u3088\u304f\u308f\u304b\u3089\u305a\u308d\u304f\u306b\u691c\u8a3c\u3082\u305b\u305a\u3001\u306a\u3093\u304b\u3088\u304f\u308f\u304b\u3089\u3093\u3051\u3069\u30b9\u30b3\u30a2\u304c\u4e0a\u304c\u3063\u305f\u30e4\u30c3\u30bf\u30fc\n\n\u6c17\u5473\u3067\u3057\u305f\u306e\u3067\u3001\u305d\u3046\u306a\u3089\u306a\u3044\u69d8\u306b\u4f55\u304b\u3092\u8eab\u306b\u3064\u3051\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\n\n### CV\u65705->4\u306b\u5909\u66f4\uff3f\u5f8c\u51e6\u7406\u8ffd\u52a0\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d9\u30fc\u30b9\u306b\u3057\u3066\u3044\u307e\u3059\n\n\u3084\u3063\u305f\u3053\u3068\n\n1.discription\u3088\u308a\u3001\u7279\u5b9a\u306e\u983b\u51fa\u5358\u8a9e\u304c\u3042\u308c\u3070\u65b0\u305f\u306a\u30bb\u30eb\u306btrue\u3092\u51fa\u3059\uff08\u30d7\u30fc\u30eb\u3068\u304b\u3001prime,luxury\u306a\u3069\u9ad8\u7d1a\u305d\u3046\u306a\u5358\u8a9e\uff09\n \n  2.latestPriceSource\u3088\u308a\u3001\u7279\u5b9a\u5358\u8a9e\u304c\u3042\u308c\u30701.\u3068\u540c\u69d8\u306btrue\u3092\u51fa\u3059 \n  \n  3.city\u3088\u308a\u3001\u7279\u5b9a\u5358\u8a9e\u304c\u3042\u308c\u30701.\u3068\u540c\u69d8\u306btrue\u3092\u51fa\u3059\n  \n  4.\u7def\u5ea6\u3001\u7d4c\u5ea6\u3092\uff19\u3064\u306e\u30a8\u30ea\u30a2\u306b\u5206\u3051\u3001\u305d\u308c\u305e\u308c\u306e\u30a8\u30ea\u30a2\u306e\u30bb\u30eb\u3092\u8ffd\u52a0\n  \n  5.\u6577\u5730\u9762\u7a4d\u3001\u5efa\u7269\u9762\u7a4d\u306e\u5927\u304d\u3044\u3082\u306e\u306f\u3001\u65b0\u305f\u306a\u30bb\u30eb\u306btrue\u3092\u51fa\u3059\uff08\u5927\u304d\u304b\u3063\u305f\u3089\u5b89\u304f\u306a\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u4e88\u6e2c\uff09\n  \n  6.\u53cd\u5247\u307d\u3044\u3067\u3059\u304c\u3001\u6700\u5f8c\u306e\u5f8c\u51e6\u7406\u306e1.1\u500d\u3092\u5909\u66f4\u3057\u30b9\u30b3\u30a2\u304c\u4e0a\u304c\u308b\u6570\u5024\u306b\u3057\u307e\u3057\u305f\u3000\uff08\u6700\u7d42\u7684\u306b1.065\u306b\u5909\u66f4\uff09\n  \n  7.zestmate\u7279\u5fb4\u91cf\u8ffd\u52a0\n  \n  \u4ee5\u4e0a\n  \n  \n\n\n\n\n","576e5273":"# 2021-11-8 \u5f8c\u51e6\u7406\u8ffd\u52a0"}}