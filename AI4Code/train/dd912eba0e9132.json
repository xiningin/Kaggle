{"cell_type":{"4ec8a7f6":"code","27e15360":"code","22bb4dd2":"code","1f4a34f7":"code","d4626b53":"code","a8bae04f":"code","83d029bd":"code","9a311b2b":"code","2908ef1a":"code","846ed74b":"code","6ecdb1ac":"code","3653887c":"code","3d9badf4":"code","028ec6c6":"code","fede84ec":"code","4bf9ac65":"code","dc8b84a0":"code","ebe0302c":"code","17496e7e":"code","6f4aebbb":"code","11a5bbea":"code","36d01726":"code","cb62b91f":"code","4c310cae":"code","ba8626fa":"code","cae7f195":"code","9a56b3f0":"code","fa0b9ffb":"code","da4ed2d8":"code","5e1eb51f":"code","c32900a9":"code","f53c86a6":"code","2d206a30":"code","5cb0edf2":"code","09a37f44":"code","334359af":"code","fb6a93ec":"code","6aa604e6":"code","0c092a3f":"code","72b179b4":"markdown","6705026f":"markdown","93fb2b0e":"markdown","4c2407e1":"markdown","45a0fb10":"markdown","131e8da5":"markdown","cbec73af":"markdown","634c8610":"markdown","103b9d5e":"markdown","fca99c57":"markdown","02ae1466":"markdown","11a72662":"markdown","42b4a5e7":"markdown","7b9f77a6":"markdown","c17be032":"markdown","09a09232":"markdown","1d4e2ce4":"markdown","636c004e":"markdown","df221679":"markdown","a4b7d6b6":"markdown","3ac05a1d":"markdown","d311dc30":"markdown","9a0d46db":"markdown","03f98bf6":"markdown","2784221a":"markdown","39384c3e":"markdown","7acea87a":"markdown","0868f42a":"markdown","56fba7f1":"markdown","f9eed72c":"markdown","c0703616":"markdown","a3e3ad37":"markdown","0c48ff62":"markdown","77a0d5b0":"markdown","ce10db40":"markdown","0b181150":"markdown","2bec6e16":"markdown","afb23cd0":"markdown","4c387dc3":"markdown","9eaba5b1":"markdown","52f61252":"markdown","d780f12a":"markdown","bbbbd469":"markdown","ff1ebe14":"markdown","f8452a27":"markdown"},"source":{"4ec8a7f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","27e15360":"import numpy as np\nimport pandas as pd","22bb4dd2":"df = pd.read_csv('..\/input\/mlcourse\/telecom_churn.csv')\ndf.head()","1f4a34f7":"df.shape","d4626b53":"df.columns","a8bae04f":"df.info()","83d029bd":"df['Churn'] = df['Churn'].astype('int64')","9a311b2b":"df.describe()","2908ef1a":"df.describe(include=['object','bool'])","846ed74b":"df['Churn'].value_counts()","6ecdb1ac":"df['Churn'].value_counts(normalize=True) #percentages of 0 and 1","3653887c":"df.sort_values(by='Total day charge', ascending=False).head()","3d9badf4":"df.sort_values(by=['Churn','Total day charge'],ascending=[True,False]).head()","028ec6c6":"df['Churn'].mean()","fede84ec":"df[df['Churn'] == 1].mean()","4bf9ac65":"df[df['Churn'] == 1]['Total day minutes'].mean()","dc8b84a0":"df[(df['Churn'] == 0) & (df['International plan'] == 'No')]['Total intl minutes'].max()","ebe0302c":"df.loc[0:5, 'State':'Area code']","17496e7e":"df.iloc[0:5,0:3]","6f4aebbb":"df[-1:]","11a5bbea":"df.apply(np.max)","36d01726":"df[df['State'].apply(lambda state: state[0] == 'W')].head()","cb62b91f":"d = {'No': False, 'Yes' : True}\ndf['International plan'] = df['International plan'].map(d)\ndf.head()","4c310cae":"df = df.replace({'Voice mail plan':d})\ndf.head()","ba8626fa":"columns_to_show = ['Total day minutes','Total eve minutes','Total night minutes']\n\ndf.groupby(['Churn'])[columns_to_show].describe(percentiles=[])","cae7f195":"pd.crosstab(df['Churn'], df['International plan'])","9a56b3f0":"pd.crosstab(df['Churn'], df['Voice mail plan'], normalize=True)","fa0b9ffb":"df.pivot_table(['Total day calls','Total eve calls','Total night calls'],['Area code'], aggfunc='mean')","da4ed2d8":"total_calls = df['Total day calls'] + df['Total eve calls'] + \\\n              df['Total night calls'] + df['Total intl calls']\ndf.insert(loc=len(df.columns), column='Total calls', value=total_calls)\n# loc parameter is the number of columns after which to insert the series object \n# we set it to len(df.columns) to paste it at the very end of the dataframe\ndf.head()","5e1eb51f":"df['Total charge'] = df['Total day charge'] + df['Total eve charge'] + \\\n                     df['Total night charge'] + df['Total intl charge']\ndf.head()","c32900a9":"# get rid of just created columns\ndf.drop(['Total charge','Total calls'],axis=1,inplace=True)\n# and here's how you can delete rows\ndf.drop([1,2]).head()","f53c86a6":"pd.crosstab(df['Churn'], df['International plan'],margins=True)","2d206a30":"# some imports tp set up plotting\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# pip install seaborn\nimport seaborn as sns\n# Graphics in retina format are more sharp and Legible\n%config InlineBackend.figure_format = 'retina'","5cb0edf2":"sns.countplot(x='International plan',hue='Churn', data=df)","09a37f44":"pd.crosstab(df['Churn'],df['Customer service calls'], margins=True)","334359af":"sns.countplot(x='Customer service calls',hue='Churn',data=df)","fb6a93ec":"df['Many_service_calls'] = (df['Customer service calls'] > 3).astype('int')\n\npd.crosstab(df['Many_service_calls'], df['Churn'], margins=True)","6aa604e6":"sns.countplot(x='Many_service_calls',hue='Churn',data=df)","0c092a3f":"pd.crosstab(df['Many_service_calls'] & df['International plan'], df['Churn'])","72b179b4":"The main data structures in `Pandas` are implemented with **Series** and **DataFrame** classes. The former is one-dimensional indexed array of some fixed data type. The latter is a two-dimensional data structure- a table - where each column contains data of the same type. You can see it as dictionary of `Series` instances. `DataFrame` are great for representing real data: rows correspond to instances (examples, observations, etc.), and columns corresponf to features of these instances.","6705026f":"By default, Pandas displays 20 columns and 60 rows, So, if your DataFrame is bigger, use the `set_option` function as shown in the example below.","93fb2b0e":"\nLet's have a look at data dimensionality, feature names, and feature types.","4c2407e1":"We can see that most of the users are loyal and do not use additional services (International Plan\/Voice mail).\nThis will resemble **Pivot tables** to those familiar with Excel. And, of course, pivot tables are implemented in Pandas: the `pivot_table` method takes the following parameters:\n* `values` - a list of variables to calculate statistics for,\n* `index` - a list of variables to group data by,\n* `arrfunc` - what statistics we need to calculate for groups, ex. sum, mean, max, min or something else.\nLet's take a look at the average number of day, evening, and night calls by area code:","45a0fb10":"`bool`, `int64`, `float64` and `object` are the data types of out features. We can see that one feature is logical(`bool`), 3 features are of type `object`, and 16 features are numeric. With this same method, we can easily see, if there are any missing values. Here, there are none because each column contains 3333 observations, the same number of rows we saw before with `shape`.\n","131e8da5":"If we need the first or the last line of the data frame, we can use the `df[:1]` or `df[-1]`","cbec73af":"Let's construct another contingency table that related churn with both International plan and freshly created Many_service_calls.","634c8610":"### Summary tables\nSuppose we want to see how the observations in our sample are distributed in the context of two variables- `Churn` and `International plan`. To do so, we can build a **contingency table** using the `crosstab` method:","103b9d5e":"Let's use it to answer the question:","fca99c57":"For categorical (type `object`) and boolean (type `bool`) features we can use the `value_counts` method. Let's have a look at the distribution of `Churn`:","02ae1466":"\n**What are average values of numerical features for churned users?**","11a72662":"**How much time (on average) do churned users spend on the phone during daytime?**","42b4a5e7":"The `map` method can be used to **replace values in a column** by possing a dictionary of the form `{old_value: new_value}` as its arguent:","7b9f77a6":"In the first case below, we say \"give us the values of the rows with index from 0 to 5(inclusive) and columns labeled from State to Area code (inclusive)\". In the second case, we say \"give us the values of the fisrt five rows in the first three columns\"(as in a typical Python slice: the maximal value is not included).","c17be032":"We can also sort by multiple columns:","09a09232":"14.5% is actually quite bad for a company; such a churn rate can make the company go bankrupt.\n**Boolean indexing** with one column is also very convenient. The syntax is `df[P(df['Name'])]`, result of such indexing is the DataFrane consisting only of rows that satisfy the `P` condiction on the `Name` column.","1d4e2ce4":"We see that, with *international Plan*, the churn rate is much higher, which is an interesting observation! Perhaps large and poorly controlled expenses with international calls are very conflict-prone and lead to dissatisfaction among the telecom operator's customers.","636c004e":"\nWe can **change the column type** with the `astype` method. Let's apply this method to the `Churn` feature to convert it into `int64`","df221679":"2850 users of 3333 are loyal; their `Churn` value is `0`. To calculate fractions, pass `normalize=True` to the `value_counts` function.","a4b7d6b6":"### Sorting \n A DataFrame can be sorted by the value of one of the variables (i.e columns). For example, we can sort by Total day charge (use `ascending=False` to sort in descending order):","3ac05a1d":"The `describe` method shows basic statistical characteristics of each numerical feature(`int64` and `float64` types): number of non-missing values, mean, standard deviation, range. median, and 0.25 and 0.75 quartiles.","d311dc30":"### 2. First attempt at predicting telecom churn\nLet's see how churn rate is related to the *International plan* feature. We'll do this using a `crosstab` contingency table and also through visual analysis with `Seaborn` (however, visual analysis will be covered more thoroughly in the next article).","9a0d46db":"DataFrames can be indexed by column name (label) or row name (index) or by the serial number of a row. The `loc` method is used for **indexing by name**, while `iloc()` is used for **indexing by number**.","03f98bf6":"Now let's add a binary feature to our DataFrame -`Customer service calls >3`. And once again, let's see how it relates to churn.","2784221a":"## Topic 1. Exploratory Data analysis with Pandas ","39384c3e":"### DataFrame Transformations\nLike many other things in Pandas, adding columns to a DataFrame is doable in many ways.\n For example, if we want to calculate the total number of calls for all users, let's create the `total_calls` Series and paste it into the DataFrame:\n ","7acea87a":"### Applying Functions to Cells, Columns and Rows\n**To apply functions to each column, use apply():**","0868f42a":"# Topic - Visual data analysis in Python\n## [Link](https:\/\/www.kaggle.com\/taruntiwarihp\/visual-data-analysis-in-python-20-mins)\n","56fba7f1":"**What is the maximum length of international calls among loyal users(Churn == 0) who do not have an international plan?**","f9eed72c":"The `apply` method can also be used to apply a function to each row. To do this, specify `axis=1` Lambda functions are very convenient in such scenarios. For example, if we need to select all states starting with W, we can do it like this:","c0703616":"Next, let's look at another important feature - Customer service calls. Let's also make a summary table and a picture","a3e3ad37":"To delete columns or rows, use the `drop` method, passing the required indexed and the `axis` parameter(`1` if you delete columns, and nothing or `0` if you delete rows). The `inplace` argument teels whether to change the original DataFrame. With `inplace=False`, the `drop` columns, With `inplace=True`, it alters the DataFrame.","0c48ff62":"It is possible to add a column more easily without creating an intermediate Series instance:","77a0d5b0":"```python pd.set_option('display.max_columns',100) pd.set_option('display.max_rows',100)```\nRecall that each rows corresponds to one client, an **instance**, and columns are **features** of this instance.","ce10db40":"### Grouping \nIn general, grouping data in Pandas works as follows:\n    `df.groupby(by=grouping_columns)[columns_to_show].functions()`\n   1. First, the `groupby` method divides the `grouping_columns` by their values. They become a new index in the resulting dataframe.\n   2. Then, columns of interest are selected(`columns_to_show`), If `columns_to_show` is not included, all non groupby clauses will be included.\n   3. Finally, one or several functions are applied to the obtained groups per selected columns.\nHere is an example where we group the data accoring to the values of the `Churn` variable and display statistics of three columns in each group:\n","0b181150":"The same things can be done with the `replace` method:","2bec6e16":"### Indexing and retrieving data\nA DataFrame can be indexed in a few different ways.\nTo get a single column, you can use a `DataFrame['Name']` construction. Let's use this to answer a question about that column alone: **what is the proportion of churned users in our dataframe?**","afb23cd0":"Therefore, predicting that a customer is not loyal (Churn=1) in the case when the number of calls to the service center is greater than 3 and the International Plan is added (and predicting Churn=0 otherwise), we might expect an accuracy of 85.8% (we are mistaken only 464 + 9 times).","4c387dc3":"In order to see statistics on non-numerical features, one has to explicitly indicate data types of interest in the `include` parameter.","9eaba5b1":"We can use the `info()` method to output some general information about the dataframe:","52f61252":"Now let's try printing out column names using `columns`:","d780f12a":"### Demonstration of main Pandas methods\n   [Pandas](https:\/\/pandas.pydata.org\/) is a Python library that provides extensive means for data analysis. Data Scientist often work with data stored in table formats like `.csv`, `.tsv`, or `.xlsx`. Pandas makes it very convenient to load, process, and analyze such tabular data using SQL-like  queries. In conjuction with `Matplotlib` and `Seaborn`, `Pandas` provides a wide range of opportunities for visual analysis of tabular data.","bbbbd469":"From the output, we can see that the table contains 3333 rows and 20 columns.\n","ff1ebe14":"Although it's not so obvious from the summary table, it's easy to see from the above plot that the churn rate increases sharply from 4 customer service calls and above.","f8452a27":"We'll demonstrate the main methods in action by analyzing a dataset on the churn rate of telecom operator clients. Let's read the data(using `read_csv`), and take a look at the first 5 lines using the `head` methods:"}}