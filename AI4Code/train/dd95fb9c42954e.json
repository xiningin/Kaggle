{"cell_type":{"f69009ab":"code","98d85189":"code","b81ecc79":"code","01e819f0":"code","3f4b938e":"code","bd52ca01":"markdown","f8f910b5":"markdown","70eb27b0":"markdown","3f9f9b60":"markdown","05adf51f":"markdown"},"source":{"f69009ab":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier","98d85189":"CKD_dataset = pd.read_csv(\"..\/input\/kidney-disease\/kidney_disease.csv\", header=0, na_values=\"?\")\nCKD_dataset.head(10)","b81ecc79":"CKD_dataset.info()\nCKD_dataset.columns\nCKD_dataset.describe()\nCKD_dataset.shape\nCKD_dataset.head().T","01e819f0":"cols_names = {\"bp\": \"blood_pressure\",\n              \"sg\": \"specific_gravity\",\n              \"al\": \"albumin\",\n              \"su\": \"sugar\",\n              \"rbc\": \"red_blood_cells\",\n              \"pc\": \"pus_cell\",\n              \"pcc\": \"pus_cell_clumps\",\n              \"ba\": \"bacteria\",\n              \"bgr\": \"blood_glucose_random\",\n              \"bu\": \"blood_urea\",\n              \"sc\": \"serum_creatinine\",\n              \"sod\": \"sodium\",\n              \"pot\": \"potassium\",\n              \"hemo\": \"haemoglobin\",\n              \"pcv\": \"packed_cell_volume\",\n              \"wc\": \"white_blood_cell_count\",\n              \"rc\": \"red_blood_cell_count\",\n              \"htn\": \"hypertension\",\n              \"dm\": \"diabetes_mellitus\",\n              \"cad\": \"coronary_artery_disease\",\n              \"appet\": \"appetite\",\n              \"pe\": \"pedal_edema\",\n              \"ane\": \"anemia\"}\n\nCKD_dataset.rename(columns=cols_names, inplace=True)\nprint(f\"\\nSo we have {CKD_dataset.shape[1]} columns and {CKD_dataset.shape[0]} instances\")\n\n# Change to Numerical Dtyp\nCKD_dataset['red_blood_cell_count'] = pd.to_numeric(CKD_dataset['red_blood_cell_count'], errors='coerce')\nCKD_dataset['packed_cell_volume'] = pd.to_numeric(CKD_dataset['packed_cell_volume'], errors='coerce')\nCKD_dataset['white_blood_cell_count'] = pd.to_numeric(CKD_dataset['white_blood_cell_count'], errors='coerce')\n\n# Drop id Column as it is seems to be an unique identifier for each row\nCKD_dataset.drop([\"id\"], axis=1, inplace=True)\n\n# Checking missing values\nCKD_dataset.isnull().sum().sort_values(ascending=False)\n\n# Replace incorrect values\nCKD_dataset['diabetes_mellitus'] = CKD_dataset['diabetes_mellitus'].replace(\n    to_replace={'\\tno': 'no', '\\tyes': 'yes', ' yes': 'yes'})\nCKD_dataset['coronary_artery_disease'] = CKD_dataset['coronary_artery_disease'].replace(to_replace='\\tno', value='no')\nCKD_dataset['classification'] = CKD_dataset['classification'].replace(to_replace='ckd\\t', value='ckd')\n\n# Convert nominal values to binary values\nCKD_dataset.replace(\"?\", np.NaN, inplace=True)\nconv_value = {\"red_blood_cells\": {\"normal\": 1, \"abnormal\": 0},\n              \"pus_cell\": {\"normal\": 1, \"abnormal\": 0},\n              \"pus_cell_clumps\": {\"present\": 1, \"notpresent\": 0},\n              \"bacteria\": {\"present\": 1, \"notpresent\": 0},\n              \"hypertension\": {\"yes\": 1, \"no\": 0},\n              \"diabetes_mellitus\": {\"yes\": 1, \"no\": 0},\n              \"coronary_artery_disease\": {\"yes\": 1, \"no\": 0},\n              \"appetite\": {\"good\": 1, \"poor\": 0},\n              \"pedal_edema\": {\"yes\": 1, \"no\": 0},\n              \"anemia\": {\"yes\": 1, \"no\": 0},\n              \"classification\": {\"ckd\": 1, \"notckd\": 0}}\nCKD_dataset.replace(conv_value, inplace=True)\n\n# Fill null values with mean value of the respective column\nCKD_dataset.fillna(round(CKD_dataset.mean(), 2), inplace=True)\n\n# Save the final data cleaning\nCKD_dataset.to_csv(\"kidney_disease_final.csv\", sep=',', index=False)","3f4b938e":"# Classifies\n\n\ndef import_data():\n    kidney_disease_dataset = pd.read_csv('kidney_disease_final.csv', sep=',', header=0)\n\n    # Printing the dataset shape\n    print(\"Dataset Lenght: \", len(kidney_disease_dataset))\n    print(\"Dataset Shape: \", kidney_disease_dataset.shape)\n\n    # Printing the dataset observations\n    return kidney_disease_dataset\n\n\n# Split Training\/Testing Data\n\n\ndef split_dataset(kidney_disease_dataset):\n    # Seperating the target variable\n    X = kidney_disease_dataset.values[:, 0:24]\n    Y = kidney_disease_dataset.values[:, -1]\n\n    # Splitting the dataset into train and test\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, Y, test_size=0.3, random_state=100)\n\n    return X, Y, X_train, X_test, y_train, y_test\n\n\ndef train_using_gini(X_train, X_test, y_train):\n    # Creating the classifier object\n    clf_gini = DecisionTreeClassifier(criterion=\"gini\",\n                                      random_state=100, max_depth=3, min_samples_leaf=5)\n    # Performing training\n    clf_gini.fit(X_train, y_train)\n\n    return clf_gini\n\n\ndef train_using_rfc(X_train, X_test, y_train):\n    # Creating the classifier object\n    rfc = RandomForestClassifier(random_state=100)\n    # Performing training\n    rfc.fit(X_train, y_train)\n\n    return rfc\n\n\ndef train_using_knn(X_train, X_test, y_train):\n    # Creating the classifier object\n    knn = KNeighborsClassifier(n_neighbors=1)\n    # Performing training\n    knn.fit(X_train, y_train)\n\n    return knn\n\n\n# Predictions\ndef prediction(X_test, clf_object):\n    # Predicton on test with giniIndex\n    y_pred = clf_object.predict(X_test)\n    return y_pred\n\n\n# Accuracy\ndef cal_accuracy(y_test, y_pred):\n    print(\"Confusion Matrix: \\n\",\n          confusion_matrix(y_test, y_pred))\n\n    print(\"Accuracy : \",\n          accuracy_score(y_test, y_pred) * 100)\n\n    print(\"Report : \\n\",\n          classification_report(y_test, y_pred))\n\n\n# Main code\ndef main():\n    # Building Phase\n    data = import_data()\n    X, Y, X_train, X_test, y_train, y_test = split_dataset(data)\n\n    # Operational Phase\n    print(\"\\nResults Using Gini Index:\")\n    clf_gini = train_using_gini(X_train, X_test, y_train)\n    # Prediction using gini\n    y_pred_gini = prediction(X_test, clf_gini)\n    cal_accuracy(y_test, y_pred_gini)\n\n    # Operational Phase\n    print(\"Results Using RandomForestClassifier:\")\n    rfc = train_using_rfc(X_train, X_test, y_train)\n    # Prediction using rfc\n    y_pred_rfc = prediction(X_test, rfc)\n    cal_accuracy(y_test, y_pred_rfc)\n\n   # Operational Phase\n    print(\"Results Using KNeighborsClassifier:\")\n    knn = train_using_knn(X_train, X_test, y_train)\n    # Prediction using knn\n    y_pred_knn = prediction(X_test, knn)\n    cal_accuracy(y_test, y_pred_knn)\n\n\n# Calling main function\nif __name__ == \"__main__\":\n    main()","bd52ca01":"## Preprocessing of data for training a classifier","f8f910b5":"## Cleaning of data for training a classifier","70eb27b0":"## Load files","3f9f9b60":"## Classifiers","05adf51f":"## Load Modules and helper functions"}}