{"cell_type":{"004c2990":"code","4c313c62":"code","8ccab3d6":"code","faa86359":"code","21cc116d":"code","e9f63ec2":"code","aba68ddd":"code","8067403c":"code","cc657c28":"code","668ea8e8":"code","03931f62":"code","44e6c33d":"code","927f5eb8":"code","80b58d01":"code","3224b939":"code","694655b1":"code","34042534":"code","8323f2bd":"markdown","c5c90ff4":"markdown","64e97a70":"markdown","fbc51f8e":"markdown","dc499448":"markdown","f4a0c175":"markdown","ef0c6d1b":"markdown","e245657b":"markdown","ad4b1680":"markdown","17e6a53f":"markdown"},"source":{"004c2990":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4c313c62":"import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pickle","8ccab3d6":"# Thanks for ROB MULLA's dataset and code so Let's load the data with parquet files\n# details can be found at https:\/\/www.kaggle.com\/robikscube\/fast-data-loading-and-low-mem-with-parquet-files\ntrain = pd.read_parquet('..\/input\/ubiquant-parquet\/train_low_mem.parquet')\ntrain.head(10)","faa86359":"train.isnull().any().sum()","21cc116d":"# Let's first take a look at the first 3 columns\nprint('The number of unique value in the first column here is {}.'.format(train.row_id.nunique()))\nprint('The number of unique value in the time_id column here is {}.'.format(train.time_id.nunique()))\nprint('The number of unique value in the investment_id column here is {}.'.format(train.investment_id.nunique()))","e9f63ec2":"plt.figure(figsize = (20,10))\ntime_id = pd.DataFrame(train['time_id'].value_counts())\ntime_id = time_id.rename(columns ={'time_id': 'counts'})\nsns.barplot(data = time_id, y = 'counts', x = time_id.index)\ntime_id","aba68ddd":"# max investment_id for specific time_id\ntrain.groupby(\"time_id\").investment_id.max().value_counts()","8067403c":"plt.figure(figsize = (20,10))\ninvestment_id = pd.DataFrame(train['investment_id'].value_counts())\ninvestment_id = investment_id.rename(columns ={'investment_id': 'counts'})\nsns.barplot(data = investment_id, x = investment_id.index, y = investment_id.counts)","cc657c28":"# max time_id for specific investment_id\ntrain.groupby(\"investment_id\").time_id.max().value_counts()","668ea8e8":"print(train.groupby('investment_id').time_id.max().value_counts().index.max())\nprint(train.groupby('investment_id').time_id.max().value_counts().index.min())","03931f62":"from sklearn.feature_selection import mutual_info_regression\ndef make_mi_score_real(X, y):\n    mi_scores = mutual_info_regression(X,y)\n    mi_scores = pd.Series(mi_scores, name = 'MI scores', index = X.columns)\n    mi_scores = mi_scores.sort_values(ascending = False)\n    return mi_scores\ncolumn_for_regression  = []","44e6c33d":"for i in range(20):\n    traincopy = train.copy()\n    y = traincopy.pop('target')[20000*i:20000*(i+1)]\n    y.dtype\n    y = y.astype(np.float64)\n    a = traincopy.iloc[20000*i:20000*(i+1)]\n    mi_scores_real = make_mi_score_real(a,y)\n    mi_scores_real.round(decimals=4)\n    for j in range(6):\n        column_for_regression.append(mi_scores_real.index[j])","927f5eb8":"print('The length of the list is {}'.format(len(column_for_regression)))\nprint('And then we convert it to set.')\ncolumn_for_regression.append('target')\ncolumn_for_regression.append('time_id')\ncolumn_for_regression.append('investment_id')\nb = list(set(column_for_regression))\nprint('The lenth of the set is {}'.format(len(b)))","80b58d01":"new_train = train.copy()[b]\ntarget = new_train.pop('target')","3224b939":"from sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nX_train, X_test, y_train, y_test = train_test_split(new_train, target, test_size=0.2, random_state=0)\nmodel = XGBRegressor(learning_rate=0.01,n_estimators=3500,\n                                     max_depth=3, min_child_weight=0,\n                                     gamma=0, subsample=0.7,\n                                     colsample_bytree=0.7,\n                                     objective='reg:linear', nthread=-1,\n                                     scale_pos_weight=1, seed=27,\n                                     reg_alpha=0.0001)\nmodel.fit(X_train, y_train, early_stopping_rounds=10, eval_set=[(X_test, y_test)])","694655b1":"print('all set')","34042534":"with open('model_lr.pickle', 'wb') as f:\n    pickle.dump(model, f)\nwith open('feature_names.pickle', 'wb') as f:\n    pickle.dump(b, f)","8323f2bd":"# Analysis and feature engineering","c5c90ff4":"**Notice that, here, each count of time_id means that there existed a investment instruction\nIt shows that for small time id, it has a constant number of investment instruction, but it will reduce at some point, and then it keep going up after that time point.**","64e97a70":"# Missing values check","fbc51f8e":"To be continued","dc499448":"train.csv\n\n* row_id - A unique identifier for the row.\n* time_id - The ID code for the time the data was gathered. The time IDs are in order, but the real time between the time IDs is not constant and will likely be shorter for the final private test set than in the training set.\n* investment_id - The ID code for an investment. Not all investment have data in all time IDs.\n* target - The target.\n[f_0:f_299] - Anonymized features generated from market data.","f4a0c175":"Notice that 62 << 1219, we know that for some investments, it ended significantly earlier than others.","ef0c6d1b":"It can be easily found that there are significant amount of repeated value in the time_id and investment_id column, so let's dig deeper in that","e245657b":"all the value here are large so we omit this part","ad4b1680":"Great, there isn't any missing values here, and next we are going to dig some deeper information there. Here follows the description of the columns in the train.csv","17e6a53f":"# Import more library and load the data"}}