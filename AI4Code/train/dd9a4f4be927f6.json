{"cell_type":{"fbdba59d":"code","915787db":"markdown"},"source":{"fbdba59d":"import numpy as np\nimport pandas as pd\nfrom keras.optimizers import Adam ,RMSprop\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import  Sequential\nfrom keras.layers.core import  Lambda , Dense, Flatten, Dropout\nfrom keras.callbacks import EarlyStopping\nfrom keras.layers import BatchNormalization, Convolution2D , MaxPooling2D\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing import image\ntest=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntrain=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\n\nX_train = (train.iloc[:,1:].values).astype('float32')\ny_train = train.iloc[:,0].values.astype('int32')\ny_train= to_categorical(y_train)\nX_test = test.values.astype('float32')\nX_train = X_train.reshape(X_train.shape[0], 28, 28,1)\nX_test = X_test.reshape(X_test.shape[0], 28, 28,1)\nmean_px = X_train.mean().astype(np.float32)\nstd_px = X_train.std().astype(np.float32)\n\ndef standardize(x): \n    return (x-mean_px)\/std_px\n\nmodel = Sequential([\n        Lambda(standardize, input_shape=(28,28,1)),\n        Convolution2D(32,(3,3), activation='relu'),\n        BatchNormalization(),\n        Convolution2D(32,(3,3), activation='relu'),\n        BatchNormalization(),\n        Convolution2D(32,(5,5), activation='relu',padding='SAME'),\n        BatchNormalization(),\n        Dropout(0.4),\n        Convolution2D(64,(3,3), activation='relu'),\n        BatchNormalization(),\n        Convolution2D(64,(3,3), activation='relu'),\n        BatchNormalization(),\n        Convolution2D(64,(5,5), activation='relu',padding='SAME'),\n        BatchNormalization(),\n        Dropout(0.4),\n        Flatten(),\n        BatchNormalization(),\n        Dense(1024, activation='relu'),\n        BatchNormalization(),\n        Dense(512, activation='relu'),\n        BatchNormalization(),\n        Dense(10, activation='softmax')\n        ])\nmodel.compile(Adam(lr=1e-4), loss='categorical_crossentropy', metrics=['accuracy'])\ngen = image.ImageDataGenerator(\n        rotation_range=10,  \n        zoom_range = 0.10,  \n        width_shift_range=0.1, \n        height_shift_range=0.1)\nX = X_train\ny = y_train\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.10, random_state=42)\nbatches = gen.flow(X_train, y_train, batch_size=256)\nval_batches=gen.flow(X_val, y_val, batch_size=256)\nhistory=model.fit_generator(generator=batches, steps_per_epoch=len(batches), epochs=5, \n                    validation_data=val_batches, validation_steps=len(val_batches))\npredictions = model.predict_classes(X_test, verbose=0)\n\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})\nsubmissions.to_csv(\"submission.csv\", index=False, header=True)","915787db":"This kernel is used to show a kaggle public kernel area bug. More details see [link](https:\/\/www.kaggle.com\/product-feedback\/142959). NOTE: the error is showing on the plant pathology end(public kernel area), if you are at the digit recognizer end, please ignore this.\n"}}