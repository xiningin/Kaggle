{"cell_type":{"3d4f3fb5":"code","c4340462":"code","dc1c8fa1":"code","508e5304":"code","05efe3ed":"code","bfa65c3c":"code","70dd0ffb":"code","d4a3997b":"code","3200346a":"code","e74e944f":"code","57b24bee":"code","e1c5431f":"code","9970d3c4":"code","4d7ab50e":"code","ee8ee47d":"code","cf866188":"code","bdb3a72d":"code","fed32542":"code","dc763306":"code","5c6e2b51":"code","0b9ec30e":"code","0329f878":"markdown","51277819":"markdown","07ef0608":"markdown","9db6fbd6":"markdown","f7e5650c":"markdown","aabe9fae":"markdown","e610b4d5":"markdown","93629bfc":"markdown","f524c243":"markdown","249868cb":"markdown","ae74279d":"markdown"},"source":{"3d4f3fb5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4340462":"# import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go","dc1c8fa1":"# upload dataset\ndata= pd.read_csv(\"\/kaggle\/input\/data-analyst-jobs\/DataAnalyst.csv\")\n\n# dataset shape\nprint(data.shape)\n\ndata.head()","508e5304":"# check missing values\ndata.isnull().sum()","05efe3ed":"data.describe()","bfa65c3c":"# remove Unnamed:0 column\ndata= data.drop(columns= [\"Unnamed: 0\"], axis=1)","70dd0ffb":"# separating state name from Location column\nnew= data[\"Location\"].str.split(\", \", expand=True)\n\n# creating new column with the state name\ndata[\"state\"]= new[1]\ndata.drop(data.loc[data['state']==\"Arapahoe\"].index, inplace=True)","d4a3997b":"# create 2 columns for minimum salary and maximum salary\ndata[\"Salary Estimate\"]= data[\"Salary Estimate\"].str.rstrip(\"(Glassdoor est.)\")\ndf1= data[\"Salary Estimate\"].str.split(\"-\", expand=True)\n\n# minimum salary\ndata[\"minimum_salary\"]= df1[0]\ndata[\"minimum_salary\"] = data[\"minimum_salary\"].str.lstrip(\"$\")\ndata[\"minimum_salary\"] = data[\"minimum_salary\"].str.rstrip(\"K\")\n# data[\"minimum_salary ($)\"] = data[\"minimum_salary ($)\"].astype(\"str\").astype(\"int\")\ndata[\"minimum_salary\"] = pd.to_numeric(data[\"minimum_salary\"])\n\n# maximum salary\ndata[\"maximum_salary\"]= df1[1]\ndata[\"maximum_salary\"] = data[\"maximum_salary\"].str.lstrip(\"$\")\ndata[\"maximum_salary\"] = data[\"maximum_salary\"].str.rstrip(\"K\")\ndata[\"maximum_salary\"]= pd.to_numeric(data[\"maximum_salary\"])","3200346a":"from wordcloud import WordCloud, STOPWORDS\n\ntext= ', '.join(data['Job Description'])\n\nstopwords = set(STOPWORDS)\n\nwordcloud = WordCloud( background_color=\"black\").generate(text)\n\n\nplt.figure(figsize=[15,20])\nplt.title(\"skills a data analyst job demands\",size= 30)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","e74e944f":"job_title=data[\"Job Title\"].value_counts().nlargest(10)\njob_title_df= pd.DataFrame(job_title)\njob_title_df\n\nfig = px.bar(job_title_df, x=\"Job Title\", y=job_title_df.index, orientation='h',\n             color='Job Title',\n             labels= {\"job_title_df.index\": \"job title\",\n                       \"Job Title\": \"no. of jobs\"},\n             title= \"Number of jobs for job titles\",\n             height=500)\nfig.update_layout(title_x=0.5)\nfig.show()","57b24bee":"series= data[\"state\"].value_counts()\ndf1= pd.DataFrame(series).reset_index().rename(columns={\"index\": \"state\", \"state\": \"count\"})\ndf1\n\nfig = px.treemap(df1, path=['state'], values='count',color='count',color_discrete_sequence = px.colors.qualitative.Set1,\n                title=('States with Number of Jobs'))\nfig.update_layout(title_x=0.5)\nfig.show()","e1c5431f":"df= data.groupby(\"state\")[\"Location\"].value_counts()\ndf_= pd.DataFrame(df).rename(columns={\"Location\": \"count\"}).reset_index()\ndf_\nfig = px.treemap(df_, path=['state', 'Location'], values='count',color='count', \n                 color_continuous_scale='mint',\n                title=('States and Cities with Number of Jobs'))\nfig.update_layout(title_x=0.5)\n                \nfig.show()\n#  )","9970d3c4":"salary = data.groupby('Location')[['minimum_salary','maximum_salary']].mean().sort_values(['minimum_salary','maximum_salary'],\n                                                                                          ascending=False).head(20)\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x= salary.index, y= salary['minimum_salary'], name= 'Min Salary', marker= dict(color= 'pink')))\nfig.add_trace(go.Bar(x= salary.index, y= salary['maximum_salary'], name= 'Max Salary', marker= dict(color= 'grey')))\nfig.update_xaxes(ticks=\"outside\", tickwidth=2, tickcolor='crimson', ticklen=12)\nfig.update_layout(title= 'Job Location with their Salary Range', barmode= 'stack',title_x=0.5)\n\nfig.show()","4d7ab50e":"data[\"Sector\"].unique()","ee8ee47d":"# replacing -1 to \"unknown\" in Sector\ndata[\"Sector\"].replace({\"-1\": \"unknown\"}, inplace=True)","cf866188":"sector= data['Sector'].value_counts().nlargest(n=10)\nsector_df= pd.DataFrame(sector).reset_index().rename(columns= {\"index\":\"sector\", \"Sector\":\"job count\"})\n\nfig = px.pie(sector_df, \n       values = \"job count\", \n       names = \"sector\",\n       labels= \"sector\",       \n       title=\"Top 10 Sectors with number of jobs\", \n       color=sector.values,\n       color_discrete_sequence=px.colors.qualitative.Prism)\n\nfig.update_traces(opacity=0.7,\n                  marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5, textposition='inside', textinfo='percent+label')\n\nfig.update_layout(title_x=0.45)\nfig.show()","bdb3a72d":"salary = data.groupby('Sector')[['minimum_salary','maximum_salary']].mean().sort_values(['minimum_salary','maximum_salary'],\n                                                                                          ascending=False)\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x = salary.index, y = salary['minimum_salary'], name = 'Min Salary', marker = dict(color = 'pink')))\nfig.add_trace(go.Bar(x = salary.index, y = salary['maximum_salary'], name = 'Max Salary', marker = dict(color = 'grey')))\nfig.update_xaxes(ticks=\"outside\", tickwidth=2, tickcolor='crimson', ticklen=12)\nfig.update_layout(title = 'Sectors with their Salary Range', barmode = 'stack',title_x=0.5)\n\nfig.show()","fed32542":"sns.pairplot(data[[\"Rating\", \"minimum_salary\", \"maximum_salary\"]])","dc763306":"# replacing -1 to \"unknown\" in Size\ndata[\"Size\"].replace({\"-1\": \"Unknown\"}, inplace=True)\ndata[\"Size\"].unique()","5c6e2b51":"# removing data for which Employee Size is not given(unknown)\ndf= data.drop(data.loc[data['Size']==\"Unknown\"].index)\n\ndf_size=df.groupby(\"Size\")[\"Company Name\"].count()\ndf_size\n\nfig = px.bar(y=df_size.index,\n       x=df_size.values,\n       orientation='h',\n       color=df_size.index,\n       text=df_size.values,\n       color_discrete_sequence= px.colors.qualitative.Bold)\n\nfig.update_traces(texttemplate='%{text:.2s}', \n                  textposition='outside', \n                  marker_line_color='rgb(8,48,107)', \n                  marker_line_width=1.5, \n                  opacity=0.7)\n\nfig.update_layout(width=800, \n                  showlegend=False, \n                  xaxis_title=\"No. of companies\",\n                  yaxis_title=\"Company Size\",\n                  title=\"Company Size and their Company count\", title_x=0.5)\nfig.show()","0b9ec30e":"series2= data.groupby(\"Size\")[\"Company Name\"].value_counts()\ndf2= pd.DataFrame(series2).rename(columns={\"Company Name\": \"count\"}).reset_index()\n\n# removing data for which Employee Size is not given(unknown)\ndf2.drop(df2.loc[df2['Size']==\"Unknown\"].index, inplace=True)\n\n# removing data for which the number of job is only 1\ndf2.drop(df2.loc[df2['count'] ==1].index, inplace=True)\ndf2\n\nfig = px.treemap(df2, path=['Size', 'Company Name'], values='count',color='count', \n                 color_discrete_sequence = px.colors.qualitative.Set1,\n                title=('Companies with their Size and Job Counts'))\nfig.update_layout(title_x=0.5)\n                \nfig.show()","0329f878":"Data Analyst Job is all about **Experience, Data, Analysis, Ability, Team Work, Knowledge, Client** and lots more\n","51277819":"Most of the jobs in the marktet are for `Data Analyst`,`Senior Data Analyst`,`Junior Data Analyst`,`Business Data Analyst`.","07ef0608":"### How jobs are distributed among the sectors and their salary estimation ","9db6fbd6":"### Now let's find out if Ratings are correlated with the salaries.","f7e5650c":"There is no correlation between Ratings given and the Salary","aabe9fae":"#### Sectors like `Biotech & Pharmaceuticals`, `Arts, Entertainment & Recreation`, `Accounting & Legal`, `Real Estate`, `Travel & Tourism` stands in top 5 for salary estimation but not in Number of jobs. ","e610b4d5":"### What effect a location have on job opportunities and how salaries are estimated based on job location","93629bfc":"# Cleaning dataset","f524c243":"### Creating separate columns for `State`, `Minimum Salary` and `Maximum Salary`","249868cb":"### Have a look at the size of each company and their number of jobs","ae74279d":"### First of all let's see what skills the Data Analyst Job demands from the applicants."}}