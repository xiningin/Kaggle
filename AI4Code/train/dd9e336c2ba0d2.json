{"cell_type":{"f1879fce":"code","b37976c2":"code","b31b4eeb":"code","519f6788":"code","d0519c06":"code","c7db823a":"code","59bfff75":"code","aba7ba14":"code","d493ea8d":"code","dc67e8bd":"code","bb1200c4":"code","06d35400":"code","d6d63804":"code","135e7c6f":"code","2f205974":"code","c598d14e":"code","f97c368e":"code","b8ff454c":"code","c276e2aa":"code","f75ff8f4":"code","bf3b6452":"code","cc28e748":"markdown","40e924fa":"markdown","eb93665e":"markdown","0f20a98d":"markdown","5477f8d4":"markdown","3414d77e":"markdown","3bdfa5fb":"markdown","7c57746a":"markdown","45c8b28c":"markdown","330a9613":"markdown","a59c07f0":"markdown","89764944":"markdown","6f46c8ab":"markdown"},"source":{"f1879fce":"!python ..\/input\/mlcomp\/mlcomp\/mlcomp\/setup.py","b37976c2":"!mkdir -p \/tmp\/pip\/cache\/\n!cp ..\/input\/segmentation-models-zip-003\/efficientnet_pytorch-0.4.0.xyz \/tmp\/pip\/cache\/efficientnet_pytorch-0.4.0.tar.gz\n!cp ..\/input\/segmentation-models-zip-003\/pretrainedmodels-0.7.4.xyz \/tmp\/pip\/cache\/pretrainedmodels-0.7.4.tar.gz\n!cp ..\/input\/segmentation-models-zip-003\/segmentation_models_pytorch-0.0.3.xyz \/tmp\/pip\/cache\/segmentation_models_pytorch-0.0.3.tar.gz","b31b4eeb":"!pip install --no-index --find-links \/tmp\/pip\/cache\/ efficientnet-pytorch\n!pip install --no-index --find-links \/tmp\/pip\/cache\/ segmentation-models-pytorch","519f6788":"!mkdir -p \/tmp\/.cache\/torch\/checkpoints\/\n!cp ..\/input\/efficientnet-pytorch-b0-b7\/efficientnet-b0-355c32eb.pth \/tmp\/.cache\/torch\/checkpoints\/\n!cp ..\/input\/efficientnet-pytorch-b0-b7\/efficientnet-b4-6ed6700e.pth \/tmp\/.cache\/torch\/checkpoints\/\n!cp ..\/input\/efficientnet-pytorch-b0-b7\/efficientnet-b5-b6417697.pth \/tmp\/.cache\/torch\/checkpoints\/\n!cp ..\/input\/efficientnet-pytorch-b0-b7\/efficientnet-b7-dcc49843.pth \/tmp\/.cache\/torch\/checkpoints\/","d0519c06":"!pip install ..\/input\/pretrainedmodels\/pretrainedmodels-0.7.4\/pretrainedmodels-0.7.4\/ > \/dev\/null\npackage_path = '..\/input\/senetunetmodelcode'\n\nimport sys\nsys.path.append(package_path)","c7db823a":"import os\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cv2\nimport albumentations as A\nimport pandas as pd\nfrom tqdm import tqdm_notebook\n\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import DataLoader\nfrom torch.jit import load\nimport torch.utils.data as data\n\nfrom mlcomp.contrib.transform.albumentations import ChannelTranspose\nfrom mlcomp.contrib.dataset.classify import ImageDataset\nfrom mlcomp.contrib.transform.rle import rle2mask, mask2rle\nfrom mlcomp.contrib.transform.tta import TtaWrap\n\nimport segmentation_models_pytorch as smp\nfrom senet_unet_model_code import Unet\nfrom efficientnet_pytorch import EfficientNet","59bfff75":"unet_efficientnet = smp.Unet(\"efficientnet-b5\", encoder_weights=\"imagenet\", classes=4, activation=\"sigmoid\").cuda()\nckpt_path = \"..\/input\/unet-efficientnet-baseline\/unet_efficientnet_model.pth\"\ndevice = torch.device(\"cuda\")\nunet_efficientnet.to(device)\nunet_efficientnet.eval()\nstate = torch.load(ckpt_path, map_location=lambda storage, loc: storage)\nunet_efficientnet.load_state_dict(state[\"state_dict\"])","aba7ba14":"ckpt_path = \"..\/input\/senetmodels\/senext50_30_epochs_high_threshold.pth\"\ndevice = torch.device(\"cuda\")\nsenext50_30_epochs_high_threshold = Unet('se_resnext50_32x4d', encoder_weights=None, classes=4, activation=None).cuda()\nsenext50_30_epochs_high_threshold.to(device)\nsenext50_30_epochs_high_threshold.eval()\nstate = torch.load(ckpt_path, map_location=lambda storage, loc: storage)\nsenext50_30_epochs_high_threshold.load_state_dict(state[\"state_dict\"])","d493ea8d":"unet_se_resnext50_32x4d = \\\n    load('\/kaggle\/input\/severstalmodels\/unet_se_resnext50_32x4d.pth').cuda()\nunet_mobilenet2 = load('\/kaggle\/input\/severstalmodels\/unet_mobilenet2.pth').cuda()\nunet_resnet34 = load('\/kaggle\/input\/severstalmodels\/unet_resnet34.pth').cuda()","dc67e8bd":"clf_resnet34 = load('\/kaggle\/input\/severstalmodels\/resnet34_classify.pth').cuda()","bb1200c4":"ckpt_path = \"\/kaggle\/input\/pytorch-multi-label-classification\/efficientnet_b0_model.pth\"\ndevice = torch.device(\"cuda\")\nclf_efficientnet_b0 = EfficientNet.from_pretrained('efficientnet-b0', num_classes=4).cuda()\nclf_efficientnet_b0.to(device)\nclf_efficientnet_b0.eval()\nstate = torch.load(ckpt_path, map_location=lambda storage, loc: storage)\nclf_efficientnet_b0.load_state_dict(state[\"state_dict\"])","06d35400":"ckpt_path = \"\/kaggle\/input\/clf-efficientnet-b4\/efficientnet_b4_model.pth\"\ndevice = torch.device(\"cuda\")\nclf_efficientnet_b4 = EfficientNet.from_pretrained('efficientnet-b4', num_classes = 4).cuda()\nclf_efficientnet_b4.to(device)\nclf_efficientnet_b4.eval()\nstate = torch.load(ckpt_path, map_location=lambda storage, loc: storage)\nclf_efficientnet_b4.load_state_dict(state[\"state_dict\"])","d6d63804":"ckpt_path = \"\/kaggle\/input\/pytorch-multi-label-classification-effnet-b5\/efficientnet_b5_model.pth\"\ndevice = torch.device(\"cuda\")\nclf_efficientnet_b5 = EfficientNet.from_pretrained('efficientnet-b5', num_classes=4).cuda()\nclf_efficientnet_b5.to(device)\nclf_efficientnet_b5.eval()\nstate = torch.load(ckpt_path, map_location=lambda storage, loc: storage)\nclf_efficientnet_b5.load_state_dict(state[\"state_dict\"])","135e7c6f":"ckpt_path = \"\/kaggle\/input\/pytorch-multi-label-classification-effnet-b7\/efficientnet_b7_model.pth\"\ndevice = torch.device(\"cuda\")\nclf_efficientnet_b7 = EfficientNet.from_pretrained('efficientnet-b7', num_classes=4).cuda()\nclf_efficientnet_b7.to(device)\nclf_efficientnet_b7.eval()\nstate = torch.load(ckpt_path, map_location=lambda storage, loc: storage)\nclf_efficientnet_b7.load_state_dict(state[\"state_dict\"])","2f205974":"class Model:\n    def __init__(self, models):\n        self.models = models\n    \n    def __call__(self, x):\n        res = []\n        x = x.cuda()\n        with torch.no_grad():\n            for m in self.models:\n                res.append(m(x))\n        res = torch.stack(res)\n        return torch.mean(res, dim=0)\n\nmodel = Model([\n    unet_se_resnext50_32x4d,\n    unet_mobilenet2,\n    unet_resnet34,\n    unet_efficientnet,\n    senext50_30_epochs_high_threshold\n])\nmodel_clf = Model([\n    clf_efficientnet_b0,\n    clf_efficientnet_b4,\n    clf_efficientnet_b5,\n    clf_efficientnet_b7,\n    clf_resnet34\n])","c598d14e":"def create_transforms(additional):\n    res = list(additional)\n    # add necessary transformations\n    res.extend([\n        A.Normalize(\n            mean=(0.485, 0.456, 0.406), std=(0.230, 0.225, 0.223)\n        ),\n        ChannelTranspose()\n    ])\n    res = A.Compose(res)\n    return res\n\nimg_folder = '\/kaggle\/input\/severstal-steel-defect-detection\/test_images'\nbatch_size = 2\nnum_workers = 0\n\n# Different transforms for TTA wrapper\ntransforms = [\n    [],\n    [A.HorizontalFlip(p=1)]\n]\n\ntransforms = [create_transforms(t) for t in transforms]\ndatasets = [TtaWrap(ImageDataset(img_folder=img_folder, transforms=t), tfms=t) for t in transforms]\nloaders = [DataLoader(d, num_workers=num_workers, batch_size=batch_size, shuffle=False) for d in datasets]","f97c368e":"def close(mask):\n    \"\"\"\n    Parameters:\n        mask: Input mask.\n\n    Returns:\n        closing: Output mask.\n    \"\"\"\n\n    kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(5,5))\n    closing = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)\n    \n    return closing","b8ff454c":"thresholds = [0.5, 0.75, 0.5, 0.75]\nclf_thresholds = [0.5, 0.5, 0.75, 0.85]\nmin_area = [600, 1000, 1200, 2000]\n\nres = []\n# Iterate over all TTA loaders\ntotal = len(datasets[0])\/\/batch_size\nfor loaders_batch in tqdm_notebook(zip(*loaders), total=total):\n    preds = []\n    image_file = []\n    features_no_tta = None\n    for i, batch in enumerate(loaders_batch):\n        features = batch['features'].cuda()\n        p = torch.sigmoid(model(features))\n        # inverse operations for TTA\n        p = datasets[i].inverse(p)\n        preds.append(p)\n        image_file = batch['image_file']\n        if i == 0:\n            features_no_tta = features\n    \n    # TTA mean\n    preds = torch.stack(preds)\n    preds = torch.mean(preds, dim=0)\n    preds = preds.detach().cpu().numpy()\n    \n    clf_preds = torch.sigmoid(model_clf(features_no_tta)).detach().cpu().numpy()\n    \n    # Batch post processing\n    for p, clf_pred, file in zip(preds, clf_preds, image_file):\n        file = os.path.basename(file)\n        # Image postprocessing\n        for i in range(4):\n            p_channel = p[i]\n            imageid_classid = file+'_'+str(i+1)\n            p_channel = (p_channel>thresholds[i]).astype(np.uint8)\n            if p_channel.sum() < min_area[i]:\n                p_channel = np.zeros(p_channel.shape, dtype=p_channel.dtype)\n                \n            # Remove false positives with classifier\n            if clf_pred[i] <= clf_thresholds[i]:\n                p_channel = np.zeros(p_channel.shape, dtype=p_channel.dtype)\n            else:\n                p_channel = close(p_channel)   \n                \n            res.append({\n                'ImageId_ClassId': imageid_classid,\n                'EncodedPixels': mask2rle(p_channel)\n            })","c276e2aa":"df = pd.DataFrame(res)\ndf = df.fillna('')\ndf.to_csv('submission.csv', index=False)","f75ff8f4":"df['Image'] = df['ImageId_ClassId'].map(lambda x: x.split('_')[0])\ndf['Class'] = df['ImageId_ClassId'].map(lambda x: x.split('_')[1])\ndf['empty'] = df['EncodedPixels'].map(lambda x: not x)\ndf[df['empty'] == False]['Class'].value_counts()","bf3b6452":"%matplotlib inline\n\ndf = pd.read_csv('submission.csv')[:40]\ndf['Image'] = df['ImageId_ClassId'].map(lambda x: x.split('_')[0])\ndf['Class'] = df['ImageId_ClassId'].map(lambda x: x.split('_')[1])\n\nfor row in df.itertuples():\n    img_path = os.path.join(img_folder, row.Image)\n    img = cv2.imread(img_path)\n    mask = rle2mask(row.EncodedPixels, (1600, 256)) \\\n        if isinstance(row.EncodedPixels, str) else np.zeros((256, 1600))\n    if mask.sum() == 0:\n        continue\n    \n    fig, axes = plt.subplots(1, 2, figsize=(20, 60))\n    axes[0].imshow(img\/255)\n    axes[1].imshow(mask*60)\n    axes[0].set_title(row.Image)\n    axes[1].set_title(row.Class)\n    plt.show()","cc28e748":"As the competition does not allow commit with the kernel that uses internet connection, we use offline installation","40e924fa":"<a id=\"load_models\"><\/a>\n# Load models\n[Back to Table of Contents](#toc)","eb93665e":"<a id=\"toc\"><\/a>\n# Table of Contents\n1. [Install MLComp library (offline version)](#install_mlcomp_library)\n1. [Import required libraries](#import_required_libraries)\n1. [Load models](#load_models)\n  1. [Load segmentation models](#load_segmentation_models)\n  1. [Load classification models](#load_classification_models)\n1. [Define models' mean aggregator](#define_models_mean_aggregator)\n1. [Create TTA transforms, datasets, loaders](#create_tta_etc)\n1. [Save predictions](#save_predictions)\n1. [Draw histogram of predictions](#draw_histogram_of_predictions)","0f20a98d":"### Loaders' mean aggregator","5477f8d4":"<a id=\"install_mlcomp_library\"><\/a>\n# Install MLComp library (offline version)\n[Back to Table of Contents](#toc)","3414d77e":"<a id=\"import_required_libraries\"><\/a>\n# Import required libraries\n[Back to Table of Contents](#toc)","3bdfa5fb":"<a id=\"save_predictions\"><\/a>\n# Save predictions\n[Back to Table of Contents](#toc)","7c57746a":"<a id=\"draw_histogram_of_predictions\"><\/a>\n# Draw histogram of predictions\n[Back to Table of Contents](#toc)","45c8b28c":"### Visualization","330a9613":"<a id=\"define_models_mean_aggregator\"><\/a>\n# Define models' mean aggregator\n[Back to Table of Contents](#toc)","a59c07f0":"<a id=\"load_segmentation_models\"><\/a>\n## Load segmentation models\n[Back to Table of Contents](#toc)","89764944":"<a id=\"load_classification_models\"><\/a>\n## Load classification models\n[Back to Table of Contents](#toc)","6f46c8ab":"<a id=\"create_tta_etc\"><\/a>\n# Create TTA transforms, datasets, loaders\n[Back to Table of Contents](#toc)"}}