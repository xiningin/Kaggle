{"cell_type":{"b01e94e3":"code","b1e9c654":"code","0f0483bd":"code","6ef8f609":"markdown","be0efbb8":"markdown","16e68f97":"markdown"},"source":{"b01e94e3":"# imports \nimport numpy as np\nimport pandas as pd \nimport random,os\n\nfrom sklearn.preprocessing import LabelEncoder\n# model \nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform as sp_randFloat\nfrom scipy.stats import randint as sp_randInt\nimport lightgbm\n\n#variables \nTRAIN_PATH = \"..\/input\/widsdatathon2022\/train.csv\"\nTEST_PATH = \"..\/input\/widsdatathon2022\/test.csv\"\nSAMPLE_SUBMISSION_PATH = \"..\/input\/widsdatathon2022\/sample_solution.csv\"\nSUBMISSION_PATH = \"submission.csv\"\n\nID = \"id\"\nTARGET = \"site_eui\"\n\nTEST_SIZE = 0.2\n\nSEED = 2022\ndef seed_everything(seed=SEED):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything()\n\nRS_CV = 3\nRS_N_ITER = 200\nRS_N_JOBS = -1\nRS_SCORING = 'neg_root_mean_squared_error'\n \n#load\ntrain = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)\n\n#preprocess\nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \nfor col in str_list:\n    encoder = LabelEncoder()\n    encoder.fit(train[col])\n    train[col] = encoder.transform(train[col])\n\n    for label in np.unique(test[col]):\n        if label not in encoder.classes_: \n            encoder.classes_ = np.append(encoder.classes_, label) \n    test[col] = encoder.transform(test[col])","b1e9c654":"####################################################################################\n#split input data and target data \nX = train.drop([ID,TARGET],axis=1)\ny = train[TARGET]\n####################################################################################\n# search best parameter and model\nmodel = lightgbm.LGBMRegressor()\nparameters = {\n    'n_estimators': sp_randInt(1, 10000),\n    'max_depth' : sp_randInt(1, 50),\n    'learning_rate' : sp_randFloat(),\n    'device_type':['gpu']\n    \n#     'bagging_fraction':sp_randFloat(),\n#     'subsample':sp_randFloat(),\n#     'min_sum_hessian_in_leaf':sp_randFloat()\n}\n\nrs = RandomizedSearchCV(estimator=model, \n                           param_distributions = parameters,\n                           scoring=RS_SCORING,\n                           cv = RS_CV, \n                           n_iter = RS_N_ITER, \n                           n_jobs=RS_N_JOBS,\n                           verbose=1)\nrs.fit(X, y)\n\n# best model \nprint(rs.best_params_)\nbestModel = rs.best_estimator_","0f0483bd":"####################################################################################\n#predict\nX_test = test.drop([ID],axis=1)\npred_test = bestModel.predict(X_test)\n####################################################################################\n#submit\nsub = pd.read_csv(SAMPLE_SUBMISSION_PATH)\nsub[TARGET] = pred_test\nsub.to_csv(SUBMISSION_PATH, index=False)\nsub.head()\n####################################################################################","6ef8f609":"# Before Building Model","be0efbb8":"# Build Model","16e68f97":"# After Building Model"}}