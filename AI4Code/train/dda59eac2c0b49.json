{"cell_type":{"efc4ec8f":"code","7e3cf5d6":"code","d34b205a":"code","8c356cb0":"code","49f0c5fb":"code","ba313cb9":"code","134bcf10":"code","ec6b867e":"code","0cc06d5d":"code","ccc4d85f":"code","20ea7d6e":"code","6168b4a5":"code","dadcd1b0":"code","3983151d":"code","ebbf1472":"code","14be5922":"code","66b2953f":"code","dc3de76c":"code","979d80c1":"code","6e4e25f1":"code","1ea143a6":"code","4c842234":"code","d4c53071":"code","94303bcd":"code","4b18c0b9":"code","f24397bd":"code","9e82c7d0":"code","22541365":"code","318840fb":"code","aa3bdf36":"code","b34332a4":"code","c43f0dc1":"code","d3bc6e16":"code","a5ebc774":"code","d40d13c9":"code","e6695ca6":"code","534cdf8e":"code","775b90a9":"code","93b30b45":"code","efefa34b":"code","f80eb6d1":"code","e2c671a8":"code","786a4843":"code","136ff431":"code","bcfd1552":"code","44f59658":"code","5685d47b":"code","89e6291e":"code","4f38f360":"code","acb663c9":"code","0aa88620":"code","b630f545":"code","161b601b":"code","1ac4f531":"code","b7045310":"code","dc95856f":"code","e59f83bb":"code","0958ef20":"code","40fca9b6":"markdown","ddf8f0d2":"markdown","3dd525b1":"markdown","c611cc75":"markdown","17fa4a2b":"markdown","159c682d":"markdown","ab0172ea":"markdown","bde15169":"markdown","1cc7283c":"markdown","d6ccc5e6":"markdown","23ebe9cc":"markdown","42bae9f3":"markdown","95328c4b":"markdown","a4aa3c53":"markdown","ea61c89a":"markdown","65fec39e":"markdown","1e85bf0e":"markdown","00f47ac3":"markdown","30c1807d":"markdown","1c1e5b08":"markdown","bac4833c":"markdown","2e42374c":"markdown","b70667eb":"markdown","7cafcbbd":"markdown","393d8967":"markdown","afd29aab":"markdown","ac3d8f96":"markdown","eae3bea3":"markdown","09f5ed47":"markdown","a618b69c":"markdown","8fbaebb3":"markdown","c1e6ff25":"markdown"},"source":{"efc4ec8f":"# Importing Libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#for displaying 500 results in pandas dataframe\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n","7e3cf5d6":"# Importing file\n# File Name\n\nimport os\nprint(os.listdir(\"..\/input\/fifa19\"))\n\n# OR\n\n# File Path\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n        \ndf = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')\ndf.head()","d34b205a":"#Shape of dataframe\nprint(\" Shape of dataframe: \", df.shape)","8c356cb0":"# Drop duplicates\ndf.drop_duplicates()\nprint(\" Shape of dataframe after dropping duplicates: \", df.shape)","49f0c5fb":"#Variable inspection\n\nprint(\"Names of columns \", list(df.columns))","ba313cb9":"df= df.drop(columns= \"Unnamed: 0\")\n","134bcf10":"#Null values\n\nnull= df.isnull().sum().sort_values(ascending=False)\ntotal =df.shape[0]\npercent_missing= (df.isnull().sum()\/total).sort_values(ascending=False)\n\nmissing_data= pd.concat([null, percent_missing], axis=1, keys=['Total missing', 'Percent missing'])\n\nmissing_data.reset_index(inplace=True)\nmissing_data= missing_data.rename(columns= { \"index\": \" column name\"})\n \nprint (\"Null Values in each column:\\n\", missing_data)\n","ec6b867e":"#See see how null values look in dataframe\n#Missing data as white lines \nimport missingno as msno\nmsno.matrix(df,color=(0,0.3,0.9))","0cc06d5d":"#Filtering data with null values for position\n\ndf_isnull = pd.isnull(df[\"LB\"])\npos_null= df[df_isnull]\nprint(pos_null.shape)\nprint(pos_null.isnull().sum().sort_values(ascending= False))","ccc4d85f":"#Filtering relevant data & checking for club null values\n\ndf_notnull = pd.notnull(df[\"LB\"])\ndf= df[df_notnull]\n\ndf_isnull = pd.isnull(df[\"Club\"])\npos_null= df[df_isnull]\nprint(pos_null.shape)\nprint(pos_null.isnull().sum().sort_values(ascending= False))","20ea7d6e":"df_notnull = pd.notnull(df[\"Club\"])\ndf= df[df_notnull]\nprint(df.shape)\nprint(df.isnull().sum().sort_values(ascending= False))","6168b4a5":"print(df.info())","dadcd1b0":"\ndf[['Height_ft','Height_inch']] = df['Height'].str.split(\"'\",expand=True)\ndf[\"Height\"]= 2.54*(df[\"Height_inch\"].astype(str).astype(int))+30.48 *(df[\"Height_ft\"].astype(str).astype(int))\ndf= df.drop(columns= ['Height_ft','Height_inch'])\n\ndf.columns","3983151d":"df[\"Weight\"]= df[\"Weight\"].str.split(\"lbs\", n = 1, expand = True)\ndf[\"Weight\"].astype(str).astype(int)","ebbf1472":"df[['a','Release Clause']] = df['Release Clause'].str.split(\"\u20ac\",expand=True)\n#df[['Release Clause','b']] = df['b'].str.split(\"M\",expand=True)\ndf= df.drop(columns= ['a'])\ndf[\"Release Clause\"]= df[\"Release Clause\"].replace(regex=['k'], value='000')\ndf[\"Release Clause\"]= df[\"Release Clause\"].replace(regex=['K'], value='000')\ndf[\"Release Clause\"]= df[\"Release Clause\"].replace(regex=['M'], value='000000')\ndf[\"Release Clause\"]=df[\"Release Clause\"].astype(str).astype(float)\ndf[\"Release Clause\"]=df[\"Release Clause\"]\/1000000\ndf.head()\n","14be5922":"df[['a','Value']] = df['Value'].str.split(\"\u20ac\",expand=True)\ndf= df.drop(columns= ['a'])\ndf[\"Value\"]= df[\"Value\"].replace(regex=['k'], value='000')\ndf[\"Value\"]= df[\"Value\"].replace(regex=['K'], value='000')\ndf[\"Value\"]= df[\"Value\"].replace(regex=['M'], value='000000')\ndf[\"Value\"]=df[\"Value\"].astype(str).astype(float)\ndf[\"Value\"]=df[\"Value\"]\/1000000\ndf.head()","66b2953f":"\ndf[\"Wage\"]= df[\"Wage\"].replace(regex=['k'], value='000')\ndf[\"Wage\"]= df[\"Wage\"].replace(regex=['K'], value='000')\ndf[\"Wage\"]= df[\"Wage\"].replace(regex=['M'], value='000000')\ndf[[\"b\",'Wage']] = df['Wage'].str.split(\"\u20ac\",expand=True)\ndf= df.drop(columns= ['b'])\n\n\ndf[\"Wage\"]=df[\"Wage\"].astype(str).astype(float)\ndf.head()","dc3de76c":"#df[\"LS\"]= df[\"LS\"].str.split(\"+\", n = 1, expand = True) \n#df[\"LS\"]= df[\"LS\"].astype(str).astype(int)\n#df.shape","979d80c1":"split= [\"LS\",\"ST\",\"RS\",\"LW\",\"LF\",\"CF\",\"RF\",\"RW\",\"LAM\",\"CAM\",\"RAM\",\"LM\",\"LCM\",\"CM\",\"RCM\",\"RM\",\"LWB\",\n        \"LDM\",\"CDM\",\"RDM\",\"RWB\",\"LB\",\"LCB\",\"CB\",\"RCB\",\"RB\"]\ndf = df.apply(lambda x : x.str.split('+').str[0].astype(str).astype(int) if x.name in [\"LS\",\"ST\",\"RS\",\"LW\",\"LF\",\"CF\",\"RF\",\"RW\",\"LAM\",\"CAM\",\"RAM\",\"LM\",\"LCM\",\"CM\",\"RCM\",\"RM\",\"LWB\",\n        \"LDM\",\"CDM\",\"RDM\",\"RWB\",\"LB\",\"LCB\",\"CB\",\"RCB\",\"RB\"] else x)\n    \ndf.head()","6e4e25f1":"df=df.fillna(0)","1ea143a6":"unique_position= df.Position.unique()\nunique_position","4c842234":"# Creating subsets according to playing positions\n\nattack = [\"CF\", \"LF\", \"LS\", \"LW\", \"RF\", \"RS\", \"RW\", \"ST\"]\n# NOt in df_attack= df[~df.Position.isin(attack) ]\ndf_attack= df[df.Position.isin(attack) ]\nprint(df_attack.shape)\n\ndefense= [\"RWB\",\"RCB\", \"RB\", \"LWB\",\"LCB\", \"LB\",\"CB\"]\ndf_defense= df[df.Position.isin(defense)]\nprint(df_defense.shape)\n\nmid= [\"RM\",\"RDM\",\"RCM\",\"RAM\",\"LM\",\"LDM\",\"LAM\",\"LCM\",\"CM\",\"CDM\",\"CAM\"]\ndf_mid= df[df.Position.isin(mid)]\nprint(df_mid.shape)\n\n\ngk= [\"GK\"]\ndf_gk= df[df.Position.isin(gk)]\nprint(df_gk.shape)\n","d4c53071":"df_defense.info()","94303bcd":"#Defender with maximum Potential and Overall\nprint('Maximum Potential : '+str(df_defense.loc[df_defense['Potential'].idxmax()][1]))\nprint('Maximum Overall Ranking : '+str(df_defense.loc[df_defense['Overall'].idxmax()][1]))","4b18c0b9":"# Exploring dependent variable\nprint(df.Value.describe())\nsns.distplot(df.Value);\n#skewness and kurtosis\nprint(\"Skewness: %f\" % df['Value'].skew())\nprint(\"Kurtosis: %f\" % df['Value'].kurt())\n","f24397bd":"#histogram and normal probability plot\nsns.distplot(df['Value'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df['Value'], plot=plt)","9e82c7d0":"boxplot = df.boxplot(column=['Value'])","22541365":"#scatter plot \n#### Independent variables (Numerical): 'Overall', 'Potential',  'Wage', \"International Reputation\", \"Weak Foot\", \"Skill Moves\",\"Work Rate\", \"LS\",\"ST\",\"RS\",\"LW\",\"LF\",\"CF\",\"RF\",\"RW\",\"LAM\",\"CAM\",\"RAM\",\"LM\",\"LCM\",\"CM\",\"RCM\",\"RM\",\"LWB\",\"LDM\",\"CDM\",\"RDM\",\"RWB\",\"LB\",\"LCB\",\"CB\",\"RCB\",\"RB\",'Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes', 'Release Clause'\n#Using important variables\n\nind_var= ['Overall', 'Potential',  'Wage', \"International Reputation\"]\nfor x in ind_var:\n    var = x\n    data = pd.concat([df['Value'], df[var]], axis=1)\n    data.plot.scatter(x=var, y='Value')","318840fb":"#df_defense_1= df_defense[df_defense.Overall>70] #N is equal in Overall>70\ndf_1= df[df.Value>10]\nprint(df_1.shape)\nprint(df.shape)","aa3bdf36":"#scatter plot \n#### Independent variables (Numerical): 'Overall', 'Potential',  'Wage', \"International Reputation\", \"Weak Foot\", \"Skill Moves\",\"Work Rate\", \"LS\",\"ST\",\"RS\",\"LW\",\"LF\",\"CF\",\"RF\",\"RW\",\"LAM\",\"CAM\",\"RAM\",\"LM\",\"LCM\",\"CM\",\"RCM\",\"RM\",\"LWB\",\"LDM\",\"CDM\",\"RDM\",\"RWB\",\"LB\",\"LCB\",\"CB\",\"RCB\",\"RB\",'Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes', 'Release Clause'\nind_var= ['Overall', 'Potential',  'Wage', \"International Reputation\"]\nfor x in ind_var:\n    var = x\n    data = pd.concat([df_1['Value'], df_1[var]], axis=1)\n    data.plot.scatter(x=var, y='Value')","b34332a4":"df_2= df[df[\"Overall\"]>70]\ndf_2= df[df.Value>50]\nprint(df_2.shape)\nprint(df.shape)\nprint(df_2[\"Overall\"].describe())\n\n#scatter plot \n#### Independent variables (Numerical): 'Overall', 'Potential',  'Wage', \"International Reputation\", \"Weak Foot\", \"Skill Moves\",\"Work Rate\", \"LS\",\"ST\",\"RS\",\"LW\",\"LF\",\"CF\",\"RF\",\"RW\",\"LAM\",\"CAM\",\"RAM\",\"LM\",\"LCM\",\"CM\",\"RCM\",\"RM\",\"LWB\",\"LDM\",\"CDM\",\"RDM\",\"RWB\",\"LB\",\"LCB\",\"CB\",\"RCB\",\"RB\",'Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes', 'Release Clause'\nind_var= ['Overall', 'Potential',  'Wage', \"International Reputation\"]\nfor x in ind_var:\n    var = x\n    data = pd.concat([df_2['Value'], df_2[var]], axis=1)\n    data.plot.scatter(x=var, y='Value')","c43f0dc1":"df_3= df[df.Value<10]\nprint(df_3.shape)\nprint(df.shape)\nprint(df_3[\"Overall\"].describe())\n\n#scatter plot \n#### Independent variables (Numerical): 'Overall', 'Potential',  'Wage', \"International Reputation\", \"Weak Foot\", \"Skill Moves\",\"Work Rate\", \"LS\",\"ST\",\"RS\",\"LW\",\"LF\",\"CF\",\"RF\",\"RW\",\"LAM\",\"CAM\",\"RAM\",\"LM\",\"LCM\",\"CM\",\"RCM\",\"RM\",\"LWB\",\"LDM\",\"CDM\",\"RDM\",\"RWB\",\"LB\",\"LCB\",\"CB\",\"RCB\",\"RB\",'Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes', 'Release Clause'\nind_var= ['Overall', 'Potential',  'Wage', \"International Reputation\"]\nfor x in ind_var:\n    var = x\n    data = pd.concat([df_3['Value'], df_3[var]], axis=1)\n    data.plot.scatter(x=var, y='Value')","d3bc6e16":"#df_defense_4= df_defense[df_defense[\"Overall\"]<70]\ndf_4= df[df.Value>1]\nprint(df_4.shape)\nprint(df.shape)\nprint(df_4[\"Overall\"].describe())\n\n#scatter plot \n#### Independent variables (Numerical): 'Overall', 'Potential',  'Wage', \"International Reputation\", \"Weak Foot\", \"Skill Moves\",\"Work Rate\", \"LS\",\"ST\",\"RS\",\"LW\",\"LF\",\"CF\",\"RF\",\"RW\",\"LAM\",\"CAM\",\"RAM\",\"LM\",\"LCM\",\"CM\",\"RCM\",\"RM\",\"LWB\",\"LDM\",\"CDM\",\"RDM\",\"RWB\",\"LB\",\"LCB\",\"CB\",\"RCB\",\"RB\",'Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes', 'Release Clause'\nind_var= ['Overall', 'Potential',  'Wage', \"International Reputation\"]\nfor x in ind_var:\n    var = x\n    data = pd.concat([df_4['Value'], df_4[var]], axis=1)\n    data.plot.scatter(x=var, y='Value')","a5ebc774":"df_5= df[df.Value<1]\nprint(df_5.shape)\nprint(df.shape)\nprint(df_5[\"Overall\"].describe())\n\n#scatter plot \n#### Independent variables (Numerical): 'Overall', 'Potential',  'Wage', \"International Reputation\", \"Weak Foot\", \"Skill Moves\",\"Work Rate\", \"LS\",\"ST\",\"RS\",\"LW\",\"LF\",\"CF\",\"RF\",\"RW\",\"LAM\",\"CAM\",\"RAM\",\"LM\",\"LCM\",\"CM\",\"RCM\",\"RM\",\"LWB\",\"LDM\",\"CDM\",\"RDM\",\"RWB\",\"LB\",\"LCB\",\"CB\",\"RCB\",\"RB\",'Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes', 'Release Clause'\nind_var= ['Overall', 'Potential',  'Wage', \"International Reputation\"]\nfor x in ind_var:\n    var = x\n    data = pd.concat([df_5['Value'], df_5[var]], axis=1)\n    data.plot.scatter(x=var, y='Value')","d40d13c9":"cut_labels=[\"0-0.2\", \"0.2-0.4\", \"0.4-0.6\", \"0.6-0.8\", \"0.8-1\"]\ncut_bins= [0,0.2,0.4,0.6,0.8,1]\ndf_5[\"Value_cuts\"]= pd.cut(df_5[\"Value\"], bins= cut_bins, labels= cut_labels)\n","e6695ca6":"df_5[\"Value_cuts\"].value_counts(normalize=True)","534cdf8e":"print(df_5.groupby(\"Value_cuts\")[\"Wage\"].mean())\nprint(df_5.groupby(\"Value_cuts\")[\"Overall\"].mean())\nprint(df_5.groupby(\"Value_cuts\")[\"Potential\"].mean())\nprint(df_5.groupby(\"Value_cuts\")[\"International Reputation\"].value_counts(normalize=True))","775b90a9":"#histogram and normal probability plot\nsns.distplot(df['Overall'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df['Overall'], plot=plt)\n\n#skewness and kurtosis\nprint(\"Skewness: %f\" % df['Overall'].skew())\nprint(\"Kurtosis: %f\" % df['Overall'].kurt())\n","93b30b45":"boxplot= df.boxplot(column=['Overall', 'Potential']);","efefa34b":"#Relationship with independent variables\n#scatter plot \n#### Independent variables (Numerical):  'Potential',  'Wage', \"International Reputation\", \"Weak Foot\", \"Skill Moves\",\"Work Rate\", \n####\"LS\",\"ST\",\"RS\",\"LW\",\"LF\",\"CF\",\"RF\",\"RW\",\"LAM\",\"CAM\",\"RAM\",\"LM\",\"LCM\",\"CM\",\"RCM\",\"RM\",\"LWB\",\"LDM\",\"CDM\",\"RDM\",\"RWB\",\"LB\",\"LCB\",\n####\"CB\",\"RCB\",\"RB\",'Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes', 'Release Clause'\nind_var= [\"LWB\",\"LDM\",\"CDM\",\"RDM\",\"RWB\",\"LB\",\"LCB\",\"CB\",\"RCB\",\"RB\",'ShortPassing',  'LongPassing', \n          'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance',  \n          'Jumping','Stamina', 'Strength', 'Aggression', 'Interceptions', 'Positioning', \n          'Vision', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle' ]\nfor x in ind_var:\n    var = x\n    data = pd.concat([df['Overall'], df[var]], axis=1)\n    data.plot.scatter(x=var, y='Overall')","f80eb6d1":"sns.jointplot(x=df_defense['Age'],y=df_defense['Overall'],\n              joint_kws={'alpha':0.1,'s':5,'color':'Green'},\n              marginal_kws={'color':'Green'})","e2c671a8":"\nboxplot= df.boxplot(column=['Wage']);","786a4843":"#correlation matrix\ncorrmat = df_defense.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","136ff431":"sns.set()\n\ncols = df_defense[[\"Overall\",\"Age\", \"Potential\",\"LWB\",\"LDM\",\"CDM\",\"RDM\",\"RWB\",\"LB\",\"LCB\",\"CB\",\"RCB\",\"RB\" ]]\ncorr = cols.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corr, annot=True, vmax=.8, square=True);","bcfd1552":"sns.set()\n\ncols = df[[\"Overall\",\"CB\",\"Age\",'ShortPassing',  'LongPassing', 'BallControl', 'Acceleration', \n                   'SprintSpeed', 'Agility', 'Reactions', 'Balance',  \n          'Jumping','Stamina', 'Strength', 'Aggression', 'Interceptions', 'Positioning', \n          'Vision', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle'  ]]\ncorr = cols.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corr, annot=True, vmax=.8, square=True);","44f59658":"#Drop unnecessary columns\n\ndf_model= df_defense.drop(columns=['ID', 'Name', 'Photo', 'Nationality', \n                           'Flag','Club', 'Club Logo', 'Value','Wage', \n                           'Special', 'Preferred Foot','Weak Foot', \n                           'Skill Moves', 'Work Rate', 'Body Type',\n                           'Real Face', 'Position', 'Jersey Number', \n                           'Joined', 'Loaned From', 'Contract Valid Until',\n                           'Height', 'Weight', 'LS', 'ST', 'RS', 'LW', 'LF', \n                           'CF', 'RF', 'RW', 'LAM', 'CAM', 'RAM','LM', \n                           'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', \n                           'RDM', 'RWB', 'LB', 'LCB',  'RCB', 'RB','Crossing', \n                           'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys',  \n                           'Dribbling', 'Curve', 'FKAccuracy', 'BallControl', 'Acceleration',\n                           'Reactions','ShotPower', 'LongShots',  'Interceptions', 'Penalties', \n                           'Marking','StandingTackle', 'GKDiving', 'GKHandling', 'GKKicking', \n                           'GKPositioning', 'GKReflexes', 'Release Clause'])","5685d47b":"df_model.columns","89e6291e":"#Split Overall as a Target value\ntarget = df_model.Overall\ndf_model2 = df_model.drop(['Overall'], axis = 1)\n\n#Splitting into test and train\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df_model2, target, test_size=0.2)\n\n#One Hot Encoding\nX_train = pd.get_dummies(X_train)\nX_test = pd.get_dummies(X_test)\nprint(X_test.shape,X_train.shape)\nprint(y_test.shape,y_train.shape)","4f38f360":"#Applying Linear Regression\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\n\n#Finding the r2 score and root mean squared error\nfrom sklearn.metrics import r2_score, mean_squared_error\nprint('r2 score: '+str(r2_score(y_test, predictions)))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(y_test, predictions))))","acb663c9":"#Using PermutationImportance to see important variables\n\nimport eli5\nfrom eli5.sklearn import PermutationImportance\n\nperm = PermutationImportance(model, random_state=1).fit(X_test, y_test)\neli5.show_weights(perm, feature_names = X_test.columns.tolist())","0aa88620":"plt.figure(figsize=(18,10))\nsns.regplot(predictions,y_test,scatter_kws={'alpha':0.6,'color':'orange'},line_kws={'color':'black','alpha':0.6})\nplt.xlabel(\"Predictors\")\nplt.ylabel('Overall')\nplt.title(\"Linear Model for Overall Rating Prediction\")\nplt.show()","b630f545":"# However, we require a model for the master data set","161b601b":"df_model= df.drop(columns=['ID', 'Name', 'Photo', 'Nationality', \n                           'Flag','Club', 'Club Logo', 'Value','Wage', \n                           'Special', 'Preferred Foot','Weak Foot', \n                           'Skill Moves', 'Work Rate', 'Body Type',\n                           'Real Face', 'Position', 'Jersey Number', \n                           'Joined', 'Loaned From', 'Contract Valid Until',\n                           'Height', 'Weight', 'LS', 'ST', 'RS', 'LW', 'LF', \n                           'CF', 'RF', 'RW', 'LAM', 'CAM', 'RAM','LM', \n                           'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', \n                           'RDM', 'RWB', 'LB', 'LCB',  'RCB', 'RB','Crossing', \n                           'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys',  \n                           'Dribbling', 'Curve', 'FKAccuracy', 'BallControl', 'Acceleration',\n                           'Reactions','ShotPower', 'LongShots',  'Interceptions', 'Penalties', \n                           'Marking','StandingTackle', 'GKDiving', 'GKHandling', 'GKKicking', \n                           'GKPositioning', 'GKReflexes', 'Release Clause'])","1ac4f531":"#Split Overall as a Target value\ntarget = df_model.Overall\ndf_model2 = df_model.drop(['Overall'], axis = 1)\n\n#Splitting into test and train\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df_model2, target, test_size=0.2)\n\n#One Hot Encoding\nX_train = pd.get_dummies(X_train)\nX_test = pd.get_dummies(X_test)\nprint(X_test.shape,X_train.shape)\nprint(y_test.shape,y_train.shape)","b7045310":"#Applying Linear Regression\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\n\n#Finding the r2 score and root mean squared error\nfrom sklearn.metrics import r2_score, mean_squared_error\nprint('r2 score: '+str(r2_score(y_test, predictions)))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(y_test, predictions))))","dc95856f":"#Using PermutationImportance to see important variables\n\nimport eli5\nfrom eli5.sklearn import PermutationImportance\n\nperm = PermutationImportance(model, random_state=1).fit(X_test, y_test)\neli5.show_weights(perm, feature_names = X_test.columns.tolist())","e59f83bb":"plt.figure(figsize=(18,10))\nsns.regplot(predictions,y_test,scatter_kws={'alpha':0.6,'color':'orange'},line_kws={'color':'black','alpha':0.6})\nplt.xlabel(\"Predictors\")\nplt.ylabel('Overall')\nplt.title(\"Linear Model for Overall Rating Prediction\")\nplt.show()","0958ef20":"def get_mape(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\nmape = get_mape(y_test, predictions)\nmape","40fca9b6":"\n## If you like the work, take a few seconds for giving this notebook UPVOTE. In case of any suggestions feel free to comment. I'll try to model on advance techniques as soon as possible. ","ddf8f0d2":"### Release clause, club, contract valid until, joined have the same number of missing values- Club related info is absent, hence irrelevant for our model and can be dropped","3dd525b1":"#### Values 0-1 million need to inspected further as there is high concentration there","c611cc75":"**## df_defense can be used for the problem at hand as we require the replacement for Sergio Ramos, however we'll model both the dataframes: df(with all values) & df_defense","17fa4a2b":"#### The overall rating of players increase with age (till 29\/30), however it starts to decrease after that.","159c682d":"#### For Value > 10 million there exist only 408 players and have a relationship close of linear (without a concentration around Zero).\n","ab0172ea":"#### Step 1: Data preprocessing & Feature engineering\n#### Step 2: EDA\n#### Step 3: Modeling\n#### Step 4: Simulator (on Power BI, link will be updated soon)\n\nNote: I've tried not to delete the cells in EDA as it is a journey and there are numerous iterations done before coming to a final\/ desired set of insights. \n\n*** Please feel free to point out any mistakes or any efficent methods of performing any task of this journey. Also, if you like my work- do give it a like as it will motivate to build more cases.***\n","bde15169":"\n# \" Who's next after Ramos??\n\n![Ramos](https:\/\/e00-marca.uecdn.es\/assets\/multimedia\/imagenes\/2019\/12\/30\/15777360639399.jpg)\n\n#### A Real Madrid without Sergio Ramos is on the horizon.\n\nThis reality is hard to image. Ramos has cemented himself as an irreplaceable player with legendary status. He\u2019s represented the crest in 635 games* and has developed into a versatile centre-back with outstanding leadership qualities. Though his contributions to the club don\u2019t just stop there.\n\nDespite being a defender, Ramos also has a knack for scoring goals (especially in dire moments like against Osasuna). He has 90 goals* and 38 assists* during his time with Real which is an added testament to his importance as a player. The last minute header against Atletico Madrid in the Champions League final surely takes the cake.\n\n![Champions League Final'14](https:\/\/www.futaa.com\/images\/full\/SergioRamos.jpeg)\n\n\n\n\n\n#### Problem: Identifying the replacement options for a given budget\n\n#### Task: Build a simulator to present in front of Board members- with budget (buy-out & wages), potential (deep down analysis), defending ratings, buy-out amount, rankings, (main) foot adjustment capabilities\n\n#### Data: Fifa 19(official data) has been provided. Assuming that the ratings\/wages\/value\/buy-out are static (stays constant for a given time)\n","1cc7283c":"### Remaining null values\n#### 1) As stated earlier, a big chunk of players are not loaned to other clubs, hence there are 16943 (now 14751) missing values out of 18206 (now 15926) i.e. they play for their own clubs.\n#### 2) There might not be any release clause set in the player contract and the player might be academy produced- hence no info on Joined is available.\n\n#### And it is okay to move forward with this dataset.","d6ccc5e6":"#### We need to dig more into this part of data :(","23ebe9cc":"### Data Preprocessing & Feature Engineerinhg","42bae9f3":"### Let's get started................................","95328c4b":"## Missing values:\n#### 1) Since a big chunk of players are not loaned to other clubs, hence there are 16943 missing values out of 18206 i.e. they play for their own clubs.\n#### 2) There is a consistency (11.45%) in missing values for the position (they play on), this needs to be explored.\n#### 3) Release clause, joined, contract valid until, club, position, jersey number have missing values and need to be explored.\n#### 4) There is a consistency (0.26%) in missing values for the players rating attributes\n\n\n","a4aa3c53":"#### There are only 1363 out of 15k(approx) players- 9% (approx.) which are valued above 1 million","ea61c89a":"#### Since Ramos is \"CB\", which is high correlated with other independent variables here, we can use it individually","65fec39e":"### Position, Jersey number and all players rating attributes have all the null values in this subset (as found in the both anomaly detection- Null value)\n## Hence, they can be dropped","1e85bf0e":"# EDA","00f47ac3":"#### 48% of data is in 1st bin (value 0-0.2) with a highest wage mean and highest mean overall ranking of 67 amongst the bins.\n\n## It turns out there are many players which are under-valued and we might need to look into Overall Rank\/Potential as our dependent variable","30c1807d":"#### Since the skewness is between -2 to 2, it is near to symmetrical, but is platykurtic as kurtosis is <3","1c1e5b08":"#### Unnamed is index duplicate and is not required: Drop unnamed","bac4833c":"#### Let's understand the variables\n#### Player demographics: 'ID', 'Name', 'Age', 'Photo', 'Nationality', 'Flag', 'Club', 'Club Logo', 'Value', 'Wage','Preferred Foot' , 'Position', 'Jersey Number', 'Joined', 'Loaned From', 'Contract Valid Until', 'Height', 'Weight', 'Release Clause'\n#### Player position rating: 'LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB'\n#### Player rating: 'Overall', 'Potential'\n#### Rating by player skill\/strength:\n#### Physical rating: 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'Jumping', 'Stamina', 'Strength'\n#### Technical rating: 'Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing','Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'ShotPower', 'LongShots', 'Penalties', 'Marking','StandingTackle', 'SlidingTackle'\n#### Mental rating: 'Aggression', 'Interceptions', 'Positioning', 'Vision','Composure'\n#### GK rating: 'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes'\n#### Rating by game play:\n#### PACE: 'Acceleration', 'SprintSpeed'\n#### SHOOTING: 'Finishing', 'LongShots', 'Penalties', 'Positioning', 'ShotPower', 'Volleys'\n#### PASSING: 'Crossing', 'Curve', 'FKAccuracy', 'LongPassing', 'ShortPassing', 'Vision'\n#### DRIBBLING: 'Agility', 'Reactions', 'Balance', 'BallControl','Composure', 'Dribbling','Reactions'\n#### DEFENDING: 'HeadingAccuracy','Interceptions', 'Marking', 'StandingTackle', 'SlidingTackle'\n#### PHYSICAL: 'Acceleration', 'Jumping', 'Stamina', 'Strength'\n#### GOALKEEPING: 'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes'\n#### https:\/\/www.fifauteam.com\/fifa-18-attributes-guide\/\n#### https:\/\/www.fifauteam.com\/fifa-19-attributes-guide\/\n#### Other: 'Special', 'International Reputation', 'Weak Foot', 'Skill Moves', 'Work Rate', 'Body Type', 'Real Face'\n\n\n\n\n","2e42374c":"#### The dependent variable is right skewed (highly),  and leptokurtic (kurtosis >3)- needs to be transformed","b70667eb":"#### Data type is correct now, let's split the dataset as per the positions","7cafcbbd":"### Flags in data type\n#### Height, Weight, Release clause should be int\/float\n#### Position ratings are objects, should be int","393d8967":"#### Dependent variable:'Value' a.k.a. Market Value\n#### Independent variables (Numerical): 'Overall', 'Potential',  'Wage', \"International Reputation\", \"Weak Foot\", \"Skill Moves\",\"Work Rate\", \"LS\",\"ST\",\"RS\",\"LW\",\"LF\",\"CF\",\"RF\",\"RW\",\"LAM\",\"CAM\",\"RAM\",\"LM\",\"LCM\",\"CM\",\"RCM\",\"RM\",\"LWB\",\"LDM\",\"CDM\",\"RDM\",\"RWB\",\"LB\",\"LCB\",\"CB\",\"RCB\",\"RB\",'Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes', 'Release Clause'\n","afd29aab":"#### Relationship with numerical variables","ac3d8f96":"#### Ramos has the best Overall ranking","eae3bea3":"#### No duplicate entries","09f5ed47":"There are 18206 players for which 89 features each are provided","a618b69c":"#### A lot of data in \"Value\" is concentrated near Zero\n#### For Values near zero there is a large concentration of other independent variables","8fbaebb3":"# Modeling","c1e6ff25":"short passing & Long passing: Long passing (less with dep. variable); agility,acceleration & Sprint speed: Agility & Sprint speed; Ball control, composure: dropped; Interceptions, Marking, Standing tackele, sliding tackle: Sliding tackle"}}