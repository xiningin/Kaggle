{"cell_type":{"0161b2e3":"code","f8f5b7b6":"code","cc9ce833":"code","5b0af783":"code","802bbe02":"code","4b3d28ef":"code","dbcc23cb":"code","aa80249c":"code","88216136":"code","21b92d95":"code","02504237":"code","0929ee02":"code","8310c4d5":"markdown","cb4fbc63":"markdown","dc1560cf":"markdown","b2a61228":"markdown","f0587773":"markdown","91eba3d0":"markdown","6bdf5a63":"markdown","80be6167":"markdown","a6249217":"markdown","8958461e":"markdown","20805e7e":"markdown","cb8612d6":"markdown"},"source":{"0161b2e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f8f5b7b6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","cc9ce833":"auto_df = pd.read_csv('..\/input\/automobile-dataset-on-kaggle\/Automobile_data.csv')","5b0af783":"auto_df.head(3)","802bbe02":"num_cols = ['price', 'bore', 'stroke', 'horsepower', 'peak-rpm']\nfor column in num_cols:\n    print(column)\n    print (auto_df[column][pd.to_numeric(auto_df[column], errors='coerce').isnull()])\nimport warnings; warnings.simplefilter('ignore')","4b3d28ef":"# write a function for data clearning which includes renaming of columns by replacing space with _ and handling non numeric values\n# from numeric columns\ndef clean_auto_data(auto_df):\n    'Function to load the auto price data set from a .csv file' \n    ## Rename Coulmns so the '-' character becomes '_'\n    cols = auto_df.columns\n    auto_df.columns = [str.replace('-', '_') for str in cols]\n    \n    ## Treat missing values remove rows with missing values, accounting for mising values coded as '?'\n    num_cols = ['price', 'bore', 'stroke','horsepower', 'peak_rpm']\n    for column in num_cols:\n        auto_df.loc[auto_df[column] == '?', column] = np.nan\n    auto_df.dropna(axis = 0, inplace = True)\n\n    ## Transform column data type, Convert columns to numeric values\n    for column in num_cols:\n        auto_df[column] = pd.to_numeric(auto_df[column])\n    \n    return auto_df\n\n# perform data cleaning on auto data frame\nauto_df = clean_auto_data(auto_df)\n\nprint(auto_df.columns)","dbcc23cb":"num_cols = ['price', 'bore', 'stroke','horsepower', 'peak_rpm']\nfor column in num_cols:\n    print(column)\n    print (auto_df[column][pd.to_numeric(auto_df[column], errors='coerce').isnull()])","aa80249c":"def count_unique(auto_prices, cols):\n    for col in cols:\n        print('\\n' + 'For column ' + col)\n        print(auto_prices[col].value_counts())\n\ncat_cols = ['make', 'fuel_type', 'aspiration', 'num_of_doors', 'body_style', \n            'drive_wheels', 'engine_location', 'engine_type', 'num_of_cylinders', \n            'fuel_system']\ncount_unique(auto_df, cat_cols)","88216136":"def barplot_method (auto_df, cols):\n    for col in cols:\n        fig = plt.figure(figsize=(12,6)) # define plot area\n        ax = fig.gca() # define axis    \n        counts = auto_df[col].value_counts() # find the counts for each unique category\n        counts.plot.bar(ax = ax, color = 'blue') # Use the plot.bar method on the counts data frame\n        ax.set_title('Number of autos by' + col) # Give the plot a main title\n        ax.set_xlabel(col) # Set text for the x axis\n        ax.set_ylabel('Number of autos')# Set text for y axis\n        plt.show()\n\ncat_cols = ['make', 'fuel_type', 'aspiration', 'num_of_doors', 'body_style', 'drive_wheels', 'engine_location', 'engine_type',\n            'num_of_cylinders', 'fuel_system']\nbarplot_method(auto_df, cat_cols)    ","21b92d95":"def plot_histogram(auto_prices, cols, bins = 10):\n    for col in cols:\n        fig = plt.figure(figsize=(12,6)) # define plot area\n        ax = fig.gca() # define axis    \n        auto_prices[col].plot.hist(ax = ax, bins = bins) # Use the plot.hist method on subset of the data frame\n        ax.set_title('Histogram of ' + col) # Give the plot a main title\n        ax.set_xlabel(col) # Set text for the x axis\n        ax.set_ylabel('Number of autos')# Set text for y axis\n        plt.show()\n        \nnum_cols = ['curb_weight', 'engine_size', 'city_mpg', 'price']    \nplot_histogram(auto_df, num_cols)","02504237":"def plot_density_hist(auto_prices, cols, bins = 10, hist = False):\n    for col in cols:\n        fig = plt.figure(figsize=(12,6)) # define plot area\n        ax = fig.gca() # define axis           \n        sns.set_style(\"whitegrid\")\n        sns.distplot(auto_prices[col], bins = bins, rug=True, hist = hist)\n        plt.title('Histogram of ' + col) # Give the plot a main title\n        plt.xlabel(col) # Set text for the x axis\n        plt.ylabel('Number of autos')# Set text for y axis\n        plt.show()\n        \nplot_density_hist(auto_df, num_cols)        ","0929ee02":"plot_density_hist(auto_df, num_cols, bins = 10, hist = True)        ","8310c4d5":"## Analyzing one column at a time using frequency distribution analysis","cb4fbc63":"Another way to explore frequency distribution of numerical columns over the bins is using kernel density plot of Seaborn library. We can think of Kernel Density plots as smoothed version of Histograms","dc1560cf":"What is bin if there is a columns which has range of 1 to 10000 and if want to see frequency distribution of data on 5 bins. It will create bins as follows:\n\n1) 1 to 2000 2) 2001 to 4000 3) 4001 to 6000 4) 6001 to 8000 5) 8001 to 10000\n\nand then it will present count of records i.e. frequency distribution over aforementioned bins of data.","b2a61228":"Use value_count function on categorical columns of data frame (auto_df) to check check the frequency of data","f0587773":"I am preparing a series to understand data visualization into super simple way by decomposing complex aspects of  of data visualization in to small units and make it super easy to understand. We can decompose Data Visualization in following parts:\n1. Data Visualization for individual columns (Numerical and Categorical both)\n2. Data Visualization to explore relationship between two numerical columns\n3. Data Visualization to explore relationship between numerical and categorical columns\n\nThis notebook is 1st part of the series where we will use use Matplotlib, Pandas, seaborn libraries perform visual analysis of data for individual column.\nNotebook includes basic data clearning before we start creating graphs","91eba3d0":"Check key numeric columns with non numeric values","6bdf5a63":"## Visualize the frequency of Categorical variables using bar chart","80be6167":"## Visualize frequency of numberical columbs by creating bins","a6249217":"We can also Combine histograms and kdes","8958461e":"In Frequency distribution we analyze how many time a particular value of a columns appeared in a given table forexample for car make columns we want to see how many times Toyota appeared in the dataframe, how many times Nissan appeared in dataframe etc.\n\nWe use value_count() method or bar plots to analyze frequency distribution of categorical columns and we use histogram or kernel density plots to analyze frequeny distribution of numerical columns","20805e7e":"Validate if all non numeric values for numeric columns are handled","cb8612d6":"Frequency distribution analysis of numerical data using histogram"}}