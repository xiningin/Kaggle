{"cell_type":{"2a7b59dc":"code","55f0c54e":"code","0fc1dd8e":"code","09d8fa3d":"code","8dda75ba":"code","00901d22":"code","2425dc61":"markdown","e1a751fa":"markdown"},"source":{"2a7b59dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","55f0c54e":"df_train = pd.read_csv('..\/input\/artificial-data-leaks\/train.csv')\nprint('Train data shape:',df_train.shape)\ndf_train.head(10)","0fc1dd8e":"df_test = pd.read_csv('..\/input\/artificial-data-leaks\/test.csv')\nprint('Test data shape:',df_test.shape)\ndf_test.head(10)","09d8fa3d":"print('Distributions')\nfig, axs = plt.subplots(ncols=4, nrows=3, figsize=(15,12))\nfor x in range(10):\n    sns.distplot(df_train['col{}'.format(x)], hist=True, kde=True, ax=axs[x\/\/4,x%4])\nsns.distplot(df_train['target'], hist=True, kde=True, ax=axs[2,2])\npass","8dda75ba":"print('Correlations all close to zero')\nf = plt.figure(figsize=(11, 11))\nplt.matshow(df_train.corr(), fignum=f.number)\nplt.xticks(range(df_train.shape[1]), df_train.columns, fontsize=14, rotation=45)\nplt.yticks(range(df_train.shape[1]), df_train.columns, fontsize=14)\ncb = plt.colorbar()\nplt.show()\ndf_train.corr()","00901d22":"import lightgbm as lgb\nfrom sklearn import metrics\n\nRS = 0\nROUNDS = 500\nTARGET = 'target'\n\nparams = {\n    'objective': 'binary',\n    'metric': 'auc',\n    'boosting': 'gbdt',\n    'learning_rate': 0.1,\n    'verbose': 0,\n    'num_leaves': 64,\n    'bagging_fraction': 0.8,\n    'bagging_seed': RS,\n    'feature_fraction': 0.9,\n    'feature_fraction_seed': RS,\n    'max_bin': 100,\n    'max_depth': 5\n}\n\nx_train = lgb.Dataset(df_train.drop(TARGET, axis=1), df_train[TARGET])\nmodel = lgb.train(params, x_train, num_boost_round=ROUNDS)\npreds = model.predict(df_test.drop(TARGET, axis=1))\n\nscore = metrics.roc_auc_score(df_test[TARGET], preds)\nprint('Test AUC score:',score)\n\nfig, axs = plt.subplots(ncols=2, figsize=(15,6))\nlgb.plot_importance(model, importance_type='split', ax=axs[0], title='Feature importance (split)')\nlgb.plot_importance(model, importance_type='gain', ax=axs[1], title='Feature importance (gain)')\npass\n\n#Baseline not-tuned model, raw features: AUC 0.74632\n#All leaks found, same model parameters: AUC 0.93927\n","2425dc61":"# First look at the data\n\n10 columns, 10 leaks - how much can you find?","e1a751fa":"# Baseline model\n\nBaseline score is AUC 0.74632. Model parameters are not tuned, so most likely you can get some boost by tuning them. However the biggest boost can be achieved by feature engineering. There are 10 special features to be found, which can alone achieve AUC 0.93927 with the same model\/parameters."}}