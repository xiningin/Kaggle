{"cell_type":{"119bf82e":"code","9e08235f":"code","d72cee82":"code","9543c29f":"code","3fdc3ffb":"code","b7668ef3":"code","d34bf73f":"code","e2882a7b":"code","1ecc99a4":"code","a7f37e4b":"code","fc0fa94e":"code","ec992cdb":"code","35f99d12":"code","d6cea157":"code","926c98d0":"code","458ff859":"markdown","02f972c5":"markdown"},"source":{"119bf82e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom collections import Counter\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e08235f":"iris=pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")","d72cee82":"iris.head()","9543c29f":"iris.drop([\"Id\"],axis=1,inplace=True)","3fdc3ffb":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ndf_le=iris.copy()\nle.fit(df_le[\"Species\"])","b7668ef3":"list(le.classes_)","d34bf73f":"df_le[\"Species\"]=le.transform(df_le[\"Species\"])","e2882a7b":"df_le","1ecc99a4":"X=df_le.drop([\"Species\"],axis=1)\ny=df_le[\"Species\"]","a7f37e4b":"X","fc0fa94e":"X.info()","ec992cdb":"from sklearn.preprocessing import StandardScaler\n\nX_s=StandardScaler().fit_transform(X)","35f99d12":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X_s,y,test_size=0.2,random_state=42)","d6cea157":"from scipy.spatial import distance\ndef Euclidean(x1,x2):\n    return np.sqrt(np.sum((x1-x2)**2))\nclass KNN:\n\n    def __init__(self,k=3):# \u015fimdilik \u00fc\u00e7 ama ben onu bulup g\u00f6nderece\u011fim\n        self.k=k\n    \n    def fit(self,X_train,y_train):\n        self.X_train=X_train\n        self.y_train=y_train\n    \n    def predict(self,X):\n        predict_labels=[self._predict(x) for x in X]\n        return np.array(predict_labels)\n    \n    def _predict(self, x):\n        #compute distance\n        distances=[Euclidean(x,x_train) for x_train in self.X_train]\n        #get k nearest samples, labels\n        k_indices=np.argsort(distances)[:self.k]\n        k_nearest_labels=[self.y_train[i] for i in k_indices]\n        #majority votes, most common class label\n        most_common=Counter(k_nearest_labels).most_common(1)\n        return most_common[0][0]\n\n","926c98d0":"\n\nknn=KNN(k=3)\nknn.fit(X_train,y_train)\npreds=knn.predict(X_test)\n\n#acc=np.sum(preds==y_test)\/len(y_test)\n#print(acc)","458ff859":"* The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.\n* It does not have to be named self , you can call it whatever you like, but it has to be the first parameter of any function in the class:","02f972c5":"# Label Encoding\n"}}