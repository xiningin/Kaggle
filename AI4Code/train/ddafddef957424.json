{"cell_type":{"4f6b6e64":"code","0490ed87":"code","4e99eabe":"code","ef84ac70":"code","e8274239":"code","695133c1":"code","e885b335":"code","4a018445":"code","f61b33d7":"code","c4b10326":"code","119c49a3":"code","7ed16a85":"code","f41ff640":"code","d310e753":"code","326a36f9":"code","da4fff14":"code","d00fa860":"code","a3e1d173":"code","fd003762":"code","8fe95c67":"code","2fe3e427":"code","f91be79a":"code","c8d6e812":"code","c71a5ce2":"code","2934511a":"code","3c5befd4":"code","6672ea7a":"code","a398d40c":"code","bcef7fdb":"code","3be3969a":"code","4e43e205":"code","3b6b0ad8":"markdown","e787256e":"markdown","7e28a3a0":"markdown","d8add51d":"markdown","85812b7c":"markdown","411050dc":"markdown","bb11efe8":"markdown","4a98d72e":"markdown","fde84785":"markdown"},"source":{"4f6b6e64":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0490ed87":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport datetime as dt\n\npd.set_option(\"display.max_columns\", 500) \npd.set_option(\"display.max_rows\", 200)\nplt.rcParams['figure.figsize'] = [15, 6]\nsns.set_style(\"darkgrid\")","4e99eabe":"!pip install pandas-profiling","ef84ac70":"# Load data to pandas\n\nonline_sales = pd.read_csv('\/kaggle\/input\/uisummerschool\/Online_sales.csv', sep=',')\nonline_sales.head()","e8274239":"# Menampilkan beberapa kolom\nonline_sales [['Date', 'Product SKU', 'Quantity', 'Revenue', 'Tax']]","695133c1":"# Menyimpan data ke variabel baru\ntest = online_sales [['Date', 'Product SKU', 'Quantity', 'Revenue', 'Tax']]\n\n# Tidak menampilkan output\n","e885b335":"# Jika setelah disimpan divariabel lalu ingin ditampilkan \ntest.head(10)\n# head bagian atas, tail bagian bawah data (sesuai kolom di csv)","4a018445":"# Melakukan filter berdasarkan nilai suatu kolom\n# Misal ambil data dengan Product SKU bernilai GGOENEBQ079099\n# Cara 1\ncondition1= online_sales['Product SKU'] == 'GGOENEBQ079099'\n\nonline_sales[ (condition1) ]\n# online_sales[online_sales['Product SKU'] == 'GGOENEBQ079099']\n\n\ncondition2= online_sales['Quantity'] > 2\nonline_sales[ (condition1) & (condition2)]","f61b33d7":"# Cara 2\n# Ingin mengambil data \nonline_sales.query('Quantity > 10').head(5)","c4b10326":"test = online_sales [['Date', 'Product SKU', 'Quantity', 'Revenue', 'Tax', 'Delivery']]\n## Kolom baru\ntest['Net_Income'] = test['Revenue'] - test['Tax'] - test['Delivery']\ntest.head()","119c49a3":"## Update kolom yg ada berdasar kondisi\n\nkondisi = test['Tax'].isnull() \n# bisa juga menggunakan >, <, == nilai tertentu \n# kondisi= test['Quantity'] > 2\n\ntest.loc[kondisi, ['Tax']] = 1","7ed16a85":"# Group by untuk aggregasi\n\ntest = online_sales.groupby(['Date'])['Quantity'].sum().reset_index()\ntest.head()","f41ff640":"#Group by multiple kolom\ntest = online_sales.groupby(['Date', 'Product SKU'])['Quantity'].sum().reset_index()\ntest.head()","d310e753":"online_sales.head(3)","326a36f9":"# Agregasi beberapa tipe\ntest = online_sales.groupby(['Date']).agg({'Quantity': 'sum',\n                                                      'Revenue': 'sum',\n                                                      'Tax': 'sum',\n                                                      'Product SKU': 'count',\n                                                      'Transaction ID': 'count',\n                                                     }).reset_index()\ntest.head()","da4fff14":"#Sort data berdasar quantity descending\nonline_sales.sort_values(by=['Quantity'], ascending = False).head(15)","d00fa860":"test.head(3)","a3e1d173":"test.rename(index=str, columns={\"Quantity\": \"Total Quantity\", \"Revenue\": \"Total Revenue\"}, inplace = True)\n\ntest.drop(columns=['Product SKU', 'Transaction ID'], inplace = True)\ntest.head()","fd003762":"## Tahap 1 Olah data hingga mendapat total revenue per hari\nonline_sales = online_sales = pd.read_csv('\/kaggle\/input\/uisummerschool\/Online_sales.csv')\nbackup = online_sales.copy() ##untuk debugging pengajar, tak usah dihiraukan\n\ndaily_online_revenue = online_sales.groupby(['Date'])['Revenue'].sum().reset_index()\ndaily_online_revenue.tail()","8fe95c67":"## Plot\n\ng = sns.lineplot(data = daily_online_revenue, x= 'Date', y = 'Revenue')     ","2fe3e427":"daily_online_revenue.info()","f91be79a":"daily_online_revenue['Date'] = daily_online_revenue['Date'].astype(str)\ndaily_online_revenue['Date'] = pd.to_datetime(daily_online_revenue['Date'])\ng = sns.lineplot(data = daily_online_revenue, x= 'Date', y = 'Revenue')     ","c8d6e812":"## Tahap 2 Tambahkan data yang akan diprediksi\nadd_data = [['2017-12-01', 0], ['2017-12-02', 0], ['2017-12-03', 0],\n            ['2017-12-04', 0], ['2017-12-05', 0], ['2017-12-06', 0],\n            ['2017-12-07', 0], ['2017-12-08', 0], ['2017-12-09', 0],\n            ['2017-12-10', 0], ['2017-12-11', 0], ['2017-12-10', 0],\n            ['2017-12-13', 0], ['2017-12-14', 0]\n           ] \n  \n# Create the pandas DataFrame \nadd_data_df = pd.DataFrame(add_data, columns = ['Date', 'Revenue']) \nadd_data_df['Date'] = add_data_df['Date'].astype(str)\nadd_data_df['Date'] = pd.to_datetime(add_data_df['Date'])\n\n\ndaily_online_revenue = daily_online_revenue.append(add_data_df)\ndf_rev = daily_online_revenue.copy()  ##untuk evaluasi pemateri\n\ndaily_online_revenue.tail(20)","c71a5ce2":"## 3 Persiapan data prediksi dan training\n\n## Add feature \ndaily_online_revenue = 'Edit this part'","2934511a":"\n# If you want to submit, please change the value to \"2017-11-30\"\nend_of_training_date = \"2017-11-16\" \n\ntrain_data = 'Edit this part'\ntest_data = 'Edit this part'","3c5befd4":"# Pisahkan kolom yang ingin diprediksi (biasa disebut label menjadi y), dan variabel lain menjadi x\nx_train = 'Edit this part'\ny_train = 'Edit this part'\n\nx_test = 'Edit this part'\ny_test = 'Edit this part'","6672ea7a":"from sklearn.ensemble import RandomForestRegressor\n\ndef fit(x_train, y_train):\n    model = RandomForestRegressor(random_state=1)  #14045\n    model.fit(x_train, y_train)\n    return model\n\ndef predict(model, x_test):\n    y_pred = model.predict(x_test)\n    return y_pred\n\nmodel = fit(x_train, y_train)\n\n","a398d40c":"# Predict the model\ndf_rev2 = df_rev.copy()\nn_iteration = len(x_test)\nresult = []\nfor i in range(n_iteration):\n    y_pred = predict(model, pd.DataFrame(x_test.iloc[i]).transpose())\n    result.append(y_pred[0])\n    df_rev2.loc[df_rev2[\"Date\"]==x_test.index[i],\"Revenue\"] = y_pred\n    \n    # Repeat the whole process, except for model fitting\n    daily_online_revenue = preprocess(df_rev2).set_index('Date')\n    _, testing_data = split_train_test(daily_online_revenue,end_of_training_date)\n    x_test, _ = split_label_and_predictor(testing_data)\nresult","bcef7fdb":"y_test","3be3969a":"# THIS IS FOR VALIDATION PURPOSE\n# Prediction vs Actual\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\ncomparison = pd.DataFrame({\"Prediction\":result,\"Actual\":y_test['Revenue']})\ncomparison.index = y_test.index\nerror = sqrt(mean_squared_error(comparison[\"Actual\"], comparison[\"Prediction\"]))\nprint(\"Error Score (RMSE) = {}\".format(round(error,2)))\n\nhistorical = pd.DataFrame(y_train).rename(columns={\"Revenue\":\"Actual\"}).tail(14)\n\npd.concat([historical,comparison],sort=True).plot();","4e43e205":"# Save the result to CSV for submission\nformatted_result = pd.DataFrame(result).reset_index().rename(columns={\"index\":\"Id\",0:\"Revenue\"})\ndisplay(formatted_result)\n\n# Uncomment the code below if you want to save the result\nformatted_result[['Id', 'Revenue']].to_csv(\"result.csv\",index=False)","3b6b0ad8":"### 1.1 Show and assigning value","e787256e":"# 2. Our Challenge","7e28a3a0":"# 1. Basic Pandas","d8add51d":"### 1.4 Group by Data","85812b7c":"### 1.5 Sorting Data","411050dc":"Kita memiliki data penjualan online hingga 30 november 2017, Pak Bos meminta untuk melakukan prediksi \nberapa penjualan kita untuk 2 minggu ke depan (1 Desember -14 Desember)\nDari data penjualan online :\n1. Olah data hingga mendapat total revenue per hari [sudah]\n2. Tambahkan data yang akan diprediksi [sudah]\n3. Persiapan data prediksi dan training\n4. Training dan testing (modelling)\n","bb11efe8":"### 1.6 Mengganti nama kolom atau mendelete kolom","4a98d72e":"### 1.2 Filter and selection","fde84785":"### 1.3 Create or update colomn"}}