{"cell_type":{"284a3bbf":"code","8ddbcf84":"code","680ddb01":"code","f873f4ea":"code","b3d2c6fb":"code","02775209":"code","0e755d21":"code","c32dd7f0":"code","d1865d38":"code","012eec79":"code","ab46f0a8":"code","b5750396":"code","ffd7e961":"code","84d336c1":"code","8ae40b65":"code","389a3a15":"code","09226699":"code","df8f22c2":"code","67ab262f":"code","44831bfe":"code","a0cb76be":"code","91cce96b":"code","f07d2200":"code","1acbfe2a":"code","cd7f8c22":"code","68db43ee":"code","64a3b00f":"code","9feb059f":"code","eb991bc2":"code","99173d6a":"code","6edf64d6":"code","a5eaf344":"markdown","6b9599c2":"markdown","4c43a1d9":"markdown","e67235d1":"markdown","6cbb8c0f":"markdown","4a508d83":"markdown","91e26e17":"markdown","c6c67846":"markdown","95419164":"markdown","12b010a3":"markdown","bcbff398":"markdown","f131f016":"markdown","13a816d9":"markdown","17b4602c":"markdown","1cc58ed3":"markdown","427819d8":"markdown"},"source":{"284a3bbf":"%%time\nimport pandas as pd\n","8ddbcf84":"import  lightgbm as lgb","680ddb01":"%%time\n\nimport os\nprint(os.listdir(\"..\/input\"))\ndf_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')\ncombine = [df_train, df_test]","f873f4ea":"print(df_train.head(3))\nprint(df_test.head(3))","b3d2c6fb":"# Define column date as datatype date and define new date features\nfor dataset in combine:\n    dataset['date'] = pd.to_datetime(dataset['date'])\n    dataset['year'] = dataset.date.dt.year\n    dataset['month'] = dataset.date.dt.month\n    dataset['day'] = dataset.date.dt.day\n    dataset['dayofyear'] = dataset.date.dt.dayofyear\n    dataset['dayofweek'] = dataset.date.dt.dayofweek\n    dataset['weekofyear'] = dataset.date.dt.weekofyear\n    dataset['is_month_start'] = (dataset.date.dt.is_month_start).astype(int)\n    dataset['is_month_end'] = (dataset.date.dt.is_month_end).astype(int)\n    dataset['quarter'] =dataset.date.dt.quarter","02775209":"dataset.drop('date', axis=1, inplace=True)","0e755d21":"df_train.head()","c32dd7f0":"df_train['daily_avg']=df_train.groupby(['item','store','dayofweek'])['sales'].transform('mean')\ndf_train['monthly_avg']=df_train.groupby(['item','store','month'])['sales'].transform('mean')\ndf_train['quarter_avg']=df_train.groupby(['item','store','quarter'])['sales'].transform('mean')","d1865d38":"daily_avg=df_train.groupby(['item','store','dayofweek'])['sales'].mean().reset_index()\nmonthly_avg=df_train.groupby(['item','store','month'])['sales'].mean().reset_index()\nquarter_avg=df_train.groupby(['item','store','quarter'])['sales'].mean().reset_index()","012eec79":"monthly_avg","ab46f0a8":"def merge(x,y,col,col_name):\n    x =pd.merge(x, y, how='left', on=None, left_on=col, right_on=col,\n            left_index=False, right_index=False, sort=True,\n             copy=True, indicator=False,validate=None)\n    \n    x=x.rename(columns={'sales':col_name})\n    return x\n\ndf_test=merge(df_test, daily_avg,['item','store','dayofweek'],'daily_avg')\ndf_test=merge(df_test, monthly_avg,['item','store','month'],'monthly_avg')\ndf_test=merge(df_test, quarter_avg,['item','store','quarter'],'quater_avg')","b5750396":"print(df_test.columns)\nprint(df_train.columns)","ffd7e961":"\ndf_test=df_test.drop(['id'],axis=1)\ndf_train=df_train.drop(['date'],axis=1)","84d336c1":"df_test.columns","8ae40b65":"df_train.shape","389a3a15":"df_test.shape","09226699":"df_train.head(2)","df8f22c2":"df_test.head(2)","67ab262f":"df_train.isnull().sum()","44831bfe":"df_test.isnull().sum()","a0cb76be":"df_train.dtypes","91cce96b":"df_test.dtypes","f07d2200":"y=pd.DataFrame()\ny=df_train['sales']\n","1acbfe2a":"df_train=df_train.drop(['sales'],axis=1)","cd7f8c22":"x=df_train\n","68db43ee":"from bayes_opt import BayesianOptimization\ndef bayes_parameter_opt_lgb(X, y, init_round=15, opt_round=25, n_folds=5, random_seed=6, n_estimators=10000, learning_rate=0.02, output_process=False):\n    # prepare data\n    train_data = lgb.Dataset(data=X, label=y)\n    # parameters\n    def lgb_eval(num_leaves, feature_fraction, bagging_fraction, max_depth, lambda_l1, lambda_l2, min_split_gain, min_child_weight):\n        params = {'application':'regression_l1','num_iterations': n_estimators, 'learning_rate':learning_rate, 'early_stopping_round':100, 'metric':'auc'}\n        params[\"num_leaves\"] = int(round(num_leaves))\n        params['feature_fraction'] = max(min(feature_fraction, 1), 0)\n        params['bagging_fraction'] = max(min(bagging_fraction, 1), 0)\n        params['max_depth'] = int(round(max_depth))\n        params['lambda_l1'] = max(lambda_l1, 0)\n        params['lambda_l2'] = max(lambda_l2, 0)\n        params['min_split_gain'] = min_split_gain\n        params['min_child_weight'] = min_child_weight\n        cv_result = lgb.cv(params, train_data, nfold=n_folds, seed=random_seed, stratified=True, verbose_eval =200, metrics=['auc'])\n        return max(cv_result['auc-mean'])\n    # range \n    lgbBO = BayesianOptimization(lgb_eval, {'num_leaves': (24, 45),\n                                            'feature_fraction': (0.1, 0.9),\n                                            'bagging_fraction': (0.8, 1),\n                                            'max_depth': (5, 8.99),\n                                            'lambda_l1': (0, 5),\n                                            'lambda_l2': (0, 3),\n                                            'min_split_gain': (0.001, 0.1),\n                                            'min_child_weight': (5, 50)}, random_state=0)\n    # optimize\n    lgbBO.maximize(init_points=init_round, n_iter=opt_round)\n    \n    # output optimization process\n    if output_process==True: lgbBO.points_to_csv(\"bayes_opt_result.csv\")\n    \n    # return best parameters\n    return lgbBO.res['max']['max_params']\n\nopt_params = bayes_parameter_opt_lgb(x, y, init_round=5, opt_round=10, n_folds=3, random_seed=6, n_estimators=100, learning_rate=0.02)","64a3b00f":"opt_params","9feb059f":"param={'num_leaves': 33,\n 'feature_fraction': 0.3327159326237221,\n 'bagging_fraction': 0.8116430828587762,\n 'max_depth': 6,\n 'lambda_l1': 4.904560754684299,\n 'lambda_l2': 2.4603987133536127,\n 'min_split_gain': 0.03378397300297007,\n 'min_child_weight': 5.241922465773013}","eb991bc2":"%%time\ntrain_data = lgb.Dataset(x,y)\nmodel =lgb.train(param,train_data,)","99173d6a":"%%time\noutput=model.predict(df_test)\nresult=pd.DataFrame(output)\nresult","6edf64d6":"\n%%time\ntest=pd.read_csv('..\/input\/test.csv',usecols=['id'])\nfin=pd.DataFrame(test)\nfin['sales']=result\nfin.to_csv('Sales_bayesianoptimization.csv',index=False)\n ","a5eaf344":"###  BayesianOptimization","6b9599c2":"### Submission","4c43a1d9":"### Checking datatypes","e67235d1":"#### Displaying head of training and testing","6cbb8c0f":"#### INPUT size","4a508d83":"### Checking for missing  values","91e26e17":"### Merging new features","c6c67846":"#### Reading test and train data","95419164":"#### Displaying columns in train and testing ","12b010a3":"### Modelling  ","bcbff398":"### Loading libraries","f131f016":"#setting parameters for lightgbm\nparam = {'num_leaves':150, 'max_depth':7,'learning_rate':.05,'max_bin':200}\nparam['metric'] = ['auc', 'binary_logloss']","13a816d9":"#### Dropping columns","17b4602c":"### Add new features daily aveage sales and monthly average sales","1cc58ed3":"#### Define column date as datatype date and define new date features","427819d8":"#### Dropping date column"}}