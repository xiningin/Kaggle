{"cell_type":{"b1c6b909":"code","f942e75e":"code","4f038bba":"code","0a41e00c":"code","c5a6a1d7":"code","6885b6be":"code","45284b09":"code","cb33c0ef":"code","ca91d370":"code","6659a3e7":"code","b71ebb72":"code","97b94292":"code","7eb7d357":"code","a4b698f5":"code","a3122e86":"code","3a0f5a3c":"code","50093479":"code","e1245288":"code","e3bcd529":"code","cb77d3ca":"code","13f0122c":"code","5bd51788":"code","ec546ecb":"code","79c60aca":"code","ad41ee84":"code","9db7794f":"code","e662f84e":"code","031b9580":"code","5cb04e3a":"code","8eb7580b":"code","9ed50cbd":"code","985a1659":"code","04682812":"code","c54f1905":"code","172102ab":"code","c02114f1":"code","8116e419":"code","0cd53df1":"code","71583a50":"code","5b8f94c7":"code","016608a1":"code","3709c5a7":"code","bb705bba":"code","8ad0f7b1":"code","307bcf8f":"code","fce7a0aa":"code","eaedbfc8":"code","4b9115a1":"code","f751ce87":"code","46196654":"code","8dcaad59":"code","bd164a1f":"code","0ce6fe4a":"code","5d682f6a":"code","7030e697":"code","1c3d1216":"code","4e7574f6":"code","db0edc55":"code","a3d27748":"code","60cc90da":"code","76d31cdd":"code","5db0bcaa":"code","9aa00eec":"code","5cd4dde7":"code","524fc6b7":"code","d58f903f":"code","a446c257":"code","6e0b50d8":"code","2e2cfc8a":"code","e0215056":"code","68bf4b12":"code","2f3289b0":"code","c5aedf78":"code","4ff23b9d":"markdown","13dba6c7":"markdown","02743059":"markdown","64a18cfc":"markdown","3ebf9c63":"markdown","7f61215b":"markdown","9b0e3289":"markdown","e34d59b0":"markdown","b985d446":"markdown","aa87574a":"markdown","12b4e1f8":"markdown","11e99398":"markdown","9cda0f9e":"markdown","20a4bfeb":"markdown","3ec658d3":"markdown","80beb333":"markdown","4719f1a2":"markdown","9316ab5b":"markdown","757d0832":"markdown","acedc7c2":"markdown","cc5a8adb":"markdown","c71ad771":"markdown","63d2364a":"markdown","2530db62":"markdown","dd5645a7":"markdown","f6707dbf":"markdown","b9950aca":"markdown","2ef5d797":"markdown","96fef196":"markdown","09936231":"markdown","1dc669db":"markdown","0f9ddc38":"markdown","878e68b3":"markdown","4b7ceb4d":"markdown","66b4864f":"markdown","d0e35be4":"markdown","58f7c251":"markdown"},"source":{"b1c6b909":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nimport keras\nfrom keras.layers.core import Dense\nfrom keras.layers.normalization import BatchNormalization","f942e75e":"train = pd.read_csv(\"..\/input\/train_V2.csv\")","4f038bba":"train.head()","0a41e00c":"train.describe().T","c5a6a1d7":"pd.DataFrame(train.dtypes, columns=[\"Type\"])","6885b6be":"print(list(train.columns[train.dtypes == \"O\"]))","45284b09":"print(\"Number of record:\", len(train), \"\\nNumber of Unique Id:\", len(pd.unique(train.Id)))","cb33c0ef":"print(\"Number of match: \", len(pd.unique(train.matchId)), \"\\nNumber of match(<9): \", sum(train.groupby(\"matchId\").size() < 9))","ca91d370":"temp = train.loc[train.matchId.isin(train.groupby(\"matchId\").size()[train.groupby(\"matchId\").size() < 9].index), :]\ntemp.loc[temp.matchId == \"e263f4a227313a\"]","6659a3e7":"temp = pd.DataFrame(train.groupby(\"matchId\").size(), columns=[\"player\"])\ntemp.reset_index(level=0, inplace=True)","b71ebb72":"train = train.merge(temp, left_on=\"matchId\", right_on=\"matchId\")","97b94292":"print(\"Type: \", pd.unique(train.matchType), \"\\nCount: \", len(pd.unique(train.matchType)))","7eb7d357":"#\uac8c\uc784\uc778\uc6d0\ubcc4 \ubd84\ub958(Division by number of player in group)\ntrain[\"matchType_1\"] = \"-\"\ntrain.loc[(train.matchType == \"solo-fpp\") | \n          (train.matchType == \"solo\") | \n          (train.matchType == \"normal-solo-fpp\") | \n          (train.matchType == \"normal-solo\"), \"matchType_1\"] = \"solo\"\n\ntrain.loc[(train.matchType == \"duo-fpp\") | \n          (train.matchType == \"duo\") | \n          (train.matchType == \"normal-duo-fpp\") | \n          (train.matchType == \"normal-duo\"), \"matchType_1\"] = \"duo\"\n\ntrain.loc[(train.matchType == \"squad-fpp\") | \n          (train.matchType == \"squad\") | \n          (train.matchType == \"normal-squad-fpp\") | \n          (train.matchType == \"normal-squad\"), \"matchType_1\"] = \"squad\"\n\ntrain.loc[(train.matchType == \"flarefpp\") | \n          (train.matchType == \"flaretpp\") | \n          (train.matchType == \"crashfpp\") | \n          (train.matchType == \"crashtpp\"), \"matchType_1\"] = \"etc\"","a4b698f5":"# \uac8c\uc784\uc2dc\uc810\ubcc4 \ubd84\ub958(Division by viewpoint)\ntrain[\"matchType_2\"] = \"-\"\ntrain.loc[(train.matchType == \"solo-fpp\") | \n          (train.matchType == \"duo-fpp\") | \n          (train.matchType == \"squad-fpp\") | \n          (train.matchType == \"normal-solo-fpp\") | \n          (train.matchType == \"normal-duo-fpp\") | \n          (train.matchType == \"normal-squad-fpp\") | \n          (train.matchType == \"crashfpp\") | \n          (train.matchType == \"flarefpp\"), \"matchType_2\"] = \"fpp\"\n\ntrain.loc[(train.matchType == \"solo\") | \n          (train.matchType == \"duo\") | \n          (train.matchType == \"squad\") | \n          (train.matchType == \"normal-solo\") | \n          (train.matchType == \"normal-duo\") | \n          (train.matchType == \"normal-squad\") | \n          (train.matchType == \"crashtpp\") | \n          (train.matchType == \"flaretpp\"), \"matchType_2\"] = \"tpp\"","a3122e86":"train[\"solo\"] = 0\ntrain[\"duo\"] = 0\ntrain[\"squad\"] = 0\ntrain[\"etc\"] = 0\n\ntrain.loc[train.matchType_1 == \"solo\", \"solo\"] = 1\ntrain.loc[train.matchType_1 == \"duo\", \"duo\"] = 1\ntrain.loc[train.matchType_1 == \"squad\", \"squad\"] = 1\ntrain.loc[train.matchType_1 == \"etc\", \"etc\"] = 1","3a0f5a3c":"train[\"fpp\"] = 0\ntrain[\"tpp\"] = 0\n\ntrain.loc[train.matchType_2 == \"fpp\", \"fpp\"] = 1\ntrain.loc[train.matchType_2 == \"tpp\", \"tpp\"] = 1","50093479":"print(list(train.columns[train.dtypes != \"O\"]))","e1245288":"feature = [\"assists\", \"boosts\", \"damageDealt\", \"DBNOs\", \"headshotKills\", \"heals\", \n           \"killPlace\", \"killPoints\", \"kills\", \"killStreaks\", \"longestKill\", \n           \"matchDuration\", \"maxPlace\", \"rankPoints\", \"revives\", \"rideDistance\", \n           \"roadKills\", \"swimDistance\", \"teamKills\", \"vehicleDestroys\", \"walkDistance\", \"weaponsAcquired\", \"winPoints\", \"player\"]","e3bcd529":"feature_1 = [\"matchId\", \"assists\", \"boosts\", \"damageDealt\", \"DBNOs\", \"headshotKills\", \"heals\", \n             \"killPlace\", \"killPoints\", \"kills\", \"killStreaks\", \"longestKill\", \n             \"revives\", \"rideDistance\", \"roadKills\", \"swimDistance\", \"teamKills\", \n             \"vehicleDestroys\", \"walkDistance\", \"weaponsAcquired\", \"winPoints\"]","cb77d3ca":"feature_2 = [\"matchDuration\", \"maxPlace\", \"rankPoints\", \"player\", \"fpp\", \"tpp\", \"matchType_1\"]","13f0122c":"for i in list(train.columns[train.dtypes != \"O\"]):\n    print(i, \":\", sum(train[i].isna()))","5bd51788":"np.sum(train.winPlacePerc.isna())","ec546ecb":"train = train.loc[train.winPlacePerc.notna(), :]","79c60aca":"train.set_index(\"Id\", inplace=True)\ntrain.index.name = \"Id\"","ad41ee84":"temp_1 = train.loc[:, feature_1]\ntemp_2 = train.loc[:, feature_2]","9db7794f":"def minmax(attr):\n    return (attr - min(attr)) \/ (max(attr) - min(attr))","e662f84e":"temp_1 = temp_1.groupby(\"matchId\").transform(minmax)\ntemp_2 = temp_2.groupby(\"matchType_1\").transform(minmax)\n\n# for i in temp_2.columns[:4]:\n#     temp_2[i] = (temp_2[i] - min(temp_2[i])) \/ (max(temp_2[i]) - min(temp_2[i]))","031b9580":"temp_1.fillna(value=0, inplace=True)\ntemp_2.fillna(value=0, inplace=True)","5cb04e3a":"X = pd.merge(temp_1, temp_2, on=\"Id\")\nX = pd.merge(X, train.loc[:, [\"matchType_1\", \"winPlacePerc\"]], on=\"Id\")","8eb7580b":"del temp_1, temp_2\nX = X.reset_index()","9ed50cbd":"print(\"Name: \", feature, \"\\nCount: \", len(feature))","985a1659":"list_feat = [\"assists\", \"boosts\", \"damageDealt\", \"DBNOs\", \"headshotKills\", \"heals\", \n             \"killPlace\", \"killPoints\", \"kills\", \"killStreaks\", \"longestKill\", \n             \"matchDuration\", \"maxPlace\", \"rankPoints\", \"revives\", \"rideDistance\", \n             \"roadKills\", \"swimDistance\", \"teamKills\", \"vehicleDestroys\", \"walkDistance\", \n             \"weaponsAcquired\", \"winPoints\", \"player\", \"fpp\", \"tpp\"]","04682812":"list_feat_1 = [\"assists\", \"boosts\", \"damageDealt\", \"DBNOs\", \"headshotKills\", \"heals\", \n               \"killPlace\", \"killPoints\", \"kills\", \"killStreaks\", \"longestKill\", \n               \"matchDuration\", \"maxPlace\", \"rankPoints\", \"revives\", \"rideDistance\", \n               \"roadKills\", \"swimDistance\", \"teamKills\", \"vehicleDestroys\", \"walkDistance\", \n               \"weaponsAcquired\", \"winPoints\", \"player\", \"fpp\", \"tpp\", \"matchId\"]","c54f1905":"# \ubaa8\ub378 1(solo)\nmodel_1 = keras.models.Sequential()\n\nmodel_1.add(Dense(32, input_dim=len(list_feat), activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_1.add(Dense(64, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_1.add(Dense(128, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_1.add(keras.layers.Dropout(0.25))\n\nmodel_1.add(Dense(256, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_1.add(Dense(256, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_1.add(keras.layers.Dropout(0.25))\n\nmodel_1.add(Dense(128, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_1.add(Dense(64, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_1.add(Dense(32, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_1.add(keras.layers.Dropout(0.25))\n\nmodel_1.add(Dense(1, activation=\"sigmoid\"))\n\nmodel_1.compile(optimizer=\"RMSprop\", loss='MAE', metrics=[\"MAE\"])","172102ab":"x_train = X.loc[X.matchType_1 == \"solo\", list_feat]\ny_train = X.loc[X.matchType_1 == \"solo\", [\"winPlacePerc\"]]","c02114f1":"model_1.fit(x=x_train, y=y_train, epochs=50, batch_size=2000, validation_split=0.2, shuffle=True)","8116e419":"model_1.save(\"model_1_solo.h5\")","0cd53df1":"# \ubaa8\ub378 2(duo)\nmodel_2 = keras.models.Sequential()\n\nmodel_2.add(Dense(32, input_dim=len(list_feat), activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_2.add(Dense(64, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_2.add(Dense(128, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_2.add(keras.layers.Dropout(0.25))\n\nmodel_2.add(Dense(256, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_2.add(Dense(256, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_2.add(keras.layers.Dropout(0.25))\n\nmodel_2.add(Dense(128, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_2.add(Dense(64, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_2.add(Dense(32, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_2.add(keras.layers.Dropout(0.25))\n\nmodel_2.add(Dense(1, activation=\"sigmoid\"))\n\nmodel_2.compile(optimizer=\"RMSprop\", loss='MAE', metrics=[\"MAE\"])","71583a50":"x_train = X.loc[X.matchType_1 == \"duo\", list_feat]\ny_train = X.loc[X.matchType_1 == \"duo\", [\"winPlacePerc\"]]","5b8f94c7":"model_2.fit(x=x_train, y=y_train, epochs=75, batch_size=2000, validation_split=0.2, shuffle=True)","016608a1":"model_2.save(\"model_2_duo.h5\")","3709c5a7":"# \ubaa8\ub378 3(squad)\nmodel_3 = keras.models.Sequential()\n\nmodel_3.add(Dense(32, input_dim=len(list_feat), activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_3.add(Dense(64, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_3.add(Dense(128, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_3.add(keras.layers.Dropout(0.25))\n\nmodel_3.add(Dense(256, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_3.add(Dense(256, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_3.add(keras.layers.Dropout(0.35))\n\nmodel_3.add(Dense(128, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_3.add(Dense(64, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_3.add(Dense(32, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_3.add(keras.layers.Dropout(0.25))\n\nmodel_3.add(Dense(1, activation=\"sigmoid\"))\n\nmodel_3.compile(optimizer=\"RMSprop\", loss='MAE', metrics=[\"MAE\"])","bb705bba":"x_train = X.loc[X.matchType_1 == \"squad\", list_feat]\ny_train = X.loc[X.matchType_1 == \"squad\", [\"winPlacePerc\"]]","8ad0f7b1":"model_3.fit(x=x_train, y=y_train, epochs=25, batch_size=3000, validation_split=0.2, shuffle=True)","307bcf8f":"model_3.save(\"model_3_squad.h5\")","fce7a0aa":"# \ubaa8\ub378 4(etc)\nmodel_4 = keras.models.Sequential()\n\nmodel_4.add(Dense(32, input_dim=len(list_feat), activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_4.add(Dense(64, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_4.add(Dense(128, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_4.add(keras.layers.Dropout(0.25))\n\nmodel_4.add(Dense(128, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_4.add(Dense(64, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_4.add(Dense(32, activation=\"elu\", kernel_initializer=\"he_normal\"))\nmodel_4.add(keras.layers.Dropout(0.25))\n\nmodel_4.add(Dense(1, activation=\"sigmoid\"))\n\nmodel_4.compile(optimizer=\"RMSprop\", loss='MAE', metrics=[\"MAE\"])","eaedbfc8":"x_train = X.loc[X.matchType_1 == \"etc\", list_feat]\ny_train = X.loc[X.matchType_1 == \"etc\", [\"winPlacePerc\"]]","4b9115a1":"model_4.fit(x=x_train, y=y_train, epochs=100, validation_split=0.2, shuffle=True)","f751ce87":"model_4.save(\"model_4_etc.h5\")\n# model_1 = keras.models.load_model(\"..\/input\/model-pubg\/model_1_fpp.h5\")","46196654":"del(train, x_train, y_train, X)","8dcaad59":"plt.figure(figsize=(30, 15))\nplt.suptitle(\"model History\", fontsize = 20)\n\nplt.subplot(1, 2, 1)\nplt.title(\"model_1\")\nplt.plot(model_1.history.history[\"mean_absolute_error\"], label=\"training\")\nplt.plot(model_1.history.history[\"val_mean_absolute_error\"], label=\"validation\")\nplt.axhline(0.1, c=\"red\", linestyle=\"--\")\nplt.axhline(0.05, c=\"yellow\", linestyle=\"--\")\nplt.axhline(0.025, c=\"green\", linestyle=\"--\")\nplt.xticks(model_1.history.epoch)\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"MAE\")\nplt.legend()\n\nplt.subplot(1, 2, 2)\nplt.title(\"model_2\")\nplt.plot(model_2.history.history[\"mean_absolute_error\"], label=\"training\")\nplt.plot(model_2.history.history[\"val_mean_absolute_error\"], label=\"validation\")\nplt.axhline(0.1, c=\"red\", linestyle=\"--\")\nplt.axhline(0.05, c=\"yellow\", linestyle=\"--\")\nplt.axhline(0.025, c=\"green\", linestyle=\"--\")\nplt.xticks(model_2.history.epoch)\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"MAE\")\nplt.legend()\n\nplt.show()","bd164a1f":"plt.figure(figsize=(30, 15))\nplt.suptitle(\"model History\", fontsize = 20)\n\nplt.subplot(1, 2, 1)\nplt.title(\"model_3\")\nplt.plot(model_3.history.history[\"mean_absolute_error\"], label=\"training\")\nplt.plot(model_3.history.history[\"val_mean_absolute_error\"], label=\"validation\")\nplt.axhline(0.1, c=\"red\", linestyle=\"--\")\nplt.axhline(0.05, c=\"yellow\", linestyle=\"--\")\nplt.axhline(0.025, c=\"green\", linestyle=\"--\")\nplt.xticks(model_3.history.epoch)\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"MAE\")\nplt.legend()\n\nplt.subplot(1, 2, 2)\nplt.title(\"model_4\")\nplt.plot(model_4.history.history[\"mean_absolute_error\"], label=\"training\")\nplt.plot(model_4.history.history[\"val_mean_absolute_error\"], label=\"validation\")\nplt.axhline(0.1, c=\"red\", linestyle=\"--\")\nplt.axhline(0.05, c=\"yellow\", linestyle=\"--\")\nplt.axhline(0.025, c=\"green\", linestyle=\"--\")\nplt.xticks(model_4.history.epoch)\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"MAE\")\nplt.legend()\n\nplt.show()","0ce6fe4a":"test = pd.read_csv(\"..\/input\/test_V2.csv\")","5d682f6a":"print(\"Check The NA value in test data\")\nfor i in list(test.columns[test.dtypes != \"O\"]):\n    print(i, \":\", sum(test[i].isna()))","7030e697":"len(pd.unique(test.matchId)), sum(test.groupby(\"matchId\").size() < 9)","1c3d1216":"temp = pd.DataFrame(test.groupby(\"matchId\").size(), columns=[\"player\"])\ntemp.reset_index(level=0, inplace=True)\ntest = test.merge(temp, left_on=\"matchId\", right_on=\"matchId\")","4e7574f6":"test[\"matchType_1\"] = \"-\"\ntest.loc[(test.matchType == \"solo-fpp\") | \n         (test.matchType == \"solo\") | \n         (test.matchType == \"normal-solo-fpp\") | \n         (test.matchType == \"normal-solo\"), \"matchType_1\"] = \"solo\"\n\ntest.loc[(test.matchType == \"duo-fpp\") | \n         (test.matchType == \"duo\") | \n         (test.matchType == \"normal-duo-fpp\") | \n         (test.matchType == \"normal-duo\"), \"matchType_1\"] = \"duo\"\n\ntest.loc[(test.matchType == \"squad-fpp\") | \n         (test.matchType == \"squad\") | \n         (test.matchType == \"normal-squad-fpp\") | \n         (test.matchType == \"normal-squad\"), \"matchType_1\"] = \"squad\"\n\ntest.loc[(test.matchType == \"flarefpp\") | \n         (test.matchType == \"flaretpp\") | \n         (test.matchType == \"crashfpp\") | \n         (test.matchType == \"crashtpp\"), \"matchType_1\"] = \"etc\"","db0edc55":"test[\"matchType_2\"] = \"-\"\ntest.loc[(test.matchType == \"solo-fpp\") | \n         (test.matchType == \"duo-fpp\") | \n         (test.matchType == \"squad-fpp\") | \n         (test.matchType == \"normal-solo-fpp\") | \n         (test.matchType == \"normal-duo-fpp\") | \n         (test.matchType == \"normal-squad-fpp\") | \n         (test.matchType == \"crashfpp\") | \n         (test.matchType == \"flarefpp\"), \"matchType_2\"] = \"fpp\"\n\ntest.loc[(test.matchType == \"solo\") | \n         (test.matchType == \"duo\") | \n         (test.matchType == \"squad\") | \n         (test.matchType == \"normal-solo\") | \n         (test.matchType == \"normal-duo\") | \n         (test.matchType == \"normal-squad\") | \n         (test.matchType == \"crashtpp\") | \n         (test.matchType == \"flaretpp\"), \"matchType_2\"] = \"tpp\"","a3d27748":"test[\"solo\"] = 0\ntest[\"duo\"] = 0\ntest[\"squad\"] = 0\ntest[\"etc\"] = 0\n\ntest.loc[test.matchType_1 == \"solo\", \"solo\"] = 1\ntest.loc[test.matchType_1 == \"duo\", \"duo\"] = 1\ntest.loc[test.matchType_1 == \"squad\", \"squad\"] = 1\ntest.loc[test.matchType_1 == \"etc\", \"etc\"] = 1","60cc90da":"test[\"fpp\"] = 0\ntest[\"tpp\"] = 0\n\ntest.loc[test.matchType_2 == \"fpp\", \"fpp\"] = 1\ntest.loc[test.matchType_2 == \"tpp\", \"tpp\"] = 1","76d31cdd":"test.set_index(\"Id\", inplace=True)\ntest.index.name = \"Id\"","5db0bcaa":"temp_1 = test.loc[:, feature_1]\ntemp_2 = test.loc[:, feature_2]","9aa00eec":"temp_1 = temp_1.groupby(\"matchId\").transform(minmax)\ntemp_2 = temp_2.groupby(\"matchType_1\").transform(minmax)\n\n# for i in temp_2.columns[:4]:\n#     temp_2[i] = (temp_2[i] - min(temp_2[i])) \/ (max(temp_2[i]) - min(temp_2[i]))","5cd4dde7":"temp_1.fillna(value=0, inplace=True)\ntemp_2.fillna(value=0, inplace=True)","524fc6b7":"X = pd.merge(temp_1, temp_2, on=\"Id\")\nX = pd.merge(X, test.loc[:, [\"matchType_1\", \"winPlacePerc\"]], on=\"Id\")","d58f903f":"del temp_1, temp_2\nX.reset_index()","a446c257":"test = X\ntest = test.reset_index()","6e0b50d8":"solo = test[test.matchType_1 == \"solo\"].index\nduo = test[test.matchType_1 == \"duo\"].index\nsquad = test[test.matchType_1 == \"squad\"].index\netc = test[test.matchType_1 == \"etc\"].index\n\nsolo = solo.append([duo, squad, etc])\n\ntemp = pd.DataFrame(index=solo)\ntemp.index.name = \"Id\"","2e2cfc8a":"result_1 = model_1.predict(test.loc[test.matchType_1 == \"solo\", list_feat])\nresult_2 = model_2.predict(test.loc[test.matchType_1 == \"duo\", list_feat])\nresult_3 = model_3.predict(test.loc[test.matchType_1 == \"squad\", list_feat])\nresult_4 = model_4.predict(test.loc[test.matchType_1 == \"etc\", list_feat])","e0215056":"temp = pd.DataFrame(test.loc[test.matchType_1 == \"solo\", \"Id\"]).append(pd.DataFrame(test.loc[test.matchType_1 == \"duo\", \"Id\"])).append(pd.DataFrame(test.loc[test.matchType_1 == \"squad\", \"Id\"])).append(pd.DataFrame(test.loc[test.matchType_1 == \"etc\", \"Id\"]))\n_ = pd.DataFrame(result_1, columns = [\"winPlacePerc\"]).append(pd.DataFrame(result_2, columns = [\"winPlacePerc\"])).append(pd.DataFrame(result_3, columns = [\"winPlacePerc\"])).append(pd.DataFrame(result_4, columns = [\"winPlacePerc\"]))","68bf4b12":"result = pd.concat([temp.reset_index(drop=True), _.reset_index(drop=True)], axis=1)","2f3289b0":"print(np.sum(result.winPlacePerc.isna()), np.sum(result.winPlacePerc < 0), np.sum(result.winPlacePerc > 1))","c5aedf78":"result.loc[result.winPlacePerc.isna(), \"winPlacePerc\"] = 0\nresult.loc[result.winPlacePerc < 0, \"winPlacePerc\"] = 0\nresult.loc[result.winPlacePerc > 1, \"winPlacePerc\"] = 1\nresult.to_csv('submission.csv', index=False)","4ff23b9d":"### 6-1. \ubaa8\ub378\uc0dd\uc131(Model Generation)","13dba6c7":"## 1. \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30(Importing library and Loading Data)","02743059":"\uac8c\uc784\ucc38\uac00\uc778\uc6d0 \uc815\ubcf4\ub97c \uc0c8\ub85c \uc0dd\uc131\ud55c\ub2e4. ","64a18cfc":"---","3ebf9c63":"#### \uac8c\uc784 \ubcc4\ub85c \uc815\uaddc\ud654\nNormalizaton by matchId","7f61215b":"Check The NA value","9b0e3289":"There is only one missing value in winPlacePerc <br>\nSo, we have to remove it","e34d59b0":"one-hot-encoding","b985d446":"\uc815\uaddc\ud654(Normalization)","aa87574a":"# PUBG Prediction\n2019.01.04 <br>\nDamien Park\n","12b4e1f8":"## 6. \uc608\uce21(Prediction)","11e99398":"### 6-2. \uc0dd\uc131\ubaa8\ub378 \ud3c9\uac00","9cda0f9e":"Division matchType","20a4bfeb":"---","3ec658d3":"Game Player","80beb333":"\uac8c\uc784 \uc778\uc6d0\ubcc4\ub85c \ub2e4\ub978 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4\ubcf4\uc790 <br>\nMake model by matchtype","4719f1a2":"#### winPlacePerc","9316ab5b":"one-hot-encoding","757d0832":"## 2. \ub370\uc774\ud130 \ubbf8\ub9ac\ubcf4\uae30(Exploratory Data Analysis)","acedc7c2":"### 3-2-2. \uc815\uaddc\ud654(Normalization)","cc5a8adb":"### 2-1. \ub370\uc774\ud130 \uc694\uc57d(Describe)","c71ad771":"\ubcf4\ud1b5 \ud55c \uac8c\uc784\ub2f9 100\uba85\uc5d0\uc11c 80\uba85 \uc815\ub3c4 \ucc38\uac00\ud558\uc9c0\ub9cc \uba87\uba87 \uac8c\uc784\uc5d0\uc11c\ub294 \uadf8\ub807\uc9c0 \uc54a\uc74c","63d2364a":"The end of notebook","2530db62":"matchId <br>\n\uac01 \uac8c\uc784\uc5d0 \ud560\ub2f9\ub418\ub294 \uace0\uc720 \uac12","dd5645a7":"---","f6707dbf":"### 3-2. \uc5f0\uc18d\ud615 \ub370\uc774\ud130(Continuous variable)","b9950aca":"Id <br>\n\uac8c\uc784\ud50c\ub808\uc774\uc5b4\uc5d0 \ud560\ub2f9\ub418\ub294 \uace0\uc720 \uac12<br>\nUnique value for game player","2ef5d797":"### 6-4. \uc608\uce21\uc2e4\ud589","96fef196":"---","09936231":"matchType<br>\nmatchType\uc5d0\ub294 \ucd1d 16\uac00\uc9c0\uc758 \ud0c0\uc785\uc774 \uc788\ub2e4. \ud06c\uac8c solo, duo, squad\uc640 \uac19\uc740 \uadf8\ub8f9\uc778\uc6d0\uc5d0 \ub530\ub978 \uad6c\ubd84\uacfc fpp, tpp\uc640 \uac19\uc740 \ud50c\ub808\uc774 \uc2dc\uc810\uc5d0 \ub530\ub978 \uad6c\ubd84\uc774 \uc788\ub2e4. <br>\n\uadf8\ub8f9\uc778\uc6d0\uc5d0 \ub530\ub77c\uc11c matchType_1\uc774\ub77c\ub294 \uc0c8\ub85c\uc6b4 \uce7c\ub7fc\uc744 \uc0dd\uc131\ud558\uace0  matchType_2\uc5d0\ub294 \ud50c\ub808\uc774 \uc2dc\uc810\uc5d0 \ub530\ub77c\uc11c \ub098\ub208\uc815\ubcf4\ub97c \uc0c8\ub85c \uc0dd\uc131\ud55c\ub2e4. ","1dc669db":"### 6-3. \uc608\uce21 \ub370\uc774\ud130 \uc900\ube44","0f9ddc38":"---","878e68b3":"## 3. \ub370\uc774\ud130 \uc804\ucc98\ub9ac(Data Preprocessing)","4b7ceb4d":"### 3-1. \uc774\uc0b0\ud615 \ub370\uc774\ud130(Discrete variable) ","66b4864f":"groupId <br>\nduo, squad\uc758 \uacbd\uc6b0 \ud560\ub2f9\ub418\ub294 \uadf8\ub8f9 \uace0\uc720 \uac12, solo\uc758 \uacbd\uc6b0 groupId\uac00 \uac01\uc790 \ud560\ub2f9\ub41c\ub2e4. <br>\n\uac19\uc740 groupId\uc5d0\uc11c\ub294 \uac19\uc740 winPlacePerc\uac00 \ud560\ub2f9\ub41c\ub2e4.","d0e35be4":"winner winner chicken dinner","58f7c251":"### 2-2. \uce7c\ub7fc\uc758 \uc774\ub984 \ubc0f \ud0c0\uc785(Column's name and Type)"}}