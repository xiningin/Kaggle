{"cell_type":{"40ebb928":"code","5477ab4d":"code","25360e16":"code","48b5006c":"code","f687ec7b":"code","ceff1803":"code","4a366a02":"code","7f59c4b8":"code","7fa993c6":"code","b5a6c39f":"code","a4473955":"code","c1df695d":"code","3685f366":"code","b41c19c5":"code","5eafa77a":"code","f1f425c1":"code","49bcf1c5":"code","1a812c6f":"markdown"},"source":{"40ebb928":"import pandas as pd\nimport numpy as np\nimport cv2\nimport os\nimport re\n\nfrom PIL import Image\n\nimport albumentations as A\nfrom albumentations.pytorch.transforms import ToTensorV2\n\nimport torch\nimport torchvision\n\nfrom torchvision.models.detection.faster_rcnn import FastRCNNPredictor\nfrom torchvision.models.detection import FasterRCNN\nfrom torchvision.models.detection.rpn import AnchorGenerator\n\nfrom torch.utils.data import DataLoader, Dataset\nfrom torch.utils.data.sampler import SequentialSampler\n\nfrom matplotlib import pyplot as plt\n\nDIR_INPUT = '..\/input\/jstraindata'\n# DIR_TEST = f'{DIR_INPUT}\/video_1_(1280x960)'\nDIR_TEST = f'{DIR_INPUT}\/video_2_(640_480_dark)'\n\n# DIR_WEIGHTS = '\/kaggle\/input\/global-wheat-detection-public'\nDIR_WEIGHTS = '\/kaggle\/input\/roulette-frcnn-model'\n\nWEIGHTS_FILE = f'{DIR_WEIGHTS}\/fasterrcnn_resnet50_fpn_1.pth'","5477ab4d":"# test_df = pd.read_csv(f'{DIR_INPUT}\/sample_submission.csv')\n# test_df.shape\n\ndata = os.listdir(os.path.join(DIR_TEST))\ntest_df = pd.DataFrame(data, columns=['image_id'])\ntest_df","25360e16":"class WheatTestDataset(Dataset):\n\n    def __init__(self, dataframe, image_dir, transforms=None):\n        super().__init__()\n\n        self.image_ids = dataframe['image_id'].unique()\n        self.df = dataframe\n        self.image_dir = image_dir\n        self.transforms = transforms\n\n    def __getitem__(self, index: int):\n\n        image_id = self.image_ids[index]\n        records = self.df[self.df['image_id'] == image_id]\n\n        image = cv2.imread(f'{self.image_dir}\/{image_id}', cv2.IMREAD_COLOR)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\n        image \/= 255.0\n\n        if self.transforms:\n            sample = {\n                'image': image,\n            }\n            sample = self.transforms(**sample)\n            image = sample['image']\n\n        return image, image_id\n\n    def __len__(self) -> int:\n        return self.image_ids.shape[0]","48b5006c":"# Albumentations\ndef get_test_transform():\n    return A.Compose([\n        # A.Resize(512, 512),\n        ToTensorV2(p=1.0)\n    ])\n","f687ec7b":"# load a model; pre-trained on COCO\nmodel = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=False, pretrained_backbone=False)","ceff1803":"device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\n\nnum_classes = 2  # 1 class (wheat) + background\n\n# get number of input features for the classifier\nin_features = model.roi_heads.box_predictor.cls_score.in_features\n\n# replace the pre-trained head with a new one\nmodel.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)\n\n# Load the trained weights\nmodel.load_state_dict(torch.load(WEIGHTS_FILE))\nmodel.eval()\n\nx = model.to(device)","4a366a02":"def collate_fn(batch):\n    return tuple(zip(*batch))\n\ntest_dataset = WheatTestDataset(test_df, DIR_TEST, get_test_transform())\n\ntest_data_loader = DataLoader(\n    test_dataset,\n    batch_size=4,\n    shuffle=False,\n    num_workers=4,\n    drop_last=False,\n    collate_fn=collate_fn\n)","7f59c4b8":"def format_prediction_string(boxes, scores):\n    pred_strings = []\n    for j in zip(scores, boxes):\n        pred_strings.append(\"{0:.4f} {1} {2} {3} {4}\".format(j[0], j[1][0], j[1][1], j[1][2], j[1][3]))\n\n    return \" \".join(pred_strings)","7fa993c6":"detection_threshold = 0.3\nresults = []\n\nfor images, image_ids in test_data_loader:\n\n    images = list(image.to(device) for image in images)\n    outputs = model(images)\n\n    for i, image in enumerate(images):\n\n        boxes = outputs[i]['boxes'].data.cpu().numpy()\n        scores = outputs[i]['scores'].data.cpu().numpy()\n        \n        boxes = boxes[scores >= detection_threshold].astype(np.int32)\n        scores = scores[scores >= detection_threshold]\n        image_id = image_ids[i]\n        \n        boxes[:, 2] = boxes[:, 2] - boxes[:, 0]\n        boxes[:, 3] = boxes[:, 3] - boxes[:, 1]\n        \n        result = {\n            'image_id': image_id,\n            'PredictionString': format_prediction_string(boxes, scores)\n        }\n\n        \n        results.append(result)\n","b5a6c39f":"results[0:2]","a4473955":"test_df = pd.DataFrame(results, columns=['image_id', 'PredictionString'])\ntest_df.head()","c1df695d":"sample = images[1].permute(1,2,0).cpu().numpy()\nboxes = outputs[1]['boxes'].data.cpu().numpy()\nscores = outputs[1]['scores'].data.cpu().numpy()\n\nboxes = boxes[scores >= detection_threshold].astype(np.int32)","3685f366":"fig, ax = plt.subplots(1, 1, figsize=(16, 8))\n\nfor box in boxes:\n    cv2.rectangle(sample,\n                  (box[0], box[1]),\n                  (box[2], box[3]),\n                  (220, 0, 0), 2)\n    \nax.set_axis_off()\nax.imshow(sample)","b41c19c5":"test_df.to_csv('submission.csv', index=False)","5eafa77a":"test_df['score'] = -1\ntest_df['x'] = -1\ntest_df['y'] = -1\ntest_df['w'] = -1\ntest_df['h'] = -1\n\ndef expand_bbox(x):\n    r = np.array(re.findall(\"([0-9]+[.]?[0-9]*)\", x))\n    if len(r) == 0:\n        r = [-1, -1, -1, -1, -1]\n    return r\n\ntest_df[['score', 'x', 'y', 'w', 'h']] = np.stack(test_df['PredictionString'].apply(lambda x: expand_bbox(x)))\ntest_df.drop(columns=['PredictionString'], inplace=True)\ntest_df['score'] = test_df['score'].astype(np.float)\ntest_df['x'] = test_df['x'].astype(np.float)\ntest_df['y'] = test_df['y'].astype(np.float)\ntest_df['w'] = test_df['w'].astype(np.float)\ntest_df['h'] = test_df['h'].astype(np.float)","f1f425c1":"test_df","49bcf1c5":"import gc\n\ndetect_count = 0\nfor index, row in test_df.iterrows():\n    if row['score'] > 0:\n        score = row['score']\n        print(f'{index} : score = {score}')\n\n        image_id = row['image_id']\n        image = cv2.imread(f'{DIR_TEST}\/{image_id}', cv2.COLOR_BGR2RGB)\n\n#         sample = images[1].permute(1,2,0).cpu().numpy()\n        left = int(row['x'])\n        right = int(row['x'] + row['w'])\n        top = int(row['y'])\n        bottom = int(row['y'] + row['h'])\n        cv2.rectangle(image, (left, top),(right, bottom), (220, 0, 0), 2)\n    \n        fig, ax = plt.subplots(1, 1, figsize=(16, 8))\n        plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n        plt.show()\n#         gc.collect()\n#         break\n        detect_count += 1\nprint(detect_count)","1a812c6f":"# Check result"}}