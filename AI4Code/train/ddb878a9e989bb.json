{"cell_type":{"931511e6":"code","836905db":"code","13901258":"code","f6b6c59f":"code","9d7af63d":"code","d1f8a51f":"code","3740ff4d":"code","5f387d5b":"code","85b629f1":"code","23514dce":"code","e7ebf822":"code","8a6e8040":"code","70c8d921":"code","a219de0a":"code","f8e3e86e":"code","e2e281c6":"code","bad2229b":"code","388b0b85":"code","b30b3868":"code","399f48e1":"code","872f96d7":"code","0c0d1e4e":"code","39ea84be":"code","2a230d6f":"code","2094acb3":"code","945637db":"code","d7fdf88d":"code","9a777710":"code","0f266ae1":"code","8a223197":"code","6babdf9a":"code","21326b0f":"code","73b8e4e8":"code","f5fe7384":"code","5029a165":"code","0cd8d671":"code","c0e8430e":"code","0ecb7ee7":"code","d2ef8d26":"code","8b98d6b2":"code","574a2e31":"code","473375de":"code","07872071":"code","80c384b0":"code","537df0ab":"code","feacbe95":"code","aa70d5f9":"markdown","fb6ba472":"markdown","f5cc2c73":"markdown"},"source":{"931511e6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n# importing libraries\n%matplotlib inline\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","836905db":"# loading the datasets\n\n# loading the dig-minst.csv file\n\ndigit_df = pd.read_csv(\"\/kaggle\/input\/Kannada-MNIST\/Dig-MNIST.csv\")","13901258":"\n# loding the training data\n\ntrain_df = pd.read_csv(\"\/kaggle\/input\/Kannada-MNIST\/train.csv\")","f6b6c59f":"\n# loading the testing data\n\ntest_df = pd.read_csv(\"\/kaggle\/input\/Kannada-MNIST\/test.csv\")","9d7af63d":"digit_df.head()","d1f8a51f":"digit_df.describe()","3740ff4d":"digit_df.info()","5f387d5b":"train_df.describe()","85b629f1":"train_df.head()","23514dce":"train_df.info()","e7ebf822":"test_df.head()","8a6e8040":"test_df.describe()","70c8d921":"test_df.info()","a219de0a":"# checking the label distribution using sns - barchart\n\ntrain_df['label'].value_counts().plot(\"bar\")","f8e3e86e":"digit_df['label'].value_counts().plot('bar')","e2e281c6":"# getting all unique labels\n\npd.unique(train_df['label'])","bad2229b":"sns.distplot(train_df['label'])","388b0b85":"# removing the label from training data\n\ntrain = train_df.drop(['label'], axis = 1)","b30b3868":"train.head()","399f48e1":"# getting the label as our target data\n\ntarget = train_df['label']","872f96d7":"target.head()","0c0d1e4e":"# removing the id from the test dataframe\n\ntest = test_df.drop(\"id\", axis=1)","39ea84be":"test.head()","2a230d6f":"# getting some meta information from our training and testing dataframes\n\nprint(\"No.f rows in train data set: {}\".format(len(train)))\nprint(\"No.f rows in test data set: {}\".format(len(test)))\nprint(\"No.f rows in target data set: {}\".format(len(target)))","2094acb3":"print(\"No.f columns in train data set: {}\".format(len(train.columns)))\nprint(\"No.f columns in test data set: {}\".format(len(test.columns)))","945637db":"from sklearn.decomposition import PCA\n\npca = PCA(n_components=2)","d7fdf88d":"principal_components = pca.fit_transform(train)","9a777710":"principalDF = pd.DataFrame(data = principal_components,\n                                  columns=[\"Principal Component 1\", \"Principal Component 2\"])","0f266ae1":"finalDF = pd.concat([principalDF, target], axis=1)","8a223197":"finalDF.head()","6babdf9a":"# visualizing the Mnist data using a 2D plot\n\nfig = plt.figure(figsize = (8,8))\nax = fig.add_subplot(1,1,1) \nplt.xlim([-1500, 1500])\nplt.ylim([-1500, 1500])\nax.set_xlabel('Principal Component 1', fontsize = 15)\nax.set_ylabel('Principal Component 2', fontsize = 15)\nax.set_title('2 component PCA', fontsize = 20)\ntargets = [0, 1, 2, 3, 4, 5, 6]\ncolors = [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"]\nfor label, color in zip(targets, colors):\n    indicesToKeep = finalDF['label'] == label\n    ax.scatter(finalDF.loc[indicesToKeep, 'Principal Component 1'], \n               finalDF.loc[indicesToKeep, 'Principal Component 2'], \n               c = color,\n               s = 50)\nax.legend(targets)\nax.grid()","21326b0f":"# Standardizing the data\n\nfrom sklearn.preprocessing import StandardScaler\n\nstandard_scaler = StandardScaler()","73b8e4e8":"# transform train and test dataset\n\n# tranforming the training dataset\ntrain_transformed = standard_scaler.fit_transform(train)","f5fe7384":"# tranforming the test dataset\n\ntest_tranformed = standard_scaler.fit_transform(test)","5029a165":"train_transformed[:2]","0cd8d671":"test_tranformed[:2]","c0e8430e":"# importing sklearn, lgb and other libraries\n\nimport sklearn\nimport lightgbm as lgb\nfrom sklearn import metrics\nfrom sklearn import model_selection\n\n# for hyper parameter tuning we are using hypetopt instead of scikit-learn GridSearchCV\nfrom hyperopt import hp, tpe, fmin, STATUS_OK, Trials","0ecb7ee7":"pca = PCA(0.95)","d2ef8d26":"train_transformed = pca.fit_transform(train_transformed)","8b98d6b2":"test_tranformed = pca.fit_transform(test_tranformed)","574a2e31":"train_features, valid_features, y_train, y_valid = model_selection.train_test_split(train_transformed, target, test_size=0.30, random_state=123456789)","473375de":"print(\"Shape of the train_features data: {}\".format(train_features.shape))\nprint(\"Shape of the valid_features data: {}\".format(valid_features.shape))","07872071":"print(\"Shape of the y_train data: {}\".format(y_train.shape))\nprint(\"Shape of the y_valid data: {}\".format(y_valid.shape))","80c384b0":"# scoring and optimizatin function for lightgbm\n\ndef lgb_score(space):\n    print(\"Training with params: {}\".format(space))\n    \n    num_leaves = int(space['num_leaves'])\n    bagging_freq = int(space['bagging_freq'])\n    n_estimators = int(space['n_estimators'])\n    min_data_in_leaf = int(space['min_data_in_leaf'])\n\n    del space['num_leaves']\n    del space['bagging_freq']\n    del space['n_estimators']\n    del space['min_data_in_leaf']\n    \n    clf = lgb.LGBMClassifier(n_estimators=n_estimators,\n                             learning_rate=space['learning_rate'],\n                             min_data_in_leaf=min_data_in_leaf,\n                             bagging_freq=bagging_freq,\n                             min_sum_hessian_in_leaf=space['min_sum_hessian_in_leaf'],\n                             feature_fraction=space['feature_fraction'],\n                             bagging_fraction=space['bagging_fraction'],\n                             num_leaves=num_leaves,\n                             boost_from_average=space['boost_from_average'],\n                             boosting_type='gbdt',\n                             max_depth=-1,\n                             num_threads=8,\n                             verbosity=1,\n                             tree_learner='serial',\n                             objective = \"multiclass\")\n    clf.fit(train_features, y_train, eval_set=[(valid_features, y_valid)], verbose=5000, eval_metric='multi_logloss', early_stopping_rounds=2500)\n    predictions = clf.predict_proba(valid_features)[:, 1]\n    score = metrics.roc_auc_score(y_valid, predictions)\n    \n    return {'loss': 1 - score, 'status': STATUS_OK}","537df0ab":"# defining the space\n\ndef optimize(evals, random=42):\n    \n    space = {\n        'n_estimators': hp.uniform('n_estimators', 25000, 35000),\n        'learning_rate': hp.quniform('learning_rate', 0.00075, 0.0099, 0.00015),\n        'min_data_in_leaf': hp.uniform('min_data_in_leaf', 50, 50),\n        'bagging_freq': hp.uniform('bagging_freq', 5, 50),\n        'min_sum_hessian_in_leaf': hp.quniform('min_sum_hessian_in_leaf', 5.0, 75.0, 2.5),\n        'feature_fraction': hp.uniform('feature_fraction', 0.010, 0.095),\n        'bagging_fraction': hp.uniform('bagging_fraction', 0.015, 0.995),\n        'num_leaves': hp.uniform('num_leaves', 50, 100),\n        'boost_from_average': hp.choice('boost_from_average', ['true', 'false'])\n    }\n    \n    best = fmin(lgb_score, space=space, algo=tpe.suggest, max_evals=evals)\n    return best","feacbe95":"params = optimize(10)","aa70d5f9":"#### Projecting the data into a 2D plan using - PCA","fb6ba472":"#### Standardising \/ normalizing the data and then feed the data into to our model","f5cc2c73":"#### Loading the training and testing datasets and showing some basic statistics using pandas in-built describe() and info() functions."}}