{"cell_type":{"c8f35ece":"code","577ef97b":"code","2a85cace":"code","76f2e6f8":"code","251e0066":"code","0a9b194c":"code","637846a5":"code","55553789":"code","5cdc1086":"code","a5b3760e":"code","9920bcde":"code","9a3340f0":"code","7dab8f7f":"code","af1014db":"code","2c0078ac":"markdown","77774719":"markdown","98e0bba4":"markdown","72cb3421":"markdown","774ecf06":"markdown","615d649f":"markdown","dc24b6aa":"markdown","fb299b19":"markdown","a3a870e8":"markdown","727aebf8":"markdown"},"source":{"c8f35ece":"# Import libraries and define useful functions\n\n# import pandas as pd\nfrom urllib.request import urlopen\nimport json\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as po\nimport datetime\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# put plotly into notebook mode for graphics rendering\npo.init_notebook_mode(connected=False)\n\n# function to compute time to double for exponential growth\n# This won't be valid when the growth curve starts to look logistic\ndef doubling_time(x,y):\n    # pass in two numpy arrays \n    # The y values are assumed to be already in log\n    reg = LinearRegression().fit(x,y)\n    dbl_time = int(np.log(2)\/reg.coef_.item())\n    \n    return dbl_time\n\n# number of days to do moving average over\nma_days = 3\n\n# read in the county wide data\ndf = pd.read_csv('https:\/\/raw.githubusercontent.com\/nytimes\/covid-19-data\/master\/us-counties.csv')\ndf.head()","577ef97b":"# Figure out what the most current date is inside the dataset and get values for that date\nlatest_date = df.iloc[-1,0]\nis_nj = df['state']=='New Jersey'\nis_latest = df['date']==latest_date\ncases_nj_now = df[is_nj & is_latest].copy()\n# Get rid of rows with a county that is Unknown (I think these are cases that can't be tied to a county)\nnan_rows = cases_nj_now[cases_nj_now['county']=='Unknown'].index\ncases_nj_now.drop(nan_rows,inplace=True)\n\ncases_nj_hist = df[is_nj].copy()\ncases_nj_hist.drop(cases_nj_now[cases_nj_now['county']=='Unknown'].index, inplace=True)\nearliest_nj_date = cases_nj_hist.iloc[0,0]","2a85cace":"# Get fips county data to identify counties and use for map\nwith urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n# Use plotly's choropleth map\nfig = px.choropleth_mapbox(cases_nj_now, geojson=counties, locations='fips', color='cases',\n                           color_continuous_scale=\"Reds\",\n                           mapbox_style=\"carto-positron\",\n                           opacity=0.5,\n                           labels={'cases':'cases'},\n                           zoom=6, center = {\"lat\": 40.0583, \"lon\": -74.4057}\n                          )\n\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","76f2e6f8":"# get population data for per capita numbers\npop_all = pd.read_csv('https:\/\/www2.census.gov\/programs-surveys\/popest\/datasets\/2010-2019\/counties\/totals\/co-est2019-alldata.csv',encoding='mac-roman')\nnj = pop_all['STNAME']=='New Jersey'\ncounties = pop_all['COUNTY']!=0\nnj_pops = pop_all[nj & counties].copy()\nfips = nj_pops['STATE'].astype(str) + nj_pops['COUNTY'].apply(lambda x: str(x).zfill(3)).astype(str)\nnj_pops['fips'] = fips.astype(float)\norig_cols = list(nj_pops.columns)\nkeep_cols = ['fips', 'POPESTIMATE2019']\nres = [ele for ele in orig_cols]\nfor a in orig_cols:\n  if a in keep_cols:\n    res.remove(a)\ndrop_cols = res\nnj_pops = nj_pops.drop(drop_cols,axis=1)\ncases_nj_hist = cases_nj_hist.set_index('fips').join(nj_pops.set_index('fips'))\ncases_nj_hist['cases_per_100k']=cases_nj_hist['cases']*1e5\/cases_nj_hist['POPESTIMATE2019']\ncases_nj_hist['deaths_per_100k']=cases_nj_hist['deaths']*1e5\/cases_nj_hist['POPESTIMATE2019']\ncases_nj_hist.head()\n\n# Add a new trace to the plot for each county\ncontainer = []\nfor index, row in cases_nj_now.iterrows():\n    county=row['county']\n    county_data=cases_nj_hist[cases_nj_hist['county']==county]\n    days = (pd.to_datetime(county_data['date'],format='%Y-%m-%d')\n         -pd.to_datetime(earliest_nj_date,format='%Y-%m-%d')).dt.days.to_list()\n    cases = county_data['cases_per_100k']\n    legend_name = county\n    trace=go.Scatter(\n        x=days,\n        y=cases,\n        name=legend_name)\n    container.append(trace)\n    \nfig = go.Figure(container)\nttext = \"NJ Cases per 100k of population as of \"+datetime.datetime.today().strftime('%m\/%d\/%Y')+' by county'\nfig.update_layout(xaxis_type=\"linear\", yaxis_type=\"log\", title=ttext, xaxis_title='days')\nfig.show()","251e0066":"# Now we plot multiple traces for deaths per county\ncontainer = []\nfor index, row in cases_nj_now.iterrows():\n    county=row['county']\n    county_data=cases_nj_hist[cases_nj_hist['county']==county]\n    days = (pd.to_datetime(county_data['date'],format='%Y-%m-%d')\n         -pd.to_datetime(earliest_nj_date,format='%Y-%m-%d')).dt.days.to_list()\n    deaths = county_data['deaths_per_100k']\n    legend_name = county\n    trace=go.Scatter(\n        x=days,\n        y=deaths,\n        name=legend_name)\n    container.append(trace)\n    \nfig = go.Figure(container)\nttext = \"NJ Deaths per 100k population as of \"+datetime.datetime.today().strftime('%m\/%d\/%Y')+' by county'\nfig.update_layout(xaxis_type=\"linear\", yaxis_type=\"log\", title=ttext, xaxis_title='days')\nfig.show()","0a9b194c":"# Pull in the state by state data (no county data) versus time from the NYT\ndf = pd.read_csv('https:\/\/raw.githubusercontent.com\/nytimes\/covid-19-data\/master\/us-states.csv')\ndf.head()","637846a5":"# Plot versus days with respect to the first reported case\nnj_timeline = df[df['state']=='New Jersey'].copy()\ndays = (pd.to_datetime(nj_timeline['date'],format='%Y-%m-%d')\n         -pd.to_datetime(earliest_nj_date,format='%Y-%m-%d')).dt.days.to_list()\ncases = nj_timeline['cases']\ndeaths = nj_timeline['deaths']\ncontainer = []\ntrace=go.Scatter(\n    x=nj_timeline['date'],\n    y=cases,\n    name='cases')\ncontainer.append(trace)\ntrace=go.Scatter(\n    x=nj_timeline['date'],\n    y=deaths,\n    name='deaths')\ncontainer.append(trace)\n\ndbl_time = doubling_time(np.asarray(days[-7:]).reshape(-1,1), np.log(cases.values[-7:].reshape(-1,1)))\n\ntick_space = 86400000.0*2\nfig = go.Figure(container)\nttext = \"NJ Data as of \"+datetime.datetime.today().strftime('%m\/%d\/%Y')+' starting on '+earliest_nj_date+'; double time = '+str(dbl_time)+' days'\nfig.update_layout(xaxis_type=\"date\", yaxis_type=\"log\", title=ttext, xaxis_title='date')\nfig.update_layout(xaxis_dtick=tick_space,xaxis_tickformat=\"%m\/%d\")\nfig.show()","55553789":"nj_timeline['d_cases']=nj_timeline['cases'].shift(-1)-nj_timeline['cases']\nnj_timeline['d_deaths']=nj_timeline['deaths'].shift(-1)-nj_timeline['deaths']\nnj_timeline['ma_d_cases']=nj_timeline.d_cases.rolling(ma_days).mean()\nnj_timeline['ma_d_deaths']=nj_timeline.d_deaths.rolling(ma_days).mean()\n\n\ncontainer = []\ntrace=go.Bar(\n    x=nj_timeline['date'],\n    y=nj_timeline['d_cases'],\n    name='new cases')\ncontainer.append(trace)\n\ntrace=go.Scatter(\n    x=nj_timeline['date'],\n    y=nj_timeline['ma_d_cases'],\n    name='smoothed new cases')\ncontainer.append(trace)\n\ntrace=go.Bar(\n    x=nj_timeline['date'],\n    y=nj_timeline['d_deaths'],\n    name='new deaths')\ncontainer.append(trace)\n\ntrace=go.Scatter(\n    x=nj_timeline['date'],\n    y=nj_timeline['ma_d_deaths'],\n    name='smoothed new deaths')\ncontainer.append(trace)\n\ntick_space = 86400000.0*2\nfig = go.Figure(container)\nttext = \"NJ Change Data as of \"+datetime.datetime.today().strftime('%m\/%d\/%Y')+' starting on '+earliest_nj_date\nfig.update_layout(xaxis_type=\"date\", yaxis_type=\"linear\", title=ttext, xaxis_title='date',yaxis_title='new cases\/deaths')\nfig.update_layout(xaxis_dtick=tick_space,xaxis_tickformat=\"%m\/%d\")\nfig.show()\n","5cdc1086":"# Define a function that plots the new daily cases given county name as an input\ndef plot_county_change(county):\n    #county='Monmouth'\n    monmouth_county_data=cases_nj_hist[cases_nj_hist['county']==county].copy()\n    monmouth_county_data['d_cases']=monmouth_county_data['cases'].shift(-1)-monmouth_county_data['cases']\n    monmouth_county_data['ma_d_cases']=monmouth_county_data.d_cases.rolling(ma_days).mean()\n\n    container = []\n    trace=go.Bar(\n        x=monmouth_county_data['date'],\n        y=monmouth_county_data['d_cases'],\n        name='new cases')\n    container.append(trace)\n\n    trace=go.Scatter(\n        x=monmouth_county_data['date'],\n        y=monmouth_county_data['ma_d_cases'],\n        name='smoothed new cases')\n    container.append(trace)\n    \n    dbl_time = doubling_time(np.asarray(days[-7:]).reshape(-1,1), np.log(monmouth_county_data['cases'].values[-7:].reshape(-1,1)))\n    \n    tick_space = 86400000.0*2\n    fig = go.Figure(container)\n    ttext = county+\" County Change Data as of \"+datetime.datetime.today().strftime('%m\/%d\/%Y')+' starting on '+earliest_nj_date+'; double time = '+str(dbl_time)+' days'\n    fig.update_layout(xaxis_type=\"date\", yaxis_type=\"linear\", title=ttext, xaxis_title='date',yaxis_title='new cases')\n    fig.update_layout(xaxis_dtick=tick_space,xaxis_tickformat=\"%m\/%d\")\n    fig.show()\n    \nplot_county_change('Monmouth')","a5b3760e":"plot_county_change('Morris')","9920bcde":"plot_county_change('Somerset')","9a3340f0":"plot_county_change('Ocean')","7dab8f7f":"plot_county_change('Mercer')","af1014db":"df = pd.read_json('https:\/\/covidtracking.com\/api\/v1\/states\/daily.json')\ndf_nj = df[df['state']=='NJ'].copy()\ndf_nj['pct_pos']=100.*df_nj['positiveIncrease']\/df_nj['totalTestResultsIncrease']\ndf_nj['date'] = pd.to_datetime(df_nj['date'].astype(str), format='%Y%m%d')\ndf_nj[df_nj['pct_pos'] > 60]=np.nan\ntrace=go.Scatter(\n    x=df_nj['date'][:-20],\n    y=df_nj['pct_pos'][:-20])\n\ntick_space = 86400000.0*2\nfig = go.Figure(trace)\nttext = 'Daily percent positive tests'\nfig.update_layout(xaxis_type=\"date\", yaxis_type=\"linear\", title=ttext, xaxis_title='date',yaxis_title='percent positive')\nfig.update_layout(xaxis_dtick=tick_space,xaxis_tickformat=\"%m\/%d\")\nfig.show()","2c0078ac":"# County by county data over time\n\nNow, let's take a look at the timeline for cases split out by county.\nMake an interactive plot that shows how the number of cases in each county has changed over time.\n\nUse plotly's built in coolness to hover over a trace to see the values for each county. The plots are fully interactive, so try other things, too.","77774719":"# Change in cases and deaths statewide vs time","98e0bba4":"# Plot deaths for each county versus time","72cb3421":"# Change in cases versus time for individual counties","774ecf06":"# Map of current cases in NJ","615d649f":"# Cases and deaths for the whole state of NJ versus time","dc24b6aa":"Use data from today to make a county-wide geographic plot","fb299b19":"# New Jersey statistics for COVID-19 vs time\n\nThis notebook does some data exploration of the time series case and deaths data for NJ (the state with the second most cases).\n\nWe look at total cases right now using a choropleth map, look at the number of cases and deaths over time statewide abd broken down by county per 100,000 population.\n\nA source of data for COVID cases by county is in the <a href='https:\/\/github.com\/nytimes\/covid-19-data'>New York Times github repository<\/a>.\n\nA source for county population data needed to measure number of cases and deaths can be found at the <a href='https:\/\/www2.census.gov\/programs-surveys\/popest\/datasets\/2010-2019\/counties\/totals\/co-est2019-alldata.csv'>US Census site<\/a>\n\nThe COVID tracking project has some pretty detailed data that can also be used for case and death count and also number of negatives and total tests. They have a <a href='https:\/\/covidtracking.com\/api'>Data API<\/a> where you can download the data.\n","a3a870e8":"# Percent positive cases analysis\n\nAN indication that enough testing is being done is that the percent of tests that are positive trends lower. Experts say a target of 10% positive is a good goal for when to ease social distancing rules.\n\nUnfortunately, the data loaded above does not contain number of negative cases. There is another source of data from the COVID tracking project that has more detailed information there. The data is located <a href='https:\/\/covidtracking.com\/api\/v1\/states\/daily.json'>here<\/a>.\n\nThe initial 20 days worth of data was thrown out, since there were very few tests being performed and the percent positive was not too meaningful.\n\nLooking at the data below, though, there is a very long way to go and much, much more testing needs to be done.","727aebf8":"# Plotting NJ daily new cases and deaths vs time statewide"}}