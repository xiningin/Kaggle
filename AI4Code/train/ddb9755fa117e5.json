{"cell_type":{"8bfb1b40":"code","368ba499":"code","938d5b47":"code","68910980":"code","f9bd88a7":"code","56af8a83":"code","685330b0":"code","3d29a73a":"code","0a2c49b0":"code","25cc12cb":"code","a18836e8":"code","0e642be3":"code","7eb56d22":"code","2c0b8aa8":"code","df3ca949":"code","d32d53d3":"code","8aa8b7e3":"code","6efa342e":"code","f044d367":"code","925931a1":"code","fa35a7b1":"code","0cc9ef09":"code","60a48bd6":"code","3c3d1a66":"code","eccd7d48":"code","6219a36f":"code","78f7eb5d":"code","62eca10f":"code","acfc603c":"code","b0a19b51":"code","9d29c0ae":"code","9f7cb833":"markdown","32e8f42e":"markdown","02106442":"markdown","f76485f2":"markdown","2103d68e":"markdown","d61a58f6":"markdown","7f35c547":"markdown","854d6961":"markdown","44445b26":"markdown"},"source":{"8bfb1b40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","368ba499":"import PIL\nimport cv2\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport seaborn as sns","938d5b47":"height = 75\nwidth = 75","68910980":"PATH = \"\/kaggle\/input\/eyes-rtte\/\"\ntrain_dir = os.path.join(PATH)\ntrain = keras.preprocessing.image_dataset_from_directory(train_dir,validation_split=(0.2),subset=\"training\",seed=42,image_size=(height,width))\nvalidation = keras.preprocessing.image_dataset_from_directory(train_dir,validation_split=(0.2),subset=\"validation\",seed=42,image_size=(height,width))","f9bd88a7":"plt.figure(figsize=(10,10))\nfor images,labels in train.take(1):\n    for i in range(9):\n        plt.subplot(3,3,i+1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.title(train.class_names[labels[i]])\n        plt.axis(False)","56af8a83":"scaler = keras.Sequential([keras.layers.Rescaling(1\/255)])","685330b0":"augmentation = keras.Sequential([keras.layers.RandomZoom(0.2),\n                                keras.layers.RandomRotation(0.3),\n                                keras.layers.RandomFlip(\"horizontal\")])","3d29a73a":"model = keras.Sequential([scaler,\n                          keras.layers.Conv2D(16,kernel_size=3,strides=1,input_shape=(75,75,3)),\n                          keras.layers.Conv2D(32,kernel_size=3,strides=1),\n                          keras.layers.BatchNormalization(),\n                          keras.layers.Activation(\"relu\"),\n                          keras.layers.MaxPooling2D(2),\n                          keras.layers.SpatialDropout2D(0.2),\n                          keras.layers.Conv2D(64,kernel_size=3,strides=1),\n                          keras.layers.BatchNormalization(),\n                          keras.layers.Activation(\"relu\"),\n                          keras.layers.MaxPooling2D(2),         \n                          keras.layers.SpatialDropout2D(0.2),\n                          keras.layers.Flatten(),\n                          keras.layers.Dense(128,activation=\"relu\"),\n                          keras.layers.Dropout(0.2),\n                          keras.layers.Dense(1,activation=\"sigmoid\")\n\n    \n    \n])","0a2c49b0":"model.compile(loss=\"binary_crossentropy\",metrics=[\"accuracy\"],optimizer=\"adam\")\nearly_stop = keras.callbacks.EarlyStopping(patience=3)","25cc12cb":"model.summary()","a18836e8":"history = model.fit(train,validation_data=validation,epochs=10,callbacks=early_stop)","0e642be3":"history_df = pd.DataFrame(history.history)\nplt.plot(history_df.accuracy,label=\"Accuracy\")\nplt.plot(history_df.val_accuracy,label=\"Validation Accuracy\")\nplt.xlabel(\"Epochs\"),\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.grid()","7eb56d22":"plt.plot(history_df.loss,label=\"Loss\")\nplt.plot(history_df.val_loss,label=\"Validation Loss\")\nplt.xlabel(\"Epochs\"),\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.grid()","2c0b8aa8":"prediction = model.predict(validation)","df3ca949":"prediction_labels = []\nfor i in prediction:\n    if i >0.5:\n        prediction_labels.append(1)\n    else:\n        prediction_labels.append(0)","d32d53d3":"plt.figure(figsize=(10,10))\nfor images,labels in validation.take(1):\n    for i in range(9):\n        plt.subplot(3,3,i+1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.title(f\"Actual:{validation.class_names[labels[i]]},Predicted:{validation.class_names[prediction_labels[i]]}\",fontsize=10)\n        plt.axis(False)\n        plt.tight_layout()\n","8aa8b7e3":"inception = keras.applications.InceptionV3(input_shape = (75, 75, 3), include_top = False, weights = 'imagenet')","6efa342e":"for layer in inception.layers:\n    layer.trainable = False","f044d367":"model_inception = keras.Sequential([scaler,\n                                    inception,\n                                    keras.layers.Flatten(),\n                                    keras.layers.Dense(30,activation=\"relu\"),\n                                    keras.layers.Dropout(0.2),\n                                    keras.layers.Dense(1,activation=\"sigmoid\")\n    \n])","925931a1":"model_inception.compile(loss=\"binary_crossentropy\",metrics=[\"accuracy\"],optimizer=\"adam\")\nearly_stop = keras.callbacks.EarlyStopping(patience=3)","fa35a7b1":"history_inception = model_inception.fit(train,validation_data=validation,epochs=10,callbacks=early_stop)","0cc9ef09":"history_inception_df = pd.DataFrame(history_inception.history)\nplt.plot(history_inception_df.accuracy,label=\"Accuracy\")\nplt.plot(history_inception_df.val_accuracy,label=\"Validation Accuracy\")\nplt.xlabel(\"Epochs\"),\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.grid()","60a48bd6":"plt.plot(history_inception_df.loss,label=\"Loss\")\nplt.plot(history_inception_df.val_loss,label=\"Validation Loss\")\nplt.xlabel(\"Epochs\"),\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.grid()","3c3d1a66":"mobile_net = keras.applications.MobileNet(input_shape=(75,75,3) , include_top=False,weights=\"imagenet\")","eccd7d48":"for layer in mobile_net.layers:\n    layer.trainable = False","6219a36f":"model_mobile = keras.Sequential([scaler,\n                                 mobile_net,\n                                 keras.layers.Flatten(),\n                                 keras.layers.Dense(30,activation=\"relu\"),\n                                 keras.layers.Dropout(0.2),\n                                 keras.layers.Dense(1,activation=\"sigmoid\")\n])","78f7eb5d":"model_mobile.compile(loss=\"binary_crossentropy\",metrics=[\"accuracy\"],optimizer=\"adam\")\nearly_stop = keras.callbacks.EarlyStopping(patience=3)","62eca10f":"history_mobile = model_mobile.fit(train,validation_data=validation,epochs=10,callbacks=early_stop)","acfc603c":"history_mobile_df = pd.DataFrame(history_mobile.history)\nplt.plot(history_mobile_df.accuracy,label=\"Accuracy\")\nplt.plot(history_mobile_df.val_accuracy,label=\"Validation Accuracy\")\nplt.xlabel(\"Epochs\"),\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.grid()","b0a19b51":"plt.plot(history_mobile_df.loss,label=\"Loss\")\nplt.plot(history_mobile_df.val_loss,label=\"Validation Loss\")\nplt.xlabel(\"Epochs\"),\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.grid()","9d29c0ae":"plt.figure(figsize=(15,15))\nfor images,labels in validation.take(1):\n    for i in range(4):\n        plt.subplot(2,2,i+1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.axis(False)\n        \n        prediction = model.predict(validation)\n        prediction_2 = model_inception.predict(validation)\n        prediction_3 = model_mobile.predict(validation)\n        \n        prediction_label = []\n        prediction_2_label = []\n        prediction_3_label = []\n        \n        for x in prediction:\n            if x >0.5:\n                prediction_label.append(1)\n            else:\n                prediction_label.append(0)\n        for y in prediction_2:\n            if y > 0.5:\n                prediction_2_label.append(1)\n            else:\n                prediction_2_label.append(0)\n        for z in prediction_3:\n            if z > 0.5:\n                prediction_3_label.append(1)\n            else:\n                prediction_3_label.append(0)\n        \n        plt.title(f\"Actual {validation.class_names[labels[i]]} , CNN {validation.class_names[prediction_label[i]]}, Inception {validation.class_names[prediction_2_label[i]]}, MobileNet {validation.class_names[prediction_3_label[i]]}\",fontsize=10)\n    ","9f7cb833":"# **Evaluating Model Performance**","32e8f42e":"# **Creating CNN Model**","02106442":"# **Evaluating Second Model Performance**","f76485f2":"# **Third CNN Model(MobileNet)**","2103d68e":"# **Making Predictions With All Models**","d61a58f6":"# **Making Predictions**","7f35c547":"# **Second CNN Model(InceptionV3)**","854d6961":"# **Loading Data**","44445b26":"# **Plotting Train Data**"}}