{"cell_type":{"718ae1a3":"code","f61ff422":"code","c8a424de":"code","cc18cdf5":"code","27c31903":"code","c0b114b2":"code","480cf5c3":"code","85b9d108":"code","b2a25bc5":"code","e108dcb3":"code","ce4669d7":"code","63bc1447":"code","11a1034e":"code","30274c07":"code","5bc461b6":"code","6c5b2162":"code","2b7a126c":"code","f5acd7d8":"code","96078e1d":"code","3a092290":"code","dc8c4f1f":"code","4f4937d3":"code","944b6218":"code","f74879cb":"code","968c5301":"code","9a0e0164":"code","a5942333":"code","debb0f03":"code","09880c13":"code","26b8e73e":"code","731b3a8a":"code","ec9343a7":"code","eb820a8e":"code","2b000e8d":"code","9c6e60f6":"code","2e241fda":"code","9fc9e2fb":"code","14eead4d":"code","74f0adfb":"code","bd1eb998":"markdown","c0d64dca":"markdown","e88bdfb2":"markdown","b26a0cbb":"markdown","c596b1b8":"markdown","a8bb53a3":"markdown","09c3cb9e":"markdown","37fe984a":"markdown"},"source":{"718ae1a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f61ff422":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c8a424de":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head()","cc18cdf5":"train.shape","27c31903":"train.describe()","c0b114b2":"train.isnull()","480cf5c3":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False)","85b9d108":"# Plooting some visualization to understand features\ndef bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))\nbar_chart('Sex')\nbar_chart('Pclass')\nbar_chart('Embarked')\nbar_chart('Parch')\nbar_chart('SibSp')","b2a25bc5":"sns.distplot(train['Age'].dropna(),kde=False,color = 'darkred',bins=10)","e108dcb3":"train['Age'].hist(bins=30,color='darkred',alpha=0.3)","ce4669d7":"# Analysis accprding to fare\ntrain['Fare'].hist(color='green',bins=40,figsize=(8,4))","63bc1447":"def process_data(df):\n    df.Age = df[['Age', 'Pclass']].apply(impute_age, axis = 1)\n    df['Fare'] = np.log1p(df['Fare'])\n    df['Age'] = np.sqrt(df['Age'])\n    df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis = 1, inplace = True)\n    return df","11a1034e":"#Handling missing data\ndef impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        \n        if Pclass == 1:\n            return 37\n        \n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age","30274c07":"train['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)","5bc461b6":"#Cabin is not related to survival\ntrain.drop('Cabin',axis=1,inplace=True)","6c5b2162":"train.head()","2b7a126c":"# Replacing missing values with NaN\ntrain.dropna(inplace=True)","f5acd7d8":"#Convertical categorical features into numerical form\ntrain.info()","96078e1d":"sex = pd.get_dummies(train['Sex'],drop_first = True)\nembark=pd.get_dummies(train['Embarked'],drop_first = True)","3a092290":"pd.get_dummies(train['Embarked'],drop_first=True).head()","dc8c4f1f":"train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)","4f4937d3":"train.head()","944b6218":"train = pd.concat([train,sex,embark],axis=1)","f74879cb":"train.head()","968c5301":"# Splitting training and test dataset\nfrom sklearn.model_selection import train_test_split\nX_train , X_test, y_train, y_test = train_test_split(train.drop('Survived',axis=1),\n                                                    train['Survived'],test_size =0.30,\n                                                    random_state=0)","9a0e0164":"from sklearn.linear_model import LogisticRegression\nx= train.iloc[:, [2,3]].values  \ny= train.iloc[:, 4].values  \n","a5942333":"log_model = LogisticRegression(solver='liblinear')\nlog_model.fit(X_train,y_train)","debb0f03":"#predicting the test results\nlog_predict = log_model.predict(X_test)\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\naccuracy_lr = confusion_matrix(y_test,log_predict)\naccuracy_lr\nprint(cross_val_score(log_model,x,y,cv=5))\naccuracy = accuracy_score(y_test,log_predict)*100\naccuracy","09880c13":"from sklearn.tree import DecisionTreeClassifier \nclassifier_model= DecisionTreeClassifier(criterion='entropy', random_state=0)  \nclassifier_model.fit(X_train, y_train)  ","26b8e73e":"#Predicting the result on test dataset  \nclassifier_predict= classifier_model.predict(X_test)\naccuracy_classifier= accuracy_score(y_test,classifier_predict)*100\naccuracy_classifier\n","731b3a8a":"print(cross_val_score(classifier_model,x,y,cv=4))","ec9343a7":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,classifier_predict))","eb820a8e":"from sklearn.neighbors import KNeighborsClassifier\nknn_model = KNeighborsClassifier(n_neighbors=7)\nknn_model.fit(X_train, y_train)","2b000e8d":"knn_pred =knn_model.predict(X_test)\naccuracy_knn =accuracy_score(knn_pred,y_test)*100\nprint(\"The accuracy for knn Model :\",accuracy_knn)\nprint(cross_val_score(knn_model,x,y,cv=5))","9c6e60f6":"from sklearn.svm import SVC\n                                                \nsvc_model = SVC(kernel='linear', random_state=0)  \nsvc_model.fit(X_train, y_train)","2e241fda":"svc_predict = svc_model.predict(X_test)\naccuracy_SVC =accuracy_score(svc_predict,y_test)*100\nprint(\"The accuracy OF Support vector :\",accuracy_SVC)\nprint(cross_val_score(svc_model,x,y,cv=5))","9fc9e2fb":"from sklearn.naive_bayes import GaussianNB\ngaussian_model = GaussianNB()\ngaussian_model.fit(X_train, y_train)","14eead4d":"gaussian_predict = gaussian_model.predict(X_test)  \naccuracy_NB =accuracy_score(gaussian_predict,y_test)*100\nprint(\"The accuracy OF GaussianNB :\",accuracy_NB)","74f0adfb":"from prettytable import PrettyTable\nTable = PrettyTable([\"Algorithm\", \"Accuracy\"])\nTable.add_row([\"LogisticRegression\", accuracy_lr])\nTable.add_row([\"Decision Tree\", accuracy_classifier])\nTable.add_row([\"KNN\", accuracy_knn])\nTable.add_row([\"SVC\", accuracy_SVC])\nTable.add_row([\"gaussianNB\", accuracy_NB])\nprint(Table)","bd1eb998":"### Support vector algorithm","c0d64dca":"### DecisionTree","e88bdfb2":"### Model Building","b26a0cbb":"### Gaussian NB","c596b1b8":"### Check for missing data","a8bb53a3":"### Importing required Libraries\n","09c3cb9e":"### TITANIC DATASET\nThe data has been split into two groups:\n\ntraining set (train.csv)\ntest set (test.csv)\nThe training set should be used to build your machine learning models.The test set should be used to see how well your model performs on unseen data.\nIt also include gender_submission.csv, a set of predictions that assume all and only female passengers survive.","37fe984a":"### KNN Algorithm"}}