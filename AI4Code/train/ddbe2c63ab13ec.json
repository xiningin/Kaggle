{"cell_type":{"ba7cc2ce":"code","f381d08d":"code","c5051405":"code","1c5c30db":"code","efc68cb0":"code","769bd423":"code","dc49aa78":"code","7c90e84a":"code","06364fbb":"code","8d149b2e":"code","1cd29a20":"code","ba630b88":"code","ec8616a4":"code","6052abb3":"code","e16789d5":"code","db130151":"code","8c57dd1c":"code","263e2db2":"markdown","f49885ef":"markdown","007cb23d":"markdown","431efd38":"markdown","30fc502e":"markdown","fff25e78":"markdown","73b46eeb":"markdown","ffd62f6a":"markdown","a4295244":"markdown","0099f3fa":"markdown","82201a7f":"markdown","dc5fbcc9":"markdown","fc375b1f":"markdown","6feee283":"markdown","671fc8be":"markdown","2a83969e":"markdown","fd8c78b7":"markdown","86e96a6b":"markdown","bcb5356f":"markdown","301ceb80":"markdown","f86cc909":"markdown","cb2f1f05":"markdown","4c62dca0":"markdown"},"source":{"ba7cc2ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.model_selection import train_test_split,GridSearchCV, StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f381d08d":"df = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\ndf.head()","c5051405":"df.drop([\"Id\"],axis=1,inplace=True)\ndf.head()","1c5c30db":"df.info()","efc68cb0":"df.describe().T","769bd423":"df.isnull().sum()","dc49aa78":"sns.countplot(df.Species);","7c90e84a":"plt.figure(figsize=(10,5))\nsns.heatmap(df.corr(),annot=True, linewidths=1);","06364fbb":"sns.FacetGrid(df, hue=\"Species\", size=5).map(plt.scatter, \"SepalLengthCm\", \"SepalWidthCm\").add_legend();","8d149b2e":"sns.FacetGrid(df, hue=\"Species\", size=5).map(plt.scatter, \"PetalLengthCm\", \"PetalWidthCm\").add_legend();","1cd29a20":"violincols=[\"SepalLengthCm\",\"SepalWidthCm\",\"PetalLengthCm\",\"PetalWidthCm\"]\nfor i in violincols:\n    sns.factorplot(x=\"Species\",y=i,data=df,kind=\"violin\");","ba630b88":"y=df.Species\nX=df.drop([\"Species\"],axis=1)\n\n# normalization\nX=(X-np.min(X))\/(np.max(X)-np.min(X))\n\nX_sepal=X.loc[:,[\"SepalLengthCm\",\"SepalWidthCm\"]]\nX_petal=X.loc[:,[\"PetalLengthCm\",\"PetalWidthCm\"]]","ec8616a4":"X_sepaltrain,X_sepaltest,y_sepaltrain,y_sepaltest=train_test_split(X_sepal,y,test_size=0.3,random_state=42)\nX_petaltrain,X_petaltest,y_petaltrain,y_petaltest=train_test_split(X_petal,y,test_size=0.3,random_state=42)","6052abb3":"logregsepal = LogisticRegression().fit(X_sepaltrain,y_sepaltrain)\nlogregpetal= LogisticRegression().fit(X_petaltrain,y_petaltrain)\nprint(\"logistic regression accuracy for sepal:\",logregsepal.score(X_sepaltest,y_sepaltest))\nprint(\"logistic regression accuracy for petal:\",logregpetal.score(X_petaltest,y_petaltest))","e16789d5":"knnsepal= KNeighborsClassifier().fit(X_sepaltest,y_sepaltest)\nknnpetal=KNeighborsClassifier().fit(X_petaltest,y_petaltest)\nprint(\"KNN accuracy for sepal:\",knnsepal.score(X_sepaltest,y_sepaltest))\nprint(\"KNN accuracy for petal:\",knnpetal.score(X_petaltest,y_petaltest))","db130151":"treesepal= DecisionTreeClassifier().fit(X_sepaltest,y_sepaltest)\ntreepetal=DecisionTreeClassifier().fit(X_petaltest,y_petaltest)\nprint(\"Decision tree accuracy for sepal:\",treesepal.score(X_sepaltest,y_sepaltest))\nprint(\"Decision tree accuracy for petal:\",treepetal.score(X_petaltest,y_petaltest))","8c57dd1c":"rfsepal= RandomForestClassifier().fit(X_sepaltest,y_sepaltest)\nrfpetal=RandomForestClassifier().fit(X_petaltest,y_petaltest)\nprint(\"Random Forest accuracy for sepal:\",rfsepal.score(X_sepaltest,y_sepaltest))\nprint(\"Random Forest accuracy for petal:\",rfpetal.score(X_petaltest,y_petaltest))","263e2db2":"# Visualization","f49885ef":"# Split the data into train and test","007cb23d":"* Id column is not usable. Lets drop the Id column.","431efd38":"* Using Petals over Sepal for training the data gives a much better accuracy.","30fc502e":"# Logistic regression","fff25e78":"* We dont have any null data which is great.","73b46eeb":"# Random Forest","ffd62f6a":"* We can distinguish setosa easily but versicolor and virginica is not clear.","a4295244":"50 obs. for each type of species.","0099f3fa":"* Violin plots support our thinking about scatter plots.","82201a7f":"# Modeling","dc5fbcc9":"* It seems like Petal is better than Sepal to distinguish Species.","fc375b1f":"# Conclusion","6feee283":"## Count Plot","671fc8be":"# Decision Tree","2a83969e":"# KNN","fd8c78b7":"## Scatter Plot","86e96a6b":"* There is no correlation between SepalLengthCm and SepalWidthCm.\n\n* SepalLengthCm is higly correlated with PetalWidthCm and PetalLengthCm.\n\n* PetalWidthCm is highly correlated with PetalLengthCm.","bcb5356f":"## Violin Plot","301ceb80":"* I'm a beginner so please let me know If I made a mistake.\n* If you have any question, please comment them.\n* If you liked this kernel please upvote :)","f86cc909":"# Take a quick look to Iris dataset","cb2f1f05":"## Heatmap","4c62dca0":"* We have 5 features with 150 observations. Indipendent variables are float and the dependent variable is object."}}