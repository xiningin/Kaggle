{"cell_type":{"44ca8a75":"code","4950c693":"code","f65849bf":"code","effd5b82":"code","eda74f8a":"code","b3e36849":"code","35093d09":"code","57ccf4d5":"code","098ff3c5":"code","388422cf":"code","f29eefb5":"code","8f693fc3":"code","8d73b244":"code","a1acf486":"code","85ae3e0a":"code","fc1f6166":"code","1c70de3f":"code","c4d20cd5":"code","053b84a1":"markdown","ed9b708b":"markdown","6272f74b":"markdown"},"source":{"44ca8a75":"%%sh\npip install -q rich dabl","4950c693":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport cv2\nimport dabl\nimport shutil\nimport glob\nfrom tqdm.notebook import tqdm\nfrom rich import print as _pprint\nfrom PIL import Image, ImageChops\nfrom joblib import Parallel, delayed\n\nimport warnings\nwarnings.simplefilter('ignore')","f65849bf":"def cprint(string:str, end=\"\\n\"):\n    \"\"\"\n    A little utility function for printing and stuff\n    \"\"\"\n    _pprint(f\"[black]{string}[\/black]\", end=end)","effd5b82":"train_file = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/train.csv\")\ntest_file = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/test.csv\")\nsample_sub = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/sample_submission.csv\")","eda74f8a":"train_file.head()","b3e36849":"train_file.describe()","35093d09":"test_file.head()","57ccf4d5":"test_file.describe()","098ff3c5":"plt.figure(figsize=(7, 7))\nplt.title(f\"Pawpularity Distribution\")\nsns.histplot(train_file['Pawpularity'], stat='density')\nsns.kdeplot(train_file['Pawpularity'], color='blue')\nplt.axvline(train_file['Pawpularity'].mean(), color='red', linestyle='--', linewidth=0.8)\nmin_ylim, max_ylim = plt.ylim()\nplt.text(train_file['Pawpularity'].mean()*1.05, max_ylim*0.96, 'Mean (\u03bc): {:.2f}'.format(train_file['Pawpularity'].mean()))\nplt.xlabel(\"Pawpularity Score\")\nplt.ylabel(\"Density\")\nplt.show()","388422cf":"cprint(f\"[bold]Max Pawpularity Score:[\/bold] [green]{train_file['Pawpularity'].max()}[\/green]\")\ncprint(f\"[bold]Min Pawpularity Score:[\/bold] [red]{train_file['Pawpularity'].min()}[\/red]\")\ncprint(f\"[bold]Average Pawpularity Score:[\/bold] [blue]{train_file['Pawpularity'].mean():.2f}[\/blue]\")","f29eefb5":"plt.style.use('ggplot')\ntr = train_file.drop(['Id'], axis=1)\nret = dabl.plot(tr, target_col='Pawpularity')","8f693fc3":"train_file_names = glob.glob(\"..\/input\/petfinder-pawpularity-score\/train\/*.jpg\")\ntest_file_names = glob.glob(\"..\/input\/petfinder-pawpularity-score\/test\/*.jpg\")\n\ncprint(f\"Train Images Count: [green]{len(train_file_names)}[\/green]\")\ncprint(f\"Test Images Count: [green]{len(test_file_names)}[\/green]\")","8d73b244":"%%sh\nmkdir \"\/kaggle\/working\/train_224\/\"\nmkdir \"\/kaggle\/working\/test_224\/\"\n\nmkdir \"\/kaggle\/working\/train_512\/\"\nmkdir \"\/kaggle\/working\/test_512\/\"","a1acf486":"def resizeImage(imagePath, outputFolder, resize=224):\n    \"\"\"\n    Function to resize Image using cv2\n    \"\"\"\n    img = cv2.imread(imagePath)\n    img = img[:, :, ::-1]\n    img = cv2.resize(img, (resize, resize))\n    imgPath = os.path.join(outputFolder, os.path.basename(imagePath))\n    cv2.imwrite(imgPath, img)","85ae3e0a":"# Run in Parallel on 16 cores for quicky quick resizing and saving - 224 x 224 px\n_ = Parallel(n_jobs=16, verbose=0)(delayed(resizeImage)(fileName, \"\/kaggle\/working\/train_224\") for fileName in tqdm(train_file_names))\n_ = Parallel(n_jobs=16, verbose=0)(delayed(resizeImage)(fileName, \"\/kaggle\/working\/test_224\") for fileName in tqdm(test_file_names))","fc1f6166":"# Run in Parallel on 16 cores for quicky quick resizing and saving - 512 x 512 px\n_ = Parallel(n_jobs=16, verbose=1)(delayed(resizeImage)(fileName, \"\/kaggle\/working\/train_512\", 512) for fileName in train_file_names)\n_ = Parallel(n_jobs=16, verbose=1)(delayed(resizeImage)(fileName, \"\/kaggle\/working\/test_512\", 512) for fileName in test_file_names)","1c70de3f":"shutil.make_archive(\"\/kaggle\/working\/train_512\", 'zip', \"\/kaggle\/working\/train_512\")\nshutil.make_archive(\"\/kaggle\/working\/test_512\", 'zip', \"\/kaggle\/working\/test_512\")\nshutil.make_archive(\"\/kaggle\/working\/train_224\", 'zip', \"\/kaggle\/working\/train_224\")\nshutil.make_archive(\"\/kaggle\/working\/test_224\", 'zip', \"\/kaggle\/working\/test_224\")","c4d20cd5":"%%sh\nrm -rf \"\/kaggle\/working\/train_224\/\"\nrm -rf \"\/kaggle\/working\/test_224\/\"\nrm -rf \"\/kaggle\/working\/train_512\/\"\nrm -rf \"\/kaggle\/working\/test_512\/\"","053b84a1":"<span style=\"color: #2130b8; font-family: Segoe UI; font-size: 1.5em; font-weight: 300; font-size: 28px\">EDA + Data Preprocessing<\/span>","ed9b708b":"<span style=\"color: #2130b8; font-family: Segoe UI; font-size: 1.5em; font-weight: 300; font-size: 28px\">Fast Image Resizing<\/span>","6272f74b":"<span style=\"color: #2486c7; font-family: Segoe UI; font-size: 1.5em; font-weight: 300; font-size: 32px\">PetFinder - EDA + Resized Training Images \ud83d\udee0\ufe0f<\/span>\n\n<div style=\"font-family: Segoe UI; font-size: 1.5em; font-weight: 300; font-size: 16px\">\nCurrently, PetFinder.my uses a basic Cuteness Meter to rank pet photos. It analyzes picture composition and other factors compared to the performance of thousands of pet profiles. While this basic tool is helpful, it's still in an experimental stage and the algorithm could be improved.\n<br><br>\nIn this competition, we\u2019ll analyze raw images and metadata to <strong>predict the \u201cPawpularity\u201d of pet photos<\/strong>. We'll train and test your model on PetFinder.my's thousands of pet profiles. Winning versions will offer accurate recommendations that will improve animal welfare.\n<\/div>"}}