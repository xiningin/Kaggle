{"cell_type":{"615275fc":"code","8ee40d70":"code","0f88e067":"code","1bf46ec6":"code","d4eccd53":"code","b29b8c29":"code","72b144ac":"code","5fa4bfe4":"code","c52b2536":"code","30d128e2":"code","37ec97c9":"code","8d1559c4":"code","cdb8452c":"code","5fbb2598":"code","94c5153b":"code","80c62344":"code","b6fc9cf8":"code","08fdd36c":"code","fef03a52":"code","20b2ac61":"code","925b14b3":"code","ed035e80":"code","ca859b1b":"code","83c3a59a":"code","9ac82153":"code","25444c20":"code","94673237":"code","61e33bd7":"code","7242a629":"code","819c3eda":"code","c6cbb8a5":"code","d0a1001a":"code","93e11fe1":"code","a8d88e8b":"code","9625174e":"code","1732efd0":"code","1719e182":"code","90022ef0":"code","8f7427a3":"markdown","ffd9748e":"markdown","3ee4518d":"markdown","26169bf4":"markdown","940fe1e8":"markdown","0e3f8472":"markdown","f8bec4bc":"markdown","722395cd":"markdown","4d9060d9":"markdown","2d98f687":"markdown","1453d71e":"markdown","30058bbc":"markdown","31f32ce3":"markdown","c2227fce":"markdown","36defd4d":"markdown","0bda6f13":"markdown","b092227c":"markdown","2ec30147":"markdown","81ee7939":"markdown","67c97a41":"markdown","1d0c877d":"markdown","c67bd1cb":"markdown","74a03fb5":"markdown","fa791053":"markdown","3b9a6dba":"markdown","1e9ffce4":"markdown","0a6cd668":"markdown","78c9533d":"markdown","45d2ef90":"markdown","3151fa87":"markdown","28a0421f":"markdown","c12a229c":"markdown"},"source":{"615275fc":"import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import NullFormatter\nimport pandas as pd\nimport numpy as np\nimport matplotlib.ticker as ticker\nfrom sklearn import preprocessing\n%matplotlib inline","8ee40d70":"!wget -O loan_train.csv https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork\/labs\/FinalModule_Coursera\/data\/loan_train.csv","0f88e067":"df = pd.read_csv('loan_train.csv')\ndf.head()","1bf46ec6":"df.shape","d4eccd53":"df['due_date'] = pd.to_datetime(df['due_date'])\ndf['effective_date'] = pd.to_datetime(df['effective_date'])\ndf.head()","b29b8c29":"df['loan_status'].value_counts()","72b144ac":"# notice: installing seaborn might takes a few minutes\n!conda install -c anaconda seaborn -y","5fa4bfe4":"import seaborn as sns\n\nbins = np.linspace(df.Principal.min(), df.Principal.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'Principal', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","c52b2536":"bins = np.linspace(df.age.min(), df.age.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'age', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","30d128e2":"df['dayofweek'] = df['effective_date'].dt.dayofweek\nbins = np.linspace(df.dayofweek.min(), df.dayofweek.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'dayofweek', bins=bins, ec=\"k\")\ng.axes[-1].legend()\nplt.show()\n","37ec97c9":"df['weekend'] = df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\ndf.head()","8d1559c4":"df.groupby(['Gender'])['loan_status'].value_counts(normalize=True)","cdb8452c":"df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\ndf.head()","5fbb2598":"df.groupby(['education'])['loan_status'].value_counts(normalize=True)","94c5153b":"df[['Principal','terms','age','Gender','education']].head()","80c62344":"Feature = df[['Principal','terms','age','Gender','weekend']]\nFeature = pd.concat([Feature,pd.get_dummies(df['education'])], axis=1)\nFeature.drop(['Master or Above'], axis = 1,inplace=True)\nFeature.head()\n","b6fc9cf8":"X = Feature\nX[0:5]","08fdd36c":"y = df['loan_status'].replace(to_replace=['PAIDOFF','COLLECTION'], value=[0,1]).values\ny[0:5]","fef03a52":"X= preprocessing.StandardScaler().fit(X).transform(X)\nX[0:5]","20b2ac61":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","925b14b3":"import sklearn.metrics as metrics","ed035e80":"from sklearn.neighbors import KNeighborsClassifier\nKs = 10\nmean_acc = np.zeros((Ks-1))\nstd_acc = np.zeros((Ks-1))\n\nfor n in range(1,Ks):\n    \n    #Train Model and Predict  \n    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)\n    yhat=neigh.predict(X_test)\n    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)\n\n    \n    std_acc[n-1]=np.std(yhat==y_test)\/np.sqrt(yhat.shape[0])\n\nmean_acc\nprint( \"The best accuracy was with\", mean_acc.max(), \"with k=\", mean_acc.argmax()+1) ","ca859b1b":"k = 6\n#Train Model and Predict  \nneigh = KNeighborsClassifier(n_neighbors = k).fit(X,y)\n","83c3a59a":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\nDecisionTree = DecisionTreeClassifier(criterion=\"entropy\")\nDecisionTree.fit(X,y)","9ac82153":"from sklearn import svm\nsvm = svm.SVC(kernel='rbf')\nsvm.fit(X, y) ","25444c20":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nLR = LogisticRegression(C=0.01, solver='liblinear').fit(X,y)\nLR","94673237":"\nfrom sklearn.metrics import jaccard_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import log_loss\n","61e33bd7":"!wget -O loan_test.csv https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/ML0101ENv3\/labs\/loan_test.csv","7242a629":"test_df = pd.read_csv('loan_test.csv')\ntest_df.head()","819c3eda":"test_df.shape","c6cbb8a5":"test_df['due_date'] = pd.to_datetime(test_df['due_date'])\ntest_df['effective_date'] = pd.to_datetime(test_df['effective_date'])\n\ntest_df['dayofweek'] = test_df['effective_date'].dt.dayofweek\n\ntest_df['weekend'] = test_df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\n\ntest_df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\n\ntest_df['Month'] = test_df.due_date.dt.month \n\ntest_df['deadline']=test_df['due_date']-test_df['effective_date']\ntest_df['deadline']=test_df['deadline'].dt.days\n\nFeature = test_df[['Principal','terms','age','Gender','weekend',]]\nFeature = pd.concat([Feature,pd.get_dummies(test_df['education'])], axis=1)\nFeature.drop(['Master or Above'], axis = 1,inplace=True)\n\nX_test = Feature\n\ny_test = test_df['loan_status'].replace(to_replace=['PAIDOFF','COLLECTION'], value=[0,1]).values\n\nX_test = preprocessing.StandardScaler().fit(X_test).transform(X_test)\nX[0:5]\n","d0a1001a":"\nX_test.shape, y_test.shape","93e11fe1":"X.shape,y.shape","a8d88e8b":"knn_pred = neigh.predict(X_test)\nknn_jaccard = jaccard_score(y_test,knn_pred, pos_label = 0)\nknn_f1_score = f1_score(y_test, knn_pred, average='weighted')\nprint('jaccard score for KNN is :',knn_jaccard)\nprint('f1 score for KNN is :',knn_f1_score)","9625174e":"tree_pred = DecisionTree.predict(X_test)\ntree_jaccard = jaccard_score(y_test, tree_pred, pos_label = 0)\ntree_f1_score = f1_score(y_test, tree_pred, average='weighted')\nprint('jaccard score for decision tree is :',tree_jaccard)\nprint('f1 score for decision tree is :',tree_f1_score)","1732efd0":"svm_pred = svm.predict(X_test)\nsvm_jaccard = jaccard_score(y_test, svm_pred, pos_label = 0)\nsvm_f1_score = f1_score(y_test, svm_pred, average='weighted')\nprint('jaccard score for SVM is :',svm_jaccard)\nprint('f1 score for SVM is :',svm_f1_score)","1719e182":"LR_pred = LR.predict(X_test)\nproba=LR.predict_proba(X_test)\nLR_jaccard = jaccard_score(y_test, LR_pred, pos_label = 0)\nLR_f1_score = f1_score(y_test, LR_pred, average='weighted')\nLR_logloss_score = log_loss(y_test, proba)\nprint('jaccard score for LR is :',LR_jaccard)\nprint('f1 score for LR is :',LR_f1_score)\nprint('LogLoss score for LR is :',LR_logloss_score)","90022ef0":"from sklearn.metrics import classification_report\nprint (classification_report(y_test, LR_pred))","8f7427a3":"#### Features before One Hot Encoding\n","ffd9748e":"We see that people who get the loan at the end of the week don't pay it off, so let's use Feature binarization to set a threshold value less than day 4\n","3ee4518d":"## Convert Categorical features to numerical values\n","26169bf4":"### Feature Selection\n","940fe1e8":"Let's define feature sets, X:\n","0e3f8472":"#### Use one hot encoding technique to conver categorical varables to binary variables and append them to the feature Data Frame\n","f8bec4bc":"Let's convert male to 0 and female to 1:\n","722395cd":"Let's plot some columns to underestand data better:\n","4d9060d9":"# Data visualization and pre-processing\n","2d98f687":"In this notebook I have practiced various classification algorithams such as KNN, Decision tree, Support Vector machine and logistic regression to predict the status of loan.\n\nI used pandas library to load the data and applied the algorithms, and find the best one for this specific dataset by accuracy evaluation methods.\n","1453d71e":"## One Hot Encoding\n\n#### How about education?\n","30058bbc":"This dataset is about past loans. The **Loan_train.csv** data set includes details of 346 customers whose loan are already paid off or defaulted. It includes following fields:\n\n| Field          | Description                                                                           |\n| -------------- | ------------------------------------------------------------------------------------- |\n| Loan_status    | Whether a loan is paid off on in collection                                           |\n| Principal      | Basic principal loan amount at the                                                    |\n| Terms          | Origination terms which can be weekly (7 days), biweekly, and monthly payoff schedule |\n| Effective_date | When the loan got originated and took effects                                         |\n| Due_date       | Since it\u2019s one-time payoff schedule, each loan has one single due date                |\n| Age            | Age of applicant                                                                      |\n| Education      | Education of applicant                                                                |\n| Gender         | The gender of applicant                                                               |\n","31f32ce3":"# Classification\n","c2227fce":"### Let's look at the day of the week people get the loan\n","36defd4d":"### About dataset\n","0bda6f13":"# Logistic Regression\n","b092227c":"86 % of female pay there loans while only 73 % of males pay there loan\n","2ec30147":"260 people have paid off the loan on time while 86 have gone into collection\n","81ee7939":"# Pre-processing:  Feature selection\/extraction\n","67c97a41":"What are our lables?\n","1d0c877d":"| Algorithm          | Jaccard | F1-score | LogLoss |\n| ------------------ | ------- | -------- | ------- |\n| KNN                | 0.7450980392156863| 0.7144140000438048       | NA      |\n| Decision Tree      | 0.6938775510204082       | 0.7105756358768406        | NA      |\n| SVM                | 0.7222222222222222       | 0.6212664277180406        | NA      |\n| LogisticRegression | 0.7407407407407407       | 0.6304176516942475        | 0.5566084946309208       |\n","c67bd1cb":"### Load Data From CSV File\n","74a03fb5":"Let\u2019s see how many of each class is in our data set\n","fa791053":"Let's look at gender:\n","3b9a6dba":"## Normalize Data\n","1e9ffce4":"# K Nearest Neighbor(KNN)\n\n\n","0a6cd668":"# Support Vector Machine\n","78c9533d":"# Decision Tree\n","45d2ef90":"# Report\n\nThe accuracy of the built model using different evaluation metrics:\n","3151fa87":"### Convert to date time object\n","28a0421f":"# Model Evaluation using Test set\n","c12a229c":"### Load Test set for evaluation\n"}}