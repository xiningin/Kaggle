{"cell_type":{"1af2e79c":"code","5f602d6a":"code","bbf2d1a6":"code","b2b44322":"code","be5b93c7":"code","d2bcc956":"code","ea1f05e9":"code","71872b68":"code","7d759130":"code","3644ed8b":"code","a81ea6e2":"code","e46b81d7":"code","203cd33e":"code","f294aec1":"code","381400cf":"code","f86f00e5":"code","1a14b9a1":"code","11f87239":"code","8326607b":"code","cc4b383b":"code","2330734c":"code","d0dd4858":"code","39c0957a":"code","a1b80740":"code","ef49c982":"code","5747d064":"code","11abaf6c":"code","20d1f954":"code","8a36124e":"code","deabc18d":"code","39cf2f17":"code","2af3e670":"code","e4249504":"code","2a4c8e9b":"code","5d04bb8a":"code","b2fbe516":"code","4654e727":"code","abe134c1":"code","d2d7de0e":"code","15b6f408":"code","551f123c":"code","e7d48671":"code","6de60b66":"code","7139cbb9":"code","e33cfb73":"code","6b2274e0":"code","04bcea59":"code","dced3af3":"code","503e08b2":"code","db04942a":"code","7ce75f3d":"code","64d1a09e":"code","a5a4799a":"code","95ad44c2":"code","1c577d54":"code","587f7cd4":"code","0adba45a":"code","d0a46681":"code","2d4e11df":"code","1f5e5459":"code","96a0b307":"code","7a7e7505":"code","2dc4f962":"code","049f0b2e":"code","56517a41":"code","4f2bb28b":"code","165aca3f":"code","de3e7a14":"code","c4b3a479":"code","86130b7c":"code","50378e05":"markdown","fd26d4e8":"markdown","ab79f79b":"markdown","2bed9c38":"markdown","d085ee1a":"markdown","1f3f3843":"markdown","d5d322d2":"markdown","a67f0e7f":"markdown","a63e3d3f":"markdown","ffc8a75c":"markdown","9fcdb65c":"markdown","96a7cbd2":"markdown","893c84fd":"markdown","da428241":"markdown","c1d64733":"markdown","89a3560f":"markdown","3d0d0aa8":"markdown","b4286676":"markdown","ee5de172":"markdown","b156bcae":"markdown","d37d4ed8":"markdown","25be783a":"markdown","47e23239":"markdown","158b0ba8":"markdown","1236d382":"markdown","1820c5db":"markdown","36a3790b":"markdown","fd8d399c":"markdown","b01f05f0":"markdown","c0e40537":"markdown","c33f8284":"markdown","41256d9f":"markdown","6817c6c5":"markdown","1ce43287":"markdown","a3f66a69":"markdown","a6485388":"markdown","1e046bca":"markdown","bd3ef85c":"markdown","d3fd9faf":"markdown","82146e2b":"markdown","e78c903c":"markdown"},"source":{"1af2e79c":"import pandas as pd\nimport numpy as np\nimport time\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn')\nsns.set(font_scale=2)\n\nimport warnings \nwarnings.filterwarnings('ignore')","5f602d6a":"import os\nimport json\nimport numpy as np\nimport pandas as pd\nfrom pandas.io.json import json_normalize\n\ndef load_df(csv_path='..\/input\/train.csv', nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    \n    df = pd.read_csv(csv_path, \n                     converters={column: json.loads for column in JSON_COLUMNS}, \n                     dtype={'fullVisitorId': 'str'}, # Important!!\n                     nrows=nrows)\n    \n    for column in JSON_COLUMNS:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}\")\n    return df\n\nprint(os.listdir(\"..\/input\"))","bbf2d1a6":"%%time\ntrain_df = load_df()\ntest_df = load_df(\"..\/input\/test.csv\")","b2b44322":"target = train_df['totals.transactionRevenue'].fillna(0).astype(float)\ntarget = target.apply(lambda x: np.log(x) if x > 0 else x)\ndel train_df['totals.transactionRevenue']","be5b93c7":"columns = [col for col in train_df.columns if train_df[col].nunique() > 1]\n#____________________________\ntrain_df = train_df[columns]\ntest_df = test_df[columns]","d2bcc956":"train_df.head()\n\npercent = (100 * train_df.isnull().sum() \/ train_df.shape[0]).sort_values(ascending=False)\n\npercent[:10]","ea1f05e9":"percent = (100 * test_df.isnull().sum() \/ test_df.shape[0]).sort_values(ascending=False)\npercent[:10]","71872b68":"drop_cols = ['trafficSource.referralPath', 'trafficSource.adContent', 'trafficSource.adwordsClickInfo.slot', 'trafficSource.adwordsClickInfo.page',\n            'trafficSource.adwordsClickInfo.adNetworkType']","7d759130":"train_df.drop(drop_cols, axis=1, inplace=True)\ntest_df.drop(drop_cols, axis=1, inplace=True)","3644ed8b":"train_df['trafficSource.keyword'].fillna('nan', inplace=True)\ntest_df['trafficSource.keyword'].fillna('nan', inplace=True)","a81ea6e2":"# for ele in train_df['trafficSource.keyword'].vablue_counts().index:\n#     print(ele)\n\n# Save your page","e46b81d7":"def add_new_category(x):\n    x = str(x).lower()\n    if x == 'nan':\n        return 'nan'\n    \n    x = ''.join(x.split())\n    \n    if 'youtube' in x or 'you' in x or 'yo' in x or 'tub' in x:\n        return 'youtube'\n    elif 'google' in x or 'goo' in x or 'gle' in x:\n        return 'google'\n    else:\n        return 'other'","203cd33e":"train_df['trafficSource.keyword'] = train_df['trafficSource.keyword'].apply(add_new_category)\ntest_df['trafficSource.keyword'] = test_df['trafficSource.keyword'].apply(add_new_category)","f294aec1":"train_df['trafficSource.keyword'].value_counts().sort_values(ascending=False).plot.bar()\nplt.yscale('log')\nplt.show()","381400cf":"categorical_feats = ['trafficSource.keyword']","f86f00e5":"train_df['totals.pageviews'].fillna(0, inplace=True)\ntest_df['totals.pageviews'].fillna(0, inplace=True)","1a14b9a1":"train_df['totals.pageviews'] = train_df['totals.pageviews'].astype(int)\ntest_df['totals.pageviews'] = test_df['totals.pageviews'].astype(int)","11f87239":"train_df['totals.pageviews'].plot.hist(bins=10)\nplt.yscale('log')\nplt.show()","8326607b":"features_object = [col for col in train_df.columns if train_df[col].dtype == 'object']","cc4b383b":"features_object","2330734c":"train_df['channelGrouping'].value_counts().plot.bar()\nplt.show()","d0dd4858":"categorical_feats.append('channelGrouping')","39c0957a":"plt.figure(figsize=(20, 10))\ntrain_df['device.browser'].value_counts().plot.bar()\nplt.yscale('log')\nplt.show()","a1b80740":"categorical_feats.append('device.browser')","ef49c982":"# plt.figure(figsize=(10, 10))\ntrain_df['device.deviceCategory'].value_counts().plot.bar()\n# plt.yscale('log')\nplt.show()","5747d064":"categorical_feats.append('device.deviceCategory')","11abaf6c":"# plt.figure(figsize=(10, 10))\ntrain_df['device.operatingSystem'].value_counts().plot.bar()\nplt.yscale('log')\nplt.show()","20d1f954":"categorical_feats.append('device.operatingSystem')","8a36124e":"train_df['geoNetwork.city'].value_counts()","deabc18d":"categorical_feats.append('geoNetwork.city')","39cf2f17":"train_df['geoNetwork.continent'].value_counts()","2af3e670":"categorical_feats.append('geoNetwork.continent')","e4249504":"train_df['geoNetwork.country'].value_counts()[:10].plot.bar()\nplt.show()","2a4c8e9b":"categorical_feats.append('geoNetwork.country')","5d04bb8a":"train_df['geoNetwork.metro'].value_counts()[:10].plot.bar()","b2fbe516":"categorical_feats.append('geoNetwork.metro')","4654e727":"train_df['geoNetwork.networkDomain'].value_counts()","abe134c1":"categorical_feats.append('geoNetwork.networkDomain')","d2d7de0e":"train_df['geoNetwork.region'].value_counts()","15b6f408":"categorical_feats.append('geoNetwork.region')","551f123c":"train_df['geoNetwork.subContinent'].value_counts().plot.bar()\nplt.yscale('log')\nplt.show()","e7d48671":"categorical_feats.append('geoNetwork.subContinent')","6de60b66":"train_df['totals.hits'].value_counts()","7139cbb9":"train_df['totals.hits'] = train_df['totals.hits'].astype(int)\ntest_df['totals.hits'] = test_df['totals.hits'].astype(int)","e33cfb73":"train_df['trafficSource.adwordsClickInfo.gclId'].value_counts()","6b2274e0":"train_df.drop('trafficSource.adwordsClickInfo.gclId', axis=1, inplace=True)\ntest_df.drop('trafficSource.adwordsClickInfo.gclId', axis=1, inplace=True)","04bcea59":"train_df['trafficSource.campaign'].value_counts().plot.bar()\nplt.yscale('log')\nplt.show()","dced3af3":"categorical_feats.append('trafficSource.campaign')","503e08b2":"train_df['trafficSource.medium'].value_counts().plot.bar()\nplt.yscale('log')\nplt.show()","db04942a":"categorical_feats.append('trafficSource.medium')","7ce75f3d":"# for value in train_df['trafficSource.source'].value_counts().index:\n#     print(value)\n# save your page","64d1a09e":"def add_new_category(x):\n    x = str(x).lower()\n    if 'google' in x:\n        return 'google'\n    elif 'baidu' in x:\n        return 'baidu'\n    elif 'facebook' in x:\n        return 'facebook'\n    elif 'reddit' in x:\n        return 'reddit'\n    elif 'yahoo' in x:\n        return 'yahoo'\n    elif 'bing' in x:\n        return 'bing'\n    elif 'yandex' in x:\n        return 'yandex'\n    else:\n        return 'other'","a5a4799a":"train_df['trafficSource.source'] = train_df['trafficSource.source'].apply(add_new_category)\ntest_df['trafficSource.source'] = test_df['trafficSource.source'].apply(add_new_category)","95ad44c2":"train_df['trafficSource.source'].value_counts().sort_values(ascending=False).plot.bar()\nplt.yscale('log')\nplt.show()","1c577d54":"categorical_feats.append('trafficSource.source')","587f7cd4":"train_df['device.isMobile'] = train_df['device.isMobile'].astype(int)\ntest_df['device.isMobile'] = test_df['device.isMobile'].astype(int)","0adba45a":"len_train = train_df.shape[0]\n\ndf_all = pd.concat([train_df, test_df])","d0a46681":"def change_date_to_datetime(x):\n    str_time = str(x)\n    date = '{}-{}-{}'.format(str_time[:4], str_time[4:6], str_time[6:])\n    return date\n\ndef add_time_feature(data):\n    data['date'] = pd.to_datetime(data['date'])\n    data['Year'] = data.date.dt.year\n    data['Month'] = data.date.dt.month\n    data['Day'] = data.date.dt.day\n    data['WeekOfYear'] = data.date.dt.weekofyear\n    return data\n\ndf_all['date'] = df_all['date'].apply(change_date_to_datetime)\ndf_all = add_time_feature(df_all)","2d4e11df":"categorical_feats += ['Year', 'Month', 'Day', 'WeekOfYear']","1f5e5459":"df_all.drop('date', axis=1, inplace=True)","96a0b307":"from sklearn.preprocessing import LabelEncoder","7a7e7505":"for col in categorical_feats:\n    lbl = LabelEncoder()\n    df_all[col] = lbl.fit_transform(df_all[col])","2dc4f962":"train_df = df_all[:len_train]\ntest_df = df_all[len_train:]","049f0b2e":"train_fullVisitorId = train_df['fullVisitorId']\ntrain_sessionId = train_df['sessionId']\ntrain_visitId = train_df['visitId']\n\ntest_fullVisitorId = test_df['fullVisitorId']\ntest_sessionId = test_df['sessionId']\ntest_visitId = test_df['visitId']\n\ntrain_df.drop(['fullVisitorId', 'sessionId', 'visitId'], axis=1, inplace=True)\ntest_df.drop(['fullVisitorId', 'sessionId', 'visitId'], axis=1, inplace=True)","56517a41":"train_df.head()","4f2bb28b":"param = {'num_leaves':128,\n         'min_data_in_leaf': 800, \n         'objective':'regression',\n         'max_depth': 7,\n         'learning_rate':0.006,\n         \"min_child_samples\":40,\n         \"boosting\":\"gbdt\",\n         \"feature_fraction\":0.8,\n         \"bagging_freq\":1,\n         \"bagging_fraction\":0.8 ,\n         \"bagging_seed\": 3,\n         \"metric\": 'rmse',\n         \"lambda_l1\": 1,\n         'lambda_l2': 1,\n         \"verbosity\": -1,\n        \"subsample\": 0.8,\n        \"colsample_bytree\": 0.5,\n        \"colsample_bylevel\":0.6}","165aca3f":"folds = KFold(n_splits=5, shuffle=True, random_state=15)\noof = np.zeros(len(train_df))\npredictions = np.zeros(len(test_df))\nstart = time.time()\nfeatures = list(train_df.columns)\nfeature_importance_df = pd.DataFrame()\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(train_df.values, target.values)):\n    trn_data = lgb.Dataset(train_df.iloc[trn_idx], label=target.iloc[trn_idx], categorical_feature=categorical_feats)\n    val_data = lgb.Dataset(train_df.iloc[val_idx], label=target.iloc[val_idx], categorical_feature=categorical_feats)\n    \n    num_round = 10000\n    clf = lgb.train(param, trn_data, num_round, valid_sets = [trn_data, val_data], verbose_eval=400, early_stopping_rounds = 500, categorical_feature=categorical_feats)\n    oof[val_idx] = clf.predict(train_df.iloc[val_idx].values, num_iteration=clf.best_iteration)\n    \n    fold_importance_df = pd.DataFrame()\n    fold_importance_df[\"feature\"] = features\n    fold_importance_df[\"importance\"] = clf.feature_importance()\n    fold_importance_df[\"fold\"] = fold_ + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n    \n    predictions += clf.predict(test_df.values, num_iteration=clf.best_iteration) \/ folds.n_splits","de3e7a14":"print(\"CV score: {:<8.5f}\".format(mean_squared_error(oof, target)**0.5))","c4b3a479":"cols = feature_importance_df[[\"feature\", \"importance\"]].groupby(\"feature\").mean().sort_values(\n    by=\"importance\", ascending=False)[:1000].index\n\nbest_features = feature_importance_df.loc[feature_importance_df.feature.isin(cols)]\n\nplt.figure(figsize=(14,10))\nsns.barplot(x=\"importance\", y=\"feature\", data=best_features.sort_values(by=\"importance\", ascending=False))\nplt.title('LightGBM Features (avg over folds)')\nplt.tight_layout()\nplt.savefig('lgbm_importances.png')","86130b7c":"submission = pd.DataFrame()\n\nsubmission['fullVisitorId'] = test_fullVisitorId\n\nsubmission['PredictedLogRevenue'] = predictions\n\ngrouped_test = submission[['fullVisitorId', 'PredictedLogRevenue']].groupby('fullVisitorId').sum().reset_index()\ngrouped_test.to_csv('submit.csv',index=False)","50378e05":"## 3.1 Label encoding","fd26d4e8":"- THis feature is boolean type. So let's do astype(int)","ab79f79b":"### trafficSource.source","2bed9c38":"## 3.2 Drop features","d085ee1a":"# 1. Read dataset","1f3f3843":"### geoNetwork.city","d5d322d2":"- NaN values in this feature could be relplaced with 0 value becuase nan view would mean no view.","a67f0e7f":"## 2.1 Check null data","a63e3d3f":"- google, baidu, facebook, reddit, yahoo, bing, yandex, ","ffc8a75c":"### device.browser","9fcdb65c":"- After looking the feature, simply I think that the category feature can be divided into youtube, google, other categories.","96a7cbd2":"- I don't have any idea for this complex feature. For now, I want to remove this feature.","893c84fd":"- In this dataset, many user ares in US","da428241":"## 2.3 Time feature","c1d64733":"## 3.3 Training model","89a3560f":"### trafficSource.adwordsClickInfo.gclId","3d0d0aa8":"### geoNetwork.subContinent","b4286676":"### channelGrouping","ee5de172":"## 2.2 Object features","b156bcae":"### totals.pageviews","d37d4ed8":"### trafficSource.medium","25be783a":"### geoNetwork.region","47e23239":"### Remove features with NaN percents larger than 70%","158b0ba8":"- This feature could be considered as continuous feature","1236d382":"### trafficSource.keyword ","1820c5db":"### geoNetwork.continent","36a3790b":"### geoNetwork.country","fd8d399c":"### device.operatingSystem","b01f05f0":"### trafficSource.campaign","c0e40537":"### geoNetwork.metro","c33f8284":"- There are so many domains. How can we deal with it?\n- One-hot is not good choice. It will generate 28064 featues...\n- Just remove this feature? or use this feature in efficient way?","41256d9f":"### totals.hits","6817c6c5":"## 3.4 Submission","1ce43287":"- For now, Let's remove the columns with NaN percents larger than 70%","a3f66a69":"### geoNetwork.networkDomain","a6485388":"-  US(California, New York), UK(England) and Thailand(Bangkok), Vietnam(Ho Chi Minh), Turkey(Istanbul) are top 5 region","1e046bca":"### \tdevice.isMobile","bd3ef85c":"# 3. Model development","d3fd9faf":"- There are so many cities.","82146e2b":"### device.deviceCategory","e78c903c":"# 2. Feature engineering"}}