{"cell_type":{"34ad9852":"code","3cc5f199":"code","3dae39fd":"code","f8632ec2":"code","fd478e61":"code","635d7277":"code","9917b6c0":"code","24654b29":"code","b596ff5d":"code","7f82c902":"code","a03d52a6":"code","cd516e18":"code","6a2a4556":"code","7a98a972":"code","d7474a8d":"code","56b6e1cf":"code","601c3122":"code","bbca003d":"code","f6a32fae":"code","7cca6827":"code","88cd1c52":"code","c30d45f0":"code","702bfa62":"code","0cb2d412":"code","24414650":"code","28c480bd":"code","0b56298a":"code","290a4e93":"code","14ad7733":"code","55723f97":"code","60e73dec":"code","82492531":"code","06b89bbb":"code","599f3ac6":"code","80b600b0":"code","4d58b1d2":"code","6963f7f7":"code","410535a9":"code","5fda1f55":"code","31471837":"code","2ee6043f":"code","b454a748":"code","895efc4c":"code","7a778feb":"code","fa822c8f":"code","c1c3eea2":"code","6d8a33de":"code","6e9b1012":"code","5fd0910c":"code","99d6d9af":"code","4a59a021":"code","7570a9d5":"code","319c4124":"code","f8d961e1":"code","1c49f72a":"code","ac98dcae":"code","8503bd97":"code","e01f057c":"code","0c5bb822":"code","0684ff53":"code","da035fe7":"code","26f8322b":"code","bab36022":"code","c383dd50":"code","af0dc281":"code","d2120896":"code","ed89b832":"code","fc40af80":"code","ef9be9ee":"code","f75d100f":"code","e98376e3":"code","f080a02a":"code","80a2e77e":"code","59ab12fb":"code","752c704e":"code","b264192b":"code","f41249f2":"code","b021ae22":"code","89a45b03":"code","e212cbee":"code","68000886":"code","4eec2227":"code","5406c3cc":"code","6c0110a2":"code","7afb2912":"code","e7524c95":"code","6eaff773":"code","7f115612":"code","9329def0":"code","54ba0050":"code","ca004326":"code","7d9fc200":"code","0e88c395":"code","f44aeb48":"code","cfd2743a":"code","2705c6d6":"code","6f79fba4":"code","2979cc36":"code","98aabdeb":"code","ef699eb8":"code","a7e6ba73":"code","fefa2327":"code","c864c600":"code","8cdae1a6":"code","45318daa":"code","d2b07ec4":"code","0956dc45":"code","336087af":"code","ab259b5e":"code","1382ad44":"code","c32e12a2":"code","2ff6d3d9":"code","cc3ebd7c":"code","5db3138e":"code","2092c810":"code","5d600af7":"code","c483025c":"code","c5213615":"code","225d43d6":"code","2476ef29":"code","ddbc4eeb":"code","24196263":"code","d41d835c":"code","19cd18fc":"code","489ba737":"code","c60168ef":"code","869e43c2":"code","7a487322":"code","3f818d90":"code","b041818c":"code","0b0b0a0c":"code","3e3af9b5":"code","90974e5d":"code","6ba0cefa":"code","f3c4b3c9":"code","5a0b7f86":"code","a71eceb3":"code","cdaabd72":"code","be806db0":"code","da894ba3":"code","1db43475":"code","566e7ef1":"code","ca723d7f":"code","3e423ed1":"code","73a8eaa1":"code","4ccef495":"code","f02dfccb":"code","e513029e":"code","858981d6":"code","511e40d5":"code","617c3c1b":"code","312ad74f":"code","df67a205":"code","d31f692f":"code","98801f92":"code","f5c069c9":"code","09d171f8":"code","6ad17ea2":"code","1c2a6970":"code","14a665c2":"code","83eaa041":"code","7e895a92":"code","55e29678":"code","2939d136":"code","9d0bf1c8":"code","34fa3e1f":"code","39acc5ea":"code","0e269ce8":"code","0acf71f1":"code","a0b9e031":"code","cebc989b":"code","666a85bb":"code","35a7a850":"code","a8b2556b":"code","b04afd10":"code","d1c47940":"code","a5ce7be1":"code","8a0fe216":"code","5718fb34":"code","30e8d59f":"code","a4a87b52":"code","92690a90":"code","baf9db01":"code","e62bf33b":"code","dac19a4e":"code","3d6ecb06":"code","bd316102":"code","3b1721f2":"code","dc17e0de":"code","8ac51d80":"code","d2ff64ed":"code","0f40e865":"code","765a5867":"code","f3187ba6":"code","8a613e5c":"code","93776cff":"code","4bc18f33":"code","86dd000d":"code","c6d33892":"code","799e3897":"code","fe62d014":"code","db120350":"code","ecbd0d5b":"code","f5b92798":"code","b4cc1beb":"code","e852e835":"code","aa011a79":"code","1417fddd":"code","92b43102":"code","e64d6377":"code","3e3740ba":"code","7b348fef":"code","c5c9b3d2":"code","0e3aebad":"code","ebe215a7":"code","d63600f5":"code","8ed3dfcd":"code","81ae97ca":"code","7ac389ca":"code","69024721":"code","4a0a014b":"code","9569f822":"code","109d2205":"code","17c8098c":"code","65f59525":"code","939c881b":"code","07d66188":"code","40653276":"code","7dcd6806":"code","d9fd6e3f":"code","7beaad75":"code","65135de5":"code","4917912e":"code","8de09ba2":"code","736d9edc":"code","77c7cf1c":"code","846308e4":"code","a2ef48b6":"code","01bb7d87":"code","52c7c208":"code","06fef8ec":"code","c5af22d3":"code","c30721c3":"code","89b52ef5":"code","28df81fc":"code","61224cdd":"code","e54f866c":"code","acf20528":"code","e8c3d420":"code","6f077041":"code","c6e9d820":"code","c2b52e1a":"code","bd2fc6e2":"code","13a8e8fb":"markdown","f8027025":"markdown","db7b7972":"markdown","d8e7f065":"markdown","b5ebefb4":"markdown","2afcb036":"markdown","2651dd1b":"markdown","421cd679":"markdown","5ad1be3c":"markdown","cabe9b50":"markdown","ec38c7a8":"markdown","e53858d9":"markdown","f5c5a2d2":"markdown","07976982":"markdown","ca2efd4e":"markdown","1b13354f":"markdown","56d5a848":"markdown","463e64a2":"markdown","b3632fa3":"markdown","6387e848":"markdown","8b13b311":"markdown","b944c7c2":"markdown","e4dc94d6":"markdown","a7f7aafb":"markdown","d3c17eba":"markdown","95d1f74b":"markdown","e59ce99f":"markdown","5c8ef228":"markdown","2f280350":"markdown","fe83656c":"markdown","93955a10":"markdown","42b86353":"markdown","c1a2e3df":"markdown","22f0a16c":"markdown","d35f8ef7":"markdown","7c4239b8":"markdown","19c190f3":"markdown","4dc26b9a":"markdown","00a637d4":"markdown","1abc54b4":"markdown","9dbc2089":"markdown","b579e450":"markdown","9ef25ec4":"markdown","40e3f792":"markdown","5c29e59b":"markdown","5e666bb9":"markdown","ab012d56":"markdown","f7557551":"markdown","4d8b3cad":"markdown","b35aa72e":"markdown","a7c4e4ed":"markdown","9a2c2848":"markdown","4445a0cc":"markdown","abd93a74":"markdown","d2685c5d":"markdown","40ba0c89":"markdown","941baa88":"markdown","9ff95a02":"markdown","11849b63":"markdown","79d3be36":"markdown","872e1cbe":"markdown","905d862d":"markdown","bf4c56ee":"markdown","fbce3106":"markdown","e3604561":"markdown","13c428f0":"markdown","353e0c6d":"markdown"},"source":{"34ad9852":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.simplefilter('ignore')\nwarnings.filterwarnings('ignore')\nimport copy\nimport math\n\nimport sklearn\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom scipy.stats import randint as sp_randint\nfrom scipy.stats import uniform as sp_uniform\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom scipy import stats\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3cc5f199":"pd.set_option('display.max_columns', 50)\ntraindf = pd.read_csv('..\/input\/Train.csv')\ntraindf.head()","3dae39fd":"pd.set_option('display.max_columns', 50)\ntestdf = pd.read_csv('..\/input\/Test.csv')\ntestdf.head()","f8632ec2":"ss = pd.read_csv('..\/input\/sample_submission.csv')\nss.head()","fd478e61":"traindf.isna().sum()","635d7277":"testdf.isna().sum()","9917b6c0":"NA_col = pd.DataFrame(traindf.isna().sum(), columns = ['NA_Count'])\nNA_col['%_of_NA'] = (NA_col.NA_Count\/len(traindf))*100\nNA_col.sort_values(by = ['%_of_NA'], ascending = False, na_position = 'first').head(7)","24654b29":"NA_col = pd.DataFrame(testdf.isna().sum(), columns = ['NA_Count'])\nNA_col['%_of_NA'] = (NA_col.NA_Count\/len(testdf))*100\nNA_col.sort_values(by = ['%_of_NA'], ascending = False, na_position = 'first').head(7)","b596ff5d":"traindf.dtypes","7f82c902":"testdf.dtypes","a03d52a6":"X = traindf.drop('Attrition_rate', axis = 1)\ny = traindf['Attrition_rate']","cd516e18":"sns.catplot('Age', data= X, kind='count', alpha=0.7, height=4, aspect= 4)\n\n# Get current axis on current figure\nax = plt.gca()\n\n# Max value to be set\ny_max = X['Age'].value_counts().max() \n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/5., p.get_height(),'%d' % int(p.get_height()),\n            fontsize=13, color='blue', ha='center', va='bottom')\nplt.title('Frequency plot of Age', fontsize = 14, color = 'black')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 8)\nplt.show()","6a2a4556":"fig, ax=plt.subplots(1,2, figsize = (20,8))\n\nage = X['Age']\nage = age[~np.isnan(age)]\nsns.distplot(age, hist=True, kde=True, \n             color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4}, ax=ax[0])\nprint('Skewness - train: ', X['Age'].skew())\n\nage_test = testdf['Age']\nage_test = age_test[~np.isnan(age_test)]\nsns.distplot(age_test, hist=True, kde=True, \n             color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4}, ax=ax[1])\nprint('Skewness - test: ', testdf['Age'].skew())","7a98a972":"print(round(age.mean(), 0))\nprint(round(age_test.mean(), 0))","d7474a8d":"# Imputing with the mean\nX['Age'] = X['Age'].fillna(40)\ntestdf['Age'] = testdf['Age'].fillna(40)","56b6e1cf":"sns.catplot('Time_of_service', data= X, kind='count', alpha=0.7, height=5, aspect= 3)\n\n# Get current axis on current figure\nax = plt.gca()\n\n# Max value to be set\ny_max = X['Time_of_service'].value_counts().max() \n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/5., p.get_height(),'%d' % int(p.get_height()),\n            fontsize=13, color='blue', ha='center', va='bottom')\nplt.title('Frequency plot of Time_of_service', fontsize = 14, color = 'black')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 8)\nplt.show()","601c3122":"fig, ax=plt.subplots(1,2, figsize = (20,8))\n\ntos = X['Time_of_service']\ntos = tos[~np.isnan(tos)]\nsns.distplot(tos, hist=True, kde=True, \n             color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4}, ax=ax[0])\nprint('Skewness - train: ', X['Time_of_service'].skew())\n\n\ntos_test = testdf['Time_of_service']\ntos_test = tos_test[~np.isnan(tos_test)]\nsns.distplot(tos_test, hist=True, kde=True, \n             color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4}, ax=ax[1])\nprint('Skewness - test: ', testdf['Time_of_service'].skew())","bbca003d":"X_norm = X.copy()\nnonzero = X[(X['Time_of_service'].notnull())&(X['Time_of_service']>0)]\n# Transform training data & save lambda value\nnonzero['Time_of_service'], fitted_lambda = stats.boxcox(nonzero['Time_of_service'])\n\nX_norm[(X_norm['Time_of_service'].notnull())&(X_norm['Time_of_service']>0)] = nonzero\n\nprint('Skewness before: ', X['Time_of_service'].skew())\nprint('Skewness after BCT: ', nonzero['Time_of_service'].skew())","f6a32fae":"test_norm = testdf.copy()\nnonzerotest = testdf[(testdf['Time_of_service'].notnull())&(testdf['Time_of_service']>0)]\n# Use lambda value to transform test data\nnonzerotest['Time_of_service'] = stats.boxcox(nonzerotest['Time_of_service'], fitted_lambda)\n\ntest_norm[(test_norm['Time_of_service'].notnull())&(test_norm['Time_of_service']>0)] = nonzerotest\n\nprint('Skewness before: ', testdf['Time_of_service'].skew())\nprint('Skewness after BCT: ', nonzerotest['Time_of_service'].skew())","7cca6827":"fig, ax=plt.subplots(1,2, figsize = (20,8))\n\nX_norm[(X_norm['Time_of_service'].notnull())&(X_norm['Time_of_service']>0)] = nonzero\ntos = X_norm['Time_of_service']\ntos = tos[~np.isnan(tos)]\nsns.distplot(tos, hist=True, kde=True, \n             color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4}, ax=ax[0])\nprint('Skewness after BCT - Train: ', nonzero['Time_of_service'].skew())\n\ntest_norm[(test_norm['Time_of_service'].notnull())&(test_norm['Time_of_service']>0)] = nonzerotest\ntos_test = test_norm['Time_of_service']\ntos_test = tos_test[~np.isnan(tos_test)]\nsns.distplot(tos_test, hist=True, kde=True, \n             color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4}, ax=ax[1])\nprint('Skewness after BCT - Test: ', nonzerotest['Time_of_service'].skew())","88cd1c52":"# Before BCT\nprint('Before BCT')\nprint('-------------')\nprint('Mean TOS - Train: ', round(X['Time_of_service'].mean(),0))\nprint('Mean TOS - Test: ', round(testdf['Time_of_service'].mean(),0))\nprint('After BCT')\nprint('-------------')\nprint('Mean TOS - Train: ', round(nonzero['Time_of_service'].mean(),0))\nprint('Mean TOS - Test: ', round(nonzerotest['Time_of_service'].mean(),0))","c30d45f0":"# Imputing with respective mean values - for before BCT data\nX['Time_of_service'] = X['Time_of_service'].fillna(13)\ntestdf['Time_of_service'] = testdf['Time_of_service'].fillna(13)","702bfa62":"# Imputing with respective mean values - for after BCT data\nX_norm['Time_of_service'] = X_norm['Time_of_service'].fillna(3)\ntest_norm['Time_of_service'] = test_norm['Time_of_service'].fillna(3)","0cb2d412":"sns.catplot('Pay_Scale', data= X, kind='count', alpha=0.7, height=5, aspect= 3)\n\n# Get current axis on current figure\nax = plt.gca()\n\n# Max value to be set\ny_max = X['Pay_Scale'].value_counts().max() \n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/5., p.get_height(),'%d' % int(p.get_height()),\n            fontsize=13, color='blue', ha='center', va='bottom')\nplt.title('Frequency plot of Pay_Scale', fontsize = 14, color = 'black')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 8)\nplt.show()","24414650":"fig, ax=plt.subplots(1,2, figsize = (20,8))\n\nps = X['Pay_Scale']\nps = ps[~np.isnan(ps)]\nsns.distplot(ps, hist=True, kde=True, \n             color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4}, ax=ax[0])\nprint('Skewness - train: ', X['Pay_Scale'].skew())\n\nps_test = testdf['Pay_Scale']\nps_test = ps_test[~np.isnan(ps_test)]\nsns.distplot(ps_test, hist=True, kde=True, \n             color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4}, ax=ax[1])\nprint('Skewness - test: ', testdf['Pay_Scale'].skew())","28c480bd":"sns.catplot('Work_Life_balance', data= X, kind='count', alpha=0.7, height=5, aspect= 3)\n\n# Get current axis on current figure\nax = plt.gca()\n\n# Max value to be set\ny_max = X['Work_Life_balance'].value_counts().max() \n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/5., p.get_height(),'%d' % int(p.get_height()),\n            fontsize=13, color='blue', ha='center', va='bottom')\nplt.title('Frequency plot of Work_Life_balance', fontsize = 14, color = 'black')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 8)\nplt.show()","0b56298a":"fig, ax=plt.subplots(1,2, figsize = (20,8))\n\nwl = X['Work_Life_balance']\nwl = wl[~np.isnan(wl)]\nsns.distplot(wl, hist=True, kde=True, \n             color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4}, ax=ax[0])\nprint('Skewness - train: ', X['Work_Life_balance'].skew())\n\nwl_test = testdf['Work_Life_balance']\nwl_test = wl_test[~np.isnan(wl_test)]\nsns.distplot(wl_test, hist=True, kde=True, \n             color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4}, ax=ax[1])\nprint('Skewness - test: ', testdf['Work_Life_balance'].skew())","290a4e93":"sns.catplot('VAR2', data= X, kind='count', alpha=0.7, height=5, aspect= 3)\n\n# Get current axis on current figure\nax = plt.gca()\n\n# Max value to be set\ny_max = X['VAR2'].value_counts().max() \n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/5., p.get_height(),'%d' % int(p.get_height()),\n            fontsize=13, color='blue', ha='center', va='bottom')\nplt.title('Frequency plot of VAR2', fontsize = 14, color = 'black')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 8)\nplt.show()","14ad7733":"fig, ax=plt.subplots(1,2, figsize = (20,8))\n\nv2 = X['VAR2']\nv2 = v2[~np.isnan(v2)]\nsns.distplot(v2, hist=True, kde=True, \n             color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4}, ax=ax[0])\nprint('Skewness - train: ', X['VAR2'].skew())\n\nv2_test = testdf['VAR2']\nv2_test = v2_test[~np.isnan(v2_test)]\nsns.distplot(v2_test, hist=True, kde=True, \n             color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4}, ax=ax[1])\nprint('Skewness - test: ', testdf['VAR2'].skew())","55723f97":"sns.catplot('VAR4', data= X, kind='count', alpha=0.7, height=5, aspect= 3)\n\n# Get current axis on current figure\nax = plt.gca()\n\n# Max value to be set\ny_max = X['VAR4'].value_counts().max() \n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/5., p.get_height(),'%d' % int(p.get_height()),\n            fontsize=13, color='blue', ha='center', va='bottom')\nplt.title('Frequency plot of VAR4', fontsize = 14, color = 'black')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 8)\nplt.show()","60e73dec":"cols = ['Age', 'Education_Level','Time_of_service', 'Time_since_promotion', 'growth_rate', 'Travel_Rate',\n       'Post_Level', 'Pay_Scale', 'Work_Life_balance', 'VAR1', 'VAR2', 'VAR3', 'VAR4', 'VAR5', 'VAR6',\n       'VAR7']","82492531":"plt.figure(figsize = (18,12))\nsns.heatmap(X[cols].corr(), vmin=X[cols].values.min(), vmax=1, \n            annot=True, annot_kws={\"size\":10}, square = False)\nplt.show()","06b89bbb":"plt.figure(figsize = (18,12))\nsns.heatmap(X_norm[cols].corr(), vmin=X_norm[cols].values.min(), vmax=1, \n            annot=True, annot_kws={\"size\":10}, square = False)\nplt.show()","599f3ac6":"group_age_tos = X.groupby('Age').mean()['Time_of_service'].sort_values(ascending=False).to_frame(name = 'Mean TOS').reset_index()","80b600b0":"plt.figure(figsize=(18,8))\nplt.bar('Age','Mean TOS', data=group_age_tos)\nplt.xlabel(\"Age\", size=15)\nplt.ylabel(\"Mean of TOS\", size=15)\nplt.tick_params(axis='x',  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \n# plt.title(\"\", size=25)\nplt.show()","4d58b1d2":"cols = traindf.columns\nnum_cols = traindf._get_numeric_data().columns\ncat_cols = list(set(cols) - set(num_cols))","6963f7f7":"print('For Train')\nd1 = traindf.nunique()\nprint(sorted(d1))\nprint(\"==============================\")\nprint('For Test')\nd2 = testdf.nunique()\nprint(sorted(d2))","410535a9":"col_train = traindf.columns\ncol_test = testdf.columns","5fda1f55":"l1 = []\nfor i in col_train:\n    if traindf[i].nunique() <= 13:\n        l1.append(i)","31471837":"l2 = []\nfor i in col_test:\n    if testdf[i].nunique() <= 13:\n        l2.append(i)","2ee6043f":"# Checking the columns in train and test are same or not\ndf = pd.DataFrame(l1, columns = ['train'])\ndf['test'] = pd.DataFrame(l2)\ndf","b454a748":"cat_cols = l1 # for dtype conversion","895efc4c":"dummies = ['Gender',  'Relationship_Status', 'Hometown', 'Unit', 'Decision_skill_possess', 'Time_since_promotion', 'Travel_Rate', 'Pay_Scale', 'Compensation_and_Benefits', \n      'Work_Life_balance', 'VAR1', 'VAR2', 'VAR3', 'VAR4', 'VAR5', 'VAR6', 'VAR7'] # for dummies","7a778feb":"lenc = ['Education_Level', 'Post_Level'] # for label encoding","fa822c8f":"# On non BCT data\nX[cat_cols] = X[cat_cols].apply(lambda x: x.astype('category'), axis=0)\ntestdf[cat_cols] = testdf[cat_cols].apply(lambda x: x.astype('category'), axis=0)\nprint('train dtypes:')\nprint(X[cat_cols].dtypes)\nprint('======================================')\nprint('test dtypes:')\nprint(testdf[cat_cols].dtypes)","c1c3eea2":"# On BCT data\nX_norm[cat_cols] = X_norm[cat_cols].apply(lambda x: x.astype('category'), axis=0)\ntest_norm[cat_cols] = test_norm[cat_cols].apply(lambda x: x.astype('category'), axis=0)\nprint('train dtypes:')\nprint(X_norm[cat_cols].dtypes)\nprint('======================================')\nprint('test dtypes:')\nprint(test_norm[cat_cols].dtypes)","6d8a33de":"# Imputing Categorical Columns for non BCT Data\n\ndef impute_with_mode(x):\n    max_x = x.value_counts()\n    mode = max_x[max_x == max_x.max()].index[0]\n    x[x.isna()] = mode\n    return x\n\nX[cat_cols] = X[cat_cols].apply(lambda x: impute_with_mode(x))\ntestdf[cat_cols] = testdf[cat_cols].apply(lambda x: impute_with_mode(x))","6e9b1012":"# Dummies on non BCT Data\nX_num = len(X)\ncombined_dataset = pd.concat(objs=[X, testdf], axis=0)\ncombined_dataset = pd.get_dummies(combined_dataset, columns=dummies, drop_first=True)\nX = copy.copy(combined_dataset[:X_num])\ntestdf = copy.copy(combined_dataset[X_num:])","5fd0910c":"# Label Encoding on non BCT Data\nfor usecol in lenc:\n    X[usecol] = X[usecol].astype('str')\n    testdf[usecol] = testdf[usecol].astype('str')\n    \n    #Fit LabelEncoder\n    le = LabelEncoder().fit(\n            np.unique(X[usecol].unique().tolist()+ testdf[usecol].unique().tolist()))\n\n    #At the end 0 will be used for dropped values\n    X[usecol] = le.transform(X[usecol])+1\n    testdf[usecol]  = le.transform(testdf[usecol])+1\n    \n    X[usecol] = X[usecol].replace(np.nan, '').astype('int')\n    testdf[usecol]  = testdf[usecol].replace(np.nan, '').astype('int')","99d6d9af":"# Imputing Categorical Columns for non BCT Data\n\ndef impute_with_mode(x):\n    max_x = x.value_counts()\n    mode = max_x[max_x == max_x.max()].index[0]\n    x[x.isna()] = mode\n    return x\n\nX_norm[cat_cols] = X_norm[cat_cols].apply(lambda x: impute_with_mode(x))\ntest_norm[cat_cols] = test_norm[cat_cols].apply(lambda x: impute_with_mode(x))","4a59a021":"# Dummies on non BCT Data\nX_num = len(X_norm)\ncombined_dataset_norm = pd.concat(objs=[X_norm, test_norm], axis=0)\ncombined_dataset_norm = pd.get_dummies(combined_dataset_norm, columns=dummies, drop_first=True)\nX_norm = copy.copy(combined_dataset_norm[:X_num])\ntest_norm = copy.copy(combined_dataset_norm[X_num:])","7570a9d5":"# Label Encoding on non BCT Data\nfor usecol in lenc:\n    X_norm[usecol] = X_norm[usecol].astype('str')\n    test_norm[usecol] = test_norm[usecol].astype('str')\n    \n    #Fit LabelEncoder\n    le = LabelEncoder().fit(\n            np.unique(X_norm[usecol].unique().tolist()+ test_norm[usecol].unique().tolist()))\n\n    #At the end 0 will be used for dropped values\n    X_norm[usecol] = le.transform(X_norm[usecol])+1\n    test_norm[usecol]  = le.transform(test_norm[usecol])+1\n    \n    X_norm[usecol] = X_norm[usecol].replace(np.nan, '').astype('int')\n    test_norm[usecol]  = test_norm[usecol].replace(np.nan, '').astype('int')","319c4124":"X.dtypes","f8d961e1":"test = testdf.copy()\nX = X.drop('Employee_ID', axis=1)\ntest = test.drop('Employee_ID', axis=1)\nX_norm = X_norm.drop('Employee_ID', axis=1)\ntest_norm = test_norm.drop('Employee_ID', axis=1)","1c49f72a":"# Splitting of non BCT Data\nX_train, X_val, y_train, y_val = train_test_split(X,y,test_size=0.3, random_state = 45)","ac98dcae":"# Splitting of BCT Data\nX_train_bct, X_val_bct, y_train_bct, y_val_bct = train_test_split(X_norm,y,test_size=0.3, random_state = 45)","8503bd97":"from sklearn.linear_model import LinearRegression\n\nlinreg = LinearRegression()\nlinreg.fit(X_train, y_train)","e01f057c":"# Predict (train)\ny_train_pred = linreg.predict(X_train)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train, y_train_pred)\nr2 = r2_score(y_train, y_train_pred)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train non BCT')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","0c5bb822":"# Predict (val)\ny_val_pred = linreg.predict(X_val)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val, y_val_pred)\nr2 = r2_score(y_val, y_val_pred)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\nprint('Val non BCT')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","0684ff53":"test['Attrition_rate'] = linreg.predict(test)\ntest['Employee_ID'] = testdf['Employee_ID']\ntest.head()","da035fe7":"submission_lrnbct = test[['Employee_ID', 'Attrition_rate']]\nsubmission_lrnbct.head()","26f8322b":"submission_lrnbct.to_csv(\"submission_lrnbct.csv\",index=False)","bab36022":"linregbct = LinearRegression()\nlinregbct.fit(X_train_bct, y_train_bct)","c383dd50":"# Predict (train)\ny_train_pred_bct = linregbct.predict(X_train_bct)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train_bct, y_train_pred_bct)\nr2 = r2_score(y_train_bct, y_train_pred_bct)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train on BCT')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","af0dc281":"# Predict (val)\ny_val_pred_bct = linregbct.predict(X_val_bct)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val_bct, y_val_pred_bct)\nr2 = r2_score(y_val_bct, y_val_pred_bct)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\nprint('Val on BCT')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","d2120896":"test_norm['Attrition_rate'] = linregbct.predict(test_norm)\ntest_norm['Employee_ID'] = testdf['Employee_ID']\ntest_norm.head()","ed89b832":"submission_lrbct = test_norm[['Employee_ID', 'Attrition_rate']]\nsubmission_lrbct.head()","fc40af80":"submission_lrbct.to_csv(\"submission_lrbct.csv\",index=False)","ef9be9ee":"from sklearn.tree import DecisionTreeRegressor\ndt = DecisionTreeRegressor(random_state=50, max_depth=3)\ndt.fit(X_train, y_train)","f75d100f":"# Predict (train)\ny_train_pred = dt.predict(X_train)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train, y_train_pred)\nr2 = r2_score(y_train, y_train_pred)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\nprint('Train non BCT')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","e98376e3":"# Predict (val)\ny_val_pred = dt.predict(X_val)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val, y_val_pred)\nr2 = r2_score(y_val, y_val_pred)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\nprint('Val non BCT')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","f080a02a":"test = test.drop(['Employee_ID', 'Attrition_rate'], axis = 1)\ntest['Attrition_rate'] = dt.predict(test)\ntest['Employee_ID'] = testdf['Employee_ID']\ntest.head()","80a2e77e":"submission_dt = test[['Employee_ID', 'Attrition_rate']]\nsubmission_dt.head()","59ab12fb":"submission_dt.to_csv(\"submission_dt.csv\",index=False)","752c704e":"from sklearn.tree import DecisionTreeRegressor\ndtbct = DecisionTreeRegressor(random_state=50, max_depth = 2)\ndtbct.fit(X_train_bct, y_train_bct)","b264192b":"# Predict (train)\ny_train_pred_bct = dtbct.predict(X_train_bct)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train_bct, y_train_pred_bct)\nr2 = r2_score(y_train_bct, y_train_pred_bct)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\nprint('Train on BCT')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","f41249f2":"# Predict (val)\ny_val_pred_bct = dtbct.predict(X_val_bct)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val_bct, y_val_pred_bct)\nr2 = r2_score(y_val_bct, y_val_pred_bct)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\nprint('Val on BCT')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","b021ae22":"test_norm = test_norm.drop(['Employee_ID', 'Attrition_rate'], axis = 1)\ntest_norm['Attrition_rate'] = dtbct.predict(test_norm)\ntest_norm['Employee_ID'] = testdf['Employee_ID']\ntest_norm.head()","89a45b03":"submission_dtbct = test_norm[['Employee_ID', 'Attrition_rate']]\nsubmission_dtbct.head()","e212cbee":"submission_dtbct.to_csv(\"submission_dtbct.csv\",index=False)","68000886":"from sklearn.linear_model import RidgeCV\nridge_reg = RidgeCV(cv=3)\nridge_reg.fit(X_train, y_train)\nprint(\"Best alpha using built-in LassoCV: %f\" % ridge_reg.alpha_)\nprint(\"Best score using built-in LassoCV: %f\" % ridge_reg.score(X_train,y_train))\ncoef = pd.Series(ridge_reg.coef_, index = X_train.columns)","4eec2227":"print(\"Ridge picked \" + str(sum(coef != 0)) + \" variables and eliminated the other \" +  str(sum(coef == 0)) + \" variables\")","5406c3cc":"# Predict (train)\ny_train_pred = ridge_reg.predict(X_train)\n\n# Model evaluation\nmse = mean_squared_error(y_train, y_train_pred)\nr2 = r2_score(y_train, y_train_pred)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\nprint('Train on non BCT')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","6c0110a2":"# Predict (val)\ny_val_pred = ridge_reg.predict(X_val)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val, y_val_pred)\nr2 = r2_score(y_val, y_val_pred)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\nprint('Val on non BCT')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","7afb2912":"test = test.drop(['Employee_ID', 'Attrition_rate'], axis = 1)\ntest['Attrition_rate'] = ridge_reg.predict(test)\ntest['Employee_ID'] = testdf['Employee_ID']\ntest.head()","e7524c95":"submission_rg = test[['Employee_ID', 'Attrition_rate']]\nsubmission_rg.head()","6eaff773":"submission_rg.to_csv(\"submission_rg.csv\",index=False)","7f115612":"ridge_regbct = RidgeCV(cv=3)\nridge_regbct.fit(X_train_bct, y_train_bct)\nprint(\"Best alpha using built-in LassoCV: %f\" % ridge_regbct.alpha_)\nprint(\"Best score using built-in LassoCV: %f\" % ridge_regbct.score(X_train_bct,y_train_bct))\ncoef = pd.Series(ridge_regbct.coef_, index = X_train_bct.columns)","9329def0":"print(\"Ridge picked \" + str(sum(coef != 0)) + \" variables and eliminated the other \" +  str(sum(coef == 0)) + \" variables\")","54ba0050":"# Predict (train)\ny_train_pred_bct = ridge_regbct.predict(X_train_bct)\n\n# Model evaluation\nmse = mean_squared_error(y_train_bct, y_train_pred_bct)\nr2 = r2_score(y_train_bct, y_train_pred_bct)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\nprint('Train on BCT')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","ca004326":"# Predict (val)\ny_val_pred_bct = ridge_regbct.predict(X_val_bct)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val_bct, y_val_pred_bct)\nr2 = r2_score(y_val_bct, y_val_pred_bct)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\nprint('Val on BCT')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","7d9fc200":"test_norm = test_norm.drop(['Employee_ID', 'Attrition_rate'], axis = 1)\ntest_norm['Attrition_rate'] = ridge_regbct.predict(test_norm)\ntest_norm['Employee_ID'] = testdf['Employee_ID']\ntest_norm.head()","0e88c395":"submission_rgbct = test_norm[['Employee_ID', 'Attrition_rate']]\nsubmission_rgbct.head()","f44aeb48":"submission_rgbct.to_csv(\"submission_rgbct.csv\",index=False)","cfd2743a":"# Predict (train)\nweights = [0.4, 0.2, 0.4]\n\ny_train_pred_ens = (linreg.predict(X_train)*weights[0]) + (dt.predict(X_train)*weights[1]) + (ridge_reg.predict(X_train)*weights[2])\n\n# Model evaluation\nmse = mean_squared_error(y_train, y_train_pred_ens)\nr2 = r2_score(y_train, y_train_pred_ens)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\nprint('Train - on non BCT')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","2705c6d6":"# Predict (val)\ny_val_pred_ens = (linreg.predict(X_val)*weights[0]) + (dt.predict(X_val)*weights[1]) + (ridge_reg.predict(X_val)*weights[2])\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val, y_val_pred_ens)\nr2 = r2_score(y_val, y_val_pred_bct)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\nprint('Val - on non BCT')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","6f79fba4":"test = test.drop(['Employee_ID', 'Attrition_rate'], axis = 1)\nsubmission_ens = pd.DataFrame()\nsubmission_ens['Employee_ID'] = testdf['Employee_ID']\nsubmission_ens['Attrition_rate'] = (linreg.predict(test)*weights[0]) + (dt.predict(test)*weights[1]) + (ridge_reg.predict(test)*weights[2])\nsubmission_ens.head()","2979cc36":"submission_ens.to_csv(\"submission_ens.csv\",index=False)","98aabdeb":"# Predict (train)\nweights = [0.4, 0.2, 0.4]\n\ny_train_pred_ens = (linregbct.predict(X_train_bct)*weights[0]) + (dtbct.predict(X_train_bct)*weights[1]) + (ridge_regbct.predict(X_train_bct)*weights[2])\n\n# Model evaluation\nmse = mean_squared_error(y_train_bct, y_train_pred_ens)\nr2 = r2_score(y_train_bct, y_train_pred_ens)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\nprint('Train on BCT')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","ef699eb8":"# Predict (val)\ny_val_pred_ens = (linregbct.predict(X_val_bct)*weights[0]) + (dtbct.predict(X_val_bct)*weights[1]) + (ridge_regbct.predict(X_val_bct)*weights[2])\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val_bct, y_val_pred_ens)\nr2 = r2_score(y_val_bct, y_val_pred_bct)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\nprint('Val on BCT')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","a7e6ba73":"test_norm = test_norm.drop(['Employee_ID', 'Attrition_rate'], axis = 1)\nsubmission_ensbct = pd.DataFrame()\nsubmission_ensbct['Employee_ID'] = testdf['Employee_ID']\nsubmission_ensbct['Attrition_rate'] = (linregbct.predict(test_norm)*weights[0]) + (dtbct.predict(test_norm)*weights[1]) + (ridge_regbct.predict(test_norm)*weights[2])\nsubmission_ensbct.head()","fefa2327":"submission_ensbct.to_csv(\"submission_ensbct.csv\",index=False)","c864c600":"from sklearn.ensemble import RandomForestRegressor\nrf0 = RandomForestRegressor()","8cdae1a6":"param_grid = { \n     'n_estimators': [5,10,15,20,30,50,60],\n     'max_features': ['auto', 'sqrt', 'log2'],\n     'max_depth' : [2,3,5,8,9,10],\n     'criterion' :['mse']\n}","45318daa":"%%time\ncv_rf = GridSearchCV(estimator=rf0, param_grid=param_grid, cv= 5)\ncv_rf.fit(X_train, y_train)","d2b07ec4":"cv_rf.best_params_","0956dc45":"rfc1 = RandomForestRegressor(random_state=45, max_features='log2', n_estimators= 60, max_depth=3, criterion='mse')\nrfc1.fit(X_train, y_train)","336087af":"# Predict (train)\ny_train_pred_rf = rfc1.predict(X_train)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train, y_train_pred_rf)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train - on non BCT')\nprint('--------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","ab259b5e":"# Predict (val)\ny_val_pred_rf = rfc1.predict(X_val)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val, y_val_pred_rf)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Val - on non BCT ')\nprint('-------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","1382ad44":"submission_rfgs = pd.DataFrame()\nsubmission_rfgs['Employee_ID'] = testdf['Employee_ID']\nsubmission_rfgs['Attrition_rate'] = rfc1.predict(test)\nsubmission_rfgs.head()","c32e12a2":"submission_rfgs.to_csv(\"submission_rfgs.csv\",index=False)","2ff6d3d9":"rf0bct = RandomForestRegressor()","cc3ebd7c":"%%time\ncv_rfbct = GridSearchCV(estimator=rf0bct, param_grid=param_grid, cv= 5)\ncv_rfbct.fit(X_train_bct, y_train_bct)","5db3138e":"cv_rfbct.best_params_","2092c810":"rfc1bct = RandomForestRegressor(random_state=45, max_features='log2', n_estimators= 60, max_depth=2, criterion='mse')\nrfc1bct.fit(X_train_bct, y_train_bct)","5d600af7":"# Predict (train)\ny_train_pred_rfbct = rfc1bct.predict(X_train_bct)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train_bct, y_train_pred_rfbct)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train - on BCT')\nprint('--------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","c483025c":"# Predict (val)\ny_val_pred_rfbct = rfc1bct.predict(X_val_bct)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val_bct, y_val_pred_rfbct)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Val - on BCT ')\nprint('-------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","c5213615":"submission_rfgsbct = pd.DataFrame()\nsubmission_rfgsbct['Employee_ID'] = testdf['Employee_ID']\nsubmission_rfgsbct['Attrition_rate'] = rfc1bct.predict(test_norm)\nsubmission_rfgsbct.head()","225d43d6":"submission_rfgsbct.to_csv(\"submission_rfgsbct.csv\",index=False)","2476ef29":"param_grid_2 = { \n     'n_estimators': [5,10,15,20,30,50,60],\n     'max_features': ['auto', 'sqrt', 'log2'],\n     'max_depth' : [2,3,5,8,9,10],\n     'min_samples_split' : [2,4,8],\n     'bootstrap': [True, False],\n     'min_samples_leaf': [1, 2, 5, 8, 10],\n     'criterion' :['mse']\n}","ddbc4eeb":"rf0bct2 = RandomForestRegressor()","24196263":"%%time\ncv_rfbct2 = GridSearchCV(estimator=rf0bct, param_grid=param_grid_2, cv= 5)\ncv_rfbct2.fit(X_train_bct, y_train_bct)","d41d835c":"cv_rfbct2.best_params_","19cd18fc":"rfc1bct2 = RandomForestRegressor(random_state=45, bootstrap = True, max_features='log2', n_estimators= 5, max_depth=2, \n                                 min_samples_leaf = 2, min_samples_split=5, criterion='mse')\nrfc1bct2.fit(X_train_bct, y_train_bct)","489ba737":"# Predict (train)\ny_train_pred_rfbct2 = rfc1bct2.predict(X_train_bct)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train_bct, y_train_pred_rfbct2)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train - on BCT')\nprint('--------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","c60168ef":"# Predict (val)\ny_val_pred_rfbct2 = rfc1bct2.predict(X_val_bct)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val_bct, y_val_pred_rfbct2)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Val - on BCT ')\nprint('-------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","869e43c2":"submission_rfgsbct2 = pd.DataFrame()\nsubmission_rfgsbct2['Employee_ID'] = testdf['Employee_ID']\nsubmission_rfgsbct2['Attrition_rate'] = rfc1bct2.predict(test_norm)\nsubmission_rfgsbct2.head()","7a487322":"submission_rfgsbct2.to_csv(\"submission_rfgsbct2.csv\",index=False)","3f818d90":"import lightgbm as lgb\nfrom sklearn.model_selection import RandomizedSearchCV\nclf = lgb.LGBMRegressor(silent=True, random_state = 301, metric='mse', n_jobs=-1)","b041818c":"params ={'cat_smooth' : sp_randint(1, 100), 'max_cat_threshold': sp_randint(1,50)}","0b0b0a0c":"fit_params={\"eval_metric\" : 'mse', \n            \"eval_set\" : [(X_train, y_train),(X_val,y_val)],\n            'eval_names': ['train','valid'],\n            'verbose': 200,\n            'categorical_feature': 'auto'}","3e3af9b5":"gs = RandomizedSearchCV( estimator=clf, param_distributions=params, scoring='neg_root_mean_squared_error',\n                        cv=5, refit=True,random_state=301,verbose=True)","90974e5d":"gs.fit(X_train, y_train, **fit_params)\nprint('Best score reached: {} with params: {} '.format(gs.best_score_, gs.best_params_))","6ba0cefa":"gs.best_params_, gs.best_score_","f3c4b3c9":"clf2 = lgb.LGBMRegressor(**clf.get_params())\nclf2.set_params(**gs.best_params_)","5a0b7f86":"params_2 = {'learning_rate': [0.02, 0.03, 0.05, 0.08, 0.09, 0.1],   \n            'num_iterations': sp_randint(30,500)}","a71eceb3":"gs2 = RandomizedSearchCV( estimator=clf2, param_distributions=params_2, scoring='neg_root_mean_squared_error',\n                        cv=5, refit=True,random_state=301,verbose=True)","cdaabd72":"gs2.fit(X_train, y_train, **fit_params)\nprint('Best score reached: {} with params: {} '.format(gs2.best_score_, gs2.best_params_))","be806db0":"chk1_params = {**gs.best_params_, **gs2.best_params_, 'scoring':'neg_root_mean_squared_error'}\nchk1_params","da894ba3":"lgbm_train1 = lgb.Dataset(X_train, y_train, categorical_feature=cat_cols)\nlgbm_val1 = lgb.Dataset(X_val, y_val, reference = lgbm_train1)","1db43475":"model_lgbm_chk1 = lgb.train(chk1_params,\n                lgbm_train1,\n                num_boost_round=1000,\n                valid_sets=[lgbm_train1, lgbm_val1],\n                feature_name=['f' + str(i + 1) for i in range(X_train.shape[-1])],\n                categorical_feature= [150],\n                verbose_eval=100)","566e7ef1":"# Predict (train)\ny_train_pred_lgbmchk1 = model_lgbm_chk1.predict(X_train)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train, y_train_pred_lgbmchk1)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train - on non BCT')\nprint('--------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","ca723d7f":"# Predict (val)\ny_val_pred_lgbmchk1 = model_lgbm_chk1.predict(X_val)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val, y_val_pred_lgbmchk1)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Val - on non BCT ')\nprint('-------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","3e423ed1":"submission_lgbmchk1 = pd.DataFrame()\nsubmission_lgbmchk1['Employee_ID'] = testdf['Employee_ID']\nsubmission_lgbmchk1['Attrition_rate'] = model_lgbm_chk1.predict(test)\nsubmission_lgbmchk1.head()","73a8eaa1":"submission_lgbmchk1.to_csv(\"submission_lgbmchk1.csv\",index=False)","4ccef495":"gs2.best_params_, gs2.best_score_","f02dfccb":"clf3 = lgb.LGBMRegressor(**clf2.get_params())\nclf3.set_params(**gs2.best_params_)","e513029e":"params_3 = {'colsample_bytree': sp_uniform(loc=0.4, scale=0.6), 'num_leaves': sp_randint(50, 500), \n            'min_child_samples': sp_randint(10,200), 'min_child_weight': [1e-2, 1e-1, 1, 1e1]}","858981d6":"gs3 = RandomizedSearchCV( estimator=clf3, param_distributions=params_3, scoring='neg_root_mean_squared_error',\n                        cv=5, refit=True,random_state=301,verbose=True)","511e40d5":"gs3.fit(X_train, y_train, **fit_params)\nprint('Best score reached: {} with params: {} '.format(gs3.best_score_, gs3.best_params_))","617c3c1b":"chk2_params = {**gs.best_params_, **gs2.best_params_, **gs3.best_params_, 'scoring':'neg_root_mean_squared_error'}\nchk2_params","312ad74f":"lgbm_train2 = lgb.Dataset(X_train, y_train, categorical_feature=cat_cols)\nlgbm_val2 = lgb.Dataset(X_val, y_val, reference = lgbm_train2)","df67a205":"model_lgbm_chk2 = lgb.train(chk2_params,\n                lgbm_train2,\n                num_boost_round=1000,\n                valid_sets=[lgbm_train2, lgbm_val2],\n                feature_name=['f' + str(i + 1) for i in range(X_train.shape[-1])],\n                categorical_feature= [150],\n                verbose_eval=100)","d31f692f":"# Predict (train)\ny_train_pred_lgbmchk2 = model_lgbm_chk2.predict(X_train)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train, y_train_pred_lgbmchk2)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train - on non BCT')\nprint('--------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","98801f92":"# Predict (val)\ny_val_pred_lgbmchk2 = model_lgbm_chk2.predict(X_val)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val, y_val_pred_lgbmchk2)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Val - on non BCT ')\nprint('-------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","f5c069c9":"submission_lgbmchk2 = pd.DataFrame()\nsubmission_lgbmchk2['Employee_ID'] = testdf['Employee_ID']\nsubmission_lgbmchk2['Attrition_rate'] = model_lgbm_chk2.predict(test)\nsubmission_lgbmchk2.head()","09d171f8":"submission_lgbmchk2.to_csv(\"submission_lgbmchk2.csv\",index=False)","6ad17ea2":"gs3.best_params_, gs3.best_score_","1c2a6970":"clf4 = lgb.LGBMRegressor(**clf3.get_params())\nclf4.set_params(**gs3.best_params_)","14a665c2":"params_4 = {'max_bin': sp_randint(10, 800), 'max_depth': sp_randint(1, 10), \n            'min_data_in_leaf': sp_randint(50, 2500)}","83eaa041":"gs4 = RandomizedSearchCV(estimator=clf4, param_distributions=params_4, scoring='neg_root_mean_squared_error',\n                        cv=5, refit=True,random_state=333,verbose=True)","7e895a92":"gs4.fit(X_train, y_train, **fit_params)\nprint('Best score reached: {} with params: {}'.format(gs4.best_score_, gs4.best_params_))","55e29678":"chk3_params = {**gs.best_params_, **gs2.best_params_, **gs3.best_params_, **gs4.best_params_,'scoring':'neg_root_mean_squared_error'}\nchk3_params","2939d136":"lgbm_train3 = lgb.Dataset(X_train, y_train, categorical_feature=cat_cols)\nlgbm_val3 = lgb.Dataset(X_val, y_val, reference = lgbm_train3)","9d0bf1c8":"model_lgbm_chk3 = lgb.train(chk3_params,\n                lgbm_train3,\n                num_boost_round=1000,\n                valid_sets=[lgbm_train3, lgbm_val3],\n                feature_name=['f' + str(i + 1) for i in range(X_train.shape[-1])],\n                categorical_feature= [150],\n                verbose_eval=100)","34fa3e1f":"# Predict (train)\ny_train_pred_lgbmchk3 = model_lgbm_chk3.predict(X_train)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train, y_train_pred_lgbmchk3)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train - on non BCT')\nprint('--------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","39acc5ea":"# Predict (val)\ny_val_pred_lgbmchk3 = model_lgbm_chk3.predict(X_val)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val, y_val_pred_lgbmchk3)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Val - on non BCT ')\nprint('-------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","0e269ce8":"submission_lgbmchk3 = pd.DataFrame()\nsubmission_lgbmchk3['Employee_ID'] = testdf['Employee_ID']\nsubmission_lgbmchk3['Attrition_rate'] = model_lgbm_chk3.predict(test)\nsubmission_lgbmchk3.head()","0acf71f1":"submission_lgbmchk3.to_csv(\"submission_lgbmchk3.csv\",index=False)","a0b9e031":"gs4.best_params_, gs4.best_score_","cebc989b":"clf5 = lgb.LGBMRegressor(**clf4.get_params())\nclf5.set_params(**gs4.best_params_)","666a85bb":"params_5 = {'reg_lambda': sp_randint(1, 30), 'boosting': ['goss', 'dart']}","35a7a850":"gs5 = RandomizedSearchCV(estimator=clf5, param_distributions=params_5, scoring='neg_root_mean_squared_error',\n                        cv=5, refit=True,random_state=333,verbose=True)","a8b2556b":"gs5.fit(X_train, y_train, **fit_params)\nprint('Best score reached: {} with params: {}'.format(gs5.best_score_, gs5.best_params_))","b04afd10":"chk4_params = {**gs.best_params_, **gs2.best_params_, **gs3.best_params_, **gs4.best_params_, **gs5.best_params_,'scoring':'neg_root_mean_squared_error'}\nchk4_params","d1c47940":"lgbm_train4 = lgb.Dataset(X_train, y_train, categorical_feature=cat_cols)\nlgbm_val4 = lgb.Dataset(X_val, y_val, reference = lgbm_train4)","a5ce7be1":"model_lgbm_chk4 = lgb.train(chk4_params,\n                lgbm_train4,\n                num_boost_round=1000,\n                valid_sets=[lgbm_train4, lgbm_val4],\n                feature_name=['f' + str(i + 1) for i in range(X_train.shape[-1])],\n                categorical_feature= [150],\n                verbose_eval=100)","8a0fe216":"# Predict (train)\ny_train_pred_lgbmchk4 = model_lgbm_chk4.predict(X_train)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train, y_train_pred_lgbmchk4)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train - on non BCT')\nprint('--------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","5718fb34":"# Predict (val)\ny_val_pred_lgbmchk4 = model_lgbm_chk4.predict(X_val)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val, y_val_pred_lgbmchk4)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Val - on non BCT ')\nprint('-------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","30e8d59f":"submission_lgbmchk4 = pd.DataFrame()\nsubmission_lgbmchk4['Employee_ID'] = testdf['Employee_ID']\nsubmission_lgbmchk4['Attrition_rate'] = model_lgbm_chk4.predict(test)\nsubmission_lgbmchk4.head()","a4a87b52":"submission_lgbmchk4.to_csv(\"submission_lgbmchk4.csv\",index=False)","92690a90":"gs5.best_params_, gs5.best_score_","baf9db01":"clf6 = lgb.LGBMRegressor(**clf5.get_params())\nclf6.set_params(**gs5.best_params_)","e62bf33b":"params_6 = {'bagging_fraction': [0.2, 0.4, 0.6, 0.8, 1], 'feature_fraction': [0.2, 0.4, 0.6, 0.8, 1]}","dac19a4e":"gs6 = RandomizedSearchCV(estimator=clf6, param_distributions=params_6, scoring='neg_root_mean_squared_error',\n                        cv=5, refit=True,random_state=333,verbose=True)","3d6ecb06":"gs6.fit(X_train, y_train, **fit_params)\nprint('Best score reached: {} with params: {}'.format(gs6.best_score_, gs6.best_params_))","bd316102":"final_params = {**gs.best_params_, **gs2.best_params_, **gs3.best_params_, **gs4.best_params_, \n                **gs5.best_params_, **gs6.best_params_,'scoring':'neg_root_mean_squared_error'}\nfinal_params","3b1721f2":"lgbm_train5 = lgb.Dataset(X_train, y_train, categorical_feature=cat_cols)\nlgbm_val5 = lgb.Dataset(X_val, y_val, reference = lgbm_train5)","dc17e0de":"model_lgbm_chk5 = lgb.train(final_params,\n                lgbm_train5,\n                num_boost_round=1000,\n                valid_sets=[lgbm_train5, lgbm_val5],\n                feature_name=['f' + str(i + 1) for i in range(X_train.shape[-1])],\n                categorical_feature= [150],\n                verbose_eval=100)","8ac51d80":"# Predict (train)\ny_train_pred_lgbmchk5 = model_lgbm_chk5.predict(X_train)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train, y_train_pred_lgbmchk5)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train - on non BCT')\nprint('--------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","d2ff64ed":"# Predict (val)\ny_val_pred_lgbmchk5 = model_lgbm_chk5.predict(X_val)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val, y_val_pred_lgbmchk5)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Val - on non BCT ')\nprint('-------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","0f40e865":"submission_lgbmchk5 = pd.DataFrame()\nsubmission_lgbmchk5['Employee_ID'] = testdf['Employee_ID']\nsubmission_lgbmchk5['Attrition_rate'] = model_lgbm_chk5.predict(test)\nsubmission_lgbmchk5.head()","765a5867":"submission_lgbmchk5.to_csv(\"submission_lgbmchk5.csv\",index=False)","f3187ba6":"lgbm_trainbct = lgb.Dataset(X_train_bct, y_train_bct, categorical_feature=cat_cols)\nlgbm_valbct = lgb.Dataset(X_val_bct, y_val_bct, reference = lgbm_trainbct)","8a613e5c":"model_lgbm_bct = lgb.train(final_params,\n                lgbm_trainbct,\n                num_boost_round=1000,\n                valid_sets=[lgbm_trainbct, lgbm_valbct],\n                feature_name=['f' + str(i + 1) for i in range(X_train.shape[-1])],\n                categorical_feature= [150],\n                verbose_eval=100)","93776cff":"# Predict (train)\ny_train_pred_lgbm_bct = model_lgbm_bct.predict(X_train_bct)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train_bct, y_train_pred_lgbm_bct)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train - on BCT')\nprint('--------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","4bc18f33":"# Predict (val)\ny_val_pred_lgbm_bct = model_lgbm_bct.predict(X_val_bct)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val_bct, y_val_pred_lgbm_bct)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Val - on BCT ')\nprint('-------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","86dd000d":"submission_lgbm_bct = pd.DataFrame()\nsubmission_lgbm_bct['Employee_ID'] = testdf['Employee_ID']\nsubmission_lgbm_bct['Attrition_rate'] = model_lgbm_bct.predict(test_norm)\nsubmission_lgbm_bct.head()","c6d33892":"submission_lgbm_bct.to_csv(\"submission_lgbm_bct.csv\",index=False)","799e3897":"X_noTOS = X.drop('Time_of_service', axis = 1)\ntest_noTOS = test.drop('Time_of_service', axis = 1)","fe62d014":"# Splitting of non BCT Data dropping Time_of_service\nX_train_noTOS, X_val_noTOS, y_train_noTOS, y_val_noTOS = train_test_split(X_noTOS,y,test_size=0.3, random_state = 45)","db120350":"lgbm_train_noTOS = lgb.Dataset(X_train_noTOS, y_train_noTOS, categorical_feature=cat_cols)\nlgbm_val_noTOS = lgb.Dataset(X_val_noTOS, y_val_noTOS, reference = lgbm_train_noTOS)","ecbd0d5b":"model_lgbm_noTOS = lgb.train(final_params,\n                lgbm_train_noTOS,\n                num_boost_round=1000,\n                valid_sets=[lgbm_train_noTOS, lgbm_val_noTOS],\n                feature_name=['f' + str(i + 1) for i in range(X_train_noTOS.shape[-1])],\n                categorical_feature= [150],\n                verbose_eval=100)","f5b92798":"# Predict (train)\ny_train_pred_lgbm_noTOS = model_lgbm_noTOS.predict(X_train_noTOS)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train_noTOS, y_train_pred_lgbm_noTOS)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train - on non BCT')\nprint('--------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","b4cc1beb":"# Predict (val)\ny_val_pred_lgbm_noTOS = model_lgbm_noTOS.predict(X_val_noTOS)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val_noTOS, y_val_pred_lgbm_noTOS)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Val - on non BCT ')\nprint('-------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","e852e835":"submission_lgbm_noTOS = pd.DataFrame()\nsubmission_lgbm_noTOS['Employee_ID'] = testdf['Employee_ID']\nsubmission_lgbm_noTOS['Attrition_rate'] = model_lgbm_noTOS.predict(test_noTOS)\nsubmission_lgbm_noTOS.head()","aa011a79":"submission_lgbm_noTOS.to_csv(\"submission_lgbm_noTOS.csv\",index=False)","1417fddd":"from sklearn.feature_selection import RFE #importing RFE class from sklearn library\n\nrfe_rf= RFE(estimator= rfc1bct , step = 1) # with Random Forest\n\n# Fit the function for ranking the features\nfit = rfe_rf.fit(X_train_bct, y_train_bct)\n\nprint(\"Num Features: %d\" % fit.n_features_)\nprint(\"Selected Features: %s\" % fit.support_)\nprint(\"Feature Ranking: %s\" % fit.ranking_)","92b43102":"pd.set_option('display.max_rows', 100)\nselected_rfe_features = pd.DataFrame({'Feature':list(X_train_bct.columns),\n                                      'Ranking':rfe_rf.ranking_})\nselected_rfe_features.sort_values(by='Ranking').reset_index(drop=True)","e64d6377":"# Transforming the data\nX_train_bct_rfe = rfe_rf.transform(X_train_bct)\nX_val_bct_rfe = rfe_rf.transform(X_val_bct)\ntest_norm_rfe = rfe_rf.transform(test_norm)\n# Fitting our baseline model with the transformed data\nrfbct_rfe_model = rfc1bct.fit(X_train_bct_rfe, y_train_bct)","3e3740ba":"# Predict (train)\ny_train_pred_rf_rfe = rfbct_rfe_model.predict(X_train_bct_rfe)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train_bct, y_train_pred_rf_rfe)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train - on BCT Data')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","7b348fef":"# Predict (val)\ny_val_pred_rf_rfe = rfbct_rfe_model.predict(X_val_bct_rfe)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val_bct, y_val_pred_rf_rfe)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Val')\nprint('----------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","c5c9b3d2":"submission_rf_rfe = pd.DataFrame()\nsubmission_rf_rfe['Employee_ID'] = testdf['Employee_ID']\nsubmission_rf_rfe['Attrition_rate'] = rfbct_rfe_model.predict(test_norm_rfe)\nsubmission_rf_rfe.head()","0e3aebad":"submission_rf_rfe.to_csv(\"submission_rf_rfe.csv\",index=False)","ebe215a7":"rfe_linreg = RFE(estimator= linreg ,  n_features_to_select=15, step = 1) # with Random Forest\n\n# Fit the function for ranking the features\nfit = rfe_linreg.fit(X_train, y_train)\n\nprint(\"Num Features: %d\" % fit.n_features_)\nprint(\"Selected Features: %s\" % fit.support_)\nprint(\"Feature Ranking: %s\" % fit.ranking_)","d63600f5":"pd.set_option('display.max_rows', 100)\nselected_rfe_linreg_features = pd.DataFrame({'Feature':list(X_train.columns),\n                                      'Ranking':rfe_linreg.ranking_})\nselected_rfe_linreg_features.sort_values(by='Ranking').reset_index(drop=True)","8ed3dfcd":"# Transforming the data\nX_train_rfe = rfe_linreg.transform(X_train)\nX_val_rfe = rfe_linreg.transform(X_val)\ntest_rfe = rfe_linreg.transform(test)\n# Fitting our baseline model with the transformed data\nlinreg_rfe_model = linreg.fit(X_train_rfe, y_train)","81ae97ca":"# Predict (train)\ny_train_pred_linreg_rfe = linreg_rfe_model.predict(X_train_rfe)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train, y_train_pred_linreg_rfe)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train - on non BCT Data')\nprint('------------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","7ac389ca":"# Predict (val)\ny_val_pred_linreg_rfe = linreg_rfe_model.predict(X_val_rfe)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val, y_val_pred_linreg_rfe)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Val - on non BCT Data')\nprint('-----------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","69024721":"submission_linreg_rfe = pd.DataFrame()\nsubmission_linreg_rfe['Employee_ID'] = testdf['Employee_ID']\nsubmission_linreg_rfe['Attrition_rate'] = linreg_rfe_model.predict(test_rfe)\nsubmission_linreg_rfe.head()","4a0a014b":"submission_linreg_rfe.to_csv(\"submission_linreg_rfe.csv\",index=False)","9569f822":"rfe_linreg = RFE(estimator= linreg ,  n_features_to_select=15, step = 1) # with Random Forest\n\n# Fit the function for ranking the features\nfit = rfe_linreg.fit(X_train, y_train)\n\nprint(\"Num Features: %d\" % fit.n_features_)\nprint(\"Selected Features: %s\" % fit.support_)\nprint(\"Feature Ranking: %s\" % fit.ranking_)","109d2205":"pd.set_option('display.max_rows', 100)\nselected_rfe_linreg_features = pd.DataFrame({'Feature':list(X_train.columns),\n                                      'Ranking':rfe_linreg.ranking_})\nselected_rfe_linreg_features.sort_values(by='Ranking').reset_index(drop=True)","17c8098c":"# Transforming the data\nX_train_rfe = rfe_linreg.transform(X_train)\nX_val_rfe = rfe_linreg.transform(X_val)\ntest_rfe = rfe_linreg.transform(test)\n# Fitting our baseline model with the transformed data\nlinreg_rfe_model = linreg.fit(X_train_rfe, y_train)","65f59525":"# Predict (train)\ny_train_pred_linreg_rfe = linreg_rfe_model.predict(X_train_rfe)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train, y_train_pred_linreg_rfe)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train - on non BCT Data')\nprint('------------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","939c881b":"# Predict (val)\ny_val_pred_linreg_rfe = linreg_rfe_model.predict(X_val_rfe)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val, y_val_pred_linreg_rfe)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Val - on non BCT Data')\nprint('-----------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","07d66188":"submission_linreg_rfe = pd.DataFrame()\nsubmission_linreg_rfe['Employee_ID'] = testdf['Employee_ID']\nsubmission_linreg_rfe['Attrition_rate'] = linreg_rfe_model.predict(test_rfe)\nsubmission_linreg_rfe.head()","40653276":"submission_linreg_rfe.to_csv(\"submission_linreg_rfe.csv\",index=False)","7dcd6806":"import xgboost as xgb\nxgb1 = xgb.XGBRegressor()","d9fd6e3f":"parameters = {'learning_rate': [0.055, 0.06, 0.065],\n              'max_depth': [2, 3, 4, 5],\n              'min_child_weight': [4,5,6],\n              'subsample':[i\/10.0 for i in range(5,8)],\n              'colsample_bytree': [i\/10.0 for i in range(5,8)],\n              'n_estimators': [60,70,75],\n              'gamma':[i\/10.0 for i in range(3,6)]}\n","7beaad75":"xgb_gscv = GridSearchCV(xgb1, parameters, cv = 5, n_jobs = -1, verbose=True)\nxgb_gscv.fit(X_train, y_train)","65135de5":"xgb_gscv.best_params_","4917912e":"# Predict (train)\ny_train_pred_xgb = xgb_gscv.predict(X_train)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train, y_train_pred_xgb)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train - on non BCT Data')\nprint('------------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","8de09ba2":"# Predict (val)\ny_val_pred_xgb = xgb_gscv.predict(X_val)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val, y_val_pred_xgb)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Val - on non BCT Data')\nprint('-----------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","736d9edc":"submission_xgb_gscv = pd.DataFrame()\nsubmission_xgb_gscv['Employee_ID'] = testdf['Employee_ID']\nsubmission_xgb_gscv['Attrition_rate'] = xgb_gscv.predict(test)\nsubmission_xgb_gscv.head()","77c7cf1c":"submission_xgb_gscv.to_csv(\"submission_xgb_gscv.csv\",index=False)","846308e4":"features = ['Age', 'Time_of_service', 'growth_rate']","a2ef48b6":"X_scaled = X.copy()\ntest_scaled = test.copy()","01bb7d87":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_scaled.loc[:,features])\n\nX_scaled.loc[:,features]=scaler.transform(X_scaled.loc[:,features])\ntest_scaled.loc[:,features]=scaler.transform(test_scaled.loc[:,features])","52c7c208":"# Splitting of non BCT Data dropping Time_of_service\nX_train_sc, X_val_sc, y_train_sc, y_val_sc = train_test_split(X_scaled,y,test_size=0.3, random_state = 45)","06fef8ec":"lgbm_train_sc = lgb.Dataset(X_train_sc, y_train_sc, categorical_feature=cat_cols)\nlgbm_val_sc = lgb.Dataset(X_val_sc, y_val_sc, reference = lgbm_train_sc)","c5af22d3":"model_lgbm_sc = lgb.train(final_params,\n                lgbm_train_sc,\n                num_boost_round=1000,\n                valid_sets=[lgbm_train_sc, lgbm_val_sc],\n                feature_name=['f' + str(i + 1) for i in range(X_train_sc.shape[-1])],\n                categorical_feature= [150],\n                verbose_eval=100)","c30721c3":"# Predict (train)\ny_train_pred_lgbm_sc = model_lgbm_sc.predict(X_train_sc)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train_sc, y_train_pred_lgbm_sc)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train - on non BCT')\nprint('--------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","89b52ef5":"# Predict (val)\ny_val_pred_lgbm_sc = model_lgbm_sc.predict(X_val_sc)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val_sc, y_val_pred_lgbm_sc)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Val - on non BCT ')\nprint('-------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","28df81fc":"submission_lgbm_sc = pd.DataFrame()\nsubmission_lgbm_sc['Employee_ID'] = testdf['Employee_ID']\nsubmission_lgbm_sc['Attrition_rate'] = model_lgbm_sc.predict(test_scaled)\nsubmission_lgbm_sc.head()","61224cdd":"submission_lgbm_sc.to_csv(\"submission_lgbm_sc.csv\",index=False)","e54f866c":"xgb3 = xgb.XGBRegressor()","acf20528":"parameters3 = {'colsample_bytree': [0.6], 'gamma': [0.5],\n               'learning_rate': [0.065], 'max_depth': [3],\n               'min_child_weight': [6], 'n_estimators': [75], 'subsample': [0.5]}","e8c3d420":"xgb_gscvsc = GridSearchCV(xgb3, parameters3, cv = 5, n_jobs = -1, verbose=True)\nxgb_gscvsc.fit(X_train_sc, y_train_sc)","6f077041":"# Predict (train)\ny_train_pred_xgbsc = xgb_gscvsc.predict(X_train_sc)\n\n# Model evaluation (train)\nmse = mean_squared_error(y_train_sc, y_train_pred_xgbsc)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Train - on non BCT Data')\nprint('------------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","c6e9d820":"# Predict (val)\ny_val_pred_xgbsc = xgb_gscvsc.predict(X_val_sc)\n\n# Model evaluation (val)\nmse = mean_squared_error(y_val_sc, y_val_pred_xgbsc)\nrmse = math.sqrt(mse)\nscore = 100*max(0,1 - rmse)\n\nprint('Val - on non BCT Data')\nprint('-----------------------')\nprint('Score: ', score)\nprint('MSE: ', mse)\nprint('RMSE: ', rmse)","c2b52e1a":"submission_xgb_gscvsc = pd.DataFrame()\nsubmission_xgb_gscvsc['Employee_ID'] = testdf['Employee_ID']\nsubmission_xgb_gscvsc['Attrition_rate'] = xgb_gscvsc.predict(test_scaled)\nsubmission_xgb_gscvsc.head()","bd2fc6e2":"submission_xgb_gscvsc.to_csv(\"submission_xgb_gscvsc.csv\",index=False)","13a8e8fb":"## 3. Extracting Columns for Conversion <a id = 'ext' ><\/a> \n[Home](#home) <a href = '#home'><\/a>","f8027025":"[Home](#home) <a href = '#home'><\/a>","db7b7972":"4. [**Models**](#mod) <a href = '#mod'><\/a>   \n    - [**A. Linear Regression**](#lr) <a href = '#lr'><\/a>\n        - On non BCT Data: 81.12936\n        - On BCT Data: 81.12014\n    - [**B. Decision Tree**](#dt) <a href = '#dt'><\/a>\n        - On non BCT Data: 81.09630\n        - On BCT Data: 81.15839\n    - [**C. Ridge Regression**](#rg) <a href = '#rg'><\/a>\n        - On non BCT Data: 81.14778\n        - On BCT Data: 81.13692\n    - [**D. Ensemble - LinReg, DT, RidgeReg**](#ens) <a href = '#ens'><\/a>\n        - On non BCT Data: 81.16401\n        - On BCT Data: 81.15603       \n    - [**E. Random Forest GSCV**](#rf) <a href = '#rf'><\/a>\n        - On non BCT Data: 81.26247\n        - On BCT Data: 81.26947  \n        - On BCT Data - second set of parameters: 81.24065\n    - [**F. LGBM GSCV**](#lgbm) <a href = '#lgbm'><\/a>\n        - On non BCT Data: \n            - [Check 1: 81.23080](#chk1) <a href = '#chk1'><\/a>\n                - 'cat_smooth': 57,  'max_cat_threshold': 9, 'learning_rate': 0.02, 'num_iterations': 82, 'scoring': 'neg_root_mean_squared_error'\n            - [Check 2: 81.22479](#chk2) <a href = '#chk2'><\/a>\n                - 'cat_smooth': 57,  'max_cat_threshold': 9, 'learning_rate': 0.02, 'num_iterations': 82, 'scoring': 'neg_root_mean_squared_error'\n                - 'colsample_bytree': 0.5151613905633492, 'min_child_samples': 186, 'min_child_weight': 10.0,  'num_leaves': 459,\n            - [Check 3: 81.26459](#chk3) <a href = '#chk3'><\/a>\n                - 'cat_smooth': 57,  'max_cat_threshold': 9, 'learning_rate': 0.02, 'num_iterations': 82, 'scoring': 'neg_root_mean_squared_error'\n                - 'colsample_bytree': 0.5151613905633492, 'min_child_samples': 186, 'min_child_weight': 10.0,  'num_leaves': 459,\n                - 'max_bin': 576,  'max_depth': 5,  'min_data_in_leaf': 1136\n            - [Check 4: 81.26732](#chk4) <a href = '#chk4'><\/a>\n                - 'cat_smooth': 57,  'max_cat_threshold': 9, 'learning_rate': 0.02, 'num_iterations': 82, 'scoring': 'neg_root_mean_squared_error'\n                - 'colsample_bytree': 0.5151613905633492, 'min_child_samples': 186, 'min_child_weight': 10.0,  'num_leaves': 459,\n                - 'max_bin': 576,  'max_depth': 5,  'min_data_in_leaf': 1136 , 'boosting': 'goss', 'reg_lambda': 13\n            - [Final Build on non BCT Data: 81.26373](#fb) <a href = '#fb'><\/a>\n                - 'cat_smooth': 57,  'max_cat_threshold': 9, 'learning_rate': 0.02, 'num_iterations': 82, 'scoring': 'neg_root_mean_squared_error'\n                - 'colsample_bytree': 0.5151613905633492, 'min_child_samples': 186, 'min_child_weight': 10.0,  'num_leaves': 459,\n                - 'max_bin': 576,  'max_depth': 5,  'min_data_in_leaf': 1136 , 'boosting': 'goss', 'reg_lambda': 13, 'feature_fraction': 0.6,  'bagging_fraction': 0.2\n        - On BCT Data: \n            - [Final Build on BCT Data: 81.26363](#fb1) <a href = '#fb1'><\/a>\n                - 'cat_smooth': 57,  'max_cat_threshold': 9, 'learning_rate': 0.02, 'num_iterations': 82, 'scoring': 'neg_root_mean_squared_error'\n                - 'colsample_bytree': 0.5151613905633492, 'min_child_samples': 186, 'min_child_weight': 10.0,  'num_leaves': 459,\n                - 'max_bin': 576,  'max_depth': 5,  'min_data_in_leaf': 1136 , 'boosting': 'goss', 'reg_lambda': 13, 'feature_fraction': 0.6,  'bagging_fraction': 0.2\n        - On non BCT Data: \n            - [On non BCT Data with Time_of_service dropped: 81.25878](#noTOS) <a href = '#noTOS'><\/a>\n                - 'cat_smooth': 57,  'max_cat_threshold': 9, 'learning_rate': 0.02, 'num_iterations': 82, 'scoring': 'neg_root_mean_squared_error'\n                - 'colsample_bytree': 0.5151613905633492, 'min_child_samples': 186, 'min_child_weight': 10.0,  'num_leaves': 459,\n                - 'max_bin': 576,  'max_depth': 5,  'min_data_in_leaf': 1136 , 'boosting': 'goss', 'reg_lambda': 13, 'feature_fraction': 0.6,  'bagging_fraction': 0.2   \n    - [**G. RFE**](#rfe) <a href = '#rfe'><\/a>\n        - With Random Forest on BCT Data 81.27358\n        - With Linear Regression on non BCT Data 81.17004\n    - [**F. XGBoost GSCV**](#xgb) <a href = '#xgb'><\/a>\n        - On non BCT Data 81.27132\n        - With Linear Regression on non BCT Data 81.17004\n    - [**H. On Scaled Data**](#sc) <a href = '#sc'><\/a>\n        - On non BCT Data - LGBM: 81.26373\n        - On non BCT Data - XGB: 81.27132","d8e7f065":"#### Age <a id = 'age' ><\/a>","b5ebefb4":"### With Linear Regression on non BCT Data\n[Models](#model) <a href = '#model'><\/a> ","2afcb036":"### With Random Forest on BCT Data","2651dd1b":"### Analyzing for Imputation    <a id = 'cor' ><\/a>","421cd679":"#### On BCT Data","5ad1be3c":"## F. LGBM <a id = 'lgbm' ><\/a> \n[Home](#home) <a href = '#home'><\/a>","cabe9b50":"#### Time_of_service <a id = 'tos' ><\/a>\n[Home](#home) <a href = '#home'><\/a>","ec38c7a8":"#### Grid Search for 'cat_smooth', and 'max_cat_threshold","e53858d9":"### B. Decision Tree <a id = 'dt' ><\/a> \n[Home](#home) <a href = '#home'><\/a>","f5c5a2d2":"#### On BCT Data","07976982":"1. [**Libraries and Analyzing the Data**](#libraries) <a href = '#libraries'><\/a>\n2. [**Plots**](#plt) <a href = '#plt'><\/a>   \n    - [**Analyzing for Imputation**](#cor) <a href = '#cor'><\/a>\n        - [Age](#age) <a href = '#age'><\/a>\n            - Imputing with the mean\n        - [Time_of_service](#tos) <a href = '#tos'><\/a>\n            - Applying Box-Cox Transformation for skewness\n            - Imputing with respective mean values\n        - [Pay_Scale](#ps) <a href = '#ps'><\/a>\n            - Converting to Categorical for mode imputation\n        - [Work_Life_balance](#wlb) <a href = '#wlb'><\/a>\n            - Converting to Categorical for mode imputation\n        - [VAR2](#v2) <a href = '#v2'><\/a>\n            - Converting to Categorical for mode imputation\n        - [VAR4](#v4) <a href = '#v4'><\/a>\n            - Converting to Categorical for mode imputation\n    - [**Correlation Plot**](#crdrp) <a href = '#crdrp'><\/a>    \n        - Age vs Time_of_service\n            - High positive correlation between Age and Time_of_service\n3. [**Extracting Columns for Conversion**](#ext) <a href = '#ext'><\/a>   \n    - [**Transformation on non BCT Data**](#nonbct) <a href = '#nonbct'><\/a>\n    - [**Transformation on BCT Data**](#bct) <a href = '#bct'><\/a>\n   \n            ","ca2efd4e":"<a id = 'home' ><\/a>","1b13354f":"#### On BCT Data - GSCV-2","56d5a848":"#### On non BCT Data","463e64a2":"## E. Random Forest <a id = 'rf' ><\/a> \n[Home](#home) <a href = '#home'><\/a>","b3632fa3":"#### VAR2 <a id = 'v2' ><\/a> \n[Home](#home) <a href = '#home'><\/a>","6387e848":"## 1. Libraries and Analyzing the Data <a id = 'libraries' ><\/a>\n[Home](#home) <a href = '#home'><\/a>","8b13b311":"[Model](#model) <a href = '#model'><\/a>","b944c7c2":"[Models](#model) <a href = '#model'><\/a>","e4dc94d6":"#### Final Build on BCT Data <a id = 'fb1' ><\/a>\n[Models](#model) <a href = '#model'><\/a> ","a7f7aafb":"<a id = 'model' ><\/a>","d3c17eba":"#### Grid Search for 'bagging_fraction' and 'feature_fraction'","95d1f74b":"## 2. Plots    <a id = 'plt' ><\/a>\n[Home](#home) <a href = '#home'><\/a>","e59ce99f":"#### **Grid Search for 'colsample_bytree', 'num_leaves', 'min_child_samples', 'min_child_weight'**","5c8ef228":"#### On non BCT Data","2f280350":"### **Correlation Plot** <a id = 'crdrp' ><\/a> \n- High positive correlation between Age and Time_of_service","fe83656c":"#### On non BCT Data","93955a10":"## F. XGBoost GSCV <a id = 'xgb' ><\/a>\n[Models](#model) <a href = '#model'><\/a> ","42b86353":"#### On non BCT Data","c1a2e3df":"#### On BCT Data","22f0a16c":"#### Check 2 <a id = 'chk2' ><\/a>\n[Models](#model) <a href = '#model'><\/a>  ","d35f8ef7":"#### On non BCT Data","7c4239b8":"#### Work_Life_balance <a id = 'wlb' ><\/a> \n[Home](#home) <a href = '#home'><\/a>","19c190f3":"## H. On Scaled Data <a id = 'sc' ><\/a>\n[Models](#model) <a href = '#model'><\/a> ","4dc26b9a":"#### On non BCT Data","00a637d4":"## C. Ridge Regression <a id = 'rg' ><\/a> \n[Home](#home) <a href = '#home'><\/a>","1abc54b4":"## 4. Models <a id = 'mod' ><\/a> \n[Home](#home) <a href = '#home'><\/a>\n","9dbc2089":"#### On BCT Data","b579e450":"#### Grid Search for 'max_bin', 'max_depth', 'min_data_in_leaf'","9ef25ec4":"[Model](#model) <a href = '#model'><\/a>","40e3f792":"#### Check 4 <a id = 'chk4' ><\/a>\n[Models](#model) <a href = '#model'><\/a> ","5c29e59b":"#### On non BCT Data with Time_of_service dropped <a id = 'noTOS' ><\/a>\n[Models](#model) <a href = '#model'><\/a> ","5e666bb9":"#### On non BCT Data","ab012d56":"### A.Linear Regression <a id = 'lr' ><\/a> ","f7557551":"[Model](#model) <a href = '#model'><\/a>","4d8b3cad":"### XGB","b35aa72e":"#### VAR4 <a id = 'v4' ><\/a> \n[Home](#home) <a href = '#home'><\/a>","a7c4e4ed":"### LGBM","9a2c2848":"[Model](#model) <a href = '#model'><\/a>","4445a0cc":"[Model](#model) <a href = '#model'><\/a>","abd93a74":"### With Decision Tree on non BCT Data\n[Models](#model) <a href = '#model'><\/a> ","d2685c5d":"#### Pay_Scale <a id = 'ps'><\/a>\n[Home](#home) <a href = '#home'><\/a>","40ba0c89":"##### **Applying Box-Cox Transformation (BCT) for Skewness in Time_of_service**","941baa88":"### **Transformation on non BCT Data** <a id = 'nonbct' ><\/a> \n[Home](#home) <a href = '#home'><\/a>","9ff95a02":"## D. Ensemble - LinReg, DT, RidgeReg <a id = 'ens' ><\/a> \n[Home](#home) <a href = '#home'><\/a>","11849b63":"#### Grid Search for 'learning_rate' & 'num_iterations'","79d3be36":"#### Grid Search for 'reg_lambda', 'boosting'","872e1cbe":"### **Transformation on BCT Data** <a id = 'bct' ><\/a> \n[Home](#home) <a href = '#home'><\/a>","905d862d":"* # Attrition Rate Analysis","bf4c56ee":"#### Final Build on non BCT Data <a id = 'fb' ><\/a>\n[Models](#model) <a href = '#model'><\/a> ","fbce3106":"#### Check 1 <a id = 'chk1' ><\/a>\n[Models](#model) <a href = '#model'><\/a>  ","e3604561":"#### Check 3 <a id = 'chk3' ><\/a>\n[Models](#model) <a href = '#model'><\/a>  ","13c428f0":"## G. RFE <a id = 'rfe' ><\/a>\n[Models](#model) <a href = '#model'><\/a> ","353e0c6d":"#### On BCT Data"}}