{"cell_type":{"218cc589":"code","2737029d":"code","2e4f4075":"code","71c8026f":"code","91b9e9d8":"code","b0584480":"code","fd439186":"code","e37ac503":"code","5a33e087":"code","101e3286":"code","506af97b":"code","eb7da0f8":"code","5caf311e":"code","5a00edab":"code","9bee4122":"code","77ed6d38":"code","c0c3ffa3":"code","9ed6f4d5":"code","abc91f4e":"code","199de9ef":"code","4239c6fb":"code","6e055861":"code","a3ff390e":"code","a843761c":"code","c5eee95f":"code","186dcff5":"code","dbcd7704":"code","424f81ba":"code","b9e8ef9e":"code","ce79198d":"markdown","5a1ffa23":"markdown"},"source":{"218cc589":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2737029d":"import glob\nimport time\nimport pandas as pd\n# from xml.dom import minidom\nfrom nltk import ngrams\nfrom nltk.tokenize import sent_tokenize\nimport nltk\nnltk.download('punkt')\nnltk.download('stopwords')\nnltk.download('wordnet')\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem import PorterStemmer\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize","2e4f4075":"import pandas as pd\ndf = pd.read_csv(\"..\/input\/sqli.csv\",encoding='utf-16')","71c8026f":"\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer( min_df=2, max_df=0.7, stop_words=stopwords.words('english'))\nposts = vectorizer.fit_transform(df['Sentence'].values.astype('U')).toarray()\n\n","91b9e9d8":"transformed_posts=pd.DataFrame(posts)","b0584480":"df=pd.concat([df,transformed_posts],axis=1)","fd439186":"X=df[df.columns[2:]]","e37ac503":"y=df['Label']","5a33e087":"from sklearn.model_selection import train_test_split","101e3286":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","506af97b":"from sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(random_state=0).fit(X_train, y_train)","eb7da0f8":"from sklearn.metrics import accuracy_score","5caf311e":"y_pred=clf.predict(X_test)","5a00edab":"accuracy_score(y_test, y_pred)","9bee4122":"from keras.models import Sequential\nfrom keras import layers\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.wrappers.scikit_learn import KerasClassifier","77ed6d38":"input_dim = X_train.shape[1]  # Number of features\n\nmodel = Sequential()\nmodel.add(layers.Dense(20, input_dim=input_dim, activation='relu'))\nmodel.add(layers.Dense(10,  activation='tanh'))\nmodel.add(layers.Dense(1024, activation='relu'))\n\nmodel.add(layers.BatchNormalization())\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n","c0c3ffa3":"model.compile(loss='binary_crossentropy', \n              optimizer='adam', \n              metrics=['accuracy'])\nmodel.summary()","9ed6f4d5":"classifier_nn = model.fit(X_train,y_train,\n                    epochs=10,\n                    verbose=True,\n                    validation_data=(X_test, y_test),\n                    batch_size=15)\n","abc91f4e":"pred=model.predict(X_test)","199de9ef":"for i in range(len(pred)):\n    if pred[i]>0.5:\n        pred[i]=1\n    elif pred[i]<=0.5:\n        pred[i]=0","4239c6fb":"accuracy_score(y_test,pred)","6e055861":"def accuracy_function(tp,tn,fp,fn):\n    \n    accuracy = (tp+tn) \/ (tp+tn+fp+fn)\n    \n    return accuracy","a3ff390e":"def precision_function(tp,fp):\n    \n    precision = tp \/ (tp+fp)\n    \n    return precision","a843761c":"def recall_function(tp,fn):\n    \n    recall=tp \/ (tp+fn)\n    \n    return recall","c5eee95f":"def confusion_matrix(truth,predicted):\n    \n    true_positive = 0\n    true_negative = 0\n    false_positive = 0\n    false_negative = 0\n    \n    for true,pred in zip(truth,predicted):\n        if true == 1:\n            if pred == true:\n                true_positive += 1\n            elif pred != true:\n                false_negative += 1\n\n        elif true == 0:\n            if pred == true:\n                true_negative += 1\n            elif pred != true:\n                false_positive += 1\n            \n    accuracy=accuracy_function(true_positive, true_negative, false_positive, false_negative)\n    precision=precision_function(true_positive, false_positive)\n    recall=recall_function(true_positive, false_negative)\n    \n    return (accuracy,\n            precision,\n           recall)","186dcff5":"accuracy,precision,recall=confusion_matrix(y_test,pred)","dbcd7704":"print(\" Accuracy : {0} \\n Precision : {1} \\n Recall : {2}\".format(accuracy, precision, recall))","424f81ba":"from sklearn.metrics import precision_score\nprecision_score(y_test, pred)","b9e8ef9e":"from sklearn.metrics import recall_score\nrecall_score(y_test, pred)","ce79198d":"### Using Logistic Regression","5a1ffa23":"### Using simple Neural Network[](http:\/\/)"}}