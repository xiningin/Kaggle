{"cell_type":{"9db053d8":"code","a15cee3b":"code","f1e517da":"code","af265bcc":"code","303c9e6e":"code","eb6e4c01":"code","613792a4":"code","999e146d":"code","2d2b1a5b":"code","f1858617":"code","56436bbf":"code","fc1b3c12":"code","4a28b870":"code","05c583b9":"code","11bb748a":"code","a64a2e39":"code","c51e47ce":"markdown","695e9e68":"markdown","96bb6658":"markdown","f03be027":"markdown","60896f29":"markdown","a8c3bc3e":"markdown","b0a995bd":"markdown","2654af70":"markdown","1f1348e3":"markdown","01635637":"markdown","c3b47901":"markdown"},"source":{"9db053d8":"import time\nimport torch\nfrom torch import nn, optim\nimport torchvision\nimport numpy as np\nimport sys\nsys.path.append(\"..\/input\/\") \nimport d2lzhpytorch as d2l\nimport os\nimport torch.nn.functional as F\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\nclass AlexNet(nn.Module):\n    def __init__(self):\n        super(AlexNet, self).__init__()\n        self.conv = nn.Sequential(\n            nn.Conv2d(1, 96, 11, 4), # in_channels, out_channels, kernel_size, stride, padding\n            nn.ReLU(),\n            nn.MaxPool2d(3, 2), # kernel_size, stride\n            # \u51cf\u5c0f\u5377\u79ef\u7a97\u53e3\uff0c\u4f7f\u7528\u586b\u5145\u4e3a2\u6765\u4f7f\u5f97\u8f93\u5165\u4e0e\u8f93\u51fa\u7684\u9ad8\u548c\u5bbd\u4e00\u81f4\uff0c\u4e14\u589e\u5927\u8f93\u51fa\u901a\u9053\u6570\n            nn.Conv2d(96, 256, 5, 1, 2),\n            nn.ReLU(),\n            nn.MaxPool2d(3, 2),\n            # \u8fde\u7eed3\u4e2a\u5377\u79ef\u5c42\uff0c\u4e14\u4f7f\u7528\u66f4\u5c0f\u7684\u5377\u79ef\u7a97\u53e3\u3002\u9664\u4e86\u6700\u540e\u7684\u5377\u79ef\u5c42\u5916\uff0c\u8fdb\u4e00\u6b65\u589e\u5927\u4e86\u8f93\u51fa\u901a\u9053\u6570\u3002\n            # \u524d\u4e24\u4e2a\u5377\u79ef\u5c42\u540e\u4e0d\u4f7f\u7528\u6c60\u5316\u5c42\u6765\u51cf\u5c0f\u8f93\u5165\u7684\u9ad8\u548c\u5bbd\n            nn.Conv2d(256, 384, 3, 1, 1),\n            nn.ReLU(),\n            nn.Conv2d(384, 384, 3, 1, 1),\n            nn.ReLU(),\n            nn.Conv2d(384, 256, 3, 1, 1),\n            nn.ReLU(),\n            nn.MaxPool2d(3, 2)\n        )\n         # \u8fd9\u91cc\u5168\u8fde\u63a5\u5c42\u7684\u8f93\u51fa\u4e2a\u6570\u6bd4LeNet\u4e2d\u7684\u5927\u6570\u500d\u3002\u4f7f\u7528\u4e22\u5f03\u5c42\u6765\u7f13\u89e3\u8fc7\u62df\u5408\n        self.fc = nn.Sequential(\n            nn.Linear(256*5*5, 4096),\n            nn.ReLU(),\n            nn.Dropout(0.5),\n            nn.Linear(4096, 4096),\n            nn.ReLU(),\n            nn.Dropout(0.5),\n            # \u8f93\u51fa\u5c42\u3002\u7531\u4e8e\u8fd9\u91cc\u4f7f\u7528Fashion-MNIST\uff0c\u6240\u4ee5\u7528\u7c7b\u522b\u6570\u4e3a10\uff0c\u800c\u975e\u8bba\u6587\u4e2d\u76841000\n            nn.Linear(4096, 10),\n        )\n\n    def forward(self, img):\n\n        feature = self.conv(img)\n        output = self.fc(feature.view(img.shape[0], -1))\n        return output","a15cee3b":"net = AlexNet()\nprint(net)","f1e517da":"batch_size = 128\n# \u5982\u51fa\u73b0\u201cout of memory\u201d\u7684\u62a5\u9519\u4fe1\u606f\uff0c\u53ef\u51cf\u5c0fbatch_size\u6216resize\ntrain_iter, test_iter = d2l.load_data_fashion_mnist(batch_size, 224)\nfor X, Y in train_iter:\n    print('X =', X.shape,\n        '\\nY =', Y.type(torch.int32))\n    break","af265bcc":"lr, num_epochs = 0.001, 5\noptimizer = torch.optim.Adam(net.parameters(), lr=lr)\nd2l.train_ch5(net, train_iter, test_iter, batch_size, optimizer, device, num_epochs)","303c9e6e":"def vgg_block(num_convs, in_channels, out_channels): #\u5377\u79ef\u5c42\u4e2a\u6570\uff0c\u8f93\u5165\u901a\u9053\u6570\uff0c\u8f93\u51fa\u901a\u9053\u6570\n    blk = []\n    for i in range(num_convs):\n        if i == 0:\n            blk.append(nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1))\n        else:\n            blk.append(nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1))\n        blk.append(nn.ReLU())\n    blk.append(nn.MaxPool2d(kernel_size=2, stride=2)) # \u8fd9\u91cc\u4f1a\u4f7f\u5bbd\u9ad8\u51cf\u534a\n    return nn.Sequential(*blk)","eb6e4c01":"conv_arch = ((1, 1, 64), (1, 64, 128), (2, 128, 256), (2, 256, 512), (2, 512, 512))\n# \u7ecf\u8fc75\u4e2avgg_block, \u5bbd\u9ad8\u4f1a\u51cf\u534a5\u6b21, \u53d8\u6210 224\/32 = 7\nfc_features = 512 * 7 * 7 # c * w * h\nfc_hidden_units = 4096","613792a4":"def vgg(conv_arch, fc_features, fc_hidden_units=4096):\n    net = nn.Sequential()\n    # \u5377\u79ef\u5c42\u90e8\u5206\n    for i, (num_convs, in_channels, out_channels) in enumerate(conv_arch):\n        # \u6bcf\u7ecf\u8fc7\u4e00\u4e2avgg_block\u90fd\u4f1a\u4f7f\u5bbd\u9ad8\u51cf\u534a\n        net.add_module(\"vgg_block_\" + str(i+1), vgg_block(num_convs, in_channels, out_channels))\n    # \u5168\u8fde\u63a5\u5c42\u90e8\u5206\n    net.add_module(\"fc\", nn.Sequential(d2l.FlattenLayer(),\n                                 nn.Linear(fc_features, fc_hidden_units),\n                                 nn.ReLU(),\n                                 nn.Dropout(0.5),\n                                 nn.Linear(fc_hidden_units, fc_hidden_units),\n                                 nn.ReLU(),\n                                 nn.Dropout(0.5),\n                                 nn.Linear(fc_hidden_units, 10)\n                                ))\n    return net","999e146d":"net = vgg(conv_arch, fc_features, fc_hidden_units)\nX = torch.rand(1, 1, 224, 224)\n\n# named_children\u83b7\u53d6\u4e00\u7ea7\u5b50\u6a21\u5757\u53ca\u5176\u540d\u5b57(named_modules\u4f1a\u8fd4\u56de\u6240\u6709\u5b50\u6a21\u5757,\u5305\u62ec\u5b50\u6a21\u5757\u7684\u5b50\u6a21\u5757)\nfor name, blk in net.named_children(): \n    X = blk(X)\n    print(name, 'output shape: ', X.shape)","2d2b1a5b":"ratio = 8\nsmall_conv_arch = [(1, 1, 64\/\/ratio), (1, 64\/\/ratio, 128\/\/ratio), (2, 128\/\/ratio, 256\/\/ratio), \n                   (2, 256\/\/ratio, 512\/\/ratio), (2, 512\/\/ratio, 512\/\/ratio)]\nnet = vgg(small_conv_arch, fc_features \/\/ ratio, fc_hidden_units \/\/ ratio)\nprint(net)","f1858617":"batch_size = 64\n# \u5982\u51fa\u73b0\u201cout of memory\u201d\u7684\u62a5\u9519\u4fe1\u606f\uff0c\u53ef\u51cf\u5c0fbatch_size\u6216resize\n# train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size, resize=224)\n\nlr, num_epochs = 0.001, 5\noptimizer = torch.optim.Adam(net.parameters(), lr=lr)\nd2l.train_ch5(net, train_iter, test_iter, batch_size, optimizer, device, num_epochs)","56436bbf":"def nin_block(in_channels, out_channels, kernel_size, stride, padding):\n    blk = nn.Sequential(nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding),\n                        nn.ReLU(),\n                        nn.Conv2d(out_channels, out_channels, kernel_size=1),\n                        nn.ReLU(),\n                        nn.Conv2d(out_channels, out_channels, kernel_size=1),\n                        nn.ReLU())\n    return blk","fc1b3c12":"# \u5df2\u4fdd\u5b58\u5728d2lzh_pytorch\nclass GlobalAvgPool2d(nn.Module):\n    # \u5168\u5c40\u5e73\u5747\u6c60\u5316\u5c42\u53ef\u901a\u8fc7\u5c06\u6c60\u5316\u7a97\u53e3\u5f62\u72b6\u8bbe\u7f6e\u6210\u8f93\u5165\u7684\u9ad8\u548c\u5bbd\u5b9e\u73b0\n    def __init__(self):\n        super(GlobalAvgPool2d, self).__init__()\n    def forward(self, x):\n        return F.avg_pool2d(x, kernel_size=x.size()[2:])\n\nnet = nn.Sequential(\n    nin_block(1, 96, kernel_size=11, stride=4, padding=0),\n    nn.MaxPool2d(kernel_size=3, stride=2),\n    nin_block(96, 256, kernel_size=5, stride=1, padding=2),\n    nn.MaxPool2d(kernel_size=3, stride=2),\n    nin_block(256, 384, kernel_size=3, stride=1, padding=1),\n    nn.MaxPool2d(kernel_size=3, stride=2), \n    nn.Dropout(0.5),\n    # \u6807\u7b7e\u7c7b\u522b\u6570\u662f10\n    nin_block(384, 10, kernel_size=3, stride=1, padding=1),\n    GlobalAvgPool2d(), \n    # \u5c06\u56db\u7ef4\u7684\u8f93\u51fa\u8f6c\u6210\u4e8c\u7ef4\u7684\u8f93\u51fa\uff0c\u5176\u5f62\u72b6\u4e3a(\u6279\u91cf\u5927\u5c0f, 10)\n    d2l.FlattenLayer())","4a28b870":"X = torch.rand(1, 1, 224, 224)\nfor name, blk in net.named_children(): \n    X = blk(X)\n    print(name, 'output shape: ', X.shape)","05c583b9":"batch_size = 128\n# \u5982\u51fa\u73b0\u201cout of memory\u201d\u7684\u62a5\u9519\u4fe1\u606f\uff0c\u53ef\u51cf\u5c0fbatch_size\u6216resize\n#train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size, resize=224)\n\nlr, num_epochs = 0.002, 5\noptimizer = torch.optim.Adam(net.parameters(), lr=lr)\nd2l.train_ch5(net, train_iter, test_iter, batch_size, optimizer, device, num_epochs)","11bb748a":"class Inception(nn.Module):\n    # c1 - c4\u4e3a\u6bcf\u6761\u7ebf\u8def\u91cc\u7684\u5c42\u7684\u8f93\u51fa\u901a\u9053\u6570\n    def __init__(self, in_c, c1, c2, c3, c4):\n        super(Inception, self).__init__()\n        # \u7ebf\u8def1\uff0c\u53551 x 1\u5377\u79ef\u5c42\n        self.p1_1 = nn.Conv2d(in_c, c1, kernel_size=1)\n        # \u7ebf\u8def2\uff0c1 x 1\u5377\u79ef\u5c42\u540e\u63a53 x 3\u5377\u79ef\u5c42\n        self.p2_1 = nn.Conv2d(in_c, c2[0], kernel_size=1)\n        self.p2_2 = nn.Conv2d(c2[0], c2[1], kernel_size=3, padding=1)\n        # \u7ebf\u8def3\uff0c1 x 1\u5377\u79ef\u5c42\u540e\u63a55 x 5\u5377\u79ef\u5c42\n        self.p3_1 = nn.Conv2d(in_c, c3[0], kernel_size=1)\n        self.p3_2 = nn.Conv2d(c3[0], c3[1], kernel_size=5, padding=2)\n        # \u7ebf\u8def4\uff0c3 x 3\u6700\u5927\u6c60\u5316\u5c42\u540e\u63a51 x 1\u5377\u79ef\u5c42\n        self.p4_1 = nn.MaxPool2d(kernel_size=3, stride=1, padding=1)\n        self.p4_2 = nn.Conv2d(in_c, c4, kernel_size=1)\n\n    def forward(self, x):\n        p1 = F.relu(self.p1_1(x))\n        p2 = F.relu(self.p2_2(F.relu(self.p2_1(x))))\n        p3 = F.relu(self.p3_2(F.relu(self.p3_1(x))))\n        p4 = F.relu(self.p4_2(self.p4_1(x)))\n        return torch.cat((p1, p2, p3, p4), dim=1)  # \u5728\u901a\u9053\u7ef4\u4e0a\u8fde\u7ed3\u8f93\u51fa","a64a2e39":"b1 = nn.Sequential(nn.Conv2d(1, 64, kernel_size=7, stride=2, padding=3),\n                   nn.ReLU(),\n                   nn.MaxPool2d(kernel_size=3, stride=2, padding=1))\n\nb2 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=1),\n                   nn.Conv2d(64, 192, kernel_size=3, padding=1),\n                   nn.MaxPool2d(kernel_size=3, stride=2, padding=1))\n\nb3 = nn.Sequential(Inception(192, 64, (96, 128), (16, 32), 32),\n                   Inception(256, 128, (128, 192), (32, 96), 64),\n                   nn.MaxPool2d(kernel_size=3, stride=2, padding=1))\n\nb4 = nn.Sequential(Inception(480, 192, (96, 208), (16, 48), 64),\n                   Inception(512, 160, (112, 224), (24, 64), 64),\n                   Inception(512, 128, (128, 256), (24, 64), 64),\n                   Inception(512, 112, (144, 288), (32, 64), 64),\n                   Inception(528, 256, (160, 320), (32, 128), 128),\n                   nn.MaxPool2d(kernel_size=3, stride=2, padding=1))\n\nb5 = nn.Sequential(Inception(832, 256, (160, 320), (32, 128), 128),\n                   Inception(832, 384, (192, 384), (48, 128), 128),\n                   d2l.GlobalAvgPool2d())\n\nnet = nn.Sequential(b1, b2, b3, b4, b5, \n                    d2l.FlattenLayer(), nn.Linear(1024, 10))\n\nnet = nn.Sequential(b1, b2, b3, b4, b5, d2l.FlattenLayer(), nn.Linear(1024, 10))\n\nX = torch.rand(1, 1, 96, 96)\n\nfor blk in net.children(): \n    X = blk(X)\n    print('output shape: ', X.shape)\n\nbatch_size = 128\n# \u5982\u51fa\u73b0\u201cout of memory\u201d\u7684\u62a5\u9519\u4fe1\u606f\uff0c\u53ef\u51cf\u5c0fbatch_size\u6216resize\n#train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size, resize=96)\n\nlr, num_epochs = 0.001, 5\noptimizer = torch.optim.Adam(net.parameters(), lr=lr)\nd2l.train_ch5(net, train_iter, test_iter, batch_size, optimizer, device, num_epochs)","c51e47ce":"#  \u4f7f\u7528\u91cd\u590d\u5143\u7d20\u7684\u7f51\u7edc\uff08VGG\uff09\nVGG\uff1a\u901a\u8fc7\u91cd\u590d\u4f7f\u2f64\u7b80\u5355\u7684\u57fa\u7840\u5757\u6765\u6784\u5efa\u6df1\u5ea6\u6a21\u578b\u3002  \nBlock:\u6570\u4e2a\u76f8\u540c\u7684\u586b\u5145\u4e3a1\u3001\u7a97\u53e3\u5f62\u72b6\u4e3a$3\\times 3$\u7684\u5377\u79ef\u5c42,\u63a5\u4e0a\u4e00\u4e2a\u6b65\u5e45\u4e3a2\u3001\u7a97\u53e3\u5f62\u72b6\u4e3a$2\\times 2$\u7684\u6700\u5927\u6c60\u5316\u5c42\u3002  \n\u5377\u79ef\u5c42\u4fdd\u6301\u8f93\u5165\u7684\u9ad8\u548c\u5bbd\u4e0d\u53d8\uff0c\u800c\u6c60\u5316\u5c42\u5219\u5bf9\u5176\u51cf\u534a\u3002\n![image.png](attachment:image.png)","695e9e68":"LeNet:  \u5728\u5927\u7684\u771f\u5b9e\u6570\u636e\u96c6\u4e0a\u7684\u8868\u73b0\u5e76\u4e0d\u5c3d\u5982\u2f08\u610f\u3002     \n1.\u795e\u7ecf\u7f51\u7edc\u8ba1\u7b97\u590d\u6742\u3002  \n2.\u8fd8\u6ca1\u6709\u2f24\u91cf\u6df1\u2f0a\u7814\u7a76\u53c2\u6570\u521d\u59cb\u5316\u548c\u2fae\u51f8\u4f18\u5316\u7b97\u6cd5\u7b49\u8bf8\u591a\u9886\u57df\u3002  \n  \n\u673a\u5668\u5b66\u4e60\u7684\u7279\u5f81\u63d0\u53d6:\u624b\u5de5\u5b9a\u4e49\u7684\u7279\u5f81\u63d0\u53d6\u51fd\u6570  \n\u795e\u7ecf\u7f51\u7edc\u7684\u7279\u5f81\u63d0\u53d6\uff1a\u901a\u8fc7\u5b66\u4e60\u5f97\u5230\u6570\u636e\u7684\u591a\u7ea7\u8868\u5f81\uff0c\u5e76\u9010\u7ea7\u8868\u2f70\u8d8a\u6765\u8d8a\u62bd\u8c61\u7684\u6982\u5ff5\u6216\u6a21\u5f0f\u3002  \n  \n\u795e\u7ecf\u7f51\u7edc\u53d1\u5c55\u7684\u9650\u5236:\u6570\u636e\u3001\u786c\u4ef6","96bb6658":"### \u8bad\u7ec3","f03be027":"### VGG11\u7684\u7b80\u5355\u5b9e\u73b0","60896f29":"### GoogLeNet\u6a21\u578b\n\u5b8c\u6574\u6a21\u578b\u7ed3\u6784  \n![1576155704%281%29.png](attachment:1576155704%281%29.png)","a8c3bc3e":"# GoogLeNet\n1. \u7531Inception\u57fa\u7840\u5757\u7ec4\u6210\u3002  \n2. Inception\u5757\u76f8\u5f53\u4e8e\u2f00\u4e2a\u67094\u6761\u7ebf\u8def\u7684\u2f26\u2f79\u7edc\u3002\u5b83\u901a\u8fc7\u4e0d\u540c\u7a97\u53e3\u5f62\u72b6\u7684\u5377\u79ef\u5c42\u548c\u6700\u2f24\u6c60\u5316\u5c42\u6765\u5e76\u2f8f\u62bd\u53d6\u4fe1\u606f\uff0c\u5e76\u4f7f\u2f641\u00d71\u5377\u79ef\u5c42\u51cf\u5c11\u901a\u9053\u6570\u4ece\u800c\u964d\u4f4e\u6a21\u578b\u590d\u6742\u5ea6\u3002   \n3. \u53ef\u4ee5\u2f83\u5b9a\u4e49\u7684\u8d85\u53c2\u6570\u662f\u6bcf\u4e2a\u5c42\u7684\u8f93\u51fa\u901a\u9053\u6570\uff0c\u6211\u4eec\u4ee5\u6b64\u6765\u63a7\u5236\u6a21\u578b\u590d\u6742\u5ea6\u3002 \n![1576146282%281%29.png](attachment:1576146282%281%29.png)","b0a995bd":"### AlexNet\n\u9996\u6b21\u8bc1\u660e\u4e86\u5b66\u4e60\u5230\u7684\u7279\u5f81\u53ef\u4ee5\u8d85\u8d8a\u2f3f\u2f2f\u8bbe\u8ba1\u7684\u7279\u5f81\uff0c\u4ece\u800c\u2f00\u4e3e\u6253\u7834\u8ba1\u7b97\u673a\u89c6\u89c9\u7814\u7a76\u7684\u524d\u72b6\u3002   \n**\u7279\u5f81\uff1a**\n1. 8\u5c42\u53d8\u6362\uff0c\u5176\u4e2d\u67095\u5c42\u5377\u79ef\u548c2\u5c42\u5168\u8fde\u63a5\u9690\u85cf\u5c42\uff0c\u4ee5\u53ca1\u4e2a\u5168\u8fde\u63a5\u8f93\u51fa\u5c42\u3002\n2. \u5c06sigmoid\u6fc0\u6d3b\u51fd\u6570\u6539\u6210\u4e86\u66f4\u52a0\u7b80\u5355\u7684ReLU\u6fc0\u6d3b\u51fd\u6570\u3002\n3. \u7528Dropout\u6765\u63a7\u5236\u5168\u8fde\u63a5\u5c42\u7684\u6a21\u578b\u590d\u6742\u5ea6\u3002\n4. \u5f15\u5165\u6570\u636e\u589e\u5f3a\uff0c\u5982\u7ffb\u8f6c\u3001\u88c1\u526a\u548c\u989c\u8272\u53d8\u5316\uff0c\u4ece\u800c\u8fdb\u4e00\u6b65\u6269\u5927\u6570\u636e\u96c6\u6765\u7f13\u89e3\u8fc7\u62df\u5408\u3002\n![1576144713%281%29.png](attachment:1576144713%281%29.png)\n\n","2654af70":" # \u6df1\u5ea6\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08AlexNet\uff09 ","1f1348e3":"#  \u2f79\u7edc\u4e2d\u7684\u2f79\u7edc\uff08NiN\uff09 \nLeNet\u3001AlexNet\u548cVGG\uff1a\u5148\u4ee5\u7531\u5377\u79ef\u5c42\u6784\u6210\u7684\u6a21\u5757\u5145\u5206\u62bd\u53d6 \u7a7a\u95f4\u7279\u5f81\uff0c\u518d\u4ee5\u7531\u5168\u8fde\u63a5\u5c42\u6784\u6210\u7684\u6a21\u5757\u6765\u8f93\u51fa\u5206\u7c7b\u7ed3\u679c\u3002  \nNiN\uff1a\u4e32\u8054\u591a\u4e2a\u7531\u5377\u79ef\u5c42\u548c\u201c\u5168\u8fde\u63a5\u201d\u5c42\u6784\u6210\u7684\u5c0f\u2f79\u7edc\u6765\u6784\u5efa\u2f00\u4e2a\u6df1\u5c42\u2f79\u7edc\u3002  \n\u2f64\u4e86\u8f93\u51fa\u901a\u9053\u6570\u7b49\u4e8e\u6807\u7b7e\u7c7b\u522b\u6570\u7684NiN\u5757\uff0c\u7136\u540e\u4f7f\u2f64\u5168\u5c40\u5e73\u5747\u6c60\u5316\u5c42\u5bf9\u6bcf\u4e2a\u901a\u9053\u4e2d\u6240\u6709\u5143\u7d20\u6c42\u5e73\u5747\u5e76\u76f4\u63a5\u2f64\u4e8e\u5206\u7c7b\u3002  \n![1576145663%281%29.png](attachment:1576145663%281%29.png)\n1\u00d71\u5377\u79ef\u6838\u4f5c\u7528   \n1.\u653e\u7f29\u901a\u9053\u6570\uff1a\u901a\u8fc7\u63a7\u5236\u5377\u79ef\u6838\u7684\u6570\u91cf\u8fbe\u5230\u901a\u9053\u6570\u7684\u653e\u7f29\u3002  \n2.\u589e\u52a0\u975e\u7ebf\u6027\u30021\u00d71\u5377\u79ef\u6838\u7684\u5377\u79ef\u8fc7\u7a0b\u76f8\u5f53\u4e8e\u5168\u8fde\u63a5\u5c42\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u5e76\u4e14\u8fd8\u52a0\u5165\u4e86\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\uff0c\u4ece\u800c\u53ef\u4ee5\u589e\u52a0\u7f51\u7edc\u7684\u975e\u7ebf\u6027\u3002  \n3.\u8ba1\u7b97\u53c2\u6570\u5c11   ","01635637":"NiN\u91cd\u590d\u4f7f\u2f64\u7531\u5377\u79ef\u5c42\u548c\u4ee3\u66ff\u5168\u8fde\u63a5\u5c42\u76841\u00d71\u5377\u79ef\u5c42\u6784\u6210\u7684NiN\u5757\u6765\u6784\u5efa\u6df1\u5c42\u2f79\u7edc\u3002  \nNiN\u53bb\u9664\u4e86\u5bb9\u6613\u9020\u6210\u8fc7\u62df\u5408\u7684\u5168\u8fde\u63a5\u8f93\u51fa\u5c42\uff0c\u800c\u662f\u5c06\u5176\u66ff\u6362\u6210\u8f93\u51fa\u901a\u9053\u6570\u7b49\u4e8e\u6807\u7b7e\u7c7b\u522b\u6570 \u7684NiN\u5757\u548c\u5168\u5c40\u5e73\u5747\u6c60\u5316\u5c42\u3002   \nNiN\u7684\u4ee5\u4e0a\u8bbe\u8ba1\u601d\u60f3\u5f71\u54cd\u4e86\u540e\u2faf\u2f00\u7cfb\u5217\u5377\u79ef\u795e\u7ecf\u2f79\u7edc\u7684\u8bbe\u8ba1\u3002  ","c3b47901":"### \u8f7d\u5165\u6570\u636e\u96c6"}}