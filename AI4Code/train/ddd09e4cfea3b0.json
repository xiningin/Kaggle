{"cell_type":{"d2dd2872":"code","f878fb50":"code","1d16d5d4":"code","683f3ee8":"code","4a1ec6ab":"code","af19cdef":"code","ae3cdaf6":"code","34682cbf":"code","ce7a943d":"code","a3f44b2f":"code","e550fc39":"code","a2e1a202":"code","3eab60f0":"code","5ba07428":"code","7a725fd0":"code","c6e1c426":"code","1bdd4765":"code","125dd40d":"code","843c05a6":"code","8f65d8fc":"markdown","26b4d6fb":"markdown","c338871a":"markdown","0b3fe499":"markdown","5c3e37f3":"markdown","45c94a1a":"markdown","de914c21":"markdown","690d6a5c":"markdown","383e3d13":"markdown","5cb34a3a":"markdown","602eecdc":"markdown","20a1d4b2":"markdown","c8ae68b6":"markdown","25166bf0":"markdown","0f0ebb5b":"markdown","8091cd26":"markdown","04b0a7b6":"markdown"},"source":{"d2dd2872":"import time\nstart_time = time.time()","f878fb50":"!pip install pycaret","1d16d5d4":"import pandas as pd\nimport numpy as np\nfrom pycaret.classification import *","683f3ee8":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ndisplay(train.head())\ndisplay(test.head())","4a1ec6ab":"modelo = setup(data=train, target='Survived', \n                #Pycaret tem a possibilidade de excluir colunas no modelo\n                ignore_features = ['Name','Cabin','PassengerId', 'Ticket'], session_id=123,\n                silent=True)","af19cdef":"compare_models()","ae3cdaf6":"cat = create_model('catboost')","34682cbf":"gbc = create_model('gbc')","ce7a943d":"tuned_cat = tune_model('catboost')","a3f44b2f":"tuned_gbc = tune_model('gbc')","e550fc39":"## Depois de finalizar o tunning e a cria\u00e7\u00e3o do modelo salvamos o modelo finalizado.\nfinal_gbc = finalize_model(gbc)","a2e1a202":"plot_model(estimator=final_gbc, plot='confusion_matrix')","3eab60f0":"plot_model(estimator=final_gbc, plot='auc')","5ba07428":"plot_model(estimator=final_gbc, plot='feature')","7a725fd0":"interpret_model(cat)","c6e1c426":"ids = test['PassengerId']\ntest.drop(['PassengerId', 'Name','Ticket', 'Cabin'], axis=1, inplace=True)","1bdd4765":"pred = predict_model(final_gbc, data=test)","125dd40d":"a = pd.DataFrame({'PassengerId': ids,\n                 'Survived': pred['Label']})\na.to_csv('primeiro_modelo.csv', index=False)","843c05a6":"print(f\"This kernel took {(time.time() - start_time)\/60:.2f} minutes to run\")","8f65d8fc":"* [<font size=3>Instalando Pycaret<\/font>](#1)\n* [<font size=3>Carregando os dados<\/font>](#2)\n* [<font size=3>Criando Modelo<\/font>](#3)\n * [Setup Pycaret](#3.1)\n * [Comparar modelos](#3.2)\n * [Criando Modelo](#3.3)\n * [Tunning Model](#3.4)\n * [Plot Resultados](#3.5)\n   * [Matriz de confus\u00e3o](#3.5.1)\n   * [Roc Curve](#3.5.2)\n   * [Feature Importance](#3.5.3)\n   * [Summary Plot](#3.5.4)\n * [Previs\u00e3o do Modelo](#3.6)\n * [Enviando previs\u00e3o do nosso modelo](#3.7)\n* [<font size=3>Conclus\u00e3o<\/font>](#4)","26b4d6fb":"## Enviando previs\u00e3o do primeiro modelo <a id=\"3.7\"><a\/>","c338871a":"## Conclus\u00e3o <a id=\"4\"><a\/>\n    \nPycaret \u00e9 uma execelente ferramente que reduz em muito o tempo e os processos para cria\u00e7\u00e3o de um modelo, mas n\u00e3o vai subistituir o bom \"insight\" que voc\u00ea tem no meio do processo analisando os dados, usando pycaret com um bom tratamento de dados pode resultar em uma acur\u00e1cia melhor, como pycaret \u00e9 uma biblioteca relativamente nova, muitas coisas vir\u00e3o, n\u00e3o esque\u00e7a de testar outros par\u00e2metros que o pycaret oferece, e n\u00e3o se esque\u00e7a de visitar.\n\n[<font size=20>PYCARET.ORG<\/font>](https:\/\/pycaret.org\/)","0b3fe499":"## Tunning Model <a id=3.4><a\/>\nTunning hyperparametros de um modelo de machine learning \u00e9 simples.","5c3e37f3":"## Criando modelo <a id=\"3.3\"><a\/>\nO modelo com o melhor resultado foi o \"CatBoost Classifier\", vamos criar tamb\u00e9m o modelo \"Gradient Boosting Classifier\". ","45c94a1a":"## Previs\u00e3o do Modelo <a id=\"3.6\"><a\/>\nVamos testar nosso modelo com os dados de test, que nunca foram vistos.","de914c21":"## Comparar modelos <a id=\"3.2\"><\/a>\nEssa fun\u00e7\u00e3o, treina e compara m\u00e9tricas comuns usando k-fold cross validation, para todos os modelos dispon\u00edveis na biblioteca importada. As m\u00e9tricas usadas s\u00e3o:\n* Classifica\u00e7\u00e3o: Accuracy, AUC, Recall, Precision, F1, Kappa","690d6a5c":"## Summary Plot <a id=\"3.5.4\"><a\/>","383e3d13":"## Plot Resultados <a id=\"3.5\"><a\/>\nO plot de resultados n\u00e3o est\u00e1 dispon\u00edvel para o modelo catboost, ent\u00e3o usaremos o Gradient Boosting Classifier.","5cb34a3a":"## Setup Pycaret <a id=\"3.1\"><\/a>","602eecdc":"![](https:\/\/pycaret.org\/wp-content\/uploads\/2020\/03\/Divi93_43.png)\n\nPycaret \u00e9 uma biblioteca open source low-code em python, que tem como objetivo reduzir o ciclo de um experimento de Machine Learning. Isso permite que cientista de dados possam fazer projetos do come\u00e7o ao fim de forma r\u00e1pida e eficiente. Em compara\u00e7\u00e3o com outras bibliotecas open source, Pycaret \u00e9 uma alternativa low code que pode ser usado para tarefas complexas de machine learning com poucas linhas de c\u00f3digo. Pycaret \u00e9 simples e f\u00e1cil de usar. Todas as opera\u00e7\u00f5es feitas em Pycaret s\u00e3o automaticamente armazenadas em um Pipeline que estara pronto para deploy. Pycaret \u00e9 essencialmente um conjunto de v\u00e1rias bibliotecas e frameworks em Python, como scikit-learn, XGBoost, Microsoft LightGMB, spaCy e muitos outros.\n\n### Conhe\u00e7a mais sobre Pycaret, no site [pycaret.org](https:\/\/pycaret.org\/)","20a1d4b2":"## Matriz de confus\u00e3o <a id=\"3.5.1\"><a\/>","c8ae68b6":"## Feature Importance <a id=\"3.5.3\"><a\/>","25166bf0":"## Instalando Pycaret <a id=\"1\"><\/a>","0f0ebb5b":"## Carregando os dados <a id=\"2\"><\/a>","8091cd26":"## Criando Modelo <a id=\"3\"><\/a>\nN\u00e3o iremos tratar nenhum dado faltante.\nPycaret automaticamente preenche os dados faltantes, para colunas n\u00famericas os valores nulos s\u00e3o preenchidos com a m\u00e9dia da coluna, para colunas categ\u00f3ricas o preenchimento \u00e9 realizado com o valor mais comum da coluna.\nPycaret tamb\u00e9m realiza [one hot enconding](one hot enconding) automaticamente.\nPara verificar todos os par\u00e2metros que podem ser passados no setup.\nAcesse: [pycaret.org\/preprocessing\/](https:\/\/pycaret.org\/preprocessing)","04b0a7b6":"## Roc Curve <a id=\"3.5.2\"><a\/>"}}