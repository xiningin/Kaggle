{"cell_type":{"73581738":"code","edd1ca20":"code","b898cd0b":"code","f2f1d333":"code","88ed4f24":"code","5277d88b":"code","5cedb9fb":"code","975fefd4":"code","59ebe7b8":"code","6512e412":"code","aacbafb7":"code","cff4f727":"code","0679f318":"code","62f3c87e":"code","a4aadd78":"code","3342994b":"code","057c7ddd":"code","8cceaa88":"code","b5b09649":"code","a695c911":"code","7eac68a1":"code","cd87fe56":"code","7edc0079":"code","7d8ceca4":"code","d451544e":"code","057e97b7":"code","66be025c":"code","3e3ad8dd":"code","c475f4f8":"code","ec878e79":"code","8c3f51d0":"code","524d41ff":"code","cd7e4227":"code","5ff9b191":"code","6a5e2cc8":"code","66c00a22":"code","d6305ad9":"code","ba0fb3c7":"code","1b55e6c9":"code","e08d08d7":"code","14af26bb":"code","e436a79a":"code","a0cd7745":"code","cf158c6a":"code","8a589e64":"code","cd781feb":"markdown","e415c0bc":"markdown","dde621b7":"markdown","1499aff3":"markdown","b4b8d4b3":"markdown","125138c0":"markdown","ab423064":"markdown","8ce8899f":"markdown","a26d6ced":"markdown","989ee851":"markdown","8e65062d":"markdown","07bf3bec":"markdown","c3f50111":"markdown","55b21f3d":"markdown","34715ede":"markdown","d94ad9ef":"markdown","1988ebc0":"markdown","52e6db60":"markdown","4c4f679c":"markdown","6b70c814":"markdown","7f15a910":"markdown","be85d478":"markdown","70f30c11":"markdown","c4317991":"markdown"},"source":{"73581738":"from IPython.display import Image\nfrom IPython.core.display import HTML \nImage(url= \"https:\/\/storage.googleapis.com\/kaggle-datasets-images\/792\/1472\/8853c0b4591bba14e29305fcaa29f2f9\/dataset-original.jpg\")","edd1ca20":"import numpy as np\nimport pandas as pd\n\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)","b898cd0b":"df = pd.read_csv(r\"C:\\Users\\Behnam\\Downloads\\Python\\Datasets\\Medical_Appointment_No_Shows.csv\", converters={\"PatientId\":str})\ndf.head()","f2f1d333":"d_replace = {\"Yes\": 1, \"No\": 0}\ndf = df.replace({\"No-show\": d_replace})\nd_replace = {\"M\": 1, \"F\": 0}\ndf = df.replace({\"Gender\": d_replace})","88ed4f24":"df.head()","5277d88b":"df[\"ScheduledDay\"] = pd.to_datetime(df[\"ScheduledDay\"])\ndf['Sch_Date'] = df['ScheduledDay'].dt.date\ndf","5cedb9fb":"\n# df['ScheduledDay_year'] = df['ScheduledDay'].dt.year\n# df['ScheduledDay_month'] = df['ScheduledDay'].dt.month\n# df['ScheduledDay_week'] = df['ScheduledDay'].dt.week\n# df['ScheduledDay_day'] = df['ScheduledDay'].dt.day\n# df['ScheduledDay_hour'] = df['ScheduledDay'].dt.hour\n# df['ScheduledDay_minute'] = df['ScheduledDay'].dt.minute\n# df['ScheduledDay_dayofweek'] = df['ScheduledDay'].dt.dayofweek\n","975fefd4":"df[\"AppointmentDay\"] = pd.to_datetime(df[\"AppointmentDay\"])\ndf['App_Date'] = df['AppointmentDay'].dt.date\ndf.head()","59ebe7b8":"\n# df[\u2018AppointmentDay_year\u2019] = df[\u2018AppointmentDay\u2019].dt.year\n# df[\u2018AppointmentDay_month\u2019] = df[\u2018AppointmentDay\u2019].dt.month\n# df[\u2018AppointmentDay_week\u2019] = df[\u2018AppointmentDay\u2019].dt.week\n\n# df['ScheduledDay_dayofweek'] = df['ScheduledDay'].dt.dayofweek\n# df['ScheduledDay_dayofweek'] = df['ScheduledDay'].dt.dayofweek\n\n# df['AppointmentDay_day'] = df['AppointmentDay'].dt.day\n# df['AppointmentDay_dayofweek'] = df['AppointmentDay'].dt.dayofweek\n","6512e412":"len(df[df[\"AppointmentDay\"] < df[\"ScheduledDay\"]])","aacbafb7":"df['AppointmentDay'] = df['AppointmentDay'] + pd.Timedelta('1d') - pd.Timedelta('1s')\ndf['LeadDays']=(df[\"AppointmentDay\"] - df[\"ScheduledDay\"]).astype('timedelta64[D]').astype(int)\n\ndf.head()","cff4f727":"len(df[ df.AppointmentDay < df.ScheduledDay ])","0679f318":"df.drop( df[df.AppointmentDay <= df.ScheduledDay].index, inplace=True)\ndf.head()","62f3c87e":"# for col in df.columns[2:]:\n#     print(col, df[col].value_counts())\n","a4aadd78":"df.head()","3342994b":"#df = df.iloc[0:1000]","057c7ddd":"df = df.sort_values([\"PatientId\", \"App_Date\"])\n\ndf.head(20)","8cceaa88":"# No Show rate\n# Last Show\n# Appt Count\n# Days since last\n# weekday\/weekend\n# time of the day\n\nl_no_show_rates = []\nl_last_shows = []\nl_appts_counts = []\nfor pat in df[\"PatientId\"].unique():\n    dfx = df[df[\"PatientId\"] == pat].sort_values(\"App_Date\")\n    \n    # no show rates\n    l_no_show_rate = [0]\n    for i in range(1,len(dfx)):\n        l_no_show = list(dfx[\"No-show\"])\n        rate_so_far = round((np.sum(l_no_show[0:i]) \/ i)*100,1)\n        l_no_show_rate.append(rate_so_far)\n    l_no_show_rates.extend(l_no_show_rate)\n    \n    # last show\n    l_last_show = []\n    l_no_show = list(dfx[\"No-show\"])\n    l_last_show = [0] + l_no_show[:-1]\n    l_last_shows.extend(l_last_show)   \n    \n    # appt count\n    l_appts_count = []\n    for i in range(0,len(dfx)):\n        l_appts = i+1\n        l_appts_count.append(l_appts)\n    l_appts_counts.extend(l_appts_count)\n   \n\ndf[\"No_show_rate\"] = l_no_show_rates\ndf[\"Last_show_status\"] = l_last_shows\ndf[\"Appt_count\"] = l_appts_counts\n\n\ndf.head(100)","b5b09649":"df.columns","a695c911":"df['ScheduledDay_day'] = df['ScheduledDay'].dt.day\ndf['ScheduledDay_dayofweek'] = df['ScheduledDay'].dt.dayofweek\n\ndf['AppointmentDay_day'] = df['AppointmentDay'].dt.day\ndf['AppointmentDay_dayofweek'] = df['AppointmentDay'].dt.dayofweek","7eac68a1":"df_ml = df[['No-show', 'Gender', 'Age', 'Neighbourhood', 'Scholarship', 'Hipertension',\n       'Diabetes', 'Alcoholism', 'Handcap', 'SMS_received','LeadDays', 'ScheduledDay_dayofweek',\\\n                  'ScheduledDay_day','AppointmentDay_day','AppointmentDay_dayofweek','No_show_rate', 'Last_show_status', 'Appt_count']]","cd87fe56":"df_ml = pd.get_dummies(df_ml,columns=['Neighbourhood'])\ndf_ml","7edc0079":"target = 'No-show'","7d8ceca4":"predictors = df_ml.columns[1:]","d451544e":"from sklearn.model_selection import train_test_split\n\nX = df_ml[predictors]\nY = df_ml[target]\n\n\nX_train, X_test, Y_train, Y_test= \\\ntrain_test_split(X,Y,test_size=0.3,random_state = 0)","057e97b7":"from sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier(random_state = 0, n_estimators=100)\nclf.fit(X_train,Y_train)","66be025c":"y_pred = clf.predict(X_test)\ny_pred","3e3ad8dd":"y_pred_proba = clf.predict_proba(X_test)[:,1]\ny_pred_proba","c475f4f8":"from sklearn.metrics import confusion_matrix\nimport sklearn.metrics as met\n\nconfusion_matrix(Y_test,y_pred)","ec878e79":"met.accuracy_score(Y_test, y_pred)","8c3f51d0":"met.roc_auc_score(Y_test, y_pred_proba)","524d41ff":"l=[]\nfor feature in zip(predictors, clf.feature_importances_):\n    l.append(feature)\n    \ndf_importance = pd.DataFrame(l,columns=[\"Variable\",\"Importance\"])\\\n.sort_values(\"Importance\", ascending=False)\n\ndf_importance","cd7e4227":"import matplotlib.pyplot as plt","5ff9b191":"feature_importances = pd.DataFrame(clf.feature_importances_,\n index = predictors,\n columns=['importance']).sort_values('importance',\n ascending=False)\nnum = min([50,len(predictors)])\nylocs = np.arange(num)\n# get the feature importance for top num and sort in reverse order\nvalues_to_plot = feature_importances.iloc[:num].values.ravel()[::-1]\nfeature_labels = list(feature_importances.iloc[:num].index)[::-1]\nplt.figure(num=None, figsize=(6, 18), dpi=80, facecolor='w', edgecolor='k');\nplt.barh(ylocs, values_to_plot, align = 'center')\nplt.ylabel('Features')\nplt.xlabel('Importance Score')\nplt.title('Feature Importance Score \u2014 Random Forest')\nplt.yticks(ylocs, feature_labels)\nplt.show()","6a5e2cc8":"!pip install lightgbm","66c00a22":"\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error\n\n# print('Loading data...')\n# # load or create your dataset\n# df_train = pd.read_csv('..\/regression\/regression.train', header=None, sep='\\t')\n# df_test = pd.read_csv('..\/regression\/regression.test', header=None, sep='\\t')\n\n# y_train = df_train[0]\n# y_test = df_test[0]\n# X_train = df_train.drop(0, axis=1)\n# X_test = df_test.drop(0, axis=1)\n\n# d_train = lgb.Dataset(X_train, label=Y_train)\n# params = {}\n# params['learning_rate'] = 0.003\n# params['boosting_type'] = 'gbdt'\n# params['objective'] = 'binary'\n# params['metric'] = 'binary_logloss'\n# params['sub_feature'] = 0.5\n# params['num_leaves'] = 10\n# params['min_data'] = 50\n# params['max_depth'] = 10\n# clf = lgb.train(params, d_train, 100)","d6305ad9":"Image(url= \"https:\/\/i.ibb.co\/6P1Wj26\/H2-O-Appointment.png\")","ba0fb3c7":"Image(url= \"https:\/\/i.ibb.co\/7gS167p\/yellow-human-vs-machine.jpg\")","1b55e6c9":"from sklearn.model_selection import KFold\nimport sklearn as sk","e08d08d7":"nfolds = 10","14af26bb":"kf = KFold(n_splits=nfolds,random_state=0,shuffle=True)","e436a79a":"avgCV_AUC = sk.model_selection.cross_val_score(clf,X,Y,cv=kf,n_jobs=-1,\\\n                                                    scoring='roc_auc').mean()","a0cd7745":"avgCV_AUC","cf158c6a":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nimport sklearn as sk\nclfs = [DecisionTreeClassifier(), sk.ensemble.RandomForestClassifier(n_jobs=-1), sk.naive_bayes.GaussianNB(),\n        sk.linear_model.LogisticRegression(n_jobs=-1),sk.tree.DecisionTreeClassifier(),sk.ensemble.AdaBoostClassifier(),\n        QuadraticDiscriminantAnalysis(),MLPClassifier(),SVC()]","8a589e64":"maxAUC = -1\nbestCL = \"\"\nfor cl in clfs:\n    auc = sk.model_selection.cross_val_score(cl,X,Y,cv=kf,n_jobs=-1,scoring='roc_auc').mean()\n    print (str(cl) + ' ' + str(auc))\n    if auc > maxAUC:\n        bestCL = cl\n        maxAUC = auc\nprint('***********************************************')\nprint ('Best is... ' + str(bestCL) + ' ' + str(maxAUC))","cd781feb":"categories = pd.Series(['Same day: 0',  'Week: 1-7', 'Month: 8-30', 'Season: 31-90', 'Very long: >90'])","e415c0bc":"# AutoML result","dde621b7":"for ind in df_final.index:\n    if(df_final.SMS_received[ind] == 1) & (df_final.Age[ind] < 31):\n        df_final['Age_SMS'][ind] = 1\n    else:\n        df_final['Age_SMS'][ind] =  0","1499aff3":"Number of previous no-shows for patients","b4b8d4b3":"## Age < 30 and sms received\n","125138c0":"## Feature engineering: \n#### 1.Prior No-Show Rate: No-shows as a percentage of total appointments (hypothesis: some patients persistently miss their appointments)\n\n#### 2.Status of the last appointment (hypothesis: if you miss your last appointment, you are more likely to attend the next one)\n\n#### 3.Number of previous appointments (hypothesis: patients with persistent conditions are more likely to attend)\n\n#### 4.Leadtime: difference in days between AppointmentDay and ScheduledDay\n\n#### 5.Days since last appointment: difference in days between 2 last appointments","ab423064":"# <span style=\"color:red\">**Cross-validation** <\/span>","8ce8899f":"# Medical Appointment No Shows\nWhy do 30% of patients miss their scheduled appointments?","a26d6ced":"### This cell  below slices the dataframe and takes a long time to run!\nbe patient!","989ee851":"df['PatientId'].value_counts()","8e65062d":">'AppointmentDay' has no value for time of the day and it has many values(38568) smaller than 'ScheduledDay' which is not possile!\n\nThe reason for this problem is that probably these appoinments happened at the same day that theye're booked but because we don't have the exact hour for 'AppointmentDay' their differenrce is negative.\n\nTo solve this problem, we add 23 hrs and 59 min and 59 secs to the 'AppointmentDay'. Now all 'AppointmentDay' are still at the same the same day but we only have 5 negetive values for: \n\n    df[\"AppointmentDay\"] - df[\"ScheduledDay\"]","07bf3bec":"# Which classifier obtains the highest performance?","c3f50111":"## Creating a new column Prior No-Show Rate: \nNo-shows as a percentage of total appointments (hypothesis: some patients persistently miss their appointments)\u00b6","55b21f3d":"df.groupby('PatientId')['AppointmentID'].count()","34715ede":"# Final Project","d94ad9ef":"This Feature doesn't have any efect","1988ebc0":"## Data Dictionary\n> 01 - PatientId\n\nIdentification of a patient\n\n> 02 - AppointmentID\n\nIdentification of each appointment\n\n> 03 - Gender\n\nMale or Female . Female is the greater proportion, woman takes way more care of they health in comparison to man.\n\n> 04 - ScheduledDay\n\nThe day the patient booked the appointment, this is before or at the same day of AppointmentDay of course.\n\n> 05 - AppointmentDay\n\nThe day day the the apponitment is booked for\n\n> 06 - Age\n\nHow old is the patient.\n\n> 07 - Neighbourhood\n\nWhere the appointment takes place.\n> 08 - Scholarship\n\nTrue of False (A government financial aid to poor Brazilian families) https:\/\/en.wikipedia.org\/wiki\/Bolsa_Fam%C3%ADlia\n> 09 - Hypertension\n\nTrue or False (High blood pressure)\n\n> 10 - Diabetes\n\nTrue or False\n> 11 - Alcoholism\n\nTrue or False\n> 12 - Handcap\n\n0-4 (the handcap refers to the number of desabilites a person has. For example, if the person is blind and can't walk the total is 2)\n\n> 13 - SMS_received\n\n1 or more messages sent to the patient.\n> 14 - No-show\n\nTrue or False.","52e6db60":"# Human VS Machine","4c4f679c":"### Many  AppointmentDay  are sooner than ScheduledDay(38568)\n\nWhich is not possible!","6b70c814":"df_final.isnull().sum()","7f15a910":"df.groupby('PatientId')['No-show'].sum()","be85d478":"### Now we have only 5 rows with ScheduledDay is later than AppointmentDay\n\nWe can drop these rows","70f30c11":"Link to dataset: https:\/\/www.kaggle.com\/joniarroba\/noshowappointments","c4317991":"## Creating a new column 'Status of the last appointment' \nhypothesis: if you miss your last appointment, you are more likely to attend the next one)\u00b6"}}