{"cell_type":{"b01efc79":"code","ab7842da":"code","e2c619ce":"code","45efbf15":"code","c37c91d4":"code","52caff04":"code","fab354e9":"code","40b25391":"code","22d2d966":"code","a5f1f04f":"code","bb559ce8":"code","5bb582b8":"code","cea120b6":"code","6be2fbb7":"code","93976f26":"code","4d75aea2":"code","b8555670":"code","842a5fc5":"code","ad22abd2":"code","a5b1ef12":"code","24b86317":"code","1b11252f":"code","c18485a4":"code","63cd3b7a":"code","8d2b3c12":"code","67f8c701":"code","991b4c20":"code","cc267b26":"code","f4ee8a66":"code","3f44ddfd":"code","da3d93c2":"code","d42c316e":"code","33a9e3e3":"code","ef32dd1e":"code","802bf49a":"code","a4d7a2a0":"code","ebb185cb":"code","ab9732f0":"code","83c424cb":"code","82bfc6c5":"code","33961bf9":"code","2bd1bed9":"code","4bba6a99":"code","575af200":"code","5a6fe25f":"code","3bdb48cb":"code","17b118d0":"code","5bb4b5e4":"code","13667b3e":"code","ce943c04":"code","89c14d23":"code","e5e5336b":"code","3003debf":"code","39f48b59":"code","21a7b7cf":"code","bdfadcb0":"code","60a311f5":"code","f94f224f":"code","037a7a3d":"code","b585d2e7":"code","631183b1":"code","95f4f0c9":"code","60e5d32b":"code","3f5adcc0":"code","319d349a":"code","e0d6b5ef":"code","1d42ef85":"code","c2b03946":"code","8db613e0":"code","7ac2f070":"code","3cf59e85":"code","6158faf6":"code","ecd76a1f":"code","1e573908":"code","8be2c2a9":"code","134ae310":"code","4020b32f":"code","dcfbbc8a":"code","0381c367":"code","1fdf8e04":"code","f797c54d":"code","b2754215":"code","6e244c3c":"code","4dbe0b98":"code","68ab7a72":"code","96e1873b":"code","fdd24e55":"code","371e1a10":"code","8033a800":"markdown","f391c691":"markdown","a245793e":"markdown","8ebd7e3f":"markdown","d1d4cd91":"markdown","df5e8f47":"markdown","eefaa246":"markdown","4df3ef44":"markdown","8f3db97a":"markdown","88888ed1":"markdown","87818f97":"markdown","935c3e21":"markdown","fbb8218a":"markdown","b4f1e14d":"markdown","32a529fa":"markdown","aa6e7208":"markdown","4fbf715d":"markdown","ca764a58":"markdown","8c158d84":"markdown","4a7aa1a3":"markdown","732c8314":"markdown","7f999ead":"markdown","797c7056":"markdown","3d5ad8a7":"markdown","53e36c3a":"markdown","8991575a":"markdown","4d50894b":"markdown","351ddc49":"markdown","82063993":"markdown","cd9584e5":"markdown","84a8a728":"markdown","f86a2905":"markdown","364cf97e":"markdown","c90d9fd2":"markdown","9af3d63a":"markdown","ae7d8a9c":"markdown","4016601f":"markdown","e3ff53e8":"markdown","fab4a38a":"markdown","2b64d44b":"markdown","b37d0284":"markdown","1b63cdf4":"markdown","90c6f74b":"markdown","b33a6135":"markdown","a05756f9":"markdown","37c674dd":"markdown"},"source":{"b01efc79":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-whitegrid')\nimport seaborn as sns","ab7842da":"deliveries = pd.read_csv(\"..\/input\/ipldata\/deliveries.csv\")\nmatches = pd.read_csv(\"..\/input\/ipldata\/matches.csv\")","e2c619ce":"print(deliveries.shape,matches.shape)","45efbf15":"deliveries.head(10)","c37c91d4":"matches.head(10)","52caff04":"deliveries.columns","fab354e9":"matches.columns","40b25391":"deliveries.info()","22d2d966":"matches.info()","a5f1f04f":"matches[\"venue\"].value_counts()","bb559ce8":"matches[\"venue\"].value_counts()","5bb582b8":"top10venues=matches[\"venue\"].value_counts()\ntop10venues.index","cea120b6":"plt.figure(figsize=(14,14))\nsns.set_style(style=\"darkgrid\")\nsns.barplot(y= top10venues.index,x = top10venues, orient =\"h\")","6be2fbb7":"matches[\"city\"].value_counts()","93976f26":"top10cities=matches[\"city\"].value_counts()\nplt.figure(figsize=(12,12))\nsns.barplot(top10cities,top10cities.index)","4d75aea2":"len(top10cities.index)","b8555670":"len(top10venues.index)","842a5fc5":"matches.loc[matches[\"venue\"]==\"Rajiv Gandhi International Stadium, Uppal\",[\"venue\",\"win_by_runs\",\"win_by_wickets\"]]","ad22abd2":"temp_venue = matches.loc[matches[\"venue\"]==\"Rajiv Gandhi International Stadium, Uppal\",[\"venue\",\"win_by_runs\",\"win_by_wickets\"]]\ntemp_venue[\"win_by_runs\"].max()","a5b1ef12":"temp_venue[\"win_by_runs\"].idxmax()","24b86317":"matches.loc[matches[\"id\"]==435,:]","1b11252f":"temp_venue[\"win_by_wickets\"].max()","c18485a4":"temp_venue[\"win_by_wickets\"].idxmax()","63cd3b7a":"matches.loc[matches[\"id\"]==6,:]","8d2b3c12":"max_win_by_runs_by_venue = []\neachvenue = matches[\"venue\"].unique()\nfor i in eachvenue :\n    temp_each_venue = matches.loc[matches[\"venue\"]==i,[\"venue\",\"win_by_runs\"]]\n    temp_max_win_by_runs_by_venue = temp_each_venue[\"win_by_runs\"].max()\n    max_win_by_runs_by_venue.append(temp_max_win_by_runs_by_venue)\nmax_win_by_runs_by_venue","67f8c701":"df_max_win_by_runs_by_venue = pd.DataFrame({\"venue\" : eachvenue,\"max win by runs\" : max_win_by_runs_by_venue}, columns = [\"venue\", \"max win by runs\"]).set_index(\"venue\")\ndf_max_win_by_runs_by_venue","991b4c20":"max_win_by_wickets_by_venue = []\neachvenue = matches[\"venue\"].unique()\nfor i in eachvenue :\n    temp_each_venue = matches.loc[matches[\"venue\"]==i,[\"venue\",\"win_by_wickets\"]]\n    temp_max_win_by_wickets_by_venue = temp_each_venue[\"win_by_wickets\"].max()\n    max_win_by_wickets_by_venue.append(temp_max_win_by_wickets_by_venue)\nmax_win_by_wickets_by_venue","cc267b26":"df_max_win_by_wickets_by_venue = pd.DataFrame({\"venue\" : eachvenue,\"max win by wickets\" : max_win_by_wickets_by_venue}, columns = [\"venue\", \"max win by wickets\"]).set_index(\"venue\")\ndf_max_win_by_wickets_by_venue","f4ee8a66":"combined_each_venue = pd.merge(df_max_win_by_runs_by_venue,df_max_win_by_wickets_by_venue, how=\"outer\", left_index=True, right_index=True)\ncombined_each_venue","3f44ddfd":"sorted_combined_each_venue_by_runs = combined_each_venue.sort_values(by=\"max win by runs\", ascending=False)\nplt.figure(figsize=(14,14))\nsns.barplot(sorted_combined_each_venue_by_runs[\"max win by runs\"],sorted_combined_each_venue_by_runs.index, palette=\"rocket\")","da3d93c2":"sorted_combined_each_venue_by_wickets = combined_each_venue.sort_values(by=\"max win by wickets\",ascending = False)\nplt.figure(figsize=(14,14))\nsns.barplot(sorted_combined_each_venue_by_wickets[\"max win by wickets\"],sorted_combined_each_venue_by_wickets.index, palette =\"viridis\")","d42c316e":"teams = matches[\"team1\"].unique()\nteams","33a9e3e3":"len(teams)","ef32dd1e":"totalrunsofeachteamarr = []\nfor i in teams :\n    temp = deliveries.loc[(deliveries[\"batting_team\"] == i),[\"batting_team\",\"total_runs\"]]\n    tempruns = temp[\"total_runs\"].count()\n    totalrunsofeachteamarr.append(tempruns)\ntotalrunsofeachteamarr","802bf49a":"totalrunsofeachteam = pd.DataFrame({\"Team\" : teams,\"Total runs of each team\" : totalrunsofeachteamarr}, columns = [\"Team\", \"Total runs of each team\"]).set_index(\"Team\")\ntotalrunsofeachteam.sort_values(by=\"Total runs of each team\", ascending=False,inplace = True)\ntotalrunsofeachteam","a4d7a2a0":"plt.figure(figsize=(14,14))\nsns.barplot(totalrunsofeachteam[\"Total runs of each team\"],totalrunsofeachteam.index, palette =\"deep\")","ebb185cb":"batsman = deliveries[\"batsman\"].unique()\nbatsman","ab9732f0":"len(batsman)","83c424cb":"warnerruns = deliveries.loc[deliveries[\"batsman\"]==\"DA Warner\",[\"batsman\",\"batsman_runs\"]]\nwarnerruns[\"batsman_runs\"].sum()","82bfc6c5":"totalrunseachbatsmanarr = []\nfor i in batsman :\n    temp1 = deliveries.loc[deliveries[\"batsman\"]==i,[\"batsman\",\"batsman_runs\"]]\n    temp2 = temp1[\"batsman_runs\"].sum()\n    totalrunseachbatsmanarr.append(temp2)\ntotalrunseachbatsmanarr","33961bf9":"totalrunseachbatsman = pd.DataFrame({\"Batsman\" : batsman,\"Total runs by each Batsman\" : totalrunseachbatsmanarr}, columns = [\"Batsman\", \"Total runs by each Batsman\"]).set_index(\"Batsman\")\ntotalrunseachbatsman.sort_values(by=\"Total runs by each Batsman\", ascending = False,inplace=True)\ntop25batsmanruns = totalrunseachbatsman[\"Total runs by each Batsman\"].nlargest(25)\ntop25batsmanruns","2bd1bed9":"plt.figure(figsize=(12,12))\nsns.barplot(top25batsmanruns,top25batsmanruns.index, palette =\"Blues_r\")\nplt.tight_layout()","4bba6a99":"sixescountarr = []\nfor i in batsman :\n    temp3 = deliveries.loc[(deliveries[\"batsman\"] == i) & (deliveries[\"batsman_runs\"]==6),:].shape[0]\n    sixescountarr.append(temp3)\nsixescount = pd.DataFrame({\"Batsman\" : batsman,\"Total sixes\" : sixescountarr}, columns = [\"Batsman\", \"Total sixes\"]).set_index(\"Batsman\")\nsixescount = sixescount.sort_values(by=\"Total sixes\", ascending = False)\nsixescount = sixescount[\"Total sixes\"].nlargest(5)\nsixescount","575af200":"plt.figure()\nsns.barplot(sixescount,sixescount.index, palette =\"hls\", orient=\"h\")\nplt.tight_layout()","5a6fe25f":"fourscountarr = []\nfor i in batsman :\n    temp3 = deliveries.loc[(deliveries[\"batsman\"] == i) & (deliveries[\"batsman_runs\"]==4),:].shape[0]\n    fourscountarr.append(temp3)\nfourscount = pd.DataFrame({\"Batsman\" : batsman,\"Total fours\" : fourscountarr}, columns = [\"Batsman\", \"Total fours\"]).set_index(\"Batsman\")\nfourscount = fourscount.sort_values(by=\"Total fours\", ascending = False)\nfourscount = fourscount[\"Total fours\"].nlargest(5)\nplt.figure()\nsplot = sns.barplot(fourscount,fourscount.index, palette =\"hls\", orient=\"h\")\nfor p in splot.patches:\n    plt.text(p.get_width(), p.get_y()+0.55*p.get_height(),'{:1.2f}'.format(p.get_width()), ha='center', va='center')\nplt.tight_layout()","3bdb48cb":"#percentage of total runs scored by V kohli by 4s,6s\n((((deliveries.loc[(deliveries[\"batsman\"] == \"V Kohli\") & (deliveries[\"batsman_runs\"]==6),:].shape[0])*6) + ((deliveries.loc[(deliveries[\"batsman\"] == \"V Kohli\") & (deliveries[\"batsman_runs\"]==4),:].shape[0])*4))\/4211)*100","17b118d0":"batsman_each_team = []\ntemp6 = []\nfor i in batsman :\n    for j in teams :\n        temp4 = deliveries.loc[(deliveries[\"batsman\"]==i)&(deliveries[\"bowling_team\"]==j),[\"batsman\",\"batsman_runs\"]]\n        temp5 = temp4[\"batsman_runs\"].sum()\n        temp6.append(temp5)\n    batsman_each_team.append(temp6)\n    temp6=[]\nbatsman_each_team","5bb4b5e4":"len(batsman_each_team)","13667b3e":"len(batsman_each_team[2])","ce943c04":"df_batsman_each_team = pd.DataFrame(batsman_each_team, columns = teams).set_index(batsman)\ndf_batsman_each_team","89c14d23":"bowlers = deliveries[\"bowler\"].unique()\nbowlers","e5e5336b":"len(bowlers)","3003debf":"btemp = deliveries.loc[(pd.isna(deliveries[\"player_dismissed\"])==False)&(deliveries[\"bowler\"]==\"HH Pandya\")&(deliveries[\"dismissal_kind\"]!=\"run out\")&(deliveries[\"dismissal_kind\"]!=\"retired hurt\")&(deliveries[\"dismissal_kind\"]!=\"Obstructing the field\"),[\"bowler\",\"player_dismissed\"]]\nbtemp.shape[0]","39f48b59":"eachbowlerwickets = []\nfor i in bowlers :    \n    temp10 = deliveries.loc[(pd.isna(deliveries[\"player_dismissed\"])==False)&(deliveries[\"bowler\"]==i)&(deliveries[\"dismissal_kind\"]!=\"run out\")&(deliveries[\"dismissal_kind\"]!=\"retired hurt\")&(deliveries[\"dismissal_kind\"]!=\"obstructing the field\"),[\"bowler\",\"player_dismissed\"]]\n    temp11 = temp10.shape[0]\n    eachbowlerwickets.append(temp11)\ndf_eachbowlerwickets = pd.DataFrame({\"Bowler\" : bowlers,\"Total wickets\" : eachbowlerwickets}, columns = [\"Bowler\", \"Total wickets\"]).set_index(\"Bowler\")\ndf_eachbowlerwickets.sort_values(by=\"Total wickets\", ascending = False, inplace = True)\ndf_eachbowlerwickets","21a7b7cf":"top10bowlers = df_eachbowlerwickets[\"Total wickets\"].nlargest(10)\nplt.figure(figsize=(8,8))\nsplot = sns.barplot(top10bowlers,top10bowlers.index, palette =\"autumn\", orient=\"h\")\nfor p in splot.patches:\n    plt.text(p.get_width(), p.get_y()+0.55*p.get_height(),'{:1.2f}'.format(p.get_width()), ha='center', va='center')\nplt.tight_layout()","bdfadcb0":"bowler_each_team = []\ntemp15 = []\nfor i in bowlers :\n    for j in teams :\n        temp41 = deliveries.loc[(deliveries[\"batting_team\"]==j)&(pd.isna(deliveries[\"player_dismissed\"])==False)&(deliveries[\"bowler\"]==i)&(deliveries[\"dismissal_kind\"]!=\"run out\")&(deliveries[\"dismissal_kind\"]!=\"retired hurt\")&(deliveries[\"dismissal_kind\"]!=\"obstructing the field\"),[\"bowler\",\"player_dismissed\"]]\n        temp15.append(temp41.shape[0])\n    bowler_each_team.append(temp15)\n    temp15=[]\nbowler_each_team","60a311f5":"df_bowler_each_team = pd.DataFrame(bowler_each_team, columns = teams).set_index(bowlers)\ndf_bowler_each_team","f94f224f":"deliveries[\"player_dismissed\"].value_counts()","037a7a3d":"deliveries[\"dismissal_kind\"].value_counts()","b585d2e7":"maxm = 0\nmatch_ids = deliveries[\"match_id\"].unique()\nfor i in match_ids :\n    temp22 = deliveries.loc[deliveries[\"match_id\"]==i,:].groupby([\"match_id\",\"batting_team\",\"bowling_team\",\"bowler\"])[\"over\"].value_counts().max()\n    if temp22 > maxm :\n        maxm = temp22\nprint(maxm)","631183b1":"for i in match_ids :\n    temp22 = deliveries.loc[deliveries[\"match_id\"]==i,:].groupby([\"match_id\",\"batting_team\",\"bowling_team\",\"bowler\"])[\"over\"].value_counts().max()\n    if temp22 == maxm :\n        print(deliveries.loc[deliveries[\"match_id\"]==i,:].groupby([\"match_id\",\"batting_team\",\"bowling_team\",\"bowler\"])[\"over\"].value_counts().nlargest(1))","95f4f0c9":"mostbowlsfacedarr = []\nfor i in batsman :\n    mostbowlsfacedarr.append(deliveries.loc[(deliveries[\"batsman\"]==i)&(deliveries[\"wide_runs\"]==0),:].shape[0])\ndf_mostbowlsfaced = pd.DataFrame({\"batsman\" : batsman,\"Totals balls faced\" : mostbowlsfacedarr}, columns = [\"batsman\", \"Totals balls faced\"]).set_index(\"batsman\")\ndf_mostbowlsfaced.sort_values(by=\"Totals balls faced\", ascending = False, inplace = True)\ndf_mostbowlsfaced","60e5d32b":"top10mostbowlsfaced = df_mostbowlsfaced[\"Totals balls faced\"].nlargest(10)\ntop10mostbowlsfaced","3f5adcc0":"plt.figure(figsize=(8,8))\nsplot = sns.barplot(top10mostbowlsfaced,top10mostbowlsfaced.index, palette =\"summer\", orient=\"h\")\nfor p in splot.patches:\n    plt.text(p.get_width(), p.get_y()+0.55*p.get_height(),'{:1.2f}'.format(p.get_width()), ha='center', va='center')\nplt.tight_layout()","319d349a":"deliveries.loc[deliveries[\"penalty_runs\"]!=0,:]","e0d6b5ef":"deliveries[\"bowler\"].value_counts()","1d42ef85":"#count100 = 0\n#count50 = 0\n#eachbatsman10050count = []\n#temp = []\n#for i in batsman :  \n#    for j in match_ids :\n#        temp72 = deliveries.loc[(deliveries[\"batsman\"]==i)&(deliveries[\"match_id\"]==j)&(deliveries[\"is_super_over\"]==0),\"batsman_runs\"].sum()\n#        if temp72 >= 50 and temp72 < 100 :\n#            count50+=1\n#        if temp72 >= 100 :\n#            count100+=1\n#    temp.append(count100)\n#    temp.append(count50)\n#    eachbatsman10050count.append(temp)\n#    count100 = 0\n#    count50 = 0\n#    temp = []\n#eachbatsman10050count","c2b03946":"#df_eachbatsman10050count = pd.DataFrame(eachbatsman10050count, columns = [\"100s\",\"50s\"]).set_index(batsman)\n#df_eachbatsman10050count","8db613e0":"#df_eachbatsman10050count[\"100s\"].nlargest(5)","7ac2f070":"#df_eachbatsman10050count[\"50s\"].nlargest(10)","3cf59e85":"eachbatsman10050count2 = np.zeros((516,2))\nfor i in match_ids :\n    temp9 = deliveries.loc[deliveries[\"match_id\"]==i,:]\n    batsmanineverymatch = temp9[\"batsman\"].unique()\n    for j in batsmanineverymatch :\n        temp72 = deliveries.loc[(deliveries[\"batsman\"]==j)&(deliveries[\"match_id\"]==i)&(deliveries[\"is_super_over\"]==0),\"batsman_runs\"].sum()\n        for counter, k in enumerate(batsman):\n            if j == k:\n                pos = counter\n        if temp72 >= 50 and temp72 < 100 :\n            eachbatsman10050count2[pos][1]+=1 \n        if temp72 >= 100 :\n            eachbatsman10050count2[pos][0]+=1\neachbatsman10050count2","6158faf6":"df_eachbatsman10050count2 = pd.DataFrame(eachbatsman10050count2, columns = [\"100s\",\"50s\"]).set_index(batsman)\ndf_eachbatsman10050count2","ecd76a1f":"df_eachbatsman10050count2[\"100s\"].nlargest(5)","1e573908":"df_eachbatsman10050count2[\"50s\"].nlargest(10)","8be2c2a9":"abc = []\np = []\nfor i in eachvenue :\n    for j in teams :\n        temp = matches.loc[(matches[\"toss_winner\"]==j)&(matches[\"winner\"]==j)&(matches[\"venue\"]==i),:].shape[0]\n        abc.append(temp)\n    p.append(abc)\n    abc = []\ndf_toss_winners = pd.DataFrame(p, columns = teams).set_index(eachvenue)\ndf_toss_winners","134ae310":"mmax = 0\nfor i in teams :\n    count = df_toss_winners[i].sum()\n    if count > mmax :\n        mmax = count\nmmax","4020b32f":"for i in teams :\n    count = df_toss_winners[i].sum()\n    if count == mmax :\n        print(\"Most winners after winning toss is - \"+ str(i))","dcfbbc8a":"mmax = 0\nfor i in range(len(df_toss_winners.index)) :\n    count = df_toss_winners.iloc[i,:].sum()\n    if count > mmax :\n        mmax = count\nmmax","0381c367":"for i in range(len(df_toss_winners.index)) :\n    count = df_toss_winners.iloc[i,:].sum()\n    if count == mmax :\n        print(df_toss_winners.index[i])","1fdf8e04":"perteamextras = []\nfor i in teams :     \n    temp96 = deliveries.loc[(deliveries[\"bowling_team\"]==i)&(deliveries[\"extra_runs\"]!=0),:]\n    temp97 = temp96[\"extra_runs\"].sum()\n    perteamextras.append(temp97)\nperteamextras","f797c54d":"pd.Series(perteamextras, index = teams)","b2754215":"pd.Series(perteamextras, index = teams).nlargest(5)","6e244c3c":"strikerateeachbatsman = []\nfor pos,name in enumerate(batsman) :\n    strikerateeachbatsman.append(100*(totalrunseachbatsmanarr[pos]\/mostbowlsfacedarr[pos]))\npd.Series(strikerateeachbatsman, index = batsman)","4dbe0b98":"pd.Series(strikerateeachbatsman, index = batsman).nlargest(10)","68ab7a72":"matches[\"player_of_match\"].value_counts()","96e1873b":"(matches[\"umpire1\"].value_counts()+matches[\"umpire2\"].value_counts()).nlargest()","fdd24e55":"a = []\nb = []\nfor i in range(9) : \n    for j in batsman :     \n        dismissalkinds =deliveries[\"dismissal_kind\"].unique()[1:]\n        temp = deliveries.loc[(deliveries[\"dismissal_kind\"] == dismissalkinds[i])&(deliveries[\"player_dismissed\"] == j),:].shape[0]\n        a.append(temp)\n    b.append(a)\n    a=[]\ndf_dismissaleachbatsman = pd.DataFrame(b, columns = batsman).set_index(dismissalkinds)\ndf_dismissaleachbatsman","371e1a10":"topdismissaleachkind = []\nfor i in dismissalkinds : \n    temp = df_dismissaleachbatsman.loc[i,:].idxmax()\n    topdismissaleachkind.append(temp)\npd.Series(topdismissaleachkind, index = dismissalkinds)","8033a800":"## **FINDING OUT TOTAL RUNS SCORED BY EACH BATSMEN IN IPL-**","f391c691":"## **FINDING OUT PLAYERS WHICH HAVE BEEN AWARDED MAX NUMBER OF \"PLAYER OF THE MATCH\"**","a245793e":"## **We load our dataset in two variables -**","8ebd7e3f":"### **Storing all batsmen to have played IPL in one array. This too will be useful throughout the EDA -**","d1d4cd91":"## **FINDING OUT HOW MANY TOSS WINNING TEAMS HAVE WON THE MATCHES AGAINST EACH STADIUM IN IPL**","df5e8f47":"## **FINDING OUT THE STADIUMS WHERE MOST MATCHES HAVE BEEN HELD -**","eefaa246":"## **FINDING OUT TOTAL RUNS SCORED BY EACH TEAM IN IPL**","4df3ef44":"### **Feeding it in the boolean mask below. The matching value - \"434\" has been incremented by 1 i.e. to \"435\" since our \"matches.csv\" file has a heading\/column on top which increases the it's index by 1**","8f3db97a":"## **Checking out the number and type of columns in both the datasets -**","88888ed1":"# EXTENSIVE EDA IPL (2008-2019)","87818f97":"### **Finding out the index of returned value in upper cell**","935c3e21":"## **Just a lil bit of a preview of the datasets -** ","fbb8218a":"## **Checking the shape of each file -**","b4f1e14d":"## **FINDING OUT WHICH TEAM HAS CONCEDED THE MOST EXTRAS**","32a529fa":"### **FINDING OUT PLAYERS DISMISSED THE MOST IN EACH DISMISSAL KIND**","aa6e7208":"## **COUNTING THE NUMBER OF CENTURIES, HALF-CENTURIES BY EACH BATSMEN IN IPL**","4fbf715d":"### **Repeating the same process for \"win by wickets\" -**","ca764a58":"### **Now we start with our looping process which does this for every stadium. We do it for \"win by runs\" first-**","8c158d84":"## **FINDING OUT TOTAL NUMBER OF FOURS BY EACH BATSMEN IN IPL -**","4a7aa1a3":"## **FINDING OUT TOTAL DELIVERIES FACED BY EACH BATSMEN AGAINST EACH TEAM IN IPL**","732c8314":"## **FINDING OUT WHICH STADIUM HAS ALLOWED TOSS WINNERS TO WIN MATCHES**","7f999ead":"### **Merging both the dataframes in one-**","797c7056":"## **FINDING OUT PEEPS WHO HAVE BEEN UMPIRES THE MOST IN IPL**","3d5ad8a7":"## **FINDING OUT STRIKE RATE OF EACH BATSMEN IN IPL**","53e36c3a":"## **FINDING OUT TOTAL WICKETS BY EACH BOWLER IN IPL**","8991575a":"## **FINDING OUT BOWLERS TALLY OF TAKING WICKETS AGAINST EACH TEAM IN IPL**","4d50894b":"### **FINDING OUT THE MOST TOSS WINNING TEAM IN IPL**","351ddc49":"## **FINDING OUT STADIUM WISE MOST \"WIN BY RUNS\" AND \"WIN BY WICKETS\"**\n#### First we hardcode it for a particular stadium. Then we run loops and filter via boolean masking","82063993":"## **FINDING OUT MOST DISMISSED PLAYER IN IPL**","cd9584e5":"### **Storing all bowlers to have ever bowled in IPL in one array. This too will be very useful throughout the EDA**","84a8a728":"### **Now we start with our looping process which does this for every stadium. We do it for \"win by wickets\" now**","f86a2905":"### **We can find out the percentage of total runs scored by each batsmen in 4s and 6s**\n#### Making a loop will give us the answer for each batsmen","364cf97e":"## **Just playing around a bit** --","c90d9fd2":"## **COUNTING THE NUMBER OF TIMES PENALTY RUNS HAD BEEN AWARDED**","9af3d63a":"## **FINDING OUT THE BOWLER WHICH HAS BOWLED MOST NUMBER OF BOWLS IN AN OVER**","ae7d8a9c":"## **FINDING OUT COUNTS OF EACH KIND OF DISMISSAL IN IPL**","4016601f":"### **Storing every team name that has played IPL ever in one array. This will be very useful throughout the EDA.**","e3ff53e8":"### **Sorting and plotting it-**","fab4a38a":"## **BOWLER WHICH HAS BOWLED THE MAXIMUM NUMBER OF BOWLS**","2b64d44b":"## **FINDING OUT IN WHICH CITY HAS THE MOST MATCHES BEEN PLAYED - (DESC ORDER)**","b37d0284":"## **Let's start by importing the required packages :-**","1b63cdf4":"## **FINDING OUT MOST BOWLS FACED BY A BATSMAN IN IPL**","90c6f74b":"## **FINDING OUT TOTAL NUMBER OF SIXES BY EACH BATSMEN IN IPL -**","b33a6135":"## **FINDING OUT DISMISSAL KINDS FOR EACH BATSMEN IN IPL**","a05756f9":"### **converting it into a dataframe-**","37c674dd":"### **Finding out the max \"win by runs\" of this stadium**"}}