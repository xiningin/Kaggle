{"cell_type":{"6a668bce":"code","7d9425cc":"code","9eafba51":"code","147af466":"code","729b5288":"code","dc3981e0":"code","0af4ade6":"code","1f97c55d":"code","1813eb46":"code","f88adf9c":"code","766976b0":"code","0e68fa60":"code","8118d9c0":"code","2c79b6f9":"code","892f50f1":"code","620ced82":"code","c8310bd2":"code","f38f6d10":"code","b463d7dd":"code","8b563ebf":"code","1076725c":"code","f4932ddb":"markdown","b77af28e":"markdown","f611a4e6":"markdown"},"source":{"6a668bce":"# En datos se tiene cargado un shapefile con todos los parques provinciales\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport geopandas\nimport matplotlib.pyplot as plt\nimport folium\nfrom folium import plugins\n\nplt.figure(figsize=(10,6)) # se define el tama\u00f1o de los mapas\n\n# Se carga el shapefile en un dataframe - antes se subi\u00f3 el zip que contiene el shapefile\n\nparques = geopandas.read_file(\"..\/input\/fbmapas\/arg-parques-provinciales-protegidos\")\n\nparques","7d9425cc":"# Hacemos un primer gr\u00e1fico donde vemos los pol\u00edgonos que representan los parques argentinos\n\nprint(parques.crs) # se muestra el sistema del proyecci\u00f3n del mapa\n\nparques.plot()\n","9eafba51":"# Nos interesa trabajar solo con los parques de la provincia de San Ju\u00e1n\n# Vamos a construir un nuevo geodataframe que los almacene\n\nparques_sj = parques[parques['PROVINCIA']==\"San Juan\"]\n\nparques_sj","147af466":"# Ahora el mapa de los parques en la provincia de San Juan\n\nparques_sj.plot()","729b5288":"# Primero nos vamos a quedar con los atributos que solo nos interesan\n\nparques_sj = parques_sj[[\"NOMBRE\",\"PROVINCIA\",\"CATEGORIA\",\"SUPERFICIE\",\"geometry\"]]\n\nparques_sj","dc3981e0":"# A continuaci\u00f3n vamos a editar el contenido de algunas celdas para arreglarlas\n\nparques_sj.loc[32,'NOMBRE'] = \"Valle Fertil\"  # \u00edndice y nombre de columna\nparques_sj.loc[19,'CATEGORIA'] = \"Reserva Privada Uso Multiple\"  \nparques_sj.loc[32,'CATEGORIA'] = \"Sin Informacion\"  \nparques_sj.loc[42,'CATEGORIA'] = \"Sin informacion\"  \n\nparques_sj","0af4ade6":"# Vamos a recalcular la superficie de cada parque en base a datos que\n# definen la geometr\u00eda del pol\u00edgono\n\nparques_sj= parques_sj.to_crs({'init': 'epsg:3395'}) # se cambia de sistema de proyecci\u00f3n para calcular superficie\nparques_sj[\"SUPERFICIE\"] = round(parques_sj.geometry.area \/ 10**6, 2)\nparques_sj= parques_sj.to_crs({'init': 'epsg:4326'})\n\nparques_sj","1f97c55d":"# Se agrega un columna que indica la categor\u00eda de peligro frente a fuego\n\ntmp = [\"A\",\"C\",\"C\",\"B\",\"A\"]\n\nparques_sj['peligro'] = tmp\n\nparques_sj","1813eb46":"# Se agrega la columna valor y se calcula como la superficie por 487.7\n\nparques_sj[\"VALOR\"] = round(parques_sj[\"SUPERFICIE\"] * 487.7, 0 )\n\nparques_sj","f88adf9c":"# Vamos a ordenar las filas del dataframe por nombre del parque\n\nparques_sj = parques_sj.sort_values('NOMBRE')\n\n# Vamos a regenerar los n\u00fameros de \u00edndice\n\nparques_sj = parques_sj.reset_index(drop=True)\n\nparques_sj","766976b0":"# Generamos un nuevo atributo espacial que es el centroide de cada parque\n# Se almacena como un punto definido por latitud y longitud\n\nparques_sj['centroide'] = parques_sj.centroid\n\nparques_sj","0e68fa60":"# En la tabla anterior veo el agregado de la segunda geometr\u00eda centroide (una sola est\u00e1 activa en un momento dado)\n# si moestramos el geodataframe en un mapa lo verificamos\n\nparques_sj.plot()","8118d9c0":"# Ahora vamos a superponer la nueva geometr\u00eda en el mapa\n\nax = parques_sj[\"geometry\"].plot()   # se genera el mapa base con los pol\u00edgonos\nparques_sj[\"centroide\"].plot(ax=ax, color=\"black\") # se adiciona la segunda geometr\u00eda de centroides","2c79b6f9":"# Vamos a calcular la distancia entre el centroide del primer parque y el resto\n\n# iloc[0] hace referencia al primer registro del geodataframe \"Don Carmelo\" \n\nprimer_punto = parques_sj['centroide'].iloc[0] \n\n# parques_sj['distancia'] = (parques_sj['centroide'].distance(primer_punto))\/1000 # se almacena la distancia en kil\u00f3metros\nparques_sj['distancia'] = round((parques_sj['centroide'].distance(primer_punto))*100,2) # En kil\u00f3metros\n\nparques_sj\n\n# En el \u00edndice cero vemos distancia cero, eso debido a que e la distancia a si mismo","892f50f1":"# Pr\u00f3xima tarea agregar una capa con los l\u00edmites de la provincia de San Juan\n\n# Para ello recuperaremos un shapefile con informaci\u00f3n de Argentina\n\n\n# Se carga el shapefile en un geodataframe \n\nargentina = geopandas.read_file(\"..\/input\/argentinashp\/Argentina_SHP\")\n\nargentina","620ced82":"print(argentina.crs) # se muestra el sistema del proyecci\u00f3n del mapa\nargentina.plot()","c8310bd2":"# Nos interesa trabajar solo con los datos de la provincia de San Ju\u00e1n\n# Vamos a construir un nuevo geodataframe que los almacene\n\nargentina_sj = argentina[argentina['provincia']==\"San Juan\"]\n\nargentina_sj","f38f6d10":"# Mostramos el mapa de San Ju\u00e1n\n\nargentina_sj.plot()","b463d7dd":"# Ahora vamos a sumar esta capa con los l\u00edmites provinciales al mapa construido anteriormente con\n# la localizaci\u00f3n de los parques y otra capa de centroides\n\na = argentina_sj.plot(legend=True, alpha=0.5, figsize=(20,14)) # se crea el mapa base con la geometr\u00eda de la provincia\nb = parques_sj[\"geometry\"]   \nc = parques_sj[\"centroide\"]\n\nb = b.plot(ax=a, color=\"gray\", alpha=0.5)  # se agrega al mapa anterior una capa con los pol\u00edgonos de los parques\nc = c.plot(ax=b, color=\"black\") # se agrega al mapa anterior una capa con los centroides de los parques\n\nc.set(title='San Juan - Parques protegidos', aspect=1.3, facecolor='lightblue')\n\nfor i, point in parques_sj.centroid.iteritems(): #  Se leen los nombres se los parques y se agrega un r\u00f3tulo\n    reg_n = parques_sj.loc[i, 'NOMBRE']\n    c.text(s=reg_n, x=point.x-0.1, y=point.y+0.04, fontsize='large')\n\nc","8b563ebf":"# Se muestran los pol\u00edgonos del geodataframe sobre un mapa interactivo y se los categoriza por el atributo \"peligro\"\n# El resultado es un mapa folium.folium.Map\n\nparques_sj_folium = parques_sj.explore(column=\"peligro\", legend=True, cmap=\"rainbow\", tooltip=[\"NOMBRE\", \"CATEGORIA\"],)\n\n# Se agregan capas con mapas base\nmapas_base = {\n    'Google Maps': folium.TileLayer(\n        tiles = 'https:\/\/mt1.google.com\/vt\/lyrs=m&x={x}&y={y}&z={z}',\n        attr = 'Google', name = 'Google Maps', overlay = True, control = True\n    ),\n   'Google Satellite Hybrid': folium.TileLayer(\n        tiles = 'https:\/\/mt1.google.com\/vt\/lyrs=y&x={x}&y={y}&z={z}',\n        attr = 'Google', name = 'Google Satellite', overlay = True, control = True\n    )\n}\n\nmapas_base['Google Maps'].add_to(parques_sj_folium)\nmapas_base['Google Satellite Hybrid'].add_to(parques_sj_folium)\n\nfolium.GeoJson(parques_sj[\"centroide\"]).add_to(parques_sj_folium) # agregamos la informaci\u00f3n de centroides al mapa\n\nplugins.MeasureControl(position='topright',  primary_length_unit='meters', primary_area_unit='sqmeters').add_to(parques_sj_folium)\n\nfolium.LayerControl().add_to(parques_sj_folium) # se a\u00f1ade un selector de capas al mapa\n\nparques_sj_folium.save('parques_sj_folium.html') # graba el mapa interactivo en una p\u00e1gina  HTML\n\nparques_sj_folium","1076725c":"# Final, grabar el geodataframe nuevo en un archivo shapefile\n# En el panel derecho revisar la solapa \"output\"\n\ndel parques_sj['distancia'] # borramos columna distancia\ndel parques_sj['centroide'] # borramos la segunda columna con datos georeferenciados\n                            # los shapefiles solo pueden tener 1 sola\n    \nparques_sj.to_file(\"parques_sj.shp\")\n","f4932ddb":"# Mapa interactivo","b77af28e":"**A continuaci\u00f3n vamos a trabajar con los datos del geodataframe**","f611a4e6":"# Manejo b\u00e1sico de shapefiles con geodataframe\n\n(De Wikipedia) El formato [ESRI Shapefile](https:\/\/es.wikipedia.org\/wiki\/Shapefile) (SHP) es un formato de archivo inform\u00e1tico propietario de datos espaciales desarrollado por la compa\u00f1\u00eda ESRI, quien crea y comercializa software para Sistemas de Informaci\u00f3n Geogr\u00e1fica como Arc\/Info o ArcGIS. Originalmente se cre\u00f3 para la utilizaci\u00f3n con su producto ArcView GIS, pero actualmente se ha convertido en formato est\u00e1ndar de facto para el intercambio de informaci\u00f3n geogr\u00e1fica entre Sistemas de Informaci\u00f3n Geogr\u00e1fica por la importancia que los productos ESRI tienen en el mercado SIG y por estar muy bien documentado.\n\nUn shapefile es un formato vectorial de almacenamiento digital donde se guarda la localizaci\u00f3n de los elementos geogr\u00e1ficos y los atributos asociados a ellos. No obstante carece de capacidad para almacenar informaci\u00f3n topol\u00f3gica. Es un formato multiarchivo, es decir est\u00e1 generado por varios ficheros inform\u00e1ticos. El n\u00famero m\u00ednimo requerido es de tres y tienen las extensiones siguientes:\n\n* .shp - es el archivo que almacena las entidades geom\u00e9tricas de los objetos.\n* .shx - es el archivo que almacena el \u00edndice de las entidades geom\u00e9tricas.\n* .dbf - es la base de datos, en formato dBASE, donde se almacena la informaci\u00f3n de los atributos de los objetos.\n\nAdem\u00e1s de estos tres archivos requeridos, opcionalmente se pueden utilizar otros para mejorar el funcionamiento en las operaciones de consulta a la base de datos, informaci\u00f3n sobre la proyecci\u00f3n cartogr\u00e1fica, o almacenamiento de metadatos. Estos archivos son:\n\n* .prj - Es el archivo que guarda la informaci\u00f3n referida al sistema de coordenadas en formato WKT.\n* .sbn y .sbx - Almacena el \u00edndice espacial de las entidades.\n* .fbn y .fbx - Almacena el \u00edndice espacial de las entidades para los shapefiles que son inalterables (solo lectura).\n* .ain y .aih - Almacena el \u00edndice de atributo de los campos activos en una tabla o el tema de la tabla de atributos.\n* .xml - Almacena los metadatos del shapefile."}}