{"cell_type":{"9af14dc3":"code","4a214246":"code","7e5da739":"code","780eedad":"code","14fb9d39":"code","fbea6a85":"code","95e53629":"code","183c80a9":"code","2dc6c21c":"code","ae14b024":"code","9a3fb074":"code","d627f0d8":"code","92359e08":"code","b4fb1af8":"code","9b4dee73":"code","4f1786bd":"code","b1e95031":"code","d688890e":"code","aa7383f4":"code","e6fa1c5f":"code","49b64ed8":"code","d1ef835d":"code","486e6095":"code","5593eafb":"code","8fab8559":"code","f4f493cd":"code","c28c330c":"code","807cde2c":"code","a10efc78":"code","469a05e5":"code","fdacb3bf":"code","684274e1":"code","350bae0d":"code","0ad40690":"code","7c0e6757":"code","8b935f11":"code","a790be99":"code","212a2e92":"code","ba312031":"code","7d851346":"code","a57ff396":"code","aabfe99a":"code","f0b3cf3c":"code","208cc81d":"code","ec70704f":"code","8652e7bd":"code","e843c164":"code","d8a72db8":"code","51ae727b":"markdown","905ce6c9":"markdown"},"source":{"9af14dc3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport itertools\nfrom scipy.stats import skewnorm\nimport warnings\nwarnings.filterwarnings('ignore')","4a214246":"df = pd.read_csv(\"..\/input\/chennai-zomato-restaurants-data\/Zomato Chennai Listing 2020.csv\")\ndf.drop(['Zomato URL'],axis=1,inplace=True)\n# df.head()","7e5da739":"print(len(df[(df['Delivery Rating'] != 'None') & (df['Dining Rating'] == 'None')]))\nprint(len(df[(df['Delivery Rating'] == 'None') & (df['Dining Rating'] != 'None')]))\nprint(len(df[(df['Delivery Rating'] == 'None') & (df['Dining Rating'] == 'None')]))\nprint(len(df[(df['Delivery Rating'] != 'None') & (df['Dining Rating'] != 'None')]))","780eedad":"#Cleaning location by including only the area\ndef clean_loc(text):\n    if len(text.split(\",\")) == 1:\n        val = text\n        return val\n    else:\n        val = text.split(\",\")[-1].replace(\" \",\"\",1)\n        return val\n\ndf['Location'] = df['Location'].apply(clean_loc)","14fb9d39":"#Creating a new column 'Cost Category'","fbea6a85":"df.shape","95e53629":"#converting the string values to list\ndf['Cuisine'] = df['Cuisine'].apply(lambda x:eval(x))\ndf['Features'] = df['Features'].apply(lambda x:eval(x))\ndf['Top Dishes'] = df['Top Dishes'].apply(lambda x:x.replace(\"Invalid\",\"[]\")) #Replacing 'Invalid' values with '[]'\ndf['Top Dishes'] = df['Top Dishes'].apply(lambda x:eval(x))","183c80a9":"df.head()","2dc6c21c":"df['Number Of Features'] = df['Features'].apply(lambda x:len(x))","ae14b024":"df['Dining Rating'] = df['Dining Rating'].astype(str)\ndf['Dining Rating Count'] = df['Dining Rating Count'].astype(str)\ndf['Delivery Rating'] = df['Delivery Rating'].astype(str)\ndf['Delivery Rating Count'] = df['Delivery Rating Count'].astype(str)","9a3fb074":"len(df[df['Delivery Rating'] == 'None'])","d627f0d8":"# Value 0 indicates the Restaurants that does not offer Delivery or Dining\ndf['Delivery Rating'] = np.where(((df['Delivery Rating'] == 'None') & (df['Delivery Rating Count'] == 'Does not offer Delivery')), '0', df['Delivery Rating'])\ndf['Delivery Rating Count'] = np.where(((df['Delivery Rating'] == '0') & (df['Delivery Rating Count'] == 'Does not offer Delivery')), '0', df['Delivery Rating Count'])\ndf['Dining Rating'] = np.where(((df['Dining Rating'] == 'None') & (df['Dining Rating Count'] == 'Does not offer Dining')), '0', df['Dining Rating'])\ndf['Dining Rating Count'] = np.where(((df['Dining Rating'] == '0') & (df['Dining Rating Count'] == 'Does not offer Dining')), '0', df['Dining Rating Count'])\n","92359e08":"len(df[df['Delivery Rating'] == 'None'])","b4fb1af8":"#Value -1 indicates that restaurants does not have enough Delivery or dining reviews\ndf['Delivery Rating'] = np.where(((df['Delivery Rating'] == 'None') & (df['Delivery Rating Count'] == 'Not enough Delivery Reviews')), '-1', df['Delivery Rating'])\ndf['Delivery Rating Count'] = np.where(((df['Delivery Rating'] == '-1') & (df['Delivery Rating Count'] == 'Not enough Delivery Reviews')), '-1', df['Delivery Rating Count'])\ndf['Dining Rating'] = np.where(((df['Dining Rating'] == 'None') & (df['Dining Rating Count'] == 'Not enough Dining Reviews')), '-1', df['Dining Rating'])\ndf['Dining Rating Count'] = np.where(((df['Dining Rating'] == '-1') & (df['Dining Rating Count'] == 'Not enough Dining Reviews')), '-1', df['Dining Rating Count'])\n","9b4dee73":"len(df[df['Dining Rating'] == 'None'])","4f1786bd":"#Value -2 indicates that restaurants support Home Delivery only and they dont have enough reviews\n# df['Delivery Rating'] = np.where(((df['Delivery Rating'] == 'None') & (('Delivery Only' in df['Features'][0]) | ('Home Delivery' in df['Features'][0])), '-2', df['Delivery Rating'])\ndf['Delivery Rating'] = df['Delivery Rating'].replace(\"None\",'-2')\ndf['Delivery Rating Count'] = df['Delivery Rating Count'].replace(\"None\",'-2')\ndf['Dining Rating'] = df['Dining Rating'].replace(\"None\",'-2')\ndf['Dining Rating Count'] = df['Dining Rating Count'].replace(\"None\",'-2')","b1e95031":"len(df[df['Dining Rating'] == 'None'])","d688890e":"df['Dining Rating'] = df['Dining Rating'].apply(pd.to_numeric)\ndf['Dining Rating Count'] = df['Dining Rating Count'].apply(pd.to_numeric)\ndf['Delivery Rating'] = df['Delivery Rating'].apply(pd.to_numeric)\ndf['Delivery Rating Count'] = df['Delivery Rating Count'].apply(pd.to_numeric)","aa7383f4":"print(df['Dining Rating'].min(),df['Dining Rating'].mean(),df['Dining Rating'].max())\nprint(df['Delivery Rating'].min(),df['Delivery Rating'].mean(),df['Delivery Rating'].max())","e6fa1c5f":"#Creating a Dataframe which contains values that are greater than 0 in numeric columns\ndf_clean = df[(~df['Delivery Rating'].isin([0,-1,-2])) & (~df['Dining Rating'].isin([0,-1,-2])) & (~df['Delivery Rating Count'].isin([0,-1,-2])) & (~df['Dining Rating Count'].isin([0,-1,-2]))]\n# df_not_none = df_not_none[['Delivery Rating','Dining Rating','Delivery Rating Count','Dining Rating Count']]\ndf_clean.head()","49b64ed8":"len(df_clean)","d1ef835d":"#Restaurants that have Dining rating greater than 4.5\ntop_dine = df_clean[(df_clean['Dining Rating'] > 4.5)]\nlen(top_dine)\n#Grouping the Restaurants according to the Location and their Rating\nvis = top_dine.groupby(['Location','Dining Rating']).size().reset_index()\n#Listing only those Locations that have multiple restaurants with rating > 4.5\ndata = vis[vis[0] >= 2]\ndata\n# sns.countplot(x=0,hue='Location',data=data)","486e6095":"#Bar Plot that shows which location has multiple restaurants along with their ratings\nplt.figure(figsize=(8,5))\nsns.set(style=\"whitegrid\")\nsns.barplot(x = 'Location',y = 0 ,hue = 'Dining Rating',data = data,palette='muted')\nplt.xticks(rotation = 90)\nplt.ylabel(\"Count\")\n# plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nplt.legend(title=\"Ratings\",loc=1, fontsize='small', fancybox=True)","5593eafb":"#Gathering data for top cuisines,dishes and features for the entire dataset\n\ndef make_dict(column,dataframe):\n    data_dict = {}\n    for all_val in dataframe[column]:\n        for val in all_val:\n            if val.strip(\" \") not in data_dict:\n                data_dict[val.strip(\" \")] = 1\n            else:\n                data_dict[val.strip(\" \")] += 1\n                \n    data_dict = dict(sorted(data_dict.items(),key = lambda k:k[1],reverse=True))\n#     df = pd.DataFrame.from_dict(data_dict,orient='index',columns=['Count'])\n    df = pd.DataFrame.from_dict(data_dict,orient='index',columns=['Count']).reset_index()\n    \n    return data_dict,df\n\ntop_dishes,top_dishes_df = make_dict('Top Dishes',df)\ntop_cuisines,top_cuisines_df = make_dict('Cuisine',df)\ntop_features,top_features_df = make_dict('Features',df)\n# print(dict(itertools.islice(top_dishes.items(), 20)))\n# print(top_dishes_df.head())\n\ntop_dishes_df.head()","8fab8559":"print(f\"Mininmum Price for meal {df_clean['Price for 2'].min()}\")\nprint(f\"Average Price for meal {df_clean['Price for 2'].mean()}\")\nprint(f\"Maximum Price for meal {df_clean['Price for 2'].max()}\")","f4f493cd":"#Number of people who dined and ordered from restaurants (here people who ordered or dined multiple times is also included)\n#For the entire Dataset\nnum_dined = df['Dining Rating Count'].sum()\nnum_delivery = df['Delivery Rating Count'].sum()\nprint(f\"Number of people Dined {num_dined}\")\nprint(f\"Number of people ordered {num_delivery}\")","c28c330c":"#Number of people who dined and ordered from restaurants (here people who ordered or dined multiple times is also included)\nnum_dined = df_clean['Dining Rating Count'].sum()\nnum_delivery = df_clean['Delivery Rating Count'].sum()\nprint(f\"Number of people Dined {num_dined}\")\nprint(f\"Number of people ordered {num_delivery}\")","807cde2c":"#Gathering data for top cuisines,dishes and features in the trimmed data set\ntop_dishes,top_dishes_df = make_dict('Top Dishes',df_clean)\ntop_cuisines,top_cuisines_df = make_dict('Cuisine',df_clean)\ntop_features,top_features_df = make_dict('Features',df_clean)\ntop_dishes_df = top_dishes_df.head(10)\ntop_cuisines_df = top_cuisines_df.head(10)\ntop_features_df = top_features_df.head(10)\n# top_dishes_df\n","a10efc78":"fig, axes = plt.subplots(1,3 , figsize=(18, 8))\nsns.set_palette(palette='husl',n_colors=10)\nfig.suptitle(\"Top 10 Dishes,Cuisines and Featuresin Chennai's Restaurant\")\nfor ax in axes:\n    ax.tick_params(labelrotation=90)\nsns.barplot(ax=axes[0],x=top_dishes_df['index'],y=top_dishes_df['Count'])\naxes[0].set_xlabel(\"Dishes\")\nsns.barplot(ax=axes[1],x=top_cuisines_df['index'],y=top_cuisines_df['Count'])\naxes[1].set_xlabel(\"Cuisines\")\nsns.barplot(ax=axes[2],x=top_features_df['index'],y=top_features_df['Count'])\naxes[2].set_xlabel(\"Features\")\n# plt.title(\"\")\n","469a05e5":"pie, ax = plt.subplots(figsize=[10,6])\nlabels = top_dishes_df['index']\nplt.pie(x=top_dishes_df['Count'], autopct=\"%.1f%%\", labels=labels, pctdistance=0.5)\nplt.title(\"Delivery Tips by type\", fontsize=14);","fdacb3bf":"#Lets see how many restaurants offer food that costs lower than average \nlower_than_avg = len(df_clean[df_clean['Price for 2'] < df_clean['Price for 2'].mean()])\nhigher_than_avg = len(df_clean[df_clean['Price for 2'] > df_clean['Price for 2'].mean()])\nprint(f\"{lower_than_avg} restaurants offer food that costs less than {df_clean['Price for 2'].mean()}\")\nprint(f\"{higher_than_avg} restaurants offer food that costs more than {df_clean['Price for 2'].mean()}\")","684274e1":"#Lets see how many restaurants has ratingg above 4.5 and their cost for 2 person is below average\ndf_clean[(df_clean['Price for 2'] < df_clean['Price for 2'].mean()) & (df_clean['Dining Rating'] > 4.5)]","350bae0d":"fig, axes = plt.subplots(2, 2, figsize=(15, 8))\nfig.suptitle('Showing Various Distributions')\n# axes[0].set_title()\nsns.scatterplot(ax=axes[0,0],x=\"Delivery Rating\",y=\"Delivery Rating Count\",data=df_clean)\nsns.scatterplot(ax=axes[0,1],x=\"Dining Rating\",y=\"Dining Rating Count\",data=df_clean)\nsns.distplot(df_clean['Delivery Rating'],fit=skewnorm,kde=False,ax=axes[1,0])\nsns.distplot(df_clean['Dining Rating'],fit=skewnorm,kde=False,ax=axes[1,1]) ","0ad40690":"sns.distplot(df_clean['Price for 2']) ","7c0e6757":"grouped_price = df_clean.groupby(['Price for 2']).size().reset_index()\nsns.barplot(x=grouped_price['Price for 2'],y=grouped_price[0])\nplt.xticks(rotation=90) \nplt.title(\"\")","8b935f11":"sns.heatmap(df_clean.corr(), annot = True, fmt='.1g')","a790be99":"#Lets separate the price between cheap, moderate and expensive\ndef categorize_prices(val):\n#     for val in df[column]:\n        if val <= 350:\n            return 'Cheap'\n        elif (val > 350) & (val <= 550):\n            return 'Average'\n        else:\n            return 'Expensive'\n\ndf_clean['Price Category'] = df_clean['Price for 2'].apply(categorize_prices)","212a2e92":"df_clean.groupby(['Price Category']).sum()","ba312031":"price_cat_dining = df_clean.groupby(['Price Category','Dining Rating']).size().reset_index()\nprice_cat_dining = price_cat_dining[price_cat_dining['Dining Rating'] > 3.0]\nplt.figure(figsize=(12,8))\nsns.barplot(x=price_cat_dining['Dining Rating'],y=price_cat_dining[0],hue=price_cat_dining['Price Category'],palette='husl')\nplt.ylabel(\"Count\")","7d851346":"price_cat_dining.head()","a57ff396":"price_cat_delivery = df_clean.groupby(['Price Category','Delivery Rating']).size().reset_index()\nprice_cat_delivery = price_cat_delivery[price_cat_delivery['Delivery Rating'] > 3.0]\nplt.figure(figsize=(12,8))\nsns.barplot(x=price_cat_delivery['Delivery Rating'],y=price_cat_delivery[0],hue=price_cat_delivery['Price Category'],palette='husl')\nplt.ylabel(\"Count\")","aabfe99a":"group_name = df_clean.groupby(['Name of Restaurant']).size().reset_index()\ngroup_name = group_name[group_name[0] > 10]\ngroup_name.head()","f0b3cf3c":"group_name = df_clean.groupby(['Name of Restaurant','Price Category','Delivery Rating']).size().reset_index()\ngroup_name[group_name[0]>10]","208cc81d":"#Lets create a column that is the sum of both dining rating count and delivery rating counts\ndf_clean['Total Rating Count'] = df_clean['Dining Rating Count'] + df_clean['Delivery Rating Count']","ec70704f":"df_clean.head()","8652e7bd":"#Lets see which restaurant attracts most customers  \ntop_restaurants = df_clean.groupby(['Name of Restaurant'])['Total Rating Count'].agg(['sum','count']).reset_index()\ntop_restaurants.sort_values(by='sum',ascending=False).head()\n# top_restaurants.head()","e843c164":"#Which are the areas where the most orders are received\ntop_restaurants_location = df_clean.groupby(['Location'])['Total Rating Count'].agg(['sum','count']).reset_index()\n# top_restaurants[top_restaurants['count'] > 10]\ntop_restaurants_location.sort_values(by='count',ascending=False).head()","d8a72db8":"# top_dine.boxplot(by='Location',column=['Dining Rating Count'],grid=False)\n# plt.xticks(rotation = 90)\n# plt.ylabel(\"Count\")\n# plt.title(\"\")","51ae727b":"# ****Creating a dataset that have both dining and delivery reviews","905ce6c9":"**IF WE FOCUS ON THE DATASET THAT HAS BOTH DINING AND DELIVERY REVIEWS, WE FOUND THAT THE NUMBER OF REVIEWS IN THE ORIGINAL DATASET ARE SLIGHTLY HIGHER**"}}