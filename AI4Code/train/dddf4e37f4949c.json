{"cell_type":{"2bd7bfae":"code","641f9a05":"code","35dd9867":"code","2ded42f7":"code","e4089430":"code","aac611bf":"code","53c88335":"code","00091a9a":"code","ee6eb368":"code","1e5798d8":"code","795d43c4":"code","307bf46b":"code","43d96fc2":"code","7b151a24":"code","4dd350c1":"code","bc8b6f68":"code","d6155be2":"markdown","fa4eb209":"markdown","1f5493b9":"markdown","544dad02":"markdown","f08e6a78":"markdown","8d677ee6":"markdown","278ee4ac":"markdown","30b850d2":"markdown","defbedf6":"markdown","3622aea2":"markdown","d3359a50":"markdown","cde78e2c":"markdown","3673f8ad":"markdown","49385636":"markdown","07aeb854":"markdown","b448f793":"markdown","7754cbc3":"markdown","e082425c":"markdown","4696b496":"markdown"},"source":{"2bd7bfae":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n%config InlineBackend.figure_format='svg'\n%matplotlib inline ","641f9a05":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.tree import plot_tree","35dd9867":"df = pd.read_csv('..\/input\/tv-power-consumption-data\/Q3-data.csv')\ndf.head()","2ded42f7":"df[['TV', 'Agg']].describe()","e4089430":"df['House'].value_counts()","aac611bf":"df.isnull().sum()","53c88335":"px.scatter(df, \n           x='Time', \n           y='TV',                   \n           color=df['House'].astype(str),\n           facet_row='House', \n           render_mode='svg', \n           labels={'TV': 'TV consumption', 'color': 'House'}, \n           title='TV consumption across time')","00091a9a":"is_on = ( ((df['TV'] > 15) & (df['House'] == 1)) |\n    ((df['TV'] > 50) & (df['House'] == 2)) |\n    ((df['TV'] > 40) & (df['House'] == 3)) ).apply(int)\ndf = df.assign(ON=is_on)\ndf.head()","ee6eb368":"px.scatter(df, \n           x='Time', \n           y='TV', \n           color=df['ON'].astype(str), \n           color_discrete_sequence=['Black', 'Green'], \n           facet_row='House', \n           render_mode='svg', \n           labels={'TV': 'TV consumption'}, \n           title='TV consumption across time')","1e5798d8":"px.line(df, \n        x='Time', \n        y='Agg', \n        color='House', \n        facet_row='House', \n        render_mode='svg', \n        labels={'Agg': 'Consumption'}, \n        title='Aggregate consumption across time')","795d43c4":"df_no_outliers = df[(df['Agg'] < 900)]\npx.line(df_no_outliers, \n        x='Time', \n        y=['Agg','TV'], \n        facet_row='House', \n        render_mode='svg', \n        labels={'value': 'Consumption'}, \n        title='Aggregate and TV consumption across time')","307bf46b":"X = df.drop(['ON', 'Time'], axis = 1)\ny = df['ON']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, shuffle = True, random_state = 1)","43d96fc2":"forest = DecisionTreeClassifier(random_state=1, criterion='entropy')\nforest.fit(X_train, y_train)","7b151a24":"print(forest.score(X_test, y_test))\n\ny_pred = forest.predict(X_test)\nconfusion_matrix(y_pred, y_test)","4dd350c1":"result = forest.predict(X)\npx.scatter(df, \n           x='Time', \n           y='TV', \n           color=result.astype(str), \n           color_discrete_sequence=['Black', 'Green'],\n           facet_row='House', \n           render_mode='svg', \n           labels={'TV': 'TV consumption', 'color': 'TV State'}, \n           title='TV consumption across time')","bc8b6f68":"plt.figure(figsize=(20,7))\nplot_tree(forest, \n          feature_names=X.columns, \n          class_names=['ON', 'OFF'], \n          proportion=True, \n          filled = True)\nplt.show()","d6155be2":"With these values, a new column, which indicates when a TV is `ON` or `OFF` can be add to the dataframe.","fa4eb209":"# Training the classifier","1f5493b9":"Since the data were previously well classified at well-defined intervals, a simple Decision Tree Classifier can be used.","544dad02":"With the target variable set a classifier machine learning algorithm can be trained. First the data is split in train and test sets.","f08e6a78":"# Identifying when the TVs are ON","8d677ee6":"This chart, however, has some very high peaks of power consumption, which makes it difficult to visualize. Next a new graph like this one is shown, but this time without these peaks and with the addition of the TV consumption.","278ee4ac":"A quick check for null data is done. None are found.","30b850d2":"# Loading and inspecting data","defbedf6":"# Importing libraries","3622aea2":"The graph below shows the model predictions with all the data. It can be tell that the model did a good job.","d3359a50":"as can be seen, the data has 4 columns, all numeric. A statistical description of the columns `TV` and `Agg` are given below","cde78e2c":"The next cell shows how much sample data was taken from each house. As can be seen, 1440 samples were taken from each house.","3673f8ad":"# TV Power Consumption Analysis","49385636":"To finish, the following graph shows what was learned by the classifier, and how it separated the data. It is noticed that the model only used the columns `TV` and `house`, which is in accordance with the problem.","07aeb854":"The graph below shows the result of the separation of the data between the states `ON` and `OFF`.","b448f793":"The graph below shows the TV energy consumption in each house. It is possible to see some peaks, in which consumption increases. It can then be said that it is in those moments when the TV is on. From this graph it is also possible to see that the TV in house number 1 has the lowest energy consumption, while number 2 has the highest. It is also possible to notice that these two TVs have a stabilized consumption compared to number 3.\n\nThrough this graph it is possible to establish a TV power consumption value for each house, in order to designate when a TV is on or off (consumption below this value will be considered `OFF` and above it `ON`):\n* For TV 1 the chosen value was 15.\n* For TV 2 the chosen value was 50.\n* For TV 3 the chosen value was 40.","7754cbc3":"First the data is loaded","e082425c":"A quick view on aggregate consumption is shown below.","4696b496":"The accuracy and confusion matrix of the created classifier is shown below. As can be seen the model didn't had no difficulty in learning and obtained a 100% correct rate at the test set."}}