{"cell_type":{"e9fc8060":"code","ee2ace4b":"code","9b6a6a60":"code","5340d0da":"code","73dd2ecf":"code","3f593437":"code","cff54773":"markdown","c42da881":"markdown","a1fab95f":"markdown","69afd4cc":"markdown"},"source":{"e9fc8060":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport os\nimport gc #garbage collection\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # plotting\nfrom datetime import datetime, timedelta, date # handling dates\nfrom tqdm.notebook import tqdm # progress bars\n\n# LightGBM\nimport lightgbm as lgb\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# Do not truncate view when max_cols is exceeded\n# ref: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.set_option.html\npd.set_option('display.max_columns', 50) \n\n# Path to Data Folder\nKAGGLE_DATA_FOLDER = '\/kaggle\/input\/m5-forecasting-accuracy'\n\n# Paths to Models per Category\nPATH_TO_CAT0=\"\/kaggle\/input\/models-per-cat-with-sale\/model_cat0_v10.lgb\"\nPATH_TO_CAT1=\"\/kaggle\/input\/models-per-cat-with-sale\/model_cat1_v10.lgb\"\nPATH_TO_CAT2=\"\/kaggle\/input\/models-per-cat-with-sale\/model_cat2_v10.lgb\"\n\n# Path to Model over All Categories\nPATH_SINGLE_MODEL = \"\/kaggle\/input\/lgbmindividualbestsubmission\/model_v13_param_tuning.lgb\"\n","ee2ace4b":"model_all = lgb.Booster(model_file = PATH_SINGLE_MODEL)\nmodel_cat0 = lgb.Booster(model_file = PATH_TO_CAT0)  # Hobbies\nmodel_cat1 = lgb.Booster(model_file = PATH_TO_CAT1)  # Household\nmodel_cat2 = lgb.Booster(model_file = PATH_TO_CAT2)  # Foods\ncat_models = [model_cat0, model_cat1, model_cat2]\nmodel_names = ['hobby','household', 'food']","9b6a6a60":"plt.rcParams['figure.figsize'] = (18.0, 4)\n%matplotlib inline \n\nfor category, cat_name in enumerate(model_names):\n    fig, ax = plt.subplots(figsize=(12,8))\n    lgb.plot_importance(cat_models[category], max_num_features=50, height=0.8, ax=ax)\n    ax.grid(False)\n    plt.title(f\"Feature importance (#splits) for {cat_name} products\", fontsize=15)\n    plt.show()","5340d0da":"plt.rcParams['figure.figsize'] = (18.0, 4)\n%matplotlib inline \n\nfor category, cat_name in enumerate(model_names):\n    fig, ax = plt.subplots(figsize=(12,8))\n    lgb.plot_importance(cat_models[category], max_num_features=50, height=0.8, ax=ax, importance_type='gain')\n    ax.grid(False)\n    plt.title(f\"Feature importance (total gain) for {cat_name} products\", fontsize=15)\n    plt.show()","73dd2ecf":"plt.rcParams['figure.figsize'] = (18.0, 4)\n%matplotlib inline \n\nfig, ax = plt.subplots(figsize=(12,8))\nlgb.plot_importance(model_all, max_num_features=50, height=0.8, ax=ax)\nax.grid(False)\nplt.title(f\"Feature importance (#splits)\", fontsize=15)\nplt.show()","3f593437":"fig, ax = plt.subplots(figsize=(12,8))\nlgb.plot_importance(model_all, max_num_features=50, height=0.8, ax=ax, importance_type='gain')\nax.grid(False)\nplt.title(f\"Feature importance (total gain)\", fontsize=15)\nplt.show()","cff54773":"## Feature importance in terms of gain","c42da881":"# Feature importance for product categories","a1fab95f":"## Feature Importance in terms of splits","69afd4cc":"## Feature importances for single model\n"}}