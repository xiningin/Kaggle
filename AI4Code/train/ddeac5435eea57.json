{"cell_type":{"d60f1f4e":"code","37021734":"code","a7e31c8e":"code","1418e9e1":"code","c3928c6b":"code","f717b689":"code","92aa8388":"code","c94b4ea3":"code","b6f2e3f1":"code","2a7ca65d":"code","af4e1ca6":"code","1566b0bd":"code","9fa89735":"code","714999c0":"code","9da18b08":"code","cca8d714":"code","729e158f":"code","72d4ddbf":"code","cb4bac7b":"code","bed58c44":"code","db55a695":"code","f6c5f9b8":"code","9e9a5a74":"code","a73a7ac1":"code","9c802d3d":"code","ae14d2a2":"code","5f53e288":"code","7208e313":"code","559033b5":"code","e7f584da":"code","6d232e61":"code","0167f6e8":"code","81cb4a22":"code","60dfdfce":"code","5586beba":"code","8bc9abfc":"code","2d46693e":"code","e6d4d517":"code","6d7c289f":"code","ba134423":"code","1d9da558":"code","2d55fae0":"code","1ab22402":"code","d3b83472":"code","2668706f":"code","624ac642":"code","accc2b84":"code","898cb07b":"code","332d977e":"code","dc4d4830":"code","34c1028b":"code","028a78ef":"code","38a07f33":"code","b222b492":"markdown","327a1b45":"markdown","a2e129ed":"markdown","cb171716":"markdown","42a6c611":"markdown","4f3e8080":"markdown","a5f2084f":"markdown","7bbc0e6f":"markdown","11455542":"markdown","4660214b":"markdown","32a88183":"markdown","3e208b88":"markdown","ead9fe22":"markdown","0ec26e61":"markdown","dffba7a0":"markdown","a8209f41":"markdown","99ab4732":"markdown","d2ec4deb":"markdown","dd0b284f":"markdown"},"source":{"d60f1f4e":"import pandas as pd","37021734":"X = pd.read_csv('..\/input\/dataset-2zip\/[Dataset] \uc791\uc5c5\ud615 \uc81c2\uc720\ud615\/X_train.csv',encoding=\"euc-kr\")\ny = pd.read_csv('..\/input\/dataset-2zip\/[Dataset] \uc791\uc5c5\ud615 \uc81c2\uc720\ud615\/y_train.csv')\ntest = pd.read_csv('..\/input\/dataset-2zip\/[Dataset] \uc791\uc5c5\ud615 \uc81c2\uc720\ud615\/X_test.csv',encoding=\"euc-kr\")","a7e31c8e":"# shape\nprint(X.shape, y.shape, test.shape)","1418e9e1":"# \ub370\uc774\ud130 \ud655\uc778\nprint('X_train:\\n', X.head())\nprint('\\n','y_train:\\n', y.head())\nprint('\\n','X_test:\\n', test.head())","c3928c6b":"# \uacb0\uce21\uce58\nprint(X.isnull().sum())  # '\ud658\ubd88\uae08\uc561' \uc5d0\ub9cc \uacb0\uce21\uce58 \uc788\uc74c","f717b689":"print(y.isnull().sum())","92aa8388":"print(test.isnull().sum())  # '\ud658\ubd88\uae08\uc561' \uc5d0\ub9cc \uacb0\uce21\uce58 \uc788\uc74c","c94b4ea3":"# \uceec\ub7fc\ubcc4 \ub370\uc774\ud130 \uc720\ud615 \ud655\uc778\nX.info()","b6f2e3f1":"y.info()","2a7ca65d":"test.info()","af4e1ca6":"# \uae30\ucd08\ud1b5\uacc4\nX.describe()","1566b0bd":"X.describe(include='object')","9fa89735":"test.describe()","714999c0":"test.describe(include='object')","9da18b08":"# \uacb0\uce21\uac12 \ucc44\uc6b0\uae30\nX['\ud658\ubd88\uae08\uc561'] = X['\ud658\ubd88\uae08\uc561'].fillna(0)\nX.isnull().sum()","cca8d714":"test['\ud658\ubd88\uae08\uc561'] = test['\ud658\ubd88\uae08\uc561'].fillna(0)\ntest.isnull().sum()","729e158f":"# \ud6c8\ub828\uc5d0 \ubd88\ud544\uc694\ud55c \ub370\uc774\ud130 \uc0ad\uc81c\nX = X.drop(['cust_id'], axis=1)   # \ud6c8\ub828\ub370\uc774\ud130\uc758 cust_id \uc0ad\uc81c\ncust_id = test.pop('cust_id')     # \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc758 cust_id\ub294 \ub098\uc911\uc5d0 \ud544\uc694\ud558\ub2c8\uae4c, \ubcc4\ub3c4\uc800\uc7a5\ud83d\udca5","72d4ddbf":"# Label Encoding (\ubc94\uc8fc\ud615 \ub370\uc774\ud130 \ub808\uc774\ube14 \uc778\ucf54\ub529)\nfrom sklearn.preprocessing import LabelEncoder\ncols = ['\uc8fc\uad6c\ub9e4\uc0c1\ud488', '\uc8fc\uad6c\ub9e4\uc9c0\uc810']\nfor col in cols:\n    le = LabelEncoder()\n    X[col] = le.fit_transform(X[col])\n    test[col] = le.fit_transform(test[col])\n\n# \ubc94\uc8fc\ud615 \ub370\uc774\ud130\uac00 \uc218\uce58\ud615\uc73c\ub85c \ubcc0\ud658\ub41c \uac83\uc744 \ud655\uc778\nprint(X.head())\nprint(test.head())","cb4bac7b":"from sklearn.ensemble import RandomForestClassifier\n\n# \ubaa8\ub378 \uc815\uc758\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=2022)\n\n# \ubaa8\ub378 \ud559\uc2b5\nmodel.fit(X, y['gender'])\nprint(model.score(X, y['gender']))","bed58c44":"# \ubaa8\ub378 \uc608\uce21\npred = model.predict_proba(test)   # \ud655\ub960\uc744 \uc608\uce21\ud558\ub294\uac70\ub2c8\uae4c proba\npred","db55a695":"# gender\uac00 \ub0a8\uc790(1)\uc77c \"\ud655\ub960\"\npred[:, 1]","f6c5f9b8":"# csv\uc5d0 \ub2f4\uc744 \uc815\ub2f5\uc744 \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \ub9cc\ub4e4\uae30\noutput = pd.DataFrame({'cust_id': cust_id, 'gender': pred[:,1]})\noutput","9e9a5a74":"# csv \uc0dd\uc131\noutput.to_csv('20211202.csv', index=False)","a73a7ac1":"# csv \ud655\uc778\npd.read_csv('20211202.csv')","9c802d3d":"#####  \uc2a4\ud06c\ub9bd\ud2b8 \ubc84\uc804_ try_01 #####\n\n# \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport pandas as pd\n# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\nX_train = pd.read_csv ('..\/input\/dataset-2zip\/[Dataset] \uc791\uc5c5\ud615 \uc81c2\uc720\ud615\/X_train.csv', encoding='euc-kr')  \ny_train = pd.read_csv ('..\/input\/dataset-2zip\/[Dataset] \uc791\uc5c5\ud615 \uc81c2\uc720\ud615\/y_train.csv')                     \nX_test = pd.read_csv('..\/input\/dataset-2zip\/[Dataset] \uc791\uc5c5\ud615 \uc81c2\uc720\ud615\/X_test.csv', encoding='euc-kr')     \n\n# EDA\n\n## \ub370\uc774\ud130\n# print(X_train.head())\n# print(y_train.head())\n# print(X_test.head())\n\n## shape\n# print(X_train.shape)   # (3500, 10)\n# print(y_train.shape)   # (3500, 2)\n# print(X_test.shape)    # (2482, 10)\n\n## \uacb0\uce21\uce58\n# print(X_train.isnull().sum())  # '\ud658\ubd88\uae08\uc561'\n# print(y_train.isnull().sum())  # Not null\n# print(X_test.isnull().sum())   # '\ud658\ubd88\uae08\uc561'\n\n## \ub370\uc774\ud130\uc720\ud615\n# print(X_train.info())  # \ubc94\uc8fc\ud615: '\uc8fc\uad6c\ub9e4\uc0c1\ud488', '\uc8fc\uad6c\ub9e4\uc9c0\uc810'\n# print(y_train.info())  # 'cust_id', 'gender'\n# print(X_test.info())   # \ubc94\uc8fc\ud615: '\uc8fc\uad6c\ub9e4\uc0c1\ud488', '\uc8fc\uad6c\ub9e4\uc9c0\uc810'\n\n## \uae30\ucd08\ud1b5\uacc4\n# print(X_train.describe())\n# print(X_train.describe(include='object'))\n# print(X_test.describe())\n# print(X_test.describe(include='object'))\n\n## label \uac12\n# print(y_train['gender'].value_counts())\n\n\n# \ub370\uc774\ud130 \uc804\ucc98\ub9ac\n## \uacb0\uce21\uce58 \ucc44\uc6b0\uae30\nX_train['\ud658\ubd88\uae08\uc561'] = X_train['\ud658\ubd88\uae08\uc561'].fillna(0)\nX_test['\ud658\ubd88\uae08\uc561'] = X_test['\ud658\ubd88\uae08\uc561'].fillna(0)\n# print(X_train.isnull().sum())\n# print(X_test.isnull().sum())\n\n## \ud6c8\ub828\ub370\uc774\ud130\uc5d0\uc11c id \uc0ad\uc81c, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub294 pop\nX_train = X_train.drop(['cust_id'], axis=1)\ncust_id = X_test.pop('cust_id')\n# print(X_train.head())\n# print(cust_id)\n\n# Feature Egineering\n## \ubc94\uc8fc\ud615 \ub370\uc774\ud130\ub97c \uc218\uce58\ud615\uc73c\ub85c \ub808\uc774\ube14\ubcc0\ud658\nfrom sklearn.preprocessing import LabelEncoder\ncols = ['\uc8fc\uad6c\ub9e4\uc0c1\ud488', '\uc8fc\uad6c\ub9e4\uc9c0\uc810']\nfor col in cols:\n    le = LabelEncoder()\n    X_train[col] = le.fit_transform(X_train[col])\n    X_test[col] = le.fit_transform(X_test[col])\n\n# print(X_train.info())\n# print(X_test.info())\n\n# \ubaa8\ub378\ub9c1 & \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & \uc559\uc0c1\ube14\nfrom sklearn.ensemble import RandomForestClassifier\n## \ubaa8\ub378\uc815\uc758\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=2022)\n\n## \ubaa8\ub378\ud559\uc2b5\nmodel.fit(X_train, y_train['gender'])\nprint(model.score(X_train, y_train['gender']))\n\n## \uc608\uce21\npred = model.predict_proba(X_test)\nprint(pred)\nprint(\"gender\uac00 \ub0a8\uc790\uc77c \ud655\ub960: \", pred[:,1])\n\n## \ubaa8\ub378\ud3c9\uac00 \u2753\u2754\u2753\u2754\u2753\n\n# csv \uc0dd\uc131 & \ud655\uc778\noutput = pd.DataFrame({'cust_id':cust_id, 'gender': pred[:,1]})\n# print(output)\n\noutput.to_csv('20211202.csv', index=False)\nprint(pd.read_csv('20211202.csv'))\n\n# \uc81c\ucd9c","ae14d2a2":"#####  \uc2a4\ud06c\ub9bd\ud2b8 \ubc84\uc804_ try_02 #####\n# \ud83d\udc28 \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport pandas as pd\n\n# \ud83d\udc28 \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\nx_train = pd.read_csv('..\/input\/dataset-2zip\/[Dataset] \uc791\uc5c5\ud615 \uc81c2\uc720\ud615\/X_train.csv',encoding='euc-kr')\ny_train = pd.read_csv('..\/input\/dataset-2zip\/[Dataset] \uc791\uc5c5\ud615 \uc81c2\uc720\ud615\/y_train.csv')\nx_test = pd.read_csv('..\/input\/dataset-2zip\/[Dataset] \uc791\uc5c5\ud615 \uc81c2\uc720\ud615\/X_test.csv', encoding='euc-kr')\n\n# \ud83d\udc28 EDA\n## \ub370\uc774\ud130\n# print(x_train.head())\n# print(y_train.head())\n# print(x_test.head())\n\n## shape\n# print(x_train.shape)  # (3500, 10)\n# print(y_train.shape)  # (3500, 2)\n# print(x_test.shape)   # (2482, 10)\n\n## \uacb0\uce21\uce58\n# print(x_train.isnull().sum())  # '\ud658\ubd88\uae08\uc561' \uc5d0 \uacb0\uce21\uce58 \uc874\uc7ac\n# print(y_train.isnull().sum())  # Not null\n# print(x_test.isnull().sum())   # '\ud658\ubd88\uae08\uc561' \uc5d0 \uacb0\uce21\uce58 \uc874\uc7ac\n\n## \ub370\uc774\ud130\ud0c0\uc785\n# print(x_train.info())   # \ubc94\uc8fc\ud615: '\uc8fc\uad6c\ub9e4\uc0c1\ud488', '\uc8fc\uad6c\ub9e4\uc9c0\uc810'\n# print(y_train.info()) \n# print(x_test.info())    # \ubc94\uc8fc\ud615: '\uc8fc\uad6c\ub9e4\uc0c1\ud488', '\uc8fc\uad6c\ub9e4\uc9c0\uc810'\n\n## \uae30\ucd08\ud1b5\uacc4 & label \uac12\n# print(x_train.describe())\n# print(x_train.describe(include='object'))\n# print(x_test.describe())\n# print(x_test.describe(include='object'))\n# print(y_train['gender'].value_counts())  # \ud83d\udc9b\n\n# \ud83d\udc28 \uc804\ucc98\ub9ac\n## \uacb0\uce21\uac12 \ucc98\ub9ac\nx_train['\ud658\ubd88\uae08\uc561'] = x_train['\ud658\ubd88\uae08\uc561'].fillna(0)\nx_test['\ud658\ubd88\uae08\uc561'] = x_test['\ud658\ubd88\uae08\uc561'].fillna(0)\n# print(x_train.isnull().sum())\n# print(x_test.isnull().sum())\n\n## \ud6c8\ub828, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0\uc11c id \uceec\ub7fc \uc0ad\uc81c \ud83d\udc9b\nx_train = x_train.drop(['cust_id'], axis=1)\n# print(x_train.head())\ncust_id = x_test.pop('cust_id')\n# print(cust_id)\n\n# \ud83d\udc28 \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1\n## \ubc94\uc8fc\ud615 \ub370\uc774\ud130\ub97c \uc218\uce58\ud615\uc73c\ub85c \ub808\uc774\ube14 \uc778\ucf54\ub529\nfrom sklearn.preprocessing import LabelEncoder\ncols = ['\uc8fc\uad6c\ub9e4\uc0c1\ud488', '\uc8fc\uad6c\ub9e4\uc9c0\uc810']\n\nfor col in cols:\n    le = LabelEncoder()\n    x_train[col] = le.fit_transform(x_train[col])\n    x_test[col] = le.fit_transform(x_test[col])\n\n# print(x_train.info())\n# print(x_test.info())\n    \n    \n# \ud83d\udc28 \ubaa8\ub378\ub9c1 & \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & \uc559\uc0c1\ube14\nfrom sklearn.ensemble import RandomForestClassifier\n\n## \ubaa8\ub378 \uc815\uc758\nmodel = RandomForestClassifier ( n_estimators=100, max_depth= 5, random_state = 2022 )\n\n## \ubaa8\ub378 \ud559\uc2b5 \ud83d\udc9b\nmodel.fit(x_train, y_train['gender'])\nprint(model.score(x_train, y_train['gender']))\n\n## \uc608\uce21 \ud83d\udc9b\npred = model.predict_proba(x_test)\nprint('\uc608\uce21\uac12:\\n', pred)\nprint('gender\uac00 \ub0a8\uc790\uc77c \ud655\ub960: \\n', pred[:, 1])\n\n## \ubaa8\ub378 \ud3c9\uac00 \u2753\u2754\u2753\u2754\u2753\n\n# \ud83d\udc28 csv \uc0dd\uc131 \ubc0f \ud655\uc778\n## \uc815\ub2f5\uc744 \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \ub9cc\ub4e4\uae30\noutput = pd.DataFrame({'cust_id': cust_id, 'gender': pred[:,1]})\n# print(output)\n\n## csv \uc0dd\uc131 \ud83d\udc9b\noutput.to_csv('20211202.csv', index=False) \n\n## csv \ud655\uc778\nprint(pd.read_csv('20211202.csv'))","5f53e288":"# \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport pandas as pd","7208e313":"# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\npath = \"..\/input\/dataset-2zip\/[Dataset] \uc791\uc5c5\ud615 \uc81c2\uc720\ud615\/\"\nX = pd.read_csv(path + \"X_train.csv\", encoding=\"euc-kr\") # \uad6c\ub984 IDE\ud658\uacbd\uc5d0\uc11c\ub294 encoding=\"euc-kr\"\uac00 \uc5c6\uc5b4\ub3c4 \ub428\ny = pd.read_csv(path + \"y_train.csv\")\ntest = pd.read_csv(path + \"X_test.csv\", encoding=\"euc-kr\")","559033b5":"'''\n1. shape             df.shape\n2. head              df.head()\n3. \uacb0\uce21\uce58             df.isnull().sum()\n4. \uceec\ub7fc\ubcc4 \ub370\uc774\ud130 \uc720\ud615   df.info() \n5. \uae30\ucd08\ud1b5\uacc4            df.describe()  \/  df.desribe(include='object')\n6. label \uac12           df.value_counts()\n'''","e7f584da":"# EDA\nX.shape, y.shape, test.shape","6d232e61":"X.head()","0167f6e8":"y.head()","81cb4a22":"test.head()","60dfdfce":"# \uacb0\uce21\uce58 \ud655\uc778\nX.isnull().sum()   # '\ud658\ubd88\uae08\uc561'\uc5d0\ub9cc \uacb0\uce21\uce58 \uc788\uc74c","5586beba":"# X_train \ub370\uc774\ud130 \uae30\ucd08\ud1b5\uacc4 \nX.describe()","8bc9abfc":"X.describe(include='object')  # \ub370\uc774\ud130\ud0c0\uc785\uc774 object\uc778 \uceec\ub7fc\uc758 \uae30\ucd08\ud1b5\uacc4 \ud655\uc778","2d46693e":"test.isnull().sum()     # '\ud658\ubd88\uae08\uc561'\uc5d0\ub9cc \uacb0\uce21\uce58 \uc788\uc74c","e6d4d517":"# X_test \ub370\uc774\ud130 \uae30\ucd08\ud1b5\uacc4 \ntest.describe()","6d7c289f":"X.describe(include='object')","ba134423":"# label\uac12 \ud655\uc778 \ny['gender'].value_counts()","1d9da558":"# \uacb0\uce21\uce58\ucc98\ub9ac\nX = X.fillna(0)                  # '\ud658\ubd88\uae08\uc561' \uacb0\uce21\uce58\ub97c 0\uc73c\ub85c \ucc44\uc6b0\uae30\ntest = test.fillna(0)","2d55fae0":"X = X.drop(['cust_id'], axis=1)   # \ud559\uc2b5\uc5d0 \ud544\uc694\uc5c6\ub294 'cust_id' \uceec\ub7fc \uc0ad\uc81c\ncust_id = test.pop('cust_id')     # test\uc5d0\ub294 'cust_id'\uac00 \ud544\uc694\ud558\ub2c8\uae4c, \ub530\ub85c \uc800\uc7a5","1ab22402":"# Label Encoding (\ubc94\uc8fc\ud615 \ubcc0\uc218 \ub808\uc774\ube14\uc778\ucf54\ub529)\nfrom sklearn.preprocessing import LabelEncoder\n\ncols = ['\uc8fc\uad6c\ub9e4\uc0c1\ud488', '\uc8fc\uad6c\ub9e4\uc9c0\uc810']\n\nfor col in cols:\n    le = LabelEncoder()\n    X[col] = le.fit_transform(X[col])\n    test[col] = le.fit_transform(test[col])\n\nX.head()","d3b83472":"# \ubc94\uc8fc\ud615 \ub370\uc774\ud130\uac00 \uc218\uce58\ud615\uc73c\ub85c \ubcc0\ud658\ub41c \uac83\uc744 \ud655\uc778\nprint(X.info())  \nprint(test.info())","2668706f":"# \ubaa8\ub378\ub9c1 & \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & \uc559\uc0c1\ube14\nfrom sklearn.ensemble import RandomForestClassifier\n\n# \ubaa8\ub378 \uc815\uc758\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=2022)\n\n# \ubaa8\ub378 \ud559\uc2b5\nmodel.fit(X, y['gender'])\nprint(model.score(X, y['gender']))\n\n# \ubaa8\ub378 \uc608\uce21\npredictions = model.predict_proba(test)","624ac642":"predictions","accc2b84":"# gender\uac00 \ub0a8\uc790(1)\uc77c \ud655\ub960 => \ubaa8\ub4e0 \ud589, 1\ubc88\uc9f8 \uc5f4 (\ub450\ubc88\uc9f8 \uc5f4)\npredictions[:,1]","898cb07b":"# csv\uc0dd\uc131\noutput = pd.DataFrame({'cust_id': cust_id, 'gender': predictions[:,1]})","332d977e":"output.head()","dc4d4830":"output.to_csv(\"123456789.csv\", index=False)","34c1028b":"pd.read_csv(\"123456789.csv\")","028a78ef":"print(model.score(X,y['gender']))\nfrom sklearn.metrics import roc_auc_score\nprint(roc_auc_score(model.predict(X),y['gender']))","38a07f33":"# \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport pandas as pd\n# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\npath = \"..\/input\/dataset-2zip\/[Dataset] \uc791\uc5c5\ud615 \uc81c2\uc720\ud615\/\"\nX = pd.read_csv(path + \"X_train.csv\", encoding=\"euc-kr\") # \uad6c\ub984 IDE\ud658\uacbd\uc5d0\uc11c\ub294 encoding=\"euc-kr\"\uac00 \uc5c6\uc5b4\ub3c4 \ub428\ny = pd.read_csv(path + \"y_train.csv\")\ntest = pd.read_csv(path + \"X_test.csv\", encoding=\"euc-kr\")\n\n\n# EDA\nprint(X_train.shape, y_train.shape, X_test.shape)\nprint(X_train.head())\nprint(y_train.head())\nprint(X_test.head())\n\n# print(X_train.isnull().sum())   # \uacb0\uce21\uce58 \ud655\uc778 ('\ud658\ubd88\uae08\uc561'\uc5d0\ub9cc \uacb0\uce21\uce58 \uc788\uc74c)\n# print(X_test.isnull().sum())    # \uacb0\uce21\uce58 \ud655\uc778 ('\ud658\ubd88\uae08\uc561'\uc5d0\ub9cc \uacb0\uce21\uce58 \uc788\uc74c)\nprint(X_train.info())\n\n# \ub370\uc774\ud130 \uc804\ucc98\ub9ac\nX_train = X_train.fillna(0)       # '\ud658\ubd88\uae08\uc561' \uacb0\uce21\uce58\ub97c 0\uc73c\ub85c \ucc44\uc6b0\uae30\nX_test = X_test.fillna(0)         # '\ud658\ubd88\uae08\uc561' \uacb0\uce21\uce58\ub97c 0\uc73c\ub85c \ucc44\uc6b0\uae30\n\nX_train = X_train.drop(['cust_id'], axis=1) # \ud559\uc2b5\uc5d0 \ud544\uc694\uc5c6\ub294 'cust_id' \uceec\ub7fc \uc0ad\uc81c\ncust_id = X_test.pop('cust_id')             # test\uc5d0\ub294 'cust_id'\uac00 \ud544\uc694\ud558\ub2c8\uae4c, \ub530\ub85c \uc800\uc7a5\nprint(cust_id)\n\n# \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1\n## Label Encoding ( \ubc94\uc8fc\ud615 \ubcc0\uc218 \ub808\uc774\ube14 \uc778\ucf54\ub529 )\nfrom sklearn.preprocessing import LabelEncoder\ncols = ['\uc8fc\uad6c\ub9e4\uc0c1\ud488', '\uc8fc\uad6c\ub9e4\uc9c0\uc810']\nfor col in cols:\n\tle = LabelEncoder()\n\tX_train[col] = le.fit_transform(X_train[col])\n\tX_test[col] = le.fit_transform(X_test[col])\n\nprint(X_train.head())\nprint(X_train.info())  # \ubc94\uc8fc\ud615(object) \ub370\uc774\ud130\ud0c0\uc785\uc774 \uc218\uce58\ud615(int)\uc73c\ub85c \ubcc0\ud658\ub41c \uac83\uc744 \ud655\uc778\n\n# \ubaa8\ub378\ub9c1 & \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & \uc559\uc0c1\ube14\nfrom sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=2022)\nmodel.fit(X_train, y_train['gender'])\npred = model.predict_proba(X_test)\n\nprint(pred)\nprint(pred[:, 1])   # \ubaa8\ub4e0 \ud589, 1\ubc88\uc9f8 \uc5f4 (\ub450\ubc88\uc9f8 \uc5f4) => gender\uac00 \ub0a8\uc790(1)\uc77c \ud655\ub960\n\n# csv\noutput = pd.DataFrame({'cust_id':cust_id, 'gender': pred[:, 1]})\nprint(output)\n\noutput.to_csv('201002383.csv', index=False)\n\n# \ucc44\uc810\nimport pickle\nimport numpy as np\nfrom sklearn.metrics import roc_auc_score\n\nwith open(\"..\/input\/hr-data\/answer.pickle\", \"rb\") as file:\n\tans = pickle.load(file)\n\tans = pd.DataFrame(ans)\nprint(roc_auc_score(ans['target'], pred))\n","b222b492":"### \ubc31\ud654\uc810 \uace0\uac1d\uc758 1\ub144 \uac04 \uad6c\ub9e4 \ub370\uc774\ud130\ub97c \ud65c\uc6a9\ud574\n- \ub370\uc774\ud130 \uc804\ucc98\ub9ac\n- Feature Engineering\n- \ubaa8\ub378\ub9c1 (\ubd84\ub958 \uc54c\uace0\ub9ac\uc998 \uc0ac\uc6a9)\n- \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd (\ucd08\ub9e4\uac1c\ubcc0\uc218 \ucd5c\uc801\ud654)\n- \ubaa8\ud615 \uc559\uc0c1\ube14\n- csv\uc81c\ucd9c\n\n### \uc720\uc758\uc0ac\ud56d\n- \uc218\ud5d8\ubc88\ud638.csv \ud30c\uc77c\uc774 \ub9cc\ub4e4\uc5b4\uc9c0\ub3c4\ub85d \ucf54\ub4dc\ub97c \uc81c\ucd9c\ud568\n- \uc81c\ucd9c\ud55c \ubaa8\ub378\uc758 \uc131\ub2a5\uc740 ROC-AUC \ud3c9\uac00\uc9c0\ud45c\uc5d0 \ub530\ub77c \ucc44\uc810\ud568\n\n### \ub370\uc774\ud130 \ucd9c\ucc98 \ubc0f \uc5f0\uacb0\n- data \ucd9c\ucc98: https:\/\/www.dataq.or.kr\/ - \uacf5\uc9c0\uc0ac\ud56d - 759\ubc88 \uc81c2\ud68c \ube45\ub370\uc774\ud130\ubd84\uc11d\uae30\uc0ac \uc2e4\uae30 \uc548\ub0b4 - \ucca8\ubd80\ud30c\uc77c\n\n### \ub370\uc774\ud130\uc14b \uc5c5\ub85c\ub4dc\n- \ub370\uc774\ud130\uc14b \ud504\ub77c\uc774\ube57 \uc5c5\ub85c\ub4dc : https:\/\/youtu.be\/BZlEQ5JwLiA\n    - Datasets - new dataset - (drag&drop) - Create \/ \ubc18\ub4dc\uc2dc Private\n- \u110c\u1161\u11a8\u110b\u1165\u11b8\u1112\u1167\u11bc2 \u110b\u1168\u1109\u1175: https:\/\/youtu.be\/_GIBVt5-khk","327a1b45":"# \ubaa8\ub378\ub9c1 & \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & \uc559\uc0c1\ube14","a2e129ed":"# \ud83d\ude0a\uc2a4\ud06c\ub9bd\ud2b8 \ubc84\uc804","cb171716":"# \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1","42a6c611":"# \ub370\uc774\ud130 \uc804\ucc98\ub9ac","4f3e8080":"# csv \uc0dd\uc131 & \ud655\uc778","a5f2084f":"# \uac04\ub2e8EDA","7bbc0e6f":"# \ubaa8\ub378 \ud3c9\uac00","11455542":"# \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","4660214b":"# \ub370\uc774\ud130 \uc804\ucc98\ub9ac","32a88183":"# csv\ud655\uc778","3e208b88":"# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","ead9fe22":"# \ubaa8\ub378\ub9c1 & \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & \uc559\uc0c1\ube14","0ec26e61":"- \uc544\ub798 \ucf54\ub4dc\ub294 \ubca0\uc774\uc2a4\ub77c\uc778 \uc608\uc2dc\uc785\ub2c8\ub2e4","dffba7a0":"# EDA","a8209f41":"# \uc131\ub2a5\ud655\uc778","99ab4732":"# \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1","d2ec4deb":"# \ub77c\uc774\ube0c\ub7ec\ub9ac","dd0b284f":"# \ud83d\udca5\ud480\uc774\ud83d\udca5"}}