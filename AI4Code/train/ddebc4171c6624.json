{"cell_type":{"6ac36481":"code","e51e9950":"code","25de8f0c":"code","ac5e86f6":"code","bdb2bf6e":"code","5f593b17":"code","978f5f30":"code","5a982a5d":"code","65932393":"code","69b0849a":"code","1be34921":"code","892ef00d":"code","2ba2f38a":"code","28c00a84":"code","ddf4a149":"code","1f0b6e31":"code","3a9082e1":"code","f5c2f0b6":"code","c5f79d1a":"code","6ae9819b":"code","e6c561d6":"code","b56d2019":"code","c8a6b4d6":"code","c923f09e":"code","fd72f27a":"markdown","aebcda4e":"markdown","11bab3a6":"markdown","14a3aaee":"markdown","78b69f33":"markdown","0bedb9f3":"markdown","455209bc":"markdown","0d518df5":"markdown","83633116":"markdown","4b6f548f":"markdown","97ad3a20":"markdown","e063497b":"markdown","7b459002":"markdown","b1b6d8bf":"markdown","cd8f2ee2":"markdown","1a97abc3":"markdown","be9e6a4e":"markdown","ab2bd699":"markdown","924c00a2":"markdown","6682f828":"markdown","cccdd2c4":"markdown"},"source":{"6ac36481":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.ticker as mtick","e51e9950":"tele=pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ntele.info()\ntele.head()","25de8f0c":"#\u4fee\u6539TotalCharges\u4e3a\u6570\u636e\u5f62\u5f0f\ntele.TotalCharges = pd.to_numeric(tele.TotalCharges,errors='coerce') #errors='coerce'\u82e5\u65e0\u6cd5\u8f6c\u5316\u4e3a\u8981\u6c42\u683c\u5f0f\uff0c\u5219\u7528NaN\u586b\u5145\n#\u8f6c\u6362\u6570\u636e\u683c\u5f0f\u540e\uff0ctotalcharges\u5217\u670911\u4e2a\u8bb0\u5f55\u6709\u7f3a\u5931\u503c\uff0c\u628a\u4ed6\u4eec\u53bb\u9664\ntele.dropna(inplace = True)\n#id\u5217\u4e0e\u6807\u7684\u53d8\u91cf\u65e0\u5173\uff0c\u53bb\u6389id\u5217\ndf1=tele.iloc[:,1:]\n#\u628achurn\u8f6c\u5316\u4e3a0\uff0c1\u5f62\u5f0f\ndf1['Churn'].replace(to_replace='Yes',value=1,inplace=True) #inplace=True\u4e3a\u76f4\u63a5\u6539\u53d8\u539f\u6570\u636e\ndf1['Churn'].replace(to_replace='No',value=0,inplace=True)","ac5e86f6":"#\u8f6c\u5316\u4e3a\u865a\u62df\u53d8\u91cf\uff0c\u4e3a\u8ba8\u8bba\u76f8\u5173\u6027\ntele_dummies = pd.get_dummies(df1)","bdb2bf6e":"#\u56e0\u6b64\u9009\u7528\u67f1\u5f62\u56fe\nplt.figure(figsize=(15,8))\ntele_dummies.corr()['Churn'].sort_values(ascending = False).plot(kind='bar') #\u8fd9\u4e2a\u8bed\u53e5\u9700\u8981\u5b66\u4e60","5f593b17":"cols =[cols for cols in df1.columns if df1[cols].dtype=='object' or cols =='SeniorCitizen']  #\u53ea\u6311\u9009object\u7684\u53d8\u91cf\ndf1_cols = df1[cols].copy() #\u9700\u8981\u8f6c\u6362\u7684\u53d8\u91cf\u7ec4\u6210\u4e00\u4e2adataframe","978f5f30":"for i in cols:\n    if df1_cols[i].nunique() == 2:\n        df1_cols[i],_=pd.factorize(df1_cols[i])\n    else:\n        df1_cols = pd.get_dummies(df1_cols,columns=[i])\n\nprint(df1_cols.head(3))","5a982a5d":"cols =[cols for cols in df1.columns if df1[cols].dtype=='object' or cols =='SeniorCitizen'] # \u6311\u9009\u5206\u7c7b\u578b\u53d8\u91cf\n# \u753b\u56fe\nfig,axes = plt.subplots(nrows=4,ncols=4,figsize=(50,50))\naxis_name='Percentage of Customers'\nfor i, c in enumerate(cols):\n    g = df1.groupby(c)['Churn'].value_counts()\/len(df1) #\u6c42\u6bcf\u4e2a\u53d8\u91cf\u6d41\u5931\u4e0e\u7559\u5b58\u7528\u6237\u7684\u5404\u4e2a\u503c\u7684\u4e2a\u6570\n    g = g.to_frame().rename({'Churn':axis_name},axis=1).reset_index()\n    if i<4:\n        ax=sns.barplot(x=c,y=axis_name,hue='Churn',data=g,ax=axes[i,0])\n    elif i>=4 and i< 8:\n        ax=sns.barplot(x=c,y=axis_name,hue='Churn',data=g,ax=axes[i-4,1])\n    elif i>=8 and i <12:\n        ax=sns.barplot(x=c,y=axis_name,hue='Churn',data=g,ax=axes[i-8,2])\n    elif i<16:\n        ax=sns.barplot(x=c,y=axis_name,hue='Churn',data=g,ax=axes[i-12,3])\n    ax.set_title(c)","65932393":"sns.distplot(df1['tenure'],hist=True,kde=False) #kde\u662f\u5426\u6709\u62df\u5408\u7ebf\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6ca1\u6709","69b0849a":"#\u5148\u5b9a\u4e49\u4e00\u4e2akdeplot\ndef kdeplot(feature):\n    plt.figure(figsize=(9, 4))\n    plt.title(\"KDE for {}\".format(feature))\n    ax0 = sns.kdeplot(df1[df1['Churn'] == 0][feature], color= 'navy', shade=True,label= 'Churn: No')\n    ax1 = sns.kdeplot(df1[df1['Churn'] == 1][feature], color= 'orange', shade=True,label= 'Churn: Yes')\n    plt.legend(['Not','Churn'])\n\nkdeplot('tenure')\nkdeplot('MonthlyCharges')\nkdeplot('TotalCharges')","1be34921":"df1['ChargesPerMonth']=df1['TotalCharges']\/df1['tenure']\nkdeplot('ChargesPerMonth')","892ef00d":"df1['Month_diff']=df1['MonthlyCharges']-df1['ChargesPerMonth']\nkdeplot('Month_diff')","2ba2f38a":"df1 = df1.iloc[:,:-2] #\u5220\u9664\u65b0\u589e\u7684\u4e24\u5217","28c00a84":"#\u8fd9\u91cc\u53ea\u770b\u6d41\u5931\u5ba2\u6237\ncols = [\"OnlineSecurity\", \"OnlineBackup\", \"DeviceProtection\", \"TechSupport\", \"StreamingTV\", \"StreamingMovies\"]\ndf2 = df1[(df1.InternetService!='No') & (df1.Churn ==1)]\ndf2 = pd.melt(df2[cols]).rename({'value': 'Has service'}, axis=1)\nprint(df2)\nplt.figure(figsize=(10,5))\nax = sns.countplot(data=df2, x='variable', hue='Has service', hue_order=['No', 'Yes'])","ddf4a149":"barplot_percentages('Contract')","1f0b6e31":"barplot_percentages('PaperlessBilling')","3a9082e1":"plt.figure(figsize=(10,5))\nbarplot_percentages('PaymentMethod')","f5c2f0b6":"#\u67e5\u770b\u4e0d\u540c\u652f\u4ed8\u65b9\u5f0f\u4e0emonthlycharges\u7684\u5173\u7cfb\nax = sns.catplot(y=\"Churn\", x=\"MonthlyCharges\", row=\"PaymentMethod\", kind=\"box\", data=df1, height=1.5, aspect=4, orient='h')","c5f79d1a":"#\u8f6c\u5316\u4e3adummy variable\ndf1_dummies=pd.get_dummies(df1)","6ae9819b":"X=df1_dummies.drop(columns='Churn').values\ny=df1_dummies['Churn'].values","e6c561d6":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)\n\nlog=LogisticRegression()\nlog.fit(X_train,y_train)\ny_pred=log.predict(X_test)\n\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\nprint(log.score(X_test, y_test))\nprint(log.coef_)","b56d2019":"log_weight=LogisticRegression(class_weight={0:1,1:2})\nlog_weight.fit(X_train,y_train)\ny_pred=log_weight.predict(X_test)\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\nprint(log.score(X_test, y_test))\nprint(log.coef_)","c8a6b4d6":"from sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import roc_auc_score\ny_pred_prob = log.predict_proba(X_test)[:,1]\n# Compute and print AUC score\nprint(\"AUC: {}\".format(roc_auc_score(y_test, y_pred_prob)))\ncv_auc = cross_val_score(log,X,y,cv=5,scoring='roc_auc')\n# Print list of AUC scores\nprint(\"AUC scores computed using 5-fold cross-validation: {}\".format(cv_auc))","c923f09e":"from sklearn.ensemble import RandomForestClassifier\n\nrfc=RandomForestClassifier()\nrfc.fit(X_train,y_train)\ny_pred=rfc.predict(X_test)\n\ny_pred_prob = rfc.predict_proba(X_test)[:,1]\n\n# Compute and print AUC score\nprint(\"AUC: {}\".format(roc_auc_score(y_test, y_pred_prob)))\n\ncv_auc = cross_val_score(rfc,X,y,cv=5,scoring='roc_auc')\n\n# Print list of AUC scores\nprint(\"AUC scores computed using 5-fold cross-validation: {}\".format(cv_auc))","fd72f27a":"## 4.\u5c0f\u7ed3\n\u5728\u8fdb\u4e00\u6b65\u5206\u6790\u5404\u53d8\u91cf\u4e4b\u524d\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0a\u56fe\u5bf9\u5404\u53d8\u91cf\u4e0e\u6807\u7684\u53d8\u91cf\u7684\u5173\u7cfb\u6709\u5927\u81f4\u4e86\u89e3\u3002\n\u6708\u5305\u5408\u540c\uff0c\u65e0\u7f51\u7edc\u5b89\u5168\u670d\u52a1\uff0c\u65e0\u6280\u672f\u652f\u6301\u4e0e\u6d41\u5931\u7528\u6237\u6709\u6b63\u5411\u5173\u7cfb\uff0c\u800c\u4f7f\u7528\u65f6\u957f\uff0c\u4e24\u5e74\u671f\u5408\u540c\uff0c\u65e0\u7f51\u7edc\u670d\u52a1\u4e0e\u6d41\u5931\u7528\u6237\u6709\u8d1f\u5411\u8054\u7cfb\u3002\n\u5176\u6b21\uff0c\u6027\u522b\u3001\u624b\u673a\u670d\u52a1\u3001\u591a\u7ebf\u8def\u8fd9\u4e09\u4e2a\u53d8\u91cf\u4e0e\u6807\u7684\u53d8\u91cf\u76f8\u5173\u6027\u51e0\u4e4e\u4e3a\u96f6\u3002","aebcda4e":"## 3.\u76f8\u5173\u6027\n\u8981\u8ba8\u8bba\u53d8\u91cf\u4e0e\u6807\u7684\u53d8\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\u6027\uff0c\u70ed\u529b\u56fe\u4e0d\u73b0\u5b9e\uff0c\u8fd9\u91cc\u53d8\u91cf\u592a\u591a\u4e86 \n\nplt.subplots(figsize=(30, 30))\nsns.heatmap(tele_dummies.corr(),annot=False)\nplt.show()","11bab3a6":"### 6.\u7ed3\u8bba","14a3aaee":"## 2.\u5904\u7406\u7f3a\u5931\u6570\u636e\uff1a\n\u67e5\u770b\u6570\u636e\u53d1\u73b0\uff0c\u539f\u6570\u636e\u96c6\u4e2dSeniorCitizen,TotalCharges\u6570\u636e\u683c\u5f0f\u4e0d\u6b63\u786e\u3002","78b69f33":"## Tenure, MonthlyCharges, TotalCharges\n\u8fd9\u4e09\u4e2a\u6570\u503c\u578b\u53d8\u91cf\u4e00\u8d77\u8ba8\u8bba","0bedb9f3":"\u8ba2\u9605\u524d\u56db\u79cd\u670d\u52a1\u7684\u5ba2\u6237\u4e0d\u5bb9\u6613\u6d41\u5931\uff0c\u6d41\u5a92\u4f53\u670d\u52a1\u5bf9churn\u7684\u5f71\u54cd\u4e0d\u5927","455209bc":"\u53ec\u56de\u7387\u63d0\u9ad8\u4e8620%\uff0c\u7cbe\u51c6\u5ea6\u4e0b\u964d\u4e868%\u3002\u6ce8\u610f\uff0c\u4e0d\u80fd\u4e00\u5473\u53ea\u5173\u6ce8\u53ec\u56de\u7387\uff0c\u4e3a\u8fbe\u5230\u53ec\u56de\u7387\u5c3d\u53ef\u80fd\u9ad8\u7684\u76ee\u7684\uff08100%\uff09\uff0c\u53ef\u4ee5\u628a\u6240\u6709\u6837\u672c\u90fd\u53d8\u62101\u3002\n\u4e0d\u9002\u5408\u4f7f\u7528\u51c6\u786e\u5ea6\u3001\u53ec\u56de\u7387\u6765\u8bc4\u4f30\u4e0d\u5747\u8861\u6570\u636e\u96c6\u7684\u8868\u73b0\uff0c\u8fd9\u91ccauc,roc\u66f4\u9002\u5408\u3002\n\u8fd8\u9700\u8ba8\u8bba\u7684\u95ee\u9898\uff1a\u7279\u5f81\u9009\u62e9\uff0c\u968f\u673a\u68ee\u6797\u7684\u53c2\u6570c\u9009\u62e9\uff0c\u4ea4\u53c9\u9a8c\u8bc1\u9009\u6a21\u578b","0d518df5":"## 2.  \u968f\u673a\u68ee\u6797","83633116":"### \u5c0f\u7ed3\n\u53d1\u73b0\u603b\u82b1\u8d39\/\u65f6\u957f\u4e0e\u6bcf\u6708\u82b1\u8d39\u7684\u5206\u5e03\u4e00\u81f4\u3002\u6bcf\u6708\u8bdd\u8d39\u662f\u4e00\u4e2a\u91cd\u8981\u53d8\u91cf","4b6f548f":"# **Data exploration**\n\n## Categorical Variables\n\u8fdb\u4e00\u6b65\u63a2\u8ba8\u524d\uff0c\u628abinary variables\u7684\u503c\u8f6c\u5316\u4e3a1\uff0c0","97ad3a20":"\u6708\u671f\u5408\u540c\u7684\u7528\u6237\u66f4\u5bb9\u6613\u6d41\u5931\uff0c\u7535\u5b50\u8d26\u5355\u7684\u7528\u6237\u66f4\u5bb9\u6613\u6d41\u5931","e063497b":"# **Business Understanding:**\n***\n\u7535\u4fe1\u7528\u6237\u6d41\u5931\u4f1a\u5bf9\u670d\u52a1\u5546\u9020\u6210\u5f88\u5927\u5f71\u54cd\u3002\u73b0\u6536\u96c6\u4e86\u7528\u6237\u7684\u6570\u636e\uff0c\u5305\u62ec\u7528\u6237\u6027\u522b\u3001\u7528\u6237\u5c5e\u6027\u3001\u5df2\u5f00\u901a\u670d\u52a1\u7b49\u4fe1\u606f\uff0c\u5df2\u6807\u8bb0\u51fa\u6d41\u5931\u7528\u6237\u3002\u5206\u6790\u5df2\u6d41\u5931\u7528\u6237\u7279\u5f81\uff0c\u5e76\u9884\u6d4b\u672a\u6765\u7528\u6237\u662f\u5426\u4f1a\u6d41\u5931\u3002","7b459002":"# **Building Models and evaluations**\n\n\u5206\u522b\u4f7f\u7528\u903b\u8f91\u56de\u5f52\uff0c\u968f\u673a\u68ee\u6797\uff0csvm\u6a21\u578b\n\n## 1. LogisticRegression ","b1b6d8bf":"***\n### \u5c0f\u7ed3","cd8f2ee2":"### 5. Contract and Payment","1a97abc3":"\u90ae\u5bc4\u4ed8\u8d39\u7684\u7528\u6237\u6bcf\u6708\u8bdd\u8d39\u6700\u5c11\uff0c\u5728\u540c\u4e00\u79cd\u652f\u4ed8\u65b9\u5f0f\u4e2d\uff0c\u8bdd\u8d39\u9ad8\u7684\u5ba2\u6237\u66f4\u5bb9\u6613\u6d41\u5931 ","be9e6a4e":"\u8fd9\u91cc\u53ef\u770b\u51fa\u7528\u6237\u52a0\u5165\u65f6\u957f\u591a\u96c6\u4e2d\u57281\u4e2a\u6708\u6216\u8005\u662f72\u4e2a\u6708\uff0c\u65b0\u52a0\u5165\u7684\u7528\u6237\u66f4\u5bb9\u6613\u6d41\u5931\uff0c\u8001\u7528\u6237\u4e0d\u5bb9\u6613\u6d41\u5931\n\u5176\u4e2d\uff0c\u5165\u7f51\u65f6\u957f\u5c0f\u4e8e20\u4e2a\u6708\u7684\u5ba2\u6237\u6d41\u5931\u7387\u6700\u9ad8\n\n\u6708\u4ed8\u8d39\u9ad8\u7684\u5ba2\u6237\u66f4\u5bb9\u6613\u6d41\u5931\uff0c\u6708\u4ed8\u8d39\u4f4e\u7684\u4e0d\u5bb9\u6613\u6d41\u5931\u3002\u6708\u4ed8\u8d39\u9ad8\u4e8e60\u5ba2\u6237\u4f1a\u5927\u91cf\u6d41\u5931\u3002\n\n\u8fd9\u91cc\u53d1\u73b0\u603b\u4ed8\u8d39\u4e0e\u5165\u7f51\u65f6\u957f\u6709\u5173\uff0c\u63a2\u7a76\u4ed6\u4eec\u7684\u5173\u7cfb","ab2bd699":"# **Data Understanding:**","924c00a2":"## 1. \u6570\u636e\u96c6\u4fe1\u606f\uff1a\n1. \u4e0a\u4e2a\u6708\u5185\u79bb\u5f00\u7684\u5ba2\u6237\u2013\u8be5\u5217\u79f0\u4e3a\u201c\u5ba2\u6237\u6d41\u5931\u201d\n2. \u6bcf\u4e2a\u5ba2\u6237\u5df2\u7b7e\u7f72\u7684\u670d\u52a1-\u7535\u8bdd\uff0c\u591a\u6761\u7ebf\u8def\uff0c\u4e92\u8054\u7f51\uff0c\u5728\u7ebf\u5b89\u5168\uff0c\u5728\u7ebf\u5907\u4efd\uff0c\u8bbe\u5907\u4fdd\u62a4\uff0c\u6280\u672f\u652f\u6301\u4ee5\u53ca\u6d41\u7535\u89c6\u548c\u7535\u5f71\n3. \u5ba2\u6237\u5e10\u6237\u4fe1\u606f\u2013\u4ed6\u4eec\u6210\u4e3a\u5ba2\u6237\u7684\u65f6\u95f4\uff0c\u5408\u540c\uff0c\u4ed8\u6b3e\u65b9\u5f0f\uff0c\u65e0\u7eb8\u5316\u8d26\u5355\uff0c\u6bcf\u6708\u8d39\u7528\u548c\u603b\u8d39\u7528\n4. \u6709\u5173\u5ba2\u6237\u7684\u4eba\u53e3\u7edf\u8ba1\u4fe1\u606f-\u6027\u522b\uff0c\u5e74\u9f84\u8303\u56f4\u4ee5\u53ca\u4ed6\u4eec\u662f\u5426\u6709\u4f34\u4fa3\u548c\u53d7\u6276\u517b\u4eba\n***\n\n","6682f828":"### \u5404\u5206\u7c7b\u578b\u53d8\u91cf\u4e0e\u6807\u7684\u53d8\u91cf\u7684\u5173\u7cfb","cccdd2c4":"\u903b\u8f91\u56de\u5f52\u6a21\u578b\u7684\u51c6\u786e\u7387\u4e3a79.6%\uff0c\u6d41\u5931\u7528\u6237\u68c0\u6d4b\u7684\u7cbe\u51c6\u5ea6\u4e3a64%\uff0c\u5373\u68c0\u6d4b\u51fa\u4e3a\u6d41\u5931\u7528\u6237\u7684\u7fa4\u4f53\u4e2d\u670964%\u4e3a\u771f\u7684\u6d41\u5931\u7528\u6237\u3002\n\n\u53ec\u56de\u7387\u4e3a53%\uff0c\u5373\u6240\u6709\u6d41\u5931\u7528\u6237\u4e2d\u88ab\u68c0\u6d4b\u51fa\u7684\u6bd4\u7387\u4e3a53%\u3002\n\n\u5bf9\u4e8e\u6d41\u5931\u7528\u6237\u9884\u6d4b\u6765\u8bf4\uff0ctype2error\uff08\u5b9e\u9645\u4e3a\u6d41\u5931\u7528\u6237\uff0c\u4f46\u9884\u6d4b\u4e3a\u7559\u5b58\u7528\u6237\uff09\u9020\u6210\u7684\u5546\u4e1a\u635f\u5931\u6bd4type1error\u5927\uff0c\u6b64\u6a21\u578b\u7684\u53ec\u56de\u7387\u5f88\u4f4e\uff0c\u56e0\u6b64\u9700\u8981\u63d0\u9ad8\u53ec\u56de\u7387\u3002\n\n\u6b64\u6570\u636e\u96c6\u662f\u4e0d\u5747\u8861\u6570\u636e\u96c6\uff0c\u53ef\u4ee5\u91c7\u7528\u589e\u52a0\u6743\u91cd\u7684\u65b9\u5f0f\u6765\u589e\u52a0\u6d41\u5931\u7528\u6237\u7684\u6570\u636e\u91cf"}}