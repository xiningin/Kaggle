{"cell_type":{"59adb5e1":"code","2d1d91c2":"code","3cda3c10":"code","c67d166a":"code","41d1802f":"code","f8e141cb":"code","96ac8f9f":"code","fdce31d4":"code","332b2faa":"code","bd5cec39":"code","ca95a844":"code","47e00386":"code","d751b4cf":"code","78e51983":"markdown","071c19a0":"markdown","e8464198":"markdown","9f16f331":"markdown","217285cd":"markdown","0074b10c":"markdown"},"source":{"59adb5e1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2d1d91c2":"train_data = pd.read_csv(\"..\/input\/Kannada-MNIST\/train.csv\")\ntrain_data.shape","3cda3c10":"import matplotlib.pyplot as plt\n\nshow_exmpl = train_data.values[:8, :-1]\nplt.figure(1, figsize=(14, 7))\nfor i in range(8):\n    plt.subplot(2, 4, i + 1)\n    plt.imshow(show_exmpl[i].reshape((28, 28)), cmap='gray')","c67d166a":"X_train_test = train_data.values[:, 1:]\ny_train_test = train_data.label.values\n\nind = np.random.permutation(X_train_test.shape[0])\nX_train_test = X_train_test[ind]\ny_train_test = y_train_test[ind]\n\nvalidate_size = int(0.2 * X_train_test.shape[0])\nX_train, X_test = X_train_test[validate_size:], X_train_test[:validate_size]\ny_train, y_test = y_train_test[validate_size:], y_train_test[:validate_size]\n\nprint('Train shapes: ', X_train.shape, y_train.shape)\nprint('Test shapes: ', X_test.shape, y_test.shape)","41d1802f":"print(np.min(X_train), np.max(X_train))\nX_train_max = np.max(X_train)\nX_train = X_train \/ (0.5 * X_train_max) - 1\nprint(np.min(X_train), np.max(X_train))\n\nprint(np.min(X_test), np.max(X_test))\nX_test = X_test \/ (0.5 * X_train_max) - 1 \nprint(np.min(X_test), np.max(X_test))","f8e141cb":"from keras.layers import *\nfrom keras.models import Sequential","96ac8f9f":"model = Sequential()\n\nmodel.add(Conv2D(64, kernel_size=3, activation='relu', input_shape=(28, 28, 1),padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64, kernel_size=3, activation='relu',padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.7))\n\nmodel.add(Conv2D(128, kernel_size=3, activation='relu',padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128, kernel_size=3, activation='relu',padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.7))\n\nmodel.add(Flatten())\nmodel.add(Dense(128))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.7))\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.compile(optimizer ='sgd',\n              loss = 'sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.summary()","fdce31d4":"from keras.callbacks import CSVLogger, ModelCheckpoint","332b2faa":"X_train = X_train.reshape(X_train.shape[0],28,28,1)\nX_test = X_test.reshape(X_test.shape[0],28,28,1)\n\nmodel.fit(X_train, y_train,\n          epochs=25,\n          verbose=1,\n          validation_data=(X_test, y_test),\n          callbacks=[\n              ModelCheckpoint('\/kaggle\/working\/best_kannada_model.h5', save_best_only=True),\n              CSVLogger('\/kaggle\/working\/learning_log.csv'),\n          ])","bd5cec39":"test_csv = pd.read_csv(\"..\/input\/Kannada-MNIST\/test.csv\")\nX_val = np.array(test_csv.drop(\"id\",axis=1), dtype=np.float32)\nX_val.shape","ca95a844":"X_val_max = np.max(X_val)\nX_val = X_val \/ (0.5 * X_val_max) - 1\nX_val = np.reshape(X_val, (-1,28,28,1))\n\nprint(X_val.shape, np.min(X_val), np.max(X_val))","47e00386":"from keras.models import load_model\n\nbest_model = load_model('\/kaggle\/working\/best_kannada_model.h5')\nY_val = best_model.predict(X_val)\nY_val = np.argmax(Y_val, axis = 1)","d751b4cf":"submission = pd.read_csv(\"..\/input\/Kannada-MNIST\/sample_submission.csv\")\nsubmission['label'] = Y_val\nsubmission.to_csv(\"submission.csv\",index=False)","78e51983":"### Data normalization","071c19a0":"### Visualise train data","e8464198":"### Divide to train and validate data","9f16f331":"### Load train data","217285cd":"### Simple CNN with SGD Optimizer","0074b10c":"### Submission"}}