{"cell_type":{"06a9066d":"code","dadd31f3":"code","d3b13582":"code","c64401db":"code","ac2ce83a":"code","48e49404":"code","e0b9df73":"code","b3abb09d":"code","b0a979a1":"code","404bf7d9":"code","37eee643":"code","7ed6d3c1":"code","c64d4d02":"code","3cd13db9":"code","92290e92":"code","ea53ec0a":"code","7b69f854":"code","9f683dec":"code","f19b0071":"code","40b08611":"code","af66a408":"code","97ac7b75":"code","ee5b174a":"code","0db8e047":"code","a1e8fe72":"code","cb8fd43c":"code","246e4c16":"code","52ac7589":"code","44bf5499":"code","865775b8":"code","6cf9b8c0":"code","98852bc9":"code","3281263e":"code","3765ab99":"code","c97e52e1":"code","6e5b39d2":"code","110feac6":"code","5737cb8c":"code","806bee82":"code","cf208448":"code","da61049b":"code","3adf0232":"code","da84d874":"code","34657320":"code","3b0f89af":"code","e5d8412e":"code","d5dc866b":"code","1d976ab9":"code","0f68c87a":"code","67cfbba9":"code","804ed581":"code","d36995cd":"code","57c5ed4e":"code","401162a4":"code","881d18fa":"code","463195ee":"code","7f505afb":"code","2a9f0b58":"code","9480b6bd":"code","2b599519":"code","5aa60590":"code","bc4bbdfc":"code","e078d55e":"code","b666f767":"code","c28e0aab":"code","aa9899a0":"code","3517a004":"code","4fd65c2a":"code","55cb3c74":"code","27e470c0":"code","61e83bae":"code","c081705f":"markdown","2f97bb24":"markdown","4a7612b0":"markdown","51aae0ca":"markdown","2402791a":"markdown","db6dc8cf":"markdown","43d0501b":"markdown","04262473":"markdown","af9e32db":"markdown","ae2ddba3":"markdown","76d3038a":"markdown","d5cdcac5":"markdown","e82bfceb":"markdown","a4e2ecb6":"markdown","270a7b91":"markdown","5acad7b1":"markdown","1583ec90":"markdown","06d0e56d":"markdown","391eeeda":"markdown","b5add214":"markdown","1029036a":"markdown","c8bf9b41":"markdown","ba4eca26":"markdown","c58ca460":"markdown","7683826f":"markdown","c1bfa0a4":"markdown","5bb24bd9":"markdown","df1587ad":"markdown","f80a0883":"markdown","bb7b6f83":"markdown","5d7bcca1":"markdown","e972c447":"markdown","cb65bac8":"markdown","9669f1bc":"markdown","03c4d65a":"markdown","82680216":"markdown","b591850b":"markdown","75237b16":"markdown","1d31994e":"markdown","a980e913":"markdown","609a8021":"markdown","b0517f12":"markdown","924059f7":"markdown","fc6d7a52":"markdown","0cafec45":"markdown","369b8210":"markdown","699787cd":"markdown","15be9002":"markdown","41749f75":"markdown","bc1e7211":"markdown","293cb2b1":"markdown","13248f57":"markdown","dffbaa9d":"markdown","4883a2b8":"markdown","83645238":"markdown","0ced06d9":"markdown","a4bd10db":"markdown","564014d7":"markdown","c4c7d29d":"markdown","64a33279":"markdown","dadcfb82":"markdown","2733b8ce":"markdown","e65d8e45":"markdown","4445d37d":"markdown","2d26f096":"markdown","727be8fa":"markdown","7fe78c9c":"markdown","404d2458":"markdown","9c17aa2b":"markdown","ce71e078":"markdown","43421b1a":"markdown","c0ae2186":"markdown","1f0e7981":"markdown","3ba10a52":"markdown","eba09c0b":"markdown","3b552632":"markdown","0b6821c2":"markdown"},"source":{"06a9066d":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_colwidth', -1)","dadd31f3":"data = pd.read_csv('\/kaggle\/input\/airline-passenger-traffic\/airline-passenger-traffic(1).csv', header = None)\ndata.columns = ['Month','Passengers']\ndata['Month'] = pd.to_datetime(data['Month'], format='%Y-%m')\ndata = data.set_index('Month')\ndata.head(12)","d3b13582":"data.plot(figsize=(12, 4))\nplt.legend(loc='best')\nplt.grid()\nplt.title('Airline passenger traffic')\nplt.show(block=False)","c64401db":"data = data.assign(Passengers_Mean_Imputation=data.Passengers.fillna(data.Passengers.mean()))\ndata[['Passengers_Mean_Imputation']].plot(figsize=(12, 4))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic: Mean imputation')\nplt.show(block=False)","ac2ce83a":"data = data.assign(Passengers_Linear_Interpolation=data.Passengers.interpolate(method='linear'))\ndata[['Passengers_Linear_Interpolation']].plot(figsize=(12, 4))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic: Linear interpolation')\nplt.show(block=False)","48e49404":"data['Passengers'] = data['Passengers_Linear_Interpolation']\ndata.drop(columns=['Passengers_Mean_Imputation','Passengers_Linear_Interpolation'],inplace=True)","e0b9df73":"import seaborn as sns\nfig = plt.subplots(figsize=(12, 2))\nax = sns.boxplot(x=data['Passengers'],whis=1.5)","b3abb09d":"fig = data.Passengers.hist(figsize = (12,4))","b0a979a1":"from pylab import rcParams\nimport statsmodels.api as sm\nrcParams['figure.figsize'] = 12, 8\ndecomposition = sm.tsa.seasonal_decompose(data.Passengers, model='additive') # additive seasonal index\nfig = decomposition.plot()\nplt.show()","404bf7d9":"decomposition = sm.tsa.seasonal_decompose(data.Passengers, model='multiplicative') # multiplicative seasonal index\nfig = decomposition.plot()\nplt.show()","37eee643":"train_len = 120\ntrain = data[0:train_len] # first 120 months as training set\ntest = data[train_len:] # last 24 months as out-of-time test set","7ed6d3c1":"y_hat_naive = test.copy()\ny_hat_naive['naive_forecast'] = train['Passengers'][train_len-1]","c64d4d02":"plt.figure(figsize=(12,4))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_naive['naive_forecast'], label='Naive forecast')\nplt.legend(loc='best')\nplt.title('Naive Method')\nplt.show()","3cd13db9":"from sklearn.metrics import mean_squared_error\nrmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_naive['naive_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_naive['naive_forecast'])\/test['Passengers'])*100,2)\n\nresults = pd.DataFrame({'Method':['Naive method'], 'MAPE': [mape], 'RMSE': [rmse]})\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","92290e92":"y_hat_avg = test.copy()\ny_hat_avg['avg_forecast'] = train['Passengers'].mean()","ea53ec0a":"plt.figure(figsize=(12,4))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_avg['avg_forecast'], label='Simple average forecast')\nplt.legend(loc='best')\nplt.title('Simple Average Method')\nplt.show()","7b69f854":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_avg['avg_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_avg['avg_forecast'])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Simple average method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","9f683dec":"y_hat_sma = data.copy()\nma_window = 12\ny_hat_sma['sma_forecast'] = data['Passengers'].rolling(ma_window).mean()\ny_hat_sma['sma_forecast'][train_len:] = y_hat_sma['sma_forecast'][train_len-1]","f19b0071":"plt.figure(figsize=(12,4))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_sma['sma_forecast'], label='Simple moving average forecast')\nplt.legend(loc='best')\nplt.title('Simple Moving Average Method')\nplt.show()","40b08611":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_sma['sma_forecast'][train_len:])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_sma['sma_forecast'][train_len:])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Simple moving average forecast'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","af66a408":"from statsmodels.tsa.holtwinters import SimpleExpSmoothing\nmodel = SimpleExpSmoothing(train['Passengers'])\nmodel_fit = model.fit(smoothing_level=0.2,optimized=False)\nmodel_fit.params\ny_hat_ses = test.copy()\ny_hat_ses['ses_forecast'] = model_fit.forecast(24)\n","97ac7b75":"plt.figure(figsize=(12,4))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_ses['ses_forecast'], label='Simple exponential smoothing forecast')\nplt.legend(loc='best')\nplt.title('Simple Exponential Smoothing Method')\nplt.show()","ee5b174a":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_ses['ses_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_ses['ses_forecast'])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Simple exponential smoothing forecast'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults","0db8e047":"from statsmodels.tsa.holtwinters import ExponentialSmoothing\nmodel = ExponentialSmoothing(np.asarray(train['Passengers']) ,seasonal_periods=12 ,trend='additive', seasonal=None)\nmodel_fit = model.fit(smoothing_level=0.2, smoothing_slope=0.01, optimized=False)\nprint(model_fit.params)\ny_hat_holt = test.copy()\ny_hat_holt['holt_forecast'] = model_fit.forecast(len(test))","a1e8fe72":"plt.figure(figsize=(12,4))\nplt.grid()\nplt.plot( train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_holt['holt_forecast'], label='Holt\\'s exponential smoothing forecast')\nplt.legend(loc='best')\nplt.title('Holt\\'s Exponential Smoothing Method')\nplt.show()","cb8fd43c":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_holt['holt_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_holt['holt_forecast'])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Holt\\'s exponential smoothing method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","246e4c16":"y_hat_hwa = test.copy()\nmodel = ExponentialSmoothing(np.asarray(train['Passengers']) ,seasonal_periods=12 ,trend='add', seasonal='add')\nmodel_fit = model.fit(optimized=True)\nprint(model_fit.params)\ny_hat_hwa['hw_forecast'] = model_fit.forecast(24)","52ac7589":"plt.figure(figsize=(12,4))\nplt.grid()\nplt.plot( train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_hwa['hw_forecast'], label='Holt Winters\\'s additive forecast')\nplt.legend(loc='best')\nplt.title('Holt Winters\\' Additive Method')\nplt.show()","44bf5499":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_hwa['hw_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_hwa['hw_forecast'])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Holt Winters\\' additive method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","865775b8":"y_hat_hwm = test.copy()\nmodel = ExponentialSmoothing(np.asarray(train['Passengers']) ,seasonal_periods=12 ,trend='add', seasonal='mul')\nmodel_fit = model.fit(optimized=True)\nprint(model_fit.params)\ny_hat_hwm['hw_forecast'] = model_fit.forecast(24)","6cf9b8c0":"plt.figure(figsize=(12,4))\nplt.grid()\nplt.plot( train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_hwm['hw_forecast'], label='Holt Winters\\'s mulitplicative forecast')\nplt.legend(loc='best')\nplt.title('Holt Winters\\' Mulitplicative Method')\nplt.show()","98852bc9":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_hwm['hw_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_hwm['hw_forecast'])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Holt Winters\\' multiplicative method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","3281263e":"data['Passengers'].plot(figsize=(12, 4))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic')\nplt.show(block=False)","3765ab99":"from statsmodels.tsa.stattools import adfuller\nadf_test = adfuller(data['Passengers'])\n\nprint('ADF Statistic: %f' % adf_test[0])\nprint('Critical Values @ 0.05: %.2f' % adf_test[4]['5%'])\nprint('p-value: %f' % adf_test[1])","c97e52e1":"from statsmodels.tsa.stattools import kpss\nkpss_test = kpss(data['Passengers'])\n\nprint('KPSS Statistic: %f' % kpss_test[0])\nprint('Critical Values @ 0.05: %.2f' % kpss_test[3]['5%'])\nprint('p-value: %f' % kpss_test[1])","6e5b39d2":"from scipy.stats import boxcox\ndata_boxcox = pd.Series(boxcox(data['Passengers'], lmbda=0), index = data.index)\n\nplt.figure(figsize=(12,4))\nplt.grid()\nplt.plot(data_boxcox, label='After Box Cox tranformation')\nplt.legend(loc='best')\nplt.title('After Box Cox transform')\nplt.show()","110feac6":"data_boxcox_diff = pd.Series(data_boxcox - data_boxcox.shift(), data.index)\nplt.figure(figsize=(12,4))\nplt.grid()\nplt.plot(data_boxcox_diff, label='After Box Cox tranformation and differencing')\nplt.legend(loc='best')\nplt.title('After Box Cox transform and differencing')\nplt.show()","5737cb8c":"data_boxcox_diff.dropna(inplace=True)","806bee82":"data_boxcox_diff.tail()","cf208448":"adf_test = adfuller(data_boxcox_diff)\n\nprint('ADF Statistic: %f' % adf_test[0])\nprint('Critical Values @ 0.05: %.2f' % adf_test[4]['5%'])\nprint('p-value: %f' % adf_test[1])","da61049b":"kpss_test = kpss(data_boxcox_diff)\n\nprint('KPSS Statistic: %f' % kpss_test[0])\nprint('Critical Values @ 0.05: %.2f' % kpss_test[3]['5%'])\nprint('p-value: %f' % kpss_test[1])","3adf0232":"from statsmodels.graphics.tsaplots import plot_acf\nplt.figure(figsize=(12,4))\nplt.grid()\nplot_acf(data_boxcox_diff, ax=plt.gca(), lags = 30)\nplt.show()","da84d874":"from statsmodels.graphics.tsaplots import plot_pacf\nplt.figure(figsize=(12,4))\nplt.grid()\nplot_pacf(data_boxcox_diff, ax=plt.gca(), lags = 30)\nplt.show()","34657320":"train_data_boxcox = data_boxcox[:train_len]\ntest_data_boxcox = data_boxcox[train_len:]\ntrain_data_boxcox_diff = data_boxcox_diff[:train_len-1]\ntest_data_boxcox_diff = data_boxcox_diff[train_len-1:]","3b0f89af":"train_data_boxcox_diff[:10]","e5d8412e":"from statsmodels.tsa.arima_model import ARIMA\nmodel = ARIMA(train_data_boxcox_diff, order=(1, 0, 0)) \nmodel_fit = model.fit()\nprint(model_fit.params)","d5dc866b":"y_hat_ar = data_boxcox_diff.copy()\ny_hat_ar['ar_forecast_boxcox_diff'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_ar['ar_forecast_boxcox'] = y_hat_ar['ar_forecast_boxcox_diff'].cumsum()\ny_hat_ar['ar_forecast_boxcox'] = y_hat_ar['ar_forecast_boxcox'].add(data_boxcox[0])\ny_hat_ar['ar_forecast'] = np.exp(y_hat_ar['ar_forecast_boxcox'])","1d976ab9":"plt.figure(figsize=(12,4))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_ar['ar_forecast'][test.index.min():], label='Auto regression forecast')\nplt.legend(loc='best')\nplt.title('Auto Regression Method')\nplt.show()","0f68c87a":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_ar['ar_forecast'][test.index.min():])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_ar['ar_forecast'][test.index.min():])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Autoregressive (AR) method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","67cfbba9":"model = ARIMA(train_data_boxcox_diff, order=(0, 0, 1)) \nmodel_fit = model.fit()\nprint(model_fit.params)","804ed581":"y_hat_ma = data_boxcox_diff.copy()\ny_hat_ma['ma_forecast_boxcox_diff'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_ma['ma_forecast_boxcox'] = y_hat_ma['ma_forecast_boxcox_diff'].cumsum()\ny_hat_ma['ma_forecast_boxcox'] = y_hat_ma['ma_forecast_boxcox'].add(data_boxcox[0])\ny_hat_ma['ma_forecast'] = np.exp(y_hat_ma['ma_forecast_boxcox'])","d36995cd":"plt.figure(figsize=(12,4))\nplt.grid()\nplt.plot(data['Passengers'][:train_len], label='Train')\nplt.plot(data['Passengers'][train_len:], label='Test')\nplt.plot(y_hat_ma['ma_forecast'][test.index.min():], label='Moving average forecast')\nplt.legend(loc='best')\nplt.title('Moving Average Method')\nplt.show()","57c5ed4e":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_ma['ma_forecast'][test.index.min():])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_ma['ma_forecast'][test.index.min():])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Moving Average (MA) method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","401162a4":"model = ARIMA(train_data_boxcox_diff, order=(1, 0, 1))\nmodel_fit = model.fit()\nprint(model_fit.params)","881d18fa":"y_hat_arma = data_boxcox_diff.copy()\ny_hat_arma['arma_forecast_boxcox_diff'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_arma['arma_forecast_boxcox'] = y_hat_arma['arma_forecast_boxcox_diff'].cumsum()\ny_hat_arma['arma_forecast_boxcox'] = y_hat_arma['arma_forecast_boxcox'].add(data_boxcox[0])\ny_hat_arma['arma_forecast'] = np.exp(y_hat_arma['arma_forecast_boxcox'])","463195ee":"plt.figure(figsize=(12,4))\nplt.grid()\nplt.plot( data['Passengers'][:train_len-1], label='Train')\nplt.plot(data['Passengers'][train_len-1:], label='Test')\nplt.plot(y_hat_arma['arma_forecast'][test.index.min():], label='ARMA forecast')\nplt.legend(loc='best')\nplt.title('ARMA Method')\nplt.show()","7f505afb":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_arma['arma_forecast'][train_len-1:])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_arma['arma_forecast'][train_len-1:])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Autoregressive moving average (ARMA) method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","2a9f0b58":"model = ARIMA(train_data_boxcox, order=(1, 1, 1))\nmodel_fit = model.fit()\nprint(model_fit.params)","9480b6bd":"y_hat_arima = data_boxcox_diff.copy()\ny_hat_arima['arima_forecast_boxcox_diff'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_arima['arima_forecast_boxcox'] = y_hat_arima['arima_forecast_boxcox_diff'].cumsum()\ny_hat_arima['arima_forecast_boxcox'] = y_hat_arima['arima_forecast_boxcox'].add(data_boxcox[0])\ny_hat_arima['arima_forecast'] = np.exp(y_hat_arima['arima_forecast_boxcox'])","2b599519":"plt.figure(figsize=(12,4))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_arima['arima_forecast'][test.index.min():], label='ARIMA forecast')\nplt.legend(loc='best')\nplt.title('Autoregressive integrated moving average (ARIMA) method')\nplt.show()","5aa60590":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_arima['arima_forecast'][test.index.min():])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_arima['arima_forecast'][test.index.min():])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Autoregressive integrated moving average (ARIMA) method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","bc4bbdfc":"from statsmodels.tsa.statespace.sarimax import SARIMAX\n\nmodel = SARIMAX(train_data_boxcox, order=(1, 1, 1), seasonal_order=(1, 1, 1, 12)) \nmodel_fit = model.fit()\nprint(model_fit.params)","e078d55e":"y_hat_sarima = data_boxcox_diff.copy()\ny_hat_sarima['sarima_forecast_boxcox'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_sarima['sarima_forecast'] = np.exp(y_hat_sarima['sarima_forecast_boxcox'])","b666f767":"plt.figure(figsize=(12,4))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_sarima['sarima_forecast'][test.index.min():], label='SARIMA forecast')\nplt.legend(loc='best')\nplt.title('Seasonal autoregressive integrated moving average (SARIMA) method')\nplt.show()","c28e0aab":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_sarima['sarima_forecast'][test.index.min():])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_sarima['sarima_forecast'][test.index.min():])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Seasonal autoregressive integrated moving average (SARIMA) method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","aa9899a0":"promo = pd.read_csv('\/kaggle\/input\/promotion\/promotion.csv', header = None)\npromo.columns = ['Month','Event']\npromo['Month'] = pd.to_datetime(promo['Month'], format='%Y-%m')\npromo = promo.set_index('Month')\npromo[:12]","3517a004":"promo_train = promo[:train_len]\npromo_test = promo[train_len:]","4fd65c2a":"model = SARIMAX(train_data_boxcox, order=(1, 1, 1), seasonal_order=(1, 1, 1, 12), exog=promo_train) \nmodel_fit = model.fit()\nprint(model_fit.params)","55cb3c74":"y_hat_sarimax = data_boxcox_diff.copy()\ny_hat_sarimax['sarimax_forecast_boxcox'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max(), exog=promo_test)\ny_hat_sarimax['sarimax_forecast'] = np.exp(y_hat_sarimax['sarimax_forecast_boxcox'])","27e470c0":"plt.figure(figsize=(12,4))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_sarimax['sarimax_forecast'][test.index.min():], label='SARIMAX forecast')\nplt.legend(loc='best')\nplt.title('SARIMAX method')\nplt.show()","61e83bae":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_sarimax['sarimax_forecast'][test.index.min():])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_sarimax['sarimax_forecast'][test.index.min():])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['SARIMAX method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","c081705f":"## Simple average method","2f97bb24":"### Calculate RMSE and MAPE","4a7612b0":"## Holt Winters' additive method with trend and seasonality","51aae0ca":"# Simple time series methods","2402791a":"### Plot train, test and forecast","db6dc8cf":"### Recover original time series forecast","43d0501b":"### Calculate RMSE and MAPE","04262473":"## Split time series data into training and test set","af9e32db":"## Missing value treatment","ae2ddba3":"### Calculate RMSE and MAPE","76d3038a":"# Build and evaluate time series forecast","d5cdcac5":"### Plot train, test and forecast","e82bfceb":"### Plot train, test and forecast","a4e2ecb6":"### Build SARIMAX model","270a7b91":"### Kwiatkowski-Phillips-Schmidt-Shin (KPSS) test","5acad7b1":"### Differencing to remove trend","1583ec90":"### Recover original time series","06d0e56d":"## Time series Decomposition","391eeeda":"## Holt's method with trend","b5add214":"# Auto Regressive methods","1029036a":"### Calculate RMSE and MAPE","c8bf9b41":"### Plot train, test and forecast","ba4eca26":"### Augmented Dickey-Fuller (ADF) test","c58ca460":"### Mean imputation","7683826f":"## Auto regression moving average method (ARMA)","c1bfa0a4":"### Calculate RMSE and MAPE","5bb24bd9":"### Additive seasonal decomposition","df1587ad":"### Augmented Dickey-Fuller (ADF) test","f80a0883":"### Plot train, test and forecast","bb7b6f83":"## Plot time series data","5d7bcca1":"### Box plot and interquartile range","e972c447":"## Import required packages","cb65bac8":"### Calculate RSME and MAPE","9669f1bc":"### Calculate RMSE and MAPE","03c4d65a":"# Initial setup","82680216":"### Calculate RMSE and MAPE","b591850b":"### Calculate RMSE and MAPE","75237b16":"### Linear interpolation","1d31994e":"## Autocorrelation function (ACF)","a980e913":"## Seasonal auto regressive integrated moving average (SARIMA)","609a8021":"### Use linear interpolation to impute missing values","b0517f12":"### Plot train, test and forecast","924059f7":"## Moving average method (MA)","fc6d7a52":"### Plot train, test and forecast","0cafec45":"### Recover original time series","369b8210":"## Naive method","699787cd":"### Calculate RMSE and MAPE","15be9002":"# Exponential smoothing methods","41749f75":"### Plot train, test and forecast","bc1e7211":"## Seasonal auto regressive integrate moving average with exogenous variable (SARIMAX)","293cb2b1":"### Recover original time series forecast","13248f57":"### Plot train, test and forecast","dffbaa9d":"## Auto regression method (AR)","4883a2b8":"### Plot train, test and forecast","83645238":"## Import time series data: Airline passenger traffic","0ced06d9":"### Plot train, test and forecast","a4bd10db":"### Calculate RMSE and MAPE","564014d7":"## Simple exponential smoothing","c4c7d29d":"### Multiplicative seasonal decomposition","64a33279":"### Histogram plot","dadcfb82":"### Plot train, test and forecast","2733b8ce":"### Box Cox transformation to make variance constant","e65d8e45":"### Plot train, test and forecast","4445d37d":"## Outlier detection","2d26f096":"### Recover original time series forecast","727be8fa":"### Calculate RMSE and MAPE","7fe78c9c":"## Stationarity vs non-stationary time series","404d2458":"## Auto regressive integrated moving average (ARIMA)","9c17aa2b":"### Calculate RMSE and MAPE","ce71e078":"# Time series analysis","43421b1a":"## Holt Winter's multiplicative method with trend and seasonality","c0ae2186":"## Partial autocorrelation function (PACF)","1f0e7981":"## Simple moving average method","3ba10a52":"### Split promotion data into train and test data sets","eba09c0b":"### Kwiatkowski-Phillips-Schmidt-Shin (KPSS) test","3b552632":"### Import promotion data","0b6821c2":"### Recover original time series"}}