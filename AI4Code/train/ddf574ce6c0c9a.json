{"cell_type":{"cc25bb7a":"code","778abb46":"code","3a9caf29":"code","fe96ba9a":"code","ac8f0374":"code","3ca25694":"code","0487111c":"code","7f00eb15":"code","b32b6503":"code","ed57377f":"code","34c992d7":"code","2dbb708a":"code","bca8cae1":"code","115f35ad":"code","183b156e":"code","88f9d973":"code","07f6a882":"code","6892ec65":"code","a4b8e1c1":"code","27ad7a25":"code","2a4c1eb1":"code","c694e79f":"code","b507f39d":"code","2aee0720":"code","36daa83f":"code","6c794c29":"code","15152334":"code","7c676f9f":"code","aea5915e":"code","f7f0b9f2":"code","ed12e2f0":"code","02f994a4":"code","bf9f991f":"code","3cc11ad3":"code","558fdb93":"code","b5f2a1f8":"code","40460af3":"code","ef1804f3":"code","a2893fc6":"code","2ba477e8":"code","0f9e10eb":"code","ba8aadd9":"code","8345b362":"code","921e5e59":"code","1d4cf4f3":"code","87004ce5":"code","2ed56c9e":"code","9c6032d7":"code","fedd50b5":"code","34477368":"code","a4163e95":"code","f4bf8051":"code","7b29ae6e":"code","f114c830":"code","c5ee5bc2":"code","aae15fca":"code","0f14cba3":"code","cec8222b":"code","10551e6c":"code","eff536ce":"code","7a9632ca":"code","617cd5a0":"code","408e62f2":"code","05a33af9":"code","c87def67":"code","10c7f598":"code","e0d92904":"code","acb7b60b":"code","802e1bec":"code","06b1da84":"code","2bafab77":"code","e4d4311a":"code","0c35709e":"code","243d2ed7":"code","f5645ced":"code","d8f06ab9":"code","9572d802":"code","03490075":"code","81ac3b2b":"code","3c86bce0":"code","97b603d4":"code","2151dc12":"code","1664659e":"code","3450406a":"code","ff90e373":"code","88d14a44":"code","d8785cdf":"markdown","c5537ddb":"markdown","13225ea1":"markdown","9be5ab2c":"markdown","325f0535":"markdown","32e8f15e":"markdown","4e037dc1":"markdown","59e9abcb":"markdown","4b17c0b1":"markdown","fc14caca":"markdown","cb16dbe9":"markdown","50d8eb51":"markdown","b9cca3bc":"markdown","3e415506":"markdown","0eb44cd8":"markdown","b9b64b73":"markdown","9d019574":"markdown","466c037d":"markdown","ba064d21":"markdown","54ed2411":"markdown"},"source":{"cc25bb7a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport re\n\nimport pickle \n#import mglearn\nimport time\n\n\nfrom nltk.tokenize import TweetTokenizer # doesn't split at apostrophes\nimport nltk\nfrom nltk import Text\nfrom nltk.tokenize import regexp_tokenize\nfrom nltk.tokenize import word_tokenize  \nfrom nltk.tokenize import sent_tokenize \nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.stem import PorterStemmer\n\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.multiclass import OneVsRestClassifier\n\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import make_pipeline\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.svm import LinearSVC","778abb46":"# \n#nRowsRead = 1000 # specify 'None' if want to read whole file\n#movies = pd.read_csv('wiki_movie_plots_deduped.csv', delimiter=',', nrows = nRowsRead)\nmovies = pd.read_csv('..\/input\/wiki_movie_plots_deduped.csv', delimiter=',')\nmovies.dataframeName = 'wiki_movie_plots_deduped.csv'\nnRow, nCol = movies.shape\nprint(f'There are {nRow} rows and {nCol} columns')","3a9caf29":"movies.head()","fe96ba9a":"# creation of the column count for aggregation\nmovies['Count']=1\nmovies[['Genre','Count']].groupby(['Genre'], as_index=False).count().shape[0]","ac8f0374":"# harmonization\nmovies['GenreCorrected'] =movies['Genre'] \nmovies['GenreCorrected']=movies['GenreCorrected'].str.strip()\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' - ', '|')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' \/ ', '|')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('\/', '|')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' & ', '|')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(', ', '|')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('; ', '|')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('bio-pic', 'biography')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('biopic', 'biography')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('biographical', 'biography')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('biodrama', 'biography')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('bio-drama', 'biography')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('biographic', 'biography')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' \\(film genre\\)', '')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('animated','animation')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('anime','animation')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('children\\'s','children')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('comedey','comedy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('\\[not in citation given\\]','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' set 4,000 years ago in the canadian arctic','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('historical','history')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('romantic','romance')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('3-d','animation')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('3d','animation')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('viacom 18 motion pictures','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('sci-fi','science_fiction')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('ttriller','thriller')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('.','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('based on radio serial','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' on the early years of hitler','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('sci fi','science_fiction')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('science fiction','science_fiction')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' (30min)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('16\u00a0mm film','short')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('\\[140\\]','drama')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('\\[144\\]','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' for ','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('adventures','adventure')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('kung fu','martial_arts')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('kung-fu','martial_arts')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('martial arts','martial_arts')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('world war ii','war')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('world war i','war')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('biography about montreal canadiens star|maurice richard','biography')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('bholenath movies|cinekorn entertainment','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' \\(volleyball\\)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('spy film','spy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('anthology film','anthology')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('biography fim','biography')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('avant-garde','avant_garde')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('biker film','biker')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('buddy cop','buddy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('buddy film','buddy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('comedy 2-reeler','comedy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('films','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('film','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('biography of pioneering american photographer eadweard muybridge','biography')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('british-german co-production','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('bruceploitation','martial_arts')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('comedy-drama adaptation of the mordecai richler novel','comedy-drama')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('movies by the mob\\|knkspl','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('movies','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('movie','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('coming of age','coming_of_age')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('coming-of-age','coming_of_age')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('drama about child soldiers','drama')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('(( based).+)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('(( co-produced).+)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('(( adapted).+)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('(( about).+)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('musical b','musical')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('animationchildren','animation|children')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' period','period')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('drama loosely','drama')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' \\(aquatics|swimming\\)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' \\(aquatics|swimming\\)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(\"yogesh dattatraya gosavi's directorial debut \\[9\\]\",'')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(\"war-time\",\"war\")\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(\"wartime\",\"war\")\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(\"ww1\",\"war\")\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('unknown','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(\"wwii\",\"war\")\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('psychological','psycho')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('rom-coms','romance')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('true crime','crime')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('\\|007','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('slice of life','slice_of_life')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('computer animation','animation')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('gun fu','martial_arts')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('j-horror','horror')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' \\(shogi|chess\\)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('afghan war drama','war drama')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('\\|6 separate stories','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' \\(30min\\)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' (road bicycle racing)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' v-cinema','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('tv miniseries','tv_miniseries')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('\\|docudrama','\\|documentary|drama')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' in animation','|animation')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('((adaptation).+)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('((adaptated).+)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('((adapted).+)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('(( on ).+)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('american football','sports')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('dev\\|nusrat jahan','sports')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('television miniseries','tv_miniseries')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' \\(artistic\\)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' \\|direct-to-dvd','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('history dram','history drama')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('martial art','martial_arts')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('psycho thriller,','psycho thriller')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('\\|1 girl\\|3 suitors','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' \\(road bicycle racing\\)','')\nfilterE = movies['GenreCorrected']==\"ero\"\nmovies.loc[filterE,'GenreCorrected']=\"adult\"\nfilterE = movies['GenreCorrected']==\"music\"\nmovies.loc[filterE,'GenreCorrected']=\"musical\"\nfilterE = movies['GenreCorrected']==\"-\"\nmovies.loc[filterE,'GenreCorrected']=''\nfilterE = movies['GenreCorrected']==\"comedy\u2013drama\"\nmovies.loc[filterE,'GenreCorrected'] = \"comedy|drama\"\nfilterE = movies['GenreCorrected']==\"comedy\u2013horror\"\nmovies.loc[filterE,'GenreCorrected'] = \"comedy|horror\"\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(' ','|')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace(',','|')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('-','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('actionadventure','action|adventure')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('actioncomedy','action|comedy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('actiondrama','action|drama')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('actionlove','action|love')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('actionmasala','action|masala')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('actionchildren','action|children')\n\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('fantasychildren\\|','fantasy|children')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('fantasycomedy','fantasy|comedy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('fantasyperiod','fantasy|period')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('cbctv_miniseries','tv_miniseries')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('dramacomedy','drama|comedy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('dramacomedysocial','drama|comedy|social')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('dramathriller','drama|thriller')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('comedydrama','comedy|drama')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('dramathriller','drama|thriller')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('comedyhorror','comedy|horror')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('sciencefiction','science_fiction')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('adventurecomedy','adventure|comedy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('animationdrama','animation|drama')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('\\|\\|','|')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('muslim','religious')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('thriler','thriller')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('crimethriller','crime|thriller')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('fantay','fantasy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('actionthriller','action|thriller')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('comedysocial','comedy|social')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('martialarts','martial_arts')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('\\|\\(children\\|poker\\|karuta\\)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('epichistory','epic|history')\n\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('erotica','adult')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('erotic','adult')\n\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('((\\|produced\\|).+)','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('chanbara','chambara')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('comedythriller','comedy|thriller')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('biblical','religious')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('biblical','religious')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('colour\\|yellow\\|productions\\|eros\\|international','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('\\|directtodvd','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('liveaction','live|action')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('melodrama','drama')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('superheroes','superheroe')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('gangsterthriller','gangster|thriller')\n\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('heistcomedy','comedy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('heist','action')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('historic','history')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('historydisaster','history|disaster')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('warcomedy','war|comedy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('westerncomedy','western|comedy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('ancientcostume','costume')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('computeranimation','animation')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('dramatic','drama')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('familya','family')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('familya','family')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('dramedy','drama|comedy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('dramaa','drama')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('famil\\|','family')\n\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('superheroe','superhero')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('biogtaphy','biography')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('devotionalbiography','devotional|biography')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('docufiction','documentary|fiction')\n\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('familydrama','family|drama')\n\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('espionage','spy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('supeheroes','superhero')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('romancefiction','romance|fiction')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('horrorthriller','horror|thriller')\n\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('suspensethriller','suspense|thriller')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('musicaliography','musical|biography')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('triller','thriller')\n\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('\\|\\(fiction\\)','|fiction')\n\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('romanceaction','romance|action')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('romancecomedy','romance|comedy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('romancehorror','romance|horror')\n\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('romcom','romance|comedy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('rom\\|com','romance|comedy')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('satirical','satire')\n\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('science_fictionchildren','science_fiction|children')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('homosexual','adult')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('sexual','adult')\n\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('mockumentary','documentary')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('periodic','period')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('romanctic','romantic')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('politics','political')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('samurai','martial_arts')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('tv_miniseries','series')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('serial','series')\n\nfilterE = movies['GenreCorrected']==\"musical\u2013comedy\"\nmovies.loc[filterE,'GenreCorrected'] = \"musical|comedy\"\n\nfilterE = movies['GenreCorrected']==\"roman|porno\"\nmovies.loc[filterE,'GenreCorrected'] = \"adult\"\n\n\nfilterE = movies['GenreCorrected']==\"action\u2014masala\"\nmovies.loc[filterE,'GenreCorrected'] = \"action|masala\"\n\n\nfilterE = movies['GenreCorrected']==\"horror\u2013thriller\"\nmovies.loc[filterE,'GenreCorrected'] = \"horror|thriller\"\n\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('family','children')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('martial_arts','action')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('horror','thriller')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('war','action')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('adventure','action')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('science_fiction','action')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('western','action')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('western','action')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('noir','black')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('spy','action')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('superhero','action')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('social','')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('suspense','action')\n\n\nfilterE = movies['GenreCorrected']==\"drama|romance|adult|children\"\nmovies.loc[filterE,'GenreCorrected'] = \"drama|romance|adult\"\n\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('\\|\u2013\\|','|')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.strip(to_strip='\\|')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.replace('actionner','action')\nmovies['GenreCorrected']=movies['GenreCorrected'].str.strip()\n","3ca25694":"moviesGenre = movies[['GenreCorrected','Count']].groupby(['GenreCorrected']).count()\nmoviesGenre.to_csv('GenreCorrected.csv',sep=',')","0487111c":"movies[['GenreCorrected','Count']].groupby(['GenreCorrected'], as_index=False).count().shape[0]","7f00eb15":"movies[['GenreCorrected','Count']].groupby(['GenreCorrected'],as_index=False).count().sort_values(['Count'], ascending=False).head(10)","b32b6503":"movies['GenreSplit']=movies['GenreCorrected'].str.split('|')\nmovies['GenreSplit']= movies['GenreSplit'].apply(np.sort).apply(np.unique)","ed57377f":"movies['GenreSplit'][11]","34c992d7":"genres_array = np.array([])\n\nfor i in range(0,movies.shape[0]-1):\n    genres_array = np.concatenate((genres_array, movies['GenreSplit'][i] ))\n    \ngenres_array","2dbb708a":"genres = pd.DataFrame({'Genre':genres_array})","bca8cae1":"genres.head(10)","115f35ad":"# histogram for the genres is most welcome\ngenres['Count']=1\ngenres[['Genre','Count']].groupby(['Genre'], as_index=False).sum().sort_values(['Count'], ascending=False).head(10)","183b156e":"genres=genres[['Genre','Count']].groupby(['Genre'], as_index=False).sum().sort_values(['Count'], ascending=False)","88f9d973":"genres = genres[genres['Genre']!='']\ngenres.head(25)","07f6a882":"TotalCountGenres=sum(genres['Count'])","6892ec65":"TotalCountGenres","a4b8e1c1":"genres['Frequency'] = genres['Count']\/TotalCountGenres","27ad7a25":"genres['CumulativeFrequency'] = genres['Frequency'].cumsum()","2a4c1eb1":"genres.head(20)","c694e79f":"np.array(genres[genres['CumulativeFrequency']<=.957]['Genre'])","b507f39d":"genres[genres['CumulativeFrequency']<=.957][['Genre','Count']].plot(x='Genre', y='Count', kind='bar', legend=False, grid=True, figsize=(8, 5))\nplt.title(\"Number of movies per genre\")\nplt.ylabel('# of Occurrences', fontsize=12)\nplt.xlabel('Movie genres', fontsize=12)\nplt.show()","2aee0720":"mainGenres=np.array(genres[genres['CumulativeFrequency']<=.957]['Genre'])","36daa83f":"arr1=np.array(['adult', 'romance', 'drama','and'])\narr1[np.in1d(arr1,mainGenres)] # genres not in the mainGenres array will be deleted\n","6c794c29":"movies['GenreSplit'][10:12].apply(lambda x: x[np.in1d(x,mainGenres)])","15152334":"movies['GenreSplitMain'] = movies['GenreSplit'].apply(lambda x: x[np.in1d(x,mainGenres)])","7c676f9f":"movies[['GenreSplitMain','GenreSplit','Genre']][200:220]","aea5915e":"# function for cleaning the plots of the movies\ndef clean_text(text):\n    text = text.lower()\n    text = re.sub(r\"what's\", \"what is \", text)\n    text = re.sub(r\"\\'s\", \" \", text)\n    text = re.sub(r\"\\'ve\", \" have \", text)\n    text = re.sub(r\"can't\", \"can not \", text)\n    text = re.sub(r\"n't\", \" not \", text)\n    text = re.sub(r\"i'm\", \"i am \", text)\n    text = re.sub(r\"\\'re\", \" are \", text)\n    text = re.sub(r\"\\'d\", \" would \", text)\n    text = re.sub(r\"\\'ll\", \" will \", text)\n    text = re.sub(r\"\\'scuse\", \" excuse \", text)\n    #text = re.sub('\\W', ' ', text)\n    #text = re.sub('\\s+', ' ', text)\n    text = text.strip(' ')\n    return text","f7f0b9f2":"list(movies['Plot'][10:12].apply(clean_text))","ed12e2f0":"list(movies['Plot'][10:12])","02f994a4":"movies['PlotClean'] = movies['Plot'].apply(clean_text)","bf9f991f":"movies[['Plot','PlotClean','GenreSplitMain']][6:12]","3cc11ad3":"len(movies['GenreSplitMain'][0])","558fdb93":"movies['GenreSplitMain'][0:5].apply(len)","b5f2a1f8":"movies['MainGenresCount'] = movies['GenreSplitMain'].apply(len)","40460af3":"max(movies['MainGenresCount'] )","ef1804f3":"movies[movies['MainGenresCount']==7]","a2893fc6":"movies['MainGenresCount'].hist()\n\nplt.title(\"Number of movies by number of genres\")\nplt.ylabel('# of movies', fontsize=12)\nplt.xlabel('# of genres', fontsize=12)\nplt.show()","2ba477e8":"txt = [\"He is ::having a great Time, at the park time?\",\n       \"She, unlike most women, is a big player on the park's grass.\",\n       \"she can't be going\"]\n","0f9e10eb":"txt","ba8aadd9":"\n# Initialize a CountVectorizer object: count_vectorizer\ncount_vec = CountVectorizer(stop_words=\"english\", analyzer='word', \n                            ngram_range=(1, 1), max_df=1.0, min_df=1, max_features=None)","8345b362":"# Transforms the data into a bag of words\ncount_train = count_vec.fit(txt)\nbag_of_words = count_vec.transform(txt)\n\n# Print the first 10 features of the count_vec\nprint(\"Every feature:\\n{}\".format(count_vec.get_feature_names()))\nprint(\"\\nEvery 3rd feature:\\n{}\".format(count_vec.get_feature_names()[::3]))","921e5e59":"count_vec.fit_transform(txt).toarray()","1d4cf4f3":"count_vec.get_feature_names()[:3]","87004ce5":"#z = movies.GenreSplitMain.str.split()\nmovies.GenreSplitMain[6:15].apply(lambda x: '-'.join(x)).str.split(pat='-',n=5,expand=True)","2ed56c9e":"movies.GenreSplitMain[6:15].apply(lambda x: '-'.join(x)).str.get_dummies(sep='-')","9c6032d7":"movies.GenreSplitMain[6:15]","fedd50b5":"movies.columns","34477368":"movies.shape","a4163e95":"len(movies.Title.unique()) # the title is not unique","f4bf8051":"# The number of movies not having a genre\nmovies[movies.GenreCorrected==''].shape","7b29ae6e":"# the dummy classes\nmovies = pd.concat([movies, movies.GenreSplitMain.apply(lambda x: '-'.join(x)).str.get_dummies(sep='-')], axis=1)","f114c830":"# the train and the test data set will be build when there is at least one genre for a movie\nMoviesTrain, MoviesTest = train_test_split(movies[movies.GenreCorrected!=''], random_state=42, test_size=0.30, shuffle=True)","c5ee5bc2":"# definition the algorithm for feature extraction\ntfidf = TfidfVectorizer(stop_words ='english', smooth_idf=False, sublinear_tf=False, norm=None, analyzer='word')","aae15fca":"# building the features\nx_train = tfidf.fit_transform(MoviesTrain.PlotClean) \nx_test  = tfidf.transform(MoviesTest.PlotClean)\n### for test data, the feature extraction will be done through the function transform()\n### to make sure there is no features dimensionality mismatch","0f14cba3":"print('nrow of the MoviesTrain ={}'. format(MoviesTrain.shape[0]))","cec8222b":"print('nrow of the MoviesTest ={}'. format(MoviesTest.shape[0]))","10551e6c":"type(x_train)","eff536ce":"x_train.toarray()","7a9632ca":"tfidf.inverse_transform(x_train[0].toarray())","617cd5a0":"print('The corpus is huge. It contain {} words.'.format(len(x_train[0].toarray()[0])))","408e62f2":"# building the classes\ny_train = MoviesTrain[MoviesTrain.columns[14:]]\ny_test = MoviesTest[MoviesTest.columns[14:]]","05a33af9":"len(y_train.columns)","c87def67":"len(y_test.columns)","10c7f598":"multinomialNB=OneVsRestClassifier(MultinomialNB(fit_prior=True, class_prior=None))","e0d92904":"# fitting\nmultinomialNB.fit(x_train, y_train.action)","acb7b60b":"# compute the testing accuracy\nprediction = multinomialNB.predict(x_test)","802e1bec":"print('Test accuracy is {}'.format(accuracy_score(y_test.action, prediction)))","06b1da84":"len(mainGenres)","2bafab77":"accuracy_multinomialNB=pd.DataFrame(columns=['Genre', 'accuracy_multinomialNB'])\naccuracy_multinomialNB.head()","e4d4311a":"i = 0\nfor genre in mainGenres:\n    multinomialNB.fit(x_train, y_train[genre])\n    prediction = multinomialNB.predict(x_test)\n    accuracy_multinomialNB.loc[i,'Genre'] = genre\n    accuracy_multinomialNB.loc[i,'accuracy_multinomialNB'] = accuracy_score(y_test[genre], prediction)\n    i=i+1\n    \n\n    \naccuracy_multinomialNB","0c35709e":"linearSVC=OneVsRestClassifier(LinearSVC(), n_jobs=1)","243d2ed7":"accuracy_LinearSVC=pd.DataFrame(columns=['Genre', 'accuracy_LinearSVC'])\naccuracy_LinearSVC.head()","f5645ced":"  \ni = 0\nfor genre in mainGenres:\n    linearSVC.fit(x_train, y_train[genre])\n    prediction = linearSVC.predict(x_test)\n    accuracy_LinearSVC.loc[i,'Genre'] = genre\n    accuracy_LinearSVC.loc[i,'accuracy_LinearSVC'] = accuracy_score(y_test[genre], prediction)\n    i=i+1","d8f06ab9":"accuracy_LinearSVC","9572d802":"# merging the accuracy tables\naccuracy_svc_mnb = pd.merge(accuracy_multinomialNB, accuracy_LinearSVC, on='Genre', how='inner')","03490075":"accuracy_svc_mnb","81ac3b2b":"plt.figure(figsize=(18,10))\np1 =plt.bar(accuracy_svc_mnb.Genre, height=accuracy_svc_mnb.accuracy_multinomialNB)\np2 =plt.bar(accuracy_svc_mnb.Genre, height=accuracy_svc_mnb.accuracy_LinearSVC)\nplt.xticks( rotation=90)\nplt.title(\"Movies genre classification accuracy (multinomialNB VS LinearSVC)\")\nplt.ylabel('accuracy', fontsize=14)\nplt.xlabel('Movie genres', fontsize=14)\nplt.legend((p1[0], p2[0]), ('multinomialNB', 'LinearSVC'))\nplt.show()\n\n\n# the graph is not showing the comparison between the 2 classifiers.","3c86bce0":"#accuracy_multinomialNB, accuracy_LinearSVC\n\naccuracy_multinomialNB1 = accuracy_multinomialNB\naccuracy_multinomialNB1.columns = ['Genre', 'accuracy']\naccuracy_multinomialNB1['classifier'] = 'multinomialNB'","97b603d4":"accuracy_multinomialNB1","2151dc12":"#accuracy_multinomialNB, accuracy_LinearSVC\n\naccuracy_LinearSVC1 = accuracy_LinearSVC\naccuracy_LinearSVC1.columns = ['Genre', 'accuracy']\naccuracy_LinearSVC1['classifier'] = 'linearSVC'","1664659e":"accuracy_LinearSVC1","3450406a":"accu_mnb_svc = accuracy_multinomialNB1.append(accuracy_LinearSVC1)","ff90e373":"accu_mnb_svc","88d14a44":"sns.set(rc={'figure.figsize':(18,10)})\nsns.set(style=\"whitegrid\")\ns = sns.barplot(x=\"Genre\", y=\"accuracy\", hue=\"classifier\", data=accu_mnb_svc) #.set_title('Movies genre classification accuracy (multinomialNB VS LinearSVC)')\ns.set_title('Movies genre classification accuracy (multinomialNB VS LinearSVC)', size=16)\ns.set_xticklabels(list(mainGenres) ,rotation=45, size=15)\n","d8785cdf":"## 4. Conclusion\n\nBelow are the main conclusions of this kernel:\n\n* Both algorithms MultinomialNB and LinearSVC showed very good accuracy rate even though LinearSVC  did not success to converge for some genre. The lowest accuracy rate is arond 66% and the best accuracy rate above 99%.\n* Multinomial Naive Bayes Classification is much faster compared to LinearSVC. In addition, it has no convergence issues. So, I would recommend it for this case of movie genre classifications.\n\n**Limitations**\n\nNon frequent genres of movies are also well classified (around 99%). Nevertheless, the reliability of the accuracy rate needs further checkings.\n\nExample: The genre `politic` is observed in 60 movies (out of 36k movies). So how much reliable the accuracy rate for the non frequent genre?","c5537ddb":"There are 2265 different genres movies.\n\nIt is not possible to build an ML algorithm having a good accuracy to estimate the genre of movies for the following reasons:\n\n* the number of classes is very high\n* many classes have very few observation.","13225ea1":"## 2. Movies genres cleansing","9be5ab2c":"**Number of movies for each genres**","325f0535":"**Features**","32e8f15e":"### 3.1.Quick tutorial on CountVectorizer and TfidfVectorizer\n\nreference:\n\n* [https:\/\/www.kaggle.com\/adamschroeder\/countvectorizer-tfidfvectorizer-predict-comments](https:\/\/www.kaggle.com\/adamschroeder\/countvectorizer-tfidfvectorizer-predict-comments)\n\n* [https:\/\/towardsdatascience.com\/multi-label-text-classification-with-scikit-learn-30714b7819c5](https:\/\/towardsdatascience.com\/multi-label-text-classification-with-scikit-learn-30714b7819c5)","4e037dc1":"**Selecting the genres having a cumulative frequency 95.7% and below**","59e9abcb":"#### Movies genre classification\n\nThe objective of this article is to develop a ML algorithm for the  classification of the multiple genres of a movie based on its plot.\n\nTo do so, the kernel is organized in 4 main parts:\n\n* part 1: it describes the list libraries being used in this kernel.\n* part 2: it is about data cleansing and identification of the genres to be used for the classification of the movies. It this kernel, the genres that are used to classify ~96% of movies will be used building the classification algorithms.\n* part 3: the classification algorithms MultinomialNB (Multinomial Naive Bayes Classification) and the Linear Support Vector Classification (LinearSVC) will be used on movies data.\n* part 4:  conclusion\n","4b17c0b1":"### 3.2. Building the classification algorithms\n\nSteps to be done:\n\n1. Building the classes: one dummy variable for each genre. In this final project, there are 20 genres of movies.\n2. Split the data in Train and Test \n3. Building the features based on TfidfVectorizer\n","fc14caca":"### 2.2. Identification of the genres to be selected","cb16dbe9":"**Linear Support Vector Classification for all the movie genres**","50d8eb51":"### 2.1. Cleansing","b9cca3bc":"## 1. Libraries to be used","3e415506":"**multinomial Naive Bayes Classification for all the movie genres**","0eb44cd8":"**Quick check of the multinomial Naive Bayes Classification**","b9b64b73":"It seems to be the 2 classification algorithms are giving almost the same result.","9d019574":"**Dummy classes**","466c037d":"## 3. Classifiers Training","ba064d21":"After harmonization, the number of movies genres decreased 2265 from 1198\n\n**Overview of the genre after cleansing**","54ed2411":"**train_test_split**"}}