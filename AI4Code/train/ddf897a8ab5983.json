{"cell_type":{"1f1c1c90":"code","36362076":"code","f0e4926c":"code","57c8b616":"code","d6386547":"code","9fa7282d":"code","5810152b":"code","6576ffbf":"code","710c8327":"code","5045f55f":"code","2e133a99":"code","3ed7c0fc":"code","996e22a7":"code","657f959e":"code","0852cdaf":"code","31e4d18e":"code","25f467de":"code","7cfdbf2d":"code","c6ee2345":"code","ea275269":"code","c67d3a89":"code","ecb29f3c":"code","85cd9d50":"code","4d0b3659":"code","06be970f":"code","84d4278f":"code","6660adbb":"code","bf18ac0e":"code","8ee56ae8":"code","032e802b":"code","9a6573d4":"code","35dc357d":"code","a239ec1f":"code","565fadce":"code","10870495":"code","f6a35a64":"code","a9d46f95":"code","8448b9fa":"code","426ffadb":"code","724be48a":"code","6b1297e6":"code","fb116ca9":"code","33e5988d":"code","9e925d45":"code","62bb1ae9":"code","c8fa0410":"code","01de0370":"code","c9b239a8":"code","e6b4ec70":"code","628992ac":"code","c0356f0a":"code","ce9f8746":"code","769c7a43":"code","3d407fac":"code","36c319a0":"code","abbf7189":"markdown","ae130c81":"markdown","7222f805":"markdown","30b3e81a":"markdown","77d56f64":"markdown","70718552":"markdown","3061d0e1":"markdown","9bb64cc8":"markdown"},"source":{"1f1c1c90":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as plt\nimport sklearn\nimport os\nimport re\nimport statsmodels.api as sm\nimport warnings\nwarnings.filterwarnings('ignore')","36362076":"BirthRate = pd.read_csv(\"..\/input\/HappinessIndexPredictionIndicators\/Birth Rate.csv\")\n","f0e4926c":"Country = pd.read_csv(\"..\/input\/happiness-index-country-wise\/2018 Happiness.csv\")\nCountry.columns","57c8b616":"Country =Country.drop(['Overall rank', 'Score', 'GDP per capita',\n       'Social support', 'Healthy life expectancy',\n       'Freedom to make life choices', 'Generosity',\n       'Perceptions of corruption'], axis=1)\nCountry","d6386547":"df = pd.merge(Country, BirthRate, on='Country Name', how='inner')","9fa7282d":"df","5810152b":"df.shape","6576ffbf":"df.info()","710c8327":"df.isnull().sum()","5045f55f":"df.columns","2e133a99":"df = df.drop(['1960', '1961', '1962', '1963', '1964', '1965', '1966',\n       '1967', '1968', '1969', '1970', '1971', '1972', '1973', '1974', '1975',\n       '1976', '1977', '1978', '1979', '1980', '1981', '1982', '1983', '1984',\n       '1985', '1986', '1987', '1988', '1989', '1990', '1991', '1992', '1993',\n       '1994', '1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002',\n       '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2020', 'Country Code', 'Indicator Code'], axis=1)","3ed7c0fc":"df.isnull().sum()","996e22a7":"df= df.drop(['Country Name'], axis=1)\ndf\nT = df.transpose()\nT","657f959e":"pred_list = []\nfor i in T.columns:\n    A = T[i]\n    List = A.values.tolist()\n    # AR example\n    from statsmodels.tsa.ar_model import AutoReg\n    # fit model\n    model = AutoReg(List, 1)\n    model_fit = model.fit()\n    yhat = model_fit.predict(len(List), len(List))\n    pred_list.append(yhat)\npred_list","0852cdaf":"B =pd.DataFrame(pred_list)\nB","31e4d18e":"Final = pd.concat([Country, B], axis=1)\nFinal","25f467de":"ForBR= Final.dropna()\nForBR","7cfdbf2d":"DeathRate = pd.read_csv(\"..\/input\/HappinessIndexPredictionIndicators\/Death Rate.csv\")","c6ee2345":"Country = pd.read_csv(\"..\/input\/happiness-index-country-wise\/2018 Happiness.csv\")","ea275269":"Country = Country['Country Name']","c67d3a89":"df_DR = pd.merge(Country, DeathRate, on='Country Name', how='inner')","ecb29f3c":"df_DR = df_DR.drop(['1960', '1961', '1962', '1963', '1964', '1965', '1966',\n       '1967', '1968', '1969', '1970', '1971', '1972', '1973', '1974', '1975',\n       '1976', '1977', '1978', '1979', '1980', '1981', '1982', '1983', '1984',\n       '1985', '1986', '1987', '1988', '1989', '1990', '1991', '1992', '1993',\n       '1994', '1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002',\n       '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2020', 'Country Code', 'Indicator Code', 'Indicator Name'], axis=1)","85cd9d50":"df_DR.isnull().sum()","4d0b3659":"df_DR= df_DR.drop(['Country Name'], axis=1)\nT_DR = df_DR.transpose()\n\npred_list_DR = []\nfor i in T_DR.columns:\n    A = T_DR[i]\n    List_DR = A.values.tolist()\n    \n    from statsmodels.tsa.ar_model import AutoReg\n    # fit model\n    model = AutoReg(List_DR, 1)\n    model_fit = model.fit()\n    dr = model_fit.predict(len(List_DR), len(List_DR))\n    pred_list_DR.append(dr)\npred_list_DR\n\nB_DR =pd.DataFrame(pred_list_DR)\nFinal_DR = pd.concat([Country, B_DR], axis=1)\nForDR= Final_DR.dropna()\nForDR","06be970f":"EMP = pd.read_csv(\"..\/input\/HappinessIndexPredictionIndicators\/Employment.csv\")","84d4278f":"df_EMP = pd.merge(Country,EMP, on='Country Name', how='inner')","6660adbb":"df_EMP = df_EMP.drop(['1960', '1961', '1962', '1963', '1964', '1965', '1966',\n       '1967', '1968', '1969', '1970', '1971', '1972', '1973', '1974', '1975',\n       '1976', '1977', '1978', '1979', '1980', '1981', '1982', '1983', '1984',\n       '1985', '1986', '1987', '1988', '1989', '1990', '1991', '1992', '1993',\n       '1994', '1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002',\n       '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2020', 'Country Code', 'Indicator Code', 'Indicator Name'], axis=1)","bf18ac0e":"df_EMP=df_EMP.dropna()\ndf_EMP.isnull().sum()","8ee56ae8":"df_EMP= df_EMP.drop(['Country Name'], axis=1)\nT_EMP = df_EMP.transpose()\n\npred_list_EMP = []\nfor i in T_EMP.columns:\n    A = T_EMP[i]\n    List_EMP = A.values.tolist()\n    \n    \n    # fit model\n    model = AutoReg(List_EMP, 1)\n    model_fit = model.fit()\n    emp = model_fit.predict(len(List_EMP), len(List_EMP))\n    pred_list_EMP.append(emp)\npred_list_EMP\n\nB_EMP =pd.DataFrame(pred_list_EMP)\nFinal_EMP = pd.concat([Country, B_EMP], axis=1)\nForEMP= Final_EMP.dropna()\nForEMP","032e802b":"GDP = pd.read_csv(\"..\/input\/HappinessIndexPredictionIndicators\/GDP.csv\")\ndf_GDP = pd.merge(Country,GDP, on='Country Name', how='inner')","9a6573d4":"df_GDP = df_GDP.drop(['1960', '1961', '1962', '1963', '1964', '1965', '1966',\n       '1967', '1968', '1969', '1970', '1971', '1972', '1973', '1974', '1975',\n       '1976', '1977', '1978', '1979', '1980', '1981', '1982', '1983', '1984',\n       '1985', '1986', '1987', '1988', '1989', '1990', '1991', '1992', '1993',\n       '1994', '1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002',\n       '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2020', 'Country Code', 'Indicator Code', 'Indicator Name'], axis=1)","35dc357d":"df_GDP=df_GDP.dropna()\ndf_GDP.isnull().sum()","a239ec1f":"df_GDP= df_GDP.drop(['Country Name'], axis=1)\nT_GDP = df_GDP.transpose()\n\npred_list_GDP = []\nfor i in T_GDP.columns:\n    A = T_GDP[i]\n    List_GDP = A.values.tolist()\n    \n    \n    # fit model\n    model = AutoReg(List_GDP, 1)\n    model_fit = model.fit()\n    gdp = model_fit.predict(len(List_GDP), len(List_GDP))\n    pred_list_GDP.append(gdp)\npred_list_GDP\n\nB_GDP =pd.DataFrame(pred_list_GDP)\nFinal_GDP = pd.concat([Country, B_GDP], axis=1)\nForGDP= Final_GDP.dropna()\nForGDP","565fadce":"LE = pd.read_csv(\"..\/input\/HappinessIndexPredictionIndicators\/Life Expectancy.csv\")\ndf_LE = pd.merge(Country,LE, on='Country Name', how='inner')","10870495":"df_LE = df_LE.drop(['1960', '1961', '1962', '1963', '1964', '1965', '1966',\n       '1967', '1968', '1969', '1970', '1971', '1972', '1973', '1974', '1975',\n       '1976', '1977', '1978', '1979', '1980', '1981', '1982', '1983', '1984',\n       '1985', '1986', '1987', '1988', '1989', '1990', '1991', '1992', '1993',\n       '1994', '1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002',\n       '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2020', 'Country Code', 'Indicator Code', 'Indicator Name'], axis=1)","f6a35a64":"df_LE=df_LE.dropna()\ndf_LE.isnull().sum()","a9d46f95":"df_LE= df_LE.drop(['Country Name'], axis=1)\nT_LE = df_LE.transpose()\n\npred_list_LE = []\nfor i in T_LE.columns:\n    A = T_LE[i]\n    List_LE = A.values.tolist()\n    \n    \n    model = AutoReg(List_LE, 1)\n    model_fit = model.fit()\n    le = model_fit.predict(len(List_LE), len(List_LE))\n    pred_list_LE.append(le)\npred_list_LE\n\nB_LE =pd.DataFrame(pred_list_LE)\nFinal_LE = pd.concat([Country, B_LE], axis=1)\nForLE= Final_LE.dropna()\nForLE","8448b9fa":"P = pd.read_csv(\"..\/input\/HappinessIndexPredictionIndicators\/Population.csv\")\ndf_P = pd.merge(Country,P, on='Country Name', how='inner')","426ffadb":"df_P = df_P.drop(['1960', '1961', '1962', '1963', '1964', '1965', '1966',\n       '1967', '1968', '1969', '1970', '1971', '1972', '1973', '1974', '1975',\n       '1976', '1977', '1978', '1979', '1980', '1981', '1982', '1983', '1984',\n       '1985', '1986', '1987', '1988', '1989', '1990', '1991', '1992', '1993',\n       '1994', '1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002',\n       '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2020', 'Country Code', 'Indicator Code', 'Indicator Name'], axis=1)","724be48a":"df_P=df_P.dropna()\ndf_P.isnull().sum()","6b1297e6":"df_P= df_P.drop(['Country Name'], axis=1)\nT_P = df_P.transpose()\n\npred_list_P = []\nfor i in T_P.columns:\n    A = T_P[i]\n    List_P = A.values.tolist()\n    \n    \n    model = AutoReg(List_P, 1)\n    model_fit = model.fit()\n    p = model_fit.predict(len(List_P), len(List_P))\n    pred_list_P.append(p)\npred_list_P\n\nB_P =pd.DataFrame(pred_list_P)\nFinal_P = pd.concat([Country, B_P], axis=1)\nForP= Final_P.dropna()\nForP","fb116ca9":"W = pd.read_csv(\"..\/input\/HappinessIndexPredictionIndicators\/Water.csv\")\ndf_W = pd.merge(Country,W, on='Country Name', how='inner')","33e5988d":"df_W = df_W.drop(['1960', '1961', '1962', '1963', '1964', '1965', '1966',\n       '1967', '1968', '1969', '1970', '1971', '1972', '1973', '1974', '1975',\n       '1976', '1977', '1978', '1979', '1980', '1981', '1982', '1983', '1984',\n       '1985', '1986', '1987', '1988', '1989', '1990', '1991', '1992', '1993',\n       '1994', '1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002',\n       '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2020', 'Country Code', 'Indicator Code', 'Indicator Name'], axis=1)","9e925d45":"df_W=df_W.dropna()\ndf_W.isnull().sum()","62bb1ae9":"df_W= df_W.drop(['Country Name'], axis=1)\nT_W = df_W.transpose()\n\npred_list_W = []\nfor i in T_W.columns:\n    A = T_W[i]\n    List_W = A.values.tolist()\n    \n    \n    model = AutoReg(List_W, 1)\n    model_fit = model.fit()\n    w = model_fit.predict(len(List_W), len(List_W))\n    pred_list_W.append(w)\npred_list_W\n\nB_W =pd.DataFrame(pred_list_W)\nFinal_W = pd.concat([Country, B_W], axis=1)\nForW= Final_W.dropna()\nForW","c8fa0410":"from functools import reduce\ndata_frames = [ForW,ForP,ForLE,ForGDP,ForEMP, ForDR, ForBR]\nPredictedIndices = reduce(lambda  left,right: pd.merge(left,right,on=['Country Name'],\n                                            how='outer'), data_frames)\nPredictedIndices=PredictedIndices.dropna()\nPredictedIndices= PredictedIndices.set_axis(['Country Name', 'Water', 'Population', 'Life Expectancy', 'GDP', 'Employment', 'Death Rate','Birth Rate'], axis=1, inplace=False)\nPredictedIndices","01de0370":"pip install chart-studio","c9b239a8":"import chart_studio\nfrom chart_studio import plotly\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\ndata6 = dict(type = 'choropleth', \n           locations = PredictedIndices ['Country Name'],\n           locationmode = 'country names',\n           z = PredictedIndices['Water'], \n           text = PredictedIndices['Country Name'],\n          colorscale = 'Viridis', reversescale = False)\nlayout = dict(title = 'Water Usage Across the World', \n             geo = dict(showframe = False, \n                       projection = {'type': 'mercator'}))\nchoromap6 = go.Figure(data = [data6], layout=layout)\niplot(choromap6)","e6b4ec70":"data1 = dict(type = 'choropleth', \n           locations = PredictedIndices ['Country Name'],\n           locationmode = 'country names',\n           z = PredictedIndices['Population'], \n           text = PredictedIndices['Country Name'],\n          colorscale = 'twilight', reversescale = False)\nlayout = dict(title = 'World Population', \n             geo = dict(showframe = False, \n                       projection = {'type': 'mercator'}))\nchoromap1 = go.Figure(data = [data1], layout=layout)\niplot(choromap1)","628992ac":"data2 = dict(type = 'choropleth', \n           locations = PredictedIndices ['Country Name'],\n           locationmode = 'country names',\n           z = PredictedIndices['Life Expectancy'], \n           text = PredictedIndices['Country Name'],\n          colorscale = 'cividis', reversescale = False)\nlayout = dict(title = 'World Life Expectancy', \n             geo = dict(showframe = False, \n                       projection = {'type': 'mercator'}))\nchoromap2 = go.Figure(data = [data2], layout=layout)\niplot(choromap2)","c0356f0a":"data3 = dict(type = 'choropleth', \n           locations = PredictedIndices ['Country Name'],\n           locationmode = 'country names',\n           z = PredictedIndices['GDP'], \n           text = PredictedIndices['Country Name'],\n          colorscale = 'magma', reversescale = False)\nlayout = dict(title = 'GDP', \n             geo = dict(showframe = False, \n                       projection = {'type': 'mercator'}))\nchoromap3 = go.Figure(data = [data3], layout=layout)\niplot(choromap3)","ce9f8746":"data4 = dict(type = 'choropleth', \n           locations = PredictedIndices ['Country Name'],\n           locationmode = 'country names',\n           z = PredictedIndices['Death Rate'], \n           text = PredictedIndices['Country Name'],\n          colorscale = 'inferno', reversescale = False)\nlayout = dict(title = 'Death Rate', \n             geo = dict(showframe = False, \n                       projection = {'type': 'mercator'}))\nchoromap4 = go.Figure(data = [data4], layout=layout)\niplot(choromap4)","769c7a43":"data5 = dict(type = 'choropleth', \n           locations = PredictedIndices ['Country Name'],\n           locationmode = 'country names',\n           z = PredictedIndices['Birth Rate'], \n           text = PredictedIndices['Country Name'],\n          colorscale = 'plasma', reversescale = False)\nlayout = dict(title = 'Birth Rate', \n             geo = dict(showframe = False, \n                       projection = {'type': 'mercator'}))\nchoromap5 = go.Figure(data = [data5], layout=layout)\niplot(choromap5)","3d407fac":"data7 = dict(type = 'choropleth', \n           locations = PredictedIndices ['Country Name'],\n           locationmode = 'country names',\n           z = PredictedIndices['Employment'], \n           text = PredictedIndices['Country Name'],\n          colorscale = 'armyrose', reversescale = False)\nlayout = dict(title = 'Employment', \n             geo = dict(showframe = False, \n                       projection = {'type': 'mercator'}))\nchoromap7 = go.Figure(data = [data7], layout=layout)\niplot(choromap7)","36c319a0":"PredictedIndices.to_csv('ForecastedIndices.csv')","abbf7189":"# Employment Rate","ae130c81":"# Death Rate","7222f805":"# GDP","30b3e81a":"# Birth Rate","77d56f64":"# Forecasted Indices for Year 2020","70718552":"# Life Expectancy ","3061d0e1":"# Population","9bb64cc8":"# Access to Drinking Water"}}