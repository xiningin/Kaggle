{"cell_type":{"f4d41d6d":"code","531384a4":"code","6a15edfb":"code","eb1e59fe":"code","50203ddf":"code","a66340f4":"code","c5c91632":"code","b9ed7571":"code","f9b942d7":"code","51759598":"code","58062f5d":"code","e1a4c20f":"code","c2aa8045":"code","be7cc747":"code","ee028094":"code","a56ea92b":"code","84411591":"code","aace30dd":"code","65839eaa":"code","b2ad3e88":"code","642a9d49":"code","b951772c":"code","6a083789":"code","cdbe54fd":"code","e62ca04c":"code","1c5fe648":"code","5b08c181":"code","d15296be":"code","44f86091":"code","c21c5166":"code","39101f10":"code","5998403e":"code","b8ed4cd9":"code","ba3a7613":"code","1f281360":"code","bbdbf3a5":"code","fbf93d51":"code","3a533ea2":"code","1b38dbc0":"code","7f4ea48c":"code","ee7a938b":"code","c9efff69":"code","7f9e25d1":"code","374f433f":"code","e5d390fc":"code","849d772e":"code","d497fb66":"code","07eeb689":"code","1e7f7d29":"code","6d3474d9":"code","f20aea29":"code","eaaa4114":"code","b955e2fa":"code","fe01e8de":"code","cab6bad5":"code","35aa977e":"code","a73699b1":"code","d51c5df6":"code","90e9dda4":"markdown"},"source":{"f4d41d6d":"# Data Understanding\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LogisticRegression  \nfrom sklearn.neighbors import KNeighborsClassifier  \nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \nwarnings.filterwarnings(\"ignore\", category=FutureWarning) \nwarnings.filterwarnings(\"ignore\", category=UserWarning) \n\n%config InlineBackend.figure_format = 'retina'\n\n# to display all columns and rows:\npd.set_option('display.max_columns', None); pd.set_option('display.max_rows', None);","531384a4":"#Data Download\nchurn = pd.read_csv(\"..\/input\/churn-prediction\/Churn_Modelling.csv\")","6a15edfb":"#Data Understanding\ndf = churn.copy()","eb1e59fe":"df.head()","50203ddf":"df.info()","a66340f4":"df.shape","c5c91632":"#Missing Values\ndf.isnull().sum()","b9ed7571":"#Unique Values\ndf.nunique()","f9b942d7":"df.index","51759598":"df.columns","58062f5d":"df.head()","e1a4c20f":"df.describe([0.10, 0.25, 0.50, 0.75, 0.90, 0.95, 0.99]).T","c2aa8045":"# \"CustomerId\" ve \"Surname\" s\u00fctunlar\u0131n\u0131 \u00e7\u0131kar\u0131yoruz \u00e7\u00fcnk\u00fc bizim i\u00e7in bir anlam ifade etmiyorlar.\ndf.drop([\"CustomerId\", \"Surname\"], axis=1, inplace=True)","be7cc747":"# \"RowNumber\" s\u00fctununu da \u00e7\u0131kar\u0131yoruz.\ndf.drop([\"RowNumber\"], axis = 1, inplace = True)","ee028094":"df.head()","a56ea92b":"df.dtypes","84411591":"#Kategorik Degisken Analizi\ncat_cols = [col for col in df.columns if df[col].dtype == \"O\"] # ['Geography', 'Gender']\nprint('Number of Categorical Variables : ', len(cat_cols), '-->', cat_cols)","aace30dd":"#Say\u0131sal Degisken Analizi\nnum_cols = [col for col in df.columns if df[col].dtypes != \"O\" and col not in ['Exited']]\nprint('Number of Numerical Variables : ', len(num_cols), '-->', num_cols) # ['CreditScore', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'HasCrCard', 'IsActiveMember', 'EstimatedSalary']","65839eaa":"#Redifine\nnum_cols = ['CreditScore', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'EstimatedSalary']\nprint('Number of Numnerical Variables : ', len(num_cols), '-->', num_cols)\n\ncat_cols = ['Geography', 'Gender', 'HasCrCard', 'IsActiveMember']\nprint('Number of Categorical Variables : ', len(cat_cols), '-->', cat_cols)\n","b2ad3e88":"df[cat_cols].nunique()","642a9d49":"labels = 'Exited', 'Retained'\nsizes = [df.Exited[df['Exited']==1].count(), df.Exited[df['Exited']==0].count()]\nexplode = (0, 0.1)\nfig1, ax1 = plt.subplots(figsize=(10, 8))\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.title(\"Proportion of customer churned and retained\", size = 20)\nplt.show()","b951772c":"# Plot histograms for the dataset\ndf.hist(bins=20, figsize=(15, 15), color='b');\nplt.show()","6a083789":"#Target Analysis\ndf[\"Exited\"].value_counts()","cdbe54fd":"sns.countplot(x='Exited', data=df);\nplt.show()","e62ca04c":"# ANALYSIS OF NUMERCIAL VARIABLES IN COMPARISON WITH EACH OTHER\nsns.pairplot(df, hue='Exited');\nplt.show()","1c5fe648":"#Feature Engineering","5b08c181":"df[\"CreditScore\"].describe()","d15296be":"df[\"CreditScoreRanges\"] = pd.cut(x=df[\"CreditScore\"], bins=[300, 500, 600, 700, 800, 850], labels = [1, 2, 3, 4, 5])\ncat_cols.append(\"CreditScoreRanges\")","44f86091":"df.groupby([\"Exited\", \"CreditScoreRanges\"]).describe()","c21c5166":"df[[\"CreditScoreRanges\"]].value_counts()","39101f10":"df.groupby([\"CreditScoreRanges\"]).agg({\"Exited\": [np.mean, np.size]})","5998403e":"df[\"Tenure\/NumOfProducts\"] = df[\"Tenure\"]\/df[\"NumOfProducts\"]\nnum_cols.append(\"Tenure\/NumOfProducts\")","b8ed4cd9":"sns.boxplot(x=\"Exited\", y=\"Tenure\/NumOfProducts\", data=df)\nplt.show()","ba3a7613":"df[\"EstimatedSalary\/Age\"] = df[\"EstimatedSalary\"]\/df[\"Age\"]\nnum_cols.append(\"EstimatedSalary\/Age\")","1f281360":"sns.boxplot(x=\"Exited\", y=\"EstimatedSalary\/Age\", data=df)\nplt.show()","bbdbf3a5":"df[\"Tenure\/Age\"] = df[\"Tenure\"]\/df[\"Age\"]\nnum_cols.append(\"Tenure\/Age\")","fbf93d51":"sns.boxplot(x=\"Exited\", y=\"Tenure\/Age\", data=df)\nplt.show()","3a533ea2":"df[\"Balance\/EstimatedSalary\"] = df[\"Balance\"]\/df[\"EstimatedSalary\"]\nnum_cols.append(\"Balance\/EstimatedSalary\")","1b38dbc0":"sns.boxplot(x=\"Exited\", y=\"Balance\/EstimatedSalary\", data=df)\nplt.show()","7f4ea48c":"df[\"EstimatedSalary\/Tenure\"] = df[\"EstimatedSalary\"]\/df[\"Tenure\"]\nnum_cols.append(\"EstimatedSalary\/Tenure\")","ee7a938b":"sns.boxplot(x=\"Exited\", y=\"EstimatedSalary\/Tenure\", data=df)\nplt.show()","c9efff69":"# 405 de\u011ferinin alt\u0131ndakilerin hepsi churn olmu\u015f(20 de\u011fer),\n# outlier gibi kenarda kalm\u0131\u015flar\u0131 atmad\u0131m yeni de\u011fi\u015fken olu\u015fturdum.\ndf[\"SmallerThan405\"] = df['CreditScore'].apply(lambda x: 1 if x < 405 else 0)\ncat_cols.append('SmallerThan405')\ndf[\"SmallerThan405\"].value_counts()\n# Sonucu g\u00f6relim;\ndf.groupby([\"SmallerThan405\"]).agg({\"Exited\": [np.mean, np.size]})","7f9e25d1":"# Balance'\u0131n 0 olup olmad\u0131\u011f\u0131n\u0131 g\u00f6steren feature\ndf['HasBalance'] = df['Balance'].apply(lambda x: 1 if x > 0 else 0)\ncat_cols.append('HasBalance')\ndf['HasBalance'].value_counts()\n# Sonucu g\u00f6relim;\ndf.groupby([\"HasBalance\"]).agg({\"Exited\": [np.mean, np.size]})","374f433f":"# Art\u0131k kullanmayacag\u0131m\u0131z featurelar\u0131 \u00e7\u0131karal\u0131m\ndf.drop(['CreditScore', 'Balance'], axis=1, inplace=True)","e5d390fc":"# LABEL AND ONE HOT ENCODING\ncat_cols","849d772e":"def one_hot_encoder(dataframe, categorical_cols, nan_as_category=True):\n    original_columns = list(dataframe.columns)\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, dummy_na=False, drop_first=True)\n    new_columns = [c for c in dataframe.columns if c not in original_columns]\n    return dataframe, new_columns","d497fb66":"df, new_cols_ohe = one_hot_encoder(df, cat_cols)\ndf.head()\nlen(new_cols_ohe)\n\ndf.info()","07eeb689":"df.head()","1e7f7d29":"df1=df.copy()","6d3474d9":"df.head()","f20aea29":"#Scaling\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler,RobustScaler,Normalizer\n\nscaler = RobustScaler()\n","eaaa4114":"X = df.drop(\"Exited\",axis= 1)\ny = df[\"Exited\"]","b955e2fa":"X.head()","fe01e8de":"#Prediction\nimport numpy as np\nimport pandas as pd \nimport statsmodels.api as sm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import scale, StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, mean_squared_error, r2_score, roc_auc_score, roc_curve, classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import KFold","cab6bad5":"#All scores of models before tuned\ndef before_tuned():\n    models = []\n    models.append(('LR', LogisticRegression()))\n    models.append(('KNN', KNeighborsClassifier()))\n    models.append(('CART',DecisionTreeClassifier()))\n    models.append(('RF', RandomForestClassifier()))\n    models.append(('SVM', SVC(gamma='auto')))\n    models.append(('XGB', GradientBoostingClassifier()))\n    models.append((\"LightGBM\", LGBMClassifier()))\n\n    # evaluate each model in turn\n    results = []\n    names = []\n\n    for name, model in models:\n\n            X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2 ,random_state = 12345)\n            \n\n            \n            model_f = model.fit(X_train,y_train)\n            y_pred = model_f.predict(X_test)\n            test_r = accuracy_score(y_test,y_pred)\n            results.append(test_r)\n            names.append(name)\n            msg = \"%s: %f \" % (name, test_r)\n            print(msg)","35aa977e":"#LGBM\n# lgbm model kurulumu\nlgbm_model=LGBMClassifier().fit(X_train,y_train)\ny_pred = lgbm_model.predict(X_test)\n\n# validasyon hatas\u0131, accuracy skoru, confusion matrix\ncv_results = cross_val_score(lgbm_model, X_train, y_train, cv = 10, scoring= \"accuracy\")\n\nprint(cv_results.mean())\nprint(accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","a73699b1":"cols_with_missing = [col for col in X_train.columns \n                                 if X_train[col].isnull().any()]\nreduced_X_train = X_train.drop(cols_with_missing, axis=1)\nreduced_X_test  = X_test.drop(cols_with_missing, axis=1)\nprint(\"Mean Absolute Error from dropping columns with Missing Values:\")\nprint(score_dataset(reduced_X_train, reduced_X_test, y_train, y_test))   ","d51c5df6":"# Dengesiz Veri Seti : SMOTE\n# %20-80'lik veri seti i\u00e7in varolan dengesizli\u011fi oversamling y\u00f6ntemi ile giderdim.\n\nfrom imblearn.over_sampling import SMOTE\nfrom collections import Counter\nfrom sklearn.datasets import make_classification\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.metrics import confusion_matrix\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\nsmt = SMOTE(random_state=12345)\nX_res, y_res = smt.fit_sample(X, y)\n\nprint('Resampled dataset shape {}'.format(Counter(y_res)))\n\n","90e9dda4":"# Problem: \n\n#**\u015eirketi terk edecek m\u00fc\u015fterileri tahmin edebilecek bir makine \u00f6\u011frenmesi modeli geli\u015ftirebilir misiniz?**\n\n- Ama\u00e7 bir bankan\u0131n m\u00fc\u015fterilerinin bankay\u0131 terk etme ya da terk etmeme durumunun tahmin edilmesidir.\n\n- M\u00fc\u015fteri terkini tan\u0131mlayan olay m\u00fc\u015fterinin banka hesab\u0131n\u0131 kapatmas\u0131d\u0131r.\n\n**Veri Seti Hikayesi:**\n\n- 10000 g\u00f6zlemden ve 12 de\u011fi\u015fkenden olu\u015fmaktad\u0131r. \n- Ba\u011f\u0131ms\u0131z de\u011fi\u015fkenler m\u00fc\u015fterilere ili\u015fkin bilgiler bar\u0131nd\u0131rmaktad\u0131r.\n- Ba\u011f\u0131ml\u0131 de\u011fi\u015fken m\u00fc\u015fteri terk durumunu ifade etmektedir.\n\n**De\u011fi\u015fkenler:**\n\n- Surname : Soy isim\n- CreditScore : Kredi skoru\n- Geography : \u00dclke (Germany\/France\/Spain)\n- Gender : Cinsiyet (Female\/Male)\n- Age : Ya\u015f\n- Tenure : Ka\u00e7 y\u0131ll\u0131k m\u00fc\u015fteri\n- Balance : Bakiye\n- NumOfProducts : Kullan\u0131lan banka \u00fcr\u00fcn\u00fc\n- HasCrCard : Kredi kart\u0131 durumu (0=No,1=Yes)\n- IsActiveMember : Aktif \u00fcyelik durumu (0=No,1=Yes)\n- EstimatedSalary : Tahmini maa\u015f\n- Exited : Terk mi de\u011fil mi? (0=No,1=Yes)\n- RowNumber : Kay\u0131t (sat\u0131r) numaras\u0131na kar\u015f\u0131l\u0131k gelir ve \u00e7\u0131kt\u0131 \u00fczerinde hi\u00e7bir etkisi yoktur.     \n- CustomerId : Rastgele de\u011ferler i\u00e7erir ve m\u00fc\u015fterinin bankadan ayr\u0131lmas\u0131na etkisi yoktur.   "}}