{"cell_type":{"c78de967":"code","23439e35":"code","1dce1c0f":"code","ff9e74ae":"code","570320b2":"code","14be85b4":"code","e69c6c65":"code","2ee8b445":"code","19bc9168":"code","1ea15d24":"code","609aa5ff":"code","8352306c":"code","666d0c30":"code","ce9f3c78":"code","0a3ed4b7":"code","c0179cdf":"code","aa16935f":"code","335e6bb5":"code","9502326b":"code","71cb9cb6":"code","1fcc45e2":"code","746afd04":"code","6df9ca9a":"code","086ddcc8":"code","86c2a5d8":"code","211d0bad":"code","bb8db7c8":"code","11e9f823":"code","f768c9ff":"code","61d520f6":"code","77cacea2":"code","f965dc25":"code","a288fc06":"code","45e6f812":"code","1e2b134a":"code","d8b7c6fd":"code","adfa3e5b":"code","38edee2d":"code","6e097bac":"code","519f522a":"code","9d127fbc":"code","201bbb3b":"code","5adce9b6":"code","52087165":"code","8f5f17f6":"code","c1270d2c":"code","3097fe89":"code","efa44746":"code","9d63272c":"code","b67911bd":"code","80d1f56e":"code","2daf983c":"code","f1db3e68":"code","4c3f8a27":"code","a76b98e9":"markdown","44845a0f":"markdown","710d7655":"markdown","52dd434f":"markdown","be9173d6":"markdown","b8608837":"markdown","7bca5b60":"markdown","0e89ae69":"markdown","7b6ce0dd":"markdown","32256bff":"markdown","08ebe607":"markdown","c98574ae":"markdown","8ac5d377":"markdown","83e8771c":"markdown","2e641aec":"markdown","dea15516":"markdown"},"source":{"c78de967":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport warnings\nimport time\nwarnings.filterwarnings(action=\"ignore\")\nplt.style.use([\"seaborn-bright\",\"dark_background\"])","23439e35":"train = pd.read_csv(\"..\/input\/jobathon-may-2021-credit-card-lead-prediction\/train.csv\")\ntest = pd.read_csv(\"..\/input\/jobathon-may-2021-credit-card-lead-prediction\/test.csv\")\ntrain.head()","1dce1c0f":"for i in train.columns:\n    per = (train[i].isnull().sum()\/len(train))*100\n    print(\"Feature {} has {}% data missing\".format(i,per))","ff9e74ae":"print(\"Shape before removing null values - {}\".format(train.shape))\ntrain.dropna(inplace=True,axis=0)\nprint(\"Shape after removing null values - {}\".format(train.shape))","570320b2":"for i in train.columns:\n    if train[i].dtype==\"object\":\n        print(\"{} has {} unique values i.e. {}\".format(i,train[i].nunique(),train[i].unique()))","14be85b4":"fig = px.histogram(train,\"Avg_Account_Balance\",color=\"Is_Lead\",height=400,width=700,title=\"Average Account Balance\")\nfig.show()","e69c6c65":"train[\"log_Avg_Account_Balance\"] = np.log10(train[\"Avg_Account_Balance\"])","2ee8b445":"fig = px.histogram(train,\"log_Avg_Account_Balance\",color=\"Is_Lead\",height=400,width=700,title=\"Log of Average Account Balance\")\nfig.show()","19bc9168":"fig = px.histogram(train,\"Age\",title=\"Age\",height=400,width=700,color=\"Is_Lead\")\nfig.show()","1ea15d24":"train[\"log_age\"] = np.log10(train[\"Age\"])","609aa5ff":"fig = px.histogram(train,\"log_age\",title=\"Log Age\",height=400,width=700,color=\"Is_Lead\")\nfig.show()","8352306c":"fig = px.histogram(train,\"Vintage\",title=\"Vintage\",height=400,width=700,color=\"Is_Lead\")\nfig.show()","666d0c30":"train[\"Sr. No\"] = np.arange(0,216400)","ce9f3c78":"fig = px.pie(train,names=\"Occupation\",values=\"Sr. No\",color=\"Occupation\",height=500,width=500,title=\"Occupation\")\nfig.show()","0a3ed4b7":"fig = px.pie(train,names=\"Gender\",values=\"Sr. No\",color=\"Gender\",height=500,width=500,title=\"Gender\")\nfig.show()","c0179cdf":"fig = px.pie(train,names=\"Channel_Code\",values=\"Sr. No\",color=\"Channel_Code\",height=500,width=500,title=\"Channel_Code\")\nfig.show()","aa16935f":"fig = px.pie(train,names=\"Credit_Product\",values=\"Sr. No\",color=\"Credit_Product\",height=500,width=500,title=\"Credit Product\")\nfig.show()","335e6bb5":"fig = px.pie(train,names=\"Is_Active\",values=\"Sr. No\",color=\"Is_Active\",height=500,width=500,title=\"Is Active\")\nfig.show()","9502326b":"fig = px.sunburst(train, path=['Occupation', 'Gender', 'Is_Lead'], values='Sr. No',height=500,width=500)\nfig.show()","71cb9cb6":"fig = px.sunburst(train, path=['Channel_Code', 'Gender','Is_Active', 'Is_Lead'], values='Sr. No',height=500,width=500)\nfig.show()","1fcc45e2":"train[\"Gender\"] = train[\"Gender\"].replace(['Female','Male'],[0,1])\ntrain[\"Channel_Code\"] = train[\"Channel_Code\"].replace(['X3','X1','X2','X4'],[3,1,2,4])\ntrain[\"Credit_Product\"] = train[\"Credit_Product\"].replace(['No','Yes'],[0,1])\ntrain[\"Is_Active\"] = train[\"Is_Active\"].replace(['No','Yes'],[0,1])","746afd04":"plt.figure(figsize=(11,9))\nsns.heatmap(train.corr(),cmap=\"spring\",annot=True)\nplt.title(\"Correleation Heatmap\")\nplt.show()","6df9ca9a":"sns.countplot(train[\"Is_Lead\"])\nplt.show()","086ddcc8":"class_count_0, class_count_1 = train['Is_Lead'].value_counts()\n\nclass_0 = train[train['Is_Lead'] == 0]\nclass_1 = train[train['Is_Lead'] == 1]\nprint('class 0:', class_0.shape)\nprint('class 1:', class_1.shape)","86c2a5d8":"class_0_under = class_0.sample(class_count_1)\n\ntrain1 = pd.concat([class_0_under, class_1], axis=0)\n\nprint(\"total class of 1 and 0:\",train1['Is_Lead'].value_counts())\ntrain1['Is_Lead'].value_counts().plot(kind='bar', title='target')","211d0bad":"train1.drop(columns=[\"ID\",\"Age\",\"Sr. No\"],inplace=True)","bb8db7c8":"train1 = pd.get_dummies(train1,columns=[\"Region_Code\",\"Occupation\"])","11e9f823":"train1.drop(columns=[\"Avg_Account_Balance\"],inplace=True)","f768c9ff":"train1.shape","61d520f6":"X = train1.drop(columns=[\"Is_Lead\"])\ny = train1[\"Is_Lead\"]","77cacea2":"from sklearn.model_selection import train_test_split\nx_train, x_valid, y_train, y_valid = train_test_split(X,y,test_size=0.2,random_state=101)","f965dc25":"from sklearn.preprocessing import StandardScaler\nscale = StandardScaler()","a288fc06":"column = X.columns\nx_train = scale.fit_transform(x_train)\nx_train = pd.DataFrame(x_train,columns=column)\nx_valid = scale.fit_transform(x_valid)\nx_valid = pd.DataFrame(x_valid,columns=column)","45e6f812":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier,GradientBoostingClassifier\nfrom sklearn.naive_bayes import BernoulliNB,GaussianNB\nfrom sklearn.linear_model import LogisticRegression","1e2b134a":"models = []\nmodels.append((\"DecisionTreeClassifier\",DecisionTreeClassifier()))\nmodels.append((\"RandomForestClassifier\",RandomForestClassifier()))\nmodels.append((\"ExtraTreesClassifier\",ExtraTreesClassifier()))\nmodels.append((\"GradientBoostingClassifier\",GradientBoostingClassifier()))\nmodels.append((\"BernoulliNB\",BernoulliNB()))\nmodels.append((\"GaussianNB\",GaussianNB()))\nmodels.append((\"LogisticRegression\",LogisticRegression()))","d8b7c6fd":"from sklearn.metrics import f1_score,precision_score,recall_score,accuracy_score","adfa3e5b":"for name, model in models:\n    begin = time.time()\n    model.fit(x_train,y_train)\n    pred = model.predict(x_train)\n    acc = accuracy_score(y_train,pred)\n    f1score = f1_score(y_train,pred)\n    pre_score = precision_score(y_train,pred)\n    rec_score = recall_score(y_train,pred)\n    print(\"For {}\".format(name))\n    print(\"On Training data :- Accuracy = {}, F1 Score = {}, Precision = {}, Recall = {}\".format(round(acc,4),round(f1score,4),round(pre_score,4),round(rec_score,4)))\n    \n    pred1 = model.predict(x_valid)\n    acc1 = accuracy_score(y_valid,pred1)\n    f1score1 = f1_score(y_valid,pred1)\n    pre_score1 = precision_score(y_valid,pred1)\n    rec_score1 = recall_score(y_valid,pred1)\n    print(\"On Validation data :- Accuracy = {}, F1 Score = {}, Precision = {}, Recall = {}\".format(round(acc1,4),round(f1score1,4),round(pre_score1,4),round(rec_score1,4)))   \n\n    end = time.time()\n    print(\"Completion time :- {} sec\\n\".format(round(end - begin,4)))","38edee2d":"test.head()","6e097bac":"for i in test.columns:\n    per = (test[i].isnull().sum()\/len(test))*100\n    print(\"Feature {} has {}% data missing\".format(i,per))","519f522a":"test.isnull().sum()","9d127fbc":"test[\"Credit_Product\"] = test[\"Credit_Product\"].fillna(\"No\")","201bbb3b":"test[\"Gender\"] = test[\"Gender\"].replace(['Female','Male'],[0,1])\ntest[\"Channel_Code\"] = test[\"Channel_Code\"].replace(['X3','X1','X2','X4'],[3,1,2,4])\ntest[\"Credit_Product\"] = test[\"Credit_Product\"].replace(['No','Yes'],[0,1])\ntest[\"Is_Active\"] = test[\"Is_Active\"].replace(['No','Yes'],[0,1])","5adce9b6":"test[\"log_Avg_Account_Balance\"] = np.log10(test[\"Avg_Account_Balance\"])","52087165":"test[\"log_age\"] = np.log10(test[\"Age\"])","8f5f17f6":"x_test = test.drop(columns=[\"ID\",\"Age\",\"Avg_Account_Balance\"])","c1270d2c":"x_test = pd.get_dummies(x_test,columns=[\"Region_Code\",\"Occupation\"])","3097fe89":"x_test.shape","efa44746":"X.shape","9d63272c":"x_test = x_test[X.columns]","b67911bd":"column = X.columns\nX = scale.fit_transform(X)\nX = pd.DataFrame(X,columns=column)","80d1f56e":"model = LogisticRegression()\nmodel.fit(X,y)","2daf983c":"label = test[\"ID\"]","f1db3e68":"pred1 = model.predict(x_test)","4c3f8a27":"submission = pd.DataFrame()\nsubmission[\"ID\"] = label\nsubmission[\"Is_Lead\"] = pred1","a76b98e9":"##### Based on time and accuracy we select the best model.","44845a0f":"#### Data Visualization","710d7655":"#### Checking for unique values in categorical features.","52dd434f":"#### Training different classification models.","be9173d6":"#### Like training data we perform same tasks on test data.","b8608837":"#### Checking for missing values.","7bca5b60":"##### Scaling data using standardscaler.","0e89ae69":"#### Importing all required Libraries and Dataset.","7b6ce0dd":"##### Our dataset is imbalanced as the value counts for target 0 is much more than target 1.","32256bff":"##### Creating balanced dataset.","08ebe607":"### Features\n\n##### ID :- Unique Identifier for a row\n\n##### Gender :- Gender of the Customer\n\n##### Age :- Age of the Customer (in Years)\n\n##### Region_Code :- Code of the Region for the customers\n\n##### Occupation :- Occupation Type for the customer\n\n##### Channel_Code :- Acquisition Channel Code for the Customer (Encoded)\n\n##### Vintage :- Vintage for the Customer (In Months)\n\n##### Credit_Product :- If the Customer has any active credit product (Home loan,Personal loan, Credit Card etc.)\n\n##### AvgAccountBalance :- Average Account Balance for the Customer in last 12 Months\n\n##### Is_Active :- If the Customer is Active in last 3 Months\n\n\n### Target\n\n##### Is_Lead :- If the Customer is interested for the Credit Card\n\n##### 0 : Customer is not interested\n##### 1 : Customer is interested","c98574ae":"##### Creating dummy variables for remaining categorical features.","8ac5d377":"#### Removing rows with null values.","83e8771c":"##### Spliting dataset.","2e641aec":"## Credit Card Lead Prediction\n\n\n##### Happy Customer Bank is a mid-sized private bank that deals in all kinds of banking products, like Savings accounts,Current accounts, investment products, credit products, among other offerings.\n\n##### The bank also cross-sells products to its existing customers and to do so they use different kinds of communication like telecasting, e-mails, recommendations on net banking, mobile banking, etc.\n\n##### In this case, the Happy Customer Bank wants to cross-sell its credit cards to its existing customers. The bank has identified a set of customers that are eligible for taking these credit cards.","dea15516":"#### Converting categorical data to numerical data."}}