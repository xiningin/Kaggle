{"cell_type":{"9faca059":"code","00f9e805":"code","92d81de0":"code","99293bc6":"code","b7769a90":"code","8e138e11":"code","4ca5a301":"code","31e7605a":"code","fc4960fb":"code","4b6fd1cc":"code","de13c3de":"code","91e3584c":"code","c088f869":"code","8162abec":"code","7edb0b5b":"code","97602bf7":"code","f1a2ec28":"code","ae1d38de":"code","99da8f3a":"code","b4f2f4aa":"code","b90dbfca":"code","ced352b4":"code","c3dd5480":"code","0173a542":"code","f452b580":"code","78f9be9c":"code","b3af353a":"code","da35479d":"code","16ceb104":"code","b3ea7062":"code","3ca5c4de":"code","db37747a":"code","281db69f":"code","285872fe":"code","2ecf8bb8":"code","1ea5292f":"code","044f95b2":"code","8ee1ba51":"code","549a323e":"code","55712960":"code","fcd102c2":"code","6a01125f":"code","45af1775":"code","1dd79dc5":"code","266c32d7":"code","82f1300d":"code","3b2f2bb9":"code","2d5b744d":"code","7fda0c7e":"code","41772204":"code","caf343d7":"code","5fd220b2":"code","6c2ebf01":"code","a3ec2241":"code","77004a74":"code","8c619619":"code","8d27a05b":"code","37b49adc":"code","73232b20":"code","57719ca9":"code","7e964ec3":"code","fabf37a4":"code","3605b324":"code","c7039cd0":"code","5f633e8c":"code","e5b7a37e":"code","ddf73bf8":"markdown","d49b2844":"markdown","331885de":"markdown","b0dba539":"markdown","65d90142":"markdown","83a6ea4d":"markdown","d85010e3":"markdown","152fe0a1":"markdown","2796bd0a":"markdown","5d2fcbdc":"markdown","15cfca79":"markdown","e65fbf3f":"markdown","0ed7a17d":"markdown"},"source":{"9faca059":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00f9e805":"## \u8ba4\u8bc6\u9884\u6d4b\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf\nimport pandas as pd\nwineind=pd.read_csv(\"..\/input\/1-wineind\/wineind.csv\")\nwineind.head()","92d81de0":"wineind.describe()","99293bc6":"wineind.shape","b7769a90":"plot_acf(wineind.\u9500\u91cf,lags=100,title=\"windind autocorrelation\").show()","8e138e11":"## \u6309\u5e74\u5206\u6790\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,5))\nfor i in range(int(wineind.shape[0]\/12)):\n    plt.plot([x+1 for x in range(12)],wineind.\u9500\u91cf[12*i:12*(i+1)],\"o--\",label=wineind.\u6708\u4efd[12*i].split(\"-\")[0])\nplt.legend(ncol=7)\n##\nplt.plot([x+1 for x in range(12)],[1500*x+17000 for x in range(12)],\"b--\",linewidth=3)\nplt.xlabel(\"month\",fontsize=12)\nplt.ylabel(\"Sales\",fontsize=12)\nplt.title(\" wine sales by years\",fontsize=14)\nplt.show()","4ca5a301":"## \u6708\u4efd\u8f6c\u7801\\\u6570\u636e\u8f6c\u7801\nwineind[\"month\"]=[int(x.split('-')[1]) for x in wineind.\u6708\u4efd]\nwineind[\"value\"]=wineind.\u9500\u91cf\ntemp=[None]*12+wineind.value.tolist()\nfor loc in [1,4,6,8,12]:\n    wineind[\"r\"+str(loc)+\"_value\"]=temp[(12-loc):][0:wineind.shape[0]]\npdata=wineind.dropna().drop(columns=[\"\u6708\u4efd\",\"\u9500\u91cf\"])\n##\nimport seaborn as sns\nsns.pairplot(pdata,diag_kind=\"kde\")\n    ","31e7605a":"##  r12_value \u5177\u6709\u826f\u597d\u7684\u7ebf\u6027\u5173\u7cfb,\u901a\u8fc7cooks\u6807\u51c6\u6765\u8ba1\u7b97\u6bcf\u4e00\u884c\u8bb0\u5f55\u5bf9\u6a21\u578b\u7684\u54cd\u5e94\u7a0b\u5ea6\nimport statsmodels.api as sm\nfig,ax=plt.subplots(figsize=(12,8))\n##\u4f7f\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u62df\u5408\u4e00\u6761\u7ebf\nlm=sm.OLS(pdata.value,sm.add_constant(pdata.r12_value)).fit()\nsm.graphics.influence_plot(lm,alpha=.05,ax=ax,criterion=\"cooks\")\nplt.show()","fc4960fb":"## 91\\135 \u5b58\u5728\u660e\u663e\u7684\u5dee\u5f02,\u5bf9\u5176\u8fdb\u884c\u6807\u8bb0,\u8bc6\u522b\u6760\u6746\u70b9\nt0=wineind.loc[[91,135],]\nplt.figure(figsize=(8,5))\nplt.plot(wineind.r12_value,wineind.value,\"o\",c=\"black\")\nplt.scatter(t0.r12_value,t0.value,marker=\"o\",c=\"red\",edgecolors=\"k\",s=200)\nplt.xlabel(\"r12_value\")\nplt.ylabel(\"value\")\nplt.show()","4b6fd1cc":"pdata","de13c3de":"## \u53bb\u6389\u6760\u6746\u70b9\npdata=pdata.drop(index=[91,135])","91e3584c":"## \u5efa\u7acb\u6a21\u578b\uff0c\u63d0\u53d6\u524d150 \u884c\u6570\u636e\u4e3a\u8bad\u7ec3\u96c6\uff0c\u4f59\u4e0b\u4e3a\u6d4b\u8bd5\u96c6\npdata=pdata.reset_index()\npdata=pdata.drop(columns=\"index\")\ntrain_set=pdata.loc[0:149,]\ntest_set=pdata.loc[149:,]\nx=np.column_stack((train_set.month,train_set.r1_value,train_set.value,\n                    train_set.r6_value,train_set.r8_value,train_set.r12_value))\nX=sm.add_constant(x)\nmodel=sm.OLS(train_set.value,X).fit()\nmodel.summary()","c088f869":"#p\u503c\u8f83\u5927\uff0c0.729\uff0c\u9700\u8981\u5bf9\u6a21\u578b\u8fdb\u4e00\u6b65\u8c03\u6574,\u79fb\u9664x4x6\nx=np.column_stack((train_set.month,train_set.r1_value,train_set.r8_value,train_set.r12_value))\nX=sm.add_constant(x)\nmodel=sm.OLS(train_set.value,X).fit()\nmodel.summary()","8162abec":"x=np.column_stack((train_set.r4_value,train_set.r4_value**2,train_set.r4_value**3,\n                  train_set.r8_value,train_set.r12_value))\nX=sm.add_constant(x)\nmodel=sm.OLS(train_set.value,X).fit()\nmodel.summary()","7edb0b5b":"x=np.column_stack((train_set.month,\n                   train_set.r4_value,\n                   train_set.r4_value**2,\n                   train_set.r4_value**3,\n                   train_set.r8_value,\n                   train_set.r12_value))\nX=sm.add_constant(x)\nmodel=sm.OLS(train_set.value,X).fit()\nmodel.summary()","97602bf7":"## \u4ece\u4ee5\u4e0a\u7ed3\u679c\u53ef\u77e5\uff0cR\u5e73\u65b9\u4e3a0.859\uff0c\u5bf9\u5e94\u53d8\u91cf\u4ee5\u53ca\u622a\u8ddd\u9879P\u503c\u57470.01,\u7edf\u8ba1\u663e\u8457\uff0c\u53ef\u5c06\u8be5\u6a21\u578b\u5e94\u7528\u4e8e\u9884\u6d4b","f1a2ec28":"## \u7528model\u4f5c\u4e3a\u9884\u6d4b\u6a21\u578b\uff0c\u5bf9\u9884\u6d4b\u6570\u636e\u96c6test_set\u8fdb\u884c\u9884\u6d4b\uff0c\nx=np.column_stack((test_set.month,\n                  test_set.r4_value,\n                  test_set.r4_value**2,\n                  test_set.r4_value**3,\n                   test_set.r8_value,\n                  test_set.r12_value))\nX=sm.add_constant(x)\ny_pred=model.predict(X)\ndiff=np.abs(test_set.value-y_pred)\/test_set.value\ndiff\n","ae1d38de":"pd.DataFrame(y_pred)","99da8f3a":"diff.describe()","b4f2f4aa":"## \u9884\u6d4b\u65b9\u6cd5\uff1a\n##\u6570\u636e\u6574\u5408\uff1a\u65f6\u95f4\u3001\u5468\u671f\u3001\u7c92\u5ea6\u3001\u5bf9\u8c61\u7b49\u7ef4\u5ea6\u6574\u5408","b90dbfca":"pdata=pd.read_csv(\"..\/input\/2-airmiles\/airmiles.csv\")","ced352b4":"from statsmodels.graphics.tsaplots import plot_acf,plot_pacf\n","c3dd5480":"plot_acf(pdata.miles,lags=10,title=\"airmiles autocorretion\")","0173a542":"plot_pacf(pdata.miles,lags=10,title=\"airmiles partial autocorretion\")\n## \u5982\u56fe\uff0c\u6700\u5c0f\u4e3a1\u9636\u6ede\u540e\uff0c\u5bf9\u5e94\u503c\u4e3a0.876","f452b580":"## \u6563\u70b9\u56fe\u77e9\u9635\nimport pandas as pd\niris=pd.read_csv(\"..\/input\/predict-iris\/iris.csv\")\nimport matplotlib.pyplot as plt\n#\npd.plotting.scatter_matrix(iris,figsize=(10,10),alpha=1,diagonal=\"kde\")\nplt.show()\n## hist_kwds={\"bins\":20} \u8bbe\u7f6e\u5bf9\u89d2\u7ebf\u56fe\u4e0a\u76f4\u65b9\u56fe \u7684\u53c2\u6570\n## diagonal=kde \u5bf9\u89d2\u7ebf\u56fe\u4e3a\u5bc6\u5ea6\u56fehist_kwds={\"bins\":20}\u76f4\u65b9\u56fe","78f9be9c":"import seaborn as sns\nsns.pairplot(iris,hue=\"Species\")\nplt.show()","b3af353a":"## \u5b9a\u4e49\u7528\u989c\u8272\u3001\u5f62\u72b6 \u8fdb\u884c\u7c7b\u522b\u533a\u5206\ndef pair_plot(df,plot_vars,colors,target_types,markers,color_col,marker_col,fig_size=(15,15)):\n    plt.figure(figsize=fig_size)\n    plot_len=len(plot_vars)\n    index=0\n    for p_col in range(plot_len):\n        col_index=1\n        for p_row in range(plot_len):\n            index=index+1\n            plt.subplot(plot_len,plot_len,index)\n            if p_row !=p_col:\n        ## \u975e\u5bf9\u89d2\u7ebf\u4f4d\u7f6e\n              df.apply(lambda row:plt.plot(row[plot_vars[p_row]],row[plot_vars[p_col]],\n                                    color=colors[int(row[color_col])],\n                                    marker=markers[int(row[marker_col])],linestyle=\"\"),axis=1)\n            else:\n        ##\u5bf9\u89d2\u7ebf\n                for ci in range(len(colors)):\n                    sns.kdeplot(df.iloc[np.where(df[color_col]==ci)[0],p_row],\n                       shade=True,color=colors[ci],label=target_types[ci])\n        ## \u6dfb\u52a0\u5750\u6807\u6807\u7b7e\n            if col_index==1:\n                plt.ylabel(plot_vars[p_col])\n                col_index=col_index+1\n            if p_col==plot_len -1:\n                plt.xlabel(plot_vars[p_row])\n    plt.show()\n","da35479d":"features=[\"sepal_length\",\"sepal_width\",\"petal_length\",\"petal_width\"]\niris_df=iris.drop(columns=\"Species\")\niris_df.columns=features\n\niris_df[\"type\"]=iris.Species\niris_df[\"cluster\"]=iris.Species\n\n##\u5c06cluster \u53d8\u91cf\u8f6c\u5316\u4e3a\u6574\u6570\u7f16\u7801\niris_df.cluster=iris_df.cluster.astype(\"category\")\niris_df.cluster=iris_df.cluster.cat.codes\n\n##\u5c06type\u53d8\u91cf\u8f6c\u5316\u4e3a\u6574\u6570\u7f16\u7801\niris_df.type=iris_df.type.astype(\"category\")\niris_df.type=iris_df.type.cat.codes\n\n##\u83b7\u5f97\u82b1\u8272\u7c7b\u522b\u5217\u8868\ntypes=iris.Species.value_counts().index.tolist()\npair_plot(df=iris_df,\n         plot_vars=features,\n         colors=[\"#50B131\",\"#F77189\",\"#3BA3EC\"],\n         target_types=types,\n         markers=[\"*\",\"o\",\"^\"],\n         color_col=\"type\",\n         marker_col=\"cluster\")","16ceb104":"## \u4e09\u7ef4\u6563\u70b9\u56fe\nimport numpy as np\nimport matplotlib.pyplot as plt \nfrom mpl_toolkits.mplot3d import Axes3D\n##\ndims={\"x\":\"Sepal.Length\",\"y\":\"Petal.Length\",\"z\":\"Petal.Width\"}\ntypes=iris.Species.value_counts().index.tolist()\n##\nfig=plt.figure(figsize=(10,7))\nax=Axes3D(fig)\nfor iris_type in types:\n    tmp_data=iris[iris.Species==iris_type]\n    x,y,z=tmp_data[dims[\"x\"]],tmp_data[dims[\"y\"]],tmp_data[dims[\"z\"]]\n    ax.scatter(x,y,z,label=iris_type)\n\n##\u56fe\u4f8b\nax.set_xlabel(dims[\"x\"])\nax.set_ylabel(dims[\"y\"])\nax.set_zlabel(dims[\"z\"])\nplt.show()","b3ea7062":"df=iris.drop(columns=\"Species\")\ncorr=df.corr()\ncorr","3ca5c4de":"def corrplot(corr,cmap,s):\n    # \u4f7f\u7528x,y,z\u6765\u5b58\u50a8\u53d8\u91cf\u5bf9\u5e94\u77e9\u9635\u7684\u4f4d\u7f6e\u4fe1\u606f\uff0c\u4ee5\u53ca\u76f8\u5173\u7cfb\u6570\n    x,y,z=[],[],[]\n    N=corr.shape[0]\n    for row in range(N):\n        for columns in range(N):\n            x.append(row)\n            y.append(N-1-columns)\n            z.append(round(corr.iloc[row,columns],2))\n    sc=plt.scatter(x,y,c=z,vmin=-1,vmax=1,s=s*np.abs(z),cmap=plt.cm.get_cmap(cmap))\n    plt.colorbar(sc)\n    #\n    plt.xlim((-0.5,N-0.5))\n    plt.ylim((-0.5,N-0.5))\n    #\n    plt.xticks(range(N),corr.columns,rotation=90)\n    plt.yticks(range(N)[::-1],corr.columns)\n    #\n    plt.grid(False)\n    \n    #\u4f7f\u7528\u9876\u90e8\u7684\u8f74\u4f5c\u4e3a\u6a2a\u8f74\n    ax=plt.gca()\n    ax.xaxis.set_ticks_position(\"top\")\n    \n    #\u91cd\u65b0\u7ed8\u5236\u7f51\u683c\u7ebf\n    internal_space=[0.5+k for k in range(4)]\n    [plt.plot([m,m],[-.5,N-0.5],c=\"lightgray\") for m in internal_space]\n    [plt.plot([-0.5,N-0.5],[m,m],c=\"lightgray\") for m in internal_space]\n    \n    plt.show()","db37747a":"corrplot(corr,cmap=\"Spectral\",s=2000)","281db69f":"## \u76f8\u5173\u5c42\u6b21\u56fe\uff0c\u76f8\u5f02\u6027\u5ea6\u91cf\nimport numpy as np\nimport pandas as pd\nmtcars=pd.read_csv(\"..\/input\/4-mtcars\/mtcars.csv\")\nmtcars.drop(columns=\"_\",inplace=True)\n#\nd=np.sqrt(1-mtcars.corr()*mtcars.corr())###d=\u6839\u53f7(1-r\u5e73\u65b9)\n#\nfrom scipy.spatial.distance import pdist,squareform\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\n#\nrow_cluster=linkage(pdist(d,metric=\"euclidean\"),method=\"ward\")\nrow_dendr=dendrogram(row_cluster,labels=d.index)\nplt.tight_layout()\nplt.ylabel(\"Euclidean distance\")\nplt.plot([0,2000],[1.5,1.5],c=\"gray\",linestyle=\"--\")\nplt.show()","285872fe":"import scipy.signal as sg\ndef ccf(x,y,lag_max=100):\n    result=sg.correlate(y-np.mean(y),x-np.mean(x),method=\"direct\")\/(np.std(y)*np.std(x)*len(x))\n    length=int((len(result)-1)\/2)\n    low=length-lag_max\n    high=length+(lag_max+1)\n    return result[low:high]","2ecf8bb8":"import pandas as pd\n#\nairmiles=pd.read_csv(\"..\/input\/2-airmiles\/airmiles.csv\")\nlakehuron=pd.read_csv(\"..\/input\/5lakehuron\/LakeHuron.csv\")\nlhdata=lakehuron.query(\"1937<=year<=1960\")\nx,y=airmiles.miles,lhdata.level\n#\nout=ccf(x,y)\nfor i in range(len(out)):\n    plt.plot([i,i],[0,out[i]],\"k-\")\n    plt.plot(i,out[i],\"ko\")\n\nplt.xlabel(\"lag\",fontsize=14)\n# plt.xticks(range(40),range(-20,20,2))\nplt.ylabel(\"ccf\",fontsize=14)\nplt.show()","1ea5292f":"## \u7279\u5f81\u503c\u53ca\u7279\u5f81\u5411\u91cf\u8ba1\u7b97\nimport numpy as np\nimport pandas as pd\niris=pd.read_csv(\"..\/input\/predict-iris\/iris.csv\")\n\n# \u5c06corr\u8fdb\u884c\u5206\u5757\uff0c1\uff1a2\u4e24\u4e2a\u53d8\u91cf\u4e00\u7ec4\uff0c3\uff1a4\u662f\u53e6\u4e00\u7ec4\uff0c\u5e76\u8fdb\u884c\u4e24\u4e24\u7ec4\u5408\nX11=corr.iloc[0:2,0:2]\nX12=corr.iloc[0:2,2:4]\nX21=corr.iloc[2:4,0:2]\nX22=corr.iloc[2:4,2:4]\n\n#\u6309\u516c\u5f0f\u6c42\u89e3\u77e9\u9635A\u548cB\nA=np.matmul(np.matmul(np.matmul(np.linalg.inv(X11),X12),np.linalg.inv(X22)),X21)\nB=np.matmul(np.matmul(np.matmul(np.linalg.inv(X22),X21),np.linalg.inv(X11)),X12)\n\n# \u6c42\u89e3\u5178\u578b\u76f8\u5173\u7cfb\u6570\nA_eig_values,A_eig_vectors=np.linalg.eig(A)\nB_eig_values,B_eig_vectors=np.linalg.eig(B)\nnp.sqrt(A_eig_values)","044f95b2":"## \u5c06\u53d8\u91cf\u5206\u7ec4\uff0c\u6807\u51c6\u5316\u5904\u7406\niris_g1=iris.iloc[:,0:2]\niris_g1=iris_g1.apply(lambda x:(x-np.mean(x))\/np.std(x))\niris_g2=iris.iloc[:,2:4]\niris_g2=iris_g2.apply(lambda x:(np.mean(x))\/np.std(x))\n# \u6c42\u89e3A\u5bf9\u5e94\u7684\u7279\u5f81\u5411\u91cf\u8ba1\u7b97\u5178\u578b\u5411\u91cfC1\nC1=np.matmul(iris_g1,A_eig_vectors)\nC1.apply(np.std)\nC1.apply(np.mean)","8ee1ba51":"## \u5bf9\u7279\u5f81\u5411\u91cf\u8fdb\u884c\u4f38\u7f29\u53d8\u6362\neA=np.matmul(A_eig_vectors,np.diag(1\/C1.apply(np.std)))","549a323e":"## \u518d\u6b21\u9a8c\u8bc1\u65b9\u5dee\u548c\u5747\u503c\nC1=np.matmul(iris_g1,eA)\nC1.apply(np.std)","55712960":"C1.apply(np.mean)","fcd102c2":"## \u53ef\u89c1\u7279\u5f81\u5411\u91cf\u5df2\u7ecf\u6ee1\u8db3\u8981\u6c42\uff0c\u540c\u7406\u5bf9B\u53ef\u5f97\nC2=np.matmul(iris_g2,B_eig_vectors)\n# C2.apply(np.std)","6a01125f":"C2.apply(np.std)","45af1775":"## CCA \u7c7b\u5b9e\u73b0\u5178\u578b\u76f8\u5173\u5206\u6790\nfrom sklearn.cross_decomposition import CCA\ncca=CCA(n_components=2)\ncca.fit(iris_g1,iris_g2)\n## X_c\\Y_c \u5206\u522b\u4e3a\u8f6c\u6362\u4e4b\u540e\u7684\u5178\u578b\u53d8\u91cf\nX_c,Y_c=cca.transform(iris_g1,iris_g2)\nround(pd.concat([pd.DataFrame(X_c,columns=irias_g1.columns),\n                pd.DataFrame(Y_c,columns=iris_g2.columns)],axis=1).corr(),5)","1dd79dc5":"## \u5f15\u5165R\u5305\n!pip install rpy2","266c32d7":"from rpy2.robjects.packages import importr\nfrom rpy2.robjects import FloatVector, StrVector,r\nimport pandas as pd\nci = importr(\"CausalImpact\")\nzoo = importr(\"zoo\")\nbase = importr(\"base\")","82f1300d":"from sklearn.cluster import KMeans","3b2f2bb9":"import numpy as np \nimport pandas as pd\npassengers=pd.read_csv(\"..\/input\/6airpassenger\/AirPassengers.csv\")\npassengers","2d5b744d":"data=list()\ntmp=passengers.groupby(\"year\").filter(lambda block:data.append([block.iloc[0,0]]+block.passengers.values.tolist()))\ndata=pd.DataFrame(data)\ndata.set_index(data[0],inplace=True)\ndata.drop(columns=0,inplace=True)\n#\u6807\u51c6\u5316\u65f6\uff0c\u91c7\u7528\u6309\u6309\u884c\u6807\u51c6\u7684\u65b9\u5f0f\uff0c\u5373\u6bcf\u884c\u90fd\u662f0\uff0c1\uff0c\u5206\u522b\u8868\u793a\u6700\u5927\u548c\u6700\u5c0f\uff0c\u4ee5\u6b64\u65b9\u5f0f\u6765\u5206\u6790\u66f2\u7ebf\u6a21\u5f0f\ndata=data.apply(lambda x:(x-np.min(x))\/(np.max(x)-np.min(x)),axis=1)\n#\u6784\u9020\u4e00\u4e2a\u805a\u7c7b\u4e3a2\u7684\u805a\u7c7b\u5668\nkm_cluster=KMeans(n_clusters=2,max_iter=300,n_init=40,init=\"k-means++\")\nkm_cluster.fit(data)\ndata[\"cluster\"]=km_cluster.labels_\n##\u7ed8\u5236\u805a\u7c7b\u66f2\u7ebf\nimport matplotlib.pyplot as plt\nstyles=[\"co-\",\"ro-\"]\ntem=data.apply(lambda row:plt.plot([x+1 for x in range(12)],[row[x+1] for x in range(12)],styles[int(row.cluster)],alpha=0.3),axis=1)\nplt.xlabel(\"month\",fontsize=14)\nplt.ylabel(\"standardized passengers\")\nplt.show()","7fda0c7e":"from sklearn.cluster import KMeans \nimport pandas as pd\nimport numpy as np\npassengers=pd.read_csv(\"..\/input\/6airpassenger\/AirPassengers.csv\")\ndata=list()\ntmp=passengers.groupby(\"year\").filter(lambda block:data.append([block.iloc[0,0]]+\n                                                              block.passengers.values.tolist()))\ndata","41772204":"data=pd.DataFrame(data)\ndata","caf343d7":"data.set_index(data[0],inplace=True)\ndata.drop(columns=0,inplace=True)\ndata","5fd220b2":"# \u6309\u884c\u6807\u51c6\u5316\ndata=data.apply(lambda x:(x-np.min(x))\/(np.max(x)-np.min(x)),axis=1)\n#\nfrom scipy.spatial.distance import pdist,squareform#\u8ba1\u7b97\u6837\u672c\u7684\u8ddd\u79bb\nfrom scipy.cluster.hierarchy import linkage#\u7ed8\u5236\u6811\u72b6\u56fe\nfrom scipy.cluster.hierarchy import dendrogram#\u7ed8\u5236\u6811\u72b6\u56fe\nfrom sklearn.cluster import AgglomerativeClustering\nimport matplotlib.pyplot as plt\n#\nrow_cluster=linkage(pdist(data,metric=\"euclidean\"),method=\"ward\")\nrow_dendr=dendrogram(row_cluster)\nplt.tight_layout()\nplt.ylabel(\"Euclidean distance\",fontsize=14)\nplt.axhline(0.6,c=\"red\",linestyle=\"--\")\nplt.show()","6c2ebf01":"## \u6839\u636e\u5212\u5206\u7c7b\u522b\nac=AgglomerativeClustering(n_clusters=2,affinity=\"euclidean\",linkage=\"complete\")\ndata[\"cluster\"]=ac.fit_predict(data)\nstyles=[\"co-\",\"ro-\"]\ntem=data.apply(lambda row:plt.plot([x+1 for x in range(12)],[row[x+1] for x in range(12)],styles[int(row.cluster)],alpha=0.3),axis=1)\nplt.xlabel(\"month\",fontsize=14)\nplt.show()","a3ec2241":"# \u5c06\u5bf9\u5e94\u7684\u4e58\u5ba2\u6570\u636e\u8f6c\u5316\u4e3a\u73af\u6bd4\u503c\uff0c\u79bb\u6563\u5316\u5904\u7406\uff0c\u5bf9\u79bb\u6563\u4e4b\u540e\u7684\u6570\u636e\u8fdb\u884c\u5173\u8054\u6316\u6398\nimport pandas as pd\nimport matplotlib.pyplot as plt\nap=pd.read_csv(\"..\/input\/6airpassenger\/AirPassengers.csv\")\nap_chain=ap.passengers[1:ap.shape[0]].values\/ap.passengers[0:(ap.shape[0]-1)].values\n#\nplt.figure(figsize=(15,3))\nplt.plot(range(1,ap.shape[0]),ap_chain,\"ko-\")\nplt.plot([0,ap.shape[0]],[1,1],\"--\",c=\"grey\")\n\nxindex=[x+1 for x in range(0,ap.shape[0],20)]\nplt.xticks(xindex,ap.loc[xindex,:].apply(lambda x:str(x[\"year\"])+\"-\"+str(x[\"month\"]),axis=1).values,rotation=45)\nplt.xlabel(\"year-month\",fontsize=14)\nplt.ylabel(\"ap chain ratio\",fontsize=14)\nplt.show()","77004a74":"#\u5c06\u73af\u6bd4\u503c4\u7b49\u5206\uff0c\u8fdb\u884c\u79bb\u6563\u5316\u5904\u7406\nap_chain_dez=pd.cut(ap_chain,bins=4,include_lowest=True)\nap_chain_lab=pd.cut(ap_chain,bins=4,include_lowest=True,labels=[\"A\",\"B\",\"C\",\"D\"])\nout=pd.DataFrame({\"dez\":\"ap_chain_dez\",\"lab\":ap_chain_lab,\"chain\":ap_chain})\nout.head()","8c619619":"ap_chain_lab","8d27a05b":"ap_chain_dez","37b49adc":"!pip install apyori","73232b20":"## \u5b9a\u4e49arules_parse\nimport pandas as pd\ndef arules_parse(association_results):\n    freq_items=list()\n    freq_items_support=list()\n    left_items=list()\n    right_items=list()\n    conf=list()\n    lift=list()\n    rule_support=list()\n    for item in association_results:\n        freq_items.append(\",\".join(item[0]))\n        freq_items_support.append(item[1])\n        for e in item[2]:\n            left_items.append(\",\".join(e[0]))\n            right_items.append(\",\".join(e[0]))\n            conf.append(e[2])\n            lift.append(e[3])\n            rule_support.append(item[1])\n        return{\n            \"freq_items\":pd.DataFrame({\"items\":freq_items,\"support\":freq_items_support}),\n            \"rules\":pd.DataFrame({\"left\":left_items,\"right\":right_items,\"support\":rule_support,\"conf\":conf,\"lift\":lift})\n        }","57719ca9":"# \u9884\u6d4b\u4e0b\u4e00\u5468\u671f\u7684\u73af\u6bd4\uff0c\u8003\u8651\u8fd110\u5668\u7684\u73af\u6bd4\u60c5\u51b5\nwinsize=10\ncon_df=pd.DataFrame([out.lab[i:(i+winsize)].values.tolist() for i in range(ap_chain.shape[0]-winsize+1)],\n                   columns=[\"X\"+str(x+1) for x in range(10)])\n# \u524d80%\u63d0\u53d6\u89c4\u5219\uff0c\u7528\u540e20%\u9a8c\u8bc1\u89c4\u5219\ncon_train=con_df.loc[0:int(con_df.shape[0]*0.8),:]\ncon_test=con_df.loc[(con_train.shape[0]-1):(con_df.shape[0]-1),:]\n## \u4f7f\u7528Apyori\u7b97\u6cd5\nfrom apyori import apriori\ntransactions=con_train.apply(lambda x:(x.index+\"=\"+x.values).tolist(),axis=1).values\nassociation_rules=apriori(transactions,min_support=0.1,\n                         min_confidence=0.5,min_lift=1,min_length=2)\narules_out=arules_parse(list(association_rules))\ndisplay(arules_out[\"rules\"].sort_values(\"conf\",ascending=True).head())\n","7e964ec3":"tem=con_test.query(\"X10='A'and X10=='A'\")\nprint(\"%d%%\"%(100*sum(tem[\"X10\"]==\"A\")\/tem.shape[0]))","fabf37a4":"#\u7ed8\u5236\u5173\u7cfb\u7f51\u7edc\u56fe\nimport networkx as nx\nimport matplotlib.pyplot as plt\ntuple_list,nodes_color,nodes_size,edges_size=[],{},{},{}#\u5206\u522b\u5b58\u653e\u6240\u6709\u7684\u8fb9\uff0c\u8282\u70b9\u7684\u989c\u8272\u548c\u5927\u5c0f\n## \u81ea\u5b9a\u4e49\u884c\u5904\u7406\u51fd\u6570\ndef row_proc(row):\n    tmp_edges=[]\n    [tmp_edges.append((x,str(row.name))) for x in row[\"left\"].split(\",\")]\n    [tmp_edges.append((str(row.name),x)) for x in row[\"right\"].split(\",\")]\n    for e in row[\"left\"].split(\",\")+row[\"right\"].split(\",\"):\n        if e not in nodes_color:\n            nodes_color[e]=0\n            nodes_size[e]=600\n    ##\u4f7f\u7528\u63d0\u5347\u5ea6\u6765\u8868\u793a\u8282\u70b9\u7684\u989c\u8272\/\u989c\u8272\u8d8a\u6df1\uff0c\u63d0\u5347\u5ea6\u8d8a\u5927\n    nodes_color[str(row.name)]=row[\"lift\"]\n    ##\u4f7f\u7528\u7f6e\u4fe1\u5ea6\u6765\u8868\u793a\u8282\u70b9\u7684\u989c\u8272\/\u8282\u70b9\u8d8a\u5927\uff0c\u7f6e\u4fe1\u5ea6\u8d8a\u5927\n    nodes_size[str(row.name)]=2**(row[\"conf\"]*10)*3\n    for k in tmp_edges:\n        edges_size[k]=row[\"support\"]*20\n    tuple_list.extend(tmp_edges)\narules_out[\"rules\"].apply(row_proc,axis=1)\nplt.figure(figsize=(8,8))\n#\u5efa\u7acb\u6709\u5411\u56fe\nG=nx.DiGraph()\nG.add_edges_from(tuple_list)\npos=nx.kamada_kawai_layout(G)\ncolors=[nodes_color.get(node) for node in G.nodes()]\nsizes=[edges_size.get(edge) for edge in G.edges()]\nwidths=[edges_size.get(edge) for edge in G.edges()]\nnx.draw(G,pos,cmap=plt.get_cmap(\"Greys\"),with_labels=True,width=widths,\n       node_color=colors,node_size=sizes,edge_color=\"lightgray\",font_color=\"lightgray\")\nplt.show()","3605b324":"pip install fim","c7039cd0":"from fim import eclat","5f633e8c":"!pip install rpy2","e5b7a37e":"from rpy2.robjects.packages import importr","ddf73bf8":"## \u76f8\u5173\u56fe","d49b2844":"## \u7b80\u5355\u76f8\u5173\u5206\u6790\uff1a\n\u662f\u4e00\u79cd\u975e\u786e\u5b9a\u5173\u7cfb\uff0c\u5e38\u89c1\u7684\u5206\u6790\u65b9\u6cd5\uff1a\u6563\u70b9\u56fe\u3001\u76f8\u5173\u56fe","331885de":"## \u7cfb\u7edf\u805a\u7c7b\u7b97\u6cd5\n\u5c06\u6bcf\u4e2a\u6837\u672c\u770b\u6210\u4e00\u7c7b\uff0c \u5728\u89c4\u5b9a\u7c7b\u95f4\u8ddd\u79bb\u7684\u6761\u4ef6\u4e0b\uff0c\u9009\u62e9\u8ddd\u79bb\u6700\u5c0f\u7684\u4e00\u961f\u5408\u5e76\u6210\u4e00\u4e2a\u65b0\u7c7b\uff0c\u5e76\u8ba1\u7b97\u65b0\u7c7b\u4e0e\u5176\u4ed6\u7c7b\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u518d\u5c06\u8ddd\u79bb\u6700\u5c0f\u7684\u4e24\u7c7b\u5408\u5e76\uff0c\u8fd9\u6837\u6bcf\u6b21\u4f1a\u51cf\u5c11\u4e00\u4e2a\u7c7b\uff0c\u76f4\u5230\u6240\u6709\u6837\u672c\u5408\u5e76\u4e3a\u4e00\u7c7b\u3002\n\n\u5e38\u7528\u7684\u8ddd\u79bb\uff1a\n1. \u7edd\u5bf9\u503c\u8ddd\u79bb\n2. \u6b27\u6c0f\u8ddd\u79bb\n3. \u660e\u6c0f\u8ddd\u79bb\n1. \u5207\u6bd4\u96ea\u592b\u8ddd\u79bb\n1.\u9a6c\u6c0f \u8ddd\u79bb\n1. \u5170\u6c0f\u8ddd\u79bb\n1. \u4f59\u5f26\u8ddd\u79bb ","b0dba539":"## CausalImpact\u5305\u901a\u8fc7\u65f6\u95f4\u5e8f\u5217\u6a21\u578b\u6267\u884c\u56e0\u679c\u63a8\u65ad","65d90142":"## \u76f8\u5173\u77e9\u9635 \u56fe","83a6ea4d":"## \u5e8f\u5217\u6a21\u5f0f\u6316\u6398","d85010e3":"## \u5173\u8054\u5206\u6790\n\u6309\u7167\u6316\u6398\u76ee\u6807\u7684\u4e0d\u540c\uff0c\u5206\u4e3a\u5173\u8054\u89c4\u5219\u548c\u5e8f\u5217\u6a21\u5f0f\u6316\u6398\uff0c\u5173\u8054\u89c4\u5219\u5173\u6ce8\u5355\u9879\u95f4\u5728\u540c\u4e00\u4e8b\u7269\u5185\u7684\u5173\u7cfb\uff0c\u5e8f\u5217\u6a21\u5f0f\u6316\u6398\u6bd4\u8f83\u5173\u6ce8\u5355\u9879\u6559\u6848\u5728\u540c\u4e00\u4e8b\u7269\u5185\u4ee5\u53ca\u4e8b\u7269\u95f4\u7684\u5173\u7cfb\n\nApriori:\u57fa\u4e8e\u4e24\u9636\u6bb5\u9891\u7e41\u9879\u96c6\u601d\u60f3\u7684\u9012\u63a8\u7b97\u6cd5\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u63d0\u9ad8\u6570\u636e\u8bbf\u95ee\u8bbf\u95ee\u6548\u7387\uff1aEclat:\u91c7\u7528\u5782\u76f4\u6570\u636e\u8868\u793a\u7684\u5173\u8054\u6316\u6398\u7b97\u6cd5\uff0c\u4ee5\u6df1\u5ea6\u4f18\u5316\u4e3a\u7b56\u7565","152fe0a1":"## Eclat\u7b97\u6cd5","2796bd0a":"## \u56e0\u679c\u5173\u7cfb\uff1a\n1. \u800c\u662f\u628a\u7814\u7a76\u91cd\u70b9\u8f6c\u79fb\u5230\u56e0\u679c\u5173\u7cfb\u4e0a\uff0c\u5c31\u662f\u57fa\u4e8e\u4e8b\u7269\u53d1\u5c55\u53d8\u5316\u7684\u56e0\u679c|\u5173\u7cfb\u8fdb\u884c\u9884\u6d4b\u7684\u65b9\u6cd5\uff0c\n2. \u56e0\u679c\u5173\u7cfb\u5206\u4e3a\u4e09\u7c7b\uff1a\u5173\u8054\u3001\u5e72\u9884\u3001\u53cd\u4e8b\u5b9e\uff0c\u57fa\u4e8e\u56e0\u679c\u5173\u7cfb\u6211\u4eec\u628a\u76f8\u5173\u5206\u6790\u505a\u5f97\u66f4\u597d\uff0c\u6bd4\u5982\u901a\u8fc7\u589e\u52a0\u5408\u9002\u7684\u7ef4\u5ea6\u6765\u4fdd\u8bc1\u5206\u6790\u7ed3\u679c\u7684\u51c6\u786e\u6027\n3. \u65f6\u5e8f\u56e0\u679c\u63a8\u65ad","5d2fcbdc":"## \u81ea\u76f8\u5173\u5206\u6790ACF\u3001\u504f\u76f8\u5173\u5206\u6790PACF\uff1a\n\u6307\u5728\u540c\u4e00\u65f6\u95f4\u5e8f\u5217\u518d\u4e0d\u540c\u65f6\u523b\u53d6\u503c\u7684\u76f8\u5173\u6027\uff0c\u5047\u8bbe\u6709\u65f6\u95f4\u5e8f\u5217X(t),t=1,2,3....,\u5219\u518dt\u4e0et+n\u4e4b\u95f4\u7684\u76f8\u5173\u5373\u4e3an\u9636\u81ea\u76f8\u5173","15cfca79":"> ## \u4e92\u76f8\u5173\u5206\u6790\n\u4e92\u76f8\u5173\u6027\u662f\u6307\uff1a\u4e24\u4e2a\u65f6\u95f4\u5e8f\u5217\u518d\u4efb\u610f\u4e0d\u540c\u65f6\u523b\u7684\u76f8\u5173\u7a0b\u5ea6","e65fbf3f":"## \u5178\u578b\u76f8\u5173\u5206\u6790","0ed7a17d":"## \u805a\u7c7b\u5206\u6790"}}