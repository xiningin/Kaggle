{"cell_type":{"e1138734":"code","1f6af64f":"code","8dd0eb03":"code","d74d2105":"code","6ed968bb":"code","d5fafde3":"code","b6f9fe42":"code","5f091124":"code","fcd2b883":"code","6c154b96":"code","20637b50":"code","8b212568":"code","50e233d4":"code","b3ea8a00":"code","67a359fe":"markdown","460e4441":"markdown","3b3eecd2":"markdown","dda56d7b":"markdown","3d7cf298":"markdown","29da6096":"markdown","a14c3573":"markdown"},"source":{"e1138734":"!pip install keras-tuner\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","1f6af64f":"from tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nimport numpy as np\nfrom keras.utils.np_utils import to_categorical\nimport matplotlib.pyplot as plt","8dd0eb03":"cifar=keras.datasets.cifar10\n(X_train,y_train),(X_test,y_test)=cifar.load_data()","d74d2105":"#normalizing the data\nX_train=X_train\/255.0\nX_test=X_test\/255.0","6ed968bb":"#finding the number of classes in the dependent variable\nn=len(np.unique(y_test))\nn","d5fafde3":"#converting the dependent varibale column to categorical(dummy encoding) as the dependent varibale contains 10 classes\ny_train=to_categorical(y_train,n)\ny_test=to_categorical(y_test,n)","b6f9fe42":"from kerastuner import RandomSearch\nfrom kerastuner.engine.hyperparameters import HyperParameters","5f091124":"def build_model(hp):\n    model=Sequential()\n\n    #Buiding the convolutional layer\n    model.add(Conv2D(filters=hp.Int('filter_1',min_value=16,max_value=256,step=16),kernel_size=hp.Choice('kernel_size_1',values=[3,5]),activation='relu',input_shape=(32,32,3)))\n    \n    #adding the second layer\n    model.add(Conv2D(filters=hp.Int('filter_2',min_value=16,max_value=256,step=16),kernel_size=hp.Choice('kernel_size_2',values=[3,5]),activation='relu'))\n    model.add(MaxPooling2D(pool_size=hp.Choice('pool_2',values=[2,4,6])))\n\n    #Flattening the feature map\n    model.add(Flatten())\n\n    #Adding ANN layers \n    model.add(Dense(units=hp.Int('Unit_1',min_value=16,max_value=256,step=16),activation='relu'))\n    model.add(Dense(units=hp.Int('Unit_2',min_value=16,max_value=32,step=16),activation='relu'))\n   \n    #adding the final layer\n    model.add(Dense(units=10,activation='softmax'))\n\n    #compiling the model\n    model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\n    return model","fcd2b883":"tuner=RandomSearch(build_model,\n                   objective='val_accuracy',\n                   max_trials=3\n                  )","6c154b96":"tuner.search(X_train,y_train,epochs=3,validation_split=0.2,verbose=2)","20637b50":"#getting the best model as per the trained parameters\nmodel=tuner.get_best_models(num_models=1)[0]","8b212568":"#Checking the model parameters\nmodel.summary()","50e233d4":"#fitting the model as per the best parameters\nanswer=model.fit(X_train,y_train,epochs=20,initial_epoch=3,validation_split=0.2)","b3ea8a00":"#evaluating the model\nmodel.evaluate(X_test,y_test)","67a359fe":"**Building Model**","460e4441":"**Importing Hyperparameter tuning Libraries**","3b3eecd2":"So by using Keras tuner we did find the best hyperparameters and hence the accuracy of the model increased and the loss decreased.","dda56d7b":"**Importing Data**","3d7cf298":"**Importing Libraries**","29da6096":"**Installing Keras Tuner**","a14c3573":"**Searching for the best parameters using RandomSearch**"}}