{"cell_type":{"ace64b30":"code","5f5f4545":"code","0438750c":"code","345fdb34":"code","7932000c":"code","211e4f06":"code","b32798ad":"code","f3cf7c88":"code","618b4147":"code","be4ac6d1":"code","6412ef97":"code","20261935":"code","6fae89ca":"code","09948d0e":"code","eab6ea4c":"code","fe90b425":"code","246de95a":"code","9675420c":"code","fc60488e":"code","73ccc2d2":"code","0198e8a5":"code","6ab0e621":"code","ddd5ce7e":"code","ac027c9c":"code","26c3b96d":"code","739ec518":"markdown","b496e8a5":"markdown","b74a4919":"markdown"},"source":{"ace64b30":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport plotly.express as px\nimport plotly.graph_objects as go\n\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5f5f4545":"# Reading the csv file as a DataFrame called calls\ncalls = pd.read_csv(\"\/kaggle\/input\/montcoalert\/911.csv\")","0438750c":"calls.head()","345fdb34":"#Checking what the data consists of\ncalls.info() ","7932000c":"calls.rename(columns={\"lat\":\"Latitude\",\"lng\":\"Longitude\",\"desc\":\"Description\",\"zip\":\"Zipcode\",\"title\":\"Title\",\"timeStamp\":\"Time\",\"twp\":\"Township\",\"addr\":\"Address\"},inplace= True)","211e4f06":"\ncalls[\"Zipcode\"].value_counts().head(10)","b32798ad":"calls[\"Township\"].value_counts().head()","f3cf7c88":"#Number of unique emergencies\ncalls[\"Title\"].nunique()\n","618b4147":"#Reason for calling\nreason = calls[\"Title\"].apply(lambda x: x.split(\":\")[0])\nreason.value_counts()","be4ac6d1":"calls[\"Reason\"] = reason\nplt.figure(figsize=(10,5))\nsns.countplot(x=\"Reason\", data = calls, hue=\"Reason\")\n","6412ef97":"from pandas.api.types import is_string_dtype\nimport datetime as dt","20261935":"\nis_string_dtype(calls[\"Time\"])","6fae89ca":"#Convert the Time collumn from a str to DataTime object\ncalls[\"Time\"] = pd.to_datetime(calls[\"Time\"])","09948d0e":"calls[\"Hour\"] = calls[\"Time\"].apply(lambda x:x.time())\ncalls[\"Date\"] = calls[\"Time\"].apply(lambda x:x.date())\ncalls[\"Day of Week\"]= calls[\"Time\"].dt.dayofweek\n\ncalls","eab6ea4c":"# Map the date to its correspondent day of the week\nday_map = {0:\"Monday\",1:\"Tuesday\",2:\"Wednesday\",3:\"Thursday\",4:\"Friday\",5:\"Saturday\",6:\"Sunday\"}\ncalls[\"Week Day\"]=calls[\"Day of Week\"].map(day_map)\n\ncalls.drop(columns=[\"Day of Week\"], inplace = True)","fe90b425":"# Reason for calling for each day of the week\nplt.figure(figsize=(20,10))\n\nsns.countplot(x=\"Week Day\", data= calls, hue= \"Reason\")\nplt.tight_layout()","246de95a":"# Reason for calling for each month\nmonth= calls[\"Time\"].apply(lambda x: x.month)\nplt.figure(figsize=(20,10))\n\nsns.countplot(x=month, data= calls , hue= \"Reason\")","9675420c":"calls.groupby(\"Date\").count()[\"Township\"].plot(figsize= (20,10))\nplt.tight_layout()","fc60488e":"#For each reason:\n#Traffic\ncalls[calls[\"Reason\"]==\"Traffic\"].groupby(\"Date\").count()[\"Township\"].plot(figsize= (20,10))\nplt.title(\"Traffic\",fontsize=30)","73ccc2d2":"#EMS\ncalls[calls[\"Reason\"]==\"EMS\"].groupby(\"Date\").count()[\"Township\"].plot(figsize=(20,10))\nplt.title(\"EMS\",fontsize=30)","0198e8a5":"#Fire\ncalls[calls[\"Reason\"]==\"Fire\"].groupby(\"Date\").count()[\"Township\"].plot(figsize=(20,10))\nplt.title(\"Fire\",fontsize=30)","6ab0e621":"calls[\"The Hour\"] = calls[\"Hour\"].apply(lambda x:x.hour)\ncalls","ddd5ce7e":"#Grouping the data by Day and Hour\ndayHour = calls.groupby(by=[\"Week Day\",\"The Hour\"]).count()[\"Reason\"].unstack()\ndayHour.head()","ac027c9c":"#Creating Heatmaps for dayHour\nplt.figure(figsize= (20,10))\nsns.heatmap(dayHour,cmap=\"coolwarm\")","26c3b96d":"sns.clustermap(dayHour,cmap=\"coolwarm\", figsize= (20,10))","739ec518":"Therefore Emergency Medical Services (EMS) was the number one reason for the most 911 calls. This could be shown below as a barchart\n","b496e8a5":"**Finding the ten top zipcodes from which a 911 call was conducted:**","b74a4919":"Finding the top towns from where 911 calls where received"}}