{"cell_type":{"293ee5b2":"code","6a827a4d":"code","6a185c01":"code","d5892a70":"code","49a280c7":"code","81860bb7":"code","3a5595ca":"code","28778690":"code","0031f868":"code","03c03f51":"code","42b7e93a":"code","d5abdb8e":"code","3679ee9b":"markdown","f2eb6889":"markdown","a58951ca":"markdown","8742d135":"markdown"},"source":{"293ee5b2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\nfrom sklearn.metrics import log_loss\nfrom sklearn.linear_model import LogisticRegression","6a827a4d":"dt = {'WTeamID':'str', 'LTeamID':'str'}\ninp = '..\/input\/ncaam-march-mania-2021\/'\nss = pd.read_csv(inp+'MSampleSubmissionStage1.csv')\nsd = pd.read_csv(inp+'MRegularSeasonCompactResults.csv',dtype=dt)\ntd = pd.read_csv(inp+'MNCAATourneyCompactResults.csv',dtype=dt)\nts = pd.read_csv(inp+'MNCAATourneySeeds.csv',dtype={'TeamID':'str'})","6a185c01":"ts['Seed'] = ts['Seed'].map(lambda s: s[1:].strip('ab'))\nsd['DScore'] = sd['WScore'] - sd['LScore']","d5892a70":"for i in range(len(td.index)):\n    if random.choices([0,1]) == [1]:\n        td.at[i, 'Team1'] = td.at[i, 'WTeamID']\n        td.at[i, 'Team2'] = td.at[i, 'LTeamID']\n        td.at[i, 'target'] = 1.0\n    else:\n        td.at[i, 'Team1'] = td.at[i, 'LTeamID']\n        td.at[i, 'Team2'] = td.at[i, 'WTeamID']\n        td.at[i, 'target'] = 0.0","49a280c7":"ss['Team1'] = ss['ID'].map(lambda s: s[5:9])\nss['Team2'] = ss['ID'].map(lambda s: s[10:])\nss['Season'] = ss['ID'].map(lambda s: s[:4])","81860bb7":"stat = {}\ndef calculate_stat(season, team):\n    if (season, team) in stat.keys():\n        return\n    t_w = sd.loc[(sd['Season']==season)&(sd['WTeamID']==team),'DScore']\n    t_l = sd.loc[(sd['Season']==season)&(sd['LTeamID']==team),'DScore']\n    t_wc = len(t_w.index)\n    t_lc = len(t_l.index)\n    t_ws = t_w.sum()\n    t_ls = t_l.sum()\n    stat[(season, team)] = {}\n    stat[(season, team)]['WinRate'] = t_wc \/ (t_wc+t_lc)\n    stat[(season, team)]['ScoreDiff'] = t_ws - t_ls\n    stat[(season, team)]['Seed'] = int(ts.loc[(ts['Season']==season)&(ts['TeamID']==team),'Seed'].any())","3a5595ca":"def feat(df):\n    for i in df.index:\n        season = int(df.at[i, 'Season'])\n        team1 = df.at[i, 'Team1']\n        team2 = df.at[i, 'Team2']\n        calculate_stat(season, team1)\n        calculate_stat(season, team2)\n        df.at[i, 'T1WinRate'] = stat[(season, team1)]['WinRate']\n        df.at[i, 'T2WinRate'] = stat[(season, team2)]['WinRate']\n        df.at[i, 'T1ScoreDiff'] = stat[(season, team1)]['ScoreDiff']\n        df.at[i, 'T2ScoreDiff'] = stat[(season, team2)]['ScoreDiff']\n        df.at[i, 'T1Seed'] = stat[(season, team1)]['Seed']\n        df.at[i, 'T2Seed'] = stat[(season, team2)]['Seed']\n    return df","28778690":"td = feat(td)\nss = feat(ss)","0031f868":"model = LogisticRegression()\ncols = ['T1ScoreDiff','T2ScoreDiff','T1WinRate','T2WinRate','T1Seed','T2Seed']","03c03f51":"def get_train_test(df, test_season):\n    train_df = df.loc[df['Season']!=test_season, cols+['target']]\n    test_df = df.loc[df['Season']==test_season, cols+['target']]\n    return train_df, test_df","42b7e93a":"gloss = 0\nseasons = [2015, 2016, 2017, 2018, 2019]\n\nfor season in seasons:\n    train, test = get_train_test(td, season)\n    model.fit(train.drop('target', axis=1), train['target'])\n    pred = model.predict_proba(test.drop('target', axis=1))[:,1]\n    loss = log_loss(test['target'], pred)\n    print(season, loss)\n    gloss += loss\n\nprint('average', gloss\/len(seasons))","d5abdb8e":"model.fit(td[cols], td['target'])\npred = model.predict_proba(ss[cols])[:,1]\nss['Pred'] = pred.clip(0, 1)\nss.to_csv('submission.csv', columns=['ID','Pred'], index=None)\nss","3679ee9b":"### Evaluate on last five years data","f2eb6889":"### Define such simple model","a58951ca":"### Prepare submission\nSubmission results will be leaky, so it is better to focus on evaluation in the previous section of this notebook.","8742d135":"### Dataframe formation with feature engineering"}}