{"cell_type":{"38712190":"code","21e0d888":"code","b5a426ab":"code","d77533ab":"code","bceb357f":"code","cd1fc638":"code","f8a874ef":"code","46a71c47":"code","be5f772c":"code","c4056f21":"code","ae301894":"code","818c5e70":"code","cbeeda18":"code","d675929f":"code","8bb69a51":"code","4c7c8021":"code","eb089964":"code","a1299f4a":"code","2c60472d":"code","62aa3539":"code","97ae5742":"code","381fbbcd":"code","3d20189f":"code","28bd52c9":"code","28afe5b7":"code","8217749c":"code","a33d9b76":"code","098c45a4":"code","22113cce":"code","51a5d334":"code","f1086bd1":"code","bbc9f5a5":"code","c66396c9":"code","125f5bc9":"code","1a775373":"code","9b6bf95b":"code","f49e4550":"code","6ec1868d":"code","86c3a44e":"code","6f761c6c":"code","7b980a5d":"code","23f2cec9":"code","66d3f097":"markdown","fb24462a":"markdown","84f9f370":"markdown","6bff5ebb":"markdown","0987a494":"markdown","749d054a":"markdown","e119d59f":"markdown","0563f55d":"markdown","096dcdeb":"markdown","fe959bee":"markdown","68c981ee":"markdown","0edcaa2b":"markdown","6c0c02e2":"markdown","1e1617d6":"markdown","e522bfe3":"markdown","6ad4eff0":"markdown","432314ae":"markdown","25585b11":"markdown","d08b99f6":"markdown","ae2918a1":"markdown","6b4e8b72":"markdown","0d0c77f6":"markdown","94021e3c":"markdown","5585d9cb":"markdown","f40fcd4a":"markdown","f69c8dbc":"markdown","601bcb14":"markdown","6a5600f9":"markdown","603f2af1":"markdown","748d9ba5":"markdown","cf815b2e":"markdown","3b95f11f":"markdown","29bac00a":"markdown","27e27d04":"markdown","ad5a319a":"markdown","611e4754":"markdown","7ecd412a":"markdown","904f0784":"markdown","ffa97635":"markdown","2ce4d945":"markdown","3e15bd33":"markdown"},"source":{"38712190":"import pandas as pd\nimport numpy as np\nfrom datetime import datetime\nimport gc\nfrom sklearn.linear_model import LinearRegression\n\n","21e0d888":"data_folder = \"..\/input\/g-research-crypto-forecasting\/\"\n!ls $data_folder","b5a426ab":"%%time\ncrypto_df = pd.read_csv(data_folder + 'train.csv')","d77533ab":"from datetime import datetime\n# crypto_df['readable_timestamp'] = crypto_df['timestamp']\n# crypto_df['readable_timestamp'] = crypto_df['readable_timestamp'].apply( lambda x: datetime.fromtimestamp(x))\ncrypto_df.head(10)","bceb357f":"crypto_df.tail(20)","cd1fc638":"# crypto_df.groupby(['Asset_ID'])['readable_timestamp'].min()","f8a874ef":"# crypto_df.groupby(['Asset_ID'])['readable_timestamp'].max()","46a71c47":"crypto_df.describe()","be5f772c":"crypto_df.count()","c4056f21":"BTC_ID = 1\nETH_ID = 6\n\nasset_details = pd.read_csv(data_folder + 'asset_details.csv')\nasset_details","ae301894":"btc = crypto_df[crypto_df[\"Asset_ID\"]==1].set_index(\"timestamp\") # Asset_ID = 1 for Bitcoin\nbtc_mini = btc.iloc[-200:] # Select recent data rows","818c5e70":"import plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Candlestick(x=btc_mini.index, open=btc_mini['Open'], high=btc_mini['High'], low=btc_mini['Low'], close=btc_mini['Close'])])\nfig.show()","cbeeda18":"eth = crypto_df[crypto_df[\"Asset_ID\"]==6].set_index(\"timestamp\") # Asset_ID = 6 for Ethereum\ncryptos = []\nfor i in sorted(asset_details['Asset_ID'].unique()):\n    cryptos.append(crypto_df[crypto_df[\"Asset_ID\"]==i].set_index(\"timestamp\"))\n\neth = cryptos[ETH_ID]\neth.info(show_counts =True)","d675929f":"eth.isna().sum()","8bb69a51":"btc.head()","4c7c8021":"beg_btc = btc.index[0].astype('datetime64[s]')\nend_btc = btc.index[-1].astype('datetime64[s]')\nbeg_eth = eth.index[0].astype('datetime64[s]')\nend_eth = eth.index[-1].astype('datetime64[s]')\n\nprint('BTC data goes from ', beg_btc, 'to ', end_btc)\nprint('Ethereum data goes from ', beg_eth, 'to ', end_eth)","eb089964":"(eth.index[1:]-eth.index[:-1]).value_counts().head()","a1299f4a":"eth = eth.reindex(range(eth.index[0],eth.index[-1]+60,60),method='pad')","2c60472d":"(eth.index[1:]-eth.index[:-1]).value_counts().head()","62aa3539":"import matplotlib.pyplot as plt\n\n# plot vwap time series for both chosen assets\nf = plt.figure(figsize=(15,4))\n\n# fill missing values for all crypto\nfor i in range(len(cryptos)):\n    crypto = cryptos[i]\n    cryptos[i] = crypto.reindex(range(crypto.index[0],crypto.index[-1]+60,60),method='pad')\n    \nbtc = cryptos[BTC_ID]\neth = cryptos[ETH_ID]\n\nax = f.add_subplot(121)\nplt.plot(btc['Close'], label='BTC')\nplt.legend()\nplt.xlabel('Time')\nplt.ylabel('Bitcoin')\n\neth = cryptos[6]\nax2 = f.add_subplot(122)\nax2.plot(eth['Close'], color='red', label='ETH')\nplt.legend()\nplt.xlabel('Time')\nplt.ylabel('Ethereum')\n\nplt.tight_layout()\nplt.show()","97ae5742":"import time\n\n# auxiliary function, from datetime to timestamp\ntotimestamp = lambda s: np.int32(time.mktime(datetime.strptime(s, \"%d\/%m\/%Y\").timetuple()))\n\n# create intervals\nbtc_mini_2021 = btc.loc[totimestamp('01\/06\/2021'):totimestamp('01\/07\/2021')]\neth_mini_2021 = eth.loc[totimestamp('01\/06\/2021'):totimestamp('01\/07\/2021')]","381fbbcd":"# plot time series for both chosen assets\nf = plt.figure(figsize=(7,8))\n\nax = f.add_subplot(211)\nplt.plot(btc_mini_2021['Close'], label='btc')\nplt.legend()\nplt.xlabel('Time')\nplt.ylabel('Bitcoin Close')\n\nax2 = f.add_subplot(212)\nax2.plot(eth_mini_2021['Close'], color='red', label='eth')\nplt.legend()\nplt.xlabel('Time')\nplt.ylabel('Ethereum Close')\n\nplt.tight_layout()\nplt.show()","3d20189f":"# define function to compute log returns\ndef log_return(series, periods=1):\n    return np.log(series).diff(periods=periods)","28bd52c9":"import scipy.stats as stats\n\nlret_btc = log_return(btc_mini_2021.Close)[1:]\nlret_eth = log_return(eth_mini_2021.Close)[1:]\nlret_btc.rename('lret_btc', inplace=True)\nlret_eth.rename('lret_eth', inplace=True)\n\nplt.figure(figsize=(8,4))\nplt.plot(lret_btc);\nplt.plot(lret_eth);\nplt.show()","28afe5b7":"# join two asset in single DataFrame\n\nlret_btc_long = log_return(btc.Close)[1:]\nlret_eth_long = log_return(eth.Close)[1:]\nlret_btc_long.rename('lret_btc', inplace=True)\nlret_eth_long.rename('lret_eth', inplace=True)\ntwo_assets = pd.concat([lret_btc_long, lret_eth_long], axis=1)\n\n# group consecutive rows and use .corr() for correlation between columns\ncorr_time = two_assets.groupby(two_assets.index\/\/(10000*60)).corr().loc[:,\"lret_btc\"].loc[:,\"lret_eth\"]\n\ncorr_time.plot();\nplt.xticks([])\nplt.ylabel(\"Correlation\")\nplt.title(\"Correlation between BTC and ETH over time\");\n\ndel corr_time\ngc.collect()","8217749c":"# create dataframe with returns for all assets\nall_assets_2021 = pd.DataFrame([])\nfor asset_id, asset_name in zip(asset_details.Asset_ID, asset_details.Asset_Name):\n  asset = crypto_df[crypto_df[\"Asset_ID\"]==asset_id].set_index(\"timestamp\")\n  asset = asset.loc[totimestamp('01\/01\/2021'):totimestamp('01\/05\/2021')]\n  asset = asset.reindex(range(asset.index[0],asset.index[-1]+60,60),method='pad')\n  lret = log_return(asset.Close.fillna(0))[1:]\n  all_assets_2021 = all_assets_2021.join(lret, rsuffix=asset_name, how=\"outer\")","a33d9b76":"all_assets_2021.corr()","098c45a4":"plt.imshow(all_assets_2021.corr());\nplt.yticks(asset_details.Asset_ID.values, asset_details.Asset_Name.values);\nplt.xticks(asset_details.Asset_ID.values, asset_details.Asset_Name.values, rotation='vertical');\nplt.colorbar();\n\ndel all_assets_2021\ngc.collect()","22113cce":"asset_details[asset_details['Asset_ID']==BTC_ID].iloc[0].Weight","51a5d334":"# Select some input features from the trading data: \n# 5 min log return, abs(5 min log return), upper shadow, and lower shadow.\nupper_shadow = lambda asset: asset.High - np.maximum(asset.Close,asset.Open)\nlower_shadow = lambda asset: np.minimum(asset.Close,asset.Open)- asset.Low\n\nTIME_STEP_FEATURE_RANG = range(1, 6)\n\nX_cryptos = []\ny_cryptos = []\nfor crypto in cryptos:\n    #Replace invalid VWAP with previous value.\n    invalid_count = (crypto.VWAP <= 0).sum() + crypto.VWAP.isna().sum()\n    if invalid_count > 0:\n        print(crypto['Asset_ID'].iloc[0], 'Foud invalid VWAP account:', (crypto.VWAP <= 0).sum(), crypto.VWAP.isna().sum())\n        crypto.loc[crypto.VWAP <= 0, 'VWAP'] = np.nan\n        crypto.VWAP = crypto.VWAP.fillna(method=\"ffill\")\n        \n    asset_detail = asset_details[asset_details['Asset_ID']==crypto['Asset_ID'].iloc[0]].iloc[0]\n    print('Add feature for', asset_detail.Asset_Name, asset_detail.Weight)\n    crypto['Weight'] = asset_detail.Weight\n    \n    features = [upper_shadow(crypto), lower_shadow(crypto), crypto['Weight']]\n    \n    for step in TIME_STEP_FEATURE_RANG:\n        features.append(log_return(crypto.VWAP,periods=i))\n        features.append(log_return(crypto.VWAP,periods=i).abs())\n    \n    X_cryptos.append(pd.concat(features, axis=1))\n    y_cryptos.append(crypto.Target)\n\n\nX_btc = X_cryptos[BTC_ID]\ny_btc = y_cryptos[BTC_ID]\n\nX_eth = X_cryptos[ETH_ID]\ny_eth = y_cryptos[ETH_ID]\n\nX_btc.head(50)","f1086bd1":"# select training and test periods\ntrain_window = [totimestamp(\"13\/04\/2021\"), totimestamp(\"21\/09\/2021\")]\ntest_window = [totimestamp(\"01\/09\/2021\"), totimestamp(\"21\/09\/2021\")]\n\nX_crypto_train = []\nX_crypto_test = []\ny_crypto_train = []\ny_crypto_test = []\n\n# divide data into train and test, compute X and y\n# we aim to build simple regression models using a window_size of 1\nfor X_crypto in X_cryptos:\n    X_crypto_train.append(X_crypto.loc[train_window[0]:train_window[1]].fillna(0).to_numpy()) # filling NaN's with zeros\n    X_crypto_test.append(X_crypto.loc[test_window[0]:test_window[1]].fillna(0).to_numpy())\nfor y_crypto in y_cryptos:\n    y_crypto_train.append(y_crypto.loc[train_window[0]:train_window[1]].fillna(0).to_numpy())\n    y_crypto_test.append(y_crypto.loc[test_window[0]:test_window[1]].fillna(0).to_numpy())\n\n\nX_btc_train = X_crypto_train[BTC_ID]\ny_btc_train = y_crypto_train[BTC_ID]\n\nX_btc_test = X_crypto_test[BTC_ID]\ny_btc_test = y_crypto_test[BTC_ID]\n\nX_eth_train = X_crypto_train[ETH_ID]\ny_eth_train = y_crypto_train[ETH_ID]\n\nX_eth_test = X_crypto_test[ETH_ID]\ny_eth_test = y_crypto_test[ETH_ID]","bbc9f5a5":"from sklearn.preprocessing import StandardScaler\n# simple preprocessing of the data \nscaler = StandardScaler()\n\n# Fit all datas\nscaler.fit(np.concatenate(X_crypto_train))","c66396c9":"X_train_scaled = []\nX_test_scaled = []\nfor X_crypto in X_crypto_train:\n    X_train_scaled.append(scaler.transform(X_crypto))\n\nfor X_crypto in X_crypto_test:\n    X_test_scaled.append(scaler.transform(X_crypto))\n\nX_btc_train_scaled = X_train_scaled[BTC_ID]\nX_btc_test_scaled = X_test_scaled[BTC_ID]\n\nX_eth_train_scaled = X_train_scaled[ETH_ID]\nX_eth_test_scaled = X_test_scaled[ETH_ID]","125f5bc9":"X_crypto_train[0].shape, X_train_scaled[0].shape","1a775373":"%%time\n# implement basic ML baseline (one per asset)\nlr_cryptos = [LinearRegression() for i in range(len(X_train_scaled))]\ny_pred_single = []\ny_pred_single_train = []\n\nfor i in range(len(X_train_scaled)):\n    lr_cryptos[i].fit(X_train_scaled[i], y_crypto_train[i])\n    y_pred_single.append(lr_cryptos[i].predict(X_test_scaled[i]))\n    y_pred_single_train.append(lr_cryptos[i].predict(X_train_scaled[i]))\n\ny_pred_single_all = np.column_stack(y_pred_single)\ny_pred_single_all_train = np.column_stack(y_pred_single_train)\n\ny_pred_lr_btc = y_pred_single_all[:, BTC_ID]\ny_pred_lr_eth = y_pred_single_all[:, ETH_ID]\n\ndel lr_cryptos\ngc.collect()","9b6bf95b":"print('Test score for LR baseline: BTC', f\"{np.corrcoef(y_pred_lr_btc, y_btc_test)[0,1]:.2f}\", \n                                ', ETH', f\"{np.corrcoef(y_pred_lr_eth, y_eth_test)[0,1]:.2f}\")\n","f49e4550":"%%script echo skipping\n# implement more complex baseline (multiple output regression model)\nfrom sklearn.multioutput import MultiOutputRegressor\n\n# we concatenate X and y for both assets\nX_both_train = np.concatenate((X_btc_train_scaled, X_eth_train_scaled), axis=1)\nX_both_test = np.concatenate((X_btc_test_scaled, X_eth_test_scaled), axis=1)\ny_both_train = np.column_stack((y_btc_train, y_eth_train))\ny_both_test = np.column_stack((y_btc_test, y_eth_test))\n\n# define the direct multioutput model and fit it\nmlr = MultiOutputRegressor(LinearRegression())\nmlr.fit(X_both_train,y_both_train)\ny_pred_lr_both = mlr.predict(X_both_test)\n\nprint('Test score for multiple output LR baseline: BTC', f\"{np.corrcoef(y_pred_lr_both[:,0], y_btc_test)[0,1]:.2f}\", \n                                                ', ETH', f\"{np.corrcoef(y_pred_lr_both[:,1], y_eth_test)[0,1]:.2f}\")\n\ndel mlr, X_both_train, X_both_test\ngc.collect()","6ec1868d":"%%script echo skipping\n# we concatenate X and y for both assets\nX_all_train = np.concatenate(X_train_scaled, axis=1)\nX_all_test = np.concatenate(X_test_scaled, axis=1)\ny_all_train = np.column_stack(y_crypto_train)\ny_all_test = np.column_stack(y_crypto_test)\n\n# define the direct multioutput model and fit it\n\nmlr_all = MultiOutputRegressor(LinearRegression())\nmlr_all.fit(X_all_train,y_all_train)\ny_pred_lr_all = mlr_all.predict(X_all_test)\n\ny_pred_lr_all_train = mlr_all.predict(X_all_train)\n\ny_pred_lr_all_both = y_pred_lr_all[:, [BTC_ID, ETH_ID]]\nprint('Test score for all output LR baseline: BTC', f\"{np.corrcoef(y_pred_lr_all_both[:,0], y_btc_test)[0,1]:.2f}\", \n                                                ', ETH', f\"{np.corrcoef(y_pred_lr_all_both[:,1], y_eth_test)[0,1]:.2f}\")\n\ndel mlr_all, X_all_train, X_all_test\ngc.collect()","86c3a44e":"# Update cryptos to train data\nfor i in range(len(cryptos)):\n    cryptos[i] = cryptos[i].loc[train_window[0]:train_window[1]]\n\ngc.collect()","6f761c6c":"1632182400 in cryptos[0].index","7b980a5d":"def get_predict_by_test_df(test_df, cryptos, y_pred_lr_all_train):\n    #get iloc index\n    preds = []\n    for i in range(test_df.shape[0]):\n        test = test_df.iloc[i]\n        timestamp = test.timestamp\n        pred = 0\n        if timestamp in cryptos[0].index:\n            train_idx = cryptos[0].index.get_loc(cryptos[0].loc[timestamp].name)\n#             print('train_idx', train_idx)\n            y_pred_all = y_pred_lr_all_train[train_idx]\n#             print(y_pred_all)\n            pred = y_pred_all[int(test.Asset_ID)]\n        else:\n            print('Not found test data:', test, datetime.fromtimestamp(timestamp))\n            # TODO: Get feature X and predict\n\n        preds.append(pred)\n    return preds","23f2cec9":"import gresearch_crypto\nfrom datetime import datetime\nenv = gresearch_crypto.make_env()\niter_test = env.iter_test()\n\n# Pickup one model for submission\nsubmit_y = y_pred_single_all_train\n\nfor (test_df, sample_prediction_df) in iter_test:\n    preds = get_predict_by_test_df(test_df, cryptos, submit_y)\n    print(preds)\n    sample_prediction_df['Target'] = preds\n    env.predict(sample_prediction_df)","66d3f097":"Let us inspect the data for another important asset, Ethereum.","fb24462a":"The assets have quite different history, but we could check if they correlate in recent times.","84f9f370":"Note the high but variable correlation between the assets. Here we can see that there is some changing dynamics over time, and this would be critical for this time series challenge, that is, how to perform forecasts in a highly non-stationary environment.\n\nA stationary behaviour of a system or a process is characterized by non-changing statistical properties over time such as the mean, variance and autocorrelation. On the other hand, a non-stationary behaviour is characterized by a continuous change of statistical properties over time. Stationarity is important because many useful analytical tools and statistical tests and models rely on it.\n\nWe can also check the correlation between all assets visualizing the correlation matrix. Note how some assets have much higher pairwise correlation than others.","6bff5ebb":"## Candlestick charts\n\nThe trading data format is an aggregated form of market data including for Open, High, Low and Close. We can visualize this data through the commonly used candlestick bar chart, which allows traders to perform technical analysis on intraday values. The bar's body length represents the price range between the open and close of that day's trading. When the bar is red, it means the close was lower than the open, and green otherwise. These are also referred to as bullish and bearish candlesticks. The wicks above and below the bars show the high and low prices of that interval's trading.","0987a494":"Missing asset data, for a given minute, is not represented by NaN's, but instead by the absence of those rows. We can check the timestamp difference between consecutive rows to see if there is missing data.","749d054a":"We can see the number of rows in the training set, and that there are missing values for the targets columns, which we will address later. Let's confirm that:\n","e119d59f":"We can visualize a slice of the Bitcoin prices using the `plotly` library. The bottom part of the plot shows a rangeslider, which you can use to zoom in the plot.","0563f55d":"Let's check the time range for Bitcoin and Ethereum data, using the coversion from timestamp to `datetime`.","096dcdeb":"# Preprocessing","fe959bee":"## The Cryptocurrency Market\n\nFirst, a quick introduction to the crypto world. Cryptocurrencies have become an extremely popular and volatile market, delivering massive returns (as well as losses) to investors. Thousands of cryptocurrencies have been created with a few major ones that many of you will have heard of including Bitcoin (BTC), Ether (ETH) or Dogecoin (DOGE).\n\nCryptocurrencies are traded extensively across crypto-exchanges, with an average volume of $41 billion traded daily over the last year, according to CryptoCompare (as of 25th July 2021). \n\nChanges in prices between different cryptocurrencies are highly interconnected. For example, Bitcoin has historically been a major driver of price changes across cryptocurrencies but other coins also impact the market.  \n","68c981ee":"# Building your prediction model","0edcaa2b":"Check missing data. Yes, we found it.","6c0c02e2":"We can visualize the log return for our two assets. See how the signal now looks more like white noise, with less drift than the time series for prices.","1e1617d6":"## Baseline model: Linear Regression\n\nWe will try a simple Linear Regression model on the features we designed. Note that Linear Regression is not commonly used in time series analysis, specially with only one time step! \n\nWe compare two Linear Regression baselines, one that considers each asset independently and one multiple inputs that models all assets together. \n","e522bfe3":"We can see that, for the training and test periods selected, the multiple asset LR model performs better than simply modelling each asset separately. Note that because the data is highly non-stationary, these results might vary a lot for different periods.","6ad4eff0":"\n## Forecasting returns\n\nA fundamental task in financial modeling is predicting how prices will behave in the near future. Using the time-series of historical prices as training data, we want to predict if prices will go up or down, and by how much, namely the asset *returns*.\n\nIn this competition, Kagglers are challenged to build machine learning models to predict the returns of 14 popular cryptocurrencies, in the time scale of minutes to hours. You will have access to millions of rows of minute-by-minute cryptocurrency trading data, with which you'll design your forecasting models for all 14 assets simultaneously. Your predictions will be evaluated by how much they correlate with real market data collected during the three-month evaluation period after the competition has closed. \n\nCryptocurrency returns prediction remains an open and extremely challenging forecasting task. This is a fascinating problem domain for the ML community given the extreme volatility of the assets, the non-stationary nature of the data, the market and meme manipulation, the correlation between assets and the very fast changing market conditions. We hope you find it as fascinating as we do! \n","432314ae":"Let check data describe. You can see huge data 24,236,806 as it takes 40 seconds to load data!","25585b11":"### Two Linear Regression","d08b99f6":"Notice that there are many gaps in the data. To work with most time series models, we should preprocess our data into a format without time gaps. To fill the gaps, we can use the `.reindex()` method for forward filling, filling gaps with the previous valid value. ","ae2918a1":"## Log returns\n\nIn order to analyze price changes for an asset we can deal with the price difference. However, different assets exhibit different price scales, so that the their returns are not readily comparable. We can solve this problem by computing the percentage change in price instead, also known as the return. This return coincides with the percentage change in our invested capital.\n\nReturns are widely used in finance, however log returns are preferred for mathematical modelling of time series, as they are additive across time. Also, while regular returns cannot go below -100%, log returns are not bounded.\n\nTo compute the log return, we can simply take the logarithm of the ratio between two consecutive prices. The first row will have an empty return as the previous value is unknown, therefore the empty return data point will be dropped.","6b4e8b72":"We encourage participants to perform additional statistical analyses to have a stronger grasp on the dataset, including autocorrelation, time-series decomposition and stationarity tests.","0d0c77f6":"We now standardize the input data. Standardization is the process of putting different variables on the same scale. In regression analysis, it is often crucial to standardize your independent variables or you may risk obtaining misleading results.","94021e3c":"We can see that each row of the data set has the trading data for an asset, at a given minute timestamp, described in detail below. ","5585d9cb":"This forecasting competition aims to predict returns in the near future for prices $P^a$, for each asset $a$. For each row in the dataset, we include the target for prediction, `Target`. `Target` is derived from log returns ($R^a$) over 15 minutes.\n\n$$R^a(t) = log (P^a(t+16)\\ \/\\ P^a(t+1))$$\n\nCrypto asset returns are highly correlated, following to a large extend the overall crypto market. As we want to test your ability to predict returns for individual assets, we perform a linear residualization, removing the market signal from individual asset returns when creating the target. In more detail, if $M(t)$ is the weighted average market returns, the target is:\n\n$$M(t) = \\frac{\\sum_a w^a R^a(t)}{\\sum_a w^a}  \\\\\n\\beta^a = \\frac{\\langle M \\cdot R^a \\rangle}{\\langle M^2 \\rangle} \\\\\n\\text{Target}^a(t) = R^a(t) - \\beta^a M(t)$$\n\nwhere the bracket $\\langle .\\rangle$ represent the rolling average over time (3750 minute windows), and same asset weights $w^a$ used for the evaluation metric.\n\nSome rows have null values for targets due to missing values in future prices. Rows with nulls in the test set ground truth are ignored for scoring purposes.\n\nIn the competition, your predictions will be evaluated on a weighted version of the Pearson correlation coefficient, with weights given by the `Weight` column in the Asset Details file.\n\nIn this tutorial, we will simplify things and use correlation (without weights) for evaluation, and consider only two assets, BTC and ETH.","f40fcd4a":"## Prediction targets and evaluation","f69c8dbc":"## Correlation between assets\n\nWe hypothesized before that crypto asset returns may exhibit some correlation. Let's check this in more detail now.\n\nWe can check how the correlation between Bitcoin and Ethereum change over time for the 2021 period we selected. ","601bcb14":"## Load the training set","6a5600f9":"## Data visualisation\n\nWe  will start by visualising the Close prices for the two assets we have selected.","603f2af1":"## Data features\nWe can see the different features included in the dataset. Specifically, the features included per asset are the following:\n*   **timestamp**: All timestamps are returned as second Unix timestamps (the number of seconds elapsed since 1970-01-01 00:00:00.000 UTC). Timestamps in this dataset are multiple of 60, indicating minute-by-minute data.\n*   **Asset_ID**: The asset ID corresponding to one of the crytocurrencies (e.g. `Asset_ID = 1` for Bitcoin). The mapping from `Asset_ID` to crypto asset is contained in `asset_details.csv`.\n*   **Count**: Total number of trades in the time interval (last minute).\n*   **Open**:\tOpening price of the time interval (in USD).\n*   **High**:\tHighest price reached during time interval (in USD).\n*   **Low**: Lowest price reached during time interval (in USD).\n*   **Close**:\tClosing price of the time interval (in USD).\n*   **Volume**:\tQuantity of asset bought or sold, displayed in base currency USD.\n*   **VWAP**: The average price of the asset over the time interval, weighted by volume. VWAP is an aggregated form of trade data.\n*   **Target**: Residual log-returns for the asset over a 15 minute horizon. \n\nThe first two columns define the time and asset indexes for this data row. The 6 middle columns are feature columns with the trading data for this asset and minute in time. The last column is the prediction target, which we will get to later in more detail.\n\nWe also view the asset information, including the list of all assets, the `Asset_ID` to asset mapping, and the weight of each asset used to weigh their relative importance in the evaluation metric.","748d9ba5":"### Full Linear Regression","cf815b2e":"## Evaluate baselines\n\nThe competition performance metric is weighted correlation. However, for now we will use simple correlation to evaluate the two baseline models built.","3b95f11f":"# Dataset description\n\nNow, let's dive into the data! We start by loading the competition's dataset and inspecting its basic properties. ","29bac00a":"# G-Research Crypto forecasting competition\n\nIn the [G-Research Crypto forecasting competition](link), participants have the challenge to predict  price returns across a bundle of major cryptocurrencies. To facilitate your participation, we have created this tutorial notebook covering some relevant concepts for the crypto forecasting challenge.\n\nThe notebook presents an introduction to crypto forecasting, describing the structure and elements of the dataset, some relevant statistical properties, as well as building a couple of ML baseline models and providing an example code submission.\n\n","27e27d04":"And check that are no time gaps now.","ad5a319a":"## Feature design\n\nWe first design a few relevant features to input to our model.","611e4754":"## Dealing with missing data\n","7ecd412a":"## Preparing the data for building predictive models\n\nAs we will train linear regression parameters, we need to separate training and test sets. To do so, we will compute X and y and split this data into train and test splits. Note that the test split represents a later part of the data, as it is commonly done in time series. ","904f0784":"### Simple Linear Regression","ffa97635":"# **Crypto forecasting tutorial**","2ce4d945":"On shorter intervals we can visually see some potential correlation between both assets, with some simultaneous ups and downs. A better format for analyzing such movements is by calculating asset returns. ","3e15bd33":"## Submission\n\nNote that this is a Code Competition, in which you must submit your notebook to be run against the hidden private data. Your notebook should use the provided python time-series API, which ensures that models do not peek forward in time. To use the API, follow the instructions and template in [Code Competition Detailed API instructions](https:\/\/www.kaggle.com\/sohier\/detailed-api-introduction) and [Basic Submission Template](https:\/\/www.kaggle.com\/sohier\/basic-submission-template)."}}