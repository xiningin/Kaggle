{"cell_type":{"1393557b":"code","ba1bb597":"code","0fa90f84":"code","3a6341f6":"code","869c7642":"code","a9dcdc42":"code","2c1a0870":"code","12135240":"code","636da9d7":"code","e488b507":"code","0552af3c":"code","6d052ff4":"code","9049dbba":"code","e40a7538":"code","78db4fbb":"code","d8d07bc4":"code","659c7b43":"code","5c185d54":"code","3c5c2e0d":"code","276173d3":"code","c1845c4e":"code","80770a41":"code","00a8d8d5":"code","01c65355":"code","139e2d3b":"code","5113a02a":"markdown","c039a8be":"markdown","4ef5caa2":"markdown","b31fe390":"markdown","c79d2069":"markdown","38f7eafe":"markdown","1522abde":"markdown","55722809":"markdown","997ddbd3":"markdown","6e435e03":"markdown","9b323308":"markdown","113ddfaa":"markdown","5e7f2c5f":"markdown","ecee2e4e":"markdown","8b4b2cb0":"markdown"},"source":{"1393557b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.datasets import make_classification\nfrom sklearn.metrics import accuracy_score, f1_score, confusion_matrix, classification_report\nfrom sklearn.tree import export_graphviz\nimport seaborn as sns\nimport pydot\n\n\n","ba1bb597":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        features = pd.read_csv(os.path.join(dirname, filename))","0fa90f84":"features.head()","3a6341f6":"print(features.isnull().sum(axis=0))","869c7642":"features.shape","a9dcdc42":"features.drop('time', axis=1, inplace=True)\nfeatures.head()","2c1a0870":"features.plot(y='age')","12135240":"features['anaemia'].value_counts().plot(kind='pie', autopct='%1.1f')\nplt.ylabel(\"Count\", labelpad=14)\nplt.title(\"Anameia \", y=1.02)","636da9d7":"features.plot(y='creatinine_phosphokinase')","e488b507":"features['diabetes'].value_counts().plot(kind='pie', autopct='%1.1f')\nplt.ylabel(\"Count\", labelpad=14)\nplt.title(\"Diabetes\", y=1.02)","0552af3c":"features.plot(y='ejection_fraction')","6d052ff4":"features['high_blood_pressure'].value_counts().plot(kind='pie', autopct='%1.1f')\nplt.ylabel(\"Count\", labelpad=14)\nplt.title(\"High blood pressure\", y=1.02)","9049dbba":"features.plot(y='platelets')","e40a7538":"features.plot(y='serum_creatinine')","78db4fbb":"features['sex'].value_counts().plot(kind='pie', autopct='%1.1f')\nplt.ylabel(\"Count\", labelpad=14)\nplt.title(\"Sex\", y=1.02)","d8d07bc4":"features.plot(y='serum_sodium')","659c7b43":"features['smoking'].value_counts().plot(kind='pie', autopct='%1.1f')\nplt.ylabel(\"Count\", labelpad=14)\nplt.title(\"Smoking\", y=1.02)","5c185d54":"features['DEATH_EVENT'].value_counts().plot(kind='pie', autopct='%1.1f')\nplt.ylabel(\"Count\", labelpad=14)\nplt.title(\"Death event\", y=1.02)","3c5c2e0d":"X=features.drop(['DEATH_EVENT'], axis=1)\ny=features['DEATH_EVENT']","276173d3":"train_features, test_features, train_labels, test_labels = train_test_split(X, y, test_size=0.2, random_state=1)","c1845c4e":"print('Training Features Shape:', train_features.shape)\nprint('Training Labels Shape:', train_labels.shape)\nprint('Testing Features Shape:', test_features.shape)\nprint('Testing Labels Shape:', test_labels.shape)","80770a41":"rfc=RandomForestClassifier()\nrfc.fit(train_features,train_labels)\np2=rfc.predict(test_features)\ns2=accuracy_score(test_labels,p2)\nprint(\"Random Forrest Accuracy :\", s2*100,'%')","00a8d8d5":"mtx = confusion_matrix(test_labels, p2)\nsns.heatmap(mtx, annot=True, fmt='d', linewidths=.5,  cmap=\"Blues\", cbar=False)\nplt.ylabel('true label')\nplt.xlabel('predicted label')","01c65355":"tree = rfc.estimators_[5]\nfeature_list = list(features.columns[:-1])\n\n# Pull out one tree from the forest\ntree = rfc.estimators_[5]\n# Export the image to a dot file\nexport_graphviz(tree, out_file = 'tree.dot', feature_names = feature_list, rounded = True, precision = 1)\n# Use dot file to create a graph\n(graph, ) = pydot.graph_from_dot_file('tree.dot')\n# Write graph to a png file\ngraph.write_png('tree.png')","139e2d3b":"importances = list(rfc.feature_importances_)\n# List of tuples with variable and importance\nfeature_importances = [(feature, round(importance, 2)) for feature, importance in zip(feature_list, importances)]\n# Sort the feature importances by most important first\nfeature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n# Print out the feature and importances \n[print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances];","5113a02a":"Wir haben uns entschlossen, die Spalte \"time\" nicht zu verwenden, da diese keine deterministische Information beinhaltet.\n\nDie \"time\" Spalte zeigt lediglich die Dauer, die er Patient an der Studie teilgenommen hat.\nSomit k\u00f6nnen entweder der Tod des Patienten oder das Ende seiner Behandlung als terminaler Zeitpunkt von \"time\" sein.\n\nDes Weiteren gibt die Spalte keinerlei Information \u00fcber den chronologischen Ablauf der Erkrankung und demensprechend keinen Mehrwert.","c039a8be":"Gruppe: Kevin Hilbert, Jan Andersson, Philip W\u00e4chter, Hannes Mildt, Henrik Weede\n\nThema: Trainieren eines Neuronalen Netzes zur Prognostizierung des Todesfalls eines Patienten aufgrund von Vorerkrankungen und Vorbelastungen\n\nDatenbasis: https:\/\/www.kaggle.com\/andrewmvd\/heart-failure-clinical-data","4ef5caa2":"Ermittlung von Information gain f\u00fcr alle Features","b31fe390":"# Training","c79d2069":"Mit features.shape() wird die Form der Daten ausgegeben.\nDer Datensatz besteht aus 299 Samples (Zeilen) und 13 Features (Spalten)","38f7eafe":"Speichern der B\u00e4ume in einem Bild (.png)","1522abde":"Darstellen der Daten in einer Tabelle","55722809":"Darstellung von F\u00e4llen im Vergleich zwischen Prediction und Testdaten","997ddbd3":"Die  Daten werden in Trainingsdaten und Testdaten aufgeteilt. Hier ist der Testanteil durch den Parameter *test_size=0.2* auf 20% der Gesamtdaten beschr\u00e4nkt.","6e435e03":"Vergleich von Prediction des Netzes und Testdaten","9b323308":"Importiern von ben\u00f6tigten Packages","113ddfaa":"# Vorverarbeitung","5e7f2c5f":"Das Death Event ist der Wert, zu dem wir Evaluieren wollen. Dementsprechend wird dieses feature nicht verwendet","ecee2e4e":"Auslesen der Daten aus dem gegebenen Datensatz","8b4b2cb0":"Pr\u00fcfen auf Datens\u00e4tze, welche Nullwerte beinhalten.\nKeine Nullwerte gefunden => Keine Anpassungen an Daten n\u00f6tig"}}