{"cell_type":{"a1a0a4c5":"code","1257ee5f":"code","b3cb3ea0":"code","524ed36b":"code","70c8fe7e":"code","99735d63":"code","197ec414":"code","3a02adee":"code","ccda307f":"code","cea15517":"code","7f7ab860":"code","95cdf867":"code","ef306b17":"code","71c67599":"code","0fc87891":"code","f86ecbc1":"code","a09d848b":"code","24e8407c":"code","4dce0ccf":"code","2e1d5ea6":"code","ae382daa":"code","5489e098":"code","c3f61c6a":"code","ee95a23e":"code","67d58e5e":"code","d7b91d00":"code","3ef88ecc":"code","73a8a828":"code","a3963f7a":"code","67bc0eda":"code","19029727":"code","862a1d40":"code","57c56a49":"code","90b143ff":"code","1ba7972e":"code","86f18971":"code","36692f73":"code","f69ca17d":"code","15b726fe":"code","caf0e57c":"code","29f9605c":"code","b03e726c":"code","5110b4c4":"code","ac85a26e":"code","7fbfb6b2":"code","13473794":"code","fd5ad6b3":"code","e85808b0":"code","c677224d":"code","7c8ee43f":"code","3b7fc5c9":"code","14626d8e":"code","b3df4e75":"code","25531a78":"code","9f7c1f52":"code","99bfbebc":"code","862b796f":"code","07b92e8e":"code","5b997249":"markdown","a943d3d7":"markdown","598c0148":"markdown","11e29921":"markdown"},"source":{"a1a0a4c5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nimport seaborn as sns","1257ee5f":"df = pd.read_csv('..\/input\/students-performance-in-exams\/StudentsPerformance.csv', engine = 'python')","b3cb3ea0":"df.head()","524ed36b":"df.shape","70c8fe7e":"df.info()","99735d63":"# no missing values\ndf.isna().sum()","197ec414":"# distribution of gender\ndf['gender'].value_counts()","3a02adee":"# distribution of race\/ethnicity \ndf['race\/ethnicity'].value_counts()","ccda307f":"# distribution of parental education\ndf['parental level of education'].value_counts()","cea15517":"# distribution of discounted lunch\ndf['lunch'].value_counts()","7f7ab860":"# distribution of test preparation\ndf['test preparation course'].value_counts()","95cdf867":"sns.countplot(df['gender'])\nplt.title(\"Gender Counts\")","ef306b17":"sns.countplot(df['race\/ethnicity'])\nplt.title(\"Race\/Enthicity Counts\")","71c67599":"chart = sns.countplot(df['parental level of education'])\nplt.title(\"Parents Education\")\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45)","0fc87891":"chart = sns.countplot(df['lunch'])\nplt.title(\"Standard or Free\/Reduced\")","f86ecbc1":"chart = sns.countplot(df['test preparation course'])\nplt.title(\"Took Test Preparation or Not\")","a09d848b":"plt.ylim(0, 50)\nplt.xlim(0,110)\nplt.title(\"Math Score Histogram\")\ndf['math score'].hist(bins = 100)","24e8407c":"plt.ylim(0, 50)\nplt.xlim(0,110)\nplt.title(\"Reading Score Histogram\")\ndf['reading score'].hist(bins = 100)","4dce0ccf":"plt.ylim(0, 50)\nplt.xlim(0,110)\nplt.title(\"Writing Score Histogram\")\ndf['writing score'].hist(bins = 100)","2e1d5ea6":"df.plot(x='math score', y='reading score', style = 'o')\nplt.title(\"Scatter Plot Between Math and Reading Scores\")","ae382daa":"df.plot(x='math score', y='writing score', style = 'o')\nplt.title(\"Scatter Plot Between Math and Writing Scores\")","5489e098":"df.plot(x='reading score', y='writing score', style = 'o')\nplt.title(\"Scatter Plot Between Reading and Writing Scores\")","c3f61c6a":"# mean of scores by gender\ndf1 = df.groupby('gender').mean()","ee95a23e":"df1","67d58e5e":"# transpose the grouped df for chart display\ndf2 = df1.T","d7b91d00":"df2","3ef88ecc":"ax = df2.plot(kind='bar', title =\"Average Grades by Gender\", figsize=(10, 7), legend=True, fontsize=12)","73a8a828":"df.info()","a3963f7a":"# one hot encoding of categorical variables\nrace = pd.get_dummies(df['race\/ethnicity'])","67bc0eda":"race.head()","19029727":"parents = pd.get_dummies(df['parental level of education'])","862a1d40":"lunch = pd.get_dummies(df['lunch'])","57c56a49":"test_prep = pd.get_dummies(df['test preparation course'])","90b143ff":"# listing the encoded dataframes\ndummies = [race, parents, lunch, test_prep]","1ba7972e":"# concatenate encoded dfs to eachother\nconcat = pd.concat(dummies, axis = 1)","86f18971":"concat.head()","36692f73":"# concatenate dummy df with original df\ndf3 = pd.concat([df, concat], axis = 1)","f69ca17d":"df3.info()","15b726fe":"# average of values by gender\ndf_group = df3.groupby('gender').mean()\ndf_group","caf0e57c":"# drop object columns\ndf4 = df3.drop(['race\/ethnicity', 'lunch', 'test preparation course', 'parental level of education'], axis = 1)","29f9605c":"df4.head()","b03e726c":"# assign score columns to X\nX = df4[['math score', 'reading score', 'writing score']]","5110b4c4":"X.head()","ac85a26e":"y = df['gender']","7fbfb6b2":"# split into train \/ test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .15, random_state = 9)","13473794":"# standardize X data\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","fd5ad6b3":"from sklearn.ensemble import RandomForestClassifier","e85808b0":"regr_rf = RandomForestClassifier(max_depth=None, random_state=2, n_estimators=600)\nregr_rf.fit(X_train, y_train)","c677224d":"rf_pred = regr_rf.predict(X_test)\nrf_pred","7c8ee43f":"accuracy = accuracy_score(y_test, rf_pred)\naccuracy","3b7fc5c9":"from sklearn import linear_model","14626d8e":"log_reg = linear_model.LogisticRegression(solver=\"newton-cg\", C=.750, penalty=\"l2\") \nlog_reg.fit(X_train, y_train)\nlog_pred = log_reg.predict(X_test)","b3df4e75":"print(accuracy_score(y_test, log_pred))","25531a78":"svc = svm.SVC(kernel = 'rbf', gamma = 2.5, C = 1.0)\nsvc.fit(X_train, y_train)\nsvc_pred = svc.predict(X_test)","9f7c1f52":"y_test.value_counts()","99bfbebc":"print(accuracy_score(y_test, svc_pred))","862b796f":"conf_mat = confusion_matrix(y_test, svc_pred)\nconf_mat","07b92e8e":"ax= plt.subplot()\nsns.heatmap(conf_mat, annot=True, ax = ax); #annot=True to annotate cells\n\n# labels, title and ticks\nax.set_xlabel('Predicted labels');ax.set_ylabel('True labels'); \nax.set_title('Confusion Matrix'); \nax.xaxis.set_ticklabels(['female', 'male']); ax.yaxis.set_ticklabels(['female', 'male']);","5b997249":"# Random Forest Classifier","a943d3d7":"# Support Vector Classification","598c0148":"# Logistic Regression","11e29921":"# Preprocessing"}}