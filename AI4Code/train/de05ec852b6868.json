{"cell_type":{"87d68446":"code","f21b0717":"code","b3f1f6ba":"code","c1d26f06":"code","46e642cc":"code","e0bdb5a2":"code","ca01e60d":"code","034df9ae":"code","e6ea69eb":"code","054a6175":"code","6d0f3545":"code","8441b349":"code","262f0df8":"code","ee675e9d":"code","4593831a":"code","9eb9d10f":"code","1a0aa33b":"code","6fee45a0":"markdown","05ce2774":"markdown","e67c1350":"markdown","8954ae83":"markdown","4bb64cdd":"markdown","dc7475b9":"markdown","7b1d4012":"markdown","825049fe":"markdown","7b067525":"markdown","98e7ddeb":"markdown","3139bbf0":"markdown","2788c1fb":"markdown","5d0db34d":"markdown","a3b6d390":"markdown","80cca407":"markdown","56e5f113":"markdown","c7020f4c":"markdown"},"source":{"87d68446":"pip install pylibjpeg pylibjpeg-libjpeg pydicom\n","f21b0717":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os, glob, ast, cv2, sys\nfrom pathlib import Path\nimport seaborn as sns\nimport pylibjpeg\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nfrom collections import Counter\nimport pydicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly as py\ninit_notebook_mode(connected=True)\n\nfrom colorama import Fore, Back, Style\ny_ = Fore.YELLOW\nr_ = Fore.RED\ng_ = Fore.GREEN\nb_ = Fore.BLUE\nm_ = Fore.MAGENTA\nsr_ = Style.RESET_ALL\nprint(f\"{y_}Folder Contents:{b_}\\n\")\n\ncount = 1\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    if count < 10:\n        for filename in filenames:\n            print(f\"{os.path.join(dirname, filename)}\");\n            count += 1\nprint(f\"{sr_}\")","b3f1f6ba":"files = glob.glob('\/kaggle\/input\/siim-covid19-detection\/*')\n\nprint(f\" {r_} Number of CSV Files : {b_}{len([file for file in files if file.endswith('.csv')])}{sr_}\")\n\ntraining_study_files = glob.glob('\/kaggle\/input\/siim-covid19-detection\/train\/*')\nprint(f\" {r_} Number of Training Study Files : {b_}{len(training_study_files)}{sr_}\")\ntraining_series_files = glob.glob('\/kaggle\/input\/siim-covid19-detection\/train\/*\/*')\nprint(f\" {r_} Number of Training Series Files : {b_}{len(training_series_files)}{sr_}\")\ntraining_image_files = glob.glob('\/kaggle\/input\/siim-covid19-detection\/train\/*\/*\/*.dcm')\nprint(f\" {r_} Number of Training Image (.dcm) Files : {b_}{len(training_image_files)} \\n\")\n\ntesting_study_files = glob.glob('\/kaggle\/input\/siim-covid19-detection\/test\/*')\nprint(f\" {r_} Number of Testing Study Files : {b_}{len(testing_study_files)}{sr_}\")\ntesting_series_files = glob.glob('\/kaggle\/input\/siim-covid19-detection\/test\/*\/*')\nprint(f\" {r_} Number of Testing Series Files : {b_}{len(testing_series_files)}{sr_}\")\ntesting_image_files = glob.glob('\/kaggle\/input\/siim-covid19-detection\/test\/*\/*\/*.dcm')\nprint(f\" {r_} Number of Testing Image (.dcm) Files : {b_}{len(testing_image_files)}{sr_}\")\n\n## Intuitively we can think study as number of patients (6064) and there can be multiple radiographs taken by any single patient. \n## Thus in total there is 6334 image(.dcm) files.","c1d26f06":"tsl_df = pd.read_csv('\/kaggle\/input\/siim-covid19-detection\/train_study_level.csv')\nprint(\"\\n\", tsl_df.info())\ntsl_df.head()","46e642cc":"print(f\"{r_}Unique Elements : \\n {b_}{np.unique(tsl_df[list(tsl_df.columns[1:])].values, axis=0)}{sr_}\")","e0bdb5a2":"columns = tsl_df.columns[1:]\nx0 = [columns[0],columns[1],columns[2],columns[3]]\ny0 = [str(len(tsl_df[tsl_df[columns[0]] == 0])), str(len(tsl_df[tsl_df[columns[1]] == 0])), str(len(tsl_df[tsl_df[columns[2]] == 0])), str(len(tsl_df[tsl_df[columns[3]] == 0]))]\n\nx1 = [columns[0],columns[1],columns[2],columns[3]]\ny1 = [str(len(tsl_df[tsl_df[columns[0]] == 1])), str(len(tsl_df[tsl_df[columns[1]] == 1])), str(len(tsl_df[tsl_df[columns[2]] == 1])), str(len(tsl_df[tsl_df[columns[3]] == 1]))]\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(histfunc=\"sum\", y=y0, x=x0, name=\"0\"))\nfig.add_trace(go.Histogram(histfunc=\"sum\", y=y1, x=x1, name=\"1\"))\n# fig.update_layout(barmode=\"overlay\",bargap=0.1)\npy.offline.iplot(fig)\n\n# Just as expected, there is slight skewness towards the samples of 0, than the samples of 1","ca01e60d":"til_df = pd.read_csv('\/kaggle\/input\/siim-covid19-detection\/train_image_level.csv')\nprint(\"\\n\", til_df.info())\ntil_df.head()","034df9ae":"box_frequency = []\nfor index, row in til_df.iterrows():\n    if (isinstance(row.boxes, str)): ## To filter NaN\n        box_frequency.append(len(ast.literal_eval(row.boxes)))\n    else:\n        box_frequency.append(0)\n        \nfig = go.Figure(data=[go.Pie(labels=list(Counter(box_frequency).keys()), \n                             values=list(Counter(box_frequency).values()), \n                             textinfo='label+percent',\n                             insidetextorientation='radial',hole=.3)])\nfig.update_layout(title_text='BBOX Distribution - Pie')\npy.offline.iplot(fig)\n","e6ea69eb":"fig = go.Figure(go.Histogram(x=box_frequency, bingroup=1))\nfig.update_layout(barmode=\"overlay\",bargap=0.1,title_text='BBOX Distribution - Bar')\npy.offline.iplot(fig)","054a6175":"count_of_none = np.count_nonzero(np.array(box_frequency) == 0 )\ncount_of_opacity = np.count_nonzero(np.array(box_frequency) != 0 )\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(histfunc=\"sum\", x=['none','opacity'], y=[count_of_none,count_of_opacity]))\nfig.update_layout(title_text='Distribution of None Vs Opacity')\npy.offline.iplot(fig)","6d0f3545":"## Functions\n\ndef get_image_id(path):\n    image_name = path.split('\/')[-1].replace('.dcm', '_image')\n    return image_name\n\n\ndef create_study_id(path):\n    image_name = path.split('\/')[-1].replace('.dcm', '_image')\n    return image_name\n\ndef dicom2array(path, voi_lut=True, fix_monochrome=True):\n    dicom = pydicom.read_file(path)\n    # VOI LUT (if available by DICOM device) is used to\n    # transform raw DICOM data to \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n    data = cv2.cvtColor(data, cv2.COLOR_GRAY2RGB)\n\n    return data\n\ndef do_annotations(path, coords, color_codes):\n    temp_image = dicom2array(path)\n    for coord in coords:\n        cv2.rectangle(temp_image, (int(coord['x']), int(coord['y'])), (int(coord['x']+coord['width']), int(coord['y']+coord['height'])), color_codes, 15)\n    return temp_image\n\ndef make_subplots(display_image, display_image_w_annotation, title):\n    fig, ax = plt.subplots(3,2, sharex='col', figsize=(20,20), gridspec_kw={'hspace': 0, 'wspace': 0.1}) \n\n    ax[0, 0].imshow(cv2.resize(display_image[0], (1024, 1024)))\n    ax[0, 1].imshow(cv2.resize(display_image_w_annotation[0], (1024, 1024)))\n\n    ax[1, 0].imshow(cv2.resize(display_image[1], (1024, 1024)))\n    ax[1, 1].imshow(cv2.resize(display_image_w_annotation[1], (1024, 1024)))\n\n    ax[2, 0].imshow(cv2.resize(display_image[2], (1024, 1024)))\n    ax[2, 1].imshow(cv2.resize(display_image_w_annotation[2], (1024, 1024)))\n\n    plt.subplots_adjust(left=0.5)\n    plt.show()\n    \n    \n\ndef prepare_sample(training_images_df, col_number, samples, nan_flag = False):\n    df_subset = training_images_df[training_images_df.iloc[:, col_number] == 1].sample(frac=1)\n    \n    display_image, display_image_w_annotation  = [], []\n    title = str(training_images_df.columns[col_number])\n    color_codes = {}\n    color_codes[5] = (255, 0, 0)\n    color_codes[6] = (0, 0, 255)\n    color_codes[7] = (0, 255, 0)\n    \n    if nan_flag:\n        for idx, rows in df_subset.iterrows():\n            if (len(display_image) ==  samples) and (len(display_image_w_annotation) == samples):\n                return display_image, display_image_w_annotation, title, df_subset\n            else:\n                display_image.append(dicom2array(rows['training_images_path']))\n                display_image_w_annotation.append(dicom2array(rows['training_images_path']))\n    else:\n        for idx, rows in df_subset.iterrows():\n            if (len(display_image) ==  samples) and (len(display_image_w_annotation) == samples):\n                return display_image, display_image_w_annotation, title\n            else:\n                if isinstance(rows['boxes'], str):\n#                     print(rows['training_images_path'], rows['boxes'])\n                    display_image.append(dicom2array(rows['training_images_path']))\n                    display_image_w_annotation.append(do_annotations(rows['training_images_path'], ast.literal_eval(rows.boxes), color_codes[col_number]))","8441b349":"training_images_path = glob.glob('\/kaggle\/input\/siim-covid19-detection\/train\/*\/*\/*.dcm')\ntraining_images_df = pd.DataFrame(training_images_path, columns =['training_images_path'])\n\ntraining_images_df['image_id'] = training_images_df.apply(lambda rows: get_image_id(rows['training_images_path']), axis=1)\ntraining_images_df = pd.merge(training_images_df, til_df, left_on='image_id', right_on='id', how='left').drop(['image_id','id'], axis=1)\ntraining_images_df.head()","262f0df8":"training_images_df['StudyInstance'] = training_images_df.apply(lambda rows: get_image_id(rows['StudyInstanceUID']) + \"_study\", axis=1)\ntraining_images_df = pd.merge(training_images_df, tsl_df, left_on='StudyInstance', right_on='id', how='left').drop(['StudyInstance','id'], axis=1)\ntraining_images_df.info()\ntraining_images_df.to_csv('\/kaggle\/working\/training_images_df.csv', index=False)\ntraining_images_df.head()","ee675e9d":"display_image, display_image_w_annotation, title, df_subset = prepare_sample(training_images_df, col_number=4, samples = 3, nan_flag = True)\nmake_subplots(display_image, display_image_w_annotation, title)","4593831a":"display_image, display_image_w_annotation, title = prepare_sample(training_images_df, col_number=5, samples = 3)\nmake_subplots(display_image, display_image_w_annotation, title)","9eb9d10f":"display_image, display_image_w_annotation, title = prepare_sample(training_images_df, col_number=6, samples = 3)\nmake_subplots(display_image, display_image_w_annotation, title)","1a0aa33b":"display_image, display_image_w_annotation, title = prepare_sample(training_images_df, col_number=7, samples = 3)\nmake_subplots(display_image, display_image_w_annotation, title)","6fee45a0":"<div style=\"font-size:20px\" class=\"alert alert-block alert-warning\"> Samples based on the class --> Indeterminate Appearance<\/div>","05ce2774":"<div style=\"font-size:20px\" class=\"alert alert-block alert-warning\"> Samples based on the class --> Atypical Appearance<\/div>","e67c1350":"![COVID-19](https:\/\/images.pexels.com\/photos\/3992933\/pexels-photo-3992933.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500)","8954ae83":"<div style=\"font-size:30px\" class=\"alert alert-block alert-info\"> Bounding Box Distribution<\/div>","4bb64cdd":"<div style=\"font-size:30px\" class=\"alert alert-block alert-info\"> Dataset Analytics<\/div>","dc7475b9":"<div style=\"font-size:20px\" class=\"alert alert-block alert-danger\"> Work in Progress <\/div>","7b1d4012":"<div style=\"font-size:30px\" class=\"alert alert-block alert-info\"> Image Analytics<\/div>","825049fe":"## Object Detection format (x,y,w,h)\n![coords](https:\/\/i.imgur.com\/Ow9oPGx.png)","7b067525":"<div style=\"font-size:30px\" class=\"alert alert-block alert-info\"> Custom Functions<\/div>","98e7ddeb":"<div style=\"color:white; display:fill; border-radius:5px; background-color:#5642C5;font-size:200%;font-family:Verdana; letter-spacing:0.5px\"><p style=\"padding: 10px;color:white;\">Introduction<\/p><\/div>\n\n## This is a competition where we need to identify & localize COVID-19 abnormalities from the chest radiographs.\n## This is an object detection and classification problem.\n\n## Items to be classified (Performed on study level on training dataset, need to find the same for test dataset)\n1. Negative for Pneumonia\n2. Typical Appearance\n3. Indeterminate Appearance\n4. Atypical Appearance\n\nLet's get started !!!","3139bbf0":"<div style=\"font-size:30px\" class=\"alert alert-block alert-info\"> Cool Imports<\/div>","2788c1fb":"<div style=\"font-size:20px\" class=\"alert alert-block alert-warning\"> Samples based on the class --> Negative for Pneumonia<\/div>","5d0db34d":"<div style=\"font-size:20px\" class=\"alert alert-block alert-info\"> Sneek peek at train_image_level.csv <\/div>\n\n## train_image_level.csv - the train image-level metadata, with one row for each image, including both correct labels and any bounding boxes in a dictionary format. Some images in both test and train have multiple bounding boxes.","a3b6d390":"<div style=\"font-size:20px\" class=\"alert alert-block alert-info\"> Merging two dataframes into a single one based on the foreign key<\/div>","80cca407":"<div style=\"font-size:30px\" class=\"alert alert-block alert-info\"> Class Distribution<\/div>","56e5f113":"<div style=\"font-size:20px\" class=\"alert alert-block alert-warning\"> Samples based on the class --> Typical Appearance<\/div>","c7020f4c":"<div style=\"font-size:20px\" class=\"alert alert-block alert-info\"> Sneek peek at train_study_level.csv <\/div>\n\n## train_study_level.csv - The train study-level metadata, with one row for each study, including correct labels."}}