{"cell_type":{"c488728b":"code","a00d385f":"code","b9a9bbcf":"code","41485a00":"code","88463706":"code","4a2b50bf":"code","fd3a7dd1":"code","a12f1b3b":"code","d002d30f":"code","5c83f609":"code","eb94c47f":"code","f37c97a1":"code","0257b046":"code","98bde752":"code","5cb5c16a":"code","56a091f1":"code","9b9192c9":"code","c3ae6fdc":"markdown","4fd7d8b8":"markdown","1cb54204":"markdown","e392402a":"markdown","a5756440":"markdown","54d09fea":"markdown","f34dbf87":"markdown","4bce43b1":"markdown","87a839e7":"markdown","a33a1fbb":"markdown","3c4207a8":"markdown","c53309c6":"markdown","f1b61538":"markdown","4fcddd48":"markdown","1eabe714":"markdown"},"source":{"c488728b":"import pandas as pd\npd.set_option(\"display.max_columns\", None)\nimport numpy as np\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfrom plotly.subplots import make_subplots\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf","a00d385f":"# \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\ndata = pd.read_csv('..\/input\/g-research-crypto-forecasting\/train.csv') \nprint('\u30c7\u30fc\u30bf\u6570\uff1a',data.shape[0])\ndata.head() ","b9a9bbcf":"asset_tmp = pd.read_csv('..\/input\/g-research-crypto-forecasting\/asset_details.csv')\nasset = asset_tmp.set_index('Asset_ID').sort_index()\nasset","41485a00":"print(data.isnull().sum())","88463706":"missing_list = []\nfor asset_id, coin in zip(asset.index, asset.loc[:, 'Asset_Name']):\n    asset_df = data[data[\"Asset_ID\"]==asset_id].set_index(\"timestamp\")\n    gap_df = (asset_df.index[1:]-asset_df.index[:-1]).value_counts().reset_index()\n    drop_row = int(((gap_df['index']\/60-1)*gap_df['timestamp']).sum())\n    missing_list.append([coin, asset_df.shape[0]] + asset_df.isna().sum().tolist() + [drop_row])\n\nmissing_df = pd.DataFrame(missing_list)\nmissing_df.columns = [\"Asset_Name\", \"TotalRows\", 'Missing_Asset_ID', 'Missing_Count', 'Missing_Open', \n                      'Missing_High', 'Missing_Low', 'Missing_Close', 'Missing_Volume', 'Missing_VWAP', 'Missing_Target', 'Missing_Row']\nmissing_df","4a2b50bf":"asset_count= []\nfor i in range(14):\n    count = (data[\"Asset_ID\"]==i).sum()\n    asset_count.append(count)\nfig = px.bar(x = asset[\"Asset_Name\"],\n             y = asset_count , \n             color = asset_count ,\n             color_continuous_scale=\"Blues\") \nfig.update_xaxes(title=\"Assets\")\nfig.update_yaxes(title = \"Number of Rows\")\nfig.update_layout(showlegend = True,\n    title = {\n        'text': 'Data Distribution ',\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'} ,\n        template=\"plotly_white\")\nfig.show()","fd3a7dd1":"def crypto_df(asset_id ,data= data ):\n    df = data[data[\"Asset_ID\"]==asset_id].reset_index(drop = True)\n    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='s')\n    df = df.set_index('timestamp')\n    return df\n\nbtc = crypto_df(asset_id = 1) #\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\neth = crypto_df(asset_id = 6) #\u30a4\u30fc\u30b5\u30ea\u30a2\u30e0","a12f1b3b":"def candelstick_chart(data,title):\n    candlestick = go.Figure(data = [go.Candlestick(x =data.index, \n                                               open = data[('Open')], \n                                               high = data[('High')], \n                                               low = data[('Low')], \n                                               close = data[('Close')])])\n    candlestick.update_xaxes(title_text = 'Time',\n                             rangeslider_visible = True)\n\n    candlestick.update_layout(\n    title = {\n        'text': '{:} Candelstick Chart'.format(title),\n        'y':0.90,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'} , \n    template=\"plotly_white\")\n\n    candlestick.update_yaxes(title_text = 'Price in USD', ticksuffix = '$')\n    return candlestick","d002d30f":"btc_plot = candelstick_chart(btc[-50:],title = \"Bitcoin(BTC)\")\nbtc_plot.show()","5c83f609":"def ohlc_chart(data,title):\n    ohlc = go.Figure(data = [go.Ohlc(x =data.index, \n                                               open = data[('Open')], \n                                               high = data[('High')], \n                                               low = data[('Low')], \n                                               close = data[('Close')])])\n    ohlc.update_xaxes(title_text = 'Time',\n                             rangeslider_visible = True)\n\n    ohlc.update_layout(\n    title = {\n        'text': '{:} OHLC Chart'.format(title),\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n        template=\"plotly_white\")\n\n    ohlc.update_yaxes(title_text = 'Price in USD', ticksuffix = '$')\n    return ohlc","eb94c47f":"ohlc_chart(btc[-50:], title = \"Bitcoin(BTC)\")","f37c97a1":"# \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u5909\u63db\ndata['timestamp'] = data['timestamp'].astype('datetime64[s]')\n\n# \u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\ndata_daily = pd.DataFrame()\n\nfor asset_id in asset.index:\n    data_single = data[data.Asset_ID == asset_id].copy()\n\n    data_single_new = data_single[['timestamp','Count']].resample('D', on='timestamp').sum()\n    data_single_new['Open'] = data_single[['timestamp','Open']].resample('D', on='timestamp').first()['Open']\n    data_single_new['High'] = data_single[['timestamp','High']].resample('D', on='timestamp').max()['High']\n    data_single_new['Low'] = data_single[['timestamp','Low']].resample('D', on='timestamp').min()['Low']\n    data_single_new['Close'] = data_single[['timestamp','Close']].resample('D', on='timestamp').last()['Close']\n    data_single_new['Volume'] = data_single[['timestamp','Volume']].resample('D', on='timestamp').sum()['Volume']\n    data_single_new['Asset_ID'] = asset_id\n\n    data_daily = data_daily.append(data_single_new.reset_index(drop=False))\ndata_daily = data_daily.sort_values(by = ['timestamp', 'Asset_ID']).reset_index(drop=True)\n\ndata_daily = data_daily.pivot(index='timestamp', columns='Asset_ID')[['Count', 'Open', 'High', 'Low', 'Close', 'Volume']]\ndata_daily = data_daily.reset_index(drop=False)","0257b046":"# \u308d\u3046\u305d\u304f\u8db3\u30c1\u30e3\u30fc\u30c8\nfig = make_subplots(\n    rows=len(asset.index), cols=1, subplot_titles=(asset.Asset_Name)\n)\n\nfor i, asset_id in enumerate(asset.index):\n    fig.append_trace(go.Candlestick(x=data_daily.timestamp, \n                                         open=data_daily[('Open', asset_id)], \n                                         high=data_daily[('High', asset_id)], \n                                         low=data_daily[('Low', asset_id)], \n                                         close=data_daily[('Close', asset_id)]),\n                                         row=i+1, col=1,\n                    )\n\n    fig.update_xaxes(range=[data_daily.timestamp.iloc[0], data_daily.timestamp.iloc[-1]], row=i+1, col=1)\n\nfig.update_layout(xaxis_rangeslider_visible = False, \n                  xaxis2_rangeslider_visible = False, \n                  xaxis3_rangeslider_visible = False,\n                  xaxis4_rangeslider_visible = False,\n                  xaxis5_rangeslider_visible = False,\n                  xaxis6_rangeslider_visible = False,\n                  xaxis7_rangeslider_visible = False,\n                  xaxis8_rangeslider_visible = False,\n                  xaxis9_rangeslider_visible = False,\n                  xaxis10_rangeslider_visible = False,\n                  xaxis11_rangeslider_visible = False,\n                  xaxis12_rangeslider_visible = False,\n                  xaxis13_rangeslider_visible = False,\n                  xaxis14_rangeslider_visible = False,\n                  height=3000, width=1000, \n                  margin = dict(l = 0, r = 0, b = 0, t = 30, pad = 0)\n                 )\n                 \nfig.show()","98bde752":"def log_return(series, periods=1):\n    return np.log(series).diff(periods=periods)","5cb5c16a":"btc_lret = log_return(btc.Close)[1000000:1500000]\neth_lret = log_return(eth.Close)[1000000:1500000]","56a091f1":"# \u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u3001\u30a4\u30fc\u30b5\u30cd\u30c3\u30c8\u306eLogReturn\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=btc_lret.index,\n                        y=btc_lret.values,\n                        #mode='line',\n                        showlegend=True,\n                        name='Bitcoin'))\nfig.add_trace(go.Scatter(x=eth_lret.index,\n                        y=eth_lret.values,\n                        #mode='line',\n                        showlegend=True,\n                        name='Ethereum'))\n\nfig.update_xaxes(title_text='Time')\nfig.update_yaxes(title_text='Log Return')\nfig.show()","9b9192c9":"# \u5168\u901a\u8ca8LogReturn\u53ef\u8996\u5316\nfor i, asset_id in enumerate(asset.index):\n    data_daily[('lret',  asset_id)] = log_return(data_daily[( 'Close',  asset_id)])\n\n    \nfig = make_subplots(\n    rows=len(asset.index), cols=1, subplot_titles=(asset.Asset_Name)\n)\nfor i, asset_id in enumerate(asset.index):\n    #df_coin = data_daily[data_daily.loc[:, 'Asset_ID']==asset_id]\n    fig.append_trace(go.Scatter(\n                        x=data_daily.timestamp,\n                        y=data_daily[('lret', asset_id)]),\n                        row=i+1, col=1)\n\n    fig.update_xaxes(range=[data_daily.timestamp.iloc[0], data_daily.timestamp.iloc[-1]], row=i+1, col=1)\n                 \nfig.update_layout(\n                  height=3000, width=1000, \n                  margin = dict(l = 0, r = 0, b = 0, t = 30, pad = 0)\n                 )\nfig.show()","c3ae6fdc":"### \u30c7\u30fc\u30bf\u6982\u8981\u78ba\u8a8d","4fd7d8b8":"2020\u5e743\u6708\u9803COVID-19\u306e\u5f71\u97ff\u3068\u307f\u3089\u308c\u308b\u5909\u52d5\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002<br>\n\u65e5\u5358\u4f4d\u306e\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3082LogReturn\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\u3002<br>","1cb54204":"\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3 \u308d\u3046\u305d\u304f\u8db3\u30c1\u30e3\u30fc\u30c8(\u30e9\u30b9\u30c850\u30b5\u30f3\u30d7\u30eb)","e392402a":"# G-Research Crypto forecasting competition","a5756440":"\u5404\u6697\u53f7\u901a\u8ca8\u306e\u306b\u3064\u3044\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba","54d09fea":"### \u30b3\u30f3\u30da\u6982\u8981\n\n\u76ee\u7684\uff1a\u6697\u53f7\u901a\u8ca8\u306b\u3088\u308b\u30ea\u30bf\u30fc\u30f3\u306e\u4e88\u6e2c<br>\n\u6697\u53f7\u901a\u8ca8\u306b\u95a2\u3059\u308b\u6642\u7cfb\u5217\u306e\u4fa1\u683c\u5c65\u6b74\u3092\u4f7f\u7528\u3057\u3066\u3001\u4fa1\u683c\u304c\u4e0a\u304c\u308b\u304b\u4e0b\u304c\u308b\u304b\u3001\u3069\u308c\u3060\u3051\u306e\u8cc7\u7523\u304c\u30ea\u30bf\u30fc\u30f3\u3059\u308b\u304b\u3092\u4e88\u6e2c\u3057\u307e\u3059\u3002<br>\n\u672c\u30b3\u30f3\u30da\u3067\u306f\u300114\u7a2e\u306e\u6697\u53f7\u901a\u8ca8\u306b\u3064\u3044\u3066\u306e\u30c7\u30fc\u30bf\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002<br>\n\n> \u6697\u53f7\u901a\u8ca8\u5e02\u5834\u306e\u62e1\u5927\uff1aCrypoCompare\u793e\u306b\u3088\u308b\u3068\u30012020\u5e74\u306b\u304a\u3051\u308b\u4e00\u65e5\u306e\u5e73\u5747\u53d6\u5f15\u91cf\u306f410\u5104\u30c9\u30eb\u306b\u3082\u53ca\u3076\u3068\u306e\u3053\u3068\u3002 - [Tutorial to the G-Research Crypto Competition](https:\/\/www.kaggle.com\/cstein06\/tutorial-to-the-g-research-crypto-competition)\n\n\u30c7\u30fc\u30bf\u306e\u7279\u6027\u306e\u6982\u8981\n- \u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3002\n- \u6697\u53f7\u901a\u8ca8\u306e\u5909\u52d5\u306f\u3001\u4ed6\u306e\u6697\u53f7\u901a\u8ca8\u53ca\u3073\u6697\u53f7\u901a\u8ca8\u5e02\u5834\u5168\u4f53\u306b\u5bfe\u3057\u3066\u5927\u3044\u306b\u5f71\u97ff\u3059\u308b\u3002\n- \u682a\u4fa1\u3068\u540c\u69d8\u306b\u3001\u901a\u8ca8\u306e\u4fa1\u683c\u306f\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u30d1\u30bf\u30fc\u30f3\u306b\u5f93\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u3082\u898b\u3048\u308b\u3002","f34dbf87":"Asset_ID\u3068\u6697\u53f7\u901a\u8ca8\u306e\u5bfe\u5fdc<br>\nWeight\u306f\u3001\u76ee\u7684\u5909\u6570\u3068\u306a\u3063\u3066\u3044\u308bLogReturn\u3092\u7b97\u51fa\u3059\u308b\u969b\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002","4bce43b1":"\u30c7\u30fc\u30bf\u3092\u65e5\u5358\u4f4d\u3067\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u3066\u3001\u6642\u7cfb\u5217\u5168\u4f53\u3067\u306e\u5909\u52d5\u3092\u898b\u3066\u307f\u307e\u3059\u3002<br>\n\u53c2\u8003\uff1a[to-the-moon-g-research-crypto-forecasting-eda](https:\/\/www.kaggle.com\/iamleonie\/to-the-moon-g-research-crypto-forecasting-eda)","87a839e7":"<br>\n\u901a\u8ca8\u6bce\u3067\u6b20\u640d\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002<br>\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306b\u3088\u308b\u3068\u3001\u30c7\u30fc\u30bf\u6b20\u640d\u306f\u884c\u3054\u3068\u629c\u3051\u843d\u3061\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f3\u3082\u5b58\u5728\u3059\u308b\u3068\u306e\u3053\u3068\u3067\u3057\u305f\u306e\u3067\u3001\u884c\u3054\u3068\u306e\u6b20\u640d\u6570\u3082\u53ef\u8996\u5316\u3057\u307e\u3059\u3002<br>\n\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u3001\u30a4\u30fc\u30b5\u30ea\u30a2\u30e0\u3001\u30e9\u30a4\u30c8\u30b3\u30a4\u30f3\u306e\u6b20\u640d\u5024\u306f\u6bd4\u8f03\u7684\u5c11\u306a\u3044\u3088\u3046\u3067\u3059\u3002","a33a1fbb":"### \u6b20\u640d\u5024\u306e\u78ba\u8a8d\n\u3053\u3046\u898b\u308b\u3068\u3001\u307b\u3068\u3093\u3069Target\u306e\u6b20\u640d\u3060\u3051\u306e\u3088\u3046\u3067\u3059\u3002","3c4207a8":"- **timestamp**\uff1a1970-01-01 00:00:00.000 UTC\u304b\u3089\u306e\u7d4c\u904e\u79d2\u6570\u3092\u793a\u3059\u3002\u30c7\u30fc\u30bf\u306f\u5206\u30b9\u30b1\u30fc\u30eb\u306e\u305f\u3081\u300160\u306e\u500d\u6570\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n- **Asset_ID**\uff1a\u6697\u53f7\u901a\u8ca8\u3092\u8b58\u5225\u3059\u308bID(\u4f8b\uff1a\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u306e\u5834\u5408\u306fAsset_ID = 1)\u3002 Asset_ID\u3068\u6697\u53f7\u901a\u8ca8\u306e\u5bfe\u5fdc\u95a2\u4fc2\u306fasset_details.csv\u3067\u53c2\u7167\u3067\u304d\u307e\u3059\u3002\n- **Count**\uff1a\u6642\u9593\u9593\u9694\uff08\u76f4\u524d\uff09\u306e\u53d6\u5f15\u306e\u7dcf\u6570\u3002\n- **Open**\uff1a\u6307\u5b9a\u6642\u9593\u9593\u9694\u306b\u304a\u3051\u308b\u59cb\u5024(USD)\u3002\n- **High**\uff1a\u6307\u5b9a\u6642\u9593\u9593\u9694\u306b\u304a\u3051\u308b\u6700\u9ad8\u4fa1\u683c(USD)\u3002\n- **Low**\uff1a\u6307\u5b9a\u6642\u9593\u9593\u9694\u306b\u304a\u3051\u308b\u6700\u4f4e\u4fa1\u683c(USD)\u3002\n- **Close**\uff1a\u6307\u5b9a\u6642\u9593\u9593\u9694\u306b\u304a\u3051\u308b\u7d42\u5024(USD)\u3002\n- **Volume**\uff1a\u8cfc\u5165\u307e\u305f\u306f\u8ca9\u58f2\u3055\u308c\u305f\u901a\u8ca8\u306e\u6570\u91cf\u3002\n- **VWAP**\uff1a\u6307\u5b9a\u6642\u9593\u9593\u9694\u306b\u304a\u3051\u308b\u901a\u8ca8\u306e\u91cd\u307f\u3065\u3051\u5e73\u5747\u4fa1\u683c\u3002\n- **Target**\uff1a15\u5206\u9593\u306e\u5bfe\u6570\u53ce\u76ca\u7387\u304b\u3089\u7b97\u51fa\u3002\ntimestamp\u3001Asset_ID\u306e\u8907\u5408\u30ad\u30fc\u304c\u3001\u30c7\u30fc\u30bf\u3092\u8b58\u5225\u3059\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u306b\u306a\u308a\u307e\u3059\u3002","c53309c6":"### \u901a\u8ca8\u306e\u4fa1\u683c\u5909\u52d5\n\u682a\u4fa1\u30c1\u30e3\u30fc\u30c8\u3067\u4fa1\u683c\u5909\u52d5\u306e\u69d8\u5b50\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002plotly.graph_objects\u306eCandlestick\u3067\u8db3\u4ed8\u306e\u30c1\u30e3\u30fc\u30c8\u30b0\u30e9\u30d5\u304c\u4e00\u767a\u3067\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002<br>\n\u6642\u9593\u5185\u3067\u4fa1\u683c\u304c\u4e0b\u304c\u3063\u3066\u3044\u308b(\u7d42\u5024\u304c\u59cb\u5024\u3088\u308a\u3082\u4f4e\u3044)\u5834\u5408\u306f\u30d7\u30ed\u30c3\u30c8\u304c\u8d64\u3001\u53cd\u5bfe\u306e\u5834\u5408\u306f\u7dd1\u306b\u306a\u308a\u307e\u3059\u3002","f1b61538":"OLCH\u30c1\u30e3\u30fc\u30c8\u3082\u7c21\u5358\u306b\u66f8\u3051\u307e\u3059\u306d\u3002\u898b\u3084\u3059\u3044\u65b9\u3067\u3002","4fcddd48":"### LogReturn\n\u3053\u306e\u30b3\u30f3\u30da\u3067\u306fTarget\u306e\u7b97\u51fa\u306b\u5bfe\u6570\u30ea\u30bf\u30fc\u30f3(\u5bfe\u6570\u53ce\u76ca\u7387)\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002<br>\n\u901a\u8ca8\u306b\u3088\u3063\u3066\u4fa1\u683c\u30b9\u30b1\u30fc\u30eb\u304c\u7570\u306a\u308b\u306e\u3067\u3001\u4fa1\u683c\u306e\u5909\u5316\u7387\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u901a\u8ca8\u306e\u4fa1\u683c\u5909\u52d5\u3092\u5206\u6790\u3057\u307e\u3059\u3002","1eabe714":"\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3 OHLC\u30c1\u30e3\u30fc\u30c8(50\u30b5\u30f3\u30d7\u30eb)"}}