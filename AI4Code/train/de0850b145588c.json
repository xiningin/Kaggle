{"cell_type":{"1eaddca1":"code","c848b792":"code","b81e61a9":"code","78df1188":"code","e5713b9d":"code","c7462a69":"code","e944abaa":"code","8faee67a":"code","8906e489":"code","be83c3ee":"code","4bc61d84":"code","140bd73a":"code","47e78dad":"code","56ae23b0":"code","67a04281":"code","bf74eafb":"code","081927d0":"code","bba0cc62":"code","dd229323":"code","d0791e68":"code","2968ccee":"code","c16fa81e":"code","c170d226":"code","5ea95355":"code","44eabf08":"code","e4f8d177":"code","1570f665":"code","454c8ece":"code","f45462c8":"code","be8e8b97":"code","4a58c5e0":"code","c03f6bde":"code","2f2e11ad":"code","6ab319f8":"markdown"},"source":{"1eaddca1":"# Necessary Library\n%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport pandas_profiling\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB, BernoulliNB\nfrom sklearn.metrics import roc_auc_score, confusion_matrix, recall_score, precision_score\nfrom sklearn.metrics import roc_curve, precision_recall_curve, classification_report\nfrom sklearn.preprocessing import LabelEncoder\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt \nplt.rc(\"font\", size=14)\nimport seaborn as sns\nsns.set(style=\"white\")\nsns.set(style=\"whitegrid\", color_codes=True)","c848b792":"#load the data to dataframe\ndata = pd.read_csv(\"..\/input\/employee-attrition\/HR-Employee-Attrition.csv\")","b81e61a9":"pandas_profiling.ProfileReport(data)","78df1188":"data.duplicated().sum()","e5713b9d":"data.drop_duplicates(inplace = True)","c7462a69":"data.isna().sum()","e944abaa":"data['Attrition'].value_counts()","8faee67a":"data[\"Attrition\"].unique()","8906e489":"data[\"Attrition\"].replace({\"yes\":1,\"no\":0}, inplace = True)","be83c3ee":"data[\"Gender\"].replace({\"male\":1,\"female\":0}, inplace = True)","4bc61d84":"data[\"OverTime\"].replace({\"yes\":1,\"no\":0}, inplace = True)","140bd73a":"data.corr()","47e78dad":"\ndata.drop(labels=['EmployeeCount','EmployeeNumber','StockOptionLevel','StandardHours','Over18','MonthlyIncome','JobLevel','YearsSinceLastPromotion'],axis=1,inplace=True)","56ae23b0":"data.corr()\n","67a04281":"sns.heatmap(data.corr())","bf74eafb":"data.columns","081927d0":"cat_col = data.select_dtypes(exclude=np.number).columns\nnum_col = data.select_dtypes(include=np.number).columns\nprint(cat_col)\nprint(num_col)","bba0cc62":"#One hot encoding\nencoded_cat_col = pd.get_dummies(data[cat_col])\nencoded_cat_col\n","dd229323":"data_ready_model = pd.concat([data[num_col],encoded_cat_col], axis = 1)","d0791e68":"label_encoder = LabelEncoder()\nfor i in cat_col:\n    data[i] = label_encoder.fit_transform(data[i])","2968ccee":"std_scale = StandardScaler().fit(data)\ndata_std = std_scale.transform(data)\nminmax_scale = MinMaxScaler().fit_transform(data)","c16fa81e":"X = data.drop(columns=\"Attrition\")\nX.shape\n","c170d226":"y = data[[\"Attrition\"]]\ny.shape","5ea95355":"std = StandardScaler()\nX_std = std.fit_transform(X)","44eabf08":"norm = MinMaxScaler()\nX_norm = norm.fit_transform(X)","e4f8d177":"def roc_draw(X_test, y_test,logreg):\n    logit_roc_auc = roc_auc_score(y_test, logreg.predict(X_test))\n    fpr, tpr, thresholds = roc_curve(y_test, logreg.predict_proba(X_test)[:,1])\n    plt.figure()\n    plt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\n    plt.plot([0, 1], [0, 1],'r--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic')\n    plt.legend(loc=\"lower right\")\n    plt.savefig('Log_ROC')\n    plt.show()","1570f665":"def model_fit(model, X, y, roc = False, conf = False, threshold = 0.5):\n    train_X, test_X, train_y, test_y =  train_test_split(X, y, test_size = 0.3, random_state=1)\n    print(np.array(np.unique(test_y, return_counts=True)).T)\n    model.fit(train_X, train_y)\n    train_pred = model.predict(train_X)\n    print(\"Train Accuracy : \",accuracy_score(train_pred,train_y))\n    print(\"Train Recall : \",recall_score(train_y, train_pred))\n    print(\"Train Precision : \",precision_score(train_y, train_pred))\n    test_pred = model.predict(test_X)\n    print(\"Test Accuracy : \",accuracy_score(test_pred,test_y))\n    print(\"Test Recall : \",recall_score(test_y,test_pred))\n    print(\"Test Precision : \",precision_score(test_y,test_pred))\n    if roc:\n        roc_draw(test_X, test_y, model)\n    if conf:\n        print(\"Test Data Confusion Matrix\")\n        print(confusion_matrix(test_pred,test_y))\n    print(\"After Tuning Threshold\")\n    test_pred_prob = model.predict_proba(test_X)\n    predict_threshold_test = np.where(test_pred_prob[:,1]>threshold,1,0)\n    print(\"Test Accuracy : \",accuracy_score(predict_threshold_test,test_y))\n    print(\"Test Recall : \",recall_score(test_y, predict_threshold_test))\n    print(\"Test Precision : \",precision_score(test_y, predict_threshold_test))\n    if conf:\n        print(\"Test Data Confusion Matrix\")\n        print(confusion_matrix(predict_threshold_test,test_y))\n        print(classification_report(test_y, predict_threshold_test))\n    return model.predict_proba(train_X), model.predict_proba(test_X)","454c8ece":"logistic = LogisticRegression()\ntrain_pred_prob, test_pred_prob = model_fit(logistic, X, y, roc = True, conf = True, threshold=0.3)","f45462c8":"predict_threshold_test = np.where(test_pred_prob[:,1]>0.7,1,0)","be8e8b97":"np.where(logistic.predict_proba(X)[:,1]>0.5,1,0)","4a58c5e0":"logistic.predict_proba(X)","c03f6bde":"model_fit(logistic, X_std, y)","2f2e11ad":"model_fit(logistic, X_norm, y)","6ab319f8":"# Preprocessing"}}