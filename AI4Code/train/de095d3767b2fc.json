{"cell_type":{"172ec998":"code","8c9a7ba0":"code","9f749d3d":"code","1b84beaa":"code","317c4704":"code","980cfd63":"code","2c0cbf24":"markdown","bca58ee6":"markdown","9ade09ea":"markdown","52976135":"markdown","b524ad8b":"markdown"},"source":{"172ec998":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom IPython.core.display import HTML\nimport folium\nimport datetime\nfrom datetime import datetime\nimport requests\nfrom bs4 import BeautifulSoup\nimport lxml.html as lh\nimport pandas as pd\nimport re\nimport time\nimport psutil\nimport json\n\nimport numpy as np\nfrom PIL import Image\nimport os\nfrom os import path\nimport matplotlib.pyplot as plt\n\nimport plotly.graph_objects as go\nfrom pandas.plotting import register_matplotlib_converters\nimport plotly.express as px\nfrom IPython.display import display, Markdown, Latex\nimport matplotlib as plot\nfrom matplotlib.pyplot import figure\nimport seaborn as sns\n\nregister_matplotlib_converters()\nfrom IPython.display import Markdown\n\n\ndataset = pd.DataFrame()\n# Any results you write to the current directory are saved as output.","8c9a7ba0":"df = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ndf.head()\n\ndata_df = df.copy()\ndata_df['Date'] = data_df['Date'].apply(pd.to_datetime)\ndata_df.drop(['Sno', 'Time'],axis=1,inplace=True)\ndata_df.head()\n\n\nfrom datetime import date\ndata_april = data_df[data_df['Date'] > pd.Timestamp(date(2020,4,12))]\n\nstate_cases = data_april.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\nstate_cases['Active'] = state_cases['Confirmed'] - (state_cases['Deaths']- state_cases['Cured'])\nstate_cases[\"Death Rate (per 100)\"] = np.round(100*state_cases[\"Deaths\"]\/state_cases[\"Confirmed\"],2)\nstate_cases[\"Cure Rate (per 100)\"] = np.round(100*state_cases[\"Cured\"]\/state_cases[\"Confirmed\"],2)\nstate_cases","9f749d3d":"import requests\nimport plotly.graph_objects as go\nimport re\nimport matplotlib.pyplot as plt\n\nfrom matplotlib.pyplot import figure\nLiveJson = 'https:\/\/api.covid19india.org\/data.json'\nr = requests.get(LiveJson)\nData_india = r.json()\n\ntotal = []\nrecovered = []\ndeseased = []\ntimeStamp = []\nfor index in range(len(Data_india['cases_time_series'])):\n    total.append(int(re.sub(',','',Data_india['cases_time_series'][index]['totalconfirmed'])))\n    recovered.append(int(re.sub(',','',Data_india['cases_time_series'][index]['totalrecovered'])))\n    deseased.append(int(re.sub(',','',Data_india['cases_time_series'][index]['totaldeceased'])))\n    \n    timeStamp.append(Data_india['cases_time_series'][index]['date'])\nfig = go.Figure()\nfig = fig.add_trace(go.Scatter(x = timeStamp , y = total,mode = 'lines+markers',name = 'Confirmed Cases'))\nfig = fig.add_trace(go.Scatter(x = timeStamp , y = recovered,mode = 'lines+markers',name = 'Recovered Cases'))\nfig = fig.add_trace(go.Scatter(x = timeStamp , y = deseased,mode = 'lines+markers',name = 'Deseaced Cases'))\n\nfig = fig.update_layout(title = \"India Covid19\",xaxis_title = \"Date\",yaxis_title=\"Number\")\nfig.show()","1b84beaa":"# fig = go.Figure()\n# fig = fig.add_trace(go.Bar(x = timeStamp ,y = total,mode = \"lines+markers\" ))\n# fig.show()\n\nfig = go.Figure([go.Bar(x=timeStamp, y=total)])\nfig.show()","317c4704":"fig = go.Figure([go.Bar(x=timeStamp, y=recovered)])\nfig.show()","980cfd63":"Hospitalbeds = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\nHospitalbeds = Hospitalbeds[:-1]\n\n\nstates = []\nactive = []\n\nfor index in range(len(Data_india['statewise'])):\n    if index == 0:\n        continue\n    states.append(str(re.sub(',','',Data_india['statewise'][index]['state'])))\n    active.append(int(re.sub(',','',Data_india['statewise'][index]['active'])))\n\nindiaActive = pd.DataFrame()  \nindiaActive['States'] = states\nindiaActive['active'] = active\n\n\n\nstate_cases['State\/UnionTerritory'] = state_cases['State\/UnionTerritory'].apply(lambda x: re.sub(' and ',' & ',x))\nactivelist = []\nfor state in Hospitalbeds['State\/UT'].tolist():\n    try:\n        activelist.append(indiaActive[indiaActive['States'] == state]['active'].values[0])\n    except:\n        try:\n            activelist.append(state_cases[state_cases['State\/UnionTerritory'] == state]['Active'].values[0])\n        except:\n            activelist.append(0)\n\n    \nHospitalbeds['active'] = activelist\n\nfig = go.Figure(data=[go.Bar(\n            y= (Hospitalbeds['NumRuralBeds_NHP18']+Hospitalbeds['NumUrbanBeds_NHP18']).tolist(), \n            x=Hospitalbeds['State\/UT'].tolist(),\n            name='Beds availible in states',\n            marker_color='#000000'),\n            \n            go.Bar(\n            y=Hospitalbeds['active'].tolist(), \n            x=Hospitalbeds['State\/UT'].tolist(),\n            name='Positve Cases',\n            marker_color='#FF0000')\n                     ])\n\n# Change the bar mode\nfig.update_layout(barmode='stack', template=\"ggplot2\", title_text = '<b>Sample Tested for COVID-19 in India (Day Wise)<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig.show()","2c0cbf24":"**DayWise Increase in Cases**","bca58ee6":"**State-wise Corona case upto 16th April**","9ade09ea":"**Rise in number of Confirmed vs Recovered vs Deseased**","52976135":"**DayWise Number of Recovered**","b524ad8b":"**Number of cases vs number of beds available**\nThere is absolutely no need to panic according to the current scenario"}}