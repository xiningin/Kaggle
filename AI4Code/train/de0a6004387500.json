{"cell_type":{"d75397a1":"code","c1b54705":"code","92ffde41":"code","df5cd7cf":"code","dc8c87c3":"code","0c693174":"code","b4b35b96":"code","59b6fff3":"code","672e8c48":"code","ba9fe33e":"code","654d7920":"code","63836931":"code","cd3a5360":"code","2d34f941":"code","0790b648":"code","4da46b1e":"code","84f71609":"code","9299bda1":"code","43c230b1":"code","6a603042":"code","4c304974":"code","571ea25c":"code","2bae86e7":"code","a2ab861b":"markdown","6f8aa14a":"markdown","0b1610de":"markdown","da7ad1f6":"markdown","263c57ba":"markdown","c691fd94":"markdown","aaa5e12d":"markdown","c7438544":"markdown","aef601ce":"markdown","1f149ac3":"markdown","29e7627d":"markdown","dcaa3fa1":"markdown","2009c4d0":"markdown","89af1678":"markdown","1ddd211b":"markdown","d84e4b5f":"markdown","165b7f34":"markdown","8d970f5b":"markdown","f335d0f8":"markdown","47e35b75":"markdown","3ac84b2f":"markdown"},"source":{"d75397a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c1b54705":"#import numpy for linear algebra\nimport numpy as np \n\n#import pandas for data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd \n\n#import visualization seaborn \nimport seaborn as sns\n\n#import visualization matplotlib\nimport matplotlib.pyplot as plt\n\n#import OS\nimport os\n\n#import statistics \nfrom scipy import stats\n\n#import metric module\nfrom sklearn import metrics\n\n#import Label encoder for convert alphabet to numeric\nfrom sklearn.preprocessing import LabelEncoder\n\n#import splitting model from sklearn\nfrom sklearn.model_selection import train_test_split\n\n#import XGB Classifier\nfrom  xgboost import XGBClassifier\n\n#import DT model\nfrom sklearn.tree import DecisionTreeClassifier \n\n#import NB model\nfrom sklearn.naive_bayes import GaussianNB\n\n#import KNN model\nfrom sklearn.neighbors import KNeighborsClassifier\n","92ffde41":"data=pd.read_csv(\"..\/input\/hypothyroid-classificationxls\/hypothyroid.xls\")\n","df5cd7cf":"data.head()  #by default shows 5 rows. If want top 10 rows just add. for example:\n#data.head(10)","dc8c87c3":"data.tail(7) #here by default 5 rows","0c693174":"#before the rename the target column\ndata=data.rename(columns={data.columns[0]:\"target\"})","b4b35b96":"data.isna().sum()  #check it is any null value and hoy many?","59b6fff3":"for column in data.columns:\n    listOfValues=set(data[column])\n    print(column,\": \",listOfValues)","672e8c48":"data=data.replace({\"?\":np.NAN})\ndata.isna().sum()","ba9fe33e":"del data[\"TBG\"]","654d7920":"data.dropna(axis = 0, thresh = 21, inplace = True)\ndata.isna().sum()","63836931":"data = data.replace({\"t\":1,\"f\":0, \"y\":1, \"n\":0, \"hypothyroid\":1, \"negative\":0, \"F\":1, \"M\":0})\ndisplay(data.dtypes)","cd3a5360":"cols = data.columns[data.dtypes.eq('object')]\ndata[cols] = data[cols].apply(pd.to_numeric, errors='coerce')\n\ndata = data.interpolate(method = 'spline', order = 4)\ndata.isna().sum()","2d34f941":"data[['Age','TSH','T3','TT4','T4U','FTI']].boxplot()","0790b648":"ax = sns.catplot(y='target', kind='count', data=data, height=2.6, aspect=2.5)","4da46b1e":"def barplot_percentages(feature, orient='v', axis_name=\"Predict Based on Sex\"):\n    ratios = pd.DataFrame()\n    g = data.groupby(feature)[\"pregnant\"].value_counts().to_frame()\n    g = g.rename({\"pregnant\": axis_name}, axis=1).reset_index()\n    g[axis_name] = g[axis_name]\/len(data)\n    if orient == 'v':\n        ax = sns.barplot(x=feature, y= axis_name, hue='pregnant', data=g, orient=orient)\n        ax.set_yticklabels(['{:,.0%}'.format(y) for y in ax.get_yticks()])\n    else:\n        ax = sns.barplot(x= axis_name, y=feature, hue='pregnant', data=g, orient=orient)\n        ax.set_xticklabels(['{:,.0%}'.format(x) for x in ax.get_xticks()])\n    ax.plot()\nbarplot_percentages(\"Sex\")","84f71609":"plt.figure(figsize=(9, 4.5))\nbarplot_percentages(\"tumor\", orient='h')","9299bda1":"plt.figure(figsize=(9, 4.5))\nbarplot_percentages(\"query_hyperthyroid\", orient='h')","43c230b1":"def fdiscretizer(attribute,dataframe):\n    enc = LabelEncoder()\n    dataframe[attribute] = pd.qcut(dataframe[attribute], 10, duplicates='drop')\n    dataframe[attribute] = enc.fit_transform(dataframe[attribute])\n    dataframe = dataframe.convert_dtypes(convert_integer=True)\n\nfdiscretizer('Age',data)\nfdiscretizer('TSH',data)\nfdiscretizer('T3',data)\nfdiscretizer('TT4',data)\nfdiscretizer('T4U',data)\nfdiscretizer('FTI',data)\n\ndisplay(data.head())","6a603042":"corr_values = abs(data[data.columns[0:]].corr()['target'][:])\ncorr_values = corr_values.drop('target')\ncorr_values = corr_values[corr_values > 0.10]\ncorr_values","4c304974":"def holdout(dataframe):\n  x = dataframe[corr_values.index]\n  y = dataframe['target']\n  X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.33) \n  return X_train, X_test, y_train, y_test\n\nX_train, X_test, y_train, y_test = holdout(data)","571ea25c":"classifiers = {\n    \"XGBClassifier\" : XGBClassifier(learning_rate=0.01),\n    \"Nearest Neighbors\" : KNeighborsClassifier(3),\n    \"Decision Tree\" : DecisionTreeClassifier(max_depth=5),\n    \"Naive Bayes\" : GaussianNB()\n}","2bae86e7":"def classification(classifiers):\n    # Creo un dataframe per visualizzare i risultati calcolati\n  res = pd.DataFrame(columns=[\"Classifier\", \n                                \"Accuracy\", \n                                \"Precision\", \n                                \"Recall\", \n                                \"FScore\"])\n  for name, clf in classifiers.items():\n            clf.fit(X_train, y_train)\n            y_pred = clf.predict(X_test)\n            pr, rc, fs, sup = metrics.precision_recall_fscore_support(y_test, y_pred, average='macro')\n            res = res.append({\"Classifier\": name,\"Accuracy\": round(metrics.accuracy_score(y_test, y_pred), 4),\n                              \"Precision\": round(pr, 4), \"Recall\":round(rc, 4), \"FScore\":round(fs, 4)}, ignore_index=True)\n                 \n  res.set_index(\"Accuracy\", inplace=True)\n  res.sort_values(by=\"Accuracy\", ascending=False, inplace=True)   \n  return res\n\ndisplay(classification(classifiers))","a2ab861b":"## Conversion of object into int.","6f8aa14a":"## Plot the Histogram","0b1610de":"## Check in Features what value have?","da7ad1f6":"## Find out any special charatcter and replace with 'NAN'","263c57ba":"## Discretizer the attribute","c691fd94":"* Tumor predict based on sex","aaa5e12d":"## Show First Five Rows","c7438544":"## Drop TBG feature, have a more nan values. ","aef601ce":"## Applying all classifier","1f149ac3":"* Plot the Boxplot","29e7627d":"## Imputing a Missing value","dcaa3fa1":"## Split the Dataset","2009c4d0":"**A comma-separated values (csv) file is returned as two-dimensional data structure with labeled axes.**","89af1678":"## Visualization","1ddd211b":"* Compare on sex vs pregent","d84e4b5f":"* XGB classifier is good as compare to others.\n* The above function print the all classifier with accuracy in ascending format.\n* Here is predict the accuracy of all classifier whaterver put in a function and print in a single dataframe. ","165b7f34":"## Predict the Model and find our Accuracy","8d970f5b":"## Calculate correlation ","f335d0f8":"## Show Last 7 Rows","47e35b75":"## Read The Dataset","3ac84b2f":"* any doubt use comment box.\n* Please upvote\n"}}