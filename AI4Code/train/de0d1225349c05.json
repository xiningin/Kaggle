{"cell_type":{"a47ef49d":"code","20b4af9a":"code","332efbd6":"code","005edb5f":"code","2804799b":"code","99967772":"code","5d3e27d5":"code","ffa461ac":"code","911108b6":"code","75c22ca1":"code","099eb0f0":"code","436bae6c":"code","70261910":"code","09d95a76":"code","e770e52d":"code","46cbfbff":"code","49c8e030":"code","e494a810":"code","752a03e1":"code","1538d980":"code","73732db9":"code","b241bced":"code","9fd6260c":"code","e2cd7b49":"code","30085700":"code","c1ed85f5":"code","b009f70f":"code","9a0734b3":"code","d0b7f955":"code","c7b4e953":"code","83b977b1":"code","45be1c6d":"code","7eefa545":"code","a4d61525":"code","5ac158c1":"code","e0aa0199":"code","ff34b333":"code","800ee801":"code","823d2eb0":"code","1fe7cfa0":"code","a016a4b8":"code","d3eb47cd":"code","fa53c307":"code","00a13f51":"code","02274322":"code","d2bfb77d":"code","2b7fa0ea":"code","b66abc37":"code","7469178c":"code","4beca370":"code","c1f541d3":"code","387242df":"code","62264c0e":"code","bdae2770":"code","6d340b60":"code","f8525e3e":"code","1e2d9d00":"code","1734d084":"code","70538873":"code","3ec5f07f":"code","7407d55f":"code","78b982d4":"code","7b65d4af":"code","dd08b5b3":"code","5fc9e925":"code","29740bb2":"code","406a7508":"code","37b59304":"code","f18b5d12":"code","570f88cf":"code","bc65f6aa":"code","b5267172":"code","ecb37e02":"code","8b055f3e":"code","aa7f49f1":"code","6d4debfb":"code","ba143d47":"code","48b9fdf8":"code","2019e665":"code","3e7e2ffc":"code","bac43b0c":"code","2b104d26":"code","91b90a58":"code","975dd119":"code","0f384cd3":"code","666ab338":"code","4a3a7996":"code","367c8fca":"code","822586da":"code","0b5f1692":"code","f480eaff":"code","b851d6c8":"code","eda1d3d4":"code","0d953ff4":"code","dd2a2539":"markdown","f120d0fa":"markdown","26235d1d":"markdown","24fe6458":"markdown","d67e0a69":"markdown","03ffd15f":"markdown","46a6e8ab":"markdown","20786c0f":"markdown"},"source":{"a47ef49d":"# This Python 3 environment \n# comes with many helpful analytics libraries installed\n# It is defined \n# by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, \n# here's several helpful packages to load in \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, \n# running this (by clicking run or pressing Shift+Enter) \n# will list \n# all files under the input directory\nfor ( dirname, dirnames, filenames ) in os.walk( '\/kaggle\/input', topdown = False ):\n    for filename in filenames:\n        print( os.path.join( dirname, filename ) )\n    else:\n        print( \"no files found in\", dirname )\n\n# Any results you write to the current directory are saved as output.","20b4af9a":"import os\n\n\npath = '\/kaggle\/input'\n#path = '\/kaggle'\n#path = '.'\nwith os.scandir( path ) as it:\n    for entry in it:\n        if not entry.name.endswith('.csv') and entry.is_file():\n            print( entry.name )\n    else:\n        print(\"no *.csv files found\")            ","332efbd6":"# input generator:\nfrom typing import ( List )\nfrom random import randrange, randint\n\n\ndef get_X_List(\n    size_Limit: int = 19,\n    min_Value: int = 0,\n    max_Value: int = 99\n) -> List[ int ]:\n    \"\"\"input generator\"\"\"\n    x_List_Size = randint( 0, size_Limit )\n    x_List = [ randint( min_Value, max_Value ) for _ in range( x_List_Size ) ]\n    return x_List","005edb5f":"get_X_List()","2804799b":"def task_1_Solution(\n    x_List: List[ int ] = get_X_List()\n) -> str:\n    \"\"\"join input items to CSV row\"\"\"\n    return \",\".join( map( str, x_List ) )","99967772":"task_1_Solution()","5d3e27d5":"import IPython\nprogress_Bar = IPython.display.ProgressBar( total = 100 )\n#! TypeError: 'int' object is not callable\n#>print( progress_Bar.total )\n#>p_B = next( progress_Bar )\n#>help( progress_Bar )\n#>p_B == 1\n#?progress_Bar.update()\n#>[ progress_Bar.__next__() for _ in range( 0, progress_Bar.total \/\/ 4, 1 ) ]\n#>\n[ next( progress_Bar ) for _ in range( 0, progress_Bar.total \/\/ 4, 1 ) ]\n#>\nprogress_Bar.display()\n#! TypeError: 'ProgressBar' object is not subscriptable\n#!progress_Bar[:progress_Bar.total \/\/ 4]\n#>[ i for i in progress_Bar if i < progress_Bar.total \/\/ 4 ]\ndef show_Some_Progress():\n    for i in progress_Bar: \n        if i > progress_Bar.total \/\/ 4:\n            break# for\n","ffa461ac":"%%SVG\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\" contentScriptType=\"application\/ecmascript\" contentStyleType=\"text\/css\" height=\"761px\" preserveAspectRatio=\"none\" style=\"width:756px;height:761px;\" version=\"1.1\" viewBox=\"0 0 756 761\" width=\"756px\" zoomAndPan=\"magnify\"><defs><filter height=\"300%\" id=\"fkv7t2q9hk47h\" width=\"300%\" x=\"-1\" y=\"-1\"><feGaussianBlur result=\"blurOut\" stdDeviation=\"2.0\"\/><feColorMatrix in=\"blurOut\" result=\"blurOut2\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0\"\/><feOffset dx=\"4.0\" dy=\"4.0\" in=\"blurOut2\" result=\"blurOut3\"\/><feBlend in=\"SourceGraphic\" in2=\"blurOut3\" mode=\"normal\"\/><\/filter><\/defs><g><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"18\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"260\" x=\"251.5\" y=\"16.708\">Relationships - Class Diagram<\/text><!--class ShipClassType--><rect fill=\"#FEFECE\" filter=\"url(#fkv7t2q9hk47h)\" height=\"73.6094\" id=\"ShipClassType\" style=\"stroke: #A80036; stroke-width: 1.5;\" width=\"121\" x=\"141.5\" y=\"651.4531\"\/><ellipse cx=\"156.5\" cy=\"667.4531\" fill=\"#EB937F\" rx=\"11\" ry=\"11\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><path d=\"M154.7969,668.3281 L154.7969,670.75 L159.1563,670.75 L159.1563,669.875 C159.1563,669.3906 159.1875,669.25 159.2969,669.0938 C159.4688,668.8438 159.7344,668.7344 160,668.7344 C160.2813,668.7344 160.5625,668.8906 160.7344,669.1406 C160.8125,669.2969 160.8438,669.4375 160.8438,669.875 L160.8438,672.4531 L152.8438,672.4531 C152.4531,672.4531 152.2188,672.4063 152.0781,672.2813 C151.8594,672.125 151.7188,671.875 151.7188,671.6094 C151.7188,671.3125 151.875,671.0469 152.125,670.875 C152.2813,670.7656 152.4375,670.75 152.8438,670.75 L153.0938,670.75 L153.0938,664.2344 L152.8438,664.2344 C152.4219,664.2344 152.2344,664.2031 152.0781,664.0938 C151.8594,663.9219 151.7188,663.6719 151.7188,663.3906 C151.7188,663.1094 151.875,662.8125 152.125,662.6563 C152.2813,662.5625 152.4063,662.5469 152.8438,662.5469 L160.4688,662.5469 L160.4688,665.0938 C160.4688,665.5625 160.4375,665.7031 160.3281,665.875 C160.1563,666.0938 159.8906,666.2344 159.625,666.2344 C159.3438,666.2344 159.0625,666.0781 158.8906,665.8281 C158.8125,665.6719 158.7813,665.5 158.7813,665.0938 L158.7813,664.2344 L154.7969,664.2344 L154.7969,666.6406 L156.25,666.6406 L156.25,666.5156 C156.25,666.0625 156.2813,665.9063 156.3906,665.7344 C156.5625,665.5156 156.8281,665.375 157.0781,665.375 C157.5313,665.375 157.8438,665.6875 157.9063,666.1563 C157.9219,666.3125 157.9219,666.3594 157.9219,666.5156 L157.9219,668.4375 C157.9219,668.8906 157.8906,669.0469 157.7656,669.2031 C157.6094,669.4219 157.3438,669.5625 157.0938,669.5625 C156.7969,669.5625 156.5156,669.4063 156.3594,669.1563 C156.2813,669 156.25,668.8438 156.25,668.4375 L156.25,668.3281 Z \"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"89\" x=\"170.5\" y=\"671.6074\">ShipClassType<\/text><line style=\"stroke: #A80036; stroke-width: 1.5;\" x1=\"142.5\" x2=\"261.5\" y1=\"683.4531\" y2=\"683.4531\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"16\" x=\"147.5\" y=\"697.6636\">BB<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"16\" x=\"147.5\" y=\"710.4683\">BC<\/text><line style=\"stroke: #A80036; stroke-width: 1.5;\" x1=\"142.5\" x2=\"261.5\" y1=\"717.0625\" y2=\"717.0625\"\/><!--class Classes--><rect fill=\"#FEFECE\" filter=\"url(#fkv7t2q9hk47h)\" height=\"124.8281\" id=\"Classes\" style=\"stroke: #A80036; stroke-width: 1.5;\" width=\"120\" x=\"301\" y=\"625.9531\"\/><ellipse cx=\"334\" cy=\"641.9531\" fill=\"#ADD1B2\" rx=\"11\" ry=\"11\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><path d=\"M336.3438,637.625 L336.5156,637.7031 C336.7344,637.3906 336.9375,637.2969 337.2344,637.2969 C337.5313,637.2969 337.8125,637.4375 337.9688,637.7031 C338.0625,637.8594 338.0781,637.9844 338.0781,638.4219 L338.0781,639.8438 C338.0781,640.2656 338.0469,640.4531 337.9375,640.6094 C337.7656,640.8281 337.5,640.9688 337.2344,640.9688 C337.0156,640.9688 336.7813,640.8594 336.6406,640.7188 C336.5,640.5938 336.4688,640.4688 336.4063,640.0625 C336.3125,639.6563 336.1406,639.4375 335.6563,639.1563 C335.1875,638.9063 334.5781,638.75 334,638.75 C332.2656,638.75 331.0156,640.0625 331.0156,641.8438 L331.0156,642.9375 C331.0156,644.6406 332.3125,645.7344 334.3594,645.7344 C335.125,645.7344 335.8125,645.6094 336.2344,645.3438 C336.4219,645.25 336.4219,645.25 336.875,644.7656 C337.0625,644.5781 337.2656,644.5 337.4844,644.5 C337.9531,644.5 338.3438,644.8906 338.3438,645.3438 C338.3438,645.7344 338.0156,646.1875 337.4375,646.5938 C336.6875,647.1406 335.5313,647.4375 334.3125,647.4375 C331.4219,647.4375 329.3125,645.5469 329.3125,642.9688 L329.3125,641.8438 C329.3125,639.125 331.3125,637.0469 333.9375,637.0469 C334.8125,637.0469 335.4063,637.1875 336.3438,637.625 Z \"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"48\" x=\"352\" y=\"646.1074\">Classes<\/text><line style=\"stroke: #A80036; stroke-width: 1.5;\" x1=\"302\" x2=\"420\" y1=\"657.9531\" y2=\"657.9531\"\/><ellipse cx=\"312\" cy=\"669.8555\" fill=\"none\" rx=\"3\" ry=\"3\" style=\"stroke: #038048; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"50\" x=\"321\" y=\"672.1636\">str class<\/text><polygon fill=\"none\" points=\"312,677.6602,316,681.6602,312,685.6602,308,681.6602\" style=\"stroke: #B38D22; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" text-decoration=\"underline\" textLength=\"60\" x=\"321\" y=\"684.9683\">enum type<\/text><ellipse cx=\"312\" cy=\"695.4648\" fill=\"none\" rx=\"3\" ry=\"3\" style=\"stroke: #038048; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"62\" x=\"321\" y=\"697.7729\">str country<\/text><ellipse cx=\"312\" cy=\"708.2695\" fill=\"none\" rx=\"3\" ry=\"3\" style=\"stroke: #038048; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"73\" x=\"321\" y=\"710.5776\">int numGuns<\/text><ellipse cx=\"312\" cy=\"721.0742\" fill=\"none\" rx=\"3\" ry=\"3\" style=\"stroke: #038048; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"44\" x=\"321\" y=\"723.3823\">int bore<\/text><ellipse cx=\"312\" cy=\"733.8789\" fill=\"none\" rx=\"3\" ry=\"3\" style=\"stroke: #038048; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"94\" x=\"321\" y=\"736.187\">int displacement<\/text><line style=\"stroke: #A80036; stroke-width: 1.5;\" x1=\"302\" x2=\"420\" y1=\"742.7813\" y2=\"742.7813\"\/><!--class OutcomeType--><rect fill=\"#FEFECE\" filter=\"url(#fkv7t2q9hk47h)\" height=\"86.4141\" id=\"OutcomeType\" style=\"stroke: #A80036; stroke-width: 1.5;\" width=\"117\" x=\"38.5\" y=\"181.9531\"\/><ellipse cx=\"53.5\" cy=\"197.9531\" fill=\"#EB937F\" rx=\"11\" ry=\"11\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><path d=\"M51.7969,198.8281 L51.7969,201.25 L56.1563,201.25 L56.1563,200.375 C56.1563,199.8906 56.1875,199.75 56.2969,199.5938 C56.4688,199.3438 56.7344,199.2344 57,199.2344 C57.2813,199.2344 57.5625,199.3906 57.7344,199.6406 C57.8125,199.7969 57.8438,199.9375 57.8438,200.375 L57.8438,202.9531 L49.8438,202.9531 C49.4531,202.9531 49.2188,202.9063 49.0781,202.7813 C48.8594,202.625 48.7188,202.375 48.7188,202.1094 C48.7188,201.8125 48.875,201.5469 49.125,201.375 C49.2813,201.2656 49.4375,201.25 49.8438,201.25 L50.0938,201.25 L50.0938,194.7344 L49.8438,194.7344 C49.4219,194.7344 49.2344,194.7031 49.0781,194.5938 C48.8594,194.4219 48.7188,194.1719 48.7188,193.8906 C48.7188,193.6094 48.875,193.3125 49.125,193.1563 C49.2813,193.0625 49.4063,193.0469 49.8438,193.0469 L57.4688,193.0469 L57.4688,195.5938 C57.4688,196.0625 57.4375,196.2031 57.3281,196.375 C57.1563,196.5938 56.8906,196.7344 56.625,196.7344 C56.3438,196.7344 56.0625,196.5781 55.8906,196.3281 C55.8125,196.1719 55.7813,196 55.7813,195.5938 L55.7813,194.7344 L51.7969,194.7344 L51.7969,197.1406 L53.25,197.1406 L53.25,197.0156 C53.25,196.5625 53.2813,196.4063 53.3906,196.2344 C53.5625,196.0156 53.8281,195.875 54.0781,195.875 C54.5313,195.875 54.8438,196.1875 54.9063,196.6563 C54.9219,196.8125 54.9219,196.8594 54.9219,197.0156 L54.9219,198.9375 C54.9219,199.3906 54.8906,199.5469 54.7656,199.7031 C54.6094,199.9219 54.3438,200.0625 54.0938,200.0625 C53.7969,200.0625 53.5156,199.9063 53.3594,199.6563 C53.2813,199.5 53.25,199.3438 53.25,198.9375 L53.25,198.8281 Z \"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"85\" x=\"67.5\" y=\"202.1074\">OutcomeType<\/text><line style=\"stroke: #A80036; stroke-width: 1.5;\" x1=\"39.5\" x2=\"154.5\" y1=\"213.9531\" y2=\"213.9531\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"31\" x=\"44.5\" y=\"228.1636\">SUNK<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"55\" x=\"44.5\" y=\"240.9683\">DAMAGED<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"16\" x=\"44.5\" y=\"253.7729\">OK<\/text><line style=\"stroke: #A80036; stroke-width: 1.5;\" x1=\"39.5\" x2=\"154.5\" y1=\"260.3672\" y2=\"260.3672\"\/><!--class Outcomes--><rect fill=\"#FEFECE\" filter=\"url(#fkv7t2q9hk47h)\" height=\"86.4141\" id=\"Outcomes\" style=\"stroke: #A80036; stroke-width: 1.5;\" width=\"103\" x=\"193.5\" y=\"181.9531\"\/><ellipse cx=\"212.1\" cy=\"197.9531\" fill=\"#ADD1B2\" rx=\"11\" ry=\"11\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><path d=\"M214.4438,193.625 L214.6156,193.7031 C214.8344,193.3906 215.0375,193.2969 215.3344,193.2969 C215.6313,193.2969 215.9125,193.4375 216.0688,193.7031 C216.1625,193.8594 216.1781,193.9844 216.1781,194.4219 L216.1781,195.8438 C216.1781,196.2656 216.1469,196.4531 216.0375,196.6094 C215.8656,196.8281 215.6,196.9688 215.3344,196.9688 C215.1156,196.9688 214.8813,196.8594 214.7406,196.7188 C214.6,196.5938 214.5688,196.4688 214.5063,196.0625 C214.4125,195.6563 214.2406,195.4375 213.7563,195.1563 C213.2875,194.9063 212.6781,194.75 212.1,194.75 C210.3656,194.75 209.1156,196.0625 209.1156,197.8438 L209.1156,198.9375 C209.1156,200.6406 210.4125,201.7344 212.4594,201.7344 C213.225,201.7344 213.9125,201.6094 214.3344,201.3438 C214.5219,201.25 214.5219,201.25 214.975,200.7656 C215.1625,200.5781 215.3656,200.5 215.5844,200.5 C216.0531,200.5 216.4438,200.8906 216.4438,201.3438 C216.4438,201.7344 216.1156,202.1875 215.5375,202.5938 C214.7875,203.1406 213.6313,203.4375 212.4125,203.4375 C209.5219,203.4375 207.4125,201.5469 207.4125,198.9688 L207.4125,197.8438 C207.4125,195.125 209.4125,193.0469 212.0375,193.0469 C212.9125,193.0469 213.5063,193.1875 214.4438,193.625 Z \"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"63\" x=\"226.9\" y=\"202.1074\">Outcomes<\/text><line style=\"stroke: #A80036; stroke-width: 1.5;\" x1=\"194.5\" x2=\"295.5\" y1=\"213.9531\" y2=\"213.9531\"\/><rect fill=\"none\" height=\"6\" style=\"stroke: #C82930; stroke-width: 1.0;\" width=\"6\" x=\"201.5\" y=\"222.8555\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"52\" x=\"213.5\" y=\"228.1636\">ship : ref<\/text><rect fill=\"none\" height=\"6\" style=\"stroke: #C82930; stroke-width: 1.0;\" width=\"6\" x=\"201.5\" y=\"235.6602\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"60\" x=\"213.5\" y=\"240.9683\">battle : ref<\/text><polygon fill=\"none\" points=\"204.5,246.4648,208.5,250.4648,204.5,254.4648,200.5,250.4648\" style=\"stroke: #B38D22; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" text-decoration=\"underline\" textLength=\"77\" x=\"213.5\" y=\"253.7729\">result : enum<\/text><line style=\"stroke: #A80036; stroke-width: 1.5;\" x1=\"194.5\" x2=\"295.5\" y1=\"260.3672\" y2=\"260.3672\"\/><!--class Ships--><rect fill=\"#FEFECE\" filter=\"url(#fkv7t2q9hk47h)\" height=\"86.4141\" id=\"Ships\" style=\"stroke: #A80036; stroke-width: 1.5;\" width=\"114\" x=\"304\" y=\"460.9531\"\/><ellipse cx=\"340.6\" cy=\"476.9531\" fill=\"#ADD1B2\" rx=\"11\" ry=\"11\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><path d=\"M342.9438,472.625 L343.1156,472.7031 C343.3344,472.3906 343.5375,472.2969 343.8344,472.2969 C344.1313,472.2969 344.4125,472.4375 344.5688,472.7031 C344.6625,472.8594 344.6781,472.9844 344.6781,473.4219 L344.6781,474.8438 C344.6781,475.2656 344.6469,475.4531 344.5375,475.6094 C344.3656,475.8281 344.1,475.9688 343.8344,475.9688 C343.6156,475.9688 343.3813,475.8594 343.2406,475.7188 C343.1,475.5938 343.0688,475.4688 343.0063,475.0625 C342.9125,474.6563 342.7406,474.4375 342.2563,474.1563 C341.7875,473.9063 341.1781,473.75 340.6,473.75 C338.8656,473.75 337.6156,475.0625 337.6156,476.8438 L337.6156,477.9375 C337.6156,479.6406 338.9125,480.7344 340.9594,480.7344 C341.725,480.7344 342.4125,480.6094 342.8344,480.3438 C343.0219,480.25 343.0219,480.25 343.475,479.7656 C343.6625,479.5781 343.8656,479.5 344.0844,479.5 C344.5531,479.5 344.9438,479.8906 344.9438,480.3438 C344.9438,480.7344 344.6156,481.1875 344.0375,481.5938 C343.2875,482.1406 342.1313,482.4375 340.9125,482.4375 C338.0219,482.4375 335.9125,480.5469 335.9125,477.9688 L335.9125,476.8438 C335.9125,474.125 337.9125,472.0469 340.5375,472.0469 C341.4125,472.0469 342.0063,472.1875 342.9438,472.625 Z \"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"34\" x=\"359.4\" y=\"481.1074\">Ships<\/text><line style=\"stroke: #A80036; stroke-width: 1.5;\" x1=\"305\" x2=\"417\" y1=\"492.9531\" y2=\"492.9531\"\/><ellipse cx=\"315\" cy=\"504.8555\" fill=\"none\" rx=\"3\" ry=\"3\" style=\"stroke: #038048; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"60\" x=\"324\" y=\"507.1636\">name : str<\/text><rect fill=\"none\" height=\"6\" style=\"stroke: #C82930; stroke-width: 1.0;\" width=\"6\" x=\"312\" y=\"514.6602\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"58\" x=\"324\" y=\"519.9683\">class : ref<\/text><ellipse cx=\"315\" cy=\"530.4648\" fill=\"none\" rx=\"3\" ry=\"3\" style=\"stroke: #038048; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"88\" x=\"324\" y=\"532.7729\">launched : date<\/text><line style=\"stroke: #A80036; stroke-width: 1.5;\" x1=\"305\" x2=\"417\" y1=\"539.3672\" y2=\"539.3672\"\/><!--class Battles--><rect fill=\"#FEFECE\" filter=\"url(#fkv7t2q9hk47h)\" height=\"73.6094\" id=\"Battles\" style=\"stroke: #A80036; stroke-width: 1.5;\" width=\"88\" x=\"201\" y=\"28.9531\"\/><ellipse cx=\"221.4\" cy=\"44.9531\" fill=\"#ADD1B2\" rx=\"11\" ry=\"11\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><path d=\"M223.7438,40.625 L223.9156,40.7031 C224.1344,40.3906 224.3375,40.2969 224.6344,40.2969 C224.9313,40.2969 225.2125,40.4375 225.3688,40.7031 C225.4625,40.8594 225.4781,40.9844 225.4781,41.4219 L225.4781,42.8438 C225.4781,43.2656 225.4469,43.4531 225.3375,43.6094 C225.1656,43.8281 224.9,43.9688 224.6344,43.9688 C224.4156,43.9688 224.1813,43.8594 224.0406,43.7188 C223.9,43.5938 223.8688,43.4688 223.8063,43.0625 C223.7125,42.6563 223.5406,42.4375 223.0563,42.1563 C222.5875,41.9063 221.9781,41.75 221.4,41.75 C219.6656,41.75 218.4156,43.0625 218.4156,44.8438 L218.4156,45.9375 C218.4156,47.6406 219.7125,48.7344 221.7594,48.7344 C222.525,48.7344 223.2125,48.6094 223.6344,48.3438 C223.8219,48.25 223.8219,48.25 224.275,47.7656 C224.4625,47.5781 224.6656,47.5 224.8844,47.5 C225.3531,47.5 225.7438,47.8906 225.7438,48.3438 C225.7438,48.7344 225.4156,49.1875 224.8375,49.5938 C224.0875,50.1406 222.9313,50.4375 221.7125,50.4375 C218.8219,50.4375 216.7125,48.5469 216.7125,45.9688 L216.7125,44.8438 C216.7125,42.125 218.7125,40.0469 221.3375,40.0469 C222.2125,40.0469 222.8063,40.1875 223.7438,40.625 Z \"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"44\" x=\"236.6\" y=\"49.1074\">Battles<\/text><line style=\"stroke: #A80036; stroke-width: 1.5;\" x1=\"202\" x2=\"288\" y1=\"60.9531\" y2=\"60.9531\"\/><ellipse cx=\"212\" cy=\"72.8555\" fill=\"none\" rx=\"3\" ry=\"3\" style=\"stroke: #038048; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"60\" x=\"221\" y=\"75.1636\">name : str<\/text><ellipse cx=\"212\" cy=\"85.6602\" fill=\"none\" rx=\"3\" ry=\"3\" style=\"stroke: #038048; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"62\" x=\"221\" y=\"87.9683\">date : date<\/text><line style=\"stroke: #A80036; stroke-width: 1.5;\" x1=\"202\" x2=\"288\" y1=\"94.5625\" y2=\"94.5625\"\/><!--class UnclassifiedShips--><rect fill=\"#FEFECE\" filter=\"url(#fkv7t2q9hk47h)\" height=\"60.8047\" id=\"UnclassifiedShips\" style=\"stroke: #A80036; stroke-width: 1.5;\" width=\"141\" x=\"427.5\" y=\"194.4531\"\/><ellipse cx=\"442.5\" cy=\"210.4531\" fill=\"#ADD1B2\" rx=\"11\" ry=\"11\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><path d=\"M444.8438,206.125 L445.0156,206.2031 C445.2344,205.8906 445.4375,205.7969 445.7344,205.7969 C446.0313,205.7969 446.3125,205.9375 446.4688,206.2031 C446.5625,206.3594 446.5781,206.4844 446.5781,206.9219 L446.5781,208.3438 C446.5781,208.7656 446.5469,208.9531 446.4375,209.1094 C446.2656,209.3281 446,209.4688 445.7344,209.4688 C445.5156,209.4688 445.2813,209.3594 445.1406,209.2188 C445,209.0938 444.9688,208.9688 444.9063,208.5625 C444.8125,208.1563 444.6406,207.9375 444.1563,207.6563 C443.6875,207.4063 443.0781,207.25 442.5,207.25 C440.7656,207.25 439.5156,208.5625 439.5156,210.3438 L439.5156,211.4375 C439.5156,213.1406 440.8125,214.2344 442.8594,214.2344 C443.625,214.2344 444.3125,214.1094 444.7344,213.8438 C444.9219,213.75 444.9219,213.75 445.375,213.2656 C445.5625,213.0781 445.7656,213 445.9844,213 C446.4531,213 446.8438,213.3906 446.8438,213.8438 C446.8438,214.2344 446.5156,214.6875 445.9375,215.0938 C445.1875,215.6406 444.0313,215.9375 442.8125,215.9375 C439.9219,215.9375 437.8125,214.0469 437.8125,211.4688 L437.8125,210.3438 C437.8125,207.625 439.8125,205.5469 442.4375,205.5469 C443.3125,205.5469 443.9063,205.6875 444.8438,206.125 Z \"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"109\" x=\"456.5\" y=\"214.6074\">UnclassifiedShips<\/text><line style=\"stroke: #A80036; stroke-width: 1.5;\" x1=\"428.5\" x2=\"567.5\" y1=\"226.4531\" y2=\"226.4531\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"60\" x=\"433.5\" y=\"240.6636\">name : str<\/text><line style=\"stroke: #A80036; stroke-width: 1.5;\" x1=\"428.5\" x2=\"567.5\" y1=\"247.2578\" y2=\"247.2578\"\/><path d=\"M559.5,337.9531 L559.5,393.3516 L744.5,393.3516 L744.5,347.9531 L734.5,337.9531 L559.5,337.9531 \" fill=\"#FBFB77\" filter=\"url(#fkv7t2q9hk47h)\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><path d=\"M734.5,337.9531 L734.5,347.9531 L744.5,347.9531 L734.5,337.9531 \" fill=\"#FBFB77\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"83\" x=\"565.5\" y=\"355.02\">Once sunked<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"76\" x=\"565.5\" y=\"370.1528\">cannot fight<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"164\" x=\"565.5\" y=\"385.2856\">in the subsequent Battles<\/text><path d=\"M459,660.9531 L459,684.4531 L421.352,688.4531 L459,692.4531 L459,716.3516 A0,0 0 0 0 459,716.3516 L675,716.3516 A0,0 0 0 0 675,716.3516 L675,670.9531 L665,660.9531 L459,660.9531 A0,0 0 0 0 459,660.9531 \" fill=\"#FBFB77\" filter=\"url(#fkv7t2q9hk47h)\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><path d=\"M665,660.9531 L665,670.9531 L675,670.9531 L665,660.9531 \" fill=\"#FBFB77\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"187\" x=\"465\" y=\"678.02\">named after first ship builded<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"13\" x=\"465\" y=\"693.1528\">or<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"129\" x=\"465\" y=\"708.2856\">by the project name<\/text><path d=\"M82,483.9531 L82,524.2188 A0,0 0 0 0 82,524.2188 L266,524.2188 A0,0 0 0 0 266,524.2188 L266,507.9531 L303.875,503.9531 L266,499.9531 L266,493.9531 L256,483.9531 L82,483.9531 A0,0 0 0 0 82,483.9531 \" fill=\"#FBFB77\" filter=\"url(#fkv7t2q9hk47h)\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><path d=\"M256,483.9531 L256,493.9531 L266,493.9531 L256,483.9531 \" fill=\"#FBFB77\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"163\" x=\"88\" y=\"501.02\">if gives name to the class<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"125\" x=\"88\" y=\"516.1528\">prefexed with 'Main'<\/text><!--link Ships to Classes--><path d=\"M361,552.5581 C361,574.8811 361,601.7631 361,625.6351 \" fill=\"none\" id=\"Ships-Classes\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><polygon fill=\"#A80036\" points=\"361,547.2811,357,556.2811,361,552.2811,365,556.2811,361,547.2811\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"71\" x=\"362\" y=\"590.02\">Inheritance<\/text><polygon fill=\"#000000\" points=\"393,599.0859,396,605.0859,399,599.0859,393,599.0859\" style=\"stroke: #000000; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"36\" x=\"322.1313\" y=\"567.4263\">many<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"24\" x=\"335.6875\" y=\"615.0277\">one<\/text><!--link Battles to Outcomes--><path d=\"M245,114.9721 C245,114.9721 245,151.4281 245,168.4551 \" fill=\"none\" id=\"Battles-Outcomes\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><polygon fill=\"#A80036\" points=\"245,181.7021,249,172.7021,245,176.7021,241,172.7021,245,181.7021\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><line style=\"stroke: #A80036; stroke-width: 1.0;\" x1=\"245\" x2=\"245\" y1=\"176.7021\" y2=\"168.7021\"\/><polygon fill=\"#A80036\" points=\"245,102.9721,241,108.9721,245,114.9721,249,108.9721,245,102.9721\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"23\" x=\"246\" y=\"146.02\">has<\/text><polygon fill=\"#000000\" points=\"253,155.0859,256,161.0859,259,155.0859,253,155.0859\" style=\"stroke: #000000; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"24\" x=\"218.9375\" y=\"122.7357\">one<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"36\" x=\"206.2438\" y=\"170.9762\">many<\/text><!--link Outcomes to Ships--><path d=\"M235.543,281.0901 C231.985,316.5861 232.204,362.8521 249,399.9531 C258.928,421.8831 294.6259,457.7831 294.6259,457.7831 \" fill=\"none\" id=\"Outcomes-Ships\" style=\"stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;\"\/><polygon fill=\"#A80036\" points=\"303.78,465.5421,301.7893,458.6113,294.6259,457.7831,296.6166,464.714,303.78,465.5421\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><polygon fill=\"#A80036\" points=\"237.066,268.0551,232.0487,276.5302,236.4858,273.0213,239.9946,277.4585,237.066,268.0551\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><line style=\"stroke: #A80036; stroke-width: 1.0;\" x1=\"236.4858\" x2=\"235.5575\" y1=\"273.0213\" y2=\"280.9671\"\/><path d=\"M254,335.9531 L254,390.9531 L439,390.9531 L439,345.9531 L429,335.9531 L254,335.9531 \" fill=\"#FBFB77\" filter=\"url(#fkv7t2q9hk47h)\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><path d=\"M429,335.9531 L429,345.9531 L439,345.9531 L429,335.9531 \" fill=\"#FBFB77\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"95\" x=\"260\" y=\"353.02\">Once launched<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"43\" x=\"260\" y=\"368.1528\">can be<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"164\" x=\"260\" y=\"383.2856\">in the subsequent Battles<\/text><polygon fill=\"#000000\" points=\"483.5,368.0859,486.5,362.0859,489.5,368.0859,483.5,368.0859\" style=\"stroke: #000000; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"78\" x=\"449\" y=\"383.1528\">possibly has<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"36\" x=\"196.7707\" y=\"288.4797\">many<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"24\" x=\"272.2091\" y=\"457.5721\">one<\/text><!--link Outcomes to UnclassifiedShips--><path d=\"M301.895,224.9531 C339.03,224.9531 387.785,224.9531 427.391,224.9531 \" fill=\"none\" id=\"Outcomes-UnclassifiedShips\" style=\"stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;\"\/><polygon fill=\"#A80036\" points=\"296.503,224.9531,305.503,228.9531,301.503,224.9531,305.503,220.9531,296.503,224.9531\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><polygon fill=\"#000000\" points=\"323.5,212.0195,317.5,215.0195,323.5,218.0195,323.5,212.0195\" style=\"stroke: #000000; stroke-width: 1.0;\"\/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacingAndGlyphs\" textLength=\"78\" x=\"329.5\" y=\"218.02\">possibly has<\/text><!--link N2 to Ships--><path d=\"M595.201,393.0961 C545.589,416.3671 473.728,450.0761 422.713,474.0051 \" fill=\"none\" id=\"N2-Ships\" style=\"stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;\"\/><polygon fill=\"#A80036\" points=\"418.152,476.1451,427.9988,475.9432,422.6785,474.0212,424.6004,468.7008,418.152,476.1451\" style=\"stroke: #A80036; stroke-width: 1.0;\"\/><!--link Outcomes to N2--><path d=\"M296.605,248.1501 C328.67,261.5851 370.901,278.6361 409,291.9531 C458.144,309.1311 513.735,325.9091 559.331,338.9901 \" fill=\"none\" id=\"Outcomes-N2\" style=\"stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;\"\/><!--\n@startuml\ntitle Relationships - Class Diagram\n\ntogether {\nenum ShipClassType {\n  BB\n  BC\n}\nclass Classes {\n  +str class \n  #{classifier} enum type \n  +str country \n  +int numGuns \n  +int bore \n  +int displacement\n}\n}\nclass Ships {\n  +name : str\n  -class : ref\n  +launched : date\n}\nclass Battles { \n  +{field} name : str\n  +{field} date : date\n}\ntogether {\nenum OutcomeType {\n  SUNK\n  DAMAGED\n  OK\n}\nclass Outcomes { \n  - ship : ref\n  - battle : ref\n  #{classifier} result : enum\n}\n}\nclass UnclassifiedShips { \n  {field} name : str \n}\n\nClasses \"one\" -up-> \"many\" Ships: < Inheritance\nBattles \"one\" *-down-> \"many\" Outcomes: has >\nShips \"one\" *.left.> \"many\" Outcomes: possibly has >\nnote left on link \nOnce launched\ncan be\nin the subsequent Battles\nend note\nUnclassifiedShips .left.> Outcomes: possibly has >\n\nnote \"Once sunked\\ncannot fight\\nin the subsequent Battles\" as N2\nnote as N3\nnamed after first ship builded  \nor  \nby the project name\nend note\nnote as N4\nif gives name to the class\nprefexed with 'Main'\nend note\n\nN2 ..> Ships\nOutcomes .. N2\nN3 .right.> Classes\nN4 .right.> Ships\n@enduml\n\nPlantUML version 1.2019.08(Sat Jul 13 19:25:14 UTC 2019)\n(GPL source distribution)\nJava Runtime: Java(TM) SE Runtime Environment\nJVM: Java HotSpot(TM) 64-Bit Server VM\nJava Version: 1.7.0_25-b15\nOperating System: Linux\nDefault Encoding: UTF-8\nLanguage: en\nCountry: US\n--><\/g><\/svg>","911108b6":"#from collections import (\n#  namedtuple\n#)\nfrom typing import (\n  NamedTuple\n)\nfrom enum import Enum\nfrom datetime import ( date, datetime )\n\n\nclass Ship_Class_Type( Enum ):\n    BB = 0# battle ship\n    BC = 1# battle cruiser\n    #def __repr__(self):\n    def __str__(self):\n        #return str(self.value)\n        return self.name   \n\nclass Class_Row_Cls( NamedTuple ):\n  \"\"\"\n  Classes ( class, type, country, numGuns, bore, displacement )\n  - class name\n      Baltimore-class cruisers, \n      Alaska-class \"large cruisers\"\n\n  - type (\n 0: bb for a battle ship  \n or  \n 1: bc for a battle cruiser  \n), \n  - country of origin, where ship was build \n    [ Kriegsmarine, \n      Royal Navy, \n      Soviet Navy, \n      United States Navy, \n      Imperial Japanese Navy ]\n  - the number of the main battery guns \n  - guns caliber (  \nthe specified nominal internal diameter  \nof the gun barrel bore   \nmeasured in inches  \n) \n    numGuns \u00d7 bore: [\n        11 inch (283mm) guns, \n        310-millimetre (12.2 in) gun, \n        8 \u00d7 12-inch (305 mm), \n        8 \u00d7 13.5-inch, \n        6 \u00d7 15-inch, \n        2 \u00d7 18-inch (457 mm),\n        9 \u00d7 16-inch (406 mm),\n        8 \u00d7 28 cm (11 in)\n    ]\n  - ship displacement at full combat load ( weight ton )  \n  \n  Kirov-class battlecruiser \n    Type: Heavy guided missile cruiser\/battlecruiser  \n    Displacement: 24,300 tons standard 28,000 tons full load\n    \n  Yamato-class battleship  \n    Armament:\n(1941)\n9 \u00d7 46 cm Type 94 guns (3x3)\n12 \u00d7 15.5 cm 3rd Year Type guns (4x3)\n12 \u00d7 127 mm Type 89 (6x2)\n24 \u00d7 25 mm Type 96 AA guns (8x3)\n4 \u00d7 13.2 mm Type 93 (2x2)\n(1945)\n9 \u00d7 46 cm Type 94 guns (3x3)\n6 \u00d7 15.5 cm 3rd Year Type guns (2x3)\n24 \u00d7 127 mm Type 89 (12x2)\n162 \u00d7 25 mm Type 96 AA guns\n4 \u00d7 13.2 mm Type 93 (2x2) \n\n  relations:\n    one class -> at least one or ( possibly ) many ships\n    mutually depends on Ships\n  it | they has be generated together\n  \"\"\"\n  # ID key\n  class_Name: str # [Ship 0..Y( derived from Main Ship 0..Y ) | Project 0..Z]-class battleship | battlecruiser\n  class_Type: Ship_Class_Type  \n  country: str # [ \"UK\", \"US\", \"Germany\", \"Japan\" ]\n  numGuns: int # from 2 to 11\n  bore: int # from 11 to 18 \n  displacement: int # from min: 14,218 tons to max: 74,170 tons \n  def __repr__( self ) -> str:\n    return (\n        f\"( {self.class_Name}, {self.class_Type}, {self.country}\"\n        f\", {self.numGuns} \u00d7 {self.bore}-inch guns, {self.displacement} tons )\"\n    )\n    \nclass Ship_Row_Cls( NamedTuple ):\n  \"\"\"\n  Ships ( name, class, launched )\n  - name of ship, \n  - ship's class name \n  - the year the ship was commissioned \n  \n  relations:\n    depends on Classes\n  cannot be correctly generated without it  \n  \"\"\"\n  # ID key\n  name: str # Ship 0..X or Main Ship 0..Y\n  class_Ref: str # in Classes     \n  launched: datetime # from 1906 to 1945\n  def __repr__( self ) -> str:\n    return f\"( {self.name}, {self.class_Ref}, {self.launched.strftime( '%Y-%m-%d' )} )\"\n    \nclass Battle_Row_Cls( NamedTuple ):\n  \"\"\"\n  Battles ( name, date )\n  - name | description  \n  - battle date\n  \n  relations:\n    totally independant\n  easily generated  \n  \"\"\"\n  # ID key\n  name: str # The Battle N of Some Place M\n  date: datetime # Dates: Sep 1, 1939 \u2013 Sep 2, 1945 ( from 1939 to 1945 )\n  def __repr__( self ) -> str:\n    #return f\"( {self.name}, {self.date.isoformat(' ')} )\"\n    return f\"( {self.name}, {self.date.strftime( '%Y-%m-%d' )} )\"\n    \nclass Battle_Ship_Result(Enum):\n    SUNK = 0\n    DAMAGED = 1\n    OK = 2\n    def __str__(self):\n        return self.name   \n        \nclass Outcome_Row_Cls( NamedTuple ):\n  \"\"\"\n  Outcomes ( ship, battle, result )\n  - fight outcome for ship in battle  \n(  \n 0: sunk,  \n 1: damaged  \n 2: OK  \n)\n  relations:\n    depends on `Battles`\n    and partially on `Ships`\n  so cannot be correctly generated without them \n  \"\"\"\n  ship_Ref: str # in Ships and random: non-battleship 0..A | non-battlecruiser 0..B\n  battle_Ref: str # in Battles\n  result: Battle_Ship_Result\n  def __repr__( self ) -> str:\n    return f\"( {self.ship_Ref}, {self.battle_Ref}, {self.result} )\"\n","75c22ca1":"( Ship_Class_Type['BC'].name, Ship_Class_Type['BC'].value )","099eb0f0":"str( Ship_Class_Type.BC )","436bae6c":"from typing import (\n  Tuple,\n  #Mapping,\n  Dict,\n  Set  \n)\nfrom random import ( random, choice, randint )\nfrom pprint import pprint\n\n\ndef generate_Date(\n    #launched_Year_Limits: ( int, int ) = ( 1906, 1945 )\n    start_Year: int,\n    end_Year: int\n) -> Battle_Row_Cls:\n    \"\"\" input generator\n    1 <= day <= number of days in the given month and year\n    \"\"\"\n    month = randint( 1, 12 )\n    year = randint( start_Year, end_Year )\n    dttm = pd.Timestamp( year, month, 1 )\n    max_Day = dttm.days_in_month\n    #day = randint( 1, max_Day )\n\n    return dttm.replace( day = randint( 1, max_Day ) ) \n\ndef generate_Key(\n    size_Limit: int,\n    keys_Set: Set[ int ]# e.g. projects_Keys_Set\n) -> int:\n    \"\"\"\"\"\"\n    for _ in range( size_Limit * size_Limit ):\n        key =  randint( 0, size_Limit ) \n        if not key in keys_Set:\n            return key\n\ndef get_Class_And_Ship_Key(\n    size_Limit: int,\n    #classes_Dict_Size: int,\n    classes_Dict: Dict[ str, Tuple[ Class_Row_Cls, Set[ int ] ] ],\n    projects_Keys_Set: Set[ int ],\n) -> ( str, Ship_Class_Type, int, str, Set[ int ] ):\n    \"\"\"\n    returns:\n    ========\n    - class_Name: str, \n    - ship_Type: Ship_Class_Type, \n    - ship_Key: int, \n    - ship_Name: str,\n    - projects_Keys_Set: Set[ int ]\n    \"\"\"\n    class_Name = None\n    ship_Name = None\n    ship_Key = None\n    ship_Type = Ship_Class_Type['BB']#(0)\n    name_Suffix = \" battleship\"\n    # 1 class ( up ) to | per N ships ?\n    if random() < 0.13:\n        # make new Project 0..Z-class battleship | battlecruiser\n        ### @toDo: factor it out ?\n        project_Key = generate_Key(\n            size_Limit = size_Limit,\n            keys_Set = projects_Keys_Set\n        )\n        projects_Keys_Set.add( project_Key )\n        class_Name = f\"Project {project_Key}-class\"\n        ship_Key = generate_Key(\n            size_Limit = size_Limit,\n            keys_Set = set()\n        )\n        ship_Name = f\"Ship {ship_Key}\"\n    elif random() < 0.23:\n        # make new Main Ship 0..Y battleship | battlecruiser\n        # and new Ship 0..Y-class battleship | battlecruiser from it\n        ship_Key = generate_Key(\n            size_Limit = size_Limit,\n            keys_Set = set( map( lambda k: k[-1], classes_Dict.keys() ) )\n        )\n        ship_Name = f\"Main Ship {ship_Key}\"\n        class_Name = f\"Ship {ship_Key}-class\"\n    else:\n        classes_Dict_Size = len( classes_Dict )\n        if classes_Dict_Size > 0:\n            #choice( classes_Dict.keys() )\n            if 1 == 0: pprint( classes_Dict.values() );\n            ( class_Value, binded_Ships_IDs ) = choice( tuple( classes_Dict.values() ) )\n            class_Name = \" \".join(\n                class_Value.class_Name.split()[:-1]\n            )# + \" \"\n            ship_Key = generate_Key(\n                size_Limit = size_Limit,\n                keys_Set = binded_Ships_IDs#class_Value[1]\n            )\n            ship_Name = f\"Ship {ship_Key}\"\n        else:\n            # make new Project 0..Z-class battleship | battlecruiser\n            project_Key = generate_Key( size_Limit, projects_Keys_Set )\n            projects_Keys_Set.add( project_Key )\n            class_Name = f\"Project {project_Key}-class\"\n            ship_Key = generate_Key( size_Limit, set() )\n            ship_Name = f\"Ship {ship_Key}\"\n\n    # for every battleship how many battlecruisers ?\n    if random() < 0.25:\n        name_Suffix = \" battlecruiser\"\n        ship_Type = Ship_Class_Type['BC']#(1)         \n        \n    return ( \n        class_Name + name_Suffix, \n        ship_Type, \n        ship_Key, \n        ship_Name + name_Suffix,\n        projects_Keys_Set\n    )\n\ndef generate_Classes_Ships(\n    min_Size: int = 9,\n    max_Size: int = 19,\n    countries: Tuple[ str ] = ( \"UK\", \"US\", \"Germany\", \"Japan\" ),\n    num_Guns_Limits: ( int, int ) = ( 2, 11 ),\n    bore_Limits: ( int, int ) = ( 11, 18 ),\n    displacement_Limits: ( int, int ) = ( 14_218, 74_170 ),\n    launched_Year_Limits: ( int, int ) = ( 1906, 1945 ),\n) -> ( Tuple[ Class_Row_Cls ], Tuple[ Ship_Row_Cls ] ):\n    \"\"\" input generator\n    [\n      Ship 0..Y( derived from Main Ship 0..Y ) | \n      Project 0..Z\n    ]-class battleship | battlecruiser\n    c.class_Name: str \n    c.class_Type: Ship_Class_Type  \n    c.country: str # [ \"UK\", \"US\", \"Germany\", \"Japan\" ]\n    c.numGuns: int # from 2 to 11\n    c.bore: int # from 11 to 18 \n    c.displacement: int # from min: 14,218 tons to max: 74,170 tons\n    s.name Ship 0..X or Main Ship 0..Y\n    s.class_Ref: str # in Classes     \n    s.launched: datetime # from 1906 to 1945\n    \n    Is 0..Y unique inside class or overall ( for simplicity ) ?\n    ### @toDo: resolve | acknowledge case where `s.name` is not unique\n    ### and only a compound key: `s.name` + `s.class_Ref` is unique:\n17\tShip 9 battleship\tThe Battle 0 of the Some Place 12\tSUNK\tShip 9 battleship\tProject 2-class battleship\t1914-07-13\n18\tShip 9 battleship\tThe Battle 0 of the Some Place 12\tSUNK\tShip 9 battleship\tShip 11-class battleship\t1943-05-03\n    but this | those kind of `s.name`:\n2\tMain Ship 11 battlecruiser\tShip 11-class battlecruiser\t1928-02-19\n    still expected to be unique ?\n    \"\"\"\n    #             classID, ( record, binded ships IDs )\n    # type: Dict[ str, ( Class_Row_Cls, Set[ int ] ) ]\n    classes_Dict = dict()\n    # type: Dict[ str, Ship_Row_Cls ]\n    #ships_Dict = dict()\n    ships_List = list()\n    ships_Total = randint( min_Size, max_Size ) \n    projects_Keys_Set = set()\n \n    for _ in range( 0, ships_Total, 1 ):\n        \n        ( \n            class_Name, ship_Type, ship_Key, ship_Name,\n            projects_Keys_Set\n        ) = get_Class_And_Ship_Key(\n            size_Limit = ships_Total,\n            classes_Dict = classes_Dict,\n            projects_Keys_Set = projects_Keys_Set,\n        )     \n        ships_List.append(\n            Ship_Row_Cls( \n                name = ship_Name, \n                class_Ref = class_Name, \n                launched = generate_Date(\n                    start_Year = launched_Year_Limits[0],\n                    end_Year = launched_Year_Limits[1]\n                )\n            )\n        )\n        \n        get_Class = classes_Dict.get( class_Name, None )\n        #if class_Name in classes_Dict:\n        if get_Class is None:\n            classes_Dict[ class_Name ] = (\n                Class_Row_Cls( \n                    class_Name = class_Name, \n                    class_Type = ship_Type, \n                    country = choice( countries ), \n                    numGuns = randint( num_Guns_Limits[0], num_Guns_Limits[1] ), \n                    bore = randint( bore_Limits[0], bore_Limits[1] ), \n                    displacement = randint( displacement_Limits[0], displacement_Limits[1] ) \n                ),\n                set( [ ship_Key ] )\n            )\n        else: \n            ### ?!? ship_Key !?!\n            get_Class[1].add( ship_Key )\n        \n    return ( tuple( map( lambda v: v[0], classes_Dict.values() ) ), ships_List )","70261910":"( classes_Tuple, ships_List ) = generate_Classes_Ships()\n( len( classes_Tuple ), classes_Tuple if len( classes_Tuple ) < 7 else classes_Tuple[:3] + ( \"...\", ) + classes_Tuple[-2:] )","09d95a76":"import reprlib\nfrom pprint import pprint, pformat\n#pprint( reprlib.repr( ships_List ) ) \n#pprint( ships_List[:7] )\n( \n    len( ships_List ), \n    reprlib.repr( ships_List ),\n    #pformat( ships_List ),\n    ships_List if len( ships_List ) < 7 else ships_List[:3] + [ \"...\", ] + ships_List[-2:],\n)","e770e52d":"Classes_Tuple = (\n    Class_Row_Cls( class_Name = \"Ship 8-class battleship\", class_Type = Ship_Class_Type(0), country = \"US\", numGuns = 10, bore = 13, displacement = 20912 ),\n    Class_Row_Cls( class_Name = \"Ship 12-class battlecruiser\", class_Type = Ship_Class_Type(1), country = \"UK\", numGuns = 5, bore = 12, displacement = 53065 ),\n)  \nClasses_Tuple","46cbfbff":"#{'class_Name':[\"Ship 12-class battleship\",],'class_Type':[BB,],'country':[\"US\",],\n# 'numGuns': [10,], 'bore': [13,], 'displacement': [20912,],}\nclasses_Dict = dict()\nfor ( cln, clt, cn, ng, br, ds ) in classes_Tuple:\n    classes_Dict.setdefault('class_Name',[]).append(cln)\n    classes_Dict.setdefault('class_Type',[]).append(clt)\n    classes_Dict.setdefault('country',[]).append(cn)\n    classes_Dict.setdefault('numGuns',[]).append(ng)\n    classes_Dict.setdefault('bore',[]).append(br)\n    classes_Dict.setdefault('displacement',[]).append(ds)\nreprlib.repr( classes_Dict )","49c8e030":"pd.DataFrame( [ ( 1, 2., 'Hello' ), ( 2, 3., \"World\" ) ] )","e494a810":"classes_DF = pd.DataFrame( \n    #>data = classes_Dict,\n    data = list( classes_Tuple ),\n    columns = [ \n        'class_Name', \n        'class_Type','country',\n        'numGuns', 'bore', 'displacement' \n    ],\n).astype( { 'class_Type': 'category', 'country': 'category' } )\nclasses_DF","752a03e1":"# , dtype=\"category\"\n# df.astype({'a': np.bool, 'c': np.float64})\npd.concat(\n    [ \n        pd.DataFrame( \n            data = [ [ clt, cn, ng, br, ds ] ], \n            columns = [ \n                #'class_Name', \n                'class_Type','country',\n                'numGuns', 'bore', 'displacement' \n            ], \n            index = [ cln ]\n        ) for ( cln, clt, cn, ng, br, ds ) in classes_Tuple \n    ],\n).astype( { 'class_Type': 'category', 'country': 'category' } )","1538d980":"Ships_Tuple = (\n  Ship_Row_Cls( name = \"HMS Meteor\", class_Ref = \"M-class destroyer\", launched = pd.Timestamp( \"4 June 1942\" ) ),\n  Ship_Row_Cls( name = \"Hiei\", class_Ref = \"Kong\u014d-class battlecruisers\", launched = pd.Timestamp( \"4 August 1914\" ) ),\n  Ship_Row_Cls( name = \"\", class_Ref = \"\", launched = pd.Timestamp( \"4 June 1942\" ) ),\n  Ship_Row_Cls( name = \"\", class_Ref = \"\", launched = pd.Timestamp( \"4 June 1942\" ) ),\n  Ship_Row_Cls( name = \"\", class_Ref = \"\", launched = pd.Timestamp( \"4 June 1942\" ) ),\n)   \nShips_Tuple","73732db9":"#{'name':[\"Main Ship 8 battleship\",],'class_Ref':[\"Ship 8-class battleship\",],'launched':[1929-12-06,]}\nships_Dict = dict()\nfor ( n, c, l ) in ships_List:\n    ships_Dict.setdefault('name',[]).append(n)\n    ships_Dict.setdefault('class_Ref',[]).append(c)\n    ships_Dict.setdefault('launched',[]).append(l)","b241bced":"#>ships_DF = pd.DataFrame( data = ships_Dict )\nships_DF = pd.DataFrame( \n    data = ships_List, #list( classes_Tuple ),\n    columns = [ \n        'name', \n        'class_Ref',\n        'launched',\n    ],\n).astype( { 'class_Ref': 'category' } ).sort_values(['launched'])\nships_DF","9fd6260c":"ships_DF.loc[2]","e2cd7b49":"ships_DF.head(3).tail(1)","30085700":"pd.concat(\n    [ \n        pd.DataFrame( \n            data = [ [ n, c, l ] ], \n            columns = [ 'name', 'class_Ref', 'launched' ] \n        ) for ( n, c, l ) in ships_List \n    ],\n    ignore_index = True \n).size","c1ed85f5":"pd.concat(\n    [ \n        pd.DataFrame( \n            data = [ [ c, l ] ], \n            columns = [ 'class_Ref', 'launched' ], \n            index = [ n ]\n        ) for ( n, c, l ) in ships_List \n    ],\n)","b009f70f":"# You can also assign a dict to a row of a DataFrame:\n#x.iloc[1] = {'x': 9, 'y': 99}\n# Iteratively appending rows to a DataFrame \n# can be more computationally intensive \n# than a single concatenate. \n# A better solution \n# is to append those rows to a list \n# and then \n# concatenate the list with the original DataFrame all at once.\npd.concat(\n    [ pd.DataFrame( [ i ], columns = [ 'A' ] ) for i in range( 5 ) ],\n    ignore_index = True \n)","9a0734b3":"np.arange( 10 )","d0b7f955":"# numpy.reshape(a, newshape, order='C')\n#  Gives a new shape to an array without changing its data.\n#    One shape dimension can be -1. \n#    In this case, \n#    the value is inferred \n#    from the length of the array \n#    and remaining dimensions.\nnp.arange( 10 ).reshape( -1, 2 )","c7b4e953":"np.arange( 10 ).reshape( 5, 2 )","83b977b1":"np.arange( 9 ).reshape( 3, 3 )","45be1c6d":"#df_043 = \npd.DataFrame( np.arange( 10 ).reshape( -1, 2 ), columns = [ 'A', 'B' ] )\n#df_043","7eefa545":"df_042 = pd.DataFrame(\n    # column values records list\n    data = [ [1, 2], [4, 5], [7, 8] ],\n    # keys to select rows\n    index = [ 'cobra', 'viper', 'sidewinder' ],\n    columns = [ 'max_speed', 'shield' ] \n)\ndf_042","a4d61525":"[ row for row in df_042.itertuples() ]","5ac158c1":"# iterating df rows:\ntuple( row for row in df_042.itertuples( index = False, name = 'Snakes' ) )","e0aa0199":"# iterating df rows:\ntuple( ( s, m ) for ( m, s ) in df_042.itertuples( index = False, name = 'Snakes' ) )","ff34b333":"battles_Tuple = (\n    Battle_Row_Cls( name = \"Naval Battle of Guadalcanal\", date = pd.Timestamp( \"13 November 1942\" ) ),\n    Battle_Row_Cls( name = \"The Battle of Midway\", date = pd.Timestamp( \"4 June 1942\" ) ),\n    Battle_Row_Cls( name = \"The Battle of Okinawa\", date = pd.Timestamp( \"1 April 1945\" ) ),\n    Battle_Row_Cls( name = \"the Battle of Taranto\", date = pd.Timestamp( \"1 November 1940\" ) ),\n    Battle_Row_Cls( name = \"the Battle of Cape Matapan\", date = pd.Timestamp( \"29 March 1941\" ) ),\n    Battle_Row_Cls( name = \"The Battle of the Coral Sea\", date = pd.Timestamp( \"4 May 1942\" ) ),\n    Battle_Row_Cls( name = \"The Battle of the Philippine Sea\", date = pd.Timestamp( \"19 June 1944\" ) ),\n    Battle_Row_Cls( name = \"The Battle of Leyte Gulf\", date = pd.Timestamp( \"23 October 1944\" ) ),\n    Battle_Row_Cls( name = \"The Battle of the Ligurian Sea\", date = pd.Timestamp( \"18 March 1945\" ) ),\n)\nbattles_Tuple","800ee801":"s = { (1,2), (2,1) }\n( (1,2) in s, (2,1) in s, (1,1) in s, not (1,1) in s )","823d2eb0":"from typing import (\n  Tuple\n)\nfrom random import ( random, choice, randint )\n\n\ndef generate_Battle_Row(\n    #n_M_ID: ( int, int )\n    n: int,\n    m: int\n) -> Battle_Row_Cls:\n \"\"\" input generator\n - name: str # The Battle N of Some Place M\n - date: datetime # Dates: Sep 1, 1939 \u2013 Sep 2, 1945 ( from 1939 to 1945 )\n \n N & M expected to be unique like key | ID\n \n 1 <= day <= number of days in the given month and year\n \"\"\"\n month = randint( 1, 12 )\n year = randint( 1939, 1945 )\n dttm = pd.Timestamp( year, month, 1 )\n max_Day = dttm.days_in_month\n #day = randint( 1, max_Day )\n\n return Battle_Row_Cls( \n     name = f\"The Battle {n} of the Some Place {m}\", \n     date = dttm.replace( day = randint( 1, max_Day ) ) \n )   \n\ndef generate_Composit_Key(\n    size_Limit: int,\n    keys_Set: set\n) -> ( int, int ):\n    \"\"\"\"\"\"\n    for _ in range( size_Limit * size_Limit ):\n        #key = ( \n        n = randint( 0, size_Limit ) \n        m = randint( 0, size_Limit ) \n        #)\n        if not ( n, m ) in keys_Set:\n            return ( n, m )\n    \ndef generate_Battles(\n    min_Size: int = 9,\n    max_Size: int = 19    \n) -> Tuple[ Battle_Row_Cls ]:\n \"\"\" input generator\n \"\"\"\n keys_Set = set()\n battles_Total = randint( min_Size, max_Size ) \n battles_List = []\n \n for _ in range( 0, battles_Total, 1 ):\n     ( n, m ) = generate_Composit_Key(\n        size_Limit = battles_Total,\n        keys_Set = keys_Set\n     )\n     keys_Set.add( ( n, m ) )   \n     battles_List.append( generate_Battle_Row( n, m ) )   \n  \n return battles_List\n #return tuple( generate_Battle_Row() for _ in range( 0, battles_Total, 1 ) )","1fe7cfa0":"generate_Key( 9, set() )","a016a4b8":"battles_Tuple = sorted( generate_Battles(), key = lambda b: ( b[1], b[0] ) )\n#>sorted( battles_Tuple, key = lambda b: ( b[1], b[0] ) )\nbattles_Tuple","d3eb47cd":"battles_DF = pd.DataFrame( \n    data = list( battles_Tuple ),\n    columns = [ \n        'name', \n        'date',\n    ],\n)#?.sort_values(['date'])#?.astype( { 'name': 'category' } )\nbattles_DF","fa53c307":"pd.concat(\n    [ \n        pd.DataFrame( \n            data = [ [ n, d ] ], \n            columns = [ \n                'name', \n                'date' \n            ], \n            #index = [ n ]\n        ) for ( n, d ) in battles_Tuple \n    ],\n    ignore_index = True \n).astype( { 'name': 'category' } )","00a13f51":"from datetime import (\n  timedelta,\n  date,\n  #tzinfo, \n  datetime,\n)\n\n#{'name':[\"Battle of Jutland\",],'date':[pd.Timestamp( \"31 May 1916\" ),]}\nbattles_Dict = dict()\nfor ( n, d ) in battles_Tuple:\n    battles_Dict.setdefault('name',[]).append(n)\n    battles_Dict.setdefault('date',[]).append(d)\n#>battles_DF = pd.DataFrame( data = battles_Dict )\n#>battles_DF","02274322":"battles_DF.dtypes","d2bfb77d":"Outcomes_Tuple = (\n  Outcome_Row_Cls( ship_Ref = \"HMS Meteor\", battle_Ref = \"The Battle of the Philippine Sea\", result = Battle_Ship_Result(0) ),\n  Outcome_Row_Cls( ship_Ref = \"Hiei\", battle_Ref = \"The Battle of Leyte Gulf\", result = Battle_Ship_Result['DAMAGED'] ),\n  Outcome_Row_Cls( ship_Ref = \"Yamato\", battle_Ref = \"The Battle of the Ligurian Sea\", result = Battle_Ship_Result['OK'] ),\n)\nOutcomes_Tuple                  ","2b7fa0ea":"from random import ( random, choice, randint )\n( \n    Battle_Ship_Result( randint( 0, 2 ) ), \n    Battle_Ship_Result( randint( 0, 2 ) ),\n    Battle_Ship_Result( randint( 0, 2 ) ), \n    Battle_Ship_Result( randint( 0, 2 ) ), \n    Battle_Ship_Result( randint( 0, 2 ) ), \n)","b66abc37":"# random.sample(population, k)\nfrom random import sample\nsample( ships_List, 3 )","7469178c":"from random import ( random, choice, randint, sample )\n\n\ndef generate_Outcomes(\n    battles_Tuple: Tuple[ Battle_Row_Cls ] = battles_Tuple,\n    ships_List: Tuple[ Ship_Row_Cls ] = ships_List,\n    # ships per battle\n    ships_Per_Battle_Limits: ( int, int ) = ( 3, 19 ),\n    non_Combatant_Options: Tuple[ str ] = ( \n        \"rescue boat\", \"tanker\", \"merchant ship\", \"aircraft carrier\" \n    ),\n) -> Tuple[ Outcome_Row_Cls ]:\n    \"\"\" input generator\n    o.ship_Ref: str # [ \n        ship from [ ships_List | ships_DF ] | random: [ \n            rescue boat | tanker | merchant ship | aircraft carrier ] ]\n    o.battle_Ref: str # from battles_Tuple or battles_DF  \n    o.result: Battle_Ship_Result # random\n    \n    ### @Done?: check | ensure that:\n    - Sunked ship  \n    did not participated in next | further battles\n    this outcome cannot be allowed for the same ship:\n41\tShip 9 battleship\tShip 11-class battleship\t1943-05-03\tThe Battle 9 of the Some Place 1\t1943-02-19\tSUNK\n36\tShip 9 battleship\tShip 11-class battleship\t1943-05-03\tThe Battle 9 of the Some Place 1\t1943-02-19\tDAMAGED \n    and compicates things | to distinguish if | in case they are actually different:\n40\tShip 9 battleship\tThe Battle 9 of the Some Place 1\tSUNK\tShip 9 battleship\tProject 2-class battleship\t1914-07-13\n7\tShip 9 battleship\tThe Battle 6 of the Some Place 6\tDAMAGED\tShip 9 battleship\tShip 11-class battleship\t1943-05-03\n    ### @Done?: prevent ship.launched date > battle_Ref.date\n    ### @toDo: a compound key: `s.name` + `s.class_Ref` as unique ship identificator\n    ### @toDo: prevent all available ships to be involved in any battles\n    ### some ( at least one ) of them must stay out of fights\n    ### to complete | be in | get into the goal report output\n    \"\"\"\n    # type: Tuple[ Outcome_Row_Cls ]\n    outcomes_List = []\n    # type: Set[ str ]\n    sunked_Ships_Set = set()\n    # type: int\n    non_Combatant_Suffix = 0\n    # type: int\n    ships_Total = len( ships_List )\n    # from ratio of one excluded ship per N fighting ships\n    # type: int\n    excluded_Ships_Total = max( 1, ships_Total \/\/ 7 )\n    #excluded_Ships = sample( ships_List, excluded_Ships_Total )\n    # to exclude some from outcome\n    # type: List[ Ship_Row_Cls ]\n    available_Ships_Pool = sample( ships_List, ships_Total - excluded_Ships_Total )\n \n    for ( b_Name, b_Date ) in sorted( \n        battles_Tuple, key = lambda b: ( b[1], b[0] ) \n    ):\n        \n        ships_In_Battle_Total = randint( \n            ships_Per_Battle_Limits[0], ships_Per_Battle_Limits[1] )\n        \n        for _ in range( 0, ships_In_Battle_Total, 1 ):\n            # default\n            ship_Name = choice( non_Combatant_Options ) + str( non_Combatant_Suffix )\n            # type: str\n            ship_ID = ship_Name\n            # combat ships vs. non combat ratio\n            if random() < 0.77:\n                # stil afloat | sailing\n                non_Sunked_Ships = tuple( \n                    ship for ship in available_Ships_Pool#>ships_List \n                    if ship.name + ':' + ship.class_Ref not in sunked_Ships_Set \n                )\n                if len( non_Sunked_Ships ) > 0:\n                    # already launched | available for combat\n                    launched_Sailing_Ships = tuple( \n                        ship for ship in non_Sunked_Ships \n                        if ship.launched <= b_Date\n                    )\n                    if len( launched_Sailing_Ships ) > 0:\n                        #ship_Name = choice( launched_Sailing_Ships ).name\n                        selected_Ship = choice( launched_Sailing_Ships )\n                        # type( selected_Ship.launched ) is <class 'pandas._libs.tslibs.timestamps.Timestamp'>\n                        #assert type( selected_Ship.launched ) is date, (\n                        #     \"type( selected_Ship.launched ) is \"\n                        #     f\"{type( selected_Ship.launched )}\" )\n                        #>assert type( b_Date ) is pd._libs.tslibs.timestamps.Timestamp\n                        #>assert selected_Ship.launched <= b_Date\n                        if 1 == 0: print( f\"{selected_Ship.name}{selected_Ship.launched} <= {b_Date}: {selected_Ship.launched <= b_Date}\" );\n                        ship_Name = selected_Ship.name\n                        ship_ID = selected_Ship.name + ':' + selected_Ship.class_Ref\n                    else:\n                        non_Combatant_Suffix += 1\n                else:\n                    return outcomes_List\n                    non_Combatant_Suffix += 1\n            else:\n                non_Combatant_Suffix += 1\n                \n            result = Battle_Ship_Result( randint( 0, 2 ) ) \n            \n            if result == Battle_Ship_Result.SUNK:\n                sunked_Ships_Set.add( \n                    #ship_Name \n                    ship_ID\n                )\n                \n            current_Outcome = Outcome_Row_Cls( \n                ship_Ref = ship_ID,#ship_Name, \n                battle_Ref = b_Name, \n                result = result\n            )\n                            \n            outcomes_List.append( current_Outcome )\n        \n    return outcomes_List","4beca370":"ships_List_Size = len( ships_List )\noutcomes_List = generate_Outcomes(\n    battles_Tuple = battles_Tuple,\n    ships_List = ships_List,\n    ships_Per_Battle_Limits = ( ships_List_Size \/\/ 3, ships_List_Size )\n)\n( len( outcomes_List ), outcomes_List if len( outcomes_List ) < 7 else outcomes_List[:3] + [ \"...\", ] + outcomes_List[-2:] )","c1f541d3":"# 2\tMain Ship 3 battleship:Ship 3-class battleship\tThe Battle 4 of the Some Place 7\tOK\n# 3\taircraft carrier1\tThe Battle 4 of the Some Place 7\tDAMAGED\n( \"Main Ship 3 battleship:Ship 3-class battleship\".split(':'), \"aircraft carrier1\".split(':') )","387242df":"outcomes_DF = pd.DataFrame( \n    data = outcomes_List,\n    columns = [ \n        #'ship_Name', \n        'ship_ID', \n        'battle_Ref',\n        'result',\n    ],\n).astype( { 'result': 'category' } )\noutcomes_DF.describe()","62264c0e":"i = 42\n#dir(i)#?.name\n#help( locals )\n#i in locals()\n#>#False\n#>dir( locals )\n### tons of output\n#locals()\n#help( locals.__module__ )\n#! TypeError: 'dict_items' object is not subscriptable\n#>tuple( locals().items() )[:7]\n#has(locals())\n#>help( hasattr )\n#hasattr( locals(), 'i' )\n#>#False\n#! TypeError: hasattr(): attribute name must be string\n#hasattr( locals(), i )\nmyVariable = 5\nis_Name_Found = False\nfor v in tuple( locals() ):\n  #?if id( v ) == id( myVariable ):\n  # without tuple wrapper for locals() got: \n  #! RuntimeError: dictionary changed size during iteration  \n  if id( v ) == id( 'myVariable' ):\n  #?if v == myVariable:\n    print( v, locals()[v] )\n    is_Name_Found = True\n    #?locals()[v]\n\n( locals()['myVariable'], is_Name_Found )","bdae2770":"def get_Variable_Name_Str( \n    var,\n    lookup = locals()\n    #?vars_Set: set \n) -> str:\n    \"\"\"\n    some_Var = [i] -> 'not found!'\n    some_Var = i -> 'some_Var'\n    \n    If not for the default-Valued `lookup`, \n    the function would always\n    get the name as \"var\"\n    \"\"\"\n    #names_Str_List = []\n    # AttributeError: 'dict' object has no attribute 'iteritems'\n    for ( k, v ) in lookup.items(): # iter( locals() )\n        if v is var:#== some_Var:#[0]:\n            return k\n        #! TypeError: unhashable type: 'list' # < for `v` ?\n        #?if v in some_Var_Set:    \n        #for var in some_Var_Set:\n        #    if var is v:\n        #        names_Str_List.append( k )\n    #return names_Str_List#\"not found!\"   \ni = 42\n#>get_Variable_Name_Str( var =  i )\n#>get_Variable_Name_Str( outcomes_DF )\n#>#[]\n# but\n#>tuple( k for ( k, v ) in locals().items() if v is i )[0]\n#>\ntuple( get_Variable_Name_Str( v ) for v in ( classes_DF, ships_DF, battles_DF, outcomes_DF, ) )","6d340b60":"from typing import (\n  List, Tuple\n)\ndef get_Variable_Names_Str_0( \n    #?vars_Set: set,\n    vars_Tuple: tuple,\n    lookup = locals()\n    #?vars_Set: set \n) -> List[ str ]:\n    \"\"\"\"\"\"\n    names_Str_List = []\n    for ( k, v ) in lookup.items():\n        #! TypeError: unhashable type: 'list' # < for `v` ?\n        try:\n            #! ValueError: The truth value of a DataFrame is ambiguous. \n            # Use a.empty, a.bool(), a.item(), a.any() or a.all().\n            #!if v in vars_Tuple:    \n            for var in vars_Tuple:    \n                if v is var:    \n                   names_Str_List.append( k )\n        except TypeError:\n            pass\n        \n    return names_Str_List\n\n#! TypeError: 'DataFrame' objects are mutable, thus they cannot be hashed    \nget_Variable_Names_Str_0( ( classes_DF, ships_DF, battles_DF, outcomes_DF, ) )","f8525e3e":"def get_Variable_Names_Str( \n    vars_Tuple: tuple,\n    lookup = locals()\n) -> List[ str ]:\n    \"\"\"\"\"\"\n    return [ \n        next( k for ( k, v ) in lookup.items() if id( var ) == id( v ) ) \n        for var in vars_Tuple\n    ]\n\nget_Variable_Names_Str( ( classes_DF, ships_DF, battles_DF, outcomes_DF, ) )","1e2d9d00":"#?def list_Variables( *vars ):\n#    return [ str(v) for v in vars ]\n\n#?list_Variables( *( classes_DF, ships_DF, battles_DF, outcomes_DF, ) )","1734d084":"# linear algebra\n#import numpy as np \n# data processing, CSV file I\/O ( e.g. pd.read_csv )\nimport pandas as pd \n\n\ndef store_DFs_To_OutPut(\n    dFs: tuple = ( classes_DF, ships_DF, battles_DF, outcomes_DF, ),\n    lookup = locals()\n) -> None:\n    \"\"\"\n    Any archives (e.g., ZIP files) that you upload \n    are uncompressed \n    so that \n    the files are easily accessible in Kernels \n    ( directory structure is preserved )\n    \"\"\"\n    # index: whether to write row (index) names (default True)\n    # df.to_csv(file_name, header=False, mode = 'a')\n    #file_name = \"classes_DF.csv\"\n    #for file_name in get_Variable_Names_Str( dFs ):\n    for dF in dFs:\n        \n        file_name = next( k for ( k, v ) in lookup.items() if id( dF ) == id( v ) )\n        \n        with open( file_name + \".csv\", mode = 'w' ) as f:\n            \n            dF.to_csv( \n                #file_name, \n                f,\n                index = False \n            )\n            \n    return None\n\n#>store_DFs_To_OutPut()","70538873":"# data processing, CSV file I\/O ( e.g. pd.read_csv )\nimport pandas as pd\n#\"\/kaggle\/input\/battle-ships\/outcomes_DF.csv\"\ndata_Path = (\n    \"\/kaggle\/input\/battle-ships\/\"\n    #\"\/kaggle\/input\/tinkoff-tournament-challenge-2-tasks\/\"\n)\n# FileNotFoundError: [Errno 2] File b'\/kaggle\/input\/tinkoff-tournament-challenge-2-tasks\/classes_DF.csv' does not exist: b'\/kaggle\/input\/tinkoff-tournament-challenge-2-tasks\/classes_DF.csv'\nclasses_DF = pd.read_csv( data_Path + \"classes_DF\" + \".csv\" )\nships_DF  = pd.read_csv( data_Path + \"ships_DF\" + \".csv\" )\nbattles_DF = pd.read_csv( data_Path + \"battles_DF\" + \".csv\" )\noutcomes_DF = pd.read_csv( data_Path + \"outcomes_DF\" + \".csv\" )","3ec5f07f":"outcomes_Ship_IDs_List = outcomes_DF[\"ship_ID\"].tolist()\n( len( outcomes_Ship_IDs_List ), outcomes_Ship_IDs_List[:7] )","7407d55f":"ships_Name_Class_Set = set( zip( ships_DF[ 'name' ].items(), ships_DF[ 'class_Ref' ].items() ) )\nships_Name_Class_Set","78b982d4":"ships_Name_Class_Set = set( \n    n + \":\" + cl\n    for ( ( _, n ), ( _, cl ) ) in zip( \n        ships_DF[ 'name' ].items(), ships_DF[ 'class_Ref' ].items() ) )\n( len( ships_Name_Class_Set ), ships_Name_Class_Set )","7b65d4af":"s = 'Ship 1 battleship:Project 4-class battleship'\n( s.index(':'), s.find(':'), s.count(':'), ':' in s )","dd08b5b3":"'merchant ship0'.index(':')","5fc9e925":"s = 'merchant ship0'\n( s.find(':'), s.count(':'), ':' in s )","29740bb2":"outcomes_Ship_IDs_Set = set( id for ( _, id ) in outcomes_DF[\"ship_ID\"].items() if \":\" in id )\n( len( outcomes_Ship_IDs_Set ), outcomes_Ship_IDs_Set )","406a7508":"# difference(*others)\nships_Name_Class_Set - outcomes_Ship_IDs_Set","37b59304":"outcomes_DF.head(7)","f18b5d12":"outcomes_DF.tail(7)","570f88cf":"outcomes_DF['ship_ID'].str.partition(':').head(3)","bc65f6aa":"outcomes_DF['ship_ID'].str.split( ':', expand = True, n = 1 ).head(11)","b5267172":"outcomes_DF.assign( \n    #! AttributeError: 'Series' object has no attribute 'split'\n    #? AttributeError: 'Series' object has no attribute 'array'\n    #!ship_Name = lambda x: x.ship_ID.array.split(':')\n    #>\n    id_Split = lambda x: x.ship_ID.str.split(':'),\n    #>\n    ship_Name = lambda x: x.id_Split.str[0],\n    # If you index past the end of the string, the result will be a NaN.\n    #>\n    ship_Class = lambda x: x.id_Split.str[1] if len( x.id_Split ) > 1 else \"undefined\", # <- same as `np.nan` ?\n    #! KeyError: 'ship_Name'\n    #! ValueError: Wrong number of items passed 2, placement implies 1\n    #?ship_Name = lambda x: x.ship_ID.str.split( ':', expand = True, n = 1 )\n    #? AttributeError: 'Series' object has no attribute 'to_numpy'\n    #!ship_Name = lambda x: x.ship_ID.to_numpy().split(':')\n    #!outcomes_DF['ship_ID'].split(':') \n    #? TypeError: assign() takes 1 positional argument but 2 were given\n    #?outcomes_DF['ship_ID'].str.split(':')[0] \n).head(3)\n","ecb37e02":"#>outcomes_DF = \npd.concat(\n    [ \n        pd.DataFrame( \n            data = [ [ s.split(':')[0], b, r ] ], \n            columns = [ \n                # somtimes == 'ship_Ref'\n                'ship_Name', \n                #'ship_ID', \n                'battle_Ref', \n                'result' \n            ], \n            index = [ s ]\n        ) for ( s, b, r ) in outcomes_List \n    ],\n    #ignore_index = True \n).astype( { 'result': 'category' } ).head(11)\n#>outcomes_DF","8b055f3e":"# .drop( columns = ['1'] )\noutcomes_DF.join( outcomes_DF['ship_ID'].str.partition(':') ).columns#head(3)","aa7f49f1":"outcomes_DF.join( outcomes_DF['ship_ID'].str.partition(':') ).head(3)","6d4debfb":"outcomes_DF.join( outcomes_DF['ship_ID'].str.partition(':') ).drop( columns = [1] ).rename(columns={ 0: \"ship_Name\", 2: \"ship_Class\"}).head(3)","ba143d47":"ships_DF.columns","48b9fdf8":"ships_DF['ship_ID'] = ( ships_DF['name'] + \":\" ).str.cat( ships_DF['class_Ref'] )\nships_DF.info()","2019e665":"ships_DF.head(7)","3e7e2ffc":"pd.merge( \n    left = outcomes_DF, \n    right = ships_DF, \n    how = 'left', \n    #left_on = 'ship_Name', right_on = 'name', \n    #left_on = 'ship_ID', right_on = 'ship_ID', \n    on = ['ship_ID'],\n    sort = False,\n).sort_values([\n    #! KeyError: 'ship_Name'\n    #'ship_Name',\n    'launched',\n]) ","bac43b0c":"# ships_DF: 'name', 'class_Ref', 'launched'\n# battles_DF: 'name', 'date'\n# outcomes_DF: 'ship_Name', 'battle_Ref', 'result'\ncombined_Info_DF = pd.merge( \n    left = pd.merge( \n        left = outcomes_DF, \n        right = ships_DF, \n        how = 'left', \n        #left_on = 'ship_Name', right_on = 'name', \n        on = ['ship_ID'],\n        sort = False,\n    ), \n    right = battles_DF, \n    how = 'inner', \n    left_on = 'battle_Ref', right_on = 'name', \n    # suffixes : tuple of (str, str), default (\u2018_x\u2019, \u2018_y\u2019)\n    suffixes = ( '_Of_Ship', '_Of_Battle' ),\n    sort = False,\n)[ \n    [ \n        #'ship_Name', \n        #>'name_x',\n        #>'name_y',\n        'ship_ID',\n        'name_Of_Ship',\n        'class_Ref', 'launched', 'battle_Ref', 'date', 'result' \n    ] \n ].sort_values( ['date', 'name_Of_Ship', 'class_Ref', 'launched' ] )#.where( \n    #?lambda x: x.notnull() \n    #?lambda x: pd.isna( x.name_Of_Ship ) \n    #?lambda x: x.name_Of_Ship.isna() \n    #lambda x: x.name_Of_Ship.notna()\n    #?lambda x: x.name_Of_Ship.notnull() \n    #! ValueError: Boolean array expected for the condition, not object\n    #!lambda x: x.dropna()\n#)\n# pd.isna\n# pd.notna\n# df.dropna()\n# df.notnull()\n# df.dropna(subset=['name', 'born'])\n# df.dropna(inplace=True)\ncombined_Info_DF.dropna( inplace = True )#>.dropna()#?.notnull()#.head(7) \ncombined_Info_DF","2b104d26":"### @Done?: @fixEd: it has to be no such results \ncombined_Info_DF[ ( combined_Info_DF['launched'] > combined_Info_DF['date'] ) ]","91b90a58":"ships_DF[ ~ships_DF.ship_ID.isin( combined_Info_DF ) ]","975dd119":"ships_DF[ [ 'name',\t'class_Ref' ] ].isin( combined_Info_DF )","0f384cd3":"import numpy as np\npd.merge( \n    left = ships_DF, \n    right = outcomes_DF, \n    how = 'outer', \n    on = 'ship_ID',#?[ 'name', 'class_Ref' ],\n    suffixes = ( '_Of_Ship', '_Of_Outcome' ),\n    sort = False,\n).where( \n    #lambda x: x.result == np.NaN \n    lambda x: x.result.isna()# & x.battle_Ref.isna() \n)#? & x.ship_ID.isna() )#x.name.notna() )#.isnull().any(1)","666ab338":"ships_DF[ ~ships_DF[ 'name' ].isin( outcomes_DF ) & ~ships_DF[ 'class_Ref' ].isin( outcomes_DF ) ]","4a3a7996":"#ships_DF.columns\nships_DF.query(\"ship_ID not in @combined_Info_DF\")","367c8fca":"ships_DF.query(\n    \"( name not in @outcomes_DF ) and ( class_Ref not in @outcomes_DF ) \"\n).sort_values( ['name', \"class_Ref\", \"launched\"] )","822586da":"pd.DataFrame( \n    data = [\n        ( \"ship 1\", \"1941-01-02\", \"Battle 1\", \"1940-01-01\" ),\n        ( \"ship 1\", \"1941-01-02\", \"Battle 2\", \"1941-01-01\" ),\n        ( \"ship 2\", \"1941-02-03\", \"Battle 1\", \"1940-01-01\" ),\n        ( \"ship 2\", \"1941-01-03\", \"Battle 2\", \"1941-01-01\" ),\n        ( \"ship 2\", \"1941-01-03\", \"Battle 3\", \"1941-01-02\" ),\n        ( \"ship 3\", \"1914-01-03\", \"NULL\", \"NULL\" ),\n    ], \n    #columns\n)","0b5f1692":"import IPython\nprogress_Bar = IPython.display.ProgressBar( total = 100 )\n[ progress_Bar.__next__() for _ in range( 0, progress_Bar.total \/\/ 2, 1 ) ]\nprogress_Bar.display()","f480eaff":"( \n    pd.Timestamp('2017-01-01T12'), \n    pd.Timestamp('31 May 1916'), \n    pd.Timestamp( day = 31, month = 5, year = 1916 ), \n    pd.Timestamp('2019-08-18') == pd.Timestamp('2019-08-18'), \n    pd.Timestamp('2019-08-16') < pd.Timestamp('2019-08-18'), \n    pd.Timestamp('2019-07-18') < pd.Timestamp('2019-08-18'), \n    pd.Timestamp('2018-08-18') < pd.Timestamp('2019-08-18'), \n    pd.Timestamp('2019-08-19') > pd.Timestamp('2019-08-18'), \n)","b851d6c8":"class_Types_Series = pd.Series([\"bb\", \"bc\"], dtype=\"category\")\nclass_Types_Series","eda1d3d4":"df42 = pd.DataFrame({\"A\": [\"a\", \"b\", \"c\", \"a\"]})\ndf42[\"B\"] = df42[\"A\"].astype('category')\ndf42","0d953ff4":"df42.dtypes","dd2a2539":"# Task 1\n### Given:\n- variable X: list of arbitraty length . \n#### Goal: \nmake string Y,  \nconsist of  \nevery item of X list  \nenclosed in quotes `\"`.  \nItems had to be separated with commas ','  \n( such as no dangling ',' after the last item ) .","f120d0fa":"# Task 2\n## Given:\nShips DB, \nparticipated in WWII. \n( entities | records | Db rows ) Relations:\n---\n- `Classes ( class, type, country, numGuns, bore, displacement )`\n- `Ships ( name, class, launched )`\n- `Battles ( name, date )`\n- `Outcomes ( ship, battle, result )`\n\nShips in `Classes`  \nare build by same project scheme,  \n`Class` assigned with  \neither  \nname of first ship builded in the given | current project,  \nor  \nthe name of project,  \nthat not match  \nany existed ship name in DB .  \n\nShip, whose name was given to `Class`,  \nbecame main .  \n[List_of_battlecruisers](https:\/\/en.wikipedia.org\/wiki\/List_of_battlecruisers)  \n\n### Classes relation | record consist of:  \n- class name, \n- type (\n 0: `bb` for a battle ship  \n or  \n 1: `bc` for a battle cruiser  \n), \n- country of origin, where ship was build \n- the number of the main battery guns \n- guns caliber (  \nthe specified nominal internal diameter  \nof the gun barrel bore   \nmeasured in inches  \n) \n- ship displacement at full combat load ( weight ton )  \n\n### Ships relation | record consist of:  \n- name of ship, \n- ship's class name \n- the year the ship was commissioned  \n\n### Battles relation | record consist of:  \n- name | description  \n- battle date ( when it happens )  \nwhich ships fighted  \n\n### Outcomes relation | record consist of:  \n- fight outcome for ship in battle  \n(  \n 0: `sunk`,  \n 1: `damaged`  \n 2: `OK`  \n)\n\n>Notes:  \n1) Outcomes relation | record  \nmight include | have ships,  \nthose are not in Ships .  \n2) Sunked ship  \ndid not participated in next | further battles .\n\nGoal: \n===\nFor each ship,  \nthat is not in Outcomes table,  \nlist battles  \nseparated by commas  \nin chronological order,  \nwhere this ship cannot have being participating ( not attending ) .  \nIf there are no such battles,  \noutput `NULL`.  \n\n>Note that:  \nConsider,  \nthat ship might participate | attend battles,  \nin the same year of ship commencing | building .\n\n### Output: \n- ship name \n- list of battles","26235d1d":"### @toDo: make a better generated data sample with more than one item to process\nreplace current dataset for kernel\nor even better - generate a new one in a spreadsheet .","24fe6458":"[Naval_history_of_World_War_II](https:\/\/en.wikipedia.org\/wiki\/Naval_history_of_World_War_II)","d67e0a69":"- [List of battleships of World War II](https:\/\/en.wikipedia.org\/wiki\/List_of_battleships_of_World_War_II)\n- [List of battlecruisers](https:\/\/en.wikipedia.org\/wiki\/List_of_battlecruisers)","03ffd15f":"### @Done: \n- save all dfs to `csv` files, \n- add them to `dataset` from `Output`\n- add resulting `dataset` with `+Add Data` ( available when kernel is public )\n  to `Workspace` input folder\n- (re)read stored data to dfs in new sells ( to skip rerunning data generating scripts )  \n\n>Note:  \nadded data from `dataset` is easy to remove and inspect in(side) Notebook\nbut files from `Output` is something completely different and incomprehensible .","46a6e8ab":"[List of ships of World War II](https:\/\/en.wikipedia.org\/wiki\/List_of_ships_of_World_War_II)","20786c0f":"### @toDo: \n- get all ships  \nthat was not in battles ( not in `outcomes` )  \n? with default status for not fighted as `OK` ?  \n~~- group them by latest outcome status ?  \nor just eliminate 'SUNK'ed~~\n- for each remaining non `SUNK`ed ship  \n  * list battles before it was launched"}}