{"cell_type":{"ec706e84":"code","34a140eb":"code","ceaed341":"code","a83d7910":"code","618e28ac":"code","f4f43906":"code","a5b9b968":"code","d7bc431a":"code","c85b64bc":"code","ed9de4db":"code","ab40c3d1":"markdown","c30f775a":"markdown","c32c86f3":"markdown","6f8ccbc4":"markdown","2cbf58ea":"markdown","59e87358":"markdown","69f939c3":"markdown","af3b1e9e":"markdown"},"source":{"ec706e84":"from learntools.core import binder\nbinder.bind(globals())\nfrom learntools.data_cleaning.ex2 import *\nprint(\"Setup Complete\")","34a140eb":"# modules we'll use\nimport pandas as pd\nimport numpy as np\n\n# for Box-Cox Transformation\nfrom scipy import stats\n\n# for min_max scaling\nfrom mlxtend.preprocessing import minmax_scaling\n\n# plotting modules\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# read in all our data\nkickstarters_2017 = pd.read_csv(\"..\/input\/kickstarter-projects\/ks-projects-201801.csv\")\n\n# set seed for reproducibility\nnp.random.seed(0)","ceaed341":"kickstarters_2017.head(3)","a83d7910":"# select the usd_goal_real column\noriginal_data = pd.DataFrame(kickstarters_2017.usd_goal_real)\n\n# scale the goals from 0 to 1\nscaled_data = minmax_scaling(original_data, columns=['usd_goal_real'])\n\n# plot the original & scaled data together to compare\nfig, ax=plt.subplots(1,2,figsize=(15,3))\nsns.distplot(kickstarters_2017.usd_goal_real, ax=ax[0])\nax[0].set_title(\"goal\")\nsns.distplot(scaled_data, ax=ax[1])\nax[1].set_title(\"usd_pledged_real\")","618e28ac":"print('Original data\\nPreview:\\n', original_data.head())\nprint('Minimum value:', float(original_data.min()),\n      '\\nMaximum value:', float(original_data.max()))\nprint('_'*30)\n\nprint('\\nScaled data\\nPreview:\\n', scaled_data.head())\nprint('Minimum value:', float(scaled_data.min()),\n      '\\nMaximum value:', float(scaled_data.max()))","f4f43906":"# select the usd_goal_real column\noriginal_goal_data = pd.DataFrame(kickstarters_2017.goal)","a5b9b968":"\noriginal_data = np.random.exponential(size=1000)\n\n\nscaled_data = minmax_scaling(original_data, columns=[0])\n\n\nfig, ax = plt.subplots(1,2)\nsns.distplot(original_data, ax=ax[0])\nax[0].set_title(\"goal\")\nsns.distplot(scaled_data, ax=ax[1])\nax[1].set_title(\"ID\")","d7bc431a":"# Lines below will give you a hint or solution code\n#q1.hint()\n#q1.solution()","c85b64bc":"# get the index of all positive pledges (Box-Cox only takes positive values)\nindex_of_positive_pledges = kickstarters_2017.usd_pledged_real > 0\n\n# get only positive pledges (using their indexes)\npositive_pledges = kickstarters_2017.usd_pledged_real.loc[index_of_positive_pledges]\n\n# normalize the pledges (w\/ Box-Cox)\nnormalized_pledges = pd.Series(stats.boxcox(positive_pledges)[0], \n                               name='usd_pledged_real', index=positive_pledges.index)\n\n# plot both together to compare\nfig, ax=plt.subplots(1,2,figsize=(15,3))\nsns.distplot(positive_pledges, ax=ax[0])\nax[0].set_title(\"goal\")\nsns.distplot(normalized_pledges, ax=ax[1])\nax[1].set_title(\"Normalized data\")","ed9de4db":"print('Original data\\nPreview:\\n', positive_pledges.head())\nprint('Minimum value:', float(positive_pledges.min()),\n      '\\nMaximum value:', float(positive_pledges.max()))\nprint('_'*30)\n\nprint('\\nNormalized data\\nPreview:\\n', normalized_pledges.head())\nprint('Minimum value:', float(normalized_pledges.min()),\n      '\\nMaximum value:', float(normalized_pledges.max()))","ab40c3d1":"# 2) Practice normalization\n\nNow you'll practice normalization. We begin by normalizing the amount of money pledged to each campaign.","c30f775a":"After scaling, all values lie between 0 and 1 (you can read this in the horizontal axis of the second plot above, and we verify in the code cell below).","c32c86f3":"**This notebook is an exercise in the [Data Cleaning](https:\/\/www.kaggle.com\/learn\/data-cleaning) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/alexisbcook\/scaling-and-normalization).**\n\n---\n","6f8ccbc4":"Use `original_goal_data` to create a new DataFrame `scaled_goal_data` with values scaled between 0 and 1. You must use the `minimax_scaling()` function.","2cbf58ea":"It's not perfect (it looks like a lot pledges got very few pledges) but it is much closer to a normal distribution!","59e87358":"Let's start by scaling the goals of each campaign, which is how much money they were asking for.  The plots show a histogram of the values in the \"usd_goal_real\" column, both before and after scaling.  ","69f939c3":"# 1) Practice scaling\n\nWe just scaled the \"usd_goal_real\" column. What about the \"goal\" column?\n\nBegin by running the code cell below to create a DataFrame `original_goal_data` containing the \"goal\" column.","af3b1e9e":"# Get our environment set up\n\nTo practice scaling and normalization, we're going to use a [dataset of Kickstarter campaigns](https:\/\/www.kaggle.com\/kemical\/kickstarter-projects). (Kickstarter is a website where people can ask people to invest in various projects and concept products.)\n\nThe next code cell loads in the libraries and dataset we'll be using. "}}