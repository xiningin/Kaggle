{"cell_type":{"aeb49714":"code","52186a0a":"code","d11c92db":"code","4e585342":"code","a828ddad":"code","b0c15849":"code","38ba980a":"code","798fd51b":"code","b24441cf":"code","1e88dfb8":"code","787e6850":"code","70e292c0":"code","b6dfa77a":"code","bb9e1a38":"code","ecc79895":"code","b181e98c":"markdown","e7c92d5f":"markdown","9e14c2ba":"markdown","8f771777":"markdown","abd1d312":"markdown","98482276":"markdown","6175d51c":"markdown","8e7a4b2f":"markdown"},"source":{"aeb49714":"import numpy as np\nimport pandas as pd\nimport lightgbm as lgb","52186a0a":"INPUT_DIR = \"..\/input\/uec2021-exercise-3\/\"\nOUTPUT_DIR = \".\/\"","d11c92db":"df = pd.read_csv(INPUT_DIR + \"train_sales.csv\")\ndf_test = pd.read_csv(INPUT_DIR + \"test_sales.csv\")\n\ndf_all = pd.concat([df, df_test], sort=False, ignore_index=True)\ndf_all[\"IsHoliday\"] = df_all[\"IsHoliday\"].astype(int)","4e585342":"df_stores = pd.read_csv(INPUT_DIR + \"stores.csv\")\ndf_stores[\"Type\"] = df_stores[\"Type\"].astype(\"category\")\ndf_all = pd.merge(df_all, df_stores, on=\"Store\", how=\"left\")","a828ddad":"df_features = pd.read_csv(INPUT_DIR + \"features.csv\")\ndf_features.drop(\"IsHoliday\", axis=1, inplace=True)","b0c15849":"md_cols = [f\"MarkDown{i+1}\" for i in range(5)]\n\n# MarkDown\u4ee5\u5916\u306fDate\u6bce\u306b\u96c6\u7d04\u3057\u5e73\u5747\u3092\u53d6\u308b\ndf_agg = df_features.drop([\"Store\"] + md_cols, axis=1).groupby(\"Date\", as_index=False).mean()\ndf_all = pd.merge(df_all, df_agg, on=\"Date\", how=\"left\")\n\n# MarkDown\u306f\u305d\u306e\u307e\u307e\u7d50\u5408\ndf_all = pd.merge(df_all, df_features[[\"Store\", \"Date\"] + md_cols], on=[\"Store\", \"Date\"], how=\"left\")","38ba980a":"# \u65e5\u4ed8\u306e\u98db\u3073\u3092\u57cb\u3081\u308b\u305f\u3081\u306e\u51e6\u7406\ndf_tmp = pd.merge(df_all[[\"Date\"]].drop_duplicates(), df_all[[\"Store\", \"Dept\"]].drop_duplicates(), how=\"cross\")\ndf_tmp.sort_values([\"Store\", \"Dept\", \"Date\"], inplace=True)\ndf_all = pd.merge(df_tmp, df_all, how=\"left\")","798fd51b":"# lag 1-100\nfor i in range(100):\n    df_all[f\"Sales_b{i+1}w\"] = df_all.groupby([\"Store\", \"Dept\"])[\"Weekly_Sales\"].shift(i+1)","b24441cf":"# \u5143\u306e\u30c7\u30fc\u30bf\u306b\u5b58\u5728\u3059\u308b\u65e5\u4ed8\u306e\u30c7\u30fc\u30bf\u306e\u307f\u3092\u6b8b\u3059\ndf_all.dropna(subset=[\"id\"], inplace=True)\ndf_all[\"id\"] = df_all[\"id\"].astype(int)","1e88dfb8":"df = df_all.query(\"'2011-01-01' <= Date <= '2012-03-30'\").reset_index(drop=True)\ndf_test = df_all.query(\"Date >= '2012-04-06'\").reset_index(drop=True)\nprint(len(df), len(df_test))","787e6850":"params = {\n    \"objective\": \"regression\",\n    \"metric\": \"rmse\",\n    \"verbosity\": -1,\n    \"learning_rate\": 0.05,\n    \"num_leaves\": 512,\n    \"feature_fraction_bynode\": 0.1\n}","70e292c0":"X = df.drop([\"id\", \"Date\", \"Weekly_Sales\"], axis=1)\ny = df[\"Weekly_Sales\"]\n\nn_seeds = 3\nnum_boost_round = 300\nearly_stopping_rounds = 100\n\nscore = 0\nbest_iteration = 0\n\n# pattern 1\nidx_train = np.where((\"2012-01-01\" <= df[\"Date\"]) | (df[\"Date\"] < \"2011-04-01\"))[0].tolist()\nidx_valid = np.where((\"2011-08-01\" <= df[\"Date\"]) & (df[\"Date\"] < \"2011-11-01\"))[0].tolist()\n\nX_train = X.iloc[idx_train, :].copy()\nX_valid = X.iloc[idx_valid, :].copy()\ny_train = y.iloc[idx_train]\ny_valid = y.iloc[idx_valid]\n\nlgb_train = lgb.Dataset(X_train, np.log1p(y_train.clip(lower=0)))\nlgb_valid = lgb.Dataset(X_valid, np.log1p(y_valid.clip(lower=0)))\n\nfor seed in range(n_seeds):\n    params[\"seed\"] = seed\n    model = lgb.train(\n        params,\n        lgb_train,\n        valid_sets=[lgb_train, lgb_valid],\n        valid_names=[\"train\", \"valid\"],\n        num_boost_round=num_boost_round,\n        early_stopping_rounds=early_stopping_rounds,\n        verbose_eval=0\n     )\n    preds_valid = np.expm1(model.predict(X_valid))\n    rmse = np.mean((y_valid - preds_valid)**2)**0.5\n    score += rmse \/ 2 \/ n_seeds\n    best_iteration += model.best_iteration \/ 2 \/ n_seeds\n    print(f\"1-{seed}: {rmse}\")\n\n# pattern 2\nidx_train = np.where(df[\"Date\"] < \"2011-11-01\")[0].tolist()\nidx_valid = np.where(\"2012-01-01\" <= df[\"Date\"])[0].tolist()\n\nX_train = X.iloc[idx_train, :].copy()\nX_valid = X.iloc[idx_valid, :].copy()\ny_train = y.iloc[idx_train]\ny_valid = y.iloc[idx_valid]\n\nlgb_train = lgb.Dataset(X_train, np.log1p(y_train.clip(lower=0)))\nlgb_valid = lgb.Dataset(X_valid, np.log1p(y_valid.clip(lower=0)))\n\nfor seed in range(n_seeds):\n    params[\"seed\"] = seed\n    model = lgb.train(\n        params,\n        lgb_train,\n        valid_sets=[lgb_train, lgb_valid],\n        valid_names=[\"train\", \"valid\"],\n        num_boost_round=num_boost_round,\n        early_stopping_rounds=early_stopping_rounds,\n        verbose_eval=0\n     )\n    preds_valid = np.expm1(model.predict(X_valid))\n    rmse = np.mean((y_valid - preds_valid)**2)**0.5\n    score += rmse \/ 2 \/ n_seeds\n    best_iteration += model.best_iteration \/ 2 \/ n_seeds\n    print(f\"2-{seed}: {rmse}\")\n\nprint(\"avg.\", score, best_iteration)","b6dfa77a":"dates_test = df_test[\"Date\"].unique().tolist()","bb9e1a38":"n_seeds = 1\nnum_boost_round = 150\n\npreds_test = np.zeros(len(df_test))\nfor i, date in enumerate(dates_test):\n    print(i, date)\n    \n    drop_vars = [f\"Sales_b{i+1}w\" for i in range(i)]\n    \n    X = df.drop([\"id\", \"Date\", \"Weekly_Sales\"] + drop_vars, axis=1)\n    y = df[\"Weekly_Sales\"]\n    \n    idx_test = np.where(df_test[\"Date\"] == date)[0].tolist()\n    X_test = df_test.iloc[idx_test, :][X.columns]\n    \n    lgb_train = lgb.Dataset(X, np.log1p(y.clip(lower=0)))\n    \n    for seed in range(n_seeds):\n        params[\"seed\"] = seed\n        model = lgb.train(\n            params,\n            lgb_train,\n            num_boost_round=num_boost_round\n         )\n        preds_test[idx_test] += np.expm1(model.predict(X_test))","ecc79895":"df_sub = df_test[[\"id\"]].copy()\ndf_sub[\"pred\"] = preds_test\ndf_sub.to_csv(OUTPUT_DIR + \"submission.csv\", index=False)","b181e98c":"### stores","e7c92d5f":"### Lag\u7279\u5fb4\u91cf\u751f\u6210","9e14c2ba":"## LightGBM","8f771777":"### prediction","abd1d312":"## Data Preparation","98482276":"### validation (only next week)","6175d51c":"### features","8e7a4b2f":"### train, test\u518d\u5206\u5272"}}