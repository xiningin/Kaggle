{"cell_type":{"4eb5ac8a":"code","fa9bbfcf":"code","dddb4054":"code","92ba7261":"code","c9f3e4a6":"code","a8733889":"code","afe64831":"code","8f899319":"code","5419b9bd":"code","228a0fac":"code","48220cb3":"code","37969dbb":"code","58ba3e1a":"code","50a52b70":"code","13274dc7":"code","fc00edb3":"markdown","41f76e73":"markdown","ebaa84ce":"markdown","345c9570":"markdown","b43bc82c":"markdown","2c738c8a":"markdown","95e65901":"markdown","f3dcd0d7":"markdown","5853ab30":"markdown","5a9f0379":"markdown","163428dc":"markdown","5aaf5d2e":"markdown","63f9f56a":"markdown","eb90c06e":"markdown"},"source":{"4eb5ac8a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa9bbfcf":"#We are using the pandas library to read data that are in csv format.\ndata = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')","dddb4054":"# head() function shows us the first 5 data rows that are in our dataset.\ndata.head(10) # it shows 10 rows ","92ba7261":"# We can check column names with 'columns' function\ndata.columns = ['SNo','ObservationDate', 'State', 'Country', 'Last_Update', 'Confirmed', 'Deaths','Recovered'] # We changed column names for easy use.\ndata.columns","c9f3e4a6":"#we are using this type of plots for correlations.\nf,ax = plt.subplots(figsize  = (12,12))\nsns.heatmap(data.corr(), annot = True, linewidth = .5, fmt = '.1f', ax = ax) #annot = writes the correlation stat inside a cell.\n#ax = matplotlib Axes\n# fmt = number of digits after '.'\n#for more info visit --> https:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html\nplt.show()","a8733889":"#Confirmed cases and deaths.\ndata.Confirmed.plot(kind = 'line', color = 'cyan', label = 'Confirmed', linewidth = 1, alpha = .5, grid = True, linestyle = '--')\ndata.Deaths.plot(color = 'red', label = 'Deaths', linewidth = 1, alpha = .5, grid = True, linestyle = ':')\nplt.legend(loc = 'upper left')\nplt.xlabel('X') \nplt.ylabel('Y')\nplt.title('Covid19 Dataset Line Plot')\nplt.show()","afe64831":"#Countries that have more than 10.000 deaths because of Covid19.\ndangerous_countries = data['Deaths'] > 10000 # filtering our data.\ndata[dangerous_countries].plot(kind = 'scatter', x = 'Country', y = 'Deaths', alpha = .5, color = 'red', figsize = (15,10))\nplt.xlabel('Country')\nplt.ylabel('Deaths')\nplt.title('Covid19 Dataset Scatter Plot')","8f899319":"#\nunited_kingdom_data = data['Country'] == 'UK' #filtering our data.\ndata[united_kingdom_data].Recovered.plot(kind = 'hist', bins=100, figsize = (20,15))\nplt.xlabel('Recovery')\nplt.ylabel('Frequency')\nplt.title('Covid19 Dataset Histogram Plot about UK')\nplt.show()","5419b9bd":"#We can read data that are in csv format as we did before.\n###data = pd.read_csv('.....\/datapath')","228a0fac":"series = data['Deaths']        # data['Deaths'] = series\nprint(type(series))\ndata_frame = data[['Deaths']]  # data[['Deaths']] = data frame\nprint(type(data_frame))","48220cb3":"#Let's see Turkey's data about Covid19 with filtering.\nturkey_data = data['Country'] == 'Turkey'\ndata[turkey_data].head(20)","37969dbb":"#We can use logical_and \/\/ logigal_or functions which comes from numpy library.\n#Let's see which countries have more than 100.000 confirmed case and over 30.000 dead.\ndangerous = np.logical_and(data['Confirmed'] > 100000, data['Deaths'] > 30000)\ndata[dangerous]\n#We can do this operation with bitwise operators like --> data[(data['Confirmed']>100000) & (data['Deaths']>30000)] ","58ba3e1a":"#For Loop\n#Let's say we have list which includes random numbers and we are trying to find them.\nlist = [13,85,97]\n\nfor i in list :\n    print('I find number in the list: ',i) \n","50a52b70":"#While Loop\n#Let's say we are trying to make countdown.\ni = 10\n\nprint('The Big Countdown')\n\nwhile i != 0 :\n    print('Last', i ,\"Second!\")\n    i -= 1\nprint('Happy New Year!!!')    \n","13274dc7":"#Let's make one more exercise about loops with using dictionary.\n\ndictionary = {'apple':'red','banana':'yellow', 'cucumber':'green'}\nprint('Fruit  - Color')\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n","fc00edb3":"<h2>Pandas<h2>","41f76e73":"Some properties about plots.\n* figsize() = resize plot\n* kind = it refers to our plot type.\n* alpha = it changes opacity\n* grid = makes grids visible\n* label = write label name which you want to use\n* linestyle = helps to show your data with different marks","ebaa84ce":"<h2>Heatmap<h2>","345c9570":"Let's visualize our data.\n1. Heatmap\n2. Line Plot\n3. Scatter Plot\n4. Histogram Plot\n","b43bc82c":"<h2>While and For Loops<h2>","2c738c8a":"<h2>Line Plot<h2>","95e65901":"<h2>Scatter Plot<h2>","f3dcd0d7":"We should know comparison and logical operators before we start.\n\n1. Comparison Operators:\n    * '==' --> Means equal\n    * '<' --> Means smaller\n    * '>' --> Means bigger\n    * '<=' , '>='  --> Means equals or smaller ,equals or bigger \n    * '!=' --> Means not equal\n2. Logical Operators:\n    * and --> Bitwise(&) --> True if both the operands are true\n    * or --> Bitwise(|) -->\tTrue if either of the operands is true\n","5853ab30":"Let's do some exercises with loops for remember how they works.","5a9f0379":"<h3>Filtering Data<h3>\n","163428dc":"We can use datas in two ways:\n* Series\n* Data Frames","5aaf5d2e":"<h1>Matplotlib<h1>","63f9f56a":"<h2>Histogram Plot<h2>","eb90c06e":"<h1>Covid19 Dataset<h1>\n    \n<h3>This notebook has been created for learning and searching purposes.<h3>"}}