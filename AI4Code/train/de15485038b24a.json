{"cell_type":{"fd2f71a3":"code","82eb1eaf":"code","032b1275":"code","551dee7e":"code","6184d1df":"code","c9503917":"code","729448eb":"code","bd33dc21":"code","6f261cc1":"code","f0451f83":"code","b4335802":"code","2afe89d2":"code","0f7ec88b":"code","102c673d":"code","dd021309":"code","d30a49e4":"code","afc38390":"code","63a805a2":"code","23b0e4e2":"code","9741edc2":"code","e6cecb0d":"code","f736e0f4":"code","2ad08a9a":"code","da32376e":"code","96703ee7":"code","f54d0103":"code","b7a6d513":"code","175d5d33":"code","3ef3fbfc":"code","70140f97":"code","461eee7e":"code","7cc3ff78":"code","798aa0f5":"code","9c421c61":"code","8be29df1":"code","d3c4b117":"code","fb78b59e":"code","98696638":"code","5ae582e0":"code","c07400a7":"code","036ace78":"code","15009091":"code","bb52474c":"code","86231614":"code","ea012a8d":"code","f9fa12c0":"code","d96960eb":"code","6815739d":"code","ee025980":"code","20f3e1f1":"code","3bc65a86":"code","8460ef59":"code","8e8fe51c":"code","34f5f37e":"code","600afc9e":"code","47ed8cb8":"code","2007331a":"code","ce29fede":"code","276d5a4a":"markdown","f019d44d":"markdown","eddbd0b9":"markdown","8b473e38":"markdown","daeb5d81":"markdown"},"source":{"fd2f71a3":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport os\nimport glob","82eb1eaf":"df = pd.read_csv('..\/input\/cancer\/clinical_data.csv')\ndfy_train = pd.read_csv('..\/input\/y-train\/output_VSVxRFU.csv')\nradiomics = pd.read_csv('..\/input\/radiomic\/radiomics.csv')\nX_test = pd.read_csv('..\/input\/x-test\/radiomics.csv')","032b1275":"df = df.drop(['SourceDataset','PatientID'],axis=1)\ndf","551dee7e":"df=df.replace('Adenocarcinoma',0)\ndf=df.replace('adenocarcinoma',0)\ndf=df.replace('large cell',1)\ndf=df.replace('squamous cell carcinoma',2)\ndf=df.replace('Squamous cell carcinoma',2)\ndf=df.replace('nos',3)\ndf=df.replace('NSCLC NOS (not otherwise specified)',3)","6184d1df":"dfy_train = dfy_train.drop(['PatientID'],axis=1)\ndfy_train","c9503917":"from sklearn.model_selection import train_test_split","729448eb":"radiomics = radiomics.drop(range(2),axis=0)\nradiomics = radiomics.drop(['Unnamed: 0'],axis=1)","bd33dc21":"X_train1, X_test1, y_train1, y_test1 = train_test_split(radiomics, dfy_train, test_size=0.2, random_state=1)","6f261cc1":"from sklearn import ensemble\nrf = ensemble.RandomForestRegressor()\nrf.fit(X_train1, y_train1)\ny_rf1 = rf.predict(X_test1)","f0451f83":"y_rf1 = pd.DataFrame(y_rf1)\ny_rf1 = y_rf1.drop(1, axis=1)\ny_test1 = y_test1.drop(['Event'],axis=1)","b4335802":"y_rf1 = np.array(y_rf1)\ny_test1 = np.array(y_test1)","2afe89d2":"n=0\nfor i in range(len(y_rf1)):\n    if y_test1[i]*0.9<y_rf1[i]<y_test1[i]*1.1:\n        n+=1\nprint(n\/len(y_rf1))","0f7ec88b":"df = df.fillna(method='pad')","102c673d":"df","dd021309":"X_train, X_test, y_train, y_test = train_test_split(df, dfy_train, test_size=0.2, random_state=1)","d30a49e4":"rf = ensemble.RandomForestRegressor()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)","afc38390":"y_rf = pd.DataFrame(y_rf)\ny_rf = y_rf.drop(1, axis=1)\ny_test = y_test.drop(['Event'],axis=1)","63a805a2":"y_rf = np.array(y_rf)\ny_test = np.array(y_test)","23b0e4e2":"n=0\nfor i in range(len(y_rf)):\n    if y_test[i]*0.9<y_rf[i]<y_test[i]*1.1:\n        n+=1\nprint(n\/len(y_rf))","9741edc2":"def tri(y_test,y_rf):\n    y_val=list(y_test)\n    y_pred=list(y_rf)\n    n=len(y_val)\n    for i in range(1,n):\n        for j in range(i):\n            if y_val[i]<y_val[j]:\n                y_val[i],y_val[j]=y_val[j],y_val[i]\n                y_pred[i],y_pred[j]=y_pred[j],y_pred[i]\n    return y_val,y_pred","e6cecb0d":"y_val1,y_pred1=tri(y_test1,y_rf1)","f736e0f4":"y_09=[]\ny_11=[]\nfor i in y_val1:\n    y_09.append(0.9*i)\n    y_11.append(1.1*i)","2ad08a9a":"plt.figure(figsize=(12,12))\nx=np.arange(0,60)\nplt.plot(x,y_val1,'b+-',label='Validation')\nplt.plot(x,y_pred1,'r+-',label='Pr\u00e9diction')\nplt.plot(x,y_09,color='green',label=\"Marge d'erreur\")\nplt.plot(x,y_11,color='green')\nplt.legend(loc='best')","da32376e":"y_val,y_pred=tri(y_test,y_rf)","96703ee7":"y_09=[]\ny_11=[]\nfor i in y_val:\n    y_09.append(0.9*i)\n    y_11.append(1.1*i)","f54d0103":"plt.figure(figsize=(12,12))\nx=np.arange(0,60)\nplt.plot(x,y_val,'b+-',label='Validation')\nplt.plot(x,y_pred,'r+-',label='Pr\u00e9diction')\nplt.plot(x,y_09,color='green',label=\"Marge d'erreur\")\nplt.plot(x,y_11,color='green')\nplt.legend(loc='best')","b7a6d513":"radiomics.reset_index(drop = True, inplace = True)","175d5d33":"ndf=pd.concat([df,radiomics],axis=1)","3ef3fbfc":"ndf","70140f97":"X_ntrain, X_ntest, y_ntrain, y_ntest = train_test_split(ndf, dfy_train, test_size=0.2, random_state=1)","461eee7e":"rf = ensemble.RandomForestRegressor()\nrf.fit(X_ntrain, y_ntrain)\ny_nrf = rf.predict(X_ntest)","7cc3ff78":"y_nrf = pd.DataFrame(y_nrf)\ny_nrf = y_nrf.drop(1, axis=1)\ny_ntest = y_ntest.drop(['Event'],axis=1)","798aa0f5":"y_nrf = np.array(y_nrf)\ny_ntest = np.array(y_ntest)","9c421c61":"n=0\nfor i in range(len(y_nrf)):\n    if y_ntest[i]*0.9<y_nrf[i]<y_ntest[i]*1.1:\n        n+=1\nprint(n\/len(y_nrf))","8be29df1":"y_nval,y_npred=tri(y_ntest,y_nrf)","d3c4b117":"y_n09=[]\ny_n11=[]\nfor i in y_nval:\n    y_n09.append(0.9*i)\n    y_n11.append(1.1*i)","fb78b59e":"plt.figure(figsize=(12,12))\nx=np.arange(0,60)\nplt.plot(x,y_nval,'b+-',label='Validation')\nplt.plot(x,y_npred,'r+-',label='Pr\u00e9diction')\nplt.plot(x,y_n09,color='green',label=\"Marge d'erreur\")\nplt.plot(x,y_n11,color='green')\nplt.legend(loc='best')","98696638":"pip install lifelines","5ae582e0":"from lifelines import CoxPHFitter","c07400a7":"dfreg = pd.concat([df,dfy_train],axis=1)","036ace78":"dfreg","15009091":"df_dummy = pd.get_dummies(dfreg, drop_first=True)\ndf_dummy.head()","bb52474c":"# Using Cox Proportional Hazards model\ncph = CoxPHFitter()   ## Instantiate the class to create a cph object\ncph.fit(df_dummy, 'SurvivalTime', event_col='Event')   ## Fit the data to train the model\ncph.print_summary()    ## HAve a look at the significance of the features","86231614":"cph.plot()","ea012a8d":"tr_rows = df_dummy.iloc[0:15,:6]","f9fa12c0":"cph.predict_survival_function(tr_rows).plot()","d96960eb":"tr_rows1 = df_dummy.iloc[0:,:6]\nresult = cph.predict_survival_function(tr_rows1)\nresult","6815739d":"predict = [[0,0] for i in range(300)]","ee025980":"for i in range(300):\n    val1 = result[result[i]<=0.6].index.values\n    val2 = result[result[i]<=0.4].index.values\n    if len(val1)>0:\n        predict[i][0]=val1[0]\n        if len(val2)>0:\n            predict[i][1]=val2[0]\n        else : \n            predict[i][1]=3500\n    else :\n        predict[i][0],predict[i][1]=3500,3500\n            ","20f3e1f1":"predict","3bc65a86":"compteur=0\nfor i in range(300):\n    val = dfy_train.loc[i,'SurvivalTime']\n    if predict[i][0]<val<predict[i][1]:\n        compteur+=1\nprint(compteur\/300)    ","8460ef59":"graph1,graph2,y=[],[],[]\nfor i in range(300):\n    graph1.append(predict[i][0])\n    graph2.append(predict[i][1])\n    y.append(dfy_train.loc[i,'SurvivalTime'])","8e8fe51c":"def tri2(y_valid,y_pred1,y_pred2):\n    y_val=list(y_valid)\n    y_pre1=list(y_pred1)\n    y_pre2=list(y_pred2)\n    n=len(y_val)\n    for i in range(1,n):\n        for j in range(i):\n            if y_val[i]<y_val[j]:\n                y_val[i],y_val[j]=y_val[j],y_val[i]\n                y_pre1[i],y_pre1[j]=y_pre1[j],y_pre1[i]\n                y_pre2[i],y_pre2[j]=y_pre2[j],y_pre2[i]\n    return y_val,y_pre1,y_pre2","34f5f37e":"y1,g1,g2=tri2(y,graph1,graph2)","600afc9e":"plt.figure(figsize=(12,12))\nx=np.arange(0,300)\nplt.plot(x,y1,'b+-',label='Validation')\nplt.plot(x,g1,'r+-',label='Pr\u00e9diction')\nplt.plot(x,g2,'r+-')\nplt.legend(loc='best')","47ed8cb8":"result.loc[:,82]","2007331a":"dfy_train[dfy_train['SurvivalTime']<25].index.values","ce29fede":"predict[82]","276d5a4a":"# Utilisation du model cox_PH avec clinical_data","f019d44d":"# Test en divisant X_train sur radiomics","eddbd0b9":"# Utilisation des 2 tableaux en m\u00eame temps","8b473e38":"# Repr\u00e9sentation graphique des deux m\u00e9thodes","daeb5d81":"# Test en divisant X_train sur clinical_data"}}