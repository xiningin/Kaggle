{"cell_type":{"3878bf7f":"code","b0df08f9":"code","3e05a36d":"code","2ee5c1ac":"code","cc45d13e":"code","978bfc2a":"code","e2536877":"code","b5a8030f":"code","4be688e4":"code","3652e3e5":"code","4d898d7f":"code","4f5de60b":"code","238afbee":"code","e53999c6":"code","d5cbad85":"code","5d5c01f8":"code","4007a070":"code","c2616d31":"code","7b7914bf":"code","2befca1e":"code","735fc9ff":"code","8274abf2":"code","3e0ddcd2":"code","4dc982a2":"code","a98e2d7f":"code","b9d6df5f":"code","1321279d":"code","bc2eb354":"markdown","6e838630":"markdown","2d4d8072":"markdown","5570eb24":"markdown","73d2f6c5":"markdown","c008eda2":"markdown"},"source":{"3878bf7f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b0df08f9":"import seaborn as sns\nfrom sklearn.metrics import mean_squared_error,classification_report,f1_score,confusion_matrix\n\nimport xgboost as xgb\nimport lightgbm as lgb\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.model_selection import StratifiedKFold, cross_validate, learning_curve,train_test_split,GridSearchCV, cross_val_score, RandomizedSearchCV, RepeatedStratifiedKFold\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.neighbors import LocalOutlierFactor, KNeighborsClassifier\n\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")","3e05a36d":"df = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")\ndf.head()","2ee5c1ac":"df.shape","cc45d13e":"df.isnull().sum()","978bfc2a":"df.describe().T","e2536877":"df.info()","b5a8030f":"while True:\n    out_list = []\n    for i in range(len(df.columns)):\n        mean = df[df.columns[i]].mean()\n        std = df[df.columns[i]].std()\n\n        up_out = mean + (3*std)\n        down_out = mean - (3*std)\n\n        out_index = df[df[df.columns[i]]>up_out].index\n        down_index = df[df[df.columns[i]]<down_out].index\n        out_list.extend(out_index)\n        out_list.extend(down_index)\n    print(out_list)\n    if(len(out_list)!=0):\n        df.drop(out_list,axis=0,inplace=True)\n    else:\n        break","4be688e4":"log_model = LogisticRegression()\n\ngbc_model = GradientBoostingClassifier(random_state=14)\n\nrfc_model = RandomForestClassifier(criterion='gini', n_estimators=999,max_depth=4, random_state=14)\n\nlgb_model = lgb.LGBMClassifier(num_iterations=550, learning_rate=0.01055,max_depth=3, random_state=14)\n\nxgb_model = xgb.XGBClassifier(objective=\"binary:hinge\")\n\ngnb_model = GaussianNB()\n\nmlpc_model = MLPClassifier(random_state=14)\n\nsvc_model = SVC(probability=True)\n\nknn_model = KNeighborsClassifier(n_neighbors=19,leaf_size=20)","3652e3e5":"df.head(3)","4d898d7f":"models = [log_model, gbc_model, rfc_model, lgb_model, xgb_model, gnb_model, mlpc_model, svc_model,knn_model]\nmodel_names = [\"LogisticRegression\",\"GradientBoostingClassifier\",\"RandomForestClassifier\",\"LGBMClassifier\",\"XGBClassifier\",\"GaussianNB\",\"MLPClassifier\",\"SVC\",\"KNeighborsClassifier\"]\n\nx = df.drop('target', axis=1)\ny = df['target']\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25,stratify=y,random_state=42)","4f5de60b":"print(\"TEST SCORE\\n\\n\")\nprint(\"-----------------------------------------\")\nfor i in range(len(models)):\n    model = models[i].fit(x_train,y_train)\n    print(model_names[i],\"Score = %\",model.score(x_test,y_test))","238afbee":"print(\"F1 SCORE\\n\\n\")\nprint(\"-----------------------------------------\")\nfor i in range(len(models)):\n    model = models[i].fit(x_train,y_train)\n    print(model_names[i],\"F1 Score = %\",f1_score(y_test,model.predict(x_test))*100)","e53999c6":"light_params = {\"n_estimators\":[100,500,1000,2000],\n         \"subsample\":[0.6,0.8,1.0],\n         \"max_depth\":[3,4,5,6,7],\n         \"learning_rate\":[0.1,0.01,0.02,0.05],\n         \"min_child_samples\":[2,5,10,20]}","d5cbad85":"light_cv = GridSearchCV(lgb_model,light_params,cv=10,n_jobs=-1,verbose=2).fit(x_train,y_train)\nlight_cv.best_params_","5d5c01f8":"light_tuned = lgb.LGBMClassifier(n_estimators = 100,\n                         subsample= 0.6, \n                         max_depth=3 , \n                         learning_rate=0.02, \n                         min_child_samples= 20).fit(x_train,y_train)\nprint(\"LGBMClassifier\",\"Score = %\",light_tuned.score(x_test,y_test))\nprint(\"LGBMClassifier\",\"F1 Score = %\",f1_score(y_test,light_tuned.predict(x_test))*100)","4007a070":"knn_params = {\"n_neighbors\":np.arange(1,50),\n         \"leaf_size\":[20,30,50,100,1000,2000]}","c2616d31":"knn_cv = GridSearchCV(knn_model,knn_params,cv=10,n_jobs=-1,verbose=2).fit(x_train,y_train)\nknn_cv.best_params_","7b7914bf":"knn_tuned = KNeighborsClassifier(n_neighbors = 40, \n                                 leaf_size= 20).fit(x_train,y_train)\nprint(\"KNeighborsClassifier\",\"Score = %\",knn_tuned.score(x_test,y_test))\nprint(\"KNeighborsClassifier\",\"F1 Score = %\",f1_score(y_test,knn_tuned.predict(x_test))*100)","2befca1e":"mlpc_params = {\"alpha\":[0.1,0.2,0.02,0.01,0.005,0.0001,0.00001],\n         \"hidden_layer_sizes\":[(10,20,30),(10,10,10),(100,100,100),(100,100),(3,5),(5,3),(10,10)],\n         \"solver\":[\"lbfgs\",\"sgd\",\"adam\"],\n         \"activation\":[\"relu\",\"logistic\"]}","735fc9ff":"mlpc_cv = GridSearchCV(mlpc_model,mlpc_params,cv=10,n_jobs=-1,verbose=2).fit(x_train,y_train)\nmlpc_cv.best_params_","8274abf2":"mlpc_tuned = MLPClassifier(alpha = 0.01, \n                          hidden_layer_sizes= (100,100),\n                          solver=\"adam\" ,\n                          activation= \"logistic\").fit(x_train,y_train)\nprint(\"MLPClassifier\",\"Score = %\",mlpc_tuned.score(x_test,y_test))\nprint(\"MLPClassifier\",\"F1 Score = %\",f1_score(y_test,mlpc_tuned.predict(x_test))*100)","3e0ddcd2":"r_forest_params = {\"max_depth\":[2,3,5,8,10,20],\n         \"max_features\":[2,5,8],\n         \"n_estimators\":[10,100,500,1000,2000],\n         \"min_samples_split\":[2,5,10,20]}","4dc982a2":"rfc_cv = GridSearchCV(rfc_model,r_forest_params,cv=10,n_jobs=-1,verbose=2).fit(x_train,y_train)\nrfc_cv.best_params_","a98e2d7f":"rfc_tuned = RandomForestClassifier(n_estimators = 100, \n                          max_depth= 3,\n                          max_features= 2,\n                          min_samples_split= 2).fit(x_train,y_train)\nprint(\"RandomForestClassifier\",\"Score = %\",rfc_tuned.score(x_test,y_test))\nprint(\"RandomForestClassifier\",\"F1 Score = %\",f1_score(y_test,rfc_tuned.predict(x_test))*100)","b9d6df5f":"print(\"Tuned Scores\\n\\n\")\nprint(\"-----------------------------------------\")\nprint(\"LGBMClassifier\",\"Score = %\",light_tuned.score(x_test,y_test))\nprint(\"KNeighborsClassifier\",\"Score = %\",knn_tuned.score(x_test,y_test))\nprint(\"MLPClassifier\",\"Score = %\",mlpc_tuned.score(x_test,y_test))\nprint(\"RandomForestClassifier\",\"Score = %\",rfc_tuned.score(x_test,y_test))","1321279d":"print(\"Tuned F1 Scores\\n\\n\")\nprint(\"-----------------------------------------\")\nprint(\"LGBMClassifier\",\"F1 Score = %\",f1_score(y_test,light_tuned.predict(x_test))*100)\nprint(\"KNeighborsClassifier\",\"F1 Score = %\",f1_score(y_test,knn_tuned.predict(x_test))*100)\nprint(\"MLPClassifier\",\"F1 Score = %\",f1_score(y_test,mlpc_tuned.predict(x_test))*100)\nprint(\"RandomForestClassifier\",\"F1 Score = %\",f1_score(y_test,rfc_tuned.predict(x_test))*100)","bc2eb354":"## MLPClassifier","6e838630":"# Model Tuning","2d4d8072":"## LGBMClassifier","5570eb24":"## KNeighborsClassifier","73d2f6c5":"# Model","c008eda2":"## RandomForestClassifier"}}