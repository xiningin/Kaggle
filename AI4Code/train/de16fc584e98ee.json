{"cell_type":{"1e1226ab":"code","6b38961e":"code","0e9c12aa":"code","5f764e40":"code","fecc4835":"code","aaec44b4":"code","05aa4eba":"code","3044a2e2":"code","d805cca7":"code","3e136195":"code","d42aecce":"code","45280975":"code","7c794c91":"code","18acd41f":"code","5b5014f5":"code","fea8d82a":"code","a98dbc16":"code","e5b797ba":"code","b4ae8301":"code","7848ee13":"code","2f4dc228":"code","5431af33":"code","3b598ddf":"code","d27be416":"code","b9b06f2e":"code","58d62c15":"code","8416167d":"code","3f72ac69":"code","6a7a13e2":"code","fae0b3e8":"code","ba2f8038":"code","d49d69d9":"code","25bdf29f":"code","6e519a64":"code","e155bb8b":"code","c8559376":"code","1f5227ec":"code","adc0a051":"code","bdcde6b4":"code","d73ce1b9":"code","10059d8a":"code","8ecf5dee":"code","b932aca5":"code","8c417cf2":"markdown","86812890":"markdown","493de216":"markdown","a1b4cc01":"markdown","cd81a0b1":"markdown","2c594687":"markdown","b2867a96":"markdown","164f51fa":"markdown","1b94fca7":"markdown","8f759050":"markdown","5d9368b8":"markdown","22ef926f":"markdown","154cb618":"markdown","f1a10212":"markdown","3f5c38f7":"markdown","6b1fa4fe":"markdown","0f4c0762":"markdown","da3d41ee":"markdown","d8e5cba6":"markdown","232037c2":"markdown","b6142b86":"markdown","ddd410d3":"markdown","340404e1":"markdown","87d12e74":"markdown","e66ca4f3":"markdown","ba352ffb":"markdown","f6d5a3fa":"markdown","10f38f71":"markdown","59360a23":"markdown","2be4286c":"markdown","376b637f":"markdown","8d1d5d5e":"markdown","f653e47d":"markdown","99097cbe":"markdown","59775724":"markdown","361c22cc":"markdown","107a95b0":"markdown","f2cfd8d5":"markdown","8da6ac7c":"markdown","879d97f0":"markdown","485d7107":"markdown","c1e94fe2":"markdown","299e1bc6":"markdown","3fef15f4":"markdown","ef592dbd":"markdown","8d00478b":"markdown"},"source":{"1e1226ab":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_colwidth', -1)","6b38961e":"data = pd.read_csv('\/kaggle\/input\/airline-passenger-traffic\/airline-passenger-traffic(1).csv', header = None)\ndata.columns = ['Month','Passengers']\ndata['Month'] = pd.to_datetime(data['Month'], format='%Y-%m')\ndata = data.set_index('Month')\ndata.head(12)","0e9c12aa":"data.plot(figsize=(20, 5))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic')\nplt.show(block=False)","5f764e40":"data = data.assign(Passengers_Linear_Interpolation=data.Passengers.interpolate(method='linear'))\ndata[['Passengers_Linear_Interpolation']].plot(figsize=(20, 5))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic: Linear interpolation')\nplt.show(block=False)","fecc4835":"data['Passengers'] = data['Passengers_Linear_Interpolation']\ndata.drop(columns=['Passengers_Linear_Interpolation'],inplace=True)","aaec44b4":"import seaborn as sns\nfig = plt.subplots(figsize=(20, 5))\nax = sns.boxplot(x=data['Passengers'],whis=1.5)","05aa4eba":"fig = data.Passengers.hist(figsize = (20,5))","3044a2e2":"from pylab import rcParams\nimport statsmodels.api as sm\nrcParams['figure.figsize'] = 20, 10\ndecomposition = sm.tsa.seasonal_decompose(data.Passengers, model='additive') # additive seasonal index\nfig = decomposition.plot()\nplt.show()","d805cca7":"decomposition = sm.tsa.seasonal_decompose(data.Passengers, model='multiplicative') # multiplicative seasonal index\nfig = decomposition.plot()\nplt.show()","3e136195":"train_len = 120\ntrain = data[0:train_len] # first 120 months as training set\ntest = data[train_len:] # last 24 months as out-of-time test set","d42aecce":"data['Passengers'].plot(figsize=(20, 5))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic')\nplt.show(block=False)","45280975":"from statsmodels.tsa.stattools import adfuller\nadf_test = adfuller(data['Passengers'])\n\nprint('ADF Statistic: %f' % adf_test[0])\nprint('Critical Values @ 0.05: %.2f' % adf_test[4]['5%'])\nprint('p-value: %f' % adf_test[1])","7c794c91":"from statsmodels.tsa.stattools import kpss\nkpss_test = kpss(data['Passengers'])\n\nprint('KPSS Statistic: %f' % kpss_test[0])\nprint('Critical Values @ 0.05: %.2f' % kpss_test[3]['5%'])\nprint('p-value: %f' % kpss_test[1])","18acd41f":"from scipy.stats import boxcox\ndata_boxcox = pd.Series(boxcox(data['Passengers'], lmbda=0), index = data.index)\n\ndata['Passengers'].plot(figsize=(20, 5))\nplt.grid()\nplt.plot(data_boxcox, label='After Box Cox tranformation')\nplt.legend(loc='best')\nplt.title('After Box Cox transform')\nplt.show()","5b5014f5":"data_boxcox_diff = pd.Series(data_boxcox - data_boxcox.shift(), data.index)\nplt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(data_boxcox_diff, label='After Box Cox tranformation and differencing')\nplt.legend(loc='best')\nplt.title('After Box Cox transform and differencing')\nplt.show()","fea8d82a":"data_boxcox_diff.dropna(inplace=True)","a98dbc16":"data_boxcox_diff.tail()","e5b797ba":"adf_test = adfuller(data_boxcox_diff)\n\nprint('ADF Statistic: %f' % adf_test[0])\nprint('Critical Values @ 0.05: %.2f' % adf_test[4]['5%'])\nprint('p-value: %f' % adf_test[1])","b4ae8301":"kpss_test = kpss(data_boxcox_diff)\n\nprint('KPSS Statistic: %f' % kpss_test[0])\nprint('Critical Values @ 0.05: %.2f' % kpss_test[3]['5%'])\nprint('p-value: %f' % kpss_test[1])","7848ee13":"from statsmodels.graphics.tsaplots import plot_acf\nplt.figure(figsize=(20,5))\nplt.grid()\nplot_acf(data_boxcox_diff, ax=plt.gca(), lags = 30)\nplt.show()","2f4dc228":"from statsmodels.graphics.tsaplots import plot_pacf\nplt.figure(figsize=(20,5))\nplt.grid()\nplot_pacf(data_boxcox_diff, ax=plt.gca(), lags = 30)\nplt.show()","5431af33":"train_data_boxcox = data_boxcox[:train_len]\ntest_data_boxcox = data_boxcox[train_len:]\ntrain_data_boxcox_diff = data_boxcox_diff[:train_len-1]\ntest_data_boxcox_diff = data_boxcox_diff[train_len-1:]","3b598ddf":"train_data_boxcox_diff[:5]","d27be416":"from statsmodels.tsa.arima_model import ARIMA\nmodel = ARIMA(train_data_boxcox_diff, order=(1, 0, 0)) \nmodel_fit = model.fit()\nprint(model_fit.params)","b9b06f2e":"y_hat_ar = data_boxcox_diff.copy()\ny_hat_ar['ar_forecast_boxcox_diff'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_ar['ar_forecast_boxcox'] = y_hat_ar['ar_forecast_boxcox_diff'].cumsum()\ny_hat_ar['ar_forecast_boxcox'] = y_hat_ar['ar_forecast_boxcox'].add(data_boxcox[0])\ny_hat_ar['ar_forecast'] = np.exp(y_hat_ar['ar_forecast_boxcox'])","58d62c15":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_ar['ar_forecast'][test.index.min():], label='Auto regression forecast')\nplt.legend(loc='best')\nplt.title('Auto Regression Method')\nplt.show()","8416167d":"from sklearn.metrics import mean_squared_error\nrmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_ar['ar_forecast'][test.index.min():])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_ar['ar_forecast'][test.index.min():])\/test['Passengers'])*100,2)\n\nresults = pd.DataFrame({'Method':['Autoregressive (AR) method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","3f72ac69":"model = ARIMA(train_data_boxcox_diff, order=(0, 0, 1)) \nmodel_fit = model.fit()\nprint(model_fit.params)","6a7a13e2":"y_hat_ma = data_boxcox_diff.copy()\ny_hat_ma['ma_forecast_boxcox_diff'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_ma['ma_forecast_boxcox'] = y_hat_ma['ma_forecast_boxcox_diff'].cumsum()\ny_hat_ma['ma_forecast_boxcox'] = y_hat_ma['ma_forecast_boxcox'].add(data_boxcox[0])\ny_hat_ma['ma_forecast'] = np.exp(y_hat_ma['ma_forecast_boxcox'])","fae0b3e8":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(data['Passengers'][:train_len], label='Train')\nplt.plot(data['Passengers'][train_len:], label='Test')\nplt.plot(y_hat_ma['ma_forecast'][test.index.min():], label='Moving average forecast')\nplt.legend(loc='best')\nplt.title('Moving Average Method')\nplt.show()","ba2f8038":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_ma['ma_forecast'][test.index.min():])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_ma['ma_forecast'][test.index.min():])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Moving Average (MA) method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","d49d69d9":"model = ARIMA(train_data_boxcox_diff, order=(1, 0, 1))\nmodel_fit = model.fit()\nprint(model_fit.params)","25bdf29f":"y_hat_arma = data_boxcox_diff.copy()\ny_hat_arma['arma_forecast_boxcox_diff'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_arma['arma_forecast_boxcox'] = y_hat_arma['arma_forecast_boxcox_diff'].cumsum()\ny_hat_arma['arma_forecast_boxcox'] = y_hat_arma['arma_forecast_boxcox'].add(data_boxcox[0])\ny_hat_arma['arma_forecast'] = np.exp(y_hat_arma['arma_forecast_boxcox'])","6e519a64":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot( data['Passengers'][:train_len-1], label='Train')\nplt.plot(data['Passengers'][train_len-1:], label='Test')\nplt.plot(y_hat_arma['arma_forecast'][test.index.min():], label='ARMA forecast')\nplt.legend(loc='best')\nplt.title('ARMA Method')\nplt.show()","e155bb8b":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_arma['arma_forecast'][train_len-1:])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_arma['arma_forecast'][train_len-1:])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Autoregressive moving average (ARMA) method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","c8559376":"model = ARIMA(train_data_boxcox, order=(1, 1, 1))\nmodel_fit = model.fit()\nprint(model_fit.params)","1f5227ec":"y_hat_arima = data_boxcox_diff.copy()\ny_hat_arima['arima_forecast_boxcox_diff'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_arima['arima_forecast_boxcox'] = y_hat_arima['arima_forecast_boxcox_diff'].cumsum()\ny_hat_arima['arima_forecast_boxcox'] = y_hat_arima['arima_forecast_boxcox'].add(data_boxcox[0])\ny_hat_arima['arima_forecast'] = np.exp(y_hat_arima['arima_forecast_boxcox'])","adc0a051":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_arima['arima_forecast'][test.index.min():], label='ARIMA forecast')\nplt.legend(loc='best')\nplt.title('Autoregressive integrated moving average (ARIMA) method')\nplt.show()","bdcde6b4":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_arima['arima_forecast'][test.index.min():])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_arima['arima_forecast'][test.index.min():])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Autoregressive integrated moving average (ARIMA) method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","d73ce1b9":"from statsmodels.tsa.statespace.sarimax import SARIMAX\n\nmodel = SARIMAX(train_data_boxcox, order=(1, 1, 1), seasonal_order=(1, 1, 1, 12)) \nmodel_fit = model.fit()\nprint(model_fit.params)","10059d8a":"y_hat_sarima = data_boxcox_diff.copy()\ny_hat_sarima['sarima_forecast_boxcox'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_sarima['sarima_forecast'] = np.exp(y_hat_sarima['sarima_forecast_boxcox'])","8ecf5dee":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_sarima['sarima_forecast'][test.index.min():], label='SARIMA forecast')\nplt.legend(loc='best')\nplt.title('Seasonal autoregressive integrated moving average (SARIMA) method')\nplt.show()","b932aca5":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_sarima['sarima_forecast'][test.index.min():])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_sarima['sarima_forecast'][test.index.min():])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Seasonal autoregressive integrated moving average (SARIMA) method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","8c417cf2":"## Plot time series data","86812890":"## Partial autocorrelation function (PACF)","493de216":"## Import required packages","a1b4cc01":"### Plot train, test and forecast","cd81a0b1":"### Recover original time series forecast","2c594687":"## Seasonal auto regressive integrated moving average (SARIMA)","b2867a96":"# Time series forecasting","164f51fa":"## Split time series data into training and test set","1b94fca7":"### Histogram plot","8f759050":"# Build and evaluate time series forecast","5d9368b8":"### Calculate RMSE and MAPE","22ef926f":"### Augmented Dickey-Fuller (ADF) test","154cb618":"### Recover original time series","f1a10212":"### Multiplicative seasonal decomposition","3f5c38f7":"### Kwiatkowski-Phillips-Schmidt-Shin (KPSS) test","6b1fa4fe":"## Import time series data: Airline passenger traffic","0f4c0762":"### Differencing to remove trend","da3d41ee":"### Recover original time series","d8e5cba6":"## Auto regression method (AR)","232037c2":"## Moving average method (MA)","b6142b86":"### Kwiatkowski-Phillips-Schmidt-Shin (KPSS) test","ddd410d3":"### Calculate RMSE and MAPE","340404e1":"## Auto regression moving average method (ARMA)","87d12e74":"## Auto regressive integrated moving average (ARIMA)","e66ca4f3":"# Initial setup","ba352ffb":"Prediction is best with Seasonal autoregressive integrated moving average (SARIMA) method, among all other AutoRegressive Methods","f6d5a3fa":"### Calculate RMSE and MAPE","10f38f71":"### Recover original time series forecast","59360a23":"## Time series Decomposition","2be4286c":"# Time series analysis","376b637f":"## Outlier detection","8d1d5d5e":"## Autocorrelation function (ACF)","f653e47d":"### Plot train, test and forecast","99097cbe":"### Additive seasonal decomposition","59775724":"### Box plot and interquartile range","361c22cc":"### Augmented Dickey-Fuller (ADF) test","107a95b0":"### Plot train, test and forecast","f2cfd8d5":"### Recover original time series","8da6ac7c":"### Plot train, test and forecast","879d97f0":"## Missing value treatment","485d7107":"# Auto Regressive methods","c1e94fe2":"### Box Cox transformation to make variance constant","299e1bc6":"## Stationarity vs non-stationary time series","3fef15f4":"### Plot train, test and forecast","ef592dbd":"### Calculate RMSE and MAPE","8d00478b":"### Calculate RMSE and MAPE"}}