{"cell_type":{"907a20c8":"code","e3866912":"code","e11d0bdf":"code","fc656935":"code","f06f6a68":"code","92416d7e":"code","023eff2d":"code","2324b149":"code","78a23d07":"code","d07a7bad":"code","a91422d3":"code","eda83069":"code","de946b56":"code","24518f15":"code","1271f8d9":"code","2c44afdc":"code","a0cf6c14":"code","486aa106":"code","ce2669b0":"code","c9abd3c6":"code","d5754606":"code","4ab1590f":"code","24dcce3e":"code","aa391a56":"code","35d3169d":"code","0d6993a4":"code","8ce1aa32":"code","b904e511":"code","1537fe18":"markdown","53708364":"markdown","3ef4f019":"markdown","ebc68f3b":"markdown","bbd4ad34":"markdown","3cef94a0":"markdown"},"source":{"907a20c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e3866912":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","e11d0bdf":"#read the dataframe\ndf_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","fc656935":"#check shape of dataframe\ndf_train.columns","f06f6a68":"#descriptive statistics summary\ndf_train['SalePrice'].describe()","92416d7e":"#histogram\nsns.distplot(df_train['SalePrice']);","023eff2d":"#skewness and kurtosis\nprint(\"Skewness: %f\" % df_train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % df_train['SalePrice'].kurt())","2324b149":"#correlation matrix\ncorrmat = df_train.corr()\nf, ax = plt.subplots(figsize = (12, 9))\nsns.heatmap(corrmat, vmax=0.8, square=True);","78a23d07":"#SalePrice correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(df_train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='0.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","d07a7bad":"#scatterplot\nsns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'GarageArea', 'TotalBsmtSF', '1stFlrSF', 'FullBath', 'TotRmsAbvGrd', 'YearBuilt']\nsns.pairplot(df_train[cols], size = 2.5)\nplt.show();\n","a91422d3":"#missing data\ntotal = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","eda83069":"#dealing with missing data\ndf_train = df_train.drop((missing_data[missing_data['Total']>1]).index,1)\ndf_train = df_train.drop(df_train.loc[df_train['Electrical'].isnull()].index)\ndf_train.isnull().sum().max()","de946b56":"#Finding outliers with univariate analysis\n#standardizing data\nsaleprice_scaled = StandardScaler().fit_transform(df_train['SalePrice'][:,np.newaxis]);\nlow_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]\nhigh_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)","24518f15":"#bivariate analysis saleprice\/grlivarea\nvar = 'GrLivArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));\n","1271f8d9":"#deleting points\n#df_train.sort_values(by='GrLivArea', ascending=False)[:2]\n#df_train = df_train.drop(df_train[df_train['Id']==1299].index)\n#df_train = df_train.drop(df_train[df_train['Id']==524].index)","2c44afdc":"#bivariate analysis saleprice\/totalbsmtsf\nvar = 'TotalBsmtSF'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","a0cf6c14":"#bivariate analysis saleprice\/1stflrsf\nvar = '1stFlrSF'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","486aa106":"#bivariate analysis saleprice\/garagearea\nvar = 'GarageArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","ce2669b0":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor","c9abd3c6":"df_train.head()","d5754606":"y = df_train.SalePrice\nfeatures = ['OverallQual', 'GrLivArea', 'GarageCars', 'GarageArea', 'TotalBsmtSF', '1stFlrSF', 'FullBath', 'TotRmsAbvGrd', 'YearBuilt']\nX = df_train[features]\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)\ndf_model = DecisionTreeRegressor(random_state=1)\ndf_model.fit(train_X, train_y)\nval_predicitons = df_model.predict(val_X)\nval_mae = mean_absolute_error(val_predicitons, val_y)\nprint(\"Validation MAE when not specifying max_leaf_nodes: {:,.0f}\".format(val_mae))\ndf_model = DecisionTreeRegressor(max_leaf_nodes=70, random_state=1)\ndf_model.fit(train_X, train_y)\nval_predicitons = df_model.predict(val_X)\nval_mae = mean_absolute_error(val_predicitons, val_y)\nprint(\"Validation MAE for best value of max_leaf_nodes: {:,.0f}\".format(val_mae))\n\nrf_model = RandomForestRegressor(random_state=1)\nrf_model.fit(train_X, train_y)\nrf_val_predictions = rf_model.predict(val_X)\nrf_val_mae = mean_absolute_error(rf_val_predictions, val_y)\nprint(\"Validation MAE for Random Forest Model: {:,.0f}\".format(rf_val_mae))","4ab1590f":"rf_model_on_full_data = RandomForestRegressor(random_state=1)\nrf_model_on_full_data.fit(train_X, train_y)","24dcce3e":"df_train.shape","aa391a56":"df_test_path = '..\/input\/house-prices-advanced-regression-techniques\/test.csv'\n\ndf_test = pd.read_csv(df_test_path)\ndf_test.shape","35d3169d":"features = ['OverallQual', 'GrLivArea', 'GarageCars', 'GarageArea', 'TotalBsmtSF', '1stFlrSF', 'FullBath', 'TotRmsAbvGrd', 'YearBuilt']\ntest_X = df_test[features]\ntest_X.head(20)","0d6993a4":"train_X.head(20)","8ce1aa32":"test_X.fillna(0, inplace=True)\ntest_preds = rf_model_on_full_data.predict(test_X)","b904e511":"output = pd.DataFrame({'Id':df_test.Id,\n                      'SalePrice': test_preds})\noutput.to_csv('submission.csv', index=False)","1537fe18":"# Missing Data","53708364":"# Outliers","3ef4f019":"# Getting Started","ebc68f3b":"# Visualizing Data","bbd4ad34":"# Machine Learning","3cef94a0":"**Normally I would remove these 2 outliers but through testing, the RMSE was lower when they were kept. I left the code for deleting the outliers below.**"}}