{"cell_type":{"d5dbcf24":"code","d79d0e0a":"code","4fcf45fc":"code","0a3a0365":"code","383b2ce8":"code","22842c16":"code","4c46102d":"code","83380d0e":"code","e5621e80":"code","9ac50b3c":"code","6f01f027":"markdown","2d8d84e5":"markdown","7adb6e32":"markdown","d5e3ba21":"markdown","c2b8b565":"markdown","e870bdae":"markdown","70fc87fa":"markdown"},"source":{"d5dbcf24":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom subprocess import check_output\nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.layers.recurrent import LSTM\nfrom keras.models import Sequential\nfrom sklearn.model_selection import  train_test_split\nimport time #helper libraries\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\nfrom numpy import newaxis","d79d0e0a":"prices_dataset =  pd.read_csv('..\/input\/prices.csv', header=0)\nprices_dataset","4fcf45fc":"yahoo = prices_dataset[prices_dataset['symbol']=='YHOO']\nyahoo_stock_prices = yahoo.close.values.astype('float32')\nyahoo_stock_prices = yahoo_stock_prices.reshape(1762, 1)\nyahoo_stock_prices.shape","0a3a0365":"plt.plot(yahoo_stock_prices)\nplt.show()\n\nscaler = MinMaxScaler(feature_range=(0, 1))\nyahoo_stock_prices = scaler.fit_transform(yahoo_stock_prices)","383b2ce8":"train_size = int(len(yahoo_stock_prices) * 0.80)\ntest_size = len(yahoo_stock_prices) - train_size\ntrain, test = yahoo_stock_prices[0:train_size,:], yahoo_stock_prices[train_size:len(yahoo_stock_prices),:]\nprint(len(train), len(test))","22842c16":"# convert an array of values into a dataset matrix\ndef create_dataset(dataset, look_back=1):\n\tdataX, dataY = [], []\n\tfor i in range(len(dataset)-look_back-1):\n\t\ta = dataset[i:(i+look_back), 0]\n\t\tdataX.append(a)\n\t\tdataY.append(dataset[i + look_back, 0])\n\treturn np.array(dataX), np.array(dataY)","4c46102d":"# reshape into X=t and Y=t+1\nlook_back = 1\ntrainX, trainY = create_dataset(train, look_back)\ntestX, testY = create_dataset(test, look_back)","83380d0e":"trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))","e5621e80":"#LSTM architecture\nmodel = Sequential()\n# First LSTM layer with Dropout regularisation\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(trainX.shape[1],1)))\nmodel.add(Dropout(0.2))\n# Second LSTM layer\nmodel.add(LSTM(units=50,return_sequences=True))\nmodel.add(Dropout(0.2))\n# Third LSTM layer\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(Dropout(0.2))\n# Fourth LSTM layer\nmodel.add(LSTM(units=50))\nmodel.add(Dropout(0.5))\n# The output layer\nmodel.add(Dense(units=50, kernel_initializer='uniform', activation='tanh'))\nmodel.add(Dense(units=1, kernel_initializer='uniform', activation='linear'))\n\n# Compiling the RNN\nmodel.compile(optimizer='adam',loss='mean_squared_error')\n# Fitting to the training set\nstart = time.time()\nhistory = model.fit(trainX,trainY,epochs=200,batch_size=35, validation_split=0.05, verbose=1)\nprint ('compilation time : ', time.time() - start)","9ac50b3c":"import matplotlib.pyplot as plt\n\ndef plot_history(history): \n\n    history_dict = history.history\n    history_dict.keys()\n\n\n#     acc = history.history['binary_accuracy']\n#     val_acc = history.history['val_binary_accuracy']\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n\n    epochs = range(1, len(loss) + 1)\n\n    # \"bo\" is for \"blue dot\"\n    plt.plot(epochs, loss, 'r', label='Training loss')\n    # b is for \"solid blue line\"\n    plt.plot(epochs, val_loss, 'b', label='Validation loss')\n    plt.title('Training and validation loss')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.legend()\n\n    plt.show()\n    \nplot_history(history)","6f01f027":"based on \nhttps:\/\/github.com\/llSourcell\/How-to-Predict-Stock-Prices-Easily-Demo\nand\nhttp:\/\/machinelearningmastery.com\/time-series-prediction-lstm-recurrent-neural-networks-python-keras\/\n\nI just want to predict if a stock will rise based on previous information","2d8d84e5":"## Plotting Learning Curves","7adb6e32":"# Modeling","d5e3ba21":"## Train Test Split","c2b8b565":"# Importing Libraries","e870bdae":"## Building the Model","70fc87fa":"# Data Exploration"}}