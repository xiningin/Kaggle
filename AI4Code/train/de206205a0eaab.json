{"cell_type":{"2e6c076b":"code","791c1ed8":"code","92b7a0c4":"code","7b05fac3":"code","c5b9fbca":"code","491ff5a7":"code","96d5d620":"code","f75dd791":"code","5e084f2a":"code","c9332f70":"code","87097e7a":"code","87059568":"code","b61a69b2":"code","e5b8dc35":"code","bfef5265":"code","60cad278":"code","36872e0f":"code","bce9f16b":"code","a4eaa0d8":"code","1db6f6b5":"code","9c9d6f88":"code","37ca4028":"code","e59c3409":"code","5eca83e1":"code","68af90e5":"code","4b8748a1":"code","5e586cca":"code","b5ddda93":"code","859afd80":"code","9431096d":"code","f150c8b3":"code","99325995":"code","f98ff0dc":"code","9dc75a90":"code","dd0ac96a":"code","8fa5032f":"code","4b37d26e":"code","9f097ded":"code","d199e407":"code","bc076cf4":"code","af139edc":"code","0c14c8fc":"code","52c9c662":"code","d6b86c7a":"code","3013fb46":"code","aadc6283":"code","be596d5e":"code","2a87e174":"code","7ab6b32e":"code","09b9ae21":"code","69e17bf7":"code","0f0fb465":"code","26d43659":"code","3d3f9eb2":"code","0f0e23c6":"code","ba2fe864":"code","fc0fe77c":"code","5775a4e8":"code","173251c2":"code","b9009b1f":"code","e3ec36c8":"markdown","6fd34ebd":"markdown","21d1fe0c":"markdown","a60cf137":"markdown","42771c70":"markdown","abf2f211":"markdown"},"source":{"2e6c076b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","791c1ed8":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go","92b7a0c4":"#uc = pd.read_csv('vehicles.csv')\nuc = pd.read_csv('\/kaggle\/input\/craigslist-carstrucks-data\/vehicles.csv')","7b05fac3":"uc.shape","c5b9fbca":"uc.head(5)","491ff5a7":"uc.describe()","96d5d620":"uc.columns","f75dd791":"nas = (uc.isna().sum()\/len(uc)).sort_values(ascending=False)","5e084f2a":"nas","c9332f70":"uc.drop(columns = ['id','url','county','image_url','region_url','VIN','lat','long'],inplace=True)","87097e7a":"uc['size'].unique()","87059568":"plt.figure(figsize=(10,5))\nsns.countplot(uc['cylinders'])\nplt.title('Types of Cylinders')","b61a69b2":"graph = sns.countplot(uc['fuel'])\ngraph.set_xlabel('Fuel Type',size=11)\ngraph.set_ylabel('No. of Cars',size=11)\nplt.title('Fuels')\nplt.legend()","e5b8dc35":"#what if this become a normal curve\n\nplt.figure(figsize=(20,8))\n\nax = sns.countplot(uc['year'])\nplt.title(\"Launching Year of Car Model\",size=15)\nk = ax.set_xticklabels(ax.get_xticklabels(),rotation=90,size=10)","bfef5265":"uc[uc['transmission'] == 'automatic']['transmission']","60cad278":"manufec_count = uc['manufacturer'].value_counts().sort_values(ascending=False).reset_index()\nmanufec_count.columns = ['manufacturer','count']\nmanufec_count.head(5)","36872e0f":"mcount = uc[['manufacturer','transmission','year']].groupby(['transmission','year']).agg(['count'])\nmcount.head(10)","bce9f16b":"#mcount.columns = ['cyear','count']\n","a4eaa0d8":"#mcount['manufacturer count']","1db6f6b5":"'''\ntrace0 = go.Bar(x = mcount['manufacturer'],\n               y = mcount['count'],\n               marker = dict(color = '#FF6F00')\n               )\nlayout = go.Layout(title = 'Transmission')\nfig = go.Figure(data = [trace0],layout = layout)\nfig.show()\n'''","9c9d6f88":"\ntrace0 = go.Bar(x = manufec_count['manufacturer'],\n                y = manufec_count['count'],\n                marker = dict(color = '#FF6F00'),\n                text = manufec_count['count']\n)\ntrace1 = go.Bar(x =manufec_count['manufacturer'],\n               y = uc['transmission'],\n               marker = dict(color = '#F7DC6F')\n               )\n\nlayout = go.Layout(title = 'Manufacturer')\nfig = go.Figure(data = [trace0,trace1],layout = layout)\nfig.show()","37ca4028":"uc['transmission'].unique()","e59c3409":"plt.figure(figsize=(15,6))\nax = sns.countplot(uc['state'])\nplt.title(\"State Wise distribution of no. of used cars\")\nk = ax.set_xticklabels(ax.get_xticklabels(),size=10)","5eca83e1":"'''\nplt.figure(figsize=(15,6))\ncolor_labels = list(uc['paint_color'].unique())\n\nrgb_values = sns.color_palette('Set1',6)\ncolor_map = dict(zip(color_labels,rgb_values))\nax = sns.countplot(uc['paint_color'])\n'''","68af90e5":"plt.figure(figsize=(10,8))\npaint = uc['paint_color'].value_counts().reset_index()\npaint.columns = ['paint','count']\n'''\nfor i in paint['paint']:\n    try:\n        sns.barplot(paint['paint'],paint['count'],color =i[0])\n    except:\n        sns.barplot(paint['paint'],paint['count'],color = 'y')\n'''\nplt.title(\"Color count of Cars\",size=15)\nsns.barplot(paint['paint'],paint['count'],color = 'y')","4b8748a1":"transm = uc.groupby('manufacturer')['transmission'].value_counts()","5e586cca":"trans = pd.DataFrame(transm)","b5ddda93":"trans.columns","859afd80":"trans = trans.unstack(level= 'transmission')\ntrans.head(5)","9431096d":"trans[('transmission','automatic')].head(4)","f150c8b3":"trans.index","99325995":"trans.dtypes","f98ff0dc":"trans.columns = ['automatic','manual','other']","9dc75a90":"trace0 = go.Bar(y = trans['automatic'],\n               x = trans.index,\n               marker={'color' : '#FFB300'},\n                text = trans['automatic'],\n                textposition='auto',\n                name = 'Automatic'\n               )\ntrace1 = go.Bar(y = trans['manual'],\n               x = trans.index,\n               marker= dict (color ='#FF6F00'),\n                text = trans['manual'],\n                textposition='auto',\n                name = 'Manual'\n               ) \ntrace2 = go.Bar(y = trans['other'],\n               x = trans.index,\n               marker={'color' : '#1E88E5'},\n                text = trans['other'],\n                textposition='auto',\n                name = 'Others'\n               ) \nlayout = go.Layout(hovermode = 'x',\n                   title = 'Transmission',\n                   barmode = 'stack',\n                   xaxis = dict(title = 'Manufacturer'),\n                   yaxis = dict(title = 'Count')\n                  )\ndata = [trace0,trace1,trace2]\nfig = go.Figure(data = data,layout=layout)\nfig.show()","dd0ac96a":"paintcolor = uc.groupby('manufacturer')['paint_color'].value_counts()\npaintcolor","8fa5032f":"paintcolor = paintcolor.unstack(level='paint_color').fillna(0)\npaintcolor.head(10)","4b37d26e":"trace = []\ncolorname = list(paintcolor.columns)\ncolorcode = ['#000000','#0000FF','#800000','#008080','#00FF00','#808080','#FFA500','#800080','#FF0000','#C0C0C0','#FFFFFF','#FFFF00']\nfor i in range(len(colorname)):\n    \n    tr = go.Bar(x = paintcolor.index,\n                   y = paintcolor[colorname[i]],\n                   marker = dict(color = colorcode[i]),\n                   text = paintcolor[colorname[i]],\n                   textposition = 'auto',\n                   name = colorname[i])\n    trace.append([tr])\n\nlayout = go.Layout(hovermode = 'x',\n                   title = \"Chassis's Color  \",\n                   barmode = 'stack',\n                   xaxis = dict(title = 'Manufacturer'),\n                   yaxis = dict(title = 'Count')\n                  )\n\ndata = [trace[0][0],trace[1][0],trace[2][0],trace[3][0],trace[4][0],trace[5][0],trace[6][0],trace[7][0],trace[8][0],trace[9][0],trace[10][0],\n       trace[11][0]]\nfig = go.Figure(data = data,layout = layout)\nfig.show()","9f097ded":"uc['model'].value_counts()","d199e407":"model_df = uc.groupby('manufacturer')['model'].value_counts()\nmodel_df.head(5)","bc076cf4":"audi_df = uc[uc['manufacturer'] == 'audi']\naudi_df = audi_df[['model','condition']].value_counts().reset_index()\naudi_df.columns = ['model','condition','count']\naudi_df.head(5)","af139edc":"audi_df.shape","0c14c8fc":"plt.figure(figsize=(20,5))\ngraph = sns.barplot(y = audi_df['count'].head(100),x = audi_df['model'].head(100),hue=audi_df['condition'])\nplt.title(\"Count of Used Models of Audi relative to their condition\",size=17)\nk = graph.set_xticklabels(graph.get_xticklabels(),rotation=90,size=13)","52c9c662":"lexus_df = uc[uc['manufacturer'] == 'lexus']\nlexus_df = lexus_df['model'].value_counts().reset_index()\nlexus_df.columns = ['model','count']\nlexus_df.head(5)","d6b86c7a":"plt.figure(figsize=(15,8))\ngraph = sns.barplot(y = lexus_df['count'].head(30),x = lexus_df['model'].head(30))\nplt.title(\"Count of Used Models of LEXUS\",size=20)\nk = graph.set_xticklabels(graph.get_xticklabels(),rotation=90,size=15)\ngraph.set_xlabel('Model names',size=12)\ngraph.set_ylabel('No. of Cars',size=12)\n","3013fb46":"ford_df = uc[uc['manufacturer'] == 'ford']\nford_df = ford_df['model'].value_counts().reset_index()\nford_df.columns = ['model','count']\nford_df.head(5)","aadc6283":"plt.figure(figsize=(15,8))\ngraph = sns.barplot(y = ford_df['count'].head(30),x = ford_df['model'].head(30))\nplt.title(\"Count of Used Models of FORD\",size=17)\nk = graph.set_xticklabels(graph.get_xticklabels(),rotation=90,size=15)\ngraph.set_xlabel('Model names',size=12)\ngraph.set_ylabel('No. of Cars',size=12)\n","be596d5e":"condition_df = uc.groupby('model')['condition'].value_counts()","2a87e174":"condition_df = condition_df.unstack(level = 'condition').fillna(0)","7ab6b32e":"condition_df","09b9ae21":"price_df = uc.groupby(['manufacturer','model'])['price'].mean()\nprice_df","69e17bf7":"audi_price = price_df.loc['audi'].reset_index()\naudi_price = audi_price.sort_values(by='price',ascending=False)\naudi_price.head(10)","0f0fb465":"plt.figure(figsize=(15,20))\ngraph = sns.lineplot(y = 'model',x='price',data = audi_price.head(80))\nplt.title('Audi Models Price in $',size=15)\n#k = graph.set_xticklabels(graph.get_xticklabels(),rotation=90,size=15)\ngraph.set_xlabel('Price in Dollars',size=12)\ngraph.set_ylabel('Modal name',size=12)","26d43659":"ford_price = price_df.loc['ford'].reset_index()\nford_price = ford_price.sort_values(by='price',ascending=False)\nford_price['price'] = ford_price['price']\/\/1000\nford_price.head(10)","3d3f9eb2":"plt.figure(figsize=(15,5))\ngraph = sns.lineplot(y = 'model',x='price',data = ford_price.head(10))\nplt.title('Audi Models Price in 1000$',size=15)\n#k = graph.set_xticklabels(graph.get_xticklabels(),rotation=90,size=15)\ngraph.set_xlabel('Price in 1000 Dollars',size=12)\ngraph.set_ylabel('Modal name',size=12)","0f0e23c6":"statewise = uc[uc['manufacturer'] == 'mercedes-benz']\nstatewise = uc.groupby('manufacturer')['state'].value_counts()\nstatewise","ba2fe864":"statewise = statewise.unstack(level = 'state').fillna(0)","fc0fe77c":"statewise.head(10)","5775a4e8":"statewise.describe()","173251c2":"plt.figure(figsize = (18,8))\nbrand = list(statewise.index)\nsns.lineplot(x =brand,y = statewise['ak'],label = 'Arkansan')\nsns.lineplot(x = brand,y = statewise['ca'],label = 'California')\nsns.lineplot(x = brand,y = statewise['tx'],label = 'Texas')\nsns.lineplot(x = brand,y = statewise['dc'],label = 'Washington')\nsns.lineplot(x = brand,y = statewise['az'],label = 'Arizona')\n\nplt.title(\"No of cars, manufacturer wise in some popular states of US\",size=15)\nplt.xticks(label = 'Brand Name',rotation=90)\nplt.yticks(label = 'No. of cars')\nplt.legend()\nplt.show()","b9009b1f":"px.line(x = statewise.index,y = statewise['ca'])","e3ec36c8":"Ford","6fd34ebd":"BMW","21d1fe0c":"# Model wise Price analysis of Luxury brands and most sold brands","a60cf137":"# Price analysis of Cars","42771c70":"# Color of Chassis","abf2f211":"The Stacked Barplot here shows that Used Cars are mostly of white color. And No of cars with YELLOW chassis in significantly low when compared to other Colors.\nWhich also concludeds BLACK, WHITE, GREY and RED are most prefferd Colors."}}