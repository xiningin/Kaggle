{"cell_type":{"bba6d252":"code","27d1d447":"code","e91771c4":"code","b0054091":"code","df6fb784":"code","224cbc31":"code","3fc13bb5":"code","139601d0":"code","c475582b":"code","8dc7e624":"code","257325d0":"code","15107123":"code","0b286fc2":"code","afed2d72":"code","ec8d30d9":"code","4db5e7eb":"code","04047007":"code","8723c932":"code","09848ead":"code","a65510c8":"code","104a8150":"code","fb3bb418":"markdown","ec4ddb82":"markdown","079e3b07":"markdown"},"source":{"bba6d252":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.metrics import roc_auc_score\n\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\nimport optuna\n\nimport eli5\nfrom eli5.sklearn import PermutationImportance\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","27d1d447":"pip install feature-engine","e91771c4":"from feature_engine import encoding","b0054091":"df = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv', index_col=[0])\nX_train = df.drop(columns='target', axis=1)\ny_train = df['target']","df6fb784":"X_test = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/test.csv', index_col=[0])","224cbc31":"vars_num = [var for var in X_train.columns if X_train[var].dtype != 'O']\nvars_cat = [var for var in X_train.columns if X_train[var].dtype == 'O']","3fc13bb5":"pre_pipe = Pipeline([\n\n    ('encoder_rare_label',\n     encoding.RareLabelEncoder(tol=0.01, n_categories=4, variables=vars_cat)),\n    \n    ('categorical_encoder',\n     encoding.OrdinalEncoder(encoding_method='ordered',\n                             variables=vars_cat)),\n\n    ])","139601d0":"pre_pipe.fit(X_train, y_train)","c475582b":"X_train = pre_pipe.transform(X_train)\nX_test = pre_pipe.transform(X_test)","8dc7e624":"X_train.head()","257325d0":"X_test.head()","15107123":"def objective(trial, data=X_train, target=y_train):\n    seed = 1234\n    split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=seed)\n\n    for train_index, valid_index in split.split(data, target):\n        X_train = data.iloc[train_index]\n        y_train = target.iloc[train_index]\n        X_valid = data.iloc[valid_index]\n        y_valid = target.iloc[valid_index]\n\n\n    lgbm_params = {\n        'reg_alpha': trial.suggest_float('reg_alpha', 1.0, 5.0),\n        'reg_lambda': trial.suggest_float('reg_lambda', 1.0, 10.0),\n        'num_leaves': trial.suggest_int('num_leaves', 170, 250),\n        'min_child_samples': trial.suggest_int('min_child_samples', 40, 60),\n        'max_depth': trial.suggest_int('max_depth', 15, 25),\n        'learning_rate': trial.suggest_categorical('learning_rate', [0.01]),\n        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.1, 0.3),\n        'n_estimators': trial.suggest_int('n_estimators', 3000, 4500),\n        'random_state': seed,\n        'boosting_type': 'gbdt',\n        'metric': 'AUC',\n        # 'device': 'gpu'\n    }\n    \n\n    model = LGBMClassifier(**lgbm_params)  \n    \n    model.fit(\n            X_train,\n            y_train,\n            early_stopping_rounds=100,\n            eval_set=[(X_valid, y_valid)],\n            verbose=False\n        )\n\n    y_valid_pred = model.predict_proba(X_valid)[:,1]\n    \n    roc_auc = roc_auc_score(y_valid, y_valid_pred)\n    \n    return roc_auc","0b286fc2":"study = optuna.create_study(direction = 'maximize')\nstudy.optimize(objective, n_trials = 100)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)\nprint('Best value:', study.best_value)","afed2d72":"optuna.visualization.plot_optimization_history(study)","ec8d30d9":"optuna.visualization.plot_param_importances(study)","4db5e7eb":"seed = 1234\nparamsLGBM = study.best_trial.params\nparamsLGBM['boosting_type'] = 'gbdt'\nparamsLGBM['random_state'] = seed\n# paramsLGBM['device'] = 'gpu'","04047007":"paramsLGBM","8723c932":"model = LGBMClassifier(**paramsLGBM)  \n    \nmodel.fit(X_train, y_train)\n\ny_test_pred = model.predict_proba(X_test)[:,1]","09848ead":"y_test_pred = model.predict_proba(X_test)[:,1]","a65510c8":"sub = pd.DataFrame(y_test_pred, index=X_test.index).reset_index().rename(columns={0: 'target'})\nsub.to_csv('optuna_final.csv', index=False)","104a8150":"sub","fb3bb418":"### Parameter Search with Optuna","ec4ddb82":"### Submission","079e3b07":"### Pipeline for preprocessing with Feature-Engine"}}