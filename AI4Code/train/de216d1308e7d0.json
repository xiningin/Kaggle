{"cell_type":{"f82e3bb0":"code","f6ba04bc":"code","51cdb719":"code","41455cce":"code","0fa24364":"code","96702ae0":"code","f8f4b4d0":"code","98521d25":"code","acd962dc":"code","59260eeb":"code","53c6586c":"code","07c9586f":"code","4f668d5f":"code","15653968":"code","108f873d":"code","7b3dd213":"code","08105c43":"code","58df91f5":"code","7be8330f":"code","3e98ed13":"code","253535d4":"code","dbaaaccb":"code","fc942c95":"code","21c87bc7":"code","f7db2302":"code","ca9bd9ce":"code","8404f8bb":"code","6409bf63":"code","e0fbc8e7":"markdown","5c55acce":"markdown","bcec77d2":"markdown","041379c8":"markdown","d5158f2e":"markdown","41d657f8":"markdown","692f6958":"markdown","02c656e4":"markdown","401328f6":"markdown","baa42f75":"markdown","8d19b3ab":"markdown","a561b41d":"markdown","78b3d11a":"markdown","b4b7d73c":"markdown","e8d5b44b":"markdown","bb02924b":"markdown","6be25a73":"markdown","6d2ec5c4":"markdown","3e7bd267":"markdown","e0ecd874":"markdown","9118fc6c":"markdown","28db5a15":"markdown","dfab38f6":"markdown","e7e157b1":"markdown","e983032f":"markdown","132e73e9":"markdown","06f13ccd":"markdown","39f875ed":"markdown"},"source":{"f82e3bb0":"#Import required libraries\n\nimport pandas as pd\nimport numpy as np\nfrom pandas_profiling import ProfileReport\n\n\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport cufflinks as cf\ncf.go_offline()\nimport os\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f6ba04bc":"full_data = pd.read_csv('\/kaggle\/input\/alldatas\/full_data.csv')\n\nfull_data.head()","51cdb719":"full_data = full_data.fillna(0)\nfull_data_animation = full_data.copy()\n\nfull_data.head()","41455cce":"from datetime import datetime\n\nfull_data = full_data.astype({\n    'location':str, \n    'new_cases':int, \n    'new_deaths':int,\n    'total_cases':int,\n    'total_deaths':int,\n    'weekly_cases':int,\n    'weekly_deaths':int,\n    'biweekly_cases':int,\n    'biweekly_deaths':int\n})\n\nfull_data.date = pd.to_datetime(full_data.date)","0fa24364":"# Extracting required features and processing time\n\nfull_data_total = full_data[['date','location','total_cases', 'total_deaths']]\n\nlatest_time = pd.to_datetime('2020-10-11 00:00:00')\n\ndef return_nepal(date):\n    if(date == latest_time):\n        return True\n    else:\n        return False\n    \ndef return_noworld(location):\n    if(location!='World'):\n        return True\n    else:\n        return False\n    \nfull_data_total = full_data_total[full_data_total['date'].apply(return_nepal)]\nfull_data_total = full_data_total[full_data_total['location'].apply(return_noworld)]\n\nfull_data_total_table = full_data_total[['location','total_cases', 'total_deaths']]\nfull_data_total_table = full_data_total_table.sort_values('total_cases', ascending=False)\n\nfull_data_total_table = full_data_total_table.reset_index(drop=True)\nfull_data_total_table.style.background_gradient(cmap='Oranges')","96702ae0":"# Visualizing the data\n\nfrom plotly.subplots import make_subplots\n\nlabels = full_data_total['location'].tolist()\n\nvalues1 = full_data_total['total_cases'].tolist()\nvalues2 = full_data_total['total_deaths'].tolist()\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=labels, values=values1, name=\"Total Cases\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=labels, values=values2, name=\"Total Deaths\"),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\", textposition='inside')\n\nfig.update_layout(\n    autosize=True,\n    width = 1000,\n    title_text=\"CoronaVirus Total Cases and Death Cases per Country\",\n    # Add annotations in the center of the donut pies.\n    annotations=[\n                 dict(text='Total Cases', x=0.18, y=0.5, font_size=13, showarrow=False),\n                dict(text='Total Deaths', x=0.83, y=0.5, font_size=13, showarrow=False)])\nfig.show()","f8f4b4d0":"trace1 = [go.Choropleth(\n               colorscale = 'Picnic',\n               locationmode = 'country names',\n               locations = labels,\n               text = labels, \n               z = values1,\n               )]\n\nlayout = dict(title = 'CoronaVirus Total Cases',\n                  geo = dict(\n                      showframe = True,\n                      showocean = True,\n                      showlakes = True,\n                      showcoastlines = True,\n                      projection = dict(\n                          type = 'hammer'\n        )))\n\n\nprojections = [ \"equirectangular\", \"mercator\", \"orthographic\", \"natural earth\",\"kavrayskiy7\", \n               \"miller\", \"robinson\", \"eckert4\", \"azimuthal equal area\",\"azimuthal equidistant\", \n               \"conic equal area\", \"conic conformal\", \"conic equidistant\", \"gnomonic\", \"stereographic\", \n               \"mollweide\", \"hammer\", \"transverse mercator\", \"albers usa\", \"winkel tripel\" ]\n\nbuttons = [dict(args = ['geo.projection.type', y],\n           label = y, method = 'relayout') for y in projections]\nannot = list([ dict( x=0.1, y=0.8, text='Projection', yanchor='bottom', \n                    xref='paper', xanchor='right', showarrow=False )])\n\n\n# Update Layout Object\n\nlayout[ 'updatemenus' ] = list([ dict( x=0.1, y=0.8, buttons=buttons, yanchor='top' )])\nlayout[ 'annotations' ] = annot\n\n\nfig = go.Figure(data = trace1, layout = layout)\niplot(fig)\n","98521d25":"full_data_total_sort = full_data_total.sort_values('total_cases', ascending=False)\nfull_data_total_10 = full_data_total_sort[:10]\n\nfull_data_total_10.iplot(x='location', y=['total_cases', 'total_deaths'], kind='bar', xTitle='Country', yTitle='Number of Cases', title='Top 10 Country with CoronaVirus Cases and Death Cases')","acd962dc":"full_data_india = full_data[full_data['location'].apply(lambda x: True if x=='India' else False)]\nfull_data_Bhutan = full_data[full_data['location'].apply(lambda x: True if x=='Bhutan' else False)]\nfull_data_Bangladesh = full_data[full_data['location'].apply(lambda x: True if x=='Bangladesh' else False)]\nfull_data_Afghanistan = full_data[full_data['location'].apply(lambda x: True if x=='Afghanistan' else False)]\nfull_data_SriLanka = full_data[full_data['location'].apply(lambda x: True if x=='Sri Lanka' else False)]\nfull_data_Nepal = full_data[full_data['location'].apply(lambda x: True if x=='Nepal' else False)]\nfull_data_Pakistan = full_data[full_data['location'].apply(lambda x: True if x=='Pakistan' else False)]\nfull_data_Maldives = full_data[full_data['location'].apply(lambda x: True if x=='Maldives' else False)]\n\n\n# Visualizing the time Series data \nfig = go.Figure()\nfig.add_trace(go.Scatter(x=full_data_india['date'], y=full_data_india['total_cases'],name='India'))\nfig.add_trace(go.Scatter(x=full_data_Bhutan['date'], y=full_data_Bhutan['total_cases'],name='Bhutan'))\nfig.add_trace(go.Scatter(x=full_data_Bangladesh['date'], y=full_data_Bangladesh['total_cases'],name='Bangladesh'))\nfig.add_trace(go.Scatter(x=full_data_Afghanistan['date'], y=full_data_Afghanistan['total_cases'],name='Afghanistan'))\nfig.add_trace(go.Scatter(x=full_data_SriLanka['date'], y=full_data_SriLanka['total_cases'],name='Sri Lanka'))\nfig.add_trace(go.Scatter(x=full_data_Nepal['date'], y=full_data_Nepal['total_cases'],name='Nepal'))\nfig.add_trace(go.Scatter(x=full_data_Pakistan['date'], y=full_data_Pakistan['total_cases'],name='Nepal'))\nfig.add_trace(go.Scatter(x=full_data_Pakistan['date'], y=full_data_Pakistan['total_cases'],name='Nepal'))\n\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"Year\")\nfig.update_yaxes(title_text=\"Number of Cases\")\nfig.update_layout(title_text='Total Cases per Country')\nfig.show()","59260eeb":"# Visualizing the time Series data \nfig = go.Figure()\nfig.add_trace(go.Scatter(x=full_data_india['date'], y=full_data_india['total_deaths'],name='India'))\nfig.add_trace(go.Scatter(x=full_data_Bhutan['date'], y=full_data_Bhutan['total_deaths'],name='Bhutan'))\nfig.add_trace(go.Scatter(x=full_data_Bangladesh['date'], y=full_data_Bangladesh['total_deaths'],name='Bangladesh'))\nfig.add_trace(go.Scatter(x=full_data_Afghanistan['date'], y=full_data_Afghanistan['total_deaths'],name='Afghanistan'))\nfig.add_trace(go.Scatter(x=full_data_SriLanka['date'], y=full_data_SriLanka['total_deaths'],name='Sri Lanka'))\nfig.add_trace(go.Scatter(x=full_data_Nepal['date'], y=full_data_Nepal['total_deaths'],name='Nepal'))\nfig.add_trace(go.Scatter(x=full_data_Pakistan['date'], y=full_data_Pakistan['total_deaths'],name='Nepal'))\nfig.add_trace(go.Scatter(x=full_data_Pakistan['date'], y=full_data_Pakistan['total_deaths'],name='Nepal'))\n\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"Year\")\nfig.update_yaxes(title_text=\"Number of Cases\")\nfig.update_layout(title_text='Death Cases per Country')\nfig.show()","53c6586c":"# Extracting only data of Nepal\ndef return_south(location):\n    if(location in ['Nepal','India', 'Bhutan', 'Bangladesh', 'Afghanistan', 'Sri Lanka','Maldives','Pakistan']):\n        return True\n    else:\n        return False\n\nfull_data_total_south = full_data_total[full_data_total['location'].apply(return_south)]\nfull_data_total_south_present = full_data_total_south[full_data_total_south['date'].apply(return_nepal)]\n\nfull_data_total_south_present_sort = full_data_total_south_present.sort_values('total_cases', ascending=False)\nfull_data_total_south_present_sort.iplot(x='location', y=['total_cases', 'total_deaths'], kind='bar', xTitle='Country', yTitle='Number of Cases', title='South Asia CoronaVirus Cases and Death Cases')","07c9586f":"full_data_Algeria = full_data[full_data['location'].apply(lambda x: True if x=='Algeria' else False)]\nfull_data_Egypt = full_data[full_data['location'].apply(lambda x: True if x=='Egypt' else False)]\nfull_data_Libya = full_data[full_data['location'].apply(lambda x: True if x=='Libya' else False)]\nfull_data_Morocco = full_data[full_data['location'].apply(lambda x: True if x=='Morocco' else False)]\nfull_data_Sudan = full_data[full_data['location'].apply(lambda x: True if x=='Sudan' else False)]\nfull_data_Tunisia = full_data[full_data['location'].apply(lambda x: True if x=='Tunisia' else False)]\nfull_data_WesternSahara= full_data[full_data['location'].apply(lambda x: True if x=='Western Sahara' else False)]\n\n\n# Visualizing the time Series data \nfig = go.Figure()\nfig.add_trace(go.Scatter(x=full_data_Algeria['date'], y=full_data_Algeria['total_cases'],name='Algeria'))\nfig.add_trace(go.Scatter(x=full_data_Egypt['date'], y=full_data_Egypt['total_cases'],name='Egypt'))\nfig.add_trace(go.Scatter(x=full_data_Libya['date'], y=full_data_Libya['total_cases'],name='Libya'))\nfig.add_trace(go.Scatter(x=full_data_Morocco['date'], y=full_data_Morocco['total_cases'],name='Morocco'))\nfig.add_trace(go.Scatter(x=full_data_Sudan['date'], y=full_data_Sudan['total_cases'],name='Sudan'))\nfig.add_trace(go.Scatter(x=full_data_Tunisia['date'], y=full_data_Tunisia['total_cases'],name='Tunisia'))\nfig.add_trace(go.Scatter(x=full_data_WesternSahara['date'], y=full_data_WesternSahara['total_cases'],name='Western Sahara'))\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"Year\")\nfig.update_yaxes(title_text=\"Number of Cases\")\nfig.update_layout(title_text='Total Cases per Country')\nfig.show()","4f668d5f":"# Visualizing the time Series data \nfig = go.Figure()\nfig.add_trace(go.Scatter(x=full_data_Algeria['date'], y=full_data_Algeria['total_deaths'],name='Algeria'))\nfig.add_trace(go.Scatter(x=full_data_Egypt['date'], y=full_data_Egypt['total_deaths'],name='Egypt'))\nfig.add_trace(go.Scatter(x=full_data_Libya['date'], y=full_data_Libya['total_deaths'],name='Libya'))\nfig.add_trace(go.Scatter(x=full_data_Morocco['date'], y=full_data_Morocco['total_deaths'],name='Morocco'))\nfig.add_trace(go.Scatter(x=full_data_Sudan['date'], y=full_data_Sudan['total_deaths'],name='Sudan'))\nfig.add_trace(go.Scatter(x=full_data_Tunisia['date'], y=full_data_Tunisia['total_deaths'],name='Tunisia'))\nfig.add_trace(go.Scatter(x=full_data_WesternSahara['date'], y=full_data_WesternSahara['total_deaths'],name='Western Sahara'))\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"Year\")\nfig.update_yaxes(title_text=\"Number of Cases\")\nfig.update_layout(title_text='Total Cases per Country')\nfig.show()","15653968":"# Extracting only data of Nepal\ndef return_north(location):\n    if(location in ['Algeria', 'Egypt', 'Libya', 'Morocco', 'Sudan', 'Tunisia', 'Western Sahara']):\n        return True\n    else:\n        return False\n\nfull_data_total_africa = full_data_total[full_data_total['location'].apply(return_north)]\n\nfull_data_total_africa_present_sort = full_data_total_africa.sort_values('total_cases', ascending=False)\nfull_data_total_africa_present_sort.iplot(x='location', y=['total_cases', 'total_deaths'], kind='bar', xTitle='Country', yTitle='Number of Cases', title='North Africa CoronaVirus Cases and Death Cases')","108f873d":"full_data_Estonia = full_data[full_data['location'].apply(lambda x: True if x=='Estonia' else False)]\nfull_data_Latvia = full_data[full_data['location'].apply(lambda x: True if x=='Latvia' else False)]\nfull_data_Lithuania= full_data[full_data['location'].apply(lambda x: True if x=='Lithuania' else False)]\nfull_data_Denmark= full_data[full_data['location'].apply(lambda x: True if x=='Denmark' else False)]\nfull_data_Finland = full_data[full_data['location'].apply(lambda x: True if x=='Finland' else False)]\nfull_data_Iceland = full_data[full_data['location'].apply(lambda x: True if x=='Iceland' else False)]\nfull_data_Norway= full_data[full_data['location'].apply(lambda x: True if x=='Norway' else False)]\nfull_data_Sweden = full_data[full_data['location'].apply(lambda x: True if x=='Sweden' else False)]\n\n\n# Visualizing the time Series data \nfig = go.Figure()\nfig.add_trace(go.Scatter(x=full_data_Estonia['date'], y=full_data_Estonia['total_cases'],name='Estonia'))\nfig.add_trace(go.Scatter(x=full_data_Latvia['date'], y=full_data_Latvia['total_cases'],name='Latvia'))\nfig.add_trace(go.Scatter(x=full_data_Lithuania['date'], y=full_data_Lithuania['total_cases'],name='Lithuania'))\nfig.add_trace(go.Scatter(x=full_data_Denmark['date'], y=full_data_Denmark['total_cases'],name='Denmark'))\nfig.add_trace(go.Scatter(x=full_data_Finland['date'], y=full_data_Finland['total_cases'],name='Finland'))\nfig.add_trace(go.Scatter(x=full_data_Iceland['date'], y=full_data_Iceland['total_cases'],name='Iceland'))\nfig.add_trace(go.Scatter(x=full_data_Norway['date'], y=full_data_Norway['total_cases'],name='Norway'))\nfig.add_trace(go.Scatter(x=full_data_Sweden['date'], y=full_data_Sweden['total_cases'],name='Sweden'))\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"Year\")\nfig.update_yaxes(title_text=\"Number of Cases\")\nfig.update_layout(title_text='Total Cases per Country')\nfig.show()","7b3dd213":"# Visualizing the time Series data \nfig = go.Figure()\nfig.add_trace(go.Scatter(x=full_data_Estonia['date'], y=full_data_Estonia['total_deaths'],name='Estonia'))\nfig.add_trace(go.Scatter(x=full_data_Latvia['date'], y=full_data_Latvia['total_deaths'],name='Latvia'))\nfig.add_trace(go.Scatter(x=full_data_Lithuania['date'], y=full_data_Lithuania['total_deaths'],name='Lithuania'))\nfig.add_trace(go.Scatter(x=full_data_Denmark['date'], y=full_data_Denmark['total_deaths'],name='Denmark'))\nfig.add_trace(go.Scatter(x=full_data_Finland['date'], y=full_data_Finland['total_deaths'],name='Finland'))\nfig.add_trace(go.Scatter(x=full_data_Iceland['date'], y=full_data_Iceland['total_deaths'],name='Iceland'))\nfig.add_trace(go.Scatter(x=full_data_Norway['date'], y=full_data_Norway['total_deaths'],name='Norway'))\nfig.add_trace(go.Scatter(x=full_data_Sweden['date'], y=full_data_Sweden['total_deaths'],name='Sweden'))\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"Year\")\nfig.update_yaxes(title_text=\"Number of Cases\")\nfig.update_layout(title_text='Death Cases per Country')\nfig.show()","08105c43":"# Extracting only data of Nepal\ndef return_north_europe(location):\n    if(location in ['Estonia', 'Latvia', 'Lithuania', 'Denmark', 'Finland', 'Iceland', 'Norway', 'Sweden']):\n        return True\n    else:\n        return False\n\nfull_data_total_northeurope = full_data_total[full_data_total['location'].apply(return_north_europe)]\n\nfull_data_total_northeurope_present_sort = full_data_total_northeurope.sort_values('total_cases', ascending=False)\nfull_data_total_northeurope_present_sort.iplot(x='location', y=['total_cases', 'total_deaths'], kind='bar', xTitle='Country', yTitle='Number of Cases', title='North European CoronaVirus Cases and Death Cases')","58df91f5":"# Extracting only data of Nepal\ndef return_nepal(location):\n    if(location in ['Nepal']):\n        return True\n    else:\n        return False\n\nfull_data_nepal = full_data[full_data.location.apply(return_nepal)]\n\n# Visualizing the time Series data \nfig = go.Figure()\nfig.add_trace(go.Scatter(x=full_data_nepal['date'], y=full_data_nepal['total_cases'], fill='tozeroy',name='Total Cases'))\nfig.add_trace(go.Scatter(x=full_data_nepal['date'], y=full_data_nepal['total_deaths'], fill='tozeroy',name='Total Death'))\n\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"Year\")\nfig.update_yaxes(title_text=\"Number of Cases\")\nfig.show()","7be8330f":"import plotly.express as px \n\n#New CoronaVirus Cases \nfig = px.box(full_data_nepal, y='new_cases', title='CoronaVirus New Cases Per Day')\nfig.show()","3e98ed13":"#New CoronaVirus Death Cases \nfig = px.box(full_data_nepal, y='new_deaths', title='CoronaVirus New Death Cases Per Day')\nfig.show()","253535d4":"full_data_nepal_process = full_data_nepal[['date', 'new_cases', 'new_deaths', 'total_cases',\n       'weekly_cases', 'biweekly_cases'\n       ]]","dbaaaccb":"full_data_nepal_process['date'] = full_data_nepal_process['date'].dt.strftime('%y%m%d')\nfull_data_nepal_process['date'] = full_data_nepal_process['date'].astype(int)\n\nplt.rcParams['figure.figsize'] = (15, 12)\nsns.heatmap(full_data_nepal_process.corr(), cmap='gray', annot=True)\nplt.show()","fc942c95":"full_data_nepal_process['date'].head()\n\nX = full_data_nepal_process[['date', 'total_cases', 'new_cases',\n        'weekly_cases', 'biweekly_cases'\n       ]].to_numpy()\n\n\nY = full_data_nepal_process[['new_deaths']].to_numpy()\n\nfrom sklearn.model_selection import train_test_split\n\n#make the x for train and test (also called validation data) \nx_train,x_test,y_train,y_test = train_test_split(X,Y,train_size=0.9,random_state=42, shuffle=True)","21c87bc7":"from sklearn.neighbors import KNeighborsRegressor\nfrom joblib import dump, load\n\ndef return_error(x_train,x_test,y_train):\n    model = KNeighborsRegressor(algorithm='ball_tree', leaf_size=50, metric='minkowski',\n                    metric_params=None, n_jobs=-1, n_neighbors=14, p=2,\n                    weights='uniform')\n    model.fit(x_train, y_train)\n    dump(model, 'regressor.joblib')\n    \n    predict = model.predict(x_test)\n    return predict","f7db2302":"y_train = y_train.ravel()\npredict = return_error(x_train,x_test,y_train)","ca9bd9ce":"from sklearn.metrics import r2_score\n\n#for total cases\nr2_score(y_test, predict)","8404f8bb":"from sklearn.metrics import mean_squared_error\n\n#for total cases\nmean_squared_error(y_test, predict)","6409bf63":"import numpy as np\nimport matplotlib.pyplot as plt\n\nhist1 = y_test\nhist2 = predict\n\nfrom scipy.stats import norm\n\nsns.distplot(hist1,color=\"b\",hist=False, label='Actual Death')\nsns.distplot(hist2,hist=False,color='red', label='Predicted Death')","e0fbc8e7":"# Model Building\n\nModel building and tuning is done using PYCaret which is a AutoML Solution for Machine Learning","5c55acce":"# Facts\n\n1. Highest CoronaVirus Cases in a Day is 5008\n1. Highest CoronaVirus Death Cases in a Day is 19","bcec77d2":"1. Denark has the highest Total cases and Death Cases","041379c8":"1. Morocco has highest number of cases\n2. Even having lesser number of cases than Morocco, Egypt has more death cases","d5158f2e":"# Analyzing Nepal Data","41d657f8":"# Importing and Visualization of data","692f6958":"# New Death Case Prediction","02c656e4":"* Removing the features which will not be with us in present condition for prediction\n* Task to forecast the new death","401328f6":"* Almost all features are highly correlated with eachother","baa42f75":"# Analyzing North European Data","8d19b3ab":"1. India has the highest case in South Asia\n2. Bhutan has the least case of Corona","a561b41d":"# MSE\n\nWhile R Square is a relative measure of how well the model fits dependent variables, Mean Square Error is an absolute measure of the goodness for the fit.","78b3d11a":"# Analyzing North Africa Data","b4b7d73c":"# CoronaVirus\n\n* Coronavirus disease (COVID-19) is an infectious disease caused by a newly discovered coronavirus.\n\n* Most people infected with the COVID-19 virus will experience mild to moderate respiratory illness and recover without requiring special treatment.  Older people, and those with underlying medical problems like cardiovascular disease, diabetes, chronic respiratory disease, and cancer are more likely to develop serious illness.\n \n* The best way to prevent and slow down transmission is to be well informed about the COVID-19 virus, the disease it causes and how it spreads. Protect yourself and others from infection by washing your hands or using an alcohol based rub frequently and not touching your face. \n \n* The COVID-19 virus spreads primarily through droplets of saliva or discharge from the nose when an infected person coughs or sneezes, so it\u2019s important that you also practice respiratory etiquette (for example, by coughing into a flexed elbow).\n\n\n<img src = \"https:\/\/i.pinimg.com\/originals\/a8\/d8\/66\/a8d866c87e75ae65af8a3f167ee1e8f6.gif\"\/>","e8d5b44b":"# Scatter Plot: Actual  VS Predict Salary","bb02924b":"# R2\n\nR Square is calculated by the sum of squared of prediction error divided by the total sum of square which replace the calculated prediction with mean. R Square value is between 0 to 1 and bigger value indicates a better fit between prediction and actual value.\n\nFor more Info: [About Value of R2](https:\/\/www.researchgate.net\/post\/What_is_the_acceptable_R-squared_in_the_information_system_research_Can_you_provide_some_references)","6be25a73":"# Substitute Nan with zeros","6d2ec5c4":"# Visualizing Total Cases in Map","3e7bd267":"# Providing datatype to each column","e0ecd874":"# Gaining more insight using BoxPlot","9118fc6c":"# Plotting the graph of total number of cases till date","28db5a15":"# Interesting Facts\n\n1. Top country having highest cases USA, India and Brazil\n2. USA has the highest Corona cases and death cases\n3. Even having less number of Corona Cases than India, Brazil has more death cases","dfab38f6":"# Plotting only the graph of Nepal(TimeSeries)","e7e157b1":"# Analyzing South Asia Data","e983032f":"# Bar Chart : Total Cases and Death Cases","132e73e9":"# Distribution Plot of Actual Deaths VS Predict Deaths","06f13ccd":"# Correlations between Data","39f875ed":"# More Analysis in Coming Days"}}