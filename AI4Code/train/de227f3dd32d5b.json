{"cell_type":{"949f2011":"code","e3b9d115":"code","162af8c1":"code","09605e9b":"code","d2394ff3":"code","bd0595eb":"code","388c3a7e":"code","d33a98ed":"code","e7df4e27":"code","1a5b05fe":"code","40464b6f":"code","a81179c7":"code","519e3829":"code","ddd46c70":"code","7e929dee":"code","f595a481":"code","8da44950":"code","1ad8a8e7":"code","9d63167a":"code","076fbbcf":"code","eccce598":"code","9f2224c0":"code","9b3ebb52":"code","0737eaed":"code","d8e7f1b0":"code","9994286f":"code","0e506884":"code","edaa872a":"code","9d35bc41":"code","f7d4da57":"code","1ab48b0d":"code","a4ed887d":"code","e5132396":"code","f4a242b1":"code","ba8140d8":"code","be216c9b":"code","792eee34":"code","70218f6d":"code","0c9f479f":"code","4893cc74":"code","b1b53c53":"code","2eeb0b57":"code","8797dcca":"code","395b7337":"code","0f78a566":"code","e80440d9":"code","b8c6f39e":"code","a32ca8de":"code","54c1c656":"code","6522cad5":"code","38004cb5":"code","95bab0b0":"code","1ba9e37f":"code","2e9020f2":"code","2c632017":"code","2f8bd65a":"code","b7d3ec13":"code","8e2d8332":"code","91bc4abb":"code","d3322598":"code","6b28ab0b":"code","6571a1bd":"code","17150c6c":"code","d4f53aeb":"code","be843c34":"code","1d5950b7":"code","79ee5078":"code","239b4d59":"code","7048402f":"code","702f460c":"code","e6166eaa":"code","50001410":"code","2c08954d":"code","40f8a0a5":"code","a4446e31":"code","0a8bb397":"code","a29fc8e1":"code","e35d56bd":"code","4b83c248":"code","c37263d4":"code","6c639652":"code","82da5b3b":"code","ae11e6d3":"code","56ded24a":"code","da6ee50c":"code","59c7eada":"code","61af6ba5":"code","822350c6":"code","f5a3ced3":"code","f07c8bc4":"code","11405113":"code","96daeef1":"code","8ea29d74":"code","071d1fa2":"code","ef7184a2":"code","8cedc789":"code","a2063853":"code","ab29e914":"code","fa91bd4f":"code","31631180":"code","872e391c":"code","5dba9923":"code","4e531486":"code","8eb77ca4":"markdown","89ef23b7":"markdown","a993e123":"markdown","6773f513":"markdown","9ba576bd":"markdown","e4788b39":"markdown","d3529c9f":"markdown","81bc771d":"markdown","5f29b292":"markdown","e0b86051":"markdown","563d73fd":"markdown","bdc63a1b":"markdown","a6476fc8":"markdown","7b572b6e":"markdown","3e6ef3a4":"markdown","6cc0d39b":"markdown","3f6a2a3c":"markdown","9930975c":"markdown"},"source":{"949f2011":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom xgboost.sklearn import XGBRFClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import accuracy_score","e3b9d115":"Training_Matches_IPL_2008_2019 = pd.read_csv('\/kaggle\/input\/winnerpredictionchallenge\/Training Matches IPL 2008-2019.csv')\nTestset_Matches_IPL_2020 = pd.read_csv('\/kaggle\/input\/winnerpredictionchallenge\/Testset Matches IPL 2020.csv')","162af8c1":"## just removed latter \"s\" from \"Rising Pune Supergiants\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team1\"] == \"Rising Pune Supergiants\" , \"team1\"]= \"Rising Pune Supergiant\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team2\"] == \"Rising Pune Supergiants\" , \"team2\"]= \"Rising Pune Supergiant\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"winner\"] == \"Rising Pune Supergiants\" , \"winner\"]= \"Rising Pune Supergiant\"","09605e9b":"Training_Matches_IPL_2008_2019[\"winner\"].value_counts()","d2394ff3":"## Removing Team from the winner column though who are not part of ILP 2020\n## \"Gujarat Lions\" , \"Pune Warriors\" , \"Rising Pune Supergiant\" , \"Kochi Tuskers Kerala\" , \"Delhi Daredevils\" , \"Deccan Chargers\"\nTraining_Matches_IPL_2008_2019.drop(index = Training_Matches_IPL_2008_2019[Training_Matches_IPL_2008_2019[\"winner\"] ==\"Gujarat Lions\"].index , inplace = True)\nTraining_Matches_IPL_2008_2019.drop(index = Training_Matches_IPL_2008_2019[Training_Matches_IPL_2008_2019[\"winner\"] ==\"Pune Warriors\"].index , inplace = True)\nTraining_Matches_IPL_2008_2019.drop(index = Training_Matches_IPL_2008_2019[Training_Matches_IPL_2008_2019[\"winner\"] ==\"Rising Pune Supergiant\"].index , inplace = True)\nTraining_Matches_IPL_2008_2019.drop(index = Training_Matches_IPL_2008_2019[Training_Matches_IPL_2008_2019[\"winner\"] ==\"Kochi Tuskers Kerala\"].index , inplace = True)\nTraining_Matches_IPL_2008_2019.drop(index = Training_Matches_IPL_2008_2019[Training_Matches_IPL_2008_2019[\"winner\"] ==\"Delhi Daredevils\"].index , inplace = True)\nTraining_Matches_IPL_2008_2019.drop(index = Training_Matches_IPL_2008_2019[Training_Matches_IPL_2008_2019[\"winner\"] ==\"Deccan Chargers\"].index , inplace = True)","bd0595eb":"## Replace Mumbai Indians by MI\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team1\"] == \"Mumbai Indians\" , \"team1\"]= \"MI\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team2\"] == \"Mumbai Indians\" , \"team2\"] = \"MI\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"winner\"] == \"Mumbai Indians\" , \"winner\"]= \"MI\"\n\n## Replace Chennai Super Kings by CSK\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team1\"] == \"Chennai Super Kings\" , \"team1\"]= \"CSK\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team2\"] == \"Chennai Super Kings\" , \"team2\"] = \"CSK\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"winner\"] == \"Chennai Super Kings\" , \"winner\"]= \"CSK\"\n\n## Replace Royal Challengers Bangalore by RCB\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team1\"] == \"Royal Challengers Bangalore\" , \"team1\"]= \"RCB\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team2\"] == \"Royal Challengers Bangalore\" , \"team2\"] = \"RCB\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"winner\"] == \"Royal Challengers Bangalore\" , \"winner\"]= \"RCB\"\n\n## Replace Kolkata Knight Riders by KKR\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team1\"] == \"Kolkata Knight Riders\" , \"team1\"]= \"KKR\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team2\"] == \"Kolkata Knight Riders\" , \"team2\"] = \"KKR\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"winner\"] == \"Kolkata Knight Riders\" , \"winner\"]= \"KKR\"\n\n## Replace Delhi Capitals by DC\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team1\"] == \"Delhi Capitals\" , \"team1\"]= \"DC\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team2\"] == \"Delhi Capitals\" , \"team2\"] = \"DC\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"winner\"] == \"Delhi Capitals\" , \"winner\"]= \"DC\"\n\n## Replace Kings XI Punjab by KXIP\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team1\"] == \"Kings XI Punjab\" , \"team1\"]= \"KXIP\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team2\"] == \"Kings XI Punjab\" , \"team2\"] = \"KXIP\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"winner\"] == \"Kings XI Punjab\" , \"winner\"]= \"KXIP\"\n\n## Replace Rajasthan Royals by RR\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team1\"] == \"Rajasthan Royals\" , \"team1\"]= \"RR\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team2\"] == \"Rajasthan Royals\" , \"team2\"] = \"RR\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"winner\"] == \"Rajasthan Royals\" , \"winner\"]= \"RR\"\n\n## Replace Sunrisers Hyderabad by SRH\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team1\"] == \"Sunrisers Hyderabad\" , \"team1\"]= \"SRH\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team2\"] == \"Sunrisers Hyderabad\" , \"team2\"] = \"SRH\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"winner\"] == \"Sunrisers Hyderabad\" , \"winner\"]= \"SRH\"\n\n## Replace Gujarat Lions by GL\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team1\"] == \"Gujarat Lions\" , \"team1\"]= \"GL\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team2\"] == \"Gujarat Lions\" , \"team2\"] = \"GL\"\n\n## Replace Rising Pune Supergiant by RPS\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team1\"] == \"Rising Pune Supergiant\" , \"team1\"]= \"RPS\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team2\"] == \"Rising Pune Supergiant\" , \"team2\"] = \"RPS\"\n\n## Replace Kochi Tuskers Kerala by KTK\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team1\"] == \"Kochi Tuskers Kerala\" , \"team1\"]= \"KTK\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team2\"] == \"Kochi Tuskers Kerala\" , \"team2\"] = \"KTK\"\n\n## Replace Pune Warriors by PW\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team1\"] == \"Pune Warriors\" , \"team1\"]= \"PW\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team2\"] == \"Pune Warriors\" , \"team2\"] = \"PW\"\n\n## Replace Pune Warriors by PW\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team1\"] == \"Delhi Daredevils\" , \"team1\"]= \"DD\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team2\"] == \"Delhi Daredevils\" , \"team2\"] = \"DD\"\n\n## Replace Pune Warriors by PW\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team1\"] == \"Deccan Chargers\" , \"team1\"]= \"DDC\"\nTraining_Matches_IPL_2008_2019.loc[Training_Matches_IPL_2008_2019[\"team2\"] == \"Deccan Chargers\" , \"team2\"] = \"DDC\"","388c3a7e":"## Feature Selection \ntrain_data = pd.DataFrame(Training_Matches_IPL_2008_2019[[\"team1\" , \"team2\" , \"winner\"]])\ntest_data = pd.DataFrame(Testset_Matches_IPL_2020[[\"team1\" , \"team2\"]])","d33a98ed":"## Winner from the team1 : 1 and from the team2 : 2 \ntrain_data.loc[train_data.winner == train_data.team1 , \"winner\"] = 1\ntrain_data.loc[train_data.winner == train_data.team2 , \"winner\"] = 2","e7df4e27":"train_data[\"data\"] = \"train\"\ntest_data[\"data\"] = \"test\"\ntest_data[\"winner\"] = np.nan","1a5b05fe":"test_data = test_data[train_data.columns]","40464b6f":"# Concatinatig the train and test Data \nall_data = pd.concat([train_data,test_data] , axis = 0)","a81179c7":"all_data.head(3)","519e3829":"encode = {\"team1\" :{\"MI\":1 , \"CSK\":2 , \"RCB\":3 , \"KKR\":4 , \"DC\":5 , \"KXIP\" :6 ,\"RR\" : 7 , \"SRH\" : 8 ,\"GL\":9 , \"RPS\" :10 ,\"KTK\" :11 , \"PW\" : 12 , \"DDC\":13 , \"DD\":14} ,\n         \"team2\" : {\"MI\":1 , \"CSK\":2 , \"RCB\":3 , \"KKR\":4 , \"DC\":5 , \"KXIP\" :6 ,\"RR\" : 7 , \"SRH\" : 8 ,\"GL\":9 , \"RPS\" :10 ,\"KTK\" :11 , \"PW\" : 12 , \"DDC\":13 , \"DD\":14}}\n      \nall_data.replace(encode , inplace = True)          ","ddd46c70":"print(all_data.head(3))\n## Check Null value in data \nprint(all_data.isnull().sum())","7e929dee":"## separation of train and test Data\ntrain_data = pd.DataFrame(all_data[all_data['data'] == 'train'])\ntest_data = pd.DataFrame(all_data[all_data['data'] == 'test'])","f595a481":"train_data.drop([\"data\"] , axis = 1 , inplace = True)\ntest_data.drop(['winner', 'data'] , axis =1 , inplace = True)","8da44950":"## Change the Data type of winner cloumn ( String to int )\ntrain_data[\"winner\"] = pd.to_numeric(train_data[\"winner\"] , errors = 'coerce')","1ad8a8e7":"train_data[\"winner\"].isnull().sum()","9d63167a":"## Removing all null value Data\ntrain_data.dropna(inplace = True)","076fbbcf":"## check again null counts\nprint(train_data[\"winner\"].isnull().sum())\n## check data type of all the columns and shape of data\nprint(train_data.dtypes)\nprint(train_data.shape)","eccce598":"# Spliting Train Data in train(70%) and test(traget-30%)\ntrain , test = train_test_split(train_data , test_size = 0.3 , random_state = 42)","9f2224c0":"x_train = train.drop('winner' , axis = 1)\ny_train = train['winner']\n\nx_test = test.drop('winner',axis=1 )\ny_test = test['winner']","9b3ebb52":"x_train.reset_index(drop=True,inplace=True)\ny_train.reset_index(drop=True,inplace=True)","0737eaed":"logr = LogisticRegression(class_weight = 'balanced')","d8e7f1b0":"logr.fit(x_train , y_train)","9994286f":"predicted_prob_logic = logr.predict_proba(x_test)[:,1]\npredict_logic = logr.predict(x_test)","0e506884":"print(\"roc_auc_score : \", roc_auc_score(y_test , predicted_prob_logic))\nprint(\"Accuracy is :\" , accuracy_score(y_test,predict_logic))","edaa872a":"dtree = tree.DecisionTreeClassifier()","9d35bc41":"dtree.fit(x_train , y_train)","f7d4da57":"predicted_prob_dt = dtree.predict_proba(x_test)[:,1]\npredict_dt = dtree.predict(x_test)\n\nprint(\"roc_auc_score : \", roc_auc_score(y_test , predicted_prob_dt))\nprint(\"Accuracy is :\" , accuracy_score(y_test,predict_dt))","1ab48b0d":"params={ 'class_weight':[None,'balanced'], \n        'criterion':['entropy','gini'],\n        'max_depth':[None,5,10,15,20,30,50,70],\n            'min_samples_leaf':[1,2,5,10,15,20], \n            'min_samples_split':[2,5,10,15,20],\n       \"max_leaf_nodes\" : [ 3,5,10,15,20,25,30]}","a4ed887d":"Dec_tree = tree.DecisionTreeClassifier()","e5132396":"random_search=RandomizedSearchCV(Dec_tree , cv=10 , param_distributions=params , scoring='roc_auc', n_iter=10 )","f4a242b1":"random_search.fit(x_train,y_train)","ba8140d8":"random_search.best_estimator_\ndtree=random_search.best_estimator_","be216c9b":"dtree.fit(x_train,y_train)","792eee34":"predicted_prob_dtp= dtree.predict_proba(x_test)[:,1]\npredict_dtp = dtree.predict(x_test)\n\nprint(\"roc_auc_score : \", roc_auc_score(y_test , predicted_prob_dtp))\nprint(\"Accuracy is :\" , accuracy_score(y_test,predict_dtp))","70218f6d":"rf = RandomForestClassifier(verbose = 10 , n_jobs=-1)\nrf.fit(x_train , y_train)","0c9f479f":"predicted_prob_rf= rf.predict_proba(x_test)[:,1]\npredict_rf = rf.predict(x_test)\n\nprint(\"roc_auc_score : \", roc_auc_score(y_test , predicted_prob_rf))\nprint(\"Accuracy is :\" , accuracy_score(y_test,predict_rf))","4893cc74":"def report(results, n_top=2):\n    for i in range(1, n_top + 1):\n        candidates = np.flatnonzero(results['rank_test_score'] == i)\n        for candidate in candidates:\n            print(\"Model with rank: {0}\".format(i))\n            print(\"Mean validation score: {0:.3f} (std: {1:.5f})\".format(\n                  results['mean_test_score'][candidate],\n                  results['std_test_score'][candidate]))\n            print(\"Parameters: {0}\".format(results['params'][candidate]))\n            print(\"\")","b1b53c53":"rfp = RandomForestClassifier(verbose = 10 , n_jobs=-1) ","2eeb0b57":"param_dist = {\"n_estimators\":[100,200,300,500],\n              \"bootstrap\": [True, False],\n              'class_weight':['balanced'], \n                'criterion':['entropy','gini'],\n                'max_depth':[None,5,10,15,20,30,50],\n                'min_samples_leaf':[1,2,5,10,15], \n                'min_samples_split':[2,5,10,15],\n             \"max_leaf_nodes\" : [ 3,5,10,15,20,25,30]}","8797dcca":"random_search = RandomizedSearchCV(rfp, param_distributions=param_dist,n_iter= 50 ,scoring='roc_auc',cv=5)\nrandom_search.fit(x_train, y_train)","395b7337":"report(random_search.cv_results_)\nrandom_search.best_estimator_","0f78a566":"# select the best values from results above, they will vary slightly with each run\nrf_best=RandomForestClassifier(bootstrap=True, class_weight='balanced',\n                       criterion='entropy', max_depth=50, max_features='auto',\n                       max_leaf_nodes=20, min_impurity_decrease=0.0,\n                       min_impurity_split=None, min_samples_leaf=15,\n                       min_samples_split=5, min_weight_fraction_leaf=0.0,\n                       n_estimators=500, n_jobs=-1, oob_score=False,\n                       random_state=None, verbose=10, warm_start=False)","e80440d9":"rf_best.fit(x_train,y_train)","b8c6f39e":"predicted_prob_rfp = rf_best.predict_proba(x_test)[:,1]\npredict_rfp = rf_best.predict(x_test)\n\nprint(\"roc_auc_score : \", roc_auc_score(y_test , predicted_prob_rfp))\nprint(\"Accuracy is :\" , accuracy_score(y_test,predict_rfp))","a32ca8de":"XGB = XGBRFClassifier()","54c1c656":"XGB.fit(x_train , y_train)","6522cad5":"predicted_prob_xgb = XGB.predict_proba(x_test)[:,1]\npredict_xgb = XGB.predict(x_test)\n\nprint(\"roc_auc_score : \", roc_auc_score(y_test , predicted_prob_xgb))\nprint(\"Accuracy is :\" , accuracy_score(y_test,predict_xgb))","38004cb5":"xgb_params = {  \"learning_rate\":[0.01,0.05,0.1,0.3,0.5],\n                \"gamma\":[i\/10.0 for i in range(0,5)],\n                \"max_depth\": [2,3,4,5,6,7,8],\n                \"min_child_weight\":[1,2,5,10],\n                \"max_delta_step\":[0,1,2,5,10],\n                \"subsample\":[i\/10.0 for i in range(5,10)],\n                \"colsample_bytree\":[i\/10.0 for i in range(5,10)],\n                \"colsample_bylevel\":[i\/10.0 for i in range(5,10)],\n                \"reg_lambda\":[1e-5, 1e-2, 0.1, 1, 100], \n                \"reg_alpha\":[1e-5, 1e-2, 0.1, 1, 100],\n                \"scale_pos_weight\":[1,2,3,4,5,6,7,8,9],\n                \"n_estimators\":[100,500,700,1000]}","95bab0b0":"xgb=XGBRFClassifier(objective='binary:logistic')","1ba9e37f":"random_search=RandomizedSearchCV(xgb,n_jobs=-1 , cv=5, n_iter=10 , scoring='roc_auc' , param_distributions=xgb_params)","2e9020f2":"random_search.fit(x_train,y_train)","2c632017":"report(random_search.cv_results_)\nrandom_search.best_estimator_","2f8bd65a":"xgb_best = XGBRFClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=0.7,\n                colsample_bynode=0.8, colsample_bytree=0.9, gamma=0.3,\n                gpu_id=-1, importance_type='gain', interaction_constraints='',\n                learning_rate=0.05, max_delta_step=2, max_depth=3,\n                min_child_weight=1, monotone_constraints='()',\n                n_estimators=1000, n_jobs=0, num_parallel_tree=1000,\n                objective='binary:logistic', random_state=0, reg_alpha=0.1,\n                reg_lambda=1e-05, scale_pos_weight=3, subsample=0.9,\n                tree_method='exact', validate_parameters=1, verbosity=None)","b7d3ec13":"xgb_best.fit(x_train , y_train)","8e2d8332":"predicted_prob_xgbp = xgb_best.predict_proba(x_test)[:,1]\npredict_xgbp = xgb_best.predict(x_test)\n\nprint(\"roc_auc_score : \", roc_auc_score(y_test , predicted_prob_xgbp))\nprint(\"Accuracy is :\" , accuracy_score(y_test,predict_xgbp))","91bc4abb":"GBC = GradientBoostingClassifier()","d3322598":"GBC.fit(x_train , y_train)","6b28ab0b":"predicted_prob_gbm = GBC.predict_proba(x_test)[:,1]\npredict_gbm = GBC.predict(x_test)\n\nprint(\"roc_auc_score : \", roc_auc_score(y_test , predicted_prob_gbm))\nprint(\"Accuracy is :\" , accuracy_score(y_test,predict_gbm))","6571a1bd":"gbm=GradientBoostingClassifier()","17150c6c":"gbm_params={'n_estimators':[50,100,200,500,700],\n           'learning_rate': [0.01,.05,0.1,0.4,0.8,1],\n            'max_depth':[1,2,3,4,5,6,10],\n            'min_samples_split':[2,5,10,20],\n            'min_samples_leaf':[2,5,10,20],\n            'subsample':[0.5,0.8,1],\n           \"max_leaf_nodes\" : [ 3,5,10,15,20,25,30]}","d4f53aeb":"random_search=RandomizedSearchCV(gbm, param_distributions=gbm_params,cv=5, n_iter=10, n_jobs=-1)","be843c34":"random_search.fit(x_train,y_train)","1d5950b7":"report(random_search.cv_results_)\nrandom_search.best_estimator_","79ee5078":"gbm_best = GradientBoostingClassifier(criterion='friedman_mse', init=None,\n                           learning_rate=0.01, loss='deviance', max_depth=10,\n                           max_features=None, max_leaf_nodes=None,\n                           min_impurity_decrease=0.0, min_impurity_split=None,\n                           min_samples_leaf=20, min_samples_split=5,\n                           min_weight_fraction_leaf=0.0, n_estimators=50,\n                           n_iter_no_change=None, presort='auto',\n                           random_state=None, subsample=1, tol=0.0001,\n                           validation_fraction=0.1, verbose=0,\n                           warm_start=False)","239b4d59":"gbm_best.fit(x_train , y_train)","7048402f":"predicted_prob_gbmp = gbm_best.predict_proba(x_test)[:,1]\npredict_gbmp = gbm_best.predict(x_test)\n\nprint(\"roc_auc_score : \", roc_auc_score(y_test , predicted_prob_gbmp))\nprint(\"Accuracy is :\" , accuracy_score(y_test,predict_gbmp))","702f460c":"svm = SVC(probability= True, gamma = 'scale')","e6166eaa":"svm.fit(x_train , y_train)","50001410":"predicted_prob_svm = svm.predict_proba(x_test)[:,1]\npredict_svm = svm.predict(x_test)\n\nprint(\"roc_auc_score : \", roc_auc_score(y_test , predicted_prob_svm))\nprint(\"Accuracy is :\" , accuracy_score(y_test,predict_svm))","2c08954d":"svmClf= SVC(probability= True, class_weight='balanced' ,  gamma = 'scale')","40f8a0a5":"param_grid1 = {'C':[0.01,0.1,1.0],\"kernel\":['linear', 'poly', 'rbf', 'sigmoid']}","a4446e31":"grid = GridSearchCV(svmClf,param_grid=param_grid1,cv=10,scoring=\"roc_auc\")","0a8bb397":"grid.fit(x_train,y_train)\nprint(grid.best_estimator_)","a29fc8e1":"svm_best = SVC(C=1.0, cache_size=200, class_weight='balanced', coef0=0.0,\n    decision_function_shape='ovr', degree=3, gamma='scale', kernel='rbf',\n    max_iter=-1, probability=True, random_state=None, shrinking=True, tol=0.001,\n    verbose=False)","e35d56bd":"svm_best.fit(x_train,y_train)","4b83c248":"predicted_prob_svmp = svm_best.predict_proba(x_test)[:,1]\npredict_svmp = svm_best.predict(x_test)\n\nprint(\"roc_auc_score : \", roc_auc_score(y_test , predicted_prob_svmp))\nprint(\"Accuracy is :\" , accuracy_score(y_test,predict_svmp))","c37263d4":"from sklearn.preprocessing import StandardScaler","6c639652":"b_scalar = StandardScaler()\nb_scalar.fit(x_train)","82da5b3b":"x_train = b_scalar.transform(x_train)\nx_test = b_scalar.transform(x_test)","ae11e6d3":"knn = KNeighborsClassifier(n_neighbors = 35)","56ded24a":"knn.fit(x_train,y_train)","da6ee50c":"predicted_prob_knn = knn.predict_proba(x_test)[:,1]\npredict_knn = knn.predict(x_test)\n\nprint(\"roc_auc_score : \", roc_auc_score(y_test , predicted_prob_knn))\nprint(\"Accuracy is :\" , accuracy_score(y_test,predict_knn))","59c7eada":"base_dt = tree.DecisionTreeClassifier(class_weight='balanced' , max_leaf_nodes =10)","61af6ba5":"adb =AdaBoostClassifier(base_estimator=base_dt)","822350c6":"adb_params={'learning_rate': [0.01,0.1,1], \"n_estimators\":[50,100,200,500,700,900,1100]}","f5a3ced3":"complete_search= RandomizedSearchCV(adb ,param_distributions =adb_params,cv=10,n_jobs=-1,verbose=10)","f07c8bc4":"complete_search.fit(x_train , y_train)","11405113":"report(complete_search.cv_results_)\ncomplete_search.best_estimator_","96daeef1":"adb_best_dt = AdaBoostClassifier(base_estimator=base_dt,learning_rate= 0.01 , n_estimators= 50)\n\nadb_best_dt.fit(x_train,y_train)","8ea29d74":"predicted_prob_adbdt = adb_best_dt.predict_proba(x_test)[:,1]\npredict_adbdt = adb_best_dt.predict(x_test)\n\nprint(\"roc_auc_score : \", roc_auc_score(y_test , predicted_prob_adbdt))\nprint(\"Accuracy is :\" , accuracy_score(y_test,predict_adbdt))","071d1fa2":"base_rf=RandomForestClassifier(class_weight='balanced' , max_leaf_nodes = 20 )","ef7184a2":"adb =AdaBoostClassifier(base_estimator=base_rf)","8cedc789":"adb_params={'learning_rate': [0.01,0.1,1], \"n_estimators\":[50,100,200,500,700]}","a2063853":"complete_search= GridSearchCV(adb ,param_grid=adb_params,cv=10,n_jobs=-1,verbose=10)","ab29e914":"complete_search.fit(x_train , y_train)","fa91bd4f":"report(complete_search.cv_results_)\ncomplete_search.best_estimator_","31631180":"adb_best_rf = AdaBoostClassifier(base_estimator=base_rf,learning_rate= 0.01 , n_estimators= 50)\n\nadb_best_rf.fit(x_train,y_train)","872e391c":"predicted_prob_adbrf = adb_best_rf.predict_proba(x_test)[:,1]\npredict_adbrf = adb_best_rf.predict(x_test)\n\nprint(\"roc_auc_score : \", roc_auc_score(y_test , predicted_prob_adbrf))\nprint(\"Accuracy is :\" , accuracy_score(y_test,predict_adbrf))","5dba9923":"winner = gbm_best.predict(test_data)\nwinner.astype(int)","4e531486":"pd.DataFrame({\"id\":Testset_Matches_IPL_2020[\"id\"] , \"winner\":winner.astype(int)}).to_csv(\"submission.csv\",index = False)","8eb77ca4":"# Adboost with Random Forest","89ef23b7":"# Adboost with Decision Tree","a993e123":"# Random Forest ( Hyperparameter)","6773f513":"# SVM ( Hyperparameter )","9ba576bd":"# (2) Decision Tree","e4788b39":"# (4) xgboost ( XGBRFClassifier)","d3529c9f":"# Xgboost ( Hyperparameter )","81bc771d":"# Submission","5f29b292":"# (1) LogisticRegression","e0b86051":"# (3) Random Forest","563d73fd":"# Decision Tree (Hyperparameter)","bdc63a1b":"# -------------------------Data Prap part completed--------------------------","a6476fc8":"# (6) SVM","7b572b6e":"# (8) Adboost","3e6ef3a4":"# GBM ( Hyperparameter )","6cc0d39b":"# (5) GBM (GradientBoosting)","3f6a2a3c":"### -------------------------------------------- THE END ------------------------------------------------------\n### ------------------------------------------- THANK YOU -----------------------------------------------------","9930975c":"# KNN"}}