{"cell_type":{"1d5f7546":"code","bd4d7da7":"code","d3e6c3d7":"code","58a2bb11":"code","71a7c68d":"code","6a39d39d":"code","11ef850d":"markdown","6f38a8d2":"markdown","55442138":"markdown"},"source":{"1d5f7546":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bd4d7da7":"from sklearn.svm import SVR\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_log_error","d3e6c3d7":"train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\nss = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')\n\ntrain.head()","58a2bb11":"target, train = train.iloc[:, 9:], train.iloc[:, :9]\n\n\ndef preprocessing(df):\n    df.date_time = df.date_time.map(lambda x: float(x[11:13]))\n    return df\n\n\ntrain = preprocessing(train)\ntest = preprocessing(test)\n\ntrain = train.to_numpy()\ntest = test.to_numpy()\ntarget = target.to_numpy()","71a7c68d":"best_model = None\nbest_score = 999999999.\nkf = KFold(n_splits=5, random_state=42, shuffle=True)\nfor tr_idx, val_idx in kf.split(train, y=target):\n    X_train, y_train = train[tr_idx], target[tr_idx]\n    X_val, y_val = train[val_idx], target[val_idx]\n\n    regr_carbon = SVR(C=0.1)\n    regr_carbon.fit(X=X_train, y=y_train[:, 0])\n    regr_benzene = SVR(C=0.1)\n    regr_benzene.fit(X=X_train, y=y_train[:, 1])\n    regr_nitrogen = SVR(C=1.0)\n    regr_nitrogen.fit(X=X_train, y=y_train[:, 2])\n\n    carbon_pred = regr_carbon.predict(X_val)\n    carbon_pred[carbon_pred < 0] = 0.000000001\n    carbon_score = mean_squared_log_error(y_val[:, 0], carbon_pred)\n    \n    benzene_pred = regr_benzene.predict(X_val)\n    benzene_pred[benzene_pred < 0] = 0.000000001\n    benzene_score = mean_squared_log_error(y_val[:, 1], benzene_pred)\n    \n    nitrogen_pred = regr_nitrogen.predict(X_val)\n    nitrogen_pred[nitrogen_pred < 0] = 0.000000001\n    nitrogen_score = mean_squared_log_error(y_val[:, 2], nitrogen_pred)\n\n    fold_score = (carbon_score + benzene_score + nitrogen_score) \/ 3\n    print('carbon:', carbon_score, 'benzene:', benzene_score, 'nitrogen:', nitrogen_score, 'mean:', fold_score)\n    \n    if fold_score < best_score:\n        best_score = fold_score\n        best_model = (regr_carbon, regr_benzene, regr_nitrogen)","6a39d39d":"carbon_test_pred = best_model[0].predict(test)\ncarbon_test_pred[carbon_test_pred < 0] = 0.000000001\nss.iloc[:, 1] = pd.Series(carbon_test_pred)\n\nbenzene_test_pred = best_model[1].predict(test)\nbenzene_test_pred[benzene_test_pred < 0] = 0.000000001\nss.iloc[:, 2] = pd.Series(benzene_test_pred)\n\nnitrogen_test_pred = best_model[2].predict(test)\nnitrogen_test_pred[nitrogen_test_pred < 0] = 0.000000001\nss.iloc[:, 3] = pd.Series(nitrogen_test_pred)\n\nss.to_csv('submission.csv', index=False)","11ef850d":"# Model","6f38a8d2":"# Preprocessing","55442138":"# Load Data"}}