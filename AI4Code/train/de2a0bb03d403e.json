{"cell_type":{"fabd3b5e":"code","8bfcb5a2":"code","3f73e0b8":"code","6836eac3":"code","aebea08c":"code","ecbd5ae9":"code","d7e010d2":"code","a108fa85":"code","94925459":"markdown"},"source":{"fabd3b5e":"import numpy as np \nimport pandas as pd\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport gc\nwarnings.filterwarnings('ignore')\nimport lightgbm as lgb\nfrom bayes_opt import BayesianOptimization\nfrom sklearn.model_selection import GroupKFold, StratifiedKFold, train_test_split\nfrom sklearn import metrics\nfrom sklearn.preprocessing import StandardScaler\npd.set_option('display.max_columns', 10000)\npd.set_option('display.max_rows', 10000)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8bfcb5a2":"def read_data():\n    print('Reading training, testing and submission data...')\n    train = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/train.csv')\n    test = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/test.csv')\n    submission = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/sample_submission.csv', dtype={'time':str})\n    print('Train set has {} rows and {} columns'.format(train.shape[0], train.shape[1]))\n    print('Test set has {} rows and {} columns'.format(test.shape[0], test.shape[1]))\n    return train, test, submission\n\ntrain, test, submission = read_data()","3f73e0b8":"# concatenate data\nbatch = 50\ntotal_batches = 14\ntrain['set'] = 'train'\ntest['set'] = 'test'\ndata = pd.concat([train, test])\nfor i in range(int(total_batches)):\n    data.loc[(data['time'] > i * batch) & (data['time'] <= (i + 1) * batch), 'batch'] = i + 1\ntrain = data[data['set'] == 'train']\ntest = data[data['set'] == 'test']\ntrain.drop(['set'], inplace = True, axis = 1)\ntest.drop(['set'], inplace = True, axis = 1)\ndel data","6836eac3":"# clean batch 8 (check signal vs time of this batch and you will see some rare event)\ndel_ind1 = train[(train['batch']==8) & (train['time']>=364) & (train['time']<=382) & (train['signal'] > 5)].index\ndel_ind2 = train[(train['batch']==8) & (train['time']>=364) & (train['time']<=382) & (train['signal'] < 0)].index\ntrain.drop(del_ind1, axis = 0, inplace = True)\ntrain.drop(del_ind2, axis = 0, inplace = True)\ntrain.reset_index(drop = True, inplace = True)","aebea08c":"def rolling_features(train, test):\n    \n    pre_train = train.copy()\n    pre_test = test.copy()\n    \n        \n    for df in [pre_train, pre_test]:\n        for window in [1000, 5000, 10000, 20000]:\n            \n            # roll backwards\n            df['signalstd_t' + str(window)] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(1).rolling(window).std())\n            df['signalvar_t' + str(window)] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(1).rolling(window).var())\n            df['signalmin_t' + str(window)] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(1).rolling(window).min())\n            df['signalmax_t' + str(window)] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(1).rolling(window).max())\n\n            min_max = (df['signal'] - df['signalmin_t' + str(window)]) \/ (df['signalmax_t' + str(window)] - df['signalmin_t' + str(window)])\n            df['norm_t' + str(window)] = min_max * (np.floor(df['signalmax_t' + str(window)]) - np.ceil(df['signalmin_t' + str(window)]))\n\n            # roll forward\n            df['signalstd_t' + str(window) + '_lead'] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(- window - 1).rolling(window).std())\n            df['signalvar_t' + str(window) + '_lead'] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(- window - 1).rolling(window).var())\n            df['signalmin_t' + str(window) + '_lead'] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(- window - 1).rolling(window).min())\n            df['signalmax_t' + str(window) + '_lead'] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(- window - 1).rolling(window).max())\n            \n            min_max = (df['signal'] - df['signalmin_t' + str(window) + '_lead']) \/ (df['signalmax_t' + str(window) + '_lead'] - df['signalmin_t' + str(window) + '_lead'])\n            df['norm_t' + str(window) + '_lead'] = min_max * (np.floor(df['signalmax_t' + str(window) + '_lead']) - np.ceil(df['signalmin_t' + str(window) + '_lead']))\n                \n    del train, test, min_max\n    \n    return pre_train, pre_test\n\ndef static_batch_features(df):\n    \n    # thanks to https:\/\/www.kaggle.com\/jazivxt\/physically-possible for this feature engineering part\n    df = df.sort_values(by=['time']).reset_index(drop=True)\n    df.index = ((df.time * 10_000) - 1).values\n    df['batch'] = df.index \/\/ 25_000\n    df['batch_index'] = df.index  - (df.batch * 25_000)\n    df['batch_slices'] = df['batch_index']  \/\/ 2500\n    df['batch_slices2'] = df.apply(lambda r: '_'.join([str(r['batch']).zfill(3), str(r['batch_slices']).zfill(3)]), axis=1)\n\n    for c in ['batch','batch_slices2']:\n        d = {}\n        d['mean'+c] = df.groupby([c])['signal'].mean()\n        d['median'+c] = df.groupby([c])['signal'].median()\n        d['max'+c] = df.groupby([c])['signal'].max()\n        d['min'+c] = df.groupby([c])['signal'].min()\n        d['std'+c] = df.groupby([c])['signal'].std()\n        d['mean_abs_chg'+c] = df.groupby([c])['signal'].apply(lambda x: np.mean(np.abs(np.diff(x))))\n        d['abs_max'+c] = df.groupby([c])['signal'].apply(lambda x: np.max(np.abs(x)))\n        d['abs_min'+c] = df.groupby([c])['signal'].apply(lambda x: np.min(np.abs(x)))\n        d['range'+c] = d['max'+c] - d['min'+c]\n        d['maxtomin'+c] = d['max'+c] \/ d['min'+c]\n        d['abs_avg'+c] = (d['abs_min'+c] + d['abs_max'+c]) \/ 2\n        for v in d:\n            df[v] = df[c].map(d[v].to_dict())\n\n    for c in [c1 for c1 in df.columns if c1 not in ['time', 'signal', 'open_channels', 'batch', 'batch_index', 'batch_slices', 'batch_slices2']]:\n        df[c+'_msignal'] = df[c] - df['signal']\n        \n    df.reset_index(drop = True, inplace = True)\n        \n    return df\n\n# feature engineering\npre_train1, pre_test1 = rolling_features(train, test)\npre_train2 = static_batch_features(train)\npre_test2 = static_batch_features(test)\n\n# join features for training\nfeat = [col for col in pre_train2.columns if col not in ['open_channels', 'signal', 'time', 'batch', 'batch_index', 'batch_slices', 'batch_slices2']]\npre_train = pd.concat([pre_train1, pre_train2[feat]], axis = 1)\npre_test = pd.concat([pre_test1, pre_test2[feat]], axis = 1)\ndel pre_train1, pre_train2, pre_test1, pre_test2\n\ndel train, test\ngc.collect()","ecbd5ae9":"def run_lgb(pre_train, pre_test, features, params, get_sample = True, bayesian = True, verbose_eval = False):\n    \n    pre_train = pre_train.copy()\n    pre_test = pre_test.copy()\n    \n    # get a random sample for faster training\n    if get_sample:\n        pre_train = pre_train.sample(frac = 0.1, random_state = 20)\n    \n    pre_train.reset_index(drop = True, inplace = True)\n    pre_test.reset_index(drop = True, inplace = True)\n    \n    # groupkfold to predict and evaluate unknown batches\n    kf = GroupKFold(n_splits = 10)\n    target = 'open_channels'\n    oof_pred = np.zeros(len(pre_train))\n    y_pred = np.zeros(len(pre_test))\n     \n    for fold, (tr_ind, val_ind) in enumerate(kf.split(pre_train, groups = pre_train['batch'])):\n        x_train, x_val = pre_train[features].iloc[tr_ind], pre_train[features].iloc[val_ind]\n        y_train, y_val = pre_train[target][tr_ind], pre_train[target][val_ind]\n        train_set = lgb.Dataset(x_train, y_train)\n        val_set = lgb.Dataset(x_val, y_val)\n        \n        model = lgb.train(params, train_set, num_boost_round = 10000, early_stopping_rounds = 50, \n                         valid_sets = [train_set, val_set], verbose_eval = verbose_eval)\n        \n        oof_pred[val_ind] = model.predict(x_val)\n        \n        y_pred += model.predict(pre_test[features]) \/ kf.n_splits\n        \n    rmse_score = np.sqrt(metrics.mean_squared_error(pre_train[target], oof_pred))\n    # want to clip and then round predictions (you can get a better performance using optimization to found the best cuts)\n    oof_pred = np.round(np.clip(oof_pred, 0, 10)).astype(int)\n    round_y_pred = np.round(np.clip(y_pred, 0, 10)).astype(int)\n    f1 = metrics.f1_score(pre_train[target], oof_pred, average = 'macro')\n    \n    if bayesian:\n        return rmse_score\n    else:\n        print(f'Our oof rmse score is {rmse_score}')\n        print(f'Our oof macro f1 score is {f1}')\n        return round_y_pred\n\n# features were picked with forward feature selection technique\nfeatures = ['norm_t10000', 'signalstd_t1000', 'signalvar_t1000', 'norm_t1000', 'signalstd_t1000_lead', 'signalvar_t1000_lead', 'norm_t1000_lead', 'signalstd_t5000', 'signalvar_t5000', \n            'norm_t5000', 'signalstd_t5000_lead', 'signalvar_t5000_lead', 'norm_t5000_lead', 'signalstd_t10000', 'signalvar_t10000', 'norm_t10000_lead', 'signalstd_t20000', \n            'signalvar_t20000', 'stdbatch', 'rangebatch', 'stdbatch_slices2', 'rangebatch_slices2', 'maxtominbatch_slices2', 'meanbatch_msignal', 'medianbatch_msignal', \n            'maxbatch_msignal', 'rangebatch_msignal', 'meanbatch_slices2_msignal']","d7e010d2":"def run_lgb_bayesian(num_leaves, max_depth, lambda_l1, lambda_l2, bagging_fraction, bagging_freq, colsample_bytree, learning_rate):\n    \n    params = {\n        'boosting_type': 'gbdt',\n        'metric': 'rmse',\n        'objective': 'regression',\n        'n_jobs': -1,\n        'seed': 236,\n        'num_leaves': int(num_leaves),\n        'learning_rate': learning_rate,\n        'max_depth': int(max_depth),\n        'lambda_l1': lambda_l1,\n        'lambda_l2': lambda_l2,\n        'bagging_fraction': bagging_fraction,\n        'bagging_freq': int(bagging_freq),\n        'colsample_bytree': colsample_bytree,\n        'verbose': 0\n    }\n    \n    # use samples to make bayesian optimization faster (just for experimentation purposes, better to do it with the full training set)\n    rmse_score = run_lgb(pre_train, pre_test, features, params, True, True, False)\n    return -rmse_score\n\n\n# run bayezian optimization with optimal features\n\nbounds_lgb = {\n    'num_leaves': (20, 300),\n    'max_depth': (8, 100),\n    'lambda_l1': (0, 5),\n    'lambda_l2': (0, 5),\n    'bagging_fraction': (0.4, 1),\n    'bagging_freq': (1, 10),\n    'colsample_bytree': (0.4, 1),\n    'learning_rate': (0.025, 0.2)\n}\n\nlgb_bo = BayesianOptimization(run_lgb_bayesian, bounds_lgb, random_state = 236)\nlgb_bo.maximize(init_points = 20, n_iter = 20, acq = 'ucb', xi = 0.0, alpha = 1e-6)\n\nparams = {\n    'boosting_type': 'gbdt',\n    'metric': 'rmse',\n    'objective': 'regression',\n    'n_jobs': -1,\n    'seed': 236,\n    'num_leaves': int(lgb_bo.max['params']['num_leaves']),\n    'learning_rate': lgb_bo.max['params']['learning_rate'],\n    'max_depth': int(lgb_bo.max['params']['max_depth']),\n    'lambda_l1': lgb_bo.max['params']['lambda_l1'],\n    'lambda_l2': lgb_bo.max['params']['lambda_l2'],\n    'bagging_fraction': lgb_bo.max['params']['bagging_fraction'],\n    'bagging_freq': int(lgb_bo.max['params']['bagging_freq']),\n    'colsample_bytree': lgb_bo.max['params']['colsample_bytree']}","a108fa85":"round_y_pred = run_lgb(pre_train, pre_test, features, params, False, False, 100)\nsubmission['open_channels'] = round_y_pred\nsubmission.to_csv('submission.csv', index = False)","94925459":"# Comments\n\n* In all the public notebooks they are using KFold or StratifiedKFold.\n* In this notebook im going to make a model that uses GroupKFold (predict and evaluate with an unknown batch)\n* Features were selected with forward feature selection technique\n\nCheers, and have a nice competition!!."}}