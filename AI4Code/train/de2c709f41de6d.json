{"cell_type":{"994e2b6d":"code","f8fd286c":"code","5decd1d2":"code","6f9cb6fc":"code","787fbeb0":"code","60d7a469":"code","d259f385":"code","9a8b08a9":"code","b9816db0":"code","421f3132":"code","549ae3c4":"code","101c75f4":"code","fd483658":"code","a365bcd4":"markdown","483c945d":"markdown"},"source":{"994e2b6d":"import pickle\nimport numpy as np\nimport pandas as pd\nfrom skimage import color\nfrom sklearn.svm import SVC\nfrom skimage import exposure\nfrom skimage.feature import hog\nimport matplotlib.pyplot as plt\nfrom skimage.transform import resize\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report","f8fd286c":"Xtr=np.loadtxt(\"..\/input\/classify-dress-and-tshirts\/TrainData.csv\")\nYtr=np.loadtxt(\"..\/input\/classify-dress-and-tshirts\/TrainLabels.csv\")\nprint(Xtr.shape)\nprint(Ytr.shape)","5decd1d2":"plt.imshow(Xtr[0].reshape([28, 28]))","6f9cb6fc":"img = Xtr[0].reshape([28,28])\nfd, hog_image = hog(img, orientations=8, pixels_per_cell=(4, 4), \n          cells_per_block=(1, 1), visualize=True, multichannel=None)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4), sharex=True, sharey=True) \nhog_image_rescaled = exposure.rescale_intensity(hog_image, in_range=(0, 10))\nax1.imshow(img) \nax2.imshow(hog_image_rescaled, cmap=plt.cm.gray)\nplt.show()","787fbeb0":"def get_hog_features(imgs, hog_features, hog_images):\n    divider = 1000\n    for i in range(imgs.shape[0]):\n        img = imgs[i].reshape([28,28])\n#         img = resize(img, (128,64))\n        fd, hog_image = hog(img, orientations=8, pixels_per_cell=(4, 4), \n                   cells_per_block=(1, 1), visualize=True, multichannel=None)\n        hog_features.append(fd)\n        hog_images.append(hog_image)\n        if (i+1)\/divider==1:\n            divider+=1000\n            print('*', end='')\n    print('Done!')","60d7a469":"hog_features = []\nhog_images = []\nget_hog_features(Xtr, hog_features, hog_images)\nhog_features = np.array(hog_features)\nprint(hog_features.shape)","d259f385":"X_train, X_test, Y_train, Y_test = train_test_split(hog_features, Ytr, test_size=0.15, random_state=42)\nprint('X Train : ', X_train.shape)\nprint('Y Train : ', Y_train.shape)\nprint('X Test : ', X_test.shape)\nprint('Y Test : ', Y_test.shape)","9a8b08a9":"model1 = SVC()\nmodel1.fit(X_train, Y_train)","b9816db0":"pickle.dump(model1, open('SVC_Model.sav', 'wb'))","421f3132":"model_SVC = pickle.load(open('SVC_Model.sav', 'rb'))\ny_pre = model_SVC.predict(X_test)\nprint(accuracy_score(y_pre, Y_test)*100)\nprint('')\nprint(confusion_matrix(y_pre, Y_test))\nprint('')\nprint(classification_report(y_pre, Y_test))","549ae3c4":"model3 = GaussianNB()\nmodel3.fit(X_train, Y_train)","101c75f4":"pickle.dump(model3, open('GaussianNB_Model.sav', 'wb'))","fd483658":"model_GaussianNB = pickle.load(open('GaussianNB_Model.sav', 'rb'))\ny_pre = model_GaussianNB.predict(X_test)\nprint(accuracy_score(y_pre, Y_test)*100)\nprint('')\nprint(confusion_matrix(y_pre, Y_test))\nprint('')\nprint(classification_report(y_pre, Y_test))","a365bcd4":"#  GaussianNB Model","483c945d":"#  SVC Model"}}