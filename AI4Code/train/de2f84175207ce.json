{"cell_type":{"be8b4757":"code","48cce988":"code","4ea2b3f6":"code","5bd92ecc":"code","9287a96b":"code","aa0df34c":"code","bdc64d17":"code","823f7147":"code","bdf58e23":"code","a41df688":"code","6f67ef4e":"code","5bb22230":"code","020fd82a":"code","de3f1211":"code","df2185b4":"code","4fa9c8ac":"code","7cb867c5":"code","6090aede":"code","72d52d56":"code","5291a701":"code","0a17511d":"code","dc01cc7a":"code","39484eb3":"code","297ed870":"code","ac56fd49":"code","3fcf70ef":"code","02ffbcd4":"code","8e7f49ec":"code","9247887d":"code","245c44f8":"code","4326add2":"code","47dd4b8d":"code","0c739082":"code","f7039de8":"code","d82d9932":"code","be913317":"code","57551040":"code","18d71731":"code","c9c25e0f":"code","40d41362":"code","fcb25cee":"code","16aee56e":"code","b45ff0d4":"code","4ed75d2c":"code","db90450a":"code","a49d2995":"markdown","1f774af2":"markdown","dc667993":"markdown","f293ba5f":"markdown","22ac5145":"markdown","b1253403":"markdown","1faf850e":"markdown","ebe2b823":"markdown","752c5e51":"markdown","9e9c809f":"markdown","9c921b4e":"markdown","5395a9f6":"markdown"},"source":{"be8b4757":"from IPython.display import HTML\n\nHTML('''<script>\ncode_show=true; \nfunction code_toggle() {\n if (code_show){\n $('div.input').hide();\n } else {\n $('div.input').show();\n }\n code_show = !code_show\n} \n$( document ).ready(code_toggle);\n<\/script>\n<form action=\"javascript:code_toggle()\"><input type=\"submit\" value=\"Click here to toggle on\/off the raw code\"><\/form>''')","48cce988":"import os\nfrom pathlib import Path\nimport json\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom fuzzywuzzy import fuzz, process\nfrom matplotlib.colors import Normalize\nfrom matplotlib import cm\nfrom itertools import product\nimport copy\nimport seaborn as sns\nimport colorcet as cc\nfrom scipy.stats.kde import gaussian_kde\nfrom bokeh.io import output_file, output_notebook, show\noutput_notebook()\nfrom bokeh.models import ColumnDataSource, FixedTicker, PrintfTickFormatter\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.perceptions import probly\n# import branca\n# import geopandas as gpd\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nimport folium.plugins\nimport folium\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nimport time\nfrom datetime import datetime, date\nimport warnings\nwarnings.filterwarnings('ignore')","4ea2b3f6":"df = pd.read_csv('..\/input\/covid19\/global.csv')","5bd92ecc":"print(\"Period ranging from \", df[\"Date\"].min(), \"to\", df[\"Date\"].max())\nstart_date = date(2020,1,22)\nend_date = date(2020,3,26)\ndelta = end_date - start_date\nprint(\"Number of days for analysis : \", delta.days)\nprint(\"Number of countries : \", df[\"Country_Region\"].nunique())\nprint(\"Records without an assigned country :\", df[\"Country_Region\"].isna().sum())\nprint(\"Records without an assigned province :\", df[\"Province_State\"].isna().sum())\nprint(\"Countries with assigned Province\/State : \", df[df['Province_State'].isna()==False]['Country_Region'].nunique())\nprint(\"that are : \", df[df['Province_State'].isna()==False]['Country_Region'].unique())","9287a96b":"confirmed_cases_date = df.groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_date = df.groupby(['Date']).agg({'Fatalities':['sum']})\nsituation_date = confirmed_cases_date.join(fatalities_date)","aa0df34c":"fatality_ratio = fatalities_date.values\/confirmed_cases_date.values\n\nwith plt.style.context(style='seaborn-pastel'):\n    fig, ax1 = plt.subplots(1, 1, figsize=(14,9))\n    situation_date.plot(ax=ax1 ,lw=2);\n    ax1.set_xlabel('Dates', size=18)\n    ax1.set_ylabel('Global Cases', size = 16)\n    ax1.tick_params(axis='y')\n    for i in np.linspace(0,60,num=7):\n        \n        ax1.text(x=i, y=(fatalities_date.values[int(i)]), s=int(fatalities_date.values[int(i)]), size=15)\n\n    ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n\n    color = 'tab:red'\n    ax2.plot((fatality_ratio)*100, color=color, marker='o', linestyle='dashed')\n    ax2.set_ylabel('Fatalities(%)', color=color, size = 18, rotation= 0, position = (0,0.5), labelpad=40)\n    ax2.tick_params(axis='y', labelcolor=color)\n    fig.tight_layout() \n    plt.title('Confirmed Cases, Number of deaths and Fatality rate across the world', size=20, pad=20)\n    legend = ax1.legend(['Confirmed Cases', 'Fatalities'], loc='upper center', shadow=True, fontsize='x-large')\n    legend.get_frame().set_facecolor('#FBE8CC')\n    plt.show()","bdc64d17":"complete_df = pd.read_csv(\"..\/input\/covid19\/complete_df.csv\")\n\ncomplete_df[\"Active\"] = complete_df[\"Confirmed\"] - complete_df[\"Deaths\"] - complete_df[\"Recovered\"]\n\ncomplete_df[['Province\/State']] = complete_df[['Province\/State']].fillna('')\ncomplete_df[['Confirmed', 'Deaths', 'Recovered', 'Active']] = complete_df[['Confirmed', 'Deaths', 'Recovered', 'Active']].fillna(0)\n\nglobal_time_series = complete_df.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active', 'Lat', 'Long'].sum().sort_values(by='Confirmed').reset_index()\nglobal_time_series['%Fatality'] = round((global_time_series['Deaths']\/global_time_series['Confirmed'])*100,2)","823f7147":"tmp = global_time_series[global_time_series['Confirmed']==max(global_time_series['Confirmed'])].reset_index(drop=True)\ntree_map = tmp.melt(id_vars=\"Date\", value_vars=['Deaths', 'Recovered', 'Active'])\nfig = px.treemap(tree_map, path=[\"variable\"], values=\"value\", height=500, width=600, \n                 title='Overview of the current health crisis (03\/26\/2020)')\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","bdf58e23":"current_global_situation = complete_df[complete_df[\"Date\"] == '3\/26\/20']\ncurrent_global_situation = current_global_situation.groupby(['Country\/Region', 'Lat', 'Long']).sum().reset_index()","a41df688":"fig = px.scatter_geo(current_global_situation, lat='Lat', lon='Long', color=\"Confirmed\",\n                     hover_name=\"Country\/Region\", size=\"Confirmed\",\n                     projection=\"natural earth\", size_max=60, title='COVID-19 Current situation across the world')\nfig.show()","6f67ef4e":"fig = px.scatter_geo(complete_df, lat='Lat', lon='Long', color=\"Confirmed\",\n                     hover_name=\"Country\/Region\", size=\"Confirmed\",\n                     projection=\"natural earth\", size_max=60, animation_frame=\"Date\",\n                     title='COVID-19 Spread through time')\nfig.show()","5bb22230":"countries = current_global_situation.groupby(\"Country\/Region\").sum().sort_values(\"Confirmed\", ascending=False).reset_index()[\"Country\/Region\"][:20].values\nactive = current_global_situation.groupby(\"Country\/Region\").sum().sort_values(\"Confirmed\", ascending=False).reset_index()[\"Active\"][:20].values\ndeaths = current_global_situation.groupby(\"Country\/Region\").sum().sort_values(\"Confirmed\", ascending=False).reset_index()[\"Deaths\"][:20].values\nrecovered = current_global_situation.groupby(\"Country\/Region\").sum().sort_values(\"Confirmed\", ascending=False).reset_index()[\"Recovered\"][:20].values\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=active,\n    y=countries,\n    marker=dict(color=\"gold\", size=12),\n    mode=\"markers\",\n    name=\"Active\",\n))\n\nfig.add_trace(go.Scatter(\n    x=deaths,\n    y=countries,\n    marker=dict(color=\"crimson\", size=12),\n    mode=\"markers\",\n    name=\"Deaths\",\n))\n\nfig.add_trace(go.Scatter(\n    x=recovered,\n    y=countries,\n    marker=dict(color=\"green\", size=12),\n    mode=\"markers\",\n    name=\"Recovered\",\n))\n\nfig.update_layout(title=\"Top 20 Countries Comparison\",\n                  xaxis_title=\"Total number of cases\",\n                  yaxis_title=\"Countries\", width=600, height=800)\n\nfig.show()","020fd82a":"tmp = current_global_situation\ntmp[\"world\"] = \"world\" # in order to have a single root node\nfig = px.treemap(tmp, path=['world', 'Country\/Region'], values='Confirmed',\n                  color='Confirmed', hover_data=['Country\/Region'],\n                  color_continuous_scale='RdBu', width=600, height=700, title='COVID-19 : Grasp some sense of proportions')\nfig.show()","de3f1211":"EU_countries = ['Switzerland','Italy','Spain','France','Germany']\ncomplete_df['Date'] = pd.to_datetime(complete_df['Date'])\ntt = complete_df[complete_df[\"Country\/Region\"].isin(EU_countries)].groupby(by=[\"Country\/Region\",\"Date\"]).sum().reset_index()","df2185b4":"date_series = pd.date_range(start='2020-01-22', end='2020-03-26')\n\np = figure(plot_width = 600, plot_height = 600, title=\"Comparison of COVID-19 Spread across major EU countries\", \n           x_axis_type='datetime', y_range=(100, 90000),\n           x_axis_label='Dates', y_axis_label='Confirmed Cases',\n           background_fill_color=\"#fafafa\")\n    \np.line(date_series, tt[tt[\"Country\/Region\"]==\"Spain\"][[\"Confirmed\"]].values.tolist(),\n       legend_label=\"Spain\",\n       line_color=\"tomato\", line_dash=\"dashed\", line_width=3)\n\n\np.line(date_series, tt[tt[\"Country\/Region\"]==\"Germany\"][[\"Confirmed\"]].values.tolist(),\n       legend_label=\"Germany\",\n       line_color=\"purple\", line_dash=\"dashed\", line_width=3)\n\n\np.line(date_series, tt[tt[\"Country\/Region\"]==\"Italy\"][[\"Confirmed\"]].values.tolist(),\n       legend_label=\"Italy\",\n       line_color=\"green\", line_dash=\"dashed\", line_width=3)\n\n\np.line(date_series, tt[tt[\"Country\/Region\"]==\"Switzerland\"][[\"Confirmed\"]].values.tolist(),\n       legend_label=\"Switzerland\",\n       line_color=\"black\", line_dash=\"dashed\", line_width=3)\n\n\np.line(date_series, tt[tt[\"Country\/Region\"]==\"France\"][[\"Confirmed\"]].values.tolist(),\n       legend_label=\"France\",\n       line_color=\"blue\", line_dash=\"dashed\", line_width=3)\n\np.title.text_font_size = '18pt'\n\np.legend.location = \"top_left\"\n\nshow(p)","4fa9c8ac":"world = pd.read_csv(\"..\/input\/covid19\/w_bank.csv\")\nworld = world.drop(columns= ['Year', 'Year Code', 'Series Code'])","7cb867c5":"cols = [col for col in world.columns if col in ['Series Name', 'Italy [ITA]', 'United Kingdom [GBR]', 'Canada [CAN]',\n                                                'China [CHN]', 'France [FRA]', 'Germany [DEU]', 'Sweden [SWE]',\n                                                'Spain [ESP]', 'Switzerland [CHE]', 'United States [USA]']]\n\nworld = world[cols]\nworld.set_index('Series Name', inplace=True)","6090aede":"world.rename(columns={\"Italy [ITA]\": \"Italy\", \"United Kingdom [GBR]\": \"United Kingdom\", \"Canada [CAN]\": \"Canada\",\n                     \"China [CHN]\": \"China\", \"France [FRA]\": \"France\", \"Germany [DEU]\": \"Germany\",\n                     \"Sweden [SWE]\": \"Sweden\", \"Spain [ESP]\": \"Spain\", \"Switzerland [CHE]\": \"Switzerland\",\n                     \"United States [USA]\" :\"US\"}, inplace=True)\nworld = world.T\nworld.dropna(axis='columns', inplace=True)\nworld = world.sort_index()","72d52d56":"cols = [col for col in world.index.tolist()]\nsmoke = pd.read_csv(\"..\/input\/covid19\/smoke.csv\")\nsmoke = smoke.sort_values(by=\"name\")\nsmoke.iloc[-6,0] = 'US'\nsmoke = smoke[smoke.name.isin(cols)]","5291a701":"overweight = pd.read_csv(\"..\/input\/covid19\/overweight.csv\", index_col=0)\noverweight = overweight.sort_index()\noverweight = overweight.rename(index={'United States of America': 'US', \n                                      'United Kingdom of Great Britain and Northern Ireland' : 'United Kingdom'})\noverweight = overweight[overweight.index.isin(cols)]\noverweight[\"2016\"] = overweight[\"2016\"].str.slice(stop=4)\noverweight[\"2016\"] = overweight[\"2016\"].astype(float)","0a17511d":"tmp = complete_df[complete_df[\"Date\"]==\"2020-03-26\"]\ntmp = tmp[tmp[\"Country\/Region\"].isin(world.index)]\ntmp = tmp.groupby(by=\"Country\/Region\").sum().sort_index()\nworld['Confirmed'] = tmp['Confirmed']\nworld['Deaths'] = tmp['Deaths']\nworld['Active'] = tmp['Active']\nworld['Fatality (%)'] = (world['Deaths']\/world['Confirmed'])*100\nworld = world.reset_index()\ncols = [x for x in world.columns if x != 'index']\nfor col in cols :\n    world[col] = pd.to_numeric(world[col],errors='coerce')\nworld.dropna(axis='columns', inplace=True)\nworld.rename(columns={'index':'Country'}, inplace=True)\nb, c = world.iloc[-1].copy(), world.iloc[-2].copy()\nworld.iloc[-1], world.iloc[-2] = c,b\nworld['Smoking Rate (%) (Adult 18+)'] = smoke['totalSmokingRate'].values\nworld['Overweight Prevalence (%) (Adult 18+)'] = overweight['2016'].values","dc01cc7a":"fig_dims = (14, 9)\nfig, ax = plt.subplots(figsize=fig_dims)\n\np=sns.scatterplot(y='Fatality (%)', x='Population ages 65 and above (% of total population)', hue='Country',\n                s=400, hue_norm=(0, 7), palette=\"Set2\", data=world, ax=ax);\n\n# add annotations one by one with a loop\nfor line in range(0,world.shape[0]):\n     p.text(world['Population ages 65 and above (% of total population)'][line]+0.2, world['Fatality (%)'][line], \n             world['Country'][line], horizontalalignment='left', size='medium', color='black', weight='semibold')\n        \n# control x and y limits\nplt.ylim(0, 11)\nplt.xlim(7, 24)\nplt.show()","39484eb3":"fig_dims = (14, 9)\nfig, ax = plt.subplots(figsize=fig_dims)\n\np=sns.scatterplot(y='Fatality (%)', x='Domestic general government health expenditure (% of GDP)', hue='Country',\n                s=400, hue_norm=(0, 7), palette=\"Set2\", data=world, ax=ax);\n\n# add annotations one by one with a loop\nfor line in range(0,world.shape[0]):\n     p.text(world['Domestic general government health expenditure (% of GDP)'][line]+0.2, world['Fatality (%)'][line], \n             world['Country'][line], horizontalalignment='left', size='medium', color='black', weight='semibold')\n        \n# control x and y limits\nplt.ylim(0, 11)\nplt.xlim(0, 16)\nplt.show()","297ed870":"fig_dims = (14, 9)\nfig, ax = plt.subplots(figsize=fig_dims)\n\np=sns.scatterplot(y='Fatality (%)', x='Smoking Rate (%) (Adult 18+)', hue='Country',\n                s=400, hue_norm=(0, 7), palette=\"Set2\", data=world, ax=ax);\n\n# add annotations one by one with a loop\nfor line in range(0,world.shape[0]):\n     p.text(world['Smoking Rate (%) (Adult 18+)'][line]+0.7, world['Fatality (%)'][line], \n             world['Country'][line], horizontalalignment='left', size='medium', color='black', weight='semibold')\n        \n# control x and y limits\nplt.ylim(0, 11)\nplt.xlim(10, 55)\nplt.show()","ac56fd49":"fig_dims = (14, 9)\nfig, ax = plt.subplots(figsize=fig_dims)\n\np=sns.scatterplot(y='Fatality (%)', x='Overweight Prevalence (%) (Adult 18+)', hue='Country',\n                s=400, hue_norm=(0, 7), palette=\"Set2\", data=world, ax=ax);\n\n# add annotations one by one with a loop\nfor line in range(0,world.shape[0]):\n     p.text(world['Overweight Prevalence (%) (Adult 18+)'][line]+1, world['Fatality (%)'][line], \n             world['Country'][line], horizontalalignment='left', size='medium', color='black', weight='semibold')\n        \n# control x and y limits\nplt.ylim(0, 11)\nplt.xlim(30, 100)\nplt.show()","3fcf70ef":"un_data = pd.read_csv('..\/input\/covid19\/un_data.csv')\nkeep_countries = ['Italy', 'United Kingdom', 'Canada','China', 'France', 'Germany', 'Sweden', 'Spain', \n                  'Switzerland', 'United States of America']\nun_data = un_data[un_data[\"country\"].isin(keep_countries)]\nun_data.sort_values(by=\"country\")\nun_data = un_data[['Population density (per km2, 2017)','Urban population (% of total population)',\n                   'Population in thousands (2017)']]\nfor col in un_data.columns :\n    un_data[col] = pd.to_numeric(un_data[col],errors='coerce')\nworld['Pop density\/km\u00b2'] = un_data['Population density (per km2, 2017)'].values\n# world['Urban Pop (%)'] = un_data['Urban population (% of total population)'].values\nworld['Pop (in thousands)'] = un_data['Population in thousands (2017)'].values\nworld['Confirmed (in % of Total Pop)'] = (world['Confirmed'] \/ (world['Pop (in thousands)']*1000))*100","02ffbcd4":"keep_countries = ['Italy', 'United Kingdom', 'Canada','China', 'France', 'Germany', 'Sweden', 'Spain', \n                  'Switzerland', 'US']\ntmp = complete_df[complete_df[\"Country\/Region\"].isin(keep_countries)].groupby(by=[\"Country\/Region\", \"Date\"]).sum()\ntmp = tmp.sort_values(by=[\"Country\/Region\", \"Date\"]).reset_index()\ntmp.iloc[-1,2] # ok\ntmp.drop(tmp[tmp[\"Confirmed\"] < 1].index, inplace=True)\ntmp[\"Spread Rate\"] = tmp[\"Confirmed\"].pct_change()\ntmp = tmp.groupby([\"Country\/Region\"])[[\"Spread Rate\"]].mean()\ntmp.iloc[-1,0] = 0.203527\ntmp.iloc[-2,0] = 0.174214\nworld[\"Average Daily Spread Rate (%)\"] = (tmp.values)*100","8e7f49ec":"fig_dims = (14, 9)\nfig, ax = plt.subplots(figsize=fig_dims)\n\np=sns.scatterplot(y=\"Average Daily Spread Rate (%)\", x='Pop density\/km\u00b2', hue='Country',\n                s=400, hue_norm=(0, 7), palette=\"Set2\", data=world, ax=ax);\n\n# add annotations one by one with a loop\nfor line in range(0,world.shape[0]):\n     p.text(world['Pop density\/km\u00b2'][line]+6, world[\"Average Daily Spread Rate (%)\"][line], \n             world['Country'][line], horizontalalignment='left', size='medium', color='black', weight='semibold')\n        \n# control x and y limits\nplt.ylim(0, 60)\nplt.xlim(0, 300)\nplt.show()","9247887d":"for_corr = world[['Country', 'Population ages 65 and above (% of total population)', 'Smoking Rate (%) (Adult 18+)',\n                  'Domestic general government health expenditure (% of GDP)', \n                  'Overweight Prevalence (%) (Adult 18+)',\n                  'Pop density\/km\u00b2']]\n\nfor_corr.reset_index(drop=True, inplace=True)\nfor_corr.index.name = None\n\nsns.set_style(\"dark\")\n\nfor_corr.corrwith(world['Fatality (%)']).plot(kind='barh',figsize=[9,9], fontsize=12,\n                                              title='Correlation between Fatality Rate and some relevant factors',\n                                              legend=False, grid=True, color='tomato');","245c44f8":"for_corr = world[['Country', 'Population ages 65 and above (% of total population)', 'Smoking Rate (%) (Adult 18+)',\n                  'Domestic general government health expenditure (% of GDP)', \n                  'Overweight Prevalence (%) (Adult 18+)',\n                  'Pop density\/km\u00b2']]\nfor_corr.corrwith(world['Confirmed']).plot(kind='barh',figsize=[9,9], fontsize=12,\n                                           title='Correlation between Confirmed Cases and some relevant factors',\n                                           legend=False, grid=True, color='lightblue');","4326add2":"# ita_df = pd.read_csv('ita_latest.csv')\n# ita_df = ita_df[[\"data\", \"codice_regione\", \"denominazione_regione\", \"lat\", \"long\", \"totale_casi\", \"deceduti\"]]\n# ita_df.to_csv(\"ita_df_clean.csv\")","47dd4b8d":"ita_df = pd.read_csv(\"..\/input\/covid19\/ita_df_clean.csv\")\nita_df = ita_df.applymap(str)","0c739082":"ITA_LAT = 41.902782\nITA_LONG = 12.496366\nfile_path = os.path.join(os.getcwd(),'..\/input\/covid19\/ita.json') \nfile_geojson = json.load(open(file_path))","f7039de8":"locations = ita_df[['lat', 'long']]\nlocationlist = locations.values.tolist()","d82d9932":"# t = folium.Map(location=[ITA_LAT, ITA_LONG], zoom_start=7)\n\n# marker_cluster = folium.plugins.MarkerCluster().add_to(t)\n\n# for point in range(0, len(locationlist)):\n#     folium.Marker(locationlist[point], popup=ita_df['denominazione_regione'][point]\n#                   +' '+'Confirmed:'+ita_df['totale_casi'][point]\n#                   +' '+'Deaths :'+ita_df['deceduti'][point], \n#                   icon=folium.Icon(color=ita_df[\"totale_casi\"][point], \n#                                     icon_color='white', icon='fa-medkit', angle=0, prefix='fa')).add_to(marker_cluster)\n# # https:\/\/fontawesome.com\/v4.7.0\/icons\/\n# t","be913317":"# Make an empty map\nita = folium.Map(location=[ITA_LAT, ITA_LONG], zoom_start=6)\n\n \n# Add marker one by one on the map\nfor point in range(0, len(locationlist)):\n    folium.Circle(\n      location=locationlist[point],\n      popup=ita_df['denominazione_regione'][point]\n                  +' '+'Confirmed:'+ita_df['totale_casi'][point]\n                  +' '+'Deaths :'+ita_df['deceduti'][point],\n      radius=(int(ita_df.iloc[point]['totale_casi'])+7000)*1.8,\n      color='crimson',\n      fill=True,\n      fill_color='crimson'\n   ).add_to(ita)\nita","57551040":"# fr_df = pd.read_csv('fr_latest.csv')\n# fr_df = fr_df[fr_df[\"Date\"]==\"2020\/03\/25\"].T\n# fr_df.drop(fr_df.index[0],inplace=True)\n# fr_df.rename(columns={\"19\": \"Confirmed Cases\"}, inplace=True)\n# ind = fr_df.index\n# fr_df = pd.DataFrame(data=fr_df.values, columns=[\"Confirmed Cases\"], index=ind)\n# fr_df = fr_df.iloc[:13,:]\n# tmp = pd.read_csv('worldcities.csv')\n# tmp = tmp[tmp.country=='France']\n# tmp = tmp[tmp.capital.isin(['admin', 'primary'])]\n# tmp.iloc[0,7] = \"Ile-de-France\"\n# tmp = tmp.sort_values(\"admin_name\")\n# fr_df[\"lat\"] = tmp.lat.values\n# fr_df[\"long\"] = tmp.lng.values\n# fr_df.to_csv(\"fr_df_clean.csv\")","18d71731":"fr_df = pd.read_csv(\"..\/input\/covid19\/fr_df_clean.csv\", index_col=0)\nfr_df = fr_df.applymap(str)","c9c25e0f":"FR_LAT = 46.7\nFR_LONG = 3.5\nfile_path = os.path.join(os.getcwd(),'..\/input\/covid19\/fr.json') \nfile_geojson = json.load(open(file_path))\nlocations = fr_df[['lat', 'long']]\nlocationlist = locations.values.tolist()","40d41362":"# Make an empty map\nfr = folium.Map(location=[FR_LAT, FR_LONG], zoom_start=6)\n\n \n# Add marker one by one on the map\nfor point in range(0, len(locationlist)):\n    folium.Circle(\n      location=locationlist[point],\n      popup=fr_df.index[point]\n                  +' '+'Confirmed:'+fr_df['Confirmed Cases'][point],\n      radius=(int(fr_df.iloc[point]['Confirmed Cases'])+7000)*4,\n      color='crimson',\n      fill=True,\n      fill_color='crimson'\n   ).add_to(fr)\nfr","fcb25cee":"us_df = pd.read_csv('..\/input\/coronavirus-covid19-data-in-the-united-states\/us-states.csv')\nus_current = us_df[us_df[\"date\"]=='2020-03-25']","16aee56e":"us_locations = pd.read_csv(\"..\/input\/covid19\/us_correspondance.csv\")\nus_locations.rename(columns={\"stname\" : \"state\"}, inplace=True)\nus_current = pd.merge(us_current, us_locations[[\"state\",\" stusps\"]], on=\"state\", how=\"left\")\nus_current.rename(columns={\" stusps\" : \"abbrev\"}, inplace=True)","b45ff0d4":"us_current[us_current[\"abbrev\"].isna()]\nus_current.drop(us_current.index[[11,40,48]],inplace=True)","4ed75d2c":"latlong = pd.read_csv(\"..\/input\/usa-latlong-for-state-abbreviations\/statelatlong.csv\")\nlatlong.rename(columns={\"State\" : \"abbrev\", \"City\" : \"state\"}, inplace=True)\nus_current = pd.merge(us_current, latlong[[\"state\",\"Latitude\", \"Longitude\"]], on=\"state\", how=\"left\")","db90450a":"text = us_current['state'] + us_current['abbrev'] + '<br>' + 'Confirmed Cases : ' + us_current['cases'].astype(str)\ndata = [dict(type='scattergeo',locationmode = 'USA-states',\n             lat = us_current.Latitude, lon = us_current.Longitude, \n             text = text, hoverinfo = 'text',\n             marker = dict(size = (us_current.cases + 100) ** 0.46,\n            opacity = 0.8, autocolorscale=True,colorscale = 'Viridis',\n            color = us_current.cases, colorbar = dict(title='Total Confirmed Cases per State')))]\n\n\nlayout = dict(title='U.S Map of COVID-19 Confirmed Cases',\n              geo = dict(scope='usa',projection = dict(type ='albers usa'),showland = True,\n                    landcolor=\"rgb(250,250,250)\",subunitcolor = \"rgb(217,217,217)\",\n                     countrycolor = \"rgb(217,217,217)\",countrywidth=0.5, subunitwidth=0.5))\n\nplotly.offline.iplot({\n    \"data\": data,\n    \"layout\": layout\n})","a49d2995":"<br> <font size=\"3\"> It is really weird that Overweight prevalence shares such a correlation with Confirmed Cases, while it seems to matter less when it comes to Fatality Rate. Plus, one could have intuitively thought that population density per km\u00b2 would share a greater correlation, too.\nIn overall, all the above studied correlations are pretty weak.","1f774af2":"<br> <font size=\"3\"> Interestingly, the death rate dropped a little, then rocketted. As of late March, the death rate is around 4.5% globally, which is pretty high. As we will see later on, this rate is, in fact, very heterogenous. Some countries have an astonishing rate of roughly 10%, while others are more about 1-2%.\n\nThe exponential growth of the Confirmed Cases is clearly visible here.","dc667993":"# COVID-19 | Week 2 : A Data Visualization Approach\n<br>\n<br>\n\n\n![Markdown Logo is here.](https:\/\/media.defense.gov\/2020\/Mar\/09\/2002265190\/780\/780\/0\/200309-D-HN545-003.JPG)\n\n\n<br>\n\n### *Nicolas Hubert, Junior Data Scientist*\n\n*03\/29\/2020*\n\n<br> <font size=\"3\"> \n\n***\n\n*Please note that this report is only intended for data analysis and visualization purposes. The main goal is to show how several Python librairies can be leveraged for analysing real datasets. Please also note that the figures used in this notebook are not up-to-date. If you want to track COVID-19 related data in real time, you might be interested in <a href=\"http:\/\/www.cidrap.umn.edu\/covid-19\/maps-visuals\" target=\"_blank\">this link<\/a> that will provide you with various data visualization alternatives.*\n\n***\n\nThis report is based on multiple datasets from different locations. Most of them were extracted from Kaggle, World Bank Data and GitHub repositories. A lot of data cleaning and preprocessing has been made, so you won't find them as is. Should you want access to all the datasets that have been used, feel free to contact me : nicolas.hubert@eleves.ec-nantes.fr.\nI will then send you the relevant files in order to reproduce the outputs of this notebook.\n\nAll the code used to render the plots can be displayed by cliking on the following button :\n","f293ba5f":"### <font size=\"5\"> Italy <\/font> | <font size=\"3\"> Situation as of 03\/27\/2020 <\/font>","22ac5145":"### <font size=\"5\"> France <\/font> | <font size=\"3\"> Situation as of 03\/27\/2020 <\/font>","b1253403":"<font size=\"3\"> In the following five plots, we aim at showing whether there is some sort of relation between the national death rates and some factors, and the number of confirmed cases per country and some other factors, respectively.\n\nThere is no point in being accurate here. It is enough to grasp some intuitive knowledge about the relationships between variables.","1faf850e":"### <font size=\"5\"> USA <\/font> | <font size=\"3\"> Situation as of 03\/25\/2020 <\/font>\n\n<br> <font size=\"3\"> The USA is our last country to study, firstly because the outbreak is really located in the NY area, and secondly because the Plotly library comes with a pretty neat built-in function for plotting on the US map.","ebe2b823":"## COVID-19 : One country, one outbreak","752c5e51":"## Global Analysis of COVID-19","9e9c809f":"<br> <font size=\"3\"> In the correlation frameworks below, the biggest drivers of the output (either \"Confirmed\" or \"Fatality Rate\") are the input variables (i.e factors) which have the greatest **absolute** correlation value.\n\nCorrelation lies in the range [-1,1], and:\n\n* Negative correlation (correlation < 0) implies that the input and output move in opposite directions - i.e. as the input increases, the output decreases (and vice versa).\n* Nil correlation (correlation == 0) implies that the two variables are completely unrelated.\n* Positive correlation (correlation > 0) implies that the input and output move in the same direction - i.e. as the input increases, the output increases (and vice versa). <\/font>","9c921b4e":"## Import","5395a9f6":"<br> <font size=\"3\"> As expected, we see there is a delay in the COVID-19 spread across EU countries : Italy were obviously the first one to be affected. France, Germany and Spain's health crises took place about ten days later and their respective spread growth are similar (although France growth rate is less steep). Switzerland coronavirus spread a few days later and the growth seems less worrying. **But** Swiss population is only 12.8% that of France. In fact, the growth is even more acute in Switzerland than in any other EU country."}}