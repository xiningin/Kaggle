{"cell_type":{"3cdc4cb7":"code","ba56de86":"code","2757398b":"code","564219bd":"code","db6211ff":"code","d59a4e69":"code","c8fb27c8":"code","96b05250":"code","80b4c3f9":"code","d8218dd0":"code","9215c658":"code","8a0fe41b":"markdown","f188c1f7":"markdown","8b38196e":"markdown","770fd0e8":"markdown","5c03f27d":"markdown"},"source":{"3cdc4cb7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","ba56de86":"class multiple_linear_regression():\n       \n    def train(self, X, y):\n        features = np.append(X,np.ones((len(X),1)),axis=1)\n        self.W = np.dot(np.dot(np.linalg.inv(np.dot(features.T, features)), features.T), y)\n        self.coef_ = self.W[:-1]\n        self.intercept_ = self.W[-1]\n    \n    def predict(self, new_X):\n        nums = len(new_X)\n        preds = np.dot(np.append(new_X,np.ones((nums,1)),axis=1),self.W)\n        self.preds = preds\n        return preds\n    \n    def contrast(self, X, y):\n        Target = pd.DataFrame()\n        Target['Ground Truth'] = y\n        Target['Model Preds'] = self.preds\n        return Target\n    \n    def evaluate(self, X, y):\n        Target = self.contrast(X,y)\n        mse = np.sum((Target['Ground Truth'] - Target['Model Preds'])**2) \/ len(Target)\n        rmse = np.sqrt(mse)\n        r2= 1- np.sum((Target['Ground Truth'] - Target['Model Preds'])**2)\/ np.sum((Target['Ground Truth'] - np.mean(Target['Ground Truth']))**2)\n        print('The root mean square error is %.5f' %rmse)\n        print('The r2 score is %.5f' %r2)\n    \n    def plot(self, X, y):\n        Target = self.contrast(X,y)\n        plt.figure(figsize=(6,5))\n        plt.title('Model prediction VS Ground Truth')\n        plt.xlabel('Ground Truth')\n        plt.ylabel('Model Preds')\n        plt.scatter(Target['Ground Truth'], Target['Model Preds'], c='green', marker='o')\n        plt.plot(np.linspace(np.min(y),np.max(y),100), np.linspace(np.min(y),np.max(y),100), '--', lw=1.5, c='r', label='multiple linear model')\n        plt.legend(loc='upper left')\n        plt.grid()\n        plt.show()","2757398b":"df = pd.read_csv('..\/input\/introduce-data\/insurance.csv')\ndf.head()","564219bd":"df = df[:50]\nX = df.iloc[:,:-1].values\ny = df.charges.values\nX.shape,y.shape","db6211ff":"# Initialize the model and train\nmodel = multiple_linear_regression()\nmodel.train(X,y)","d59a4e69":"# Model prediction\nmodel.predict(X)","c8fb27c8":"# comparison \nmodel.contrast(X,y)","96b05250":"# Regression performance evaluation\nmodel.evaluate(X,y)","80b4c3f9":"# visualization\nmodel.plot(X,y)","d8218dd0":"# Intercept parameter\nmodel.intercept_","9215c658":"# Weight parameter\nmodel.coef_","8a0fe41b":"## Train and Evaluate","f188c1f7":"In this notebook, I will try to create a multiple linear regression model based on the principle. Its function is similar to LinearRegression in [sklearn](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LinearRegression.html). At the same time, I added some simple functions, such as table comparison and visualization, to facilitate machine learning Beginners can better understand the construction and function of multiple regression models in principle.","8b38196e":"## Load Dataset","770fd0e8":"## Model Define","5c03f27d":"## Thank you for your reading !"}}