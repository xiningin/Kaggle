{"cell_type":{"331d5c34":"code","591c1cd1":"code","b5acf503":"code","9c0a67d5":"code","2219fdda":"code","13383c0f":"code","06ba7885":"code","42af0d8e":"code","f0b6c8dd":"code","106df2eb":"code","5f2f34b4":"code","b1539962":"code","96754665":"code","350f3d27":"code","b2ad4ef0":"code","2a82fd6b":"code","9c1b5532":"code","2f428daa":"code","53a466da":"code","14ebbb23":"code","32928aec":"code","d14a0f68":"code","824c7947":"code","3205c75b":"code","4c34e624":"code","18799050":"code","42e1995a":"code","a594dd6e":"code","a4ee5939":"code","fe5ad539":"code","212e4ac8":"code","c6879f15":"code","1a0e72d3":"code","6d9a43f9":"code","ddc5c8d2":"code","c6de7fb6":"code","ebcfaacd":"code","101cf7c2":"code","64ea4080":"code","3779707e":"code","a5690eb1":"code","2951a9ff":"code","086fd8c1":"code","74d2e718":"markdown","7018f631":"markdown","15725faf":"markdown","7aeb2f2c":"markdown","f2779ecc":"markdown","bab3e712":"markdown","8d16dfde":"markdown","7fd0632e":"markdown","6706ee64":"markdown","1e4ae991":"markdown","66de5710":"markdown","9df1080b":"markdown","08c857c8":"markdown","77c50582":"markdown","51794205":"markdown","75d7bd2f":"markdown"},"source":{"331d5c34":"from fastai.tabular import *","591c1cd1":"path = Path('data')","b5acf503":"path.mkdir(parents=True, exist_ok=True)","9c0a67d5":"! cp '..\/input\/train.csv' 'data\/train.csv'","2219fdda":"! cp '..\/input\/test.csv' 'data\/test.csv'","13383c0f":"path.ls()","06ba7885":"df = pd.read_csv(path\/'train.csv')","42af0d8e":"print(df.info())","f0b6c8dd":"print(df.describe())","106df2eb":"df.head()","5f2f34b4":"df['Pclass'].hist()","b1539962":"df['Sex'].value_counts().plot(kind='bar')","96754665":"df['Age'].hist()","350f3d27":"plt.scatter(df['Age'], df['Survived'])","b2ad4ef0":"print(df['Age'].idxmax())\n\ndf = df.drop(df['Age'].idxmax())\n\ndf.reset_index(drop=True, inplace=True)","2a82fd6b":"plt.scatter(df['Age'], df['Survived'])","9c1b5532":"plt.scatter(df['Fare'], df['Survived'])","2f428daa":"df = df[df['Fare'] < 400]\ndf.reset_index(drop=True, inplace=True)","53a466da":"len(df)","14ebbb23":"plt.scatter(df['Fare'], df['Survived'])","32928aec":"df['Embarked'].value_counts().plot(kind='bar')","d14a0f68":"test_df = pd.read_csv(path\/'test.csv')","824c7947":"print(test_df.info())","3205c75b":"print(test_df.describe())","4c34e624":"test_df.head()","18799050":"test_df['Pclass'].hist()","42e1995a":"test_df['Sex'].value_counts().plot(kind='bar')","a594dd6e":"test_df['Age'].hist()","a4ee5939":"test_df['Embarked'].value_counts().plot(kind='bar')","fe5ad539":"all_df = pd.concat([df, test_df], sort=False)\nfare_med = all_df['Fare'].median()\nprint(fare_med)\n\nfor dfa in [df, test_df]:\n    for i, cabin in enumerate(dfa['Cabin']):\n        if pd.isna(cabin):\n            dfa.loc[i, 'Cabin'] = 0\n        else:\n            dfa.loc[i, 'Cabin'] = 1\n\nfor i, fare in enumerate(test_df['Fare']):\n    if pd.isna(fare):\n        test_df.loc[i, 'Fare'] = fare_med\n\ndf['Title'] = df['Name'].str.split(',').str[1].str.split(' ').str[1]\ntest_df['Title'] = test_df['Name'].str.split(',').str[1].str.split(' ').str[1]\n\nprint(df.info())","212e4ac8":"len(df)","c6879f15":"df.head()","1a0e72d3":"df['Title'].value_counts().plot(kind='bar')","6d9a43f9":"dep_var = 'Survived'\ncat_names = ['Pclass', 'Sex', 'SibSp', 'Parch', 'Embarked', 'Title', 'Cabin']\ncont_names = ['Age', 'Fare']\nprocs = [FillMissing, Categorify, Normalize]","ddc5c8d2":"test = TabularList.from_df(test_df, path=path, cat_names=cat_names, cont_names=cont_names)","c6de7fb6":"\"\"\"data = (TabularList.from_df(df, path=path, cat_names=cat_names, cont_names=cont_names, procs=procs)\n                    .split_by_idx(list(range(len(df)-120, len(df)-50)))\n                    .label_from_df(cols=dep_var)\n                    .add_test(test)\n                    .databunch())\"\"\"\ndata = (TabularList.from_df(df, path=path, cat_names=cat_names, cont_names=cont_names, procs=procs)\n                    .split_none()\n                    .label_from_df(cols=dep_var)\n                    .add_test(test)\n                    .databunch())","ebcfaacd":"data.show_batch(rows=10)","101cf7c2":"learner = tabular_learner(data, layers=[200, 100], ps=[0.01, 0.1], emb_drop=0.2, metrics=accuracy)","64ea4080":"learner.lr_find()","3779707e":"learner.recorder.plot()","a5690eb1":"learner.fit(12, slice(2e-2))","2951a9ff":"predictions, *_ = learner.get_preds(DatasetType.Test)\nlabels = np.argmax(predictions, 1)","086fd8c1":"sub_df = pd.DataFrame({'PassengerId': test_df['PassengerId'], 'Survived': labels})\nsub_df.to_csv('submission.csv', index=False)","74d2e718":"## Feature engineering\n* Replace the blank fares in the test set with the median of all the fares\n* Replace the values in Cabin with 0 for no cabin and 1 for cabin\n* Extract the title from name","7018f631":"## Inference: save submission","15725faf":"The dropouts seem to work well.","7aeb2f2c":"Create databunches","f2779ecc":"Briefly inspect the dataframe contents","bab3e712":"### Copy to a non\u2013read-only folder","8d16dfde":"## Read data","7fd0632e":"Repeat for the test dataframe","6706ee64":"### Check new features","1e4ae991":"## Create databunches","66de5710":"Check that the data makes sense","9df1080b":"Remove age outlier","08c857c8":"# fast.ai Titanic","77c50582":"Set up databunch variables","51794205":"Normally, we would use a validation set to ensure we aren't overfitting. However, we will use the full training set for the final submission since the dataset is small.","75d7bd2f":"## Create learner"}}