{"cell_type":{"8c382bbd":"code","29012e58":"code","aabbd01d":"code","74f69a5b":"code","d0f81175":"code","fd1a5842":"code","ddf59c26":"code","0f8f459a":"code","f65ecddd":"code","dae25929":"code","382832e1":"code","ea2348ab":"code","55f256ee":"code","10925868":"code","3e50d55a":"code","da97205e":"code","bb0851b0":"code","2675e76b":"code","fa46cd75":"code","8e94cacc":"code","089dbdc8":"code","d2cf86e9":"code","79447591":"code","daab6841":"code","754a075f":"code","ace1f616":"code","e40cfc51":"code","51f9f12e":"code","fa246493":"code","87a01a70":"code","292cb1e4":"code","3e5588dd":"code","d84d6865":"markdown","53db8422":"markdown","65b7132a":"markdown","44b28af2":"markdown","c57e2c51":"markdown","c1b873f7":"markdown","5dc45cb0":"markdown","2499bed3":"markdown","cededb0e":"markdown","039e00ab":"markdown","ae20100f":"markdown","2644b66c":"markdown","2389ed0c":"markdown","5dd1f0d7":"markdown","c2f187ac":"markdown","204f2749":"markdown","6b388f17":"markdown","a1ac21e6":"markdown","468beb4a":"markdown","a64a3f06":"markdown"},"source":{"8c382bbd":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport warnings\n\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom plotly.subplots import make_subplots\n","29012e58":"dados = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")\n\ndados.head()","aabbd01d":"dados.shape","74f69a5b":"dados.dtypes","d0f81175":"dados.isnull().sum()","fd1a5842":"dados.drop(['director','cast'],axis = 1,inplace = True)","ddf59c26":"dados.isnull().sum()\/len(dados)*100","0f8f459a":"dados.dropna(inplace=True)","f65ecddd":"plt.rcParams['figure.figsize'] = (13, 13)\nwordcloud = WordCloud(stopwords=STOPWORDS,background_color = 'white', width = 800,  height = 800, max_words = 121).generate(' '.join(dados['description']))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('Palavras mais populares na descri\u00e7\u00e3o da Netflix',fontsize = 40)\n\n\n \nplt.imshow(wordcloud)","dae25929":"values = dados[\"type\"].value_counts()\nlabels = [\"Filmes\",\"TV Shows\"]\n\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent',\n                             insidetextorientation='radial',marker_colors=[\"rgb(228,26,28)\",\"rgb(102,102,102)\"]\n                            )])\n\nfig.update_layout(height=600, width=800, title_text=\"Percentual de Filmes e TV Shows\")\nfig.show()","382832e1":"df_anos_movie = dados[dados[\"type\"]== \"Movie\"]\ndf_anos_tv_shows = dados[dados[\"type\"]== \"TV Show\"]\n \ndf_anos_movie.loc[:,[\"ano_lancamento\"]] = 0\ndf_anos_tv_shows.loc[:,[\"ano_lancamento\"]] = 0\n\nwarnings.filterwarnings(\"ignore\")","ea2348ab":"def ano_lancamento (df,data_adicionado):\n    anos_lancamento_lista = []\n    for x in data_adicionado:\n        ano = int(x.split(\", \")[1])\n        anos_lancamento_lista.append(ano)\n    df.loc[:,[\"ano_lancamento\"]] = anos_lancamento_lista\n    \nano_lancamento(df_anos_movie,df_anos_movie[\"date_added\"])\nano_lancamento(df_anos_tv_shows,df_anos_tv_shows[\"date_added\"])","55f256ee":"fig = go.Figure()\n\ncolor_movie = [\"rgb(251,180,174)\",]*len(df_anos_movie[\"ano_lancamento\"].unique())\nlista_contagem_movie = list(df_anos_movie[\"ano_lancamento\"].value_counts())\nindice_movie = lista_contagem_movie.index(max(lista_contagem_movie))\ncolor_movie[indice_movie] = \"rgb(228,26,28)\"\n\n\ncolor_tv = [\"rgb(179,179,179)\"]*len(df_anos_tv_shows[\"ano_lancamento\"].unique())\nlista_contagem_tv = list(df_anos_tv_shows[\"ano_lancamento\"].value_counts())\nindice_tv = lista_contagem_tv.index(max(lista_contagem_tv))\ncolor_tv[indice_tv] = \"rgb(102,102,102)\"\n\nano_tv = list(df_anos_tv_shows[\"ano_lancamento\"].unique())\nano_movie = list(df_anos_movie[\"ano_lancamento\"].unique())\n\n\nfig.add_trace(go.Bar(x=df_anos_movie[\"ano_lancamento\"].unique(),\n                y=df_anos_movie[\"ano_lancamento\"].value_counts(),\n                name='Filves',\n                marker_color=color_movie\n                ))\nfig.add_trace(go.Bar(x=df_anos_tv_shows[\"ano_lancamento\"].unique(),\n                y=df_anos_tv_shows[\"ano_lancamento\"].value_counts(),\n                name='TV Shows',\n                marker_color=color_tv\n                ))\n\nfig.add_annotation(x=ano_movie[indice_movie], y=max(lista_contagem_movie),\n            text=\"Maior entrada de Filmes\",\n            showarrow=True,\n            arrowhead=1,\n            font=dict(\n               family=\"Courier New, monospace\",\n               size=16,\n               color=\"#222A2A\")\n            )\n\nfig.add_annotation(x=ano_tv[indice_tv], y=max(lista_contagem_tv),\n            text=\"Maior entrada de TV Shows\",\n            showarrow=True,\n            arrowhead=1,\n            font=dict(\n               family=\"Courier New, monospace\",\n               size=16,\n               color=\"#222A2A\")\n            )\n\n\nfig.update_layout(\n    title='Quantidade de Filmes e TV Show adicionados a cada ano',\n    xaxis_tickfont_size=14,\n    xaxis=dict(\n        title = \"Ano de lan\u00e7amento na Netflix\",\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    legend=dict(\n        x=0,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.15, # gap between bars of adjacent location coordinates.\n    bargroupgap=0.1 # gap between bars of the same location coordinate.\n)\nfig.show()","10925868":"df_estreia_igual_movie = df_anos_movie[df_anos_movie[\"ano_lancamento\"] == df_anos_movie[\"release_year\"]].sort_index()\ndf_estreia_diferente_movie = df_anos_movie[df_anos_movie[\"ano_lancamento\"] != df_anos_movie[\"release_year\"]].sort_index()\n\n\ndf_estreia_igual_tv_shows = df_anos_tv_shows[df_anos_tv_shows[\"ano_lancamento\"] == df_anos_tv_shows[\"release_year\"]]\ndf_estreia_diferente_tv_shows = df_anos_tv_shows[df_anos_tv_shows[\"ano_lancamento\"] != df_anos_tv_shows[\"release_year\"]]\n\npercentual_movie = len(df_estreia_igual_movie)*100 \/(len(df_estreia_diferente_movie) + len(df_estreia_igual_movie))\npercentual_tv = len(df_estreia_igual_tv_shows)*100 \/(len(df_estreia_diferente_tv_shows) + len(df_estreia_igual_tv_shows))","3e50d55a":"fig = make_subplots(\n    rows=1, cols=2,\n    specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}]],subplot_titles=['Filmes', 'TV Shows'])\n\n\nvalues = dados[\"type\"].value_counts()\nlabels = [\"Confirmados\",\"N\u00e3o confirmados\"]\n\n\nfig.add_trace(go.Pie(values=[percentual_movie,100 - percentual_movie],textinfo='label+percent',labels=labels,marker_colors=[\"rgb(228,26,28)\",\"rgb(102,102,102)\"]),row=1, col=1)\n    \n\nfig.add_trace(go.Pie(values=[percentual_tv,100 - percentual_tv],textinfo='label+percent',labels=labels,marker_colors=[\"rgb(228,26,28)\",\"rgb(102,102,102)\"]),row=1, col=2)\n\nfig.update_layout(height=600, width=800, title_text=\"Percentual de Filmes e TV Shows lan\u00e7ados no mesmo ano de estreia\")\nfig.show()","da97205e":"import plotly.graph_objects as go\n\nfig = make_subplots(rows=2, cols=1, subplot_titles=[\"Filmes\",\"TV Shows\"])\n\n\ncolor_movie = [\"rgb(228,26,28)\"]*len(df_anos_movie[\"ano_lancamento\"].unique())\nlist_movie = [\"TV-MA\",\"TV-14\",\"TV-PG\",\"R\",\"NR\",\"PG-13\",\"PG\",\"TV-Y7\",\"TV-G\",\"TV-Y\",\"G\",\"TV-Y7-FV\",\"UR\"]\n\n\ncolor_tv = [\"rgb(102,102,102)\"]*len(df_anos_tv_shows[\"ano_lancamento\"].unique())\nlist_tv_shows = [\"TV-MA\",\"TV-14\",\"TV-PG\",\"TV-Y7\",\"TV-Y\",\"TV-Y7-FV\",\"TV-G\",\"NR\",\"R\"]\n\nfig.add_trace(go.Bar(x=list_movie,\n                y=df_estreia_igual_movie[\"rating\"].value_counts(),\n                name='Filves',\n                marker_color=color_movie\n                ),row=1,col=1)\n\n# ================= Percentual filmes ==============\n\nper_filme_tv_14 = round(len(df_estreia_igual_movie[df_estreia_igual_movie[\"rating\"]==\"TV-14\"])*100\/(len(df_estreia_igual_movie)),2)\nper_filme_tv_pg = round(len(df_estreia_igual_movie[df_estreia_igual_movie[\"rating\"]==\"TV-PG\"])*100\/(len(df_estreia_igual_movie)),2)\nper_filme_tv_ma = round(len(df_estreia_igual_movie[df_estreia_igual_movie[\"rating\"]==\"TV-MA\"])*100\/(len(df_estreia_igual_movie)),2)\n\n#================= linhas filmes =======================\n\nfig.add_hline(y=len(df_estreia_igual_movie[df_estreia_igual_movie[\"rating\"]==\"TV-14\"]),line_dash=\"dot\", row=1, col=1,\n              annotation_text=str(per_filme_tv_14)+\"%\", \n              annotation_position=\"bottom right\")\n\nfig.add_hline(y=len(df_estreia_igual_movie[df_estreia_igual_movie[\"rating\"]==\"TV-PG\"]),line_dash=\"dot\", row=1, col=1,\n              annotation_text=str(per_filme_tv_pg)+\"%\",\n              annotation_position=\"bottom right\")\n\nfig.add_hline(y=len(df_estreia_igual_movie[df_estreia_igual_movie[\"rating\"]==\"TV-MA\"]),line_dash=\"dot\", row=1, col=1,\n              annotation_text=str(per_filme_tv_ma)+\"%\", \n              annotation_position=\"bottom right\")\n\n# ==================== Subplot 2 ========================\n\nfig.add_trace(go.Bar(x=list_tv_shows,\n                y=df_estreia_igual_tv_shows[\"rating\"].value_counts(),\n                name='TV Shows',\n                marker_color=color_tv\n                ),row=2,col=1)\n\n# ================= Percentual tv shows ==============\n\nper_tv_show_tv_14 = round(len(df_estreia_igual_tv_shows[df_estreia_igual_tv_shows[\"rating\"]==\"TV-14\"])*100\/(len(df_estreia_igual_tv_shows)),2)\nper_tv_show_tv_pg = round(len(df_estreia_igual_tv_shows[df_estreia_igual_tv_shows[\"rating\"]==\"TV-PG\"])*100\/(len(df_estreia_igual_tv_shows)),2)\nper_tv_show_tv_ma = round(len(df_estreia_igual_tv_shows[df_estreia_igual_tv_shows[\"rating\"]==\"TV-MA\"])*100\/(len(df_estreia_igual_tv_shows)),2)\n\n\n#================= linhas tv shows =======================\n\nfig.add_hline(y=len(df_estreia_igual_tv_shows[df_estreia_igual_tv_shows[\"rating\"]==\"TV-14\"]),line_dash=\"dot\", row=2, col=1,\n              annotation_text=str(per_tv_show_tv_14)+\"%\", \n              annotation_position=\"bottom right\")\nfig.add_hline(y=len(df_estreia_igual_tv_shows[df_estreia_igual_tv_shows[\"rating\"]==\"TV-PG\"]),line_dash=\"dot\", row=2, col=1,\n              annotation_text=str(per_tv_show_tv_pg)+\"%\", \n              annotation_position=\"bottom right\")\nfig.add_hline(y=len(df_estreia_igual_tv_shows[df_estreia_igual_tv_shows[\"rating\"]==\"TV-MA\"]),line_dash=\"dot\", row=2, col=1,\n              annotation_text=str(per_tv_show_tv_ma)+\"%\",  \n              annotation_position=\"bottom right\")\n\n\n\n\nfig.update_layout(\n    title='Classifica\u00e7\u00e3o para os filmes e tv shows ques estreiaram no mesmo ano de lan\u00e7amento',\n    xaxis_tickfont_size=14,\n    barmode='group',\n    bargap=0.15, # gap between bars of adjacent location coordinates.\n    bargroupgap=0.1, # gap between bars of the same location coordinate.\n    height=700, width=800\n)\n\n\n\nfig.show()","bb0851b0":"paises = dados.country\nlista_paises = []\nfor x in paises:\n    separador = x.split(\", \")\n    for y in separador:\n        lista_paises.append(y.lower())\n        \ndados_paises_lista = pd.DataFrame(lista_paises, columns = [\"Contagem\"])\n\ncontagem = dados_paises_lista[\"Contagem\"].value_counts()\ndados_paises = pd.DataFrame(contagem)\ndados_paises.reset_index(inplace= True)","2675e76b":"codigo_paises= {'afghanistan': 'AFG',\n 'albania': 'ALB',\n 'algeria': 'DZA',\n 'american samoa': 'ASM',\n 'andorra': 'AND',\n 'angola': 'AGO',\n 'anguilla': 'AIA',\n 'antigua and barbuda': 'ATG',\n 'argentina': 'ARG',\n 'armenia': 'ARM',\n 'aruba': 'ABW',\n 'australia': 'AUS',\n 'austria': 'AUT',\n 'azerbaijan': 'AZE',\n 'bahamas': 'BHM',\n 'bahrain': 'BHR',\n 'bangladesh': 'BGD',\n 'barbados': 'BRB',\n 'belarus': 'BLR',\n 'belgium': 'BEL',\n 'belize': 'BLZ',\n 'benin': 'BEN',\n 'bermuda': 'BMU',\n 'bhutan': 'BTN',\n 'bolivia': 'BOL',\n 'bosnia and herzegovina': 'BIH',\n 'botswana': 'BWA',\n 'brazil': 'BRA',\n 'british virgin islands': 'VGB',\n 'brunei': 'BRN',\n 'bulgaria': 'BGR',\n 'burkina faso': 'BFA',\n 'burma': 'MMR',\n 'burundi': 'BDI',\n 'cabo verde': 'CPV',\n 'cambodia': 'KHM',\n 'cameroon': 'CMR',\n 'canada': 'CAN',\n 'cayman islands': 'CYM',\n 'central african republic': 'CAF',\n 'chad': 'TCD',\n 'chile': 'CHL',\n 'china': 'CHN',\n 'colombia': 'COL',\n 'comoros': 'COM',\n 'congo democratic': 'COD',\n 'Congo republic': 'COG',\n 'cook islands': 'COK',\n 'costa rica': 'CRI',\n \"cote d'ivoire\": 'CIV',\n 'croatia': 'HRV',\n 'cuba': 'CUB',\n 'curacao': 'CUW',\n 'cyprus': 'CYP',\n 'czech republic': 'CZE',\n 'denmark': 'DNK',\n 'djibouti': 'DJI',\n 'dominica': 'DMA',\n 'dominican republic': 'DOM',\n 'ecuador': 'ECU',\n 'egypt': 'EGY',\n 'el salvador': 'SLV',\n 'equatorial guinea': 'GNQ',\n 'eritrea': 'ERI',\n 'estonia': 'EST',\n 'ethiopia': 'ETH',\n 'falkland islands': 'FLK',\n 'faroe islands': 'FRO',\n 'fiji': 'FJI',\n 'finland': 'FIN',\n 'france': 'FRA',\n 'french polynesia': 'PYF',\n 'gabon': 'GAB',\n 'gambia, the': 'GMB',\n 'georgia': 'GEO',\n 'germany': 'DEU',\n 'ghana': 'GHA',\n 'gibraltar': 'GIB',\n 'greece': 'GRC',\n 'greenland': 'GRL',\n 'grenada': 'GRD',\n 'guam': 'GUM',\n 'guatemala': 'GTM',\n 'guernsey': 'GGY',\n 'guinea-bissau': 'GNB',\n 'guinea': 'GIN',\n 'guyana': 'GUY',\n 'haiti': 'HTI',\n 'honduras': 'HND',\n 'hong kong': 'HKG',\n 'hungary': 'HUN',\n 'iceland': 'ISL',\n 'india': 'IND',\n 'indonesia': 'IDN',\n 'iran': 'IRN',\n 'iraq': 'IRQ',\n 'ireland': 'IRL',\n 'isle of man': 'IMN',\n 'israel': 'ISR',\n 'italy': 'ITA',\n 'jamaica': 'JAM',\n 'japan': 'JPN',\n 'jersey': 'JEY',\n 'jordan': 'JOR',\n 'kazakhstan': 'KAZ',\n 'kenya': 'KEN',\n 'kiribati': 'KIR',\n 'north korea': 'PRK',\n 'south korea': 'KOR',\n 'kosovo': 'KSV',\n 'kuwait': 'KWT',\n 'kyrgyzstan': 'KGZ',\n 'laos': 'LAO',\n 'latvia': 'LVA',\n 'lebanon': 'LBN',\n 'lesotho': 'LSO',\n 'liberia': 'LBR',\n 'libya': 'LBY',\n 'liechtenstein': 'LIE',\n 'lithuania': 'LTU',\n 'luxembourg': 'LUX',\n 'macau': 'MAC',\n 'macedonia': 'MKD',\n 'madagascar': 'MDG',\n 'malawi': 'MWI',\n 'malaysia': 'MYS',\n 'maldives': 'MDV',\n 'mali': 'MLI',\n 'malta': 'MLT',\n 'marshall islands': 'MHL',\n 'mauritania': 'MRT',\n 'mauritius': 'MUS',\n 'mexico': 'MEX',\n 'micronesia': 'FSM',\n 'moldova': 'MDA',\n 'monaco': 'MCO',\n 'mongolia': 'MNG',\n 'montenegro': 'MNE',\n 'morocco': 'MAR',\n 'mozambique': 'MOZ',\n 'namibia': 'NAM',\n 'nepal': 'NPL',\n 'netherlands': 'NLD',\n 'new caledonia': 'NCL',\n 'new zealand': 'NZL',\n 'nicaragua': 'NIC',\n 'nigeria': 'NGA',\n 'niger': 'NER',\n 'niue': 'NIU',\n 'northern mariana islands': 'MNP',\n 'norway': 'NOR',\n 'oman': 'OMN',\n 'pakistan': 'PAK',\n 'palau': 'PLW',\n 'panama': 'PAN',\n 'papua new guinea': 'PNG',\n 'paraguay': 'PRY',\n 'peru': 'PER',\n 'philippines': 'PHL',\n 'poland': 'POL',\n 'portugal': 'PRT',\n 'puerto rico': 'PRI',\n 'qatar': 'QAT',\n 'romania': 'ROU',\n 'russia': 'RUS',\n 'rwanda': 'RWA',\n 'saint kitts and nevis': 'KNA',\n 'saint lucia': 'LCA',\n 'saint martin': 'MAF',\n 'saint pierre and miquelon': 'SPM',\n 'saint vincent and the grenadines': 'VCT',\n 'samoa': 'WSM',\n 'san marino': 'SMR',\n 'sao tome and principe': 'STP',\n 'saudi arabia': 'SAU',\n 'senegal': 'SEN',\n 'serbia': 'SRB',\n 'seychelles': 'SYC',\n 'sierra leone': 'SLE',\n 'singapore': 'SGP',\n 'sint maarten': 'SXM',\n 'slovakia': 'SVK',\n 'slovenia': 'SVN',\n 'solomon islands': 'SLB',\n 'somalia': 'SOM',\n 'south africa': 'ZAF',\n 'south sudan': 'SSD',\n 'spain': 'ESP',\n 'sri lanka': 'LKA',\n 'sudan': 'SDN',\n 'suriname': 'SUR',\n 'swaziland': 'SWZ',\n 'sweden': 'SWE',\n 'switzerland': 'CHE',\n 'syria': 'SYR',\n 'taiwan': 'TWN',\n 'tajikistan': 'TJK',\n 'tanzania': 'TZA',\n 'thailand': 'THA',\n 'timor-leste': 'TLS',\n 'togo': 'TGO',\n 'tonga': 'TON',\n 'trinidad and tobago': 'TTO',\n 'tunisia': 'TUN',\n 'turkey': 'TUR',\n 'turkmenistan': 'TKM',\n 'tuvalu': 'TUV',\n 'uganda': 'UGA',\n 'ukraine': 'UKR',\n 'united arab emirates': 'ARE',\n 'united kingdom': 'GBR',\n 'united states': 'USA',\n 'uruguay': 'URY',\n 'uzbekistan': 'UZB',\n 'vanuatu': 'VUT',\n 'venezuela': 'VEN',\n 'vietnam': 'VNM',\n 'virgin islands': 'VGB',\n 'west bank': 'WBG',\n 'yemen': 'YEM',\n 'zambia': 'ZMB',\n 'zimbabwe': 'ZWE'}","fa46cd75":"abreviacao_paises = []\nfor x in dados_paises[\"index\"]:\n    if x in codigo_paises:\n        abreviacao = codigo_paises[x]\n        abreviacao_paises.append(abreviacao)\n    else:\n        abreviacao_paises.append(None)\n    \ndados_paises[\"Abreviacao\"] = abreviacao_paises","8e94cacc":"dados_paises.isnull().sum()","089dbdc8":"dados_paises.dropna(inplace=True)","d2cf86e9":"fig = px.scatter_geo(dados_paises, locations=dados_paises[\"Abreviacao\"], color=\"Contagem\",\n                     hover_name=dados_paises[\"index\"].unique(), size=dados_paises[\"Contagem\"],\n                     projection=\"natural earth\")\n\nfig.update_geos ( \n    visible = True ,  resolution = 110 , \n    showcountries = True ,  countrycolor = \"Black\")\n\nfig.update_layout(\n    title='Paises com maior distribui\u00e7\u00e3o de Filmes e TV Shows',\n    xaxis_tickfont_size=14)\n\nfig.show()","79447591":"contador =0\ntop_paises = []\ncontagem_top = []\nwhile contador < 11:\n    top_paises.append(list(dados_paises.loc[contador,[\"index\"]]))\n    contagem_top.append(list(dados_paises.loc[contador,[\"Contagem\"]]))\n    contador = contador + 1\n \n\ndados_top_paises = pd.DataFrame(top_paises, columns =[\"Paises\"])\ndados_top_paises_contagem = pd.DataFrame(contagem_top, columns=[\"Contagem\"])\n","daab6841":"fig = go.Figure()\nfig.add_trace(go.Bar(x=dados_top_paises[\"Paises\"],\n                y=dados_top_paises_contagem[\"Contagem\"],\n                name='Filves',\n                marker_color=\"rgb(228,26,28)\"\n                ))\n\n\nfig.update_layout(\n    title='Paises com as maiores quantidades de Filmes e TV Shows',\n    xaxis_tickfont_size=14,\n    \n    \n    barmode='group',\n    bargap=0.15, # gap between bars of adjacent location coordinates.\n    bargroupgap=0.1, # gap between bars of the same location coordinate.\n    height=700, width=800\n)\n\n\n\nfig.show()","754a075f":"# ================= Movie ==========================\ngeneros_movie = []\nfor x in dados[dados[\"type\"] == \"Movie\"][\"listed_in\"]:\n    genero_movie = str(x.split(\", \")[0])\n    generos_movie.append(genero_movie)\n    \n    \ndados_movie_contagem_genero = pd.DataFrame(generos_movie, columns = [\"Contagem\"])\ncontagem_movie = dados_movie_contagem_genero[\"Contagem\"].value_counts()\ndados_generos_movie = pd.DataFrame(contagem_movie)\ndados_generos_movie.reset_index(inplace= True)\n\n# ================ TV Shows =========================\ngeneros_tv = []\nfor x in dados[dados[\"type\"] == \"TV Show\"][\"listed_in\"]:\n    genero_tv = str(x.split(\", \")[0])\n    generos_tv.append(genero_tv)\n    \n    \ndados_tv_contagem_genero = pd.DataFrame(generos_tv, columns = [\"Contagem\"])\ncontagem_tv = dados_tv_contagem_genero[\"Contagem\"].value_counts()\ndados_generos_tv = pd.DataFrame(contagem_tv)\ndados_generos_tv.reset_index(inplace= True)","ace1f616":"fig = make_subplots(rows=2, cols=1, subplot_titles=[\"Filmes\",\"TV Shows\"])\n\n# ====================== Subplot 1 ======================\ncolor_movie = [\"rgb(228,26,28)\"]*len(dados_generos_movie)\nfig.add_trace(go.Bar(x=dados_generos_movie[\"index\"],\n                y=dados_generos_movie[\"Contagem\"],\n                name='Filves',\n                marker_color=color_movie\n                ),row=1,col=1)\n\n# ================= Percentual + faixa =============\n\nsoma_filmes = int(dados_generos_movie.loc[0:4,[\"Contagem\"]].sum())\n\npercentual_top_filmes = round(soma_filmes*100\/int(dados_generos_movie.loc[:,[\"Contagem\"]].sum()),2)\n\nfig.add_vrect(\n    x0=\"Dramas\", x1=\"Action & Adventure\",\n    fillcolor=\"rgb(251,180,174)\", opacity=0.5,\n    layer=\"below\", line_width=0,row =1, col=1,\n    annotation_text = str(percentual_top_filmes)+\"% \",annotation_position = \"outside top left\"\n)\n\n# ==================== Subplot 2 ====================\n\ncolor_tv = [\"rgb(102,102,102)\"]*len(dados_generos_tv)\nfig.add_trace(go.Bar(x=dados_generos_tv[\"index\"],\n                y=dados_generos_tv[\"Contagem\"],\n                name='TV Shows',\n                marker_color=color_tv\n                ),row=2,col=1)\n\n# ================= Percentual + faixa ==============\n\nsoma_tv = int(dados_generos_tv.loc[0:4,[\"Contagem\"]].sum())\n\npercentual_top_tv = round(soma_tv*100\/int(dados_generos_tv.loc[:,[\"Contagem\"]].sum()),2)\n\nfig.add_vrect(\n    x0=\"International TV Shows\", x1=\"British TV Shows\",\n    fillcolor=\"rgb(179,179,179)\", opacity=0.5,\n    layer=\"below\", line_width=0,row=2,col=1,\n    annotation_text = str(percentual_top_tv)+\"% \", annotation_position = \"outside top left\"\n)\n\nfig.update_layout(\n    title='G\u00eaneros de Filmes e TV Shows',\n    xaxis_tickfont_size=14,\n    barmode='group',\n    bargap=0.4, # gap between bars of adjacent location coordinates.\n    bargroupgap=0.1, # gap between bars of the same location coordinate.\n    height=800, width=900\n)\n\nfig.show()","e40cfc51":"dados_modelo = dados[[\"title\",\"description\"]]\ndados_modelo.head()","51f9f12e":"from sklearn.feature_extraction.text import TfidfVectorizer\n\n#Removendo palavras irrelevantes\ntf_idf = TfidfVectorizer(stop_words='english')\n\n\n#Construa a matriz TF-IDF necess\u00e1ria ajustando e transformando os dados\ntfidf_matrix = tf_idf.fit_transform(dados_modelo['description'])\n\ntfidf_matrix.shape","fa246493":"from sklearn.metrics.pairwise import linear_kernel\n\n#Compute the cosine similarity matrix\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\n\n\nindices = pd.Series(dados_modelo.index, index=dados_modelo['title']).drop_duplicates()","87a01a70":"def recomendacao(titulo, cosine_sim=cosine_sim):\n    idx = indices[titulo]\n\n    # Obtenha as pontua\u00e7\u00f5es de semelhan\u00e7a\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Classifique os filmes com base nas pontua\u00e7\u00f5es de similaridade\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Obtenha as pontua\u00e7\u00f5es dos 5 filmes mais semelhantes\n    sim_scores = sim_scores[1:6]\n\n    # Obtenha os \u00edndices de filmes\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Retorne os 5 principais filmes mais semelhantes\n    return dados_modelo['title'].iloc[movie_indices]","292cb1e4":"recomendacao(\"Transformers Prime\")","3e5588dd":"recomendacao(\"Laddaland\")","d84d6865":"\n# <div class=\"alert alert-danger\">Pr\u00e9 processamento dos dados<\/div>","53db8422":"<a id=\"3\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">An\u00e1lise explorat\u00f3ria<\/div>","65b7132a":"**Programas de TV e filmes listados no Netflix\nEste conjunto de dados consiste em programas de TV e filmes dispon\u00edveis no Netflix a partir de 2019. O conjunto de dados \u00e9 coletado do Flixable, um mecanismo de busca Netflix de terceiros.**\n\n**Em 2018, eles lan\u00e7aram um relat\u00f3rio interessante que mostra que o n\u00famero de programas de TV na Netflix quase triplicou desde 2010. O n\u00famero de filmes do servi\u00e7o de streaming diminuiu em mais de 2.000 t\u00edtulos desde 2010, enquanto seu n\u00famero de programas de TV quase triplicou. Ser\u00e1 interessante explorar o que todos os outros insights podem ser obtidos no mesmo conjunto de dados.**","44b28af2":"## Bibliotecas utilizadas","c57e2c51":"Existem 15491 palavras descritas para os 5743 filmes neste conjunto de dados.\n\nPara determinar a pontua\u00e7\u00e3o,ser\u00e1 utilizado a dist\u00e2ncia entre os grupos utilizando similaridade por cosseno.","c1b873f7":"<a href=\"#top\" class=\"btn btn-success btn-lg active\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to Colors\">Voltar para o topo<\/a>","5dc45cb0":"#### Podemos identificar que 71% dos dados desse dataset \u00e9 composto por filmes e 29% composto por tv shows. Utilizando esse par\u00e2metro para trilhar nosso caminho sobre a an\u00e1lise desses dados, foi visto que de todos os filmes e tv shows adicionados na Netflix, apenas 27% dos filmes e 48% dos tv shows foram adicionados no mesmo ano de estreia. Sendo que a frequ\u00eancia foi aumentando a partir de 2014, e chegando no ano de 2019 como sendo o ano com o maior percentual de filmes adicionados. Por\u00e9m, em 2018 mostrou o maior percentual de tv shows adicionados na plataforma no mesmo ano de estreia.\n\n#### Ao observar a classifica\u00e7\u00e3o de idade permitida para todos os filmes e tv shows, foram observados que os filmes e tv shows apresentaram a mesma ordem de cl\u00e1ssifica\u00e7\u00e3o, TV-MA, TV-14 e TV-PG.\n\n#### Os pa\u00edses com a maior quantidade de registros sobre a plataforma da Netflix s\u00e3o: \n1. Estados Unidos\n2. India \n3. Reindo Unido\n4. Canada\n5. Fran\u00e7a \n\n#### Dentre todos os filmes no dataset, 82% s\u00e3o compostos por: \n1. Drama\n2. Com\u00e9dia \n3. Document\u00e1rio\n4. A\u00e7\u00e3o e aventura\n\n\n#### Dentre todos os tv shows no dataset, 75% s\u00e3o compostos por: \n1. TV Shows internacionais\n2. TV Shows crimes \n3. Kids TV\n4. TV Shows brit\u00e2nicos\n\n#### Foi criado um modelo de recomenda\u00e7\u00e3o utilizando o TD-IDF para determina\u00e7\u00e3o dos grupos de semelhan\u00e7a e para determinar a pontua\u00e7\u00e3o desses grupos foi utilizado a similaridade por cosseno. Por fim, \u00e9 apresentado os 5 Filmes ou TV Shows que apresentam semelha\u00e7a na descri\u00e7\u00e3o do filme utilizado como busca no sistema de recomenda\u00e7\u00e3o.\n","2499bed3":"<h3 style=\"text-align:center;font-size:200%;;\">Conclus\u00e3o do projeto<\/h3>\n<div class=\"progress\">\n  <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 25%;\" aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\">25% Conclu\u00eddo<\/div>\n<\/div>","cededb0e":"<h3 style=\"text-align:center;font-size:200%;;\">Conclus\u00e3o do projeto<\/h3>\n<div class=\"progress\">\n  <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 50%;\" aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\">50% Conclu\u00eddo<\/div>\n<\/div>","039e00ab":"<a id='top'>Top reference<\/a>\n<h1 style=\"text-align:center\">\n<img src=\"https:\/\/m.gifmania.co.uk\/TV-Series-Animated-Gifs\/Animated-TV-channels-Logotypes\/Netflix-Logo-91903.gif\" style=\"width:900px;height:400px;\">\n\n### Notas de lan\u00e7amento\n\n- Vers\u00e3o 1: An\u00e1lise explorat\u00f3ra\n\n- Vers\u00e3o 2: Modelo de recomenda\u00e7\u00e3o\n\n## Conte\u00fado\n\n1. [Introdu\u00e7\u00e3o](#1)\n1. [Carregando os dados](#2)\n1. [Visualiza\u00e7\u00e3o dos dados](#3)\n1. [Modelo de Recomenda\u00e7\u00e3o](#4)\n1. [Conclus\u00e3o](#5)\n    \n    ","ae20100f":"# <div class=\"alert alert-warning\">O que \u00e9 TF-IDF?<\/div>\n\nTF-IDF \u00e9 um c\u00e1lculo estat\u00edstico adotado pelo algoritmo do Google para medir quais termos s\u00e3o mais relevantes para um t\u00f3pico, analisando a frequ\u00eancia com que aparecem em uma p\u00e1gina, em compara\u00e7\u00e3o \u00e0 sua frequ\u00eancia em um conjunto maior de p\u00e1ginas.\n\nTF se refere \u00e0 \u201cfrequ\u00eancia do termo\u201d. Essa parte do c\u00e1lculo responde \u00e0 pergunta: com que frequ\u00eancia o termo aparece nesse documento? Quanto maior for a frequ\u00eancia no documento, maior ser\u00e1 a import\u00e2ncia do termo.\n\nJ\u00e1 o IDF significa \u201cfrequ\u00eancia inversa dos documentos\u201d. Nessa parte, a ferramenta responde: com que frequ\u00eancia o termo aparece em todos os documentos da cole\u00e7\u00e3o? Quanto maior for a frequ\u00eancia nos documentos, menor ser\u00e1 a import\u00e2ncia do termo.\n\nEnt\u00e3o, quando o fator IDF \u00e9 incorporado, o c\u00e1lculo diminui o peso dos termos que ocorrem com muita frequ\u00eancia no conjunto de documentos e aumenta o peso dos termos que ocorrem raramente. Este esquema ajuda a entender melhor:\n\n![test](https:\/\/rockcontent.com\/wp-content\/uploads\/2019\/12\/semrush.png)","2644b66c":"<h3 style=\"text-align:center;font-size:200%;;\">Conclus\u00e3o do projeto<\/h3>\n<div class=\"progress\">\n  <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 75%;\" aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\">75% Conclu\u00eddo<\/div>\n<\/div>","2389ed0c":"Ao observar o maior percentual (7,63%) dos valores faltantes em cada coluna, ser\u00e1 aderido  a remo\u00e7\u00e3o de todos os registros faltantes da coluna *contry*, *date_added* e *ratting*.","5dd1f0d7":"<a id=\"1\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Introduc\u00e3o<\/div>","c2f187ac":"<h3 style=\"text-align:center;font-size:200%;;\">Conclus\u00e3o do projeto<\/h3>\n<div class=\"progress\">\n  <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%;\" aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\">100% Conclu\u00eddo<\/div>\n<\/div>","204f2749":"Devido a alta quantidade de dados faltantes na coluna *director* e *cast*, ser\u00e1 removido apenas essas colunas para nao apagar 25% do dataset inicial. Al\u00e9m disso, o preenchimento dos valores nulos se tornam invi\u00e1veis. Pois essas informa\u00e7\u00f5es necessitam de extra\u00e7\u00e3o de dados de outro dataset que contenha o nome dos diretores e atores dos respectivos filmes.","6b388f17":"<a id=\"5\"><\/a> <br>\n# <div class=\"alert alert-success\">Conclus\u00e3o<\/div>","a1ac21e6":"<a id=\"4\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Modelo de Recomenda\u00e7\u00e3o<\/div>","468beb4a":"#### Ap\u00f3s identificar o percentual refente aos Filmes (70,8%) e TV Shows (29,2%) no dataset. Foi ent\u00e3o observado a quantidade de Filmes e TV Shows que foram lan\u00e7ados na plataforma da Netflix no mesmo ano que foi lan\u00e7amento do Filme\/TV Shows no cinema. ","a64a3f06":"<a id=\"2\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Carregameno dos dados<\/div>"}}