{"cell_type":{"a9d23b84":"code","5de4bab5":"code","14b03eb5":"code","21ceba0f":"code","73b46856":"code","dc782ea3":"code","4ff6a788":"code","6c642a82":"code","9918eec6":"code","bb2206fe":"code","9e32a477":"code","23b3b423":"code","f3f1f3f5":"code","a13efb72":"code","1dc1104e":"code","bf7435bd":"code","4489beea":"code","2ca09066":"code","681bbcea":"code","7019d40d":"code","f266cdbe":"code","d9839145":"code","44486d02":"code","20300f7d":"code","c9f705e8":"code","cc5c7e4c":"markdown","5bebf5c9":"markdown"},"source":{"a9d23b84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\nfrom plotly.offline import iplot\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5de4bab5":"df = pd.read_csv('\/kaggle\/input\/ai4all-project\/results\/deconvolution\/CIBERSORTx_Results_Krasnow_facs_droplet.csv')\ndf.head()","14b03eb5":"import plotly.express as px\n\n# Grouping it by job title and country\nplot_data = df.groupby(['viral_load', 'B cell'], as_index=False).Neutrophil.sum()\n\nfig = px.bar(plot_data, x='viral_load', y='Neutrophil', color='B cell')\nfig.show()","21ceba0f":"from plotly.subplots import make_subplots\n\n\nfig= make_subplots(rows= 2,cols=2, \n                    specs=[[{'secondary_y': True},{'secondary_y': True}],[{'secondary_y': True},{'secondary_y': True}]],\n                    subplot_titles=(\"Basophil\/Mast\",\"Dendritic\",\"T cell\",\"Goblet\")\n                   )\nfig.add_trace(go.Bar(x=df['viral_load'],y=df['Basophil\/Mast'],\n                    marker=dict(color=df['Basophil\/Mast'],coloraxis='coloraxis')),1,1)\n\nfig.add_trace(go.Bar(x=df['viral_load'],y=df['Dendritic'],\n                    marker=dict(color=df['Dendritic'],coloraxis='coloraxis1')),1,2)\n\nfig.add_trace(go.Bar(x=df['viral_load'],y=df['T cell'],\n                    marker=dict(color=df['T cell'],coloraxis='coloraxis2')),2,1)\n\nfig.add_trace(go.Bar(x=df['viral_load'],y=df['Goblet'],\n                    marker=dict(color=df['Goblet'],coloraxis='coloraxis3')),2,2)\n","73b46856":"fig= make_subplots(rows= 2,cols=2, \n                    specs=[[{'secondary_y': True},{'secondary_y': True}],[{'secondary_y': True},{'secondary_y': True}]],\n                    subplot_titles=(\"Basal\",\"Ciliated\",\"Ionocyte\",\"Monocytes\/macrophages\")\n                   )\nfig.add_trace(go.Bar(x=df['viral_load'],y=df['Basal'],\n                    marker=dict(color=df['Basal'],coloraxis='coloraxis')),1,1)\n\nfig.add_trace(go.Bar(x=df['viral_load'],y=df['Ciliated'],\n                    marker=dict(color=df['Ciliated'],coloraxis='coloraxis')),1,2)\n\nfig.add_trace(go.Bar(x=df['viral_load'],y=df['Ionocyte'],\n                    marker=dict(color=df['Ionocyte'],coloraxis='coloraxis')),2,1)\n\nfig.add_trace(go.Bar(x=df['viral_load'],y=df['Monocytes\/macrophages'],\n                    marker=dict(color=df['Monocytes\/macrophages'],coloraxis='coloraxis')),2,2)","dc782ea3":"plt.rcParams['figure.figsize'] = (20.0, 10.0)\nplt.rcParams['font.family'] = \"serif\"\nfig, ax =plt.subplots(3,2)\nsns.countplot(df['B cell'], ax=ax[0,0])\nsns.countplot(df['viral_load'], ax=ax[0,1])\nsns.countplot(df['Club'], ax=ax[1,0])\nsns.countplot(df['Basal'], ax=ax[1,1])\nsns.countplot(df['czb_id'], ax=ax[2,0])\nsns.countplot(df['Monocytes\/macrophages'], ax=ax[2,1])\nfig.show();","4ff6a788":"import plotly.express as px\n\nfig = px.histogram(df, x=\"viral_load\", y=\"B cell\", color = 'czb_id',\n                   marginal=\"rug\", # or violin, rug,\n                   hover_data=df.columns,\n                   color_discrete_sequence=['indianred','lightblue'],\n                   )\n\nfig.update_layout(\n    title=\"Covid-19 Viral Load\",\n    xaxis_title=\"Viral Load\",\n    yaxis_title=\"B cells\",\n)\nfig.update_yaxes(tickangle=-30, tickfont=dict(size=7.5))\n\nfig.show();","6c642a82":"fig = px.scatter_3d(df,z=\"B cell\",x=\"viral_load\",y=\"T cell\",\n    color = 'czb_id', size_max = 18,\n    #color_discrete_sequence=['indianred','lightblue'] \n                    symbol='czb_id', opacity=0.7\n    )\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))","9918eec6":"fig = px.parallel_categories(df, color=\"B cell\", color_continuous_scale=px.colors.sequential.OrRd)\nfig.show()","bb2206fe":"import plotly.figure_factory as ff\nfig = make_subplots(rows=1, cols=5)\ndf_num = df[['B cell', 'T cell', 'Neutrophil', 'Club', 'Monocytes\/macrophages']]\n\nfig1 = ff.create_distplot([df_num['B cell']], ['B cell'])\nfig2 = ff.create_distplot([df_num['T cell']], ['T cell'])\nfig3 =  ff.create_distplot([df_num['Neutrophil']], ['Neutrophil'])\nfig4 =  ff.create_distplot([df_num['Club']], ['Club'])\nfig5 =  ff.create_distplot([df_num['Monocytes\/macrophages']], ['Monocytes\/macrophages'])\n\nfig.add_trace(go.Histogram(fig1['data'][0], marker_color='blue'), row=1, col=1)\nfig.add_trace(go.Histogram(fig2['data'][0],marker_color='red'), row=1, col=2)\nfig.add_trace(go.Histogram(fig3['data'][0], marker_color='green'), row=1, col=3)\nfig.add_trace(go.Histogram(fig4['data'][0],marker_color='yellow'), row=1, col=4)\nfig.add_trace(go.Histogram(fig5['data'][0],marker_color='purple'), row=1, col=5)\n\n\nfig.show()","9e32a477":"fig = px.line(df, x=\"viral_load\", y=\"czb_id\", color_discrete_sequence=['darksalmon'], \n              title=\"Covid-19 Viral Load\")\nfig.show()","23b3b423":"import shap\nimport lightgbm as lgb\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\nimport random","f3f1f3f5":"df.isnull().sum()","a13efb72":"SEED = 99\nrandom.seed(SEED)\nnp.random.seed(SEED)","1dc1104e":"dfmodel = df.copy()\n\n# read the \"object\" columns and use labelEncoder to transform to numeric\nfor col in dfmodel.columns[dfmodel.dtypes == 'object']:\n    le = LabelEncoder()\n    dfmodel[col] = dfmodel[col].astype(str)\n    le.fit(dfmodel[col])\n    dfmodel[col] = le.transform(dfmodel[col])","bf7435bd":"#change columns names to alphanumeric\ndfmodel.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in dfmodel.columns]","4489beea":"X = dfmodel.drop(['viral_load','czb_id'], axis = 1)\ny = dfmodel['viral_load']","2ca09066":"lgb_params = {\n                    'objective':'binary',\n                    'metric':'auc',\n                    'n_jobs':-1,\n                    'learning_rate':0.005,\n                    'num_leaves': 20,\n                    'max_depth':-1,\n                    'subsample':0.9,\n                    'n_estimators':2500,\n                    'seed': SEED,\n                    'early_stopping_rounds':100, \n                }","681bbcea":"# choose the number of folds, and create a variable to store the auc values and the iteration values.\nK = 5\nfolds = KFold(K, shuffle = True, random_state = SEED)\nbest_scorecv= 0\nbest_iteration=0\n\n# Separate data in folds, create train and validation dataframes, train the model and cauculate the mean AUC.\nfor fold , (train_index,test_index) in enumerate(folds.split(X, y)):\n    print('Fold:',fold+1)\n          \n    X_traincv, X_testcv = X.iloc[train_index], X.iloc[test_index]\n    y_traincv, y_testcv = y.iloc[train_index], y.iloc[test_index]\n    \n    train_data = lgb.Dataset(X_traincv, y_traincv)\n    val_data   = lgb.Dataset(X_testcv, y_testcv)\n    \n    LGBM = lgb.train(lgb_params, train_data, valid_sets=[train_data,val_data], verbose_eval=250)\n    best_scorecv += LGBM.best_score['valid_1']['auc']\n    best_iteration += LGBM.best_iteration\n\nbest_scorecv \/= K\nbest_iteration \/= K\nprint('\\n Mean AUC score:', best_scorecv)\nprint('\\n Mean best iteration:', best_iteration)","7019d40d":"lgb_params = {\n                    'objective':'binary',\n                    'metric':'auc',\n                    'n_jobs':-1,\n                    'learning_rate':0.05,\n                    'num_leaves': 20,\n                    'max_depth':-1,\n                    'subsample':0.9,\n                    'n_estimators':round(best_iteration),\n                    'seed': SEED,\n                    'early_stopping_rounds':None, \n                }\n\ntrain_data_final = lgb.Dataset(X, y)\nLGBM = lgb.train(lgb_params, train_data)\nprint(LGBM)","f266cdbe":"# telling wich model to use\nexplainer = shap.TreeExplainer(LGBM)\n# Calculating the Shap values of X features\nshap_values = explainer.shap_values(X)","d9839145":"shap.summary_plot(shap_values[1], X, plot_type=\"bar\")","44486d02":"shap.summary_plot(shap_values[1], X)","20300f7d":"dfcorr=df.corr()\ndfcorr","c9f705e8":"plt.figure(figsize=(10,4))\nsns.heatmap(df.corr(),annot=False,cmap='summer')\nplt.show()","cc5c7e4c":"#Thanks to rossinEndrew https:\/\/www.kaggle.com\/endrewrossin\/fast-initial-lightgbm-model-to-detect-exam-result\/comments","5bebf5c9":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata @mpwolke "}}