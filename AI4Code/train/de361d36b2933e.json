{"cell_type":{"c0fbe901":"code","6959a255":"code","d1300a2b":"code","9e0aa277":"code","b3fad90c":"code","7843f2f2":"code","857058e0":"code","40b910b7":"code","4542c93b":"code","dca69fb6":"code","b3b8e889":"code","9e8bacb7":"code","8d970267":"code","ed0195ed":"code","5f3b8073":"code","66e46d24":"markdown","334ff727":"markdown","b19b1097":"markdown","c8c758c6":"markdown","7fe55d61":"markdown","66980428":"markdown","7d99cf22":"markdown","8209ce88":"markdown"},"source":{"c0fbe901":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns #visualization\nimport matplotlib.pyplot as plt #visualization\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6959a255":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/cusersmarildownloadswinecsv\/wine.csv', delimiter=';', encoding = \"utf8\", nrows = nRowsRead)\ndf.dataframeName = 'wine.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head()","d1300a2b":"plt.figure(1, figsize=(5,5))\ndf['quality'].value_counts().plot.pie(autopct=\"%1.1f%%\")","9e0aa277":"#Visualize some of the original dimensions\n\nfeatures = [\"fixed_acidity\", \"residual_sugar\", \"sulphates\", \"pH\", \"citric_acid\"]\n\nfig = px.scatter_matrix(\n    df,\n    dimensions=features,\n    color=\"quality\"\n)\nfig.update_traces(diagonal_visible=False)\nfig.show()","b3fad90c":"#Visualize some of the principal components\n\nfrom sklearn.decomposition import PCA\n\n\nfeatures = [\"fixed_acidity\", \"residual_sugar\", \"sulphates\", \"pH\"]\n\npca = PCA()\ncomponents = pca.fit_transform(df[features])\nlabels = {\n    str(i): f\"PC {i+1} ({var:.1f}%)\"\n    for i, var in enumerate(pca.explained_variance_ratio_ * 100)\n}\n\nfig = px.scatter_matrix(\n    components,\n    labels=labels,\n    dimensions=range(4),\n    color=df[\"quality\"]\n)\nfig.update_traces(diagonal_visible=False)\nfig.show()","7843f2f2":"from sklearn.preprocessing import LabelEncoder\n\n#fill in mean for floats\nfor c in df.columns:\n    if df[c].dtype=='float16' or  df[c].dtype=='float32' or  df[c].dtype=='float64':\n        df[c].fillna(df[c].mean())\n\n#fill in -999 for categoricals\ndf = df.fillna(-999)\n# Label Encoding\nfor f in df.columns:\n    if df[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[f].values))\n        df[f] = lbl.transform(list(df[f].values))\n        \nprint('Labelling done.')","857058e0":"df = pd.get_dummies(df)","40b910b7":"#Visualize a subset of the principal components\n\nn_components = 4\n\npca = PCA(n_components=n_components)\ncomponents = pca.fit_transform(df)\n\ntotal_var = pca.explained_variance_ratio_.sum() * 100\n\nlabels = {str(i): f\"PC {i+1}\" for i in range(n_components)}\nlabels['color'] = 'Median Price'\n\nfig = px.scatter_matrix(\n    components,\n    color=df.quality,\n    dimensions=range(n_components),\n    labels=labels,\n    title=f'Total Explained Variance: {total_var:.2f}%',\n)\nfig.update_traces(diagonal_visible=False)\nfig.show()","4542c93b":"!pip install dash","dca69fb6":"#PCA analysis in Dash\n\nimport dash\nimport dash_core_components as dcc\nimport dash_html_components as html\nfrom dash.dependencies import Input, Output\nimport pandas as pd\nimport plotly.express as px\nfrom sklearn.decomposition import PCA\n\n\n\napp = dash.Dash(__name__)\n\napp.layout = html.Div([\n    dcc.Graph(id=\"graph\"),\n    html.P(\"Number of components:\"),\n    dcc.Slider(\n        id='slider',\n        min=2, max=5, value=3,\n        marks={i: str(i) for i in range(2,6)})\n])\n\n@app.callback(\n    Output(\"graph\", \"figure\"), \n    [Input(\"slider\", \"value\")])\ndef run_and_plot(n_components):\n\n    pca = PCA(n_components=n_components)\n    components = pca.fit_transform(df)\n\n    var = pca.explained_variance_ratio_.sum() * 100\n\n    labels = {str(i): f\"PC {i+1}\" \n              for i in range(n_components)}\n    labels['color'] = 'quality'\n\n    fig = px.scatter_matrix(\n        components,\n        color=df.quality,\n        dimensions=range(n_components),\n        labels=labels,\n        title=f'Total Explained Variance: {var:.2f}%')\n    fig.update_traces(diagonal_visible=False)\n    return fig\n\napp.run_server(debug=True)","b3b8e889":"#2D PCA Scatter Plot\n\nX = df[[\"fixed_acidity\", \"residual_sugar\", \"sulphates\", \"pH\"]]\n\npca = PCA(n_components=2)\ncomponents = pca.fit_transform(X)\n\nfig = px.scatter(components, x=0, y=1, color=df['quality'])\nfig.show()","9e8bacb7":"#Visualize PCA with px.scatter_3d\n\nX = df[[\"fixed_acidity\", \"residual_sugar\", \"pH\"]]\n\npca = PCA(n_components=3)\ncomponents = pca.fit_transform(X)\n\ntotal_var = pca.explained_variance_ratio_.sum() * 100\n\nfig = px.scatter_3d(\n    components, x=0, y=1, z=2, color=df['quality'],\n    title=f'Total Explained Variance: {total_var:.2f}%',\n    labels={'0': 'PC 1', '1': 'PC 2', '2': 'PC 3'}\n)\nfig.show()","8d970267":"#Plotting explained variance\n\npca = PCA()\npca.fit(df)\nexp_var_cumul = np.cumsum(pca.explained_variance_ratio_)\n\npx.area(\n    x=range(1, exp_var_cumul.shape[0] + 1),\n    y=exp_var_cumul,\n    labels={\"x\": \"# Components\", \"y\": \"Explained Variance\"}\n)","ed0195ed":"features = [\"residual_sugar\", \"citric_acid\", \"alcohol\"]\nX = df[features]\n\npca = PCA(n_components=2)\ncomponents = pca.fit_transform(X)\n\nloadings = pca.components_.T * np.sqrt(pca.explained_variance_)\n\nfig = px.scatter(components, x=0, y=1, color=df['quality'])\n\nfor i, feature in enumerate(features):\n    fig.add_shape(\n        type='line',\n        x0=0, y0=0,\n        x1=loadings[i, 0],\n        y1=loadings[i, 1]\n    )\n    fig.add_annotation(\n        x=loadings[i, 0],\n        y=loadings[i, 1],\n        ax=0, ay=0,\n        xanchor=\"center\",\n        yanchor=\"bottom\",\n        text=feature,\n    )\nfig.show()","5f3b8073":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient. That is all kagglers, @mpwolke was Here.' )","66e46d24":"Often, you might be interested in seeing how much variance PCA is able to explain as you increase the number of components, in order to decide how many dimensions to ultimately keep or analyze. This example shows you how to quickly plot the cumulative sum of explained variance for a high-dimensional dataset.\n\nWith a higher explained variance, you are able to capture more variability in your dataset, which could potentially lead to better performance when training your model. For a more mathematical explanation.\nhttps:\/\/plotly.com\/python\/pca-visualization\/","334ff727":"#Attention Alcohol is Object","b19b1097":"#Visualize PCA with px.`scatter_3d`","c8c758c6":"![](https:\/\/miro.medium.com\/max\/2614\/1*xhw7m29bqQm_CXEBJ406BA.jpeg)medium.com","7fe55d61":"#PCA analysis in Dash: It didn't work here.  Why? I have No Clue.","66980428":"#Visualize a subset of the principal components","7d99cf22":"#Codes by https:\/\/plotly.com\/python\/pca-visualization\/","8209ce88":"References:\n\nhttps:\/\/plotly.com\/python\/pca-visualization\/\n\nhttps:\/\/plot.ly\/python\/plotly-express\/\nhttps:\/\/plot.ly\/python\/3d-scatter-plots\/"}}