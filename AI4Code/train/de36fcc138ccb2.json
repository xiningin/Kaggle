{"cell_type":{"7d35c2a9":"code","8e7cb4aa":"code","19999e74":"code","165f7f1b":"code","177ae036":"code","d4812593":"code","43830ddd":"code","1adefec8":"code","2a10451b":"code","05fbb1d3":"code","2141ad60":"code","de497775":"code","bcaa779c":"code","7f9faa93":"code","357dbd97":"code","797a676e":"code","24347f0a":"code","1ebe153a":"code","1fe26589":"code","b12be330":"code","2a471eb6":"markdown","58782533":"markdown","aa866810":"markdown","2893760c":"markdown","12050e80":"markdown","f028b2db":"markdown"},"source":{"7d35c2a9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8e7cb4aa":"import catboost\nprint('catboost version:', catboost.__version__)\nfrom catboost import CatBoostClassifier \n#!pip install --upgrade scikit-learn\n#!pip install --upgrade scikit-learn\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import validation_curve\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import validation_curve\nfrom sklearn.model_selection import learning_curve\nfrom pprint import pprint\nfrom time import time\nimport pickle\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport  nbconvert\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score\nimport math as mat\nfrom sklearn import metrics\nfrom sklearn.datasets import make_classification \nimport random\nfrom sklearn.metrics import roc_curve  \nfrom sklearn.metrics import roc_auc_score  \nimport random as rd\nfrom sklearn import linear_model\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import precision_score\nimport matplotlib.pyplot as plt\nimport pickle\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfrom sklearn.metrics import confusion_matrix\nimport  nbconvert\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import precision_score\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import pairwise_distances_argmin_min\nfrom sklearn import svm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import RadiusNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import datasets\nfrom pandas.api.types import CategoricalDtype\nfrom sklearn.neighbors import RadiusNeighborsClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.datasets import make_classification\nimport pyarrow.parquet as pq\nimport os\nimport pyarrow as pa\nimport math\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import precision_score\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.datasets import make_hastie_10_2\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn import tree\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nimport xgboost as xgb\nfrom sklearn.metrics import recall_score\nfrom scipy.cluster import hierarchy as sch\nfrom scipy.spatial import distance_matrix \npd.set_option('max_columns',1000)\nfrom sklearn import model_selection   \n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import log_loss\n\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier \nfrom xgboost import XGBClassifier\nimport catboost\n\n\nfrom sklearn import ensemble\nfrom sklearn import model_selection\n\n\n","19999e74":"df_train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndf_train","165f7f1b":"df_train_X = df_train[[i for i in df_train.columns.tolist() if i != 'label']]\/255\ndf_train_X","177ae036":"y_target = df_train[['label']]\ny_target","d4812593":"plt.figure(figsize=(5,4))\ny_target.label.value_counts(normalize=True).plot(kind='bar')\nplt.xticks(rotation=30)\nplt.show()","43830ddd":"X_train, X_test, y_train, y_test =train_test_split(df_train_X,y_target,test_size=.3,random_state =23, stratify= y_target)","1adefec8":"# !pip install lightgbm\nfrom lightgbm import LGBMClassifier\n\nclf_lgbm = LGBMClassifier(objective='multiclass', random_state=16, \n                          class_weight ='balanced', learning_rate =0.0885,max_depth=12,n_estimator=10000, n_jobs=-1,\n                         num_leaves =50, reg_lambda =0.075,is_unbalance=True)","2a10451b":"%%time\nahuste_lgbm = clf_lgbm.fit(X_train, y_train, eval_set=[(X_test, y_test)], eval_metric='multiclass')","05fbb1d3":"print(classification_report(y_test, ahuste_lgbm.predict(X_test)))","2141ad60":"pred = ahuste_lgbm.predict(X_test)\npred","de497775":"y_test_pred = y_test.copy()\ny_test_pred['predicted'] = pred\ny_test_pred","bcaa779c":"c=pd.crosstab(index = y_test_pred['label'], columns =  y_test_pred['predicted'], margins=True)\nc","7f9faa93":"df_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ndf_test","357dbd97":"df_test_X = df_test\/255\ndf_test_X","797a676e":"y_test_submi = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\n#y_test_submi.set_index('ImageId', inplace=True)\ny_test_submi","24347f0a":"y_test_submi_end = y_test_submi[['ImageId']]\ny_test_submi_end","1ebe153a":"pred_test = ahuste_lgbm.predict(df_test_X)\npred_test","1fe26589":"y_test_submi_end['label'] = pred_test\ny_test_submi_end","b12be330":"y_test_submi_end.to_csv('digit_submission.csv',index=False)","2a471eb6":"### TRAINNING A MODEL","58782533":"### SAVE THE DATA","aa866810":"#### PREDICTIONS...","2893760c":"### FINAL DATA TO SUBMISSION","12050e80":"### TESTING DATA","f028b2db":"# MODEL LIGHTGBM---- BOOSTING"}}