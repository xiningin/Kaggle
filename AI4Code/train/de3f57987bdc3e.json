{"cell_type":{"dd8bd296":"code","eb1d0ccd":"code","82cce076":"code","08adee61":"code","a23a56a3":"code","36ea27c9":"code","424e72f6":"markdown","95222dde":"markdown","8dec4b58":"markdown","e26ac0fd":"markdown"},"source":{"dd8bd296":"!pip install mtcnn","eb1d0ccd":"from mtcnn import MTCNN\nimport os\nimport numpy as np\nimport pandas as pd\nimport cv2 as cv2\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import imshow\nfrom tensorflow.keras.models import Model, load_model\nimport logging\nlogging.getLogger(\"tensorflow\").setLevel(logging.ERROR)\nimport logging\nlogging.getLogger(\"tensorflow\").setLevel(logging.ERROR)\npd.set_option('display.max_columns', 80)","82cce076":"def crop(img):\n    # x, y, width, height = result['box']\n    s=1.2\n    height=img.shape[0]\n    width=img.shape[1]    \n    detector = MTCNN()\n    data=detector.detect_faces(img) \n    if data==[]:\n        return False, None\n    else:\n        for i, faces in enumerate(data): # iterate through all the faces found\n            box=faces['box']  # get the box for each face\n            biggest=0                    \n            area = box[2] * box[3]\n            if area>biggest:\n                biggest=area\n                bbox=box\n            x,y,w,h=bbox  \n            xn=int(x +w\/2)-int(w * s\/2)\n            yn=int(y+h\/2)- int(h * s\/2)\n            xen=int(x +w\/2) + int(w * s\/2)\n            yen=int(y+h\/2) + int(h * s\/2)\n            bbox[0]= 0 if bbox[0]<0 else bbox[0]\n            xn=0 if xn<0 else xn\n            yn=0 if yn<0 else yn\n            xen= width if xen>width else xen\n            yen= height if yen>height else yen\n            img=img[yn:yen, xn:xen]            \n            return True, img","08adee61":"def classify(sdir, csv_path,  model_path, name, crop_image = False):    \n    # read in the csv file\n    e=1.2\n    class_df=pd.read_csv(csv_path)    \n    img_height=int(class_df['height'].iloc[0])\n    img_width =int(class_df['width'].iloc[0])\n    img_size=(img_height, img_width)    \n    scale=class_df['scale by'].iloc[0]     \n    try: \n        s=int(scale)\n        s2=s\n        s1=0\n    except:\n        split=scale.split('-')\n        s1=float(split[1])\n        s2=float(split[0].split('*')[1]) \n    \n    path_list=[]\n    paths=os.listdir(sdir)\n    for f in paths:\n        path_list.append(os.path.join(sdir,f))\n    print (' Model is being loaded- this will take about 10 seconds')\n    model=load_model(model_path)\n    image_count=len(path_list) \n    index_list=[] \n    prob_list=[]\n    cropped_image_list=[]\n    good_image_count=0\n    for i in range (image_count):       \n        img=plt.imread(path_list[i])        \n        if crop_image == True:\n            status, img=crop(img)            \n        else:\n            status=True\n        if status== True:\n            good_image_count +=1\n            img=cv2.resize(img, img_size)             \n            cropped_image_list.append(img)\n            img=img*s2 - s1\n            img=np.expand_dims(img, axis=0)\n            p= np.squeeze (model.predict(img))           \n            index=np.argmax(p)             \n            prob=p[index]\n            index_list.append(index)\n            prob_list.append(prob)\n    if good_image_count==1:        \n        class_name= class_df['class'].iloc[index_list[0]]\n        probability= prob_list[0]\n        img=cropped_image_list [0]\/255 \n        plt.title(class_name, color='blue', fontsize=16)\n        plt.axis('off')\n        plt.imshow(img)\n        return class_name, probability\n    elif good_image_count == 0:\n        return None, None\n    most=0\n    for i in range (len(index_list)-1):\n        key= index_list[i]\n        keycount=0\n        for j in range (i+1, len(index_list)):\n            nkey= index_list[j]            \n            if nkey == key:\n                keycount +=1                \n        if keycount> most:\n            most=keycount\n            isave=i             \n    best_index=index_list[isave]    \n    psum=0\n    bestsum=0\n    for i in range (len(index_list)):\n        psum += prob_list[i]\n        if index_list[i]==best_index:\n            bestsum += prob_list[i]\n        else:\n            bestsum += 1-prob_list[i]\n    img= cropped_image_list[isave]\/255    \n    class_name=class_df['class'].iloc[best_index]\n    plt.title(class_name, color='blue', fontsize=16)\n    plt.axis('off')\n    plt.imshow(img)\n    return class_name, bestsum\/image_count","a23a56a3":"predict_dir=r'..\/input\/gender-classification-from-an-image\/gender_rev2\/images to predict'  \nname='Elizabeth Hurley '\nmloc=r'..\/input\/gender-classification-from-an-image\/gender_rev2\/EfficientNetB1-gender-98.00.h5'\ncsvloc=r'..\/input\/gender-classification-from-an-image\/gender_rev2\/class_dict.csv'\nresult, probability=classify(predict_dir, csvloc,mloc, name, crop_image=True)\nprint (f' {name} averaged predicted is {result} with a probability of {probability * 100:5.2f} %')","36ea27c9":"predict_dir=r'..\/input\/gender-classification-from-an-image\/gender_rev2\/single image to predict'\nname='Elizabeth Hurley'\nresult, probability=classify(predict_dir, csvloc,mloc, name, crop_image=True)\nprint (f' {name} is predicted as being {result} with a probability of {probability * 100:5.2f} %')","424e72f6":"### define a function that takes in an image and detects the faces in the image\n### if there are multiple faces in the image it selects the faces having the most\n### pixels in it and returns that as the cropped facial image","95222dde":"### This code use a trained model EfficientNetB1-gender-98.00.h5 with an F1 score on the test set of 98% to make predictions on either a single image or on multiple images. When multiple images are used they should be of the SAME person. The kernel has a function crop which will crop the image to be just that of the face. See directory images to predict for the types of images to use. If the images you have are already cropped to the face then set crop=False in the kernels parameter list.","8dec4b58":"### code below process 5 images of Elizabet Hurley from the images to predict directory.\n### images should be different images of the same person. The kernel independently\n### predicts each image along with its probability and provides an averaged probability\n### result.","e26ac0fd":"### code below demonstrates use with a single image"}}