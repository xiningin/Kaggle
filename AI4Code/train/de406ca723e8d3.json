{"cell_type":{"1b53ffce":"code","6f5af7e3":"code","a1c4ece7":"code","7cee6ae2":"code","3d58c827":"code","03ced817":"markdown","97714af0":"markdown","adf8d003":"markdown","022848bf":"markdown","710f769d":"markdown"},"source":{"1b53ffce":"## library imports\n\n## linear algebra\nimport numpy as np\n\n## file IO \/ processing\nimport pandas as pd\n\n## system\nimport os \n\n## requests\nimport requests\n\n## results storage\nfrom collections import defaultdict","6f5af7e3":"## scraping\n\n! pip install bs4\n\nfrom bs4 import BeautifulSoup","a1c4ece7":"## functions \n\ndef get_soup(url,parser='html.parser',verify=True):\n    \"\"\"\n        Gets the Beautifulsoup object which holds the data to be scrapped\n        \n        Args:\n            url (str): URL of the page to be scrapped\n            parser (str): Type of parser to be used \n        Returns:\n            BeautifulSoup object\n    \n    \n    \"\"\"\n    request = get_request_response(url,verify=verify)\n    \n    return BeautifulSoup(request.content,parser)\n\n\ndef get_request_response(url,verify=True):\n    \"\"\"\n    \n        Requests the content to be scrapped\n        \n        Args:\n            url (url): URL of the page to be scrapped\n            \n        Returns:\n            request object\n    \n    \"\"\"\n    \n    return requests.get(url,verify=verify)\n\n\ndef find_all(soup,**kwargs):\n    \"\"\"\n        Returns all the PageElement tags which match a given criteria\n        See BeautifulSoup find_all documentation\n        \n        Args:\n            soup (BeautifulSoup): BeautifulSoup object containing the web page content\n            \n        Returns:\n            list of PageElements\n    \n    \n    \"\"\"\n    return soup.find_all(**kwargs)\n\ndef find(soup,**kwargs):\n    \"\"\"\n        Returns one PageElement tag which matches a given criteria\n        See BeautifulSoup find_all documentation\n        \n        Args:\n            soup (BeautifulSoup): BeautifulSoup object containing the web page content\n            \n        Returns:\n            PageElement instance\n    \n    \n    \n    \"\"\"\n    return soup.find(**kwargs)\n\n\ndef find_per_game_table(soup):\n    \"\"\"\n    \n        Returns per game stats table PageElement tag\n        \n        See BeautifulSoup find_all documentation\n        \n        Args:\n            soup (BeautifulSoup): BeautifulSoup object containing the web page content\n            \n        Returns:\n            per game stats table PageElement tag instance\n    \n    \n    \n    \"\"\"\n    return find(soup,name='table',attrs={'class':'sortable stats_table','id':'per_game'})\n\n\ndef find_stats_tags_from_soup(soup,name):\n    \"\"\"\n    \n        Returns table PageElement tag of the chosen table\n        \n        See BeautifulSoup find_all documentation\n        \n        Args:\n            soup (BeautifulSoup): BeautifulSoup object containing the web page content\n            name (str): name of the table to be scraped\n            \n        Returns:\n            table PageElement tag instance\n    \n    \n    \n    \"\"\"\n    if name == 'per game':\n        table_soup = find_per_game_table(soup)\n    else:\n        raise NotImplementedError('Invalid table name')\n        \n    return find_all(soup=table_soup,name='td')\n\ndef get_stats(tags):\n    \"\"\"\n        Get stats from the table tags\n        \n        Args:\n            tags (list(PageElement tag)): list of tag elements which contain player informations\n            \n        returns:\n            dictionary of player stats\n\n    \n    \"\"\"\n    game_stats = defaultdict(list)\n    \n    for tag in tags:\n        game_stats[tag['data-stat']].append(tag.string)\n        \n    return game_stats\n        \ndef get_stats_from_soup(soup,name):\n    \"\"\"\n        Get player stats from BeautifulSoup object\n        \n        Args:\n            soup (BeautifulSoup): BeautifulSoup object containing the web page content\n            name (str): name of the table to be scraped\n            \n        Returns:\n            dictionary of player stats\n            \n    \n    \"\"\"\n    tags = find_stats_tags_from_soup(soup,name=name)\n    return get_stats(tags)\n\ndef get_stats_frame_from_soup(soup,name):\n    \"\"\"\n        Get player stats DataFrame from BeautifulSoup object\n        \n        Args:\n            soup (BeautifulSoup): BeautifulSoup object containing the web page content\n            name (str): name of the table to be scraped\n            \n        Returns:\n            pandas DataFrame of player stats\n            \n    \n    \"\"\"\n    return pd.DataFrame(data=get_stats_from_soup(soup,name=name))\n\ndef scrape_per_game_stats_from_url(url,school=None,season=None):\n    \"\"\"\n        Get player stats from BeautifulSoup object with school and season\n        \n        Args:\n            soup (BeautifulSoup): BeautifulSoup object containing the web page content\n            name (str): name of the table to be scraped\n            \n        Returns:\n            pandas DataFrame of player stats\n            \n    \n    \"\"\"\n    soup = get_soup(url=url)\n    df = get_stats_frame_from_soup(soup=soup,name='per game')\n    df['School'] = school\n    df['Season'] = season\n    return df","7cee6ae2":"## Gonzaga 2020-2021\n\nurl = \"https:\/\/www.sports-reference.com\/cbb\/schools\/gonzaga\/2021.html#all_schools_per_game\"\ndf = scrape_per_game_stats_from_url(url=url,school='Gonzaga',season='2020-2021')\ndf","3d58c827":"## Duke 2018-2019\n\nurl = \"https:\/\/www.sports-reference.com\/cbb\/schools\/duke\/2019.html#all_schools_per_game\"\ndf = scrape_per_game_stats_from_url(url=url,school='Duke',season='2018-2019')\ndf","03ced817":"## Example","97714af0":"## Prep","adf8d003":"# NCAA M Basketball Player \/ Team Stats Scraping\n\n#### This notebook can be used to scrape men's NCAA basketball player \/ team stats from https:\/\/www.sports-reference.com\/","022848bf":"## Introduction\n\nAs I got started on the March Machine Learning Mania 2021 - NCAAM contest, I thought it might be useful to bring in player stats to help make the winning predictions. \n\nAs the compeition data didn't include player stats, I decided to create a notebook to get that data! ","710f769d":"## Notes \n* Data types of the scraped DataFrame's series are objects.\n* I implemented the find_stats_tags_from_soup function so other tables could be added in if this notebook is found to be useful. \n\n#### Enjoy! "}}