{"cell_type":{"bb27598f":"code","546dce79":"code","5b796a54":"code","7cdca0b8":"code","5c8740d5":"code","44d8e3eb":"code","199f44b2":"code","c6dcca4e":"code","301c0ef0":"code","5e6e77f9":"code","8463348c":"code","4e4bdac8":"code","1eac24d2":"code","eec2b68e":"code","e90ca93a":"code","70769751":"code","760094e8":"code","ed9e7a76":"code","3b954c7b":"code","43582af8":"code","37da83cc":"code","019b767d":"code","4f5a0b94":"code","cb54537d":"code","1b814a09":"code","6c06f16f":"code","a6255bff":"code","603cc54d":"code","b2778137":"code","323aa5b3":"code","aaffc3f2":"code","321a5084":"code","b22b5b20":"code","c70c01b1":"code","e5cd1ca1":"code","cdb54aeb":"code","a087acd1":"code","43b0621e":"code","0b996fb2":"code","a8a8a302":"code","65a4858b":"code","590367e9":"code","950b271e":"code","12082d47":"code","9151f8bb":"code","82b36447":"code","c2ed2e13":"code","9801fe1e":"code","484fd707":"markdown","c25daac5":"markdown","989d8523":"markdown","98a68046":"markdown","e9e31bf7":"markdown","27962d99":"markdown","7728e330":"markdown","81a52ab7":"markdown"},"source":{"bb27598f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))","546dce79":"train = pd.read_csv('..\/input\/train_5clrc8b\/train.csv', index_col='reservation_id', parse_dates=True)\ntest = pd.read_csv('..\/input\/test_jwt0mqh\/test.csv', index_col='reservation_id', parse_dates=True)","5b796a54":"train_ = pd.read_csv('..\/input\/train_5clrc8b\/train.csv', index_col='reservation_id', parse_dates=True)\ntest_ = pd.read_csv('..\/input\/test_jwt0mqh\/test.csv', index_col='reservation_id', parse_dates=True)","7cdca0b8":"print (train.shape)\nprint (test.shape)","5c8740d5":"print (train.isnull().sum()*100\/train.shape[0])\nprint (test.isnull().sum()*100\/test.shape[0])","44d8e3eb":"import datetime\nimport pandas as pd\nfrom pandas_datareader import data\nimport re\n\ndef add_datepart(df, fldname, drop=True):\n    fld = df[fldname]\n    if not np.issubdtype(fld.dtype, np.datetime64):\n        df[fldname] = fld = pd.to_datetime(fld, infer_datetime_format=True)\n    targ_pre = re.sub('[Dd]ate$', '', fldname)\n    for n in ('Year', 'Month', 'Week', 'Day', 'Dayofweek', 'Dayofyear',\n            'Is_month_end', 'Is_month_start', 'Is_quarter_end', 'Is_quarter_start', 'Is_year_end', 'Is_year_start'):\n        df[targ_pre+n] = getattr(fld.dt,n.lower())\n    df[targ_pre+'Elapsed'] = fld.astype(np.int64) \/\/ 10**9\n    if drop: df.drop(fldname, axis=1, inplace=True)","199f44b2":"add_datepart(train, 'booking_date')\nadd_datepart(test, 'booking_date')\nadd_datepart(train, 'checkin_date')\nadd_datepart(test, 'checkin_date')\nadd_datepart(train, 'checkout_date')\nadd_datepart(test, 'checkout_date')","c6dcca4e":"def convert_year(x):\n    temp = x.split('\/')\n    temp[2] = '20'+temp[2]\n    return '-'.join(temp)","301c0ef0":"train_['checkin_date'] = train_['checkin_date'].astype('str').apply(lambda x: convert_year(x))\ntrain_['checkout_date'] = train_['checkout_date'].astype('str').apply(lambda x: convert_year(x))\ntrain_['booking_date'] = train_['booking_date'].astype('str').apply(lambda x: convert_year(x))","5e6e77f9":"test_['checkin_date'] = test_['checkin_date'].astype('str').apply(lambda x: convert_year(x))\ntest_['checkout_date'] = test_['checkout_date'].astype('str').apply(lambda x: convert_year(x))\ntest_['booking_date'] = test_['booking_date'].astype('str').apply(lambda x: convert_year(x))","8463348c":"train_['checkin_date'] = pd.to_datetime(train_['checkin_date'])\ntrain_['checkout_date'] = pd.to_datetime(train_['checkout_date'])\ntrain_['booking_date'] = pd.to_datetime(train_['booking_date'])","4e4bdac8":"test_['checkin_date'] = pd.to_datetime(test_['checkin_date'])\ntest_['checkout_date'] = pd.to_datetime(test_['checkout_date'])\ntest_['booking_date'] = pd.to_datetime(test_['booking_date'])","1eac24d2":"train_.head()","eec2b68e":"train['chkout_chkin_diff'] = (train_['checkout_date']-train_['checkin_date']).dt.days\ntrain['chkin_book_diff'] = (train_['checkin_date']-train_['booking_date']).dt.days","e90ca93a":"test['chkout_chkin_diff'] = (test_['checkout_date']-test_['checkin_date']).dt.days\ntest['chkin_book_diff'] = (test_['checkin_date']-test_['booking_date']).dt.days","70769751":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(ncols=2)\nsns.boxplot(x=train['chkout_chkin_diff'], orient='v', ax=axs[0])\nsns.boxplot(x=train['chkin_book_diff'], orient='v', ax=axs[1])","760094e8":"train.loc[train.chkout_chkin_diff < 0, 'chkout_chkin_diff'] = 0\ntrain.loc[train.chkin_book_diff < 0, 'chkin_book_diff'] = 0\ntest.loc[test.chkout_chkin_diff < 0, 'chkout_chkin_diff'] = 0\ntest.loc[test.chkin_book_diff < 0, 'chkin_book_diff'] = 0","ed9e7a76":"fig, axs = plt.subplots(ncols=2)\nsns.boxplot(x=train['chkout_chkin_diff'], orient='v', ax=axs[0])\nsns.boxplot(x=train['chkin_book_diff'], orient='v', ax=axs[1])","3b954c7b":"train['total_people'] = train['numberofadults'] + train['numberofchildren']\ntest['total_people'] = test['numberofadults'] + test['numberofchildren']","43582af8":"train['not_travelling'] = train['total_people'] - train['total_pax']\ntest['not_travelling'] = test['total_people'] - test['total_pax']","37da83cc":"train.loc[train.not_travelling < 0, 'not_travelling'] = 0\ntrain.loc[train.not_travelling < 0, 'not_travelling'] = 0\ntest.loc[test.not_travelling < 0, 'not_travelling'] = 0\ntest.loc[test.not_travelling < 0, 'not_travelling'] = 0","019b767d":"sns.boxplot(x='not_travelling', data=train)","4f5a0b94":"fig, axs = plt.subplots(ncols=2)\nsns.boxplot(x=train['total_people'], orient='v', ax=axs[0])\nsns.boxplot(x=test['total_people'], orient='v', ax=axs[1])","cb54537d":"sns.scatterplot(x='total_people', y='amount_spent_per_room_night_scaled', data=train)","1b814a09":"sns.boxplot(x='numberofadults', orient='h',data=train)","6c06f16f":"sns.scatterplot(x='numberofadults', y='amount_spent_per_room_night_scaled', data=train)","a6255bff":"sns.boxplot(x='numberofchildren', orient='h',data=train)","603cc54d":"sns.scatterplot(x='numberofchildren', y='amount_spent_per_room_night_scaled', data=train)","b2778137":"cat_vars = ['channel_code','main_product_code','resort_region_code','resort_type_code','room_type_booked_code','season_holidayed_code','state_code_residence','state_code_resort','member_age_buckets','booking_type_code','cluster_code','reservationstatusid_code',\n            'resort_id', 'persontravellingid']\nfor col in cat_vars:\n    print ('Processing ', col)\n    print ('Train uniques', train[col].unique().shape)\n    print ('Test uniques', test[col].unique().shape)\n    train[col] = train[col].astype('str')\n    test[col] = test[col].astype('str')","323aa5b3":"from sklearn.preprocessing import LabelEncoder\nencoder = {}\nfor col in cat_vars:\n    print ('Processing ', col)\n    le = LabelEncoder()\n    le.fit(train[col])\n    train[col] = le.transform(train[col])\n    for attr in test[col].unique().tolist():\n        if attr not in le.classes_:\n            le.classes_ = np.append(le.classes_, values=attr)\n    encoder[col] = le\n    test[col] = le.transform(test[col])","aaffc3f2":"coe_train = train['checkout_Elapsed'][0]\ncie_train = train['checkin_Elapsed'][0]\nboe_train = train['booking_Elapsed'][0]\ntrain['checkout_Elapsed'] = train['checkout_Elapsed'] \/ coe_train\ntest['checkout_Elapsed'] = test['checkout_Elapsed'] \/ coe_train\ntrain['checkin_Elapsed'] = train['checkin_Elapsed'] \/ cie_train\ntest['checkin_Elapsed'] = test['checkin_Elapsed'] \/ cie_train\ntrain['booking_Elapsed'] = train['booking_Elapsed'] \/ boe_train\ntest['booking_Elapsed'] = test['booking_Elapsed'] \/ boe_train","321a5084":"train.shape","b22b5b20":"train_idx = range(0, round(0.8*len(train)))\nvalid_idx = range(round(0.8*len(train)), round(0.9*len(train)))\ntest_idx = range(round(0.9*len(train)), len(train))\n\ntr = train.iloc[train_idx, :]\nval = train.iloc[valid_idx, :]\ntst = train.iloc[test_idx, :]\n\ntrain_params = ['channel_code',\n'main_product_code', \n'numberofadults', \n'numberofchildren', \n'persontravellingid', \n'resort_region_code', \n'resort_type_code', \n'room_type_booked_code', \n'roomnights', \n'season_holidayed_code', \n'state_code_residence', \n'state_code_resort', \n'total_pax', \n'member_age_buckets', \n'booking_type_code', \n'cluster_code', \n'reservationstatusid_code', \n'resort_id', \n'booking_Year', \n'booking_Month', \n'booking_Week', \n'booking_Day', \n'booking_Dayofweek', \n'booking_Dayofyear', \n'booking_Is_month_end', \n'booking_Is_month_start', \n'booking_Is_quarter_end', \n'booking_Is_quarter_start', \n'booking_Is_year_end', \n'booking_Is_year_start', \n'booking_Elapsed', \n'checkin_Year', \n'checkin_Month', \n'checkin_Week', \n'checkin_Day', \n'checkin_Dayofweek', \n'checkin_Dayofyear', \n'checkin_Is_month_end', \n'checkin_Is_month_start', \n'checkin_Is_quarter_end', \n'checkin_Is_quarter_start', \n'checkin_Is_year_end', \n'checkin_Is_year_start', \n'checkin_Elapsed', \n'checkout_Year', \n'checkout_Month', \n'checkout_Week', \n'checkout_Day', \n'checkout_Dayofweek', \n'checkout_Dayofyear', \n'checkout_Is_month_end', \n'checkout_Is_month_start', \n'checkout_Is_quarter_end', \n'checkout_Is_quarter_start', \n'checkout_Is_year_end', \n'checkout_Is_year_start', \n'checkout_Elapsed', \n'total_people',\n'not_travelling',\n'chkout_chkin_diff',\n'chkin_book_diff']\n\nX_train = tr[train_params]\ny_train = tr['amount_spent_per_room_night_scaled'].ravel()\nX_val = val[train_params]\ny_val = val['amount_spent_per_room_night_scaled'].ravel()\nX_test = tst[train_params]\ny_test = tst['amount_spent_per_room_night_scaled'].ravel()","c70c01b1":"from xgboost import XGBRegressor\n\"\"\"\"\nx1 = XGBRegressor()\nx1.fit(X_train, y_train)\"\"\"","e5cd1ca1":"x4 = XGBRegressor(n_estimators=1000)\nfrom sklearn.metrics import mean_squared_error, r2_score\nx4.fit(X_train, y_train, early_stopping_rounds=2, eval_set=[(X_train, y_train),(X_val, y_val)])","cdb54aeb":"y_train_pred4 = x4.predict(X_train)\ny_pred4 = x4.predict(X_test)\n\nprint('Train r2 score: ', r2_score(y_train_pred4, y_train))\nprint('Test r2 score: ', r2_score(y_test, y_pred4))\ntrain_mse4 = mean_squared_error(y_train_pred4, y_train)\ntest_mse4 = mean_squared_error(y_pred4, y_test)\ntrain_rmse4 = np.sqrt(train_mse4)\ntest_rmse4 = np.sqrt(test_mse4)\nprint('Train RMSE: %.4f' % train_rmse4)\nprint('Test RMSE: %.4f' % test_rmse4)","a087acd1":"\n\"\"\"\"\ny_train_pred1 = x1.predict(X_train)\ny_pred1 = x1.predict(X_test)\n\nprint('Train r2 score: ', r2_score(y_train_pred1, y_train))\nprint('Test r2 score: ', r2_score(y_test, y_pred1))\ntrain_mse1 = mean_squared_error(y_train_pred1, y_train)\ntest_mse1 = mean_squared_error(y_pred1, y_test)\ntrain_rmse1 = np.sqrt(train_mse1)\ntest_rmse1 = np.sqrt(test_mse1)\nprint('Train RMSE: %.4f' % train_rmse1)\nprint('Test RMSE: %.4f' % test_rmse1)\"\"\"","43b0621e":"\"\"\"\"x2 = XGBRegressor(n_estimators=1000)\nx2.fit(X_train, y_train, early_stopping_rounds=2, eval_set=[(X_train, y_train),(X_val, y_val)])\"\"\"","0b996fb2":"\"\"\"\"y_train_pred2 = x2.predict(X_train)\ny_pred2 = x2.predict(X_test)\n\nprint('Train r2 score: ', r2_score(y_train_pred2, y_train))\nprint('Test r2 score: ', r2_score(y_test, y_pred2))\ntrain_mse2 = mean_squared_error(y_train_pred2, y_train)\ntest_mse2 = mean_squared_error(y_pred2, y_test)\ntrain_rmse2 = np.sqrt(train_mse2)\ntest_rmse2 = np.sqrt(test_mse2)\nprint('Train RMSE: %.4f' % train_rmse2)\nprint('Test RMSE: %.4f' % test_rmse2)\"\"\"","a8a8a302":"\"\"\"\"x2 = XGBRegressor(n_estimators=1000)\nx2.fit(X_train, y_train, early_stopping_rounds=2, eval_set=[(X_train, y_train),(X_val, y_val)])\"\"\"","65a4858b":"\"\"\"\"most_relevant_features = ['total_people',\n 'total_pax',\n 'roomnights',\n 'persontravellingid',\n 'resort_region_code',\n 'channel_code',\n 'resort_id',\n 'numberofadults',\n 'season_holidayed_code',\n 'booking_Elapsed',\n 'state_code_resort',\n 'main_product_code',\n 'checkin_Elapsed',\n 'checkin_Dayofyear',\n 'resort_type_code',\n 'state_code_residence',\n 'checkout_Elapsed',\n 'room_type_booked_code',\n 'checkin_Day',\n 'member_age_buckets',\n 'checkout_Day',\n 'checkout_Month',\n 'booking_Day',\n 'cluster_code',\n 'numberofchildren',\n 'checkout_Dayofweek',\n 'booking_Dayofyear',\n 'checkin_Dayofweek',\n 'checkin_Year',\n 'booking_type_code',\n 'booking_Dayofweek',\n 'checkout_Dayofyear']\"\"\"","590367e9":"sub = pd.read_csv('..\/input\/sample_submission_dlc0jkw\/sample_submission.csv')","950b271e":"sub['amount_spent_per_room_night_scaled'] = x4.predict(test[train_params])","12082d47":"sub.to_csv('sub2.csv', index=False)","9151f8bb":"#from collections import OrderedDict\n#attributes = OrderedDict(sorted(x2.get_booster().get_fscore().items(), key=lambda t: t[1], reverse=True))","82b36447":"#most_relevant_features","c2ed2e13":"#","9801fe1e":"#most_relevant_features= list( dict((k, v) for k, v in x2.get_booster().get_fscore().items() if v >= 4).keys())","484fd707":"### Trying First Model with basic configuration","c25daac5":"Removing Memberid as it contains too many categories!!","989d8523":"#### Second Model","98a68046":"#### Splitting data set into train\/valid\/test","e9e31bf7":"### Categorical variables Label Encoding.\nAs tree based models have a lesser impact of encoding we first go with label encoding and check the results.****","27962d99":"Checking for null values in the data set.","7728e330":"#### Third Model Best Attributes","81a52ab7":"**Creating a new features - total number of people and total people not travelling******"}}