{"cell_type":{"77fd92c9":"code","003d0b23":"code","b5470e00":"code","1240198a":"code","2395cb52":"code","699583ad":"code","782d02f2":"code","346f9a4f":"code","a62015a7":"code","65580047":"code","5caeddf6":"code","221ac9ee":"code","f3ffdc8e":"code","e5bc0236":"code","ed789314":"code","b1a45e10":"code","3d5b3201":"code","2079d7ab":"code","99916d53":"code","275d6f86":"code","444b4c07":"code","311277f1":"code","a34b8764":"code","0d6fec16":"code","bba6e2e5":"code","1eeda1a8":"code","c0f67081":"code","773699b9":"code","79e34f75":"markdown","0b3c677c":"markdown","13364595":"markdown","9d21ee4f":"markdown","4f1e58d2":"markdown","a5fc3c3c":"markdown","77daec29":"markdown","9c5558ad":"markdown","d6f13a9b":"markdown","50c64062":"markdown","7307751d":"markdown","1daef67e":"markdown","93113605":"markdown","6ea5c711":"markdown","e2b55cc5":"markdown","df87e8f9":"markdown","63d1ef0c":"markdown","7c4023bb":"markdown","e5e51e7b":"markdown"},"source":{"77fd92c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","003d0b23":"import matplotlib.pyplot as plt\nimport seaborn as sns","b5470e00":"air_visit_data = pd.read_csv('..\/input\/recruit-restaurant-visitor-forecasting\/air_visit_data.csv.zip')\nair_store_info = pd.read_csv('..\/input\/recruit-restaurant-visitor-forecasting\/air_store_info.csv.zip')\nhpg_store_info = pd.read_csv('..\/input\/recruit-restaurant-visitor-forecasting\/hpg_store_info.csv.zip')\nair_reserve = pd.read_csv('..\/input\/recruit-restaurant-visitor-forecasting\/air_reserve.csv.zip')\nhpg_reserve = pd.read_csv('..\/input\/recruit-restaurant-visitor-forecasting\/hpg_reserve.csv.zip')\nstore_id_relation = pd.read_csv('..\/input\/recruit-restaurant-visitor-forecasting\/store_id_relation.csv.zip')\nsample_submission = pd.read_csv('..\/input\/recruit-restaurant-visitor-forecasting\/sample_submission.csv.zip')\ndate_info = pd.read_csv('..\/input\/recruit-restaurant-visitor-forecasting\/date_info.csv.zip')","1240198a":"air_visit_data.head()","2395cb52":"air_store_info.head()","699583ad":"hpg_store_info.head()","782d02f2":"hpg_reserve.head()","346f9a4f":"store_id_relation.head()","a62015a7":"sample_submission.head()","65580047":"date_info.head()","5caeddf6":"# date time \ubd84\ub9ac (date, time, year, month, day)\ndef split_date_time(df):\n    result = df.copy()\n    if 'visit_datetime' in result.columns:\n        result.loc[:,'visit_datetime'] = pd.to_datetime(result['visit_datetime'])\n        result.loc[:,'visit_date']  = [str(d.date()) for d in result['visit_datetime']]       \n        result.loc[:,'visit_time']  = [str(d.time()) for d in result['visit_datetime']]             \n    if 'reserve_datetime' in df.columns:\n        result.loc[:,'reserve_datetime'] = pd.to_datetime(result['reserve_datetime'])\n        result.loc[:,'reserve_date']  = [str(d.date()) for d in result['reserve_datetime']]       \n        result.loc[:,'reserve_time']  = [str(d.time()) for d in result['reserve_datetime']]        \n        \n    if 'visit_date' in result.columns:        \n        result = pd.merge(result, date_info, how='inner', left_on='visit_date', right_on='calendar_date')\n        result.loc[:,'visit_date'] = pd.to_datetime(result['visit_date'])\n        result['visit_year'] = result.visit_date.dt.year\n        result['visit_month']  = result.visit_date.dt.month\n        result['visit_day'] = result.visit_date.dt.day\n\n    if 'reserve_date' in result.columns:        \n        result = pd.merge(result, date_info ,how='inner', left_on='reserve_date', right_on='calendar_date')\n        result.loc[:,'reserve_date'] = pd.to_datetime(result['reserve_date'])\n        result['reserve_year'] = result.reserve_date.dt.year\n        result['reserve_month']  = result.reserve_date.dt.month\n        result['reserve_day'] = result.reserve_date.dt.day\n    return result","221ac9ee":"air_visit_df = split_date_time(air_visit_data)\nair_visit_df.head()","f3ffdc8e":"plt.figure(figsize=(20,10))\nsns.lineplot(data = air_visit_df, x='visit_date', y='visitors', estimator=sum)\nplt.show()","e5bc0236":"m = ['Monday', 'Tuesday', 'Thursday', 'Wednesday','Friday', 'Saturday', 'Sunday']\nplt.figure(figsize=(20,10))\nsns.barplot(data = air_visit_df, x='day_of_week', y='visitors', order=m)\nplt.show()","ed789314":"plt.figure(figsize=(20,10))\nsns.barplot(data = air_visit_df, x='visit_month', y='visitors')\nplt.show()","b1a45e10":"air_reserve_df = split_date_time(air_reserve)\nair_reserve_df","3d5b3201":"plt.figure(figsize=(20,10))\nsns.lineplot(data = air_visit_df, x='visit_date', y='visitors', estimator=sum)\nsns.lineplot(data = air_reserve_df, x='visit_date', y='reserve_visitors', color='r', estimator=sum)\nplt.show()","2079d7ab":"air_reserve_df = split_date_time(air_reserve)\nair_reserve_df.head()","99916d53":"plt.figure(figsize=(20,10))\nsns.lineplot(data = air_reserve_df[air_reserve_df.visit_year==2016], x='visit_date', y='reserve_visitors', estimator=sum)\nplt.show()","275d6f86":"plt.figure(figsize=(20,10))\nsns.lineplot(data = air_reserve_df.loc[(air_reserve_df['visit_year'] == 2016) & (air_reserve_df['visit_month'] == 1)], x='visit_date', y='reserve_visitors', estimator=sum)\nplt.show()","444b4c07":"hpg_reserve_df = split_date_time(hpg_reserve)\nhpg_reserve_df.head()","311277f1":"plt.figure(figsize=(20,10))\nsns.lineplot(data = hpg_reserve_df[hpg_reserve_df.visit_year==2016], x='visit_date', y='reserve_visitors', estimator=sum)\nplt.show()","a34b8764":"air_visit_df = split_date_time(air_visit_data)\nair_visit_df['visit_date'] = pd.to_datetime(air_visit_data['visit_date'])\nair_visit_df.head()","0d6fec16":"air_visit_df.loc[air_visit_df.visit_year==2016]","bba6e2e5":"plt.figure(figsize=(20,10))\nsns.lineplot(data = air_visit_df[air_visit_df.visit_year==2016], x='visit_date', y='visitors', estimator=sum)\nplt.show()","1eeda1a8":"plt.figure(figsize=(20,10))\nsns.lineplot(data = air_visit_df.loc[(air_visit_df['visit_year'] == 2016) & (air_visit_df['visit_month'] == 1)], x='visit_date', y='visitors', estimator=sum)\nplt.show()","c0f67081":"air_visit_df['visit_week'] = air_visit_df['visit_date'].map(lambda x : date.isocalendar()[1])","773699b9":"plt.figure(figsize=(20,10))\nsns.lineplot(data = air_visit_df.loc[(air_visit_df['visit_year'] == 2016) & (air_visit_df['visit_month'] == 1) & (air_visit_df['visit_week'] == 2)], x='visit_date', y='visitors', estimator=sum)\nplt.show()","79e34f75":"#### \uc6d4\ubcc4","0b3c677c":"## EDA","13364595":"### \uc608\uc57d\uc790 \uc218","9d21ee4f":"#### air","4f1e58d2":"### 2016\ub144\ub3c4 \ucd94\uc774 \ud655\uc778","a5fc3c3c":"#### hpg","77daec29":"# \ub370\uc774\ud130 \uc804\ucc98\ub9ac","9c5558ad":"#### \uc804\uccb4 \uae30\uac04\ub3d9\uc548 \ubc29\ubb38\uc790\uc640 \uc608\uc57d\uc790 \ucd94\uc774","d6f13a9b":"#### \uc804\uccb4 \uae30\uac04","50c64062":"##### \ud55c\ub2ec \uae30\uac04 \uc2dc\uac01\ud654","7307751d":"### \uc804\uccb4 \ubc29\ubb38\uc790 \ucd94\uc774 \ud655\uc778","1daef67e":"## Load Data","93113605":"##### 1\uc8fc \uae30\uac04 \uc2dc\uac01\ud654","6ea5c711":"# \ubaa8\ub378 \ud3c9\uac00","e2b55cc5":"## \uc2dc\uac01\ud654","df87e8f9":"# \ubaa8\ub378 \ud559\uc2b5","63d1ef0c":"### \ubc29\ubb38\uc790 \uc218","7c4023bb":"# \ub370\uc774\ud130 \ubd84\uc11d","e5e51e7b":"#### \uc694\uc77c\ubcc4"}}