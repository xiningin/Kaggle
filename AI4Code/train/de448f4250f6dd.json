{"cell_type":{"5b05f225":"code","506ddd5f":"code","57407c54":"code","d32df870":"code","c702f112":"code","f3855277":"code","9272ceaf":"code","c8f72908":"code","9f3a9317":"code","af4716cc":"code","cce4587c":"code","728d81c9":"code","324ab5a1":"code","9c74be05":"code","5a0b928a":"code","394c9ee6":"code","c66c2ea6":"code","0eecd49a":"code","9d6b271b":"code","19106134":"code","6a1bd619":"code","6389d08d":"code","b79c3f6f":"code","9a22b75b":"code","b364fd28":"code","e7d47a32":"code","b6329188":"code","29038861":"code","2ef18719":"code","f3338fe3":"code","842c7cb6":"code","34ebf40d":"code","51528684":"code","e4d27467":"code","9957f51e":"code","9ee24631":"code","c28b744e":"code","c553be58":"code","a5558e40":"code","ee8d7dd4":"code","fc5d30ea":"code","07269f17":"code","c1115612":"code","506f21c1":"code","a6d701ee":"code","18860885":"code","90db1599":"code","a6dec68a":"code","87c8b3a1":"code","105c4499":"code","45b33406":"code","9a5fac61":"code","97657fcc":"code","a3a51bb3":"code","f8d07802":"code","f3804f33":"code","f53da32b":"code","cd20224c":"code","63f029e4":"code","4a9ebfba":"code","1869e45d":"code","e4204454":"code","a5dd07b2":"code","36229e2b":"code","f093c01a":"code","ea65361f":"code","ec5c2ff0":"code","0fecacd2":"code","961ffd5c":"markdown","e80a1d10":"markdown","44b5936b":"markdown","6960b0ee":"markdown","5018a1c0":"markdown","d0c1b16d":"markdown","a6f52fde":"markdown","eb09ca9d":"markdown","8ee2d00f":"markdown","de02ebf3":"markdown","1f30d541":"markdown","cfe7b2ab":"markdown"},"source":{"5b05f225":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","506ddd5f":"dataset_train=pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndataset_train.head()\n","57407c54":"dataset_train.shape","d32df870":"dataset_test=pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ndataset_test.head()","c702f112":"dataset_test.shape","f3855277":"import matplotlib.pyplot as plt\n\nplt.hist(dataset_train.SalePrice)\n# histogram for saleprice is skewed so we took log of saleprice\ndataset_train.SalePrice=np.log(dataset_train.SalePrice)\n","9272ceaf":"dataset_train.SalePrice","c8f72908":"plt.hist(dataset_train.SalePrice)","9f3a9317":"dataset_train.info()","af4716cc":"dataset_train.isnull().sum()","cce4587c":"dataset_train.isnull().sum()\ndataset_train.dropna(axis=1,inplace=True)","728d81c9":"dataset_train.shape","324ab5a1":"obj_df = dataset_train.select_dtypes(include=['object']).copy()\n\nobj_df\n","9c74be05":"obj_df.columns","5a0b928a":"dataset_train=pd.get_dummies(dataset_train,columns=obj_df.columns,drop_first=True)","394c9ee6":"dataset_train.shape","c66c2ea6":"dataset_train.dropna(axis=1,inplace=True)","0eecd49a":"dataset_train.shape","9d6b271b":"dataset_train.head()","19106134":"dataset_train.columns","6a1bd619":"# drop irrelvant features\ndataset_train.drop(\"Id\",axis=1,inplace=True)\n","6389d08d":"dataset_train.shape","b79c3f6f":"dataset_test.shape","9a22b75b":"# drop na values\ndataset_test.dropna(axis=1,inplace=True)\nobj_df = dataset_test.select_dtypes(include=['object']).copy()\n\n","b364fd28":"obj_df","e7d47a32":"obj_df.columns","b6329188":"# get dummies\ndataset_test.head()\ndataset_test=pd.get_dummies(dataset_test,columns=obj_df.columns,drop_first=True)\ndataset_test.shape","29038861":"dataset_test.shape","2ef18719":"dataset_test.isnull().sum()","f3338fe3":"submission = pd.DataFrame()\nsubmission['Id'] = dataset_test.Id\ntestCols = dataset_test.columns\ndataset_test.drop(\"Id\",axis=1,inplace=True)\ndataset_test = dataset_test[dataset_train.columns & testCols]\ndataset_test\n","842c7cb6":"submission['Id']","34ebf40d":"# create feature matrix and target array\nX = dataset_train[dataset_train.columns & dataset_test.columns]\ny=dataset_train[\"SalePrice\"]","51528684":"y.head()","e4d27467":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=10)","9957f51e":"X_train.shape","9ee24631":"X_train.shape","c28b744e":"X_test.shape","c553be58":"y_test.shape","a5558e40":"y_test.shape","ee8d7dd4":"from sklearn.linear_model import LinearRegression # import\nmodel1=LinearRegression()\nmodel1.fit(X_train,y_train)","fc5d30ea":"y_pred=model1.predict(X_test)","07269f17":"y_pred","c1115612":"np.exp(y_test)","506f21c1":"df=pd.DataFrame({\"test\":y_test,\"pred\":y_pred})\ndf","a6d701ee":"df=pd.DataFrame({\"test\":np.exp(y_test),\"pred\":np.exp(y_pred)})\ndf","18860885":"model1.score(X_test,y_test)","90db1599":"#rmse for test data\n# r-squared for test data\nsse=np.sum((np.exp(y_test)-np.exp(y_pred))**2)\n\nrmse=np.sqrt(sse\/X_test.shape[0])\nrmse","a6dec68a":"from sklearn.feature_selection import SelectKBest, f_regression","87c8b3a1":"select_feature = SelectKBest(f_regression,k=10).fit(X_train, y_train)","105c4499":"select_feature.scores_","45b33406":"selected_features_df = pd.DataFrame({'Feature':list(X_train.columns),\n                                     'score':select_feature.scores_})\nselected_features_df.sort_values(by='score', ascending=False)","9a5fac61":"X_train.shape","97657fcc":"X_train_new = select_feature.transform(X_train)\nX_train_new.shape","a3a51bb3":"X_train_new","f8d07802":"model_top_features=LinearRegression()\nmodel_top_features.fit(X_train_new,y_train)","f3804f33":"model_top_features.score(X_train_new,y_train)","f53da32b":"from sklearn.tree import DecisionTreeRegressor\nmodel_tree=DecisionTreeRegressor(max_depth=3)\nmodel_tree.fit(X_train,y_train)\n# predictions on test data\ny_pred_tree=model_tree.predict(X_test)\ny_pred_tree","cd20224c":"# r-squared for test data\nsse_tree=np.sum((y_test-y_pred_tree)**2)\nsst_tree=np.sum((np.mean(y_train)-y_test)**2)\nr2_tree=1-sse_tree\/sst_tree\nr2_tree","63f029e4":"from sklearn.ensemble import RandomForestRegressor\nmodel_rf=RandomForestRegressor()\nmodel_rf.fit(X_train,y_train)\ny_pred_rf=model_rf.predict(X_test)\n# r-squared for test data\nsse_rf=np.sum((y_test-y_pred_rf)**2)\nsst_rf=np.sum((np.mean(y_train)-y_test)**2)\nr2_rf=1-sse_rf\/sst_rf\nr2_rf\n","4a9ebfba":"model_rf.feature_importances_ ","1869e45d":"data = pd.Series(data=model_rf.feature_importances_,index=X_train.columns)\ndata.sort_values(ascending=True,inplace=True)\nplt.figure(figsize=(15,15))\ndata.plot.barh()","e4204454":"from sklearn.model_selection import GridSearchCV\nparameters={\"max_depth\":np.arange(1,7),\"max_features\":np.arange(10,100)}\ntune_model = GridSearchCV(model_rf,parameters,cv=5)\ntune_model.fit(X_train,y_train)","a5dd07b2":"tune_model.best_params_","36229e2b":"y_pred_rf_tune=tune_model.predict(X_test)\n# r-squared for test data\nsse_rf_tune=np.sum((y_test-y_pred_rf_tune)**2)\nsst_rf_tune=np.sum((np.mean(y_train)-y_test)**2)\nr2_rf_tune=1-sse_rf_tune\/sst_rf_tune\nr2_rf_tune","f093c01a":"# predictions on given test dataset\npredictions_ridge=model_ridge.predict(dataset_test)\nfinal_predictions=np.exp(predictions_ridge)\nfinal_predictions","ea65361f":"submission[\"SalePrice\"]=final_predictions","ec5c2ff0":"submission","0fecacd2":"submission.to_csv(\"submission_regression1.csv\",index=False)","961ffd5c":"# predictions on test dataset and submission","e80a1d10":"# splitting data ","44b5936b":"# random forest regressor","6960b0ee":"# import datasets","5018a1c0":"# feature selection\n","d0c1b16d":"# test dataset","a6f52fde":"# hyperparameter tuning in random forest","eb09ca9d":"# drop na values","8ee2d00f":"# linear regression","de02ebf3":"# get dummies for categorical variables","1f30d541":"# decisiontreeclassifier","cfe7b2ab":"# make model"}}