{"cell_type":{"063866b2":"code","650a735c":"code","4c64ec41":"code","ef032d71":"code","b70ede5f":"code","84862cac":"code","097c112f":"code","e2c8add9":"code","53ff024d":"code","1c4c69a1":"code","f23ad42f":"code","1d623781":"code","af213f07":"code","a70d3eff":"code","373b67fd":"code","4c3b1ebd":"code","5228b621":"code","53f06662":"code","eef68ee1":"code","fa50127e":"code","a5ee9779":"code","c43e242d":"code","854f7a69":"code","3368a675":"code","7ccc8748":"code","31e6c6f7":"code","f1e03ec8":"code","264df348":"code","1548f2bf":"code","2b33d39f":"code","8b0f333b":"code","1b6ac26a":"code","7dc1cded":"code","16e5df35":"code","a0a79c32":"code","bf01580f":"code","b760e5aa":"code","5e53cde5":"code","98801c4f":"code","c9b7497c":"code","9fd10b90":"code","79ff528b":"code","7262aa79":"markdown","d7b2b610":"markdown","0014ff3f":"markdown","d2051f6c":"markdown","efa36125":"markdown","1802cbc8":"markdown","1d6976a5":"markdown"},"source":{"063866b2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","650a735c":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.metrics import confusion_matrix, classification_report","4c64ec41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ef032d71":"data = pd.read_csv(\"..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")","b70ede5f":"data.info()","84862cac":"data.shape","097c112f":"data.isnull().sum()","e2c8add9":"z=data['quality'].value_counts()\nz","53ff024d":"sns.set(style='darkgrid')\nplt.figure(figsize=(15,6))\nsns.barplot(x = 'quality', y = 'fixed acidity', data = data)\nplt.xlabel(\"Quality\")\nplt.ylabel(\"Fixed Acidity\")\nplt.title(\"Quality vs Fixed Acidity\")","1c4c69a1":"data.columns","f23ad42f":"sns.set(style='darkgrid')\nplt.figure(figsize=(15,6))\nsns.scatterplot(x='fixed acidity', y='volatile acidity', data = data, hue='quality', palette='Set1')","1d623781":"sns.set(style='darkgrid')\nplt.figure(figsize=(15,6))\nsns.kdeplot(data['quality'], shade=True)","af213f07":"correlation = data.corr()\ncorrelation","a70d3eff":"plt.figure(figsize=(15,10))\nsns.heatmap(correlation, annot=True, vmin=-1, vmax=1, center= 0, cmap= 'coolwarm')","373b67fd":"plt.figure(figsize=(15,10))\nsns.pairplot(data, hue='quality')","4c3b1ebd":"from scipy import stats","5228b621":"sns.catplot(y='quality', data=data, kind='box')","53f06662":"sns.catplot(y='pH', data=data, kind='box')","eef68ee1":"sns.boxplot('quality', 'fixed acidity', data = data)","fa50127e":"sns.boxplot('quality', 'volatile acidity', data = data)","a5ee9779":"sns.boxplot('quality', 'citric acid', data = data)","c43e242d":"#next we shall create a new column called Review. This column will contain the values of 1,2, and 3. \n#1 - Bad\n#2 - Average\n#3 - Excellent\n#This will be split in the following way. \n#1,2,3 --> Bad\n#4,5,6,7 --> Average\n#8,9,10 --> Excellent\n#Create an empty list called Reviews\nreviews = []\nfor i in data['quality']:\n    if i >= 1 and i <= 3:\n        reviews.append('1')\n    elif i >= 4 and i <= 7:\n        reviews.append('2')\n    elif i >= 8 and i <= 10:\n        reviews.append('3')\ndata['Reviews'] = reviews","854f7a69":"data['Reviews'].unique()","3368a675":"x = data.iloc[:,:11]\ny = data['Reviews']","7ccc8748":"from sklearn.decomposition import PCA","31e6c6f7":"pca = PCA()","f1e03ec8":"x_pca = pca.fit_transform(x)","264df348":"x_pca.shape","1548f2bf":"plt.figure(figsize=(10,10))\nplt.plot(np.cumsum(pca.explained_variance_ratio_), 'ro-')\nplt.grid()","2b33d39f":"pca_new = PCA(n_components=8)\nx_new = pca_new.fit_transform(x)","8b0f333b":"x_new.shape","1b6ac26a":"x_train, x_test, y_train, y_test = train_test_split(x_new, y, test_size = 0.20, random_state=40)","7dc1cded":"x_train.shape","16e5df35":"x_test.shape","a0a79c32":"y_train.shape","bf01580f":"y_test.shape","b760e5aa":"model = DecisionTreeClassifier()","5e53cde5":"model.fit(x_train, y_train)","98801c4f":"predict = model.predict(x_test)","c9b7497c":"predict","9fd10b90":"confusion_matrix = confusion_matrix(y_test, predict)\nconfusion_matrix","79ff528b":"from sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, predict)\naccuracy","7262aa79":"### Data Preprocessing","d7b2b610":"### Performance Metrics","0014ff3f":"After training the model and predicting the necessary information from that model, our next step is to find out how well our model works. So, for this, we have various performance metrics like Confusion Matrix, Accuracy and Classification Report.","d2051f6c":"### Reducing the Dimensions of the Data","efa36125":"### Outlier Detection","1802cbc8":"### Decision Tree Classifier","1d6976a5":"#### Import all the required packages"}}