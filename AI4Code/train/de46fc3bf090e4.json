{"cell_type":{"4394cd13":"code","cee3c3f3":"code","793b89fd":"code","42762363":"code","5ca66dad":"code","aefc79dc":"code","9d026b9c":"code","9e7ce52e":"code","a1bbcc71":"code","3c077e62":"code","21804997":"code","037638b8":"code","75a0953b":"code","890da170":"code","a12af02f":"code","b12197bb":"code","8342510c":"code","976a37b8":"code","63f390e7":"code","612e4626":"code","858584cf":"code","505cc419":"code","f37b633d":"markdown","0c845df3":"markdown","c7f6f0e8":"markdown","57fcd66c":"markdown","45019f26":"markdown","df230551":"markdown","5f89c5ec":"markdown","41b11e17":"markdown"},"source":{"4394cd13":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cee3c3f3":"#Load the data\ndf=pd.read_csv('\/kaggle\/input\/aus-real-estate-sales-march-2019-to-april-2020\/aus-property-sales-sep2018-april2020.csv')\ndf['date_sold'] = pd.to_datetime(df['date_sold'])\ndf.tail()","793b89fd":"import matplotlib.image as image\nfrom matplotlib.font_manager import FontProperties\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import register_matplotlib_converters\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nfrom matplotlib.ticker import (AutoMinorLocator, MultipleLocator)\nimport matplotlib as mpl\nimport matplotlib.patches as mpatches\nfrom matplotlib.offsetbox import TextArea, DrawingArea, OffsetImage, AnnotationBbox\nregister_matplotlib_converters()\n%matplotlib inline \nim = image.imread('\/kaggle\/input\/logohtagmin\/HtAG-logo.png')\nfp = FontProperties(fname=r\"\/kaggle\/input\/faicons\/Font Awesome 5 Free-Regular-400.otf\") \nplt.imshow(im)","42762363":"df = df[np.abs(df.price - df.price.mean()) <= (9.0 * df.price.std())] # Clean the outliers\nplt.figure(figsize=(19,7))\nplt.plot_date(df['date_sold'], df['price'], xdate=True, markersize=1)","5ca66dad":"import plotly.express as px\ndf_map=df[df['property_type']=='townhouse']\ndf_map=df_map[np.abs(df_map.price - df_map.price.mean()) <= (3.0 * df_map.price.std())] # filter within 3 STD for beter colour scale\nfig = px.density_mapbox(df_map, lat='lat', lon='lon', z='price', radius=10,\n                        center=dict(lat=df_map.lat.mean(), lon=df_map.lon.mean()), zoom=4,color_continuous_scale='Viridis',\n                        mapbox_style=\"carto-positron\", title=\"Townhouse sale density and price Sep 2018 - April 2020\")\n\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.show()","aefc79dc":"def plot_setup(colors, im, df, city='AUS'):\n    fig,ax= plt.subplots()\n    fig.set_size_inches(21, 7)\n\n    fig.suptitle(city+' Property Sales September 2018 - April 2020', fontsize=20)\n    ax.set_xlabel('Date Sold')\n    ax.set_ylabel('Price')\n    ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))\n    imagebox = OffsetImage(im, zoom=0.7)\n    ab = AnnotationBbox(imagebox, (df[\"date_sold\"].mean(), df[\"price\"].max()\/1.1), frameon = False)\n    ax.add_artist(ab)\n\n    patchList = []\n    for key in colors:\n            data_key = mpatches.Patch(color=colors[key], label=key)\n            patchList.append(data_key)\n    plt.legend(handles=patchList, loc='upper right')\n    return fig, ax","9d026b9c":"# plot setup\n\ncolors = {'house':'green', 'unit':'red', 'townhouse':'blue'}\nfig, ax=plot_setup(colors,im,df)\n#plot the data\nax.scatter(x=df[\"date_sold\"].values,\n           y=df[\"price\"].values, \n           c=df[\"property_type\"].apply(lambda x: colors[x]),\n           alpha=0.3, marker='o', s=5)\n\n\n# setting x axis bounds\nax.set_xlim((df[\"date_sold\"].min(), df[\"date_sold\"].max()))\nplt.show()","9e7ce52e":"df['city_name']=df['city_name'].str.title()\ncities=df['city_name'].unique()\n","a1bbcc71":"cities=['Sydney', 'Melbourne','Brisbane', 'Adelaide', 'Perth',  'Canberra']\nfor city in cities:\n\n    \n    df_plot=df[df['city_name']==city]\n    df_plot = df_plot[np.abs(df_plot.price - df_plot.price.mean()) <= (5.0 * df_plot.price.std())] #limit to 5.0 STD for better scale\n    fig,ax=plot_setup(colors,im, df_plot, city)\n    ax.scatter(x=df_plot[\"date_sold\"].values,\n           y=df_plot[\"price\"].values, \n           c=df_plot[\"property_type\"].apply(lambda x: colors[x]),\n           alpha=0.3, marker='o', s=5)\n\n    # setting x axis bounds\n    ax.set_xlim((df_plot[\"date_sold\"].min(), df_plot[\"date_sold\"].max()))\n    plt.show()\n   \n    ","3c077e62":"from scipy.ndimage.filters import gaussian_filter1d\n\nproperty_types=df.property_type.unique()\n\nfor property_type in property_types:\n    fig, ax = plt.subplots(figsize=(21,7))\n    fig.suptitle(property_type.title()+' Weekly Median Price March 2019 - April 2020', fontsize=20)\n    ax.set_ylabel('Median Price')\n    ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))\n    \n    cities_=list(cities)  \n    for city in cities:\n        df_weekly=df[['date_sold', 'city_name', 'property_type', 'price']][df['property_type']==property_type].copy().set_index('date_sold').sort_index()\n        \n        #Remove series for cities with few weekly sales for the property type. 700 sales will give us roughly 12-15 weekly sales average for 2019-2020.\n        if len(df_weekly[(df_weekly['city_name']==city) & (df_weekly.index>pd.to_datetime('2020-01-04'))])<300: \n            cities_.remove(city)\n            continue\n\n        df_temp=df_weekly[df_weekly['city_name']==city].resample('W').median().interpolate(method='linear', limit_direction='both')\n        df_temp['price'] = gaussian_filter1d(df_temp['price'], sigma=1) #smooth the line\n        #Cut off the front and last week as the data may not be complete for these periods\n        df_temp=df_temp[2:]\n        df_temp=df_temp[:-2]\n        df_temp.plot(ax=ax, linewidth=3, grid=True)\n    ax.legend(cities_, loc='upper left')\n    ax.set_xlabel('Week')\n    imagebox = OffsetImage(im, zoom=0.5)\n    ab = AnnotationBbox(imagebox, (df_temp.index.mean(), ax.get_ylim()[1]\/1.05), frameon = False)\n    ax.add_artist(ab)\n    ","21804997":"import seaborn as sns\nfreqs={'M': 'Monthly','Q':'Quaterly'}\nfor freq in freqs:\n    for property_type in property_types:\n        fig, ax = plt.subplots(figsize=(21,7))\n        fig.suptitle(property_type.title()+' '+freqs[freq]+' Median Price September 2018 - May 2020', fontsize=20)\n        ax.set_ylabel('Median Price')\n        ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))\n\n        cities_=list(cities)  \n        for city in cities:\n            #if city !='Brisbane':\n            #    cities_.remove(city)\n            #    continue\n            df_monthly=df[['date_sold', 'city_name', 'property_type', 'price']][df['property_type']==property_type].copy().set_index('date_sold')\n\n            #Remove series for cities with few weekly sales for the property type. 700 sales will give us roughly 12-15 weekly sales average for 2019-2020.\n            if len(df_monthly[(df_monthly['city_name']==city) & (df_monthly.index>pd.to_datetime('2020-01-04'))])<300: \n                #len(df_weekly[(df_weekly.index>pd.to_datetime('2020-01-04')) & (df_weekly['city_name']==city)])\n                cities_.remove(city)\n                continue\n\n            df_temp=df_monthly[df_monthly['city_name']==city].resample(freq).median().interpolate(method='linear', limit_direction='both')\n            df_temp['price'] = gaussian_filter1d(df_temp['price'], sigma=1) #smooth the line\n            #df_temp=df_temp[:-1]\n            df_temp.plot(ax=ax, linewidth=3, grid=True)\n        ax.legend(cities_, loc='upper left')\n        ax.set_xlabel('Quarter')\n        imagebox = OffsetImage(im, zoom=0.5)\n        ab = AnnotationBbox(imagebox, (df_temp.index[0]+ (df_temp.index[-1]-df_temp.index[0])\/2, ax.get_ylim()[0]*1.15), frameon = False)\n        ax.add_artist(ab)","037638b8":"import seaborn as sns\nfor freq in freqs:\n    for property_type in property_types:\n        for city in cities:\n            fig, ax = plt.subplots(figsize=(21,7))\n            ax.set_ylabel('Median Price')\n            ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))\n            fig.suptitle(city+' '+property_type.title()+'s '+freqs[freq]+' Median Price October 2018 - April 2020', fontsize=20)\n            \n            df_monthly=df[['date_sold', 'city_name', 'property_type', 'price']][df['property_type']==property_type].copy().sort_values(by='date_sold')\n            df_monthly = df_monthly[np.abs(df_monthly.price - df_monthly.price.mean()) <= (7.0 * df_monthly.price.std())] #limit to 7.0 STD for better scale\n            df_monthly['date_sold_month'] = df_monthly['date_sold'].dt.to_period(freq)\n            ax=sns.boxplot(x= 'date_sold_month', y = 'price', data=df_monthly[df_monthly['city_name']==city])\n            #ax=sns.swarmplot(x='date_sold_month', y='price', data=df_monthly[df_monthly['city_name']==city], color=\".25\")","75a0953b":"import seaborn as sns\n\nfor city in cities:\n    fig, ax = plt.subplots(figsize=(21,7))\n    ax.set_ylabel('Median Price')\n    ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))\n    fig.suptitle(city+ ' Median Price First Two Quarters 2020', fontsize=20)\n    \n    df_monthly=df[['date_sold', 'city_name', 'property_type', 'price']][df['city_name']==city].copy().sort_values(by='date_sold')\n    df_monthly = df_monthly[np.abs(df_monthly.price - df_monthly.price.mean()) <= (3.0 * df_monthly.price.std())] #limit to 7.0 STD for better scale\n    df_monthly['Quarter'] = df_monthly['date_sold'].dt.to_period('Q')\n    df_monthly=df_monthly[(df_monthly['Quarter']=='2020Q1') | (df_monthly['Quarter']=='2020Q2')]\n    ax=sns.boxplot(x= 'Quarter', y = 'price', data=df_monthly , hue='property_type')\n    \n    imagebox = OffsetImage(im, zoom=0.5)\n    ab = AnnotationBbox(imagebox, ((ax.get_xlim()[1]-ax.get_xlim()[0])\/4, ax.get_ylim()[1]\/1.1), frameon = False)\n    ax.add_artist(ab)\n    #ax=sns.swarmplot(x='date_sold_month', y='price', data=df_monthly[df_monthly['city_name']==city], color=\".25\")","890da170":"import seaborn as sns\n\nfor city in cities:\n    fig, ax = plt.subplots(figsize=(21,7))\n    ax.set_ylabel('Median Price')\n    ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))\n    fig.suptitle(city+ ' Median Price April 2019 & 2020', fontsize=20)\n    \n    df_monthly=df[['date_sold', 'city_name', 'property_type', 'price']][df['city_name']==city].copy().sort_values(by='date_sold')\n    df_monthly = df_monthly[np.abs(df_monthly.price - df_monthly.price.mean()) <= (3.0 * df_monthly.price.std())] #limit to 7.0 STD for better scale\n    df_monthly['Month'] = df_monthly['date_sold'].dt.to_period('M')\n    df_monthly=df_monthly[(df_monthly['Month']=='2020-04') | (df_monthly['Month']=='2019-04')]\n    ax=sns.boxplot(x= 'Month', y = 'price', data=df_monthly , hue='property_type')\n    \n    imagebox = OffsetImage(im, zoom=0.5)\n    ab = AnnotationBbox(imagebox, ((ax.get_xlim()[1]-ax.get_xlim()[0])\/4, ax.get_ylim()[1]\/1.1), frameon = False)\n    ax.add_artist(ab)\n    #ax=sns.swarmplot(x='date_sold_month', y='price', data=df_monthly[df_monthly['city_name']==city], color=\".25\")","a12af02f":"for property_type in property_types:\n    for city in cities:\n        fig, ax = plt.subplots(figsize=(21,7))\n        ax.set_ylabel('Median Price')\n        ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))\n        fig.suptitle(city+' '+property_type.title()+'s Median Price First Two Quarters 2020', fontsize=20)\n        \n        df_monthly=df[['date_sold', 'city_name', 'property_type', 'price']][df['property_type']==property_type].copy().sort_values(by='date_sold')\n        df_monthly = df_monthly[np.abs(df_monthly.price - df_monthly.price.mean()) <= (5.0 * df_monthly.price.std())] #limit to 7.0 STD for better scale\n        df_monthly['Quarter'] = df_monthly['date_sold'].dt.to_period('Q')\n        df_monthly=df_monthly[(df_monthly['Quarter']=='2020Q1') | (df_monthly['Quarter']=='2020Q2')]\n        ax=sns.boxplot(x= 'Quarter', y = 'price', data=df_monthly[df_monthly['city_name']==city])\n        imagebox = OffsetImage(im, zoom=0.5)\n        ab = AnnotationBbox(imagebox, ((ax.get_xlim()[1]-ax.get_xlim()[0])\/4, ax.get_ylim()[1]\/1.1), frameon = False)\n        ax.add_artist(ab)\n        #ax=sns.swarmplot(x='Quarter', y='price', data=df_monthly[df_monthly['city_name']==city], color=\".25\")","b12197bb":"for property_type in property_types:\n    for city in cities:\n        fig, ax = plt.subplots(figsize=(21,7))\n        ax.set_ylabel('Median Price')\n        ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))\n        fig.suptitle(city+' '+property_type.title()+'s April 2019 & 2020', fontsize=20)\n        \n        df_monthly=df[['date_sold', 'city_name', 'property_type', 'price']][df['property_type']==property_type].copy().sort_values(by='date_sold')\n        df_monthly = df_monthly[np.abs(df_monthly.price - df_monthly.price.mean()) <= (7.0 * df_monthly.price.std())] #limit to 7.0 STD for better scale\n        df_monthly['Month'] = df_monthly['date_sold'].dt.to_period('M')\n        df_monthly=df_monthly[(df_monthly['Month']=='2019-04') | (df_monthly['Month']=='2020-04')]\n        ax=sns.boxplot(x= 'Month', y = 'price', data=df_monthly[df_monthly['city_name']==city])\n        ax=sns.swarmplot(x='Month', y='price', data=df_monthly[df_monthly['city_name']==city], color=\".25\")\n        imagebox = OffsetImage(im, zoom=0.5)\n        ab = AnnotationBbox(imagebox, ((ax.get_xlim()[1]-ax.get_xlim()[0])\/4, ax.get_ylim()[1]\/1.1), frameon = False)\n        ax.add_artist(ab)","8342510c":"for property_type in property_types:\n    for city in cities:\n        fig, ax = plt.subplots(figsize=(21,7))\n        ax.set_ylabel('Median Price')\n        ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))\n        fig.suptitle(city+' '+property_type.title()+'s March and April 2020', fontsize=20)\n        \n        df_monthly=df[['date_sold', 'city_name', 'property_type', 'price']][df['property_type']==property_type].copy().sort_values(by='date_sold')\n        df_monthly = df_monthly[np.abs(df_monthly.price - df_monthly.price.mean()) <= (5.0 * df_monthly.price.std())] #limit to 7.0 STD for better scale\n        df_monthly['Month'] = df_monthly['date_sold'].dt.to_period('M')\n        df_monthly=df_monthly[(df_monthly['Month']=='2020-03') | (df_monthly['Month']=='2020-04')]\n        ax=sns.boxplot(x= 'Month', y = 'price', data=df_monthly[df_monthly['city_name']==city])\n        \n        imagebox = OffsetImage(im, zoom=0.5)\n        ab = AnnotationBbox(imagebox, ((ax.get_xlim()[1]-ax.get_xlim()[0])\/4, ax.get_ylim()[1]\/1.1), frameon = False)\n        ax.add_artist(ab)\n        #ax=sns.swarmplot(x='Quarter', y='price', data=df_monthly[df_monthly['city_name']==city], color=\".25\")","976a37b8":"for property_type in property_types:\n    for city in cities:\n        fig, ax = plt.subplots(figsize=(21,7))\n        ax.set_ylabel('Median Price')\n        ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))\n        fig.suptitle(city+' '+property_type.title()+'s March 2020 & April 2020', fontsize=20)\n        \n        df_monthly=df[['date_sold', 'city_name', 'property_type', 'price']][df['property_type']==property_type].copy().sort_values(by='date_sold')\n        df_monthly = df_monthly[np.abs(df_monthly.price - df_monthly.price.mean()) <= (7.0 * df_monthly.price.std())] #limit to 7.0 STD for better scale\n        df_monthly['Month'] = df_monthly['date_sold'].dt.to_period('M')\n        df_monthly=df_monthly[(df_monthly['Month']=='2020-03') | (df_monthly['Month']=='2020-04')]\n        ax=sns.boxplot(x= 'Month', y = 'price', data=df_monthly[df_monthly['city_name']==city])\n        ax=sns.swarmplot(x='Month', y='price', data=df_monthly[df_monthly['city_name']==city], color=\".25\")\n        imagebox = OffsetImage(im, zoom=0.5)\n        ab = AnnotationBbox(imagebox, ((ax.get_xlim()[1]-ax.get_xlim()[0])\/4, ax.get_ylim()[1]\/1.1), frameon = False)\n        ax.add_artist(ab)","63f390e7":"for freq in freqs:\n    for property_type in property_types:\n        fig, ax = plt.subplots(figsize=(21,7))\n        fig.suptitle(property_type.title()+' '+freqs[freq]+' Median Price % Change September 2018 - April 2020', fontsize=20)\n        ax.set_ylabel('Median Price Change %')\n        ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))\n\n        cities_=list(cities)  \n        for city in cities:\n            df_monthly=df[['date_sold', 'city_name', 'property_type', 'price']][df['property_type']==property_type].copy().set_index('date_sold')\n\n            #Remove series for cities with few sales for the month of april\n            if len(df_monthly[(df_monthly['city_name']==city) & (df_monthly.index>pd.to_datetime('2020-01-04'))])<500: \n                cities_.remove(city)\n                continue\n\n            df_temp=df_monthly[df_monthly['city_name']==city].resample(freq).median().interpolate(method='linear', limit_direction='both').pct_change(periods=1,fill_method='ffill')*100\n            if freq=='M':\n                df_temp['price'] = gaussian_filter1d(df_temp['price'], sigma=1) #smooth the line\n            df_temp=df_temp.dropna()\n            #df_temp=df_temp[:-1]\n            df_temp.plot(ax=ax, linewidth=3, grid=True)\n        ax.legend(cities_, loc='upper left')\n        ax.set_xlabel('Quarter')\n        imagebox = OffsetImage(im, zoom=0.5)\n        ab = AnnotationBbox(imagebox, (df_temp.index[-2], ax.get_ylim()[1]\/1.2), frameon = False)\n        ax.add_artist(ab)\n        plt.axhline(0, color='black', linewidth=5)\n        ml = MultipleLocator(1)\n        ax.xaxis.set_minor_locator(ml)\n        ax.xaxis.grid(which=\"minor\", color='k',  linewidth=0.1)\n","612e4626":"style = dict(size=10, color='#F1F1F1', weight='bold')\n\nfor property_type in property_types:\n    \n    fig, ax = plt.subplots(figsize=(21,7))\n    fig.suptitle('Weekly '+property_type.title()+' Sales By City, September 2018 - April 2020', fontsize=20)\n    \n    df_weekly_count=df[df['property_type']==property_type]\n    df_weekly_count=df_weekly_count[['date_sold','city_name', 'property_type']].set_index('date_sold').groupby(['city_name']).resample('W').count().sort_values(by='property_type')\n\n    df_plot=df_weekly_count[['property_type']].unstack(0)\n    df_plot.index = [ts.strftime('%d-%m-%Y') for ts in df_plot.index]\n    df_plot.columns=df_plot.columns.droplevel()\n    \n    df_plot.columns.name='City'\n    \n    #cols=[ 'Sydney', 'Melbourne',  'Brisbane', 'Adelaide', 'Perth', 'Canberra']\n\n    df_plot=df_plot[cities]\n    \n    df_plot[:-1][1:].plot(kind='bar', stacked=True, width=1, ax=ax, grid=False) #,colormap='tab10'\n    plt.gcf().autofmt_xdate()\n    \n    for label in ax.xaxis.get_ticklabels()[::2]:\n        label.set_visible(False)\n\n        \n    ax.text(16, ax.get_ylim()[1]\/10, 'Christmas 2018', ha='center', **style)\n    ax.text(69, ax.get_ylim()[1]\/10, 'Christmas 2019', ha='center', **style)\n    ax.text(32, ax.get_ylim()[1]\/10, 'Easter 2019', ha='center', **style)\n    ax.text(81, ax.get_ylim()[1]\/10, 'Easter 2020', ha='center', **style)\n    ax.annotate('COVID-19 Restrictions', xy=(80, ax.get_ylim()[1]\/3), xytext=(55, ax.get_ylim()[1]\/1.5), arrowprops=dict(facecolor='#F4F4F4', shrink=0.05), size=18, bbox=dict(fc='#F4F4F4', ec='none', pad=3),)\n   \n    \n    ax.set_xlabel('Week')\n    ax.set_ylabel('Sales')\n    ax.yaxis.set_major_locator(MultipleLocator(200))\n    imagebox = OffsetImage(im, zoom=0.7)\n    ab = AnnotationBbox(imagebox, (ax.get_xlim()[1]\/1.1, ax.get_ylim()[1]\/1.1), frameon = False)\n    ax.add_artist(ab)\n    ax.legend(loc='upper left')\n\n","858584cf":"cities=[ 'Brisbane', 'Adelaide', 'Perth', 'Canberra']\n\nfor property_type in property_types:\n    \n    fig, ax = plt.subplots(figsize=(21,7))\n    fig.suptitle('Weekly '+property_type.title()+' Sales By City, September 2018 - April 2020', fontsize=20)\n    \n    df_weekly_count=df[df['property_type']==property_type]\n    df_weekly_count=df_weekly_count[['date_sold','city_name', 'property_type']].set_index('date_sold').groupby(['city_name']).resample('W').count().sort_values(by='property_type')\n\n    df_plot=df_weekly_count[['property_type']].unstack(0)\n    df_plot.index = [ts.strftime('%d-%m-%Y') for ts in df_plot.index]\n    df_plot.columns=df_plot.columns.droplevel()\n    \n    df_plot.columns.name='City'\n    \n\n\n    df_plot=df_plot[cities]\n    \n    df_plot[:-1][1:].plot(kind='bar', stacked=True, width=1, ax=ax, grid=False) #,colormap='tab10'\n    plt.gcf().autofmt_xdate()\n    \n    for label in ax.xaxis.get_ticklabels()[::2]:\n        label.set_visible(False)\n        \n    ax.text(16, ax.get_ylim()[1]\/10, 'Christmas 2018', ha='center', **style)\n    ax.text(69, ax.get_ylim()[1]\/10, 'Christmas 2019', ha='center', **style)\n    ax.text(32, ax.get_ylim()[1]\/10, 'Easter 2019', ha='center', **style)\n    ax.text(81, ax.get_ylim()[1]\/10, 'Easter 2020', ha='center', **style)\n    ax.annotate('COVID-19 Restrictions', xy=(80, ax.get_ylim()[1]\/3), xytext=(55, ax.get_ylim()[1]\/1.5), arrowprops=dict(facecolor='#F4F4F4', shrink=0.05), size=18, bbox=dict(fc='#F4F4F4', ec='none', pad=3),)\n    ax.set_xlabel('Week')\n    ax.set_ylabel('Sales')\n    ax.yaxis.set_major_locator(MultipleLocator(200))\n    imagebox = OffsetImage(im, zoom=0.7)\n    ab = AnnotationBbox(imagebox, (ax.get_xlim()[1]\/1.1, ax.get_ylim()[1]\/1.1), frameon = False)\n    ax.add_artist(ab)\n    ax.legend(loc='upper left')","505cc419":"cities=['Sydney', 'Melbourne','Brisbane', 'Adelaide', 'Perth',  'Canberra']\n\n\nfor property_type in property_types:\n    \n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(21,7), sharey=True)\n    fig.suptitle('Weekly '+property_type.title()+' Sales By City, First 4 months 2019 and 2020 ', fontsize=20)\n    \n    df_weekly_count=df[df['property_type']==property_type]\n    df_weekly_count=df_weekly_count[['date_sold','city_name', 'property_type']].set_index('date_sold').groupby(['city_name']).resample('W').count().sort_values(by='property_type')\n\n    df_plot=df_weekly_count[['property_type']].unstack(0)\n    \n    \n    df_plot_2019=df_plot[(df_plot.index>'2019-01-01') & (df_plot.index<'2019-05-15')]\n    df_plot_2020=df_plot[df_plot.index>'2020-01-01']\n    \n    df_plot_2019.index = [ts.strftime('%d-%m-%Y') for ts in df_plot_2019.index]\n    df_plot_2019.columns=df_plot_2019.columns.droplevel()\n    df_plot_2019.columns.name='City'\n    \n    df_plot_2020.index = [ts.strftime('%d-%m-%Y') for ts in df_plot_2020.index]\n    df_plot_2020.columns=df_plot_2020.columns.droplevel()\n    df_plot_2020.columns.name='City'\n    \n\n\n    df_plot_2019=df_plot_2019[cities]\n    df_plot_2020=df_plot_2020[cities]\n    \n    df_plot_2019[1:].plot(kind='bar', stacked=True, width=1, ax=ax1, grid=False) #,colormap='tab10'\n    df_plot_2020[1:].plot(kind='bar', stacked=True, width=1, ax=ax2, grid=False) #,colormap='tab10'\n    \n    ax1.text(13, ax1.get_ylim()[1]\/12, 'Easter 2019', ha='left', **style)\n    ax2.text(12, ax2.get_ylim()[1]\/12, 'Easter 2020', ha='left', **style)\n    ax2.annotate('COVID-19 Restrictions', xy=(10, ax2.get_ylim()[1]\/3), xytext=(3, ax2.get_ylim()[1]\/1.5), arrowprops=dict(facecolor='#F4F4F4', shrink=0.05), size=18, bbox=dict(fc='#F4F4F4', ec='none', pad=3),)\n    ax2.yaxis.set_tick_params(labelbottom=True)\n    plt.gcf().autofmt_xdate()\n    imagebox = OffsetImage(im, zoom=0.5)\n    ab = AnnotationBbox(imagebox, (1, ax1.get_ylim()[1]\/1.1), frameon = False)\n    ax1.add_artist(ab)\n    ax1.set_title('2019')\n    ax1.legend(loc='upper right')\n    ab = AnnotationBbox(imagebox, (1, ax2.get_ylim()[1]\/1.1), frameon = False)\n    ax2.add_artist(ab)\n    ax2.set_title('2020')\n    ax2.legend(loc='upper right')\n    \n","f37b633d":"There are quite a few houses (green) sold above the 1 million mark. Townhouses (blue) are dominant in the 500K-1M range. Units (red) prevail in the 300K-700K range. Let's now explore this data for every capital city.","0c845df3":"We are seeing similar dynamics throughout the smaller markets. We will now compare the first 4 months in years 2019 and 2020 to assess impact of Covid-19 on sales.","c7f6f0e8":"Interestingly Sydney weekly median price dips significantly around the Christmas Break. This is most likely due to decrease in listings of higher-priced properties around this period. We will resample the data by monthly and quarterly median next and compare various time perdiod to each other.","57fcd66c":"Evidently townhouses are very popular in Melbourne. There are a lot fewer unit sales in Perth and Adelaide compared to other cities. Canberra and Sydney have balanced markets across all 3 property types. Next we will resample the data to weekly frequency.","45019f26":"High volume of sales in Melbourne and Sydney skews the graphs for smaller capital cities. Let's chart them separately.","df230551":"Let's now plot the monthly percentage change","5f89c5ec":"We can see the weekly gaps in the data, which can be attributed to the weekends. There is also an expected decrease in sales activity around the Easter Long Weekend (19-22 April 2019) and the Christmas period. Let's make sure that the geography of the data is correct.","41b11e17":"Geography correctly represents the 6 capital cities we intend to assess. Let's visualise the sales across the 3 types of properties: houses, units and townhouses next."}}