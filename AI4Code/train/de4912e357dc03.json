{"cell_type":{"43b870e8":"code","04601d37":"code","84b294eb":"code","06b55ab2":"code","55d019f1":"code","832c096f":"code","6ea4e047":"code","66b6a4fd":"code","e2babf86":"code","25a87ac4":"code","e2498b04":"code","df038284":"code","4dbf6e5e":"code","8fea179b":"code","a7abbe39":"code","01e7d756":"code","4e7ef634":"code","8808e0f9":"code","6eae2e1a":"code","cf143af9":"code","7fa51ae4":"code","a17394bf":"markdown","ddf52127":"markdown","9de6cdff":"markdown","6ddb3faa":"markdown","9a05c87c":"markdown","d033429d":"markdown","29051440":"markdown","64ae900d":"markdown","7a60265d":"markdown","efada3a9":"markdown","41484df9":"markdown","db1f7d25":"markdown"},"source":{"43b870e8":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy.linalg as la\nfrom  zipfile import ZipFile\nimport warnings\nwarnings.filterwarnings(\"ignore\")","04601d37":"import os\nprint(os.listdir(\"..\/input\/uncoverzip\"))","84b294eb":"paises_a = ['Colombia', 'Peru', 'Sweden', 'South Africa', 'Chile', 'Panama', 'United States of America', 'Ecuador', 'Spain', 'Italy', 'Argentina', 'Bolivia', 'Canada', 'Costa Rica', 'United Kingdom']\npaises_b = ['Colombia', 'Peru', 'Sweden', 'South Africa', 'Chile', 'Panama', 'United States', 'Ecuador', 'Spain', 'Italy', 'Argentina', 'Bolivia', 'Canada', 'Costa Rica', 'United Kingdom']","06b55ab2":"#Numero de casos\nour_world_in_data_stad = pd.read_csv('..\/input\/uncoverzip\/our_world_in_data\/coronavirus-disease-covid-19-statistics-and-research (1).csv')\nour_world_in_data_stad = our_world_in_data_stad.loc[our_world_in_data_stad['location'].isin(paises_b)]\nour_world_in_data_stad = our_world_in_data_stad.drop(['tests_units'],1)\nour_world_in_data_stad.date = pd.to_datetime(our_world_in_data_stad.date)\n\nour_world_in_data_stad.head()\n","55d019f1":"primeros_casos = []\ndatos_pais = pd.DataFrame()\nfor i in paises_b:\n  datos_pais = our_world_in_data_stad.loc[our_world_in_data_stad['location'].isin([i])]\n  info = datos_pais.loc[datos_pais['total_cases_per_million']>10]\n  min = info.min()\n  primeros_casos.append(min['date'])\ncasos = {'country':paises_b,'date50':primeros_casos}\n\ncasos_50 = pd.DataFrame (casos, columns = ['country','date50'])\ncasos_50.date50 = pd.to_datetime(casos_50.date50) \ncasos_50.head(20)","832c096f":"# Medidas implementadas\nHDE_1 = pd.read_csv('..\/input\/uncoverzip\/HDE\/acaps-covid-19-government-measures-dataset.csv')\n\nHDE_1 = HDE_1.loc[HDE_1['country'].isin(paises_a)]\nsub_grupo =  pd.get_dummies(HDE_1['measure'])\ncolumnas_HDE_1 = sub_grupo.columns\nsub_grupo = pd.concat([sub_grupo, HDE_1.date_implemented.reindex(sub_grupo.index)], axis=1)\nsub_grupo = pd.concat([sub_grupo, HDE_1.country.reindex(sub_grupo.index)], axis=1)\nsub_grupo = pd.concat([sub_grupo, HDE_1.iso.reindex(sub_grupo.index)], axis=1)\nsub_grupo = sub_grupo.dropna()\nsub_grupo = sub_grupo.sort_values(by=['country','date_implemented'])\nsub_HDE_1 = pd.DataFrame()\n\nfor i in paises_a:\n    fechas = sub_grupo.loc[sub_grupo['country'].isin([i])].date_implemented.unique()\n\n    for j in range(len(fechas)):\n        a = sub_grupo.loc[sub_grupo['country'].isin([i])].loc[ sub_grupo['date_implemented'].isin([fechas[j]]) ]\n\n        if np.shape(a)[0] >0 :\n            b = np.sum(a.iloc[:,:-3])\n            b = b.to_frame().T\n            b['country'] = i\n            b['date'] = fechas[j]\n            b['iso_code'] = a.iso.iloc[0]\n            sub_HDE_1 = sub_HDE_1.append(b, ignore_index=True)\n                \n            \ncolumnas_HDE_1 = sub_grupo.columns\n\nsub_HDE_1.date = pd.to_datetime(sub_HDE_1.date)\nsub_HDE_1 = sub_HDE_1.drop(['country'],1)\n\nsub_HDE_1.head()","6ea4e047":"#Movilidad\ngoogle_mobility = pd.read_csv('..\/input\/uncoverzip\/google_mobility\/regional-mobility.csv')\ngoogle_mobility = google_mobility.loc[google_mobility['country'].isin(paises_b)]\ngoogle_mobility = google_mobility.loc[google_mobility['region'].isin(['Total'])]\ngoogle_mobility = google_mobility.dropna()\ngoogle_mobility = google_mobility.drop(['region'],1)\ngoogle_mobility.date = pd.to_datetime(google_mobility.date)\n\ngoogle_mobility.head()","66b6a4fd":"our_world_in_data_stad = our_world_in_data_stad.merge(sub_HDE_1, on=['date', 'iso_code'],how='left')\nour_world_in_data_stad[columnas_HDE_1[:-3]] = our_world_in_data_stad[columnas_HDE_1[:-3]].fillna(0)\nour_world_in_data_stad = our_world_in_data_stad.sort_values(by=['location','date'])\ndatos = pd.DataFrame()","e2babf86":"for i in paises_b:\n    paises = our_world_in_data_stad.loc[our_world_in_data_stad['location'].isin([i])]\n    fechas = paises.date.unique()\n    for j in range(len(fechas)):\n        if j > 0 :\n            c = np.logical_or(paises.iloc[j-1,15:],paises.iloc[j,15:])\n            paises.iloc[j,15:]= c   \n    datos = datos.append(paises, ignore_index = True)\n ","25a87ac4":"datos = datos.rename(columns={'location': 'country'})\ndatos = datos.merge(google_mobility, on=['date', 'country'],how='left')\ndatos = datos.merge(casos_50, on=[ 'country'],how='left')","e2498b04":"datos['days since cases per millon are over ten'] = (datos['date'] -   datos['date50']).dt.days\ndatos.new_cases_per_million.loc[datos['new_cases']==0] = 0\ndatos.new_deaths_per_million.loc[datos['new_deaths']==0]=0\ndatos = datos.drop(['date','date50','total_cases','total_deaths','new_cases', 'new_deaths', 'total_tests',\t'new_tests',\t'total_tests_per_thousand','new_tests_per_thousand'],1)\ndatos = datos.dropna()\ndatos.head(10)","df038284":"plt.figure(figsize=(15,5))\n\nplt.subplot(121)\ncases = sns.lineplot(x='days since cases per millon are over ten', y=\"new_cases_per_million\", hue=\"country\",data=datos)\n#cases.set_yscale(\"log\")\nplt.subplot(122)\ndeaths = sns.lineplot(x='days since cases per millon are over ten', y=\"new_deaths_per_million\", hue=\"country\", data=datos)\n#deaths.set_yscale('log')","4dbf6e5e":"HDE_1.date_implemented = pd.to_datetime(HDE_1.date_implemented)\nHDE_1 = HDE_1.replace({'country': {'United States of America': 'United States'}})\nHDE_1 = HDE_1.merge(casos_50, on=[ 'country'],how='left')\nHDE_1['days since cases per millon are over ten'] = (HDE_1['date_implemented'] -   HDE_1['date50']).dt.days","8fea179b":"sns.catplot(x='days since cases per millon are over ten', y=\"measure\", hue=\"country\", kind=\"swarm\", data=HDE_1, height=10, aspect=1)","a7abbe39":"col = google_mobility.columns\ncol = col[2:]\nplt.figure(figsize=(15,20))\nfor i in range(len(col)):\n  plt.subplot(3,2,i+1)\n  sns.lineplot(x='days since cases per millon are over ten', y=col[i], hue=\"country\",data=datos)\n","01e7d756":"paises_b.remove('Colombia')","4e7ef634":"X_train = datos.loc[datos['country'].isin(paises_b)]\nX_train = X_train.loc[X_train['days since cases per millon are over ten']>0]\nY_train_cases = X_train.new_cases_per_million.to_numpy()\nY_train_deaths = X_train.new_deaths_per_million.to_numpy()\nX_train = X_train.drop(['iso_code',\t'country',\t'total_cases_per_million',\t'new_cases_per_million',\t'total_deaths_per_million',\t'new_deaths_per_million'],axis = 1)\npredictor = X_train.columns\nX_train =X_train.to_numpy()\n","8808e0f9":"X_test = datos.loc[datos['country'].isin(['Colombia'])]\nX_test = X_test.loc[X_test['days since cases per millon are over ten']>0]\nY_test_cases = X_test.new_cases_per_million.to_numpy()\nY_test_deaths = X_test.new_deaths_per_million.to_numpy()\nX_test = X_test.drop(['iso_code',\t'country',\t'total_cases_per_million',\t'new_cases_per_million',\t'total_deaths_per_million',\t'new_deaths_per_million'],axis = 1).to_numpy()","6eae2e1a":"n_trees = np.logspace(0.5,3,10).astype(int)\nav_cases = np.zeros([np.shape(predictor)[0], 10])\nav_deaths = np.zeros([np.shape(predictor)[0], 10])\nerror_cases = []\nerror_deaths = []\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics\n\nfor i in range(10):\n\n  regressor_cases = RandomForestRegressor(n_estimators = n_trees[i], random_state = 0)\n  regressor_deaths = RandomForestRegressor(n_estimators = n_trees[i], random_state = 0)\n\n  regressor_cases.fit(X_train, Y_train_cases)\n  regressor_deaths.fit(X_train, Y_train_deaths)\n\n  Y_predict_cases = regressor_cases.predict(X_test)\n  Y_predict_deaths = regressor_deaths.predict(X_test)\n\n  av_cases[:,i] =  regressor_cases.feature_importances_\n  av_deaths[:,i] = regressor_deaths.feature_importances_\n\n  error_deaths.append(metrics.mean_squared_error((Y_test_deaths), (Y_predict_deaths)))\n  error_cases.append(metrics.mean_squared_error((Y_test_cases), (Y_predict_cases)))\n  plt.figure(figsize=(15,5))\n\n  plt.subplot(121)\n  plt.plot(X_test[:,-1], (Y_test_cases), label='Real data')\n  plt.plot(X_test[:,-1], (Y_predict_cases), label = 'Predicted data')\n  plt.xlabel('days since cases per millon are over ten')\n  plt.ylabel('new cases per million')\n  plt.legend()\n  plt.title('n. trees: %i. Mean Squared Error: %f '%(n_trees[i], metrics.mean_squared_error((Y_test_cases), (Y_predict_cases))))\n  plt.subplot(122)\n  plt.plot(X_test[:,-1], (Y_test_deaths), label='Real data')\n  plt.plot(X_test[:,-1], (Y_predict_deaths), label = 'Predicted data')\n  plt.xlabel('total since cases per millon are over ten')\n  plt.ylabel('new deaths per million')\n  plt.legend()\n  plt.title('Mean Squared Error %f '%(metrics.mean_squared_error((Y_test_deaths), (Y_predict_deaths))))\n","cf143af9":"plt.figure(figsize= (15,5))\nplt.subplot(121)\nplt.plot(n_trees, error_cases, 'r',label = 'Cases')\nplt.legend()\nplt.xlabel('number of trees')\nplt.ylabel('mean squared error')\nplt.subplot(122)\nplt.plot(n_trees, error_deaths, 'g',label = 'Deaths')\nplt.legend()\nplt.xlabel('number of trees')\nplt.ylabel('mean squared error')","7fa51ae4":"plt.figure(figsize = (10,2))\n\na = pd.Series(np.mean(av_cases, axis = 1), index=predictor)\na.nlargest().plot(kind='barh')\nplt.xlabel('Feature Importance')\n\nplt.figure(figsize = (10,2))\n\na = pd.Series(np.mean(av_deaths, axis = 1), index=predictor)\na.nlargest().plot(kind='barh')\nplt.xlabel('Feature Importance')","a17394bf":"La importancia de las cinco caracteristicas mas importantes es la siguiente:","ddf52127":"## Medidas implementadas\n\nDe la base de datos HDE se obtuvo la informaci\u00f3n de las fechas donde se han implementado estrategias que han tomado los paises para impedir la propagaci\u00f3n del virus (ej. cerrar fronteras o cierre de escuelas)","9de6cdff":"# (1) Pregunta: \n\u00bfSe puede predecir los casos en Colombia teniendo en cuenta los distintos comportamientos que han tenido los paises seleccionados de acuerdo con las medidas implementadas?","6ddb3faa":"## Unir todos los datos","9a05c87c":"## Random Forest\n\nSe evaluo el Error medio cuadrado de arboles aleatorios, cuyo numero de arboles variaba","d033429d":"## N\u00famero de casos, muertes e informaci\u00f3n sobre los test \nLa informaci\u00f3n de la base de datos Our World in Data ofrece la informaci\u00f3n de n\u00famero de casos, muertes e informaci\u00f3n sobre los test por mill\u00f3n de habitantes. Esta informaci\u00f3n es importante porque significa que estos valores no estan sesgados al n\u00famero de habitantes de un pais.","29051440":"# Datos","64ae900d":"# Conclusi\u00f3n\nSe puede predecir el estado de un pais de acuerdo con las medidas que se han tomado y el comportamiento de las personas. Sin embargo estos modelos tienen limitaciones, adem\u00e1s, los datos de nuevos casos no muestran un comportamiento homogeneo sino que pueden aumentar o disminuir en cuesti\u00f3n de d\u00edas, lo que puede llevar a que el modelo no se ajuste bien y pueda cometer errores.","7a60265d":"## Movilidad\n\nGoogle monitorea el cambio porcentual en las visitas a lugares como supermercados y parques de una zona geogr\u00e1fica..","efada3a9":"## Selecci\u00f3n de datos\n\nSe quieren comparar las estrategias que tomaron algunos paises. La elecci\u00f3n de los paises se hiz\u00f3 de acuerdo con la densidad poblacional y a la efectividad o no de las estrategias que han tomado estos","41484df9":"El error de acuerdo al n\u00famero de arboles es el siguiente:","db1f7d25":"## Visualizar los datos"}}