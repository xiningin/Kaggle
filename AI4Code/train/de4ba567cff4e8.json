{"cell_type":{"36b6737e":"code","8a9b7933":"code","fda8f2f5":"code","e6092780":"code","10741770":"code","24673547":"code","4f6ac67b":"code","3179b0ad":"code","21182374":"code","ba49a160":"code","98946ac9":"code","9cc52b5c":"code","1068a6ac":"code","853b1068":"code","6883eb84":"code","db05b21e":"code","ecf65a29":"code","96b9435e":"code","dbc90adc":"code","093db355":"code","2d841e6a":"code","750b7883":"code","fa09e1a0":"code","eb7ea035":"code","9496fcef":"code","9701fbe9":"code","b0006137":"code","b0fcfc55":"code","aba00456":"code","1b97028c":"code","049fe5d5":"code","111b6b96":"code","a5a48add":"code","3a27a1cf":"code","333ca94a":"code","e77c59a2":"markdown","c53779c9":"markdown","acffae3a":"markdown","157cebc6":"markdown","482d44a1":"markdown","0e20f6ab":"markdown","4bfd8e90":"markdown","fe3f0ede":"markdown","bfe06ade":"markdown","1822cd13":"markdown","9a3ebaf1":"markdown","b20bc7f0":"markdown","8fa71b72":"markdown","2b1d898f":"markdown","4226e994":"markdown","e2cc9fda":"markdown","bcf2699e":"markdown","37b7ad98":"markdown","0b4130ae":"markdown","18ef12ad":"markdown","840f37a7":"markdown","68376124":"markdown","ad5bd616":"markdown","12fa2a23":"markdown","0b82c21a":"markdown"},"source":{"36b6737e":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","8a9b7933":"import pandas as pd\nimport numpy as np\nimport torch\nfrom torch import nn\nimport fastai\nfrom IPython.display import display\nfrom fastai.vision import *\nimport matplotlib.pyplot as plt","fda8f2f5":"# GPU\u4f7f\u7528\u304cON\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u306e\u78ba\u8a8d\u3002\nprint(torch.cuda.is_available(), torch.backends.cudnn.enabled)","e6092780":"N_EPOCHS = 40\nLEARNING_RATE = 0.1\nBATCH_SIZE = 256\nSHOW_BATCH_FIGSIZE = (10, 10)","10741770":"# \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3002\npath = untar_data(URLs.CIFAR)","24673547":"path.ls()","4f6ac67b":"(path\/'train').ls()","3179b0ad":"(path\/'train'\/'bird').ls()[:10]","21182374":"def show_image_of_category(category, n=4):\n    f, axes = plt.subplots(1, n, figsize=(4 * n, 4))\n    for i in range(n):\n        open_image((path\/'train'\/category).ls()[i]).show(ax=axes[i], title=category)","ba49a160":"show_image_of_category('bird')\nshow_image_of_category('deer')\nshow_image_of_category('frog')\nshow_image_of_category('horse')\nshow_image_of_category('cat')\nshow_image_of_category('dog')\nshow_image_of_category('ship')\nshow_image_of_category('truck')\nshow_image_of_category('airplane')\nshow_image_of_category('automobile')","98946ac9":"class Category:\n    def __init__(self, name, label):\n        self.name = name\n        self.label = label\n\n# animal \/ vehicle \u306e\u4e8c\u5024\u5206\u985e\u30bf\u30b9\u30af\u3092\u3084\u3063\u3066\u307f\u308b\u306e\u3067\u3042\u308c\u3070\u3001\u4ee5\u4e0b\u3092\u30a2\u30f3\u30b3\u30e1\u30f3\u30c8\u3059\u308b\u3002\n# CATEGORIES = [\n#     Category('bird',       'animal'),\n#     Category('deer',       'animal'),\n#     Category('frog',       'animal'),\n#     Category('horse',      'animal'),\n#     Category('cat',        'animal'),\n#     Category('dog',        'animal'),\n#     Category('ship',       'vehicle'),\n#     Category('truck',      'vehicle'),\n#     Category('airplane',   'vehicle'),\n#     Category('automobile', 'vehicle'),\n# ]\n\nCATEGORIES = [\n    Category('bird',       'bird'),\n    Category('deer',       'deer'),\n    Category('frog',       'frog'),\n    Category('horse',      'horse'),\n    Category('cat',        'cat'),\n    Category('dog',        'dog'),\n    Category('ship',       'ship'),\n    Category('truck',      'truck'),\n    Category('airplane',   'airplane'),\n    Category('automobile', 'automobile'),\n]\n\nN_LABELS = len(set([c.label for c in CATEGORIES]))","9cc52b5c":"dfs = []\n\nfor folder_name in ['train', 'test']:\n    for cat in CATEGORIES:\n        file_names = os.listdir(path\/folder_name\/cat.name)\n        _df = pd.DataFrame()\n        _df['name'] = f'{folder_name}\/{cat.name}\/' + pd.Series(file_names)\n        _df['category'] = cat.name\n        _df['label'] = cat.label\n        _df['is_valid'] = folder_name == 'test'\n        dfs.append(_df)\n\nall_data_df = pd.concat(dfs).reset_index(drop=True)\nall_data_df","1068a6ac":"def get_data_df(all_data_df, bird, deer, frog, horse, cat, dog, ship, truck, airplane, automobile):\n    category_n_samples_map = {\n        'bird': bird,\n        'deer': deer,\n        'frog': frog,\n        'horse': horse,\n        'cat': cat,\n        'dog': dog,\n        'ship': ship,\n        'truck': truck,\n        'airplane': airplane,\n        'automobile': automobile,\n    }\n    \n    train_df = (all_data_df\n     .query('not is_valid')\n     .groupby('category')\n     .apply(lambda x: x.sample(n=category_n_samples_map[x.name], random_state=42)))\n\n    val_df = all_data_df.query('is_valid').sample(frac=1, random_state=42)  # CIFAR-10\u306etest image\u306f\u30ab\u30c6\u30b4\u30ea\u3054\u3068\u306b1000\u305a\u3064\u3002\n\n    print(f'\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u6570={len(train_df)}')\n    print(f'\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u6570={len(val_df)}')\n\n    data_df = pd.concat([train_df, val_df]).reset_index(drop=True)\n    return data_df","853b1068":"def show_results(learn):\n#     learn.recorder.plot_losses()\n    learn.recorder.plot_metrics()\n    learn.show_results(figsize=SHOW_BATCH_FIGSIZE, rows=3)","6883eb84":"def get_val_predictions(learn, data_df):\n    id_class_map = {i: c for i, c in enumerate(learn.data.classes)}\n    \n    pred, gt_class = learn.get_preds(ds_type=DatasetType.Valid)\n    pred_class = np.argmax(pred, axis=1)\n    \n    val_df = data_df.query('is_valid').copy()\n    val_df['pred'] = pd.Series(pred_class.numpy()).map(id_class_map).to_numpy()\n    \n    return val_df","db05b21e":"def show_accuracy(df):\n    print('--- \u6b63\u89e3\u7387 ---')\n    \n    _correct_filter = df['label'] == df['pred']\n    \n    # \u5168\u4f53\n    n_correct = _correct_filter.sum()\n    n_all = len(df)\n    print(f'{\"all\":10}: {n_correct \/ n_all * 100:>4.1f}% ({n_correct} \/ {n_all})')\n    \n    # \u30ab\u30c6\u30b4\u30ea\u6bce\n    for category in CATEGORIES:\n        _category_filter = df['category'] == category.name\n\n        n_all = _category_filter.sum()\n        n_correct = (_category_filter & _correct_filter).sum()\n        \n        top_preds = df.loc[_category_filter, 'pred'].value_counts()[:3] \/ n_all\n        top_preds_texts = [f'{_cat:10}: {_ratio * 100:>4.1f}%' for _cat, _ratio in top_preds.items()]\n        print(f'{category.name:10}: {n_correct \/ n_all * 100:>4.1f}% ({top_preds_texts[0]}, {top_preds_texts[1]}, {top_preds_texts[2]})')","ecf65a29":"# CIFAR-10\u3067\u306f\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u7528\u753b\u50cf\u3068\u3057\u3066\u7a2e\u985e\u6bce\u306b5000\u753b\u50cf\u305a\u3064\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u4eca\u56de\u306f\u30c7\u30e2\u7528\u3068\u3044\u3046\u3053\u3068\u30672000\u753b\u50cf\u305a\u3064\u3060\u3051\u7528\u3044\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n# \u203b \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u7528\u753b\u50cf\u306f1000\u753b\u50cf\u305a\u3064\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u3053\u308c\u306f\u3059\u3079\u3066\u4f7f\u3063\u305f\u3002\ndata_df_1 = get_data_df(all_data_df,\n                        bird=2000, deer=2000, frog=2000, horse=2000, cat=2000, dog=2000,\n                        ship=2000, truck=2000, airplane=2000, automobile=2000)\ndisplay(data_df_1)\n\ndata_1 = (ImageList.from_df(data_df_1, path=path, convert_mode='RGB')\n          .split_from_df(col='is_valid')\n          .label_from_df(cols='label')\n          .databunch(bs=BATCH_SIZE)\n          .normalize())\ndata_1.show_batch(figsize=SHOW_BATCH_FIGSIZE, rows=3, hide_axis=False)","96b9435e":"model_1 = nn.Sequential(\n    conv_layer(3, 8, stride=2),   # 16\n    conv_layer(8, 16, stride=2),  # 8\n    conv_layer(16, 32, stride=2), # 4\n    conv_layer(32, 16, stride=2), # 2\n    conv_layer(16, N_LABELS, stride=2), # 1\n    Flatten()      # remove (1,1) grid\n)\n\n# metrics=accuracy \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u5b66\u7fd2\u304c\u9032\u3080\u306b\u3064\u308c\u3066\u7cbe\u5ea6(\u6b63\u89e3\u7387)\u304c\u3069\u3046\u5909\u5316\u3059\u308b\u304b\u3092\u8ffd\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n# loss_func(\u640d\u5931\u95a2\u6570)\u306f\u6a5f\u68b0\u5b66\u7fd2\u306b\u304a\u3044\u3066\u975e\u5e38\u306b\u91cd\u8981\u306a\u6982\u5ff5\u3060\u304c\u3001\u4eca\u56de\u306f\u8aac\u660e\u3057\u306a\u3044\u3002\nlearn_1 = Learner(data_1, model_1, loss_func=nn.CrossEntropyLoss(), metrics=accuracy)","dbc90adc":"learn_1.fit_one_cycle(N_EPOCHS, max_lr=LEARNING_RATE)","093db355":"show_results(learn_1)","2d841e6a":"val_df_1 = get_val_predictions(learn_1, data_df_1)\nshow_accuracy(val_df_1)","750b7883":"data_df_2 = get_data_df(all_data_df,\n                        bird=2000, deer=2000, frog=2000, horse=2000, cat=2000, dog=2000,\n                        ship=2000, truck=2000, airplane=2000, automobile=2000)\ndisplay(data_df_2)\n\ndata_2 = (ImageList.from_df(data_df_2, path=path, convert_mode='RGB')\n          .split_from_df(col='is_valid')\n          .label_from_df(cols='label')\n          .databunch(bs=BATCH_SIZE)\n          .normalize())\ndata_2.show_batch(figsize=SHOW_BATCH_FIGSIZE, rows=3, hide_axis=False)","fa09e1a0":"# ResNet\u3063\u307d\u3044\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002\nmodel_2 = nn.Sequential(\n    conv_layer(3, 16, stride=2),\n    res_block(16),\n    res_block(16),\n    conv_layer(16, 32, stride=2),\n    res_block(32),\n    res_block(32),\n    conv_layer(32, 64, stride=2),\n    res_block(64),\n    res_block(64),\n    conv_layer(64, 128, stride=2),\n    res_block(128),\n    res_block(128),\n    conv_layer(128, 256, stride=2),\n    Flatten(),\n    nn.Dropout(p=0.2),\n    nn.Linear(256, N_LABELS),\n)\n\nlearn_2 = Learner(data_2, model_2, loss_func=nn.CrossEntropyLoss(), metrics=accuracy)","eb7ea035":"learn_2.fit_one_cycle(N_EPOCHS, max_lr=LEARNING_RATE)","9496fcef":"show_results(learn_2)","9701fbe9":"val_df_2 = get_val_predictions(learn_2, data_df_2)\nshow_accuracy(val_df_2)","b0006137":"tfms = get_transforms(do_flip=True, max_rotate=10, max_zoom=1.05, max_lighting=0.2, max_warp=None)","b0fcfc55":"def show_transform_example(tfms, rows, cols, width, height, image_path, **kwargs):\n    img = open_image(image_path)\n    [img.apply_tfms(tfms[0], **kwargs).show(ax=ax) for i,ax in enumerate(plt.subplots(\n        rows,cols,figsize=(width,height))[1].flatten())]","aba00456":"open_image(f'{path}\/train\/dog\/7270_dog.png').show()","1b97028c":"show_transform_example(tfms, 4, 4, 10, 10, f'{path}\/train\/dog\/7270_dog.png', size=224)","049fe5d5":"data_df_3 = get_data_df(all_data_df,\n                        bird=2000, deer=2000, frog=2000, horse=2000, cat=2000, dog=2000,\n                        ship=2000, truck=2000, airplane=2000, automobile=2000)\ndisplay(data_df_3)\n\ndata_3 = (ImageList.from_df(data_df_3, path=path, convert_mode='RGB')\n          .split_from_df(col='is_valid')\n          .label_from_df(cols='label')\n          .transform(tfms)  # \u3053\u3053\u3067\u3001augmentation\u3092\u53cd\u6620\u3059\u308b\u3002\n          .databunch(bs=BATCH_SIZE)\n          .normalize())\ndata_3.show_batch(figsize=SHOW_BATCH_FIGSIZE, rows=3, hide_axis=False)","111b6b96":"model_3 = nn.Sequential(\n    conv_layer(3, 16, stride=2),\n    res_block(16),\n    res_block(16),\n    conv_layer(16, 32, stride=2),\n    res_block(32),\n    res_block(32),\n    conv_layer(32, 64, stride=2),\n    res_block(64),\n    res_block(64),\n    conv_layer(64, 128, stride=2),\n    res_block(128),\n    res_block(128),\n    conv_layer(128, 256, stride=2),\n    Flatten(),\n    nn.Dropout(p=0.2),\n    nn.Linear(256, N_LABELS),\n)\n\nlearn_3 = Learner(data_3, model_3, loss_func=nn.CrossEntropyLoss(), metrics=accuracy)","a5a48add":"learn_3.fit_one_cycle(N_EPOCHS, max_lr=LEARNING_RATE)","3a27a1cf":"show_results(learn_3)","333ca94a":"val_df_3 = get_val_predictions(learn_3, data_df_3)\nshow_accuracy(val_df_3)","e77c59a2":"\u4eca\u56de\u4f7f\u3046\u753b\u50cf\u30c7\u30fc\u30bf\u306f\u3001CIFAR-10\u3068\u3044\u3046\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3001\u6a5f\u68b0\u5b66\u7fd2\u624b\u6cd5\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7528\u9014\u306b\u826f\u304f\u5229\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n(\u3064\u307e\u308a\u3001\u7814\u7a76\u8005\u304c\u65b0\u3057\u3044\u624b\u6cd5\u3092\u958b\u767a\u3057\u305f\u3089\u3001\u307e\u305a\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u8a66\u3057\u3066\u307f\u3066\u7cbe\u5ea6\u3092\u898b\u308b\u3002\u305d\u306e\u7d50\u679c\u3092\u8ad6\u6587\u306b\u8f09\u305b\u3066\u3001\u300c\u3053\u306e\u65b9\u6cd5\u3092\u4f7f\u3048\u3070\u3001\u3053\u308c\u3060\u3051\u7cbe\u5ea6\u304c\u51fa\u307e\u3059\uff01\u300d\u3068\u8a00\u3046\u3002)\n\n\u73fe\u5b9f\u306e\u30bf\u30b9\u30af\u3067\u306f\u3001\u30c7\u30fc\u30bf\u3092\u96c6\u3081\u308b\u3068\u3053\u308d\u3082\u5927\u5909\u306a\u8a33\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u305d\u3093\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306a\u306e\u3067\u3001\u4e0a\u8a18\u4e00\u884c\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002","c53779c9":"# \u5b9f\u9a133 \u30c7\u30fc\u30bf\u3092\u5de5\u592b\u3057\u3066\u307f\u308b\n\n\u3053\u306e\u5b9f\u9a13\u3067\u306f\u3001\u30e2\u30c7\u30eb\u306fResNet\u3082\u3069\u304d\u304b\u3089\u5909\u66f4\u305b\u305a\u3001\u305d\u306e\u4ee3\u308f\u308a\u306b\u30c7\u30fc\u30bf\u3092\u5897\u3084\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u5897\u3084\u3059\u3068\u8a00\u3063\u3066\u3082\u3001\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u3092\u6301\u3063\u3066\u304f\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6c34\u5897\u3057(augmentation)\u3057\u307e\u3059\u3002","acffae3a":"# \u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306b\u3064\u3044\u3066\n\n\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u52c9\u5f37\u4f1a\u306e\u767a\u8868\u30b9\u30e9\u30a4\u30c9\u306e\u3001\u30c7\u30e2\u30d1\u30fc\u30c8\u3067\u3059\u3002\n\n\u3053\u3053\u3067\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u5b9f\u8df5\u306e\u4f8b\u3068\u3057\u3066\u3001\u753b\u50cf\u5206\u985e\u30bf\u30b9\u30af\u3092\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n(\u672c\u5f53\u306f\u58f2\u4e0a\u4e88\u6e2c\u306a\u3069\u3001\u30d3\u30b8\u30cd\u30b9\u306b\u8fd1\u3044\u3082\u306e\u3092\u6271\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u8aac\u660e\u304c\u8907\u96d1\u306b\u306a\u308a\u3059\u304e\u308b\u305f\u3081\u3001\u4eca\u56de\u306f\u65ad\u5ff5\u3057\u307e\u3057\u305f\u3002)\n\n\u8a66\u3057\u306b\u4e00\u56de\u5b9f\u9a13\u3057\u3066\u307f\u3066\u7d50\u679c\u3092\u8a18\u9332\u3057\u3001\u6539\u5584\u3067\u304d\u305d\u3046\u306a\u65b9\u6cd5\u3092\u8003\u3048\u3066\u307e\u305f\u5b9f\u9a13\u3057\u3001\u5fae\u8abf\u6574\u3057\u3066\u307e\u305f\u5b9f\u9a13\u3057\u30fb\u30fb\u30fb\u3068\u3044\u3046\u306e\u3092\u7e70\u308a\u8fd4\u3057\u3066\n\u7cbe\u5ea6\u3092\u4e0a\u3052\u3066\u3044\u304f\u3068\u3044\u3046\u6a5f\u68b0\u5b66\u7fd2\u306e\u6d41\u308c\u3092\u3001\u7c21\u5358\u306a\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u611f\u3058\u3066\u3082\u3089\u3048\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u53c2\u8003URL\n\n* [MINST CNN tutorial](https:\/\/github.com\/fastai\/course-v3\/blob\/master\/nbs\/dl1\/lesson7-resnet-mnist.ipynb)\n\n* [data_block](https:\/\/docs.fast.ai\/data_block.html)","157cebc6":"# \u5b9f\u9a131 \u753b\u50cf\u89e3\u6790\u7528\u306e\u30e2\u30c7\u30eb\u3092\u9069\u7528\u3057\u3066\u307f\u308b\n\n\u307e\u305a\u306f\u3001\u9069\u5f53\u306b\u69cb\u6210\u3057\u305f\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30e2\u30c7\u30eb\u3067\u5b66\u7fd2\u3057\u3066\u307f\u307e\u3059\u3002","482d44a1":"\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u30e9\u30a4\u30d6\u30e9\u30ea(fastai)\u304c\u6271\u3048\u308b\u5f62\u5f0f\u306b\u3057\u307e\u3059\u3002","0e20f6ab":"\u5b66\u7fd2\u306e\u7d50\u679c\u3092\u3001\u6b21\u306b\u51fa\u529b\u3057\u307e\u3057\u305f\u3002\n\n\u30b0\u30e9\u30d5\u306f\u3001\u5b66\u7fd2\u304c\u9032\u3080\u306b\u3064\u308c\u3066\u6b63\u89e3\u7387\u304c\u4e0a\u304c\u3063\u3066\u3044\u304f\u69d8\u5b50\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n\u4e0b\u306f\u3001\u5404\u753b\u50cf\u306e\u4e88\u6e2c\u7d50\u679c\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\u6b63\u89e3\u30e9\u30d9\u30eb(\u4e0a)\u3068\u4e88\u6e2c\u7d50\u679c(\u4e0b)\u304c\u4e00\u81f4\u3057\u3066\u3044\u308c\u3070\u4e88\u6e2c\u6210\u529f\u3001\u7570\u306a\u3063\u3066\u3044\u308c\u3070\u4e88\u6e2c\u5931\u6557\u3067\u3059\u3002","4bfd8e90":"\u3053\u3093\u306a\u98a8\u306b\u5909\u63db\u3057\u307e\u3059\u3002","fe3f0ede":"# Jupyter\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\n\n\u6211\u3005\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068\u5206\u96e2\u3059\u308b\u306e\u304c\u666e\u901a\u3067\u3059\u3002\n\n\u3057\u304b\u3057\u3001\u4f55\u3082\u88fd\u54c1\u3092\u4f5c\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u3061\u3087\u3063\u3068\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3060\u3051\u306a\u3089\u3001\u5c11\u3057\u66f8\u3044\u3066\u306f\u5b9f\u884c\u3057\u3001\u305d\u306e\u5b9f\u884c\u7d50\u679c\u3092\u3059\u3050\u4e0b\u306b\u8a18\u9332\u3057\u3066\u3001\u305d\u306e\u8aac\u660e\u3092\u6a2a\u306b\u66f8\u3044\u3066\u30fb\u30fb\u30fb\n\u3068\u3044\u3046\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u308c\u3070\u3001\u4fbf\u5229\u3060\u3068\u601d\u3044\u307e\u305b\u3093\u304b\uff1f\n\nJupyter\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3092\u4f7f\u3048\u3070\u305d\u308c\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4eca\u898b\u3066\u3044\u308b\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u3001Kaggle\u4e0a\u306b\u30db\u30b9\u30c8\u3055\u308c\u305fJupyter\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u3059\u3002\n\u3053\u3053\u307e\u3067\u306f\u8aac\u660e\u6587(\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8)\u3060\u3051\u3067\u3059\u304c\u3001\u3053\u3053\u304b\u3089\u5148\u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 + \u5b9f\u884c\u7d50\u679c\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 + \u5b9f\u884c\u7d50\u679c\u3001\u3068\u304d\u3069\u304d\u8aac\u660e\u6587\u30fb\u30fb\u30fb\u306e\u7e70\u308a\u8fd4\u3057\u3068\u306a\u308a\u307e\u3059\u3002","bfe06ade":"\u4eca\u56de\u306e\u30bf\u30b9\u30af\u306f\u3001\u4e0a\u8a1810\u30ab\u30c6\u30b4\u30ea\u306e\u3069\u308c\u304b\u306b\u5c5e\u3059\u308b\u753b\u50cf\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u305d\u308c\u304c\u3069\u306e\u30ab\u30c6\u30b4\u30ea\u306a\u306e\u304b\u3092\u5f53\u3066\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3059\u3002","1822cd13":"\u4e0a\u8a18\u753b\u50cf\u306f\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u3059\u308b\u753b\u50cf\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3001\u753b\u50cf\u90e8\u5206\u304c\u5165\u529b\u3001\u30e9\u30d9\u30eb(\u30ad\u30e3\u30d7\u30b7\u30e7\u30f3)\u304c\u51fa\u529b\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u5165\u529b = \u753b\u50cf \u304b\u3089 \u51fa\u529b = \u30e9\u30d9\u30eb \u3092\u5c0e\u304d\u51fa\u305b\u308b\u95a2\u6570\u306e\u5b66\u7fd2\u3092\u76ee\u6307\u3057\u307e\u3059\u3002","9a3ebaf1":"\u8a00\u8a9e\u306f\u3082\u3061\u308d\u3093Python\u3067\u3059\u3002(\u6a5f\u68b0\u5b66\u7fd2\u5206\u91ce\u306f\u3001Python\u306e\u307b\u307c\u4e00\u5f37\u3067\u3059\u3001\u6b8b\u5ff5\u306a\u304c\u3089\u30fb\u30fb\u30fb\u3002)\n\nPython\u3067\u4f7f\u3048\u308b\u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\n\n* \u6c7a\u5b9a\u6728\u30e2\u30c7\u30eb\n    - XGBoost\n    - LightGBM\n    - CatBoost\n* \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30e2\u30c7\u30eb\n    - TensorFlow ( + Keras )\n    - PyTorch ( + fastai )\n\n\u753b\u50cf\u5206\u985e\u30bf\u30b9\u30af\u306b\u306f\u3001\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u6709\u52b9\u3060\u3068\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001\u4eca\u56de\u306fPyTorch + fastai\u3092\u4f7f\u3063\u3066\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002","b20bc7f0":"\u3067\u306f\u3001\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u5b66\u7fd2\u306fepoch(\u30a8\u30dd\u30c3\u30af)\u3068\u3044\u3046\u5358\u4f4d\u3067\u5b9f\u65bd\u3057\u307e\u3059\u30021\u56de\u306eepoch\u3067\u306f\u4ee5\u4e0b\u3092\u884c\u3044\u307e\u3059\u3002\n\n1. \u5168\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30921\u56de\u305a\u3064\u5b66\u7fd2\u3059\u308b\u3002\n1. \u5168\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3092\u884c\u3044\u3001\u305d\u306e\u7d50\u679c\u3092\u8a18\u9332\u3059\u308b\u3002\n\n\u3053\u308c\u3092\u6570\u5341\uff5e\u6570\u767e\u56de\u7e70\u308a\u8fd4\u3059\u3068\u3001\u5b66\u7fd2\u5b8c\u4e86\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u6700\u521d\u306f\u6238\u60d1\u3046\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u30e9\u30f3\u30c0\u30e0\u306a\u521d\u671f\u95a2\u6570\u3092\u300c\u5c11\u3057\u305a\u3064\u300d\u671b\u307f\u306e\u95a2\u6570\u306b\u5bc4\u305b\u3066\u3044\u304f\u306e\u3067\u3001\n\u5404\u30c7\u30fc\u30bf\u30921\u56de\u305a\u3064\u306a\u3081\u305f\u3060\u3051\u3067\u306f\u5b66\u7fd2\u306f\u7d42\u308f\u308a\u307e\u305b\u3093\u3002\u3064\u307e\u308a\u3001\u5168\u7136\u7cbe\u5ea6\u306f\u4e0a\u304c\u308a\u307e\u305b\u3093\u3002\n\n\u4f55\u5341\u56de\u3001\u4f55\u767e\u56de\u3068\u7e70\u308a\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","8fa71b72":"# \u7d42\u308f\u308a\u306b\n\n\u753b\u50cf\u5206\u985e\u30c7\u30e2\u306f\u4ee5\u4e0a\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u5b9f\u969b\u306f\u3001\u3084\u308d\u3046\u3068\u601d\u3048\u3070\u3044\u304f\u3089\u3067\u3082\u3082\u3063\u3068\u3084\u308b\u3053\u3068\u304c\u3042\u3063\u3066\u3001\u4f8b\u3048\u3070\n\n* ResNet\u3092\u8272\u3005\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u307f\u308b\u3002\n* \u4ed6\u306e\u7573\u307f\u8fbc\u307f\u30e2\u30c7\u30eb(DenseNet, EfficientNet...)\u3092\u8a66\u3057\u3066\u307f\u308b\u3002\n* \u6c34\u5897\u3057(augmentation)\u306e\u65b9\u6cd5\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u66f4\u3057\u3066\u307f\u308b\u3002(\u4e0a\u4e0b\u53cd\u8ee2\u306f\u6709\u52b9\u304b\uff1f\u4f55\u5ea6\u307e\u3067\u306a\u3089\u56de\u8ee2\u3055\u305b\u3066\u826f\u3044\u304b\uff1f...)\n* \u4ea4\u5dee\u691c\u8a3c(cross validation)\u306e\u65b9\u6cd5\u3092\u8003\u3048\u308b\u3002\n\n\u306a\u3069\u306a\u3069\u3001\u7d30\u304b\u304f\u6319\u3052\u3066\u3044\u3051\u3070\u5207\u308a\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u3057\u304b\u3082\u3001\u4eca\u56de\u306f\u884c\u5100\u306e\u3044\u3044\u30c7\u30fc\u30bf(CIFAR-10)\u3092\u4f7f\u3063\u305f\u306e\u3067\u3001\u30c7\u30fc\u30bf\u5f62\u5f0f\u306b\u3064\u3044\u3066\u60a9\u3080\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\n\u73fe\u5b9f\u306e\u30bf\u30b9\u30af\u3067\u306f\u3053\u308c\u3082\u3044\u304f\u3089\u3067\u3082\u60a9\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u7d4c\u9a13\u3001\u77e5\u8b58\u3001\u52d8\u3001\u60c5\u5831\u53ce\u96c6\u80fd\u529b\u3092\u7dcf\u52d5\u54e1\u3057\u3066\u9811\u5f35\u308a\u307e\u3057\u3087\u3046\uff01\uff01\n\n\u30fb\u30fb\u30fb\u3068\u3044\u3046\u306e\u304c\u6a5f\u68b0\u5b66\u7fd2\u3067\u3059\u3002\u30a4\u30e1\u30fc\u30b8\u306f\u63b4\u3093\u3067\u3044\u305f\u3060\u3051\u305f\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\u6a5f\u68b0\u5b66\u7fd2\u306f\u6a5f\u68b0\u304c\u3084\u3063\u3066\u304f\u308c\u308b\uff1f\u3068\u3093\u3067\u3082\u306a\u3044\uff01\n\n\u6a5f\u68b0\u5b66\u7fd2\u306f\u7814\u7a76\u8005\u3060\u3051\u304c\u8003\u3048\u308b\u3082\u306e\uff1f\u305d\u308c\u3082\u9593\u9055\u3044\uff01\n\n\u8981\u306f\u6211\u3005\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u306e\u3068\u540c\u3058\u3067\u3059\u3002\n\u6a5f\u68b0\u5b66\u7fd2\u306f\u78ba\u304b\u306b\u6a5f\u68b0\u306e\u4e0a\u3067\u52d5\u304d\u307e\u3059\u304c\u3001\u305d\u308c\u3060\u3051\u3067\u3059\u3002\n\u30e2\u30c7\u30eb\u7b49\u306e\u9053\u5177\u7acb\u3066\u306f\u7814\u7a76\u8005\u304c\u4f5c\u3063\u3066\u3044\u304f\u3082\u306e\u3067\u3059\u304c\u3001\u5b9f\u969b\u306e\u30bf\u30b9\u30af\u306b\u9069\u7528\u3059\u308b\u306e\u306f\u6211\u3005\u958b\u767a\u8005\u3067\u3059\u3002\n\n\u305f\u3060\u3001\u5f93\u6765\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3068\u9055\u3046\u306e\u306f\u3001\u305d\u308c\u306b\u3088\u3063\u3066\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u304c\u3001\n\u753b\u50cf\u8a8d\u8b58\u3001\u7ffb\u8a33\u3001\u672a\u6765\u4e88\u6e2c\u3001\u4eba\u5de5\u77e5\u80fd\u306a\u3069\u30fb\u30fb\u30fb\u3053\u308c\u307e\u3067\u306f\u8003\u3048\u3089\u308c\u306a\u304b\u3063\u305f\u9762\u767d\u3044\u3082\u306e\u3060\u3068\u3044\u3046\u70b9\u3067\u3059\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u307f\u3093\u306a\u6a5f\u68b0\u5b66\u7fd2\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u305d\u3057\u3066\u3001\u305d\u308c\u304c\u4ed5\u4e8b\u306b\u7e4b\u304c\u308c\u3070\u30fb\u30fb\u30fb\u5b09\u3057\u3044\u3067\u3059\u306d\uff01","2b1d898f":"\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u3001(\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u304c)\u5927\u91cf\u306e\u8a08\u7b97\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u5927\u91cf\u306e\u8a08\u7b97\u3092\u9ad8\u901f\u306b\u884c\u3046\u306e\u306b\u306f\u3001CPU\u3088\u308a\u3082GPU\u304c\u9069\u3057\u3066\u3044\u307e\u3059\u3002\nGPU\u306e\u6027\u80fd\u7b49\u306b\u3082\u3088\u308a\u307e\u3059\u304c\u3001CPU\u306e\u6570\u500d\uff5e\u6570\u5341\u500d\u306e\u30b9\u30d4\u30fc\u30c9\u3067\u51e6\u7406\u3092\u9032\u3081\u3066\u304f\u308c\u307e\u3059\u3002\n\n\u5927\u62b5\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306fCPU\u4e0a\u3067\u3057\u304b\u4ed5\u4e8b\u3092\u3057\u3066\u304f\u308c\u307e\u305b\u3093\u304c\u3001\u4e0a\u306b\u6319\u3052\u305f\u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3048\u3070\u3001\u5b66\u7fd2\u6642\u7b49\u306e\u8a08\u7b97\u51e6\u7406\u3092GPU\u4e0a\u3067\u884c\u308f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u5e78\u3044\u3001Kaggle\u306f(1\u4eba\u903130\u6642\u9593\u307e\u3067\u3001\u7121\u6599\u3067\uff01)GPU\u3092\u4f7f\u308f\u305b\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u4eca\u56de\u3082GPU\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002","4226e994":"\u89aa\u5207\u306a\u3053\u3068\u306b\u3001\u6700\u521d\u304b\u3089\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u7528\u753b\u50cf\u3068\u30c6\u30b9\u30c8(\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3)\u7528\u753b\u50cf\u306b\u5206\u3051\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u3002","e2cc9fda":"\u6b21\u306e\u30bb\u30eb\u3067\u3001\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n\u8a73\u7d30\u306f\u5272\u611b\u3057\u307e\u3059\u304c\u3001conv_layer(Convolutional Layer, \u7573\u307f\u8fbc\u307f\u5c64)\u30925\u5c64\u7a4d\u307f\u4e0a\u3052\u3066\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002","bcf2699e":"CIFAR-10\u306e\u753b\u50cf\u306f\u3001\u3059\u3079\u306632 * 32\u30d4\u30af\u30bb\u30eb\u306b\u5727\u7e2e\u6e08\u306e\u5199\u771f\u3067\u3059\u3002","37b7ad98":"\u4f8b\u3048\u3070\u3001\u6b21\u306e\u753b\u50cf\u3067\u3042\u308c\u3070\u3001","0b4130ae":"\u6211\u3005\u306e\u624b\u5143\u306b\u306f `2000 * 10 = 20000` \u679a\u306e\u753b\u50cf\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u3089\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u306e\u3067\u306f\u306a\u304f\u3001\u30e9\u30f3\u30c0\u30e0\u306b\n\n* \u5de6\u53f3\u53cd\u8ee2\u3057\u305f\u308a\n* \u5c11\u3057\u56de\u8ee2\u3057\u305f\u308a\n* \u5c11\u3057\u30ba\u30fc\u30e0\u3057\u305f\u308a\n* \u660e\u308b\u3055\u3092\u5909\u66f4\u3057\u305f\u308a\n\n\u3057\u305f\u3082\u306e\u3092\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u3057\u307e\u3059\u3002","18ef12ad":"# Kaggle\n\n\u3053\u3053\u306f**Kaggle**\u3068\u3044\u3046\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u3068\u6a5f\u68b0\u5b66\u7fd2\u5b66\u7fd2\u8005\u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u30b5\u30a4\u30c8\u3067\u3059\u3002\n\n\u53c2\u52a0\u8005\u306f\u3001[\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3](https:\/\/www.kaggle.com\/competitions)\u3092\u901a\u3057\u3066\u6a5f\u68b0\u5b66\u7fd2\u306b\u3064\u3044\u3066\u5b66\u7fd2\u3057\u305f\u308a\u3001\u4ed6\u306e\u53c2\u52a0\u8005\u3068\u4ea4\u6d41\u3057\u305f\u308a\u3001\u3046\u307e\u304f\u3044\u3051\u3070\u8cde\u91d1\u3092\u7372\u5f97\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002\n\n\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u306f\u3001\u8272\u3005\u306a\u4f01\u696d\u3084\u56e3\u4f53\u3092\u30db\u30b9\u30c8\u3068\u3057\u3066\u958b\u50ac\u3055\u308c\u307e\u3059\u3002\u4f01\u696d\u5074\u306b\u3068\u3063\u3066\u3001\u4e0a\u4f4d\u306e\u89e3\u6cd5\u306f\u5b9f\u969b\u306b\u5f79\u7acb\u3064\u3082\u306e\u306a\u306e\u3067\u3001Kaggle\u306f\u30af\u30e9\u30a6\u30c9\u30bd\u30fc\u30b7\u30f3\u30b0\u30b5\u30fc\u30d3\u30b9\u3068\u3057\u3066\u306e\u5074\u9762\u3082\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u8ab2\u91d1\u8981\u7d20\u304c\u7279\u306b\u7121\u3044\u306b\u3082\u95a2\u308f\u3089\u305a\u3001\u8cde\u91d1\u5927\u4f1a\u3092\u904b\u55b6\u3067\u304d\u3066\u3044\u308b\u7406\u7531\u306f\u3053\u306e\u8fba\u308a\u3067\u3057\u3087\u3046\u3002","840f37a7":"# \u5b9f\u9a130 \u8a66\u3057\u306b\u52d5\u304b\u3057\u3066\u307f\u308b\n\n\u307e\u305a\u6700\u521d\u306b\u3001\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3067\u3059\u3089\u306a\u3044\u3001\u666e\u901a\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3067\u8a66\u3057\u306b\u5b66\u7fd2\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3001\n\u4e88\u60f3\u901a\u308a\u3068\u3044\u3046\u304b\u4e88\u60f3\u4ee5\u4e0b\u3068\u3044\u3046\u304b\u3001\u6b63\u89e3\u738710\uff05\u3092\u53e9\u304d\u51fa\u3057\u307e\u3057\u305f\u3002(\u3069\u306e\u753b\u50cf\u3082\u300ctruck\u300d\u3060\u3068\u8a00\u3044\u5f35\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002)\n\n\u30e2\u30c7\u30eb\u69cb\u9020\u7531\u6765\u306e\u904e\u5c11\u5b66\u7fd2\u306e\u826f\u3044\u4f8b\u3067\u3059\u304c\u30fb\u30fb\u30fb\u3042\u3093\u307e\u308a\u306a\u306e\u3067\u3001\u672c\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306f\u5272\u611b\u3057\u307e\u3059\u3002","68376124":"*train*, *test* \u305d\u308c\u305e\u308c\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u306f\u3001\u6b21\u306e10\u7a2e\u985e\u306e\u753b\u50cf\u304c\u3001\u7a2e\u985e\u5225\u306b\u30d5\u30a9\u30eb\u30c0\u5206\u3051\u3055\u308c\u3066\u3001\u6570\u5343\u679a\u305a\u3064\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n\n* bird \u9ce5\n* deer \u9e7f\n* frog \u86d9\n* horse \u99ac\n* cat \u732b\n* dog \u72ac\n* ship \u8239\n* truck \u30c8\u30e9\u30c3\u30af\n* airplane \u98db\u884c\u6a5f\n* automobile \u81ea\u52d5\u8eca","ad5bd616":"# \u5b9f\u9a132 \u3088\u308a\u826f\u3044\u30e2\u30c7\u30eb\u3092\u6a21\u7d22\u3059\u308b\n\n\u6b21\u306b\u3001\u3082\u3046\u5c11\u3057\u51dd\u3063\u305f\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u81ea\u4f53\u306f\u9769\u65b0\u7684\u30a2\u30a4\u30c7\u30a2\u3067\u3057\u305f(\u3053\u308c\u304c\u3042\u3063\u3066\u521d\u3081\u3066\u753b\u50cf\u306e\u7279\u5fb4\u3092\u6349\u3048\u3089\u308c\u308b\uff01)\u304c\u3001\n\u3088\u308a\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306b\u306f\u3001\u305f\u3060\u3053\u308c\u3092\u4f7f\u3048\u3070\u826f\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u3069\u3046\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u3069\u3046\u3044\u3046\u8abf\u6574\u3092\u3059\u308c\u3070\u3088\u308a\u7cbe\u5ea6\u304c\u4e0a\u304c\u308b\u304b\u3068\u3044\u3046\u7814\u7a76\u306f\u4eca\u3082\u70ba\u3055\u308c\u7d9a\u3051\u3066\u3044\u3066\u3001\u305d\u306e\u6210\u679c\u306e\u4e00\u3064\u304c\n[ResNet](https:\/\/github.com\/KaimingHe\/deep-residual-networks)\u3067\u3059\u3002\n\n\u3053\u306eResNet\u30fb\u30fb\u30fb\u3082\u3069\u304d\u3092\u3001\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002","12fa2a23":"\u3053\u308c\u306b\u3088\u308a\u3001\u30c7\u30fc\u30bf\u6570\u3092\u3044\u304f\u3089\u3067\u3082\u5897\u3084\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u305f\u3060\u3057\u3082\u3061\u308d\u3093\u3001\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u3092\u96c6\u3081\u3066\u304d\u3066\u5897\u3084\u3059\u306e\u3068\u306f\u9055\u3063\u3066\u3001\u4ee5\u4e0b\u306e\u6ce8\u610f\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\n\n* \u4f3c\u305f\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3057\u304b\u4f5c\u308c\u306a\u3044\u306e\u3067\u3001\u300c\u3044\u304f\u3089\u3067\u3082\u300d\u3068\u3044\u3063\u3066\u3082\u3001\u52b9\u679c\u306f\u4e00\u5b9a\u306b\u7559\u307e\u308b\u3002\n* \u3042\u308a\u3048\u306a\u3044\u30c7\u30fc\u30bf\u3092\u4f5c\u3089\u306a\u3044\u3088\u3046\u306b\u6ce8\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002(\u4f8b\u3048\u3070\u3001\u6587\u5b57\u8a8d\u8b58\u30bf\u30b9\u30af\u3067\u306f\u5de6\u53f3\u53cd\u8ee2\u3055\u305b\u306a\u3044\uff01)","0b82c21a":"# \u6e96\u5099"}}