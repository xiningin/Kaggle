{"cell_type":{"088083e7":"code","d8128556":"code","8c674bf0":"code","f1b90402":"code","a7cfb6a4":"code","58887559":"code","2a3e984f":"code","3b7beb03":"code","b31df0c5":"code","c00a0f4d":"code","8dc83ec5":"code","cd67d8a2":"code","116ce879":"code","38608005":"code","6f47cebf":"code","1d98bd36":"code","c90cad58":"code","643cf319":"code","c2eed94d":"code","7b1bbf20":"code","49a330b2":"code","ae3889ac":"code","13fbb961":"code","a464352a":"code","020d1895":"code","b7b2a33c":"code","945fa912":"code","2e5c16f9":"code","9aeefe38":"code","5a987411":"code","77110f66":"code","1e28962e":"code","701be8ed":"code","792cc3ac":"code","9014a0d0":"code","b7f3f9ca":"code","ccaf0427":"code","6e159b2f":"code","deced6ff":"code","e18123b5":"code","de85e4ba":"code","27c02e21":"code","411d66a2":"code","0a61f4dc":"code","61848fbe":"code","e267e44e":"code","841c7fdc":"code","38163f47":"markdown","2a595686":"markdown","7c53e671":"markdown","e946812e":"markdown","90370863":"markdown","501e2388":"markdown","6ab1ab36":"markdown","41047a67":"markdown","e8f50c22":"markdown","314e6155":"markdown","c373e784":"markdown","b58389b2":"markdown","ffe7a43b":"markdown","321ea668":"markdown","d5423f35":"markdown","812f140e":"markdown","f45d1f7d":"markdown","b0a01910":"markdown","9fa7cc95":"markdown","32becf96":"markdown","8aaa5300":"markdown","c8654b9b":"markdown","8e348a93":"markdown","c450ad5a":"markdown","25131b2c":"markdown","b4199415":"markdown","16ffd6d7":"markdown","86f959aa":"markdown","2da2022a":"markdown","ce567ed2":"markdown","05212428":"markdown","fa090edf":"markdown","3e04b9f2":"markdown","57ba50af":"markdown","1b943774":"markdown","8fbf2951":"markdown","e2298f6d":"markdown","99787ee6":"markdown","cc59c2cc":"markdown"},"source":{"088083e7":"import math, re, os, random\nimport tensorflow as tf\nimport pickle\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nfrom sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix\n","d8128556":"import math, re, os\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow_addons as tfa\nfrom tensorflow.keras import optimizers, layers\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, LearningRateScheduler\n\nprint(\"Tensorflow version \" + tf.__version__)","8c674bf0":"# Detect TPU, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver() \n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() \n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","f1b90402":"from kaggle_datasets import KaggleDatasets\n\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('tpu-getting-started')\nprint(GCS_DS_PATH) # what do gcs paths look like?","a7cfb6a4":"\nIMAGE_SIZE = [512, 512]\nGCS_PATH_SELECT = {\n    192: GCS_DS_PATH + '\/tfrecords-jpeg-192x192',\n    224: GCS_DS_PATH + '\/tfrecords-jpeg-224x224',\n    331: GCS_DS_PATH + '\/tfrecords-jpeg-331x331',\n    512: GCS_DS_PATH + '\/tfrecords-jpeg-512x512'\n}\nGCS_PATH = GCS_PATH_SELECT[IMAGE_SIZE[0]]\n\nAUTO = tf.data.experimental.AUTOTUNE\n\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrec')\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test\/*.tfrec') \n\nCLASSES = ['pink primrose',    'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',     'wild geranium',     'tiger lily',           'moon orchid',              'bird of paradise', 'monkshood',        'globe thistle',         # 00 - 09\n           'snapdragon',       \"colt's foot\",               'king protea',      'spear thistle', 'yellow iris',       'globe-flower',         'purple coneflower',        'peruvian lily',    'balloon flower',   'giant white arum lily', # 10 - 19\n           'fire lily',        'pincushion flower',         'fritillary',       'red ginger',    'grape hyacinth',    'corn poppy',           'prince of wales feathers', 'stemless gentian', 'artichoke',        'sweet william',         # 20 - 29\n           'carnation',        'garden phlox',              'love in the mist', 'cosmos',        'alpine sea holly',  'ruby-lipped cattleya', 'cape flower',              'great masterwort', 'siam tulip',       'lenten rose',           # 30 - 39\n           'barberton daisy',  'daffodil',                  'sword lily',       'poinsettia',    'bolero deep blue',  'wallflower',           'marigold',                 'buttercup',        'daisy',            'common dandelion',      # 40 - 49\n           'petunia',          'wild pansy',                'primula',          'sunflower',     'lilac hibiscus',    'bishop of llandaff',   'gaura',                    'geranium',         'orange dahlia',    'pink-yellow dahlia',    # 50 - 59\n           'cautleya spicata', 'japanese anemone',          'black-eyed susan', 'silverbush',    'californian poppy', 'osteospermum',         'spring crocus',            'iris',             'windflower',       'tree poppy',            # 60 - 69\n           'gazania',          'azalea',                    'water lily',       'rose',          'thorn apple',       'morning glory',        'passion flower',           'lotus',            'toad lily',        'anthurium',             # 70 - 79\n           'frangipani',       'clematis',                  'hibiscus',         'columbine',     'desert-rose',       'tree mallow',          'magnolia',                 'cyclamen ',        'watercress',       'canna lily',            # 80 - 89\n           'hippeastrum ',     'bee balm',                  'pink quill',       'foxglove',      'bougainvillea',     'camellia',             'mallow',                   'mexican petunia',  'bromelia',         'blanket flower',        # 90 - 99\n           'trumpet creeper',  'blackberry lily',           'common tulip',     'wild rose']\n                                                                                                                                              # 100 - 102\n    \n    \ndef decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset","58887559":"# SEED = 2020\n\n# def random_blockout(img, sl=0.1, sh=0.2, rl=0.4):\n#     p=random.random()\n#     if p>=0.25:\n#         w, h, c = IMAGE_SIZE[0], IMAGE_SIZE[1], 3\n#         origin_area = tf.cast(h*w, tf.float32)\n\n#         e_size_l = tf.cast(tf.round(tf.sqrt(origin_area * sl * rl)), tf.int32)\n#         e_size_h = tf.cast(tf.round(tf.sqrt(origin_area * sh \/ rl)), tf.int32)\n\n#         e_height_h = tf.minimum(e_size_h, h)\n#         e_width_h = tf.minimum(e_size_h, w)\n\n#         erase_height = tf.random.uniform(shape=[], minval=e_size_l, maxval=e_height_h, dtype=tf.int32)\n#         erase_width = tf.random.uniform(shape=[], minval=e_size_l, maxval=e_width_h, dtype=tf.int32)\n\n#         erase_area = tf.zeros(shape=[erase_height, erase_width, c])\n#         erase_area = tf.cast(erase_area, tf.uint8)\n\n#         pad_h = h - erase_height\n#         pad_top = tf.random.uniform(shape=[], minval=0, maxval=pad_h, dtype=tf.int32)\n#         pad_bottom = pad_h - pad_top\n\n#         pad_w = w - erase_width\n#         pad_left = tf.random.uniform(shape=[], minval=0, maxval=pad_w, dtype=tf.int32)\n#         pad_right = pad_w - pad_left\n\n#         erase_mask = tf.pad([erase_area], [[0,0],[pad_top, pad_bottom], [pad_left, pad_right], [0,0]], constant_values=1)\n#         erase_mask = tf.squeeze(erase_mask, axis=0)\n#         erased_img = tf.multiply(tf.cast(img,tf.float32), tf.cast(erase_mask, tf.float32))\n\n#         return tf.cast(erased_img, img.dtype)\n#     else:\n#         return tf.cast(img, img.dtype)\n    \n# def data_augment(image, label):\n#     # Thanks to the dataset.prefetch(AUTO) statement in the next function (below), this happens essentially for free on TPU. \n#     # Data pipeline code is executed on the \"CPU\" part of the TPU while the TPU itself is computing gradients.\n    \n#     flag = random.randint(1,3)\n#     coef_1 = random.randint(70, 90) * 0.01\n#     coef_2 = random.randint(70, 90) * 0.01\n    \n#     if flag == 1:\n#         image = tf.image.random_flip_left_right(image, seed=SEED)\n#     elif flag == 2:\n#         image = tf.image.random_flip_up_down(image, seed=SEED)\n#     else:\n#         image = tf.image.random_crop(image, [int(IMAGE_SIZE[0]*coef_1), int(IMAGE_SIZE[0]*coef_2), 3],seed=SEED)\n        \n#     image = random_blockout(image)\n    \n#     return image, label ","2a3e984f":"\n# def data_augment(image, label):\n        \n#     # Set seed for data augmentation\n#     seed = 100\n    \n#     # Randomly resize and then crop images\n#     image = tf.image.resize(image, [720, 720])\n#     image = tf.image.random_crop(image, [512, 512, 3], seed = seed)\n\n#     # Randomly reset brightness of images\n#     image = tf.image.random_brightness(image, 0.6, seed = seed)\n    \n#     # Randomly reset saturation of images\n#     image = tf.image.random_saturation(image, 3, 5, seed = seed)\n        \n#     # Randomly reset contrast of images\n#     image = tf.image.random_contrast(image, 0.3, 0.5, seed = seed)\n\n#     # Randomly reset hue of images, but this will make the colors really weird, which we think will not happen\n#     # in common photography\n#     # image = tf.image.random_hue(image, 0.5, seed = seed)\n    \n#     # Blur images\n#     image = tfa.image.mean_filter2d(image, filter_shape = 10)\n    \n#     # Randomly flip images\n#     image = tf.image.random_flip_left_right(image, seed = seed)\n#     image = tf.image.random_flip_up_down(image, seed = seed)\n    \n#     # Fail to rotate and transform images due to some bug in TensorFlow\n#     # angle = random.randint(0, 180)\n#     # image = tfa.image.rotate(image, tf.constant(np.pi * angle \/ 180))\n#     # image = tfa.image.transform(image, [1.0, 1.0, -250, 0.0, 1.0, 0.0, 0.0, 0.0])\n    \n#     return image, label\n\ndef data_augment(image, label):\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_saturation(image, 0, 2)\n    return image, label\n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec\n    # files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nprint('Dataset: {} training images, {} validation images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES, NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))\n","3b7beb03":"SEED = 752\nSKIP_VALIDATION = False\nTTA_NUM = 5\n\nif SKIP_VALIDATION:\n    TRAINING_FILENAMES = TRAINING_FILENAMES + VALIDATION_FILENAMES","b31df0c5":"# Define the batch size. This will be 16 with TPU off and 128 (=16*8) with TPU on\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\n\nds_train = get_training_dataset()\nds_valid = get_validation_dataset()\nds_test = get_test_dataset()\n\nprint(\"Training:\", ds_train)\nprint (\"Validation:\", ds_valid)\nprint(\"Test:\", ds_test)","c00a0f4d":"np.set_printoptions(threshold=15, linewidth=80)\n\nprint(\"Training data shapes:\")\nfor image, label in ds_train.take(3):\n    print(image.numpy().shape, label.numpy().shape)\nprint(\"Training data label examples:\", label.numpy())","8dc83ec5":"print(\"Test data shapes:\")\nfor image, idnum in ds_test.take(3):\n    print(image.numpy().shape, idnum.numpy().shape)\nprint(\"Test data IDs:\", idnum.numpy().astype('U')) # U=unicode string","cd67d8a2":"\nfrom matplotlib import pyplot as plt\n\ndef batch_to_numpy_images_and_labels(data):\n    images, labels = data\n    numpy_images = images.numpy()\n    numpy_labels = labels.numpy()\n    if numpy_labels.dtype == object: # binary string in this case,\n                                     # these are image ID strings\n        numpy_labels = [None for _ in enumerate(numpy_images)]\n    # If no labels, only image IDs, return None for labels (this is\n    # the case for test data)\n    return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label):\n    if correct_label is None:\n        return CLASSES[label], True\n    correct = (label == correct_label)\n    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n                                CLASSES[correct_label] if not correct else ''), correct\n\ndef display_one_flower(image, title, subplot, red=False, titlesize=16):\n    plt.subplot(*subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    if len(title) > 0:\n        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize\/1.2), color='red' if red else 'black', fontdict={'verticalalignment':'center'}, pad=int(titlesize\/1.5))\n    return (subplot[0], subplot[1], subplot[2]+1)\n    \ndef display_batch_of_images(databatch, predictions=None):\n    \"\"\"This will work with:\n    display_batch_of_images(images)\n    display_batch_of_images(images, predictions)\n    display_batch_of_images((images, labels))\n    display_batch_of_images((images, labels), predictions)\n    \"\"\"\n    # data\n    images, labels = batch_to_numpy_images_and_labels(databatch)\n    if labels is None:\n        labels = [None for _ in enumerate(images)]\n        \n    # auto-squaring: this will drop data that does not fit into square\n    # or square-ish rectangle\n    rows = int(math.sqrt(len(images)))\n    cols = len(images)\/\/rows\n        \n    # size and spacing\n    FIGSIZE = 13.0\n    SPACING = 0.1\n    subplot=(rows,cols,1)\n    if rows < cols:\n        plt.figure(figsize=(FIGSIZE,FIGSIZE\/cols*rows))\n    else:\n        plt.figure(figsize=(FIGSIZE\/rows*cols,FIGSIZE))\n    \n    # display\n    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n        title = '' if label is None else CLASSES[label]\n        correct = True\n        if predictions is not None:\n            title, correct = title_from_label_and_target(predictions[i], label)\n        dynamic_titlesize = FIGSIZE*SPACING\/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n    \n    #layout\n    plt.tight_layout()\n    if label is None and predictions is None:\n        plt.subplots_adjust(wspace=0, hspace=0)\n    else:\n        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n    plt.show()\n\n\ndef display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","116ce879":"ds_iter = iter(ds_train.unbatch().batch(20))","38608005":"one_batch = next(ds_iter)\ndisplay_batch_of_images(one_batch)","6f47cebf":"from datetime import datetime, timedelta\n\nstart_time = datetime.now()\nprint('Time now is', start_time)\nend_training_by_tdelta = timedelta(seconds=8400)\nthis_run_file_prefix = start_time.strftime('%Y%m%d_%H%M_')\n\n\nEPOCHS = 25\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE","1d98bd36":"\n# Learning Rate Schedule for Fine Tuning #\n# Learning rate schedule for TPU, GPU and CPU.\n# Using an LR ramp up because fine-tuning a pre-trained model.\n# Starting with a high LR would break the pre-trained weights.\n\nLR_START = 0.00001\nLR_MAX = 0.00005 * strategy.num_replicas_in_sync\nLR_MIN = 0.00001\nLR_RAMPUP_EPOCHS = 5\nLR_SUSTAIN_EPOCHS = 0\nLR_EXP_DECAY = .8\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = LR_START + (epoch * (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS)\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n    \nlr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose = True)\nrng = [i for i in range(EPOCHS)]\ny = [lrfn(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","c90cad58":"\n# with strategy.scope():\n#     pretrained_model = tf.keras.applications.VGG16(\n#         weights='imagenet',\n#         include_top=False ,\n#         input_shape=[*IMAGE_SIZE, 3]\n#     )\n#     pretrained_model.trainable = False\n    \n#     model = tf.keras.Sequential([\n#         # To a base pretrained on ImageNet to extract features from images...\n#         pretrained_model,\n#         # ... attach a new head to act as a classifier.\n#         tf.keras.layers.GlobalAveragePooling2D(),\n#         tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n#     ])\n# model.compile(\n#     optimizer='adam',\n#     loss = 'sparse_categorical_crossentropy',\n#     metrics=['sparse_categorical_accuracy'],\n# )\n\n# print(model.summary())\n\n# ########## FIT MODEL############\n# # Define training epochs\n# EPOCHS = 20\n# STEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\n\n# history = model.fit(\n#     ds_train,\n#     validation_data=ds_valid,\n#     epochs=EPOCHS,\n#     steps_per_epoch=STEPS_PER_EPOCH,\n#     callbacks=[lr_callback])","643cf319":"# with strategy.scope():\n#     pretrained_model = tf.keras.applications.VGG19(weights = 'imagenet', include_top = False, input_shape = [*IMAGE_SIZE, 3])\n#     pretrained_model.trainable = False\n    \n#     model = tf.keras.Sequential([\n#         pretrained_model,\n#         tf.keras.layers.GlobalAveragePooling2D(),\n#         tf.keras.layers.Dense(len(CLASSES), activation = 'softmax', dtype = 'float32')\n#     ])\n    \n# model.compile(\n#     optimizer = 'adam',\n#     loss = 'sparse_categorical_crossentropy',\n#     metrics = ['sparse_categorical_accuracy'])\n\n# history = model.fit(\n#     ds_train,\n#     steps_per_epoch = STEPS_PER_EPOCH,\n#     epochs = EPOCHS,\n#     callbacks = [lr_callback],\n#     validation_data = ds_valid)","c2eed94d":"# with strategy.scope():\n#     pretrained_model = tf.keras.applications.DenseNet201(weights = 'imagenet', include_top = False, input_shape = [*IMAGE_SIZE, 3])\n#     pretrained_model.trainable = False\n    \n#     model = tf.keras.Sequential([\n#         pretrained_model,\n#         tf.keras.layers.GlobalAveragePooling2D(),\n#         tf.keras.layers.Dense(len(CLASSES), activation = 'softmax', dtype = 'float32')\n#     ])\n    \n# model.compile(\n#     optimizer = 'adam',\n#     loss = 'sparse_categorical_crossentropy',\n#     metrics = ['sparse_categorical_accuracy'])\n\n# history = model.fit(\n#     ds_train,\n#     steps_per_epoch = STEPS_PER_EPOCH,\n#     epochs = EPOCHS,\n#     callbacks = [lr_callback],\n#     validation_data = ds_valid)\n\n","7b1bbf20":"# #These are for class weights\n# import datetime\n# import tqdm\n# import json\n# from collections import Counter\n# import gc\n\n# gc.enable()\n\n# def get_training_dataset_raw():\n#     dataset = load_dataset(TRAINING_FILENAMES, labeled = True, ordered = False)\n#     return dataset\n\n# raw_training_dataset = get_training_dataset_raw()\n\n# label_counter = Counter()\n# for images, labels in raw_training_dataset:\n#     label_counter.update([labels.numpy()])\n\n# del raw_training_dataset    \n\n# TARGET_NUM_PER_CLASS = 122\n\n# def get_weight_for_class(class_id):\n#     counting = label_counter[class_id]\n#     weight = TARGET_NUM_PER_CLASS \/ counting\n#     return weight\n\n# weight_per_class = {class_id: get_weight_for_class(class_id) for class_id in range(104)}\n","49a330b2":"\n\n# with strategy.scope():\n#     pretrained_model = tf.keras.applications.DenseNet201(weights = 'imagenet', include_top = False, input_shape = [*IMAGE_SIZE, 3])\n#     pretrained_model.trainable = True\n    \n#     model = tf.keras.Sequential([\n#         pretrained_model,\n#         tf.keras.layers.GlobalAveragePooling2D(),\n#         tf.keras.layers.Dense(len(CLASSES), activation = 'softmax', dtype = 'float32')\n#     ])\n    \n# model.compile(\n#     optimizer = 'adam',\n#     loss = 'sparse_categorical_crossentropy',\n#     metrics = ['sparse_categorical_accuracy'])\n\n# history = model.fit(\n#     ds_train,\n#     steps_per_epoch = STEPS_PER_EPOCH,\n#     epochs = EPOCHS,\n#     callbacks = [lr_callback],\n#     validation_data = ds_valid,\n#     class_weight = weight_per_class)\n\n","ae3889ac":"\n# with strategy.scope():    \n#     pretrained_model = tf.keras.applications.DenseNet201(weights='imagenet', include_top=False ,input_shape=[*IMAGE_SIZE, 3])\n#     pretrained_model.trainable = True # tramsfer learning\n    \n#     model = tf.keras.Sequential([\n#         pretrained_model,\n#         tf.keras.layers.GlobalAveragePooling2D(),\n#         tf.keras.layers.Dense(1024, activation='relu'),\n#         tf.keras.layers.Dense(512, activation='relu'),\n#         tf.keras.layers.Dense(104, activation='softmax')\n#     ])\n\n# LEARNING_RATE = 3e-5 * strategy.num_replicas_in_sync    \n# optimizer = optimizers.Adam(lr=LEARNING_RATE)\n# model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['sparse_categorical_accuracy'])\n\n# EPOCHS = 20\n# ES_PATIENCE = 6\n\n# es = EarlyStopping(monitor='val_loss', mode='min', patience=ES_PATIENCE, restore_best_weights=True, verbose=1)\n\n# callback_list = [es, lr_callback]\n\n# history = model.fit(x=get_training_dataset(), \n#                     steps_per_epoch=STEPS_PER_EPOCH, \n#                     validation_data=get_validation_dataset(),\n#                     callbacks=callback_list,\n#                     epochs=EPOCHS, \n#                     verbose=2).history\n\n","13fbb961":"!pip install efficientnet\nimport efficientnet.tfkeras as efficientnet\n","a464352a":"# with strategy.scope():\n#     # Create EfficientNetB7 model\n#     enet = efn.EfficientNetB7(\n#         input_shape = (512, 512, 3),\n#         weights = 'imagenet',  # Use the preset parameters of ImageNet\n#         include_top = False  # Drop the fully connected network on the top\n#     )\n\n#     model = tf.keras.Sequential([\n#         enet,\n#         tf.keras.layers.GlobalAveragePooling2D(),\n#         tf.keras.layers.Dense(len(CLASSES), activation = 'softmax')\n#     ])\n\n#     model.compile(\n#         optimizer=tf.keras.optimizers.Adam(),  # Use Adam Algorithm for optimization\n#         # For multiclassification, we can use cross entropy or sparse cross entropy as our loss function \n#         # These two cross entropy are the same in essence, but they are applied in different scenarios\n#         # If our target is one-hot encoded, it is better to use cross entropy\n#         # If our target is an integer, sparse cross entropy is a better choice, and this is our case\n#         loss = 'sparse_categorical_crossentropy', \n#         metrics = ['sparse_categorical_accuracy']\n#     )\n\n# history = model.fit(\n#     get_training_dataset(),\n#     steps_per_epoch = STEPS_PER_EPOCH,\n#     epochs = EPOCHS,\n#     callbacks = [lr_callback],\n#     validation_data = get_validation_dataset(),\n#     class_weight = weight_per_class\n# )","020d1895":"def create_EfficientNet_model():\n    pretrained_model = efficientnet.EfficientNetB7(weights = 'noisy-student', include_top = False, input_shape = [*IMAGE_SIZE, 3])\n    pretrained_model.trainable = True\n\n    model = tf.keras.Sequential([\n        pretrained_model,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation = 'softmax')\n    ])\n\n    model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['sparse_categorical_accuracy'])\n    return model","b7b2a33c":"no_of_models = 2   \nmodels = [0] * no_of_models\nstart_model = 0\nend_model = 2     ####1 2\nmodel_indx_0 = start_model\nmodel_indx_1 = start_model + 1\n\nval_probabilities = [0] * no_of_models\ntest_probabilities = [0] * no_of_models\nall_probabilities = [0] * no_of_models\n\nwith strategy.scope():\n    for j in range(no_of_models):\n#        models[j] = create_VGG16_model()\n#        models[j] = create_Xception_model()\n#        models[j] = create_DenseNet_model()\n        models[j] = create_EfficientNet_model()\n#        models[j] = create_InceptionV3_model()\n#        models[j] = create_ResNet152_model()\n#        models[j] = create_MobileNetV2_model()\n#        models[j] = create_InceptionResNetV2_model()\n#\nmodels[0].summary()","945fa912":"def write_history(j):\n    history_dict = [0] * no_of_models\n    for i in range(j + 1):\n        if (historys[i] != 0):\n            history_dict[i] = historys[i].history\n#\n    filename = '.\/' + this_run_file_prefix + 'model_history_' + str(j) + '.pkl'\n    pklfile = open(filename, 'ab')\n    pickle.dump(history_dict, pklfile)\n    pklfile.close()\n","2e5c16f9":"EPOCHS = 20  # 50 # 35  # 20 \nhistorys = [0] * no_of_models\n#lr_exp_decay_values = [0.5,0.6,0.5,0.7] # [0.6,0.7,0.8,0.9,0.6,0.7,0.8,0.9,0.6,0.7,0.8,0.9,0.6,0.7,0.8,0.9,0.5,0.5,0.5,0.5]\n#lr_max_values = [0.00005,0.00003,0.00004,0.00003] # [0.00003,0.00003,0.00003,0.00003,0.00004,0.00004,0.00004,0.00004,0.00005,0.00005,0.00005,0.00005,0.00006,0.00006,0.00006,0.00006,0.00003,0.00004,0.00005,0.00006]\nfinished_models = 0\n\nearly_stop = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=20, restore_best_weights = True)\n\nfor j in range(start_model, end_model):\n    start_training = datetime.now()\n    print(start_training)\n    time_from_start_program_tdelta = start_training - start_time\n    if time_from_start_program_tdelta > end_training_by_tdelta:\n        print(j, 'time limit for doing training over, get out')\n        break\n#    with strategy.scope():\n#        models[j] = create_DenseNet_model()\n#    if j == 0:\n#        models[0].summary()\n#        print('----------------------------------------------------')\n#    LR_EXP_DECAY = lr_exp_decay_values[j]\n#    LR_MAX = lr_max_values[j] * strategy.num_replicas_in_sync\n    print('LR_EXP_DECAY:', LR_EXP_DECAY, '. LR_MAX:', LR_MAX)\n    historys[j] = models[j].fit(get_training_dataset(), steps_per_epoch = STEPS_PER_EPOCH, epochs = EPOCHS, validation_data = get_validation_dataset(), callbacks = [lr_callback, early_stop])\n    write_history(j)\n    filename = this_run_file_prefix + 'models_' + str(j) + '.h5'\n    models[j].save(filename)\n#    model_to_delete = models[j]\n#    models[j] = 0\n#    del model_to_delete\n    gc.collect()\n    finished_models = j + 1   ###1,2\n\nprint(datetime.now())","9aeefe38":"cmdataset = get_validation_dataset(ordered = True)\nimages_ds = cmdataset.map(lambda image, label: image)\nlabels_ds = cmdataset.map(lambda image, label: label).unbatch()\ncm_correct_labels = next(iter(labels_ds.batch(NUM_VALIDATION_IMAGES))).numpy()\n\ndataset = get_validation_dataset()\ndataset = dataset.unbatch().batch(20)\nbatch = iter(dataset)\n\nimages, labels = next(batch)","5a987411":"test_ds = get_test_dataset(ordered = True)\n\n#print('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\n\nfor j in range(start_model, end_model):\n    val_probabilities[j] = models[j].predict(images_ds)\n    test_probabilities[j] = models[j].predict(test_images_ds)\n    all_probabilities[j] = models[j].predict(images)\n\nprint(datetime.now())","77110f66":"def create_submission_file(filename, probabilities):\n    predictions = np.argmax(probabilities, axis = -1)\n    print('Generating submission file...', filename)\n    test_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\n    test_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U')\n\n    np.savetxt(filename, np.rec.fromarrays([test_ids, predictions]), fmt = ['%s', '%d'], delimiter = ',', header = 'id,label', comments = '')\n#","1e28962e":"probabilities = np.zeros((test_probabilities[0].shape)) # = test_probabilities[0] + test_probabilities[1] \nfor j in range(no_of_models):\n    probabilities = probabilities + test_probabilities[j]\n\nfilename = this_run_file_prefix + 'submission.csv'   \ncreate_submission_file(filename, probabilities)\ncreate_submission_file('submission.csv', probabilities)\n","701be8ed":"# with strategy.scope():\n#     enet = efn.EfficientNetB7(input_shape=[*IMAGE_SIZE, 3], weights='noisy-student', include_top=False)\n#     enet.trainable = True\n\n#     model1 = tf.keras.Sequential([\n#         enet,\n#         tf.keras.layers.GlobalAveragePooling2D(),\n#         tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n#     ])\n            \n# model1.compile(\n#     optimizer=tf.keras.optimizers.Adam(),\n#     loss = 'sparse_categorical_crossentropy',\n#     metrics=['sparse_categorical_accuracy']\n# )","792cc3ac":"# if not SKIP_VALIDATION:\n#     history1 = model1.fit(get_training_dataset(), \n#                         steps_per_epoch=STEPS_PER_EPOCH, \n#                         epochs=EPOCHS, \n#                         validation_data=get_validation_dataset(), \n#                         callbacks = [lr_callback])\n# else:\n#     history1 = model1.fit(get_training_dataset(), \n#                         steps_per_epoch=STEPS_PER_EPOCH,\n#                         epochs=EPOCHS, \n#                         callbacks = [lr_callback])","9014a0d0":"# with strategy.scope():\n#     densenet = tf.keras.applications.DenseNet201(input_shape=[*IMAGE_SIZE, 3], weights='imagenet', include_top=False)\n#     densenet.trainable = True\n    \n#     model2 = tf.keras.Sequential([\n#         densenet,\n#         tf.keras.layers.GlobalAveragePooling2D(),\n#         tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n#     ])\n        \n# model2.compile(\n#     optimizer=tf.keras.optimizers.Adam(),\n#     loss = 'sparse_categorical_crossentropy',\n#     metrics=['sparse_categorical_accuracy']\n# )","b7f3f9ca":"# if not SKIP_VALIDATION:\n#     history2 = model2.fit(get_training_dataset(), \n#                         steps_per_epoch=STEPS_PER_EPOCH, \n#                         epochs=EPOCHS, \n#                         validation_data=get_validation_dataset(), \n#                         callbacks = [lr_callback])\n# else:\n#     history2 = model2.fit(get_training_dataset(), \n#                         steps_per_epoch=STEPS_PER_EPOCH,\n#                         epochs=EPOCHS, \n#                         callbacks = [lr_callback])","ccaf0427":"# display_training_curves(\n#     history.history['loss'],\n#     history.history['val_loss'],\n#     'loss',\n#     211,\n# )\n# display_training_curves(\n#     history.history['sparse_categorical_accuracy'],\n#     history.history['val_sparse_categorical_accuracy'],\n#     'accuracy',\n#     212,\n# )","6e159b2f":"\n# import matplotlib.pyplot as plt\n# from sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix\n\n# def display_confusion_matrix(cmat, score, precision, recall):\n#     plt.figure(figsize=(15,15))\n#     ax = plt.gca()\n#     ax.matshow(cmat, cmap='Reds')\n#     ax.set_xticks(range(len(CLASSES)))\n#     ax.set_xticklabels(CLASSES, fontdict={'fontsize': 7})\n#     plt.setp(ax.get_xticklabels(), rotation=45, ha=\"left\", rotation_mode=\"anchor\")\n#     ax.set_yticks(range(len(CLASSES)))\n#     ax.set_yticklabels(CLASSES, fontdict={'fontsize': 7})\n#     plt.setp(ax.get_yticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n#     titlestring = \"\"\n#     if score is not None:\n#         titlestring += 'f1 = {:.3f} '.format(score)\n#     if precision is not None:\n#         titlestring += '\\nprecision = {:.3f} '.format(precision)\n#     if recall is not None:\n#         titlestring += '\\nrecall = {:.3f} '.format(recall)\n#     if len(titlestring) > 0:\n#         ax.text(101, 1, titlestring, fontdict={'fontsize': 18, 'horizontalalignment':'right', 'verticalalignment':'top', 'color':'#804040'})\n#     plt.show()\n    \n# def display_training_curves(training, validation, title, subplot):\n#     if subplot%10==1: # set up the subplots on the first call\n#         plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n#         plt.tight_layout()\n#     ax = plt.subplot(subplot)\n#     ax.set_facecolor('#F8F8F8')\n#     ax.plot(training)\n#     ax.plot(validation)\n#     ax.set_title('model '+ title)\n#     ax.set_ylabel(title)\n#     #ax.set_ylim(0.28,1.05)\n#     ax.set_xlabel('epoch')\n#     ax.legend(['train', 'valid.'])","deced6ff":"# if not SKIP_VALIDATION:\n#     cmdataset = get_validation_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and labels, order matters.\n#     images_ds = cmdataset.map(lambda image, label: image)\n#     labels_ds = cmdataset.map(lambda image, label: label).unbatch()\n#     cm_correct_labels = next(iter(labels_ds.batch(NUM_VALIDATION_IMAGES))).numpy() # get everything as one batch\n#     m1 = model1.predict(images_ds)\n#     m2 = model2.predict(images_ds)\n#     scores = []\n#     for alpha in np.linspace(0,1,100):\n#         cm_probabilities = alpha*m1+(1-alpha)*m2\n#         cm_predictions = np.argmax(cm_probabilities, axis=-1)\n#         scores.append(f1_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro'))\n\n#     best_alpha = np.argmax(scores)\/100\n# else:\n#     best_alpha = 0.51  # change to value calculated with SKIP_VALIDATION=False\n    \n# print('Best alpha: ' + str(best_alpha))","e18123b5":"# def predict_tta(model, n_iter):\n#     probs  = []\n#     for i in range(n_iter):\n#         test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\n#         test_images_ds = test_ds.map(lambda image, idnum: image)\n#         probs.append(model.predict(test_images_ds,verbose=0))\n        \n#     return probs","de85e4ba":"# test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\n\n# print('Calculating predictions...')\n# test_images_ds = test_ds.map(lambda image, idnum: image)\n# probs1 = np.mean(predict_tta(model1, TTA_NUM), axis=0)\n# probs2 = np.mean(predict_tta(model2, TTA_NUM), axis=0)\n# probabilities = best_alpha*probs1 + (1-best_alpha)*probs2\n# predictions = np.argmax(probabilities, axis=-1)\n\n# print('Generating submission file...')\n# test_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\n# test_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\n# np.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')\n","27c02e21":"# cmdataset = get_validation_dataset(ordered=True)\n# images_ds = cmdataset.map(lambda image, label: image)\n# labels_ds = cmdataset.map(lambda image, label: label).unbatch()\n\n# cm_correct_labels = next(iter(labels_ds.batch(NUM_VALIDATION_IMAGES))).numpy()\n# cm_probabilities = model.predict(images_ds)\n# cm_predictions = np.argmax(cm_probabilities, axis=-1)\n\n# labels = range(len(CLASSES))\n# cmat = confusion_matrix(\n#     cm_correct_labels,\n#     cm_predictions,\n#     labels=labels,\n# )\n# cmat = (cmat.T \/ cmat.sum(axis=1)).T # normalize","411d66a2":"# score = f1_score(\n#     cm_correct_labels,\n#     cm_predictions,\n#     labels=labels,\n#     average='macro',\n# )\n# precision = precision_score(\n#     cm_correct_labels,\n#     cm_predictions,\n#     labels=labels,\n#     average='macro',\n# )\n# recall = recall_score(\n#     cm_correct_labels,\n#     cm_predictions,\n#     labels=labels,\n#     average='macro',\n# )\n# display_confusion_matrix(cmat, score, precision, recall)","0a61f4dc":"# dataset = get_validation_dataset()\n# dataset = dataset.unbatch().batch(20)\n# batch = iter(dataset)","61848fbe":"# images, labels = next(batch)\n# probabilities = model.predict(images)\n# predictions = np.argmax(probabilities, axis=-1)\n# display_batch_of_images((images, labels), predictions)","e267e44e":"# test_ds = get_test_dataset(ordered=True)\n\n# print('Computing predictions...')\n# test_images_ds = test_ds.map(lambda image, idnum: image)\n# probabilities = model.predict(test_images_ds)\n# predictions = np.argmax(probabilities, axis=-1)\n# print(predictions)","841c7fdc":"# print('Generating submission.csv file...')\n\n# # Get image ids from test set and convert to unicode\n# test_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\n# test_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U')\n\n# # Write the submission file\n# np.savetxt(\n#     'submission.csv',\n#     np.rec.fromarrays([test_ids, predictions]),\n#     fmt=['%s', '%d'],\n#     delimiter=',',\n#     header='id,label',\n#     comments='',\n# )\n\n# # Look at the first few predictions\n# !head submission.csv","38163f47":"You can use data from any public dataset here on Kaggle in just the same way. If you'd like to use data from one of your private datasets, see [here](https:\/\/www.kaggle.com\/docs\/tpu#tpu3pt5).\n\n## Load Data ##\n\nWhen used with TPUs, datasets are often serialized into [TFRecords](https:\/\/www.kaggle.com\/ryanholbrook\/tfrecords-basics). This is a format convenient for distributing data to each of the TPUs cores. We've hidden the cell that reads the TFRecords for our dataset since the process is a bit long. You could come back to it later for some guidance on using your own datasets with TPUs.","2a595686":"These datasets are `tf.data.Dataset` objects. You can think about a dataset in TensorFlow as a *stream* of data records. The training and validation sets are streams of `(image, label)` pairs.","7c53e671":"# Step 4: Explore Data #\n\nLet's take a moment to look at some of the images in the dataset.","e946812e":"# Using Pretrained Model VGG19","90370863":"# Step 5: Define Model #\n\nNow we're ready to create a neural network for classifying images! We'll use what's known as **transfer learning**. With transfer learning, you reuse part of a pretrained model to get a head-start on a new dataset.\n\nFor this tutorial, we'll to use a model called **VGG16** pretrained on [ImageNet](http:\/\/image-net.org\/)). Later, you might want to experiment with [other models](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/applications) included with Keras. ([Xception](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/applications\/Xception) wouldn't be a bad choice.)\n\n# The distribution strategy we created earlier contains a [context manager](https:\/\/docs.python.org\/3\/reference\/compound_stmts.html#with), `strategy.scope`. This context manager tells TensorFlow how to divide the work of training among the eight TPU cores. When using TensorFlow with a TPU, it's important to define your model in a `strategy.scope()` context.","501e2388":"Use the Python `next` function to pop out the next batch in the stream and display it with the helper function.","6ab1ab36":"DenseNet201","41047a67":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161321) to chat with other Learners.*","e8f50c22":"# Step 8: Make Test Predictions #\n\nOnce you're satisfied with everything, you're ready to make predictions on the test set.","314e6155":"And here is a set of flowers with their predicted species. Run the cell again to see another set.","c373e784":"## Confusion Matrix ##\n\nA [confusion matrix](https:\/\/en.wikipedia.org\/wiki\/Confusion_matrix) shows the actual class of an image tabulated against its predicted class. It is one of the best tools you have for evaluating the performance of a classifier.\n\nThe following cell does some processing on the validation data and then creates the matrix with the `confusion_matrix` function included in [`scikit-learn`](https:\/\/scikit-learn.org\/stable\/index.html).","b58389b2":"You can display a single batch of images from a dataset with another of our helper functions. The next cell will turn the dataset into an iterator of batches of 20 images.","ffe7a43b":"Efficient B7 - 2","321ea668":"We'll use the distribution strategy when we create our neural network model. Then, TensorFlow will distribute the training among the eight TPU cores by creating eight different *replicas* of the model, one for each core.\n\n# Step 3: Loading the Competition Data #\n\n## Get GCS Path ##\n\nWhen used with TPUs, datasets need to be stored in a [Google Cloud Storage bucket](https:\/\/cloud.google.com\/storage\/). You can use data from any public GCS bucket by giving its path just like you would data from `'\/kaggle\/input'`. The following will retrieve the GCS path for this competition's dataset.","d5423f35":"As the classes may not be uniformly distributed, add weights to classes","812f140e":"# Step 9: Make a submission #\n\nIf you haven't already, create your own editable copy of this notebook by clicking on the **Copy and Edit** button in the top right corner. Then, submit to the competition by following these steps:\n\n1. Begin by clicking on the blue **Save Version** button in the top right corner of the window.  This will generate a pop-up window.  \n2. Ensure that the **Save and Run All** option is selected, and then click on the blue **Save** button.\n3. This generates a window in the bottom left corner of the notebook.  After it has finished running, click on the number to the right of the **Save Version** button.  This pulls up a list of versions on the right of the screen.  Click on the ellipsis **(...)** to the right of the most recent version, and select **Open in Viewer**.  This brings you into view mode of the same page. You will need to scroll down to get back to these instructions.\n4. Click on the **Output** tab on the right of the screen.  Then, click on the file you would like to submit, and click on the blue **Submit** button to submit your results to the leaderboard.\n\nYou have now successfully submitted to the competition!\n\nIf you want to keep working to improve your performance, select the blue **Edit** button in the top right of the screen. Then you can change your code and repeat the process. There's a lot of room to improve, and you will climb up the leaderboard as you work.\n","f45d1f7d":"We'll generate a file `submission.csv`. This file is what you'll submit to get your score on the leaderboard.","b0a01910":"Predictions using Test Time Augmentation (TTA)","9fa7cc95":"# Ensemble (Eff + DenseNet)","32becf96":"# Using Trainable DenseNet201","8aaa5300":"## Visual Validation ##\n\nIt can also be helpful to look at some examples from the validation set and see what class your model predicted. This can help reveal patterns in the kinds of images your model has trouble with.\n\nThis cell will set up the validation set to display 20 images at a time -- you can change this to display more or fewer, if you like.","c8654b9b":"## Create Data Pipelines ##\n\nIn this final step we'll use the `tf.data` API to define an efficient data pipeline for each of the training, validation, and test splits.","8e348a93":"# Step 7: Evaluate Predictions #\n\nBefore making your final predictions on the test set, it's a good idea to evaluate your model's predictions on the validation set. This can help you diagnose problems in training or suggest ways your model could be improved. We'll look at two common ways of validation: plotting the **confusion matrix** and **visual validation**.","c450ad5a":"# Step 6: Training #\n\n## Learning Rate Schedule ##\n\nWe'll train this network with a special learning rate schedule.","25131b2c":"The test set is a stream of `(image, idnum)` pairs; `idnum` here is the unique identifier given to the image that we'll use later when we make our submission as a `csv` file.","b4199415":"This next cell shows how the loss and metrics progressed during training. Thankfully, it converges!","16ffd6d7":"# EFFICIENT NET","86f959aa":"By defining `ds_iter` and `one_batch` in separate cells, you only need to rerun the cell above to see a new batch of images.","2da2022a":"# Step 2: Distribution Strategy #\n\nA TPU has eight different *cores* and each of these cores acts as its own accelerator. (A TPU is sort of like having eight GPUs in one machine.) We tell TensorFlow how to make use of all these cores at once through a **distribution strategy**. Run the following cell to create the distribution strategy that we'll later apply to our model.","ce567ed2":"# Random Blockout Augmentation","05212428":"Only for Ensemble Method\n\n\nFind Best Alpha","fa090edf":"\n# Introduction #\n\nWelcome to the [**Petals to the Metal**](https:\/\/www.kaggle.com\/c\/tpu-getting-started) competition! In this competition, you\u2019re challenged to build a machine learning model to classify 104 types of flowers based on their images.\n\nIn this tutorial notebook, you'll learn how to build an image classifier in Keras and train it on a [Tensor Processing Unit (TPU)](https:\/\/www.kaggle.com\/docs\/tpu). At the end, you'll have a complete project you can build off of with ideas of your own.\n\n<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\">\n    <strong>Fork This Notebook!<\/strong><br>\nCreate your own editable copy of this notebook by clicking on the <strong>Copy and Edit<\/strong> button in the top right corner.\n<\/blockquote>","3e04b9f2":"# DenseNet 201 with Early Stopping","57ba50af":"# **Using Pretrained Model VGG16**","1b943774":"The `'sparse_categorical'` versions of the loss and metrics are appropriate for a classification task with more than two labels, like this one.","8fbf2951":"You might be familiar with metrics like [F1-score](https:\/\/en.wikipedia.org\/wiki\/F1_score) or [precision and recall](https:\/\/en.wikipedia.org\/wiki\/Precision_and_recall). This cell will compute these metrics and display them with a plot of the confusion matrix. (These metrics are defined in the Scikit-learn module `sklearn.metrics`; we've imported them in the helper script for you.)","e2298f6d":"# Using Pretrained model DenseNet201","99787ee6":"# Step 1: Imports #\n\nWe begin by importing several Python packages.","cc59c2cc":"This next cell will create the datasets that we'll use with Keras during training and inference. Notice how we scale the size of the batches to the number of TPU cores."}}