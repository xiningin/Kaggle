{"cell_type":{"0c0500c5":"code","d50baad8":"code","5770ed0e":"code","773e9584":"code","8b65130d":"code","bd9ef058":"code","b02a7eee":"markdown","fefc8746":"markdown","b3186aa1":"markdown","e21817e3":"markdown","3c01de57":"markdown","bf1fe95e":"markdown","7bd3158a":"markdown","a7f4498b":"markdown"},"source":{"0c0500c5":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\n%matplotlib inline\n\nimport plotly.offline as py\nfrom plotly import tools\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom IPython.display import Markdown, display\nfrom scipy.optimize import curve_fit\n\npd.options.mode.chained_assignment = None\n\n# Read the data\nus_data_path = \"\/kaggle\/input\/covid19-in-usa\/\"\nus_df = pd.read_csv(us_data_path + \"us_covid19_daily.csv\")\nus_states_df = pd.read_csv(us_data_path + \"us_states_covid19_daily.csv\")\nus_df[\"date\"] = pd.to_datetime(us_df[\"date\"], format=\"%Y%m%d\")\nus_states_df = us_states_df.reindex(index=us_states_df.index[::-1])\nus_states_df[\"date\"] = pd.to_datetime(us_states_df[\"date\"], format=\"%Y%m%d\").dt.date.astype(str)\n#us_states_df.head()\n\n# US state code to name mapping\nstate_map_dict = {'AL': 'Alabama',\n 'AK': 'Alaska',\n 'AS': 'American Samoa',\n 'AZ': 'Arizona',\n 'AR': 'Arkansas',\n 'CA': 'California',\n 'CO': 'Colorado',\n 'CT': 'Connecticut',\n 'DE': 'Delaware',\n 'DC': 'District of Columbia',\n 'D.C.': 'District of Columbia',\n 'FM': 'Federated States of Micronesia',\n 'FL': 'Florida',\n 'GA': 'Georgia',\n 'GU': 'Guam',\n 'HI': 'Hawaii',\n 'ID': 'Idaho',\n 'IL': 'Illinois',\n 'IN': 'Indiana',\n 'IA': 'Iowa',\n 'KS': 'Kansas',\n 'KY': 'Kentucky',\n 'LA': 'Louisiana',\n 'ME': 'Maine',\n 'MH': 'Marshall Islands',\n 'MD': 'Maryland',\n 'MA': 'Massachusetts',\n 'MI': 'Michigan',\n 'MN': 'Minnesota',\n 'MS': 'Mississippi',\n 'MO': 'Missouri',\n 'MT': 'Montana',\n 'NE': 'Nebraska',\n 'NV': 'Nevada',\n 'NH': 'New Hampshire',\n 'NJ': 'New Jersey',\n 'NM': 'New Mexico',\n 'NY': 'New York',\n 'NC': 'North Carolina',\n 'ND': 'North Dakota',\n 'MP': 'Northern Mariana Islands',\n 'OH': 'Ohio',\n 'OK': 'Oklahoma',\n 'OR': 'Oregon',\n 'PW': 'Palau',\n 'PA': 'Pennsylvania',\n 'PR': 'Puerto Rico',\n 'RI': 'Rhode Island',\n 'SC': 'South Carolina',\n 'SD': 'South Dakota',\n 'TN': 'Tennessee',\n 'TX': 'Texas',\n 'UT': 'Utah',\n 'VT': 'Vermont',\n 'VI': 'Virgin Islands',\n 'VA': 'Virginia',\n 'WA': 'Washington',\n 'WV': 'West Virginia',\n 'WI': 'Wisconsin',\n 'WY': 'Wyoming'}\n\nstate_code_dict = {v:k for k, v in state_map_dict.items()}\nstate_code_dict[\"Chicago\"] = 'Illinois'\n\ndef correct_state_names(x):\n    try:\n        return state_map_dict[x.split(\",\")[-1].strip()]\n    except:\n        return x.strip()\n    \n# us_covid19_daily.csv has numbers for states instead of names\ndef get_state_codes(x):\n    try:\n        return state_code_dict[x]\n    except:\n        return \"Others\"\n    \n#---print stats and such in markdown for daily updates that are easier to see    \ndef printmd(string):\n    display(Markdown(string))\n    \n# ---------- color print large text -----------------\ndef printmdc(string, color=None):\n    colorstr = \"## <span style='color:{}'>{}<\/span>\".format(color, string)\n    display(Markdown(colorstr))\n\n# ----for curve fitting-------    \ndef func(x, a, b, c, d):\n#     return a * np.exp(b * x) + c\n    return a*b**(c*x) + d\n\n# read the global data set\ncovid_19_df = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\n# Extract only the US cases\nus_covid_df = covid_19_df[covid_19_df[\"Country\/Region\"]==\"US\"]\n# Correct state names and apply state code\nus_covid_df[\"Province\/State\"] = us_covid_df[\"Province\/State\"].apply(correct_state_names)\nus_covid_df[\"StateCode\"] = us_covid_df[\"Province\/State\"].apply(lambda x: get_state_codes(x))\n\ncumulative_df = us_covid_df.groupby(\"ObservationDate\")[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\n\n#fit the cumulative covid cases data to an exponential\nxdata = cumulative_df[\"Confirmed\"].index.values \nydata = cumulative_df[\"Confirmed\"].values\npopt, pcov = curve_fit(func, xdata, ydata, p0=(0, 2, 0,0)) \n# stdv_error = np.sqrt(np.diag(pcov))\n# print(\"std of fit error: \" + str(stdv_error))\nprint(\"Covariance Matrix (squared errors are diagnols): \" + str(popt))\n\n### Plot for number of cumulative covid cases over time\nfig = px.bar(cumulative_df, x=\"ObservationDate\", y=\"Confirmed\",color = \"Deaths\")\nfig.add_trace(px.line(x=cumulative_df.ObservationDate, y=func(xdata, *popt)).data[0]) #comment out this line to remove fit\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily cumulative count of confirmed COVID-19 cases in US\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=750,\n    height=450,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of confirmed cases\"\n)\nfig.update_layout(layout)\nfig.show()\n\n### Plot for number of cumulative deaths over time\n# fig = px.bar(cumulative_df, x=\"ObservationDate\", y=\"Deaths\")\n# layout = go.Layout(\n#     title=go.layout.Title(\n#         text=\"Daily cumulative count of deaths due to COVID-19 in US\",\n#         x=0.5\n#     ),\n#     font=dict(size=14),\n#     width=750,\n#     height=450,\n#     xaxis_title = \"Date of observation\",\n#     yaxis_title = \"Number of death cases\"\n# )\n# fig.update_layout(layout)\n# fig.show()\n\n### Plot for number of confirmed new cases over time\ncumulative_df[\"ConfirmedNew\"] = cumulative_df[\"Confirmed\"].diff() \nfig = px.bar(cumulative_df, x=\"ObservationDate\", y=\"ConfirmedNew\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily count of new confirmed COVID-19 cases in US\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=750,\n    height=450,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of confirmed cases\"\n)\n\nfig.update_layout(layout)\nfig.show()\nprint(\"Exponential fit parameters (a,b,c,d) for a*b^(c*x) + d: \" + str(popt))\n# printmd(\"## Number of confirmed cases in US: \" + str(int(cumulative_df.Confirmed.iloc[-1])))\nprint(\"Number of conrimed cases in US: \" + str(str(int(cumulative_df.Confirmed.iloc[-1]))))\ntomorrows_day = len(cumulative_df.index)\npred_tmrw = func(tomorrows_day, *popt)\nprint(\"(what the fit predicts for today: \" + str(func(tomorrows_day-1, *popt)) +  \")\")\n# printmdc(\"Number of deaths in US: \" + str(int(cumulative_df.Deaths.iloc[-1])),color='red')\nprint(\"Number of deaths in US: \" + str(int(cumulative_df.Deaths.iloc[-1])))\ntomorrows_day = len(cumulative_df.index)\npred_tmrw = func(tomorrows_day, *popt)\n# printmdc(\"Predicted confirmed cases for tomorrow: \" + str(int(pred_tmrw)))\nprint(\"Predicted confirmed cases for tomorrow: \" + str(int(pred_tmrw)))","d50baad8":"# # Read the data\n# # source 1: covid19-in-usa\n# us_data_path = \"\/kaggle\/input\/covid19-in-usa\/\"\n# us_df = pd.read_csv(us_data_path + \"us_covid19_daily.csv\")\n# us_df = us_df.drop('posNeg',axis=1)\n# us_df[\"StateCode\"] = us_df[\"Province\/State\"].apply(lambda x: get_state_codes(x))\n# print(us_df.head())\n\n# # source 2: us_states_covid19_daily\n# us_states_df = pd.read_csv(us_data_path + \"us_states_covid19_daily.csv\")\n# print(us_states_df.head())\n\n# # source 3: global source: \n# us_df[\"date\"] = pd.to_datetime(us_df[\"date\"], format=\"%Y%m%d\")\n# us_states_df = us_states_df.reindex(index=us_states_df.index[::-1])\n# us_states_df[\"date\"] = pd.to_datetime(us_states_df[\"date\"], format=\"%Y%m%d\").dt.date.astype(str)\n# # print(us_states_df.head())\n\n# # check to see overlaps\n# us_df.equals(us_states_df)","5770ed0e":"ny_covid_df = us_covid_df.loc[us_covid_df.StateCode == 'NY']\nny_cum_df = ny_covid_df.groupby(\"ObservationDate\")[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\n\nxdata = ny_cum_df[\"Confirmed\"].index.values \nydata = ny_cum_df[\"Confirmed\"].values\npopt, pcov = curve_fit(func, xdata, ydata) \n#---------plot without fit\n### Plot for number of cumulative covid cases over time\n# fig = px.bar(ny_cum_df, x=\"ObservationDate\", y=\"Confirmed\")\n# layout = go.Layout(\n#     title=go.layout.Title(\n#         text=\"Daily cumulative count of confirmed COVID-19 cases in NY\",\n#         x=0.5\n#     ),\n#     font=dict(size=14),\n#     width=800,\n#     height=500,\n#     xaxis_title = \"Date of observation\",\n#     yaxis_title = \"Number of confirmed cases\"\n# )\n# fig.update_layout(layout)\n# fig.show()\n\n#---------plot with fit-------------------------------\n### Plot for number of cumulative covid cases over time,\nfig = px.bar(ny_cum_df, x=\"ObservationDate\", y=\"Confirmed\",color = \"Deaths\")\nfig.add_trace(px.line(x=ny_cum_df.ObservationDate, y=func(xdata, *popt)).data[0])\nlayout = go.Layout(\n        title=go.layout.Title(\n        text=\"Daily cumulative count of confirmed COVID-19 cases in NY\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=750,\n    height=450,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of confirmed cases\"\n)\nfig.update_layout(layout)\nfig.show()\n\n\n\n### Cumulative deaths\n# fig = px.bar(ny_cum_df, x=\"ObservationDate\", y=\"Deaths\")\n# layout = go.Layout(\n#     title=go.layout.Title(\n#         text=\"Daily cumulative count of deaths due to COVID-19 in NY\",\n#         x=0.5\n#     ),\n#     font=dict(size=14),\n#     width=750,\n#     height=450,\n#     xaxis_title = \"Date of observation\",\n#     yaxis_title = \"Number of death cases\"\n# )\n# fig.update_layout(layout)\n# fig.show()\n\n### Plot for number of cumulative covid cases over time\nny_cum_df[\"ConfirmedNew\"] = ny_cum_df[\"Confirmed\"].diff() \nfig = px.bar(ny_cum_df, x=\"ObservationDate\", y=\"ConfirmedNew\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily count of new confirmed COVID-19 cases in NY\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=750,\n    height=450,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of confirmed cases\"\n)\n\nfig.update_layout(layout)\nfig.show()\n\nprint(\"Exponential fit parameters (a,b,c,d) for a*b^(c*x) + d: \" + str(popt))\n# printmd(\"## Number of confirmed cases in NY: \" + str(int(ny_cum_df.Confirmed.iloc[-1])))\nprint(\"Number of confirmed cases in NY: \" + str(int(ny_cum_df.Confirmed.iloc[-1])))\n# printmdc(\"Number of deaths in NY: \" + str(int(ny_cum_df.Deaths.iloc[-1])),color='red')\nprint(\"Number of deaths in NY: \" + str(int(ny_cum_df.Deaths.iloc[-1])))\ntomorrows_day = len(ny_cum_df.index)\npred_tmrw = func(tomorrows_day, *popt)\n# printmdc(\"Predicted confirmed cases for tomorrow: \" + str(int(pred_tmrw)))\nprint(\"Predicted confirmed cases for tomorrow: \" + str(int(pred_tmrw)))\nprint(\"(what the fit predicts for today: \" + str(func(tomorrows_day-1, *popt)) +  \")\")","773e9584":"ma_covid_df = us_covid_df.loc[us_covid_df.StateCode == 'MA']\nma_cum_df = ma_covid_df.groupby(\"ObservationDate\")[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\n\n### Plot for number of cumulative covid cases over time\nfig = px.bar(ma_cum_df, x=\"ObservationDate\", y=\"Confirmed\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily cumulative count of confirmed COVID-19 cases in MA\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=750,\n    height=450,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of confirmed cases\"\n)\n\nfig.update_layout(layout)\nfig.show()\n\n### Plot for number of cumulative covid cases over time\nfig = px.bar(ma_cum_df, x=\"ObservationDate\", y=\"Deaths\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily cumulative count of deaths due to COVID-19 in MA\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=750,\n    height=450,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of death cases\"\n)\n\nfig.update_layout(layout)\nfig.show()\n\n### Plot for number of cumulative covid cases over time\nma_cum_df[\"ConfirmedNew\"] = ma_cum_df[\"Confirmed\"].diff() \nfig = px.bar(ma_cum_df, x=\"ObservationDate\", y=\"ConfirmedNew\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily count of new confirmed COVID-19 cases in MA\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=750,\n    height=450,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of confirmed cases\"\n)\n\nfig.update_layout(layout)\nfig.show()\n\n    \n# printmd(\"Number of confirmed cases in MA: \" + str(ma_cum_df.Confirmed.iloc[-1]), color=\"Red\")\n# printmd(\"## Number of confirmed cases in MA: \" + str(int(ma_cum_df.Confirmed.iloc[-1])))\nprint(\"Number of confirmed cases in MA: \" + str(int(ma_cum_df.Confirmed.iloc[-1])))\n# printmd(\"## Number of deaths in MA: \" + str(int(ma_cum_df.Deaths.iloc[-1])))\nprint(\"Number of deaths in MA: \" + str(int(ma_cum_df.Deaths.iloc[-1])))","8b65130d":"nj_covid_df = us_covid_df.loc[us_covid_df.StateCode == 'NJ']\nnj_cum_df = nj_covid_df.groupby(\"ObservationDate\")[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\n\nxdata = nj_cum_df[\"Confirmed\"].index.values \nydata = nj_cum_df[\"Confirmed\"].values\npopt, pcov = curve_fit(func, xdata, ydata) \n\n\n#---------plot with fit-------------------------------\n### Plot for number of cumulative covid cases over time,\nfig = px.bar(nj_cum_df, x=\"ObservationDate\", y=\"Confirmed\",color = \"Deaths\")\nfig.add_trace(px.line(x=nj_cum_df.ObservationDate, y=func(xdata, *popt)).data[0])\nlayout = go.Layout(\n        title=go.layout.Title(\n        text=\"Daily cumulative count of confirmed COVID-19 cases in NJ\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=750,\n    height=450,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of confirmed cases\"\n)\nfig.update_layout(layout)\nfig.show()\n\n\n### Plot for number of cumulative covid cases over time\nnj_cum_df[\"ConfirmedNew\"] = nj_cum_df[\"Confirmed\"].diff() \nfig = px.bar(nj_cum_df, x=\"ObservationDate\", y=\"ConfirmedNew\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily count of new confirmed COVID-19 cases in NJ\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=750,\n    height=450,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of confirmed cases\"\n)\n\nfig.update_layout(layout)\nfig.show()\n\n# printmd(\"## Number of confirmed cases in NJ: \" + str(int(nj_cum_df.Confirmed.iloc[-1])))\nprint(\"Number of confirmed cases in NJ: \" + str(int(nj_cum_df.Confirmed.iloc[-1])))\n# printmdc(\"Number of deaths in NJ: \" + str(int(nj_cum_df.Deaths.iloc[-1])),color='red')\nprint(\"Number of deaths in NJ: \" + str(int(nj_cum_df.Deaths.iloc[-1])))\ntomorrows_day = len(nj_cum_df.index)\npred_tmrw = func(tomorrows_day, *popt)\n# printmdc(\"Predicted confirmed cases for tomorrow: \" + str(int(pred_tmrw)))\nprint(\"Predicted confirmed cases for tomorrow: \" + str(int(pred_tmrw)))\nprint(\"(what the fit predicts for today: \" + str(func(tomorrows_day-1, *popt)) +  \")\")","bd9ef058":"#define a function to fit. In this case an exponential.\ndef func(x, a, b, c):\n    return a * np.exp(b * x) + c\n\n# instead of taking the dates as the xdata, it's easier to just take\n# the index values since the x-axis is day-by-day\nxdata = ny_cum_df[\"Confirmed\"].index.values \nydata = ny_cum_df[\"Confirmed\"].values\n#popt = optimal vals for fitted params\n#pcov = The estimated covariance of popt. \n#The diagonals provide the variance of the parameter estimate.\n# To compute one standard deviation errors on the parameters use \n#perr = np.sqrt(np.diag(pcov))\npopt, pcov = curve_fit(func, xdata, ydata) \nstdv_error = np.sqrt(np.diag(pcov))\nprint(\"std of error: \" + str(stdv_error))\nprint(\"Exponential fit parameters (a,b,c): \" + str(popt))\n\n#---------------------------Seaborn--------------------------\nsns.set()\nplt.figure(figsize=(12,6))\nplt.title('Confirmed Cases in NY')\nsns.set_style('darkgrid')\n# sns.set_context(\"talk\",font_scale = 4)\nbarplot_ny = sns.barplot(ny_cum_df.ObservationDate, ydata)\nplt.plot(xdata, func(xdata, *popt), 'r-')\nbarplot_ny.set_xticklabels(barplot_ny.get_xticklabels(), rotation=270)\n\n#----------------------------Plotly--------------------------\n### Plot for number of cumulative covid cases over time,\nfig = px.bar(ny_cum_df, x=\"ObservationDate\", y=\"Confirmed\",color = \"Deaths\") #you can remove the color param to simplify things\nfig.add_trace(px.line(x=ny_cum_df.ObservationDate, y=func(xdata, *popt)).data[0])\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily cumulative count of confirmed COVID-19 cases in NY\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=500,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of confirmed cases\"\n)\nfig.update_layout(layout)\nfig.show()\n\n\n\ntomorrows_day = len(ny_cum_df.index)+1\npred_tmrw = func(tomorrows_day, *popt)\n\n","b02a7eee":"# Daily Covid-19 Fits for USA, NY, MA, and NJ","fefc8746":"# Just New York Data\nMaking predictions of the NY fit is tricky because it doesn't solely reflect the spread of the virus, it also includes the increase in testing capabilities.","b3186aa1":"# How to fit data and make predictions (Plotly & Seaborn)","e21817e3":"# Entire USA","3c01de57":"# Just for Massachusetts Now\nThere's not yet enough data (as of 2020.03.24) in Massachusetts to make a good fit, so I haven't bothered yet.","bf1fe95e":"# New Jersey","7bd3158a":"# Load all sources and check for missing data (in progress)","a7f4498b":"Starting code from this notebook was taken from [here](https:\/\/www.kaggle.com\/sudalairajkumar\/covid-19-analysis-of-usa\/data), but I didn't fork it because I ended up changing so much. Data for this notebook was taken entirely from \"novel-corona-virus-2019-dataset\/covid_19_data.csv\". Additionally,hidden away in the code is the ability to print the predictions as markdown headers to make them easier to read. I ended up commenting this out, because I think it only looks better in the editor window.\n\nAll data will be updated day-to-day if you edit and hit run-all. Otherwise, this page won't be up to date unless I've made a commit that day. I've included a better commented section at the bottom for how to fit and plot the data, both with plotly and seaborn.\n"}}