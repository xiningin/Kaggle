{"cell_type":{"4263fa8a":"code","14a29ca6":"code","8fa1f6b5":"code","a83e2282":"code","7c889ef6":"code","987df44d":"code","f43c9041":"code","07eef9ef":"code","d92712ce":"code","fc1a8338":"code","8377684c":"code","75522d70":"code","dd7d15b5":"code","05f954f8":"code","d14e95d7":"code","c953df6b":"code","64916aa8":"code","6aaad213":"code","0b7ca055":"code","c885ce01":"code","6808f11e":"code","09107e1b":"code","0a10c12f":"code","47abf20a":"code","e18ddf61":"code","3131f739":"code","a576db56":"code","b00ca57d":"code","d2a0bd69":"markdown","c20a985d":"markdown","8223b5dd":"markdown","8161bd18":"markdown","98d57400":"markdown","c4318b75":"markdown"},"source":{"4263fa8a":"import os\nimport cv2\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport json\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Flatten, Activation, Dropout, GlobalAveragePooling2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import optimizers, applications\nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler, TensorBoard, EarlyStopping\nfrom keras import backend as K ","14a29ca6":"ann_file = '..\/input\/inaturalist-2019-fgvc6\/train2019.json'\nwith open(ann_file) as data_file:\n        train_anns = json.load(data_file)","8fa1f6b5":"train_anns_df = pd.DataFrame(train_anns['annotations'])[['image_id','category_id']]\ntrain_img_df = pd.DataFrame(train_anns['images'])[['id', 'file_name']].rename(columns={'id':'image_id'})\ndf_train_file_cat = pd.merge(train_img_df, train_anns_df, on='image_id')\ndf_train_file_cat['category_id']=df_train_file_cat['category_id'].astype(str)\ndf_train_file_cat.head()","a83e2282":"len(df_train_file_cat['category_id'].unique())","7c889ef6":"# Example of images for category_id = 400\nimg_names = df_train_file_cat[df_train_file_cat['category_id']=='400']['file_name'][:30]\n\nplt.figure(figsize=[15,15])\ni = 1\nfor img_name in img_names:\n    img = cv2.imread(\"..\/input\/inaturalist-2019-fgvc6\/train_val2019\/%s\" % img_name)[...,[2, 1, 0]]\n    plt.subplot(6, 5, i)\n    plt.imshow(img)\n    i += 1\nplt.show()","987df44d":"valid_ann_file = '..\/input\/inaturalist-2019-fgvc6\/val2019.json'\nwith open(valid_ann_file) as data_file:\n        valid_anns = json.load(data_file)","f43c9041":"valid_anns_df = pd.DataFrame(valid_anns['annotations'])[['image_id','category_id']]\nvalid_anns_df.head()","07eef9ef":"valid_img_df = pd.DataFrame(valid_anns['images'])[['id', 'file_name']].rename(columns={'id':'image_id'})\nvalid_img_df.head()","d92712ce":"df_valid_file_cat = pd.merge(valid_img_df, valid_anns_df, on='image_id')\ndf_valid_file_cat['category_id']=df_valid_file_cat['category_id'].astype(str)\ndf_valid_file_cat.head()","fc1a8338":"nb_classes = 1010\nbatch_size = 64\nimg_size = 80\nnb_epochs = 30","8377684c":"%%time\ntrain_datagen=ImageDataGenerator(rescale=1.\/255, \n    validation_split=0.25,\n    horizontal_flip = True,    \n    zoom_range = 0.3,\n    width_shift_range = 0.3,\n    height_shift_range=0.3\n    )\n\ntrain_generator=train_datagen.flow_from_dataframe(\n    dataframe=df_train_file_cat,\n    directory=\"..\/input\/inaturalist-2019-fgvc6\/train_val2019\",\n    x_col=\"file_name\",\n    y_col=\"category_id\",\n    batch_size=batch_size,\n    shuffle=True,\n    class_mode=\"categorical\",    \n    target_size=(img_size,img_size))","75522d70":"%%time\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\nvalid_generator=test_datagen.flow_from_dataframe(\n    dataframe=df_valid_file_cat,\n    directory=\"..\/input\/inaturalist-2019-fgvc6\/train_val2019\",\n    x_col=\"file_name\",\n    y_col=\"category_id\",\n    batch_size=batch_size,\n    shuffle=True,\n    class_mode=\"categorical\",    \n    target_size=(img_size,img_size))","dd7d15b5":"model = applications.Xception(weights='imagenet', \n                              include_top=False, \n                              input_shape=(img_size, img_size, 3))\n#model.load_weights('..\/input\/NASNet-large-no-top\/NASNet-large-no-top.h5')\n#model.summary()","05f954f8":"# Freeze last 5 layers\nfor layer in model.layers[:-5]:\n    layer.trainable = False","d14e95d7":"#Adding custom layers \nx = model.output\nx = Flatten()(x)\nx = Dense(1024, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\npredictions = Dense(nb_classes, activation=\"softmax\")(x)\nmodel_final = Model(input = model.input, output = predictions)\n\nmodel_final.compile(optimizers.rmsprop(lr=0.0001, decay=1e-6),loss='categorical_crossentropy',metrics=['accuracy'])","c953df6b":"# Callbacks\n\ncheckpoint = ModelCheckpoint(\"vgg16_1.h5\", monitor='val_loss', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\nearly = EarlyStopping(monitor='val_loss', min_delta=0.0001, patience=7, verbose=2, mode='auto')","64916aa8":"%%time\nhistory = model_final.fit_generator(generator=train_generator,                   \n                                    steps_per_epoch=500,\n                                    validation_data=valid_generator,                    \n                                    validation_steps=200,\n                                    epochs=nb_epochs,\n                                    callbacks = [checkpoint, early],\n                                    verbose=2)","6aaad213":"with open('history.json', 'w') as f:\n    json.dump(history.history, f)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['acc', 'val_acc']].plot()","0b7ca055":"test_ann_file = '..\/input\/inaturalist-2019-fgvc6\/test2019.json'\nwith open(test_ann_file) as data_file:\n        test_anns = json.load(data_file)","c885ce01":"test_img_df = pd.DataFrame(test_anns['images'])[['id', 'file_name']].rename(columns={'id':'image_id'})\ntest_img_df.head()","6808f11e":"%%time\n\ntest_generator = test_datagen.flow_from_dataframe(      \n    \n        dataframe=test_img_df,    \n    \n        directory = \"..\/input\/inaturalist-2019-fgvc6\/test2019\",    \n        x_col=\"file_name\",\n        target_size = (img_size,img_size),\n        batch_size = 1,\n        shuffle = False,\n        class_mode = None\n        )","09107e1b":"%%time\ntest_generator.reset()\npredict=model_final.predict_generator(test_generator, steps = len(test_generator.filenames))","0a10c12f":"len(predict)","47abf20a":"predicted_class_indices=np.argmax(predict,axis=1)","e18ddf61":"labels = (train_generator.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npredictions = [labels[k] for k in predicted_class_indices]","3131f739":"sam_sub_df = pd.read_csv('..\/input\/inaturalist-2019-fgvc6\/kaggle_sample_submission.csv')\nsam_sub_df.head()","a576db56":"filenames=test_generator.filenames\nresults=pd.DataFrame({\"file_name\":filenames,\n                      \"predicted\":predictions})\ndf_res = pd.merge(test_img_df, results, on='file_name')[['image_id','predicted']]\\\n    .rename(columns={'image_id':'id'})\n\ndf_res.head()","b00ca57d":"df_res.to_csv(\"submission.csv\",index=False)","d2a0bd69":"### Train data","c20a985d":"### Test data","8223b5dd":"**Transfer learning from pretrained model using Keras.**","8161bd18":"### Validation data","98d57400":"### Model","c4318b75":"### Prediction"}}