{"cell_type":{"ef49cd6a":"code","899e1d46":"code","41817e19":"code","5cbb4bbb":"code","45d9270b":"code","80489020":"code","083cabfa":"code","2716982c":"code","d3c27c7d":"code","492af126":"code","ed29d3a3":"code","44e2035e":"code","62c1e931":"code","8aca65b7":"code","9214cdf6":"code","554d6849":"code","663f2d83":"code","473b8345":"code","790b80ce":"code","5c9560e0":"code","8ceea349":"code","dcbb7689":"code","48008d36":"code","a0dbe16b":"code","fe752e1d":"code","2a0134d8":"markdown","4e7055a3":"markdown","083df7b4":"markdown","8a3db9a7":"markdown","ecfb2ca9":"markdown","c645ebe4":"markdown","9a36d138":"markdown","a08250a4":"markdown","bea836d7":"markdown","af7eec1c":"markdown","39d8451c":"markdown","297a611d":"markdown","0e4a9a55":"markdown","e11b7435":"markdown","81d07954":"markdown"},"source":{"ef49cd6a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #data visualization\nimport seaborn as sns #data visualization\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","899e1d46":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data[\"Status\"]='Train'\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data[\"Status\"]='Test'\nfull_data = pd.concat([train_data, test_data])\nfull_data.head()","41817e19":"# get the number of rows and columns\nrows = train_data.shape[0]\ncolumns = train_data.shape[1]\n\nprint('There are {} rows and {} columns.'.format(rows,columns))","5cbb4bbb":"train_data.info()","45d9270b":"train_data.describe()","80489020":"#Correlation Between Sex and Survived\nwomen = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of Women who survived is {:.0%} vs % of Men who survived is {:.0%} \".format(rate_women,rate_men) )","083cabfa":"#Studiying of Age feature\nfig, axes = plt.subplots(1, 2,figsize=(10,5))\nfig.suptitle('Age Visualization', fontsize=16)\ntrain_data.hist('Age', ax=axes[0])\ntrain_data.boxplot('Age', ax=axes[1])\nplt.show()","2716982c":"Q1 = train_data['Age'].quantile(0.25)\nQ3 = train_data['Age'].quantile(0.75)\nIQR = Q3 - Q1\nwhisker_width = 1.5\nlower_whisker = Q1 -(whisker_width*IQR)\nupper_whisker = Q3 + (whisker_width*IQR)\n# selecting rows based on condition\nrslt_df = train_data[(train_data['Age'] > upper_whisker) | (train_data['Age'] < lower_whisker)]\nprint(\"number of Rows which have outliers is {} Rows whith a percentage of {:.0%} from the whole data.\".format(rslt_df.shape[0],rslt_df.shape[0]\/len(train_data)))","d3c27c7d":"#Studiying correlation between Age and Sex to Survived\nsns.set_theme(style=\"ticks\", color_codes=True)\nsns.catplot(x=\"Survived\", y=\"Age\", hue=\"Sex\", kind=\"swarm\", data=train_data, s =8,height=5, aspect=10\/5)","492af126":"#Studiying of Fare feature\nfig, axes = plt.subplots(1, 2,figsize=(10,5))\nfig.suptitle('Fare Visualization', fontsize=16)\ntrain_data.hist('Fare', ax=axes[0])\ntrain_data.boxplot('Fare', ax=axes[1])\nplt.show()","ed29d3a3":"Q1 = train_data['Fare'].quantile(0.25)\nQ3 = train_data['Fare'].quantile(0.75)\nIQR = Q3 - Q1\nwhisker_width = 1.5\nlower_whisker = Q1 -(whisker_width*IQR)\nupper_whisker = Q3 + (whisker_width*IQR)\n# selecting rows based on condition\nrslt_df = train_data[(train_data['Fare'] > upper_whisker) | (train_data['Fare'] < lower_whisker)]\nprint(\"number of Rows which have outliers is {} Rows whith a percentage of {:.0%} from the whole data.\".format(rslt_df.shape[0],rslt_df.shape[0]\/len(train_data)))","44e2035e":"rslt_df.Pclass.value_counts()","62c1e931":"rslt_df.loc[rslt_df.Pclass != 1]","8aca65b7":"#Visualize classes\nsns.set(rc={'figure.figsize':(6,6)})\nsns.barplot(x=train_data.Pclass.value_counts().index, y=train_data.Pclass.value_counts())","9214cdf6":"#Correlation between Class and Survived\nPclass_ct=pd.crosstab(train_data[\"Pclass\"],train_data[\"Survived\"])\nPclass_ct.div(Pclass_ct.sum(1).astype(float), axis=0).plot(kind=\"bar\",stacked=True,figsize=(6,6))\nplt.show()","554d6849":"#Correlation between Embarked and Survived\nRelation_ct=pd.crosstab(train_data[\"Embarked\"],train_data[\"Survived\"])\nRelation_ct.div(Relation_ct.sum(1).astype(float), axis=0).plot(kind=\"bar\",stacked=True,figsize=(6,6))\nplt.show()","663f2d83":"#for the Relatives  of passenger, I will check if a passenger has at lease one relative is this will affect the surviving rate!!!!!????\nfull_data['relative']=full_data['SibSp'] + full_data['Parch']\nfull_data.loc[full_data.relative >0, \"relative\"] = 1\nfull_data.loc[full_data.relative ==0, \"relative\"] = 0\nfull_data","473b8345":"#Correlation between relative and Survived\ntrain_data=full_data.loc[full_data.Status==\"Train\"]\nRelation_ct=pd.crosstab(train_data[\"relative\"],train_data[\"Survived\"])\nRelation_ct.div(Relation_ct.sum(1).astype(float), axis=0).plot(kind=\"bar\",stacked=True,figsize=(6,6))\nplt.show()","790b80ce":"#Visualize the output \nsns.set(rc={'figure.figsize':(6,6)})\nsns.barplot(x=train_data.Survived.value_counts().index, y=train_data.Survived.value_counts())","5c9560e0":"#Selecting Columns\nfull_data_pro = pd.DataFrame(full_data, columns= ['Survived', 'Pclass', 'Sex','Age','relative', 'Fare','Embarked','Status']) #Gets the specific data we need for our prediction\n#Filling The Null Values\nfull_data_pro['Age'].fillna(value = full_data_pro['Age'].mean(), inplace=True)\nfull_data_pro['Fare'].fillna(value = full_data_pro['Fare'].mean(), inplace=True)\nfull_data_pro['Embarked'].fillna(value = full_data_pro['Embarked'].mode()[0], inplace=True)\nfull_data_pro.replace(('male', 'female'), (0, 1), inplace=True) #Male is 0, Female is 1\nfull_data_pro.replace(('C', 'Q','S'), (0, 1,2), inplace=True) #Male is 0, Female is 1","8ceea349":"#Check for null values\nprint(full_data_pro.isnull().sum())","dcbb7689":"#Normalization\ntrain_data_pro= full_data_pro.loc[full_data_pro.Status==\"Train\"]\ntest_data_pro= full_data_pro.loc[full_data_pro.Status==\"Test\"]\ntrain_data_pro=train_data_pro.drop(\"Status\",axis=1)\ntest_data_pro=test_data_pro.drop(\"Status\",axis=1)\ndata_max = full_data_pro.drop(\"Status\",axis=1).max()\ntrain_data_pro = train_data_pro.divide(data_max)\ntest_data_pro = test_data_pro.divide(data_max)\n","48008d36":"#Divide Data\nx = train_data_pro.drop(['Survived'], axis = 1) \ny = train_data_pro['Survived']\ntest_data_pro = test_data_pro.drop(['Survived'], axis = 1) ","a0dbe16b":"from imblearn.over_sampling import RandomOverSampler\n\nover = RandomOverSampler(sampling_strategy= 1) #sampling_strategy= 1 means I want both classes to have equal number of samples\nx_new, y_new = over.fit_resample(x, y)","fe752e1d":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(n_estimators= 100) #100 trees participating in the aggregate prediction\nmodel.fit(x_new, y_new)\npredictions = model.predict(test_data_pro)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission1.csv', index=False)\nprint(\"Your submission was successfully saved!\")","2a0134d8":"**from the above we can see that surviving rate is also correlated with Port of Embarkation and this may be due to gender and classes of passengers for each port.**","4e7055a3":"**Here outliers indicate something scientifically interesting and Logic, up to 90% of these outliers are first class.For the others classes, Fare is not too far from the upper whisker as show in the above table.As a result I will not treat these outliers.**","083df7b4":"# 1. Data Loading","8a3db9a7":"# 3. Preprocessing","ecfb2ca9":"**The Above catplot assure clearly The social norm of saving \u201cwomen and children first\u201d (WCF).As a result we can conclude also that Age plays an important \nrole in dataset and should be used as a feature for the predictive modeling.**","c645ebe4":"# Case Study: Titanic Survival\n\n**Objective: The objective of this notebook is trying Different Machine Learning Models while trying to share knowledge\n           with the readers of this notebook. I will be building and evaluating several models that will predict if a \n           person survived or not during the Titanic incidence.**","9a36d138":"**we have imbalanced dataset we will tackle in Improving ML Models Section.**","a08250a4":"**By looking over the above graph we can see that class of passenger is highly correlated with the percentage of surviving.**","bea836d7":"**from the above, we can see that the surviving rate for who has relatives is less than who has not.And this is logique from my opinion.**","af7eec1c":"**I believe that those outliers will not reduce the performance and accuracy of a predictable model and thus there is no need to treat them.**","39d8451c":"## 1.1 Load the data","297a611d":"**from the above we can see that most of passengers are third class and this explains why some fairs related to class one is shown as outliers.**","0e4a9a55":"# 2. Exploratory Data Analysis\n## Let's dig deeper & understand our data","e11b7435":"**As a result, 74% of the women were saved compared with only 19% of the men. The social norm of saving \u201cwomen and children first\u201d (WCF) in shipwrecks has often been referred to as the \u201cunwritten law of the sea\".this gives us clear picture that the sex feature is highly correlated with the output.**","81d07954":"## 1.2 Read & visualize data"}}