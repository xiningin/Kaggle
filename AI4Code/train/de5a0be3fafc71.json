{"cell_type":{"70a18fc1":"code","e19d576e":"code","9d7c7dcb":"code","949b0251":"code","0d1f929b":"code","691d4b55":"code","9591e687":"code","1fd8e534":"code","259d81ea":"code","b2ad2991":"code","8fd4de48":"code","205d95a3":"code","7e1fca48":"code","d040b78e":"code","96021038":"code","968fb605":"code","47ba7bb0":"code","46ee66bb":"code","58f8c773":"markdown","cbc85e55":"markdown","a4f1d05d":"markdown","ca1d6069":"markdown","bff7d0f1":"markdown","8135aca5":"markdown","f6c4373e":"markdown","de931b1a":"markdown","65a2004d":"markdown","8a75bb94":"markdown","91ab952c":"markdown","0d7ff758":"markdown","9a7d6e26":"markdown","16c3097a":"markdown","8dcf7da5":"markdown","77867391":"markdown","51ee3c53":"markdown"},"source":{"70a18fc1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e19d576e":"#data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport pandas_profiling as pp\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","9d7c7dcb":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\ncombine = [train_df, test_df]","949b0251":"print(train_df.columns.values)","0d1f929b":"# preview the data\ntrain_df.head()","691d4b55":"train_df.tail()","9591e687":"train_df.info()\nprint('_'*40)\ntest_df.info()","1fd8e534":"train_df.describe()\n# Review survived rate using `percentiles=[.61, .62]` knowing our problem description mentions 38% survival rate.\n# Review Parch distribution using `percentiles=[.75, .8]`\n# SibSp distribution `[.68, .69]`\n# Age and Fare `[.1, .2, .3, .4, .5, .6, .7, .8, .9, .99]`","259d81ea":"train_df.describe(include=['O'])","b2ad2991":"train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","8fd4de48":"train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","205d95a3":"train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","7e1fca48":"train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","d040b78e":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","96021038":"# grid = sns.FacetGrid(train_df, col='Pclass', hue='Survived')\ngrid = sns.FacetGrid(train_df, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","968fb605":"# grid = sns.FacetGrid(train_df, col='Embarked')\ngrid = sns.FacetGrid(train_df, row='Embarked', size=2.2, aspect=1.6)\ngrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\ngrid.add_legend()","47ba7bb0":"# grid = sns.FacetGrid(train_df, col='Embarked', hue='Survived', palette={0: 'k', 1: 'w'})\ngrid = sns.FacetGrid(train_df, row='Embarked', col='Survived', size=2.2, aspect=1.6)\ngrid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\ngrid.add_legend()","46ee66bb":"pp.ProfileReport(train_df)","58f8c773":"Stay Tuned!!\n","cbc85e55":"### Assumtions based on data analysis\n\nWe arrive at following assumptions based on data analysis done so far. We may validate these assumptions further before taking appropriate actions.\n\n**Correlating.**\n\nWe want to know how well does each feature correlate with Survival. We want to do this early in our project and match these quick correlations with modelled correlations later in the project.\n\n**Completing.**\n\n1. We may want to complete Age feature as it is definitely correlated to survival.\n2. We may want to complete the Embarked feature as it may also correlate with survival or another important feature.\n\n**Correcting.**\n\n1. Ticket feature may be dropped from our analysis as it contains high ratio of duplicates (22%) and there may not be a correlation between Ticket and survival.\n2. Cabin feature may be dropped as it is highly incomplete or contains many null values both in training and test dataset.\n3. PassengerId may be dropped from training dataset as it does not contribute to survival.\n4. Name feature is relatively non-standard, may not contribute directly to survival, so maybe dropped.\n\n**Creating.**\n\n1. We may want to create a new feature called Family based on Parch and SibSp to get total count of family members on board.\n2. We may want to engineer the Name feature to extract Title as a new feature.\n3. We may want to create new feature for Age bands. This turns a continous numerical feature into an ordinal categorical feature.\n4. We may also want to create a Fare range feature if it helps our analysis.\n\n**Classifying.**\n\nWe may also add to our assumptions based on the problem description noted earlier.\n\n1. Women (Sex=female) were more likely to have survived.\n2. Children (Age<?) were more likely to have survived. \n3. The upper-class passengers (Pclass=1) were more likely to have survived.","a4f1d05d":"**Which features contain blank, null or empty values?**\n\nThese will require correcting.\n\n- Cabin > Age > Embarked features contain a number of null values in that order for the training dataset.\n- Cabin > Age are incomplete in case of test dataset.\n\n**What are the data types for various features?**\n\nHelping us during converting goal.\n\n- Seven features are integer or floats. Six in case of test dataset.\n- Five features are strings (object).","ca1d6069":"### Correlating categorical and numerical features\n\nWe may also want to correlate categorical features (with non-numeric values) and numeric features. We can consider correlating Embarked (Categorical non-numeric), Sex (Categorical non-numeric), Fare (Numeric continuous), with Survived (Categorical numeric).\n\n**Observations.**\n\n- Higher fare paying passengers had better survival. Confirms our assumption for creating (#4) fare ranges.\n- Port of embarkation correlates with survival rates. Confirms correlating (#1) and completing (#2).\n\n**Decisions.**\n\n- Consider banding Fare feature.","bff7d0f1":"**Which features are categorical?**\n\nThese values classify the samples into sets of similar samples. Within categorical features are the values nominal, ordinal, ratio, or interval based? Among other things this helps us select the appropriate plots for visualization.\n\n- Categorical: Survived, Sex, and Embarked. Ordinal: Pclass.\n\n**Which features are numerical?**\n\nWhich features are numerical? These values change from sample to sample. Within numerical features are the values discrete, continuous, or timeseries based? Among other things this helps us select the appropriate plots for visualization.\n\n- Continous: Age, Fare. Discrete: SibSp, Parch.","8135aca5":"**Which features are mixed data types?**\n\nNumerical, alphanumeric data within same feature. These are candidates for correcting goal.\n\n- Ticket is a mix of numeric and alphanumeric data types. Cabin is alphanumeric.\n\n**Which features may contain errors or typos?**\n\nThis is harder to review for a large dataset, however reviewing a few samples from a smaller dataset may just tell us outright, which features may require correcting.\n\n- Name feature may contain errors or typos as there are several ways used to describe a name including titles, round brackets, and quotes used for alternative or short names.","f6c4373e":"**What is the distribution of categorical features?**\n\n- Names are unique across the dataset (count=unique=891)\n- Sex variable as two possible values with 65% male (top=male, freq=577\/count=891).\n- Cabin values have several dupicates across samples. Alternatively several passengers shared a cabin.\n- Embarked takes three possible values. S port used by most passengers (top=S)\n- Ticket feature has high ratio (22%) of duplicate values (unique=681).","de931b1a":"# **Data overview**","65a2004d":"![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoGBxQTExYUFBQYFhYZGh8ZGhgaGhwZIRoZHxocGiAaHBoaISsiGhwoHRgaIzQjKCwuMTExGSE3PDcvOyswMS4BCwsLDw4PHBERHDIoISkwMDAwMzAwMC4yMDAwMDAwLjAwMDAwMDAwMDAwMDIwMjAuMDAwMDEwMDAwMDAyMDIwMP\/AABEIAK4BIgMBIgACEQEDEQH\/xAAbAAABBQEBAAAAAAAAAAAAAAABAAIDBAUGB\/\/EADoQAAIBAwMBBgQEBQQCAwEAAAECEQADIQQSMUEFEyJRYXEGMoGRQqGx8CNSwdHhFGKC8XKSFSRDNP\/EABkBAAMBAQEAAAAAAAAAAAAAAAABAgMEBf\/EACwRAAICAQMCBQQCAwEAAAAAAAABAhEhAxIxQVEEImFxkROBsfDB0QVCoRT\/2gAMAwEAAhEDEQA\/APJzRoGiKoQqU0qNACBpTQiiDQBY7O0pu3UtifEenkAWJ+wJrcTRkjae9IIksDIPikKgCjaFCrJXqrDHFYPZ+rNq6lwAEowaD18x9RI+tdhqkRrYdW\/hvDKwxtkfKfUGfYk1jqptYYJpPKMq92UADtO8gQFfIQnJEEZ8McEAY8jVP\/42TL2yiwFJU9QCNwHrCgj1JngDvdP8NK1tbiXlMgd4AnymQCPm8cZPQmPWqmv7CKXHRLi3Bbna7QJOzedok4AlRn8MVw6fi1bV3R0PRlSdcnnmp0xQ5IIkwVMg5InzEgSJAJBBqKK69uzWViGW4VlZWC4J7uRMSCSpDTPSoL\/Y6LZ759qDeEFszvYmW3BdsFYByTwDjz7o60WlkylpzXQ5ajFTa61sdl2lYMQf3+5qGa1sgnud33abd3eS2+SNseHbtHP80z6VET6frn1z9seVNmlTAM0bgAiDOAeIyQCV+hxPWKbRmIOPb+9AAVCSAOSYp7GScyB4R6jz8v8AunW2hWaADwPciOeYCz9xTbLATIBwRmRBiA2DyOanqAP354pxX1obsRA8+BP35j0pEciqAfiI6yc+Y6f1+9KKQfEfn9\/7\/kKQamA5RmnMmY+n7IpqtUlt18W7cTB2wY8XmZGRzj15oAZ3ZgtEgEAn1MkfcKftUTCntRBE+f8AelQETJGDE9RzGfPg\/SgB9KlcVE1NMATRnmZnp\/WaFKgBCnimCpBwPOfMRGI9uufamAqVNoxQSST+4pU2TSoFRBRbFNo0iwmlNED1oUUAqVKKIFFACtb4f7Z7ndbuQbT8gidrfzDrHmB7++VtpEUmhM7q41yzDrc3WiAVIhvDPX0wx9cYxWp2L8QafuWGosBbqsdrxuNwSYbcBIYBj6R9q4jsD4gax\/Dfx2T052H+ZR\/T1++3rdJgXbRFy2RIz9JgdMz7qOa4PEeEjNYVe2DfT15Rw3g1\/wD5XTtf7sLvtb1Xu18IC7I37sZHEDkY4pt7UaO4khe8Yg7mVS+0NO7b+EbFkbx5f7q5TtCyzEshgkHcvMiQSCfMBlHsRWj2LpmtB7lxCrMmbcbZU7SuFIILRx6nrxENBKqb6Gk9VtZMvVWC7MrbtiuzLc27SwYgE7eY8POeOkVl6vTFDHIgGRxkCRMCYJifbzFa1m\/cRybtq5tmCNreAenUxnkxgVNetwCUAO5TK+hgkweGBhvcDrXRGcounwYuKatHOCnHitPtDs4AblUgsTtQD8MgTt5HI6mss10p2ZiT1oUelT6G3LAwIHiPMegP1I\/OhulYIbfnCx8olvQ4GfL8K+4qMc0d0sW8yaBGRQlgGEUl5z+v9acTwPKgqEmBn29KYCVcf5oikP09B+zTlxTQC8sf5yf8D6Ui0Y\/fTr9KIFBhPT1p0AqQuAESJ8wf8VEZpATSAnbqQI6iJiPLJmh0\/r+UUbJAgkSuJWSNwmSJGQDH0ptICEgzH+KUVJvxx\/XGPP25Gc0w5pgJacDQAo0wFRUkfXn1\/Zg\/SjQFFEj6VCaVOgIaNA07aYnpMT+\/ekUClSmjQAIo0iOlJRQARQuIfofL9D5VIi9fKnMepg9M9R6j8vvWU5O6RpGFqyotafYfbb6doy1piC9uSJEg48j+\/Ws+5bg+nr+lEGeZPrHByeJ9\/wBaVkuPRnX3tOtxe9sS6kAsBIzI5B6ggYMZitf4a+Iu7ud69u27nwmSAQCRxvaY4k8eHjy4LsztJ9Ox2mVOGUGQ3qPXyNeofAvayXdLdsog8NpF4UnvHV97Z+Xx4AM4UEYMVyeMahC6tOvyXoRcpUjmNRqbdy6twSh3i6yyrIwWXKkhpYMIEebR60LGpBuOSCFztEExgNyGyAAwwOo9qu6fs+5qNLp0V7VpbaMXZlBfvQQio4WGUBFwT9RMVC\/w5fhHbujbe4C7J4dqbirBTuMKBPAPC0oa2nFU5ZWK\/e5U9GbzXJb7XfTXdOLVuyy3i8d74sJME+LhQCsqZiREmCeL7V0ijKuGiQxjbJnBHuIMdPF6T6P24mmbWW1s2bQXuXGyF2lw6ONwGCSoInqMVxGr0LXEJYJaIfe1tTnYRkoDiRkRPXyo8Nqrl2rzn1DU02ksfqMAVeI7ux5F8\/TIX8t5\/wCS05tDbZ1S2WXcxndAKpCtMSSYG\/8A9etM7fuzc2RAX8PkYHh91AVf+FdbluaivcziqTZSTgUW6U4UGrYzCKku3SQqmIWYgCcmckZOfPigKDigQFHrRFAGn7qYBCnp6VJr9L3W2W+YTEHHoT\/3U+js+ITgKNx6cwR+Ufc1Q1+pLuTPXFS3iwXNCkHzHmOJ8qZtpthc1ITnPHpVLgoK\/WjuwfKhb5ogU6JInGaQqQimEUqodjpnpH75pxA6UxaeCT9Mfv8AP700IRpyR5dP2aEUVqhCilT4PlSoApxUhuttCydoMhZwCYBMfQUw0agsQFGP3\/SiBQNACVZo0lNKgAp6k+\/MfuavPphsCF1L7p2j2Hh3nAOTI+01QIq1pNE16YgBVLM53AYgcgEbvLiaymq81mkHflKl1CMHpioh+\/351pNaNwlnEewic8R6cVRv2ijR9j5+tRGV4KnHqN3zMwSfOZ5kt74j6\/WrfZfaV7SuHttBgSJkMP5XAP5HI9KqI3M5Byecf7vUin2jJjkAgm2JXcFBk4wDtBzz4jzmqaUk01gzTado6gdtd+7XUYo22biD\/bkuTwRGJ9BVK9oe\/YvtLGc5+sdYmCZ4EGsOzuSLgxDAA4+bng\/9V2vwVrE1LGzvW1eYYBGHYBVAXyLQCfLaTGK51oqD3J4o0lqykvU0Oy+yrbqbpALgBm8W3vMb1VD0BxEZgiec3vijULr9OLtpFtLYlmY+GPFsKCY3ZH5UE1F61\/CDGz4tzABYfcuDJGJ8J3DnrE7gNVp2cLd2SFI7xyQfFIfay9CJ54yPSuZxb1fMr7dirWy08rk57srS7pu7UdQDJBE7fm2n\/wAoC+UMay9Z2OCrXXvAvlmVRMksAMzGdzH6ZzXTdk6UrdtqFLrcbxIIO0K4I+cgEbQDiInimfFbWHuOyMtot+AKyy+5YhScEk9Mc8ddIuUJ0uv\/AAG1ON9v+nLX+zrQsWrguS7FgUiSIZoYifDIC8mc8Va1PYqJbHzBnG5S5CwuIJExB5+vpWt2Eo3AMoIJGYBaAQTC9eOK6b4i1lm\/p7dxreJ22oaCdxHiIGBheDxtI60l4yW6krKl4eO1Sv8AUcJr+yF\/\/GIUkbiSS0QCwHlPUedY9+2VMEfbj716J2n2Ne06W2uKEQnCqZknADA8HnrEmqF3SpetKiLbZwS7tAACyQokjPUxj5OtbrxSuNO0+fQxjpPbJvpx6nG6XSgkd5cW2DgEgk+8cBfViB70\/svR97eVM7S2T1KjJ9pAj3NRdoWocjfvnJIMiT69en7FdN8HaOEa8R4mOy3PRRlm+pgf8D51rramzTcvgNLT3TSf3NPtHs5LltgwCkxLKBIAB2qDHyiZj2ri9X2E6OqzIYgbgD4ZIBJHpPn9q7zUifAMzj88n3iTWD8TsLeMbgAR6MSQD+RP2rztDxE96iuD0dXw8PpuT5OcvoFYhTIGJI8v06\/eomFOMyf60y7XsrCPI6iU\/l9fyp1AQaJgYoAANEiiLf296Ny3xQIiUelOinbaO2nQWHThSwDkgZyBJ4xiRiYoKaJFBaEBJ9KVLc3mfvSqxFOnKaTN0njj0nyobazNAzSBpbaKL6x+ftQSDrSoxSUDrQFhBgGP3z+Waluap2RbZJ2LwvQc598n7nzpoEgADxSfrMQI85B+9OW0SpOIEdR18hyfpQ4p8gpNcEmm1B4OfX+\/9\/1qXVWt6x16H99DVI1JaulfUeXl7f2\/7rnnpZ3R5Noan+suCmQQfIg05bxAjIAO4RghojcCciTtJ9hEQKuamz3g3Lk+nX\/I8qoTTi7QpKmT2m7s7gRuBPIlXU+ExjIPiBmMHzmo0tkjcDkHgE7hALFoHCiOelNwSBMDGSOPPA6TNFeDBKtBnPIO1dqgDnLEyYIHpmiTvvhv4yTUqum1pAucW75gZM4cngksCW6hAMGDW\/p7j6S8u8blK4\/3WmngHiedp\/zXmbaZNQAbKnv2ZpsIp2hFQtuQkngLkEyS2BjxXexPiVlIS8ZEBFuNJ7sSB4hyQAPfFY\/STvt1Xr3QpNrK5PTO0exVdTqdJDJmbUTHMgA8iOVORJim3ezdP2muSLWptKNrGCcc7h+NIA9pIqoVfTMt+w\/e2GKsDPhYSSu4AxuIXcPKekxVm\/cs6tzd0+61qB4iMBTtAklh+PcYkc9RXNJW7b44f8NFqVYXx\/Ryt\/RajR3e6uhUzu3QoEcyrAAEE\/njmrDac39Ouy8FZCtxGwyysFQYyuZyIiI4rp31yapTptagDiVBI2ndEAg8I5P\/ABb8jynxH8P39E0SDpyApcK2YGLbbSSpyBxBHXGME7k+kvlNHRGeEnlfg1tR8XKwsd5cR9p71zII3ePBAOCoUmMSSvyyBWhp+3FGn7xlCDc2MRLLvAJMgkePA\/lHBauet2LNy2otKLZQPucnDKUYbNhkgEn3Eir9wPbtqhm20yUjB+VCDIJkzbyMmOeKnbpyql89DRKUVT98dTC7Y7Kt3io3AXSVAeQZYwNrxh\/EVG75s\/i6bCWVtKqLwihB7Dk+7NLH39Kva3W2mS3btWT\/AKhHUM20CWMyAcfyzPA+kVDr9C9khbvhE+czieBnj9ajW1J7VF3izXw6g5N9WTdm6cAG43ABYnyAHP2n7V552\/eLXZPOWbr4iT1gcKAPSIzye+7a7SKBrKANb7tXZ18R289OBJ\/c155cJO92BG4ShgwfGvHmIkVt\/jdKVuchf5DVVKCKzCT70x7cGtu32bvW0pKWwAyl2kbrhZm2iJLFQUUnhSCCR1oXUUqCDJkq36gj3E\/+vrXtJps8nKKQ5p20E09oH\/f9PpQ2\/v8AfsKAscT60geKaSf2f3NO59+lUKiS8giRUIrQ0hF5MDI5PnVK8sEjNJZEn0Gkfv8AfNFY\/f6iOtKPKgwqhj5Pn+RpVHu\/eaVKwK0U9QKjpy0kUSCnlhtAgTJluZBCwIPEQfvUJpxM0xBApUgKI9qkARRFKKNADRRpAUelACs3GQ7l+o6H3\/vS16qw7xRHR18j5+xprUGX9KmULyilLoyujR\/UeYmYMdMUiBMT0xwM+Rk8T1ptE1BZZtbi4KsFuqZDBlQeALt2FAAG8JO6YODM5LrFr\/UNA2IwRVtoqR3rgpbVAF\/\/AEaSxY8kNVRFE5Mc9JzGB9TA+tdJ8Odi2L2n1JvE27ttFNraYLMxkFlPzLlVkdG8wJmclFX9seoJWRdhfEuo0Xeacz3bBle234N0bmToCQB6Ee810Gh1YgXrT43SGkBgwg8AysGuS1GsW6Cl8AXQ7FtQSzswCkbGH4pKoqnAUe5NRdi9o3dOwvWxIUruDDchJnaGBxPhMex9aEqt1nr6kSjfB6la11rVILV8hLoG1LvTEcz0hWMcktiOKv8AZva7afdp9Wm620gMw3Ar0DT8y8f7l\/IcZY11m9bD2TtZFBuI5Eh5C+H+YEndxgH0rd7K7YVrYs6kb7f4X6qSWIM9MvJbJMAZFcupo0vKsduq9gjPo+e\/cd8TfDB0yte0qressAxU5KDOVIncp\/KKxtX2j31sWiA7FsGZbaZkziEkKIPkgxmumtam7omEHvtM53KR0BOGH8jEAkDhh+UPa3wxZ1X\/ANjRbVvuGJtwQrjAIMRseMwSAceeeeDafmz2f8NHRutV8ox9ILtmO9d4MbWYOGdVMwWAEkGcmfwz5ro\/6O9rbSxfAuhizoedjQQYMHaoDKRHKcyBObo+138djUW\/GARBBlDiWUH5TIHX8sVd1aHaEsbnlgiHKvxkYPAn2O0nGKPqOSqSSazxaNXp7fNF39yv2z2I2juHuP4ly4kCD8shU3QMkBN5B6Ek1Fd7Fs2re9yrWkSQAQCXO\/aFPIO6AQJjcOIkW9DAuO13xm34XZz\/APqRJXPkBkdN\/WKiWxpLyMLVi5vAKIy+NBJbKpkW+Cc7YkZEiaWs4pJW+LaQvpb3cvizidRqS7bicyAAMBVBkKo4CjOP7mgeMfvrWnr+yW79rKqN6rujcDPhBJBJhjmIE\/rVXT9m3Xbag3ZOVIYeGZMqTjDZ4IE9a9LT1IySo49SDiyhctHDQYmJ6TAMDzwQfqKjuIelX9bdRIRf4m3HJCgkiTiCzYiQQoCiN3JqVqnZPA22MZouYDN1wo\/8j\/YAn7edNuPjNXdf2dcthSwhUTc\/pccjwn1+Qf2mpm0qj3KjF05dit\/ru5CqqqceIHrPrzVe9rdzSAQDiJmqlxpM1c7N0hYluYA+5E\/p+tF2yaSVkoNNNWHtEVFBrQQp9aVOilTApHrSWkRRAqSh8iOMzz6RxHnSpRRApiCB086QohTSigARiiB+X1ohaL285oAYRRIxThbpxFAEcUqeBQFSIg1Vuc9evrVdTV8LVXVWNuRx19DUyRUZdBhE0VvssQcjg5kCCNo8lycU1acRNZ8GtWAQNwIk9CG4IPpIZT\/QQeZfpdRsgxO2WXCfPtgE7lO5QQDtOOeJmoyxiDmBAknw5nAmM5+565p6qVGRhhzAMAEE7TMBuAR6wYmnzySFka2QymVkqrgHa8RuA3ASMiQR1rqvhvtAagi0DF1jCqTg+EAKmPMHk43eQmuUcbd22GUyoYr\/AOJMT8rDGR5+tMCELv4G6JkTuieJn68UW6JlFM9M7L7Zaw2xvHZzuTBAmAzDoW24E4zWlatnThdVpHBQwGU52MRuKZywEjPIP3riOxPiFbu2zqGAbwW0vEwETd4gyqMmDyfLzM1q97yqsCJhvt18sH05rF6KlK1jv2ZO5xVP7eh1PaOltdrSAgtXERQGmWmTIIHz2xgA856deV1+nv6e46XmWztJcMrHxSNu5Hx4fDEDzgxgVa7EtXmuE2mG9JuLEghBHU4Jwef5orrOze1dPrUGm1SANxJhZIEAqfwPnjr9Yrlnpy05tJ2uq6r+zeE90U3h\/k82HZ6uWKks0nxSdpY9dwOSZ5Fdt8D9suiCxcDNbS01wXDtxBJK7ScAjKx5weJrO+IPh65oO9Mm5Yb5bg5VgPCrADDSVHkfemdnvv7pQJZbrlVYkhlidrBcMItAR03VEk5pp8fg3TVWuTU7T+KdOwICXN0wAQoKBgQ5Rp8J2lhP+4GuR0HaFrxjTk7SSJIILCIgiPEuTwByJAkCul7RNp9Nv3Kt8vuuCATLbvAAeFTM85jrmuT1HZy7i8hboAgDgiQuDBCHxeR68EzXR4aEYK6fPUw1pOWMFTtjSAeNQBmSBx7ifWeMYx5DO3Vcvavcrb0YQdokQTiCQPw+oyIxmqNpGcsLYLRn9\/Xgc13bqyzGMW8F3sXS95fXyQbzjy4GeZaOek10Oqu4M555zuYyDzzyR9TUPw1oylndEM2Z6ycmfYRjzaou0r0QB0\/6\/ftXm62rum69j0tHSqKv3MO\/o7fegDAEFhmCAcjHyzx05rW0KAIMASSxHGT0x9Ko6OwWJJ\/EY\/4rz9CRH0rQvcfv99K7tK0snB4lxcvKV9UB6VQYZqe+STmo9ldCMEKT+z\/mjR7qlVAZzCCaK1Jf129i3drz5xUi9rsowqj0Efp1rPeXTIwacsHNQ6ztJrhk85k8zNaXYV\/S9zqO\/wC8N0JNrbwGkDInJk\/aplqJK6b9hO0ropg0apnUHzml\/qW86reh7WXIFGKpf6lqP+pMHxGegjp7zjp060t4bS5FONUF1B6k\/af60460+Q+3+aNwbWbR0E2l2glz4mwZA4j0A5qi1vofsf8ANC527dIiR6456586iftZ252H\/jP60twbWSkU5lxnrVZe0XHGweyAf0oXta7kEsJHGKNwbWM1OkZMwdpMAkdeYpgard7WvckPc55xP6VUu29pwZHQ1DouMn1ARTGninCi1BfIrJ2kNCt5giRGRB6j8jkEEYNK3d2EMjEGOSAOVIYcnEEicfSgtwrMHkQeoOI4PXODyORBoq0Nut7hGRmSI6yAPvAoJLKG26MWMbECqs8R1E\/NudiSvKhmIB2gVc7M7TazsW6C1oglSD5rEgrhws5XoQRyIrJC7ioRTOFAEsWbjA8yegp2p1DXDubLcE9SZMsx\/ExJJJOSaFhiaTWTuUO5Q6EFWBIZST4ZC58ocsMnoPMVY1+vDW0i141AQlcl\/FEnpgEc8Ac1xHZHbF3TltjHY4h06MJB+8gH6V1ehvpdso6XQzjwuhAVlwIJ6GfFxgR61O1Wm+ehnK1xwdD2R8Rh1Nq+5a0fDJG4qA3iVgBJk4zkesiLHa\/w2mbmnUXbQy1seIDAaVz4lhpxkT1E1i9l3LQHcuihWdZudbYlmYgAdSVJ9uM1q9j9tPpGlf4lkkgGCImCSJ4fwg7Tgx6zXHqaLjNygvddH7eptHUuKUvs+qOeTTOzsy93sidpITbjhQMT6jBnpNdHpu2O807odIWbugiNsAAgRP8AEYeIElo6nyq12l2fY1Tm9piEaJRYMXGXbvY87Gm4i8QSGn5ga5\/VXb6t3clSsKbRxtgfgH5xnzHMVnq3KPlyl0fKOjS27vNhvr0Zn\/E1pd7OlsCBgEHA+WLg4ZokysAbusTWMVuEofAi7hIQEGBIC5JnBI\/5da6\/Tap9Otx7gF21dBkwC6Ezhl45xjz88HH7O7Ke3ftG\/C21XvPmBBbhV9wc\/wDGrhq3HPbHqWtJxlVdcmvrE7q0qfiIz+v9a5rVkfc\/4rW1HaXeOR0MgdcedZfaVuCdvQc+pxiPSajw2ni5cleJ1s1Hgk06gAH6D75OPWm608U1tMBi2xuKoGevQk49\/p1qvqWiZGK9KLVJo8uSak7GtbmoiKC3RHNUCCTOa0Uwo0pFKqXcnzpUbxUjNNCkaNQbipyNzicfb1\/fnTZohyODEiD6jmD5iQPtQIFKlQoGGlQo0AKlSpUAKlSoUCDSoxxnp0nHODMflPP0pGM8849s\/wCKABFXtN2a1y3uVWmdv4YJ5jLAjwyeDweACRSxVxb9naysLriPBLBQjE+Jton8IXE5Iz0iX6FIaNORuViFKkgzJgiQflB6+vrmJEpCDawYAAgwWOZPMFAWHhIjp+sHg3mLjKskBoJO3pgHBiMVLZvxt\/8AsXF5MgNIJ84OcgTmpdgWPAg3Mttgyzt3MZBJPzKAUbyHlyMVa0962zuy27UFTBLPBBUYKsCOR5DLdQKzrergzuuNJZmhgjSR\/P4urcnmOBUzdo3btxlVrrB8BA+5iOdpYDxeeREZ6VLi\/wBY06Lp01kNbIsA\/JKl4U4BJ3lgADB+bzzS1S27xkaczEnbdBaAAFxuk4AHy+1UmHj2bLrXoHDKQCBMgIrb1xM+n1pXtauxRsORBLD5jAIPt4o9QAcTFTsfr8sLNPR6LSoHe5bYbI8JLXIMiNxRSueIYDmfKjpTpLZtm2byXA3z7XEgmIKgtImDgT7mqty5aI33Q4LAFC1t8gE5Ri2RPWtLxkeBb7gHbvK3XEyQBuLFfmBAjkjE9M3azb+cDu1VI27iq8OLcsG8Q2XU8IVRwyKADA8WPmbqJqrb11\/untqE2u4aMbQQoBUF4kA\/iJIENBPIo2+yrjCXuoWEju7m5eZyogwcevHSq+r7TvWFt7L1lNhJCqpOSIKkC1tPAnMSFIyJqIqTwnfuOT9DR0ep1GmIvM9pQMMFKuSvnAY564k4mKp\/EXxUz3BuO\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\/\/Z)","8a75bb94":"### Correlating categorical features\n\nNow we can correlate categorical features with our solution goal.\n\n**Observations.**\n\n- Female passengers had much better survival rate than males. Confirms classifying (#1).\n- Exception in Embarked=C where males had higher survival rate. This could be a correlation between Pclass and Embarked and in turn Pclass and Survived, not necessarily direct correlation between Embarked and Survived.\n- Males had better survival rate in Pclass=3 when compared with Pclass=2 for C and Q ports. Completing (#2).\n- Ports of embarkation have varying survival rates for Pclass=3 and among male passengers. Correlating (#1).\n\n**Decisions.**\n\n- Add Sex feature to model training.\n- Complete and add Embarked feature to model training.","91ab952c":"## Acquire data\n\nThe Python Pandas packages helps us work with our datasets. We start by acquiring the training and testing datasets into Pandas DataFrames. We also combine these datasets to run certain operations on both datasets together.","0d7ff758":"## Analyze by describing data\n\nPandas also helps describe the datasets answering following questions early in our project.\n\n**Which features are available in the dataset?**\n\nNoting the feature names for directly manipulating or analyzing these. These feature names are described on the [Kaggle data page here](https:\/\/www.kaggle.com\/c\/titanic\/data).","9a7d6e26":"# Titanic - Machine Learning from Disaster\n\n\nThe objective of this notebook is to follow a step-by-step workflow, explaining each step and rationale for every decision we take during solution development.\n\n## Workflow stages\n\nThe competition solution workflow goes through seven stages described in the Data Science Solutions book.\n\n1. Question or problem definition.\n2. Acquire training and testing data.\n3. Wrangle, prepare, cleanse the data.\n4. Analyze, identify patterns, and explore the data.\n5. Model, predict and solve the problem.\n6. Visualize, report, and present the problem solving steps and final solution.\n7. Supply or submit the results.\n\nThe workflow indicates general sequence of how each stage may follow the other. However there are use cases with exceptions.\n\n## Question and problem definition\n\nCompetition sites like Kaggle define the problem to solve or questions to ask while providing the datasets for training your data science model and testing the model results against a test dataset. The question or problem definition for Titanic Survival competition is [described here at Kaggle](https:\/\/www.kaggle.com\/c\/titanic).\n\n> Knowing from a training set of samples listing passengers who survived or did not survive the Titanic disaster, can our model determine based on a given test dataset not containing the survival information, if these passengers in the test dataset survived or not.\n\nWe may also want to develop some early understanding about the domain of our problem. This is described on the [Kaggle competition description page here](https:\/\/www.kaggle.com\/c\/titanic). Here are the highlights to note.\n\n- On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. Translated 32% survival rate.\n- One of the reasons that the shipwreck led to such loss of life was that there were not enough lifeboats for the passengers and crew.\n- Although there was some element of luck involved in surviving the sinking, some groups of people were more likely to survive than others, such as women, children, and the upper-class.\n\n## Workflow goals\n\nThe data science solutions workflow solves for seven major goals.\n\n**Classifying.** We may want to classify or categorize our samples. We may also want to understand the implications or correlation of different classes with our solution goal.\n\n**Correlating.** One can approach the problem based on available features within the training dataset. Which features within the dataset contribute significantly to our solution goal? Statistically speaking is there a [correlation](https:\/\/en.wikiversity.org\/wiki\/Correlation) among a feature and solution goal? As the feature values change does the solution state change as well, and visa-versa? This can be tested both for numerical and categorical features in the given dataset. We may also want to determine correlation among features other than survival for subsequent goals and workflow stages. Correlating certain features may help in creating, completing, or correcting features.\n\n**Converting.** For modeling stage, one needs to prepare the data. Depending on the choice of model algorithm one may require all features to be converted to numerical equivalent values. So for instance converting text categorical values to numeric values.\n\n**Completing.** Data preparation may also require us to estimate any missing values within a feature. Model algorithms may work best when there are no missing values.\n\n**Correcting.** We may also analyze the given training dataset for errors or possibly innacurate values within features and try to corrent these values or exclude the samples containing the errors. One way to do this is to detect any outliers among our samples or features. We may also completely discard a feature if it is not contribting to the analysis or may significantly skew the results.\n\n**Creating.** Can we create new features based on an existing feature or a set of features, such that the new feature follows the correlation, conversion, completeness goals.\n\n**Charting.** How to select the right visualization plots and charts depending on nature of the data and the solution goals.","16c3097a":"### Correlating numerical and ordinal features\n\nWe can combine multiple features for identifying correlations using a single plot. This can be done with numerical and categorical features which have numeric values.\n\n**Observations.**\n\n- Pclass=3 had most passengers, however most did not survive. Confirms our classifying assumption #2.\n- Infant passengers in Pclass=2 and Pclass=3 mostly survived. Further qualifies our classifying assumption #2.\n- Most passengers in Pclass=1 survived. Confirms our classifying assumption #3.\n- Pclass varies in terms of Age distribution of passengers.\n\n**Decisions.**\n\n- Consider Pclass for model training.","8dcf7da5":"## Analyze by pivoting features\n\nTo confirm some of our observations and assumptions, we can quickly analyze our feature correlations by pivoting features against each other. We can only do so at this stage for features which do not have any empty values. It also makes sense doing so only for features which are categorical (Sex), ordinal (Pclass) or discrete (SibSp, Parch) type.","77867391":"**What is the distribution of numerical feature values across the samples?**\n\nThis helps us determine, among other early insights, how representative is the training dataset of the actual problem domain.\n\n- Total samples are 891 or 40% of the actual number of passengers on board the Titanic (2,224).\n- Survived is a categorical feature with 0 or 1 values.\n- Around 38% samples survived representative of the actual survival rate at 32%.\n- Most passengers (> 75%) did not travel with parents or children.\n- Nearly 30% of the passengers had siblings and\/or spouse aboard.\n- Fares varied significantly with few passengers (<1%) paying as high as $512.\n- Few elderly passengers (<1%) within age range 65-80.","51ee3c53":"## Analyze by visualizing data\n\nNow we can continue confirming some of our assumptions using visualizations for analyzing the data.\n\n### Correlating numerical features\n\nLet us start by understanding correlations between numerical features and our solution goal (Survived).\n\nA histogram chart is useful for analyzing continous numerical variables like Age where banding or ranges will help identify useful patterns. The histogram can indicate distribution of samples using automatically defined bins or equally ranged bands. This helps us answer questions relating to specific bands (Did infants have better survival rate?)\n\nNote that x-axis in historgram visualizations represents the count of samples or passengers.\n\n**Observations.**\n\n- Infants (Age <=4) had high survival rate.\n- Oldest passengers (Age = 80) survived.\n- Large number of 15-25 year olds did not survive.\n- Most passengers are in 15-35 age range.\n\n**Decisions.**\n\nThis simple analysis confirms our assumptions as decisions for subsequent workflow stages.\n\n- We should consider Age (our assumption classifying #2) in our model training.\n- Complete the Age feature for null values (completing #1).\n- We should band age groups (creating #3)."}}