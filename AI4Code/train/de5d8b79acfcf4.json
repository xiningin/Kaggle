{"cell_type":{"02efb207":"code","35f871d0":"code","b8c999fa":"code","554a71aa":"code","fa160587":"code","0aa2ffb7":"code","b82c4330":"code","d614472d":"code","f8b8c521":"code","bbace4cd":"code","e86466c1":"code","b20ea99e":"code","e5a01c22":"code","47209337":"code","2bf1ca0b":"code","84dc1720":"code","3218d010":"code","a78bc743":"code","d314c363":"code","a4e5de13":"markdown","b8af5433":"markdown","ddb3bd24":"markdown","bbf41001":"markdown","545ed46b":"markdown","596b4655":"markdown","ebaf5c55":"markdown","9d3c3849":"markdown","6963a118":"markdown","5213b15f":"markdown","3bfb997f":"markdown","40a43e51":"markdown","b65fb75d":"markdown","6d0e8ffb":"markdown","a9ae3ff5":"markdown","05658593":"markdown","5e0e8f67":"markdown","37d8f181":"markdown","ed0221bc":"markdown","d5e5a3c4":"markdown","f8bd8886":"markdown","5df0a09b":"markdown","914047c4":"markdown"},"source":{"02efb207":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport warnings\n\n%matplotlib inline\nwarnings.filterwarnings('ignore')","35f871d0":"data = pd.read_csv('..\/input\/iris\/Iris.csv')","b8c999fa":"data.head()","554a71aa":"data.info()","fa160587":"sns.heatmap(data.isnull())","0aa2ffb7":"sns.countplot(x='Species',data=data)","b82c4330":"sns.pairplot(data,hue='Species')","d614472d":"plt.figure(figsize=(15,12))\nplt.subplot(2, 2, 1)\nsns.boxplot(x='Species',y='SepalLengthCm',data=data)\nplt.subplot(2, 2, 2)\nsns.boxplot(x='Species',y='SepalWidthCm',data=data)\nplt.subplot(2, 2, 3)\nsns.boxplot(x='Species',y='PetalLengthCm',data=data)\nplt.subplot(2, 2, 4)\nsns.boxplot(x='Species',y='PetalWidthCm',data=data)","f8b8c521":"data = data.drop('Id',axis=1)","bbace4cd":"X = data.drop('Species',axis=1)\nY = data['Species']","e86466c1":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.3,random_state=30)","b20ea99e":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train,Y_train)\nmodel.coef_","e5a01c22":"pred = model.predict(X_test)","47209337":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nprint(classification_report(Y_test,pred))\nprint(\"Accuracy:\",round(accuracy_score(Y_test,pred),2)*100,'%')","2bf1ca0b":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(X_train,Y_train)","84dc1720":"predK = knn.predict(X_test)","3218d010":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nprint(classification_report(Y_test,predK))\nprint(\"Accuracy:\",round(accuracy_score(Y_test,predK),2)*100,'%')","a78bc743":"error_rate = []\n\n# Will take some time\nfor i in range(1,100):    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,Y_train)\n    predK = knn.predict(X_test)\n    error_rate.append([accuracy_score(Y_test,predK),i])\n#print(error_rate)\ntemp = error_rate[0]\n#print(temp[0])\nfor m in error_rate:\n    if temp[0] < m[0]:\n        temp=m\nprint(temp[1],\"as the value of k will give the highest accuracy possible i.e.\",temp[0]*100,'%')","d314c363":"knn = KNeighborsClassifier(n_neighbors=temp[1])\nknn.fit(X_train,Y_train)\npred = knn.predict(X_test)\nprint('WITH K=',temp[1])\nprint(classification_report(Y_test,pred))\nprint(\"Accuracy:\",round(accuracy_score(Y_test,pred),2)*100,'%')","a4e5de13":"#### Prediction","b8af5433":"Pairplots","ddb3bd24":"Checking for missing data","bbf41001":"#### Using the best K value and then evaluating the model","545ed46b":"#### Evaluation","596b4655":"#### Prediction","ebaf5c55":"Test and traininig split","9d3c3849":"#### Evaluation","6963a118":"#### Creation and fitting","5213b15f":"### Importing the data","3bfb997f":"### Logistic Regression Model","40a43e51":"### EDA","b65fb75d":"Splitting into targets and features","6d0e8ffb":"### Importing libraries\n","a9ae3ff5":"Total count of each species","05658593":"Boxplots of various parameters of each species","5e0e8f67":"#### Creation and fitting","37d8f181":"### Overall Accuracy\nThe overall accuracy of the model is <b> 100 % <\/b>","ed0221bc":"#### Optimising for best value of K","d5e5a3c4":"# Iris Classification","f8bd8886":"### KNN model","5df0a09b":"Removing unwnated ID column","914047c4":"### Splitting Data"}}