{"cell_type":{"8aed5b3b":"code","643b4b96":"code","58dae828":"code","431f6535":"code","1ec394a1":"code","bed15ae7":"code","ae113729":"code","0bac19ec":"code","4082eaa1":"code","a5f180fc":"code","e4950f99":"code","7dad81f3":"code","7d8536bf":"code","1ef9207d":"code","e89b1e29":"code","2c88f457":"code","e2743ef6":"code","18b838c9":"code","11e85081":"code","9c632de7":"code","b4a6ee4a":"code","b5adbac8":"code","36b1d31b":"code","6c33b337":"code","106c37c5":"code","4263f0da":"code","33a6c4c6":"code","fe985a39":"code","50d591ac":"code","c4258146":"code","706da06e":"code","05f124b1":"code","28fe1d39":"code","5140a482":"code","5508145e":"code","70152c19":"code","b7d287e2":"code","c06acacd":"code","f73b0801":"code","88fafbcd":"code","364460b6":"code","8503fef0":"code","e28c30b4":"code","2c45947c":"code","f41f5647":"code","19f29a88":"code","6665e400":"code","5d5777ce":"markdown","8dd184f1":"markdown","66704221":"markdown","6999086c":"markdown","d53913a6":"markdown","eb4b7b32":"markdown","254b4069":"markdown","376411a4":"markdown","9fbd22df":"markdown","e3b4068b":"markdown","5a64c373":"markdown","a72ec6c7":"markdown","af28f4af":"markdown","f11b9681":"markdown","dfa1290b":"markdown","24285eb4":"markdown","269e9fe3":"markdown","2cc79930":"markdown","09136af5":"markdown","dd6ec8a3":"markdown","cc41ecda":"markdown","bd745f7c":"markdown","e4d3b6c5":"markdown","b6267689":"markdown","757864da":"markdown","d148e765":"markdown","29d4a4f1":"markdown","8e853196":"markdown","95e3e08c":"markdown","13390ca5":"markdown","b851af3f":"markdown"},"source":{"8aed5b3b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","643b4b96":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","58dae828":"pd.set_option('display.max_columns', None)","431f6535":"df = pd.read_csv(\"\/kaggle\/input\/mobile-price-classification\/train.csv\")\n\ndf.head()\n\ndf.describe()","1ec394a1":"df.head()","bed15ae7":"df.shape","ae113729":"plt.figure(figsize = (17,10))\ncorrmat = df.corr()\nsns.heatmap(corrmat, square = True)\nplt.title('Correlation', fontsize = 20)\nplt.show()","0bac19ec":"#price range correlation\ncorrmat.sort_values(by=[\"price_range\"],ascending=False).iloc[0].sort_values(ascending=False)","4082eaa1":"sns.countplot(x = \"price_range\", data = df)\nplt.show()","a5f180fc":"g = sns.FacetGrid(df, col=\"price_range\", hue=\"price_range\", palette=\"Set1\",height=5\n                   )\ng = (g.map(sns.distplot, \"ram\").add_legend())","e4950f99":"g = sns.FacetGrid(df,hue = 'price_range', height = 10)\ng.map(plt.scatter, 'ram','battery_power',alpha = 0.6)\ng.add_legend()\n","7dad81f3":"plt.figure(figsize = (15,10))\nsns.boxplot(x=\"three_g\", y=\"ram\", hue = \"price_range\", data = df)\nplt.xlabel(\"3-G\", fontsize = 20)\nplt.ylabel(\"RAM\", fontsize = 20)\n\nplt.show()","7d8536bf":"plt.figure(figsize = (15,10))\nsns.boxplot(x=\"four_g\", y=\"ram\", hue = \"price_range\", data = df, palette = \"gnuplot\")\nplt.xlabel(\"4-G\", fontsize = 20)\nplt.ylabel(\"RAM\", fontsize = 20)\n\nplt.show()","1ef9207d":"g = sns.FacetGrid(df,hue = 'price_range', height = 10)\ng.map(plt.scatter, 'ram','int_memory',alpha = 0.6, s = 400)\nplt.xlabel(\"RAM\", fontsize = 20)\nplt.ylabel(\"Internal Memory\", fontsize = 20)\n\ng.add_legend()\nplt.show()\n","e89b1e29":"g = sns.FacetGrid(df, col=\"dual_sim\", hue=\"price_range\", palette=\"Set1\",height=5\n                   )\ng = (g.map(sns.distplot, \"ram\").add_legend())","2c88f457":"g = sns.FacetGrid(df, hue = \"price_range\", height = 5)\ng = (g.map(plt.scatter, \"fc\",\"ram\").add_legend())","e2743ef6":"g = sns.FacetGrid(df, hue = \"price_range\", height = 5)\ng = (g.map(plt.scatter, \"fc\",\"ram\").add_legend())","18b838c9":"df.head()","11e85081":"df.columns","9c632de7":"X = df[['battery_power', 'blue', 'clock_speed', 'dual_sim', 'fc', 'four_g',\n       'int_memory', 'm_dep', 'mobile_wt', 'n_cores', 'pc', 'px_height',\n       'px_width', 'ram', 'sc_h', 'sc_w', 'talk_time', 'three_g',\n       'touch_screen', 'wifi']]\ny = df['price_range']","b4a6ee4a":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42, stratify = y)","b5adbac8":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 70, criterion = 'entropy', random_state = 42)\nclassifier.fit(X_train, y_train)\nclassifier.score(X_test,y_test)","36b1d31b":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 70, criterion = 'gini', random_state = 42)\nclassifier.fit(X_train, y_train)\nclassifier.score(X_test,y_test)","6c33b337":"#feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train_fc = sc.fit_transform(X_train)\nX_test_fc = sc.transform(X_test)","106c37c5":"from sklearn.ensemble import RandomForestClassifier\nclassifier_fe = RandomForestClassifier(n_estimators = 70, criterion = 'gini', random_state = 42)\nclassifier_fe.fit(X_train_fc, y_train)\nclassifier_fe.score(X_test_fc,y_test)","4263f0da":"#making confusion matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier_fe.predict(X_test_fc)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","33a6c4c6":"feature_list = list(df.columns)","fe985a39":"# Get numerical feature importances\nimportances = list(classifier_fe.feature_importances_)\n# List of tuples with variable and importance\nfeature_importances = [(feature, round(importance, 2)) for feature, importance in zip(feature_list, importances)]\n# Sort the feature importances by most important first\nfeature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n# Print out the feature and importances \n[print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances]","50d591ac":"# list of x locations for plotting\nx_values = list(range(len(importances)))\n# Make a bar chart\nplt.bar(x_values, importances, orientation = 'vertical', color = 'r', edgecolor = 'k', linewidth = 1.2)\n# Tick labels for x axis\nplt.xticks(x_values, feature_list, rotation='vertical')\n# Axis labels and title\nplt.ylabel('Importance'); plt.xlabel('Variable'); plt.title('Variable Importances');","c4258146":"# List of features sorted from most to least important\nsorted_importances = [importance[1] for importance in feature_importances]\nsorted_features = [importance[0] for importance in feature_importances]\n# Cumulative importances\ncumulative_importances = np.cumsum(sorted_importances)\n# Make a line graph\nplt.plot(x_values, cumulative_importances, 'g-')\n# Draw line at 95% of importance retained\nplt.hlines(y = 0.95, xmin=0, xmax=len(sorted_importances), color = 'r', linestyles = 'dashed')\n# Format x ticks and labels\nplt.xticks(x_values, sorted_features, rotation = 'vertical')\n# Axis labels and title\nplt.xlabel('Variable'); plt.ylabel('Cumulative Importance'); plt.title('Cumulative Importances');","706da06e":"# Find number of features for cumulative importance of 95%\n# Add 1 because Python is zero-indexed\nprint('Number of features for 95% importance:', np.where(cumulative_importances > 0.95)[0][0] + 1)","05f124b1":"X_modified = df[['battery_power', 'clock_speed', 'fc',\n       'int_memory', 'm_dep', 'mobile_wt', 'n_cores', 'pc', 'px_height',\n       'px_width', 'ram', 'sc_h', 'sc_w', 'talk_time']]","28fe1d39":"from sklearn.model_selection import train_test_split\nX_train_m, X_test_m, y_train_m, y_test_m = train_test_split(X_modified, y, test_size = 0.3, random_state = 42, stratify = y)","5140a482":"#feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train_m = sc.fit_transform(X_train_m)\nX_test_m = sc.transform(X_test_m)","5508145e":"from sklearn.ensemble import RandomForestClassifier\nclassifier_m = RandomForestClassifier(n_estimators = 80, criterion = 'gini', random_state = 42)\nclassifier_m.fit(X_train_m, y_train)\nclassifier_m.score(X_test_m,y_test)","70152c19":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier_m.predict(X_test_m)\ncm_m = confusion_matrix(y_test, y_pred)\nprint(cm_m)\naccuracy_score(y_test, y_pred)","b7d287e2":"sns.heatmap(cm_m, annot = True,fmt='', cmap='Blues')","c06acacd":"# # Performance metrics\n# errors = abs(y_pred - y_test)\n# print('Average absolute error:', round(np.mean(errors), 2), 'degrees.')\n# # Calculate mean absolute percentage error (MAPE)\n# mape = 100 * (errors \/ y_test)\n# # Calculate and display accuracy\n# accuracy = 100 - np.mean(mape)\n# print('Accuracy:', round(accuracy, 2), '%.')","f73b0801":"X = df[['battery_power', 'blue', 'clock_speed', 'dual_sim', 'fc', 'four_g',\n       'int_memory', 'm_dep', 'mobile_wt', 'n_cores', 'pc', 'px_height',\n       'px_width', 'ram', 'sc_h', 'sc_w', 'talk_time', 'three_g',\n       'touch_screen', 'wifi']]\ny = df['price_range']","88fafbcd":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42, stratify = y)","364460b6":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)\nclassifier.score(X_test,y_test)","8503fef0":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm_knn = confusion_matrix(y_test, y_pred)\nprint(cm_knn)\naccuracy_score(y_test, y_pred)","e28c30b4":"sns.heatmap(cm_knn, annot = True,fmt='', cmap='Blues')","2c45947c":"#feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train_fc = sc.fit_transform(X_train)\nX_test_fc = sc.transform(X_test)","f41f5647":"from sklearn.neighbors import KNeighborsClassifier\nclassifier_fc = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier_fc.fit(X_train_fc, y_train)\nclassifier_fc.score(X_test_fc,y_test)","19f29a88":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier_fc.predict(X_test_fc)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","6665e400":"from sklearn.neighbors import KNeighborsClassifier\nclassifier_m_knn = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier_m_knn.fit(X_train_m, y_train)\nclassifier_m_knn.score(X_test_m,y_test)","5d5777ce":"### Random Forest Classification with feature engineering","8dd184f1":"'gini' criterion gives better accuracy of **87.83%** by a small margin.","66704221":"Okay so, only feature scaling will give a bad effect on our model, let's try dropping some unnecessary features now.","6999086c":"### **3G - RAM and Price Range**","d53913a6":"### KNN classification without feature engineering.","eb4b7b32":"There was a slight increase in accuracy after feature engineering, **from 87.83% to 88.50%**.","254b4069":"We will create a correlation plot in order to understand the correlation between the features.","376411a4":"Even after feature scaling the result is **same 87.83%**, now let's try dropping unnecessary columns.","9fbd22df":"### Random Forest Classification without feature engineering","e3b4068b":"Training and evaluating on important features.","5a64c373":"# Prediction Models","a72ec6c7":"By looking at the count of each column its evident that there are no missing values.","af28f4af":"### **Internal Memory - RAM and Price Range**","f11b9681":"After feature engineering we see a great decrement in the accuracy **from 93.33% to 59%**.","dfa1290b":"0 - Not 4G\n\n1- Has 4G","24285eb4":"### **Face Camera Pixels - RAM and Price Range**","269e9fe3":"# Data Visualization","2cc79930":"Our Price Range has strong correlation with RAM.\n\nAlso\n\n* 3G and 4G\n* pc(Primary Camera mega pixels) and fc(Front Camera mega pixels)\n* px_weight(Pixel Resolution Width) and px_height(Pixel Resolution Height)\n* sc_w(Screen Width of mobile in cm) and sc_h(Screen Height of mobile in cm)\n\nfeatures have highly positive correlation. For example as long as sc_w (screen width of mobile) increase, sc_h(screen height of mobile) is increasing.","09136af5":"### **Dual SIM - RAM and Price Range**","dd6ec8a3":"Wow! We already have an accuracy of 93.33% without feature engineering which is better than Random Forest Classification. Now let's see with feature engineering.","cc41ecda":"# Data Analysis","bd745f7c":"0 - Not 3G\n\n1- Has 3G","e4d3b6c5":"This is a positive co - relationship.\n\nThere are 4 types of price range:\n\n* Type 1(low cost): RAM ranges between 0 to 2000 megabytes\n* Type 2(medium cost):  RAM ranges between 0 to 3000 megabytes\n* Type 3(high cost): RAM ranges between 1000 to 4000 megabytes\n* Type 4(very high cost): RAM ranges between 2000 to 4000 megabytes","b6267689":"## KNN Classification","757864da":"### **4G - RAM and Price Range**","d148e765":"### KNN classification with feature engineering.","29d4a4f1":"Training and evaluating for important features.","8e853196":"### **Battery Power - RAM and Price Range**","95e3e08c":"## Random Forest Classification","13390ca5":"Internal Memory has a distinct relationship with RAM and Price Range.","b851af3f":"Now we will drop the least important features."}}