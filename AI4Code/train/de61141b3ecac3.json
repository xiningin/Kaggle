{"cell_type":{"ba3fbb69":"code","bfd734f6":"code","caff4903":"code","8ee68773":"code","3fd6de8c":"code","a70a494c":"code","1cb7cee2":"code","b98c40f2":"code","5126cdb0":"code","f8846c79":"code","0b7ec80d":"code","27cb5087":"code","b7796d32":"code","7b294ca2":"code","56a015e3":"code","5f35e9e1":"code","2d54d626":"code","a84ba0aa":"code","21611ad3":"code","1d9532bd":"code","252cfd6c":"code","5c053807":"code","426d458e":"code","59b6fedf":"code","a549de2f":"code","a2cc1f46":"code","ad01ea00":"code","17ec8ebd":"code","397d6d46":"code","1e9bdd49":"code","c195d534":"code","fb647491":"code","b8d4cdd8":"code","2dc6a57c":"code","85b0c136":"code","07e921c7":"code","156ad39a":"code","dd51f3f0":"code","261ef734":"code","311fad39":"code","cca0fd3a":"code","77eff9a4":"code","907916d9":"code","eeb1f09b":"code","953f8601":"code","9a6eae5d":"code","ad88ddca":"code","0a999220":"code","709713bf":"code","3c77295c":"code","c87d74fa":"code","5b3aca2e":"code","428fa19c":"code","c68358b7":"code","5c6215b6":"code","810e3ebc":"code","560841d9":"code","f0052ecf":"code","815f4f87":"code","c936a458":"code","c7e21689":"code","ab619d09":"code","2e9fbcc6":"code","7c865fd3":"code","287798fb":"code","9c71a591":"code","ca0fb6cd":"code","da5cceaf":"code","f9a65672":"code","9c5c7230":"code","9d7cae2a":"code","913ca3a0":"code","13ba2760":"code","9a86251d":"code","31126f91":"code","7f267eef":"code","0c4bc3c7":"code","87ea2ee0":"code","3fcdba0b":"code","01c00748":"code","f93d13f4":"code","2a6691e8":"code","c9aae02d":"code","465a2b6f":"code","fbdddb9f":"code","756fc1a7":"code","025ba8eb":"code","5708fbfb":"code","8aa644ba":"code","764a8881":"code","2d156c0f":"code","83e28b3d":"code","7bd96a4b":"code","58f7b565":"code","f16f3020":"code","8e3a2801":"code","b94913b1":"code","79b0b7f2":"code","6370bcf5":"code","c607454d":"code","d57c4455":"code","364d024d":"code","f1304c79":"code","5494a654":"code","c0c34d1f":"code","ed8bad5d":"code","6417fc0c":"code","d2dbbd46":"code","2b92552c":"code","a63b37b2":"code","68889fd2":"markdown","646eaa78":"markdown","43570883":"markdown","e6e52674":"markdown","472e55eb":"markdown","e2ea1417":"markdown","40ea5072":"markdown","da1f301e":"markdown","bb38020c":"markdown","80ac6f00":"markdown","fcd9ec75":"markdown","e868d7b8":"markdown","c6ea2ca5":"markdown","bbc02f04":"markdown","1ca61c64":"markdown","c42d663b":"markdown","3655c692":"markdown","5d5b0256":"markdown","1845a9fe":"markdown","7af8ebc2":"markdown","a5962d88":"markdown","b77f6f11":"markdown","fe4686bc":"markdown","90dbd7a3":"markdown","57896230":"markdown","2b97adb4":"markdown","9718923a":"markdown","f71b9536":"markdown","6c4cc1f7":"markdown","e95ddbdd":"markdown","b2f1d782":"markdown","759a1b86":"markdown","83a7a468":"markdown","23bc744c":"markdown","91a12395":"markdown","96e64ed5":"markdown","3597e650":"markdown","5fadecdf":"markdown","7d397d8e":"markdown","932ae1fe":"markdown","2cde0617":"markdown","e0a58bc9":"markdown","0ce46b1c":"markdown","cd7b684f":"markdown","71ac3bfa":"markdown","30e1d2d2":"markdown","145b9dc1":"markdown","b3809448":"markdown","76d4c9af":"markdown","2cc3ff6d":"markdown","de3461d2":"markdown","d02c54e2":"markdown","4578db46":"markdown","4cdd6793":"markdown","94a8eaf1":"markdown","2a1ab152":"markdown","21897f31":"markdown","2631ac99":"markdown","d3be7962":"markdown","6ce40dec":"markdown","aea3add3":"markdown","c760193c":"markdown","751d8c03":"markdown","16fd8511":"markdown","a9feb5d4":"markdown","9154274b":"markdown","326252ab":"markdown","5a693b39":"markdown","a9b55f90":"markdown","a8412898":"markdown","9b85fe76":"markdown"},"source":{"ba3fbb69":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn as sns \n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error, explained_variance_score\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder","bfd734f6":"# loading data:\nPATH = \"\/kaggle\/input\/competitive-data-science-predict-future-sales\/\"\nitems_df = pd.read_csv(PATH+ \"items.csv\")\nitem_categories_df = pd.read_csv(PATH+ \"item_categories.csv\")\nshops_df = pd.read_csv(PATH+ \"shops.csv\")\ntrain_df = pd.read_csv(PATH+ \"sales_train.csv\")\ntest_df = pd.read_csv(PATH+\"test.csv\")","caff4903":"eda_df = train_df.copy(deep=True)","8ee68773":"train_df.head()","3fd6de8c":"items_df.head()","a70a494c":"item_categories_df.head()","1cb7cee2":"shops_df.head()","b98c40f2":"test_df.head()","5126cdb0":"super_set = train_df.merge(items_df,left_on='item_id', right_on='item_id')\nsuper_set = super_set.merge(item_categories_df, left_on='item_category_id', right_on='item_category_id')\nsuper_set = super_set.merge(shops_df, left_on='shop_id', right_on='shop_id')\nsuper_set","f8846c79":"super_set_test = test_df.merge(items_df, left_on='item_id', right_on='item_id')\nsuper_set_test = super_set_test.merge(item_categories_df, left_on='item_category_id', right_on='item_category_id')\nsuper_set_test = super_set_test.merge(shops_df, left_on='shop_id', right_on='shop_id')\nsuper_set_test","0b7ec80d":"train_df.describe()","27cb5087":"eda_df[eda_df['item_price'] <= 0 ]","b7796d32":"eda_df = eda_df[eda_df['item_price'] > 0]","7b294ca2":"fig, ax = plt.subplots(ncols=2,figsize=(20,5))\nsns.boxplot(x='item_price', data=eda_df,ax=ax[0])\nax[1].hist(eda_df['item_price'])\nax[0].set_title('Item_price - Boxplot')\nax[1].set_title('Item_price - Histogram')\nplt.show()","56a015e3":"fig, ax = plt.subplots(ncols=2,figsize=(20,5))\nsns.boxplot(x='item_cnt_day', data=eda_df,ax=ax[0])\nax[1].hist(eda_df['item_cnt_day'])\nax[0].set_title('item_cnt_day - Boxplot')\nax[1].set_title('item_cnt_day - Histogram')\nplt.show()","5f35e9e1":"eda_df[eda_df['item_cnt_day'] < 0].shape","2d54d626":"eda_df[eda_df['item_cnt_day'] == 0].shape","a84ba0aa":"eda_df = eda_df[eda_df['item_cnt_day'] > 0]","21611ad3":"eda_df.shape","1d9532bd":"columns = ['item_cnt_day','item_price']\nfor col in columns:\n    # take 95 percentile # \n    percentile = eda_df[col].quantile(0.99)\n    print(col,percentile)\n    # replace where match # \n    eda_df.loc[eda_df[col] > percentile, col] = percentile","252cfd6c":"eda_df.describe()","5c053807":"fig, ax = plt.subplots(ncols=2,figsize=(20,5))\nsns.boxplot(x='item_cnt_day', data=eda_df,ax=ax[0])\nax[1].hist(eda_df['item_cnt_day'])\nax[0].set_title('item_cnt_day - Boxplot')\nax[1].set_title('item_cnt_day - Histogram')\nplt.show()","426d458e":"fig, ax = plt.subplots(ncols=2,figsize=(20,5))\nsns.boxplot(x='item_price', data=eda_df,ax=ax[0])\nax[1].hist(eda_df['item_price'])\nax[0].set_title('item_price - Boxplot')\nax[1].set_title('item_price - Histogram')\nplt.show()","59b6fedf":"train_df.info()","a549de2f":"eda_df['date'] = pd.to_datetime(eda_df['date'])","a2cc1f46":"eda_df['date'].head()","ad01ea00":"eda_df['Month'] = eda_df['date'].dt.month\neda_df['Year'] = eda_df['date'].dt.year","17ec8ebd":"train_df.isnull().sum()","397d6d46":"print('Total Shops - Training: ',len(train_df['shop_id'].unique()))\nprint('Total Shops - testing: ',len(test_df['shop_id'].unique()))","1e9bdd49":"test_df[~test_df['shop_id'].isin(train_df['shop_id'].unique().tolist())]","c195d534":"print('Total Products - Training: ',len(train_df['item_id'].unique()))\nprint('Total Products - Testing:',len(test_df['item_id'].unique()))","fb647491":"len(test_df[~test_df['item_id'].isin(train_df['item_id'].unique().tolist())]['item_id'].unique().tolist())","b8d4cdd8":"print('Total item categories - Training: ',len(super_set['item_category_id'].unique()))\nprint('Total item categories - Testing: ',len(super_set_test['item_category_id'].unique()))","2dc6a57c":"train_df","85b0c136":"len(super_set_test[~super_set_test['item_category_id'].isin(super_set['item_category_id'].unique().tolist())]['item_category_id'].unique().tolist())","07e921c7":"frq_prod = train_df['item_id'].value_counts().head().index.tolist()\nfrq_prod","156ad39a":"shops = train_df['shop_id'].sample(10).unique().tolist()\nshops","dd51f3f0":"sample_data = eda_df[(eda_df['shop_id'].isin(shops)) & (eda_df['item_id'].isin(frq_prod)) ]","261ef734":"item_price_stats = sample_data.groupby(by=['item_id', 'shop_id'])['item_price'].agg([\n    'sum', 'min','max','mean','median','std']).reset_index()\nitem_price_stats.head()","311fad39":"metrics = ['mean', 'median','sum', 'min', 'max', 'std']","cca0fd3a":"fig, ax = plt.subplots(nrows=2, ncols=3, figsize=(20,10))\nfor i in range(0,6):\n    sns.barplot(x='item_id', y=metrics[i],hue='shop_id', data=item_price_stats,ax=ax[0 if i <= 2 else 1,i if i <= 2 else i - 3 ])\n    ax[0 if i <= 2 else 1,i if i <= 2 else i - 3 ].set_title('Same product on different shops --'+metrics[i])\nplt.show()","77eff9a4":"eda_df['month'] = pd.to_datetime(eda_df['date']).dt.month\neda_df['year'] = pd.to_datetime(eda_df['date']).dt.year","907916d9":"agg_train_df = eda_df.groupby(by=['month','year','shop_id', 'item_id']).agg({'item_price':'mean', 'item_cnt_day':'sum'}).reset_index()","eeb1f09b":"agg_train_df","953f8601":"agg_train_df.describe()","9a6eae5d":"fig, ax = plt.subplots(ncols=2,figsize=(20,5))\nsns.boxplot(x='item_price', data=agg_train_df,ax=ax[0])\nax[1].hist(eda_df['item_price'])\nax[0].set_title('item_price - Boxplot')\nax[1].set_title('item_price - Histogram')\nplt.show()","ad88ddca":"fig, ax = plt.subplots(ncols=2,figsize=(20,5))\nsns.boxplot(x='item_cnt_day', data=agg_train_df,ax=ax[0])\nax[1].hist(eda_df['item_cnt_day'])\nax[0].set_title('item_cnt_day - Boxplot')\nax[1].set_title('item_cnt_day - Histogram')\nplt.show()","0a999220":"agg_train_df.groupby(by=['item_id']).agg({'item_price':'std'}).fillna(0).plot(figsize=(10,5),title='Variation in price')\nplt.show()","709713bf":"agg_train_df.groupby(by=['item_id']).agg({'item_cnt_day':'std'}).fillna(0).plot(figsize=(10,5),title='Variation in sales')\nplt.show()","3c77295c":"temp = agg_train_df.groupby(by=['item_id']).agg({'item_cnt_day':'std','item_price':'std'}).fillna(0)","c87d74fa":"from sklearn.preprocessing import MinMaxScaler","5b3aca2e":"scaler = MinMaxScaler()\nscaler.fit(temp)\ntemp_scaled = scaler.transform(temp)","428fa19c":"pd.DataFrame(temp_scaled).corr()","c68358b7":"temp = agg_train_df.groupby(by=['item_id','shop_id']).agg({'item_cnt_day':'std','item_price':'std'}).fillna(0)","5c6215b6":"temp","810e3ebc":"temp.corr()","560841d9":"temp = agg_train_df.groupby(by=['item_id','shop_id','month']).agg({'item_cnt_day':'std','item_price':'std'}).fillna(0)","f0052ecf":"temp.corr()","815f4f87":"fig, ax = plt.subplots(figsize=(10,5))\nagg = agg_train_df.groupby(by=['year'])['item_cnt_day'].sum().reset_index()\nsns.barplot(x='year', y='item_cnt_day', data=agg)\nplt.title('Yearly Trend')\nplt.show()","c936a458":"fig, ax = plt.subplots(figsize=(10,5))\nagg = agg_train_df.groupby(by=['month'])['item_cnt_day'].sum().reset_index()\nsns.barplot(x='month', y='item_cnt_day', data=agg)\nplt.title('month Trend')\nplt.show()","c7e21689":"temp = agg_train_df.copy(deep=True)\ntemp['year_month'] = temp[['year','month']].apply(lambda x: str(x.year)+'-'+str(x.month),axis=1)","ab619d09":"fig, ax = plt.subplots(figsize=(20,5))\nagg = temp.groupby(by=['year_month'])['item_cnt_day'].sum().reset_index()\nagg['year'] = agg['year_month'].apply(lambda x: int(x.split('-')[0]))\nagg['month'] = agg['year_month'].apply(lambda x: int(x.split('-')[1]))\nagg = agg.sort_values(by=['year','month']).reset_index(drop=True)\nsns.barplot(x='year_month', y='item_cnt_day', data=agg)\nplt.title('Year-Month Trend')\nplt.xticks(rotation=90)\nplt.show()","2e9fbcc6":"agg = agg_train_df.groupby(by=['year'])['item_price'].mean().reset_index()\nfig, ax = plt.subplots(figsize=(10,5))\nsns.barplot(x='year', y='item_price', data=agg)\nplt.title('Year-Month Trend')\nplt.ylabel('Average Price of Item')\nplt.xticks(rotation=90)\nplt.show()","7c865fd3":"agg_train_df.groupby(by=['year']).agg({'item_cnt_day':'sum', 'item_price':'mean'}).corr()","287798fb":"agg_sales = eda_df.groupby(by=['shop_id'])['item_cnt_day'].sum().reset_index().sort_values(by=['item_cnt_day'],\n                                                                                     ascending=False)\nfig, ax = plt.subplots(figsize=(20,5))\nsns.barplot(x='shop_id', y='item_cnt_day', data=agg_sales,order=agg_sales.index)\nax.set_title('Sales of Shops')\nplt.show()","9c71a591":"agg_items = eda_df.groupby(by=['shop_id'])['item_id'].unique().apply(lambda x: len(x)).reset_index().rename(columns=\n                                {\"item_id\":'Total Items'}).reset_index().sort_values(by=['Total Items'],\n                                                                                      ascending=False)","ca0fb6cd":"#Create combo chart\nfig, ax1 = plt.subplots(figsize=(20,6))\ncolor = 'tab:green'\n#bar plot creation\nax1.set_title('Total Items Vs Sales of Shop', fontsize=16)\nax1.set_xlabel('shop_id', fontsize=16)\nax1.set_ylabel('Sales', fontsize=16)\nax1 = sns.lineplot(x='shop_id', y='item_cnt_day', data=agg_sales, palette='summer')\nax1.tick_params(axis='y')\nplt.legend(['Sales'])\n#specify we want to share the same x-axis\nax2 = ax1.twinx()\ncolor = 'tab:red'\n#line plot creation\nax2.set_ylabel('Total Items', fontsize=16)\nax2 = sns.lineplot(x='shop_id', y='Total Items', data = agg_items, color=color)\nax2.tick_params(axis='y', color=color)\n#show plot\nplt.legend(['Total Items'])\nplt.show()","da5cceaf":"agg_train_df.groupby(by=['shop_id']).agg({'item_cnt_day':'sum','item_price':'std'}).fillna(0).corr()","f9a65672":"agg_train_df.groupby(by=['shop_id']).agg({'item_cnt_day':'sum','item_price':'mean'}).fillna(0).corr()","9c5c7230":"temp = agg_train_df.groupby(by=['shop_id']).agg({'item_cnt_day':'mean'}).reset_index()\ntemp = temp.merge(agg_items, left_on='shop_id', right_on='shop_id')\ntemp = temp[['item_cnt_day','Total Items']]","9d7cae2a":"temp.corr()","913ca3a0":"super_set['item_category_name'].value_counts()","13ba2760":"def spliter(x):\n    try:\n        return x.split(' - ')[1]\n    except:\n        return ''","9a86251d":"super_set['item_short_category'] = super_set['item_category_name'].apply(spliter)","31126f91":"mapping_categories = super_set[['item_id','item_short_category']]","7f267eef":"mapping_categories = mapping_categories.drop_duplicates()","0c4bc3c7":"agg_train_df = agg_train_df.merge(mapping_categories, left_on='item_id', right_on='item_id')","87ea2ee0":"agg_train_df.head(2)","3fcdba0b":"fig, ax = plt.subplots(figsize=(10,15))\nsns.boxplot(y='item_short_category', x='item_cnt_day', data=agg_train_df)","01c00748":"from scipy.stats import f_oneway","f93d13f4":"sample_categories = agg_train_df['item_short_category'].value_counts().head(5).index.tolist()\nsample = agg_train_df[agg_train_df['item_short_category'].isin(sample_categories)]","2a6691e8":"cache = []\nfor category in sample_categories:\n    cache.append(sample[sample['item_short_category']==category]['item_cnt_day'].values.tolist())","c9aae02d":"f_oneway(cache[0],cache[1],cache[2],cache[3],cache[4])","465a2b6f":"agg_train_df","fbdddb9f":"prod_shop_variance = agg_train_df.groupby(by=['shop_id','item_id']).agg({'item_price':'std'}).fillna(0).reset_index()\nprod_shop_variance['Key'] = prod_shop_variance[['shop_id','item_id']].apply(lambda x: str(x.shop_id)+'-'+str(x.item_id), axis=1)","756fc1a7":"prod_shop_variance = prod_shop_variance.rename(columns={'item_price':'price_variance'})\nprod_shop_variance = prod_shop_variance[['Key','price_variance']]\nprod_shop_variance.head()","025ba8eb":"prod_shop_mean = agg_train_df.groupby(by=['shop_id','item_id']).agg({'item_price':'mean'}).fillna(0).reset_index()\nprod_shop_mean['Key'] = prod_shop_mean[['shop_id','item_id']].apply(lambda x: str(x.shop_id)+'-'+str(x.item_id), axis=1)","5708fbfb":"prod_shop_mean.head(2)","8aa644ba":"prod_shop_mean = prod_shop_mean.rename(columns={'item_price':'price_mean'})\nprod_shop_mean = prod_shop_mean[['Key','price_mean']]\nprod_shop_mean.head()","764a8881":"total_item_shop = agg_train_df.groupby(by=['shop_id'])['item_id'].unique().apply(lambda x: len(x)).reset_index().rename(\n    columns={\"item_id\":'Total Items'})","2d156c0f":"total_item_shop.head(2)","83e28b3d":"agg_train_df_copy = agg_train_df.copy(deep=True)","7bd96a4b":"agg_train_df.head(2)","58f7b565":"agg_train_df['Key'] = agg_train_df[['shop_id','item_id']].apply(lambda x: str(x.shop_id)+'-'+str(x.item_id), axis=1)","f16f3020":"agg_train_df = agg_train_df.merge(prod_shop_variance, left_on='Key', right_on='Key')\nagg_train_df = agg_train_df.merge(prod_shop_mean, left_on='Key', right_on='Key')\nagg_train_df = agg_train_df.merge(total_item_shop, left_on='shop_id', right_on='shop_id')\n","8e3a2801":"agg_train_df","b94913b1":"agg_train_df.drop(['Key'],axis=1, inplace=True)\nagg_train_df.drop(['item_short_category'],axis=1, inplace=True)","79b0b7f2":"temp = agg_train_df.groupby(by=['year'])['item_price'].mean()","6370bcf5":"agg_train_df['yearly_avg_price'] = agg_train_df['year'].apply(lambda x: temp[x])","c607454d":"le = LabelEncoder()","d57c4455":"agg_train_df['price_variance'] = le.fit_transform(agg_train_df['price_variance'])\nagg_train_df['price_mean'] = le.fit_transform(agg_train_df['price_mean'])\nagg_train_df['item_price'] = le.fit_transform(agg_train_df['item_price'])\nagg_train_df['Total Items'] = le.fit_transform(agg_train_df['Total Items'])","364d024d":"agg_train_df","f1304c79":"agg_train_df['year'] = agg_train_df['year'].apply(lambda x: str(x)) ","5494a654":"data_for_model = pd.get_dummies(agg_train_df, drop_first=True)","c0c34d1f":"data_for_model","ed8bad5d":"X = data_for_model.drop(['item_cnt_day'], axis=1)\ny = data_for_model['item_cnt_day']","6417fc0c":"train_X, test_X, train_Y, test_Y = train_test_split(X,y)","d2dbbd46":"# scaler = StandardScaler()\n# train_X = scaler.fit_transform(train_X)\n# test_X = scaler.transform(test_X)","2b92552c":"train_X","a63b37b2":"models = [LinearRegression, RandomForestRegressor, XGBRegressor]\nmodels_name = ['LinearRegression', 'RandomForestRegressor', 'XGBRegressor']\nmodel_cache ={}\n\nfor i,model in enumerate(models): \n    \n    # 01.  train model #\n    ml_model = model()\n    ml_model.fit(train_X, train_Y)\n    model_cache[models_name[i]] = ml_model\n    # 02. Predict # \n    predictions = ml_model.predict(test_X)\n    # 03 Evaluate # \n    print('--------------------*---------------------------')\n    print('Model: ', str(model).split('_')[-1])\n    print('Mean Absolute Error: ',mean_absolute_error(test_Y, predictions))\n    print('Explained Variance: ',explained_variance_score(test_Y, predictions))","68889fd2":"Datatypes: ","646eaa78":"Sample of Shops:","43570883":"Monthly Trend: ","e6e52674":"v. Average Price - Yearly basis: ","472e55eb":"#### 01. Shop Analysis: ","e2ea1417":"__Comments__:\n\n- Price of product seems to have linear relation with sales of products. ","40ea5072":"iv. Mismatch of items between test & train data: ","da1f301e":"__Comments__:\n\ni. `item_price` for same `item_id` vary based on `shop_id`. \n\nii. In fact on each shop there is a variation within price of same product. - Maybe in price vary based on month -- Lets check that. \n\niii. Maximum price sugest that same product was sold as low as somewhere between 3,000 and high as 6,000 -- Seems like a bit of variation in price.","bb38020c":"i. Distribution of item price: ","80ac6f00":"Basic Statistics: ","fcd9ec75":"## 02. First Look: ","e868d7b8":"Checking Now.","c6ea2ca5":"__Comments__:\n\n- Sales negatively impact by variation in price but that impact quite minimal. ","bbc02f04":"iv. Having a lower average value of product on specific shop can really increase sales?","1ca61c64":"------------------","c42d663b":"Negative `Item_price` :","3655c692":"i. No of shops: ","5d5b0256":"## 01: Imports  & Data Load: ","1845a9fe":"Five Number Summary: ","7af8ebc2":"__Comments__: \n\n- Shops have varying prices for various products which in result impact sales. Slightly improved correlation when added shop id in to the data. ","a5962d88":"Convert Dataypes: ","b77f6f11":"iii. No of Products: ","fe4686bc":"__Comments__:\n\n- Seesm like having more items can actually increase sales. ","90dbd7a3":"__Comments:__\n\n- All item categories of train data appear in test data - no surprise  ","57896230":"Extreme Values `Item_cnt_day`: ","2b97adb4":"vi. Mismatch of items category between test & train data: ","9718923a":"v. Adding timeline: ","f71b9536":"iii. Variation in sales of products: ","6c4cc1f7":"#### 02. Item Category Analysis: ","e95ddbdd":"Mapping Item Category to our monthly sales dataset: ","b2f1d782":"## 03. Deep Dive: ","759a1b86":"ii. Having more products translate to more sales? ","83a7a468":"vii. Will price of each product will vary based on shop id?","23bc744c":"Extreme `Item Price`: ","91a12395":"v. Having a variety of product on each shop can really contribute to more sales? ","96e64ed5":"__Learning__: \n\n- Correlation is independent of scale so transformation before correlation doesn't help.","3597e650":"iv. mapping data: ","5fadecdf":"## To be continue.","7d397d8e":"iii. Variation in price of products: ","932ae1fe":"Make a copy of data:","2cde0617":"__Comments:__\n\ni. `item_cnt_day` & `item_price` have extreme values - probably outliers. \n\nii. `item_price` has negative value which doesn't make sense -- probably incorrect data.\n\niii. `item_cnt_day` is negative - suggest return of item. - will remove these entries. ","e0a58bc9":"__Comments__:\n\ni. Only one such product (item price < 0) - remove it. ","0ce46b1c":"i. Whether there is any relation between item category & its sales? ","cd7b684f":"## 04. Data Prep For Model: ","71ac3bfa":"iii. Total Items per shop: ","30e1d2d2":"__Comments__: \n\n- Seems like having more items translate to more sales. ","145b9dc1":"Yearly Trend: ","b3809448":"iii. How variation in price impact sales of product? ","76d4c9af":"v. No of Item Categories: ","2cc3ff6d":"Remove `return item` (`item_cnt_day` < 0 )  ","de3461d2":"-----------------------------------------------------------","d02c54e2":"ii. Mismatch of shops between train & test dataset: ","4578db46":"## 05. Model Training & Evaluation: ","4cdd6793":"Take a look few rows: ","94a8eaf1":"__Comments:__\n\n- 363 products not part of training data but appear in test data. ","2a1ab152":"__Comments__:\n\n- Sales have inverse relation with average value of product on a specific shop - if average product price low it could attract more people hence more sales. ","21897f31":"vi. Clipping data into decrete boundaries: ","2631ac99":"i. Shops Sales Trend: ","d3be7962":"__Comments__: \n\n- Took 5 categories as sample to run an anova test. It seems like category of the item has some relation to the sales. - Not sure if its positive or negative. ","6ce40dec":"ii. Average price of specific product on specific shop:","aea3add3":"Setting 99% percentile to extreme values: ","c760193c":"__comments__:\n\n- Shops training data also appearing in test data - there is no surprise in case of shops.","751d8c03":"Year-Monthly Trend: ","16fd8511":"Lets convert daily sales into monthly sales:","a9feb5d4":"i. Price variance of specific product on specific shop: ","9154274b":"Mean Price of Products: ","326252ab":"__Comments__: \n    \n- Variation in price is not impacting significantly to sales of the product. ","5a693b39":"ii. Distribution of items sold on monthly basis:","a9b55f90":"iv. Adding shops: ","a8412898":"Missing Values: ","9b85fe76":"Take few most frequent products: "}}