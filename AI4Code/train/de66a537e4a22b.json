{"cell_type":{"e83edad9":"code","e8744740":"code","9d5f41d7":"code","dbd1274c":"code","3e23a5c7":"code","55a11504":"code","eb572e0d":"code","9d24dec8":"code","2e31959c":"code","ad7d3204":"code","6503ae53":"markdown","114a4e25":"markdown","a16f5d9a":"markdown","a76f2d88":"markdown","8c1640b3":"markdown","5e7d27c3":"markdown","f98d3665":"markdown","3a591869":"markdown","9f810cab":"markdown","4eeadea1":"markdown"},"source":{"e83edad9":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n","e8744740":"\ndataset = pd.read_csv('..\/input\/social-network-data\/Social_Network_Ads.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","9d5f41d7":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)","dbd1274c":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)","3e23a5c7":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)\n","55a11504":"print(classifier.predict(sc.transform([[30,87000]])))","eb572e0d":"y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","9d24dec8":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","2e31959c":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 1),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 1))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('K-NN (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","ad7d3204":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_test), y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 1),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 1))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('K-NN (Test set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","6503ae53":"# **Visualising the Training set results**","114a4e25":"# **Making the Confusion Matrix**","a16f5d9a":"# **Splitting the dataset into the Training set and Test set**","a76f2d88":"# **Importing the dataset** \n","8c1640b3":"# **Importing the libraries**","5e7d27c3":"# **Predicting a new result**","f98d3665":"# **# Training the K-NN model on the Training set**","3a591869":"# **Predicting the Test set results**","9f810cab":"# **Feature Scaling**","4eeadea1":"# **Visualising the Test set results**"}}