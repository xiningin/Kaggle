{"cell_type":{"563c6968":"code","498737fe":"code","c7965c23":"code","ed92bcfd":"code","0f6b2a31":"code","290c473d":"code","1c6ed20b":"code","0bf5328d":"code","42a655b9":"code","453fa910":"code","590464a7":"code","7f32dfe4":"code","c0c5dd72":"code","f7d7db26":"code","30272141":"code","42ea407b":"code","6932e488":"code","a9880656":"code","a192eea6":"code","12f43355":"code","fa3f1092":"code","cb0d1106":"code","f13041c7":"code","e1ef4abd":"code","20974187":"code","19fcef6d":"code","11858033":"code","c6f91920":"code","f1bb8465":"code","91271ac0":"code","63c6e6ab":"code","af5ab4a1":"code","9619ab16":"code","44b7ea62":"markdown","9df0f613":"markdown","f5ed669e":"markdown","34fd9b89":"markdown","a07daaca":"markdown","5d182c4e":"markdown","c1ccdd21":"markdown","2874572a":"markdown","de909d22":"markdown","314cd95f":"markdown","56b49ad4":"markdown","778e2b44":"markdown","ebec54b0":"markdown","1d6de3f4":"markdown","4e970d24":"markdown","153eb76a":"markdown","b1696464":"markdown","9724c644":"markdown","5ef4e32b":"markdown","f6178d4a":"markdown","563aa58b":"markdown","887e90e0":"markdown","6ef52c38":"markdown","f688b95d":"markdown","3e6d2eb7":"markdown","9dbcc6fb":"markdown","42ed4f1f":"markdown","e295dc03":"markdown","88b796ab":"markdown","5ad98344":"markdown","53a82b78":"markdown"},"source":{"563c6968":"!pip install -q imagesize\n!pip install -qU wandb\n!add-apt-repository ppa:ubuntu-toolchain-r\/test -y\n!apt-get update\n!apt-get upgrade libstdc++6 -y","498737fe":"from itertools import groupby\nimport numpy as np\nfrom tqdm.notebook import tqdm\ntqdm.pandas()\nimport pandas as pd\nimport os\nimport pickle\nimport cv2\nfrom multiprocessing import Pool\nimport matplotlib.pyplot as plt\n# import cupy as cp\nimport ast\nimport glob","c7965c23":"import shutil\nimport sys\nsys.path.append('..\/input\/tensorflow-great-barrier-reef')\n\nfrom joblib import Parallel, delayed\nimport imagesize","ed92bcfd":"FOLD      = 6 # which fold to train\nREMOVE_NOBBOX = True # \u5220\u9664\u6ca1\u6709 bbox \u7684\u56fe\u50cf\nROOT_DIR  = '\/kaggle\/input\/tensorflow-great-barrier-reef\/'\nIMAGE_DIR = '\/kaggle\/images' # \u4fdd\u5b58\u56fe\u7247\u7684\u76ee\u5f55\nLABEL_DIR = '\/kaggle\/labels' # \u4fdd\u5b58\u6807\u7b7e\u7684\u76ee\u5f55","0f6b2a31":"!mkdir -p {IMAGE_DIR}\n!mkdir -p {LABEL_DIR}","290c473d":"def get_path(row):\n    row['old_image_path'] = f'{ROOT_DIR}\/train_images\/video_{row.video_id}\/{row.video_frame}.jpg'\n    row['image_path'] = f'{IMAGE_DIR}\/video_{row.video_id}_{row.video_frame}.jpg'\n    row['label_path'] = f'{LABEL_DIR}\/video_{row.video_id}_{row.video_frame}.txt'\n    return row","1c6ed20b":"# Train Data\ndf = pd.read_csv(f'{ROOT_DIR}\/train.csv')\ndf = df.progress_apply(get_path, axis=1)\ndf['annotations'] = df['annotations'].progress_apply(lambda x: ast.literal_eval(x))\ndisplay(df.head(2))","0bf5328d":"df['num_bbox'] = df['annotations'].progress_apply(lambda x: len(x))\ndata = (df.num_bbox>0).value_counts(normalize=True)*100\nprint(f\"No BBox: {data[0]:0.2f}% | With BBox: {data[1]:0.2f}%\")","42a655b9":"if REMOVE_NOBBOX:\n    df = df.query(\"num_bbox>0\")","453fa910":"def make_copy(path):\n    data = path.split('\/')\n    filename = data[-1]\n    video_id = data[-2]\n    new_path = os.path.join(IMAGE_DIR,f'{video_id}_{filename}')\n    shutil.copy(path, new_path)\n    return","590464a7":"image_paths = df.old_image_path.tolist()\n_ = Parallel(n_jobs=-1, backend='threading')(delayed(make_copy)(path) for path in tqdm(image_paths))","7f32dfe4":"def voc2yolo(image_height, image_width, bboxes):\n    \"\"\"\n    voc  => [x1, y1, x2, y1]\n    yolo => [xmid, ymid, w, h] (normalized)\n    \"\"\"\n    \n    bboxes = bboxes.copy().astype(float) # otherwise all value will be 0 as voc_pascal dtype is np.int\n    \n    bboxes[..., [0, 2]] = bboxes[..., [0, 2]]\/ image_width\n    bboxes[..., [1, 3]] = bboxes[..., [1, 3]]\/ image_height\n    \n    w = bboxes[..., 2] - bboxes[..., 0]\n    h = bboxes[..., 3] - bboxes[..., 1]\n    \n    bboxes[..., 0] = bboxes[..., 0] + w\/2\n    bboxes[..., 1] = bboxes[..., 1] + h\/2\n    bboxes[..., 2] = w\n    bboxes[..., 3] = h\n    \n    return bboxes\n\ndef yolo2voc(image_height, image_width, bboxes):\n    \"\"\"\n    yolo => [xmid, ymid, w, h] (normalized)\n    voc  => [x1, y1, x2, y1]\n    \n    \"\"\" \n    bboxes = bboxes.copy().astype(float) # otherwise all value will be 0 as voc_pascal dtype is np.int\n    \n    bboxes[..., [0, 2]] = bboxes[..., [0, 2]]* image_width\n    bboxes[..., [1, 3]] = bboxes[..., [1, 3]]* image_height\n    \n    bboxes[..., [0, 1]] = bboxes[..., [0, 1]] - bboxes[..., [2, 3]]\/2\n    bboxes[..., [2, 3]] = bboxes[..., [0, 1]] + bboxes[..., [2, 3]]\n    \n    return bboxes\n\ndef coco2yolo(image_height, image_width, bboxes):\n    \"\"\"\n    coco => [xmin, ymin, w, h]\n    yolo => [xmid, ymid, w, h] (normalized)\n    \"\"\"\n    \n    bboxes = bboxes.copy().astype(float) # otherwise all value will be 0 as voc_pascal dtype is np.int\n    \n    # normolizinig\n    bboxes[..., [0, 2]]= bboxes[..., [0, 2]]\/ image_width\n    bboxes[..., [1, 3]]= bboxes[..., [1, 3]]\/ image_height\n    \n    # converstion (xmin, ymin) => (xmid, ymid)\n    bboxes[..., [0, 1]] = bboxes[..., [0, 1]] + bboxes[..., [2, 3]]\/2\n    \n    return bboxes\n\ndef yolo2coco(image_height, image_width, bboxes):\n    \"\"\"\n    yolo => [xmid, ymid, w, h] (normalized)\n    coco => [xmin, ymin, w, h]\n    \n    \"\"\" \n    bboxes = bboxes.copy().astype(float) # otherwise all value will be 0 as voc_pascal dtype is np.int\n    \n    # denormalizing\n    bboxes[..., [0, 2]]= bboxes[..., [0, 2]]* image_width\n    bboxes[..., [1, 3]]= bboxes[..., [1, 3]]* image_height\n    \n    # converstion (xmid, ymid) => (xmin, ymin) \n    bboxes[..., [0, 1]] = bboxes[..., [0, 1]] - bboxes[..., [2, 3]]\/2\n    \n    return bboxes\n\n\ndef load_image(image_path):\n    return cv2.cvtColor(cv2.imread(image_path), cv2.COLOR_BGR2RGB)\n\n\ndef plot_one_box(x, img, color=None, label=None, line_thickness=None):\n    # Plots one bounding box on image img\n    tl = line_thickness or round(0.002 * (img.shape[0] + img.shape[1]) \/ 2) + 1  # line\/font thickness\n    color = color or [random.randint(0, 255) for _ in range(3)]\n    c1, c2 = (int(x[0]), int(x[1])), (int(x[2]), int(x[3]))\n    cv2.rectangle(img, c1, c2, color, thickness=tl, lineType=cv2.LINE_AA)\n    if label:\n        tf = max(tl - 1, 1)  # font thickness\n        t_size = cv2.getTextSize(label, 0, fontScale=tl \/ 3, thickness=tf)[0]\n        c2 = c1[0] + t_size[0], c1[1] - t_size[1] - 3\n        cv2.rectangle(img, c1, c2, color, -1, cv2.LINE_AA)  # filled\n        cv2.putText(img, label, (c1[0], c1[1] - 2), 0, tl \/ 3, [225, 255, 255], thickness=tf, lineType=cv2.LINE_AA)\n\ndef draw_bboxes(img, bboxes, classes, class_ids, colors = None, show_classes = None, bbox_format = 'yolo', class_name = False, line_thickness = 2):  \n     \n    image = img.copy()\n    show_classes = classes if show_classes is None else show_classes\n    colors = (0, 255 ,0) if colors is None else colors\n    \n    if bbox_format == 'yolo':\n        \n        for idx in range(len(bboxes)):  \n            \n            bbox  = bboxes[idx]\n            cls   = classes[idx]\n            cls_id = class_ids[idx]\n            color = colors[cls_id] if type(colors) is list else colors\n            \n            if cls in show_classes:\n            \n                x1 = round(float(bbox[0])*image.shape[1])\n                y1 = round(float(bbox[1])*image.shape[0])\n                w  = round(float(bbox[2])*image.shape[1]\/2) #w\/2 \n                h  = round(float(bbox[3])*image.shape[0]\/2)\n\n                voc_bbox = (x1-w, y1-h, x1+w, y1+h)\n                plot_one_box(voc_bbox, \n                             image,\n                             color = color,\n                             label = cls if class_name else str(get_label(cls)),\n                             line_thickness = line_thickness)\n            \n    elif bbox_format == 'coco':\n        \n        for idx in range(len(bboxes)):  \n            \n            bbox  = bboxes[idx]\n            cls   = classes[idx]\n            cls_id = class_ids[idx]\n            color = colors[cls_id] if type(colors) is list else colors\n            \n            if cls in show_classes:            \n                x1 = int(round(bbox[0]))\n                y1 = int(round(bbox[1]))\n                w  = int(round(bbox[2]))\n                h  = int(round(bbox[3]))\n\n                voc_bbox = (x1, y1, x1+w, y1+h)\n                plot_one_box(voc_bbox, \n                             image,\n                             color = color,\n                             label = cls if class_name else str(cls_id),\n                             line_thickness = line_thickness)\n\n    elif bbox_format == 'voc_pascal':\n        \n        for idx in range(len(bboxes)):  \n            \n            bbox  = bboxes[idx]\n            cls   = classes[idx]\n            cls_id = class_ids[idx]\n            color = colors[cls_id] if type(colors) is list else colors\n            \n            if cls in show_classes: \n                x1 = int(round(bbox[0]))\n                y1 = int(round(bbox[1]))\n                x2 = int(round(bbox[2]))\n                y2 = int(round(bbox[3]))\n                voc_bbox = (x1, y1, x2, y2)\n                plot_one_box(voc_bbox, \n                             image,\n                             color = color,\n                             label = cls if class_name else str(cls_id),\n                             line_thickness = line_thickness)\n    else:\n        raise ValueError('wrong bbox format')\n\n    return image\n\ndef get_bbox(annots):\n    bboxes = [list(annot.values()) for annot in annots]\n    return bboxes\n\ndef get_imgsize(row):\n    row['width'], row['height'] = imagesize.get(row['image_path'])\n    return row\n\nnp.random.seed(32)\ncolors = [(np.random.randint(255), np.random.randint(255), np.random.randint(255))\\\n          for idx in range(1)]","c0c5dd72":"df['bboxes'] = df.annotations.progress_apply(get_bbox)\ndf.head(2)","f7d7db26":"df = df.progress_apply(get_imgsize,axis=1)\ndisplay(df.width.unique(), df.height.unique())\ndisplay(df.head(2))","30272141":"cnt = 0\nall_bboxes = []\nfor row_idx in tqdm(range(df.shape[0])):\n    row = df.iloc[row_idx]\n    image_height = row.height\n    image_width  = row.width\n    bboxes_coco  = np.array(row.bboxes).astype(np.float32).copy()\n    num_bbox     = len(bboxes_coco)\n    names        = ['cots']*num_bbox\n    labels       = [0]*num_bbox\n    ## Create Annotation(YOLO)\n    with open(row.label_path, 'w') as f:\n        if num_bbox<1:\n            annot = ''\n            f.write(annot)\n            cnt+=1\n            continue\n        bboxes_yolo  = coco2yolo(image_height, image_width, bboxes_coco)\n        bboxes_yolo  = np.clip(bboxes_yolo, 0, 1)\n        all_bboxes.extend(bboxes_yolo)\n        for bbox_idx in range(len(bboxes_yolo)):\n            annot = [str(labels[bbox_idx])]+ list(bboxes_yolo[bbox_idx].astype(str))+(['\\n'] if num_bbox!=(bbox_idx+1) else [''])\n            annot = ' '.join(annot)\n            annot = annot.strip(' ')\n            f.write(annot)\nprint('Missing:',cnt)","42ea407b":"#x_center Vs y_center\nfrom scipy.stats import gaussian_kde\n\nall_bboxes = np.array(all_bboxes)\n\nx_val = all_bboxes[...,0]\ny_val = all_bboxes[...,1]\n\n# Calculate the point density\nxy = np.vstack([x_val,y_val])\nz = gaussian_kde(xy)(xy)\n\nfig, ax = plt.subplots(figsize = (10, 10))\nax.axis('off')\nax.scatter(x_val, y_val, c=z, s=100, cmap='viridis')\n# ax.set_xlabel('x_mid')\n# ax.set_ylabel('y_mid')\nplt.show()\n","6932e488":"#width Vs height\nx_val = all_bboxes[...,2]\ny_val = all_bboxes[...,3]\n\n# \u8ba1\u7b97\u70b9\u5bc6\u5ea6\nxy = np.vstack([x_val,y_val])\nz = gaussian_kde(xy)(xy)\n\nfig, ax = plt.subplots(figsize = (10, 10))\nax.axis('off')\nax.scatter(x_val, y_val, c=z, s=100, cmap='viridis')\n# ax.set_xlabel('bbox_width')\n# ax.set_ylabel('bbox_height')\nplt.show()","a9880656":"#Area\nimport seaborn as sns\nsns.set(style='white')\nareas = all_bboxes[...,2]*all_bboxes[...,3]*720*1280\nplt.figure(figsize=(12,8))\nsns.kdeplot(areas,shade=True,palette='viridis')\nplt.axis('OFF')\nplt.show()","a192eea6":"df2 = df[(df.num_bbox>0)].sample(100) # takes samples with bbox\nfor idx in range(10):\n    row = df2.iloc[idx]\n    img           = load_image(row.image_path)\n    image_height  = row.height\n    image_width   = row.width\n    bboxes_coco   = np.array(row.bboxes)\n    bboxes_yolo   = coco2yolo(image_height, image_width, bboxes_coco)\n    names         = ['cots']*len(bboxes_coco)\n    labels        = [0]*len(bboxes_coco)\n\n    plt.figure(figsize = (12, 8))\n    plt.imshow(draw_bboxes(img = img,\n                           bboxes = bboxes_yolo, \n                           classes = names,\n                           class_ids = labels,\n                           class_name = True, \n                           colors = colors, \n                           bbox_format = 'yolo',\n                           line_thickness = 2))\n    plt.axis('OFF')\n    plt.show()","12f43355":"from sklearn.model_selection import GroupKFold\nkf = GroupKFold(n_splits = 10) # num_folds=3 as there are total 3 videos\ndf = df.reset_index(drop=True)\ndf['fold'] = -1\nfor fold, (train_idx, val_idx) in enumerate(kf.split(df, y = df.video_id.tolist(), groups=df.sequence)):\n    df.loc[val_idx, 'fold'] = fold\ndisplay(df.fold.value_counts())","fa3f1092":"train_files = []\nval_files   = []\ntrain_df = df.query(\"fold!=@FOLD\")\nvalid_df = df.query(\"fold==@FOLD\")\ntrain_files += list(train_df.image_path.unique())\nval_files += list(valid_df.image_path.unique())\nlen(train_files), len(val_files)","cb0d1106":"import yaml\n\ncwd = '\/kaggle\/working\/'\n\nwith open(os.path.join( cwd , 'train.txt'), 'w') as f:\n    for path in train_df.image_path.tolist():\n        f.write(path+'\\n')\n            \nwith open(os.path.join(cwd , 'val.txt'), 'w') as f:\n    for path in valid_df.image_path.tolist():\n        f.write(path+'\\n')\n\ndata = dict(\n    path  = '\/kaggle\/working',\n    train =  os.path.join( cwd , 'train.txt') ,\n    val   =  os.path.join( cwd , 'val.txt' ),\n    nc    = 1,\n    names = ['cots'],\n    )\n\nwith open(os.path.join( cwd , 'tgbr.yaml'), 'w') as outfile:\n    yaml.dump(data, outfile, default_flow_style=False)\n\nf = open(os.path.join( cwd , 'tgbr.yaml'), 'r')\nprint('\\nyaml:')\nprint(f.read())","f13041c7":"%cd \/kaggle\/working\n!rm -r \/kaggle\/working\/yolov5\n\n!cp -r \/kaggle\/input\/yolov5-lib-ds \/kaggle\/working\/yolov5\n%cd yolov5\n!pip install -qr requirements.txt  # install\n","e1ef4abd":"from yolov5 import utils\ndisplay = utils.notebook_init()  # checks\n\n# Weights & Biases  (optional)\nimport wandb\nwandb.login(anonymous='must')","20974187":"!python train.py --img 1280\\\n--batch 16\\\n--epochs 30\\\n--data \/kaggle\/working\/tgbr.yaml\\\n--weights yolov5s.pt","19fcef6d":"!ls runs\/train\/exp","11858033":"plt.figure(figsize = (10,10))\nplt.axis('off')\nplt.imshow(plt.imread('runs\/train\/exp\/labels_correlogram.jpg'));","c6f91920":"plt.figure(figsize = (10,10))\nplt.axis('off')\nplt.imshow(plt.imread('runs\/train\/exp\/labels.jpg'));","f1bb8465":"import matplotlib.pyplot as plt\nplt.figure(figsize = (10, 10))\nplt.imshow(plt.imread('runs\/train\/exp\/train_batch0.jpg'))\n\nplt.figure(figsize = (10, 10))\nplt.imshow(plt.imread('runs\/train\/exp\/train_batch1.jpg'))\n\nplt.figure(figsize = (10, 10))\nplt.imshow(plt.imread('runs\/train\/exp\/train_batch2.jpg'))","91271ac0":"fig, ax = plt.subplots(3, 2, figsize = (2*9,3*5), constrained_layout = True)\nfor row in range(3):\n    ax[row][0].imshow(plt.imread(f'runs\/train\/exp\/val_batch{row}_labels.jpg'))\n    ax[row][0].set_xticks([])\n    ax[row][0].set_yticks([])\n    ax[row][0].set_title(f'runs\/train\/exp\/val_batch{row}_labels.jpg', fontsize = 12)\n    \n    ax[row][1].imshow(plt.imread(f'runs\/train\/exp\/val_batch{row}_pred.jpg'))\n    ax[row][1].set_xticks([])\n    ax[row][1].set_yticks([])\n    ax[row][1].set_title(f'runs\/train\/exp\/val_batch{row}_pred.jpg', fontsize = 12)\nplt.show()","63c6e6ab":"plt.figure(figsize=(30,15))\nplt.axis('off')\nplt.imshow(plt.imread('runs\/train\/exp\/results.png'));","af5ab4a1":"plt.figure(figsize=(12,10))\nplt.axis('off')\nplt.imshow(plt.imread('runs\/train\/exp\/confusion_matrix.png'));","9619ab16":"for metric in ['F1', 'PR', 'P', 'R']:\n    print(f'Metric: {metric}')\n    plt.figure(figsize=(12,10))\n    plt.axis('off')\n    plt.imshow(plt.imread(f'runs\/train\/exp\/{metric}_curve.png'));\n    plt.show()","44b7ea62":"## **Class Distribution**","9df0f613":"### Confusion Matrix","f5ed669e":"## Import Libraries","34fd9b89":"## \u5728 COCO128 \u4e0a\u8bad\u7ec3 YOLOv5s 3 \u4e2a\u65f6\u671f","a07daaca":"## \u521b\u5efa\u76ee\u5f55","5d182c4e":"# help protect the Great Barrier Reef","c1ccdd21":"##  YOLOv5","2874572a":"## Create Folds","de909d22":"### 1.\u521b\u5efa\u76ee\u5f55","314cd95f":"## \u521b\u5efa BBox","56b49ad4":"## \u53ef\u89c6\u5316","778e2b44":"### Score Vs Epoch","ebec54b0":"## \u6570\u636e\u6e05\u7406","1d6de3f4":"## **\u6279\u91cf\u5904\u7406\u56fe\u7247**","4e970d24":"## **Result**","153eb76a":"* \u8fd180%\u7684\u56fe\u7247\u6ca1\u6709BBox","b1696464":"### GT Vs Pred","9724c644":"### Metrics","5ef4e32b":"##  BBox Distribution","f6178d4a":"## \u83b7\u53d6\u56fe\u50cf\u5927\u5c0f","563aa58b":"## Meta Data","887e90e0":"* \u9700\u8981\u5c06\u6807\u7b7e\u5bfc\u51fa\u4e3aYOLO\u683c\u5f0f\uff0c\u6bcf\u4e2a\u56fe\u50cf\u6709\u4e00\u4e2a *.txt \u6587\u4ef6\uff08\u5982\u679c\u56fe\u50cf\u4e2d\u6ca1\u6709\u5bf9\u8c61\uff0c\u5219\u4e0d\u9700\u8981 *.txt \u6587\u4ef6\uff09\u3002*.txt \u6587\u4ef6\u89c4\u8303\u662f\uff1a\n1. \u6bcf\u4e2a\u5bf9\u8c61\u4e00\u884c\n2. \u6bcf\u884c\u90fd\u662f\u7c7b [x_center, y_center, width, height] \u683c\u5f0f\u3002\n3. \u65b9\u6846\u5750\u6807\u5fc5\u987b\u662f\u6807\u51c6\u5316\u7684xywh\u683c\u5f0f\uff08\u4ece0-1\uff09\u3002\u5982\u679c\u4f60\u7684\u65b9\u6846\u662f\u50cf\u7d20\uff0c\u90a3\u4e48x_center\u548c\u5bbd\u5ea6\u8981\u9664\u4ee5\u56fe\u50cf\u5bbd\u5ea6\uff0cy_center\u548c\u9ad8\u5ea6\u8981\u9664\u4ee5\u56fe\u50cf\u9ad8\u5ea6\u3002\n4. \u7c7b\u53f7\u662f\u96f6\u7d22\u5f15\u7684\uff08\u4ece 0 \u5f00\u59cb\uff09\u3002\n5. \u7c7b\u53f7\u662f\u96f6\u7d22\u5f15\u7684\uff08\u4ece 0 \u5f00\u59cb\uff09\u3002","6ef52c38":"## Install Libraries","f688b95d":"## \u5c06\u56fe\u50cf\u590d\u5236\u5230\u5f53\u524d\u76ee\u5f55","3e6d2eb7":"### 2.Get Paths","9dbcc6fb":"\u5982\u679c\u6bcf\u4e2a\u6298\u53e0\u4e2d\u7684\u6837\u672c\u6570\u91cf\u4e0d\u4e00\u6837\uff0c\u4f1a\u5728\u4ea4\u53c9\u9a8c\u8bc1\u4e2d\u4f1a\u4ea7\u751f\u5f88\u5927\u7684\u5dee\u5f02\u3002","42ed4f1f":"* \u6240\u6709\u56fe\u50cf\u5177\u6709\u76f8\u540c\u7684\u5c3a\u5bf8\uff0c[Width\uff0cHeight] = [1280, 720]","e295dc03":"### 3.\u6c42BBox \u6570\u91cf","88b796ab":"## **\u8f93\u51fa\u6587\u4ef6**","5ad98344":"## \u521b\u5efa\u6807\u7b7e","53a82b78":"* \u6bd4\u8d5b bbox \u683c\u5f0f\u662f COCO \u56e0\u6b64 [x_min, y_min, width, height]\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u5c06 COCO \u683c\u5f0f\u8f6c\u6362\u4e3a YOLO \u683c\u5f0f\u3002"}}