{"cell_type":{"0a4e9cc1":"code","6ace5891":"code","14f9d553":"code","8ec9efd0":"code","490b4e8d":"code","78b559ba":"code","d6408306":"code","24663fa2":"code","3313559e":"markdown"},"source":{"0a4e9cc1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ace5891":"# Assign data variable\ndata = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\n\n# Exploratory analysis\ndata.info()\ndata.describe()\ndata.head()","14f9d553":"# Set random state for reproducibility\nrs = 123456","8ec9efd0":"# Import packages for model development\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, StackingClassifier\nfrom sklearn.metrics import plot_confusion_matrix, plot_roc_curve, plot_precision_recall_curve\nfrom sklearn.model_selection import train_test_split","490b4e8d":"# Assign X and Y variables\nX = data.drop('DEATH_EVENT', axis = 1).copy()\ny = data['DEATH_EVENT'].copy()","78b559ba":"# Split data into test and training subsets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = rs)","d6408306":"# Model development\nestimators = [('rfc', RandomForestClassifier(criterion = 'gini', random_state = rs)),\n              ('gbc', GradientBoostingClassifier(loss = 'deviance', criterion = 'mse', learning_rate = 0.15, random_state = rs))]\nmodel = StackingClassifier(estimators = estimators)\n\n# Fitting the model and generating predictions\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)","24663fa2":"# Model evaluation\nplot_confusion_matrix(model, X_test, y_test)\nplot_roc_curve(model, X_test, y_test)\nplot_precision_recall_curve(model, X_test, y_test)","3313559e":"**Quick Heart Failure Prediction**\n\n*prepared by Graeme Benson*\n\n*updated June 10, 2021*"}}