{"cell_type":{"6a6355bf":"code","7d6b2f01":"code","603a32b3":"code","358c4e2e":"code","ceb3ac77":"code","0f706b67":"code","5e7c3bfd":"code","30df4290":"code","901928f1":"code","504dacd0":"code","750e2d66":"code","9539618d":"code","1809fe7e":"code","b1545e00":"code","fdcedc0b":"code","69863245":"code","ad34bf26":"code","6720be78":"code","627f5732":"code","c3990b9a":"code","c4e7d44d":"code","3bfd22d7":"code","b7cefc17":"code","f393abf1":"code","09c3cad4":"code","8d45fff5":"code","5c2b7382":"code","da43d195":"code","669af1aa":"code","30f5116f":"code","2862699e":"code","1c043a1b":"code","afc50fbd":"code","13dbc6f9":"markdown","e485d49d":"markdown","971c441a":"markdown","da18d762":"markdown","aa8078b7":"markdown","41ba7fdf":"markdown","7aa9d867":"markdown","23a040a6":"markdown","fb0dfa70":"markdown","de9036d5":"markdown","94c7e24b":"markdown","90cf260c":"markdown","30bb603a":"markdown","b0a16fbb":"markdown","30821a02":"markdown","d55b1543":"markdown","f900cd83":"markdown","2a568594":"markdown","0d7e0779":"markdown","18fb0963":"markdown","665ed0c6":"markdown","ff786683":"markdown","43287637":"markdown","97ad1fbf":"markdown","5e78f883":"markdown","9d679c3f":"markdown"},"source":{"6a6355bf":"# For System\nimport gc\n\n# For DataFrame\nimport numpy as np # for linear algebra\nimport pandas as pd # for data processing, CSV file I\/O (e.g. pd.read_csv)\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999\n\n# For Analysis\nfrom sklearn import neighbors\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom math import exp\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.datasets import make_regression\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LinearRegression\n\n# For Visualization\nimport plotly # visualization\nfrom plotly.graph_objs import Scatter, Figure, Layout # visualization\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot,iplot # visualization\nimport plotly.figure_factory as ff # visualization\nimport plotly.graph_objs as go # visualization\ninit_notebook_mode(connected=True) # visualization\nimport matplotlib.pyplot as plt # for data visualization\nimport seaborn as sns # for data visualization\ncolor = sns.color_palette()\n%matplotlib inline","7d6b2f01":"from subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","603a32b3":"train_raw = pd.read_csv('..\/input\/train_V2.csv')\ntest_raw = pd.read_csv('..\/input\/test_V2.csv')","358c4e2e":"\n# Memory saving function credit to https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    #start_mem = df.memory_usage().sum() \/ 1024**2\n    #print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n\n    for col in df.columns:\n        col_type = df[col].dtype\n\n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n\n    return df\n","ceb3ac77":"train_raw.head(10)","0f706b67":"test_raw.head(10)","5e7c3bfd":"# Check dataframe's shape\nprint('Shape of training set: ', train_raw.shape)\n# Types, Data points, memory usage, etc.\nprint(train_raw.info())\n\n\n# Check dataframe's shape\nprint('Shape of test set: ', test_raw.shape)\nprint(test_raw.info())","30df4290":"train_raw.isnull().sum()","901928f1":"test_raw.isnull().sum()","504dacd0":"print(\"shape of before train drop null data : \"+ str(train_raw.shape[0]) + \",\" + str(train_raw.shape[1]))\ntrain_raw = train_raw.dropna()\nprint(\"shape of after train drop null data : \"+ str(train_raw.shape[0]) + \",\" + str(train_raw.shape[1]))","750e2d66":"continuous = ['damageDealt','killPlace','killPoints','longestKill','matchDuration','maxPlace','numGroups','rankPoints','rideDistance','walkDistance','winPoints']\ndiscrete = ['assists','boosts','DBNOs','headshotKills','heals','kills','killStreaks','revives','teamKills','vehicleDestroys','weaponsAcquired']\ncategories = ['matchType']","9539618d":"### Continuous variable plots\n'''\nfor col in continuous:\n    values = train_raw[col].dropna()\n    lower = np.percentile(values, 1)\n    upper = np.percentile(values, 99)\n    fig = plt.figure(figsize=(18,9));\n    sns.distplot(values[(values>lower) & (values<upper)], color='Sienna', ax = plt.subplot(121));\n    sns.boxplot(y=values, color='Sienna', ax = plt.subplot(122));\n    plt.suptitle(col, fontsize=16)\n'''","1809fe7e":"### Discrete variable plots\n'''\nNanAsZero = ['']\nfor col in discrete:\n    if col in NanAsZero:\n        train_raw[col].fillna(0, inplace=True)\n    values = train_raw[col].dropna()  \n    fig = plt.figure(figsize=(18,9));\n    sns.countplot(x=values, color='Sienna', ax = plt.subplot(121));\n    sns.boxplot(y=values, color='Sienna', ax = plt.subplot(122));\n    plt.suptitle(col, fontsize=16)\n'''","b1545e00":"### Categorical variable plots\n'''\nfor col in categories:\n    values = train_raw[col].astype('str').value_counts(dropna=False).to_frame().reset_index()\n    if len(values) > 30:\n        continue\n    values.columns = [col, 'counts']\n    fig = plt.figure(figsize=(18,9))\n    ax = sns.barplot(x=col, y='counts', color='Sienna', data=values, order=values[col]);\n    plt.xlabel(col);\n    plt.ylabel('Number of occurrences')\n    plt.suptitle(col, fontsize=16)\n\n    ### Adding percents over bars\n    height = [p.get_height() for p in ax.patches]    \n    total = sum(height)\n    for i, p in enumerate(ax.patches):    \n        ax.text(p.get_x()+p.get_width()\/2,\n                height[i]+total*0.01,\n                '{:1.0%}'.format(height[i]\/total),\n                ha=\"center\")    \n'''","fdcedc0b":"### Continuous variable plots\n'''\nfor col in continuous:\n    values = train_raw[col].dropna()\n    fig = plt.figure(figsize=(18,9));\n    sns.jointplot(x=col, y=\"winPlacePerc\", kind=\"hex\", color=\"#0000FF\", data=train_raw)\n    plt.suptitle(col, fontsize=16)\n'''","69863245":"### Discrete variable plots\n'''\nNanAsZero = ['']\nfor col in discrete:\n    if col in NanAsZero:\n        train_raw[col].fillna(0, inplace=True)\n    values = train_raw[col].dropna()  \n    fig = plt.figure(figsize=(18,9));\n    sns.jointplot(x=col, y=\"winPlacePerc\", kind=\"hex\", color=\"#4CB391\", data=train_raw)\n    plt.suptitle(col, fontsize=16)\n'''","ad34bf26":"train_raw['mvmtDistance'] = train_raw['walkDistance'] + train_raw['rideDistance']+train_raw['swimDistance']\n\nfeatures = list(train_raw.columns)\nfeatures.remove(\"Id\")\nfeatures.remove(\"matchId\")\nfeatures.remove(\"groupId\")\nfeatures.remove(\"matchType\")\nfeatures.remove(\"winPlacePerc\")","6720be78":"df_team = train_raw.copy()\n\ndf_max= train_raw.groupby(['matchId','groupId'])[features].agg('max')\ndf_team = pd.merge(train_raw, df_max.reset_index(), suffixes=[\"\", \"_max\"], how='left', on=['matchId', 'groupId'])\ndf_team = df_team.drop([\"assists_max\",\"killPoints_max\",\"headshotKills_max\",\"numGroups_max\",\"revives_max\",\"teamKills_max\",\"roadKills_max\",\"vehicleDestroys_max\"], axis=1)\n\n\ndf_rank = df_max.groupby('matchId')[features].rank(pct=True).reset_index()\ndf_team = pd.merge(df_team, df_rank, suffixes=[\"\", \"_maxRank\"], how='left', on=['matchId', 'groupId'])\ndf_team = df_team.drop([\"roadKills_maxRank\",\"matchDuration_maxRank\",\"maxPlace_maxRank\",\"numGroups_maxRank\"], axis=1)\ndel df_max\ndel df_rank\ngc.collect()\n\ndf_sum = train_raw.groupby(['matchId','groupId'])[features].agg('sum')\ndf_team = pd.merge(df_team, df_sum.reset_index(), suffixes=[\"\", \"_sum\"], how='left', on=['matchId', 'groupId'])\ndf_team = df_team.drop([\"assists_sum\",\"killPoints_sum\",\"headshotKills_sum\",\"numGroups_sum\",\"revives_sum\",\"teamKills_sum\",\"roadKills_sum\",\"vehicleDestroys_sum\"], axis=1)\ndel df_sum\ngc.collect()","627f5732":"df = train_raw.copy()\ndf['active'] = df['weaponsAcquired']+df['revives']+df['kills']+df['heals']\nfig = plt.figure(figsize=(18,9));\nsns.jointplot(x=\"active\", y=\"winPlacePerc\", kind=\"hex\", color=\"#0000FF\", data=df)\nplt.suptitle(\"active\", fontsize=16) \ndf[['active','winPlacePerc']].corr()","c3990b9a":"df = train_raw.copy()\ndf['mvmtDistance'] = df['walkDistance'] + df['rideDistance']+df['swimDistance']\nfig = plt.figure(figsize=(18,9));\nsns.jointplot(x=\"mvmtDistance\", y=\"winPlacePerc\", kind=\"hex\", color=\"#0000FF\", data=df)\nplt.suptitle(\"mvmtDistance\", fontsize=16) \ndf[['mvmtDistance','winPlacePerc']].corr()","c4e7d44d":"df = train_raw.copy()\ndf = df.loc[~df['matchType'].isin(['normal-solo-fpp', 'solo-fpp', 'solo', 'normal-solo'])]\ndf['teamPlay'] = (df['assists'] +df['revives'])\/(df['teamKills']+1)\nfig = plt.figure(figsize=(18,9));\nsns.jointplot(x=\"teamPlay\", y=\"winPlacePerc\", kind=\"hex\", color=\"#0000FF\", data=df)\nplt.suptitle(\"teamPlay\", fontsize=16) \ndf[['teamPlay','winPlacePerc']].corr()","3bfd22d7":"df = train_raw.copy()\ndf['mvmtDistance'] = df['walkDistance'] + df['rideDistance']+df['swimDistance']\ndf['headshotPercent'] = (df['damageDealt'])*(df['mvmtDistance'])\ndf = df.loc[df['headshotPercent']>10]\nfig = plt.figure(figsize=(18,9));\nsns.jointplot(x=\"headshotPercent\", y=\"winPlacePerc\", kind=\"hex\", color=\"#0000FF\", data=df)\nplt.suptitle(\"headshotPercent\", fontsize=16) \ndf[['headshotPercent','winPlacePerc']].corr()","b7cefc17":"df = train_raw.copy()\ndf['mvmtDistance'] = df['walkDistance'] + df['rideDistance']+df['swimDistance']\nnormalized = (df['mvmtDistance']-min(df['mvmtDistance']))\/(max(df['mvmtDistance'])-min(df['mvmtDistance']))\ndf['getitemperMvmt'] = (df['weaponsAcquired'] + df['boosts']+df['heals'])\/(normalized+1)\n\nfig = plt.figure(figsize=(18,9));\nsns.jointplot(x=\"getitemperMvmt\", y=\"winPlacePerc\", kind=\"hex\", color=\"#0000FF\", data=df)\nplt.suptitle(\"getitemperMvmt\", fontsize=16) \ndf[['getitemperMvmt','winPlacePerc']].corr()","f393abf1":"fig = plt.figure(figsize=(18,9));\nsns.jointplot(x=\"mvmtDistance_max\", y=\"winPlacePerc\", kind=\"hex\", color=\"#0000FF\", data=df)\nplt.suptitle(\"mvmtDistance_max\", fontsize=16) \nprint(df[['mvmtDistance_max','winPlacePerc']].corr())\n\nfig = plt.figure(figsize=(18,9));\nsns.jointplot(x=\"damageDealt_maxRank\", y=\"winPlacePerc\", kind=\"hex\", color=\"#0000FF\", data=df)\nplt.suptitle(\"damageDealt_maxRank\", fontsize=16) \nprint(df[['damageDealt_maxRank','winPlacePerc']].corr())","09c3cad4":"df = train_raw.copy()\ndf['mvmtDistance'] = df['walkDistance'] + df['rideDistance']+df['swimDistance']\ndf['distperDuration'] = df['mvmtDistance']\/df['matchDuration']\n\nfig = plt.figure(figsize=(18,9));\nsns.jointplot(x=\"mvmtperDuration\", y=\"winPlacePerc\", kind=\"hex\", color=\"#0000FF\", data=df)\nplt.suptitle(\"mvmtperDuration\", fontsize=16) \ndf[['mvmtperDuration','winPlacePerc']].corr()","8d45fff5":"df_team['mvmtDistance'] = df_team['walkDistance'] + df_team['rideDistance']+df_team['swimDistance']\ndf_team['damageperMvmt'] = (df_team['mvmtDistance']+1)*df_team['damageDealt_maxRank']\n\nfig = plt.figure(figsize=(18,9));\nsns.jointplot(x=\"damageperMvmt\", y=\"winPlacePerc\", kind=\"hex\", color=\"#0000FF\", data=df_team)\nplt.suptitle(\"damageperMvmt\", fontsize=16) \ndf_team[['mvmtDistance','winPlacePerc']].corr()","5c2b7382":"fig = plt.figure(figsize=(18,9));\nsns.jointplot(x=\"damageDealt_maxRank\", y=\"winPlacePerc\", kind=\"hex\", color=\"#0000FF\", data=df_team)\nplt.suptitle(\"damageDealt_maxRank\", fontsize=16) \ndf_team[['damageDealt_maxRank','winPlacePerc']].corr()","da43d195":"fig = plt.figure(figsize=(18,9));\nsns.jointplot(x=\"mvmtDistance_maxRank\", y=\"winPlacePerc\", kind=\"hex\", color=\"#0000FF\", data=df_team)\nplt.suptitle(\"mvmtDistance_maxRank\", fontsize=16) \ndf_team[['mvmtDistance_maxRank','winPlacePerc']].corr()","669af1aa":"df_team = reduce_mem_usage(df_team)\ntest_raw = reduce_mem_usage(test_raw)\n\ndf_pred = df_team.drop(['Id','groupId','matchId'],axis=1)\ndf_pred = reduce_mem_usage(df_pred)\n\ndf_pred = pd.get_dummies(df_pred)\n#,'assists','killPoints','kills','killStreaks','longestKill','matchDuration','maxPlace','numGroups','rankPoints','revives','roadKills','swimDistance','teamKills','vehicleDestroys','winPoints'\ndf_pred_y = df_pred['winPlacePerc']\ndf_pred_x = df_pred.drop(['winPlacePerc'],axis=1)","30f5116f":"X_train, X_test, y_train, y_test = train_test_split(df_pred_x, df_pred_y, test_size=0.33, random_state=42)","2862699e":"params = {\n        'boosting_type':'gbdt',\n        'objective': 'regression',\n        'nthread': -1,\n        'verbose': 0,\n        'num_leaves': 31,\n        'learning_rate': 0.05,\n        'max_depth': -1,\n        'subsample': 0.8,\n        'subsample_freq': 1,\n        'colsample_bytree': 0.6,\n        'reg_aplha': 1,\n        'reg_lambda': 0.001,\n        'metric': 'rmse',\n        'min_split_gain': 0.5,\n        'min_child_weight': 1,\n        'min_child_samples': 10\n    }\n\n\ntrain_set = lgb.Dataset(X_train, y_train, silent=True)\nmodel = lgb.train(params, train_set = train_set, num_boost_round=300)\npred_test_y = model.predict(X_test, num_iteration = model.best_iteration)\n\nrms = sqrt(mean_squared_error(y_test, pred_test_y))\nrms","1c043a1b":"rms = sqrt(mean_squared_error(y_test, prediction))\nprint(rms)\n\ndf_result = pd.DataFrame(columns=['PRED','REAL'])\ndf_result['PRED'] = prediction\ndf_result['REAL'] = y_test.reset_index(drop = True)\ndf_result.head(100)","afc50fbd":"test_raw['mvmtDistance'] = test_raw['walkDistance'] + test_raw['rideDistance']+test_raw['swimDistance']\n\nfeatures = list(test_raw.columns)\nfeatures.remove(\"Id\")\nfeatures.remove(\"matchId\")\nfeatures.remove(\"groupId\")\nfeatures.remove(\"matchType\")\n\ndf_max= test_raw.groupby(['matchId','groupId'])[features].agg('max')\ndf_team = pd.merge(test_raw, df_max.reset_index(), suffixes=[\"\", \"_max\"], how='left', on=['matchId', 'groupId'])\ndf_team = df_team.drop([\"assists_max\",\"killPoints_max\",\"headshotKills_max\",\"numGroups_max\",\"revives_max\",\"teamKills_max\",\"roadKills_max\",\"vehicleDestroys_max\"], axis=1)\n\n\ndf_rank = df_max.groupby('matchId')[features].rank(pct=True).reset_index()\ndf_team = pd.merge(df_team, df_rank, suffixes=[\"\", \"_maxRank\"], how='left', on=['matchId', 'groupId'])\ndf_team = df_team.drop([\"roadKills_maxRank\",\"matchDuration_maxRank\",\"maxPlace_maxRank\",\"numGroups_maxRank\"], axis=1)\ndel df_max\ndel df_rank\ngc.collect()\n\ndf_sum = train_raw.groupby(['matchId','groupId'])[features].agg('sum')\ndf_team = pd.merge(df_team, df_sum.reset_index(), suffixes=[\"\", \"_sum\"], how='left', on=['matchId', 'groupId'])\ndf_team = df_team.drop([\"assists_sum\",\"killPoints_sum\",\"headshotKills_sum\",\"numGroups_sum\",\"revives_sum\",\"teamKills_sum\",\"roadKills_sum\",\"vehicleDestroys_sum\"], axis=1)\ndel df_sum\ngc.collect()\n\ntest = df_team.drop(['Id', 'groupId', 'matchId'],axis=1)\ntest = pd.get_dummies(test)\npred_test_y = model.predict(test, num_iteration = model.best_iteration)\n\ntest = pd.DataFrame(columns=['Id', 'winPlacePerc'])\ntest['Id'] = test_raw['Id']\ntest['winPlacePerc'] = pred_test_y\n\ntest.to_csv('submission.csv',index=False)","13dbc6f9":"<a id=\"2\"><\/a> <br>\n# 1.1 \ub300\ud68c \uac1c\uc694","e485d49d":"### (7). \uacbd\uae30 \uc2dc\uac04 \ub300\ube44 \uac78\uc740 \uac70\ub9ac\uac00 \ub9ce\uc744\uc218\ub85d \uc21c\uc704\uac00 \ub192\uc744 \uac83\uc774\ub2e4.","971c441a":"<a id=\"8\"><\/a> <br>\n# 3. EDA","da18d762":"**\uc6c0\uc9c1\uc778 \uac70\ub9ac\uac00 \ub9ce\uc740\uc218\ub85d \uc2b9\ub960\uc774 \ub192\uc544\uc9c4\ub2e4.**","aa8078b7":"<a id=\"10\"><\/a> <br>\n# 3.2 \uac00\uc124 \uac80\uc99d","41ba7fdf":"### (1). \uc5f4\uc2ec\ud788 \ud65c\ub3d9\ud55c \ud50c\ub808\uc774\uc5b4\uac00 \uc0c1\uc704\uad8c\uc5d0 \uc788\uc744 \ud655\ub960\uc774 \ub192\ub2e4.(\uc874\ubc84 X)","7aa9d867":"<a id=\"9\"><\/a> <br>\n# 3.1 \uc804\uccb4 \ub370\uc774\ud130 \uac1c\uc694","23a040a6":"<a id=\"6\"><\/a> <br>\n# 2.2 NULL \ucc98\ub9ac","fb0dfa70":"\ub370\uc774\ud130 \uc6a9\ub7c9 \uc904\uc774\uae30\nint32 -> int8, 16, 32... etc","de9036d5":"### (5). \uc774\ub3d9\uac70\ub9ac \ub300\ube44 \uc544\uc774\ud15c\uc744 \ub9ce\uc774 \uba39\uc744\uc218\ub85d \uc21c\uc704\uac00 \ub192\uc744 \uac83\uc774\ub2e4.","94c7e24b":"### (2). \ub9ce\uc774 \uc6c0\uc9c1\uc778 \ud50c\ub808\uc774\uc5b4\uac00 \uc21c\uc704\uac00 \ub192\ub2e4.","90cf260c":"damageDealt : \uc785\ud78c \ub370\ubbf8\uc9c0\uac00 \ud074\uc218\ub85d \uc21c\uc704\uac00 \ub192\ub2e4.\n\nkillPlace : \uc8fd\uc778 \uc21c\uc704\uac00 \ub192\uc744\uc218\ub85d (0\uc5d0 \uac00\uae4c\uc6cc\uc9c8\uc218\ub85d) \uc774\uae34 \uc21c\uc704\uac00 \ub192\uc544\uc9c4\ub2e4.\n\nkillPoints : \uc678\ubd80\ub7ad\ud0b9\uacfc \uacbd\uae30 \uc21c\uc704\ub791\uc740 \uc720\uc758\ubbf8\ud55c \ucc28\uc774\uac00 \ubcf4\uc774\uc9c0 \uc54a\ub294\ub2e4.\n\nlongestKill : \ub2e8\uac70\ub9ac\ub85c \uc8fd\uc778 \uc0ac\ub78c\ub4e4\uc740 \uc21c\uc704\uac00 \ub0ae\ub2e4.\n\nmatchDuration, maxPlace,numGroups, rankPoints, winPoints : \uc21c\uc704\uc640 \uc720\uc758\ubbf8\ud55c \ucc28\uc774\uac00 \uc5c6\ub2e4.","30bb603a":"<a id=\"1\"><\/a> <br>\n# 1. INTRODUCTION","b0a16fbb":"### (8).\uc774\ub3d9\uac70\ub9ac\uac00 \uc801\uc740\ub370 \ub370\ubbf8\uc9c0\ub97c \ub9ce\uc774 \uc785\ud614\uc73c\uba74 \uc21c\uc704\uac00 \ub192\uc744 \uac83\uc774\ub2e4.","30821a02":"### (4). \ub9ce\uc774 \uc6c0\uc9c1\uc774\uace0 \ub9ce\uc774 \ub370\ubbf8\uc9c0\ub97c \uc785\ud78c \ud50c\ub808\uc774\uc5b4\uc758 \uc21c\uc704\uac00 \ub192\uc744 \uac83\uc774\ub2e4.","d55b1543":"<a id=\"4\"><\/a> <br>\n# 2. \ub370\uc774\ud130","f900cd83":"- **Id** - \ud50c\ub808\uc774\uc5b4\uc758 Id\n- **groupId** - \uacbd\uae30 \ub0b4\uc758 \uadf8\ub8f9\uc744 \uc2dd\ubcc4\ud558\ub294 ID. \ud604\uc7ac \uadf8\ub8f9\uc758 \uc120\uc218\ub4e4\uc774 \uc11c\ub85c \ub2e4\ub978 \uacbd\uae30\uc5d0\uc11c \uacbd\uae30\ud55c\ub2e4\uba74, \uadf8\ub4e4\uc740 \ub9e4\ubc88 \ub2e4\ub978 groupId\ub97c \uac16\uac8c \ub420 \uac83\uc774\ub2e4.\n- **matchId** - \uacbd\uae30\ub97c \uc2dd\ubcc4\ud558\uae30 \uc704\ud55c ID. train set\uacfc test set\uc5d0 \ubaa8\ub450 \uc788\ub294 \uc2dc\ud569\uc740 \uc5c6\ub2e4.\n- **matchDuration** - \uacbd\uae30 \uc2dc\uac04.\n- **matchType** - \uacbd\uae30 \uc885\ub958(duo, quad ...).\n- **assists** - \ud300 \ub3d9\ub8cc\ub4e4\uacfc \uac19\uc774 \uc8fd\uc778 \uc801 \uc218\uc774\ub2e4.\n- **boosts** - \ubd80\uc2a4\ud2b8 \uc544\uc774\ud15c \uc0ac\uc6a9\ud55c \uc218.\n- **damageDealt** - \uac00\ud55c \ub370\ubbf8\uc9c0 \ucd1d\ub7c9. Note: \uc790\uc2e0\uc5d0\uac8c \uac00\ud55c \ub370\ubbf8\uc9c0\ub294 \uc81c\uc678.\n- **DBNOs** - \ube48\uc0ac\uc0c1\ud0dc\ub85c \ub9cc\ub4e0 \uc801\uc758 \uc218.\n- **headshotKills** - \ud5e4\ub4dc\uc0f7 \uc73c\ub85c \ucc98\ub9ac\ud55c \uc801\uc758 \uc218.\n- **heals** - \uce58\ub8cc \uc544\uc774\ud15c \uc0ac\uc6a9 \uc218.\n- **killPlace** - \uacbd\uae30\uc5d0\uc11c \ucc98\uce58\ud55c \uc801\uc758 \uc218 \ub7ad\ud0b9.\n- **killPoints** - \ud50c\ub808\uc774\uc5b4\uc758 \ucc98\uce58 \uae30\ubc18 \uc678\ubd80 \ub7ad\ud0b9 (Elo \ubc29\uc2dd\uc758 \uc21c\uc704). rankPoints\uc5d0\uc11c -1\uc774 \uc544\ub2cc \uac12\uc774 \uc788\ub294 \uacbd\uc6b0, killPoints\uc5d0\uc11c 0\uc740 \"\uc5c6\uc74c\"\uc73c\ub85c \ucc98\ub9ac\ub418\uc5b4\uc57c \ud55c\ub2e4.\n- **kills** - \ucc98\uce58\ud55c \uc801\uc758 \uc218.\n- **killStreaks** - \ub2e8\uae30\uac04\uc5d0 \uac00\uc7a5 \ub9ce\uc774 \ucc98\uce58\ud55c \uc801\uc758 \ucd5c\ub300\uce58.\n- **longestKill** - \ud50c\ub808\uc774\uc5b4\uac00 \uc801\uc744 \uc8fd\uc778 \uac00\uc7a5 \uae34 \uac70\ub9ac. \uc120\uc218\ub97c \ub2e4\uc6b4\uc2dc\ud0a4\uace0 \uba40\ub9ac \uc6b4\uc804\ud558\ub294 \uac83\uc774 \uac00\uc7a5 \uae34 \ucc98\uce58\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc624\ud574\uc758 \uc18c\uc9c0\uac00 \uc788\uc744 \uc218 \uc788\ub2e4.\n- **maxPlace** - \uacbd\uae30\uc5d0\uc11c \uac00\uc7a5 \uc21c\uc704\uac00 \ub0ae\uc740 \uac83\uc5d0 \ub300\ud55c \ub370\uc774\ud130. \uc774\uac83\uc740 \uc21c\uc704\ub97c \uac74\ub108\ub6f8 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 numGroups\uc640 \uc77c\uce58\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\ub2e4.\n- **numGroups** - \uacbd\uae30\uc5d0 \uc788\ub294 \ud300\uc758 \uc218.\n- **rankPoints** - Elo \ubc29\uc2dd\uc758 \ud50c\ub808\uc774\uc5b4 \ub7ad\ud0b9. \ub2e4\uc74c \ubc84\uc804\uc758 API\uc5d0\uc11c\ub294 \uc0ad\uc81c\ub420 \uc608\uc815\uc774\uae30 \ub54c\ubb38\uc5d0 \uc0ac\uc6a9\uc5d0 \uc8fc\uc758. '-1' \uac12\uc740 \uc21c\uc704\uac00 \"None\" \uc774\ub2e4.\n- **revives** - \ud50c\ub808\uc774\uc5b4\uac00 \ud300\uc6d0 \ud68c\ubcf5 \uc2dc\ud0a8 \uc218.\n- **rideDistance** - \ucc28\ub7c9\uc73c\ub85c \uc774\ub3d9\ud55c \uac70\ub9ac(\ub2e8\uc704 : \ubbf8\ud130).\n- **roadKills** - \ucc28\ub7c9\uc73c\ub85c \uc8fd\uc778 \ud50c\ub808\uc774\uc5b4 \uc218.\n- **swimDistance** - \uc218\uc601\ud55c \uac70\ub9ac(\ub2e8\uc704 : \ubbf8\ud130).\n- **teamKills** - \ud300\ud0ac\ud55c \ud69f\uc218.\n- **vehicleDestroys** - \ucc28\ub7c9\uc744 \ud3ed\ud30c\uc2dc\ud0a8 \ud69f\uc218.\n- **walkDistance** - \uac78\uc740 \ucd1d \uac70\ub9ac(\ub2e8\uc704 : \ubbf8\ud130).\n- **weaponsAcquired** - \ubb34\uae30 \uc5bb\uc740 \uac2f\uc218.\n- **winPoints** - \ud50c\ub808\uc774\uc5b4\uc758 \uc2b9\ub9ac \uae30\ubc18 \uc678\ubd80 \ub7ad\ud0b9 (Elo \ubc29\uc2dd\uc758 \uc21c\uc704). rankPoints\uc5d0\uc11c -1\uc774 \uc544\ub2cc \uac12\uc774 \uc788\ub294 \uacbd\uc6b0, winPoints\uc5d0\uc11c 0\uc740 \"\uc5c6\uc74c\"\uc73c\ub85c \ucc98\ub9ac\ub418\uc5b4\uc57c \ud55c\ub2e4.\n- **winPlacePerc** - \uc608\uce21 \ubaa9\ud45c. \uc21c\uc704\uc758 \ud37c\uc13c\ud2b8\ub85c \ud45c\uc2dc\ub418\uba70, 1\uc774\uba74 \uacbd\uae30\uc5d0\uc11c 1\ub4f1\uc774\uace0 0\uc774\uba74 \uacbd\uae30\uc5d0\uc11c \uaf34\uc9c0 \ud588\ub2e4\ub294 \uac83\uc774\ub2e4. \uc774\uac83\uc740 numGroups\ub85c \uacc4\uc0b0\ub418\ub294\uac8c \uc544\ub2c8\ub77c, maxPlace\ub85c \uacc4\uc0b0\ub418\uae30 \ub54c\ubb38\uc5d0 \ub204\ub77d\ub418\ub294 \uac83\uc774 \uc788\uc744\uc218\ub3c4\ub2e4.","2a568594":"### (6). \ud300\uc804\uc758 \uacbd\uc6b0 \uac19\uc740 \ud300\uc758 \ub370\ubbf8\uc9c0\ub098 \uac78\uc740 \uac70\ub9ac \uc544\uc774\ud15c \uc5bb\uc740 \ud69f\uc218 \ub4f1\uc758 \ucd5c\uace0\uc810\uc774 \ub192\uc744\uc218\ub85d \uc21c\uc704\uac00 \ub192\uc744 \uac83\uc774\ub2e4.","0d7e0779":"<a id=\"5\"><\/a> <br>\n# 2.1 \ub370\uc774\ud130 \uc14b \ud655\uc778","18fb0963":"# Analysis","665ed0c6":"train \ub370\uc774\ud130 \uc14b\ub9cc \uc885\uc18d\ubcc0\uc218\uc5d0 \ud574\ub2f9\ud558\ub294 \"winPlacePerc\"\uc5d0 \ud55c \uac1c\uc758 \ub370\uc774\ud130\ub9cc Null \uac12\uc744 \uac00\uc9c4\ub2e4.","ff786683":"<a id=\"3\"><\/a> <br>\n# 1.2 \uc0ac\uc6a9 Library","43287637":"<a id=\"7\"><\/a> <br>\n# 2.3 \ud30c\uc0dd\ubcc0\uc218 \uc0dd\uc131","97ad1fbf":"1. [Introduction:](#1)\n    1. [\ub300\ud68c \uac1c\uc694](#2)\n    1. [\uc0ac\uc6a9 Library](#3)\n1. [\ub370\uc774\ud130 \ud655\uc778](#4)\n    1. [\ub370\uc774\ud130 \uc14b \ud655\uc778](#5)\n    1. [NULL Data \ucc98\ub9ac](#6)\n    1. [\ud30c\uc0dd\ubcc0\uc218 \uc0dd\uc131](#7)\n1. [EDA](#8)\n    1. [\uc804\uccb4 \ub370\uc774\ud130 \uac1c\uc694](#9)\n    1. [\uac00\uc124 \uac80\uc99d](#10)\n    1. [ \ub370\uc774\ud130](#11)\n    1. [ \ub370\uc774\ud130](#12)\n1. [\ub370\uc774\ud130 \ubcc0\ud658](#13)\n    1. [Null Data \ucc98\ub9ac](#14)\n    1. [\ud30c\uc0dd\ubcc0\uc218 \uc0dd\uc131](#15)\n    1. [One-hot Encoding](#16)\n1. [\ubaa8\ub378\ub9c1 \ubc0f \ud3c9\uac00](#35)\n    1. [GLM](#36)\n    1. [Light Gradient Boosting](#37)\n1. [\uacb0\ub860](#38)\n    1. [\ubaa8\ub378 \uc120\uc815](#39)\n    1. [\ucd94\uac00\uc801\uc778 \uc811\uadfc\ubc95](#40)","5e78f883":"### (3) \ud300\uc804\uc5d0\uc11c \ud300\ud50c\ub808\uc774\ub97c \uc798\ud55c \uc0ac\ub78c\uc77c\uc218\ub85d \uc2b9\ub960\uc774 \ub192\uc544\uc9c4\ub2e4.","9d679c3f":"### (9). \ud300\uc758 \ucd5c\uace0 \uc810\uc218\uc5d0 \ub530\ub77c\uc11c \uc21c\uc704\uac00 \uacb0\uc815\ub41c\ub2e4."}}