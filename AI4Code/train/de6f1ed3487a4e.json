{"cell_type":{"7a221eef":"code","0b97ee98":"code","041143fe":"code","27ebcb91":"code","7dbaf3ec":"code","5234530e":"code","5f3012cd":"code","0172f39e":"code","f6efc2db":"code","1c5654f8":"code","524ad582":"code","05d475ef":"code","0736df58":"code","f067ba02":"code","7d021307":"code","563654a6":"code","1124cc50":"code","ebb490c8":"code","44925087":"code","3d90b6bd":"code","ea60e9d0":"code","7e6f6b7d":"code","a613cd4a":"code","f21505df":"code","bf1cf346":"code","7cfa6ed5":"code","754d726e":"code","4c281779":"code","31ff137f":"code","51af4c05":"code","54c482be":"code","84f613fb":"markdown","f956dd00":"markdown","a1dbc0e2":"markdown","7580a5a1":"markdown","fa127a40":"markdown","78320844":"markdown","3b707593":"markdown","5c83c336":"markdown","20b12316":"markdown","23220f8c":"markdown"},"source":{"7a221eef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b97ee98":"(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()","041143fe":"x_train[0].shape","27ebcb91":"plt.matshow(x_train[10])","7dbaf3ec":"x_test_std = x_test\/255\nx_train_std = x_train\/255","5234530e":"x_test_std_reshaped = x_test_std.reshape(len(x_test_std), 28*28)\nx_train_std_reshaped = x_train_std.reshape(len(x_train_std), 28*28)\n\nx_train_std_reshaped.shape","5f3012cd":"model = keras.Sequential([\n    keras.layers.Dense(10, input_shape = (784,), activation = 'sigmoid')\n])\n\nmodel.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])","0172f39e":"model.fit(x_train_std_reshaped, y_train, epochs = 10)","f6efc2db":"model.evaluate(x_test_std_reshaped, y_test)","1c5654f8":"plt.matshow(x_test[1])","524ad582":"y_predicted = model.predict(x_test_std_reshaped)","05d475ef":"np.argmax(y_predicted[1])","0736df58":"y_pred_labels = []\nfor i in y_predicted:\n    y_pred_labels.append(np.argmax(i))","f067ba02":"cm = tf.math.confusion_matrix(labels = y_test, predictions = y_pred_labels)\ncm","7d021307":"import seaborn as sns\n\nplt.figure(figsize = (10,7))\nsns.heatmap(cm, annot = True, fmt = 'd')\nplt.ylabel('Truth')\nplt.xlabel('Predicted')","563654a6":"from sklearn.metrics import f1_score, accuracy_score\n\naccuracy_score(y_test,y_pred_labels)","1124cc50":"model2 = keras.Sequential([\n    keras.layers.Dense(100, input_shape = (784,), activation = 'relu'),\n    keras.layers.Dense(10, activation = 'sigmoid')\n])\n\nmodel2.compile( \n    optimizer = 'adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics = ['accuracy']\n    \n)","ebb490c8":"model2.fit(x_train_std_reshaped, y_train, epochs = 10)","44925087":"model2.evaluate(x_test_std_reshaped, y_test)","3d90b6bd":"y_pred2 = model2.predict(x_test_std_reshaped)","ea60e9d0":"y_test","7e6f6b7d":"y_pred2","a613cd4a":"y_pred_labels2 = []\nfor i in y_pred2:\n    y_pred_labels2.append(np.argmax(i))","f21505df":"cm2 = tf.math.confusion_matrix(labels = y_test, predictions = y_pred_labels2)\ncm2","bf1cf346":"plt.figure(figsize = (10,7))\nsns.heatmap(cm2, annot = True, fmt = 'd')\nplt.ylabel('Truth')\nplt.xlabel('Predicted')","7cfa6ed5":"model3 = keras.Sequential([\n    keras.layers.Flatten(input_shape = (28,28)),\n    keras.layers.Dense(100, activation = 'relu'),\n    keras.layers.Dense(10, activation = 'sigmoid')\n])\n\nmodel3.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])","754d726e":"model3.fit(x_train_std_reshaped, y_train, epochs = 30)","4c281779":"model3.evaluate(x_train_std_reshaped, y_train)","31ff137f":"#data_to_predict = x_train_std_reshaped.values\nresults = model.predict(x_train_std_reshaped)\nresults = np.argmax(results,axis = 1)\n\nresults","51af4c05":"image_label = range(0,x_train.shape[0])","54c482be":"image_label","84f613fb":"## ***Get Predictions***","f956dd00":"## ***Simple Model building without Hidden layer***","a1dbc0e2":"## ***Normalize data by dividing each pixel by 255***","7580a5a1":"## ***Reshape the data (no. of record, height * width)***","fa127a40":"## ***2nd Model with Hidden layer***","78320844":"## ***Load MNIST Data***","3b707593":"## ***Confusio matrix for 2nd Model***","5c83c336":"## ***Confusion Matrix for Model Predictions***","20b12316":"## ***3rd Model with Hidden layer and Flatten Layer***","23220f8c":"## ***Show Image sample***"}}