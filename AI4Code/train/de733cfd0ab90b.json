{"cell_type":{"cd762130":"code","58f444ce":"code","0c356599":"code","d62f7f95":"code","54eeacb6":"code","023dbbc1":"code","f89c4799":"code","04bcdb5f":"code","fdb8e9bc":"code","0e5dc9b7":"code","82c7849a":"code","7aa679b9":"code","454923a3":"code","716938ad":"code","1f7ba59c":"code","007248e1":"code","abd9767a":"code","f0aafcf4":"code","8dfd5e3f":"code","225863ec":"code","bad934fd":"code","c6451b44":"code","d3a22657":"code","31082a75":"code","16a1bf01":"code","bd02000c":"code","13bf5c01":"code","0b7385da":"code","8c6dda25":"code","00906e97":"code","61aceb5f":"code","3ba95205":"markdown","7584dab1":"markdown","3a9fd595":"markdown","35fdabb5":"markdown","6c0589d0":"markdown","b09b7dc6":"markdown","a9b7118b":"markdown","0a198ecb":"markdown","ad1fa8ba":"markdown","9e6f7f86":"markdown","a02ac429":"markdown","1c804fe9":"markdown","8c4afe22":"markdown","b245d17e":"markdown","46f7ba79":"markdown","c60ce6e5":"markdown","7f46c947":"markdown","20242ee1":"markdown","2b2e7a7c":"markdown","fa311c6a":"markdown","63e6bb4c":"markdown","e661b129":"markdown","e025ab58":"markdown","9834e87b":"markdown","fc452e69":"markdown","1e484e9f":"markdown","3a64439f":"markdown","c25bb9c6":"markdown","cf6eb627":"markdown","61751a7e":"markdown","ef49de4e":"markdown"},"source":{"cd762130":"import matplotlib.pyplot as plt\nimport numpy             as np\nimport pandas            as pd\n\nfrom scipy.stats                   import randint, lognorm\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.dummy                 import DummyClassifier\nfrom sklearn.ensemble              import RandomForestClassifier, BaggingClassifier\nfrom sklearn.feature_selection     import RFE, SelectKBest, f_classif, mutual_info_classif\nfrom sklearn.linear_model          import LogisticRegression, SGDClassifier\nfrom sklearn.metrics               import roc_auc_score\nfrom sklearn.model_selection       import cross_val_score, LeaveOneOut, ParameterGrid, GridSearchCV, RandomizedSearchCV, validation_curve, StratifiedShuffleSplit, RepeatedStratifiedKFold\nfrom sklearn.neighbors             import KNeighborsClassifier\nfrom sklearn.pipeline              import Pipeline, make_pipeline\nfrom sklearn.preprocessing         import StandardScaler\nfrom sklearn.svm                   import SVC","58f444ce":"train = pd.read_csv('..\/input\/train.csv')\nX = train.drop(['id', 'target'], axis=1)\ny = train['target']\ntrain","0c356599":"scoring='roc_auc'\ncv=RepeatedStratifiedKFold(5, 10, random_state=0)","d62f7f95":"def plot_validation_curve(estimator, param_name, param_range, X=X, y=y, groups=None, cv=cv, scoring=scoring, n_jobs=None, pre_dispatch='all', verbose=0, error_score='raise-deprecating'):\n    train_scores, test_scores = validation_curve(estimator, X, y, param_name, param_range, groups, cv, scoring, n_jobs, pre_dispatch, verbose, error_score)\n    \n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std  = np.std (train_scores, axis=1)\n    test_scores_mean  = np.mean(test_scores,  axis=1)\n    test_scores_std   = np.std (test_scores,  axis=1)\n    \n    plt.suptitle(estimator.__class__.__name__)\n    plt.xlabel(param_name)\n    if scoring is not None: plt.ylabel(scoring) \n    lw = 2\n    param_range = [str(x) for x in param_range] # make axis categorical so we don't have to think about scaling\n    plt.plot(param_range, train_scores_mean, label='Training score', color='darkorange', lw=lw)\n    plt.fill_between(param_range, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, alpha=0.2, color=\"darkorange\", lw=lw)\n    plt.plot(param_range, test_scores_mean, label='Cross-validation score', color='navy', lw=lw)\n    plt.fill_between(param_range, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, alpha=0.2, color=\"navy\", lw=lw)\n    plt.legend(loc='best')\n    plt.show()","54eeacb6":"plot_validation_curve(DummyClassifier(random_state=0),\n                      'strategy', ['stratified', 'most_frequent', 'prior', 'uniform'])","023dbbc1":"plot_validation_curve(KNeighborsClassifier(),\n                      'n_neighbors', [20, 40, 60, 80, 100, 120, 140, 160, 180, 200])","f89c4799":"plot_validation_curve(Pipeline([('std', StandardScaler()),\n                                ('clf', KNeighborsClassifier())]),\n                      'clf__n_neighbors', [20, 40, 60, 80, 100, 120, 140, 160, 180, 200])","04bcdb5f":"plot_validation_curve(KNeighborsClassifier(weights='distance'),\n                      'n_neighbors', [20, 40, 60, 80, 100, 120, 140, 160, 180, 200])","fdb8e9bc":"plot_validation_curve(LogisticRegression(penalty='l2',\n                                         solver='liblinear'),\n                      \"C\", [0.001, 0.01, 0.1, 1, 10, 100, 1000])","0e5dc9b7":"plot_validation_curve(LogisticRegression(penalty='l1',\n                                         solver='liblinear'),\n                      'C', [.01, .02, .03, .04, .05, .06, .07, .08, .09, .1])","82c7849a":"plot_validation_curve(LogisticRegression(penalty='l1',\n                                         solver='liblinear',\n                                         class_weight='balanced'),\n                      'C', [.01, .02, .03, .04, .05, .06, .07, .08, .09, .1])","7aa679b9":"plot_validation_curve(Pipeline([('std', StandardScaler()),\n                                ('clf', LogisticRegression(penalty='l1',\n                                                           solver='liblinear',\n                                                           class_weight='balanced'))]),\n                      'clf__C', [.01, .02, .03, .04, .05, .06, .07, .08, .09, .1])","454923a3":"plot_validation_curve(Pipeline([('sel', SelectKBest()),\n                                ('clf', LogisticRegression(penalty=\"l1\",\n                                                           solver='liblinear',\n                                                           class_weight='balanced',\n                                                           C=0.1))]),\n                      'sel__k', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50])","716938ad":"plot_validation_curve(Pipeline([('sel', SelectKBest()),\n                                ('clf', LogisticRegression(penalty=\"l1\",\n                                                           solver='liblinear',\n                                                           class_weight='balanced',\n                                                           C=0.05))]),\n                      'sel__k', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50])","1f7ba59c":"plot_validation_curve(Pipeline([('sel', SelectKBest()),\n                                ('clf', LogisticRegression(penalty=\"l1\",\n                                                           solver=\"liblinear\",\n                                                           class_weight=\"balanced\",\n                                                           C=0.04))]),\n                      'sel__k', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50])","007248e1":"plot_validation_curve(RFE(LogisticRegression(penalty=\"l1\",\n                                             solver='liblinear',\n                                             class_weight='balanced',\n                                             C=0.1)),\n                      'n_features_to_select', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50])","abd9767a":"plot_validation_curve(LinearDiscriminantAnalysis(solver='lsqr'),\n                      'shrinkage', [0.001, 0.001, .01, .1, 1])","f0aafcf4":"plot_validation_curve(SVC(gamma='scale',\n                          probability=True),\n                      'kernel', ['linear', 'poly', 'rbf', 'sigmoid'])","8dfd5e3f":"plot_validation_curve(SVC(gamma=\"auto\", # gamma is not really a parameter\n                                        # of the linear kernel, this is\n                                        # just to silence some warnings.\n                          probability=True), \n                      'C', [1e-3, 1e-2, 1e-1, 1e+0, 1e+1, 1e+2, 1e+3])","225863ec":"plot_validation_curve(SVC(gamma=\"scale\",\n                          kernel=\"sigmoid\",\n                          probability=True),\n                      \"C\", [1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1e+0, 1e+1, 1e+2, 1e+3])","bad934fd":"plot_validation_curve(SVC(gamma='scale',\n                          kernel='sigmoid',\n                          C=1e-4,\n                          probability=True),\n                      'coef0', [1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1e+0, 1e+1, 1e+2, 1e+3])","c6451b44":"plot_validation_curve(SVC(kernel=\"sigmoid\",\n                          coef0=10,\n                          C=1e-4,\n                          probability=True),\n                      \"gamma\", [1e-5, 1e-4, 1e-3, 1e-2, 1e-1])","d3a22657":"plot_validation_curve(SVC(gamma='scale',\n                          kernel='poly',\n                          probability=True),\n                      'degree', [1, 2, 3, 4, 5])","31082a75":"plot_validation_curve(SVC(gamma=\"scale\",\n                          kernel=\"poly\",\n                          degree=2,\n                          probability=True),\n                      \"coef0\", [.001, .002, .005, .01, .02, 0.05, .1, .2, .5, 1])","16a1bf01":"plot_validation_curve(SVC(gamma=\"scale\",\n                          kernel=\"poly\",\n                          degree=2,\n                          coef0=0.05,\n                          probability=True),\n                      \"C\", [1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1,10,100])","bd02000c":"plot_validation_curve(SVC(gamma='scale',\n                          kernel='poly',\n                          degree=3,\n                          probability=True),\n                      'coef0', [.01, .02, 0.05, .1, .2, .5, 1, 2, 5, 10, 20, 50])","13bf5c01":"plot_validation_curve(SVC(gamma=\"scale\",\n                          kernel=\"poly\",\n                          degree=3,\n                          coef0=1,\n                          probability=True),\n                      \"gamma\", [1e-10, 1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1])","0b7385da":"plot_validation_curve(SGDClassifier(loss='modified_huber',\n                                    max_iter=1000,\n                                    tol=1e-3),\n                      'alpha', [1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1])","8c6dda25":"plot_validation_curve(Pipeline([('std', StandardScaler()),\n                                ('clf', SGDClassifier(loss='modified_huber',\n                                                      max_iter=1000,\n                                                      tol=1e-3))]),\n                      'clf__alpha', [1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1])","00906e97":"plot_validation_curve(RandomForestClassifier(max_depth=2, n_estimators=10),\n                      'min_samples_leaf', [10, 20, 30, 40, 50, 60, 70, 80])","61aceb5f":"plot_validation_curve(BaggingClassifier(LogisticRegression(C=0.1,\n                                                           penalty='l1',\n                                                           class_weight='balanced',\n                                                           solver='liblinear',\n                                                           random_state=0),\n                                        max_samples=0.8,\n                                        bootstrap=True,\n                                        random_state=0),\n                      'n_estimators', [10, 20, 30, 40, 50, 60, 70, 80, 90, 100])","3ba95205":"If $C$ is too large, overfitting starts as soon as we take more than the two most significant features into account.  For $C = 0.1$ it becomes pretty severe as $k$ increses:","7584dab1":"Again, if we keep $C$ and $\\mathrm{coef}_0$, the choice of $\\gamma = 0.01$ shows some reduction in overfitting:","3a9fd595":"If we keep $C = 0.05$, which is only slightly too large, training and cross-validation score still start to diverge when taking more than two features into account, but the model does not overfit as extremely:","35fdabb5":"For the $l_1$ norm, overfitting starts for $C > 0.04$.","6c0589d0":"Similarly, in the cubic case, for $\\mathrm{coef}_0 = 1$ there is still overfitting but some improvement in cross-validation score:","b09b7dc6":"## Linear discriminant analysis\nFor [linear discriminant analysis](https:\/\/scikit-learn.org\/stable\/modules\/lda_qda.html#lda-qda), overfitting seems to occur for all shrinkages.","a9b7118b":"## Support vector machines\nFor [support vector machines](https:\/\/scikit-learn.org\/stable\/modules\/svm.html#svm-classification), it seems to be very difficult to find parameter combinatins that do not overfit.\nLet's first have a look at the different kernels with the default parameters:","0a198ecb":"Let's use the area under the ROC curve as the scoring variable as in the competition, and use stratified 5 times cross validation repeated 10 times as the cross validation strategy.","ad1fa8ba":"## Stochastic gradient descent\n\n[Stochastic gradient descent](https:\/\/scikit-learn.org\/stable\/modules\/sgd.html#sgd) overfits for all $\\alpha$.","9e6f7f86":"Using balanced class weights does improve performance for $C = 0.03$ but still overfits for $C > 0.04$.","a02ac429":"### Linear kernel\nWe start by investigating the linear kernel, which has only one parameter $C$.  It overfits for all values of $C$.","1c804fe9":"## Bagging\nLet's have a look at [bagging](https:\/\/scikit-learn.org\/stable\/modules\/ensemble.html#bagging).  This does still overfit:","8c4afe22":"So let's have a look at some examples.\n\n## Dummy classifiers\nscikit-learn contains some [dummy classifiers](https:\/\/scikit-learn.org\/stable\/modules\/model_evaluation.html#dummy-estimators) that implement simple rules of thumb.  These should certainly not overfit, but let's verify:","b245d17e":"Standardization does not substantially change this, but seems to add a bit of overfitting since the standardization adds more parameters to be fitted.  (Most public kernels in the competition that do standardization do this on the entire training set outside the cross validation loop, so they fail to detect this effect.)","46f7ba79":"If we fix $C$, the choice of $\\mathrm{coef}_0 = 10$ seems to show some reduced overfitting:","c60ce6e5":"So we fix $\\mathrm{coeff}_0 = 0.05$ and investigate $C$.  Unfortunately, overfitting occurs for all values of $C$:","7f46c947":"## $k$ nearest neighbors\nFor uniformly weighted [$k$ nearest neighbors](https:\/\/scikit-learn.org\/stable\/modules\/neighbors.html#classification), overfitting reduces for large $k$, and vanishes around $k = 120$.  Note that for $k = 200$ for stratified 5 fold cross validation the classifier predicts simply the class probabilities in the entire test set, to the area under the ROC curve drops to $0$.","20242ee1":"Standardization does not change anything:","2b2e7a7c":"## Random forest\nHow about [random forest](https:\/\/scikit-learn.org\/stable\/modules\/ensemble.html#forest)?  Even if we severely restict the maximal depth of trees, and look at the minimal number of samples per leaf, overfitting only stops when the AUC drops to $0.5$.","fa311c6a":"Let's investigate the quadratic case.  For $\\mathrm{coef}_0 = 0.05$ there is still overfitting but some improvement in cross-validation score:","63e6bb4c":"### Polynomial kernel\nNow let's have a look at polynomial kernels.  All degrees overfit with the default parameters:","e661b129":"For $C = 0.04$, since there was no severe overfitting even on the complete dataset, this also holds if we restrict to the $k$ most significant features.  However, the performance does not improve once we go beyond the two most significant features.","e025ab58":"# How Over Do You Fit?\n*Abstract*.  We create validation curves for some basic models trained on the data of the Don't Overfit! II competition.\n\n## Introduction\nThe [Dont't Overfit! II competition](https:\/\/www.kaggle.com\/c\/dont-overfit-ii) challenges us to model a binary target depending on 200 continuous variables without overfitting, using only 250 training samples.  For low-dimensional problems, whether a model underfits or overfits can be easily decided by visual inspection, as is nicely explained in the scikit-learn example [Underfitting vs. Overfitting](https:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_underfitting_overfitting.html).\n![image](https:\/\/scikit-learn.org\/stable\/_images\/sphx_glr_plot_underfitting_overfitting_001.png)\nQuoting from there, \"the plot shows the function that we want to approximate, which is a part of the cosine function.  In addition, the samples from the real function and the approximations of different models are displayed.  The models have polynomial features of different degrees. We can see that a linear function (polynomial with degree 1) is not sufficient to fit the training samples. This is called underfitting. A polynomial of degree 4 approximates the true function almost perfectly. However, for higher degrees the model will overfit the training data, i.e. it learns the noise of the training data.\"\n\nHowever, as stated in the scikit-learn [User Guide](https:\/\/scikit-learn.org\/stable\/modules\/learning_curve.html), \"in the simple one-dimensional problem that we have seen in the example it is easy to see whether the estimator suffers from bias or variance.  However, in high-dimensional spaces, models can become very difficult to visualize.''  Let's have a look at the scikit-learn example [Plotting Validation Curves](https:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_validation_curve.html):\n![image](https:\/\/scikit-learn.org\/stable\/_images\/sphx_glr_plot_validation_curve_001.png)\nQuoting from there, \"in this plot you can see the training scores and validation scores of an SVM for different values of the kernel parameter gamma.  For very low values of gamma, you can see that both the training score and the validation score are low. This is called underfitting. Medium values of gamma will result in high values for both scores, i.e. the classifier is performing fairly well.  If gamma is too high, the classifier will overfit, which means that the training score is good but the validation score is poor.\"\n\nSo let's apply this idea to the Don't Overfit! II competition.\n\nAs usual, we start by loading some libraries (input hidden).","9834e87b":"Here, overfitting reduces slightly for $\\gamma < 10^{-6}$, but is still massive for all $\\gamma$:","fc452e69":"### Sigmoid kernel\nNow let's have a look at the sigmoid kernel which has parameters $\\gamma$, $C$ and $\\mathrm{coef}_0$.\nFor $C = 10^{-4}$, overfitting reduces a bit.","1e484e9f":"Standardization does not change the situation.","3a64439f":"Then we load the training data and convert it to scikit-learn's (X, y) format.  The output is hidden since everybody is probably already familiar with it.","c25bb9c6":"For distance weighted $k$ nearest neighbors, the model overfits for all $k$ as to be expected, but the cross-validation score increases for larger $k$.","cf6eb627":"The following function is a wrapper around [validation_curve](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.validation_curve.html) that acually plots the output, slightly adapted from the scikit-learn example [Plotting Validation Curves](https:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_validation_curve.html):","61751a7e":"## Logistic regression\n[Logistic regression](https:\/\/scikit-learn.org\/stable\/modules\/linear_model.html#logistic-regression) overfits for the $l_2$ norm.","ef49de4e":"Instead of selecting the featues upfront, in the public kernes in the competition it's pupular to use [recursive feature elimination](https:\/\/scikit-learn.org\/stable\/modules\/feature_selection.html#rfe). However, this does not reduce overfitting."}}