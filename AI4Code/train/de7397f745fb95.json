{"cell_type":{"e4934dbd":"code","e7bdd2be":"code","bbbd7bac":"code","e2fe0660":"code","a8127824":"code","f697c088":"code","17c49f9a":"code","7e384908":"code","2a2f3d9d":"code","492edd1e":"code","436cb626":"code","33f02c7a":"code","cd6149f5":"code","3bd766de":"code","10fbf563":"code","58db7eaf":"code","cd4242be":"code","030d3447":"code","d9046c8d":"code","de125bdc":"code","deca7c05":"code","39493c57":"code","58710ad2":"code","32dcdfb6":"code","79d50102":"code","3c840e7a":"code","21f725d2":"code","e3f4fbe2":"code","59296489":"code","511765fe":"code","236b102a":"code","1f188a5a":"markdown","599ab344":"markdown","8c0a1139":"markdown","f60e9ff0":"markdown","80b0e644":"markdown","1c869486":"markdown","1a47dab4":"markdown","2a3db8ce":"markdown","f1a49950":"markdown","e6ebe39b":"markdown","11bb6524":"markdown","805e4e66":"markdown","ef4a6e71":"markdown","898fadad":"markdown","25ef7a3f":"markdown","21e73427":"markdown","5134478a":"markdown","f52f8c8d":"markdown","641a6b25":"markdown","dbd9f6e4":"markdown","a2f1109a":"markdown","80914c80":"markdown","23f0a202":"markdown","2f34cf6a":"markdown","8aace973":"markdown","65bcf687":"markdown","b4d20f38":"markdown","b34f6621":"markdown"},"source":{"e4934dbd":"from IPython.display import Image\nImage(filename='\/kaggle\/input\/ipl-dataset\/ipl-bcc.jpg', width=\"800\", height='50')","e7bdd2be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style(\"whitegrid\")\nplt.style.use(\"fivethirtyeight\")\n\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bbbd7bac":"path0 = '\/kaggle\/input\/ipl\/deliveries.csv'\npath1 = '\/kaggle\/input\/ipl\/matches.csv'","e2fe0660":"score = pd.read_csv(path0)\nmatch = pd.read_csv(path1)\nmatch.head()\n# print(match.shape)","a8127824":"match.columns","f697c088":"score.head()\n# print(score.shape)","17c49f9a":"score.shape","7e384908":"score.columns","2a2f3d9d":"match.isnull().sum()","492edd1e":"match.shape","436cb626":"sns.heatmap(match.isnull(), yticklabels = False)  #checking NULl Values via graph,where you can find yellow colour which means that column contains NUll values","33f02c7a":"match.drop('umpire3',axis = 1, inplace=True)","cd6149f5":"score.isnull().sum()","3bd766de":"match['team1'].unique()\n","10fbf563":"match.replace(['Sunrisers Hyderabad', 'Mumbai Indians', 'Gujarat Lions',\n       'Rising Pune Supergiant', 'Royal Challengers Bangalore',\n       'Kolkata Knight Riders', 'Delhi Daredevils', 'Kings XI Punjab',\n       'Chennai Super Kings', 'Rajasthan Royals', 'Deccan Chargers',\n       'Kochi Tuskers Kerala', 'Pune Warriors', 'Rising Pune Supergiants'],['SRH','MI','GL','RPS','RCB','KKR','DD','KXIP','CSK','RR','DC','KTK','PW','RPS'],inplace = True)\n\nscore.replace(['Sunrisers Hyderabad', 'Mumbai Indians', 'Gujarat Lions',\n       'Rising Pune Supergiant', 'Royal Challengers Bangalore',\n       'Kolkata Knight Riders', 'Delhi Daredevils', 'Kings XI Punjab',\n       'Chennai Super Kings', 'Rajasthan Royals', 'Deccan Chargers',\n       'Kochi Tuskers Kerala', 'Pune Warriors', 'Rising Pune Supergiants'],['SR','MI','GL','RPS','RCB','KKR','DD','KXIP','CSK','RR','DC','KTK','PW','RPS'],inplace = True)","58db7eaf":"df=match.iloc[[match['win_by_runs'].idxmax()]]\ndf[['season','team1','team2','winner','win_by_runs']]","cd4242be":"df=match.iloc[[match['win_by_wickets'].idxmax()]]\ndf[['season','team1','team2','winner','win_by_wickets']]","030d3447":"# lets see how many matches are being played every season\nplt.subplots(figsize=(15,5))\nsns.countplot(x = 'season', data = match, palette = 'dark')\nplt.show()","d9046c8d":"# By this graph you ca nsee that Mumbai Indians have won most of the matches in the IPL\nplt.figure(figsize=(15,8))\nsns.countplot(x = 'winner', data = match, palette = ['darkorange','#d11d9b','purple',\n                                                       'tomato','gold','royalblue','red','#e04f16','yellow','gold'\n                                                       ,'black','silver','b'])\nplt.show()","de125bdc":"df=match[match['toss_winner']==match['winner']]\nslices=[len(df),(577-len(df))]\nlabels=['yes','no']\nplt.pie(slices,labels=labels,startangle=90,shadow=True,explode=(0,0.05),autopct='%1.1f%%',colors=['r','g'])\nfig = plt.gcf()\nfig.set_size_inches(9,9)\nplt.title(\"Toss winner is match winner\")\nplt.show()","deca7c05":"plt.subplots(figsize=(15,15))\nax = match['venue'].value_counts().sort_values(ascending=True).plot.barh(width=.9,color=sns.color_palette('RdBu',40))\nax.set_xlabel('Grounds')\nax.set_ylabel('count')\nplt.show()","39493c57":"# Top cities where the matches are held\nplt.figure(figsize=(15,8))\nfav_cities = match['city'].value_counts().reset_index()\nfav_cities.columns = ['city','count']\nsns.barplot(y = 'count',x = 'city', data = fav_cities[:10])\nplt.show()","58710ad2":"plt.figure(figsize=(15,6))\nfav_ground = match['venue'].value_counts().reset_index()\nfav_ground.columns = ['venue','count']\nsns.barplot(x = 'count',y = 'venue', data = fav_ground[:10], palette = ['darkorange','#d11d9b','purple',\n                                                       'tomato','gold','royalblue','red','#e04f16','yellow','gold'\n                                                       ])\nplt.show()","32dcdfb6":"print('Toss Decisions in %\\n',((match['toss_decision']).value_counts())\/577*100)","79d50102":"plt.subplots(figsize=(15,8))\nsns.countplot(x='season',hue='toss_decision',data=match)\nplt.show()\n","3c840e7a":"plt.subplots(figsize=(15,9))\ntemp_series = match.toss_decision.value_counts()\nlabels = (np.array(temp_series.index))\nsizes = (np.array((temp_series \/ temp_series.sum())*100))\ncolors = ['gold', 'lightskyblue']\nplt.pie(sizes, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title(\"Toss decision percentage\")\nplt.show()","21f725d2":"plt.subplots(figsize=(15,8))\nax=match['toss_winner'].value_counts().plot.bar(width=0.9,color=sns.color_palette('Blues_d',20))\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))\nplt.show()","e3f4fbe2":"plt.subplots(figsize=(15,8))\n#the code used is very basic but gets the job done easily\nax = match['player_of_match'].value_counts().head(10).plot.bar(width=.8, color=sns.color_palette('inferno',10))  #counts the values corresponding \n# to each batsman and then filters out the top 10 batsman and then plots a bargraph \nax.set_xlabel('player_of_match') \nax.set_ylabel('count')\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+0.25))\nplt.show()","59296489":"for i in range(2008,2017):\n    df=((match[match['season']==i]).iloc[-1]) \n    print(df[[1,10]].values)","511765fe":"player = match.player_of_match.value_counts()[:10]\nlabels = np.array(player.index)\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots()\nrects = ax.bar(ind, np.array(player), width=width, color='y')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top player of the match awardees\")\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+0.25))\nplt.show()","236b102a":"# player with most boundries\ndata = score[(score['batsman_runs'] == 4) | (score['batsman_runs'] == 6)][['batsman','batsman_runs']].groupby('batsman').count().reset_index().sort_values(ascending = False, by = 'batsman_runs')\nplt.subplots(figsize=(15,9))\nsns.set_style(\"whitegrid\")\nsns.despine()\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\nsns.barplot(x = 'batsman_runs', y = 'batsman', data = data[:10],palette=\"Reds\")","1f188a5a":"The Indian Premier League (IPL) is a professional Twenty20 cricket league in India contested during March or April and May of every year by eight teams representing eight different cities in India.The league was founded by the Board of Control for Cricket in India (BCCI) in 2008. The IPL has an exclusive window in ICC Future Tours Programme.\n\n\nThe IPL is the most-attended cricket league in the world and in 2014 ranked sixth by average attendance among all sports leagues. In 2010, the IPL became the first sporting event in the world to be broadcast live on YouTube. The brand value of the IPL in 2019 was \u20b9475 billion, according to Duff & Phelps. According to BCCI, the 2015 IPL season contributed \u20b911.5 billion to the GDP of the Indian economy.\n\n\nThere have been twelve seasons of the IPL tournament. The current IPL title holders are the Mumbai Indians, who won the 2019 season. The 2020 season has been indefinitely suspended due to the ongoing COVID-19 pandemic\n.","599ab344":"# <center><font color='blue'> Indian Premier League <\/font><\/center>","8c0a1139":"## <font color='red'> Hi there! Thank you for opening my Kernel. I am super excited to share my Kernel with the Kaggle community. Please be sure to upvote, fork, and comment. Thanks, and may you have \"statistically significant\" luck!<\/font>","f60e9ff0":"### Maximum Man Of Matches ","80b0e644":"**Toss Decisions across Seasons**","1c869486":"### Top cities where the matches are held","1a47dab4":"It is not really the case it seems. The chance is 50-50 for both the teams.\n","2a3db8ce":"The year 2013 has most number of matches and 2010 less number of matches ","f1a49950":"player_dismissed, dismissal_kind, fielder have null values because not on every ball a player is out\n\n\nget list of team names and replace with short forms\n\n","e6ebe39b":"###  Favorite Grounds","11bb6524":"### Winning Year","805e4e66":"Mumbai is the top city where most number of matches have occured","ef4a6e71":"# Introduction\n\n1. Importing the Dataset\n2. Data Cleaning\n3. Exploratory Data Analysis\n    - Number of matches per sessions\n    - Most number of winning team\n    - Is Toss Winner Also the Match Winner?\n    - Top cities where the matches are held\n    - Favorite Grounds\n    - Top cities where the matches are held\n    - Toss Decisions\n    - Maximum Toss Winners\n    - Maximum Man Of Matches\n    - Winning Year\n    - Top players of the IPL\n    - Most boundries of the player\n","898fadad":"**Since umpire3 contains all null values we can remove the column**","25ef7a3f":"### Toss Decisions","21e73427":"# Data Cleaning","5134478a":"### Most boundries of the player","f52f8c8d":"### Top players of the IPL","641a6b25":"Kolkata Knight Riders(KKR) defeated Gujarat Lions(GL) with the highest wickets difference","dbd9f6e4":"###  Maximum Toss Winners","a2f1109a":"## <font color='red'>Consider an Upvote if you like it !<\/font>","80914c80":"# Exploratory Data Analysis","23f0a202":"### Is Toss Winner Also the Match Winner?","2f34cf6a":"### Number of matches per sessions","8aace973":"**Replace the team name with its short form**","65bcf687":"So percentage of times teams batting second has won is 53.2. Now let us split this by year and see the distribution.","b4d20f38":"### Most number of winning team","b34f6621":"Mumbai Indians(MI) defeated Delhi Daredevils(DD) with the highest run difference"}}