{"cell_type":{"2960cb6e":"code","55bb60d9":"code","ec384842":"code","17dee11b":"code","4a94859b":"code","89c48c5a":"code","8b51650d":"code","e3566c4d":"code","c5ea83d4":"code","355a0256":"code","5066cb4b":"code","5c5de6f4":"code","7ef9a9cc":"code","18bc3473":"code","b9b2288f":"markdown"},"source":{"2960cb6e":"# import necessary modules\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport os\nimport warnings\nfrom datetime import datetime\nfrom scipy import stats\nfrom scipy.stats import norm, skew, probplot \n\nwarnings.filterwarnings('ignore')\ndaybasecount = 4                  #antal dage der summeres over til estimat for kurvefaktorer\nbaseday = 98 - float(daybasecount-1)\/2.  #89.5  # var 86          #den dag i \u00e5ret hvor der regnes ud fra\nexponent = 1.\/float(daybasecount) #exponent der overs\u00e6tter daybasecount increase til daglig increase\nfatalityBaseDayShift = 10         #antal dage basl\u00e6ns der beregnes d\u00f8dsfald fra\nmaxincrease = 140                 # st\u00f8rste tilladte increase m\u00e5lt i procent over 4 dage\nmaxDeadPrDay = 1500","55bb60d9":"#print(os.listdir(\"..\/kaggle-Covid19\/covid19-global-forecasting-week-2\"))\ndftrain = pd.read_csv('..\/input\/covid19-global-forecasting-week-3\/train.csv', parse_dates=['Date']).sort_values(by=['Country_Region', 'Date'])\ndftest    = pd.read_csv('..\/input\/covid19-global-forecasting-week-3\/test.csv', parse_dates=['Date']).sort_values(by=['Country_Region', 'Date'])\n\n\n# CURVE SMOOTHING\n#Add averages\n#dftrain ['Cases_m'] =  dftrain.groupby(['Country_Region', 'Province_State'])[['ConfirmedCases']].transform(lambda x: x.shift(1)) \n#dftrain ['Cases_p']  = dftrain.groupby(['Country_Region', 'Province_State'])[['ConfirmedCases']].transform(lambda x: x.shift(-1)) \n#dftrain ['Cases_ave'] = 0.5*(dftrain['ConfirmedCases']+0.5*(dftrain['Cases_p']+dftrain['Cases_m']))\n#case_cols = ['ConfirmedCases','Cases_m','Cases_p','Cases_ave']\n\n#dftrain ['Fatalities_m'] =  dftrain.groupby(['Country_Region', 'Province_State'])[['Fatalities']].transform(lambda x: x.shift(1)) \n#dftrain ['Fatalities_p']  = dftrain.groupby(['Country_Region', 'Province_State'])[['Fatalities']].transform(lambda x: x.shift(-1)) \n#dftrain ['Fatalities_ave'] = 0.5*(dftrain['Fatalities']+0.5*(dftrain['Fatalities_p']+dftrain['Fatalities_m']))\n#fata_cols = ['Fatalities','Fatalities_m','Fatalities_p','Fatalities_ave']\n\n#date_max = dftrain[\"Date\"].max()\n#mask = df[\"Date\"]==date_max\n#dftrain.loc[mask,'Cases_ave']         = 0.75*dftrain.loc[mask,'ConfirmedCases']+0.25*dftrain.loc[mask,'Cases_m']\n#dftrain.loc[mask,'Fatalities_ave']    = 0.75*dftrain.loc[mask,'Fatalities']    +0.25*dftrain.loc[mask,'Fatalities_m']\n#dftrain.drop(['Cases_m', 'Cases_p', 'Fatalities_m','Fatalities_p'],axis=1,inplace=True)\n#dftrain.drop(['ConfirmedCases','Fatalities'],axis=1,inplace = True)\n#dftrain.rename(columns={'Cases_ave':'ConfirmedCases','Fatalities_ave':'Fatalities'},inplace=True)\n#dftrain['ConfirmedCases','Fatalities'].fillna(0, inplace=True)\n\nppp_tabel = pd.read_csv('..\/input\/country-ppp\/Country_PPP.csv', sep='\\s+')#.sort_values(by=['Country'])\nppp_tabel.drop('Id', 1,inplace=True)\nppp_tabel = ppp_tabel.append({'Country' : 'Burma' , 'ppp' : 8000} , ignore_index=True)\nppp_tabel = ppp_tabel.append({'Country' : 'MS_Zaandam' , 'ppp' : 40000} , ignore_index=True)\nppp_tabel = ppp_tabel.append({'Country' : 'West_Bank_and_Gaza' , 'ppp' : 20000} , ignore_index=True)\n\nppp_tabel[\"Country\"].replace( '_',' ', regex=True,inplace=True)  # _ var indf\u00f8rt for at f\u00e5 den til at l\u00e6se\nppp_tabel[\"Country\"].replace( 'United States','US', regex=True,inplace=True)  # _ var indf\u00f8rt for at f\u00e5 den til at l\u00e6se\nppp_tabel.rename(columns={'Country':'Country_Region'},inplace=True)\nppp_tabel.sort_values('Country_Region',inplace=True)","ec384842":"dftrain['Dayofyear'] = dftrain['Date'].dt.dayofyear\ndftest['Dayofyear'] = dftest['Date'].dt.dayofyear\ndftest['Expo'] = dftest['Dayofyear']-baseday\nprint(dftrain.tail(5))\ndftest = dftest.merge(dftrain[['Country_Region','Province_State','Date','ConfirmedCases','Fatalities']]\n                      , on=['Country_Region','Province_State','Date'], how='left', indicator=True)\n","17dee11b":"#dftrain = dftrain.loc[dftrain['Country_Region'] == 'Denmark']\n\ndftrain['Province_State'].fillna(dftrain['Country_Region'], inplace=True)\ndftest ['Province_State_orig'] = dftest ['Province_State']\ndftest ['Province_State'].fillna(dftest['Country_Region'], inplace=True)\n\ndftrain.sort_values(by =['Country_Region', 'Province_State','Date'], inplace=True)\ndftrain[['NewCases','NewFatalities']] = dftrain.groupby(['Country_Region', 'Province_State'])[['ConfirmedCases','Fatalities']].transform(lambda x: x.diff()) \ndftrain['FatalityBasis'] = dftrain.groupby(['Country_Region', 'Province_State'])[['ConfirmedCases']].transform(lambda x: x.shift(fatalityBaseDayShift)) \n\n#smid alt andet end senete bort\ndftrain = dftrain.loc[dftrain['Dayofyear'] > 80]\n\n#find sidste dato med oplysninger\nto_sum = ['Country_Region','Province_State','ConfirmedCases','Fatalities']\nlastinfo = dftrain.groupby(['Country_Region','Province_State']).tail(1)[to_sum]\nlastinfo.rename(columns={'ConfirmedCases':'ConfirmedCases_init','Fatalities':'Fatalities_init'},inplace=True)\n\n#find gennemsnit af sidste 4(=daybasecount) dage\nto_sum = ['ConfirmedCases','NewCases','FatalityBasis']\ngrouped = dftrain.groupby(['Country_Region','Province_State']).tail(daybasecount)\ngrouped_gem = dftrain.groupby(['Country_Region','Province_State'])[to_sum].mean()\ngrouped_gem.reset_index(inplace=True)\ngrouped_gem.rename(columns={'ConfirmedCases':'ConfirmedCases_base','Fatalities':'Fatalities_base'\n                                ,'NewCases':'NewCases_base'},inplace=True)\ngrouped_gem = grouped_gem.merge(lastinfo, on=['Country_Region','Province_State'], how='outer', indicator=True)\n                       \nto_sum = ['NewCases','NewFatalities','FatalityBasis']\ngrouped2 = grouped.groupby(['Country_Region'])[to_sum].sum()\ngrouped2['FatalityPct'] = 100*grouped2['NewFatalities']\/grouped2['FatalityBasis']\n\ngrouped2.rename(columns={'NewCases':'NewCases2','NewFatalities':'NewFatalities2'\n                         ,'FatalityBasis':'FatalityBasis2','FatalityPct':'FatalityPct2'},inplace=True)\n\n\nwith_ppp = pd.merge(grouped2, ppp_tabel, on=['Country_Region'], how='outer', indicator=True)\nmissing = with_ppp.loc[with_ppp['ppp'].isnull()]\ndftrain.head(60)\n","4a94859b":"#grouped_gem.head(5)\n#print(\"grouped_gem columns =\",grouped_gem.columns)\n#grouped[['Country_Region','FatalityPct2','Factor']].head(5)","89c48c5a":"#find gennemsnit af forrige 4(=daybasecount) dage\ngrouped=dftrain.groupby(['Country_Region','Province_State']).tail(daybasecount*2)\ngrouped=grouped.groupby(['Country_Region','Province_State']).head(daybasecount)\ngrouped.drop(['FatalityBasis'],axis=1,inplace=True)\n\nto_sum = ['NewCases','NewFatalities']\ngrouped1 = grouped.groupby(['Country_Region'])[to_sum].sum()\n\ngrouped1.rename(columns={'NewCases':'NewCases1','NewFatalities':'NewFatalities1'}, inplace=True)\n\n# beregn grundl\u00e6ggende increase ud fra sidst og forrige 4(=daybasecount) dage\ngrouped = pd.merge(grouped1, grouped2, on=['Country_Region'])\ngrouped['CasesIncreasePct'] = 100*(grouped['NewCases2']\/grouped['NewCases1']-1)\nmask = grouped['CasesIncreasePct'] > maxincrease\ngrouped.loc[mask,'CasesIncreasePct'] = maxincrease\nmask = grouped['CasesIncreasePct'] < 0\ngrouped.loc[mask,'CasesIncreasePct'] = 0\nmask = grouped['CasesIncreasePct'].isnull()\ngrouped.loc[mask,'CasesIncreasePct'] = 0\ngrouped['Factor'] = (grouped['CasesIncreasePct']\/100+1)**exponent\n\ngrouped = pd.merge(grouped, ppp_tabel, on=['Country_Region'])\n#grouped['ppp'].isnull().sum()\n\n# afgr\u00e6ns Fatality procent ud fra h\u00e5ndestimerede kurver med ppp \ngrouped['ppp'] = grouped['ppp']\/10000.\nif False:\n    mask = (grouped['FatalityPct2'] > 9) & (grouped['ppp'] <= 1)\n    grouped.loc[mask,'FatalityPct2'] = 5\n    mask = (grouped['FatalityPct2'] < 5) & (grouped['ppp'] <= 1)\n    grouped.loc[mask,'FatalityPct2'] = 5\n    mask = (grouped['FatalityPct2'] > 6) & (grouped['ppp'] >= 7)\n    grouped.loc[mask,'FatalityPct2'] = 6\n    mask = (grouped['FatalityPct2'] < 1.5) & (grouped['ppp'] >= 7)\n    grouped.loc[mask,'FatalityPct2'] = 1.5\n    mask = (grouped['FatalityPct2'] > (9.5 - 0.43*grouped['ppp'])) & (grouped['ppp'] > 1) & (grouped['ppp'] < 7)\n    grouped.loc[mask,'FatalityPct2'] = (9.5 - 0.43*grouped['ppp'])\n    mask = (grouped['FatalityPct2'] < (5.6 - 0.5*grouped['ppp'])) & (grouped['ppp'] > 1) & (grouped['ppp'] < 7)\n    grouped.loc[mask,'FatalityPct2'] = (5.6 - 0.5*grouped['ppp'])\n    mask = (grouped['FatalityPct2'].isnull()) &  (grouped['ppp'] <= 1)\n    grouped.loc[mask,'FatalityPct2'] = 7\n    mask = (grouped['FatalityPct2'].isnull()) &  (grouped['ppp'] >= 7)\n    grouped.loc[mask,'FatalityPct2'] = 4\n    mask = (grouped['FatalityPct2'].isnull()) & (grouped['ppp'] > 1) & (grouped['ppp'] < 7)\n    grouped.loc[mask,'FatalityPct2'] = (7.5 - 0.5*grouped['ppp'])\nelse:\n    mask = (grouped['FatalityPct2'] > 4) & (grouped['ppp'] <= 1)\n    grouped.loc[mask,'FatalityPct2'] = 3\n    mask = (grouped['FatalityPct2'] < 1) & (grouped['ppp'] <= 1)\n    grouped.loc[mask,'FatalityPct2'] = 2\n    mask = (grouped['FatalityPct2'] > 1.5) & (grouped['ppp'] >= 7)\n    grouped.loc[mask,'FatalityPct2'] = 1.5\n    mask = (grouped['FatalityPct2'] < 0.5) & (grouped['ppp'] >= 7)\n    grouped.loc[mask,'FatalityPct2'] = 0.5\n    mask = (grouped['FatalityPct2'] > (4.5 - 0.43*grouped['ppp'])) & (grouped['ppp'] > 1) & (grouped['ppp'] < 7)\n    grouped.loc[mask,'FatalityPct2'] = (4.5 - 0.43*grouped['ppp'])\n    mask = (grouped['FatalityPct2'] < (1.1 - 0.1*grouped['ppp'])) & (grouped['ppp'] > 1) & (grouped['ppp'] < 7)\n    grouped.loc[mask,'FatalityPct2'] = (1.1 - 0.1*grouped['ppp'])\n    mask = (grouped['FatalityPct2'].isnull()) &  (grouped['ppp'] <= 1)\n    grouped.loc[mask,'FatalityPct2'] = 3\n    mask = (grouped['FatalityPct2'].isnull()) &  (grouped['ppp'] >= 7)\n    grouped.loc[mask,'FatalityPct2'] = 1\n    mask = (grouped['FatalityPct2'].isnull()) & (grouped['ppp'] > 1) & (grouped['ppp'] < 7)\n    grouped.loc[mask,'FatalityPct2'] = (2.6 - 0.23*grouped['ppp'])","8b51650d":"dftest.drop('_merge',axis=1,inplace= True)\ndftest = dftest.merge(grouped[['Country_Region','FatalityPct2','Factor']], on=['Country_Region'], how='left')\ndftest = dftest.merge(grouped_gem[['Province_State','Country_Region','ConfirmedCases_base','ConfirmedCases_init','NewCases_base','Fatalities_init','FatalityBasis']], on=['Province_State','Country_Region'], how='left')\n","e3566c4d":"dftest['ConfirmedCases_shift'] = dftest.groupby(['Country_Region', 'Province_State'])[['ConfirmedCases']].transform(lambda x: x.shift(1)) \n\nmask = dftest['ConfirmedCases'].isnull()\n# find new cases\ndftest.loc[mask,'NewCases'] = dftest.loc[mask,'NewCases_base']*(dftest.loc[mask,'Factor']**dftest.loc[mask,'Expo'])\n\n#dftest.loc[mask,'Confirmed'] = dftest.loc[mask,'FatalityBasis2']*(dftest.loc[mask,'Factor']**dftest.loc[mask,'Expo'])\ndftest['NewCases_cum'] = dftest.groupby(['Country_Region', 'Province_State'])[['NewCases']].cumsum() #transform(lambda x: x.shift(1)) \ndftest.loc[mask,'ConfirmedCases'] = dftest.loc[mask,'ConfirmedCases_init'] + dftest.loc[mask,'NewCases_cum']\n\n#juster Fatality n\u00e5r der er rigtig mange cases dvs. der testes meget\nmask3 = dftest['ConfirmedCases'] > 400000\ndftest.loc[mask3,'FatalityPct2'] = dftest.loc[mask3,'FatalityPct2']*0.7\nmask4 = dftest['ConfirmedCases'] > 800000\ndftest.loc[mask4,'FatalityPct2'] = dftest.loc[mask4,'FatalityPct2']*0.7\ndftest['FatalityBasis'] = dftest.groupby(['Country_Region', 'Province_State'])[\n                                                ['ConfirmedCases']].transform(lambda x: x.shift(10)) \ndftest.loc[mask,'NewFatalities'] = dftest.loc[mask,'FatalityBasis'] * dftest.loc[mask,'FatalityPct2']\/100\n# s\u00e6t max tal for antal d\u00f8de pr. dag\nmask2 = dftest['NewFatalities']   > maxDeadPrDay\ndftest.loc[mask2,'NewFatalities'] = maxDeadPrDay\n#print(\"MASK2\",mask2.sum())\n\ndftest['NewFatalities_cum'] = dftest.groupby(['Country_Region', 'Province_State'])[['NewFatalities']].cumsum() #transform(lambda x: x.shift(1)) \ndftest.loc[mask,'Fatalities'] = dftest.loc[mask,'Fatalities_init'] + dftest.loc[mask,'NewFatalities_cum']\n","c5ea83d4":"# Forbered aflevering \ndftest.drop(['Dayofyear',\n       'Expo','FatalityPct2', 'Factor',\n       'ConfirmedCases_base', 'ConfirmedCases_init',\n       'NewCases_base', 'Fatalities_init', 'FatalityBasis',\n       'ConfirmedCases_shift',\n       'NewCases', 'NewCases_cum', 'NewFatalities','NewFatalities_cum'],axis=1,inplace=True)\nfinal = dftest.groupby(['Country_Region','Province_State']).tail(1)\ndftest.drop(['Province_State'],axis=1,inplace=True)\ndftest.rename(columns={'Province_State_orig':'Province_State'},inplace=True)","355a0256":"#final = final.loc[final['Country_Region'] == 'Denmark']\n#final.tail(60)","5066cb4b":"#dftest.tail(60)\n#grouped.loc[grouped['ppp'] > 120].tail(60)","5c5de6f4":"#udtegn fatalitypct og case increase pct som funktion af ppp\nplotgrouped = grouped.loc[grouped['FatalityPct2'] > 0.2]\nplotgrouped = plotgrouped.loc[grouped['NewFatalities2'] > 10]\n#print(plotgrouped)\nplt.figure(figsize=(15,10))\nplt.subplots_adjust(wspace=0.2, hspace=0.2)\n#\nylabels = ['FatalityPct2','CasesIncreasePct']\nys = [plotgrouped['FatalityPct2'],plotgrouped['CasesIncreasePct']]\nloglin = ['log','linear']\nfor iy, y in enumerate(ys):\n    plt.subplot(2,2,1+iy)\n    plt.xticks(rotation=30)\n    plt.xlabel('ppp')\n    plt.ylabel(ylabels[iy])\n    plt.yscale(loglin[iy])\n #   plt.xscale('log')\n    plt.plot(plotgrouped['ppp'],y,'*')\n#    plt.legend(allcountries_ordered[:11])\n#\n#plt.plot(x, y, 'o', color='black');\n#plt.show()","7ef9a9cc":"mask = dftest[\"ConfirmedCases\"].isnull()\nprint(mask.sum())\nerrors = dftest.loc[mask]\nprint(errors)\nmask = dftest[\"Fatalities\"].isnull()\nprint(mask.sum())\nerrors = dftest.loc[mask]\nprint(errors)\ndftest.drop(['Province_State','Country_Region','Date'],axis=1,inplace=True)\nprint(\"dftest columns =\",dftest.columns)\n","18bc3473":"#print(dftest[dftest['Country_Region']=='Burma'])       \ndftest.ForecastId = dftest.ForecastId.astype('int')\n\ndftest['ConfirmedCases'] = dftest['ConfirmedCases'].round().astype(int)\ndftest['Fatalities'] = dftest['Fatalities'].round().astype(int)\n\ndftest.to_csv('submission.csv', index=False)\n","b9b2288f":"#### Read the csv files."}}