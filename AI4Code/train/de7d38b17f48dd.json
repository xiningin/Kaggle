{"cell_type":{"e210d0b0":"code","20549d8e":"code","5085163f":"code","9fb7cb62":"code","052773c8":"code","4170a539":"code","46173a42":"code","25d83600":"code","770ba1d6":"code","1dbceaae":"code","5b505999":"code","8886416e":"code","f537a63d":"code","2b97955e":"code","334404d3":"code","17e5b4e6":"code","6b00f0ff":"code","ebfe46de":"markdown","d40f9982":"markdown","ec7dcf8a":"markdown","eaf4b8bc":"markdown","76cea385":"markdown"},"source":{"e210d0b0":"from sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n","20549d8e":"df=pd.read_csv('..\/input\/graduate-admissions\/Admission_Predict.csv')","5085163f":"df.describe","9fb7cb62":"df.columns","052773c8":"df.describe(include = 'all')","4170a539":"df=df.drop(['Serial No.'], axis = 1)","46173a42":"df.columns","25d83600":"f, (ax1,ax2,ax3) = plt.subplots(1,3, sharey=True, figsize=(15,10))\nax1.scatter(df['GRE Score'], df['Chance of Admit '],color='red')\nax1.set_title('Chance of Admit vs GRE Score')\nax2.scatter(df['TOEFL Score'], df['Chance of Admit '],color='yellow')\nax2.set_title('Chance of Admit vs TOEFL Score')\nax3.scatter(df['CGPA'],df['Chance of Admit '],color='green')\nax3.set_title('Chance of Admit vs CGPA')\n\nplt.show()","770ba1d6":"df.columns","1dbceaae":"y=df['Chance of Admit ']\nX=df.drop(['Chance of Admit '], axis = 1)\nx_train,x_test,y_train,y_test = train_test_split(X,y, test_size = 0.2, random_state = 365)\n\n\n\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Ridge\n\nreg=Ridge()\n","5b505999":"reg.fit(x_train,y_train)","8886416e":"res=reg.predict(x_test)","f537a63d":"reg.score(x_train,y_train)","2b97955e":"reg.intercept_","334404d3":"reg_summary = pd.DataFrame(X.columns.values, columns = ['Features'])\nreg_summary['Weights'] = reg.coef_\nreg_summary","17e5b4e6":"print(res)\nprint(y_test)","6b00f0ff":"plt.scatter(y_test, res,color='green')\nplt.xlabel('Exact values', size = 10)\nplt.ylabel('Predicted values', size = 10)\nplt.show()","ebfe46de":"Mapping of results","d40f9982":"Serial number isnt a crieteria for classfication.","ec7dcf8a":"Splitting dataset and predicting results","eaf4b8bc":"A relative mapping of the basis of classifications vs the result","76cea385":"#  The score of 80% using Ridge Regression is quite acceptable as a solution."}}