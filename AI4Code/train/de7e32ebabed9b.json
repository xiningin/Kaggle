{"cell_type":{"5c5fc66e":"code","06b6f07a":"code","6d0b3fd0":"code","6a12bc42":"code","ab1e25cb":"code","76a27395":"code","61ea722c":"code","ef381ad1":"code","a813ba02":"code","9b8616f7":"code","9d518596":"code","56a55311":"code","23bd18f0":"markdown","c7020404":"markdown","2fc97c54":"markdown","9c4b7cb7":"markdown","cb3bd43c":"markdown","6ce44dd1":"markdown","f50cf6ae":"markdown","700a7b26":"markdown","0abbef7d":"markdown","bdcf0f00":"markdown"},"source":{"5c5fc66e":"# default\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# util\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","06b6f07a":"fpath = '\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv'\ndata = pd.read_csv(fpath, index_col='family_id')\n\nfpath = '\/kaggle\/input\/santa-workshop-tour-2019\/sample_submission.csv'\nsubmission = pd.read_csv(fpath, index_col='family_id')","6d0b3fd0":"data.head()","6a12bc42":"fig, ax = plt.subplots(5, 2, figsize=(30,20))\n\nfor i in range(10):\n    sns.countplot(data[f'choice_{i}'], ax=ax[i\/\/2][i%2])\n\nplt.show()","ab1e25cb":"fig, ax = plt.subplots(1,1, figsize=(12,5))\nsns.countplot(data['n_people'], ax=ax)\nplt.show()","76a27395":"fig, ax = plt.subplots(5, 2, figsize=(30,20))\n\ndata_people = data.groupby('n_people')\nfor i in range(10):\n    sns.heatmap(data_people[f'choice_{i}'].value_counts().unstack().fillna(0), ax=ax[i\/\/2][i%2])\nplt.show()\n","61ea722c":"corr = data.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nf, ax = plt.subplots(figsize=(15, 14))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.1, center=0,square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","ef381ad1":"family_size_dict = data[['n_people']].to_dict()['n_people']\n\ncols = [f'choice_{i}' for i in range(10)]\nchoice_dict = data[cols].to_dict()\n\nN_DAYS = 100\nMAX_OCCUPANCY = 300\nMIN_OCCUPANCY = 125\n\n# from 100 to 1\ndays = list(range(N_DAYS,0,-1))\n\ndef cost_function(prediction):\n\n    penalty = 0\n\n    # We'll use this to count the number of people scheduled each day\n    daily_occupancy = {k:0 for k in days}\n    \n    # Looping over each family; d is the day for each family f\n    for f, d in enumerate(prediction):\n\n        # Using our lookup dictionaries to make simpler variable names\n        n = family_size_dict[f]\n        choice_0 = choice_dict['choice_0'][f]\n        choice_1 = choice_dict['choice_1'][f]\n        choice_2 = choice_dict['choice_2'][f]\n        choice_3 = choice_dict['choice_3'][f]\n        choice_4 = choice_dict['choice_4'][f]\n        choice_5 = choice_dict['choice_5'][f]\n        choice_6 = choice_dict['choice_6'][f]\n        choice_7 = choice_dict['choice_7'][f]\n        choice_8 = choice_dict['choice_8'][f]\n        choice_9 = choice_dict['choice_9'][f]\n\n        # add the family member count to the daily occupancy\n        daily_occupancy[d] += n\n\n        # Calculate the penalty for not getting top preference\n        if d == choice_0:\n            penalty += 0\n        elif d == choice_1:\n            penalty += 50\n        elif d == choice_2:\n            penalty += 50 + 9 * n\n        elif d == choice_3:\n            penalty += 100 + 9 * n\n        elif d == choice_4:\n            penalty += 200 + 9 * n\n        elif d == choice_5:\n            penalty += 200 + 18 * n\n        elif d == choice_6:\n            penalty += 300 + 18 * n\n        elif d == choice_7:\n            penalty += 300 + 36 * n\n        elif d == choice_8:\n            penalty += 400 + 36 * n\n        elif d == choice_9:\n            penalty += 500 + 36 * n + 199 * n\n        else:\n            penalty += 500 + 36 * n + 398 * n\n\n    # for each date, check total occupancy\n    #  (using soft constraints instead of hard constraints)\n    for _, v in daily_occupancy.items():\n        if (v > MAX_OCCUPANCY) or (v < MIN_OCCUPANCY):\n            penalty += 100000000\n\n    # Calculate the accounting cost\n    # The first day (day 100) is treated special\n    accounting_cost = (daily_occupancy[days[0]]-125.0) \/ 400.0 * daily_occupancy[days[0]]**(0.5)\n    # using the max function because the soft constraints might allow occupancy to dip below 125\n    accounting_cost = max(0, accounting_cost)\n    \n    # Loop over the rest of the days, keeping track of previous count\n    yesterday_count = daily_occupancy[days[0]]\n    for day in days[1:]:\n        today_count = daily_occupancy[day]\n        diff = abs(today_count - yesterday_count)\n        accounting_cost += max(0, (daily_occupancy[day]-125.0) \/ 400.0 * daily_occupancy[day]**(0.5 + diff \/ 50.0))\n        yesterday_count = today_count\n\n    return penalty+accounting_cost, penalty, accounting_cost","a813ba02":"# Start with the sample submission values\nbest = submission['assigned_day'].tolist()\nstart_score = cost_function(best)\n\nnew = best.copy()\n# loop over each family\npenalty_list, cost_list = [], [] \n\nfor fam_id, _ in enumerate(best):\n    # loop over each family choice\n    for pick in range(10):\n        day = choice_dict[f'choice_{pick}'][fam_id]\n        temp = new.copy()\n        temp[fam_id] = day # add in the new pick\n        if cost_function(temp)[0] < start_score[0]:\n            new = temp.copy()\n            start_score = cost_function(new)\n            penalty_list.append(start_score[1])\n            cost_list.append(start_score[2])","9b8616f7":"fig = go.Figure()\nfig.add_trace(go.Line(x=list(range(len(penalty_list))), y=penalty_list, name='Preference cost',  marker_color=\"forestgreen\"  ))\nfig.update_layout(title=\"Prefrence Cost\")\nfig.show()\n","9d518596":"fig = go.Figure()\nfig.add_trace(go.Line(x=list(range(len(cost_list))), y=cost_list, name='Accounting cost', marker_color=\"salmon\" ))\nfig.update_layout(title=\"Accounting Cost\")\nfig.show()\n","56a55311":"fig = go.Figure()\nfig.add_trace(go.Line(x=list(range(len(penalty_list))), y=penalty_list, name='Preference cost',  marker_color=\"forestgreen\"  ))\nfig.add_trace(go.Line(x=list(range(len(cost_list))), y=cost_list, name='Accounting cost',  marker_color=\"salmon\"  ))\n\nfig.update_layout(title=\"Compare 2 Cost : Preference & Accounting\")\nfig.show()\n            ","23bd18f0":"## \ud83c\udf85 All About Data : Santa Workshop Tour 2019\n\nLet's start new competition :)\n","c7020404":"## Choice & Distribution","2fc97c54":"## # of People","9c4b7cb7":"### Preference Cost ","cb3bd43c":"### Preference Cost & Accounting Cost","6ce44dd1":"## Correlation between choice\n\nVery small correlation... But we can visualizaition","f50cf6ae":"You just consider Preprence Cost first.","700a7b26":"## One Iteration : Penalty Scale Compare\n\nWe have to compare two Penalty Score\n\n- **preference cost**\n- **accounting cost**\n\nI will compare this score with [starter code](https:\/\/www.kaggle.com\/inversion\/santa-s-2019-starter-notebook)","0abbef7d":"### Accounting Cost","bdcf0f00":"## # of People & Choice"}}