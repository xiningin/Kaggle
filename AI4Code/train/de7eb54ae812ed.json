{"cell_type":{"7953eb6f":"code","2a53c44b":"code","423f44b0":"code","5ff38619":"code","2ca25209":"code","65ae3460":"code","72be7dfe":"code","ccce5bc0":"code","4da55e0d":"code","6dd002ad":"code","0537f871":"code","dbc57213":"code","9cbaf807":"code","3b959ca3":"code","788b39eb":"code","7b83b54e":"code","f0ae40c9":"code","edc09989":"code","34d36d80":"code","f9584c29":"code","660d5db1":"code","f577aebf":"code","73a438a4":"code","da11e34a":"markdown","e3277383":"markdown","d1679d6f":"markdown","9d7aa2de":"markdown","43d5b83c":"markdown","c72f3b32":"markdown","dd435765":"markdown","49892192":"markdown","ee79e28f":"markdown","d1e4d83b":"markdown","319bb898":"markdown"},"source":{"7953eb6f":"# Installing SweetViz\n!pip install sweetviz","2a53c44b":"# Installing Autoviz\n!pip install autoviz","423f44b0":"# Installing D-tale\n!pip install dtale","5ff38619":"# Installing Data-Prep\n!pip install dataprep","2ca25209":"# Importing all the necessary modules\nimport gc\nimport numpy as np\nimport pandas as pd\n\n# Pandas Profiling\nfrom pandas_profiling import ProfileReport\n\n# SweetViz\nimport sweetviz as sv\n\n# AutoViz\nfrom autoviz.AutoViz_Class import AutoViz_Class\n\n# D-Tale\nimport dtale\nimport dtale.app as dtale_app\ndtale_app.USE_NGROK = True\n\n# Data-Prep\nfrom dataprep.eda import plot, plot_correlation, create_report, plot_missing, plot_diff\n\n# Import Warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","65ae3460":"# Looking at the shapes of both the train and test dataset\n\ntrain = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv')\n\nprint('Number of rows and columns in train data:', train.shape)\nprint('Number of rows and columns in test data:', test.shape)","72be7dfe":"# creating the y column (target)\ny = train.pop('target')\n\n# dropping the id columns from both the dataframe\ntrain = train.iloc[:,1:]\ntest = test.iloc[:,1:]\n\n# Combining the train and test dataset\nmaster_df = pd.concat([train,test], axis=0)\nmaster_df.shape","ccce5bc0":"gc.collect() # For memory optimization","4da55e0d":"# Pandas Profiling output\nprofile = ProfileReport(master_df, minimal=True)\nprofile.to_notebook_iframe()","6dd002ad":"gc.collect() # For Memory Optimization","0537f871":"# SweetViz EDA\nmy_report = sv.analyze(master_df)\nmy_report.show_notebook(w=None, \n                        h=None, \n                        scale=None,\n                        layout='widescreen',\n                        filepath=None)","dbc57213":"gc.collect() # For Memory Optimization","9cbaf807":"# AutoViz EDA\nav = AutoViz_Class()\nauto_train_df = av.AutoViz('..\/input\/tabular-playground-series-nov-2021\/train.csv', depVar='target')","3b959ca3":"gc.collect() # For Memory Optimization","788b39eb":"# DTale EDA\ndtale.show(master_df).main_url()","7b83b54e":"# To kill the process\ndtale.get_instance(1).kill()","f0ae40c9":"gc.collect() # For Memory Optimization","edc09989":"# Data Prep EDA\nplot(master_df, progress=False)","34d36d80":"gc.collect() # For Memory Optimization","f9584c29":"# Checking for missing\nplot_missing(master_df, progress=False)","660d5db1":"gc.collect() # For Memory Optimization","f577aebf":"# Difference between train and test to see if there are any major distinguishing factors\nplot_diff([train, test], progress=False)","73a438a4":"gc.collect() # For Memory Optimization","da11e34a":"<h1 style=\"color:#ebbd34;font-size:80px;\"><strong>D-<strong style=\"color:black\">Tale<\/strong><\/strong><\/h1>","e3277383":"<h1 style=\"color:#ebbd34;font-size:80px;\"><strong>Data <strong style=\"color:black\">Prep<\/strong><\/strong><\/h1>","d1679d6f":"<h1 style=\"color:#ebbd34;font-size:80px;\"><strong>Sweet<strong style=\"color:black\">Viz<\/strong><\/strong><\/h1>","9d7aa2de":"<h1 style=\"color:#ebbd34;font-size:80px;\"><strong>All <strong style=\"color:black\">Auto EDA<\/strong><\/strong><\/h1>\n<h1 style=\"color:#ebbd34;font-size:50px;\"><strong>Tabular <strong style=\"color:black\">Playground Series - <\/strong><strong style=\"color:ebbd34\">November<\/strong> <strong style=\"color:black\">2021<\/strong><\/strong><\/h1>","43d5b83c":"<h1 style=\"color:#ebbd34;font-size:80px;\"><strong>Pandas <strong style=\"color:black\">Profiling<\/strong><\/strong><\/h1>","c72f3b32":"<h1 style=\"color:#ebbd34;font-size:80px;\"><strong>The <strong style=\"color:black\">Insights<\/strong><\/strong><\/h1>","dd435765":"<h1 style=\"color:#ebbd34;font-size:80px;\"><strong>The <strong style=\"color:black\">Acknowledgement<\/strong><\/strong><\/h1>\n\n<p style=\"font-size:120%\">The work was inspired by Sonali Singh's notebook: <a href=\"https:\/\/www.kaggle.com\/sonalisingh1411\/automatic-exploratory-data-analysis\" style=\"text-decoration:none\">Automatic - Exploratory Data Analysis<\/a> <\/p>","49892192":"<p style=\"font-size:120%\">Following are the insights that I have come across from the EDA:<\/p>\n<ul>\n<li style=\"font-size:120%\">From the <strong>Pandas Profiling Report<\/strong> we can see that- <mark><strong>f46, f58, f89 and f93 are highly skewed<\/strong><\/mark>. They can have an impact on our predictions. So we might have to figure out a way to handle these variables.<\/li>\n<li style=\"font-size:120%\">From the <strong>Sweet Viz Report<\/strong> we observe that there are some variables like- <mark><strong>f20, f23, f24 and more<\/strong>, that contain unique value of very high frequency.<\/mark><\/li>\n<li style=\"font-size:120%\">From the <strong>Auto Viz Report<\/strong> we can confirm that there are <mark><strong>no imbalance<\/strong> in the target column.<\/mark> Hence, imbalance is not a problem in this dataframe.<\/li>\n<li style=\"font-size:120%\">From the <strong>Data Prep Report<\/strong> there are many insights to be derived. <mark>There are features that <strong>follow similar distribution<\/strong>. <strong>Many Features that are skewed<\/strong>. The data also contains many variables that <strong>have negative values within them<\/strong>.<\/mark><\/li>\n<li style=\"font-size:120%\">From the <strong>Data Prep Report, plot_diff()<\/strong> we can see that the <mark><strong>values in the test dataframe also follows similar behavior as that of the train.<\/strong><\/mark><\/li>\n<\/ul>","ee79e28f":"![](https:\/\/camo.githubusercontent.com\/8a45c0936d6113b12b7b32942f448270eda8f714665ba8629f36c291f0ccd5fd\/68747470733a2f2f70616e6461732d70726f66696c696e672e6769746875622e696f2f70616e6461732d70726f66696c696e672f646f63732f6173736574732f6c6f676f5f6865616465722e706e67)","d1e4d83b":"<h1 style=\"color:#ebbd34;font-size:80px;\"><strong>Auto<strong style=\"color:black\">Viz<\/strong><\/strong><\/h1>","319bb898":"<h1 style=\"color:#ebbd34;font-size:20px;text-align:center;\"><strong>If you like\/fork my work, kindly <mark style=\"color:purple\">leave an upvote<\/mark>. Encourages us to make more notebooks and share.<\/strong> \ud83d\ude01<\/h1>"}}