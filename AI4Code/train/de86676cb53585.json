{"cell_type":{"df00c96c":"code","d79a434c":"code","8d2c67ac":"code","5a383228":"code","79afe986":"code","0ebaf4b1":"code","09b5f0f6":"code","89e873c2":"code","6d4f0881":"code","cd4e8e2b":"code","5c3faa01":"code","93eecc77":"code","52f1aea7":"code","8653e43d":"code","914847f0":"code","bee9619c":"code","29014473":"code","7506b143":"code","3769864c":"code","09deb030":"code","1cf67b27":"code","fa3512c1":"code","522ea72e":"code","e69c0198":"code","2bb45895":"code","2acf7dea":"code","ccb7af75":"code","cb146193":"code","eb1f0a3f":"code","f4aff6cb":"code","dd33272b":"code","55efccf6":"code","99801225":"code","d3682f2d":"code","db9fe5bb":"code","f6cd9a28":"code","9449b4f0":"code","89e7f2e1":"code","bd8d8fe1":"code","df950641":"markdown","4051e792":"markdown","47b101b0":"markdown","d256e47c":"markdown","860204b9":"markdown","b64ff15f":"markdown","f62b9222":"markdown","f7816129":"markdown","4bbb0b0b":"markdown","42472d78":"markdown","55aa5670":"markdown"},"source":{"df00c96c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d79a434c":"from matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score","8d2c67ac":"df = pd.read_csv('..\/input\/voicegender\/voice.csv')","5a383228":"df.head(10)","79afe986":"df.columns","0ebaf4b1":"df.shape","09b5f0f6":"from IPython.core.display import HTML # permet d'afficher du code html dans jupyter\ndisplay(HTML(df.head(10).to_html()))","89e873c2":"df['label'] = df['label'].map({\"male\":0, \"female\":1})","6d4f0881":"df.label.value_counts()","cd4e8e2b":"#df.head(10)","5c3faa01":"y = df['label'].values\nX = df.drop(['label'], axis=1).values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","93eecc77":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense","52f1aea7":"model = Sequential()\nmodel.add(Dense(1, activation=\"sigmoid\"))","8653e43d":"model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","914847f0":"train = model.fit(X_train , y_train , validation_data=(X_test,y_test), epochs=100, verbose=1)","bee9619c":"y_ann = (model.predict(X_test) > 0.5).astype(\"int32\").flatten()","29014473":"y_ann","7506b143":"accuracy_score(y_test, y_ann)","3769864c":"confusion_matrix(y_test, y_ann)","09deb030":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","1cf67b27":"plot_scores(train)","fa3512c1":"from sklearn.neural_network import MLPClassifier #multilayer perceptron\nmlp = MLPClassifier(hidden_layer_sizes=(200,60)) #\u5206couches\u7684\uff0c\u7b2c\u4e00\u4e2acouche 200\u4e2aneurones\uff0c\u7b2c\u4e8c\u4e2a60\u4e2a(\u4e3a\u4ec0\u4e48\u7b2c\u4e00\u4e2a\u591a\uff1f\u7b2c\u4e8c\u4e2a\u5c42\u66f4\u77eb\u9970\uff0c\u56e0\u6b64\u9700\u8981\u7684\u795e\u7ecf\u6570\u76ee\u539f\u6765\u8d8a\u5c11).\u795e\u7ecf\u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u5143\u7d20\u7684\u6570\u91cf\uff0c\u795e\u7ecf\u6570\u76ee\u6bd4\u5143\u7d20\u591a\u6ca1\u7528\u3002\nmlp.fit(X_train,y_train)\ny_mlp = mlp.predict(X_test)","522ea72e":"mlp_score = accuracy_score(y_test, y_mlp)\nprint(mlp_score)","e69c0198":"pd.crosstab(y_test, y_mlp, rownames=['Reel'], colnames=['Prediction'], margins=True)","2bb45895":"from keras.utils.np_utils import to_categorical","2acf7dea":"print(y[0])\ny_cat = to_categorical(y)\nprint(y_cat[0])","ccb7af75":"print(y)","cb146193":"num_classes = y_cat.shape[1]\nprint(num_classes)","eb1f0a3f":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y_cat, test_size=0.2, random_state=1)\n#\u5c3d\u7ba1\u4e0a\u9762\u5df2\u7ecf\u5bfc\u5165\u8fc7\uff0c\u4f46\u662f\u4e0a\u9762\u7528\u7684\u662fy\u4e0d\u662fy_cat\uff08binaire\u8fc7\u7684\u6570\u636e\uff09","f4aff6cb":"X_train = np.array(X_train)\nX_test = np.array(X_test)\ny_train = np.array(y_train)\ny_test = np.array(y_test)","dd33272b":"X_train.shape","55efccf6":"y_train.shape","99801225":"model = Sequential()\nmodel.add(Dense(200, activation='relu'))\nmodel.add(Dense(60, activation='relu'))\nmodel.add(Dense(num_classes, activation='sigmoid')) ","d3682f2d":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","db9fe5bb":"train = model.fit(X_train , y_train , validation_data=(X_test,y_test), epochs=30, verbose=1)","f6cd9a28":"model.evaluate(X_test,y_test)","9449b4f0":"print(train.history['accuracy'])","89e7f2e1":"print(train.history['val_accuracy'])","bd8d8fe1":"plot_scores(train)","df950641":"On peut afficher les 10 premi\u00e8res lignes du dataset :","4051e792":"**Le dataset**","47b101b0":"Note : Keras n'accepte pas les dataframes, on utilise \"values\" pour avoir des valeurs (tableaux)","d256e47c":"**R\u00e9seau danse 2 couches**","860204b9":"**R\u00e9seaux denses 3 couches(Keras\/Tensorflow)**","b64ff15f":"On utilise la m\u00e9thode MLPClassifier de sklearn pour utiliser un r\u00e9seau de neurones \u00e0 deux couches cach\u00e9es de 200 et 60 neurones :","f62b9222":"On peut voir les diff\u00e9rentes colonnes : ","f7816129":"**Une couche danse**","4bbb0b0b":"On s\u00e9pare la cible et les caract\u00e9ristiques :y est ce qu'on va pr\u00e9dire, X sont les autres donn\u00e9es qu'on va traiter : ","42472d78":"On change 'male' en 0 et female en 1 : ","55aa5670":"**Librairies utiles**"}}