{"cell_type":{"3d2cdff3":"code","bf079627":"code","ff4e824b":"code","b2990fa4":"code","d1178128":"code","da4ba104":"code","73d376dc":"code","811fd241":"code","eb48d0f1":"code","ca835c91":"code","3760bad2":"code","0e8a3e43":"code","d2ca22c7":"code","b2d21f04":"code","72914a3e":"code","fdf3bfff":"code","0a9ef120":"code","c7bd8ba1":"code","6d319294":"code","0845ed39":"code","909e4f47":"code","c0685bda":"code","42ec3b49":"code","67870c81":"markdown","d9796b2d":"markdown","25c910b0":"markdown","ed785548":"markdown","91f51ccb":"markdown","8e8f330e":"markdown","cf60b9cf":"markdown","c19cfa13":"markdown","37aa7351":"markdown","5512138f":"markdown"},"source":{"3d2cdff3":"import pandas as pd\nfrom math import sqrt\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","bf079627":"BR = pd.read_csv(\"..\/input\/bookcrossing-dataset\/Book reviews\/BX-Book-Ratings.csv\",encoding= 'unicode_escape',low_memory=False,sep=';') ","ff4e824b":"BR.head()","b2990fa4":"B = pd.read_csv(\"..\/input\/bookcrossing-dataset\/Book reviews\/BX_Books.csv\",encoding='unicode_escape',low_memory=False,sep=';',error_bad_lines=False)","d1178128":"B.head()","da4ba104":"U = pd.read_csv(\"..\/input\/bookcrossing-dataset\/Book reviews\/BX-Users.csv\",encoding='unicode_escape',low_memory=False,sep=';',error_bad_lines=False)","73d376dc":"U.head()","811fd241":"userInput = [\n            {'Book-Title':'The Satanic Verses', 'Book-Rating':3.5},\n            {'Book-Title':'Don Quixote', 'Book-Rating':5},\n            {'Book-Title':'To Kill a Mockingbird', 'Book-Rating':4.5},\n            {'Book-Title':'A Passage to India', 'Book-Rating':2},\n            {'Book-Title':'Beloved', 'Book-Rating':5}               \n         ] \ninputBooks = pd.DataFrame(userInput)\ninputBooks","eb48d0f1":"#Filtering out the books by title\ninputId = B[B['Book-Title'].isin(inputBooks['Book-Title'].tolist())]\n#Then merging it so we can get ISBN. Merging is done implicitly by title.\ninputBooks = pd.merge(inputId, inputBooks)\n#Dropping columns that are not required\ninputBooks = inputBooks.drop('Year-Of-Publication', 1)\ninputBooks = inputBooks.drop('Image-URL-S', 1)\ninputBooks = inputBooks.drop('Image-URL-M', 1)\ninputBooks = inputBooks.drop('Image-URL-L', 1)\ninputBooks = inputBooks.drop('Publisher', 1)\ninputBooks = inputBooks.drop('Book-Author', 1)\ninputBooks.head()","ca835c91":"NewReaderSubset = BR[BR['ISBN'].isin(inputBooks['ISBN'].tolist())] \nNewReaderSubset","3760bad2":"#Grouping by User-ID\nNewReaderSubsetGroup = NewReaderSubset.groupby(['User-ID'])","0e8a3e43":"#Sorting it so that the users with books most common with the input will have priority\nNewReaderSubsetGroup = sorted(NewReaderSubsetGroup,  key=lambda x: len(x[1]), reverse=True)","d2ca22c7":"NewReaderSubsetGroup[0:5]","b2d21f04":"#Storing the Pearson Correlation in a dictionary\npearsonCorrelationDict = {}\n#For every new reader group in our subset\nfor name, group in NewReaderSubsetGroup:\n    #Sorting the input and current user group so the values aren't mixed up later on\n    group = group.sort_values(by='ISBN')\n    inputBooks = inputBooks.sort_values(by='ISBN')\n    nRatings = len(group)\n    #Getting the review scores for books that they both have in common\n    temp_df = inputBooks[inputBooks['ISBN'].isin(group['ISBN'].tolist())]\n    #And then storing them in a temporary buffer variable in a list format to facilitate future calculations\n    tempRatingList = temp_df['Book-Rating'].tolist()\n    #Putting the current user group reviews in a list format\n    tempGroupList = group['Book-Rating'].tolist()\n    #Calculating the pearson correlation between two users, so called, x and y\n    Sxx = sum([i**2 for i in tempRatingList]) - pow(sum(tempRatingList),2)\/float(nRatings)\n    Syy = sum([i**2 for i in tempGroupList]) - pow(sum(tempGroupList),2)\/float(nRatings)\n    Sxy = sum( i*j for i, j in zip(tempRatingList, tempGroupList)) - sum(tempRatingList)*sum(tempGroupList)\/float(nRatings)\n    #If the denominator is different than zero, then divide, else, 0 correlation.\n    if Sxx!= 0 and Syy!= 0:\n      pearsonCorrelationDict[name] = Sxy\/sqrt(Sxx*Syy)\n    else:\n      pearsonCorrelationDict[name] = 0\n","72914a3e":"pearsonCorrelationDict.items()","fdf3bfff":"pearsonDF = pd.DataFrame.from_dict(pearsonCorrelationDict, orient='Index')\npearsonDF.columns = ['Similarity Index']\npearsonDF['User-ID'] = pearsonDF.index\npearsonDF.index = range(len(pearsonDF))\npearsonDF.head()","0a9ef120":"topUsers=pearsonDF.sort_values(by='Similarity Index', ascending=False)[0:50]\ntopUsers.head()","c7bd8ba1":"topUsersRating=topUsers.merge(BR,left_on='User-ID',right_on='User-ID',left_index=False, right_index=False,how='inner')\ntopUsersRating.head()","6d319294":"topUsersRating['Weighted Rating'] = topUsersRating['Similarity Index']*topUsersRating['Book-Rating']\ntopUsersRating.head()","0845ed39":"tempTopUsersRating = topUsersRating.groupby('ISBN').sum()[['Similarity Index','Weighted Rating']]\ntempTopUsersRating.columns = ['sum_similarityIndex','sum_weightedRating']\ntempTopUsersRating.head()","909e4f47":"#Creates an empty dataframe\nrecommendation_df = pd.DataFrame()\n#Taking the weighted average\nrecommendation_df['Weighted Average Recommendation Score'] = tempTopUsersRating['sum_weightedRating']\/tempTopUsersRating['sum_similarityIndex']\nrecommendation_df['ISBN'] = tempTopUsersRating.index\nrecommendation_df.head()","c0685bda":"recommendation_df = recommendation_df.sort_values(by='Weighted Average Recommendation Score', ascending=False)\nrecommendation_df.head()","42ec3b49":"B.loc[B['ISBN'].isin(recommendation_df.head(10)['ISBN'].tolist())]","67870c81":"###Books read by the User","d9796b2d":"###Collaborative Filtering or User-User Filtering is the technique that uses other users to recommend items to the input user. It finds users that have similar preferences as the input and then recommends items that they have liked to the new user. Here, Pearson Correlation Function is used for finding similar users.","25c910b0":"###Recommended Books for New User","ed785548":"# Book Recommendation System","91f51ccb":"###Using Pearson Correlation","8e8f330e":"###Ratings of Selected Users for all Books","cf60b9cf":"###Most Similar Users","c19cfa13":"###Users who have read the same Books","37aa7351":"### Importing Libraries","5512138f":"## Collaborative Filtering"}}