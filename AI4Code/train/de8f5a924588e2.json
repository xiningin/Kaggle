{"cell_type":{"7db8ffe9":"code","a7bb8dd8":"code","2ea937de":"code","908e4c6a":"code","2610a1b1":"code","c5f6b403":"code","0c723ff2":"code","afce8a65":"code","066d9286":"code","07a862fd":"code","196b68a5":"code","8d420e84":"code","1bc171bd":"code","a7b6d0e8":"code","27e86a39":"code","eace0dec":"code","72bda833":"code","c9b50292":"code","46ebfdac":"code","d2c5233e":"code","94b05259":"code","31f034b4":"code","ee9914df":"code","f6280200":"code","cca06e9c":"code","1f086754":"code","0335ca36":"code","07b8a041":"code","b5aafe14":"code","cb8dfc85":"code","5d2ef5d2":"code","af3daa18":"code","bbd464ec":"code","4bcbddc7":"code","73ab7e09":"code","b1a1f47c":"code","11595250":"code","8147eaed":"code","3b7e7535":"code","6d24f504":"code","46e5ea92":"code","10f99a59":"code","4ee53cbc":"code","ff01398a":"code","e934d87e":"code","b213f96b":"code","a60b1106":"code","44224800":"code","8ceef557":"code","90d17749":"code","dbd9154d":"code","7e9ebaee":"code","36330c91":"code","a79ca11a":"code","d40c66eb":"code","3aa83a61":"code","810e5b6f":"code","afb18047":"code","2f492217":"code","a5eb7bb9":"code","ad2c8719":"code","a9fb85fc":"code","ae8c11f2":"code","5434638e":"code","25f2af7f":"code","6cf875a0":"code","678dd645":"code","40670697":"code","3a64b0fd":"code","009e3575":"code","582881cb":"code","8c38951f":"markdown","e3d56e60":"markdown","b0b4992c":"markdown","fd015993":"markdown","3d03ad71":"markdown","a3a2b233":"markdown","07c6541c":"markdown","fcbd8270":"markdown","497351a9":"markdown","72d19eac":"markdown","ee708f6b":"markdown","bc903a7b":"markdown","22cbe585":"markdown","5127838e":"markdown","fcecdc7b":"markdown","68265fa8":"markdown","e5949382":"markdown","4947485e":"markdown","7d99592c":"markdown","d463ae36":"markdown","d0f2e232":"markdown","d9a49555":"markdown","55aa47fc":"markdown","c6c6c822":"markdown","5308a80c":"markdown","11827404":"markdown","7a8980fa":"markdown","cf4f2a3d":"markdown"},"source":{"7db8ffe9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(\"ignore\")","a7bb8dd8":"Train_File = pd.read_csv(r\"..\/input\/titanic\/train.csv\")","2ea937de":"Test_File = pd.read_csv(r\"..\/input\/titanic\/test.csv\")","908e4c6a":"Train_File.head()","2610a1b1":"Train_File.info()","c5f6b403":"Train_File.describe()","0c723ff2":"Train_File.isnull().sum()","afce8a65":"# Survived column value counts\nTrain_File[\"Survived\"].value_counts()","066d9286":"# Survived column pie chart\nfig, ax = plt.subplots(figsize=(8,6))\nplt.pie(x=Train_File[\"Survived\"].value_counts(), \n        labels=[\"Survived\",\"Did not Survive\"],\n        explode = (0, 0.1))\nplt.show()","07a862fd":"# Sex column value counts\nTrain_File[\"Sex\"].value_counts()","196b68a5":"# Sex column count plot\nplt.style.use(\"classic\")\nfig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(Train_File[\"Sex\"], palette=[\"skyblue\", \"pink\"]);","8d420e84":"# Pclass column value counts\nTrain_File[\"Pclass\"].value_counts()","1bc171bd":"# Pclass column count plot\nfig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(x=Train_File[\"Pclass\"], palette=\"viridis\");","a7b6d0e8":"# Fare column count plot\nplt.style.use(\"classic\")\nplt.figure(figsize = (14, 6))\nsns.distplot(Train_File.Fare, color=\"b\");\n","27e86a39":"# Parch column value counts\nTrain_File.Parch.value_counts()","eace0dec":"# Parch column count plot\nfig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(x=Train_File[\"Parch\"], palette=\"hls\");","72bda833":"# embarked column count plot\nfig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(Train_File['Embarked'], hue = Train_File['Survived'], palette=\"Paired\");","c9b50292":"# Age column value counts\nplt.style.use(\"classic\")\nfig, ax = plt.subplots(figsize=(8,6))\nsns.distplot(Train_File[\"Age\"], color=\"b\");","46ebfdac":"# SibSp column count plot\nfig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(x=Train_File[\"SibSp\"], palette=\"hls\");","d2c5233e":"Train_File.isnull().sum()","94b05259":"# Filling the missing values in age column with the mean\n\nTrain_File['Age'] = Train_File['Age'].fillna(Train_File['Age'].mean())","31f034b4":"# All records is empty in the cabin column so we will drop it\n\nTrain_File.drop(\"Cabin\", axis=1, inplace=True)","ee9914df":"Train_File.dropna(inplace = True)","f6280200":"# Checking null values\nTrain_File.isnull().sum()","cca06e9c":"Train_File.drop(['Name', 'Ticket'], axis = 1, inplace = True)","1f086754":"Train_File.head()","0335ca36":"# dummy incoding \n\nSex = pd.get_dummies(Train_File['Sex'], drop_first=True)\nEmbarked= pd.get_dummies(Train_File['Embarked'], drop_first=True)","07b8a041":"# use pd.concat to join the new columns with your original dataframe\n\n# Train_File = pd.concat([Train_File, pd.get_dummies(Train_File['Sex'], prefix = 'Sex')], axis =1)\nTrain_File = pd.concat([Train_File, Sex, Embarked], axis = 1)","b5aafe14":"# drop the 'Sex' and 'Embarked' columns\n\nTrain_File.drop(['Sex', 'Embarked'], axis = 1, inplace = True)","cb8dfc85":"Train_File.head()","5d2ef5d2":"Train_File.info()","af3daa18":"Train_File.describe()","bbd464ec":"Test_File.head()","4bcbddc7":"Test_File.info()","73ab7e09":"Test_File.isnull().sum()","b1a1f47c":"Test_File['Age'] = Test_File['Age'].fillna(Test_File['Age'].mean())","11595250":"Test_File.drop(['Cabin'], axis = 1, inplace = True)","8147eaed":"Test_File.dropna(inplace = True)","3b7e7535":"Test_File.isnull().sum()","6d24f504":"Test_File.head()","46e5ea92":"Sex_Test_File = pd.get_dummies(Test_File['Sex'], drop_first = True)\nEmbarked_Test_File = pd.get_dummies(Test_File['Embarked'], drop_first = True)","10f99a59":"Test_File = pd.concat([Test_File, Sex_Test_File, Embarked_Test_File], axis = 1)","4ee53cbc":"Test_File.drop(['Sex' , 'Embarked'], axis = 1, inplace =True)","ff01398a":"Test_File.head()","e934d87e":"# Drop Name and Ticket column\n\nTest_File.drop(['Name', 'Ticket'], axis = 1, inplace = True)","b213f96b":"Test_File.head()","a60b1106":"Test_File.isnull().sum()","44224800":"Test_File.info()","8ceef557":"Test_File.describe()","90d17749":"Y = Train_File['Survived']\nX = Train_File.drop('Survived', axis = 1)","dbd9154d":"Y.head()","7e9ebaee":"X.head()","36330c91":"# Splitting the data into X train, X test and y train, y test\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 42)","a79ca11a":"X_train.shape","d40c66eb":"X_test.shape","3aa83a61":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()","810e5b6f":"rfc.fit(X_train,y_train)","afb18047":"RandomForestClassifierScore = rfc.score(X_test,y_test)\nprint(\"Accuracy obtained by Random Forest Classifier model:\",RandomForestClassifierScore*100)","2f492217":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(42)\n","a5eb7bb9":"knn.fit(X_train,y_train)","ad2c8719":"KNeighborsClassifierScore = knn.score(X_test,y_test)\nprint(\"Accuracy obtained by K Neighbors Classifier model:\",KNeighborsClassifierScore*100)","a9fb85fc":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier()","ae8c11f2":"tree.fit(X_train,y_train)","5434638e":"DecisionTreeClassifierScore = tree.score(X_test,y_test)\nprint(\"Accuracy obtained by Decision Tree Classifier model:\",DecisionTreeClassifierScore*100)","25f2af7f":"from sklearn.ensemble import GradientBoostingClassifier\n\ngb = GradientBoostingClassifier()\ngb.fit(X_train, y_train)","6cf875a0":"GradientBoostingClassifierScore = gb.score(X_test,y_test)\nprint(\"Accuracy obtained by Gradient Boosting Classifier model:\",GradientBoostingClassifierScore*100)","678dd645":"from catboost import CatBoostClassifier\n\ncat = CatBoostClassifier(iterations=10)\ncat.fit(X_train, y_train);","40670697":"CatBoostClassifierScore = cat.score(X_test,y_test)\nprint(\"Accuracy obtained by CatBoost Classifier model:\",CatBoostClassifierScore*100)","3a64b0fd":"plt.style.use(\"classic\")\n\nx = [\"K Neighbors Classifier\", \n     \"Decision Tree Classifier\", \n     \"Random Forest Classifier\",\n     \"CatBoost Classifier\",\n     \"GradientBoostingClassifier\"]\n\ny = [KNeighborsClassifierScore, \n     DecisionTreeClassifierScore, \n     RandomForestClassifierScore,\n     CatBoostClassifierScore,\n     GradientBoostingClassifierScore]\n\nfig, ax = plt.subplots(figsize=(8,6))\nsns.barplot(x=x,y=y, palette=\"crest\");\nplt.ylabel(\"Model Accuracy\")\nplt.xticks(rotation=40)\nplt.title(\"Model Comparison - Model Accuracy\");\n","009e3575":"# Using the CatBoostClassifier for the final predictions\n\nfinal_prediction = cat.predict(Test_File)   \nprediction = pd.DataFrame(final_prediction)","582881cb":"# Making the submission\n\nsubmission = pd.read_csv(r'..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = prediction\nsubmission.to_csv('Task2_submission2.csv', index = False)","8c38951f":"### Columns information","e3d56e60":"## Object columns encoding (dummy)","b0b4992c":"### Another encoding method","fd015993":"## Object columns encoding (dummy)","3d03ad71":"### Some statistical information about the training data","a3a2b233":"### Random Forest Classifier","07c6541c":"# Importing Libraries","fcbd8270":"### Dropping some insignificant columns","497351a9":"# Reading data files","72d19eac":"## Model comparison","ee708f6b":"## Done","bc903a7b":"### KNeighbors Classifier","22cbe585":"# Test file","5127838e":"### Checking null values","fcecdc7b":"## Dealing with missing values","68265fa8":"# Dealing with missing values","e5949382":"## Have a look  again at the test file ","4947485e":"# Now the train and test data are clean, so we can go to the modeling step","7d99592c":"# Some EDA to help us understand the data values in each feature","d463ae36":"### CatBoostClassifier","d0f2e232":"# Train data description","d9a49555":"Train_File['Embarked'] = pd.factorize(Train_File['Embarked'])[0].reshape(-1, 1)","55aa47fc":"Train_File['Sex'] = pd.factorize(Train_File['Sex'])[0].reshape(-1, 1)","c6c6c822":"# Models:","5308a80c":"### DecisionTreeClassifier","11827404":"Train_File.info()","7a8980fa":"### GradientBoostingClassifier","cf4f2a3d":"## Dropping the insignificant columns"}}