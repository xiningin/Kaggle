{"cell_type":{"6bac9b31":"code","fc428adb":"code","1f851203":"code","2729483a":"code","d700e979":"code","b1d5189f":"code","de34ddb4":"code","b1d9dd00":"code","ad918b4e":"code","b718da3e":"code","a94b3cfd":"code","cf1b1699":"code","159de9a0":"code","76d9da66":"code","8913e10e":"code","2bf2bf09":"code","0755e2f9":"code","02e3f071":"code","3203fb0c":"code","9348438e":"code","0bc66f08":"code","66a9adb8":"code","b16dc63c":"code","ebd3bb2f":"code","c8a81bd2":"markdown","5f5abd53":"markdown","f5151e1f":"markdown","29d3e2d7":"markdown","c9f0cf6e":"markdown","df062524":"markdown","8342cc38":"markdown","f08809f1":"markdown","578582ae":"markdown","ce398c12":"markdown","441e4a37":"markdown","9f2c6212":"markdown","88530b7c":"markdown","98e2f45a":"markdown","47d5f698":"markdown","7394c1c3":"markdown","a0062b4e":"markdown"},"source":{"6bac9b31":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc428adb":"os.environ[\"WANDB_API_KEY\"] = \"0\"","1f851203":"from transformers import BertTokenizer, TFBertModel\nimport matplotlib.pyplot as plt\nimport tensorflow as tf","2729483a":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept ValueError:\n    strategy = tf.distribute.get_strategy() # for CPU and single GPU\n    print('Number of replicas:', strategy.num_replicas_in_sync)","d700e979":"train = pd.read_csv(\"..\/input\/contradictory-my-dear-watson\/train.csv\")","b1d5189f":"train.head()","de34ddb4":"train.premise.values[1]","b1d9dd00":"train.hypothesis.values[1]","ad918b4e":"train.label.values[1]","b718da3e":"labels, frequencies = np.unique(train.language.values, return_counts = True)\n\nplt.figure(figsize = (10,10))\nplt.pie(frequencies,labels = labels, autopct = '%1.1f%%')\nplt.show()","a94b3cfd":"model_name = 'bert-base-multilingual-cased'\ntokenizer = BertTokenizer.from_pretrained(model_name)","cf1b1699":"def encode_sentence(s):\n   tokens = list(tokenizer.tokenize(s))\n   tokens.append('[SEP]')\n   return tokenizer.convert_tokens_to_ids(tokens)","159de9a0":"encode_sentence(\"I love machine learning\")","76d9da66":"def bert_encode(hypotheses, premises, tokenizer):\n    \n  num_examples = len(hypotheses)\n  \n  sentence1 = tf.ragged.constant([\n      encode_sentence(s)\n      for s in np.array(hypotheses)])\n  sentence2 = tf.ragged.constant([\n      encode_sentence(s)\n       for s in np.array(premises)])\n\n  cls = [tokenizer.convert_tokens_to_ids(['[CLS]'])]*sentence1.shape[0]\n  input_word_ids = tf.concat([cls, sentence1, sentence2], axis=-1)\n\n  input_mask = tf.ones_like(input_word_ids).to_tensor()\n\n  type_cls = tf.zeros_like(cls)\n  type_s1 = tf.zeros_like(sentence1)\n  type_s2 = tf.ones_like(sentence2)\n  input_type_ids = tf.concat(\n      [type_cls, type_s1, type_s2], axis=-1).to_tensor()\n\n  inputs = {\n      'input_word_ids': input_word_ids.to_tensor(),\n      'input_mask': input_mask,\n      'input_type_ids': input_type_ids}\n\n  return inputs","8913e10e":"train_input = bert_encode(train.premise.values, train.hypothesis.values, tokenizer)","2bf2bf09":"max_len = 50\n\ndef build_model():\n    bert_encoder = TFBertModel.from_pretrained(model_name)\n    input_word_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    input_type_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_type_ids\")\n    \n    embedding = bert_encoder([input_word_ids, input_mask, input_type_ids])[0]\n    output = tf.keras.layers.Dense(3, activation='softmax')(embedding[:,0,:])\n    \n    model = tf.keras.Model(inputs=[input_word_ids, input_mask, input_type_ids], outputs=output)\n    model.compile(tf.keras.optimizers.Adam(lr=1e-5), loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n    \n    return model","0755e2f9":"with strategy.scope():\n    model = build_model()\n    model.summary()","02e3f071":"model.fit(train_input, train.label.values, epochs = 2, verbose = 1, batch_size = 64, validation_split = 0.2)","3203fb0c":"test = pd.read_csv(\"..\/input\/contradictory-my-dear-watson\/test.csv\")\ntest_input = bert_encode(test.premise.values, test.hypothesis.values, tokenizer)","9348438e":"test.head()","0bc66f08":"predictions = [np.argmax(i) for i in model.predict(test_input)]","66a9adb8":"submission = test.id.copy().to_frame()\nsubmission['prediction'] = predictions","b16dc63c":"submission.head()","ebd3bb2f":"submission.to_csv(\"submission.csv\", index = False)","c8a81bd2":"***Let's now check the language distribution of the sataset***","5f5abd53":"***To start out, we can use a pretrained model. Here, we'll use a multilingual BERT model from huggingface.***","f5151e1f":"***Load the test data set***","29d3e2d7":"***Tokenizers turn sequences of words into arrays of numbers***","c9f0cf6e":"***Making Predictions***","df062524":"First, we download the tokenizer.","8342cc38":"# TPU Setup:","f08809f1":"Let's have a look at one of the entries","578582ae":"# ***Load the dataset given***","ce398c12":"# *Training the Model*","441e4a37":"*Now, incorporate the BERT transformer into a Keras Functional Model*","9f2c6212":"#  *Data Pre-processing*","88530b7c":"The training set contains a premise, a hypothesis, a label (0 = entailment, 1 = neutral, 2 = contradiction), and the language of the text.","98e2f45a":"# Detecting contradiction and entailment in multilingual text using TPUs","47d5f698":"BERT uses three kind of input data- input word IDs, input masks, and input type IDs.\n\nThese allow the model to know that the premise and hypothesis are distinct sentences, and also to ignore any padding from the tokenizer.","7394c1c3":"Now, we're going to encode all of our premise\/hypothesis pairs for input into BERT.","a0062b4e":"Clearly, the statements are contradictory"}}