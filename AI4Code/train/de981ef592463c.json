{"cell_type":{"95f109a4":"code","329f27c0":"code","19ae11ea":"code","366a18a8":"code","be5aa05e":"code","60486250":"code","d4db7ec6":"code","a1b226d9":"code","475df9f4":"code","eacccff4":"code","4dba3435":"code","133533c6":"code","3156bde2":"code","e81f2fb9":"code","2f250098":"code","9e885a7f":"code","b299ed8a":"code","dcd80343":"code","24c611e7":"code","6ddba21e":"code","025ec6c8":"code","3d402339":"code","4d7d81d1":"code","9158cf40":"code","4a74abed":"code","f6e031fa":"code","bfc77956":"code","38fba1ce":"code","0958610b":"markdown","21c5407f":"markdown","58eadc18":"markdown","a2b00549":"markdown","63fd2b33":"markdown","47b41853":"markdown","411d18a2":"markdown","987b7d36":"markdown","4f9d27cb":"markdown"},"source":{"95f109a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","329f27c0":"df = pd.read_csv(\"\/kaggle\/input\/youtube-new\/GBvideos.csv\")\ndf.head()","19ae11ea":"df[\"likes\"][1] # dataframimizin likes column'un 1.'sini yazd\u0131r.\n#df.likes[1] buda ayn\u0131 anlama gelir.","366a18a8":"df.loc[1,[\"likes\"]] # bu biraz daha ayr\u0131nt\u0131l\u0131 g\u00f6sterir.","be5aa05e":"# tabiki birden fazlas\u0131n\u0131 bir tablo haline getirebiliriz\ndf[[\"likes\",\"dislikes\"]]","60486250":"print(type(df[\"likes\"]))     # tek k\u00f6\u015feli parentez ile bitiyorsa type: series\nprint(type(df[[\"likes\"]]))   # e\u011fer iki k\u00f6\u015feli parentez ile bitiyorsa type: data frames","d4db7ec6":"df.loc[1:10,\"tags\":\"dislikes\"] # bu \u00f6rnekte anlat\u0131lmak istenen: 1'den 10'a kadar yaz ama sadece tags ile dislikes olanlar\u0131.","a1b226d9":"df.loc[10:1:-1,\"tags\":\"dislikes\"] # e\u011fer bunu reverse etmek istersek sadece 10 ile 1'i yer de\u011fi\u015ftirip 1'in yan\u0131na :-1 yazar\u0131z.","475df9f4":"df.loc[1:10,\"ratings_disabled\":] # 1'den ba\u015flay\u0131p 10'a kadar ve ratings_disabled'den sonra gelen column'lar\u0131 yazd\u0131r","eacccff4":"boolean = df.likes > 5000000 # dataframemizin i\u00e7inde bulunan likes columnun likes'i 5 milyondan b\u00fcy\u00fck olanlar\u0131 yaz\ndf[boolean]","4dba3435":"first_filter = df.likes > 5000000\nsecond_filter = df.dislikes > 370000\ndf[first_filter & second_filter] # likes'i 5 milyondan ve dislikes'i 370 binden b\u00fcy\u00fck olanlar\u0131 yazd\u0131r ","133533c6":"df.dislikes[df.likes>5000000] # burada likes'i 5 milyondan b\u00fcy\u00fck olan vidiolar\u0131n dislikeslerini g\u00f6ster diyor (soldaki rakamlar index'tir)","3156bde2":"def div(n):\n    return n\/2\ndf.likes.apply(div)\n# buras\u0131 biraz karma\u015f\u0131k g\u00f6z\u00fckse bile \u00e7ok basit bir i\u015flevi var. Sadece belirti\u011finiz columnu belirti\u011finiz say\u0131ya b\u00f6l\u00fcyor (likes'i 2'ye b\u00f6l)","e81f2fb9":"df.likes.apply(lambda n : n\/2) # ayn\u0131 i\u015flemi b\u00f6yle daha k\u0131sa bir \u015fekilde yapabiliriz","2f250098":"df[\"L\/D\"] = df.likes \/ df.dislikes # yeni bir column olu\u015ftu\u015fturdum ve i\u00e7inede likes ile dislikes'in b\u00f6l\u00fcm\u00fcn\u00fc yaz dedim\ndf.head()","9e885a7f":"dic = {\"\u0130sim\":[\"Ali\",\"Veli\",\"Ay\u015fe\",\"R\u0131za\"],\"Cinsiyet\":[\"E\",\"E\",\"K\",\"E\"],\"Ya\u015f\":[10,45,5,9]} # bir dictionary olu\u015fturduk\ndf1 = pd.DataFrame(dic)\ndf1","b299ed8a":"df1.pivot(index=\"\u0130sim\",columns = \"Cinsiyet\",values=\"Ya\u015f\") # olu\u015fturdu\u011fumuz dictionary'nin index'sine \u0130sim, column'm\u0131na Cinsiyet, values'sine Ya\u015f dedik.\n# Bu i\u015fleme \"pivoting\" denir\n# tabloda ... \u00f6zelli\u011fine sahip olmayanlar NaN olarak belirtiler. \u00d6rnek vermek gerekirse: Ay\u015fe erkek olmad\u0131\u011f\u0131 i\u00e7in E = NaN","dcd80343":"df2 = df1.set_index([\"\u0130sim\",\"Cinsiyet\"]) # d\u00fczenledi\u011fimiz dataframemizin indexlerini \u0130sim ve Cinsiyet olarak de\u011fi\u015ftirdik.\ndf2","24c611e7":"df2.unstack(level=0) # 0. yani 1. indexmizi dataframemizden \u00e7\u0131kar\u0131yor","6ddba21e":"df2.unstack(level=1) # bu sefer 1. yani 2. indexmizi dataframemizden \u00e7\u0131kar\u0131yor","025ec6c8":"df3 = df2.swaplevel(0,1) # indexlerimizin yerini bu komut ile de\u011fi\u015ftirebiliriz\ndf3","3d402339":"df1","4d7d81d1":"pd.melt(df1,id_vars=\"\u0130sim\",value_vars=[\"Ya\u015f\",\"Cinsiyet\"]) # \u0130sim sabit kals\u0131n\n# belirtti\u011fimiz columnlar yerine variable ve value yazs\u0131n columnlar\u0131n de\u011ferinede columnlar\u0131 yaz","9158cf40":"df1","4a74abed":"df1.groupby(\"Cinsiyet\").mean() # cinsiyet olarak E olanlar\u0131n ortalamas\u0131n\u0131 al (21.333) K olanlar\u0131n ortalamas\u0131n\u0131 al (5)","f6e031fa":"df1.groupby(\"Cinsiyet\").Ya\u015f.max() # cinsiyet olarak en y\u00fcksek fazla ve en y\u00fcksek olanlar\u0131 yaz","bfc77956":"df1.groupby(\"Cinsiyet\")[[\"Ya\u015f\",\"\u0130sim\"]].min() # cinsiyet olarak en az ya\u015flar\u0131 ve onlar\u0131n isimlerini yaz","38fba1ce":"df1.info() #dataframemizin infosunu al\u0131yoruz","0958610b":"FILTERING DATA FRAMES","21c5407f":"SLICING DATA FRAME","58eadc18":"TRANSFORMING DATA","a2b00549":"MANIPULATING DATA FRAMES WITH PANDAS","63fd2b33":"MELTING DATA FRAMES","47b41853":"CATEGORICALS AND GROUPBY","411d18a2":"PIVOTING DATA FRAMES","987b7d36":"INDEXING DATA FRAMES","4f9d27cb":"STACKING and UNSTACKING DATAFRAME"}}