{"cell_type":{"4c34ab2f":"code","69a75494":"code","1853d8b9":"code","3900ab33":"code","9bb47bff":"code","d42e78bc":"code","88656f7f":"code","5e7d83df":"code","64cd76e9":"code","3fa6bc8a":"code","29b8e931":"code","65efbf60":"code","d9068b23":"code","9d5c935f":"code","bc5d74d1":"code","17b742c4":"code","6b5379b7":"code","0954d5b0":"markdown","c5430b7c":"markdown","db3f9728":"markdown","838c0735":"markdown","b4ad50aa":"markdown","28241266":"markdown","55cb6a31":"markdown","48cdce59":"markdown","67249185":"markdown","038f09c2":"markdown","ad28960a":"markdown","f4090f30":"markdown","d397b884":"markdown","a28926af":"markdown","0544d4fc":"markdown","9c4c3e7d":"markdown","82fd0a66":"markdown","5425394f":"markdown","7f2fb9d3":"markdown","e9d65dcd":"markdown","1e643d1e":"markdown","2cbf730a":"markdown","cc8c1117":"markdown","7e2af5d1":"markdown","0ee4b159":"markdown","23a93231":"markdown","b87fd76d":"markdown","a2d42ae6":"markdown"},"source":{"4c34ab2f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","69a75494":"train_df = pd.read_csv('\/kaggle\/input\/amazon-employee-access-challenge\/train.csv')","1853d8b9":"test_df = pd.read_csv('\/kaggle\/input\/amazon-employee-access-challenge\/test.csv')","3900ab33":"train_df.head()","9bb47bff":"test_df.head()","d42e78bc":"train_df.info()","88656f7f":"test_df.info()","5e7d83df":"train_df.nunique()","64cd76e9":"test_df.nunique()","3fa6bc8a":"X = train_df.drop(\"ACTION\", axis=1)\ny = train_df[\"ACTION\"]\n","29b8e931":"cat_features = list(range(0, X.shape[1]))\nprint(cat_features)","65efbf60":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=0)","d9068b23":"from catboost import CatBoostClassifier\n\nclf = CatBoostClassifier(\n    iterations=5, \n    learning_rate=0.1, \n    #loss_function='CrossEntropy'\n)\n\n\nclf.fit(X_train, y_train, \n        cat_features=cat_features, \n        eval_set=(X_val, y_val), \n        verbose=False\n)\n\nprint('CatBoost model is fitted: ' + str(clf.is_fitted()))\nprint('CatBoost model parameters:')\nprint(clf.get_params())","9d5c935f":"from catboost import CatBoostClassifier\nclf = CatBoostClassifier(\n    iterations=10,\n#     verbose=5,\n)\n\nclf.fit(\n    X_train, y_train,\n    cat_features=cat_features,\n    eval_set=(X_val, y_val),\n)","bc5d74d1":"print(clf.predict_proba(data=X_val))","17b742c4":"print(clf.predict(data=X_val))","6b5379b7":"from catboost import CatBoostClassifier\n\nclf = CatBoostClassifier(\n    iterations=50,\n    random_seed=42,\n    learning_rate=0.5,\n    custom_loss=['AUC', 'Accuracy']\n)\n\nclf.fit(\n    X_train, y_train,\n    cat_features=cat_features,\n    eval_set=(X_val, y_val),\n    verbose=False,\n    plot=True\n)","0954d5b0":"[Go to Top](#0)","c5430b7c":"### **4.3 EDA** <a class=\"anchor\" id=\"4.3\"><\/a>\n\n\n[Table of Contents](#0.1)\n\n- Now, that we have imported our dataset, its time to gain some insights about our data.\n\n- Let's preview the dataset.","db3f9728":"### **4.2 Read dataset** <a class=\"anchor\" id=\"4.2\"><\/a>\n\n[Table of Contents](#0.1)","838c0735":"### **View summary of dataframe**","b4ad50aa":"### **4.7 Stdout of the training**  <a class=\"anchor\" id=\"4.7\"><\/a>\n\n[Table of Contents](#0.1)\n\n- **Stdout** stands for Standard Output in Python.","28241266":"### **4.4 Data Preparation** <a class=\"anchor\" id=\"4.4\"><\/a>\n\n\n[Table of Contents](#0.1)","55cb6a31":"### **4.8 Model predictions** <a class=\"anchor\" id=\"4.8\"><\/a>\n\n[Table of Contents](#0.1)","48cdce59":"### **4.1 Load libraries** <a class=\"anchor\" id=\"4.1\"><\/a>\n\n[Table of Contents](#0.1)","67249185":"- The comparison above shows the log-loss value for test data and it is lowest in the case of CatBoost in most cases. It clearly signifies that CatBoost mostly performs better for both tuned and default models.\n\n- In addition to this, CatBoost does not require conversion of data set to any specific format like XGBoost and LightGBM.","038f09c2":"\n**If this helped in your learning, then please <font color=\"red\"><b>UPVOTE<\/b><\/font>  \u2013 because they are the source of motivation!**\n\n\n**Happy learning**\n","ad28960a":"### **Findings of EDA** \n\n- All the features are categorical.\n\n- The categorical features have a lot of unique values, we won't use one hot encoding, but depending on the dataset it may be a good idea to adjust one_hot_max_size.\n\n- There are no missing values in the dataset.","f4090f30":"### **4.6 CatBoost implementation** <a class=\"anchor\" id=\"4.6\"><\/a>\n\n\n[Table of Contents](#0.1)","d397b884":"# **3. Comparision of CatBoost and other Boosting algorithms** <a class=\"anchor\" id=\"3\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n- We have multiple boosting libraries like XGBoost, H2O and LightGBM and all of these perform well on variety of problems. \n\n- CatBoost developer have compared the performance with competitors on standard ML datasets.\n\n- This comparision is depicted in the following diagram:\n\n","a28926af":"### **View unique values in dataset**","0544d4fc":"# **1. Introduction to CatBoost** <a class=\"anchor\" id=\"1\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n- CatBoost documentation says that-\n\n  **\"CatBoost is a high-performance open source library for gradient boosting on decision trees.\"\"**\n  \n  \n- So, CatBoost is an algorithm for gradient boosting on decision trees. \n\n\n- It is a readymade classifier in scikit-learn\u2019s conventions terms that would deal with categorical features automatically.\n\n\n- It can easily integrate with deep learning frameworks like Google\u2019s TensorFlow and Apple\u2019s Core ML. \n\n\n- It can work with diverse data types to help solve a wide range of problems (described later) that businesses face today. \n\n\n- It is developed by Yandex researchers and engineers, and is used for search, recommendation systems, personal assistant, self-driving cars, weather prediction and many other tasks.\n\n\n- Also, it provides best-in-class accuracy.\n\n\n- It is especially powerful in two ways:\n\n\n  - 1.It yields state-of-the-art results without extensive data training typically required by other machine learning methods, and\n  \n  - 2.Provides powerful out-of-the-box support for the more descriptive data formats that accompany many business problems.\n\n\n- **\u201cCatBoost\u201d** name comes from two words - **\u201cCategory\u201d** and **\u201cBoosting\u201d**.\n\n\n- It works well with multiple categories of data, such as audio, text, image including historical data.\n\n\n- **\u201cBoost\u201d** comes from gradient boosting machine learning algorithm as this library is based on gradient boosting library. Gradient boosting is a powerful machine learning algorithm that is widely applied to multiple types of business challenges like fraud detection, recommendation items, forecasting and it performs well also. It can also return very good results with relatively less data, unlike DL models that need to learn from a massive amount of data.\n\n\n- It is in open-source and can be used by anyone.","9c4c3e7d":"![Comparision of CatBoost and other Boosting algorithms](https:\/\/s3-ap-south-1.amazonaws.com\/av-blog-media\/wp-content\/uploads\/2017\/08\/13153401\/Screen-Shot-2017-08-13-at-3.33.33-PM-768x443.png)","82fd0a66":"# **2. Advantages of CatBoost library** <a class=\"anchor\" id=\"2\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nAdvantages of CatBoost library are as follows:-\n\n\n- **Performance**: CatBoost provides state of the art results and it is competitive with any leading machine learning algorithm on the performance front.\n\n\n- **Handling Categorical features automatically**: We can use CatBoost without any explicit pre-processing to convert categories into numbers. CatBoost converts categorical values into numbers using various statistics on combinations of categorical features and combinations of categorical and numerical features. \n\n\n- **Robust**: It reduces the need for extensive hyper-parameter tuning and lower the chances of overfitting also which leads to more generalized models. Although, CatBoost has multiple parameters to tune and it contains parameters like the number of trees, learning rate, regularization, tree depth, fold size, bagging temperature and others. \n\n\n- **Easy-to-use**: We can use CatBoost from the command line, using an user-friendly API for both Python and R.\n ","5425394f":"# **5. Results and Conclusion**   <a class=\"anchor\" id=\"5\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n- In this kernel, we have discuss **CatBoost**, which is a high-performance open source library for gradient boosting on decision trees. \n\n- We have also discuss the advantages of **CatBoost** library.\n\n- We have also present the comparision between **CatBoost** and other **Boosting** algorithms.\n\n- We have also present the baseline implementation of CatBoost in Python.","7f2fb9d3":"So, now we will come to the end of this kernel.\n\nI hope you find this kernel useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\nThank you\n","e9d65dcd":"### **4.9 Metrics calculation and graph plotting** <a class=\"anchor\" id=\"4.9\"><\/a>\n\n[Table of Contents](#0.1)","1e643d1e":"### 4.5 **Split data into train and validation set** <a class=\"anchor\" id=\"4.5\"><\/a>\n\n\n[Table of Contents](#0.1)","2cbf730a":"We can see that there are no missing values in the dataset.","cc8c1117":"### Categorical features declaration","7e2af5d1":"### **Declare feature vector and target variable** ","0ee4b159":"### **Preview the dataset**","23a93231":"# **4. Implementation of CatBoost in Python** <a class=\"anchor\" id=\"4\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n- Now, we will present implementation of CatBoost in Python.\n\n- The first step is to load the required libraries.","b87fd76d":"<a class=\"anchor\" id=\"0.1\"><\/a>\n# **Table of Contents**\n\n1. [Introduction to CatBoost](#1)\n1. [Advantages of CatBoost library](#2)\n1. [Comparision of CatBoost and other Boosting algorithms](#3)\n1. [Implementation of CatBoost in Python](#4)\n    - [4.1\tLoad libraries](#4.1)\n    - [4.2\tRead dataset](#4.2)\n    - [4.3\tEDA](#4.3)\n    - [4.4 Data preparation](#4.4)\n    - [4.5 Split data into training and validation set](#4.5)\n    - [4.6 CatBoost implementation](#4.6)\n    - [4.7 Stdout of the training](#4.7)\n    - [4.8 Model predictions](#4.8)\n    - [4.9 Metrics calculation and graph plotting](#4.9)\n1. [Results and Conclusion](#5)","a2d42ae6":"<a class=\"anchor\" id=\"0\"><\/a>\n# **CatBoost Classifier in Python** \n\n\n\nHello friends,\n\n\nIn our machine learning journey, all of us have to deal with categorical data at some point of time. In sklearn, we are required to convert these categories into the numerical format. In order to do this conversion, we use several pre-processing methods like \u201clabel encoding\u201d, \u201cone hot encoding\u201d and others.\n\n\nIn this kernel, we will discuss an open sourced library - **CatBoost** developed and contributed by Yandex. CatBoost can use categorical features directly and is scalable in nature.\n\n\nSo, let's get started."}}