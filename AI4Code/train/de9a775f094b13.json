{"cell_type":{"d6374c69":"code","cb95fae1":"code","86e78c97":"code","ab9f5c4d":"code","c0236b93":"code","a0f64eb3":"code","d5d7e59a":"code","e09b4d8e":"code","80abe81e":"code","435af53c":"code","f34ca876":"code","c16f6895":"code","a2ae29e0":"code","faaf53d4":"code","f94d893c":"code","257db73b":"code","ca5f00b5":"code","a0ca991a":"code","c6124cdc":"code","7fd36515":"code","678931cf":"code","9e97954c":"code","02b6ace8":"code","894ea530":"code","fe8093c4":"markdown","4c8c8f1d":"markdown","34362eb3":"markdown","a3e7972c":"markdown","83dcbe63":"markdown"},"source":{"d6374c69":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cb95fae1":"#Libraries\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport datetime\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport plotly.offline as py\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, iplot\npy.init_notebook_mode(connected = True)\nimport plotly.express as px\n","86e78c97":"df = pd.read_csv('..\/input\/glassdoor-prepandemic-dataset-for-usa\/Glassdoor USA Dataset.csv')\nprint('Dataset has ',df.shape[0],' records and ',df.shape[1], ' columns' )\nprint(' ')\ndf.head() # head shows the first 5 rows by default","ab9f5c4d":"df.drop('Unnamed: 0' , axis = 1,inplace = True)","c0236b93":"df.info()","a0f64eb3":"# Some rating entries are not sensible! \nRting_values = df.Rating.unique()\nRting_values","d5d7e59a":"problematic_entries = []\nfor i in range(len(Rting_values)):\n    try:\n        float(Rting_values[i])\n    except:\n        problematic_entries.append(Rting_values[i])\n               \nproblematic_entries               ","e09b4d8e":"df_shifted = df[df['Rating'].isin(problematic_entries)]","80abe81e":"# making a better sense now\ndf_shifted = df_shifted.shift(periods=2, axis=\"columns\")\ndf_shifted","435af53c":"df_clean = df[~df['Rating'].isin(problematic_entries)]\ndf = pd.concat([df_clean, df_shifted])\ndf","f34ca876":"df['Rating'] = df['Rating'].astype('float')\ndf['Founded'] = df['Founded'].astype('int')","c16f6895":"df.isnull().sum()","a2ae29e0":"df = df.fillna('-1')","faaf53d4":"df.isnull().sum()","f94d893c":"output = []\n\nfor col in df.columns:\n\n    nonNull  = len(df) - np.sum(pd.isna(df[col]))\n    unique = df[col].nunique()\n    colType = str(df[col].dtype)\n\n    output.append([col, nonNull, unique, colType])\n\noutput = pd.DataFrame(output)   \noutput.columns = ['Column','Non-Null', 'unique', 'dtype']\noutput","257db73b":"# We can format some of the columns as categorical\ndf['Type of ownership'] = df['Type of ownership'].astype('category')\ndf['Industry'] = df['Industry'].astype('category')\ndf['Sector'] = df['Sector'].astype('category')\ndf['Revenue'] = df['Revenue'].astype('category')\ndf['Size'] = df['Size'].astype('category')\n","ca5f00b5":"df = df.sort_values('Rating',ascending = False).reset_index() # Default is ascending\ndf","a0ca991a":"df['Company Name'] = df['Company Name'].str.split('\\n').str[0]","c6124cdc":"df.Size.unique()","7fd36515":"size_values = list(df.Size.unique())\nsize_values[5] = '10000 or more employees'","678931cf":"size_values_sorted = sorted(size_values, key=lambda e: int(e.split(' ')[0])  if e != 'Unknown' else 99999999)\nsize_values_sorted[7] = '10000+ employees'","9e97954c":"sns.displot( \n    data = df,\n    x = \"Rating\",\n    hue = \"Size\",\n    hue_order = size_values_sorted,\n    kind = \"hist\",\n    aspect = 1.5,\n    log_scale = 10,\n    palette='hot'\n             )","02b6ace8":"plt.figure(figsize=(10, 8), dpi=80)\nbox_plot = sns.boxplot(x = 'Size',y = 'Rating',data = df,order = size_values_sorted)\nplt.ylabel('Rating')\nbox_plot.set_xticklabels(box_plot.get_xticklabels(),rotation=30)\nplt.xlabel('Size')\n\n\nax = box_plot.axes\nlines = ax.get_lines()\ncategories = ax.get_xticks()\n\n\n\nfor cat in categories:\n    # every 4th line at the interval of 6 is median line\n    # 0 -> p25 1 -> p75 2 -> lower whisker 3 -> upper whisker 4 -> p50 5 -> upper extreme value\n    y = round(lines[cat*6+2].get_ydata()[0],1) \n    y2 = round(lines[cat*6+4].get_ydata()[0],1) \n\n    ax.text(\n        cat, \n        y, \n        f'{y}', \n        ha='center', \n        va='center', \n        fontweight='bold', \n        size=10,\n        color='white',\n        bbox=dict(facecolor='#445A64'))\n    ax.text(\n        cat, \n        y2, \n        f'{y2}', \n        ha='center', \n        va='center', \n        fontweight='bold', \n        size=10,\n        color='white',\n        bbox=dict(facecolor='#445A64'))\n\nbox_plot.figure.tight_layout()\n\nfig = box_plot.get_figure()","894ea530":"plt.figure(figsize=(10, 8), dpi=80)\nbox_plot = sns.boxplot(x = 'Revenue',y = 'Rating',data = df)\nplt.ylabel('Rating')\nbox_plot.set_xticklabels(box_plot.get_xticklabels(),rotation=30)\nplt.xlabel('Revenue')\n\n\nax = box_plot.axes\nlines = ax.get_lines()\ncategories = ax.get_xticks()\n\n\n\nfor cat in categories:\n    # every 4th line at the interval of 6 is median line\n    # 0 -> p25 1 -> p75 2 -> lower whisker 3 -> upper whisker 4 -> p50 5 -> upper extreme value\n    y = round(lines[cat*6+2].get_ydata()[0],1) \n    y2 = round(lines[cat*6+4].get_ydata()[0],1) \n\n    ax.text(\n        cat, \n        y, \n        f'{y}', \n        ha='center', \n        va='center', \n        fontweight='bold', \n        size=10,\n        color='white',\n        bbox=dict(facecolor='#445A64'))\n    ax.text(\n        cat, \n        y2, \n        f'{y2}', \n        ha='center', \n        va='center', \n        fontweight='bold', \n        size=10,\n        color='white',\n        bbox=dict(facecolor='#445A64'))\n\nbox_plot.figure.tight_layout()\n\nfig = box_plot.get_figure()","fe8093c4":"### Now we can successfully convert the Rating column to float:","4c8c8f1d":"### Smaller size companies seem to have better ratings: ","34362eb3":"### Let's check the whole row for such cases\n## Obviously, there is a shift in the columns for these rows","a3e7972c":"### Let's check the best rated positions","83dcbe63":"## This is the corrected DataFrame now:"}}