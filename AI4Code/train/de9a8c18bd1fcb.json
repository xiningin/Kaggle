{"cell_type":{"fc9b65f0":"code","25e9b642":"code","e9c928de":"code","8d714e5a":"code","1cb637e2":"code","2d3c03e2":"code","9ce5186f":"code","5df513ed":"code","8c0aa8fb":"code","992957d7":"code","c24f5027":"code","a698e59a":"code","0e570371":"code","d3740306":"code","65c0980b":"code","ad233f9b":"code","1baba98e":"code","f1d9817a":"code","06baf754":"code","3f9a8fb7":"code","c2f2ccb5":"code","5a2df466":"code","aacb2367":"code","cc805408":"code","c25dae2c":"code","a97f14eb":"code","212d309b":"code","4597b867":"code","f0e7fa8d":"code","b93f69ca":"code","da8f3ac8":"code","cb9245e7":"code","c95c50d5":"code","7aafa302":"code","4ba44304":"code","23bc6dc2":"code","a9c092b9":"code","b663f2fe":"code","4138f188":"code","0adc999a":"code","3a1d552f":"code","57c4370c":"code","4eb62818":"code","2f9a1ccf":"code","70546085":"code","0a2acd1f":"code","51b19a0a":"code","413d9362":"code","0b4bbf43":"code","decd42e6":"code","5cd27386":"code","f05ec29a":"code","c573c771":"code","7f757170":"code","1d8aaa4a":"code","45b54809":"code","fe74a0cc":"code","904887cc":"code","4f9a879c":"code","f5219c5a":"code","fb9ebc58":"code","2328cae6":"code","04928a22":"code","b18fc230":"code","d8a2580a":"code","741ac00d":"code","015e1129":"code","51cbff1b":"code","8c3588f8":"markdown","d1418d40":"markdown","26ecb412":"markdown","7807fbd0":"markdown","c11f0ccc":"markdown","4796476c":"markdown","365bf428":"markdown","d48e2348":"markdown","02dd34d1":"markdown","d5be4901":"markdown","d79b6422":"markdown","14d7c740":"markdown","5ca2416b":"markdown","7ea74e5d":"markdown","fb7519fa":"markdown","36bfb498":"markdown","2ed7bfbf":"markdown","5256b68a":"markdown","a20a4070":"markdown","8222a44b":"markdown","6746855c":"markdown","51a825f1":"markdown","3a9fde3c":"markdown","639677a0":"markdown","24689a43":"markdown","a7b2ffa2":"markdown","b245d12b":"markdown","a66e1e74":"markdown","f3ae939d":"markdown","8431cdc2":"markdown","1c331563":"markdown","ef20e2ff":"markdown","b67c27fe":"markdown","273b6808":"markdown","ee32e8b4":"markdown","4a3dbb33":"markdown","4fad58dc":"markdown","51b80676":"markdown","1e54c077":"markdown","4a03d84a":"markdown","ec7279ee":"markdown","b44e46f6":"markdown","be673679":"markdown","389eb07c":"markdown","0a76499c":"markdown","234e9e5d":"markdown","8620308b":"markdown","47e521f3":"markdown","a0b9cc35":"markdown","ad2cf5c1":"markdown","7eef7d43":"markdown","4ae8a28c":"markdown","2661c28d":"markdown","fa00d8ad":"markdown","23ad059a":"markdown","5adfa32a":"markdown","7c648500":"markdown","fc71cd5e":"markdown","326a9556":"markdown","99ffbed6":"markdown","da8e5ec1":"markdown","70096d13":"markdown","3fd43e1e":"markdown","7df51f7f":"markdown"},"source":{"fc9b65f0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","25e9b642":"import numpy as np \nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt  \nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #\u5ffd\u7565\u8b66\u544a\uff08\u6765\u81eaSklearn\u548cSeanborn\uff09\n\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew #\u5bf9\u4e8e\u4e00\u4e9b\u7edf\u8ba1\u6570\u636e\n\n\npd.set_option('display.float_format', lambda x: '{:.3f}'.format(x)) #\u9650\u5236\u6d6e\u5b50\u8f93\u51fa\u52303\u4e2a\u5c0f\u6570\u70b9\n\n\n#from subprocess import check_output\n#print(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\")) #\u68c0\u67e5\u76ee\u5f55\u4e2d\u53ef\u7528\u7684\u6587\u4ef6","e9c928de":"train = pd.read_csv('..\/input\/machine-learning-hebei-north-university\/train.csv',encoding='gbk')\ntest = pd.read_csv('..\/input\/machine-learning-hebei-north-university\/test.csv',encoding='gbk')","8d714e5a":"train.head(5)","1cb637e2":"test.head(5)","2d3c03e2":"train.columns","9ce5186f":"#\u68c0\u67e5\u6837\u672c\u548c\u529f\u80fd\u7684\u6570\u91cf\nprint(\"The train data size before dropping Id feature is : {} \".format(train.shape))\nprint(\"The test data size before dropping Id feature is : {} \".format(test.shape))\n\n#Save the 'Id' column\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\n#\u73b0\u5728\u4e22\u5f03\u201cID\u201d\uff0c\u56e0\u4e3a\u9884\u6d4b\u8fc7\u7a0b\u662f\u4e0d\u5fc5\u8981\u7684\u3002\ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\", axis = 1, inplace = True)\n\n#\u5220\u9664\u201cID\u201d\u53d8\u91cf\u540e\u518d\u6b21\u68c0\u67e5\u6570\u636e\u5927\u5c0f\nprint(\"\\nThe train data size after dropping Id feature is : {} \".format(train.shape)) \nprint(\"The test data size after dropping Id feature is : {} \".format(test.shape))","5df513ed":"fig, ax = plt.subplots()\nax.scatter(x = train['GrLivArea'], y = train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","8c0aa8fb":"#\u5220\u9664\u5f02\u5e38\u503c\ntrain = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)","992957d7":"#\u5220\u9664\u5f02\u5e38\u503c\uff0c\u518d\u6b21\u68c0\u67e5\u56fe\u5f62\nfig, ax = plt.subplots()\nax.scatter(train['GrLivArea'], train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","c24f5027":"var = 'TotalBsmtSF'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","a698e59a":"var = 'YearBuilt'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 8))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nplt.xticks(rotation=90);","0e570371":"sns.distplot(train['SalePrice'] , fit=norm);\n\n# \u83b7\u53d6\u529f\u80fd\u4f7f\u7528\u7684\u62df\u5408\u53c2\u6570\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#\u73b0\u5728\u7ed8\u5236\u5206\u5e03\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#\u4e5f\u53ef\u4ee5\u83b7\u5f97qq-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","d3740306":"\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#\u68c0\u67e5\u65b0\u5206\u53d1\nsns.distplot(train['SalePrice'] , fit=norm);\n\n# \u83b7\u53d6\u529f\u80fd\u4f7f\u7528\u7684\u62df\u5408\u53c2\u6570\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#\u73b0\u5728\u7ed8\u5236\u5206\u5e03\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#\u4e5f\u53ef\u4ee5\u83b7\u5f97qq-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","65c0980b":"ntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train.SalePrice.values\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data.shape))","ad233f9b":"train_na = (train.isnull().sum() \/ len(train)) * 100\ntrain_na = train_na.drop(train_na[train_na == 0].index).sort_values(ascending=False)[:30]\n\nmissing_data = pd.DataFrame({'Missing Ratio' :train_na})\nmissing_data.head(20)","1baba98e":"#\u7b5b\u9009\u51fa\u542b\u6709\u7f3a\u5931\u503c\u7684\u53d8\u91cf\uff0c\u5e76\u6309\u7167\u4ece\u5927\u5230\u5c0f\u6392\u5217\uff0c\u5217\u51fa\u524d20\u4e2a\u53d8\u91cf\nall_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\n\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head(20)","f1d9817a":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=all_data_na.index, y=all_data_na)\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","06baf754":"corrmat = train.corr()\nplt.subplots(figsize=(12,9))\nsns.heatmap(corrmat, vmax=0.9, square=True)","3f9a8fb7":"all_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")\nall_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")\nall_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")\nall_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")\nall_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")","c2f2ccb5":"#\u4e0e\u623f\u4ea7\u76f8\u8fde\u7684\u8857\u9053\u7684\u7ebf\u6027\u82f1\u5c3aLotFrontage-->\u4e2d\u4f4d\u6570\u586b\u5145\u7f3a\u5931\u503c\nall_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))","5a2df466":"for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[col] = all_data[col].fillna('None')","aacb2367":"for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)","cc805408":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)","c25dae2c":"for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')","a97f14eb":"all_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)","212d309b":"all_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])","4597b867":"all_data = all_data.drop(['Utilities'], axis=1)","f0e7fa8d":"all_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")","b93f69ca":"all_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])","da8f3ac8":"all_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])","cb9245e7":"all_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])","c95c50d5":"all_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])","7aafa302":"all_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")","4ba44304":"#\u68c0\u67e5\u5269\u4f59\u7684\u7f3a\u5931\u503c\uff08\u5982\u679c\u6709\uff09\nall_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","23bc6dc2":"#MSSubClass=\u5efa\u7b51\u7c7b\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\n\n#\u5c06 OverallCond \u66f4\u6539\u4e3a\u5206\u7c7b\u53d8\u91cf\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\n\n#\u9500\u552e\u7684\u5e74\u4efd\u548c\u6708\u4efd\u88ab\u8f6c\u6362\u4e3a\u5206\u7c7b\u7279\u5f81\u3002\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","a9c092b9":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n#\u5904\u7406\u5217\uff0c\u5c06 LabelEncoder \u5e94\u7528\u4e8e\u5206\u7c7b\u7279\u5f81\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\n# shape        \nprint('Shape all_data: {}'.format(all_data.shape))","b663f2fe":"# \u6dfb\u52a0\u603b\u5e73\u65b9\u82f1\u5c3a\u529f\u80fd\nall_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']","4138f188":"numeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\n#\u68c0\u67e5\u6240\u6709\u6570\u503c\u7279\u5f81\u7684\u504f\u659c\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","0adc999a":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    all_data[feat] = boxcox1p(all_data[feat], lam)\n    \n#all_data[skewed_features] = np.log1p(all_data[skewed_features])","3a1d552f":"all_data = pd.get_dummies(all_data)\nprint(all_data.shape)","57c4370c":"train = all_data[:ntrain]\ntest = all_data[ntrain:]","4eb62818":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","2f9a1ccf":"#\u9a8c\u8bc1\u529f\u80fd\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","70546085":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))","0a2acd1f":"ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))","51b19a0a":"KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)","413d9362":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)","0b4bbf43":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)","decd42e6":"model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","5cd27386":"score = rmsle_cv(lasso)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","f05ec29a":"score = rmsle_cv(ENet)\nprint(\"ElasticNet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","c573c771":"score = rmsle_cv(KRR)\nprint(\"Kernel Ridge score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","7f757170":"score = rmsle_cv(GBoost)\nprint(\"Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","1d8aaa4a":"score = rmsle_cv(model_xgb)\nprint(\"Xgboost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","45b54809":"score = rmsle_cv(model_lgb)\nprint(\"LGBM score: {:.4f} ({:.4f})\\n\" .format(score.mean(), score.std()))","fe74a0cc":"class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, models):\n        self.models = models\n        \n    # \u6211\u4eec\u5b9a\u4e49\u4e86\u539f\u8f66\u578b\u7684\u514b\u9686\uff0c\u4ee5\u9002\u5e94\u6570\u636e\n    def fit(self, X, y):\n        self.models_ = [clone(x) for x in self.models]\n        \n        # Train cloned base models\n        for model in self.models_:\n            model.fit(X, y)\n\n        return self\n    \n    #\u73b0\u5728\u6211\u4eec\u5bf9\u514b\u9686\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\u5e76\u5bf9\u5176\u8fdb\u884c\u5e73\u5747\n    def predict(self, X):\n        predictions = np.column_stack([\n            model.predict(X) for model in self.models_\n        ])\n        return np.mean(predictions, axis=1)   \n","904887cc":"averaged_models = AveragingModels(models = (ENet, GBoost, KRR, lasso))\n\nscore = rmsle_cv(averaged_models)\nprint(\" Averaged base models score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","4f9a879c":"class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n   \n    # We again fit the data on clones of the original models\n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        # Train cloned base models then create out-of-fold predictions\n        # that are needed to train the cloned meta-model\n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n   \n    #Do the predictions of all base models on the test data and use the averaged predictions as \n    #meta-features for the final prediction which is done by the meta-model\n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)","f5219c5a":"stacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR),\n                                                 meta_model = lasso)\n\nscore = rmsle_cv(stacked_averaged_models)\nprint(\"Stacking Averaged models score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","fb9ebc58":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","2328cae6":"stacked_averaged_models.fit(train.values, y_train)\nstacked_train_pred = stacked_averaged_models.predict(train.values)\nstacked_pred = np.expm1(stacked_averaged_models.predict(test.values))\nprint(rmsle(y_train, stacked_train_pred))","04928a22":"model_xgb.fit(train, y_train)\nxgb_train_pred = model_xgb.predict(train)\nxgb_pred = np.expm1(model_xgb.predict(test))\nprint(rmsle(y_train, xgb_train_pred))","b18fc230":"model_lgb.fit(train, y_train)\nlgb_train_pred = model_lgb.predict(train)\nlgb_pred = np.expm1(model_lgb.predict(test.values))\nprint(rmsle(y_train, lgb_train_pred))","d8a2580a":"'''RMSE on the entire Train data when averaging'''\n\nprint('RMSLE score on train data:')\nprint(rmsle(y_train,stacked_train_pred*0.70 +\n               xgb_train_pred*0.15 + lgb_train_pred*0.15 ))","741ac00d":"ensemble = stacked_pred*0.70 + xgb_pred*0.15 + lgb_pred*0.15","015e1129":"sub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = ensemble\nsub.to_csv('submission.csv',index=False)","51cbff1b":"sub","8c3588f8":"Utilities : \u5bf9\u4e8e\u8fd9\u4e00\u5206\u7c7b\u7279\u5f81\uff0c\u6240\u6709\u8bb0\u5f55\u90fd\u662f\u201cAllPub\u201d\uff0c\u9664\u4e86\u4e00\u4e2a\u201cNoSeWa\u201d\u548c 2 \u4e2a NA \u3002\u7531\u4e8e\u5e26\u6709\u201cNoSewa\u201d\u7684\u623f\u5b50\u5728\u8bad\u7ec3\u96c6\u4e2d\uff0c\u56e0\u6b64\u6b64\u529f\u80fd\u5bf9\u9884\u6d4b\u5efa\u6a21\u6ca1\u6709\u5e2e\u52a9\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u5220\u9664\u5b83\u3002","d1418d40":"**\u5355\u53d8\u91cf\u5206\u6790**\n\n1.\u5f02\u5e38\u503c\u5904\u7406\n","26ecb412":"**\u66f4\u591a\u529f\u80fd\u5de5\u7a0b**\n\n\u8f6c\u6362\u4e00\u4e9b\u771f\u6b63\u5206\u7c7b\u7684\u6570\u503c\u53d8\u91cf","7807fbd0":"**\u5806\u53e0\u6a21\u578b**\n\n\u6700\u7b80\u5355\u7684\u5806\u53e0\u65b9\u6cd5\uff1a\u5e73\u5747\u57fa\u7840\u6a21\u578b\n\n\u6211\u4eec\u4ece\u8fd9\u79cd\u7b80\u5355\u7684\u57fa\u672c\u6a21\u578b\u5e73\u5747\u65b9\u6cd5\u5f00\u59cb\u3002\u6211\u4eec\u6784\u5efa\u4e86\u4e00\u4e2a\u65b0\u7c7b\u6765\u4f7f\u7528\u6211\u4eec\u7684\u6a21\u578b\u6269\u5c55 scikit-learn \u5e76\u5229\u7528\u5c01\u88c5\u548c\u4ee3\u7801\u91cd\u7528\uff08\u7ee7\u627f\uff09\n\u5e73\u5747\u57fa\u7840\u6a21\u578b\u7c7b","c11f0ccc":"**\u7f3a\u5931\u503c\u5904\u7406**","4796476c":"BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2 : \u5bf9\u4e8e\u6240\u6709\u8fd9\u4e9b\u4e0e\u5730\u4e0b\u5ba4\u76f8\u5173\u7684\u5206\u7c7b\u7279\u5f81\uff0cNaN \u610f\u5473\u7740\u6ca1\u6709\u5730\u4e0b\u5ba4\u3002","365bf428":"**\u7ed8\u5236\u70ed\u529b\u56fe**","d48e2348":"**\u7279\u5f81\u5de5\u7a0b**","02dd34d1":"\u5408\u594fSackedRegressor\uff0cXGBoost\u548cLightGBM\n\n\u6211\u4eec\u5c06XGBoost\u548cLightGBM\u6dfb\u52a0\u5230\u5148\u524d\u5b9a\u4e49\u7684\u5806\u6808\u4e2d\u3002\n\n\u6211\u4eec\u9996\u5148\u5b9a\u4e49RMSLE\u8bc4\u4f30\u529f\u80fd","d5be4901":"\u539f\u5efa\u65e5\u671f\u548c\u623f\u4ef7\u7684\u5173\u7cfb","d79b6422":"**\u83b7\u53d6\u65b0\u7684\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u3002**","14d7c740":"**\u5806\u53e0\u5e73\u5747\u6a21\u578b\u5f97\u5206**\n\n\u4e3a\u4e86\u4f7f\u4e24\u79cd\u65b9\u6cd5\u53ef\u6bd4\uff08\u901a\u8fc7\u4f7f\u7528\u76f8\u540c\u6570\u91cf\u7684\u6a21\u578b\uff09\uff0c\u6211\u4eec\u53ea\u662f\u5e73\u5747eNET krr\u548cgboost\uff0c\u7136\u540e\u6211\u4eec\u5c06\u5957\u7d22\u6dfb\u52a0\u4e3ameta\u6a21\u578b\u3002","5ca2416b":"\u503e\u659c\u7279\u5f81","7ea74e5d":"\u8ba9\u6211\u4eec\u9996\u5148\u5728\u76f8\u540c\u7684DataFrame\u4e2d\u8fde\u63a5\u8bad\u7ec3\u548c\u6d4b\u8bd5\u6570\u636e","fb7519fa":"**\u51cf\u5c11\u7b80\u5355\u5806\u53e0\uff1a\u6dfb\u52a0\u5143\u6a21\u578b**\n\n\u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u5728\u5e73\u5747\u57fa\u7840\u6a21\u578b\u4e0a\u6dfb\u52a0\u4e86\u4e00\u4e2aMeta\u6a21\u578b\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e9b\u57fa\u7840\u6a21\u578b\u7684\u6298\u53e0\u9884\u6d4b\u6765\u8bad\u7ec3\u6211\u4eec\u7684\u5143\u6a21\u578b\u3002\n\u5bf9\u4e8e\u8bad\u7ec3\u90e8\u5206\u7684\u7a0b\u5e8f\u53ef\u4ee5\u63cf\u8ff0\u5982\u4e0b\uff1a\n\n1\u3001\u5c06\u603b\u57f9\u8bad\u5206\u6210\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u96c6\u5408\uff08\u8fd9\u91cc\u57f9\u8bad\u548c.Holdout\uff09\n2\u3001\u5728\u7b2c\u4e00\u90e8\u5206\uff08\u706b\u8f66\uff09\u57f9\u8bad\u51e0\u4e2a\u57fa\u7840\u6a21\u578b\n3\u3001\u5728\u7b2c\u4e8c\u90e8\u5206\u4e0a\u6d4b\u8bd5\u8fd9\u4e9b\u57fa\u7840\u6a21\u578b\uff08HoldOut\uff09\n4\u3001\u4f7f\u75283\uff09\u7684\u9884\u6d4b\uff08\u79f0\u4e3a\u6298\u53e0\u8d85\u51fa\u9884\u6d4b\uff09\u4f5c\u4e3a\u8f93\u5165\uff0c\u4ee5\u53ca\u6b63\u786e\u7684\u54cd\u5e94\uff08\u76ee\u6807\u53d8\u91cf\uff09\u4f5c\u4e3a\u57f9\u8bad\u79f0\u4e3aMeta-Model\u7684\u66f4\u9ad8\u7ea7\u522b\u5b66\u4e60\u8005\u7684\u8f93\u51fa\u3002\n\n\u524d\u4e09\u4e2a\u6b65\u9aa4\u662f\u8fed\u4ee3\u5b8c\u6210\u7684\u3002\u5982\u679c\u6211\u4eec\u91c7\u53d6\u4f8b\u59825\u500d\u5806\u53e0\uff0c\u6211\u4eec\u9996\u5148\u5c06\u8bad\u7ec3\u6570\u636e\u5206\u62105\u500d\u3002\u7136\u540e\u6211\u4eec\u4f1a\u505a5\u4e2a\u8fed\u4ee3\u3002\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u57284\u500d\u4e0a\u57f9\u8bad\u6bcf\u4e2a\u57fa\u7840\u578b\u53f7\uff0c\u5e76\u9884\u6d4b\u5269\u4f59\u6298\u53e0\uff08\u963b\u6b62\u6298\u53e0\uff09\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u786e\u5b9a\u57285\u6b21\u8fed\u4ee3\u4e4b\u540e\uff0c\u6574\u4e2a\u6570\u636e\u7528\u4e8e\u83b7\u53d6\u6298\u53e0\u7684\u9884\u6d4b\uff0c\u7136\u540e\u6211\u4eec\u5c06\u4f7f\u7528\u4f5c\u4e3a\u65b0\u529f\u80fd\u6765\u57f9\u8bad\u6b65\u9aa44\u4e2d\u7684\u5143\u6a21\u578b\u3002","36bfb498":"\u504f\u5dee\u4f3c\u4e4e\u7ea0\u6b63\uff0c\u6570\u636e\u770b\u8d77\u6765\u66f4\u6b63\u5e38\u5206\u5e03\u3002","2ed7bfbf":"Submission","5256b68a":"MSZoning (\u4e00\u822c\u5206\u533a\u5206\u7c7b) :'RL' \u662f\u6700\u5e38\u89c1\u7684\u503c\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528'RL'\u586b\u5145\u7f3a\u5931\u503c","a20a4070":"\u6807\u7b7e\u5bf9\u4e00\u4e9b\u5206\u7c7b\u53d8\u91cf\u8fdb\u884c\u7f16\u7801\uff0c\u8fd9\u4e9b\u53d8\u91cf\u53ef\u80fd\u5728\u5176\u6392\u5e8f\u96c6\u4e2d\u5305\u542b\u4fe1\u606f","8222a44b":"**\u7f3a\u5931\u503c\u5904\u7406**","6746855c":"**\u5bfc\u5165\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e**","51a825f1":"GarageYrBlt, GarageArea and GarageCars : \u7528 0 \u66ff\u6362\u4e22\u5931\u7684\u6570\u636e\uff08\u56e0\u4e3a\u6ca1\u6709\u8f66\u5e93 \uff0c\u7f3a\u5931\u503c\u53ef\u80fd\u4e3a0\u3002)","3a9fde3c":"**XGBoost :**","639677a0":"**\u76ee\u6807\u53d8\u91cf\u5206\u6790**\n\nSalePrice\u662f\u6211\u4eec\u9700\u8981\u9884\u6d4b\u7684\u53d8\u91cf\u3002\u6240\u4ee5\u8ba9\u6211\u4eec\u5148\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u8fdb\u884c\u4e00\u4e9b\u5206\u6790\u3002","24689a43":"Exterior1st and Exterior2nd : \u540c\u6837\uff0c\u5916\u90e8 1 \u548c 2 \u90fd\u53ea\u6709\u4e00\u4e2a\u7f3a\u5931\u503c\u3002\u6211\u4eec\u5c06\u66ff\u6362\u6700\u5e38\u89c1\u7684\u5b57\u7b26\u4e32","a7b2ffa2":"**\u6dfb\u52a0\u4e00\u9879\u66f4\u91cd\u8981\u7684\u529f\u80fd**\n\n\u7531\u4e8e\u4e0e\u9762\u79ef\u76f8\u5173\u7684\u7279\u5f81\u5bf9\u4e8e\u786e\u5b9a\u623f\u4ef7\u975e\u5e38\u91cd\u8981\uff0c\u6211\u4eec\u518d\u6dfb\u52a0\u4e00\u4e2a\u7279\u5f81\uff0c\u5373\u6bcf\u4e2a\u623f\u5c4b\u7684\u5730\u4e0b\u5ba4\u3001\u4e00\u697c\u548c\u4e8c\u697c\u9762\u79ef\u7684\u603b\u9762\u79ef","b245d12b":"**\u6838\u5cad\u56de\u5f52\uff1a**","a66e1e74":"**\u6700\u7ec8\u57f9\u8bad\u548c\u9884\u6d4b**\n\nstackedregressor\uff1a","f3ae939d":"**LightGBM :**","8431cdc2":"\u5bf9\u4e8e\u9884\u6d4b\u90e8\u5206\uff0c\u6211\u4eec\u5e73\u5747\u5bf9\u6d4b\u8bd5\u6570\u636e\u4e0a\u6240\u6709\u57fa\u7840\u6a21\u578b\u7684\u9884\u6d4b\uff0c\u5e76\u5c06\u5176\u7528\u4f5c\u5143\u7d20\uff0c\u5728\u5176\u4e2d\uff0c\u4f7f\u7528\u5143\u6a21\u578b\u5b8c\u6210\u6700\u7ec8\u9884\u6d4b\u3002","1c331563":"**\u9996\u5148\u5bfc\u5165\u4e00\u4e9b\u5fc5\u8981\u7684\u5305**","ef20e2ff":"\u901a\u8fc7\u6dfb\u52a0\u5143\u5b66\u4e60\u8005\uff0c\u6211\u4eec\u518d\u6b21\u83b7\u5f97\u66f4\u597d\u7684\u5206\u6570","b67c27fe":"KitchenQual: \u53ea\u6709\u4e00\u4e2a NA \u503c\uff0c\u4e0e Electrical \u76f8\u540c\uff0c\u6211\u4eec\u4e3a KitchenQual \u4e2d\u7684\u7f3a\u5931\u503c\u8bbe\u7f6e\u4e86\u201cTA\u201d\uff08\u8fd9\u662f\u6700\u5e38\u89c1\u7684\uff09\u3002","273b6808":"\u6211\u4eec\u53ef\u4ee5\u5728\u53f3\u4e0b\u65b9\u770b\u5230\u4e24\u4e2a\u5177\u6709\u4f4e\u4ef7\u683c\u7684\u6781\u5927\u7684Grlivarea\u3002\u53ef\u4ee5\u76f4\u63a5\u5220\u9664\u5f02\u5e38\u503c","ee32e8b4":"\u5806\u53e0\u5e73\u5747\u6a21\u578b\u7c7b","4a3dbb33":"XGBoost:","4fad58dc":"MasVnrArea and MasVnrType : NA \u5f88\u53ef\u80fd\u610f\u5473\u7740\u8fd9\u4e9b\u623f\u5c4b\u6ca1\u6709\u7816\u77f3\u9970\u9762\u3002\u6211\u4eec\u53ef\u4ee5\u4e3a\u533a\u57df\u586b\u5145 0\uff0c\u4e3a\u7c7b\u578b\u586b\u5145 None\u3002","51b80676":"LightGBM:","1e54c077":"**\u6a21\u578b\u8bad\u7ec3**","4a03d84a":"**\u83b7\u53d6\u865a\u62df\u5206\u7c7b\u7279\u5f81**","ec7279ee":"**\u57fa\u672c\u578b\u53f7**\n\n\u5957\u7d22\u56de\u5f52\uff1a\n\u8be5\u6a21\u578b\u53ef\u80fd\u5bf9\u5f02\u5e38\u503c\u975e\u5e38\u654f\u611f\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8ba9\u5b83\u5bf9\u5b83\u4eec\u66f4\u52a0\u5065\u58ee\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528 sklearn \u7684 Robustscaler() \u65b9\u6cd5\n","b44e46f6":"**\u57fa\u7840\u6a21\u578b\u5206\u6570**\n\n\u8ba9\u6211\u4eec\u901a\u8fc7\u8bc4\u4f30\u4ea4\u53c9\u9a8c\u8bc1 rmsle \u8bef\u5dee\u6765\u770b\u770b\u8fd9\u4e9b\u57fa\u7840\u6a21\u578b\u5982\u4f55\u5bf9\u6570\u636e\u6267\u884c","be673679":"GarageType, GarageFinish, GarageQual and GarageCond :\u7528\u65e0\u66ff\u6362\u4e22\u5931\u7684\u6570\u636e","389eb07c":"**\u68af\u5ea6\u63d0\u5347\u56de\u5f52\uff1a**\n\n\u4f7f\u7528 huber \u635f\u5931\u4f7f\u5176\u5bf9\u5f02\u5e38\u503c\u5177\u6709\u9c81\u68d2\u6027","0a76499c":"MSSubClass : Na \u5f88\u53ef\u80fd\u610f\u5473\u7740\u6ca1\u6709\u5efa\u7b51\u7c7b\u3002\u6211\u4eec\u53ef\u4ee5\u7528 None \u66ff\u6362\u7f3a\u5931\u503c","234e9e5d":"SaleType :\u518d\u6b21\u586b\u5199\u6700\u9891\u7e41\u7684\u201cWD\u201d","8620308b":"**\u5f39\u6027\u51c0\u56de\u5f52**\n\n\u518d\u6b21\u5bf9\u5f02\u5e38\u503c\u53d8\u5f97\u7a33\u5065","47e521f3":"**\u5b9a\u4e49\u4ea4\u53c9\u9a8c\u8bc1\u7b56\u7565**\n\n\u6211\u4eec\u4f7f\u7528 Sklearn \u7684 cross_val_score \u51fd\u6570\u3002\u4f46\u662f\u8fd9\u4e2a\u51fd\u6570\u6ca1\u6709shuffle\u5c5e\u6027\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u4e00\u884c\u4ee3\u7801\uff0c\u4ee5\u4fbf\u5728\u4ea4\u53c9\u9a8c\u8bc1\u4e4b\u524d\u5bf9\u6570\u636e\u96c6\u8fdb\u884cshuffle\n","a0b9cc35":"\u662f\u5426\u8fd8\u6709\u5269\u4f59\u7684\u7f3a\u5931\u503c\uff1f","ad2cf5c1":"Ensemble prediction:","7eef7d43":"\u5730\u4e0b\u5ba4\u603b\u5e73\u65b9\u82f1\u5c3a\u548c\u623f\u4ef7\u7684\u5173\u7cfb","4ae8a28c":"\u4f3c\u4e4e\u5373\u4f7f\u662f\u6700\u7b80\u5355\u7684\u5806\u53e0\u65b9\u6cd5\u4e5f\u80fd\u771f\u6b63\u63d0\u9ad8\u5206\u6570\u3002\u8fd9\u9f13\u52b1\u6211\u4eec\u8d70\u5f97\u66f4\u8fdc\uff0c\u63a2\u7d22\u4e00\u79cd\u4e0d\u90a3\u4e48\u7b80\u5355\u7684\u5806\u53e0\u65b9\u6cd5\u3002","2661c28d":"LabelEncoder:\u5bf9\u76ee\u6807\u6807\u7b7e\u8fdb\u884c\u7f16\u7801","fa00d8ad":"Electrical : \u5b83\u6709\u4e00\u4e2a NA \u503c\u3002\u7531\u4e8e\u6b64\u529f\u80fd\u4e3b\u8981\u5305\u542b\u201cSBrkr\u201d\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8bbe\u7f6e\u4e3a\u7f3a\u5931\u503c\u3002","23ad059a":"**\u76ee\u6807\u53d8\u91cf\u7684\u65e5\u5fd7\u8f6c\u6362**","5adfa32a":"BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath : \u7531\u4e8e\u6ca1\u6709\u5730\u4e0b\u5ba4\uff0c\u7f3a\u5931\u503c\u53ef\u80fd\u4e3a\u96f6","7c648500":"\u6563\u70b9\u56fe grlivarea\/saleprice(\u5c45\u4f4f\u9762\u79ef\u548c\u4ef7\u683c\u7684\u5173\u7cfb)","fc71cd5e":"**\uff08\u9ad8\u5ea6\uff09\u503e\u659c\u7279\u5f81\u7684 Box Cox \u53d8\u6362**\n\n\u6211\u4eec\u4f7f\u7528 scipy \u51fd\u6570 boxcox1p \u6765\u8ba1\u7b97 1+x1+x \u7684 Box-Cox \u53d8\u6362\u3002\n\u8bf7\u6ce8\u610f\uff0c\u8bbe\u7f6e \u03bb=0\u03bb=0 \u7b49\u6548\u4e8e\u4e0a\u9762\u7528\u4e8e\u76ee\u6807\u53d8\u91cf\u7684 log1p\u3002\n","326a9556":"\u76ee\u6807\u53d8\u91cf\u662f\u6b63\u786e\u7684\u503e\u659c\u3002 AS\uff08\u7ebf\u6027\uff09\u6a21\u578b\u901a\u5e38\u5206\u5e03\u5f0f\u6570\u636e\uff0c\u6211\u4eec\u9700\u8981\u8f6c\u6362\u6b64\u53d8\u91cf\u5e76\u4f7f\u5176\u66f4\u6b63\u5e38\u5206\u5e03\u3002","99ffbed6":"\u7531\u6b64\u53ef\u89c1\uff0c\u7f3a\u5931\u503c\u5904\u7406\u5b8c\u6210","da8e5ec1":"**\u6570\u636e\u5904\u7406**","70096d13":"**\u5806\u53e0\u56de\u5f52\u9884\u6d4b\u623f\u4ef7**","3fd43e1e":"\u5c06\u7f3a\u5931\u503c>50% \u7684\u53d8\u91cf\uff0c\u7528none\u4ee3\u66ff\u3002","7df51f7f":"**\u5e73\u5747\u57fa\u7840\u6a21\u578b\u5f97\u5206**\n\n\u6211\u4eec\u5728\u8fd9\u91cc\u53ea\u5e73\u5747\u4e86\u56db\u4e2a\u6a21\u578b ENet\u3001GBoost\u3001KRR \u548c lasso\u3002\u5f53\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u7ec4\u5408\u4e2d\u6dfb\u52a0\u66f4\u591a\u6a21\u578b\u3002"}}