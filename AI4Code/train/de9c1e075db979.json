{"cell_type":{"199b9a85":"code","c23a90e9":"code","e9b8d53f":"code","a8fce53f":"code","ed96f582":"code","9675e19a":"code","055e1361":"code","3b3468e1":"code","33e01f1e":"code","8c049760":"markdown","fe9b26bd":"markdown","6f494f86":"markdown"},"source":{"199b9a85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objs as go\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c23a90e9":"pip install openpyxl","e9b8d53f":"df = pd.read_excel('\/kaggle\/input\/saiti0\/A.xlsx')\ndf.head()","a8fce53f":"df.isnull().sum()","ed96f582":"#Code by Antima Rai https:\/\/www.kaggle.com\/antimaarai\/car-selling-price-prediction\/notebook\n\n%matplotlib inline\ndf.hist(bins=50, figsize=(30,15))\nplt.show()","9675e19a":"#Code by Puru Behl https:\/\/www.kaggle.com\/accountstatus\/mt-cars-data-analysis\n\nsns.distplot(df['\u5c0f\u533a\u5185\u7684\u5e73\u5747\u7528\u6237\u6570'])\nplt.axvline(df['\u5c0f\u533a\u5185\u7684\u5e73\u5747\u7528\u6237\u6570'].values.mean(), color='red', linestyle='dashed', linewidth=1)\nplt.title('\u5c0f\u533a\u5185\u7684\u5e73\u5747\u7528\u6237\u6570 distribution');","055e1361":"!pip install pyplotz","3b3468e1":"#Code by https:\/\/github.com\/songlinhou\/pyplotz\n\nfrom pyplotz.pyplotz import PyplotZ\n\npltz = PyplotZ() # create an instance\npltz.plot(np.linspace(-10,10),np.sin(np.linspace(-10,10)),'b', label='sin\u6570\u636e',alpha=0.7)\npltz.plot(np.linspace(-10,10),np.cos(np.linspace(-10,10)),'r', label='cos\u6570\u636e',alpha=0.7)\npltz.title(\"\u6570\u636e\u56fe\")\npltz.xlabel(\"\u6a2a\u5750\u6807\")\npltz.ylabel(\"\u7eb5\u5750\u6807\")\nplt.grid() # you can use matplotlib API and pyplotz interchangeably.\npltz.legend() # use legend function from pltz to show Chinese properly","33e01f1e":"import matplotlib.font_manager as fm\nfont = fm.FontProperties(fname='c:\\\\windows\\\\fonts\\\\simsun.ttc')  # specify font\nax = df.plot(x = '\u5c0f\u533a\u5185\u7684\u5e73\u5747\u7528\u6237\u6570',y = '\u57fa\u7ad9\u7f16\u53f7',kind = 'barh')\nax.set_xticklabels(df['\u5c0f\u533a\u5185\u7684\u5e73\u5747\u7528\u6237\u6570'].str.decode('utf-8'), fontproperties=font)\nplt.show()","8c049760":"#Specifying font didn't work as I expected, since \"Can only use .str accessor with string values!\"","fe9b26bd":"I will wait till anyone work with chinese fonts to learn.","6f494f86":"#Below: AttributeError: Can only use .str accessor with string values!"}}