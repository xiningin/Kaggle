{"cell_type":{"c53c3ea3":"code","cd7562da":"code","090244f1":"code","f1dfc66d":"code","902b77c0":"code","a49edd86":"code","ea99df9a":"code","1ae4763e":"code","bf0880dc":"code","e7147a31":"code","4d66b627":"code","aba61412":"code","c70b9954":"code","79143cb4":"code","1363716f":"code","bb65bf33":"code","2363b9c5":"code","e0e1d5ca":"code","01c3d13a":"code","19778ad5":"code","74ed1682":"code","f3d4e9d9":"code","7bf122bc":"code","1c3278a3":"code","2efec1b5":"code","de823f5f":"code","fd115e15":"code","b07a2d3d":"code","c8119fb7":"code","8de46ccb":"code","6550f4c2":"code","c78f2071":"code","c3b43764":"code","78c1a94c":"code","2a650172":"markdown","8e850a17":"markdown","d7a42da2":"markdown","3bbc9f40":"markdown","0da0a9cf":"markdown","5370b209":"markdown","1501c45d":"markdown","b75e90cd":"markdown","2a5e824f":"markdown","9c4d353b":"markdown","6a38216a":"markdown","e80609eb":"markdown","bb3aaa11":"markdown","c24bc64f":"markdown","535d8bc8":"markdown","31ce2594":"markdown","337813c5":"markdown","c681b762":"markdown","c12ce090":"markdown","3f09b90a":"markdown"},"source":{"c53c3ea3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport cv2 as cv\nimport matplotlib.pyplot as plt\nfrom keras.applications import vgg16\nfrom keras.models import Model,load_model\nimport keras\nfrom keras.layers import Input, Conv2D, Conv2DTranspose,AveragePooling2D, MaxPooling2D,UpSampling2D,LeakyReLU, concatenate, Dropout,BatchNormalization,Activation\nfrom keras.callbacks import EarlyStopping,ModelCheckpoint\nimport pandas as pd\nfrom keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split\nfrom numpy.random import seed\nseed(123)\nimport tensorflow as tf\ntf.set_random_seed(123)\nfrom keras import backend as K\nsession_conf = tf.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)\nsess = tf.Session(graph=tf.get_default_graph(), config=session_conf)\nK.set_session(sess)\nprint(os.listdir(\"..\/input\/\"))\nInputPath = \"..\/input\/artificial-lunar-rocky-landscape-dataset\/images\/\"\n# Any results you write to the current directory are saved as output.","cd7562da":"print(os.listdir(InputPath+'render'))","090244f1":"plt.figure(figsize=(30,30))\nplt.subplot(5,5,1)\nimg = cv.imread(InputPath+\"render\/render0001.png\")  \nimg = cv.cvtColor(img, cv.COLOR_BGR2RGB)\nplt.imshow(img)\nplt.subplot(5,5,1+1)\nimg = cv.imread(InputPath+\"ground\/ground0001.png\")  \nimg = cv.cvtColor(img, cv.COLOR_BGR2RGB)\nplt.imshow(img)\nplt.subplot(5,5,1+2)\nimg = cv.imread(InputPath+\"clean\/clean0001.png\")  \nimg = cv.cvtColor(img, cv.COLOR_BGR2RGB)\nplt.imshow(img)","f1dfc66d":"d = sorted(os.listdir(InputPath+'render'))\nprint(len(d))","902b77c0":"def ExtractData(InputPath):\n    SourceImg = sorted(os.listdir(InputPath+'render'))\n    TargetImg = sorted(os.listdir(InputPath+'ground'))\n    X_=[]\n    y_=[]\n    count=0\n    for i in range(len(SourceImg)):\n        if count<2165:\n            count=count+1\n            img_1 = cv.imread(InputPath + 'render\/'+SourceImg[i])\n            img_1 = cv.cvtColor(img_1, cv.COLOR_BGR2RGB)\n            img_1 = cv.resize(img_1,(500,500))\n            X_.append(img_1)\n            img_2 = cv.imread(InputPath + 'ground\/'+TargetImg[i])\n            img_2 = cv.cvtColor(img_2, cv.COLOR_BGR2RGB)\n            img_2 = cv.resize(img_2,(500,500))\n            y_.append(img_2)\n    X_ = np.array(X_)\n    y_ = np.array(y_)\n    \n    return X_,y_","a49edd86":"X_,y_ = ExtractData(InputPath)","ea99df9a":"y_.shape","1ae4763e":"input_shape = (500, 500, 3)\nVGG16_weight = \"..\/input\/keras-pretrained-models\/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\"\nVGG16 = vgg16.VGG16(include_top=False, weights=VGG16_weight, input_shape=input_shape)\nprint('Model loaded.')","bf0880dc":"output_ = VGG16.output\noutput_","e7147a31":"set_trainable = False\nfor layer in VGG16.layers:\n    if layer.name in ['block1_conv1']:\n        set_trainable = True\n    if layer.name in ['block1_pool','block2_pool','block3_pool','block4_pool','block5_pool']:\n        layer.trainable = False","4d66b627":"vgg_model = Model(VGG16.input, output_)\nlayers = [(layer, layer.name, layer.trainable) for layer in vgg_model.layers]\npd.DataFrame(layers, columns=['Layer Type', 'Layer Name', 'Layer Trainable'])","aba61412":"vgg_model.summary()","c70b9954":"K.clear_session()\ndef ModelEnhancer():\n    input_shape = (500, 500, 3)\n    VGG16_weight = \"..\/input\/keras-pretrained-models\/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\"\n    VGG16 = vgg16.VGG16(include_top=False, weights=VGG16_weight, input_shape=input_shape)\n    last_layer = VGG16.output\n    \n    set_trainable = False\n    for layer in VGG16.layers:\n        if layer.name in ['block1_conv1']:\n            set_trainable = True\n        if layer.name in ['block1_pool','block2_pool','block3_pool','block4_pool','block5_pool']:\n            layer.trainable = False\n            \n    model_ = Conv2DTranspose(256,(3,3),strides=(2, 2))(last_layer)\n    model_ = LeakyReLU(0.1)(model_)\n    model_ = BatchNormalization()(model_)    \n    \n    concat_1 = concatenate([model_,VGG16.get_layer(\"block5_conv3\").output])\n    \n    model_ = Conv2D(512,(3,3),strides=(1, 1),padding='same')(concat_1)\n    model_ = LeakyReLU(0.1)(model_)\n    model_ = BatchNormalization()(model_)\n    \n    model_ = Conv2DTranspose(512,(3,3),strides=(2, 2),padding='same')(model_)\n    model_ = LeakyReLU(0.1)(model_)\n    model_ = BatchNormalization()(model_) \n    \n    concat_2 = concatenate([model_,VGG16.get_layer(\"block4_conv3\").output])\n    \n    model_ = Conv2D(512,(3,3),strides=(1, 1),padding='same')(concat_2)\n    model_ = LeakyReLU(0.1)(model_)\n    model_ = BatchNormalization()(model_)\n    \n    model_ = Conv2DTranspose(512,(3,3),strides=(2, 2))(model_)\n    model_ = LeakyReLU(0.1)(model_)\n    model_ = BatchNormalization()(model_) \n    \n    concat_3 = concatenate([model_,VGG16.get_layer(\"block3_conv3\").output])\n    \n    model_ = Conv2D(256,(3,3),strides=(1, 1),padding='same')(concat_3)\n    model_ = LeakyReLU(0.1)(model_)\n    model_ = BatchNormalization()(model_)\n    \n    model_ = Conv2DTranspose(256,(3,3),strides=(2, 2),padding='same')(model_)\n    model_ = LeakyReLU(0.1)(model_)\n    model_ = BatchNormalization()(model_) \n    \n    concat_4 = concatenate([model_,VGG16.get_layer(\"block2_conv2\").output])\n    \n    model_ = Conv2D(128,(3,3),strides=(1, 1),padding='same')(concat_4)\n    model_ = LeakyReLU(0.1)(model_)\n    model_ = BatchNormalization()(model_)\n    \n    model_ = Conv2DTranspose(128,(3,3),strides=(2, 2),padding='same')(model_)\n    model_ = LeakyReLU(0.1)(model_)\n    model_ = BatchNormalization()(model_) \n    \n    concat_5 = concatenate([model_,VGG16.get_layer(\"block1_conv2\").output])\n    \n    model_ = Conv2D(64,(3,3),strides=(1, 1),padding='same')(concat_5)\n    model_ = LeakyReLU(0.1)(model_)\n    model_ = BatchNormalization()(model_)\n    \n    '''model_ = Conv2D(32,(3,3),strides=(1, 1),padding='same')(model_)\n    model_ = LeakyReLU(0.1)(model_)\n    model_ = BatchNormalization()(model_)'''\n    \n    model_ = Conv2D(3,(3,3),strides=(1, 1),padding='same')(model_)\n    model_ = LeakyReLU(0.1)(model_)\n    model_ = BatchNormalization()(model_)\n    \n    model_ = Model(VGG16.input,model_)\n    \n    return model_","79143cb4":"Model_ = ModelEnhancer()\nModel_.summary()","1363716f":"from keras.utils.vis_utils import plot_model\nplot_model(Model_,to_file='model_.png',show_shapes=True, show_layer_names=True)\nfrom IPython.display import Image\nImage(retina=True, filename='model_.png')","bb65bf33":"Model_.compile(optimizer = Adam(lr = 1e-4), loss = 'binary_crossentropy', metrics = ['accuracy'])","2363b9c5":"checkpointer = ModelCheckpoint('model_TL_UNET.h5', verbose=1,mode='auto', monitor='loss',save_best_only=True)","e0e1d5ca":"def GenerateInputs(X,y):\n    for i in range(len(X)):\n        X_input = X[i].reshape(1,500,500,3)\n        y_input = y[i].reshape(1,500,500,3)\n        yield (X_input,y_input)\nModel_.fit_generator(GenerateInputs(X_,y_),epochs=433,verbose=1,callbacks=[checkpointer],\n                     steps_per_epoch=5,shuffle=True)","01c3d13a":"TransferLearningModel = load_model('model_TL_UNET.h5')","19778ad5":"img_x = cv.imread(InputPath + \"render\/render0001.png\")\nimg_x = cv.cvtColor(img_x, cv.COLOR_BGR2RGB)\nimg_x = cv.resize(img_x,(500,500))\nimg_x = img_x.reshape(1,500,500,3)","74ed1682":"prediction = TransferLearningModel.predict(img_x)","f3d4e9d9":"pred = prediction.reshape(500,500,3)\npred_ = cv.resize(pred,(700,450))\nplt.imshow(pred_)","7bf122bc":"img = cv.imread(InputPath+\"ground\/ground0001.png\")  \nimg = cv.cvtColor(img, cv.COLOR_BGR2RGB)\nplt.imshow(img)","1c3278a3":"plt.figure(figsize=(30,30))\nplt.subplot(5,5,1)\nimage_0 = cv.imread(InputPath+\"render\/render0001.png\")  \nimage_0 = cv.cvtColor(image_0, cv.COLOR_BGR2RGB)\nplt.title(\"Actual Image\",fontsize=20)\nplt.imshow(image_0)\nimage_0 = cv.resize(image_0,(500,500))\nimage_0 = image_0.reshape(1,500,500,3)\nprediction_0 = TransferLearningModel.predict(image_0)\npred_0 = prediction_0.reshape(500,500,3)\npred_0 = cv.resize(pred_0,(710,470))\nplt.subplot(5,5,1+1)\nplt.title(\"Segmented Image\",fontsize=20)\nplt.imshow(pred_0)\nplt.subplot(5,5,1+2)\nimg_g0 = cv.imread(InputPath+\"ground\/ground0001.png\")  \nimg_g0 = cv.cvtColor(img_g0, cv.COLOR_BGR2RGB)\nplt.title(\"Ground Truth\",fontsize=20)\nplt.imshow(img_g0)","2efec1b5":"plt.figure(figsize=(30,30))\nplt.subplot(5,5,1)\nimage_1 = cv.imread(InputPath+\"render\/render2381.png\")  \nimage_1 = cv.cvtColor(image_1, cv.COLOR_BGR2RGB)\nplt.title(\"Actual Image\",fontsize=20)\nplt.imshow(image_1)\nimage_1 = cv.resize(image_1,(500,500))\nimage_1 = image_1.reshape(1,500,500,3)\nprediction_1 = TransferLearningModel.predict(image_1)\npred_1 = prediction_1.reshape(500,500,3)\npred_1 = cv.resize(pred_1,(710,470))\nplt.subplot(5,5,1+1)\nplt.title(\"Segmented Image\",fontsize=20)\nplt.imshow(pred_1)\nplt.subplot(5,5,1+2)\nimg_g = cv.imread(InputPath+\"ground\/ground2381.png\")  \nimg_g= cv.cvtColor(img_g, cv.COLOR_BGR2RGB)\nplt.title(\"Ground Truth\",fontsize=20)\nplt.imshow(img_g)","de823f5f":"plt.figure(figsize=(30,30))\nplt.subplot(5,5,1)\nimage_2 = cv.imread(InputPath+\"render\/render2172.png\")  \nimage_2 = cv.cvtColor(image_2, cv.COLOR_BGR2RGB)\nplt.title(\"Actual Image\",fontsize=20)\nplt.imshow(image_2)\nimage_2 = cv.resize(image_2,(500,500))\nimage_2 = image_2.reshape(1,500,500,3)\nprediction_2 = TransferLearningModel.predict(image_2)\npred_2 = prediction_2.reshape(500,500,3)\npred_2 = cv.resize(pred_2,(710,470))\nplt.subplot(5,5,1+1)\nplt.title(\"Segmented Image\",fontsize=20)\nplt.imshow(pred_2)\nplt.subplot(5,5,1+2)\nimg_g2 = cv.imread(InputPath+\"ground\/ground2172.png\")  \nimg_g2= cv.cvtColor(img_g2, cv.COLOR_BGR2RGB)\nplt.title(\"Ground Truth\",fontsize=20)\nplt.imshow(img_g2)","fd115e15":"plt.figure(figsize=(30,30))\nplt.subplot(5,5,1)\nimage_3 = cv.imread(InputPath+\"render\/render2770.png\")  \nimage_3 = cv.cvtColor(image_3, cv.COLOR_BGR2RGB)\nplt.title(\"Actual Image\",fontsize=20)\nplt.imshow(image_3)\nimage_3 = cv.resize(image_3,(500,500))\nimage_3 = image_3.reshape(1,500,500,3)\nprediction_3 = TransferLearningModel.predict(image_3)\npred_3 = prediction_3.reshape(500,500,3)\npred_3 = cv.resize(pred_3,(710,470))\nplt.subplot(5,5,1+1)\nplt.title(\"Segmented Image\",fontsize=20)\nplt.imshow(pred_3)\nplt.subplot(5,5,1+2)\nimg_g3 = cv.imread(InputPath+\"ground\/ground2770.png\")  \nimg_g3= cv.cvtColor(img_g3, cv.COLOR_BGR2RGB)\nplt.title(\"Ground Truth\",fontsize=20)\nplt.imshow(img_g3)","b07a2d3d":"plt.figure(figsize=(30,30))\nplt.subplot(5,5,1)\nimage_4 = cv.imread(InputPath+\"render\/render2368.png\")  \nimage_4 = cv.cvtColor(image_4, cv.COLOR_BGR2RGB)\nplt.title(\"Actual Image\",fontsize=20)\nplt.imshow(image_4)\nimage_4 = cv.resize(image_4,(500,500))\nimage_4 = image_4.reshape(1,500,500,3)\nprediction_4 = TransferLearningModel.predict(image_4)\npred_4 = prediction_4.reshape(500,500,3)\npred_4 = cv.resize(pred_4,(710,470))\nplt.subplot(5,5,1+1)\nplt.title(\"Segmented Image\",fontsize=20)\nplt.imshow(pred_4)\nplt.subplot(5,5,1+2)\nimg_g4 = cv.imread(InputPath+\"ground\/ground2368.png\")  \nimg_g4= cv.cvtColor(img_g4, cv.COLOR_BGR2RGB)\nplt.title(\"Ground Truth\",fontsize=20)\nplt.imshow(img_g4)","c8119fb7":"plt.figure(figsize=(30,30))\nplt.subplot(5,5,1)\nimage_5 = cv.imread(InputPath+\"render\/render2262.png\")  \nimage_5 = cv.cvtColor(image_5, cv.COLOR_BGR2RGB)\nplt.title(\"Actual Image\",fontsize=20)\nplt.imshow(image_5)\nimage_5 = cv.resize(image_5,(500,500))\nimage_5 = image_5.reshape(1,500,500,3)\nprediction_5 = TransferLearningModel.predict(image_5)\npred_5 = prediction_5.reshape(500,500,3)\npred_5 = cv.resize(pred_5,(710,470))\nplt.subplot(5,5,1+1)\nplt.title(\"Segmented Image\",fontsize=20)\nplt.imshow(pred_5)\nplt.subplot(5,5,1+2)\nimg_g5 = cv.imread(InputPath+\"ground\/ground2262.png\")  \nimg_g5 = cv.cvtColor(img_g5, cv.COLOR_BGR2RGB)\nplt.title(\"Ground Truth\",fontsize=20)\nplt.imshow(img_g5)","8de46ccb":"plt.figure(figsize=(30,30))\nplt.subplot(5,5,1)\nimage_6 = cv.imread(InputPath+\"render\/render2453.png\")  \nimage_6 = cv.cvtColor(image_6, cv.COLOR_BGR2RGB)\nplt.title(\"Actual Image\",fontsize=20)\nplt.imshow(image_6)\nimage_6 = cv.resize(image_6,(500,500))\nimage_6 = image_6.reshape(1,500,500,3)\nprediction_6 = TransferLearningModel.predict(image_6)\npred_6 = prediction_6.reshape(500,500,3)\npred_6 = cv.resize(pred_6,(710,470))\nplt.subplot(5,5,1+1)\nplt.title(\"Segmented Image\",fontsize=20)\nplt.imshow(pred_6)\nplt.subplot(5,5,1+2)\nimg_g6 = cv.imread(InputPath+\"ground\/ground2453.png\")  \nimg_g6 = cv.cvtColor(img_g6, cv.COLOR_BGR2RGB)\nplt.title(\"Ground Truth\",fontsize=20)\nplt.imshow(img_g6)","6550f4c2":"plt.figure(figsize=(30,30))\nplt.subplot(5,5,1)\nimage_7 = cv.imread(InputPath+\"render\/render2400.png\")  \nimage_7 = cv.cvtColor(image_7, cv.COLOR_BGR2RGB)\nplt.title(\"Actual Image\",fontsize=20)\nplt.imshow(image_7)\nimage_7 = cv.resize(image_7,(500,500))\nimage_7 = image_7.reshape(1,500,500,3)\nprediction_7 = TransferLearningModel.predict(image_7)\npred_7 = prediction_7.reshape(500,500,3)\npred_7 = cv.resize(pred_7,(710,470))\nplt.subplot(5,5,1+1)\nplt.title(\"Segmented Image\",fontsize=20)\nplt.imshow(pred_7)\nplt.subplot(5,5,1+2)\nimg_g7 = cv.imread(InputPath+\"ground\/ground2400.png\")  \nimg_g7 = cv.cvtColor(img_g7, cv.COLOR_BGR2RGB)\nplt.title(\"Ground Truth\",fontsize=20)\nplt.imshow(img_g7)","c78f2071":"plt.figure(figsize=(30,30))\nplt.subplot(5,5,1)\nimage_8 = cv.imread(InputPath+\"render\/render2502.png\")  \nimage_8 = cv.cvtColor(image_8, cv.COLOR_BGR2RGB)\nplt.title(\"Actual Image\",fontsize=20)\nplt.imshow(image_8)\nimage_8 = cv.resize(image_8,(500,500))\nimage_8 = image_8.reshape(1,500,500,3)\nprediction_8 = TransferLearningModel.predict(image_8)\npred_8 = prediction_8.reshape(500,500,3)\npred_8 = cv.resize(pred_8,(710,470))\nplt.subplot(5,5,1+1)\nplt.title(\"Segmented Image\",fontsize=20)\nplt.imshow(pred_8)\nplt.subplot(5,5,1+2)\nimg_g8 = cv.imread(InputPath+\"ground\/ground2502.png\")  \nimg_g8 = cv.cvtColor(img_g8, cv.COLOR_BGR2RGB)\nplt.title(\"Ground Truth\",fontsize=20)\nplt.imshow(img_g8)","c3b43764":"plt.figure(figsize=(30,30))\nplt.subplot(5,5,1)\nimage_9 = cv.imread(InputPath+\"render\/render2222.png\")  \nimage_9 = cv.cvtColor(image_9, cv.COLOR_BGR2RGB)\nplt.title(\"Actual Image\",fontsize=20)\nplt.imshow(image_9)\nimage_9 = cv.resize(image_9,(500,500))\nimage_9 = image_9.reshape(1,500,500,3)\nprediction_9 = TransferLearningModel.predict(image_9)\npred_9 = prediction_9.reshape(500,500,3)\npred_9 = cv.resize(pred_9,(710,470))\nplt.subplot(5,5,1+1)\nplt.title(\"Segmented Image\",fontsize=20)\nplt.imshow(pred_9)\nplt.subplot(5,5,1+2)\nimg_g9 = cv.imread(InputPath+\"ground\/ground2222.png\")  \nimg_g9 = cv.cvtColor(img_g9, cv.COLOR_BGR2RGB)\nplt.title(\"Ground Truth\",fontsize=20)\nplt.imshow(img_g9)","78c1a94c":"plt.figure(figsize=(30,30))\nplt.subplot(5,5,1)\nimage_10 = cv.imread(InputPath+\"render\/render2560.png\")  \nimage_10 = cv.cvtColor(image_10, cv.COLOR_BGR2RGB)\nplt.title(\"Actual Image\",fontsize=20)\nplt.imshow(image_10)\nimage_10 = cv.resize(image_10,(500,500))\nimage_10 = image_10.reshape(1,500,500,3)\nprediction_10 = TransferLearningModel.predict(image_10)\npred_10 = prediction_10.reshape(500,500,3)\npred_10 = cv.resize(pred_10,(710,470))\nplt.subplot(5,5,1+1)\nplt.title(\"Segmented Image\",fontsize=20)\nplt.imshow(pred_10)\nplt.subplot(5,5,1+2)\nimg_g10 = cv.imread(InputPath+\"ground\/ground2560.png\")  \nimg_g10 = cv.cvtColor(img_g10, cv.COLOR_BGR2RGB)\nplt.title(\"Ground Truth\",fontsize=20)\nplt.imshow(img_g10)","2a650172":"### Using our model for segmentation of rocks and boulders in some of the unknown test cases of Lunar Surface images.","8e850a17":"## Conclusion\n* The model is generating preety good results but all the time, as you could there some test cases where the results are not satisfying.\n* At the same time there are also cases where I found that a better segmentation is performed the model than the ground truth result.\n* The model could differentiate between rocks, boulders and the lunar surface, but certainly cannot differentiate between Rocks and boulders.\n* It works preety bad when there are too much shadow effects in a frame caused by the rough terrains, rocks and boulders.\n* **It simply implies that a lot of improvements are yet to be done in the model, I am looking forward to its improvement from both my side and from your side. If I find some way I would definitely post that in the form of a kernel and if you find some way improve the model please mention those improvements in comment section below, fork my kernel and try to improvement it further.**","d7a42da2":"### The structue of our model","3bbc9f40":"![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTExMWFhUXFxgbGRgYGBsYGhoYGBcYGhcaFxcYHSggGBslHRcXITEhJSktLi4uGB8zODMtNygtLisBCgoKDg0OGhAQGy0lICUtLS0tLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKgBKwMBIgACEQEDEQH\/xAAcAAACAgMBAQAAAAAAAAAAAAAFBgQHAAIDCAH\/xABQEAACAQMCAwUFAwgGBgcJAQABAgMABBEFEgYhMQcTQVFxFCIyYYGRobEIIzVCgrPB0VJyc5Ky8BUWM2J04SQ2Q1Oi0vElJjRVdZOUo7QX\/8QAGQEAAwEBAQAAAAAAAAAAAAAAAAECAwQF\/8QAJREAAgICAgEFAQEBAQAAAAAAAAECEQMhEjEiBBNBUWEygXEU\/9oADAMBAAIRAxEAPwCpLnUJW\/WI9KgvM5PN2P1NT75gDkdPCpGiyxLzfGfM0FNbojQvsGeufPxqFcsScmmWXVYMHGPsoZHfx+I5eWKLE0kQ7AlGEniOdStc117gKpPur95+dRb65DclqLCm5gOmTSokyGIscCmnS9ZW0QgDJP3+tA7hBFgrnn50Y7O9GW\/1K3gl5xsxZx0ysas5X0O3H1ph2DpYLu9dpVgml5\/9nG7qvy90HFDLiB42KOrIw6qwKkeoPMV624u4gi0q2iZYAUMscKRphFUNnpgYACqeQHkOXWoHa1w5Dd6dcO6DvYInkjfHvqUG8qD12sFwR05g9QCAZ5VRSSAASScADmST0AHianXeh3US75LadE\/pPE6r\/eIxV8\/k\/wDDkKWftpQGaZ3AYjmkaHbtXyyQxJHXl5U9aJxCt1cXtt3ePZXRCSchw6ZzjHLmGGOfh54oA8fIpJwAST0A5n7K3lgdfiRl9QR+NXJfcPRWXFNokChI5cShAMKpYSqwUeC5QnHhnHSn7to0T2nSpsDLwYmX9jO\/\/wABf7qAPMaxSBc92+OudpxjzzjpUZFJIABJJwAOZJPQAeNeruIP0DL\/APTz+4pZ7AOG4Y7IXpUNPMzgORkoiMU2r5ZKkkjrkeVAqKGutDuo13yW06J\/SaJ1X7SMVARSSAAST0A5n7K9e6DxQt1d3toIyvsjRqWJyH7xWJ93Hu4KkY55+6qw1\/h+O04lse4QJHOyybVAAEg7xW2jwGApx0yxoGUtJauoyyMB5lSB9prtLpkqMUZGDAA7cEnB6Z25xXprtu\/Q116w\/v46g8CIo1e\/CjA9ntvHPg1K90FaPNhtZAQNj5PQbTk464GOdZLbOoyyMo8ypA++vUfEv6c0r+zvf3S0J\/KG\/Ra\/8RH\/AIZKYHnax0+aYlYYpJSOojRnI+ig1l9p80JAmikiJ6CRGQnHXAYCvW1paw6Xpzd1GNlvA0jBcAuUjLMSfFmx1PnX23WHVdORpoR3dzCrFD720sufdbA95SeTAA8s8qAPIcUDt8Ks2PIE\/hWssTKcMpU+RBH41ff5OEZWG9U9RMgP0VhUTtL0VL3iSxtpM7Ht03AHGVR7h2GRzGQpGfnQBTNhpFxMCYYJZQOpjjZwD8yoNR54HjYo6sjjqrAqw8eYPMV684j1ePTbaMpCNnexQrGmECiRguRgYAAycY548OtBu2DhuG606eR1He28bSxvj3hsG5lz4qwBGOmcHqBQB5lijeRc4fHhtQnP1FcdrucAM2PIE49cV6a7C\/0PB\/Wm\/evUTgrRPZdd1NQMJLHHMnpI7FvoH3j6U7FSPNjxspwykHrggg\/fUiW7JXGPrV68WWcU3EHdy4960j2g+JDtnH0pN7UeExZYkjX8xJywByVz\/A1SWrM5PdUVoJDXyNsEGta6RRFjgVBekSLy6VgABUOtpIypwa+KM02wSSWj5WVItLcM2D0osOGZTzVHwenumhJvoiWWMXTZAaMuc55eFfGgOK2BZDiulqjSOBjK55\/TwpPSNuxk4P4Ba7xJIxSLPL+k3p5D51N4z4Tt4Nqxtg5xjkT61tecRXUUQit42DY+LHwj8M0lzyzFiZHct4kk5zUrYU0zu2heTnH0qDLYsucc8eP8q+m\/cfrGtEvmxg86olkZmJ6nNPnYZ+mYP6s37p6QqeuxKULrNtnxEoHqYXxQBbH5QUuzT4GxnbeRHHpHKaVNY7dVnt5ofYSvexume+BxvUrnHd88Zp17cbN5bKAIhfF5ASAM8iJF5geGWA+tG+NNLtY9PvHFvCCttMQRGgORG2MHHI5xQMGdh36GtvWb9\/JWvZ\/+kta\/t4f3bV87C5AdHgA\/VaYH171z+BFduBLZ11HWGZSA08O0kYB\/Nk8j48mH20ALXGn\/AFp0z+xX\/Fc1bU0aupRgCGBBB8QRgj76qPjJweKtOHlCufXdcH8CKeuKdY9mutPycLNM8Lftxkp\/+xUoA14yte60a6iByEspFz57YSM\/dQzsP\/Qtt6zfv5KN9oX6Lvv+Gm\/dtQHsMkB0a3A\/VaYH1752\/BhQAgHjv\/Rer6p+Y77vpU\/7UR7e7Df0gc53\/dWicZf6T1rTZO5EXduVwJVlznJz7oGOlOvBWjhtW1lpoFZTLDsMiBhzVydpYeRXp8qFcZxQx8RaVHFGiEDcwRQvxM4GcDn8BoAZu279DXPrD+\/jod2fXYl1a+YDGLe2BHzG4GjvatpU11pc8ECGSVjHtUEAnbKjHmxA6Amk\/sjjmj1O9juYjDKYITsZlY7QxAYlTg8iKmtj+Bl4l\/Tmlf2d7+6WhX5Qo\/8AZa\/8TH\/hkozxHAx1rS2CkqI7zJAOB+bXGT4daB\/lEyAaWg87mMD\/AO3Kf4VQg32c8dW+pW6xsyi5VAJYW6tgYZkB+JD18cZwfmpdofZO2xp9NkkQqCTbb22kdT3PP3T19zp5Y6Evfdmumx2Ulza2zLcLbvJE6TT7hIIiyMuJOu7FNfZ\/qE0+nW01wD3rR+9kYJwSAxHhuADfWgCu\/wAms\/mLz+1j\/wAJqdxCP\/eyw\/4Vv8N3XbsURVm1ZV+EXrAegaTH3VG4lfHFmn5OP+jEfaLsD78UAMPbB\/8ABw\/8ZbfvKNcf\/oy+\/wCFn\/dNQntagZ7OIKpYi7tjgDP\/AGgHh60V7QnA0u+JOP8Aosw+pjYD7zQAA7C\/0PB\/Wm\/evTp7CvficfF3ZjPzXcGXn8ju\/vUl9hf6Hg\/rTfvXox2c6v7TZKSctE8kLfIxOVXPzKbD9aAKh7Z2lXW43gDGRIImG3ryZ\/uqybKSHVtPKyL8alXU9UcfgQaUO0PUFh1mRnBI9jjGQM4\/ONS7wpxo8d+wUN3EpCkeR6bsV0Rh4Wc2ST50V9r+kPa3EkD9UbGfMeB+tRIHKnIq9u1vgxbiA3cSnvUHPH66+I+ZFUlZzKmc+PjWTVMtTtEOeTcc18C8s1tcsCxI6ZrmKhmi6OttNtdW8iDj0PSrQi42tsDmw5dMGqqrcSGtMeVw6MsuGOSrJV9Kd1GuF7GWR1wvL+H8K76Zw73zF25jJx88VMm1X2VsKB0wflWN2dS8dsJajqAtztKdfrSlqmpq7FsYzWanq7TPuxny8h60PaAZ3Mf5VSVA5kSQZ5gcq6RwDGTUi8ulIwo51ALGggx8ZqTp188EiSxsUkRgyMOqspyOXiPMVErKBF56T2+rsAubRu8A5tE42sfMK\/NfTJpU7Q+1mbUIjbxR9xASN\/vbnkwcgE4AVc88Drjr4VW9fWUjkQR60AOnZz2izaWWQIJYHO5oydpDYA3I2Dg4AByDnA6VYd72\/RbD3VnIXxy3uoUH57QSfuqh6ygBns+NJhqaanOO+kV9xQHYMbSqqpwdqgEY5Hp9aOcf9qb6ikCrb+ztDKJVcS957wHLkUXGDz+lV5WUAW\/rvba11az23sG3vYnjLd\/nbvUrnb3QzjPTNLPZz2iz6Xvj7sTQMdzRk7SrYwWRsHGQBkEc8DpSVFLiiei6f36z+8AUj3BduS2GGdpzyI6\/PpQ2krHFSk6Rd0XbT3w222nyPJ4b5EVB8ywzyoHNpV77TDqbhbq8WYO0auIkWIIQscRfkACc5PX5nJKZ2dtiXafHkat61cg7fAdK5cuaUZUjtwYIyjbJA421b\/5IP\/zYf\/LStJb6rLqEmqJFHZyqiIIZJRKkq4w6s0fQHAI+YHrT3HLlf1fqrH+NciGB5AZPQqnP6FjtX1o9+Q16aN7Bx7TLmMYn0mdXxz2SI6f3uWKrTj3XbrUm3XCCGGMExQK27meReRx8TY6eXl1zYGt2x2FjhR4lm3E\/tHA+iiq\/1B0IOGB5eFJZpN0V\/wCbGt2TeCu2SWzgS3uYe+SMbY3VgrhV5KrAjDYHIHlyA60Q4h7eWaMpZ2xjcgjvJWB2\/NUXkT5ZOOnI1Ver2wTA8yx+nLFC48Z511J2cElxdD52c9pTaWkym378zOHLGXYQQCDn3G3ZznND+OOOpL+9ivY4zbyRIirh95DI7uGztHi3THhRbh\/s1e6s\/ag2NwOweBAzzP2VXsiYJB8CR9lW4tKyFKy79H7fQIwLq0YyAc2iYbW+e1vh9Mml\/jbtPl1NPZ0i7i2LAuC255MEEKSAAq5wcDyHPwqrqk20+00o9g7otzgTju5sLJbddPEyoznvPaFTIZy3wlCR1xUPsv4svbaW4ghsfaTcSGUJ3yx7Dz3+8ykHI2jw+GlWy1zCbauDsi0gbfagowy43eJOef0rreHHwcrdmHuyuqAHFstwGu76\/tFtu8t44Io++SYs4ctuBToAPOq00jVEizuHXoRVkdu94DPDHu+FCdvkScZ+oFVVHpM8itLHEzRqfeYDl\/zppOGNVsUkpt2XX2bcU+2RvA+cpyBPipqse0bhVbOc7GJVySAfDOTyx4VC4U1s29yjBiAThvSrJ4n05bzu5Wy2PEeWKzS59mbl7bKXW1Y9ATX27snj+NSKujRNPtchQFJB5r4gef8AnyqP2q6KgtQ6L70Z8PFDyP2cj9K5Z+MqN45HJJorK30Jnh7xefLNfF0B\/KnXs7u0NuY26q+PoeYpsksUBIyOXpXPLK4yaNWnVnE6T3FscDJwSSOvoP5VUWuJPkmWJ4wTn3gRn6092vE86sQy71U+fPA8gaK3vGVrMgWSMr5715fb0rS2macNlSQ3OBgDJ+VdzpczLvbkPLxpp1cWfWELk\/0P+VQbuC4ZDtwF+fX6ValaK4Jdgix0tWYAnHLJP8qi6tbiN8A5BGf\/AFr6LdlbJYgiusoTO5jk\/OqtEU7\/AAFV92GpVxKvhXITYoE0kFdD0olg7HCjw6n1povdLtCoZsEgfET\/AApIGqSAYBxUSRy3Mkn1ot1QqV2SdSCBvcxj5VErKygD6BXSK3ZgSByFb2FlJNIscSNI7dFUZJ+lSJllt2aKWMo6nmrDBH0pqgd1oHkUw8FXSx3ClmA3HYSem1uWcHrzwfpS+zZOTXypatUVGTi018FuaVw81vdNuGQRuQjp8x8jzphudc2NsjjLuB4dPtoXwjry3NnFlh30R2uv6xH9LHzGD65pnueHo7hd3vAkdUOCfWuCV8vI9ZNcbj0CE40u42AaCHH9p72P4Gma21dZAHzt5cwf50u\/6lxnKpa4Y8i7MxPr5j7aYdN4ahiVkwSWU9STjlzxmm6+CFrsrvi3VPaZSPflVTgIpwo8s+dBTpn5wgw7NvkcinXR9IVujbTzHgDyNTb\/AEVIUJzknqTT50tFLDctlL8VPmUKP1V\/Ek0J7o+FE+IAPaZCPEj8BUjh+17yeFP6UiD7WFdsFpHlZpebPR+j2vsukIvQx2+frsJrykxyc+fOvXXGR26dP4fmWH\/hxXkuSDBAPTlmtJdGMXtnCsFF9XtYlQFMA58PEUIqWqZcZclYW0u0DjJJ64AHn869Jdn03c6XDlSCqHl4kgk\/fVBdmdusmowJIfc3EkeB2gkD7avXtB4jitIFjXG+QFUA8OXX0rWLtUznycouyor931O7xkGWWQKP90c+X9UCrpGiQadpbIcMIYmZmPLc2CST6mkPsg4VLXXtgOIowwA83IwfsBox253ErRwW0bYWQszjzC4wD8smqbblSIhUYcpFJ6Na982fEnJx4elX9wnp6zWYjb+jjNU1w5osqTqWUhcj3scsfyq89FsyvOM4B+JfA\/MeRqJ2ilOMmVVb2jWGo7HOUJwT5qeh9RVk67DHc2xAI5qV+6hnHOibj3jAk+B\/gaTrPUJYGI97YeR8s+FE4e4rQY5KLoX+HbN4ZZV6YOPqDTx7bnmck+PrSlc71lL7TiTABx1Py+dOencKXZjUlcEjOPU8vGssmC3bNVkvSKntdWeLIPvZ55PWiVjq0T4WXkCeflVjQ9kdt1klcnHmBmuUfA1hFuUkH1Iz99RyT0jeLYPl03TzGpQIGxnK\/wDLlQbU4rgDbBGXHhyNMfd2Vuoxjkeg6+vKo912hwRAAIz+HIfzrOKaZvycY9FeyaXdMW3xMCOucD+NDm0qXrt++m3U+PO8Puw4HzIzS9PrrnwFa2zGVAuS3ZetRzUmW4ZutRzVEHysrKygD6V8a+V0aXliudADv2OaosGpxlukiPGD5FsEf4cfWn3tT0OG53TtuHcIWZkALMo57eZx9T051TGihjcQhThjLGAfIlwBV8GKVYXEiM53gEBSd2Qf\/DWGR1JHZhSeKRTPDT2XtkTXSOLVSS\/V2YBTtU7cdW29KL6trmmtCgt7IJMZ5GfcAwWEkiNFJb3jjaenI5HlTMnD1\/J3hj09QpB27gi4O4c8H4uQP20O4a4iaG+jS9WIRK5WUNCpKgKfALke9t6eFa8rOVxa7M7Pb6AXaiaELuGIu5gVpO8PmfAbc9Ksew1hEY82CEnaR0I8MjwPypW1jjaxjvg1raxSRARsJFUxOJATnby9PXNF9OvxeyPsVYQcuUbAKYGSfmDjP1rLKr2jo9PkStMYtS4ldUYxDI5AEjBy3IcvEVzh1yJGVZpAr7fe3HqfEgn8KhJbc1USqAwyHX3h7vLGD4+9XG707dnvZY2HhmLJ+96xl2jrxU06FXVNRTvW7s8g5IYfwNcL\/Vp3jwcFem4Hl4+Y+VfdTs03BUkL8+eAFUfQeFB+J9ZYLtUcl5ADpk+P2D8anjbSRpOfDbYnaw2Zn5554+wYoxwIM31sPOVPxpYLnx607dkEIfU4c\/q5YeoHKvQiujw8jttl3drN33WmTHzAX+9y\/jXmC6m3V6A\/KBu9tgqD9eVc+gyf4V53py+BQW2zKysrKk0G7s60WSa4SUZCI3NhR\/tbKExYbc+SMZzy+X1qLwRxUltalCuSCx5eJoLwxqIl1SCW4O5e+zg8wOu36ZxWvJKNHM4uU7fSL\/7K7R7bS4VkQowDMQevMk86R4+K4ru5fviN2SqoegAPhTd2hcdxWlqe796RwVUDwJHU1570tt0uW5knP1JoWiZrkvxHoyHTomjwoB5dD4ehrfS9LljHuNyHQH8M0o6VrSxxKN27AHj7wPrTjoHEMbJzOT86i2xe2k0wi1wroUcc+hBofbaNAyMjKD1BB8jX26ud53BcfOgOrai0fNWx\/wA6pRbXiTOajNcwnpPDa95k4KoRtzz6dD60xS3oUkbl5Urw3Y7h23kZB8eeaTpYJWJIdjnxJqG5HbjxQgqQo3HFF4fjnbny5HHKgFzqUuc73J\/rGrtg7G7Z4x3k8xfHNlKgZ+QIpY4k7FbhButZu+A\/UcBW+hHI1lGaq6NvH4K9tIJLhtoLchk8\/wCdfLrRSGxuP16j1qVaW8lmzCVWDA8weRUisl1wFmck8\/HHLHlVcl8DjjbfkwTcaWUGd2f5VBZDUzUtR3nkeVQO8NMiSSdGbDWhWtxIaOaDaQyRsZBls464wPOqSshtJC9WV0nUBmCnIBIB8xnlXOkBlZWVJh5dB9cfhQA8djuixyXLXMwytvtZFPRpGztJ+S7c+uKuz\/WSMKSzCql7GIpJLmQkExLGO8J6AlvcB8ycN9hq0dZ02zcYfGM\/qnH24rkzN8j0PTxg4LRBm4\/RfhVnPQbVJ51UvEWn3V9eSTpbupkIwMY6ADJJ8eVXCgtIwAAuB9elbtrMPJYwN3h4D7aUZtFzxKWhH4c7NJ8DvhsV8CTozBeuR4Us8S3zRajNnAKuUyuduwALy+nPHzq5brXNiA94gDA7vl5cz1BGDmqi7Rdft50iiiClkclmHjkYOT45OD9K1hK3RzTxKMeVk2DXpAI58HuTlUbHIEH3lJ6bvkcHpTdZ8QW8iBn2sPn+BqseEteaJZbQ4MVyUGD0WUMNjjPnjaf2fKlOG6kTGxyOnLP8KUsFu0KHqWlTLZ4l1uHaFhCjJ6KMf5PhSjxUsa2ahZEaYzhpArhtvuuAoweYXpnzJpVvLh2A3NkMM\/eQR9xqIwq4Y1EnLmczGOedWH2HkDUNxHRDz8jVex9adezfWobSZ2lJUMoAbGQpz+tjmB863h2cmS+LobfygdYV+4gU8wS5+zA\/Gqbpk4\/1MXF47qdygAKRzBHXI+VLdE+wxfzs+qM1sseSBWgNd7KQBwT51JbDMFsqR8+poz2baIk8zSufdQ8h8\/Ol\/W70OFAP\/pU3hmZ0U7W2gmqvZlJOv+jB2iyd7IETmEJyf4VG0B4IgNy5bxNGkmg2BSQT41raxW+fCplKzXHj4oMQapbbeSZPpX1NeKco4Tz6cqjR6lbR+ANcbniiP9Van\/DUMRJfzeOxaN2dgFBE7hs0ox8U3EwCRLzromjXMhzJKR8hT2iHGLd1Y56zpjd0rLjaCOQ8RURrlRyKYNEtCtMwmN5CWT4cn5cjXL\/V9399mGT1waey1XyVSvaTqQORPtA5bdox9c05cLdq87HZcxq48Hj90g\/NSef0pY4l4ewrdyoI\/wAmkrSL54ZD5g4INZuK+BV9j9xdxVHLOxljKDAHMfEPPIoMsNrJH7uATnmKgXWoNO6qUPPpkV0fhjcCykoR1xy+6lGLWjdTaRA1jhgxpvVwfHHkPWloqfKrA03QpZMCWbdEPoSB4cqM32kwd2yBQFx1p212LHh9xNt0VJXYW0mN2xseeDj7a2vYAjso5gGn24vAdNAG0cuv0qrMVjbb\/CvbfG5d3w5GfSiurGIgbNufl5fOg9ZVp6ozat2dEUZOSAB\/nwqVCN36xwPliocSZOKl7scqBss\/h1jBY2SLlWu5rmVj590BFGPTBzinLR9StjGRPhXHmOvpS\/DGJdAtJ4+b2cvvY6hCxV8\/L3lb9moayGQFgMhvlXDntTs9T01SxUNN9bocNGuQfmBQbUL+CPCyOEdm2KnxMdwOCAPDOAT4VAW\/mB7rOMKzY6YRRlmJ8B86r661Xv7yOXGBvQDPXG8daeGDbtk+oyqMaT2MXHV4TFaYYjfE3eDw3IVVfpg0kSNTNxzL7tqPJZf8S0qbq60kebJt9nYNyo1wXwg+oSlQ+1FxuI5tzyRhc+ODz6cqAKaPcFcSvYXaTrkp8Mij9aMn3h6jqPmPnTEWp\/8A5RaqipsZ8jaXYkMueYYY5Z3fLx8qqzjrhM2DqOZVidp6ggfgedeqbSdJY1kjIZHUMpHQqwyD9lUn+UNBta05\/F3px5Y2DP30hlM113nrXIit08qYHWGYjnWkoycjA+X8q1Fak0xHytkHOvhNSLNgDk0gfRtOByo\/aWq7AN2KE2EAllx4V21od2wCnw5\/Kq\/SVJcqDKab\/vVNstLZs7eeKTU1CQfrUc0eK6BEnPb4+npUNs176QWewI5EVNj0R9hfbyFMeg90RuYnGOfn9gpl0O4Rei5Qkjn4fP51nybey41vQgaJcLC28\/Zjr6U7aBqAuZFABwc+HlUfVNJjWQmPBzk48B6fKiHAcHv5OM+906eHSrk46ocVcJP8OWuxSwzsw\/2YUE\/fmpNrrFuyA94Ry6ZqfxRE7SsoxtKAc\/rQWLgFWAJk61OX4cSvSxTj56+hdNoyDnIdh60la9w9iQuj5DHNWLLPHJuZea46elANTljaLAHvCpSp9jtNdAqG\/EMYGAW8\/wAc1GF3K6t72A3XFB9QVuWW6npUqNm2gDpWqVGTk26CGgwyFsb\/AHc880cudQRFdCN9AJnZIxt8etamzmfHdxu2fFVJ+8VlKWzrhHw2ZcaTFcRkINr8z\/nHWuWqWBWwCt8SHB+lSIUli5ywyLjxKsB9tfOJL1mswy4wetX3Rz6jYC4S4TuNQd47ZFZkXc25goAJwOZ8f5UZueEbmyure2mgQyXBAjAkBDEsF5tj3eZFWN2Jaelut3KMYWCDJ\/3tssj5+jJ9lTuPE7640C765uIgT4fne6cf4DVdmTVMri84Auze+yR2yRzGDvsd6ChTfsJDY65OMVA0Xs21C7ErQpGRFM8L5kAxJHjdjzHMc69My6arXUdzy3xxSRH0kaJ+foYx\/epB4OYjTtaIJBF3qBBBwQQgwQR0NMQv9nmm3Wm3BsdQi2298CiEMHQyBcFSy\/CWXPI4ziu2jaDfhJFt7dJI0mmiSRplQnuZWjJK7Tjmh8al9r9066LYTBj3iy2rhjzO8QuQ2T1Oai9j3FLXupTYV4kMEsjRCaR4jK88bNIsbnajEs55D9Y\/OolCMuzTHllD+WcuJtDvZI1sILNIp7hWeSVrhXMkcRTeuQo2jdInLyzSNadm2oZmcRx4tZCsn50fEiJKccufustWFwZqEsnE14kksjpGlwI1Z2ZUBkhyEBOFHIch5CrBm05IoNQZX3mYyyMOXuN7OibeXyQHn\/SqkktIhvk7ZRo4MvtTijltok7tC6bnkCkn3S3ukcsHI+2h2ndlmpTmXYkf5qVonzIB76hSceYww51cXZpMbbR7HeQGnl5nzM07sPqVxUTTpJY+Jp4e8cRSwmbu97bCTHAm4pnbuyj88Z50xUVg3ZHqiusZji3MGI\/Ojou3Ph\/vCuOgdluo3aNIiRogZlDSPjcUYq20KCSAQRk4o3xzxveWOu3DxyGRI8KsUjO0Sh4Yy21AwCnPPlTn2d61BqWmxWguBHeQsjkHmS8UwlSTZkd6hIXcAR1IyORoESuyia4tlk0u8XZNAA8fvBg0DscFSOoDAj5ZApf7ROH77WZVe1gUQ27TwhnlUF2SXY7Bce6u6Plz5jyoJxbxHqFlrME18I8xKFDQghJbd2O44JJyMnl4FR8ibR4Nvu6sNPJ5G6lZvrcCe4\/z6UAefdF4EvLq4uLaJE723YiQM4ABDFTg+PNTXHQuC7u6uprSFUM0G\/eC4A9xwjYbx941e3CFn3fEGrDGAyQOPnvUEn+9u+ylXsk\/6wap63P\/APUtAyndY06S2mkglAEkbFWAORkeR8adIOxvVHVWCRYYAj86OhGRQXtM\/St7\/bvVy9iepTS6TcvLNJIySyqrO7MyqIIiApY5ABJIA86BFWwdk+pO80YSLdCVD\/nB1ZA4x58iKgXHAF7HaR3jKncyiIqd4z+dICZXw+IVbn5P95LPa3bzSvI7TAF5GLsQIlAyzEk4FEeP7BYNEggR96RvZor8veCyIAeXLnigZWS9l2pW0ckrxRlUVnJEy8lUEnAxzOBSHckyP6869JdsenSSWheO+a2EUc7tGGZfaAEB7s7XXPQjmD8XTz8zxTe+p8OX2U7Icd2hl4X4bDuHmOIxz9fWmODUkWcxR84zypk0G3s5LfDHqvP1oNHpsMEqsvvKp+6uSc77PUx4aSS\/0MWUCxK2Rgt0J\/gPCh2tX7wwgrnJNNWq69aG3yU5geVV9qOorMnunIqVdp\/BKxqNr7BLcTTbuuc1cfZuWkiWUYxg1VGiaMkzHedvgBVz6PCEtY4oeT48PXnWkpRMvblGDbAPFupN3xXpz6elFLDUT3a+nnQ\/WeEbyVi4QE+GWA\/jU620O5VQpiOQPAj+dPGmtseSapRXwVEdTeKXAzhuWKkWETGT3gdpPXwoLxHORPGV8RTyz77RAqcwBlv+fjWklsxjdMCa5axxggLlj0NCbS3cIcnnT\/Y6Z7Qqgrgjx\/GmOPgi3YqTnGPe59aaewarZUsUoaLaDkjrVqdk13ut3QgZjbHryzSvxBw5HBMVtve3dRyOPrUa0ae2GYyU3nBxWLdSOn+obH3tM1DurCV9qnliqQ0u53wFGXKmn\/X71pYFtJTnd1J6nxpKit4lJCv7ngQCQfIggdK2g20cuRJOkP8A2ZcT2dlY3XfTxCYyOwic4ZgkKKgx4g7T9tEdb4zsLm202Q3EMcsdzZzPEG\/2fMLKuPAIHP0WqXsG3TOM5XGcjJH3UIushjuBB59QRy+tUZv7PSdh2i2Iv7lGu4u5aOF0fd7pcb1kXPngR8vlQLgniSw9l1KCa8ii9ovLwqSwyY5VUK6g9R1I9Koo2kn\/AHb\/AN1v5Vrb2UsuTHG7467VZseuByoEW92y8U2Mun21la3CzMjxkleYCRxumS3TcSRy9aAdhOtW9rezPcTJEhtyoZzgFu8jOB88A\/ZVdJCzHaFYkdQASRjzFbtaSDAMbgnp7p5+nLnQMtrg7iK1j4ivbmS4jWBxNskLe626SMjB8cgH7KbrDjLTwmqg3cIMs8rR+98YNrCoK+fvKR9K87pbSEkBGyOo2nI8sjHKuiW0hAIjcg9CFOPwoEehLXj6wtLDT4UmgmZTaxSDd\/sxtAklxzwVwT9a5XfFGnf6dhuxeQmP2KSJm3DaGWTcoJ8yHP8AdqgPZ5M7dj5xnG05x54x0r57M+cbHzjONpzjzxjpQFjJ2oX0U+qXUsLrJGzJtdTkHEUYOD6gj6VZPAeu6dPplvbyXUNpcwPGWZ9qMRFOJBtdiudyjbyPLJyD40m9rIBko4A8SpA\/Cuc8DL8SsufMEfjQBZHbnxPbXlzCts4kWGNg0i\/CWdgcKf1sBeo5e9Vkf6\/6fa2+nwRzwTbWghfL57qNYipl9RgD9o15yeylVA7RuEPRirBT6MRg1o0Lbd+1tv8ASwcdcdenWgD0lb8X6auqzXHtsGyS0iTdvHxpLJkeu1loLw\/faTZavLcxX6MlzFO8jO6lVkaeNgi4UYyC\/I5+GqIeNlA3Ky8+WQRn0z1rrdWUqIrNFIqknDMjKDnpgkYNAxz7YLewNytxZXXfvcPK0wDKyoRs2bcAEA5bqT8NNvY5xLZ22l3MU9xHHI00pVWbBIMEQBA8sgj6VSsUbMcKCT5AZP2Ct54WXG5WX1BH40CLj7DOJbS1tLlLi4jiZpcqHbBI7sDI+tSdY4ns20G0t1uYzMgs90Yb3l7tkL5HhjBz6VStnaySNiNHcjnhFLH7AKnwTMGIIO7JGMHdnxG3GaAL07R7zRtSiXvNRQNCJGQRyJ7zMowDuU55qOmOtUDbWbSckUs2M4FfJ4HZiFRiR1AU5HlkY5UX4V1BodxMTsrgYKqT0z4041eyJt1omcI6g0bPGxPofCjUVySfePjSpJemS837SuWxjGDyHj86Z5oMc\/CsMsFejswZ5KKsl8QXAW3b5ilDh+4wxBP0onrtzui2CgEMBTD5ojHxoJ5W8il9DpBAxIccsdBVm8H6jliSfeRehqobHiJlxy6Uydmt89xdzZPuhBlfryrD25LbL9V6iHtePbPQEbZAPyrR5DmgXD+viRXUj3ouR+nSqZ4k7VLv2qYQlRGHIXl4Ly\/EGulStaOaKXbAumWSXBWUtnavSmju5FhTa2Nx6EeFAbPTwhaSIgKxzii0epTYyFBRRiiUtm0V4hzTdUkjYKoyeWaO2XEDBzuztxz8gaSIbsp72ebfxo3OSYQB48yfWplOloqEObo62d3HNelB7qnJz86E6vemK7EQIKhuWfnQ64vYgwMb4KjzqBd722zHJweRrKkbcnvdIPavIsl2gY4GKsXhm7mj0fTmgTexWzRhtLYjd41lbC9NqFjnoMZPKqViuWluF3g\/8qtSbVJrbhy0lgkMb93aLuAViA7xq2A4I6E9RXRBUjjn2HNKtI49auyihd9pbu+BjL97MuTjxwq\/ZQLtT\/OaJcteoiSrK3c8hn3bkrCVySctFjOPBm6eELskuml1C9keV5XaGHc7kE53yADCgBRgDkABXfi0+0aBetN+cZJ7nYzcyvd3rqmD1GFAX05dKszaoZeMdTvYLGN7K3WdyAHVuW2PumJb4hzBA+2hvBkjx6LZPYIrkCJpUXbucBv+khckDvc7sZI5jFTuNbHUJrKFNOkWOQ7d5YgAxmNgR7ynxK0s9m2gmCxtLqwkkdpnh9piaRTFtL7LhghA2uoBwQc+6Bz6UAc+C9chvOIZ5YYJID7EVlSVAj96syZLKCee3YOfPlUvV9UvH12xhnt1jt0nnMEo6yAW7g5G49M+QouI4xxHlcbzpp7zHmLhQhPzxy9AKDalp2oDXbSa4kVrT2iZbdQRuXdbSE5AUH9TxJoAdrfR9moy3QHKa3jVv68TtzPqrqP2aTew\/iqS6imtXRFW0WJEZc7mDGQZbJx+oOnzp20bV+9uLyA43W8sageOySCKRSf2jIP2aqr8nH\/a6j6w\/wCKegBk7POIJL6\/v7iVET2dFt125wVWWZiTknnyFbcd8RyWl3p11CiOLpTA2\/PJZJIXUjBHPG6o3ZNbIttqksmVR7u4DMOuxF5kem5q37Q7aOWw0uWAlokubNkYjmYnG1ScgYJynhQBr26cUSW0MVsiIyXayo5OdyhTFgrg4\/XPX5UU4\/sY5tR0eOVQyGa4YqeYJSEOuR4jKjlSb+Uh8enes\/429OvHFysep6OzsFHfXC5PIZeHYo+rMB9aAC8Nz7Rd3tnMqPAkNvhSvXvhPvDeY9xaVuz7RFuNAe0PR\/aowT4HvpAp+hAP0pqsbN4r++uZAFheG12uSMfmhP3mefIAOvM+dJ\/BGuC30JLoHC+1cyf+7lvwjn+65oAm8TQx+1aEtwF2h5AQ\/TvBbjuxz8e824+eK78d8RNaJci8tpJrOVQsbxIjKgaPa6z7nBBL8wcYwRzzyqL2q6ZDc3WlQXDFYpJplJVtp3d0NmGPQl9o+tMOkWMsYura5Jks1VBFJMyuzxtF+eWRvEKc82GcHqaAKJ7BP0tH\/ZS\/4avxHF3Jf2s6I8UbIgBXqskCO27J5ncxwRjwqg+wX9Lp\/ZS\/4a9AabaNDcX00mFjkeNlOR8KW8asT5YKt18qAEns9As+H454VUSuQzMQDuLXATn54XkPSiHFdgi67pEyqA7+1K5A5sEgJXPnje321B4GU3PDsMcPvupClQQCClyGIOTy93n6EUR4vuVOuaPGCN6+1sR4hWgwpI+ZVvsNADBbaP3d\/dXKjAuIIQ3zkiMqkn9hox+zSt2YXE0fDsL28YkmVZzGh6M3tEuAeY\/Gm7SdW717yI\/FbzbP2XijkU\/a7D9mk7s1inbhuJbVgs5ScRscYD+0S4JyCPuoApi8upZdUnkuYxHKZG7yMdFYYBA5ny86l6jqG4kDpQ\/VNPuU1GaK6YNcbsyMpGCzANnkAOjDwrW7tSp6+NZzNIRbVo+yDI50KlUryJyM0TlhbFCpFIbBoiKdo7Fhinns+tt8sjQe7iPDfPy\/jSRHEW5KpY+QBJ+wU76PNc6fAZTbOu8YyRjPz+VKatFYowk6n0MXDV5cRJcldpJJ6+dVReabKZHJHMsSfUnJp34L1eWZ3GPiJJ9TnwoRqmi3vev+YnPvdRG5HywQKS8Wae3Bx0E4oCN0Y6jNS9JLCPuyRjOPvr7WVm2aqK5V+kpLFWYqRz5Yo8bQBSm73tvL7K+1lTPpG+OCi3RT1xbOJmDHxNP9thrVI8dcc6ysq5Po5cMbbshTQCNtqnLHxoDqlxIjxwLJMYRj82ZZGjG3muELFQARyGOWKysq8f8ALY+ClkUSPd3c0e54JZInIAJjkZCQDkA7SM9T1oBJrV0UaJrifu2JLIZH2ks25iyk4JLcznx51lZVYnoxzx4zaJA4pvgMC9usf28n\/mrfh3UL6PcLSeaMHm2yQopOOpAOCcePWsrK0MA3pFjcKZJ2uJVncEGRZXDEf7zg5bmByPkKXrjiC9LDfd3BaNjtJmkJVsFSVO7kcEjI8CaysqUxnOLX7tXeRbqdXfG9xK4Z9owu5g2WwOQz0rnYatcQFjDPLEWxu7uRk3YzjdtIzjJ6+ZrKyqEdItculRo1uZ1RtxZRK4Vi3xblBwc+OetYdcuiixe0z92u3anevtXZgptXOBggYx0wKysoA0v9Vnn299PLLtzt7yRn25xnbuJxnA6eQrNQ1a4nwJ55Zducd5Iz4z1xuJx0FZWUASbvia9kj7mS7neP+g0rlSPIgnmPkaif6Un7ruO+l7n\/ALre3d9d3wZ2\/Fz6daysoA3vtXuJgBNPLKF+HvJGfafEruJweQ6V3uuJ72WPupLu4ePpsaVypHkQTzHyNZWUAQbK9lhbfFI8b4I3IxRsHqMqQal3XEN5IpSS7uHQ9VaZ2U+oLYNZWUAaaVrdzbEm3nlhz17t2XPlkA4P1qRHfTGQXHfSmbr3veN3mcbf9pnd0yOvSsrKTdFJWfP9O3SO7Lczq0mN7CZwz4GBvYNlsDlzo3odxcBFSK5nSMdESaRVGTk4VWAGSSfrX2sqZ9GmCKlKmdr3TJO\/7zLMzDmzszsTgdWYknkMfStb2zkWPewOM9aysrCT2j1sM+GKUUluyFcycgKsvh3s4sLm3WRnnkkIOXiI2g8ug+vj5GsrK3h0eRl\/oY+HNNs9OV1jBaQZyX27uvjjmB9KWOLuI2vImiEkKAHLEZO3BHI9OeOePlWVlZqVnRKFRTFHgS2C3sae0xlchiUOc8z7o+zn6jzr0EvEtuORcKfIkAj1HhXyspznx6MIQ5LZ\/9k=)","0da0a9cf":"**Source of Data - ** [Towards Data Science](https:\/\/towardsdatascience.com\/what-is-transfer-learning-8b1a0fa42b4), [Towards Data Science](https:\/\/towardsdatascience.com\/a-comprehensive-hands-on-guide-to-transfer-learning-with-real-world-applications-in-deep-learning-212bf3b2f27a), [Analytics Vidhya](https:\/\/www.analyticsvidhya.com\/blog\/2017\/06\/transfer-learning-the-art-of-fine-tuning-a-pre-trained-model\/)<br>\nYou could follow the above links to know more about transfer learning","5370b209":"## What is Transfer Learning ?\nYou probably have a career. But hit the books for a graduate degree or take online certificate courses by night, and you could start a new career building on your past experience.<br>\nTransfer learning is the same idea. This deep learning technique enables developers to harness a neural network used for one task and apply it to another domain.<br>\nTransfer Learning differs from traditional Machine Learning or Deep Learning in that it is the use of pre-trained models that have been used for another task to jump start the development process on a new task or problem.\n![Idea](https:\/\/miro.medium.com\/max\/5040\/1*Z11P-CjNYWBofEbmGQrptA.png)","1501c45d":"### This is the step where we perform freezing of specific layers of our pre-trained vgg model.\nFreezing of layers means switching the layers into non-trainable mode, which means the weights of these frozen layers would not be updated during back propagation.\n![freezing layers](https:\/\/miro.medium.com\/max\/1400\/1*AUI4rH8_tbb7x4xkBsHu2Q.png)","b75e90cd":"## What is VGG-16?\n**VGG16** is a convolutional neural network model proposed by K. Simonyan and A. Zisserman from the University of Oxford in the paper \u201cVery Deep Convolutional Networks for Large-Scale Image Recognition\u201d. The model achieves 92.7% top-5 test accuracy in **ImageNet**, which is a dataset of over 14 million images belonging to 1000 classes. It was one of the famous model submitted to **ILSVRC-2014**. It makes the improvement over AlexNet by replacing large kernel-sized filters (11 and 5 in the first and second convolutional layer, respectively) with multiple 3\u00d73 kernel-sized filters one after another. VGG16 was trained for weeks and was using NVIDIA Titan Black GPU\u2019s.\n<br>\n**ImageNet** is a dataset of over 15 million labeled high-resolution images belonging to roughly 22,000 categories. The images were collected from the web and labeled by human labelers using Amazon\u2019s Mechanical Turk crowd-sourcing tool.\n**Structure**\n![vgg-16](https:\/\/neurohive.io\/wp-content\/uploads\/2018\/11\/vgg16.png)\n\nSource - [neurohive.io](https:\/\/neurohive.io\/en\/popular-networks\/vgg16\/)","2a5e824f":"## Some of my previous works at kaggle\n* [Style Transfer Deep Learning Algorithm](https:\/\/www.kaggle.com\/basu369victor\/style-transfer-deep-learning-algorithm)\n* [Low Light Image Enhancement with CNN](https:\/\/www.kaggle.com\/basu369victor\/low-light-image-enhancement-with-cnn)\n* [Image colorization without feature extraction](https:\/\/www.kaggle.com\/basu369victor\/imagecolorizationwithcnn-without-featureextraction)\n* [How to improve Amazon Alexa with NLP](https:\/\/www.kaggle.com\/basu369victor\/how-to-improve-in-amazon-alexa-with-nlp)\n* [A Deep Dive into atoms and molecules with Data Science](https:\/\/www.kaggle.com\/basu369victor\/a-deep-dive-into-atoms-and-molecules)<br><br>\n **and many more......**","9c4d353b":"## Now lets Talk about U-NET\nBefore Taking about u-net you need to know what is **Computer Vision** and **image segmentation**.<br>\n**Computer vision** is an interdisciplinary scientific field that deals with how computers can be made to gain high-level understanding from digital images or videos.From the perspective of engineering, it seeks to automate tasks that the human visual system can do(wikipedia)<br>\n![Computer vision](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxITEhUTEhMVFRUXFRYXFhUYGBUYFxgXGhgXFxcXFxUYHSggGBolHhcXIjEiJSkrLi8uFyAzODMsNygtLisBCgoKDg0OGhAQGisdHyUtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tNy03Lf\/AABEIANYA7AMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAAFAgMEBgcAAQj\/xABIEAACAQMCAwUEBgcGBQMFAQABAgMABBESIQUxQQYTIlFhFHGBkQcjMqGx8BVCUmKCwdEkM3JzkqKDsrPh8TRDUzU2VHTSJf\/EABkBAAMBAQEAAAAAAAAAAAAAAAABAgMEBf\/EACERAQEBAQADAQACAwEAAAAAAAABEQISITEDQVEEMmEj\/9oADAMBAAIRAxEAPwCnLTqimlp1K3jj6hdIYUuuplIs3BOw7XFra3ImYCa4eOVQq4jQSSxqynqdSRjf9s07wnsMjm5ae5eOKK8FpGURDI7mSOJWbUCApaVFwB0JyBVy+ja\/WOwsYm\/96W7Rf8azTyj\/AGo3yFN8JjM0d7FH4nTjUcjLkAhFu7eVn36aUc+uggbjFYbXXOZ\/QFbcMa0eS2XS0oniiWTGFfvdBSRlzkBBJuud+7OMahRDtHay28FxNDP3zW7rHMjxhQGdImDRlSNlE0bEEnIBGQd6941dr+kJHyNCXloHboCBCGyfJS256YOcYOJnbdDDZ8UaTwie6gMW4y47myj2A3+1HJ8EJ5b07aJIZ43w26h9p+uUpFZtcRsYhl5F7zVG3i5DSh2x9uhXaD6i2t5XuszXCRvHB3J0vkxd6NS50hVkzkkfGrt2pv1e24lDtris5G9dEkMmk\/Fo3\/01Ve3UNw3CrTu442gWCF53IHepoNu8fdEsMZKtq2OwpbTyIPBuFCeI3E05hjM6W8YjRWZpHdIwzFsgDW+MAbBSc74C+E9npZby6tJLjT7KIyZFQYcSjUhwxOnYEEeYPTFL7OWTXnCPZ4WYOt\/GZDGwWSJfaI5DIpPJgh1A+nWiHZ2whthxV3u5XVZoYnupW76T6uGNyGK\/a0mYrjG3LpT8qeAVp2dmmuOI2ySjvLNIymUGJXlWV0D77DCoNvM0O7RWT2kSuJNZez9owVChWwTpwDuv9K0KWQWl7xS6I8PslnO3qE9rVvjpj\/Cql9NjgMMYwbKQDHLGTjFE6pYJcW7JmETd1da5YYRO0bxABo\/rMAOpAUnu3Gd8bZFD54RDY2tzJcnvbmKKSOEQkhnZUdkDJkqBq5kir92lty8d2swC2xs95A2htX13eAuCDpC6Dvt4jzyRVP4ys\/6CsTFHG0S2UD3DMAZEjWGJsxZdcNsfP3UtpldnIRcib+1NE8JZnTuSQsWpxG4dtn1KhPhzg5FSuzzySxmb2srCZ+5gZYMPJltIaRZPsjUcYCjZc53wBnYIkvxHP\/4cP43XP1oj2EUzcPhSPxNHeo0gyMqveiXJz+4wPxooSl4jeBb0tJEGssKQsZKynu1mD7tlNSuvhycHO551Otbid1jY3KRtNPPFEncF1zGZyoJDgnwQsScjJHTIFQbdDcHjawYdnkWNMEYLraQxldXIYdSp8iDUvg1nLJFYMEx3V7cySglfACl9H5+LxyIu2eeeW9G0As3AzdTx6mWAsbmOXQuQ0sLhVZAx8KuodsHJGwydyRQ7FzNbwSmc65LhYnXuxhYzKyFhvnVpAO+2atdm+ZIJFPhHE7oEjkQy3UWM\/wCZp\/00agnU3T2n\/wAUVvOvveWcH5d2v+qip8Ju4zWTsWP7afaW\/s00cS+BPFqigkJb1BlI2\/ZFNt2IH6Uaw79tAs\/aTLoXUD3nd6Mcsdc89jVo7K8UcLxaZQCRxKRRkEjCCGLkD5L+FEOIQqL3iEsjGNF4bCpl0k6FLXjOwA+1pCg4HpSUplt2Bga9lsnvZBKqLLGoiGWhwoZy2NORIWGM5wBt1qmcctIY53jglaaNDp7xkKHWCQ64IGQCOY2rY\/ZR+m7e4U5EnDJUDYxnRNCwOP8Aiiscvk+sl\/zpv+o9IB+cVKtrnFMutMkU5Qstle+tGIrvaqTb3BBorDebUWAMpQpIr0Vs5qcU0oGmwaUpoLD1nYrI6IFGS+3oSdyPI7n5mr6eEwqBiNRgEAgaSAx1MNQ33O58zvQLsJZ95c5PJELfE4Uf81XbiltgAj8n+lZ9X23\/ADnpXnaNAIo42YaTiGGJ5CF3Ge7iQkLzGSMZNC5YoPsiElgGiEPdSNIuVBaMW+kuvhwSukbc9qs9rO0VhxWWMlZEUBWXZxphVlAI32Lt8Sam9n+IG44pczNay2zrw+JQsyqHIM0xLDST4TpUf8P0FHkrGa3lsusxi3k7wjeMwTd8VwcEw6NZTAO5GNjUIWUhLKtvcnRgOot7g6DgMAy6PCcYIB6EHlitasXL3PBJHJZ2sbgs53ZiYrUkk9Tkk\/E1Y7URgyuvO6Uzn+CGCL8NNLVawCC3mI71ILnSV2lSGcKU\/wA1VwU688UmO0JVdNvIySHCaLeZkkIBOEKppk8KMds7KegrYOyfEI4OF8MkluFhjES6gf8A3cwvhFA3JBw2Bv4KTwFw0HCGUEKb24IBGCAbbiJAK9CB0o0ayqKwd8\/2S5YZKt\/ZrlgdJIKnCcwdQIPI5pxLSTDabS4YYKMPZrgjbIKHwdMkEHlWldleIzifi0feHRGZJIlwuEZprzWVOMnJjB3zTfBbuU8GaRr72eVp5Cbl0VssZj4SgwPF9nbHOno1nMdszqr+zStGcOHNvOUxzDiQpp09dWcdaXFaq+yxs40g6YoZZAF6H6oMAvlyG3pWvdiXxYcM+sIPsiYiA\/vcQqcZJwMc96q\/0bFkvRlQiyw3AKbeF1lRljyNjpBkXb9nbaiUapYh1hT3M8gcYRxbzsHGCfAQn1gxk7E7Amn7KPvCxSKdypMbtFb3DMuOccndplCP2G5eW9aXap7PNwaz\/Zt5iffFAke\/qe8NQ+zPES4uLaNmt504hevFI8chgnPtE50MwKh9icoGDeAHcA0tGqdaG2wPqgyIVjMgikMaHbTHI4Qop8Q2LDTqGwzRzh0HDyo1WyiNsaZHtpFgcufDiZo+6cMSMeI6ids5ryCKU8M4st0iLK3EAJVQYjLMtnqKAknSc5BJyQckA7C28dJd+JQsSY\/0bCQmTpBc34YgcgSEUE\/ujyoGoS8XsJI0hZC8bKrJF7LOQyrpKtHH3XiRfD4lGBlfMVWe1vDbXVDLbQalli1juIZHJQEEOREhIUhl54q\/dnLNHhsJdu8itEA89EsSZHxMan+GgX0ft\/6UeXDU+\/ujS0r7ZzHbxyJrjgkkix\/eJBM8WBzzIiFNuuTtjeuNnEwzpUhhz2IYfzG\/31euxXEpp+HWi2bdxdQW2kQ3McognXSg7wFSusbKQ6ltPeHI8QqlWgIRQRgjYjGNLA4ZcAnGDkYyeXM0qEV7JNsKNhgeg8h5DYfKo7wgDAGBRVlpiSOkYPLHUd0orLFUSWKg0DFLWSlulN6acqTwr2vBXtbuZ7ShSRSgaDjQfothyLhv8tR82P8AKrdxGMackbg\/z+fwqsfRQcpcD96P8GFW6\/UnI\/OMf+fnWXTo4+Ko908XfqIo54Z1CyRSO0WcZUMsiq3NcArj9UEEb5hntFdC8a8KRMWiEDW+pwndAl1xLoLawzSHVowQ2NPI1OvYyGIOw2\/DP8x86Fz6VGptscvWlDpD9ppxcW06W0SpbRPDDb96+ArhVYmYx5JxGmBp6Hc5pq37a3SNETBE3dQTwgd841CV4mDH6o40iIKB11E5HKgfE+MDkNqCS8V9arBFjfjsjWtpaNGiraYIkV2LSYjePdCgCjx5+0eVFODds5LeKOI28U4hkkkgdpXiZGcSAhgsbB8CWQA7bMNsjVWfycYWmW4v+yefOhWReuBdoZonuXEccjXSESEu6aWMk8hZVCPlc3BAUnYIBk86ncN7SGG29kltLe4i1lx3sjDVltYzH3TAEH16dKzqHiR6Gn24oSME\/wBaWw\/BfuE9sZoI7SMQwMLWPu1bvpB3n1YjyR3R0cs9agWPHXgmimUKzpLJIULEIwkWUMusKTsZAc430DYZ2pPt58\/nTUvEfP8AGjYPGNIu+28sl7DeGCINCjosfevghwdbF+6yD9nbB+zzr3hHa+SJWV4IZwbqW6QGWSPuZJHeTSGEbd4AXO5C8+Xllz8WIpv9Nt+c\/jRJqbI1CXj8skN3DJ3X9rnEzSKzK0e0K6EjKkNgQjDFhnO4FWBuOTXSyoVt43nhWCW5SSQs0a6\/sW5TTG31suCXOC2TqAxWJw8XYn7J+dWHh3F3XfFPxJsPCY76PuXX2YrFbLbmPvJAH06SJS3dHSRpYad\/tnfbeFD31jDDJGsUpithbuGd4wSCniUhGyMg7HFI7Gdp1kxET9rl55ot2kX+zyjHLSfv\/wDPyqaM9KfwLtNPbQW8Rt4Jnt4zHFOZZIyqkAEGIIwbZVH2hnHSg0ef1jliSzHGAWYlmIHTJJ2qWVpiSOp0uSaQy17XUjMOlRZI6IMKZdaDC5IqYMdFHjpgxUwgV6DXldW7lKrq8Feig1++ief6yZD1RW\/0kg\/81XXi8+jSc46b\/wA\/urOPo2n03eP2onHyKn+VXbtNNkDG+3p5\/wAqz6+t+Phm9uRIxGOe+fLbmfu3rO+1fFm1FUxtV7hbIIJ3YEf1bPy\/O9Z3250Q7jdm5b5ycbtSlXip3cxG7tj0G5Pw8vU4oZNOSMb49TmkOxY+ZJ+dOCwlPJCfdj+taSs6jFQa90+RrnjKkhhgg7j+VLgGpgoxksBvy3OMmgz8L+dEIIdS5z8POveMcDa3CtqWRf1nXkDtsw\/V5j309wNzqKsMY55GPuNZ+q1+eqZWA9c1BuTuat8lqnRlJ99VK+X6wjkM4z+PPan4lvpCYZpcaium0fqavXVj+RpJarxnqQvLO+3P0qRbXjqcg\/A7irdwzhsFxZICqIQozIu8uRjOdt8+LmTuKo4NROtquufFbeC8VBdSuFcHOnOzeePP3Vs0c7TWeSMl4Tk8vGnMY\/h+Oa+bBMVIIOCDkEdD51uH0d8YaRFGeYDaMbbgase4j7zR1BPcD8Ul1qxyRQW7uHAc5OAeQU7jbzxigt3cxSnXCpUZII6ZB5r6VnRObmh7x0yy4qaRTLpQEauIpxo6TQRpkplkqZppBWgK3XtdXV0OZ6Ku8XZ6GCIGeMyOUDNh\/sg78gfvNUejF9O4nV4z43SIj11IoKnzB5YrL9OvHHV\/i\/jP0tl\/oa4TBBFcpNDLhBkMjnxAEEHB68\/uo0lyWjQudRw2eW4Vjn7vwqlXMWfGnIPodf2X9D+yeYPoR0q88Nt29mXbfuM42z4tz+NLZV3jxAOJ8WSMqoPIDWRnUcZKjPoeY8j8Ko3ayfvwkxbADvHp9yxsPnqb\/TRTjUZLH8+vy5UGnsSyFeuQw\/xDOPuJHxp4m\/A\/hfEIYBI2lu+xiN9vDkMGODtncffULjF530mtVCL0XbnzY7eZzSLiM5Odm6g1GcEen586rJup25ju7IGd+vxPXHzFJhYhgw5gg\/HnRW6jBt4MsBhp\/vKdahMB5j3inukuXEZ5JbLWDo0qp04ADKxVQMHmRtg89qD8Ase9OqUnT0A2z55xzG1Q4XkkEcZdmVRhVJOAPQegq4cGsvsgDYdKmbGt9+xIcCgKciBjkCcfKqHx3hLRyEKWIO6+e3MepA3+FavFCMVWeP2GoEY3BBHvFFvsSbFD0mQSyOxYqqsc7lvGkeM9Pt5z6VEWEncn7sfz9KPPBoWYqudaY0+vexMdvLCtQiObJPhx+T06U5dZ5iw9kOJRQIxldtnBEeknUMdG5DfPM+tCZlUk6RpzuF6Y6DNMou3vP3fnNeu3L1P86My6e76RnFav9GmYjHnnp3HqckD76p3Aez5dw8uyA5Cnm3XcdF\/HFXBE0uGHMEHbqM70USD\/AG+tH7xGQYLRMCP3kO\/LrpIx7qD8MXEKeoz8yaP9qr0rbQT7ExzKOv2SpG+QOeFzzG9CsKB4Ps51J\/gfxAfA6h8Kwv1vv\/nhphTTCn2NNSU2Blq8C14zV5mqibS8UkilLXummFVxXhFO6abcVqxsJo6q4ljkPJLdZPfhAB\/uxQEGrHYL3ls5\/WSJ4z7hJG6\/cxHwrP8AWbHR\/id+PV\/7APhl6FaRWOFlGk+jA6kb4Hb3Ma163VjaQyEDxQx6viq6sjr1rB7lSHINb1wHB4fAoBJWLTjPiyFzpB6bD8Kz4dX7c5JWbcYj8Z9OefPkfvFAZnq0do4wCef2jseex328tWr7qp9xkHBrTfTnxD4iobmN\/PrQeVDyzn30Unz76ZWEdaXlReYiPGWjRAPslz79Wn\/+fvpyO1C89z+FS2lxypuzhaWQIoySfkOpp6PEU4Pb75PM1deFIoxjnQWGyCAeYFJS\/KnIonqqzV3XBofxSDr1oDDxw53NTpOJBgMmi3TnNgHdxDVkbVHFgkn2lGep5H50avOGl4yVO++KrFld74bmDv7weRolKx1zwfTy3Fe2kYU5wMj5ij0RUruPzz51EuoQDtsevl1FOlD8N2cedTYLrJHv\/P40FHvz58qchchh5enw86nQufaGctw2UHG0kON87ZXfPxx8KZ4NvbLn9U6fgdx\/Ok3EfeWbRgAEvGMdBhlDbY2G3zom1mYI+6PMhGHkRvuDUSe1XrOECQUw5qQ9R5KpzzrUaQ14prmrgKBT6NTgNNRCngKKFZxTU1PkUxcVrGdMCrF2PYM0sJIHeRHTn9oDAHx1VWs1K4Zdd3Krn7OcMP3SMN8cE0+psL8+s6lL4zwWRfrCp0nPz61qfYK87yyDMNwcEDrhQn2fcmffVd4zrFtG0h1adQ\/zEyCrj1waLfRtcK8E4QaVDDAPLcHJrHl399bzgF20ysiBgNTozMVGwfCsCN+RZSPiPOqVfx8j0IHT89DWndvLbIXmc535j7DOfcMR+7J9azpkOSD7\/kDk\/hTZyhLR0y0XTpU+cfrdSc4+HKobZqbDhiRBT3A7vu3c8tS6Qfjk\/P8AlXGHNOSWuIztTkFpU3H1BwdW3pS5J1kGpD+fdQEg71FaRgcrkH0ozT85FiU+tdNxVU8OST5Deq\/7TJy1H7qncMsSd\/OlORf0\/pYOHdoC2AM+41BulPeM+MamJHxojw\/hYXxYyaKy8PDLyq8K9aFWdycY\/Pw86lSnAB3xy9PLr+d6ULHAx1\/PyqOysMg8vnRS03MuPFy5E9R+eVLZcnbf4eh5b15kY3wBjffp54p2BgpBxnBG3u6belILpBPHHatJINShgCBsRlsDbyzin5bkPFG2otnVjPMDI2+FMxyIbWQSg6QVDeuWULud87\/dUC+uYwwSI+BBgHr57+u9Ln6y\/XrOEw0xIlNR3NOiTNXjknWIrrTeKmMKa0UNJ28jNSAabQU5oNS1lVkGmbjlTlIcVrIxvSJopQWntFehKpEqz8BuY7iAWk76SpPdMeWD+pnpg8qO\/R\/KUmkgxgaNt\/2SMn5VQFSrH2HuNN7Fk\/aLKfUsjAffisrz710cft6yrT2si1KF1EPvpwR6oSSemGHy99ZzxLZyQMbhduW3gOPMFlYj0IrT+0Skhsb6ZFP8J0jQNt8nB68+WQKznisIBOCSS7uc7kasHGfPVn068zUtwOVNK49+Pn+HP4VGjgz+ffU65jygPTYfjz+A++nDBpQc8nbly2+8evvp4NQYvSpfd52qMjYHlUtblY49bbt+qP51UL6ZnskUZfAH30LmjhbbB99M3V2znLHeo5l8zU3pc4z6lDh0Oc6zjyxvRawvoE20n31XDOo\/WpIuF\/apbh+MaTaCNxmJgfTrUjVjblz\/ADis5teIMhBQ4NWmw42Jlw5w46+dVqbx\/QrIQTkD47Z\/CoVygPuzyHn5jrTXtfTPLz54+NSi+VJ8ueN\/XnnlSpQP2zy35H1Hrn4\/OnbaLfA59Pux+B+dNTDB+OMeuKcgOCN9OPyPwpBZuIsP0fMd9hERn\/Nj9PX7s1TYr2rhxJv\/APNlz17vHkfrUz\/T4GqDiq4c\/wC30dgvKnxXVVdJCKmwXVXjCrMs1LVqDQ3NTI7ilYQkgp4VDglqUGqLGnNVMV7iurq2Ya8xXorzFdQNKBqVw257uWOT9iRG\/wBLAn8KiClgUjlaxx6I6m2B1LpU533OcYxv9kb9PnWccWjKvgnGNLD11LnbzwuM\/HmN60QTe0WkUuxJiAPo2Cjkdc6tuflVJ40Nl1YL4Y535aSpX1xpYHlnB+OX8vRnsBhUHTgcyDg8iFDEDnyCgf6vk5xcARgry+zg8wRuQR78ineGxDTluY1EDfoup8+RKgj4+tNcZyIipHiGpm5YySds9P8AvQaqXF3g1GueJK2BnltipL2mTS1s06gGpOUMMUj7IPjyp2Ds\/K3MqPeSaLd8q9KbPERVTIf36hDsy5Iy4+RqbD2TU85D8gKR+lT510fGWzT8uT8ZDs3ZjH925J9cYqGOHXKH7I265FFYeKSP6CiEGTzPP89aNhAdtLJnxA1ZuDSqxKk4yvUDy3HwqFcW45gfHb76TBkHcn05jfBwaVSk30Wlj5ZB329NvSkDp8j\/AF9etLupdWc43BwcnqeRz+djUfV5j84+dKAfvJSbF0A1anQbDcYOoj3bHy3NVPuT1FEuLcee3WNI3ILZYn0GAuc59flRXsrxKO9ZoZ1UsFLBwAGwN2Hvxmr4+MP052qx3deHajHG+FNBK8R30MRnzHQ\/EYPxoNLVSs7ydSbFSYrqhJelrJQXistrcUTjm2qtWUhoxG+1TVzkNrq6urRyPK6urqA9FLFIWlikcXPsPxDwPATgjxofTI1AfEKf4jUPj0Qw2P1SwG+cHJZlXHL7DH00ny3r36QFppmdtJB8K9T6Yqyi\/S4txMviRsvsBthV1ZAzhso50++s+5l13fjbefYVanD4bkNAYeQfwqvw8O\/m29McbhOnTzOoodgPsquc+WRo+LEeVL9k8enOBlNLeZXkMHl19wUUS4rHqjbSPs7eR2HInO+AR6ZBHSpaKE0eCdzkc\/f8aQ8oxT\/EkIAU7bnA8+W58xhRUAk\/Ci03km9Q5Yqm6TjNMOhPIZqcVKh6KciSpK2Ln9X408vDH8qeUthdpJiiYnwNuVDo7RhUqOM4pzRp8XBztnPx+\/NLgZtWdWCORz8N8dKY1Dpv51JiUZzjp6b+nXpTIqZvUdPlnp+etMDfHIbn8CAfdTnefDGeX59\/3UL4qxETMNhkL88g1IDOM3gklLdB4V9wz+JyfjVh+jV\/7dH6B8n00HNVNYDjPSrn9G8CmcsfCApQnp49mPwQO38NbSYxtX36QLQExTAbNGqsf3h\/2\/Cs24gMVt09stxbSofCH0lDj7LEd4PkWwaxri9sysyOMMpII8iKmUUCD09G1NaMGnYlpkKWLUaibagdpRiM7UlRFFdXCva0cBNdXprygPVFSJZUgj72Q9Nh1Pl8TTCxjGtl1pGVkdMZ1qjBmjx11AFcetaT2g7K8Pt0vL1raKSBbSN4EYZQSjvs6QeWv6gZqbcb\/lxvuvnvivEnncu59w8h0FXT6KLkHv4Sd8LIgJO\/NXHyIrSezHY\/h0Nrw6OSyinkvAO8lkAZlY20lwSpIOB4NIAxzzz5xezvYixibi0fcq\/cP9Sz7uitbiUKG54BbHntUW66pcMTQK0YbGkq2QOi4fJOOpznf92mHAKsAMElwNhjfDDI33xuSeo9c1N7VWFvZw8PmgjWJ5RpkYZ8eYc+Lz33ojwnsxbXHCHl7pTcSRXRWU57zvC0uhsg8xgfKpPWY8bjYvvyGem4GQNh7\/wNB3jrYu3nZGyg4drS3jEyvaoZAPH4polkyf3gxz56qKydh+G+3JH7HBoNtI5XQMahLGA2PPBI+NMtYSqdakpKK1Hsr2YsUs5blrJLp\/bJkZGUyd1Ct0YiI48N9iMF9KjU2MeWAnZ\/9CS8Wa3hthcQXAjERdXCQSIs7TKqzAMAcJsBgHbYAAE9HqlvcgdaVDe70a+lz2KG49ktLNYJIWDSSKFCyK8Ssq4G+xYc\/KrzZcA4Xa2FrNPZxzRSQq9xdGN5XQtGHD+BWcKSSMjAXajaNZn3inz\/AJV5qHSr12C4Hw2W14hc+zC8jhuZzBqRjI0KQxyRxqHGrO5AyMkn1p\/sXwnh9xBxC6fhoxFM\/d27p9aipbxN3Sr0JbUQPN6ejWdMMc+dKNxgYPTl79+lSbVoZ+JxoLYwQSXkC+yuMFEPdK6MnTJ1HH71aBccL4VFxpeHvYRN38EbRnSuhCouGkJB3ywRRt5Cp+jWTS3X6oIHr6UriZxAR5lfxq0\/ShFYxXRtrWzWBrc\/WyKFAkDxRyKoA321das\/EeFcOteEWty3DBcSSW8WtkTUys0GtpXPlkbn1qoWsetQMeI+4dc1e+E2ot4dGwdgzyeikaWyRyx9jPmX35VfOAdjeHQRWML2kc0lwhMk7jMgcRd4WVjkrvsACMVD7P8AZa0H6U7+3F2badliEmWcxrBHIkQbc9cZwSTvuavz9M\/EX7K3Xe2iueRZm5bspcqh9dSjn1xVe+lHgIwt3HuCAkny8D\/HkfhRy7tI7S6tYrdWiiuIZZHh1MVR4e50FQx8H96QQMAlQcZzkld2nepLBnKyoV9z4yD88VEVWBSw0lVqZOhUkEbg4I8iNjTIFV9SftqKxHahtuKJx8qMPUYV7SQa9q3C6vK6uoCZfN3Nm7nm4wB1OrKj7lc\/xUd7cX0h7K2e\/wDeC2jb1VVYqPnGnyqt9vWK2cQ2xqXYekSEH\/c1UmyupSFV3do1I0oXYoMcsITgcz0qOprt\/OZy+kuAxtcW\/BZosMkSq0hBHhHsU0JzvuRIwUgcj7jUXs9dxz3XG4onV3LoAARv\/ZliOPc6Mp8iKwq54p3UZEM0sev7SxyOiseWWVSATjbcVXLe8kjYPE7xsOTIxVh7ipyKmzFz23P6aH7u14dEcCVdymQSAsIRjt01MBVl7DXpTh3CfKSZ0b4x3bD\/AHBa+fbe\/eUa5XeRzszuzMxxyyzEnG9K9rlAA72RQpyoEkgVTvuoBwDueWOZowN6+kW\/B4Vdyk7JeRA\/8K5hQ\/8AIatxiLXaXC4MPsrr3gI05aSJ167gqCc8tq+T5L6QqUMzlS2plMjFSSdWogtgktvnnmnY+KSrGIxNIITkd13j90fMaAdJHwpG2z6PLJxFNe2M8kryXziW21R9wUa5AaTSVDK\/cMHDBt8LzHhpjjUESdqrTugoLRh5QuP7wxXQywHJiip91Y9DxZ4yWjleInYtHI6agOQJQjPWowvSH1iRg+S2sOdeojdtYOrJHXPWkeLl9MP\/ANXuv+D\/ANCOtW+jnh0kFtYm3lluLaePXKsrRMtuTEX+q0qGA7zwFNwM8hua+cpbwsxZ3LsebMxZj0GWJydgKcg4zLEpSOaVFbOpEkkRT55VWANMX4+iux1roi4xHw\/QrC8uBBjGhZvZ4cDG4CrIcYxgYxim+wNvfrBxNZmT272hzqGnR3rWsDRnZQMbr0r5wg4rNGMRSyRKTnCOygnlnCkDOw+VLTjVyCxFzMCxyxEsg1HAGSc7nAA9wFBLnELtO0EEd6VNx7ZbNKUxpJYRsuMAD7OnpWhce\/8Auyy\/\/XP\/AE7usFa6cv3rSuZMghyzF8jAB15zkYFPjiMrOH72QyDZZNblxsRgNnPU7epp4F1+lpj+mLwZwMwn0\/8ATQ1onaniksPA+HrHL3QmgiikbSrZjNlIxUagcElRuN6xbut+8unYk\/qFi0j4wBrYnIGMDnyHSkXXEWfSpZtK7JHrdlXAKjCk4zg42AxyqvH+0Xp9K8LUzrwu4iw0SxFmYEbBoNI2551bY6HnQngXEPBxyaF91uJijjBw8drGMjOxwy\/dWHcMu5FUoJJVVzkxpJIikHnqVWCknrkU5GxUFVZ1UjdVd1U7YwVUgHbbejwo8m1dpYx7bYT6frHtLjvGAGX0m20BvcZWx\/iNTIbzS3Pngg9QRj5j+tZX2ZnIZtTMxMbKut2YqGwQq6j4QSgzj9kUQu+0RAAJyR1yM+nx9fdTnOJt1C7e2fdXsoA8LnvF9Q+5\/wB2ofCq+gq2C6\/SEbRH++jBeA\/t7eOL4gZHqvrVVCkHB2I5il89GkxVPjbah8YqSr09GEA0oGkCvapxlVxrzNdQQh2ls2nsMruyxhxy3MJKyr79GGHotZYHI5Gto7LtrikjGNausiAnYnBUr7mHgP8AjFZb2o4N7PMyrnuycxk89J3AP7w5H1B8qm\/XX+d9BEjedINKxSaixsncNfmPjUh32PyqBbnBqRK3zp30H0L2E4VbXtnw26aKLVb94kvgTxFY5ICX28WSFffzBqH2Pe39jv8Ai0UELSPcTd0WQYWFCqRoAMaRgZOMZPPkMAvou4gU4FxT6zSyi4ZNwCG9mXdfiBUz6I5kueDXFlG6CcPJhGOPC+llbHPTzGfMVJLRddm7VOOQusEY76zuC6aF0FkeHD6cY1YfBPpQvtZwyAcH4kwhiDLPcBWCICALjAwcZG1EeM9p7ROO2sbTICtvPGx1DSskjRsiM3JWIjOx\/aXzFRvpKlS14PepK6a55pDEoIJbvJg4wPRck+WKAtV1wa3MkcbWVu0DQytK7Rx4VlMIjXl+sGlP8FU\/6OuG28djcycPhhnlW8lQ50uzQpOAEV2I3MG65YAswJ5mrddcRAv7RBKO7a1uy66xpLB7PSWGcEgM+P8AE3mao3YfhcBa8ksJFjvY+ISK696wjMAus4aEEqyGIuqnTseRBGQAvsd7Dc8bujDad0otF72KaFUInEvibuzkAlSm+2Tk1J7PJ33G5Y7iwigEdm\/drpRhIntICzYxgE6SPOjFtf2x49LodNS8PVZSGXGvvyQpOfthSM+hWhvZqwmg41LLc3aT97aTd0c\/3ca3EbLGSfLvD99ABPok4dC\/EuLq8UbKs50BkUhR39wPCCNht08qoX0j8Tm9sJkso7KQQooRdJ8OuQiQaQBltWP4K1vsJwcWfE+I6543FwEuFIONIknufAcncjH318+doeKzXM7STytK4JQMxydKk6R7tzTn0IgkLNz57kmnICRv186ZtyAwzypYk\/GtYmjFvNuNvX31PB0jLHfyoJazY3+VKluiaesxNOIaGJB6Y+dMpctI+fOoMS6j+6Pvo7waw1HPy9MU5NCy9ioNEySuPCpBHmD5j41duKxwXbNMsAdCVQsE3ZwfE2QQ2AMDbyNUmOQyOttCdI5yOP1V6n3noP6VeuG3ioojiBCqMAAjb48yaOuS8v4Ar7sUCNVu4J\/+NiP9rfyPzqrT2roxV1KsOYIwa1cXCsfHz5ahsw+PX4040Z\/aVh0LICce+ovCp0xsV7XV1NzFU7bwFzgHFdXUDFp7OWXdyDSfE2Vz7\/8Avg\/ChPa\/hK3UWr7LEkjyD6O8P8JU7j9rJ6murqLPbfj4yN1wSPI4pNdXVF\/2bz49RiDUjOeflXV1FEMsN67TXV1Qp6orsDpXV1MFJb5GaTJgbYrq6qkT\/JGK8Ir2uqobgBXgrq6l\/Kb8e17XldSv0JEPPFPL5eZx\/wCa9rqufE36PcIntcKksBdsg6g7rtnyDY5ennv5WIXttEEXuD4gq7O32iQCdz5Z+fy9rq0kRasXCLSFcJHHzbMjFnyx3GftHHIYGTtmjdtAByUbHzbl5DPXPX3V1dRYjfaYuR0X7\/gc\/nlTyO+P1R7v+48q9rqWHr\/\/2Q==)\n**Image segmentation** is the process of partitioning an image into multiple segments. Image segmentation is typically used to locate objects and boundaries in images.<br>\nImage segmentation is one of the most fundamental, useful, and studied topics in image processing and analysis. The goal is a partition of the image into coherent regions, which is an important initial step in the analysis of the image content.\n![image segmentation](https:\/\/missinglink.ai\/wp-content\/uploads\/2019\/03\/what-is-image-segmentation-e1553795451244.png)\n![image segmentation](https:\/\/miro.medium.com\/max\/2000\/1*TwcMmXXuumsDRvgaY2OCQA.png)\n\nSource - [techburst](https:\/\/techburst.io\/video-object-segmentation-the-basics-758e77321914)\n","6a38216a":"## I hope this Kernel was helpful to you (\uff89^_^)\uff89...\n### Please Upvote this Kernel if you like it....\n\n![upvote](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcTHDRxP-2DbdzVVcq45Xm6UQt3VR-cvOFTaZADfq-poHvigmbvBXg)","e80609eb":"## Special Note\n* I did tried out other pre-trained model like inception_resnet_v2, Mobilenet, resnet also but the results were not much satisfying as I was expecting, moreover using these pre-trained model to create U-net messed up the model totally. \n* I have tried out freezing other layers also rather than the pooling block layers but again the results were not much suitable\n* So, if I missed out something please let me know in the comment below, you could try out in your way to improve the model and please do not forget to menstion those improvements in the comment section so that other could also know about them.","bb3aaa11":"**U-NET** is a special neural network architectiure specially used for **Semantic Segmentation**, **Instance segmentation**, **Object Detection**.<br>\n**This is how the U-net looks like...**\n![u-net](https:\/\/camo.githubusercontent.com\/cf2ff198ddd4f4600726fa0f2844e77c4041186b\/68747470733a2f2f686162726173746f726167652e6f72672f776562742f68752f6a692f69722f68756a696972767067706637657377713838685f783761686c69772e706e67)\n<br>**The Structure looks like a typical Encoder-Decoder model, with an added fact that convolution tensor layers of similar sizes are concatenated with each other.**<br>\nTo know more about U-NET you could follow this link - [Towards Data Science](https:\/\/towardsdatascience.com\/understanding-semantic-segmentation-with-unet-6be4f42d4b47)","c24bc64f":"## What is a pre-trained model?\n A pre-trained model is a model that was trained on a large benchmark dataset to solve a problem similar to the one that we want to solve. Accordingly, due to the computational cost of training such models, it is common practice to import and use models from published literature (e.g. VGG, Inception, MobileNet).<br>\n For example, if you want to build a self learning car. You can spend years to build a decent image recognition algorithm from scratch or you can take inception model (a pre-trained model) from Google which was built on ImageNet data to identify images in those pictures.<br>\n A pre-trained model may not be 100% accurate in your application, but it saves huge efforts required to re-invent the wheel. Let me show this to you with a recent example.<br>\n By using pre-trained models which have been previously trained on large datasets, we can directly use the weights and architecture obtained and apply the learning on our problem statement. This is known as transfer learning. We **transfer the learning** of the pre-trained model to our specific problem statement.\n![meme](https:\/\/miro.medium.com\/max\/1024\/1*cwR_ezx0jliDvVUV6yno5g.jpeg) ","535d8bc8":"# **Transfer Learning and U-NET to Segment Rocks and Boulders on the Lunar surface\ud83c\udf19**","31ce2594":"![](https:\/\/3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com\/wp-content\/uploads\/2017\/09\/Three-ways-in-which-transfer-might-improve-learning.png)","337813c5":"![Transfer Learing](https:\/\/dzlab.github.io\/assets\/20181220-transfer-learning.jpg)","c681b762":"## What have I done in this Kernel?\nI have combined both the concept of Transfer learning and U-net to create image segmentation model that could segment out the rocks and boulders from image of the surface of the moon. I have used preI have used pre-trained model VGG-16, from the last layer of this pre-trained model I have extended a decoder network and concatenated consequitive convlution blocks output. I have also frozen the pooling blocks in pre-trained model to get the desired result. I just wanted to try out a combination of both ideas(Transfer Learning and U-net), how it would work out, and here the results turned out to be  quiet satisfying, according to me.\n![meme](https:\/\/i.imgflip.com\/2ifa76.jpg)","c12ce090":"These pre-trained networks demonstrate a strong ability to generalize to images outside the ImageNet dataset via transfer learning. We make modifications in the pre-existing model by **fine-tuning** the model. Since we assume that the pre-trained network has been trained quite well, we would not want to modify the weights too soon and too much. While modifying we generally use a learning rate smaller than the one used for initially training the model.","3f09b90a":"## Different methods to Fine tune the model\n**What is Fine tune ?** <br><br>\nThe pre-trained model is trained with a different dataset, therefore to train with the new dataset we need to fine tune the pre-trained model. The new dataset could be almost similar to the original dataset used for pre-training, or it could be a totally different one.<br>\n\nDifferent methods for fine tuning-\n* **Feature extraction ** -  We can use a pre-trained model as a feature extraction mechanism. What we can do is that we can remove the output layer( the one which gives the probabilities for being in each of the 1000 classes) and then use the entire network as a fixed feature extractor for the new data set.\n* **Use the Architecture of the pre-trained model ** - What we can do is that we use architecture of the model while we initialize all the weights randomly and train the model according to our dataset again.\n* **Train some layers while freeze others** - Another way to use a pre-trained model is to train is partially. What we can do is we keep the weights of initial layers of the model frozen while we retrain only the higher layers. We can try and test as to how many layers to be frozen and how many to be trained.<br><br>\n> **If the new dataset is similar.**\n> * The same weights can be used for extracting the features from the new dataset.\n> * If the new datasset is small, it\u2019s better to train only the final layers of the network to avoid overfitting, keeping all other layers fixed. So remove the final layers of the pre-trained network. Add new layers . Retrain only the new layers.\n> * If the new dataset is very much large, retrain the whole network with initial weights from the pretrained model.\n\n> **If the new dataset is different from the original one.**\n> * If the size of the new dataset is small, In this case we can freeze the initial (let\u2019s say k) layers of the pretrained model and train just the remaining(n-k) layers again. The top layers would then be customized to the new data set. The top layers would then be customized to the new data set. Since the new data set has low similarity it is significant to retrain and customize the higher layers according to the new dataset.\n> * If the size of the dataset is large,since the data we have is very different as compared to the data used for training our pretrained models. The predictions made using pretrained models would not be effective. Hence, its best to train the neural network from scratch according to your data.\n\n![Fine Tuning](https:\/\/i.stack.imgur.com\/hGycW.png)\n\nTo Explain Fine tuning in simple words, it is adjusting the pre-trained model with respect to the new dataset, to obtain the best possible result. To explain it in simple words it is just like tuning the frequency of the radio or adjusting its antena to obtain the best quality every time you change the location or position of the ratio. You would not get the same sound quality of the radio with same frequency and antena adjustment in different location, so you need to tune it.\n**And If you Still do not Understand what is fine tuning....**\n![meme](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUSEhMWFhUXFx0aFxcXFxcXFxgXHRgdHRodHSAYHSggGB0lHRcVIjEhJSkrLi4uHR8zODMtNygtLisBCgoKDg0OGxAQGy0mHyUvLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIALsBDgMBIgACEQEDEQH\/xAAbAAABBQEBAAAAAAAAAAAAAAAFAQMEBgcCAP\/EAFoQAAIBAwMBBAYEBgoOBgsAAAECAwAEEQUSITEGE0FRBxQiYXGBMpGhsSNCcrPB0RUzNlJidIKS4fAINUNTVHOTorK0wsPS8SQlJlWF4hYXNERjZHWDhMTj\/8QAGgEAAgMBAQAAAAAAAAAAAAAAAQMAAgQFBv\/EADERAAICAQMCBAQGAQUAAAAAAAABAhEDBBIhMUEFEyJRFDJh8CNxkaGx0cEkMzRCgf\/aAAwDAQACEQMRAD8AO14V6vV3DALXq9SioQSomp6jHAm+U4BIVQAWZmPRVA5Zj5VMprsxCsutIHAIgs3lTPOJHlVNw9+3cKVmnshZaEdzoiia9K94NLu9mM890JMf4svuz7utRf8A0kiKKY0lkdpe67lUxMJcElWViNpG09fKtGutddNVjsyVETWjynPB3iVVHOemM8VSO3FrGvaDS5o8Zlb8JtIwzR5CscdW2vjJ8AKwrVTNDwxIdxq8yFA+nXqmRtiAxp7T7S20e312qx+RpnVO0bWyCS6sruGMnaHeNQpbBIXh+p2mrn6V7zuRpsmcbdSgz+SVkDfYTTnph00T6dsP+EQD+dMsf+8ofFZCeVEp91q08aNLJp16qIpZmMaYVQMkn2\/AU4l\/ckAjTL7B5B7tOn8+rj6YbzutHu2HVkVP58iofsY0Y1PUzbae9yF3GG3MgUnAbbHnGfDOKnxWQnkxM3stVLTG3kgmglEYkCTKFLRliu4YY+IxTNrrEkq74LG7lj3MokSNSrbWKnGXzjINR9N1xtQvmvm7ldtssPdxyGRh+EL7jlRjqRRn0f67cWk1rpUsMZSZ7gpMshLYG+bldvH0gOtPlmyLGpFFCO6iJ67df92X3+TT\/jqPp+tyzxrLDp97JG2drLGmDgkH8fzBFX7t12plsmto4YUlednHtyGMDYm7qFPhmmPQ6f8Aqe0+D\/nnpPxOQv5USkWGtyzIJIdPvXQkgMsaYypKsPp+DAj5U3D2l7wosFtcSyMHJiRV3oEba+4buMMcVoHorhZNORXUqe9nOGBBwbiQjg+YINUP0Lw79UvpP70skfwMl07fdGKpLU5XVMssUD13q9xEjSS6deJGgy7FFwqjqT7fQV3bancOiumm3rIyhlYRpgqRkEe34gitR12EXNrdwD8aOSI\/Fo\/\/ADCqb6I+2Ml0iWjwoghtYirq5YuB+D5G0bT7BOOap52RP5n+39B8uNdCv3WqzxI0kmnXqIilnYxphVHJJ9voBT17qoTugkckrzHEaRKC7eyWJ5I4CjNGPSh2mnEkulwwI3fWZZpHkK7Q7PHwApzjaDVa7Pqy6jpiE5CvIPqt3FR+I7ZrG+r\/AGCtLcd\/ZD13qs0SNJLp97HGoy7tGm1V8ScP0FetNVmlRZItPvJI2GUdY02svgRl+hrVO1Vn31ldQ+LwSKPiyMB9tN9jbXurC0iPVbeIH4iNc\/bTfishTyomTxdoi8zWyWd21wg3PCI13ovs4Y+3jB3r\/XFS3vLkAk6ZfADknu06fz6m9mP3Waj\/ABYfdbUZ9JHbprGVLZY4iJoWbfLKYwOduOFOeuanxOQHlRKjYa3JPGJoLG8liOcSJGpU4ODj2\/Agj5VxpnaA3Kl7Wzup0B2l4412htoYry4OQGFXb0IrjR7cZBw0oyOQfwz9KkejbRPUzqEAGEF87x4GB3bwxOoHuAbb8QanxWQPlRKlpl8s0YkUMvJBVhhlZSVYHnqCDUnFCuzP7VJ\/GJ\/zz0WrfB3FNmaSps5xXqU0hNWAIRTchrppBUaaSqt0WSCGKUV4mlpxQTFLivV6oQ9ik7Ff28k\/+nj\/AFiusVAtdSSx1KK8m4gkha3kfwjJdXjZvJSQVz4ZrPqk3jY3F8xYu0+gWF7qiwXsZkb1UNCN0i9JZO8OYyPOPr8qqeu9k7TT9a0lbSLuxI7F\/bkfJGMfTY46npV91WewjuYtUlu41CxGFPbQo4kcEEY5J69OMcngVTu3utWz6xpEiXELIjPvZZUKpyv0iDhfnXKNRJ\/siyRp0BHUXaEfKKWr5eoLu0iYch2t5fkJo5M\/Uuao3pb1O2uYbOGG4hlJvUysciOQpilGcKSccjn3ijHo57VWn7GWiy3UEbpCsbI8qIwMfschjkfRo1xZAT\/ZD3ZTTEQf3S4RT+SFd\/vVavd1qCW9kZ5AWSKDewUAkqqZIAJAJwPE1lXpv1WG5FvHBNFKqR3Msndur4IjVUztJxy7dfKtDk1nTprXuJru2KSRbHX1iMEqVwwyGyPGpRChx6gLu\/ku47eaGI28ca98iozMHdiQFY5GGHNOW\/8AbrSv\/wAr\/V6iz2Vnb6jFHYSh4mtnLhbhp13CRAucu204Jpx7qOLV9LkldUQetZZ2CqMwYGSeByQK2Wvh3X3yIr8QJem6Ta+nnOPbm\/NCj\/ob\/tNafkv+eeqn6YNUt7iSwWGeKXEku4RyK+PwYxnaeOlG\/RNr9pFpNrHJdQI6q+VeWNWH4VzyC2Rxiucvnf5L\/Jpfyr79i5dndbjvIBcRK6qWdcOAGyjsh+iSOqnx6Vn3oNs8Pqk37+8KfzCzf72iPou7QWkenokl1Ajd7OdrTRqcG4kI4LZ5BBpr0W6tZwWs2+6t0aW7nkIaaMHHebQcFvFUBHuxTCpaOyKTg3nfxlM3khizj2otqBWGPA4NZx6F4xHqV9AP7gjRfzbqTH2EVaexnpDiuHvFuZ7aMQ3LpCd6pvhBO1ss\/t5x1HFV\/sfqVrDr2qObmARSKjI5lQIxYKzYOcEgls0KJZM7X24fXAD\/AN3L\/rL1HS0VNS0wjxml\/wBXentWvop9bLwSpKo05QWjdXUH1lzjKkgHBHHvrjUbhItQ02SR1RBNLuZ2CqP+juOSeBzXIyf8+P32Z0YL\/SP77mhy3gF4kB\/Ht5H+SSRqfzor0NyPWzAP7nbo2PIO7qPzR+qqjrPaq1XV7BluYCjQ3MbuJYyqZEbruIOFyY8DPU13pfam0OrXrG6gCLb26KxlQKxBlchSThsd5zjpXYOcBezH7rNR\/iw+62qy+kDtTDb5tGtp5pZoHKd1GjhR9HLbmBAyR0BqmdnNZtl7T38zXEIia3AWQyIEY4t+A2cE+y3APgfKrh2jttGvXSW4uoC6KVUreCPCk5I9iQZ5or6kI3oafutEiLA+wZiR4+zK+R9lXyBlYB1wQ4ByPEY4P1YrLfRZrttHoaRy3MKSbZ8o8qK+TI5GQTnnIol6Ku2Vs+l2yzXMMckS90yvKiHCHahwxB5QJQIVfs0fwUn8Yn\/PvRYtQTsyd0TsvIM85BHII758EHxFF+7byrq436F+RkkuWekkxUN56fnhbHSo3qxoTky0UjnvKQtXfqpr3qvvpdstwFsV4UgNL8q2WIFr2KUKfKlEbeVSyUJivMgIIIBB6g8gj9Nd9y1KIT7qlolAePs1Zglhaw5P8BSOevBGBTq6DagEC2gAPUd0mDjpnjmince+vdyPOq1D2DyDbfRraNg8dvCjDoyxorDw4IGRUDXLC0ijeZrWBmzyTEhyxPUnHvqw92vnVR9JFwq26oDyzfYB\/wAqRnnGONtF4Rbkgh2dggaMukEKbsq2xEAYeIOByPdTkmgWn+C2\/wDkY\/8AhrrsmiR2kQOM7cn4nmjEU0Z8qmJpwjfWiSu3QKs9OhiJMUMcZPBKIqkj34HNAe2rqwSJlVud2GAOPAdenjVtlv41JrP9fue8uXcHjjHwArHr88Y4nCL5f8D9Pik5bmuDjT7KKMhlRAcdQoB+wdKkfsZATkwxEk85Rck+PhTFmM8\/VU9RXlcs5bup28UFt6D9totsw5t4f8mn6ql2+h22ebaE\/wD2o\/1U\/ZRkCiMSVjeSd9X+prWOHshBodo2N1rAcDAzFHwPIccDrUlOzlnjBtLfHUfgY+p6\/i+4VMtU4qQF8KYsk\/dkcI+xH07TYIc9zDFHu692ipnHTO0DPU0t9awyrtmjSRQc4dVcZ88EH3806Vx\/zNNbeetDdzfcm1VRCbs\/ZBTi0t8f4mPB\/wA2g+q6BahFItoBg9BEnj8B8Ksd2+FxQy\/BZMePUU1Tl0tiZwil0BVhpdpyj28JA5UGNMc9SOPHAqSdIsf8Ft\/8lH+qhUcuZcfwamZr0\/h+R+Qk+aOHqILeyQ+m2Pja2\/8Akk\/4aSazs2OWtoGPmYkJ4GB1HkAKj16tu\/6CNoSivI0UIihVHAVQAAPcBwK8dT91DK8ajySoO1E2bUvdUVr4+VMMabNJlNllFEg3rVybtqYNIRVHJh2osZ1RfAVydV91C6Wtm+QragidVPlXJ1NvdUHFeobmHaiYdRfzrg3r+dR69Q3MNIeN037405DIDjcxOfAGojrkGhsM+1sHwNcXxHXTjLy8Uue\/9HQ0umTW6a\/IvlvpETrnLfzjWaekRE9ZSCNi23hvcxPT7qt+n6oc7d2Aaqmp9lJ+9aaM96NxbGfb658etc3T6rK3WST\/APWasumjXpRZm0x4kUEZAAGRyOB9ld2PjUjsvqZK7ZMg+R4x59afu4UWQ7PokZx5HxrtaDWvLLZNcmPWaRYuYvgpvbInYMH8cdDQW4JI56+NWPtJBux7nBquqWZiCOAM1k13+8zTp+dOkTrZMKK964E8MmnUGeKjX9i2cKfnXL4cqZqppcD7a5JjgfcKZh7TzA+0BUZrOdAGQBjz+KGz5dc+NTr3T3ZFdowrN4p88Bl94H\/KnLDBK6RTe3KubLJo2v7\/ACFEotX9o5qh9nNyzBWBGTijvaB+72ovU8k+VZpwqVI1QlcbZZk1qL8ZgKm219G4wGrKzblzzIF+PSpyQyQbT3mVP4wPGf0VfyuLRVyb7F5v1IbB5FRL84X4iothqLSKA3VfH3UuqMdhpUeGVlymAYVxPj4\/rokahabAXkZ+PZzyeM+74+6p9ej8Ory2vqcbUxalZzXqWvGugZjk0ldGkIoMhyRTTCniKbZTVJIKGzSEV3tNe7s+VUphsl14V416tQs9iuZGxXROKjO+aVkntX1LJWL3hpRLTVeJ6DxPAHmfIVmeSSGUiFcTSK5IztNRpn3c+NTHvdwwV6eVRsc+zz7v1V52Ut0nJo7KVRSEtLsrww48xRaz1oqww\/FA5LoDPUeHIwaL6HbB4yZFBz03AZxQ296LwnRY70xyoJiQHBAOM+0Pf+ulR9zfAD31Vtc1SK3Xaoy3UDdkf0Co2jduouk0bKfNfaH666vhUUp75cGLxDKnHZENaxnDEDoQftoGqgZA5UjOf0UbGuWcucTKCR0bK\/fVeMiclSCehwc\/16VfxLH+JGafUposl45RO7Sf2qsUdurAdDx0qpDg0c0q55xmuPkj3R0cXPBNewZfos2PI4I+0cU9ENgyc\/Z9wFEbaYHiherygEKPH7qo5tdB+zgj6Va7pw\/vz8zRzWLEd62RwVGPj7q47PW460b1CPP80EH31WLbbYKXQz670RWIUsUP74+\/3\/KikGgArgSDJBzgghyTnkD49asB0ksNynr4eFd2unlOQAD7gK0+bLbXYW8cd25dQZpOlGPqaTVU9nA86OTtgYPWgGrW5ZAwJ+l\/X5UhcsO2+AU9lh4F56liPDOOv20U9WFKlvhsnqFA\/Sf0fVTuwedel8MwuOLc+5yPEsi3qEf+qGvVxXu5WuyB51yStdKkc62J3a17C0hdaTvloWici8eVI2PKuTcCuGuKq2g0zh64Jrl7imjOfKkSmhiTC\/qy+dL3SV1tSm7goBxWx0lYlDNyyeFRQVrokUB7V696ugC\/tj5wcdAOp+0ViyTvkckSdd12O2XJGXP0V8T8fIUH7P37SF7iZuWbuYwOAg2l5MfEBFz1wT51TJLh5naWRiT5n+v2Vd7bST+xkTJ9OOQzkDqynhh8dmP5tZc1zi0Mg0pJhomPjA+2oLzFG3IGQqcqSCMEcjmooyoGTkHnIqZbXpXjIIrhbNro7SakuCbYzRlgXw2eST4miN5eWyAylFAUfLPhx4mhEa275LDn3Ej7qC9uL3ZHbqiYjcswP7\/aQv1ZLDPiQfKm4cbm6QvLNY42wHqly8kryMpG45xjoPAfDFD3jPUA\/V1ogsvGQetNyNXXUVHg47du2QO8o3oR9hj7x9g\/pqty5DEe+jmjTYTHvP6KXqPkG4F6w4stSrKXBodG+Tinoh7VcqUTqwdFqhucLnrQq51LupNzjOf64qXbXS7cEgZqNe6aX5HP11njFbvUaZT44LH2c1aLHJIyasFzexuvst7QHT4VmFtp8iOFz99WbSdFCyCUux45BJI93Xp8KbsStIEXdWWCDU8D9Fek1HPSoF3BgnHlUISkHxpe59BrUepPvLgn4\/HwpxCNvCk7QfpDCg+fvoerFjx18M9KnTzyyLtbA88eNadLpJ5n6Vx7mXLqYYuW+fYHyzEknPU00W99S\/U\/M171MedenjjcVS6Hn5T3NtkMtSE1O9WWvdylW2sruRAzSZohtT3UhZPdQ2\/Ulg85pCp8qnmdKbN0tUaXuWsHmM+Rr3qzeVFLWVWNN3d2FbGKTOC62XixqCSnJGzUSI81JrRjk2qFtUznbWcekFybpVPQIMfAnn55B+ytJFZl2vlD3bsCCAFUEeYHP2kj5UvMkohiBHOAF8K1js5N+CVfID7qyoir72avAY0I8OD8v6MVmQW6Hu0dt3UZKLlMk4HVM4JP5PB499VOB52PCgDwzkfZWllwRnwqNbdnoZXLJwRyYhwvvZfHHmvh8OiHp7b2pW\/c0xzUuX+hC7G9m3uG\/CMSoPOBhf8AzH3dKi+mK3UXawIMLFaR7FHhh5CfrAFan2ZjCqFwAB5cAVnfpTaOS+iKcyGN9\/kI16Z\/zqdHAsWP6iZ5XORnGnv7OPKpD1C039AqYwqNFAbdH2qlacx2k+Gftx\/RUS8+l8qJ9mou87yPxKhl\/KU\/p3UHDdGi8JbXZPtpc4NEFb2gPOgYypOeOeR76K2kwLrXMywrk6kJ3wSLhZB9BgM+B\/rxXo768Q4OAPA5\/o4orfWBZAy+NR7a9dPZeJmHuFJxzTVUjWopd2jte1IGBPH5ZZfEefHSjlr2ihI9hxg+B4oXFeQMeYGz+SRRCKxjk52KvkMc0JuC\/Mbt462GILoSAHNMyDFRbS37skAnFeuZwPHjqazPllenUe73HIrxumqj3Pal+9Yxkd2OACM5A8fnU2HtP++j+o\/rr0ej\/CwqLODqpqeVstPrDedcGZvOgsPaKI9dy\/EZH2USguUflWB+BrXvvuIpD5kPnXJY16vUSCGkpaSgyI5Nc10aSqBJWndTTGofTNP6d1pnUB7dDJ8paJxF1qVUWLrUiaUKpZjgKMk+QAyadi6C5ALtdq5hj2IfbfxHVV8T8T0Hz8qztjU\/V78zSNI3j0HkvgKGM3NZsk90rClQtTtH1IxN19k9R+n41AzXBaqJ0FqzS7G\/yAQcg9KN2U2XUqNrBgc9MAdayaw1V4uhyP3p6fLyq5aD2xg6Ts68geyobj4kimJQk+eAW0jUbe5O3anzPu\/RWadrrZ4xcTvwzgRg+OHPAH8gE1eou3GlQw7kn7x8fRZW3k+8bcCsw7V6\/wCtOSm4KW3+11Z8bQcdAAOAPjnrV8zi0kisLAFqgX4+NPMahxSmpYbNIZYG6gOR8Kkdn7ru542zxuwfg3B++m9QHSoqUUwtGja5oneDvIx7Q6j98P11VuV+R4rQezt13sEb+JUZ+I4P2g1E1\/QN2ZIh7X4y+fvHvo58G5b4l8OWvSyJoWuArsc80bS7T3H41RfV8fL6xTy3EijG76640sCfMTrw1DiqkjSbaOF1yAM15jHGMkg1ntvqko4DDFT7fvJD7TcUp4ZWO+Ij2Cuoawq5Y8AVRdc7RtNlFyqePm36hVu7aaQIbOAnIeZ2IH\/w0HU+ZJYH5Cs7mhIrfp9KoeqXU5mp1UpPauh1A1EInoYjVLgatqZiJ4Ndo5HIJB93FMKa7zjrR4AFrfXJV4zu+IzRTTteVm2SDYT0P4p\/VVZSQHpSyKcZx8D50Y5OyYarqaMLNjSixNB+yutlk7tuWUcHzX+ijbXhpcs7XBvx6eE42jn1A+dKLD31ybpq5Nw3nSZahmmOkhXQl29sFNcXFspOaiGdvOkMh86TLPJj4aaC7DUKHPSoHbNylo\/BG4hfrOT9gNXH1lR0X7Kq\/pIn32Z9nG2RD96\/7QruvHsxs85utmVZpuWvMea8TWAYJSGvA1wTRoIppKQU5GtQg\/axeJqSZOPmKZHAzShuB8fuqLoAil8N8z99E7Zs0HLc5ohbNUojJF9bjA5ob3ZBo6q7lIoaV8D4cUWgWWbsNrSxo8chIw2V4zweo+sfbV0t9ahYcMfmDWa9n1BnVWGQeP1Vr2iW6pjCgfIU\/C5PhdCkqB1x2c9aG+NSG\/fEbQ3xzjPxquXmgyQkiQYI8Pd5jzFa9A2RVY7d9rLSFDAyd\/MfxFOO797MOVOPAc\/KqavRwa3XTH6fUyi9rVoodvbKTwtX3sb2TMuJHBEXX8v3D3e+q92M7QaeJgs8RjDEYZ2EiA+R4G0e85rc48YGMYxxjpisWPSKPMnZoy6pv0xVGJ+neYLPaxjosTkAeGWA\/wBms0hBYgADnjnAHzJ4FXP05XRbVNvgkCAfElmP3iqTHMFXPl5U3I+TLFcBm40m1AxJMd46mFA6r8XLKG\/kgj30GuLbu24O5fBsYz8Rk4PzNJ3xyCSP4Djp8DUuCIsCNuB5eR8ceanOR5HI6GqRbXUtVjcXTJqKJCxqXLGVyp8qGQkjn5UyfK4Kos0WoRwIBCoeTGWkZAcE4OI1bgY6byMnwx48T65NKNskjyITuUMxYE45ADfRb\/lxVeMvIOcH8Vh0+BqZarnO4Yz1A6ZHRh5UpxouFNFl2TIQeCcfENV4NUiKMHkcHOR8ev31dInyobzANUyNSVm7RPho7pKWkpDOiuh4ikpa8aXJDYFnMIoT2mtEktZosjcyHbz+MOV+0CgEuoSHqWPzqO0rHrW\/J46mqjD9WcKPhtdWZiWrwapWswhJnUdN2ePfzj5EmoBpsXuSZnlHa6FJpM1evRv6NpNUV5TMIYI32Fgu92fAJAGQAAGXk+Y4NHO1voa7i2ku7S675Y0LsjKMlVyXKspwSAD7OPA81YqZUDT0I5q+ejr0WSajD61LN3EGSEwu55NvDEZICKCCM88g8eNSe3XooeytjeW1x6xAoDOCoDhDgBwVJDryCemBzzzUIZ9I+TgVxK\/B+GPrrUuzPoYa6tYbn18J30avt9X3bdwzjPejPxwKh9l\/RHJdm6VrsRer3L2\/7Rv37MHf+2DbkMOOetSgUZhnmptsau8\/orK6rHpnrf04DN3vc9OWG3b3nP0Ou7x6Ue1X0JPbwSz\/ALIbu6jd9vq2N2xS2M96cZx1qMhn1u9QmJ75lPjyKJdmdPa7uLe2VxGZmxv279vslvo5GennWlN6CHLB\/wBkRkf\/ACv\/AParAoym3m2OrjqrA\/Uc\/orbtMIZVZejAEfAjNU3RPRe9zp63\/roTdE0nd+r5xt3cbu8H73rijXY3QtQfSo7yC7j\/anZIGtg2djMAm\/vAeduM44zTMU1F8glFsHekDtpNEpt7XKHpJLjDDjomen5X1edZVFcHdkknnJyeSfHnxPvrT9U7NXF7ph1iS6RfwTP3C2+BhXKhd\/eZPTqRXWgehRrq1gufX9nfRrJs9X3bdyg4z3ozjPXAqmSTm+S0FtKOjcHy8c\/Sz15Hj489fhWv+hbtYzg6fOxLIu6Ek8mPxT37eMe74VnHafs41herZvL3\/4JXEmzuiB7WV+k3GFPj41duxnoyuStrqMWoiOR4llVTbBwveICVP4UbhhsdBS4qi83fQrfpnXGrFvAxxn6sg\/dVIvrkmRmJwSzHgcZJPBFa16QvR\/cu8NxPfrI8k0Nv7NqIwokk27uJTnG7OPHzFCdZ9DzQzWsXrwb1mUx7vV8bNsTyZx3p3fQxjjrUlG3aKLhGc255ORgeI6q3vorBPVj170XNaXllaC8D+uM67+4293sCnOO8O7O7zHSntb9GM1teWdr63vW7Z173uMd2yDOCveENkHjkdD5UuWNvoWTK\/MocDHUdP1ULuUO1lHHIOPeAR9eCaut72Ali1S3031wHv4mk73uMbdofjb3nOe765HWnNa9HssV\/Z2BvFY3IkPe+r4Kd2hbG3vPbzjzGKMIyXD6EZmSt4fX5H5eFToZ8Vd9X9GEseo2tg1yrLdLIyz9xgq0SMzLs7zngJzu\/G93I7V\/R1PFqUemQzCZ5IxJ3hTu1RctuLAM3ACfMkCjKFksFW9zVh0rVsYVuV8\/L+irV\/6kgF2LqJ78DdgxLtxk49kNuAyCM5rOL22ltp5LacBZYm2sFOVOQCrL\/BZSCM880nJjaVjceRxdovqtkZHSvVWNK1YpweV8vL3irLHIGAYHIPjWOcmup3dLKGaPHX2Fr2aWkpLnbN0cKQB78eLCla4QKXJbYOCwU7QfeelGD2qgUoYrOMd2coTyR+uhHaztY89vJF3ccSOQWVBjLAg5+vFZMeOcpJba590cGWqXYz\/UGDOxHTcSPhmoJNSXNNMK9JFUqOa3bs3X+x67Qw+ryWLOqzCVpEU8F0ZVzt\/fEFWyPLFL2zstT0qyeKy7qawCyBg0ZM8SSMxbdhsOoLn2gOPEcZoT6Euxthe2sk1zEXnjuCFYSzRsq7EZP2txj2t+D1+qtN7Pi4\/Ytl1EfhAkyybyCTGC4UsRwfweOfHqeauAFejxQOz0WP8AB5T9bSE\/fSEf9mP\/AAz\/APXpPRfJ32gRKnLd1NHjjO7c4A92cg\/MV3rCG27NtHP7DJp4jYEjiQxBAvx3ECoQKdgJwmk2LHxhhX5sVUfawonp9ots8mAP+k3LP8WMIJ\/NGqjaXfc9nLeb+9wQP\/NkRv0VYe0d1i80yPP07iVviFs5x97ioQq1\/wDuqg\/iJ\/0pKT0y9k57lGu47ju47e2kLx+3+E2guR7JA5HHNLf\/ALqoP4if9KSufS92Vv7t1e1k2wrCwlQzPGG5JOVUYb2eOahDK\/Rof+tLH\/G\/7tq2j0p9kLi\/WFoLowdwJS2N\/t7ghH0SOmw9fOsW9GTZ1OxPTMv+7ar\/AP2RF\/NH6iIpZIwwuNwR2TdgRYztPPU9fM1AItPYP9z8X8Vk\/wBupHob\/tNafkv+eeo\/YP8Ac\/F\/FZP9uhvY6+aDswk6fSihkkX4rM7D7qgQn2r0kWuhXkC42rHMUA6BGlZ1HyVgPlUrs3YtPoUECPsaWxVFfn2S0WAeOeCc056Q7lZdGupUOUe2LKfNWAIP1EUzoFrJLoEMULbZXsAsbZK4cw4U5HI5I5qEMH7SaDJY34t7ibvyFjZnO7lCeU9ok+Y+dbL6PbSGG\/uIrbesPqsDBGkeQKS8gON7EgYVeKxbtNoN3Z3aR3r95MyLIG7xpcqGKjJceBVuK2j0f4\/ZG5x0Npbke\/25ai7kfYqHa6Jzr4fc+xdRsU27m2gmOJvo5x4E9K0ztd\/7Zpf8af8A1Was07Y3qprLhiAo1KwkYnoFWGPJP86tV7SWEklzp7ouViuGaQ8eypt5VBP8oqPnUIVn0hf230T\/ABk\/+jHV01jSxMYGP0oJllX44ZG\/zHb54qkekGZTrWipkbg8zEeIDBAD8yrfUatTatt1MWpPEtr3i+W6OUgj4kSA\/wAmoQqevfuo0\/8Aikn3TU\/2t\/dBpH5Fz+aamNe\/dRp\/8Uk+6an+1v7oNI\/IufzTVCFx1PSRLPazfjW8jsD4lXgkjI+t0P8AJqnEf9qP\/Df99VjtdY\/60nsyf\/dopkHj9ORJD+ZqsTXCr2pQMQC+n7Vz4t3jNgfyUY\/KoQd16e9h1h57Sx9bHqUUbjv44NhM0rA+3nd9E9BWQekm+nk1GSS5tvVZSkeYu9WbgKQDuQAcjwrforW4GrvLhvVWskXORtMyzORx1yEY\/XWN+l9QdXmB\/vUP+iaDVqiFNt7mjml6oUPXI8R\/XxquTWxXleR91dW9zWSePsxuPK4NSi+TS4J1ddynI+6nDVL03UihyD8fIirXZXiyruU\/EeVYMuNxPSaPWxzKpcS\/kqooTr0x9lB8T+iiy0C1c\/hT+SKfp43kPLgtjXBpxzzTf9fsrpACOgdoLqykMlpM0TEYbGGVgOm5WBVseGRxmi2v+kLUryMwz3J7tuGRFSMN+UVGSPcTj3VVsU4RijYAv2a7V3tgW9UmaMMcshCujHz2sCM48Rg132m7Z39+At1OXQHIRVVEz54UDcevJzjJoK1eQc0SBqTthfm19SNwfV9gTu9keNg6DO3d4Dxp+TttqMksMz3TGSAOIm2R+xvUK\/4uDlQBzmgBFdLQshYT2qvmuVvTdN6wqd2JNkeQnPGNu38Y+GeaJSdv9VYFWvnIIII7uHoRg\/iVV4qeFFAsc0+d4HjlhcpJGco4Ckg4I6MCDwTUrtDrl1ebDdztN3e7ZlUXbvxu+goznavXyqIK4YcUSErTe3WoxRLaJdMsAUoECRHCnORkpnxPjT8HaK8S19SW5YW20oY9kf0WJLDO3dySfHxqqSfS+dGmHNALJ9\/2vvRAbJblzbd2Iu7ZYs7QACuQmcDp1zXenekHVIYkhiu2WONQqLsiOFAwByhJwBVfuh7T\/L9FJDVW6GRjYR1TXLi8lWW7m7xwmwMwVdqAk49kAdSffzWndi7WWSBLm3upbeTuxBJsSNgwjJK8SKcYD+FY\/EevxrZ\/Q+c2kuefwufmVGfuFXxcyplZ8RKT2zhPfzGSV5pHK947hFLFUCgYQADAAHTwrnSvSLqsKd0l2SqjC95GkjKPczDJ+eamdr1Hfzf4xvvqpAe0aon6mV7BJ9VuGuBeNO5uQwYSttJBAIAAI2gAE+zjFSbntLfPcR3TXbmeJSsb7YhtVgQwwFwchj1FDwOK8aZQLJ0\/aS9e5ju3unNxGpRJNkWVU5yMBcH6bdR411d9pb+S4huXu2aWEMI32RAoGGG4C4OQfEULlFcp1qbSBSXtNfesi89bf1gJ3Yk2x\/teSduAu3GTnpUDUdeuZp1ubid2nUKElG1GTaSVxsA8WNNGm5BVJr2CmXhO2188IkuNQkAU5iWKOFHd1P0pDtwUHljk+FVfUNTkuZjNLK80rAKXZVXhfoj2AB5+FBZXOAMnA6e7xrqFzjbng+H9en6aUt3Wy3AUV68um94cIQHPQHgN7vca4hvpIiQjcNjO4B88fwwf3xopDrE2xm3DIdRnYmeQ2fxaZ80QRajLkAm4aIkNkMOCDwQf0fGu7XUjkkylfLaSPuz7qtvaPUZBad6CN+F9rYh8R5jHjVF\/Z64HshxgfwEz9e3J\/wCdIgozRqz4nhklfXlH\/9k=)"}}