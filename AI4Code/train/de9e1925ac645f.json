{"cell_type":{"963a14ee":"code","cc24df94":"code","023a4299":"code","525a136a":"code","8c7749d5":"code","f510ce6a":"code","7f3f1e36":"code","aa8e086c":"code","a4ee3812":"code","b19cdb7d":"code","7f96a93e":"code","458945d9":"code","c7c69c09":"code","950e9745":"code","e10f6952":"code","72982c54":"code","a31f8660":"code","1ef07a50":"code","50bfd449":"code","945c7067":"code","81c6d8ef":"code","7bf80cd2":"code","7106b790":"code","e03e0024":"code","e0d97ac3":"code","1c569ca3":"code","6bec13c7":"code","a88ac298":"code","a9cf1f1f":"code","4fe06417":"code","4dc6a93b":"code","4e2870f8":"code","6f115ba4":"code","2d5c82fd":"code","2387a024":"markdown","9a2af0a6":"markdown","1a254698":"markdown","68822bb1":"markdown","444e8a64":"markdown","246c3d5e":"markdown","a7241dd3":"markdown","cc40dc90":"markdown","bb91e0bb":"markdown","6b0c09c9":"markdown","114555b1":"markdown","304082e2":"markdown","6d03998d":"markdown","f8b12f3e":"markdown","caf16817":"markdown","27e0c048":"markdown","9ed48296":"markdown","e6963774":"markdown"},"source":{"963a14ee":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn-darkgrid')","cc24df94":"df = pd.read_csv(\"..\/input\/imdb-top-250-lists-1996-2020\/imdbTop250.csv\")\n\ndf.head()","023a4299":"df.IMDBlink.nunique()","525a136a":"df.Title.nunique()","8c7749d5":"df.drop_duplicates([\"IMDBlink\"])[\"Title\"].value_counts()","f510ce6a":"df[df.Title == \"Drishyam\"]","7f3f1e36":"df['Genre'] = df['Genre'].apply(lambda x: x.split(','))\ndf","aa8e086c":"gen = pd.DataFrame(df['Genre'].values.tolist(), columns=['Genre1', 'Genre2', 'Genre3'], index = df['Title'])\nfin = df.merge(gen, on = 'Title').drop_duplicates(['IMDByear', 'Title', 'Rating'])\nfin.drop(\"Genre\", axis = 1, inplace = True)\ndf = fin.sort_values(['IMDByear', 'Ranking'])\ndf","a4ee3812":"remove_whitespaces = [\"Genre1\", \"Genre2\", \"Genre3\", \"Cast1\", \"Cast2\", \"Cast3\", \"Cast4\"]\n\nfor col in remove_whitespaces:\n    df[col] = df[col].str.strip()","b19cdb7d":"g1 = df['Genre1'].unique().tolist()\ng2 = df['Genre2'].unique().tolist()\ng3 = df['Genre2'].unique().tolist()\ngenre = set(g1 + g2 + g3)\ngenre = [x for x in genre if str(x) != 'nan']\n\nc1 = df['Cast1'].unique().tolist()\nc2 = df['Cast2'].unique().tolist()\nc3 = df['Cast3'].unique().tolist()\nc4 = df['Cast4'].unique().tolist()\ncast = set(c1 + c2 + c3 + c4)\ncast = [x for x in cast if str(x) != 'nan']\n\ndf['Director'] = df['Director'].str.replace('Ethan Coen,  Joel Coen', 'Joel Coen,  Ethan Coen')\ndf['Title'] = df['Title'].str.replace('The Lord of the Rings', 'LOTR')\ndf[\"Title\"] = df[\"Title\"].str.replace(\": Episode\", \"\")\ndf[\"Title\"] = df[\"Title\"].str.replace(\" or: How I Learned to Stop Worrying and Love the Bomb\", \"\")\n\ndf.head()","7f96a93e":"round(df.describe(), 2)","458945d9":"df.Title.nunique()","c7c69c09":"all_time = []\nmovies = df.Title.unique().tolist()\n\nfor mov in movies:\n    if df[df.Title == mov].shape[0] == df.IMDByear.nunique():\n        all_time.append(mov)\n\nprint(len(all_time))\nall_time[:10]","950e9745":"file = open('all_time_in_list_96-21.txt','w')\n\nfor element in all_time:\n    file.write(element)\n    file.write('\\n')\nfile.close()","e10f6952":"last10 = []\n\nfor mov in movies:\n    if df[(df.IMDByear > 2011) & (df.Title == mov)].shape[0] == 10:\n        last10.append(mov)\n        \nprint(len(last10))\nlast10[-10:]","72982c54":"file = open('always_in_list_decade.txt','w')\n\nfor element in all_time:\n    file.write(element)\n    file.write('\\n')\nfile.close()","a31f8660":"last5 = []\n\nfor mov in movies:\n    if df[(df.IMDByear > 2016) & (df.Title == mov)].shape[0] == 5:\n        last5.append(mov)\n        \nprint(len(last5))\nlast5[-10:]","1ef07a50":"file = open('always_in_list_last5_year.txt','w')\n\nfor element in all_time:\n    file.write(element)\n    file.write('\\n')\nfile.close()","50bfd449":"vis = df[df['IMDByear'] == df['Date']].sort_values('Ranking')\nprint(len(vis.Title.tolist()))\n\nvis.Title.tolist()[:10]","945c7067":"direc = []\ndirectors = df.Director.unique().tolist()\n\nfor director in directors:\n    temp = df[df.Director == director].groupby(\"IMDByear\").Title.count()\n    if temp[temp >= 3].shape[0] == df.IMDByear.nunique():\n        direc.append(director)\n        \nlen(direc)","81c6d8ef":"direc","7bf80cd2":"stars = []\n\nfor star in cast:\n    temp = df[(df.Cast1 == star) | (df.Cast2 == star) | (df.Cast3 == star) | (df.Cast4 == star)]\\\n    .groupby(\"IMDByear\").Title.count()\n    if temp[temp >= 3].shape[0] == df.IMDByear.nunique():\n        stars.append(star)\n        \nlen(stars)","7106b790":"stars","e03e0024":"plt.figure(figsize = (14, 8))\n\nmetascore, = plt.plot((df.groupby(['IMDByear'])['Score'].mean()) \/ 10, color = 'red')\nimdbrating, = plt.plot(df.groupby(['IMDByear'])['Rating'].mean(), color = 'blue')\n\nplt.legend([metascore, imdbrating], [\"Metascore\", \"IMDB Rating\"])\nplt.title(\"Metascore vs. IMDB Ratings\")\nplt.xlabel('IMDB Top250 Year')\nplt.ylabel('Rating')\nplt.xticks(rotation = 90)\nplt.show()","e0d97ac3":"plt.figure(figsize = (10, 6))\nplt.plot(df.groupby(['Date'])['Title'].nunique())\nplt.xticks(rotation = 90)\nplt.xlabel('Years')\nplt.ylabel('Number of Movies')\nplt.title(\"Number of Movies by Release Year  \\n (for the movies that are in the list from 1996 to 2021)\")\nplt.show()","1c569ca3":"plt.figure(figsize = (10, 6))\nplt.plot(df.groupby(['IMDByear'])['Director'].nunique())\nplt.xticks(rotation = 90)\nplt.xlabel('Year of IMDB Top250 List')\nplt.ylabel('# Directors')\nplt.title(\"How many Different Director's movie in the IMDB Top250 List Over Years?\")\nplt.show()","6bec13c7":"plt.figure(figsize = (10, 6))\nplt.plot(df.groupby(['IMDByear'])['Gross'].mean())\nplt.xticks(rotation = 90)\nplt.xlabel('Year of IMDB Top250 List')\nplt.ylabel('Average Gross (Million $)')\nplt.title('Average Gross for IMDB Top250 Lists')\nplt.show()","a88ac298":"num_movies, title_movies = [], []\nfor director in directors:\n    \n    temp = df[df.Director == director]\n    num_movies.append(temp.Title.nunique())\n    title_movies.append(str(temp.Title.unique()))\n    \ndirector_movies = pd.DataFrame({\"Director\": directors, \"Number of Movies\": num_movies, \"Movies\": title_movies})\n\ndirector_movies[\"Movies\"] = director_movies[\"Movies\"].str.replace(\"[\", \"\").str.replace(\"]\", \"\").str.replace(\"\\n\", \"\")\ndirector_movies['Movies'] = [''.join(map(str, l)) for l in director_movies['Movies']]\n\ndirector_movies = director_movies.sort_values(\"Number of Movies\", ascending = False)\ndirector_movies.head(15)","a9cf1f1f":"plt.rcdefaults()\n# plt.style.use('dark_background')\n\nplt.rcParams['figure.facecolor'] = \"#e3e3e3\"\nfig, ax = plt.subplots(figsize = (20, 10), facecolor = \"#e3e3e3\")\nax.set_facecolor(\"#e3e3e3\")\nsns.barplot(x = 'Number of Movies', y = 'Director', data = director_movies.head(30), color = \"#e3e3e3\", linewidth = 0.5, edgecolor = \"#101820\")\n\nplt.title(\"Directors that have most movies in the IMDB Top250 Lists \\n (for the lists 1996-2021)\")\nplt.xlabel(\"Number of Movies in the Top250\")\n\nfor rect, label in zip(ax.patches, director_movies.Movies):\n    \n    bl = rect.get_xy()\n    x = 0.005 * rect.get_width() + bl[0]\n    y = 0.60 * rect.get_height() + bl[1]\n    \n    ax.text(x, y, label, ha = 'left', va = 'baseline', rotation = 'horizontal', fontsize = 7)\n\nsns.despine(bottom = True, left = True)\nplt.show()","4fe06417":"num_movies, title_movies = [], []\nfor star in cast:\n    \n    temp = df[(df.Cast1 == star)|(df.Cast2 == star)|(df.Cast3 == star)|(df.Cast4 == star)]\n    num_movies.append(temp.Title.nunique())\n    title_movies.append(str(temp.Title.unique()))\n    \nperformer_movies = pd.DataFrame({\"Star\": cast, \"Number of Movies\": num_movies, \"Movies\": title_movies})\n\nperformer_movies[\"Movies\"] = performer_movies[\"Movies\"].str.replace(\"[\", \"\").str.replace(\"]\", \"\").str.replace(\"\\n\", \"\")\nperformer_movies['Movies'] = [''.join(map(str, l)) for l in performer_movies['Movies']]\n\nperformer_movies = performer_movies.sort_values(\"Number of Movies\", ascending = False)\nperformer_movies.head(15)","4dc6a93b":"plt.rcdefaults()\n# plt.style.use('dark_background')\n\nplt.rcParams['figure.facecolor'] = \"#e3e3e3\"\n\nfig, ax = plt.subplots(figsize = (20, 10))\n\nax.set_facecolor(\"#e3e3e3\")\n\nsns.barplot(x = 'Number of Movies', y = 'Star', data = performer_movies.head(30), color = \"#e3e3e3\", edgecolor = \"#101820\", linewidth = 0.5)\nplt.title(\"Stars that have most movies in the IMDB Top250 Lists \\n (for the lists 1996 - 2021)\")\nplt.xlabel(\"Number of Movies in the Top250 List\")\n# plt.yticks(color = \"#A61C00\", fontweight = \"bold\", fontsize = \"small\")\n# plt.xticks(color = \"#A61C00\", fontweight = \"bold\")\nfor rect, label in zip(ax.patches, performer_movies.Movies):\n    \n    bl = rect.get_xy()\n    x = 0.005 * rect.get_width() + bl[0]\n    y = 0.60 * rect.get_height() + bl[1]\n    ax.text(x, y, label, ha = 'left', va = 'baseline', rotation = 'horizontal', fontsize = 7)\n\nsns.despine(bottom = True, left = True)","4e2870f8":"print(len(all_time))\nall_time[:10]","6f115ba4":"ranks, differences = [], []\n\nfor movie in all_time:\n    \n    temp = df[df.Title == movie]\n    difference = temp.Ranking.iloc[0] - temp.Ranking.iloc[-1]\n    differences.append(difference)\n\nchanges = pd.DataFrame({\"Movie\": all_time, \"Change\": differences}).sort_values(\"Movie\")\nchanges","2d5c82fd":"total_figure = len(all_time)\ntotal_cols = 8\n\ntotal_rows = total_figure \/\/ total_cols\ntotal_rows += total_figure % total_cols \n\nposition = range(1, total_figure + 1)\n\nyears = df.IMDByear.unique().tolist()\n\nplt.style.use(\"dark_background\")\n\nfig = plt.figure(1, figsize=(30, 25))\n\nfig.suptitle('Rank Changings for the Movies that are always in the IMBD Top250 \\n', fontsize = 24)\nfig.text(0.76, 0.33, \n         \"*These are the movies that are always in IMDB Top 250 Lists from 1996 to 2021.\" + \n         \"\\n\\n*For a movie,\\n     If its rank in 2020 is better than the rank in 1996, color of its graph is blue i.e. 12 Angry Men\" +\n         \"\\n     Else, its color is orange i.e. 2001: A Space Odyssey\" +\n         \"\\n\\n*Movies were listed in alphabetical order.\",\n         style = 'italic',\n         color = \"#8A8C8B\")\n\nfig.text(0.91, 0.33, \"Graph: kaggle.com\/mustafacicek\", color = \"#444544\")\n\nfor movie, k in list(zip(changes.Movie, range(total_figure))):\n    \n    temp = df[df.Title == movie]\n    ranks = temp.Ranking.tolist()\n    \n    ax = fig.add_subplot(total_rows, total_cols, position[k])\n    \n    if int(changes[changes.Movie == movie][\"Change\"]) < 0:\n        ax.plot(years, ranks, color = '#F1920E')\n        \n    else:\n        ax.plot(years, ranks, color = '#0E6DF1')\n    \n    ax.set_title(movie)        \n\nplt.tight_layout()  \nplt.show()","2387a024":"We can increase the number of examples. These are just basic examples.","9a2af0a6":"**How many different movie was entered in IMDB Top250 lists from 1996 to 2020?**","1a254698":"### For Stars\n\n**Stars that have most movies in the IMDB Top250 Lists:**","68822bb1":"Seperating column Genre","444e8a64":"We have two movie with the same name, Drishyam.","246c3d5e":"# 3. Simple Graphs","a7241dd3":"**Movies that are come out and enter the list same year:**","cc40dc90":"Getting unique genres and stars,\n\nEditing long strings for better visualization","bb91e0bb":"###  For Movies\n**Rank Changings for the movies that are always in the IMBD Top250 List**","6b0c09c9":"### Stars that have 3 movies in the IMDB Top 250 Lists From 1996 to 2021","114555b1":"# 4. A Little Detailed Visualizations","304082e2":"### Directors that have 3 movies in the IMDB Top 250 Lists From 1996 to 2021","6d03998d":"### For Directors\n\n**Directors that have most movies in the IMDB Top250 Lists**","f8b12f3e":"**Movies that are always in the IMDB Top250 lists from 1996 to 2021?**","caf16817":"# 1. Loading Data & Editing Some Infos","27e0c048":"**Movies that are in the IMDB Top250 lists for the last 5 years:**","9ed48296":"**Movies that are in the IMDB Top250 lists for the past decade:**","e6963774":"# 2. Some Queries"}}