{"cell_type":{"aab61160":"code","ca5c5ec2":"code","179e9f50":"code","10c4606e":"code","232ff4c1":"code","4b1a4463":"code","1f02f05c":"code","2b43896c":"code","a41db401":"code","40a2e84e":"markdown","e05d07e5":"markdown","b7413777":"markdown","b06277c3":"markdown","7b559376":"markdown","6c2ce4a7":"markdown","483abfb3":"markdown"},"source":{"aab61160":"import numpy as np\nimport pydensecrf.densecrf as dcrf\nfrom skimage.io import imread, imsave\nfrom pydensecrf.utils import unary_from_labels, create_pairwise_bilateral\nfrom skimage.color import gray2rgb\nfrom skimage.color import rgb2gray\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom tqdm import tqdm\n%matplotlib inline","ca5c5ec2":"def rle_decode(rle_mask):\n    '''\n    rle_mask: run-length as string formated (start length)\n    shape: (height,width) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    s = rle_mask.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(101*101, dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(101,101)","179e9f50":"\"\"\"\nreading and decoding the submission \n\n\"\"\"\ndf = pd.read_csv('..\/input\/experimental-tgs\/submission_experiment-100.0.csv')\ni = 0\nj = 0\nplt.figure(figsize=(30,15))\nplt.subplots_adjust(bottom=0.2, top=0.8, hspace=0.2)  #adjust this to change vertical and horiz. spacings..\n# Visualizing the predicted outputs\nwhile True:\n    if str(df.loc[i,'rle_mask'])!=str(np.nan):        \n        decoded_mask = rle_decode(df.loc[i,'rle_mask'])\n        plt.subplot(1,6,j+1)\n        plt.imshow(decoded_mask)\n        plt.title('ID: '+df.loc[i,'id'])\n        j = j + 1\n        if j>5:\n            break\n    i = i + 1","10c4606e":"#Original_image = Image which has to labelled\n#Mask image = Which has been labelled by some technique..\ndef crf(original_image, mask_img):\n    \n    # Converting annotated image to RGB if it is Gray scale\n    if(len(mask_img.shape)<3):\n        mask_img = gray2rgb(mask_img)\n\n#     #Converting the annotations RGB color to single 32 bit integer\n    annotated_label = mask_img[:,:,0] + (mask_img[:,:,1]<<8) + (mask_img[:,:,2]<<16)\n    \n#     # Convert the 32bit integer color to 0,1, 2, ... labels.\n    colors, labels = np.unique(annotated_label, return_inverse=True)\n\n    n_labels = 2\n    \n    #Setting up the CRF model\n    d = dcrf.DenseCRF2D(original_image.shape[1], original_image.shape[0], n_labels)\n\n    # get unary potentials (neg log probability)\n    U = unary_from_labels(labels, n_labels, gt_prob=0.7, zero_unsure=False)\n    d.setUnaryEnergy(U)\n\n    # This adds the color-independent term, features are the locations only.\n    d.addPairwiseGaussian(sxy=(3, 3), compat=3, kernel=dcrf.DIAG_KERNEL,\n                      normalization=dcrf.NORMALIZE_SYMMETRIC)\n        \n    #Run Inference for 10 steps \n    Q = d.inference(10)\n\n    # Find out the most probable class for each pixel.\n    MAP = np.argmax(Q, axis=0)\n\n    return MAP.reshape((original_image.shape[0],original_image.shape[1]))","232ff4c1":"test_path = '..\/input\/tgs-salt-identification-challenge\/test\/images\/'","4b1a4463":"\"\"\"\nvisualizing the effect of applying CRF\n\n\"\"\"\nnp.random.seed(100)\nnImgs = 8\ni = np.random.randint(1000)\nj = 1\nplt.figure(figsize=(30,30))\nwhile True:\n    if str(df.loc[i,'rle_mask'])!=str(np.nan):        \n        decoded_mask = rle_decode(df.loc[i,'rle_mask'])        \n        orig_img = imread(test_path+df.loc[i,'id']+'.png')\n        #Applying CRF on FCN-16 annotated image\n        crf_output = crf(orig_img,decoded_mask)\n        plt.subplot(nImgs,4,4*j-3)\n        plt.imshow(orig_img)\n        plt.title('Original image')\n        plt.subplot(nImgs,4,4*j-2)\n        plt.imshow(np.fliplr(np.rot90(decoded_mask,k=3)))\n        plt.title('Original Mask')\n        plt.subplot(nImgs,4,4*j-1)\n        plt.imshow(np.fliplr(np.rot90(crf_output,k=3)))\n        plt.title('Mask after CRF')\n        if j == nImgs:\n            break\n        else:\n            j = j + 1\n    i = i + 1\nplt.tight_layout()","1f02f05c":"\"\"\"\nused for converting the decoded image to rle mask\n\n\"\"\"\ndef rle_encode(im):\n    '''\n    im: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels = im.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)","2b43896c":"\"\"\"\nApplying CRF on the predicted mask \n\n\"\"\"\nfor i in tqdm(range(df.shape[0])):\n    if str(df.loc[i,'rle_mask'])!=str(np.nan):        \n        decoded_mask = rle_decode(df.loc[i,'rle_mask'])        \n        orig_img = imread(test_path+df.loc[i,'id']+'.png')        \n        crf_output = crf(orig_img,decoded_mask)\n        df.loc[i,'rle_mask'] = rle_encode(crf_output)","a41db401":"df.to_csv('crf_correction_unet_bn_diceloss.csv',index=False)","40a2e84e":"# Apply CRF on all the masks","e05d07e5":"Applying CRF seems to have smoothed the model output.","b7413777":"# Loading Necessary Libraries","b06277c3":"# Function to apply CRF","7b559376":"# Visualizing some of the predicted masks","6c2ce4a7":"In this notebook I use Conditional Random Fields on the [predicted masks](https:\/\/www.kaggle.com\/dingli\/seismic-data-analysis-with-u-net).","483abfb3":"# Visualizing the effect of applying CRF"}}