{"cell_type":{"99e61161":"code","2a3c804a":"code","71d19dd6":"code","a8a52f9e":"code","7e518336":"code","ca2de580":"code","4f3f0b63":"code","1397c57e":"code","4931d0b0":"code","a3dcbb76":"code","ad4e7d20":"code","fe34d1ab":"code","951cc8b7":"code","2b4bee28":"code","921c833a":"code","2b771356":"code","15baf114":"code","4e71e42a":"code","4cba5474":"code","8cec8486":"code","884f6629":"code","8704ad2e":"code","462bb133":"code","7f6f5ef8":"code","9006687c":"code","99b344c4":"code","3e4682dd":"code","e024ba63":"code","5d7663a5":"code","6ce263a8":"code","7bc0eaa9":"code","1733a061":"code","9eba3588":"code","8eb73641":"code","b3f524c7":"code","0e080cbe":"code","60e4510a":"code","34eb5687":"code","32e3e757":"code","895ca8f9":"code","76f5a79a":"code","08289cf7":"code","95105c7d":"code","e135e9bf":"code","42f98cf5":"code","8e106ebb":"code","9d9b0eff":"code","fff7b9a3":"code","bedf00a8":"code","c2a15ade":"markdown","9192f14c":"markdown","009f922c":"markdown","c3e11006":"markdown","7fc73cdf":"markdown","651c73f1":"markdown","aad15046":"markdown","db91b5f6":"markdown","fefc20c3":"markdown","5881d7b4":"markdown","c54f19bd":"markdown","43525c03":"markdown","89d5a460":"markdown"},"source":{"99e61161":"#importing useful libraries\nimport math\nimport string\nimport datetime\nimport chardet\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nimport scipy\nimport numpy as np\nimport pandas as pd\nimport pandas_profiling as pp\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nimport plotly.express as px\nimport plotly.graph_objects as go\nsns.color_palette('bright')\nsns.set(style='darkgrid',rc = {'figure.figsize':(15,8)})\nfrom plotly.offline import iplot\nfrom sklearn.pipeline import make_pipeline \n!pip install dataprep\n%matplotlib inline","2a3c804a":"#reading data sets\ndf = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\nprint(df.shape)","71d19dd6":"#checking head\ndf.head()","a8a52f9e":"#checking info\ndf.info()","7e518336":"#describing the data\ndf.describe()","ca2de580":"#droping time\ndf.drop('Time',axis=1,inplace=True)","4f3f0b63":"#rechecking head\ndf.head()","1397c57e":"# checking for any NaN values\ndf.isna().any()","4931d0b0":"#visuvalising the  null values\nplt.figure(figsize=(10,8))\nsns.heatmap(df.isnull())\nplt.title('Heatmap for checking Null Values')\nplt.show()","a3dcbb76":"#visualizing using data prep library\nfrom dataprep.eda import create_report\ncreate_report(df)","ad4e7d20":"#assiging x and y values\nX = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values\n#checking x value\nprint(X[0])\n#checking y value\nprint(y[0])\n","fe34d1ab":"#train_test_split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1\/3, random_state = 69)\n#printing the shapes of training and testing data\nprint(\"X_training set shape{},X_testing set shape{}\".format(X_train.shape,X_test.shape))\nprint(\"y_training set shape{},y_testing set shape{}\".format(y_train.shape,y_test.shape))","951cc8b7":"from collections import Counter\nprint(\"Before Smote\")\nprint(Counter(y_train))","2b4bee28":"from imblearn.over_sampling import SMOTE\nsmote=SMOTE()\n\nX_train,y_train=smote.fit_resample(X_train.astype('float'),y_train.astype('int64'))","921c833a":"print(\"After Smote\")\nprint(Counter(y_train))","2b771356":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train[:, :] = sc.fit_transform(X_train[:, :])\nX_test[:, :] = sc.transform(X_test[:, :])","15baf114":"print(X_train)","4e71e42a":"#logistic regression training\nfrom sklearn.linear_model import LogisticRegression\nclassifier_regressor = LogisticRegression(random_state = 0,solver='liblinear')\nclassifier_regressor.fit(X_train, y_train)","4cba5474":"#logistic regression prediction\ny_pred_regressor = classifier_regressor.predict(X_test)","8cec8486":"#knn training\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier_knn = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier_knn.fit(X_train, y_train)","884f6629":"#knn prediction\ny_pred_knn = classifier_knn.predict(X_test)","8704ad2e":"#kernel svm training\nfrom sklearn.svm import SVC\nclassifier_ksvm = SVC(kernel = 'rbf', random_state = 0)\nclassifier_ksvm.fit(X_train, y_train)","462bb133":"#kernel svm prediction\ny_pred_ksvm = classifier_ksvm.predict(X_test)","7f6f5ef8":"#naive bayes training\nfrom sklearn.naive_bayes import GaussianNB\nclassifier_nb = GaussianNB()\nclassifier_nb.fit(X_train, y_train)","9006687c":"#naive bayes prediction\ny_pred_nb = classifier_nb.predict(X_test)","99b344c4":"#decision tree training\nfrom sklearn.tree import DecisionTreeClassifier\nclassifier_dt = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier_dt.fit(X_train, y_train)","3e4682dd":"#decision tree prediction\ny_pred_dt = classifier_dt.predict(X_test)","e024ba63":"#random forest training\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier_rf = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier_rf.fit(X_train, y_train)","5d7663a5":"#random forest prediction\ny_pred_rf = classifier_rf.predict(X_test)","6ce263a8":"#XG boost training\nfrom xgboost import XGBClassifier\nclassifier_xg = XGBClassifier()\nclassifier_xg.fit(X_train, y_train)","7bc0eaa9":"#xg boost prediction\ny_pred_xg = classifier_xg.predict(X_test)","1733a061":"y_pred=pd.DataFrame()\ny_pred['knn']=y_pred_knn","9eba3588":"y_pred['ksvm']=y_pred_ksvm\ny_pred['navie bayes']=y_pred_nb\ny_pred['decision tree']=y_pred_dt\ny_pred['random forest']=y_pred_rf\ny_pred['xg boost']=y_pred_xg","8eb73641":"y_pred['real values']=y_test","b3f524c7":"y_pred","0e080cbe":"#confussion matrix regressor\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm_regressor = confusion_matrix(y_test, y_pred_regressor)\nprint(cm_regressor)\naccuracy_score(y_test, y_pred_regressor)\n\n","60e4510a":"#visuvalizing confusion matrix\nmat = confusion_matrix(y_test,y_pred_regressor)\nplt.figure(figsize=(12,8))\nsns.heatmap(data=mat, annot=True, cmap=\"icefire\", xticklabels=['Real', 'Fake'], yticklabels=['Real', 'Fake'])\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')\nplt.title('Confusion Matrix for Logistic regression')\nplt.show()","34eb5687":"#confussion matrix knn\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm_knn = confusion_matrix(y_test, y_pred_knn)\nprint(cm_knn)\naccuracy_score(y_test, y_pred_knn)","32e3e757":"#visuvalizing confusion matrix\nmat = confusion_matrix(y_test, y_pred_knn)\nplt.figure(figsize=(12,8))\nsns.heatmap(data=mat, annot=True, cmap=\"icefire\", xticklabels=['Real', 'Fake'], yticklabels=['Real', 'Fake'])\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')\nplt.title('Confusion Matrix for K nearest neighbours')\nplt.show()","895ca8f9":"#confussion matrix ksvm\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm_ksvm = confusion_matrix(y_test, y_pred_ksvm)\nprint(cm_ksvm)\naccuracy_score(y_test, y_pred_ksvm)","76f5a79a":"#visuvalizing confusion matrix\nmat = confusion_matrix(y_test,y_pred_ksvm)\nplt.figure(figsize=(12,8))\nsns.heatmap(data=mat, annot=True, cmap=\"icefire\", xticklabels=['Real', 'Fake'], yticklabels=['Real', 'Fake'])\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')\nplt.title('Confusion Matrix for kernel svm')\nplt.show()","08289cf7":"#confussion matrix navie bayes\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm_nb = confusion_matrix(y_test, y_pred_nb)\nprint(cm_nb)\naccuracy_score(y_test, y_pred_nb)","95105c7d":"#visuvalizing confusion matrix\nmat = confusion_matrix(y_test,y_pred_nb)\nplt.figure(figsize=(12,8))\nsns.heatmap(data=mat, annot=True, cmap=\"icefire\", xticklabels=['Real', 'Fake'], yticklabels=['Real', 'Fake'])\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')\nplt.title('Confusion Matrix for Navie Bayes')\nplt.show()","e135e9bf":"#confussion matrix decision tree\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm_dt = confusion_matrix(y_test, y_pred_dt)\nprint(cm_dt)\naccuracy_score(y_test, y_pred_dt)","42f98cf5":"#visuvalizing confusion matrix\nmat = confusion_matrix(y_test, y_pred_dt)\nplt.figure(figsize=(12,8))\nsns.heatmap(data=mat, annot=True, cmap=\"icefire\", xticklabels=['Real', 'Fake'], yticklabels=['Real', 'Fake'])\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')\nplt.title('Confusion Matrix for Decision Tree')\nplt.show()","8e106ebb":"#confussion matrix random forest\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm_rf = confusion_matrix(y_test, y_pred_rf)\nprint(cm_rf)\naccuracy_score(y_test, y_pred_rf)","9d9b0eff":"#visuvalizing confusion matrix\nmat = confusion_matrix(y_test, y_pred_rf)\nplt.figure(figsize=(12,8))\nsns.heatmap(data=mat, annot=True, cmap=\"icefire\", xticklabels=['Real', 'Fake'], yticklabels=['Real', 'Fake'])\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')\nplt.title('Confusion Matrix for Random Forest')\nplt.show()","fff7b9a3":"#confussion matrix xg boost\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm_xg = confusion_matrix(y_test, y_pred_xg)\nprint(cm_xg)\naccuracy_score(y_test, y_pred_xg)","bedf00a8":"#visuvalizing confusion matrix\nmat = confusion_matrix(y_test,y_pred_xg)\nplt.figure(figsize=(12,8))\nsns.heatmap(data=mat, annot=True, cmap=\"icefire\", xticklabels=['Real', 'Fake'], yticklabels=['Real', 'Fake'])\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')\nplt.title('Confusion Matrix for XG Boost')\nplt.show()","c2a15ade":"no nan values","9192f14c":"# **Preparing Classification Models**","009f922c":"# **Splitting Data in Training and Testing sets**","c3e11006":"# Regex Software Services \n**Learn to create**","7fc73cdf":"<h3>Context<\/h3>\n\n<p>It is important that credit card companies are able to recognize fraudulent credit card transactions so that customers are not charged for items that they did not purchase.<\/p>\n\n<p>The dataset contains transactions made by credit cards in September 2013 by European cardholders.\nThis dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions.<\/p>\n\n<p>It contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, we cannot provide the original features and more background information about the data. Features V1, V2, \u2026 V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-sensitive learning. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.<\/p>\n\nGiven the class imbalance ratio, we recommend measuring the accuracy using the Area Under the Precision-Recall Curve (AUPRC). Confusion matrix accuracy is not meaningful for unbalanced classification.\n\n<h3>Acknowledgements<\/h3>\n\nThe dataset has been collected and analysed during a research collaboration of Worldline and the Machine Learning Group (http:\/\/mlg.ulb.ac.be) of ULB (Universit\u00e9 Libre de Bruxelles) on big data mining and fraud detection.\nMore details on current and past projects on related topics are available on https:\/\/www.researchgate.net\/project\/Fraud-detection-5 and the page of the DefeatFraud project","651c73f1":"Accuracy:\n* Logestic Regression:             0.97801\n* KNeighborsClassifier:            0.99722\n* SVC:                             0.99478\n* GaussianNB:                      0.97286\n* DecisionTreeClassifier:          0.99766\n* RandomForestClassifier:          0.99961\n* XG Boost:                        0.99943","aad15046":"# Project :\n***Credit Card Fraud Detection using Machine Learning And Deep Learning.***\n","db91b5f6":"**MENTOR**:<br>\n* Mow Mukherjee<br>\n* Pavan Tiwari<br>","fefc20c3":"# **Feature Scaling**#standard feature scaling\n","5881d7b4":"# **Importing Libraries**","c54f19bd":"\n**Team Members:**<br>\n* Murari Tat (Head)<br>\n* Onasvee Banarse (V.Head)<br>\n* Sachin K.<br>\n* Bhanu Raja<br>\n* Shubham Jain<br>","43525c03":"# **Visualization of Data**","89d5a460":"# **Analysing Data**"}}