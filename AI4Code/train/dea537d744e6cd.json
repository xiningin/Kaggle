{"cell_type":{"68957b2d":"code","d1b16e39":"code","dfdbe2ba":"code","020c5670":"code","95a73e27":"code","76e40da5":"code","c85cdf1e":"code","3b39b89f":"code","13de94cd":"code","51fb9e63":"code","2f5011a6":"code","adf0fbfa":"code","f7dc7c42":"code","b73b05d4":"code","18cb1c76":"code","6ff88870":"code","c615a6da":"code","6bfa4368":"code","e1c2a333":"code","365f6c5c":"code","f5b62875":"code","1e600a33":"code","4e3ce9a5":"code","8d209253":"code","0bee0479":"code","718d457b":"markdown","0f45595c":"markdown","f906a392":"markdown","71bc0c1b":"markdown","ccb87e61":"markdown","47cbd82a":"markdown","713cce4c":"markdown","4a4cba0a":"markdown","2707f45f":"markdown","388d727d":"markdown","62172ec6":"markdown","17f12fcb":"markdown","44663bd9":"markdown","3c113301":"markdown","f3936c1c":"markdown","c442d7ca":"markdown","ca821714":"markdown","9c02d362":"markdown","23822b2b":"markdown","abeae808":"markdown","a5c686a6":"markdown"},"source":{"68957b2d":"#import requried packages\/modules\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","d1b16e39":"#read csv file and print first 10 data sets and 5 is default value for head\ndf=pd.read_csv('..\/input\/game-of-thrones\/battles.csv')\ndf.head(5)","dfdbe2ba":"#Print available columns and shape of the data set like rows and columns\nprint(df.columns)\ndf.shape","020c5670":"#Check information of data frame, for initial data analysis\ndf.info()\n","95a73e27":"# Dropping columns that does not give any gain in maintaining in data set.\n# Doing so can improve performance for large data sets","76e40da5":"# Drop columns and update the data in df object itself\ndf.drop(columns=['defender_3','defender_4','note', 'battle_number'],inplace=True)","c85cdf1e":"# Below line provides details of unique values in the data set, it helps derive the categorical vs numerical information \ndf.T.nunique(axis=1)\n# Example, attacker_king has data for 36 columns, but it contains only 4 unique values\n# Year has data for all 38 rows, but only 3 unique values. Even though it is numeric, it is rather considered as categorical","3b39b89f":"# Describe the data for the primary analysis, (all numerical data is described by Python)\ndf.describe()","13de94cd":"# Let's draw box plot to identify the Outliers existence, it is also considered as 5 point summary plot\nsns.boxplot(df.attacker_size,data=df)\nplt.show()","51fb9e63":"df[df['attacker_size']>(df.attacker_size.quantile(.75)+(df.attacker_size.quantile(.75)-df.attacker_size.quantile(.25))*1.5)]","2f5011a6":"# Draw a similar plot for defender size\nsns.boxplot(df.defender_size,data=df);\n","adf0fbfa":"# Let us visualize the data for relation between variables\nsns.pairplot(df);","f7dc7c42":"# Let's draw a heatmap for better understanding of correlation between variables in the data\nplt.figure(figsize=(10,5));\nsns.heatmap(df.corr(),annot=True, cmap=\"Blues\");","b73b05d4":"dfg=pd.DataFrame(df['year'].value_counts())\ndfg","18cb1c76":"sns.barplot(x=dfg.index,y=dfg.year);\nplt.title('Battles per year', fontsize=20)\nplt.xlabel('year',fontsize=15)\nplt.ylabel('count',fontsize=15)","6ff88870":"# Removing null values from the data, concatenates strings with comma seperate and finally splits to a list\nac=df[df['attacker_commander'].notna()]['attacker_commander'].str.cat(sep=', ').split(', ')\n# Count the values in the list\nacs=pd.Series(ac).value_counts()\n# plot graph in bigger size due to large list of attackers\nplt.figure(figsize=(16,9))\nsns.barplot(x=acs.index,y=acs.values)\nplt.title('Attacker commanders',fontsize=20)\nplt.xlabel('Attacker commanders',fontsize=15)\nplt.ylabel('count',fontsize=15)\nplt.xticks(rotation=90)\nplt.show()","c615a6da":"dc=df[df['defender_commander'].notna()]['defender_commander'].str.cat(sep=', ').split(', ')\ndcs=pd.Series(dc).value_counts()\nplt.figure(figsize=(16,9))\nsns.barplot(x=dcs.index,y=dcs.values)\nplt.title('Defender commanders',fontsize=20)\nplt.xlabel('Defender commanders',fontsize=15)\nplt.ylabel('count',fontsize=15)\nplt.xticks(rotation=90)\nplt.show()","6bfa4368":"plt.figure(figsize=(10,4))\nplt.xticks(rotation=90)\n# No of battles for region\nsns.countplot(x='region',data=df)\nplt.show()","e1c2a333":"plt.figure(figsize=(10,4))\nplt.xticks(rotation=90)\n# No of battles for location\nsns.countplot(x='location',data=df)\nplt.show()","365f6c5c":"plt.figure(figsize=(10,4))\nplt.xticks(rotation=90)\n\n# No of battles for region and location\ncp=sns.countplot(x='region',data=df, hue='location')\nplt.title('Number of battles per region and location',fontsize=23)\nplt.xlabel('Region',fontsize=13)\nplt.xticks(rotation=45)\nplt.ylabel('count',fontsize=13)\n# place the legend of locations to the right and outside the plot\nplt.legend(title ='Locations',bbox_to_anchor=(1.04,1), loc=\"upper left\")\nplt.show()\n# Is there a way to hide the empty cells so the graph looks nicer?","f5b62875":"sns.countplot(x='battle_type',data=df)\nplt.title('Types of battle', fontsize=20)\nplt.xlabel('Battle Type',fontsize=13)\nplt.ylabel('count', fontsize=13)\nplt.show()","1e600a33":"# Print info to detect if na or null or NAN data values exist for major capture, attacker king and drop them from the data set\ndf.info()","4e3ce9a5":"# Drop null from data set for major capture and attacker into a differnt data frame\ndf1=df.dropna(subset=['major_capture','attacker_king'])[['attacker_king','major_capture']]\ndf1.shape","8d209253":"df2=df1.groupby('major_capture').count().reset_index().replace({0.0:'Lost',1.0:'Won'})\ndf2","0bee0479":"sns.barplot(x='major_capture',data=df2,y='attacker_king')\nplt.title('Attacker battle result',fontsize=15)\nplt.xlabel('capture')\nplt.ylabel('attacker')\nplt.show()","718d457b":"# This is my first Exploratory Data Analysis only for the battles.csv data file ","0f45595c":"# Draw different types of battles","f906a392":"# Identify if attacker or defender has captured the battle","71bc0c1b":"# We had just explored the data and did not perform any prediction. It is just an observation from the data","ccb87e61":"# *Number of battles per region*\n","47cbd82a":"# Let us draw few more plots for additional details\n# *Number of battles per year*","713cce4c":"# Most battles took place in two location\n# Number of battles per region and location","4a4cba0a":"# The min and max value difference for attacker size is huge, hence it might contain outliers\n# The difference in size of defenders also seems high, hence it might also contain outliers","2707f45f":"# There are 3 data sets that are outside of 1.5 times IQR, and thus can be considered as Outliers","388d727d":"# *Most attacker commander*","62172ec6":"# The attacker has higer chances to win than the defender\n# attacker size is also highly corelated to the major death","17f12fcb":"# The attacker size plot, shows clearely there are couple of outliers to the higer side of data\n# Print outlier data sets i.e., the data outside of Interquartile Range (IQR)","44663bd9":"# Thanks for reading and providing your invaluable inputs to help me improve and many other data scientist aspirants","3c113301":"# Attacker has won 11 battles out of 35, indicating atackers have less chances","f3936c1c":"# There are more battles fought in year 299","c442d7ca":"# The boxplot for defender size, does not show any outliers i.e, points outside the whiskers, thus our assumption earlier is not appropriate. \n# Need more analysis to prove there are outliers or not","ca821714":"# we can deduce some information from the data\n# defender_3 and defender_4 columns have NAN values for the entire column\n# attacker_3, attacker_4 and notes columns have very minimal data available","9c02d362":"# *Most Defender commander*","23822b2b":"# Most battles took place in The Riverlands regions\n# *Number of battles per location*","abeae808":"# Following points could be drawn from the pair plot above\n## The attackers side has captured more number of times than the defenders\n## The sizes of atackers and defenders has not much impact on major death","a5c686a6":"# The attacker king has 2 null values"}}