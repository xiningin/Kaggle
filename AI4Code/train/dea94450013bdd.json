{"cell_type":{"d29cc29f":"code","345190e3":"code","32331955":"code","deb90276":"code","92a5f113":"code","c300e061":"code","613157db":"code","2ed7136d":"code","02b7cebe":"code","04fd3d2e":"code","87f6ba6b":"code","71185871":"code","dcb23728":"code","cc46a2ee":"code","db9a62b9":"markdown","aeda2847":"markdown","9aba95b5":"markdown","7e84106f":"markdown","4b2ac11c":"markdown"},"source":{"d29cc29f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","345190e3":"data = pd.read_csv(\"\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")","32331955":"data.info()","deb90276":"data.head()","92a5f113":"data1 = data.head()\ndata2 = data.tail()\ndata3 = pd.concat([data1,data2], axis = 0 , ignore_index = True)\ndata3","c300e061":"data.columns","613157db":"data[\"genres\"].value_counts(dropna =False).head(10)","2ed7136d":"data[\"original_language\"].value_counts(dropna = False)","02b7cebe":"# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\ndata_new = data.head()\nmelted = pd.melt(frame=data_new,id_vars = 'title', value_vars= ['vote_average','vote_count'])\nmelted","04fd3d2e":"data['popularity'].describe()","87f6ba6b":"data0 = data['title']\ndata1 = data['popularity']\ndata2= data['vote_average']\nconc_data_col = pd.concat([data0,data1,data2],axis =1) # axis = 0 : adds dataframes in row\nconc_data_col1 =conc_data_col.sort_values('popularity', ascending=False)\nconc_data_col1","71185871":"plt.figure(figsize=(12,4))\nplt.barh(conc_data_col1['title'].head(10),conc_data_col1['popularity'].head(10), align='center',color='skyblue')\nplt.gca().invert_yaxis()\nplt.xlabel(\"Popularity\")\nplt.title(\"Popular Movies\")\nplt.show()","dcb23728":"movies = data.sort_values('vote_average', ascending=False)\nmovies[['title', 'vote_count', 'vote_average']].head(40)","cc46a2ee":"datetime_object = pd.to_datetime(data[\"release_date\"])\nprint(type(datetime_object))","db9a62b9":"**Tidy Data**","aeda2847":"**CONCATENATING DATA**","9aba95b5":"   ** INDEXING PANDAS TIME SERIES**\n****\n\n* datetime = object\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","7e84106f":"**PLOTING POPULAR MOVIES**","4b2ac11c":"**LISTING MOVIES ACCORDING TO VOTE AVERAGE**"}}