{"cell_type":{"77f6b5d8":"code","088eb622":"code","b870fecd":"code","0caa3c42":"code","db5c10bf":"code","3fa8c3fa":"code","aacbe943":"code","c133f1e6":"code","e95ece65":"code","b01cdf9d":"code","02225acd":"code","fa1e21d2":"code","cef507b4":"code","2a600e18":"markdown","8c1d66d5":"markdown","77fb34f1":"markdown","ddffa32e":"markdown","31c2c254":"markdown"},"source":{"77f6b5d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","088eb622":"telco_original = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\n\ntelco_original['TotalCharges'] = telco_original.TotalCharges.replace({' ': 0})\ntelco_original['TotalCharges'] = pd.to_numeric(telco_original.TotalCharges, errors='coerce')\n# remove the 9 rows with missing values\nprint(telco_original.info())\n\ntelco_original = telco_original.drop('customerID', axis=1)\n\ntelco_original['Churn'] = telco_original.Churn.replace({'No': 0, 'Yes':1})\n\nfrom sklearn.model_selection import train_test_split\nX = telco_original.drop('Churn', axis=1)\ny = telco_original.Churn\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=telco_original.Churn, \n                                                    test_size=0.2, random_state=123)","b870fecd":"telco_original.nunique()","0caa3c42":"from sklearn.preprocessing import OneHotEncoder, StandardScaler\n\n# generate the list of categorical and numerical variables\ncategorical_variables = telco_original.nunique()[telco_original.nunique() < 5].keys().to_list()\n\nnumerical_variables=list(set(telco_original.columns) - set(categorical_variables))\ncategorical_variables.remove('Churn')\n\nohe = OneHotEncoder(drop='first', sparse=False)\n\nX_train_ohe = ohe.fit_transform(X_train[categorical_variables])\nX_train_ohe_df = pd.DataFrame(X_train_ohe, columns=ohe.get_feature_names(categorical_variables))\n\n# Transform only without fitting\nX_test_ohe = ohe.transform(X_test[categorical_variables])\nX_test_ohe_df = pd.DataFrame(X_test_ohe, columns=ohe.get_feature_names(categorical_variables))\n\n\nscaler = StandardScaler()\nX_train_sc = scaler.fit_transform(X_train[numerical_variables])\nX_train_sc_df = pd.DataFrame(X_train_sc, columns=numerical_variables)\n\n# Transform only without fitting\nX_test_sc = scaler.transform(X_test[numerical_variables])\nX_test_sc_df = pd.DataFrame(X_test_sc, columns=numerical_variables)\n\n# Merging the transformed dataframe togheter\nX_train = pd.merge(X_train_ohe_df, X_train_sc_df, left_index=True, right_index=True)\nX_test = pd.merge(X_test_ohe_df, X_test_sc_df, left_index=True, right_index=True)","db5c10bf":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import RandomizedSearchCV\n#from sklearn.metrics import roc_auc_score\nfrom scipy.stats import loguniform\nimport numpy as np\nimport time\n\nlog_reg = LogisticRegression(solver='liblinear')\n\nparam_grid = {'penalty': ['l1', 'l2'],\n              'C': loguniform(10**-4, 10**4)}\n\nrandom_search = RandomizedSearchCV(log_reg, param_grid, n_jobs=-1, n_iter=40, scoring='roc_auc', verbose=True)\n\nstart = time.time()\nrandom_search.fit(X_train, y_train)\nend = time.time()\n\ntimings = []\ntimings.append(end -start)","3fa8c3fa":"lr_best = random_search.best_estimator_\nrandom_search.best_params_","aacbe943":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\n\n# Number of trees in random forest\nn_estimators = list(np.linspace(start = 200, stop = 2000, num = 10, dtype='int'))\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = list(np.linspace(10, 110, num = 11, dtype='int'))\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n# Create the random grid\nparam_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap,\n               \"criterion\": [\"gini\", \"entropy\"]}\n\nrandom_search = RandomizedSearchCV(rf, param_grid, n_jobs=-1, n_iter=40, scoring='roc_auc', verbose=True)\n\nstart = time.time()\nrandom_search.fit(X_train, y_train)\nend = time.time()\n\ntimings.append(end - start)","c133f1e6":"rf_best = random_search.best_estimator_\nrandom_search.best_params_","e95ece65":"# Import roc_curve\nfrom sklearn.metrics import roc_curve\nimport matplotlib.pyplot as plt\n\ndef add_roc_plot(model, test_x, test_y, legend_text):\n    y_pred_prob = model.predict_proba(test_x)[:, 1]\n    # Calculate the roc metrics\n    fpr, tpr, thresholds = roc_curve(test_y, y_pred_prob)\n    # Plot the ROC curve\n    plt.plot(fpr, tpr, label=legend_text)\n    plt.legend()\n\n    \nmodels_list = [lr_best, rf_best]\nmodel_names = ['Logistic Regression', 'Random Forest']\n\nplt.figure(figsize=(6, 6))\n[add_roc_plot(model, X_test, y_test, legend_text) for model, legend_text in zip(models_list, model_names)]\n\n# Add labels and diagonal line\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.xlim((0,1))\nplt.ylim((0,1))\nplt.plot([0, 1], [0, 1], \"k-\")\nplt.show()","b01cdf9d":"from sklearn.metrics import accuracy_score, roc_auc_score, recall_score, precision_score\n\nlist_scores = [roc_auc_score, recall_score, precision_score, accuracy_score]\ncalc_scores = []\ndef compute_scores(model, x_test, y_test, scores):\n    return [round(score(y_test, model.predict(x_test)), 2) for score in scores]\n    \n[calc_scores.append(compute_scores(model, X_test, y_test, list_scores)) for model in models_list] \n\nscore_names = ['roc_auc', 'recall', 'precision', 'accuracy']\nscores_df = pd.DataFrame(calc_scores, columns=score_names, index=model_names)\n\nscores_df['timing (s)'] = [round(t) for t in timings]\nscores_df","02225acd":"from sklearn.metrics import plot_confusion_matrix\n\nfig, (ax1,ax2) = plt.subplots(1,2, figsize=(12,8))\n\nax1.title.set_text('Logistic Regression')\nplot_confusion_matrix(lr_best, X_test, y_test, cmap=plt.cm.Blues, values_format='d', ax=ax1)\nax2.title.set_text('Random Forest')\nplot_confusion_matrix(rf_best, X_test, y_test, cmap=plt.cm.Blues, values_format='d', ax=ax2)\nplt.show()","fa1e21d2":"rf_importance=pd.DataFrame({'feature': X_train.columns, 'importance': rf_best.feature_importances_}).sort_values('importance', ascending=False)\nrf_importance.index = [i for i in range(1, len(rf_importance)+1)]\nrf_importance.reset_index(inplace=True)\nrf_importance['model'] = 'Random Forest'\n\nlr_importance = pd.DataFrame({'feature': X_train.columns, 'importance': abs(lr_best.coef_[0,:])}).sort_values('importance', ascending=False)\nlr_importance.index = [i for i in range(1, len(lr_importance)+1)]\nlr_importance.reset_index(inplace=True)\nlr_importance['model'] = 'Logistic Regression'\n\ntopN=10\n\ntop10_importance = pd.concat([rf_importance.head(topN), lr_importance.head(topN)])","cef507b4":"from plotnine import ggplot, aes, geom_point, geom_line, theme_minimal, theme, element_blank, ggtitle\n\ntop10_common_category = top10_importance.feature[0:10].append(pd.Series(list(set(top10_importance.feature[10:21])- set(top10_importance.feature[0:10]))))\ntop10_importance['feature'] = pd.Categorical(top10_importance['feature'], categories = top10_common_category[::-1])\ntop10_importance['model'] = pd.Categorical(top10_importance['model'], categories = ['Random Forest', 'Logistic Regression'])\n\nggplot(top10_importance, aes('model','feature')) +\\\n    geom_point(color='blue') +\\\n    geom_line(aes(group='index')) +\\\n    theme_minimal() +\\\n    theme(axis_title_x = element_blank(),\n          axis_title_y = element_blank()) +\\\n    ggtitle('Top 10 Feature Importance')","2a600e18":"The two methods give comparable results. Below is showed grafically how the importances of the top 10 features for the two models change. The lines connect the feature with the same rank, the missing dots are not in the top 10.","8c1d66d5":"## Preparing the data for machine learning\n\n1. Set empty TotalCharges to 0 and convert it to numeric\n2. Encode Churn as 0 for 'No' and 1 for 'Yes'\n3. One-Hot encoding of categorical data\n4. Standardization of numerical data\n5. Drop customerID\n\nStandardization is applied to improve convergence of regularised Logistic Regression and to put the coefficients on the same scale, so that their magnitude can be interpreted as their importance. The scaling will be used for all the models, even though for Random Forest is not required.\nIn order to have a genuine evaluation of the models the scaling must be defined only on the training data, otherwise a bias will be introduced.","77fb34f1":"## Models fitting\n","ddffa32e":"All the object columns contain only few categories (<5) and can be OneHot encoded (this step could have been done before splitting too, but for consistency with the standardization procedure it will be done after).","31c2c254":"# Churn Prediction\n\nRegularized logistic regression and random forest models are compared to predict customer churn. To select the best model a 5-Fold Cross Validation with randomised search was used. Since the dataset is unbalanced with respect to Churn the area under the ROC curve (roc_auc) was used as criterium for the selection."}}