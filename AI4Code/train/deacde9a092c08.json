{"cell_type":{"8a91304e":"code","78c79c56":"code","d1ae83f6":"code","7056f547":"code","576169e5":"code","df56cb9f":"code","d90ecbfe":"code","4ce424de":"code","f4814e08":"code","6a1012af":"code","4b529121":"code","70698f5a":"code","28dc3e5f":"code","bf0da9b9":"code","db9e20b0":"code","810ae671":"code","706c82ef":"code","ffba6c9a":"code","be3c2c0a":"code","c38f3cae":"code","24723dfe":"code","654051ab":"code","42b32e47":"code","b87db0a9":"code","59978c40":"code","e08d6d25":"code","b6cb491d":"code","c778ffaf":"code","c377d74a":"code","de8e2845":"code","01fc5b9d":"code","fbc1466f":"code","2f6bafea":"code","45bd4ac6":"code","17ebb5fd":"code","ad0085ef":"code","e745c55d":"code","6a78f975":"code","299c9eb4":"code","3cfcb30f":"code","9ea0de90":"code","0b818420":"code","edb64f15":"code","29ca3047":"code","ef7b7491":"code","a73384c1":"code","484c6c6f":"code","e7a81b21":"code","ce1e663e":"code","8138b6bf":"code","f96c9dfd":"code","ada3b104":"code","6d078dc2":"code","ea8d67fa":"code","e3a22d0d":"code","a1c0ce69":"code","e3873d14":"markdown"},"source":{"8a91304e":"# Loading packages\nimport pandas as pd #Analysis \nimport matplotlib.pyplot as plt #Visulization\nimport seaborn as sns #Visulization\nimport numpy as np #Analysis \nfrom scipy.stats import norm #Analysis \nfrom sklearn.preprocessing import StandardScaler #Analysis \nfrom scipy import stats #Analysis \nimport warnings \nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport gc","78c79c56":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test  = pd.read_csv('..\/input\/test.csv')","d1ae83f6":"print(\"train.csv. Shape: \",df_train.shape)\nprint(\"test.csv. Shape: \",df_test.shape)","7056f547":"df_train.head()","576169e5":"#descriptive statistics summary\ndf_train['price'].describe()","df56cb9f":"#histogram\nf, ax = plt.subplots(figsize=(8, 6))\nsns.distplot(df_train['price'])","d90ecbfe":"#skewness and kurtosis\nprint(\"Skewness: %f\" % df_train['price'].skew())\nprint(\"Kurtosis: %f\" % df_train['price'].kurt())","4ce424de":"fig = plt.figure(figsize = (15,10))\n\nfig.add_subplot(1,2,1)\nres = stats.probplot(df_train['price'], plot=plt)\n\nfig.add_subplot(1,2,2)\nres = stats.probplot(np.log1p(df_train['price']), plot=plt)","f4814e08":"df_train['price'] = np.log1p(df_train['price'])\n#histogram\nf, ax = plt.subplots(figsize=(8, 6))\nsns.distplot(df_train['price'])","6a1012af":"# correlation\uc774 \ub192\uc740 \uc0c1\uc704 10\uac1c\uc758 heatmap\n# continuous + sequential variables --> spearman\n# abs\ub294 \ubc18\ube44\ub840\uad00\uacc4\ub3c4 \uace0\ub824\ud558\uae30 \uc704\ud568\n# https:\/\/www.kaggle.com\/junoindatascience\/let-s-eda-it \uc900\ud638\ub2d8\uc774 \uc218\uc815\ud574 \uc900 \ucf54\ub4dc\ub85c \uc0ac\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4. \nimport scipy as sp\n\ncor_abs = abs(df_train.corr(method='spearman')) \ncor_cols = cor_abs.nlargest(n=10, columns='price').index # price\uacfc correlation\uc774 \ub192\uc740 column 10\uac1c \ubf51\uae30(\ub0b4\ub9bc\ucc28\uc21c)\n# spearman coefficient matrix\ncor = np.array(sp.stats.spearmanr(df_train[cor_cols].values))[0] # 10 x 10\nprint(cor_cols.values)\nplt.figure(figsize=(10,10))\nsns.set(font_scale=1.25)\nsns.heatmap(cor, fmt='.2f', annot=True, square=True , annot_kws={'size' : 8} ,xticklabels=cor_cols.values, yticklabels=cor_cols.values)","4b529121":"data = pd.concat([df_train['price'], df_train['grade']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='grade', y=\"price\", data=data)","70698f5a":"data = pd.concat([df_train['price'], df_train['sqft_living']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_living', y=\"price\", data=data)","28dc3e5f":"data = pd.concat([df_train['price'], df_train['sqft_living15']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_living15', y=\"price\", data=data)","bf0da9b9":"data = pd.concat([df_train['price'], df_train['sqft_above']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_above', y=\"price\", data=data)","db9e20b0":"data = pd.concat([df_train['price'], df_train['bathrooms']], axis=1)\nf, ax = plt.subplots(figsize=(18, 6))\nfig = sns.boxplot(x='bathrooms', y=\"price\", data=data)","810ae671":"data = pd.concat([df_train['price'], df_train['bedrooms']], axis=1)\nf, ax = plt.subplots(figsize=(18, 6))\nfig = sns.boxplot(x='bedrooms', y=\"price\", data=data)","706c82ef":"from plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nfrom sklearn import model_selection, preprocessing, metrics, ensemble, naive_bayes, linear_model\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.decomposition import TruncatedSVD\n\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999\n\nimport plotly.graph_objs as go\n\nimport time\nimport random\n\n#https:\/\/www.kaggle.com\/ashishpatel26\/bird-eye-view-of-two-sigma-nn-approach\ndef mis_value_graph(data):  \n    data = [\n    go.Bar(\n        x = data.columns,\n        y = data.isnull().sum(),\n        name = 'Counts of Missing value',\n        textfont=dict(size=20),\n        marker=dict(\n        line=dict(\n            color= generate_color(),\n            #width= 2,\n        ), opacity = 0.45\n    )\n    ),\n    ]\n    layout= go.Layout(\n        title= '\"Total Missing Value By Column\"',\n        xaxis= dict(title='Columns', ticklen=5, zeroline=False, gridwidth=2),\n        yaxis= dict(title='Value Count', ticklen=5, gridwidth=2),\n        showlegend=True\n    )\n    fig = go.Figure(data=data, layout=layout)\n    py.iplot(fig, filename='skin')\n    \ndef generate_color():\n    color = '#{:02x}{:02x}{:02x}'.format(*map(lambda x: random.randint(0, 255), range(3)))\n    return color\n\ndf_all = pd.concat([df_train,df_test])\ndel df_all['price']\nmis_value_graph(df_all)","ffba6c9a":"df_train['floors'].unique()","be3c2c0a":"data = pd.concat([df_train['price'], df_train['sqft_living']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_living', y=\"price\", data=data)","c38f3cae":"df_train.loc[df_train['sqft_living'] > 13000]","24723dfe":"df_train = df_train.loc[df_train['id']!=8912]","654051ab":"data = pd.concat([df_train['price'], df_train['grade']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='grade', y=\"price\", data=data)","42b32e47":"df_train.loc[(df_train['price']>12) & (df_train['grade'] == 3)]","b87db0a9":"df_train.loc[(df_train['price']>14.7) & (df_train['grade'] == 8)]","59978c40":"df_train.loc[(df_train['price']>15.5) & (df_train['grade'] == 11)]","e08d6d25":"df_train = df_train.loc[df_train['id']!=456]\ndf_train = df_train.loc[df_train['id']!=2302]\ndf_train = df_train.loc[df_train['id']!=4123]\ndf_train = df_train.loc[df_train['id']!=7173]\ndf_train = df_train.loc[df_train['id']!=2775]","b6cb491d":"data = pd.concat([df_train['price'], df_train['bedrooms']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='bedrooms', y=\"price\", data=data)","c778ffaf":"f, ax = plt.subplots(figsize=(8, 6))\nsns.distplot(df_train['sqft_living15'])","c377d74a":"skew_columns = ['sqft_living', 'sqft_lot','sqft_living15', 'sqft_lot15', 'sqft_above', 'sqft_basement']\n\nfor c in skew_columns:\n    df_train[c] = np.log1p(df_train[c].values)\n    df_test[c] = np.log1p(df_test[c].values)","de8e2845":"for df in [df_train,df_test]:\n    df['date'] = df['date'].apply(lambda x: x[0:8])\n    df['yr_renovated'] = df['yr_renovated'].apply(lambda x: np.nan if x == 0 else x)\n    df['yr_renovated'] = df['yr_renovated'].fillna(df['yr_built'])","01fc5b9d":"df_train.head()","fbc1466f":"for df in [df_train,df_test]:\n    \n    df['sqft_total_size'] = df['sqft_above'] + df['sqft_basement'] + df['sqft_lot']\n    \n    # 15\ub144\ub3c4\uac00 \uc544\ub2cc \uc8fc\ubcc0 15\uac1c \uac00\uad6c \ud3c9\uade0\uac12\n    df['sqft_total_size15'] = df['sqft_living15'] + df['sqft_lot15']\n    \n    # \uc7ac\uac74\ucd95 \uc5ec\ubd80 \n    df['is_renovated'] = df['yr_renovated'] - df['yr_built']\n    df['is_renovated'] = df['is_renovated'].apply(lambda x: 0 if x == 0 else 1)\n    df['date'] = df['date'].astype('int')","2f6bafea":"# # \ud5c8\ud0dc\uba85\ub2d8 zipcode slicing \ud574\ubcf4\uae30\n\nfor data in [df_train,df_test]:\n    data['zipcode'] = data['zipcode'].astype(str)\n    # 45, 5, 35, 4\n    data['zipcode-3'] = 'z_' + data['zipcode'].str[2:3]\n    data['zipcode-4'] = 'z_' + data['zipcode'].str[3:4]\n    data['zipcode-5'] = 'z_' + data['zipcode'].str[4:5]\n    data['zipcode-34'] = 'z_' + data['zipcode'].str[2:4]\n    data['zipcode-45'] = 'z_' + data['zipcode'].str[3:5]\n    data['zipcode-35'] = 'z_' + data['zipcode'].str[2:3] + data['zipcode'].str[4:5]\n    \nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\n# zipcode LabelEncoding\nfor df in [df_train,df_test]:\n    le = LabelEncoder()\n    df['zipcode'] = le.fit_transform(df['zipcode'])\n    df['zipcode-3'] = le.fit_transform(df['zipcode-3'])\n    df['zipcode-4'] = le.fit_transform(df['zipcode-4'])\n    df['zipcode-5'] = le.fit_transform(df['zipcode-5'])\n    df['zipcode-34'] = le.fit_transform(df['zipcode-34'])\n    df['zipcode-45'] = le.fit_transform(df['zipcode-45'])\n    df['zipcode-35'] = le.fit_transform(df['zipcode-35'])","45bd4ac6":"from sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\n\nfor df in [df_train,df_test]:\n    coord = df[['lat','long']]\n    pca = PCA(n_components=2)\n    pca.fit(coord)\n\n    coord_pca = pca.transform(coord)\n\n    df['coord_pca1'] = coord_pca[:, 0]\n    df['coord_pca2'] = coord_pca[:, 1]\n# Kmeans\uae4c\uc9c0 \ud558\uba74 \uc810\uc218 \ud558\ub77d\n#     # kmeans for lat, long\n#     kmeans = KMeans(n_clusters=32, random_state=4950).fit(coord)\n#     coord_cluster = kmeans.predict(coord)\n#     df['coord_cluster'] = coord_cluster\n#     df['coord_cluster'] = df['coord_cluster'].map(lambda x: 'c_' + str(x).rjust(2, '0'))\n    \n# for df in [df_train,df_test]:\n#     le = LabelEncoder()\n#     df['coord_cluster'] = le.fit_transform(df['coord_cluster'])","17ebb5fd":"df_train['per_price'] = df_train['price']\/df_train['sqft_total_size']","ad0085ef":"# zipcode \uadf8\ub8f9\uc73c\ub85c \ud3c9\uade0\uac12 \uc0b0\uc815. \uc774\ub54c 15\ubcc0\uc218\ub97c \uc368\uc918\uc57c \uc608\uce21\ub825\uc774 \uc62c\ub77c\uac11\ub2c8\ub2e4.\ndf_train['per_price15'] = df_train['price']\/df_train['sqft_total_size15']\nzipcode_price = df_train.groupby(['zipcode'])['per_price15'].agg({'mean','var'}).reset_index()\ndf_train = pd.merge(df_train,zipcode_price,how='left',on='zipcode')\ndf_test = pd.merge(df_test,zipcode_price,how='left',on='zipcode')\n\nfor df in [df_train,df_test]:\n    df['zipcode_mean'] = df['mean'] * df['sqft_total_size15']\n    df['zipcode_var'] = df['var'] * df['sqft_total_size15']\n    del df['mean']; del df['var']","e745c55d":"#zipcode \ud3c9\uade0 price 1,2\uc704 n-1,n\uc704 \uac01\uac01 \uac70\ub9ac \uad6c\ud558\uae30\ndf_train['zipcode_mean'].describe()\ndf_train['price'].describe()","6a78f975":"np.expm1(df_train.loc[df_train['id'] == 6469]['price'])","299c9eb4":"# \uc704\uc5d0\uc11c \ub9cc\ub4e0 per_price(\ud3c9\ub2f9 \uac00\uaca9), zipcdoe_mean(zipcode \uadf8\ub8f9\ubcc4 \ud3c9\uade0 \uac00\uaca9) \uae30\uc900\uc73c\ub85c\n# \ubd80\uc790 \uac00\uad6c \uc0c1\uc704 4\uac1c \ucd94\ucd9c\ndf_temp = df_train.loc[(df_train['per_price15'] > 0.8)&(df_train['per_price'] > 0.59)&(df_train['zipcode_mean'] > 15.3)]\n#df_temp = df_train.loc[(df_train['price'] > 15.5)]\nsns.scatterplot(x='long', y='lat', hue='id', hue_order=np.sort(df_temp['price'].unique()), data=df_temp)\ndf_temp","3cfcb30f":"#df_temp\nrich_lat1 = df_temp['lat'].values[0]\nrich_lat2 = df_temp['lat'].values[1]\nrich_lat3 = df_temp['lat'].values[2]\nrich_lat4 = df_temp['lat'].values[3]\nrich_long1 = df_temp['long'].values[0]\nrich_long2 = df_temp['long'].values[1]\nrich_long3 = df_temp['long'].values[2]\nrich_long4 = df_temp['long'].values[3]","9ea0de90":"rich_lat3","0b818420":"# \uc704\uc5d0\uc11c \ub9cc\ub4e0 per_price(\ud3c9\ub2f9 \uac00\uaca9), zipcdoe_mean(zipcode \uadf8\ub8f9\ubcc4 \ud3c9\uade0 \uac00\uaca9) \uae30\uc900\uc73c\ub85c\n# \uac00\ub09c\ud55c \uac00\uad6c \ud558\uc704 3\uac1c \ucd94\ucd9c\ndf_temp = df_train.loc[(df_train['per_price15'] < 0.75)&(df_train['per_price'] < 0.56)&(df_train['zipcode_mean'] < 12.2)]\n#df_temp = df_train.loc[(df_train['price'] > 15.5)]\nsns.scatterplot(x='long', y='lat', hue='zipcode', hue_order=np.sort(df_temp['price'].unique()), data=df_temp)\ndf_temp","edb64f15":"poor_lat1 = df_temp['lat'].values[0]\npoor_lat2 = df_temp['lat'].values[1]\npoor_lat3 = df_temp['lat'].values[2]\npoor_long1 = df_temp['long'].values[0]\npoor_long2 = df_temp['long'].values[1]\npoor_long3 = df_temp['long'].values[2]","29ca3047":"poor_lat3","ef7b7491":"def haversine_array(lat1, lng1, lat2, lng2): \n    lat1, lng1, lat2, lng2 = map(np.radians, (lat1, lng1, lat2, lng2)) \n    AVG_EARTH_RADIUS = 6371 # in km \n    lat = lat2 - lat1 \n    lng = lng2 - lng1 \n    d = np.sin(lat * 0.5) ** 2 + np.cos(lat1) * np.cos(lat2) * np.sin(lng * 0.5) ** 2 \n    h = 2 * AVG_EARTH_RADIUS * np.arcsin(np.sqrt(d)) \n    return h\n\n# \uac01 \uac00\uad6c\ubcc4 \ubd80\uc790\/\uac00\ub09c \uac00\uad6c\uc640\uc758 \uac70\ub9ac feature\ub85c \ucd94\uac00\nfor df in [df_train,df_test]:\n    df['rich_lat_long1'] = haversine_array(rich_lat1, rich_long1,df['lat'],df['long'])\n    df['rich_lat_long2'] = haversine_array(rich_lat2, rich_long2,df['lat'],df['long'])\n    df['rich_lat_long3'] = haversine_array(rich_lat3, rich_long3,df['lat'],df['long'])\n    df['rich_lat_long4'] = haversine_array(rich_lat4, rich_long4,df['lat'],df['long'])\n    df['poor_lat_long1'] = haversine_array(poor_lat1, poor_long1,df['lat'],df['long'])\n    df['poor_lat_long2'] = haversine_array(poor_lat2, poor_long2,df['lat'],df['long'])\n    df['poor_lat_long3'] = haversine_array(poor_lat3, poor_long3,df['lat'],df['long'])\n    \n\n# # zipcode LabelEncoding\n# for df in [df_train,df_test]:\n#     le = LabelEncoder()\n#     df['rich_lat_long1'] = le.fit_transform(df['rich_lat_long1'])\n#     df['rich_lat_long2'] = le.fit_transform(df['rich_lat_long2'])","a73384c1":" df_train['rich_lat_long3']","484c6c6f":"#df_temp = df_train.loc[df_train['zipcode_mean'] < 10.7]\nsns.scatterplot(x='long', y='lat', hue='zipcode', hue_order=np.sort(df_temp['zipcode_mean'].unique()), data=df_temp);","e7a81b21":"df_temp['zipcode_mean']","ce1e663e":"df_train.head()","8138b6bf":"from sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm\n\ntrain_columns = [c for c in df_train.columns if c not in ['id','price','per_price', 'per_price15']]\n\nmodel = sm.OLS(df_train['price'].values, df_train[train_columns])\nresult = model.fit()\nprint(result.summary())","f96c9dfd":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\nvif = pd.DataFrame()\n\nvif[\"Features\"] = df_train.columns\nvif[\"VIF Values\"] = [variance_inflation_factor(\n    df_train.values, i) for i in range(df_train.shape[1])]\n\nvif.sort_values(by='VIF Values',ascending=False)","ada3b104":"y_reg = np.expm1(df_train['price'])","6d078dc2":"# code : https:\/\/www.kaggle.com\/karell\/kakr-2nd-house-price-xgb-starter-109145\nimport xgboost as xgb\n\nxgb_params = {\n    'eta': 0.01,\n    'max_depth': 6,\n    'subsample': 0.8,\n    'colsample_bytree': 0.8,\n    'objective': 'reg:linear',\n    'eval_metric': 'rmse',\n    'silent': 1\n}\n\nlog_y_reg = np.log1p(y_reg)\nprint('Transform DMatrix...')\ndtrain = xgb.DMatrix(df_train[train_columns], log_y_reg)\ndtest = xgb.DMatrix(df_test[train_columns])\n\nprint('Start Cross Validation...')\n\ncv_output = xgb.cv(xgb_params, dtrain, num_boost_round=10000, early_stopping_rounds=50,verbose_eval=500, show_stdv=False)\nprint('best num_boost_rounds = ', len(cv_output))\nrounds = len(cv_output)\n\nmodel = xgb.train(xgb_params, dtrain, num_boost_round = rounds)\npreds = model.predict(dtest)\n\nxgb1_sub = df_test[['id']]\nxgb1_sub['price'] = preds","ea8d67fa":"# code : https:\/\/www.kaggle.com\/karell\/kakr-2nd-house-price-xgb-starter-109145\nimport xgboost as xgb\n\nxgb_params = {\n    'eta': 0.01,\n    'max_depth': 6,\n    'subsample': 0.8,\n    'colsample_bytree': 0.8,\n    'objective': 'reg:linear',\n    'eval_metric': 'rmse',\n    'silent': 1\n}\n\nprint('Transform DMatrix...')\ndtrain = xgb.DMatrix(df_train[train_columns], y_reg)\ndtest = xgb.DMatrix(df_test[train_columns])\n\nprint('Start Cross Validation...')\n\ncv_output = xgb.cv(xgb_params, dtrain, num_boost_round=20000, early_stopping_rounds=50,verbose_eval=500, show_stdv=False)\nprint('best num_boost_rounds = ', len(cv_output))\nrounds = len(cv_output)\n\nmodel = xgb.train(xgb_params, dtrain, num_boost_round = rounds)\npreds = model.predict(dtest)\n\nxgb2_sub = df_test[['id']]\nxgb2_sub['price'] = preds","e3a22d0d":"xgb_sub = pd.merge(xgb1_sub,xgb2_sub,how='left',on='id')\nxgb_sub.columns = ['id','price1','price2']\nxgb_sub['price'] = (0.9*np.expm1(xgb_sub['price1']) + 0.1*xgb_sub['price2'])\nxgb_sub = xgb_sub[['id','price']]","a1c0ce69":"xgb_sub.to_csv(\"submission.csv\",index=False)\n","e3873d14":"\uae40\ud604\uc6b0 \ub2d8\uc758\nHouse Price Prediction EDA (updated 2019.03.12)\n\ud5c8\ud0dc\uba85 \ub2d8\uc758\nGeo Data EDA & Feature Engineering\n\ub450 \uac1c\uc758 \ucee4\ub110\uc744 \ucc38\uace0\ud558\uc5ec Feature\ub97c \ubcc0\uacbd\ud574\ubcf4\uc558\uc2b5\ub2c8\ub2e4.\nsqft_living15 \ub4f1 \uc8fc\ubcc0\uc758 \uc2dc\uc138\ub97c \ubc18\uc601\ud55c 15\ubcc0\uc218\uc640 zipcode\ubcc4 \uadf8\ub8f9\ud551, \ubd80\uc790\/\uac00\ub09c \uc9c0\uc5ed\uacfc\uc758 \uac70\ub9ac\uac00 \uc911\uc694\ud55c Feature\uac00 \ub420 \uc218 \uc788\uc74c\uc744 \ud655\uc778\ud574\ubcf8 \ucee4\ub110\uc785\ub2c8\ub2e4.\nmodeling\uc740 \uac04\ub7b5\ud788 XGB\ub9cc \uc801\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\uc88b\uc740 \ucee4\ub110 \uacf5\ubd80\ud560 \uc218 \uc788\uac8c \uacf5\uc720\ud574\uc8fc\uc2e0 \uae40\ud604\uc6b0\ub2d8, \ud5c8\ud0dc\uba85\ub2d8 \uac10\uc0ac\ud569\ub2c8\ub2e4."}}