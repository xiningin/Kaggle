{"cell_type":{"d3aa05e4":"code","a7d1a768":"code","9357d3f6":"code","a6042767":"code","21620ed3":"code","aefdc647":"code","6acb3db9":"code","d831e968":"code","33b6719f":"code","d7e03b98":"code","7edc2794":"code","556e8844":"code","baf04991":"code","4f134665":"code","ab85153e":"code","8f067d1e":"code","d169799d":"code","4adbeb42":"code","104226ed":"code","14918891":"code","1c7cdf09":"code","ad3ab2fb":"code","89ccb570":"code","adbf0ee1":"code","891f8139":"code","444d9d7d":"code","10c97481":"code","aa0a344e":"code","580dd271":"code","994b77cb":"code","e8e4dacb":"code","2035baba":"code","0bfc4f59":"code","7542ac91":"code","ad6b46a0":"code","c98bd597":"code","0608e765":"code","bd6fa015":"code","63b16ccb":"code","2148fb16":"code","bb765bb6":"code","5617c5e0":"code","ab914d1f":"code","4e633c05":"code","c0df8691":"code","80772bf1":"code","ee6848f7":"code","3cf70547":"code","0139d117":"code","7130a6df":"code","8504daf8":"code","aaa50190":"code","7e1c2f29":"markdown","95bc367d":"markdown","9282d67d":"markdown","0bc15728":"markdown","f59da6c5":"markdown","75b5cff6":"markdown","3a666356":"markdown","5bb8eb88":"markdown","9180a8ac":"markdown","189e7024":"markdown","377a122c":"markdown","0ea5d9c9":"markdown","aec00e9a":"markdown","75f34e7c":"markdown","1e512609":"markdown","8d7757bb":"markdown","8d78d541":"markdown","4239cb10":"markdown","e30b8558":"markdown","56e2b297":"markdown","b3a15932":"markdown","70ffc16a":"markdown","a4f8f190":"markdown","4caa8c1f":"markdown","6bac1aa3":"markdown","070fc5be":"markdown","ec38ac37":"markdown","60939858":"markdown","3341cf67":"markdown","baf36bf9":"markdown","5dd34555":"markdown","71d2e40b":"markdown","a22a2183":"markdown","f412a28d":"markdown","64b6b26a":"markdown","fb2f38b6":"markdown","7399932d":"markdown","1c88bd30":"markdown","3f83e603":"markdown"},"source":{"d3aa05e4":"import numpy as np\nimport pandas as pd","a7d1a768":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno\n%matplotlib inline","9357d3f6":"import cufflinks as cf\ncf.go_offline()","a6042767":"my_train_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\nmy_test_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")","21620ed3":"my_train_data.describe(include=\"all\")","aefdc647":"print(\"Training set shape is: \", my_train_data.shape)\nprint(\"Test set shape is: \", my_test_data.shape)","6acb3db9":"my_train_data.info()","d831e968":"print(my_train_data.columns)","33b6719f":"my_train_data.head(7)","d7e03b98":"my_train_data.info()\nprint('-'*40)\nmy_test_data.info()","7edc2794":"#Missing data in training set\npd.isnull(my_train_data).sum().sort_values(ascending = False)","556e8844":"missingno.matrix(my_train_data)","baf04991":"#Missing data in testing set\nmy_test_data.isnull().sum().sort_values(ascending = False)","4f134665":"missingno.matrix(my_test_data)","ab85153e":"print (my_train_data[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index= False).mean().sort_values(by='Survived', ascending = False))","8f067d1e":"my_train_data['Pclass'].value_counts()","d169799d":"my_train_data[['Pclass', 'Survived']].groupby(['Pclass'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","4adbeb42":"my_train_data['Embarked'].value_counts(dropna = False)\n# Comment: Two missing values","104226ed":"my_train_data[['Embarked', 'Survived']].groupby(['Embarked'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","14918891":"sns.barplot(x=\"Sex\", y=\"Pclass\", data=my_train_data,palette=\"Set3\")","1c7cdf09":"sns.countplot(x=\"Sex\", data= my_train_data, palette=\"Dark2\")","ad3ab2fb":"sns.barplot(x=\"Sex\", y=\"Survived\", data=my_train_data, palette=\"hls\")","89ccb570":"sns.barplot(x = 'Pclass', y ='Survived', data = my_train_data)\nplt.ylabel('Survival Probability')\nplt.title('Survival Probability by Passenger Class')","adbf0ee1":"se = sns.factorplot(x = 'Pclass', y = 'Survived', hue = 'Sex', data = my_train_data, kind = 'bar')\nse.despine(left = False)\nplt.ylabel('Survival Probability')\nplt.title('Survival Probability by Sex and Passenger Class')","891f8139":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Sex',data=my_train_data,palette='RdBu_r')","444d9d7d":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Pclass',data=my_train_data,palette='rainbow')","10c97481":"print(\"Percentage of females who Survived is=\", my_train_data[\"Survived\"][my_train_data[\"Sex\"] == 'female'].value_counts(normalize = True)[1]*100)","aa0a344e":"sns.distplot(my_train_data['Age'].dropna(),kde=False,color='darkred',bins=30)","580dd271":"my_train_data['Age'].hist(bins=30,color='darkred',alpha=0.7)","994b77cb":"sns.countplot(x='SibSp',data=my_train_data)","e8e4dacb":"print(\"Percentage of males who survived is=\", my_train_data[\"Survived\"][my_train_data[\"Sex\"] == 'male'].value_counts(normalize = True)[1]*100)","2035baba":"my_train_data['Fare'].hist(color='green',bins=40,figsize=(8,4))","0bfc4f59":"my_train_data['Fare'].iplot(kind='hist',bins=30,color='green')","7542ac91":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=my_train_data,palette='winter')","ad6b46a0":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age","c98bd597":"my_train_data['Age'] = my_train_data[['Age','Pclass']].apply(impute_age,axis=1)","0608e765":"sns.heatmap(my_train_data.isnull(),yticklabels=False,cbar=False,cmap='viridis')","bd6fa015":"my_train_data.drop('Cabin',axis=1,inplace=True)","63b16ccb":"my_train_data.head()","2148fb16":"my_train_data.dropna(inplace=False)","bb765bb6":"my_train_data.info()","5617c5e0":"sex = pd.get_dummies(my_train_data['Sex'],drop_first=True)\nembark = pd.get_dummies(my_train_data['Embarked'],drop_first=True)","ab914d1f":"my_train_data.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)","4e633c05":"my_train_data = pd.concat([my_train_data,sex,embark],axis=1)","c0df8691":"my_train_data.head()","80772bf1":"from sklearn.model_selection import train_test_split","ee6848f7":"X_train, X_test, y_train, y_test = train_test_split(my_train_data.drop('Survived',axis=1), \n                                                    my_train_data['Survived'], test_size=0.30, \n                                                    random_state=101)","3cf70547":"from sklearn.linear_model import LogisticRegression","0139d117":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","7130a6df":"predictions = logmodel.predict(X_test)","8504daf8":"from sklearn.metrics import classification_report","aaa50190":"print(classification_report(y_test,predictions))","7e1c2f29":"**Now apply that function!**","95bc367d":"**Great! Our data is ready for our model!\n**\n# Building a Logistic Regression model\n \nLet's start by splitting our data into a training set and test set.\n# Train Test Split","9282d67d":"# C) Embarked","0bc15728":"**This box show Percentage of females who survived by using train data**","f59da6c5":"**Great! Let's go ahead and drop the Cabin column and the row in Embarked that is NaN.**","75b5cff6":"\n\n#  Titanic  Predictions \n\n(This is a good and simple code for you)  \n\n**Please consider upvoting if this is useful to you! :)**","3a666356":"**Now let's check that heat map again!**","5bb8eb88":"\n**Let's move on to evaluate our model!**\n\n# Evaluation\n\nWe can check precision,recall,f1-score using classification report!","9180a8ac":"* Number of passengers saved by age","189e7024":"**Let's take a quick moment to show an example of cufflinks!**","377a122c":"# 3-Data Analysis\n\nwhats up in our dataset\n\nget a list of the features within the titanic dataset","0ea5d9c9":"**let go and watch useless values**","aec00e9a":"**Contents \n**\n1-Import Necessary Libraries\n\n2-Read In and Explore the Data\n\n3-Data Analysis\n\n4-Data Visualization\n\n5-Cleaning Data\n\n6-Building a Logistic Regression model\n\n7-Train Test Split\n\n8-Evaluation","75f34e7c":"**Data types, missing data and summary statistics**","1e512609":"# * **Categorical variables**","8d7757bb":"# Cufflinks:\n \nCufflinks is another library that connects the Pandas data frame with Plotly enabling users to create visualizations directly from Pandas","8d78d541":"# B) Pclass","4239cb10":"Looking training data by describe() and info()","e30b8558":"**Data Cleaning**\n\n* We want to fill in missing age data instead of just dropping the missing age data rows.\n\n* One way to do this is by filling in the mean age of all the passengers (imputation). \n\n* However we can be smarter about this and check the average age by passenger class. For example:","56e2b297":"Some Questions!\n\nDid anyone from 3rd class survived the Titanic?","b3a15932":"\nWe can see the wealthier passengers in the higher classes tend to be older,which makes sense.\n\nWe'll use these average age values to impute based on Pclass for Age.","70ffc16a":"Some Questions!\n\nHow many females survived the Titanic?\n\nWhat was the survival rate on the Titanic?","a4f8f190":"# Nacessary Information (according to this table)\n\n\nSurvival: Survival (0 = No; 1 = Yes)\n\nPclass: Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd)\n\nName : Name\n\nSex : Sex\n\nAge : Age\n\nSibsp : Number of Siblings\/Spouses Aboard\n\nParch : Number of Parents\/Children Aboard\n\nTicket : Ticket Number\n\nFare : Passenger Fare\n\nCabin : Cabin Number\n\nEmbarked : Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)","4caa8c1f":"# A) SEX","6bac1aa3":"**2-Read our training and testing data**\n\n**Importing our CSV files**","070fc5be":"# 1) Import Necessary Libraries","ec38ac37":"*  Ticket Prices for the Titanic","60939858":"* Number of passengers saved by SibSp","3341cf67":"# Let's have a look at the datasets","baf36bf9":"**1-2: visualization libraries**","5dd34555":"**What was the survival rate on the Titanic(by Sex and Pclass)**","71d2e40b":"**This chart shows survival of passangers on the titanic(by Sex)**","a22a2183":"# **4-Data Visualization**","f412a28d":"# Training and Predicting","64b6b26a":"Survival Rate based on Sex and Pclass(passenger class (1st, 2nd, 3rd))","fb2f38b6":"**1-1: data analysis libraries**","7399932d":"****Please consider upvoting if this is useful to you!****","1c88bd30":"* We can see that except for the abovementioned missing values, no NaN values exist.","3f83e603":"**Converting Categorical Features:**\n\nWe'll need to convert categorical features to dummy variables using pandas! Otherwise our machine learning algorithm won't be able to directly take in those features as inputs."}}