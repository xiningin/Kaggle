{"cell_type":{"b825b785":"code","1b67b249":"code","f8e41655":"code","9dbc89d9":"code","33cf67f4":"markdown"},"source":{"b825b785":"'''\nimport os\nimport SimpleITK\nimport numpy as np\nimport cv2\nfrom tqdm import tqdm\nimport shutil\n \ndef convert_from_dicom_to_jpg(img,low_window,high_window,save_path):\n    lungwin = np.array([low_window*1.,high_window*1.])\n    newimg = (img-lungwin[0])\/(lungwin[1]-lungwin[0])    #\u5f52\u4e00\u5316\n    newimg = (newimg*255).astype('uint8')                #\u5c06\u50cf\u7d20\u503c\u6269\u5c55\u5230[0,255]\n    stacked_img = np.stack((newimg,) * 3, axis=-1)\n    cv2.imwrite(save_path, stacked_img, [int(cv2.IMWRITE_JPEG_QUALITY), 100])\n \nif __name__ == '__main__':\n    #dicom\u6587\u4ef6\u76ee\u5f55\n    dicom_dir = '..\/input\/siim-covid19-detection\/test\/'\n \n    path = \".\/test\/study\/\"\n    if os.path.exists(path):\n        shutil.rmtree(path)\n    os.makedirs(path)\n    picsum = 0\n    for dirname, _, filenames in tqdm(os.walk(dicom_dir)):\n        for i in filenames:\n            picsum += 1\n            dcm_image_path = os.path.join(dirname,i)  # \u8bfb\u53d6dicom\u6587\u4ef6\n            name, _ = os.path.splitext(i)\n            output_jpg_path = os.path.join(path, name+'.png')\n            ds_array = SimpleITK.ReadImage(dcm_image_path)  # \u8bfb\u53d6dicom\u6587\u4ef6\u7684\u76f8\u5173\u4fe1\u606f\n            img_array = SimpleITK.GetArrayFromImage(ds_array)  # \u83b7\u53d6array\n            # SimpleITK\u8bfb\u53d6\u7684\u56fe\u50cf\u6570\u636e\u7684\u5750\u6807\u987a\u5e8f\u4e3azyx\uff0c\u5373\u4ece\u591a\u5c11\u5f20\u5207\u7247\u5230\u5355\u5f20\u5207\u7247\u7684\u5bbd\u548c\u9ad8\uff0c\u6b64\u5904\u6211\u4eec\u8bfb\u53d6\u5355\u5f20\uff0c\u56e0\u6b64img_array\u7684shape\n            # \u7c7b\u4f3c\u4e8e \uff081\uff0cheight\uff0cwidth\uff09\u7684\u5f62\u5f0f\n            shape = img_array.shape\n            img_array = np.reshape(img_array, (shape[1], shape[2]))  # \u83b7\u53d6array\u4e2d\u7684height\u548cwidth\n            high = np.max(img_array)\n            low = np.min(img_array)\n            convert_from_dicom_to_jpg(img_array, low, high, output_jpg_path)  # \u8c03\u7528\u51fd\u6570\uff0c\u8f6c\u6362\u6210jpg\u6587\u4ef6\u5e76\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684\u8def\u5f84\n    print('\u56fe\u7247\u603b\u6570\uff1a', picsum)\n'''","1b67b249":"!conda install '\/kaggle\/input\/pydicom-conda-helper\/libjpeg-turbo-2.1.0-h7f98852_0.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/libgcc-ng-9.3.0-h2828fa1_19.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/gdcm-2.8.9-py37h500ead1_1.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/conda-4.10.1-py37h89c1867_0.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/certifi-2020.12.5-py37h89c1867_1.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/openssl-1.1.1k-h7f98852_0.tar.bz2' -c conda-forge -y","f8e41655":"import os\n\nfrom PIL import Image\nimport pandas as pd\nfrom tqdm.auto import tqdm\n\nimport numpy as np\nimport pydicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\n\ndef read_xray(path, voi_lut = True, fix_monochrome = True):\n    # Original from: https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way\n    dicom = pydicom.read_file(path)\n    \n    # VOI LUT (if available by DICOM device) is used to transform raw DICOM data to \n    # \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n               \n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n        \n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n        \n    return data\n\n\ndef resize(array, size, keep_ratio=False, resample=Image.LANCZOS):\n    # Original from: https:\/\/www.kaggle.com\/xhlulu\/vinbigdata-process-and-resize-to-image\n    im = Image.fromarray(array)\n    \n    if keep_ratio:\n        im.thumbnail((size, size), resample)\n    else:\n        im = im.resize((size, size), resample)\n    \n    return im","9dbc89d9":"split = 'test'\nsave_dir = f'.\/{split}\/'\n\nos.makedirs(save_dir, exist_ok=True)\n\nsave_dir = f'.\/{split}\/study\/'\nos.makedirs(save_dir, exist_ok=True)\n\npicsum = 0\nfor dirname, _, filenames in tqdm(os.walk(f'..\/input\/siim-covid19-detection\/{split}')):\n    for file in filenames:\n        picsum += 1\n        #print(picsum)\n        # set keep_ratio=True to have original aspect ratio\n        xray = read_xray(os.path.join(dirname, file))\n        im = resize(xray, size=512)  \n        study = dirname.split('\/')[-2] + '_study.png'\n        #study = dirname.split('\/')[-2] + '_study'\n        im.save(os.path.join(save_dir, study))\nprint(picsum)","33cf67f4":"* \u6bcf\u6b21\u9a8c\u8bc1\u7ed3\u679c\u7684\u65f6\u5019\u90fd\u91cd\u65b0\u5206\u5272\u4e00\u6b21\u6d4b\u8bd5\u6570\u636e\u96c6\u5b9e\u5728\u662f\u592a\u6d6a\u8d39\u65f6\u95f4\u4e86\uff0c\u4e8e\u662f\u5199\u4e00\u6bb5\u811a\u672c\u6765\u5b8c\u6210\u5206\u5272\uff0c\u6ce8\u610fkaggle\u91cc\u9762\u662f\u4e0d\u80fd\u6279\u91cf\u4e0b\u8f7d\u751f\u6210\u7684\u6587\u4ef6\u7684\uff0c\u6240\u4ee5\u6211\u8fd8\u662f\u5efa\u8bae\u4f60\u672c\u5730\u6267\u884c\u8fd9\u4e2a\u811a\u672c\uff0c\u7136\u540e\u4e0a\u4f20\u6210\u4e3a\u81ea\u5df1\u7684\u6570\u636e\u96c6\uff0c\u4ee5\u4fbf\u4f7f\u7528\u3002"}}