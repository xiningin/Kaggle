{"cell_type":{"3fab74db":"code","de9ef5bd":"code","79fbaa61":"code","e2a033d9":"code","3a6fccdf":"code","1a941f61":"code","c35f4314":"code","df30e5d8":"code","257b5397":"code","56f21fb7":"code","b5a3316d":"markdown","6e772bcd":"markdown","b312300b":"markdown","b1646ce0":"markdown","d3d41b54":"markdown","6c7d94df":"markdown","8f8860c4":"markdown","4e50e80a":"markdown"},"source":{"3fab74db":"from sklearn.metrics import confusion_matrix\nimport pandas as pd\nimport seaborn as sn\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np\n\ny_true = [\"honda\", \"chevrolet\", \"honda\", \"toyota\", \"toyota\", \"chevrolet\"]\ny_pred = [\"honda\", \"chevrolet\", \"honda\", \"toyota\", \"toyota\", \"honda\"]\ndata = confusion_matrix(y_true, y_pred)\ndf_cm = pd.DataFrame(data, columns=np.unique(y_true), index = np.unique(y_true))\ndf_cm.index.name = 'Actual'\ndf_cm.columns.name = 'Predicted'\nplt.figure(figsize = (10,7))\nsn.set(font_scale=1.4)#for label size\nsn.heatmap(df_cm, cmap=\"Blues\", annot=True,annot_kws={\"size\": 16})# font size","de9ef5bd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix\n\ndef plot_cm(y_true, y_pred, figsize=(10,10)):\n    cm = confusion_matrix(y_true, y_pred, labels=np.unique(y_true))\n    cm_sum = np.sum(cm, axis=1, keepdims=True)\n    cm_perc = cm \/ cm_sum.astype(float) * 100\n    annot = np.empty_like(cm).astype(str)\n    nrows, ncols = cm.shape\n    for i in range(nrows):\n        for j in range(ncols):\n            c = cm[i, j]\n            p = cm_perc[i, j]\n            if i == j:\n                s = cm_sum[i]\n                annot[i, j] = '%.1f%%\\n%d\/%d' % (p, c, s)\n            elif c == 0:\n                annot[i, j] = ''\n            else:\n                annot[i, j] = '%.1f%%\\n%d' % (p, c)\n    cm = pd.DataFrame(cm, index=np.unique(y_true), columns=np.unique(y_true))\n    cm.index.name = 'Actual'\n    cm.columns.name = 'Predicted'\n    fig, ax = plt.subplots(figsize=figsize)\n    sns.heatmap(cm, cmap= \"YlGnBu\", annot=annot, fmt='', ax=ax)\n    \nplot_cm(y_true, y_pred)","79fbaa61":"! pip -q install pygal","e2a033d9":"import pygal\nfrom IPython.display import display, HTML\nfrom pygal.style import RedBlueStyle\n\nbase_html = \"\"\"\n<!DOCTYPE html>\n<html>\n  <head>\n  <script type=\"text\/javascript\" src=\"http:\/\/kozea.github.com\/pygal.js\/javascripts\/svg.jquery.js\"><\/script>\n  <script type=\"text\/javascript\" src=\"https:\/\/kozea.github.io\/pygal.js\/2.0.x\/pygal-tooltips.min.js\"\"><\/script>\n  <\/head>\n  <body>\n    <figure>\n      {rendered_chart}\n    <\/figure>\n  <\/body>\n<\/html>\n\"\"\"\n\ndef galplot(chart):\n    rendered_chart = chart.render(is_unicode=True)\n    plot_html = base_html.format(rendered_chart=rendered_chart)\n    display(HTML(plot_html))\ndef plot_cm(y_true, y_pred):\n    labels = np.unique(y_true)\n    cm = confusion_matrix(y_true, y_pred, labels=labels)\n    dot_chart = pygal.Dot(x_label_rotation=30, interpolate='cubic', style=RedBlueStyle)\n    dot_chart.title = 'Confusion Matrix'\n    dot_chart.x_labels = labels\n    dot_chart.x_title = \"Predicted\"\n    dot_chart.y_title = \"Actual\"\n    for i in range(len(labels)):\n        dot_chart.add(labels[i], cm[i,:])\n    galplot(dot_chart)\n    \nplot_cm(y_true, y_pred)","3a6fccdf":"! pip install -q -U altair notebook vega","1a941f61":"from itertools import product\nimport altair as alt\nalt.renderers.enable('notebook')\n\nlabels = np.unique(y_true)\ncm = confusion_matrix(y_true, y_pred, labels=labels)\ncm = [y for i in cm for y in i]\nroll = list(product(np.unique(y_true), repeat = 2))\ncolumns = [\"actual\", \"predicted\", \"confusion_matrix\"]\ndf = pd.DataFrame(columns=columns)\nfor i in range(len(roll)):\n    df = df.append({'actual':roll[i][0], 'predicted':roll[i][1], 'confusion_matrix':cm[i]}, ignore_index=True)\n#plot figure\ndef make_example(selector):\n    return alt.Chart(df).mark_rect().encode(\n        x=\"predicted:N\",\n        y=\"actual:N\",\n        color=alt.condition(selector, 'confusion_matrix', alt.value('lightgray'))\n    ).properties(\n        width=600,\n        height=480\n    ).add_selection(\n        selector\n    )\ninterval_x = alt.selection_interval(encodings=['x'], empty='none')\nmake_example(interval_x)","c35f4314":"! pip install -q pandas-ml","df30e5d8":"%matplotlib inline\nfrom pandas_ml import ConfusionMatrix\nconfusion_matrix = ConfusionMatrix(y_true, y_pred)\nconfusion_matrix.plot(normalized=True)","257b5397":"! pip install -q scikit-plot","56f21fb7":"import scikitplot as skplt\n\nskplt.metrics.plot_confusion_matrix(\n    y_true, \n    y_pred,\n    figsize=(12,12))","b5a3316d":"In a typical supervised learning problem setting, confusion matrix is used to layout the performance of an algorithm. By looking at the confusion matrix, we can understand how well the algorithm works for specific class of choosing. It's commonly used to describe the performance of a classification model. I wanted to create a quick reference guide and include various different libraries to plot confusion matrix so that you can use any one of them in your workload.\n\nThere are many more methods to visualize confusion matrix. If you have a favorite one that you would like to see in this notebook, feel free to **leave comment** and I'll add them, too. \n\n## Table of Content:\n[1. Seaborn Heatmap ](#first-bullet)\n\n[2. Seaborn Heatmap More Analysis](#second-bullet)\n\n[3. Interactive Plotting with Pygal ](#third-bullet)\n\n[4. Interactive Plotting with Altair](#fourth-bullet)\n\n[5. Pandas Confusion Matrix](#fifth-bullet)\n\n[6. Scikit-plot Confusion Matrix](#sixth-bullet)","6e772bcd":"If you like this notebook, please feel free to **UPVOTE**! **Leave Comment** for your suggestions so we can create one big confusion matrix visualization guide together.  \n\nStay Tuned for More!","b312300b":"## 6. Scikit-plot Confusion Matrix <a class=\"anchor\" id=\"sixth-bullet\"><\/a>\n\nDependencies: pip install scikit-plot","b1646ce0":" ## 3. Interactive Plotting with Pygal <a class=\"anchor\" id=\"third-bullet\"><\/a>\n\nDependecies : pip install pygal","d3d41b54":"## 4. Interactive Plotting with Altair <a class=\"anchor\" id=\"fourth-bullet\"><\/a>\n\nDependecies : pip install -U altair notebook vega\n\nfork it and run it by yourself to see the plot","6c7d94df":"## 1. Seaborn Heatmap <a class=\"anchor\" id=\"first-bullet\"><\/a>","8f8860c4":"## 2. Seaborn Heatmap More Analysis <a class=\"anchor\" id=\"second-bullet\"><\/a>\n","4e50e80a":"## 5. Pandas Confusion Matrix <a class=\"anchor\" id=\"fifth-bullet\"><\/a>\n\nDependencies: pip install pandas-ml"}}