{"cell_type":{"51d30d73":"code","915baa64":"code","8ac5911d":"code","2d7c9e28":"code","653fcc3f":"code","d2ae3582":"code","5ae1c18d":"code","a5d96b79":"code","48848f7c":"code","559d863c":"code","c834a32d":"code","051baca0":"code","4edc29cc":"code","e4573db6":"code","74ecd6c0":"code","d77ed273":"code","369b4b0e":"code","c0d6d742":"code","22932e51":"code","49938b57":"code","e0b61532":"code","5dc95519":"code","8976bba5":"code","3734bf2c":"code","1a62260d":"code","683a9148":"code","76546b0d":"code","1d2a47f3":"code","43e8043c":"code","3aa3f9e9":"markdown"},"source":{"51d30d73":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","915baa64":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport math\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error","8ac5911d":"dataset = pd.read_csv('..\/input\/ece657aw20asg4coronavirus\/time_series_covid19_confirmed_global.csv')\nHubei = dataset[dataset['Province\/State'].isin(['Hubei'])]\nprint(Hubei)","2d7c9e28":"import seaborn as sns; sns.set()\ncopy = dataset.copy()\ncorr = copy.corr(method='kendall')\nplt.figure(figsize=(18,12))\nsns.heatmap(corr, annot=True)","653fcc3f":"from matplotlib import pyplot\nconfirmed_df = copy\ncountries=['China', 'Italy', 'Brazil', 'Canada', 'Germany']\nt = confirmed_df.loc[confirmed_df['Country\/Region']=='China'].iloc[0,4:]\ns = pd.DataFrame({'China':t})\nfor c in countries:    \n    s[c] = confirmed_df.loc[confirmed_df['Country\/Region']==c].iloc[0,4:]\npyplot.plot(range(t.shape[0]), s)","d2ae3582":"data = Hubei.drop(columns=['Province\/State', 'Country\/Region', 'Lat', 'Long'], axis = 1)\ndata","5ae1c18d":"value = data.columns.values\nvalue","a5d96b79":"feature = data.values\nfeature","48848f7c":"date = data.columns.values.tolist()\ndata_new = {'population': feature[0]}","559d863c":"df = pd.DataFrame(data_new)\ndf.index = date\ndf","c834a32d":"df.values","051baca0":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler(feature_range = (0, 1))\ndata = scaler.fit_transform(df.values)","4edc29cc":"def create_dataset(dataset, look_back=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-look_back-1):\n        a = dataset[i:(i+look_back), 0]\n        dataX.append(a)\n        dataY.append(dataset[i + look_back, 0])\n    return np.array(dataX), np.array(dataY)","e4573db6":"from sklearn.model_selection import train_test_split as tts\n\nX, y = create_dataset(data, 10)\nX_train, X_test, y_train, y_test = tts(X, y, test_size = 0.2, random_state = 42)\n\nX_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)\nX_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)","74ecd6c0":"from keras.layers import Dropout\nmodel = Sequential()\nmodel.add(LSTM(128, input_shape=(10, 1), return_sequences = True, activation = 'relu'))\nmodel.add(LSTM(64, return_sequences = True))\nmodel.add(Dropout(0.3))\nmodel.add(LSTM(64, return_sequences = True))\nmodel.add(Dropout(0.1))\nmodel.add(LSTM(128))\nmodel.add(Dense(1))","d77ed273":"import tensorflow as tf\nlearning_rate = tf.keras.callbacks.ReduceLROnPlateau('value_loss', patience = 3, factor = 0.3, min_lr = 0.00001)\n\nmodel.compile(loss='mean_squared_error', optimizer='adam', metrics = ['mae'])\nmodel.fit(X_train, y_train, epochs = 200, batch_size = 20, validation_data = (X_test, y_test), validation_freq = 10, callbacks = [learning_rate])","369b4b0e":"predictions = [df.values[-1]]\nnew = data.copy()\n\nfor i in range(20):\n    prediction = model.predict(new[-10:,:].reshape(1, 10, 1))\n    predictions.append(float(prediction * predictions[-1]))\n    new = np.append(new, prediction, axis = 0)","c0d6d742":"data_predict = list(range(88, 88 + 20))\nplt.plot(df.values)\nplt.plot(data_predict, predictions[1:])\nplt.legend(['Origin', 'Prediction'], loc = 'lower right')","22932e51":"Ontario = dataset[dataset['Province\/State'].isin(['Ontario'])]","49938b57":"data_o = Ontario.drop(columns=['Province\/State', 'Country\/Region', 'Lat', 'Long'], axis = 1)\ndata_o","e0b61532":"feature = data_o.values","5dc95519":"date_r = data_o.columns.values.tolist()\ndata_n = {'population': feature[0]}","8976bba5":"df = pd.DataFrame(data_n)\ndf.index = date\ndf","3734bf2c":"sca = MinMaxScaler(feature_range = (0, 1))\ndata = sca.fit_transform(df.values)","1a62260d":"X, y = create_dataset(data, 10)\nX_train, X_test, y_train, y_test = tts(X, y, test_size = 0.2, random_state = 42)\n\nX_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)\nX_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)","683a9148":"model = Sequential()\nmodel.add(LSTM(128, input_shape=(10, 1), return_sequences = True, activation = 'relu'))\nmodel.add(LSTM(64, return_sequences = True))\nmodel.add(Dropout(0.3))\nmodel.add(LSTM(64, return_sequences = True))\nmodel.add(Dropout(0.1))\nmodel.add(LSTM(128))\nmodel.add(Dense(1))","76546b0d":"import tensorflow as tf\nlearning_rate = tf.keras.callbacks.ReduceLROnPlateau('value_loss', patience = 3, factor = 0.3, min_lr = 0.00001)\n\nmodel.compile(loss='mean_squared_error', optimizer='adam', metrics = ['mae'])\nmodel.fit(X_train, y_train, epochs = 200, batch_size = 20, validation_data = (X_test, y_test), validation_freq = 10, callbacks = [learning_rate])","1d2a47f3":"predictions = [df.values[-1]]\nnew = data.copy()\n\nfor i in range(15):\n    prediction = model.predict(new[-10:,:].reshape(1, 10, 1))\n    predictions.append(float(prediction * predictions[-1]))\n    new = np.append(new, prediction, axis = 0)\n    ","43e8043c":"data_predict = list(range(88, 88 + 15))\nplt.plot(df.values)\nplt.plot(data_predict, predictions[1:])\nplt.legend(['Origin', 'Prediction'], loc = 'upper left')","3aa3f9e9":"### First, use population in Hubei confirmed with coronavirus to find a reasonable RNN model. Then, predict the confirmed population in Ontario with the model to verificate.\n"}}