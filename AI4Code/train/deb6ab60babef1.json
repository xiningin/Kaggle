{"cell_type":{"95e5440e":"code","6d6cce36":"code","1666b523":"code","769d46f3":"code","1203bade":"code","af11e2f8":"code","2a8532b9":"code","238e968d":"code","cb1d4492":"code","248b7bf6":"code","cbb10e66":"code","8aef00e0":"code","488c9286":"code","0d42247e":"code","c318b1f8":"code","8728180f":"code","a6f6b7c4":"code","d38107d4":"code","623f6b86":"code","77cd8c6b":"code","c7b325a5":"code","07d81650":"code","d6cfe5e5":"code","b23f440c":"code","61fb2681":"code","b2275e55":"code","26327ccd":"code","c4e6bd67":"code","3e7242dc":"code","3185bb77":"code","ab4e7320":"code","d2f0b60b":"code","5fce1949":"code","d99dc5ac":"code","228a80c0":"code","a10e5943":"code","f04557ce":"code","918b1165":"code","65763de8":"code","862af95f":"code","c92150a6":"code","63f37c96":"code","3fbf0f80":"code","3cdc48c4":"code","2e027e02":"code","387e47b7":"code","b56d3745":"code","3fa0ce7d":"code","66ace5f0":"code","0ad2a9f1":"code","3877d914":"code","13eb0a19":"code","49dd12e9":"code","f1dc64d8":"code","760ab663":"code","d0e9735b":"code","13eafec0":"code","e226990f":"code","da9b31b0":"code","5f2f1d1d":"code","7a240d9e":"code","c6da4bd3":"code","318ff1e4":"code","926ec460":"code","256e0d12":"code","2440800d":"code","cb9ee80a":"code","6c7424ef":"code","20acaf93":"code","5c7a0d44":"code","afe7ac39":"code","e5b81b81":"code","266e2676":"code","36739bd0":"code","42b4cf0f":"code","9f76861a":"code","f08ce6cf":"code","a4d69fc6":"code","96a83deb":"code","2efc3de4":"code","59de7e8a":"code","0bb4004d":"code","1746d9bb":"code","0f26bcd0":"code","ab82ea19":"code","7f77ef09":"code","f1c58205":"code","c841aaee":"code","787950e8":"code","c36a1bad":"code","db7c299c":"code","ebf10c16":"code","e420e3a1":"code","770ff33b":"code","3de3f969":"markdown","efe9e25e":"markdown","f9603c84":"markdown","eeec8843":"markdown","77d01dee":"markdown","7c484c40":"markdown"},"source":{"95e5440e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d6cce36":"#path of train\ntrain=pd.read_csv(\"..\/input\/titanic\/train.csv\")","1666b523":"#path of test\ntest=pd.read_csv(\"..\/input\/titanic\/test.csv\")","769d46f3":"train.head()\n","1203bade":"test.head()","af11e2f8":"train.isnull().sum()","2a8532b9":"test.isnull().sum()","238e968d":"train.shape","cb1d4492":"train.drop([\"Cabin\"],axis=1,inplace=True)\n","248b7bf6":"train.head()","cbb10e66":"test.drop([\"Cabin\"],axis=1,inplace=True)","8aef00e0":"train.dtypes","488c9286":"train[\"Embarked\"].unique()","0d42247e":"train[\"Embarked\"].mode()","c318b1f8":"train[\"Embarked\"].fillna(value=\"S\",inplace=True)","8728180f":"train[\"Embarked\"].isnull().sum()","a6f6b7c4":"train[\"Age\"].mean()","d38107d4":"train[\"Age\"].fillna(value=29.699,inplace=True)","623f6b86":"train[\"Age\"].isnull().sum()","77cd8c6b":"test[\"Age\"].mean()","c7b325a5":"test[\"Age\"].fillna(value=30.27,inplace=True)","07d81650":"test[\"Fare\"].mean()","d6cfe5e5":"test[\"Fare\"].fillna(value=35.62,inplace=True)","b23f440c":"x=train[\"Survived\"]","61fb2681":"import matplotlib.pyplot as plt\nimport seaborn as sns","b2275e55":"x=train[\"Survived\"].value_counts()\nlabel=[\"Not Survived(0)\",\"Survived(1)\"]\ncolors=[\"#DC143C\",\"#8C000F\"]\nplt.figure(figsize=(12,6))\nplt.pie(x,labels=label,autopct=\"%1.1f%%\",colors=colors)\nplt.show()","26327ccd":"gender=train[\"Sex\"].value_counts()\nlabel=[\"Male\",\"Female\"]\nplt.figure(figsize=(12,6))\nplt.pie(gender,labels=label,autopct=\"%1.1f%%\")\nplt.show()","c4e6bd67":"classes=train[\"Pclass\"].value_counts()\nlabel=[\"1st\",\"2nd\",\"3rd\"]\nplt.pie(classes,labels=label,autopct=\"%1.1f%%\")\nplt.show()","3e7242dc":"Pclass=[\"class1\",\"class2\",\"class3\"]\nsns.countplot(data=train,x=\"Pclass\",hue=\"Survived\")\nplt.gcf().set_size_inches(15, 8)\nplt.xticks(ticks=[0,1,2],labels=Pclass)\nplt.legend([\"No of passengers not survived\",\"No of passengers survived\"])\nplt.show()\n","3185bb77":"Sex=[\"Male\",\"Female\"]\nsns.countplot(data=train,x=\"Sex\",hue=\"Survived\")\nplt.show()","ab4e7320":"Embarked=[\"Cherbourg\", \"Queenstown\", \"Southampton\"]\nsns.countplot(data=train,x=\"Embarked\",hue=\"Survived\")\nplt.xticks(ticks=[0,1,2],labels=Embarked)\nplt.show()","d2f0b60b":"train.isnull().sum()","5fce1949":"#path of file for train\ntrain=pd.read_csv(\"..\/input\/titanic\/train.csv\")\n#path of file for test\ntest=pd.read_csv(\"..\/input\/titanic\/test.csv\")","d99dc5ac":"train.isnull().sum()","228a80c0":"train.drop(\"Cabin\",axis=\"columns\",inplace=True)","a10e5943":"test.drop(\"Cabin\",axis=\"columns\",inplace=True)","f04557ce":"import re\ndef split_it(data):\n    result = re.search('^.*,(.*)\\.\\s.*$', data)\n    if result.group(1) not in [' Mr', ' Miss', ' Mrs', ' Master']:\n        return ' Misc'\n    else:\n        return result.group(1)\n\ntrain['Title'] = train['Name'].apply(split_it)","918b1165":"test['Title'] = test['Name'].apply(split_it)","65763de8":"train","862af95f":"train.drop(\"Name\",axis=\"columns\",inplace=True)","c92150a6":"test","63f37c96":"test.drop(\"Name\",axis=\"columns\",inplace=True)","3fbf0f80":"train['Sex'].replace({\"male\":0,\"female\":1},inplace=True)","3cdc48c4":"test['Sex'].replace({\"male\":0,\"female\":1},inplace=True)","2e027e02":"train[\"Embarked\"].replace({\"S\":0,\"C\":1,\"Q\":2},inplace=True)","387e47b7":"test[\"Embarked\"].replace({\"S\":0,\"C\":1,\"Q\":2},inplace=True)","b56d3745":"train","3fa0ce7d":"train.drop(\"Ticket\",axis=\"columns\",inplace=True)","66ace5f0":"test.drop(\"Ticket\",axis=\"columns\",inplace=True)","0ad2a9f1":"train.drop(\"Fare\",axis=\"columns\",inplace=True)","3877d914":"test.drop(\"Fare\",axis=\"columns\",inplace=True)","13eb0a19":"train[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"),inplace=True)","49dd12e9":"test[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"),inplace=True)","f1dc64d8":"train.isnull().sum()","760ab663":"train[\"Embarked\"].max()","d0e9735b":"train[\"Embarked\"].fillna(value=2,inplace=True)","13eafec0":"test.isnull().sum()","e226990f":"train.drop(\"Title\",axis=\"columns\",inplace=True)","da9b31b0":"test.drop(\"Title\",axis=\"columns\",inplace=True)","5f2f1d1d":"from sklearn.model_selection import train_test_split","7a240d9e":"X=train.drop(\"Survived\",axis=\"columns\")","c6da4bd3":"y=train[\"Survived\"]","318ff1e4":"X","926ec460":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)","256e0d12":"print(len(X_train),len(y_train),len(X_test),len(y_test))","2440800d":"from sklearn.linear_model import LogisticRegression","cb9ee80a":"model=LogisticRegression(solver=\"liblinear\")","6c7424ef":"model.fit(X_train,y_train)","20acaf93":"prediction=model.predict(X_test)","5c7a0d44":"model.score(X_test,y_test)","afe7ac39":"from sklearn.ensemble import RandomForestClassifier","e5b81b81":"model_2=RandomForestClassifier()","266e2676":"model_2.fit(X_train,y_train)","36739bd0":"prediction_2=model_2.predict(X_test)","42b4cf0f":"model_2.score(X_test,y_test)","9f76861a":"from sklearn.tree import DecisionTreeClassifier","f08ce6cf":"model_3=DecisionTreeClassifier()","a4d69fc6":"model_3.fit(X_train,y_train)","96a83deb":"prediction_3=model_3.predict(X_test)","2efc3de4":"model_3.score(X_test,y_test)","59de7e8a":"from sklearn.neighbors import KNeighborsClassifier","0bb4004d":"model_4=KNeighborsClassifier()","1746d9bb":"model_4.fit(X_train,y_train)","0f26bcd0":"prediction_4=model_4.predict(X_test)","ab82ea19":"prediction_4","7f77ef09":"model_4.score(X_test,y_test)","f1c58205":"model_2.fit(X,y)","c841aaee":"final_predict=model_2.predict(test)","787950e8":"final_predict","c36a1bad":"gender_submission=pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","db7c299c":"gender_submission","ebf10c16":"submission=pd.DataFrame({\"PassengerId\":gender_submission[\"PassengerId\"],\"Survived\":final_predict})","e420e3a1":"submission","770ff33b":"submission.to_csv(\"submission.csv\",index=False)","3de3f969":"# Logistic Regression","efe9e25e":"# Decision Tree","f9603c84":"# Final Model=Random Forest","eeec8843":"# Random Forest","77d01dee":"# Machine learning","7c484c40":"# K Nearest Neighbor"}}