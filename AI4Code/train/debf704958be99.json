{"cell_type":{"a4561c05":"code","75f09a3f":"code","9db10e91":"code","de60c03f":"code","97e78536":"code","4703266f":"code","49714473":"code","63d49695":"code","98e878a4":"code","0e3da69e":"code","f38d5ce4":"code","dcda8d44":"code","c872f23e":"code","abeec963":"code","8bd215bf":"code","5a1e4aed":"code","6dba0270":"code","77c6ee95":"code","c0e6ae01":"code","83dd1994":"code","b058f4ed":"code","e30b9a35":"code","ca544991":"code","5385645a":"code","2adad73c":"code","b8048796":"code","f8df826c":"code","094053ea":"code","275980a0":"code","c8397b62":"code","fd3e5490":"code","896f58c9":"code","acf8ccb1":"code","daa9dc05":"code","fce3704f":"code","a2288628":"code","597a8a8c":"code","8cf13bba":"code","964c9983":"code","9cff8a59":"code","11ca3ea4":"code","9d57ef36":"code","ba24a08d":"code","38ae8080":"code","ec0d1056":"code","92daa34e":"code","017be5ce":"code","516bc82f":"code","e7cf5e5a":"code","c4e8da7c":"code","a9f52830":"code","49dea657":"code","46d72ed1":"code","7a4cb9e5":"code","9a67be96":"code","6bfca053":"code","3cbb0493":"code","f4c1753c":"code","6c0f40ee":"code","380ab59e":"code","dffcb6cb":"code","70e3eb8f":"code","0e3e96d0":"code","c06cb600":"code","19d3069a":"code","eaadb212":"code","3c143c79":"code","98acf2c6":"code","b875ed0f":"code","cef9477d":"code","ed1b1195":"code","36235958":"code","f6f98ce1":"code","fa14460c":"code","49f87172":"code","0dd37d73":"code","6a92f28b":"code","d4455f13":"code","b4f184ff":"code","93a91bb7":"markdown","c8b0c5b9":"markdown","e2f9c2ae":"markdown","044ded20":"markdown","29be1cb6":"markdown","ca107465":"markdown","6a1755a7":"markdown","c8a410d8":"markdown","9ccd101b":"markdown","ac14ec26":"markdown","0c78251b":"markdown","88ef618f":"markdown","d00edd08":"markdown","95a92cec":"markdown","62fd3420":"markdown","1b077faa":"markdown","20efe543":"markdown","949ab8be":"markdown","c23cffd1":"markdown","ba9a898f":"markdown","16273a89":"markdown","7930d506":"markdown","e2d34677":"markdown","17230cbb":"markdown","ec20d386":"markdown","8c9df754":"markdown","fa4a6ee7":"markdown","93a1109d":"markdown","66721b73":"markdown","fa3f710b":"markdown","bc9847d0":"markdown","183f2e7a":"markdown","f7b67652":"markdown","56876262":"markdown","1e875f7e":"markdown","30d0fd6b":"markdown","991879a5":"markdown","1683231b":"markdown","183a84a1":"markdown","7c1caf94":"markdown","cb3c3aa0":"markdown","5ba02f5d":"markdown","a9d118d3":"markdown","536cdcc5":"markdown"},"source":{"a4561c05":"pip install pyforest","75f09a3f":"pip install sci_analysis","9db10e91":"from pyforest import *\nfrom datetime import datetime\nfrom scipy.stats import norm\nfrom scipy import stats\nfrom scipy.stats import skew\nimport matplotlib.lines as mlines\nimport warnings\nwarnings.filterwarnings('ignore')\nimport plotly.graph_objects as go\nfrom sci_analysis import analyze\nimport pandas_profiling as pp\n\nsns.set_style(\"darkgrid\", {\"axes.facecolor\": \".9\"})\npd.options.display.float_format = '{:,.4f}'.format\npd.set_option(\"display.max_columns\", 500)\npd.set_option(\"display.max_rows\", 500)","de60c03f":"class color:\n   PURPLE = '\\033[95m'\n   CYAN = '\\033[96m'\n   DARKCYAN = '\\033[36m'\n   BLUE = '\\033[94m'\n   GREEN = '\\033[92m'\n   YELLOW = '\\033[93m'\n   RED = '\\033[91m'\n   BOLD = '\\033[1m'\n   UNDERLINE = '\\033[4m'\n   END = '\\033[0m'","97e78536":"books = pd.read_csv('..\/input\/goodreadsbooks\/books.csv',error_bad_lines=False)\nbooks.head()","4703266f":"print(\"no. of rows: \",books.shape[0], \"\\n\"\"no. of columns: \",books.shape[1])","49714473":"books.info()","63d49695":"books.rename(columns={'  num_pages': 'num_pages'},inplace=True)","98e878a4":"books.columns","0e3da69e":"date = books.publication_date.tolist()\nMonth = []\nYear = []\nMonth_Year = []\nfor i in date:\n    a = i.split('\/')\n    a.pop(1)\n    Month.append(int(a[0]))\n    Year.append(a[1])\n    Month_Year.append(a[0]+'\/'+a[1])","f38d5ce4":"#change to month\nimport datetime\nMonth_name = []\nfor i in Month:\n    a=datetime.date(1900, i, 1).strftime('%B')\n    Month_name.append(a)","dcda8d44":"books['Month'] = pd.Series(Month_name, index=books.index)\nbooks['Year'] = pd.Series(Year, index=books.index)\nbooks['Month_Year'] = pd.Series(Month_Year, index=books.index)","c872f23e":"book2 = books.copy()","abeec963":"#Let's create a categorical column for average_rating\n\ndef create_cat(i):\n    if i >= 0 and i <=1:\n        return '0-1'\n    if i >= 1 and i <=2:\n        return '1-2'\n    if i >= 2 and i <=3:\n        return '2-3'\n    if i >= 3 and i <=4:\n        return '3-4'\n    if i >= 4 and i <=5:\n        return '4-5'","8bd215bf":"books['avg_ratings'] = books['average_rating'].apply(create_cat)\nbooks.head(3)","5a1e4aed":"#Dividing numeric and categorical columns\n\nnumerical = books.select_dtypes(['float64','int64']).columns.values.tolist()\ncategorical = books.select_dtypes(['object']).columns.values.tolist()\nprint('Numerical Columns\\n\\n',numerical)\nprint()\nprint('Categorical Columns\\n\\n',categorical)","6dba0270":"descr_stats = books[numerical].describe().T\ndescr_stats['Variance'] = books[numerical].var()\ndescr_stats['IQR'] = descr_stats['75%']-descr_stats['25%']\ndescr_stats['Range'] = descr_stats['max']-descr_stats['min']\ndescr_stats.rename(columns={'count':'Count',\n                            'mean':'Mean',\n                            'std':'Standard Deviation',\n                            '25%':'Q1 (25%)',\n                            '50%':'Q2 (50%)',\n                            '75%':'Q3 (75%)'},inplace=True)\ndescr_stats.T","77c6ee95":"for i in books.describe().columns:\n    a = skew(books[i])\n    if a > 0:\n        print('\\n',i,':\\n\\nSkewnes of the data = {}\\n\\tnot normally distributed.'.format(a))\n    elif a < 0:\n        print('\\n',i,':\\n\\nSkewnes of the data = {}\\n\\tnot normally distributed.'.format(a))\n    else:\n        print('\\n',i,':\\n\\nSkewnes of the data = {}\\n\\tnormally distributed'.format(a))\n","c0e6ae01":"books.describe(exclude=[np.number])","83dd1994":"# Are there any duplicates?\ndups = books.duplicated()\nprint('Number of duplicate rows = %d' % (dups.sum()))\nbooks[dups]","b058f4ed":"#Any missing values?\nbooks.isnull().sum().values.any()","e30b9a35":"#Let's check the unique values\nfor i in books.columns:\n    print('\\n',i,'\\n\\n',books[i].unique())","ca544991":"print('\\nBooks with authors name as `NOT A BOOK`:',len(books[books['authors']=='NOT A BOOK']))","5385645a":"books[books['authors']=='NOT A BOOK'].iloc[:,:3]","2adad73c":"books = books[books['authors']!='NOT A BOOK']","b8048796":"print('\\nBooks with total number of pages = 0:',len(books[books['num_pages'] == 0]))","f8df826c":"books = books[books['num_pages'] != 0]","094053ea":"print(\"no. of rows after removing bad data: \",books.shape[0], \"\\n\"\"no. of columns after removing bad data: \",books.shape[1])\n\nprint('total no of rows dropped:',11123-books.shape[0],'i.e.',\n      round(((11123-books.shape[0])\/11123)*100,4),'% of the original dataset')","275980a0":"print('\\nBook with maximum rating count=',books['ratings_count'].max())\n(books[books['ratings_count'] == books['ratings_count'].max()])","c8397b62":"print('highest average rating = ',books['average_rating'].max())\nprint('lowest average rating =',books['average_rating'].min())","fd3e5490":"books[books['average_rating'] > 5]","896f58c9":"books[books['average_rating'] < 0 ]","acf8ccb1":"avg_rat = books[books['average_rating'] == books['average_rating'].max()]\nprint('Total number of books with highest average rating = ',len(avg_rat))\navg_rat.iloc[:10,:3]","daa9dc05":"avg_rat = books[books['average_rating'] == books['average_rating'].min()]\nprint('Total number of books with lowest average rating = ',len(avg_rat))\navg_rat.iloc[:10,:3]","fce3704f":"profile = pp.ProfileReport(books)\nprofile.to_file(\"output.html\")","a2288628":"#Identifiying outliers with IQR\nsorted(books)\n\nQ1=books.quantile(0.25)\nQ3=books.quantile(0.75)\nIQR=Q3-Q1\nprint(IQR)","597a8a8c":"iqr = ((books < (Q1 - 1.5 * IQR)) |(books > (Q3 + 1.5 * IQR))).any()\niqr = iqr.to_frame().reset_index().rename(columns={'index':'Columns',0:'Outliers'})\noutliers = iqr[iqr['Outliers']==True]\noutliers","8cf13bba":"books = books[books['ratings_count']<books.ratings_count.quantile(.95)]","964c9983":"print(\"no. of rows after outliers treatment: \",books.shape[0], \"\\n\"\"no. of columns after outliers treatment: \",books.shape[1])\n\nprint('total no of rows dropped:',11123-books.shape[0],'i.e.',round(((11123-books.shape[0])\/11047)*100,4),'% of the original dataset')","9cff8a59":"print('\\n\\naverage_rating')\nanalyze(books['average_rating'])\nprint('\\n\\nnum_pages')\nanalyze(books['num_pages'])\nprint('\\n\\nratings_count')\nanalyze(books['ratings_count'])\nprint('\\n\\ntext_reviews_count')\nanalyze(books['text_reviews_count'])\n","11ca3ea4":"most_pub = books.Month_Year.value_counts().to_frame().reset_index()\nmost_pub.rename(columns={'Month_Year':'Count','index':'Month_Year'},inplace=True)\nmost_pub = most_pub.iloc[:10,:]\nmost_pub.sort_values(by='Count',ascending=False)","9d57ef36":"plt.figure(figsize =[15,5])\nsns.barplot(most_pub.Month_Year,most_pub.Count,palette='BrBG')\nplt.title('It was a good time to publish books!',fontsize=14);","ba24a08d":"most_readlang = books.language_code.value_counts().to_frame().reset_index()\nmost_readlang.rename(columns={'language_code':'Count','index':'language_code'},inplace=True)\nmost_readlang = most_readlang.iloc[:10,:]\nmost_readlang.sort_values(by='Count',ascending=False)","38ae8080":"plt.figure(figsize =[15,5])\nsns.barplot(most_readlang.language_code,most_readlang.Count,palette='BrBG')\nplt.title('Most read language',fontsize=14);","ec0d1056":"most_popauth = books.authors.value_counts().to_frame().reset_index()\nmost_popauth.rename(columns={'authors':'Count','index':'authors'},inplace=True)\nmost_popauth = most_popauth.iloc[:10,:]\nmost_popauth.sort_values(by='Count',ascending=False)","92daa34e":"plt.figure(figsize =[15,5])\nsns.barplot(most_popauth.authors,most_popauth.Count,palette='BrBG')\nplt.title('Most published author',fontsize=14)\nplt.xticks(rotation=25);","017be5ce":"most_poppub = books.publisher.value_counts().to_frame().reset_index()\nmost_poppub.rename(columns={'publisher':'Count','index':'publisher'},inplace=True)\nmost_poppub = most_poppub.iloc[:10,:]\nmost_poppub.sort_values(by='Count',ascending=False)","516bc82f":"plt.figure(figsize =[15,5])\nsns.barplot(most_poppub.publisher,most_poppub.Count,palette='BrBG')\nplt.title('Most popular publisher',fontsize=14)\nplt.xticks(rotation=25);","e7cf5e5a":"most_popyear = books.Year.value_counts().to_frame().reset_index()\nmost_popyear.rename(columns={'Year':'Count','index':'Year'},inplace=True)\nmost_popyear = most_popyear.iloc[:10,:]\nmost_popyear.sort_values(by='Count',ascending=False)","c4e8da7c":"plt.figure(figsize =[15,5])\nsns.barplot(most_popyear.Year.sort_values(ascending=False),most_popyear.Count,palette='BrBG')\nplt.title('Most popular year',fontsize=14)\nplt.xticks(rotation=25);","a9f52830":"most_popmonth = books.Month.value_counts().to_frame().reset_index()\nmost_popmonth.rename(columns={'Month':'Count','index':'Month'},inplace=True)\nmost_popmonth = most_popmonth.iloc[:10,:]\nmost_popmonth.sort_values(by='Count',ascending=False)","49dea657":"plt.figure(figsize =[15,5])\nsns.barplot(most_popmonth.Month,most_popmonth.Count,palette='BrBG')\nplt.title('Most popular month throughout history',fontsize=14)\nplt.xticks(rotation=25);","46d72ed1":"avg_rate = books.avg_ratings.value_counts().to_frame().reset_index()\navg_rate.rename(columns={'avg_ratings':'Count','index':'avg_ratings'},inplace=True)\navg_rate = avg_rate.iloc[:10,:]\navg_rate.sort_values(by='Count',ascending=False)","7a4cb9e5":"plt.figure(figsize =[15,5])\nsns.barplot(avg_rate.avg_ratings,avg_rate.Count,palette='BrBG')\nplt.title('Average ratings',fontsize=14)\nplt.xticks(rotation=25);","9a67be96":"book_name = books.title.value_counts().to_frame().reset_index()\nbook_name.rename(columns={'title':'Count','index':'title'},inplace=True)\nbook_name = book_name.iloc[:10,:]\nbook_name.sort_values(by='Count',ascending=False)","6bfca053":"plt.figure(figsize =[15,5])\nsns.barplot(book_name.title,book_name.Count,palette='BrBG')\nplt.title('Most popular titles',fontsize=14)\nplt.xticks(rotation=25);","3cbb0493":"analyze(books.average_rating,books.num_pages)","f4c1753c":"analyze(books.average_rating,books.ratings_count)","6c0f40ee":"analyze(books.average_rating,books.text_reviews_count)","380ab59e":"analyze(books.num_pages,books.ratings_count)","dffcb6cb":"analyze(books.num_pages,books.text_reviews_count)","70e3eb8f":"analyze(books.ratings_count,books.text_reviews_count)","0e3e96d0":"month_aurt = pd.crosstab(books.authors,books.Month,margins=True)\nmonth_aurt.sort_values(by='All',ascending=False,axis=0,inplace=True)\nmonth_aurt.sort_values(by='All',ascending=False,axis=1,inplace=True)\nmonth_aurt.drop('All',axis=0,inplace=True)\nmonth_aurt.drop('All',axis=1,inplace=True)\nmonth_aurt = month_aurt.iloc[:10,:]\nmonth_aurt","c06cb600":"month_aurt.iloc[:10,:5].plot.kde(figsize = [15,5])\nplt.title('Density curve for total books published by author in a particular month',fontsize=14)\nplt.show()\nplt.figure(figsize =[15,5])\nsns.heatmap(month_aurt,annot=True,cmap='BrBG',linewidths=1)\nplt.title('Total count of books released by author by month',fontsize=14)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.xlabel('Month',fontsize=12)\nplt.ylabel('authors',fontsize=12);","19d3069a":"year_aurt = pd.crosstab(books.authors,books.Year,margins=True)\nyear_aurt.sort_values(by='All',ascending=False,axis=0,inplace=True)\nyear_aurt.sort_values(by='All',ascending=False,axis=1,inplace=True)\nyear_aurt.drop('All',axis=0,inplace=True)\nyear_aurt.drop('All',axis=1,inplace=True)\nyear_aurt = year_aurt.iloc[:10,:10]\nyear_aurt","eaadb212":"year_aurt.iloc[:10,:].plot.kde(figsize = [15,5])\nplt.title('Density curve for total books published by author in a particular year',fontsize=14)\nplt.show()\nplt.figure(figsize =[15,5])\nsns.heatmap(year_aurt,annot=True,cmap='BrBG',linewidths=1)\nplt.title('Total count of books released by author by year',fontsize=14)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.xlabel('Year',fontsize=12)\nplt.ylabel('authors',fontsize=12);","3c143c79":"pop = books[(books['authors'] == 'P.G. Wodehouse')& (books['average_rating']>=4)].sort_values('average_rating',ascending=False).iloc[:10]\npop.loc[:,['title','authors','average_rating']]","98acf2c6":"pop = books[(books['authors'] == 'Rumiko Takahashi')& (books['average_rating']>=4)].sort_values('average_rating',ascending=False).iloc[:10]\npop.loc[:,['title','authors','average_rating']]","b875ed0f":"pop = books[(books['authors'] == 'Orson Scott Card')& (books['average_rating']>=4)].sort_values('average_rating',ascending=False).iloc[:10]\npop.loc[:,['title','authors','average_rating']]","cef9477d":"title_rate1 = books[books['ratings_count'] >= books['ratings_count'].quantile(0.99)]\nprint('Total no of books with 99th percentile of the ratings_count',len(title_rate1))\ntitle_rate1.sort_values('ratings_count',ascending=False,inplace=True)\ntitle_rate1 = title_rate1.iloc[:10,:].loc[:,['title','authors','average_rating','ratings_count','text_reviews_count']]\ntitle_rate1","ed1b1195":"title_rate2 = books[(books['average_rating'] >= books['average_rating'].quantile(0.75))&(books['ratings_count'] >= books['ratings_count'].quantile(0.99))]\nprint('Total no of books high average_rating and ratings_count',len(title_rate2))\ntitle_rate2.sort_values(['ratings_count','average_rating'],ascending=False,inplace=True)\ntitle_rate2 = title_rate2.iloc[:10,:].loc[:,['title','authors','average_rating','ratings_count','text_reviews_count']]\ntitle_rate2","36235958":"title_rate = books[books['text_reviews_count'] >= books['text_reviews_count'].quantile(0.99)]\nprint('Total no of books high text_reviews_count',len(title_rate))\ntitle_rate.sort_values('text_reviews_count',ascending=False,inplace=True)\ntitle_rate = title_rate.iloc[:10,:].loc[:,['title','authors','average_rating','ratings_count','text_reviews_count']]\ntitle_rate","f6f98ce1":"analyze([books['average_rating'],books['num_pages'],books['ratings_count'],books['text_reviews_count']],\n        groups=['average_rating','num_pages','ratings_count','text_reviews_count'])","fa14460c":"#avg_ratings, num_pages, ratings_count\nfig,axes = plt.subplots(3,1,figsize=[15,15])\na=sns.scatterplot(books.num_pages,books.ratings_count,hue=books.avg_ratings,palette='BrBG',ax=axes[0])\nsns.violinplot(books.avg_ratings.sort_values(ascending=True),books.num_pages,palette='BrBG',ax=axes[1])\nsns.barplot(books.avg_ratings.sort_values(ascending=False),books.ratings_count,palette='BrBG',ax=axes[2])\na.set_title('Relationship between num_pages, ratings_count and avg_ratings',fontsize=14)\nplt.show()","49f87172":"#avg_ratings, num_pages, text_reviews_count\nfig,axes = plt.subplots(2,1,figsize=[15,15])\na=sns.scatterplot(books.num_pages,books.text_reviews_count,hue=books.avg_ratings,palette='BrBG',ax=axes[0])\nsns.barplot(books.avg_ratings.sort_values(ascending=False),books.text_reviews_count,palette='BrBG',ax=axes[1])\na.set_title('Relationship between num_pages, text_reviews_count and avg_ratings',fontsize=14)\nplt.show()","0dd37d73":"#avg_ratings, ratings_count, text_reviews_count\nfig,axes = plt.subplots(3,1,figsize=[15,15])\na=sns.scatterplot(books.ratings_count,books.text_reviews_count,hue=books.avg_ratings,palette='BrBG',ax=axes[0])\nsns.barplot(books.avg_ratings.sort_values(ascending=True),books.ratings_count,palette='BrBG',ax=axes[1])\nsns.barplot(books.avg_ratings.sort_values(ascending=False),books.text_reviews_count,palette='BrBG',ax=axes[2])\na.set_title('Relationship between num_pages, ratings_count and avg_ratings',fontsize=14)\nplt.show()","6a92f28b":"rating_aur = pd.crosstab(books.avg_ratings,books.authors,margins=True)\nrating_aur.sort_values(by='All',ascending=False,axis=1,inplace=True)\nrating_aur.sort_values(by='All',ascending=False,axis=0,inplace=True)\nrating_aur.drop('All',axis=1,inplace=True)\nrating_aur.drop('All',axis=0,inplace=True)\nrating_aur = rating_aur.iloc[:,:10]\nrating_aur","d4455f13":"rating_aur.iloc[:,:2].plot.pie(subplots=True,colors=['tan','wheat'],autopct='%.2f',figsize=[15,10],textprops={'fontsize': 14})\nrating_aur.iloc[:,2:4].plot.pie(subplots=True,colors=['tan','goldenrod'],autopct='%.2f',figsize=[15,10],textprops={'fontsize': 14})\nrating_aur.iloc[:,4:6].plot.pie(subplots=True,colors=['wheat','goldenrod'],autopct='%.2f',figsize=[15,10],textprops={'fontsize': 14})\nrating_aur.iloc[:,6:8].plot.pie(subplots=True,colors=['tan','wheat'],autopct='%.2f',figsize=[15,10],textprops={'fontsize': 14})\nrating_aur.iloc[:,8:10].plot.pie(subplots=True,colors=['wheat','goldenrod'],autopct='%.2f',figsize=[15,10],textprops={'fontsize': 14});","b4f184ff":"fig = plt.figure(figsize=(15,10))\n\nax = [None for _ in range(3)]\n\nprint(color.BOLD+'\\t\\t\\t\\t\\t\\tTop 10 authors and titles'+color.END)\n\nax[0] = fig.add_axes([0.1,0.1,1,0.4]) # x, y, dx, dy\nax[0] = sns.violinplot(books.avg_ratings.sort_values(ascending=True),books.num_pages,palette='BrBG')\nax[1] = fig.add_axes([0.10,0.6,0.25,0.6])\nax[1] = sns.scatterplot(books.num_pages,books.text_reviews_count,hue=books.avg_ratings,palette='BrBG')\nax[2] = fig.add_axes([0.5,0.6,0.83,0.5])\nax[2] = sns.heatmap(year_aurt,annot=True,cmap='BrBG',linewidths=1)\n\n\nax[2].set_title('Total count of books published',fontsize=14)\n\nax[0].tick_params(axis=\"x\", labelsize=14,labelrotation=90) \n\n\nplt.tight_layout()\nplt.show()\n\nplt.figure(figsize=(15,10))\n\nsns.barplot(title_rate1.text_reviews_count,title_rate1.title,palette='BrBG')\nplt.yticks(fontsize=14)\nplt.xlabel('text_reviews_count',fontsize =14)\nplt.ylabel('title',fontsize =14)\nplt.show()","93a91bb7":"****\n\n**Observations**\n\nMost of the books are rated under the range 3-5.\n\n****","c8b0c5b9":"# Bivariate\n## Categorical","e2f9c2ae":"## Stucture of the dataset","044ded20":"****\n**Observations**\n\n+ The data seems to have no missing values. There are total `11123 rows` with total `12 columns` with the range index from `0 to 11122`.\n\n\n\n+ There are `6 numerical` columns with **5** `int64` values and **1** `float64` and `6 categorical` (object) values. We can see that the column `publication_date` has the dtype as object. We'll need to change that to datetime.\n\n\n\n+ In the column names, we can see that `num_pages` is indented.\n\n\n\n+ Overall the data looks in order. Memory usage: 1.0 MB\n\n****","29be1cb6":"****\n**Observations**\n\n**10\/2006** has the highest count of books published. We can see that the majority of the books published is in the year `2006` starting from the month of `May (5)`\n****","ca107465":"****\n**Observations**\n\nThe love for books is steadily growing throughout the years. However we see that 2007 has the lowest count of books.\n\n****","6a1755a7":"****\n**Observations**\n\nWe have filtered out the data that has 0 `num_pages` leaving us with the dataset that has 11044 of total entries. That means we have dropped about 79 columns from the original dataset i.e. about 0.7102% of the data is dropped.\n\n\n****","c8a410d8":"****\n**On data structure**\n\n+ The data seems to have no missing values. There are total `11123 rows` with total `12 columns` with the range index from `0 to 11122`.\n\n\n\n+ There are `6 numerical` columns with **5** `int64` values and **1** `float64` and `6 categorical` (object) values. We can see that the column `publication_date` has the dtype as object. We'll need to change that to datetime.\n\n\n\n+ In the column names, we can see that `num_pages` is indented.\n\n\n\n+ Overall the data looks in order. Memory usage: 1.0 MB\n\n\n\n+ The numeric data is not normally distributed and the columns `ratings_count` **17.70**, `text_reviews_count` **16.17** are highly skewed.\n\n\n+ `num_pages`, `ratings_count` and `text_reviews_count` have a higher standard deviation and variance; which indicates that the data points are very spread out from the mean, and from one another.\n\n\n+ The categorical data shows the most popular book and author, along with other frequency and columns. It seems that the most popular book is `The Brothers Karamazov` that shows the frequency of **9** and the most popular author is `Stephen King` which shows the frequency of **40**.\n\n\n\n+ The data does not have any missing values or duplicate values. Also there aren't any visible anomalies in the values of the dataset.\n\n\n+ We have filtered out the data that has 0 `num_pages` leaving us with the dataset that has 11044 of total entries. That means we have dropped about 79 columns from the original dataset i.e. about 0.7102% of the data is dropped.\n\n\n    > The highest average rating a book can get is **5.0**. There are 22 books that have maximum average rating.\n\n\n    > The lowest average rating a book can get is **0**. There are 25 books that have lowest average rating.\n\n\n+ Columns\naverage_rating\nisbn13\nnum_pages\nratings_count\ntext_reviews_count\thave outliers.\n\n\n+ We have filtered out the data as per the 95th percentile from `ratings_count` leaving us with the dataset that has 10491 of total entries. That means we have dropped about 632 columns from the original dataset i.e. about 5.721% of the data is dropped.\n\n\n\n\n\n****","9ccd101b":"# Univariate\n## Numerical","ac14ec26":"### Total number of books with highest and lowest average rating","0c78251b":"****\n\n**Observations**\n\nHighest average ratings are between 3-4. The titles which is rated between 4-5 have highest rating count of approx. 5000. Most of the books are under 1000 pages with few exceptions.\n\n****","88ef618f":"****\n\n**Observations**\n\n`P.G. Wodehouse`, `Rumiko Takahashi` and `Orson Scott Card` are the top 3 authors with most published books.\n\n****\n\n## Let's check the titles by the top 3 authors which has highest ratings!\n","d00edd08":"****\n**Observations**\n\nColumns\naverage_rating\nisbn13\nnum_pages\nratings_count\ntext_reviews_count\thave outliers.\n\n\nWe have filtered out the data as per the 95th percentile from `ratings_count` leaving us with the dataset that has 10491 of total entries. That means we have dropped about 632 columns from the original dataset i.e. about 5.721% of the data is dropped.\n****","95a92cec":"****\n**Observations**\n\nThe data does not have any missing values or duplicate values. Also there aren't any visible anomalies in the values of the dataset.\n\n****","62fd3420":"## Insights","1b077faa":"****\n\n**Observations**\n\n`P.G. Wodehouse's` **85%** of the author's books are rated under 4-5.\n\n\n`Rumiko Takahashi's` **92.31%** of the author's books are rated under 4-5.\n\n\n`Orson Scott Card's` **90.32%** of the author's books are rated under 3-4.\n\n\n`Piers Anthony's` **90%** of the author's books are rated under 3-4.\n\n\n`Mercedes Lackey's` **65.52%** of the author's books are rated under 4-5.\n\n\n`Stephen King's` **62.07%** of the author's books are rated under 3-4.\n\n\n`Sandra Brown's` **86.21%** of the author's books are rated under 3-4.\n\n\n`Dick Francis's` **60.71%** of the author's books are rated under 3-4.\n\n\n`Agatha Christie's` **66.67%** of the author's books are rated under 3-4.\n\n\n`Margaret Weis\/Tracy Hickman's` **60.87%** of the author's books are rated under 3-4.\n\n****","20efe543":"# Bivariate\n## Numerical","949ab8be":"                                                        ~END~","c23cffd1":"# Summary\n\n## Dashboard ","ba9a898f":"The below lines were skipped from the data while importing due to the following reason:\n\n\n+ Skipping line 3350: expected 12 fields, saw 13\n+ Skipping line 4704: expected 12 fields, saw 13\n+ Skipping line 5879: expected 12 fields, saw 13\n+ Skipping line 8981: expected 12 fields, saw 13","16273a89":"# Univariate\n## Categorical","7930d506":"****\n**Observations**\n\n`Vintage` and `Penguin` are the most popular publishers with more than 300 books published.\n\n****","e2d34677":"****\n**Observations**\n\nThe numeric data is not normally distributed and the columns `ratings_count` **17.70**, `text_reviews_count` **16.17** are highly skewed.\n\n\n`num_pages`, `ratings_count` and `text_reviews_count` have a higher standard deviation and variance; which indicates that the data points are very spread out from the mean, and from one another.\n\n\nThe categorical data shows the most popular book and author, along with other frequency and columns. It seems that the most popular book is `The Brothers Karamazov` that shows the frequency of **9** and the most popular author is `Stephen King` which shows the frequency of **40**.\n****","17230cbb":"****\n**Observations**\n\n`English` is by far the most common language the readers prefer to read in.\n\n`Spanish` is the 3rd popular language after `eng-US`\n\n****","ec20d386":"****\n\n**Observations**\n\nAccording to the Levene's Test the variances for the numerical columns are not equal.\n\nAnd as per Kruskal-Wallis test the group means for the numerical columns are not matched.\n\n****\n\n*In statistics, Levene's test is an inferential statistic used to assess the equality of variances for a variable calculated for two or more groups. Some common statistical procedures assume that variances of the populations from which different samples are drawn are equal. Levene's test assesses this assumption.*\n\n\n*The Kruskal-Wallis test is a nonparametric (distribution free) test, and is used when the assumptions of one-way ANOVA are not met.The Kruskal\u2013Wallis test by ranks, Kruskal\u2013Wallis H test, or one-way ANOVA on ranks is a non-parametric method for testing whether samples originate from the same distribution. It is used for comparing two or more independent samples of equal or different sample sizes.*\n****","8c9df754":"# Multivariate Analysis\n\n## Numerical vs Numerical","fa4a6ee7":"****\n\n**Observations**\n\n`'The Iliad', 'The Brothers Karamazov', \"A Midsummer Night's Dream\", 'Anna Karenina', 'The Odyssey', \"Gulliver's Travels\", 'Collected Stories', 'The Great Gatsby', 'Robinson Crusoe', 'The Histories'` \n \n Are the top 10 popular titles.\n \n ****","93a1109d":"## Importing Libraries and dataset","66721b73":"****\n**On Categorical values**\n\n****\n\n`Twilight` by `Stephenie Meyer` published in *9\/6\/2006* by `Little Brown and Company` publisher has the highest ratings_count of **4597666**.\n\nAverage_rating for this books is **3.5900** and text_review_counts is **94265**\n\n**10\/2006** has the highest count of books published. We can see that the majority of the books published is in the year `2006` starting from the month of `May (5)`\n\n`English` is by far the most common language the readers prefer to read in.\n\n`Spanish` is the 3rd popular language after `eng-US`\n\n`P.G. Wodehouse` is the most published author with **40** books. `Rumiko Takahashi` comes second close with **39** books.\n\n`Vintage` and `Penguin` are the most popular publishers with more than 300 books published.\n\nThe love for books is steadily growing throughout the years. However we see that 2007 has the lowest count of books.\n\n\n`'The Iliad', 'The Brothers Karamazov', \"A Midsummer Night's Dream\", 'Anna Karenina', 'The Odyssey', \"Gulliver's Travels\", 'Collected Stories', 'The Great Gatsby', 'Robinson Crusoe', 'The Histories'` are the top 10 popular titles.\n\n\n\n\n+ `P.G. Wodehouse`, `Rumiko Takahashi` and `Orson Scott Card` are the top 3 authors with most published books.\n\n\n\n> `P.G. Wodehouse's` **85%** of the author's books are rated under 4-5.\n\n\n> `Rumiko Takahashi's` **92.31%** of the author's books are rated under 4-5.\n\n\n> `Orson Scott Card's` **90.32%** of the author's books are rated under 3-4.\n\n\n> `Piers Anthony's` **90%** of the author's books are rated under 3-4.\n\n\n> `Mercedes Lackey's` **65.52%** of the author's books are rated under 4-5.\n\n\n> `Stephen King's` **62.07%** of the author's books are rated under 3-4.\n\n\n> `Sandra Brown's` **86.21%** of the author's books are rated under 3-4.\n\n\n> `Dick Francis's` **60.71%** of the author's books are rated under 3-4.\n\n\n> `Agatha Christie's` **66.67%** of the author's books are rated under 3-4.\n\n\n> `Margaret Weis\/Tracy Hickman's` **60.87%** of the author's books are rated under 3-4.\n\n\n\n****\n**On Numerical Values**\n\n\nWe can conclude from the Shapiro-Wilk test for normality that the data is not normally distributed and is highly skewed.\nAlso the columns have a higher standard deviation and variance; which indicates that the data points are very spread out from the mean, and from one another.\n\n\nAccording to the Levene's Test the variances for the numerical columns are not equal.\n\nAnd as per Kruskal-Wallis test the group means for the numerical columns are not matched.\n\n****\n\n*In statistics, Levene's test is an inferential statistic used to assess the equality of variances for a variable calculated for two or more groups. Some common statistical procedures assume that variances of the populations from which different samples are drawn are equal. Levene's test assesses this assumption.*\n\n\n*The Kruskal-Wallis test is a nonparametric (distribution free) test, and is used when the assumptions of one-way ANOVA are not met.The Kruskal\u2013Wallis test by ranks, Kruskal\u2013Wallis H test, or one-way ANOVA on ranks is a non-parametric method for testing whether samples originate from the same distribution. It is used for comparing two or more independent samples of equal or different sample sizes.*\n****\n\nHighest average ratings are between 3-4. The titles which is rated between 4-5 have highest rating count of approx. 5000. Most of the books are under 1000 pages with few exceptions.\n\n\n****","fa3f710b":"## Books with highest ratings_count","bc9847d0":"****\n**Observations**\n\n`P.G. Wodehouse` is the most published author with **40** books. `Rumiko Takahashi` comes second close with **39** books.\n\n****","183f2e7a":"## Descriptive statistics","f7b67652":"## Books with highest average_rating and rating_count","56876262":"****\n\n**Observations**\n\n`Twilight` by `Stephenie Meyer` published in *9\/6\/2006* by `Little Brown and Company` publisher has the highest ratings_count of **4597666**.\n\nAverage_rating for this books is **3.5900** and text_review_counts is **94265**\n\n****","1e875f7e":"## Books with highest text_reviews_count","30d0fd6b":"****\n**Observations**\n\nWe can conclude from the Shapiro-Wilk test for normality that the data is not normally distributed and is highly skewed.\nAlso the columns have a higher standard deviation and variance; which indicates that the data points are very spread out from the mean, and from one another.\n\n****","991879a5":"# Multivariate Analysis\n\n## Numerical vs Categorical","1683231b":"### Authors = NOT A BOOK","183a84a1":"### Bad data check","7c1caf94":"****\n**Observations**\n\nMost popular month throughout history seems to be the month of `January`, `September` and `October` with more than **1000** books published.\n\n****","cb3c3aa0":"****\n\n**Observation**\n\nThe highest average rating a book can get is **5.0**. There are 22 books that have maximum average rating.\n\n\nThe lowest average rating a book can get is **0**. There are 25 books that have lowest average rating.\n\n****","5ba02f5d":"### Books with total number of pages = 0","a9d118d3":"### Book with maximum rating count","536cdcc5":"![image-2.png](attachment:image-2.png)\n\n*goodreads.com*"}}