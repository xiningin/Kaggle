{"cell_type":{"6d0e705f":"code","bf1080f7":"code","b2a3746e":"code","8e27bf6e":"code","1327b9f7":"code","8fdd2810":"code","532c559a":"code","af2e43ea":"code","50802176":"code","9b793562":"code","3014d6d3":"code","a62a35ac":"code","c03d2350":"code","87350a9e":"code","529aecaa":"code","3b619334":"code","0236996f":"code","060a5055":"code","7d067eb0":"code","c63f9b98":"code","89741185":"code","c466bb0f":"code","80a1dba2":"code","7ed7e609":"code","91a12ba6":"code","1f6af27c":"code","3f2c2ad5":"markdown","b076e9b8":"markdown","78b9ab03":"markdown","cafbd936":"markdown","5989e261":"markdown","d26daf7b":"markdown","af898038":"markdown"},"source":{"6d0e705f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bf1080f7":"df = pd.read_csv('\/kaggle\/input\/nyse\/prices.csv')","b2a3746e":"df.head(3)","8e27bf6e":"df.shape","1327b9f7":"df = df.drop(columns=['date','symbol'])","8fdd2810":"df.head()","532c559a":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.metrics import mean_squared_error, accuracy_score\n","af2e43ea":"plt.figure(figsize=(15,15))\nplt.plot(df['close'])","50802176":"scaler = MinMaxScaler(feature_range=(0,1))\ndf = scaler.fit_transform(df)   #Jadi numpy array, tidak lagi pandas\n\ny_close = df[:,1]\n\n","9b793562":"plt.figure(figsize=(15,15))\nplt.plot(y_close)\nplt.show()","3014d6d3":"ntrain = int(len(y_close)*0.8) \n\ntrain = df[0:ntrain]\ntest  = df[ntrain:len(df)]\n\ny_close_train = y_close[0:ntrain]\ny_close_test  = y_close[ntrain:len(y_close)]","a62a35ac":"y_close_test.shape","c03d2350":"import numpy as np\n\ndef to_sequences(seq_size, data,close):\n    x = []\n    y = []\n\n    for i in range(len(data)-seq_size-1):\n        window = data[i:(i+seq_size)]\n        after_window = close[i+seq_size]\n        window = [[x] for x in window]\n        x.append(window)\n        y.append(after_window)\n        \n    return np.array(x),np.array(y)\n\n\ntimesteps = 10\n\nx_train, y_train = to_sequences(timesteps, train, y_close_train)\nx_test, y_test   = to_sequences(timesteps, test, y_close_test)\n\nprint(\"Shape of x_train: {}\".format(x_train.shape))\nprint(\"Shape of x_test: {}\".format(x_test.shape))\nprint(\"Shape of y_train: {}\".format(y_train.shape))\nprint(\"Shape of y_test: {}\".format(y_test.shape))","87350a9e":"x_train[0]","529aecaa":"x_train = np.reshape(x_train,(x_train.shape[0], x_train.shape[2], x_train.shape[1],x_train.shape[3]))\nx_test = np.reshape(x_test,(x_test.shape[0],x_test.shape[2],x_test.shape[1],x_test.shape[3]))","3b619334":"print(x_train.shape)","0236996f":"x_train[0][0].shape","060a5055":"fig, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(1, 5)\nax1.imshow(x_train[0][0])\nax2.imshow(x_train[1][0])\nax3.imshow(x_train[2][0])\nax4.imshow(x_train[3][0])\nax5.imshow(x_train[4][0])","7d067eb0":"import numpy as np\nimport pandas as pd\n\nimport tensorflow as tf\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense, Activation, Flatten\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.callbacks import EarlyStopping\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense, Activation, Flatten, Dropout\nfrom keras.optimizers import Adam\nfrom keras.layers import Conv1D, Conv2D, MaxPooling2D\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.preprocessing import MinMaxScaler\nimport csv\nimport collections\nfrom scipy.stats import zscore\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\n","c63f9b98":"cnn = Sequential()\ncnn.add(Conv2D(8, kernel_size = (1, 2), strides = (1, 1),  padding = 'valid', \n               activation = 'relu', input_shape = (1,10,5)))\ncnn.add(MaxPooling2D(pool_size = (1,2)))\n\ncnn.add(Flatten())\ncnn.add(Dense(64, activation=\"relu\"))\ncnn.add(Dropout(0.5))\ncnn.add(Dense(1, activation=\"relu\"))\ncnn.summary()   \n\n","89741185":"cnn.compile(loss='mean_squared_error', optimizer='nadam')\n\nmonitor = EarlyStopping(monitor='val_loss', min_delta=1, patience=2, verbose=2, mode='auto') \ncheckpointer = ModelCheckpoint(filepath=\"CNN_Parameters.hdf5\", verbose=0, save_best_only=True) # save best model","c466bb0f":"history = cnn.fit(x_train,y_train,validation_split=0.2,batch_size = 128, callbacks=[checkpointer],verbose=1,epochs = 100)","80a1dba2":"plt.plot(history.history['loss'], label = 'loss')\nplt.plot(history.history['val_loss'], label = 'val loss')\nplt.legend()","7ed7e609":"cnn.load_weights('CNN_Parameters.hdf5')\n\npred = cnn.predict(x_test)\nprint(pred.shape)","91a12ba6":"score = np.sqrt(metrics.mean_squared_error(y_test, pred))\nprint(\"RMSE Score: {}\".format(score))","1f6af27c":"plt.figure(figsize=(15,15))\n\nplt.plot(y_test, label = 'actual')\nplt.plot(pred,   label = 'predicted')\nplt.legend()\nplt.show()","3f2c2ad5":"# Here we construct the image","b076e9b8":"# Wait, CNN? Are you crazy? it should be used for image!","78b9ab03":"Naturally, we should use some technical indicators, but I will add them later.\n\nLets take a look at closing price, its so rough","cafbd936":"### We will not use the date and symbol","5989e261":"### Yes, actually we would use image! I will show you\n\nImplementation of\n\nSezer, Omer Berat, and Ahmet Murat Ozbayoglu. \"Algorithmic financial trading with deep convolutional neural networks: Time series to image conversion approach.\" Applied Soft Computing 70 (2018): 525-538.","d26daf7b":"# Here is the image I promised","af898038":"# CNN Model"}}