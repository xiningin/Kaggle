{"cell_type":{"c2b0066c":"code","e9bd61d0":"code","222a354c":"code","1ffc9e76":"code","f2bd8aee":"code","ef42c87a":"code","7c215787":"code","9536500d":"code","882541cd":"code","c0a7e5d9":"code","01584a5b":"code","359834f7":"code","2ba0f773":"code","32aae45b":"code","00709f5f":"code","8ed443d8":"code","da248db9":"code","c7fa7594":"code","c8c7c912":"code","c945411c":"code","3ec5f013":"code","3983ef96":"code","e615f9a9":"code","3b16192e":"code","13218d7e":"code","84b38eda":"code","1d5d5361":"code","c1d38ed5":"code","f37f6423":"code","d502c06e":"code","cac4f1f3":"code","2fe5cb65":"code","f7f50a9b":"code","9a217cc5":"code","1c03400f":"markdown","06b095aa":"markdown","0c133fb8":"markdown","959f560f":"markdown","79b54689":"markdown","6d3ee86f":"markdown","858e8845":"markdown","87d3bb84":"markdown","bcdd1b73":"markdown","ee5c002b":"markdown","431ea014":"markdown","3f8e1aa7":"markdown","1db8561c":"markdown","ba3dc43a":"markdown","07698dbb":"markdown","9d847e4b":"markdown","4c7770cd":"markdown","1409a147":"markdown","0431292c":"markdown"},"source":{"c2b0066c":"import numpy as np \nimport pandas as pd \nfrom os import listdir\n\nimport datetime\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\nimport seaborn as sns\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e9bd61d0":"# Make the default figures a bit bigger\nplt.rcParams['figure.figsize'] = (5,3) \nplt.rcParams[\"figure.dpi\"] = 120 \n\nsns.set(style=\"ticks\")\nsns.set_context(\"poster\", font_scale = .6, rc={\"grid.linewidth\": 5})\ngreek_salad = ['#D0D3C5', '#56B1BF', '#08708A', '#D73A31', '#032B2F']\nsns.set_palette(greek_salad)","222a354c":"# https:\/\/www.nasdaq.com\/screening\/company-list.aspx\nnasdaq = pd.read_csv('..\/input\/nasdaq-company-list\/companylist.csv')\ncols = ['Symbol', 'Name', 'MarketCap', 'Sector']\nnasdaq = nasdaq[cols]\nnasdaq = nasdaq.drop_duplicates(subset=['Name'], keep='first')\nnasdaq = nasdaq[nasdaq['MarketCap'] >= 1e9]\nprint(nasdaq.shape)\nnasdaq.sort_values(by='MarketCap', ascending=False).head(10)","1ffc9e76":"def find_csv_filenames( path_to_dir, suffix=\".csv\" ):\n    filenames = listdir(path_to_dir)\n    return [ filename for filename in filenames if filename.endswith( suffix ) ]\n\npath_to_dir = '..\/input\/amex-nyse-nasdaq-stock-histories\/fh_20190217\/full_history\/'\nfilenames = find_csv_filenames(path_to_dir)","f2bd8aee":"%%time \n# Create Empty Dataframe\nstock_final = pd.DataFrame()\n\nfor i in range(len(list(nasdaq['Symbol']))): #filenames\n    #print(i)    \n    try:\n        stock=[]\n        stock = pd.read_csv(path_to_dir+list(nasdaq['Symbol'])[i]+'.csv')\n        stock['name'] = list(nasdaq['Symbol'])[i] #filenames[i].replace(\".csv\", \"\")\n        # Data starting from 2015\n        stock['date'] = pd.to_datetime(stock['date'])\n        stock = stock[stock.date >= '2016-01-01']\n        stock_final = pd.DataFrame.append(stock_final, stock, sort=False)\n    \n    except Exception:\n        i = i+1     ","ef42c87a":"print(\"Available tickers\", stock_final.name.nunique())\ndisplay(stock_final.sample(3))","7c215787":"cols = ['date', 'adjclose', 'name']\ndf_close = stock_final[cols].pivot(index='date', columns='name', values='adjclose')\n\ncols = ['date', 'volume', 'name']\ndf_volume = stock_final[cols].pivot(index='date', columns='name', values='volume')\n\nprint('Dataset shape:',df_close.shape)\ndisplay(df_close.tail(3))\n\nprint('Dataset shape:',df_volume.shape)\ndisplay(df_volume.tail(3))","9536500d":"percent_missing = pd.DataFrame(df_close.isnull().sum() * 100 \/ len(df_close))\npercent_missing.columns = ['percent_missing']\npercent_missing.sort_values('percent_missing', inplace=True, ascending=False)\n\npercent_missing_plot = pd.DataFrame(percent_missing.reset_index().groupby('percent_missing').size())\npercent_missing_plot.reset_index(inplace=True)\npercent_missing_plot.columns = ['percent_missing', 'count']\n\nax = sns.scatterplot(x='percent_missing', y='count', data=percent_missing_plot, color=greek_salad[2])\nax.set_yscale('log')\nax.set_ylabel('Number of tickers')\nax.set_xlabel('Missing Data (%)')\nsns.despine()","882541cd":"complete_data_tickers = percent_missing[percent_missing['percent_missing'] == 0].index\ndf = df_close[complete_data_tickers].head()\n\nprint(\"Available tickers\", df.shape[1])\ndisplay(df.sample(3))","c0a7e5d9":"df_pct_change = df.pct_change()\ndf_pct_change.head(3)","01584a5b":"complete_data_tickers = percent_missing[percent_missing['percent_missing'] == 0].index\ndf_volume = df_volume[complete_data_tickers].head()\n\ndf_vol_change = df_volume.pct_change()\ndf_vol_change.head(3)","359834f7":"plt.figure(figsize=(6,6))\ncorr = df_pct_change.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    ax = sns.heatmap(corr, mask=mask, vmax=.3, square=True, cmap=sns.diverging_palette(20,220, n=11), center=0)\n    ax.set_yticklabels('')\n    ax.set_xticklabels('')\n    ax.set_ylabel('')\n    ax.set_xlabel('')\n    sns.despine()\n    plt.tight_layout()","2ba0f773":"plt.figure(figsize=(6,6))\ncorr = df_vol_change.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    ax = sns.heatmap(corr, mask=mask, vmax=.3, square=True, cmap=sns.diverging_palette(20,220, n=11), center=0)\n    ax.set_yticklabels('')\n    ax.set_xticklabels('')\n    ax.set_ylabel('')\n    ax.set_xlabel('')\n    sns.despine()\n    plt.tight_layout()","32aae45b":"MSFT = stock_final[stock_final.name == 'MSFT'].copy()\nMSFT.set_index('date', inplace=True)\nMSFT.head()","00709f5f":"from plotly import tools\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\nimport plotly.tools as tls\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\ntrace = go.Ohlc(x=MSFT.index,\n                open=MSFT['open'],\n                high=MSFT['high'],\n                low=MSFT['low'],\n                close=MSFT['close'],\n               increasing=dict(line=dict(color= '#58FA58')),\n                decreasing=dict(line=dict(color= '#FA5858')))\n\nlayout = {\n    'title': 'MSFT Historical Price',\n    'xaxis': {'title': 'Date',\n             'rangeslider': {'visible': False}},\n    'yaxis': {'title': 'Stock Price (USD$)'},\n    'shapes': [{\n        'x0': '2018-12-31', 'x1': '2018-12-31',\n        'y0': 0, 'y1': 1, 'xref': 'x', 'yref': 'paper',\n        'line': {'color': 'rgb(30,30,30)', 'width': 1}\n    }],\n    'annotations': [{\n        'x': '2019-01-01', 'y': 0.05, 'xref': 'x', 'yref': 'paper',\n        'showarrow': False, 'xanchor': 'left',\n        'text': '2019 <br> starts'\n    }]\n}\n\ndata = [trace]\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='simple_ohlc')","8ed443d8":"# Drop the columns\nph_df = MSFT.drop(['open', 'high', 'low','volume', 'adjclose', 'name'], axis=1)\nph_df.reset_index(inplace=True)\nph_df.rename(columns={'close': 'y', 'date': 'ds'}, inplace=True)\nph_df['ds'] = pd.to_datetime(ph_df['ds'])\nph_df['y'] = np.log1p(ph_df['y'])\nph_df.head()","da248db9":"!pip3 uninstall --yes fbprophet\n!pip3 install fbprophet --no-cache-dir --no-binary :all:","c7fa7594":"from fbprophet import Prophet\nm = Prophet()\nm.fit(ph_df) \n\n# Create Future dates\nfuture_prices = m.make_future_dataframe(periods=365)\n\n# Predict Prices\nforecast = m.predict(future_prices)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","c8c7c912":"fig = m.plot(forecast)\nax1 = fig.add_subplot(111)\nax1.set_title(\"MSFT Stock Price Forecast\", fontsize=16)\nax1.set_xlabel(\"Date\", fontsize=12)\nax1.set_ylabel(\"$log(1 + Close Price)$\", fontsize=12)\nsns.despine()\nplt.tight_layout()","c945411c":"# fig2 = m.plot_components(forecast)\n# plt.show()","3ec5f013":"# Monthly Data Predictions\nm = Prophet(changepoint_prior_scale=0.01).fit(ph_df)\nfuture = m.make_future_dataframe(periods=12, freq='M')\nfcst = m.predict(future)\nfig = m.plot(fcst)\nplt.title(\"Monthly Prediction \\n 1 year time frame\", fontsize=16)\nplt.xlabel(\"Date\", fontsize=12)\nplt.ylabel(\"$log(1+Close Price)$\", fontsize=12)\nsns.despine()\nplt.tight_layout()","3983ef96":"stock_max = np.round(np.expm1(fcst.tail(12)['yhat'].max()), 2)\nstock_min = np.round(np.expm1(fcst.tail(12)['yhat'].min()), 2)\nstock_current = np.expm1(ph_df.sort_values(by='ds').tail(1)['y'].values)\n\ngain = (stock_max - stock_current) \/ stock_current\nloss = (stock_current - stock_min) \/ stock_current\n\nprint('Current price:', np.round(stock_current,2), '$')\nprint('Expected High:', np.round(stock_max,2), '$')\nprint('Expected Low:', np.round(stock_min,2), '$')\nprint('Expected profit:', np.round(gain*100,2), '%')\nprint('Expected loss:', np.round(loss*100,2), '%')","e615f9a9":"!pip3 install fix_yahoo_finance --upgrade --no-cache-dir","3b16192e":"from pandas_datareader import data as pdr\nimport fix_yahoo_finance as yf\nfrom datetime import date\n\nyf.pdr_override() \n\nend = date.today()\nDJI = pdr.get_data_yahoo(\"^DJI\", start=\"2016-01-01\", end=end)","13218d7e":"DJI.tail()","84b38eda":"from plotly import tools\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\nimport plotly.tools as tls\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\ntrace = go.Ohlc(x=DJI.index,\n                open=DJI['Open'],\n                high=DJI['High'],\n                low=DJI['Low'],\n                close=DJI['Close'],\n               increasing=dict(line=dict(color= '#58FA58')),\n                decreasing=dict(line=dict(color= '#FA5858')))\n\nlayout = {\n    'title': 'DJI Historical Price',\n    'xaxis': {'title': 'Date',\n             'rangeslider': {'visible': False}},\n    'yaxis': {'title': 'Stock Price (USD$)'},\n    'shapes': [{\n        'x0': '2018-12-31', 'x1': '2018-12-31',\n        'y0': 0, 'y1': 1, 'xref': 'x', 'yref': 'paper',\n        'line': {'color': 'rgb(30,30,30)', 'width': 1}\n    }],\n    'annotations': [{\n        'x': '2019-01-01', 'y': 0.05, 'xref': 'x', 'yref': 'paper',\n        'showarrow': False, 'xanchor': 'left',\n        'text': '2019 <br> starts'\n    }]\n}\n\ndata = [trace]\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='simple_ohlc')","1d5d5361":"# Drop the columns\nph_df = DJI.drop(['Open', 'High', 'Low','Volume', 'Adj Close'], axis=1)\nph_df.reset_index(inplace=True)\nph_df.rename(columns={'Close': 'y', 'Date': 'ds'}, inplace=True)\nph_df['ds'] = pd.to_datetime(ph_df['ds'])\nph_df['y'] = np.log1p(ph_df['y'])\nph_df.head()\n\n# Monthly Data Predictions\nm = Prophet(changepoint_prior_scale=0.01).fit(ph_df)\nfuture = m.make_future_dataframe(periods=12, freq='M')\nfcst = m.predict(future)\nfig = m.plot(fcst)\nplt.title(\"Monthly Prediction for DJI Index \\n 1 year time frame\", fontsize=16)\nplt.xlabel(\"Date\", fontsize=12)\nplt.ylabel(\"$log(1+Close)$\", fontsize=12)\nsns.despine()\nplt.tight_layout()","c1d38ed5":"stock_max = np.round(np.expm1(fcst.tail(12)['yhat'].max()), 2)\nstock_min = np.round(np.expm1(fcst.tail(12)['yhat'].min()), 2)\nstock_current = np.expm1(ph_df.sort_values(by='ds').tail(1)['y'].values)\n\nDJI_gain = (stock_max - stock_current) \/ stock_current\nDJI_loss = (stock_current - stock_min) \/ stock_current\n\nprint('Current :', np.round(stock_current,2))\nprint('Expected High:', np.round(stock_max,2))\nprint('Expected Low:', np.round(stock_min,2))\nprint('Expected rise:', np.round(DJI_gain*100,2), '%')\nprint('Expected fall:', np.round(DJI_loss*100,2), '%')","f37f6423":"%%time\ndf_gains = pd.DataFrame()\ni = 0\nfor ticker in df_close.columns:\n    tmp = pd.DataFrame()\n    ticker = df_close.columns[i]\n    ph_df = pd.DataFrame(df_close[ticker].copy())\n    ph_df.reset_index(inplace=True)\n    ph_df.rename(columns={ticker: 'y', 'date': 'ds'}, inplace=True)\n    ph_df['ds'] = pd.to_datetime(ph_df['ds'])\n    ph_df['y'] = np.log1p(ph_df['y'])\n\n    m = Prophet(changepoint_prior_scale=0.01).fit(ph_df)\n    future = m.make_future_dataframe(periods=12, freq='M')\n    fcst = m.predict(future)\n    \n    stock_max = np.round(np.expm1(fcst.tail(12)['yhat'].max()), 2)\n    stock_min = np.round(np.expm1(fcst.tail(12)['yhat'].min()), 2)\n    stock_current = np.expm1(ph_df.sort_values(by='ds').tail(1)['y'].values)\n\n    gain = (stock_max - stock_current) \/ stock_current\n    loss = (stock_current - stock_min) \/ stock_current\n    tmp = pd.DataFrame([ticker, gain, loss]).T\n    t = [('ticker', ticker),\n         ('gain', gain),\n         ('loss', loss)]\n    tmp = pd.DataFrame.from_items(t)\n    df_gains = df_gains.append(tmp)\n    i = i+1\n    ","d502c06e":"df_gains = df_gains.loc[(df_gains['gain'] >= DJI_gain[0])]\ndf_gains = df_gains.loc[(df_gains['loss'] <= DJI_loss[0])]\ndf_gains.sample(5)","cac4f1f3":"fig = figure(num=None, figsize=(12, 4), dpi=120, facecolor='w', edgecolor='k')\n\nplt.subplot(1, 1, 1)\nax1 = sns.distplot(df_gains['gain'].dropna()*100, bins=50, color=greek_salad[2]);\n#ax1.set_xlim(0, 400)\nax1.set_xlabel('Gain (%)', weight='bold')\nax1.set_ylabel('Density', weight = 'bold')\nax1.set_title('Distribution of expected 1 year gain')\nsns.despine()\nplt.tight_layout();","2fe5cb65":"# ## Distribution of expected loss\n# fig = figure(num=None, figsize=(12, 4), dpi=120, facecolor='w', edgecolor='k')\n\n# plt.subplot(1, 1, 1)\n# ax1 = sns.distplot(df_gains['loss'].dropna()*100, bins=50, color=greek_salad[3]);\n# #ax1.set_xlim(0, 400)\n# ax1.set_xlabel('Loss (%)', weight='bold')\n# ax1.set_ylabel('Density', weight = 'bold')\n# ax1.set_title('Distribution of expected 1 year loss')\n# sns.despine()\n# plt.tight_layout();","f7f50a9b":"df_selected_stocks = pd.merge(df_gains, nasdaq, how='inner', left_on='ticker', right_on='Symbol')\ncols = ['ticker', 'gain', 'Name', 'MarketCap', 'Sector']\n\ndf_selected_stocks = df_selected_stocks[cols]\ndf_selected_stocks.to_csv('selected_stocks.csv', sep=',', encoding='utf-8')\ndf_selected_stocks.sample(5)","9a217cc5":"f = {'gain':['median'], 'MarketCap':['sum'], 'Name':['count']}\n\nratios = df_selected_stocks.groupby('Sector').agg(f)\nratios.columns = ratios.columns.get_level_values(0)\nratios = ratios.reset_index()\nratios = ratios.sort_values('gain', ascending=False)\n\nfig = figure(num=None, figsize=(14, 8), dpi=80, facecolor='w', edgecolor='k')\n\nplt.subplot(1, 3, 1)\nax1 = sns.barplot(x=\"Name\", y=\"Sector\", data=ratios, palette=(\"Greys_d\"))\nax1.set_xlabel('Number of companies', weight='bold')\nax1.set_ylabel('Sector', weight = 'bold')\nax1.set_title('Sector breakdown\\n')\n\nplt.subplot(1, 3, 2)\nax2 = sns.barplot(x=\"MarketCap\", y=\"Sector\", data=ratios, palette=(\"Greens_d\"))\nax2.set_xlabel('Total Market Cap', weight='bold')\nax2.set_ylabel('')\nax2.set_yticks([])\n\nplt.subplot(1, 3, 3)\nax2 = sns.barplot(x=\"gain\", y=\"Sector\", data=ratios, palette=(\"Greens_d\"))\nax2.set_xlabel('Median Gain', weight='bold')\nax2.set_ylabel('')\nax2.set_yticks([])\n\nsns.despine()\nplt.tight_layout();","1c03400f":"## Get all tickers for NASDAQ will a market cap of atleast $10 billion","06b095aa":"## Monthly predictions","0c133fb8":"## Distribution of expected gain ","959f560f":"### These are the tickers that atleast show a higher growth trend and may outperform the market","79b54689":"# 5. Predicting expected gain and loss for each ticker","6d3ee86f":"### Get filenames for all tickers","858e8845":"## Missing data","87d3bb84":"## Forecast stock price","bcdd1b73":"# 1. Data extraction","ee5c002b":"The Nasdaq Stock Market is the second-largest stock exchange in the world by market capitalization (USD 10 trillion). It has around 1000 listed companies with a Market Cap of atleast USD 1 billion. \n\nOf these companies can we find how the ones that will **outperform the broader market**?","431ea014":"## Daily predictions","3f8e1aa7":"## This is the final dataset we will be working with: Daily percentage change in **price** and **volume**","1db8561c":"# 2. Correlation of percent change","ba3dc43a":"## Remove columns with any missing data","07698dbb":"# Tickers that may beat the benchmark","9d847e4b":"# 3. How good a bet is Microsoft? **`MSFT`**","4c7770cd":"# 4. Forecasting Dow Jones Industrial Average\n\nCan we find a ticker which will outperform the benchmark?","1409a147":"### Read data for all tickers into a dataframe","0431292c":"## Extract relevant data\n\nWill be working with only **Adjusted Close** and **Volume**"}}