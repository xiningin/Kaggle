{"cell_type":{"213c36d1":"code","804f97ab":"code","f3aa7654":"code","8798c8eb":"code","42792e11":"code","ab3c5ee2":"code","6318f73e":"code","76ca6283":"code","84de8518":"code","592b2b71":"code","54b93807":"code","0d7a6ad9":"code","02fc218b":"code","b9780aca":"code","f59429e4":"code","07d59802":"code","9e90a4d9":"code","143db62f":"code","e65628d8":"code","653cce73":"code","7073070a":"code","d5efeb55":"code","fa326a6b":"code","e1720c2f":"code","a6863041":"code","7b020d72":"code","ce2e8115":"code","2178bfb5":"code","28ac5067":"code","6745f0c9":"code","2ae416c1":"code","58d39cfc":"code","154aa17b":"code","e4baa529":"code","38a2c730":"code","fd28e2df":"code","9f585eb5":"code","dafccfdd":"code","bf3c339b":"code","605a2467":"code","9b749368":"code","3649b697":"code","ab18cb78":"code","ac7bc3ec":"markdown","51f8409b":"markdown","fc238dc0":"markdown","de85f141":"markdown","ee3347bd":"markdown","123b4a3c":"markdown","9637586a":"markdown","17e5441e":"markdown","b489b692":"markdown","c43253db":"markdown","0d5e6d89":"markdown","7d1dfa7d":"markdown","befb6c55":"markdown","2e844178":"markdown","971a3b6d":"markdown","dc85b71b":"markdown","546b0dc3":"markdown","8e8735f3":"markdown","6edacb79":"markdown","ef2bb98c":"markdown","f5407538":"markdown"},"source":{"213c36d1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os","804f97ab":"pip install xlrd","f3aa7654":"pip install openpyxl","8798c8eb":"data = pd.read_excel('..\/input\/bankniftyfuturea-data5min\/BankNiftyFutures_Data5Min.xlsx')\ndata.head()","42792e11":"data.describe(include='all')","ab3c5ee2":"def calculateVwap(data):\n    data['TP'] = (data['High 5']+data['Low 5']+data['Close 5'])\/3.0\n    data['TradedValue']  = data['TP']*data['Volume 5']\n    data['CumVolume'] = data['Volume 5'].cumsum()\n    data['CumTradedValue'] = data['TradedValue'].cumsum()\n    data['VWAP'] = data['CumTradedValue'] \/data['CumVolume']\n    return data\n\ncalculateVwap(data)\n#df = df.groupby('dt').apply(calculateVwap)\n","6318f73e":"data.loc[:,'DT'] = pd.to_datetime(data.Date.astype(str)+' '+data.Time.astype(str))","76ca6283":"data.head()","84de8518":"data['DT'].head()","592b2b71":"data['DT'] = pd.to_datetime(data['DT'])","54b93807":"data_2 = data.set_index('DT')\ndata_2.head()","0d7a6ad9":"data_2.drop(['Date'], axis=1, inplace=True)\ndata_2.drop(['Final Date format'], axis=1, inplace=True)\ndata_2.drop(['Time'], axis=1, inplace=True)\ndata_2.drop(['Year'], axis=1, inplace=True)","02fc218b":"data_2.head(10)","b9780aca":"df2 = data_2.resample('15T').sum()\ndf2.head()","f59429e4":"data['DT'].head()","07d59802":"df2.reset_index(inplace=True)\n#df2 = df2.rename(columns = {'index':'DT'})\ndf2.head()","9e90a4d9":"df2['day'] = df2['DT'].dt.day\ndf2['month'] = df2['DT'].dt.month\ndf2['year'] = df2['DT'].dt.year\ndf2['minute'] = df2['DT'].dt.minute\ndf2['hours'] = df2['DT'].dt.hour\n\ndf2.head()","143db62f":"df3 = df2[['DT', 'Close 5', 'High 5', 'Low 5', 'VWAP', 'day', 'month', 'year', 'minute', 'hours']]\ndf3['close-VWAP'] = ''\ndf3['buy'] = ''\ndf3['sell'] = ''\ndf3.head()","e65628d8":"for i in range(0, len(df2)):\n    df3['close-VWAP'][i] = df3['Close 5'][i] - df3['VWAP'][i]\ndf3.head()","653cce73":"tick = 0.05","7073070a":"plt.figure(figsize=(15,5))\nplt.plot(df3['close-VWAP'])","d5efeb55":"count = 0\nfor i in range(0, len(df3)):\n    \n    if df3['hours'][i]==9 and (df3['minute'][i]==15 or df3['minute'][i]==30):\n        count+=1\n        df3.drop([i], inplace = True)\n        \nprint(count)\ndf3.head()","fa326a6b":"df4 = df3.reset_index(level = None, drop= False, inplace = False, col_level=0)\ndf4.head()","e1720c2f":"c=0\nfor i in range(0, len(df3)):\n    if df4['close-VWAP'][i]>0:\n        c+=1\nprint(c)","a6863041":"for i in range(0, len(df3)):\n    if df4['close-VWAP'][i]>0:\n        df4['buy'][i] = df4['High 5'][i] + tick\n        df4['sell'][i] = 0\n    else:\n        df4['buy'][i] = 0\n        df4['sell'][i] = df4['Low 5'][i] - tick\ndf4.head()","7b020d72":"#df4.to_excel('BankNiftyFutures_df4.xlsx')","ce2e8115":"plt.figure(figsize=(15,5))\nplt.scatter(df4.index, df4['buy'], color='blue', s=3)\nplt.scatter(df4.index, df4['sell'], color='red', s=3)\nplt.legend(['buy', 'sell'])","2178bfb5":"df4['buy'].sum()","28ac5067":"df4['sell'].sum()","6745f0c9":"df4['sell'].sum() - df4['buy'].sum()","2ae416c1":"df4['profit'] = ''\ndf4['loss'] = ''","58d39cfc":"df4.head()","154aa17b":"for i in range(0, len(df4)):\n    if (df4['sell'][i] - df4['buy'][i])>0:\n        df4['profit'][i] = df4['sell'][i] - df4['buy'][i]\n        df4['loss'][i] = 0\n    elif (df4['sell'][i] - df4['buy'][i])<0:\n        df4['profit'][i] = 0\n        df4['loss'][i] = df4['buy'][i] - df4['sell'][i]","e4baa529":"df4.head()","38a2c730":"#df4.to_excel('BankNiftyFutures_df4_profit_loss.xlsx')","fd28e2df":"print('Profit:', df4['profit'].sum())\nprint('Loss:  ', df4['loss'].sum())","9f585eb5":"plt.figure(figsize=(15,5))\nplt.scatter(df4['index'], df4['profit'], color = 'blue', s = 3)\nplt.scatter(df4['index'], df4['loss'], color = 'red', s = 3)\nplt.legend(['Profit', 'Loss'])","dafccfdd":"df4['year'].unique()","bf3c339b":"p2015 = 0; p2016 = 0; p2017 = 0; p2018 = 0; p2019 = 0;\nl2015 = 0; l2016 = 0; l2017 = 0; l2018 = 0; l2019 = 0;\n\nfor i in range(0, len(df4)):\n    if df4['year'][i]==2015:\n        p2015 += df4['profit'][i]\n        l2015 += df4['loss'][i]\n    elif df4['year'][i]==2016:\n        p2016 += df4['profit'][i]\n        l2016 += df4['loss'][i]\n    elif df4['year'][i]==2017:\n        p2017 += df4['profit'][i]\n        l2017 += df4['loss'][i]\n    elif df4['year'][i]==2018:\n        p2018 += df4['profit'][i]\n        l2018 += df4['loss'][i]\n    elif df4['year'][i]==2019:\n        p2019 += df4['profit'][i]\n        l2019 += df4['loss'][i]        ","605a2467":"x = [1,2,3,4,5]\np = [p2015, p2016, p2017, p2018, p2019]\nl = [l2015, l2016, l2017, l2018, l2019]","9b749368":"data = {'PROFIT':[p2015, p2016, p2017, p2018, p2019],\n        'LOSS':[l2015, l2016, l2017, l2018, l2019]}\n\ndf = pd.DataFrame(data, index =['2015','2016','2017','2018','2019'])\ndf","3649b697":"plt.scatter(x,p, color='blue')\nplt.scatter(x,l, color='red')","ab18cb78":"plt.plot(x,p,'o-',color='blue')\nplt.plot(x,l,'o-',color='red')\nplt.legend(['Profit', 'Loss'])","ac7bc3ec":"### NSE (National Stock Exchange) Tick Size is Rs. 0.05","51f8409b":"### NET VALUE ADDED FOR THE GIVEN DATASET","fc238dc0":"### FILL UP THE BUY AND SELL VALUES WITH HIGH+TICK AND LOW-TICK RESPECTIVELY","de85f141":"### CREATE NEW COLUMNS OF day, month, year, minute, hour FROM DATETIME VALUE","ee3347bd":"### DROP THE UNNECESSARY COLUMNS FROM THE DATAFRAME","123b4a3c":"### TOTAL PROFIT AND LOSS FOR THE ENTIRE DATASET","9637586a":"### IMPORT REQUIRED LIBRARIES","17e5441e":"### USING MATPLOTLIB CREATE SCATTER PLOT OF BUY AND SELL DATA","b489b692":"### COUNT THE TOTAL NUMBER OF TIMES CLOSING VALUE WAS HIGHER THAN VWAP","c43253db":"### DROP THE ROWS BEFORE 9:45 AM","0d5e6d89":"### ANNUAL TOTAL PROFIT AND LOSS","7d1dfa7d":"### CREATE NEW DATAFRAME USING ONLY USEFUL VALUES and CREATE NEW EMPTY COLUMNS","befb6c55":"### SET THE COMBINED DATETIME COLUMN AS INDEX","2e844178":"### FILL PROFIT AS SELL-BUY and where profit is positive fill LOSS AS 0 AND VICE VERSA","971a3b6d":"### CREATE profit AND loss COLUMN FOR DAILY PROFIT AND LOSS","dc85b71b":"### USE THE FOLLOWING COMMAND TO SAVE THE DATASET FORMED ABOVE AS EXCEL FILE","546b0dc3":"### COMBINE DATE AND TIME COLUMN USING PANDAS to_datetime FUNCTION","8e8735f3":"### FILL THE close-VWAP COLUMN WITH THE RESPECTIVE DIFFERENCES OF CLOSING VALUE AND CALCULATED VWAP","6edacb79":"### THE INTERVAL OF 5 MINUTES IS CONVERTED TO 15 MINUTES USING RESAMPLE FUNCTION AND ADDING THE VALUE FROM REST OF THE RESPECTIVE COLUMNS","ef2bb98c":"### INCLUDE='ALL' GIVES DESCRIPTION OF ALL COLUMNS","f5407538":"### REMOVE THE COMBINED DATETIME COLUMN FROM INDEX COLUMN"}}