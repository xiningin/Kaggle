{"cell_type":{"cd9b93e1":"code","848a5f07":"code","0f08eaf2":"code","1736e62d":"code","b2b1f9b3":"code","d0a1b579":"code","219de0a4":"code","0bc482fc":"code","327649ec":"code","48315bdb":"code","2cc1a55b":"code","b4e82267":"code","a4298f4c":"code","33994c9b":"code","3267a0c1":"code","0f99647b":"code","5224b3f9":"code","65fe76d2":"code","affb2f95":"code","e4f59b4a":"code","d6ba3e3c":"code","f98252a3":"code","c28cd41c":"code","79e0a39b":"code","edea0e17":"code","86173381":"code","84f02236":"code","4a1f33ac":"code","72261cbb":"code","16bbdc00":"code","5789da57":"code","9d976367":"code","09c23413":"code","d81a0ff0":"code","a4dbf4db":"code","6fdd549b":"code","81a5fe2f":"code","4d3d3676":"code","ba2f780f":"code","43dcdc09":"code","87a0d88e":"code","26cff093":"code","c284d33e":"code","e5d65138":"code","094316b8":"code","61f9ef85":"code","0ae27d30":"code","999039c3":"code","62c8d22e":"code","c0782916":"code","e5280835":"code","e88ae05d":"code","4c5bc5fc":"code","bcd80f75":"code","6fbe4180":"code","f939b7ff":"code","5b0bcadc":"code","a5422a93":"code","6399a3df":"code","7047ba74":"code","bb8a9067":"code","ec7eb675":"code","459ef6ef":"code","710ef92d":"code","dca6e87a":"markdown","f0770eb8":"markdown","5ed5e525":"markdown","3b985bba":"markdown","060cf8b2":"markdown","f19ad4b7":"markdown","b50aa9d5":"markdown","bd9dd635":"markdown","41c1c400":"markdown","508b5279":"markdown","ac3c77f2":"markdown","41f9bcc6":"markdown","8c30f21a":"markdown","26e179df":"markdown","17729673":"markdown","ac4b818b":"markdown","0ad59eb6":"markdown","99c982bb":"markdown","0f6ac571":"markdown","90c4bab4":"markdown","766e709e":"markdown","3bc9eea4":"markdown","33ef5598":"markdown","a9782bf2":"markdown","1cddc804":"markdown","a9724617":"markdown","eed5ace7":"markdown","a087dab9":"markdown","1c344a89":"markdown","3c5c4f8d":"markdown","3647c9c4":"markdown","f58132fc":"markdown","116697cf":"markdown"},"source":{"cd9b93e1":"import warnings\nfrom pandas import Series\nimport pandas as pd\nimport numpy as np\nimport collections\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\nfrom sklearn.preprocessing import PolynomialFeatures\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve\nfrom sklearn.metrics import recall_score, precision_score, f1_score, log_loss\nfrom sklearn.metrics import accuracy_score\n\n\nimport matplotlib\nplt.style.use('ggplot')\n%matplotlib inline\nmatplotlib.rcParams['figure.figsize'] = (12, 8)\n\npd.set_option('display.max_rows', 50)  # \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0442\u0440\u043e\u043a\npd.set_option('display.max_columns', 50)  # \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nwarnings.filterwarnings(\"ignore\")  # \u0423\u0431\u0438\u0440\u0430\u0435\u0442 \u043d\u0435\u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f","848a5f07":"#train = pd.read_csv('.\/train.csv')\n#test = pd.read_csv('.\/test.csv')\n#sample_submission = pd.read_csv('.\/sample_submission.csv')\n\ntrain = pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/train.csv')\ntest= pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/sample_submission.csv')","0f08eaf2":"pd.set_option('display.max_columns', None)\nprint('\u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: ', train.shape)\ndisplay(train.head(3))\nprint('\u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: ', test.shape)\ndisplay(test.head(3))\nprint('\u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c sample_submission: ', sample_submission.shape)\ndisplay(sample_submission.head(3))","1736e62d":"RANDOM_SEED = 42\n!pip freeze > requirements.txt","b2b1f9b3":"train.columns","d0a1b579":"test.columns","219de0a4":"train.isnull().sum(), test.isnull().sum()","0bc482fc":"fig, ax = plt.subplots(figsize=(12, 8))\nsns_heatmap = sns.heatmap(train.isnull(),\n                          yticklabels=False,\n                          cbar=False,\n                          cmap='viridis')","327649ec":"fig, ax = plt.subplots(figsize=(12, 8))\nsns_heatmap = sns.heatmap(\n    test.isnull(), yticklabels=False, cbar=False, cmap='viridis')","48315bdb":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nsns.countplot(train['education'])\n# \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 SCH","2cc1a55b":"sns.countplot(test['education'])\n# \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 SCH","b4e82267":"# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\n\nc_1 = collections.Counter(train['education'])\nc_2 = collections.Counter(test['education'])\n\ntrain['education'].fillna(c_1.most_common()[0][0], inplace=True)\ntest['education'].fillna(c_2.most_common()[0][0], inplace=True)","a4298f4c":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\ntrain.isnull().sum(), test.isnull().sum()","33994c9b":"# \u0412\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043f\u043e\u0431\u043b\u0438\u0436\u0435 \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a app_date\ntrain.app_date.head(5), test.app_date.head(5)","3267a0c1":"# \u0421\u043a\u043e\u043d\u0432\u0435\u0442\u0438\u0440\u0443\u0435\u043c \u0432 \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u0430\u0442\u044b\ntrain.app_date = pd.to_datetime(train.app_date)\ntest.app_date = pd.to_datetime(test.app_date)\nprint(train.app_date.head(5))\nprint(test.app_date.head(5))","0f99647b":"# \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 app_date \u0434\u0435\u043b\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\ncurrent_date = pd.to_datetime('24DEC2020')\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0441\u043e \u0434\u043d\u044f \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\ntrain['days'] = (current_date - train.app_date).dt.days\ntest['days'] = (current_date - test.app_date).dt.days","5224b3f9":"# \u0412\u043e\u0442 \u0435\u0449\u0451 \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043d\u0430 \u044d\u0442\u043e\u0442 \u0440\u0430\u0437 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0437\u044f\u0442 \u0441 \u043f\u043e\u0442\u043e\u043b\u043a\u0430, \u0441\u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445.\n# \u041e\u043d \u043f\u043e\u0432\u044b\u0448\u0430\u0435\u0442 roc_auc \u043d\u0430 0.001\ntrain['bki_age_reg'] = (train['score_bki']\/train['age'])*train['region_rating']\ntest['bki_age_reg'] = (test['score_bki']\/test['age'])*test['region_rating']","65fe76d2":"train.head()","affb2f95":"bin_cols = ['sex', 'car', 'car_type', 'good_work', 'foreign_passport']\ncat_cols = [\n    'education', 'home_address', 'work_address', 'sna', 'first_time',\n    'region_rating'\n]\nnum_cols = [\n    'days', 'age', 'decline_app_cnt', 'score_bki', 'bki_request_cnt', 'income',\n    'bki_age_reg'\n]","e4f59b4a":"sns.countplot(train['default'])","d6ba3e3c":"train['default'].value_counts()\n# \u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e \u0447\u0442\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u043d\u0435\u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e \u0438 \u043d\u0435\u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0437\u0430\u043c\u0435\u0442\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435","f98252a3":"# \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c oversampling \u0434\u043b\u044f \u0443\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0438\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0430\ntrain_0 = train.query('default == 0')\ntrain_1 = train.query('default == 1')\nkoeff = int(len(train_0)\/len(train_1))\nfor i in range(koeff):\n    train = train.append(train_1).reset_index(drop=True)  # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","c28cd41c":"train['default'].value_counts()","79e0a39b":"sns.boxplot(x=train.default, y=train.age)\n# \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442","edea0e17":"sns.boxplot(x=train.default, y=train.days)","86173381":"sns.boxplot(x=train.default, y=train.decline_app_cnt)","84f02236":"sns.boxplot(x=train.default, y=train.score_bki)","4a1f33ac":"sns.boxplot(x=train.default, y=train.bki_request_cnt)","72261cbb":"sns.boxplot(x=train.default, y=train.income)","16bbdc00":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043c\u0435\u0436\u043a\u0432\u0430\u0440\u0442\u0438\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 1.5 \u043c\u0435\u0436\u043a\u0432\u0430\u0440\u0442\u0438\u043b\u044c\u043d\u044b\u0445 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0441 \u043e\u0431\u0435\u0438\u0445\n# \u0441\u0442\u043e\u0440\u043e\u043d \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430. \u0421 \u0435\u0451 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0438\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432.\n\ndef outliers_iqr(ys):\n    quartile_1, quartile_3 = np.percentile(ys, [25, 75])\n    iqr = quartile_3 - quartile_1\n    lower_bound = quartile_1 - (iqr * 1.5)\n    upper_bound = quartile_3 + (iqr * 1.5)\n    return lower_bound, upper_bound","5789da57":"# \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445\nnum_cols_1 = ['bki_request_cnt', 'score_bki']\nfor colname in num_cols_1:\n    d = outliers_iqr(train[colname])\n    train = train.loc[train[colname].between(d[0], d[1])]","9d976367":"train.info()","09c23413":"fig, axes = plt.subplots(2, 4, figsize=(25, 12))\nfor col, i in zip(num_cols, range(8)):\n    sns.distplot(train[col], kde=False, ax=axes.flat[i])","d81a0ff0":"num_cols_log = ['age', 'decline_app_cnt', 'bki_request_cnt', 'income']\n\nfor i in num_cols_log:\n    train[i] = np.log(train[i] + 1)","a4dbf4db":"fig, axes = plt.subplots(2, 4, figsize=(25, 12))\nfor col, i in zip(num_cols, range(8)):\n    sns.distplot(train[col], kde=False, ax=axes.flat[i])","6fdd549b":"for i in num_cols_log:\n    test[i] = np.log(test[i] + 1)","81a5fe2f":"fig, axes = plt.subplots(2, 4, figsize=(25, 12))\nfor col, i in zip(num_cols, range(7)):\n    sns.distplot(test[col], kde=False, ax=axes.flat[i])","4d3d3676":"label_encoder = LabelEncoder()\n\nfor column in bin_cols:\n    train[column] = label_encoder.fit_transform(train[column])\n    test[column] = label_encoder.fit_transform(test[column])\n\n\n# \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438\ndisplay(train.head())\ndisplay(test.head())","ba2f780f":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0435\u0449\u0451 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n#\u0414\u0432\u0430 \u043d\u0438\u0436\u0435\u043b\u0435\u0436\u0430\u0449\u0438\u0445 \u043f\u043e\u0432\u044b\u0448\u0430\u044e\u0442 f1-score \u043d\u0430 0,01, \u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043c\u0435\u0441\u0442\u0435.\ntrain['new_one'] = (train['score_bki']\/train['age'])**train['sna']\ntest['new_one'] = (test['score_bki']\/test['age'])**test['sna']\nnum_cols.append('new_one')\n\ntrain['new_one1'] = (train['score_bki']\/train['age'])**train['foreign_passport']\ntest['new_one1'] = (test['score_bki']\/test['age'])**test['foreign_passport']\nnum_cols.append('new_one1')\n\n# \u041f\u043e\u043f\u044b\u0442\u043a\u0438 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0435\u0441\u044f\u0446 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043d\u0435 \u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u0432\u0438\u0434\u0438\u043c\u043e\u0433\u043e \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c.\ntrain['month'] = train['app_date'].dt.month\ntest['month'] = test['app_date'].dt.month\ncat_cols.append('month')","43dcdc09":"corr = train[num_cols].corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(3)","87a0d88e":"train = pd.get_dummies(train, columns=['education'])","26cff093":"train = pd.get_dummies(train, columns=['region_rating'])","c284d33e":"train.sample(5)","e5d65138":"test = pd.get_dummies(test, columns=['education'])","094316b8":"test = pd.get_dummies(test, columns=['region_rating'])\ntest.head()","61f9ef85":"cat_cols = [\n    'home_address', 'work_address', 'sna', 'first_time', 'education_ACD',\n    'education_GRD', 'education_PGR', 'education_SCH', 'education_UGR',\n    'region_rating_20', 'region_rating_30', 'region_rating_40',\n    'region_rating_50', 'region_rating_60', 'region_rating_70',\n    'region_rating_80','month'\n]\nx_cat = OneHotEncoder(sparse=False).fit_transform(train[cat_cols].values)\ny_cat = OneHotEncoder(sparse=False).fit_transform(test[cat_cols].values)\n\nprint(x_cat.shape)\nprint(y_cat.shape)","0ae27d30":"imp_num = Series(f_classif(train[num_cols], train['default'])[0],\n                 index=num_cols)\nimp_num.sort_values(inplace=True)\nimp_num.plot(kind='barh')\nplt.title('\u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445')\nplt.xlabel('F-value')","999039c3":"# \u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\nimp_bin = Series(mutual_info_classif(train[bin_cols],\n                                     train['default'],\n                                     discrete_features=True),\n                 index=bin_cols)\nimp_bin.sort_values(inplace=True)\nimp_bin.plot(kind='barh')\nplt.title('\u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445')","62c8d22e":"# \u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n#new_cat_cols = [\n#    'home_address', 'work_address', 'sna', 'first_time',\n#    'education_ACD', 'education_GRD', 'education_PGR', 'education_SCH',\n#    'education_UGR', 'region_rating_20', 'region_rating_30',\n#    'region_rating_40', 'region_rating_50', 'region_rating_60',\n#    'region_rating_70', 'region_rating_80', 'month']\n\nimp_cat = pd.Series(mutual_info_classif(train[cat_cols],\n                                        train['default'],\n                                        discrete_features=True),\n                    index=train[cat_cols].columns)\nimp_cat.sort_values(inplace=True)\nimp_cat.plot(kind='barh')\nplt.title('Significance of cat variables')","c0782916":"poly = PolynomialFeatures(2)\n\nx_p = poly.fit_transform(train[num_cols].values)\ny_p = poly.fit_transform(test[num_cols].values)","e5280835":"# \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\n\nX_num = StandardScaler().fit_transform(x_p)\nX_num.shape","e88ae05d":"Y_num = StandardScaler().fit_transform(y_p)\nY_num.shape","4c5bc5fc":"print(X_num)\nprint(Y_num)","bcd80f75":"X = np.hstack([X_num, train[bin_cols].values, x_cat])\nY = train['default'].values\n\nid_test = test['client_id']\ntest = np.hstack([Y_num, test[bin_cols].values, y_cat])","6fbe4180":"X_train, X_test, y_train, y_test = train_test_split(X,\n                                                    Y,\n                                                    test_size=0.20,\n                                                    random_state=RANDOM_SEED,\n                                                    shuffle=True)","f939b7ff":"# \u0417\u0430\u0434\u0430\u0434\u0438\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\nC = np.logspace(0, 4, 10)\n\npenalty = ['l1', 'l2']\nhyperparameters = dict(C=C, penalty=penalty)\n\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\nclf = GridSearchCV(model, hyperparameters, cv=5, verbose=0)\n\nbest_model = clf.fit(X_train, y_train)\n\nprint('\u041b\u0443\u0447\u0448\u0438\u0439 penalty:', best_model.best_estimator_.get_params()['penalty'])\nprint('\u041b\u0443\u0447\u0448\u0435\u0435 C:', best_model.best_estimator_.get_params()['C'])","5b0bcadc":"# \u041e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c\n\nmodel = LogisticRegression(penalty='l2', C=7.742636826811269, max_iter=800)\nmodel.fit(X_train, y_train)","a5422a93":"probs = model.predict_proba(X_test)\nprobs = probs[:, 1]\n\n\nfpr, tpr, threshold = roc_curve(y_test, probs)\nroc_auc = roc_auc_score(y_test, probs)\n\n# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f ROC AUC\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label='Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc='lower right')\nplt.show()","6399a3df":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 accuracy \u0438 f1-score\ndef print_logisitc_metrics(y_true, y_pred):\n    acc = accuracy_score(y_true, y_pred)\n    f1 = f1_score(y_true, y_pred)\n    print(f'acc = {acc:.2f} F1-score = {f1:.2f}')","7047ba74":"Y_predicted = model.predict(X_test)\nprint_logisitc_metrics(y_test, Y_predicted)","bb8a9067":"# confusion matrix\ncm = confusion_matrix(y_test, Y_predicted)\ncm","ec7eb675":"# \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f confusion matrix\nsns.set_context(context='paper', font_scale=2, rc=None)\ngroup_names = ['True Neg', 'False Pos', 'False Neg', 'True Pos']\ngroup_counts = ['{0:0.0f}'.format(value) for value in\n                cm.flatten()]\nlabels = [f'{v1}\\n{v2}' for v1, v2 in\n          zip(group_names, group_counts)]\nlabels = np.asarray(labels).reshape(2, 2)\nsns.heatmap(cm, annot=labels, fmt='', cmap='Blues')","459ef6ef":"model = LogisticRegression(penalty='l2', C=7.742636826811269, max_iter=800)\nmodel.fit(X, Y)\nprobs = model.predict_proba(test)\nprobs = probs[:, 1]","710ef92d":"my_submission = pd.DataFrame({'client_id': id_test,\n                              'default': probs})\nmy_submission.to_csv('submission.csv', index=False)\n\nmy_submission.head(10)","dca6e87a":"\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c boxplot \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","f0770eb8":"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 OneHotEncoder","5ed5e525":"\u0423 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a \u0432\u044b\u0448\u0435, \u0447\u0435\u043c \u0443 \u043d\u0435\u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445. \u0415\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u043d\u043e \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0438\u0445 \u043d\u0435\u0446\u0435\u043b\u0435\u0441\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u043e, \u0442.\u043a. \u043c\u0435\u0434\u0438\u0430\u043d\u0430 \u0443 \u043d\u0430\u0441 \u0440\u0430\u0432\u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 0 \u0438 \u0432\u0435\u0441\u044c \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0441\u044f \u0432 0. \u041d\u043e \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u043b\u0438\u044f\u043d\u0438\u0435.","3b985bba":"\u0414\u043b\u044f \u0443\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0438\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c oversamping","060cf8b2":"### \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","f19ad4b7":"\u041a\u0440\u0435\u0434\u0438\u0442\u044b \u0447\u0430\u0449\u0435 \u0432\u044b\u0434\u0430\u044e\u0442 \u0442\u0435\u043c, \u0443 \u043a\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0434\u043e\u0445\u043e\u0434\u0430 \u0432\u044b\u0448\u0435. \u0427\u0442\u043e \u0432\u043f\u043e\u043b\u043d\u0435 \u043b\u043e\u0433\u0438\u0447\u043d\u043e.\u0412\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442.","b50aa9d5":"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0438 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 \u043e\u0434\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0432 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e.","bd9dd635":"### \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u043f\u043e \u0442\u0438\u043f\u0430\u043c \u0434\u0430\u043d\u043d\u044b\u043c \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f","41c1c400":"## \u0412\u044b\u0432\u043e\u0434\u044b\n\n\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043c\u0435\u0442\u043e\u0434\u044b, \u0443\u043b\u0443\u0447\u0448\u0430\u044e\u0449\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0437\u0430 \u0441\u0447\u0451\u0442 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 (\u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f, \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0434\u0440\u0443\u0433\u0438\u0435), \u043d\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c\u0438 \u0444\u0430\u043a\u0442\u043e\u0440\u0430\u043c\u0438, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f, \u043e\u0441\u0442\u0430\u044e\u0442\u0441\u044f EDA \u0438 feauture engineering.","508b5279":"\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418 \u0434\u043b\u044f \u0442\u0435\u0445, \u043a\u043e\u043c\u0443 \u043e\u0442\u043a\u0430\u0437\u0430\u043b\u0438 - \u0432\u044b\u0448\u0435, \u0447\u0435\u043c \u0434\u043b\u044f \u0442\u0435\u0445 \u043a\u043e\u043c\u0443 \u043d\u0435 \u043e\u0442\u043a\u0430\u0437\u0430\u043b\u0438. \u041c\u0435\u0442\u043e\u0434\u0438\u043a\u0430 \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430 (\u043d\u0430 \u0441\u0430\u0439\u0442\u0435 \u0411\u041a\u0418 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043e\u0442 300 \u0434\u043e 850 \u0431\u0430\u043b\u043b\u043e\u0432), \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u0447\u0435\u043c \u043d\u0438\u0436\u0435 \u0431\u0430\u043b\u043b, \u0442\u0435\u043c \u043d\u0430\u0434\u0435\u0436\u043d\u0435\u0435 \u0437\u0430\u0435\u043c\u0449\u0438\u043a. \u0415\u0441\u043b\u0438 \u0438\u043d\u0430\u0447\u0435, \u0442\u043e \u0435\u0441\u0442\u044c \u043d\u0430\u0434 \u0447\u0435\u043c \u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u043c\u043e\u0434\u0435\u043b\u0438. \u0412\u044b\u0431\u0440\u043e\u0441\u044b \u0435\u0441\u0442\u044c, \u043d\u0430\u0434\u043e \u0443\u0431\u0438\u0440\u0430\u0442\u044c.","ac3c77f2":"### \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","41f9bcc6":"\u0412\u044b\u0441\u043e\u043a\u043e\u0439 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043d\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0433\u043e bki_age_rate \u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0445 \u0435\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \u041d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043d\u0435 \u043d\u0430\u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0432\u044b\u0441\u043e\u043a\u0430 (\u043c\u0435\u043d\u044c\u0448\u0435 0.7), \u0447\u0442\u043e\u0431\u044b \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u0430\u0448 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438\u0437 \u0430\u043d\u0430\u043b\u0438\u0437\u0430.","8c30f21a":"\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 'education' \u0438 \u0438\u0445 \u043c\u0430\u043b\u043e, \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430.","26e179df":"\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u0447\u0438\u0441\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418 \u0443 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432\u044b\u0448\u0435. \u0412\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442. ","17729673":"### \u0420\u0430\u0431\u043e\u0442\u0430 \u0441  \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438, feature engineering","ac4b818b":"### \u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","0ad59eb6":"\u0418 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\u043c\u0438, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u043b\u043e\u0436\u0438\u0442\u044c \u0435\u0433\u043e \u043d\u0430 kaggle","99c982bb":"### \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0438","0f6ac571":"\u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f. \u041d\u0430\u0431\u043b\u044e\u0434\u0430\u044e\u0442\u0441\u044f \u043f\u044f\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439. \u0418 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439, \u0438 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u044f\u0445 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 SCH","90c4bab4":"### \u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\u00b6","766e709e":"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438. \u0411\u044b\u043b\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0438\u0437 \u043d\u0438\u0445 \u0431\u044b\u043b\u043e \u0432\u044b\u0431\u0440\u0430\u043d\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438, \u043a\u0430\u043a \u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438.","3bc9eea4":"### \u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 (\u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u044f)","33ef5598":"### \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\n\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 LabelEncoder","a9782bf2":"### \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c\u0443 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e","1cddc804":"\u041d\u0435\u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0441\u0442\u0430\u0440\u0448\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445. \u0412\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442.","a9724617":"\u0421\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0431\u0430\u043d\u043a \u043d\u0430\u0443\u0447\u0438\u043b\u0441\u044f \u0447\u0430\u0449\u0435 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u044b, \u0447\u0442\u043e \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e \u043f\u043e\u0432\u044b\u0441\u0438\u043b\u043e \u0435\u0433\u043e \u043f\u0440\u0438\u0431\u044b\u043b\u044c\u043d\u043e\u0441\u0442\u044c. \u0412\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442.","eed5ace7":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","a087dab9":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n\n- client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n- education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n- sex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n- age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n- car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- car_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n- decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n- good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\n- bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\n- home_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n- work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n- income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n- foreign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n- sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n- first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\n- score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\n- region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n- app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n- default - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443","1c344a89":"### \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438","3c5c4f8d":"\u041f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043c\u0435\u0449\u0435\u043d\u043e","3647c9c4":"### \u041f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445","f58132fc":"# rds-scoring_team-four_dst-1_dst-2\n\n# [SF-DST] Credit Scoring\n","116697cf":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e. \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u043e\u0432 \u044f\u0432\u043d\u043e \u043d\u0435\u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0435, \u043d\u0435\u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0437\u0430\u043c\u0435\u0442\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435."}}