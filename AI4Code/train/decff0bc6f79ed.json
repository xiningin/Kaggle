{"cell_type":{"8df48e33":"code","480903a2":"code","837cbc34":"code","4b6aed6b":"code","80cf6535":"code","0c82c904":"code","b2f06394":"code","67a52002":"code","f8550779":"code","d38a1b56":"code","86e52893":"code","b6844665":"code","38251f11":"code","b796caec":"code","56babea1":"code","5d9a9b9a":"code","1dba3f67":"code","2b9467d5":"code","423b122b":"code","7334dd9c":"code","39758e05":"code","ff30162b":"code","e9218ce0":"code","085840ad":"code","7172793a":"code","6f49988c":"code","9038ea69":"code","f40b2529":"code","d1634d65":"code","249aa9b1":"code","1a912d29":"code","fb869b95":"code","b7ca476f":"code","2120ef2c":"code","a3d554fe":"code","b1b977d9":"markdown","04d03fad":"markdown","69b8c4fb":"markdown"},"source":{"8df48e33":"import numpy as np\nimport matplotlib.pyplot as plt\nimport cv2\nimport os","480903a2":"image = cv2.imread('..\/input\/100-bollywood-celebrity-faces\/bollywood_celeb_faces2\/Rani_Mukerji\/100.jpg')\ntype(image)","837cbc34":"plt.imshow(image)","4b6aed6b":"image.shape","80cf6535":"image = cv2.imread('..\/input\/100-bollywood-celebrity-faces\/bollywood_celeb_faces2\/Sanjay_Dutt\/10.jpg')\ntype(image)","0c82c904":"plt.imshow(image)","b2f06394":"image.shape","67a52002":"train_path = '..\/input\/100-bollywood-celebrity-faces\/bollywood_celeb_faces2\/'\ntest_path = '..\/input\/100-bollywood-celebrity-faces\/bollywood_celeb_faces2\/'","f8550779":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPool2D, Dropout\nfrom keras.layers import Dense, Flatten, Activation\nfrom keras.preprocessing.image import ImageDataGenerator","d38a1b56":"model = Sequential()\nmodel.add(Conv2D(input_shape=(256,256,3),filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(units=4096,activation=\"relu\"))\nmodel.add(Dense(units=4096,activation=\"relu\"))\nmodel.add(Dense(units=34, activation=\"softmax\"))\nmodel.summary()","86e52893":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","b6844665":"datagen = ImageDataGenerator(rescale=1.0\/255, validation_split=0.1)","38251f11":"train_data = datagen.flow_from_directory(train_path,\n                                               target_size=[264,264],\n                                               batch_size=64,\n                                               class_mode='categorical')\ntest_data = datagen.flow_from_directory(test_path,\n                                               target_size=[264,264],\n                                               batch_size=64,\n                                               class_mode='categorical')\n","b796caec":"history=model.fit_generator(train_data,\n                           validation_data=test_data,\n                           epochs=1,\n                           steps_per_epoch=len(train_data),\n                           validation_steps=len(test_data))","56babea1":"print(history.history.keys())","5d9a9b9a":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","1dba3f67":"from keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg16 import preprocess_input\n\nfrom keras.applications import InceptionV3\nfrom keras.applications import ResNet50\nfrom keras.models import Model","2b9467d5":"vgg = VGG16(include_top=False, weights='imagenet', input_shape=(264,264,3))\nvgg.summary()","423b122b":"for layer in vgg.layers:\n    layer.trainable=False","7334dd9c":"x = Flatten()(vgg.output)\nx = Dense(512,activation='relu')(x)\nx = Dense(512,activation='relu')(x)\nprediction = Dense(34,activation='softmax')(x)\nmodel = Model(inputs=vgg.input, outputs=prediction)\nmodel.summary()","39758e05":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","ff30162b":"history=model.fit_generator(train_data,\n                           validation_data=test_data,\n                           epochs=5,\n                           steps_per_epoch=len(train_data),\n                           validation_steps=len(test_data))","e9218ce0":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","085840ad":"inception = InceptionV3(include_top=False, weights='imagenet', input_shape=(264,264,3))\ninception.summary()","7172793a":"for layer in inception.layers:\n    layer.trainable=False","6f49988c":"x = Flatten()(inception.output)\nx = Dense(512,activation='relu')(x)\nx = Dense(512,activation='relu')(x)\nprediction = Dense(34,activation='softmax')(x)\nmodel = Model(inputs=inception.input, outputs=prediction)\nmodel.summary()","9038ea69":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","f40b2529":"history=model.fit_generator(train_data,\n                           validation_data=test_data,\n                           epochs=5,\n                           steps_per_epoch=len(train_data),\n                           validation_steps=len(test_data))","d1634d65":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","249aa9b1":"resnet = ResNet50(include_top=False, weights='imagenet', input_shape=(264,264,3))\nresnet.summary()","1a912d29":"for layer in resnet.layers:\n    layer.trainable=False","fb869b95":"x = Flatten()(resnet.output)\nx = Dense(512,activation='relu')(x)\nx = Dense(512,activation='relu')(x)\nprediction = Dense(34,activation='softmax')(x)\nmodel = Model(inputs=resnet.input, outputs=prediction)\nmodel.summary()","b7ca476f":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","2120ef2c":"history=model.fit_generator(train_data,\n                           validation_data=test_data,\n                           epochs=5,\n                           steps_per_epoch=len(train_data),\n                           validation_steps=len(test_data))","a3d554fe":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","b1b977d9":"## Inception Architecture","04d03fad":"## VGG16 Architecture","69b8c4fb":"## Resnet Architecture"}}