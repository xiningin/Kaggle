{"cell_type":{"24d35386":"code","6a3b4d3f":"code","06600d66":"code","6dc88f66":"code","e3ee66f8":"code","0f7d6f02":"code","d0ff801c":"code","2edc77eb":"code","abf1c5b9":"code","78c30dcb":"code","74863efa":"code","2875f53e":"code","b7aeff12":"code","16e3b31e":"code","45e81074":"code","ff8af49c":"code","29514efd":"code","078664a8":"code","57eca0a8":"code","fbbd55fa":"code","9f3d3371":"code","a7b7b5ef":"code","b794f813":"code","9b65828b":"code","d35286c3":"code","3a1d7903":"code","c623694a":"code","b20322bf":"code","2da7a355":"code","bfe0429d":"code","5321518f":"code","6cbd4a04":"code","49eaf6df":"code","45e088da":"code","79c7e010":"code","33446e1b":"code","0e9d3d60":"code","b031fa57":"code","37094ac5":"code","ed2c2a36":"code","fb82717f":"code","49929f68":"code","ef6e2c57":"code","600df24b":"code","85a124ab":"code","79f872aa":"code","c5025f01":"code","2255e382":"code","af676503":"code","b0201cb1":"code","30664260":"code","c8df3214":"code","1f20de30":"code","6febd7f0":"code","9b1522ae":"code","000bc69e":"code","9e86aa6e":"code","5b1c3772":"code","d6326ae5":"code","b4a01e17":"code","1cc32cd5":"markdown","2cb33f3b":"markdown"},"source":{"24d35386":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.","6a3b4d3f":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","06600d66":"data = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')","6dc88f66":"print(data.shape)\nprint(data.head())","e3ee66f8":"data.describe()","0f7d6f02":"data.describe().T","d0ff801c":"data.dtypes","2edc77eb":"data.info(verbose= True)","abf1c5b9":"data2=data.copy(deep=True)","78c30dcb":"data2[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']]= data2[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.nan)","74863efa":"data2.isnull().sum()","2875f53e":"p=data2.hist(figsize=(20,20))","b7aeff12":"data2['Pregnancies'].unique()","16e3b31e":"data2['Glucose'].fillna(data2['Glucose'].mean(), inplace=True)\ndata2['BloodPressure'].fillna(data2['BloodPressure'].mean(), inplace=True)\ndata2['SkinThickness'].fillna(data2['SkinThickness'].median(), inplace=True)\ndata2['Insulin'].fillna(data2['Insulin'].median(), inplace=True)\ndata2['BMI'].fillna(data2['BMI'].median(), inplace=True)\n","45e81074":"data2.isnull().sum()","ff8af49c":"q = data2.hist(figsize=(20,20))","29514efd":"print(data2['Outcome'].value_counts())\nprint(data2['Outcome'].value_counts().plot(kind=\"bar\"))","078664a8":"plt.figure(figsize=(12,8))\nsns.heatmap(data.corr(), annot=True, center=True)","57eca0a8":"plt.figure(figsize=(12,8))\nsns.heatmap(data2.corr(), annot=True, center=True)","fbbd55fa":"#sns.boxplot(data2['BMI'])\nfor col in data2:\n    plt.figure(figsize=(3,2))\n    sns.boxplot(data2[col])","9f3d3371":"data2.Pregnancies.value_counts()","a7b7b5ef":"data2.Pregnancies.mean()","b794f813":"data2.loc[data2['Pregnancies']>12, 'Pregnancies']=data2['Pregnancies'].median()","9b65828b":"data2.Pregnancies.value_counts()","d35286c3":"data2.BloodPressure.value_counts()","3a1d7903":"data2.loc[(data2.BloodPressure > 100 )]","c623694a":"plt.figure(figsize=(15,12))\nsns.pairplot(data2, hue='Outcome')","b20322bf":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()","2da7a355":"sc_data = pd.DataFrame(sc.fit_transform(data2.drop('Outcome',axis=1)),columns=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n       'BMI', 'DiabetesPedigreeFunction', 'Age'])","bfe0429d":"sc_data.head()","5321518f":"x = sc_data.copy()\ny = data2['Outcome']","6cbd4a04":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.33, random_state=42, stratify=y)","49eaf6df":"# METHOD 1: KNN\nfrom sklearn.neighbors import KNeighborsClassifier\n\ntrain_score = []\ntest_score = []\n\nfor i in range(1,50):\n    knn = KNeighborsClassifier(i)\n    knn.fit(x_train,y_train)\n    \n    train_score.append(knn.score(x_train,y_train))\n    test_score.append(knn.score(x_test,y_test))\n    \n    ","45e088da":"max_train_score = max(train_score)\ntrain_index = [i for i, v in enumerate(train_score) if v==max_train_score]\n\nprint(\"Max_train_score = {} % and the value of k = {}\".format(max_train_score*100,list(map(lambda x: x+1, train_index))))","79c7e010":"max_test_score = max(test_score)\ntest_index = [i for i, v in enumerate(test_score) if v==max_test_score]\n\nprint(\"Max_test_score = {} % and the value of k = {}\".format(max_test_score*100,list(map(lambda x: x+1, test_index))))","33446e1b":"#print(train_score)\n#print(test_score)","0e9d3d60":"plt.figure(figsize=(15,6))\n\np = sns.lineplot(range(1,50), train_score, marker='o', label='train_score')\np = sns.lineplot(range(1,50), test_score, marker='o', label='test_score')","b031fa57":"# So finally we get the best score at k = 11\n\nknn_final = KNeighborsClassifier(11)\nknn_final.fit(x_train,y_train)\nknn_final.score(x_test,y_test)","37094ac5":"#METHOD 2: RANDOM FORREST\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nrf = RandomForestRegressor(n_estimators=100, random_state=42)","ed2c2a36":"rf.fit(x_train,y_train)","fb82717f":"rf.score(x_test,y_test)","49929f68":"pred2= rf.predict(x_test)\npred2=pred2.round().astype('int64')","ef6e2c57":"#print(pred2.shape)\n#print(y_pred.shape)","600df24b":"# METHOD 3: SUPPORT VECTOR MACHINE\n\nfrom sklearn import svm\nsup = svm.SVC()","85a124ab":"sup.fit(x_train,y_train)\nsup.score(x_test,y_test)","79f872aa":"# METHOD 4: DECISION TREE\n\nfrom sklearn.tree import DecisionTreeClassifier\ndis = DecisionTreeClassifier(random_state=42)","c5025f01":"dis.fit(x_train,y_train)\ndis.score(x_test,y_test)","2255e382":"# 1. Confusion matrix  for KNN\n\nfrom sklearn.metrics import confusion_matrix\n\ny_pred = knn_final.predict(x_test)\nconfusion_matrix(y_pred,y_test)\npd.crosstab(y_test,y_pred, rownames=['True'], colnames=['Predicted'], margins=True)","af676503":"from sklearn import metrics\n\ncnf_matrix = confusion_matrix(y_test,y_pred)\np = sns.heatmap(pd.DataFrame(cnf_matrix), annot= True, fmt= 'g')\nplt.title('Confusion Matrix', y=1.1)\nplt.xlabel('Predicted')\nplt.ylabel('Actual')","b0201cb1":"# 2. Confusion matrix  for Random Forrest\n\nconfusion_matrix(pred2,y_test)\npd.crosstab(y_test,pred2, rownames=['True'], colnames=['Predicted'], margins=True)","30664260":"cnf_matrix2 = confusion_matrix(y_test,pred2)\np = sns.heatmap(pd.DataFrame(cnf_matrix2), annot= True, fmt= 'g')\nplt.title('Confusion Matrix', y=1.1)\nplt.xlabel('Predicted')\nplt.ylabel('Actual')","c8df3214":"# 3. Confusion matrix for Support Vector Machine\n\npred3 = sup.predict(x_test)\nconfusion_matrix(pred3,y_test)\npd.crosstab(y_test,pred3, rownames=['True'], colnames=['Predicted'], margins=True)","1f20de30":"cnf_matrix3 = confusion_matrix(y_test,pred3)\np = sns.heatmap(pd.DataFrame(cnf_matrix3),annot=True, fmt='g')\nplt.title('Confusion Matrix', y=1.1)\nplt.xlabel('Predicted')\nplt.ylabel('Actual')","6febd7f0":"# 4. Confusion matrix for Decision Tree\n\npred4 = dis.predict(x_test)\nconfusion_matrix(pred4,y_test)\npd.crosstab(y_test,pred4, rownames=['True'], colnames=['Predicted'], margins=True)","9b1522ae":"cnf_matrix4 = confusion_matrix(y_test,pred4)\np = sns.heatmap(pd.DataFrame(cnf_matrix4),annot=True, fmt='g')\nplt.title('Confusion Matrix', y=1.1)\nplt.xlabel('Predicted')\nplt.ylabel('Actual')","000bc69e":"# 1. Classification report for KNN\n\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_pred,y_test))","9e86aa6e":"# 2. Classification report for Random Forrest\n\nprint(classification_report(pred2,y_test))","5b1c3772":"# 3. Classification report for Support Vector Machine\n\nprint(classification_report(pred3,y_test))","d6326ae5":"# 4. Classification report for Decision Tree Classifier\n\nprint(classification_report(pred4,y_test))","b4a01e17":"#The End","1cc32cd5":"# Model fitting","2cb33f3b":"# Performance analysis."}}