{"cell_type":{"a07c10ed":"code","72ec9e2d":"code","bea15d32":"code","8e78b934":"code","a1420027":"code","9e29a93a":"code","4d077484":"code","1b53f9ec":"code","365e5150":"code","f1871038":"code","972297bb":"code","cbe758a8":"markdown","ffcd0ff2":"markdown"},"source":{"a07c10ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","72ec9e2d":"    dffloripa = pd.read_csv(\"..\/input\/re-floripa-v4\/Re_floripa_v4.csv\", sep=',')\n    \n    dffloripa.iloc[[14, 15, 16],10]","bea15d32":"dfbrasil = pd.read_csv(\"..\/input\/re-cidades\/covid_reproduction_number_estimates.csv\", sep=',')\ndfbrasil = dfbrasil.loc[dfbrasil.state == 'Brazil'].reset_index(drop=True)\ndffloripa\n","8e78b934":"casos_brasil = pd.read_csv('..\/input\/covid19-cases-in-brazil-at-city-level\/cases-brazil-cities-time.csv', sep=',')\ncasos_brasil.loc[casos_brasil2.date == '2020-03-27'].reset_index(drop=True)","a1420027":"casos_brasil = pd.read_csv('..\/input\/covid19-cases-in-brazil-at-city-level\/cases-brazil-cities-time.csv', sep=',')\ncasos_brasil = casos_brasil.deaths[casos_brasil.state == 'TOTAL']\ncasos_brasil = casos_brasil.loc[casos_brasil2.date > '2020-03-13'].reset_index(drop=True)\ncasos_brasil = casos_brasil\/(0.006)","9e29a93a":"casos_brasil","4d077484":"import numpy as np\nfrom scipy.integrate import odeint\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndfbrasil['Rt_mean'].plot()\ndfbrasil","1b53f9ec":"a = dffloripa.iloc[:13,10]","365e5150":"dffloripa.sort_values('date', ignore_index=True)","f1871038":"import numpy as np\nfrom scipy.integrate import odeint\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# colocar na variavel datasetrz os r(ts)para cada dia\n\ndef make_lognormal_params_95_ci(lb, ub):\n    mean = (ub*lb)**(1\/2)\n    std = (ub\/lb)**(1\/4)\n    return mean, std\n\ndef run_SEIR_ODE_model(\n        N: 'population size',\n        E0: 'init. exposed population',\n        I0: 'init. infected population',\n        R0: 'init. removed population',\n        beta: 'infection probability',\n        gamma: 'removal probability', \n        alpha_inv: 'incubation period', \n        t_max: 'numer of days to run'\n    ) -> pd.DataFrame:\n\n    S0 = N - I0 - R0 - E0\n    alpha = 1\/alpha_inv\n\n    # A grid of time points (in days)\n    t = range(t_max)\n\n    # The SEIR model differential equations.\n    def deriv(y, t, N, beta, gamma, alpha):\n        S, E, I, R = y\n        dSdt = -beta * S * I \/ N\n        dEdt = -dSdt - alpha*E\n        dIdt = alpha*E - gamma*I\n        dRdt = gamma * I\n        return dSdt, dEdt, dIdt, dRdt\n\n    # Initial conditions vector\n    y0 = S0, E0, I0, R0\n\n    # Integrate the SIR equations over the time grid, t.\n    ret = odeint(deriv, y0, t, args=(N, beta, gamma, alpha))\n    S, E, I, R = ret.T\n\n    return pd.DataFrame({'S': S, 'E': E, 'I': I, 'R': R}, index=t)\n\n\nif __name__ == '__main__':\n    #Re_series = pd.Series(range(700,1)) # aqui tem que ir a sequencia de dias do rt\n    \n    dffloripa = pd.read_csv(\"..\/input\/re-floripa-v4\/Re_floripa_v4.csv\", sep=',')\n    re_floripa = dffloripa.iloc[13:,13:]\n    csv_de_rzeros = re_floripa.iloc[:,0] # iloc 0 para m\u00e9dia, 1 para limite superior 2 para inferior\n    Re_series = dfbrasil['Rt_mean'] #pd.Series(csv_de_rzeros.iloc[:])\n    \n        \n    #Initial parameters\n    \n    N = 200_000_000\n    E0, I0, R0 = 30, 30, 30\n    Sinicial = N - I0 - R0 - E0\n    gamma= 1\/2.8\n    alpha_inv = 2.9 \n    \n    #solves several ODEs in sequence using r(e) from the Re_series\n    errezero = Re_series.iloc[0]\n    beta = gamma*errezero\n    t_max = 2\n    fitado = pd.DataFrame({'S': [Sinicial], 'E': [E0], 'I': [I0], 'R': [R0]})\n    j = 0\n    \n    \n    #Roda o intervalo todo usando m\u00e9dia, sup ou inf do r(efetivo)\n    \n    for i in range(len(Re_series)-t_max):\n        j = j + (t_max-1)\n        results = run_SEIR_ODE_model(N, E0, I0, R0, beta, gamma, alpha_inv, t_max)\n        fitado = pd.concat([fitado, results.loc[1:,:]], ignore_index=True)\n        E0, I0, R0 = fitado.loc[j,'E'],fitado.loc[j,'I'], fitado.loc[j,'R']\n        effectiver = Re_series.iloc[j]\n        errezero = effectiver*(N)\/(N-(fitado.loc[j,'E'])-(fitado.loc[j,'I'])-(fitado.loc[j,'R']))\n        beta = gamma*errezero\n        \n    #roda o seguimento da curva\n        \n    def step_ic_re(inf, sup):\n        intervalos = np.arange(inf, sup, 0.01)\n        return intervalos\n\n    inferior = re_floripa.iloc[-1,2]\n    superior = re_floripa.iloc[-1,1]\n    rang_sup_inf = step_ic_re(inferior,superior)\n    \n    \n    # aqui \u00e9 a simula\u00e7\u00e3o para o futuro\n    effectiver = rang_sup_inf.mean() # #rang_sup_inf[len(rang_sup_inf)-1] \n    errezero = effectiver*(N)\/(N-(fitado.loc[j,'E'])-(fitado.loc[j,'I'])-(fitado.loc[j,'R']))\n    beta = gamma*errezero\n    t_max = 10\n    \n    results = run_SEIR_ODE_model(N, E0, I0, R0, beta, gamma, alpha_inv, t_max)\n    fitado = pd.concat([fitado, results.loc[1:,:]], ignore_index=True)\n    E0, I0, R0 = fitado.loc[j,'E'],fitado.loc[j,'I'], fitado.loc[j,'R']\n\n        \n    # plot\n    #variable\n    plt.style.use('ggplot')\n    (fitado\n    [['E', 'I', 'R']]\n     .plot(figsize=(8,6), fontsize=20, logy=False))\n    params_title = (\n        f'SEIR($\\gamma$={gamma}, $\\\\alpha$={1\/alpha_inv}, $N$={N}, '\n        f'$E_0$={int(E0)}, $I_0$={int(I0)}, $R_0$={int(R0)})'\n    )\n    plt.title(f'Numero de Pessoas Atingidas com modelo no \"t_final -1\" da simulacao:\\n r(e)=vide lista, ' + params_title,\n              fontsize=20)\n    plt.legend(['Expostas', 'Infectadas', 'Recuperadas'], fontsize=20)\n    plt.xlabel('Dias', fontsize=20)\n    plt.ylabel('Pessoas', fontsize=20)\n    \n    plt.plot(casos_brasil)\n    plt.show()\n    \n    plt.style.use('ggplot')\n    (fitado\n    [['E', 'I']]\n     .plot(logy=False))\n    plt.legend(['Expostas', 'Infectadas'], fontsize=20)\n    plt.xlabel('Dias', fontsize=20)\n    plt.ylabel('Pessoas', fontsize=20)\n    plt.show()","972297bb":"def divide_gamma(x):\n    return x*gamma\n\nalgo = (fitado.iloc[:,2].apply(divide_gamma)-dffloripa.sort_values('date', ignore_index=True).iloc[:79,8])\nalgo.std()\n\n    \n    #R0_ = npr.lognormal(*map(np.log, R0__params), runs)\n    #gamma = 1\/npr.lognormal(*map(np.log, gamma_inv_params), runs)\n    #alpha = 1\/npr.lognormal(*map(np.log, alpha_inv_params), runs)\n    #beta = R0_*gamma\n    ","cbe758a8":"    def step_ic_re(inf, sup):\n        intervalos = np.arange(inf, sup, 0.01)\n        return intervalos\n\n    dfrezeros = pd.DataFrame()\n    for f in range(len(re_floripa.iloc[:,2])):\n        inferior = re_floripa.iloc[f,2]\n        superior = re_floripa.iloc[f,1]\n        rang_sup_inf = step_ic_re(inferior,superior)\n        df1 = pd.DataFrame([rang_sup_inf])\n        dfrezeros = pd.concat([dfrezeros, df1],axis=0, ignore_index=True)\n        \n    dfrezeros","ffcd0ff2":"**Contact Tracing module**"}}