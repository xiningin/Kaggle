{"cell_type":{"52a5d644":"code","8269dde5":"code","4093057f":"code","6cc581b2":"code","484719e2":"code","e88c7641":"code","20a33636":"code","ea819e50":"code","fe234464":"code","9ca93585":"code","a219d9f9":"code","5bf8013c":"code","7486693f":"code","ad5f96ee":"code","157eec8a":"code","2d7c8f5d":"code","2ee6a810":"code","01a790fc":"code","2a3ae393":"code","06892ee6":"code","25088661":"code","4ffb749b":"code","c6066c5c":"code","cdb1f7bc":"code","05913b77":"code","9a5e01bf":"code","e31e0ee6":"markdown","0b4dbf25":"markdown","9b10e9b7":"markdown","b4cf0f1b":"markdown","343c1a4a":"markdown","e5b38467":"markdown","374e019b":"markdown","305560ba":"markdown","51fca82d":"markdown"},"source":{"52a5d644":"!pip install cpi","8269dde5":"\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cpi\ncpi.update()\n","4093057f":"plt.style.use('fivethirtyeight')\ndf = pd.read_csv('..\/input\/videogamesales\/vgsales.csv')\ndf.shape","6cc581b2":"# Removing years past 2015 since dataset only supposed to contain years before 2016.\ndrop_row_invalid_year = df[df['Year'] > 2015].index\ndf = df.drop(drop_row_invalid_year)\n# Removing rows with incomplete data so that it does not hamper with analysis\ndf = df.dropna()","484719e2":"df.shape","e88c7641":"df.head()","20a33636":"# Years need to be int type for CPI module to work\ndf.Year = df.Year.astype(int)\n\n# Credit: Mike Erb, https:\/\/github.com\/merb92\/movie-industry-eda\ndef inflate_column(data, column):\n    \"\"\"\n    Adjust for inflation the series of values in column of the\n    dataframe data\n    \"\"\"\n    return data.apply(lambda x: cpi.inflate(x[column],\n                      x.Year), axis=1)\n\n\n# CPI module won't update on Kaggle, so it can only convert data to 2018 values.\ndf['Global_Sales_CPI'] = inflate_column(df, 'Global_Sales')\ndf = df.round({'Global_Sales_CPI': 2})","ea819e50":"df.head()","fe234464":"# category argument corresponds to the qualitative columns of the data frame.\n# sales argument corresponds to the quantitative columns except for rank and year.\n# bar_color accepts matplotlib colors\n# vals_displayed argument takes in a integer to determine how many games should\n# be graphed.\n\ndef total_sales_chart(category: str, sales: str, bar_color: str,\n                      vals_displayed: int, chart_title: str):\n    fig_dims = (9, 7)\n    fig, ax = plt.subplots(figsize=fig_dims)\n\n    sales_sum = df.groupby(by=[category])[sales].sum()\n    top_sales_sum = sales_sum.sort_values(ascending=False)\n    width1 = .5\n    rect1 = ax.barh(top_sales_sum.keys()[:vals_displayed][::-1],\n                    round(top_sales_sum[:vals_displayed][::-1], 2),\n                    width1, color=bar_color)\n    x_axis_start, x_axis_len = plt.xlim()\n    x_axis_pos = x_axis_len\/70\n    for rect in rect1:\n        width2 = rect.get_width()\n        ax.text(x_axis_pos, rect.get_y() + rect.get_height()\/2, width2,\n                ha='left', va='center')\n    ax.set_title(chart_title)\n\n\ndef mean_sales_chart(category: str, sales: str, bar_color: str,\n                     values_displayed: int, chart_title: str):\n    fig_dims = (9, 7)\n    fig, ax = plt.subplots(figsize=fig_dims)\n\n    sales_sum = df.groupby(by=[category])[sales].sum()\n    games_per_category = df[category].value_counts()\n    top_mean_sales = (sales_sum\/games_per_category).sort_values(ascending=False)\n    width1 = .5\n    rect1 = ax.barh(top_mean_sales.keys()[:values_displayed][::-1],\n                    round(top_mean_sales[:values_displayed][::-1], 2),\n                    width1, color=bar_color)\n    x_axis_start, x_axis_len = plt.xlim()\n    x_axis_pos = x_axis_len\/55\n    for rect in rect1:\n        width2 = rect.get_width()\n        ax.text(x_axis_pos, rect.get_y() + rect.get_height()\/2, width2,\n                ha='left', va='center')\n    ax.set_title(chart_title)\n\n\ndef games_per_category_chart(category: str, bar_color: str,\n                             values_displayed: int, chart_title: str):\n    fig_dims = (9, 7)\n    fig, ax = plt.subplots(figsize=fig_dims)\n\n    category_name = df[category].value_counts().keys()\n    games_per_category = df[category].value_counts()\n    width1 = .5\n    rect1 = ax.barh(category_name[:values_displayed][::-1],\n                    games_per_category[:values_displayed].sort_values(),\n                    width1, color=bar_color)\n    x_axis_start, x_axis_len = plt.xlim()\n    x_axis_pos = x_axis_len\/55\n    for rect in rect1:\n        width2 = rect.get_width()\n        ax.text(x_axis_pos, rect.get_y() + rect.get_height()\/2, width2,\n                ha='left', va='center')\n    ax.set_title(chart_title)\n\n\ndef game_sales_single_platform_chart(sales: str, bar_color: str,\n                                     values_displayed: int, chart_title: str):\n    fig_dims = (9, 7)\n    fig, ax = plt.subplots(figsize=fig_dims)\n\n    top_number = df.nlargest(values_displayed, sales)\n    width1 = .5\n    rect1 = ax.barh(top_number['Name'].iloc[::-1],\n                    top_number[sales].sort_values(), width1, \n                    color=bar_color)\n    x_axis_start, x_axis_len = plt.xlim()\n    x_axis_pos = x_axis_len\/95\n    for rect in rect1:\n        width2 = rect.get_width()\n        ax.text(x_axis_pos, rect.get_y() + rect.get_height()\/2, width2,\n                ha='left', va='center')\n    ax.set_title(chart_title)","9ca93585":"game_sales_single_platform_chart('Global_Sales', 'royalblue', 10,'Top 10 Best Selling Video Games\\n (Millons, Single Platform Sales)')\n\ngame_sales_single_platform_chart('Global_Sales_CPI',None, 10,\n                            'Top 10 Best Selling Video Games Adjusted for Inflation\\n (Millions, Single Platform Sales)')","a219d9f9":"total_sales_chart('Name', 'Global_Sales', 'royalblue', 10,\n                  'Top 10 Best Selling Video Games Globally\\n (Millions, Platform Sales Combined)')\n\ntotal_sales_chart('Name', 'Global_Sales_CPI', None, 10,\n                  'Top 10 Best Selling Video Games Globally Adjusted for Inflation\\n (Millions, Platform Sales Combined)')","5bf8013c":"df[df.isin([\"Grand Theft Auto V\"]).any(axis=1)]","7486693f":"df[df.isin([\"Super Mario Bros.\"]).any(axis=1)]","ad5f96ee":"df[df.isin([\"Tetris\"]).any(axis=1)]","157eec8a":"games_per_category_chart('Publisher', 'tomato', 10, 'Number of Games per Publisher (Top Ten)')","2d7c8f5d":"total_sales_chart('Publisher', 'Global_Sales_CPI', None, 10, \n                  'Total Global Sales of Publishers Adjusted for Inflation\\n (Millions, Top Ten)')\nmean_sales_chart('Publisher', 'Global_Sales_CPI', 'c', 10,\n                 'Mean Global Sales per Game of Publishers Adjusted for Inflation\\n (Millions, Top Ten)')","2ee6a810":"df[df.isin([\"Palcom\"]).any(axis=1)]","01a790fc":"df[df.isin([\"Red Orb\"]).any(axis=1)]","2a3ae393":"games_per_category_chart('Genre', 'tomato', None, 'Number of Games per Genre')","06892ee6":"total_sales_chart('Genre', 'Global_Sales_CPI', None, None,\n                  'Total Global Sales of Genres Adjusted for Inflation (Millions)')\nmean_sales_chart('Genre', 'Global_Sales_CPI', 'c', None,\n                 'Mean Global Sales of Genres Adjusted for Inflation (Millions)')","25088661":"games_per_category_chart('Platform', 'tomato', 10, 'Number of Games per Platform (Top Ten)')","4ffb749b":"total_sales_chart('Platform', 'Global_Sales_CPI', None, 10,\n                  'Total Global Sales of Platforms Adjusted for Inflation (Millions, Top Ten)')\nmean_sales_chart('Platform', 'Global_Sales_CPI', 'c', 10,\n                 'Mean Global Sales of Platforms Adjusted for Inflation (Millions, Top Ten)')","c6066c5c":"sales_sum = df.groupby(by=['Platform'])['Global_Sales_CPI'].sum()\ntop_ten_platforms = list(sales_sum.sort_values(ascending=False).keys()[:10])\ndrop_platform_row = df[~df['Platform'].isin(top_ten_platforms)].index\ntop_ten_plat_df = df.drop(drop_platform_row)\n# lamda function converts values to percentages in decimal format.\ncross_tab_plat = pd.crosstab(top_ten_plat_df['Platform'],\n                            top_ten_plat_df['Genre']).apply(lambda r: r\/r.sum(), axis=1)","cdb1f7bc":"cross_tab_plat.style.background_gradient(cmap='Blues').format(\"{:.1%}\")","05913b77":"market_sales = df[['Genre', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]\nmarket_sales_genre = market_sales.groupby('Genre').sum()\n# converts values to percentages.\nmarket_sales_genre_percent = market_sales_genre\/market_sales_genre.sum()*100","9a5e01bf":"ax1 = market_sales_genre_percent.plot.bar(figsize=(17,8), fontsize=13, width=.8)\nfor rec in ax1.patches:\n    height = rec.get_height()\n    ax1.text(rec.get_x() + rec.get_width() \/ 2,\n             rec.get_y() + height \/ 2, \"{:.0f}%\".format(height), fontsize=8,\n             ha='center', va='bottom')\nplt.ylabel('Percent')\n\nplt.show()","e31e0ee6":"As can be seen above, when the sales of a game between platforms are combined, different games appear in the top ten. This gives a more accurate representation of the financial success of the games since it accounts for the fact that profits of some games are spread between different platforms.\nHowever, when one takes a closer look at the data, three of the games in the top ten have profits that come from rereleases on newer platforms which one could consider unfair when comparing them against games that only had a singular release.\nThe three games in question are shown below.","0b4dbf25":"# Distribution of Genres of the Top Ten Platforms as a Percentage:","9b10e9b7":"For my analysis I am going to be using the Consumer Price Index (CPI) module to account for inflation. CPI can be defined as follows,\n\"The Consumer Price Index (CPI) is a measure that examines the weighted average of prices of a basket of consumer goods and services, such as transportation, food, and medical care. It is calculated by taking price changes for each item in the predetermined basket of goods and averaging them\" (Investopedia).\nUsing the CPI will allow me to have a clearer picture of the financial successes of the games.","b4cf0f1b":"# Distribution of Sales Across Genres Between Markets as a Percentage:","343c1a4a":"When adjusting for inflation, one can see that  Duck Hunt among other games, was actually more successful for its time then one would initially assume if they were only looking at the first graph. ","e5b38467":"From the charts above, we can see that although platforming games were not the most popular in terms of games made and were not the most succesful in terms of total sales, on a per game basis, they had the most financial success.","374e019b":"Like in the case of the platform genre, the Nintendo Entertainment System (NES) while not having the most total financial success, on a per game basis it excelled.","305560ba":"As shown above, when one looks at the mean global sales per game, some lesser known publishers appear. This is due to the publishers in question making only a few, yet financially succesful games. A couple of examples are shown below.","51fca82d":"From the chart above, one can see that most of the genres had the same success between markets except for Japan which had a high interest in role-playing, adventure, puzzle, and strategy games and a low interest in action, shooter, racing, and sports categories compared to other markets."}}