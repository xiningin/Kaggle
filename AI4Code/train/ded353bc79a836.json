{"cell_type":{"721d64f5":"code","2f5ec9bf":"code","59f8b917":"code","e2dcd43f":"code","f5a409e1":"code","866d8b7f":"code","d1e12725":"code","6391a447":"code","14b1a999":"code","3a7b52a7":"code","17977adb":"code","aeacaa6f":"code","83846974":"code","8faa249b":"code","eabdd0a1":"code","7559eba8":"code","e80981c7":"code","adca9b4d":"code","bbaa0c3a":"code","69447b53":"code","977ebb47":"code","4dca8603":"code","f4567dbf":"code","415519e4":"markdown","2d52bd95":"markdown","79ac1557":"markdown"},"source":{"721d64f5":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n           \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\n\n\nimport matplotlib.pyplot as plt","2f5ec9bf":"df = pd.read_csv('\/kaggle\/input\/bike-buyers\/bike_buyers_clean.csv')\ndf","59f8b917":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","e2dcd43f":"df['mar'] = le.fit_transform(df['Marital Status'])\ndf","f5a409e1":"df['gender'] = le.fit_transform(df['Gender'])\ndf['occp'] = le.fit_transform(df['Occupation'])\ndf['reg'] = le.fit_transform(df['Region'])\ndf['bike'] = le.fit_transform(df['Purchased Bike'])","866d8b7f":"df","d1e12725":"data = df[['Income','Children','Cars','Age','mar','gender','occp','reg','bike']]\ndata","6391a447":"data.info()","14b1a999":"x = data[['Income','Children','Cars','Age','mar','gender','occp','reg']]\ny = data['bike']","3a7b52a7":"x","17977adb":"y","aeacaa6f":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.1, random_state=24)\nprint(f\"Train Data: {X_train.shape}, {y_train.shape}\")\nprint(f\"Train Data: {X_test.shape}, {y_test.shape}\")\n\nclassifier = RandomForestClassifier(n_estimators = 45)\nclassifier.fit(X_train, y_train)\n\nprediction_1 = classifier.predict(X_test)","83846974":"classifier.score(X_test,y_test)","8faa249b":"logistic_class = LogisticRegression()\nlogistic_class.fit(X_train, y_train)\n\nprediction_2 = logistic_class.predict(X_test)","eabdd0a1":"y_train_pred = classifier.predict(X_train)","7559eba8":"print(f\"Accuracy of the classifier train is: {accuracy_score(y_train, y_train_pred)}\")\nprint(f\"Accuracy of the classifier test is: {accuracy_score(y_test, prediction_1)}\")","e80981c7":"y_train_pred2 = logistic_class.predict(X_train)\n\nprint(f\"Accuracy of the classifier train is: {accuracy_score(y_train, y_train_pred2)}\")\nprint(f\"Accuracy of the classifier test is: {accuracy_score(y_test, prediction_2)}\")","adca9b4d":"print(confusion_matrix(y_test, prediction_1))\n\nplot_confusion_matrix(classifier, X_test, y_test)\nplt.show()","bbaa0c3a":"print(confusion_matrix(y_test, prediction_2))\n\nplot_confusion_matrix(logistic_class, X_test, y_test)\nplt.show()","69447b53":"from sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\n\n# Calculating the precision score of classifier 1\nprint(f\"Precision Score of the classifier 1 is: {precision_score(y_test, prediction_1)}\")\n\n# Calculating the precision score of classifier 2 \nprint(f\"Precision Score of the classifier 2 is: {precision_score(y_test, prediction_2)}\")\n\n# Calculating the recall score of classifier 1\nprint(f\"Recall Score of the classifier 1 is: {recall_score(y_test, prediction_1)}\")\n\n# Calculating the recall score of classifier 2\nprint(f\"Recall Score of the classifier 2 is: {recall_score(y_test, prediction_2)}\")","977ebb47":"print(f\"F1 Score of the classifier 1 is: {f1_score(y_test, prediction_1)}\")\nprint(f\"F1 Score of the classifier 2 is: {f1_score(y_test, prediction_2)}\")","4dca8603":"from sklearn.metrics import roc_curve, auc\n\nclass_probabilities = classifier.predict_proba(X_test)\npreds = class_probabilities[:, 1]\n\nfpr, tpr, threshold = roc_curve(y_test, preds)\nroc_auc = auc(fpr, tpr)\n\n# Printing AUC\nprint(f\"AUC for our classifier is: {roc_auc}\")\n\n# Plotting the ROC\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","f4567dbf":"class_probabilities = logistic_class.predict_proba(X_test)\npreds = class_probabilities[:, 1]\n\nfpr, tpr, threshold = roc_curve(y_test, preds)\nroc_auc = auc(fpr, tpr)\n\n# Printing AUC\nprint(f\"AUC for our classifier is: {roc_auc}\")\n\n# Plotting the ROC\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()\n ","415519e4":"![image.png](attachment:88a5ccc0-51a7-4a61-9cba-4d68fc1cc66f.png)","2d52bd95":"![image.png](attachment:1c4de777-9432-4a02-ad91-e268f6c79879.png)\n\n![image.png](attachment:fc6a57f0-cdb6-4520-b48e-5d828389206c.png)","79ac1557":"![image.png](attachment:076c9e42-f10d-406d-ac29-593e0c56b58c.png)"}}