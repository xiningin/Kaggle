{"cell_type":{"f95f0d44":"code","49f9eedf":"code","0e5a9141":"code","ff1e1d15":"code","200f3337":"code","6b6ada2b":"code","0bb5c2f4":"code","4174cb2f":"code","ad1d9893":"code","ed09f195":"code","3fe8e340":"code","12089993":"code","8890a873":"code","df6c007d":"code","ced7bb1f":"code","208e2e68":"code","77e92208":"code","a070d841":"code","ce9d0e6e":"markdown","bd8b0ee4":"markdown","88506fa8":"markdown","48694cf3":"markdown","883bd47d":"markdown","1713036e":"markdown"},"source":{"f95f0d44":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","49f9eedf":"from sklearn.metrics import roc_auc_score","0e5a9141":"pure = pd.read_csv('..\/input\/tps11-postprocess\/pure_test.csv')\nsub_good_public= pd.read_csv('..\/input\/tps11-postprocess\/75042.csv')\npure = pure.set_index('id')","ff1e1d15":"flip_idx = np.arange(540000)\nflip_idx=np.random.choice(flip_idx,540000\/\/4, replace=False)\npure.iloc[flip_idx,0]=(pure.iloc[flip_idx,0]+1)%2\npure.iloc[flip_idx,0]\n\npublic = pure.iloc[:int(540000*0.19),0]\nprivate = pure.iloc[int(540000*0.19):,0]\npublic_sub = sub_good_public.iloc[:int(540000*0.19),1]\nprivate_sub = sub_good_public.iloc[int(540000*0.19):,1]","200f3337":"print('PUBLIC:  ',roc_auc_score(public,public_sub), '   PRIVATE:  ',roc_auc_score(private,private_sub), 'GAIN:   ', roc_auc_score(private,private_sub)-roc_auc_score(public,public_sub))","6b6ada2b":"sub_regularized = pd.read_csv('..\/input\/tps11-postprocess\/b512_pytorch_cv.csv')\npublic_sub = sub_regularized.iloc[:int(540000*0.19),1]\nprivate_sub = sub_regularized.iloc[int(540000*0.19):,1]","0bb5c2f4":"print('PUBLIC:  ',roc_auc_score(public,public_sub), '   PRIVATE:  ',roc_auc_score(private,private_sub), 'GAIN:   ', roc_auc_score(private,private_sub)-roc_auc_score(public,public_sub))","4174cb2f":"pure = pd.read_csv('..\/input\/tps11-postprocess\/pure_test.csv')\npublic_sub = pure.iloc[:int(540000*0.19),1]\nprivate_sub = pure.iloc[int(540000*0.19):,1]","ad1d9893":"print('PUBLIC:  ',roc_auc_score(public,public_sub), '   PRIVATE:  ',roc_auc_score(private,private_sub), 'GAIN:   ', roc_auc_score(private,private_sub)-roc_auc_score(public,public_sub))","ed09f195":"sub_74714 = pd.read_csv('..\/input\/tps11-postprocess\/74714.csv')\npublic_sub = sub_74714.iloc[:int(540000*0.19),1]\nprivate_sub = sub_74714.iloc[int(540000*0.19):,1]","3fe8e340":"print('PUBLIC:  ',roc_auc_score(public,public_sub), '   PRIVATE:  ',roc_auc_score(private,private_sub), 'GAIN:   ', roc_auc_score(private,private_sub)-roc_auc_score(public,public_sub))","12089993":"sub_75009 = pd.read_csv('..\/input\/tps11-postprocess\/75009.csv')\npublic_sub = sub_75009.iloc[:int(540000*0.19),1]\nprivate_sub = sub_75009.iloc[int(540000*0.19):,1]","8890a873":"print('PUBLIC:  ',roc_auc_score(public,public_sub), '   PRIVATE:  ',roc_auc_score(private,private_sub), 'GAIN:   ', roc_auc_score(private,private_sub)-roc_auc_score(public,public_sub))","df6c007d":"pure = pd.read_csv('..\/input\/tps11-postprocess\/pure_test.csv')\nsub_75042= pd.read_csv('..\/input\/tps11-postprocess\/75042.csv')\nsub_75009= pd.read_csv('..\/input\/tps11-postprocess\/75009.csv')\nscore_75042, score_75009=0, 0\nfor i in range(100):\n    pure_loop = pure.copy()\n    pure_loop = pure_loop.set_index('id')\n    flip_idx = np.arange(540000)\n    flip_idx=np.random.choice(flip_idx,540000\/\/4, replace=False)\n    pure_loop.iloc[flip_idx,0]=(pure_loop.iloc[flip_idx,0]+1)%2\n    pure_loop.iloc[flip_idx,0]\n    public = pure_loop.iloc[:int(540000*0.19),0]\n    private = pure_loop.iloc[int(540000*0.19):,0]\n    public_sub_75009 = sub_75009.iloc[:int(540000*0.19),1]\n    private_sub_75009 = sub_75009.iloc[int(540000*0.19):,1]\n    public_sub_75042 = sub_75042.iloc[:int(540000*0.19),1]\n    private_sub_75042 = sub_75042.iloc[int(540000*0.19):,1]\n    if roc_auc_score(private,private_sub_75042) > roc_auc_score(private,private_sub_75009):\n        score_75042+=1\n    else:\n        score_75009+=1\nprint('sub 75042 score:  ', score_75042, '  sub 75009 score:  ', score_75009)","ced7bb1f":"pure = pd.read_csv('..\/input\/tps11-postprocess\/pure_test.csv')\nsub_75042= pd.read_csv('..\/input\/tps11-postprocess\/75042.csv')\nsub_leaked= pd.read_csv('..\/input\/tps11-postprocess\/pure_test.csv')\nscore_75042, score_leaked=0, 0\nfor i in range(100):\n    pure_loop = pure.copy()\n    pure_loop = pure_loop.set_index('id')\n    flip_idx = np.arange(540000)\n    flip_idx=np.random.choice(flip_idx,540000\/\/4, replace=False)\n    pure_loop.iloc[flip_idx,0]=(pure_loop.iloc[flip_idx,0]+1)%2\n    pure_loop.iloc[flip_idx,0]\n    public = pure_loop.iloc[:int(540000*0.19),0]\n    private = pure_loop.iloc[int(540000*0.19):,0]\n    public_sub_leaked = sub_leaked.iloc[:int(540000*0.19),1]\n    private_sub_leaked = sub_leaked.iloc[int(540000*0.19):,1]\n    public_sub_75042 = sub_75042.iloc[:int(540000*0.19),1]\n    private_sub_75042 = sub_75042.iloc[int(540000*0.19):,1]\n    if roc_auc_score(private,private_sub_75042) > roc_auc_score(private,private_sub_leaked):\n        score_75042+=1\n    else:\n        score_leaked+=1\nprint('sub 75042 score:  ', score_75042, '  pure test score:  ', score_leaked)","208e2e68":"pure = pd.read_csv('..\/input\/tps11-postprocess\/pure_test.csv')\nsub_75042= pd.read_csv('..\/input\/tps11-postprocess\/75042.csv')\nsub_74741= pd.read_csv('..\/input\/tps11-postprocess\/b2k_4rest_pytorch_cv.csv')\nscore_75042, score_74741=0, 0\nfor i in range(100):\n    pure_loop = pure.copy()\n    pure_loop = pure_loop.set_index('id')\n    flip_idx = np.arange(540000)\n    flip_idx=np.random.choice(flip_idx,540000\/\/4, replace=False)\n    pure_loop.iloc[flip_idx,0]=(pure_loop.iloc[flip_idx,0]+1)%2\n    pure_loop.iloc[flip_idx,0]\n    public = pure_loop.iloc[:int(540000*0.19),0]\n    private = pure_loop.iloc[int(540000*0.19):,0]\n    public_sub_74741 = sub_74741.iloc[:int(540000*0.19),1]\n    private_sub_74741 = sub_74741.iloc[int(540000*0.19):,1]\n    public_sub_75042 = sub_75042.iloc[:int(540000*0.19),1]\n    private_sub_75042 = sub_75042.iloc[int(540000*0.19):,1]\n    if roc_auc_score(private,private_sub_75042) > roc_auc_score(private,private_sub_74741):\n        score_75042+=1\n    else:\n        score_74741+=1\nprint('sub 75042 score:  ', score_75042, '  sub 74741 score:  ', score_74741)","77e92208":"pure = pd.read_csv('..\/input\/tps11-postprocess\/pure_test.csv')\nsub_75042= pd.read_csv('..\/input\/tps11-postprocess\/75042.csv')\nsub_74775= pd.read_csv('..\/input\/tps11-postprocess\/74775.csv')\nscore_75042, score_74775=0, 0\nfor i in range(100):\n    pure_loop = pure.copy()\n    pure_loop = pure_loop.set_index('id')\n    flip_idx = np.arange(540000)\n    flip_idx=np.random.choice(flip_idx,540000\/\/4, replace=False)\n    pure_loop.iloc[flip_idx,0]=(pure_loop.iloc[flip_idx,0]+1)%2\n    pure_loop.iloc[flip_idx,0]\n    public = pure_loop.iloc[:int(540000*0.19),0]\n    private = pure_loop.iloc[int(540000*0.19):,0]\n    public_sub_74775 = sub_74775.iloc[:int(540000*0.19),1]\n    private_sub_74775 = sub_74775.iloc[int(540000*0.19):,1]\n    public_sub_75042 = sub_75042.iloc[:int(540000*0.19),1]\n    private_sub_75042 = sub_75042.iloc[int(540000*0.19):,1]\n    if roc_auc_score(private,private_sub_75042) > roc_auc_score(private,private_sub_74775):\n        score_75042+=1\n    else:\n        score_74775+=1\nprint('sub 75042 score:  ', score_75042, '  sub 74775 score:  ', score_74775)","a070d841":"pure = pd.read_csv('..\/input\/tps11-postprocess\/pure_test.csv')\nsub_75042= pd.read_csv('..\/input\/tps11-postprocess\/75042.csv')\nsub_74722= pd.read_csv('..\/input\/tps11-postprocess\/74722.csv')\nscore_75042, score_74722=0, 0\nfor i in range(100):\n    pure_loop = pure.copy()\n    pure_loop = pure_loop.set_index('id')\n    flip_idx = np.arange(540000)\n    flip_idx=np.random.choice(flip_idx,540000\/\/4, replace=False)\n    pure_loop.iloc[flip_idx,0]=(pure_loop.iloc[flip_idx,0]+1)%2\n    pure_loop.iloc[flip_idx,0]\n    public = pure_loop.iloc[:int(540000*0.19),0]\n    private = pure_loop.iloc[int(540000*0.19):,0]\n    public_sub_74722 = sub_74722.iloc[:int(540000*0.19),1]\n    private_sub_74722 = sub_74722.iloc[int(540000*0.19):,1]\n    public_sub_75042 = sub_75042.iloc[:int(540000*0.19),1]\n    private_sub_75042 = sub_75042.iloc[int(540000*0.19):,1]\n    if roc_auc_score(private,private_sub_75042) > roc_auc_score(private,private_sub_74722):\n        score_75042+=1\n    else:\n        score_74722+=1\nprint('sub 75042 score:  ', score_75042, '  sub 74722 score:  ', score_74722)","ce9d0e6e":"## GOOD Public score","bd8b0ee4":"## 100 tests 0.75042 vs 0.74741 4 warm restarts submission","88506fa8":"## 100 tests 0.75042 vs leaked test one 0.74723 pure submission file","48694cf3":"## GOOD Regularized score","883bd47d":"## Comments for you: but pure test submission is not the winning one, i got flips where good public score get better","1713036e":"## 100 tests 0.75042 vs 0.75009"}}