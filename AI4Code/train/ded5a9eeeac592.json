{"cell_type":{"01fbce5d":"code","8cddbd36":"code","15a23318":"code","f9ee5991":"code","0bdcbe05":"code","53c648cf":"code","63259466":"code","112c42e7":"code","7a96457a":"code","629bf664":"code","a644c3f1":"code","a5780cb8":"code","27b0d44b":"code","54ba5253":"code","7d4368c3":"code","f0c35153":"code","28600b98":"code","88831786":"code","44522b0f":"code","559cf79c":"code","3720181a":"code","1ab923f3":"code","06e9e51c":"code","d915e921":"code","d1d8a106":"code","7464698e":"code","4a1aae3e":"code","a3c1403f":"markdown"},"source":{"01fbce5d":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf","8cddbd36":"data=pd.read_csv(\"..\/input\/consumer_complaints\/Consumer_Complaints.csv\")","15a23318":"data.head()","f9ee5991":"data.columns","0bdcbe05":"data.isnull().sum()","53c648cf":"data.info()","63259466":"np.random.seed(10)\nremove_n = 900000\ndrop_indices = np.random.choice(data.index, remove_n, replace=False)\ndata = data.drop(drop_indices)\ndata.shape","112c42e7":"new=[\"Consumer Complaint\",\"Product\"]\nnewdata=data[new]","7a96457a":"newdata.describe()","629bf664":"newdata=newdata.drop_duplicates()","a644c3f1":"newdata=newdata.dropna(axis=0)","a5780cb8":"newdata.info()","27b0d44b":"newdata['Product'] = newdata['Product'].astype('category')\nnewdata[\"Id\"] = newdata['Product'].cat.codes\n","54ba5253":"import nltk\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import RegexpTokenizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import LinearSVC\n","7d4368c3":"lemmatizer = WordNetLemmatizer() \ntokenizer = RegexpTokenizer(r'\\w+')","f0c35153":"\ndef sentence_clean(sentence):\n    word_list = tokenizer.tokenize(sentence)\n    lemmatized_output = ' '.join([lemmatizer.lemmatize(w) for w in word_list])\n    return lemmatized_output","28600b98":"from sklearn.feature_extraction.text import TfidfVectorizer\ntfidf = TfidfVectorizer(sublinear_tf=True, min_df=5, norm='l2', encoding='latin-1', ngram_range=(1, 2), stop_words='english')\nfeatures = tfidf.fit_transform(newdata['Consumer Complaint']).toarray()\nlabels = newdata[\"Id\"]\nfeatures.shape","88831786":"X_train, X_test, y_train, y_test = train_test_split(newdata['Consumer Complaint'], newdata['Product'],test_size=0.3,random_state=2)\ncount_vect = CountVectorizer()","44522b0f":"X_train_counts = count_vect.fit_transform(X_train)\ntfidf_transformer = TfidfTransformer()\nX_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)","559cf79c":"reg = LogisticRegression(max_iter=500,multi_class=\"auto\",penalty='l2')\nreg.fit(X_train_tfidf, y_train)\nacc_log_train = round(reg.score(X_train_tfidf, y_train) * 100, 2)\nacc_log_test = round(reg.score(count_vect.transform(X_test), y_test) * 100, 2)","3720181a":"random_forest = RandomForestClassifier(n_estimators=500)\nrandom_forest.fit(X_train_tfidf, y_train)\nacc_random_forest = round(random_forest.score(X_train_tfidf, y_train) * 100, 2)\nacc_random_forest_test = round(random_forest.score(count_vect.transform(X_test), y_test) * 100, 2)","1ab923f3":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier","06e9e51c":"decision_tree = DecisionTreeClassifier() \ndecision_tree.fit(X_train_tfidf, y_train) \nacc_decision_tree = round(decision_tree.score(X_train_tfidf, y_train) * 100, 2)\nacc_decision_tree_test = round(decision_tree.score(count_vect.transform(X_test), y_test) * 100, 2)","d915e921":"test=KNeighborsClassifier(n_neighbors=500)\ntest.fit(X_train_tfidf, y_train) \nacc_Kneighbour=test.score(X_train_tfidf, y_train) * 100\nacc_Kneighbour_test=test.score(count_vect.transform(X_test), y_test) * 100","d1d8a106":"linear_svc = LinearSVC( penalty='l1',dual=False,tol=1e-5)\nlinear_svc.fit(X_train_tfidf, y_train) \nacc_linear_svc = round(linear_svc.score(X_train_tfidf, y_train) * 100)\nacc_linear_svc_test = round(linear_svc.score(count_vect.transform(X_test), y_test) * 100)","7464698e":"import matplotlib.pyplot as plt\nModel=[\"RandomForestClassifier\",\"DecisionTreeClassifier\",\"KNeighborsClassifier\",\"LogisticRegression\",\"SVM\"]\nAccuracy=[acc_random_forest,acc_decision_tree,acc_Kneighbour,acc_log_train,acc_linear_svc]\nplt.barh(Model,Accuracy,color=\"r\")","4a1aae3e":"\nModel=[\"RandomForestClassifier\",\"DecisionTreeClassifier\",\"KNeighborsClassifier\",\"LogisticRegression\",\"SVM\"]\nAccuracy=[acc_random_forest_test,acc_decision_tree_test,acc_Kneighbour_test,acc_log_test,acc_linear_svc_test]\nplt.barh(Model,Accuracy)","a3c1403f":"Increasing the n_estimators, will increase the test acc"}}