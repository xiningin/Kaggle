{"cell_type":{"c97c427e":"code","205e65e6":"code","820d9a1e":"code","1322f861":"code","85099f5d":"markdown","9e030326":"markdown","d33f1d63":"markdown","54d8ecf5":"markdown"},"source":{"c97c427e":"import os\nDATASET_PATH = \"..\/input\/20_newsgroups\/20_newsgroups\"\nclasses = os.listdir(DATASET_PATH)\ny = []\nx = []\nno_utf8 = 0\nutf8 = 0\nfor c in classes:\n    class_path = os.path.join(DATASET_PATH, c)\n    files = os.listdir(class_path)\n    for f in files:\n        file_path = os.path.join(class_path, f)\n        try:\n            with open(file_path, 'r', encoding=\"utf-8\") as f:\n                file_content = f.read()\n            data = file_content.split('\\n\\n')\n            x.append(data[1])\n            y.append(c)\n            utf8 += 1\n        except:\n            with open(file_path, 'r', encoding=\"ISO-8859-1\") as f:\n                file_content = f.read()\n            data = file_content.split('\\n\\n')\n            x.append(data[1])\n            y.append(c)\n            no_utf8 += 1\n        print('utf-8 files: %d, ISO-8859-1 files: %d' % (utf8, no_utf8), end=\"\\r\", flush=True)","205e65e6":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\ncount_vect = CountVectorizer()\ndictionary = count_vect.fit(x)\n# store the dictionary!\ntransformed_x = dictionary.transform(x)\n\nx_train, x_test, y_train, y_test = train_test_split(transformed_x, y, test_size=0.33)","820d9a1e":"from sklearn.ensemble import ExtraTreesClassifier\nclf = ExtraTreesClassifier(n_estimators=100, n_jobs=12, bootstrap=False, min_samples_split=2, random_state=0)\nclf.fit(x_train, y_train)","1322f861":"from sklearn.metrics import accuracy_score\npredictions = clf.predict(x_test)\nprint(\"accuracy score: \", accuracy_score(y_test, predictions))","85099f5d":"## Data Preparation\nPrepare dadta using count vectorizer, and split in test and train","9e030326":"# Read dataset","d33f1d63":"# Test the model","54d8ecf5":"## Fit the model"}}