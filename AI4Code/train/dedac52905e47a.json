{"cell_type":{"41473a07":"code","8df6b784":"code","e24a9b47":"code","4937139c":"code","e9dee7f3":"code","4ce51725":"code","1d88af9e":"code","4aaa28ab":"code","1ca9bd09":"code","b0e4a9e4":"code","1838e2cd":"code","3dd803fc":"code","4e9bedb9":"code","a30a17e9":"code","de9bd4bc":"code","e72b3043":"code","572e3a08":"code","763502fb":"code","c99020ad":"code","53b7696f":"code","7ce7d7e1":"code","15698678":"code","3001c45a":"code","234bec81":"code","71874f65":"code","f440b5a6":"code","28714070":"code","0706aaba":"code","796ddaa7":"code","e5097a2b":"code","f6d1f421":"code","c98fc5cc":"code","0a4bcba6":"code","7d285851":"code","c00c9ac3":"code","f2c4b74f":"code","8a3b9c9b":"code","9a0d1697":"code","e02b99cf":"code","e121fbc9":"code","5ac6acbc":"code","d95dfa93":"code","57cdca18":"code","b77dec89":"code","548e82ae":"code","83627a54":"code","21a4fad0":"code","f3ad9e9b":"code","e76ce2c6":"code","4e140526":"code","0c7cd170":"code","3ef03e31":"code","85557947":"code","8cc96951":"code","f103369b":"code","392413a3":"code","2ba714fc":"markdown","ebdb790e":"markdown","ed88c7f2":"markdown","06003a8f":"markdown","764fa134":"markdown","5dd08d28":"markdown","6d07ac34":"markdown","b78c8938":"markdown"},"source":{"41473a07":"import numpy as np  \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn') \nsns.set(font_scale=2.5)\n\nimport missingno as msno \n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline \n","8df6b784":"df_train = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndf_test = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","e24a9b47":"df_train.head(50)","4937139c":"df_train.shape","e9dee7f3":"df_train['DEATH_EVENT'].value_counts()","4ce51725":"for col in df_train.columns: #\uac01 col\uc5d0 null data\uac00 \uba87\uac1c \uc788\ub294\uc9c0 % \ubcf4\uae30 \uc704\ud568\n    msg='column: {:>30}\\t Percent of NaN value: {:.2f}%'.format(col, 100*(df_train[col].isnull().sum() \/ df_train[col].shape[0]))\n    print(msg)","1d88af9e":"df_train.describe()","4aaa28ab":"df_test.describe()","1ca9bd09":"msno.bar(df=df_train.iloc[:, :], figsize=(8,5), color=(0.8, 0.5, 0.2))","b0e4a9e4":"df_train['age'].min()","1838e2cd":"df_train['age'].max()","3dd803fc":"df_train['age_band']=0","4e9bedb9":"df_train.loc[(df_train['age'] >= 40) & (df_train['age'] < 50), 'age_band'] = '40~49'\ndf_train.loc[(df_train['age'] >= 50) & (df_train['age'] < 60), 'age_band'] = '50~59'\ndf_train.loc[(df_train['age'] >= 60) & (df_train['age'] < 70), 'age_band'] = '60~69'\ndf_train.loc[(df_train['age'] >= 70) & (df_train['age'] < 80), 'age_band'] = '70~79'\ndf_train.loc[(df_train['age'] >= 80) & (df_train['age'] < 90), 'age_band'] = '80~89'\ndf_train.loc[(df_train['age'] >= 90) & (df_train['age'] < 100), 'age_band'] = '90~100'\n","a30a17e9":"df_train.head()","de9bd4bc":"df_train.age_band.value_counts().to_frame().style.background_gradient(cmap='summer_r') #\ud45c\ubcf8\uc758 \uc5f0\ub839\ub300","e72b3043":"pd.crosstab(df_train['age_band'], df_train['high_blood_pressure'], margins=True).style.background_gradient(cmap='winter') #margins: All \uc5ec\ubd80","572e3a08":"f, ax= plt.subplots(1, 2, figsize=(25,5))\n# plt.figure(1,2,figsize=(20,5))\n# f=plt.figure(figsize=(20,5)) \ndf_train[['age_band', 'high_blood_pressure']].groupby(['age_band'],as_index=True).mean().plot.bar(color=['#FFDF00'],ax=ax[0])\nax[0].set_title('high_blood_pressure vs age')\nsns.countplot('age_band',hue='DEATH_EVENT',data=df_train, ax=ax[1])\nax[1].set_title('age: Survived vs Dead')\nplt.subplots_adjust(wspace=0.2, hspace=0.8)\nplt.show()\n","763502fb":"sns.factorplot('smoking', 'DEATH_EVENT', hue='age_band',data=df_train,size=5,aspect=1.5) \n#hue\ub97c \uc9c0\uc815\ud574\uc11c \ubd84\ub958\ubcc4\ub85c \ubcfc \uc218 \uc788\uc74c. hue='\uad6c\ubd84\uac12'","c99020ad":"plt.figure(figsize = [18, 6])\nplt.subplot(121) #row \/ col \/ plot number\nsns.countplot( x= 'smoking', data = df_train)\nplt.subplot(122)\nsns.countplot(x='smoking', hue = 'DEATH_EVENT', data = df_train)","53b7696f":"f,ax=plt.subplots(2, 2, figsize=(20,15))\n\nsns.histplot(x='age', data=df_train, hue='DEATH_EVENT', kde=True, ax=ax[0,0])\nax[0,0].set_title('(1) Distribution by age ')\n\nsns.histplot(data=df_train, x='ejection_fraction', hue='DEATH_EVENT', kde=True, ax=ax[0,1]) \nax[0,1].set_title('(2) Distribution by ejection_fraction')\n\nsns.histplot(data=df_train, x='platelets', hue='DEATH_EVENT', kde=True, ax=ax[1,0])\nax[1,0].set_title('(3) Distribution by platelets')\n\nplt.subplots_adjust(wspace=0.5, hspace=0.5)\n\nplt.show()","7ce7d7e1":"plt.figure(figsize=(10,6))\nsns.violinplot(data=df_train, x='DEATH_EVENT', y='ejection_fraction', hue='smoking', scale='count', split=True)\nplt.legend(bbox_to_anchor=(0.85, 0.8, 0.25, 0.25), loc='upper right')\n","15698678":"f, ax = plt.subplots(1, 2, figsize=(18, 8))\n\nsns.histplot(data=df_train.loc[df_train['ejection_fraction']<50,'ejection_fraction'], bins=12, ax=ax[0])\nsns.histplot(data=df_train.loc[df_train['ejection_fraction']>=50,'ejection_fraction'], bins=12, ax=ax[1])","3001c45a":"#f, ax = plt.subplots(1, 1, figsize=(7, 7))\n#df_train[['diabetes', 'ejection_fraction']].groupby(['diabetes'], as_index=True).sort(by='ejection_fraction', ascending=True).plot.bar(ax=ax)","234bec81":"sns.relplot(data=df_train, x=\"age\", y=\"platelets\", hue=\"DEATH_EVENT\", kind=\"line\", height=6, aspect=4)","71874f65":"sns.relplot(data=df_train, x=\"serum_sodium\", y=\"smoking\", hue=\"DEATH_EVENT\", kind=\"scatter\", height=6, aspect=4)","f440b5a6":"df_train.head(50)","28714070":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['platelets'], color='#388E3C', label='Skewness : {:.2f}'.format(df_train['platelets'].skew()), ax=ax)\nplt.legend(loc = 2, bbox_to_anchor = (1,1))","0706aaba":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['creatinine_phosphokinase'], color='#388E3C', label='Skewness : {:.2f}'.format(df_train['creatinine_phosphokinase'].skew()), ax=ax)\nplt.legend(loc = 1, bbox_to_anchor = (1,1))\n\n#high skewness","796ddaa7":"df_train['creatinine_phosphokinase'] = df_train['creatinine_phosphokinase'].map(lambda i: np.log(i) if i > 0 else 0)\n#df_train['creatinine_phosphokinase'] = map(lambda i: np.log(i) if i > 0 else 0, df_train.iloc[:, 2])\n","e5097a2b":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['creatinine_phosphokinase'], color='#388E3C', label='Skewness : {:.2f}'.format(df_train['creatinine_phosphokinase'].skew()), ax=ax)\nplt.legend(loc = 2, bbox_to_anchor = (1,1))\n#bbox_to_anchor(x, y, width, height)","f6d1f421":"plt.subplot(221)\nsns.boxplot(x='DEATH_EVENT', y='ejection_fraction',data=df_train)\n\nplt.subplot(222)\nsns.boxplot(x='DEATH_EVENT', y='creatinine_phosphokinase',data=df_train)\n\nplt.subplot(223)\nsns.boxplot(x='DEATH_EVENT', y='platelets',data=df_train)\n\nplt.subplot(224)\nsns.boxplot(x='DEATH_EVENT', y='serum_sodium',data=df_train)\n\nplt.tight_layout()\nplt.rcParams[\"figure.figsize\"] = (20,20)\n\nplt.show()","c98fc5cc":"pip install plotly_express","0a4bcba6":"import plotly.express as px\nimport pandas as pd","7d285851":"df_train = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndf_train.head(10)","c00c9ac3":"is_anaemia = df_train['anaemia']== 1\ndead = df_train['DEATH_EVENT'] == 1\nsubset_1 = df_train[is_anaemia & dead]\n\nis_diabetes = df_train['diabetes']== 1\nsubset_2 = df_train[is_diabetes & dead]\ncount_diabetes_dead = len(subset_2)\n\nis_high_blood_pressure = df_train['high_blood_pressure']== 1\nsubset_3 = df_train[is_high_blood_pressure & dead]\n\nis_smoking = df_train['smoking']== 1\nsubset_4= df_train[is_smoking & dead]\n","f2c4b74f":"data = dict(\n    number=[len(subset_1), len(subset_2), len(subset_3), len(subset_4)],\n    stage=[\"is_anaemia\", \"is_diabetes\", \"is_high_blood_pressure\", \"is_smoking\"])\nfig = px.funnel(data, x='number', y='stage')\nfig.show()","8a3b9c9b":"is_man = df_train['sex'] == 1\nis_woman = df_train['sex'] == 0\n\nis_anaemia = df_train['anaemia']== 1\ndead = df_train['DEATH_EVENT'] == 1\nsubset_1_1 = df_train[is_anaemia & dead & is_man]\nsubset_1_2 = df_train[is_anaemia & dead & is_woman]\n\nis_diabetes = df_train['diabetes']== 1\nsubset_2_1 = df_train[is_diabetes & dead & is_man]\nsubset_2_2 = df_train[is_diabetes & dead & is_woman]\n\nis_high_blood_pressure = df_train['high_blood_pressure']== 1\nsubset_3_1 = df_train[is_high_blood_pressure & dead & is_man]\nsubset_3_2 = df_train[is_high_blood_pressure & dead & is_woman]\n\nis_smoking = df_train['smoking']== 1\nsubset_4_1= df_train[is_smoking & dead & is_man]\nsubset_4_2= df_train[is_smoking & dead & is_woman]\n","9a0d1697":"stages=[\"is_anaemia\", \"is_diabetes\", \"is_high_blood_pressure\", \"is_smoking\"]\n\ndf_men = pd.DataFrame(dict(number=[len(subset_1_1), len(subset_2_1), len(subset_3_1), len(subset_4_1)], stage=stages))\ndf_men['office'] = 'Men'\n\ndf_women = pd.DataFrame(dict(number=[len(subset_1_2), len(subset_2_2), len(subset_3_2), len(subset_4_2)], stage=stages))\ndf_women['office'] = 'Women'\n\ndf = pd.concat([df_men, df_women], axis=0)\nfig = px.funnel(df, x='number', y='stage', color='office')\nfig.show()","e02b99cf":"px.scatter(df_train, x='creatinine_phosphokinase', y='platelets', color='time') #x=\ud06c\ub808\uc544\ud2f4 \ud0a4\ub098\uc81c, y=\ud608\uc18c\ud310","e121fbc9":"px.scatter(df_train, x='time', y='ejection_fraction', size='age', hover_data=['serum_creatinine'], color='DEATH_EVENT')","5ac6acbc":"import plotly.express as px\n\ndf = px.data.gapminder()\ndf.head()","d95dfa93":"canada = df[df['country']=='Canada']\n\nfig = px.line(canada, x=\"year\", y=\"lifeExp\", title='Life expectancy in Canada')\nfig.show()","57cdca18":"fig = px.line(df, x=\"year\", y=\"lifeExp\", title='Life expectancy in Canada', color='continent', line_group='country', hover_name='country')\nfig.show()","b77dec89":"import plotly.graph_objects as go\n\nimport numpy as np\nnp.random.seed(1)\n\nN = 100\nrandom_x = np.linspace(0, 1, N)\nrandom_y0 = np.random.randn(N) + 5\nrandom_y1 = np.random.randn(N)\nrandom_y2 = np.random.randn(N) - 5\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=random_x, y=random_y0, mode='lines', name='lines'))\nfig.add_trace(go.Scatter(x=random_x, y=random_y1, mode='lines+markers', name='lines+markers'))\nfig.add_trace(go.Scatter(x=random_x, y=random_y2, mode='markers', name='markers'))\nfig.show()","548e82ae":"df_train.loc[(df_train['age'] >= 40) & (df_train['age'] < 50), 'age_band'] = '40~49'\ndf_train.loc[(df_train['age'] >= 50) & (df_train['age'] < 60), 'age_band'] = '50~59'\ndf_train.loc[(df_train['age'] >= 60) & (df_train['age'] < 70), 'age_band'] = '60~69'\ndf_train.loc[(df_train['age'] >= 70) & (df_train['age'] < 80), 'age_band'] = '70~79'\ndf_train.loc[(df_train['age'] >= 80) & (df_train['age'] < 90), 'age_band'] = '80~89'\ndf_train.loc[(df_train['age'] >= 90) & (df_train['age'] < 100), 'age_band'] = '90~100'\n\ndf_test.loc[(df_train['age'] >= 40) & (df_test['age'] < 50), 'age_band'] = '40~49'\ndf_test.loc[(df_train['age'] >= 50) & (df_test['age'] < 60), 'age_band'] = '50~59'\ndf_test.loc[(df_train['age'] >= 60) & (df_test['age'] < 70), 'age_band'] = '60~69'\ndf_test.loc[(df_train['age'] >= 70) & (df_test['age'] < 80), 'age_band'] = '70~79'\ndf_test.loc[(df_train['age'] >= 80) & (df_test['age'] < 90), 'age_band'] = '80~89'\ndf_test.loc[(df_train['age'] >= 90) & (df_test['age'] < 100), 'age_band'] = '90~100'","83627a54":"df_train.head()","21a4fad0":"import plotly.offline as pyo\nimport plotly.graph_objs as go\n\n# \ub9c9\ub300 \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\ntrace1 = go.Bar(x=df_train['age_band'], y=df_train['ejection_fraction'])\ndata = [trace1]\nlayout = go.Layout(title='\uc5f0\ub839\ubcc4 ejection_fraction')\nfig = go.Figure(data=data, layout=layout)\npyo.iplot(fig)","f3ad9e9b":"# \ud558\ub098\uc758 \uc0ac\uac01\ud615\uc73c\ub85c \ud558\uace0 \uc2f6\uc73c\uba74 pandas\ndf2 = df_train.groupby(by=['age_band', 'sex']).sum().reset_index()\n\ntrace2 = go.Bar(x=df2[df2['sex'] == 0].age_band, y=df2[df2['sex'] == 0].ejection_fraction, name='Female')\ntrace3 = go.Bar(x=df2[df2['sex'] == 1].age_band, y=df2[df2['sex'] == 1].ejection_fraction, name='Male')\n\ndata = [trace2, trace3]\nlayout = go.Layout(title='\uc5f0\ub839\ubcc4 ejection_fraction')\nfig = go.Figure(data=data, layout=layout)\npyo.iplot(fig)","e76ce2c6":"from plotly.subplots import make_subplots\nfig = make_subplots (rows = 2, cols = 2, specs = [[{ \"type\": \"xy\"}, { \"type\": \"polar\"}], \n                           [{ \"type\": \"domain\"}, { \" type \":\"\uc7a5\uba74 \"}]])\nfig.add_bar (row = 1, col = 1, y = [2, 3, 1],) \nfig.add_pie (row = 2, col = 1, values = [2, 3, 1]) \nfig.add_barpolar (row = 1, col = 2, theta = [0, 45, 90], r = [2, 3, 1]) \nfig.add_scatter3d (row = 2, col = 2, x = [2, 3], y = [ 0, 0], z = [0.5, 1]) \nfig.update_layout (height = 700, showlegend = False) \nfig.show ()","4e140526":"def category_age(x):\n    if x < 50:\n        return '40~49'\n    elif x < 60:\n        return '50~59'\n    elif x < 70:\n        return '60~69'\n    elif x < 80:\n        return '70~79'\n    elif x < 90:\n        return '80~89'\n    else:\n        return '90~100'\ndf_train['age_band_2'] = df_train['age'].apply(category_age)","0c7cd170":"print('1\ubc88 \ubc29\ubc95, 2\ubc88 \ubc29\ubc95\uc774 \uac19\uc740 \uacb0\uacfc\ub97c \ub0b4\uba74 True -> ', (df_train['age_band'] == df_train['age_band_2']).all())","3ef03e31":"df_train.drop(['age_band_2'], axis=1, inplace=True)\n","85557947":"df_train.head()","8cc96951":"heatmap_data = df_train[['anaemia', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking','DEATH_EVENT']] \n\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14, 12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths=0.1, vmax=1.0,\n           square=True, cmap=colormap, linecolor='white', annot=True, annot_kws={\"size\": 16})\n\ndel heatmap_data","f103369b":"import pandas as pd\ndf_train = pd.get_dummies(df_train, columns=['age_band'], prefix='age_band')\n#df_test = pd.get_dummies(df_train, columns=['age_band'], prefix='age_band')","392413a3":"df_train.head()","2ba714fc":"fig = px.scatter(df_train, x=\"time\", y=\"ejection_fraction\",\n                 color=\"age\", \n                 hover_data=['DEATH_EVNET'],\n                 title='Heart Failure Data - Scatter Plot')\nfig.show()","ebdb790e":"**null data \ud655\uc778**","ed88c7f2":"plotly \uc5f0\uc2b5 \uc608\uc81c\n","06003a8f":"**\uc0ac\ub9dd\uc790\uc218 \ud30c\uc545**","764fa134":"**\uc5f0\ub839 \ubc94\uc8fc\ud654\uc2dc\ud0a4\uae30**","5dd08d28":"7\/31~8\/6_\ub2e4\uc2dc heartFailure","6d07ac34":"feature\ub4e4\ub07c\ub9ac \uac15\ud55c \uc0c1\uad00\uad00\uacc4\uac00 \uac70\uc758 \uc5c6\uc74c\nDEATH_EVNET\uc640 \uadf8\ub098\ub9c8 \uc0c1\uad00\uad00\uacc4 \uc788\ub294 \uac83\uc740 sex\uc640 smoking","b78c8938":"# 7\/24~7\/30"}}