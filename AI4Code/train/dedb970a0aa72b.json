{"cell_type":{"05e9f181":"code","463980b1":"code","d51ad760":"code","fb4a69ff":"code","e3571fec":"code","f9aa1e48":"code","cdb52857":"code","71fd5ee0":"code","0e3d97ba":"code","de025034":"code","08f738c4":"code","f5257b31":"code","389ae152":"code","437d50cc":"code","e86065ab":"code","55f583bf":"code","87c25783":"code","7e37e05b":"code","58d663ac":"code","c979cebf":"code","02bba2fd":"markdown","269c4b72":"markdown","a9c63564":"markdown","856c2c77":"markdown","570c3d46":"markdown","477bbfc6":"markdown","4bba0593":"markdown","694b570a":"markdown","0d0eeba5":"markdown"},"source":{"05e9f181":"import pandas as pd\nimport geopandas as gpd\nimport numpy as np\nimport folium\nfrom folium import Circle\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\n\n#Function for displaying the map\n#def embed_map(m, file_name):\n#    from IPython.display import IFrame\n#    m.save(file_name)\n#    return IFrame(file_name, width='100%', height='500px')","463980b1":"# data needs to be transformed so we have the rows are cities.\ndf = pd.read_csv(\"\/kaggle\/input\/cost-of-living\/cost-of-living.csv\", index_col=[0]).T.reset_index()\ndf = df.rename(columns={'index':'location'})\ndf.head()","d51ad760":"!pip install opencage","fb4a69ff":"from opencage.geocoder import OpenCageGeocode\nfrom kaggle_secrets import UserSecretsClient\n\nuser_secrets = UserSecretsClient()\nkey = user_secrets.get_secret(\"key\")\n\ngeocoder = OpenCageGeocode(key)\n\nlist_lat = [] \nlist_long = []\n\nfor row in df.location:\n    try:\n        query = str(row)\n        results = geocoder.geocode(query)   \n        lat = results[0]['geometry']['lat']\n        long = results[0]['geometry']['lng']\n        list_lat.append(lat)\n        list_long.append(long)\n    except:\n        list_lat.append(None)\n        list_long.append(None)\n\ndf['lat'] = list_lat   \ndf['lon'] = list_long","e3571fec":"df['city'] = df['location'].apply(lambda x: str(x).split(', ')[0])","f9aa1e48":"# To find some interesting columns to plot I've sorted them by range. \n# Perhaps a better way to do this in future would be by variance.\ntop_range = (df.describe().loc['min',:]\/df.describe().loc['max',:]).sort_values().index[2:22]\nlist(top_range)","cdb52857":"def color_producer(val):\n    if val <= df[item].quantile(.25):\n        return 'forestgreen'\n    elif val <= df[item].quantile(.50):\n        return 'goldenrod'\n    elif val <= df[item].quantile(.75):\n        return 'darkred'\n    else:\n        return 'black'","71fd5ee0":"m_1 = folium.Map(location=[df.lat.mean(),df.lon.mean()], tiles='cartodbpositron', zoom_start=2)\n\nitem = top_range[0]\n\n# Add a bubble map to the base map\nfor i in range(0,len(df)):\n    Circle(\n        location=[df.iloc[i]['lat'], df.iloc[i]['lon']],\n        radius=1000,\n        color=color_producer(df.iloc[i][item])).add_to(m_1)\n\nprint ('Price of: ', item)\nm_1","0e3d97ba":"m_2= folium.Map(location=[df.lat.mean(),df.lon.mean()], tiles='cartodbpositron', zoom_start=2)\nitem = top_range[2]\n\n# Add a bubble map to the base map\nfor i in range(0,len(df)):\n    Circle(\n        location=[df.iloc[i]['lat'], df.iloc[i]['lon']],\n        radius=1000,\n        color=color_producer(df.iloc[i][item])).add_to(m_2)\n\nprint ('Price of: ', item)\n# Display the map\n#e\nm_2","de025034":"m_3= folium.Map(location=[df.lat.mean(),df.lon.mean()], tiles='cartodbpositron', zoom_start=2)\nitem = top_range[9]\n\n# Add a bubble map to the base map\nfor i in range(0,len(df)):\n    Circle(\n        location=[df.iloc[i]['lat'], df.iloc[i]['lon']],\n        radius=1000,\n        color=color_producer(df.iloc[i][item])).add_to(m_3)\n\nprint ('Price of: ', item)\n# Display the map\n#e\nm_3","08f738c4":"m_4= folium.Map(location=[df.lat.mean(),df.lon.mean()], tiles='cartodbpositron', zoom_start=2)\nitem = 'Toyota Corolla 1.6l 97kW Comfort (Or Equivalent New Car)'\n\n# Add a bubble map to the base map\nfor i in range(0,len(df)):\n    Circle(\n        location=[df.iloc[i]['lat'], df.iloc[i]['lon']],\n        radius=1000,\n        color=color_producer(df.iloc[i][item])).add_to(m_4)\n\nprint ('Price of: ', item)\nm_4","f5257b31":"# I spent sometime trying to set up another API using the Overpass Turbo API with OpenStreetMap for geometry data.\n# Fortuantely I found Geopandas already has everything ready to import.\ncities = gpd.read_file(gpd.datasets.get_path('naturalearth_cities'))\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))","389ae152":"df['country'] = df.location.apply(lambda x: str(x).split(', ')[-1])\ncountries = df.groupby('country', as_index=False).mean()","437d50cc":"name_change = {'Bosnia And Herzegovina' : 'Bosnia and Herz.',\n'United States' : 'United States of America',\n'Czech Republic' : 'Czechia',\n'Dominican Republic' : 'Dominican Rep.'}\n\ncountries['country'] = countries.country.replace(name_change)","e86065ab":"world = world[world.name.isin(countries.country.values)]\nworld = world.sort_values(by='name').reset_index()\ncountries = countries.sort_values(by='country').reset_index()\nworld = world.merge(countries, left_on=['name'], right_on=['country'])","55f583bf":"prices = countries.columns[2:-2]\nfig, ax = plt.subplots(len(prices), figsize=(16,6*len(prices)))\n\nc = 0\nfor i in range(len(prices)):\n    \n    # some column names are repeated in the dataset, but the data is different.\n    # An if-else makes sure each of these repeated columns in mapped.\n    if type(world[prices[i]]) is pd.DataFrame:\n        col = world[prices[i]].iloc[:,c]\n        c -= 1\n        c = abs(c)\n    else:\n        col = world[prices[i]] \n                              \n    world.plot(column=col,\n                ax=ax[i],\n                legend=True,\n                legend_kwds={'label': \"Cost\"})\n    ax[i].title.set_text(prices[i])","87c25783":"data = world.iloc[:,9:]\nx = data.values\nmin_max_scalar = preprocessing.MinMaxScaler()\nx_scaled = min_max_scalar.fit_transform(x)\ndata_norm = pd.DataFrame(x_scaled)\ndata_norm.columns = data.columns","7e37e05b":"df_summary = pd.DataFrame(world['country'])\ndf_summary['total'] = data_norm.iloc[:,:56].mean(axis=1)","58d663ac":"fig, ax = plt.subplots(1, figsize=(16,6))\n                              \nworld.plot(column=df_summary['total'], ax=ax,\n            legend=True,\n            legend_kwds={'label': \"Most to least expensive place to live\"})\nax.title.set_text(\"All prices normalized for each Country\")","c979cebf":"df_summary.sort_values(by='total', ascending=False).head(3)","02bba2fd":"# Mapping The Cost Of Living\n\n<img src=\"https:\/\/i.imgur.com\/YBH4F2W.jpg\" width=\"1000px\">\n\nThe data for this has been pulled from [Numbeo](https:\/\/www.numbeo.com\/cost-of-living\/prices_by_city.jsp?itemId=101&itemId=100&itemId=228&itemId=224&itemId=60&itemId=66&itemId=64&itemId=62&itemId=110&itemId=118&itemId=121&itemId=14&itemId=19&itemId=17&itemId=15&itemId=11&itemId=16&itemId=113&itemId=9&itemId=12&itemId=8&itemId=119&itemId=111&itemId=112&itemId=115&itemId=116&itemId=13&itemId=27&itemId=26&itemId=29&itemId=28&itemId=114&itemId=6&itemId=4&itemId=5&itemId=3&itemId=2&itemId=1&itemId=7&itemId=105&itemId=106&itemId=44&itemId=40&itemId=42&itemId=24&itemId=20&itemId=18&itemId=109&itemId=108&itemId=107&itemId=206&itemId=25&itemId=32&itemId=30&itemId=33&displayCurrency=USD) and looks to be priced in Euros.\n\nIt lists a range of costs across world cities, ranging from the price for a kilogram of Apples, to how much for accomodation.\n\nFirst I've used folium to map each city across a few prices. OpenCage API was used to retrieve the latitude and longitude.\n\nThen I've grouped the mean prices for all the countries and created a choropleth with matplotlib for EVERYTHING.\n\nI plan to do a lot more. If you upvote I'll really appreciate it.\n\n* [Using OpenCage to Retrieve Latitude and Longitude](#opencage)\n* [Mapping with Folium](#folium)\n* [Mapping a Choropleth with MatPlotLib](#choropleth)\n* [Mapping All Columns Normalized](#normalize)\n* [Further Analysis](#furtheranalysis)","269c4b72":"Later I'd like to expore Choropleth mapping with Folium and perhaps Bokeh, but here I plan to map every column in the original dataframe, and it'll be much faster and easier to just use MatPlotLib.\n\nI'm going to group the cities by country using the mean of all the columns. This will give a much clearer overview when looking at the map, when trying to detect any trends.","a9c63564":"<a id='furtheranalysis'><\/a>\n## Further Analysis\n\nSome further areas I would like to expore in a future notebook would be;\n* Grouping columns by similarity. Which places are more expensive for food vs. accomodation.\n* Outliers. Which places are much cheaper or expensive for particular things, and exploring possible reasons for these.\n* Exploring the correlation between how much things cost and their countries GDP.","856c2c77":"<a id='opencage'><\/a>\n## Using OpenCage to Retrieve Latitude and Longitude","570c3d46":"<a id='folium'><\/a>\n## Mapping with Folium","477bbfc6":"<a id='choropleth'><\/a>\n## Mapping a Choropleth with MatPlotLib","4bba0593":"It looks like Switzerland, Iceland, and Norway are the most expensive of places. This can be confirmed by looking at the data below.\n\nIt's also clear that Europe and North America are some of the most expensive places on Earth.","694b570a":"This will give a great overview of which areas are the most and least expensive.","0d0eeba5":"<a id='normalize'><\/a>\n## Mapping All Columns Normalized"}}