{"cell_type":{"253b474d":"code","01ca1da5":"code","2512c366":"code","fd018413":"code","7ce00919":"code","6cf3228a":"code","ccf45ac1":"code","a4f080d9":"code","b478346a":"code","8152119c":"code","00076f0b":"code","fc9991dc":"code","c812e3e7":"code","15b76c4d":"code","b11cc385":"code","42a8b78d":"code","8c2ddc4d":"code","e48196e8":"code","216f413e":"code","44ccd302":"code","b45f2a7f":"code","e800a509":"code","58b3241a":"code","deec3f7b":"code","ea2f01ac":"code","cea0384d":"code","873af4d2":"code","d8edc594":"code","6bda0302":"code","e9232c73":"code","c3a05b5d":"code","519447e2":"code","45c90a74":"code","3832bc5c":"code","37bc3e4a":"markdown","e65b1e0b":"markdown","dc38db45":"markdown","b1df3cd4":"markdown","5f3211ed":"markdown","eeaeda53":"markdown","7f2bb609":"markdown","50a4bbf9":"markdown","2ede96c5":"markdown","fa6e8ff8":"markdown","997b7696":"markdown","10de2027":"markdown"},"source":{"253b474d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","01ca1da5":"import pandas as pd                            # File Handling\nimport numpy as np                             # Mathematical Computation","2512c366":"from sklearn.decomposition import PCA                               # For Implementing Principal Component Analysis","fd018413":"from sklearn.model_selection import train_test_split                # Train\/test Split","7ce00919":"import matplotlib.pyplot as plt                                     # For visualizing data","6cf3228a":"from sklearn.neighbors import KNeighborsClassifier                  # For Implementing KNN","ccf45ac1":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report                   # For Evaluating the Results","a4f080d9":"from sklearn.metrics import accuracy_score                          # For calculating accuracy of the Model","b478346a":"Dataset = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")","8152119c":"Dataset = Dataset.dropna()                     # Dropping empty rows","00076f0b":"Dataset.columns","fc9991dc":"Dataset.head()","c812e3e7":"Dataset.shape","15b76c4d":"Dataset[\"Species\"].unique()                      # Unique values of Species","b11cc385":"X = np.array(Dataset[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']])            # Data","42a8b78d":"pca = PCA(n_components=2)                                                                            # Build and train PCA","8c2ddc4d":"pca.fit(X)                                                                                           # Training model","e48196e8":"X_pca = pca.transform(X)                                                                             # Transform the data according to the trained model","216f413e":"explained_variance = pca.explained_variance_ratio_\nprint (\"Explained variance: \", explained_variance)","44ccd302":"print (pca.components_)                                                                              # Components of obtained 2D vector","b45f2a7f":"print (sum(pca.explained_variance_ratio_))                                                           # Amount of variance we managed to preserve","e800a509":"principalDf = pd.DataFrame(data = X_pca, columns = ['principal component 1', 'principal component 2'])\nfinalDf = pd.concat([principalDf, Dataset[['Species']]], axis = 1)                ","58b3241a":"finalDf.head()","deec3f7b":"fig = plt.figure(figsize = (8,8))\nax = fig.add_subplot(1,1,1) \nax.set_xlabel('Principal Component 1', fontsize = 15)\nax.set_ylabel('Principal Component 2', fontsize = 15)\ntargets = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']                                # All specied name\ncolors = ['r', 'g', 'b']                                                                      # Giving species color\nfor target, color in zip(targets,colors):\n    indicesToKeep = finalDf['Species'] == target\n    ax.scatter(finalDf.loc[indicesToKeep, 'principal component 1']                            # Plotting a scatter plot\n               , finalDf.loc[indicesToKeep, 'principal component 2']\n               , c = color\n               , s = 50)\nax.legend(targets)\nax.grid()","ea2f01ac":"finalDf[\"Species\"] = finalDf[\"Species\"].replace(to_replace =\"Iris-setosa\", value =0) \nfinalDf[\"Species\"] = finalDf[\"Species\"].replace(to_replace =\"Iris-versicolor\", value =1) \nfinalDf[\"Species\"] = finalDf[\"Species\"].replace(to_replace =\"Iris-virginica\", value =2) ","cea0384d":"finalDf.head()","873af4d2":"X = np.array(finalDf[[\"principal component 1\", \"principal component 2\"]])\nY = np.array(finalDf[\"Species\"])","d8edc594":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2)          # 80:20","6bda0302":"clf = KNeighborsClassifier(n_neighbors=5)","e9232c73":"clf.fit(X_train, Y_train)","c3a05b5d":"y_pred = clf.predict(X_test)","519447e2":"confusion_matrix(Y_test, y_pred)","45c90a74":"print (classification_report(Y_test, y_pred))","3832bc5c":"print (\"Accuracy of the prediction is: \",accuracy_score(Y_test, y_pred))","37bc3e4a":"## Loading Dataset","e65b1e0b":"## Splitting Train\/Test","dc38db45":"## Visualizing the Model","b1df3cd4":"## Implementing PCA","5f3211ed":"## Importing Libraries","eeaeda53":"## Evaluating Model","7f2bb609":"# Implementing Logistic Regression","50a4bbf9":"## Splitting Data and Targets","2ede96c5":"Iris-setosa --> 0\nIris-versicolor --> 1\nIris-virginica --> 2","fa6e8ff8":"## Extracting Data to Transform","997b7696":"## Analysing Transformed Data","10de2027":"## Converting Species"}}