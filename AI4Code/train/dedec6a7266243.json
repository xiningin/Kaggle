{"cell_type":{"b997d217":"code","169391e2":"code","672365b6":"code","33fe0214":"code","bc899da9":"code","ab120311":"code","fc193a39":"code","ace5d18b":"code","818777b5":"code","6250e2be":"code","80d71e05":"code","be3d1a68":"code","edb1c044":"code","522df3a4":"code","df20eada":"code","27c11fee":"code","99009c9b":"code","fc9df5a0":"code","967b26db":"code","7a387441":"markdown","1def639c":"markdown","c3435723":"markdown","993bbcec":"markdown","034c8c4e":"markdown","822fa0eb":"markdown","e9186fa1":"markdown","c1565299":"markdown","5f0c3d08":"markdown","a5b37808":"markdown","72fa6720":"markdown","9721ce56":"markdown","84dc0e20":"markdown","5fd87b52":"markdown","387716ad":"markdown","523de22e":"markdown"},"source":{"b997d217":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","169391e2":"#data processing libraries\nimport json\nimport datetime\nimport ast\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom wordcloud import WordCloud, STOPWORDS\n\n#plotting libraries\n%matplotlib inline\nfrom IPython.display import Image, HTML\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport warnings\nwarnings.filterwarnings('ignore')\n!pip install chart_studio\nimport chart_studio\nchart_studio.tools.set_credentials_file(username='shamiulshifat', api_key='mEJeIwveMaaGUP7c86Qe')\nsns.set_style('whitegrid')\nsns.set(font_scale=1.25)\npd.set_option('display.max_colwidth', 50)\n\n#ML libraries\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.dummy import DummyClassifier, DummyRegressor\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBClassifier, XGBRegressor","672365b6":"df_metadata=pd.read_csv('..\/input\/the-movies-dataset\/movies_metadata.csv')\ndf_metadata.head(5)","33fe0214":"df_metadata.columns","bc899da9":"df_metadata.info()","ab120311":"#lets remove unnecessary columns which are not needed!\ndf_metadata=df_metadata.drop(['imdb_id'], axis=1)","fc193a39":"#lets drop oriiginal_title\" column as we only prefer english title\ndf_metadata=df_metadata.drop(['original_title'], axis=1)\ndf_metadata=df_metadata.drop(['adult'], axis=1)","ace5d18b":"df_metadata[df_metadata['revenue']!=0].shape","818777b5":"df_metadata['revenue']=df_metadata['revenue'].replace(0, np.nan)","6250e2be":"df_metadata['budget']=pd.to_numeric(df_metadata['budget'], errors='coerce')\n#now replace to NaN values\ndf_metadata['budget']=df_metadata['budget'].replace(0, np.nan)\n#now check null values\ndf_metadata[df_metadata['budget'].isnull()].shape","80d71e05":"#return can be calculated by revenue\/budget\ndf_metadata['return']=df_metadata['revenue']\/df_metadata['budget']\n","be3d1a68":"#lets look into release date\n#transform date time into more pythonic way\n\ndf_metadata['release_date']=pd.to_datetime(df_metadata['release_date'], errors='coerce').apply(lambda x:str(x).split('-')[0] if x!=np.nan else np.nan)","edb1c044":"#lets convert to string type\ndf_metadata['title']=df_metadata['title'].astype('str')\ndf_metadata['overview']=df_metadata['overview'].astype('str')\n\n#lets join titles continuousy seperated by space\ntitle_data=' '.join(df_metadata['title'])\noverview_data=' '.join(df_metadata['overview'])\n\n","522df3a4":"title_cloud = WordCloud(stopwords=STOPWORDS, background_color='white', height=1000, width=3000).generate(title_data)\nplt.figure(figsize=(12,6))\nplt.imshow(title_cloud)\nplt.axis('off')\nplt.show()","df20eada":"overview_cloud = WordCloud(stopwords=STOPWORDS, background_color='white', height=1000, width=3000).generate(overview_data)\nplt.figure(figsize=(12,6))\nplt.imshow(overview_cloud)\nplt.axis('off')\nplt.show()","27c11fee":"#we will build a seperate dataframe-countries_data\ndf_metadata['production_countries']=df_metadata['production_countries'].fillna('[]').apply(ast.literal_eval)\n\ndf_metadata['production_countries'] = df_metadata['production_countries'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])","99009c9b":"countries = df_metadata.apply(lambda x: pd.Series(x['production_countries']),axis=1).stack().reset_index(level=1, drop=True)\ncountries.name = 'countries'","fc9df5a0":"#lets build data to plot\n#we will build custom dataframe\n\ncountries_data = df_metadata.drop('production_countries', axis=1).join(countries)\ncountries_data = pd.DataFrame(countries_data['countries'].value_counts())\n#lets build a column with index\ncountries_data['country'] = countries_data.index\ncountries_data.columns = ['num_movies', 'country']\ncountries_data = countries_data.reset_index().drop('index', axis=1)\ncountries_data.head(10)\n","967b26db":"#lets plot using geomap\n#you can choose any country.. we are excluding 2nd most popular country\ncountries_data = countries_data[countries_data['country'] != 'United Kingdom']\n\n#lets build a dict with parameters for geoplot\ncountry_data = [ dict(\n        type = 'choropleth',\n        locations = countries_data['country'],\n        locationmode = 'country names',\n        z = countries_data['num_movies'],\n        text = countries_data['country'],\n        colorscale = [[0,'rgb(255, 255, 255)'],[1,'rgb(255, 0, 0)']],\n        autocolorscale = False,\n        reversescale = False,\n        marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5\n            ) ),\n        colorbar = dict(\n            autotick = False,\n            tickprefix = '',\n            title = 'Production Countries'),\n      ) ]\n#layout design\n\nlayout = dict(\n    title = 'Production Countries for the MovieLens Movies (Excluding UK)',\n    geo = dict(\n        showframe = False,\n        showcoastlines = False,\n        projection = dict(\n            type = 'Mercator'\n        )\n    )\n)\n\nfig = dict( data=country_data, layout=layout )\npy.iplot( fig, validate=False, filename='d3-world-map' )","7a387441":"## we will use to columns- title and overview togenerate wordclouds","1def639c":"## Lets import necessary libraries","c3435723":"## from above, we see only 7414 movies have recorded revenue.. others have zero revenue, means their revenue records are not recorded. but \"revenue columns are very important for us. so we are gonna replace them with NaN.","993bbcec":"## Now we look into two very important columns- year and return, year: which year movie released, return: how much profit movie made. Presently, our data will not be able to judge if a $200$ million budget movie that earned $100$ million did better than a $50,000$ budget movie taking in $200,000$. This feature will be able to capture that information. A return value > 1 would indicate profit whereas a return value < 1 would indicate a loss","034c8c4e":"## lets investigate into features","822fa0eb":"## Life is the most commonly used word in Movie titles. One and Find are also popular in Movie Blurbs. Together with Love, Man and Girl, these wordclouds give us a pretty good idea of the most popular themes present in movies.","e9186fa1":"## Lets see what kinds of words are popular and frquently more used as title............. generate world clouds","c1565299":"# Introductory Discussion\n\n## we all love to watch movies. We watch movies based on many things like our friends recommendation, online ratings, expert reviews etc. In this notebook, i have used \"the movies dataset\" which contains movie credits, ratings, keywords\/tags, movies metadata etc by which we can run exploratory data analysis and then build a classifier that can predict a movie will be hit or flop.","5f0c3d08":"## so data are not cleaned. we need to perform data wrangling to clean the data.","a5b37808":"## Lets look into another important feature- production_countries. what are famous destinations?","72fa6720":"## lets read metadata****.csv","9721ce56":"## lets explore what type of values are in columns","84dc0e20":"## lets generate now-worldclouds","5fd87b52":"# EXPLORATORY DATA ANALYSIS","387716ad":"## lets look into \"revenue\" column to find out which films have zero revenue","523de22e":"## Now we have to process \"budget\" column values by transforming its object to numerical values"}}