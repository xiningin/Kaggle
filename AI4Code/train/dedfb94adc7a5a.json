{"cell_type":{"63bdc583":"code","f1cd5177":"code","bca3e3ac":"code","2c0ab029":"code","810ac939":"code","e609a189":"code","98b4f3f8":"code","1049e0d6":"code","0033c782":"code","1ef9593b":"code","eda390a0":"code","6e41bb68":"code","37efcc22":"code","2d3156bb":"code","2ec2eeca":"code","1add2bf0":"code","f7030132":"code","224edf0e":"code","c7a3c471":"code","9443ae3e":"code","542c4a42":"code","7e3ff06e":"code","f67f0b27":"code","568f9367":"code","383f279d":"code","94e5bde3":"code","04c66d02":"code","a04cb357":"code","bef16a7d":"code","e08fdbab":"code","6f39851b":"code","4f1c5f2b":"code","9b7def1f":"code","c17aed78":"code","6336e4b5":"code","2774180c":"code","7490d4ee":"code","4faafc76":"code","a624ac58":"code","02326531":"code","2ddf5bc6":"code","06071c32":"code","36e8b92d":"code","df4eb041":"code","a7bfd92e":"code","c08b02a6":"code","08d5f247":"code","9f68bddd":"code","6479ff04":"code","b4144283":"code","b23e72e4":"code","be8f66a8":"code","bbbd37bf":"code","e865d745":"code","667a2b52":"code","f0e921a8":"code","dc82bb43":"code","19a5200e":"code","b7d7cf77":"code","2f36bc17":"code","f004a0ab":"code","97383de8":"code","f54fc5e5":"code","6a885fae":"code","17e4d8e2":"code","0515d68c":"code","b29ad4cd":"code","1ff8b2b8":"code","bab681f3":"code","4a3fae42":"code","d89edafe":"code","ca09109c":"code","8ec100ac":"code","2755db08":"code","cef85220":"code","fe67d7f0":"code","956daee0":"code","a6ecb8a9":"code","5b9135ae":"code","473fd045":"code","e15ac10d":"code","4554fb6e":"code","61a015fb":"code","51a2f60d":"code","3fc566d1":"code","4f6befe1":"code","3184add3":"code","67ece43e":"code","64c6da69":"markdown","e2a3c140":"markdown","6c8ac4c0":"markdown","a02c766f":"markdown","f876a768":"markdown","a5eec71a":"markdown","d2d81f99":"markdown","68aac456":"markdown","10404531":"markdown","447b4304":"markdown","e7f3b302":"markdown","64435cfb":"markdown","baaa08df":"markdown","b72691e7":"markdown","c86c2317":"markdown","174baa65":"markdown","4d9074a6":"markdown","1e48548d":"markdown","75c0a3e9":"markdown","b51cdbb5":"markdown","b80cdb3c":"markdown","d96037d4":"markdown","1c2eaa73":"markdown","187d8eea":"markdown","5aed54f1":"markdown","7102272b":"markdown","42d0240a":"markdown","93bca0a5":"markdown","7953c26d":"markdown","e5cbb876":"markdown","702c7e9f":"markdown","2d05e28b":"markdown","929bcd6d":"markdown","c7f46040":"markdown","82d9a705":"markdown","bab7705a":"markdown","f81aa5c5":"markdown","2778935d":"markdown","05b14fb7":"markdown","c9132105":"markdown","b90b3f9e":"markdown","53a000e6":"markdown","0685a453":"markdown","cbd28474":"markdown","b80623da":"markdown","fdf6ad3a":"markdown","3bb97544":"markdown","2ee2dd77":"markdown","f9f12f24":"markdown","2b754850":"markdown","bc26dd4c":"markdown","12a4d310":"markdown","ab732b1a":"markdown","2e20fd96":"markdown","c90039e8":"markdown","d1073792":"markdown","196bcf48":"markdown","c0613f4d":"markdown"},"source":{"63bdc583":"!pip install pycaret","f1cd5177":"import pandas as pd\nimport numpy as np\nimport os\nfrom datetime import datetime\nimport math\nimport time\nimport random\n\n# VISUALIZATION\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt\n\n# PREPROCESSING\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE\n\n# STATISTICAL TESTS\nfrom scipy.stats import chi2_contingency\nfrom scipy.stats import chi2\nfrom scipy import stats\n\n# MODELING AND EVALUATION\nfrom pycaret.classification import *\nfrom sklearn import metrics\n\n\nimport warnings\nwarnings.filterwarnings('ignore')","bca3e3ac":"data = pd.read_csv('\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\nprint('The data has {} rows and {} columns.'.format(data.shape[0], data.shape[1]))","2c0ab029":"data.head()","810ac939":"data.columns","e609a189":"data.info()","98b4f3f8":"data['SeniorCitizen'].value_counts()","1049e0d6":"data['SeniorCitizen'] = data['SeniorCitizen'].astype(str)","0033c782":"char_not_num = data[['TotalCharges']][~data['TotalCharges'].str.contains('[1-9.]')]\nchar_not_num","1ef9593b":"print('There are {} rows that were found to have a special character.'.format(len(char_not_num)))","eda390a0":"data['TotalCharges'] = data['TotalCharges'].replace(\" \",np.nan).astype(float)\ndata = data[pd.notnull(data['TotalCharges'])].reset_index().drop('index', axis=1)","6e41bb68":"data.info()","37efcc22":"data.isnull().sum()","2d3156bb":"data.describe()","2ec2eeca":"# create a bar plot based on frequency\n\nplt.figure()\nplt.yticks(fontsize=15)\nplt.xticks(fontsize=15)\nsns.set(rc={'figure.figsize':(10,7)})\ncplot = sns.countplot(x=\"Churn\", data=data)\nfor p in cplot.patches:\n         cplot.annotate(\"%.0f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n             ha='center', va='center', fontsize=15, xytext=(0, 20),\n             textcoords='offset points')\ncplot.axes.set_title(\"Churn\",fontsize=20)\ncplot.set_xlabel(\"\", fontsize=18)\ncplot.set_ylabel(\"Count\", fontsize=18)","1add2bf0":"# this function creates a barplot given the data and the categorical feature against the Churns\ndef plot_categorical(data, feature, rotate=0, y_axis=\"percentage of customers\", title=None):\n    plt.figure()\n    plt.yticks(fontsize=15)\n    plt.xticks(fontsize=15, rotation=rotate)\n    sns.set(rc={'figure.figsize':(10,7)})\n    five_thirty_eight = [\n                        \"#30a2da\",\n                        \"#fc4f30\",\n                        \"#e5ae38\",\n                        \"#6d904f\",\n                        \"#8b8b8b\",\n                        ]\n    sns.set_palette(five_thirty_eight)\n\n    graph_data = data.groupby(feature)[\"Churn\"].value_counts().to_frame()\n    graph_data = graph_data.rename({\"Churn\": y_axis}, axis=1).reset_index()\n    graph_data[y_axis] = graph_data[y_axis]\/len(data)\n    bar = sns.barplot(x=feature, y= y_axis, hue='Churn', data=graph_data)\n#     bar.set_xticklabels(['{:,.0%}'.format(x) for x in bar.get_xticks()])\n    bar.set_yticklabels(['{:,.0%}'.format(x) for x in bar.get_yticks()])\n    \n    for p in bar.patches:\n             bar.annotate(\"%.2f\" % (p.get_height()*100), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                 ha='center', va='center', fontsize=15, xytext=(0, 20),\n                 textcoords='offset points')\n\n    bar.axes.set_title(title,fontsize=20)\n    bar.set_xlabel(\"\")\n    bar.set_ylabel(y_axis, fontsize=18)\n    bar.plot()\n    plt.savefig('bar.pdf')","f7030132":"# create a table showing values per churn\n\ndef show_crosstab(data, feature):\n    orange = sns.light_palette(\"orange\", as_cmap=True)\n    tab = pd.crosstab(data[feature],data['Churn'], margins=True).style.set_table_attributes('style=\"font-size: 15px\"')\n    return tab","224edf0e":"excluded_features = ['customerID', 'tenure', 'MonthlyCharges', 'TotalCharges']\ncat_features = data.drop(excluded_features, axis=1)\ncat_features.columns","c7a3c471":"plot_categorical(data=data, feature='SeniorCitizen', title='Senior Citizen')","9443ae3e":"show_crosstab(data, 'SeniorCitizen')","542c4a42":"plot_categorical(data=cat_features, feature='gender', title='Gender')","7e3ff06e":"show_crosstab(data, 'gender')","f67f0b27":"plot_categorical(data=cat_features, feature='Partner', title='Partner')","568f9367":"show_crosstab(data, 'Partner')","383f279d":"plot_categorical(data=cat_features, feature='Dependents', title='Dependents')","94e5bde3":"show_crosstab(data, 'Dependents')","04c66d02":"plot_categorical(data=cat_features, feature='PhoneService', title='Phone Service')","a04cb357":"show_crosstab(data, 'PhoneService')","bef16a7d":"plot_categorical(data=cat_features, feature='MultipleLines', title='Multiple Lines')","e08fdbab":"show_crosstab(data, 'MultipleLines')","6f39851b":"plot_categorical(data=cat_features, feature='InternetService', title='Internet Service')","4f1c5f2b":"show_crosstab(data, 'InternetService')","9b7def1f":"plot_categorical(data=cat_features, feature='OnlineSecurity', title='Online Security')","c17aed78":"show_crosstab(data, 'OnlineSecurity')","6336e4b5":"plot_categorical(data=cat_features, feature='OnlineBackup', title='Online Backup')","2774180c":"show_crosstab(data, 'OnlineBackup')","7490d4ee":"plot_categorical(data=cat_features, feature='DeviceProtection', title='Device Protection')","4faafc76":"show_crosstab(data, 'DeviceProtection')","a624ac58":"plot_categorical(data=cat_features, feature='TechSupport', title='Tech Support')","02326531":"show_crosstab(data, 'TechSupport')","2ddf5bc6":"plot_categorical(data=cat_features, feature='StreamingTV', title='Streaming TV')","06071c32":"show_crosstab(data, 'StreamingTV')","36e8b92d":"plot_categorical(data=cat_features, feature='StreamingMovies', title='Streaming Movies')","df4eb041":"show_crosstab(data, 'StreamingMovies')","a7bfd92e":"plot_categorical(data=cat_features, feature='Contract', title='Contract')","c08b02a6":"show_crosstab(data, 'Contract')","08d5f247":"plot_categorical(data=cat_features, feature='PaperlessBilling', title='Paperless Billing')","9f68bddd":"show_crosstab(data, 'PaperlessBilling')","6479ff04":"plot_categorical(data=cat_features, feature='PaymentMethod', rotate=30, title='Payment Method')","b4144283":"show_crosstab(data, 'PaymentMethod')","b23e72e4":"# create a density plot sshowing diference between churn groups\ndef plot_numerical(data, feature, title=None):\n    plt.figure()\n    plt.yticks(fontsize=15)\n    plt.xticks(fontsize=15, rotation=0)\n    sns.set(rc={'figure.figsize':(10,7)})\n    five_thirty_eight = [\n                        \"#30a2da\",\n                        \"#fc4f30\",\n                        \"#e5ae38\",\n                        \"#6d904f\",\n                        \"#8b8b8b\",\n                        ]\n    sns.set_palette(five_thirty_eight)\n    plot = sns.distplot(data[feature][data['Churn']=='No'], hist = False, kde = True,\n                     kde_kws = {'shade': True, 'linewidth': 1}, color='red')\n    plot = sns.distplot(data[feature][data['Churn']=='Yes'], hist = False, kde = True,\n                     kde_kws = {'shade': True, 'linewidth': 1})\n    plot.axes.set_title(title,fontsize=20)\n    plot.set_xlabel(\"\")\n    plot.set_ylabel('density', fontsize=18)\n    plot.legend(labels=['No','Yes'], title='Churn')\n    plot.plot()\n    plt.savefig('bar.pdf')","be8f66a8":"plot_numerical(data=data, feature='TotalCharges', title='Total Charges')","bbbd37bf":"plot_numerical(data=data, feature='tenure', title='Tenure')","e865d745":"plot_numerical(data=data, feature='MonthlyCharges', title='Monthly Charges')","667a2b52":"# this function creates scatterplot with churn groups as hue \ndef plot_pair(data, x_feature, y_feature, title=None):\n    sns.set(rc={'figure.figsize':(12,8.27)})\n    sns.set(font_scale = 1.5)\n    scatter = sns.scatterplot(x=x_feature, y=y_feature, data=data, hue='Churn', s=100, alpha=0.7)\n    scatter.axes.set_title(title,fontsize=20)\n    scatter.plot()\n\n# create data for the scatter plot\nscatter_data = data[['tenure', 'MonthlyCharges', 'TotalCharges', 'Churn']]\nplot_pair(scatter_data, 'tenure', 'MonthlyCharges', title='Tenure vs. Monthly Charges')","f0e921a8":"plot_pair(scatter_data, 'tenure', 'TotalCharges', title='Tenure vs. Total Charges')","dc82bb43":"plot_pair(scatter_data, 'TotalCharges', 'MonthlyCharges', title='Monthly Charges vs. Total Charges')","19a5200e":"sns.set(rc={'figure.figsize':(15,10)})\nsns.set(font_scale = 1.5)\nscatter = sns.scatterplot(x='TotalCharges', y='MonthlyCharges', data=data, hue='Churn', size='tenure', sizes=(20, 300), alpha=0.7)\nscatter.axes.set_title('Numerical Features Relationship',fontsize=20)\nscatter.plot()","b7d7cf77":"features = pd.Series(cat_features.drop(['Churn'], axis=1).columns).append(pd.Series(['SeniorCitizen']))","2f36bc17":"\n# this function creates will automaticall generate the decision for the chi square test\ndef chi_square_test(data, feature):\n    df = pd.crosstab(data[feature],data['Churn'])\n    stat, p, dof, expected = chi2_contingency(df)\n    print('='*60)\n    print('Chi-Square Test for {}'.format(feature))\n    print('='*60)\n    print('degrees of freedom = %d' % dof)\n    print('-'*60)\n    # interpret test-statistic\n    prob = 0.95\n    critical = chi2.ppf(prob, dof)\n    print('Results:')\n    print(' ')\n    print('probability = %.3f, critical = %.3f, stat = %.3f' % (prob, critical, stat))\n    print('-'*60)\n    print('Decision based on Chi-Square Statistics:')\n    print(' ')\n    if abs(stat) >= critical:\n        print('The Churns are dependent on {} : (reject H0)'.format(feature))\n    else:\n        print('The Churns are independent on {} : (fail to reject H0)'.format(feature))\n    # interpret p-value\n    alpha = 1.0 - prob\n    print('-'*60)\n    print('Decision based on p-value:')\n    print(' ')\n    print('alpha = %.2f, p = %.3f' % (alpha, p))\n    if p <= alpha:\n        print('The Churns are dependent on {} : (reject H0)'.format(feature))\n    else:\n        print('The Churns are independent on {} : (fail to reject H0)'.format(feature))\n    print('_'*60)\n    print(' '*60)\n    print('_'*60)\n    print('_'*60)","f004a0ab":"for feature in features:\n    chi_square_test(data, feature)","97383de8":"yes = data['MonthlyCharges'][data['Churn']=='Yes']\nyes = yes.sample(round(len(yes)*0.05))\nno = data['MonthlyCharges'][data['Churn']=='No']\nno = no.sample(round(len(no)*0.05))\nstats.f_oneway(yes, no)","f54fc5e5":"yes = data['TotalCharges'][data['Churn']=='Yes']\nyes = yes.sample(round(len(yes)*0.05))\nno = data['TotalCharges'][data['Churn']=='No']\nno = no.sample(round(len(no)*0.05))\nstats.f_oneway(yes, no)","6a885fae":"yes = data['tenure'][data['Churn']=='Yes']\nyes = yes.sample(round(len(yes)*0.05))\nno = data['tenure'][data['Churn']=='No']\nno = no.sample(round(len(no)*0.05))\nstats.f_oneway(yes, no)","17e4d8e2":"cats = cat_features.columns\ncustomerID = data.customerID\ncleanData = pd.get_dummies(data.drop(['customerID'],axis=1), prefix = cats)\ncleanData = cleanData.drop('Churn_No', axis=1)\ncleanData.head()","0515d68c":"# this function creates thesplits the data into 75\/25 train\/test proportion\ndef split_data(data):\n    # change the target feature name to labels\n    data = data.rename(columns={'Churn_Yes': 'labels'})\n    dataX = data.drop(['labels'], axis = 1)\n    dataY = data['labels']\n    \n    # Create train and test dataset\n    X_train, x_test, Y_train, y_test = train_test_split(dataX, dataY, random_state = 0)\n    return X_train, x_test, Y_train, y_test\n\nX_train, x_test, Y_train, y_test = split_data(cleanData)\nprint('There are {} rows for training.'.format(len(X_train)))\nprint('There are {} rows for testing.'.format(len(x_test)))","b29ad4cd":"data = pd.concat([X_train, Y_train], axis=1)\ndata = data.rename(columns={'labels':'target'})","1ff8b2b8":"clf1 = setup(data, target = 'target')\n\nbest1 = compare_models(sort='AUC', whitelist=['dt','rf','xgboost','lightgbm','ada','lr','nb'], fold=5)","bab681f3":"clf2 = setup(data, target = 'target', fix_imbalance = True) # this will implement the oversampling using the SMOTE method to balance the data\nbest2 = compare_models(sort='AUC', whitelist=['dt','rf','xgboost','lightgbm','ada','lr','nb'], fold=5)","4a3fae42":"clf2 = setup(data, target = 'target', fix_imbalance = True) # this will implement the oversampling using the SMOTE method to balance the data\nada = create_model('ada')\ntuned_ada = tune_model(ada, optimize = 'AUC', n_iter = 1000, fold = 5) # this will randomly search a set of parameters, it is based on the randomseach function of sklearn","d89edafe":"plot_model(tuned_ada, plot = 'parameter')","ca09109c":"plot_model(tuned_ada, plot='auc')","8ec100ac":"clf2 = setup(data, target = 'target', fix_imbalance = True) # this will implement the oversampling using the SMOTE method to balance the data\nlgb = create_model('lightgbm')\ntuned_lgb = tune_model(lgb, optimize = 'AUC', n_iter = 1000, fold = 5) # this will randomly search a set of parameters, it is based on the randomseach function of sklearn","2755db08":"plot_model(tuned_lgb, plot = 'parameter')","cef85220":"plot_model(tuned_lgb, plot='auc')","fe67d7f0":"clf2 = setup(data, target = 'target', fix_imbalance = True) # this will implement the oversampling using the SMOTE method to balance the data\nlr = create_model('lr')\ntuned_lr = tune_model(lr, optimize = 'AUC', n_iter = 1000, fold = 5) # this will randomly search a set of parameters, it is based on the randomseach function of sklearn","956daee0":"plot_model(tuned_lr, plot = 'parameter')","a6ecb8a9":"plot_model(tuned_lr, plot='auc')","5b9135ae":"clf2 = setup(data, target = 'target', fix_imbalance = True) # this will implement the oversampling using the SMOTE method to balance the data\nxgb = create_model('xgboost')\ntuned_xgb = tune_model(xgb, optimize = 'AUC', n_iter = 1000, fold = 5) # this will randomly search a set of parameters, it is based on the randomseach function of sklearn","473fd045":"plot_model(tuned_xgb, plot = 'parameter')","e15ac10d":"plot_model(tuned_xgb, plot='auc')","4554fb6e":"clf2 = setup(data, target = 'target', fix_imbalance = True) # this will implement the oversampling using the SMOTE method to balance the data\nnb = create_model('nb')\ntuned_nb = tune_model(nb, optimize = 'AUC', n_iter = 1000, fold = 5) # this will randomly search a set of parameters, it is based on the randomseach function of sklearn","61a015fb":"plot_model(tuned_nb, plot = 'parameter')","51a2f60d":"plot_model(tuned_nb, plot='auc')","3fc566d1":"# save the final model\nada_final = finalize_model(tuned_ada)\nlgb_final = finalize_model(tuned_lgb)\nlr_final = finalize_model(tuned_lr)\nxgb_final = finalize_model(tuned_xgb)\nnb_final = finalize_model(tuned_nb)\n\n# reset the index both for x_test and y_test\nx_test = x_test.reset_index().drop(['index'], axis=1)\ny_test = y_test.reset_index().drop(['index'], axis=1)\n\n# predict using the hold out data\nada_preds = predict_model(ada_final, data = x_test, probability_threshold=.5)\nlgb_preds = predict_model(lgb_final, data = x_test, probability_threshold=.45)\nlr_preds = predict_model(lr_final, data = x_test, probability_threshold=.45)\nxgb_preds = predict_model(xgb_final, data = x_test, probability_threshold=.45)\nnb_preds = predict_model(nb_final, data = x_test, probability_threshold=.45)\n\n# save the predicted values\nada = ada_preds['Label']\nlgb = lgb_preds['Label']\nlr = lr_preds['Label']\nxgb = xgb_preds['Label']\nnb = nb_preds['Label']","4f6befe1":"models = {'Adaboost':ada,'Light GBM':lgb,'Logistic Regression':lr,'XGBoost':xgb,'Naive Bayes':nb}\n\nfor name, model in models.items():\n    print(' ')\n    print('{}'.format(name))\n    print(' ')\n    print('PRECISION {}'.format(metrics.precision_score(y_test, model)))\n    print('RECALL {}'.format(metrics.recall_score(y_test, model)))\n    print('F1 {}'.format(metrics.f1_score(y_test, model)))\n\n    fpr, tpr, thresholds = metrics.roc_curve(y_test, model)\n    auc_score = metrics.auc(fpr, tpr)\n    print('AUC {}'.format(auc_score))\n    print('ACCURACY {}'.format(metrics.accuracy_score(model, y_test)))\n    print('='*50)","3184add3":"blender = blend_models(estimator_list = [ada_final,lgb_final,lr_final,xgb_final,nb_final], method = 'soft', fold=5)","67ece43e":"# save the final model\nblender_final = finalize_model(blender)\n\n# predict using the hold out data\nblender_preds = predict_model(blender_final, data = x_test)\n\n# save the predicted values\nblend_value = blender_preds['Label']\n\nprint(' ')\nprint('{}'.format('Blender Model'))\nprint(' ')\nprint('PRECISION {}'.format(metrics.precision_score(y_test, blend_value)))\nprint('RECALL {}'.format(metrics.recall_score(y_test, blend_value)))\nprint('F1 {}'.format(metrics.f1_score(y_test, blend_value)))\n\nfpr, tpr, thresholds = metrics.roc_curve(y_test, blend_value)\nauc_score = metrics.auc(fpr, tpr)\nprint('AUC {}'.format(auc_score))\nprint('ACCURACY {}'.format(metrics.accuracy_score(blend_value, y_test)))\nprint('='*50)","64c6da69":"<a id=\"OnlineSecurity-barplot\"><\/a>\n### 3.2.8 OnlineSecurity Bar Plot","e2a3c140":"<a id=\"import-library-data\"><\/a>\n# 1.  Importing all libraries and data","6c8ac4c0":"<a id=\"PaperlessBilling-barplot\"><\/a>\n### 3.2.15 PaperlessBilling Bar Plot","a02c766f":"<a id=\"phoneservice-barplot\"><\/a>\n### 3.2.5 PhoneService Bar Plot","f876a768":"## CONTENTS","a5eec71a":"## 9. [](http:\/\/)Holdout Data Testing and Comparison","d2d81f99":"<a id=\"StreamingMovies-barplot\"><\/a>\n### 3.2.13 StreamingMovies Bar Plot","68aac456":"## 8.5 Naive Bayes","10404531":"<a id=\"data-types\"><\/a>\n## 2.2 Identify Data Types","447b4304":"<a id=\"monthly-total-pairplot\"><\/a>\n### 3.3.6 Monthly Charges vs. Total Charges Pair Plot","e7f3b302":"<a id=\"OnlineBackup-barplot\"><\/a>\n### 3.2.9 OnlineBackup Bar Plot","64435cfb":"<a id=\"MonthlyCharges-denseplot\"><\/a>\n### 3.3.3 MonthlyCharges Density Plot","baaa08df":"<a id=\"explore-data\"><\/a>\n# 2. Exploratory Data Analysis (EDA)","b72691e7":"| Decision | | | | | | | | | | | | | |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| <span style=\"font-weight:bold;\">Dependent<\/span> | Partner | Dependents | MultipleLines | InternetService | OnlineSecurity | OnlineBackup | DeviceProtection |  TechSupport |  StreamingTV | StreamingMovies | Contract | PaperlessBilling | PaymentMethod | SeniorCitizen |\n| <span style=\"font-weight:bold;\">Independent<\/span> | Gender  | PhoneService  |","c86c2317":"### Conclusion","174baa65":"<a id=\"lgb\"><\/a>\n### 8.2 Light GBM","4d9074a6":"All the tests shows very small p-values which means there is difference in means between Churn=YES and Churn=No for the numerical variables.  \nThis means that the change in the value of the numerical variables has effect on whether it will stay subscribed or not.","1e48548d":"## 8.4 XGBoost","75c0a3e9":"<a id=\"senior-barplot\"><\/a>\n### 3.2.1 Senior Citizen Bar Plot","b51cdbb5":"<a id=\"mod-compare\"><\/a>\n## 7. Model Comparison and Initial Model Selection","b80cdb3c":"<a id=\"split-data\"><\/a>\n# 6. Train-Test Split Data","d96037d4":"<a id=\"numerical-relationship\"><\/a>\n### 3.3.7 Numerical Features Relationship","1c2eaa73":"<a id=\"tenure-monthly-pairplot\"><\/a>\n### 3.3.4 Tenure vs. Monthly Charges Pair Plot","187d8eea":"<a id=\"data-preprocessing\"><\/a>\n# 5. Data Pre-processing","5aed54f1":"<a id=\"anova-test\"><\/a>\n## 4.2 Analysis of Variance (ANOVA) Test for Difference - Numerical Features","7102272b":"<a id=\"tenure-total-pairplot\"><\/a>\n### 3.3.5 Tenure vs. Total Charges Pair Plot","42d0240a":"<a id=\"Contract-barplot\"><\/a>\n### 3.2.14 Contract Bar Plot","93bca0a5":"The goal of this analysis is to investigate the relationship of the categorical features to the dependent\/target variable Churn=YES.  \nThe test will determine if there is significant difference in the proportion of Churns between the groups in the categorical variable.   \n  \n  \nThe null hypothesis assumes that theres is no association between the categorical feature and the feature Churn=YES.  \nThe alternative hypothesis that there is an association between the two variables.  \n  \n  \nThe alpha statistics is set to 0.05.  \nIf the p-value is lesser than alpha then we will reject the null hypothesis and accept the alternative that the proportions of Churn is dependent with the group in the categorical variable.","7953c26d":"<a id=\"stat-analysis\"><\/a>\n# 4. Statistical Analysis","e5cbb876":"<a id=\"lr\"><\/a>\n### 8.3 Logistic Regression","702c7e9f":"<a id=\"gender-barplot\"><\/a>\n### 3.2.2 Gender Bar Plot","2d05e28b":"<a id=\"ada\"><\/a>\n### 8.1 Adaboost","929bcd6d":"<a id=\"tuning\"><\/a>\n## 8. Hyperparameter Tuning","c7f46040":"<a id=\"dependent-barplot\"><\/a>\n### 3.2.4 Dependents Bar Plot","82d9a705":"<a id=\"load-data\"><\/a>\n## 1.1 Loading the data and quick look at dimensions","bab7705a":"<a id=\"graphs\"><\/a>\n# 3. Graphs and visualizations","f81aa5c5":"## BONUS: Blender Model","2778935d":"#### Raw Imbalanced Data","05b14fb7":"<a id=\"numerical-plot\"><\/a>\n## 3.3 Numerical Features Plot","c9132105":"<a id=\"TechSupport-barplot\"><\/a>\n### 3.2.11 TechSupport Bar Plot","b90b3f9e":"<a id=\"imputation\"><\/a>\n## 2.3 Data Munging - Imputing Missing Values","53a000e6":"<a id=\"total-denseplot\"><\/a>\n### 3.3.1 TotalCharges Density Plot","0685a453":"<a id=\"partner-barplot\"><\/a>\n### 3.2.3 Partner Bar Plot","cbd28474":"<a id=\"PaymentMethod-barplot\"><\/a>\n### 3.2.16 PaymentMethod Bar Plot","b80623da":"* [1.  Importing all libraries and data](#import-library-data)\n    * [1.1.  Loading the data and quick look at dimensions](#load-data)\n    \n* [2. Exploratory Data Analysis (EDA)](#explore-data)\n    * [2.1.  Identify Features](#column-names)\n    * [2.2.  Identify Data Types](#data-types)\n    * [2.3.  Data Munging - Imputing Missing Values](#imputation)\n    \n* [3.  Graphs and visualizations](#data-visualization)\n    * [3.1.  Churns Bar Plot](#churns-plot)\n    * [3.2.  Categorical Feature Bar Plots](#categorical-barplot)\n        * [3.2.1  Senior Citizen Bar Plot](#senior-barplot)\n        * [3.2.2  Gender Bar Plot](#gender-barplot)\n        * [3.2.3  Partner Bar Plot](#partner-barplot)\n        * [3.2.4  Dependents Bar Plot](#dependent-barplot)\n        * [3.2.5  PhoneService Bar Plot](#phoneservice-barplot)\n        * [3.2.6  MultipleLines Bar Plot](#MultipleLines-barplot)\n        * [3.2.7  InternetService Bar Plot](#InternetService-barplot)\n        * [3.2.8  OnlineSecurity Bar Plot](#OnlineSecurity-barplot)        \n        * [3.2.9  OnlineBackup Bar Plot](#OnlineBackup-barplot)\n        * [3.2.10  DeviceProtection Bar Plot](#DeviceProtection-barplot)        \n        * [3.2.11  TechSupport Bar Plot](#TechSupport-barplot)\n        * [3.2.12  StreamingTV Bar Plot](#StreamingTV-barplot)\n        * [3.2.13  StreamingMovies Bar Plot](#StreamingMovies-barplot)\n        * [3.2.14  PaperlessBilling Bar Plot](#PaperlessBilling-barplot)\n        * [3.2.15  PaymentMethod Bar Plot](#PaymentMethod-barplot)\n        * [3.2.16  Contract Bar Plot](#Contract-barplot)\n    * [3.3.  Numerical Features Plot](#numerical-plot)\n        * [3.2.1  TotalCharges Density Plot](#total-denseplot)\n        * [3.2.2  Tenure Density Plot](#tenure-denseplot)\n        * [3.2.3  MonthlyCharges Density Plot](#MonthlyCharges-denseplot)         \n        * [3.2.4  Tenure vs. Monthly Charges Pair Plot](#tenure-monthly-pairplot)        \n        * [3.2.5  Tenure vs. Total Charges Pair Plot](#tenure-total-pairplot)\n        * [3.2.6  Monthly Charges vs. Total Charges Pair Plot](#monthly-total-pairplot)        \n        * [3.2.7  Numerical Features Relationship](#numerical-relationship)\n        \n* [4. Statistical Analysis](#stat-analysis)\n    * [4.1.  Chi-Square Test for Independence - Categorical Features](#chi-square)\n    * [4.2.  Analysis of Variance (ANOVA) Test for Difference - Numerical Features](#anova-test)\n\n* [5.  Data Preprocessing](#data-preprocessing)\n    * [5.1.  One-Hot-Coding](#one-hot)\n    \n* [6. Train-Test Split Data](#split-data)\n\n* [7.  Model Comparison and Initial Model Selection](#mod-compare)    \n* [8.  Hyperparameter Tuning and Validation](#tuning)\n    * [8.1.  Adaboost](#ada)\n    * [8.2.  Logistic Regression](#lr)\n    * [8.3.  Light GBM](#lgb)\n    * [8.4.  XGBoost](#xgb)\n    * [8.5.  Naive Bayes](#nb)\n* [9.  Holdout Data Testing and Comparison](#holdout)\n* [BONUS: Blender Model](#blender)","fdf6ad3a":"<a id=\"chi-square\"><\/a>\n## 4.1 Chi-Square Test of Independence - Categorical Features","3bb97544":"#### Balanced Data","2ee2dd77":"<a id=\"churns-plot\"><\/a>\n## 3.1 Churns Bar Plot","f9f12f24":"<a id=\"column-names\"><\/a>\n## 2.1 Identify features","2b754850":"<a id=\"categorical-barplot\"><\/a>\n## 3.2 Categorical Feature Bar Plots","bc26dd4c":"<a id=\"InternetService-barplot\"><\/a>\n### 3.2.7 InternetService Bar Plot","12a4d310":"Best model AUC-wise is the blender.","ab732b1a":"<a id=\"MultipleLines-barplot\"><\/a>\n### 3.2.6 MultipleLines Bar Plot","2e20fd96":"<a id=\"one-hot\"><\/a>\n## 5.1 One-Hot-Coding","c90039e8":"<a id=\"DeviceProtection-barplot\"><\/a>\n### 3.2.10 DeviceProtection Bar Plot","d1073792":"<a id=\"tenure-denseplot\"><\/a>\n### 3.3.2 Tenure Density Plot","196bcf48":"<a id=\"StreamingTV-barplot\"><\/a>\n### 3.2.12 StreamingTV Bar Plot","c0613f4d":"This test will determine if there is significant difference between the means of Churn=YES and Churn=NO in numerical variables Tenure, Total Charges and Monthly Charges.  \n  \n  \nThe null hypothesis assumes that there no statistically significant difference in means between the Churn groups.  \nThe alternative assumes there is significant difference between the group. \n\nEach group were sample 0.05% to \n  \n  \nThe alpha statistics is set to 0.05.  \nIf the p-value is lesser than alpha then we will reject the null hypothesis and accept the alternative that there is significant difference between the groups.\n"}}