{"cell_type":{"02029f72":"code","952de4f7":"code","f71461f3":"code","6511ec76":"code","1f2d3357":"code","1be4ac2f":"code","890a6f04":"code","e78cf4ba":"code","298f7860":"code","bc5424d8":"code","4924c11d":"code","c181f0c1":"code","f0a6dc39":"code","5e60454b":"code","ba10a677":"code","f1aff3a6":"code","15d6924c":"code","5158d091":"code","093284fd":"code","99746fda":"code","3338819e":"code","96f80387":"code","c91e9c40":"code","440e3061":"code","87182092":"code","1a6902a3":"code","e298143b":"code","ea033c6d":"code","5e6ca4d1":"code","be2267c6":"code","5dfc57e5":"markdown","d6b18d9a":"markdown","adff268e":"markdown","872bfe22":"markdown","be30e207":"markdown","3cb90437":"markdown","8ba6ea5c":"markdown","d803fa24":"markdown","d83193cc":"markdown","ee4465ff":"markdown","32741a64":"markdown","8695bf51":"markdown","8691074b":"markdown","afeb362d":"markdown"},"source":{"02029f72":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom collections import Counter #for outlier detection\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","952de4f7":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","f71461f3":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","6511ec76":"train_data.columns","1f2d3357":"train_data.shape","1be4ac2f":"train_data.describe()","890a6f04":"train_data.info()","e78cf4ba":"# Plcass vs Survived\ntrain_data[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","298f7860":"# Sex vs Survived\ntrain_data[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","bc5424d8":"# Sibsp vs Survived\ntrain_data[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","4924c11d":"# Parch vs Survived\ntrain_data[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","c181f0c1":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","f0a6dc39":"train_data.loc[detect_outliers(train_data,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","5e60454b":"# drop outliers\ntrain_df = train_data.drop(detect_outliers(train_data,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","ba10a677":"train_df","f1aff3a6":"train_df.head()","15d6924c":"train_df.isnull().sum()","5158d091":"train_df[train_df[\"Embarked\"].isnull()]","093284fd":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","99746fda":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","3338819e":"sns.catplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","96f80387":"sns.catplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df, kind = \"box\")\nplt.show()","c91e9c40":"sns.catplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.catplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","440e3061":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","87182092":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","1a6902a3":"train_df.drop(labels = [\"Cabin\"], axis = 1, inplace = True)","e298143b":"train_df","ea033c6d":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_df[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_df[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=6, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)","5e6ca4d1":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","be2267c6":"result = pd.read_csv(\".\/submission.csv\")\nresult.head()","5dfc57e5":"<a id = \"20\"><\/a><br>\n## Fill Missing: Age Feature","d6b18d9a":"# Modeling","adff268e":"<a id = \"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","872bfe22":"# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","be30e207":"# Load the data","3cb90437":"##### Sex is not informative for age prediction, age distribution seems to be same.","8ba6ea5c":"<a id = \"2\"><\/a><br>\n# Variable Description\n1. PassengerId: unique id number to each passenger\n1. Survived: passenger survive(1) or died(0)\n1. Pclass: passenger class\n1. Name: name\n1. Sex: gender of passenger \n1. Age: age of passenger \n1. SibSp: number of siblings\/spouses\n1. Parch: number of parents\/children \n1. Ticket: ticket number \n1. Fare: amount of money spent on ticket\n1. Cabin: cabin category\n1. Embarked: port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)","d803fa24":"<a id = \"28\"><\/a><br>\n## Drop Cabin ","d83193cc":"##### 1st class passengers are older than 2nd, and 2nd is older than 3rd class. ","ee4465ff":"# Analysing and Data Pre-Processing","32741a64":"##### Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","8695bf51":"<a id = \"7\"><\/a><br>\n# Outlier Detection","8691074b":"# fill missing values","afeb362d":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, age and passengerId"}}