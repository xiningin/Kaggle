{"cell_type":{"38fc5b6e":"code","5b7f1ea0":"code","7e4bbdbe":"code","52176188":"code","fc60d450":"code","6f3f1a05":"code","3800afa5":"code","d04d21da":"code","680a667f":"code","349cf48a":"code","531c6da0":"code","854cef4f":"code","a7e38d64":"code","e2bf76b7":"code","fb4a396c":"markdown","33581e52":"markdown","77829922":"markdown","c0a3d4b9":"markdown","daddfab6":"markdown","66621f3a":"markdown","e807485f":"markdown","d89c3664":"markdown","3ea21353":"markdown"},"source":{"38fc5b6e":"!pip install optbinning","5b7f1ea0":"# Data wrangling\nimport pandas as pd \nimport numpy as np \n\n# Preprocessing \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import KNNImputer\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom optbinning import OptimalBinning\n\n# Model \nfrom sklearn.linear_model import LogisticRegression\n\n# Evaluation metrics\nfrom sklearn.metrics import roc_auc_score ","7e4bbdbe":"df_train = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\")\ndf_train.head()","52176188":"# Inspect data\ndf_train.describe()","fc60d450":"# Defining target and explanatory variables \ny = df_train[\"claim\"]\nX = df_train.drop(columns=[\"claim\", \"id\"])\n\n# Train-test-split \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","6f3f1a05":"# Create woe dataset\nX_train_woe = pd.DataFrame()\nX_test_woe = pd.DataFrame()\n\n# Creating information value table \nX_cols = X_train.columns.to_list()\n\nfor col in X_cols: \n    variable = col\n    x = X_train[variable].values\n    \n    # Configuring optimal bins\n    opt_bin = OptimalBinning(name=variable, dtype=\"numerical\")\n    opt_bin.fit(x, y_train)\n    \n    # Optbin transforming\n    X_train_woe = pd.concat([pd.DataFrame(opt_bin.transform(X_train[col], metric=\"woe\"), columns=[col]), X_train_woe], axis=1)\n    X_test_woe = pd.concat([pd.DataFrame(opt_bin.transform(X_test[col], metric=\"woe\"), columns=[col]), X_test_woe], axis=1)\n\nX_train_woe = X_train_woe[X_cols]\nX_test_woe = X_test_woe[X_cols]\nX_train_woe.head()","3800afa5":"X_test_woe.head()","d04d21da":"# Initial Model\nmodel = LogisticRegression(random_state=0, solver=\"liblinear\")\nmodel.fit(X_train_woe, y_train)\npredictions = model.predict(X_test_woe)\nroc_score = roc_auc_score(y_test, predictions)\nprint(\"ROC Score: {0:0.3f}\".format(roc_score))","680a667f":"# 1st Model Improvement \nmodel_1 = LogisticRegression(penalty = \"l1\", solver=\"liblinear\", random_state=0)\nmodel_1.fit(X_train_woe, y_train)\npredictions_1 = model_1.predict(X_test_woe)\nroc_score_1 = roc_auc_score(y_test, predictions_1)\nprint(\"ROC Score: {0:0.3f}\".format(roc_score_1))","349cf48a":"# 2nd model improvement \nfor alpha in range(1, 11, 1): \n    alpha = alpha \/ 10\n    model_2 = LogisticRegression(penalty=\"elasticnet\", solver=\"saga\", l1_ratio=alpha, random_state=0)\n    model_2.fit(X_train_woe, y_train)\n    predictions_2 = model_2.predict(X_test_woe)\n    roc_score_2 = roc_auc_score(y_test, predictions_2)\n    print(\"L1: {0}, ROC Score: {1:0.3f}\".format(alpha, roc_score_2))","531c6da0":"# Import test data\ntest_data = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")\ntest_data.head()","854cef4f":"test = test_data.set_index(\"id\")\nX_cols = X_train.columns.to_list()\ntest_woe = pd.DataFrame()\n\nfor col in X_cols: \n    variable = col\n    x = X_train[variable].values\n    \n    # Configuring optimal bins\n    opt_bin = OptimalBinning(name=variable, dtype=\"numerical\")\n    opt_bin.fit(x, y_train)\n    \n    # Optbin transforming\n    test_woe = pd.concat([pd.DataFrame(opt_bin.transform(test[col], metric=\"woe\"), columns=[col]), test_woe], axis=1)\n\ntest_woe = test_woe[X_cols]","a7e38d64":"LR_model = LogisticRegression(penalty=\"l1\", solver=\"liblinear\", random_state=0)\nLR_model.fit(X_train_woe, y_train)\nLR_predictions = LR_model.predict(test_woe)","e2bf76b7":"# Export model \noutput = pd.DataFrame({\"id\": test_data[\"id\"], \n                      \"claim\": LR_predictions})\noutput.to_csv(\"submission.csv\", index=False)","fb4a396c":"#### Weight of Evidence and Information Value","33581e52":"# Model Development","77829922":"## Submission","c0a3d4b9":"### Preprocessing","daddfab6":"#### Model Development ","66621f3a":"# Packages","e807485f":"# Data Preprocessing","d89c3664":"# Import Data","3ea21353":"## Weight of Evidence and Information Value\n"}}