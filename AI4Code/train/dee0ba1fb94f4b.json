{"cell_type":{"cbfee601":"code","3f091fb5":"code","1df3f017":"code","c03deb8c":"code","21620ef6":"code","c734e998":"code","76b29553":"code","a4dfc90b":"code","fc4d5d17":"code","f95433d9":"code","b6fd8c99":"code","ed727e26":"code","0d1b90e0":"code","e4042648":"code","30bb246f":"code","5b6254b0":"code","4e9973b6":"code","f70788e5":"code","b493b00c":"code","51fe223b":"code","3856420b":"code","204b041b":"code","b0a5b81d":"code","0b018b02":"code","0f0217a1":"code","c636c58b":"code","96aa274f":"code","bf4bc12b":"code","3e1e65ef":"code","7aa04b2f":"code","cbbf9aad":"code","253e4a93":"markdown","cdbe0bd0":"markdown","a3d04430":"markdown","1bd09c87":"markdown","92773d08":"markdown","6f72e45d":"markdown","113cef1f":"markdown","ee8bcbb6":"markdown","a68d061f":"markdown","db8858f0":"markdown","704d0b02":"markdown","7fcb8b0a":"markdown","df8e4167":"markdown","0ca0f9d1":"markdown","83d86891":"markdown"},"source":{"cbfee601":"import pandas as pd\nfrom datetime import datetime, timedelta\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom IPython.display import display, HTML, Markdown","3f091fb5":"#Spanish dataset\ndf = pd.read_csv(\"https:\/\/covid19.isciii.es\/resources\/serie_historica_acumulados.csv\", sep=',', encoding='iso-8859-1')","1df3f017":"display(Markdown(\"#### Description\"))\ndisplay(df.describe())\ndisplay(Markdown(\"#### Head\"))\ndisplay(df.head())\ndisplay(Markdown(\"#### Tail\"))\ndisplay(df.tail())","c03deb8c":"df.columns","21620ef6":"df.head()","c734e998":"df.tail()","76b29553":"df['CCAA'].unique()","a4dfc90b":"region = ['AN', 'AR', 'AS', 'IB', 'CN',\n         'CB', 'CM', 'CL', 'CT', 'CE',\n         'VC', 'EX', 'GA', 'MD', 'ML',\n         'MC', 'NC', 'PV', 'RI']\n","fc4d5d17":"# Filter record based on valid region\ndf = df[df['CCAA'].isin(region)]","f95433d9":"df.head()","b6fd8c99":"def rebuildSeries(df, ndays):\n    \"\"\"\n    df: Pandas DataFrame:  dataframe to reconstruct\n    ndays: Integer: how many days to calculate backwards\n    return: DataFrame reconstructed with new features\n    \"\"\"\n    cols = ['FECHA', 'CCAA', 'CASOS', 'PCR+', 'TestAc+', 'Hospitalizados',\n            'UCI', 'Fallecidos', 'Recuperados']\n    rebuilt = list()\n    for i in range(1,ndays + 1):\n        limit = -(i-1)*len(region)\n        if limit != 0:\n            today = df.iloc[-i*len(region):limit]\n        else:\n            today = df.iloc[-i*len(region):]\n        today = today.sort_values('CCAA')\n        today['FECHA'] = (datetime.now() - timedelta(days=i-1)).strftime(\"%Y-%m-%d\") \n        yesterday = df.iloc[-(i+1) *len(region):-i*len(region)].sort_values('CCAA')\n        assert today.shape == yesterday.shape, \"Shapes do not fit [{}] {} vs {}\".format(i, \n                                                                                        today.shape,\n                                                                                        yesterday.shape)\n        today['CASOS'] = (today['PCR+'].reset_index() - yesterday['PCR+'].reset_index())['PCR+'].to_numpy()\n        today = today[cols]\n        for item in ['Hospitalizados', 'UCI', 'Fallecidos', 'Recuperados']:\n            today['Inc' + item] = (today[item].reset_index() -\n                                   yesterday[item].reset_index())[item].to_numpy()\n        today.reset_index()\n        rebuilt.append(today)\n    rebuilt.reverse()\n    return pd.concat(rebuilt, ignore_index=True)","ed727e26":"res = rebuildSeries(df, 30)","0d1b90e0":"res.tail(20)","e4042648":"res[res['CCAA']=='CM'].tail()","30bb246f":"def displayInfo(df, location=None, date=None, columns=None):\n    \"\"\"\n    location: string: region code\n    date: string: date to query format YYYY-MM-DD\n    return: dataframe display\n    \"\"\"\n    if date == 'today':\n        date = datetime.now().strftime(\"%Y-%m-%d\") \n    elif date != None:\n        df = df[df['FECHA']== date]\n    if location:\n        df = df[df['CCAA']==location]\n    else:\n        df = df.groupby(['FECHA']).sum().reset_index()\n    if columns: \n        df = df[columns]\n    return display(df)\n    \ndef showStats(df, location=None, from_date='2020-03-01', to_date=None, feature='IncFallecidos', aggregate=False):\n    \"\"\"\n    df: Pandas DataFrame\n    location: string: region code\n    from_date: string: date to start the time window query. Format YYYY-MM-DD\n    to_date: string: end of the time window query. Format YYYY-MM-DD\n    feature: string: feature to plot\n    aggregate: Boolean: if no location provided, aggregation is available\n    return: None (plot info)\n    \"\"\"\n    if location:\n        print(\"Warning: aggregation not available\")\n    if location:\n        df = df[df.CCAA==location]\n\n    df = df[df.FECHA >= from_date]\n    \n    if to_date:\n        df = df[df.FECHA >= to_date]\n\n    dates = list(df.FECHA.unique())\n    dates.sort(reverse=False)\n    \n    pal = sns.cubehelix_palette(len(df))\n    rank = df[feature].argsort().argsort()   # http:\/\/stackoverflow.com\/a\/6266510\/1628638\n    if not location and aggregate:\n        df = df.groupby(['FECHA']).sum().reset_index()\n\n    fig, ax = plt.subplots(1,1, figsize=(16,10))\n    sns.barplot(data=df,\n                x='FECHA',\n                y=feature,\n                label=feature,\n                palette=np.array(pal[::1])[rank],\n                color='lightblue',\n#                hue='CCAA',\n                order=dates,\n                ax=ax)\n\n    plt.xticks(rotation=90)\n    plt.title(\"Evolution {} since {} of {}\".format(location or \"\", from_date, feature, from_date))\n    plt.legend()\n    plt.show()","5b6254b0":"def checkSituation(loc=None):\n    # Incremental features\n    incs = ['FECHA', 'CASOS', 'IncFallecidos', 'IncHospitalizados', 'IncUCI', 'IncRecuperados']\n    # Absolute features\n    abss = ['PCR+', 'Hospitalizados', 'Fallecidos', 'UCI', 'Recuperados']\n    current_day = datetime.now().strftime(\"%Y-%m-%d\")\n    display(Markdown(\"#### TODAY'S DATA: {} \".format(current_day) + (loc if loc else \"\")))\n    displayInfo(res, location=loc, date=current_day, columns=incs + abss)\n    display(Markdown(\"##### Evolution of cases: {} \".format(current_day) + (loc if loc else \"\")))\n    showStats(res, location=loc, feature='CASOS', aggregate=False)\n    display(Markdown(\"##### Evolution of deaths: {} \".format(current_day) + (loc if loc else \"\")))\n    showStats(res, location=loc, feature='IncFallecidos', aggregate=False)","4e9973b6":"checkSituation(loc=None)","f70788e5":"checkSituation(loc='MD')","b493b00c":"checkSituation(loc='CM')","51fe223b":"momo = pd.read_csv(\"https:\/\/momo.isciii.es\/public\/momo\/data\")","3856420b":"display(Markdown(\"#### Description\"))\ndisplay(momo.describe())\ndisplay(Markdown(\"#### Head\"))\ndisplay(momo.head())\ndisplay(Markdown(\"#### Tail\"))\ndisplay(momo.tail())","204b041b":"momo[momo.ambito=='ccaa'].cod_ambito.unique()","b0a5b81d":"def showDeceases(df, location=None, from_date='2020-03-01', sex='all', age='all'):\n    \"\"\"\n    df: Pandas DataFrame\n    location: string: code of the region\n    from_date: string: date to start the time window query. Format YYYY-MM-DD\n    sex: string: sex code for filters\n    age: string: age code for filters\n    \"\"\"\n\n    if location:\n        df = df[df.cod_ambito==location]\n    df = df[df.cod_gedad==age]\n    df = df[df.cod_sexo==sex]\n    df = df[df['fecha_defuncion']>=from_date]\n\n    dates = list(df.fecha_defuncion.unique())\n    dates.sort(reverse=False)\n    \n    pal = sns.cubehelix_palette(len(df))\n    rank = df['defunciones_observadas'].argsort().argsort()   # http:\/\/stackoverflow.com\/a\/6266510\/1628638\n\n    fig, ax = plt.subplots(1,1, figsize=(16,10))\n    sns.barplot(data=df,\n                x='fecha_defuncion',\n                y='defunciones_observadas',\n                label='Observed deceases',\n#                palette=np.array(pal[::1])[rank],\n                color='lightblue',\n                order=dates,\n                ax=ax)\n    sns.lineplot(data=df,\n                 x='fecha_defuncion',\n                 y='defunciones_esperadas',\n                 label='Expected deceases',\n                 markers=True,\n                 dashes=False,\n                 color='m'\n                )\n    sns.lineplot(data=df,\n                 x='fecha_defuncion',\n                 y='defunciones_esperadas_q01',\n                 label='Expected deceases (inf)',\n                 markers=True,\n                 dashes=True,\n                 color='y'\n                )\n    sns.lineplot(data=df,\n                 x='fecha_defuncion',\n                 y='defunciones_esperadas_q99',\n                 label='Expected deceases (sup)',\n                 markers=True,\n                 dashes=True,\n                 color='r'\n                )\n    plt.xticks(rotation=90)\n    plt.title(\"Deceases {} since {} - Age {} Sex {}\".format(location, from_date, age, sex))\n    plt.legend()\n    plt.show()","0b018b02":"showDeceases(momo, location = 'MD')","0f0217a1":"eur = pd.read_csv(\"https:\/\/opendata.ecdc.europa.eu\/covid19\/casedistribution\/csv\")","c636c58b":"display(Markdown(\"#### Description\"))\ndisplay(eur.describe())\ndisplay(Markdown(\"#### Head\"))\ndisplay(eur.head())\ndisplay(Markdown(\"#### Tail\"))\ndisplay(eur.tail())","96aa274f":"eur.columns","bf4bc12b":"eur['date'] = pd.to_datetime(eur['dateRep'], infer_datetime_format=True).apply(\n    lambda x: str(x).split(\" \")[0])","3e1e65ef":"def showCases(df, location='ES', from_date='2020-03-01', date_limit=None):\n    if not date_limit:\n        from datetime import date\n        date_limit = date.today().strftime(\"%Y-%m-%d\")\n\n    if type(location) == 'str':\n        df = df[df.geoId==location]\n    elif type(location) == list:\n        df = df[df.geoId.isin(location)]\n    \n    df = df[df['date']>=from_date]\n    df = df[df['date']<=date_limit]\n\n    dates = list(df.date.unique())\n    dates.sort(reverse=False)\n    \n    fig, ax = plt.subplots(1,1, figsize=(16,10))\n    sns.barplot(data=df,\n                x='date',\n                y='cases',\n                label='Observed infections',\n                color='lightblue',\n                order=dates,\n                ax=ax)\n    sns.lineplot(data=df,\n                 x='date',\n                 y='deaths',\n                 label='Deaths',\n                 markers=True,\n                 dashes=True,\n                 color='m'\n                )\n    plt.xticks(rotation=90)\n    plt.title(\"Cases {} since {}\".format(location or \"Europe\", from_date))\n    plt.legend()\n    plt.show()","7aa04b2f":"eur.geoId.unique()","cbbf9aad":"showCases(eur, location=None, from_date='2020-03-29')\nshowCases(eur, location=['ES', 'FR', 'IT', 'GE'], from_date='2020-03-15')","253e4a93":"### Checking Castille-La Mancha situation","cdbe0bd0":"#### Rebuild 30 days backwards","a3d04430":"#### Date processing\n\nIn order to have an easy way to filter rows, let's generate a date column compliant with format ```YYYY-MM-DD```.","1bd09c87":"### 2. MoMo Dataset\n\nMoMo dataset is aimed to mortality data. Is well prepared and no extra preprocessing is needed in order to have good insights. Here we have the features: \n\n* ```ambito```: nacional or ccaa (national or regional)\n* ```cod_ambito```: empty if nacional. Region ISO code if regional\n* ```cod_ine_ambito```: INE region code\n* ```nombre_ambito```: Name of the region\n* ```cod_sexo```: INE Sex code. man: 1, woman: 6 \n* ```nombre_sexo```: Sex name (hombres, mujeres)\n* ```cod_gedad```: Age group: menos_65, 65_74, mas_74\n* ```nombre_gedad```: name of age group\n* ```fecha_defuncion```: decease date\n* ```defunciones_observadas```: number of deceases observed (included delay corrections)\n* ```defunciones_observadas_lim_inf```: inferior limit of confidence interval\n* ```defunciones_observadas_lim_sup```: superior limit of confidence interval\n* ```defunciones_esperadas```: expected deceases\n* ```defunciones_esperadas_q01```: Percentil 1 of expecteds\n* ```defunciones_esperadas_q99```: Percentil 99 of expecteds","92773d08":"### Snipet for current situation\n\nUse this cell in order to know from the official data ISCIII the evolution. \n\n* ```current_day```: controls actual day\n* ```loc```: specify region or ```None```. Available regions are: \n```\n'AN', 'AR', 'AS', 'IB', 'CN',\n'CB', 'CM', 'CL', 'CT', 'CE',\n'VC', 'EX', 'GA', 'MD', 'ML',\n'MC', 'NC', 'PV', 'RI'``` ","6f72e45d":"### 3. \tEuropean Centre for Disease Prevention and Control\n\nAs is said at the [link](https:\/\/www.ecdc.europa.eu\/en\/publications-data\/download-todays-data-geographic-distribution-covid-19-cases-worldwide), the downloadable data file is updated daily and contains the latest available public data on COVID-19. Each row\/entry contains the number of new cases reported per day and per country. You may use the data in line with ECDC\u2019s copyright policy.\n\n#### Columns\n\n* ```dateRep```: date of the record (format DD\/MM\/YYYY)\n* ```day```: disaggregated data from ```dateRep```\n* ```month```: disaggregated data from ```dateRep```\n* ```year```: disaggregated data from ```dateRep```\n* ```cases```: number of new cases \n* ```deaths```: number of new deceases\n* ```countriesAndTerritories```: name of the country \n* ```geoId```: two letter geolocation identifier\n* ```countryterritoryCode```: three letter country code\n* ```popData2018```: population accounted at 2018\n* ```continentExp```: continent related to that country\n","113cef1f":"#### Dataset information\n\n* ```CCAA```: region code\n* ```FECHA```: date of the record\n* ```CASOS```: new infections detected (mainly empty)\n* ```PCR+```: referring to the ```CASOS``` means the new infections detected via a positive [PCR test](https:\/\/en.wikipedia.org\/wiki\/Polymerase_chain_reaction)\n* ```TestAc+```: Similar to the ```PCR+```. Quick test focused on Antibodies\n* ```Hospitalizados```: hospitalized people related with Covid-19\n* ```UCI```: hospitalized people who require Intensive Care Units\n* ```Fallecidos```: deceased people\n* ```Recuperados```: recovered people\n\nLet's have a look at their content. ","ee8bcbb6":"### Checking national situation","a68d061f":"#### Reconstruct time series\n\nIn this step we're going to fix some issues in data:\n* Fill ```CASOS``` column. This could be calculated based on the difference between ```PCR+``` day by day\n* Reconstruct the time series. At the moment, the features reflect the snapshot of the day by day, but there are no features representing the increments between dates. For this pupose, the reconstruction of the time series consist on calculate those increments on new features. In this manner, the following features will reflect the variation for those data respect the day before:\n    * ```IncHospitalizados```\n    * ```IncUCI```\n    * ```IncFallecidos```\n    * ```IncRescuperados```","db8858f0":"### Checking Madrid situation","704d0b02":"# Covid19\n## Works on different public datasets\n\nThe purpose of this notebook is to provide an easy to run tool in order to have better insigts that those found in the press. Here we are going to handle with different files:\n* [Instituto de Salud Carlos III](https:\/\/covid19.isciii.es\/)\n* [ISCIII Daily Mortality Monitoring MoMo](https:\/\/momo.isciii.es\/public\/momo\/dashboard\/momo_dashboard.html)\n* [European Centre for Disease Prevention and Control](https:\/\/www.ecdc.europa.eu\/en\/publications-data\/download-todays-data-geographic-distribution-covid-19-cases-worldwide)\n\n### 0. Loading libraries\n","7fcb8b0a":"### 1. ISCIII Dataset\n\nThis section will prepare those different datasets in order to make them more easy to work with. \n\n#### Preprocessing\n\nSome considerations\n* Separator: usually changes switching between ',' and ';'.\n* Data is being updated via appending the new data (one record for each autonomous region) day by day, so the last records correspond with the more recent information.\n* **DISCLAIMER**: data provided from media differs from data displayed at some points. Moreover, several other factors could change in this dataset (as the described separator or the addition of new columns). ","df8e4167":"### 1.2. Functions to explore data\n\nNow we have our data well formatted, is time to explore. For this purpose, several functions are created to easy filter and plot the DataFrame. Interactive plots coming soon :D ","0ca0f9d1":"Ready to work with. Interactive graphs coming soon ; )","83d86891":"#### Conclusions up to here\n\nThere are plenty of missing information and also a lot of noise in the data. Data is not properly indexed by date. In fact, data is being updated via appending the new data (one record for each region) day by day, so the last records correspond with the more recent information. The idea is to correct this problems and reconstruct the whole time series. Let's handle this. \n\nFirst of all, identify the region code in order to filter. "}}