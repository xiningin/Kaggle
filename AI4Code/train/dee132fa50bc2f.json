{"cell_type":{"62e39232":"code","f619afd9":"code","5adbbf7e":"code","bbd373f0":"code","deb22898":"code","c4e8f6b6":"code","bf7b2165":"code","72972eae":"code","15f847a1":"code","287f6130":"code","91c1a78c":"code","dd39867e":"code","2cd9c0c2":"code","8a872887":"code","b6468a20":"code","d7d05f79":"code","90d62d2e":"code","3e5e872a":"code","1ed7e746":"code","c4262a8a":"code","56855143":"code","16a6c9eb":"code","361ff7b1":"code","6634d81b":"code","22d26da8":"code","25e12bf1":"code","63ae26f7":"code","8f08809e":"code","f139b91a":"code","16ab3c78":"code","f83a2c77":"code","8bcddbe3":"code","09df078d":"code","65d007f7":"code","aca711ed":"code","dc172632":"code","ba243130":"code","f3adc3da":"code","896b77ed":"code","5693b1b2":"code","64ebf4a6":"code","210c866f":"code","8aba68ac":"code","8f439187":"code","12e1102d":"code","fbaaba12":"code","f1e184eb":"code","a9f83ed5":"code","b2569307":"code","f8f96615":"code","08b7bfd9":"code","fe7da20d":"code","e09f9265":"code","79b028ae":"code","727fdcd3":"code","a50dd17f":"code","f1faadb9":"code","65cc0940":"code","d449d656":"code","2aadca52":"code","eb21303e":"code","0555457a":"code","32fe4db8":"code","22eb7009":"code","51f72f43":"code","f888f7c7":"code","ceaf78ef":"code","3614e09f":"code","aef4772a":"markdown","d42bba58":"markdown","54112a88":"markdown","aabf318d":"markdown","473f3a66":"markdown","0cde5e89":"markdown","98e05ad6":"markdown","e8efc5a1":"markdown","d08554f2":"markdown","9632cda6":"markdown","e2b6abe5":"markdown","97a3ea07":"markdown","335e475c":"markdown","24adc515":"markdown","17962e14":"markdown","fbf3fd3f":"markdown","6d972e78":"markdown","52348914":"markdown","c4aebe4a":"markdown","4951cf68":"markdown","fe5ea97b":"markdown","8ac0f8f4":"markdown","cd436454":"markdown","ec833e37":"markdown","a478e77f":"markdown","da6391f9":"markdown","a6830874":"markdown","5aeb3120":"markdown","de862a9a":"markdown","1d76d6b4":"markdown","1a81028c":"markdown","414e76bf":"markdown","5b7ddde0":"markdown","67dada91":"markdown","430e3ec5":"markdown","d30407a2":"markdown","364eae8f":"markdown","20c94fed":"markdown","6685dc5a":"markdown","6b19df70":"markdown","1f0e121c":"markdown","e2728ab6":"markdown","c21d7fd2":"markdown","16f1367b":"markdown","a54b46de":"markdown","cc70862b":"markdown","3bce35fc":"markdown","2aa5bea0":"markdown","b4c5b2a5":"markdown","e3c3862b":"markdown","b6cf47d9":"markdown","bf96d83f":"markdown","8bd755fb":"markdown"},"source":{"62e39232":"from IPython.display import Image\nImage(\"..\/input\/protection-systems-against-fraud\/_20190826145415.png\")","f619afd9":"from IPython.display import Image\nImage(\"..\/input\/protection-systems-against-fraud\/payment.png\")","5adbbf7e":"from IPython.display import Image\nImage(\"..\/input\/protection-systems-against-fraud\/_20190826153639.png\")","bbd373f0":"from IPython.display import Image\nImage(\"..\/input\/protection-systems-against-fraud\/realtime.png\")","deb22898":"import gc\nimport os\nimport numpy as np\nimport pandas as pd\nimport subprocess\nimport seaborn as sns\nimport matplotlib.pyplot as plt","c4e8f6b6":"def check_fsize(dpath,s=30):\n    \"\"\"check file size\n    Args:\n    dpath: file directory\n    s: string length in total after padding\n    \n    Returns:\n    None\n    \"\"\"\n    for f in os.listdir(dpath):\n        print(f.ljust(s) + str(round(os.path.getsize(dpath+'\/' + f) \/ 1000000, 2)) + 'MB')","bf7b2165":"check_fsize('..\/input\/ieee-fraud-detection')","72972eae":"def check_fline(fpath):\n    \"\"\"check total number of lines of file for large files\n    \n    Args:\n    fpath: string. file path\n    \n    Returns:\n    None\n    \n    \"\"\"\n    lines = subprocess.run(['wc', '-l', fpath], stdout=subprocess.PIPE).stdout.decode('utf-8')\n    print(lines, end='', flush=True)","15f847a1":"fs=['..\/input\/ieee-fraud-detection\/train_transaction.csv', '..\/input\/ieee-fraud-detection\/train_identity.csv', '..\/input\/ieee-fraud-detection\/test_transaction.csv','..\/input\/ieee-fraud-detection\/test_identity.csv']\n[check_fline(s) for s in fs]","287f6130":"# Load sample training data\ndf_train_transac = pd.read_csv('..\/input\/ieee-fraud-detection\/train_transaction.csv')\ndf_train_identity = pd.read_csv('..\/input\/ieee-fraud-detection\/train_identity.csv')","91c1a78c":"# Show data shape\nprint(df_train_transac.shape)\nprint(df_train_identity.shape)\n\n# Show data head\nprint(df_train_transac.head(2))\nprint(df_train_identity.head(2))","dd39867e":"def count_feature_type(df):\n    return df.dtypes.value_counts()","2cd9c0c2":"print(count_feature_type(df_train_transac))\nprint(count_feature_type(df_train_identity))","8a872887":"def check_cunique(df,cols):\n    \"\"\"check unique values for each column\n    df: data frame. \n    cols: list. The columns of data frame to be counted\n    \"\"\"\n    df_nunique = df[cols].nunique().to_frame()\n    df_nunique = df_nunique.reset_index().rename(columns={'index': 'feat',0:'nunique'})\n    return df_nunique","b6468a20":"def feat_value_count(df,colname):\n    \"\"\"value count of each feature\n    \n    Args\n    df: data frame.\n    colname: string. Name of to be valued column\n    \n    Returns\n    df_count: data frame.\n    \"\"\"\n    df_count = df[colname].value_counts().to_frame().reset_index()\n    df_count = df_count.rename(columns={'index':colname+'_values',colname:'counts'})\n    return df_count","d7d05f79":"feat_value_count(df_train_transac,'isFraud')","90d62d2e":"def check_missing(df,cols=None,axis=0):\n    \"\"\"check data frame column missing situation\n    Args\n    df: data frame.\n    cols: list. List of column names\n    axis: int. 0 means column and 1 means row\n    \n    Returns\n    missing_info: data frame. \n    \"\"\"\n    if cols != None:\n        df = df[cols]\n    missing_num = df.isnull().sum(axis).to_frame().rename(columns={0:'missing_num'})\n    missing_num['missing_percent'] = df.isnull().mean(axis)*100\n    return missing_num.sort_values(by='missing_percent',ascending = False) ","3e5e872a":"df_colmissing = check_missing(df_train_transac,cols=None,axis=0)\ndf_colmissing.head()","1ed7e746":"sns.distplot(df_colmissing.missing_percent, kde=False, rug=True)","c4262a8a":"df_rowmissing = check_missing(df_train_transac,cols=None,axis=1)\ndf_rowmissing.head()","56855143":"sns.distplot(df_rowmissing.missing_percent, kde=False, rug=True)","16a6c9eb":"df_nunique = check_cunique(df_train_transac,df_train_transac.select_dtypes(include=['object']).columns)\ndf_nunique","361ff7b1":"def compare_cate(df,colname,targetname):\n    \"\"\"check target value difference of given category\n    in the case of binary classifications.\n    \n    Args\n    df: data frame.\n    colname: string. The column name to be evaluated.\n    targetname: string. The column name of the target variable.\n    \n    Returns\n    None\n    \"\"\"\n    # caculate aggregate stats\n    df_cate = df.groupby([colname])[targetname].agg(['count', 'sum','mean'])\n    df_cate.reset_index(inplace=True)\n    print(df_cate)\n    \n    # plot visuals\n    f, ax = plt.subplots(figsize=(15, 6))\n    ax.tick_params(axis='x',labelrotation=90)\n    plt1 = sns.lineplot(x=colname, y=\"mean\", data=df_cate,color=\"r\")\n\n    for tl in ax.get_yticklabels():\n        tl.set_color('r')\n\n    ax2 = ax.twinx()\n    plt2 = sns.barplot(x=colname, y=\"count\", data=df_cate,\n                       ax=ax2,alpha=0.5)\n    ","6634d81b":"compare_cate(df_train_transac,'ProductCD','isFraud')","22d26da8":"compare_cate(df_train_transac,'ProductCD','TransactionAmt')","25e12bf1":"df_product_aveAmt = df_train_transac.groupby(['ProductCD'])['TransactionAmt'].agg(['mean'])\ndf_product_aveAmt.reset_index(inplace=True)\ndf_pdc_Amtratio = pd.merge(df_train_transac[['TransactionID','ProductCD',\n                                             'TransactionAmt','isFraud']],\n                           df_product_aveAmt,on='ProductCD',how='left')\ndf_pdc_Amtratio.head()","63ae26f7":"df_pdc_Amtratio['Amt_ratio'] = df_pdc_Amtratio['TransactionAmt']\/df_pdc_Amtratio['mean']","8f08809e":"compare_cate(df_pdc_Amtratio,'isFraud','Amt_ratio')","f139b91a":"plt.ylim(0, 50)\nsns.scatterplot(x='ProductCD',y='Amt_ratio',data=df_pdc_Amtratio,\n                hue='isFraud',alpha=0.5)","16ab3c78":"compare_cate(df_train_transac,'card4','isFraud')","f83a2c77":"compare_cate(df_train_transac,'card6','isFraud')","8bcddbe3":"check_cunique(df_train_transac,['card1','card2','card3','card5'])","09df078d":"def make_card_id(df):\n    cards_cols= ['card1', 'card2', 'card3', 'card5']\n    for card in cards_cols: \n        if '1' in card: \n            df['card_id']= df[card].map(str)\n        else : \n            df['card_id']+= ' '+df[card].map(str)\n    return df['card_id'] ","65d007f7":"df_train_transac['card_id'] = make_card_id(df_train_transac)","aca711ed":"df_train_transac['card_TAmt_ratio'] = df_train_transac['TransactionAmt']\/df_train_transac.groupby('card_id')['TransactionAmt'].transform('mean')","dc172632":"compare_cate(df_train_transac,'isFraud','card_TAmt_ratio')","ba243130":"feat_value_count(df_train_transac,'P_emaildomain').head()","f3adc3da":"df_train_transac['P_emaildomain_clean'] = df_train_transac['P_emaildomain'].str.split('.',expand=True)[0]\ncompare_cate(df_train_transac,'P_emaildomain_clean','isFraud')","896b77ed":"feat_value_count(df_train_transac,'R_emaildomain').head()","5693b1b2":"df_train_transac['R_emaildomain_clean'] = df_train_transac['R_emaildomain'].str.split('.',expand=True)[0]\ncompare_cate(df_train_transac,'R_emaildomain_clean','isFraud')","64ebf4a6":"compare_cate(df_train_transac,'M1','isFraud')","210c866f":"feat_value_count(df_train_transac,'addr1').head()","8aba68ac":"feat_value_count(df_train_transac,'addr2').head()","8f439187":"compare_cate(df_train_transac,'addr2','isFraud')","12e1102d":"def check_distribution(df,colname):\n    \"\"\"check general feature distribution info and plot histogram\n    \n    Args\n    df: data frame.\n    colname: string. The column name to be evaluated.\n    \n    Returns\n    None\n    \"\"\"\n    print(df[colname].describe())\n    print('Total missing value number: ',df[colname].isnull().sum())\n    plt.figure(figsize=(12,5))\n    sns.distplot(df[colname].dropna())","fbaaba12":"def compare_distribution(df,colname,targetname,targetdict):\n    \"\"\"check column distribution difference of give different target variable\n    in the case of binary classifications.\n    \n    Args\n    df: data frame.\n    colname: string. The column name to be evaluated.\n    targetname: string. The column name of the target variable.\n    targetdict:dict. Vaule and name of each class.\n    \n    Returns\n    None\n    \"\"\"\n    plt.figure(figsize=(12,5))\n    keys = list(targetdict.keys())\n    plt1 = sns.distplot(df[df[targetname] == keys[0]][colname].dropna(), label=targetdict[keys[0]])\n    plt1 = sns.distplot(df[df[targetname] == keys[1]][colname].dropna(), label=targetdict[keys[1]])\n    plt1.legend()\n    plt1.set_title(\"%s Distribution by Target\"%colname, fontsize=20)\n    plt1.set_xlabel(colname, fontsize=18)\n    plt1.set_ylabel(\"Probability\", fontsize=18)","f1e184eb":"check_distribution(df_train_transac,'TransactionAmt')","a9f83ed5":"dict= {1:'Fraud',0:'NoFraud'}\ncompare_distribution(df_train_transac,'TransactionAmt','isFraud',dict)","b2569307":"df_train_transac.groupby(['isFraud'])['TransactionAmt'].agg('describe')","f8f96615":"check_distribution(df_train_transac,'dist1')","08b7bfd9":"compare_distribution(df_train_transac,'dist1','isFraud',dict)","fe7da20d":"df_train_transac.groupby(['isFraud'])['dist1'].agg('describe')","e09f9265":"for i in range(0,14):\n    col = 'C%s'%(i+1)\n    print(df_train_transac.groupby(['isFraud'])[col].agg('describe'))\n    compare_distribution(df_train_transac,col,'isFraud',dict)","79b028ae":"for i in range(0,15):\n    col = 'D%s'%(i+1)\n    print(df_train_transac.groupby(['isFraud'])[col].agg('describe'))\n    compare_distribution(df_train_transac,col,'isFraud',dict)","727fdcd3":"df_train_identity.head()","a50dd17f":"df_colmissing = check_missing(df_train_identity,cols=None,axis=0)\nprint(df_colmissing.head())\ndf_colmissing.describe()","f1faadb9":"sns.distplot(df_colmissing.missing_percent, kde=False, rug=True)","65cc0940":"df_rowmissing = check_missing(df_train_identity,cols=None,axis=1)\nprint(df_rowmissing.head())\ndf_rowmissing.describe()","d449d656":"sns.distplot(df_rowmissing.missing_percent, kde=False, rug=True)","2aadca52":"df_nunique = check_cunique(df_train_identity,df_train_identity.select_dtypes(include=['object']).columns)\ndf_nunique","eb21303e":"df_all = pd.merge(df_train_transac,df_train_identity,on='TransactionID',how='left')","0555457a":"df_all.head()","32fe4db8":"for i in range(12,39):\n    col = 'id_%s'%(i)\n    compare_cate(df_all,col,'isFraud')","22eb7009":"df_all['id_30_system'] = df_all['id_30'].str.split(' ',expand=True)[0]\ncompare_cate(df_all,'id_30_system','isFraud')","51f72f43":"#remove version number\ndf_all['id_31_clean'] = df_all['id_31'].str.replace(\"([0-9\\.])\", \"\")\ndf_all['id_31_clean'][df_all['id_31_clean'].str.contains('chrome', regex=False)==True] = 'chrome'\ndf_all['id_31_clean'][df_all['id_31_clean'].str.contains('Samsung', regex=False)==True] = 'Samsung'\ndf_all['id_31_clean'][df_all['id_31_clean'].str.contains('samsung', regex=False)==True] = 'Samsung'\ndf_all['id_31_clean'][df_all['id_31_clean'].str.contains('firefox', regex=False)==True] = 'firefox'\ndf_all['id_31_clean'][df_all['id_31_clean'].str.contains('safari', regex=False)==True] = 'safari'\ndf_all['id_31_clean'][df_all['id_31_clean'].str.contains('opera', regex=False)==True] = 'opera'\ndf_all['id_31_clean'] = df_all['id_31_clean'].str.replace(\" \", \"\")","f888f7c7":"compare_cate(df_all,'id_31_clean','isFraud')","ceaf78ef":"compare_cate(df_all,'DeviceType','isFraud')","3614e09f":"compare_cate(df_all,'DeviceInfo','isFraud')","aef4772a":"## Check addr1","d42bba58":"## Clean and Check ID_31","54112a88":"## Check feature unique value","aabf318d":"* **Fraud detection issues and challenges**\n\nThe following figure shows distribution of FDS articles\nbased on issues and challenges","473f3a66":"## Check C1~C14","0cde5e89":"## Check ProductCD","98e05ad6":"It looks like that fraud transactions spend more than average.","e8efc5a1":"Obviously this is a imbalanced classification problem. Only 3.5% of data is of target 1.","d08554f2":"## Check M1","9632cda6":"# Load Data","e2b6abe5":"# Explore Transaction Data\nFirst take a closer look on transaction data. Start with the general data missing condition.","97a3ea07":"# Introduction\n\n* **Why We Should Care About Payment Fraud?**\n\nPayment card fraud is a serious and long-term threat to society  with an economic impact forecast to be $416bn in 2017.\n\nBesides financial losses, it has been identified that criminal enterprises and Organised\nCrime Groups (OCGs) use payment card fraud to fund their activities\nincluding arms, drugs and terrorism. The activities of these criminals include violence and murder--individual acts of fraud have a human cost.\n\nFraud is increasing dramatically with the progression of modern technology and global communication. As a result, fighting\nfraud has become an important issue to be explored. As presented in the following figure, the detection and \nprevention mechanisms are used mostly to combat fraud.","335e475c":"Compare to addr1 has more than 300 unique values, addr2 has only 74. Perhaps this indicates nation code and addr1 province? Also notice that 87 has far more counts. More interesting is that some place has 100% fraud rate.","24adc515":"## Check card6","17962e14":"## Check P_emaildomain","fbf3fd3f":"1. Concept Drift\n\nThe detection of fraud is nonstationary as fraud vectors change over\ntime and thus when a fixed FMS is put in place the effectiveness is reduced over time.\n\nThe competion its self also experience concept drift problem as this [discussion](https:\/\/www.kaggle.com\/c\/ieee-fraud-detection\/discussion\/99993#latest-596023) point out.\n\n2. Unbalanced Data\n\nThere is a large class imbalance, so that the Ratio of Genuine to\nFraud (RGF) transactions in real-world transactional datasets\nis high; there are considerably fewer fraud transactions compared to\ngenuine transactions making the problem of classifying them nontrivial. In industry, human\nreviewers tend to mistrust and can ignore alerts and information from\nthe FMS if it generates too many false alarms\n\nI have written a blog about how to deal with imbalanced data [here.](https:\/\/medium.com\/@haataa\/fighting-imbalance-data-set-with-code-examples-f2a3880700a6)\n\n3. Real Time Detection\n\nThe loss due to fraud is incurred at the moment of the transaction\nfor issuers and merchants. Therefore, to be effective, fraud needs to be\ndetected in real-time. A real-time FMS is illustrated in the figure below.","6d972e78":"## Check Device Type","52348914":"It looks like we have outlier values","c4aebe4a":"## Check Missing Value ","4951cf68":"So 'other system' is really suspecious","fe5ea97b":"## Check feature unique value","8ac0f8f4":"## Check TransactionAmt","cd436454":"## Check Device Info","ec833e37":"According to the competition host, card1~card6 are all categorical features. It's a bit odd there are so many unique values of these features.\n\nHowever it would be normal to think that if card1,card2,card3,card5 info are the same it's the same card. So let's make a cardid variable.","a478e77f":"## Clean and Check ID_30","da6391f9":"M1-M9\uff1amatch, such as names on card and address. I think this is quite straight forward. False would lead to high prob of fraud. However in the case of M1,M5,M7, 'F' result in less fraud rate. And I have no idea why M4 is different from the others.","a6830874":"## Check R_emaildomain","5aeb3120":"## Check Missing Value ","de862a9a":"## Check Dist","1d76d6b4":"## Check addr2","1a81028c":"id_30 and id_31 needs futuer investigation","414e76bf":"I have to say that some email address looks pretty strange.","5b7ddde0":"Now some information.\n\n**Credit cards** allow you to purchase items up to your credit limit. You can repay them within the month to avoid interest charges (if there is a grace period), or you can make smaller payments over a longer period of time which will result in interest charges.\n\n**Charge cards** are similar to credit cards in that they allow you to pay for purchases up to your credit limit. Some charge cards do not have a predetermined credit limit and will approve larger purchases on a case-by-case basis. Charge cards require the balance to be paid back in a short period of time, usually within a month.\n\n**Debit cards** are tied to a bank account from which funds are withdrawn for each purchase. Therefore, you will get a debit card from your financial institution where you have a personal or business checking or savings account.","67dada91":"ProductCD: product code, the product for each transaction\n\nFive category of products. And type 'W' is the marjority. \n\nHowever type 'C' has highest fault rate.","430e3ec5":"It looks like that fraud transactions have higher transactionAmt compared to normal product category average. And more obvioius in product c.","d30407a2":"It looks like that protonmail has very high fraud rate.","364eae8f":"# Load Data","20c94fed":"OK, card4 means card type. I have to say that I never head discover card before. \n\nDiscover card fraud rate is higher compared to other three.","6685dc5a":"## Check ID ","6b19df70":"## Check card4","1f0e121c":"purchaser and recipient email domain. Interesting, I think perhaps the final domain like .com\/.jp will provide additional information.\n\nBut first let's forget about .com and .jp.","e2728ab6":"Notice that feature addr1 is also categroical feature. Addr1 has 332 unique values.","c21d7fd2":"* **Credit card fraud detection**\n\nMostly, the strategy of credit card fraud detection is pattern recognition by analyzing user spending behavior automatically.\nCustomer spending behavior contains information about **the\ntransaction amount, time gap since last purchase, day of the week,\nitem category, customer address, etc.** Anomaly based fraud detection is mostly used for credit card fraud detection system in\nwhich the cardholder's profile is made up by analyzing the cardholder spending behavior pattern. In doing so, any incoming\ntransaction that is inconsistent with the cardholder's profile would\nbe considered as suspicious","16f1367b":"* **What is Fraud Detection ?**\n\nFraud detection tries to discover and\nidentify fraudulent activities as they enter the systems and report\nthem to a system administrator\n\n* **Payment card transaction process**\n\nThere are multiple participants that are involved when a cashless\ntransaction takes place(see the picture below).\n","a54b46de":"# Explore Identity Data","cc70862b":"# Check Feature Type","3bce35fc":"Some colunms have very high missing rate.","2aa5bea0":"## Check card1~5","b4c5b2a5":"## Check D1~D15","e3c3862b":"## Check Target Distribution","b6cf47d9":"# Check File Size ","bf96d83f":"* **references**\n\n[Fraud detection system: A survey](https:\/\/son.ir\/wp-content\/uploads\/2018\/10\/02cfc86711083c79d23674505833131e2.pdf)\n\n[How Artificial Intelligence and machine learning research impacts payment card fraud detection: A survey and industry benchmark](https:\/\/www.sciencedirect.com\/science\/article\/abs\/pii\/S0952197618301520#fn1)\n\n[Fraud The Facts 2014](http:\/\/www.theukcardsassociation.org.uk\/wm_documents\/Fraud%20The%20Facts%202014.pdf)\n","8bd755fb":"## Merge Data"}}