{"cell_type":{"77ceb02c":"code","60a295db":"code","fe99c626":"code","89c08472":"code","38aef81d":"code","ea675037":"code","ab323ba3":"code","78a13b8b":"code","c925495e":"code","660d3730":"code","bed2d843":"code","795206bd":"code","4f301d5e":"code","2ad1e0b9":"code","1e993b13":"code","b01c5bb5":"code","b8e4dc43":"code","0099871c":"code","ca4bfc1b":"code","0bdf7801":"code","88577350":"code","7fa5cd69":"code","1a433493":"code","1997b777":"code","19ef8a3d":"markdown","4a3c44db":"markdown","6932a0c0":"markdown","acc9ebfd":"markdown","0c3795ea":"markdown","bf692f95":"markdown","5c2145d8":"markdown","aa59cf2e":"markdown","2c5e5764":"markdown","bc51ba58":"markdown"},"source":{"77ceb02c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","60a295db":"import numpy as np\nimport pandas as pd \nimport os\nimport pathlib\nimport PIL\nfrom pathlib import Path\nfrom PIL import Image, ImageDraw\nfrom math import sqrt\nimport ast\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\n\nimport warnings\nwarnings.filterwarnings('ignore')","fe99c626":"train = pd.read_csv(\"..\/input\/tensorflow-great-barrier-reef\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tensorflow-great-barrier-reef\/test.csv\")\nsub = pd.read_csv(\"..\/input\/tensorflow-great-barrier-reef\/example_sample_submission.csv\")\n\npath = Path('..\/input\/tensorflow-great-barrier-reef\/train_images')\nfilepaths = list(path.glob(r'**\/*.jpg'))","89c08472":"# checking the train test lengths\nprint(\"Number of training samples: \", len(train))\nprint(\"Number of testing samples: \", len(test))","38aef81d":"train.head(150)","ea675037":"# lets see how many frames with no starfishes\ntrain_clean = train.loc[train[\"annotations\"] != \"[]\"]\nprint(f\"No starfishes in {len(train)-len(train_clean)} samples.\")\nprint(f\"The clean train set has {len(train_clean)} images for us to work with.\")","ab323ba3":"train_clean.head()","78a13b8b":"# Checking out the number of sequences\nlen(train_clean.sequence.value_counts())","c925495e":"# rows per each sequence\nprint(\"Sequence Samples\")\nprint(train_clean.sequence.value_counts())","660d3730":"seq_df = train_clean.sequence.value_counts().to_frame()\nplt.figure(figsize=(16, 9))\nsns.barplot(x=seq_df.index, y=list(seq_df.sequence), palette=\"Greens_d\")\nplt.title(\"Distribution of Sequences\")\nplt.xlabel(\"Sequence Id\")\nplt.ylabel(\"Frequency\")\nplt.show()","bed2d843":"num_boxes = []\nannotations_clean = []\nfor elem in train_clean.annotations:\n    ann = ast.literal_eval(elem)\n    num_boxes.append(len(ann))\n    annotations_clean.append(ann)","795206bd":"# adding num boxes per row and changing the annotations column to a proper python parseable list of dictionaries\ntrain_clean[\"num_boxes\"] = num_boxes\ntrain_clean[\"annotations\"] = annotations_clean","4f301d5e":"train_clean.head()","2ad1e0b9":"print(\"#box Frequency\")\nprint(train_clean.num_boxes.value_counts())","1e993b13":"# number of bounding boxes in the clean train datasets\nprint(f\"Number of Bounding Boxes in the dataset: {train_clean.num_boxes.sum()}\")","b01c5bb5":"box_count = train_clean.num_boxes.value_counts().to_frame()","b8e4dc43":"plt.figure(figsize=(16, 9))\nsns.barplot(x=box_count.index, y=list(box_count.num_boxes), palette=\"Greens_d\")\nplt.title(\"Distribution of Num_boxes\")\nplt.xlabel(\"# of Boxes\")\nplt.ylabel(\"Frequency\")\nplt.show()","0099871c":"#structure of a annotation\nlist(train_clean[\"annotations\"])[0]","ca4bfc1b":"# generating paths for input images\nsrc = '..\/input\/tensorflow-great-barrier-reef\/train_images'\npaths = []\nfor row in train_clean.image_id:\n    vid_num = row.split('-')[0]\n    img_num = row.split('-')[1]\n    paths.append(os.path.join(src,f'video_{vid_num}',img_num+'.jpg'))","0bdf7801":"train_clean['paths'] = paths","88577350":"# classic way of iterating through and drawing the bounding boxes on an image\ndef vis_boxes(img_path, bboxes):\n    coords = []\n    for box in bboxes:\n        x1 = box['x']\n        y1 = box['y']\n        x2 = x1 + box['width']\n        y2 = y1 + box['height']\n        coords.append([x1, y1, x2, y2])\n        \n    img = Image.open(img_path)\n    img1 = img.copy()\n    draw = ImageDraw.Draw(img1)\n    for elem in coords:\n        draw.rectangle(elem, outline='red', width=7)\n    \n    return img1","7fa5cd69":"train_clean.head()","1a433493":"# number of bounding boxes per each sequence\ntrain_clean.groupby('sequence').num_boxes.sum().to_frame()","1997b777":"# lets plot a few\n# some inspiration from https:\/\/www.kaggle.com\/sjyangkevin\/eda-bounding-box-analysis-annotated-videos\n\nplt.figure(figsize=(16, 9))\nn_images = 9\ncount = 0\nr,c = int(sqrt(n_images)), int(sqrt(n_images))\ntrain_plot = train_clean.sample(n = n_images)\n\nfor _, row in train_plot.iterrows():\n    img_path = row['paths']\n    bboxes = row['annotations']\n    plt.subplot(r, c, count + 1)\n    img_out = vis_boxes(img_path, bboxes)\n    plt.imshow(img_out)\n    count+=1\n\nplt.show()\nplt.tight_layout()","19ef8a3d":"##\u6d77\u661f\u7684\u6570\u91cf","4a3c44db":"##\u8bad\u7ec3","6932a0c0":"#\u5bfc\u5165\u548c\u6a21\u5757","acc9ebfd":"##\u770b\u4e00\u4e9b\u4f8b\u5b50","0c3795ea":"##\u89c2\u5bdf\u6d77\u661f","bf692f95":"##\u5177\u6709\u6700\u5927\u8fb9\u754c\u6846\u7684\u5e8f\u5217","5c2145d8":"\u770b\u8d77\u676557%\u7684\u6570\u636e\u70b9\u53ea\u6709\u4e00\u4e2a\u8fb9\u754c\u6846\uff0c\u5176\u6b21\u662f19.1%\u7684\u6570\u636e\u70b9\u6709\u4e24\u4e2a\u8fb9\u754c\u6846","aa59cf2e":"##\u8fb9\u754c\u6846\u6570\u7684\u5206\u5e03","2c5e5764":"#\u770b\u8d77\u6765\u5f88\u591a\u955c\u6846\u90fd\u6ca1\u6709\u6211\u4eec\u7684\u6d77\u661f","bc51ba58":"##\u5e8f\u5217\u5206\u5e03"}}