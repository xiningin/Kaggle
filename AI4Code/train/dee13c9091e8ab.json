{"cell_type":{"15fdfed2":"code","8bb6d399":"code","bf66ff50":"code","8266f019":"code","938a7f01":"code","c1a0bb13":"code","e3694d8f":"code","45a91729":"code","4c1edd5a":"code","4f9862c6":"code","ba8f6558":"code","4a95821d":"code","53c37f9d":"markdown","6bab7324":"markdown","cb2e108e":"markdown"},"source":{"15fdfed2":"import numpy as np \nimport pandas as pd \nimport torchvision\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom PIL import Image\nimport os\nfrom functools import reduce","8bb6d399":"test_df = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/test.csv')\nsubmission_df = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/sample_submission.csv')","bf66ff50":"class TestDataset(torch.utils.data.Dataset):\n\n    def __init__(self, test_images, image_ids, transforms=None):\n        super(TestDataset, self).__init__()\n        self.image_ids = image_ids\n        self.test_images = test_images\n        self.transforms = transforms\n\n    def __getitem__(self, index):\n        image_id = self.image_ids.iloc[index]\n        img_array = np.zeros((137, 236, 3), dtype='uint8')\n        img_array[:, :, 0] = self.test_images[index].reshape(137, 236)\n        img_array[:, :, 1] = img_array[:, :, 0]\n        img_array[:, :, 2] = img_array[:, :, 0]\n        img = Image.fromarray(img_array)\n        if self.transforms:\n            img = self.transforms(img)\n\n        return img\n\n    def __len__(self,):\n        return len(self.image_ids)","8266f019":"class GraphemeModel(nn.Module):\n\n    def __init__(self):\n        super(GraphemeModel, self).__init__()\n        self.base_model = torchvision.models.resnet18(pretrained=False) # use resnet18 as the base model\n#         self.fc = nn.Linear(1000, 256) \n        self.fc_root = nn.Linear(1000, 168)\n        self.fc_vowel = nn.Linear(1000, 11)\n        self.fc_consonant = nn.Linear(1000, 7)\n        \n    def forward(self, inp):\n        x = self.base_model(inp)\n        x = x.view(x.shape[0], -1)\n#         x = F.relu(self.fc(x))\n        root_output = self.fc_root(x)\n        vowel_output = self.fc_vowel(x)\n        consonant_output = self.fc_consonant(x)\n\n        return (root_output, vowel_output, consonant_output)","938a7f01":"model = torch.load('\/kaggle\/input\/bengaligraphememodel3\/model.pth')","c1a0bb13":"device = 'cuda:0' if torch.cuda.is_available() else 'cpu'","e3694d8f":"model = model.to(device)","45a91729":"transforms = torchvision.transforms.Compose([\n                              torchvision.transforms.ToTensor(),\n                              torchvision.transforms.Normalize((0, 0, 0), (1., 1., 1.))                \n            ])","4c1edd5a":"model.eval()\npredictions = []\n\nfor i in range(4):\n    test_image_data = pd.read_parquet(f'\/kaggle\/input\/bengaliai-cv19\/test_image_data_{i}.parquet') # read ith test parquet file\n    test_matrix = test_image_data.drop(columns=['image_id']).values\n    image_ids = test_image_data.image_id\n    test_dataset = TestDataset(test_images=test_matrix, image_ids=image_ids, transforms=transforms)\n    test_dataloader = torch.utils.data.DataLoader(dataset=test_dataset, batch_size=128, shuffle=False)\n    for x in test_dataloader:\n        root, vowel, consonant = model(x.to(device)) # get prediction for the batch\n        root = root.argmax(1).detach().cpu().numpy() # convert to numpy\n        vowel = vowel.argmax(1).detach().cpu().numpy()\n        consonant = consonant.argmax(1).detach().cpu().numpy()\n        predictions += list(reduce(lambda a, b: a + b, zip(consonant, root, vowel)))\n    ","4f9862c6":"submission_df['target'] = predictions","ba8f6558":"submission_df.head()","4a95821d":"submission_df.to_csv('submission.csv', index=False)","53c37f9d":"Save the dataframe to submission.csv file","6bab7324":"Attach predictions to the dataframe","cb2e108e":"Perform predictions"}}