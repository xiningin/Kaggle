{"cell_type":{"30754167":"code","f2d77607":"code","7572ccdd":"code","6cac4698":"code","eb386aa2":"code","63bfa062":"code","0fda77c1":"code","d034e398":"code","aee8a618":"code","d3b6e549":"code","63ba3086":"code","b8d15cff":"code","28a3da1a":"code","d9588d7f":"code","c3ac08b6":"code","45622bcc":"code","ae34f2db":"code","7137285b":"code","5b6949a0":"code","17d068ef":"code","7a8ca1f9":"code","8e107552":"code","4a9af136":"code","781abca4":"code","5c3f0ba8":"code","ad4efa1b":"code","360bb84c":"code","fe78f280":"code","84d1d47e":"code","3cc0ce47":"code","9d8684ac":"code","d57e7ed6":"code","3693e408":"code","37d4d71d":"code","ccb577ed":"code","a6f1b504":"code","ded04fd5":"code","68ed5690":"code","50551472":"code","d5b9d077":"code","80de9174":"code","fbb40a6d":"code","68ac3581":"code","1b1d157a":"code","81c5f104":"code","84782615":"markdown","50cc4996":"markdown","13e2d19b":"markdown","a20b3797":"markdown"},"source":{"30754167":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f2d77607":"# Carregando os dados\ndf = pd.read_csv('\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\n\ndf.shape","7572ccdd":"# Olhando os dados\ndf.head().T","6cac4698":"# Olhando os dados aleatoriamente\ndf.sample(5).T","eb386aa2":"# Verificando os tipos dos dados e os tamanhos\ndf.info()","63bfa062":"# Convertendo a coluna TotalCharges para float\n#df['TotalCharges'] = df['TotalCharges'].astype(float)","0fda77c1":"# Vamos identificar os valores em branco na coluna TotalCharges\ndf[df['TotalCharges'].str.contains(' ')]","d034e398":"# Para corrigir o TotalCharges vamos trocar o espa\u00e7o em branco\n# pelo valor ZERO e for\u00e7ar novamente a convers\u00e3o\ndf['TotalCharges'] = df['TotalCharges'].str.replace(' ', '0').astype(float)\n\n# df['TotalCharges'] = df['TotalCharges'].str.strip().replace('', '0').astype(float)","aee8a618":"# Verificando novamente os tipos de dados\ndf.info()","d3b6e549":"# Copiando o dataframe\ndf2 = df.copy()","63ba3086":"# Criando variaveis dummy para gender\npd.get_dummies(df['gender'])","b8d15cff":"# Dummy da coluna PaymentMethod\npd.get_dummies(df['PaymentMethod'])","28a3da1a":"# Criando dummys para todas as colunas\ndf = pd.get_dummies(df, columns=['gender', 'Partner', 'Dependents',\n                                'PhoneService', 'MultipleLines',\n                                'InternetService', 'OnlineSecurity',\n                                'OnlineBackup', 'DeviceProtection',\n                                'TechSupport', 'StreamingTV',\n                                'StreamingMovies', 'Contract',\n                                'PaperlessBilling', 'PaymentMethod'])","d9588d7f":"df.shape","c3ac08b6":"# olhando os dados\ndf.head().T","45622bcc":"# Vrificando novamente os tipos dos dados\ndf.info()","ae34f2db":"# Treinamento do modelo\n\n# Separando o dataframe\n\n# Importando o train_test_split\nfrom sklearn.model_selection import train_test_split\n\n# Separando treino e teste\ntrain, test = train_test_split(df, test_size=0.20, random_state=42)\n\n# Separando treino e valida\u00e7\u00e3o\ntrain, valid = train_test_split(train, test_size=0.20, random_state=42)\n\ntrain.shape, valid.shape, test.shape","7137285b":"# definindo colunas de entrada\nfeats = [c for c in df.columns if c not in ['customerID', 'Churn']]\n\nfeats","5b6949a0":"# treinar o modelo\n\n# Importando o modelo\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Instanciar o modelo\nrf = RandomForestClassifier(n_estimators=200, random_state=42, n_jobs=-1)","17d068ef":"# treinar o modelo\nrf.fit(train[feats], train['Churn'])","7a8ca1f9":"# Prevendo os dados de valida\u00e7\u00e3o\npreds_val = rf.predict(valid[feats])\n\npreds_val","8e107552":"# Avaliando o desempenho do modelo\n\n# Importando a metrica\nfrom sklearn.metrics import accuracy_score","4a9af136":"# Acur\u00e1cia das previs\u00f5es de valida\u00e7\u00e3o\naccuracy_score(valid['Churn'], preds_val)","781abca4":"# Medindo a acur\u00e1cia nos dados de teste\npreds_test = rf.predict(test[feats])\n\naccuracy_score(test['Churn'], preds_test)","5c3f0ba8":"# Olhando a coluna Churn do dataframe completo\ndf['Churn'].value_counts(normalize=True)","ad4efa1b":"# Olhando a coluna Churn do dataframe completo\ndf['Churn'].value_counts()","360bb84c":"# Qtde de classes da coluna  Churn na base de treino\ntrain['Churn'].value_counts()","fe78f280":"# % de classes da coluna  Churn na base de treino\ntrain['Churn'].value_counts(normalize=True)","84d1d47e":"df2.info()","3cc0ce47":"# Tipo category no pandas\ndf2['gender'].astype('category').cat.categories","9d8684ac":"df2['gender'].astype('category').cat.codes","d57e7ed6":"df2['PaymentMethod'].astype('category').cat.codes","3693e408":"df2['PaymentMethod'].astype('category').cat.categories","37d4d71d":"# Convertendo as colunas categ\u00f3rias em colunas num\u00e9ricas\nfor col in df2.columns:\n    if df2[col].dtype == 'object':\n        df2[col] = df2[col].astype('category').cat.codes","ccb577ed":"# Verificando novamente os tipos\ndf2.info()","a6f1b504":"# Separando o dataframe em train, valid e test\n\n# Primeiro, train e test\ntrain, test = train_test_split(df2, test_size=0.2, random_state=42)\n\n# Depois, train e valid\ntrain, valid = train_test_split(train, test_size=0.2, random_state=42)\n\ntrain.shape, valid.shape, test.shape","ded04fd5":"# Colunas a serem usadas para treino\nfeats2 = [c for c in df2.columns if c not in ['customerID', 'Churn']]","68ed5690":"# Instanciando o modelo\nrf2 = RandomForestClassifier(n_estimators=200, random_state=42, n_jobs=-1)\n\n# Treinando o modelo\nrf2.fit(train[feats2], train['Churn'])","50551472":"# previs\u00f5es para os dados de valida\u00e7\u00e3o\npreds_val = rf2.predict(valid[feats2])\n\n# Verificando a acur\u00e1cia\naccuracy_score(valid['Churn'], preds_val)","d5b9d077":"# Previs\u00f5es para os dados de teste\npreds_test = rf2.predict(test[feats2])\n\n# Verificando a acur\u00e1cia\naccuracy_score(test['Churn'], preds_test)","80de9174":"# Avaliando a importancia de cada coluna (cada vari\u00e1vel de entrada)\npd.Series(rf2.feature_importances_, index=feats2).sort_values().plot.barh()","fbb40a6d":"# Avaliando a importancia de cada coluna no RF1 (cada vari\u00e1vel de entrada)\npd.Series(rf.feature_importances_, index=feats).sort_values().plot.barh()","68ac3581":"# importando a bilbioteca para plotar o gr\u00e1fico de Matriz de Confus\u00e3o\nimport scikitplot as skplt","1b1d157a":"# Matriz de Confus\u00e3o - Dados de Valida\u00e7\u00e3o\nskplt.metrics.plot_confusion_matrix(valid['Churn'], preds_val)","81c5f104":"# Matriz de Confus\u00e3o - Dados de Teste\nskplt.metrics.plot_confusion_matrix(test['Churn'], preds_test)","84782615":"# Nova estrat\u00e9gia de transformar vari\u00e1veis categ\u00f3ricas","50cc4996":"## Avaliando a import\u00e2ncia das colunas","13e2d19b":"## Criando uma Matriz de Confus\u00e3o","a20b3797":"# IESB - Miner II - Aula 04 - Random Forest"}}