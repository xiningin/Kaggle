{"cell_type":{"55b46aa5":"code","0f4247a7":"code","4c8df5c9":"code","74afa427":"code","29b82f97":"code","906b0610":"code","4454a52f":"code","7d511678":"markdown","d16baf51":"markdown","a78816d6":"markdown","468cca7b":"markdown","e4e1c473":"markdown"},"source":{"55b46aa5":"from keras.layers import Input, Dense, Reshape, Flatten, Dropout\nfrom keras.layers import BatchNormalization\nfrom keras.layers.advanced_activations import LeakyReLU\nfrom keras.layers.convolutional import UpSampling2D, Conv2D\nfrom keras.models import Sequential, Model\n\nimport matplotlib.pyplot as plt\n\nimport sys\n\nimport numpy as np\n\nimport os\n\nfrom PIL import Image","0f4247a7":"os.listdir('..\/input\/cats-faces-64x64-for-generative-models\/')","4c8df5c9":"data = []\npaths = []\nfor r, d, f in os.walk(r'..\/input\/cats-faces-64x64-for-generative-models\/cats'):\n    for file in f:\n        if '.jpg' in file:\n            paths.append(os.path.join(r, file))\n\nfor path in paths:\n    img = Image.open(path)\n    x = np.array(img)\n    data.append(x)\n\nx_train = np.array(data)\nx_train = x_train.reshape(len(data),64,64,3)","74afa427":"class DCGAN():\n    def __init__(self):\n        # Input shape\n        self.img_rows = 64\n        self.img_cols = 64\n        self.channels = 3\n        self.img_shape = (self.img_rows, self.img_cols, self.channels)\n        self.latent_dim = 150\n\n        # Build and compile the discriminator\n        self.discriminator = self.build_discriminator()\n        self.discriminator.compile(loss='binary_crossentropy',\n            optimizer='Adamax',\n            metrics=['accuracy'])\n\n        # Build the generator\n        self.generator = self.build_generator()\n        generator = self.generator\n\n        # The generator takes noise as input and generates imgs\n        z = Input(shape=(self.latent_dim,))\n        img = self.generator(z)\n\n        # For the combined model we will only train the generator\n        self.discriminator.trainable = False\n\n        # The discriminator takes generated images as input and determines validity\n        valid = self.discriminator(img)\n\n        # The combined model  (stacked generator and discriminator)\n        # Trains the generator to fool the discriminator\n        self.combined = Model(z, valid)\n        self.combined.compile(loss='binary_crossentropy', optimizer='Adamax')\n\n    def build_generator(self):\n\n        model = Sequential()\n        model.add(Dense(150 * 4 * 4, input_dim=self.latent_dim))\n        model.add(Reshape((4, 4, 150)))\n        model.add(UpSampling2D())\n        model.add(Conv2D(150, kernel_size=(3,3), padding=\"same\"))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(UpSampling2D())\n        model.add(Conv2D(150, kernel_size=(2,2), padding=\"same\"))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(UpSampling2D())\n        model.add(Conv2D(150, kernel_size=(2,2), padding=\"same\"))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(UpSampling2D())\n        model.add(Conv2D(150, kernel_size=(2,2), padding=\"same\"))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Conv2D(150, kernel_size=(2,2), padding=\"same\"))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Conv2D(150, kernel_size=(2,2), padding=\"same\"))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Conv2D(3, kernel_size=(2,2), padding=\"same\"))\n        model.add(LeakyReLU(alpha=0.2))\n        model.summary()\n\n        noise = Input(shape=(self.latent_dim,))\n        img = model(noise)\n\n        return Model(noise, img)\n\n    def build_discriminator(self):\n\n        model = Sequential()\n\n        model.add(Conv2D(100, kernel_size=3, strides=2, input_shape=self.img_shape, padding=\"same\"))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Dropout(0.5))\n        model.add(Conv2D(100, kernel_size=3, strides=2, padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Dropout(0.5))\n        model.add(Conv2D(100, kernel_size=3, strides=2, padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Dropout(0.5))\n        model.add(Conv2D(100, kernel_size=3, strides=1, padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Dropout(0.5))\n        model.add(Flatten())\n        model.add(Dense(1, activation='sigmoid'))\n\n        model.summary()\n\n        img = Input(shape=self.img_shape)\n        validity = model(img)\n\n        return Model(img, validity)\n    \n\n    def train(self, epochs, batch_size=128, save_interval=50):\n\n        # Load the dataset\n        X_train = x_train\n\n        # Normalize data to 0-1\n        X_train = X_train \/ 255\n\n        # Adversarial ground truths\n        valid = np.ones((batch_size, 1))\n        fake = np.zeros((batch_size, 1))\n        \n        g_loss_epochs = np.zeros((epochs, 1))\n        d_loss_epochs = np.zeros((epochs, 1))\n\n        for epoch in range(epochs):\n\n            # ---------------------\n            #  Train Discriminator\n            # ---------------------\n\n            # Select a random half of images\n            idx = np.random.randint(0, X_train.shape[0], batch_size)\n            imgs = X_train[idx]\n\n            # Sample noise and generate a batch of new images\n            noise = np.random.normal(0, 1, (batch_size, self.latent_dim))\n            gen_imgs = self.generator.predict(noise)\n\n            # Train the discriminator (real classified as ones and generated as zeros)\n            d_loss_real = self.discriminator.train_on_batch(imgs, valid)\n            d_loss_fake = self.discriminator.train_on_batch(gen_imgs, fake)\n            d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)\n\n            # ---------------------\n            #  Train Generator\n            # ---------------------\n\n            # Train the generator (wants discriminator to mistake images as real)\n            g_loss = self.combined.train_on_batch(noise, valid)\n            \n            #save loss history\n            g_loss_epochs[epoch] = g_loss\n            d_loss_epochs[epoch] = d_loss[0]\n\n            # Plot the progress\n            print (\"%d [D loss: %f, acc.: %.2f%%] [G loss: %f]\" % (epoch, d_loss[0], 100*d_loss[1], g_loss))\n\n            # If at save interval => save generated image samples\n            if epoch % save_interval == 0:\n                self.save()\n                \n        return g_loss_epochs, d_loss_epochs\n\n    def save(self):\n        self.generator.save(\"generator.h5\")","29b82f97":"dcgan = DCGAN()","906b0610":"#not training full 50,000 epochs on here\ng_loss, d_loss = dcgan.train(epochs=1000, batch_size=100, save_interval=100)","4454a52f":"plt.plot(g_loss)\nplt.plot(d_loss)\nplt.title('GAN Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Generator', 'Discriminator'], loc='upper left')\nplt.show()","7d511678":"# Deep Convolutional GAN","d16baf51":"# Data Preprocessing","a78816d6":"# Model Architecture","468cca7b":"# Training\nTrained Locally for 50,000 Epochs\n![Training](https:\/\/i.imgur.com\/LtRQ22n.png)\n# Results\n![gif](https:\/\/raw.githubusercontent.com\/vee-upatising\/Cat-GAN\/master\/result2.gif)\n![gif](https:\/\/raw.githubusercontent.com\/vee-upatising\/Cat-GAN\/master\/result3.gif)\n![gif](https:\/\/raw.githubusercontent.com\/vee-upatising\/Cat-GAN\/master\/result4.gif)","e4e1c473":"# Partial Training"}}