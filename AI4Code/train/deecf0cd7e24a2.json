{"cell_type":{"232683d1":"code","497d1b14":"code","263282f2":"code","77f91643":"code","fb11c2a1":"code","3e8f53e9":"code","e59580d8":"code","d2ce386e":"code","bfcdd6ce":"code","edc00e92":"code","2597589e":"code","0861ce91":"code","f5aa8ef6":"code","ae8f4544":"code","9b7acce5":"code","8f0b4e00":"code","b45f697d":"code","366e7789":"code","0ca8c7ac":"code","20a86a79":"code","60e7e057":"code","13728bad":"code","52a7846d":"code","dd3330ea":"code","e59abef3":"code","1ae58bce":"code","c6f67c91":"code","29eac142":"code","fd53972e":"code","55f21b73":"code","09294ca2":"code","bd8aa6f8":"code","c5fc8dfd":"code","1ba9249a":"markdown","02856ff7":"markdown","1593585e":"markdown","870b6efe":"markdown","c40608be":"markdown","b5130528":"markdown","1bff1dee":"markdown","0dc529bc":"markdown","71eea51d":"markdown","185d3f61":"markdown","b4bab12b":"markdown","1e8a661e":"markdown"},"source":{"232683d1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as plt\nimport seaborn as sns\nimport tensorflow as tf\n\n# Input data files are available in the \"..\/input\/\" directory.\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","497d1b14":"df = pd.read_csv('..\/input\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","263282f2":"df.head()","77f91643":"df.info()","fb11c2a1":"df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')","3e8f53e9":"df['SeniorCitizen'].unique()","e59580d8":"df['SeniorCitizen'] = df['SeniorCitizen'].apply(lambda x: 'Yes' if x == 1 else 'No')","d2ce386e":"df['SeniorCitizen'].unique()","bfcdd6ce":"df['TotalCharges'].isnull().sum()","edc00e92":"df['TotalCharges'].fillna(value=df['tenure'] * df['MonthlyCharges'], inplace=True)","2597589e":"def churn_to_numeric(value):\n    if value.lower() == 'yes':\n        return 1\n    return 0","0861ce91":"df['Churn'] = df['Churn'].apply(churn_to_numeric)","f5aa8ef6":"df.describe()","ae8f4544":"df.info()","9b7acce5":"X = df.drop(['customerID', 'Churn'], axis=1)\ny = df['Churn']","8f0b4e00":"from sklearn.model_selection import train_test_split","b45f697d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","366e7789":"tenure = tf.feature_column.numeric_column('tenure')\nmonthly_charges = tf.feature_column.numeric_column('MonthlyCharges')\ntotal_charges = tf.feature_column.numeric_column('TotalCharges')","0ca8c7ac":"col_unique_val_counts = []\ncat_columns = []\nfor col in X.columns:\n    if X[col].dtype.name != 'object':\n        continue\n    unique_vals = X[col].unique()\n    col_unique_val_counts.append(len(unique_vals))\n    cat_columns.append(col)\n    print(col, \"->\",unique_vals)","20a86a79":"cat_cols = [tf.feature_column.categorical_column_with_hash_bucket(col, hash_bucket_size=size) \n            for col, size in zip(cat_columns, col_unique_val_counts)]","60e7e057":"num_cols = [tenure, monthly_charges, total_charges]\nfeature_columns = num_cols + cat_cols","13728bad":"n_classes = 2 # churn Yes or No\nbatch_size = 100","52a7846d":"input_func = tf.estimator.inputs.pandas_input_fn(x=X_train, y=y_train, batch_size=batch_size,num_epochs=1000, shuffle=True)","dd3330ea":"linear_model= tf.estimator.LinearClassifier(feature_columns=feature_columns, n_classes=n_classes)","e59abef3":"linear_model.train(input_fn=input_func, steps=10000) # uinsg 10k steps","1ae58bce":"eval_input_func = tf.estimator.inputs.pandas_input_fn(\n      x=X_test,\n      y=y_test,\n      batch_size=batch_size,\n      num_epochs=1,\n      shuffle=False)","c6f67c91":"linear_model.evaluate(eval_input_func)","29eac142":"pred_input_func = tf.estimator.inputs.pandas_input_fn(\n      x=X_test,\n      batch_size=batch_size,\n      num_epochs=1,\n      shuffle=False)","fd53972e":"preds = linear_model.predict(pred_input_func)","55f21b73":"predictions = [p['class_ids'][0] for p in preds]","09294ca2":"from sklearn.metrics import classification_report","bd8aa6f8":"target_names = ['No', 'Yes']","c5fc8dfd":"print(classification_report(y_test, predictions, target_names=target_names))","1ba9249a":"## Predictions","02856ff7":"### feature extraction - numerical","1593585e":"### Linear Classifier model\u00b6\nWe are making use of TensorFlow because we are going to use Neural Networks to classify churn..\n\n","870b6efe":"#### model evaluation","c40608be":"#### making predictions","b5130528":"`SeniorCitizen` should be a qualitative column and not numeric, hence converting it into a object type","1bff1dee":"convert churn class to numeric","0dc529bc":"## Cleaning data","71eea51d":"fill null values","185d3f61":"It's all good now","b4bab12b":"`TotalCharges` - the total amount charged to the customer should be numeric","1e8a661e":"### feature extraction - categorical"}}