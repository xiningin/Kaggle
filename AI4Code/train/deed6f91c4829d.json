{"cell_type":{"d66927e4":"code","7f64850c":"code","2358a64f":"code","9322bbcd":"code","a5183dc4":"code","779501ff":"code","00113d7e":"code","b1eaa0b8":"code","9ff45992":"code","b4fbcab8":"code","2c101022":"code","96e1c6a1":"code","c0a626e3":"code","43b2bd9e":"code","b0e71efb":"code","37bd7f3b":"code","845c55ca":"code","fb9000d6":"code","7a10ac6a":"code","a9ca272a":"code","ebe8bd00":"code","3925622c":"code","b43f1a8b":"markdown","c06a818f":"markdown","be70c037":"markdown","47d45c9c":"markdown","10eff78e":"markdown","2a1c1719":"markdown","e04b5e3b":"markdown","7aa390d3":"markdown","43ff23e2":"markdown","b99a8f88":"markdown"},"source":{"d66927e4":"!pip install -q efficientnet","7f64850c":"import os\nimport re\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport math\n\nfrom matplotlib import pyplot as plt\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nimport tensorflow.keras.layers as L\nimport efficientnet.tfkeras as efn\n\nfrom kaggle_datasets import KaggleDatasets","2358a64f":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu= None\n    \nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n    \nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","9322bbcd":"# To enable parallel streaming\nAUTO = tf.data.experimental.AUTOTUNE\n\n# Get GCS path for this dataset\nGCS_PATH = KaggleDatasets().get_gcs_path('siim-isic-melanoma-classification')\n\n# Configuration\nEPOCHS = 12\nBATCH_SIZE = 8 * strategy.num_replicas_in_sync  ## 8*8 (Num of replicas\/cores)\nIMAGE_SIZE = [1024, 1024]\n","a5183dc4":"def append_path(pre):\n    return np.vectorize(lambda file: os.path.join(GCS_DS_PATH, pre, file))\n","779501ff":"sub = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/sample_submission.csv')","00113d7e":"train = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')","b1eaa0b8":"# Distribution of target\nsns.countplot(train['target'])","9ff45992":"TRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/tfrecords\/train*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/tfrecords\/test*.tfrec')\n\nCLASSES = [0,1]","b4fbcab8":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"target\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    \n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['target'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"image_name\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n    }\n    \n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['image_name']\n    return image, idnum # returns a dataset of image(s)","2c101022":"def load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n    \n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n    \n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    \n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef data_augment(image, label):\n    # data augmentation. Thanks to the dataset.prefetch(AUTO) statement in the next function (below),\n    \n    image = tf.image.random_flip_left_right(image)\n    return image, label  \n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES,labeled=False,ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset","96e1c6a1":"def count_data_items(filenames):\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\n\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nprint('Dataset: {} training images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES, NUM_TEST_IMAGES))","c0a626e3":"# Keep reducing learning rate as model gets more trained\n\ndef build_lrfn(lr_start=0.00001, lr_max=0.0001, \n               lr_min=0.000001, lr_rampup_epochs=20, \n               lr_sustain_epochs=0, lr_exp_decay=.8):\n    lr_max = lr_max * strategy.num_replicas_in_sync\n    \n    def lrfn(epoch):\n        if epoch < lr_rampup_epochs:\n            lr = (lr_max - lr_start) \/ lr_rampup_epochs * epoch + lr_start\n        elif epoch < lr_rampup_epochs + lr_sustain_epochs:\n            lr = lr_max\n        else:\n            lr = (lr_max - lr_min) * lr_exp_decay**(epoch - lr_rampup_epochs - lr_sustain_epochs) + lr_min\n        return lr\n    \n    return lrfn","43b2bd9e":"with strategy.scope():\n    model = tf.keras.Sequential([\n        efn.EfficientNetB7(\n            input_shape = (*IMAGE_SIZE, 3),\n            weights='imagenet',\n            include_top = False\n        ),\n        L.GlobalAveragePooling2D(),\n        L.Dense(1024,activation='relu'),\n        L.Dropout(0.3),\n        L.Dense(512,activation='relu'),\n        L.Dropout(0.2),\n        L.Dense(256,activation='relu'),\n        L.Dropout(0.2),\n        L.Dense(128,activation='relu'),\n        L.Dropout(0.1),\n        L.Dense(1, activation='sigmoid')\n    ])\n    \nmodel.compile(\n    optimizer = 'adam',\n    loss = tf.keras.losses.BinaryCrossentropy(label_smoothing=0.1),\n    metrics = ['binary_crossentropy']\n)\n\nmodel.summary()","b0e71efb":"lrfn = build_lrfn()\nlr_schedule = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=1)\n\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE","37bd7f3b":"history = model.fit(\n    get_training_dataset(),\n    epochs=6,\n    callbacks=[lr_schedule],\n    steps_per_epoch= STEPS_PER_EPOCH\n    \n)","845c55ca":"model.save('efficientnetb7.h5')","fb9000d6":"test_ds = get_test_dataset(ordered=True)\n\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = model.predict(test_images_ds)","7a10ac6a":"print('Generating submission.csv file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch","a9ca272a":"pred_df = pd.DataFrame({'image_name': test_ids, 'target': np.concatenate(probabilities)})\npred_df.head()","ebe8bd00":"sub.head()","3925622c":"del sub['target']\nsub = sub.merge(pred_df, on='image_name')\n#sub.to_csv('submission_label_smoothing.csv', index=False)\nsub.to_csv('submission_b7.csv', index=False)\nsub.head()","b43f1a8b":"# 2. Preprocessing For Running Model on TPU","c06a818f":"# 4. Model Fitting","be70c037":"**Importing all required libraries**","47d45c9c":"**Function to use variable learning rate**","10eff78e":"Prepating to read data for TPUs","2a1c1719":"# 3. Model Creation","e04b5e3b":"**Reference**\n\nhttps:\/\/www.kaggle.com\/niteshx2\/melanoma-beginner-tpu-efficientnet\/notebook","7aa390d3":"**Using TPU**","43ff23e2":"# 1. Installing EfficientNet","b99a8f88":"Difference Functions for TPU read"}}