{"cell_type":{"18bfb186":"code","602c212e":"code","d6f9cc76":"code","80067d76":"code","870bbb27":"markdown","61a9d0b5":"markdown","bacf916b":"markdown","820d69f1":"markdown"},"source":{"18bfb186":"import pandas as pd\nimport os\nfrom pathlib import Path\nimport spacy\nfrom spacy import displacy","602c212e":"path = Path('..\/input\/feedback-prize-2021\/train')\n\ntrain = pd.read_csv('..\/input\/feedback-prize-2021\/train.csv')\ntrain.head()","d6f9cc76":"def visualize_intersected_entities(example):\n    ents = []\n    for i, row in train[train['id'] == example].iterrows():\n        ents.append({\n                        'start': int(row['discourse_start']), \n                         'end': int(row['discourse_end']), \n                         'label': row['discourse_type']\n                    })\n\n    with open(path\/f'{example}.txt', 'r') as file: data = file.read()\n        \n    ents.sort(key=lambda x: x['start'])\n    \n    intersections = []\n    last_end = None\n    last_label = None\n    for e in ents:\n        start = e['start']\n        end = e['end']\n        label = e['label']\n        if last_end and last_end > start:\n            intersections.append({\n                'start': start,\n                'end': last_end,\n                'label': '_'.join([last_label, label])\n            })\n        if not last_end or end > last_end:\n            last_end = end\n            last_label = label\n\n    doc2 = {\n        \"text\": data,\n        \"ents\": intersections,\n        \"title\": example\n    }\n\n    if intersections:\n        displacy.render(doc2, style=\"ent\", manual=True, jupyter=True)\n        print('\\n')\n        return True\n    return False","80067d76":"from tqdm import tqdm\nexamples = train['id'].values.tolist()\n\ndocuments_with_intersections = 0\nfor ex in tqdm(examples):\n    if visualize_intersected_entities(ex):\n        documents_with_intersections += 1\nprint(f\"documents_with_intersections: {documents_with_intersections}\")","870bbb27":"Well, nothing to worry about, we can do multiclass classification with peace of mind (:","61a9d0b5":"# Check for Intersecting Entities","bacf916b":"Based on the great notebook by DAREK K\u0141ECZEK [Feedback Prize EDA with displacy](https:\/\/www.kaggle.com\/thedrcat\/feedback-prize-eda-with-displacy)","820d69f1":"Hi to all!\nIn data description it's stated \"classify each element as **ONE** of the following...\". Nevertheless, markup format with starts and ends allows intersected entities. So, maybe we need to check for shure existance of intersected entities in the markup? Let's check it."}}