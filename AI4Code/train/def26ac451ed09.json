{"cell_type":{"fb9a2ac1":"code","cf550561":"code","cdb8ac9b":"code","3e2b1e5a":"code","f0eee0a8":"code","d8530254":"code","53743ea8":"code","71697185":"code","dd9d0f92":"code","8e0bc5a9":"code","523fb933":"code","4c320601":"code","d9befa1c":"code","c60f4e45":"code","6a417532":"code","e2907b1c":"code","7d08981b":"code","239a8626":"code","961616bd":"code","03710c36":"code","1972e15b":"code","db481f8f":"code","f687fc65":"code","6b37bdab":"code","758c80b6":"code","e7ae0ada":"code","0482a358":"code","ef865764":"code","8672ba0e":"code","bc37e42e":"code","0af950b6":"markdown","804ec59a":"markdown","63537482":"markdown","fce9b1ca":"markdown","116053e1":"markdown","6f012ede":"markdown","33333bc1":"markdown","236d6793":"markdown","838ba40e":"markdown","a41fa088":"markdown","72e55570":"markdown","478ca52e":"markdown","e76bcace":"markdown","e26a8edd":"markdown","4d983346":"markdown"},"source":{"fb9a2ac1":"from IPython.display import HTML\nHTML('<center><iframe width=\"650\" height=\"450\" src=\"https:\/\/www.youtube.com\/embed\/PRS_CXprri0\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe><\/center>')","cf550561":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport gc\nimport numpy as np # linear algebra\nimport pandas # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n#import matplotlib.patches as ptc\nimport plotly.graph_objects as go\nimport seaborn as sns\n%matplotlib inline\nfrom pydicom import dcmread\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\n'''\nfrom functools import partial\nimport multiprocessing as mpc\nfrom joblib import Parallel, delayed\n'''\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/vinbigdata-chest-xray-abnormalities-detection'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cdb8ac9b":"PATH = \"..\/input\/vinbigdata-chest-xray-abnormalities-detection\/\"\ntrain_df = pandas.read_csv(os.path.join(PATH, 'train.csv'))\ntrain_df","3e2b1e5a":"Rows, Cols = train_df.shape\nprint(f'There are {Rows} Rows and {Cols} columns in train.csv')","f0eee0a8":"train_df.class_id.nunique()","d8530254":"train_df.groupby(['class_name', 'class_id']).agg({'count'})['image_id'].sort_values(by='count').rename(columns={0:\"Unique Values\"}).style.background_gradient(cmap=\"plasma\")","53743ea8":"plt.figure(figsize=(10, 10))\nsns.pairplot(train_df, hue='class_name')\nplt.show()","71697185":"train_df.image_id.value_counts().to_frame()","dd9d0f92":"images = train_df.image_id.nunique()\nprint(f\"There are in total {images} unique images in the train test.\")","8e0bc5a9":"di = dcmread('..\/input\/vinbigdata-chest-xray-abnormalities-detection\/train\/000434271f63a053c4128a0ba6352c7f.dicom')\ndi","523fb933":"plt.figure(figsize=(16,6))\nx = plt.imshow(di.pixel_array, 'gray')","4c320601":"plt.figure(figsize=(16,6))\nx = plt.imshow(di.pixel_array, cmap=plt.cm.bone)","d9befa1c":"plt.figure(figsize=(16,6))\nx = plt.imshow(di.pixel_array, cmap=plt.cm.gist_ncar)","c60f4e45":"plt.figure(figsize=(28, 8))\nsns.countplot(x=\"class_name\", orient=\"h\", data=train_df)\nplt.title(\"Class Distribution\")\nplt.show()","6a417532":"def plot_distribution_classes(x_values, y_values, title):\n    \n    #colors = ['rgb(26, 118, 255)',] * 15\n    #colors[0] = 'lightslategray'\n\n    fig = go.Figure(data=[go.Bar(\n        x=x_values, \n        y=y_values,\n        text=y_values\n        #marker_color=colors\n    )])\n\n    fig.update_layout(height=400, width=700, title_text=title)\n    fig.update_xaxes(type=\"category\")\n\n    fig.show()","e2907b1c":"train_df.class_name.value_counts().to_frame().rename(columns={0:\"Unique Values\"}).style.background_gradient(cmap=\"plasma\")","7d08981b":"indexes = train_df.class_name.unique()\ncounts = train_df.class_name.value_counts()\n\nsorted_dict = dict(zip(indexes, counts))\nsorted_dict = {k: v for k, v in sorted(sorted_dict.items(), key=lambda item: item[1], reverse = True)}\n\nx = list(sorted_dict.keys())\ny = list(sorted_dict.values())\n\nplot_distribution_classes(x, y, \n                          title=\"Distribution of radiographic observations\")","239a8626":"train_df.rad_id.value_counts().to_frame().rename(columns={0:\"Unique Values\"}).style.background_gradient(cmap=\"plasma\")","961616bd":"indexes = train_df.rad_id.unique()\ncounts = train_df.rad_id.value_counts()\n\nsorted_dict = dict(zip(indexes, counts))\nsorted_dict = {k: v for k, v in sorted(sorted_dict.items(), key=lambda item: item[1], reverse = True)}\n\nx = list(sorted_dict.keys())\ny = list(sorted_dict.values())\n\nplot_distribution_classes(x, y, \n                          title=\"Distribution of Annotations by Radioloiest\")","03710c36":"!pip install -Uqq fastai","1972e15b":"from fastai.basics import *\nfrom fastai.callback.all import *\nfrom fastai.vision.all import *\nfrom fastai.medical.imaging import *\n\nimport pydicom,kornia,skimage\nfrom pydicom.dataset import Dataset as DcmDataset\nfrom pydicom.tag import BaseTag as DcmTag\nfrom pydicom.multival import MultiValue as DcmMultiValue\nfrom PIL import Image\n\ntry:\n    import cv2\n    cv2.setNumThreads(0)\nexcept: pass","db481f8f":"path = Path('..\/input\/vinbigdata-chest-xray-abnormalities-detection')\ntrain_imgs = path\/'train'\ntrain_dicom = get_dicom_files(train_imgs)\ndicom_dataframe = pd.DataFrame.from_dicoms(train_dicom, window=dicom_windows.lungs, px_summ=False)","f687fc65":"dicom_dataframe.to_pickle('.\/dicom_dataframe_pickle.pkl')\ndicom_dataframe.shape","6b37bdab":"dicom_dataframe = pd.read_pickle('.\/dicom_dataframe_pickle.pkl')\ndicom_dataframe.shape # should be 15k by 29","758c80b6":"dicom_dataframe","e7ae0ada":"import pydicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nfrom PIL import Image\nfrom tqdm.auto import tqdm\n\ndef read_xray(path, voi_lut = True, fix_monochrome = True):\n    # Original from: https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way\n    dicom = pydicom.read_file(path)\n    \n    # VOI LUT (if available by DICOM device) is used to transform raw DICOM data to \n    # \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n               \n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n        \n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n        \n    return data","0482a358":"def resize(array, size, keep_ratio=False, resample=Image.LANCZOS):\n    # Original from: https:\/\/www.kaggle.com\/xhlulu\/vinbigdata-process-and-resize-to-image\n    im = Image.fromarray(array)\n    \n    if keep_ratio:\n        im.thumbnail((size, size), resample)\n    else:\n        im = im.resize((size, size), resample)\n    \n    return im","ef865764":"image_id = []\ndim0 = []\ndim1 = []\n\nfor split in ['train', 'test']:\n    load_dir = f'..\/input\/vinbigdata-chest-xray-abnormalities-detection\/{split}\/'\n    save_dir = f'\/kaggle\/tmp\/{split}\/'\n\n    os.makedirs(save_dir, exist_ok=True)\n\n    for file in tqdm(os.listdir(load_dir)):\n        # set keep_ratio=True to have original aspect ratio\n        xray = read_xray(load_dir + file)\n        im = resize(xray, size=1024)  \n        im.save(save_dir + file.replace('dicom', 'png'))\n        \n        if split == 'train':\n            image_id.append(file.replace('.dicom', ''))\n            dim0.append(xray.shape[0])\n            dim1.append(xray.shape[1])","8672ba0e":"%%time\n!tar -zcf train.tar.gz -C \"\/kaggle\/tmp\/train\/\" .\n!tar -zcf test.tar.gz -C \"\/kaggle\/tmp\/test\/\"","bc37e42e":"df = pd.DataFrame.from_dict({'image_id': image_id, 'dim0': dim0, 'dim1': dim1})\ndf.to_csv('train_meta.csv', index=False)","0af950b6":"Read Dicom image","804ec59a":"View DICOM metadata into dataframe","63537482":"View Dicom image","fce9b1ca":"As we can see there is a class imbalance problem. We need to augment the data to address this problem.","116053e1":"Write DICOM metadata into pkl for fast processing","6f012ede":"References: \n1. https:\/\/docs.fast.ai\/medical.imaging\n2. https:\/\/www.kaggle.com\/crained\/vinbigdata-fastai-get-started\n3. https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way\n4. https:\/\/www.kaggle.com\/c\/vinbigdata-chest-xray-abnormalities-detection\/discussion\/207955\n5. https:\/\/www.kaggle.com\/xhlulu\/vinbigdata-process-and-resize-to-png-1024x1024\n\nThanks a million to the community.\n\nUpcoming:\n\nworking on fastai build-in save_jpg() method to convert dicom to jpg. \n\nAny advice and contriutions would be appreciated.\nThank you.\n\n\nThis notebook is a starter guide for ones who want to start with DICOM.\n\n# Work In progress","33333bc1":"# FastAI to process DICOMs ","236d6793":"### DICOM metadata to Dataframe --> Pikle","838ba40e":"# EDA Chest X-ray Abnormalities Detection","a41fa088":"## DICOM to PNG","72e55570":"### Import Libraries","478ca52e":"# Save DICOM to Image","e76bcace":"# Radiologiet Distribution","e26a8edd":"Read metadata from pickle","4d983346":"# Class Distribution"}}