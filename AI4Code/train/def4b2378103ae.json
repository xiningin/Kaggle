{"cell_type":{"5ce37ed6":"code","470c3b60":"code","269e69f1":"code","eb973c3b":"code","b0549a6a":"code","b4ee643e":"code","a7390f6e":"code","fcf1a528":"code","c8c2c007":"code","91b7e0d5":"code","9bb786c3":"code","570f6877":"code","c7a93eff":"code","18a54c97":"code","47895fd9":"code","6d4350ed":"code","a4b3ac0a":"code","0c231e59":"code","93d40ba3":"code","b7b1c23e":"code","fdfe39cf":"code","fd1cb57b":"code","2cf27407":"code","ff6548b8":"code","811463b7":"code","e952589d":"code","8ab5d1f3":"code","8ecebe1e":"code","03a5cff6":"code","5a38164f":"code","22e6e511":"code","2183086c":"code","9acb4e08":"code","51961357":"code","043f3210":"code","c70b44ad":"code","288bcc09":"code","eae1127e":"code","5e6e2b3e":"code","b47c78a4":"code","7be54681":"code","5d1387b7":"markdown","499c1338":"markdown","d7e3534f":"markdown","cba0a45f":"markdown","a909b571":"markdown","d716c9cf":"markdown","03602309":"markdown"},"source":{"5ce37ed6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","470c3b60":"import matplotlib.pyplot as plt","269e69f1":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}","eb973c3b":"football = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","b0549a6a":"football","b4ee643e":"edu = pd.read_csv('\/kaggle\/input\/datalab\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","a7390f6e":"edu.head()","fcf1a528":"edu.head(10)","c8c2c007":"edu.tail()","91b7e0d5":"edu[10:14]","9bb786c3":"edu.describe()","570f6877":"edu['Value']","c7a93eff":"edu['GEO']","18a54c97":"edu.iloc[90:94][['TIME','GEO']]","47895fd9":"edu[edu['Value'] > 6.5].tail()","6d4350ed":"edu['Value'] > 6.5","a4b3ac0a":"edu[edu['Value'] > 6.5]","0c231e59":"edu.max(axis = 0)","93d40ba3":"s = edu[\"Value\"]\/100\ns.head()","b7b1c23e":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","fdfe39cf":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","fd1cb57b":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","2cf27407":"s = edu[\"Value\"]\/100\ns.head()","ff6548b8":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","811463b7":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","e952589d":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","8ab5d1f3":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","8ecebe1e":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","03a5cff6":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","5a38164f":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","22e6e511":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","2183086c":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","9acb4e08":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","51961357":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","043f3210":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","c70b44ad":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","288bcc09":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","eae1127e":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","5e6e2b3e":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","b47c78a4":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","7be54681":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","5d1387b7":"3. **What does the method tail()return?**\n\nIt shows only the last rows","499c1338":"6. **What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?**\n\nFor each row, it provides a boolean : 1 if the value is superior to 6.5, 0 if not.\n\nWhen we apply the index edu[edu['Value'] > 6.5], it returns a Dataframe with the previous True rows. \n\n","d7e3534f":"5. **What does this index return? What does the first index represent? And the second one?**\n\n\nIt returns only the colums TIME and GEO for row 90 to 94.\nThe first index represent the rows 90 to 94.\nThe second one represent the two colums 'TIME' and 'GEO'.\n","cba0a45f":"4. **Which measures does the result show? It seems that it shows some default values, can you guess which ones?**\n\nThe result shows some statistical values : count, mean, std, min, 25%, 50%, 75%, max \n\n","a909b571":"1. **Which is the size of the edu DataFrame (rows x columns)?**\n\n384 rows \u00d7 3 columns\n","d716c9cf":"**7. What do you observe regarding the parameter ascending=False?**\n\n","03602309":"2.  **What happens if we give a number as argument to the method head()?**\n\nIt shows only the number of rows that we decided "}}