{"cell_type":{"ca6e2d3a":"code","bb4af3fa":"code","0e4ea154":"code","5a0fd63e":"code","248a2837":"code","954226ee":"code","1bbc6de8":"code","8c6bd9e9":"code","8e3192c7":"code","85a5b2bd":"code","6a009bae":"code","e5bf6e77":"code","77a7e140":"code","131cf195":"code","be1749f9":"code","5ec287c3":"code","0e3d2339":"code","d6932020":"code","ee557be2":"code","1a3282da":"code","220c5e67":"code","a907ef1b":"code","3916b68a":"code","02d916fd":"code","440170bd":"code","ba516766":"code","26b60e94":"code","db427f0f":"code","c2a2b978":"code","e80f1188":"code","30216111":"code","82dfb572":"code","8fdbe5e3":"code","4fc78f40":"code","5dc075e5":"code","f9504249":"code","22ccc7df":"code","3ac7f7d5":"code","df03a9ed":"code","9d1edac4":"code","e0131986":"code","cae765f5":"code","24a21526":"markdown","d2247def":"markdown","53600f5c":"markdown","3c14a117":"markdown","c897d15b":"markdown","c1605693":"markdown","e75af573":"markdown","774c9fea":"markdown","3bdd2686":"markdown","cb7d4d20":"markdown","ac020270":"markdown","b1a20ccf":"markdown","c5b23361":"markdown"},"source":{"ca6e2d3a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom imblearn.over_sampling import SMOTE","bb4af3fa":"from xgboost import XGBClassifier","0e4ea154":"df = pd.read_csv(r\"C:\\Users\\harsh\\Training Data.csv\",index_col=0)\ntest_data = pd.read_csv(r\"C:\\Users\\harsh\\Test Data.csv\")","5a0fd63e":"df.head()","248a2837":"df.shape","954226ee":"print('0', round(df['risk_flag'].value_counts()[0]\/len(df) * 100,2), '% of the dataset')\nprint('1', round(df['risk_flag'].value_counts()[1]\/len(df) * 100,2), '% of the dataset')","1bbc6de8":"df.risk_flag.value_counts()","8c6bd9e9":"df[\"profession\"]=pd.factorize(df.profession)[0]\ndf[\"city\"]=pd.factorize(df.city)[0]\ndf[\"state\"]=pd.factorize(df.state)[0]\ndf[\"married\"]=pd.factorize(df.married)[0]\ndf[\"house_ownership\"]=pd.factorize(df.house_ownership)[0]\ndf[\"car_ownership\"]=pd.factorize(df.car_ownership)[0]","8e3192c7":"test_data[\"profession\"]=pd.factorize(test_data.profession)[0]\ntest_data[\"city\"]=pd.factorize(test_data.city)[0]\ntest_data[\"state\"]=pd.factorize(test_data.state)[0]\ntest_data[\"married\"]=pd.factorize(test_data.married)[0]\ntest_data[\"house_ownership\"]=pd.factorize(test_data.house_ownership)[0]\ntest_data[\"car_ownership\"]=pd.factorize(test_data.car_ownership)[0]\n","85a5b2bd":"y_test_id=test_data.id.values","6a009bae":"\ntest_data.drop(['id'],axis=1,inplace=True)","e5bf6e77":"test_data.head()","77a7e140":"test_data.shape","131cf195":"df.columns","be1749f9":"X=df.drop(['risk_flag'],axis=1)\nY=df['risk_flag']","5ec287c3":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test= train_test_split(X,Y,test_size=0.2,random_state=121)","0e3d2339":"X_train.head()","d6932020":"from imblearn.combine import SMOTETomek\nfrom imblearn.under_sampling import NearMiss\nsmk = SMOTETomek(random_state=42)\nX_res,y_res=smk.fit_resample(X_train,Y_train)","ee557be2":"y_res.value_counts()","1a3282da":"import joblib \njoblib.dump({'X_res':X_res,'y_res':y_res,'X_test':X_test,'Y_test':Y_test,\n            'X_train':X_train,'Y_train':Y_train},\n           \"data_processed_mainmodel.pkl\"\n           )","220c5e67":"rs=122","a907ef1b":"categorical_features_indices = np.where(X.dtypes != np.float)[0]","3916b68a":"from sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint\nmod= CatBoostClassifier()\n\npar={'max_depth':[3,5,10,None],\n              'n_estimators':[100,200,300,400],'learning_rate':[0.1,0.01,0.001]}\ndef hyperparameter_tuning(mod,param_d,p,q):\n    rdmsearch=  RandomizedSearchCV(mod, param_distributions=param_d,n_jobs=-1,cv=9,scoring='roc_auc')\n    rdmsearch.fit(p,q)\n    ht_params = rdmsearch.best_params_\n    ht_score = rdmsearch.best_score_\n    return ht_params, ht_score\n\n\nrf_parameters, rf_ht_score = hyperparameter_tuning(mod, par,  X_res, y_res)\n","02d916fd":"print(rf_parameters, rf_ht_score)","440170bd":"from catboost import  CatBoostClassifier\nmodel=  CatBoostClassifier(random_state=121,n_estimators=400,max_depth=10,learning_rate= 0.1)\nmodel.fit(X_res, y_res,cat_features=categorical_features_indices,eval_set=(X_test, Y_test))","ba516766":"y_pred=model.predict(X_res)","26b60e94":"y_pred_ht=model.predict(X_test)","db427f0f":"from sklearn.metrics import classification_report , confusion_matrix \nprint(classification_report(Y_test,y_pred_ht))","c2a2b978":"from sklearn.metrics import roc_auc_score\nauc = roc_auc_score(y_res, y_pred)\nprint('ROC AUC: %f' % auc)","e80f1188":"from sklearn.metrics import roc_auc_score\nauc = roc_auc_score(Y_test, y_pred_ht)\nprint('ROC AUC: %f' % auc)","30216111":"xgb = XGBClassifier(verbosity=0,objective = \"binary:logistic\",eval_metrix='Log_Loss')\nxgb.fit(X_res,y_res)","82dfb572":"from sklearn.metrics import roc_auc_score","8fdbe5e3":"y_pred_train=xgb.predict(X_res)\nauc = roc_auc_score(y_res ,y_pred_train)\nprint('ROC AUC: %f' % auc)","4fc78f40":"y_pred_xgb=xgb.predict(X_test)\nauc = roc_auc_score(Y_test ,y_pred_xgb)\nprint('ROC AUC: %f' % auc)","5dc075e5":"from sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint","f9504249":"params={\n \"learning_rate\"    : [0.05, 0.10 ,.01] ,\n \"max_depth\"        : [  4, 5, 6, 8],\n \"min_child_weight\" : [ 1, 3, 5, 7 ],\n \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n    \n}\nclassifier=XGBClassifier()\n\ndef hyperparameter_tunin(mod,param_d,p,q):\n    rdmsearch=  RandomizedSearchCV(mod, param_distributions=param_d,n_iter=5,n_jobs=-1,cv=9,scoring='roc_auc')\n    rdmsearch.fit(p,q)\n    ht_params = rdmsearch.best_params_\n    ht_score = rdmsearch.best_score_\n    return ht_params, ht_score\n\n\nrf_parameters, rf_ht_score = hyperparameter_tunin(classifier, params,  X_res, y_res)","22ccc7df":"print(rf_parameters, rf_ht_score)","3ac7f7d5":"xgb = XGBClassifier(verbosity=0,\n                    objective = \"binary:logistic\",\n                    eval_metrix='Log_Loss',\n                    max_child_weight=3,\n                    max_depth=8,\n                    learning_rate=0.1,\n                    gamma=.0,\n                    colsample_bytree=0.5,\n                    random_state=121\n                   )","df03a9ed":"xgb.fit(X_res,y_res)\ny_pred_train_xgb=xgb.predict(X_res)","9d1edac4":"auc = roc_auc_score(y_res ,y_pred_train_xgb)\nprint('ROC AUC: %f' % auc)","e0131986":"y_pred_test_xgb=xgb.predict(X_test)\n","cae765f5":"y_pred_xgb=xgb.predict(X_test)\nauc = roc_auc_score(Y_test ,y_pred_test_xgb)\nprint('ROC AUC: %f' % auc)","24a21526":"# Import Datasets","d2247def":"### Running the model with tuned parameters","53600f5c":"##  Splitting data into train and test data for model","3c14a117":"# Drop the dependent variable from the  dataset. ","c897d15b":"# Train your model","c1605693":"## HyperParameter Tuning","e75af573":"# XGBOOST","774c9fea":"# Check how train dataset looks like.","3bdd2686":"## Synthetic Minority Oversampling Technique (SMOTE)","cb7d4d20":"### CAT BOOST CLASSIFIER","ac020270":"# Convert datatype of selected fields.","b1a20ccf":"## Hyperparameter tuning Xgboost","c5b23361":"\n# Import Python libraries."}}