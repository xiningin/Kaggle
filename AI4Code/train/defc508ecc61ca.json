{"cell_type":{"8606b0a1":"code","75193df5":"code","c1a3bf3a":"code","b4783c9a":"code","845c23e2":"code","55a0725a":"code","9f07d729":"code","5b269672":"code","768ea0c5":"code","fefdbd02":"code","70331cfa":"code","875b170d":"code","5f90c17c":"code","56171969":"code","8ff2aeed":"code","31a92857":"code","ba4faafd":"code","3f515b76":"code","336e2b88":"code","cc8895c3":"code","6497998a":"code","e6363b48":"code","69adb6d5":"code","a69d4e20":"code","5a40a0c2":"code","21c2cc06":"code","3c849b6d":"code","e7d098d5":"code","fee1f9c5":"code","ab8adebe":"code","3dc7132b":"code","a49fef87":"code","8a5bc477":"code","b4b2e3d8":"code","9ac38af9":"code","1ae99629":"code","028ff7ac":"code","855747d7":"code","6b89734c":"code","7b5c0b3e":"code","34fe9654":"code","85263335":"code","e6aeedf9":"code","be52d9bb":"code","e8565f00":"code","707783f0":"code","1d06d9d0":"code","afc14d8d":"code","bfc9d619":"code","bc8458cb":"code","8ebd97c7":"code","e1598cec":"code","d7f5b1a2":"code","a125fadf":"code","40562df9":"code","09efb0e6":"code","e1e1f70f":"code","c7df34ee":"code","098220fc":"code","8fc8c50f":"code","1981183c":"code","2c6f679d":"code","c4f7fc83":"code","7b5bb812":"code","eb7d3391":"code","25d95312":"code","7c235dde":"code","0c30bb0e":"markdown","03d008b8":"markdown","e52e3559":"markdown","57b93e9a":"markdown","6be24dce":"markdown","4febaac3":"markdown","57133a07":"markdown","35c7dd84":"markdown","b914afcd":"markdown"},"source":{"8606b0a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","75193df5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","c1a3bf3a":"df = pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")\ndf.head()","b4783c9a":"df.shape","845c23e2":"df.info()","55a0725a":"df.describe()","9f07d729":"df.isna().sum()","5b269672":"df.columns","768ea0c5":"from sklearn.impute import KNNImputer","fefdbd02":"imputer = KNNImputer(n_neighbors = 5)\ndf['bmi'] = imputer.fit_transform(df[['bmi']])","70331cfa":"df.isna().sum()","875b170d":"fig, axes = plt.subplots(figsize=(8, 4))\ndf['stroke'].value_counts(normalize=True).plot.bar(width=0.2, color=('red','green'))\n\nplt.tight_layout()\nplt.show()","5f90c17c":"cols = df[['age', 'hypertension', 'heart_disease', 'avg_glucose_level', 'bmi']]\ncols.head()","56171969":"# lets see how data is distributed for every column\nimport seaborn as sns\nplt.figure(figsize=(20,30), facecolor='white')\nplotnumber=1\n\nfor column in cols:\n    if plotnumber<=15:\n        ax = plt.subplot(5,3,plotnumber)\n        sns.distplot(cols[column])\n        plt.xlabel(column, fontsize=20)\n        \n    plotnumber+=1\nplt.tight_layout()","8ff2aeed":"# lets see outliers\nimport seaborn as sns\nplt.figure(figsize=(20,30), facecolor='white')\nplotnumber=1\n\nfor column in cols:\n    if plotnumber<=15:\n        ax = plt.subplot(5,3,plotnumber)\n        sns.boxplot(cols[column])\n        plt.xlabel(column, fontsize=20)\n        \n    plotnumber+=1\nplt.tight_layout()","31a92857":"\nimport seaborn as sns\nplt.figure(figsize=(20,30), facecolor='white')\nplotnumber=1\n\nfor column in cols:\n    if plotnumber<=15:\n        ax = plt.subplot(5,3,plotnumber)\n        sns.kdeplot(cols[column])\n        plt.xlabel(column, fontsize=20)\n        \n    plotnumber+=1\nplt.tight_layout()","ba4faafd":"# categorical columns","3f515b76":"import seaborn as sns\nsns.countplot(df['gender'])","336e2b88":"df.columns","cc8895c3":"sns.countplot(df['ever_married'])","6497998a":"sns.countplot(df['work_type'])","e6363b48":"sns.countplot(df['Residence_type'])","69adb6d5":"sns.countplot(df['smoking_status'])","a69d4e20":"# relation between categorical column and target columns","5a40a0c2":"categorical_features = ['gender', 'ever_married', 'work_type', 'Residence_type','smoking_status']","21c2cc06":"fig, axes = plt.subplots(2, 3, figsize=(20,10))\naxes = [ax for axes_row in axes for ax in axes_row]\ntarget = 'stroke'\n\nfor i, c in enumerate(categorical_features):\n#     df = df[[c,target]].groupby(c).mean().reset_index()\n    sns.barplot(df[c], df[target], ax=axes[i])\n    axes[i].set_ylabel('stroke', fontsize=14)\n    axes[i].set_xlabel(c, fontsize=14)\n    \nplt.tight_layout()\nplt.show()","3c849b6d":"df.head()","e7d098d5":"df['smoking_status'].value_counts()","fee1f9c5":"# Handle categorical column","ab8adebe":"gender = pd.get_dummies(df[['gender']], drop_first= True)\ngender.head()","3dc7132b":"married = pd.get_dummies(df[['ever_married']], drop_first= True)\nmarried.head()","a49fef87":"work = pd.get_dummies(df[['work_type']], drop_first= True)\nwork.head()","8a5bc477":"residence = pd.get_dummies(df[['Residence_type']], drop_first= True)\nresidence.head()","b4b2e3d8":"smoking = pd.get_dummies(df[['smoking_status']], drop_first= True)\nsmoking.head()","9ac38af9":"data = pd.concat([df, gender, married, work, residence, smoking], axis = 1)\ndata.head()","1ae99629":"data = data.drop(columns=categorical_features, axis=1)\ndata.head()","028ff7ac":"data = data.drop(columns=\"id\" , axis=1)\ndata.head()","855747d7":"data.columns","6b89734c":"data.head()","7b5c0b3e":"data.describe","34fe9654":"# Correalation between features and target","85263335":"corr = data.corr()['stroke'].sort_values(ascending=False).to_frame()\nplt.figure(figsize=(2,8))\nsns.heatmap(corr, cmap='Blues', cbar=False, annot=True)\nplt.show()","e6aeedf9":"data.head()","be52d9bb":"x = data.drop(\"stroke\", axis=1)\nx.head()","e8565f00":"y = data[['stroke']]\ny.head()","707783f0":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nx = scaler.fit_transform(x)","1d06d9d0":"x","afc14d8d":"# split data","bfc9d619":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42)","bc8458cb":"x_train","8ebd97c7":"from sklearn.tree import DecisionTreeClassifier\ndecision = DecisionTreeClassifier(random_state=1)\ndecision.fit(x_train, y_train)","e1598cec":"# accuracy\ndecision.score(x_test, y_test)","d7f5b1a2":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\nrf.fit(x_train, y_train)","a125fadf":"# accuracy\nrf.score(x_test, y_test)","40562df9":"from sklearn.svm import SVC\nmodel = SVC()\nmodel.fit(x_train,y_train)","09efb0e6":"model.score(x_test,y_test)","e1e1f70f":"from sklearn.neighbors import KNeighborsClassifier\nkc = KNeighborsClassifier()\nkc.fit(x_train,y_train)","c7df34ee":"kc.score(x_test,y_test)","098220fc":"from sklearn.linear_model import LogisticRegression\nlg = LogisticRegression()\nlg.fit(x_train,y_train)","8fc8c50f":"lg.score(x_test,y_test)","1981183c":"# hyperparameter tuning of SVC","2c6f679d":"from sklearn.model_selection import GridSearchCV\n  \n# defining parameter range\nparam_grid = {'C': [0.1, 1, 10, 100, 1000], \n              'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n              'kernel': ['rbf']} \n  \ngrid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3)\n  \n# fitting the model for grid search\ngrid.fit(x_train, y_train)","c4f7fc83":"grid.best_params_","7b5bb812":"from sklearn.svm import SVC\nmodel = SVC(C= 0.1, gamma = 1, kernel = 'rbf')\nmodel.fit(x_train,y_train)","eb7d3391":"model.score(x_test,y_test)","25d95312":"prep = model.predict(x_test)","7c235dde":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, prep))","0c30bb0e":"According to the World Health Organization (WHO) stroke is the 2nd leading cause of death globally, responsible for approximately 11% of total deaths.<br>\nThis dataset is used to predict whether a patient is likely to get stroke based on the input parameters like gender, age, various diseases, and smoking status. Each row in the data provides relavant information about the patient.","03d008b8":"### model training","e52e3559":"#### Our top priority in this health problem is to identify patients with a stroke.","57b93e9a":"### Import libraries","6be24dce":"### Exploratory Data Analysis","4febaac3":"<b>Attribute Information<\/b>\n\n1) id: unique identifier<br>\n2) gender: \"Male\", \"Female\" or \"Other\"<br>\n3) age: age of the patient<br>\n4) hypertension: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension<br>\n5) heart_disease: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease<br>\n6) ever_married: \"No\" or \"Yes\"<br>\n7) work_type: \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"<br>\n8) Residence_type: \"Rural\" or \"Urban\"<br>\n9) avg_glucose_level: average glucose level in blood<br>\n10) bmi: body mass index<br>\n11) smoking_status: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"*<br>\n12) stroke: 1 if the patient had a stroke or 0 if not<br>\n*Note: \"Unknown\" in smoking_status means that the information is unavailable for this patient<br>","57133a07":"### Split dataset into train and test","35c7dd84":"## Stroke Prediction","b914afcd":"Exploratory data analysis (EDA) is used to analyze and investigate data sets and summarize their main characteristics, often employing data visualization methods."}}