{"cell_type":{"fe7f5a47":"code","f3b99afe":"code","36cb5cfd":"code","3b257d59":"code","b5ac6847":"code","25602e3a":"code","8cdd6d39":"code","63076520":"code","c42db583":"code","c8d1dd22":"code","ac5ac0b4":"code","29c64874":"code","8183cc2e":"code","fff47fe0":"code","4b027a0f":"code","ed442668":"code","56381cb3":"code","98710613":"code","b30d4c80":"code","bf3a7f4c":"code","43fd855c":"code","933ba1b3":"code","14abaf18":"code","8c4338e3":"code","3276b1b2":"code","82be99a3":"code","d461cacf":"code","eb71ce92":"markdown","d4634b34":"markdown","8683c217":"markdown","37f324e9":"markdown","8d158712":"markdown","be095c07":"markdown","3aec589e":"markdown","88f79641":"markdown","f96950fc":"markdown","49c75c6a":"markdown","e7df3bb3":"markdown","37155c48":"markdown","b8df3099":"markdown","1b03c77e":"markdown","4922b99f":"markdown","be00a8f6":"markdown","793a7008":"markdown","c6a9d9de":"markdown","caad31f7":"markdown"},"source":{"fe7f5a47":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom matplotlib import animation\n%matplotlib inline\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n\n\nfrom bokeh.io import output_notebook,show\nfrom bokeh.models import HoverTool\nfrom bokeh.plotting import figure\nfrom bokeh.palettes import Spectral4\n\nimport folium \nfrom folium import plugins\nfrom folium.plugins import HeatMap\n\nfrom mpl_toolkits.basemap import Basemap\n\nimport plotly\nimport plotly.plotly as py\nimport plotly.offline as offline\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\nimport cufflinks as cf\nfrom plotly.graph_objs import Scatter, Figure, Layout\ncf.set_config_file(offline=True)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport gc\n\n# Any results you write to the current directory are saved as output.","f3b99afe":"def load_data():\n    train  = pd.read_csv(\"..\/input\/train.csv\", nrows=10_00_000)\n    test = pd.read_csv(\"..\/input\/test.csv\", nrows = 10_00_000)\n    return train,test","36cb5cfd":"%%time\ntrain, test = load_data()","3b257d59":"print(train.shape)\ntrain.head(5)","b5ac6847":"%%time\ntrain.dtypes.value_counts().plot.bar(figsize=(12, 6))","25602e3a":"%%time\ntrain.isnull().sum().plot.bar(figsize=(20, 6))","8cdd6d39":"sns.jointplot(x = train.fare_amount, y = train.index, data= train,size=8, ratio=6, color=\"#f47442\")","63076520":"plt.figure(figsize=(20,8))\nsns.distplot(train.fare_amount,color=\"orange\")","c42db583":"sns.pairplot(train.head(10000))","c8d1dd22":"plt.figure(figsize=(20,8))\nsns.barplot(x=\"passenger_count\",y=\"fare_amount\", data=train, hue_order=True)\n# sns.lmplot(x='passenger_count', y='fare_amount',data=train,fit_reg=False)","ac5ac0b4":"describe = train.describe()\ndescribe","29c64874":"fig, axarr = plt.subplots(2, 3, figsize=(20, 8))\ndescribe['fare_amount'].plot.bar(ax=axarr[0][0])\ndescribe['pickup_longitude'].plot.bar(ax=axarr[0][1])\ndescribe['pickup_latitude'].plot.bar(ax=axarr[0][2])\ndescribe['dropoff_longitude'].plot.bar(ax=axarr[1][0])\ndescribe['dropoff_latitude'].plot.bar(ax=axarr[1][1])\ndescribe['passenger_count'].plot.bar(ax=axarr[1][2])","8183cc2e":"train.skew()","fff47fe0":"skew_data = train.skew()\nplt.figure(figsize=(20,8))\nsns.distplot(skew_data, bins=10, kde=True, color=\"orange\")","4b027a0f":"plt.figure(figsize=(10,8))\nsns.heatmap(train.corr(), annot=True)","ed442668":"latmin = 40.48\nlonmin = -74.28\nlatmax = 40.93\nlonmax = -73.65\nratio = np.cos(40.7 * np.pi\/180) * (lonmax-lonmin) \/(latmax-latmin)\nfrom matplotlib.colors import LogNorm\nfig = plt.figure(1, figsize=(20,15) )\nhist = plt.hist2d(train.pickup_longitude,train.pickup_latitude,bins=199,range=[[lonmin,lonmax],[latmin,latmax]],norm=LogNorm())\nplt.xlabel('Longitude [degrees]')\nplt.ylabel('Latitude [degrees]')\nplt.title('Pickup Locations')\nplt.colorbar(label='Number')\nplt.show()","56381cb3":"fig = plt.figure(1, figsize=(20,15) )\nhist = plt.hist2d(train.dropoff_longitude,train.dropoff_latitude,bins=199,range=[[lonmin,lonmax],[latmin,latmax]],norm=LogNorm())\nplt.xlabel('Longitude [degrees]')\nplt.ylabel('Latitude [degrees]')\nplt.title('Dropoff Locations')\nplt.colorbar(label='Number')\nplt.show()","98710613":"xlim = [-74.03, -73.77]\nylim = [40.63, 40.85]\ntrain = train[(train.pickup_longitude> xlim[0]) & (train.pickup_longitude < xlim[1])]\ntrain = train[(train.dropoff_longitude> xlim[0]) & (train.dropoff_longitude < xlim[1])]\ntrain = train[(train.pickup_latitude> ylim[0]) & (train.pickup_latitude < ylim[1])]\ntrain = train[(train.dropoff_latitude> ylim[0]) & (train.dropoff_latitude < ylim[1])]","b30d4c80":"longitude = list(train.pickup_longitude) + list(train.dropoff_longitude)\nlatitude = list(train.pickup_latitude) + list(train.dropoff_latitude)\nplt.figure(figsize = (20,15))\nplt.plot(longitude,latitude,'.', alpha = 0.4, markersize = 0.05)\nplt.show()","bf3a7f4c":"loc_df = pd.DataFrame()\nloc_df['longitude'] = longitude\nloc_df['latitude'] = latitude","43fd855c":"from sklearn.cluster import KMeans\nfrom sklearn.neighbors import KNeighborsClassifier\n\nkmeans = KMeans(n_clusters=15, random_state=2, n_init = 10).fit(loc_df)\nloc_df['label'] = kmeans.labels_\n\nloc_df = loc_df.sample(200000)\nplt.figure(figsize = (10,10))\nfor label in loc_df.label.unique():\n    plt.plot(loc_df.longitude[loc_df.label == label],loc_df.latitude[loc_df.label == label],'.', alpha = 0.3, markersize = 0.3)\n\nplt.title('Clusters of New York')\nplt.show()","933ba1b3":"fig,ax = plt.subplots(figsize = (10,10))\nfor label in loc_df.label.unique():\n    ax.plot(loc_df.longitude[loc_df.label == label],loc_df.latitude[loc_df.label == label],'.', alpha = 0.4, markersize = 0.1, color = 'gray')\n    ax.plot(kmeans.cluster_centers_[label,0],kmeans.cluster_centers_[label,1],'o', color = 'r')\n    ax.annotate(label, (kmeans.cluster_centers_[label,0],kmeans.cluster_centers_[label,1]), color = 'b', fontsize = 20)\nax.set_title('Cluster Centers')\nplt.show()","14abaf18":"# Defining the box to work with\nmin_long = -74.25\nmax_long = -73.7\nmin_lat = 40.6\nmax_lat = 40.9\n\ndef filter_long(longi):\n    return longi >= min_long and longi <= max_long\n\ndef filter_lat(lat):\n    return lat >= min_lat and lat <= max_lat\n\ntrain = train[(train['pickup_longitude'].apply(filter_long)) & (train['dropoff_longitude'].apply(filter_long))]\ntrain = train[(train['pickup_latitude'].apply(filter_lat)) & (train['dropoff_latitude'].apply(filter_lat))]","8c4338e3":"f, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(20,10))\nP_pickups = train.plot(kind='scatter', x='pickup_longitude', y='pickup_latitude',\n                color='orange', xlim=(min_long,max_long), ylim=(min_lat, max_lat),\n                s=.02, alpha=.6, subplots=True, ax=ax1)\nax1.set_title(\"Aggregate Pickups\")\nax1.set_axis_bgcolor('black') #Background Color\n\nP_dropoff = train.plot(kind='scatter', x='dropoff_longitude', y='dropoff_latitude',\n                color='yellow', xlim=(min_long,max_long), ylim=(min_lat, max_lat),\n                s=.02, alpha=.6, subplots=True, ax=ax2)\nax2.set_title(\"Aggregate DropOffs\")\nax2.set_axis_bgcolor('black') #Background Color","3276b1b2":"# data = [go.Scattermapbox(\n#             lat= train['pickup_latitude'] ,\n#             lon= train['pickup_longitude'],\n#             customdata = train['key'],\n#             mode='markers',\n#             marker=dict(\n#                 size= 4,\n#                 color = 'gold',\n#                 opacity = .8,\n#             ),\n#           )]\n# layout = go.Layout(autosize=False,\n#                    mapbox= dict(accesstoken=\"pk.eyJ1Ijoic2hhejEzIiwiYSI6ImNqYXA3NjhmeDR4d3Iyd2w5M2phM3E2djQifQ.yyxsAzT94VGYYEEOhxy87w\",\n#                                 bearing=10,\n#                                 pitch=60,\n#                                 zoom=13,\n#                                 center= dict(\n#                                          lat=40.721319,\n#                                          lon=-73.987130),\n#                                 style= \"mapbox:\/\/styles\/shaz13\/cjiog1iqa1vkd2soeu5eocy4i\"),\n#                     width=900,\n#                     height=600, title = \"Pick up Locations in NewYork\")","82be99a3":"# fig = dict(data=data, layout=layout)\n# iplot(fig)","d461cacf":"# data = [go.Scattermapbox(\n#             lat= train['dropoff_latitude'] ,\n#             lon= train['dropoff_longitude'],\n#             customdata = train['key'],\n#             mode='markers',\n#             marker=dict(\n#                 size= 4,\n#                 color = 'cyan',\n#                 opacity = .8,\n#             ),\n#           )]\n# layout = go.Layout(autosize=False,\n#                    mapbox= dict(accesstoken=\"pk.eyJ1Ijoic2hhejEzIiwiYSI6ImNqYXA3NjhmeDR4d3Iyd2w5M2phM3E2djQifQ.yyxsAzT94VGYYEEOhxy87w\",\n#                                 bearing=10,\n#                                 pitch=60,\n#                                 zoom=13,\n#                                 center= dict(\n#                                          lat=40.721319,\n#                                          lon=-73.987130),\n#                                 style= \"mapbox:\/\/styles\/shaz13\/cjk4wlc1s02bm2smsqd7qtjhs\"),\n#                     width=900,\n#                     height=600, title = \"Drop off locations in Newyork\")\n# fig = dict(data=data, layout=layout)\n# iplot(fig)","eb71ce92":"# 3.Check the count of null by Column","d4634b34":"- We can see that Different Column with missing values\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th><\/th>\n      <th>Counts<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <th>key<\/th>\n      <td>0<\/td>\n    <\/tr>\n    <tr>\n      <th>fare_amount<\/th>\n      <td>0<\/td>\n    <\/tr>\n    <tr>\n      <th>pickup_datetime<\/th>\n      <td>0<\/td>\n    <\/tr>\n    <tr>\n      <th>pickup_longitude<\/th>\n      <td>0<\/td>\n    <\/tr>\n    <tr>\n      <th>pickup_latitude<\/th>\n      <td>0<\/td>\n    <\/tr>\n    <tr>\n      <th>dropoff_longitude<\/th>\n      <td>10<\/td>\n    <\/tr>\n    <tr>\n      <th>dropoff_latitude<\/th>\n      <td>10<\/td>\n    <\/tr>\n    <tr>\n      <th>passenger_count<\/th>\n      <td>0<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>","8683c217":"# Visualizing Dropoff locations in NewYork","37f324e9":"# Investigation of Data\n\n# 1.Peak Top 5 Rows\n\n- Read first 5 rows for investigate the data","8d158712":"# 2. Count the Column By Data Types\n\n- From all the column from **Train**\n    - **Float       ->  5**\n    - **object     ->  2**\n    - **int             -> 1**","be095c07":"- we can see that most of the value are distributed between **0 Dollar to 100 Dollar** fare.","3aec589e":"# 5.Normalization Distribution Check","88f79641":"- **Fare_amount** is not normally distributed.","f96950fc":"# New York Taxi Fare Price Prediction\n\n- New York Taxi is heart of **NEWYORK** City. It's network like bee.\n\n![Taxi](https:\/\/skift.com\/wp-content\/uploads\/2015\/03\/wpid-thumbnail-bd99b725c736338597b1dbb348903e3b-e1426767435876.jpeg)","49c75c6a":"# Cluster Center of NYC","e7df3bb3":"# Read first 10,00,000 Rows\n\nData set size is around **1.6gb** so I have taken first **10,00,000** rows for **train and test data**.","37155c48":"# Pickup Location","b8df3099":"# Cluster Map of Newyork City","1b03c77e":"# Aggregate Pickups and Drops","4922b99f":"# 6.Check Descriptive Statistics","be00a8f6":"# 7.Check the Skewness in data","793a7008":"# Drop off Location","c6a9d9de":"# Normal Map of NYC by pickup_longitude and dropoff_longitude","caad31f7":"# 4.Check Frequency of Target Variable"}}