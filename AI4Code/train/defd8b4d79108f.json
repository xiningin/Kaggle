{"cell_type":{"821c3f50":"code","e4207409":"code","f5859c41":"code","a42cf8e7":"code","bed5ec78":"code","d9684796":"code","fb9ce124":"code","9a2dd66e":"code","769da6fa":"code","e23246fa":"code","f0928d81":"code","fdeba677":"code","3fedf334":"code","824e5338":"code","6e558a4b":"code","433f9fc6":"code","148fdc5e":"code","86a40fb8":"code","62428818":"code","f2e45a67":"code","1249af57":"code","c73c130e":"code","e2a24982":"code","4e29cfd7":"code","bc92ac93":"code","0ba09411":"code","ace4a27d":"code","8a031163":"code","b213d134":"code","36663cde":"code","64a17b0a":"code","daa0b014":"code","676c4b02":"code","e6b5b922":"code","ea7d9231":"code","e9e1afb5":"code","bd5aab13":"code","f467814d":"code","1d9d9708":"code","f126ad32":"code","b944b598":"markdown","a094c958":"markdown","a4595a05":"markdown","b24ace69":"markdown","ac49315c":"markdown","443c9666":"markdown","08adbd47":"markdown","ee57db7a":"markdown","849c183d":"markdown","83480862":"markdown","75af0a91":"markdown","fc6ded5f":"markdown","e82d8021":"markdown","be2e980f":"markdown","82116a44":"markdown","f6866fa2":"markdown","deee1673":"markdown","bdf252d5":"markdown","c80d920c":"markdown","e3a8e229":"markdown","8dfe7ddb":"markdown","91c07807":"markdown","012f8115":"markdown","b5efec42":"markdown","6ca5c4a7":"markdown"},"source":{"821c3f50":"from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport missingno as msno ","e4207409":"data = pd.read_csv('..\/input\/data-analyst-jobs\/DataAnalyst.csv', index_col='Unnamed: 0')\nprint(data.shape)\ndata.head()","f5859c41":"data.columns","a42cf8e7":"msno.matrix(data, figsize=(15, 3), fontsize=10)\nplt.title('Missing Value?')\nplt.show()","bed5ec78":"data['Job Title'] = data['Job Title'].str.lower()\n\nbanned = ['data', 'analyst']\n\n\ndef filter(x):\n    x = x.replace('\/', \" \").replace(\"-\", \" \")\n    return ' '.join([item for item in x.split() if item not in banned])\n\n\ndata[\"filter1\"] = data[\"Job Title\"].apply(filter)","d9684796":"data.filter1.value_counts()[1:15].sort_values(ascending=True).plot(\n    kind='barh', title='Title after replacing Data Analyst')\n\nplt.show()","fb9ce124":"junior = ['jr.', 'junior', 'entry', 'intern', 'jr']\nsenior = ['sr.', 'senior', 'lead', 'sr']\n\n\ndef check(x):\n    for item in x.split():\n        if item in junior:\n            return 'Junior'\n        elif item in senior:\n            return 'Senior'\n    return 'Not Specified'\n\n\ndata['experience'] = data[\"filter1\"].apply(check)\ndata.experience.value_counts().plot(kind='bar', title='Jobs For?')\nplt.show()","9a2dd66e":"data.query('experience == \"Junior\"')['Job Title'].value_counts()[:5]","769da6fa":"data[['Salary_lowerlimit', 'Salary_upperlimit']] = data['Salary Estimate'].str.split().str.get(0).str.split(\"-\", expand = True)\n\ndata.Salary_lowerlimit = data.Salary_lowerlimit.apply(lambda x: x[1:-1])\ndata.Salary_upperlimit = data.Salary_upperlimit.apply(lambda x: x[1:-1])\n\noddoneout = data.query('Salary_lowerlimit == \"\"').index[0] ## this data have salary estimate -1\nlowermean = data[data.index != oddoneout].Salary_lowerlimit.astype('int').mean()\nuppermean = data[data.index != oddoneout].Salary_upperlimit.astype('int').mean()\n\ndata.at[oddoneout, 'Salary_lowerlimit'] = lowermean\ndata.at[oddoneout, 'Salary_upperlimit'] = uppermean\n\ndata.Salary_lowerlimit = data.Salary_lowerlimit.astype('int')\ndata.Salary_upperlimit = data.Salary_upperlimit.astype('int')\n\n\nbins = np.linspace(20, 200, 20)\nplt.hist(data.Salary_lowerlimit, bins, alpha=0.5, label='Lower Limit', rwidth=0.93)\nplt.hist(data.Salary_upperlimit, bins, alpha=0.5, label='Upper Limit', rwidth=0.93)\nplt.legend(loc='upper right')\nplt.title('Distribution of Salary')\nplt.xlabel('Salary(in K)')\nplt.show()","e23246fa":"data.groupby('experience').agg({'Salary_lowerlimit': ['mean', 'median', 'max', 'min'], 'Salary_upperlimit' : ['mean', 'median', 'max', 'min']})","f0928d81":"data['Company_name_strip'] = data['Company Name'].str.split('\\n').str.get(0)\n\n\nprint(\"Total No. of Companies - \" , (data['Company Name'].nunique()))\nprint(\"Total No. of Companies after strip - \" , (data['Company_name_strip'].nunique()))","fdeba677":"df = data.groupby(['Company_name_strip']).agg({'Company Name' : 'nunique'})\nduplicate_name = df[df[\"Company Name\"] > 1].index\nprint(duplicate_name)","3fedf334":"data[data.Company_name_strip.isin(duplicate_name)].groupby(\n    ['Company_name_strip', \"Company Name\", 'Location', \"Headquarters\"]).size()","824e5338":"data['Company_name_strip'].value_counts()[:10].plot(kind = 'bar', title = \"Company having opening\").set(ylabel = 'No. of Jobs')\nplt.show()","6e558a4b":"data.query('experience == \"Junior\"').groupby(['Company Name']).agg({'Salary_lowerlimit': 'mean', 'Salary_upperlimit':'mean'}\n                                    ).sort_values(('Salary_upperlimit'), ascending=False)[:20].plot(kind='bar',\n                                    title='Company searching Young Data Analyst', figsize=(20, 5)).set(ylabel=\"Salary(K)\")\nplt.show()","433f9fc6":"data.groupby(['Company_name_strip']).get_group('Cognoa')","148fdc5e":"df = data.Location.str.split(',', expand=True)\ndf2 = data.Headquarters.str.split(',', expand=True)\n\ndf.loc[df[2] == ' CO', 0] = \"Greenwood Village, Arapahoe\"\ndf.loc[df[2] == ' CO', 1] = \" CO\"\n\n\ndf2.loc[df2[2] == \" NY\", 1] = \" NY\"\ndf2.loc[df2[1] == \" 061\", 1] = \" NY\"\n\n\ndata[['Place', 'State']] = df.loc[:, [0, 1]]\ndata[['Headquarters_place', 'Headquarters_state_or_country']] = df2.loc[:, [0, 1]]\n\n\ndata.State = data.State.str.split(\" \").str.get(1)","86a40fb8":"foreign = df2[df2[1].str.len() > 3][1].unique()\ndata['Company_origin'] = data.Headquarters_state_or_country.apply(\n    lambda x: \"Foreign\" if x in foreign else 'Domestic')\n\ndata.groupby('Company_origin').agg({'Company Name': 'nunique'})","62428818":"#Lets findout\noddoneout = data.groupby('Company_name_strip').agg({'Company_origin': 'nunique'}).query('Company_origin == 2').index\ndata[data['Company_name_strip'].isin(oddoneout)]","f2e45a67":"data.query('Company_origin == \"Foreign\"').groupby('Headquarters_state_or_country').agg({'Company_name_strip': \"nunique\"}).sort_values(\n    by='Company_name_strip', ascending=False).plot(kind='bar', title=\"Foreign Company Count in US\", legend = False).set(xlabel = 'Country')\nplt.show()","1249af57":"# Let's see some Companies from India\ndata.query('Headquarters_state_or_country == \" India\"')['Company_name_strip'].unique()","c73c130e":"print('Mean Salary Lower limit of Indian Company in Us - ', data.query('Headquarters_state_or_country == \" India\"')['Salary_lowerlimit'].mean())\nprint('Mean Salary Upper limit of Indian Company in Us - ', data.query('Headquarters_state_or_country == \" India\"')['Salary_upperlimit'].mean())","e2a24982":"! pip install chart_studio","4e29cfd7":"import chart_studio.plotly as py \nimport plotly.graph_objs as go \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\ndf = data.State.value_counts().reset_index()\n\ndf2 = dict(type='choropleth',\n            locations = df['index'],\n            locationmode = 'USA-states',\n            colorscale = 'reds',\n            z = df['State'],\n            colorbar = {'title':\"Job Count\"}\n            )\nlayout = dict(title = 'Data Analytic Job',\n              geo = dict(scope='usa')\n             )\nchoromap = go.Figure(data = [df2],layout = layout)\niplot(choromap)","bc92ac93":"df = data.groupby('State').agg({'Salary_lowerlimit':'mean', 'Salary_upperlimit':\"mean\"}).reset_index()\ndf2 = dict(type='choropleth',\n            locations = df['State'],\n            locationmode = 'USA-states',\n            colorscale = \"reds\",\n            z = df['Salary_upperlimit'],\n            colorbar = {'title':\"Salary Mean\"},)\n\nlayout = dict(title = 'Data Analytic Mean Salary',\n              geo = dict(scope='usa')\n             )\nchoromap = go.Figure(data = [df2],layout = layout)\niplot(choromap)","0ba09411":"df = data.groupby(['State']).agg({'Rating': 'mean'}).reset_index()\ndf2 = dict(type='choropleth',\n            locations = df['State'],\n            locationmode = 'USA-states',\n            colorscale = \"reds\",\n            z = df['Rating'],\n            colorbar = {'title':\"Rating\"},)\n\nlayout = dict(title = 'Data Analytic Companies Mean Rating',\n              geo = dict(scope='usa')\n             )\nchoromap = go.Figure(data = [df2],layout = layout)\niplot(choromap)","ace4a27d":"data['Max_size'] = data.Size.str.split(\" employees\").str.get(0).str.split(' to ').apply(lambda x: x[-1] if len(x) > 1 else x[0])\n\n\noddoneout = data.query('Max_size == \"-1\"')['Company Name'].unique()\ndata[data['Company Name'].isin(oddoneout)].Max_size.value_counts()  ## one of the company has 50 employees\n\n\n## updating max size\ncompany = data[data['Company Name'].isin(oddoneout)].query('Max_size == \"50\"')['Company Name'].iloc[0]\noddoneout = data.query('Max_size == \"-1\"').groupby('Company Name').get_group(company).index[0]\ndata.loc[oddoneout, \"Max_size\"] =\"50\"\n\n\ndf = data.Max_size.value_counts(normalize=True)*100\n\ndf.drop(df.index[[6, 8]], inplace=True) # some company employee records are unknown and some bymistake -1\n\n\ndf.plot.pie(title='Max Employee in a Company',\n            autopct=lambda x: f\"{round(x)}%\", figsize=(5, 5)).set(ylabel=\"\")\nplt.show()","8a031163":"data.query('Founded != \"-1\"').Founded.hist(bins=20, grid=False, figsize=(20,5), color='#86bf91', zorder=2, rwidth=0.9)\nplt.xlabel(\"Foundation of Company(Year)\", labelpad=20, weight='bold', size=12)\nplt.ylabel(\"No. of Company\", labelpad=20, weight='bold', size=12)\nplt.show()","b213d134":"age_bins = [0,1900, 1950,2000 , 2010]\nlabels = [\"1900 and below\", \"1901 - 1950\", \" 1951 - 2000\", \"2000-2010\"]\ndata['company_founded'] = pd.cut(data['Founded'], age_bins, labels=labels)\n\n\ndf = data.groupby(['State', 'company_founded']).size().groupby('State').cumsum().reset_index()\ndf.head()  # cummulative sum of no. of companies in a state","36663cde":"data_slider = []\nfor year_category in df['company_founded'].unique():\n    df_year = df[df['company_founded'] == year_category]\n    data_one_year = dict(\n                        type='choropleth',\n                        locations = df_year['State'],\n                        z=df_year[0].astype(float),\n                        locationmode = 'USA-states',\n                        colorscale = \"reds\",\n                        colorbar = {'title':'Count'}\n                        )\n    data_slider.append(data_one_year)\n    \nsteps = []\n\nfor i in range(len(data_slider)):\n    step = dict(method='restyle',\n                args=['visible', [False] * len(data_slider)],\n                label='Year {}'.format(labels[i]))\n    step['args'][1][i] = True\n    steps.append(step)\n\nsliders = [dict(active=0, pad={\"t\": 1}, steps=steps)] \n\nlayout = dict(title = 'Data Analytic Companies Founded', \n              geo=dict(scope='usa'), sliders=sliders)\n\nfig = dict(data=data_slider, layout=layout)\niplot(fig, show_link = True)\n","64a17b0a":"data.groupby(['Company_origin', 'Type of ownership'])['Location'].nunique().plot(kind = 'barh')\nplt.show()","daa0b014":"data.groupby('Sector').size()[1:].sort_values().plot(kind = 'bar', title= 'Job Opening in sectors')\nplt.show()","676c4b02":"data.query('Sector != \"-1\"').groupby('Sector').agg({'Salary_lowerlimit': ['size', 'mean', 'median', 'max', 'min'], 'Salary_upperlimit': [\n    'mean', 'median', 'max', 'min']}).sort_values(by=('Salary_lowerlimit', 'size'), ascending=False)","e6b5b922":"revenue_high = {\n    'Unknown \/ Non-Applicable': 0,\n     '$100 to $500 million (USD)' : 500,\n     '$50 to $100 million (USD)' : 100,\n     '$10+ billion (USD)' : 10000,\n     '-1' : 0,\n     '$10 to $25 million (USD)' : 25,\n     '$2 to $5 billion (USD)' : 5000,\n     '$1 to $5 million (USD)' : 5,\n     '$25 to $50 million (USD)' : 50,\n     'Less than $1 million (USD)' : 1,\n     '$1 to $2 billion (USD)' : 2000,\n     '$500 million to $1 billion (USD)' : 1000,\n     '$5 to $10 million (USD)' : 10,\n     '$5 to $10 billion (USD)' : 10000   \n}\n\ndata[\"Revenue_millions\"] = data.Revenue.map(revenue_high)","ea7d9231":"# correlation - revenue and salary\nimport seaborn as sns\nsns.heatmap(data.query('Revenue_millions != 0').loc[:, [\n            'Revenue_millions', 'Salary_lowerlimit', 'Salary_upperlimit']].corr(), annot=True)\nplt.show()","e9e1afb5":"data.query('Revenue_millions != 0').groupby('Revenue_millions').agg({'Salary_lowerlimit': ['size', 'mean', 'median', 'max', 'min'], 'Salary_upperlimit': [\n    'mean', 'median', 'max', 'min']}).sort_index()","bd5aab13":"from wordcloud import WordCloud, STOPWORDS\n\ndef wordcloudplot(category):\n    stopwords = set(STOPWORDS)\n    text = \" \".join(review for review in data[data.experience == category]['Job Description'].str.lower())\n    text = \" \".join([i.strip() for i in text.split(\" \") if i.lower().strip() not in ['job', 'description', 'data', 'analyst', 'analysis', 'analytic']+ list(stopwords)])\n    wordcloud = WordCloud(width=1600, height=800, background_color='white',max_words=150,prefer_horizontal=1,\n                          stopwords=stopwords, min_font_size=20).generate(text)\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis(\"off\")\n    plt.title(f'WordCloud :- Job Description for  {category}')\n    plt.tight_layout(pad=0)\n    plt.show()\n\n\ncategory = 'Junior'\nwordcloudplot(category)","f467814d":"category = 'Senior'\nwordcloudplot(category)","1d9d9708":"category = 'Not Specified'\nwordcloudplot(category)","f126ad32":"stopwords = set(STOPWORDS)\ntext = \" \".join(review for review in data['filter1'].str.lower())\nwordcloud = WordCloud(width=1600, height=800, background_color='white',max_words=300,prefer_horizontal=1,\n                          stopwords=stopwords, min_font_size=20).generate(text)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.title(f'WordCloud :- Job Title')\nplt.tight_layout(pad=0)\nplt.show()","b944b598":"NO missing Values","a094c958":"### Sector","a4595a05":"Hmm.. Tableau","b24ace69":"## Salary Estimate","ac49315c":"In Gorgia, average rating of company is 4.8, but job count and average salary is kind of lowest <br>\nIn California, average rating of company is 3.2, and job count and average salary is highest.","443c9666":"### Ownership","08adbd47":"### Revenue","ee57db7a":"### Employees","849c183d":"NO Correlation!!!!","83480862":"IF you like my work DO UPVOTE","75af0a91":"Company at different place has different rating\n\nVillage Care has headquarter in UK and NY both","fc6ded5f":"We found Village Care previously now one more TalentDash ","e82d8021":"Cognoa giving high salary to junior","be2e980f":"With Years, in CA no. of companies drastically increases.","82116a44":"Max and Minimum Salary is same despite Company Revenue","f6866fa2":"### Location","deee1673":"Job Despription","bdf252d5":"\n### Founded","c80d920c":"## Company Name","e3a8e229":"## Job Title","8dfe7ddb":"Thats total 1503 but 1501 are unique company name","91c07807":"Back to US","012f8115":"Foreign Public Companies are also in US","b5efec42":"max salary for junior is 190 OK.....","6ca5c4a7":"So 12 company has duplicate name"}}