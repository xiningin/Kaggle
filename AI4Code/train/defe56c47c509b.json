{"cell_type":{"5687fc63":"code","4ef0fdc6":"code","98ffeb59":"code","7890077f":"code","5c0959b7":"code","a5d32285":"code","24c0ae16":"code","3453f396":"code","3de5a272":"code","eb8998b8":"code","f21130c2":"code","0be116b4":"code","f1009d19":"code","a40b751a":"code","182c59ce":"code","6aae72c2":"code","52f5b85e":"code","64482843":"code","db62884a":"code","aa8c19fa":"markdown","6aceb414":"markdown","fab01533":"markdown","0aecba0b":"markdown","4806aad1":"markdown"},"source":{"5687fc63":"# Import all packages\nimport sys\nimport os\nfrom datetime import datetime\nimport random\nimport time\nfrom math import sqrt\nimport itertools\nimport io\nimport base64\n\n# Common DS libraries\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\nimport sklearn\n\n# Visualization\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport matplotlib.animation as animation\nimport seaborn as sns\nimport IPython\nfrom IPython.display import display\nfrom IPython.display import HTML\n\n# Visualization Configurations\n%matplotlib inline\nmpl.style.use('ggplot')\nsns.set_style('white')\n\n# Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom pprint import pprint","4ef0fdc6":"print(f\"Python version: {sys.version}\")\nprint(f\"pandas version: {pd.__version__}\")","98ffeb59":"df = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv\")","7890077f":"df.describe()","5c0959b7":"df.info()","a5d32285":"df.head(15)","24c0ae16":"df.sample(10)","3453f396":"fig, ax = plt.subplots(figsize=[26, 12])\nsns.barplot(x=df['Province\/State'], y=df['Recovered'], data=df[df['Country']=='Mainland China'], ax=ax)","3de5a272":"import geopandas as gpd\n\n# map plot based on country map\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\ncountry_data = list(df['Country'].unique())\ncountry_geo = list(world['name'])\n\ncountry_diff = [country for country in country_data if country not in country_geo]\ncountry_diff","eb8998b8":"df['Country'].replace(\n    {\n        'United States' : 'US', \n        'Mainland China': 'China',\n        'Hong Kong' : 'China', \n        'Macau' : 'China',\n    },\n    inplace=True\n)","f21130c2":"import geopandas as gpd\n\ndeath_sum = df.groupby('Country', sort=False)[\"Deaths\"].sum().reset_index(name ='total_deaths')\ndeath_sum = death_sum.sort_values(by=\"total_deaths\", ascending=False)\n\nmapped = world.set_index('name').join(death_sum.set_index('Country')).reset_index()\n\nto_be_mapped = 'total_deaths'\nvmin, vmax = 0, death_sum.total_deaths.iloc[0]\nfig, ax = plt.subplots(1, figsize=(25,15))\n\nmapped.dropna().plot(column=to_be_mapped, cmap='Blues', linewidth=0.8, ax=ax, edgecolors='0.8')\nax.set_title('Number of deaths around the world', fontdict={'fontsize':30})\nax.set_axis_off()\n\nsm = plt.cm.ScalarMappable(cmap='Blues', norm=plt.Normalize(vmin=vmin, vmax=vmax))\nsm._A = []\n\ncbar = fig.colorbar(sm, orientation='horizontal')","0be116b4":"# Show the first and last entry datetime\ndf['Last Update'].iloc[0], df['Last Update'].iloc[-1]","f1009d19":"# Change the datetime column type to datatime\ndf['Last Update'] =  pd.to_datetime(df['Last Update'])","a40b751a":"def plot_animation(df=df, target_column='Recovered'):\n    vmin, vmax = 0, df[target_column].max()\n    iterations = df['Last Update'].nunique()\n\n    fig = plt.figure(figsize=(26, 18)) \n    ax = fig.add_subplot(1,1,1)\n    color_map = 'Wistia'\n\n    def get_df_by_date(dof):\n        start_date = str(df['Last Update'].iloc[0].date())\n        end_date = df['Last Update'].unique()[dof-1]\n\n        data = df.copy()\n        data.loc[data['Last Update']>=end_date, target_column] = 0\n\n        death_sum = data.groupby('Country', sort=False)[target_column].sum().reset_index(name=f'total_{target_column.lower()}')\n        death_sum = death_sum.sort_values(by=f\"total_{target_column.lower()}\", ascending=False)\n\n        mapped = world.set_index('name').join(death_sum.set_index('Country')).reset_index().dropna()\n        return mapped\n\n    def init():\n        sm = plt.cm.ScalarMappable(cmap=color_map, norm=plt.Normalize(vmin=vmin, vmax=vmax))\n        sm._A = []\n\n        cbar = fig.colorbar(sm, orientation='horizontal')\n\n    def animate(frame_number):\n        ax.clear()\n        df_time = frame_number+1\n        data = get_df_by_date(df_time)\n\n        to_be_mapped = f'total_{target_column.lower()}'\n        data.plot(column=to_be_mapped, cmap=color_map, linewidth=0.8, ax=ax, edgecolors='0.8')\n        ax.set_title(f'Number of {target_column.lower()} around the world', fontdict={'fontsize':30})\n        ax.set_axis_off()\n\n    ani = animation.FuncAnimation(\n        fig, animate, frames=list(range(1,iterations)), interval=25, repeat=False, blit=False, init_func=init\n    )\n    # plt.show()\n    plt.close()\n#     ani.save('animation.gif', writer='imagemagick', fps=1)\n    return ani\n    \nani = plot_animation()\n# filename = 'animation.gif'\n# video = io.open(filename, 'r+b').read()\n# encoded = base64.b64encode(video)\n# HTML(data='''<img src=\"data:image\/gif;base64,{0}\" type=\"gif\" \/>'''.format(encoded.decode('ascii')))\nHTML(ani.to_jshtml())","182c59ce":"df['Province\/State'].unique()","6aae72c2":"import argparse\nimport json\nimport requests\nfrom urllib.request import urlopen\n\ndef get_province_coordinates(province_state_name):\n    \"\"\"get the coordinates for a given city\/province\/state name\"\"\"\n\n    province_state_name = province_state_name.replace(' ', '+')\n    \n    base_url = 'https:\/\/nominatim.openstreetmap.org\/search.php?'\n    url = base_url + f'q={province_state_name}'\n\n    with urlopen(url) as result:\n        s = result.read()\n        # Decode UTF-8 bytes to Unicode, and convert single quotes \n        # to double quotes to make it valid JSON\n        # The coordinates data is stores in the first JSON data\n        my_json = s.decode('utf8').replace(\"'\", '\"')\n        api_payload = my_json[my_json.find('nominatim_results '):]\n        api_payload = api_payload[:api_payload.find(';')]\n        json_data = api_payload[api_payload.find('{'):]\n        json_data = json_data[:json_data.find('}')+1]\n#         print(api_payload)\n\n        data = json.loads(json_data)\n#         print(data['lat'], data['lon'])\n        return data['lat'], data['lon']\n\ndef get_coordinate_map(show_result=False):\n    \"\"\"\n    Get a dictionary of city coordinates\n    Key is the city name, value is dict of lat and lon\n    \"\"\"\n    \n    city_dict = {}\n    for city in df['Province\/State'].dropna().unique():\n        _lat, _lon = get_province_coordinates(city)\n        if show_result:\n            print(f'-- city: {city}')\n            print(f'------ lat: {_lat}')\n            print(f'------ lon: {_lon}\\n')\n\n        city_dict[city] = dict(lat=_lat, lon=_lon)\n        \n    return city_dict\n\nprint(get_coordinate_map()['New South Wales'])","52f5b85e":"df.groupby(\"Province\/State\")[['Confirmed', 'Deaths', 'Recovered']].sum().reset_index()","64482843":"def get_city_numbers_map():\n    _data = df.groupby(\"Province\/State\")[['Confirmed', 'Deaths', 'Recovered']].sum().reset_index()\n    city_number_map = {}\n    for city in _data[\"Province\/State\"]:\n        city_number_map[city] = dict(\n            Confirmed=_data.loc[_data['Province\/State']==city]['Confirmed'],\n            Deaths=_data.loc[_data['Province\/State']==city]['Deaths'],\n            Recovered=_data.loc[_data['Province\/State']==city]['Recovered'],\n        )\n    return city_number_map","db62884a":"from mpl_toolkits.basemap import Basemap\n\nCITY_COORS = get_coordinate_map()\nCITY_NUM_TOTAL = get_city_numbers_map()\n# target_column = 'Deaths'\n\ndef plot_city_animation(df=df, target_column='Confirmed'):\n    iterations = df['Last Update'].nunique()\n\n    fig = plt.figure(figsize=(26, 18)) \n    ax = fig.add_subplot(1,1,1)\n\n    base_map = Basemap(projection='eck4',lon_0=0,resolution='c')\n    base_map.drawcoastlines(linewidth=0.25)\n    base_map.drawcountries(linewidth=0.25)\n    base_map.drawstates(linewidth=0.25)\n    base_map.drawmapboundary()\n    base_map.fillcontinents(color='lightgray', zorder=1)\n    scat = base_map.scatter([], [], ax=ax)\n#     day_label = ax.text(-124,26,f\"{df['Last Update'].iloc[0]}\",fontsize=30)\n\n    def get_data_this_time(dof):\n        start_date = str(df['Last Update'].iloc[0].date())\n        end_date = df['Last Update'].unique()[dof-1]\n\n        data = df.copy()\n        return data.loc[data['Last Update']<=end_date]\n\n    def get_total(df, city, target_column):\n        _data = df.groupby('Province\/State').sum().reset_index()\n        return _data.loc[_data['Province\/State']==city][target_column]\n\n    def get_scale_marker_size(number, old_max, scale_max):\n        \"\"\"Return a int number within the range 0 ~ scale_max for better display on map\"\"\"\n        \n        if number == 0:\n            return 0\n        \n        if float(old_max) < scale_max:\n            return number\n        \n        old_value = number\n        new_max = 50\n        new_min = 0\n        old_min = 0\n        new_value = (((old_value - old_min) * (new_max - old_min)) \/ (old_max - old_min)) + 0\n        \n        return 1 if 0<float(new_value)<1 else int(new_value)\n\n    def animate(frame_number):\n        df_time = frame_number+1\n        data = get_data_this_time(df_time)\n\n        for city in data['Province\/State'].dropna().unique():\n            x, y = base_map(CITY_COORS[city]['lon'], CITY_COORS[city]['lat'])\n            total = int(get_total(data, city, target_column))\n            city_max = CITY_NUM_TOTAL[city][target_column]\n            \n            marker_size = get_scale_marker_size(total, city_max, scale_max=50)\n            \n            base_map.plot(\n                x,y,marker='o',color='Red',alpha=0.5,markersize=marker_size, ax=ax\n            )\n\n#             day_label.set_text(f\"{df['Last Update'].iloc[df_time]}\")\n    #         plt.text(-124,26,f\"{df['Last Update'].iloc[df_time]}\",fontsize=20)\n\n    ani = animation.FuncAnimation(fig, animate, frames=list(range(1,iterations)), interval=25, repeat=False, blit=False)\n    plt.title(f'Number of {target_column.lower()} around the world', fontdict={'fontsize':30})\n    # plt.show()\n    plt.close()\n\n    return ani\n    \nani_city = plot_city_animation()\n# filename = 'animation.gif'\n# video = io.open(filename, 'r+b').read()\n# encoded = base64.b64encode(video)\n# HTML(data='''<img src=\"data:image\/gif;base64,{0}\" type=\"gif\" \/>'''.format(encoded.decode('ascii')))\nHTML(ani_city.to_jshtml())","aa8c19fa":"This notebooks was finished in rush so I appologize if thers is any bugs or code is not optimized in advance. However, it should be sufficcient for a strat up code.\nThe Coronavirus is a tragedy and I do hope it can be stopped soon.\n\nFeel free to ask anyquestions. \n\nPlease upvote if you like it.","6aceb414":"# Plot animated world map","fab01533":"As we can see here, there is not much difference.\nThis is because the number in China is too large so the small numbers are too small to show on other countries\n\n# Let plot the animated city numbers on world map","0aecba0b":"# Let's take a look at some info about this dataset","4806aad1":"# Plot the world map with number of deaths"}}