{"cell_type":{"8a14d86e":"code","e9e94f3f":"code","9517b5f4":"code","efa2a3f1":"code","5dea5f73":"code","e96e9aef":"code","efa29147":"code","511c8bbc":"code","c1869db3":"code","6904fe2e":"markdown","aeddf7f9":"markdown","bc95322a":"markdown","72c93d35":"markdown"},"source":{"8a14d86e":"import os\nimport numpy as np\nimport cv2\nimport pandas as pd\nimport pydicom\n\nfrom PIL import Image\nfrom matplotlib import cm\nfrom matplotlib import pyplot as plt\nfrom matplotlib import patches as patches\n\n\nprint(os.listdir(\"..\/input\"))","e9e94f3f":"sample_path = '..\/input\/sample images'\ndf = pd.read_csv(os.path.join(sample_path, 'train-rle-sample.csv'), header=None)\n\nimageId = df[0]\nencodedPixels = df[1]\n\ndf.head(len(df))","9517b5f4":"fig, ax = plt.subplots(2, 5, figsize=(20,10))\n\nfor i in range(len(df)):\n    ds = pydicom.read_file(os.path.join(sample_path, imageId[i] + '.dcm'))\n    img = ds.pixel_array\n    img_mem = Image.fromarray(img)\n    \n    if i < 5:\n        ax[0][i].imshow(img_mem, cmap='bone')\n        ax[0][i].set_title('Index: {}'.format(i))\n    else:\n        ax[1][i-5].imshow(img_mem, cmap='bone')\n        ax[1][i-5].set_title('Index: {}'.format(i))\n        \nplt.show()","efa2a3f1":"def mask2rle(img, width, height):\n    rle = []\n    lastColor = 0;\n    currentPixel = 0;\n    runStart = -1;\n    runLength = 0;\n\n    for x in range(width):\n        for y in range(height):\n            currentColor = img[x][y]\n            if currentColor != lastColor:\n                if currentColor == 255:\n                    runStart = currentPixel;\n                    runLength = 1;\n                else:\n                    rle.append(str(runStart));\n                    rle.append(str(runLength));\n                    runStart = -1;\n                    runLength = 0;\n                    currentPixel = 0;\n            elif runStart > -1:\n                runLength += 1\n            lastColor = currentColor;\n            currentPixel+=1;\n\n    return \" \".join(rle)\n\ndef rle2mask(rle, width, height):\n    mask= np.zeros(width* height)\n    array = np.asarray([int(x) for x in rle.split()])\n    starts = array[0::2]\n    lengths = array[1::2]\n\n    current_position = 0\n    for index, start in enumerate(starts):\n        current_position += start\n        mask[current_position:current_position+lengths[index]] = 255\n        current_position += lengths[index]\n\n    return mask.reshape(width, height)\n\ndef bounding_box(img):\n    x = np.any(img, axis=1)\n    y = np.any(img, axis=0)\n    xmin, xmax = np.where(x)[0][[0, -1]]\n    ymin, ymax = np.where(y)[0][[0, -1]]\n\n    return xmin, xmax, ymin, ymax","5dea5f73":"start_idx = 5\nnum_vis = 3\nfig, ax = plt.subplots(num_vis, 3, figsize=(20, 20))\n\nfor idx in range(num_vis):\n    index = idx + start_idx\n    print('Sample Image:', imageId[index] + '.dcm')\n\n    ds = pydicom.read_file(os.path.join(sample_path, imageId[index] + '.dcm'))\n    img = ds.pixel_array\n    img_mem = Image.fromarray(img)\n\n    # Original image\n    ax[idx][0].imshow(img_mem, cmap=\"bone\")\n    ax[idx][0].set_title('Original')\n\n    # Masking image\n    rleToMask = rle2mask(\n        rle=encodedPixels[index],\n        width=img.shape[0],\n        height=img.shape[1]\n    ).T\n    ax[idx][1].imshow(img_mem, cmap=\"bone\")\n    ax[idx][1].imshow(rleToMask, alpha=0.3, cmap=\"Reds\")\n    ax[idx][1].set_title('Masking')\n\n    # Bounding box\n    xmin, xmax, ymin, ymax = bounding_box(img=rleToMask)\n    rect = patches.Rectangle((ymin, xmin), ymax-ymin, xmax-xmin, linewidth=2, edgecolor='y', facecolor='none')\n    ax[idx][2].add_patch(rect)\n    ax[idx][2].imshow(img_mem, cmap=\"bone\")\n    ax[idx][2].set_title('Bounding Box')\n\nplt.show()","e96e9aef":"convert_path = '.\/convert_dir'\nif not os.path.isdir(convert_path):\n    os.mkdir(convert_path)\nelse:\n    pass\n\nfor f in os.listdir(sample_path):\n    if f[-3:] == 'dcm':\n        ds = pydicom.read_file(sample_path + '\/' + f)\n        img = ds.pixel_array\n        cv2.imwrite(convert_path + '\/' + f.replace('.dcm', '.png'), img)\n        \nos.listdir(convert_path)","efa29147":"mask_path = convert_path + '\/mask_dir'\nif not os.path.isdir(mask_path):\n    os.mkdir(mask_path)\nelse:\n    pass\n\nfor index in range(len(df)):\n    if encodedPixels[index] != '-1':\n#         img = cv2.imread(os.path.join(convert_path, imageId[index] + '.png'))\n        ds = pydicom.read_file(os.path.join(sample_path, imageId[index] + '.dcm'))\n        img = ds.pixel_array\n        img_mem = Image.fromarray(img)\n        img_size = img.shape\n        \n        rleToMask = rle2mask(\n            rle=encodedPixels[index],\n            width=img_size[0],\n            height=img_size[1]\n        ).T\n        rleToMask = rleToMask.astype('int32')   \n        \n        cv2.imwrite(mask_path + '\/{}_mask.png'.format(imageId[index]), rleToMask)\n        \n    elif encodedPixels[index] == '-1':\n#         img = cv2.imread(os.path.join(convert_path, imageId[index] + '.png'))\n        ds = pydicom.read_file(os.path.join(sample_path, imageId[index] + '.dcm'))\n        img = ds.pixel_array\n        img_mem = Image.fromarray(img)\n        \n        mask_0 = np.zeros((img.shape[:2]))\n        mask_0 = mask_0.astype('int32')\n        \n        cv2.imwrite(mask_path + '\/{}_mask.png'.format(imageId[index]), mask_0)\n        \nos.listdir(mask_path)","511c8bbc":"mask_list = os.listdir(mask_path)\nfig, ax = plt.subplots(2, 5, figsize=(20, 10))\n\nfor i in range(len(mask_list)):\n    img = cv2.imread(os.path.join(mask_path, imageId[i] + '_mask.png'))\n#     img = img[:,:,0]\n    if i < 5:\n        ax[0][i].imshow(img)\n        ax[0][i].set_title('Index: {}'.format(i))\n    else:\n        ax[1][i-5].imshow(img)\n        ax[1][i-5].set_title('Index: {}'.format(i))\n        \nplt.show()","c1869db3":"! rm -rf convert_dir","6904fe2e":"# Create mask images","aeddf7f9":"# Convert DCM to PNG","bc95322a":"# Check the sample images","72c93d35":"# Pneumothorax detection"}}