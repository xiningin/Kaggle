{"cell_type":{"32a72a65":"code","149392e3":"code","374230d5":"code","c3c9e2bc":"code","fb2e8406":"code","b004762b":"code","31e173c9":"code","a59ad4e8":"code","b1676f58":"code","284787c7":"code","23bf25ba":"markdown","4913cadd":"markdown","a5bd5b57":"markdown","60380894":"markdown","0090eabe":"markdown","ff5e878d":"markdown"},"source":{"32a72a65":"import os\nimport time\nimport math\n\nimport random\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","149392e3":"DATA_PATH = \"\/kaggle\/input\/stanford-covid-vaccine\/\"","374230d5":"df_train = pd.read_json(DATA_PATH + 'train.json', lines=True)\ndf_test = pd.read_json(DATA_PATH + 'test.json', lines=True)\nsub = pd.read_csv(DATA_PATH + 'sample_submission.csv')","c3c9e2bc":"idx = 1","fb2e8406":"bpp = np.load(DATA_PATH + f\"bpps\/{df_train['id'][idx]}.npy\")","b004762b":"structure = df_train['structure'][idx]\nstructure","31e173c9":"def get_couples(structure):\n    \"\"\"\n    For each closing parenthesis, I find the matching opening one and store their index in the couples list.\n    The assigned list is used to keep track of the assigned opening parenthesis\n    \"\"\"\n    opened = [idx for idx, i in enumerate(structure) if i == '(']\n    closed = [idx for idx, i in enumerate(structure) if i == ')']\n\n    assert len(opened) == len(closed)\n\n\n    assigned = []\n    couples = []\n\n    for close_idx in closed:\n        for open_idx in opened:\n            if open_idx < close_idx:\n                if open_idx not in assigned:\n                    candidate = open_idx\n            else:\n                break\n        assigned.append(candidate)\n        couples.append([candidate, close_idx])\n        \n    assert len(couples) == len(opened)\n    \n    return couples","a59ad4e8":"def build_matrix(couples, size):\n    mat = np.zeros((size, size))\n    \n    for i in range(size):  # neigbouring bases are linked as well\n        if i < size - 1:\n            mat[i, i + 1] = 1\n        if i > 0:\n            mat[i, i - 1] = 1\n    \n    for i, j in couples:\n        mat[i, j] = 1\n        mat[j, i] = 1\n        \n    return mat","b1676f58":"couples = get_couples(structure)\nmat = build_matrix(couples, len(structure))","284787c7":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(11.35, 5))\n\n\nim = axes[0].imshow(mat, interpolation='none')\naxes[0].set_title('Graph of the structure')\n\nim = axes[1].imshow(bpp, interpolation='none')\naxes[1].set_title('BPP Matrix')\n\n\nfig.subplots_adjust(right=0.8)\ncbar_ax = fig.add_axes([0.85, 0.15, 0.05, 0.7])\nfig.colorbar(im, cax=cbar_ax)\n\nplt.show()","23bf25ba":"## Imports","4913cadd":"# Intialization","a5bd5b57":"## Converting structures to matrices","60380894":"## Data","0090eabe":"## Loading a structure and the associated bpp","ff5e878d":"### It appears that the paired base indicate high BPP values."}}