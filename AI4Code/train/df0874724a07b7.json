{"cell_type":{"5307b900":"code","be385e09":"code","2495c06a":"code","bd0d2e11":"code","44f98938":"code","c21de23a":"code","14a4d320":"code","1a3eef01":"code","72d49d45":"code","3abae820":"code","454dafc2":"code","e5145af5":"code","7047d19a":"code","3651bbaf":"code","ec55c65c":"code","b6a22721":"code","b501be96":"code","0a021505":"code","f5c3e5c0":"code","be8cbc84":"code","4dba3984":"code","a1c2583a":"code","d04fb5de":"code","05024fdd":"markdown"},"source":{"5307b900":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","be385e09":"import plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\n\nfrom pandas_profiling import ProfileReport\nimport seaborn as sns\nfrom sklearn import metrics\nfrom scipy import stats\n\nfrom copy import deepcopy\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score,confusion_matrix\nfrom sklearn.metrics import accuracy_score, mean_squared_error","2495c06a":"train_df = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ntest_df = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')\nsub_df = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')\nshops_df = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\nitems_df = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\nitem_categories_df = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')","bd0d2e11":"train_df.head()","44f98938":"test_df.head()","c21de23a":"shops_df.head()","14a4d320":"items_df.head()","1a3eef01":"train_df.describe()","72d49d45":"train_df.isnull().sum()","3abae820":"train_df.value_counts","454dafc2":"train_df.shape","e5145af5":"train_df.drop(['date_block_num','item_price'], axis=1, inplace=True)","7047d19a":"train_df['date'] = pd.to_datetime(train_df['date'], dayfirst=True)\ntrain_df['date'] = train_df['date'].apply(lambda x: x.strftime('%Y-%m'))\ntrain_df.head()","3651bbaf":"df = train_df.groupby(['date','shop_id','item_id']).sum()\ndf = df.pivot_table(index=['shop_id','item_id'], columns='date', values='item_cnt_day', fill_value=0)\ndf.reset_index(inplace=True)\ndf.head()","ec55c65c":"test_df = pd.merge(test_df, df, on=['shop_id','item_id'], how='left')\ntest_df.drop(['ID', '2013-01'], axis=1, inplace=True)\ntest_df = test_df.fillna(0)\ntest_df.head()","b6a22721":"Y_train = df['2015-10'].values\nX_train = df.drop(['2015-10'], axis = 1)\nX_test = test_df\n\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape)","b501be96":"x_train, x_test, y_train, y_test = train_test_split( X_train, Y_train, test_size=0.2, random_state=101)\nprint ('Train set:', x_train.shape,  y_train.shape)\nprint ('Test set:', x_test.shape,  y_test.shape)","0a021505":"param_grid = {\n    'n_estimators': [5, 10, 15, 20],\n    'max_depth': [2, 5, 7, 9]\n}\n\n\n\n# Instantiate model with 100 decision trees\nclf = XGBRegressor(random_state = 42)\n\nclf.fit(x_train, y_train)","f5c3e5c0":"# Use the forest's predict method on the test data\npredictions = clf.predict(x_test)\n\n# Calculate the absolute errors\nerrors = abs(predictions - y_test)\n\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')","be8cbc84":"preds=pd.Series(clf.predict(test_df))","4dba3984":"submission = pd.DataFrame({\n    \"ID\": test_df.index, \n    \"item_cnt_month\": preds\n})","a1c2583a":"submission.head()","d04fb5de":"submission.to_csv('xgb_submission.csv', index=False)","05024fdd":"Simple Regressor"}}