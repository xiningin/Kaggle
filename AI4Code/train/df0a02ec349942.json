{"cell_type":{"084ebcaa":"code","f64a6925":"code","31890424":"code","be2b838b":"code","a47b81ae":"code","a80e41a1":"code","a2f39bac":"code","9833b9bf":"code","c96f687d":"code","896dcbfc":"code","77d620fd":"code","6792c84f":"code","807dc90e":"code","c2bad66a":"code","395915ce":"code","f87d3fff":"code","9d58ec26":"code","7027456c":"code","debee805":"code","e077a8a9":"code","c6ba83e2":"markdown","6cde07d3":"markdown","d3c27501":"markdown","0f7b46c9":"markdown","661c7cce":"markdown","9d145aac":"markdown"},"source":{"084ebcaa":"import numpy as np\nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport cv2\nfrom tqdm import tqdm\n\nimport random\nimport torch\nfrom torch.utils.data import DataLoader, Dataset\nfrom torch.utils.data.sampler import SequentialSampler\n\nimport torchvision\nfrom torchvision.models.detection.faster_rcnn import FastRCNNPredictor\nfrom torchvision.models.detection import FasterRCNN\nfrom torchvision.models.detection.rpn import AnchorGenerator\n\nfrom PIL import Image\n\nimport albumentations as A\nfrom albumentations.pytorch.transforms import ToTensorV2","f64a6925":"def set_seeds(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.backends.cudnn.deterministic = True\n\nset_seeds();","31890424":"IMG_DIR = '\/kaggle\/input\/object-detection-dice-1024x1024\/dice\/images'\ndf = pd.read_csv('\/kaggle\/input\/object-detection-dice-1024x1024\/dice\/data.csv')\ndf","be2b838b":"def display_boxes(image, boxes, labels):\n    fig, ax = plt.subplots(1, 1, figsize=(16, 8))\n    ax.set_axis_off()\n\n    alpha_box = 0.4\n    text_height = 25\n    text_width = 20\n    color = (0, 255, 0)\n\n    for box, label in zip(boxes, labels):\n        output = image.copy()\n        output = cv2.rectangle(image, (int(box[0]), int(box[1])), (int(box[2]), int(box[3])), color, 2)\n\n        overlay_text = image.copy()\n\n        cv2.rectangle(overlay_text, (box[0], box[1]-7-text_height),\n                      (box[0]+text_width+2, box[1]), color, -1)\n\n        cv2.addWeighted(overlay_text, alpha_box, output, 1 - alpha_box, 0, output)\n        cv2.putText(output, str(label), (box[0], box[1]-5),\n                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2, cv2.LINE_AA)\n\n    plt.imshow(image) \n    print(image.shape)   ","a47b81ae":"image_id = 'i.rf.f6f93b07ea662b0526a5bc10b5ff2677'\nimage_path = os.path.join(IMG_DIR, (image_id + '.jpg'))\nimage = cv2.imread(image_path)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) \nboxes = df.loc[df['image_id'] == image_id, ['x_min', 'y_min', 'x_max', 'y_max']].values\nlabels = df.loc[df['image_id'] == image_id, 'class'].values\n\ndisplay_boxes(image, boxes, labels)","a80e41a1":"BATCH_SIZE = 8","a2f39bac":"image_ids = df['image_id'].unique()\nrandom.shuffle(image_ids)\ntrain_ids = image_ids[:300]\nvalid_ids = image_ids[300:]","9833b9bf":"train_df = df[df['image_id'].isin(train_ids)]\nvalid_df = df[df['image_id'].isin(valid_ids)]\nvalid_df.shape, train_df.shape","c96f687d":"class DiceDataset(Dataset):\n\n    def __init__(self, dataframe, image_dir, transforms=None):\n        super().__init__()\n\n        self.image_ids = dataframe['image_id'].unique()\n        self.df = dataframe\n        self.image_dir = image_dir\n        self.transforms = transforms\n\n    def __getitem__(self, index: int):\n\n        image_id = self.image_ids[index]\n        records = self.df[self.df['image_id'] == image_id]\n\n        image = cv2.imread(f'{self.image_dir}\/{image_id}.jpg', cv2.IMREAD_COLOR)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\n        image \/= 255.0\n\n        boxes = records[['x_min', 'y_min', 'x_max', 'y_max']].to_numpy()\n        area = (boxes[:, 3] - boxes[:, 1]) * (boxes[:, 2] - boxes[:, 0])\n        area = torch.as_tensor(area, dtype=torch.float32)\n\n        labels = torch.tensor(records['class'].to_numpy(), dtype=torch.int64)\n        \n        iscrowd = torch.zeros((records.shape[0],), dtype=torch.int64)\n        \n        target = {}\n        target['boxes'] = boxes\n        target['labels'] = labels\n        target['image_id'] = torch.tensor([index])\n        target['area'] = area\n        target['iscrowd'] = iscrowd\n\n        if self.transforms:\n            sample = {\n                'image': image,\n                'bboxes': target['boxes'],\n                'labels': labels\n            }\n            sample = self.transforms(**sample)\n            image = sample['image']\n            \n            target['boxes'] =  torch.tensor(sample['bboxes']).float()\n\n        return image, target, image_id\n\n    def __len__(self) -> int:\n        return self.image_ids.shape[0]","896dcbfc":"# Albumentations\ndef get_train_transform():\n    return A.Compose([\n        A.Flip(0.5),\n        ToTensorV2(p=1.0)\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\n\ndef get_valid_transform():\n    return A.Compose([\n        ToTensorV2(p=1.0)\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})","77d620fd":"train_dataset = DiceDataset(train_df, IMG_DIR, get_train_transform())\nvalid_dataset = DiceDataset(valid_df, IMG_DIR, get_valid_transform())","6792c84f":"def collate_fn(batch):\n    return tuple(zip(*batch))\n\ntrain_data_loader = DataLoader(\n    train_dataset,\n    batch_size=BATCH_SIZE,\n    shuffle=True,\n    #num_workers=4,\n    collate_fn=collate_fn\n)\n\nvalid_data_loader = DataLoader(\n    valid_dataset,\n    batch_size=BATCH_SIZE,\n    shuffle=False,\n    #num_workers=4,\n    collate_fn=collate_fn\n)","807dc90e":"model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)","c2bad66a":"num_classes = 7  # + background\n\n# get number of input features for the classifier\nin_features = model.roi_heads.box_predictor.cls_score.in_features\n\n# replace the pre-trained head with a new one\nmodel.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)","395915ce":"device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\nmodel.to(device)\n\nparams = [p for p in model.parameters() if p.requires_grad]\noptimizer = torch.optim.SGD(params, lr=0.005, momentum=0.9, weight_decay=0.0005)\n\n# lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=3, gamma=0.1)\nlr_scheduler = None\n\ndevice","f87d3fff":"class Averager:\n    def __init__(self):\n        self.current_total = 0.0\n        self.iterations = 0.0\n\n    def send(self, value):\n        self.current_total += value\n        self.iterations += 1\n\n    @property\n    def value(self):\n        if self.iterations == 0:\n            return 0\n        else:\n            return 1.0 * self.current_total \/ self.iterations\n\n    def reset(self):\n        self.current_total = 0.0\n        self.iterations = 0.0","9d58ec26":"EPOCHES = 5\nPRINT_STEP = 10\n\nloss_hist = Averager()\nitr = 1\n\nfor epoch in range(EPOCHES):\n    loss_hist.reset()\n    \n    for images, targets, image_ids in train_data_loader:\n        \n        images = list(image.to(device) for image in images)\n        targets = [{k: v.to(device) for k, v in t.items()} for t in targets]\n\n        loss_dict = model(images, targets)\n\n        losses = sum(loss for loss in loss_dict.values())\n        loss_value = losses.item()\n\n        loss_hist.send(loss_value)\n\n        optimizer.zero_grad()\n        losses.backward()\n        optimizer.step()\n\n        if itr % PRINT_STEP == 0:\n            print(f\"Iteration #{itr} loss: {loss_value}\")\n\n        itr += 1\n    \n    # update the learning rate\n    if lr_scheduler is not None:\n        lr_scheduler.step()\n\n    print(f\"Epoch #{epoch} loss: {loss_hist.value}\")  ","7027456c":"torch.save(model.state_dict(), 'fasterrcnn_resnet50_fpn.pth')","debee805":"images, targets, image_ids = next(iter(valid_data_loader))\n\nimages = list(img.to(device) for img in images)\ntargets = [{k: v.to(device) for k, v in t.items()} for t in targets]","e077a8a9":"# Example\nimg_index = 1\n\nsample = images[1].permute(1,2,0).cpu().numpy()\nboxes = targets[1]['boxes'].cpu().numpy().astype(np.int32)\nlabels = targets[1]['labels'].cpu().numpy().astype(np.int32)\n\ndisplay_boxes(sample, boxes, labels)","c6ba83e2":"# Model","6cde07d3":"# Object Detection - dice (ResNet50)","d3c27501":"# Training","0f7b46c9":"Preprocessing: https:\/\/www.kaggle.com\/annaszal\/object-detection-dice-preprocessing","661c7cce":"# Datasets","9d145aac":"# Visualization"}}