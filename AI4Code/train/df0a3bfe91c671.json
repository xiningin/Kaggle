{"cell_type":{"0e76b76f":"code","cd173e2c":"code","18780c79":"code","0aed68db":"code","66d75f73":"code","ac85e2a2":"code","44de106c":"code","c023dd48":"code","539c4c7a":"code","9c5c043c":"code","1c2ddb92":"code","edaadb1e":"code","bdd7afd5":"code","8e590798":"code","38eda034":"code","95fc8b67":"code","6ba3ed3f":"code","21fda9c2":"code","496730d4":"code","1ca08c58":"code","5eac181d":"code","5ebacb2e":"code","d68a06a3":"code","f1ce7f74":"code","6a3078c8":"code","aca7f135":"code","1866d3ff":"code","926b9979":"code","57962f82":"code","7dfcae99":"code","e5dfe8e4":"code","a170450b":"code","a822eeaf":"markdown","ce0e088c":"markdown","df98b98e":"markdown","7cc434c6":"markdown","5bdc5963":"markdown","d130b743":"markdown"},"source":{"0e76b76f":"import numpy as np \nimport pandas as pd \nimport math\nimport random\nimport seaborn as sns  \nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport plotly.express as px\n\nfrom sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV \nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\n\nfrom sklearn.cluster import KMeans","cd173e2c":"gender_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')","18780c79":"X_train = train.reset_index()\nX_test = test.reset_index()\nY = train.Survived\n\nX_dropna = X_train.dropna()\nX_test_dropna = X_test.dropna()\n\nDframe = [X_train, X_test]","0aed68db":"print(X_train.shape, X_test.shape)","66d75f73":"print(X_train.isnull().sum())\nprint(X_test.isnull().sum())","ac85e2a2":"for frame in Dframe:\n    \n    frame['Title'] = frame.Name.str.split(',').str[1].str.split('.').str[0].str.strip()\n    frame['Title'] = frame['Title'].replace('Ms','Miss')\n    frame['Title'] = frame['Title'].replace('Mlle','Miss')\n    frame['Title'] = frame['Title'].replace('Mme','Mrs')\n\n    frame['famous_cabin'] = frame[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\n    frame['Deck'] = frame['Cabin'].apply(lambda s: s[0] if pd.notnull(s) else 'M')\n    frame.loc[(frame['Deck'] == 'T'), 'Deck'] = 'A'\n    \n    frame['IsWomanOrBoy'] = ((frame.Title == 'Master') | (frame.Sex == 'female'))\n    \n    frame['FamilySize'] = frame['SibSp'] + frame['Parch'] + 1\n    frame['IsAlone'] = 0\n    frame.loc[frame['FamilySize'] == 1, 'IsAlone'] = 1\n    \n    frame['Embarked'] = frame['Embarked'].fillna('S')\n    frame['Fare'] = frame['Fare'].fillna(frame['Fare'].median())\n    \n    frame['Name_length'] = frame['Name'].apply(len)","44de106c":"X_train.head(2)","c023dd48":"X_test.head(2)","539c4c7a":"plt.figure(figsize=[12,10])\n\nplt.subplot(331)\nsns.distplot(X_train['Pclass'], color=\"k\")\n\nplt.subplot (332)                         \nsns.barplot('Sex', 'Survived', data=X_train)\n\nplt.subplot (333)\nsns.distplot(X_dropna['Age']) \n\nplt.subplot (334)\n#sns.distplot(X['SibSp'])\nsns.barplot('SibSp', 'Survived', data=X_train)\n\nplt.subplot (335)\nsns.barplot('Parch', 'Survived', data=X_train)\n\nplt.subplot (336)\nsns.distplot(X_train['Fare'])\n#train['Fare'].hist()\n\nplt.subplot (337)\nsns.barplot('Embarked', 'Survived', data=X_train)","9c5c043c":"X_dropna_categor = pd.get_dummies(X_dropna) \nXtest_dropna_categor = pd.get_dummies(X_test_dropna) \n\n# Surviving girls:\nSex_female_Survived = X_dropna_categor.loc[(X_dropna_categor.Sex_female == 1) & (X_dropna_categor.Survived == 1)]\n# Dead girls:\nSex_female_NoSurvived = X_dropna_categor.loc[(X_dropna_categor.Sex_female == 1) & (X_dropna_categor.Survived == 0)]\n# Surviving guys:\nX_Sex_male_Survived = X_dropna_categor.loc[(X_dropna_categor.Sex_male == 1) & (X_dropna_categor.Survived == 1)] \n# Dead guys:\nX_Sex_male_NoSurvived = X_dropna_categor.loc[(X_dropna_categor.Sex_male == 1) & (X_dropna_categor.Survived == 0)]\n\nX_test_male = Xtest_dropna_categor.loc[Xtest_dropna_categor.Sex_male == 1]\nX_test_female = Xtest_dropna_categor.loc[Xtest_dropna_categor.Sex_female == 1]","1c2ddb92":"# age distribution of survivors and non-survivors:\nsns.set(rc={'figure.figsize': (15, 9)})\nplt.subplot (221)\nsns.distplot(Sex_female_Survived['Age'] , kde_kws = {'color': 'g', 'lw':1, 'label': 'Sex_female_Survived' })\nplt.subplot (222)\nsns.distplot(Sex_female_NoSurvived['Age'] , kde_kws = {'color': 'r', 'lw':1, 'label': 'Sex_female_NoSurvived' })\nplt.subplot (223)\nsns.distplot(X_Sex_male_Survived['Age'] , kde_kws = {'color': 'blue', 'lw':1, 'label': 'X_Sex_male_Survived' })\nplt.subplot (224)\nsns.distplot(X_Sex_male_NoSurvived['Age'] , kde_kws = {'color': 'gray', 'lw':1, 'label': 'X_Sex_male_NoSurvived' })","edaadb1e":"class Confidence_interval(BaseEstimator, TransformerMixin):\n    \n    def __init__(self, index_isnull, group_age):\n        self.index_isnull = index_isnull\n        self.group_age = group_age\n        \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X):\n        mean = self.group_age['Age'].mean()\n        std = self.group_age['Age'].std()\n        shape = self.group_age['Age'].shape[0]\n        standard_error_ofthe_mean = std \/ math.sqrt(shape)\n        \n        for i in self.index_isnull:\n            random_mean = random.uniform(\n                mean-(1.96*standard_error_ofthe_mean), \n                mean+(1.96*standard_error_ofthe_mean))\n            X.at[i, 'Age'] = int(random_mean) \n         \n        return X","bdd7afd5":"confidence_interval_age_pipeline_female_Survived = Pipeline([\n        ('confidence_interval', Confidence_interval(X_train.loc[\n            (X_train['Sex']=='female') & \n            (X_train['Survived']==1) & \n            (X_train['Age'].isnull())].index, Sex_female_Survived))\n    ])\n\n\nconfidence_interval_age_pipeline_female_NoSurvived = Pipeline([\n        ('confidence_interval', Confidence_interval(X_train.loc[\n            (X_train['Sex']=='female') & \n            (X_train['Survived']==0) & \n            (X_train['Age'].isnull())].index, Sex_female_NoSurvived))\n    ])\n\nconfidence_interval_age_pipeline_male_Survived = Pipeline([\n        ('confidence_interval', Confidence_interval(X_train.loc[\n            (X_train['Sex']=='male') & \n            (X_train['Survived']==1) & \n            (X_train['Age'].isnull())].index, X_Sex_male_Survived))\n    ])\n\nconfidence_interval_age_pipeline_male_NoSurvived = Pipeline([\n        ('confidence_interval', Confidence_interval(X_train.loc[\n            (X_train['Sex']=='male') & \n            (X_train['Survived']==0) & \n            (X_train['Age'].isnull())].index, X_Sex_male_NoSurvived))\n    ])\n\n\nconfidence_interval_age_pipeline_test_male = Pipeline([\n        ('confidence_interval', Confidence_interval(X_test.loc[\n            (X_test['Sex']=='male') & \n            (X_test['Age'].isnull())].index, X_test_male))\n    ])\n\nconfidence_interval_age_pipeline_test_female = Pipeline([\n        ('confidence_interval', Confidence_interval(X_test.loc[\n            (X_test['Sex']=='female') & \n            (X_test['Age'].isnull())].index, X_test_female))\n    ])\n","8e590798":"full_pipeline_train = FeatureUnion(transformer_list=[\n        (\"confidence_interval_age_pipeline_female_Survived\", confidence_interval_age_pipeline_female_Survived),\n        (\"confidence_interval_age_pipeline_female_NoSurvived\", confidence_interval_age_pipeline_female_NoSurvived),\n        (\"confidence_interval_age_pipeline_male_Survived\", confidence_interval_age_pipeline_male_Survived),\n        (\"confidence_interval_age_pipeline_male_NoSurvived\", confidence_interval_age_pipeline_male_NoSurvived)\n    ])\n\nfull_pipeline_test = FeatureUnion(transformer_list=[\n        (\"confidence_interval_age_pipeline_test_male\", confidence_interval_age_pipeline_test_male),\n        (\"confidence_interval_age_pipeline_test_female\", confidence_interval_age_pipeline_test_female)\n    ])","38eda034":"X_train = pd.DataFrame(full_pipeline_train.fit_transform(X_train)[:,:20], columns=X_train.columns)\nX_test = pd.DataFrame(full_pipeline_test.fit_transform(X_test)[:,:19], columns=X_test.columns)","95fc8b67":"X_test['Age']  = X_test['Age'].astype(int)\nX_train['Age']  = X_train['Age'].astype(int)","6ba3ed3f":"print(X_train.isnull().sum())\nprint(X_test.isnull().sum())","21fda9c2":"X_train = X_train.drop(['Survived', 'Name', 'Ticket', 'Cabin', 'index', 'PassengerId'], axis=1) \nX_test = X_test.drop(['Name', 'Ticket', 'Cabin', 'index', 'PassengerId'], axis=1)","496730d4":"sns.set(rc={'figure.figsize': (20, 7)})\ntitle_count = pd.concat([X_train.groupby('Title').aggregate({'Title': 'count'}).\n                         rename(columns={'Title': 'title_count'}).reset_index(),\n                          X_test.groupby('Title').aggregate({'Title': 'count'}).\n                         rename(columns={'Title': 'title_count'}).reset_index()])\n\ntitle_count['tt'] = ['train']*14 + ['test']*8\n\nax = sns.barplot(x=\"Title\", y=\"title_count\", hue=\"tt\", data=title_count)","1ca08c58":"categorical_columns_train = ['Sex', 'Embarked', 'Deck', 'IsWomanOrBoy']","5eac181d":"one_hot_train = pd.get_dummies(X_train[categorical_columns_train])\none_hot_test = pd.get_dummies(X_test[categorical_columns_train])\n\nX_train = pd.concat([X_train, one_hot_train], axis=1)\nX_test = pd.concat([X_test, one_hot_test], axis=1)\n\nX_train = X_train.drop(categorical_columns_train, axis=1)\nX_test = X_test.drop(categorical_columns_train, axis=1)\nprint(X_train.shape, X_test.shape)","5ebacb2e":"le = LabelEncoder()\nle.fit(list(X_train['Title'].astype(str).values) + list(X_test['Title'].astype(str).values))\nX_train['Title'] = le.transform(list(X_train['Title'].astype(str).values))\nX_test['Title'] = le.transform(list(X_test['Title'].astype(str).values))  \nprint(X_train.shape, X_test.shape)","d68a06a3":"def pearson_correlation(dataset):\n    cor_map = plt.cm.RdBu\n    plt.figure(figsize=(15,17))\n    plt.title('Pearson Correlation', y=1.05, size=15)\n    sns.heatmap(round(dataset.astype(float).corr(), 1),linewidths=0.1,vmax=1.0, \n                square=True, cmap=cor_map, linecolor='white', annot=True) ","f1ce7f74":"pearson_correlation(X_train)","6a3078c8":"X_train = X_train.astype(float)\nX_test = X_test.astype(float)","aca7f135":"def correlation(dataset, threshold):\n    col_corr = set() \n    corr_matrix = dataset.corr(method='pearson')\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if threshold>0:\n                if corr_matrix.iloc[i, j] >= threshold:\n                    colname = corr_matrix.columns[i] \n                    col_corr.add(colname)\n            elif corr_matrix.iloc[i, j] <= threshold:\n                colname = corr_matrix.columns[i] \n                col_corr.add(colname)\n    return col_corr","1866d3ff":"correlation_train = correlation(X_train, 0.7)\ncorrelation_test = correlation(X_test, 0.7)\n\nX_train = X_train.drop(set(list(correlation_train) + list(correlation_test)), axis=1)\nX_test = X_test.drop(set(list(correlation_train) + list(correlation_test)), axis=1)\n\ncorrelation_train = correlation(X_train, -0.7)\ncorrelation_test = correlation(X_test, -0.7)\n\nX_train = X_train.drop(set(list(correlation_train) + list(correlation_test)), axis=1)\nX_test = X_test.drop(set(list(correlation_train) + list(correlation_test)), axis=1)\nprint(X_train.shape, X_test.shape)","926b9979":"pearson_correlation(X_train)","57962f82":"pearson_correlation(X_test)","7dfcae99":"modelrf = RandomForestClassifier(n_estimators=600, min_samples_split=40,min_samples_leaf=5,\n                                max_features='auto', max_depth=7, criterion='entropy', bootstrap=False)","e5dfe8e4":"modelrf.fit(X_train, Y)\npredict = modelrf.predict(X_test) ","a170450b":"submission = pd.DataFrame.from_dict({'PassengerId': list(test.PassengerId), \n                                     'Survived': list(predict)})\nsubmission.to_csv(\"submission.csv\", index=False)","a822eeaf":"**2. Feature Exploration, Engineering and Cleaning**\n\n*We create an index and remove the spaces in the data frame that we need to restore the age data of the remaining passengers. Add some new attributes such as the name length, whether the passenger had his own cabin and the deck number on which this cabin was*","ce0e088c":"**6.Classification**\n","df98b98e":"Thank you, if you liked it, look at my second work  from a notebook: Titanic: random forest\n\nhttps:\/\/www.kaggle.com\/morenovanton\/titanic-random-forest","7cc434c6":"**4. Translation of categorical features**","5bdc5963":"**3. Recover Missed Values**\n\n*Initially, we divide the sample into 4 subsamples of surviving men and women and non-survivors. Next, we find the mean and standard deviations for each subsample, we need them to find the confidence interval for the location of the mean from the population.*","d130b743":"**1. Load  data**"}}