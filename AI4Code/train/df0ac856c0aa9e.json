{"cell_type":{"763cb5d2":"code","74874846":"code","11502710":"code","83895dae":"code","95143593":"code","93f520bf":"code","8f830545":"code","036884a7":"code","eb413516":"code","eb4c86ed":"code","ad6ff6d9":"code","1eedf912":"code","4e5536da":"code","545300f3":"code","474fe888":"code","51caaf21":"markdown","babc0900":"markdown","9c255a96":"markdown"},"source":{"763cb5d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom PIL import Image\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","74874846":"data = pd.read_csv('..\/input\/train.csv')\ndata.head()","11502710":"X = np.array(data.drop(['label'], axis=1))\ny = np.array(data['label'])","83895dae":"def expand(img):\n    img = img.reshape(28, 28).astype(np.uint8)\n    img = np.stack([img, img, img], axis=-1)\n    img = np.asarray(Image.fromarray(img).resize((32, 32)))\n    \n    return img","95143593":"from sklearn.model_selection import train_test_split\n\nX = np.stack([expand(img) for img in X], axis=0)\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\ny_train = y_train.astype(np.int32)\ny_test = y_test.astype(np.int32)","93f520bf":"y_train = tf.keras.utils.to_categorical(y_train)\ny_test = tf.keras.utils.to_categorical(y_test)","8f830545":"backbone = tf.keras.applications.ResNet50(include_top=False, input_shape=(32, 32, 3), weights=None)\nx = tf.keras.layers.Flatten()(backbone.output)\nx = tf.keras.layers.Dense(10)(x)\nx = tf.keras.layers.BatchNormalization()(x)\nx = tf.keras.layers.Softmax()(x)\n\nmodel = tf.keras.Model(backbone.input, x)\nmodel.compile(optimizer=\"SGD\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","036884a7":"early_stop = tf.keras.callbacks.EarlyStopping(monitor=\"val_loss\", patience=5, verbose=0)\nckpt = tf.keras.callbacks.ModelCheckpoint(\".\/params.hdf5\", save_best_only=True, save_weights_only=True, verbose=1)","eb413516":"model.fit(X_train, y_train, epochs=100, batch_size=100, validation_data=(X_test, y_test), callbacks=[early_stop, ckpt])","eb4c86ed":"model.load_weights(\".\/params.hdf5\")","ad6ff6d9":"X_submission = np.array(pd.read_csv('..\/input\/test.csv'))\nX_submission = np.stack([expand(img) for img in X_submission], axis=0)","1eedf912":"plt.imshow(X_submission[2])\nplt.show()","4e5536da":"result = []\nfor i in range(len(X_submission)):\n    prd = np.argmax(model.predict(X_submission[i].reshape(1, 32, 32, 3)))\n    result.append(prd)","545300f3":"result[:10]","474fe888":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),pd.Series(result, name='Label')],axis = 1)\nsubmission.to_csv(\"submission.csv\",index=False)","51caaf21":"## ResNet50\n\nUse ResNet50 defined in Keras","babc0900":"Preprocess the image. I can use the data as \"image\", so I reshape them into (32, 32, 3). The reason why (32, 32, 3) is the restriction of tf.keras.application.ResNet50.","9c255a96":"The machine learning model for beginners."}}