{"cell_type":{"0419d636":"code","143f79b8":"code","d583392f":"code","f16a94d3":"code","10da7e0e":"code","359f7343":"code","17ce45fa":"code","d3c6ae9e":"code","872aba94":"code","1bb9739f":"code","83e6f4d8":"code","653e2205":"code","f39cacd2":"code","b93b249b":"code","cd696a0f":"code","a433df5a":"code","cd0cc7c8":"code","19983cde":"code","bacb4905":"code","36bdc093":"code","d4bd4af4":"code","1e078607":"code","7f2938a3":"code","2a8694de":"code","28616a6b":"code","fbf7628c":"code","4ecdb0d5":"code","142cf315":"code","8fb1d8c6":"code","8e7d7cec":"code","26468189":"code","7024c807":"code","212fcb7c":"code","8f28023d":"code","1af32d80":"code","5bb9da87":"code","cdacd2ad":"code","386d9cff":"code","51b5422a":"code","633548ca":"code","94fc5e2e":"code","2fb06e54":"code","0839ecd3":"code","e43ea9bf":"code","c90223ef":"code","0e6b6d3a":"code","15b7459a":"code","b83e5642":"code","e49f4503":"code","a4b9964d":"code","98dea96d":"code","04df2d23":"code","4301cedd":"code","47b85443":"code","d8655b51":"code","29e2f917":"code","b32daf81":"code","ce4823a8":"code","ca36c058":"code","01e1c51b":"code","41605e86":"code","07941b05":"code","52f5966c":"code","22fe53ca":"markdown","cfc43a5b":"markdown","c36d41c6":"markdown","5dfb2e09":"markdown","40275ce4":"markdown","99bc67e4":"markdown","dbbe6120":"markdown","d09121c4":"markdown","71b8ea42":"markdown","de72fe22":"markdown","b5ae3ff0":"markdown","031995ae":"markdown","62bc4e85":"markdown","11377698":"markdown","12fa6530":"markdown","772f2efa":"markdown","81aa6a34":"markdown","d868d2d1":"markdown","a4a361c1":"markdown","c4005ca9":"markdown","d5373f5a":"markdown"},"source":{"0419d636":"#Data manipulation libraries : \nimport numpy as np  #numpy\nimport pandas as pd  #pandas\nimport tensorflow as tf\n#System libraries\nimport glob #The glob module finds all the pathnames matching a specified pattern according to the rules used by the Unix shell\n\n#Map plotting \nimport folium #Interactive Maps viz\n\n\n\n#Plotting\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\n#math operations lib \nimport math\nfrom math import pi\n\n#date manipulation \nimport datetime as dt\n\n#Missing data detector lib\nimport missingno as mn\n\n#Impute missing data\nfrom sklearn.preprocessing import Imputer \n\n#Deep learning with keras\nfrom keras import backend as K\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\n\n#Splitting data to test and train \nfrom sklearn.model_selection import train_test_split\n\nimport datetime\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom tensorflow import keras\n%matplotlib inline\nplt.style.use('seaborn-whitegrid')\n\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nfrom collections import Counter\nimport time\nimport datetime as dt\nfrom datetime import datetime\nimport collections\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib.pyplot import rcParams\n\nfrom sklearn import linear_model","143f79b8":"data = pd.read_csv('..\/input\/weatherHistory.csv')\ndata.head() ","d583392f":"# check datatypes\ndata.dtypes","f16a94d3":"#Categorical variables:\ncategorical = data.select_dtypes(include = [\"object\"]).keys()\nprint(categorical)","10da7e0e":"#Quantitative variables:\nquantitative = data.select_dtypes(include = [\"int64\",\"float64\"]).keys()\nprint(quantitative)","359f7343":"#'Formatted Date' transformation:\n\ndata['Date'] = pd.to_datetime(data['Formatted Date'])\ndata['year'] = data['Date'].dt.year\ndata['month'] = data['Date'].dt.month\ndata['day'] = data['Date'].dt.day\ndata['hour'] = data['Date'].dt.hour\ndata.head()","17ce45fa":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","d3c6ae9e":"data[quantitative].describe()","872aba94":"rcParams['figure.figsize'] = 9, 9\ndata[quantitative].hist()","1bb9739f":"data=data.drop('Loud Cover',axis=1)","83e6f4d8":"pressure_median = data['Pressure (millibars)'].median()\n      \ndef pressure(x):\n    if x==0:\n        return x + pressure_median\n    else:\n        return x\n        \ndata[\"Pressure (millibars)\"] = data.apply(lambda row:pressure(row[\"Pressure (millibars)\"]) , axis = 1)\n\nrcParams['figure.figsize'] = 5, 3\ndata['Pressure (millibars)'].hist()\n","653e2205":"rcParams['figure.figsize'] = 8, 5\nsns.countplot(y=data['Summary'])","f39cacd2":"data['Daily Summary'].value_counts(dropna=False)","b93b249b":"data['Summary'].value_counts(dropna=False)","cd696a0f":"data['Precip Type'].value_counts(dropna=False)","a433df5a":"data.fillna(method='ffill', inplace=True)","cd0cc7c8":"sns.countplot(x=data['Precip Type'])","19983cde":"\n# Calculate total number of cells in dataframe\ntotalCells = np.product(data.shape)\n\n# Count number of missing values per column\nmissingCount = data.isnull().sum()\n\n# Calculate total number of missing values\ntotalMissing = missingCount.sum()\n\n# Calculate percentage of missing values\nprint(\"The weather history dataset contains\", round(((totalMissing\/totalCells) * 100), 2), \"%\", \"missing values.\")","bacb4905":"plt.figure(figsize=(18,8)) # this creates a figure 8 inch wide, 4 inch high\nsns.pairplot(data[['Apparent Temperature (C)','Temperature (C)', 'Humidity' ]])\nplt.show()","36bdc093":"plt.figure(figsize=(18,8)) # this creates a figure 8 inch wide, 4 inch high\nsns.pairplot(data[['Wind Speed (km\/h)', 'Wind Bearing (degrees)', 'Visibility (km)', 'Pressure (millibars)']])\nplt.show()","d4bd4af4":"sns.violinplot(x=\"Precip Type\", y=\"Temperature (C)\", data=data, palette=\"YlGnBu\");","1e078607":"sns.violinplot(x=\"Precip Type\", y=\"Humidity\", data=data, palette=\"YlGnBu\");","7f2938a3":"from sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score\n\nls = linear_model.LinearRegression()\n\n\n\nX = data[\"Humidity\"].values.reshape(-1,1)\ny = data[\"Temperature (C)\"].values.reshape(-1,1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.33, \n                                                    shuffle=True, random_state=0)\nprint(\"Linear Regression\")\nls.fit(X_train, y_train)\nprint(\"alpha = \",ls.coef_[0])\nprint(\"beta = \",ls.intercept_)\nprint(\"\\n\\nCalculating some regression quality metrics\")\ny_pred = ls.predict(X_test)\nprint(\"MSE = \",mean_squared_error(y_test, y_pred))\nprint(\"R2 = \",r2_score(y_test, y_pred))","2a8694de":"def change_category_to_number(DailySummaryCat):\n    if DailySummaryCat=='Partly cloudy throughout the day.':\n        return 1\n    elif DailySummaryCat=='Mostly cloudy throughout the day.':\n        return 2\n    elif DailySummaryCat=='Foggy in the evening.':\n        return 3\n    elif DailySummaryCat=='Foggy overnight and breezy in the morning.':\n        return 4\n    elif DailySummaryCat=='Overcast throughout the day.':\n        return 5\n    elif DailySummaryCat=='Partly cloudy until night.':\n        return 6\n    elif DailySummaryCat=='Motly cloudy until night.':\n        return 7\n    elif DailySummaryCat=='Foggy starting overnight continuing until morning.':\n        return 8\n    elif DailySummaryCat=='Foggy in the morning.':\n        return 9\n    elif DailySummaryCat=='Partly cloudy until evening.':\n        return 10\n    elif DailySummaryCat=='Partly cloudy starting in the morning.':\n        return 11\n    elif DailySummaryCat=='Mostly cloudy starting overnight continuing until night.':\n        return 12\n    elif DailySummaryCat=='Partly cloudy starting in the afternoon.':\n        return 13\n    elif DailySummaryCat=='Partly cloudy starting overnight.':\n        return 14\n    elif DailySummaryCat=='Mostly cloudy starting overnight.':\n        return 15\n    elif DailySummaryCat=='Mostly cloudy until night and breezy in the afternoon.':\n        return 16\n    elif DailySummaryCat=='Mostly cloudy until evening.':\n        return 17\n    elif DailySummaryCat=='Foggy throughout the day.':\n        return 18\n    elif DailySummaryCat=='Partly cloudy starting in the morning.':\n        return 19\n    elif DailySummaryCat=='Partly cloudy starting in the morning continuing until evening.':\n        return 20\n    elif DailySummaryCat=='Foggy until morning.':\n        return 21\n    elif DailySummaryCat=='Partly cloudy starting in the morning continuing until night.':\n        return 22\n    elif DailySummaryCat=='Mostly cloudy starting in the morning.':\n        return 23\n    elif DailySummaryCat=='Foggy starting in the evening.':\n        return 24\n    elif DailySummaryCat=='Partly cloudy starting in the afternoon continuing until evening.':\n        return 25\n    elif DailySummaryCat=='Foggy overnight.':\n        return 26\n    elif DailySummaryCat=='Clear throughout the day.':\n        return 27\n    elif DailySummaryCat=='Partly cloudy starting overnight continuing until night.':\n        return 28\n    elif DailySummaryCat=='Partly cloudy overnight.':\n        return 29\n    elif DailySummaryCat=='Partly cloudy starting overnight continuing until evening.':\n        return 30\n    elif DailySummaryCat=='Foggy until night.':\n        return 31\n    elif DailySummaryCat=='Partly cloudy in the morning.':\n        return 32\n    elif DailySummaryCat=='Foggy starting overnight continuing until afternoon.':\n        return 33\n    elif DailySummaryCat=='Foggy until afternoon.':\n        return 34\n    elif DailySummaryCat=='Breezy and mostly cloudy overnight.':\n        return 35\n    elif DailySummaryCat=='Partly cloudy overnight and breezy starting in the morning continuing until afternoon.':\n        return 36\n    elif DailySummaryCat=='Breezy in the morning and foggy in the evening.':\n        return 37\n    elif DailySummaryCat=='Mostly cloudy until evening and breezy in the evening.':\n        return 38\n    elif DailySummaryCat=='Mostly cloudy starting in the evening.':\n        return 39\n    elif DailySummaryCat=='Mostly cloudy throughout the day and breezy starting overnight continuing until afternoon.':\n        return 40\n    elif DailySummaryCat=='Breezy starting in the morning continuing until night.':\n        return 41\n    elif DailySummaryCat=='Overcast throughout the day and breezy starting overnight continuing until morning.':\n        return 42\n    elif DailySummaryCat=='Breezy starting overnight continuing until morning and foggy in the evening.':\n        return 43\n    elif DailySummaryCat=='Light rain until morning.':\n        return 44\n    elif DailySummaryCat=='Mostly cloudy until night and breezy starting in the afternoon continuing until night.':\n        return 45\n    elif DailySummaryCat=='Mostly cloudy starting in the morning continuing until afternoon.':\n        return 46\n    elif DailySummaryCat=='Breezy until afternoon and overcast throughout the day.':\n        return 47\n    elif DailySummaryCat=='Partly cloudy until evening and breezy in the afternoon.':\n        return 48\n    elif DailySummaryCat=='Breezy starting overnight continuing until morning and partly cloudy starting overnight continuing until evening.':\n        return 49\n    elif DailySummaryCat=='Light rain starting overnight.':\n        return 50\n    elif DailySummaryCat=='Partly cloudy starting overnight continuing until evening and breezy starting in the morning continuing until evening.':\n        return 51\n    elif DailySummaryCat=='Foggy starting in the morning continuing until evening and breezy in the evening.':\n        return 52\n    elif DailySummaryCat=='Partly cloudy throughout the day and breezy in the afternoon.':\n        return 53\n    elif DailySummaryCat=='Mostly cloudy starting overnight continuing until evening and breezy starting overnight continuing until morning.':\n        return 54\n    elif DailySummaryCat=='Partly cloudy starting overnight continuing until evening and breezy in the morning.':\n        return 55\n    elif DailySummaryCat=='Overcast throughout the day and breezy overnight.':\n        return 56\n    elif DailySummaryCat=='Light rain in the morning.':\n        return 57\n    elif DailySummaryCat=='Rain until morning.':\n        return 58\n    elif DailySummaryCat=='Breezy in the morning and mostly cloudy starting in the evening.':\n        return 59\n    elif DailySummaryCat=='Mostly cloudy starting in the morning and breezy overnight.':\n        return 60\n    elif DailySummaryCat=='Partly cloudy starting overnight and breezy starting in the morning continuing until afternoon.':\n        return 61\n    elif DailySummaryCat=='Partly cloudy starting in the morning and breezy starting in the afternoon continuing until evening.':\n        return 62\n    elif DailySummaryCat=='Partly cloudy starting in the morning continuing until evening and breezy in the afternoon.':\n        return 63\n    elif DailySummaryCat=='Foggy starting overnight continuing until morning and breezy in the afternoon.':\n        return 64","28616a6b":"# assign a numerical value to the categorical field of class, by using the above function\ndata['DailySummaryCat'] = data['Daily Summary'].apply(change_category_to_number)","fbf7628c":"data.fillna(method='ffill', inplace=True) ","4ecdb0d5":"plt.figure(figsize=(18,8)) # this creates a figure 8 inch wide, 4 inch high\nax = sns.countplot(x=data['DailySummaryCat'])\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\")\nplt.tight_layout()\nplt.show()","142cf315":"def change_category(Summary):\n    if Summary=='Partly Cloudy':\n        return 1\n    elif Summary=='Mostly Cloudy':\n        return 2\n    elif Summary=='Foggy':\n        return 3\n    elif Summary=='Clear':\n        return 4\n    elif Summary=='Overcast':\n        return 5\n    elif Summary=='Breezy and Overcast':\n        return 6\n    elif Summary=='Breezy and Partly Cloudy':\n        return 7\n    elif Summary=='Breezy and Mostly Cloudy':\n        return 8\n    elif Summary=='Dry and Partly Cloudy':\n        return 9\n    elif Summary=='Windy and Partly Cloudy':\n        return 10\n    elif Summary=='Light Rain':\n        return 11\n    elif Summary=='Breezy':\n        return 12\n    elif Summary=='Windy and Overcast':\n        return 13\n    elif Summary=='Humid and Mostly Cloudy':\n        return 14\n    elif Summary=='Drizzle':\n        return 15\n    elif Summary=='Windy and Mostly Cloudy':\n        return 16\n    elif Summary=='Breezy and Foggy':\n        return 17\n    elif Summary=='Dry':\n        return 18\n    elif Summary=='Humid and Partly Cloudy':\n        return 19\n    elif Summary=='Dry and Mostly Cloudy':\n        return 20\n    elif Summary=='Rain':\n        return 21\n    elif Summary=='Windy':\n        return 22\n    elif Summary=='Humid and Overcast':\n        return 23\n    elif Summary=='Windy and Foggy':\n        return 24\n    elif Summary=='Dangerously Windy and Partly Cloudy':\n        return 25\n    elif Summary=='Windy and Dry':\n        return 26\n    elif Summary=='Breezy and Dry':\n        return 27\n    ","8fb1d8c6":"# assign a numerical value to the categorical field of class, by using the above function\ndata['SummaryCat'] = data['Summary'].apply(change_category)\n","8e7d7cec":"plt.figure(figsize=(18,8)) # this creates a figure 8 inch wide, 4 inch high\nax = sns.countplot(x=data['SummaryCat'])\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\")\nplt.tight_layout()\nplt.show()","26468189":"def change_category(PrecipTypeCat):\n    if PrecipTypeCat=='rain':\n        return 1\n    elif PrecipTypeCat=='snow':\n        return 2\n  ","7024c807":"# assign a numerical value to the categorical field of class, by using the above function\ndata['PrecipTypeCat'] = data['Precip Type'].apply(change_category)","212fcb7c":"plt.figure(figsize=(18,8)) # this creates a figure 8 inch wide, 4 inch high\nax = sns.countplot(x=data['PrecipTypeCat'])\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\")\nplt.tight_layout()\nplt.show()","8f28023d":"data.drop(['Formatted Date','Summary','Daily Summary','Precip Type','Date'],axis=1,inplace=True)\ndata.head()","1af32d80":"X = data.drop('DailySummaryCat', axis=1)\ny = data['DailySummaryCat']","5bb9da87":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=128)","cdacd2ad":"dtClassifer = DecisionTreeClassifier(max_leaf_nodes=15,random_state=0)","386d9cff":"dtClassifer.fit(X_train, y_train)","51b5422a":"prediction = dtClassifer.predict(X_test)","633548ca":"prediction[:100]","94fc5e2e":"y_test[:100]","2fb06e54":"accuracy_score(y_true=y_test, y_pred=prediction)","0839ecd3":"lrClassifier = LogisticRegression()","e43ea9bf":"lrClassifier.fit(X_train,y_train)","c90223ef":"prediction = lrClassifier.predict(X_test)","0e6b6d3a":"prediction[:3000]","15b7459a":"y_test[:100]","b83e5642":"accuracy_score(y_true=y_test, y_pred=prediction)","e49f4503":"#Drawing a heatmap\ndef facet_heatmap(data, color, **kws):\n    values=data.columns.values[3]\n    data = data.pivot(index='day', columns='hour', values=values)\n    sns.heatmap(data, cmap='coolwarm', **kws)  \n\n#Joining heatmaps of every month in a year \ndef weather_calendar(year,weather): #Year= Any year in DataFrame. Weather=Any quantitative variable\n    datayear = data[data['year']==year][['month', 'day', 'hour', weather]]\n    vmin=datayear[weather].min()\n    vmax=datayear[weather].max()\n    with sns.plotting_context(font_scale=12):\n        g = sns.FacetGrid(datayear,col=\"month\", col_wrap=3) #One heatmap per month\n        g = g.map_dataframe(facet_heatmap,vmin=vmin, vmax=vmax)\n        g.set_axis_labels('Hour', 'Day')\n        plt.subplots_adjust(top=0.9)\n        g.fig.suptitle('%s Calendar. Year: %s.' %(weather, year), fontsize=18)","a4b9964d":"weather_calendar(2006,'Temperature (C)')","98dea96d":"weather_calendar(2008,'Humidity')","04df2d23":"data_neur=data\n","4301cedd":"data_neur['T'] = data['Temperature (C)']\ndata_neur['TA'] = data['Apparent Temperature (C)']\ndata_neur['H'] = data['Humidity']\ndata_neur['WS'] = data['Wind Speed (km\/h)']\ndata_neur['WB'] = data['Wind Bearing (degrees)']\ndata_neur['V'] = data['Visibility (km)']\ndata_neur['P'] = data['Pressure (millibars)']\ndata_neur['Y'] = data['year']\ndata_neur['M'] = data['month']\ndata_neur['D'] = data['day']\ndata_neur['HR'] = data['hour']\ndata_neur['SC'] = data['SummaryCat']\ndata_neur['PT'] = data['PrecipTypeCat']\ndata.drop(['hour','day','month','year','Pressure (millibars)','Temperature (C)','Apparent Temperature (C)','Humidity','Wind Speed (km\/h)','Wind Bearing (degrees)','Visibility (km)','SummaryCat','PrecipTypeCat'],axis=1,inplace=True)\ndata_neur.head()","47b85443":"# X will be a pandas dataframe of all columns except meantempm\nX = data_neur[[col for col in data_neur.columns if col != 'DailySummaryCat']]\n\n# y will be a pandas series of the meantempm\ny = data_neur['DailySummaryCat']","d8655b51":"# split data into training set and a temporary set using sklearn.model_selection.traing_test_split\nX_train, X_tmp, y_train, y_tmp = train_test_split(X, y, test_size=0.2, random_state=23)","29e2f917":"# take the remaining 20% of data in X_tmp, y_tmp and split them evenly\nX_test, X_val, y_test, y_val = train_test_split(X_tmp, y_tmp, test_size=0.5, random_state=23)\n\nX_train.shape, X_test.shape, X_val.shape\nprint(\"Training instances   {}, Training features   {}\".format(X_train.shape[0], X_train.shape[1]))\nprint(\"Validation instances {}, Validation features {}\".format(X_val.shape[0], X_val.shape[1]))\nprint(\"Testing instances    {}, Testing features    {}\".format(X_test.shape[0], X_test.shape[1]))","b32daf81":"feature_cols = [tf.feature_column.numeric_column(col) for col in X.columns]","ce4823a8":"tf.VERSION #to check it has the latest version over 1.21 if not then install with conda update -f -c conda-forge tensorflow","ca36c058":"regressor = tf.estimator.DNNRegressor(feature_columns=feature_cols,\n                                      hidden_units=[50, 50],\n                                      model_dir='tf_wx_model')","01e1c51b":"def wx_input_fn(X, y=None, num_epochs=None, shuffle=True, batch_size=260): # 260 is used as we have approx 570 dataset for training\n    return tf.estimator.inputs.pandas_input_fn(x=X,\n                                               y=y,\n                                               num_epochs=num_epochs,\n                                               shuffle=shuffle,\n                                               batch_size=batch_size)","41605e86":"evaluations = []\nSTEPS = 260\nfor i in range(100):\n    regressor.train(input_fn=wx_input_fn(X_train, y=y_train), steps=STEPS)\n    evaluation = regressor.evaluate(input_fn=wx_input_fn(X_val, y_val,\n                                                         num_epochs=1,\n                                                         shuffle=False),\n                                    steps=1)\n    evaluations.append(regressor.evaluate(input_fn=wx_input_fn(X_val,\n                                                               y_val,\n                                                               num_epochs=1,\n                                                               shuffle=False)))","07941b05":"evaluations[0]","52f5966c":"# manually set the parameters of the figure to and appropriate size\nplt.rcParams['figure.figsize'] = [14, 10]\n\nloss_values = [ev['loss'] for ev in evaluations]\ntraining_steps = [ev['global_step'] for ev in evaluations]\n\nplt.scatter(x=training_steps, y=loss_values)\nplt.xlabel('Training steps (Epochs = steps \/ 2)')\nplt.ylabel('Loss (SSE)')\nplt.show()","22fe53ca":"**Visualization. Weather calendar**","cfc43a5b":"**1.2 Assessing the situation**\n\n** Resource Inventory **\n\nData : dataset contains in a practical format 10 years (2006-2016) of hourly data in just a single file.\n\nComputing resources : hp , i3 processor, 4 GB RAM\n\nProgramming languages and libraries : python ( Numpy, pandas, matplotlib, seaborn, tensorflow, scikitlearn)","c36d41c6":"**Check out the data**","5dfb2e09":"**2.1 Data Exploration**\n\nExploration is to understand how all these columns are related and the value structures so the correlation between these data","40275ce4":"'Loud Cover' takes values zero. We drop it","99bc67e4":"This first step is essentially about understanding the business, the need for the specific project and the resources that we have. ","dbbe6120":"**Decision Tree Classifier**","d09121c4":"> In order to build our forecasting model, we will have to opt for using CRISP-DM methodology.","71b8ea42":"**1.3 Objective of the project**\n\n the objective of this project is to analyze the weather data and extract the hypotheses to arrive at a prediction","de72fe22":"With these plots we can choose two variables to study the relationship betweem them.\n\nIn this study let's focus to explore Temperature as a function of Humidity : how humidity influences in temperature?.","b5ae3ff0":"***Linear Regression***","031995ae":"**Logistic Regression**","62bc4e85":"\"Pressure (millibars)\".\n\nSome observations are nil. It seems that they lack values. because the pressure does not take zero as value \n\nLet's fill the zeros with the median:","11377698":"**2.Collect initial data**\n\nDataset from Kaggle : https:\/\/www.kaggle.com\/budincsevity\/szeged-weather","12fa6530":"** Categorical variables**","772f2efa":"1.1 **Gather background information**\n\n *Compiling the business background *\n\nthis project is about historical weather around Szeged, Hungary , from 2006 to 2016\n\n**Defining business objectives**\n\nMake data more accessible and understandable for everyone.\n\nProvide fast analytics for the different Factors Affecting Weather .\n\nuse different prediction and classification algorithms\n\ncalculating and comparing evaluation measures\n\n","81aa6a34":"**Quantitative variables. Missing values**","d868d2d1":"first of all i'm going to change the categorical variables to numeric","a4a361c1":"**importing libraries **","c4005ca9":"**1. Business understanding**","d5373f5a":"**Neural Model for Weather Prediction**"}}