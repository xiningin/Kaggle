{"cell_type":{"21af59b4":"code","9bedb0d6":"code","683058e8":"code","deefeefe":"code","3220f43e":"code","1fbd69b1":"code","a7cc94a6":"code","b72c73c3":"code","0f8d9d39":"code","0f486e63":"code","800e4925":"code","f4645b5a":"code","4993481c":"code","cab6ac64":"code","82bae524":"code","df6f923a":"code","d881a7d5":"code","742cf387":"code","6c14eafa":"code","ece53a2a":"code","b4f1d336":"code","dd2c8dc0":"code","c1eeac59":"code","7c6ac99a":"code","443959ad":"code","14700d9b":"code","f1956d98":"markdown","e922847c":"markdown","aa021bdb":"markdown","1e4d71f3":"markdown","8cb37e6f":"markdown","8ee0270e":"markdown","dc503d5f":"markdown","84cb90d0":"markdown","31ae840f":"markdown","24d3114f":"markdown","616b0cce":"markdown","3f0c1979":"markdown","5593880f":"markdown","a89c7bc6":"markdown","847b4cd2":"markdown","1bb66779":"markdown","27fc0c50":"markdown"},"source":{"21af59b4":"import datetime # \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0432\u0440\u0435\u043c\u043d\u0435\u043c\nimport gc # \u0441\u0431\u043e\u0440\u0449\u0438\u043a \u043c\u0443\u0441\u043e\u0440\u0430\n\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split, KFold, GridSearchCV, cross_val_score\n\nfrom lightgbm import LGBMRegressor\n\n%matplotlib inline","9bedb0d6":"df = pd.read_csv('\/kaggle\/input\/realestatepriceprediction\/train.csv')\n\nX = df.drop('Price', axis=1)\ny = df[['Price']]\n\nX_final = pd.read_csv('\/kaggle\/input\/realestatepriceprediction\/test.csv')\n\n# \u0441\u0440\u0430\u0437\u0443 \u0441\u043e\u0437\u0434\u0430\u043c\npreds_final = pd.DataFrame()\npreds_final['Id'] = X_final['Id'].copy()\n\nX.set_index('Id', inplace=True)\nX_final.set_index('Id', inplace=True)\n\nprint('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0440\u0435\u0439\u043d\u0435:' ,  X.shape[0])\nprint('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0435\u0441\u0442\u0435', X_final.shape[0])\n\n# \u0423\u0434\u0430\u043b\u0438\u043c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b\ndel df\ngc.collect()  ","683058e8":"X.head()","deefeefe":"X['DistrictId'] = X['DistrictId'].astype(str)\nX_final['DistrictId'] = X_final['DistrictId'].astype(str)","3220f43e":"X.dtypes","1fbd69b1":"X['Rooms'].value_counts()\n\n# > 6 \u043a\u043e\u043c\u043d\u0430\u0442, = 0 \u043a\u043e\u043c\u043d\u0430\u0442","a7cc94a6":"X['KitchenSquare'].value_counts().sort_values()\n\n# \u041f\u043b\u043e\u0449\u0430\u0434\u044c < 3\n# \u041f\u043b\u043e\u0449\u0430\u0434\u044c > 1000","b72c73c3":"X['HouseFloor'].sort_values().unique()","0f8d9d39":"X['Floor'].sort_values().unique()","0f486e63":"(X['Floor'] > X['HouseFloor']).sum()","800e4925":"X['HouseYear'].sort_values().unique()","f4645b5a":"X[X['HouseYear'] > 2020].head()","4993481c":"import seaborn as sns\n\nnan_df = (X.isna().sum() \/ X.shape[0]).reset_index()\nnan_df.columns=['feature', 'nan_percent']\n\nplt.figure(figsize=(16,4))\nsns.barplot(nan_df['feature'], nan_df['nan_percent'])\nplt.title('Percent Missing')\nplt.ylabel('Missing', fontsize=12)\nplt.xlabel('Features', fontsize=12)\nplt.xticks(rotation=90)\nplt.show()\n\n# \u0423\u0434\u0430\u043b\u0438\u043c Healthcare_1\n# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c LifeSquare","cab6ac64":"X.DistrictId.nunique()","82bae524":"dict(X['DistrictId'].value_counts())","df6f923a":"class FeatureImputer:\n    \"\"\"\u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\"\"\"\n    \n    def __init__(self):\n        self.medians=None\n        \n    def fit(self, X):\n        self.medians = X.median()\n    \n    def transform(self, X):\n        \n        # Rooms\n        X['Rooms_outlier'] = 0\n        X.loc[(X['Rooms'] == 0) | (X['Rooms'] >= 6), 'Rooms_outlier'] = 1\n        \n        X.loc[X['Rooms'] == 0, 'Rooms'] = 1\n        X.loc[X['Rooms'] >= 6, 'Rooms'] = self.medians['Rooms'] # !!! \u043c\u0435\u0434\u0438\u0430\u043d\u0430 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u043d\u0430 \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435 !!!\n        \n        # KitchenSquare\n        X.loc[X['KitchenSquare'] < 3, 'KitchenSquare'] = 3\n        X.loc[X['KitchenSquare'] > 1000, 'KitchenSquare'] = X.loc[X['KitchenSquare'] > 1000, 'KitchenSquare'] \/ 10  # \u043c\u043e\u0436\u043d\u043e median\n        \n        # HouseFloor, Floor\n        X['HouseFloor_outlier'] = 0\n        X.loc[X['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor_outlier'] = 1\n        \n        X.loc[X['HouseFloor'] == 0, 'HouseFloor'] = self.medians['HouseFloor']\n        X.loc[X['Floor'] > X['HouseFloor'], 'Floor'] = X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor']\n        \n        # HouseYear\n        current_year = now = datetime.datetime.now().year\n        \n        X['HouseYear_outlier'] = 0\n        X.loc[X['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\n        \n        X.loc[X['HouseYear'] > current_year, 'HouseYear'] = current_year\n        \n        # Healthcare_1\n        if 'Healthcare_1' in X.columns:\n            X.drop('Healthcare_1', axis=1, inplace=True)\n            \n        # LifeSquare\n        X['LifeSquare_nan'] = X['LifeSquare'].isna() * 1\n        \n        condition = (X['LifeSquare'].isna()) &\\\n                      (~X['Square'].isna()) & \\\n                      (~X['KitchenSquare'].isna())\n        \n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] - X.loc[condition, 'KitchenSquare'] - 3\n        \n        \n        return X\n        ","d881a7d5":"imputer = FeatureImputer()\n\nimputer.fit(X) # \u0440\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n\nX = imputer.transform(X)\nX_final = imputer.transform(X_final)","742cf387":"class FeatureGenetator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n    def __init__(self):\n        self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.med_price_by_district = None\n        self.med_price_by_floor_year = None\n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        # DistrictID\n        district = X['DistrictId'].value_counts()\n        district = district[district > 50]  ## \u0415\u0441\u043b\u0438 \u0432\u044b \u044d\u0442\u043e\u0433\u043e \u043d\u0435 \u0441\u0434\u0435\u043b\u0430\u0435\u0442\u0435, \u0442\u043e \u043d\u0430 Leaderboard-\u0435 \u0443\u043b\u0435\u0442\u0438\u0442\u0435 \u0432 \u0441\u0430\u043c\u044b\u0439 \u043d\u0438\u0437 (>100 \u043c\u0435\u0441\u0442\u0430, R2 ~ 0.65),\n                                            ## \u0425\u043e\u0442\u044f \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0441\u043a\u043e\u0440 \u0432\u044b\u0440\u0430\u0441\u0442\u0435\u0442\n        \n        self.DistrictId_counts = dict(district)\n        \n        # Binary features\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # Target encoding\n        ## District\n        df = X.copy()\n        \n        if y is not None:\n            df['Price'] = y.values\n            \n            df['DistrictId_popular'] = df['DistrictId'].copy()\n            df.loc[~df['DistrictId_popular'].isin(district.keys().tolist())] = np.nan\n            \n            self.med_price_by_district = df.groupby(['DistrictId_popular', 'Rooms'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByDistrict',\n                                                           'DistrictId_popular': 'DistrictId'})\n            \n        ## floor, year\n        if y is not None:\n            df['Price'] = y.values\n            df = self.floor_to_cat(df)\n            df = self.year_to_cat(df)\n            self.med_price_by_floor_year = df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByFloorYear'})\n        \n\n        \n    def transform(self, X):\n        \n        # DistrictId\n        X['DistrictId_count'] = X['DistrictId'].map(self.DistrictId_counts)  # self.DistrictId_counts = {'id': value}\n        \n        X['new_district'] = 0\n        X.loc[X['DistrictId_count'].isna(), 'new_district'] = 1\n        \n        X['DistrictId_count'].fillna(5, inplace=True)\n        \n        # Binary features\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)  # self.binary_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # More categorical features\n        X = self.floor_to_cat(X)  # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 floor_cat\n        X = self.year_to_cat(X)   # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 year_cat\n        \n        # Target encoding\n        if self.med_price_by_district is not None:\n            X = X.merge(self.med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\n        if self.med_price_by_floor_year is not None:\n            X = X.merge(self.med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\n        \n        return X\n    \n    @staticmethod\n    def floor_to_cat(X):\n        \n        X['floor_cat'] = np.nan\n        \n        X.loc[X['Floor'] < 3, 'floor_cat'] = 1  \n        X.loc[(X['Floor'] >= 3) & (X['Floor'] <= 5), 'floor_cat'] = 2\n        X.loc[(X['Floor'] > 5) & (X['Floor'] <= 9), 'floor_cat'] = 3\n        X.loc[(X['Floor'] > 9) & (X['Floor'] <= 15), 'floor_cat'] = 4\n        X.loc[X['Floor'] > 15, 'floor_cat'] = 5\n            \n        return X\n     \n    @staticmethod\n    def year_to_cat(X):\n        \n        X['year_cat'] = np.nan\n        \n        X.loc[X['HouseYear'] < 1941, 'year_cat'] = 1\n        X.loc[(X['HouseYear'] >= 1941) & (X['HouseYear'] <= 1945), 'year_cat'] = 2\n        X.loc[(X['HouseYear'] > 1945) & (X['HouseYear'] <= 1980), 'year_cat'] = 3\n        X.loc[(X['HouseYear'] > 1980) & (X['HouseYear'] <= 2000), 'year_cat'] = 4\n        X.loc[(X['HouseYear'] > 2000) & (X['HouseYear'] <= 2010), 'year_cat'] = 5\n        X.loc[(X['HouseYear'] > 2010), 'year_cat'] = 6\n            \n        return X\n            \n    ","6c14eafa":"features = FeatureGenetator()\n\nfeatures.fit(X, y)\n\nX = features.transform(X)\nX_final = features.transform(X_final)\n","ece53a2a":"X.head(2)","b4f1d336":"remain_features = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'Ecology_1', 'Social_1', 'Shops_1',\n                  'Rooms_outlier', 'HouseFloor_outlier', 'HouseYear_outlier', 'LifeSquare_nan',\n                   'HouseFloor', 'HouseYear',\n                   \n                  'DistrictId_count', 'new_district', 'Ecology_2', 'Ecology_3', 'Shops_2',\n                  'MedPriceByDistrict',\n                  'MedPriceByFloorYear']\n\nX = X[remain_features]\nX_final = X_final[remain_features]","dd2c8dc0":"model = LGBMRegressor(max_depth=7,\n                             min_samples_leaf=10,\n                             n_estimators=300,\n                             random_state=42)\n\ncv_score = cross_val_score(model, X, y, \n                           scoring='r2', \n                           cv=KFold(n_splits=5, shuffle=True, random_state=42))\n# cv_score\nmean = cv_score.mean()\nstd = cv_score.std()\n\nprint('R2: {:.3f} +- {:.3f}'.format(mean, std))","c1eeac59":"# \u041e\u0431\u0443\u0447\u0430\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0432\u0441\u0435\u043c \u0442\u0440\u0435\u0439\u043d\u0435\nmodel.fit(X, y)","7c6ac99a":"def plot_feature_importances(importances, X):\n    \n    indices = np.argsort(importances)[::-1]\n\n    plt.figure(figsize = (20, 6))\n    plt.title(\"Feature importances\", fontsize=16)\n    plt.bar(range(X.shape[1]), importances[indices] \/ importances.sum(),\n           color=\"darkblue\", align=\"center\")\n    plt.xticks(range(X.shape[1]), X.columns[indices], rotation = 90, fontsize=14)\n    plt.xlim([-1, X.shape[1]])\n\n    plt.tight_layout()\n    # plt.savefig('fe.jpg')\n    plt.show()\n    \nplot_feature_importances(importances = model.feature_importances_, X=X)","443959ad":"y_pred_final = model.predict(X_final)\n\npreds_final['Price'] = y_pred_final\npreds_final.to_csv('predictions.csv', index=False)\n\npreds_final.head()","14700d9b":"preds_final.shape","f1956d98":"**Rooms**","e922847c":"**DistrictId**","aa021bdb":"### 1.2 Feature engineering","1e4d71f3":"### \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 NaN","8cb37e6f":"# 3. Feature engineering","8ee0270e":"# 2. \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","dc503d5f":"## 1. \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 EDA","84cb90d0":"\u0414\u0435\u043b\u0430\u0439\u0435\u043c EDA \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0442\u0430\u043a, \u0430 \u0434\u043b\u044f:\n- \u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n- \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f NaN\n- \u0418\u0434\u0435\u0439 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447","31ae840f":"### 1.1 \u0412\u044b\u0431\u0440\u043e\u0441\u044b","24d3114f":"# 1. \u0427\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","616b0cce":"**Floor, HouseFloor**","3f0c1979":"# \u0411\u0435\u0439\u0437\u043b\u0430\u0439\u043d \u0434\u043b\u044f \u043a\u0443\u0440\u0441\u0430 \"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Python \u0434\u043b\u044f Data Science: Numpy, Matplotlib, Scikit-learn\"","5593880f":"\u041f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\n\n1. \u0411\u043e\u043b\u044c\u0448\u0430\u044f \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 R2 \u043d\u0430 train \u0438 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\n2. \u0411\u043e\u043b\u044c\u0448\u0430\u044f \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 R2 \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0438 Public Leaderbord","a89c7bc6":"# 4. \u041c\u043e\u0434\u0435\u043b\u044c","847b4cd2":"\u0414\u0435\u0434\u043b\u0430\u0439\u043d\u044b \u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:\n- \u0421\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u043a\u0430\u0437\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f 29 \u0430\u043f\u0440\u0435\u043b\u044f\n- \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c R2 > 60% \u043d\u0430 __Private__ Leaderboard \u0434\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043a\u0443\u0440\u0441\u0430\n- \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0430\u043d\u0433 \"Contributor\" \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f\u0445 \u043d\u0430 \u041a\u0430\u0433\u0433\u043b\u0435: https:\/\/www.kaggle.com\/progression\n- \u041f\u0440\u0438\u0441\u043b\u0430\u0442\u044c \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u043a \u0414\u0417 \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 git \/ public kaggle notebook","1bb66779":"**HouseYear**","27fc0c50":"\u0421\u043e\u0432\u0435\u0442\u044b:\n0. \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043d \u041a\u0430\u0433\u0433\u043b: \u0444\u043e\u0442\u043e + \u0441\u0442\u0430\u0442\u0443\u0441 Contributor\n1. \u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0443\u044e \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e\n2. \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 1 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u0430 \u0440\u0430\u0437\n3. \u041d\u0435 \u043f\u0435\u0440\u0435\u0443\u0441\u0435\u0440\u0434\u0441\u0442\u0432\u0443\u0439\u0442\u0435 \u0441 \u043f\u043e\u0434\u0431\u043e\u0440\u043e\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438. \u0414\u0435\u043b\u0430\u0439\u0442\u0435 \u044d\u0442\u043e 1 \u0440\u0430\u0437 \u0432\u043d\u0430\u0447\u0430\u043b\u0435 \u0438 1 \u0440\u0430\u0437 \u0432 \u043a\u043e\u043d\u0446\u0435\n4. \u041f\u0440\u0438\u0440\u043e\u0441\u0442 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 __\u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445__ \u0438 __\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0444\u0438\u0447__, \u0430 \u043d\u0435 \u043e\u0442 \u043c\u043e\u0434\u0435\u043b\u0438\n5. \u0411\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \"\u043c\u0443\u0441\u043e\u0440\u043d\u044b\u0435\" \u0444\u0438\u0447\u0438. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0438\u0445 \u043c\u043e\u0436\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0435\u0440\u0435\u0437 feature importance"}}