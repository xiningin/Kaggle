{"cell_type":{"dcacd310":"code","d0c00c13":"code","fc264fe3":"code","1c03f32a":"code","c87f94d4":"code","21d6d0a5":"code","d80c1b75":"code","dc7bba3b":"code","66030fbf":"code","b0292ac7":"code","cf4ef9a8":"code","314dab04":"code","66a4861d":"code","0804bcc5":"code","ffdc8c1d":"code","30c3a046":"code","4b64a049":"code","6515f2c9":"code","b1d49a80":"code","0aaa2093":"code","bc8ebd06":"code","f3400291":"code","7349e3eb":"code","eeeff769":"code","a12a5769":"code","a351e067":"code","a9f2af86":"code","849153e7":"code","dfe58174":"code","66862ef8":"code","5fbc84b5":"code","9cc15357":"code","1c97d28d":"code","8584c1f4":"code","607bda82":"code","fc247d77":"code","1be139b7":"code","f0afc960":"code","7bb53e49":"code","71e94055":"markdown","7e5f823d":"markdown","f22d8cab":"markdown"},"source":{"dcacd310":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nmatplotlib.style.use('ggplot')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n","d0c00c13":"train = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")","fc264fe3":"print(\"training data size: {}\".format(train.shape))\nprint(\"testing data shape: {}\".format(test.shape))","1c03f32a":"train.columns","c87f94d4":"quantitative = [f for f in train.columns if train.dtypes[f] != 'object']\nqualitative = [f for f in train.columns if train.dtypes[f] == 'object']","21d6d0a5":"quantitative","d80c1b75":"qualitative","dc7bba3b":"train[qualitative]","66030fbf":"is_null = pd.DataFrame(train.isna().sum().reset_index())\ntest_is_null = pd.DataFrame(test.isna().sum().reset_index())\nis_null_ = pd.concat([is_null,test_is_null], ignore_index=True,axis=1)\nis_null_ = is_null_.rename(columns={1:'train_null',3:'test_null'})\nis_null_ = is_null_.sort_values(\"train_null\", ascending=False)\nis_null_.head(30)","b0292ac7":"ntest = test.shape[0]\nntrain = train.shape[0]\ny_train = train.SalePrice\nall_data = pd.concat((train,test)).reset_index(drop=True)\nall_data.drop(['SalePrice'],axis=1, inplace=True)\nall_data.shape","cf4ef9a8":"all_data.isna().sum().sort_values(ascending=False)[:35]","314dab04":"all_data.KitchenQual.unique()","66a4861d":"train = train[train.GrLivArea < 4500]\ntrain.reset_index(drop=True, inplace=True)\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\ny = train['SalePrice'].reset_index(drop=True)","0804bcc5":"all_data['PoolQC'] = all_data.PoolQC.fillna(\"None\")\nall_data['MiscFeature'] = all_data.MiscFeature.fillna(\"None\")\nall_data['Alley'] = all_data.Alley.fillna('None')\nall_data['Fence'] = all_data.Fence.fillna(\"None\")\nall_data['FireplaceQu'] = all_data.FireplaceQu.fillna(\"None\")\nall_data['LotFrontage'] = all_data.groupby(['Neighborhood'])['LotFrontage'].transform(lambda x: x.fillna(x.median()))\n\nfor col in ('GarageCond','GarageQual', 'GarageFinish','GarageType'):\n    all_data[col] = all_data[col].fillna(\"None\")\n    \nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)\n\nall_data['GarageArea'] = all_data['GarageArea'].fillna(0)\n\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)\n    \nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')\n\n\nall_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])\n\nall_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)\nall_data['Functional'] = all_data['Functional'].fillna('Typ')\nall_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])\nall_data['SaleType'] = all_data.SaleType.fillna(all_data.SaleType.mode()[0])\nall_data['Electrical'] = all_data.Electrical.fillna(all_data.Electrical.mode()[0])\n\n","ffdc8c1d":"all_data = all_data.drop(\"Utilities\",axis=1)","30c3a046":"all_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data.KitchenQual.mode()[0])","4b64a049":"all_data.isna().sum().sort_values(ascending=False)[:30]","6515f2c9":"qualitative","b1d49a80":"qualitative = qualitative.remove(Utilities)","0aaa2093":"#Label Encoder\nfrom sklearn.preprocessing import LabelEncoder\n\nlabel_all_data = all_data.copy()\n\nlabel_encoder = LabelEncoder()\nfor col in qualitative:\n    label_all_data[col] = label_encoder.fit_transform(all_data[col])","bc8ebd06":"label_all_data","f3400291":"label_all_data['TotalSF'] = label_all_data['TotalBsmtSF']+label_all_data['1stFlrSF']+label_all_data['2ndFlrSF']","7349e3eb":"label_all_data.dtypes","eeeff769":"#finding if features are skewed. \nnum_feats = [f for f in label_all_data.columns if label_all_data.dtypes[f] != 'object']\n\nskew_features = label_all_data[num_feats].skew().sort_values(ascending=False)\nskew_features.head(30)\n","a12a5769":"skew_feat = skew_features.index","a351e067":"# Lets transform using boxcox on this one.\n\nfrom scipy.special import boxcox1p\n\nfor col in skew_feat:\n    label_all_data[col] = boxcox1p(label_all_data[col],0.15)  \n","a9f2af86":"sns.kdeplot(label_all_data.TotalBsmtSF)","849153e7":"#So this will not work because i removed all the categorical data by doing Label Encoding on all CAT features.. This would be a good opportuniy\n#to first see how our models perform when all CAT features have have been encoded and then re-running out models after only selecting certain features\n# in out data to for encoding.\n\nlabel_all_data = pd.get_dummies(label_all_data)\nlabel_all_data.shape","dfe58174":"X = label_all_data.iloc[:len(y), :]\nX_sub = label_all_data.iloc[len(y):, :]\nX.shape, y.shape, X_sub.shape\n","66862ef8":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","5fbc84b5":"kfolds = KFold(n_splits=10, shuffle=True, random_state=42)\n\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\ndef cv_rmse(model, X=X):\n    rmse = np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=kfolds))\n    return (rmse)\n\n","9cc15357":"alphas_alt = [14.5, 14.6, 14.7, 14.8, 14.9, 15, 15.1, 15.2, 15.3, 15.4, 15.5]\nalphas2 = [5e-05, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008]\ne_alphas = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007]\ne_l1ratio = [0.8, 0.85, 0.9, 0.95, 0.99, 1]","1c97d28d":"model = RandomForestRegressor()\n","8584c1f4":"score = cv_rmse(model)\nprint(score.mean())\nprint(score.std())","607bda82":"print(\"Random Forest\")\nforest_model = model.fit(X,y)","fc247d77":"print('RMSLE score on train data')\npreds = forest_model.predict(X)\nprint(rmsle(y,preds))","1be139b7":"X_sub.head()","f0afc960":"test_data_path = '..\/input\/test.csv'\ntest_data = pd.read_csv(test_data_path)\ntest_X = test_data[features]\ntest_preds = rf_model_on_full_data.predict(test_X)\n\n\noutput = pd.DataFrame({'Id': X_sub.Id,\n                       'SalePrice': test_preds})\noutput.to_csv('submission.csv', index=False)\n\ntest_preds = model.predict(X_sub)","7bb53e49":"test_preds = model.predict(X_sub)\n\noutput = pd.DataFrame({'Id': X_sub.Id,\n                       'SalePrice': test_preds})\noutput.to_csv('submission.csv', index=False)","71e94055":"train.head()","7e5f823d":"Removing all missing data points here.","f22d8cab":"I want to try out different standard scalers, I probaly should put this in a pipeline and I most likely will, but firstly I want to start practicing tranformating this data manually"}}