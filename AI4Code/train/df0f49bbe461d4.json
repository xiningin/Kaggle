{"cell_type":{"457d8596":"code","f7db7ab6":"code","ec2ee9cc":"code","2aab9225":"markdown"},"source":{"457d8596":"from keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(\n    rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True)\n\ntrain_set = train_datagen.flow_from_directory(\n    directory=\"..\/input\/dataset\/dataset_updated\/training_set\/\",\n    target_size=(64, 64),\n    color_mode=\"rgb\",\n    batch_size=32,\n    class_mode=\"categorical\",\n    shuffle=True,\n    seed=42\n)\ntest_set = train_datagen.flow_from_directory(\n    directory=\"..\/input\/dataset\/dataset_updated\/validation_set\/\",\n    target_size=(64, 64),\n    color_mode=\"rgb\",\n    batch_size=32,\n    class_mode=\"categorical\",\n    shuffle=True,\n    seed=42\n)\ndef my_gen(gen):\n    while True:\n        try:\n            data, labels = next(gen)\n            yield data, labels\n        except:\n            pass","f7db7ab6":"from keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\n\nmodel=Sequential()\nmodel.add(Conv2D(32,(3,3),input_shape=(64,64,3),activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(32,(3,3),input_shape=(32,32,3),activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(5,activation='softmax'))\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\n\nhistory=model.fit_generator(my_gen(train_set),steps_per_epoch=20,epochs=50,\n                    validation_data=my_gen(test_set),validation_steps=20)\n","ec2ee9cc":"\nimport matplotlib.pyplot as plt\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 3))\n\naxes[0].plot(history.history['loss'], label=\"Loss\")\naxes[0].plot(history.history['val_loss'], label=\"Validation loss\")\naxes[0].set_title('Loss')\naxes[0].set_xlabel('Epoch')\naxes[0].set_ylabel('Loss')\naxes[0].legend()\n\n\naxes[1].plot(history.history['acc'], label=\"Accuracy\")\naxes[1].plot(history.history['val_acc'], label=\"Validation accuracy\")\naxes[1].set_title('Accuracy')\naxes[1].set_xlabel('Epoch')\naxes[1].set_ylabel('Accuracy')\naxes[1].legend()\nplt.tight_layout()\n\nplt.show()","2aab9225":"<h1>Quick way to make  CNN<\/h1>"}}