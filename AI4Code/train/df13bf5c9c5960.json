{"cell_type":{"4dc385db":"code","270d6885":"code","245ec538":"code","df5d3f25":"code","8292e9c6":"code","643e23ad":"code","841c9a71":"markdown"},"source":{"4dc385db":"\ndef my_agent(obs_dict,config_dict):\n    from kaggle_environments.envs.hungry_geese.hungry_geese import Observation,Configuration,Action,row_col\n    import numpy as np \n    import random\n    global last_action\n    def get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'):        \n        close_segments = 0\n        hit_segments = 0\n        diff_distance_reward = 0\n        if Direction == 'NORTH':\n\n            #player location after one step\n            player_goose = observation.geese[player_index]\n            player_head = player_goose[0]\n            player_row,player_column  = row_col(player_head,configuration.columns)\n            next_player_row,next_player_column  = player_row - 1,player_column \n            \n            # Food location\n            food = food_piece\n            food_row,food_column = row_col(food,configuration.columns) \n            # The difference between the two positions\n            diff_distance = (food_row - next_player_row)**2 + (food_column - next_player_column)**2\n            if diff_distance == 0:\n                diff_distance = 1\n            diff_distance_reward = 1\/diff_distance\n            #opp's location\n            for i in range(len(observation.geese)): \n                if i == player_index:\n                   my_goose = observation.geese[i]\n                   my_goose = my_goose[1:]\n                   if player_head not in [0,1,2,3,4,5,6,7,8,9,10]:\n                       for segment in my_goose:\n                           if player_head - 11 == segment:\n                              hit_segments = hit_segments + 1 \n                              break\n                           if player_head not in [0+11,1+11,2+11,3+11,4+11,5+11,6+11,7+11,8+11,9+11,10+11]:\n                              if player_head - 22 == segment:\n                                 close_segments = close_segments + 1 \n                                 break\n                   else:\n                       for segment in my_goose:\n                           if player_head + 11*6 == segment:\n                               hit_segments = hit_segments + 1 \n                               break\n                            \n                else:\n                    opp_goose = observation.geese[i]\n                    if player_head not in [0,1,2,3,4,5,6,7,8,9,10]:                    \n                        for segment in opp_goose:\n                           if player_head - 11 == segment:\n                              hit_segments = hit_segments + 1 \n                              break\n                           if player_head - 12 == segment:\n                              close_segments = close_segments + 1\n                           if player_head - 10 == segment:\n                              close_segments = close_segments + 1  \n                           if player_head not in [0+11,1+11,2+11,3+11,4+11,5+11,6+11,7+11,8+11,9+11,10+11] :\n                              if player_head - 22 == segment:\n                                 close_segments = close_segments + 1 \n                            \n                    else:\n                        if player_head not in [0,10]:\n                            for segment in opp_goose:\n                               if player_head + 11*6 == segment:\n                                  hit_segments = hit_segments + 1\n                                  break\n                               if player_head + 11*6 + 1 == segment:\n                                  close_segments = close_segments + 1\n                               if player_head + 11*6 - 1 == segment:\n                                  close_segments = close_segments + 1  \n                               if player_head + 11*5 == segment:\n                                  close_segments = close_segments + 1     \n                        \n                        if player_head == 0 :\n                            for segment in opp_goose:\n                               if player_head + 11*6 == segment:\n                                  hit_segments = hit_segments + 1\n                                  break\n                               if player_head + 11*6 + 1 == segment:\n                                  close_segments = close_segments + 1\n                               if player_head + 11*5 == segment:\n                                  close_segments = close_segments + 1   \n                                    \n                        if player_head == 10 :\n                            for segment in opp_goose:\n                               if player_head + 11*6 == segment:\n                                  hit_segments = hit_segments + 1\n                                  break\n                               if player_head + 11*6 - 1 == segment:\n                                  close_segments = close_segments + 1\n                               if player_head + 11*5 == segment:\n                                  close_segments = close_segments + 1 \n                                    \n            score = 100*diff_distance_reward - 2e2*close_segments - 1e3*hit_segments \n            print(f'North:{score}')\n            return score\n\n\n        if Direction == 'SOUTH':\n\n            #player location after one step\n            player_goose = observation.geese[player_index]\n            player_head = player_goose[0]\n            player_row,player_column  = row_col(player_head,configuration.columns)\n            next_player_row,next_player_column  = player_row + 1,player_column\n\n            # Food location\n            food = food_piece\n            food_row,food_column = row_col(food,configuration.columns) \n            # The difference between the two positions\n            diff_distance = (food_row - next_player_row)**2 + (food_column - next_player_column)**2\n            if diff_distance == 0:\n                diff_distance = 1\n            diff_distance_reward = 1\/diff_distance\n            #opp segment's location & my goose segments location\n            for i in range(len(observation.geese)): \n                if i == player_index:\n                   my_goose = observation.geese[i]\n                   my_goose = my_goose[1:]\n                   if player_head not in [66,67,68,69,70,71,72,73,74,75,76]:\n                       for segment in my_goose:\n                          if player_head + 11 == segment:\n                              hit_segments = hit_segments + 1 \n                              break\n                          if player_head not in [66-11,67-11,68-11,69-11,70-11,71-11,72-11,73-11,74-11,75-11,76-11]:\n                             if player_head + 22 == segment:\n                                close_segments = close_segments + 1\n                                \n                   else:\n                       for segment in my_goose:\n                          if player_head - 11*6 == segment:\n                              hit_segments = hit_segments + 1 \n                else:\n                    opp_goose = observation.geese[i]\n                    if player_head not in [66,67,68,69,70,71,72,73,74,75,76]:\n                        for segment in opp_goose:\n                           if player_head + 11 == segment:\n                              hit_segments = hit_segments + 1  \n                              break\n                           if player_head + 12 == segment:\n                              close_segments = close_segments + 1  \n                           if player_head + 10 == segment:\n                                close_segments = close_segments + 1  \n                           if player_head not in [66-11,67-11,68-11,69-11,70-11,71-11,72-11,73-11,74-11,75-11,76-11]:                                \n                              if player_head + 22 == segment:\n                                 close_segments = close_segments + 1  \n\n                    else:\n                        if player_head not in [66,76]:\n                            for segment in opp_goose:\n                               if player_head - 11*6 == segment:\n                                  hit_segments = hit_segments + 1\n                                  break\n                               if player_head - 11*6 + 1 == segment:\n                                  close_segments = close_segments + 1  \n                               if player_head - 11*6 - 1== segment:\n                                  close_segments = close_segments + 1  \n                               if player_head - 11*5== segment:\n                                  close_segments = close_segments + 1 \n                                    \n                        if player_head == 66:\n                            for segment in opp_goose:\n                               if player_head - 11*6 == segment:\n                                  hit_segments = hit_segments + 1\n                                  break\n                               if player_head - 11*6 + 1 == segment:\n                                  close_segments = close_segments + 1  \n                               if player_head - 11*5 == segment:\n                                  close_segments = close_segments + 1   \n                                    \n                        if player_head == 76:\n                            for segment in opp_goose:\n                               if player_head - 11*6 == segment:\n                                  hit_segments = hit_segments + 1\n                                  break\n                               if player_head - 11*6 - 1== segment:\n                                  close_segments = close_segments + 1  \n                               if player_head - 11*5== segment:\n                                  close_segments = close_segments + 1    \n                                    \n            score = 100*diff_distance_reward - 2e2*close_segments - 1e3*hit_segments \n            print(f'south:{score}')\n            return score\n\n\n        if Direction == 'EAST':\n\n            #player location after one step\n            player_goose = observation.geese[player_index]\n            player_head = player_goose[0]\n            player_row,player_column  = row_col(player_head,configuration.columns)\n            next_player_row,next_player_column  = player_row ,player_column + 1\n\n            # Food location\n            food = observation.food[0]\n            food_row,food_column = row_col(food,configuration.columns) \n            # The difference between the two positions\n            diff_distance = (food_row - next_player_row)**2 + (food_column - next_player_column)**2\n            if diff_distance == 0:\n                diff_distance = 1\n            diff_distance_reward = 1\/diff_distance        \n            #opp segment's location & my goose segments location\n            for i in range(len(observation.geese)): \n                if i == player_index:\n                   my_goose = observation.geese[i]\n                   my_goose = my_goose[1:]\n                   if player_head not in [10,21,32,43,54,65,76]:\n                       for segment in my_goose:\n                          if player_head + 1 == segment:\n                              hit_segments = hit_segments + 1 \n                              break\n                          if player_head not in [10-1,21-1,32-1,43-1,54-1,65-1,76-1]:\n                             if player_head + 2 == segment:\n                                close_segments = close_segments + 1 \n                   else:\n                       for segment in my_goose:\n                          if player_head - 10 == segment:\n                              hit_segments = hit_segments + 1 \n\n                else:\n                    opp_goose = observation.geese[i]\n                    if player_head not in [10,21,32,43,54,65,76]:\n                        if player_head not in [0,66]:\n                            for segment in opp_goose:\n                               if player_head + 1 == segment:\n                                  hit_segments = hit_segments + 1\n                                  break\n\n                               if player_head not in [10-1,21-1,32-1,43-1,54-1,65-1,76-1]:\n                                  if player_head + 2 == segment:\n                                     close_segments = close_segments + 1\n                                  if player_head + 12 == segment:\n                                      close_segments = close_segments + 1 \n                                  if player_head - 10 == segment:\n                                      close_segments = close_segments + 1\n                                        \n                        elif player_head == 0:\n                            for segment in opp_goose:\n                               if player_head + 1 == segment:\n                                  hit_segments = hit_segments + 1\n                                  break\n\n                               if player_head not in [10-1,21-1,32-1,43-1,54-1,65-1,76-1]:\n                                  if player_head + 2 == segment:\n                                     close_segments = close_segments + 1\n                                  if player_head + 12 == segment:\n                                      close_segments = close_segments + 1 \n                                        \n                        elif player_head == 76:\n                            for segment in opp_goose:\n                               if player_head + 1 == segment:\n                                  hit_segments = hit_segments + 1\n                                  break\n\n                               if player_head not in [10-1,21-1,32-1,43-1,54-1,65-1,76-1]:\n                                  if player_head - 10 + 2 == segment:\n                                     close_segments = close_segments + 1\n                                  if player_head - 12 == segment:\n                                      close_segments = close_segments + 1                         \n                            \n                            \n                    else:\n                        if player_head not in [10,79]:\n                            for segment in opp_goose:\n                               if player_head - 10 == segment:\n                                  hit_segments = hit_segments + 1\n                                  break\n                               if player_head - 10 + 11== segment:\n                                  close_segments = close_segments + 1                             \n                               if player_head - 10 + 1== segment:\n                                  close_segments = close_segments + 1  \n                               if player_head - 10 + 2== segment:\n                                  close_segments = close_segments + 1   \n                               if player_head - 10 - 11== segment:\n                                  close_segments = close_segments + 1  \n\n                        if player_head == 10:\n                            for segment in opp_goose:\n                               if player_head - 10 == segment:\n                                  hit_segments = hit_segments + 1\n                                  break\n                               if player_head - 10 + 11== segment:\n                                  close_segments = close_segments + 1                             \n                               if player_head - 10 + 1== segment:\n                                  close_segments = close_segments + 1          \n                               if player_head - 10 + 2== segment:\n                                  close_segments = close_segments + 1\n                                    \n                        if player_head == 79:\n                            for segment in opp_goose:\n                               if player_head - 10 == segment:\n                                  hit_segments = hit_segments + 1\n                                  break                            \n                               if player_head - 10 + 1== segment:\n                                  close_segments = close_segments + 1   \n                               if player_head - 10 + 2== segment:\n                                  close_segments = close_segments + 1  \n                               if player_head - 10 - 11== segment:\n                                  close_segments = close_segments + 1      \n\n\n            score = 100*diff_distance_reward - 2e2*close_segments - 1e3*hit_segments \n            print(f'East:{score}')\n            return score\n\n        if Direction == 'WEST':\n\n            #player location after one step\n            player_goose = observation.geese[player_index]\n            player_head = player_goose[0]\n            player_row,player_column  = row_col(player_head,configuration.columns)\n            next_player_row,next_player_column  = player_row ,player_column - 1\n\n            # Food location\n            food = food_piece\n            food_row,food_column = row_col(food,configuration.columns) \n            # The difference between the two positions\n            diff_distance = (food_row - next_player_row)**2 + (food_column - next_player_column)**2\n            if diff_distance == 0:\n                diff_distance = 1\n            diff_distance_reward = 1\/diff_distance\n            #opp segment's location & my goose segments location\n            for i in range(len(observation.geese)): \n                if i == player_index:\n                   my_goose = observation.geese[i]\n                   my_goose = my_goose[1:]\n                   if player_head not in [0,11,22,33,44,55,66]:\n                       for segment in my_goose:\n                          if player_head - 1 == segment:\n                              hit_segments = hit_segments + 1 \n                              break\n                          if player_head not in [0+1,11+1,22+1,33+1,44+1,55+1,66+1]:\n                             if player_head - 2 == segment:\n                                close_segments = close_segments + 1 \n                   else:                    \n                       for segment in my_goose:\n                          if player_head + 10 == segment:\n                              hit_segments = hit_segments + 1                             \n                else:\n                    opp_goose = observation.geese[i]\n                    if player_head not in [0,11,22,33,44,55,66]:\n                        if player_head not in [10,76]:\n                            for segment in opp_goose:\n                               if player_head - 1 == segment:\n                                  hit_segments = hit_segments + 1\n                                  break\n                               if player_head not in [0+1,11+1,22+1,33+1,44+1,55+1,66+1]:\n                                  if player_head - 2 == segment:\n                                     close_segments = close_segments + 1\n                                  if player_head + 10 == segment:\n                                     close_segments = close_segments + 1\n                                  if player_head - 12 == segment:\n                                     close_segments = close_segments + 1\n                                        \n                        elif player_head == 10:\n                               if player_head - 1 == segment:\n                                  hit_segments = hit_segments + 1\n                                  break\n                               if player_head not in [0+1,11+1,22+1,33+1,44+1,55+1,66+1]:\n                                  if player_head - 2 == segment:\n                                     close_segments = close_segments + 1\n                                  if player_head + 11 == segment:\n                                     close_segments = close_segments + 1   \n                                        \n                        elif player_head == 76:\n                               if player_head - 1 == segment:\n                                  hit_segments = hit_segments + 1\n                                  break\n                               if player_head not in [0+1,11+1,22+1,33+1,44+1,55+1,66+1]:\n                                  if player_head - 2 == segment:\n                                     close_segments = close_segments + 1\n                                  if player_head - 11 == segment:\n                                     close_segments = close_segments + 1     \n                            \n                    else:  \n                        if player_head not in [0,66]: \n                            for segment in opp_goose:\n                               if player_head + 10 == segment:\n                                  hit_segments = hit_segments + 1 \n                               if player_head + 10 + 11 == segment:\n                                  close_segments = close_segments + 1\n                               if player_head + 10 - 11 == segment:\n                                  close_segments = close_segments + 1\n                               if player_head + 10 - 1== segment:\n                                  close_segments = close_segments + 1  \n                               if player_head + 10 - 2== segment:\n                                  close_segments = close_segments + 1  \n                                    \n                        if player_head == 0: \n                            for segment in opp_goose:\n                               if player_head + 10 == segment:\n                                  hit_segments = hit_segments + 1 \n                                  break\n                               if player_head + 10 + 11 == segment:\n                                  close_segments = close_segments + 1\n                               if player_head + 10 - 1 == segment:\n                                  close_segments = close_segments + 1\n                               if player_head + 10 - 2 == segment:\n                                  close_segments = close_segments + 1   \n                                    \n                        if player_head == 66: \n                            for segment in opp_goose:\n                               if player_head + 10 == segment:\n                                  hit_segments = hit_segments + 1 \n                                  break\n                               if player_head + 10 - 11 == segment:\n                                  close_segments = close_segments + 1\n                               if player_head + 10 - 1 == segment:\n                                  close_segments = close_segments + 1  \n                               if player_head + 10 - 2 == segment:\n                                  close_segments = close_segments + 1 \n                                    \n            score = 100*diff_distance_reward - 2e2*close_segments - 1e3*hit_segments \n            print(f'West:{score}')\n            return score\n        \n        \n    def next_move(last_action = None):\n            scores = []\n            observation = Observation(obs_dict)\n            configuration = Configuration(config_dict)\n            player_index = observation.index\n            player_goose = observation.geese[player_index]\n            player_head = player_goose[0]\n            player_row,player_column = row_col(player_head,configuration.columns)\n            food = observation.food[0]\n            food_row,food_column = row_col(food,configuration.columns)\n            food_piece = food\n            max_score_values = []\n            max_score_loc  = []\n            \n            # Checking allowed movements\n            if len(player_goose)== 1:\n                if last_action == None:\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))            \n                        max_score = np.argmax(scores)\n\n\n                        if max_score == 0:\n                            return Action.SOUTH.name \n                        if max_score == 1:\n                            return Action.NORTH.name \n                        if max_score == 2:\n                            return Action.EAST.name \n                        if max_score == 3:\n                            return Action.WEST.name \n                        \n                if last_action == 'SOUTH':\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))            \n                        max_score = np.argmax(scores)\n\n\n                        if max_score == 0:\n                            return Action.SOUTH.name \n                        if max_score == 1:\n                            return Action.EAST.name \n                        if max_score == 2:\n                            return Action.WEST.name \n                        \n                if last_action == 'NORTH':\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))            \n                        max_score = np.argmax(scores)\n\n\n                        if max_score == 0:\n                            return Action.NORTH.name \n                        if max_score == 1:\n                            return Action.EAST.name \n                        if max_score == 2:\n                            return Action.WEST.name \n\n                if last_action == 'EAST':\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))\n                        max_score = np.argmax(scores)\n\n                        if max_score == 0:\n                            return Action.SOUTH.name \n                        if max_score == 1:\n                            return Action.NORTH.name \n                        if max_score == 2:\n                            return Action.EAST.name \n                        \n                if last_action == 'WEST':\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))\n                        max_score = np.argmax(scores)\n\n                        if max_score == 0:\n                            return Action.SOUTH.name \n                        if max_score == 1:\n                            return Action.NORTH.name \n                        if max_score == 2:\n                            return Action.WEST.name \n                        \n            elif player_head == player_goose[1] + 1 :\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))  \n                max_score = np.argmax(scores)\n\n\n                if max_score == 0:\n                    return Action.SOUTH.name \n                if max_score == 1:\n                    return Action.NORTH.name \n                if max_score == 2:\n                    return Action.EAST.name \n\n            elif player_head == player_goose[1] - 1 :\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))            \n                max_score = np.argmax(scores)\n\n\n                if max_score == 0:\n                    return Action.SOUTH.name \n                if max_score == 1:\n                    return Action.NORTH.name \n                if max_score == 2:\n                    return Action.WEST.name \n\n            elif player_head == player_goose[1] - 11 :\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))            \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))            \n                max_score = np.argmax(scores) \n\n                if max_score == 0:\n                    return Action.NORTH.name \n                if max_score == 1:\n                    return Action.EAST.name \n                if max_score == 2:\n                    return Action.WEST.name \n\n            elif player_head == player_goose[1] + 11 :\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))            \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))            \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST')) \n                max_score = np.argmax(scores) \n\n                if max_score == 0:\n                    return Action.SOUTH.name \n                if max_score == 1:\n                    return Action.EAST.name \n                if max_score == 2:\n                    return Action.WEST.name       \n\n            elif player_head == player_goose[1] - 11 * 6 :\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST')) \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))  \n                max_score = np.argmax(scores)\n\n\n                if max_score == 0:\n                    return Action.SOUTH.name \n                if max_score == 1:\n                    return Action.EAST.name \n                if max_score == 2:\n                    return Action.WEST.name \n\n            elif player_head == player_goose[1] + 11 * 6 :\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST')) \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))  \n                max_score = np.argmax(scores)\n\n\n                if max_score == 0:\n                    return Action.NORTH.name \n                if max_score == 1:\n                    return Action.EAST.name \n                if max_score == 2:\n                    return Action.WEST.name \n\n            elif player_head == player_goose[1] - 11 :\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST')) \n                max_score = np.argmax(scores)\n\n\n                if max_score == 0:\n                    return Action.SOUTH.name \n                if max_score == 1:\n                    return Action.NORTH.name \n                if max_score == 2:\n                    return Action.EAST.name \n\n            elif player_head == player_goose[1] + 11 :\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH')) \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))  \n                max_score = np.argmax(scores)\n\n\n                if max_score == 0:\n                    return Action.NORTH.name \n                if max_score == 1:\n                    return Action.SOUTH.name \n                if max_score == 2:\n                    return Action.WEST.name \n                \n    observation = Observation(obs_dict)\n    if observation.step == 0:\n        best_move = next_move()\n    if observation.step >= 1:\n        best_move = next_move(last_action)   \n    class last_Direction:\n        def __init__(self, direction):\n            self.direction = direction\n            \n    Direction = last_Direction(best_move)\n    last_action = Direction.direction\n    print(last_action)\n    return last_action","270d6885":"from kaggle_environments import make\nenv = make('hungry_geese',debug=True)\nprint(env.agents)","245ec538":"env.run([my_agent,'greedy','greedy','greedy'])\nenv.render(mode='ipython')","df5d3f25":"def get_win_percentages(agent1,agent2,agent3,agent4, n_rounds=100):   \n    outcomes = evaluate(\"hungry_geese\", [agent1, agent2],  n_rounds\/\/2)\n    # Agent 2 goes first (roughly) half the time      \n    outcomes += [[b,a,c,d] for [a,b,c,d] in evaluate(\"hungry_geese\",[agent1,agent2,agent3,agent4,],n_rounds)]\n    print(\"Agent 1 Win Percentage:\", outcomes)\n","8292e9c6":"from kaggle_environments import evaluate \n\nget_win_percentages(my_agent,'greedy','greedy','greedy')","643e23ad":"import inspect\nimport os\n\ndef write_agent_to_file(function, file):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(inspect.getsource(function))\n        print(function, \"written to\", file)\n\nwrite_agent_to_file(my_agent, \"submission.py\")","841c9a71":"\n## Greedy Agent"}}