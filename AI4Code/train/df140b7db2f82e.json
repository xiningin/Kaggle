{"cell_type":{"d847a39a":"code","fdaaa4ce":"code","f4ae0251":"code","f617f80d":"code","6f54339b":"code","8ba04a35":"code","376adedf":"code","7594294d":"code","737f873d":"code","06f4e3e7":"code","fe29201c":"code","0598f52f":"code","f6ef4867":"code","ab3402f2":"code","347bf9df":"code","33ecc074":"code","2105312b":"code","1bf1101a":"code","3cb44f9b":"code","4e51efcf":"code","a0af762f":"code","0bae5ae6":"code","0ddb345a":"code","4ba52206":"code","47e0a01e":"code","e1898a6a":"code","fb9809b6":"code","1508371d":"code","13fb1712":"code","04fe49fa":"code","91ced739":"code","ad64a579":"code","b8aa57f1":"code","4fea6975":"code","c27adf33":"code","4a71b0fd":"code","b1de5658":"code","435e7d68":"code","7bd77fc3":"markdown","28c0a69f":"markdown","5d981796":"markdown","7c44669d":"markdown","b936a960":"markdown"},"source":{"d847a39a":"# \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e \u043f\u0430\u043a\u0435\u0442\u044b\n\nimport os\nimport pandas as pd\nimport numpy as np\nimport scipy.sparse as sps\nfrom time import time\nfrom scipy.sparse import csr_matrix\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn import preprocessing\nfrom collections import Counter","fdaaa4ce":"!cd\n!ls","f4ae0251":"# \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\n\nPATH_TO_DATA = '..\/input\/catch-me-if-you-can-intruder-detection-through-webpage-session-tracking2\/'\n\ntrain_df = pd.read_csv(os.path.join(PATH_TO_DATA, 'train_sessions.csv'),\n                       index_col='session_id')\ntest_df = pd.read_csv(os.path.join(PATH_TO_DATA, 'test_sessions.csv'),\n                      index_col='session_id')","f617f80d":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435\ntrain_df.head()","6f54339b":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435\ntest_df.head()","8ba04a35":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044e \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445\ntrain_df.info()","376adedf":"# \u0432 \u0442\u0430\u0439\u043c\u0441 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430\u0434\u043e \u043c\u0435\u043d\u044f\u0442\u044c\n# \u0441\u043d\u0430\u0447\u0430\u043b\u043e \u0441\u0434\u0435\u043b\u0430\u044e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430 \u043a\u043e\u043b\u043e\u043d\u043e\u043a time \u0438 site\n\ntimes = ['time' + str(i) for i in range(1, 11)]\nsites = ['site' + str(i) for i in range(1, 11)]","7594294d":"# \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u043c\u0435\u043d\u044f\u044e \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 time \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0441\u0435\u0442\u0435\n\ntrain_df[times] = train_df[times].apply(pd.to_datetime)\ntest_df[times] = test_df[times].apply(pd.to_datetime)","737f873d":"train_df.info()","06f4e3e7":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0440\u0430\u0437\u0440\u044f\u0436\u0435\u043d\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b\n\ndef create_sparse_matrix(dataframe):\n    tmp_arr = np.array(dataframe)\n    row = 0\n    rows = []\n    cols = []\n    data = []\n\n    for arr in tmp_arr:\n        unique, counts = np.unique(arr, return_counts=True)\n        #print(dict(zip(unique, counts)))\n        for key, value in dict(zip(unique, counts)).items():\n            if key != 0:\n                rows.append(row)\n                cols.append(key-1)\n                data.append(value)\n        row = row + 1\n        \n    return(sps.coo_matrix((data, (rows, cols))))","fe29201c":"# \u0432\u044b\u0434\u0435\u043b\u044e y \u0438 \u0437\u0430\u043f\u043e\u043b\u044c\u043d\u044e nan\ny = train_df.target\ntrain_df = train_df.fillna(0)\ntest_df = test_df.fillna(0)","0598f52f":"# \u043e\u0431\u044a\u0435\u0434\u0435\u043d\u044e \u0434\u0432\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\ntrain_test_df = pd.concat([train_df.drop('target', axis=1), test_df])","f6ef4867":"# \u0432\u044b\u0434\u0435\u043b\u044e \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0441 site \u0438 \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u044e \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 int\ntrain_test_df_sites = train_test_df[sites]\ntrain_test_df_sites = train_test_df_sites.astype(int)","ab3402f2":"# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044e \u0434\u043b\u0438\u043d\u0443 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430\nidx_split = y.shape[0]","347bf9df":"# \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u044f\u0436\u0435\u043d\u043d\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443\ntrain_test_sparse = csr_matrix(create_sparse_matrix(train_test_df_sites))","33ecc074":"train_test_sparse.shape","2105312b":"#\u0432\u044b\u0434\u0435\u043b\u044e \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0440\u0430\u0437\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0439 \u0442\u0435\u0441\u0442 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0442\u0435\u0441\u0442\nX_train_sparse = train_test_sparse[:idx_split]\nX_test_sparse = train_test_sparse[idx_split:]","1bf1101a":"X_train_sparse.shape","3cb44f9b":"train_share = int(.1 * X_train_sparse.shape[0])\ntrain_share","4e51efcf":"#\u0440\u0430\u0437\u0434\u0435\u043b\u044e \u0435\u0449\u0435 \u0442\u0440\u0435\u043d\u0435\u0440\u0438\u0432\u043e\u0447\u043d\u044b\u0439 \u0442\u0435\u0441\u0442 \u0432 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 90 : 10 \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n\n# \u044d\u0442\u043e \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432\ntrain_share = int(.1 * X_train_sparse.shape[0])\nX_train, y_train = X_train_sparse[:train_share, :], y[:train_share]\nX_valid, y_valid  = X_train_sparse[train_share:, :], y[train_share:]","a0af762f":"from sklearn import linear_model\nfrom sklearn.metrics import roc_auc_score","0bae5ae6":"sgd_logit = SGDClassifier(loss='log', n_jobs=-1)\nsgd_logit.fit(X_train, y_train)","0ddb345a":"logit_valid_pred_proba = sgd_logit.predict(X_valid)","4ba52206":"roc_auc_score(y_valid, logit_valid_pred_proba)","47e0a01e":"from sklearn import ensemble\nfrom sklearn import datasets\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import mean_squared_error","e1898a6a":"# Fit regression model\nparams = {'n_estimators': 500, 'max_depth': 4, 'min_samples_split': 2,\n          'learning_rate': 0.01, 'loss': 'ls'}\nclf = ensemble.GradientBoostingRegressor(**params)\n\nclf.fit(X_train, y_train)\nmse = mean_squared_error(y_valid, clf.predict(X_valid))\nprint(\"MSE: %.4f\" % mse)","fb9809b6":"roc_auc_score(y_valid, clf.predict(X_valid))","1508371d":"from sklearn.model_selection import TimeSeriesSplit, cross_val_score, GridSearchCV","13fb1712":"time_split = TimeSeriesSplit(n_splits=10)","04fe49fa":"[(el[0].shape, el[1].shape) for el in time_split.split(X_train_sparse)]","91ced739":"logit = LogisticRegression(C=1, solver='lbfgs')","ad64a579":"cv_scores = cross_val_score(logit, X_train_sparse, y, cv=time_split, \n                            scoring='roc_auc', n_jobs=1) ","b8aa57f1":"cv_scores, cv_scores.mean()","4fea6975":"logit.fit(X_train_sparse, y)","c27adf33":"# \u0441\u0434\u0435\u043b\u0430\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b\n\ndef write_to_submission_file(predicted_labels, out_file,\n                             target='target', index_label=\"session_id\"):\n    # turn predictions into data frame and save as csv file\n    predicted_df = pd.DataFrame(predicted_labels,\n                                index = np.arange(1, predicted_labels.shape[0] + 1),\n                                columns=[target])\n    predicted_df.to_csv(out_file, index_label=index_label)","4a71b0fd":"cv_pred = logit.predict_proba(X_test_sparse)[:, 1]\n#write_to_submission_file(cv_pred, \".\/kaggle_data\/time_predictions.csv\")","b1de5658":"c_values = np.logspace(-2, 2, 10)\n\nlogit_grid_searcher = GridSearchCV(estimator=logit, param_grid={'C': c_values},\n                                  scoring='roc_auc', n_jobs=1, cv=time_split, verbose=1)","435e7d68":"logit_grid_searcher.fit(X_train_sparse, y)\nlg_searcher = logit_grid_searcher.predict_proba(X_test_sparse)[:, 1]\n#write_to_submission_file(lg_searcher, \".\/kaggle_data\/logit_grid_searche_site.csv\")","7bd77fc3":"## TimeSeriesSplit","28c0a69f":"## Gradient Boosting regression","5d981796":"## GridSearchCV","7c44669d":"## SGDClassifier","b936a960":"# \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439"}}