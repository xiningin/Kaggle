{"cell_type":{"b2ca4eb0":"code","58af7504":"code","de3ee1d8":"code","6b0cbf42":"code","48e49d22":"code","4ae106cf":"code","851113dd":"code","9c6af43e":"code","9efdedae":"code","fe200908":"code","474d77b6":"code","f17f6eaf":"code","7c1c600b":"code","dfe3995a":"code","c0b1ea36":"code","689d0ae5":"code","97b53ba8":"code","fddc9d6e":"code","60ffaa87":"code","b1cb786a":"markdown","1d19034d":"markdown","962d5789":"markdown","a4c4baf0":"markdown"},"source":{"b2ca4eb0":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import imshow","58af7504":"# import pandas as pd\n# raw_data = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n# def csv_to_numpy(raw_data):\n#     images = np.empty((0,28,28,1))\n#     for i in range(len(raw_data)):\n#         image = raw_data.iloc[i,:]\n#         image = image.values\n#         image = image.reshape(1,28,28,1)\n#         images = np.append(images,image, axis=0)\n#         if not(i % 1000):\n#             print(i)\n#     return images\n# images = csv_to_numpy(raw_data)","de3ee1d8":"def load_dataset_normalised(ratio):\n    idx = np.random.permutation(42000)\n    \n    images = np.load('\/kaggle\/input\/mnist-digit-images-in-numpy-arrays\/images.npy')\n    images_label = np.load('\/kaggle\/input\/mnist-digit-images-in-numpy-arrays\/images_label.npy')\n    \n    X_train = images[idx[0:int(ratio*42000)]]\/255 #normalization and test train split\n    X_train = X_train[:,:,:,np.newaxis]\n    Y_train = images_label[idx[0:int(ratio*42000)]]\n    #one-hot encoding\n    a = Y_train\n    b = np.zeros((a.size, a.max()+1))\n    b[np.arange(a.size),a] = 1\n    Y_train = b\n    \n    X_test = images[idx[int(ratio*42000)+1:]]\/255\n    X_test = X_test[:,:,:,np.newaxis]\n    Y_test = images_label[idx[int(ratio*42000)+1:]]\n    #one-hot encoding\n    a = Y_test\n    b = np.zeros((a.size, a.max()+1))\n    b[np.arange(a.size),a] = 1\n    Y_test = b\n    \n    return X_train, Y_train, X_test, Y_test","6b0cbf42":"ratio = 0.9\nX_train, Y_train, X_test, Y_test = load_dataset_normalised(ratio) \n\nprint (\"number of training examples = \" + str(X_train.shape[0]))\nprint (\"number of test examples = \" + str(X_test.shape[0]))\nprint (\"X_train shape: \" + str(X_train.shape))\nprint (\"Y_train shape: \" + str(Y_train.shape))\nprint (\"X_test shape: \" + str(X_test.shape))\nprint (\"Y_test shape: \" + str(Y_test.shape))","48e49d22":"X = np.append(X_train,X_test,axis=0)\nY = np.append(Y_train,Y_test,axis=0)","4ae106cf":"import keras","851113dd":"def DigitModel(input_shape):\n    X_input=keras.Input(input_shape)\n    \n    X=keras.layers.ZeroPadding2D((3,3))(X_input)\n    \n    X = keras.layers.Conv2D(32, (7, 7), strides = (1, 1), name = 'conv0')(X)\n    X = keras.layers.BatchNormalization(axis = 3, name = 'bn0')(X)\n    X = keras.layers.Activation('relu')(X)\n    \n    X = keras.layers.MaxPooling2D((2, 2), name='max_pool_0')(X)\n    \n    X = keras.layers.Conv2D(64, (7, 7), strides = (2, 2), name = 'conv1')(X)\n    X = keras.layers.BatchNormalization(axis = 3, name = 'bn1')(X)\n    X = keras.layers.Activation('relu')(X)\n    \n    X = keras.layers.AveragePooling2D((2, 2),strides=2, name='avg_pool_0')(X)\n    \n    \n    X = keras.layers.Flatten()(X)\n    X = keras.layers.Dense(20, activation='relu')(X)\n    X = keras.layers.Dense(10, activation='sigmoid', name='fc')(X)\n\n    model = keras.models.Model(inputs = X_input, outputs = X, name='digitModel')\n    \n    return model","9c6af43e":"digitModel = DigitModel((28,28,1))","9efdedae":"digitModel.summary()","fe200908":"digitModel.compile(optimizer=\"Adam\",loss=\"categorical_crossentropy\",metrics = [\"accuracy\"])","474d77b6":"history = digitModel.fit(x= X,y=Y,validation_split=0.15,epochs=4,batch_size=64)","f17f6eaf":"from IPython.display import Audio, display\n\ndef allDone():\n  display(Audio(url='https:\/\/www.myinstants.com\/media\/sounds\/tuturu_1.mp3', autoplay=True))\nallDone()","7c1c600b":"# Plot training & validation accuracy values\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\nplt.clf()\n# Plot training & validation loss values\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","dfe3995a":"digitModel.save(\"kerasModelv1.h5\")","c0b1ea36":"from keras.utils import plot_model\nplot_model(digitModel, to_file='model.png')","689d0ae5":"# from keras.models import load_model\nX = np.load('\/kaggle\/input\/mnist-digit-images-in-numpy-arrays\/test-images.npy')\npredictions = digitModel.predict(X\/255)","97b53ba8":"temp = predictions.argmax(axis = 1)\ntemp #These are the predictions of the model","fddc9d6e":"plt.imshow(X[1].reshape(28,28)) #manual check","60ffaa87":"submission = pd.DataFrame({'ImageId': range(1,len(temp)+1), 'Label': temp})\nsubmission.to_csv('submission.csv',index=False)","b1cb786a":"# <a name=\"head1\"><\/a> 1.Converting to numpy arrays\nimages were converted into numpy arrays for easy access using the following code.","1d19034d":"# CNN\nCreated using keras","962d5789":"# 2.Loading in the data <a name=\"head2\"><\/a>\nThe numpy arrays created were split into test and train data and also normalised.    \nAlso the labels were one-hot encoded as the ouput will be a dense layer of size 10.   \nI have split the data 90\/10 but you can change it by editing the ratio parameter.   ","a4c4baf0":"# Digit Recognizer\n1. [Converting to numpy arrays](#head1)\n2. [Loading Images](#head2)\n3. [CNN Model](#head2)\n4. [Evaluation and training curves.](#head3)"}}