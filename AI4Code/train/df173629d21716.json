{"cell_type":{"dc7933a4":"code","ee6b0f87":"code","1a290477":"code","c68020ba":"code","1ba65e0e":"code","ae9cbb11":"code","57d8f381":"code","9161022c":"code","2e63bb99":"code","97d90f21":"code","f812b5e8":"code","13718685":"code","caa80901":"code","d5cc3ad4":"code","4244f4a3":"code","7b5bf449":"code","b4adfc11":"code","aefb65f6":"code","134001ce":"code","b39b03b9":"code","e86283b5":"code","058f7d00":"code","c4342602":"code","6b8af5b8":"code","869a4527":"code","048d195d":"code","66438c84":"code","d1fb9bf3":"code","5aa47e2a":"code","047adaf7":"code","844f4653":"markdown","41b23d92":"markdown","4e5d1f0b":"markdown","8b6503cc":"markdown","0d6c3321":"markdown","c1a6fdbe":"markdown","adcf54b5":"markdown","6c0f1327":"markdown","40440353":"markdown","8ea59f61":"markdown","be084228":"markdown","cf741d5e":"markdown"},"source":{"dc7933a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns \n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ee6b0f87":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_PassengerId = test_df[\"PassengerId\"]","1a290477":"train_df.columns","c68020ba":"train_df.head()","1ba65e0e":"train_df.describe()","ae9cbb11":"train_df.info()","57d8f381":"def bar_plot(variable):\n    \n    \"\"\"\n    input:  variable exp: \"Survived\"\n    output: bar plot & value count\n    \"\"\"\n    var = train_df[variable]  #get feature\n    \n    varValue = var.value_counts() #count value of categorical variable\n    \n    plt.figure(figsize = (9,5))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","9161022c":"Category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in Category1:\n    bar_plot(c)","2e63bb99":"Category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in Category2:\n    print(train_df[c].value_counts())","97d90f21":"def plot_hist(variable):\n    plt.figure(figsize = (9,5))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()\n    \n    ","f812b5e8":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","13718685":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","caa80901":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","d5cc3ad4":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","4244f4a3":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","7b5bf449":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        Q1 = np.percentile(df[c],25)  # 1st quartile\n        \n        Q3 = np.percentile(df[c],75)  # 3rd quartile\n         \n        IQR = Q3 - Q1 #IQR\n        \n        outlier_step = IQR * 1.5  # outlier step\n        \n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step )].index # detect outlier \n        \n        outlier_indices.extend(outlier_list_col)\n     \n    \n    outlier_indices = Counter(outlier_indices)    \n    multiple_outliers = list(i for i,v in outlier_indices.items() if v > 2)    \n    \n    return multiple_outliers\n    ","b4adfc11":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","aefb65f6":"train_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True) # drop outliers","134001ce":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","b39b03b9":"train_df.head()","e86283b5":"train_df.columns[train_df.isnull().any()]","058f7d00":"train_df.isnull().sum()","c4342602":"train_df[train_df[\"Embarked\"].isnull()]","6b8af5b8":"\ntrain_df.boxplot(column= \"Fare\" , by = \"Embarked\")\nplt.show()","869a4527":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\") ","048d195d":"train_df[train_df[\"Embarked\"].isnull()]","66438c84":"train_df[train_df[\"Fare\"].isnull()]","d1fb9bf3":" train_df[train_df[\"Pclass\"] == 3][\"Fare\"].mean()","5aa47e2a":"train_pclass_mean =  train_df[train_df[\"Pclass\"] == 3][\"Fare\"].mean()\ntrain_df[\"Fare\"] = train_df[\"Fare\"].fillna(train_pclass_mean) ","047adaf7":"train_df[train_df[\"Fare\"].isnull()]","844f4653":"<a id= \"5\"><\/a>\n## Numerical Variable","41b23d92":"<a id= \"7\"><\/a>\n# Outlier Detection","4e5d1f0b":"<a id= \"9\"><\/a>\n## Find Missing Value","8b6503cc":"## dtypes:\n* float64(2): Fare and Age\n* int64(5): PassengerId, Survived, Pclass, SibSp and Parch\n* object(5): Name, Sex, Ticket, Cabin and Embarked","0d6c3321":"<a id= \"10\"><\/a>\n## Fill Missing Value\n*     Embarked has 2 missing value\n*     Fare has 1 missing value","c1a6fdbe":"<a id= \"3\"><\/a>\n#  Univariate Variable Analysis\n   * Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n   * Numerical Variable: PassengerId, Age and Fare ","adcf54b5":"<a id= \"8\"><\/a>\n# Missing Values\n   * Find Missing Value\n   * Fill Missing Value","6c0f1327":"<a id= \"4\"><\/a>\n## Categorical Variable","40440353":"<a id= \"2\"><\/a>\n# Variable Description\n1. PassengerId: unique id number to each passenger\n1. Survived: passenger survive(1) or died(0)\n1. Pclass: passenger class\n1. Name: name\n1. Sex: gender of passenger\n1. Age: age of passenger\n1. SibSp: number of siblings\/spouses\n1. Parch: number of parents\/childeren\n1. Ticket: ticket number\n1. Fare: amount of  money spent on ticket\n1. Cabin: cabin category\n1. Embarked: port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)","8ea59f61":"<a id= \"1\"><\/a>\n#  Load and Check Data","be084228":"# Introduction\nTitanic is one of the largest and most luxurious ocean liners even the largest ocean liner in service at the time. Titanic sank after colliding with an iceberg in during her first voyage. Of the 2,224 people on board, more than 1,500 people were killed.\n\n<font color ='blue'>\n\nContent:\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Values](#8)\n   * [Find Missing Value](#9)\n   * [Fill Missing Value](#10)","cf741d5e":"<a id= \"6\"><\/a>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived"}}