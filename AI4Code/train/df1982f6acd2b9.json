{"cell_type":{"46b8d84d":"code","58c94fe4":"code","0b19c7a7":"code","9caca0dd":"code","fab96b56":"code","db8346b8":"code","5e264194":"code","458e8fdf":"code","6b2f8213":"code","6c3d22d5":"code","c23e726d":"code","c89e926a":"code","b99bd2e4":"code","8b774a60":"code","a748162f":"code","3ce3840a":"markdown"},"source":{"46b8d84d":"import pandas as pd\nimport numpy as np\nimport os\nfrom tqdm import tqdm_notebook","58c94fe4":"STOCKS_DIR = '\/kaggle\/input\/price-volume-data-for-all-us-stocks-etfs\/ETFs\/'","0b19c7a7":"dateparse = lambda dates: pd.datetime.strptime(dates, '%Y-%m-%d')\nread_args = {\n    'sep': ',',\n    'index_col': 'Date',\n    'parse_dates': ['Date'],\n    'date_parser': dateparse\n}","9caca0dd":"_, _, filenames = next(os.walk(STOCKS_DIR))\n\netf_data = dict()\n\nfor f in tqdm_notebook(filenames):\n    try:\n        data_chunk = pd.read_csv(STOCKS_DIR+f, **read_args)\n    except pd.errors.EmptyDataError:\n        continue\n    if not data_chunk.empty:\n        etf_data[f[:-7]] = data_chunk","fab96b56":"some_etf = list(etf_data.keys())[0]\ntest_data = etf_data[some_etf]","db8346b8":"test_data.sample(5)","5e264194":"some_etf","458e8fdf":"import matplotlib.pyplot as plt\nplt.style.use('Solarize_Light2')","6b2f8213":"fig, ax = plt.subplots(figsize=(12, 6))\nax.plot(test_data.index, test_data['Close'].values)","6c3d22d5":"from statsmodels.tsa.holtwinters import SimpleExpSmoothing, Holt","c23e726d":"def exp_smoothing(data, col_name):\n    model = SimpleExpSmoothing(np.asarray(data[col_name]))\n    model._index = pd.to_datetime(data.index)\n    \n    fit1 = model.fit(optimized=True)\n    fit2 = model.fit(smoothing_level=.3)\n    fit3 = model.fit(smoothing_level=.6)\n    \n    model_h = Holt(np.asarray(data[col_name]))\n    model_h._index = pd.to_datetime(data.index)\n\n    fit1_h = model_h.fit(smoothing_level=.6,\n                         smoothing_trend=.2)\n    fit2_h = model_h.fit(optimized=True)\n    fit3_h = model_h.fit(smoothing_level=.9,\n                         smoothing_trend=0)\n    \n    fits = [fit1, fit2, fit3]\n    fits_h = [fit1_h, fit2_h, fit3_h]\n    return fits, fits_h","c89e926a":"exp_smth, exp_smth_holts = exp_smoothing(test_data, 'Close')","b99bd2e4":"def plot_smoothing(data, col_name, is_holts, smoothing_results, n=100):\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(data.index[:n], data[col_name].values[:n])\n    \n    for f, c in zip(smoothing_results, ['#ff7823','#3c763d','c']):\n        if is_holts:\n            label=\"alpha=\"+str(f.params['smoothing_level'])[:4]+\\\n            \", beta=\"+str(f.params['smoothing_trend'])[:4]\n        else:\n            label=\"alpha=\"+str(f.params['smoothing_level'])[:3]\n        ax.plot(data.index[:n],\n                f.fittedvalues[:n],\n                label=label,\n                color=c)\n    if is_holts:\n        plt.title(\"Holt's Exponential Smoothing\") \n    else:\n        plt.title(\"Simple Exponential Smoothing\")\n    plt.legend()\n    plt.show()","8b774a60":"plot_smoothing(test_data, 'Close', False, exp_smth, n=100)","a748162f":"plot_smoothing(test_data, 'Close', True, exp_smth_holts, n=100)","3ce3840a":"### REFERENCE:\n[https:\/\/towardsdatascience.com\/time-series-in-python-exponential-smoothing-and-arima-processes-2c67f2a52788](http:\/\/)"}}