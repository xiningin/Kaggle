{"cell_type":{"99100aa4":"code","ce9f08d5":"code","f86b8171":"code","9bf5521e":"code","085f4bc8":"code","73ea71d6":"code","46b45b03":"code","376cb6da":"code","73df64c8":"code","274a2520":"code","360d46d3":"code","b49d4b83":"code","0caa820e":"code","2f8a7a81":"code","91f99166":"code","0a80e968":"code","79f70a0e":"code","9cc81907":"code","0ecf716a":"code","b3c5042b":"code","e4eb870b":"code","40f621c2":"code","b9bd93ce":"code","80dc156b":"code","f5603498":"code","8dde9a05":"code","f3e4b28b":"code","7c8d2689":"code","f9753e36":"code","3552661c":"code","9bdae089":"code","ca726002":"code","12505fa9":"code","d4d7670b":"code","c1cacd05":"code","0b7dbd2c":"code","012123b4":"code","c41760d1":"code","5a610520":"code","6b383bbb":"code","4d02536c":"code","ccff0a57":"code","36322d9e":"code","131d41f5":"code","8be896bf":"code","26b373c3":"code","ea41a1af":"code","f0c82f85":"code","08078a75":"code","120f74e4":"code","72d78168":"code","f1fa3513":"code","3d089c21":"code","1a2ad549":"code","d4343b8f":"code","11b0a4cb":"code","148de0fb":"code","78054244":"code","d6391895":"code","8793b8c5":"code","1f73f27a":"code","08889205":"code","9a285725":"code","0049847d":"code","4b1e82dc":"code","6517320e":"code","2eb2e2fa":"code","a75bda96":"code","efada98d":"code","2ede9ccd":"code","6282cdc9":"code","66be79a3":"code","b819f69e":"code","65586a1d":"code","1ccbd9f4":"code","a65509f1":"code","9c95e345":"code","68f8bd39":"code","19b83bd1":"code","b3bcfe79":"code","b08c08e0":"code","fc07cb03":"code","6cca267c":"code","7b705e62":"code","3752eb80":"code","9980a851":"code","ec5799aa":"code","43d513d0":"code","8f1348c5":"code","b8045f22":"code","de8b8283":"code","7b7431b1":"code","208396f6":"code","8c9f00d8":"code","fbec5987":"code","f53ecde8":"code","c6675250":"code","c8624a15":"code","5969245d":"code","1601f865":"code","5224b205":"code","b91b74e2":"code","26ab055a":"code","5a95bbdc":"code","da1198d1":"code","7def19a7":"code","15f2ae51":"code","75830488":"code","45fc9d52":"code","5bc411bb":"code","4800122f":"code","9b5fc845":"markdown","c3a89c69":"markdown","87b48922":"markdown","8dce9d4c":"markdown","0e75ff75":"markdown","d924aca8":"markdown","923b9691":"markdown","7560e4b5":"markdown","d4f740e3":"markdown","ef736892":"markdown","e72cb3eb":"markdown","5193af7d":"markdown","1ad91dea":"markdown","5d24538b":"markdown","d15a8696":"markdown","b3355009":"markdown","a12ecfe5":"markdown","cee6db22":"markdown","950902c6":"markdown","7201f5d0":"markdown","df811ce6":"markdown","95db42ac":"markdown","b6089848":"markdown","0eba21a1":"markdown","b39c0d67":"markdown","ea5c7613":"markdown","7dbfb242":"markdown","c33dcf0f":"markdown","75c95f85":"markdown","10cb2823":"markdown","75538d43":"markdown","eb9fa518":"markdown","f1eaf552":"markdown","04c65766":"markdown","5fd9ef4c":"markdown","0a320e00":"markdown","76ea2096":"markdown","7f0c6992":"markdown","ed7866bf":"markdown","2f49cd86":"markdown","062e30ba":"markdown","d0285c61":"markdown"},"source":{"99100aa4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\n\nwarnings.filterwarnings('ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce9f08d5":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntrain_PassengerId = train_df['PassengerId']\n\ntest_PassengerId = test_df[\"PassengerId\"]\n","f86b8171":"train_df.head()","9bf5521e":"train_df.describe().T","085f4bc8":"train_df.columns","73ea71d6":"train_df.index","46b45b03":"train_df.shape","376cb6da":"train_df.info()","73df64c8":"def bar_plot(variable):\n    \"\"\" input : variable (sex,survived ..)\n        output : bar plot & value counts\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    \n    # number of categorical variable\n    val = var.value_counts()\n    \n    # visualise of variable\n    plt.figure(figsize = (8,3))\n    plt.bar(val.index,val)\n    #plt.xticks(val.index,val.values)\n    plt.title(variable)\n    plt.ylabel('Frequency')\n    plt.show()\n    # print variable and values\n    print('{} : \\n {}'.format(variable,val))\n    \n    \n    ","274a2520":"variables = ['Survived','Sex','Pclass','Embarked','SibSp','Parch']\n\nfor var in variables:\n    bar_plot(var)","360d46d3":"variables2 = ['Cabin','Name','Ticket']\n\nfor var2 in variables2:\n    print('{} \\n'.format(train_df[var2].value_counts()))","b49d4b83":"def hist_plot(numeric):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[numeric])\n    plt.xlabel(numeric)\n    plt.ylabel('Frequency')\n    plt.title('{} distribution with histogram plot'.format(numeric))\n    plt.show()","0caa820e":"numericalvar = ['Fare','Age']\nfor num in numericalvar:\n    hist_plot(num)","2f8a7a81":"# Pclass - Survived\n\n# Dataframe of Pclass vs Survived\nPclass_Survived = train_df[['Pclass','Survived']]\n\n# Group by survived mean with pclass and set new index(0,1,...)\nP_S=Pclass_Survived.groupby(['Pclass'],as_index = False).mean().sort_values(by = 'Survived',ascending = False)\n\nP_S","91f99166":"plt.bar(P_S.Pclass,P_S.Survived);\nplt.xlabel('Pclass')\nplt.ylabel('Survived rate ');\nplt.title('Survived rate of Passengers with Pclass');","0a80e968":"# Sex - Survived\n\n# Dataframe of Sex vs Survived\nSex_Survived = train_df[['Sex','Survived']]\n\n# Group by survived mean with pclass and set new index(0,1,...)\nS_S = Sex_Survived.groupby(['Sex'],as_index = False).mean().sort_values(by = 'Survived',ascending = False)\n\nS_S","79f70a0e":"plt.bar(S_S.Sex,S_S.Survived);\nplt.xlabel('Gender')\nplt.ylabel('Survived rate')\nplt.title('Survived rate of Passengers with Gender');","9cc81907":"# SibSp - Survived\n\n# Dataframe of Pclass vs Survived\nSibSp_Survived = train_df[['SibSp','Survived']]\n\n# Group by survived mean with pclass and set new index(0,1,...)\nsib_sp = SibSp_Survived.groupby(['SibSp'],as_index = False).mean().sort_values(by = 'Survived',ascending = False)\n\nsib_sp","0ecf716a":"plt.bar(sib_sp.SibSp,sib_sp.Survived);\nplt.xlabel('SibSp')\nplt.ylabel('Survived rate')\nplt.title('Survived rate of Passengers with SibSp');","b3c5042b":"# Parch - Survived\n\n# Dataframe of Pclass vs Survived\nParch_Survived = train_df[['Parch','Survived']]\n\n# Group by survived mean with pclass and set new index(0,1,...)\np_s = Parch_Survived.groupby(['Parch'],as_index = False).mean().sort_values(by = 'Survived',ascending = False)\n\np_s","e4eb870b":"plt.bar(p_s.Parch,p_s.Survived);\nplt.xlabel('Parch')\nplt.ylabel('Survived rate')\nplt.title('Survived rate of Passengers with Parch');","40f621c2":"# Fare - Survived\n\n# Dataframe of Pclass vs Survived\nFare_Survived = train_df[['Fare','Survived']]\n\n# Group by survived mean with pclass and set new index(0,1,...)\nf_s = Fare_Survived.groupby(['Fare'],as_index = False).mean().sort_values(by = 'Survived',ascending = False)\n\nf_s","b9bd93ce":"plt.plot(f_s.Survived,f_s.Fare);\nplt.xlabel('Tickets Pay')\nplt.ylabel('Survived rate')\nplt.title('Survived rate of Passengers with Values of Tickets');","80dc156b":"# Detect the outliers values and drop the values\n\ndef outliers(data,features):\n    \n    outlier_values = []\n    \n    for i in features:\n    # Q1 Outliers\n        Q1 = np.percentile(data[i],25)\n    # Q3 Outliers\n        Q3 = np.percentile(data[i],75)\n    # IQR \n        IQR = (Q3 - Q1)\n    # outliers step\n        step = (IQR * 1.5)\n    # outliers values\n        outlier = data[(data[i] < (Q1-step)) | (data[i] > (Q3+step))].index\n        \n        outlier_values.extend(outlier)\n        \n    outlier_values = Counter(outlier_values)\n    clear_outlier = list(i for i,j in outlier_values.items() if j>2)\n    \n    return clear_outlier  \n        \n    \nfeatures = ['Age','SibSp','Parch','Fare']\n\ntrain_df.loc[outliers(train_df,features)]","f5603498":"# now drop wir the outliers and reset index from 0,1,2,3....\n\ntrain_df = train_df.drop(outliers(train_df,features),axis = 0).reset_index(drop = True)\n\ntrain_df","8dde9a05":"# Find Missing Values\n\n\ndata = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)\n\ndata.info()","f3e4b28b":"data.isnull().any()","7c8d2689":"data.columns[data.isnull().any()]","f9753e36":"data.isnull().sum()","3552661c":"# Fill Missing Values \n\n\"\"\"  Fill Embarked and Fare\"\"\"\n\n# Embarked data where nan is\ndata[data['Embarked'].isnull()]","9bdae089":"# Analyse with Pclass\ndata[data['Pclass']==1].Embarked.value_counts()","ca726002":"# Analyse with Fare\ndata[ (data['Fare'] > 79 ) & (data['Fare'] < 81)].Embarked.value_counts()","12505fa9":"# of the analyse fill wir with C (6)\n\ndata['Embarked'] = data['Embarked'].fillna('C')\n\ndata['Embarked'].isnull().sum()","d4d7670b":"\"\"\" Fill Fare \"\"\"\n\ndata[data['Fare'].isnull()]","c1cacd05":"# Analyse with Pclass\n\ndata[data['Pclass'] == 3].Fare.value_counts()","0b7dbd2c":"# Anlayse with Embarked\n\ndata[data['Embarked'] == 'S'].Fare.value_counts()","012123b4":"data[(data['Pclass'] == 3) & (data['Embarked'] == 'S')].Fare.value_counts().head(50)","c41760d1":"# the first 50 Passengers of Pclass (3) and Embarked(S) is more then other Passengers\n\nmean_fare = np.mean(data[(data['Pclass'] == 3) & (data['Embarked'] == 'S')].Fare.value_counts().head(50))\n\nmean_fare","5a610520":"data['Fare'] = data['Fare'].fillna(mean_fare)\n\ndata['Fare'].isnull().sum()","6b383bbb":"list1 = [\"SibSp\", \"Parch\", \"Age\" ,\"Fare\",\"Survived\"]\n\nplt.figure(figsize = (10,9))\nsns.heatmap(train_df[list1].corr(),annot = True,fmt = \".2f\");","4d02536c":"sns.factorplot('SibSp','Survived',data = data,kind = 'bar',size = 5);","ccff0a57":"sns.factorplot('Parch','Survived',data = train_df,kind = 'bar');","36322d9e":"sns.factorplot('Pclass','Survived',data = train_df,kind = 'bar');","131d41f5":"g = sns.FacetGrid(data = train_df,col = 'Survived')\ng.map(sns.distplot,'Age');","8be896bf":"# Age distrubitions\nsns.distplot(train_df['Age']);","26b373c3":"# make one facegrid\n\ng = sns.FacetGrid(data = train_df, col = 'Survived', row = 'Pclass')\n\n# mapping with plotting\n\ng.map(plt.hist,'Age');","ea41a1af":"g = sns.FacetGrid(train_df,row = 'Embarked')\n\ng.map(sns.pointplot,'Pclass','Survived','Sex')\ng.add_legend();","f0c82f85":"g = sns.FacetGrid(train_df, col = 'Survived',row = 'Embarked')\ng.add_legend()\ng.map(sns.barplot,'Sex','Fare');\n","08078a75":"# age nan values\n\ndata[data['Age'].isnull()]","120f74e4":"# analysing age with sex\n\nsns.boxplot('Sex','Age',data = data);","72d78168":"# Analysing age with SibSp\n\nsns.boxplot('SibSp','Age',data=data);","f1fa3513":"# age of sex with sibsp\ns_s_a = data[['Sex','SibSp','Age']]\ns_s_a","3d089c21":"df = s_s_a.set_index(['SibSp','Sex'])\nmedians_age = df[['Age']].groupby(df.index).median()\nmedians_age","1a2ad549":"df","d4343b8f":"for i in df[['Age']].groupby(df.index).median()['Age']:\n    print(i)","11b0a4cb":"for i,j in medians_age.index:\n    print(i,j)","148de0fb":"arrays= [[i for i,j in medians_age.index],[j for i,j in medians_age.index]]\nindex = pd.MultiIndex.from_arrays(arrays,names = ('SibSp','Sex'))\ndf2 = pd.DataFrame({'Age_median': [i for i in df[['Age']].groupby(df.index).median()['Age']]},index = index)\ndf2","78054244":"(s_s_a['Sex'].groupby(s_s_a['SibSp']).value_counts())","d6391895":"# Analysing age with Parch\nsns.boxplot('Parch','Age',data = data);","8793b8c5":"s_p_a = train_df[['Sex','Parch','Age']].set_index(['Parch','Sex'])\n\ns_p_a","1f73f27a":"medians_age1 = s_p_a[['Age']].groupby(s_p_a.index).median()\nmedians_age1","08889205":"arrays1= [[i for i,j in medians_age1.index],[j for i,j in medians_age1.index]]\nindex1 = pd.MultiIndex.from_arrays(arrays1,names = ('Parch','Sex'))\ndf3 = pd.DataFrame({'Age_median': [i for i in s_p_a[['Age']].groupby(s_p_a.index).median()['Age']]},index = index1)\ndf3","9a285725":"# Analyise age with Embarked\n\nsns.boxplot('Embarked','Age',hue = 'Sex',data = data);","0049847d":"data[data['Age'].isnull()]","4b1e82dc":"# Analyse age with ['SibSp','Parch','Embarked']\ndata2 = data[['Sex','SibSp','Pclass','Parch','Embarked','Age']].dropna().set_index(['SibSp','Pclass','Parch','Sex','Embarked'])\ndata2","6517320e":"medians_age2 = data2[['Age']].groupby(data2.index).median()\nmedians_age2.head(10)","2eb2e2fa":"# Group the features with age\n\narrays2= ([[i for i,j,k,x,a in medians_age2.index],[j for i,j,k,x,a in medians_age2.index],\n           [k for i,j,k,x,a in medians_age2.index],[x for i,j,k,x,a in medians_age2.index],\n            [a for i,j,k,x,a in medians_age2.index]])\nindex2 = pd.MultiIndex.from_arrays(arrays2,names = ('SibSp','Pclass','Parch','Sex','Embarked'))\ndf4 = pd.DataFrame({'Age_median': [i for i in data2[['Age']].groupby(data2.index).median()['Age']]},index = index2)\ndf4.head(10)","a75bda96":"for i,j,k,x,a in df4.index:\n    print(i,j,k,x,a)","efada98d":"for i,j,k,x in data[data['Age'].isnull()][['SibSp','Parch','Sex','Embarked']].values:\n    print(i,j,k,x)","2ede9ccd":"data[data['Age'].isnull()]","6282cdc9":"# Nan's index number\nindex_nan_age = list(data[\"Age\"][data[\"Age\"].isnull()].index)\n\n# Nans index numbers Sibsp,Parch,Pclass,Embarked,Sex is equals with df4 or others features\n# than giv we the median of age\n\nfor i in index_nan_age:\n    age_pred = (data[\"Age\"][((data[\"SibSp\"] == data.iloc[i][\"SibSp\"]) &\n                                 (data[\"Parch\"] == data.iloc[i][\"Parch\"])& \n                                 (data[\"Pclass\"] == data.iloc[i][\"Pclass\"])&\n                                 (data[\"Embarked\"] == data.iloc[i][\"Embarked\"])&\n                                  (data[\"Sex\"] == data.iloc[i][\"Sex\"]))].median())\n    age_med = data[\"Age\"].median()\n    if not np.isnan(age_pred):\n        data[\"Age\"].iloc[i] = age_pred\n    else:\n        data[\"Age\"].iloc[i] = age_med\n","66be79a3":"age_med","b819f69e":"data[data['Ticket']=='W.\/C. 6607']","65586a1d":"\ndata.iloc[index_nan_age].head(50)","1ccbd9f4":"# Names of train data\ndata['Name'].head()","a65509f1":"# Names analyse with Mr. , Miss , Mrs, ....\nnames_titles = [j[0].split() for j in [i.split('.') for i in data['Name']]]\n\ntitles = [title[1] for title in names_titles]\n\ntitles[:10]","9c95e345":"# count plot of titles\nplt.figure(figsize=(15,8))\ng = sns.countplot(titles)\ng.set_xticklabels(g.get_xticklabels(), rotation=45);","68f8bd39":"# titles anlayse as first four(Mr,Mrs,Miss,Master) and others\n\nothers = list(set([e for e in titles if e not in ('Mr','Mrs','Miss','Master' )]))\n\nothers","19b83bd1":"# give the data title values as title\n\ndata['title'] = titles\n\ndata.head()","b3bcfe79":"# replace others in data\ndef replace(data):\n    for i in data['title']:\n        if i in others:\n            data['title']=data['title'].replace(i,'other')\n            \nreplace(data)","b08c08e0":"# barplot of title\n\nsns.barplot(data['title'],data['Survived']);","fc07cb03":"# Now we can the name-columns delete\n\ndata.drop(['Name'],axis=1,inplace=True)\n\ndata.head()","6cca267c":"# Now can we titles encode\ndata = pd.get_dummies(data,columns=['title'])\n\ndata.head()","7b705e62":"# Now count the persons together woth family and set as family size\n# Self person is one family with 1 count\n\nself_person = 1\n\ndata['family_size'] = data['SibSp'] + data['Parch'] + self_person\n\ndata.head()","3752eb80":"# Family size with Survived\n\nsns.barplot(data['family_size'],data['Survived']);","9980a851":"# Embarked encode\n\nsns.countplot(data['Embarked']);","ec5799aa":"data = pd.get_dummies(data,columns=['Embarked'])\n\ndata.head()","43d513d0":"# Value count of Ticket\n\ndata['Ticket'].value_counts()","8f1348c5":"# Number values of tickets delete\n\ntickets = []\n\nfor i in data['Ticket']:\n    if not i.isdigit():\n        tickets.append(i.replace('.',\"\").replace('\/','').strip().split(' ')[0])\n    else:\n        tickets.append('x')\n        ","b8045f22":"data['Ticket'] = tickets\n\ndata['Ticket'].head(10)","de8b8283":"data.head()","7b7431b1":"# get dimmues of ticket\n\ndata = pd.get_dummies(data,columns=['Ticket'])\n\ndata.head()","208396f6":"# Pclass  visualisation\n\nprint(data['Pclass'].value_counts())\n\nsns.countplot(data['Pclass']);","8c9f00d8":"# Get dummies\ndata = pd.get_dummies(data,columns=['Pclass'])\n\ndata.head()","fbec5987":"# Get dummies of Sex columns\n\ndata = pd.get_dummies(data,columns=['Sex'])\n\ndata.head()","f53ecde8":"# We can drop the id and cabin\n\ndata.drop(['PassengerId','Cabin'],axis=1,inplace = True)\n\ndata.head()","c6675250":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","c8624a15":"# our data\ndata.head()","5969245d":"data.shape","1601f865":"test = data[881:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","5224b205":"train = data[:881]","b91b74e2":"test.shape","26ab055a":"# Dependet feature\ny = train[['Survived']]\n\n# Independet features\nx = train.drop(['Survived'],axis = 1)","5a95bbdc":"# Now train tes split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.33,random_state = 42)","da1198d1":"\nprint(\"X_train\",len(x_train))\nprint(\"X_test\",len(x_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","7def19a7":"# parameters for cros validation\nrandom_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","15f2ae51":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(x_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","75830488":"# Visualisation\ncv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\");","45fc9d52":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(x_train, y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test))","5bc411bb":"test","4800122f":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\")\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic_data.csv\", index = False)","9b5fc845":"Males survived more in embarked = c with pclass 1 and 2.","c3a89c69":"<a id='27'><\/a>\n# Modeling","87b48922":"Child have high survived probability.  \nToo and old persons (80) have survived.  \nPersons age who not survived is more in (20-30).\nPersons age survived is more in (25-40)","8dce9d4c":"<a id='19'><\/a>\n# Features Engineering\n","0e75ff75":"<a id = '16'><\/a>\n## Embarked - Sex - Pclass - Survived","d924aca8":"<a id='7'><\/a>\n# Outlier Detection","923b9691":"<a id='31'><\/a>\n## Prediction","7560e4b5":"<a id='15'><\/a>\n## Pclass - Survived - Age","d4f740e3":"<a id='10'><\/a>\n## Correlation between SibSp - Parch - Age - Fare - Survived","ef736892":"<a id='9'><\/a>\n# Visualization","e72cb3eb":"<a id='5'><\/a>\n## Numerical Variable","5193af7d":"Familes with 1,2,3 persons have more chance to survived.  \nPersons without families(parch = 0) have little chanse then small families (1,2,3) to survived.  \nParch and SibSp have aproximately same effect to survived and can be used for new features with th = 3","1ad91dea":"Dtypes: <br>\n\n* <span style=\"color:deepskyblue\"> Float64(2):<\/span> Age, Fare <br>\n* <span style=\"color:deepskyblue\"> Int64(5): <\/span> PassengerId,Survived,Pclass,SibSp,Parch <br>\n* <span style=\"color:deepskyblue\"> object(5):<\/span> Name,Sex,Ticket,Cabin,Embarked <br>","5d24538b":"<a id='8'><\/a>\n# Missing Values\n\n* Find Missing Values\n* Fill Missing Values","d15a8696":"Males and females have the same age,havent one correlations!","b3355009":"<a id='17'><\/a>\n## Embarked - Sex - Fare - Survived","a12ecfe5":"Passengers who pay higher fare survived then others.","cee6db22":"<a id='29'><\/a>\n## Hyperparameter Tunning","950902c6":"<a id='14'><\/a>\n## Age - Survived","7201f5d0":"<a id='1'><\/a>\n# Load and check Data","df811ce6":"<a id='3'><\/a>\n# Variable Analyse\n\n* <span style=\"color:deepskyblue\">Categorical Variable: <\/span>Survived,Pclass,SibSp,Parch,Name,Sex,Ticket,Embarked\n* <span style=\"color:deepskyblue\">Numerical Variable: <\/span>PassengerId,Age,Fare\n","95db42ac":"Analyse the Survived situation with other parameters.<br>\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n* Fare - Survived\n","b6089848":"<a id = '11'><\/a>\n## SibSp - Survived","0eba21a1":"<a id='28'><\/a>\n## Train Test Split","b39c0d67":"<a id = '12' ><\/a>\n## Parch - Survived","ea5c7613":"<a id='26'><\/a>\n## Id and Cabin","7dbfb242":"<a id='18'><\/a>\n## Fill Missing: Age Value","c33dcf0f":"<a id='22'><\/a>\n## Embarked","75c95f85":"Pclass with 1 survibed more then others.","10cb2823":"# Introduction\n\nThe Titanic accident ist one of the fomous accident in history.The accident occured in 1912.And 1502 out of 2224 passengers and crew died.\n\n<font color='blue'>\nContent:\n\n1. [Load and check Data](#1)<br>\n2. [Variable Descripton](#2)<br>\n3. [Variable Analyse](#3)\n   * [Categorical Variable](#4)\n   * [Numerical Variable](#5)  \n\n4. [Basic data analyses](#6)<br>\n5. [Outlier Detection](#7)<br>\n6. [Missing Values](#8)<br>\n7. [Visualization](#9)  \n    \n    * [Correlation between SibSp - Parch - Age - Fare - Survived](#10)  \n    * [SibSp - Survived](#11)  \n    * [Parch - Survived](#12)  \n    * [Pclass - Survived](#13)  \n    * [Age - Survived](#14)  \n    * [Pclass - Survived - Age](#15)  \n    * [Embarked - Sex - Pclass - Survived](#16)  \n    * [Embarked - Sex - Fare - Survived](#17)  \n    * [Fill Missing: Age Value](#18)\n1. [Features Engineering](#19)\n    * [Name - Title](#20)\n    * [Family Size](#21)\n    * [Embarked](#22)\n    * [Ticket](#23)\n    * [Pclass](#24)\n    * [Sex](#25)\n    * [Id and Cabin](#26)\n1. [Modeling](#27)\n    * [Train Test Split](#28)\n    * [Hyperparameter Tunning](#29)\n    * [Ensemble Modeling](#30)\n    * [Prediction](#31)","75538d43":"<a id='23'><\/a>\n## Ticket","eb9fa518":"<a id='21'><\/a>\n## Family Size","f1eaf552":"<a id='20'><\/a>\n## Name - Title","04c65766":"<a id='24'><\/a>\n## Pclass","5fd9ef4c":"<a id='4'><\/a>\n## Categorical Variable","0a320e00":"Passengers with SibSp > 2 have little chance to survived. ","76ea2096":"<a id = '13'><\/a>\n## Pclass - Survived","7f0c6992":"Passengers age with SibSp = 0,1,2 is over than 20.","ed7866bf":"<a id='30'><\/a>\n## Ensemble Modeling","2f49cd86":"<a id='25'><\/a>\n## Sex","062e30ba":"<a id='6'><\/a>\n# Basic Data Analyse","d0285c61":"<a id = '2'><\/a>\n# Variable Description\n\n<span style=\"color:deepskyblue\">1.PassengerId: <\/span>Passenger Id of Persons<br>\n<span style=\"color:deepskyblue\">2.Survived: <\/span>Survive(1) or die(0)<br>\n<span style=\"color:deepskyblue\">3.Pclass: <\/span>Class of Tickets<br>\n<span style=\"color:deepskyblue\">4.Name: <\/span>Names of Passengers<br>\n<span style=\"color:deepskyblue\">5.Sex: <\/span>Gender of Passengers<br>\n<span style=\"color:deepskyblue\">6.Age: <\/span>Age of Passegers<br>\n<span style=\"color:deepskyblue\">7.SibSp: <\/span>Siblings or Spouses<br>\n<span style=\"color:deepskyblue\">8.Parch: <\/span>Parents of Passengers<br>\n<span style=\"color:deepskyblue\">9.Ticket: <\/span>Tickets<br>\n<span style=\"color:deepskyblue\">10.Fare: <\/span>Amount of money spent on tickets<br>\n<span style=\"color:deepskyblue\">11.Cabin: <\/span>Cabin category<br>\n<span style=\"color:deepskyblue\">12.Embarked:<\/span> Passengers embarked (S-Southtampton,C-Cherboorg,Q-Queenstown)<br>"}}