{"cell_type":{"72aa01db":"code","9db711ba":"code","c58ad7a1":"code","f1993f33":"code","584701ce":"code","88bfc2b4":"code","c70b2997":"code","3776fca1":"code","7e7020e3":"code","96dbd494":"code","14a55c79":"code","f3c7a996":"code","30e0bf73":"code","a7a7b67d":"code","0fa79700":"code","4444a603":"code","c5aa0803":"code","8dcf69f6":"code","a0573078":"code","217958b0":"code","e95d92ba":"code","30459deb":"code","ccb7ed74":"code","5083f3ed":"code","cdcc284e":"markdown","5e77f15b":"markdown","5124cdc2":"markdown","f6d8b669":"markdown","1f8dfa1e":"markdown","00b44237":"markdown","d2986330":"markdown","df5584b1":"markdown","853f1e24":"markdown","79da8c7a":"markdown","493f52e8":"markdown","78022204":"markdown","6c50b749":"markdown","e7f01aa5":"markdown","b4261e8d":"markdown","eb91f07a":"markdown"},"source":{"72aa01db":"# Let's have a look at the csv-files\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nprint(os.listdir(\"..\/input\/movielens-20m-dataset\"))","9db711ba":"rating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\nrating.shape","c58ad7a1":"# rating has around 20.000.000 ratings. This is huge.\n# Therefore we will use only 50% of the ratings to gain some calculating speed\nrating = rating[:10000000]\nrating.shape","f1993f33":"rating.head()","584701ce":"rating = rating[rating.columns.drop(\"timestamp\")]","88bfc2b4":"rating.describe()","c70b2997":"rating.info()","3776fca1":"plt.figure(figsize=(8,6))\nsns.heatmap(rating.isnull())\nplt.title(\"Missing values?\", fontsize = 15)\nplt.show()","7e7020e3":"movie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')","96dbd494":"movie.head(5)","14a55c79":"movie.describe()","f3c7a996":"movie.info()","30e0bf73":"movie.head()","a7a7b67d":"# Merge both DataFrame to have also the titles of the movies\ndf = pd.merge(movie,rating)\n\n# Keep only the columns title, userId and rating\ndf = df[['title','userId','rating']]","0fa79700":"# Show the result\ndf.head()","4444a603":"# Group the titles by number of ratings to see which movies where rated the most\ncount_rating = df.groupby(\"title\")['rating'].count().sort_values(ascending=False)\ncount_rating.head(10)","c5aa0803":"# Select the movies with at least 500 ratings\nr = 500\nmore_than_200_ratings = count_rating[count_rating.apply(lambda x: x >= r)].index\n\n# Keep only the movies with at least 500 ratings in the DataFrame\ndf_r = df[df['title'].apply(lambda x: x in more_than_200_ratings)]","8dcf69f6":"# Display the count of ratings the each movie\n# Having only the movies with at least 500 ratings\ndf_r.groupby(\"title\")['rating'].count().sort_values(ascending=False)","a0573078":"before = len(df.title.unique())\nafter = len(df_r.title.unique())\nrows_before = df.shape[0]\nrows_after = df_r.shape[0]\nprint(f'''There are {before} movies in the dataset before filtering and {after} movies after the filtering.\n\n{before} movies => {after} movies\n{rows_before} rows before filtering => {rows_after} rows after filtering''')","217958b0":"# Create a matrix with userId as rows and the titles of the movies as column.\n# Each cell will have the rating given by the user to the movie.\n# There will be a lot of NaN values, because each user hasn't watched most of the movies\nmovies = df_r.pivot_table(index='userId',columns='title',values='rating')\nmovies.iloc[:5,:5]","e95d92ba":"# Let's choose a famous movie\nmovie = 'Jurassic Park (1993)'\n\n# Display the first ratings of the users for this movies\nmovies[movie].head(5)","30459deb":"def find_corr(df_movies, movie_name):\n    '''\n    Get the correlation of one movie with the others\n    \n    Args\n        df_movies (DataFrame):  with user_id as rows and movie titles as column and ratings as values\n        movie_name (str): Name of the movie\n    \n    Return\n        DataFrame with the correlation of the movie with all others\n    '''\n    \n    similar_to_movie = df_movies.corrwith(movies[movie_name])\n    similar_to_movie = pd.DataFrame(similar_to_movie,columns=['Correlation'])\n    similar_to_movie = similar_to_movie.sort_values(by = 'Correlation', ascending = False)\n    return similar_to_movie","ccb7ed74":"# Let's try with the first movie\nmovie_name = 'Jurassic Park (1993)'\nfind_corr(movies, movie_name)","5083f3ed":"# Let's try with the first movie\nmovie_name = 'Terminator 2: Judgment Day (1991)'\nfind_corr(movies, movie_name)","cdcc284e":"<img src=\"https:\/\/i.imgur.com\/079rlY5.png\" style=\"width: 100%; height: 70%\" align = \"left\">\n  ","5e77f15b":"# 1. Exploratory data analysis<a class=\"anchor\" id=\"1\"><\/a>\n\nBefore we start with the recommender system, let's have a closer look at the datasets.","5124cdc2":"In the notebook we will build a movie collaborative recommendation system. First of all let's have a look at the dataset. \n\nThe datasets contain ratings and free-text tagging activities from MovieLens, a movie recommendation service. Its composition in numbers:\n* 20.000.000 ratings\n* 460.000 tags\n* 27.000 movies\n\n<h2> Content:<\/h2>\n\n**rating.csv that contains ratings of movies by users:**\n* userId\n* movieId\n* rating\n* timestamp\n\n**movie.csv that contains movie information:**\n* movieId\n* title\n* genres\n\n\n\n","f6d8b669":"# 3. Recommendations <a class=\"anchor\" id=\"3\"><\/a>\n\nLet's try the recommendation system on two movies","1f8dfa1e":"We can see that people who watched Jurassic Park are most likely to like also the sequels of that movie because the correlation is highler. On the bottom are the movies which are not likely to be liked by the users.","00b44237":"# Table of contents\n\n[<h3>1. Exploratory data analysis<\/h3>](#1)\n\n[<h3>2. Collaborative Recommendation System<\/h3>](#2)\n\n[<h3>3. Recommendations<\/h3>](#3)","d2986330":"## 3.1. [Jurassic Park](https:\/\/en.wikipedia.org\/wiki\/Jurassic_Park_(film))\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/en\/e\/e7\/Jurassic_Park_poster.jpg\" style=\"width: 20%; height: 20%\" align = \"left\">\n","df5584b1":"# 2. Collaborative Recommendation System<a class=\"anchor\" id=\"2\"><\/a>","853f1e24":"This recommendation system using correlation is simple and nonetheless effective as a basic recommendation system. It works well to recommend movies for someone who likes one specific movie.","79da8c7a":"## 3.2. [Terminator 2](https:\/\/en.wikipedia.org\/wiki\/Terminator_2:_Judgment_Day)","493f52e8":"movie.csv seems to be clean","78022204":"It seems that people who watched Terminator 2 mostly like action movies","6c50b749":"# Simple Movie Collaborative Recommendation System","e7f01aa5":"The dataset is clean and has no missing value.\n\nRating only has the ID of movies and we would like to see also the titles of the movies, therefore we will later get the titles out of the file movie.csv.\n\n**movie.csv:**","b4261e8d":"<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/en\/8\/85\/Terminator2poster.jpg\" style=\"width: 20%; height: 20%\" align = \"left\">\n","eb91f07a":"In this case, we don't need the timestamp, therefore we can delete it."}}