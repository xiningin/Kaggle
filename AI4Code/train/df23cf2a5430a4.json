{"cell_type":{"aa02ee12":"code","64712052":"code","f3deda25":"code","9b195d6f":"code","d7716c55":"code","73fb8940":"code","9d619a2d":"code","20a7ab57":"code","5cbd7864":"code","76046d18":"code","0ea5abef":"code","75a58541":"code","eeb484f0":"code","583bc265":"code","943d6a5a":"code","10b43b89":"code","2c027881":"code","d2accf5d":"code","2ca594b8":"code","7109c0db":"code","92225c7a":"code","018f7901":"code","376451aa":"code","e3b73c11":"code","7e0f6577":"code","1469380f":"code","9d979b02":"code","085a291f":"code","a0f726f6":"code","d866ed42":"code","ad83644f":"code","aa2ed5fa":"code","f029a6d3":"code","30ab84ef":"code","17823c6f":"code","d2bb8a2a":"code","390b8380":"code","281f6154":"code","09cf3814":"code","5e370e07":"code","d3762830":"code","4940bd2d":"code","4c57680b":"code","2baa2fe1":"code","7ffe6937":"code","0193cb78":"code","948912cb":"code","8f5d17b2":"markdown","e21514e3":"markdown","f1dc9660":"markdown","45b99552":"markdown","4e366975":"markdown","96ea6798":"markdown","7e681f13":"markdown","fbd61bf1":"markdown","50b72500":"markdown","ae7dcc51":"markdown","755ecef2":"markdown","bbe46cc7":"markdown","32b97f48":"markdown","8b5d88bc":"markdown","71925b78":"markdown","f9b71218":"markdown","9f655b09":"markdown"},"source":{"aa02ee12":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom xgboost.sklearn import XGBRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\n\nimport warnings\nwarnings.filterwarnings('ignore')","64712052":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f3deda25":"train_data=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","9b195d6f":"pd.set_option('display.max_columns', None)","d7716c55":"train_data.head()","73fb8940":"train_data.shape,test_data.shape","9d619a2d":"for col in train_data.columns:\n  na= train_data[col].isnull().sum()\n  if na: print(col,na)","20a7ab57":"for col in test_data.columns:\n  na= test_data[col].isnull().sum()\n  if na: print(col,na)","5cbd7864":"non_na_cols=['Alley','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','FireplaceQu','GarageType','GarageFinish',\n             'GarageQual','GarageCond','PoolQC','Fence','MiscFeature']","76046d18":"for col in non_na_cols:\n  train_data[col]=train_data[col].fillna('Absent')\n  test_data[col]=test_data[col].fillna('Absent')","0ea5abef":"test_zeros=['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath','GarageCars','GarageYrBlt','MasVnrArea','GarageArea']\nfor col in test_zeros:\n  test_data[col]=test_data[col].fillna(0)","75a58541":"train_data['GarageYrBlt']=train_data['GarageYrBlt'].fillna(0)\ntrain_data['MasVnrArea']=train_data['MasVnrArea'].fillna(0)","eeb484f0":"correct_year=test_data[test_data['GarageYrBlt']==2207.0]['YearBuilt'].values[0]\ntest_data.loc[test_data['GarageYrBlt']==2207.0,'GarageYrBlt']=correct_year","583bc265":"categorical_cols=train_data.select_dtypes(object).columns\nfor col in categorical_cols:\n  train_data[col]=train_data[col].fillna(train_data[col].mode()[0])\n  test_data[col]=test_data[col].fillna(test_data[col].mode()[0])","943d6a5a":"LotFrontage_train=train_data[train_data['LotFrontage'].notnull()].reset_index(drop=True)\nLotFrontage_train2=test_data[test_data['LotFrontage'].notnull()].reset_index(drop=True)","10b43b89":"LotFrontage_train=LotFrontage_train.append(LotFrontage_train2).reset_index(drop=True)","2c027881":"LotFrontage_train.shape","d2accf5d":"Lot_X=LotFrontage_train.drop(columns=['LotFrontage','SalePrice'])\nLot_y=LotFrontage_train['LotFrontage']","2ca594b8":"LotFrontage_features=(Lot_X.corrwith(Lot_y)).abs().sort_values(ascending=False)\nmodel_features=LotFrontage_features[LotFrontage_features > 0.25].index","7109c0db":"model_features","92225c7a":"Lot_X=LotFrontage_train[model_features]\n\nX_train,X_test,y_train,y_test=train_test_split(Lot_X,Lot_y,test_size=0.2,random_state=2)","018f7901":"#GridSearch was carried out to get these parameters(didn't include the code because it takes too long to run)\nparam={'max_depth': 10, 'max_features': 4, 'n_estimators': 90, 'warm_start': True}\n\nrf_lot=RandomForestRegressor(**param,random_state=21)\nrf_lot=rf_lot.fit(X_train,y_train)","376451aa":"y_pred=rf_lot.predict(X_test)\nr2_score(y_test,y_pred)","e3b73c11":"#Getting the observation where Lotfrontage is null to predict those values\ntrain_LotFrontage=train_data[train_data['LotFrontage'].isnull()].reset_index(drop=True)\ntest_LotFrontage=test_data[test_data['LotFrontage'].isnull()].reset_index(drop=True)","7e0f6577":"#dropping null rows for Lotfrontage\ntrain_data=train_data.dropna(subset=['LotFrontage']).reset_index(drop=True)\ntest_data=test_data.dropna(subset=['LotFrontage']).reset_index(drop=True)","1469380f":"#Prediction rows\npredict_train_data=train_LotFrontage[model_features]\npredict_test_data=test_LotFrontage[model_features]","9d979b02":"#Predicting using our trained model\npredicted_train_LotFrontage=rf_lot.predict(predict_train_data)\npredicted_test_LotFrontage=rf_lot.predict(predict_test_data)","085a291f":"#Assigning values\ntrain_LotFrontage['LotFrontage']=predicted_train_LotFrontage\ntest_LotFrontage['LotFrontage']=predicted_test_LotFrontage","a0f726f6":"#Predicted Lotfrontage\ntest_LotFrontage.head()","d866ed42":"#Adding those observtions back to the train set and test set\ntrain_data=train_data.append(train_LotFrontage).reset_index(drop=True).sort_values(by='Id').reset_index(drop=True)\n\ntest_data=test_data.append(test_LotFrontage).reset_index(drop=True).sort_values(by='Id').reset_index(drop=True)","ad83644f":"train_data.shape,test_data.shape","aa2ed5fa":"combined_data=train_data.append(test_data).reset_index(drop=True)","f029a6d3":"combined_data=pd.get_dummies(combined_data,drop_first=True)","30ab84ef":"train_data=combined_data.iloc[:train_data.shape[0],:]","17823c6f":"test_data=combined_data.iloc[test_data.shape[0]+1:,:].drop(columns='SalePrice')","d2bb8a2a":"train_data.shape,test_data.shape","390b8380":"del combined_data","281f6154":"X=train_data.drop(columns='SalePrice')\nY=train_data['SalePrice']\n\nx_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,random_state=2)","09cf3814":"#GridSearch\nparam_grid={'n_estimators':[70,80,90,100,120,130,140,150],\n            'max_depth':[8,9,10,11,12,13],\n            'warm_start':[True,False]}\n\ngrid=GridSearchCV(RandomForestRegressor(),param_grid=param_grid,scoring='neg_mean_squared_error',n_jobs=-1,)\ngrid=grid.fit(x_train,y_train)","5e370e07":"grid.best_params_","d3762830":"y_pred=grid.predict(x_test)\nr2_score(y_test,y_pred)","4940bd2d":"#GridSearch was carried out to get these parameters(didn't include the code because it takes too long to run)\nxgb=XGBRegressor(max_depth= 7, min_child_weight= 3, n_estimators= 100,subsample=0.8, colsample_bytree=0.8, nthread=4, seed=27)\nxgb=xgb.fit(x_train,y_train)","4c57680b":"y_pred=xgb.predict(x_test)\nr2_score(y_test,y_pred)","2baa2fe1":"plt.figure(figsize=(10,8))\nax1=sns.distplot(y_test,hist=False,label=\"Actual\")\nax1=sns.distplot(y_pred,hist=False,label=\"Predicted\")\nplt.legend();","7ffe6937":"#RandomForest model\nbest_model=XGBRegressor(max_depth= 7, min_child_weight= 3, n_estimators= 100,subsample=0.8, colsample_bytree=0.8, nthread=4, seed=27)\n\nbest_model=best_model.fit(X,Y)\n\nprediction=best_model.predict(test_data)","0193cb78":"plt.figure(figsize=(10,8))\nax1=sns.distplot(prediction,hist=False,label=\"Predicted\",color='b')\nplt.legend();","948912cb":"#Prediction\nsubmission=pd.DataFrame({'Id':test_data['Id'],'SalePrice':prediction})\n\nsubmission.to_csv('submission.csv',index=False)","8f5d17b2":"## 2. XGBoost","e21514e3":"Combining the data for One Hot Encoding","f1dc9660":"## Modeling for SalePrice Prediction","45b99552":"These columns are related to the columns where NaNs are data itself, so we i will replace NaNs with 0","4e366975":"Correcting mistyped year for GarageYrBlt","96ea6798":"## Load Data\n","7e681f13":"# Training with the best model","fbd61bf1":"We will take the obseravtion from train and test set then train a model and predict Lotfrontage for those missing observation in train ad test set.","50b72500":"## Submission","ae7dcc51":"Now, the remaining categorical columns where NaNs means missing data, we will fill it with the most frequent value","755ecef2":"RandomForest has slighly better accuracy","bbe46cc7":"The columns where NaNs are data itself, we will fill those NaNs with 'Absent' .","32b97f48":"For both trainset and testset, Lotfrontage has lots of NaNs values, we can fill it with the mean, but here we will predict the Lotfrontage for those observations.","8b5d88bc":"Splitting data back to train and test sets","71925b78":"## Looking for null values","f9b71218":"## 1. RandomForest","9f655b09":" Looking at the description of the data, we can understand that not all NAs means missing data, For some columns NA has a meaning, example: In the Fence Column NA stands for No Fence and in Alley Column NA stands for No Alley"}}