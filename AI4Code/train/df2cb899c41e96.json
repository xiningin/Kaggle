{"cell_type":{"7f17d9f8":"code","1b1140d8":"code","286bd618":"code","e2584389":"code","c146c669":"code","bc90dfc8":"code","b6f7bdda":"code","508d4fe4":"code","98856c50":"code","6442703d":"code","2a1a338a":"code","625eb954":"code","b66ba051":"markdown","754a29ce":"markdown","49e235d4":"markdown","6eba4374":"markdown","429e3166":"markdown","d8b747e1":"markdown","8143dfcb":"markdown"},"source":{"7f17d9f8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","1b1140d8":"train_raw = pd.read_csv(\"..\/input\/dataset\/x_train_gr_smpl.csv\")\nlabels = pd.read_csv(\"..\/input\/dataset\/y_train_smpl.csv\")","286bd618":"label_paths = [\n    \"..\/input\/dataset\/y_train_smpl_0.csv\",\n    \"..\/input\/dataset\/y_train_smpl_1.csv\",\n    \"..\/input\/dataset\/y_train_smpl_2.csv\",\n    \"..\/input\/dataset\/y_train_smpl_3.csv\",\n    \"..\/input\/dataset\/y_train_smpl_4.csv\",\n    \"..\/input\/dataset\/y_train_smpl_5.csv\",\n    \"..\/input\/dataset\/y_train_smpl_6.csv\",\n    \"..\/input\/dataset\/y_train_smpl_7.csv\",\n    \"..\/input\/dataset\/y_train_smpl_8.csv\",\n    \"..\/input\/dataset\/y_train_smpl_9.csv\",\n]","e2584389":"from sklearn.tree import DecisionTreeClassifier \nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score, confusion_matrix, f1_score\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.metrics import make_scorer","c146c669":"def fp(y_true, y_pred): return confusion_matrix(y_true, y_pred)[0, 1]\ndef tp(y_true, y_pred): return confusion_matrix(y_true, y_pred)[1, 1]\n\nscoring = {'accuracy': make_scorer(accuracy_score), 'precision': make_scorer(precision_score),'roc_auc': make_scorer(roc_auc_score), \n           'recall': make_scorer(recall_score),'f1_score' : make_scorer(f1_score), 'tp': make_scorer(tp),'fp': make_scorer(fp)}","bc90dfc8":"def C45(paths, max_depth):\n    for i, path in enumerate(paths):\n        label = pd.read_csv(path)\n        print(\"\\ny_train_smpl {}\".format(i))\n        for depth in max_depth:\n            print(\"\\n max_depth {}\".format(depth))\n            clf = DecisionTreeClassifier(max_depth = depth)\n            scores = cross_validate(clf, train_raw, label, cv=10,scoring = scoring,return_train_score=True)\n            print(\"Accuracy train :\", (sum(scores['train_accuracy'])\/len(scores['train_accuracy'])))\n            print(\"Accuracy test :\", (sum(scores['test_accuracy'])\/len(scores['test_accuracy'])))\n            print(\"Train Precision :\", (sum(scores['train_precision'])\/len(scores['train_precision'])))\n            print(\"Test Precision :\", (sum(scores['test_precision'])\/len(scores['test_precision'])))\n            print(\"Test Recall :\", (sum(scores['test_recall'])\/len(scores['test_recall'])))\n            print(\"Test f1_score :\", (sum(scores['test_f1_score'])\/len(scores['test_f1_score'])))\n            print(\"Test roc_auc :\", (sum(scores['test_roc_auc'])\/len(scores['test_roc_auc'])))\n            print(\"TP :\", scores['test_tp'])\n            print(\"FP :\", scores['test_fp'])\n                                    \n                                    \nC45(label_paths, [3, 5, 10, 20, 50, 100])","b6f7bdda":"test_raw = pd.read_csv(\"..\/input\/testfile\/x_test_gr_smpl.csv\")\nlabels_test = pd.read_csv(\"..\/input\/testfile\/y_test_smpl.csv\")\n\ntest = pd.read_csv(\"..\/input\/testfile\/x_test_gr_smpl.csv\")\ntest['label'] = labels_test","508d4fe4":"label_paths_test = [\n    \"..\/input\/testfile\/y_test_smpl_0.csv\",\n    \"..\/input\/testfile\/y_test_smpl_1.csv\",\n    \"..\/input\/testfile\/y_test_smpl_2.csv\",\n    \"..\/input\/testfile\/y_test_smpl_3.csv\",\n    \"..\/input\/testfile\/y_test_smpl_4.csv\",\n    \"..\/input\/testfile\/y_test_smpl_5.csv\",\n    \"..\/input\/testfile\/y_test_smpl_6.csv\",\n    \"..\/input\/testfile\/y_test_smpl_7.csv\",\n    \"..\/input\/testfile\/y_test_smpl_8.csv\",\n    \"..\/input\/testfile\/y_test_smpl_9.csv\",\n]","98856c50":"def C45_split(paths, max_depth):\n    for i, path in enumerate(paths):\n        label = pd.read_csv(path)\n        print(\"\\ny_train_smpl {}\".format(i))\n        for depth in max_depth:\n            print(\"\\n max_depth {}\".format(depth))\n            clf = DecisionTreeClassifier(max_depth = depth)\n            clf = clf.fit(train_raw, label)\n            y_pred = clf.predict(test_raw)\n            y_pred1 = clf.predict(train_raw)\n            y_test = pd.read_csv(label_paths_test[i])\n            tn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel()\n            print(\"Accuracy Train = \", accuracy_score(label, y_pred1))\n            print(\"Precision Train = \", precision_score(label, y_pred1))\n            print(\"Accuracy Test = \", accuracy_score(y_test, y_pred))\n            print(\"Precision Test = \", precision_score(y_test, y_pred))\n            print(\"Recall = \", recall_score(y_test, y_pred))\n            print(\"ROC_AUC_Score = \", roc_auc_score(y_test, y_pred))\n            print(\"f_score = \", f1_score(y_test, y_pred))\n            print(\"TP Rate = \", tp)\n            print(\"FP Rate = \", fp)\n            \n\nC45_split(label_paths, [3, 5, 10, 20, 50, 100])","6442703d":"from sklearn.model_selection import train_test_split","2a1a338a":"def C45_4000(paths, max_depth):\n    for i, path in enumerate(paths):\n        label = pd.read_csv(path)\n        X_train, X_test, y_train, y_test = train_test_split(train_raw, label, test_size=0.35, random_state=42)\n        print(\"\\ny_train_smpl {}\".format(i))\n        for depth in max_depth:\n            print(\"\\n max_depth {}\".format(depth))\n            clf = DecisionTreeClassifier(max_depth = depth)\n            clf = clf.fit(X_train, y_train)\n            y_pred = clf.predict(X_test)\n            tn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel()\n            print(\"Accuracy = \", accuracy_score(y_test, y_pred))\n            print(\"Precision = \", precision_score(y_test, y_pred))\n            print(\"Recall = \", recall_score(y_test, y_pred))\n            print(\"ROC_AUC_Score = \", roc_auc_score(y_test, y_pred))\n            print(\"f_score = \", f1_score(y_test, y_pred))\n            print(\"TP Rate = \", tp)\n            print(\"FP Rate = \", fp)\n            \n\nC45_4000(label_paths, [3, 5, 10, 20, 30 ,50])","625eb954":"def C45_9000(paths, max_depth):\n    for i, path in enumerate(paths):\n        label = pd.read_csv(path)\n        X1_train, X1_test, y1_train, y1_test = train_test_split(train_raw, label, test_size=0.77, random_state=42)\n        print(\"\\ny_train_smpl {}\".format(i))\n        for depth in max_depth:\n            print(\"\\n max_depth {}\".format(depth))\n            clf = DecisionTreeClassifier(max_depth = depth)\n            clf = clf.fit(X1_train, y1_train)\n            y_pred = clf.predict(X1_test)\n            tn, fp, fn, tp = confusion_matrix(y1_test, y_pred).ravel()\n            print(\"Accuracy = \", accuracy_score(y1_test, y_pred))\n            print(\"Precision = \", precision_score(y1_test, y_pred))\n            print(\"Recall = \", recall_score(y1_test, y_pred))\n            print(\"ROC_AUC_Score = \", roc_auc_score(y1_test, y_pred))\n            print(\"f_score = \", f1_score(y1_test, y_pred))\n            print(\"TP Rate = \", tp)\n            print(\"FP Rate = \", fp)\n            \nC45_9000(label_paths, [3, 5, 10, 20, 30 ,50])","b66ba051":"1.  Train Model using Cross Validation","754a29ce":"\n**Train the model using a larger Test size**\n","49e235d4":"*    Have a test size of 9000 ~ test size of aprox 0.77","6eba4374":"2. Train model using Train and Test splits","429e3166":"Add different Metrics","d8b747e1":"*    Have a test size of 4000 ~ test size of aprox 0.35","8143dfcb":"Build the tree for different max_depth"}}