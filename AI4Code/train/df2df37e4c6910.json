{"cell_type":{"7d256d36":"code","d31ca04d":"code","09d9da09":"code","3146df24":"code","83379b37":"code","602035c6":"code","150d115a":"code","a2225c2d":"code","7239bce1":"code","df0f0c0f":"code","d9191bd8":"code","647f902d":"code","f8dd6557":"code","d6776931":"code","9d5cf030":"code","6d6d7566":"code","ea002577":"code","85d5ed98":"code","57317b3c":"code","a6d592c2":"code","3ee5e71e":"code","68c8c7ae":"code","90888050":"code","69b40327":"code","32de5cd4":"code","c20a254e":"code","e20056a2":"code","17cd3fd8":"code","5d76debe":"code","941e2139":"code","6aa82def":"code","17e6fc84":"code","f0a9386b":"code","a493e6a6":"code","121c190a":"code","ad1cfb4e":"code","6a77e598":"code","98c28112":"code","ec7a4256":"code","17b63622":"code","1cdd00b1":"code","56703215":"code","15189354":"code","6e9d836f":"code","10ef4586":"code","c246fed8":"code","a9a623cf":"code","2150bcf5":"code","1a4ea50b":"code","bb9b6b15":"code","e3e59e7a":"code","139a201b":"code","a1de92ce":"code","f267a444":"code","f06f92c7":"code","7ff52b1e":"code","cdc06048":"code","45acfd61":"code","00f19375":"code","d954c106":"code","82fbdfe3":"code","ec2d16fa":"markdown","159c27dd":"markdown","379c5990":"markdown","338b13e6":"markdown","5c08e7c6":"markdown","482f2805":"markdown","ef12c4c3":"markdown"},"source":{"7d256d36":"import pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.metrics import accuracy_score, classification_report, roc_auc_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nimport numpy as np","d31ca04d":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')\nsubmission_data = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","09d9da09":"train_data.head()","3146df24":"submission_data.head()","83379b37":"test_data.head()","602035c6":"train_data.shape","150d115a":"test_data.shape","a2225c2d":"train_data.isna().sum()","7239bce1":"test_data.isna().sum()","df0f0c0f":"sns.countplot(x='Survived', data=train_data)","d9191bd8":"plt.figure(figsize=(10,10))\nsns.heatmap(train_data.drop('PassengerId',axis = 1).corr(),annot=True)","647f902d":"train_data.columns","f8dd6557":"categorical = ['Pclass','Sex','SibSp','Parch','Embarked']\nnumerical = ['Age']","d6776931":"sns.catplot(x=\"Sex\", hue=\"Survived\", kind=\"count\", data=train_data)\nsns.catplot(x=\"SibSp\", hue=\"Survived\", kind=\"count\", data=train_data)\nsns.catplot(x=\"Pclass\", hue=\"Survived\", kind=\"count\", data=train_data)\nsns.catplot(x=\"Parch\", hue=\"Survived\", kind=\"count\", data=train_data)\nsns.catplot(x=\"Embarked\", hue=\"Survived\", kind=\"count\", data=train_data)","9d5cf030":"sns.histplot(x= 'Age', data = train_data, hue = 'Survived', kde = True)","6d6d7566":"train_data_copy = train_data.copy()\ntest_data_copy = test_data.copy()","ea002577":"df_train = train_data_copy.drop(\"PassengerId\" , axis = 1)","85d5ed98":"df_test = test_data_copy.drop(\"PassengerId\" , axis = 1)","57317b3c":"#fill Embarked 2 missing values with most frequent value\ndf_train[\"Embarked\"] = df_train[\"Embarked\"].fillna(\"S\")","a6d592c2":"#Replace missing age values from median value\ndf_train[\"Age\"] = df_train[\"Age\"].fillna(df_train[\"Age\"].median())\ndf_test[\"Age\"] = df_test[\"Age\"].fillna(df_test[\"Age\"].median())","3ee5e71e":"#Replace the 'Fare' missing values in test data set from median \ndf_test[\"Fare\"] = df_test[\"Fare\"].fillna(df_test[\"Fare\"].median())","68c8c7ae":"df_train[\"Parch\"] = df_train[\"Parch\"].apply(lambda x: 4 if x>=4 else x)\ndf_train[\"SibSp\"] = df_train[\"SibSp\"].apply(lambda x: 5 if x>=5 else x)\ndf_train[\"Fare\"] = df_train[\"Fare\"].apply(lambda x: 0 if np.log(x)<0 else np.log(x))","90888050":"df_test[\"Parch\"] = df_test[\"Parch\"].apply(lambda x: 4 if x>=4 else x)\ndf_test[\"SibSp\"] = df_test[\"SibSp\"].apply(lambda x: 5 if x>=5 else x)\ndf_test[\"Fare\"] = df_test[\"Fare\"].apply(lambda x: 0 if np.log(x)<0 else np.log(x))","69b40327":"#scaler values for Age and Fare attributes\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nscaler = StandardScaler()\nminmax_scaler = MinMaxScaler()\ndf_train[\"Age\"] = scaler.fit_transform(np.array(df_train[\"Age\"]).reshape(-1, 1))\ndf_train[\"Fare\"] = minmax_scaler.fit_transform(np.array(np.round(df_train[\"Fare\"],2)).reshape(-1, 1))","32de5cd4":"df_test[\"Age\"] = scaler.transform(np.array(df_test[\"Age\"]).reshape(-1, 1))\ndf_test[\"Fare\"] = minmax_scaler.transform(np.array(np.round(df_test[\"Fare\"],2)).reshape(-1, 1))","c20a254e":"#Replace Sex String values with binary values\ndf_train[\"Sex\"] = df_train[\"Sex\"].apply(lambda x: 1 if x==\"female\" else 0)","e20056a2":"df_test[\"Sex\"] = df_test[\"Sex\"].apply(lambda x: 1 if x==\"female\" else 0)","17cd3fd8":"df_train = pd.get_dummies(df_train, columns=[\"Embarked\"], drop_first=False, prefix=[\"Embarked\"])\ndf_test = pd.get_dummies(df_test, columns=[\"Embarked\"], drop_first=False, prefix=[\"Embarked\"])\n","5d76debe":"df_train.head()","941e2139":"df_test.head()","6aa82def":"men_status = df_train['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\nmen_status","17e6fc84":"men_status.unique()","f0a9386b":"df_train[\"Men_Status\"] = men_status","a493e6a6":"df_test[\"Men_Status\"] = df_test['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","121c190a":"#sns.set(rc={\"figure.figsize\":(1,1)})\nsns.catplot(x=\"Men_Status\", hue=\"Survived\", kind=\"count\", data=df_train,height=8,aspect=2)","ad1cfb4e":"#uncommon\ndf_train['Men_Status'] = df_train['Men_Status'].replace(['Don','Rev','Dr','Mme','Ms','Major','Lady','Sir','Mlle','Col','Capt','Countess','Jonkheer'], 'UnCommon')","6a77e598":"sns.catplot(x=\"Men_Status\", hue=\"Survived\", kind=\"count\", data=df_train)","98c28112":"#uncommon\ndf_test['Men_Status'] = df_test['Men_Status'].replace(['Don','Dona','Rev','Dr','Mme','Ms','Major','Lady','Sir','Mlle','Col','Capt','Countess','Jonkheer'], 'UnCommon')","ec7a4256":"sns.catplot(x=\"Men_Status\", kind=\"count\", data=df_test)","17b63622":"df_train.head()","1cdd00b1":"from sklearn.feature_selection import mutual_info_regression\nX = df_train[['Sex','Age','SibSp','Parch','Ticket','Fare','Embarked_C','Embarked_C','Embarked_C','Men_Status']]\n#X = data_clean_and_normalize(X)\ny = df_train['Survived']\n\ndef make_mi_scores(X, y):\n    X = X.copy()\n    for colname in X.select_dtypes([\"object\", \"category\"]):\n        X[colname], _ = X[colname].factorize()\n    # All discrete features should now have integer dtypes\n    discrete_features = [pd.api.types.is_integer_dtype(t) for t in X.dtypes]\n    mi_scores = mutual_info_regression(X, y, discrete_features=discrete_features, random_state=0)\n    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n    mi_scores = mi_scores.sort_values(ascending=False)\n    return mi_scores","56703215":"mi_scores = make_mi_scores(X, y)","15189354":"import numpy as np\ndef plot_mi_scores(scores):\n    scores = scores.sort_values(ascending=True)\n    width = np.arange(len(scores))\n    ticks = list(scores.index)\n    plt.barh(width, scores)\n    plt.yticks(width, ticks)\n    plt.title(\"Mutual Information Scores\")\n\n\nplt.figure(dpi=100, figsize=(8, 5))\nplot_mi_scores(mi_scores)","6e9d836f":"df_train_copy = df_train.copy()\ndf_test_copy = df_test.copy()","10ef4586":"df_train_copy.head()","c246fed8":"#Drop the identity values\ndf_train_copy = df_train_copy.drop(['Name','Ticket'],axis = 1)\ndf_test_copy = df_test_copy.drop(['Name','Ticket'],axis = 1)\n","a9a623cf":"#Drop the Cabin Attribute because it has more null values\ndf_train_copy = df_train_copy.drop('Cabin',axis = 1)\ndf_test_copy = df_test_copy.drop('Cabin',axis = 1)","2150bcf5":"#Integer Encoding for Men_Status\ncleanup_nums = {\"Men_Status\": {\"Mr\": 1, \"Mrs\": 2, \"Miss\": 3, \"Master\": 4,\"UnCommon\": 5 }}","1a4ea50b":"df_train_copy = df_train_copy.replace(cleanup_nums)\n","bb9b6b15":"df_test_copy = df_test_copy.replace(cleanup_nums)","e3e59e7a":"df_train_copy.head()","139a201b":"df_test_copy.head()","a1de92ce":"y_train = df_train_copy.pop('Survived')\nX_train = df_train_copy\n\nX_test = df_test_copy","f267a444":"rf = RandomForestClassifier()","f06f92c7":"params_grid_rf = {\n    'n_estimators': [30, 50, 70, 100,150,200],\n   'max_depth': [5,6,7,8,10],\n    \"min_samples_leaf\": [20, 30]\n}","7ff52b1e":"clf_rf = GridSearchCV(rf, param_grid=params_grid_rf, scoring='accuracy', cv=4, verbose=1)\n\nclf_rf.fit(X_train, y_train)","cdc06048":"print(clf_rf.best_estimator_)\nprint(clf_rf.best_score_ )\nprint(clf_rf.best_params_)","45acfd61":"y_train_rf = clf_rf.predict(X_train)\ny_test_rf = clf_rf.predict(X_test)\nprint(accuracy_score(y_train, y_train_rf))","00f19375":"df_2 = pd.DataFrame({'PassengerId': test_data['PassengerId'],\n                   'Survived':y_test_rf})","d954c106":"df_2.to_csv('submission.csv',index = False)","82fbdfe3":"compression_opts = dict(method='zip',\n                        archive_name='out10.csv')  \ndf_2.to_csv('out10.zip', index=False,\n          compression=compression_opts)\nprint(\"Successful!!!!!!!!!\")","ec2d16fa":"<h3>Model Develpment<h3>","159c27dd":"<h1>Feature Engineering and Data Preprocessing<h1>","379c5990":"<h1>Check Missing values<h1>","338b13e6":"<h2>imprt data <h2>","5c08e7c6":"<h2>import libraries<h2>","482f2805":"<h1>","ef12c4c3":"<h1>Data Visualization<h1>"}}