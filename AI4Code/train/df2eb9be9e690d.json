{"cell_type":{"3c9e9615":"code","e8da9065":"code","72c8e994":"code","9bde5b8e":"code","c6b2959f":"code","98c767b0":"code","a09e3c41":"code","6b754cc0":"code","a9e8858b":"code","2e5e018c":"code","7f116966":"code","bb38942d":"code","3c1e0368":"code","ae9b29ac":"code","62ffebb1":"code","d25f12f1":"code","ddc661d4":"code","07ff11d8":"code","69e2e1ae":"code","59f3e33c":"code","7d6de0af":"code","6e79e351":"code","02222045":"code","a4cb7e2a":"code","3fb6fe21":"code","f3356133":"code","056b57fa":"code","579aafe8":"code","e01381bd":"code","229d1eeb":"code","29232c86":"code","92b3d3c2":"code","8dec3316":"code","20872222":"code","caf8ec59":"code","93d2173c":"code","78c1dd68":"code","6411fde5":"code","7a13d198":"code","48e30c6a":"code","aff61c59":"markdown","c97e5a42":"markdown","75d60182":"markdown","66f84736":"markdown","3cac0be3":"markdown","eca021e0":"markdown","bddae9b5":"markdown","f7779eaa":"markdown","94212c6a":"markdown","2ad9ed4b":"markdown","65b240f4":"markdown","daa3bd83":"markdown","6967f40d":"markdown","c9b7bd50":"markdown","5d194463":"markdown","da5c4eb6":"markdown","1dd67e71":"markdown","1c654290":"markdown","888a2f2d":"markdown","80a0f040":"markdown","fc0f3ad9":"markdown","4dc1313c":"markdown","ea36b87b":"markdown","311fb4d5":"markdown","18d71f9a":"markdown","06cd29e7":"markdown","080e961b":"markdown","dffd87ec":"markdown","0abd8f62":"markdown","805b9b09":"markdown","0894e55b":"markdown","4ddfd6dc":"markdown","21d9f27e":"markdown","bd846537":"markdown","c357fe78":"markdown","2b1c44c6":"markdown"},"source":{"3c9e9615":"import numpy as np                    # linear algebra\nimport pandas as pd                   # database manipulation\nimport matplotlib.pyplot as plt       # plotting libraries\nimport seaborn as sns                 # nice graphs and plots\nimport warnings                       # libraries to deal with warnings\nwarnings.filterwarnings(\"ignore\")\n\nprint(\"pandas version: {}\".format(pd.__version__))\nprint(\"numpy version: {}\".format(np.__version__))\nprint(\"seaborn version: {}\".format(sns.__version__))","e8da9065":"train = pd.read_csv('..\/input\/train_V2.csv')\n\nprint('There are {:,} rows and {} columns in our dataset.'.format(train.shape[0],train.shape[1]))","72c8e994":"train.head()","9bde5b8e":"train.info()","c6b2959f":"train.describe()","98c767b0":"missing_data = train.isna().sum().to_frame()\nmissing_data.columns=[\"Missing data\"]","a09e3c41":"no_matches = train.loc[:,\"matchId\"].nunique()\nprint(\"There are {} matches registered in our database.\".format(no_matches))","6b754cc0":"m_types = train.loc[:,\"matchType\"].value_counts().to_frame().reset_index()\nm_types.columns = [\"Type\",\"Count\"]\nm_types","a9e8858b":"plt.figure(figsize=(15,8))\nticks = m_types.Type.values\nax = sns.barplot(x=\"Type\", y=\"Count\", data=m_types)\nax.set_xticklabels(ticks, rotation=60, fontsize=14)\nax.set_title(\"Match types\")\nplt.show()","2e5e018c":"m_types2 = train.loc[:,\"matchType\"].value_counts().to_frame()\naggregated_squads = m_types2.loc[[\"squad-fpp\",\"squad\",\"normal-squad-fpp\",\"normal-squad\"],\"matchType\"].sum()\naggregated_duos = m_types2.loc[[\"duo-fpp\",\"duo\",\"normal-duo-fpp\",\"normal-duo\"],\"matchType\"].sum()\naggregated_solo = m_types2.loc[[\"solo-fpp\",\"solo\",\"normal-solo-fpp\",\"normal-solo\"],\"matchType\"].sum()\naggregated_mt = pd.DataFrame([aggregated_squads,aggregated_duos,aggregated_solo], index=[\"squad\",\"duo\",\"solo\"], columns =[\"count\"])\naggregated_mt","7f116966":"fig1, ax1 = plt.subplots(figsize=(5, 5))\nlabels = ['squad', 'duo', 'solo']\n\nwedges, texts, autotexts = ax1.pie(aggregated_mt[\"count\"],textprops=dict(color=\"w\"), autopct='%1.1f%%', startangle=90)\n\nax1.axis('equal')\nax1.legend(wedges, labels,\n          title=\"Types\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=12, weight=\"bold\")\nplt.show()","bb38942d":"plt.figure(figsize=(15,8))\nax = sns.distplot(train[\"numGroups\"])\nax.set_title(\"Number of groups\")\nplt.show()","3c1e0368":"plt.figure(figsize=(15,8))\nax1 = sns.boxplot(x=\"kills\",y=\"damageDealt\", data = train)\nax1.set_title(\"Damage Dealt vs. Number of Kills\")\nplt.show()","ae9b29ac":"train[train['kills']>60][[\"Id\",\"assists\",\"damageDealt\",\"headshotKills\",\"kills\",\"longestKill\"]]","62ffebb1":"headshots = train[train['headshotKills']>0]\nplt.figure(figsize=(15,5))\nsns.countplot(headshots['headshotKills'].sort_values())\nprint(\"Maximum number of headshots that the player scored: \" + str(train[\"headshotKills\"].max()))","d25f12f1":"headshots = train[train['DBNOs']>0]\nplt.figure(figsize=(15,5))\nsns.countplot(headshots['DBNOs'].sort_values())\nprint(\"Mean number of DBNOs that the player scored: \" + str(train[\"DBNOs\"].mean()))","ddc661d4":"plt.figure(figsize=(15,8))\nax2 = sns.boxplot(x=\"DBNOs\",y=\"kills\", data = train)\nax2.set_title(\"Number of DBNOs vs. Number of Kills\")\nplt.show()","07ff11d8":"plt.figure(figsize=(15,8))\nax3 = sns.boxplot(x=\"killStreaks\",y=\"kills\", data = train)\nax3.set_title(\"Number of kill streaks vs. Number of Kills\")\nplt.show()","69e2e1ae":"dist = train[train['longestKill']<200]\nplt.rcParams['axes.axisbelow'] = True\ndist.hist('longestKill', bins=20, figsize = (16,8))\nplt.show()","59f3e33c":"print(\"Average longest kill distance a player achieve is {:.1f}m, 95% of them not more than {:.1f}m and a maximum distance is {:.1f}m.\" .format(train['longestKill'].mean(),train['longestKill'].quantile(0.95),train['longestKill'].max()))","7d6de0af":"walk0 = train[\"walkDistance\"] == 0\nride0 = train[\"rideDistance\"] == 0\nswim0 = train[\"swimDistance\"] == 0\nprint(\"{} of players didn't walk at all, {} players didn't drive and {} didn't swim.\" .format(walk0.sum(),ride0.sum(),swim0.sum()))","6e79e351":"walk0_rows = train[walk0]\nprint(\"Average place of non-walking players is {:.3f}, minimum is {} and the best is {}, 95% of players has a score below {}.\" \n      .format(walk0_rows[\"winPlacePerc\"].mean(), walk0_rows[\"winPlacePerc\"].min(), walk0_rows[\"winPlacePerc\"].max(),walk0_rows[\"winPlacePerc\"].quantile(0.95)))\nwalk0_rows.hist('winPlacePerc', bins=40, figsize = (16,8))\nplt.show()","02222045":"suspects = train.query('winPlacePerc ==1 & walkDistance ==0').head()\nsuspects.head()","a4cb7e2a":"print(\"Maximum ride distance for suspected entries is {:.3f} meters, and swim distance is {:.1f} meters.\" .format(suspects[\"rideDistance\"].max(), suspects[\"swimDistance\"].max()))","3fb6fe21":"ride = train.query('rideDistance >0 & rideDistance <10000')\nwalk = train.query('walkDistance >0 & walkDistance <4000')\nride.hist('rideDistance', bins=40, figsize = (15,10))\nwalk.hist('walkDistance', bins=40, figsize = (15,10))\nplt.show()","f3356133":"travel_dist = train[\"walkDistance\"] + train[\"rideDistance\"] + train[\"swimDistance\"]\ntravel_dist = travel_dist[travel_dist<5000]\ntravel_dist.hist(bins=40, figsize = (15,10))\nplt.show()","056b57fa":"print(\"Average number of acquired weapons is {:.3f}, minimum is {} and the maximum {}, 99% of players acquired less than weapons {}.\" \n      .format(train[\"weaponsAcquired\"].mean(), train[\"weaponsAcquired\"].min(), train[\"weaponsAcquired\"].max(), train[\"weaponsAcquired\"].quantile(0.99)))\ntrain.hist('weaponsAcquired', figsize = (20,10),range=(0, 10), align=\"left\", rwidth=0.9)\nplt.show()","579aafe8":"ax = sns.clustermap(train.corr(), annot=True, linewidths=.6, fmt= '.2f', figsize=(20, 15))\nplt.show()","e01381bd":"top10 = train[train[\"winPlacePerc\"]>0.9]\nprint(\"TOP 10% overview\\n\")\nprint(\"Average number of kills: {:.1f}\\nMinimum: {}\\nThe best: {}\\n95% of players within: {} kills.\" \n      .format(top10[\"kills\"].mean(), top10[\"kills\"].min(), top10[\"kills\"].max(),top10[\"kills\"].quantile(0.95)))","229d1eeb":"plt.figure(figsize=(15,8))\nax3 = sns.boxplot(x=\"DBNOs\",y=\"kills\", data = top10)\nax3.set_title(\"NUmber of DBNOs vs. Number of Kills\")\nplt.show()","29232c86":"fig, ax1 = plt.subplots(figsize = (15,10))\nwalk.hist('walkDistance', bins=40, figsize = (15,10), ax = ax1)\nwalk10 = top10[top10['walkDistance']<5000]\nwalk10.hist('walkDistance', bins=40, figsize = (15,10), ax = ax1)\n\nprint(\"Average walking distance: \" + str(top10['walkDistance'].mean()))","92b3d3c2":"fig, ax1 = plt.subplots(figsize = (15,10))\nride.hist('rideDistance', bins=40, figsize = (15,10), ax = ax1)\nride10 = top10.query('rideDistance >0 & rideDistance <10000')\nride10.hist('rideDistance', bins=40, figsize = (15,10), ax = ax1)\nprint(\"Average riding distance: \" + str(top10['rideDistance'].mean()))","8dec3316":"print(\"On average the best 10% of players have the longest kill at {:.3f} meters, and the best score is {:.1f} meters.\" .format(top10[\"longestKill\"].mean(), top10[\"longestKill\"].max()))","20872222":"ax = sns.clustermap(top10.corr(), annot=True, linewidths=.5, fmt= '.2f', figsize=(20, 15))\nplt.show()","caf8ec59":"import xgboost as xgb\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import Normalizer\n\ntrain.dropna(subset=[\"winPlacePerc\"], inplace=True) # droping rows with missing labels\n\nX = train.drop([\"Id\",\"groupId\",\"matchId\",\"matchType\",\"winPlacePerc\"], axis=1)\ny = train[\"winPlacePerc\"]\n\ncol_names = X.columns\n\ntransformer = Normalizer().fit(X)\nX = transformer.transform(X)","93d2173c":"X = pd.DataFrame(X, columns=col_names)","78c1dd68":"X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=0.2)\n\nD_train = xgb.DMatrix(X_train, label=Y_train)\nD_test = xgb.DMatrix(X_test, label=Y_test)","6411fde5":"param = {\n    'eta': 0.15, \n    'max_depth': 5,  \n    'num_class': 2} \n\nsteps = 20  # The number of training iterations\nmodel = xgb.train(param, D_train, steps)","7a13d198":"fig, ax1 = plt.subplots(figsize=(8,15))\nxgb.plot_importance(model, ax=ax1)\nplt.show()","48e30c6a":"from sklearn.metrics import mean_squared_error\n\npreds = model.predict(D_test)\nbest_preds = np.asarray([np.argmax(line) for line in preds])\n\nprint(\"MSE = {}\".format(mean_squared_error(Y_test, best_preds)))","aff61c59":"It seems that DBNOs are correlated with kills. That makes sense as usually if player is not killed by headshoot yu have to finish him while he's in DBNO state. Interesting is the first observation in the plot - apparently there is a number of players who scored a kill without DBNOs - this is usually a headshot or a vechicle explosion.","c97e5a42":"Let's see now the correlations between the variables","75d60182":"<a id='Match types'><\/a>\n### 2.1 Match types <a href='#Top' style=\"text-decoration: none;\">^<\/a><br>","66f84736":"<a id='Kills and damage dealt'><\/a>\n### 2.2 Kills and damage dealt <a href='#Top' style=\"text-decoration: none;\">^<\/a><br>","3cac0be3":"Is there a correlation between DBNOs and kills?","eca021e0":"The graph above shows that the most popular game modes are squad and duo. Next I will aggregate all these individual types into three main categories (squad, duo and solo).","bddae9b5":"In PUBG there are essentially three main modes of game: **Solo**, **Duo** and **Squad**. \n\nIn a squad mode, you play in a group of 4 players. Here we can see that the match types are further broken down taking into account view modes:\n* FPP - First Person Perspective\n* TPP - Thirst Peron Perspective\n* Normal - you can switch between views during a game\nHowever, I am not able to identify what flare- and crash- types of matches are.","f7779eaa":"<a id='Exploratory Data Analysis'><\/a>\n## 2 Exploratory Data Analysis <a href='#Top' style=\"text-decoration: none;\">^<\/a><br>\n\nNice - it looks we do not have any missing values. That's a perfect starting point for EDA and for ML as well.","94212c6a":"\n<!-- Start of Unsplash Embed Code - Centered (Embed code by @BirdyOz)-->\n<div style=\"width:50%; margin: 20px 20% !important;\">\n    <img src=\"https:\/\/images.unsplash.com\/photo-1557461762-e08315322e3d?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=720&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjEyMDd9\" class=\"img-responsive img-fluid img-med\" alt=\"grey helmet keychain selective focus photography \" title=\"grey helmet keychain selective focus photography \">\n    <div class=\"text-muted\" style=\"opacity: 0.5\">\n        <small><a href=\"https:\/\/unsplash.com\/photos\/5zvziFY-yj8\" target=\"_blank\">Photo<\/a> by <a href=\"https:\/\/unsplash.com\/@clintbustrillos\" target=\"_blank\">@clintbustrillos<\/a> on <a href=\"https:\/\/unsplash.com\" target=\"_blank\">Unsplash<\/a>, accessed 26\/02\/2020<\/small>\n    <\/div>\n<\/div>\n<!-- End of Unsplash Embed code -->\n                \n**THE END**","2ad9ed4b":"Now, let's check if there are any missing data.","65b240f4":"DBNO - Down But Not Out. How many enemies DBNOs an average player scores.","daa3bd83":"<a id='TOP10'><\/a>\n## 3. Analysis of TOP 10% of players <a href='#Top' style=\"text-decoration: none;\">^<\/a><br>","6967f40d":"Now let's create a sum of walking, driving and swimming distances for each row.","c9b7bd50":"Let's create some basic descriptive statistics for each column. These will be usefull to set the visualisation parameters, to filter out the outliers and to get the feeling about the ranges\/scales.","5d194463":"The pie chart above shows that over 54% of all the matches was played in squad mode.","da5c4eb6":"What about the longest distances at which they scored their kills?","1dd67e71":"Now let's see at headshoots statistics as this is one of the most satisfying thing you can score during a game. Players without any headshoot kills are filtered out.","1c654290":"Plots above show that players mostly walk during a game. That's obvious when you think that vehicles are usually used just to loot more locations and to get a more strategic positions for attack and defend.","888a2f2d":"\nFor better understanding of database below there is a columns descriptions:\n\n*     **groupId** - Players team ID\n*     **matchId** - Match ID\n*     **assists** - Number of assisted kills. The killed is actually scored for the another teammate.\n*     **boosts** - Number of boost items used by a player. These are for example: energy dring, painkillers, adrenaline syringe.\n*     **damageDealt** - Damage dealt to the enemy\n*     **DBNOs** - Down But No Out - when you lose all your HP but you're not killed yet. All you can do is only to crawl.\n*     **headshotKills** - Number of enemies killed with a headshot\n*     **heals** - Number of healing items used by a player. These are for example: bandages, first-aid kits\n*     **killPlace** - Ranking in a match based on kills.\n*     **killPoints** - Ranking in a match based on kills points.\n*     **kills** - Number of enemy players killed.\n*     **killStreaks** - Max number of enemy players killed in a short amount of time.\n*     **longestKill** - Longest distance between player and killed enemy.\n*     **matchDuration** - Duration of a mach in seconds.\n*     **matchType** - Type of match. There are three main modes: Solo, Duo or Squad. In this dataset however we have much more categories.\n*     **maxPlace** - The worst place we in the match.\n*     **numGroups** - Number of groups (teams) in the match.\n*     **revives** - Number of times this player revived teammates.\n*     **rideDistance** - Total distance traveled in vehicles measured in meters.\n*     **roadKills** - Number of kills from a car, bike, boat, etc.\n*     **swimDistance** - Total distance traveled by swimming (in meters).\n*     **teamKills** - Number teammate kills (due to friendly fire).\n*     **vehicleDestroys** - Number of vehicles destroyed.\n*     **walkDistance** - Total distance traveled on foot measured (in meters).\n*     **weaponsAcquired** - Number of weapons picked up.\n*     **winPoints** - Ranking in a match based on won matches.\n\nAnd our target column:\n*     **winPlacePerc** - Normalised placement (rank). The 1st place is 1 and the last one is 0.\n\n","80a0f040":"<a id='Correlation map'><\/a>\n### 2.6 Correlation map <a href='#Top' style=\"text-decoration: none;\">^<\/a><br>","fc0f3ad9":"Comparison of both clustertmap, for all and TOP 10% shows that the same columns seems to be of significant importance (I assume above 0.6 or below -0.6):\n* rankPoints vs killPoints\n* kills vs. damage dealt\/DBNOs\/headshotKills\/killPlace\n* killStreaks vs. damageDealt\/killPlace\/kills\n* longestKill vs. damageDealt\/kills\n* walkDistance vs. killPlace\n* winPoints vs. killPonts\/rankPoints\n* winPlacePerc vs. boosts\/killPlace\/walkDistance\/weaponsAquired","4dc1313c":"Reading raw training data.","ea36b87b":"Let's see their way of travelling and comare this to the overall population.","311fb4d5":"There is an obvious correlation between number of kills and damage dealt. We see also that there are some outliers, more in the lower range. As the number of kills increases number of outliers reduces - these players rather kill than wound enemies. The maximum kills is 72 which is much bigger than the wast majority of players scores.\n","18d71f9a":"Let's look at our kills masters:","06cd29e7":"Above numbers indicate that there is a significant number of players who didn't walk at all. We should think how to interpret these record. It is obvious that you have to walk just a little bit in order to play this game (to get to a car at least). Are this disconnected players? If yes they shouldn't score any points. Let's check this.","080e961b":"<a id='Weapons acquired'><\/a>\n### 2.5 Weapons acquired <a href='#Top' style=\"text-decoration: none;\">^<\/a><br>","dffd87ec":"<a id='Top'><\/a>\n<center>\n<h1><u>PUBG - EDA, XGBoost<\/u><\/h1>\n<h3>Author: Robert Kwiatkowski<\/h3>\n<\/center>\n\n---\n![Imgur](https:\/\/i.imgur.com\/NmskNuo.jpg)\n\n**PUBG (Player Unknown's Battlegrounds)** is a hugely successful and popular online shooter game. It's of so-called \"battle royale\" type - the game ends when the last team stays alive on a map.  The difference to the normal deathmatch is that after you are killed in battle royale game you're not re-spawned anymore (perma-death). Here is the [official game site](https:\/\/www.pubg.com\/).\nAt the moment this competition was launched there were only two maps: \"Erangel\" and \"Miramar\". Currently, there is \"Vikendi\" as well but it is not included in our dataset.\n\nThere were few datasets regarding this game on Kaggle before. If you want for example to see my non-parametric Survival Analysis (Kaplan-Meier method) click [here](https:\/\/www.kaggle.com\/datark1\/pubg-survival-analysis-kaplan-meier).\n\nThis kernel is mostly EDA oriented but we will look for some anomalies as well ( possibly cheaters).\n\n### CONTENT:  \n1. [Database description](#description)<br>\n2. [Exploratory Data Analysis](#Exploratory Data Analysis)<br>\n   2.1 [Match types](#Match types)<br>\n   2.2 [Kills and damage dealt](#Kills and damage dealt)<br>\n   2.3 [Maximum distances](#Maximum distances)<br>\n   2.4 [Driving vs. Walking](#Driving vs. Walking)<br>\n   2.5 [Weapons acquired](#Weapons acquired)<br>\n   2.6 [Correlation map](#Correlation map)<br>\n3. [Analysis of TOP 10% of players](#TOP10%)<br>\n4. [Baseline XGBoost and features importance](#XGB)<br>\n\n<a id='description'><\/a>\n## 1. Database description <a href='#Top' style=\"text-decoration: none;\">^<\/a><br>\n\nOK, let's see what's inside. I will load some basic libraries first.","0abd8f62":"Longest kill of 1094m seems a bit unrealistic (cheater?) but from another side with a 8x scope, a static target, very good position and a lot of luck it is possible.\n\nTo get a scale the entire Miramar map is 8x8km and 1300 meters is about like shooting from La Bendita crater to Impala city. Below the picture showing this in practice.\n![Imgur](https:\/\/i.imgur.com\/7WzRzkQ.jpg)","805b9b09":"The first glance at the data. Below the first 5 rows:","0894e55b":"<a id='Maximum distances'><\/a>\n### 2.3 Maximum distances <a href='#Top' style=\"text-decoration: none;\">^<\/a><br>\n\nRange is filtered to a resonable kill distance, e.g. 200 meters. To give you the feeling about distances in the game I prepared a small comparison in the picture below. On the left side the building I'm aiming at is approximately 100m away, on the right side around 200m.\n\n![Imgur](https:\/\/i.imgur.com\/js8kQpU.jpg)","4ddfd6dc":"<a id='Driving vs. Walking'><\/a>\n### 2.4 Driving vs. Walking <a href='#Top' style=\"text-decoration: none;\">^<\/a><br>\n\nI filtered data to exclude for players who don't ride at all and don't walk.","21d9f27e":"The graph allows to clearly notice distribution three spikes referring (from left) to: squad games, duo games and solo games.","bd846537":"As we see most of the non-walking players score only last places. However, few of them got better places and a few even the top ones. This may be indication of presence of famous **cheaters**! Let's print couple of suspicious row.","c357fe78":"Interestingly, all of the columns connected to travelling are zero.","2b1c44c6":"<a id='XGB'><\/a>\n## 4. Baseline XGBoost and features importance <a href='#Top' style=\"text-decoration: none;\">^<\/a><br>"}}