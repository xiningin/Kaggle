{"cell_type":{"d68f31e4":"code","51021696":"code","6a38d002":"code","58735149":"code","ed8383d0":"code","200478b2":"code","9ea5772d":"code","37b3d3bd":"code","a5cc1926":"code","33323ba4":"code","462db30d":"code","31e3f017":"code","4a114af4":"code","90f666cb":"code","4aa48962":"code","3192537f":"code","f00e2a2c":"code","370aecdd":"code","47fbc324":"code","577ef29d":"code","8cf1d6b0":"code","b8a6b597":"code","73dcae3d":"code","576fbe08":"code","036af078":"code","15c4d340":"code","f6afbc9c":"code","e79e9252":"code","e0a1af12":"code","ec46b542":"code","6c51c6ee":"code","0e3bf3ac":"code","c1486363":"code","9c265f4a":"code","9395204b":"code","24cc819c":"code","5a508b12":"code","50b9f83c":"code","41f38987":"code","2bc34da1":"code","b4229272":"code","415db889":"code","2315f4b0":"code","b3485db4":"code","d7728cd9":"code","8a5ef691":"code","2db3efea":"code","6f8d63e6":"code","1c007400":"code","98456947":"code","5cd70f1b":"code","58b2ac5d":"code","564c3a1e":"code","3ff30c95":"code","ca7092f6":"code","cf0fac37":"code","4a9b782f":"code","6711ba3d":"code","a6785bb0":"code","42bd8b04":"code","5419aab0":"code","1574ee93":"code","401a1397":"code","b70d6668":"code","a9ac9ce7":"code","bb0a8e62":"code","c895b98c":"code","7303f660":"code","2998d653":"code","db67e65c":"code","88df2b5e":"code","3eb3343f":"code","f7a4d69c":"code","fcd8185d":"code","57c3fb2a":"code","2fc5b9f3":"code","9e0f6b82":"code","c7f68900":"code","627a2a81":"code","2429d5fc":"code","3f4938e3":"code","73f9d0ec":"code","e16ebab7":"markdown","d144b7fa":"markdown","e9b2ab60":"markdown","03592ed5":"markdown","a7bc8658":"markdown","8666f0b3":"markdown","ffd77390":"markdown","21015574":"markdown","301bd286":"markdown","06dc0054":"markdown","280abc7a":"markdown","f267b4fa":"markdown","e0dd6be3":"markdown","e54c5b70":"markdown","1bb4b0ba":"markdown","e232edec":"markdown","6ba7c89f":"markdown","11763193":"markdown","812f51fa":"markdown","1ba1b69b":"markdown","5f133bb5":"markdown","06df7926":"markdown","8a7c03b2":"markdown","0b5cec77":"markdown","30daa50c":"markdown","b16fa72c":"markdown","d720439a":"markdown","7977143f":"markdown","a013dcde":"markdown","edc8d317":"markdown"},"source":{"d68f31e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","51021696":"data = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')","6a38d002":"data.info()","58735149":"data.corr()","ed8383d0":"f, ax = plt.subplots(figsize=(15,15))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f', ax=ax)\nplt.show()","200478b2":"data.head()","9ea5772d":"#Line Plot\ndata.Speed.plot(kind = 'line', color = 'g', label = 'Speed', linewidth = 1, alpha = 0.5, grid = True, linestyle = ':')\ndata.Defense.plot(color = 'r', label = 'Defense', linewidth = 1, alpha = 0.5, grid = True, linestyle = '-.')\nplt.legend(loc='upper right')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line Plot')\nplt.show()","37b3d3bd":"#Scatter Plot\n#x=Attack ,y=Defense\ndata.plot(kind='scatter', x='Attack', y='Defense', alpha=0.5, color = 'red')\nplt.xlabel('Attack')\nplt.ylabel('Defense')\nplt.title('Attack Defense Scatter Plot') #title of plot\nplt.show()","a5cc1926":"#Histogram\n#bins = number of bar in figure\ndata.Speed.plot(kind = 'hist', bins = 50, figsize = (8, 8))\nplt.show()","33323ba4":"# clf() = cleans it up again you can start a fresh \ndata.Speed.plot(kind = 'hist', bins = 50)\nplt.clf()","462db30d":"#There is two type libraries in Pandas..\n\n#-Seriler = data[]\n#-Dataframe = data[[]]\nseries = data['Defense'] \nprint(type(series))\ndata_frame = data[['Defense']] \nprint(type(data_frame))","31e3f017":"#Filtering Pandas Data Frame\nx = data['Defense']>200 #There are only 3 pokemons who have higher defense value than 200\ndata[x]","4a114af4":"#Filtering Pandas with logical_and\n#There are only 2 pokemons who have higher defense value than 200 and higher attack value than 100\ndata[np.logical_and(data['Defense']>200, data['Attack']>100)]","90f666cb":"#For loop\nfor index, value in data[['Attack']][0:2].iterrows():\n    print(index, \" : \", value)","4aa48962":"# List comprehension example with Pandas.\nthreshold = sum(data.Speed)\/len(data.Speed)\nprint('threshold',threshold)\ndata[\"speed_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Speed]\ndata.loc[:10, [\"speed_level\", \"Speed\"]]","3192537f":"data = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')\ndata.head()","f00e2a2c":"data.columns","370aecdd":"data.shape\n","47fbc324":"data.info()","577ef29d":"print(data['Type 1'].value_counts(dropna=False))","8cf1d6b0":"data.describe() # ignore null entries","b8a6b597":"data.boxplot(column='Attack', by = 'Legendary')\nplt.show()","73dcae3d":"data_new = data.head()\ndata_new","576fbe08":"#melting\nmelted = pd.melt(frame=data_new, id_vars = 'Name', value_vars = ['Attack', 'Defense'])\nmelted","036af078":"melted.pivot(index='Name', columns = 'variable', values='value')","15c4d340":"data1 = data.head()\ndata2 = data.tail()\nconc_data_row = pd.concat([data1, data2], axis=0, ignore_index=True)\nconc_data_row","f6afbc9c":"data3 = data['Attack'].head()\ndata4 = data['Defense'].head()\nconc_data_col = pd.concat([data3, data4], axis=1)\nconc_data_col","e79e9252":"data.dtypes","e0a1af12":"#Lets convert object to categorical and int to float\ndata['Type 1'] = data['Type 1'].astype('category')\ndata['Speed'] = data['Speed'].astype('float')","ec46b542":"data.dtypes","6c51c6ee":"data.info()","0e3bf3ac":"#Lets check Type 2\ndata[\"Type 2\"].value_counts(dropna=False)\n#There are 386 NAN values","c1486363":"#Lets drop NAN values\ndata1 = data\ndata1[\"Type 2\"].dropna(inplace = True)","9c265f4a":"assert 1==1","9395204b":"assert data['Type 2'].notnull().all() \n#return error because it is false","24cc819c":"assert data[\"Type 2\"].notnull().all()\n#returns nothing bacause we drop all NAN values","5a508b12":"data[\"Type 2\"].fillna('empty', inplace = True)\n","50b9f83c":"assert data.columns[1] == 'Name'","41f38987":"# Plotting all data \ndata1 = data.loc[:,[\"Attack\",\"Defense\",\"Speed\"]]\ndata1.plot()","2bc34da1":"# subplots\ndata1.plot(subplots = True)\nplt.show()","b4229272":"# scatter plot  \ndata1.plot(kind = \"scatter\",x=\"Attack\",y = \"Defense\")\nplt.show()","415db889":"# hist plot  \ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True)","2315f4b0":"fig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","b3485db4":"data.describe()","d7728cd9":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) \ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","8a5ef691":"import warnings\nwarnings.filterwarnings(\"ignore\")\ndata2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\ndata2= data2.set_index(\"date\")\ndata2 ","2db3efea":"print(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","6f8d63e6":"data2.resample(\"A\").mean()","1c007400":"#Lets resample with month\ndata2.resample(\"M\").mean()\n# As you can see there are a lot of nan because data2 does not include all months\n","98456947":"data2.resample(\"M\").mean().interpolate(\"linear\")\n","5cd70f1b":"# read data\ndata = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')\ndata= data.set_index(\"#\")\ndata.head()","58b2ac5d":"#indexing using square bracket\ndata[\"HP\"][1]","564c3a1e":"#using column attribute and row label\ndata.HP[1]","3ff30c95":"#using loc accessor\ndata.loc[1,[\"HP\"]]","ca7092f6":"#Selecting only some columns\ndata[[\"HP\",\"Attack\"]]","cf0fac37":"print(type(data[\"HP\"]))     # series\nprint(type(data[[\"HP\"]]))   # data frames","4a9b782f":"#slicing and indexing series\ndata.loc[1:10,\"HP\":\"Defense\"]","6711ba3d":"# Reverse slicing \ndata.loc[10:1:-1,\"HP\":\"Defense\"] ","a6785bb0":"#from something to end\ndata.loc[1:10,\"Speed\":]","42bd8b04":"#creating boolean series\nboolean = data.HP > 200\ndata[boolean]","5419aab0":"#combining filters\nfirst_filter = data.HP > 150\nsecond_filter = data.Speed > 35\ndata[first_filter & second_filter]","1574ee93":"#filtering column based others\ndata.HP[data.Speed<15]","401a1397":"#plain python functions\ndef div(n):\n    return n\/2\ndata.HP.apply(div)","b70d6668":"#we can also use lambda function\ndata.HP.apply(lambda n : n\/2)","a9ac9ce7":"#defining column using other columns\ndata[\"total_power\"] = data.Attack + data.Defense\ndata.head()","bb0a8e62":"print(data.index.name)\ndata.index.name = \"index_name\"\ndata.head()","c895b98c":"# Overwrite index\ndata.head()\ndata3 = data.copy()\ndata3.index = range(100,900,1)\ndata3.head()","7303f660":"data = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')\ndata.head()","2998d653":"# Setting index : type 1 is outer type 2 is inner index\ndata1 = data.set_index([\"Type 1\",\"Type 2\"]) \ndata1.head(100)","db67e65c":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","88df2b5e":"# pivoting\ndf.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")\n","3eb3343f":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1","f7a4d69c":"# level determines indexes\ndf1.unstack(level=0)","fcd8185d":"df1.unstack(level=1)\n","57c3fb2a":"#change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","2fc5b9f3":"df","9e0f6b82":"pd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])\n","c7f68900":"#we will use df\ndf","627a2a81":"df.groupby(\"treatment\").mean()   # mean is aggregation \/ reduction method","2429d5fc":"#we can only choose one of the feature\ndf.groupby(\"treatment\").age.max() ","3f4938e3":"#Or we can choose multiple features\ndf.groupby(\"treatment\")[[\"age\",\"response\"]].min() ","73f9d0ec":"df.info()","e16ebab7":"CONCLUSION","d144b7fa":"3.CLEANING DATA","e9b2ab60":"RESAMPLING PANDAS TIME SERIES\n","03592ed5":"A. Matplotlib","a7bc8658":"STACKING and UNSTACKING DATAFRAME","8666f0b3":"B. DICTIONARIES\n#This section is left blank because the pokemon dataset is not suitable for dictionaries","ffd77390":"value_counts(): counts the frequency\noutliers : the value that is considerably higher or lower from rest of the data\n* Lets say value at 75% is Q3 and value at 25% is Q1.\n* Outliers are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1).(Q3-Q1) = IQR\n  We will use describe() method. Describe method includes :\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry\n\n","21015574":"INDEX OBJECTS AND LABELED DATA\n* index: sequence of label","301bd286":"TIDY DATA\n\n* We tidy data with melt() .","06dc0054":"MANIPULATING DATA FRAMES WITH PANDAS","280abc7a":"HIERARCHICAL INDEXING","f267b4fa":"SLICING DATA FRAME","e0dd6be3":"PANDAS FOUNDATION","e54c5b70":"CONCATENATING DATA\n* We can concatenate two dataframes ","1bb4b0ba":"C.PANDAS","e232edec":"STATISTICAL EXPLORATORY DATA ANALYSIS","6ba7c89f":"CATEGORICALS AND GROUPBY","11763193":"VISUAL EXPLORATORY DATA ANALYSIS\n* Plot\n* Subplot\n* Histogram","812f51fa":"VISUAL EXPLORATORY DATA ANALYSIS\n\n* Box plots : visualize basic statistics like outliers, min\/max or quantiles","1ba1b69b":"DATA TYPES\n* There are 5 basic data types:\n  * object(string)\n  * boolean\n  * integer\n  * float\n  * categorical","5f133bb5":"\nMELTING DATA FRAMES\n* Reverse of pivoting","06df7926":"INDEXING PANDAS TIME SERIES\n* datetime = object\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","8a7c03b2":"INDEXING DATA FRAMES\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns","0b5cec77":"PIVOTING DATA\n* Reverse of melting","30daa50c":"FILTERING DATA FRAMES","b16fa72c":"EXPLORATARY DATA ANALYSIS (EDA)\n","d720439a":"INTRODUCTION TO DATA SCIENCE","7977143f":"TRANSFORMING DATA","a013dcde":"MISSING DATA AND TESTING WITH ASSERT\n","edc8d317":"PIVOTING DATA FRAMES"}}