{"cell_type":{"ca286bbe":"code","56679bd1":"code","f1798692":"code","a224dbf1":"code","e6d238f9":"code","e9d2b5a7":"code","f0d2a7b0":"markdown","bbd88c0d":"markdown","e7fe14eb":"markdown","095fe4f8":"markdown","cd20bc5b":"markdown","435325da":"markdown"},"source":{"ca286bbe":"scans = !ls \/kaggle\/input\/rsna-str-pulmonary-embolism-detection\/train\/*\/* -d\nlen(scans)","56679bd1":"from tqdm import tqdm\ncount_min = 10e6\ncount_max = 0\nfor s in tqdm(scans):\n    cnt, = !ls {s}\/* | wc -l # this is super-slow.. probably avoiding \"!\" would be a good idea\n    count_min = min(count_min, int(cnt))\n    count_max = max(count_max, int(cnt))\ncount_min, count_max","f1798692":"import numpy as np\n\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nimport matplotlib.animation as animation\n\nfrom matplotlib import animation, rc\nfrom pydicom import dcmread\n\n\nrc('animation', html='jshtml')\n\n\ndef read_scan(path):\n    fs = !ls -d {path}\/*\n    \n    slices = []\n    for f in fs:\n        ds = dcmread(f)\n        data = ds.pixel_array\n        num = int(ds.InstanceNumber)\n        slices.append((num, data))\n    \n    slices.sort()\n    slices = [s[1] for s in slices]\n    return slices\n\ndef create_animation(ims):\n    ims = ims\n    fps = 30\n    nSeconds = 5\n\n    fig = plt.figure( figsize=(9,9) )\n\n    a = ims[0]\n    im = plt.imshow(a)\n\n    def animate_func(i):\n        im.set_array(ims[i])\n        return [im]\n\n    anim = animation.FuncAnimation(fig, animate_func, frames = len(ims), interval = 1000\/\/24)\n    \n    return anim\n\ns1 = scans[1]\nims = read_scan(s1)\nanim = create_animation(ims)","a224dbf1":"anim\n","e6d238f9":"f,*_ = !ls -d {scans[1]}\/*\nmeta = dcmread(f)\nmeta","e9d2b5a7":"import pandas as pd\ndf = pd.read_csv('\/kaggle\/input\/rsna-str-pulmonary-embolism-detection\/train.csv')\n\ncols = \"pe_present_on_image\tnegative_exam_for_pe\tqa_motion\tqa_contrast\tflow_artifact\trv_lv_ratio_gte_1\trv_lv_ratio_lt_1\tleftsided_pe\tchronic_pe\ttrue_filling_defect_not_pe\trightsided_pe\tacute_and_chronic_pe\tcentral_pe\tindeterminate\".split()\n\n\n\nfig = plt.figure( figsize=(12,12) )\npie = df[cols].sum()\nplt.pie(pie, labels=pie.index)\nplt.show()","f0d2a7b0":"# Each scan consists of number of slices, between *63* and *1083*","bbd88c0d":"# So, large number of examples appears to be negative","e7fe14eb":"### *wip*","095fe4f8":"# This is part multi-class and part multi-label competition, since some labels are mutually exclusive","cd20bc5b":"# We're given *7279* scans\n","435325da":"# Also each slice contains bunch of metadata"}}