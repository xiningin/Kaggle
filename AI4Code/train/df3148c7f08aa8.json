{"cell_type":{"a019cdd4":"code","082fd6b4":"code","069fcf7b":"code","c77d66c3":"code","30bc69ed":"code","81807c3d":"code","4e9b2ffc":"code","b4133dac":"code","78e7246a":"code","596e163b":"code","69005988":"markdown","1374213a":"markdown","b2ef88ab":"markdown","29b7cdb9":"markdown","85d98ac3":"markdown","6272de05":"markdown","d914bf40":"markdown","147dc1ca":"markdown"},"source":{"a019cdd4":"import warnings\n\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nfrom tabulate import tabulate\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVC\nfrom sklearn import preprocessing\nimport seaborn as sb\nfrom sklearn.metrics import accuracy_score\nimport time\n\nfrom IPython.display import display, HTML\n\nCSS = \"\"\"\n.output {\n    flex-direction: row;\n}\n\"\"\"\n\nHTML('<style>{}<\/style>'.format(CSS))\n\ndef beauty_print(df):\n    display(HTML(df.to_html()))\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        \nplt.rcParams['figure.figsize'] = [12, 8]\nplt.rcParams['figure.dpi'] = 100 \n    ","082fd6b4":"df = pd.read_csv('\/kaggle\/input\/bank-customers-data\/BankCustomerData.csv')\nbeauty_print(df.head(5))\n\nprint(df.term_deposit.value_counts())","069fcf7b":"df.info()","c77d66c3":"df_filtered = df.replace('unknown',np.nan)\ndf_filtered.dropna(inplace=True)\ndf_filtered.reset_index(drop=True, inplace=True)\nbeauty_print(df_filtered.head(5))\nbeauty_print(df_filtered.term_deposit.value_counts().to_frame())","30bc69ed":"df_filtered.loc[:,'balance'] = (df_filtered['balance'] - df_filtered['balance'].mean()) \/ df_filtered['balance'].std()\ndf_filtered.loc[:,'duration'] = (df_filtered['duration'] - df_filtered['duration'].mean()) \/ df_filtered['duration'].std()\ndf_filtered.loc[:,'pdays'] = (df_filtered['pdays'] - df_filtered['pdays'].mean()) \/ df_filtered['pdays'].std()","81807c3d":"df_input_candidates = df_filtered[df_filtered.columns[df_filtered.columns.map(lambda col: col not in ['term_deposit'])]]\ny_target = df_filtered['term_deposit']","4e9b2ffc":"le = LabelEncoder()\nfor col in df_input_candidates.columns[ [i == object for i in df_input_candidates.dtypes] ]:\n    df_input_candidates.loc[:,col] = le.fit_transform(df_input_candidates[col])\n\nbeauty_print(df_input_candidates.head(5))","b4133dac":"coefs = []\n\nfor i in range(100):\n    df_filtered_yes = df_input_candidates.loc[y_target == 'yes']\n    df_filtered_no = df_input_candidates.loc[y_target == 'no'].sample(df_filtered_yes.shape[0])\n    \n    df_homogenous = pd.concat([df_filtered_no, df_filtered_yes], ignore_index=True)\n    \n    rng = np.random.RandomState(seed=42)\n    random_values = rng.randn(df_input_candidates.shape[0])\n    df_input_candidates.loc[:,'random_values'] = random_values\n\n    clf = RandomForestClassifier(n_estimators=200, max_depth=2, random_state=42)\n    clf.fit(df_input_candidates, y_target)\n    coefs.append(clf.feature_importances_)","78e7246a":"df_coefs = pd.DataFrame(np.array(coefs),columns=df_input_candidates.columns)\n\ntree_feature_importances = df_coefs.mean().values\nsorted_idx = tree_feature_importances.argsort()\n\ny_ticks = np.arange(0, len(df_coefs.columns))\nfig, ax = plt.subplots()\nax.barh(y_ticks, tree_feature_importances[sorted_idx])\nax.set_yticklabels(df_coefs.columns[sorted_idx].to_list())\nax.set_yticks(y_ticks)\nax.set_title(\"Random Forest Feature Importances (MDI)\")\nfig.tight_layout()\nplt.axvline(df_coefs.mean().mean(), 0, 1, linestyle='--', color='red')\nplt.show()","596e163b":"df_input_candidates.drop(columns=['index'], inplace=True, errors='ignore')\nX_train, X_test, y_train, y_test = train_test_split(df_input_candidates, y_target, test_size=0.33, random_state=42)\n\n#USING ONLY THE BEST FEATURES\nbegin_time = time.time()\n\ncolumns_selected = df_input_candidates.columns[tree_feature_importances > tree_feature_importances.mean()]\n\nclf_with_filtered_data = SVC(kernel='rbf')\nclf_with_filtered_data.fit(X_train[columns_selected], y_train)\n\nelapse_time_with_rf = time.time() - begin_time\n\n#USING ALL FEATURES\n\nbegin_time = time.time()\n\nclf_full_data =  SVC(kernel='rbf')\nclf_full_data.fit(X_train, y_train)\n\nelapse_time_without_rf = time.time() - begin_time\n\ndf_Xtest = pd.DataFrame(X_test, columns = df_input_candidates.columns)\nX_test_selected = df_Xtest[columns_selected].values\n\nprint(f'Accuracy: {round(100*accuracy_score(y_test, clf_with_filtered_data.predict(X_test_selected)),2)}% and time lapse: {elapse_time_with_rf}')\nprint(f'Accuracy: {round(100*accuracy_score(y_test, clf_full_data.predict(X_test)),2)}% and time lapse: {elapse_time_without_rf}')","69005988":"## Check Accuracy and Performance using Support Vector Machine Classifier","1374213a":"# Preprocessing the Data","b2ef88ab":"## Decode string features to number using Label Encoder","29b7cdb9":"## Check feature importances using Random Forest","85d98ac3":"# Analyzing the data","6272de05":"# Classification ","d914bf40":"## Normalizing the numeric fields using zscore","147dc1ca":"## Select Target"}}