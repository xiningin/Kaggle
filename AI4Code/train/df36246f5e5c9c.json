{"cell_type":{"f0573df2":"code","1050d51c":"code","80e8b784":"code","ece17af7":"code","a5b49cfb":"code","afd53e30":"code","e3e55e77":"code","47295d2e":"code","57315762":"code","e1de3047":"code","c7692d15":"markdown","e6764395":"markdown","0bf3016b":"markdown","a6b4075c":"markdown","3add8bab":"markdown","f4de96f1":"markdown","564a9be5":"markdown","f29f5a28":"markdown","c7459cca":"markdown","0168b800":"markdown","f17e8f57":"markdown","6a4ed921":"markdown","59fefcbc":"markdown","bf4ca067":"markdown"},"source":{"f0573df2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom matplotlib.pylab import rcParams\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nrcParams['figure.figsize'] = 12, 4","1050d51c":"import xgboost as xgb\nfrom xgboost import plot_importance\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV","80e8b784":"X_train = pd.read_csv('..\/input\/X_train.csv')\ny_train = pd.read_csv('..\/input\/y_train.csv')\n","ece17af7":"param_test1 = { 'n_estimators': range(10,300,10)}\ngsearch1 = GridSearchCV(estimator = XGBClassifier(learning_rate =0.1, n_estimators=80, max_depth=5,\n                                                  min_child_weight=1,gamma=0, subsample=0.8,             \n                                                  colsample_bytree=0.8, objective= 'binary:logistic',\n                                                  scale_pos_weight=1,seed=27), \n                        param_grid = param_test1,scoring='accuracy',n_jobs=-1,iid=False, cv=5)\ngsearch1.fit(X_train.values,y_train.values)\ngsearch1.best_params_, gsearch1.best_score_","a5b49cfb":"param_test1 = { 'max_depth': range(1,10,1),'min_child_weight':np.arange(1,10,1)}\ngsearch1 = GridSearchCV(estimator = XGBClassifier(learning_rate =0.1, n_estimators=80, max_depth=5,\n                                                  min_child_weight=3,gamma=0, subsample=0.8,             \n                                                  colsample_bytree=0.8, objective= 'binary:logistic',\n                                                  scale_pos_weight=1,seed=27), \n                        param_grid = param_test1,scoring='accuracy',n_jobs=-1,iid=False, cv=5)\ngsearch1.fit(X_train.values,y_train.values)\ngsearch1.best_params_, gsearch1.best_score_\n","afd53e30":"param_test3 = { 'gamma':[i\/10.0 for i in range(0,5)]}\ngsearch3 = GridSearchCV(estimator = XGBClassifier(learning_rate =0.1, n_estimators=80, max_depth=5, \n                                                  min_child_weight=3, gamma=0, subsample=0.8,\n                                                  colsample_bytree=0.8, objective= 'binary:logistic', \n                                                  scale_pos_weight=1,seed=27), \n                        param_grid = param_test3, scoring='accuracy',n_jobs=-1,iid=False, cv=5)\n\ngsearch3.fit(X_train.values,y_train.values)\ngsearch3.best_params_, gsearch3.best_score_\n","e3e55e77":"param_test4 = {'subsample':[0.8,0.9,1.0], 'colsample_bytree':[0.8,0.9,1.0]}\ngsearch4 = GridSearchCV(estimator = XGBClassifier(learning_rate =0.1, n_estimators=80, max_depth=5,\n                                                  min_child_weight=3, gamma=0, subsample=1.0, \n                                                  colsample_bytree=0.9, objective= 'binary:logistic', \n                                                  scale_pos_weight=1,seed=27),\n                        param_grid = param_test4, scoring='accuracy',n_jobs=-1,iid=False, cv=5)\n\ngsearch4.fit(X_train.values,y_train.values)\ngsearch4.best_params_, gsearch4.best_score_\n","47295d2e":"param_test5 = { 'reg_alpha':[0.005,0.01,0.015,0.02]}\ngsearch5 = GridSearchCV(estimator = XGBClassifier(learning_rate =0.1, n_estimators=80, max_depth=5,\n                                                  min_child_weight=3, gamma=0, subsample=1.0, \n                                                  colsample_bytree=0.9,reg_alpha = 0.01\n                                                  objective= 'binary:logistic', \n                                                  scale_pos_weight=1,seed=27), \n                        param_grid = param_test5, scoring='accuracy',n_jobs=-1,iid=False, cv=5)\n\ngsearch5.fit(X_train.values,y_train.values)\ngsearch5.best_params_, gsearch5.best_score_\n","57315762":"param_test5 = { 'reg_alpha':[i\/1000 for i in range(9,12)]}\ngsearch5 = GridSearchCV(estimator = XGBClassifier(learning_rate =0.1, n_estimators=80, max_depth=5,\n                                                  min_child_weight=3, gamma=0, subsample=1.0, \n                                                  colsample_bytree=0.9,reg_alpha = 0.011,\n                                                  objective= 'binary:logistic', \n                                                  scale_pos_weight=1,seed=27), \n                        param_grid = param_test5, scoring='accuracy',n_jobs=-1,iid=False, cv=5)\n\ngsearch5.fit(X_train.values,y_train.values)\ngsearch5.best_params_, gsearch5.best_score_","e1de3047":"param_test5 = {'learning_rate': [0.05,0.1]}\ngsearch5 = GridSearchCV(estimator = XGBClassifier(learning_rate =0.1, n_estimators=80, max_depth=5,\n                                                  min_child_weight=3, gamma=0, subsample=1.0, \n                                                  colsample_bytree=0.9,reg_alpha = 0.011,\n                                                  objective= 'binary:logistic', \n                                                  scale_pos_weight=1,seed=27), \n                        param_grid = param_test5, scoring='accuracy',n_jobs=-1,iid=False, cv=5)\n\ngsearch5.fit(X_train.values,y_train.values)\ngsearch5.best_params_, gsearch5.best_score_","c7692d15":"({'max_depth': 5, 'min_child_weight': 3}, 0.8351439665478277)","e6764395":"({'reg_alpha': 0.011}, 0.8407304877992556)","0bf3016b":"n_estimators: 30","a6b4075c":"'gamma': 0.0","3add8bab":"**Step1: Determine the number of estimators for learning rate and tree_based parameter tuning.**","f4de96f1":"**Step 4: Adjust the subsample and colsample_bytree parameters.**","564a9be5":"**Step6: Reduce the learning rate.**","f29f5a28":"**Gamma parameter tuning.**","c7459cca":"({'colsample_bytree': 0.9, 'subsample': 1.0}, 0.8373596303550587)","0168b800":"({'learning_rate': 0.1}, 0.8407304877992556)","f17e8f57":"({'reg_alpha': 0.01}, 0.8396068922936377)","6a4ed921":"({'n_estimators': 80}, 0.8306494426706699)","59fefcbc":"**Step2: Max_depth and min_weight parameters are tuned.**","bf4ca067":"**Step5: Regularization parameter tuning.**"}}