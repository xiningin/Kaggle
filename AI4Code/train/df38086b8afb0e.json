{"cell_type":{"dee1fcc7":"code","f99e6cf1":"code","32b88aff":"code","3773070e":"code","ffef44f4":"code","0d7c7353":"code","971d508f":"code","e150ba05":"code","f653f6d0":"code","79d8868f":"code","c64ff2f7":"code","528cf58b":"code","2c7e34b4":"code","c43ad65f":"code","f3b87be3":"code","a94b2961":"code","2dee08b5":"code","a0a2d640":"code","9716e219":"code","7b6043b5":"code","fc96b4d0":"code","885ddf70":"code","744b2cdc":"code","8f7a491b":"code","ab83a447":"code","9ecefa35":"code","2397ae3a":"code","bf2dfcc0":"markdown","9f923cce":"markdown","1412341c":"markdown","bf0e01f6":"markdown","152b3bba":"markdown","fd1ea51e":"markdown","aca37c61":"markdown","38ab14d5":"markdown","944ec087":"markdown","590a8fef":"markdown","508c97ab":"markdown","e2a9e900":"markdown","ee65770b":"markdown","5abc1958":"markdown","0162c146":"markdown","76b3dcdb":"markdown","02e80797":"markdown","aed23d68":"markdown"},"source":{"dee1fcc7":"import pandas as pd\nimport numpy as np\nfrom datetime import datetime, timezone\nimport folium\nfrom folium import plugins\nfrom tqdm import tqdm\nimport seaborn as sns\n\ntqdm.pandas()\n# %load_ext nb_black","f99e6cf1":"taxi = pd.read_csv(\n    \"..\/input\/taxi-trajectory-data-extended\/train_extended.csv.zip\",\n    sep=\",\",\n    compression=\"zip\",\n    low_memory=False,\n)","32b88aff":"taxi.head()","3773070e":"taxi.info()","ffef44f4":"taxi.CALL_TYPE.describe()","0d7c7353":"call_type_count = taxi.CALL_TYPE.value_counts(sort=False).sort_index()\ncall_type_count.index = [\"CENTRAL\", \"STAND\", \"OTHER\"]\nprint(call_type_count)","971d508f":"sns.set(rc={\"figure.figsize\": (16, 6)})\nax = sns.barplot(x=call_type_count.index, y=call_type_count.values)","e150ba05":"taxi.ORIGIN_CALL = (\n    taxi.ORIGIN_CALL.fillna(-1)\n    .astype(\"int64\")\n    .astype(str)\n    .replace(\"-1\", np.nan)\n)\norigin_call_cat = taxi.ORIGIN_CALL.astype(\"category\")\norigin_call_cat.describe()","f653f6d0":"origin_call_count = origin_call_cat.value_counts()\npd.cut(origin_call_count, bins=[0, 1, 2, 3, 4, 6, 10, 100, 10000]).value_counts(\n    sort=False\n)","79d8868f":"taxi.ORIGIN_STAND = (\n    taxi.ORIGIN_STAND.fillna(-1)\n    .astype(\"int64\")\n    .astype(str)\n    .replace(\"-1\", np.nan)\n)\norigin_stand_cat = taxi.ORIGIN_STAND.astype(\"category\")\norigin_stand_cat.describe()","c64ff2f7":"origin_stand_count = origin_stand_cat.value_counts(sort=True)\nax = sns.barplot(\n    x=origin_stand_count.index,\n    y=origin_stand_count.values,\n    order=origin_stand_count.index,\n)","528cf58b":"taxi_id_cat = taxi.TAXI_ID.astype(\"category\")\ntaxi_id_cat.describe()","2c7e34b4":"taxi_id_count = taxi_id_cat.value_counts(sort=True)\nax = sns.violinplot(y=taxi_id_count.values, cut=0)","c43ad65f":"taxi.TIMESTAMP.count()","f3b87be3":"datetime.fromtimestamp(taxi.TIMESTAMP.min(), timezone.utc).strftime(\n    \"%Y-%m-%d %H:%M:%S\"\n)","a94b2961":"datetime.fromtimestamp(taxi.TIMESTAMP.max(), timezone.utc).strftime(\n    \"%Y-%m-%d %H:%M:%S\"\n)","2dee08b5":"taxi.DAY_TYPE.describe()","a0a2d640":"taxi.MISSING_DATA.describe()","9716e219":"taxi.POLYLINE.describe()","7b6043b5":"trip_distance_cleaned = taxi.TRIP_DISTANCE[\n    (taxi.TRIP_DISTANCE < taxi.TRIP_DISTANCE.quantile(0.99))\n]\ntrip_distance_cleaned.rename(\"Trip distance\", inplace=True)\nax = sns.violinplot(y=trip_distance_cleaned, cut=0)","fc96b4d0":"trip_time_cleaned = taxi.TRIP_TIME[\n    (taxi.TRIP_TIME < taxi.TRIP_TIME.quantile(0.99))\n]\n\ntrip_time_cleaned.rename(\"Trip time\", inplace=True)\nax = sns.violinplot(y=trip_time_cleaned, cut=0)","885ddf70":"average_speed_cleaned = taxi.AVERAGE_SPEED[\n    (taxi.AVERAGE_SPEED < taxi.AVERAGE_SPEED.quantile(0.99))\n]\n\naverage_speed_cleaned.rename(\"Average speed\", inplace=True)\nax = sns.violinplot(y=average_speed_cleaned, cut=0)","744b2cdc":"top_speed_cleaned = taxi.TOP_SPEED[\n    (taxi.TOP_SPEED < taxi.TOP_SPEED.quantile(0.99))\n]\n\ntop_speed_cleaned.rename(\"Top speed\", inplace=True)\nax = sns.violinplot(y=top_speed_cleaned, cut=0)","8f7a491b":"top_speed_cleaned2 = taxi.TOP_SPEED[(taxi.TOP_SPEED < 120)]\n\ntop_speed_cleaned2.rename(\"Top speed\", inplace=True)\nax = sns.violinplot(y=top_speed_cleaned2, cut=0)","ab83a447":"trip_distance_time = taxi[[\"TRIP_DISTANCE\", \"TRIP_TIME\"]]\ntrip_distance_time = trip_distance_time[trip_distance_time.TRIP_DISTANCE < 10]\ntrip_distance_time = trip_distance_time[trip_distance_time.TRIP_TIME < 20]\ntrip_distance_time.TRIP_DISTANCE.rename(\"Trip distance [km]\", inplace=True)\ntrip_distance_time.TRIP_TIME.rename(\"Top Trip time [min]\", inplace=True)\nax = sns.jointplot(\n    x=\"TRIP_DISTANCE\", y=\"TRIP_TIME\", data=trip_distance_time, kind=\"kde\"\n)","9ecefa35":"taxi_start = taxi.TRIP_START.progress_apply(lambda x: eval(x)[::-1])","2397ae3a":"trip_start_map = folium.Map(location=[41.1579605, -8.629241], zoom_start=12)\nplugins.HeatMap(taxi_start, radius=10).add_to(trip_start_map)\ntrip_start_map","bf2dfcc0":"## Day type\n\nDAYTYPE: (char) It identifies the daytype of the trip\u2019s start.\n\nIt assumes one of three possible values:\n\n* \u2018B\u2019 if this trip started on a holiday or any other special day (i.e. extending holidays, floating holidays, etc.);\n* \u2018C\u2019 if the trip started on a day before a type-B day;\n* \u2018A\u2019 otherwise (i.e. a normal day, workday or weekend).","9f923cce":"# Load data","1412341c":"## Origin call\n\nORIGIN_CALL: (integer) It contains an unique identifier for each phone number which was used to demand, at least, one service.\n\nIt identifies the trip\u2019s customer if CALL_TYPE=\u2019A\u2019. Otherwise, it assumes a NULL value;","bf0e01f6":"## Taxi ID\n\nTAXI_ID: (integer): It contains an unique identifier for the taxi driver that performed each trip;","152b3bba":"## Trip distance\n\nTRIP_DISTANCE: (float): It contains the total geodesic distance calculated from all consecutive pairs of coordinates.","fd1ea51e":"## Polyline\n\nPOLYLINE: (String): It contains a list of GPS coordinates (i.e. WGS84 format) mapped as a string.\n\nThe beginning and the end of the string are identified with brackets (i.e. [ and ], respectively).\n\nEach pair of coordinates is also identified by the same brackets as [LONGITUDE, LATITUDE].\n\nThis list contains one pair of coordinates for each 15 seconds of trip. \n\nThe last list item corresponds to the trip\u2019s destination while the first one represents its start;","aca37c61":"## Relation between trip distance and trip time","38ab14d5":"## Trip start\nTRIP_START is in string format and folium heatmap has [latitude, longitude]. Then variable has to be evaluated and then, flipped.","944ec087":"## Average speed\n\nAVERAGE_SPEED: (float): It contains the average speed calculated from trip distance and trip time.","590a8fef":"# Descriptive analysis ","508c97ab":"## Timestamp\n\nTIMESTAMP: (integer) Unix Timestamp (in seconds). It identifies the trip\u2019s start; ","e2a9e900":"Impossible speeds are very frequent.\n\nThe most probable is that not all pair of coordinates have 15 seconds of difference.\n\nThe causes could be:\n\n* Holes exists, then the separation between two consecutive pair of coordinates could be a multiple of 15 seconds. And the speed will be a multiple of the real speed for that section.\n* The last pair of coordinates are saved when the trip is finished. Then the difference in time could be between 0 and 15 seconds. And the speed could be between the real speed and infinite.\n\nThere's a main peak in 64 km\/h and two peaks in 132 km\/h (2), 205 km\/h (3.2) and 245 km\/h (3.8). If they are holes, it's expected that the other peaks will be the convolution of the main peak in other octaves.\n\nThe average speed is not specially affected, as is calculated as the total distance and total time, and not as the average of all intermediate speeds.\n\n    TODO: Do some research about the cause of incongruent speeds.","ee65770b":"## Trip time\n\nTRIP_TIME: (float): It contains the total time calculated from the number of pairs of coordinates, knowing that there is 15 seconds of difference between each pair of coordinates","5abc1958":"## Missing data\n\nMISSING_DATA: (Boolean) It is FALSE when the GPS data stream is complete and TRUE whenever one (or more) locations are missing","0162c146":"# Import libraries","76b3dcdb":"## Call type\n\nCALL_TYPE: (char) It identifies the way used to demand this service.\n\nIt may contain one of three possible values:\n\n* \u2018A\u2019 if this trip was dispatched from the central;\n* \u2018B\u2019 if this trip was demanded directly to a taxi driver on a specific stand;\n* \u2018C\u2019 otherwise (i.e. a trip demanded on a random street).","02e80797":"## Origin stand\n\nORIGIN_STAND: (integer): It contains an unique identifier for the taxi stand.\n\nIt identifies the starting point of the trip if CALL_TYPE=\u2019B\u2019. Otherwise, it assumes a NULL value;","aed23d68":"## Top speed\n\nTOP_SPEED: (float): It contains the top speed calculated from distances and time of all pairs of coordinates."}}