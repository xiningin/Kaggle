{"cell_type":{"517e2791":"code","622d2afc":"code","9b598be0":"code","19587a09":"code","1a3f43db":"code","b2096ad6":"code","4cd2b893":"code","788204f7":"code","a5035a08":"code","11ae2502":"code","f0cc8bb0":"code","04431de3":"code","fd0a3602":"code","8afe283c":"code","713fe4c4":"code","62f465b5":"code","55e722a5":"code","4e82465a":"code","6c2390b8":"code","b15344ca":"code","0a4da88e":"code","34052112":"code","6c8d5e76":"code","1c115bb1":"code","5f5991a7":"code","433d6abf":"code","4465d1b5":"code","bd1ca607":"code","699567b7":"code","eb98b56e":"code","a114cdc9":"code","2b79a551":"code","db3fafac":"code","0a4654c4":"code","5dcfe2fa":"code","8994ecef":"code","a426c8f0":"code","a50289c2":"code","ec2321cc":"code","71ee4196":"markdown","c010f060":"markdown","19511904":"markdown","11953e51":"markdown","f2d5d211":"markdown","62769771":"markdown","ef78a683":"markdown","6c6968e0":"markdown","2e7cb18b":"markdown","f10230bd":"markdown","172d078e":"markdown","7be0c015":"markdown","5bc8288f":"markdown","df3b38d0":"markdown","5d842f3f":"markdown","d1b89af2":"markdown","54461191":"markdown","f636b45c":"markdown","48f6fef9":"markdown","47994bef":"markdown","291ed2bc":"markdown","d13e441d":"markdown","4012ba2c":"markdown"},"source":{"517e2791":"import pandas as pd\nimport numpy as np\nimport keras\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)","622d2afc":"df = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')","9b598be0":"df.head()","19587a09":"df.shape","1a3f43db":"df.isnull().sum()","b2096ad6":"df.info()","4cd2b893":"data = df.iloc[:, :-1]\ntargets = df.iloc[:,-1]","788204f7":"print(data.shape)\nprint(targets.shape)","a5035a08":"from sklearn.model_selection import train_test_split","11ae2502":"train_data, test_data, train_targets, test_targets = train_test_split(data, targets, test_size=.3)","f0cc8bb0":"train_data, validation_data, train_targets, validation_targets = train_test_split(train_data, train_targets, test_size=.2)","04431de3":"mean = np.mean(train_data)\nstd = np.std(train_data)\n\n\ntrain_data -= mean\ntrain_data \/= std\n\nvalidation_data -= mean\nvalidation_data \/= std\n\ntest_data -= mean\ntest_data \/= std","fd0a3602":"from keras import models, layers","8afe283c":"model = models.Sequential()\n\nmodel.add(layers.Dense(10, input_shape=(train_data.shape[1],), activation='relu'))\n\nmodel.add(layers.Dense(8, activation='relu'))\n\nmodel.add(layers.Dense(6, activation='relu'))\n\nmodel.add(layers.Dense(1, activation='sigmoid'))","713fe4c4":"from sklearn.metrics import classification_report\n\nmodel.compile(optimizer='rmsprop', loss='binary_crossentropy')","62f465b5":"history = model.fit(train_data, train_targets, epochs=100, batch_size=64)","55e722a5":"val_predictions = model.predict(validation_data)","4e82465a":"val_predictions","6c2390b8":"preds = np.around(val_predictions)","b15344ca":"preds","0a4da88e":"print(classification_report(validation_targets, preds))","34052112":"test_preds = model.predict(test_data)","6c8d5e76":"test_preds.shape","1c115bb1":"test_preds = test_preds.reshape(85443)","5f5991a7":"test_preds = np.round(test_preds)","433d6abf":"print(classification_report(test_targets, test_preds))","4465d1b5":"output_df = pd.DataFrame({'Actual': test_targets, 'Prediction': test_preds})","bd1ca607":"output_df.head()","699567b7":"output_df.shape","eb98b56e":"filt = (output_df.loc[:, 'Actual'] == output_df.loc[:, 'Prediction'])\n\noutput_df[filt].shape","a114cdc9":"# print(f'Accuracy is {(output_df[filt].shape[0]\/output_df.shape[0])*100}%')","2b79a551":"from sklearn.metrics import roc_auc_score\n\nroc_auc_score(test_targets, test_preds)","db3fafac":"train_targets.value_counts()","0a4654c4":"weights = {\n    0:1,\n    1:566\n}","5dcfe2fa":"model = models.Sequential()\n\nmodel.add(layers.Dense(10, input_shape=(train_data.shape[1],), activation='relu'))\n\nmodel.add(layers.Dense(8, activation='relu'))\n\nmodel.add(layers.Dense(6, activation='relu'))\n\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='rmsprop', loss='binary_crossentropy')\n\n# CHANGE\nhistory = model.fit(train_data, train_targets, epochs=100, validation_data=(validation_data, validation_targets), class_weight=weights)","8994ecef":"predictions = model.predict(test_data)","a426c8f0":"from sklearn.metrics import roc_auc_score\n\nroc_auc_score(test_targets, predictions)","a50289c2":"predictions = np.around(predictions)","ec2321cc":"print(classification_report(test_targets, predictions))","71ee4196":"### precision is 0.76, which is less than before.","c010f060":"So, this is an excellent classifier according to this post [here](https:\/\/www.researchgate.net\/post\/What-is-the-value-of-the-area-under-the-roc-curve-AUC-to-conclude-that-a-classifier-is-excellent#:~:text=for%20Atomic%20Research-,What%20is%20the%20value%20of%20the%20area%20under%20the%20roc,1%20denotes%20an%20excellent%20classifier.)","19511904":"# Compilation Step","11953e51":"# Standardizing Data","f2d5d211":"### Precision is 0.87.","62769771":"# Description about dataset::","ef78a683":"There are 281 1's (frauds) and 159210 0's (non-frauds)\n\n159210\/281 = 566\n\n0's are 566 times more than 1's\n\nwe can assign custom weights to NN accordingly","6c6968e0":"### precision is 0.86","2e7cb18b":"# Training the model","f10230bd":"# Checking Missing Values","172d078e":"# Credit Card Fraud Detection::","7be0c015":"# Extra Work - Imbalanced Data\n\n-> finding ROC AUC Score","5bc8288f":"-> Weighted Neural Networks","df3b38d0":"# Task::","5d842f3f":"The datasets contains transactions made by credit cards in September 2013 by european cardholders.\nThis dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions.\n\nIt contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, we cannot provide the original features and more background information about the data. Features V1, V2, \u2026 V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-senstive learning. \n\n\n### Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.","d1b89af2":"# By using Cost Sensitive\/ Weighted Neural Network, the ROC AUC Score is improved from 0.85 to 0.94 (outstanding classifier)","54461191":"# Splitting Data","f636b45c":"# Model : input Layer (No. of features ), 3 hidden layers including 10,8,6 unit & Output Layer with activation function relu\/tanh (check by experiment).","48f6fef9":"## Identify fraudulent credit card transactions.","47994bef":"# How many correct predictions?","291ed2bc":"1.Load Data\n\n2.Check Missing Values ( If Exist ; Fill each record with mean of its feature )\n\n3.Standardized the Input Variables. \n\n4.Split into 50% Training(Samples,Labels) , 30% Test(Samples,Labels) and 20% Validation Data(Samples,Labels).\n\n5.Model : input Layer (No. of features ), 3 hidden layers including 10,8,6 unit & Output Layer with activation function relu\/tanh (check by experiment).\n\n6.Compilation Step (Note : Its a Binary problem , select loss , metrics according to it)\n\n7.Train the Model with Epochs (100).\n\n8.If the model gets overfit tune your model by changing the units , No. of layers , epochs , add dropout layer or add Regularizer according to the need .\n\n9.Prediction should be > 92%\n10.Evaluation Step\n11Prediction\n","d13e441d":"### data, data, targets, targets","4012ba2c":"# WORKFLOW :"}}