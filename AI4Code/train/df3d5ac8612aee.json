{"cell_type":{"b5ddb36e":"code","a375b80d":"code","bcb95c8e":"code","085d54ec":"code","9f787d8a":"code","daf4f2c1":"code","36f6a2f4":"code","b2bcfafa":"code","bbaaffe8":"code","d8902fbc":"code","2d431a64":"code","aecb96c1":"code","c182a4e6":"code","a2b8f481":"code","00aa462c":"code","5a22e421":"code","1a4c7f12":"markdown","2816b05e":"markdown","73dd0760":"markdown","4fa30433":"markdown","832d4b6f":"markdown","3ed177da":"markdown","c904a440":"markdown","7d59586a":"markdown","ffc52297":"markdown","e82f7588":"markdown","e43286b1":"markdown","a23339f6":"markdown","63f2e046":"markdown","0c6707d6":"markdown","6ab410ae":"markdown"},"source":{"b5ddb36e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport os, sys\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom IPython.display import HTML, display\nimport urllib\nfrom collections import Counter\nimport sqlite3 \nimport seaborn as sns\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n","a375b80d":"# Creating a function to read in the required files\ndef read_csv(name, **kwargs):\n    df = pd.read_csv(f'..\/input\/formula-1-world-championship-1950-2020\/{name}', na_values=r'\\N', **kwargs)\n    return df\n\n","bcb95c8e":"circuits = read_csv('circuits.csv', index_col=0)\nconstructor_Results = read_csv('constructor_results.csv', index_col=0)\nconstructors = read_csv('constructors.csv', index_col=0)\nconstructor_Standings = read_csv('constructor_standings.csv', index_col=0)\ndrivers = read_csv('drivers.csv', index_col=0)\ndriver_Standings = read_csv('driver_standings.csv', index_col=0)\nlap_Times = read_csv('lap_times.csv')\npit_Stops = read_csv('pit_stops.csv')\nqualifying = read_csv('qualifying.csv', index_col=0)\nraces = read_csv('races.csv', index_col=0)\nresults = read_csv('results.csv', index_col=0)\nseasons = read_csv('seasons.csv', index_col=0)\nstatus = read_csv('status.csv', index_col=0)","085d54ec":"lap_Times['milliseconds'] = lap_Times['milliseconds'].astype(int)\nlap_Times.info()","9f787d8a":"conn = sqlite3.connect(\"f1.db\")\ncursor = conn.cursor\n","daf4f2c1":"circuits.to_sql(\"circuits\", con = conn, if_exists='replace')\nconstructor_Results.to_sql(\"constructor_results\", con = conn, if_exists='replace')\nconstructors.to_sql(\"constructors\", con = conn, if_exists='replace')\nconstructor_Standings.to_sql(\"constructor_standings\", con = conn, if_exists='replace')\ndrivers.to_sql(\"drivers\", con = conn, if_exists='replace')\ndriver_Standings.to_sql(\"driver_standings\", con = conn, if_exists='replace')\nlap_Times.to_sql(\"lap_times\", con = conn, if_exists='replace')\npit_Stops.to_sql(\"pit_stops\", con = conn, if_exists='replace')\nqualifying.to_sql(\"qualifying\", con = conn, if_exists='replace')\nraces.to_sql(\"races\", con = conn, if_exists='replace')\nresults.to_sql(\"results\", con = conn, if_exists='replace')\nseasons.to_sql(\"seasons\", con = conn, if_exists='replace')\nstatus.to_sql(\"status\", con = conn, if_exists='replace')","36f6a2f4":"#circuits.head()\n#constructorResults.head()\n#constructors.head()\n#constructorStandings.head()\n#drivers.head()\n#driverStandings.head()\n#lapTimes.head()\n#pitStops.head()\n#qualifying.head()\n#races.head()\n#results.head()\n#seasons.head()\n#status.head()","b2bcfafa":"track_num = pd.read_sql_query(\"\"\"\n                    SELECT location, country, COUNT(location) as Races_hosted FROM circuits as C\n                    JOIN races as R\n                    ON R.circuitId = C.circuitId\n                    WHERE date <=\"2022-03-01\"\n                    GROUP BY location\n                    ORDER BY Races_hosted desc\n                    limit 10\n                    \"\"\", conn)\n\npx.bar(track_num, x='location', y='Races_hosted', title = 'Number of races hosted per track', color = 'Races_hosted',)\n\n","bbaaffe8":"country_num = pd.read_sql_query(\"\"\"\n                    SELECT country, COUNT(country) as Races_hosted FROM circuits as C\n                    JOIN races as R\n                    ON R.circuitId = C.circuitId\n                    WHERE date <=\"2022-03-01\"\n                    GROUP BY country\n                    ORDER BY Races_hosted desc\n                    limit 100\n                    \"\"\", conn)\n","d8902fbc":"px.bar(country_num, x='country', y='Races_hosted', title = 'Number of races hosted per country', color = 'Races_hosted',)","2d431a64":"df = pd.read_sql_query(\"\"\"\n                    SELECT D.driverId, forename, surname, code, SUM(points) as Total_points\n                    FROM drivers as D\n                    JOIN results as Re \n                    ON D.driverId = Re.driverId\n                    WHERE code !=\"None\"\n                    GROUP BY code\n                    ORDER BY Total_points desc\n                    \n                    limit 10\"\"\", conn)\ndf","aecb96c1":"won_races = pd.read_sql_query(\"\"\"\n                    SELECT C.name, COUNT(raceId) as Number_of_wins FROM constructors as C\n                    JOIN results as R\n                    ON \n                    R.constructorId = C.constructorId\n                    WHERE r.position = 1\n                    GROUP BY C.name\n                    ORDER by Number_of_wins desc\n                    limit 10\"\"\", conn)\n\n","c182a4e6":"px.bar(won_races, x='name', y='Number_of_wins', title = 'Team with highest number of race wins',)","a2b8f481":"# This code selects first the total points for each constructor per race as sub_q1, it then selects the total points per year for each constructor based off sub_s1 and puts it in sub_q2. \n# Finally we select the contructor with the most points for each year from sub_q2 and return the result to give a list of which contructors had the most points each year.\n\n\nchampionship_wins = pd.read_sql_query(\"\"\"\n\n                WITH Season_total AS (\n                \n                SELECT sub_q2.constructorId, C.name as winner, sub_q2.year, MAX(sub_q2.points) as Season_points\n                FROM\n                (SELECT sub_q1.constructorId, sub_q1.year, SUM(sub_q1.pts) as points\n                FROM\n                (SELECT Re.raceId, Re.constructorId,R.year,SUM(Re.points) as pts \n                FROM results as Re\n                JOIN races as R \n                ON Re.raceId=R.raceId\n                GROUP BY Re.raceId, Re.constructorId) as sub_q1\n                GROUP BY sub_q1.constructorId, sub_q1.year) as sub_q2\n                JOIN constructors as C\n                ON\n                sub_q2.constructorId = C.constructorId\n                GROUP BY sub_q2.year\n                Order by sub_q2.year desc\n                ) \n                \n                SELECT winner, COUNT(Season_points) as Season_wins, year as most_recent_win\n                FROM Season_total\n                GROUP BY winner\n                ORDER BY Season_wins desc, year desc\n                \n                \n                \"\"\",conn)\n\nchampionship_wins","00aa462c":"\npx.bar(championship_wins, x='winner', y='Season_wins', title = 'Constructor with the highest number of championship wins', color = \"most_recent_win\")","5a22e421":"# Select all lap times of each race, group by year\n# Select min lap time from this for each race, group by year\n# Select min lap time from this group for fastest lap of all time\nlap_records = pd.read_sql_query(\"\"\"\n                    WITH Fastest_laps AS (\n                    \n                    SELECT \n                        sq2.raceId, \n                        sq2.name, \n                        MIN(sq2.time) as time,  \n                        sq2.year\n                    FROM\n                        (SELECT \n                            sq1.raceId, \n                            sq1.name, \n                            milliseconds as Time, \n                            sq1.year \n                        FROM\n                            (SELECT \n                                R.raceId, \n                                R.name, \n                                Lt.milliseconds, R.year\n                            FROM \n                                lap_times as Lt\n                                JOIN \n                                races as R\n                                ON \n                                Lt.raceId = R.raceId) as sq1\n                            ) as sq2 \n                            GROUP BY  sq2.name\n                    \n                    )\n                    \n                    SELECT \n                        name as \"Grand Prix\", \n                        ((MIN(time\/60000%100)) || \":\" ||  ((MIN(time%(1000*60*60))%(1000*60))\/1000) || \":\" || ((MIN(time%(1000*60*60))%(1000*60))%1000)) as \"Lap record\" \n                    FROM\n                        Fastest_laps\n                  \n                    GROUP BY name\n                    \n                    \"\"\",conn)\nlap_records","1a4c7f12":"### Plotting the above to show total championship victories","2816b05e":"As might be expected due to his success and longevity, Hamilton has scored the most points. We see other expected names, but also see an issue here with the data - the way points are scored in f1 has changed over time. This means that Michael Schumacher only ranks 7 on this table, which is far lower than expected as he is tied with Hamilton for the most championship wins. \n\nWe will compare number of points scoring races and wins to try to better understand the true picture of success in f1, and an adjusted scoring feature will need to be created to accurately do a like-like comparison of scoring. ","73dd0760":"First we read in the data from the dataset","4fa30433":"### The aim of this workbook is to perform some analysis on Formula 1 Data in both SQL and Python. It will mostly consist of EDA, with some possible modelling done later in the project.\n### Note that SQL is not required for this analysis, but is being used as i want to improve my skills and familiarity with SQL.\n\nIntially, i aim to answer a number of questions:\n\n* Which country hosted the most races? - Done\n* Which city has hosted the most races? - Done\n* Which driver has scored the most points? - Need to factor in change in point scoring system for this. Can be done at graphing stage.\n* Which team has won the most championhsips? - Done\n* The top 5 teams that won the most races - Done\n* Which team has had the most drivers?\n* Split of top 5 points total and 6-10 points total over time (hoping to compare equality of teams)\n* What is the fastest lap for each track? - Done, need to plot in some way\n* Possibly some breakdown stats for individual \"Era's\"\n* Possibly some information about success of a driver in terms of win ratio etc\n\nModelling\n* Attempt at predicting liklihood of winning a race based on which other races were won in the season\n* Which  3 races is it most important to win if you want to win the title?\n* Attempt at predicting the 2021 season based on past data for each track\n\n\n\n\n\n\n","832d4b6f":"### Finding the track that has hosted the most races\n","3ed177da":"### Fastest lap of each track","c904a440":"### ","7d59586a":"When attempting this, I realised that the lap_times table has two columns, time and milliseconds. To do any sort of lap time analysis, the milliseconds column should be used. I converted to float and then split out into a minutes, seconds and milliseconds column that was then concatenated to output the lap times.\n\nThere is probably a better way of doing this, but it does at least work. I still have the issue of needing preceeding 0s not showing, e.g a time of 1:05.019 would show as 1:5:19. This effect is seen in Azerbajan and Malaysia for example\n\nI also need to add in the driver name and year of records","ffc52297":"### Which team has won the most races?","e82f7588":" Here we notice that 2022 data is included, so all data will be filtered to show only races that have already been held","e43286b1":"Connecting data to SQL databases\n\n","a23339f6":"### Which driver has scored most points in f1 history?","63f2e046":"Reading in the data","0c6707d6":"### Which team has won the most championships?","6ab410ae":"### Finding the country that has hosted the most races"}}