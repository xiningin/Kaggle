{"cell_type":{"84ff47cd":"code","359d2f7b":"code","a7ca6c7b":"code","cc228a3b":"code","bcadab4e":"code","effeb9fa":"code","aee5dcd1":"code","e43d3158":"code","59acbcf9":"code","7c652a4a":"code","80606776":"code","46530af0":"markdown","f403a70f":"markdown","a8bc253b":"markdown","778111c0":"markdown","f63cc5e1":"markdown","23d5db12":"markdown","5ec8f4c1":"markdown","ba93440a":"markdown","b1bd7c54":"markdown"},"source":{"84ff47cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","359d2f7b":"raw_data = pd.read_csv(\"\/kaggle\/input\/voicegender\/voice.csv\")\nraw_data","a7ca6c7b":"raw_data.label=[1 if each=='male' else 0 for each in raw_data.label]\ny = raw_data.label.values\nx = raw_data.drop([\"label\"],axis=1)\ny","cc228a3b":"x = (x-np.min(x))\/(np.max(x)-np.min(x)).values\nx","bcadab4e":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T","effeb9fa":"def init(dimension):\n    w = np.full((dimension,1),0.01)\n    b=0.0\n    return w,b\n\ndef sigmoid(z):\n    y_head = 1\/(1+np.exp(-z))\n    return y_head\n","aee5dcd1":"def forward_backward_prop(w,b,x_train,y_train):\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -(y_train*np.log(y_head)+(1-y_train)*np.log(1-y_head))\n    cost = np.sum(loss)\/(x_train.shape[1])\n    \n    weight = (np.dot(x_train,(y_head-y_train).T))\/x_train.shape[1]\n    bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    \n    grad = {\"weight\":weight,\"bias\":bias}\n    \n    return cost,grad","e43d3158":"def update(w,b,x_train,y_train,learning_rate,num):\n    cost_list=[]\n    index=[]\n    for i in range(num):\n        cost , grad = forward_backward_prop(w,b,x_train,y_train)\n        w = w - learning_rate*grad[\"weight\"]    \n        b = b - learning_rate*grad[\"bias\"]\n        if i % 100 == 0:\n            cost_list.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    parameters={\"weight\":w,\"bias\":b}\n    plt.plot(index,cost_list)\n    plt.xlabel(\"Num of iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters,grad,cost_list","59acbcf9":"def predict(w,b,x_test):\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    prediction = np.zeros((1,x_test.shape[1]))\n    for i in range(z.shape[1]):\n        if(z[0,i]<=0.5):\n            prediction[0,i]=0\n        else:\n            prediction[0,i]=1\n    return prediction","7c652a4a":"def logistic_regression(x_train,y_train,x_test,y_test,learning_rate,num):\n    w,b = init(x_train.shape[0])\n    parameters,grad,cost_list = update(w,b,x_train,y_train,learning_rate,num)\n    \n    prediction = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(prediction - y_test)) * 100))","80606776":"logistic_regression(x_train,y_train,x_test,y_test,learning_rate=0.1,num=5000)","46530af0":"Let's import our data , and let's look into it.","f403a70f":"As you can see my labels are male and female , first i need to split my features and label then encode it.","a8bc253b":"Now i will split my data for training and testing.","778111c0":"I need to write my forward and backward propagation function","f63cc5e1":"It's time to start defining my functions.First of all i need to initialize my weights and bias, then i will need a sigmoid function.","23d5db12":"I need a predict function for testing purposes.","5ec8f4c1":"I did forward and backward propagataion and now i got my costs and gradients , now i need to update my weights and biases.","ba93440a":"Let's put it all together ! ","b1bd7c54":"Normalization."}}