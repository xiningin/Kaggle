{"cell_type":{"404f5814":"code","a1f2ee6b":"code","6f420999":"code","db5af074":"code","6aa6c4c3":"code","0eee6ec8":"code","ef583634":"code","086457a8":"code","b5196ee8":"code","09c13351":"code","c3bd2053":"code","aa093d5e":"code","46e1496e":"code","45a52b04":"code","e132cc31":"markdown","3a4a4464":"markdown","de04adc2":"markdown","d17ff7c5":"markdown","f7ab6149":"markdown","f11e331e":"markdown","d42ba025":"markdown","67c07922":"markdown","69dc97ad":"markdown","442077dc":"markdown","af3d81e7":"markdown","29f32788":"markdown","07d4e5f2":"markdown","36b05791":"markdown","9cb44c61":"markdown","4555b333":"markdown","6c749102":"markdown","7d50adb3":"markdown","cbd47894":"markdown"},"source":{"404f5814":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport gc\ngc.enable()\nimport time\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","a1f2ee6b":"#print(os.listdir(\"..\/input\"))\n!ls -GFlash  ..\/input","6f420999":"%%time\n# import Dataset to play with it\ntrain_identity= pd.read_csv(\"..\/input\/train_identity.csv\", index_col='TransactionID')\ntrain_transaction= pd.read_csv(\"..\/input\/train_transaction.csv\", index_col='TransactionID')\ntest_identity= pd.read_csv(\"..\/input\/test_identity.csv\", index_col='TransactionID')\ntest_transaction = pd.read_csv('..\/input\/test_transaction.csv', index_col='TransactionID')\nprint (\"Done!\")","db5af074":"print('Shape of Data:')\nprint(train_transaction.shape)\nprint(test_transaction.shape)\nprint(train_identity.shape)\nprint(test_identity.shape)","6aa6c4c3":"# Creat our train & test dataset\n#%%time\ntrain = train_transaction.merge(train_identity, how='left', left_index=True, right_index=True)\ntest = test_transaction.merge(test_identity, how='left', left_index=True, right_index=True)","0eee6ec8":"del train_identity,train_transaction,test_identity, test_transaction","ef583634":"train.info()","086457a8":"test.info()","b5196ee8":"#Based on this great kernel https:\/\/www.kaggle.com\/arjanso\/reducing-dataframe-memory-size-by-65\ndef reduce_mem_usage(df):\n    start_mem_usg = df.memory_usage().sum() \/ 1024**2 \n    print(\"Memory usage of properties dataframe is :\",start_mem_usg,\" MB\")\n    NAlist = [] # Keeps track of columns that have missing values filled in. \n    for col in df.columns:\n        if df[col].dtype != object:  # Exclude strings            \n            # Print current column type\n            print(\"******************************\")\n            print(\"Column: \",col)\n            print(\"dtype before: \",df[col].dtype)            \n            # make variables for Int, max and min\n            IsInt = False\n            mx = df[col].max()\n            mn = df[col].min()\n            print(\"min for this col: \",mn)\n            print(\"max for this col: \",mx)\n            # Integer does not support NA, therefore, NA needs to be filled\n            if not np.isfinite(df[col]).all(): \n                NAlist.append(col)\n                df[col].fillna(mn-1,inplace=True)  \n                   \n            # test if column can be converted to an integer\n            asint = df[col].fillna(0).astype(np.int64)\n            result = (df[col] - asint)\n            result = result.sum()\n            if result > -0.01 and result < 0.01:\n                IsInt = True            \n            # Make Integer\/unsigned Integer datatypes\n            if IsInt:\n                if mn >= 0:\n                    if mx < 255:\n                        df[col] = df[col].astype(np.uint8)\n                    elif mx < 65535:\n                        df[col] = df[col].astype(np.uint16)\n                    elif mx < 4294967295:\n                        df[col] = df[col].astype(np.uint32)\n                    else:\n                        df[col] = df[col].astype(np.uint64)\n                else:\n                    if mn > np.iinfo(np.int8).min and mx < np.iinfo(np.int8).max:\n                        df[col] = df[col].astype(np.int8)\n                    elif mn > np.iinfo(np.int16).min and mx < np.iinfo(np.int16).max:\n                        df[col] = df[col].astype(np.int16)\n                    elif mn > np.iinfo(np.int32).min and mx < np.iinfo(np.int32).max:\n                        df[col] = df[col].astype(np.int32)\n                    elif mn > np.iinfo(np.int64).min and mx < np.iinfo(np.int64).max:\n                        df[col] = df[col].astype(np.int64)    \n            # Make float datatypes 32 bit\n            else:\n                df[col] = df[col].astype(np.float32)\n            \n            # Print new column type\n            print(\"dtype after: \",df[col].dtype)\n            print(\"******************************\")\n    # Print final result\n    print(\"___MEMORY USAGE AFTER COMPLETION:___\")\n    mem_usg = df.memory_usage().sum() \/ 1024**2 \n    print(\"Memory usage is: \",mem_usg,\" MB\")\n    print(\"This is \",100*mem_usg\/start_mem_usg,\"% of the initial size\")\n    return df, NAlist","09c13351":"train, NAlist = reduce_mem_usage(train)\nprint(\"_________________\")\nprint(\"\")\nprint(\"Warning: the following columns have missing values filled with 'df['column_name'].min() -1': \")\nprint(\"_________________\")\nprint(\"\")\nprint(NAlist)","c3bd2053":"test, NAlist = reduce_mem_usage(test)\nprint(\"_________________\")\nprint(\"\")\nprint(\"Warning: the following columns have missing values filled with 'df['column_name'].min() -1': \")\nprint(\"_________________\")\nprint(\"\")\nprint(NAlist)","aa093d5e":"train.info()","46e1496e":"test.info()","45a52b04":"train.to_csv('train.csv', index=False)\ntest.to_csv('test.csv', index=False)","e132cc31":"Then we shoud just delete some dt!","3a4a4464":"### Before Reducing Memory\nWhen I have just read the data set and join them!I saw that the status of my RAM is more than 9GB!","de04adc2":"## Import Dataset to play with it","d17ff7c5":"What do we have in input","f7ab6149":"\n___MEMORY USAGE  BEFORE AND AFTER COMPLETION FOR TEST:___\n<br\/>\nMemory usage before running this script : 1693.867820739746  MB\n<br\/>\nMemory usage after running this script: ~ **480  MB**\n<br\/>\nThis is ~  28  % of the initial size","f11e331e":"# IEEE Reducing  Memory Size\nIt is necessary that after using this code, carefully check the output results for each column.","d42ba025":"![ram2](http:\/\/s8.picofile.com\/file\/8366932526\/ram2.png)\n3GB of RAM has got free! now just check the size of our train & test","67c07922":"Reducing for test data set:","69dc97ad":"## Objective of the Kernel: Save Time & Memory\nIf you would like to create a kernel for this Competition. this is a good idea to add this kernel as a **data set** to your own kernel. due to you can save your time and memory.","442077dc":"___MEMORY USAGE  BEFORE AND AFTER COMPLETION FOR TRAIN:___\n<br\/>\nMemory usage before running this script : 1975.3707885742188  MB\n<br\/>\nMemory usage after running this script  : ~ **480  MB**\n<br\/>\nThis is ~ 28 % of the initial size","af3d81e7":"Check again! our RAM. 2 GB has got free!","29f32788":"![ram1](http:\/\/s9.picofile.com\/file\/8366931918\/ram1.png)","07d4e5f2":"![ram3](http:\/\/s8.picofile.com\/file\/8366940442\/ram3.png)","36b05791":"## How about other ways!\nI have used this [great kernel](https:\/\/www.kaggle.com\/arjanso\/reducing-dataframe-memory-size-by-65) but there are also other ways such as:\n1. https:\/\/www.dataquest.io\/blog\/pandas-big-data\/\n2. [optimizing-the-size-of-a-pandas-dataframe-for-low-memory-environment](https:\/\/medium.com\/@vincentteyssier\/optimizing-the-size-of-a-pandas-dataframe-for-low-memory-environment-5f07db3d72e)\n3. [pandas-making-dataframe-smaller-faster](https:\/\/www.ritchieng.com\/pandas-making-dataframe-smaller-faster\/)","9cb44c61":"Reducing for train data set:","4555b333":"## Add this kernel as Dataset\nNow we just save our output as csv files. then you can simply add them to your own kernel.you will save time and  memory.","6c749102":"## Import","7d50adb3":"### Creat our train & test dataset","cbd47894":" #  <div style=\"text-align: center\">  Reducing  Memory Size for IEEE <\/div> \n <div style=\"text-align:center\">  <\/div>\n![mem](http:\/\/s8.picofile.com\/file\/8367719234\/mem.png) \n<div style=\"text-align:center\"> last update: <b> 19\/07\/2019<\/b><\/div>\n"}}