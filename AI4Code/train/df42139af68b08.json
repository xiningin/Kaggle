{"cell_type":{"160045f4":"code","d0e61ec1":"code","10b10d05":"code","821cb4a9":"code","77cafc70":"code","5b49046d":"code","3e6cddc0":"code","a3396365":"code","0feb4797":"code","1ab0cf3a":"code","f9f06f4b":"code","3b2fafe6":"code","0b02cb99":"code","258b811b":"code","23bc3fd6":"code","366f1fe2":"code","6b5d934c":"code","374421b5":"markdown","bbeaacc3":"markdown","d5afb383":"markdown","5ab8ebe4":"markdown","27d140e1":"markdown"},"source":{"160045f4":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d0e61ec1":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n\n!pip install catboost","10b10d05":"df_iris = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\ndf_iris.drop([\"Id\"], axis=1, inplace=True)\ndf_iris.head()","821cb4a9":"df_iris.shape","77cafc70":"df_iris.info()","5b49046d":"df_iris.describe()","3e6cddc0":"plt.rcParams[\"figure.figsize\"] = (12, 6)\nsns.scatterplot(\n    x=\"SepalLengthCm\",\n    y=\"SepalWidthCm\",\n    hue=\"Species\",\n    size=\"Species\",\n    data=df_iris\n)","a3396365":"plt.rcParams[\"figure.figsize\"] = (12,6)\nsns.scatterplot(\n    x=\"PetalLengthCm\",\n    y=\"PetalWidthCm\",\n    hue=\"Species\",\n    size=\"Species\",\n    data=df_iris\n)","0feb4797":"plt.rcParams[\"figure.figsize\"] = (10,8)\nsns.heatmap(df_iris.corr(), cmap=\"YlGnBu\")","1ab0cf3a":"df_iris['Species'].value_counts()","f9f06f4b":"X = df_iris.drop([\"Species\"], axis=1).values\ny = df_iris.Species.values","3b2fafe6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 0)","0b02cb99":"from sklearn import svm, tree, linear_model, neighbors, naive_bayes, ensemble, discriminant_analysis, gaussian_process\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score","258b811b":"MLA = [\n    #Ensemble Methods\n    ensemble.AdaBoostClassifier(),\n    ensemble.BaggingClassifier(),\n    ensemble.ExtraTreesClassifier(),\n    ensemble.GradientBoostingClassifier(),\n    ensemble.RandomForestClassifier(),\n\n    #Gaussian Processes\n    gaussian_process.GaussianProcessClassifier(),\n    \n    #GLM\n    linear_model.PassiveAggressiveClassifier(),\n    linear_model.RidgeClassifierCV(),\n    linear_model.SGDClassifier(),\n    linear_model.Perceptron(),\n    \n    #Navies Bayes\n    naive_bayes.BernoulliNB(),\n    naive_bayes.GaussianNB(),\n    \n    #Nearest Neighbor\n    neighbors.KNeighborsClassifier(),\n    \n    #SVM\n    svm.SVC(probability=True),\n    svm.NuSVC(probability=True),\n        \n    #Trees    \n    tree.DecisionTreeClassifier(),\n    tree.ExtraTreeClassifier(),\n    \n    #Discriminant Analysis\n    discriminant_analysis.LinearDiscriminantAnalysis(),\n    discriminant_analysis.QuadraticDiscriminantAnalysis(),\n\n    XGBClassifier(),\n    CatBoostClassifier()  \n    ]","23bc3fd6":"row_index = 0\nMLA_compare = pd.DataFrame()\n\nfor classifier in MLA:\n    classifier.fit(X_train, y_train)\n\n    y_pred = classifier.predict(X_test)\n    classifier_accuracy_score = accuracy_score(y_test, y_pred)\n\n    kfold_accuracy = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\n\n    MLA_name = classifier.__class__.__name__\n    MLA_compare.loc[row_index, 'MLA Name'] = MLA_name\n    MLA_compare.loc[row_index, 'Accuracy Score'] = classifier_accuracy_score*100\n    MLA_compare.loc[row_index, 'K-Fold Accuracy'] = kfold_accuracy.mean()*100\n\n    print(MLA_name, \"Done\")\n    row_index+=1","366f1fe2":"MLA_compare = MLA_compare.sort_values(by=\"K-Fold Accuracy\", ascending=False).reset_index(drop=True)[:15]\nMLA_compare","6b5d934c":"sns.barplot(x=\"MLA Name\", y=\"K-Fold Accuracy\", data=MLA_compare)\nplt.xticks(rotation=90)\nplt.title(\"Comparing K-Fold Accuracy Scores\")\nplt.xlabel(\"Algorithm Name\")","374421b5":"# Model","bbeaacc3":"# Data Preprocessing","d5afb383":"## Encoding Dependent Variable","5ab8ebe4":"## EDA","27d140e1":"## Importing Libraries"}}