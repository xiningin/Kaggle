{"cell_type":{"6382cb59":"code","3bbf926d":"code","c6c95bbb":"code","d80ccf36":"code","db60e847":"code","9cd9767f":"code","2fd419ef":"code","f0651ec8":"code","625d9b59":"code","9d4afb9d":"code","f435fba5":"code","720b4921":"markdown","d33d7093":"markdown","d7d2b713":"markdown","d851badd":"markdown","f852a940":"markdown","5af79721":"markdown","617903c1":"markdown","f365169e":"markdown"},"source":{"6382cb59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3bbf926d":"import matplotlib.pyplot as plt\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.models import Sequential","c6c95bbb":"input_file = \"\/kaggle\/input\/car-price\/CarPrice_Assignment.csv\"\npd.options.display.max_columns = None\nmain_df = pd.read_csv(input_file)\nmain_df","d80ccf36":"main_df.drop(columns=['CarName'], inplace=True)\nmain_df","db60e847":"encoding_columns = ['symboling', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'enginetype', 'cylindernumber', 'fuelsystem']  # List of categorical columns\nmain_array = np.array(main_df.car_ID).reshape(-1, 1)\nfor column in main_df.columns:\n    if column in encoding_columns:\n        temp = np.array(pd.get_dummies(main_df[column]))  # If column is a categorical, perform one-hot encoding\n    else:\n        temp = np.array(main_df[column]).reshape(-1, 1)\n    main_array = np.hstack((main_array, temp))  # concantate the columns\nmain_array = main_array[:, 2:]  # Remove car_ID column\npd.DataFrame(main_array)  # Display array","9cd9767f":"X_data = main_array[:, :-1]\ny_data = main_array[:, -1].reshape(-1, 1)\nx_scaler = StandardScaler()\ny_scaler = StandardScaler()\nX_data_scaled = x_scaler.fit_transform(X_data)\ny_data_scaled = y_scaler.fit_transform(y_data)\nprint(\"Shape of X_data: {}\".format(X_data.shape))\nprint(\"Shape of y_data: {}\".format(y_data.shape))\nprint(\"==========X_data after rescaling===============\")\nprint(pd.DataFrame(X_data_scaled).head())\nprint(\"==========y_data after rescaling===============\")\nprint(y_data_scaled.ravel())","2fd419ef":"X_train, X_test, y_train, y_test = train_test_split(X_data_scaled, y_data_scaled, test_size=0.1, shuffle=False)\nprint(\"Shape of X_train: {}\".format(X_train.shape))\nprint(\"Shape of X_test: {}\".format(X_test.shape))\nprint(\"Shape of y_train: {}\".format(y_train.shape))\nprint(\"Shape of y_test: {}\".format(y_test.shape))","f0651ec8":"model = Sequential()\nmodel.add(Dense(8, activation='relu', input_shape=(None, 57)))\nmodel.add(Dense(4, activation='relu'))\nmodel.add(Dense(1, activation='linear'))\nmodel.compile(optimizer='adam', loss='mse', metrics=['mae'])\nmodel.summary()","625d9b59":"history = model.fit(x=X_train, y=y_train, epochs=100, validation_data=(X_test, y_test), verbose=0)","9d4afb9d":"plt.plot(history.history['loss'], label=\"train_loss\")\nplt.plot(history.history['val_loss'], label=\"val_loss\")\nplt.legend()\nplt.show()","f435fba5":"PREDICT_ROW = 200\npredict_data = main_array[PREDICT_ROW, :].reshape(1, -1)\nX_predict = predict_data[:, :-1]\ny_true = predict_data[:, -1]\npredict_data_scaled = x_scaler.transform(X_predict)\ny_pred_scaled = model.predict(predict_data_scaled)\ny_pred = y_scaler.inverse_transform(y_pred_scaled)\nprint(\"Prediction price result: {}\".format(float(y_pred)))\nprint(\"True price: {}\".format(float(y_true)))\nprint(\"Percentage error: {}\".format(str(float(abs(y_true - y_pred) * 100 \/ y_true))))","720b4921":"# Most Concise Neural Network Car Price Prediction\n","d33d7093":"Remove irrelevant columns","d7d2b713":"Convert all categorical columns using one-hot encoding","d851badd":"## Step 2: Neural Network\n\nSetting up the neural network with two hidden layers of number of units to be 8 and 4. The final output layer has 1 unit with linear or no activation function for regression analysis. Using standard Adam optimizer, with mean square error loss and mean absolute error metrics","f852a940":"## Step 3: Evaluation of result\nUse a row in the main dataset for evaluation (here we set PREDICT_ROW to 201th row)","5af79721":"Training Neural network for 100 epochs, and disable text output","617903c1":"Plotting loss function","f365169e":"## Step 1: Data import and cleaning\n\nRead input csv file"}}