{"cell_type":{"279ddad5":"code","289e5470":"code","24c01cb2":"code","d1c00868":"code","51d20834":"code","84d696eb":"code","a1636c91":"code","3503d944":"code","df0bca86":"code","f014a970":"code","028c2bbb":"code","af3b5cbe":"code","291f0bcf":"code","1b3fbff9":"code","2025a224":"code","06da8680":"code","2501d924":"code","e607ad77":"code","0e9f0338":"code","eabec5da":"code","e9c1e5d0":"code","371970ae":"code","a4722477":"code","8590a476":"code","46aa8669":"code","b8114eba":"code","bab22a8f":"code","f1c30060":"code","0799843a":"code","66b4d70f":"code","faf5590f":"code","88345632":"code","516f53ca":"code","148ab3d5":"code","ee20f8b9":"code","a33c5467":"code","2125efc1":"code","13ceabf6":"code","13f6e67d":"code","da8a8e2b":"code","f72a75d4":"code","4f1e80d3":"code","f13590d7":"code","6ca0b56f":"code","98944ad8":"code","2e173a6e":"code","45523c08":"code","802aab62":"code","36564478":"code","8c6d184a":"code","c995d49b":"code","f6ffe17b":"code","c463db38":"code","90be896b":"code","72598670":"code","f38e3ed2":"code","5f74dd0f":"code","a30d6e02":"code","2dbf8586":"code","ce822c1a":"code","1224367c":"code","d935b72f":"code","bb06586c":"code","6aa97427":"code","914543e6":"code","986b9a97":"code","fa6d4f33":"code","ce0d0aed":"code","65ce7e5a":"code","cb5a9018":"code","56af4228":"code","2ac2b265":"code","2e2dbbf8":"code","fc76ae93":"code","d1b224e4":"code","8a8b50b5":"code","da0703c8":"code","a8672b45":"code","6b7df619":"code","8109f1a0":"code","78f7340a":"code","9c4f0ddb":"code","2be6efd9":"code","19dc6a7c":"code","93cd8b01":"code","972f8e15":"code","df862b4a":"code","f7768915":"code","790380f9":"code","fc8257f3":"code","b4b85f14":"code","aac6cea1":"code","fb85e811":"code","51af78e2":"code","eb002c22":"code","f0fe419e":"code","a4d3f7d5":"code","6b08e6a5":"code","1f9c0ec8":"code","b1f68487":"code","fc35d8ef":"code","5e4c6db5":"code","edd97f0b":"markdown","fe4486d5":"markdown","0e2daaab":"markdown","a36c68cf":"markdown","c9130ce8":"markdown"},"source":{"279ddad5":"import os\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd \nimport matplotlib.pyplot as plt\nsns.set(style='dark')","289e5470":"train=pd.read_csv(r'..\/input\/mathcohack\/train.csv') # Importing a random dataset","24c01cb2":"train.head(3)","d1c00868":"a=pd.Series([1,[2,2],3]) # Generates a pd series","51d20834":"type(a)","84d696eb":"b=[1]\ntype(b)\n","a1636c91":"a.axes # Can check the index of series , and only series","3503d944":"a.size # Check size of series","df0bca86":"a.values # Displays just the values of pd series","f014a970":"b=pd.Series([1,2,[3,2,1,3]], index=[3,2,'one']) # Custom index ","028c2bbb":"b.index # Shows only indexes","af3b5cbe":"list(b.items()) # Makes a list of pd Series","291f0bcf":"3 in a # Check if a particular value is present or not","1b3fbff9":"print(a)\na[[1,2]] # Show specific part of a Series","2025a224":"a","06da8680":"train.Model # Same as train['Model']","2501d924":"train.iloc[[0,1,2,3]] # Slicing dataframe ","e607ad77":"train.iloc[[0,1,2,3],[1]] # Slicing a specific row","0e9f0338":"train.iloc[[0,1,2,3],[1,3]] # Slicing a specific rows","eabec5da":"train.iloc[0:10] # Slicing a specific part of df","e9c1e5d0":"train.iloc[0:10,[0,1,2,3]] # Slicing part of df with specific columns","371970ae":"train.loc[0:2]","a4722477":"train.iloc[0:2]","8590a476":"train.loc[0:,'Model']","46aa8669":"train.loc[0:10,'Manufacturer'] ","b8114eba":"train.iloc[:,3] ","bab22a8f":"train.loc[[0,1,4,6],'Model'] # Custom column for custom rows(indexes)","f1c30060":"train.Price[1] # here the [1] shows the row ","0799843a":"train[train['Manufacturer']=='HONDA'].sort_values('Price') # Shows part of train where train's Manufacturer is only HONDA","66b4d70f":"train.loc[train['Model']=='FIT'] # Similar as above","faf5590f":"train[(train['Model']=='FIT') | (train['Manufacturer']=='HONDA')] # Multiple conditions ","88345632":"train[(train['Model']=='FIT') | ~(train['Manufacturer']=='HONDA')] # ~ means NOT","516f53ca":"train.filter(items=['Price','Model']) # a way to get a slice of required columns in a df","148ab3d5":"train.filter(regex='type$',axis=1) # a way to filter out df by regex column names","ee20f8b9":"animals=pd.DataFrame({\"Name\":['Cat','Dog','Frog','Lion'],\"Habitat\": ['Domestic','Domestic','Amphibian','Wild'],\"Diet\":['Cat Food','Dog Food','Insects','Other animals']})","a33c5467":"animals","2125efc1":"animals.append({\"Name\":'Mosquito'},ignore_index=True)","13ceabf6":"animals.append({\"Name\":'Mosquito',\"Size\":'TeenyTiny'},ignore_index=True) #Can append new columns and the rest of the df becomes NaN for that Column","13f6e67d":"animals.append({\"Name\":'Mosquito',\"Size\":'TeenyTiny',\"Diet\":'Blood',\"Habitat\":'Everywhere'},ignore_index=True) \n","da8a8e2b":"animals=animals.append({\"Name\":'Mosquito',\"Size\":'Tiny',\"Diet\":'Blood',\"Habitat\":'Everywhere'},ignore_index=True) \n# if df=df.append() is not done then the original df remains the same and the change observed is only temporary\n","f72a75d4":"animals=animals.append({\"Name\":'Fly',\"Size\":'TeenyTiny',\"Diet\":'ANYTHING',\"Habitat\":'Everywhere'},ignore_index=True) \n","4f1e80d3":"animals","f13590d7":"animals","6ca0b56f":"animals.drop(index=animals[animals['Diet']=='Blood'].index)","98944ad8":"animals","2e173a6e":"animals=animals.drop(5)","45523c08":"animals","802aab62":"animals.reset_index(inplace=True) # Reset index \nanimals","36564478":"animals=animals.drop(columns=['index'])","8c6d184a":"animals","c995d49b":"animals[['Diet','Name']]","f6ffe17b":"animals2=pd.DataFrame({\"Name\":['Octopus','Sloth','Eagle'],\"Habitat\":['Oceans','Forests','Tree Tops Maybe'],\"Diet\":['Mermaids','Leaves and stuff','Angels'],'Face':[':O','Meh','Epic']})","c463db38":"pd.concat([animals,animals2],ignore_index=True) # Concats df's while giving them new index","90be896b":"animals2","72598670":"animals","f38e3ed2":"pd.merge(animals,animals2,how='right') # Left and right to have columns of both df's but rows of a specific df","5f74dd0f":"train['Price'].nlargest(10) # Largest 10 values of a column","a30d6e02":"train['Price'].nsmallest(10).sort_values(ascending=False) # Smallest 10 values of a column","2dbf8586":"train[16992:16993] # A specific row by slicing","ce822c1a":"train.count() # Count of elements in every column","1224367c":"train.mean()","d935b72f":"train.median()","bb06586c":"train.shape[0]-train[\"ID\"].nunique()","6aa97427":"train.sum() # Sum of each column","914543e6":"train.min() # Minimum value of each column | Also works for max()","986b9a97":"train.std() # Calculates std dev. of numeric columns | also works for var() i.e variance","fa6d4f33":"train.sem() # ","ce0d0aed":"animals.groupby(['Diet'])['Name'].value_counts()","65ce7e5a":"animals","cb5a9018":"  train.groupby(['Manufacturer']).sum()['Price'].sort_values() # Groupby 1st categorical then numerical","56af4228":"train[train['Manufacturer']=='ROLLS-ROYCE']","2ac2b265":"train.groupby(['Manufacturer']).median()['Price'].sort_values() # Can do mean, median, etc.","2e2dbbf8":"train.groupby(['Manufacturer'])['Price'].describe() # Describe works like this","fc76ae93":"train.groupby(['Model']).agg(['min','mean','median','max']) # This shit is possible too","d1b224e4":"train.groupby(['Model']).agg(['min','mean','median','max'])['Airbags'] # Above for a single column","8a8b50b5":"train.groupby(['Manufacturer']).agg({'Price':'mean','Airbags':'median'}) # OH. THIS IS POSSIBLE TOO !","da0703c8":"def spike(x):\n    return x+100\n    \ntrain['Frice']=train['Price'].transform(spike) # Defining a function and creating a column by applying that function","a8672b45":"train\n","6b7df619":"train['Frice']=train['Frice'].transform(lambda x:x+1000) # Lambda for the same","8109f1a0":"train[['Prod. year','Airbags']].transform('sqrt') # This is a way ","78f7340a":"train['Manufacturer'].apply(len).sort_values(ascending=False) # Apply method","9c4f0ddb":"def increase_frice(x):\n    return x*100","2be6efd9":"train['Frice']=train['Frice'].apply(increase_frice) # Apply method calls a function","19dc6a7c":"train","93cd8b01":"train['Frice'].apply(lambda x:x*23) # Apply with lambda","972f8e15":"train.apply(np.sum) # Apply with built in np functions","df862b4a":"train.groupby('Manufacturer')['Price'].apply(np.sum) # Sum of prices per manufacturer","f7768915":"train.groupby('Airbags')['Price'].apply(np.max) # Max price of each unique value","790380f9":"train.loc[:,['Price','Airbags','Cylinders']].apply(['max','min','median','mean']) # Applying different functions to a select columns","fc8257f3":"animals2.applymap(len) # Len of each row element i.e elementwise application of function using applymap()","b4b85f14":"animals[['Name']].applymap(str.upper) # Applymap to a single column","aac6cea1":"animals['Name'].map({'Cat':'Kat'}) # Individually searches for Cat to turn to Kat ","fb85e811":"animals[['Name']].replace({'Cat':'Kat'}) # Replace works better?","51af78e2":"animals['Diet'].replace({'Cat Food':'Human food'},inplace=True) # Inplace=True","eb002c22":"animals","f0fe419e":"train","a4d3f7d5":"pd.cut(train['Airbags'],[0,2,4,6,8,10,14],labels=['ek','do','teen','chaar','paanch','che'],retbins=True) # Binning with labels","6b08e6a5":"animals['Size'].fillna(animals['Size'].mode()) #Fill NA, can be done to the whole df or to a single column","1f9c0ec8":"animals","b1f68487":"animals['Size'].fillna('Tiny')","fc35d8ef":"train.describe(include=[object,'int64','category']).T # Describing everything","5e4c6db5":"# Can set index to a aolumn by df.set_index('Column_name',inplace=True)","edd97f0b":"Axis 0 will act on all the ROWS in each COLUMN\nAxis 1 will act on all the COLUMNS in each ROW\nSo a mean on axis 0 will be the mean of all the rows in each column, and a mean on axis 1 will be a mean of all the columns in each row.","fe4486d5":"\n~~~\nUse map when you want to transform a pandas series elementwise\nUse apply when you want to transform a Series or dataframe row\/column wise\nUse applymap to transform a dataframe elementwise\n~~~\n","0e2daaab":"Pandas is a software library written for the Python programming language for data manipulation and analysis.\nIn particular, it offers data structures and operations for manipulating numerical tables and time series.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nNumpy is a library for Python that supports large, multidimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nMatplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSeaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.","a36c68cf":"^ same stuff but look at the syntax","c9130ce8":"~~~ SYNTAX ~~~\nloc[row_label, column_label]\niloc[row_position, column_position]\n~~~ END ~~~"}}