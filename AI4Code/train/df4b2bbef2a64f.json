{"cell_type":{"747f7410":"code","651ab489":"code","57f16afe":"code","35d31875":"code","a6a717d8":"code","3b04ec28":"code","00fd58cf":"code","8f533445":"code","b9f5eeb0":"code","0970b8d4":"code","562c1cb1":"code","a9b205c8":"code","74e6e323":"code","3168af1a":"code","52346f58":"code","8eb10592":"code","a7d1c23d":"code","0b0ec343":"code","214598ad":"code","c73be291":"code","4b798aca":"code","a6f41750":"code","e877ef9b":"code","7a96dc5a":"code","3f6c7306":"code","780e2224":"code","11379c9b":"code","d0f8deb4":"code","877da43e":"code","64b39a5f":"code","617aec6e":"code","f6c96424":"code","420d792f":"code","e7793b5e":"code","b9a33199":"code","eb4e64a7":"code","b8732652":"code","f47aa107":"code","7992bed8":"code","56775d3d":"code","a89e554e":"code","87c63a08":"code","98ca4129":"code","f2a024ba":"code","8ae10596":"code","3a6570ba":"code","eca75567":"code","edd6e7aa":"code","9f74551d":"code","d107c717":"code","961d21a7":"code","1e06e186":"code","294d7515":"code","7d131a14":"code","e9d3b7ff":"code","c91c555c":"code","d01b3c92":"code","a34b4cca":"code","459daed6":"code","51d2ff17":"code","a63bf404":"code","0de89b79":"code","2f81a0cd":"code","c9ec907b":"code","47aac1de":"code","a5069a74":"code","283c93b4":"code","cf74c023":"code","925a1299":"code","43ea9d49":"code","702e3886":"code","58168d2a":"code","3a4a7b22":"code","882d52be":"code","8a3c46e1":"code","0b8771dc":"code","a8890e56":"code","724d591f":"code","eb4b5a0d":"code","18a27bb6":"code","dbaa2765":"code","c0d01727":"code","a78a5762":"code","faf29e48":"code","7fc7e9a4":"code","6b83f197":"markdown","346bcfbb":"markdown","2fbbd166":"markdown","3fc866ca":"markdown","25bfdff5":"markdown","1128daf5":"markdown","1b481df1":"markdown","d8d646f3":"markdown","3eb759e0":"markdown","26f1d175":"markdown","35548043":"markdown","fb64db00":"markdown","d1a0fa0f":"markdown","dc723b8e":"markdown","3a5378a8":"markdown","7ba90876":"markdown","55a5ac8e":"markdown","334c7baf":"markdown","f8ca5a9e":"markdown","b73ff582":"markdown","5ef7575b":"markdown","e90d1cac":"markdown","aa9bfe97":"markdown","7d726cfb":"markdown","d127c10a":"markdown","bd5f8c31":"markdown","0a3ee289":"markdown","a5401275":"markdown","044dca91":"markdown","7ccf59a1":"markdown","fc95047c":"markdown","0d6832a7":"markdown","e5cf41cf":"markdown","a3570a31":"markdown","b83d5d69":"markdown","932a0fac":"markdown","8c837266":"markdown","2749b7e2":"markdown","3e709946":"markdown","be0844b2":"markdown","3da435f4":"markdown","42f2ed68":"markdown","b3d720fb":"markdown","b3a388d3":"markdown","26cc9edc":"markdown","d3c7d3f2":"markdown","683d8849":"markdown","8d7b95a0":"markdown","9107e1d3":"markdown","52c17dc8":"markdown","9dea8491":"markdown","d25cfee5":"markdown","bb22dfbb":"markdown","d67fe3b8":"markdown","dd7d62ae":"markdown","53713afb":"markdown","e1add03e":"markdown","2025d48a":"markdown","0824aa68":"markdown","e7f29131":"markdown","e7e0f3d2":"markdown","fd9dcbf1":"markdown","6cca255f":"markdown","6e77e487":"markdown","0dfc0738":"markdown","543d3a86":"markdown","adb08daa":"markdown","9eb6c426":"markdown","f1a637d1":"markdown","1bbb9911":"markdown","e868e8e2":"markdown"},"source":{"747f7410":"list(range(1, 11))","651ab489":"L = []\nfor x in range(1, 11):\n    L.append(x * x)\n    \nL","57f16afe":"[x * x for x in range(1, 11)]","35d31875":"[x * x for x in range(1, 11) if x % 2 == 0]","a6a717d8":"[m + n for m in 'ABC' for n in 'XYZ']","3b04ec28":"d = {'x': 'A', 'y': 'B', 'z': 'C' }\nfor k, v in d.items():\n    print(k, '=', v)","00fd58cf":"d = {'x': 'A', 'y': 'B', 'z': 'C' }\n[k + '=' + v for k, v in d.items()]","8f533445":"L = ['Hello', 'World', 'IBM', 'Apple']\n[s.lower() for s in L]","b9f5eeb0":"L = [x * x for x in range(5)]\nL","0970b8d4":"g = (x * x for x in range(5))\ng","562c1cb1":"next(g)","a9b205c8":"next(g)","74e6e323":"next(g)","3168af1a":"next(g)","52346f58":"next(g)","8eb10592":"next(g)","a7d1c23d":"g = (x * x for x in range(5))","0b0ec343":"for e in g:\n    print(e)","214598ad":"def fib(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        print(b)\n        a, b = b, a + b\n        n = n + 1\n    return 'done'","c73be291":"fib(5)","4b798aca":"def fib(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        a, b = b, a + b\n        n = n + 1\n    return 'done'","a6f41750":"f = fib(5)\nf","e877ef9b":"def odd():\n    print('step 1')\n    yield 1\n    print('step 2')\n    yield(3)\n    print('step 3')\n    yield(5)","7a96dc5a":"o = odd()","3f6c7306":"next(o)","780e2224":"next(o)","11379c9b":"next(o)","d0f8deb4":"next(o)","877da43e":"g = fib(5)","64b39a5f":"while True:\n    try:\n        x = next(g)\n        print('g:',x)\n    except StopIteration as e:\n        print('Generator return value:', e.value)\n        break","617aec6e":"abs(-10)","f6c96424":"abs","420d792f":"x = abs(-10)\nx","e7793b5e":"f = abs\nf","b9a33199":"f = abs\nf(-10)","eb4e64a7":"abs = 10","b8732652":"abs(-10)","f47aa107":"def add(x, y, f):\n    return f(x) + f(y)","7992bed8":"x = -5\ny = 6\nf = abs","56775d3d":"add(x, y, f)","a89e554e":"def calc_sum(*args):\n    ax = 0\n    for n in args:\n        ax = ax + n\n    return ax","87c63a08":"def lazy_sum(*args):\n    def sum():\n        ax = 0\n        for n in args:\n            ax = ax + n\n        return ax\n    return sum","98ca4129":"f = lazy_sum(1, 3, 5, 7, 9)\nf","f2a024ba":"f()","8ae10596":"f1 = lazy_sum(1, 3, 5, 7, 9)\nf2 = lazy_sum(1, 3, 5, 7, 9)","3a6570ba":"f1 == f2","eca75567":"def count():\n    fs = []\n    for i in range(1, 4):\n        def f():\n             return i*i\n        fs.append(f)\n    return fs","edd6e7aa":"f1, f2, f3 = count()","9f74551d":"f1()","d107c717":"f2()","961d21a7":"f3()","1e06e186":"def count():\n    def f(j):\n        def g():\n            return j*j\n        return g\n    fs = []\n    for i in range(1, 4):\n        fs.append(f(i)) # f(i)\u7acb\u523b\u88ab\u6267\u884c\uff0c\u56e0\u6b64i\u7684\u5f53\u524d\u503c\u88ab\u4f20\u5165f()\n    return fs","294d7515":"f1, f2, f3 = count()","7d131a14":"f1()","e9d3b7ff":"f2()","c91c555c":"f3()","d01b3c92":"list(map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9]))","a34b4cca":"def f(x):\n    return x * x","459daed6":"f = lambda x: x * x\nf","51d2ff17":"f(5)","a63bf404":"def build(x, y):\n    return lambda: x * x + y * y","0de89b79":"def now():\n    print('2020-01-25')","2f81a0cd":"f = now","c9ec907b":"f()","47aac1de":"now.__name__","a5069a74":"f.__name__","283c93b4":"def log(func):\n    def wrapper(*args, **kw):\n        print('call %s():' % func.__name__)\n        return func(*args, **kw)\n    return wrapper","cf74c023":"@log\ndef now():\n    print('2015-3-25')","925a1299":"now()","43ea9d49":"int('12345')","702e3886":"int('12345', base=8)","58168d2a":"int('12345', base=16)","3a4a7b22":"def int2(x, base=2):\n    return int(x, base)","882d52be":"int2('1000000')","8a3c46e1":"int2('1010101')","0b8771dc":"import functools\nint2 = functools.partial(int, base=2)","a8890e56":"int2('1000000')","724d591f":"int2('1010101')","eb4b5a0d":"int2('1000000', base=10)","18a27bb6":"int2 = functools.partial(int, base=2)","dbaa2765":"int2('10010')","c0d01727":"kw = { 'base': 2 }\nint('10010', **kw)","a78a5762":"max2 = functools.partial(max, 10)","faf29e48":"max2(5, 6, 7)","7fc7e9a4":"args = (10, 5, 6, 7)\nmax(*args)","6b83f197":"Since `L` is a `list`, which means we could print every elements directly. But `g` is a `generator`, how can we get every element in that?\n\nUsing `next()` function, here is some examples:","346bcfbb":"`int()` can convert string into integer. Also, with another argument `base`, we could convert the value to Base-2, -8 or -16. (The default base is `10`).","2fbbd166":"But when we passing:","3fc866ca":"- **CAUTIONS! DO NOT use any loop variables or variables that might change later in the return function.**","25bfdff5":"This equals to:","1128daf5":"In this tutorial, we introduced the basic concept and usage of `List Comprehensions`, `Generator` and `Higher-Order Function`. In the future, we will get deeper into `Higher-Order Function` cause that's one of the most commonly used feature in real projects.\n\nIf you have any problems, or find any bugs, please let a comment below and I will reply to you asap. Thanks!","1b481df1":"In the example above, every loop generates a new function, then append that function to a list.\n\nYou might think when execute `f1()`, `f2()` and `f3()`, the corresponding results should be `1`, `4` and `9`. But the truth is:","d8d646f3":"For example, if we need to generate a list`[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`, we could use `list(range(1, 11))`:","3eb759e0":"Usually, the most difficult part to understand is the execution flow. Normal function executes code sequentially, it will stop when encounter `return`, or finish the last line of code.\n\nHowever, Generator will only execute when `next()` is called, and stop when encounter `yield`. If that generator been called again, it will start from the line where the last time stopped.\n\nHere is an example.","26f1d175":"# Conclusion","35548043":"This equals to:","fb64db00":"<a id=\"3\"><\/a> <br>\n\n# 3. Higher-Order Function\n\nBefore I give you a wiki defination, let's use code to understand the concept little by little.\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","d1a0fa0f":"Another example, when we passing:","dc723b8e":"After assignning `abs` to value `10`, we can no longer call `abs()` function, because this variable `abs` has been set to a fixed value.\n\nCAUTIONS! In real projects, please DO NOT code like this! In case you ran this kind of code, please restart the Python Environment.","3a5378a8":"We could see that anonymous function `lambda x: x * x` is equal to:","7ba90876":"When we call `lazy_sum()`, the output will be a function instead of sum value.","55a5ac8e":"Example: If we use it twice (nested loop), it will give us the full combinations of all elements.","334c7baf":"**Closure** is easy to use, but a little difficult to create.\n\nLet's see an example:","f8ca5a9e":"After creating the `log` decorator, let's use \"@\" feature of Python to set the decorator at the defination area of funtions.","b73ff582":"But `for` loop is a little bit complicated and expensive. \n\n**List Comprehensions** could use one 1 line to get the same list\uff1a","5ef7575b":"Now, let's assume we need to enhance function `now()`. We want the function will automatically print logs before and after this function been called. Meanwhile, don't change the defination of `now()` function. These dynamic methods to enhancing functions (or add another features \/ behaviors) are called **Decorator**. ([WIKI- Decorators](https:\/\/en.wikipedia.org\/wiki\/Python_syntax_and_semantics#Decorators))\n\nIn reality, decorator is a HOF function that returns another function. So, if we need a decorator that can print logs, we can do this:","e90d1cac":"<a id=\"3.7\"><\/a> <br>\n\n## 3.7 Decorator\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","aa9bfe97":"The result will show up only when we execute `f`.","7d726cfb":"Like I just mentioned, after we created a Generator, we will probably never use `next()` to call it, hence we don't need to care about `StopIteration` error as well.\n\nGenerator is pretty powerful. When the algorithms are too complicated to use `for` loop to realize, we could also replace it with functions.\n\nFor example, the famous [Fibonacci number](https:\/\/en.wikipedia.org\/wiki\/Fibonacci_number). This is an example function to get Fibonacci number with out Generator:","d127c10a":"Example: If we add `if` condition behind `for` loop, it will return only even values.","bd5f8c31":"Calling `now()` function will not only run `now()` function, but also print out logs.","0a3ee289":"<a id=\"Top\"><\/a> <br>\n\n# Contents\n\n1. [List Comprehensions](#1)\n2. [Generator](#2)\n3. [Higher-Order Function](#3)\n    - 3.1 [Variables pointing to Functions](#3.1)\n    - 3.2 [Built-in functions as Variables](#3.2)\n    - 3.3 [Functions as Input Variables](#3.3)\n    - 3.4 [Functions as Return Values](#3.4)\n    - 3.5 [Closure](#3.5)\n    - 3.6 [Anonymous Function](#3.6)\n    - 3.7 [Decorator](#3.7)\n    - 3.8 [Partial Function](#3.8)","a5401275":"You can see that `odd` is not a normal function, it's a generator. It will stop when encounter `yield`, and start from the same place when been called again. After `yield` 3 times, there is no more `yield` to execute, `next(o)` will report an error.\n\nAnother thing I want to underline is when using `for` loop for Generator, we cannot get the `return` value. In order to get that, we need to catch the value of `StopIteration` error.","044dca91":"In the example above, we know function can be assigned to variable.\n\nAnother question is, can we call an function assigned variable?","7ccf59a1":"<a id=\"1\"><\/a> <br>\n\n# 1. List Comprehensions\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","fc95047c":"However, if we don't need to get the sum value right now but use it in the future calculation, how should we realize it?\n\nThe answer is we just replace the output from a fixed value with a function.","0d6832a7":"In order to change `fib` into Generator, we only need to change `print(b)` into `yield b`.","e5cf41cf":"<a id=\"3.8\"><\/a> <br>\n\n## 3.8 Partial Function\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","a3570a31":"<a id=\"3.6\"><\/a> <br>\n\n## 3.6 Anonymous Function\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","b83d5d69":"However, what if we want to create `[1x1, 2x2, 3x3, ..., 10x10]`? Method one will be using `for` loop:","932a0fac":"It will take `10` as a part of `*args` and add to left automatically.","8c837266":"## PLEASE RESTART YOUR PYTHON ENVIRONMENT FROM HERE","2749b7e2":"This is another way to build Generator. If the defination of a function contains keyword `yield`, then it is no longer a normal function but a Generator.","3e709946":"If you have to use it, the proper way is to create another function for bounding the current value of loop variable(s) so that no matter how loop variable(s) change in next code, the fixed variable value will not change.","be0844b2":"Normally, every function has a `__name__` annotations. We can get a name of a function like this:","3da435f4":"In this example, we defined `sum` function within `lazy_sum` function, this structure called **Closure**.\n\nAnother thing is that every time we call `lazy_sum`, it will return a new function (means another new space in memory) even with the same variables.","42f2ed68":"`functools.partial` is the tool to help us generating these kind of **Partial Functions**. We don't need to define `int2()` by ourselves, instead, by just writing the code below will do the same job.","b3d720fb":"It's actually fixed `base` argument.","b3a388d3":"First, create an object of generator `odd()`, then keep calling it by using `next()` function.","26cc9edc":"In this notebook, I will briefly introduce some handy features of Python, such as **`List Comprehensions`**, **`Generator`**, **`Higher-Order Function`**, etc. From my personal experience as a Python user for 3 years, the following code is a more **`Pythonic`** style which make more sense for other Python programmers.","d3c7d3f2":"To be clear, Generator only store algorithm, everytime we call `next(g)`, `g` will calculate the next element until the end of that. If we can `next(g)` again after that, `g` will throw out the `StopIteration` error.\n\nFrankly speaking, `next(g)` is too unuseful and I have never seen one of these been applied to a real application. The normal way of using it will be grouped with `for` loop, because Generator is also iterable objects (We will spare some time for this later cause it's pretty important).","683d8849":"<a id=\"3.1\"><\/a> <br>\n\n## 3.1 Variables pointing to Functions\n\nUsing `abs()`, a Python built-in function as an example:\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","8d7b95a0":"When we passing function(s), sometimes we don't need explicit function(s). Using anonymous function(s) will be easier.\n\nPython also support anonymous function as well. Take `map()` function as an example:","9107e1d3":"All equal to `9` ! The reason is when functions been assigned, it didn't execute immediately. When all 3 functions been returned, the variables `i` has turned to `3`, which caused all results as `9`.","52c17dc8":"Example: Use List Comprehensions to turn the following words into lower-case.\n\n`['Hello', 'World', 'IBM', 'Apple']` to `['hello', 'world', 'ibm', 'apple']`","9dea8491":"Python `functools` module provides a lot of useful features, one of them is **Partial Function** (Noted that the \"partial\" here has totally different meanings compare with mathematics.)\n\nBefore we start, let's take `int()` as an example:","d25cfee5":"But, what if we assign function to variable itself?","bb22dfbb":"Assume we need to do a million times binary convertion. writing `int(x, base=2)` is tedious. So, we might think \"how about create another function which set `base=2` as a default argument?\".\n\nHere is an example:","d67fe3b8":"<a id=\"2\"><\/a> <br>\n\n# 2. Generator\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","dd7d62ae":"Yes, we can! Now variable `f` has been pointed to `abs` function it self. Calling `f()` will output the same result as `abs()`.","53713afb":"Usually, triple nested loop is not that generally used cause it's too expensive. (We will talk about the meaning of `expensive` in other tutorials. For now, just consider it's not the best solutions for most of the cases.)","e1add03e":"Also, anonymous function can be taken as a return value.","2025d48a":"<a id=\"3.4\"><\/a> <br>\n\n## 3.4 Functions as Return Values\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","0824aa68":"<a id=\"3.2\"><\/a> <br>\n\n## 3.2 Built-in functions as Variables\n\nHave you ever think about what is a function name? Based on the example we did above, we could conside a function name is just a variable that pointed to a function. Take `abs()` as an example. We could take `abs` as a variable that pointed to a function that can return the absolute value.\n\nNow, what if we assign `abs` to other object, what will happen?\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","e7f29131":"<a id=\"3.5\"><\/a> <br>\n\n## 3.5 Closure\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","e7e0f3d2":"We have already known that function is an object. And function can be assigned ot variable. For example:","fd9dcbf1":"From here we can see, `abs(-10)` is calling a function, while `abs` is function itself.\n\nTo get the result, we could assign ouput to another new variable.","6cca255f":"In short, `functools.partial` could fix the value of some arguments and return them as a new function.\n\nJust like a normal function, we can change the default `2` back to `10` as well:","6e77e487":"`for` loop can be used for 2 or more variables, just like `items()` of `dict` can iterate `key` and `value` at the same time:","0dfc0738":"Based on List Comprehensions, we could create a list. But, most of the time, due to the limitation of memory, there won't be enough space for millions or trillions elements. For example, if you need to store 100 million elements, using list will take a big chunk of your pc memory. For same cases, only a few elements have a higher frequency to be used than others, which means, you don't need to store that many elements in your memory.\n\nTherefore, if there is a algorithm to calculate the element one by one, would that help us keep calculating the next element, wouldn't that save huge amount of memory and storage? In Python, we do have this kind of algorithm and it's called **Generator**.\n\nGenerator can be created in many ways, one of them (maybe the easiest one) is to change a list that created by List Comprehensions from `[]` to `()`:","543d3a86":"A simple example of HOF:","adb08daa":"HOF not only can take another function as input, but also can return a function as output.\n\nLet's build a HOF that calculate the sum value of all input variables.","9eb6c426":"Keyword `lambda` means anonymous function, `x` before colon is the input variable.\n\nThere is a limitation for anonymous function, which is anonymous function could only has one expression and no `return`.\n\nIt also has an advantage is that since anonymous function has no name, we don't need to worry about the conflict of function names.","f1a637d1":"List Comprehensions can also use 2 variables to generate `list`\uff1a","1bbb9911":"What if we only write `abs`?","e868e8e2":"<a id=\"3.3\"><\/a> <br>\n\n## 3.3 Functions as Input Variables\n\nIf a variable can point to a function, how about a function point to another function? For those functions that can take another function as a input, we call them **Higher-Order Function (HOF)**.\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)"}}