{"cell_type":{"0ac279cf":"code","f7bc0604":"code","20b7d478":"code","4bffe26b":"markdown","03ec30c5":"markdown","3b441820":"markdown"},"source":{"0ac279cf":"%%writefile testing_please_ignore.py\ncode = compile(\n    \"\"\"\nfrom collections import defaultdict\nimport operator\nimport random\nif input == \"\":\n    score  = {'RR': 0, 'PP': 0, 'SS': 0, \\\n              'PR': 1, 'RS': 1, 'SP': 1, \\\n              'RP': -1, 'SR': -1, 'PS': -1,}\n    cscore = {'RR': 'r', 'PP': 'r', 'SS': 'r', \\\n              'PR': 'b', 'RS': 'b', 'SP': 'b', \\\n              'RP': 'c', 'SR': 'c', 'PS': 'c',}\n    beat = {'P': 'S', 'S': 'R', 'R': 'P'}\n    cede = {'P': 'R', 'S': 'P', 'R': 'S'}\n    rps = ['R', 'P', 'S']\n    wlt = {1: 0, -1: 1, 0: 2}\n\n    def counter_prob(probs):\n        weighted_list = []\n        for h in rps:\n            weighted = 0\n            for p in probs.keys():\n                points = score[h + p]\n                prob = probs[p]\n                weighted += points * prob\n            weighted_list.append((h, weighted))\n\n        return max(weighted_list, key=operator.itemgetter(1))[0]\n\n    played_probs = defaultdict(lambda: 1)\n    dna_probs = [\n        defaultdict(lambda: defaultdict(lambda: 1)) for i in range(18)\n    ]\n\n    wlt_probs = [defaultdict(lambda: 1) for i in range(9)]\n\n    answers = [{'c': 1, 'b': 1, 'r': 1} for i in range(12)]\n\n    patterndict = [defaultdict(str) for i in range(6)]\n\n    consec_strat_usage = [[0] * 6, [0] * 6,\n                          [0] * 6]  #consecutive strategy usage\n    consec_strat_candy = [[], [], []]  #consecutive strategy candidates\n\n    output = random.choice(rps)\n    histories = [\"\", \"\", \"\"]\n    dna = [\"\" for i in range(12)]\n\n    sc = 0\n    strats = [[] for i in range(3)]\nelse:\n    prev_sc = sc\n\n    sc = score[output + input]\n    for j in range(3):\n        prev_strats = strats[j][:]\n        for i, c in enumerate(consec_strat_candy[j]):\n            if c == input:\n                consec_strat_usage[j][i] += 1\n            else:\n                consec_strat_usage[j][i] = 0\n        m = max(consec_strat_usage[j])\n        strats[j] = [\n            i for i, c in enumerate(consec_strat_candy[j])\n            if consec_strat_usage[j][i] == m\n        ]\n\n        for s1 in prev_strats:\n            for s2 in strats[j]:\n                wlt_probs[j * 3 + wlt[prev_sc]][chr(s1) + chr(s2)] += 1\n\n        if dna[2 * j + 0] and dna[2 * j + 1]:\n            answers[2 * j + 0][cscore[input + dna[2 * j + 0]]] += 1\n            answers[2 * j + 1][cscore[input + dna[2 * j + 1]]] += 1\n        if dna[2 * j + 6] and dna[2 * j + 7]:\n            answers[2 * j + 6][cscore[input + dna[2 * j + 6]]] += 1\n            answers[2 * j + 7][cscore[input + dna[2 * j + 7]]] += 1\n\n        for length in range(min(10, len(histories[j])), 0, -2):\n            pattern = patterndict[2 * j][histories[j][-length:]]\n            if pattern:\n                for length2 in range(min(10, len(pattern)), 0, -2):\n                    patterndict[2 * j +\n                                1][pattern[-length2:]] += output + input\n            patterndict[2 * j][histories[j][-length:]] += output + input\n    played_probs[input] += 1\n    dna_probs[0][dna[0]][input] += 1\n    dna_probs[1][dna[1]][input] += 1\n    dna_probs[2][dna[1] + dna[0]][input] += 1\n    dna_probs[9][dna[6]][input] += 1\n    dna_probs[10][dna[6]][input] += 1\n    dna_probs[11][dna[7] + dna[6]][input] += 1\n\n    histories[0] += output + input\n    histories[1] += input\n    histories[2] += output\n\n    dna = [\"\" for i in range(12)]\n    for j in range(3):\n        for length in range(min(10, len(histories[j])), 0, -2):\n            pattern = patterndict[2 * j][histories[j][-length:]]\n            if pattern != \"\":\n                dna[2 * j + 1] = pattern[-2]\n                dna[2 * j + 0] = pattern[-1]\n                for length2 in range(min(10, len(pattern)), 0, -2):\n                    pattern2 = patterndict[2 * j + 1][pattern[-length2:]]\n                    if pattern2 != \"\":\n                        dna[2 * j + 7] = pattern2[-2]\n                        dna[2 * j + 6] = pattern2[-1]\n                        break\n                break\n\n    probs = {}\n    for hand in rps:\n        probs[hand] = played_probs[hand]\n\n    for j in range(3):\n        if dna[j * 2] and dna[j * 2 + 1]:\n            for hand in rps:\n                probs[hand] *= dna_probs[j*3+0][dna[j*2+0]][hand] * \\\n                               dna_probs[j*3+1][dna[j*2+1]][hand] * \\\n                      dna_probs[j*3+2][dna[j*2+1]+dna[j*2+0]][hand]\n                probs[hand] *= answers[j*2+0][cscore[hand+dna[j*2+0]]] * \\\n                               answers[j*2+1][cscore[hand+dna[j*2+1]]]\n            consec_strat_candy[j] = [dna[j*2+0], beat[dna[j*2+0]], cede[dna[j*2+0]],\\\n                                     dna[j*2+1], beat[dna[j*2+1]], cede[dna[j*2+1]]]\n            strats_for_hand = {'R': [], 'P': [], 'S': []}\n            for i, c in enumerate(consec_strat_candy[j]):\n                strats_for_hand[c].append(i)\n            pr = wlt_probs[wlt[sc] + 3 * j]\n            for hand in rps:\n                for s1 in strats[j]:\n                    for s2 in strats_for_hand[hand]:\n                        probs[hand] *= pr[chr(s1) + chr(s2)]\n        else:\n            consec_strat_candy[j] = []\n    for j in range(3):\n        if dna[j * 2 + 6] and dna[j * 2 + 7]:\n            for hand in rps:\n                probs[hand] *= dna_probs[j*3+9][dna[j*2+6]][hand] * \\\n                               dna_probs[j*3+10][dna[j*2+7]][hand] * \\\n                      dna_probs[j*3+11][dna[j*2+7]+dna[j*2+6]][hand]\n                probs[hand] *= answers[j*2+6][cscore[hand+dna[j*2+6]]] * \\\n                               answers[j*2+7][cscore[hand+dna[j*2+7]]]\n\n    output = counter_prob(probs)\n\"\"\", '<string>', 'exec')\ngg = {}\n\n\ndef run(observation, configuration):\n    global gg\n    global code\n    inp = ''\n    try:\n        inp = 'RPS'[observation.lastOpponentAction]\n    except:\n        pass\n    gg['input'] = inp\n    exec(code, gg)\n    return {'R': 0, 'P': 1, 'S': 2}[gg['output']]\n","f7bc0604":"%%writefile rfind.py\n\nimport random\nhist = []  # history of your moves\ndict_last = {}\nmax_dict_key = 10\nlast_move = 0\n\n\ndef beat(x):\n    return (x + 1) % 3\n\n\ndef predict():\n    global dict_last\n    global max_dict_key\n    for i in reversed(range(min(len(hist), max_dict_key))):\n        t = tuple(hist[-i:])\n        if t in dict_last:\n            return dict_last[t]\n    return random.choice([0, 1, 2])\n\n\ndef update(move, op_move):\n    global hist\n    global dict_last\n    global max_dict_key\n    hist.append(move)\n    for i in reversed(range(min(len(hist), max_dict_key))):\n        t = tuple(hist[-i:])\n        dict_last[t] = op_move\n\n\ndef run(observation, configuration):\n    global last_move\n    if observation.step == 0:\n        last_move = random.choice([0, 1, 2])\n        return last_move\n    update(last_move, observation.lastOpponentAction)\n    move = beat(predict())\n\n    return move\n","20b7d478":"from kaggle_environments import make, evaluate\n\ntrials = 10\nwins = 0\navg = 0\nprint('Running {} matches; this may take a few seconds'.format(trials))\nfor trial in range(trials):\n    current_score = evaluate(\"rps\", [\"testing_please_ignore.py\", \"rfind.py\"],\n                                 configuration={\"episodeSteps\": 1000})\n    if current_score[0][0] > 0:\n        wins += 1\n    avg += current_score[0][0] - current_score[0][1]\nprint('wins: {} \/ {}'.format(wins, trials),\n    '\\tavg score: {}'.format(avg \/ trials))\n","4bffe26b":"We crushed it!\n\nWe can also run it agains the corpus of bots from [Agents comparison](https:\/\/www.kaggle.com\/ihelon\/rock-paper-scissors-agents-comparison) notebook, as well as my flagship bot `rps.py`.\n\n```\nSimulation of battles. It can take some time...\nhit_the_last_own_action.py \twins: 100 \/ 100 \tavg score: 991.88\nrock.py \twins: 100 \/ 100 \tavg score: 999.42\npaper.py \twins: 100 \/ 100 \tavg score: 999.26\nscissors.py \twins: 100 \/ 100 \tavg score: 999.28\nrfind.py \twins: 100 \/ 100 \tavg score: 987.38\ncopy_opponent.py \twins: 100 \/ 100 \tavg score: 989.7\nreactionary.py \twins: 100 \/ 100 \tavg score: 987.26\ncounter_reactionary.py \twins: 100 \/ 100 \tavg score: 986.08\nstatistical.py \twins: 100 \/ 100 \tavg score: 943.84\nnash_equilibrium.py \twins: 59 \/ 100 \tavg score: 10.7\nmarkov_agent.py \twins: 100 \/ 100 \tavg score: 172.58\nmemory_patterns.py \twins: 100 \/ 100 \tavg score: 395.14\nmulti_armed_bandit.py \twins: 56 \/ 100 \tavg score: 3.56\nopponent_transition_matrix.py \twins: 50 \/ 100 \tavg score: 7.0\ndecision_tree_classifier.py \twins: 61 \/ 100 \tavg score: 17.02\nrps.py \twins: 39 \/ 100 \tavg score: -10.96\n```","03ec30c5":"# Running RPSContest bots\n\nSome of you may remember fondly on the now-defunct [rpscontest](http:\/\/www.rpscontest.com). All the bots on the website are licensed Public Domain so they are free for anyone to use for any purpose.\n\nIn general the main difference is that the bots on rpscontest have their inputs and outputs as strings \"R\", \"P\", and \"S\", and this is passed through the scope rather than as a function variable.\n\nHere we consider the bot [\"Testing Please Ignore\"](http:\/\/www.rpscontest.com\/entry\/342001), which is extremely strong with an 80% win rate.","3b441820":"We can now run our bot against a simple bot, such as this one (an original bot that I just wrote)."}}