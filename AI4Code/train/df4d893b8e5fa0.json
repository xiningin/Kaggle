{"cell_type":{"65b07eea":"code","7faf4392":"code","52e9f3bb":"code","a8af86a0":"code","6eb6ef17":"code","3cb2fe99":"code","dbeb7d3c":"code","074d35f2":"code","a10bb33d":"code","e77420e9":"code","d594e402":"code","e4091c90":"code","f27a7a81":"code","15a36fc6":"code","02c8bec8":"code","4a75d242":"code","59313125":"code","508d7aa5":"code","6eca0ca8":"markdown","da74b1d3":"markdown","c884761e":"markdown","4c630600":"markdown","791bac33":"markdown","efe0f26e":"markdown","d22442bb":"markdown","59efcbd4":"markdown","063eb1e7":"markdown","6be28a50":"markdown","70cd7d36":"markdown","3bcb0c74":"markdown","3f534ff7":"markdown"},"source":{"65b07eea":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom tensorflow import keras\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, Input, BatchNormalization\nfrom tensorflow.keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\n# Warning\nimport warnings\nwarnings.filterwarnings('ignore')","7faf4392":"# Random seeds\nimport random\nimport numpy as np\nimport tensorflow as tf\nrandom.seed(319)\nnp.random.seed(319)\ntf.random.set_seed(319)","52e9f3bb":"train_full = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","a8af86a0":"pixels = train_full.drop(labels=[\"label\"],axis=1, inplace=False)\nlabels =  train_full['label']","6eb6ef17":"# Free memory\ndel train_full","3cb2fe99":"sns.countplot(labels)","dbeb7d3c":"pixels.isnull().any().describe()","074d35f2":"labels.isnull().any()","a10bb33d":"test.isnull().any().describe()","e77420e9":"# Normalization\npixels = pixels\/255\ntest = test\/255","d594e402":"# Reshape\npixels = pixels.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","e4091c90":"# Label encoding\nlabels = to_categorical(labels, num_classes=10)","f27a7a81":"X_train, X_val, y_train, y_val = train_test_split(pixels, labels,\n                                                 test_size=0.1,\n                                                 random_state=42)","15a36fc6":"kernel_initializer = tf.keras.initializers.GlorotNormal(seed=319)","02c8bec8":"def create_model():\n    model = Sequential()\n\n    model.add(Input(shape=(28,28,1)))\n    model.add(Conv2D(32, \n                     kernel_size=(5,5), \n                     kernel_initializer=kernel_initializer,\n                     padding=\"Same\", \n                     activation=\"relu\",\n                    ))\n    model.add(Flatten())\n    model.add(Dense(10, \n                    activation=\"softmax\",\n                    kernel_initializer=kernel_initializer,\n                   ))\n    # Define the optimizer\n    optimizer = RMSprop(learning_rate=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\n    \n    #Compile model\n    model.compile(optimizer=optimizer,\n              loss=\"categorical_crossentropy\",\n              metrics=['accuracy']\n             )\n    return model","4a75d242":"model = create_model()\nmodel.summary()","59313125":"model.fit(X_train, y_train, \n         epochs=2,\n         validation_data=(X_val,y_val))","508d7aa5":"model1 = create_model()\nmodel1.fit(X_train, y_train, \n         epochs=2,\n         validation_data=(X_val,y_val))","6eca0ca8":"<a id=2.3 ><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:140%; text-align:left; border-radius: 20px 50px;\">2.3. Check null and missing<\/p>\n\n[Content](#0)\n","da74b1d3":"### Create the first model","c884761e":"### No corrupted images(missing\/null inside)","4c630600":"<a id='1'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">1. Introduction and updates<\/p>\n ","791bac33":"<a id=0><\/a>\n## <p style=\"background-color:lightblue; font-family:newtimeroman; font-size:120%; text-align:left; border-radius: 15px 50px;\">Table of Content<\/p>\n* [1. Introduction and updates](#1)\n* [2. Data Preparation](#2)\n    * [2.1. Load Data](#2.1)\n    * [2.2. Count record number per each category](#2.2)\n    * [2.3. Check null and missing](#2.3)\n    * [2.4. Preprocessing](#2.4)\n* [3. Model](#3)\n    * [3.1 Define Model](#3.1)\n    * [3.2 Reducing Learning Rate](#3.2)\n    * [3.3 Data Augmentation](#3.3)\n\n* [References](#10)","efe0f26e":"### Data is distributed similarity from number 0 to 9 ","d22442bb":"<a id=2.1 ><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:140%; text-align:left; border-radius: 20px 50px;\">2.1 Load Data<\/p>\n\n[Content](#0)","59efcbd4":"### Create the second model to compare","063eb1e7":"<a id=2.2 ><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:140%; text-align:left; border-radius: 20px 50px;\">2.2 Count record number per each category<\/p>\n\n[Content](#0)\n","6be28a50":"<a id=3 ><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 20px 50px;\">3. CNN Model<\/p>\n\n[Content](#0)\n","70cd7d36":"<a id=3.1 ><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:left; border-radius: 20px 50px;\">3.1. Define Model<\/p>\n\n[Content](#0)\n","3bcb0c74":"<a id='2'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\"> 2. Data Preparation<\/p>\n","3f534ff7":"<a id=2.4 ><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:140%; text-align:left; border-radius: 20px 50px;\">2.4. Preprocessing<\/p>\n\n[Content](#0)\n"}}