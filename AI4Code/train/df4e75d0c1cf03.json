{"cell_type":{"1b545f31":"code","c82f655d":"code","2a17875e":"code","5946a650":"code","756fe6e7":"code","3aef1d22":"code","b036efb8":"code","bb3b16f6":"code","f8cee535":"code","de5c2513":"code","3d73fa90":"code","a6e46b3d":"code","eac81399":"code","61162ea6":"code","0d330019":"code","ad75fd12":"code","f0d1cccb":"code","e6b7103a":"code","f6657315":"code","e0384d30":"code","7cd22f07":"code","23102163":"code","71ab1a86":"code","e755770e":"code","a1c1aa47":"code","24b3c677":"code","f5c2e3a2":"code","2d68179f":"code","cc88fc54":"code","94d03fc1":"code","90733a6d":"code","77dd66f7":"code","c288e9d1":"code","7e7447e4":"code","984ccb4d":"code","c33f85c2":"code","3ca5cad2":"code","29a35fa9":"code","c364831b":"code","d2654587":"code","be567bcf":"code","ad5f7aa7":"code","4f0ab0c3":"code","c0fb2916":"code","504f5e99":"code","f43439ff":"code","cb777012":"code","5dec00f2":"code","f3add940":"code","7940501b":"code","95bd6eab":"code","2818db3b":"code","cd0fb8cf":"code","32f0673d":"code","5941e932":"code","79252b53":"code","288dabac":"code","40b4af88":"code","58b64e60":"code","e5acf58b":"code","ff4176f4":"code","5ab66bc7":"code","0cd5066d":"code","110871dc":"code","a00fab7a":"code","452cc818":"code","acddc71c":"code","6bcd65ad":"code","e855701d":"code","1052f99d":"code","3bf9e75b":"code","5e4ca4d0":"code","356a71b6":"code","a3aa3373":"code","9b0fabaf":"code","7fe69a19":"code","94046773":"code","f6f3fa10":"code","03c6c9b1":"code","fca6cd1c":"code","e8959130":"code","5083466e":"code","48200c2c":"code","1ac89134":"code","1795d04b":"code","672ed56c":"code","2c0ac41a":"markdown","e4e8a285":"markdown","f5c0619c":"markdown","b2bb793a":"markdown","3c7f5f72":"markdown","e441bd20":"markdown","12a2c56f":"markdown","de5f9f2f":"markdown","5dc0340c":"markdown","47265b4d":"markdown","e44db301":"markdown","b059484a":"markdown","9696d245":"markdown","6380c6dc":"markdown","6fec4bd1":"markdown","2b352656":"markdown","a5b07a07":"markdown","11f87001":"markdown"},"source":{"1b545f31":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c82f655d":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_data.head()","2a17875e":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data.head()","5946a650":"train_data.shape, test_data.shape","756fe6e7":"pd.set_option('display.max_row',None) \npd.set_option('display.max.column', None)","3aef1d22":"train_data.info()","b036efb8":"train_data.groupby('Sex')[['Sex','Survived']].mean()","bb3b16f6":"pd.crosstab(train_data.Sex, train_data.Survived)","f8cee535":"print(pd.crosstab(train_data.Sex, train_data.Survived) \/ train_data.shape[0]*100)\n\nplt.figure(figsize=(14,6))\nsns.countplot(data = train_data, hue = 'Survived', x='Sex')\nplt.xlabel('Gender')\nplt.ylabel('Survived count')\nplt.xticks(rotation=60)\nplt.title('Gender Survived count')\nplt.show()","de5c2513":"train_data.Sex.value_counts() \/ train_data.shape[0] * 100","3d73fa90":"grid = sns.FacetGrid(train_data, col = 'Survived', row = 'Sex')\ngrid.map(plt.hist, 'Age', bins = 20)\ngrid.add_legend()","a6e46b3d":"print (train_data[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean())","eac81399":"### Lets see the visualization of Pclass to the survived with respect to Age distribution \nprint (train_data[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean())\nplt.figure(figsize=(14,6))\nsns.countplot(data = train_data, x = 'Pclass', hue='Survived')\nplt.xlabel('Ticket Class', fontsize = 15)\nplt.ylabel('Survived count', fontsize = 15)\nplt.title('Class vs Survival', fontsize = 25)\nplt.xticks(rotation = 60)\nplt.show()","61162ea6":"grid = sns.FacetGrid(train_data, col='Survived', row = 'Pclass')\ngrid.map(plt.hist, 'Age', bins = 20)\ngrid.add_legend();","0d330019":"test_data.head()","ad75fd12":"all_data = [train_data, test_data]","f0d1cccb":"for dataset in all_data:\n    dataset['Familysize'] = dataset[\"SibSp\"] + dataset[\"Parch\"] + 1\nprint(train_data[['Familysize','Survived']].groupby(['Familysize'],as_index=False).mean())","e6b7103a":"print(pd.crosstab(train_data.Familysize, train_data.Survived))\n\nplt.figure(figsize=(15,6))\nsns.countplot(x = 'Familysize', hue = 'Survived', data = train_data)\nplt.xlabel('Familysize', fontsize = 20)\nplt.ylabel('Survived', fontsize = 20)\nplt.title('Family size survived count', fontsize = 25)\nplt.xticks(rotation = 80)\nplt.show()","f6657315":"train_data.head()\ntrain_data.drop(labels= ['SibSp','Parch'], axis=1, inplace = True)","e0384d30":"train_data.head()","7cd22f07":"test_data = test_data.drop(labels=['SibSp','Parch'], axis = 1)\ntest_data.head()","23102163":"all_data = [train_data, test_data]","71ab1a86":"plt.figure(figsize=(15,6))\ngrid = sns.FacetGrid(train_data, col = 'Survived')\ngrid.map(plt.hist, 'Age', bins = 20)\nplt.show()","e755770e":"train_data.head()","a1c1aa47":"train_data.isnull().sum()[train_data.isnull().any()]","24b3c677":"train_data.isnull().sum()[train_data.isnull().any()] \/ train_data.shape[0] * 100","f5c2e3a2":"train_data.drop(labels='Cabin', axis=1, inplace = True)","2d68179f":"test_data.drop(labels='Cabin', axis=1, inplace = True)","cc88fc54":"train_data.head()","94d03fc1":"test_data.head()","90733a6d":"train_data.isnull().sum()[train_data.isnull().any()]","77dd66f7":"train_data['Age'] = train_data['Age'].fillna(train_data['Age'].mean())\ntrain_data.info()","c288e9d1":"test_data['Age'] = test_data['Age'].fillna(test_data['Age'].mean())\ntest_data.info()","7e7447e4":"train_data.drop(labels='Ticket', axis=1, inplace = True)","984ccb4d":"test_data.drop(labels='Ticket', axis=1, inplace = True)","c33f85c2":"test_data.head()","3ca5cad2":"all_data = [train_data,  test_data]","29a35fa9":"for dataset in all_data:\n    dataset['title'] = dataset.Name.str.extract('([A-Za-z]+)\\.', expand=False)","c364831b":"pd.crosstab(train_data.title, train_data.Sex)","d2654587":"for dataset in all_data:\n    dataset['title'] = dataset['title'].replace(['Lady', 'Countess','Capt', 'Col',\n                                                 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['title'] = dataset['title'].replace('Mlle', 'Miss')\n    dataset['title'] = dataset['title'].replace('Ms', 'Miss')\n    dataset['title'] = dataset['title'].replace('Mme', 'Mrs')","be567bcf":"print(train_data[['title','Survived']].groupby(['title'], as_index=False).mean())","ad5f7aa7":"print(pd.crosstab(train_data.title, train_data.Survived))\nplt.figure(figsize = (15,6))\nsns.countplot(x = 'title', data = train_data, hue = 'Survived')\nplt.xlabel('Title', fontsize = 20)\nplt.ylabel ('Survived', fontsize = 20)\nplt.title('Title vs Survived', fontsize = 25)","4f0ab0c3":"train_data.drop(labels='Name', axis=1, inplace=True)","c0fb2916":"test_data.drop(labels='Name', axis=1, inplace = True)","504f5e99":"varsll_data = [train_data, test_data]","f43439ff":"train_data[\"AgeState\"] = pd.cut(train_data.Age, bins = [0, 2, 5, 18,60,100], labels=[\"Infant\", \"Toddler\", \"Child\", \"Adult\", 'Senior_Citizen'],include_lowest=True)","cb777012":"train_data.head()","5dec00f2":"test_data[\"AgeState\"] = pd.cut(test_data.Age, bins = [0, 2, 5, 18,60,100], labels=[\"Infant\", \"Toddler\", \"Child\", \"Adult\", 'Senior_Citizen'],include_lowest=True)","f3add940":"train_data.AgeState.value_counts()","7940501b":"print(pd.crosstab(train_data.AgeState, train_data.Survived))\nplt.figure(figsize=(15,6))\nsns.countplot(x = 'AgeState', hue = 'Survived', data = train_data)\nplt.xlabel('Age State', fontsize = 20)\nplt.ylabel('Survived', fontsize = 20)\nplt.title('Age state vs survived probability', fontsize = 25)\nplt.show()","95bd6eab":"train_data.drop(labels='Age', axis = 1, inplace = True)\n\ntest_data.drop(labels='Age', axis = 1, inplace = True)","2818db3b":"all_data = [train_data, test_data]","cd0fb8cf":"train_data.Sex.value_counts()","32f0673d":"train_data.info()","5941e932":"for dataset in all_data:\n    dataset['Sex'] = dataset['Sex'].map({'female':0,'male':1}).astype('int64')","79252b53":"train_data.Sex.value_counts()","288dabac":"train_data.Embarked.value_counts()","40b4af88":"  all_data = [train_data, test_data]","58b64e60":"for dataset in all_data:\n    dataset['Embarked'] = dataset['Embarked'].map({'S':0,'C':1,'Q':2}).astype('float64')","e5acf58b":"all_data = [train_data, test_data]","ff4176f4":"from sklearn import preprocessing\nnumber = preprocessing.LabelEncoder()\ntrain_data['Embarked'] = number.fit_transform(train_data['Embarked'].astype(str))\ntest_data['Embarked'] = number.fit_transform(test_data['Embarked'].astype(str))\n","5ab66bc7":"train_data.Embarked.value_counts()","0cd5066d":"test_data.Embarked.value_counts()","110871dc":"train_data.title.value_counts()","a00fab7a":"for dataset in all_data:\n    dataset['title'] = dataset['title'].map({'Mr':0,'Miss':1,'Mrs':2,'Master':3,'Rare':4}).astype('int64')","452cc818":"train_data.title.value_counts()","acddc71c":"train_data.AgeState.value_counts()","6bcd65ad":"test_data['Fare'].fillna(test_data['Fare'].median(), inplace=True)","e855701d":"all_data = [train_data, test_data]\n\nfor dataset in all_data:\n    dataset['AgeState'] = dataset['AgeState'].map({'Adult':0,'Child':1,'Infant':2,\n                                                  'Senior_Citizen':3,'Toddler':4}).astype('int64')\n\nfor dataset in all_data:\n    dataset['Fare'] = dataset['Fare'].astype(int)","1052f99d":"train_data.AgeState.value_counts()","3bf9e75b":"train_data.drop(labels='PassengerId', axis=1, inplace=True)","5e4ca4d0":"train_data.info()","356a71b6":"test_data.info()","a3aa3373":"from sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report","9b0fabaf":"from xgboost import XGBRFClassifier\nfrom sklearn.model_selection import  train_test_split","7fe69a19":"X = train_data.drop('Survived', axis = 1)\ny = train_data['Survived']\nX_test_data = test_data.drop('PassengerId', axis = 1).copy()","94046773":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.75, random_state = 10)","f6f3fa10":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","03c6c9b1":"from sklearn.model_selection import GridSearchCV","fca6cd1c":"logre = LogisticRegression()\nlogre.fit(X_train, y_train)","e8959130":"y_pred = logre.predict(X_test)\ny_pred","5083466e":"X_train = train_data.drop(\"Survived\", axis=1)\nY_train = train_data[\"Survived\"]\nX_test  = test_data.drop(\"PassengerId\", axis=1).copy()\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_prediction = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nrandom_forest_score = round(random_forest.score(X_train, Y_train) * 100, 2)\nrandom_forest_score","48200c2c":"my_submission_titanic = pd.DataFrame({'Passengerid':test_data['PassengerId'],\n                                     'Survived':Y_prediction})","1ac89134":"my_submission_titanic.head()","1795d04b":"my_submission_titanic.to_csv(\".\/Mercy_submission.csv\", index=False)","672ed56c":"print(\"Your submission was successfully saved!\")","2c0ac41a":" # **SibSp and Parch**","e4e8a285":" **sex**","f5c0619c":"# **Age**","b2bb793a":"**Notes:**\n- Let's create a new column named AgeState\n\n- Map the categorical datas with values","3c7f5f72":"# Model building","e441bd20":"Sibling = brother, sister, stepbrother, stepsister Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\nparch: The dataset defines family relations in this way... Parent = mother, father Child = daughter, son, stepdaughter, stepson Some children travelled only with a nanny, therefore parch=0 for them.\n\nWe are going to create new variable family_size by adding Sibsp and Parch","12a2c56f":"Family size with 4 have the maximum probability with survival","de5f9f2f":"#lets drop Name from both datasets","5dc0340c":"0 - 5 age group i.e infants and toddler have the greatest survival probability\nLets drop the \"Age\" variable from both train and test dataset","47265b4d":"From this, Passengers within the 3rd class between the ages of 25 - 35 have the least probability to survive","e44db301":"PCLass","b059484a":"Passengerid wont be significant for model building so lets drop them","9696d245":"Lets do some categorical mapping","6380c6dc":"# **Missing value inputation and data cleaning**","6fec4bd1":"LogisticRegression","2b352656":"From this we can see that out of a total of 35 % female in the titanic ship 26 % of female survived.","a5b07a07":"Dropping the Cabin from both the test and train dataset","11f87001":"**DATA EXPLORATION**"}}