{"cell_type":{"bdb70d43":"code","ed96b1db":"code","d2ef5382":"code","0d1d9025":"code","ff687a64":"code","17abadc4":"code","8c11e2ea":"code","a1ffae13":"code","d4eacd93":"code","b326ad92":"code","ecbe28a3":"code","4d3b0f6b":"code","c1e51a68":"code","f00d260f":"code","0b3adb1f":"code","97691674":"code","00fbb23c":"code","f1293a06":"code","dcd128ea":"code","c87f6666":"code","3858432c":"code","fcab1fa2":"code","998e4952":"code","ee59496d":"code","a2e2f12f":"code","4996c9c5":"code","3104bb3b":"code","10f5792f":"code","58e030f1":"code","cbc2ef01":"code","e61b09f0":"code","0272fc86":"code","e10f5b74":"code","54c33195":"code","15397c83":"code","4b7a2758":"code","16a9f5f5":"code","63333d1b":"code","d9b1c548":"code","94771200":"code","dbecbaa9":"code","982404f6":"code","ac10b602":"code","42930fc3":"code","99161247":"code","a4acbf93":"code","1e024d25":"code","490a109e":"code","10290f68":"code","2d4454cb":"code","7ef4049a":"code","4802eca3":"code","216297b7":"code","306b7f05":"code","91ead795":"code","328a7946":"code","89842537":"code","f90af9d4":"code","265ae03d":"code","c4109110":"code","df571604":"code","15a88513":"code","2acd3b95":"code","04d52567":"code","1ceb3d1b":"code","2a5e327d":"code","98ca099b":"code","100ef981":"code","7f0329d6":"code","353ff804":"code","f09fb061":"code","a6078a8c":"code","6df5e36b":"code","c8f01a03":"code","a6927f90":"code","e942f3a0":"code","3ae1213b":"code","c291c5ae":"code","a02fd260":"code","46d99a38":"code","b9e0e9c6":"code","e049d778":"markdown","c111a2dd":"markdown","68a849b0":"markdown","1dfcfaf2":"markdown","674e1cdd":"markdown","fb797f26":"markdown","546d5f52":"markdown","c9803086":"markdown","ca085ef2":"markdown","491ec4e7":"markdown","03f1feee":"markdown","7db47143":"markdown","916e392f":"markdown","f596625c":"markdown","66d96276":"markdown","47e79bf1":"markdown","1ddd1c24":"markdown","c35a43a8":"markdown","361b06c0":"markdown","2d69d489":"markdown","34880e5e":"markdown","b530cf28":"markdown","536afacb":"markdown","ef502210":"markdown","1ffc9ad1":"markdown","e8a3c556":"markdown","74746496":"markdown","3a5f6807":"markdown","f475408b":"markdown","24d9dc63":"markdown","6b6d8777":"markdown","5ec32252":"markdown","5ae3d775":"markdown","89185642":"markdown","b8584c9e":"markdown","e1c5c476":"markdown","e9092ba5":"markdown","f876aa32":"markdown","009bdcf3":"markdown","945b9dde":"markdown"},"source":{"bdb70d43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ed96b1db":"import pandas as pd\nimport numpy as np\nimport datetime as dt\n\n#data viz\n#for better viz\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n#for quick viz\nimport seaborn as sns\n\n#ml\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom sklearn.metrics import classification_report\nfrom imblearn.pipeline import Pipeline\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\n","d2ef5382":"df = pd.read_csv('\/kaggle\/input\/auto-insurance-claims-data\/insurance_claims.csv')\ndf.head()","0d1d9025":"df.isnull().sum()","ff687a64":"# removing column named _c39 as it contains only null values\n\ndf = df.drop(['_c39'], axis = 1)","17abadc4":"df.info()","8c11e2ea":"df['policy_bind_date'] = pd.to_datetime(df['policy_bind_date'])","a1ffae13":"df.describe().T","d4eacd93":"for i in df.columns:\n    if df[i].dtype == 'object':\n        print(i, \":\", df[i].nunique())","b326ad92":"drop_columns = ['policy_state', 'policy_csl', 'incident_date', 'incident_state', 'incident_city', 'incident_location']\ndf = df.drop(drop_columns, axis = 1)\ndf.head()","ecbe28a3":"for i in df.columns:\n    if df[i].dtype == 'object':\n        print(i, \":\", df[i].nunique())","4d3b0f6b":"df['fraud_reported'] = df['fraud_reported'].str.replace('Y', '1')\ndf['fraud_reported'] = df['fraud_reported'].str.replace('N', '0')\ndf['fraud_reported'] = df['fraud_reported'].astype(int)","c1e51a68":"df['fraud_reported'].unique()","f00d260f":"sns.countplot(df['fraud_reported'])","0b3adb1f":"def vis_data(df, x, y = 'fraud_reported', graph = 'countplot'):\n    if graph == 'hist':\n        fig = px.histogram(df, x = x)\n        fig.update_layout(title = 'Distribution of {x}'.format(x = x))\n        fig.show()\n    elif graph == 'bar':\n      fig = px.bar(df, x = x, y = y)\n      fig.update_layout(title = '{x} vs. {y}'.format(x = x, y = y))\n      fig.show()\n    elif graph == 'countplot':\n      a = df.groupby([x,y]).count()\n      a.reset_index(inplace = True)\n      no_fraud = a[a['fraud_reported'] == 0]\n      yes_fraud = a[a['fraud_reported'] == 1]\n      trace1 = go.Bar(x = no_fraud[x], y = no_fraud['policy_number'], name = 'No Fraud')\n      trace2 = go.Bar(x = yes_fraud[x], y = yes_fraud['policy_number'], name = 'Fraud')\n      fig = go.Figure(data = [trace1, trace2])\n      fig.update_layout(title = '{x} vs. {y}'.format(x=x, y = y))\n      fig.update_layout(barmode = 'group')\n      fig.show()","97691674":"vis_data(df, 'insured_sex')","00fbb23c":"vis_data(df, 'insured_education_level')","f1293a06":"vis_data(df, 'insured_occupation')","dcd128ea":"vis_data(df, 'insured_relationship')","c87f6666":"vis_data(df, 'incident_type')","3858432c":"vis_data(df, 'collision_type')","fcab1fa2":"vis_data(df, 'incident_severity')","998e4952":"vis_data(df, 'authorities_contacted')","ee59496d":"vis_data(df, 'insured_hobbies')","a2e2f12f":"hobbies = df['insured_hobbies'].unique()\nfor hobby in hobbies:\n  if (hobby != 'chess') & (hobby != 'cross-fit'):\n    df['insured_hobbies'] = df['insured_hobbies'].str.replace(hobby, 'other')\n\ndf['insured_hobbies'].unique()","4996c9c5":"df.head()","3104bb3b":"vis_data(df, 'age', 'anything', 'hist')","10f5792f":"df['age'].describe()","58e030f1":"bin_labels = ['15-20', '21-25', '26-30', '31-35', '36-40', '41-45', '46-50', '51-55', '56-60', '61-65']\nbins = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65]\n\ndf['age_group'] = pd.cut(df['age'], bins = bins, labels = bin_labels, include_lowest = True)","cbc2ef01":"vis_data(df, 'age_group')","e61b09f0":"vis_data(df, 'months_as_customer', 'not', 'hist')","0272fc86":"df['months_as_customer'].describe()","e10f5b74":"bins = [0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500]\nbin_labels = ['0-50','51-100','101-150','151-200','201-250','251-300','301-350','351-400','401-450','451-500']\n\ndf['months_as_customer_groups'] = pd.cut(df['months_as_customer'], bins = 10, labels = bin_labels, include_lowest= True)","54c33195":"vis_data(df, 'months_as_customer_groups')","15397c83":"vis_data(df, 'auto_make')","4b7a2758":"vis_data(df, 'number_of_vehicles_involved')","16a9f5f5":"vis_data(df, 'witnesses', 'fraud_reported')","63333d1b":"vis_data(df, 'bodily_injuries')","d9b1c548":"vis_data(df, 'total_claim_amount', 'y', 'hist')","94771200":"vis_data(df, 'incident_hour_of_the_day')","dbecbaa9":"vis_data(df, 'number_of_vehicles_involved')","982404f6":"vis_data(df, 'witnesses')","ac10b602":"vis_data(df, 'auto_year')","42930fc3":"df['policy_annual_premium'].describe()","99161247":"bins = list(np.linspace(0,2500, 6, dtype = int))\nbin_labels = ['very low', 'low', 'medium', 'high', 'very high']\n\ndf['policy_annual_premium_groups'] = pd.cut(df['policy_annual_premium'], bins = bins, labels=bin_labels)","a4acbf93":"vis_data(df, 'policy_annual_premium_groups')\n","1e024d25":"df['policy_deductable'].describe()","490a109e":"bins = list(np.linspace(0,2000, 5, dtype = int))\nbin_labels = ['0-500', '501-1000', '1001-1500', '1501-2000']\n\ndf['policy_deductable_group'] = pd.cut(df['policy_deductable'], bins = bins, labels = bin_labels)\n\nvis_data(df, 'policy_deductable_group')","10290f68":"vis_data(df, 'property_damage')","2d4454cb":"vis_data(df, 'police_report_available')","7ef4049a":"#removing columns for which we created groups\ndf = df.drop(['age', 'months_as_customer', 'policy_deductable', 'policy_annual_premium'], axis = 1)\ndf.columns","4802eca3":"required_columns = ['policy_number', 'insured_sex', 'insured_education_level', 'insured_occupation',\n       'insured_hobbies', 'capital-gains', 'capital-loss', 'incident_type', 'collision_type', 'incident_severity',\n       'authorities_contacted', 'incident_hour_of_the_day', 'number_of_vehicles_involved',\n       'witnesses', 'total_claim_amount',\n       'injury_claim', 'property_claim', 'vehicle_claim',\n       'fraud_reported', 'age_group',\n       'months_as_customer_groups', 'policy_annual_premium_groups']\n\nprint(len(required_columns))","216297b7":"df1 = df[required_columns]\n\ncorr_matrix = df1.corr()\n\nfig = go.Figure(data = go.Heatmap(\n                                z = corr_matrix.values,\n                                x = list(corr_matrix.columns),\n                                y = list(corr_matrix.index)))\n\nfig.update_layout(title = 'Correlation')\n\nfig.show()","306b7f05":"t = df['total_claim_amount'].iloc[1]\na = df['vehicle_claim'].iloc[1]\nb = df['property_claim'].iloc[1]\nc = df['injury_claim'].iloc[1]\n\nprint(t)\na+b+c","91ead795":"required_columns = ['insured_sex', 'insured_occupation',\n       'insured_hobbies', 'capital-gains', 'capital-loss', 'incident_type', 'collision_type', 'incident_severity',\n       'authorities_contacted', 'incident_hour_of_the_day', 'number_of_vehicles_involved',\n       'witnesses', 'total_claim_amount', 'fraud_reported', 'age_group',\n       'months_as_customer_groups', 'policy_annual_premium_groups']\n\nprint(len(required_columns))","328a7946":"df1 = df1[required_columns]\ndf1.head()","89842537":"cat_cols = ['age_group', 'months_as_customer_groups', 'policy_annual_premium_groups']\nfor col in cat_cols:\n  df1[col] = df1[col].astype('object')\n\ncolumns_to_encode = []\nfor col in df1.columns:\n  if df1[col].dtype == 'object':\n    columns_to_encode.append(col)\n\ncolumns_to_encode","f90af9d4":"df1.info()","265ae03d":"df1.head()","c4109110":"df2 = pd.get_dummies(df1, columns = columns_to_encode)\n\ndf2.head()","df571604":"features = []\nfor col in df2.columns:\n  if col != 'fraud_reported':\n    features.append(col)\n\ntarget = 'fraud_reported'\n\nX = df2[features]\ny = df2[target]","15a88513":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nX = sc.fit_transform(X)","2acd3b95":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 1)","04d52567":"lr = LogisticRegression()\n\nlr.fit(X_train, y_train)\npreds = lr.predict(X_test)\n\nscore = lr.score(X_test, y_test)\nprint(score)","1ceb3d1b":"print(classification_report(y_test, preds))","2a5e327d":"oversample = SMOTE(random_state=9)","98ca099b":"X_train, X_test, y_train, y_test = train_test_split(X_over, y_over, random_state = 1)","100ef981":"X_over, y_over = oversample.fit_resample(X_train, y_train)","7f0329d6":"lr.fit(X_train, y_train)\npreds = lr.predict(X_test)\nscore = lr.score(X_test, y_test)\nprint(score)\nprint()\nprint(classification_report(y_test, preds))","353ff804":"dtc = DecisionTreeClassifier()\n\ndtc.fit(X_train, y_train)\npreds = dtc.predict(X_test)\n\nscore = dtc.score(X_test, y_test)\nprint(score)\nprint()\nprint(classification_report(y_test, preds))","f09fb061":"from sklearn.ensemble import RandomForestClassifier","a6078a8c":"rfc = RandomForestClassifier(random_state = 1)\nrfc.fit(X_train, y_train)","6df5e36b":"preds = rfc.predict(X_test)\n\nscore = rfc.score(X_test, y_test)\nprint(score*100)\nprint()\nprint(classification_report(y_test, preds))","c8f01a03":"#implementing \n\nsvc = SVC(kernel='linear')\nsvc.fit(X_train, y_train)\n\npreds = svc.predict(X_test)\n\nprint('Score:' , svc.score(X_test, y_test))\nprint('Classification report:', classification_report(y_test, preds))","a6927f90":"degrees = [2,3,4,5,6,7,8]\nkernels = ['poly', 'rbf', 'sigmoid']\nc_value = [1,2,3]","e942f3a0":"scores = {}\nfor degree in degrees:\n    for kernel in kernels:\n        for c in c_value:\n            svc_t = SVC(kernel = kernel, degree = degree, C = c)\n            svc_t.fit(X_train, y_train)\n            \n            preds = svc_t.predict(X_test)\n            score = svc_t.score(X_test,y_test)\n#             print('Score with degree as {d}, kernel as {k}, C as {c} is:'.format(d = degree, k = kernel, c = c), score)\n            scores['Score with degree as {d}, kernel as {k}, C as {c} is best'.format(d = degree, k = kernel, c = c)] = score\n\nprint(max(scores, key=scores.get))","3ae1213b":"svc_tuned = SVC(kernel='sigmoid', degree = 2, C = 3)\nsvc_tuned.fit(X_train, y_train)\n\npreds = svc_tuned.predict(X_test)\n\nprint('Score:' , svc_tuned.score(X_test, y_test))\nprint('Classification report:', classification_report(y_test, preds))","c291c5ae":"rfc_tuned = RandomForestClassifier(n_estimators = 1000, random_state = 1, min_samples_split = 2)\nrfc_tuned.fit(X_train, y_train)\npreds_tuned = rfc_tuned.predict(X_test)\nscore = rfc_tuned.score(X_test, y_test)\nprint(score)","a02fd260":"n_estimators = [100, 300, 500, 800, 1200]\nmax_depth = [5, 8, 15, 25, 30]\nmin_samples_split = [2, 5, 10, 15, 100]\nmin_samples_leaf = [1, 2, 5, 10] \n\nhyper = dict(n_estimators = n_estimators, max_depth = max_depth,  \n              min_samples_split = min_samples_split, \n             min_samples_leaf = min_samples_leaf)\n\ngrid = GridSearchCV(rfc, hyper, cv = 3, verbose = 1, \n                      n_jobs = -1)\nbest = grid.fit(X_train, y_train)","46d99a38":"print(best)","b9e0e9c6":"rfc_tuned = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,\n                                              class_weight=None,\n                                              criterion='gini', max_depth=None,\n                                              max_features='auto',\n                                              max_leaf_nodes=None,\n                                              max_samples=None,\n                                              min_impurity_decrease=0.0,\n                                              min_impurity_split=None,\n                                              min_samples_leaf=1,\n                                              min_samples_split=2,\n                                              min_weight_fraction_leaf=0.0,\n                                              n_estimators=100, n_jobs=None,\n                                              oob_score=False, random_state=1,\n                                              verbose=0, warm_start=False)\n\nrfc_tuned.fit(X_train, y_train)\npreds_tuned = rfc_tuned.predict(X_test)\n\nscore = rfc_tuned.score(X_test, y_test)\n\nprint(score)","e049d778":"## Splitting in train and test data","c111a2dd":"We will use the LogisticRegression we defined earlier","68a849b0":"From the correlation matrix, we see there is high correlation between `vehicle claim`, `total_claim_amount`, `property_claim` and `injury_claim`\n\nThe reason for it is that `total_claim_amount` is the sum of columns `vehicle claim`,`property_claim` and `injury_claim`.\n\nWe will remove the other 3 columns and only keep `total_claim_amount` as it captures the information and removes collinearity.","1dfcfaf2":"## Again, no improvement","674e1cdd":"While there are significant numbers of false claims in front and side collisions, rear collisions are the highest.\n\nThis data is for the US and there, many people use dash cams while driving to record whatever is happening while they drive. In rear collisions, the footage from dash cams is not very helpful to onclusively prove whose mistake it was (insurance owner or other car owner). Maybe that is the reason for more fradulent claims in rear collisions.","fb797f26":"## Decision Tree","546d5f52":"Based on the EDA, we remove some of the columns","c9803086":"## Encoding data for modelling","ca085ef2":"In SVC, we can change the kernel and degree inorder to improve our model. We will do that & see if accuracy improves.","491ec4e7":"We will drop some of the columns: `policy_state', 'policy_csl', 'incident_date', 'incident_state', 'incident_city' and 'incident_location`","03f1feee":"We will bin the ages and then check the trend for fraud vs. no fraud according to age.","7db47143":"People in the age group of 31-35 and 41-45 have more number of frauds","916e392f":"**Note: As pointed out in the comments, the SMOTE was applied incorrectly over all the data (training and test). It should have been applied only on train data as applying it on test data leads to data leakage. Therefore, rectifying the error and applying SMOTE only on train data.**","f596625c":"## Accuracy increased to 89.6% from 88% using SVM classifier with hyperparameter tuning.\nThis is the best score we have got till now various ML algorithms we tried.","66d96276":"## GridSearch","47e79bf1":"There are no null values in the dataset.","1ddd1c24":"# Conclusion\n\n## Out of all the algorithms, we got best accuracy (89.6%) with SVM classifier and hyperparameter tuning. \n\nWe were able to increase our accuracy from 84% to ~90% using data cleaning, feature engineering, feature selection and hyperparameter tuning.\n\n### Upvote and like if you find it useful :)","c35a43a8":"## Scaling","361b06c0":"`fraud_reported` is going to be our target column. We will convert it to 1 and 0.","2d69d489":"Multi-vehicle and single vehicle collisions have more number of frauds compared to parked and vehicle theft. One of the reasons could be that in a collision, there is high possibility of more damage to car, as well as the passengers and hence the need to file false insurance claims.","34880e5e":"From the data, it looks like people in exec-managerial positions have more number of frauds compared to other occupations.\n\nSales, tech-support and transport moving also have relatively high cases of fraud.","b530cf28":"Like we did for the age column, we will create a new column grouping the months_as_customer column data.","536afacb":"## There is no improvement","ef502210":"Here, compared to minor damage, total loss and trivial damage, fraudulent claims are highest in major damage.\n\nOne reason could be that the high amount of repair cost which will be incurred by the insurer due to major damage. ","1ffc9ad1":"# Modelling","e8a3c556":"`policy_deductable`: In an insurance policy, the deductible is the amount paid out of pocket by the policy holder before an insurance provider will pay any expenses.","74746496":"## Logistic Regression","3a5f6807":"There was no improvement. We will use GridSearch to check for the best parameters ad use them for tuning.","f475408b":"## Features and Target","24d9dc63":"## Synthetic Minority Over-sampling Technique (SMOTE)\n\nWe saw that our data is not balanced. Therefore, we will apply SMOTE and then predict.","6b6d8777":"One thing which is striking in this graph is that people with chess and cross-fit as hobby have extremely high number of fraudulent claims.\n\nWe will keep them and rename other values as 'other'","5ec32252":"## Random Forest","5ae3d775":"# Hyperparameter Tuning","89185642":"## Using SVC with default values gave us good results with 88% accuracy.","b8584c9e":"Our data is very imbalanced.","e1c5c476":"We will visualize the data and see if there is any feature which might influence the claims","e9092ba5":"There doesn't seem to be need to change column data types except for `policy_bind_date` which we will convert to `datetime` type","f876aa32":"Keeping only the `total_claim_amount` column from these.","009bdcf3":"# EDA and cleaning","945b9dde":"Using the best parameters from GridSearch"}}