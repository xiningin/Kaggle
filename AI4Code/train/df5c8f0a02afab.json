{"cell_type":{"5f732177":"code","cf339f56":"code","bd0a3685":"code","05197684":"code","ac7a3dee":"code","dd78e646":"code","af0c9a7b":"code","8b7edcff":"code","24f65c82":"code","1c58e369":"code","d72f62d8":"code","fd4baa5f":"code","a92138e3":"code","78c180ef":"code","db469e13":"code","0b1ca8c5":"code","3a716368":"code","345d2f2f":"code","847877e3":"code","77248c83":"code","c38b61de":"code","157aa2eb":"code","50752524":"code","4f3cb8ea":"code","56e55309":"code","4d3c2770":"code","5029a506":"code","25ee8542":"code","3346c016":"code","82c62a8c":"code","b062fec3":"code","cc6fa04e":"code","1b44c0e0":"code","b11f6624":"code","210cb3e8":"code","6cf322d6":"code","bfd47835":"code","cc0ef107":"code","d8b39923":"code","26d513cb":"code","6d6138d7":"code","7ef5a337":"code","7362744b":"code","2c0fd810":"code","5baa0483":"code","4f0de094":"code","611f6b34":"code","a9594ec6":"code","a979e59b":"code","428d175f":"code","781c8fc6":"code","fad3f263":"code","6d20569d":"code","fe4323f4":"code","66f19642":"code","971d69ec":"code","d249638a":"code","14df8d2c":"code","6fd9160a":"code","272fddcc":"code","241d0884":"code","26ff2bab":"code","4f8cf756":"code","5064a2b9":"code","db1a7fca":"code","5336e0df":"code","e896a450":"code","56077767":"code","1c0690dd":"code","73add464":"code","e32c60f0":"code","61b8dba3":"code","7f6dce93":"code","886b1f56":"code","95be35fe":"code","55cf1d91":"code","f0e0182a":"code","e206fcbc":"code","3da3781e":"code","82ce1c8f":"code","d2915a01":"code","eb63927f":"code","add5a307":"code","6572236b":"code","7b48087d":"code","e233f654":"code","663cc3d3":"code","1ca3c620":"code","54ebfb87":"code","af37e3f7":"code","14fdf1bc":"code","4c3c0222":"code","d3c76738":"code","1ef51b54":"code","40316ca5":"code","c4d0db5f":"code","da5791b7":"code","a816f4b4":"code","8b9bf47d":"code","6c0d9f06":"code","4de892f4":"code","35a0f7f6":"code","6504f5c2":"code","a3a7e93e":"code","52fe71d8":"code","7ee53c21":"code","c03c5f4f":"code","0964052f":"code","7e98b0dc":"code","3b62953a":"code","a7183628":"code","358f4ea4":"code","27f4b1de":"code","37e42972":"code","cf6bf0af":"code","39c08374":"code","b37ed8c5":"code","f6659f31":"code","ac3d1b7a":"code","c0ce4e41":"code","89569996":"code","3fe553d0":"code","707f93bd":"code","4782b2bb":"code","2e97eee9":"code","c6fdee7b":"code","aa31ac22":"code","d36cbaa3":"code","e6466c31":"code","4bb7be6c":"code","a1069c9c":"markdown","b4ae87c1":"markdown","b478b1aa":"markdown","411c5ab7":"markdown","7b1470c0":"markdown","b1ea3b19":"markdown","858cf56e":"markdown","329c53e5":"markdown","16719ea4":"markdown","041cf0b2":"markdown","4dd4dd96":"markdown","02e91eeb":"markdown","6009e28a":"markdown","3bdbe187":"markdown","2e5bc6cb":"markdown","9f5cd0b6":"markdown","2eeab618":"markdown","6acffb69":"markdown","9d5d29cd":"markdown","7bea5058":"markdown","3549643a":"markdown","0667ba1e":"markdown","6ec60b80":"markdown","a48e823d":"markdown","8ba3868c":"markdown","29baba84":"markdown","6981089e":"markdown","dd48a11f":"markdown","cf829c0c":"markdown","23d48962":"markdown","81d7fdfc":"markdown","9378d572":"markdown","ae0ec707":"markdown","0bbcbaae":"markdown","263e686c":"markdown","9785d963":"markdown","f6f606b2":"markdown","a1314629":"markdown","957c83ca":"markdown","5a3c07c4":"markdown","8fa5c318":"markdown","eb9e5b5a":"markdown","0e7d78b7":"markdown","8fc433a2":"markdown","b4bc1298":"markdown","1e8c74df":"markdown","8ba1d864":"markdown","b1863757":"markdown","c393da0c":"markdown","38ccbccd":"markdown","75cd65a0":"markdown","743c68e9":"markdown","e86d227c":"markdown","4a135721":"markdown","bffd8a6d":"markdown","989d134a":"markdown","bf0492ed":"markdown","c300da31":"markdown","f1a5c017":"markdown","76463d9c":"markdown","b16dd0bb":"markdown","bb7517c5":"markdown","cfe4471b":"markdown","06a382c8":"markdown","8389685e":"markdown","308c2871":"markdown","c6710c2c":"markdown","ff42d594":"markdown","8d22e1fc":"markdown","701b8f97":"markdown","0c1d91c9":"markdown","651fab1b":"markdown","4d87f754":"markdown","fe136aa6":"markdown","8b310efa":"markdown","3a68aba2":"markdown","ec25f60b":"markdown","c949a43e":"markdown","208ad669":"markdown","206b0383":"markdown","f57753bb":"markdown"},"source":{"5f732177":"import pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom datetime import date\nfrom scipy import stats\nfrom scipy.stats import norm, skew #for some statistics\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.colors import n_colors\nfrom plotly.subplots import make_subplots\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\npd.set_option(\"display.max_columns\",None)\npd.set_option(\"display.max_rows\",None)\nplt.style.use('seaborn')\n\nfrom collections import Counter\nimport datetime\nimport wordcloud\nimport json","cf339f56":"df = pd.read_csv('..\/input\/startup-success-prediction\/startup data.csv')","bd0a3685":"df.head(10)","05197684":"df.info()","ac7a3dee":"df.columns","dd78e646":"numeric=['int8', 'int16', 'int32', 'int64', 'float16', 'float32', 'float64']\ndf_num=df.select_dtypes(include=numeric)\ndf_num.head(3)","af0c9a7b":"df_cat=df.select_dtypes(include='object')\ndf_cat.head(3)","8b7edcff":"df['status'] = df.status.map({'acquired':1, 'closed':0})\ndf","24f65c82":"#Tipe data status diganti dari object ke int\ndf['status'].astype(int)","1c58e369":"#labels dan status\nfor index, row in df.iterrows():\n    if row['labels']!=row['status']:\n        print(index, row['labels'], row['status'])","d72f62d8":" df.drop([\"labels\"], axis=1, inplace=True)","fd4baa5f":"describeNum = df.describe(include =['float64', 'int64', 'float', 'int'])\ndescribeNum.T.style.background_gradient(cmap='viridis',low=0.2,high=0.1)","a92138e3":"describeNumCat = df.describe(include=[\"O\"])\ndescribeNumCat.T.style.background_gradient(cmap='viridis',low=0.2,high=0.1)\n","78c180ef":"cats = ['state_code','zip_code','id','city','Unnamed: 6','name','founded_at','closed_at','first_funding_at','last_funding_at','state_code.1','category_code','object_id','status'] \nfor col in cats:\n    print(f'''Value count kolom {col}:''')\n    print(df[col].value_counts())\n    print()","db469e13":"null=pd.DataFrame(df.isnull().sum(),columns=[\"Null Values\"])\nnull[\"% Missing Values\"]=(df.isna().sum()\/len(df)*100)\nnull = null[null[\"% Missing Values\"] > 0]\nnull.style.background_gradient(cmap='viridis',low =0.2,high=0.1) ","0b1ca8c5":"# Checking Missing Values Column \ndf[[\"Unnamed: 6\", \"closed_at\", \"age_first_milestone_year\", \"age_last_milestone_year\", \"state_code.1\", \"status\"]].head(4)","3a716368":"df['Unnamed: 6'] = df.apply(lambda row: (row.city) + \" \" + (row.state_code) + \" \" +(row.zip_code)  , axis = 1)\ndf.head()","345d2f2f":"# Total Missing Values kolom \"Unnamed: 6\"\ntotalNull = df['Unnamed: 6'].isnull().sum()\n\nprint('Total Missing Values Kolom \"Unnamed: 6\": ', totalNull)","847877e3":"#diisi kosong\ndf['closed_at'] = df['closed_at'].fillna(value=\"31\/12\/2013\")","77248c83":"#datetoday\n#option\n# df['closed_at']=df['closed_at'].fillna(date.today())\n","c38b61de":"totalNull = df['closed_at'].isnull().sum()\n\nprint('Total Missing Values Kolom \"closed_at\": ', totalNull)","157aa2eb":"df[['age_first_milestone_year','age_last_milestone_year','milestones']].head()","50752524":"df['age_first_milestone_year'] = df['age_first_milestone_year'].fillna(value=\"0\")\ndf['age_last_milestone_year'] = df['age_last_milestone_year'].fillna(value=\"0\")","4f3cb8ea":"for index, row in df.iterrows():\n    if row['state_code']!=row['state_code.1']:\n        print(index, row['state_code'], row['state_code.1'])","56e55309":"df.drop([\"state_code.1\"], axis=1, inplace=True)","4d3c2770":"null=pd.DataFrame(df.isnull().sum(),columns=[\"Null Values\"])\nnull[\"% Missing Values\"]=(df.isna().sum()\/len(df)*100)\nnull = null[null[\"% Missing Values\"] > 0]\nnull.style.background_gradient(cmap='viridis',low =0.2,high=0.1) ","5029a506":"df.corr()","25ee8542":"df['age_first_milestone_year'] = df.age_first_milestone_year.astype(float)\ndf['age_last_milestone_year'] = df.age_last_milestone_year.astype(float)","3346c016":"features = ['age_first_funding_year','age_last_funding_year','age_first_milestone_year','age_last_milestone_year','relationships','funding_rounds','funding_total_usd','milestones','is_CA','is_NY','is_MA','is_TX','is_otherstate','is_software','is_web','is_mobile','is_enterprise','is_advertising','is_gamesvideo','is_ecommerce','is_biotech','is_consulting','is_othercategory','has_VC','has_angel','has_roundA','has_roundB','has_roundC','has_roundD','avg_participants','is_top500','status']\n\nplt.figure(figsize=(30,20))\nax = sns.heatmap(data = df[features].corr(),cmap='YlGnBu',annot=True)\n\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5,top - 0.5)","82c62a8c":"# 'SalePrice' correlation matrix (zoomed heatmap style)\n\n#number of variables for heatmap\ncols = df[features].corr().nlargest(10,'status')['status'].index\ncm = np.corrcoef(df[cols].values.T) \nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, cmap='YlGnBu', fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","b062fec3":"fig, ax = plt.subplots()\n_ = plt.scatter(x=df['age_first_funding_year'], y=df['age_last_funding_year'], edgecolors=\"#000000\", linewidths=0.5)\n_ = ax.set(xlabel=\"age_first_funding_year\", ylabel=\"age_last_funding_year\")","cc6fa04e":"fig, ax = plt.subplots()\n_ = plt.scatter(x=df['has_roundB'], y=df['funding_rounds'], edgecolors=\"#000000\", linewidths=0.5)\n_ = ax.set(xlabel=\"has_roundB\", ylabel=\"funding_rounds\")","1b44c0e0":"fig, ax = plt.subplots()\n_ = plt.scatter(x=df['has_roundC'], y=df['funding_rounds'], edgecolors=\"#000000\", linewidths=0.5)\n_ = ax.set(xlabel=\"has_roundC\", ylabel=\"funding_rounds\")","b11f6624":"fig, ax = plt.subplots()\n_ = plt.scatter(x=df['status'], y=df['relationships'], edgecolors=\"#000000\", linewidths=0.5)\n_ = ax.set(xlabel=\"status\", ylabel=\"relationships\")","210cb3e8":"fig, ax = plt.subplots()\n_ = plt.scatter(x=df['status'], y=df['milestones'], edgecolors=\"#000000\", linewidths=0.5)\n_ = ax.set(xlabel=\"status\", ylabel=\"milestones\")","6cf322d6":"featuresNum = ['age_first_funding_year','age_last_funding_year','relationships','funding_rounds','funding_total_usd','milestones','avg_participants']\n\nplt.figure(figsize=(15, 7))\nfor i in range(0, len(featuresNum)):\n    plt.subplot(1, len(featuresNum), i+1)\n    sns.boxplot(y=df[featuresNum[i]], color='green', orient='v')\n    plt.tight_layout()","bfd47835":"cdf = df[\"founded_at\"].apply(lambda x: '' + x[:2]).value_counts() \\\n            .to_frame().reset_index() \\\n            .rename(columns={\"index\": \"year\", \"founded_at\": \"No_of_startup\"})\n\nfig, ax = plt.subplots()\n_ = sns.barplot(x=\"year\", y=\"No_of_startup\", data=cdf, \n                palette=sns.color_palette(['#003f5c', '#ffa600'], n_colors=7), ax=ax)\n_ = ax.set(xlabel=\"Year\", ylabel=\"No. of startup\")","cc0ef107":"df[\"founded_at\"].apply(lambda x: '20:' + x[:2]).value_counts(normalize=False)","d8b39923":"df[\"founded_at\"].apply(lambda x: '20:' + x[:2]).value_counts(normalize=True)","26d513cb":"df[\"closed_at\"].apply(lambda x: '20:' + x[:2]).value_counts(normalize=True)","6d6138d7":"df_acquired = df[(df[\"status\"] == True)]\ndf_acquired.shape","7ef5a337":"df_closed = df[(df[\"status\"] == False)]\ndf_closed.shape","7362744b":"value_counts = df[\"status\"].value_counts().to_dict()\nfig, ax = plt.subplots()\n_ = ax.pie(x=[value_counts[False], value_counts[True]], labels=['No', 'Yes'], \n           colors=['#003f5c', '#ffa600'], textprops={'color': '#040204'})\n_ = ax.axis('equal')\n_ = ax.set_title('Startup Acquired')","2c0fd810":"coba = df[(df[\"status\"] == 1)]","5baa0483":"features = coba[[\"has_VC\",\"has_angel\",\"has_roundA\",\"has_roundB\",\"has_roundC\",\"has_roundD\"]]","4f0de094":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nfig, ax = plt.subplots(figsize=(12,8))\n\na= np.random.choice([\"{}\".format(i) for i in [1,2,3,4,5,6]], size=(12,8))\ncoba = pd.DataFrame(a, columns=[\"has_{}\".format(i) for i in list(\"features\")])\n\nsns.countplot(x=\"variable\", hue=\"value\",palette=\"nipy_spectral\", data=pd.melt(features))\n\nplt.show()","611f6b34":"fig, ax = plt.subplots(figsize=(12,8))\n\n_ = sns.countplot(x=\"category_code\", hue=\"status\", data=df, palette=\"nipy_spectral\",\n              order=df.category_code.value_counts().index)\n\n_ = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n_ = ax.set(xlabel=\"Category\", ylabel=\"No. of startup\")\nplt.legend(bbox_to_anchor=(0.945, 0.90))","a9594ec6":"fig, ax = plt.subplots(figsize=(12,8))\n\n_ = sns.countplot(x=\"state_code\", hue=\"status\", data=df, palette=\"nipy_spectral\",\n              order=df.state_code.value_counts().index)\n\n_ = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n_ = ax.set(xlabel=\"state_code\", ylabel=\"No. of startup\")\nplt.legend(bbox_to_anchor=(0.945, 0.90))","a979e59b":"trending_statea = df.groupby(['state_code']).size().rename('num_startup').reset_index()\n\nmost_trending_statea = trending_statea[trending_statea.groupby('state_code')['num_startup'].transform(max) == trending_statea['num_startup']]\nmost_trending_statea = most_trending_statea.sort_values('num_startup', ascending=False)\nmost_trending_statea","428d175f":"trending_statea = df_acquired.groupby(['state_code','category_code']).size().rename('num_startup').reset_index()\n\nmost_trending_statea = trending_statea[trending_statea.groupby('state_code')['num_startup'].transform(max) == trending_statea['num_startup']]\nmost_trending_statea = most_trending_statea.sort_values('num_startup', ascending=False)\nmost_trending_statea.head(10)","781c8fc6":"trending_statec = df_closed.groupby(['state_code','category_code']).size().rename('num_startup').reset_index()\n\nmost_trending_statec = trending_statec[trending_statec.groupby('state_code')['num_startup'].transform(max) == trending_statec['num_startup']]\nmost_trending_statec = most_trending_statec.sort_values('num_startup', ascending=False)\nmost_trending_statec","fad3f263":"trending_categorya = df_acquired.groupby(['city','category_code']).size().rename('num_startup').reset_index()\n\nmost_trending_categorya = trending_categorya[trending_categorya.groupby('city')['num_startup'].transform(max) == trending_categorya['num_startup']]\nmost_trending_categorya = most_trending_categorya.sort_values('num_startup', ascending=False)\nmost_trending_categorya","6d20569d":"trending_categoryc = df_closed.groupby(['city','category_code']).size().rename('num_startup').reset_index()\n\nmost_trending_categoryc = trending_categoryc[trending_categoryc.groupby('city')['num_startup'].transform(max) == trending_categoryc['num_startup']].reset_index()\nmost_trending_categoryc = most_trending_categoryc.sort_values('num_startup', ascending=False)\nmost_trending_categoryc","fe4323f4":"funding_sorted_category = pd.pivot_table(df,\n              index=['category_code'],\n              values=['funding_total_usd'],\n              aggfunc=['sum']\n              ).reset_index()\nfunding_sorted_category.columns = ['category_code', 'funding_total_usd']\nfunding_sorted_category = funding_sorted_category.sort_values(['funding_total_usd'], ascending = False)\nfunding_sorted_category.head(10)","66f19642":"fig, ax = plt.subplots(figsize=(15,7))\n_ = sns.barplot(x=\"category_code\", y=\"funding_total_usd\", data=funding_sorted_category,\n                palette=\"nipy_spectral\", ax=ax)\n_ = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n_ = ax.set(xlabel=\"Category\", ylabel=\"Total Funding USD\")","971d69ec":"funding_sorted_city = pd.pivot_table(df,\n              index=['city'],\n              values=['funding_total_usd'],\n              aggfunc=['sum']\n              ).reset_index()\nfunding_sorted_city.columns = ['city', 'funding_total_usd']\nfunding_sorted_city = funding_sorted_city.sort_values(['funding_total_usd'], ascending = False)\nfunding_sorted_city = funding_sorted_city.head(10)\nfunding_sorted_city","d249638a":"fig, ax = plt.subplots(figsize=(10,7))\n_ = sns.barplot(x=\"city\", y=\"funding_total_usd\", data=funding_sorted_city,\n                palette=\"nipy_spectral\", ax=ax)\n_ = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n_ = ax.set(xlabel=\"No of State\", ylabel=\"Number of Start Up\")","14df8d2c":"df_what_in_kirkland = df[(df[\"city\"] == 'Kirkland')]\ndf_what_in_kirkland.shape","6fd9160a":"df_what_in_kirkland.head()","272fddcc":"fig, ax = plt.subplots(figsize=(10,5))\n\n_ = sns.countplot(x=\"has_VC\", hue=\"status\", data=df, palette=\"nipy_spectral\",\n              order=df.has_VC.value_counts().index)\n\n_ = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n_ = ax.set(xlabel=\"Has_VC\", ylabel=\"No. of startup\")\nplt.legend(bbox_to_anchor=(0.945, 0.90))","241d0884":"fig, ax = plt.subplots(figsize=(10,5))\n\n_ = sns.countplot(x=\"is_top500\", hue=\"status\", data=df, palette=\"nipy_spectral\",\n              order=df.is_top500.value_counts().index)\n\n_ = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n_ = ax.set(xlabel=\"is_top500\", ylabel=\"No. of startup\")\nplt.legend(bbox_to_anchor=(0.945, 0.90))","26ff2bab":"#How many Startup have both 'acquired' status and is_top500?\nlen(df[(df[\"status\"] == True) & (df[\"is_top500\"] == True)].index)","4f8cf756":"#How many Startup have both 'closed' status and is_top500?\nlen(df[(df[\"status\"] == False) & (df[\"is_top500\"] == False)].index)","5064a2b9":"df_acquired[\"is_top500\"].value_counts(normalize=True)","db1a7fca":"df_closed.founded_at=pd.to_datetime(df_closed.founded_at)\ndf_closed.closed_at=pd.to_datetime(df_closed.closed_at)","5336e0df":"df_closed['age_closed_startup'] = df_closed.apply(lambda row: (row.closed_at - row.founded_at) , axis=1)","e896a450":"#df_closed['age_closed_startup'] = pd.to_numeric(df['age_closed_startup'].dt.days, downcast='int64')","56077767":"df_closed['age_closed_startup'].head()","1c0690dd":"df_closed['year'] = df_closed['age_closed_startup'].dt.days \/365","73add464":"df_closed.head(3)","e32c60f0":"(df_closed['age_closed_startup'].mean()) ","61b8dba3":"ratarata = round(2184 \/ 365) \nprint(\"Rata-Rata Startup Closed :\", ratarata ,\"tahun\")","7f6dce93":"fig, ax = plt.subplots(figsize=(17,10))\n\nsns.countplot(x=\"relationships\", hue=\"status\", data=df, palette=\"nipy_spectral\",\n              order=df.relationships.value_counts().index)\nplt.legend(bbox_to_anchor=(0.945, 0.90))","886b1f56":"fig, ax = plt.subplots(figsize=(12,8))\n\nsns.countplot(x=\"funding_rounds\", hue=\"status\", data=df, palette=\"nipy_spectral\",\n              order=df.funding_rounds.value_counts().index)\n# plt.legend(bbox_to_anchor=(0.945, 0.90))","95be35fe":"import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport shapefile as shp","55cf1d91":"import sys","f0e0182a":"'geopandas' in sys.modules","e206fcbc":"gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.longitude, df.latitude))","3da3781e":"print(gdf.head())","82ce1c8f":"duplicate = df[df.duplicated()] \n  \nprint(\"Duplicate Rows :\")","d2915a01":"#ganti data type ke numerical untuk boxplot\ndf['age_first_milestone_year'] = df.age_first_milestone_year.astype(float)\ndf['age_last_milestone_year'] = df.age_last_milestone_year.astype(float)","eb63927f":"featuresNumfinal = ['age_first_funding_year','age_last_funding_year','age_first_milestone_year','age_last_milestone_year','funding_total_usd','avg_participants']\n\nplt.figure(figsize=(15, 7))\nfor i in range(0, len(featuresNumfinal)):\n    plt.subplot(1, len(featuresNumfinal), i+1)\n    sns.boxplot(y=df[featuresNumfinal[i]], color='green', orient='v')\n    plt.tight_layout()","add5a307":"def drop_outliers(df, field_name):\n    iqr = 1.5 * (np.percentile(df[field_name], 75) - np.percentile(df[field_name], 25))\n    df.drop(df[df[field_name] > (iqr + np.percentile(df[field_name], 75))].index, inplace=True)\n    df.drop(df[df[field_name] < (np.percentile(df[field_name], 25) - iqr)].index, inplace=True)","6572236b":"# drop_outliers(df, 'age_first_funding_year')\n# drop_outliers(df, 'age_last_funding_year')\n# drop_outliers(df, 'age_first_milestone_year')\n# drop_outliers(df, 'age_last_milestone_year')\ndrop_outliers(df, 'funding_total_usd')","7b48087d":"# featuresNumfinal = ['age_first_funding_year','age_last_funding_year','age_first_milestone_year','age_last_milestone_year','funding_total_usd']\n\n# plt.figure(figsize=(15, 7))\n# for i in range(0, len(featuresNumfinal)):\n#     plt.subplot(1, len(featuresNumfinal), i+1)\n#     sns.boxplot(y=df[featuresNumfinal[i]], color='green', orient='v')\n#     plt.tight_layout()","e233f654":"age=[\"age_first_funding_year\",\"age_last_funding_year\",\"age_first_milestone_year\",\"age_last_milestone_year\"]\n\nfor a in range(len(age)):\n    print(\"Is there any negative value in '{}' column  : {} \".format(age[a],(df[age[a]]<0).any()))","663cc3d3":"df=df.drop(df[df.age_first_funding_year<0].index)\ndf=df.drop(df[df.age_last_funding_year<0].index)\ndf=df.drop(df[df.age_first_milestone_year<0].index)\ndf=df.drop(df[df.age_last_milestone_year<0].index)","1ca3c620":"# # Get the absolute value of columns including negative value\n# df[\"age_first_funding_year\"]=np.abs(df[\"age_first_funding_year\"])\n# df[\"age_last_funding_year\"]=np.abs(df[\"age_last_funding_year\"])\n# df[\"age_first_milestone_year\"]=np.abs(df[\"age_first_milestone_year\"])\n# df[\"age_last_milestone_year\"]=np.abs(df[\"age_last_milestone_year\"])","54ebfb87":"for a in range(len(age)):\n    print(\"Is there any negative value in '{}' column  : {} \".format(age[a],(df[age[a]]<0).any()))","af37e3f7":"# df[\"age_first_funding_year\"] = np.log(df[\"age_first_funding_year\"])\n# df[\"age_last_funding_year\"] = np.log(df[\"age_last_funding_year\"])\n# df[\"age_first_milestone_year\"] = np.log(df[\"age_first_milestone_year\"])\n# df[\"age_last_milestone_year\"] = np.log(df[\"age_last_milestone_year\"])\n# df[\"funding_total_usd\"] = np.log(df[\"funding_total_usd\"])","14fdf1bc":"# plt.figure(figsize=(15,7),dpi=100)\n\n# df[\"age_first_funding_year\"]=np.log(df[\"age_first_funding_year\"]+1)\n# plt.subplot(2,4,1)\n# plt.xlabel(\"age_first_funding_year\")\n# plt.boxplot(df[\"age_first_funding_year\"])   \n\n# plt.subplot(2,4,5)\n# sns.distplot(df[\"age_first_funding_year\"] , color=\"green\");\n\n\n# df[\"age_last_funding_year\"]=np.log(df[\"age_last_funding_year\"]+1)\n# plt.subplot(2,4,2)\n# plt.xlabel(\"age_last_funding_year\")\n# plt.boxplot(df[\"age_last_funding_year\"])   \n\n# plt.subplot(2,4,6)\n# sns.distplot(df[\"age_last_funding_year\"], color=\"green\")\n\n\n# df[\"age_first_milestone_year\"]=np.log(df[\"age_first_milestone_year\"]+1)\n# plt.subplot(2,4,3)\n# plt.xlabel(\"age_first_milestone_year\")\n# plt.boxplot(df[\"age_first_milestone_year\"])   \n\n# plt.subplot(2,4,7)\n# sns.distplot(df[\"age_first_milestone_year\"], color=\"green\")\n\n\n# df[\"age_last_milestone_year\"]=np.log(df[\"age_last_milestone_year\"]+1)\n# plt.subplot(2,4,4)\n# plt.xlabel(\"age_last_milestone_year\")\n# plt.boxplot(df[\"age_last_milestone_year\"])   \n\n# plt.subplot(2,4,8)\n# sns.distplot(df[\"age_last_milestone_year\"], color=\"green\");\n","4c3c0222":"# print(f\"Skewness Co-efficient: {round(df.funding_total_usd.skew(), 3)}\")\n# fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5), dpi=300)\n\n# ## Histogram \n# sns.distplot(df['funding_total_usd'] , fit=stats.norm, ax=ax1)\n# ax1.set_title('Histogram')\n\n# ## Probability \/ QQPLOT\n# stats.probplot(df['funding_total_usd'], plot=ax2)\n\n# plt.show()","d3c76738":"# df[\"funding_total_usd\"] = np.log1p(df[\"funding_total_usd\"])\n\n# ##### GET SKEWNESS #####\n# print(f\"Skewness Co-efficient: {round(df.funding_total_usd.skew(), 3)}\")\n\n# fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5), dpi=300)\n\n# ##### HISTOGRAM #####\n# from scipy import stats\n# sns.distplot(df['funding_total_usd'] , fit=stats.norm, ax=ax1)\n# ax1.set_title('Histogram')\n\n# ##### PROBABILITY \/ QQ PLOT #####\n# stats.probplot(df['funding_total_usd'], plot=ax2)\n\n# plt.show()","1ef51b54":"df['has_RoundABCD'] = np.where((df['has_roundA'] == 1) | (df['has_roundB'] == 1) | (df['has_roundC'] == 1) | (df['has_roundD'] == 1), 1, 0)\ndf.head()","40316ca5":"df['has_Investor'] = np.where((df['has_VC'] == 1) | (df['has_angel'] == 1), 1, 0)\ndf.head()","c4d0db5f":"len(df[(df[\"has_RoundABCD\"] == 1)].index)","da5791b7":"len(df[ (df['has_RoundABCD']  == 1) & (df['status']  == 1) ].index)","a816f4b4":"len(df)","8b9bf47d":"923-490","6c0d9f06":"df['has_Seed'] = np.where((df['has_RoundABCD'] == 0) & (df['has_Investor'] == 1), 1, 0)\ndf.head()","4de892f4":"df['has_Seed'] == 1","35a0f7f6":"len(df[(df[\"has_Seed\"] == 1)].index)","6504f5c2":"df['invalid_startup'] = np.where((df['has_RoundABCD'] == 0) & (df['has_VC'] == 0) & (df['has_angel'] == 0), 1, 0)\ndf.head()","a3a7e93e":"len(df[(df[\"invalid_startup\"] == 1)].index)","52fe71d8":"df.founded_at=pd.to_datetime(df.founded_at)\ndf.closed_at=pd.to_datetime(df.closed_at)","7ee53c21":"df['age_closed_startup'] = df.apply(lambda row: (row.closed_at - row.founded_at) , axis=1)","c03c5f4f":"df['age_closed_startup'].head()","0964052f":"df['startUp_age_year'] = df['age_closed_startup'].dt.days \/365","7e98b0dc":"df.head()","3b62953a":"df = df.drop(['state_code','id','Unnamed: 6','category_code','object_id'],axis=1)\ndf = df.drop(['zip_code','founded_at','closed_at','first_funding_at','last_funding_at','city','name'],axis=1)\ndf = df.drop(['Unnamed: 0'],axis=1)\ndf = df.drop(['latitude','longitude'],axis=1)\ndf = df.drop(['geometry'],axis=1)\n\ndf = df.drop(['age_closed_startup'],axis=1)","a7183628":"# df['age_first_milestone_year'].astype(str).astype(float)\n# df['age_last_milestone_year'].astype(str).astype(float)\n\ndf['age_first_milestone_year'] = df.age_first_milestone_year.astype(float)\ndf['age_last_milestone_year'] = df.age_last_milestone_year.astype(float)","358f4ea4":"#Cek categorical\ncat_feature = df.select_dtypes(include='object')\ncat_feature.head()","27f4b1de":"from sklearn.model_selection import train_test_split\n# Split the data\n# Input\/independent variables\nX = df.drop('status', axis = 1) # her we are droping the output feature as this is the target and 'X' is input features, the changes are not \n                                              # made inplace as we have not used 'inplace = True'\n\ny = df['status'] # Output\/Dependent variable\n# train_x, test_x,train_y,test_y = train_test_split(X,y)","37e42972":"# # Scaling the data\n# from sklearn.preprocessing import StandardScaler\n# sc = StandardScaler()\n# X =  sc.fit_transform(X)\n# X","cf6bf0af":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","39c08374":"# lets print the shapes again \nprint(\"Shape of the X Train :\", X_train.shape)\nprint(\"Shape of the y Train :\", y_train.shape)\nprint(\"Shape of the X test :\", X_test.shape)\nprint(\"Shape of the y test :\", y_test.shape)\n","b37ed8c5":"# Model Build\nfrom sklearn.metrics import confusion_matrix, classification_report,accuracy_score,roc_curve, auc, precision_recall_curve, f1_score\nimport warnings\nwarnings.filterwarnings('ignore')","f6659f31":"import lightgbm as lgb\n#lightGBM model fit\ngbm = lgb.LGBMRegressor()\ngbm.fit(X_train,y_train)\ngbm.booster_.feature_importance()\n\n\n# importance of each attribute\nfea_imp_ = pd.DataFrame({'cols':X.columns, 'fea_imp':gbm.feature_importances_})\nfea_imp_.loc[fea_imp_.fea_imp > 0].sort_values(by=['fea_imp'], ascending = False)","ac3d1b7a":"from sklearn.feature_selection import RFE\n# create the RFE model and select 10 attributes\nrfe = RFE(gbm, 10)\nrfe = rfe.fit(X_train,y_train)\n\n# summarize the selection of the attributes\nprint(rfe.support_)\n\n# summarize the ranking of the attributes\nfea_rank_ = pd.DataFrame({'cols':X.columns, 'fea_rank':rfe.ranking_})\nfea_rank_.loc[fea_rank_.fea_rank > 0].sort_values(by=['fea_rank'], ascending = True)","c0ce4e41":"from lightgbm import LGBMClassifier\nclf = LGBMClassifier(learning_rate=0.02,\n                    boosting_type='gbdt', max_depth=4,  objective='binary', \n                    random_state=100,  \n                  n_estimators=1000 ,reg_alpha=0, reg_lambda=1, n_jobs=-1)\n\n\nclf.fit(X_train,y_train)\n\ny_pred_lgb = clf.predict(X_test)\n\n\nprint(\"Training Accuracy :\", clf.score(X_train, y_train))\nprint(\"Testing Accuracy :\", clf.score(X_test, y_test))\n\ncm = confusion_matrix(y_test, y_pred_lgb)\nplt.rcParams['figure.figsize'] = (3, 3)\nsns.heatmap(cm, annot = True, cmap = 'YlGnBu', fmt = '.8g')\nplt.show()\n\ncr = classification_report(y_test, y_pred_lgb)\nprint(cr)\n\nprint(\"------------------------------------------\")\n\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,y_pred_lgb)\nroc_auc = auc(false_positive_rate, true_positive_rate)\nprint(\"ROC Curves              =\",roc_auc)\n\nprecision, recall, thresholds = precision_recall_curve(y_test, y_pred_lgb)\nf1 = f1_score(y_test, y_pred_lgb)\nPrecision_Recall_lgbm = auc(recall, precision)\nprint(\"Precision-Recall Curves =\",Precision_Recall_lgbm)","89569996":"from xgboost import XGBClassifier\n\n#train\nxgb = XGBClassifier()\n\nxgb.fit(X_train,y_train)\n\n#predict\ny_predicted_xgb = xgb.predict(X_test)\n\nprint(\"Training Accuracy :\", xgb.score(X_train, y_train))\nprint(\"Testing Accuracy :\", xgb.score(X_test, y_test))\n\n#eval\ncm = confusion_matrix(y_test, y_predicted_xgb)\nplt.rcParams['figure.figsize'] = (3, 3)\nsns.heatmap(cm, annot = True, cmap = 'YlGnBu', fmt = '.8g')\nplt.show()\n\ncr = classification_report(y_test, y_predicted_xgb)\nprint(cr)\n\nprint(\"------------------------------------------\")\n\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,y_predicted_xgb)\nroc_auc = auc(false_positive_rate, true_positive_rate)\nprint(\"ROC Curves              =\",roc_auc)\n\nprecision, recall, thresholds = precision_recall_curve(y_test, y_predicted_xgb)\nf1 = f1_score(y_test, y_predicted_xgb)\nPrecision_Recall_xgb = auc(recall, precision)\nprint(\"Precision-Recall Curves =\",Precision_Recall_xgb)","3fe553d0":"from sklearn.ensemble import GradientBoostingClassifier\n#train\ngbc = GradientBoostingClassifier(learning_rate=0.02,\n                    max_depth=4,\n                    random_state=100, n_estimators=1000)\n\n\ngbc.fit(X_train,y_train)\n\n#predict\ny_predicted_gb = gbc.predict(X_test)\n\nprint(\"Training Accuracy :\", gbc.score(X_train, y_train))\nprint(\"Testing Accuracy :\", gbc.score(X_test, y_test))\n\n#eval\ncm = confusion_matrix(y_test, y_predicted_gb)\nplt.rcParams['figure.figsize'] = (3, 3)\nsns.heatmap(cm, annot = True, cmap = 'YlGnBu', fmt = '.8g')\nplt.show()\n\ncr = classification_report(y_test, y_predicted_gb)\nprint(cr)\n\n\nprint(\"------------------------------------------\")\n\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,y_predicted_gb)\nroc_auc = auc(false_positive_rate, true_positive_rate)\nprint(\"ROC Curves              =\",roc_auc)\n\nprecision, recall, thresholds = precision_recall_curve(y_test, y_predicted_gb)\nf1 = f1_score(y_test, y_predicted_gb)\nPrecision_Recall_gbs = auc(recall, precision)\nprint(\"Precision-Recall Curves =\",Precision_Recall_gbs)","707f93bd":"0.922681496797328","4782b2bb":"from sklearn.ensemble import AdaBoostClassifier\n#train\nada = AdaBoostClassifier()\n\n\nada.fit(X_train,y_train)\n\n#predict\ny_predicted_ab = ada.predict(X_test)\n\nprint(\"Training Accuracy :\", ada.score(X_train, y_train))\nprint(\"Testing Accuracy :\", ada.score(X_test, y_test))\n\n#eval\ncm = confusion_matrix(y_test, y_predicted_ab)\nplt.rcParams['figure.figsize'] = (3, 3)\nsns.heatmap(cm, annot = True, cmap = 'YlGnBu', fmt = '.8g')\nplt.show()\n\ncr = classification_report(y_test, y_predicted_ab)\nprint(cr)\n\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,y_predicted_ab)\nroc_auc = auc(false_positive_rate, true_positive_rate)\nprint(\"roc_auc\",roc_auc)\n\nprint(\"------------------------------------------\")\n\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,y_predicted_ab)\nroc_auc = auc(false_positive_rate, true_positive_rate)\nprint(\"ROC Curves              =\",roc_auc)\n\nprecision, recall, thresholds = precision_recall_curve(y_test, y_predicted_ab)\nf1 = f1_score(y_test, y_predicted_ab)\nPrecision_Recall_abs = auc(recall, precision)\nprint(\"Precision-Recall Curves =\",Precision_Recall_abs)","2e97eee9":"from sklearn.svm import SVC\nsv = SVC()\n\nsv.fit(X_train,y_train)\n\n\ny_pred_sv = sv.predict(X_test)\n\nprint(\"Training Accuracy :\", sv.score(X_train, y_train))\nprint(\"Testing Accuracy :\", sv.score(X_test, y_test))\n\ncm = confusion_matrix(y_test, y_pred_sv)\nplt.rcParams['figure.figsize'] = (3, 3)\nsns.heatmap(cm, annot = True, cmap = 'YlGnBu', fmt = '.8g')\nplt.show()\n\ncr = classification_report(y_test, y_pred_sv)\nprint(cr)\n\nprint(\"------------------------------------------\")\n\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,y_pred_sv)\nroc_auc = auc(false_positive_rate, true_positive_rate)\nprint(\"ROC Curves              =\",roc_auc)\n\nprecision, recall, thresholds = precision_recall_curve(y_test, y_pred_sv)\nf1 = f1_score(y_test, y_pred_sv)\nPrecision_Recall_svc = auc(recall, precision)\nprint(\"Precision-Recall Curves =\",Precision_Recall_svc)","c6fdee7b":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\n\nrf.fit(X_train,y_train)\n\n\ny_pred_rf = rf.predict(X_test)\n\nprint(\"Training Accuracy :\", rf.score(X_train, y_train))\nprint(\"Testing Accuracy :\", rf.score(X_test, y_test))\n\ncm = confusion_matrix(y_test, y_pred_rf)\nplt.rcParams['figure.figsize'] = (3, 3)\nsns.heatmap(cm, annot = True, cmap = 'YlGnBu', fmt = '.8g')\nplt.show()\n\ncr = classification_report(y_test, y_pred_rf)\nprint(cr)\n\n\nprint(\"------------------------------------------\")\n\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,y_pred_rf)\nroc_auc = auc(false_positive_rate, true_positive_rate)\nprint(\"ROC Curves              =\",roc_auc)\n\nprecision, recall, thresholds = precision_recall_curve(y_test, y_pred_rf)\nf1 = f1_score(y_test, y_pred_rf)\nPrecision_Recall_rfs = auc(recall, precision)\nprint(\"Precision-Recall Curves =\",Precision_Recall_rfs)","aa31ac22":"from sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\n\nscores = {'LGBM':  { \n                             'precision_score': precision_score(y_test, y_pred_lgb),\n                             'recall_score': recall_score(y_test, y_pred_lgb)\n                         },        \n                 'GradientBoosting Classifier':  { \n                             'precision_score': precision_score(y_test, y_predicted_gb),\n                             'recall_score': recall_score(y_test, y_predicted_gb)\n                         },\n                 'Adaboost Classifier':  { \n                             'precision_score': precision_score(y_test, y_predicted_ab),\n                             'recall_score': recall_score(y_test, y_predicted_ab)\n                         },\n                 'SVC':  { \n                             'precision_score': precision_score(y_test, y_pred_sv),\n                             'recall_score': recall_score(y_test, y_pred_sv)\n                         },\n                 'XGBoost':  { \n                             'precision_score': precision_score(y_test, y_predicted_xgb),\n                             'recall_score': recall_score(y_test, y_predicted_xgb)\n                         },\n                 'Random Forest':  { \n                             'precision_score': precision_score(y_test, y_pred_rf),\n                            'recall_score': recall_score(y_test, y_pred_rf)\n                         }\n            }","d36cbaa3":"from sklearn.metrics import precision_score\n\n\nPrecision_Recall = {'LGBM':  { \n                             'Precision_Recall': Precision_Recall_lgbm\n                         },        \n                 'GradientBoosting Classifier':  { \n                             'Precision_Recall': Precision_Recall_gbs\n                         },\n                 'Adaboost Classifier':  { \n                             'Precision_Recall': Precision_Recall_abs\n                         },\n                 'SVC':  { \n                             'Precision_Recall': Precision_Recall_svc\n                         },\n                 'XGBoost':  { \n                             'Precision_Recall': Precision_Recall_xgb\n                         },\n                 'Random Forest':  { \n                             'Precision_Recall': Precision_Recall_rfs\n                         }\n            }","e6466c31":"scores = pd.DataFrame(scores)\n\n\nscores.plot(kind=\"barh\",figsize=(12, 12)).legend(loc='upper center', ncol=3, title=\"Machine Learning Model\")","4bb7be6c":"Precision_Recall = pd.DataFrame(Precision_Recall)\n\n\nPrecision_Recall.plot(kind=\"barh\",figsize=(15, 8)).legend(loc='upper center', ncol=3, title=\"Machine Learning Model\")","a1069c9c":"### Log-transformation funding_total_usd","b4ae87c1":"# Summary","b478b1aa":"berdasarkan hasil analisis diperoleh bahwa kolom **Unnamed: 6** merupakan kombinasi dari beberapa kolom lainnya diantaranya kolom **city, state_code, dan zip_code**, maka kami memutuskan bahwa menghapus isi dari kolom **Unnamed: 6** terlebih dahulu dan kemudian mengisi data berdasarkan kombinasi dari beberapa kolom terkait.","411c5ab7":"### Which State having most number of closed Startup per category","7b1470c0":"## Class imbalance","b1ea3b19":"## Pendekatan Grafis","858cf56e":"### which relationship related to acquired or closed startup?","329c53e5":"## Duplicate Values","16719ea4":"Round A, Round B,Round C, Round D, VC, Angel = 0 tadi status startup acquired ?????????\nterdapat hal aneh dari data yang ini, kemungkinan data tidak valid","041cf0b2":"## Data type identification","4dd4dd96":"### Changing 'status' data value","02e91eeb":"### Which State having most number of Startup","6009e28a":"## Random Forest","3bdbe187":"berdasarkan hasil analisis diperoleh bahwa kolom 'age_first_milestone_year' dan 'age_last_milestone_year' memiliki nilai null karena memang startup tersebut belum memiliki milestones. hal ini bisa dikonfirmasi dengan melihat kolom 'milestones' yang berisi data 0 pasti diiringi dengan kolom 'age_first_milestone_year' dan 'age_last_milestone_year' yang Null. sehingga kami memutuskan untuk mengisi kolom null tersebut dengan nilai 0.","2e5bc6cb":"### Which category having most number of total funding","9f5cd0b6":"### Handling Missing Value age_first_milestone_year and age_last_milestone_year","2eeab618":"## Feature encoding","6acffb69":"### Statistical Summary","9d5d29cd":"### Drop column labels","7bea5058":"### which funding_rounds related to acquired or closed startup?","3549643a":"### How many Startup are acquired or closed have?","0667ba1e":"## New Column \"invalid_startup\"","6ec60b80":"### How many years on average the company closes","a48e823d":"Kami melihat bahwa **'age_first_funding_year'** dan **'age_last_funding_year'** benar-benar berkorelasi positif dimana saat satu meningkat, yang lain juga meningkat \u2014 sebagian besar.","8ba3868c":"## Normalization\/Standardization","29baba84":"## LGBM Classifier","6981089e":"##### Recursive Feature Elimination(RFE)","dd48a11f":"### Box plots","cf829c0c":"### Mapping area startup ","23d48962":"### Handling 'status' data type to int ","81d7fdfc":"## SVC","9378d572":"## Data categorical","ae0ec707":"## Log-transformation of the funding and milestone year variable","0bbcbaae":"# STARTUP SUCCESS PREDICTION","263e686c":"### Which city having most number of acquired Startup per category","9785d963":"### Handling Missing Value state_code.1","f6f606b2":"dari total data yang ada sebanyak 63% startup masih berdiri sedangkan sisanya 37% sudah closed dan terbanyak closed pada tahun 2001. ","a1314629":"## Import Libraries","957c83ca":"## Missing Value ","5a3c07c4":"## XGBoost Classifier","8fa5c318":"### invest feature acquired check","eb9e5b5a":"### How many Startup have has_VC?","0e7d78b7":"# Data Exploration","8fc433a2":"## Data numeric","b4bc1298":"- **Hasil Analisis pada kolom yang terdapat Missing Values diantaranya yaitu**\n    - **Kolom \"Unnamed: 6\"** merupakan kolom informasi dari gabungan beberapa tabel diantaranya yaitu\n        - Kolom \"city\", \"state_code\", dan \"zip_code\" \n    - **Kolom \"closed_at\"** merupakan kolom dimana StartUp **\"Closed\"** sehingga data yang kosong memang harusnya merupakan StarUp yang statusnya masih **\"Acquired\"**\n    - **Kolom age_first_milestone_year** merupakan informasi kapan milestone pertama kali di lakukan dalam satuan tahun\n        - Kolom ini total memiliki 771 baris data dengan Mean 3.055353 dan median 2.520500 yang memperlihatkan distribusi datanya tidak normal\n    - **Kolom age_Last_milestone_year** merupakan informasi kapan milestone terakhir kali di lakukan dalam satuan tahun\n        - Kolom ini total memiliki 771 baris data dengan Mean 4.754423 dan median 4.476700 yang memperlihatkan distribusi datanya tidak normal","1e8c74df":"### Which city having most number of closed Startup per category","8ba1d864":"### Which category has the largest number of startup","b1863757":"### Which State having most number of acquired Startup per category","c393da0c":"### How many Startup have is_top500?","38ccbccd":"## Description","75cd65a0":"## New Column \"has_Seed\"","743c68e9":"##### Build Model","e86d227c":"### Scatter plot","4a135721":"# Feature Engineering","bffd8a6d":"### Correlation heatmap","989d134a":"## Pendekatan Numerik","bf0492ed":"## AdaBoost Classifier","c300da31":"## New Column \"has_Investor\"","f1a5c017":"## New Column \"has_RoundABCD\"","76463d9c":"- Apakah nilai yang tertera pada setiap kolom masuk akal?\n- age_first_funding_year dan age_last_funding_year memiliki data min,max yang sama, perlu dicek lagi\n- Apakah nilai maksimal\/minimal masih berada di batas wajar?\n- Min\/max yang terlalu jauh dari mean\/median bisa jadi indikasi kesalahan input data\n- Apakah ada kolom dengan perbedaan yang signifikan antara mean dan median?\n- Perbedaan antara mean\/median mengindikasikan outlier atau skewed distribution","b16dd0bb":"##### Feature importance by LGBM","bb7517c5":"## Negative value","cfe4471b":"# Data Preprocessing","06a382c8":"- kolom **\"state_code\"** and kolom **\"state_code.1\"** mestilah sama, jadi kolom **\"state_code.1\"** harus di drop.\n- kolom **\"state_code.1\"** memiliki missing value dibaris 515. ","8389685e":"## GradientBoosting Classifier","308c2871":"### Categorical Value Counting","c6710c2c":"### Which city having most number of total funding","ff42d594":"total ada 563 startup atau 60% startup yang berdiri pada tahun 2001","8d22e1fc":"###  Handling Missing Value Unnamed: 6","701b8f97":"## Problem Statement\n\n**Startup** adalah sesuatu bisnis yang baru saja berdiri dan berkembang dengan didukung oleh layanan digital dan juga telah menjadi elemen penting dari sistem inovasi dan ekonomi di seluruh dunia. Ekosistem **Startup** berkembang sangat pesat dan masih butuh banyak pendanaan untuk beroperasi dengan kelompok kerja yang minimalis. Jadi sangat penting bagi pihak VC untuk memantau kinerja dan performa dari **Startup**, sehingga dapat digunakan sebagai bahan pertimbangan untuk memutuskan apakah akan mendanai suatu Startup untuk mendorong pertumbuhannya atau menolak mengambil andil dalam pendanaan. Untuk memantau kinerja **Startup**, penting untuk menganalisis apa yang membuat sebuah Startup sukses dan bagaimana menentukan kesuksesannya.\n\n## Goals\nTujuan yang ingin dicapai yaitu dapat menentukan apakah suatu StartUp akan sukses atau tidak.\n\n## Objective\nObjective yang ingin dilakukan yaitu dengan membuat analisa behaviour StartUp berdasarkan beberapa variabel yang ada, menentukan variabel apa yang paling mempengaruhi kesuksesan StartUp, kemudian membangun model yang dapat memprediksi kesuksesan dari suatu StartUp.","0c1d91c9":"## Drop unused column for modelling","651fab1b":"## Load Dataset","4d87f754":"berdasarkan tabel korelasi di atas yang mengatakan bahwa **'views'** dan **'likes'** berkorelasi sangat positif. maka kami kemudian memverifikasi itu dengan memplot scatter plot antara **'views'** dan **'likes'** untuk memvisualisasikan hubungan antara variabel-variabel tersebut.","fe136aa6":"Sekarang bagaimana korelasi antar variabel data.\n\nKorelasi direpresentasikan sebagai nilai antara -1 dan +1 di mana +1 menunjukkan korelasi positif tertinggi, -1 menunjukkan korelasi negatif tertinggi, dan 0 menunjukkan tidak ada korelasi.","8b310efa":"##  New Column \"age_of_startup","3a68aba2":"# Modeling","ec25f60b":"# Exploratory Data Analysis","c949a43e":"### Handling Missing Value closed_at","208ad669":"- **Hasil Analisis dalam dataset yang digunakan terdapat Missing Values diantaranya yaitu**\n    - **Total Missing Values yaitu 1386**\n    - **Kolom yang memiliki lebih dari 50% dari missing values**\n        - Variabel 'closed_at' dengan total persentase sebesar 63.70% atau total 588 kolom.\n        - Variabel 'Unnamed: 6' dengan total persentase sebesar 53.41% atau total 493 kolom.\n    - **Kolom yang memiliki kurang dari 50% dari missing values**\n        - Variabel 'age_first_milestone_year' dengan total persentase sebesar 16.46% atau total 152 kolom.\n        - Variabel 'age_last_milestone_year' dengan total persentase sebesar 16.46% atau total 152 kolom.","206b0383":"### Dataset collection founded years","f57753bb":"## Outliers"}}