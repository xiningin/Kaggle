{"cell_type":{"98929143":"code","45cb020a":"code","ef1772a1":"code","4d5410d0":"code","5c4a4a95":"code","922e3ddc":"code","91efd9e7":"code","3ac487ad":"code","3a3e1de8":"code","f43e4282":"code","35b3e340":"code","61d2c40c":"code","617bf1ff":"code","f77873b0":"code","51500aaa":"code","32cddcdc":"code","d4421f58":"code","6903d098":"markdown","424bb9bf":"markdown","a3421c6e":"markdown"},"source":{"98929143":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    pass#print(dirname)\n    #for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45cb020a":"import matplotlib.pyplot as plt\nimport scipy.signal as sig\nimport scipy.io  as scio","ef1772a1":"import librosa\nimport librosa.display","4d5410d0":"os.listdir('..\/input\/')","5c4a4a95":"DRONE_FOLDER = '..\/input\/drone-rf-dataset\/Phantom drone\/RF Data_11000_L1\/'\nX_L =np.fromfile('..\/input\/drone-rf-dataset\/Phantom drone\/L_Band\/11000L_0.csv',sep=',',dtype=np.double)\nX_H = np.fromfile('..\/input\/drone-rf-dataset\/Phantom drone\/H_Band\/11000H_0.csv',sep=','\n                  ,dtype=np.double)\nbackRf_H = np.fromfile('..\/input\/drone-rf-dataset\/Background RF activites\/H_Band\/00000H_0.csv',sep=','\n                  ,dtype=np.double)\nbackRf_L = np.fromfile('..\/input\/drone-rf-dataset\/Background RF activites\/L_Band\/00000L_0.csv',sep=','\n                  ,dtype=np.double)","922e3ddc":"X_L.shape","91efd9e7":"backRf_H.shape","3ac487ad":"N = int(X_L.shape[0]*0.2)","3a3e1de8":"fig = plt.figure(figsize=(15,6))\nplt.subplot(121)\nplt.plot(X_L)\nplt.title('Lower Half')\nplt.subplot(122)\nplt.plot(X_H)\nplt.title('Upper Half')\n\n","f43e4282":"fig = plt.figure(figsize=(15,8))\nplt.subplot(221)\nfftX_L = np.fft.fftshift(np.fft.fft(X_L,2048))\nf = np.linspace(-40e6,40e6,len(fftX_L))\nplt.stem(f,np.abs(fftX_L))\nplt.title('Drone: Lower Spectrum')\nplt.grid()\nplt.subplot(222)\nfftX_H =  np.fft.fftshift(np.fft.fft(X_H,2048))\nf = np.linspace(-40e6,40e6,len(fftX_H))\nplt.stem(f,np.abs(fftX_H))\nplt.title('Drone: Upper Spectrum')\nplt.grid()\n    \nplt.subplot(223)\nfftbackRf_L =  np.fft.fftshift(np.fft.fft(backRf_L,2048))\nf = np.linspace(-40e6,40e6,len(fftbackRf_L))\nplt.stem(f,np.abs(fftbackRf_L))\nplt.title('Background: Lower Spectrum')\nplt.grid()\nplt.subplot(224)\nfftbackRf_H =  np.fft.fftshift(np.fft.fft(backRf_H,2048))\nf = np.linspace(-40e6,40e6,len(fftbackRf_H))\nplt.stem(f,np.abs(fftbackRf_H))\nplt.title('Background: Upper Spectrum')\nplt.grid()","35b3e340":"plt.stem(np.abs(np.fft.fft(X_L,2048)))","61d2c40c":"fig = plt.figure(figsize=(20,12))\nplt.subplot(211)\nfftX = np.hstack((fftX_L[1024:],fftX_H[1024:]))\nfftX = fftX - np.mean(fftX)\nf = np.linspace(0,80e6,len(fftX_H))\nplt.stem(f,np.abs(fftX))\nplt.title('Drone Spectrum')\nplt.grid()\nxticks = np.arange(0,80e6,5e6)\nplt.xticks(xticks)\n#plt.xlim((2e9, 3e9))\n\nplt.subplot(212)\nfftbackRf = np.hstack((fftbackRf_L[1024:],fftbackRf_H[1024:]))\nfftbackRf = fftbackRf - np.mean(fftbackRf)\nf = np.linspace(0,80e6,len(fftbackRf))\nplt.stem(f,np.abs(fftbackRf))\nplt.title('Background Spectrum')\nplt.grid()\nxticks = np.arange(0,80e6,5e6)\nplt.xticks(xticks)\n                   ","617bf1ff":"Fs = 80e6\nNFFT = 2048\nX_L_f, X_L_t, X_L_Sxx = sig.spectrogram(X_L, Fs)\nX_H_f, X_H_t, X_H_Sxx = sig.spectrogram(X_H, Fs)\nbackRf_L_f, backRf_L_t, backRf_L_Sxx = sig.spectrogram(backRf_L, Fs)\nbackRf_H_f, backRf_H_t, backRf_H_Sxx = sig.spectrogram(backRf_H, Fs)","f77873b0":"X_L_Sxx.shape","51500aaa":"fig = plt.figure(figsize=(8,6))\nD = librosa.amplitude_to_db(np.abs(librosa.stft(X_H[1*int(5e5):2*int(5e5)], n_fft=2048)),\n                            ref=np.max)\nlibrosa.display.specshow(D, y_axis='mel',sr=80e6, hop_length=1024,\n                         x_axis='time')","32cddcdc":"NFFT = 2048\nfig = plt.figure(figsize=(18,15))\nplt.subplot(421)\nplt.specgram(X_L[0:int(1e6)], NFFT=NFFT, Fs=Fs,cmap='magma',scale='dB',noverlap=1024)\nplt.title('Drone L Spectrum')\nplt.colorbar()\nplt.subplot(422)\nplt.specgram(X_H[0:int(1e6)], NFFT=NFFT, Fs=Fs,cmap='magma',scale='dB',noverlap=1024)\nplt.title('Drone H Spectrum')\nplt.colorbar()\nplt.subplot(425)\nplt.specgram(X_L[int(1e6):2*int(1e6)], NFFT=NFFT, Fs=Fs,cmap='magma',scale='dB',noverlap=1024)\nplt.title('Drone L Spectrum')\nplt.colorbar()\nplt.subplot(426)\nplt.specgram(X_H[int(1e6):2*int(1e6)], NFFT=NFFT, Fs=Fs,cmap='magma',scale='dB',noverlap=1024)\nplt.title('Drone H Spectrum')\nplt.colorbar()\n\n\nplt.subplot(423)\nplt.specgram(backRf_L[0:int(1e6)], NFFT=NFFT, Fs=Fs,cmap='magma',scale='dB',noverlap=1024)\nplt.title('Background L Spectrum')\nplt.colorbar()\nplt.subplot(424)\nplt.specgram(backRf_H[0:int(1e6)], NFFT=NFFT, Fs=Fs,cmap='magma',scale='dB',noverlap=1024)\nplt.title('Background H Spectrum')\nplt.colorbar()\nplt.subplot(427)\nplt.specgram(backRf_L[int(1e6):2*int(1e6)-1], NFFT=NFFT, Fs=Fs,cmap='magma',scale='dB',noverlap=1024)\nplt.title('Background L Spectrum')\nplt.colorbar()\nplt.subplot(428)\nplt.specgram(backRf_H[int(1e6):2*int(1e6)-1], NFFT=NFFT, Fs=Fs,cmap='magma',scale='dB',noverlap=1024)\nplt.title('Background H Spectrum')\nplt.colorbar()\n# The `specgram` method returns 4 objects. They are:\n# - Pxx: the periodogram\n# - freqs: the frequency vector\n# - bins: the centers of the time bins\n# - im: the .image.AxesImage instance representing the data in the plot\n\nplt.show()","d4421f58":"fig = plt.figure(figsize=(18,10))\nplt.subplot(221)\nplt.specgram(X_L+X_H, Fs=Fs,cmap='magma',scale='dB')\nplt.title('Drone L Spectrum')\n#plt.ylim((2.44e9, 2.6e9))\nplt.colorbar()\nplt.subplot(222)\nplt.specgram(backRf_H+backRf_L, Fs=Fs,cmap='magma',scale='dB')\nplt.title('Drone H Spectrum')\nplt.colorbar()\n\nplt.subplot(223)\nplt.plot(X_H+X_L)\nplt.title('Drone Signal')\n\nplt.subplot(224)\nplt.plot(backRf_H+backRf_L)\nplt.title('Background Signal')","6903d098":"# Signal I\/O\nSampling Frequency : 5GHz","424bb9bf":"## Drone Signal","a3421c6e":"## Power Spectrum Plot"}}