{"cell_type":{"ec97a3fe":"code","ab4d5e70":"code","a835ab22":"code","ac430460":"code","7a91a883":"code","dc95828d":"code","42de09c7":"code","72564671":"code","2ac6a768":"code","c16df5a1":"code","0cfc3376":"code","44b5d556":"code","424b3565":"code","f96b214e":"code","dc05a4b8":"code","41bcc96d":"code","70352fb9":"code","9f374d13":"code","5cd8ba5f":"code","8163e04d":"code","9c126147":"code","8d43863c":"code","fcc06ff0":"code","62dbd480":"code","ae50b9c5":"code","aabd470a":"code","6e68182b":"code","e79f0534":"code","db7b22bd":"code","e0902376":"code","f254b2f7":"code","3fe064e1":"code","dc166239":"code","30577339":"code","be79d55e":"code","30fc8512":"code","8a767174":"code","f6c0d8a0":"code","8fc1dfa2":"code","8c33c3b6":"code","da5ca464":"code","7b699f52":"code","1e526a59":"code","8b25c392":"code","f8578ac6":"code","074e98f7":"code","a5bfc54b":"code","6cfa9e38":"code","d5093264":"code","0a984a6a":"code","56b6de36":"code","794742c0":"code","fadbce5c":"markdown","e8fb365e":"markdown","a3b92f21":"markdown","8f91a1f3":"markdown","0973caf9":"markdown","2b6d447c":"markdown","81c418d9":"markdown","bd95c62c":"markdown","318fa7bb":"markdown","dc502deb":"markdown","b84cfdc8":"markdown","f28ab327":"markdown","876ed0b6":"markdown","8745f0a7":"markdown","d9a699b5":"markdown","c14035e6":"markdown","70abd959":"markdown","bef9f141":"markdown","dce06cc6":"markdown","5ee7613b":"markdown","12f831ad":"markdown","b023f6cc":"markdown","29259924":"markdown","ffb1b4e3":"markdown","233b6b6c":"markdown","deb9a011":"markdown","f63a963e":"markdown","5ca1240f":"markdown","af3d2a5f":"markdown","287ed290":"markdown","0482969c":"markdown","230e7343":"markdown","709da706":"markdown"},"source":{"ec97a3fe":"# Data processing\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\n\n# Data visuals\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\n# ML classifier\nfrom sklearn.tree import DecisionTreeClassifier\nimport sklearn.model_selection as ms\nfrom sklearn.ensemble import RandomForestClassifier\n\n# to split dataset to train and test\nfrom sklearn.model_selection import train_test_split\n\n# ML classifier model Evaluation\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.metrics import accuracy_score, recall_score, precision_score\n\n# Data imputation\n!pip install imbalanced-learn\nfrom imblearn.over_sampling import SMOTE \n\n# scaling \nfrom sklearn.preprocessing import StandardScaler\n\n# pipe\nfrom sklearn.pipeline import Pipeline\n\n# to tune the model parameters\nfrom sklearn.model_selection import RandomizedSearchCV","ab4d5e70":"df = pd.read_csv('..\/input\/credit-card-customers\/BankChurners.csv')","a835ab22":"df = df[['Attrition_Flag', 'Customer_Age', 'Gender',\n       'Dependent_count', 'Education_Level', 'Marital_Status',\n       'Income_Category', 'Card_Category', 'Months_on_book',\n       'Total_Relationship_Count', 'Months_Inactive_12_mon',\n       'Contacts_Count_12_mon', 'Credit_Limit', 'Total_Revolving_Bal',\n       'Avg_Open_To_Buy', 'Total_Amt_Chng_Q4_Q1', 'Total_Trans_Amt',\n       'Total_Trans_Ct', 'Total_Ct_Chng_Q4_Q1', 'Avg_Utilization_Ratio']]","ac430460":"# quick view of the data set\n\ndf.head()","7a91a883":"df.info()","dc95828d":"# null values check\n\ndf.isnull().sum()","42de09c7":"# checking for duplicated\n\nsim = df.duplicated() \nsim.sum()","72564671":"# This visual check will ensure that there is no null value is replaced with some other value like :- -999,-0.1,-1\n\nfor feature in df.columns:\n    print('*******','Column name:',feature,'*******')\n    print(df[feature].unique())\n    print('***********-end-***********')\n    print(' ')","2ac6a768":"# stats\n\nround(df.describe(),2)","c16df5a1":"#'Attrition_Flag'\ntarget_df = df['Attrition_Flag'].value_counts().reset_index()\ntarget_df.columns = ['Customer status','Count']\ntarget_df['Percentage'] = target_df['Count'].apply(lambda x: x\/target_df['Count'].sum()*100)\nprint(target_df)\n\n# bar chart\nplt.figure(figsize=(8,5))\nsns.set_context(context='notebook',font_scale=1.2)\nsns.set_style('darkgrid')\nsns.countplot(df['Attrition_Flag'],palette='rainbow');\nplt.title('Number of existing customer and customer who left');\n\n# pie chart\nCustomer_status = ['Existing Customer','Attrited Customer']\n\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.size']=15\nax.pie(target_df['Count'], \n       labels=Customer_status, \n        autopct='%1.1f%%',\n        shadow=True, startangle=90)\nfig.show()\n","0cfc3376":"bins = [18, 30, 40, 50, 60, 70, 110]\nlabels = ['18-29', '30-39', '40-49', '50-59', '60-69', '70+']\nage = pd.cut(df['Customer_Age'], bins, labels = labels,include_lowest = True)\n\nplt.figure(figsize=(10,5))\nsns.set_context(context='notebook',font_scale=1.2)\nsns.set_style('darkgrid')\nsns.countplot(age,palette='winter');\nplt.title('Customer who left and their Age');","44b5d556":"# Customer Age\nleft_customer = df[df['Attrition_Flag']=='Attrited Customer']\nExisting_Customer = df[df['Attrition_Flag']=='Existing Customer']\n# layout\nfig, ax = plt.subplots(1,4,figsize=(16,4))\nsns.set_context(context='notebook',font_scale=1.2)\nsns.set_style('darkgrid')\n\n# plot\nsns.boxplot(Existing_Customer['Customer_Age'],color='#05ffa1',ax = ax[0]);\nsns.distplot(Existing_Customer['Customer_Age'],ax = ax[1],color='#011efe',kde=False,bins=10);\nsns.boxplot(left_customer['Customer_Age'],palette='rainbow',ax = ax[2]);\nsns.distplot(left_customer['Customer_Age'],ax = ax[3],color='red',kde=False,bins=10);\n\n# label\nax[0].title.set_text('1.1 Customer Age');\nax[1].title.set_text('1.2 Distribution of customer Age');\nax[2].title.set_text('1.3 Customer who left and their Age');\nax[3].title.set_text('1.4 Distribution of left customer Age');\n\nplt.tight_layout();\n\nprint('Stats of Existing Customer Age',round(Existing_Customer['Customer_Age'].describe(),2))\nprint(' ')\nprint('Stats of Attrited Customer Age',round(left_customer['Customer_Age'].describe(),2))","424b3565":"# Gender\n\nplt_Gen = left_customer[['Education_Level','Gender','Attrition_Flag']].groupby(['Education_Level','Gender']).count().reset_index()\nplt_Gen = plt_Gen.sort_values('Attrition_Flag')\n\ndf_plot = df[['Gender','Attrition_Flag']]\ndf_plot = df_plot.groupby('Gender')['Attrition_Flag'].count().reset_index()\nprint(df_plot)\n\nfig, ax = plt.subplots(1,2,figsize=(12,5))\nsns.set_context(context='notebook',font_scale=1.2)\nsns.set_style('darkgrid')\n\nsns.countplot(df['Gender'],palette='tab10',ax =ax[0]);\nsns.barplot(x='Gender',y='Attrition_Flag',data=plt_Gen,palette='rainbow',ax=ax[1],ci=False);\n\nax[0].title.set_text('1.1 Gender of the Existing_Customer');\nax[1].title.set_text('1.2 No. of Customers who left and their gender');\n","f96b214e":"# Education level \npl = left_customer[['Education_Level','Gender','Attrition_Flag']].groupby(['Education_Level','Gender']).count().reset_index()\npl = pl.sort_values('Attrition_Flag')\n\n# plot data\nplot_edu = df['Education_Level'].value_counts().reset_index()\nplot_edu.columns =['Education_level','Count']\nplot_edu = plot_edu.sort_values('Count')\n\n# plot\nfig, ax = plt.subplots(1,2,figsize=(15,5))\nsns.set_context(context='notebook',font_scale=1.2)\nsns.set_style('darkgrid')\n\nsns.barplot(x='Count',y='Education_level',data=plot_edu, palette='spring', ax=ax[0]);\nsns.barplot(x='Attrition_Flag',y='Education_Level',hue='Gender', data=pl,palette='spring_r', ax=ax[1])\n\n# label\nax[0].title.set_text('1.1 Education_Level of the Customers');\nax[1].title.set_text('1.2 Customers who left and their Education level and gender');\nplt.tight_layout()\n","dc05a4b8":"# Marital Status of customers\nplot_ms_left = left_customer[['Marital_Status','Gender','Attrition_Flag']].groupby(['Marital_Status','Gender']).count().reset_index()\nplot_ms_left.columns = ['Marital_Status','Gender','count']\nplot_ms_left = plot_ms_left.sort_values('count')\n\nplot_ms = df[['Marital_Status','Gender','Attrition_Flag']].groupby(['Marital_Status','Gender']).count().reset_index()\nplot_ms.columns = ['Marital_Status','Gender','count']\nplot_ms = plot_ms.sort_values('count')\n\n# plot\nfig, ax = plt.subplots(1,2,figsize=(15,5))\nsns.set_context(context='notebook',font_scale=1.2)\nsns.set_style('darkgrid')\n\nsns.barplot(y='count',x='Marital_Status',data=plot_ms, palette='winter', ax=ax[0],ci=False);\nsns.barplot(x='count',y='Marital_Status',hue='Gender', data=plot_ms_left,palette='winter', ax=ax[1])\n\n\n# title\nax[0].title.set_text('Marital Status of customer');\nax[1].title.set_text('Customer who left and their Marital status and Gender');\n\nplt.tight_layout()\n","41bcc96d":"# Income category\n\n# plot data\nplot_income_left = left_customer[['Income_Category','Gender','Attrition_Flag']].groupby(['Income_Category','Gender']).count().reset_index()\nplot_income_left.columns = ['Income_Category','Gender','count']\n#plot_income_left = plot_income_left.sort_values('count')\n\nplot_income = df[['Income_Category','Gender','Attrition_Flag']].groupby(['Income_Category','Gender']).count().reset_index()\nplot_income.columns = ['Income_Category','Gender','count']\n#plot_income = plot_income.sort_values('count')\n\n# plot\nfig, ax = plt.subplots(1,2,figsize=(15,5))\nsns.set_context(context='notebook',font_scale=1.2)\nsns.set_style('darkgrid')\n\nsns.barplot(x='count',y='Income_Category',data=plot_income, palette='winter', ax=ax[0],ci=False);\nsns.barplot(x='count',y='Income_Category', data=plot_income_left,palette='spring',hue='Gender', ax=ax[1],ci=False);\n\n# title\nax[0].title.set_text('1.1 Income category of customer');\nax[1].title.set_text('1.2 Customer who left and their income category and Gender');\n\nplt.tight_layout()\n","70352fb9":"# plot data\nplot_card_left = left_customer[['Card_Category','Gender','Attrition_Flag']].groupby(['Card_Category','Gender']).count().reset_index()\nplot_card_left.columns = ['Card_Category','Gender','count']\n#plot_income_left = plot_income_left.sort_values('count')\n\nplot_card = df['Card_Category'].value_counts().reset_index()\nplot_card.columns = ['Card_Category','count']\n\n\n# plot\nfig, ax = plt.subplots(1,2,figsize=(15,5))\nsns.set_context(context='notebook',font_scale=1.2)\nsns.set_style('darkgrid')\n\nsns.barplot(y='count',x='Card_Category',data=plot_card, palette='spring', ax=ax[0],ci=False);\nsns.barplot(x='count',y='Card_Category', data=plot_card_left,hue='Gender',palette='winter', ax=ax[1],ci=False);\n\n# title\nax[0].title.set_text('Credit Card Category of customers');\nax[1].title.set_text('Customer who left and their Credit card type');\n\nplt.tight_layout()\n\nprint('*************************************')\nprint('Customer who left and their card type')\nprint('*************************************')\nprint(plot_card_left)\nprint('*************************************')","9f374d13":"# plot data\n\n# plot\nfig, ax = plt.subplots(1,2,figsize=(12,5))\nsns.set_context(context='notebook',font_scale=1.2)\nsns.set_style('darkgrid')\n\nsns.distplot(df.Credit_Limit,bins=5,color='red',ax=ax[0],kde=False);\nsns.boxplot(left_customer.Credit_Limit,palette='muted', ax=ax[1]);\n\n# title\nax[0].title.set_text('1.1 Credit_Limit of customers');\nax[1].title.set_text('1.2 Customer who left and their Credit card Limit');\n\nplt.tight_layout()\n\nprint('*************************************')\nprint('Credit limit')\nprint('*************************************')\nprint(df.Credit_Limit.describe())\nprint('*************************************')\nprint('Customer who left and their credit limit')\nprint('*************************************')\nprint(left_customer.Credit_Limit.describe())\nprint('*************************************')","5cd8ba5f":"plt.figure(figsize=(15,8))\nsns.set_context(context='notebook',font_scale=.8)\nsns.heatmap(df.corr(method='pearson'),cmap='Blues',annot=True);\nplt.tight_layout()","8163e04d":"# drop the unknown class because of the decision tree will treat that as a class which we don't want\n\ndf = df[~df['Education_Level'].str.contains('Unknown')] \ndf = df[~df['Marital_Status'].str.contains('Unknown')]\ndf = df[~df['Income_Category'].str.contains('Unknown')]","9c126147":"# converting object into the Categorical\n\nfor feature in df.columns:\n    if df[feature].dtype =='object':\n        df[feature] = pd.Categorical(df[feature]).codes","8d43863c":"# outlier\n\nplt.style.use('fivethirtyeight')\noutlier= df.plot(kind='box',figsize=(20,7));\nplt.xticks(rotation=70);\nplt.title('Outlier in data');\n","fcc06ff0":"def treat_outlier(x):\n    q5 = np.percentile(x,5)\n    q25= np.percentile(x,25)\n    q75= np.percentile(x,75)\n    up_trend=np.percentile(x,95)\n    IQR = q75-q25\n    low_level = q25-(1.5*IQR)\n    up_level = q75+(1.5*IQR)\n    \n    return x.apply(lambda y: up_trend if y> up_level else y).apply(lambda y: q5 if y < low_level else y)","62dbd480":"outlier_list = ['Credit_Limit','Avg_Open_To_Buy','Total_Trans_Amt']","ae50b9c5":"for i in df[outlier_list]:\n    df[i]=treat_outlier(df[i])","aabd470a":"plt.style.use('fivethirtyeight')\noutlier= df.plot(kind='box',figsize=(20,7));\nplt.xticks(rotation=70);\nplt.title('Outlier treated in df');","6e68182b":"X = df[['Gender', 'Dependent_count',\n       'Education_Level', 'Marital_Status', 'Income_Category', 'Card_Category',\n       'Months_on_book', 'Total_Relationship_Count', 'Months_Inactive_12_mon',\n       'Contacts_Count_12_mon', 'Credit_Limit',\n       'Avg_Open_To_Buy', 'Total_Amt_Chng_Q4_Q1', 'Total_Trans_Amt',\n       'Total_Ct_Chng_Q4_Q1', 'Avg_Utilization_Ratio']]\n\ny = df.pop('Attrition_Flag')","e79f0534":"# spliting the data\n\nX_train, X_test, train_labels, test_labels = train_test_split(X,y,test_size=0.30,random_state=0)","db7b22bd":"# over_sampling train labels\n\nOS_SMOTE = SMOTE()\n\nX_train, train_labels = OS_SMOTE.fit_resample(X_train,train_labels)","e0902376":"oversample_plot = train_labels.value_counts().reset_index()\noversample_plot.columns = ['Labels','Attrition_Flag']\nprint(oversample_plot)\nsns.barplot(x='Labels',y='Attrition_Flag',data=oversample_plot);\nplt.title('Attrition_Flag after upsampling');","f254b2f7":"rf_pipe = Pipeline(steps =[ ('std_scale',StandardScaler()), (\"RF\",RandomForestClassifier(random_state=0)) ])\nrf_pipe.fit(X_train,train_labels)\n\ndt_pipe = Pipeline(steps =[ ('_std_scale',StandardScaler()), (\"DT\",DecisionTreeClassifier(criterion='gini',max_features=10, max_depth=10, min_samples_leaf=15, min_samples_split=100,random_state=0)) ])\ndt_pipe.fit(X_train,train_labels)","3fe064e1":"rf_train_predict = rf_pipe.predict(X_train)\nrf_test_predict = rf_pipe.predict(X_test)\n\n\ndt_train_predict = dt_pipe.predict(X_train)\ndt_test_predict = dt_pipe.predict(X_test)","dc166239":"# feature_importances\n\nfeature_importances = pd.Series(rf_pipe.steps[1][1].feature_importances_, index=X_train.columns);\nfeature_importances.nlargest(15).plot(kind='barh');\nplt.style.use('fivethirtyeight')\nplt.title('Random forest feature_importances');","30577339":"print(\"Random forest Recall is \", recall_score(test_labels, rf_test_predict) *  100)\nprint(\"Random forest Precision is \", precision_score(test_labels, rf_test_predict) *  100)\nprint(\"Random forest Accuracy is \", accuracy_score(test_labels, rf_test_predict) *100)","be79d55e":"print(\"Decision tree Accuracy is \", accuracy_score(test_labels, dt_test_predict) *  100)\nprint(\"Decision tree Recall is \", recall_score(test_labels, dt_test_predict) *  100)\nprint(\"Decision tree Precision is \", precision_score(test_labels, dt_test_predict) *  100)","30fc8512":"print('classification_report on test set for RF')\nprint(' ')\nprint(classification_report(test_labels, rf_test_predict))\n","8a767174":"\nprint('classification_report on train set for RF')\nprint(' ')\nprint(classification_report(train_labels, rf_train_predict))\n","f6c0d8a0":"# to get best parameters\n\n# fine Tune the model using GridSearchCV\n\nparameters= {'n_estimators':[500,600],\n            'max_depth':[10,15,20],\n            'max_features':[5,10],\n            'min_samples_split' : [100, 110, 200],\n            'min_samples_leaf' : [30, 40,60]}\n\n\nrf = RandomForestClassifier()\n\nrf_model = ms.GridSearchCV(rf, param_grid = parameters, cv=3)\n\nrf_model.fit(X_train,train_labels)\n","8fc1dfa2":"print('The best parameters are: ',rf_model.best_params_)","8c33c3b6":"rf_pipe = Pipeline(steps =[ ('std_scale',StandardScaler()), \n                           (\"RF\",RandomForestClassifier(max_depth=10, max_features= 5, min_samples_leaf=30, min_samples_split= 100, n_estimators= 500\n                                                        )) ])\n\n\nrf_pipe.fit(X_train,train_labels)","da5ca464":"rf_train_predict = rf_pipe.predict(X_train)\nrf_test_predict = rf_pipe.predict(X_test)","7b699f52":"print('classification_report on test set')\nprint(' ')\nprint(classification_report(test_labels, rf_test_predict))","1e526a59":"print('classification_report on train_set')\nprint(' ')\nprint(classification_report(train_labels, rf_train_predict))","8b25c392":"plt.figure(figsize=(10,6))\n\nax = sns.heatmap(confusion_matrix(train_labels,rf_train_predict),annot=True,fmt='d',linecolor='white',linewidths=1);\nsns.set_context(context='notebook',font_scale=1.5)\nax.set_xticklabels(['Not Churn','Churn'],fontsize=14)\nax.set_yticklabels(['Predicted Not Churn','Predicted Churn'],fontsize=14)\nplt.title('Confusion Matrix on train set')\nplt.tight_layout()\nplt.show()","f8578ac6":"plt.figure(figsize=(10,6))\n\nax = sns.heatmap(confusion_matrix(test_labels,rf_test_predict),annot=True,fmt='d',linecolor='white',linewidths=1);\nsns.set_context(context='notebook',font_scale=1.5)\nax.set_xticklabels(['Not Churn','Churn'],fontsize=14)\nax.set_yticklabels(['Predicted Not Churn','Predicted Churn'],fontsize=14)\nplt.title('Confusion Matrix on test set')\nplt.tight_layout()\nplt.show()","074e98f7":"from sklearn.neural_network import MLPClassifier\n\n# Scaling data\nsc = StandardScaler()\nx_train = sc.fit_transform(X_train)\nx_test = sc.transform(X_test)\n\n# mlpclassifier\nmlpcl = MLPClassifier(hidden_layer_sizes =360,max_iter=5000,\n                   solver='sgd',verbose=True, random_state=1,tol=0.0001)\n\n# fit the model\nmlpcl.fit(x_train,train_labels)\n","a5bfc54b":"mlpcl_train_predict = mlpcl.predict(x_train)\nmlpcl_test_predict = mlpcl.predict(x_test)","6cfa9e38":"print('classification for mlp on train data')\n\nprint(classification_report(train_labels,mlpcl_train_predict))","d5093264":"print('classification for mlp on test data')\n\nprint(classification_report(test_labels,mlpcl_test_predict))","0a984a6a":"plt.figure(figsize=(10,6))\n\nax = sns.heatmap(confusion_matrix(test_labels,mlpcl_test_predict),annot=True,fmt='d',linecolor='white',linewidths=1);\nsns.set_context(context='notebook',font_scale=1.5)\nax.set_yticklabels(['Not Churn','Churn'],fontsize=14)\nax.set_xticklabels(['Predicted Not Churn','Predicted Churn'],fontsize=14)\nplt.title('Confusion Matrix on test set')\nplt.tight_layout()\nplt.show()","56b6de36":"plt.figure(figsize=(10,6))\n\nax = sns.heatmap(confusion_matrix(train_labels,mlpcl_train_predict),annot=True,fmt='d',linecolor='white',linewidths=1);\nsns.set_context(context='notebook',font_scale=1.5)\nax.set_yticklabels(['Not Churn','Churn'],fontsize=14)\nax.set_xticklabels(['Predicted Not Churn','Predicted Churn'],fontsize=14)\nplt.title('Confusion Matrix on train set')\nplt.tight_layout()\nplt.show()","794742c0":"print(\"Decision tree Accuracy is \", accuracy_score(test_labels, dt_test_predict) *  100)\nprint(\"Decision tree Recall is \", recall_score(test_labels, dt_test_predict) *  100)\nprint(\"Decision tree Precision is \", precision_score(test_labels, dt_test_predict) *  100)\n\nprint(' ')\n\nprint(\"Random forest Recall is \", recall_score(test_labels, rf_test_predict) *  100)\nprint(\"Random forest Accuracy is \", accuracy_score(test_labels, rf_test_predict) *100)\nprint(\"Random forest Precision is \", precision_score(test_labels, rf_test_predict) *  100)\n\nprint(' ')\n\n\nprint(\"MLPClassifier Recall is \", recall_score(test_labels,mlpcl_test_predict) *  100)\nprint(\"MLPClassifier Accuracy is \", accuracy_score(test_labels,mlpcl_test_predict) *100)\nprint(\"MLPClassifier Precision is \", precision_score(test_labels,mlpcl_test_predict) *  100)","fadbce5c":"## <span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#189ad3\">Customer Age","e8fb365e":"* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\"> In the above figure, 1.2 box plot shows the customer who left the credit card service and credit limit in average is 8136 and median of 4178\n    \n","a3b92f21":"## Thanks for taking the time to visit my notebook!\n\n## upvote if you like it\n\n## feel free to post any suggestion. ","8f91a1f3":"* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\"> In the above bar plot 1.1 shows the income category of the customer and most of them are customer falls in less than $40000 category\n\n* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\"> In the above bar plot, 1.2 shows the income category of the customer who left the credit card service and Gender","0973caf9":"## <span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#189ad3\">Card_Category","2b6d447c":"#### <span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#189ad3\"> Confusion Matrix","81c418d9":"## <span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#189ad3\">Gender","bd95c62c":"* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\"> In the above bar chart illustrating the number of the customer with credit card services are 8500 and the number of customers who left the credit card services is 1627\n\n* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\">  In the above pie chart, we can see the imbalance in target labels and it can cause the problem in the classification so we solve the issue using statistical method Upsampling by SMOTE (Synthetic Minority Over-sampling Technique)","318fa7bb":"## <span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#189ad3\">Credit_Limit","dc502deb":"Image credit: medium.com","b84cfdc8":"# Target variable(Attrition_Flag)","f28ab327":"# Packages","876ed0b6":"# Model - Random forest","8745f0a7":"# Exploratory Data Analysis","d9a699b5":"* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\"> In above-left box plot 1.1 illustrates the range of 40 to 50 so most of the credit card customer is in the range of this age\n\n* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\"> In above-left box plot 1.1 illustrates the age of customers and the median age of 47, the minimum age is 26 and Maximum age is 68","c14035e6":"# Model Evaluation","70abd959":"* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\"> In the above figure, 1.1 bar plot shows the customer of credit card service and their education level and most of them are from Graduate level\n\n* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\"> In the above figure, 1.2 bar plot shows the customer who left the credit card service and their education level and their gender","bef9f141":"## <span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#189ad3\">Education level","dce06cc6":"## <span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#189ad3\">Marital_Status","5ee7613b":"![image.png](attachment:image.png)","12f831ad":"# Data import and null values check","b023f6cc":"# Fine Tune the model","29259924":"* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\">SMOTE over_sampling techniques used to adjust the class distribution of a data set","ffb1b4e3":"# <span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#189ad3\"> Index\n    \n* Packages\n* Data import and null values check\n* Exploratory Data Analysis\n* Target variable(Attrition_Flag)\n* Outliers\n* Model - Random forest\n* Model Evaluation\n* MLPClassifier\n* MLP model Evaluation","233b6b6c":"## <span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#189ad3\">Income_Category","deb9a011":"# <span style=\"font-family: Arial; font-weight:bold;font-size:1.5em;color:#189ad3\"> Customer_Churn classification","f63a963e":"# MLPClassifier","5ca1240f":"* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\"> In the above bar plot, 1.1 shows credit type of card customer are belongs to and most of them are using Blue\n    \n* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\"> In the above bar plot, 1.2 illustrates credit type of card customer who left and most of them are female customers","af3d2a5f":"* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\"> Most of the customer who left the credit card service is from 40 to 50 age group and most of them are female customers\n    ","287ed290":"* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\">  In the above figure, 1.1 bar plot shows the Gender and number of customers using credit card service, of that 5358 are female customers and 4769 are male customers\n* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\"> In the above-right figure, 1.2 bar plot illustrates the number of customers who left the credit card service\n","0482969c":"* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\"> Accuracy measures when the model predicts that a customer will churn, it is correct around 94% of the times\n\n* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\"> Precision is a measure of Customers that we correctly identify that Customer will churn, out of really churned customers\n\n* <span style=\"font-family: Cambria;font-size:1.2em;color:#333333\"> Recall measure of our model correctly identifying True Positives, in other words, the model predicted customer churn how many are really churned","230e7343":"# SMOTE over_sampling","709da706":"# Outliers"}}