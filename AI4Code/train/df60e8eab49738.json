{"cell_type":{"8bd07502":"code","fcbb0b48":"code","461d916e":"code","ec3f97e2":"code","a7fdb449":"code","13a4d129":"code","4e52e31f":"code","2ed2bbb7":"code","83126a7b":"code","692ceb77":"code","e792b5d3":"code","44a0ddc4":"code","e517d8a8":"code","07ecf3da":"code","ca35dcc8":"code","ee250814":"code","ee88cef2":"code","82d42711":"code","ce041c7a":"code","ad9e02b5":"code","118cdae2":"code","dd3ba0c9":"code","9b292595":"code","4efa2bba":"code","2e7095fc":"code","16dbb0ec":"code","fc31517d":"code","9fed3390":"code","4a21f557":"code","9b598083":"code","31668bb3":"code","6ee45697":"code","21266cce":"code","efe93ff7":"code","db8d40e2":"code","bd1b2dd8":"code","8b7824d8":"code","9335c0da":"code","ddeff41b":"code","bd27e3a8":"code","ce0080d4":"code","8ace23ca":"markdown","c8427570":"markdown","e58b8263":"markdown","3c572c06":"markdown","e834e332":"markdown","70d754bc":"markdown","95086a2d":"markdown","7e724c7c":"markdown","e1b521a4":"markdown","f9ee137a":"markdown","3657714a":"markdown","e5fb5e29":"markdown","b24c2fe7":"markdown","d0e5f95e":"markdown","05a4596d":"markdown","06b94b4b":"markdown","9dce34c3":"markdown","fa04e65e":"markdown","f0fd9a03":"markdown","40b78089":"markdown","519b3c0f":"markdown"},"source":{"8bd07502":"              #Working on our fisrt dataset - Water Quality (Prediction Model - Water Potability Classification)\nimport pandas as pd\nimport numpy as np\n              #importing both numpy and pandas.\ndataset1=pd.read_csv('..\/input\/water-potability\/water_potability.csv', header=0) \n              # with header=0 is like the default value, treating firtst row as header.\n\nprint('No. of Instances = %d' % (dataset1.shape[0]))\nprint('No. of Attributes = %d' % (dataset1.shape[1])) \n              #Printing no. of objects\/instances  and attributes,  shape[0]give us no. of raws, shape[1] no. of columns\ndataset1.head()\n              #Printing the first 5 records on the dataframe, We can notice that all the missing values left blanked in th original file.\n              #While uploading to dataset1 dataframe, it filled all blank with NaN. a standard missing value ( Pandas will recognize both empty cells and \u201cNA\u201d types as missing values)\n\n","fcbb0b48":"print('Number of missing values = ') \nfor col in dataset1.columns:\n    print('\\t%s:%d' % (col,dataset1[col].isna().sum()))\n        # for loop syntex to print how many missing values in each column. isna to count how many NaN\n        # \\t%s:%d this is a formating, \\t means adding a tab the val %s (string) then %d a decimal no.) \n\nprint('\\n Number of rows contain missing  = %d ' % (dataset1.isnull().any(axis = 1).sum()) ) \n        #Printing no. of rows\/records\/objects that containn at least one missing value.\n\n","461d916e":"#making sure for all columns' datatype\ndataset1.dtypes","ec3f97e2":"          #Handeling Missing data\n          #replacing with Mean vlaue and Median value and check both for accuracy\n          #Mean vlaue\ndataset1_noNaN1=dataset1\ndataset1_noNaN1=dataset1_noNaN1.fillna(dataset1_noNaN1.mean()) #replacing al NaN with Mean of each column\n#dataset1_noNaN1.head()\n         \n          #Median vlaue- this was a test to check performance if we replaced by mean or by median- the difference is min, and we consider the mean.\ndataset1_noNaN2=dataset1\ndataset1_noNaN2=dataset1_noNaN2.fillna(dataset1_noNaN2.median()) #replacing al NaN with Median of each column\n#dataset1_noNaN2.head()\n","a7fdb449":"#applying boxplot to detect outliers\n%matplotlib inline \n        # library to be used for plotting boxplot\n\ndataset1_noNaN1.boxplot(figsize=(20,10))\n","13a4d129":"#applying boxplot to detect outliers - Median not to be used \n#%matplotlib inline \n      # library to be used for plotting boxplot\n\n#dataset1_noNaN2.boxplot(figsize=(20,10))\n","4e52e31f":"Z = (dataset1_noNaN1-dataset1_noNaN1.mean())\/dataset1_noNaN1.std() \n          # new dataframe z for dataset1 no NaN\/replaced by mean\n\nZ","2ed2bbb7":"print('Number of rows before discarding outliers Z = %d' % (Z.shape[0]))\n\n\nZ1 = Z.loc[((Z > -3).sum(axis=1)==10) & ((Z < 3).sum(axis=1)==10),:]\nprint('Number of rows after discarding outliers values = %d' % (Z1.shape[0]))\nZ1\n","83126a7b":"#outliers with Z score\n#applying boxplot to detect outliers\n%matplotlib inline \n        # library to be used for plotting boxplot\n\nZ.boxplot(figsize=(15,10))\n","692ceb77":"#Now another way to create a new dataframe without outliers that we will use it\n #is by using SciPy\n \n#SciPy is a free (as Sckitleaard) and open-source Python library used for scientific computing and technical computing. \n#SciPy contains modules for optimization, linear algebra, integration, interpolation, \n\n\n#using scipy libraby\nfrom scipy import stats\nz_scores = stats.zscore(dataset1_noNaN1)\nabs_z_scores = np.abs(z_scores)\nfiltered_entries = (abs_z_scores < 3).all(axis=1)\ndata1 = dataset1_noNaN1[filtered_entries]\n\nprint(data1)\n\n ","e792b5d3":"corr_dataset1=data1.corr()\ncorr_dataset1","44a0ddc4":"#correlation Seaborn Heatmap\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.heatmap(data1.corr());","e517d8a8":"# Increase the size of the heatmap.\nplt.figure(figsize=(16, 6))\n# Store heatmap object in a variable to easily access it when you want to include more features (such as title).\n# Set the range of values to be displayed on the colormap from -1 to 1, and set the annotation to True to display the correlation values on the heatmap.\nheatmap = sns.heatmap(data1.corr(), vmin=-1, vmax=1, annot=True)\n# Give a title to the heatmap. Pad defines the distance of the title from the top of the heatmap.\nheatmap.set_title('Correlation Heatmap', fontdict={'fontsize':12}, pad=12);","07ecf3da":"#trying playing with coloring\nplt.figure(figsize=(16, 6))\nheatmap = sns.heatmap(data1.corr(), vmin=-1, vmax=1, annot=True, cmap='BrBG')\nheatmap.set_title('Correlation Heatmap', fontdict={'fontsize':18}, pad=12);\n# save heatmap as .png file\n# dpi - sets the resolution of the saved image in dots\/inches\n# bbox_inches - when set to 'tight' - does not allow the labels to be cropped\nplt.savefig('heatmap_dataset1.png', dpi=300, bbox_inches='tight')","ca35dcc8":"#making sure for all columns' datatype\ndata1.dtypes","ee250814":"#exporting data Frame to CSV\ndata1.to_csv('data1.csv', index=False)","ee88cef2":"        #Load libraries-\n        #Scikit-learn is a free software machine learning library for the Python programming language. \n        #It features various classification, regression and clustering algorithms including support vector machines.\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier\nfrom sklearn.model_selection import train_test_split # Import train_test_split function\nfrom sklearn import metrics #Import scikit-learn metrics module for accuracy calculation\n        \n        #split dataset in features and target variable\nfeature_cols = ['ph', 'Hardness', 'Solids', \n                'Chloramines','Sulfate','Conductivity',\n                'Organic_carbon','Trihalomethanes','Turbidity']\nX = data1[feature_cols] # Features \ny = data1.Potability # Target variable\n\n     # Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1) \n          # 70% training and 30% test\n          # Split dataset into training set and test set\n         # Create Decision Tree classifer object\ntree = DecisionTreeClassifier()\n         # criterion: default is Gini, max_depth: defualt is non,\n                              #splitter : default is best\n\n          # Train Decision Tree Classifer\ntree = tree.fit(X_train,y_train)\n\n          #Predict the response for test dataset\ny_pred = tree.predict(X_test)\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n","82d42711":"#y_train\n#y_test","ce041c7a":"from sklearn.tree import export_graphviz\nfrom sklearn.externals.six import StringIO  \nfrom IPython.display import Image  \nimport pydotplus\n\ndot_data = StringIO()\nexport_graphviz(tree, out_file=dot_data,  \n                filled=True, rounded=True,\n                special_characters=True,feature_names = feature_cols,class_names=['0','1'])\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \ngraph.write_png('water.png')\nImage(graph.create_png())","ad9e02b5":"# import the metrics class \n\nfrom sklearn import metrics\ncnf_matrix_1 = metrics.confusion_matrix(y_test, y_pred) \ncnf_matrix_1","118cdae2":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred)) #classification report showing the accuracy, recall and precision","dd3ba0c9":"# import required modules\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix_1), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\n\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\nprint(\"Precision:\",metrics.precision_score(y_test, y_pred))\nprint(\"Recall:\",metrics.recall_score(y_test, y_pred))\n","9b292595":"#Create Decision Tree classifer object\ntree2 = DecisionTreeClassifier(criterion=\"entropy\",max_depth=5)\n\n# Train Decision Tree Classifer\ntree2 = tree2.fit(X_train,y_train)\n\n#Predict the response for test dataset\ny_pred = tree2.predict(X_test)\n\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","4efa2bba":"#Visualizing Tree2\nfrom sklearn.externals.six import StringIO  \nfrom IPython.display import Image  \nfrom sklearn.tree import export_graphviz\nimport pydotplus\ndot_data = StringIO()\nexport_graphviz(tree2, out_file=dot_data,  \n                filled=True, rounded=True,\n                special_characters=True, feature_names = feature_cols,class_names=['0','1'])\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \ngraph.write_png('water2.png')\nImage(graph.create_png())","2e7095fc":"# import the metrics class \n\nfrom sklearn import metrics\ncnf_matrix_2 = metrics.confusion_matrix(y_test, y_pred) \ncnf_matrix_2","16dbb0ec":"print(classification_report(y_test, y_pred)) #classification report showing the accuracy, recall and precision","fc31517d":"# import required modules\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix_2), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\n\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\nprint(\"Precision:\",metrics.precision_score(y_test, y_pred))\nprint(\"Recall:\",metrics.recall_score(y_test, y_pred))\n","9fed3390":"#testing the model for overfitting\n\n########################################\n# Training and Test set creation\n#########################################\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)\n\nfrom sklearn import tree\nfrom sklearn.metrics import accuracy_score\n\n#########################################\n# Model fitting and evaluation\n#########################################\n\nmaxdepths = [2,3,4,5,6,7,8,9,10,15,20,25,30,35,40,45,50]\n\ntrainAcc = np.zeros(len(maxdepths))\ntestAcc = np.zeros(len(maxdepths))\n\nindex = 0\nfor depth in maxdepths:\n    clf = tree.DecisionTreeClassifier(max_depth=depth)\n    clf = clf.fit(X_train, y_train)\n    y_predTrain = clf.predict(X_train)\n    y_predTest = clf.predict(X_test)\n    trainAcc[index] = accuracy_score(y_train, y_predTrain)\n    testAcc[index] = accuracy_score(y_test, y_predTest)\n    index += 1\n    \n#########################################\n# Plot of training and test accuracies\n#########################################\n    \nplt.plot(maxdepths,trainAcc,'ro-',maxdepths,testAcc,'bv--')\nplt.legend(['Training Accuracy','Test Accuracy'])\nplt.xlabel('Max depth')\nplt.ylabel('Accuracy')","4a21f557":"#Cross-Validation\n#To eliminate over-fitting, we can apply cross-validation.\n#going to apply k-fold cross-validation.\n#split the original data set into k subsets and use one of the subsets as the testing set and the remaining as the training sets.\n#This process iterated k times until every subset have been used as the testing set.\n# 10-folds - k Folds cross validation cv=10 parameter for K=10 in cross_val_score function\n\nfrom sklearn.model_selection import KFold, cross_val_score, StratifiedKFold\n\ndtc = DecisionTreeClassifier()\ncv_scores = cross_val_score(dtc, X, y, cv=10) \nsns.distplot(cv_scores)\nplt.title('Average score: {}'.format(np.mean(cv_scores)))","9b598083":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\n\ndtc = DecisionTreeClassifier()\n#testing for multiple depth and features\nparameter_grid = {'criterion': ['gini', 'entropy'],\n                  'splitter': ['best', 'random'],\n                  'max_depth': [1, 2, 3, 4, 5, 6, 7, 8],\n                  'max_features': [1, 2, 3, 4,5,6,7,8,9]}\n\n\ncross_validation = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\ngrid_search = GridSearchCV(dtc, param_grid=parameter_grid, cv=cross_validation)\n\ngrid_search.fit(X, y)\nprint('Best score: {}'.format(grid_search.best_score_))\nprint('Best parameters: {}'.format(grid_search.best_params_))\n\ndtc = grid_search.best_estimator_\ndtc","31668bb3":"#got the best parameters for this model. \n#We can directly assign it to the decision tree classifier and we can check all of its property. \n#checking it\u2019s accuracy.\ncv_scores = cross_val_score(dtc, X, y)\nsns.distplot(cv_scores)\nplt.title('Average score: {}'.format(np.mean(cv_scores)))\n","6ee45697":"\n       \n#Load libraries-\n        #Scikit-learn is a free software machine learning library for the Python programming language. \n        #It features various classification, regression and clustering algorithms including support vector machines.\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split # Import train_test_split function\nfrom sklearn import metrics #Import scikit-learn metrics module for accuracy calculation\n        \n        #split dataset in features and target variable\nfeature_cols = ['ph', 'Hardness', 'Solids', \n                'Chloramines','Sulfate','Conductivity',\n                'Organic_carbon','Trihalomethanes','Turbidity']\nX = data1[feature_cols] # Features \ny = data1.Potability # Target variable\n\n     # Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1) \n          # 70% training and 30% test\n          # Split dataset into training set and test set\n\n#KNN\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\n\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors=30) # no of neighbors\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\n\nfrom sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\n\ncnf_matrix_3 = metrics.confusion_matrix(y_test, y_pred) \ncnf_matrix_3\n\n\n","21266cce":"#Visualizing confusion Matrix \n# import required modules\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix_3), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\n\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\nprint(\"Precision:\",metrics.precision_score(y_test, y_pred))\nprint(\"Recall:\",metrics.recall_score(y_test, y_pred))","efe93ff7":"##KNN  testing different K values and check the accuracy over the change in both test and train data\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n      #split dataset in features and target variable\nfeature_cols = ['ph', 'Hardness', 'Solids', \n                'Chloramines','Sulfate','Conductivity',\n                'Organic_carbon','Trihalomethanes','Turbidity']\nX = data1[feature_cols] # Features \ny = data1.Potability # Target variable\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=12345)\n# To understand model performance, dividing the dataset into a training set and a test set is a good strategy.\n#Split dataset into training set and test set\n# 70% training and 30% test\n\nnumNeighbors = [1, 5, 7, 10, 15, 20, 25, 30,35,40, 50, 60, 70, 80, 90, 100, 150]\ntrainAcc = []\ntestAcc = []\n\nfor k in numNeighbors:\n    clf = KNeighborsClassifier(n_neighbors=k, metric='minkowski', p=2)\n    clf.fit(X_train, y_train)\n    y_predTrain = clf.predict(X_train)\n    y_predTest = clf.predict(X_test)\n    trainAcc.append(accuracy_score(y_train, y_predTrain))\n    testAcc.append(accuracy_score(y_test, y_predTest))\n\nplt.plot(numNeighbors, trainAcc, 'ro-', numNeighbors, testAcc,'bv--')\nplt.legend(['Training Accuracy','Test Accuracy'])\nplt.xlabel('Number of neighbors')\nplt.ylabel('Accuracy')","db8d40e2":"from sklearn.model_selection import cross_val_score\n\n\nknn = KNeighborsClassifier(n_neighbors = 100)\n\nscores = cross_val_score(knn, X, y, cv=10, scoring='accuracy')\n    # X,y will automatically devided by 10 folder, the scoring I will still use the accuracy\n\nprint(scores)\n  # print all 5 times scores \n# then I will do the \nprint(scores.mean())\n#average about these  scores to get more accuracy score.\n","bd1b2dd8":"import matplotlib.pyplot as plt \n%matplotlib inline\n# choose k between 1 to 300\nk_range = range(1, 300)\nk_scores = []\n# use iteration to caclulator different k in models, then return the average accuracy based on the cross validation\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    scores = cross_val_score(knn, X, y, cv=10, scoring='accuracy')\n    k_scores.append(scores.mean())\n# plot to see clearly\nplt.plot(k_range, k_scores)\nplt.xlabel('Value of K for KNN')\nplt.ylabel('Cross-Validated Accuracy')\nplt.show()","8b7824d8":"        #Load libraries-\n        #Scikit-learn is a free software machine learning library for the Python programming language. \n        #It features various classification, regression and clustering algorithms including support vector machines.\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier\nfrom sklearn.model_selection import train_test_split # Import train_test_split function\nfrom sklearn import metrics #Import scikit-learn metrics module for accuracy calculation\n        \n        #split dataset in features and target variable\nfeature_cols = ['ph', 'Hardness', 'Solids', \n                'Chloramines','Sulfate','Conductivity',\n                'Organic_carbon','Trihalomethanes','Turbidity']\nX = data1[feature_cols] # Features \ny = data1.Potability # Target variable\n\n     # Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1) \n          # 70% training and 30% test\n          # Split dataset into training set and test set\n","9335c0da":"# import the class\nfrom sklearn.linear_model import LogisticRegression\n\n# instantiate the model (using the default parameters)\nlogreg = LogisticRegression()\n\n# fit the model with data\nlogreg.fit(X_train,y_train)\n\n#\ny_pred=logreg.predict(X_test)","ddeff41b":"# import the metrics class\nfrom sklearn import metrics\n\ncnf_matrix_4 = metrics.confusion_matrix(y_test, y_pred) \nprint(cnf_matrix_4)\nprint(classification_report(y_test, y_pred))","bd27e3a8":"# import required modules\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix_4), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\n","ce0080d4":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\nprint(\"Precision:\",metrics.precision_score(y_test, y_pred))\nprint(\"Recall:\",metrics.recall_score(y_test, y_pred))\n","8ace23ca":"Correlations\n","c8427570":"Well, we got a classification rate of 64.4%, considered as fine accuracy.\n\nPrecision: Precision is about being precise, i.e., how accurate our model is. \nIn other words, you can say, when a model makes a prediction, how often it is correct. \nIn our prediction case, when our Logistic Regression model predicted water are going to be potable , that sample has 0% of the time. and that a bad no.\nRecall: If there are samples with 1 (potable) in the testset and our Logistic Regression model can identify it 0% of the time.\n\nF1 Score is 0\nthe logistic regression is behaving bad to this data set.\n","e58b8263":" \n **Logistic regression** \n\nLogisticRegression from sklearn\n","3c572c06":"###Checking for outliers","e834e332":"**Water Quality - First Dataset**\n\n\nData Mining Project\n\n\n\nFiras k","70d754bc":"##Dealing with missing numbers\n\n*ph*: 491\n\n*Sulfate*:781\n\n*Trihalomethanes*:162\n\nTotal missing cells = 1434\n\nbut in one row we may have multiple missing cells, therefore the missing rows are 1265 less than no. of missing cells.\n\n\n**The procedure will be: imputing\/replacing the missing values with mean\/meadian value for each attribute**\n","95086a2d":"KNN is better the DT or logistic regression to this dataset with those parameters\/attributes\/features.","7e724c7c":"**We** can see that a lot of outliers appear in solid, but we will creat new data frame with the standard Z score.\n\n\n\n","e1b521a4":"Accuracy getting better","f9ee137a":"###Optimizing Decision Tree Performance\nScikit-learn, optimization of decision tree classifier performed by only pre-pruning. Maximum depth of the tree can be used as a control variable for pre-pruning.\n","3657714a":"Confusion Matrix for first DC tree module","e5fb5e29":"##Cross-Validation for KNN Classification\nIn k-fold cross-validation, the original sample is randomly partitioned into k \nequal size subsamples.\n\n","b24c2fe7":" **KNN Classifier **\n\nKnn from sklearn","d0e5f95e":"#Cross-Validation\nTo eliminate over-fitting, we can apply cross-validation. We are going to apply k-fold cross-validation by spliting the original data set into k subsets and use one of the subsets as the testing set and the remaining as the training sets.\n\nThis process iterated k times until every subset have been used as the testing set. \n\n\n##10-folds - (k-Folds cross-validation)","05a4596d":"No. of rows after discarding outliers = 3129","06b94b4b":"As we got the best parameters for this model. \nWe can directly assign it to the decision tree classifier and we can check all of its property. \n##checking it\u2019s accuracy- with optimal parameter","9dce34c3":"\nVisualizing Decision Trees\nYou can use Scikit-learn's export_graphviz function for display the tree For plotting tree, you also need to install graphviz and pydotplus.","fa04e65e":"##DATA MINING TASK\nClassification by Decesion Tree using **scikit liabrary**","f0fd9a03":"All out Data Mining task will be on data1 (after removing outliers) ","40b78089":"we could choose differenct neighbors to see which K is the best K.\n","519b3c0f":"#Parameter Tuning\n\nIn every classification technique, \nThere are some parameters that can be tuned to optimize the classification. Some parameters that can be tuned in the decision tree is max depth (the depth of the tree), max feature (the feature used to classify), criterion, and splitter.\n\n##To tune parameter is to use Grid Search. \nBasically, it explores a range of parameters and finds the best combination of parameters. Then repeat the process several times until the best parameters are discovered.\n\nWe will also use Stratified k-fold cross-validation that will prevent a certain class only split them to the same subset"}}