{"cell_type":{"6f2c9364":"code","8e9a4ba2":"code","886f139a":"code","a75e2370":"code","4a4fea33":"code","72439ca9":"code","d7ddf620":"code","fc3d2a8b":"code","ce65e1d5":"code","e93d5e29":"code","44f1cf0b":"code","250c673c":"code","50272cc2":"code","39b07c53":"code","b0187d57":"code","2b552c7f":"markdown","036b1b56":"markdown","74e01a70":"markdown","278b36c3":"markdown","275e7b97":"markdown","e2157ee8":"markdown","0e0ca6b0":"markdown","e2dffcd7":"markdown","05cdf1da":"markdown","895d4ca6":"markdown","c8d51413":"markdown","3e11032b":"markdown","3f0a3e33":"markdown","8ec982be":"markdown","c788e1f0":"markdown","74aa06dd":"markdown","32799be7":"markdown","b31ae86f":"markdown","63192153":"markdown","3daeaae1":"markdown"},"source":{"6f2c9364":"import os\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport json\nimport random\nimport collections\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport matplotlib.gridspec as gridspec\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","8e9a4ba2":"train_df = pd.read_csv(\"..\/input\/g2net-gravitational-wave-detection\/training_labels.csv\")\ntrain_df.head(5)","886f139a":"db_sample=train_df.head(n=2)\ndb_sample","a75e2370":"sns.countplot(data=train_df, x=\"target\")","4a4fea33":"def get_train_file_path(image_id):\n    return \"..\/input\/g2net-gravitational-wave-detection\/train\/{}\/{}\/{}\/{}.npy\".format(\n        image_id[0], image_id[1], image_id[2], image_id)\n\n\n\ntrain_df['path'] = train_df['id'].apply(get_train_file_path)\ntrain_df.head(5)","72439ca9":"def get_npy_df(path):\n    df = pd.DataFrame({\"LIGO Hanford\" : np.load(path)[0],\n                       \"LIGO Livingston\" : np.load(path)[1],\n                       \"Virgo\" : np.load(path)[2]})\n    \n    return df","d7ddf620":"no_target = list(train_df.loc[train_df[\"target\"] == 0, \"path\"])[23]\nno_target = get_npy_df(path = no_target)\n\nyes_target = list(train_df.loc[train_df[\"target\"] == 1, \"path\"])[23]\nyes_target = get_npy_df(path = yes_target)\n\n# Plot\nfig = plt.figure(figsize=(25, 10))\n\nouter = gridspec.GridSpec(1, 3, wspace=0.2, hspace=0.2)\n\nsignal_names = [\"LIGO Hanford\", \"LIGO Livingston\", \"Virgo\"]\ncolors = [\"#f99e97\", \"#55d07a\", \"#69a1ff\"]\n\nfor i, site, col in zip(range(3), signal_names, colors):\n    inner = gridspec.GridSpecFromSubplotSpec(2, 2,\n                                             subplot_spec=outer[i], \n                                             wspace=0.1, hspace=0.1,\n                                             height_ratios= (.20, .80))\n    ax1 = plt.Subplot(fig, inner[0,0])\n    ax2 = plt.Subplot(fig, inner[1,0])\n    \n    mean0 = no_target[site].mean()\n    \n    sns.boxplot(no_target[site], ax=ax1, color=col)\n    sns.kdeplot(data=no_target, x=site, ax=ax2, color=col, shade=True,lw=2, alpha=0.5)\n    ax2.axvline(x=mean0, color=col, lw=1, ls=\"--\")\n    \n    fig.add_subplot(ax1)\n    fig.add_subplot(ax2)\n\n    ax1.set(title='Target=0')\n    ax1.set(xlabel='')\n    axs = [ax1, ax2]\n    for ax in axs:\n        ax.set_xticks([])\n        ax.set_ylabel(\"\")\n    sns.despine(bottom=True, left=True)\n\nfor i, site, col  in zip(range(3), signal_names, colors):\n    inner = gridspec.GridSpecFromSubplotSpec(2, 2,\n                                             subplot_spec=outer[i], \n                                             wspace=0.1, hspace=0.1,\n                                             height_ratios= (.20, .80))\n    ax1 = plt.Subplot(fig, inner[0,1])\n    ax2 = plt.Subplot(fig, inner[1,1])\n    \n    mean1 = yes_target[site].mean()\n    \n    sns.boxplot(yes_target[site], ax=ax1, color=col)\n    sns.kdeplot(data=yes_target, x=site, ax=ax2, color=col, shade=True,lw=2, alpha=0.5)\n    ax2.axvline(x=mean1, color=col, lw=1, ls=\"--\")\n    \n    fig.add_subplot(ax1)\n    fig.add_subplot(ax2)\n    ax1.set(title='Target=1')\n    \n    ax1.set(xlabel='')\n    axs = [ax1, ax2]\n    for ax in axs:\n        ax.set_xticks([])\n        ax.set_ylabel(\"\")\n    sns.despine(bottom=True, left=True)","fc3d2a8b":"def convert_image_id_2_path(image_id: str, is_train: bool = True) -> str:\n    folder = \"train\" if is_train else \"test\"\n    return \"..\/input\/g2net-gravitational-wave-detection\/{}\/{}\/{}\/{}\/{}.npy\".format(\n        folder, image_id[0], image_id[1], image_id[2], image_id \n    )","ce65e1d5":"colors=(\"#f99e97\", \"#55d07a\", \"#69a1ff\")\nsignal_names=(\"LIGO Hanford\", \"LIGO Livingston\", \"Virgo\")\n\nfig, axs = plt.subplots(3, 2,figsize=(18, 8))\nj=0\nfor i in db_sample.index.tolist():\n    _id = train_df.iloc[i][\"id\"]\n    target = train_df.iloc[i][\"target\"]\n    path = convert_image_id_2_path(_id)\n    x = np.load(path)\n    for i in range(3):\n        if i==0:\n             axs[i, j].set_title(f\"id: {_id} ---  Target: {target}\", fontsize=15)\n        axs[i, j].plot(x[i], color=colors[i])\n        axs[i, j].legend([signal_names[i]], fontsize=12, loc=\"lower right\")\n    j=j+1","e93d5e29":"import librosa\nimport librosa.display","44f1cf0b":"fig, axs = plt.subplots(3, 2, figsize=(19, 12))\nj=0\nfor i in db_sample.index.tolist():\n    _id = train_df.iloc[i][\"id\"]\n    target = train_df.iloc[i][\"target\"]\n    path = convert_image_id_2_path(_id)\n    x = np.load(path)\n    for i in range(3):\n        X = librosa.stft(x[i] \/ x[i].max())\n        Xdb = librosa.amplitude_to_db(abs(X))\n        img=librosa.display.specshow(Xdb, sr=2048, x_axis=\"time\", y_axis=\"hz\", vmin=-30, vmax=50, ax=axs[i, j])       \n        if i==0:\n             axs[i, j].set_title(f\"id: {_id} ---  Target: {target}\", fontsize=15)\n        axs[i, j].plot(0)\n        axs[i, j].legend([signal_names[i]], fontsize=10, loc=\"lower right\") \n        fig.colorbar(img, ax=axs[i, j])\n    j=j+1\n    ","250c673c":"sr=2048\nfig, axs = plt.subplots(3, 2, figsize=(19, 12))\nj=0\nfor i in db_sample.index.tolist():\n    _id = train_df.iloc[i][\"id\"]\n    target = train_df.iloc[i][\"target\"]\n    path = convert_image_id_2_path(_id)\n    x = np.load(path)\n    for i in range(3):\n        mfccs = librosa.feature.mfcc(x[i] \/ x[i].max(), sr=sr)\n        img=librosa.display.specshow(mfccs, sr=sr, x_axis=\"time\", vmin=-200, vmax=50, cmap=\"coolwarm\", ax=axs[i, j])       \n        if i==0:\n             axs[i, j].set_title(f\"id: {_id} ---  Target: {target}\", fontsize=15)\n        axs[i, j].plot(0)\n        axs[i, j].legend([signal_names[i]], fontsize=10, loc=\"lower right\") \n        fig.colorbar(img, ax=axs[i, j])\n    j=j+1","50272cc2":"!pip install -q nnAudio -qq\nimport torch\nfrom nnAudio.Spectrogram import CQT1992v2","39b07c53":"fig, axs = plt.subplots(3, 2, figsize=(19, 12))\nj=0\nQ_TRANSFORM = CQT1992v2(sr=2048, fmin=20, fmax=1024, hop_length=32)\nfor i in db_sample.index.tolist():\n    _id = train_df.iloc[i][\"id\"]\n    target = train_df.iloc[i][\"target\"]\n    path = convert_image_id_2_path(_id)\n    x = np.load(path)\n    for i in range(3):\n        waves = x[i] \/ np.max(x[i])\n        waves = torch.from_numpy(waves).float()\n        image = Q_TRANSFORM(waves)\n        axs[i, j].imshow(image.squeeze())\n        if i==0:\n             axs[i, j].set_title(f\"id: {_id} ---  Target: {target}\", fontsize=15)\n        axs[i, j].plot(0)\n        axs[i, j].legend([signal_names[i]], fontsize=10, loc=\"lower right\") \n    j=j+1","b0187d57":"# Define the list of frequencies\nfrequencies= np.arange(0,1000,1)\n\n# Sampling Frequency\nsamplingFrequency   = 2048\n\nfig, axs = plt.subplots(3, 2, figsize=(19, 12))\nj=0\nfor i in db_sample.index.tolist():\n    _id = train_df.iloc[i][\"id\"]\n    target = train_df.iloc[i][\"target\"]\n    path = convert_image_id_2_path(_id)\n    x = np.load(path)\n    for i in range(3):\n        for frequency in frequencies:\n            # Signal - Sine wave with varying frequency + Noise\n            sub2 = np.sin(2*np.pi*x[i]*frequency*1\/samplingFrequency)#+np.random.randn(len(sub1))\n        \n        powerSpectrum, freqenciesFound, time, imageAxis = axs[i, j].specgram(sub2, Fs=samplingFrequency)\n        axs[i, j].set_xlabel('Time')\n        axs[i, j].set_ylabel('Frequency Hz')\n        axs[i, j].set_xlim([0.1, 1.9])\n        axs[i, j].plot(0)\n        axs[i, j].legend([signal_names[i]])\n        fig.colorbar(imageAxis, ax=axs[i, j]).set_label('Amplitude[dB]')\n        if i==0:\n             axs[i, j].set_title(f\"id: {_id} ---  Target: {target}\", fontsize=15)\n\n    j=j+1","2b552c7f":"![10000.jpg](attachment:8dd5475f-3b26-4089-bf55-cb727aec3107.jpg)","036b1b56":"### LIGO Hanford\n![HiResHanford_5.jpg](attachment:d4d51e65-62d4-4bb7-9298-e92576a91c53.jpg)","74e01a70":"# Two-dimensional spectrograms","278b36c3":"# Introduction\n","275e7b97":"### Other notebooks in the competition\n- [G2Net Keras baseline [Training]](https:\/\/www.kaggle.com\/ammarnassanalhajali\/g2net-keras-baseline-training)\n- [G2Net Keras baseline [Inference]](https:\/\/www.kaggle.com\/ammarnassanalhajali\/g2net-keras-baseline-inference)\n","e2157ee8":"* **A black hole** is a region of spacetime where gravity is so strong that nothing\u2014no particles or even electromagnetic radiation such as light\u2014can escape from it.\n* **G2Net** is a network of Gravitational Wave, Geophysics and Machine Learning. Via an Action from COST (European Cooperation in Science and Technology), a funding agency for research and innovation networks, G2Net aims to create a broad network of scientists. From four different areas of expertise, namely GW physics, Geophysics, Computing Science and Robotics, these scientists have agreed on a common goal of tackling challenges in data analysis and noise characterization for GW detectors.\n* **Competition Goal** is to detect GW signals from the mergers of binary black holes. Specifically, you'll build a model to analyze simulated GW time-series data from a network of Earth-based detectors.","0e0ca6b0":"#  Example Time Series - Target vs No Target","e2dffcd7":"# importing Libraries","05cdf1da":"# A Kernel Density Estimate (KDE) ","895d4ca6":"# Signal Transformations\n### 1-Spectrogram\n* **A spectrogram** is a visual way of representing the signal strength, or \u201cloudness\u201d, of a signal over time at various frequencies present in a particular waveform.\n","c8d51413":"### 2-MFCCs\nMel-frequency cepstral coefficients (MFCCs) are coefficients that collectively make up an MFC. They are derived from a type of cepstral representation of the audio clip (a nonlinear \"spectrum-of-a-spectrum\").","3e11032b":"* Each time series contains either detector noise or detector noise plus a simulated gravitational wave signal. The task is to identify when a signal is present in the data (target=1).\n* Each data sample (npy file) contains 3 time series (1 for each detector) and each spans 2 sec and is sampled at 2,048 Hz.","3f0a3e33":"### 3- Constant-Q transform\nIn mathematics and signal processing, **the constant-Q transform** transforms a data series to the frequency domain. It is related to the Fourier transform and very closely related to the complex Morlet wavelet transform","8ec982be":"# Data Description\n* In this competition you are provided with a training set of time series data containing simulated gravitational wave measurements from a network of 3 gravitational wave interferometers (LIGO Hanford, LIGO Livingston, and Virgo)","c788e1f0":"# Files\n* **train** - the training set files, one npy file per observation\n* **test** - the test set files; you must predict the probability that the observation contains a gravitational wave\n* **training_labels.csv** - target values of whether the associated signal contains a gravitational wave\n* **sample_submission.csv** - a sample submission file in the correct format","74aa06dd":"![download.jpg](attachment:1e72853e-0f0b-4b6e-aeef-388ec7748a57.jpg)","32799be7":"# \ud83d\udd73\ufe0fG2Net - EDA & Signal Transformations","b31ae86f":"# Loading Data","63192153":"* The **Laser Interferometer Gravitational-Wave Observatory** (LIGO) is a large-scale physics experiment and observatory designed to detect cosmic gravitational waves and to develop gravitational-wave observations as an astronomical tool","3daeaae1":"1. https:\/\/en.wikipedia.org\/wiki\/Black_hole\n1. https:\/\/www.kaggle.com\/ihelon\/g2net-eda-and-modeling\n1. https:\/\/www.kaggle.com\/andradaolteanu\/g2net-searching-the-sky-eda\n1. https:\/\/www.kaggle.com\/headsortails\/when-stars-collide-g2net-eda\n1. https:\/\/pnsn.org\/spectrograms\/what-is-a-spectrogram#:~:text=A%20spectrogram%20is%20a%20visual,energy%20levels%20vary%20over%20time."}}