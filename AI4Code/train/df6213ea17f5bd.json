{"cell_type":{"23599fa4":"code","9f853813":"code","05f240a7":"code","feefa7dd":"code","d36f1921":"markdown","d20080d3":"markdown"},"source":{"23599fa4":"'''\nWe write this code with the help of PyTorch demo:\n    https:\/\/pytorch.org\/tutorials\/beginner\/transfer_learning_tutorial.html\n  \n\n'''\n\nfrom __future__ import print_function, division\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.optim import lr_scheduler\nimport numpy as np\nimport torchvision\nfrom torchvision import datasets, models, transforms\nimport matplotlib.pyplot as plt\nimport time\nimport os\nimport copy\n\nimport random\n\n\nRANDOM_SEED = 0\n\ntorch.manual_seed(RANDOM_SEED)\ntorch.cuda.manual_seed(RANDOM_SEED)\ntorch.cuda.manual_seed_all(RANDOM_SEED)\nnp.random.seed(RANDOM_SEED)\nrandom.seed(RANDOM_SEED)\n\n\nplt.ion()   # interactive mode\n\n# Data augmentation and normalization for training\n# Just normalization for validation\ndata_transforms = {\n    'train': transforms.Compose([\n        transforms.Resize((230,230)),\n        transforms.RandomRotation(15,),\n        transforms.RandomCrop(224),\n        transforms.RandomHorizontalFlip(),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.507, 0.487, 0.441], std=[0.267, 0.256, 0.276])\n    ]),\n    'valid': transforms.Compose([\n        #transforms.Resize(224),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.507, 0.487, 0.441], std=[0.267, 0.256, 0.276])\n    ]),\n    'test': transforms.Compose([\n        #transforms.Resize(224),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.507, 0.487, 0.441], std=[0.267, 0.256, 0.276])\n    ]),\n}\n\ndata_dir = '..\/input\/100-bird-species'\nimage_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),\n                                          data_transforms[x])\n                  for x in ['train', 'valid', 'test']}\ndataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=64,\n                                             shuffle=True, num_workers=0)\n              for x in ['train', 'valid', 'test']}\ndataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'valid', 'test']}\nclass_names = image_datasets['train'].classes\n\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n\ndef imshow(inp, title=None):\n    \"\"\"Imshow for Tensor.\"\"\"\n    inp = inp.numpy().transpose((1, 2, 0))\n    mean = np.array([0.485, 0.456, 0.406])\n    std = np.array([0.229, 0.224, 0.225])\n    inp = std * inp + mean\n    inp = np.clip(inp, 0, 1)\n    plt.imshow(inp)\n    if title is not None:\n        plt.title(title)\n    plt.pause(0.001)  # pause a bit so that plots are updated\n\n\n# Get a batch of training data\ninputs, classes = next(iter(dataloaders['train']))\n\n# Make a grid from batch\nout = torchvision.utils.make_grid(inputs)\n\nimshow(out)#, title=[class_names[x] for x in classes])","9f853813":"\n\n#%%\n\n#model_ft = models.vgg11_bn(pretrained=True)\n#num_ftrs = model_ft.classifier[0].in_features\n\nmodel_ft = models.wide_resnet101_2(pretrained=True)\nnum_ftrs = model_ft.fc.in_features\n\nhalf_in_size = round(num_ftrs\/2)\nlayer_width = 540\nNum_class=270\n\nclass SpinalNet_ResNet(nn.Module):\n    def __init__(self):\n        super(SpinalNet_ResNet, self).__init__()\n        \n        self.fc_spinal_layer1 = nn.Sequential(\n            #nn.Dropout(p = 0.5), \n            nn.Linear(half_in_size, layer_width),\n            #nn.BatchNorm1d(layer_width), \n            nn.ReLU(inplace=True),)\n        self.fc_spinal_layer2 = nn.Sequential(\n            #nn.Dropout(p = 0.5), \n            nn.Linear(half_in_size+layer_width, layer_width),\n            #nn.BatchNorm1d(layer_width), \n            nn.ReLU(inplace=True),)\n        self.fc_spinal_layer3 = nn.Sequential(\n            #nn.Dropout(p = 0.5), \n            nn.Linear(half_in_size+layer_width, layer_width),\n            #nn.BatchNorm1d(layer_width), \n            nn.ReLU(inplace=True),)\n        self.fc_spinal_layer4 = nn.Sequential(\n            #nn.Dropout(p = 0.5), \n            nn.Linear(half_in_size+layer_width, layer_width),\n            #nn.BatchNorm1d(layer_width), \n            nn.ReLU(inplace=True),)\n        self.fc_out = nn.Sequential(\n            #nn.Dropout(p = 0.5), \n            nn.Linear(layer_width*4, Num_class),)\n        \n    def forward(self, x):\n        x1 = self.fc_spinal_layer1(x[:, 0:half_in_size])\n        x2 = self.fc_spinal_layer2(torch.cat([ x[:,half_in_size:2*half_in_size], x1], dim=1))\n        x3 = self.fc_spinal_layer3(torch.cat([ x[:,0:half_in_size], x2], dim=1))\n        x4 = self.fc_spinal_layer4(torch.cat([ x[:,half_in_size:2*half_in_size], x3], dim=1))\n        \n        \n        x = torch.cat([x1, x2], dim=1)\n        x = torch.cat([x, x3], dim=1)\n        x = torch.cat([x, x4], dim=1)\n\n        \n        x = self.fc_out(x)\n        return x\n    \nclass SpinalNet_VGG(nn.Module):\n    def __init__(self):\n        super(SpinalNet_VGG, self).__init__()\n        \n        self.fc_spinal_layer1 = nn.Sequential(\n            nn.Dropout(p = 0.5), nn.Linear(half_in_size, layer_width),\n            nn.BatchNorm1d(layer_width), nn.ReLU(inplace=True),)\n        self.fc_spinal_layer2 = nn.Sequential(\n            nn.Dropout(p = 0.5), \n            nn.Linear(half_in_size+layer_width, layer_width),\n            nn.BatchNorm1d(layer_width), \n            nn.ReLU(inplace=True),)\n        self.fc_spinal_layer3 = nn.Sequential(\n            nn.Dropout(p = 0.5), \n            nn.Linear(half_in_size+layer_width, layer_width),\n            nn.BatchNorm1d(layer_width), \n            nn.ReLU(inplace=True),)\n        self.fc_spinal_layer4 = nn.Sequential(\n            nn.Dropout(p = 0.5), \n            nn.Linear(half_in_size+layer_width, layer_width),\n            nn.BatchNorm1d(layer_width), \n            nn.ReLU(inplace=True),)\n        self.fc_out = nn.Sequential(\n            nn.Dropout(p = 0.5), \n            nn.Linear(layer_width*4, Num_class),)        \n\n    def forward(self, x):\n        x1 = self.fc_spinal_layer1(x[:, 0:half_in_size])\n        x2 = self.fc_spinal_layer2(torch.cat([ x[:,half_in_size:2*half_in_size], x1], dim=1))\n        x3 = self.fc_spinal_layer3(torch.cat([ x[:,0:half_in_size], x2], dim=1))\n        x4 = self.fc_spinal_layer4(torch.cat([ x[:,half_in_size:2*half_in_size], x3], dim=1))\n        \n        \n        x = torch.cat([x1, x2], dim=1)\n        x = torch.cat([x, x3], dim=1)\n        x = torch.cat([x, x4], dim=1)\n\n        \n        x = self.fc_out(x)\n        return x\n\n\n\nnet_fc = nn.Sequential(\n            nn.Linear(512, 4096),\n            nn.ReLU(inplace=True),\n            nn.Dropout(),\n            nn.Linear(4096, 4096),\n            nn.ReLU(inplace=True),\n            nn.Dropout(),\n            nn.Linear(4096, Num_class)\n        )\n\n\n\n#%%\n\n\n\n\ndef train_model(model, criterion, optimizer, scheduler, num_epochs=25):\n    since = time.time()\n\n    best_model_wts = copy.deepcopy(model.state_dict())\n    best_acc = 0.0\n    test_token=0\n\n    for epoch in range(num_epochs):\n        print('Epoch {}\/{}'.format(epoch, num_epochs - 1))\n        print('-' * 10)\n\n        # Each epoch has a training and validation phase\n        for phase in ['train', 'valid', 'test']:\n             \n            \n            '''\n            Test when a better validation result is found\n            '''\n            if test_token ==0 and phase == 'test':\n                continue\n            test_token =0\n            \n            \n            if phase == 'train':\n                model.train()  # Set model to training mode\n            else:\n                model.eval()   # Set model to evaluate mode\n\n            running_loss = 0.0\n            running_corrects = 0\n\n            # Iterate over data.\n            for inputs, labels in dataloaders[phase]:\n                inputs = inputs.to(device)\n                labels = labels.to(device)\n\n                # zero the parameter gradients\n                optimizer.zero_grad()\n\n                # forward\n                # track history if only in train\n                with torch.set_grad_enabled(phase == 'train'):\n                    outputs = model(inputs)\n                    _, preds = torch.max(outputs, 1)\n                    loss = criterion(outputs, labels)\n\n                    # backward + optimize only if in training phase\n                    if phase == 'train':\n                        loss.backward()\n                        optimizer.step()\n\n                # statistics\n                running_loss += loss.item() * inputs.size(0)\n                running_corrects += torch.sum(preds == labels.data)\n            if phase == 'train':\n                scheduler.step()\n\n            epoch_loss = running_loss \/ dataset_sizes[phase]\n            epoch_acc = running_corrects.double() \/ dataset_sizes[phase]\n\n            print('{} Loss: {:.4f} Acc: {:.4f}'.format(\n                phase, epoch_loss, epoch_acc))\n\n            # deep copy the model\n            if phase == 'valid' and epoch_acc > best_acc:\n                best_acc = epoch_acc\n                best_model_wts = copy.deepcopy(model.state_dict())\n                test_token =1\n\n\n        print()\n\n    time_elapsed = time.time() - since\n    print('Training complete in {:.0f}m {:.0f}s'.format(\n        time_elapsed \/\/ 60, time_elapsed % 60))\n    print('Best val Acc: {:4f}'.format(best_acc))\n\n    # load best model weights\n    model.load_state_dict(best_model_wts)\n    return model\n\n\n\n\n'''\nChanging the fully connected layer to SpinalNet or ResNet or VGG\n'''\n\n#model_ft.fc = nn.Linear(num_ftrs, Num_class)\nmodel_ft.fc = SpinalNet_ResNet()\n#model_ft.classifier =SpinalNet_VGG()\n","05f240a7":"model_ft = model_ft.to(device)\n\ncriterion = nn.CrossEntropyLoss()\n\n# Observe that all parameters are being optimized\noptimizer_ft = optim.SGD(model_ft.parameters(), lr=0.01, momentum=0.9)\n\n# Decay LR by a factor of 0.1 every 7 epochs\nexp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)\n\nmodel_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,\n                       num_epochs=5)","feefa7dd":"\n\n# Training with lower lr\noptimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)\n\n# Decay LR by a factor of 0.1 every 7 epochs\nexp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)\n\nmodel_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,\n                       num_epochs=5)","d36f1921":"Loading pre-trained model from PyTorch.","d20080d3":"Showing 64 images when batch_size=64."}}