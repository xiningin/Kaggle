{"cell_type":{"8376adbf":"code","c7e32b8e":"code","e9f34cca":"code","ab5d3b57":"code","84fc12ae":"code","f3622c45":"code","e6de0127":"code","658c0710":"code","9f6b6b47":"code","182b30ee":"code","e77fdac2":"markdown","869c1c1d":"markdown","837ffccc":"markdown","fbe5bfb1":"markdown"},"source":{"8376adbf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c7e32b8e":"df = pd.read_csv('\/kaggle\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv')\ndf.head()","e9f34cca":"df.info()","ab5d3b57":"df = df.drop(['Serial No.'], axis = 1 )\ndf.head()","84fc12ae":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error","f3622c45":"columns = ['GRE Score','TOEFL Score','University Rating','SOP','LOR ','CGPA','Research']\nX = df[columns]\ny = df['Chance of Admit ']\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, test_size = 0.20,shuffle = False)\nlen(train_X)","e6de0127":"forest_model = RandomForestRegressor(random_state=1)\nforest_model.fit(train_X, train_y)\n\nmodel_1 = RandomForestRegressor(n_estimators=50, random_state=0)\nmodel_2 = RandomForestRegressor(n_estimators=100, random_state=0)\nmodel_3 = RandomForestRegressor(n_estimators=100, criterion='mae', random_state=0)\nmodel_4 = RandomForestRegressor(n_estimators=200, min_samples_split=20, random_state=0)\nmodel_5 = RandomForestRegressor(n_estimators=100, max_depth=7, random_state=0)\n\nmodels = [model_1, model_2, model_3, model_4, model_5]","658c0710":"def score_model(model, X_t = train_X, y_t = train_y, X_v = val_X, y_v = val_y):\n    model.fit(X_t, y_t)\n    return  np.sqrt(mean_squared_error(y_v, model.predict(X_v)))","9f6b6b47":"for i in range(len(models)) :\n    print(\"RMSE of model\",i+1,\":\",score_model(models[i]))","182b30ee":"from sklearn.linear_model import LinearRegression\nmodel_Lreg = LinearRegression()\nmodel_Lreg.fit(train_X, train_y)\nLreg_y = model_Lreg.predict(val_X)\nprint(\"RMSE of Linear regression model : \",np.sqrt(mean_squared_error(val_y, Lreg_y)))","e77fdac2":"## As a Newbie I know till this step so in between linear regression and random forest model , Linear Regression gives least RMSE. \n### Feel free to suggest any suggestions or any step which I am missing or doing wrong,   Thank You !","869c1c1d":"## Short Prediction model by Noob, Any suggestions will help ","837ffccc":"# Trying Random forest model","fbe5bfb1":"#  Trying linear regression model"}}