{"cell_type":{"b875ee89":"code","d8a28f4d":"code","04dded32":"code","270b34dc":"code","527d67ea":"code","65b92107":"code","21ac3348":"code","8ef11ee0":"code","4f192d87":"code","dbf387c2":"code","72627699":"code","a5776bf4":"markdown","74cb9e18":"markdown","a0b396ff":"markdown","f148df20":"markdown","b22c9b41":"markdown"},"source":{"b875ee89":"#Load packages\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, f1_score, recall_score, precision_score, confusion_matrix\nfrom sklearn.svm import SVC\nimport re","d8a28f4d":"#Load dataset\ndf = pd.read_csv(\"\/kaggle\/input\/sentiment-analysis-in-commodity-market-gold\/gold-dataset-sinha-khandait.csv\")","04dded32":"df = df[df[\"Price Sentiment\"] != 'none']","270b34dc":"print(\"Commodity News Headlines\")\ndisplay(df[[\"News\",\"Price Sentiment\"]])","527d67ea":"def cleaner(impure_data):\n    temp_list = []\n    for item in impure_data:\n        #finding words which start with @\n        item = re.sub('@\\S+', '', item)\n        \n        #finding words which start with http\n        item = re.sub('http\\S+\\s*', '', item)\n        \n        #finding special characters, but not \"emoji\"\n        item = re.sub('[%s]' % re.escape(\"\"\"!\"#$%&'()*+,-.\/:;<=>?@[\\]^_`{|}~\"\"\"), '', item)\n        temp_list.append(item)\n    return temp_list","65b92107":"def headline_sentiment(df):\n    headlines = df[\"News\"]\n    polarity = df[\"Price Sentiment\"].tolist()\n    \n    #cleaning headlines i.e. removing @mentions, http(s) links and special characters such as punctuations\n    clean_headline = cleaner(headlines)\n    \n    #initializing tf-idf vectorizer\n    tf_idfvectorizer = TfidfVectorizer(sublinear_tf=True, use_idf=True)\n    \n    #splitting the data into train and test dataset in 70 : 30 ratio at random\n    X_train, X_test, Y_train, Y_test = train_test_split(clean_headline, polarity, test_size = 0.3)\n    \n    train_corpus_tf_idf = tf_idfvectorizer.fit_transform(X_train) \n    test_corpus_tf_idf = tf_idfvectorizer.transform(X_test)\n    \n    #using SVC package to initialize a classifier with Linear kernel and other default parameters\n    SVM_L = SVC(kernel= 'linear')\n    \n    #fitting the sparse matrix in the classifier with their respective sentiments\n    SVM_L.fit(train_corpus_tf_idf, Y_train)\n    \n    #predicting the sentiments for the test dataset\n    Y_pred = SVM_L.predict(test_corpus_tf_idf)\n    \n    #this prints accuracy score for the test dataset\n    print(\"Testing Accuracy:\",accuracy_score(Y_test,Y_pred))\n    \n    #this prints confusion matrix for the test dataset\n    labels = np.unique(Y_test)    \n    m = confusion_matrix(Y_test,Y_pred, labels=labels)\n    print(\"\\nConfusion matrix on test data\")\n    cm = pd.DataFrame(m, index=labels, columns=labels)\n    cm.index = \"Actual: \" + cm.index\n    cm.columns = \"Predicted: \" + cm.columns\n    display(cm)\n    \n    #saving the data into a csv file in the current folder\n    temp_df = pd.DataFrame()\n    temp_df[\"News\"] = X_test\n    temp_df[\"Actual Price Sentiment\"] = Y_test\n    temp_df[\"Predicted Sentiment\"] = Y_pred\n    temp_df.to_csv(\"predicted.csv\")\n    \n    print('Predictions on Test Data are as follows:')\n    display(temp_df)\n\n    return(tf_idfvectorizer,SVM_L)","21ac3348":"vectorizer,model = headline_sentiment(df)","8ef11ee0":"#Trying sample headlines\nvector = vectorizer.transform([\"Gold expected to beat expectations.\"])\nsentiment = model.predict(vector)\nprint(sentiment)","4f192d87":"#Trying sample headlines\nvector = vectorizer.transform([\"The price of gold continues declining.\"])\nsentiment = model.predict(vector)\nprint(sentiment)","dbf387c2":"#Trying sample headlines\nvector = vectorizer.transform([\"Gold price continues to improve.\"])\nsentiment = model.predict(vector)\nprint(sentiment)","72627699":"#Trying sample headlines\nvector = vectorizer.transform([\"Gold price expected to remain steady.\"])\nsentiment = model.predict(vector)\nprint(sentiment)","a5776bf4":"### The following piece of code is used to clean the headlines","74cb9e18":"### Try sentence transformers to get extraordinary improvement in results","a0b396ff":"### Let us create a simple SVM model with tfidf vectorizer","f148df20":"## The Price Sentiment column contains 4 classes (positive, neutral, negative and none)\n* Positive denotes upward movement in price\n* Negative denotes downward movement in price\n* Neutral denotes sideways (steady) movement in price\n* None denotes that no assessment about prices can be made from the news headline\n\n### Let us ignore the news headlines that do not have any price movement information in it, i.e. drop rows with \"Price Sentiment\" as 'none'","b22c9b41":"### Important\n* Looking at the confusion matrix, it  is clear that the performance on neutral will be poor. \n* Positive and negative headlines are likely to be identified correctly"}}