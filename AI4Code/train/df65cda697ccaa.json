{"cell_type":{"5932ad3a":"code","4661f557":"code","e2bbddd3":"code","2c4d67c8":"code","172f1e40":"code","4f5222e1":"code","6a2d0e81":"code","cbf3ee21":"code","c8f16d5d":"code","e6d01573":"code","4cc9d8c8":"code","ed72f0ad":"code","ef683b00":"code","a0eb6171":"code","93ebf967":"code","7eac4aea":"code","8aa57c5c":"code","d35d5860":"code","c3821eb4":"code","6f7743b8":"code","154888af":"code","aff929bb":"code","1d98c5b4":"code","c5002512":"markdown","3b8a7e0e":"markdown","bfceef71":"markdown","4dc3c8e8":"markdown","fa7ecc45":"markdown","874069b6":"markdown","a63e869a":"markdown"},"source":{"5932ad3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport io\nimport requests\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nimport matplotlib.pyplot as plt\nplt.close(\"all\")\n\n# Raw data\nurl_c=\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\"\nsc=requests.get(url_c).content\nconfirmed=pd.read_csv(io.StringIO(sc.decode('utf-8')))\nurl_d=\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv\"\nsd=requests.get(url_d).content\ndeath=pd.read_csv(io.StringIO(sd.decode('utf-8')))\nurl_r=\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv\"\nsr=requests.get(url_r).content\nrecovered=pd.read_csv(io.StringIO(sr.decode('utf-8')))\n\n# France confirmed\nmask_fr=confirmed[\"Country\/Region\"]==\"France\"\nmask_2=pd.isna(confirmed[\"Province\/State\"])\nconfirmed_fr=confirmed[mask_fr & mask_2]\n\n# France deaths\nmask_fr=death[\"Country\/Region\"]==\"France\"\nmask_2=pd.isna(death[\"Province\/State\"])\ndeath_fr=death[mask_fr & mask_2]\n\n# France recovered\nmask_fr=recovered[\"Country\/Region\"]==\"France\"\nmask_2=pd.isna(recovered[\"Province\/State\"])\nrecovered_fr=recovered[mask_fr & mask_2]\n\n# start date\nstart='3\/24\/20'\nstart_idx=confirmed_fr.T.index.tolist().index(start)\n\n# Figure sizes\nfigsize = (20,10)\n\n# Indices\nindex_0 = 130\nindex_1 = 115\n\n# extract daily world\ndef extract_daily(df, world_pop, colname):\n    mask_df=df[\"Country\/Region\"].isin(world_pop[\"Country\"].values) | df[\"Country\/Region\"].isin([\"US\", \"Korea, South\"])\n    mask_2=pd.isna(df[\"Province\/State\"])\n    df_world=df[mask_df & mask_2]\n    df_world=df_world.iloc[:,[1, -1]]\n    total_df = df[mask_2].iloc[:,-1].sum()\n    append_df = pd.DataFrame([['World', total_df]], columns=df_world.columns)\n    df_world = df_world.append(append_df, ignore_index=True)\n    df_world.columns = [\"Country\", colname]\n    return df_world\n\n# plot function\ndef plot_with_lin_trend(df, xcol, ycol, std_dev=False, logy=False):\n    z = np.polyfit(x=df.loc[:,xcol], y=df.loc[:,ycol], deg=1)\n    p = np.poly1d(z)\n    print(z)\n    #lissage\n    liss_f = np.polyfit(x=df.loc[:,xcol], y=df.loc[:,ycol], deg=10)\n    liss = np.poly1d(liss_f)\n    # df['trendline'] = p(df.loc[:,xcol])\n    #df['lissage'] = liss(df.loc[:,xcol])\n    df[ycol].plot(kind='line', legend=True, logy=logy)\n    #df['trendline'].plot(logy=logy, legend=True, figsize=figsize)\n    #df['lissage'].plot(logy=logy, legend=True, figsize=figsize)\n    if std_dev:\n        df['sigma'] = df[ycol].std()\n        df['sigma'].plot(legend=True, figsize=figsize, logy=logy)\n    return z\n\n# plot function using index\ndef plot_with_lin_trend_idx(df, ycol):\n    z = np.polyfit(x=df.index, y=df.loc[:,ycol], deg=1)\n    p = np.poly1d(z)\n    print(z)\n    #df['trendline'] = p(df.index)\n    df[ycol].plot(legend=True, figsize=figsize)\n    #df['trendline'].plot(legend=True, figsize=figsize)\n    return z","4661f557":"print(confirmed_fr.T)\nprint(death_fr.T)\nprint(recovered_fr.T)","e2bbddd3":"print(confirmed_fr.T[index_0][start:].index)","2c4d67c8":"data = {\n    'C': confirmed_fr.T[index_0][start:],\n    'D': death_fr.T[index_0][start:],\n    'R': recovered_fr.T[index_1][start:]\n}\nindex = pd.Index(data=confirmed_fr.T[index_0][start:].index, dtype='datetime64[ns]')\ndata_frame = pd.DataFrame(data=data, index=index)","172f1e40":"print(data_frame)","4f5222e1":"data_frame = data_frame.fillna(0).resample('W', closed='right', label='left').mean()\ndata_frame.plot(logy=True, kind='line', figsize=figsize)\nprint(data_frame.iloc[(data_frame.size%3-5):])\nplt.figure()","6a2d0e81":"mask = data_frame[\"C\"] != 0 & data_frame[\"D\"].any()\nclean_df = data_frame[mask]\nmortality = 100*clean_df[\"D\"]\/clean_df[\"C\"]\nepr = 100*(clean_df[\"D\"]+clean_df[\"R\"])\/clean_df[\"C\"]","cbf3ee21":"mortality_df = pd.DataFrame({'M':mortality.astype('float'), 'd': pd.Series(data=range(0, mortality.size), index=mortality.index, dtype='float')})\nepr_df = pd.DataFrame({'M':epr.astype('float'), 'd': pd.Series(data=range(0, epr.size), index=epr.index, dtype='float')})","c8f16d5d":"m_trend = plot_with_lin_trend(mortality_df, 'd', 'M')","e6d01573":"e_trend = plot_with_lin_trend(epr_df, 'd', 'M')","4cc9d8c8":"proj = (90 - e_trend[1])\/e_trend[0] - epr_df[\"d\"][-1]\nprint(epr_df.size)\nprint(\"Actual days before progression converges : {0} days\".format(proj))","ed72f0ad":"vc_s=(clean_df[\"C\"][clean_df.iloc[1].name:].values-clean_df[\"C\"][clean_df.iloc[0].name:clean_df.iloc[-2].name].values)\nvd_s=(clean_df[\"D\"][clean_df.iloc[1].name:].values-clean_df[\"D\"][clean_df.iloc[0].name:clean_df.iloc[-2].name].values)\nvr_s=(clean_df[\"R\"][clean_df.iloc[1].name:].values-clean_df[\"R\"][clean_df.iloc[0].name:clean_df.iloc[-2].name].values)\n\nvc_s_norm = vc_s\nvd_s_norm = vd_s\nvr_s_norm = vr_s\n\nvdr_s_norm = vd_s \/ vc_s\n\nspeed_df = pd.DataFrame(\n    {\n        'VC':vc_s_norm.astype('float'), \n        'VD':vd_s_norm.astype('float'), \n        'VDR' : vdr_s_norm.astype('float'),\n        'VR':vr_s_norm.astype('float'), \n        'd': pd.Series(data=range(0, vc_s_norm.size), \n                       index=clean_df[\"C\"][clean_df.iloc[1].name:].index, \n                       dtype='float')\n    })","ef683b00":"vc_trend = plot_with_lin_trend(speed_df, 'd', 'VC', True)","a0eb6171":"vd_trend = plot_with_lin_trend(speed_df, 'd', 'VD', True)","93ebf967":"vdr_trend = plot_with_lin_trend(speed_df, 'd', 'VDR', False, True)","7eac4aea":"vr_trend = plot_with_lin_trend(speed_df, 'd', 'VR', True)","8aa57c5c":"ac_s=(speed_df[\"VC\"][speed_df.iloc[1].name:].values-speed_df[\"VC\"][speed_df.iloc[0].name:speed_df.iloc[-2].name].values)\nad_s=(speed_df[\"VD\"][speed_df.iloc[1].name:].values-speed_df[\"VD\"][speed_df.iloc[0].name:speed_df.iloc[-2].name].values)\nar_s=(speed_df[\"VR\"][speed_df.iloc[1].name:].values-speed_df[\"VR\"][speed_df.iloc[0].name:speed_df.iloc[-2].name].values)\n\nac_s_norm = ac_s\nad_s_norm = ad_s\nar_s_norm = ar_s\n\nacc_df = pd.DataFrame({'AC':ac_s_norm.astype('float'), 'AD':ad_s_norm.astype('float'), 'AR':ar_s_norm.astype('float'), 'd': pd.Series(data=range(0, ac_s_norm.size), index=speed_df[\"VC\"][speed_df.iloc[1].name:].index, dtype='float')})","d35d5860":"ac_trend = plot_with_lin_trend(acc_df, 'd', 'AC', std_dev=True)","c3821eb4":"ad_trend = plot_with_lin_trend(acc_df, 'd', 'AD', True)","6f7743b8":"ar_trend = plot_with_lin_trend(acc_df, 'd', 'AR', True)","154888af":"world_pop=pd.read_csv(\"..\/input\/world-population\/world_pop.csv\")\nc_world=extract_daily(confirmed, world_pop, 'C')\nd_world=extract_daily(death, world_pop, 'D')\nr_world=extract_daily(recovered, world_pop, 'R')\nn_world=world_pop.sort_values(by=['Country'])[world_pop['Country'] != \"China\"].reset_index(drop=True)\nn_world.columns = ['Country', 'N']\nc100k = 100000*c_world['C']\/n_world['N']\nd100k = 100000*d_world['D']\/n_world['N']\nprog = 100*(d_world['D']+r_world['R'])\/c_world['C']\nworld_df=pd.DataFrame({\n    'Country': c_world[\"Country\"],\n    'N': n_world['N'],\n    'C': c_world['C'],\n    'D': d_world['D'],\n    'R': r_world['R'],\n    'C100K': c100k,\n    'D100K': d100k,\n    'D\/C': 100*d_world['D']\/c_world['C'],\n    'score': np.log10(c100k*d100k*100)\n}, index=c_world.index)","aff929bb":"world_df.sort_values(by=['score'], ascending=False)","1d98c5b4":"world_df.to_csv(r'world_score.csv', index = False)","c5002512":"# Days before 90% progression level","3b8a7e0e":"# Accelerations","bfceef71":"# Contamination, deaths and recovery speed","4dc3c8e8":"## Derive D\/C and (D+R)\/C (mortality rate and epidemic progression rate)","fa7ecc45":"# World comparison","874069b6":"# COVID 19 France Analysis and Trends","a63e869a":"# Confirmed, death and recovered cases in France (metropolitan)"}}