{"cell_type":{"052272f3":"code","e8cdddb4":"code","22534d78":"code","307933c1":"code","dd5ab978":"code","902323ec":"code","cd794e19":"code","9c36717d":"code","61b5b1d4":"code","8e5d0335":"code","ce209118":"code","17fb34bd":"code","ebb9a472":"code","bbe91684":"code","211cb02f":"code","24945ea0":"code","76f7531d":"code","14ccb506":"code","95a17b9e":"code","fad94e5a":"code","01fc3ee1":"code","871ae29f":"code","61864c5d":"code","63a4fd19":"code","cdca1bec":"code","9060f8ba":"code","d7042a6e":"code","f4ea6b74":"code","1fee2f1f":"code","ab491592":"code","de360971":"code","395f1655":"code","8e4ee87f":"code","4221c8ef":"markdown","87087cdc":"markdown","b28645c5":"markdown","c48d7006":"markdown","b7d41a3f":"markdown","63fe6489":"markdown","d06115ec":"markdown","077157e1":"markdown","69f0d93c":"markdown","b4a2c504":"markdown","0e556d11":"markdown","d7dd28cb":"markdown"},"source":{"052272f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt #Visualise operations\nplt.style.use('seaborn-whitegrid') #I wanna use seaborn-whitegrid style\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e8cdddb4":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_passengerId = test_df[\"PassengerId\"] #Because I have to equalize this passengerId to another variable\n","22534d78":"train_df.columns","307933c1":"train_df.head()","dd5ab978":"train_df.describe() #Gives the hash infos about the data","902323ec":"train_df.info() #get the type of the column of my dataset","cd794e19":"def bar_plot(variable):\n    \"\"\"\n        input: variable as \"Sex\"\n        output:bar plot & value count\n    \"\"\"\n    #get feature\n    var = train_df[variable]\n    #Calculates the gender category and their samples\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n{}\".format(variable,varValue))","9c36717d":"category1 = ['Survived','Sex','Pclass','Embarked','SibSp','Parch']\n\nfor c in category1:\n    bar_plot(c)","61b5b1d4":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","8e5d0335":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable] , bins = 95)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","ce209118":"numericVar = ['Fare','Age','PassengerId']\nfor n in numericVar:\n    plot_hist(n)","17fb34bd":"#Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]]\n","ebb9a472":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index=False).mean()\n","bbe91684":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)\n","211cb02f":"#Sex and Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)\n","24945ea0":"#SibSp and Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)\n","76f7531d":"#Parch and Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)\n","14ccb506":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","95a17b9e":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]\n","fad94e5a":"#Drop Outliers\ntrain_Df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop = True)\n","01fc3ee1":"train_d_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","871ae29f":"train_df.columns[train_Df.isnull().any()]","61864c5d":"train_df.isnull().sum()","63a4fd19":"train_df[train_df[\"Embarked\"].isnull()]","cdca1bec":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","9060f8ba":"train_df[\"Embarked\"] =train_df[\"Embarked\"].fillna(\"C\")","d7042a6e":"train_df[train_df[\"Embarked\"].isnull()]","f4ea6b74":"train_df[train_df[\"Fare\"].isnull()]","1fee2f1f":"train_df[train_df[\"Pclass\"]==3]","ab491592":"train_df[train_df[\"Pclass\"]==3][\"Fare\"]","de360971":"np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"])","395f1655":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","8e4ee87f":"train_df[train_df[\"Fare\"].isnull()]","4221c8ef":"<a id=5><br>\n# Outlier Detection","87087cdc":"<a id=4><br>\n# Basic Data Analysis\n* Pclass -Survived\n* Sex - Survived\n* SibSp - Survived    \n* Parch - Survived    ","b28645c5":"<a id=6.2><br>\n# Fill Missing Value\n    Embarked has 2 missing value\n    Fare has only one","c48d7006":"<a id=6.1><br>\n# Find Missing Value","b7d41a3f":"# INTRODUCTION\n*Titanic has sinked cause of the most notorious ship-accident in the history.During her voyage,she collided within an ice-berg.There were lots of passengers and crews as you know.\n\nContent:\n*     1 - [Uploading the dataset and check the datas](#1)\n*     2 - [Variable Description](#2)\n*     3 - [Univariate Variable Analysis](#3)\n* *         3.1 - [Categorical Variable Analysis](#3.1)\n* *         3.2 - [Numerical Variable Analysis](#3.2)\n*     4 - [Basic Data Analysis](#4)\n*     5 - [Outlier Detection](#5)\n*     6 - [Missing Values](#6)\n* *         6.1 - [Find Missing Value](#6.1)\n* *         6.2 - [Fill Missing Value](#6.2)","63fe6489":"<a id=3><br>\n# Univariate Variable Analysis\n* Categorical Variable Analysis : Survived,Sex,Pclass,Embarked,Cabin,Name,Ticket,SibSp and Parch\n* Numerical variable Analysis : PassengerId,Age,Fare","d06115ec":"<a id=6><br>\n# Missing Values\n* Find Missing Value\n* Fill Missing Value    ","077157e1":"<a id=3.2><br>\n# Numerical Variable","69f0d93c":"<a id=3.1><br>\n# Categorical Variable\n    ","b4a2c504":"<a id=1><br>\n# Uploading the dataset and check the datas\n","0e556d11":"The observed missing values are gathered and saved for this project","d7dd28cb":"<a id=2><br>\n#     Variable Description\n    \n    1-PassengerId --uniquie for each person to count the number of passengers.\n    2-Survived --survive (1) or die(0)\n    3-Pclass --passenger class\n    4-Name --passenger name\n    5-Sex --gender of passenger\n    6-Age --age of the passenger\n    7-SibSp --number of siblings\/spouses\n    8-Parch --number of parents\/children\n    9-Ticket --ticket name\n    10-Fare --amount of money spent on ticket\n    11-Cabin --different cabin in diffrent category.Category of cabin\n    12-Embarked --port where passenger embarked (c:cherbourg,q=queenstorm,s=southampton)"}}