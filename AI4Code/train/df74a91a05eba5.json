{"cell_type":{"213533a9":"code","57a38130":"code","61201c22":"code","84697f2e":"code","0b848c83":"code","68ad2850":"code","ac94d5b7":"code","bd1225f6":"code","af6488d3":"code","09eb8c9b":"code","7c3129e2":"code","e08d9d22":"code","cef1010d":"code","4c931597":"code","bbec7ef3":"code","c4854521":"code","7e11c03b":"code","eeadeb66":"code","62726419":"code","2c166c83":"code","2dbb6e3d":"code","40cb4e10":"code","8cbc0f2d":"markdown","00681c9a":"markdown"},"source":{"213533a9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', 500)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","57a38130":"# Standard plotly imports\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nfrom plotly.offline import iplot, init_notebook_mode\nimport cufflinks\nimport cufflinks as cf\nimport plotly.figure_factory as ff\nimport os\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","61201c22":"import janestreet\nenv = janestreet.make_env() # initialize the environment\niter_test = env.iter_test() # an iterator which loops over the test set","84697f2e":"from sklearn import preprocessing\nimport xgboost as xgb\nprint(\"XGBoost version:\", xgb.__version__)","0b848c83":"print('# File sizes')\ntotal_size = 0\nstart_path = '..\/input\/jane-street-market-prediction'  # To get size of current directory\nfor path, dirs, files in os.walk(start_path):\n    for f in files:\n        fp = os.path.join(path, f)\n        total_size += os.path.getsize(fp)\nprint(\"Directory size: \" + str(round(total_size\/1000000, 2)) + 'MB')","68ad2850":"%%time\ntrain = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv')\nfeatures = pd.read_csv('..\/input\/jane-street-market-prediction\/features.csv')\nexample_test = pd.read_csv('..\/input\/jane-street-market-prediction\/example_test.csv')\nsample_prediction_df = pd.read_csv('..\/input\/jane-street-market-prediction\/example_sample_submission.csv')\nprint (\"Data is loaded!\")","ac94d5b7":"print('train shape is {}'.format(train.shape))\nprint('features shape is {}'.format(features.shape))\nprint('example_test shape is {}'.format(example_test.shape))\nprint('sample_prediction_df shape is {}'.format(sample_prediction_df.shape))","bd1225f6":"train.head()","af6488d3":"from pandas.plotting import lag_plot\nimport matplotlib.pyplot as plt\nimport seaborn as sns","09eb8c9b":"train['weight_resp']   = train['weight']*train['resp']\ntrain['weight_resp_1'] = train['weight']*train['resp_1']\ntrain['weight_resp_2'] = train['weight']*train['resp_2']\ntrain['weight_resp_3'] = train['weight']*train['resp_3']\ntrain['weight_resp_4'] = train['weight']*train['resp_4']\n\nfig, ax = plt.subplots(figsize=(15, 5))\nresp    = pd.Series(1+(train.groupby('date')['weight_resp'].mean())).cumprod()\nresp_1  = pd.Series(1+(train.groupby('date')['weight_resp_1'].mean())).cumprod()\nresp_2  = pd.Series(1+(train.groupby('date')['weight_resp_2'].mean())).cumprod()\nresp_3  = pd.Series(1+(train.groupby('date')['weight_resp_3'].mean())).cumprod()\nresp_4  = pd.Series(1+(train.groupby('date')['weight_resp_4'].mean())).cumprod()\nax.set_xlabel (\"Day\", fontsize=18)\nax.set_title (\"Cumulative daily return for resp and time horizons 1, 2, 3, and 4 (500 days)\", fontsize=18)\nresp.plot(lw=3, label='resp x weight')\nresp_1.plot(lw=3, label='resp_1 x weight')\nresp_2.plot(lw=3, label='resp_2 x weight')\nresp_3.plot(lw=3, label='resp_3 x weight')\nresp_4.plot(lw=3, label='resp_4 x weight')\n# day 85 marker\nax.axvline(x=85, linestyle='--', alpha=0.3, c='red', lw=1)\nax.axvspan(0, 85 , color=sns.xkcd_rgb['grey'], alpha=0.1)\nplt.legend(loc=\"lower left\");","7c3129e2":"trades_per_day = train.groupby(['date'])['ts_id'].count()\nfig, ax = plt.subplots(figsize=(15, 5))\nplt.plot(trades_per_day)\nax.set_xlabel (\"Day\", fontsize=18)\nax.set_title (\"Total number of ts_id for each day\", fontsize=18)\n# day 85 marker\nax.axvline(x=85, linestyle='--', alpha=0.3, c='red', lw=1)\nax.axvspan(0, 85 , color=sns.xkcd_rgb['grey'], alpha=0.1)\nax.set_xlim(xmin=0)\nax.set_xlim(xmax=500)\nplt.show()","e08d9d22":"fig, ax = plt.subplots(figsize=(15, 5))\nplt.plot(23400\/trades_per_day)\nax.set_xlabel (\"Day\", fontsize=18)\nax.set_ylabel (\"Av. time between trades (s)\", fontsize=18)\nax.set_title (\"Average time between trades for each day\", fontsize=18)\nax.axvline(x=85, linestyle='--', alpha=0.3, c='red', lw=1)\nax.axvspan(0, 85 , color=sns.xkcd_rgb['grey'], alpha=0.1)\nax.set_xlim(xmin=0)\nax.set_xlim(xmax=500)\nax.set_ylim(ymin=0)\nax.set_ylim(ymax=12)\nplt.show()","cef1010d":"missing_values_count = train.isnull().sum()\nprint (missing_values_count)\ntotal_cells = np.product(train.shape)\ntotal_missing = missing_values_count.sum()\nprint (\"% of missing data = \",(total_missing\/total_cells) * 100)","4c931597":"train = train[train['weight'] != 0]\ntrain['action'] = (train['resp'].values > 0).astype('int')","bbec7ef3":"train = train[train['date']>85]","c4854521":"X_train = train.loc[:, train.columns.str.contains('feature')]\ny_train = train.loc[:, 'action']","7e11c03b":"X_train = X_train.fillna(-999)","eeadeb66":"x = train['action'].value_counts().index\ny = train['action'].value_counts().values\n\ntrace2 = go.Bar(\n     x=x ,\n     y=y,\n     marker=dict(\n         color=y,\n         colorscale = 'Viridis',\n         reversescale = True\n     ),\n     name=\"Imbalance\",    \n )\nlayout = dict(\n     title=\"Data imbalance - action\",\n     #width = 900, height = 500,\n     xaxis=go.layout.XAxis(\n     automargin=True),\n     yaxis=dict(\n         showgrid=False,\n         showline=False,\n         showticklabels=True,\n #         domain=[0, 0.85],\n     ), \n)\nfig1 = go.Figure(data=[trace2], layout=layout)\niplot(fig1)\n","62726419":"del x, y, train","2c166c83":"clf = xgb.XGBClassifier(\n    n_estimators=500,\n    max_depth=11,\n    learning_rate=0.05,\n    subsample=0.9,\n    colsample_bytree=0.7,\n    missing=-999,\n    random_state=2020,\n    tree_method='gpu_hist'  # THE MAGICAL PARAMETER\n)","2dbb6e3d":"%time clf.fit(X_train, y_train)","40cb4e10":"for (test_df, sample_prediction_df) in iter_test:\n    X_test = test_df.loc[:, test_df.columns.str.contains('feature')]\n    X_test.fillna(-999)\n    y_preds = clf.predict(X_test)\n    sample_prediction_df.action = y_preds\n    env.predict(sample_prediction_df)","8cbc0f2d":"## EDA","00681c9a":"## Preprocessing Data and Modelling"}}