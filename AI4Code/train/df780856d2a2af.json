{"cell_type":{"3fde26a4":"code","36f01269":"code","fee55502":"code","51661a5b":"code","d26b63cf":"code","79d36b78":"code","f43af345":"code","fd4c3388":"code","4c38aa12":"code","0cf5f9f4":"code","3798c242":"code","2bccfb77":"code","c14f591c":"code","be420f59":"code","f1cf8c3c":"code","7be0dd0a":"code","a182e43c":"code","2fda8945":"code","3f269c2c":"code","3862eeef":"code","2dc99276":"code","bb130045":"code","41739aba":"code","d0ffbc19":"markdown","83a1a532":"markdown","c5751c1f":"markdown"},"source":{"3fde26a4":"import seaborn as sns\ndf = sns.load_dataset(\"car_crashes\")\ndf.columns","36f01269":"\n[col for col in df.columns if df[col].dtype !=\"O\" ]","fee55502":"###############################################\n# G\u00f6rev 1: car_crashes verisindeki numeric de\u011fi\u015fkenlerin isimlerini b\u00fcy\u00fck harfe \u00e7eviriniz ve ba\u015f\u0131na NUM ekleyiniz.\n###############################################\n\n\nimport seaborn as sns\ndf = sns.load_dataset(\"car_crashes\")\ndf.columns\n\n[col for col in df.columns if df[col].dtype !=\"O\" ]\n# Veri setini ba\u015ftan okutarak a\u015fa\u011f\u0131daki \u00e7\u0131kt\u0131y\u0131 elde etmeye \u00e7al\u0131\u015f\u0131n\u0131z.\n\n# ['NUM_TOTAL',\n#  'NUM_SPEEDING',\n#  'NUM_ALCOHOL',\n#  'NUM_NOT_DISTRACTED',\n#  'NUM_NO_PREVIOUS',\n#  'NUM_INS_PREMIUM',\n#  'NUM_INS_LOSSES',\n#  'ABBREV']\n\n# Notlar:\n# Numerik olmayanlar\u0131n da isimleri b\u00fcy\u00fcmeli.\n# Tek bir list comp yap\u0131s\u0131 ile yap\u0131lmal\u0131.","51661a5b":"## harf b\u00fcy\u00fctme\n[col.upper() for col in df.columns if df[col].dtype !=\"O\" ]\n","d26b63cf":"#Hepsine Num ekleme\n[\"NUM_\"+col.upper() for col in df.columns if df[col].dtype !=\"O\" ]\n","79d36b78":"[\"NUM_\"+col.upper() if df[col].dtype !=\"O\" else col.upper() for col in df.columns  ]\n","f43af345":"###############################################\n# G\u00f6rev 2: \u0130sminde \"no\" BARINDIRMAYAN de\u011fi\u015fkenlerin isimlerininin SONUNA \"FLAG\" yaz\u0131n\u0131z.\n###############################################\n\n# Notlar:\n# T\u00fcm de\u011fi\u015fken isimleri b\u00fcy\u00fck olmal\u0131.\n# Tek bir list comp ile yap\u0131lmal\u0131.\n\n# Beklenen \u00e7\u0131kt\u0131:\n\n# ['TOTAL_FLAG',\n#  'SPEEDING_FLAG',\n#  'ALCOHOL_FLAG',\n#  'NOT_DISTRACTED',\n#  'NO_PREVIOUS',\n#  'INS_PREMIUM_FLAG',\n#  'INS_LOSSES_FLAG',\n#  'ABBREV_FLAG']\n\n###############################################\n# G\u00f6rev 2 \u00c7\u00f6z\u00fcm\n###############################################\n\nimport seaborn as sns\ndf = sns.load_dataset(\"car_crashes\")x\ndf.columns\n[col.upper() +\"_FLAG\" if \"no\" not in col else col.upper() for col in df.columns ]","fd4c3388":"\n###############################################\n# G\u00f6rev 3: A\u015fa\u011f\u0131da verilen de\u011fi\u015fken isimlerinden FARKLI olan de\u011fi\u015fkenlerin isimlerini se\u00e7erek yeni bir df olu\u015fturunuz.\n###############################################\n\n# df.columns\n# og_list = [\"abbrev\", \"no_previous\"]\n\n# Notlar:\n# \u00d6nce yukar\u0131daki listeye g\u00f6re list comprehension kullanarak new_cols ad\u0131nda yeni liste olu\u015fturunuz.\n# Sonra df[\"new_cols\"] ile bu de\u011fi\u015fkenleri se\u00e7erek yeni bir df olu\u015fturunuz ad\u0131n\u0131 new_df olarak isimlendiriniz.\n\n# Beklenen \u00e7\u0131kt\u0131:\n\n# new_df.head()\n#\n#    total  speeding  alcohol  not_distracted  ins_premium  ins_losses\n# 0 18.800     7.332    5.640          18.048      784.550     145.080\n# 1 18.100     7.421    4.525          16.290     1053.480     133.930\n# 2 18.600     6.510    5.208          15.624      899.470     110.350\n# 3 22.400     4.032    5.824          21.056      827.340     142.390\n# 4 12.000     4.200    3.360          10.920      878.410     165.630\n\n\n###############################################\n# G\u00f6rev 3 \u00c7\u00f6z\u00fcm\n###############################################\ndf.columns\nog_list = [\"abbrev\", \"no_previous\"]","4c38aa12":"###############################################\n# \u00c7ALI\u015eMA ORTAMI AYARLARI (SETTING UP WORKING ENVIRONMENT)\n###############################################\n\n###############################################\n# PYTHON VER\u0130 YAPILARI (DATA STRUCTURES)\n###############################################\n\n###############################################\n# FONKS\u0130YONLAR, KO\u015eULLAR, D\u00d6NG\u00dcLER, COMPREHENSIONS\n###############################################\n\n\n\n\n\n###############################################\n# \u00c7ALI\u015eMA ORTAMI AYARLARI (SETTING UP WORKING ENVIRONMENT)\n###############################################\n# - Python'a Giri\u015f ve PyCharm\n# - Virtual Environments (conda)\n# - Dependency Management (conda, pip)\n# - Python \u0130lk Ad\u0131mlar\n\n\n###############################################\n# PYTHON'A G\u0130R\u0130\u015e VE PyCharm\n###############################################\n\n# Sunum\n\n###############################################\n# VIRTUAL ENVIRONMENTS (CONDA)\n###############################################\n\n# Sunum\n\n###############################################\n# DEPENDENCY MANAGEMENT (CONDA, P\u0130P)\n###############################################\n\n# Sunum\n\n###############################################\n# PYTHON \u0130LK ADIMLAR\n###############################################\n# - Say\u0131lar (Numbers) ve Karakter Dizileri (Strings)\n# - Atamalar ve De\u011fi\u015fkenler (Assignments & Variables)\n# - Yazd\u0131rma T\u00fcrleri (Print Types)\n# - Kullan\u0131c\u0131dan Bilgi Almak: Input\n\n###############################################\n# Say\u0131lar (Numbers) ve Karakter Dizileri (Strings)\n###############################################\n\n# string\nprint(\"Hello AI Era\")\n\n\n\n# integer\n9\n\n# float\n9.2\n\n# types\ntype(9)\ntype(\"123\")\n\n###############################################\n# Atamalar ve De\u011fi\u015fkenler (Assignments & Variables)\n###############################################\n\na = 9\nb = 10\na * b\nb - a\na * 5\n\nhi = \"Hello AI Era\"\nhi\n# silme de\u011fi\u015fken\ndel hi\n\n###############################################\n# Yazd\u0131rma T\u00fcrleri (Print Types)\n###############################################\n\n# print\nprint(\"hello ai era\")\nname = \"Rode\"\nage = 35\nprint(name, age)\n\n# % y\u00fczde ifadesi, stringi yazd\u0131rma\n\"Name: %s\" % name\n\"Name: %s. Age: %s\" % (name, age)\n\n\n# str.format(): Burada belirli nesnelerin \u00fczerinden se\u00e7me yap\u0131labiliyor.\n\"Name: {}. Age: {}\".format(name, age)\nperson = {\"name\": \"Rode\", \"age\": 35}\n\"Name:{}. Age: {}\".format(person[\"name\"], person[\"age\"])\n\n\n# fstring s\u00fcsl\u00fc parantezi yazd\u0131rma\nF\"Name: {name} Age: {age}\"\n\n\n\n###############################################\n# Kullan\u0131c\u0131dan Bilgi Almak: Input\n###############################################\n\nnumber = input()\ntype(number) #fonksiyon tipi strint olarak tutuyo\nnumber * 3\n# number \/ 3 # TypeError\nint(number) \/ 3\n\nnum1 = int(input())\nnum2 = int(input())\nnum1 * num2\n\n\n###############################################\n# PYTHON VER\u0130 YAPILARI (PYTHON DATA STRUCTURES)\n###############################################\n# - Veri Yap\u0131lar\u0131na Giri\u015f ve H\u0131zl\u0131 \u00d6zet\n# - Say\u0131lar (Numbers): int, float, complex\n# - Karakter Dizileri (Strings): str\n# - Boolean (TRUE-FALSE): bool\n# - Liste (List)\n# - S\u00f6zl\u00fck (Dictionary)\n# - Demet (Tuple)\n# - Set\n\n\n\n###############################################\n# Veri Yap\u0131lar\u0131na Giri\u015f ve H\u0131zl\u0131 \u00d6zet\n###############################################\n\n# Say\u0131lar: integer\nx = 46\ntype(x)\n\n# Say\u0131lar: float\nx = 10.3\ntype(x)\n\n# Say\u0131lar: complex\nx = 2j + 1\ntype(x)\n\n# String\nx = \"Hello ai era\"\ntype(x)\n\n# Boolean\nTrue\nFalse\ntype(True)\n5 == 4\n3 == 2\n1 == 1\ntype(3 == 2)\ntype(1 == 1)\n\n\n# Liste\nx = [\"btc\", \"eth\", \"xrp\"]\ntype(x)\n\n# S\u00f6zl\u00fck (dictionary)\nx = {\"name\": \"Peter\", \"Age\": 36}\ntype(x)\n\n# Tuple, listelerin aksi karde\u015fi, de\u011fi\u015ftirilemez\nx = (\"python\", \"ml\", \"ds\")\ntype(x)\n\n# Set\nx = {\"python\", \"ml\", \"ds\"}\ntype(x)\n\n# Not: Liste, tuple, set ve dictionary veri yap\u0131lar\u0131 ayn\u0131 zamanda Python Collections (Arrays) olarak ge\u00e7mektedir.\n\n###############################################\n# Say\u0131lar (Numbers): int, float, complex\n###############################################\n\na = 5\nb = 10.3\na * 3\na \/ 6\na * b \/ 10\na**2\n\n#######################\n# Tipleri de\u011fi\u015ftirmek\n#######################\n\nint(b)\nfloat(a)\nint(a * b \/ 10)\n\n\n###############################################\n# Karakter Dizileri (Strings)\n###############################################\n\n# Karakter Dizileri nedir?\n\nprint(\"John\")\nprint('John')\n\nname = \"John\"\nname = 'John'\n\n#######################\n# \u00c7ok Sat\u0131rl\u0131 Karakter Dizileri\n#######################\n\n\n\"\"\"Veri Yap\u0131lar\u0131: H\u0131zl\u0131 \u00d6zet,\nSay\u0131lar (Numbers): int, float, complex,\nKarakter Dizileri (Strings): str,\nList, Dictionary, Tuple, Set,\nBoolean (TRUE-FALSE): bool\"\"\"\n\nlong_str = \"\"\"Veri Yap\u0131lar\u0131: H\u0131zl\u0131 \u00d6zet,\nSay\u0131lar (Numbers): int, float, complex,\nKarakter Dizileri (Strings): str,\nList, Dictionary, Tuple, Set,\nBoolean (TRUE-FALSE): bool\"\"\"\nlong_str\n#######################\n# Karakter Dizilerinin Elemanlar\u0131na Eri\u015fmek\n#######################\n\nname = \"John\"\nname[0]\nname[3]\nname[4]\n\n#######################\n# Karakter Dizilerinde Slice \u0130\u015flemi\n\n#######################\n### sol dah,l sa\u011f hari\u00e7\nname[0:2]\n\n#######################\n# String \u0130\u00e7erisinde Karakter Sorgulamak\n#######################\n\ntopics = \"\"\"Veri Yap\u0131lar\u0131: H\u0131zl\u0131 \u00d6zet,\nSay\u0131lar (Numbers): int, float, complex,\nKarakter Dizileri (Strings): str,\nList, Dictionary, Tuple, Set,\nBoolean (TRUE-FALSE): bool\"\"\"\n### string yap\u0131s\u0131n\u0131n i\u00e7inde sorgulama yapmak istersek.\n\"bool\" in topics\nprint(\"bool\" in topics)\n\n\n###############################################\n# String Metodlar\u0131\n###############################################\n### method: \u00c7e\u015fitli g\u00f6revleri yerine getiren fonksiyon benzeri yap\u0131lar\u0131\n## clas i\u00e7indeki fonksiyonlar\ndir(str)\ndir(\"sezgin\")\n#######################\n# len: i\u00e7ine girilen boyutunu verdi.\n#######################\ntype(len)\n\nname = \"john\"\nlen(name)\nlen(\"sezgin\")\nlen(\"1\")\n\n#######################\n# upper() & lower(): k\u00fc\u00e7\u00fck-b\u00fcy\u00fck d\u00f6n\u00fc\u015f\u00fcmleri\n#######################\n\n\"mvk\".upper()\n\"JOHN\".lower()\ntype(upper)\ntype(upper())\n#######################\n# replace: karakter de\u011fi\u015ftirir\n#######################\n\nhi = \"Hello AI Era\"\nhi.replace(\"l\", \"p\")\nhi = hi.replace(\"l\", \"p\")\n\n#######################\n# split: b\u00f6ler\n#######################\n\n\"Hello AI Era\".split()\n\n#######################\n# strip: k\u0131rpar\n#######################\n\n\" ofofo \".strip()\n\"ofofo\".strip(\"o\")\n\n#######################\n# capitalize: ilk harfi b\u00fcy\u00fct\u00fcr\n#######################\n\n\"foo\".capitalize()\n\n#######################\n# isalnum: alfabetik mi ya da n\u00fcmerik mi kontrol\u00fc\n#######################\n\n\"foo\".isalnum()\n\n#######################\n# isnumeric: n\u00fcmerik mi kontrol\u00fc yapar\n#######################\n\n\"foo\".isnumeric()\n\"99\".isnumeric()\n\n\n\n\n\n###############################################\n# Liste (List)\n###############################################\n\n# Liste Nedir?\n\n# - De\u011fi\u015ftirilebilir\n# - S\u0131ral\u0131d\u0131r. Index i\u015flemleri yap\u0131labilir.\n# - Kapsay\u0131c\u0131d\u0131r.\n\n\nnotes = [1, 2, 3, 4]\ntype(notes)\nnames = [\"a\", \"b\", \"v\"]\nnot_nam = [1, 2, 3, \"a\", \"b\", True, [1, 2, 3]]\nnotes[0]\nnotes[0:3]\nnotes[0] = 99\n\n# not_nam i\u00e7indeki listenin 2. eleman\u0131na nas\u0131l eri\u015firiz?\nnot_nam[6][1]\n\n###############################################\n# Liste Metodlar\u0131 (List Methods)\n###############################################\n\ndir(notes)\n\n#######################\n# len: builtin python fonksiyonu, boyut bilgisi.\n#######################\n\nlen(notes)\n\n#######################\n# append: eleman ekler\n#######################\n\nnotes.append(90)\n\n#######################\n# pop: indexe g\u00f6re siler\n#######################\n\nnotes.pop(0)\n\n#######################\n# pop: indexe ekler\n#######################\n\nnotes.insert(2, 99)\n\n\n\n\n\n\n###############################################\n# S\u00f6zl\u00fck (Dictonary)\n###############################################\n\n# S\u00f6zl\u00fckler key-value \u00e7iftleri ile veri tutma imkan\u0131 sa\u011flar.\n\n# De\u011fi\u015ftirilebilir.\n# S\u0131ras\u0131z. (3.7 sonra s\u0131ral\u0131.)\n# Kapsay\u0131c\u0131.\n\ndictionary = {\"REG\": \"Regression\",\n              \"LOG\": \"Logistic Regression\",\n              \"CART\": \"Classification and Reg\"}\n\n\ndictionary = {\"REG\": [\"RMSE\", 10],\n              \"LOG\": [\"MSE\", 20],\n              \"CART\": [\"SSE\", 30]}\n\n\ndictionary = {\"REG\": 10,\n              \"LOG\": 20,\n              \"CART\": 30}\n\n#######################\n# Key Sorgulama\n#######################\n# i\u00e7inde var m\u0131\n\"REG\" in dictionary\n\n#######################\n# Key'e G\u00f6re Value'ya Eri\u015fmek\n#######################\n\ndictionary[\"REG\"]\ndictionary.get(\"REG\")\n\n#######################\n# Value De\u011fi\u015ftirmek\n#######################\n\ndictionary[\"REG\"] = 11\n\n#######################\n# T\u00fcm Key'lere Eri\u015fmek\n#######################\n\ndictionary.keys()\n\n#######################\n# T\u00fcm Value'lara Eri\u015fmek\n#######################\n\ndictionary.values()\n\n#######################\n# T\u00fcm \u00c7iftleri Tuple Halinde Listeye \u00c7evirme\n#######################\n\ndictionary.items()\n\n#######################\n# Key-Value De\u011ferini G\u00fcncellemek\n#######################\n\ndictionary.update({\"REG\": 11})\n\n#######################\n# Yeni Key-Value Eklemek\n#######################\n\ndictionary.update({\"RF\": 10})\n\n#######################\n# Key ile Bir Item'\u0131n Silinmesi\n#######################\n\ndictionary.pop(\"RF\")\n\n\n\n\n###############################################\n# Demet (Tuple)\n###############################################\n\n# Listelerin de\u011fi\u015fime kapal\u0131 karde\u015fidir.\n\n# - De\u011fi\u015ftirilemez.\n# - S\u0131ral\u0131d\u0131r.\n# - Kapsay\u0131c\u0131d\u0131r.\n\nt = (\"john\", \"mark\", 1, 2)\nt[0:3]\n\nnames[0] = \"999\"\n## tupple atama i\u015flemini desteklemek.\nt[0] = \"999\"\n\n# Tuple de\u011fi\u015ftirilemezdir, illaki de\u011fi\u015ftirmek isteniyorsa \u00f6nce listeye \u00e7evrilip sonra tekrar tuple'a ge\u00e7ilir.\nt = list(t)\nt[0] = \"999\"\nt = tuple(t)\n\n\n\n###############################################\n# Set\n###############################################\n\n# - De\u011fi\u015ftirilebilir.\n# - S\u0131ras\u0131z + E\u015fsizdir.\n# - Kapsay\u0131c\u0131d\u0131r.\n\n#######################\n# difference(): \u0130ki k\u00fcmenin fark\u0131\n#######################\n\nset1 = set([1, 3, 5])\nset2 = set([1, 2, 3])\n\n# set1'de olup set2'de olmayanlar.\nset1.difference(set2)\nset1 - set2\n\n# set2'de olup set1'de olmayanlar.\nset2.difference(set1)\nset2 - set1\n\n#######################\n# symmetric_difference(): \u0130ki k\u00fcmede de birbirlerine g\u00f6re olmayanlar\n#######################\n\nset1.symmetric_difference(set2)\n\n#######################\n# intersection(): \u0130ki k\u00fcmenin kesi\u015fimi\n#######################\n\nset1 = set([1, 3, 5])\nset2 = set([1, 2, 3])\n\nset1.intersection(set2)\nset2.intersection(set1)\n\nset1 & set2\n\n\n#######################\n# union(): \u0130ki k\u00fcmenin birle\u015fimi\n#######################\n\nset1.union(set2)\n\n#######################\n# isdisjoint(): \u0130ki k\u00fcmenin kesi\u015fimi bo\u015f mu?\n#######################\n\nset1 = set([7, 8, 9])\nset2 = set([5, 6, 7, 8, 9, 10])\n\nset1.isdisjoint(set2)\n\n#######################\n# isdisjoint(): Bir k\u00fcme di\u011fer k\u00fcmenin alt k\u00fcmesi mi?\n#######################\n\nset1.issubset(set2)\n\n#######################\n# isdisjoint(): Bir k\u00fcme di\u011fer k\u00fcmeyi kaps\u0131yor mu?\n#######################\n\nset2.issuperset(set1)\n\n\n###############################################\n# FONKS\u0130YONLAR, KO\u015eULLAR, D\u00d6NG\u00dcLER, COMPREHENSIONS\n###############################################\n# - Fonksiyonlar (Functions)\n# - Ko\u015fullar (Conditions)\n# - D\u00f6ng\u00fcler (Loops)\n# - Comprehesions\n# - Lambda, Map, Reduce, Filter\n\n\n","0cf5f9f4":"\n\n\n###############################################\n# FONKS\u0130YONLAR (FUNCTIONS)\n###############################################\n\n#######################\n# Fonksiyon nedir?\n#######################\n\n#######################\n# Fonksiyon Okuryazarl\u0131\u011f\u0131\n#######################\n\nprint(\"a\")\n# ?print\nhelp(print)\nprint(\"a\", \"b\", sep=\"_\")\n\n#######################\n# Fonksiyon Tan\u0131mlama\n#######################\n\ndef calculate(x):\n    print(x*2)\n\ncalculate(2)\n\n# \u0130ki arg\u00fcmanl\u0131\/parametreli bir fonksiyon tan\u0131mlayal\u0131m.\n\ndef summer(arg1, arg2):\n    print(arg1 + arg2)\n\nsummer(7, 8)\n\n\n#######################\n# Docstring\n#######################\n\ndef summer(arg1, arg2):\n    \"\"\"\n    Sum of two numbers\n\n    args:\n    -----\n        arg1: int, float\n        arg2: int, float\n\n    \"\"\"\n    print(arg1 + arg2)\n\n\nhelp(summer)\n\nsummer(7, 8)\nsummer(77, 18)\n\n#######################\n# Fonksiyonlar\u0131n Statement\/Body B\u00f6l\u00fcm\u00fc\n#######################\n\n# def function_name(parameters\/arguments):\n#     statements (function body)\n\n\ndef multiplication(a, b):\n    c = a * b\n    print(c)\n\nmultiplication(8, 9)\n\n\ndef say_hi():\n    print(\"Merhaba\")\n    print(\"Hi\")\n    print(\"Hello\")\n\n\nsay_hi()\n\n\n# Bir fonksiyon tan\u0131mlayal\u0131m g\u00f6revi \u00f6nce 2 say\u0131y\u0131 \u00e7arpmak sonra da bu sonucu bir listeye eklemek olsun.\n\nlist_store = []\n\ndef add_element(a, b):\n    c = a * b\n    list_store.append(c)\n    print(list_store)\n\n\nadd_element(10, 9)\n\nadd_element(18, 1)\n\nadd_element(180, 1)\n\n\n#######################\n# \u00d6n Tan\u0131ml\u0131 Arg\u00fcmanlar\/Parametreler (Default Parameters\/Arguments)\n#######################\n\ndef divide(a, b=1):\n    print(a \/ b)\n\n\ndivide(9, 2)\n\n\n#######################\n# Ne Zaman Fonksiyon Yazma \u0130htiyac\u0131m\u0131z Olur?\n#######################\n\n# varm, moisture, charge\n\n(56 + 15) \/ 80\n(17 + 45) \/ 70\n(17 + 45) \/ 70\n\n\ndef calculate(varm, moisture, charge):\n    print((varm + moisture) \/ charge)\n\n\ncalculate(90, 12, 12)\n\n#######################\n# Return: Fonksiyon \u00c7\u0131kt\u0131lar\u0131n\u0131 Girdi Olarak Kullanmak\n#######################\n\n# calculate(90, 12, 12) * 10 # type error\n\ntype(calculate(90, 12, 12))\n\n\ndef calculate(varm, moisture, charge):\n    return int((varm + moisture) \/ charge)\n\ncalculate(90, 12, 12) * 10\n\n# Ba\u015fka bir fonksiyon tan\u0131mlayal\u0131m\ndef standardization(a, p):\n    return a * 10 \/ 100 * p * p\n\nstandardization(10, 9)\n\n# \u0130ki fonksiyonu \u00e7a\u011f\u0131ran bir fonksiyon tan\u0131mlayal\u0131m.\n# Amac\u0131m\u0131z calculate ve standardization fonksiyonlar\u0131n\u0131 \u00e7a\u011f\u0131rmak olsun.\n\ndef all_calculation(varm, moisture, charge, p):\n    a = calculate(varm, moisture, charge)\n    b = standardization(a, p)\n    print(b * 10)\n\n\nall_calculation(10, 90, 87, 10)\n\n\n#######################\n# Lokal & Global De\u011fi\u015fkenler (Local & Global Variables)\n#######################\n\nlist_store = [1, 2]\n\ndef add_element(a, b):\n    c = a * b\n    list_store.append(c)\n    print(list_store)\n\n\nadd_element(10, 8)\n\n\n#######################\n# Do\u011fru Fonksiyon Yaz\u0131m\u0131\n#######################\n\n# DRY (dont repeat yourself)\n# DoT (Do one Thing)\n# Modularity","3798c242":"\n###############################################\n# KO\u015eULLAR (CONDITIONS)\n###############################################\n\n# Ko\u015fullar bir program yaz\u0131m\u0131 s\u0131ras\u0131nda ak\u0131\u015f kontrol\u00fc sa\u011flayan yap\u0131lard\u0131r.\n\n#######################\n# if\n#######################\n\n# True-False'u hat\u0131rlayal\u0131m.\n1 == 1\n1 == 2\n\n# if yap\u0131s\u0131 ile kullanal\u0131m\nif 1 == 2:\n    print(\"sezgini yazd\u0131r\")\nelse:\n    print(\"do\u011fruyu d\u00f6nmedi\")","2bccfb77":"\n\n# Bir de\u011fi\u015fkene de\u011fer atay\u0131p buna g\u00f6re if kullanal\u0131m.\n\nnumber = 11\n\nif number == 11:\n    print(\"ko\u015ful sa\u011flanmaktad\u0131r.\")","c14f591c":"# Bu i\u015flem i\u00e7in bir fonksiyon yazal\u0131m.\ndef number_check(number):\n    if number == 10:\n        print(\"equal to 10\")\n\n\nnumber_check(100)\n\n","be420f59":"number_check(10)","f1cf8c3c":"#######################\n# else\n#######################\n\ndef number_check(number):\n    if number > 10:\n        print(\"greater than 10\")\n    else:\n        print(\"not greater than 10\")\n\n\nnumber_check(9)","7be0dd0a":"#######################\n# elif\n#######################\n\ndef number_check(number):\n    if number > 10:\n        print(\"greater than 10\")\n    elif number < 10:\n        print(\"less than 10\")\n    else:\n        print(\"equal to 10\")\n\n\nnumber_check(11)\n","a182e43c":"\n\n###############################################\n# D\u00d6NG\u00dcLER (LOOPS)\n###############################################\n\n# for\nstudents = [\"John\", \"Mark\", \"Venessa\", \"Mariam\"]\n\nstudents[0]\nstudents[1]\nstudents[2]\nstudents[3]\n\nfor student in students:\n    print(student)\n\nfor student in students:\n    print(student + \"_\")\n\nfor student in students:\n    print(f\"Old Name: {student}, New Name: {student.upper()}\")\n\nsalaries = [1000, 2000, 3000, 4000, 5000]\n\nfor salary in salaries:\n    print(salary)\n\n1000 * 20 \/ 100 + 1000\n\n\ndef new_salary(x):\n    return x * 20 \/ 100 + x\n\n\nnew_salary(5000)\n\nfor salary in salaries:\n    print(int(new_salary(salary)))\n\n\ndef raise_up(x):\n    print(x * 10 \/ 100 + x)\n\n\ndef raise_down(x):\n    print(x * 20 \/ 100 + x)\n\n\nfor salary in salaries:\n    if salary >= 3000:\n        raise_up(salary)\n    else:\n        raise_down(salary)\n\n\n#######################\n# M\u00fclakat Sorusu\n#######################\n\n# Ama\u00e7: A\u015fa\u011f\u0131daki \u015fekilde string'i de\u011fi\u015ftirmek istiyoruz.\n\n# before: \"hi my name is john and i am learning python\"\n# after: \"Hi mY NaMe iS JoHn aNd i aM LeArNiNg pYtHoN\"\n\ndef alternating(string):\n    new_string = \"\"\n    for string_index in range(len(string)):\n        if string_index % 2 == 0:\n            new_string += string[string_index].upper()\n        else:\n            new_string += string[string_index].lower()\n\n    print(new_string)\n\n\nalternating(\"hi my name is john and i am learning python\")\n\n\n\n#######################\n# break & continue & while\n#######################\n\nsalaries = [1000, 2000, 3000, 4000, 5000]\n\nfor salary in salaries:\n    if salary == 3000:\n        print(\"break point\")\n        break\n    print(salary)\n\nfor salary in salaries:\n    if salary == 3000:\n        continue\n    print(salary)\n\nnumber = 1\nwhile number < 9:\n    print(number)\n    number += 1\n\n\n#######################\n# Enumerate: Otomatik Counter\/Indexer ile for loop\n#######################\n\n# Problem: Listedeki \u00f6\u011frencileri index numaralar\u0131na g\u00f6re iki gruba b\u00f6lmek\nstudents = [\"John\", \"Mark\", \"Venessa\", \"Mariam\"]\n\nfor student in students:\n    print(student)\n\nfor index, student in enumerate(students):\n    print(index, student)\n\nA = []\nB = []\n\nfor index, student in enumerate(students):\n    if index % 2 == 0:\n        A.append(student)\n    else:\n        B.append(student)\n\nA\nB\n\n#######################\n# M\u00fclakat Sorusu\n#######################\n# divide_students i\u015flemini 2 grubu tek bir listede return edecek bir fonksiyonla yap\u0131n\u0131z.\nstudents = [\"John\", \"Mark\", \"Venessa\", \"Mariam\"]\n\n\ndef divide_students(students):\n    groups = [[], []]\n    for index, student in enumerate(students):\n        if index % 2 == 0:\n            groups[0].append(student)\n        else:\n            groups[1].append(student)\n\n    print(groups)\n\n\ndivide_students(students)\n\n#######################\n# Enumerate'i Belirli Bir Index ile Kullanmak\n#######################\n\nfor index, student in enumerate(students, 1):\n    print(index, student)\n\n\ndef divide_students(students):\n    groups = [[], []]\n    for index, student in enumerate(students, 1):\n        if index % 2 == 0:\n            groups[0].append(student)\n        else:\n            groups[1].append(student)\n\n    print(groups)\n\n\ndivide_students(students)\n\n#######################\n# M\u00fclakat Sorusu\n#######################\n\n# Enumerate ile alternating sorusunun \u00e7\u00f6z\u00fcm\u00fc\n# Alternating string with enumerate\ndef alternating_with_enumerate(string):\n    new_string = \"\"\n    for i, letter in enumerate(string):\n        if i % 2 == 0:\n            new_string += letter.upper()\n        else:\n            new_string += letter.lower()\n    print(new_string)\n\n\nalternating_with_enumerate(\"hi my name is john and i am learning python\")\n\n\n#######################\n# Zip\n#######################\n\nstudents = [\"John\", \"Mark\", \"Venessa\", \"Mariam\"]\ndepartments = [\"mathematics\", \"statistics\", \"physics\", \"astronomy\"]\nages = [23, 30, 26, 22]\nprint(list(zip(students, departments, ages)))\n\n\n###############################################\n# lambda, map, f\u0131lter, reduce\n###############################################\n\ndef summer(a, b):\n    return a + b\n\nsummer(1, 3) * 9\n\nnew_sum = lambda a, b: a + b\nnew_sum(7, 8) * 9\n\n# MAP\nsalaries = [1000, 2000, 3000, 4000, 5000]\n\n\ndef new_salary(x):\n    return x * 20 \/ 100 + x\n\n\nnew_salary(1000)\n\nfor salary in salaries:\n    print(new_salary(salary))\n\nlist(map(new_salary, salaries))\nlist(map(lambda x: x * 20 \/ 100 + x, salaries))\nlist(map(lambda x: x ** 2, salaries))\nlist(map(lambda x: x.upper(), \"john\"))\n\n# # FILTER\n# # 6%2 == 0\n# list_store = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# list(filter(lambda x: x % 2 == 0, list_store))\n#\n# # REDUCE\n# from functools import reduce\n# list_store = [1, 2, 3, 4]\n# reduce(lambda a, b: a + b, list_store)\n#\n\n\n###############################################\n# COMPEHENSIONS\n###############################################\n\n#######################\n# List Comprehension\n#######################\n\n# Amac\u0131m\u0131z bir maas listesindeki t\u00fcm elemanlara bir zam uygulay\u0131p uygulama sonras\u0131\n# zaml\u0131 maa\u015flar\u0131 tekrar kaydetmek olsun.\n\n\nsalaries = [1000, 2000, 3000, 4000, 5000]\n\nfor salary in salaries:\n    print(new_salary(salary))\n\n\nnull_list = []\n\nfor salary in salaries:\n    null_list.append(new_salary(salary))\n\n\nnull_list = []\n\nfor salary in salaries:\n    if salary > 3000:\n        null_list.append(new_salary(salary))\n    else:\n        null_list.append(new_salary(salary * 2))\n\n\n[new_salary(salary * 2) if salary < 3000 else new_salary(salary) for salary in salaries]\n\n[salary * 2 for salary in salaries]\n\n[salary * 2 for salary in salaries if salary < 3000]\n\n[salary * 2 if salary < 3000 else salary * 0 for salary in salaries]\n\n[new_salary(salary * 2) if salary < 3000 else new_salary(salary) for salary in salaries]\n\nstudents = [\"John\", \"Mark\", \"Venessa\", \"Mariam\"]\nstudents_no = [\"John\", \"Venessa\"]\n\n[student.upper() if student not in students_no else student.lower() for student in students]\n\n[student.lower() if student in students_no else student.upper() for student in students]\n\n\n\n#######################\n# Dictionary Comprehension\n#######################\n\ndictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\ndictionary[\"a\"]\ndictionary[\"b\"]\n\ndictionary.keys()\ndictionary.values()\ndictionary.items()\n\n# bir s\u00f6zl\u00fck i\u00e7erisindeki value'lar\u0131n hepsine bir i\u015flem uygulamak isteyelim.\n# mesela value'lar\u0131 2 ile \u00e7armak isteyelim:\n\n{k: v ** 2 for (k, v) in dictionary.items()}\n\n# bu c\u0131kt\u0131y\u0131 kaydedersek yeni bir s\u00f6zl\u00fck olacak:\nnew_dict = {k: v ** 2 for (k, v) in dictionary.items()}\n\n# Peki key'lere bir i\u015flem yapmak istersek?\n{k * 2: v for (k, v) in dictionary.items()}\n\n# Key'lere fonksiyonel bir i\u015flem yapmak istersek?\n{k.upper(): v for (k, v) in dictionary.items()}\n\n#######################\n# D\u00f6ng\u00fc kullanarak s\u00f6zl\u00fc\u011fe eleman eklemek\n#######################\n\n# Hayat kurtaran serisinden.\n\n#######################\n# M\u00fclakat Sorusu\n#######################\n\n# Ama\u00e7: \u00c7ift say\u0131lar\u0131n karesi al\u0131narak bir s\u00f6zl\u00fc\u011fe eklenmek istemektedir\n\nnumbers = range(10)\nnew_dict = {}\n\nfor n in numbers:\n    if n % 2 == 0:\n        new_dict[n] = n ** 2\n\nnew_dict\n\n# Bunun daha basiti yok mu?\n# Var m\u00fclakat sorusu bunun s\u00f6zl\u00fck comprehesion versiyonunu bekliyordu.\n{n: n ** 2 for n in numbers if n % 2 == 0}\n\n\n#######################\n# List & Dict Comprehension Uygulamalar\n#######################\n\n#######################\n# Bir Veri Setindeki De\u011fi\u015fken \u0130simlerini De\u011fi\u015ftirmek\n#######################\n\n# before:\n# ['total', 'speeding', 'alcohol', 'not_distracted', 'no_previous', 'ins_premium', 'ins_losses', 'abbrev']\n\n# after:\n# ['TOTAL', 'SPEEDING', 'ALCOHOL', 'NOT_DISTRACTED', 'NO_PREVIOUS', 'INS_PREMIUM', 'INS_LOSSES', 'ABBREV']\n\n\nimport seaborn as sns\ndf = sns.load_dataset(\"car_crashes\")\ndf.columns\n\n# Amac\u0131m\u0131z bu veri setinde yer alan de\u011fi\u015fkenlerin hepsinin isimlerini b\u00fcy\u00fctmek.\n\nfor col in df.columns:\n    print(col.upper())\n\n\nA = []\n\nfor col in df.columns:\n    A.append(col.upper())\n\ndf.columns = A\n\n# S\u00fcper. Ama biz list comprehension diye bir \u015fey \u00f6\u011frendik.\n# \u015eimdi onunla bu i\u015flemi ger\u00e7ekle\u015ftirmeye \u00e7al\u0131\u015fal\u0131m.\n\ndf = sns.load_dataset(\"car_crashes\")\ndf.columns = [col.upper() for col in df.columns]\n\n\n#######################\n# \u0130sminde \"INS\" olan de\u011fi\u015fkenlerin ba\u015f\u0131na FLAG di\u011ferlerine NO_FLAG eklemek istiyoruz.\n#######################\n\n# before:\n# ['TOTAL',\n# 'SPEEDING',\n# 'ALCOHOL',\n# 'NOT_DISTRACTED',\n# 'NO_PREVIOUS',\n# 'INS_PREMIUM',\n# 'INS_LOSSES',\n# 'ABBREV']\n\n# after:\n# ['NO_FLAG_TOTAL',\n#  'NO_FLAG_SPEEDING',\n#  'NO_FLAG_ALCOHOL',\n#  'NO_FLAG_NOT_DISTRACTED',\n#  'NO_FLAG_NO_PREVIOUS',\n#  'FLAG_INS_PREMIUM',\n#  'FLAG_INS_LOSSES',\n#  'NO_FLAG_ABBREV']\n\n\ndf.columns\n\n# \u00f6nce yakalamaya \u00e7al\u0131\u015fal\u0131m:\n[col for col in df.columns if \"INS\" in col]\n\n# \u015fimdi ba\u015f\u0131na NEW ekleyelim.\n[\"FLAG_\" + col for col in df.columns if \"INS\" in col]\n\n# ikinci ko\u015fulu girelim:\n[\"FLAG_\" + col if \"INS\" in col else \"NO_FLAG_\" + col for col in df.columns]\n\n# kal\u0131c\u0131 olarak kaydedelim:\ndf.columns = [\"FLAG_\" + col if \"INS\" in col else \"NO_FLAG_\" + col for col in df.columns]\n\n\n#######################\n# Categorical De\u011fi\u015fkenlerin Ba\u015f\u0131na CAT yazmak.\n#######################\n\n# before:\n# ['total',\n# 'speeding',\n# 'alcohol',\n# 'not_distracted',\n# 'no_previous',\n# 'ins_premium',\n# 'ins_losses',\n# 'abbrev']\n\n# after:\n# ['TOTAL',\n#  'SPEEDING',\n#  'ALCOHOL',\n#  'NOT_DISTRACTED',\n#  'NO_PREVIOUS',\n#  'INS_PREMIUM',\n#  'INS_LOSSES',\n#  'CAT_ABBREV']\n\ndf = sns.load_dataset(\"car_crashes\")\n\n# kategorik de\u011fi\u015fkenleri yakalama\n[col for col in df.columns if df[col].dtype == \"O\"]\n\n[\"CAT_\" + col.upper() if df[col].dtype == \"O\" else col.upper() for col in df.columns]\n\n# df.columns = [\"CAT_\" + col.upper() if df[col].dtype == \"O\" else col.upper() for col in df.columns]\n\n\n#######################\n# Ama\u00e7 key'i string, value'su a\u015fa\u011f\u0131daki gibi bir liste olan s\u00f6zl\u00fck olu\u015fturmak.\n#######################\n\n# Output:\n# {'total': ['mean', 'min', 'max', 'var'],\n#  'speeding': ['mean', 'min', 'max', 'var'],\n#  'alcohol': ['mean', 'min', 'max', 'var'],\n#  'not_distracted': ['mean', 'min', 'max', 'var'],\n#  'no_previous': ['mean', 'min', 'max', 'var'],\n#  'ins_premium': ['mean', 'min', 'max', 'var'],\n#  'ins_losses': ['mean', 'min', 'max', 'var']}\n\n\ndf = sns.load_dataset(\"car_crashes\")\ndf.columns\n\n# uzun yol\nnum_cols = [col for col in df.columns if df[col].dtype != \"O\"]\nsoz = {}\nagg_list = [\"mean\", \"min\", \"max\", \"sum\"]\n\nfor col in num_cols:\n    soz[col] = agg_list\n\nsoz\n\n# k\u0131sa yol\n{col: agg_list for col in num_cols}\n\nnew_dict = {col: agg_list for col in num_cols}\ndf.groupby(\"ABBREV\").agg(new_dict)\n\n# Tam olarak anlayamad\u0131m bir \u00f6rnek daha m\u0131 yapsak?\ndf = sns.load_dataset(\"tips\")\nnum_cols = [col for col in df.columns if df[col].dtype in [int, float]]\nnew_dict = {col: agg_list for col in num_cols}\ndf.groupby(\"time\").agg(new_dict)\n\n#######################\n# Ama\u00e7: Value b\u00f6l\u00fcm\u00fcndeki listenin her bir eleman\u0131n\u0131 dinamik olarak bi\u00e7imlendirmek\n#######################\n\n# before:\n# {'total': ['mean', 'min', 'max', 'sum'],\n#  'speeding': ['mean', 'min', 'max', 'sum'],\n#  'alcohol': ['mean', 'min', 'max', 'sum']}\n\n# after:\n# {'total': ['total_mean', 'total_min', 'total_max', 'total_var'],\n#  'speeding': ['speeding_mean', 'speeding_min', 'speeding_max', 'speeding_var'],\n#  'alcohol': ['alcohol_mean', 'alcohol_min', 'alcohol_max', 'alcohol_var']\n\ndf = sns.load_dataset(\"car_crashes\")\nnum_cols = [col for col in df.columns if df[col].dtype != \"O\"]\nagg_list = [\"mean\", \"min\", \"max\", \"sum\"]\n# new_dict = {col: agg_list for col in num_cols}\n\n{col: [str(col) + \"_\" + c for c in agg_list] for col in num_cols}\n\n\n\n###############################################\n# AMAC: Bir listenin ilk eleman\u0131n\u0131 key di\u011fer elemanlar\u0131n tamam\u0131n\u0131 da value olarak atamak\n###############################################\n\n\n# before\n#    total  speeding  alcohol  not_distracted  no_previous\n# 0   18.8     7.332    5.640          18.048       15.040\n# 1   18.1     7.421    4.525          16.290       17.014\n# 2   18.6     6.510    5.208          15.624       17.856\n# 3   22.4     4.032    5.824          21.056       21.280\n# 4   12.0     4.200    3.360          10.920       10.680\n\n\n# after:\n# {18.8: [7, 5, 18, 15],\n#  18.1: [7, 4, 16, 17],\n#  18.6: [6, 5, 15, 17],\n#  22.4: [4, 5, 21, 21],\n#  12.0: [4, 3, 10, 10]}\n\n\n# veri setini bastan okutup yine say\u0131sal de\u011fi\u015fkenleri se\u00e7elim.\ndf = sns.load_dataset(\"car_crashes\")\nnum_cols = [col for col in df.columns if df[col].dtype in [int, float]]\n\ndf[num_cols].head()\n{row[0]: [int(s) for s in row[1:]]for row in df[num_cols].values}","2fda8945":"###############################################\n# FONKS\u0130YONLAR (FUNCTIONS)\n###############################################\n\n#######################\n# Fonksiyon nedir?\n#######################\n\n#######################\n# Fonksiyon Okuryazarl\u0131\u011f\u0131\n#######################\n\nprint(\"a\")\n# ?print\nhelp(print)\nprint(\"a\", \"b\", sep=\"_\")","3f269c2c":"#######################\n# Fonksiyon Tan\u0131mlama\n#######################\n\ndef calculate(x):\n    print(x*2)\n\ncalculate(2)","3862eeef":"# \u0130ki arg\u00fcmanl\u0131\/parametreli bir fonksiyon tan\u0131mlayal\u0131m.\n\ndef summer(arg1, arg2):\n    print(arg1 + arg2)\n\nsummer(7, 8)","2dc99276":"######################\n# Docstring\n#######################\n\ndef summer(arg1, arg2):\n    \"\"\"\n    Sum of two numbers\n\n    args:\n    -----\n        arg1: int, float\n        arg2: int, float\n\n    \"\"\"\n    print(arg1 + arg2)","bb130045":"#\n\n\nhelp(summer)\n\nsummer(7, 8)\nsummer(77, 18)","41739aba":"\n\n\n\n\n\n\n\n\n\n#######################\n# Fonksiyonlar\u0131n Statement\/Body B\u00f6l\u00fcm\u00fc\n#######################\n\n# def function_name(parameters\/arguments):\n#     statements (function body)\n\n\ndef multiplication(a, b):\n    c = a * b\n    print(c)\n\nmultiplication(8, 9)\n\n\ndef say_hi():\n    print(\"Merhaba\")\n    print(\"Hi\")\n    print(\"Hello\")\n\n\nsay_hi()\n","d0ffbc19":"###############################################\n# G\u00f6rev 3: A\u015fa\u011f\u0131da verilen de\u011fi\u015fken isimlerinden FARKLI olan de\u011fi\u015fkenlerin isimlerini se\u00e7erek yeni bir df olu\u015fturunuz.\n###############################################","83a1a532":"###############################################\n# G\u00f6rev 1: car_crashes verisindeki numeric de\u011fi\u015fkenlerin isimlerini b\u00fcy\u00fck harfe \u00e7eviriniz ve ba\u015f\u0131na NUM ekleyiniz.\n###############################################","c5751c1f":"###############################################\n# G\u00f6rev 2: \u0130sminde \"no\" BARINDIRMAYAN de\u011fi\u015fkenlerin isimlerininin SONUNA \"FLAG\" yaz\u0131n\u0131z.\n###############################################"}}