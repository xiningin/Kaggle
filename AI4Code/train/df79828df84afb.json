{"cell_type":{"818b2974":"code","274ad98a":"code","c9582bc8":"code","abc3a49a":"code","777d0f77":"code","faa1f0dc":"code","9ad06e12":"code","77f4ec34":"code","1e691646":"code","7d5d280c":"code","36777982":"code","d4742e44":"code","f600f426":"code","e1968ed3":"code","6dd5b27d":"code","3801f097":"code","f92d7f1f":"code","968f1640":"code","8d14c48f":"code","e2269fcd":"markdown","e287bf88":"markdown","4293d6d2":"markdown","46fd9835":"markdown","07d189f9":"markdown","84b89141":"markdown","4a755435":"markdown","179c4965":"markdown","feacd33f":"markdown","b50126e1":"markdown","fef9d000":"markdown","ad58d4f1":"markdown","682886c8":"markdown","a99a394e":"markdown","5570977e":"markdown","bc7b8f0f":"markdown","75364e49":"markdown"},"source":{"818b2974":"import numba\nimport numpy as np\nimport pandas as pd\nfrom math import sqrt\nfrom functools import lru_cache\nfrom sklearn.neighbors import KDTree\nfrom sympy import isprime, primerange\nfrom tqdm import tqdm_notebook as tqdm\nfrom ortools.constraint_solver import pywrapcp\nfrom itertools import combinations, permutations\nfrom scipy.spatial.distance import pdist, squareform\nfrom ortools.constraint_solver import routing_enums_pb2\nfrom sympy.utilities.iterables import multiset_permutations","274ad98a":"cities = pd.read_csv('..\/input\/reeindeer\/cities.csv', index_col=['CityId'])\nXY = np.stack((cities.X.astype(np.float32), cities.Y.astype(np.float32)), axis=1)\nis_not_prime = np.array([0 if isprime(i) else 1 for i in cities.index], dtype=np.int32)","c9582bc8":"kdt = KDTree(XY)","abc3a49a":"path = np.array(pd.read_csv('..\/input\/reeindeer\/path1515413.csv').Path)\n# This is our current best, our method does not show improvments anymore, please use yours as input ","777d0f77":"@numba.jit('f8(i8, i8, i8)', nopython=True, parallel=False)\ndef cities_distance(offset, id_from, id_to):\n    xy_from, xy_to = XY[id_from], XY[id_to]\n    dx, dy = xy_from[0] - xy_to[0], xy_from[1] - xy_to[1]\n    distance = sqrt(dx * dx + dy * dy)\n    if offset % 10 == 9 and is_not_prime[id_from]:\n        return 1.1 * distance\n    return distance\n\n\n@numba.jit('f8(i4, i8[:])', nopython=True, parallel=False)\ndef score_chunk(offset, chunk):\n    pure_distance, penalty = 0.0, 0.0\n    penalty_modulo = 9 - offset % 10\n    for path_index in numba.prange(chunk.shape[0] - 1):\n        id_from, id_to = chunk[path_index], chunk[path_index+1]\n        xy_from, xy_to = XY[id_from], XY[id_to]\n        dx, dy = xy_from[0] - xy_to[0], xy_from[1] - xy_to[1]\n        distance = sqrt(dx * dx + dy * dy)\n        pure_distance += distance\n        if path_index % 10 == penalty_modulo and is_not_prime[id_from]:\n            penalty += distance\n    return pure_distance + 0.1 * penalty\n\n\n@numba.jit('f8(i8[:])', nopython=True, parallel=False)\ndef score_path(path):\n    return score_chunk(0, path)\n\n\n@numba.jit\ndef chunk_scores(chunk):\n    scores = np.zeros(10)\n    pure_distance = 0\n    for i in numba.prange(chunk.shape[0] - 1):\n        id_from, id_to = chunk[i], chunk[i+1]\n        xy_from, xy_to = XY[id_from], XY[id_to]\n        dx, dy = xy_from[0] - xy_to[0], xy_from[1] - xy_to[1]\n        distance = sqrt(dx * dx + dy * dy)\n        pure_distance += distance\n        if is_not_prime[id_from]:\n            scores[9-i%10] += distance\n    scores *= 0.1\n    scores += pure_distance\n    return scores\n\n\n@numba.jit('f8(i8, i8, i8[:], i8[:], i8[:], i8, f8[:,:], i8[:])', nopython=True, parallel=False)\ndef score_compound_chunk(offset, head, firsts, lasts, lens, tail, scores, indexes):\n    score = 0.0\n    last_city_id = head\n    for i in numba.prange(len(indexes)):\n        index = indexes[i]\n        first, last, chunk_len = firsts[index], lasts[index], lens[index]\n        score += cities_distance(offset, last_city_id, first)\n        score += scores[index, (offset + 1) % 10]\n        last_city_id = last\n        offset += chunk_len\n    return score + cities_distance(offset, last_city_id, tail)\n\n\n@numba.jit('i8(i8, i8, i8[:], i8[:], i8[:], i8, f8[:,:], i8[:,:], f8)', nopython=True, parallel=False)\ndef best_score_permutation_index(offset, head, firsts, lasts, lens, tail, scores, indexes, best_score):\n    best_index = -1\n    for i in numba.prange(len(indexes)):\n        score = score_compound_chunk(offset, head, firsts, lasts, lens, tail, scores, indexes[i])\n        if score < best_score:\n            best_index, best_score = i, score\n    return best_index\n\n\n@numba.jit('f8(i8[:])', nopython=True, parallel=False)\ndef sum_distance(ids):\n    res = 0\n    for i in numba.prange(len(ids)):\n        for j in numba.prange(i + 1, len(ids)):\n            res += cities_distance(0, ids[i], ids[j])\n    return res\n\n\n@lru_cache(maxsize=None)\ndef indexes_permutations(n):\n    return np.array(list(map(list, permutations(range(n)))))","faa1f0dc":"def get_uplets(n, neighbours=10, radius=10):\n    uplets = set()  # To ensure uniqueness\n    for i in tqdm(cities.index):\n        # Query by neighbour\n        dists, neibs = kdt.query([XY[i]], neighbours)\n        for comb in combinations(neibs[0], n):\n            if all(comb): # Removing combinations containing 0\n                uplets.add(tuple(sorted(comb)))\n                \n        # Query by radius\n        neibs = kdt.query_radius([XY[i]], radius, count_only=False, return_distance=False)\n        for comb in combinations(neibs[0], n):\n            if all(comb):\n                uplets.add(tuple(sorted(comb)))\n\n    print(f'{len(uplets)} cities {n}-uplets are selected.')\n    \n    # Sorting by distance\n    uplets = np.array(list(uplets))\n    distances = np.array(list(map(sum_distance, uplets)))\n    order = distances.argsort()\n    uplets = uplets[order]\n    \n    return uplets","9ad06e12":"score_path(path)","77f4ec34":"trees = get_uplets(3, 5, 5)  # Tweak those parameters","1e691646":"path_index = np.argsort(path[:-1])\nprint(f'Total score is {score_path(path):.2f}.')\n\nfor ids in tqdm(trees):\n    i1, i2, i3 = np.sort(path_index[ids])\n    head, tail = path[i1-1], path[i3+1]\n    \n    # No inversion, First chunk inversed, Second chunk inversed, both chunks inversed\n    all_chunks = [[path[i1:i1+1], path[i1+1:i2], path[i2:i2+1], path[i2+1:i3], path[i3:i3+1]], \n                  [path[i1:i1+1], path[i1+1:i2][::-1], path[i2:i2+1], path[i2+1:i3], path[i3:i3+1]],\n                  [path[i1:i1+1], path[i1+1:i2], path[i2:i2+1], path[i2+1:i3][::-1], path[i3:i3+1]], \n                  [path[i1:i1+1], path[i1+1:i2][::-1], path[i2:i2+1], path[i2+1:i3][::-1], path[i3:i3+1]]]\n    \n    for i, chunks in enumerate(all_chunks):\n        chunks = [chunk for chunk in chunks if len(chunk)] # Removing empty chunks\n        scores = np.array([chunk_scores(chunk) for chunk in chunks]) # Scoring chunks\n        lens = np.array([len(chunk) for chunk in chunks]) \n        firsts = np.array([chunk[0] for chunk in chunks])\n        lasts = np.array([chunk[-1] for chunk in chunks])\n\n        if i == 0: # Original chunk score\n            best_score = score_compound_chunk(i1-1, head, firsts, lasts, lens, tail, scores, indexes_permutations(len(chunks))[0])\n        \n        # Best scoring permutation of the chunks\n        index = best_score_permutation_index(i1-1, head, firsts, lasts, lens, tail, scores, indexes_permutations(len(chunks)), best_score)\n        \n        if index > 0: # If it is not the not permuted chunk\n            perm = [chunks[i] for i in indexes_permutations(len(chunks))[index]]\n            path[i1-1:i3+2] = np.concatenate([[head], np.concatenate(perm), [tail]]) # Applying combination\n            path_index = np.argsort(path[:-1])\n            print(f'New total score is {score_path(path):.3f}. Permutating path at indexes {i1}, {i2}, {i3}.')\n            break # We move to the next combination\n            \n    break # Uncomment to run the algorithm","7d5d280c":"score_path(path)","36777982":"fours = get_uplets(4, 5, 0) # Tweak this as well","d4742e44":"path_index = np.argsort(path[:-1])\nprint(f'Total score is {score_path(path):.2f}.')\n\nfor ids in tqdm(fours):\n    i1, i2, i3, i4 = np.sort(path_index[ids])  # Added i4\n    head, tail = path[i1-1], path[i4+1]  # Tail changed\n    \n    # New permutations \n    all_chunks = [[path[i1:i1+1], path[i1+1:i2], path[i2:i2+1], path[i2+1:i3], path[i3:i3+1], path[i3+1:i4], path[i4:i4+1]], \n                  [path[i1:i1+1], path[i1+1:i2][::-1], path[i2:i2+1], path[i2+1:i3], path[i3:i3+1], path[i3+1:i4], path[i4:i4+1]], \n                  [path[i1:i1+1], path[i1+1:i2], path[i2:i2+1], path[i2+1:i3][::-1], path[i3:i3+1], path[i3+1:i4], path[i4:i4+1]], \n                  [path[i1:i1+1], path[i1+1:i2], path[i2:i2+1], path[i2+1:i3], path[i3:i3+1], path[i3+1:i4][::-1], path[i4:i4+1]], \n                  [path[i1:i1+1], path[i1+1:i2][::-1], path[i2:i2+1], path[i2+1:i3][::-1], path[i3:i3+1], path[i3+1:i4], path[i4:i4+1]], \n                  [path[i1:i1+1], path[i1+1:i2][::-1], path[i2:i2+1], path[i2+1:i3], path[i3:i3+1], path[i3+1:i4][::-1], path[i4:i4+1]], \n                  [path[i1:i1+1], path[i1+1:i2], path[i2:i2+1], path[i2+1:i3][::-1], path[i3:i3+1], path[i3+1:i4][::-1], path[i4:i4+1]], \n                  [path[i1:i1+1], path[i1+1:i2][::-1], path[i2:i2+1], path[i2+1:i3][::-1], path[i3:i3+1], path[i3+1:i4][::-1], path[i4:i4+1]]\n                 ]\n\n    for i, chunks in enumerate(all_chunks):\n        chunks = [chunk for chunk in chunks if len(chunk)]\n        scores = np.array([chunk_scores(chunk) for chunk in chunks])\n        lens = np.array([len(chunk) for chunk in chunks])\n        firsts = np.array([chunk[0] for chunk in chunks])\n        lasts = np.array([chunk[-1] for chunk in chunks])\n\n        if i == 0:\n            best_score = score_compound_chunk(i1-1, head, firsts, lasts, lens, tail, scores, indexes_permutations(len(chunks))[0])\n        \n        index = best_score_permutation_index(i1-1, head, firsts, lasts, lens, tail, scores, indexes_permutations(len(chunks)), best_score)\n        \n        if index > 0:\n            perm = [chunks[i] for i in indexes_permutations(len(chunks))[index]]\n            path[i1-1:i4+2] = np.concatenate([[head], np.concatenate(perm), [tail]])  #i3 -> i4\n            path_index = np.argsort(path[:-1])\n            print(f'New total score is {score_path(path):.3f}. Permutating path at indexes {i1}, {i2}, {i3}, {i4}.') #Added i4\n            break\n    break # Uncomment to run the algorithm","f600f426":"score_path(path)","e1968ed3":"num_iters = 300\npath_df = pd.DataFrame({\"Path\": path})\ncities2 = cities.reset_index().rename(columns={\"CityId\": \"Path\"})\npath_df = path_df.merge(cities2,how='left',on='Path')\npnums = list(primerange(0, path_df.shape[0]))\n\nstatus_dict = {0: 'ROUTING_NOT_SOLVED', \n               1: 'ROUTING_SUCCESS', \n               2: 'ROUTING_FAIL',\n               3: 'ROUTING_FAIL_TIMEOUT',\n               4: 'ROUTING_INVALID'}\n\ndef create_mat(df):\n    mat = pdist(df)\n    return squareform(mat)\n\ndef create_distance_callback(dist_matrix):\n    def distance_callback(from_node, to_node):\n        return int(dist_matrix[from_node][to_node])\n    return distance_callback\n\ndef optimize(df, startnode, stopnode, fixed):     \n    num_nodes = df.shape[0]\n    mat = create_mat(df)\n    dist_callback = create_distance_callback(mat)\n    search_parameters = pywrapcp.RoutingModel.DefaultSearchParameters()\n    search_parameters.solution_limit = num_iters \n    search_parameters.first_solution_strategy = (\n                                    routing_enums_pb2.FirstSolutionStrategy.LOCAL_CHEAPEST_INSERTION)\n    search_parameters.local_search_metaheuristic = (\n                            routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH)\n\n    if fixed:\n        routemodel = pywrapcp.RoutingModel(num_nodes, 1, [startnode], [stopnode])\n    else:\n        routemodel = pywrapcp.RoutingModel(num_nodes, 1, startnode)\n    routemodel.SetArcCostEvaluatorOfAllVehicles(dist_callback)\n    \n    assignment = routemodel.SolveWithParameters(search_parameters)\n    return routemodel, assignment\n\ndef get_route(df, startnode, stopnode, fixed): \n    routemodel, assignment = optimize(df, int(startnode), int(stopnode), fixed)\n    route_number = 0\n    node = routemodel.Start(route_number)\n    route = []\n    while not routemodel.IsEnd(node):\n        route.append(node) \n        node = assignment.Value(routemodel.NextVar(node))\n    return route","6dd5b27d":"def run_opt(df, m):\n    print(f'm = {m}')\n    \n    # Given a length of subpath m, the subpath we optimize start at 1, m\/2+1, m+1, ... , len(path) - m - 1\n    # Therefore, n is :\n    n = int(path_df.shape[0] \/ m) * 2\n    \n    for i in tqdm(range(n)):\n        startpoint = int(1 +  i * (df.shape[0] - m - 2) \/ n)\n        endpoint = min((startpoint + m), df.shape[0])\n\n        district = df.iloc[startpoint:endpoint, :3].copy()\n        district = district.reset_index()\n        locations = district[['X', 'Y']].values\n\n        segnodes = get_route(locations, 0, (m-1), fixed=True)\n        ord_district = district.iloc[segnodes]\n        segment = ord_district.index.tolist()\n\n        temp = district.loc[segment, ['Path','X', 'Y']].reset_index()\n        district_2 = district.copy()\n        district_2.iloc[:(m-1),1:] = temp.copy()\n        district = district.set_index('index')\n        district_2 = district_2.set_index('index')\n\n        district['step'] = np.sqrt((district.X - district.X.shift())**2 + (district.Y - district.Y.shift())**2)\n        district['step_adj'] = np.where((district.index) % 10 != 0, district.step, district.step + \n                                        district.step*0.1*(~district.Path.shift().isin(pnums)))\n        district_2['step'] = np.sqrt((district_2.X - district_2.X.shift())**2 + (district_2.Y - district_2.Y.shift())**2)\n        district_2['step_adj'] = np.where((district_2.index) % 10 != 0, district_2.step, district_2.step + \n                                          district_2.step*0.1*(~district_2.Path.shift().isin(pnums)))\n\n        check_dist = district.step_adj.sum() > district_2.step_adj.sum()\n        if check_dist:\n            df.iloc[startpoint:endpoint,0:3] = district_2\n            print(f\"Improved of {district.step_adj.sum() - district_2.step_adj.sum()}\")\n        \n        break #Uncomment to run the algorithm","3801f097":"m = 40  # 30 and 50 are also good choices\nrun_opt(path_df, m)\npath = path_df['Path'].values","f92d7f1f":"score_path(path)","968f1640":"def make_submission(name, path):\n    pd.DataFrame({'Path': path}).to_csv(f'{name}.csv', index=False)","8d14c48f":"make_submission(\"path\" + str(int(score_path(path))), path)","e2269fcd":"### Tools","e287bf88":"## First step : 2-opt\nThe first logical move is to use a basic 2-opt. It is quite easy to implement, but feel free to check \n> https:\/\/www.kaggle.com\/kostyaatarik\/close-ends-chunks-optimization-aka-2-opt \n\nOnce this is done, you can move on to higher $k$-opt moves.","4293d6d2":"# Kostya Atarik's $k$-opt\n> https:\/\/www.kaggle.com\/kostyaatarik\/not-a-5-and-5-halves-opt\n\nDuring this competition, Kostya shared numba implementations of $k$-opt moves. His work had a huge impact on the silver\/bronze tier of the leaderboard. ","46fd9835":"## 3-opt\nTo improve Kostya's work, I added the possibility to reverse a chunk in the path. \nThe implementation is quite na\u00efve here.","07d189f9":"## Final word : \n\n- Would our score have been better without the sharings of other amazing Kagglers ?  Probably not.\n\n- Would we have been higher ranked ? Probably, yes.\n\nBut we do believe that the most important thing is that we learned a lot more with these ideas, than with our sloppy implementation of local optimization and $k$-opt moves.\n\nSo thanks again to everybody who shared anything during the competition.\n\n#### Thanks for reading ! ","84b89141":"## Submission","4a755435":"## 5-opt, 6-opt and more.\nIf you have enough time, doing the same thing on a 5\/6 opt is easy.","179c4965":"# Babachan's Local Optimization\nNext thing is to optimize subpaths of our tour, we used babachan's work :\n> https:\/\/www.kaggle.com\/hblearn\/local-optimization-using-google-or-tool\n\nThe only thing we did was removing randomness and trying more subpaths.","feacd33f":"### Tools","b50126e1":"### To the algorithm ...","fef9d000":"### Loading stuff","ad58d4f1":"The following function generates the combinations :\n- n : length of the combinations (for a n-opt)\n- neighbours : parameter of the \"neighbour\" kdt query\n- radius : parameter of the \"radius\" kdt query \n\nI did not change anything here, just refactored the code.","682886c8":"## Next step : How to reach Silver\n- Higher ranked people noticed that algorithms worked better by incrementing the prime penalty (Penalizing by 1%, 2%, ..., 10% instead of 10% directly). Unfortunately, we missed this idea. \nIt is quite simple to implement, but a really clever trick. \n- You could also increment the gain to avoid local minima (accept only moves that have a high enough improvement)\n\nSee : \n> https:\/\/www.kaggle.com\/c\/traveling-santa-2018-prime-paths\/discussion\/77250","a99a394e":"## 4-opt - Same thing, more permutations.\nThe 4-opt worked really well for us, and as we did not have a lot of computing ressources, it got us better improvments than the 5-opt.\nBig plus is that there is almost no changes to do to our 3-opt implementation.","5570977e":"### Optimization","bc7b8f0f":"# From Public Kernels to Bronze\n\nIn this kernel, we will share the improvement we did to public kernels, that were more than enough to reach bronze. Generous Kagglers shared some really great work, that Maxime and I had to use and improve to adapt to the consequence they had on the silver \/ bronze tiers. This was also the first Kaggle competition we really invested in, so we're happy with the results.\n\nI believe we were top 70 a month ago, before $k$-opt moves were made public. Afterwards, we spent most of our time ranked between 80 and 110. We were limited by our hardware, as we were both on vacations at the end of the competition. I was running most of my work on the Kaggle kernels, which was kind of limiting (5-opt was too much...)\n\n#### Anyways, enjoy ! ","75364e49":"Once you have those two optimization methods, the idea is to combine them until you're stuck, play with parameters,  etc..."}}