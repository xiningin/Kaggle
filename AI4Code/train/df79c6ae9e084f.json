{"cell_type":{"b311beef":"code","80ec2662":"code","4fe1ae3d":"code","5dbd087a":"code","5b771710":"code","ec736734":"code","e852ed18":"code","c621dbe5":"code","cd7fbc5a":"code","04b67153":"code","db9f4c6f":"code","6dc4a6ab":"code","37ae4fb1":"code","a258af01":"code","98f80c06":"code","d690f1f7":"code","36b05437":"code","904adc8d":"code","4fedeafb":"code","3f2ed5c8":"code","4abe7fab":"code","9bce1bf4":"code","907eef9f":"code","c7ede0e7":"code","823cc4bb":"code","8492db9a":"code","6d052e0c":"code","56fcfe61":"code","dae1226b":"code","0239a5e3":"code","63733593":"code","5f53a351":"code","fc73ca05":"code","e90049e6":"code","61312376":"code","f84cf1f1":"markdown","ee16260c":"markdown","e104299e":"markdown"},"source":{"b311beef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","80ec2662":"#\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nimport numpy as np\nimport pandas as pd\nimport category_encoders as ce\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom scipy import sparse, hstack\nimport datetime","4fe1ae3d":"# \u8aad\u307f\u8fbc\u307f\ndf_train = pd.read_csv('..\/input\/train.csv', index_col=0)\ndf_test = pd.read_csv('..\/input\/test.csv', index_col=0)","5dbd087a":"# \u6b20\u640d\u5024\u306e\u591a\u3044\u3092\u62bd\u51fa\nlist_cols_null = []\nfor i in df_train.columns:\n    if df_train[i].isnull().sum() > 10000:\n        list_cols_null.append(i)\n        \nprint(list_cols_null)","5b771710":"df_train = df_train.drop(list_cols_null, axis=1)","ec736734":"df_test = df_test.drop(list_cols_null, axis=1)","e852ed18":"# train\u30c7\u30fc\u30bf\u3092X, y\u3078\u5206\u96e2\ndf_X_train = df_train.drop('ConvertedSalary', axis=1)\ndf_y_train = df_train[['ConvertedSalary']]\n# test\u30c7\u30fc\u30bf\u306f\u5143\u3005X\u306e\u307f\u3060\u304c\u3001\u540d\u524d\u3060\u3051\u5909\u3048\u3066\u304a\u304d\u307e\u3059\u3002\ndf_X_test = df_test","c621dbe5":"# \u6570\u5024\u30ab\u30e9\u30e0\u3092\u62bd\u51fa\uff08float or int\uff09\nlist_cols_num = []\nfor i in df_X_train.columns:\n    if df_X_train[i].dtypes == 'float64' or df_X_train[i].dtypes == 'int':\n        list_cols_num.append(i)\n    \nprint(list_cols_num)","cd7fbc5a":"# \u8907\u6570\u30ab\u30e9\u30e0\u306e\u6a19\u6e96\u5316\u3092\u5b9a\u7fa9\n#scaler = StandardScaler()\n#scaler.fit(df_X_train[list_cols_num])","04b67153":"# \u5909\u63db\u5f8c\u306e\u30c7\u30fc\u30bf\u3067\u5404\u5217\u3067\u7f6e\u63db\n#df_X_train[list_cols_num] = scaler.transform(df_X_train[list_cols_num])\n#df_X_test[list_cols_num] = scaler.transform(df_X_test[list_cols_num])","db9f4c6f":"# \u30ab\u30e9\u30e0\u306e\u6b20\u640d\u5024\u3092\u3001\u305d\u308c\u305e\u308c\u306e\u4e2d\u592e\u5024\u3067\u7a74\u57cb\u3081\ndf_X_train.fillna(df_X_train.median(), inplace=True)\ndf_y_train.fillna(df_y_train.median(), inplace=True)\ndf_X_test.fillna(df_X_test.median(), inplace=True)","6dc4a6ab":"# \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ab\u30e9\u30e0\u3092\u62bd\u51fa\nlist_cols_cat = []\nfor i in df_X_train.columns:\n    if df_X_train[i].dtype == 'object':\n        list_cols_cat.append(i)\n        \nprint(list_cols_cat)","37ae4fb1":"# DevType\u306f\u30c6\u30ad\u30b9\u30c8\u51e6\u7406\u3067\u4f7f\u3046\u306e\u3067\u9664\u5916\nlist_cols_cat.remove('DevType')","a258af01":"# \u30a8\u30f3\u30b3\u30fc\u30c0\u3092\u4f5c\u6210\noe = ce.OrdinalEncoder(cols=list_cols_cat, handle_unknown='impute')\n\n# \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092Ordinal Encoding\u3057\u3001\u65b0\u305f\u306a\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u6210\ndf_X_train = oe.fit_transform(df_X_train)\ndf_X_test = oe.fit_transform(df_X_test)","98f80c06":"# \u30c6\u30ad\u30b9\u30c8\u30ab\u30e9\u30e0\u3092\u629c\u304d\u51fa\u3059\nX_train_text = df_X_train.DevType\nX_test_text = df_X_test.DevType\n\n# \u6b20\u640d\u5024\u306bNaN\u3067\u57cb\u3081\u308b\nX_train_text.fillna('NaN', inplace=True)\nX_test_text.fillna('NaN', inplace=True)","d690f1f7":"# \u5168\u3066\u306eDevType\u3092TfIdf\u3067\u30d9\u30af\u30c8\u30eb\u5316\nvec_all = TfidfVectorizer(max_features=100000)","36b05437":"# DevType\u306f\u3059\u3079\u3066\u4f7f\u3046\nemp_title_all = pd.concat([X_train_text, X_test_text])","904adc8d":"# \u5168\u3066\u306eDevType\u3092TfIdf\u3067\u30d9\u30af\u30c8\u30eb\u5316\nvec_all.fit_transform(emp_title_all)","4fedeafb":"# X_train_text\u7528\u30d9\u30af\u30bf\u30e9\u30a4\u30b6\u30fc\u306e\u6307\u5b9a\n# \u8f9e\u66f8\u306fvec_all\u3067\u62bd\u51fa\u3057\u305f\u3082\u306e\u3092\u4f7f\u3046\nvec_train = TfidfVectorizer(max_features=100000, vocabulary=vec_all.vocabulary_)","3f2ed5c8":"# X_train_text\u3092\u30d9\u30af\u30c8\u30eb\u5316\nX_train_text_tfidf = vec_train.fit_transform(X_train_text)","4abe7fab":"# X_test_text\u7528\u30d9\u30af\u30bf\u30e9\u30a4\u30b6\u30fc\u306e\u6307\u5b9a\n# \u8f9e\u66f8\u306fvec_all\u3067\u62bd\u51fa\u3057\u305f\u3082\u306e\u3092\u4f7f\u3046\nvec_test = TfidfVectorizer(max_features=100000, vocabulary=vec_all.vocabulary_)","9bce1bf4":"# X_test_text\u3092\u30d9\u30af\u30c8\u30eb\u5316\nX_test_text_tfidf = vec_test.fit_transform(X_test_text)","907eef9f":"# DevType\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u30c9\u30ed\u30c3\u30d7\ndf_X_train.drop(['DevType'], axis=1, inplace=True)\ndf_X_test.drop(['DevType'], axis=1, inplace=True)","c7ede0e7":"# \u30b9\u30d1\u30fc\u30b9\u884c\u5217\u3092\u6307\u5b9a\n# Tfidf\u4ee5\u5916\u306edense\u3092sparse\u306b\nX_train_sparse = sparse.csc_matrix(df_X_train.values)\nX = sparse.hstack([X_train_sparse, X_train_text_tfidf])\n#\u884c\u65b9\u5411\u306b\u5727\u7e2e\nX = X.tocsr()","823cc4bb":"# y\u3092\u6307\u5b9a\ny = df_y_train.ConvertedSalary.values","8492db9a":"#from lightgbm import LGBMClassifier\n#clf = LGBMClassifier(n_estimators=9999, random_state=71)","6d052e0c":"from sklearn.dummy import DummyClassifier\nclf = DummyClassifier()\nfit_train = clf.fit(X, y)","56fcfe61":"#classifier = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.71,\n #                          importance_type='split', learning_rate=0.05, max_depth=-1,\n #                          min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n #                          n_estimators=9999, n_jobs=-1, num_leaves=31, objective=None,\n #                          random_state=71, reg_alpha=1.0, reg_lambda=1.0, silent=True,\n #                          subsample=0.9, subsample_for_bin=200000, subsample_freq=0)","dae1226b":"# \u5c64\u5316\u62bd\u51fa\u6cd5\u306b\u3088\u308b\u5206\u5272\u6570\u3092\u6307\u5b9a\uff085\u5206\u5272\uff09\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)","0239a5e3":"# 5\u5206\u5272\u5c64\u5316\u62bd\u51fa\u306b\u3088\u308b\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\n# \u5404\u56de\u306e\u30b9\u30b3\u30a2\u3092\u8a18\u9332\nfor train_ix, valid_ix in skf.split(X, y):\n    X_train, y_train = X[train_ix], y[train_ix]\n    X_valid, y_valid = X[valid_ix], y[valid_ix]\n    \n    # \u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\n    fit_train = clf.fit(X_train, y_train)","63733593":"# \u30b9\u30d1\u30fc\u30b9\u884c\u5217\u3092\u6307\u5b9a\n# Tfidf\u4ee5\u5916\u306edense\u3092sparse\u306b\nX_test_sparse = sparse.csc_matrix(df_X_test.values)\nX_test = sparse.hstack([X_test_sparse, X_test_text_tfidf])\n#\u884c\u65b9\u5411\u306b\u5727\u7e2e\nX_test = X_test.tocsr()","5f53a351":"pred = fit_train.predict(X_test)\nlen(pred)","fc73ca05":"submission = pd.read_csv('..\/input\/sample_submission.csv', index_col=0)","e90049e6":"submission.ConvertedSalary = pred\nsubmission","61312376":"# \u4e88\u6e2c\u7d50\u679c\u3092\u51fa\u529b\nsubmission.to_csv('.\/submission.csv')","f84cf1f1":"\u30e2\u30c7\u30ea\u30f3\u30b0","ee16260c":"\u4e88\u6e2c\u5024\u3092\u51fa\u3059","e104299e":"\u30e2\u30c7\u30ea\u30f3\u30b0\u524d\u6e96\u5099"}}