{"cell_type":{"95078150":"code","5431d51c":"code","2e81ca9b":"code","60d081d6":"code","94b066f0":"code","2c9e6491":"code","562687a6":"code","f16492c0":"code","84e57d6c":"code","f517dc3f":"code","5bfc5760":"code","e68e9d30":"code","b427a73d":"code","b2d11ec5":"code","cc1ac7e2":"code","7ded1860":"code","c5217a70":"code","e9cecf2c":"code","3bdb7ffc":"code","a4ab6f99":"code","67ee2471":"code","33304e15":"code","f2072d6b":"code","b8119281":"code","2364447d":"code","a3ea1dfe":"code","d5eec689":"code","90d9847c":"code","dd1079bb":"code","76f9487a":"code","6564311a":"code","ac4269a8":"code","6e6e7361":"code","4c3aa664":"code","51efd0c2":"code","ebd8e745":"code","728eac64":"code","dc750f95":"code","fae46a81":"code","013168c5":"code","9e7c200a":"code","f703fc9d":"code","b040ed4c":"code","5739db12":"code","10c891b1":"code","51bcdc35":"code","971b8a08":"code","c6cb11e3":"code","6be0875a":"markdown","e9aabf0b":"markdown","41434ae2":"markdown","181c4399":"markdown","52ace04d":"markdown","d7ee4bda":"markdown","3268bf47":"markdown"},"source":{"95078150":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5431d51c":"players = pd.read_csv('..\/input\/Players.csv')\nseasons_stats = pd.read_csv('..\/input\/Seasons_Stats.csv')\nplayer_data = pd.read_csv('..\/input\/player_data.csv')","2e81ca9b":"players.head()","60d081d6":"len(players)","94b066f0":"seasons_stats.head()","2c9e6491":"len(seasons_stats)","562687a6":"player_data.head()","f16492c0":"len(player_data)","84e57d6c":"seasons_stats = seasons_stats[~seasons_stats.Player.isnull()]\nplayers = players[~players.Player.isnull()]","f517dc3f":"players = players.rename(columns = {'Unnamed: 0':'id'})","5bfc5760":"num_players = player_data.groupby('name').count()\nnum_players =  num_players.iloc[:,:1]\nnum_players = num_players.reset_index()\nnum_players.columns = ['Player', 'count']\nnum_players[num_players['count'] > 1].head()","e68e9d30":"seasons_stats = seasons_stats.iloc[:,1:]\nseasons_stats = seasons_stats.drop(['blanl', 'blank2'], axis=1)","b427a73d":"player_data['id'] = player_data.index","b2d11ec5":"mj_stats = seasons_stats[seasons_stats.Player == 'Michael Jordan*']\nmj_stats['Year'].iloc[0] - mj_stats['Age'].iloc[0] ","cc1ac7e2":"seasons_stats['born'] = seasons_stats['Year'] - seasons_stats['Age'] - 1","7ded1860":"players = players[~players.born.isnull()]","c5217a70":"players_born = players[['Player', 'born']]","e9cecf2c":"player_data = player_data[~player_data.birth_date.isnull()]","3bdb7ffc":"for i, row in player_data.iterrows():\n    player_data.loc[i, 'born'] = float(row['birth_date'].split(',')[1])","a4ab6f99":"player_data_born = player_data[['name', 'born']]\nplayer_data_born.columns = ['Player', 'born']","67ee2471":"born = pd.concat([players_born, player_data_born])","33304e15":"born = born.drop_duplicates()","f2072d6b":"born = born.reset_index()","b8119281":"born = born.drop('index', axis=1)","2364447d":"born['id'] = born.index","a3ea1dfe":"born[born.Player == 'Magic Johnson*']","d5eec689":"seasons_stats[seasons_stats.Player == 'Magic Johnson*'].head(1)","90d9847c":"born[born.Player == 'Hakeem Olajuwon*']","dd1079bb":"seasons_stats[seasons_stats.Player == 'Hakeem Olajuwon*'].head(1)","76f9487a":"id_magic = born[born.Player == 'Magic Johnson*'].id.values[0]\nid_hakeem = born[born.Player == 'Hakeem Olajuwon*'].id.values[0]\nborn.loc[id_magic, 'born'] = 1959\nborn.loc[id_hakeem, 'born'] = 1962","6564311a":"data = seasons_stats.merge(born, on=['Player', 'born'])","ac4269a8":"data = data[data.Tm != 'TOT']","6e6e7361":"# Filter players with at least 800 min in a season at played at least half of the matchs\ndata = data[(data.MP > 800) & (data.G > 40)]","4c3aa664":"# Per games\ndata['PPG'] = data['PTS'] \/ data['G']\ndata['APG'] = data['AST'] \/ data['G']\ndata['RPG'] = data['TRB'] \/ data['G']\ndata['SPG'] = data['STL'] \/ data['G']\ndata['BPG'] = data['BLK'] \/ data['G']\ndata['FPG'] = data['PF'] \/ data['G']\ndata['TOVPG'] = data['TOV'] \/ data['G']","51efd0c2":"# Adding mvps\nmvp_players = {'Bob Pettit*': [1956, 1959],\n                  'Bob Cousy*': [1957],\n                  'Bill Russell*': [1958, 1961, 1962, 1963, 1965],\n                  'Wilt Chamberlain*': [1960, 1966, 1967, 1968],\n                  'Oscar Robertson*': [1964],\n                  'Wes Unseld*': [1969],\n                  'Willis Reed*': [1970],\n                  'Kareem Abdul-Jabbar*': [1971, 1972, 1974, 1976, 1977, 1980],\n                  'Dave Cowens*': [1973],\n                  'Bob McAdoo*': [1975],\n                  'Bill Walton*': [1978],\n                  'Moses Malone*': [1979, 1982, 1983],\n                  'Julius Erving*': [1981],\n                  'Larry Bird*': [1984, 1985, 1986],\n                  'Magic Johnson*': [1987, 1989, 1990],\n                  'Michael Jordan*': [1988, 1991, 1992, 1996, 1998],\n                  'Charles Barkley*': [1993],\n                  'Hakeem Olajuwon*': [1994],\n                  'David Robinson*': [1995],\n                  'Karl Malone*': [1997, 1999],\n                  'Shaquille O\\'Neal*': [2000],\n                  'Allen Iverson*': [2001],\n                  'Tim Duncan': [2002, 2003],\n                  'Kevin Garnett': [2004],\n                  'Steve Nash': [2005, 2006],\n                  'Dirk Nowitzki': [2007],\n                  'Kobe Bryant': [2008],\n                  'LeBron James': [2009, 2010, 2012, 2013],\n                  'Derrick Rose': [2011],\n                  'Kevin Durant': [2014],\n                  'Stephen Curry': [2015, 2016],\n                  'Russell Westbrook': [2017],\n                  'James Harden': [2018]}","ebd8e745":"data['MVP'] = 0\nfor i, row in data.iterrows():  \n    for k, v in mvp_players.items():\n        for year in v:\n            if row['Player'] != k:\n                break\n            elif(row['Year'] == year) & (row['Player'] == k):\n                data.loc[i, 'MVP'] = 1\n                break","728eac64":"data.columns","dc750f95":"data = data[data.Year >= 2000]","fae46a81":"# Adding Team Wins since 2000 to show this important paramater","013168c5":"data.sort_values(by='Tm').Tm.unique()","9e7c200a":"data[data.Tm == 'NOH'].Year.unique()","f703fc9d":"teams_wins = {'ATL': {2000:28, 2001:25, 2002:33, 2003:35, 2004:28, 2005:13, 2006:26, 2007:30, 2008:37, 2009:47, 2010:53, 2011:44, 2012:40, 2013:44, 2014:38, 2015:60, 2016:48, 2017:43},\n             'BOS': {2000:35, 2001:36, 2002:49, 2003:44, 2004:36, 2005:45, 2006:33, 2007:24, 2008:66, 2009:62, 2010:50, 2011:56, 2012:39, 2013:41, 2014:25, 2015:40, 2016:48, 2017:53},\n             'BRK': {2013:49, 2014:44, 2015:38, 2016:21, 2017:20},\n              'CHA': {2005:18, 2006:26, 2007:33, 2008:32, 2009:35, 2010:44, 2011:34, 2012:7, 2013:21, 2014:43},\n             'NJN': {2000:31, 2001:26, 2002:52, 2003:49, 2004:47, 2005:42, 2006:49, 2007:41, 2008:34, 2009:34, 2010:12, 2011:24, 2012:22},\n             'CHH': {2000:49, 2001:46, 2002:44},\n             'CHI': {2000:17, 2001:15, 2002:21, 2003:30, 2004:23, 2005:47, 2006:41, 2007:49, 2008:33, 2009:41, 2010:41, 2011:62, 2012:50, 2013:45, 2014:48, 2015:50, 2016:42, 2017:41},\n             'CHO': {2015:33, 2016:48, 2017:36},\n             'CLE': {2000:32, 2001:30, 2002:29, 2003:17, 2004:35, 2005:42, 2006:50, 2007:50, 2008:45, 2009:66, 2010:61, 2011:19, 2012:21, 2013:24, 2014:33, 2015:53, 2016:57, 2017:51},\n             'DAL': {2000:40, 2001:53, 2002:57, 2003:60, 2004:52, 2005:58, 2006:60, 2007:67, 2008:51, 2009:50, 2010:55, 2011:57, 2012:36, 2013:41, 2014:49, 2015:50, 2016:42, 2017:33},\n             'DEN': {2000:35, 2001:40, 2002:27, 2003:17, 2004:43, 2005:49, 2006:44, 2007:45, 2008:50, 2009:54, 2010:53, 2011:50, 2012:38, 2013:57, 2014:36, 2015:30, 2016:33, 2017:40},\n             'DET': {2000:42, 2001:32, 2002:50, 2003:50, 2004:54, 2005:54, 2006:64, 2007:53, 2008:59, 2009:39, 2010:27, 2011:30, 2012:25, 2013:29, 2014:29, 2015:32, 2016:44, 2017:37},\n             'GSW': {2000:19, 2001:17, 2002:21, 2003:38, 2004:37, 2005:34, 2006:34, 2007:42, 2008:48, 2009:29, 2010:26, 2011:36, 2012:23, 2013:47, 2014:51, 2015:67, 2016:73, 2017:67},\n             'HOU': {2000:34, 2001:45, 2002:28, 2003:43, 2004:45, 2005:51, 2006:34, 2007:52, 2008:55, 2009:53, 2010:42, 2011:43, 2012:34, 2013:45, 2014:54, 2015:56, 2016:41, 2017:55},\n             'IND': {2000:56, 2001:41, 2002:42, 2003:48, 2004:61, 2005:44, 2006:41, 2007:35, 2008:36, 2009:36, 2010:32, 2011:37, 2012:42, 2013:49, 2014:56, 2015:38, 2016:45, 2017:42},\n             'LAC': {2000:15, 2001:31, 2002:39, 2003:27, 2004:28, 2005:37, 2006:47, 2007:40, 2008:23, 2009:19, 2010:29, 2011:32, 2012:40, 2013:56, 2014:57, 2015:56, 2016:53, 2017:51},\n             'LAL': {2000:67, 2001:56, 2002:58, 2003:50, 2004:56, 2005:34, 2006:45, 2007:42, 2008:57, 2009:65, 2010:57, 2011:57, 2012:41, 2013:45, 2014:27, 2015:21, 2016:17, 2017:26},\n             'MEM': {2002:23, 2003:28, 2004:50, 2005:45, 2006:49, 2007:22, 2008:22, 2009:24, 2010:40, 2011:46, 2012:41, 2013:56, 2014:50, 2015:55, 2016:42, 2017:43},\n             'VAN': {2000:22, 2001:23},\n              'MIA': {2000:52, 2001:50, 2002:36, 2003:25, 2004:42, 2005:59, 2006:52, 2007:44, 2008:15, 2009:43, 2010:47, 2011:58, 2012:46, 2013:66, 2014:54, 2015:37, 2016:48, 2017:41},\n             'MIL': {2000:42, 2001:52, 2002:41, 2003:42, 2004:41, 2005:30, 2006:40, 2007:28, 2008:26, 2009:34, 2010:46, 2011:35, 2012:31, 2013:38, 2014:15, 2015:41, 2016:33, 2017:42},\n             'MIN': {2000:50, 2001:47, 2002:50, 2003:51, 2004:58, 2005:44, 2006:33, 2007:32, 2008:22, 2009:24, 2010:15, 2011:17, 2012:26, 2013:31, 2014:40, 2015:16, 2016:29, 2017:31},\n             'NOH': {2003:47, 2004:41, 2005:18, 2008:56, 2009:49, 2010:37, 2011:46, 2012:21, 2013:27},\n             'NOK': {2006:38, 2007:39},\n             'NOP': {2014:34, 2015:45, 2016:30, 2017:34},\n             'NYK': {2000:50, 2001:48, 2002:30, 2003:37, 2004:39, 2005:33, 2006:23, 2007:33, 2008:23, 2009:32, 2010:29, 2011:42, 2012:36, 2013:54, 2014:37, 2015:17, 2016:32, 2017:31},\n             'OKC': {2009:23, 2010:50, 2011:55, 2012:47, 2013:60, 2014:59, 2015:45, 2016:55, 2017:47},\n             'ORL': {2000:41, 2001:43, 2002:44, 2003:42, 2004:21, 2005:36, 2006:36, 2007:40, 2008:52, 2009:59, 2010:59, 2011:52, 2012:37, 2013:20, 2014:23, 2015:25, 2016:35, 2017:29},\n             'PHI': {2000:49, 2001:56, 2002:43, 2003:48, 2004:33, 2005:43, 2006:38, 2007:35, 2008:40, 2009:41, 2010:27, 2011:41, 2012:35, 2013:34, 2014:19, 2015:18, 2016:10, 2017:28},\n             'PHO': {2000:53, 2001:51, 2002:36, 2003:44, 2004:29, 2005:62, 2006:54, 2007:61, 2008:55, 2009:46, 2010:54, 2011:40, 2012:33, 2013:25, 2014:48, 2015:39, 2016:23, 2017:24},\n             'POR': {2000:59, 2001:50, 2002:49, 2003:50, 2004:41, 2005:27, 2006:21, 2007:32, 2008:41, 2009:54, 2010:50, 2011:48, 2012:28, 2013:33, 2014:54, 2015:51, 2016:44, 2017:41},\n             'SAC': {2000:44, 2001:55, 2002:61, 2003:59, 2004:55, 2005:50, 2006:44, 2007:33, 2008:38, 2009:17, 2010:25, 2011:24, 2012:22, 2013:28, 2014:28, 2015:29, 2016:33, 2017:32},\n             'SAS': {2000:53, 2001:58, 2002:58, 2003:60, 2004:57, 2005:59, 2006:63, 2007:58, 2008:56, 2009:54, 2010:50, 2011:61, 2012:50, 2013:58, 2014:62, 2015:55, 2016:67, 2017:61},\n             'SEA': {2000:45, 2001:44, 2002:45, 2003:40, 2004:37, 2005:52, 2006:35, 2007:31, 2008:20},\n             'TOR': {2000:45, 2001:47, 2002:42, 2003:24, 2004:33, 2005:33, 2006:27, 2007:47, 2008:41, 2009:33, 2010:40, 2011:22, 2012:23, 2013:34, 2014:48, 2015:49, 2016:56, 2017:51},\n             'UTA': {2000:55, 2001:53, 2002:44, 2003:47, 2004:42, 2005:26, 2006:41, 2007:51, 2008:54, 2009:48, 2010:53, 2011:39, 2012:36, 2013:43, 2014:25, 2015:38, 2016:40, 2017:51},\n             'WAS': {2000:29, 2001:19, 2002:37, 2003:37, 2004:25, 2005:45, 2006:42, 2007:41, 2008:43, 2009:19, 2010:26, 2011:23, 2012:20, 2013:29, 2014:44, 2015:46, 2016:41, 2017:49}}","b040ed4c":"for i, row in data.iterrows():  \n    for k, v in teams_wins.items():\n        for year, value in v.items():\n            if ((row['Tm'] == k) & (row['Year'] == year)):\n                data.loc[i, 'Tm_Wins'] = value","5739db12":"data_mvp = data[['id', 'Player', 'Year', 'PER', 'WS', 'BPM', 'VORP', 'PPG', 'Tm_Wins', 'MVP']]","10c891b1":"data_mvp = data_mvp.fillna(0)","51bcdc35":"from sklearn.ensemble import RandomForestClassifier\n\nyears = range(2010, 2018)\nmvp_years = dict()\nresults_mvp = pd.DataFrame(columns = ['id', 'Year', 'MVP'])\n\nfor y in years :\n    # train : all seasons from 2000 to year\n    # test : year\n    train = data_mvp[data_mvp.Year < y]\n    test = data_mvp[data_mvp.Year == y]\n    X_train = train.drop(['id', 'Player', 'Year', 'MVP'], axis=1)\n    y_train = train['MVP']\n    X_test = test.drop(['id', 'Player', 'Year', 'MVP'], axis=1)\n    \n    # Random Forest\n\n    random_forest = RandomForestClassifier(n_estimators=10)\n    random_forest.fit(X_train, y_train)\n    y_pred = random_forest.predict(X_test)\n    random_forest.score(X_train, y_train)\n    acc_random_forest = round(random_forest.score(X_train, y_train) * 100, 2)\n    \n    pred_proba = random_forest.predict_proba(X_test)\n    \n    y_pred_proba = []\n    for i in enumerate(pred_proba):\n        y_pred_proba.append(i[1][1])\n    y_pred_proba = np.asarray(y_pred_proba)\n    \n    mvp_years = pd.DataFrame({\n        \"id\": test[\"id\"],\n        \"Year\": y,\n        \"MVP\": y_pred_proba\n        })\n    \n    results_mvp = pd.concat([results_mvp, mvp_years])\n\nresults_mvp['id'] = results_mvp['id'].astype('int')\ncareer_player = data[['id', 'Player']]\nresults_mvp = results_mvp.merge(career_player, on='id')\n\nresults_mvp = results_mvp.drop_duplicates()\n# results_mvp = results_mvp.sort_values(by='MVP', ascending=False)\n# results_mvp = results_mvp.iloc[0]","971b8a08":"feature_importances = pd.DataFrame(random_forest.feature_importances_,\n                                   index = X_train.columns,\n                                    columns=['importance']).sort_values('importance', ascending=False)\nfeature_importances","c6cb11e3":"top_mvp = results_mvp.sort_values('MVP', ascending=False).groupby('Year').head(1)\ntop_mvp = top_mvp.sort_values('Year', ascending=False)\ntop_mvp = top_mvp[['Year', 'Player']]\ntop_mvp","6be0875a":"**Adding features to players**","e9aabf0b":"Mostly MVP results are correct, great for a start !","41434ae2":"There are some players with the same name, we have to be careful when using the data","181c4399":"We will substract one more year to match born column in players dataframe","52ace04d":"Changing these two Hall of Famers born year","d7ee4bda":"We will concatenate players and player_data dataframes because none has all players","3268bf47":"**Cleaning Data**"}}