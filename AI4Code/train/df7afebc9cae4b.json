{"cell_type":{"b92a5e24":"code","9d518fe9":"code","3caafeb5":"code","b637717e":"code","045b011b":"code","24137845":"code","842379dd":"code","89b604a7":"code","22b36676":"code","7c2adc2c":"code","f7265dce":"code","f42a405e":"code","bd59acbb":"code","ba75c31e":"code","a3bb80ff":"code","d91c27b5":"code","ca10594b":"code","ae3775b5":"code","7b0a9f18":"code","a13b6e40":"code","06c20f87":"code","0f326485":"code","6293ccdf":"code","e16e47a1":"code","797d6d7f":"code","770784bf":"code","d0e57dde":"code","277a57d8":"code","a0be286f":"code","482b57bc":"code","8217f800":"code","4e4836b5":"code","4c80ff61":"code","781cee4e":"code","610a8fd5":"code","47d54bad":"code","817e393a":"code","a1a08723":"code","dd663435":"code","51699a60":"code","0d2b5a0a":"code","3b5c8ee0":"code","92c964ff":"code","3821487e":"code","70da083e":"code","524da86a":"code","b84bb3d1":"code","6bafc3a0":"code","da4c7281":"code","908c33c4":"code","e4dead05":"code","2d36afa9":"code","b97fda22":"code","804e0891":"code","a8b6d48e":"code","3fcb2493":"code","a8e40f3d":"code","3999c4d4":"code","aaafb608":"code","9fa06fb4":"code","fac6e809":"code","0fe8cda0":"code","595d659e":"code","29c85271":"code","ff0fa617":"code","60702b43":"code","f5023e97":"code","b48bdb42":"markdown","e1fe0702":"markdown","7feddaf0":"markdown","511721d6":"markdown","cc183f81":"markdown","1cc7a52e":"markdown","60024c16":"markdown","6038cd39":"markdown","59c2d275":"markdown","3124f86f":"markdown","b4cd3f3b":"markdown","3d29c2ac":"markdown","0451e5c7":"markdown","58182068":"markdown","48c71c62":"markdown","f43340af":"markdown","8ce2946b":"markdown","c78bedac":"markdown","04a066b2":"markdown","38503050":"markdown","bfc6f3a2":"markdown","65afc662":"markdown","f66bf6f8":"markdown","5ebc2e54":"markdown","6fcba8e9":"markdown","2d31d833":"markdown","6f3e6e1b":"markdown","3dd2c363":"markdown","1254fe1e":"markdown","26b709a9":"markdown","908c20c5":"markdown"},"source":{"b92a5e24":"import tensorflow as tf\nimport pandas as pd\nimport numpy as np\nimport os\nfrom sklearn.preprocessing import OneHotEncoder\nfrom tensorflow.keras import models, layers\nimport matplotlib.pyplot as plt","9d518fe9":"#path to the folder from your drive (this will vary for your specific folder setup)\npath = \"..\/input\/2016-us-election\/\"\nos.listdir(path)","3caafeb5":"county_facts = pd.read_csv(path + \"county_facts.csv\")\ncounty_dict =  pd.read_csv(path + \"county_facts_dictionary.csv\")\nprimaries = pd.read_csv(path + \"primary_results.csv\")\nSHAPEPATH = path + \"county_shapefiles\/\"","b637717e":"SHAPEPATH","045b011b":"county_facts.columns","24137845":"county_facts.head()","842379dd":"counties = county_facts.sort_values(\"area_name\")","89b604a7":"counties = counties[counties['state_abbreviation'].notna()]","22b36676":"counties[\"area_name\"] = counties.area_name.str.rsplit(\" \", 1).str[:-1]\ncounties[\"area_name\"] = counties['area_name'].apply(''.join)","7c2adc2c":"NaN = np.nan\ncounties[\"party\"] = NaN\ncounties[\"candidate\"] = NaN\ncounties[\"votes\"] = NaN\ncounties[\"fraction\"] = NaN","f7265dce":"primaries.columns","f42a405e":"dem_winners = pd.DataFrame(columns = ['State', 'State_Abbreviation', 'County_Name', 'fips', 'party', 'Winning Candidate', 'Votes', 'Percentage'])\nrep_winners = pd.DataFrame(columns = ['State', 'State_Abbreviation', 'County_Name', 'fips', 'party', 'Winning Candidate', 'Votes', 'Percentage'])\n\nfor c in primaries.county.unique():\n    temp = primaries.loc[primaries.county == c]\n    \n    val = temp.values\n    dem_index = 0\n    rep_index = 0\n    \n    max_dem = 0\n    max_rep = 0\n    for i, item in enumerate(val):\n        if item[4] == \"Democrat\":\n            if item[6] > max_dem:\n                max_dem = item[6]\n                dem_index = i\n        elif item[4] == \"Republican\":\n            if item[6] > max_rep:\n                max_rep = item[6]\n                rep_index = i\n                \n    selected = val[dem_index]\n    rep_selected = val[rep_index]\n    \n    temp_df = pd.DataFrame.from_dict(data={'State': [selected[0]], 'State_Abbreviation': [selected[1]], 'County_Name': [selected[2]],'fips': [selected[3]], 'party': [selected[4]], 'Winning Candidate': [selected[5]], 'Votes': [selected[6]], 'Percentage': [selected[7]]}) \n    dem_winners = pd.concat([dem_winners, temp_df])\n    temp_df = pd.DataFrame.from_dict(data={'State': [rep_selected[0]], 'State_Abbreviation': [rep_selected[1]], 'County_Name': [rep_selected[2]],'fips': [rep_selected[3]], 'party': [rep_selected[4]], 'Winning Candidate': [rep_selected[5]], 'Votes': [rep_selected[6]], 'Percentage': [rep_selected[7]]}) \n    rep_winners = pd.concat([rep_winners, temp_df])","bd59acbb":"dem_winners = dem_winners.reset_index()\nrep_winners = rep_winners.reset_index()","ba75c31e":"dem_winners[\"party\"] = dem_winners[\"party\"].astype(str)\nrep_winners[\"party\"] = rep_winners[\"party\"].astype(str)","a3bb80ff":"rep_winners.dtypes","d91c27b5":"bins = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]\n\ndem_vals = [0 for i in range(len(bins))] \ndem_p = dem_winners['Percentage'].values\n\nfor item in dem_p:\n    \n    done = False\n    for i, val in enumerate(bins):\n        if item <= val and not done:           \n            dem_vals[i] += 1\n            done = True","ca10594b":"rep_vals = [0 for i in range(len(bins))] \nrep_p = rep_winners['Percentage'].values\n\nfor item in rep_p:\n    done = False\n    for i, val in enumerate(bins):\n        if item <= val and not done:           \n            rep_vals[i] += 1\n            done = True","ae3775b5":"dem_vals","7b0a9f18":"rep_vals","a13b6e40":"bins","06c20f87":"x = np.arange(len(bins))","0f326485":"width = 0.2\n\nplt.style.use(\"dark_background\")\n\nfig, ax = plt.subplots(figsize=(10, 6))\nrects1 = ax.bar(x - width\/2, dem_vals, bins, label='Democrat', color=\"#0048ff\")\nrects2 = ax.bar(x + width\/2, rep_vals, bins, label='Republican', color=\"#eb090d\")\n\nlabels = [\"0-10%\", \"10-20%\", \"20-30%\", \"30-40%\", \"40-50%\", \"50-60%\", \"60-70%\", \"70-80%\", \"80-90%\", \"90-100%\"]\n\nax.set_xlabel('Vote Percentages to Win County')\nax.set_ylabel('Number of Counties')\nax.set_title('Democratic and Republican Counties vs Vote Percentage to win Respective Primaries')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.set_yticks([200, 400, 600, 800, 1000, 1200])\nax.legend()\n\nfor rect in rects1:\n    height = rect.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                xytext=(-6, 4),  # 3 points vertical offset\n                textcoords=\"offset points\", color=\"#FFFFFF\",\n                ha='center', va='bottom')\n\n\nfor rect in rects2:\n    height = rect.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                xytext=(-6, 4),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom', color=\"#FFFFFF\")\n\nfig.tight_layout()\n\nax.spines['bottom'].set_color('#dddddd')\nax.spines['top'].set_color('#dddddd') \nax.spines['right'].set_color('#dddddd')\nax.spines['left'].set_color('#dddddd')\n\n\nplt.show()","6293ccdf":"d = primaries.loc[primaries.party == \"Democrat\"]\nr = primaries.loc[primaries.party == \"Republican\"]","e16e47a1":"r_arr = []\nr_sum = 0\nfor c in r.candidate.unique():\n    s = r.loc[r.candidate == c].votes.sum()\n    r_arr.append(s)\n    r_sum += s","797d6d7f":"d_arr = []\nd_sum = 0\nfor c in d.candidate.unique():\n    s = d.loc[d.candidate == c].votes.sum()\n    d_arr.append(s)\n    d_sum += s","770784bf":"r_arr = [100*val\/r_sum for val in r_arr]\nd_arr = [100*val\/d_sum for val in d_arr]","d0e57dde":"reps = list(r.candidate.unique())\ndems = list(d.candidate.unique())","277a57d8":"rep_combined = []\nfor i, item in enumerate(r_arr):\n    rep_combined.append([item, reps[i]])\n    \nrep_combined","a0be286f":"dem_combined = []\nfor i, item in enumerate(d_arr):\n    dem_combined.append([item, dems[i]])\n    \ndem_combined","482b57bc":"rep_filtered = []\nother = 0\nfor i, item in enumerate(rep_combined):\n    if item[0] < 1.0:\n        other += item[0]\n    else:\n        rep_filtered.append(item)\nrep_filtered.append([other, \"Other\"])\nrep_filtered","8217f800":"r_vals = [i[0] for i in rep_filtered]\nr_candidates = [i[1] for i in rep_filtered]","4e4836b5":"dem_vals = [i[0] for i in dem_combined]\ndem_candidates = [i[1] for i in dem_combined]","4c80ff61":"explode = []\nfor i in r_vals:\n    if i < 10:\n        explode.append(0.2)\n    elif i > 30:\n        explode.append(0.075)\n    else:\n        explode.append(0.05)","781cee4e":"import matplotlib.pyplot as plt\n\nplt.style.use(\"dark_background\")\n\nlabels = r_candidates\nsizes = r_vals\n\nexplode[-1] = 0.05\n\nfig1, ax1 = plt.subplots(figsize=(10, 10))\nax1.pie(sizes, explode=explode, autopct='%1.1f%%', shadow=True, startangle=90, textprops={\"backgroundcolor\": \"black\", \"color\": \"white\"}, colors=[\"red\", \"green\", \"blue\",  \"purple\", \"#615643\", \"cyan\"])\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.legend(labels)\n\nplt.title(\"Republican Vote Split\")\n\nplt.show()\n","610a8fd5":"explode = []\nfor i in dem_vals:\n    if i < 1:\n        explode.append(0.2)\n    else:\n        explode.append(0.05)","47d54bad":"import matplotlib.pyplot as plt\n\nplt.style.use(\"dark_background\")\n\nlabels = dem_candidates\nsizes = dem_vals\n\nexplode[-1] = 0.05\n\nfig1, ax1 = plt.subplots(figsize=(10, 10))\nax1.pie(sizes, explode=explode, autopct='%0.3f%%', shadow=True, startangle=90, textprops={\"backgroundcolor\": \"black\", \"color\": \"white\"}, colors=[\"red\", \"green\", \"blue\",  \"purple\", \"cyan\"])\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.legend(labels)\n\nplt.title(\"Democratic Vote Split\")\n\nplt.show()\n","817e393a":"county_dict","a1a08723":"county_filtered = county_facts.drop_duplicates(subset=\"area_name\")","dd663435":"county_filtered.area_name = county_filtered.area_name.str.rsplit(\" \", 1).str[0]","51699a60":"merged = primaries.merge(right=county_filtered, left_on=\"county\", right_on=\"area_name\")","0d2b5a0a":"merged.columns","3b5c8ee0":"r = merged.loc[merged.party == \"Republican\"]\nd = merged.loc[merged.party == \"Democrat\"]","92c964ff":"plt.scatter(county_facts.RHI125214, county_facts.POP060210)\nplt.title(\"Percentage of White Population vs Population per Square Mile\")\nplt.xlabel(\"Percentage\")\nplt.ylabel(\"Population\")\nplt.show()","3821487e":"plt.scatter(county_facts.RHI225214, county_facts.POP060210)\nplt.title(\"Percentage of Arican American Population vs Population per Square Mile\")\nplt.xlabel(\"Percentage\")\nplt.ylabel(\"Population\")\nplt.show()","70da083e":"plt.scatter(county_facts.RHI325214, county_facts.POP060210)\nplt.title(\"Percentage of American Indian Population vs Population per Square Mile\")\nplt.xlabel(\"Percentage\")\nplt.ylabel(\"Population\")\nplt.show()","524da86a":"plt.scatter(county_facts.RHI425214, county_facts.POP060210)\nplt.title(\"Percentage of Asian Population vs Population per Square Mile\")\nplt.xlabel(\"Percentage\")\nplt.ylabel(\"Population\")\nplt.show()","b84bb3d1":"plt.scatter(county_facts.RHI525214, county_facts.POP060210)\nplt.title(\"Percentage of Native Hawaiian vs Population per Square Mile\")\nplt.xlabel(\"Percentage\")\nplt.ylabel(\"Population\")\nplt.show()","6bafc3a0":"plt.scatter(county_facts.RHI725214, county_facts.POP060210)\nplt.title(\"Percentage of Hispanic vs Population per Square Mile\")\nplt.xlabel(\"Percentage\")\nplt.ylabel(\"Population\")\nplt.show()","da4c7281":"plt.scatter(county_facts.RHI825214, county_facts.POP060210)\nplt.title(\"Percentage of White Alone (Nonhispanic\/Latino) vs Population per Square Mile\")\nplt.xlabel(\"Percentage\")\nplt.ylabel(\"Population\")\nplt.show()","908c33c4":"county_dict","e4dead05":"#foreign born persons with bin percentages vs candidates (bar plot with bins)","2d36afa9":"merged.POP645213","b97fda22":"#iterate through each candidate and create an array with the percent of votes they got vs the population bins. get the avg for each bin and plot","804e0891":"#bin into 10 arrs selected by foreign born percentages (10% intervals)\n#average candidate vote percentage in those array\n#plot","a8b6d48e":"merged.columns","3fcb2493":"merged.POP645213.describe()","a8e40f3d":"type(merged)","3999c4d4":"trumpet = merged[merged.candidate == \"Donald Trump\"]\ntrump_arr = []\n\nfor i in range(1, 7):\n  temp = trumpet[(trumpet.POP645213 < i*10) & (trumpet.POP645213 > (i-1)*10)]\n  s = temp.POP645213.sum()\n  trump_arr.append(float(s))\n  temp = None\n\ntrump_arr","aaafb608":"len(x), len(trump_arr)","9fa06fb4":"import matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('dark_background')\n\nx = ['0-10%', '10-20%', '20-30%', '30-40%', '40-50%', '50-60%']\n\nx_pos = [i for i, _ in enumerate(x)]\n\nplt.bar(x_pos, trump_arr, color='cyan')\nplt.xlabel(\"Percent of Foreign Born People\")\nplt.ylabel(\"Number of Counties\")\nplt.title(\"Counties vs Foreign Born People\")\n\nplt.xticks(x_pos, x)\n\n\nplt.show()","fac6e809":"NaN = np.nan\n# county_facts[['INC110213', 'area_name'] ]\n# notNumber = county_facts['state_abbreviation'][0]\ncounty_list = county_facts[county_facts['state_abbreviation'].notnull()]\ncounty_name_list = county_list['area_name'].values.tolist()\ncounty_inc_list = county_list['INC110213'].values.tolist()\ncounty_inc_data = []\nfor count in range(len(county_name_list)):\n    county_inc_data.append((county_name_list[count], county_inc_list[count]))\n\nmax_inc = 0\n\nfor i in county_inc_data:\n    if i[1] > max_inc:\n        max_inc = i[1]\n\nmin_inc = max_inc\n\nfor i in county_inc_data:\n    if i[1] < min_inc:\n        min_inc = i[1]\n        \nprint(min_inc, max_inc)\n\nbins = [30000, 45000, 60000, 75000, 90000, 105000, 120000, 135000]","0fe8cda0":"c_prim_data = []\ncand_list = primaries['candidate'].values.tolist()\nvotes_list = primaries['votes'].values.tolist()\nc_votes_list = primaries['county'].values.tolist()\nfor i in range(len(cand_list)):\n    c_prim_data.append((cand_list[i], votes_list[i], c_votes_list[i]))\n\nbest_cand = []\n\nfor c in c_prim_data:\n    temp = []\n    for x in c_prim_data:\n        if x[2] == c[2] and x[0] != c[0]:\n            temp.append(x)\n    max_votes = 0\n    total = 0\n    perf_cand = None\n    for cand in temp:\n        if cand[1] > max_votes:\n            max_votes = cand[1]\n    for cand in temp:\n        total = total + cand[1]\n        if cand[1] == max_votes:\n            perf_cand = cand\n    best_cand.append(perf_cand)\nbest_cand = list(dict.fromkeys(best_cand))\n\nfor i, cand in enumerate(best_cand):\n    if cand[2] == best_cand[i+1][2]:\n        if cand[1] > best_cand[i+1][1]:\n            best_cand.remove(best_cand[i+1])\n        elif cand[1] < best_cand[i+1][1]:\n            best_cand.remove(cand)","595d659e":"bin1 = []\nbin2 = []\nbin3 = []\nbin4 = []\nbin5 = []\nbin6 = []\nbin7 = []\nbin8 = []\nfor x in county_inc_data:\n    str = x[0].replace(' County', '')\n    for y in best_cand:\n        if y[2] == str:\n            x = [y[0], x[1], y[2]]\n    if isinstance(x, list): \n        if x[1] <= 30000:\n            bin1.append(x)\n        elif x[1] <= 45000:\n            bin2.append(x)\n        elif x[1] <= 60000:\n            bin3.append(x)\n        elif x[1] <= 75000:\n            bin4.append(x)\n        elif x[1] <= 90000:\n            bin5.append(x)\n        elif x[1] <= 105000:\n            bin6.append(x)\n        elif x[1] <= 120000:\n            bin7.append(x)\n        elif x[1] <= 135000:\n            bin8.append(x)\ndef get_c_data(county_name):\n    for c in best_cand:\n        if county_name == c[2]:\n            return c\norg_counties = [bin1, bin2, bin3, bin4, bin5, bin6, bin7, bin8]\ninc_labels = ['Up to $30,000', '$30,000 - $45,000', '$45,000 - $60,000', '$60,000 - $75,000', '$75,000 - $90,000', '$90,000 - $105,000', '$105,000 - $120,000', '$120,000 - $135,000']\ncand_list = []\nfor x in best_cand:\n    cand_list.append(x[0])\n    \ncand_list = list(dict.fromkeys(cand_list))","29c85271":"for i, bracket in enumerate(org_counties):\n    for b, county in enumerate(bracket):\n        org_counties[i][b] = county[0]","ff0fa617":"def CountFrequency(my_list): \n   count = {} \n   for i in my_list: \n    count[i] = count.get(i, 0) + 1\n   return count \n\nfor i, x in enumerate(org_counties):\n    org_counties[i] = CountFrequency(x)\n    ","60702b43":"top_cands = []\nall_cands = [[],[],[],[],[],[],[],[]]\nfor b, dict in enumerate(org_counties):\n    max = 0\n    total = 0\n    for i, item in list(dict.items()):\n        total = total + item\n        if item > max:\n            max = item\n    for item in list(dict.items()):\n        if item[1] == max:\n            top_cands.append((item[0], item[1]\/total*100))\n        all_cands[b].append((item[0], item[1]\/total*100))\ncand_list = [[],[],[],[],[],[],[],[]]\nchunks = [[],[],[],[],[],[],[],[]]\nfor i, x in enumerate(all_cands):\n    for y in x:\n        cand_list[i].append(y[0])\n        chunks[i].append(y[1])","f5023e97":"import matplotlib.pyplot as plt\n\n\nexplode = [[],[],[],[],[],[],[],[]]\nfor b, i in enumerate(chunks):\n    for x in i:\n        if x < 1:\n            explode[b].append(0.2)\n        else:\n            explode[b].append(0.05)\nfor i in range(len(all_cands)):\n    plt.style.use(\"dark_background\")\n    \n    \n    fig1, ax1 = plt.subplots(figsize=(10, 10))\n    ax1.pie(chunks[i], autopct='%0.3f%%', explode=explode[i], shadow=True, startangle=90, textprops={\"backgroundcolor\": \"black\", \"color\": \"white\"}, colors=[\"red\", \"green\", \"blue\",  \"purple\", \"cyan\", \"yellow\"])\n    ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n    plt.legend(cand_list[i])\n\n    plt.title(\"County Average Income: \" + inc_labels[i])\n\n    plt.show()","b48bdb42":"# Voting Analysis","e1fe0702":"As predicted, the republicans had more candidates and the votes were more evenly distributed among them. Therefore, there was a smaller raw margin required to win. The democrats only had 2 major contenders, so while the vote was evenly split, the winning candidate required more voted.","7feddaf0":"Setting up data for graphs","511721d6":"This graph highlights the vote split of republicans. As we can see, it is relatively evenly distributed around the candidates, with only a few outliers.","cc183f81":"No correlation in this graph.","1cc7a52e":"## Load all the CSVS","60024c16":"## Get the Paths","6038cd39":"Majority of counties have very little foreign born people. Maximum % make up is 60% and the majority seems to be in the lower 0-10% range","59c2d275":"## Processing","3124f86f":"Here, the democrat vote split is displayed. We can see how 2 candidates take the majority of the vote.","b4cd3f3b":"Looking at the graph, we can clearly see that there is a correlation with democrats needing a higher vote percentage to win the election. This may be because Democrats had a lower amount of candidates than Republicans.","3d29c2ac":"## Start defining bins and values for the graph","0451e5c7":"# Foreign Born Persons, Persons Per Household\nArnav","58182068":"Typically, Republicans require less of a percentage to win a county than republicans. This could be attributed to many causes. Perhaps the republican vote is more evenly split","48c71c62":"Creating graphs","f43340af":"Correlation between lower percentage of American Indians and higher population density. Native Americans may stay in areas of high population","8ce2946b":"Bar plot with democrat vs republican by 10% bins","c78bedac":"No Correlation","04a066b2":"# Median Household Income vs Candidate Performance\n","38503050":"Organizing performance data into bins according to income ","bfc6f3a2":"No Correlation","65afc662":"Average the vote percentages for each candidate in county, then compare dem vs rep","f66bf6f8":"## Import Modules","5ebc2e54":"## Make a Plot for the Percentage of the vote required to win a county for both democrats and republicans","6fcba8e9":"# Ethnicity vs Voter Turnout and percentages\nArnav","2d31d833":"## Create new Dataframes with Winners","6f3e6e1b":"No correlation in this graph.","3dd2c363":"Formatting candidate performance data","1254fe1e":"Setting up data and bins","26b709a9":"Correlation between More Asians incounty and lower overall percantage. Asians may tend to stay in larger, more populated counties","908c20c5":"Strong correlation between higher population of Native Hawaiians low percentage overall. Likely stay in highly populated areas"}}