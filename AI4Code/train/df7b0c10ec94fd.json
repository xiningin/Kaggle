{"cell_type":{"ac09f1cd":"code","7ead62e7":"code","73a056e5":"code","82d7602d":"code","91a0a6c7":"code","16ee6ceb":"code","9bf1bf5b":"code","985f495d":"code","532ed8cd":"code","f653868f":"code","23d828a0":"markdown","0b0e283b":"markdown"},"source":{"ac09f1cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7ead62e7":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.cluster import KMeans","73a056e5":"#function for ordering cluster numbers\ndef order_cluster(cluster_field_name, target_field_name,df,ascending):\n    df_new = df.groupby(cluster_field_name)[target_field_name].mean().reset_index()\n    df_new = df_new.sort_values(by=target_field_name,ascending=ascending).reset_index(drop=True)\n    df_new['index'] = df_new.index\n    df_final = pd.merge(df,df_new[[cluster_field_name,'index']], on=cluster_field_name)\n    df_final = df_final.drop([cluster_field_name],axis=1)\n    df_final = df_final.rename(columns={\"index\":cluster_field_name})\n    return df_final","82d7602d":"# get a sample for quick analysis\ndf = pd.read_csv('\/kaggle\/input\/sales-data-for-a-chain-of-brazilian-stores\/Sales Report.csv', sep=';', parse_dates=['Sale Date Time'])\n","91a0a6c7":"df.sample(100)","16ee6ceb":"df['Date'] = pd.to_datetime(df['Sale Date Time'])\n\n","9bf1bf5b":"dfclient = pd.DataFrame(df['Client'].unique())\ndfclient.columns = ['Client']\n\n\ndf_max_purchase = df.groupby('Client').Date.max().reset_index()\ndf_max_purchase.columns = ['Client','MaxPurchaseDate']\ndf_max_purchase['Recency'] = (df_max_purchase['MaxPurchaseDate'].max() - df_max_purchase['MaxPurchaseDate']).dt.days\ndfclient = pd.merge(dfclient, df_max_purchase[['Client','Recency']], on='Client')\n\n#build 4 clusters for recency and add it to dataframe\nkmeans = KMeans(n_clusters=4)\nkmeans.fit(dfclient[['Recency']])\ndfclient['RecencyCluster'] = kmeans.predict(dfclient[['Recency']])   \ndfclient = order_cluster('RecencyCluster', 'Recency',dfclient,False)\n\ndfclient.head(100)","985f495d":"#FREQUENCY\n                \n#get order counts for each user and create a dataframe with it\ndffreq = df.groupby('Client').Date.count().reset_index()\ndffreq.columns = ['Client','Frequency']\n                \n#add this data to our main dataframe\ndfclient = pd.merge(dfclient, dffreq, on='Client')\n\n#k-means\nkmeans = KMeans(n_clusters=4)\nkmeans.fit(dfclient[['Frequency']])\ndfclient['FrequencyCluster'] = kmeans.predict(dfclient[['Frequency']])\n\n#order the frequency cluster\ndfclient = order_cluster('FrequencyCluster', 'Frequency',dfclient,True)","532ed8cd":"#REVENUE\n#calculate revenue for each customer\ndfrev = df.groupby('Client').Total.sum().reset_index()\n\n#merge it with our main dataframe\ndfclient = pd.merge(dfclient, dfrev, on='Client')\n#apply clustering\nkmeans = KMeans(n_clusters=4)\nkmeans.fit(dfclient[['Total']])\ndfclient['TotalCluster'] = kmeans.predict(dfclient[['Total']])\n#order the cluster numbers\ndfclient = order_cluster('TotalCluster', 'Total',dfclient,True)\n\ndfclient.head(100)","f653868f":"#calculate overall score and use mean() to see details\ndfclient['OverallScore'] = dfclient['RecencyCluster'] + dfclient['FrequencyCluster'] + dfclient['TotalCluster']\ndfclient.groupby('OverallScore')['Recency','Frequency','Total'].mean()\n\ndfclient['Segment'] = 'Valor Baixo'\ndfclient.loc[dfclient['OverallScore']>2,'Segment'] = 'Valor M\u00e9dio' \ndfclient.loc[dfclient['OverallScore']>4,'Segment'] = 'Valor Alto' \n\ndfclient['RecencyText'] = 'Inativo \u00e0 muit\u00edssimo tempo'\ndfclient.loc[dfclient['RecencyCluster'] == 3, 'RecencyText'] = 'Ativo recentemente'\ndfclient.loc[dfclient['RecencyCluster'] == 2, 'RecencyText'] = 'Inativo \u00e0 pouco tempo'\ndfclient.loc[dfclient['RecencyCluster'] == 1, 'RecencyText'] = 'Inativo \u00e0 muito tempo'\n\ndfclient['FrequencyText'] = 'Frequ\u00eancia Baix\u00edssima'\ndfclient.loc[dfclient['FrequencyCluster'] == 3, 'FrequencyText'] = 'Frequ\u00eancia Alta'\ndfclient.loc[dfclient['FrequencyCluster'] == 2, 'FrequencyText'] = 'Frequ\u00eancia M\u00e9dia'\ndfclient.loc[dfclient['FrequencyCluster'] == 1, 'FrequencyText'] = 'Frequ\u00eancia Baixa'\n\ndfclient['TotalText'] = 'Receita Muito Baixa'\ndfclient.loc[dfclient['TotalCluster'] == 3, 'TotalText'] = 'Receita Alta'\ndfclient.loc[dfclient['TotalCluster'] == 2, 'TotalText'] = 'Receita M\u00e9dia'\ndfclient.loc[dfclient['TotalCluster'] == 1, 'TotalText'] = 'Receita Baixa'\n\n\ndfclient.head(100)","23d828a0":"**create a generic user dataframe to keep Client and new segmentation scores**","0b0e283b":" **SETUP**"}}