{"cell_type":{"79bafe07":"code","792ef052":"code","67e91c5f":"code","d7a16a8e":"code","39d58446":"code","7418193b":"code","10d259c6":"code","35b5b768":"code","9a93837d":"code","dfefb7b0":"code","e6e991b3":"code","6a80009f":"code","7e024b9e":"code","d984572a":"code","f789bb37":"code","b28b5b70":"code","d30f8e75":"code","87844923":"code","2180d477":"code","6a639dfa":"code","556a497a":"code","85d2bd1e":"code","68743758":"code","405b6a32":"code","23a4b83d":"code","c3321db2":"code","d79723d0":"code","6fa48fbb":"code","b45ab4de":"code","451f8a23":"code","01c2e691":"code","3713a779":"code","682989e2":"code","a86b0c95":"code","6c9f8c58":"code","dc1664e3":"code","e3dd3030":"code","959cf289":"code","9ca017f8":"code","bb9ec6df":"code","5992f91a":"code","14bfc684":"code","3307829c":"code","e0ebcb21":"code","3ea15023":"code","0e0cdcba":"code","5d891bf5":"code","aa4c84b8":"code","f72a6637":"code","2d0a845c":"code","2b1f44da":"code","abfc1cdb":"code","508298f8":"code","ed677718":"code","f52ecde4":"code","0fa941bc":"code","f17dc025":"code","90ae7a2c":"code","9671d5b8":"code","33f04a19":"code","daf3bb5b":"code","e4122341":"code","6bf46e83":"code","02a9c7c7":"code","f3de2535":"code","9a091c87":"code","8b0671e5":"code","471d68b7":"code","64fd2a73":"code","1a04eaa6":"code","35fb260b":"code","50b4fbf6":"code","c4c44117":"code","907669e6":"code","e86548b0":"code","6a979249":"code","efadae78":"code","cd3b1037":"code","ed8ce149":"code","aa1b4836":"code","5cdf73e6":"code","0e0fbf61":"code","87889192":"code","7180337e":"code","74349882":"code","879d6fa9":"code","181d72bb":"code","6c6eaf2b":"markdown","99174603":"markdown","f8d26924":"markdown","95cd03ef":"markdown","b7150362":"markdown","d85e672e":"markdown","d025e027":"markdown","c97c85a8":"markdown","f0f525b0":"markdown","f55f8779":"markdown","b48a56ea":"markdown","8ecf2ca2":"markdown","d111ca56":"markdown","ac5b0eb1":"markdown","cb60ebf4":"markdown","b54f7ef8":"markdown","70df46d8":"markdown","2dbe8795":"markdown","3c7e63b3":"markdown","59f6e286":"markdown","bb841474":"markdown","708917b6":"markdown","181171d4":"markdown","9206a9b7":"markdown","9c415850":"markdown","26b88923":"markdown","61f70a11":"markdown","cbe8d763":"markdown"},"source":{"79bafe07":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport json\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","792ef052":"data = pd.read_csv(\"\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")\n","67e91c5f":"data.head() # this code helps us to read first 5 informations about data.","d7a16a8e":"data.tail() #this code helps us to read last 5 informations about data.","39d58446":"print(len(data)) #length of data","7418193b":"data.info() # basic informations about data","10d259c6":"print(data.columns) # clolumn's names","35b5b768":"data.corr() #corrolations between some values","9a93837d":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","dfefb7b0":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.budget.plot(kind = 'line', color = 'red',label = 'Budget',linewidth=1,alpha = 1,grid = True,linestyle = ':')\ndata.revenue.plot(color = 'black',label = 'Revenue',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","e6e991b3":"# Scatter Plot \n# x = budget, y = revenue\ndata.plot(kind='scatter', x='budget', y='revenue',alpha = 0.5,color = 'purple')\nplt.xlabel('Budget')              # label = name of label\nplt.ylabel('Revenue')\nplt.title('Budget Revenue Scatter Plot')            # title = title of plot","6a80009f":"# Histogram\n# bins = number of bar in figure\ndata.budget.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","7e024b9e":"#filtering\n\nx = data[\"budget\"] > 200000000\ndata[x]","d984572a":"x = data[\"revenue\"] > 200000000\ndata[x]","f789bb37":"for index,value in data[['budget']][0:2].iterrows():\n    print(index,\" : \",value)\n    \n    \nfor index,value in data[['revenue']][0:2].iterrows():\n    print(index,\" : \",value)","b28b5b70":"data.describe()","d30f8e75":"data.boxplot(column = \"popularity\", by = \"budget\")\nplt.show()\n","87844923":"data.shape # Rows and columns of the data","2180d477":"data.info()","6a639dfa":"print(data['genres'].value_counts(dropna =False)) # Frequency of genres","556a497a":"data.describe()","85d2bd1e":"data.boxplot(column='revenue',by = 'budget') # shows us basics statistics like outliers, quentiles.","68743758":"data_new = data.head() # First lets create new data to make it easy\ndata_new","405b6a32":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'Name', value_vars= ['budget','revenue'])\nmelted","23a4b83d":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmp = melted.pivot(index = 'Name', columns = 'variable', values = 'value')\nmp","c3321db2":"data1 = data.head()\ndata2= data.tail()\nconcat_hor = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row (in short, this is about vertically  or horizantily.)\nconcat_hor","d79723d0":"data1 = data['budget'].head()\ndata2= data['revenue'].head()\nconcat_ver = pd.concat([data1,data2],axis =1) # axis = 1 : adds dataframes in columns.\nconcat_ver","6fa48fbb":"data.dtypes # Shows us what kind of datatypes used in data.","b45ab4de":"# lets convert object(str) to categorical and int to float.\ndata['production_companies'] = data['production_companies'].astype('category')\ndata['vote_count'] = data['vote_count'].astype('float')","451f8a23":"data.dtypes","01c2e691":"data.info()","3713a779":"# Lets chech tagline\ndata[\"tagline\"].value_counts(dropna =False)\n# As you can see, there are 844 NAN value","682989e2":"# Lets drop nan values\ndata1 = data   # also we will use data to fill missing value so I assign it to data1 variable\ndata1[\"tagline\"].dropna(inplace = True)  #dropna means drop null objects, #inplace true means save informations to data.\n# So does it work ?","a86b0c95":"We will check it by using assert method. On other words, putting something forward.\nAs an illustration:\nassert 2+2 = 4 --> will return nothing becouse calculation is true,\nSo if we make a mistake:\nassert 2+2 = 5 --> will return error becouse calculation is not true.","6c9f8c58":"assert  data1['tagline'].notnull().all() # returns nothing because we drop nan values","dc1664e3":"data1[\"tagline\"].fillna('empty',inplace = True) #The fillna() function is used to fill NA\/NaN values using the specified method.","e3dd3030":"assert  data1['tagline'].notnull().all() # returns nothing because we do not have nan values\n","959cf289":"# # With assert statement we can check a lot of thing. For example\n# assert data.columns[1] == 'Name'\n# assert data.Speed.dtypes == np.int","9ca017f8":"#For example lest make a mistake:\nassert data.columns[1] == \"budget\" #will return error becouse index of budget is 0.","bb9ec6df":"films = [\"The Shawshank Redemption\", \"The Godfather\", \"The Dark Knight\"]\nimdb = [\"9,3\", \"9,2\", \"9.0\"]\nlist_label = [\"Name\", \"Imdb\"]\nlist_col = [films, imdb]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","5992f91a":"#adding new columns\ndf[\"Years\"] = [\"1994\", \"1972\", \"2008\"]\ndf","14bfc684":"#Broadcasting : adding a column but each of these columns have same value.\ndf[\"Voted from\"] = \"Us Box Office\" # But this is a assumption.\ndf","3307829c":"#Plotting\ndata1 = data.loc[:,[\"budget\",\"revenue\",\"popularity\"]]\ndata1.plot()\nplt.show()","e0ebcb21":"# subplots\ndata1.plot(subplots = True)\nplt.show()","3ea15023":"# scatter plot  \ndata1.plot(kind = \"scatter\",x=\"budget\",y = \"revenue\")\nplt.show()","0e0cdcba":"# hist plot  \ndata1.plot(kind = \"hist\",y = \"popularity\",bins = 50,range= (0,250)) # range shows gap of row\nplt.show()\n","5d891bf5":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"popularity\",bins = 50,range= (0,250),ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"popularity\",bins = 50,range= (0,250),ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt.show()","aa4c84b8":"data.describe()","f72a6637":"data.head()","2d0a845c":"# in 12.index there are relase dates\nrl_date = data.release_date\nprint(type(rl_date))\ndatetime_object = pd.to_datetime(rl_date) #converting to datetime data type\nprint(type(datetime_object))\n","2b1f44da":"#close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of our data and add it a time list\ndata2 = data.head()\ndate_list = rl_date\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\ndata2 ","abfc1cdb":"# Now we can select according to our date index\nprint(data2.loc[\"2009-12-10\"])\nprint(\"---------------------------------------------------------------------------\")\nprint(data2.loc[\"2009-03-10\":\"2015-01-16\"])","508298f8":"Resampling: statistical method over different time intervals\nNeeds string to specify frequency like \"M\" = month or \"A\" = year","ed677718":"# We will use data2 that we create at previous part\ndata2.resample(\"A\").mean() #resemple is a method","f52ecde4":"# Lets resample with month\ndata2.resample(\"M\").mean()\n# As you can see there are a lot of nan because data2 does not include all months","0fa941bc":"# In real life (data is real. Not created from us like data2) we can solve this problem with interpolate\n# We can interpolete from first value\ndata2.resample(\"M\").first().interpolate(\"linear\")","f17dc025":"# Or we can interpolate with mean()\ndata2.resample(\"M\").mean().interpolate(\"linear\")","90ae7a2c":"data = pd.read_csv(\"..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")\n#data= data.set_index(\"#\") # make # index of data\ndata.head()","9671d5b8":"# indexing using square brackets\ndata[\"original_title\"][1]","33f04a19":"data.original_title[1] #alternatively","daf3bb5b":"# using loc accessor\ndata.loc[1,[\"original_title\"]] # loc --> Access a group of rows and columns by label(s) or a boolean array.","e4122341":"# Selecting only some columns\ndata[[\"original_title\",\"vote_average\"]]","6bf46e83":"# Slicing and indexing series\ndata.loc[1:10,\"original_title\":\"vote_average\"]","02a9c7c7":"# Reverse slicing \ndata.loc[10:1:-1,\"original_title\":\"vote_average\"]","f3de2535":"# From something to end\ndata.loc[1:10, \"tagline\": ] # features after tagline ","9a091c87":"# Creating boolean series\nboolean = data.vote_average > 8.5\ndata[boolean]","8b0671e5":"# Combining filters\nfirst_filter = data.vote_average > 5.0\nsecond_filter = data.budget > 150000000\ndata[first_filter & second_filter]","471d68b7":"# Filtering column based others\ndata.title[data.revenue>1000000000] # nested features, title that film's revenues bigger than 1000000000","64fd2a73":"# Defining column using other columns\ndata[\"profit\"] = data.revenue - data.budget\ndata.head() # at the end you can see","1a04eaa6":"# our index name is this:\nprint(data.index.name)\n# lets change it, it was nothing\ndata.index.name = \"index_name\"\ndata.head()","35fb260b":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndata.head()\n# first copy of our data to data3 then change index \ndata3 = data.copy() # coppying for not break down our main data\n# lets make index start from 100. It is not remarkable change but it is just example\ndata3.index = range(100,4903,1)\ndata3.head()","50b4fbf6":"data = pd.read_csv(\"\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")\ndata.head()\n# As you can see there is index. However we want to set one or more column to be index","c4c44117":"# Setting index : original_title is outer release_date  is inner index\ndata1 = data.set_index([\"original_title\",\"release_date\"]) \ndata1.head(50)\n# data1.loc[\"Avatar\",\"2009-12-10\"] # how to use indexes","907669e6":"dic = {\"species\":[\"cat\",\"cat\",\"dog\",\"dog\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"agression_%\":[20,35,42,53],\"age\":[1,4,3,7]}\ndf = pd.DataFrame(dic)\ndf #our new data frame","e86548b0":"# pivoting\ndf.pivot(index=\"species\",columns = \"gender\",values=\"agression_%\")","6a979249":"df1 = df.set_index([\"species\",\"gender\"])\ndf1\n# lets unstack it","efadae78":"# level determines indexes\ndf1.unstack(level=0) ","cd3b1037":"df1.unstack(level=1)\n","ed8ce149":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","aa1b4836":"df","5cdf73e6":"# df.pivot(index=\"species\",columns = \"gender\",values=\"agression_%\")\npd.melt(df,id_vars=\"species\",value_vars=[\"age\",\"agression_%\"]) --> we melted gender","0e0fbf61":"df","87889192":"df.groupby(\"species\").mean() # --> make group means belongs to species.\n","7180337e":"# Also you can use it for min max methods etc.\ndf.groupby(\"species\").std()","74349882":"# we can only choose one of the feature\ndf.groupby(\"agression_%\").age.max()","879d6fa9":"# Or we can choose multiple features\ndf.groupby(\"species\")[[\"age\",\"agression_%\"]].min() # min age and min agression belongs to specific species.","181d72bb":"df.info()","6c6eaf2b":"# ****HIERARCHICAL INDEXING****","99174603":"# ****INDEXING PANDAS TIME SERIES****\n","f8d26924":"In data there are 4803 entries but if we analyse tagline; there are 3959 non-null objects. Its mean there are 844 null objects.","95cd03ef":"We will build data frames by using dictionary and zip methods.\nzip() method: This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.","b7150362":"Cleaning Data","d85e672e":"# ****FILTERING DATA FRAMES****","d025e027":"# ****RESAMPLING PANDAS TIME SERIES****\n","c97c85a8":"As seen above, There are 370 drama films and 282 comedy films ...","f0f525b0":"# ****STATISTICAL EXPLORATORY DATA ANALYSIS****\n","f55f8779":"# ****SLICING DATA FRAME****","b48a56ea":"# ****MELTING DATA FRAMES****\nMelting is reverse of pivoting.","8ecf2ca2":"# ****Missing Data and Testing it With Assert****\n","d111ca56":"# ****MANIPULATING DATA FRAMES WITH PANDAS****","ac5b0eb1":"These codes affirm my first theory. Becouse if we anlyze budget bigger than 200000000 we can only achieve 98 films. However, we can achieve 4496 films their revenue bigger than 200000000.","cb60ebf4":"****VISUAL EXPLORATORY DATA ANALYSIS****","b54f7ef8":"As seen above; vote count is converted to float, production_companies is converted to category.","70df46d8":"# ****INDEX OBJECTS AND LABELED DATA****","2dbe8795":"By analyzing this figure we can think about some didactions. For example, there are some connection between popularity and revenue, budget and revenue, vote count and popularity etc. By the helping of these corrolations we can say that if budget increase, revenue would increased accordingly. ","3c7e63b3":"# ****CATEGORICALS AND GROUPBY****","59f6e286":"# ****Pandas Foundation****","bb841474":"# ****DATA ANALYS\u0130S****","708917b6":"# ****Tidy Data****\n\nWe use melt() method. Easily, you can choose some features and rename it to make it more understandable for you. In this way, you can create very little data(table).","181171d4":"# ****PIVOTING DATA FRAMES****","9206a9b7":"Thank you.","9c415850":"# ****Contcatinating****\nBy using this method we can sort two datas.","26b88923":"# ****Pivoting Data****\n\nReverse of melting data.","61f70a11":"As we seen above min popularity is 0 otherwise, max is 875.581305","cbe8d763":"# ****STACKING and UNSTACKING DATAFRAME****"}}