{"cell_type":{"776c5ebc":"code","197a4ac2":"code","26d4c642":"code","0fedab7a":"code","ac7fad3e":"code","32c28ef3":"code","aa7f9220":"code","50c0c166":"code","b81a253d":"code","1e217f06":"code","ea07a84c":"code","cae38be4":"code","e40ee607":"code","2505041f":"code","8b4a8ae2":"code","6108c51a":"code","a0178b2d":"code","64708ccd":"code","b57d6e0e":"code","8303553d":"code","158b588a":"code","a91c767f":"code","32626070":"code","4b7cc487":"code","2f11dd78":"code","bbd8ef54":"markdown","9dd17c43":"markdown","e5a4e342":"markdown","1f90c215":"markdown","ba1719f8":"markdown","b91e3080":"markdown","1f1ab14b":"markdown","793a209c":"markdown","e6321800":"markdown","b6787415":"markdown","526f1949":"markdown","6ad89387":"markdown","81019bd2":"markdown","51f23649":"markdown","8f911d14":"markdown","24a8924a":"markdown"},"source":{"776c5ebc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\nimport time","197a4ac2":"data = pd.read_csv('..\/input\/data.csv', index_col=False)\ndata.head(5)","26d4c642":"print(data.shape)","0fedab7a":"data.describe()","ac7fad3e":"data['diagnosis'] = data['diagnosis'].apply(lambda x: '1' if x == 'M' else '0')\ndata = data.set_index('id')\ndel data['Unnamed: 32']","32c28ef3":"print(data.groupby('diagnosis').size())","aa7f9220":"data.plot(kind='density', subplots=True, layout=(5,7), sharex=False, legend=False, fontsize=1)\nplt.show()","50c0c166":"from matplotlib import cm as cm\n\nfig = plt.figure()\nax1 = fig.add_subplot(111)\ncmap = cm.get_cmap('jet', 30)\ncax = ax1.imshow(data.corr(), interpolation=\"none\", cmap=cmap)\nax1.grid(True)\nplt.title('Breast Cancer Attributes Correlation')\n# Add colorbar, make sure to specify tick locations to match desired ticklabels\nfig.colorbar(cax, ticks=[.75,.8,.85,.90,.95,1])\nplt.show()","b81a253d":"Y = data['diagnosis'].values\nX = data.drop('diagnosis', axis=1).values\n\nX_train, X_test, Y_train, Y_test = train_test_split (X, Y, test_size = 0.20, random_state=21)","1e217f06":"models_list = []\nmodels_list.append(('CART', DecisionTreeClassifier()))\nmodels_list.append(('SVM', SVC())) \nmodels_list.append(('NB', GaussianNB()))\nmodels_list.append(('KNN', KNeighborsClassifier()))","ea07a84c":"num_folds = 10\nresults = []\nnames = []\n\nfor name, model in models_list:\n    kfold = KFold(n_splits=num_folds, random_state=123)\n    start = time.time()\n    cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy')\n    end = time.time()\n    results.append(cv_results)\n    names.append(name)\n    print( \"%s: %f (%f) (run time: %f)\" % (name, cv_results.mean(), cv_results.std(), end-start))","cae38be4":"fig = plt.figure()\nfig.suptitle('Performance Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","e40ee607":"import warnings\n\n# Standardize the dataset\npipelines = []\n\npipelines.append(('ScaledCART', Pipeline([('Scaler', StandardScaler()),('CART',\n                                                                        DecisionTreeClassifier())])))\npipelines.append(('ScaledSVM', Pipeline([('Scaler', StandardScaler()),('SVM', SVC( ))])))\npipelines.append(('ScaledNB', Pipeline([('Scaler', StandardScaler()),('NB',\n                                                                      GaussianNB())])))\npipelines.append(('ScaledKNN', Pipeline([('Scaler', StandardScaler()),('KNN',\n                                                                       KNeighborsClassifier())])))\nresults = []\nnames = []\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    kfold = KFold(n_splits=num_folds, random_state=123)\n    for name, model in pipelines:\n        start = time.time()\n        cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy')\n        end = time.time()\n        results.append(cv_results)\n        names.append(name)\n        print( \"%s: %f (%f) (run time: %f)\" % (name, cv_results.mean(), cv_results.std(), end-start))","2505041f":"fig = plt.figure()\nfig.suptitle('Performance Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","8b4a8ae2":"scaler = StandardScaler().fit(X_train)\nrescaledX = scaler.transform(X_train)\nc_values = [0.1, 0.3, 0.5, 0.7, 0.9, 1.0, 1.3, 1.5, 1.7, 2.0]\nkernel_values = ['linear', 'poly', 'rbf', 'sigmoid']\nparam_grid = dict(C=c_values, kernel=kernel_values)\nmodel = SVC()\nkfold = KFold(n_splits=num_folds, random_state=21)\ngrid = GridSearchCV(estimator=model, param_grid=param_grid, scoring='accuracy', cv=kfold)\ngrid_result = grid.fit(rescaledX, Y_train)\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))","6108c51a":"# prepare the model\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    scaler = StandardScaler().fit(X_train)\nX_train_scaled = scaler.transform(X_train)\nmodel = SVC(C=2.0, kernel='rbf')\nstart = time.time()\nmodel.fit(X_train_scaled, Y_train)\nend = time.time()\nprint( \"Run Time: %f\" % (end-start))","a0178b2d":"# estimate accuracy on test dataset\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    X_test_scaled = scaler.transform(X_test)\npredictions = model.predict(X_test_scaled)","64708ccd":"print(\"Accuracy score %f\" % accuracy_score(Y_test, predictions))\nprint(classification_report(Y_test, predictions))","b57d6e0e":"print(confusion_matrix(Y_test, predictions))","8303553d":"data.head()","158b588a":"inpt = np.array((data.iloc[1 ,1:]))","a91c767f":"inpt = inpt.reshape(1, 30)","32626070":"model.predict(inpt)","4b7cc487":"inpt","2f11dd78":"X_test_scaled[0]","bbd8ef54":"Let's take a look at the number of Benign and Maglinant cases from the dataset. From the output shown below, majority of the cases are benign (0).","9dd17c43":"## Exploratory analysis\n\nLoad the dataset and do some quick exploratory analysis.","e5a4e342":"## Data visualisation and pre-processing\n\nFirst thing to do is to enumerate the diagnosis column such that M = 1, B = 0. Then, I set the ID column to be the index of the dataframe. Afterall, the ID column will not be used for machine learning","1f90c215":"Notice the drastic improvement of SVM after using scaled data. \n\nNext, we'll fine tune the performance of SVM by tuning the algorithm\n\n## Algorithm Tuning - Tuning SVM\n\nWe will focus on SVM for the algorithm tuning. We can tune **two** key parameter of the SVM algorithm - the value of C and the type of kernel. The default C for SVM is 1.0 and the kernel is Radial Basis Function (RBF). We will use the grid search method using 10-fold cross-validation with a standardized copy of the sample training dataset. We will try over a combination of C values and the following kernel types 'linear', 'poly', 'rbf' and 'sigmoid","ba1719f8":"It is good to check the correlations between the attributes. From the output graph below, The red around\nthe diagonal suggests that attributes are correlated with each other. The yellow and green patches suggest some moderate correlation and the blue boxes show negative correlations. ","b91e3080":"Finally, we'll split the data into predictor variables and target variable, following by breaking them into train and test sets. We will use 20% of the data as test set.","1f1ab14b":"From the initial run, it looks like GaussianNB, KNN and CART performed the best given the dataset (all above 92% mean accuracy). Support Vector Machine has a surprisingly bad performance here. However, if we standardise the input dataset, it's performance should improve.  ","793a209c":"We can see that we achieve an accuracy of 99.1% on the held-out test dataset. From the confusion matrix, there is only 1 case of mis-classification. The performance of this algorithm is expected to be high given the symptoms for breast cancer should exchibit certain clear patterns. ","e6321800":"## Prediction of Breast Cancer using SVM with 99% accuracy","b6787415":"## What else could be done\n\n1. Test the algorithm on KNN and GausianNB\n2. Test the data with Artificial Neural Net ","526f1949":"## Baseline algorithm checking\n\nFrom the dataset, we will analysis and build a model to predict if a given set of symptoms lead to breast cancer. This is a binary classification problem, and a few algorithms are appropriate for use. Since we do not know which one will perform the best at the point, we will do a quick test on the few appropriate algorithms with default setting to get an early indication of how each of them perform. We will use 10 fold cross validation for each testing.\n\nThe following non-linear algorithms will be used, namely: **Classification and Regression Trees (CART)**, **Linear Support Vector Machines (SVM)**, **Gaussian Naive Bayes (NB)** and **k-Nearest Neighbors (KNN)**.","6ad89387":"## Evaluation of algorithm on Standardised Data\n\nThe performance of the few machine learning algorithm could be improved if a standardised dataset is being used. The improvement is likely for all the models. I will use pipelines that standardize the data and build the model for each fold in the cross-validation test harness. That way we can get a fair estimation of how each model with standardized data might perform on unseen data.","81019bd2":"Next, we visualise the data using density plots to get a sense of the data distribution. From the outputs below, you can see the data shows a general gaussian distribution. ","51f23649":"We can see the most accurate configuration was SVM with an **RBF** kernel and **C=1.5**, with the accuracy of **96.92%**.","8f911d14":"## Application of SVC on dataset\n\nLet's fit the SVM to the dataset and see how it performs given the test data.","24a8924a":"Using the Breast Cancer Wisconsin (Diagnostic) Database, we can create a classifier that can help diagnose patients and predict the likelihood of a breast cancer. A few machine learning techniques will be explored. In this exercise, Support Vector Machine is being implemented with 99% accuracy."}}