{"cell_type":{"14524c37":"code","046798e9":"code","cd76143f":"code","4a09da8c":"code","c495e508":"code","e8bc95e7":"code","cc89a2ae":"code","2cc1c218":"code","ed23fc39":"code","8281f866":"code","fa62c753":"code","fe0323c1":"code","363dd51a":"code","dd880a72":"code","ed5e467f":"code","334b7d58":"code","0c540d36":"code","a7206fd2":"code","e114ea3e":"code","991a3aaa":"code","2df8314e":"code","08511970":"code","c1d59cc5":"markdown","6af670bc":"markdown","4cf7b7b3":"markdown","bec4fe53":"markdown","87cb89b7":"markdown","d8820f78":"markdown"},"source":{"14524c37":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","046798e9":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","cd76143f":"print(train.keys())","4a09da8c":"#raw data\nfig, ax = plt.subplots(1,3)\nax[0].hist(train.Age,rwidth=0.9)\nax[0].set_title('Age')\nax[1].hist(train.Sex,rwidth=0.9)\nax[1].set_title('Sex')\nax[2].hist(train.Survived,rwidth=0.9)\nax[2].set_title('Survived')\nfig.set_figwidth(15)\nplt.show()","c495e508":"fig, ax = plt.subplots(1,2)\n#how likely are you to survive based on gender?\nax[0].hist([train.Sex[train.Survived==1], train.Sex[train.Survived==0]],rwidth=0.5)\nax[0].legend(labels=['Survived','Died'])\nax[0].set_title('Sex')\n#how likely are you to survive based on age?\nax[1].hist([train.Age[train.Survived==1], train.Age[train.Survived==0]])\nax[1].legend(labels=['Survived','Died'])\nax[1].set_title('Age')\nfig.set_figwidth(15)\nplt.show()","e8bc95e7":"#Combining these two...\nfig, (ax1, ax2) = plt.subplots(1,2)\nax1.hist([train.Age[(train.Survived==1) & (train.Sex=='male')],\n          train.Age[(train.Survived==0) & (train.Sex=='male')]],rwidth=0.9)\nax1.legend(labels=['Survived','Died'])\nax1.set_title('Male')\nax2.hist([train.Age[(train.Survived==1) & (train.Sex=='female')],\n          train.Age[(train.Survived==0) & (train.Sex=='female')]],rwidth=0.9)\nax2.legend(labels=['Survived','Died'])\nax2.set_title('Female')\nfig.set_figwidth(15)\nplt.show()\n","cc89a2ae":"#Deaths based on ticket class...\nplt.hist([train.Pclass[train.Survived==1],train.Pclass[train.Survived==0]])\nplt.xticks([1,2,3])\nplt.legend(['Survived','Died'])\nplt.show()","2cc1c218":"import missingno as msno\n#missing data in train.csv\nmsno.bar(train,color='lightblue')\nplt.show()","ed23fc39":"#missing data in test.csv\nmsno.bar(test,color='lightblue')\nplt.show()","8281f866":"def clean_data(data):\n    #Replace missing ages with median age\n    data.Age.fillna(data.Age.median(),inplace=True)\n\n    #fill Cabin=Nan with 'unknown'\n    data.Cabin.fillna('unknown',inplace=True)\n\n    #replace embarked with mode\n    data.Embarked.fillna(data.Embarked.mode()[0],inplace=True)\n    \n    #replace missing fare with median fare\n    data.Fare.fillna(data.Fare.median(),inplace=True)\n    \n    return data\n\ntrain = clean_data(train)\ntest = clean_data(test)","fa62c753":"#train data\nmsno.bar(train,color='lightblue')\nplt.show()","fe0323c1":"#test data\nmsno.bar(test,color='lightblue')\nplt.show()","363dd51a":"train.head()","dd880a72":"#feature engineering\ndef reformat_data(data):\n    #make gender numerical\n    data.Sex = data.Sex.replace('male',0)\n    data.Sex = data.Sex.replace('female',1)\n    \n    #make embarked numerical\n    data.Embarked = data.Embarked.map({'S':0,'Q':1,'C':2,'U':3})\n    \n    #create family_size and alone column\n    data['FamilySize'] = data.SibSp + data.Parch + 1\n    data['Alone'] = 1\n    data.Alone[data.FamilySize>1] = 0\n    \n    #create title column, Mr, Mrs etc...\n    titles = [name.split(' ')[1] for name in data.Name]\n    data['Title'] = titles\n    data.Title = data.Title.map({'Mr.':1,'Miss.':2,'Mrs.':3,'Master.':4})\n    data.Title.fillna(5, inplace=True)\n\n    return data\n    \ntrain = reformat_data(train)","ed5e467f":"train.Title.value_counts()","334b7d58":"#final check \nmsno.bar(train,color='lightblue')\nplt.show()","0c540d36":"train.head()","a7206fd2":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n#features I want to use in my model\nfeatures = ['Pclass','Sex','Age','FamilySize','Alone','Fare','Embarked','Title']\n\ntrain_df, test_df = train_test_split(train, test_size=0.25)\nX_train = train_df[features]\nY_train = train_df['Survived']\nX_test = test_df[features]\nY_test = test_df['Survived']","e114ea3e":"#train the model\nrf = RandomForestClassifier(n_estimators=100)\nrf.fit(X_train, Y_train)\npreds = rf.predict(X_test)\nprint('n_estimators: %i' %100)\nprint('train_score: %.2f ' %(rf.score(X_train, Y_train)*100))\nprint('test_score: %.2f ' %(rf.score(X_test, Y_test)*100))\nprint('')","991a3aaa":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest = clean_data(test)\ntest = reformat_data(test)\npreds = rf.predict(test[features])\ntest['Survived'] = preds\nprint('test.csv predictions')\nprint(preds)","2df8314e":"submission = test[['PassengerId','Survived']]\nsubmission.head()","08511970":"submission.to_csv('submission.csv',index=False)","c1d59cc5":"# **predict for test.csv**","6af670bc":"# **Explore the data**","4cf7b7b3":"**All columns are now filled in both the training and test data...**","bec4fe53":"A lot of missing cabin and age data\n\n* I will replace missing 'Age' data with the median age.\n* I will probably not use 'Cabin' data in the model - replace nans with 'unknown' for now.\n* I will replace missing 'Embarked' data with the most common value (i.e. the mode).\n* I will replace missing 'Fare' data with the median.","87cb89b7":"# **Data cleaning, is there missing data?**","d8820f78":"# **use tensorflow randomforest**"}}