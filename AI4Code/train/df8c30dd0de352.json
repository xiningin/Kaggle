{"cell_type":{"d37c022b":"code","1460b6f9":"code","7e4a3489":"code","3041803a":"code","bf6f344b":"code","f039538e":"code","096c4e21":"code","07c3d81c":"code","5234d759":"code","ce624a67":"code","91850faf":"code","2ea64e0d":"code","168ecd01":"code","d6e1ce31":"code","d6310645":"code","3cffb0ce":"code","49c8cd36":"code","328ca4c5":"code","c8b55e7e":"markdown","776ee31f":"markdown","d3e9cf8b":"markdown"},"source":{"d37c022b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import StratifiedKFold\nimport xgboost as xgb\n\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import RandomizedSearchCV,GridSearchCV\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","1460b6f9":"data = pd.read_csv(\"..\/input\/googlestockpricing\/Google.csv\")\ndata","7e4a3489":"data['Date']\n# 2004-08-19 --- 2017-01-17","3041803a":"n=len(data)\nprint(n)","bf6f344b":"t=0\nfor item in data['Date']:\n    if item[0:4]=='2017':\n        t+=1\nprint(t) ","f039538e":"testx=data[n-10:]\ntestx","096c4e21":"def dummy_date(df):\n    df[\"year\"] = df[\"Date\"].apply(lambda x: x.split(\"-\")[0])\n    df[\"month\"] = df[\"Date\"].apply(lambda x: x.split(\"-\")[1])\n    df[\"day\"] = df[\"Date\"].apply(lambda x: x.split(\"-\")[2])\n    df.drop(\"Date\",inplace=True,axis=1)\n    return df\n\ndef LabelEncord_categorical(df):\n    categorical_params = [\"year\",\"month\",\"day\"]\n    for params in categorical_params:\n        le = LabelEncoder()\n        df[params] = le.fit_transform(df[params])\n    return df\n\ndef dummies(df):\n    categorical_params = [\"year\",\"month\",\"day\"]\n    for params in categorical_params:\n        dummies =  pd.get_dummies(df[params])\n        df = pd.concat([df, dummies],axis=1)\n    return df\n\ndef pre_processing(df):\n    df = dummy_date(df)\n    df = LabelEncord_categorical(df)\n#    df = dummies(df)\n    return df\n\ndata2 = pre_processing(data)","07c3d81c":"train=data2[0:n-10]\ntest=data2[n-10:]","5234d759":"train","ce624a67":"y_train = train[\"Close\"].values\nX_train = train.drop(\"Close\",axis=1).values\ny_test = test[\"Close\"].values\nX_test =test.drop(\"Close\",axis=1).values","91850faf":"gbm = xgb.XGBRegressor()\nreg_cv = GridSearchCV(gbm, {\"colsample_bytree\":[1.0],\"min_child_weight\":[1.0,1.2],\n                            'max_depth': [3,4,6], 'n_estimators': [500,1000]}, verbose=1)\nreg_cv.fit(X_train,y_train)","2ea64e0d":"reg_cv.best_params_","168ecd01":"gbm = xgb.XGBRegressor(**reg_cv.best_params_)\ngbm.fit(X_train,y_train)","d6e1ce31":"predictions = gbm.predict(X_test)","d6310645":"gbm.score(X_test,y_test)","3cffb0ce":"gbm.score(X_train,y_train)","49c8cd36":"testx['pred_close']=predictions\ntestx2=testx[['Date','Close','pred_close']]\ntestx2","328ca4c5":"fig=make_subplots(specs=[[{\"secondary_y\":False}]])\nfig.add_trace(go.Scatter(x=testx2['Date'],y=testx2['Close'],name=\"real close values\"),secondary_y=False,)\nfig.add_trace(go.Scatter(x=testx2['Date'],y=testx2['pred_close'],name=\"predicted close values\"),secondary_y=False,)\n\nfig.update_layout(autosize=False,width=700,height=500,title_text=\"Google Stock predicted Close values compared to real Close values\")\nfig.update_xaxes(title_text=\"Date\")\nfig.update_yaxes(title_text=\"Value\",secondary_y=False)\nfig.show()","c8b55e7e":"### Predict","776ee31f":"### GridSearch for searching best hyperparameter   ","d3e9cf8b":"### Train data using XGBRegressor with best parameter"}}