{"cell_type":{"c3d4e29c":"code","f3016c0b":"code","44d8e019":"code","e0292a59":"code","b506a5b4":"code","3225f988":"code","4be89556":"code","7fc1729f":"code","4a4d824b":"code","558802be":"code","500ef770":"code","7a764bd7":"code","37569de2":"code","9ce49014":"code","799b2c86":"code","dd2e1775":"code","afb5f715":"code","35b3e271":"code","b75ef549":"code","31c6d270":"code","9df76d39":"code","af612561":"code","83f88ff9":"code","0226a86d":"code","89ffabce":"code","399f98dc":"code","bd52cf9a":"markdown","54c00cab":"markdown","ff6f8f1f":"markdown","5f570700":"markdown","fe5e28e5":"markdown","ff1e0a3e":"markdown","0c87d5b9":"markdown"},"source":{"c3d4e29c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f3016c0b":"import bq_helper\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import set_matplotlib_formats\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\n\nset_matplotlib_formats('retina')\n%matplotlib inline\n\nfrom google.cloud import bigquery\nclient = bigquery.Client()","44d8e019":"query = '''\n    SELECT \n        FORMAT(\"%'d\",COUNT(DISTINCT fullVisitorId)) AS users,\n        FORMAT(\"%'d\",SUM(totals.visits)) AS visits,\n        FORMAT(\"%'d\",SUM(totals.pageviews)) AS pageviews,\n        FORMAT(\"%'d\", SUM(totals.transactions)) AS transactions,\n        SUM(totals.transactionRevenue)\/1000000 AS revenue\n\n    FROM \n        `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n    WHERE\n        _TABLE_SUFFIX BETWEEN '20161001' AND '20161230'\n        AND totals.totalTransactionRevenue IS NOT NULL\n'''\n\nsafe_query_job = client.query(query)\nhigh_level_aug = safe_query_job.to_dataframe()\n\nhigh_level_aug.head()","e0292a59":"query = \"\"\"    \n    SELECT \n        DATE_TRUNC(PARSE_DATE('%Y%m%d',date), MONTH) AS month,\n        SUM(totals.visits) AS visits,        \n        SUM(totals.transactionRevenue)\/1000000 AS revenue\n\n    FROM \n        `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n    WHERE\n        _TABLE_SUFFIX BETWEEN '20161001' AND '20161230'\n        AND totals.totalTransactionRevenue IS NOT NULL\n    GROUP BY 1\n    ORDER BY 1\n        \n\"\"\"\nsafe_query_job = client.query(query)\ndf1 = safe_query_job.to_dataframe()\ndf1.head()","b506a5b4":"fig,ax1 = plt.subplots()\ncolor = 'tab:red'\nax1.set_xlabel('Month')\nax1.set_ylabel('Revenue', color=color)\nax1.plot(df1['month'], df1['revenue'], color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n\ncolor = 'tab:blue'\nax2.set_ylabel('Visits', color=color)  # we already handled the x-label with ax1\nax2.plot(df1['month'], df1['visits'], color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nplt.title('Monthly Web Traffic and Revenue for 2016Q4', fontsize=14)\nplt.xticks(df1['month'],rotation=45)\nplt.show()","3225f988":"# create table with revenue by country\n# traffic by month\nquery = \"\"\"\n    SELECT \n        geoNetwork.country AS country,   \n        SUM(totals.transactionRevenue)\/1000000 AS revenue\n\n    FROM \n        `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n    WHERE\n        _TABLE_SUFFIX BETWEEN '20161001' AND '20161230'\n        AND totals.totalTransactionRevenue IS NOT NULL\n    GROUP BY 1\n    ORDER BY 2 desc\n    \n\"\"\"\nsafe_query_job = client.query(query)\ndf2 = safe_query_job.to_dataframe()\ndf2.head()\n","4be89556":"# create a heatmap of revenue by geo location\n\nfig = go.Figure(data=go.Choropleth(\n    locations=df2['country'], \n    z = df2['revenue'].astype(float),\n    locationmode = 'country names', \n    colorscale = 'Reds',\n    colorbar_title = \"revenue USD\",\n))\n\nfig.update_layout(\n    title_text = '2016Q4 Google Merchandise Store by Geo Location',)\nfig.show()","7fc1729f":"# create a table of metrics by channel\n\nquery = \"\"\"\n    SELECT\n        channelGrouping as channel,\n        SUM(totals.totalTransactionRevenue)\/1000000 AS revenue,\n        SUM(totals.transactions) AS transactions,\n        COUNT(DISTINCT fullVisitorId) AS users,\n        SUM(totals.visits) AS sessions,\n        SUM(totals.pageviews) AS pageviews\n    FROM \n        `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n    WHERE\n        _TABLE_SUFFIX BETWEEN '20161001' AND '20161230'\n        AND totals.totalTransactionRevenue IS NOT NULL\n    GROUP BY\n        1\n    ORDER BY\n        2 DESC\n\"\"\"\nsafe_query_job = client.query(query)\ndf3 = safe_query_job.to_dataframe()\ndf3.head()\n","4a4d824b":"# set up the matplotlib figure\nfig, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(5, figsize=(10,24))\nfig.subplots_adjust(hspace=1)\n\nsns.barplot(x='channel',y='revenue',data=df3,estimator=sum,ax=ax1)\n\nsns.barplot(x='channel',y='transactions',data=df3,estimator=sum,ax=ax2)\n\nsns.barplot(x='channel',y='users',data=df3,estimator=sum,ax=ax3)\n\nsns.barplot(x='channel',y='sessions',data=df3,estimator=sum,ax=ax4)\n\nsns.barplot(x='channel',y='pageviews',data=df3,estimator=sum,ax=ax5)\n\nax1.set_title('Total Revenue by Channel')\nax2.set_title('Total Transactions by Channel')\nax3.set_title('Total Users by Channel')\nax4.set_title('Total Visits by Channel')\nax5.set_title('Total Pageviews by Channel')","558802be":"query = \"\"\"\n    SELECT \n        fullVisitorId AS userID,\n        AVG(totals.timeOnSite) As avgTimeOnSite,\n        SUM(totals.pageviews) AS pageviews,\n        SUM(totals.transactions) AS transactions\n    FROM \n        `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n    WHERE\n        _TABLE_SUFFIX BETWEEN '20161001' AND '20161230'\n    GROUP BY\n        1\n    ORDER BY 1\n        \n\"\"\"\nsafe_query_job = client.query(query)\ndf4 = safe_query_job.to_dataframe()\n\ndf4['transactions'].fillna(0, inplace=True)\ndf4.head()","500ef770":"pearson_corr = df4.corr(method='pearson')\npearson_corr","7a764bd7":"sns.heatmap(pearson_corr,xticklabels=pearson_corr.columns,\n              yticklabels=pearson_corr.columns,cmap='RdBu_r',\n              annot=True,linewidth=0.5)","37569de2":"query = \"\"\"\n    SELECT\n        hits.page.pagePathLevel1 AS pagePath,\n        SUM(totals.pageviews) AS pageviews\n    FROM\n      `bigquery-public-data.google_analytics_sample.ga_sessions_*`,\n      UNNEST(hits) AS hits\n    WHERE\n        _TABLE_SUFFIX BETWEEN '20161001' AND '20161230'\n    GROUP BY 1\n    ORDER BY 2 DESC\n    LIMIT 10\n\"\"\"\nsafe_query_job = client.query(query)\ndf5 = safe_query_job.to_dataframe()\ndf5\n","9ce49014":"df5.plot.bar(x='pagePath', y='pageviews', rot=70, title='Top 10 Viewed Pages')\nplt.show()","799b2c86":"query = \"\"\"\n    SELECT\n        product.v2ProductCategory AS product_category,\n        product.v2ProductName AS product_name,\n        product.productSKU AS product_sku,\n        product.productPrice\/1e6 AS product_price,\n        product.productQuantity AS product_quantity,\n        product.productRevenue\/1e6 AS product_revenue,\n        totals.totalTransactionRevenue\/1e6 AS total_revenue\n    FROM\n      `bigquery-public-data.google_analytics_sample.ga_sessions_*`,\n      UNNEST(hits) AS hits,\n      UNNEST(hits.product) AS product\n    WHERE\n        _TABLE_SUFFIX BETWEEN '20161001' AND '20161230'\n        AND productRevenue IS NOT NULL\n\"\"\"\nsafe_query_job = client.query(query)\ndf6 = safe_query_job.to_dataframe()\ndf6.head()","dd2e1775":"df6['product_category'].unique()\ndf6 = df6.replace(['${productitem.product.origCatName}'], 'Miscellaneous')\n\npivot = pd.pivot_table(df6, index=['product_category'], values=['product_revenue', 'product_quantity'], aggfunc=np.sum).sort_values(by='product_revenue', ascending=False)\npivot.plot(kind='bar')","afb5f715":"query = \"\"\"\n    SELECT\n        hits.eCommerceAction.action_type AS actions,\n        COUNT(fullVisitorId) AS total_hits\n    FROM\n      `bigquery-public-data.google_analytics_sample.ga_sessions_*`,\n      UNNEST(hits) AS hits,\n      UNNEST(hits.product) AS product\n    WHERE\n        _TABLE_SUFFIX BETWEEN '20161001' AND '20161230'\n    AND\n        (hits.ecommerceaction.action_type != '0' AND hits.ecommerceaction.action_type != '4' AND hits.ecommerceaction.action_type != '3')\n    GROUP BY \n        1\n    ORDER BY 1\n\"\"\"\nsafe_query_job = client.query(query)\ndf7 = safe_query_job.to_dataframe()\ndf7.head()","35b3e271":"df7['actions'] = df7['actions'].astype(str)\ndf7['actions'] = df7['actions'].replace(['0','1','2','3','4','5','6'],['Unknown','Click through of product lists','Product detail views','Add product(s) to cart','Remove products from cart',\n                                'Check out','Completed purchase'])","b75ef549":"fig = go.Figure(go.Funnel(y = df7['actions'],x = df7['total_hits'],textposition = 'inside',textinfo = 'value+percent initial'))\nfig.update_layout(title_text = 'Shopping Cart Abandonment')\nfig.show()","31c6d270":"query = \"\"\"\n    SELECT geoNetwork AS place\n     FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`\n\"\"\"\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nq_job = client.query(query, job_config=safe_config)\n\ndf8 = q_job.to_dataframe()\n\ncontinent_lst = []\nfor x in df8['place']:\n    x = x['continent']\n    continent_lst.append(x)\ndf8['continents'] = continent_lst\n\ncontinent_count = {'Americas': 0, 'Asia': 0, 'Europe': 0, 'Oceania': 0, 'Africa': 0}\nfor continent in df8['continents']:\n    if continent == 'Americas':\n        continent_count['Americas'] += 1\n    if continent == 'Asia':\n        continent_count['Asia'] += 1\n    if continent == 'Europe':\n        continent_count['Europe'] += 1\n    if continent == 'Oceania':\n        continent_count['Oceania'] += 1\n    if continent == 'Africa':\n        continent_count['Africa'] += 1\n","9df76d39":"labels = continent_count.keys()\ndata = continent_count.values()\nexplode = (0.05, 0, 0,0,0)\n\nplt.figure(figsize=(5,5))\nplt.pie(data, labels=labels, explode=explode, autopct='%1.1f%%', startangle=55)\nplt.title('Visits per Continent')\nplt.axis('equal') \n\nplt.show()","af612561":"query = \"\"\"\n     SELECT trafficSource.source AS source, COUNT(trafficSource) as counts\n     FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`\n     GROUP BY source\n     HAVING counts >= 10\n     ORDER BY counts DESC\n\"\"\"\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nquery_job = client.query(query, job_config=safe_config)\n\ndf8 = query_job.to_dataframe()\n\nprint(df8)","83f88ff9":"category_names = df8['source']\nresults = {'counts': df8['counts']}\n\ndef survey(results, category_names):\n    labels = list(results.keys())\n    data = np.array(list(results.values()))\n    data_cum = data.cumsum(axis=1)\n    category_colors = plt.get_cmap('RdYlGn')(\n        np.linspace(0.15, 0.85, data.shape[1]))\n\n    fig, ax = plt.subplots(figsize=(13, 2.5))\n    ax.invert_yaxis()\n    ax.xaxis.set_visible(False)\n    ax.set_xlim(0, np.sum(data, axis=1).max())\n\n    for i, (colname, color) in enumerate(zip(category_names, category_colors)):\n        widths = data[:, i]\n        starts = data_cum[:, i] - widths\n        ax.barh(labels, widths, left=starts, height=0.5,\n                label=colname, color=color)\n        xcenters = starts + widths \/ 2\n\n    ax.legend(ncol=len(category_names), bbox_to_anchor=(0, 1),\n              loc='lower left', fontsize='large')\n\n    return fig, ax\n\n\nsurvey(results, category_names)\nplt.show()","0226a86d":"from time import time\n\ndef show_amount_of_data_scanned(query):\n    dry_run_config = bigquery.QueryJobConfig(dry_run=True)\n    query_job = client.query(query, job_config=dry_run_config)\n    print('Data processed: {} GB'.format(round(query_job.total_bytes_processed \/ 10**9, 3)))\n    \ndef show_time_to_run(query):\n    time_config = bigquery.QueryJobConfig(use_query_cache=False)\n    start = time()\n    query_result = client.query(query, job_config=time_config).result()\n    end = time()\n    print('Time to run: {} seconds'.format(round(end-start, 3)))\n","89ffabce":"query = \"\"\"\n     SELECT date, august.device.deviceCategory AS device, SUM(august.totals.visits) AS visits\n     FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801` AS august\n     GROUP BY date, device\n     UNION ALL\n     SELECT date, july.device.deviceCategory as device, SUM(july.totals.visits) as visits\n     FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170701` as july\n     GROUP BY date, device\n     UNION ALL\n     SELECT date, june.device.deviceCategory as device, SUM(june.totals.visits) as visits\n     FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170601` as june\n     GROUP BY date, device\n     UNION ALL\n     SELECT date, may.device.deviceCategory as device, SUM(may.totals.visits) as visits\n     FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170501` as may\n     GROUP BY date, device\n     UNION ALL\n     SELECT date, april.device.deviceCategory as device, SUM(april.totals.visits) as visits\n     FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170401` as april\n     GROUP BY date, device\n     ORDER BY date, device\n     \"\"\"\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nquery_job = client.query(query, job_config=safe_config)\n\ndf9 = query_job.to_dataframe()\n\nprint(df9)\n\nshow_amount_of_data_scanned(query)\nshow_time_to_run(query)\n","399f98dc":"desktop = df9['visits'][0::3]\nmobile = df9['visits'][1::3]\ntablet = df9['visits'][2::3]\n\nx = ['April', 'May', 'June', 'July', 'August']\n\ny = np.vstack([tablet, mobile, desktop])\n\nlabels = ['Tablet', 'Mobile', 'Desktop']\n\nplt.figure(figsize=(10,7))\nplt.stackplot(x, tablet, mobile, desktop, labels=labels)\nplt.title('Monthly Device Visits (2017)')\nplt.ylabel('Visits')\nplt.xlabel('Month')\nplt.legend(loc='upper left')\nplt.show()","bd52cf9a":"### Visits per Continent","54c00cab":"### User Behavior On Google Merchandise","ff6f8f1f":"### Most visited pages on site ?","5f570700":"## Top channels sending traffic to GM","fe5e28e5":"#### Inference : \n\nDuring 2016Q4, the Google merchendise store had over 3000 visits, almost 93,000 pageviews and earned $ 386,200 in revenue.","ff1e0a3e":"### Inference:\n\nDecember generated over $ 153,000 in revenue and garned almost 1400 visits to the Google Merchandise store. The revenue generated in Dec accounted for 40% of Q4 sales, indicating a holiday surge that is typically seen in retail. ","0c87d5b9":"### Shopping Cart Abandonment"}}