{"cell_type":{"2b49023b":"code","4602cb3e":"code","376d35e5":"code","67a9fb3f":"code","deec8199":"code","937b0fa1":"code","0541ee88":"code","af559437":"code","c2da946f":"code","069bee40":"code","85d2c853":"code","244877cd":"code","df7436ea":"code","9cfdecc9":"code","d80dc570":"code","98eb8d47":"code","7a5544ed":"code","6959f4df":"code","8919674b":"code","bf4200f4":"code","60920006":"code","b683f8c0":"code","0f9bfb78":"code","07e55575":"code","1b779038":"code","c7ce1238":"code","c9415428":"code","91ea4d56":"code","5647bb84":"code","3a43ac10":"code","471e1451":"code","3a45c8d5":"code","2237c7e0":"code","0c79659a":"code","2ca0c33e":"code","2f5a2f0c":"code","e516272c":"code","c0c40a7e":"code","1a2bbf1f":"code","134b0007":"code","4587d156":"code","8470b993":"code","a7ac8310":"code","81c32048":"code","b6982a6f":"code","a6488e60":"markdown","07e3ba7c":"markdown","061691c4":"markdown","37988234":"markdown","2768eb8b":"markdown","11a0de24":"markdown","1fd7e821":"markdown","c56fc570":"markdown","d19adc1e":"markdown","b506776f":"markdown","6179f7ad":"markdown","78360489":"markdown","ad798dee":"markdown","17e0ecf6":"markdown","4df7b056":"markdown","36fb5b7b":"markdown","0157dc62":"markdown","7c7e4515":"markdown","0b4f3658":"markdown","16a03142":"markdown"},"source":{"2b49023b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4602cb3e":"FILEPATH = '\/kaggle\/input\/data-analyst-jobs\/DataAnalyst.csv'","376d35e5":"df = pd.read_csv(FILEPATH)","67a9fb3f":"df.describe()","deec8199":"df.info()","937b0fa1":"df.head()","0541ee88":"import missingno as miss","af559437":"miss.matrix(df)","c2da946f":"miss.dendrogram(df)","069bee40":"miss.bar(df)","85d2c853":"df.isnull().sum()","244877cd":"df.isnull().sum().sum()","df7436ea":"df.columns","9cfdecc9":"# as `Unnamed: 0` doesn't do anything, re can remove them.\ndf = df.drop(['Unnamed: 0'], axis = 1)","d80dc570":"# Old company\ndf['Founded'].min()","98eb8d47":"df['Founded'].drop_duplicates().nsmallest(5).iloc[-1]","7a5544ed":"df['Founded'].drop_duplicates().nsmallest(10)","6959f4df":"df['Founded'].max()","8919674b":"# New company\ndf['Founded'].drop_duplicates().nlargest(10)","bf4200f4":"# We can remove the company name as it is trivial\ndf.dropna(subset = [\"Company Name\"], inplace=True)","60920006":"df_companies = df['Company Name']","b683f8c0":"df_companies","0f9bfb78":"# remove the rating `\\n3.2`\ndef clean_company_name(company_name):\n    \n    if('\\n' not in company_name):\n        return company_name\n    \n    company_name = company_name[0: company_name.index('\\n')]\n    \n    return company_name","07e55575":"df['Company Name'] = df['Company Name'].apply(clean_company_name)","1b779038":"df['Size'].unique()","c7ce1238":"df['Type of ownership'].unique()","c9415428":"# replace Type of ownership -1 to Unknown as -1 doesn't change anything\ndf = df.replace({'Type of ownership': '-1'}, {'Type of ownership': 'Unknown'})","91ea4d56":"# How many companies are here\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef show_simple_bar_plot(col):\n\n    ax = sns.barplot(\n        x = df[col].value_counts().keys(), \n        y = df[col].value_counts().values\n    )\n    ax.set_xticklabels(ax.get_xticklabels(), rotation = 90)\n    plt.show()","5647bb84":"show_simple_bar_plot('Type of ownership')","3a43ac10":"# replace Size -1 to Unknown as -1 doesn't change anything\ndf = df.replace({'Size': '-1'}, {'Size': 'Unknown'})","471e1451":"show_simple_bar_plot('Size')","3a45c8d5":"# clean up salary column\ndef clean_salary(salary):\n    \n    if('(' not in salary):\n        return salary\n    \n    salary = salary[0: salary.index('(')]\n    \n    return salary","2237c7e0":"df['Salary Estimate'] = df['Salary Estimate'].apply(clean_salary)","0c79659a":"import re\n\ndef get_salary_min(salary):\n    \n    salary_parts = salary.split('\u2212')\n    \n    min_salary_part = salary_parts[0].strip()\n    \n    min_salary = int(re.search(r'\\d+', min_salary_part).group())\n    \n    return min_salary","2ca0c33e":"def get_salary_max(salary):\n    \n    salary_parts = salary.split('-')\n    \n#     print(salary_parts)\n    \n    max_salary_part = salary_parts[1].strip()\n    \n    max_salary = int(re.search(r'\\d+', max_salary_part).group())\n    \n    return max_salary","2f5a2f0c":"df['Salary Min'] = df['Salary Estimate'].apply(get_salary_min)\ndf['Salary Max'] = df['Salary Estimate'].apply(get_salary_max)","e516272c":"# Top 5 salaries\ndf['Salary Max'].drop_duplicates().nlargest(10)","c0c40a7e":"# Leasst 5 salaries\ndf['Salary Min'].drop_duplicates().nsmallest(10)","1a2bbf1f":"# Easy apply fix\ndf['Easy Apply'].unique()","134b0007":"df = df.replace({'Easy Apply': 'True'}, {'Easy Apply': 1})\ndf = df.replace({'Easy Apply': '-1'}, {'Easy Apply': 0})","4587d156":"# show top industries for min, max salary\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\ndf_ownership = df.groupby('Location')[['Salary Max','Salary Min']].mean().sort_values(['Salary Max','Salary Min'], ascending = True).head(20)\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x = df_ownership.index, y = df_ownership['Salary Min'], name = 'Min Salary', marker = dict(color = 'green')))\nfig.add_trace(go.Bar(x = df_ownership.index, y = df_ownership['Salary Max'], name = 'Max Salary', marker = dict(color = 'orange')))\n\nfig.update_layout(title = 'Top Industries and theri Salary Range', barmode = 'stack')\n\nfig.show()","8470b993":"fig = px.scatter(df, x = \"Salary Min\", y = \"Salary Max\",\n                 color = \"Salary Max\", color_continuous_scale = 'Inferno')\n\nfig.show()","a7ac8310":"df_salary_min_max = df[['Salary Max','Salary Min']]\n# df_salary_min_max\n\n\nfig = px.histogram(df_salary_min_max, x = \"Salary Min\")\nfig.show()","81c32048":"job_desc = ', '.join(df['Job Description'])","b6982a6f":"# Make a word cloud out of Job description\n\nfrom wordcloud import WordCloud, STOPWORDS\nfrom PIL import Image\n\nstopwords = set(STOPWORDS)\n\ndef transform_format(val):\n    if val == 0:\n        return 255\n    else:\n        return val\n\nmask_image = np.array(Image.open(\"..\/input\/pictures2\/man.png\"))\n\ntransformed_mask_image = np.ndarray((mask_image.shape[0], mask_image.shape[1]), np.int32)\n\nfor i in range(len(mask_image)):\n    transformed_mask_image[i] = list(map(transform_format, mask_image[i]))\n\nwc = WordCloud(background_color = \"white\", max_words = 1000, mask = transformed_mask_image,\n               stopwords = stopwords, contour_width = 0, contour_color = 'black')\n\nwc.generate(job_desc)\n\n# show\nplt.figure(figsize = [30, 20])\nplt.imshow(wc, interpolation = 'bilinear')\nplt.axis(\"off\")\nplt.show()","a6488e60":"**Observation:**\n\n* We can see that `Company - Private` has more jobs.\n* Not sure what to do with `Unknown`. Let's keep it as it is for now. We will fix them later.\n* Self-employed is the least in the jobs count.","07e3ba7c":"**Observation:**\n\n* The above diagram shows the salary range very clearly.\n* There are some jobs which you get paid only 24K (wondering who would apply for thos jobs?).\n* Maximum salary is 190 which is very alluring.","061691c4":"**Observation:**\n\n* Small to medium companies (51 - 200 employees) are more likely to hire data analysts. \n* Big companies (10000+ employees) are in the top second to hire Data analysts.","37988234":"**Observation:**\n\n* The data is almost not null. We can see only one entry missing in `Company Name`","2768eb8b":"As the company name comes with rating with newline, we can remove them. ","11a0de24":"We will remove `Unnamed: 0` as it is not significant.","1fd7e821":"**Final Notes:**\n\nI am adding things still. You can come back and check for more information.\n\nAlso, if you **like my notebook**, <font style=\"color:blue;size:14px;\">please upvote it<\/font> as it will motivate me to come up with better approach in the upcoming notebooks.","c56fc570":"**Observation:**\n\n* Newark tops the list with the maximum salary range followed by Daly city California.\n* Stanford and San Francisco - California has the least in the salary category.","d19adc1e":"### Understanding Founded column","b506776f":"## Data Extraction","6179f7ad":"<font color=\"blue\" size=+1.5><b>Check out my other kernels<\/b><\/font>\n\n<a href=\"https:\/\/www.kaggle.com\/rajacsp\/estonia-disaster-simple-visualization-wip\" class=\"btn btn-info\" style=\"color:white;\">Estonia Disaster Simple Visualization<\/a><br><br>\n\n<a href=\"https:\/\/www.kaggle.com\/rajacsp\/netflix-visualization-plotly-plots-treemap\" class=\"btn btn-info\" style=\"color:white;\">Netflix Visualization - Plotly - Plots - Treemap<\/a><br><br>\n\n<a href=\"https:\/\/www.kaggle.com\/rajacsp\/pandas-dundas-challenge-100\" class=\"btn btn-info\" style=\"color:white;\">Pandas 100+ exercises collection<\/a><br><br>\n\n<a href=\"https:\/\/www.kaggle.com\/rajacsp\/prediction-with-various-algorithms\" class=\"btn btn-info\" style=\"color:white;\">Credit Card Fraud - Prediction with various algorithms<\/a><br><br>\n\n<a href=\"https:\/\/www.kaggle.com\/rajacsp\/sms-spam-or-not-base\" class=\"btn btn-info\" style=\"color:white;\">SMS Spam or Not Prediction<\/a><br><br>\n\n<a href=\"https:\/\/www.kaggle.com\/rajacsp\/linear-equations-real-time\" class=\"btn btn-info\" style=\"color:white;\">Linear Equations - Real Time<\/a><br><br>","78360489":"## Null Visualization\n\nLet's do the visualization on the null values to understand our data better. I am using `missingno` for the null visualization.","ad798dee":"## Job Desc - Word Cloud\n\nLet's create a word cloud out of job description in the dataset.","17e0ecf6":"## Plotly Time\n\nLet's play around with Plotly to visualize things better.","4df7b056":"### Clean up Company Name","36fb5b7b":"**Observation:**\n\n* The word cloud turned out nice!\n* Every one need `Experience` in the job application huh? Don't they accept Kaggle notebook experience?","0157dc62":"## Plot Time","7c7e4515":"### Clean Easy Apply Column","0b4f3658":"As we need the salary minimum and maximum to analyze and visualize better, we are going to create those 2 columns from the `Salary Estimation`.","16a03142":"### Salary Column Cleanup"}}