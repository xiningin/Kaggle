{"cell_type":{"5dea38f2":"code","3283ba58":"code","18363377":"code","9f639c62":"code","dbc75fc4":"code","f111aa94":"code","66256096":"code","3ebb960b":"code","9bd47efd":"code","b54b1317":"code","f7268815":"code","2490ce73":"code","23134946":"code","6e390b6f":"code","ac67cafc":"code","d896335e":"code","8f936fee":"code","4db013df":"code","87254581":"code","d04d5970":"code","99e0b178":"code","0f90088f":"code","d1fb7ca2":"code","faa66096":"code","45732469":"code","337011c0":"markdown","a5dd6be1":"markdown","4710a522":"markdown","8b6b8109":"markdown","cf595bc8":"markdown","f036d4c7":"markdown","df05e815":"markdown","f5998e8c":"markdown","fe4e855d":"markdown","336ace3e":"markdown","3697f122":"markdown","46e0b9e9":"markdown","bec18c53":"markdown","acc8eb46":"markdown","3a07c39e":"markdown","d6c58b81":"markdown"},"source":{"5dea38f2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport fuzzywuzzy\nfrom fuzzywuzzy import process\nimport chardet\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3283ba58":"# look at the first 100000 bytes to guess the character encoding\nwith open(\"\/kaggle\/input\/pakistansuicideattacks\/PakistanSuicideAttacks Ver 11 (30-November-2017).csv\", \"rb\") as rawdata:\n    result = chardet.detect(rawdata.read(100000))\n    \n# check what the chaacter encoding might be\nprint(result)","18363377":"df = pd.read_csv(\"\/kaggle\/input\/pakistansuicideattacks\/PakistanSuicideAttacks Ver 11 (30-November-2017).csv\", encoding = \"Windows-1252\")","9f639c62":"df.columns","dbc75fc4":"df.head()","f111aa94":"# get all the unique values in the 'City' column\ncities = df['City'].unique()\n\n# sort then in alphabetically and then take a closer look\ncities.sort()\ncities","66256096":"df['City'].nunique()","3ebb960b":"# convert to lower case\ndf['City'] = df['City'].str.lower()\n\n# removing trailing white spaces\ndf['City'] = df['City'].str.strip()","9bd47efd":"# get all the unique values in the 'City' column after converting in lower case and removing white spaces\ncities = df['City'].unique()\n\n# sort then in alphabetically and then take a closer look\ncities.sort()\ncities","b54b1317":"df['City'].nunique()","f7268815":"# get all the unique values in the `Province` column\nprovinces = df['Province'].unique()\n\n# sort them alphabetically and then take a closer look\nprovinces.sort()\nprovinces","2490ce73":"df['Province'].nunique()","23134946":"# convert to lower case\ndf['Province']  = df['Province'].str.lower()\n\n# removing trailing white spaces\ndf['Province']  = df['Province'].str.strip()","6e390b6f":"# get all the unique values in the `Province` column after converting in lower case and removing white spaces\nprovinces = df['Province'].unique()\n\n# sort them alphabetically and then take a closer look\nprovinces.sort()\nprovinces","ac67cafc":"df['Province'].nunique()","d896335e":"# get all the unique values in the 'City' column\ncities = df['City'].unique()\n\n# sort then in alphabetically and then take a closer look\ncities.sort()\ncities","8f936fee":"# get the top ten closest matches to \"d.i khan\"\nmatches = fuzzywuzzy.process.extract(\"d.i khan\", cities, limit = 10, scorer = fuzzywuzzy.fuzz.token_sort_ratio)\n\n# take a look at them\nmatches","4db013df":"# function to replace rows in the provided column of the provided dataframe that match the provided string above the provided ratio with the provided string\ndef replace_matches_in_column(df, column, string_to_match, min_ratio = 90):\n    \n    # get the list of unique strings\n    strings = df[column].unique()\n    \n    # get the top 10 closest matches to our input string\n    matches = fuzzywuzzy.process.extract(string_to_match, strings, limit = 10, scorer = fuzzywuzzy.fuzz.token_sort_ratio)\n    \n    # only get matches with a ratio > 90\n    close_matches = [matches[0] for matches in matches if matches[1] >= min_ratio]\n    \n    # get the rows of all the close matches in our dataframe\n    rows_with_matches = df[column].isin(close_matches)\n    \n    # replace all rows with close matches with the input matches\n    df.loc[rows_with_matches, column] = string_to_match\n    \n    # let us know the function's done\n    print(\"All done!\")","87254581":"# use the function we just wrote to replace close matches to \"d.i khan\" with \"d.i khan\"\nreplace_matches_in_column(df = df, column = \"City\", string_to_match = \"d.i khan\")","d04d5970":"# get all the unique values in the 'City' column\ncities = df['City'].unique()\n\n# sort them alphabetically and then take a closer look\ncities.sort()\ncities","99e0b178":"# It looks like 'kuram agency' and 'kurram agency' should be the same city.\nreplace_matches_in_column(df = df, column = \"City\", string_to_match = 'kuram agency')","0f90088f":"# get all the unique values in the 'City' column\ncities = df['City'].unique()\n\n# sort them alphabetically and then take a closer look\ncities.sort()\ncities","d1fb7ca2":"# province column \n\n# get all the unique values in the `Province` column after converting in lower case and removing white spaces\nprovinces = df['Province'].unique()\n\n# sort them alphabetically and then take a closer look\nprovinces.sort()\nprovinces","faa66096":"replace_matches_in_column(df = df, column = \"Province\", string_to_match = \"baluchistan\")","45732469":"# get all the unique values in the `Province` column after converting in lower case and removing white spaces\nprovinces = df['Province'].unique()\n\n# sort them alphabetically and then take a closer look\nprovinces.sort()\nprovinces","337011c0":"It does look like there are some remaining inconsistencies: 'd. i khan' and 'd.i khan' should probably be the same. (I looked it up and 'd.g khan' is a seperate city, so I shouldn't combine those.)\n\nI'm going to use the [fuzzywuzzy](https:\/\/github.com\/seatgeek\/fuzzywuzzy) package to help identify which string are closest to each other. This dataset is small enough that we could probably could correct errors by hand, but that approach doesn't scale well. (Would you want to correct a thousand errors by hand? What about ten thousand? Automating things as early as possible is generally a good idea. Plus, it\u2019s fun! :)\n\n**Fuzzy matching :** The process of automatically finding text strings that are very similar to the target string. In general, a string is considered \"closer\" to another one the fewer characters you'd need to change if you were transforming one string into another. So \"apple\" and \"snapple\" are two changes away from each other (add \"s\" and \"n\") while \"in\" and \"on\" and one change away (rplace \"i\" with \"o\"). You won't always be able to rely on fuzzy matching 100%, but it will usually end up saving you at least a little time.\n\nFuzzywuzzy returns a ratio given two strings. The closer the ratio is to 100, the smaller the edit distance between the two strings. Here, we're going to get the ten strings from our list of cities that have the closest distance to \"d.i khan\".","a5dd6be1":"## Use fuzzy matching to correct inconsistent data entry<a id=\"3\"><\/a>\nAlright, let's take another look at the city column and see if there's any more data cleaning we need to do.","4710a522":"And now let's ckeck the unique values in our `City` column again and make sure we've tidied up `d.i khan` correctly.","8b6b8109":"Just looking at this, I can see some problems due to inconsistent data entry: 'Lahore' and 'Lahore ', for example, or 'Lakki Marwat' and 'Lakki marwat'.\n\nThe first thing I'm going to do is make everything lower case (I can change it back at the end if I like) and remove any white spaces at the beginning and end of cells. Inconsistencies in capitalizations and trailing white spaces are very common in text data and you can fix a good 80% of your text data entry inconsistencies by doing this.","cf595bc8":"## Getting our environment setup<a id=\"1\"><\/a>","f036d4c7":"Now we have 67 unique values in `City` column. We have eliminated 26 duplicate\/inconsistant values.\n\nNow we'll take a look at all the unique values in the `Province` column.","df05e815":"Inconsistent data entry: 'Balochistan' and 'Baluchistan', 'FATA' and 'Fata'.","f5998e8c":"# 5 days of Data Cleaning challenge.\n\n## Day 5 : Inconsistant data-entry\n\nHere's what we're going to do today:\n\n* [Get our environment set up](#1)\n* [Do some preliminary text pre-processing](#2)\n* [Use fuzzy matching to correct inconsistent data entry](#3)\n\nLet's get started!\n\n[Data for Pakistan Suicide Bombing Attack](https:\/\/www.kaggle.com\/zusmani\/pakistansuicideattacks)","fe4e855d":"Hurryyy! we have done the replacements. :D","336ace3e":"For this exercise, I'm interested in cleaning up the \"City\" column to make sure there's no data entry inconsistencies in it. We could go through and check each row by hand, of course, and hand-correct inconsistencies when we find them. There's a more efficient way to do this though!","3697f122":"`balochistan` and `baluchistan` looks similar. Let's replace all rows in our Provicnce column that have a ratio of > 90 with `baluchistan`.","46e0b9e9":"When I tried to read in the PakistanSuicideAttacks Ver 11 (30-November-2017).csvfile the first time, I got a character encoding error, so I'm going to quickly check out what the encoding should be...","bec18c53":"We can see that two of the items in the cities are very close to \"d.i khan\": \"d. i khan\" and \"d.i khan\". We can also see the \"d.g khan\", which is a seperate city, has a ratio of 88. Since we don't want to replace \"d.g khan\" with \"d.i khan\", let's replace all rows in our City column that have a ratio of > 90 with \"d. i khan\".\n\nTo do this, I'm going to write a function. (It's a good idea to write a general purpose function you can reuse if you think you might have to do a specific task more than once or twice. This keeps you from having to copy and paste code too often, which saves time and can help prevent mistakes.)","acc8eb46":"Let's again check the city column for 'kuram agency'","3a07c39e":"## Do some preliminary text preprocessing<a id=\"2\"><\/a>\n Take a moment here to look at the data and get familiar with it. :)","d6c58b81":"Now that we have a function, we can put  it into the test!"}}