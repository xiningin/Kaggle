{"cell_type":{"f1cb1261":"code","5663a68e":"code","8868949a":"code","7c363299":"code","6a5e22eb":"code","649b3efa":"code","990cb1fc":"code","d2a7b2f7":"code","6879a156":"code","a53a6ec0":"code","17f35dce":"code","ca1ede6b":"code","7b81a195":"code","734708a0":"code","5648d926":"code","732cfce8":"code","0b4ec832":"code","ae53e23a":"code","58a0ae34":"code","ed586b4b":"code","a303a6bb":"code","a14aeece":"code","24951ffd":"code","6f7a815e":"code","8caf901c":"code","35e897be":"code","0b03e7b0":"code","5a45f6af":"code","e0ef376f":"code","677a8c3f":"code","9ef705ce":"code","bf68d2f5":"code","6eee255e":"code","8b66193d":"code","90a78b52":"code","b9fc714a":"code","cc5f35c7":"code","9f53c24b":"code","72b7b526":"code","e0ae12d9":"code","8d1a1bfd":"code","306c021b":"code","e9d56933":"code","1a6d2c50":"code","0c9185ed":"code","e17e7d05":"code","4d3de8e3":"code","56c806fd":"code","8af33d2e":"code","abbfd974":"code","1a844935":"code","16314678":"code","f43ae81e":"code","c2486730":"code","71357103":"code","422b1b9a":"code","7c9ccfc3":"code","ff8fada4":"code","63244e31":"code","efc0aead":"code","f678b3a0":"markdown","24f0b5f7":"markdown","ab4f90a0":"markdown","a6103e88":"markdown","3dabc63e":"markdown","271d1b16":"markdown","19718032":"markdown","96d83d6a":"markdown","8c20986b":"markdown","132a7e33":"markdown","7bc5f58c":"markdown","7b7f507f":"markdown","ffffb503":"markdown","e334ef1f":"markdown","77f4df82":"markdown","b7c33521":"markdown","a6840a54":"markdown","a77c01d2":"markdown","da00988d":"markdown","378aa0de":"markdown","589aabee":"markdown","74c7bf91":"markdown","b4967cc3":"markdown","d82b5009":"markdown","7bd69336":"markdown","3e2785fb":"markdown","524bc463":"markdown","3dacb0b5":"markdown","db81b362":"markdown","83f5752b":"markdown","3ddcff29":"markdown","cc4fa683":"markdown","06886bc4":"markdown","3804185b":"markdown","0a78ee1a":"markdown","4bf70ffb":"markdown","7e14d4a9":"markdown","f504488c":"markdown","01c80a66":"markdown","102d19b5":"markdown","9514d4fd":"markdown","7f2d9edd":"markdown","6d169dd6":"markdown","4634027e":"markdown","2545cfe8":"markdown","ff27b81c":"markdown","203184a4":"markdown","ca3320d8":"markdown","53827c68":"markdown","ca536ac9":"markdown","a6639011":"markdown","0e7ab8ce":"markdown"},"source":{"f1cb1261":"# \u0433\u0440\u0443\u0437\u0438\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\n\nfrom sklearn.model_selection import train_test_split, learning_curve\nfrom sklearn.metrics import classification_report, f1_score, precision_score, recall_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.pipeline import make_pipeline, Pipeline\n\nfrom catboost import CatBoostClassifier\n\nimport statsmodels.api as sm\nfrom statsmodels.formula.api import ols\n\n%matplotlib inline","5663a68e":"# \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0430\u0445\ndef evaluate_preds(model, X_train, X_test, y_train, y_test):\n    y_train_pred = model.predict(X_train)\n    y_test_pred = model.predict(X_test)\n    def get_classification_report(y_train_true, y_train_pred, y_test_true, y_test_pred):\n        print('TRAIN\\n\\n' + classification_report(y_train_true, y_train_pred))\n        print('TEST\\n\\n' + classification_report(y_test_true, y_test_pred))\n        print('CONFUSION MATRIX\\n')\n        print(pd.crosstab(y_test_true, y_test_pred))\n    get_classification_report(y_train, y_train_pred, y_test, y_test_pred)","8868949a":"# \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\ndef show_feature_importances(feature_names, feature_importances, get_top=None):\n    feature_importances = pd.DataFrame({'feature': feature_names, 'importance': feature_importances})\n    if get_top is not None:\n        feature_importances=feature_importances.sort_values('importance', ascending=False)[:get_top]\n    else:          \n        feature_importances = feature_importances.sort_values('importance', ascending=False)\n    \n       \n    plt.figure(figsize = (20, len(feature_importances) * 0.355))\n    \n    sns.barplot(x='importance', y='feature', data=feature_importances)\n    \n    plt.xlabel('Importance')\n    plt.title('Importance of features')\n    plt.show()\n    ","7c363299":"def show_proba_calibration_plots(y_predicted_probs, y_true_labels):\n    preds_with_true_labels = np.array(list(zip(y_predicted_probs, y_true_labels)))\n\n    thresholds = []\n    precisions = []\n    recalls = []\n    f1_scores = []\n\n    for threshold in np.linspace(0.1, 0.9, 9):\n        thresholds.append(threshold)\n        precisions.append(precision_score(y_true_labels, list(map(int, y_predicted_probs > threshold)), zero_division=1))\n        recalls.append(recall_score(y_true_labels, list(map(int, y_predicted_probs > threshold))))\n        f1_scores.append(f1_score(y_true_labels, list(map(int, y_predicted_probs > threshold))))\n\n    scores_table = pd.DataFrame({'f1':f1_scores,\n                                 'precision':precisions,\n                                 'recall':recalls,\n                                 'probability':thresholds}).sort_values('f1', ascending=False).round(3)\n  \n    figure = plt.figure(figsize = (15, 5))\n\n    plt1 = figure.add_subplot(121)\n    plt1.plot(thresholds, precisions, label='Precision', linewidth=4)\n    plt1.plot(thresholds, recalls, label='Recall', linewidth=4)\n    plt1.plot(thresholds, f1_scores, label='F1', linewidth=4)\n    plt1.set_ylabel('Scores')\n    plt1.set_xlabel('Probability threshold')\n    plt1.set_title('Probabilities threshold calibration')\n    plt1.legend(bbox_to_anchor=(0.25, 0.25))   \n    plt1.table(cellText = scores_table.values,\n               colLabels = scores_table.columns, \n               colLoc = 'center', cellLoc = 'center', loc = 'bottom', bbox = [0, -1.3, 1, 1])\n\n    plt2 = figure.add_subplot(122)\n    plt2.hist(preds_with_true_labels[preds_with_true_labels[:, 1] == 0][:, 0], \n              label='Another class', color='royalblue', alpha=1)\n    plt2.hist(preds_with_true_labels[preds_with_true_labels[:, 1] == 1][:, 0], \n              label='Main class', color='darkcyan', alpha=0.8)\n    plt2.set_ylabel('Number of examples')\n    plt2.set_xlabel('Probabilities')\n    plt2.set_title('Probability histogram')\n    plt2.legend(bbox_to_anchor=(1, 1))\n\n    plt.show()","6a5e22eb":"def show_learning_curve_plot(estimator, X, y, cv=5, n_jobs=-1, train_sizes=np.linspace(.1, 1.0, 5)):\n\n    #Determines cross-validated training and test scores for different training set sizes.\n    train_sizes, train_scores, test_scores = learning_curve(estimator, X, y, \n                                                            cv=cv, \n                                                            scoring='f1',\n                                                            train_sizes=train_sizes, \n                                                            n_jobs=n_jobs)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n\n    plt.figure(figsize=(15,8))\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n             label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n             label=\"Cross-validation score\")\n\n    plt.title(f\"Learning curves ({type(estimator).__name__})\")\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")     \n    plt.legend(loc=\"best\")\n    plt.grid()\n    plt.show()","649b3efa":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443:\ndef show_me_info(df):\n    data=df.copy()\n    mask=data.isnull()\n    missing=mask.sum()\n    missing_percent=mask.mean()*100\n    data_types=data.dtypes\n    unique_values=data.nunique()\n    data=pd.concat([data.count(), missing, missing_percent, data_types, unique_values],\n                   axis=1,\n                   keys=['Total count','Total missing', 'Percent missing', 'Types', 'Unique values']).sort_values(\n        by='Total missing', ascending=False)\n    return data","990cb1fc":"TRAIN_DATASET_PATH = '..\/input\/654pds2courseproject\/course_project_train.csv'\nTEST_DATASET_PATH = '..\/input\/654pds2courseproject\/course_project_test.csv'","d2a7b2f7":"df_train = pd.read_csv(TRAIN_DATASET_PATH)\ndf_test = pd.read_csv(TEST_DATASET_PATH)","6879a156":"show_me_info(df_train)","a53a6ec0":"show_me_info(df_test)","17f35dce":"TARGET_VAR='Credit Default'\ndf_train[TARGET_VAR].value_counts(normalize=True)","ca1ede6b":"cat_feature=df_train.select_dtypes(include='object').columns\nfor name in cat_feature:\n    diff=list(set(df_test[name].unique())^set(df_train[name].unique()))\n    print(f'\u041f\u0440\u0438\u0437\u043d\u0430\u043a: {name: >20}\\t\u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445: {\", \".join(diff[i] for i in range(len(diff))) if len(diff)!=0 else \"NO\": >17}')","7b81a195":"#\u0440\u0438\u0441\u0443\u0435\u0442 \u0434\u043e\u043b\u0433\u043e, \u0440\u0430\u0441\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043a\u043e\u0434\nNUM_FEATURES=['Annual Income','Maximum Open Credit',  'Current Loan Amount', 'Current Credit Balance', 'Monthly Debt', 'Credit Score']\n#sns.pairplot(df_train[NUM_FEATURES+[TARGET_VAR]], hue=TARGET_VAR, dropna=True, diag_kind='hist')\n#plt.show()","734708a0":"class FeatureImputer1:\n    count=0\n    def __init__(self):\n        self.count+=1\n        \n    \n    def fit(self, X, y=None):\n        self.dummy_col=['Home Ownership', 'Term', 'Years in current job_ord', 'Purpose_ord']\n        self.purpose_change='vacation'\n        self.ownership_change='Home Mortgage'\n        self.dct={'unknow':0,\n                  '< 1 year':1,\n                  '1 year':2,\n                  '2 years':3,\n                  '3 years':4,\n                  '4 years':5,\n                  '5 years':6,\n                  '6 years':7,\n                  '7 years':8,\n                  '8 years':9,\n                  '9 years':10,\n                  '10+ years':11}\n        self.dct1={'business loan':0,\n                   'buy a car':1,\n                   'buy house':2,\n                   'debt consolidation':3,\n                   'educational expenses':4,\n                   'home improvements':5,\n                   'major purchase':6,\n                   'medical bills':7,\n                   'moving':8,\n                   'other':9,\n                   'small business':10,\n                   'take a trip':11,\n                   'vacation':12,\n                   'wedding':13}\n        self.drop_col=['Years in current job', 'Purpose']\n        \n        self.mean=int(X['Months since last delinquent'].mean())\n        \n        return self\n    def transform(self, X):\n        X_trans=X.copy()\n        X_trans.loc[X_trans['Purpose']=='renewable energy', 'Purpose']=self.purpose_change # \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 \u0442\u0435\u0441\u0442\u0435\n        X_trans.loc[X_trans['Home Ownership']=='Have Mortgage', 'Home Ownership']=self.ownership_change # \"\u0441\u043b\u0438\u0432\u0430\u0435\u043c\" \u0438\u043f\u043e\u0442\u0435\u0447\u043d\u0438\u043a\u043e\u0432 \u0432\u043c\u0435\u0441\u0442\u0435\n        X_trans['Years in current job'].fillna('unknow', inplace=True) # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043f\u043e \u0441\u0442\u0430\u0436\u0443 \u0440\u0430\u0431\u043e\u0442\u044b\n        X_trans.insert(2,'Years in current job_ord',X_trans['Years in current job'].map(self.dct)) # one-hot \u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0430\u0436\n        X_trans.insert(X_trans.columns.get_loc('Purpose')+1,'Purpose_ord',X_trans['Purpose'].map(self.dct1)) # one-hot \u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0446\u0435\u043b\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u0442\u043e\u0432\u0430\u043d\u0438\u044f\n        X_trans.drop(self.drop_col, axis=1, inplace=True)\n        \n        X_trans.loc[(X_trans['Annual Income'].notna())&(X_trans['Months since last delinquent'].isna()), 'Months since last delinquent']=self.mean # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435\n        \n        X_trans.fillna(0, inplace=True) # \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c 0\n        X_trans=pd.get_dummies(X_trans, columns=self.dummy_col, drop_first=True) # \u0432\u0441\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 dummy-\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c\n\n        return X_trans","5648d926":"train, val = train_test_split(df_train,\n                               test_size=0.2,\n                               shuffle=True,\n                               stratify=df_train[TARGET_VAR],\n                               random_state=12)","732cfce8":"imputer=FeatureImputer1()\ntrain=imputer.fit(train).transform(train)\nval=imputer.transform(val)","0b4ec832":"X_train, y_train, X_val, y_val = train.drop(TARGET_VAR, axis=1), train[TARGET_VAR], val.drop(TARGET_VAR, axis=1), val[TARGET_VAR]","ae53e23a":"%%time\nrfc=RandomForestClassifier(max_depth=4, class_weight={0:1,1:2.55}, random_state=100)\nrfc.fit(X_train, y_train)\nevaluate_preds(rfc, X_train, X_val, y_train, y_val)","58a0ae34":"important_features_top = show_feature_importances(X_train.columns,\n                                                  rfc.feature_importances_, get_top=15)","ed586b4b":"show_learning_curve_plot(rfc, X_train, y_train)","a303a6bb":"y_val_pred=rfc.predict_proba(X_val)\nshow_proba_calibration_plots(y_val_pred[:, 1], y_val)","a14aeece":"sns.heatmap(df_train[NUM_FEATURES+[TARGET_VAR]].corr(), annot=True, linewidths=.5, cmap='coolwarm')\nplt.show()","24951ffd":"sns.regplot(x=df_train['Monthly Debt'], y=df_train['Annual Income'], dropna=True)\nplt.show()","6f7a815e":"dfstat=df_train[[\"Annual Income\",\"Monthly Debt\"]].dropna(axis=0)","8caf901c":"slope, intercept, r_value, p_value, std_err = stats.linregress(dfstat['Monthly Debt'], dfstat['Annual Income'])","35e897be":"\nplt.figure(figsize=(8,8))\n# use line_kws to set line label for legend\nax=sns.regplot(x=df_train['Monthly Debt'], y=df_train['Annual Income'], line_kws={'label':f\"y={slope:.1f}x+{intercept:.1f}\"})\nax.legend()\n\nplt.show()","0b03e7b0":"statmodel=df_train[NUM_FEATURES+[TARGET_VAR]]\ncolumns=statmodel.columns.tolist()\nfor i in range(len(columns)):\n    columns[i]='_'.join(columns[i].split()[j] for j in range(len(columns[i].split())))\nstatmodel.columns=columns","5a45f6af":"model = ols('Annual_Income~Monthly_Debt',data=statmodel).fit()\nmodel.summary()","e0ef376f":"y_pred=model.predict(statmodel)\nfig=plt.figure(figsize=(18,4))\ngs = fig.add_gridspec(1, 4)\nax1 = fig.add_subplot(gs[0, :-1])\nsns.scatterplot(x=y_pred, y=model.resid)\nsns.lineplot(x=y_pred, y=0, color='r', linestyle='dashed')\nax2=fig.add_subplot(gs[0, -1])\nstats.probplot(model.resid, dist=\"norm\", plot=sns.mpl.pyplot) # y-y_pred=model.resid\nplt.show()","677a8c3f":"class FeatureImputer2:\n    \n    def __init__(self):\n        self.bancrupties=None\n        \n    def fit(self, X, y=None):\n        self.bancrupties=0\n        self.purpose_change='vacation'\n        self.ho_change='Home Mortgage'\n        self.cat_features=X.select_dtypes(include='object').columns.tolist()\n        self.dcts=[{'Own Home':0,\n                   'Rent':1,\n                   'Home Mortgage':2                    \n                   },\n                   {'unknow':0,\n                    '< 1 year':1,\n                    '1 year':2,\n                    '2 years':3,\n                    '3 years':4,\n                    '4 years':5,\n                    '5 years':6,\n                    '6 years':7,\n                    '7 years':8,\n                    '8 years':9,\n                    '9 years':10,\n                    '10+ years':11\n                   },\n                   {'business loan':0,\n                    'buy a car':1,\n                    'buy house':2,\n                    'debt consolidation':3,\n                    'educational expenses':4,\n                    'home improvements':5,\n                    'major purchase':6,\n                    'medical bills':7,\n                    'moving':8,\n                    'other':9,\n                    'small business':10,\n                    'take a trip':11,\n                    'vacation':12,\n                    'wedding':13\n                   },\n                   {'Short Term':0,\n                    'Long Term':1\n                   }]\n        return self\n        \n        \n    def transform(self,X):\n        X_trans=X.copy()\n        X_trans['Bankruptcies'].fillna(self.bancrupties, inplace=True) # \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043f\u043e 'Bankruptcies'\u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c 0\n        X_trans['Annual Income'].fillna(X_trans['Monthly Debt']*41.5+606100, inplace=True) #\u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043f\u043e 'Annual Income'\u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438\n        X_trans.loc[X_trans['Purpose']=='renewable energy', 'Purpose']=self.purpose_change # \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 \u0442\u0435\u0441\u0442\u0435\n        X_trans.loc[X_trans['Home Ownership']=='Have Mortgage', 'Home Ownership']=self.ho_change # \"\u0441\u043b\u0438\u0432\u0430\u0435\u043c\" \u0438\u043f\u043e\u0442\u0435\u0447\u043d\u0438\u043a\u043e\u0432 \u0432\u043c\u0435\u0441\u0442\u0435\n        X_trans['Years in current job'].fillna('unknow', inplace=True) # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043f\u043e \u0441\u0442\u0430\u0436\u0443 \u0440\u0430\u0431\u043e\u0442\u044b\n        self.cat_feat=[]\n        for num, column in enumerate(self.cat_features): # label-\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n            X_trans.insert(X_trans.columns.get_loc(column)+1,column+'_ord',X_trans[column].map(self.dcts[num]))\n            self.cat_feat.append(column+'_ord')\n            X_trans=X_trans.drop(column, axis=1)\n        X_trans['Current Loan Amount_outline']=0 # \u043e\u0442\u043c\u0435\u0447\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u043e 'Current Loan Amount'\n        X_trans.loc[X_trans['Current Loan Amount']>90000000, 'Current Loan Amount_outline']=1\n        X_trans['Credit score_outline']=0 # \u043e\u0442\u043c\u0435\u0447\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u043e 'Credit Score'\n        X_trans.loc[X_trans['Credit Score']>5000, 'Credit score_outline']=1\n        X_trans.loc[X_trans['Credit Score'].isna(), 'Credit Score']=0\n        X_trans['Months since last delinquent_outline']=0 # \u043e\u0442\u043c\u0435\u0447\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b(\u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438) \u043f\u043e 'Months since last delinquent'\n        X_trans.loc[df_train['Months since last delinquent'].isna(), 'Months since last delinquent_outline']=1\n        X_trans['Months since last delinquent'].fillna(-1, inplace=True)\n        return X_trans","9ef705ce":"train, val = train_test_split(df_train,\n                               test_size=0.2,\n                               shuffle=True,\n                               stratify=df_train[TARGET_VAR],\n                               random_state=12)","bf68d2f5":"imputer=FeatureImputer2()\ntrain=imputer.fit(train).transform(train)\nval=imputer.transform(val)","6eee255e":"X_train, y_train, X_val, y_val = train.drop(TARGET_VAR, axis=1), train[TARGET_VAR], val.drop(TARGET_VAR, axis=1), val[TARGET_VAR]","8b66193d":"categ=['Home Ownership_ord', 'Years in current job_ord', 'Purpose_ord', 'Term_ord']","90a78b52":"frozen_params1 = {'silent': True,\n                 'random_state': 42,\n                 'depth': 4, \n                 'iterations': 550, \n                 'learning_rate': 0.2,\n                 'eval_metric': 'F1',\n                 'class_weights': [1, 2.55],\n                 'early_stopping_rounds': 500,\n                 'cat_features': categ\n                }","b9fc714a":"cat_model = CatBoostClassifier(**frozen_params1)\n\ncat_model.fit(X_train, y_train, categ, eval_set=(X_val, y_val))","cc5f35c7":"evaluate_preds(cat_model, X_train, X_val, y_train, y_val)","9f53c24b":"important_features_top = show_feature_importances(X_train.columns,\n                                                  cat_model.feature_importances_)","72b7b526":"show_learning_curve_plot(cat_model, X_train, y_train)","e0ae12d9":"y_val_pred=cat_model.predict_proba(X_val)","8d1a1bfd":"show_proba_calibration_plots(y_val_pred[:, 1], y_val)","306c021b":"df_train = pd.read_csv(TRAIN_DATASET_PATH)\ndf_test = pd.read_csv(TEST_DATASET_PATH)","e9d56933":"class FeatureImputer3:\n    \n    def __init__(self):\n        self.bancrupties=None\n        \n    def fit(self, X, y=None):\n        self.bancrupties=0\n        self.purpose_change='vacation'\n        self.ho_change='Home Mortgage'\n        self.cat_features=X.select_dtypes(include='object').columns.tolist()\n        self.dcts=[{'Own Home':0,\n                   'Rent':1,\n                   'Home Mortgage':2                    \n                   },\n                   {'unknow':0,\n                    '< 1 year':1,\n                    '1 year':2,\n                    '2 years':3,\n                    '3 years':4,\n                    '4 years':5,\n                    '5 years':6,\n                    '6 years':7,\n                    '7 years':8,\n                    '8 years':9,\n                    '9 years':10,\n                    '10+ years':11\n                   },\n                   {'business loan':0,\n                    'buy a car':1,\n                    'buy house':2,\n                    'debt consolidation':3,\n                    'educational expenses':4,\n                    'home improvements':5,\n                    'major purchase':6,\n                    'medical bills':7,\n                    'moving':8,\n                    'other':9,\n                    'small business':10,\n                    'take a trip':11,\n                    'vacation':12,\n                    'wedding':13\n                   },\n                   {'Short Term':0,\n                    'Long Term':1\n                   }]\n        return self\n        \n        \n    def transform(self,X):\n        X_trans=X.copy()\n        X_trans['Bankruptcies'].fillna(self.bancrupties, inplace=True)\n        X_trans['Annual Income'].fillna(X_trans['Monthly Debt']*41.5+606100, inplace=True)\n        X_trans.loc[X_trans['Purpose']=='renewable energy', 'Purpose']=self.purpose_change\n        X_trans.loc[X_trans['Home Ownership']=='Have Mortgage', 'Home Ownership']=self.ho_change\n        X_trans['Years in current job'].fillna('unknow', inplace=True)\n        new_cat_col=[]\n        for num, column in enumerate(self.cat_features):\n            X_trans.insert(X_trans.columns.get_loc(column)+1,column+'_ord',X_trans[column].map(self.dcts[num]))\n            new_cat_col.append(column+'_ord')\n            X_trans=X_trans.drop(column, axis=1)\n        X_trans['Current Loan Amount_outline']=0\n        X_trans.loc[X_trans['Current Loan Amount']>90000000, 'Current Loan Amount_outline']=1\n        X_trans['Credit score_outline']=0\n        X_trans.loc[X_trans['Credit Score']>5000, 'Credit score_outline']=1\n        X_trans.loc[X_trans['Credit Score'].isna(), 'Credit Score']=0\n        X_trans['Months since last delinquent_outline']=0\n        X_trans.loc[df_train['Months since last delinquent'].isna(), 'Months since last delinquent_outline']=1\n        X_trans['Months since last delinquent'].fillna(-1, inplace=True)\n        X_trans=pd.get_dummies(X_trans, columns=new_cat_col, drop_first=True) # \u043a \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c\u0443 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0443 \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0430\u0441\u044c \u044d\u0442\u0430 \u0441\u0442\u0440\u043e\u043a\u0430\n        return X_trans","1a6d2c50":"train, val = train_test_split(df_train,\n                               test_size=0.2,\n                               shuffle=True,\n                               stratify=df_train[TARGET_VAR],\n                               random_state=12)","0c9185ed":"imputer3=FeatureImputer3()\ntrain=imputer3.fit(train).transform(train)\nval=imputer3.transform(val)","e17e7d05":"X_train, y_train, X_val, y_val = train.drop(TARGET_VAR, axis=1), train[TARGET_VAR], val.drop(TARGET_VAR, axis=1), val[TARGET_VAR]","4d3de8e3":"frozen_params1 = {'silent': True,\n                 'random_state': 100,\n                 'eval_metric': 'F1',\n                 'class_weights': [1, 2.55],\n                 'early_stopping_rounds': 100,\n                 'depth': 5,\n                 'iterations': 100,\n                 'learning_rate': 0.1                 \n                 }","56c806fd":"cat_model = CatBoostClassifier(**frozen_params1)\ncat_model.fit(X_train, y_train, eval_set=(X_val, y_val), plot=True)","8af33d2e":"important_features_top = show_feature_importances(X_train.columns,\n                                                  cat_model.feature_importances_)","abbfd974":"show_learning_curve_plot(cat_model, X_train, y_train)","1a844935":"y_val_pred=cat_model.predict_proba(X_val)","16314678":"show_proba_calibration_plots(y_val_pred[:, 1], y_val)","f43ae81e":"df_train = pd.read_csv(TRAIN_DATASET_PATH)\ndf_test = pd.read_csv(TEST_DATASET_PATH)","c2486730":"train, val = train_test_split(df_train,\n                               test_size=0.2,\n                               shuffle=True,\n                               stratify=df_train[TARGET_VAR],\n                               random_state=12)","71357103":"X_train, y_train, X_val, y_val = train.drop(TARGET_VAR, axis=1), train[TARGET_VAR], val.drop(TARGET_VAR, axis=1), val[TARGET_VAR]","422b1b9a":"imp1=FeatureImputer1()\nrfc=RandomForestClassifier(max_depth=5, class_weight={0:1,1:2.55}, random_state=100)\nrf_pipe=Pipeline([('imputer', imp1), ('rfc',rfc)])\nimp2=FeatureImputer3()\ncbc=CatBoostClassifier(silent=True, class_weights={0:1,1:2.55}, learning_rate=0.005, random_seed=100, depth=5)\ncbc_pipe=Pipeline([('imputer', imp2), ('cbc',cbc)])","7c9ccfc3":"vclf = VotingClassifier(estimators=[('p1', rf_pipe), ('p2', cbc_pipe)], voting='soft')\nvclf.fit(X_train, y_train)\nevaluate_preds(vclf, X_train, X_val, y_train, y_val)","ff8fada4":"y_val_pred=vclf.predict_proba(X_val)\nshow_proba_calibration_plots(y_val_pred[:, 1], y_val)","63244e31":"y_pred=vclf.predict(df_test)\nresult=pd.DataFrame({'Id':np.arange(2500), 'Credit Default': y_pred})","efc0aead":"RESULT_PATH='.\/vklf_mix_solutions.csv'\nresult.to_csv(RESULT_PATH, index=False)","f678b3a0":"\u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0432, \u043a\u0430\u043a\u043e\u0435 \u0438\u043c\u0435\u043d\u043d\u043e \u0438\u0437 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0432\u0435\u043b\u043e \u043a \u043b\u0443\u0447\u0448\u0435\u043c\u0443 \u0441\u043a\u043e\u0440\u0443 \u043d\u0430 \u043f\u0440\u0438\u0432\u0430\u0442\u0435 \u044f \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u043b \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0441\u0435\u0431\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442...","24f0b5f7":"\u043d\u0443\u0436\u043d\u044b  \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0435\u0437 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","ab4f90a0":"\u0440\u0435\u0448\u0438\u043b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0441\u0432\u044f\u0437\u044c \u0441 \"Mounthly Debt\":","a6103e88":"\u0432\u0441\u0451 \u0432\u0440\u043e\u0434\u0435 \u043a\u0440\u0430\u0441\u0438\u0432\u043e. \u041d\u043e, \u043d\u0430\u0434\u043e \u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0430\u0442-\u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0443  \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438","3dabc63e":"\u041f\u0440\u0438\u0441\u0442\u0443\u043f\u0430\u0435\u043c \u043a \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e, \u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e:","271d1b16":"\u0414\u043b\u044f RandomForestClassifier \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c, \u0430 \u0434\u043b\u044f Catboost \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438  FeatureImputer3()  \n\u0418 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0432\u0441\u0435 \u0432 \u043e\u0431\u0449\u0438\u0439 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d","19718032":"\u0432\u043e \u043f\u0435\u0440\u0432\u044b\u0445 \u0431\u044b\u043b \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438  \u0431\u044b\u043b\u0438 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043f\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443 dummy - \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","96d83d6a":"### \u041e\u0442\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 \u2116 2, \u043d\u0430 \u0442\u0435\u043c\u0443 \"\u041f\u043e\u0447\u0435\u043c\u0443 \u0432 \u0438\u0442\u043e\u0433\u0435 \u043d\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u0430 \u044d\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u044c?\":","8c20986b":"\u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0430 \u043e \u043d\u0435\u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u043e\u0432 0 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u043b\u0430\u0441\u044c. \u0438 34% \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 \"Annual Income\" \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0435\u0439 \"Monthly Debt\". \u041c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0443 \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438, \u0438 \u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043f\u043e \"Annual Income\".  \n\u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0435 **\u0418\u041c\u0415\u041d\u041d\u041e** \u044d\u0442\u043e \u043b\u0435\u0433\u043b\u043e \u0432 \u043e\u0441\u043d\u043e\u0432\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443","132a7e33":"\u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438","7bc5f58c":"\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438:","7b7f507f":"\u043e\u0434\u043d\u0430\u043a\u043e-\u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043f\u0430\u0431\u043b\u0438\u043a\u0430 \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043d\u0430\u0441 \u0441\u0430\u043c\u044b\u043c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u0434\u0435\u043b\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u0438\u0441\u043a \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u043b\u0441\u044f.","ffffb503":"\u043f\u0435\u0440\u0435\u0434 \u044d\u0442\u0438\u043c \u0441\u043e\u0431\u0435\u0440\u0451\u043c \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d:","e334ef1f":"\u041e\u0434\u043d\u0430\u043a\u043e, \u0432 \u043f\u043e\u0438\u0441\u043a\u0430\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u044b \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u0438 \u0438\u043d\u043e\u0433\u0434\u0430 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0438\u0445, \u043e\u0442\u0432\u0435\u0440\u0433\u043d\u0443\u0442\u044b\u0435 \u043d\u0430\u043c\u0438 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439, \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0434\u0430\u0442\u044c \u043d\u0430\u043c \u0443\u0434\u0438\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442(\u043d\u0435 \u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043c\u044b \u0441\u043e\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0443 **\u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0440\u043e\u0434\u0430**, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044f \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u0443\u044e \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0443, \u043f\u0440\u0438 \u0432\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u043d\u0443\u043b\u0435\u0432\u043e\u0439 \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u044b...)","77f4df82":"\u0412  \u0438\u0442\u043e\u0433\u0435, \u043a\u0430\u043a \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c, \u0438\u0437 \u044d\u0442\u0438\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0431\u0440\u0430\u0442\u044c VotingClassifier, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0430\u0441\u0442 \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0432\u044b\u0438\u0433\u0440\u044b\u0448\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u043f\u0440\u0438\u0432\u0430\u0442\u0435...","b7c33521":"\u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435\u043f\u043b\u043e\u0445\u043e. \u0440\u0435\u0448\u0438\u043b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u043b\u0438\u043d\u0435\u0439\u043d\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \"Annual Income\" \u043e\u0442 \"Mounthly Debt\":","a6840a54":"*\u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u043e\u0441\u0442\u0430\u0442\u043a\u043e\u0432(\u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0439) \u0441\u0434\u0435\u043b\u0430\u043b \u0432\u044b\u0432\u043e\u0434 \u0447\u0442\u043e:\"\u0422\u0430\u043a \u043a\u0430\u043a \u044f\u0432\u043d\u043e \u043d\u0435 \u0441\u043e\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u0433\u043e\u043c\u043e\u0441\u043a\u0435\u0434\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u044c \u043e\u0441\u0442\u0430\u0442\u043a\u043e\u0432 \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438\u0445 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f-\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0433\u0440\u0430\u0444\u0435 'Annual Income' \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c.\"*","a77c01d2":"\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 trashhold calibration","da00988d":"### \u041e\u0442\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 \u2116 1, \u043d\u0430 \u0442\u0435\u043c\u0443 \"\u041f\u043e\u0447\u0435\u043c\u0443 \u0432 \u0438\u0442\u043e\u0433\u0435 \u043d\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u0430 \u044d\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u044c?\":","378aa0de":"\u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431, \u0447\u0435\u0440\u0435\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 scipy:  ","589aabee":"\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u0440\u0438\u0432\u044b\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438","74c7bf91":"\u0412\u043e\u0442 \u044d\u0442\u0430 \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0432 \u043c\u0435\u0436\u0434\u0443 \u0442\u0440\u0435\u0439\u043d\u043e\u043c \u0438 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439 \u0442\u043e\u0436\u0435 \u0441\u043c\u0443\u0449\u0430\u0435\u0442.","b4967cc3":"\u043e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c:","d82b5009":"\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435","7bd69336":"*\u043d\u043e, \u043a\u043e\u0433\u0434\u0430 \u0432\u044b\u0431\u0438\u0440\u0430\u043b\u0441\u044f  \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0434\u043b\u044f \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u0433\u043e, \u0432\u043e\u0437\u043d\u0438\u043a\u043b\u0438 \u0441\u043e\u043c\u043d\u0435\u043d\u0438\u044f, \u0432\u0441\u0435 \u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u044b. \u043d\u0430\u0447\u0430\u043b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u043e\u0441\u0442\u0438 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438.*","3e2785fb":"### \u041e\u0442\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 \u2116 0, \u043d\u0430 \u0442\u0435\u043c\u0443 \"\u041f\u043e\u0447\u0435\u043c\u0443 \u0432 \u0438\u0442\u043e\u0433\u0435 \u043d\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u0430 \u044d\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u044c?\":","524bc463":"\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438","3dacb0b5":"\u0414\u0430\u043d\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0432\u044b\u0434\u0430\u043b\u0430 **0.57032** \u043d\u0430 \u043f\u0430\u0431\u043b\u0438\u043a\u0435 \u0438 **0.52695** \u043d\u0430 \u043f\u0440\u0438\u0432\u0430\u0442\u0435, \u043e\u0434\u043d\u0430\u043a\u043e \u043f\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c \u043f\u0430\u0431\u043b\u0438\u043a\u0430 \u0431\u044b\u043b\u0430 \u0441\u0434\u0430\u043d\u0430 \u043a\u0430\u043a \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f.","db81b362":"\u043f\u043e \u0438\u0442\u043e\u0433\u0430\u043c, \u0434\u0430\u043d\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0432\u044b\u0434\u0430\u043b\u0430 \u043a\u043b\u0430\u0441\u0441\u043d\u044b\u0435 **0.58153** \u043d\u0430 \u043f\u0430\u0431\u043b\u0438\u043a\u0435(3-\u0435 \u043c\u0435\u0441\u0442\u043e) \u0438 **0.52613** \u043d\u0430 \u043f\u0440\u0438\u0432\u0430\u0442\u0435, \u043d\u0435\u043c\u043d\u043e\u0433\u043e(\u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e) \u0443\u0441\u0442\u0443\u043f\u0438\u0432 RandomForest-\u0443","83f5752b":"\u0412\u0441\u0451 \u0432\u0440\u043e\u0434\u0435 \u0445\u043e\u0440\u043e\u0448\u043e(\u0445\u043e\u0442\u044f RandomForest \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0445\u043e\u0436\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b)\n\u0412\u043e\u0442 \u0438\u0442\u043e\u0433\u0438 \u0441\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430:  \n\n`TRAIN`\n\n             `precision    recall  f1-score   support`  \n\n          `0       0.85      0.73      0.78      4310`  \n          `1       0.49      0.67      0.56      1690`  \n\n    `accuracy                          0.71      6000`  \n   `macro avg      0.67      0.70      0.67      6000`  \n`weighted avg      0.75      0.71      0.72      6000`  \n\n`TEST`  \n\n             `precision    recall  f1-score   support`  \n\n          `0       0.83      0.70      0.76      1077`  \n          `1       0.45      0.62      0.52       423`  \n\n    `accuracy                          0.68      1500`  \n   `macro avg      0.64      0.66      0.64      1500`  \n`weighted avg      0.72      0.68      0.69      1500`  \n\n`CONFUSION MATRIX`  \n\n`col_0             0    1`  \n`Credit Default          `  \n`0               759  318`  \n`1               160  263`  \n`Wall time: 407 ms`\n","3ddcff29":"\u0422\u0430\u043a \u0436\u0435 \u043f\u0440\u0438 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0431\u044b\u043b\u043e \u0437\u0430\u043c\u0435\u0447\u0435\u043d\u043e, \u0447\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f 'Credit Score' > 6000, \u0438 'Current Loan Amount' >= 99999999.0, \u0445\u043e\u0442\u044c \u0438 \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0442\u0438\u043f\u0438\u0447\u043d\u044b\u043c\u0438, \u043d\u043e \u044f\u0432\u043d\u043e \u043e\u0442\u0434\u0435\u043b\u044f\u044e\u0442 \u0447\u0430\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u043e\u0432.","cc4fa683":"\u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435:","06886bc4":"***","3804185b":"***","0a78ee1a":"\u041a\u0440\u0430\u0442\u043a\u0438\u0439 \u043e\u0431\u0437\u043e\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0435\u0433\u043e \u043f\u0435\u0440\u0432\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u043d\u0430 \u043f\u0440\u0438\u0432\u0430\u0442\u0431\u043e\u0440\u0434\u0435.\n\u0421\u0440\u0430\u0437\u0443 \u0441\u043a\u0430\u0436\u0443, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0435 \u0431\u044b\u043b\u043e \u0432 \u043a\u043b\u044e\u0447\u0435\u043d\u043e \u0432 \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442, \u0438\u0437-\u0437\u0430 \u043c\u043e\u0438\u0445 \u0441\u043e\u043c\u043d\u0435\u043d\u0438\u0439 \u043f\u043e \u043f\u043e\u0432\u043e\u0434\u0443 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043d\u0430 \u043f\u0440\u0438\u0432\u0430\u0442\u0435.","4bf70ffb":"\u0412\u043e\u0442 \u0442\u0430\u043a \u044d\u0442\u043e \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u043b\u043e \u043d\u0430 RandomForest...\u041f\u0440\u0430\u0432\u0434\u0430 \u043b\u043e\u0433\u0438\u0447\u043d\u0435\u0435?\n![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAA4gAAAHwCAYAAADkXkFLAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAACCBElEQVR4nO3deZxbdb3\/8fcnyexb90I7hbYIlqUblJadsggoiFBAFK5QUBEUUbmKKOrFBcXl\/kCvC6IUBKogyioVBKUiKFBKy1L2pS3dN9rOviTf3x\/fnEkmk1k7mSQzr+eD85jk5Jzkm8yhzbuf72LOOQEAAAAAEMp2AwAAAAAAuYGACAAAAACQREAEAAAAAMQREAEAAAAAkgiIAAAAAIA4AiIAAAAAQBIBEQAGNTM70sxey3Y7coWZ\/cDMvpil115pZsdn47VzjZnNNbM1GXz+G8zsm0n3LzGzjWZWa2Yj4z8n9\/G5p5nZv\/uvtQCQWwiIAJAhuRAInHP\/cs69P5ttyBVmNlrSeZJ+Hb8\/18xi8bBQY2avmdkF2W1l75nZ1WbWEn8fwXbFAL7+fDN7Is3+2Wa2yMy2m9k2M3tmoD5f59zFzrnvxttRIOn\/STrBOVfunNsa\/\/l2H5\/7BUnbzezD\/dhkAMgZBEQAyGNmFs52G3bVAL6H+ZIWOecakvatc86VS6qU9CVJvzGzfAzUd8ZDT7D9qDcnm1mkPxtjZodK+oekf0p6n6SRki6R9MH+fJ0eGiupWNKKXX2ipM9poaTP7OrzAUAuIiACwAAzs5CZXWlmb5nZVjP7o5mNSHr8LjPbYGY7zOxxM9s\/6bFbzOxX8cpMnaRj4pXKL5vZC\/Fz7jSz4vjx7brydXVs\/PErzGy9ma0zs0+ZmTOz93XyPkaY2c3xY98zs3vj+ztUlJKfJ817+Fr8\/YaTjj\/dzF7o7vMys2Izuz2+f7uZLTGzsZ189B+UDywdOG+RpG2SpsWfe7iZ\/cXMNsff31\/MrDqpjYvN7Ltm9mS8Avk3MxuV9PgnzGxVvG1XpXweRWZ2ffyzWxe\/XZT8O4v\/LjbFfx+nmdmHzOz1eDXu6528x9Tf0almtiL+2Sw2s32THltpZl+Nf851ZhYxs0PM7N\/x4583s7lJx883s7fj7\/UdMzs3\/nw3SDrUfOVye\/zwH0v6nXPuh865LfHPd6lz7qOdtDP4\/daY2ctmdnrSY+8zs3\/Gr9ctZnZnfL+Z2XXxz2hH\/Jo+IP7YLWb2PTPbR1LQxXq7mf0j\/njy9VhkZj8xs9Xmu6HeYGYlKb+Lr5rZBkk3x59rsaTjgt8ZAAwmBEQAGHiXSTpN0tGSxkl6T9Ivkh7\/q6S9JY2R9Jx8tSLZOZKukVQhKQhiH5V0kqRJ8gFnfhevn\/ZYMztJ0uWSjpev+hzdzfu4TVKppP3jbb2um+M7ew8\/kVQn6diUx38fv93V53W+pCpJE+SrVBdLSq4QJpuqRFhoJx5CT5U0StKb8d0h+UCwp6Q94s\/78zTv4wL5918o6cvx59tP0q8kfSLe5pGSqpPOu0rSIZJmSJouabakbyQ9vpt81Wu8pG9J+o2k\/5J0kKQjJX3LuhlDFw9Hf5D0RUmjJS2S9ICZFSYd9nFJJ0saJl9pe1DS9ySNiL+XP5vZaDMrk\/QzSR90zlVIOkzScufcK\/Kf+X\/ilcthZlYq6VBJf+qqfSneir+vKknflnS7me0ef+y7kv4mabj8Z\/h\/8f0nSDpK0j7x9p8taWvykzrnXpe\/PiVpmHMu+RoL\/DD+HDPkr\/vgMw\/sFv889pR0Ufx510pqkZSP1WYA6BIBEQAG3mckXeWcW+Oca5J0taQzLd59zTm3wDlXk\/TYdDOrSjr\/Pufck865mHOuMb7vZ865dc65bZIekP+y25nOjv2opJudcyucc\/XyX9TTin95\/6Cki51z7znnWpxzaatznUh9D3+QDysyswpJH4rvk7r+vFrkw9f7nHPReJVqZyevOUxSTcq+cfGqV4OkeyRd7pxbJknxsWp\/ds7VO+dq5ANtami+2Tn3erzb6h+V+CzPlPQX59zj8TZ\/U1Is6bxzJX3HObfJObdZ\/rP+RNLjLZKucc61SLpDPrj+NH5drJDvLjkt6fiPxqt+wTZOPjA96Jx7JP48P5FUIh\/uAj9zzr0bb\/9\/yXfBXRT\/vTwi6Vn534Xi7T\/AzEqcc+vj7UhnuPz3i\/WdPN6Bc+6u+DUZc87dKekN+dAcfBZ7ShrnnGt0zj2RtL9C0hRJ5px7xTnX49eUfBVS0qclfck5ty3+e\/6+pI8lHRaT9D\/OuaaU7sk18tcUAAwqBEQAGHh7Sron+DIv6RVJUUljzSxsZtfGu9vtlLQyfs6opPPfTfOcG5Ju10sq7+L1Ozt2XMpzp3udwARJ25xz73VxTFdSn\/v3kubFu+zNk\/Scc25V\/LFOPy\/5KubDku6Id9X8kflJSdJ5Tz5QJFvnnBsmPwbxZ0qqYppZqZn9Ot5NdKekxyUNs\/ZjJnv0WTrn6tS+ujVO0qqk+6vi+wJbnXPR+O0glGxMerxB7X\/Hf3TODUva1qW+hnMuFm\/T+KTzkn8Pe0o6KzloSjpC0u7x9p8tXy1cb2YPmtkUpfeefKjavZPHOzCz88xsedLrHqDENX+FJJP0TLy77IXx9\/MP+YruLyRtNLMbzayyp68ZN1q+Cr406bUfiu8PbE76h5hkFZK29\/L1ACDnERABYOC9K99VL\/kLfXG829o5kj4i382zStLE+DmWdL7LULvWq303yAldHPuupBFmNizNY3XyX7olSWa2W5pj2r0H59zL8mHmg2rfvTR4rbSfV7xy+W3n3H7ylbFT5GcqTecF+a6EHRvjq3xflTTVzE6L7\/5v+S6Ec5xzlfLdGaX2v4vOrFfS5xfvdjky6fF18oEssEd8X39q9xrxatkESWuTjkn+Pbwr6baUz7nMOXetJDnnHnbOfUA++L0q3+019TkUrz7\/R9IZPWmkme0Zf65LJY2MB\/aXFP+cnXMbnHOfds6Nk68m\/zIYP+ic+5lz7iD5bqT7SPpKT14zyRb5sL1\/0nuucn7iora3lKbN4+S7FLOEDIBBh4AIAJlVYH4ilWCLyE\/qcU38i7HiY7w+Ej++QlKTfLWpVL6720D5o6QLzGzfeKD5VmcHxrvy\/VX+y\/pwMyswsyBAPS9pfzObYX4CnKt7+Pq\/lx9veJSku5L2d\/p5mdkxZjY1XtXbKd\/tMKr0FqmLcZXOuWZJ\/6vE+66QDw\/bzU+K8z89fB+SH393ipkdER\/z9x21\/zv3D5K+EX8vo+KveXsvnr8n\/ijpZDM7Ll5V\/W\/5a6uzNfxul\/RhMzsxXskujk\/SUm1mY81PeFMWf45aJT7njZKqU8Y2XiFpvpl9xcxGSpKZTTezO9K8bpl8CNscP+4C+Qqi4vfPssTkQO\/Fj42a2cFmNif+3uokNarz331a8arqbyRdZ2Zj4q833sxO7ObUuZL+Ef+HBQAYVAiIAJBZi+RDRrBdLemnku6X9Dczq5H0lKQ58eNvla+krZX0cvyxAeGc+6t8N8vH5Cdq+U\/8oc6+BH9CPpC9KmmT\/GQowcQg35H0qPxYsg5r5HXiD0p88d6StL+rz2s3+TC2U77r6T\/VedC6VdKHghkqO7FA0h7m17i7Xn7M3pb4az7Uw\/eh+Pi8z8mH3vXywSZ5YfjvyY\/ve0HSi\/KTEX2vp8\/fwza8Jj+u8P\/k38OHJX04HoTTHf+ufPX66\/Jh7V35ilwovv23fFVym3zQ\/mz81H\/Ij4ncYGZb4s\/1b\/nuusdKetvMtkm6Uf7\/h9TXfVk+mP9HPmxOlfRk0iEHS3razGrlr4MvOOfeke8W\/Bv5z3aV\/D+q\/KQ3n1HcV+Wv96fiXYkfVfeTz5wr\/w8XADDomHOZ6qkEAMhn5pcweElSkXOuNdvt6Q9m9n1Jm5xz12e7LchPZjZV0o3OuUOz3RYAyAQCIgCgjfn15x6U7\/b3O0kx59xpWW0UAAAYMHQxBQAk+4x898K35MdzXZLd5gAAgIFEBREAAAAAIIkKIgAAAAAgjoAIAAAAAJAkRbLdgP40atQoN3HixGw3A1lUV1ensrKybDcD6BOuX+Qzrl\/kO65h5LPk63fp0qVbnHOj+\/pcgyogTpw4Uc8++2y2m4EsWrx4sebOnZvtZgB9wvWLfMb1i3zHNYx8lnz9mtmqXXkuupgCAAAAACQREAEAAAAAcQREAAAAAICkQTYGEQAAAMgHLS0tWrNmjRobG7PdFOSp4uJiVVdXq6CgoF+fl4AIAAAADLA1a9aooqJCEydOlJlluznIM845bd26VWvWrNGkSZP69bnpYgoAAAAMsMbGRo0cOZJwiD4xM40cOTIjFWgCIgAAAJAFhEPsikxdPwREAAAAYIjZunWrZsyYoRkzZmi33XbT+PHj2+43Nzd3ee6zzz6ryy67rNvXOOyww\/qruRhAjEEEAAAAct3ChdJVV0mrV0t77CFdc4107rl9frqRI0dq+fLlkqSrr75a5eXl+vKXv9z2eGtrqyKR9FFh1qxZmjVrVrev8e9\/\/7vP7cukrt4bqCACAAAAuW3hQumii6RVqyTn\/M+LLvL7+9H8+fN1+eWX65hjjtFXv\/pVPfPMMzrssMM0c+ZMHXbYYXrttdckSYsXL9Ypp5wiyYfLCy+8UHPnztXkyZP1s5\/9rO35ysvL246fO3euzjzzTE2ZMkXnnnuunHOSpEWLFmnKlCk64ogjdNlll7U9b7IVK1Zo9uzZmjFjhqZNm6Y33nhDknTrrbdq2rRpmj59uj7xiU9IklatWqXjjjtO06ZN03HHHafVq1enfW9vvfWWTjrpJB100EE68sgj9eqrr\/brZ5nPiM4AAABANn3xi1K8mpfWU09JTU3t99XXS5\/8pPSb36Q\/Z8YM6frre92U119\/XY8++qjC4bB27typxx9\/XJFIRI8++qi+\/vWv689\/\/nOHc1599VU99thjqqmp0fvf\/35dcsklHZZeWLZsmVasWKFx48bp8MMP15NPPqlZs2bpM5\/5jB5\/\/HFNmjRJH\/\/4x9O26YYbbtAXvvAFnXvuuWpublY0GtWKFSt0zTXX6Mknn9SoUaO0bds2SdKll16q8847T+eff74WLFigyy67TPfee2+H93bcccfphhtu0N57762nn35an\/3sZ\/WPf\/yj15\/XYERABAAAAHJZajjsbv8uOOussxQOhyVJO3bs0Pnnn6833nhDZqaWlpa055x88skqKipSUVGRxowZo40bN6q6urrdMbNnz27bN2PGDK1cuVLl5eWaPHly2zINH\/\/4x3XjjTd2eP5DDz1U11xzjdasWaN58+Zp77331j\/+8Q+deeaZGjVqlCRpxIgRkqT\/\/Oc\/uvvuuyVJn\/jEJ3TFFVd0eG+1tbX697\/\/rbPOOqvtsaYMfJb5ioAIAAAAZFN3lb6JE3230lR77iktXtyvTSkrK2u7\/c1vflPHHHOM7rnnHq1cuVJz585Ne05RUVHb7XA4rNbW1h4dE3Qz7c4555yjOXPm6MEHH9SJJ56o3\/72t3LO9WgWz+RjgvcWi8U0bNiwtjGYaI8xiAAAAEAuu+YaqbS0\/b7SUr8\/g3bs2KHx48dLkm655ZZ+f\/4pU6bo7bff1sqVKyVJd955Z9rj3n77bU2ePFmXXXaZTj31VL3wwgs67rjj9Mc\/\/lFbt26VpLYupocddpjuuOMOSdLChQt1xBFHdHi+yspKTZo0SXfddZckv+j8888\/399vL28REAEAAIBcdu650o03+oqhmf954427NItpT1xxxRX62te+psMPP1zRaLTfn7+kpES\/\/OUvddJJJ+mII47Q2LFjVVVV1eG4O++8UwcccIBmzJihV199Veedd572339\/XXXVVTr66KM1ffp0XX755ZKkn\/3sZ7r55ps1bdo03XbbbfrpT3+a9rUXLlyom266SdOnT9f++++v++67r9\/fX76ynpZ288GsWbPcs88+m+1mIIuCWbKAfMT1i3zG9Yt8N9DX8CuvvKJ99913wF4vV9XW1qq8vFzOOX3uc5\/T3nvvrS996UvZblbeCK6j5OvXzJY657pfh6QTGa0gmtlJZvaamb1pZlemefwrZrY8vr1kZlEzG9GTcwEAAADkt9\/85jeaMWOG9t9\/f+3YsUOf+cxnst2kIS9jk9SYWVjSLyR9QNIaSUvM7H7n3MvBMc65H0v6cfz4D0v6knNuW0\/OzRvOSdGoxGKcAAAAQDtf+tKXqBjmmExWEGdLetM597ZzrlnSHZI+0sXxH5f0hz6em7saGqS33pI2bZKam7PdGgAAAADoVCYD4nhJ7ybdXxPf14GZlUo6SVKw8maPz80bO3dK77wjbdiQkTVrAAAAAGBXZbLfY7qFSTqbEefDkp50zm3r7blmdpGkiyRp7NixWtzPa8HsslhMammRQqHEfcnfj0T8TFToN7W1tbl3DQA9xPWLfMb1i3w30NdwVVWVampqBuz1MDg1NjZq8eLF\/Xr9ZjIgrpE0Iel+taR1nRz7MSW6l\/bqXOfcjZJulPwspjk3g1p9vbRmjVRe3n5\/Q4PU2iqVlUkjR0olJdlp3yDDLHrIZ1y\/yGdcv8h32ZjFtKKiYsBeD4NTcXGxZs6c2a\/Xbya7mC6RtLeZTTKzQvkQeH\/qQWZWJeloSff19ty8VlIiVVT4cYmrV\/utvt5PagMAAABk2IYNG\/Sxj31Me+21l\/bbbz996EMf0uuvv57tZnVwyy236NJLL5Uk3XDDDbr11ls7HLNy5UodcMABXT7PypUr9fvf\/77t\/rPPPqvLLrusfxs7CGQsIDrnWiVdKulhSa9I+qNzboWZXWxmFycderqkvznn6ro7N1NtzariYh8Uo1Hp3XelVaukujqCIgAAANosfHGhJl4\/UaFvhzTx+ola+OLCXXo+55xOP\/10zZ07V2+99ZZefvllff\/739fGjRvbHReNRnfpdfrbxRdfrPPOO69P56YGxFmzZulnP\/tZfzWt32T7M8\/oOojOuUXOuX2cc3s5566J77vBOXdD0jG3OOc+1pNzB7WiIh8UJd8ldeVKqaaGoAgAADDELXxxoS564CKt2rFKTk6rdqzSRQ9ctEsh8bHHHlNBQYEuvjhRt5kxY4aOPPJILV68WMccc4zOOeccTZ06VY2Njbrgggs0depUzZw5U4899pgkacWKFZo9e7ZmzJihadOm6Y033lBdXZ1OPvlkTZ8+XQcccIDuvPPOdq8bi8U0ceJEbd++vW3f+973Pm3cuFEPPPCA5syZo5kzZ+r444\/vEFYl6eqrr9ZPfvITSdLSpUs1ffp0HXroofrFL37RdszKlSt15JFH6sADD9SBBx6of\/\/735KkK6+8Uv\/61780Y8YMXXfddVq8eLFOOeUUSdK2bdt02mmnadq0aTrkkEP0wgsvtL3ehRdeqLlz52ry5MlpA2U0GtX8+fN1wAEHaOrUqbruuuskSW+++aaOP\/54TZ8+XQceeKDeeustOef0la98pe3Y4PNJ\/cyj0ai+8pWv6OCDD9a0adP061\/\/une\/4F3A4ny5prDQby0t0rp1UkGBNGqUH8MYymieBwAAQBZ88aEvavmG5Z0+\/tSap9QUbT8Lfn1LvT553yf1m6W\/SXvOjN1m6PqTru\/0OV966SUddNBBnT7+zDPP6KWXXtKkSZP0v\/\/7v5KkF198Ua+++qpOOOEEvf7667rhhhv0hS98Qeeee66am5sVjUa1aNEijRs3Tg8++KAkaceOHe2eNxQK6SMf+YjuueceXXDBBXr66ac1ceJEjR07VkcccYSeeuopmZl++9vf6kc\/+lHba6dzwQUX6P\/+7\/909NFH6ytf+Urb\/jFjxuiRRx5RcXGx3njjDX384x\/Xs88+q2uvvVY\/+clP9Je\/\/EWS2k3q8j\/\/8z+aOXOm7r33Xv3jH\/\/Qeeedp+XLl0uSXn31VT322GOqqanR+9\/\/fl1yySUqKChoO3f58uVau3atXnrpJUlqC7\/nnnuurrzySp1++ulqbGxULBbT3XffreXLl+v555\/Xli1bdPDBB+uoo47q8JnfeOONqqqq0pIlS9TU1KTDDz9cJ5xwgiZNmtTp59FfSBy5qqDAVxQjEWn9er9Exo4diVlQAQAAMCSkhsPu9veH2bNnt4WRJ554Qp\/4xCckSVOmTNGee+6p119\/XYceeqi+\/\/3v64c\/\/KFWrVqlkpISTZ06VY8++qi++tWv6l\/\/+peqqqo6PPfZZ5\/dVjm74447dPbZZ0uS1qxZoxNPPFFTp07Vj3\/8Y61Y0fkIsx07dmj79u06+uijJamtfZLU0tKiT3\/605o6darOOussvfzyy92+3+T3eOyxx2rr1q1t4fbkk09WUVGRRo0apTFjxnSobE6ePFlvv\/22Pv\/5z+uhhx5SZWWlampqtHbtWp1++umS\/GQypaWleuKJJ\/Txj39c4XBYY8eO1dFHH60lS5Z0+Mz\/9re\/6dZbb9WMGTM0Z84cbd26VW+88Ua376M\/UEHMdZFIYozixo3S5s1+1tPKSikcznbrAAAAsIu6qvRJ0sTrJ2rVjlUd9u9ZtacWz1\/cp9fcf\/\/99ac\/\/anTx8vKytpuu06GPJ1zzjmaM2eOHnzwQZ144on67W9\/q2OPPVZLly7VokWL9LWvfU0nnHCCTjzxRH3mM5+RJH3nO9\/Rhz\/8Yb355pvavHmz7r33Xn3jG9+QJH3+85\/X5ZdfrlNPPVWLFy\/W1Vdf3Wn7nHOyTpaLu+666zR27Fg9\/\/zzisViKi4u7u7jSPseg+cvKipq2xcOh9Xa2truuOHDh+v555\/Xww8\/rF\/84hf64x\/\/qOuvv77HrxNI\/cz\/7\/\/+TyeeeGK3be9vVBDzRTjsu5kWF\/uQ+Pbb0rZtfqkMAAAADFrXHHeNSgtK2+0rLSjVNcf1fZqOY489Vk1NTfrNbxJdVJcsWaJ\/\/vOfHY496qijtHChH+\/4+uuva\/Xq1Xr\/+9+vt99+W5MnT9Zll12mU089VS+88ILWrVun0tJS\/dd\/\/Ze+\/OUv67nnntOcOXO0fPlyLV++XKeeeqrMTKeffrouv\/xy7bvvvho5cqQkXxUcP368JOl3v\/tdl+0fNmyYqqqq9MQTT0hSW\/uC59l9990VCoV02223tU36UlFR0enak8nvcfHixRo1apQqKyt79Flu2bJFsVhMZ5xxhr773e\/queeeU2Vlpaqrq3XvvfdKkpqamlRfX6+jjjpKd955p6LRqDZv3qzHH39cs2fP7vCcJ554on71q1+ppaWl7XOvq6vrcFwmUEHMN6GQD4qxmLR1q7RlizRihDRsmK82AgAAYFA5d+q5kqSr\/n6VVu9YrT2q9tA1x13Ttr8vzEz33HOPvvjFL+raa69VcXGxJk6cqOuvv15r165td+xnP\/tZXXzxxZo6daoikYhuueUWFRUV6c4779Ttt9+ugoIC7bbbbvrWt76lJUuW6Ctf+YpCoZAKCgr0q1\/9Ku3rn3322Tr44IN1yy23tO27+uqrddZZZ2n8+PE65JBD9M4773T5Hm6++WZdeOGFKi0tbVdp++xnP6szzjhDd911l4455pi2yty0adMUiUQ0ffp0zZ8\/XzNnzmz32hdccIGmTZum0tLSbgNqsrVr1+qCCy5QLD4U7Ac\/+IEk6bbbbtNnPvMZfetb31JBQYHuuusunX766frPf\/6j6dOny8z0ox\/9SLvttpteffXVds\/5qU99SitXrtSBBx4o55xGjx7dFjYzzboqc+abWbNmuWeffTbbzWivvt7PSlpenpnnd05qaPBdUIcP91vSoNmhhoWakc+4fpHPuH6R7wb6Gn7llVe07777DtjrYXAKrqPk69fMljrnZvX1OSk55TszqbTUB8WdO6X33pOqqnxVsbAw260DAAAAkEcIiINFclCsq\/MznlZU+AltkgbWAgAAAEBnCIiDjZlUUuJvNzRIK1dKZWV+LcUezOAEAAAAYOgiIA5mQVBsbJRWrfL3R49O7AcAAEDWdLVUA9CdTM0lwzIXQ0FxcWItxdWrfVWxrs53RwUAAMCAKy4u1tatWzP2JR+Dm3NOW7du7dEaj71FBXEoKSryW3Ozn1m1qMh3PS0r811TAQAAMCCqq6u1Zs0abd68OdtNQZ4qLi5WdXV1vz8vAXEoKiz0W0uLtHatXxZj1Ci\/FEeIojIAAECmFRQUaNKkSdluBtABAXEoKyjwW2urtGGDFA77oFhRQVAEAAAAhiBSAKRIxFcPCwuljRult9\/26ylGo9luGQAAAIABRAURCeGwD4rRqLRli99GjZIqK\/1jAAAAAAY1AiI6Cof9xDWxmA+JmzdLI0ZIw4b5aiMAAACAQYlv++hcKJQIitu3S1u3JoJiQUG2WwcAAACgnxEQ0b1QSCot9esm7tghbdvmQ+Lw4X7cIgAAAIBBgYCInjNLBMXaWj+RTVWVryoWFWW7dQAAAAB2EQERvWcmlZT4rb7eVxUrKqSRI6Xi4my3DgAAAEAfERCxa4Kg2NgorVzpxyyOGuX3AQAAAMgrBET0j+JivzU1SatW+a6oQVA0y3brAAAAAPQAARH9q6jIb83N0urVPjSOHu0DI0ERAAAAyGkERGRGYaHfWlqkNWv8shijR0vl5QRFAAAAIEcREJFZBQV+a22V1q3zt0eN8kExFMp26wAAAAAkISBiYEQifqbT1lZp\/Xp\/f9Qov4+gCAAAAOQEvpln0sKF0pQpfps9W7r77my3KPuCoFhYKG3cKL39tl9PMRrNdssAAACAIY8KYqYsXChddJFfJ1CS1q6VrrjC3543L3vtyhXhsO9mGotJmzdLW7b4dRQrK32IBAAAADDgqCBmylVXJcJhoKFBuvba7LQnV4VCPiiWlEhbt\/qK4pYtfnIbAAAAAAOKgJgpq1en3792rZ+sBe2FQlJZmd+2b5feeUfatMkvlwEAAABgQBAQM2WPPTp\/bPZs6ayzpDvvlGpqBq5N+cDMr5lYVibt3OmD4oYNUlNTtlsGAAAADHoExEy55hofdJKVlEj\/8z\/S5Zf7KuLll0szZkiXXCI9+ijdKpMFQbG8XKqrk1au9J9ZY2O2WwYAAAAMWswGkinnnut\/fu1rfqH4ceOkK69MTFDzpS9Jzz0n\/fnP0v33+23kSOkjH5HOOEOaPp0F5SX\/GZSU+NsNDdKqVb66OHJkYj8AAACAfkFAzKRzz5VOP90HxPLy9o+ZSQcd5Lerr5YWL\/ZhceFCacECaa+9fJicN6\/r7qpDSRAIGxv9GM+SEr+WYkkJYRoAAADoB3QxzQWFhdIJJ0i\/\/rW0bJn04x9LY8b4n4ce6kPm7bf7yVsgFRf7tRSjUendd31Vsa5Oci7bLQMAAADyGgEx11RVSeecI\/3pT9LTT\/tuqe+9J331q9LMmdKnPy399a9M2iJJRUU+KEq+SrtypV9XkaAIAAAA9AkBMZdVV0uf\/7z02GM+FJ53nvTMM9KnPiUdeKAPj0uWEIgKC31QDIX8RD\/vvONnQI3Fst0yAAAAIK8QEPOBmTRtmvTtb0tLl\/rupsccI911l3TaadLhh\/vuqG+\/ne2WZldBgQ+JkYhfGuOdd6QdOwiKAAAAQA8REPNNJOLD4c9\/Lj3\/vHT99X4Sm5\/+VDrySOmUU6Sbb5a2bs12S7MnEvGTAhUWShs3+uD83nt+zCIAAACAThEQ81l5uXTWWdIdd\/iupt\/8pp\/h8xvf8F1Qzz\/fL5\/R0JDtlmZHOOw\/o6IiafNmHxS3bZNaW7PdMgAAACAnsczFYLH77tLFF\/vt5Zelu++W7rlHevRRPz7v5JP9+oqHHOK7YQ4lQVCMxXxldcsWacQIadgwX20EAAAAIImAODjtt5\/fvvY16d\/\/9usrPvCArzSOG+fXVjzjDGmffbLd0oEVCkllZX5Sn+3bfVgcPtxvBQXZbh0AAACQdUOslDTEhMN+XOL11\/vxir\/4hTRlivSrX\/lxjCeeKN14o7RpU7ZbOrDMpNJSX1XcudN3Pd24UWpuznbLAAAAgKwiIA4VJSV+xtPbbvMzoX772z5Afvvb0kEHSeee67ul1tdnu6UDJzko1tb6WU\/Xr2eNSQAAAAxZBMShaPRov5biokXS4sXSpZdKb77p11ycPl267DLp8ceHzqyfZj5AV1T4gPzOO9LatX7CHwAAAGAIISAOdXvvLX31q9J\/\/uPHKp5+uvTII9LHPy4dfLD0ne9IL73kx+0NBSUlUmWlryKuXCm9++7QnQUWAAAAQw4BEV4o5Gc4\/dGPpGXL\/NjEGTOkBQv8WMXjj\/djGNety3ZLB0ZxsQ+Kra3SqlXS6tW+ujhUgjIAAACGJAIiOiou9stiLFggPfec9P3v+9k\/v\/99afZs6aMfle68U6qpyXZLM6+oyAfFWMyHxFWrpLo6giIAAAAGJQIiujZihHT++dL990tPPildfrkfn3f55b7C+NnP+rUWW1qy3dLMKiz0QdFMWrPGj1OsqSEoAgAAYFAhIKLnJk70wfCJJ3xgPPts6Z\/\/9AHyoIOkb35TWr58cIemggI\/mU0k4rvbvvOOXyojFst2ywAAAIBdRkBE75n5QPj97\/vxijff7McvLlzou6YefbRfe\/Hdd7Pd0syJRBJBcf16HxR37Bg6M78CAABgUCIgYtcUFkonnOAntVm2TPrxj\/0yGj\/+sQ+Np58u3X67tH17tluaGUFQLCyUNm70QfG99wiKAAAAyEsERPSfqirpnHP8chlPP+2Xz9i2zf+cOVP69Kelhx4anAvRh8NSebmf4GfzZuntt6WtW\/0sqAAAAECeICAiM6qrpcsukxYvlv76V+kTn5CeeUb65CelAw+UrrxSWrJk8I1XDIV8UCwp8eH47belLVsG\/yQ+AAAAGBQi2W4ABjkzado0v33rW9Ljj0t33y3ddZd0223SnntK8+b5bfLkbLe2\/4RCfmkQ53yX023bpGHD\/FZYmO3WAQAAAGlRQcTAiUSkY4+Vfv5z6fnnpeuuk\/bYw09oc+SR0imnSLfc4sPUYGHmg2JZmZ\/t9J13pA0bBmc3WwAAAOQ9AiKyo7xc+uhHpTvu8F1Nv\/lNqbFRuuoqP15x\/ny\/lEZDQ7Zb2j\/MpNJS\/77r6qSVK\/0yGY2N2W4ZAAAA0IYupsi+3XeXLr7Yby+\/7Lug3nOP9MgjfobQU07xXVAPOcR33cxnZn58ouTD76pVvro4cmRiPwAAAJAlGf22bWYnmdlrZvammV3ZyTFzzWy5ma0ws38m7V9pZi\/GH3s2k+1EDtlvP+kb3\/AT2txxh3TSSb6SeNZZ0pw50g9+IL3+erZb2T9KSnwAbm6WVq\/2W3394Ju4BwAAAHkjYwHRzMKSfiHpg5L2k\/RxM9sv5Zhhkn4p6VTn3P6Szkp5mmOcczOcc7My1U7kqHDYj0u8\/no\/XvEXv5CmTJF+9SvpmGN8cLzxRmnTpmy3dNcVF\/ugGI1K777rq4p1dQRFAAAADLhMVhBnS3rTOfe2c65Z0h2SPpJyzDmS7nbOrZYk59wg+LaPfldSIp12mp\/1dOlS6dvf9l01v\/1t6aCDpHPP9d1S6+uz3dJdU1Tkg6IkrVnjxynW1hIUAQAAMGAyGRDHS3o36f6a+L5k+0gabmaLzWypmZ2X9JiT9Lf4\/osy2E7kk9GjpU99yq+tuHix9LnPSW+8IX3+89L06Zryox\/5pTSi0Wy3tO8KC31QDIWktWv9zKc7d0qxWLZbBgAAgEEuk5PUWJp9qaWQiKSDJB0nqUTSf8zsKefc65IOd86tM7Mxkh4xs1edc493eBEfHi+SpLFjx2rx4sX9+R52XSzmF0nP98lVctWHPyydfLKqXnpJY\/\/+d41+\/HHp0UfVNGKENh17rDYcd5zqJk\/2Fcd85ZwPwZJfKiQczm57kDG1tbW592cY0ENcv8h3XMPIZ\/15\/WYyIK6RNCHpfrWkdWmO2eKcq5NUZ2aPS5ou6XXn3DrJdzs1s3vku6x2CIjOuRsl3ShJs2bNcnPnzu3v97Fr6ut9d8Hy8my3ZHCbOlX6+Mf1+LJlOmrtWhX9+c+acO+9mvCnP\/mxi2ec4bupjhuX7Zb2XTTqZz4Nhfysp5WVhMVBZvHixcq5P8OAHuL6Rb7jGkY+68\/rN5NlrSWS9jazSWZWKOljku5POeY+SUeaWcTMSiXNkfSKmZWZWYUkmVmZpBMkvZTBtmKQiBUW+mUxbr5ZWrZMuuYav4zENddIs2f7tRfvvFOqqcl2U3svHPb\/0FBcLG3eLL39trRtm9Tamu2WAQAAYJDIWEB0zrVKulTSw5JekfRH59wKM7vYzC6OH\/OKpIckvSDpGUm\/dc69JGmspCfM7Pn4\/gedcw9lqq0YpEaMkObP98tkPPGEdPnlfkzf5ZdLM2ZIn\/2s9OijvgtwPgmFfFAsKZG2bvVBccsWgiIAAAB2WSa7mMo5t0jSopR9N6Tc\/7GkH6fse1u+q2n+M\/PjEOvq\/PixwsL8Hg+XryZN8sHwS1\/yM6Hefbd0331+GznSdz+dN0+aPj1\/fj+hkK+OOidt3+7D4vDhfisoyHbrAAAAkIeYOSXTiot9OBkzxofD+nq\/dEFtrdTYyMyUA81MmjVL+v73fRfUm2+WDjlEuv126eSTpaOP9msvvvtut0+VM8yk0lJfVdy501cUN26Umpuz3TIAAADkmYxWECH\/5b2oyG9VVb7a09wsNTX5qmJdnQ+JzvmqT2EhM54OlMJC6YQT\/LZjh\/Tgg9Kf\/yz9+Md+mzPHVxVPOUUaNizbre1eEBSd8\/8AsX27n8hmxAh\/\/QEAAADdICAOtOTAWFnpv8y3tPjQWFvrA2Nrqz8uHPYhhpkqM6+qSjrnHL+tWeO7oP75z9JXvyp985vS8cf7mVCPPdb\/TnKZmR+fKPmK9Y4dfl3FkSN9RRsAAADoBAEx28x84CgsTCyF0dLiK4xBd9SGBr+fwDgwqqulyy6TPv956cUXpT\/9yY9VXLTIVxI\/\/GEfFmfNyv3xiiUlfmtslFau9GMWR41KBEgAAAAgCQExFxUU+K283I9dbG3tGBidSwTGCL\/GjDCTpk3z27e+JT3+uK8q3nWXdNtt0p57+i6o8+ZJkydnu7VdKy72W1OTtGqVD4ijR\/ufuR5yAQAAMGBIFvkgEvFbWZn\/Ut\/a6rukNjT49fxqaxOBMQiX6F+RiO9eeuyx\/vNetMh3Q73+eum666SZM6Uzz5ROPdWP+ctVQffm5mZp9WofGkeP9mMXCYoAAABDHrOh5KNIxH+hHzlSmjhR2msvaY89fDAxS8ySWlfng4Bz2W7x4FJeLn30o9Idd0hLlkjf+IbvwnnVVT4ozp8vPfBAomtwLios9GNgzfyMre+84\/+xgVl1AQAAhjQqiINBOJwYazZihP+SH1QYg6AYKCz0FUaqRf1j992lSy7x28sv+y6o994rPfKInxjmlFP8eMU5c3Jzdtqg4tzaKq1b52+PGuVDcC62FwAAABlFQByMQqHEmLPhwxOBsanJB8b6er\/PLLG0BoFx1+23n9++\/nXpySd9F9T775f+8Adp\/Hjp9NN9WNxnn2y3tKNIxAfaaFTasMH\/o0MQFJkUCQAAYMggIA4FyYExdS3GoMIYBMZIhLUYd1U4LB11lN++\/33pb3\/zlcVf\/Ur6+c+lqVP9xDanneYnIcol4bAPhdGotHGjtHmz78pcWUlQBAAAGAIIiENRZ2sxNjX5sFhbmxiLFg774wiMfVNa6oPgaaf5sHXffT4sfvvb0ne\/Kx19tA+LJ53kj80VQVCMxXy7t2zx1ehhw5g1FwAAYBDjmx7ar8VYUZEIjM3NPjDW1fkxas4lKoxUk3pv9GjpU5\/y2xtv+KB4991+vcWyMumDH\/RdUA8\/PHc+31AoERTfe0\/ats2Pc62qYrZcAACAQYiAiI6SA2N5ud8XBMb6ej\/bZX293x+J+KBAVal39t5buvJK6YorpGee8WHxL3+R\/vQnaexYX3E84wxp\/\/2z3VIvFPIh1rlEUBw2zG+FhdluHQAAAPoJ3+rRM8Fsl6lrMdbX+y6pNTU+WIZCrMXYG6GQdMghfvvud6VHH\/Vh8aabpF\/\/Wtp338R4xXHjst1a\/zsOguLOnT4sVlX57qdFRdluHQAAAHYRARF9E4kk1mMcNcpPatLU5NcDrKnxoVFKVCMJjN0rLvbLYpxyiq\/Q3X+\/D4vXXOMnuznsMF9VPPnkRGU3W8wSYybr6qQdO3z35BEj\/PsAAABAXmLmEfSPcNgHhhEjpD33lPbaS5owwYdHs0SVsa7OVx6dy3aLc9uIEdL8+dIDD0hPPCF96UvS2rXS5ZdL06dLn\/2s9Pe\/+66\/2VZS4sNhY6O0apW0Zo1fgxMAAAB5hwoiMiMc9sGhpKTjWoxBUHTOd7EMJr5hLcb0Jk2S\/vu\/fThcutRPbHPffX4bOTIxXnHatOx+hsFSKk1N0urVvstpVZX\/hwN+vwAAAHmBgIiB0dlajI2NvrpYX5+oKrIWY3pm0qxZfrv6aumxx3wX1Ntu82MW99rLB8V583z1NluCJVRaWvzyGLGY\/weDigrfNba4OHdmaQUAAEA7BERkR\/JajMmBMViLsa4usRYjgbGjwkLpxBP9tmOHnwH17rulH\/3Ib3PmJMYrDhuWnTYmT1YUi\/l\/CNi+3d8vKfG\/9+JiqosAAAA5hICI3JAcGCsr06\/F2NLijwuHWYsxWVWVdO65fnv3Xemee3xl8YorpG98Qzr+eB8Wjz02e0tShEI+FAaam6VNm3xwjEQS1cWiIn6vAAAAWURARG7qai3GurpEt9QgMLIWozdhgnTZZdLnPy+98IIPivfdJy1a5CuJp57qu6DOmpXdql3wu5V8SKypSVQXS0v9PxIE1UUAAAAMGL5RI38kr8U4Zoxfi7Gpyc+YWVPjxzPGYj44FhYO7cBo5mc7nT5d+uY3pccf911Q\/\/hH6dZb\/Uyz8+b5bfLk7LY1XXVxwwZ\/OxLxYbGszFcX6WYMAACQUUP4GzTyXrAWY1mZX06jtdUvsTB8eGItRucSFcahuhZjQYF03HF+q6mR\/vpXX1m8\/nrpuuukAw\/0XVBPPdUvr5FtydXFaNSPsdy61YfesjLfHbWkZOj+PgEAADKIgIjBIxLxFaaRI\/0WjSZmSg0Co+SDRhAYh9rkKBUV0kc\/6rf166V77\/Vh8aqrpP\/5H+mYY3xY\/MAHcmPB+2C5FCkxkdGGDf52QUFiGQ2qiwAAAP2CgIjBq7O1GBsafFisq\/PHmQ3NtRh331265BK\/vfyyD4r33is98ogPkqec4sPinDm5Eb6SJzKS\/D8AvPeery5KfqxqZaV\/nOoiAABAnxAQMXQkr8WYHBibmhKT3sRiiQrjUAqM++3nt69\/XXryycTkNn\/4gzR+vHT66dKZZ0p7753tliaEw756KPmKYlOTtG6dv11Y2L66OFR+jwAAALuIgIihKzkwpq7FGATGaLR9hTEXKmmZFA5LRx3ltx\/8QHr4YT+5za9+Jf3859LUqb6q+JGP+ImCckVqdbG11VcWN2\/2v7NgGY3i4qE9eREAAEA3+KYEBLpai7G21m+xmD92KKzFWFrqK4enn+6D1r33+rB49dXSd7\/rQ+QZZ0gnnpio5OWKYAIjyf8e6+v9ZDfB8ilBdXEoVYkBAAB6gIAIdKaztRibmvz4xbo6P57RuUSFcbAGxtGjpU9\/2m+vv+67oN5zj3TppX5m0Q9+0IfFww\/3XVOvvdZ39xw3TrrySr+cRraYJSrFkv8dbtniw3443L66OFh\/fwAAAD1EQAR6I5j9NDkwNjf7ClVNjf8p+cBYUDA4uzPus4\/0ta9JX\/2q9PTTvqr4l79If\/qTr7zW1\/sunpK0dq10xRX+djZDYrLkJU9iMV8Z3rHDB\/2SEl9dLC6muggAAIakQfjtFRhAQdgoK\/NVttbWRGCsrfWh0cyPgxtsazGGQtKhh\/rtu9+VHn1U+sIXEuEw0NAgfe97vqtqrgWuUCixjIbkA\/+mTYn1M4PqYlER1UUAADAkEBCB\/hSMfSstlUaNSqzF2NCQfi3GYEH4fFdc7JfFuPji9I9v3ChNny7Nnu2XzZgzx8+ammsV1tTqYk2NX0rDzAfJykr\/c7D83gAAAFLk2LczYJBJXotxxAgfOpqapMbGxMQ3ziXGOxYU5F6VrTfGjfPdSlMNGyYdc4z0zDPSX\/\/q95WXS7NmJULjjBmJcYK5ILW62Nzsg65z\/vdUWekrx0VFg392WwAAMGQQEIGBFISOkpKOazHW1PiJb5zzxwUT3+RTYLzySj\/msKEhsa+kxHdBDcYgrlvng+LTT\/ufP\/qR319Y6ENiEBhnzfIhLFcEExZJvjK8Y4dfSsPMB8WKCv9eB1M3YgAAMOQQEIFs6mwtxsbGxEypzvlj82EtxiAEdjWL6bhx0mmn+U2Stm2Tnn3WB8ann5ZuuMGvuRgK+W6oc+YkQuPo0QP9jtILKsNS4ne2YUOiuhgso0F1EQAA5BkCIpBLktdiDAJjS0v7wBisxZirgXHevN7NWDpihHTCCX6T\/AQ\/S5f66uJTT0kLF0o33eQfmzw5MYZxzhxpwoTsV1iTf2eSry6+956vLkq+K21lpX+c6iIAAMhxBEQglyWvxVhZmQiMzc2JwNjS4o8LhwfHWoylpdKRR\/pN8u\/1xRcTgXHRIukPf\/CP7bZb+8C4zz7ZD8zhsH8Pkv99NTX5aqpz\/veTXF3MdrgFAABIQUAE8klyYExdi7Guzk96U1+fCIyDYS3GwkLpoIP8dsklvoL62muJLqlPPy3dd58\/dtgw6eCDpUMO8d1Sp07NbtUutbrY2uori5s3+yBbXu7HLhYX5\/\/vCQAADAp8IwHyXfJajGPG+BDS1JRYWqOx0R8XCvmwle9BJBSS9t3Xb\/Pn+8rc6tW+uhhMfvPII\/7YkhIfLINxjAcd1H5m0oEWLIMi+XY3NEg7d\/r7RUW+e2pjI9VFAACQNXn+TRFAB0EIKStLrMUYBMbkpTWCCmO+j4szk\/bc029nn+33bdqUmCX16ael\/\/f\/\/HuORKRp0xKBcfZsX3XMVruDCYokXwlubZVWrfK\/m+TqYr53GwYAAHmDgAgMdsGYuNJSaeRIHxiDmVJrahKBMRRKBMZ8r16NGSN9+MN+k\/ySFM8+mwiMv\/2t9Ktf+fc5ZUpiltTZs6Xdd89OmwsK\/O+gosJ3o62r89VF53zVs6rKh8V8W\/oEAADkFQIiMNQESzSkrsUYVBjr6vxxZvm5FmM6VVXSccf5TfLvdfnyRJXxrruk3\/3OP7bnnonAOGeONGnSwL\/\/YL3MQEuLr4oGQb6y0lcYi4qoLgIAgH5FQASGuuS1GJMDY1NTYtKbYC3GgoLBERhLSqRDD\/Wb5Lt2rliRmPTm73\/3oVHyay\/Onp2Y+GbffQc+lCV3BY7FfOX3vff876GkxAfGkhL\/uwEAANgFBEQA7SUHxmAtxiAwBktrRKPtK4zZXlpiV0Ui0vTpfrvoIv+e33yz\/UypDz7oj62o8DOlBqFx2rTELKUDIbW62Nzsq4uxmA+RlZW+O3Fxcf7\/XgAAwIAjIALoWvJSDalrMQaT3gSBcbCsxWgm7b233\/7rv\/y+NWsSYfGZZ6R\/\/MPvLy6WZsxIdEk96KDEEiQDIVj2RPK\/hx07\/FIaZj4oVlYmxi4CAAB0g4AIoHc6W4sxucLY0OD3h0K+OjcYJr6prvbbGWf4+1u3Jia9eeYZ6ec\/l376Ux+O998\/ERhnz\/aTAw2EYHyplKj8btjgbwfVxbIyH\/apLgIAgDQIiAB2XTBGLgiMwVqMzc1+DGNDg+8CKSUqjQUF+V1pHDlS+uAH\/Sb5SurSpYnAeNtt0m9+4x\/be+\/2E99UV2e+fcmVX8lXF7dvl7Zt8\/fLy31gLCrK\/6VOAABAvyEgAuh\/yWsxDh\/u97W2JrqmBqGxvj5RWQxCYyRP\/1gqL5eOPtpvkg\/IL7yQ6JZ6\/\/3SwoX+sfHjE9XFOXN8gMx0hTVY7kTyFcWmJmndOn+\/oMCPNy0t9YEx36u9AACgz\/L0mxiAvBOExmBNP8lXtVpa\/BYExtraxDnhcOK8fAstRUV+MpuDD5YuvdS\/11deSXRL\/de\/pLvv9seOGCHNnq3qPfbwQXr\/\/TMblFOri62tvrK4ebPvelpe7ifjKS7O38AOAAD6hL\/5AWRPOOy34mIfSCTfFTWoNjY2+tBYX5\/oopo8rjGfxtGFw9IBB\/jtwgt9Fe+dd3xgfOop6Zln9L6HHpJuvNFXXg86KDFT6owZ7Wcu7W9BCJd8uxoa\/FIazvkQWVXlX5\/qIgAAgx4BEUBuCYUSk+CUlfmxfs4lQmNTkw+MjY2+KhcIQmO+jGs0kyZP9tvHPiZJ+vc\/\/6nDtm9PjGP83\/9NTDAzfXpiLcaDD\/bjBzPVruLixP3WVmnLFh\/QQyEf5CsqfFikuggAwKDD3+4Acp9ZYiKc0tKO4xqTu6gGM6hKeddFtXnUKD+G8SMf8Tu2b5eWLEmMY7zhBj9bqpm0776JwDhnjjRmTGYalVxdjMX8LLU7d\/rgWlLig2pJiQ\/0efAZAwCArhEQAeSv5HGNQUUtFusYGuvqfKAxy6+lN4YNkz7wAb9J\/r0891xiHOMf\/iAtWOAfmzixfWDcc8\/+f3+hUPuuri0tftyic\/6xyko\/frGoKH8quQAAoB0CIoDBJRRKTMASLLvhXCI0Bl1UU5feyIdxjaWl0hFH+E3y7+fFFxOB8aGHpDvu8I\/ttlsiLM6eLU2Z0v\/vLajqSv6zrKmR3nvPf57J1cV8COMAAEASARHAUGDWflzjiBF+f7qlN1paEufk+tIbBQXSgQf67eKLfUh7\/fXEGMannvLLa0i+GjlrVmItxqlT\/efRX1Kri83N0qZNvk0FBX7cYlmZH9+YyyEcAIAhLke\/9QDAABhsS2+EQr5SOGWKdP75vnL67ruJMYxPPy09+qg\/trjYB8sgMB50UGKdxP4QBHLJf6Y7d\/rqouRfp7LSt6E\/QyoAANhlBEQASNbZ0hupXVTr630Ak3K3i6qZtMcefjvrLL9v8+ZEl9Snn5Z++lP\/\/iIRX1UMltY4+ODEZEC7KhxOVBeD7r4bNiRmaK2s9NXFoqLc+vwAABiCCIgA0J3UcY2dLb3R0JBYeiM5NObShC2jR0snn+w3yVf2li5tW4tRN98s\/frX\/rH3vz9RYZw9Wxo3btdfP7m7r+Q\/r+3bpa1b\/WNlZYnqYjC+EQAADBgCIgD0RXdLbzQ3d770Ri6Na6yslI45xm+SX19y+fLEOMY\/\/1m69Vb\/2IQJ7QPjXnvtejfbcDjRtdU5\/7mtX+\/vFxT4rr+lpT5QUl0EACDjMvoNxcxOkvRTSWFJv3XOXZvmmLmSrpdUIGmLc+7onp4LADkn3bjGdEtv1NYmuqgG4xpzQXGx72J6yCH+fmur9PLLicD42GPSn\/7kHxs1KjFT6pw50n777Vq11CxRqQ1ee9s23y02FPLV24oK38Zc+bwAABhkMvY3rJmFJf1C0gckrZG0xMzud869nHTMMEm\/lHSSc261mY3p6bkAkDe6W3qjsTGx7EYwIU6ujGuMRKRp0\/z26U\/7dr\/1VvuJbxYt8sdWVPiZUoNxjNOnJ8JeX187CILO+c+opsbfLiryAbykxN\/OtQmDAADIU5n8J9jZkt50zr0tSWZ2h6SPSEoOeedIuts5t1qSnHObenEuAOSv1KU3JOnNN6VJk3zlLHnpjdbWxHnZ7qJqJr3vfX4791y\/b+3axLIazzwj\/fCHfn9RkTRjRiIwHnRQYuKfvrxucXHifmurtGWLD4tm\/nkrKvxrUl0EAKDPzAVdnPr7ic3OlK8Mfip+\/xOS5jjnLk065nr5rqX7S6qQ9FPn3K09OTfpOS6SdJEkjR079qA7gkWiMSTV1taqPKjQAHmmy+vXOb\/FYn5L\/bPbLGeqaAU7dqhyxQoNe\/FFVb30kireeEMWi8mFQqqdPFk7pk7V9qlTtWP\/\/dXSXzOlBp+PlFjDMhTKmc9kKODPX+Q7rmHks+Tr95hjjlnqnJvV1+fK5D+zpvtbOTWNRiQdJOk4SSWS\/mNmT\/XwXL\/TuRsl3ShJs2bNcnPnzu1rezEILF68WFwDyFe9un6TxzU2NvpqY1NTIiSFQokumtnoonrYYYnbdXXS0qWyp59WxdNPq+Kvf1X1Pff4x\/bay1cXg7GM1dW7HuqCSYJiMR8Ug2U0iotza0bZQYY\/f5HvuIaRz\/rz+s1kQFwjaULS\/WpJ69Ics8U5VyepzswelzS9h+cCwNDV2bjGXFx6o6xMOuoov0k+vD3\/fGI9xgcekBYu9I\/tvnv7wLj33r0PuMHsspIPiTU10nvvJbqpBmMXCwqoMAIAkCKTAXGJpL3NbJKktZI+Jj\/mMNl9kn5uZhFJhZLmSLpO0qs9OBcAkKwnS28EoTGbS28UFkoHH+y3z33OB9hXX00ExieflIIK4\/DhPiwGgfGAA3q3PmIo5MNgoLlZ2rTJB8eCAj9usazMB22qiwAAZC4gOudazexSSQ\/LL1WxwDm3wswujj9+g3PuFTN7SNILkmLyy1m8JEnpzs1UWwFgUEu39EY0mgiOyUtvBIIuqgNRZQuHpf3399sFF\/hK6MqVicD49NPSww\/7Y0tL\/WQ3wVqMBx7YPgB2J5gYSPIhcedOX10Mnruy0lcZg2MAABhiMvrPxc65RZIWpey7IeX+jyX9uCfnAgD6STjst66W3qiv91sslpgEZyCW3jDzs7lOmiSdfbbft2GDD4zBbKn\/+7++vQUFfgmOIDAefLA0bFjPXie5uhi89w0b\/P1IJDF2sagou0uNAAAwgJgLHADgpS69MXJk+3GNQRfVxsbE0hvBjKGZHte4227Sqaf6TZK2b5eefTZRYfzNb6Rf\/tK3Z8oUHxiDbezY7p8\/+b1LvsK6Y4e0dat\/rKzMd0cNxi4CADBIERABAJ1LHdcYVOei0URoDLqoNjQkZlENurVGIpnpojpsmHT88X6T\/GsvW5YIjH\/8o3TLLf6xiRMTazHOnu3vd9emcLh9dbG5WVq\/3t8vKPBddUtLqS4CAAYdAiIAoPeCLqrFxb4rppR+6Y36+o5Lb2RiXGNJiV9aI1heo6VFWrHCd0d95hnpkUd8aJSkMWMS1cXZs6V99+065JklZoyVfPX0vfekLVv8eWVlibGLAzXRDwAAGcLfZACA\/tHZ0hstLT5UJS+9EYv5xzK19EZBgTRjht8uvti\/3htv+OpiMI7xgQf8sZWVfuxiEBinT+96kpqgMhq8v8ZGP8GPc4luqkGATq6ihkKJLfk+S20AAHIIAREAkDnJY\/uyufRGKCS9\/\/1+O+88H+bWrGkfGP\/+d39scbE0c2aiynjQQb5K2Nn7Ky5O3A+63jY1+ddwrn0YDiTfD4JiECgJlwCALCIgAgAGXmdLbwRdVNMtvZEamnaFmTRhgt\/OPNPv27Kl\/dIaP\/uZD3fhsDR1amItxtmzpREj2j\/f3XdL114rrVsnjRsnXXmlNG9ez9qSHCLThcvgmOA9dxUuI5FEV9504TI5YBIuAQBpEBABALkheVxjRYXfF4slqo2pS29I7cc17upkMaNGSR\/6kN8kqaZGWro0MY7xd7+TbrzRP7bPPomJb7Ztk37wg0QFdO1a6Yor\/O2ehMRgJti+6G24TL6fLlwmVy9Tq5WESwAYEgiIAIDcFQp1vfRGU1Oie2o06s\/pr6U3KiqkuXP9JvmA+sILicB4773S7benP7ehQfre96QTT+y8e2p\/yKVwGUzeQ7gEgLxGQAQA5JfUpTeCcY2dLb0h+WCzq0tvFBf7quHs2YnXe+UVHwLT2bjRVxrLyvxajGPH+hlUx4xpf3u33fzPysqBDU\/9HS6jUb9uZGfhMhAEy+SusFQuASBnEBABAINDd0tvBKGxri5xzq4svREOSwccII0f77uVpho+XLrkEh8UN23yP59\/3v9MnpAnUFycCI1BiAyCZPLP4cOzv\/ZiunAZCvnA3p0gXAa\/m6ByGQTOrgThMnUin+D3mG4in+A+4RIAeoSACAAYvLpaeiO1i2pQ+UpeeqMnQezKK\/2Yw+TQV1Iifec76ccgOucn3wmC46ZN0oYNidsbN0qvvy498YS0c2fH8wsK\/HjJoPKYWpEMguWoUf27dEh\/CcJlX9rW03CZrmtscrBMN+6ScAkAkgiIAIChJnnpjeTxgemW3mhpSZzT2dIbQQjs6SymZn58Y0WF9L73dd3Whob2FcjkELlpk7RqlR8P+d57Hc8NhXxITA2RqZXJ0aO7XvcxlxAuASDjCIgAAEi7tvTG6af3fFmL3igpkSZO9FtXmpulzZvbh8nUYPnSS34pj6BSmmz48PRdWlODZUlJ\/7\/HgdJf4bK5uefdYrsKl8ldYgmXAHIIAREAgM70ZemN5CDS10DSW4WFfizk+PFdH9fa6ieSSQ6QySEy6N66ebM\/NlVlZacT7Qyrr\/ddeceO9d15B1O4yVS4jMW6\/pySZ4pNN+6ys4BJuASwCwiIAAD0RndLb7S2+hAQhIHUCWmCL\/LBl\/6BnHAmEklUCrsSi\/luq11VJJcu9T8bGyVJM5LPLylJP8FOarAcPnzwB5n+Cpetre2XIUmtXKZ2jSVcAugjAiIAALsqeemNVM75rqqtrYmfTU2JENnS0vGLfXKAzMaX9VDIB9+RI6X99uv8OOf8RDobN2r5M89oRklJx\/GSL73kfybPHhsoLOx6op3g9siR2Z+5NRvyKVyyFAkwaBAQAQDIpGBW1NTJbQKxWPsAGXRdDdZzjEYTX7qTKz3Bl\/dsMvPjNauqtL2lRdp\/\/86PravrWIVMrky+9Zb0n\/9I27d3PDcc9pPpdLUEyJgx\/ph0IX0o2pVwGYTInoTLdDobV9nVFlQu023pHgeQMQREAACyKfiC3FmwiUYTW2troutqU5MPksnj2IIv08mLzueKsjJp8mS\/daWx0Y+BTF36I7i9bp20bJkfS5nKzFcbu5poJ5i5tbg4M+9zMAium77+A0QQKJODZTTafl\/qcannJ0sXCPsjhKbukxL\/PxFCMYQREAEAyGVdVYGC7qtBeEwOkM3NiepPcoBM7jKYi1+Ci4ulCRP81pWWFh8kk0NkaoXylVf8MdFox\/OHDUsEyPhEO2kDZfJSKOiZgQhYfQ2hyeEztY1NTdKbbybu9yaEBt3Bu6p6ptuAHERABAAgXyV3Xy0q6vh4MHlOECKbm9tPnhN0GQy+qAZfdIMtl7\/AFhT4NSfHjev6uGhU2rYtfYAMbj\/9tA+Szc0dzy8ra9+lNc0Mrhozxs\/wmsuf12CTiYAVCvkZeAM9CaGpW2\/b1JMQmrzeZk9CJyEUu4iACADAYJU6eU5qNSwYYxYEyOTZV4PlGJIN9PId\/SEYvzh6tHTAAZ0f55yfuTXd0h\/B7eef97dTZ6aVfOUzuSKZbpzk2LF+5tZc6vqLzuVKJbSzrrg91VUIDYJn8JMQChEQAQAYuoIlOwLJ1RMp\/eyrnS3fEYv5fdlYvqM\/mEkjRvhtypTOj3NOqq3tuiL5+uvSv\/4l1dR0PL+gQBo1Kn2X1uRgOWpU\/oRw9F02Qmjw\/3NPxoP2VGfBsy+TEhFCs46ACAAA0uvJ+McgQL77rlRRkdvLd\/QHM\/8+Kyqk972v62MbGtKHyGACnlWrpGee8ZXLVKGQD4mdTbQT3B49un3IB1JlOmAFoTLosu6c\/\/+\/p5MS9eS5k6uf3YXP3oZQlmfpgIAIAAB6L3X5jnDYh5ZA0FUuCJEtLYmuq7m+fEd\/KSmRJk70W1eamqQtWxLBMbUiGawnuXlz+i\/Xw4d3vvRH8r6Skky8Swx1wf\/Hmfz\/dldnxk33fMltl\/o2M25x8aBcWoeACAAA+l9\/Lt8htZ99Nd+6r3anqEgaP95vXWlt9UGys4rkpk2+e+vmzf7YVJWVXU+0E+wvL+9ZReXuu6Vrr\/VLj4wbJ115pTRvXt8+A6AruTIeNPm4piY\/23JVVWbblQUERAAAMPB6unxHNOqrj\/m+fEd\/iER8mNttt66Pi8V8t9V04ySDn0uX+ttNTR3PLylJP8FO8s8lS6RvfzsxFnXtWumKK\/xtQiLyEWMd2xAQAQBAbkntvpqqJ8t3JMun5Tv6QygkjRzpt\/326\/w456QdO9J3a03u2rppk1RX1\/3rNjRIX\/mK9Pe\/+5BZXNz7LfW8wdLdGMgjBEQAAJBfWL6jf5hJw4b5bZ99uj62rq59FfKzn01\/XGOjtHy5\/5m89VVBQd+CZrrQ2U1otWBilcH+DwhANwiIAABgcOnN8h1BgAxCZOryHcGEFfm6fEd\/KSuTJk\/2myRdc43vVppq\/HjpySfb74vFEmNLGxo6hseebqnn1tVJW7emPza1itwDR0uJiUf6Uu3s6zkEUuQYAiIAABhaUiuFFRWJ26nLdwTrPw725Tt668or\/ZjD5EBdUuL3pwqF\/GMlJX7G1UwLllnoTeBsaNA7q1drUmVl1+fU1KTf39LS9\/buaoW0twG2s67bQBxXCAAAQKC78Y\/dLd+RWrkKqo6DafkOKTERTS7OYmrmK8iFhX7m1h5atWKFJu2\/f99eMxrtutrZ12379s4f66tIZNeqoL09r7Bw6PzDySBBQAQAAOgplu9ImDcvNwJhLgiHfTfc1PGwmeLcrgXPzgJsfb20bVv6x6LRvrXVrOdhs6+BNfn8oqLM\/790993SD34grV8v7bGH73J97rmZfc0BREAEAADoL31ZviMIkalrFw6V5TvQe2aJbrsDJbXbbrqQ2ZfK6ZYt6fc3N\/e9rUVFmemiW1Ii\/etf0k9+kqjirlolXXSRvz1IQiIBEQAAYCCwfAfyWTBzcPKY3UwKJpDqbfDs7tidO\/1svOmO66v6eumqqwiIAAAA6Ee9Xb4jCI\/Nzf4LKst3YDAJh6XSUr8NBOcSgbSr7ZOfTH\/+6tUD084BQEAEAADIB6nLd6Ri+Q6g75LHSnZl\/Pj0S7zssUdm2pUFBEQAAIDBoCfLdwQhkuU7gL5Jt8RLaamfqGaQICACAAAMdsnjH4uKOj7O8h1AzwQz9zKLKQAAAAatXV2+I3X8Y2ecS1+NNEts6fYF+zu7DwykefOkE0+UxoyRqqqy3Zp+R0AEAABA17pbviMIiMHt3u5zzlcpg01qfz95XzSaOD7Y1xudhdRYzE\/2Q0jFEEdABAAAQN\/lQkDqj5D67rvSyJHZDandVVJT7xNSkQEERAAAAOS3\/ghI4bA0fHjfzx8slVRC6pBHQAQAAAB2VS4EJEJq9n8Hg0CPA6KZlUjawzn3WgbbAwAAAKAvciEgZSKkdhVcsxVSo9HevU4e6VFANLMPS\/qJpEJJk8xshqTvOOdOzWDbAAAAAOSToRJSw2GpsDA77y\/DelpBvFrSbEmLJck5t9zMJmamSQAAAADQR7kQUvNYqIfHtTrndmS0JQAAAACArOppBfElMztHUtjM9pZ0maR\/Z65ZAAAAAICB1tMK4ucl7S+pSdLvJe2Q9MUMtQkAAAAAcopzTs45xVxMMdfLyXDySLcVRDMLS7rfOXe8pKsy3yQAAAAAQ41zTk6u29uS5OS6vR2EuORAl3o7OD7d4845xRTfH8yOapKcf51xFeNUUVSRmQ8ji7oNiM65qJnVm1kV4xABAACA\/NPXkJV6Ozi\/L4Grp+EruO2ck8k63I43ptPbTk5m5o+X2t0O7vuX6Pi4mSlikbT7k9U11w3aKmJPxyA2SnrRzB6RVBfsdM5dlpFWAQAAAHmiryGrs9vJgSr42aNqWPx52ipoirULX70JXEHISr0dPFdqcEoNYD0JX8F5qeEL2dXTgPhgfAMAAAAGzECFr9ZYqzbWbuy2GtaT8BVvTI\/CV3B+f4Sv4D7hC7uiRwHROfc7MyuUtE9812vOuZbMNQsAAADZlFyN6ulPqefVrnT7OgtfvkHqUYWru\/Dlf1iH8BV1UdW11KUNZ8HtiEUIXxj0ehQQzWyupN9JWin\/v9YEMzvfOfd4xloGAACATvUmuAVBrCebc06tsVYftIKKWBDOuvup9OFLSh+4ugpfyecMhJCFVBwpHrDXA3JVT7uY\/q+kE5xzr0mSme0j6Q+SDspUwwAAAPJZLgU453xVLWShDt0Tk38GIa1IRVTHgCGqpwGxIAiHkuSce93MCjLUJgAAgIwjwAFARz0NiM+a2U2SbovfP1fS0sw0CQAAgAAHANnQ04B4iaTPSbpM\/o\/LxyX9sruTzOwkST+VFJb0W+fctSmPz5V0n6R34rvuds59J\/7YSkk1kqKSWp1zs3rYVgAAMABSJydpibakDXBBKOtNiIvGogQ4AMiCngbEiKSfOuf+nySZWVhSUVcnxI\/5haQPSFojaYmZ3e+ceznl0H85507p5GmOcc5t6WEbAQBAkp5W4PojwDW1Numd7e\/0W4BjhkgAyI6eBsS\/SzpeUm38fomkv0k6rItzZkt60zn3tiSZ2R2SPiIpNSACADAkDWSA6+8KXGqAC4VCKi8sH+iPEADQz3oaEIudc0E4lHOu1sxKuzlnvKR3k+6vkTQnzXGHmtnzktZJ+rJzbkXwMpL+ZmZO0q+dczf2sK0AAGRMurAWhLggmOVigAMAoCd6GhDrzOxA59xzkmRmsyQ1dHNOur+VXMr95yTtGQ+cH5J0r6S9448d7pxbZ2ZjJD1iZq+mW3fRzC6SdJEkjR07VosXL+7hW8JgVFtbyzWAvMX1O\/Bc8NeSS9x2\/o7iNbz2j8XH2rX7Gy75b7aUv\/kszV+FbYFwkGmsa9SKJSu6PxDIUVzD6I2Yi2l1aLXCFs52UyT173eIngbEL0q6y8zWyf9VOE7S2d2cs0bShKT71fJVwjbOuZ1JtxeZ2S\/NbJRzbotzbl18\/yYzu0e+y2qHgBivLN4oSbNmzXJz587t4VvCYLR48WJxDSBfcf32XFDBS67cJVf2WmOtbT9bY62KuqiisaiiLqpYLJZ4Hrn2VTantiqd5BfODlmobV+wHx2tWLJC+x+8f7abAfQZ1zB6o665TmPKxqiquCrbTZHUv98hugyIZnawpHedc0vMbIqkz0iaJ+khJWYe7cwSSXub2SRJayV9TNI5Kc+\/m6SNzjlnZrMlhSRtNbMySSHnXE389gmSvtP7twcAyFWpXTWTw16wDEFrrLUt2AW3Y0oc065C1+6mtQW74HYkFFGhFdLtEgCALnRXQfy1\/OQ0knSopK9L+rykGfJVuzM7O9E512pml0p6WH6ZiwXOuRVmdnH88Rvi519iZq3yXVY\/Fg+LYyXdE\/9LPCLp9865h\/r2FgEAmZJauUsOe0Gwi8ai7cJeUNlLDnTpwl4w1i65elcQLmgLfgAAoP91FxDDzrlt8dtnS7rROfdnSX82s+XdPblzbpGkRSn7bki6\/XNJP09z3tuSpnf3\/ACAXZM8S2ZnYS+1m2ZwO+iqma6bphSfQCWpgmdmCoVCiliENegAAMhR3QZEM4s451olHaf4ZDA9PBcAMAA666aZ3FUzuZtmMD4v6nw1r7NJVpxz7cbgJXfVLLACxuMBADAIdRfy\/iDpn2a2Rb4L6L8kyczeJ2lHhtsGAENGzPlqXEu0pUPYS+6WmRz2gmpeEOo6G5OXrqtmxBiPBwAAOuoyIDrnrjGzv0vaXdLfXNv83grJj0UEAKhjV810i5qndtNsjbW2VfgkqSnapHe2v9P2fG1hL2k8XvKMmoWRQrpqAgCAftVtN1Hn3FNp9r2emeYAQPYM9NIJkZBf0LzYitv2lxeWD+h7BgAASMY4QgCDSn8vnZAc9lIreCZj6QQAADCoEBAB5JzOZtQMlk7oUMlj6QQAAIB+QUAEkBGp4+92demEIOylLp0QslDb0glBV00AAAD0DQERQL9wzqkp2qSGlgbtaNyh5mhz4rGUsJfcVZOlEwAAAHIHARFAn7XGWtXU2qSaphrVNNco5mJ+ds1wocqLmGwFAAAg3xAQAfRYhyphrFnOORWEC1RSUEL1DwAADHp3v3K3fvDED7S+Zr32qNpD1xx3jc6dem62m9VvCIgAutRllZAlGQAAwBBy9yt364pHrlBDa4MkadWOVbrogYskadCERAIigHaoEgIAgKHAOaeWWIsaWxvV1NqkpmiTGlsbO9xPvv3df363LRwG6lvqddXfryIgAhg8qBICAIBsCNYobmxtVFO0SU2tTWpobWi73dTa1O6xxtZGNUaTQltLF4+lC3qtTWqMJkKgk+uX97F6x+p+eZ5cQEAEhqCuqoSlBaWsBwgAwBDTFtJSAlRqwGr3WFIw61CBi6YPd+meI+ZifW63yVQUKVJxuFjFkWIVRYr8\/UixisL+dlVxVdvtdseFi1RcUNz5YynPVxwu1kfu+IjW167v0I49qvbYlY8\/pxAQgSEi+IO\/tqlWNc01fukJGVVCAAByRDQWbQtUqV0dk8NWagjr6rF0xwVVtuTHoi66S20vDhcngllqwAoXqby0vC1kpQa45PvFkeJ2j6XeTr1fECoY0H\/Y\/vqRX283BlGSSgtKdc1x1wxYGzKNgAgMUqlVwqZokyRRJQQA9Iu7X7lb1z5xrdbVrNO4inG68ogrNW\/fedlu1i6LxqLtK2bJASslgLXrtpgcyqKdjGPr6jmiTWqNte5S29OFquSgNqJkRLvQli7QJQe11OM6e6woXDRkvlcE1zizmALIC11VCSuKKrLdPGDQGqxflIHOpM7kuLZmra545ApJ6pdrP+ZiHapiXXZhTNMNsrPujZ09R0Nzg1qebFFLrGWX2l4YLuy0+lUULtKw4mGdVs+KIkUqiZSkDXfJ3RzTVeiKIkVMJDdA5u07TyfudaLGlI1RVXFVtpvT7wiIQB6jSghkX6a\/KA91zrm2SSSC253tazsn6X7y8en2pb5OZ8e0PR6c47o4Jvk5UtvWxeskP0+7n128Tts+36CefVY9eJ3u3sPVi6\/uMJNjQ2uDvvGPb2hj7cb0E4WkBr7OJhGJNqk52tzFVdG9glBB2hAVVMGqiqo0pmxMu8fqttZp3PhxabtAJh9XEinpWIFLeh1CGvIdARHIM51VCYsiRaqIUCUEMs05py31W7S2Zq3W7Fyjb\/zjG2m\/KP\/33\/5bt79we88CTZov7ulCRPBY274eBJp2oaEHQaMt+HTTluC5g32tra0KPR3qcEzyeb1uC\/LOjqYd+t6\/vidJioQi6UNU\/GdFYYVGlY7q0B0yOYClm3QkXTfH4HbwWDgU7nXbVyxZof0P3r+\/PxIg7xAQgRxHlRAYWI2tjVpfs15ratZo3c51bUFwbc1ard25Vutq1rX9f9iV5mizQhaSmclkbT8lJfal3Pf\/pRwT\/3+87Yyk5wmOb3dM8usk3287pfO2pD5PoCdt2bZpm0aOHZm2LV29p7TvuYv3lPyeu\/s8e\/oeUt9zjz7P7n5vadrS5e+tk\/ec7j10dkyn77mLtqS9Pjr7fJNe57x7z9Omuk1KtXv57vrn\/H+qKFKkSIivmUA+4v9cIAdRJQQywzmn9xrf07qadT707VzbFgCDfZvrN3c4b2zZWI2vHK8DxhygE\/c6UdWV1RpfOV7jKsZp\/r3z0055Pr5ivP700T8NxNvKCVRfhpZvHvXNDjM5lkRK9PUjv66ywrIstgzAriIgAjmAKiHQP1qiLdpQuyFR8YtX\/YIguLZmrepb6tudUxwu1rjKcaqurNbxk4\/X+MrxGl\/ht+rKau1WvpuKIkWdvma6Kc9LIiW68ogrM\/Y+gWwLxtcyORMw+BAQgSyhSgj03s6mnVq7c63W1Kxp6+4ZhME1O9doY+3GDuPXRpaMVHVltfYesbeOnni0r\/4lBcARJSN26R9h+KKMoWrevvO4zoFBiIAIDBCqhEDXorGoNtZt7FD1S+7+WdNc0+6cglCBxlWM0\/jK8TpyjyPbQt\/4yvG+C2j5OJUUlGS87XxRBgAMFgREIIOoEgIJ9S31vvqX1P1zzc7ERDDra9d3WCR6WNEwja8crwlVE3RI9SGqrqz2gTAeBEeXjWZKeQAA+hEBEehHVAkxVMVczC\/90EX3z+2N29udE7awdivfTdWV1Tp43MFt4wCD8DeuYpzKC8uz84YAABiiCIjALgqqhDVNNaptrqVKiEGpsbWxLfCtq1nXLgiurVmr9TXrOyz9UF5YruqKao2rHKeZu81MjP2Ld\/8cWzaWafABAMgx\/M0M9BJVQgw2wdIPXXX\/TF36wWRtSz9MGztNH3zfBxPdPyvHq7qiWpVFlfz\/AABAniEgAj1AlRD5rDnarA21Gzrt\/rl259p2SzRIUnGkuK3it9\/o\/dqqfslLPxSGC7P0jgAAQKYQEIE00lUJzUyRUIQqIXLOjsYd7Wb7TO3+mW7ph1Glo1RdUa19Ru6jYyYe0677Z3VltYYXD+c6BwBgCCIgAnFUCZGLWmOt2li3Uet2ruu0+2fq0g+F4UKNK\/ddPY\/a86h2k75UV1Zr9\/LdB2TpBwAAkH8IiBiyqBIiF9Q117V183xm\/TN64IkH2ip\/weQvURdtd86w4mGqrqzWnsP21GETDuvQ\/XNU6SiWfgAAAH1CQMSQQpUQAynmYtpct7nL7p\/pln7YvWJ3VVdUa\/b42YmF3ysSIbCssCw7bwgAAAx6BEQMalQJkUkNLQ1aV+tDX3LVL+j+ua52nZqjze3OCZZ+GF85XgeNO6jt9viK8ap7p05HHnakwqFwlt4RAAAY6giIGHSoEqI\/OOe0rWFbW+ALuoEmB8Et9VvanWMyjS0fq+rKak3fbbo+VPGhDt0\/K4sqO33NFetWEA4BAEBWERCR94IqYX1LvZqjzXpr21tUCdGt5miz1tesbxcA1+1c1677Z2NrY7tzSiIlbWv8HTDmgLbgl7z0Q0G4IEvvCAAAYNcREJGXUquEMRdrm5Sjoogq4VDnnNOOph0dqn7JQXBjXcelH0aXjlZ1ZbWmjJqi4yYf16775\/jK8Sz9AAAABj0CIvJCcpVwZ+POTscS8uV9aGiNtWpj7cYuu3\/WNte2O6cwXNi2zMPRE49um\/hlXOU4VVdUa\/eK3VUcKc7SOwIAAMgNBETkrM6qhIwlHPxqm2vTVv2C7p8bajd0WPphePFwVVdWa9KwSTpijyM6dP8cWTqSpR8AAAC6QUBEzuhplRC57e5X7ta1T1yrdTXrNK5inK484krN23de2+MxF9Omuk1tyz0Ei70nB8HtTdvbPWckFNHu5bururJah1Qf0jYOcHxlYgH40oLSAX6nAAAAgw8BEVlFlXBwufuVu3XFI1eoobVBkrS2Zq2+9PCXdNvztykcCmtdzTqtq1mnllhLu\/MqiyrbxvkdPO7gDt0\/x5SNYXZPAACAAUBAxICiSjh4Oef07X9+uy0cBlpjrXp2\/bM6aPeDNHO3mTpln1PaLfswrmJcl0s\/AAAAYOAQEJFxVAkHt4aWBt3z6j1asGxBh3UBA8453fuxewe2YQAAALvAOScn1\/Yz5mJtt1N7Qw0mBET0O6qEQ8OanWv0u+W\/0+9f+r22N27XvqP21bDiYdreuL3DseMqxg18A4EBFI1F1RJrUczFJEmm9jMrm0xm1ulPAEDvpIa37n7KSTL16mcoFFJIIZmZQhZS2MIKh8MKKaSKwopBO\/s5ARH9girh0OCc01NrntKCZQv00FsPSZJOet9J+uTMT2rO+Dm659V72o1BlPzi8lcecWW2mgz0q5iLqSXaoqiLKhqLymRycioMF6okUtL2ZSHmYu224EtKcD\/qov6+YorFYu2+lDiXWJ\/TZF1+gUkOmm3ndBFECaQABkJPQpukdlW5gJn1KbylbmELKxSK\/7RQj\/5s5M9Kj4CIPqFKOLQkdyN9ZcsrGlY8TJfMukTnTz9f4yvHtx0XzFba1SymQD6IuZhaY62KxqKJJVWcn1G3KFKk0oJSFYYLVRAuUCQU2eUlVDr9F+8uHksOnMlBNBaLtX3p6k0g7cmXsuQvTclVUpPJOaeWaAtfsoAc15vwllp96+k\/YHUX3tJtwZ8ZPQ1zyBwCInqsJdqipmgTVcIhZO3Otfrd87\/TwhcXtnUj\/ckHfqLTppymkoKStOfM23cegRB5wzmn1lhrWxh0cm1faIrDxaoorlBRpEgFIR8EMzWbblsVcIC+8\/RnIA32B59bV4E0eI3uKqM9CaR8ccRgtCvhLd3PdP\/P7Up4S\/3Z2WPIbwREdCq5SrijcYeao81UCYeAzrqRXjjjQh1SfQi\/d+Ql55yiLqqWaEtbuAm+yBRHilVZVKmSghJFQhEVhAoG\/bIqmQikr4Ve04SqCWkf620QTRdIg8CZLqimC6TOubYuwL0JpO0+HxFI0V5Xk5b0NrylC3Mm8wHOEl0j+xrekn+GLNTumga6QkBEO1QJh66Glgbd++q9umnZTe26kZ43\/TxVV1Znu3lAjwUVwdZYqyT\/hS5kIRWGC1VRVKHicLEKwgUqCBcobGG+LA2AbFZIJXUaQDsLpJ111e1JIO1pGAg+i+Qv8smfFYG097r73Updh7dYLKba5tpejXuLWMRPWrIL4Y3fL3INAXGIo0qIdN1If\/yBH+v0Kad32o0UyAXRWLQtCAZf+MxMBaEClRWUqThSrMJwoSKhiCKhCH+eDSH5FEiTK1GdbamBNLjWe1Od6msgDY7pz8+oq66TyV2Xe\/seu+o6GQ75mSfDoXCn4W1tZK32rNqT8IYhj4A4BFElhHNOT699Wjctu0kPvRnvRrrXSbpwJt1IkXuCCWNaY61tX6hN\/h+ySgr8zKFFkaK2ILirE8YAvZWtQJp8O5OB1L9J9WmZgJ6Et66qb0HXyIGovJlMRZGiXX4eIN8REIcAqoQI0I0Uucw5v\/BwUBk08zNjRkKRtnGCRWEfBAvCBQRBDFntljYZgL\/Ce1IZpdskMHgQEAepoEq4s2mn6prrFHMxhUNhPwaHKuGQs3bnWt36\/K26\/cXb6UaKrEudOVTyXzzDobCKwkUDNnMogJ5pN5MsWQ8Y9AiIgwRVQqRK7kb68JsPy8nRjRQDLnXCGDn\/ZbMoUqTKokoVR4rb1hKMhPgrCQCAbONv4zxGlRDpNLQ06L7X7tNNy27Sy5tf1rDiYbp41sV0I0VGRWPRtu6hwZp4klQYKmTCGAAA8ggBMY\/EXEzN0WaqhEhrbc1a3br8Vi18caHea3yPbqTIiJiLqSXaoqiLKhqLyuTXmSsMF6okUqLSglK\/hES8eyh\/LgEAkF8IiDmOKiG6EnQjXbBsgR5686G2bqQXzLxAh1Yfypdz9FlXM4cWFxSrJFKiwnBhW\/dQJowBAGBwICDmGKqE6IkO3UiLhukzB31G5884n26k6JXUCWOC9dVCFlJJpEQVhRUqjhQzcygAAEMEATEHUCVET62t8bORLnyBbqToHeecoi6qlmhLW0VQ8hPGBEtIlBSU+CAYKmDmUAAAhqiMBkQzO0nSTyWFJf3WOXdtyuNzJd0n6Z34rrudc9\/pybn5jCohesM5p2fWPtO2qL2T04l7nagLZ15IN1KklTpzqHNOIQv5f3QqqlBJpKStIsjMoQAAIFnGvhmYWVjSLyR9QNIaSUvM7H7n3Msph\/7LOXdKH8\/NG1QJ0Vt0I0V3ggXlW2OticWqzVQQKmDmUAAA0CeZ\/Kfj2ZLedM69LUlmdoekj0jqScjblXNzSnO0Wet2rlNTtIkqIXoktRvplJFT9KPjf6R5+86jG+kQ1dnMoQXhApVESvyEMZHCtu6h\/PkCAAD6KpMBcbykd5Pur5E0J81xh5rZ85LWSfqyc25FL87Nea2xVjVFm1RRRJUQnaMbKQLN0ea2yqCZyTmnglCBiiJFKi0obasIMmEMAADIhEwGxHTfaF3K\/eck7emcqzWzD0m6V9LePTzXv4jZRZIukqSxY8dq8eLFfW1vRgT\/8h8K8UVuIDTWNWrFkhXZbkaPNUWb9Njmx3Tfuvv0Vt1bqohUaN74efrw7h\/WbsW7SRuklzfkXeEcPRB0CU3+k62poUlvLH1DIQvJzPyW9o9DIPfU1tbm3N\/BQG9wDSOf9ef1m8mAuEbShKT71fJVwjbOuZ1JtxeZ2S\/NbFRPzk0670ZJN0rSrFmz3Ny5c\/ul8f2lvqVea3asUXlRebabMiSsWLJC+x+8f7ab0a203UgPpRvpYJM8c2jURdvWEjQzFUWKVBIpUXGkuG2ymCcef0K59mcY0FOLFy\/m+kVe4xpGPuvP6zeTAXGJpL3NbJKktZI+Jumc5APMbDdJG51zzsxmSwpJ2ippe3fnAvkm6Ea6YPkC\/fWNv8rJ6YTJJ+jCmRfqsAmH0Y00z0VjUbXEWhSNRRVzsbbfZ1G4SOWF5SqJlKggXKCCcIHCFub3DQAAclLGAqJzrtXMLpX0sPxSFQuccyvM7OL44zdIOlPSJWbWKqlB0secX5wr7bmZaiuQSY2tjbrvVT8b6YrNK1RVVKWLDrpI508\/XxOqJnT\/BMgpXc0cWhopVUlBPAiGCpg5FAAA5J2MLoDlnFskaVHKvhuSbv9c0s97ei6QT4JupL9\/8ffa1rBNU0ZO0Q+P\/6Hm7TtPpQWl2W4euhFzsbYgGCwsb\/IzEZcUlLQtIRF0D2XCGAAAMBiwQjLQj5xzWrJuiW5adhPdSPOEc66ta2g0Fm2bIitkIZVESlRRWKHiSDEzhwIAgCGBgAj0g6Ab6YLlC\/TSppdUVVSlTx\/4aZ0\/43ztUbVHtpsH+SAYVASjsajfJ6dwKOzHCRaVq7iguG0twXAonOUWAwAADDwCIrAL1tWs87ORvrhQ2xq26f0j30830hwQBMHWWKskHw5DFlJhuFCVRZXtZg6NhPhjEAAAIMA3I6CXUruRxlxMJ+51oi6YeYEOn3A43UgHUGczhxaGClVWUNY2TjAIgvxuAAAAukZABHqosbVR9712nxYsoxvpQIu5WNtagtFYVCaTk1NhuFAlkRKVFpS2VQQLQgUEQQAAgD4iIALdSNeN9Nrjr9UZ+55BN9J+ljpzqCTJSZFQREWRIpUWlDJzKAAAQAYREIE0nHN6dt2zumnZTVr0xiLFXEwn7OVnI6Ub6a5LnTAmWEswZCEVh4tVUVyhokhR21qCTBgDAAAwMAiIQBK6kfYv55yiLqqWaItiLubHCcpkZiqOFKuyqFIlBSXMHAoAAJAjCIiApPU163XrC7fq9hdu17aGbdpn5D50I90FDS0Nao21ts0cWlFUoeKwnzm0IFygsIWpwgIAAOQgAiKGrM66kV4w8wIdMeEIAkwfNEeb1djaqKqiKo0oGaHCcCGfIwAAQB4hIGLIaWxt1P2v3a8FyxboxU0vqrKoUp868FM6f\/r52nPYntluXl6KxqKqb6lXUbhIe1btqZKCkmw3CQAAAH1AQMSQQTfS\/uecU11znUIW0u7lu6uiqIKKIQAAQB4jIGJQC7qRLli+QIveWKRoLKoP7PUBXTjzQrqR7qKGlgZFXVQjSkZoeMlwJpgBAAAYBAiIGJTSdSP95MxP0o20HySPMxxZOlKF4cJsNwkAAAD9hICIQWVL0xb96Mkf6fYXbtfWhq3ae8Te+sFxP9AZ+56hssKybDcvrzHOEAAAYPAjICLvOef07PpntWDZAj34+oOKuRjdSPsR4wwBAACGDgIi8lbQjfTm5TfrhY0vqLKoUqeNO03\/feJ\/0420nwTrGY4sGck4QwAAgCGAgIi8s75mvW574ba03UhXPr+ScNgPgnGGlUWVGlU6inGGAAAAQwQBEXkh6EZ687Kb9eAbD7bNRnrBjAt05B5H0uWxnzDOEAAAYGgjICKnNbU26f7X\/WykQTfSC2deqPnT51Mp7EfOOdW31MtkjDMEAAAYwgiIyEkbajfo1udv1cIXF2pL\/RZmI80gxhkCAAAgQEBEznDOaen6pX420ng30uMnH68LZ15IN9IMYJwhAAAAUhEQkXVBN9Kbl92s5zc+TzfSDGOcIQAAADpDQETWbKjdoNuev023v3h7WzfS7x\/3fZ2575l0I80AxhkCAACgOwREDCi6kWYH4wwBAADQEwREDIim1iY98PoDWrBsQVs30gtmXKD5M+Zr4rCJ2W7eoMU4QwAAAPQGAREZldqN9H0j3kc30gHAOEMAAAD0BQER\/c45p+fWP6cFyxboL2\/8hW6kA4hxhgAAANgVBET0m9RupBWFFXQjHUCMMwQAAMCuIiBil22s3ajbXrhNt71wW1s30muOvUZn7XcW3UgHQHO0WU2tTSovLNfostGMMwQAAECfERDRJ+m6kR43+Th9cuYn6UY6QJLHGU6omqDSgtJsNwkAAAB5joCIXmlqbdJfXv+LFixboOUbl9ONNAsYZwgAAIBMISCiR+hGmhsYZwgAAIBMIiCiS0E30gdef6CtG+mFMy7UkXseqZCFst28IaM52qzGlkZVFFUwzhAAAAAZQ0BEB+m6kc6fMV\/zp8\/XpOGTst28ISUYZ1gYLtQew\/ZgnCEAAAAyioCINhtrN+r2F27XbS\/cps31m7XX8L10zbHX6Mz9zlR5YXm2mzekMM4QAAAA2UBARGI20tf\/otZYq46ddKyfjZRupFnBOEMAAABkCwFxiAq6kd68\/GYt27BMFYUVOn\/G+XQjzSLGGQIAACDbCIhDDN1Icw\/jDAEAAJArCIhDxHPrn9PNy27WA68\/oJZYi46bdBzdSLMseZzhbuW7qbKoknGGAAAAyCoC4iDWHG1um4006EZ63vTzNH\/GfE0ePjnbzRvSGGcIAACAXERAHIQ21W3Sbc\/fpttfvF2b6jbRjTSHMM4QAAAAuYyAOIikdiMNZiM9as+j6EaaZYwzBAAAQD4gIOa51G6k5YXldCPNIcE4Q0mMMwQAAEDOIyDmqdRupJOHT9b3jvmeztr\/LLqR5gjGGQIAACDfEBDzzLL1y7Rg2QK6keawlmiLGloaGGcIAACAvENAzAN0I80P0VhUDS0NKggXMM4QAAAAeYmAmMM21W1qW9SebqS5K3mc4djysYwzBAAAQN4iIOagdN1IL5xxoY6eeDTdSHNMMM5wRMkIjSgZwThDAAAA5DUCYo5ojjbrwdcf1E3LbmrXjfT8Gedrr+F7Zbt5SME4QwAAAAxGBMQsS9eN9LvHfFdn7XeWKooqst08pAjWM2ScIQAAAAYjAmKWLN+wXDctu0kPvBbvRjrxWF14At1IcxXrGQIAAGAoICBm0MIXF+prj35Na3au0biKcfryYV9WQaiAbqR5pqGlQS2xlrb1DCMh\/rcBAADA4MQ33QxZ+OJCXfTARW1Vp7U1a\/Wlh78kSZo0bBLdSPNA8jjD6tJqFUWKst0kAAAAIKMIiBly1d+vaguHyUaWjNTjFzxON9IcxjhDAAAADFUExAxZvWN12v3bGrYRDnOUc04NLQ1ycowzBAAAwJBEQMyQPar20KodqzrsH1cxLgutQXcYZwgAAABIlLIy5JrjrunQNbEkUqIrj7gySy1COi3RFu1s3KmicJEmDZuk0WWjCYcAAAAYsvgmnCHnTj1XktrNYnrlEVdq3r7zstwySFLMxVTXXMc4QwAAACBJRgOimZ0k6aeSwpJ+65y7tpPjDpb0lKSznXN\/iu9bKalGUlRSq3NuVibbmgnnTj1Xp085XWt2rFF5UXm2mwN1HGdYUVTBmFAAAAAgLmMB0czCkn4h6QOS1khaYmb3O+deTnPcDyU9nOZpjnHObclUGzG0NLY2qjnazDhDAAAAoBOZLJ3MlvSmc+5t51yzpDskfSTNcZ+X9GdJmzLYFgxhwTjDwlAh4wwBAACALmQyII6X9G7S\/TXxfW3MbLyk0yXdkOZ8J+lvZrbUzC7KWCsxaMVcTDVNNYq6qPYYtoeqq1jsHgAAAOhKJsso6RaQcyn3r5f0VedcNM16c4c759aZ2RhJj5jZq865xzu8iA+PF0nS2LFjtXjx4l1ueH+KuZhaoi0KhRjnNhAa6xq1YskKxVxMkhQJRRS2sFYr\/bqUQC6pra3NuT\/DgJ7i+kW+4xpGPuvP6zeTAXGNpAlJ96slrUs5ZpakO+LhcJSkD5lZq3PuXufcOklyzm0ys3vku6x2CIjOuRsl3ShJs2bNcnPnzu3v97FL6lvqmaRmAL30zEuaMG2CRpSM0IiSEXQlRV5ZvHixcu3PMKCnuH6R77iGkc\/68\/rN5LfnJZL2NrNJktZK+pikc5IPcM5NCm6b2S2S\/uKcu9fMyiSFnHM18dsnSPpOBtuKPNcSbVFDS4NMpknDJtGVFAAAAOiDjAVE51yrmV0qPztpWNIC59wKM7s4\/ni6cYeBsZLuiVcWI5J+75x7KFNtRf5KXs9wQtUEbQhvIBwCAAAAfZTR\/nfOuUWSFqXsSxsMnXPzk26\/LWl6JtuG\/MZ6hgAAAED\/Y4AW8k6wniHjDAEAAID+xTdr5I2WaIsaWxtVWlCq8RXj6UoKAAAA9DMCInJe2zjDUIGqK6tVVliW7SYBAAAAgxIBETkreZzh2PKxqiyqZJwhAAAAkEEEROSkxtZGtURbNLxkOOMMAQAAgAHCt27klJZoixpaG1RWUMY4QwAAAGCAERCRE5LHGU6onMA4QwAAACALCIjIKsYZAgAAALmDgIisYZwhAAAAkFv4Ro4BxzhDAAAAIDcREDFgYi6m+pZ6RSzCOEMAAAAgBxEQkXHJ4wxHl45WVXEV4wwBAACAHERAREYxzhAAAADIH3xbR0YwzhAAAADIPwRE9KvUcYalBaUys2w3CwAAAEAPEBDRL4JxhjEX0+gyxhkCAAAA+YiAiF3GOEMAAABgcOCbPPqsNdaq+pZ6xhkCAAAAgwQBEb3GOEMAAABgcCIgosecc2pobVAsxjhDAAAAYDAiIKJHgnGGw4qHaWTpSMYZAgAAAIMQ3\/LRJcYZAgAAAEMHARFpMc4QAAAAGHoIiGiHcYYAAADA0EVARJvG1kY1tzZreMlwxhkCAAAAQxAJAO3GGY4bPk7FkeJsNwkAAABAFhAQhzDGGQIAAABIRkAcghhnCAAAACAdAuIQ09TapKbWJsYZAgAAAOiAdDBEBOMMSwtKNXH4RMYZAgAAAOiAgDjIMc4QAAAAQE8REAcpxhkCAAAA6C0C4iDEOEMAAAAAfUFyGERaY61qaGlQSUEJ4wwBAAAA9BoBcRBIHmc4rmKcygvLGWcIAAAAoNcIiHmuvqWecYYAAAAA+gUBMU8xzhAAAABAfyNV5BnGGQIAAADIFAJingjGGYYtzDhDAAAAABlBQMwDjDMEAAAAMBAIiDkseZzhiJIRKggXZLtJAAAAAAYxAmIOYpwhAAAAgGwgIOaQmIupoaVBIQsxzhAAAADAgCMg5gjGGQIAAADINgJilgXjDIcVD9PI0pGMMwQAAACQNQTELGGcIQAAAIBcQ0AcYIwzBAAAAJCrCIgDKBhnOKpslIYVD2OcIQAAAICcQkAcAC2xFu1s3Mk4QwAAAAA5jYCYYSELqaq4SqNKRzHOEAAAAEBOIyBmWHGkWNWV1dluBgAAAAB0i0FwAAAAAABJBEQAAAAAQBwBEQAAAAAgiYAIAAAAAIgjIAIAAAAAJBEQAQAAAABxBEQAAAAAgCQCIgAAAAAgLqMB0cxOMrPXzOxNM7uyi+MONrOomZ3Z23MBAAAAAP0jYwHRzMKSfiHpg5L2k\/RxM9uvk+N+KOnh3p4LAAAAAOg\/mawgzpb0pnPubedcs6Q7JH0kzXGfl\/RnSZv6cC4AAAAAoJ9EMvjc4yW9m3R\/jaQ5yQeY2XhJp0s6VtLBvTk36TkuknSRJI0dO1aLFy\/e1XYjj9XW1nINIG9x\/SKfcf0i33ENI5\/15\/WbyYBoafa5lPvXS\/qqcy5q1u7wnpzrdzp3o6QbJWnWrFlu7ty5vW4oBo\/FixeLawD5iusX+YzrF\/mOaxj5rD+v30wGxDWSJiTdr5a0LuWYWZLuiIfDUZI+ZGatPTwXAAAAANCPMhkQl0ja28wmSVor6WOSzkk+wDk3KbhtZrdI+otz7l4zi3R3LgAAAACgf2UsIDrnWs3sUvnZScOSFjjnVpjZxfHHb+jtuZlqKwAAAAAgsxVEOecWSVqUsi9tMHTOze\/uXAAAAABA5mRymQsAAAAAQB4x59JODpqXzGyzpFXZbgeyapSkLdluBNBHXL\/IZ1y\/yHdcw8hnydfvns650X19okEVEAEze9Y5Nyvb7QD6gusX+YzrF\/mOaxj5rD+vX7qYAgAAAAAkERABAAAAAHEERAw2N2a7AcAu4PpFPuP6Rb7jGkY+67frlzGIAAAAAABJVBABAAAAAHEEROQ8M1tgZpvM7KWkfSPM7BEzeyP+c3jSY18zszfN7DUzOzFp\/0Fm9mL8sZ+ZmQ30e8HQYmYTzOwxM3vFzFaY2Rfi+7l+kfPMrNjMnjGz5+PX77fj+7l+kTfMLGxmy8zsL\/H7XL\/IG2a2Mn7tLTezZ+P7Mn4NExCRD26RdFLKvisl\/d05t7ekv8fvy8z2k\/QxSfvHz\/mlmYXj5\/xK0kWS9o5vqc8J9LdWSf\/tnNtX0iGSPhe\/Rrl+kQ+aJB3rnJsuaYakk8zsEHH9Ir98QdIrSfe5fpFvjnHOzUhawiLj1zABETnPOfe4pG0puz8i6Xfx27+TdFrS\/jucc03OuXckvSlptpntLqnSOfcf5wfe3pp0DpARzrn1zrnn4rdr5L+kjBfXL\/KA82rjdwvimxPXL\/KEmVVLOlnSb5N2c\/0i32X8GiYgIl+Ndc6tl\/yXcElj4vvHS3o36bg18X3j47dT9wMDwswmSpop6Wlx\/SJPxLvnLZe0SdIjzjmuX+ST6yVdISmWtI\/rF\/nESfqbmS01s4vi+zJ+DUf6oeFALknXp9p1sR\/IODMrl\/RnSV90zu3sous\/1y9yinMuKmmGmQ2TdI+ZHdDF4Vy\/yBlmdoqkTc65pWY2tyenpNnH9YtsO9w5t87Mxkh6xMxe7eLYfruGqSAiX22Ml8wV\/7kpvn+NpAlJx1VLWhffX51mP5BRZlYgHw4XOufuju\/m+kVecc5tl7RYftwK1y\/yweGSTjWzlZLukHSsmd0url\/kEefcuvjPTZLukTRbA3ANExCRr+6XdH789vmS7kva\/zEzKzKzSfIDcZ+Jl+BrzOyQ+MxN5yWdA2RE\/Fq7SdIrzrn\/l\/QQ1y9ynpmNjlcOZWYlko6X9Kq4fpEHnHNfc85VO+cmyk\/c8Q\/n3H+J6xd5wszKzKwiuC3pBEkvaQCuYbqYIueZ2R8kzZU0yszWSPofSddK+qOZfVLSaklnSZJzboWZ\/VHSy\/IzSH4u3kVKki6RnxG1RNJf4xuQSYdL+oSkF+PjuCTp6+L6RX7YXdLv4rPghST90Tn3FzP7j7h+kb\/48xf5Yqx8137JZ7bfO+ceMrMlyvA1bH4yGwAAAADAUEcXUwAAAACAJAIiAAAAACCOgAgAAAAAkERABAAAAADEERABAAAAAJIIiACAHGVmI81seXzbYGZrk+4XdnPuLDP7WQ9e49\/91+LsM7P5ZvbzbLcDAJC\/WAcRAJCTnHNbJc2QJDO7WlKtc+4nweNmFnHOtXZy7rOSnu3BaxzWL40FAGCQoIIIAMgbZnaLmf0\/M3tM0g\/NbLaZ\/dvMlsV\/vj9+3Fwz+0v89tVmtsDMFpvZ22Z2WdLz1SYdv9jM\/mRmr5rZQouvTmxmH4rve8LMfhY8b0q7wmb2YzNbYmYvmNln4vsvN7MF8dtTzewlMyvtot3zzexeM3vAzN4xs0vjz7HMzJ4ysxHx4xab2fXxc18ys9lp2jTazP4cb9MSMzs8vv\/opErsMjOr6NdfEgAgr1FBBADkm30kHe+ci5pZpaSjnHOtZna8pO9LOiPNOVMkHSOpQtJrZvYr51xLyjEzJe0vaZ2kJyUdbmbPSvp1\/DXeMbM\/dNKmT0ra4Zw72MyKJD1pZn+TdL2kxWZ2uqSrJH3GOVdvZq920e4D4m0plvSmpK8652aa2XWSzos\/pySVOecOM7OjJC2In5fsp5Kuc849YWZ7SHpY0r6Svizpc865J82sXFJjJ+8JADAEERABAPnmLudcNH67StLvzGxvSU5SQSfnPOica5LUZGabJI2VtCblmGecc2skycyWS5ooqVbS2865d+LH\/EHSRWme\/wRJ08zszKR27R0PlfMlvSDp1865J3vQ7secczWSasxsh6QH4vtflDQt6bg\/SJJz7nEzqzSzYSltOl7SfvFCqCRVxquFT0r6f2a2UNLdwXsGAEAiIAIA8k9d0u3vygeq081soqTFnZzTlHQ7qvR\/\/6U7xtIcl45J+rxz7uE0j+0tHzTHJe3rqt3J7Ygl3Y+ltNulvE7q\/ZCkQ51zDSn7rzWzByV9SNJTZna8c+7VtO8KADDkMAYRAJDPqiStjd+en4Hnf1XS5HiIk6SzOznuYUmXmFmBJJnZPmZWZmZV8l09j5I0MqXCuKvtPjv+WkfId2\/dkfL43yRdGtwxsxnxn3s55150zv1QfiKfKX18fQDAIERABADksx9J+oGZPSkp3N9PHq++fVbSQ2b2hKSNklKDmCT9VtLLkp4zs5fkxy1GJF0n6ZfOudflxylea2Zj+qnd78WX6bgh\/typLpM0Kz5pzsuSLo7v\/2J8YpvnJTVI+msfXx8AMAiZc6k9UgAAQMDMyp1ztfFZTX8h6Q3n3HVZbtNiSV+OL+cBAEC\/oYIIAEDXPh2ftGaFfNfQX2e3OQAAZA4VRAAAAACAJCqIAAAAAIA4AiIAAAAAQBIBEQAAAAAQR0AEAAAAAEgiIAIAAAAA4giIAAAAAABJ0v8H2uYBmWgRGrEAAAAASUVORK5CYII=)","7e14d4a9":"\u0412 \u0438\u0442\u043e\u0433\u0435, \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0431\u044b\u043b\u043e \u0440\u0435\u0448\u0435\u043d\u043e \u043d\u0435 \u0438\u0437\u0431\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u043e\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u0438 \u043f\u043e\u044f\u0432\u0438\u043b\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445:","f504488c":"\u043f\u043e\u0434\u0446\u0435\u043f\u043b\u044f\u0435\u043c \u0434\u043e\u043f.\u0444\u0443\u043d\u043a\u0446\u0438\u0438","01c80a66":"\u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u0432 \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u0440\u0435\u0448\u0438\u043b \u0441\u0434\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u0431\u044b\u0441\u0442\u0440\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u044c\u044e RandomForestClassifier, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043b\u0435\u0433\u043a\u043e \u0432\u044b\u0434\u0430\u0432\u0430\u043b\u0430 \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043c\u044b\u0435 \u0441 \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b, \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u043e\u0442\n\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.  \n**\u0418 \u0442\u0430\u043a:**  \n* \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u0442\u0440\u0435\u0439\u043d \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e, \u043f\u043e\u0433\u043e\u043d\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438, \u0438\u0442\u043e\u0433\u0438 \u0438 \u0432\u044b\u0432\u043e\u0434\u044b","102d19b5":"\u041e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c","9514d4fd":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043f\u0440\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0430\u044f \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0441\u0445\u043e\u0436\u0438. \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0430, \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0432 2,55 \u0440\u0430\u0437\u0430 \u0440\u0435\u0436\u0435.\n\n\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0441\u0440\u0430\u0432\u043d\u0438\u043c \u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u0435:","7f2d9edd":"***","6d169dd6":"\u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435","4634027e":"\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f statmodel","2545cfe8":"\u042d\u0442\u043e\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0434\u0430\u0451\u0442 **0.56920** \u043d\u0430 \u043f\u0430\u0431\u043b\u0438\u043a\u0435 \u0438 **0.54593** \u043d\u0430 \u043f\u0440\u0438\u0432\u0430\u0442\u0435","ff27b81c":"\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438\u0442\u043e\u0433\u0438","203184a4":"\u0411\u0430\u043b\u0430\u043d\u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439:","ca3320d8":"\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f:","53827c68":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0443\u0434\u0430\u0441\u0442\u0441\u044f \u043b\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438:","ca536ac9":"\u0422.\u043a. \u043d\u0430\u0434\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \"Annual Income\" \u0440\u0435\u0448\u0438\u043b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u0430\u043a \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441\u0432\u044f\u0437\u0430\u043d \u0441 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c\u0438. \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043b \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438:","a6639011":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u044b\u043b \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d CatBoostClassifier \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438:  \n\n\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","0e7ab8ce":"\u0441\u0440\u0430\u0432\u043d\u0438\u043c \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 RandomForest..\n\n![image.png](attachment:image.png)"}}