{"cell_type":{"a3496647":"code","7f357f4a":"code","6be61240":"code","99878d62":"code","59b70cff":"code","eaa1ca8e":"code","17719726":"code","07436c5b":"code","7dd05a36":"code","09167706":"code","22c93360":"code","ad1cbc5d":"code","d06b0c13":"code","2b1e801f":"code","3f590c4f":"code","8ba2da65":"code","0681dd72":"code","8dec67a2":"code","96cb93c3":"code","27350b00":"code","6c266f45":"code","76471278":"code","6245279c":"code","fd358cb1":"code","28649b6b":"code","45c71092":"code","2bdff190":"code","08b72008":"code","a964eb3b":"code","8e6de039":"code","05f0154d":"code","896d30fa":"code","8532c035":"code","eef423f8":"code","fa46db5d":"code","3a05a093":"code","aaf19d5f":"code","425ed794":"code","6cadbf22":"code","0ca7b1a6":"code","a0943926":"code","a4b965e2":"code","f5d734df":"code","21b4f777":"code","dfa4f8d6":"code","fee2b72f":"code","861dfa65":"code","988f5711":"code","62434b98":"code","edec2436":"code","b1ac92de":"code","5c20e036":"code","80104024":"code","d262f296":"code","22c5bf90":"code","9d50acbd":"code","8b1d61f5":"code","f7cf3877":"code","bf2889f1":"code","37dd1376":"code","fd5fa785":"code","8f25a3f4":"code","34c796a7":"code","0750c3a0":"code","b65b5d00":"code","1da5b4f5":"code","14249a6c":"code","71e90c0b":"code","02657899":"code","05713348":"code","c202e57d":"code","20eda458":"code","f12a1c45":"code","e45dfec7":"code","a0540aa5":"code","068e94c9":"code","de267d4a":"code","fd5f3ddb":"code","1461f98a":"code","a916d8e9":"markdown","2f161212":"markdown","070938ec":"markdown","e7cd4bea":"markdown","bee169b1":"markdown","a4a3f252":"markdown","2f0370b8":"markdown","33fc8076":"markdown","ff1a7a86":"markdown","09164e93":"markdown","f0259b2f":"markdown","703b7507":"markdown","47191dbb":"markdown","a5dd796f":"markdown","653b91d9":"markdown","7fff33d6":"markdown","7b251934":"markdown","7f8ca082":"markdown","2ce09e9b":"markdown","9f4e3b75":"markdown","2ff2be47":"markdown","f810e039":"markdown"},"source":{"a3496647":"!pip install -U scikit-learn\n# \u043e\u0431\u043d\u043e\u0432\u0438\u043c sklearn, \u044d\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 HalvingGridSearchCV\n# \u0435\u0441\u043b\u0438 \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0435 \u0432 jupyter, \u044d\u0442\u043e\u0442 \u0448\u0430\u0433 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f","7f357f4a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime\n\nfrom sklearn.metrics import roc_auc_score, roc_curve, f1_score,\\\n    confusion_matrix, ConfusionMatrixDisplay, precision_recall_curve\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder\nfrom sklearn.linear_model import LogisticRegression\n\n# \u0434\u043b\u044f \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \"successive halving\", \u043e\u043d \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0435\u0439 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e GridSearchCV\nfrom sklearn.experimental import enable_halving_search_cv\nfrom sklearn.model_selection import HalvingGridSearchCV\n\nimport warnings\nwarnings.simplefilter(\"ignore\")","6be61240":"train = pd.read_csv(\"..\/input\/sf-scoring\/train.csv\")\ntest = pd.read_csv(\"..\/input\/sf-scoring\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/sf-scoring\/sample_submission.csv\")","99878d62":"train.info()","59b70cff":"test.info()\n# \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u0430\u044f \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0442\u0440\u0435\u0439\u043d\u0430, \u0430 \u043d\u0430 \u0442\u0435\u0441\u0442\u0435 \u0435\u0451 (\u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e) \u043d\u0430\u0434\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c","eaa1ca8e":"train[\"train\"] = 1\ntest[\"train\"] = 0\ntest[\"default\"] = -1\ndata = test.append(train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","17719726":"data.sample(5)","07436c5b":"data.info()","7dd05a36":"non_default = train[\"default\"].value_counts()[0] # \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\nratio = non_default \/ (train.shape[0] - non_default)\nprint(f\"\u0421\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432: {ratio:.1f}\\n\u041f\u0440\u043e\u0446\u0435\u043d\u0442 \u043d\u0435\u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432: {100 * non_default \/ train.shape[0]:.1f}\")\n# \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0430: \"\u0445\u043e\u0440\u043e\u0448\u0438\u0445\" \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0447\u0442\u0438 \u0432 \u0441\u0435\u043c\u044c \u0440\u0430\u0437 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \"\u043f\u043b\u043e\u0445\u0438\u0445\"\n# \u0437\u043d\u0430\u0447\u0438\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0431\u0443\u0434\u0435\u0442 \u0442\u0440\u0443\u0434\u043d\u0435\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c","09167706":"plt.figure(figsize=(4, 5))\nax = sns.countplot(x=train[\"default\"])\nax.set(ylabel=\"\");","22c93360":"def borders(col):\n    q1 = col.quantile(.25)\n    q3 = col.quantile(.75)\n    iqr = q3 - q1\n    low = q1 - 1.5 * iqr\n    high = q3 + 1.5 * iqr\n    return low, high","ad1cbc5d":"def check_outliers(col, data):\n    \"\"\"\n    \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 col \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 data \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0438\u043d\u0442\u0435\u0440\u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0430\u0445\u0430 \n    \"\"\"\n    \n    low, high = borders(data[col])\n    outliers = ((data[col] < low) | (data[col] > high)).sum()\n    \n    if not outliers:\n        print(f\"\u0412 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 '{col}' \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442\\n\")\n        return\n\n    print(f\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 '{col}': {outliers}\")\n    print(f\"\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{low}, {high}]\\n\")","d06b0c13":"# modified function from https:\/\/towardsdatascience.com\/are-you-dropping-too-many-correlated-features-d1c96654abe6\ndef features_to_drop(df, cut):\n    \"\"\"\n    \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0442\u043e\u0438\u0442 \u0443\u0434\u0430\u043b\u0438\u0442\u044c\n    \n    df - \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\n    cut - \u043f\u043e\u0440\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438\n    \"\"\"\n\n    corr_mtx = df.corr() # \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443\n    avg_corr = corr_mtx.mean(axis=1) # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c, \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0435\u043c \u043e\u0442\u0431\u043e\u0440\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n    up = corr_mtx.where(np.triu(np.ones(corr_mtx.shape), k=1).astype(bool)) \n    # \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u0432\u0435\u0440\u0445\u043d\u0438\u0439 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u043c\u0430\u0442\u0440\u0438\u0446\u044b \n    # \u043d\u0438\u0436\u043d\u0438\u0439 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u0430\n\n    drop = [] # \u0431\u0443\u0434\u0443\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f\n\n    for row in range(len(up)-1): # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u0432\u0441\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0430\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u044b\n        for col in range(row + 1, len(up)): # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u0432\u0441\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\n            if(abs(corr_mtx.iloc[row, col]) > cut):\n                # \u0435\u0441\u043b\u0438 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0434\u0432\u0443\u0445 \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0440\u043e\u0433\u043e\u0432\u043e\u0439,\n                # \u0442\u043e \u0443\u0434\u0430\u043b\u0438\u043c \u043e\u0434\u0438\u043d \u0438\u0437 \u043d\u0438\u0445 (\u0442\u043e\u0442, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0435)\n                if(abs(avg_corr.iloc[row]) > abs(avg_corr.iloc[col])):\n                    drop.append(row)\n                else:\n                    drop.append(col)\n                \n    dropcols_names = list(df.columns[list(set(drop))])\n    if dropcols_names:\n        return dropcols_names\n    print(\"\u0421\u0438\u043b\u044c\u043d\u043e\u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043d\u0435\u0442\")","2b1e801f":"def calc_f_score(y_true, y_pred):\n    \"\"\"\n    \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 f_score \u043f\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u043e\u0440\u043e\u0433\u0430\u0445 \u043e\u0442\u043d\u0435\u0441\u0435\u043d\u0438\u044f \u043a \u043d\u0443\u043b\u0435\u0432\u043e\u043c\u0443 \u0438 \u043f\u0435\u0440\u0432\u043e\u043c\u0443 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\n    \"\"\"\n    precision, recall, threshold = precision_recall_curve(y_true, y_pred)\n    denom = precision + recall \n    denom[denom == 0] = -1\n    # \u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u043c\u0435\u043d\u0430\u0442\u0435\u043b\u044c f-score \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e, \u0442\u043e \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u043c \u0435\u0433\u043e \u0432 -1 (\u0442\u0430\u043a \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0441\u043b\u0443\u0447\u0430\u0439)\n    f_score = (2 * precision * recall \/ denom)[:-1] \n    return f_score, threshold","3f590c4f":"data.isna().sum()\n# \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438","8ba2da65":"data[\"education\"].value_counts()","0681dd72":"data[\"education\"].fillna(data[\"education\"].mode()[0], inplace=True)\ndata.isna().sum().sum()","8dec67a2":"data[\"client_id\"].nunique() == data.shape[0]\n# \u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e id \u0443\u043d\u0438\u043a\u0430\u043b\u0435\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c","96cb93c3":"data.drop(\"client_id\", axis=1, inplace=True)","27350b00":"num_cols = [\"age\", \"decline_app_cnt\", \"score_bki\", \n            \"bki_request_cnt\", \"region_rating\", \"income\"]","6c266f45":"fig, axes = plt.subplots(2, 3, figsize=(25,15))\n\nfor i, col in enumerate(num_cols):\n    hist = sns.histplot(data[col], bins=20, kde=True, ax=axes.flat[i])\n    hist.set(ylabel=\"\")","76471278":"fig, axes = plt.subplots(1, 3, figsize=(16, 4))\nfor i, col in enumerate([\"decline_app_cnt\", \"bki_request_cnt\", \"income\"]):\n#     data[col] = np.log(data[col] + 1)\n#     hist = sns.histplot(data[col], bins=40, ax=axes.flat[i], kde=False)\n    num_cols.append(f\"{col}_log\")\n    data[f\"{col}_log\"] = np.log(data[col] + 1)\n    hist = sns.histplot(data[f\"{col}_log\"], bins=40, ax=axes.flat[i], kde=False)\n    hist.set(ylabel=\"\")","6245279c":"fig, axes = plt.subplots(3, 3, figsize=(18, 18))\naxes = axes.flatten()\nfor i in range(len(num_cols)):\n    sns.boxplot(x=\"default\", y=num_cols[i], data=data[data[\"default\"]>=0], orient=\"v\", ax=axes[i])\n# \u0432\u0438\u0434\u0438\u043c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0442\u043e \u0443 \"\u0445\u043e\u0440\u043e\u0448\u0438\u0445\" \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u043f\u0440\u043e\u0448\u043b\u043e\u043c \u043e\u0431\u044b\u0447\u043d\u043e \u043d\u0435 \u0431\u044b\u043b\u043e \u043e\u0442\u043a\u0430\u0437\u043e\u0432 \u043d\u0430 \u0432\u044b\u0434\u0430\u0447\u0443 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0432\n# \u0442\u0430\u043a\u0436\u0435 \u0443 \u043d\u0438\u0445 \u0431\u043e\u043b\u0435\u0435 \u043d\u0438\u0437\u043a\u0438\u0439 \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u0438 \u043c\u0435\u043d\u044c\u0448\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418","fd358cb1":"for col in num_cols:\n    check_outliers(col, data)","28649b6b":"dac = data[\"decline_app_cnt\"]\ndac.mean(), dac.max()\n# \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0432 \u0441\u0442\u043e \u0440\u0430\u0437 \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e","45c71092":"borders(dac)","2bdff190":"dac.value_counts()","08b72008":"dac[dac >= 1] = 1\nnum_cols.remove(\"decline_app_cnt\")","a964eb3b":"data[\"decline_app_cnt\"].value_counts()\n# \u0437\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u043c\u044b \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 (\u043a\u0430\u043a \u0438 \u0445\u043e\u0442\u0435\u043b\u0438)","8e6de039":"bin_cols = [\"sex\", \"car\", \"car_type\", \"good_work\", \"foreign_passport\"] \n# \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \"default\" \u0438 \u0438\u0437\u043c\u0435\u043d\u0451\u043d\u043d\u0430\u044f \"decline_app_cnt\" \u0442\u0430\u043a\u0436\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u043c\u0438","05f0154d":"for col in bin_cols:\n    print(data[col].value_counts())","896d30fa":"enc = LabelEncoder()\nfor col in bin_cols:\n    data[col] = enc.fit_transform(data[col])","8532c035":"cat_cols = [\"education\", \"home_address\", \"work_address\", \"sna\",  \"first_time\"]","eef423f8":"plt.figure(figsize=(15, 8))\nsns.boxplot(x=\"education\", y=\"income\", data=data, showfliers=False);\n# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0432\u043b\u0438\u044f\u0435\u0442 \u043b\u0438 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 \u0434\u043e\u0445\u043e\u0434","fa46db5d":"for col in cat_cols:\n    sns.barplot(x=col, y=\"default\", data=data[data[\"default\"] >= 0])\n    plt.show();\n# \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0441 \u0432\u044b\u0441\u0448\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043d\u0430\u0434\u0451\u0436\u043d\u0435\u0435\n# \u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 work_address, sna \u0438 first_time \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043a\u0430\u043a \"\u043e\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435\"","3a05a093":"# \u043f\u043e\u043c\u0435\u043d\u044f\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u044b 2 \u0438 3 \u0434\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 home_address, \u0447\u0442\u043e\u0431\u044b \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0442\u0440\u0435\u043d\u0434\ndef swap(x):\n    if x == 2:\n        return 3\n    if x == 3:\n        return 2\n    return x\n\ndata[\"home_address\"] = data[\"home_address\"].apply(swap)","aaf19d5f":"data[\"has_degree\"] = data[\"education\"].apply(lambda x: 1 if x in [\"PGR\", \"ACD\"] else 0)\nbin_cols.append(\"has_degree\")","425ed794":"# data[\"education\"] = enc.fit_transform(data[\"education\"])\n# \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0442\u0430\u043a\u0436\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0431 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438 - \u044d\u0442\u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f\ned = pd.crosstab(data[data.default >= 0].education, data[data.default >= 0].default, normalize='index').iloc[:, 1]\ndata.education = data.education.map(ed)","6cadbf22":"new = pd.DataFrame(OneHotEncoder(sparse=False).fit_transform(data[cat_cols].values)).astype(int)\ndata = pd.concat([data.drop(cat_cols, axis=1), new], axis=1)\n# data = pd.get_dummies(data, prefix=cat_cols, columns=cat_cols)\n# \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","0ca7b1a6":"data[\"app_date\"]\n# \u0434\u0430\u0442\u0430 \u0432 \u043d\u0435\u0443\u0434\u043e\u0431\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0435\u0451","a0943926":"data[\"app_date\"] = data[\"app_date\"].apply(lambda x: datetime.strptime(x, '%d%b%Y').timestamp()).astype(int)","a4b965e2":"data[\"bki_age_region\"] = data[\"score_bki\"] * data[\"region_rating\"] \/ data[\"age\"]","f5d734df":"mean_income = data.groupby(\"age\")[\"income\"].mean().to_dict()\ndata[\"mean_income\"] = data[\"age\"].map(mean_income)","21b4f777":"max_income = data.groupby(\"age\")[\"income\"].max().to_dict()\ndata[\"max_income\"] = data[\"age\"].map(max_income)","dfa4f8d6":"data[\"normalized_income\"] = abs(data.income - data.mean_income) \/ data.max_income","fee2b72f":"mean_income_reg = data.groupby('region_rating')['income'].mean().to_dict()\ndata['mean_income_region'] = data['region_rating'].map(mean_income_reg)","861dfa65":"mean_bki_age = data.groupby('age')['bki_request_cnt'].mean().to_dict()\ndata['mean_requests_age'] = data['age'].map(mean_bki_age)","988f5711":"mean_bki_inc = data.groupby('income')['bki_request_cnt'].mean().to_dict()\ndata['mean_requests_income'] = data['income'].map(mean_bki_inc)","62434b98":"num_cols = [\"age\", \"decline_app_cnt\", \"score_bki\", \n            \"bki_request_cnt\", \"region_rating\", \"income\", \n            \"app_date\", \"bki_age_region\", \"mean_income\",\n            \"max_income\", \"normalized_income\", \"mean_income_region\",\n            \"mean_requests_age\", \"mean_requests_income\"]\n# \u043e\u0431\u043d\u043e\u0432\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","edec2436":"# \u043e\u0442\u043d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ndata[num_cols] = pd.DataFrame(StandardScaler().fit_transform(data[num_cols]), columns=num_cols)","b1ac92de":"corr = data.drop(\"train\", axis=1).corr()\nup = corr.where(np.triu(np.ones(corr.shape), k=1).astype(bool)) \nfor i in up.index:\n    for col in up.columns:\n        if i != col and abs(up.loc[i, col]) > 0.7:\n                print(f\"\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 {i} \u0438 {col} \u0438\u043c\u0435\u044e\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e {up.loc[i, col]:.3f}\")\n# \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0432\u044b\u0441\u043e\u043a\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0438\u0445 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 home_address \u0438 work_address","5c20e036":"plt.rcParams['figure.figsize'] = 20, 20\nsns.heatmap(corr.iloc[:20, :20], cmap='vlag', annot=True, vmin = -0.5, cbar=False, square=True); ","80104024":"determinant = np.prod(np.linalg.eig(data.corr())[0])\nprint(f\"Determinant of the matrix is {determinant:.100f}\")\n# \u0434\u0435\u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043d\u0442 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439, \u0438 \u044d\u0442\u043e \u043d\u0435 \u0440\u0430\u0434\u0443\u0435\u0442","d262f296":"drop = features_to_drop(data.drop(\"train\", axis=1), cut=.85)\n# \u043d\u0430\u0439\u0434\u0451\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0438\u043b\u044c\u043d\u0435\u0435 0.85 \u043f\u043e \u043c\u043e\u0434\u0443\u043b\u044e\ndrop","22c5bf90":"data.drop(drop, axis=1, inplace=True)","9d50acbd":"determinant = np.prod(np.linalg.eig(data.corr())[0])\nprint(f\"Determinant of the matrix is {determinant:.100f}\")\n# \u0441\u0442\u0430\u043b\u043e \u0447\u0443\u0442\u044c \u043b\u0443\u0447\u0448\u0435 :,)","8b1d61f5":"train_df = data.query(\"train == 1\").drop([\"train\"], axis=1)\ntest_df = data.query(\"train == 0\").drop([\"train\", \"default\"], axis=1)","f7cf3877":"X = train_df.drop([\"default\"], axis=1).values\ny = train_df[\"default\"].values","bf2889f1":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=.2, random_state=100)","37dd1376":"lr = LogisticRegression(max_iter=1000, random_state=100)","fd5fa785":"lr.fit(X_train, y_train)\nprobs = lr.predict_proba(X_valid)[:, 1]","8f25a3f4":"plt.rcParams[\"figure.figsize\"] = 8, 8\nfpr, tpr, _ = roc_curve(y_valid, probs)\nroc_auc = roc_auc_score(y_valid, probs)\n\nplt.plot([0, 1], label=\"baseline\", linestyle=\"--\")\nplt.plot(fpr, tpr, label=\"regression\")\nplt.title(f\"roc_auc = {roc_auc:0.3f}\")\nplt.ylabel(\"True Positive Rate\")\nplt.xlabel(\"False Positive Rate\")\nplt.legend(loc=\"lower right\");","34c796a7":"pred = lr.predict(X_valid)\nf1_score(pred, y_valid)\n# \u043e\u0447\u0435\u043d\u044c \u043d\u0438\u0437\u043a\u0438\u0439 f-score, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043e\u0448\u0438\u0431\u043e\u043a","0750c3a0":"cm = confusion_matrix(y_valid, pred)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm\/np.sum(cm), display_labels=lr.classes_) # \u0438\u043b\u0438 confusion_matrix=cm\ndisp.plot(cmap=\"Blues\", colorbar=False, values_format=\".2%\") # \u0438\u043b\u0438 values_format=\".0f\"\nplt.suptitle(\"Confusion matrix\", x=.52, y=.91);\n# \u0432\u0441\u0451 \u043f\u043e\u043d\u044f\u0442\u043d\u043e, \u043c\u043e\u0434\u0435\u043b\u044c \u0441\u0447\u0438\u0442\u0430\u0435\u0442 >99% \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043d\u0430\u0434\u0451\u0436\u043d\u044b\u043c\u0438","b65b5d00":"f_score, thresholds = calc_f_score(y_valid, probs)\nbest_f_score = max(f_score)\nthreshold = thresholds[np.argmax(f_score)]\nprint(f\"threshold = {threshold}\\nbest_f_score = {best_f_score}\")","1da5b4f5":"plt.plot(thresholds, f_score)\nplt.plot(np.array([threshold] * 1000), np.linspace(0, best_f_score, 1000));","14249a6c":"probs[probs >= threshold] = 1\nprobs[probs < threshold] = 0","71e90c0b":"cm = confusion_matrix(y_valid, probs)\nX = [str(i) for i in cm.flatten()]\nY = [f\"{i:.2%}\" for i in cm.flatten() \/ np.sum(cm)]\nlabels = np.asarray([x+\"\\n\"+y for x, y in zip(X, Y)]).reshape(2, -1)\nax = sns.heatmap(cm, annot=labels, cbar=False, fmt='', cmap='Blues', square=True)\nax.set_title(\"Confusion matrix\")\nax.set_xlabel(\"Predicted values\")\nax.set_ylabel(\"Actual values\");\n# \u043c\u044b \u043f\u043e\u043d\u0438\u0437\u0438\u043b\u0438 \u043f\u043e\u0440\u043e\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0443 \"\u043f\u043b\u043e\u0445\u0438\u0445\" \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 (\u043e\u0434\u043d\u0430\u043a\u043e \u0442\u0435\u0440\u044f\u0435\u043c \u0438 \"\u0445\u043e\u0440\u043e\u0448\u0438\u0445\")","02657899":"# y_pred = lr.predict_proba(test_df)[:, 1]\n# y_pred[y_pred >= threshold] = 1\n# y_pred[y_pred < threshold] = 0 \n# result = pd.DataFrame(data={'client_id': test['client_id'], 'default': y_pred}).astype(int)\n# result.to_csv('submission.csv', index=False) # \u0437\u0434\u0435\u0441\u044c \u0431\u044b\u043b \u043f\u0435\u0440\u0432\u044b\u0439 submission","05713348":"lr = LogisticRegression(class_weight=\"balanced\", warm_start=True, random_state=100)\n# warm_start=True \u0441\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0442 \u043d\u0430\u043c \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u0438 \u043f\u043e\u0434\u0431\u043e\u0440\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n# \u0432\u0432\u0438\u0434\u0443 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043e\u0441\u0442\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0437\u0430\u0434\u0430\u0434\u0438\u043c class_weight=\"balanced\"\n\nparam_grid = [{\"solver\": [\"newton-cg\", \"lbfgs\", \"sag\", \"saga\", \"liblinear\"],\n               # \u0437\u0434\u0435\u0441\u044c \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f penalty=\"l2\" - \u043e\u043d\u043e \u0441\u0442\u043e\u0438\u0442 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n              \"tol\": np.geomspace(10**-6, 10**-2, 5),\n               \"C\": np.geomspace(10**-4, 10**4, 9)},\n              {\"solver\": [\"saga\", \"liblinear\"],\n               \"penalty\": [\"l1\"],\n               \"tol\": np.geomspace(10**-6, 10**-2, 5),\n               \"C\": np.geomspace(10**-4, 10**4, 13)},\n              {\"solver\": [\"newton-cg\", \"lbfgs\", \"sag\"],\n               \"penalty\": [\"none\"],\n               \"tol\": np.geomspace(10**-6, 10**-2, 5)}]\n# \u0437\u0430\u0434\u0430\u0434\u0438\u043c \u0441\u0435\u0442\u043a\u0443 \u043f\u043e\u0438\u0441\u043a\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f, \u0447\u0442\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u044f\u043c\u0438","c202e57d":"searcher = HalvingGridSearchCV(estimator=lr, param_grid=param_grid, min_resources=\"smallest\",\n                               scoring=\"f1\", factor=2, cv=3)","20eda458":"start = datetime.now()\nsearcher.fit(X_train, y_train)\nend = datetime.now()","f12a1c45":"print(end - start) # \u0437\u0434\u0435\u0441\u044c \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u044f\u0447\u0435\u0439\u043a\u0438","e45dfec7":"searcher.best_estimator_","a0540aa5":"y_pred = searcher.predict(X_valid)\nf1_score(y_pred, y_valid)","068e94c9":"probs = searcher.predict_proba(X_valid)[:, 1]\nplt.rcParams[\"figure.figsize\"] = 8, 8\nfpr, tpr, _ = roc_curve(y_valid, probs)\nroc_auc = roc_auc_score(y_valid, probs)\n\nplt.plot([0, 1], label=\"baseline\", linestyle=\"--\")\nplt.plot(fpr, tpr, label=\"regression\")\nplt.title(f\"roc_auc = {roc_auc:0.3f}\")\nplt.ylabel(\"True Positive Rate\")\nplt.xlabel(\"False Positive Rate\")\nplt.legend(loc=\"lower right\");","de267d4a":"f_score, thresholds = calc_f_score(y_valid, probs)\nbest_f_score = max(f_score)\nthreshold = thresholds[np.argmax(f_score)]\nprint(f\"threshold = {threshold:.5f}\\nbest_f_score = {best_f_score:.5f}\")","fd5f3ddb":"y_pred = searcher.predict_proba(test_df)[:, 1]\ny_pred[y_pred >= threshold] = 1\ny_pred[y_pred < threshold] = 0 \nresult = pd.DataFrame(data={'client_id': test['client_id'], 'default': y_pred}).astype(int)\nresult.to_csv('.\/submission.csv', index=False)","1461f98a":"# y_pred = searcher.predict(test_df)\n# result = pd.DataFrame(data={'client_id': test['client_id'], 'default': y_pred}).astype(int)\n# result.to_csv('submission.csv', index=False)","a916d8e9":"__decline_app_cnt__","2f161212":"## \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n- client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n- education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n- sex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n- age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n- car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- car_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n- decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u043b\u043e\u043d\u0451\u043d\u043d\u044b\u0445 \u0432 \u043f\u0440\u043e\u0448\u043b\u043e\u043c \u0437\u0430\u044f\u0432\u043e\u043a\n- good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\n- bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\n- home_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n- work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n- income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n- foreign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n- sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n- first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\n- score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\n- region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n- app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n- default - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443 (\u043d\u0430\u0448\u0430 __\u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f__)","070938ec":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","e7cd4bea":"## \u0427\u0442\u043e \u0435\u0449\u0451? \n\n\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043b\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 (\u0432\u0440\u043e\u0434\u0435 Catboost), \u043e\u0434\u043d\u0430\u043a\u043e \u0434\u0430\u043d\u043d\u043e\u0435 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u043d\u0430 \u0437\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0435\u0439. \u0422\u0430\u043a\u0436\u0435 \u044f \u043d\u0435 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b under- \u0438 oversampling, \u043d\u0435 \u043e\u0441\u043e\u0431\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u043b \u0441 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438, \u043d\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043b \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u0430 \u043a\u043e\u0440\u0435\u043b\u043b\u044f\u0446\u0438\u0439). \u0412\u043c\u0435\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f HalvingGridSearchCV \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c optuna. \u0412 \u0446\u0435\u043b\u043e\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0441\u044f \u0445\u043e\u0440\u043e\u0448\u0438\u043c \u0434\u043b\u044f \u0443\u0447\u0435\u0431\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u044f \u043d\u0430\u0443\u0447\u0438\u043b\u0441\u044f \u043d\u043e\u0432\u043e\u043c\u0443.","bee169b1":"__app_date__","a4a3f252":"### 3.  \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n* home_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n* work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n* sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n* first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0435","2f0370b8":"### 1.  \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\n* age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442\n* decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u043b\u043e\u043d\u0451\u043d\u043d\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n* score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b\n* bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\n* region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n* income - \u0434\u043e\u0445\u043e\u0434","33fc8076":"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043d\u0430\u043c, \u0447\u0442\u043e \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \u0432\u0441\u0451, \u043a\u0440\u043e\u043c\u0435 \u043d\u0443\u043b\u0435\u0439 - \u0432\u044b\u0431\u0440\u043e\u0441\u044b. \u0415\u0441\u043b\u0438 \u043c\u044b \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u0441\u0451 \u043d\u0430 \u043d\u0443\u043b\u0438, \u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e\u0442\u0435\u0440\u044f\u0435\u0442 \u043a\u0430\u043a\u0443\u044e-\u043b\u0438\u0431\u043e \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438. \u041f\u043e\u0442\u043e\u043c\u0443 \u043f\u043e\u0434\u043e\u0439\u0434\u0451\u043c \u043a \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c \u0443\u043c\u043d\u0435\u0435, \u0441\u0434\u0435\u043b\u0430\u0432 \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 (\u0443 \u043d\u0430\u0441 \u0442\u0430\u043a\u0436\u0435 \u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430): 0 - \u043d\u0435 \u0431\u044b\u043b\u043e \u043e\u0442\u043a\u0430\u0437\u043e\u0432, 1 - \u0431\u044b\u043b\u0438.","ff1a7a86":"## \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","09164e93":"## \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430, \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437","f0259b2f":"### \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438\n\u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043c\u043d\u043e\u0433\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u043a \u0432\u044b\u0431\u0440\u043e\u0441\u044b. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043d\u044f\u0442\u044c, \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043b\u0438 \u044d\u0442\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u044b.","703b7507":"# \u041f\u0440\u043e\u0435\u043a\u0442\n\n\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043c\u044b \u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u043f\u043e\u043d\u044f\u0442\u044c, \u0441\u0442\u043e\u0438\u0442 \u043b\u0438 \u0434\u0430\u0432\u0430\u0442\u044c \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0443 \u043a\u0440\u0435\u0434\u0438\u0442. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043e\u043d \u043d\u0435 \u0432\u0435\u0440\u043d\u0451\u0442 \u0434\u0435\u043d\u044c\u0433\u0438.","47191dbb":"### \u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435!  \n\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u044f\u0447\u0435\u0439\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043e\u043a\u043e\u043b\u043e \u043c\u0438\u043d\u0443\u0442\u044b","a5dd796f":"## Feature engineering","653b91d9":"\u041f\u043e\u0440\u043e\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0432\u044b\u0431\u0440\u0430\u043b\u0438 \u0441\u0438\u043b\u044c\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 0.5, \u0438\u043d\u0430\u0447\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u043e\u0434\u043e\u0431\u0440\u044f\u043b\u0438 \u043a\u0440\u0435\u0434\u0438\u0442\u044b \u0432\u0441\u0435\u043c. \u0414\u0430, \u043c\u044b \u043e\u0442\u0441\u0435\u043a\u0430\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \"\u0445\u043e\u0440\u043e\u0448\u0438\u0445\" \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043d\u043e \u0437\u0430\u0442\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u043e\u0448\u0438\u0431\u0430\u0435\u043c\u0441\u044f \u0432 \"\u043f\u043b\u043e\u0445\u0438\u0445\". \u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0440\u043e\u0433 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c f_score \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u043e\u0434\u043d\u0430\u043a\u043e \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442, \u0447\u0442\u043e \u0438 \u043d\u0430 \u043d\u043e\u0432\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u0442\u043e\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043e\u0448\u0438\u0431\u043e\u043a \u0435\u0449\u0451 \u0440\u0430\u0437.","7fff33d6":"## \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0430","7b251934":"## \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438","7f8ca082":"\u041d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430 LogisticRegression \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 sklearn:\n* penalty: \u0442\u0438\u043f \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n* C: \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0441\u0438\u043b\u0430 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n* solver: \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 (\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 penalty)\n* tol: \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438","2ce09e9b":"## \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435  \n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u0448\u044c \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0435 \u043f\u043e\u043c\u043e\u0433\u043b\u043e \u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e f_score. \u041b\u0443\u0447\u0448\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u0431\u044b\u043b\u0430 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043f\u043e\u0440\u043e\u0433\u043e\u0432\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u0430 (\u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f calc_f_score), \u043f\u0440\u043e\u0441\u0442\u043e \u0436\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \"\u043b\u0443\u0447\u0448\u0435\u0439\", \u043f\u043e \u043c\u043d\u0435\u043d\u0438\u044e HalvingGridSearchCV, \u043c\u043e\u0434\u0435\u043b\u0438 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0443 \u043f\u043e\u0447\u0442\u0438 \u043d\u0430 \u043f\u0430\u0440\u0443 \u0441\u043e\u0442\u044b\u0445 \u043d\u0438\u0436\u0435, \u0447\u0442\u043e \u044f \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u044e \u043a\u0430\u043a \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u0435\u0435 \u043d\u0438\u0437\u043a\u0443\u044e.","9f4e3b75":"### 2.  \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* sex - \u043f\u043e\u043b \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n* car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u044b\n* car_type - \u0444\u043b\u0430\u0433 \u043c\u0430\u0448\u0438\u043d\u044b-\u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n* good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \"\u0445\u043e\u0440\u043e\u0448\u0435\u0439\" \u0440\u0430\u0431\u043e\u0442\u044b\n* foreign_passport - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u043e\u0441\u0442\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430","2ff2be47":"## \u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","f810e039":"## \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438"}}