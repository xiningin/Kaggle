{"cell_type":{"bbb47b0c":"code","92545f96":"code","f2806679":"code","b232395c":"code","0dc2fa18":"code","1766ec3d":"code","deea8f46":"code","736c8239":"code","9456e283":"code","12479d33":"code","134f6d48":"code","20b09f3d":"code","beb242ad":"code","845092f1":"code","c4eb1d81":"code","0677a5f6":"code","4a5da177":"code","e3b74a9a":"code","f09d592b":"code","e0e5ea40":"code","d267cb35":"code","394fbdab":"code","79d682e2":"code","3bbb79cd":"code","31a1bda3":"code","f2bd5268":"code","4800e5f9":"code","7bdd3fdc":"code","d7e22cc5":"code","fc1b5435":"code","78762182":"code","88d263c5":"code","e8947da8":"code","a992afa8":"code","f59d3c47":"code","06621b5b":"code","73690df3":"code","afc39f2e":"code","3c540fb3":"code","409e4c18":"code","b0205a5c":"code","a85fdb2b":"code","bfeeabae":"code","c6eab14e":"code","09c3bca4":"code","3c643e98":"code","996677e9":"code","a1edafed":"code","446f477d":"code","472169af":"code","34dc69e9":"markdown","79d14ef0":"markdown","a5f1443a":"markdown","01fc8d24":"markdown","4063c3b1":"markdown","756c0a78":"markdown","60266e4c":"markdown","62fbc9e3":"markdown","4ae91101":"markdown","35cf403f":"markdown","0da59716":"markdown","4b69369a":"markdown","cd2d6f9d":"markdown","3e489239":"markdown"},"source":{"bbb47b0c":"import cv2\nimport pandas\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras\nfrom sklearn.model_selection import RandomizedSearchCV, KFold, train_test_split","92545f96":"import os\nfrom PIL import Image\nfrom keras.preprocessing.image import img_to_array","f2806679":"tumor = [('glioma_tumor', 0),('meningioma_tumor', 1),('no_tumor', 2),('pituitary_tumor', 3)]\npath1 = '..\/input\/brain-tumor-classification-mri\/Training\/'\npath2 = '..\/input\/brain-tumor-classification-mri\/Testing\/'","b232395c":"Path = [\n    '..\/input\/brain-tumor-classification-mri\/Training\/glioma_tumor\/gg (104).jpg'  ,\n    '..\/input\/brain-tumor-classification-mri\/Training\/meningioma_tumor\/m (10).jpg',\n    '..\/input\/brain-tumor-classification-mri\/Training\/no_tumor\/image (12).jpg'    ,\n    '..\/input\/brain-tumor-classification-mri\/Training\/pituitary_tumor\/p (122).jpg',\n]","0dc2fa18":"def display (img_array) :\n    \n    dim = 10\n    \n    plt.figure(figsize  = (dim , dim))\n    for i, img in enumerate(img_array) :\n        plt.subplot(2, 2, i+1)\n        plt.imshow(img,'gray')\n        plt.title(img.shape)\n        \n    plt.show()","1766ec3d":"def get_array (path) :\n    \n    X = []\n    y = []\n    \n    for typ, val in tumor :\n        for image in os.listdir(path+typ) :\n            img = cv2.resize(cv2.imread(path+typ+'\/'+image, cv2.IMREAD_GRAYSCALE), (200,200))\n            \n            # create arrays\n            X.append(img_to_array( Image.fromarray(img)))\n            y.append(val)\n    return X, y","deea8f46":"image_array = []\nfor i, image_path in enumerate(Path) :\n    image_array.append(cv2.resize(cv2.imread(image_path, cv2.IMREAD_GRAYSCALE), (200,200)))","736c8239":"display(image_array)","9456e283":"X_train, y_train = get_array(path1)","12479d33":"X_test , y_test  = get_array(path2)","134f6d48":"X_train, X_test = np.array(X_train), np.array(X_test)\ny_train, y_test = np.array(y_train), np.array(y_test)","20b09f3d":"X_train = np.array(X_train)\nX_train\/= 255.0","beb242ad":"y_train = np.array(keras.utils.to_categorical(y_train))","845092f1":"X_test = np.array(X_test)\nX_test\/= 255.0","c4eb1d81":"y_test = np.array(keras.utils.to_categorical(y_test))","0677a5f6":"print(X_train.shape)\nprint(y_train.shape)","4a5da177":"print(X_test.shape)\nprint(y_test.shape)","e3b74a9a":"info = {0 : 'Glioma tumor', 1 : 'Meningioma tumor', 2 : 'No tumor', 3 : 'Pituitary tumor'}","f09d592b":"plt.figure(figsize = (12,12))\nfor i in range(16) :\n    plt.subplot(4, 4, i+1)\n    x = np.random.randint(0, 2870)\n    plt.imshow(X_train[x], 'gray')\n    plt.title(info[np.argmax(y_train[x])])\n    plt.axis('off')\nplt.show()","e0e5ea40":"plt.hist(np.argmax(y_train, axis = 1))\nplt.show()","d267cb35":"print(X_train.shape)\nprint(y_train.shape)","394fbdab":"X_train = np.reshape(X_train, (2870, 200*200*1))\nprint(X_train.shape)\nprint(y_train.shape)","79d682e2":"from imblearn.over_sampling import SMOTE\nX_train, y_train = SMOTE(sampling_strategy = 'auto', random_state = 1, k_neighbors = 5).fit_resample(X_train, y_train)","3bbb79cd":"print(X_train.shape)\nprint(y_train.shape)","31a1bda3":"X_train = np.reshape(X_train, (3308, 200, 200, 1))\nprint(X_train.shape)\nprint(y_train.shape)","f2bd5268":"plt.figure(figsize = (12,12))\nfor i in range(16) :\n    plt.subplot(4, 4, i+1)\n    x = np.random.randint(2870, 3308)\n    plt.imshow(X_train[x], 'gray')\n    plt.title(info[np.argmax(y_train[x])])\n    plt.axis('off')\nplt.show()","4800e5f9":"plt.hist(np.argmax(y_train, axis = 1))\nplt.show()","7bdd3fdc":"plt.figure(figsize = (12,12))\nfor i in range(16) :\n    plt.subplot(4, 4, i+1)\n    x = np.random.randint(0,390)\n    plt.imshow(X_test[x],'gray')\n    plt.title(info[np.argmax(y_test[x])])\n    plt.axis('off')\nplt.show()","d7e22cc5":"from keras.layers import Input\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nfrom keras.models import Sequential\nfrom keras.layers import BatchNormalization\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Dropout\nfrom keras.layers import Conv2D","fc1b5435":"def conv_layer (filterx) :\n    \n    model = Sequential()\n    model.add(Conv2D(filterx, (3,3), padding = 'same', activation = 'relu'))\n    model.add(MaxPooling2D(pool_size = (2,2), padding = 'valid'))\n    model.add(BatchNormalization())\n    \n    return model","78762182":"def dens_layer (hiddenx) :\n    \n    model = Sequential()\n    model.add(Dense(hiddenx, activation = 'relu', kernel_regularizer = 'l2'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.2))\n    \n    return model","88d263c5":"def cnn (filter1, filter2, filter3, hidden1, hidden2) :\n    \n    model = Sequential()\n    \n    model.add(Input((200,200,1,)))\n    model.add(conv_layer(filter1))\n    model.add(conv_layer(filter2))\n    model.add(conv_layer(filter3))\n    \n    model.add(Flatten())\n    model.add(dens_layer(hidden1))\n    model.add(dens_layer(hidden2))\n    model.add(Dense(4, activation = 'softmax'))\n    \n    model.compile(loss = 'categorical_crossentropy', optimizer = keras.optimizers.Adam(learning_rate = 0.0001), metrics = ['accuracy'])\n    \n    return model","e8947da8":"print(X_train.shape)\nprint(y_train.shape)","a992afa8":"from keras.preprocessing.image import ImageDataGenerator\ngen = ImageDataGenerator(zoom_range = [0.85, 1.0], rotation_range = 3)","f59d3c47":"gen.fit(X_train)\ntrain_gen = gen.flow(X_train, y_train, batch_size = 32)","06621b5b":"trainX, trainy = train_gen.next()","73690df3":"plt.figure(figsize = (12,12))\nfor i in range(16) :\n    plt.subplot(4, 4, i+1)\n    plt.imshow(trainX[i], 'gray')\n    plt.title(info[np.argmax(trainy[i])])\n    plt.axis('off')\nplt.show()","afc39f2e":"from keras.callbacks import ModelCheckpoint\ncheckp = ModelCheckpoint('.\/brain_model.h5', monitor = 'val_accuracy', save_best_only = True, verbose = 1)","3c540fb3":"model = cnn(128, 64, 32, 128, 64)","409e4c18":"print(model.summary())","b0205a5c":"history = model.fit(gen.flow(X_train, y_train, batch_size = 32), epochs = 100, validation_data = (X_test,y_test), callbacks = [checkp])","a85fdb2b":"plt.figure(figsize = (20,7))\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.legend(['training loss', 'validation loss'])\nplt.xlabel('Epochs')\nplt.ylabel('Losses')\nplt.title('Loss vs Epochs', fontsize = 15)","bfeeabae":"plt.figure(figsize = (20,7))\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.legend(['training accuracy', 'validation accuracy'])\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Accuracy vs Epochs', fontsize = 15)","c6eab14e":"from keras.models import load_model\nmodel = load_model('.\/brain_model.h5')","09c3bca4":"pred = model.predict(X_test)","3c643e98":"print(pred[0:3,:])","996677e9":"temp = np.argmax(pred, axis = 1)\npred = np.zeros(pred.shape)","a1edafed":"pred[np.arange(pred.shape[0]), temp] = 1","446f477d":"print(pred[0:3,:])\nprint(y_test[0:3,:])","472169af":"from sklearn.metrics import accuracy_score, classification_report\nprint('Accuracy : ' + str(accuracy_score(y_test, pred)))\nprint(classification_report(y_test, pred, target_names = ['glioma_tumor', 'meningioma_tumor', 'no_tumor', 'pituitary_tumor']))","34dc69e9":"# Class frequency distribution","79d14ef0":"# Image Processing","a5f1443a":"# Prediction","01fc8d24":"# Brain tumor\n### About\nA brain tumor is a collection, or mass, of abnormal cells in your brain. The skull which encloses the brain is very rigid and hence, when the tumors grow inside the brain, they put pressure on the skull and can lead serious damages.\n### Statistics\nA brain tumor is considered one of the most aggresive diseases, among children and adults. Every year about 11,700 people are diagnosed with brain tumor. It accounts for 85-90% of all Central Nervous System tumors. The 5-year survival rate with a cancerous brain tumor is approximately 34% in men and 36% in women.\n### Diagnosis\nAccurate diagnosis should be done for detecting brain tumor to start proper treatment early, so as to improve the life expectancy of the patient. Best technique to diagnose for brain tumor is Magnetic Resource Imaging (MRI).","4063c3b1":"# Plots of some training samples","756c0a78":"# Model creation and training","60266e4c":"# Use ImageDataGenerator for image data augmentation","62fbc9e3":"## Model implementation","4ae91101":"# Scale the arrays","35cf403f":"# What a brain tumor looks like\n<img src = \"https:\/\/www.cancer.gov\/rare-brain-spine-tumor\/sites\/g\/files\/xnrzdm226\/files\/styles\/cgov_article\/public\/cgov_image\/media_image\/100\/200\/7\/files\/Midline%20Glioma%20%28Article%29.jpg?h=b26af281&itok=D0zLgULJ\" alt = \"drawing\" width = \"400\"\/>","0da59716":"# Images of test samples","4b69369a":"# Convert Images to Numpy arrays","cd2d6f9d":"# Synthetic Minority Oversampling\n**Glioma tumor, Meningioma tumor** and **Pituitary tumor** almost same number of datasets ie. 826, 822 and 827 respectively. But the label **no_tumor** has only 395 samples. Since the number of samples for **no_tumor** class is less, let's oversample that class using SMOTE from imblearn package.","3e489239":"# Types of Brain tumor\n#### Glioma - Occurs at the base of the brain.\n#### Pituitary - tumors occur in pituitary gland (responsible for growth of the body).\n#### Meningioma - tumor grows from meninges, layers of tissue covering the brain and the spinal cord.\n"}}