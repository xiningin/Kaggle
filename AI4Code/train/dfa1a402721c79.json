{"cell_type":{"9a43f145":"code","b38ad7de":"code","d642638b":"code","0ca44e3d":"code","62e23470":"code","ced05fb1":"code","e38b1633":"code","b9545788":"code","13d2b0ec":"code","a85ed27e":"code","8af3c6b2":"code","12af28f2":"code","2844091a":"code","1bd64875":"markdown","b845a979":"markdown","bdb16103":"markdown","ed6e3e90":"markdown"},"source":{"9a43f145":"from sklearn.model_selection import KFold, StratifiedKFold\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport scipy as sp\nfrom collections import Counter\nfrom functools import partial\nfrom math import sqrt\nfrom sklearn.metrics import cohen_kappa_score, mean_squared_error\nfrom sklearn.metrics import confusion_matrix as sk_cmatrix\nimport lightgbm as lgb\nimport os\nfrom itertools import combinations\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.metrics import  mean_squared_error\nimport glob\nimport json\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nrandom_state = 1999","b38ad7de":"train_df = pd.read_csv('..\/input\/train\/train.csv')\ntest_df = pd.read_csv('..\/input\/test\/test.csv')\nstate_df = pd.read_csv('..\/input\/state_labels.csv')\ncolor_df = pd.read_csv('..\/input\/color_labels.csv')\nbreed_df = pd.read_csv('..\/input\/breed_labels.csv')\nsample_submission_df = pd.read_csv('..\/input\/test\/sample_submission.csv')\ntrain_df['is_train'] = 1\ntest_df['is_train'] = 0\n\nall_df = pd.concat([train_df, test_df]).reset_index(drop=True)\n\nall_df['description_length'] = all_df['Description'].str.len()\nall_df['name_length'] = all_df['Name'].str.len()\n\n'''Label Encode'''\nfor f in ['RescuerID']:\n    le = LabelEncoder()\n    all_df[f] = le.fit_transform(all_df[f])\n\n'''TFIDF'''\ntfidf_configs = [\n    ('Description', (1, 1), 3),\n]\nfor tfidf_config in tfidf_configs:\n    feature = tfidf_config[0]\n    ngram_range = tfidf_config[1]\n    svd_size = tfidf_config[2]\n    all_df[feature] = all_df[feature].fillna('')\n    vectorizer = TfidfVectorizer(analyzer='word', stop_words = 'english', ngram_range=ngram_range)\n    svd = TruncatedSVD(n_components=svd_size, n_iter=100, random_state=random_state)\n    vector = vectorizer.fit_transform(all_df[feature])\n    vector = svd.fit_transform(vector)\n    vector_df = pd.DataFrame(vector)\n    vector_df = vector_df.add_prefix('TFIDF_{}_'.format(feature))\n    all_df = pd.concat([all_df, vector_df], axis=1)\n    \ndrop_features = ['AdoptionSpeed', 'Description', 'PetID', 'Name']\nall_df.drop(columns=drop_features, inplace=True)","d642638b":"all_df.head(10)","0ca44e3d":"params = {\n    'boosting_type': 'gbdt',\n    'objective': 'binary',\n    'metric': 'auc',\n    'num_leaves': 16,\n    'max_depth': -1,\n    'learning_rate': 0.01,\n    'verbosity': -1,\n    'n_jobs': -1,\n}\nimportance = []\nkf = StratifiedKFold(n_splits=5, random_state=random_state, shuffle=False)\nfor train_index, test_index in kf.split(all_df, all_df['is_train']):\n    train_x, valid_x = all_df.loc[train_index], all_df.loc[test_index]\n    train_y = train_x.pop('is_train')\n    valid_y = valid_x.pop('is_train')\n    features_used = train_x.columns\n    \n    train_data = lgb.Dataset(train_x, label=train_y)\n    valid_data = lgb.Dataset(valid_x, label=valid_y)\n\n    clf = lgb.train(params,\n            train_data,\n            1000,\n            valid_sets=[train_data, valid_data],\n            verbose_eval=100000,\n            early_stopping_rounds=100,\n            )\n    \n    # feature importance\n    importance.append(clf.feature_importance(importance_type='gain'))\n    \nimportance = np.array(importance)\nimp_sum = np.sum(importance, axis=0)\nimp_mean = np.mean(importance, axis=0)\nimp_std = np.std(importance, axis=0)\nimp_std[imp_std == 0] = 1\nimportance_df = pd.DataFrame({\n    'feature': features_used,\n    'sum': imp_sum,\n    'mean': imp_mean,\n    'std': imp_std,\n    'mean\/std': imp_mean \/ imp_std\n})\nimportance_df.sort_values('mean', ascending=False, inplace=True)\n","62e23470":"importance_df","ced05fb1":"train_df = all_df[all_df['is_train']==1]\ntest_df = all_df[all_df['is_train']==0]\n\ndef compare_categorical_features(f):\n    train_values = list(train_df[f].value_counts().index)\n    test_values = list(test_df[f].value_counts().index)\n    common_values = np.intersect1d(train_values, test_values)\n    print(f, '# train values', len(train_values), '# common values:', len(common_values), ' overlap ratio:',100* len(common_values)\/len(train_values), '%')\n\ndef compare_numerical_features(f):\n    sns.set(style=\"whitegrid\")\n    g = sns.violinplot(data=all_df, x='is_train', y=f)\n    ","e38b1633":"for f in [ 'State', 'Health', 'Gender', 'Vaccinated', 'Sterilized', 'Dewormed', 'Quantity', 'Type', 'Breed1', 'Breed2', 'Color1', 'Color2', 'Color3']:\n    compare_categorical_features(f)\n    print('--------')","b9545788":"compare_numerical_features('description_length')","13d2b0ec":"compare_numerical_features('TFIDF_Description_0')","a85ed27e":"compare_numerical_features('TFIDF_Description_1')","8af3c6b2":"compare_numerical_features('TFIDF_Description_2')","12af28f2":"compare_numerical_features('Age')","2844091a":"compare_numerical_features('name_length')","1bd64875":"# The higher the feature, the larger its difference amont train\/test, and we may want to drop them","b845a979":"# Compare ","bdb16103":"Since the testing set for this competition is so small, it is so easy to have different distributions amont train & test. This is important to avoid Overfitting local CV. ","ed6e3e90":"# Introduction"}}