{"cell_type":{"34c43e19":"code","1a356cb4":"code","1d03307f":"code","51dfedb9":"code","a28d14b6":"code","e073fab0":"code","09443cb3":"code","165e2a4f":"code","810e2331":"code","a899e4ef":"code","8a9f3d6c":"code","5558284e":"code","9f6a2cbf":"code","3f0676b3":"code","3c3cca89":"code","1a30b291":"code","1cdf8037":"code","e6c1059b":"code","bbd4e16a":"markdown","aae73920":"markdown","8e158c56":"markdown","e68528c7":"markdown","311158f2":"markdown","355a0e66":"markdown","5b88824f":"markdown","6a5c06e8":"markdown","b2c04ec2":"markdown","68ab8ddd":"markdown","54a29a61":"markdown","8a98f6b7":"markdown","73cd70b8":"markdown","9958935e":"markdown","4c8b378b":"markdown","bc73cb65":"markdown","9a50afa2":"markdown","7419da8a":"markdown","648fd7f5":"markdown","e7e4790d":"markdown","bc7e8361":"markdown","513eee27":"markdown","fe7340aa":"markdown","b2dd6c1d":"markdown","f7c777ae":"markdown","909945ca":"markdown","2d404733":"markdown","4e380e29":"markdown"},"source":{"34c43e19":"!pip install my-package\n!pip install pydotplus","1a356cb4":"import numpy as np \nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier","1d03307f":"my_data = pd.read_csv(\"https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork\/labs\/Module%203\/data\/drug200.csv\", delimiter=\",\")\nmy_data[0:5]","51dfedb9":"# write your code here\n\nmy_data.shape\n","a28d14b6":"X = my_data[['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K']].values\nX[0:5]\n","e073fab0":"from sklearn import preprocessing\nle_sex = preprocessing.LabelEncoder()\nle_sex.fit(['F','M'])\nX[:,1] = le_sex.transform(X[:,1]) \n\n\nle_BP = preprocessing.LabelEncoder()\nle_BP.fit([ 'LOW', 'NORMAL', 'HIGH'])\nX[:,2] = le_BP.transform(X[:,2])\n\n\nle_Chol = preprocessing.LabelEncoder()\nle_Chol.fit([ 'NORMAL', 'HIGH'])\nX[:,3] = le_Chol.transform(X[:,3]) \n\nX[0:5]\n","09443cb3":"y = my_data[\"Drug\"]\ny[0:5]","165e2a4f":"from sklearn.model_selection import train_test_split","810e2331":"X_trainset, X_testset, y_trainset, y_testset = train_test_split(X, y, test_size=0.3, random_state=3)","a899e4ef":"# your code\nprint('Shape of X training set {}'.format(X_trainset.shape),'&',' Size of Y training set {}'.format(y_trainset.shape))\n","8a9f3d6c":"# your code\n\nprint('Shape of X training set {}'.format(X_testset.shape),'&',' Size of Y training set {}'.format(y_testset.shape))","5558284e":"drugTree = DecisionTreeClassifier(criterion=\"entropy\", max_depth = 4)\ndrugTree # it shows the default parameters","9f6a2cbf":"drugTree.fit(X_trainset,y_trainset)","3f0676b3":"predTree = drugTree.predict(X_testset)","3c3cca89":"print (predTree [0:5])\nprint (y_testset [0:5])\n","1a30b291":"from sklearn import metrics\nimport matplotlib.pyplot as plt\nprint(\"DecisionTrees's Accuracy: \", metrics.accuracy_score(y_testset, predTree))","1cdf8037":"from  io import StringIO\nimport pydotplus\nimport matplotlib.image as mpimg\nfrom sklearn import tree\n%matplotlib inline ","e6c1059b":"dot_data = StringIO()\nfilename = \"drugtree.png\"\nfeatureNames = my_data.columns[0:5]\ntargetNames = my_data[\"Drug\"].unique().tolist()\nout=tree.export_graphviz(drugTree,feature_names=featureNames, out_file=dot_data, class_names= np.unique(y_trainset), filled=True,  special_characters=True,rotate=False)  \ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \ngraph.write_png(filename)\nimg = mpimg.imread(filename)\nplt.figure(figsize=(100, 200))\nplt.imshow(img,interpolation='nearest')","bbd4e16a":"As you may figure out, some features in this dataset are categorical such as **Sex** or **BP**. Unfortunately, Sklearn Decision Trees do not handle categorical variables. But still we can convert these features to numerical values. **pandas.get_dummies()**\nConvert categorical variable into dummy\/indicator variables.\n","aae73920":"You can print out <b>predTree<\/b> and <b>y_testset<\/b> if you want to visually compare the prediction to the actual values.\n","8e158c56":"Remove the column containing the target name since it doesn't contain numeric values.\n","e68528c7":"**Accuracy classification score** computes subset accuracy: the set of labels predicted for a sample must exactly match the corresponding set of labels in y_true.  \n\nIn multilabel classification, the function returns the subset accuracy. If the entire set of predicted labels for a sample strictly match with the true set of labels, then the subset accuracy is 1.0; otherwise it is 0.0.\n","311158f2":"<div id=\"about_dataset\">\n    <h2>About the dataset<\/h2>\n    Imagine that you are a medical researcher compiling data for a study. You have collected data about a set of patients, all of whom suffered from the same illness. During their course of treatment, each patient responded to one of 5 medications, Drug A, Drug B, Drug c, Drug x and y. \n    <br>\n    <br>\n    Part of your job is to build a model to find out which drug might be appropriate for a future patient with the same illness. The feature sets of this dataset are Age, Sex, Blood Pressure, and Cholesterol of patients, and the target is the drug that each patient responded to.\n    <br>\n    <br>\n    It is a sample of multiclass classifier, and you can use the training part of the dataset \n    to build a decision tree, and then use it to predict the class of a unknown patient, or to prescribe it to a new patient.\n<\/div>\n","355a0e66":"<div href=\"pre-processing\">\n    <h2>Pre-processing<\/h2>\n<\/div>\n","5b88824f":"Now <b> train_test_split <\/b> will return 4 different parameters. We will name them:<br>\nX_trainset, X_testset, y_trainset, y_testset <br> <br>\nThe <b> train_test_split <\/b> will need the parameters: <br>\nX, y, test_size=0.3, and random_state=3. <br> <br>\nThe <b>X<\/b> and <b>y<\/b> are the arrays required before the split, the <b>test_size<\/b> represents the ratio of the testing dataset, and the <b>random_state<\/b> ensures that we obtain the same splits.\n","6a5c06e8":"<hr>\n\n<div id=\"setting_up_tree\">\n    <h2>Setting up the Decision Tree<\/h2>\n    We will be using <b>train\/test split<\/b> on our <b>decision tree<\/b>. Let's import <b>train_test_split<\/b> from <b>sklearn.cross_validation<\/b>.\n<\/div>\n","b2c04ec2":"Next, we will fit the data with the training feature matrix <b> X_trainset <\/b> and training  response vector <b> y_trainset <\/b>\n","68ab8ddd":"<hr>\n\n<div id=\"evaluation\">\n    <h2>Evaluation<\/h2>\n    Next, let's import <b>metrics<\/b> from sklearn and check the accuracy of our model.\n<\/div>\n","54a29a61":"!wget -O drug200.csv https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork\/labs\/Module%203\/data\/drug200.csv","8a98f6b7":"Now we can fill the target variable.\n","73cd70b8":"\n# Decision Trees\n\n\n## Objectives\n\nAfter completing this lab you will be able to:\n\n-   Develop a classification model using Decision Tree Algorithm\n","9958935e":"Print the shape of X_testset and y_testset. Ensure that the dimensions match\n","4c8b378b":"In this lab exercise, you will learn a popular machine learning algorithm, Decision Tree. You will use this classification algorithm to build a model from historical data of patients, and their response to different medications. Then you use the trained decision tree to predict the class of a unknown patient, or to find a proper drug for a new patient.\n","bc73cb65":"<h1>Table of contents<\/h1>\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n    <ol>\n        <li><a href=\"#about_dataset\">About the dataset<\/a><\/li>\n        <li><a href=\"#downloading_data\">Downloading the Data<\/a><\/li>\n        <li><a href=\"#pre-processing\">Pre-processing<\/a><\/li>\n        <li><a href=\"#setting_up_tree\">Setting up the Decision Tree<\/a><\/li>\n        <li><a href=\"#modeling\">Modeling<\/a><\/li>\n        <li><a href=\"#prediction\">Prediction<\/a><\/li>\n        <li><a href=\"#evaluation\">Evaluation<\/a><\/li>\n        <li><a href=\"#visualization\">Visualization<\/a><\/li>\n    <\/ol>\n<\/div>\n<br>\n<hr>\n","9a50afa2":"Import the Following Libraries:\n\n<ul>\n    <li> <b>numpy (as np)<\/b> <\/li>\n    <li> <b>pandas<\/b> <\/li>\n    <li> <b>DecisionTreeClassifier<\/b> from <b>sklearn.tree<\/b> <\/li>\n<\/ul>\n","7419da8a":"Using <b>my_data<\/b> as the Drug.csv data read by pandas, declare the following variables: <br>\n\n<ul>\n    <li> <b> X <\/b> as the <b> Feature Matrix <\/b> (data of my_data) <\/li>\n    <li> <b> y <\/b> as the <b> response vector (target) <\/b> <\/li>\n<\/ul>\n","648fd7f5":"<details><summary>Click here for the solution<\/summary>\n\n```python\nprint('Shape of X training set {}'.format(X_testset.shape),'&',' Size of Y training set {}'.format(y_testset.shape))\n\n```\n\n<\/details>\n","e7e4790d":"<h3>Practice<\/h3>\nPrint the shape of X_trainset and y_trainset. Ensure that the dimensions match\n","bc7e8361":"Now, read data using pandas dataframe:\n","513eee27":"<details><summary>Click here for the solution<\/summary>\n\n```python\nmy_data.shape\n\n```\n\n<\/details>\n","fe7340aa":"<div id=\"practice\"> \n    <h3>Practice<\/h3> \n    What is the size of data? \n<\/div>\n","b2dd6c1d":"<hr>\n\n<div id=\"visualization\">\n    <h2>Visualization<\/h2>\n    \n    \nLets visualize the tree\n<\/div>\n","f7c777ae":"<div id=\"downloading_data\"> \n    <h2>Downloading the Data<\/h2>\n    To download the data, we will use !wget to download it from IBM Object Storage.\n<\/div>\n","909945ca":"<hr>\n\n<div id=\"prediction\">\n    <h2>Prediction<\/h2>\n    Let's make some <b>predictions<\/b> on the testing dataset and store it into a variable called <b>predTree<\/b>.\n<\/div>\n","2d404733":"<hr>\n\n<div id=\"modeling\">\n    <h2>Modeling<\/h2>\n    We will first create an instance of the <b>DecisionTreeClassifier<\/b> called <b>drugTree<\/b>.<br>\n    Inside of the classifier, specify <i> criterion=\"entropy\" <\/i> so we can see the information gain of each node.\n<\/div>\n","4e380e29":"<details><summary>Click here for the solution<\/summary>\n\n```python\nprint('Shape of X training set {}'.format(X_trainset.shape),'&',' Size of Y training set {}'.format(y_trainset.shape))\n\n```\n\n<\/details>\n"}}