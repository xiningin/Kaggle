{"cell_type":{"c2552211":"code","b2d065e7":"code","13a711e4":"code","60c099eb":"code","4441ea45":"code","d3d4e384":"code","492b1584":"code","9a4b2a31":"code","05a1fcbf":"code","882577a8":"code","b6f6dd1f":"code","5adfa157":"code","dec11027":"code","34ddc607":"code","deb64f4f":"code","e62eda56":"code","d709e879":"code","3148ab01":"code","59220a76":"code","97e3b923":"code","87eb4e1f":"code","e9846bba":"code","1fb0dbeb":"code","0f6be51e":"code","462eb36b":"markdown","089e8dca":"markdown","6054abe8":"markdown","f508ac6c":"markdown","89f0cf64":"markdown","b18c0572":"markdown","b1542a98":"markdown","3df41a41":"markdown","12d375b8":"markdown","62e42e36":"markdown","62305888":"markdown","2d9e01a0":"markdown","e5c6080c":"markdown","c0445a66":"markdown","b51a1cd6":"markdown","4135c057":"markdown","fd57e46d":"markdown","6a2ada0b":"markdown","b182012b":"markdown","1475e9ae":"markdown","7a69b80d":"markdown","901d1055":"markdown"},"source":{"c2552211":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#data visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#predict library\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import GradientBoostingRegressor,RandomForestRegressor\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import train_test_split \n\nimport os\nprint(os.listdir(\"..\/input\"))","b2d065e7":"#read data\ndata = pd.read_csv('..\/input\/bmw_pricing_challenge.csv')","13a711e4":"price = data['price']\nm_key = data['model_key']\ndata.drop(['price'],axis=1,inplace=True)\ndata.head()","60c099eb":"model_key = data['model_key'].unique()\nengine_power = []\nfor each in model_key:\n    x = data[data['model_key']==each]\n    engine_power.append(sum(x['engine_power']\/len(x)))\n\nplt.figure(figsize=(10,20))\nsns.barplot(x=engine_power,y=model_key)\nplt.xlabel(\"Engine Power\")\nplt.ylabel(\"Model Key\")\nplt.title(\"Engine Power according to Model\", color=\"green\")\nplt.show()","4441ea45":"mileage = []\nlabels = ['below10K','10K-50K','50K-100K','100K-150K','150K-200K','200K+']\ncolors = ['grey','blue','red','yellow','green','brown']\nexplode = [0,0,0,0,0,0]\nfor each in range(1,21):\n    each = each*10000\n    if(each==10000):\n        x = data[data['mileage']<10000]\n        mileage.append(len(x))\n    elif(each==50000):\n        x = data[(data['mileage']>=10000) & (data['mileage']<50000)]\n        mileage.append(len(x))\n    elif(each==100000):\n        x = data[(data['mileage']>=50000) & (data['mileage']<100000)]\n        mileage.append(len(x))\n    elif(each==150000):\n        x = data[(data['mileage']>=100000) & (data['mileage']<150000)]\n        mileage.append(len(x))\n    elif(each==200000):\n        x = data[(data['mileage']>=150000) & (data['mileage']<200000)]\n        mileage.append(len(x))\n        x = data[data['mileage']>=200000]\n        mileage.append(len(x))\nplt.figure(figsize=(10,10))\nplt.pie(mileage,explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Mileage',color=\"blue\")\nplt.show()","d3d4e384":"date = []\nyear = ['1990-2000',\"2000-2010\",\"2010-2018\"]\nfor i in range(1,4):\n    if (i==1):\n        x = data[(data['registration_date']>=\"1990-03-01\") & (data['registration_date']<\"2000-01-01\")]\n        date.append(len(x))\n    elif(i==2):\n        x = data[(data['registration_date']>=\"2000-01-01\") & (data['registration_date']<\"2010-01-01\")]\n        date.append(len(x))\n    elif(i==3):\n        x = data[(data['registration_date']>=\"2010-01-01\") & (data['registration_date']<\"2018-01-01\")]\n        date.append(len(x))\nplt.figure(figsize=(10,5))\nsns.barplot(x=date,y=year)\nplt.xlabel(\"Car Count\")\nplt.ylabel(\"Date\")\nplt.title(\"Registration Date\")\nplt.show()","492b1584":"plt.figure(figsize=(10,5))\nsns.countplot(data['fuel'])\nplt.title('Fuel',color=\"blue\")\nplt.xlabel(\"Fuel Type\")\nplt.ylabel(\"Car Count\")\nplt.show()","9a4b2a31":"color = []\ncolors = ['pink','grey','white','red','silver','blue','orange','beige','brown','green']\ncolors1 = ['black','grey','white','red','silver','blue','orange','beige','brown','green']\nexplode = [0,0,0,0,0,0,0,0,0,0]\nfor i in range(1,11):\n    if(i==1):\n        x = data[data['paint_color']==\"black\"]\n        color.append(len(x))\n    elif(i==2):\n        x = data[data['paint_color']==\"grey\"]\n        color.append(len(x))\n    elif(i==3):\n        x = data[data['paint_color']==\"white\"]\n        color.append(len(x))\n    elif(i==4):\n        x = data[data['paint_color']==\"red\"]\n        color.append(len(x))\n    elif(i==5):\n        x = data[data['paint_color']==\"silver\"]\n        color.append(len(x))\n    elif(i==6):\n        x = data[data['paint_color']==\"blue\"]\n        color.append(len(x))\n    elif(i==7):\n        x = data[data['paint_color']==\"orange\"]\n        color.append(len(x))\n    elif(i==8):\n        x = data[data['paint_color']==\"beige\"]\n        color.append(len(x))\n    elif(i==9):\n        x = data[data['paint_color']==\"brown\"]\n        color.append(len(x))\n    elif(i==10):\n        x = data[data['paint_color']==\"green\"]\n        color.append(len(x))\n\nplt.figure(figsize=(15,15))\nplt.pie(color,explode=explode, labels=colors1, colors=colors, autopct='%1.1f%%')\nplt.title('Paint Color',color=\"blue\")\nplt.show()","05a1fcbf":"plt.figure(figsize=(15,10))\nsns.countplot(data['car_type'])\nplt.xlabel(\"Car Type\")\nplt.ylabel(\"Car Count\")\nplt.show()","882577a8":"plt.figure(figsize=(15,10))\nsns.countplot(data['sold_at'])\nplt.xlabel(\"Sold Date\")\nplt.ylabel(\"Car Count\")\nplt.xticks(rotation=80)\nplt.title(\"Sold Date\")\nplt.show()","b6f6dd1f":"data.drop(['maker_key','model_key'],axis=1,inplace=True)\ndata.head()","5adfa157":"data['RegistrationDate'] = [1 if(i>=\"1990-03-01\" and i<\"2000-01-01\") else 2 if(i>=\"2000-01-01\" and i<\"2010-01-01\")\n                            else 3 for i in data['registration_date']]","dec11027":"data['fuel'] = data['fuel'].replace(\"diesel\",1)\ndata['fuel'] = data['fuel'].replace(\"petrol\",2)\ndata['fuel'] = data['fuel'].replace(\"hybrid_petrol\",3)\ndata['fuel'] = data['fuel'].replace(\"electro\",4)","34ddc607":"data['paint_color'] = data['paint_color'].replace(\"black\",1)\ndata['paint_color'] = data['paint_color'].replace(\"grey\",2)\ndata['paint_color'] = data['paint_color'].replace(\"white\",3)\ndata['paint_color'] = data['paint_color'].replace(\"red\",4)\ndata['paint_color'] = data['paint_color'].replace(\"silver\",5)\ndata['paint_color'] = data['paint_color'].replace(\"blue\",6)\ndata['paint_color'] = data['paint_color'].replace(\"orange\",7)\ndata['paint_color'] = data['paint_color'].replace(\"beige\",8)\ndata['paint_color'] = data['paint_color'].replace(\"brown\",9)\ndata['paint_color'] = data['paint_color'].replace(\"green\",10)","deb64f4f":"data['car_type'].unique()\ndata['car_type'] = data['car_type'].replace(\"convertible\",1)\ndata['car_type'] = data['car_type'].replace(\"coupe\",2)\ndata['car_type'] = data['car_type'].replace(\"estate\",3)\ndata['car_type'] = data['car_type'].replace(\"hatchback\",4)\ndata['car_type'] = data['car_type'].replace(\"sedan\",5)\ndata['car_type'] = data['car_type'].replace(\"subcompact\",6)\ndata['car_type'] = data['car_type'].replace(\"suv\",7)\ndata['car_type'] = data['car_type'].replace(\"van\",8)","e62eda56":"data['feature_1'] = data['feature_1'].replace(True,1)\ndata['feature_1'] = data['feature_1'].replace(False,0)\ndata['feature_2'] = data['feature_2'].replace(True,1)\ndata['feature_2'] = data['feature_2'].replace(False,0)\ndata['feature_3'] = data['feature_3'].replace(True,1)\ndata['feature_3'] = data['feature_3'].replace(False,0)\ndata['feature_4'] = data['feature_4'].replace(True,1)\ndata['feature_4'] = data['feature_4'].replace(False,0)\ndata['feature_5'] = data['feature_5'].replace(True,1)\ndata['feature_5'] = data['feature_5'].replace(False,0)\ndata['feature_6'] = data['feature_6'].replace(True,1)\ndata['feature_6'] = data['feature_6'].replace(False,0)\ndata['feature_7'] = data['feature_7'].replace(True,1)\ndata['feature_7'] = data['feature_7'].replace(False,0)\ndata['feature_8'] = data['feature_8'].replace(True,1)\ndata['feature_8'] = data['feature_8'].replace(False,0)","d709e879":"data['SoldAt'] =[1 if(i==\"2018-01-01\") else 2 if(i==\"2018-02-01\") else 3 if(i==\"2018-03-01\")\n                 else 4 if(i==\"2018-04-01\") else 5 if(i==\"2018-05-01\") else 6 if(i==\"2018-06-01\")\n                 else 7 if(i==\"2018-07-01\") else 8 if(i==\"2018-08-01\")\n                 else 9 if(i==\"2018-09-01\") else 0 for i in data['sold_at']]","3148ab01":"data.drop(['registration_date','sold_at'],axis=1,inplace=True)\ndata.head()","59220a76":"#test split\ndata_score = []\ndata_price = price.values.reshape(-1,1)\nx_train, x_test, y_train, y_test = train_test_split(data,data_price,test_size=0.2,random_state=42)","97e3b923":"#num_estimators = [100,500,1000]\n#learn_rates = [0.1, 0.5, 1]\n#max_depths = [1, 2, 3, 4]\n#min_samples_leaf = [5,10,15]\n#min_samples_split = [2,5,10]\n\n#param_grid = {'n_estimators': num_estimators,\n#             'learning_rate': learn_rates,\n#              'max_depth': max_depths,\n#              'min_samples_leaf': min_samples_leaf,\n#              'min_samples_split': min_samples_split}\n\n#grid_search = GridSearchCV(GradientBoostingRegressor(loss='huber'),\n#                           param_grid, cv=3, return_train_score=True)\n#grid_search.fit(x_train, y_train)\n\n#grid_search.best_params_  \n\n# Create Model\ngb = GradientBoostingRegressor(min_samples_leaf= 15, min_samples_split=2, learning_rate=0.1, max_depth=4, n_estimators=100)\ngb.fit(x_train,y_train)\ny_gb = gb.predict(data)\n# Calculate R Square\nprint(gb.score(x_test,y_test))\ndata_score.append(gb.score(x_test,y_test))","87eb4e1f":"# Create Model\nreg = RandomForestRegressor(n_estimators=50, random_state = 42) # determine tree count and random data count\nreg.fit(x_train,y_train) # create model\n\n# Calculate R Square\nprint(\"R Square Value :\",reg.score(x_test,y_test))#Evaluation algorithm, If it is close to 1, Model is so good.\ndata_score.append(reg.score(x_test,y_test))","e9846bba":"# Create Model\nreg = DecisionTreeRegressor()\nreg.fit(x_train,y_train)\n\n# Calculate R Square\nprint(\"R Square Value :\",reg.score(x_test,y_test))\ndata_score.append(reg.score(x_test,y_test))","1fb0dbeb":"model_name = ['Gradient Boosting','Random Forest','Decision Tree']\nplt.figure(figsize=(10,5))\nsns.barplot(x=data_score,y=model_name,palette = sns.cubehelix_palette(len(data_score)))\nplt.xlabel(\"R Square Value\")\nplt.ylabel(\"Models\")\nplt.show()","0f6be51e":"#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'Model' : m_key, 'Price': y_gb})\noutput.to_csv('submission.csv', index=False)","462eb36b":"### Sold Date","089e8dca":"The best params \n\n{'learning_rate': 0.1, <br\/>\n 'max_depth': 4,    <br\/>\n 'min_samples_leaf': 15,  <br\/>\n 'min_samples_split': 2,  <br\/>\n 'n_estimators': 100}  <br\/>","6054abe8":"### Fuel Type Visualization","f508ac6c":"<a id=\"1\"><\/a>\n## Exploratory Data Analysis","89f0cf64":"### Car Type","b18c0572":"# BMW Pricing Challenge %77 True Prediction\n\nHi everybody ! Estimating the value of a used car is quite difficult. By basing on BMW used car dataset, I created a model. It was enjoyable a study for me. I hope you enjoy it. I'm wating that you write your all ideas. If it benefits for you, please, don't forget to upvote ! \n\n## Have A Fun\n\n# CONTENT\n\n[1.Exploratory Data Analysis <br\/>](#1)\n[2.Cleaning Data <br\/>](#2)\n[3.Prediction<br\/>](#3)\n[4.Evaluation Regression Models <br\/>](#4)\n","b1542a98":"## Random Forest","3df41a41":"### Feature Types","12d375b8":"## Gradient Boosting","62e42e36":"### Mileage Visualization","62305888":"### Registration Date\n\nRegistration date is important in terms of learning the age of car. We should bring this information to status that it can use. I divided them into 3. I gave a number to every interval. So that I can use it in my model.","2d9e01a0":"### Color Type\n\nHow is your relationship with color? I think you love colors. So that, I should add my model it.","e5c6080c":"## Decision Tree","c0445a66":"### Fuel Type\n\nNew or used car, don't matter. While we buy a car, we pay attention to fuel type. We should bring this information ,like registration date, to status that it can use. So that I can use it in my model.","b51a1cd6":"### Car Type Visualization","4135c057":"<a id=\"3\"><\/a>\n# Prediction","fd57e46d":"### Sold Date Visualization","6a2ada0b":"### Registration Date Visualization","b182012b":"<a id=\"4\"><\/a>\n# Evaluation Regression Models ","1475e9ae":"### Engine Power according to Model Visualization","7a69b80d":"<a id=\"2\"><\/a>\n# Cleaning Data","901d1055":"### Color Type Visualization"}}