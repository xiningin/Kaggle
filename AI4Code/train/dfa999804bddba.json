{"cell_type":{"96ad62e1":"code","d3f105b4":"code","14f519a4":"code","9545b526":"code","c135d7d2":"code","8130778c":"code","a16f0f22":"code","95edaa9d":"code","348868d8":"code","d90bd812":"code","351e1f12":"code","446a34fe":"code","c27b24b1":"code","079e03b3":"markdown","a088e484":"markdown","6d195b58":"markdown","9efebc23":"markdown","bbb7d6e0":"markdown","57b958e8":"markdown","77a17183":"markdown","d5c39e83":"markdown"},"source":{"96ad62e1":"!python -m pip uninstall opencv-python --yes\n!pip install opencv-python --user","d3f105b4":"!python -m pip uninstall opencv_contrib_python --yes\n!pip install opencv-contrib-python --user","14f519a4":"import cv2\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","9545b526":"%matplotlib inline","c135d7d2":"def order_pics(pics):\n    ordered_pics = []\n    ordered_targ = []\n    for i in range(41):\n        num = i + 1\n        for pic in pics:\n            if int(pic.split('_')[1].replace('.jpg','')) == num:\n                ordered_pics.append(pic)\n                ordered_targ.append(num)\n    return ordered_pics, ordered_targ\n    \ndef load_images_from_folder(folder):\n    images = []\n    pics = os.listdir(folder)\n    pics, target = order_pics(pics)\n    for filename in pics:\n        img = cv2.imread(os.path.join(folder,filename)) # read image\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # transform to grayscale\n        img = cv2.resize(img, (80, 80), interpolation = cv2.INTER_AREA) # resize to 80x80\n        if img is not None:\n            images.append(img)\n    return images, target","8130778c":"folder = '..\/input\/the-orl-database-for-training-and-testing'\nX, y = load_images_from_folder(folder)","a16f0f22":"fig, axes = plt.subplots(41, 10, figsize=(18, 18))\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(np.array(X)[i].reshape(80, 80), cmap='gray')","95edaa9d":"X_train = list()\nX_test = list()\ny_train = list()\ny_test = list()\nfor i in range(0, len(X), 10): # starts on index zero until the length of X for each 10\n    person_X = X[i:i+10]\n    person_y = y[i:i+10]\n    X_train_Person, X_test_Person, y_train_Person, y_test_Person = train_test_split(person_X, person_y, \n                                                                                    test_size=0.3, random_state=14)\n    X_train.extend(X_train_Person)\n    X_test.extend(X_test_Person)\n    y_train.extend(y_train_Person)\n    y_test.extend(y_test_Person)","348868d8":"train_vec = []\nfor i in X_train:\n    train_vec.append(i.flatten('F')) \n\n# Calculate the mean of all images    \ntrain_mean = np.mean([train_vec], axis=1)\ntrain_mean = train_mean[0]","d90bd812":"#Convert the mean vector to a transpose matrix\nv1 = train_mean.reshape(80,80).T\nplt.imshow(np.asarray(v1.squeeze()), cmap='gray')\nplt.show()","351e1f12":"def model_eigenfaces(num_components ,train_faces, train_labels, test_faces, test_labels):\n    model = cv2.face.LBPHFaceRecognizer_create(num_components)\n    model.train(train_faces, np.array(train_labels))    \n    pred = list()\n    for i, image in enumerate(test_faces):\n        label, confidence = model.predict(image)\n        pred.append(label)\n    \n    accuracy = accuracy_score(pred, test_labels)\n    return num_components, round(accuracy*100,2)    ","446a34fe":"n_comp = list()\naccuracy = list()\nfor pca in range(1,21):\n    pred, accur = model_eigenfaces(pca, X_train, y_train, X_test, y_test)\n    n_comp.append(pred)\n    accuracy.append(accur)","c27b24b1":"for i in range(len(n_comp)):\n    print('PCA number: {}, accuracy score: {}%'.format(n_comp[i], accuracy[i]))\n   \nplt.rcParams['figure.figsize'] = (15,8)\nplt.plot(n_comp, accuracy, 'b-.')\nplt.xlabel('PCA number of components')\nplt.ylabel('% of Accuracy')    \nplt.title('% of Accuracy by number of components (PCA)')","079e03b3":"## Train test split<br\/> separate samples for each person ","a088e484":"## Transform the number matrix into vector","6d195b58":"## Plotting matrix images","9efebc23":"## Test with different PCA values","bbb7d6e0":"## Initiate the model","57b958e8":"## Read images from folder and convert to np.array","77a17183":"## Plot the mean image","d5c39e83":"## Results"}}