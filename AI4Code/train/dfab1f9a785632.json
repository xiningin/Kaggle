{"cell_type":{"e9455958":"code","fa0398f9":"code","2282c099":"code","ccbf362b":"code","af7b1026":"code","0ea4872c":"code","22945b0f":"code","a0c12a8b":"code","73192d96":"code","c6631ac8":"code","a4a55286":"code","50db93f2":"code","9abddadf":"code","a590a064":"code","98e82272":"code","9e656b17":"code","e12d7c30":"code","787838b6":"markdown","678b57b7":"markdown","7ccebd5b":"markdown"},"source":{"e9455958":"import numpy as np\nimport pandas as pd\nimport time\nimport warnings\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport os\nprint(os.listdir(\"..\/input\"))\nwarnings.filterwarnings('ignore')","fa0398f9":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","2282c099":"train.describe()","ccbf362b":"train['HF1'] = train['Horizontal_Distance_To_Hydrology']+train['Horizontal_Distance_To_Fire_Points']\ntrain['HF2'] = abs(train['Horizontal_Distance_To_Hydrology']-train['Horizontal_Distance_To_Fire_Points'])\ntrain['HR1'] = abs(train['Horizontal_Distance_To_Hydrology']+train['Horizontal_Distance_To_Roadways'])\ntrain['HR2'] = abs(train['Horizontal_Distance_To_Hydrology']-train['Horizontal_Distance_To_Roadways'])\ntrain['FR1'] = abs(train['Horizontal_Distance_To_Fire_Points']+train['Horizontal_Distance_To_Roadways'])\ntrain['FR2'] = abs(train['Horizontal_Distance_To_Fire_Points']-train['Horizontal_Distance_To_Roadways'])\n\n# Pythagoras theorem\ntrain['slope_hyd'] = (train['Horizontal_Distance_To_Hydrology']**2+train['Vertical_Distance_To_Hydrology']**2)**0.5\ntrain.slope_hyd=train.slope_hyd.map(lambda x: 0 if np.isinf(x) else x)\n\n# Means\ntrain['Mean_Amenities']=(train.Horizontal_Distance_To_Fire_Points + train.Horizontal_Distance_To_Hydrology + train.Horizontal_Distance_To_Roadways) \/ 3  \ntrain['Mean_Fire_Hyd']=(train.Horizontal_Distance_To_Fire_Points + train.Horizontal_Distance_To_Hydrology) \/ 2 \n\n# Testing data\n\ntest['HF1'] = test['Horizontal_Distance_To_Hydrology']+test['Horizontal_Distance_To_Fire_Points']\ntest['HF2'] = abs(test['Horizontal_Distance_To_Hydrology']-test['Horizontal_Distance_To_Fire_Points'])\ntest['HR1'] = abs(test['Horizontal_Distance_To_Hydrology']+test['Horizontal_Distance_To_Roadways'])\ntest['HR2'] = abs(test['Horizontal_Distance_To_Hydrology']-test['Horizontal_Distance_To_Roadways'])\ntest['FR1'] = abs(test['Horizontal_Distance_To_Fire_Points']+test['Horizontal_Distance_To_Roadways'])\ntest['FR2'] = abs(test['Horizontal_Distance_To_Fire_Points']-test['Horizontal_Distance_To_Roadways'])\n\n# Pythagoras theorem\ntest['slope_hyd'] = (test['Horizontal_Distance_To_Hydrology']**2+test['Vertical_Distance_To_Hydrology']**2)**0.5\ntest.slope_hyd=test.slope_hyd.map(lambda x: 0 if np.isinf(x) else x) # remove infinite value if any\n\n# Means\ntest['Mean_Amenities']=(test.Horizontal_Distance_To_Fire_Points + test.Horizontal_Distance_To_Hydrology + test.Horizontal_Distance_To_Roadways) \/ 3 \ntest['Mean_Fire_Hyd']=(test.Horizontal_Distance_To_Fire_Points + test.Horizontal_Distance_To_Hydrology) \/ 2","af7b1026":"train.shape","0ea4872c":"test.shape","22945b0f":"y_train = train['Cover_Type']\nx_train = train.drop(['Cover_Type'],axis=1)","a0c12a8b":"preds = pd.DataFrame()","73192d96":"from lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn import ensemble \nfrom sklearn.naive_bayes import BernoulliNB","c6631ac8":"m1 = ensemble.AdaBoostClassifier(ensemble.ExtraTreesClassifier(n_estimators=500), n_estimators=250, learning_rate=0.01, algorithm='SAMME')  \nm1.fit(x_train, y_train) \npreds[\"Model1\"] = m1.predict(test)","a4a55286":"m2 = ensemble.ExtraTreesClassifier(n_estimators=550)  \nm2.fit(x_train, y_train)\npreds[\"Model2\"] = m2.predict(test)","50db93f2":"m3 = XGBClassifier(max_depth=20, n_estimators=1000)  \nm3.fit(x_train, y_train)\npreds[\"Model3\"] = m3.predict(test)","9abddadf":"m4 = LGBMClassifier(n_estimators=2000, max_depth=15)\nm4.fit(x_train, y_train)\npreds[\"Model4\"] = m4.predict(test)","a590a064":"m5 = ensemble.AdaBoostClassifier(ensemble.GradientBoostingClassifier(n_estimators=1000, max_depth=10), n_estimators=1000, learning_rate=0.01, algorithm=\"SAMME\")\nm5.fit(x_train, y_train)\npreds[\"Model5\"] = m5.predict(test)","98e82272":"m6 = SGDClassifier(loss='hinge')\nm6.fit(x_train, y_train)\npreds[\"Model6\"] = m6.predict(test)","9e656b17":"m7 = BernoulliNB()\nm7.fit(x_train,y_train)\npreds['Model7'] = m7.predict(test)\n","e12d7c30":"pred = preds.mode(axis=1)\nsub = pd.DataFrame({\"Id\": test['Id'],\"Cover_Type\": pred[0].astype('int').values})\nsub.to_csv(\"result.csv\", index=False)","787838b6":"![](http:\/\/images.mentalfloss.com\/sites\/default\/files\/styles\/mf_image_16x9\/public\/31105585103_4c32392ac1_k.jpg?itok=NfVq56V4&resize=720x619)","678b57b7":"## Feature Engineering","7ccebd5b":"## Model Building"}}