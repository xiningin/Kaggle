{"cell_type":{"f2e8a33c":"code","2c85b92b":"code","703623f1":"code","46d337db":"code","fb8e0863":"code","833fa515":"code","8421da60":"code","ab6e40eb":"code","fffdf71d":"code","a8905b1f":"code","dbc67d7f":"code","9f57c4b4":"code","0b686007":"code","29e97773":"code","54f57775":"code","1a154330":"code","a3dadd66":"code","f7310b5a":"code","b80d5bdd":"code","b20be3fb":"code","7c9257ad":"code","a9c57fd7":"code","0e33ac16":"code","612f2000":"code","6c50e4bc":"code","d14a6994":"code","311017f5":"code","04e5a105":"code","25c60e5e":"code","9664c30b":"code","2164f05d":"code","541bad25":"code","b1154de6":"code","03d39a3a":"code","1d6972ab":"code","b3c09e3a":"code","b1596eca":"code","f4c62a3e":"code","22a2eebd":"code","27e85831":"code","1100930b":"code","1ecceb9d":"code","aa7b82c1":"code","a36aeefb":"code","490321d2":"code","76f8dc0b":"code","13d545ea":"code","64e4da27":"code","ec7314ee":"code","e453814c":"code","5bda6fff":"code","dd3b665a":"code","1653a0e3":"code","aa8400a7":"code","35cb543b":"code","22f0c4ed":"code","191a91c9":"code","ed608e7a":"code","b0594588":"code","d67ca999":"code","9d61b3ec":"code","5cec246f":"code","6fe475ba":"code","f47a32bd":"code","e1c0418a":"code","a1df8969":"code","8c831417":"code","cc7d02f8":"code","78b881ed":"code","e25e2ef5":"code","3d4a77f5":"code","21e6fd8d":"code","daf60e84":"code","4af468fd":"code","177d99e8":"code","a3946d8b":"code","8bd9ee77":"code","086ec9ba":"code","070b991e":"code","2f4aaf7c":"code","8210beda":"code","644fbfd8":"code","ec509553":"code","5ce4872e":"code","2b9e6188":"code","c87b3bd4":"code","ca4dfc30":"code","b2635b0d":"code","17f96f2d":"code","13a77dde":"code","82eca785":"code","c8be5c43":"code","ad9c15b2":"code","d636dfd8":"code","f895de2f":"code","4acaa318":"code","31916f4c":"code","d8a184b3":"code","126289c3":"markdown","1bff00ea":"markdown","ddc7cfea":"markdown","dc27ce98":"markdown","c0102ae2":"markdown","c9219324":"markdown","d6ee9d3f":"markdown","ac3c43a9":"markdown","ddc61261":"markdown","3ac48cbe":"markdown","ac0b1566":"markdown","62e50490":"markdown","17227e53":"markdown","5d55ddfa":"markdown","437b89ec":"markdown","c630b8a6":"markdown","25f39aa1":"markdown","5f772087":"markdown","87225e6f":"markdown","9d2dc7c0":"markdown","1d00bb9f":"markdown","cde1a29d":"markdown","597c3e80":"markdown","b1e5988c":"markdown","d5612e0e":"markdown","3f854363":"markdown","88e96b3a":"markdown","4740e764":"markdown","47640a59":"markdown","a33da90e":"markdown","9212a574":"markdown","3b23d6c2":"markdown","835f8c4f":"markdown","f72278d7":"markdown","635972fa":"markdown"},"source":{"f2e8a33c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c85b92b":"import warnings \nimport math\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score, mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nimport xgboost as xgb\nimport torch \nimport torch.nn as nn\n\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', None)\nplt.style.use(style='ggplot')\n%matplotlib inline","703623f1":"train = pd.read_csv('..\/input\/used-cars-price-prediction\/train-data.csv')\ntest = pd.read_csv('..\/input\/used-cars-price-prediction\/test-data.csv')\nprint(train.shape)\nprint(train.info())\nprint(test.shape)\nprint(test.info())","46d337db":"train.head()","fb8e0863":"test.head()","833fa515":"print(train.shape, test.shape)\ntrain.drop('New_Price', axis=1, inplace=True)\ntest.drop('New_Price', axis=1, inplace=True)\nprint(train.shape, test.shape)","8421da60":"print(train.isnull().sum())\nprint(\"------------------------\")\nprint(test.isnull().sum())","ab6e40eb":"print(train['Unnamed: 0'].value_counts())","fffdf71d":"unnamed_train = list(train['Unnamed: 0'].unique())\nunnamed_test = list(test['Unnamed: 0'].unique())\nfor i in unnamed_test:\n    if i not in unnamed_train:\n        print(i)","a8905b1f":"print(train['Name'].value_counts())\nprint(train['Unnamed: 0'].value_counts())","dbc67d7f":"print(test['Name'].value_counts())","9f57c4b4":"print(test['Name'].value_counts())","0b686007":"car_names_train = list(train['Name'].unique())\ncar_names_test = list(test['Name'].unique())\nfor i in car_names_test:\n    if i not in car_names_train:\n        print(i)","29e97773":"print(train.shape, test.shape)\ntrain.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)\nprint(train.shape, test.shape)","54f57775":"train['Location'][:20]","1a154330":"train['Location'].value_counts()","a3dadd66":"test['Location'].value_counts()","f7310b5a":"plt.figure(figsize=(8, 6))\nsns.boxplot(train['Kilometers_Driven'])\nplt.show()","b80d5bdd":"temp2 = test[test['Kilometers_Driven'] > 400000]\ntemp2","b20be3fb":"print(train.shape)\ntemp = train[train['Kilometers_Driven'] > 400000].index\ntrain.drop(temp, axis=0, inplace=True)\nprint(train.shape)","7c9257ad":"train['Fuel_Type'][:20]","a9c57fd7":"train['Fuel_Type'].value_counts()","0e33ac16":"test['Fuel_Type'].value_counts()","612f2000":"train['Transmission'][:20]","6c50e4bc":"train['Transmission'].value_counts()","d14a6994":"test['Transmission'].value_counts()","311017f5":"train['Owner_Type'][:20]","04e5a105":"train['Owner_Type'].value_counts()","25c60e5e":"test['Owner_Type'].value_counts()","9664c30b":"train['Mileage'][:20]","2164f05d":"train['Mileage'].value_counts(dropna=False)","541bad25":"# Null Values\ntrain['Mileage'] = train['Mileage'].fillna('17.0 kmpl')","b1154de6":"train['Mileage'][0].split()[0], train['Mileage'][0].split()[1]","03d39a3a":"mile_age_val = pd.DataFrame(columns=['Mileage_value'])\nmile_age_measure = pd.DataFrame(columns=['Mileage_measure'])\ntrain = pd.concat([train, mile_age_val, mile_age_measure], axis=1)\ntest = pd.concat([test, mile_age_val, mile_age_measure], axis=1)\n\nfor i in train.index:\n    value = train['Mileage'][i].split()[0]\n    measure = train['Mileage'][i].split()[1]\n    train['Mileage_value'][i] = value\n    train['Mileage_measure'][i] = measure\n    \nfor i in test.index:\n    value = test['Mileage'][i].split()[0]\n    measure = test['Mileage'][i].split()[1]\n    test['Mileage_value'][i] = value\n    test['Mileage_measure'][i] = measure\n    \ntrain.drop('Mileage', axis=1, inplace=True)\ntest.drop('Mileage', axis=1, inplace=True)","1d6972ab":"train['Engine'][:20]","b3c09e3a":"train['Engine'].value_counts()","b1596eca":"test['Engine'].value_counts()","f4c62a3e":"# Null Values\ntrain['Engine'] = train['Engine'].fillna('1197 CC')\ntest['Engine'] = test['Engine'].fillna('1197 CC')","22a2eebd":"train['Engine'][0].split()[0], train['Engine'][0].split()[1]","27e85831":"engine_val = pd.DataFrame(columns=['Engine_value'])\nengine_measure = pd.DataFrame(columns=['Engine_measure'])\ntrain = pd.concat([train, engine_val, engine_measure], axis=1)\ntest = pd.concat([test, engine_val, engine_measure], axis=1)\n\nfor i in train.index:\n    value = train['Engine'][i].split()[0]\n    measure = train['Engine'][i].split()[1]\n    train['Engine_value'][i] = value\n    train['Engine_measure'][i] = measure\n        \nfor i in test.index:\n    value = test['Engine'][i].split()[0]\n    measure = test['Engine'][i].split()[1]\n    test['Engine_value'][i] = value\n    test['Engine_measure'][i] = measure\n    \ntrain.drop('Engine', axis=1, inplace=True)\ntest.drop('Engine', axis=1, inplace=True)","1100930b":"train['Engine_measure'].value_counts()","1ecceb9d":"train.drop('Engine_measure', axis=1, inplace=True)\ntest.drop('Engine_measure', axis=1, inplace=True)","aa7b82c1":"train.shape, test.shape","a36aeefb":"train['Power'][:20]","490321d2":"train['Power'].value_counts()","76f8dc0b":"test['Power'].value_counts()","13d545ea":"train['Power'].unique()","64e4da27":"# Null Values\ntrain['Power'] = train['Power'].fillna('74 bhp')\ntest['Power'] = test['Power'].fillna('74 bhp')","ec7314ee":"power_val = pd.DataFrame(columns=['Power_value'])\npower_measure = pd.DataFrame(columns=['Power_measure'])\ntrain = pd.concat([train, power_val, power_measure], axis=1)\ntest = pd.concat([test, power_val, power_measure], axis=1)\n\nfor i in train.index:\n    value = train['Power'][i].split()[0]\n    measure = train['Power'][i].split()[1]\n    train['Power_value'][i] = value\n    train['Power_measure'][i] = measure\n        \nfor i in test.index:\n    value = test['Power'][i].split()[0]\n    measure = test['Power'][i].split()[1]\n    test['Power_value'][i] = value\n    test['Power_measure'][i] = measure\n    \ntrain.drop('Power', axis=1, inplace=True)\ntest.drop('Power', axis=1, inplace=True)","e453814c":"train['Power_measure'].value_counts()","5bda6fff":"t = train[train['Power_value'] == 'null']\nt['Power_value'] = '74'\ntrain[train['Power_value'] == 'null'] = t\nt = test[test['Power_value'] == 'null']\nt['Power_value'] = '74'\ntest[test['Power_value'] == 'null'] = t","dd3b665a":"train.drop('Power_measure', axis=1, inplace=True)\ntest.drop('Power_measure', axis=1, inplace=True)","1653a0e3":"train['Seats'][:20]","aa8400a7":"train['Seats'].value_counts()","35cb543b":"test['Seats'].value_counts()","22f0c4ed":"# Null values\ntrain['Seats'] = train['Seats'].fillna(5.0)\ntest['Seats'] = test['Seats'].fillna(5.0)","191a91c9":"print(len(train['Unnamed: 0'].value_counts()))","ed608e7a":"plt.figure(figsize=(12, 9))\nplt.scatter(train['Unnamed: 0'], train['Price'])","b0594588":"print(train.shape, test.shape)\ntrain.drop('Unnamed: 0', axis=1, inplace=True)\ntest.drop('Unnamed: 0', axis=1, inplace=True)\nprint(train.shape, test.shape)","d67ca999":"plt.figure(figsize=(12, 9))\nsns.catplot('Location', 'Price', data=train)","9d61b3ec":"plt.figure(figsize=(12, 9))\nsns.barplot('Location', 'Price', data=train)","5cec246f":"plt.figure(figsize=(12, 9))\nsns.catplot('Year', 'Price', data=train)","6fe475ba":"plt.figure(figsize=(12, 9))\nsns.barplot('Year', 'Price', data=train)","f47a32bd":"plt.figure(figsize=(12, 9))\nsns.countplot('Year', data=train)","e1c0418a":"plt.figure(figsize=(12, 9))\nsns.countplot('Year', data=test)","a1df8969":"is_after_2014 = pd.DataFrame(columns=['is_after_2014'])\ntrain = pd.concat([train, is_after_2014], axis=1)\ntest = pd.concat([test, is_after_2014], axis=1)\n\nfor i in train.index:\n    val = train['Year'][i]\n    if val > 2014:\n        train['is_after_2014'][i] = 1\n    else:\n        train['is_after_2014'][i] = 0\n        \nfor i in test.index:\n    val = test['Year'][i]\n    if val > 2014:\n        test['is_after_2014'][i] = 1\n    else:\n        test['is_after_2014'][i] = 0","8c831417":"plt.figure(figsize=(10, 7))\nplt.scatter(train['Kilometers_Driven'], train['Price'])","cc7d02f8":"less_80k = pd.DataFrame(columns=['is_kilometers_driven_less_80k'])\ntrain = pd.concat([train, less_80k])\ntest = pd.concat([test, less_80k])\n\nfor i in train.index:\n    value = train['Kilometers_Driven'][i]\n    if value < 80000:\n        train['is_kilometers_driven_less_80k'][i] = 1\n    else:\n        train['is_kilometers_driven_less_80k'][i] = 0\n        \nfor i in test.index:\n    value = test['Kilometers_Driven'][i]\n    if value < 80000:\n        test['is_kilometers_driven_less_80k'][i] = 1\n    else:\n        test['is_kilometers_driven_less_80k'][i] = 0","78b881ed":"plt.figure(figsize=(10, 7))\nsns.catplot('Fuel_Type', 'Price', data=train)","e25e2ef5":"plt.figure(figsize=(10, 7))\nsns.barplot('Fuel_Type', 'Price', data=train)","3d4a77f5":"test['Fuel_Type'].value_counts()","21e6fd8d":"is_diesel = pd.DataFrame(columns=['is_diesel'])\ntrain = pd.concat([train, is_diesel], axis=1)\ntest = pd.concat([test, is_diesel], axis=1)\n\nfor i in train.index:\n    value = train['Fuel_Type'][i]\n    if value == 'Diesel':\n        train['is_diesel'][i] = 1\n    else:\n        train['is_diesel'][i] = 0\n\nfor i in test.index:\n    value = test['Fuel_Type'][i]\n    if value == 'Diesel':\n        test['is_diesel'][i] = 1\n    else:\n        test['is_diesel'][i] = 0","daf60e84":"plt.figure(figsize=(10, 7))\nsns.catplot('Transmission', 'Price', data=train)","4af468fd":"plt.figure(figsize=(8, 6))\nsns.countplot('Transmission', data=train)","177d99e8":"plt.figure(figsize=(10, 7))\nsns.barplot('Transmission', 'Price', data=train)","a3946d8b":"is_automatic = pd.DataFrame(columns=['is_automatic'])\ntrain = pd.concat([train, is_automatic], axis=1)\ntest = pd.concat([test, is_automatic], axis=1)\n\nfor i in train.index:\n    value = train['Transmission'][i]\n    if value == 'Automatic':\n        train['is_automatic'][i] = 1\n    else:\n        train['is_automatic'][i] = 0\n\nfor i in test.index:\n    value = test['Transmission'][i]\n    if value == 'Automatic':\n        test['is_automatic'][i] = 1\n    else:\n        test['is_automatic'][i] = 0","8bd9ee77":"plt.figure(figsize=(10, 7))\nsns.catplot('Owner_Type', 'Price', data=train)","086ec9ba":"plt.figure(figsize=(8, 6))\nsns.barplot('Owner_Type', 'Price', data=train)","070b991e":"plt.figure(figsize=(8, 6))\nsns.countplot('Owner_Type', data=train)","2f4aaf7c":"print(train['Seats'].value_counts())\nprint(test['Seats'].value_counts())","8210beda":"print(train.shape)\nzero_seat = train[train['Seats'] == 0].index\ntrain.drop(zero_seat, axis=0, inplace=True)\nprint(train.shape)","644fbfd8":"plt.figure(figsize=(8, 6))\nsns.catplot('Seats', 'Price', data=train)","ec509553":"plt.figure(figsize=(8, 6))\nsns.barplot('Seats', 'Price', data=train)","5ce4872e":"plt.figure(figsize=(8, 6))\nsns.countplot('Seats', data=train)","2b9e6188":"is_2_seats = pd.DataFrame(columns=['is_2_seats'])\ntrain = pd.concat([train, is_2_seats], axis=1)\ntest = pd.concat([test, is_2_seats], axis=1)\n\nfor i in train.index:\n    value = train['Seats'][i]\n    if value == 2:\n        train['is_2_seats'][i] = 1\n    else:\n        train['is_2_seats'][i] = 0\n        \nfor i in test.index:\n    value = test['Seats'][i]\n    if value == 2:\n        test['is_2_seats'][i] = 1\n    else:\n        test['is_2_seats'][i] = 0","c87b3bd4":"for i in ['is_after_2014', 'is_kilometers_driven_less_80k', \n          'is_diesel', 'is_automatic', 'is_2_seats', \n          'Mileage_value', 'Engine_value', 'Power_value']:\n    print(i)\n    train[i] = train[i].astype('float32')\n    test[i] = test[i].astype('float32')","ca4dfc30":"print(train.shape, test.shape)\ncat = train.select_dtypes(include='object')\n\nfor i in cat.columns:\n    le = LabelEncoder()\n    train[i] = le.fit_transform(train[i])\n    test[i] = le.transform(test[i])\n    \nprint(train.shape, test.shape)","b2635b0d":"train_target = train['Price']\ntrain.drop('Price', axis=1, inplace=True)\nmeans = train.mean()\nstds = train.std()\ntrain = (train - means) \/ stds\ntest = (test- means) \/ stds","17f96f2d":"print(train.shape)\ntrain.head()","13a77dde":"print(test.shape)\ntest.head()","82eca785":"# Split data\nX_train, X_dev, y_train, y_dev = train_test_split(train, train_target, test_size=0.15, random_state=42)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_dev.shape)\nprint(y_dev.shape)","c8be5c43":"# Linear Regression\nlr = LinearRegression()\nlr.fit(X_train, y_train)\n\n# Predict training data\ny_pred_lr_train = lr.predict(X_train)\n\n# Evaluation training data\nprint(\"MSE on Training Set (Linear Regression):\", mean_squared_error(y_pred_lr_train, y_train))\n\n# Predict dev data\ny_pred_lr_dev = lr.predict(X_dev)\n\n# Evaluation dev data\nprint(\"MSE on Dev Set (Linear Regression):\", mean_squared_error(y_pred_lr_dev, y_dev))","ad9c15b2":"# Decision Tree\ndt = DecisionTreeRegressor(splitter='best', max_depth=5)\ndt.fit(X_train, y_train)\n\n# Predict training data\ny_pred_dt_train = dt.predict(X_train)\n\n# Evaluation training data\nprint(\"MSE on Training Set (Decision Tree):\", mean_squared_error(y_pred_dt_train, y_train))\n\n# Predict dev data\ny_pred_lr_dev = dt.predict(X_dev)\n\n# Evaluation dev data\nprint(\"MSE on Dev Set (Decision Tree):\", mean_squared_error(y_pred_lr_dev, y_dev))","d636dfd8":"# Random Froest\nrf = RandomForestRegressor(n_estimators=20, max_depth=5)\nrf.fit(X_train, y_train)\n\n# Predict training data\ny_pred_rf_train = rf.predict(X_train)\n\n# Evaluation training data\nprint(\"MSE on Training Set (Random Forest):\", mean_squared_error(y_pred_rf_train, y_train))\n\n# Predict dev data\ny_pred_rf_dev = rf.predict(X_dev)\n\n# Evaluation dev data\nprint(\"MSE on Dev Set (Random Forest):\", mean_squared_error(y_pred_rf_dev, y_dev))","f895de2f":"# Random Forest with Grid Search\nrf = RandomForestRegressor(random_state=42)\n\nparam_grid = {\n    \"criterion\": ['mse', 'mae'],\n    \"n_estimators\": [5, 10, 15, 20, 25, 30],\n    \"max_depth\": [5, 6, 7, 12, 13, 15]\n}\n\nrf_model = GridSearchCV(estimator=rf, cv=5, param_grid=param_grid, verbose=2)\nrf_model.fit(train, train_target)\nprint(rf_model.best_score_)\nprint(rf_model.best_estimator_.get_params())","4acaa318":"# XGBoost\nxgbmodel = xgb.XGBRegressor(n_estimators=15, \n                             eta=0.2, gamma=1, max_depth=10, \n                             reg_lambda=1)\nxgbmodel.fit(X_train, y_train)\n\n# Predict training data\ny_pred_xg_train = xgbmodel.predict(X_train)\n\n# Evaluation training data\nprint(\"MSE on Training Set (XGBoost):\", mean_squared_error(y_pred_xg_train, y_train))\n\n# Predict dev data\ny_pred_xg_dev = xgbmodel.predict(X_dev)\n\n# Evaluation dev data\nprint(\"MSE on Dev Set (XGBoost):\", mean_squared_error(y_pred_xg_dev, y_dev))","31916f4c":"# XGBoost with Grid Search\nxgbb = xgb.XGBRegressor()\n\nparam_grid = {\n    \"booster\": ['gbtree', 'dart'],\n    \"eta\": [0.01, 0.06, 0.1, 0.7],\n    \"gamma\": [0, 0.5, 1],\n    \"max_depth\": [5, 8, 10, 13, 15],\n    \"lambda\": [0, 1, 2],\n    \"alpha\": [0, 1, 2]\n}\n\nxgb_model = GridSearchCV(estimator=xgbb, cv=5, param_grid=param_grid, verbose=2)\nxgb_model.fit(train, train_target)\n\nprint(xgb_model.best_score_)\nprint(xgb_model.best_estimator_.get_params())","d8a184b3":"# Predict training data\ny_pred_xg_train = xgb_model.predict(X_train)\n\n# Evaluation training data\nprint(\"MSE on Training Set (XGBoost):\", mean_squared_error(y_pred_xg_train, y_train))\n\n# Predict dev data\ny_pred_xg_dev = xgb_model.predict(X_dev)\n\n# Evaluation dev data\nprint(\"MSE on Dev Set (XGBoost):\", mean_squared_error(y_pred_xg_dev, y_dev))","126289c3":"## Location","1bff00ea":"# Normalization","ddc7cfea":"Generating 'is_2_seats' feature","dc27ce98":"## Unnamed: 0","c0102ae2":"- km\/kg: Kilometers per Kilogram\n- kmpl: Kilometers per Litre","c9219324":"# Data Cleaning and Feature Engineering","d6ee9d3f":"# Modelling ","ac3c43a9":"I guess it would be reasonable to generate a new feature like 'is_after_2014'","ddc61261":"## Owner_Type","3ac48cbe":"## Transmission","ac0b1566":"## Fuel_Type","62e50490":"## Mileage","17227e53":"# Encoding Categorical Features","5d55ddfa":"## Kilometers_Driven","437b89ec":"There is no clear pattern in this feautre, i guess it's gonna be misleading, we gotta drop it.","c630b8a6":"We are gonna do the same we did with Mileage","25f39aa1":"I guess generating feature here is not gonna be that useful","5f772087":"## Seats","87225e6f":"## Kilometers_Driven","9d2dc7c0":"- We are gonna generate feature 'is_diesel'\n- Generating features like 'is_electric' is not gonna be useful, cuz there is not electric cars in test set","1d00bb9f":"## Transmission","cde1a29d":"We can make 2 new columns, one for the value and one for the measurement to handle the mile age column, then we drop it.","597c3e80":"# EDA","b1e5988c":"## Location","d5612e0e":"Generating new feature 'is_kilometers_driven_less_80k' would be useful","3f854363":"## Fuel Type","88e96b3a":"## Name","4740e764":"## Owner_Type","47640a59":"## Unnamed","a33da90e":"## Year","9212a574":"We can not handle all of these values, we have to drop the name column","3b23d6c2":"Generating 'is_automatic' would be great!","835f8c4f":"## Seats","f72278d7":"## Power","635972fa":"## Engine"}}