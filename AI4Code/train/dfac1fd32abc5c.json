{"cell_type":{"9ee7606c":"code","33c4802f":"code","1a47e55b":"code","eb2222a4":"code","0119aec2":"code","2b4ba692":"code","de863c2c":"code","4433af58":"code","50184df9":"code","fe551a06":"code","bb598e54":"code","43c2cbe2":"code","fbf84870":"code","fcd6d920":"code","1a17bd22":"code","68706e09":"code","84ce18f9":"code","1917917f":"code","92ab9f0f":"code","f1c520c5":"code","07e97035":"code","76121450":"code","149cb7d9":"code","92896ac3":"code","c98ccfc5":"markdown","c8796c9d":"markdown"},"source":{"9ee7606c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","33c4802f":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nimport tensorflow.keras.backend as k\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.layers import Input, Dense, Reshape, Flatten\n\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom sklearn.manifold import TSNE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n","1a47e55b":"csvData = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ncsvTest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\ncsvSample = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")","eb2222a4":"csvFeat = csvData.drop(\"label\", axis=1)\ncsvLabel = csvData[\"label\"]\ncsvFeat \/= 255.\ncsvTest = csvTest\/255.","0119aec2":"csvData.head()","2b4ba692":"csvData.keys()","de863c2c":"print(f'Total Pixels: {len(csvFeat.keys())}')\nprint(f'Labels: {sorted(pd.unique(csvLabel))}')\nprint(f'Min and Max value of pixel: {csvFeat.values.min()}, {csvFeat.values.max()}')","4433af58":"csvFeatImg = csvFeat.values.reshape([-1, 28, 28, 1])\ncsvTestImg = csvTest.values.reshape([-1, 28, 28, 1])","50184df9":"sns.countplot(csvData[\"label\"])\nplt.title(\"Label Count\")","fe551a06":"tsne = TSNE(n_components=2, n_iter=500, n_iter_without_progress=50, verbose=20)\nsamp = csvData.sample(frac=.05, replace=False)\nsampY, sampX = samp.iloc[:,:1], samp.iloc[:,1:]\ncomponents = tsne.fit_transform(sampX)","bb598e54":"plt.figure(figsize=(16,10))\nsns.scatterplot(\n    x=components[:,0], y=components[:,1],\n    hue=np.ravel(sampY),\n    palette=sns.color_palette(\"hls\", 10),\n    legend=\"full\",\n    alpha=0.7\n)","43c2cbe2":"fig, ax = plt.subplots(2, 5, figsize=(14,8))\nax = np.ravel(ax)\nfor i in range(10):\n    ax[i].imshow(csvFeatImg[i].squeeze(),cmap='gray')\n    plt.axis(\"off\")\nplt.show()","fbf84870":"csvTrainX, csvValX, csvTrainY, csvValY = train_test_split(csvFeatImg, csvLabel, test_size=.1, stratify=csvLabel)\ncsvTrainX.shape, csvTrainY.shape, csvValX.shape, csvValY.shape","fcd6d920":"trainGen = ImageDataGenerator(\n        rotation_range=15,\n        zoom_range = 0.15,\n        width_shift_range=0.15,\n        height_shift_range=0.15)\n","1a17bd22":"batchSize = 100\nhidddenN = 300\nlastN = 10\ncheckpoint = ModelCheckpoint(\"\/kaggle\/working\/best_model.hdf5\", monitor='val_sparse_categorical_accuracy', verbose=1,\n    save_best_only=True, mode='auto', period=1)","68706e09":"k.clear_session()\ninputData = Input(shape = [28, 28, 1], dtype = tf.float32)\nhiddenLayer_ = Flatten()(inputData)\nhiddenLayer = Dense(hidddenN, activation = 'relu')(hiddenLayer_)\noutput = tf.keras.layers.Dense(lastN, activation='softmax')(hiddenLayer)\nmodel = Model(inputs = inputData, outputs = output)\nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics='sparse_categorical_accuracy'\n)\nmodel.summary()","84ce18f9":"gen = trainGen.flow(csvTrainX, csvTrainY, batch_size=150, shuffle=False)\nhist = model.fit_generator(gen, epochs = 60, validation_data=(csvValX, csvValY), callbacks=[checkpoint])","1917917f":"def report(model, x, y):\n    p = np.argmax(model.predict(x), axis = 1)\n    classReport = classification_report(p, y)\n    accReport = accuracy_score(p, y)\n    print(classReport, accReport)","92ab9f0f":"report(model, csvTrainX, csvTrainY)","f1c520c5":"report(model, csvValX, csvValY)","07e97035":"model.load_weights(\"\/kaggle\/working\/best_model.hdf5\")","76121450":"report(model, csvTrainX, csvTrainY)","149cb7d9":"report(model, csvValX, csvValY)","92896ac3":"testPrediction = np.argmax(model.predict(csvTest), axis=1)\nd = {\n        \"ImageId\": list(range(1, len(testPrediction)+1)),\n        \"Label\": testPrediction.tolist()\n    }\nsubmission = pd.DataFrame(d)\nsubmission.to_csv(\"\/kaggle\/working\/submit.csv\", index = False)","c98ccfc5":"### Info","c8796c9d":"### Plot"}}