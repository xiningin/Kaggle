{"cell_type":{"210332d7":"code","99b0b110":"code","de989fc5":"code","695aca80":"code","9a64a201":"markdown","b6f37e70":"markdown","1e57eef1":"markdown"},"source":{"210332d7":"!pip install 'kaggle-environments>=0.2.1'\n\nimport kaggle_environments\nprint(\"Kaggle Environments version:\", kaggle_environments.version)","99b0b110":"%%writefile agent.py\n\nDIRS = [\"NORTH\", \"SOUTH\", \"EAST\", \"WEST\"]\n\n# Each ship id will be assigned a state, one of COLLECT or DEPOSIT, which decides what it will do on a turn.\nstates = {}\n\nCOLLECT = \"collect\"\nDEPOSIT = \"deposit\"\n\n\ndef argmax(arr, key=None):\n  return arr.index(max(arr, key=key)) if key else arr.index(max(arr))\n\n\n# This function will not hold up in practice\n# E.g. cell getAdjacent(224) includes position 0, which is not adjacent\ndef getAdjacent(pos):\n  return [\n    (pos - 15) % 225,\n    (pos + 15) % 225,\n    (pos +  1) % 225,\n    (pos -  1) % 225\n  ]\n\ndef getDirTo(fromPos, toPos):\n  fromY, fromX = divmod(fromPos, 15)\n  toY,   toX   = divmod(toPos,   15)\n\n  if fromY < toY: return \"SOUTH\"\n  if fromY > toY: return \"NORTH\"\n  if fromX < toX: return \"EAST\"\n  if fromX > toX: return \"WEST\"\n\n    \ndef agent(obs):\n  action = {}\n\n  player_halite, shipyards, ships = obs.players[obs.player]\n\n  for uid, shipyard in shipyards.items():\n    # Maintain one ship always\n    if len(ships) == 0:\n      action[uid] = \"SPAWN\"\n\n  for uid, ship in ships.items():\n    # Maintain one shipyard always\n    if len(shipyards) == 0:\n      action[uid] = \"CONVERT\"\n      continue\n\n    # If a ship was just made\n    if uid not in states: states[uid] = COLLECT\n\n    pos, halite = ship\n\n    if states[uid] == COLLECT:\n      if halite > 2500:\n        states[uid] = DEPOSIT\n\n      elif obs.halite[pos] < 100:\n        best = argmax(getAdjacent(pos), key=obs.halite.__getitem__)\n        action[uid] = DIRS[best]\n\n    if states[uid] == DEPOSIT:\n      if halite < 200: states[uid] = COLLECT\n\n      direction = getDirTo(pos, list(shipyards.values())[0])\n      if direction: action[uid] = direction\n      else: states[uid] = COLLECT\n\n\n  return action","de989fc5":"# Sparring Partner\ndef null_agent(*_): return {}\n\nfor _ in range(3):\n    env = kaggle_environments.make(\"halite\", debug=True)\n    env.run([\"agent.py\", null_agent])\n    env.render(mode=\"ipython\", width=800, height=600)","695aca80":"def mean_reward(rewards):\n    wins = 0\n    ties = 0\n    loses = 0\n\n    for r in rewards:\n        r0 = r[0] or 0\n        r1 = r[1] or 0\n\n        if   r0 > r1: wins  += 1\n        elif r1 > r0: loses += 1\n        else:         ties  += 1\n\n    return [wins \/ len(rewards), ties \/ len(rewards), loses \/ len(rewards)]\n\n\nimport inspect\ndef test_against(enemy, n=25):\n    results = mean_reward(kaggle_environments.evaluate(\n        \"halite\",\n        [\"agent.py\", enemy],\n        num_episodes=n\n    ))\n\n    enemy_name = enemy.__name__ if inspect.isfunction(enemy) else enemy\n    print(\"My Agent vs {}: wins={}, ties={}, loses={}\".format(enemy_name, *results))\n\ntest_against(null_agent)\ntest_against(\"random\")","9a64a201":"# View the agent at work","b6f37e70":"# Evaluate Agent\nExtended from [Halite Getting Started](https:\/\/www.kaggle.com\/ajeffries\/halite-getting-started)","1e57eef1":"# Basic Greedy Agent\n\nA simple agent, created for gaining understanding of the observation. It may be useful to train future agents against. Constants are hardcoded and probably suboptimal.\n\nMaintains one shipyard and one ship."}}