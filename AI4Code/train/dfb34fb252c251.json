{"cell_type":{"5dfe1807":"code","fe7f0513":"code","e8f713d7":"code","d739f141":"code","cb9acf8f":"code","6e189782":"code","1f93a616":"code","2931aac9":"code","b5a2ca5b":"code","80ca07aa":"code","7a9320c8":"code","3796b72f":"markdown"},"source":{"5dfe1807":"import numpy as np\nimport pandas as pd\nfrom fbprophet import Prophet\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport warnings\nwarnings.filterwarnings(\"ignore\")","fe7f0513":"df_train = pd.read_csv(\"\/kaggle\/input\/sz-water\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/sz-water\/test.csv\")\ndf_submission = pd.read_csv(\"\/kaggle\/input\/sz-water\/submission.csv\")\n\ndf_train_a = df_train[[\"\u65e5\u671f\",\"A\u5382\"]].rename(columns={\"\u65e5\u671f\":\"ds\",\"A\u5382\":\"y\"})\ndf_train_b = df_train[[\"\u65e5\u671f\",\"B\u5382\"]].rename(columns={\"\u65e5\u671f\":\"ds\",\"B\u5382\":\"y\"})\n\nmean_a,std_a = df_train_a[\"y\"].mean(),df_train_a[\"y\"].std()\nmean_b,std_b = df_train_b[\"y\"].mean(),df_train_b[\"y\"].std()\n\ndf_train_a[\"y\"] = (df_train_a[\"y\"] - mean_a) \/ std_a\ndf_train_b[\"y\"] = (df_train_b[\"y\"] - mean_b) \/ std_b\n\ndf_test_a = df_test[[\"\u65e5\u671f\",\"A\u5382\"]].rename(columns={\"\u65e5\u671f\":\"ds\",\"A\u5382\":\"y\"})\ndf_test_b = df_test[[\"\u65e5\u671f\",\"B\u5382\"]].rename(columns={\"\u65e5\u671f\":\"ds\",\"B\u5382\":\"y\"})","e8f713d7":"df_train_a","d739f141":"df_test_a","cb9acf8f":"df_submission","6e189782":"print(df_train_a[\"y\"].skew(),df_train_a[\"y\"].kurt())\ndf_train_a[[\"ds\",\"y\"]].plot()","1f93a616":"# 2018-01-01 2021-03-31\nholidays_2018 = pd.DataFrame({\n  'holiday': 'playoff',\n  'ds': pd.to_datetime(['2018-01-01',\n                        '2018-02-15','2018-02-16','2018-02-17','2018-02-18','2018-02-19','2018-02-20','2018-02-21', \n                        '2018-04-05','2018-04-06','2018-04-07',\n                        '2018-04-29', '2018-04-30', '2018-05-01',\n                        '2018-06-16', '2018-06-17', '2018-06-18',\n                        '2018-09-22', '2018-09-23', '2018-09-24',\n                        '2018-10-01', '2018-10-02', '2018-10-03','2018-10-04', '2018-10-05', '2018-10-06', '2018-10-07',\n                        '2018-12-30', '2018-12-31']),\n  'lower_window': 0,\n  'upper_window': 1,\n})\nholidays_2019 = pd.DataFrame({\n  'holiday': 'playoff',\n  'ds': pd.to_datetime(['2019-01-01',\n                        '2019-02-04', '2019-02-05', '2019-02-06','2019-02-07','2019-02-08','2019-02-09','2019-02-10', \n                        '2019-04-05', '2019-04-06', '2019-04-07',\n                        '2019-05-01', '2019-05-02', '2019-05-03', '2019-05-04',\n                        '2019-06-07', '2019-06-08', '2019-06-09',\n                        '2019-09-13', '2019-09-14', '2019-09-15',\n                        '2019-10-01', '2019-10-02', '2019-10-03','2019-10-04', '2019-10-05', '2019-10-06','2019-10-07']),\n  'lower_window': 0,\n  'upper_window': 1,\n})\nholidays_2020 = pd.DataFrame({\n  'holiday': 'playoff',\n  'ds': pd.to_datetime(['2020-01-01', '2020-01-02', '2020-01-03',\n                        '2020-01-24', '2020-01-25', '2020-01-26', '2020-01-27', '2020-01-28', '2020-01-29', '2020-01-30', '2020-01-31', '2020-02-01', '2020-02-02',  \n                        '2020-04-04', '2020-04-05', '2020-04-06',\n                        '2020-05-01', '2020-05-02', '2020-05-03', '2020-05-04', '2020-05-05',\n                        '2020-06-25', '2020-06-26', '2020-06-27',\n                        '2020-10-01', '2020-10-02', '2020-10-03','2020-10-04', '2020-10-05', '2020-10-06','2020-10-07','2020-10-08']),\n  'lower_window': 0,\n  'upper_window': 1,\n})\nholidays_2021 = pd.DataFrame({\n  'holiday': 'playoff',\n  'ds': pd.to_datetime(['2021-01-01', '2021-01-02', '2021-01-03',\n                        '2021-02-11', '2021-02-12', '2021-02-13', '2021-02-14', '2021-02-15', '2018-02-16', '2018-02-17']),\n  'lower_window': 0,\n  'upper_window': 1,\n})\nholidays = pd.concat((holidays_2018, holidays_2019, holidays_2020, holidays_2021))","2931aac9":"ph_a = Prophet(holidays=holidays, holidays_prior_scale=10.0)\nph_a.fit(df_train_a)\nforecast_a = ph_a.predict(pd.concat([df_train_a[['ds']],df_test_a[['ds']]]))\nfigure = ph_a.plot(forecast_a)\nfigure.show()","b5a2ca5b":"ph_b = Prophet(holidays=holidays, holidays_prior_scale=10.0)\nph_b.fit(df_train_b)\nforecast_b = ph_b.predict(pd.concat([df_train_b[['ds']],df_test_b[['ds']]]))\nfigure = ph_b.plot(forecast_b)\nfigure.show()","80ca07aa":"forecast_a = ph_a.predict(df_test_a[['ds']])\nforecast_a[\"yhat\"] = forecast_a[\"yhat\"] * std_a + mean_a\nforecast_b = ph_b.predict(df_test_b[['ds']])\nforecast_b[\"yhat\"] = forecast_b[\"yhat\"] * std_b + mean_b\nforecast = forecast_a[[\"ds\",\"yhat\"]].merge(forecast_b[[\"ds\",\"yhat\"]],on=\"ds\")\nforecast[\"ds\"] = forecast[\"ds\"].apply(lambda ds:str(ds).replace(\"-\",\"\/\"))\n\nsubmission = forecast.rename(columns={\"ds\":\"\u65e5\u671f\",\"yhat_x\":\"A\u5382\",\"yhat_y\":\"B\u5382\"})\nsubmission[\"\u65e5\u671f\"] = submission[\"\u65e5\u671f\"].apply(lambda ds:str(ds).split(\" \")[0])\nsubmission","7a9320c8":"submission.to_csv(\"submit-prophet.csv\",index=False)","3796b72f":"The end."}}