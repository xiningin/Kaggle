{"cell_type":{"82b878f5":"code","16bbcea9":"code","7a2aecf3":"code","78c3e3a1":"code","9eb4a5ed":"code","ed8b5fc0":"code","30c50866":"code","349ad71e":"code","2377563b":"code","87f5dcd1":"code","6c2a4a66":"code","0e0212cd":"code","6b9a76c1":"code","e9176278":"code","8656fe54":"code","70466188":"code","ec3035d5":"code","6eb0b942":"code","5311639e":"code","5074cb95":"code","a19fab5d":"code","e89f94d5":"code","e3a97438":"code","c1bea0f6":"code","dcf27578":"code","3d848b98":"code","5cfd6ea2":"markdown","038f4cd0":"markdown","0fb85770":"markdown","28204374":"markdown","5d517e03":"markdown","2faed77b":"markdown","24206f7a":"markdown","712f4834":"markdown","e4698585":"markdown","9445272d":"markdown"},"source":{"82b878f5":"import numpy as np\nimport pandas as pd\n# viz libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random","16bbcea9":"df_water_potability = pd.read_csv('..\/input\/water-potability\/water_potability.csv')","7a2aecf3":"df_water_potability.head()","78c3e3a1":"df_water_potability.info()","9eb4a5ed":"df_water_potability.describe()","ed8b5fc0":"# since there are nulls in the columns, will use mean to replace the null value\n# define a function to update the null values\ndef cal_mean(dataframe, col):\n    dataframe[col].fillna(value=dataframe[col].mean(), inplace=True)\n","30c50866":"# create a copy of the dataframe\ndf = df_water_potability.copy()\ncols = list(df.columns)\ncols.remove('Potability')\nfor col in cols:\n    cal_mean(df,col)","349ad71e":"# check NA again, nore more, looks good!\ndf.info()","2377563b":"# change potability column type to categorical\ndf['Potability']=df['Potability'].astype('category')","87f5dcd1":"ax = sns.countplot(data = df, x ='Potability')\nplt.title('Water Potability', pad = '20')\nfor i in ax.patches:\n    ax.text(x = i.get_x()+i.get_width()\/2, \n            y = i.get_height()\/7, \n            s = f\"{np.round(i.get_height()\/len(df)*100,0)}%\",\n            horizontalalignment='center',\n            verticalalignment='center',\n            weight='bold', \n            color='white'\n           )\nplt.grid(False)\nplt.show()","6c2a4a66":"# what does the stats look like when the water is potable\ndf[df.Potability == 1].describe()","0e0212cd":"# what does the stats look like when the water is NOT potable\ndf[df.Potability == 0].describe()","6b9a76c1":"def boxplot(col):\n    r = random.random()\n    b = random.random()\n    g = random.random()\n    clr = (r,b,g)\n    sns.boxplot(x = 'Potability' , y = col, data = df, color=clr, showmeans= True)\n    plt.title('Distribution for '+ col +' by potability', pad = 20)\n    plt.grid(False)\n    plt.show()","e9176278":"# check the distribution for all the subgroups by elements by whether the water is potable or not\nfor col in cols:\n    boxplot(col)","8656fe54":"# check the distribution by histogram viz\ndf.hist(figsize = (20,10), grid = False)\nplt.show()","70466188":"# correlation matrix, no relationship, pearson r = 0; moderate , abs(pearson r) around 0.5; large, abs(pearson r) aroun 1\ncorrmtrix = df.corr()\nplt.subplots(figsize = (10,10))\nsns.heatmap(corrmtrix, square = True, annot=True, fmt='.2f')\nplt.show()","ec3035d5":"# import 2 sampled test model\nfrom scipy.stats import ttest_ind","6eb0b942":"def getpval(col):\n    df_0 = df[df.Potability==0]\n    df_1 = df[df.Potability==1]\n    ttest, pval = ttest_ind(df_0[col],df_1[col])\n    return round(pval,4)","5311639e":"pvals =[]\np_values = 0.1\nfor col in cols:\n    pvals.append(getpval(col))\n    if getpval(col) < p_values:\n        print(\"REJECT H0: the mean for \"+ col + \" is different between potable and non-potable water\")\n    else :\n        print(\"Accept H0: the mean for \"+ col + \" is the same between potable and non-potable water\")\n# Looks like the mean are only significant different in Solids between potable and non-potable water","5074cb95":"from yellowbrick.classifier import ROCAUC\nfrom sklearn.model_selection import train_test_split, cross_validate, StratifiedKFold, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import mean_absolute_error, r2_score\nfrom sklearn.ensemble import BaggingClassifier, GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","a19fab5d":"# prepare and split the data into train and test \nX = df.drop('Potability', axis = 1)\ny = df['Potability']\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)","e89f94d5":"results=[]\nmodels =[GaussianNB(),\n         SVC(),\n         BaggingClassifier(), \n         GradientBoostingClassifier(), \n         DecisionTreeClassifier(),\n         KNeighborsClassifier()]\nfor model in models:\n    kfold = StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\n    cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring='accuracy')\n    results.append(cv_results)\n    print('%s: %f (%f)' % (model, cv_results.mean(), cv_results.std()))\n","e3a97438":"plt.boxplot(results, labels = models)\nplt.grid(False)\nplt.xticks(rotation = 45)\nplt.title('Model Comparison', pad = 10)\nplt.show()","c1bea0f6":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix","dcf27578":"model = GradientBoostingClassifier()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)","3d848b98":"print(accuracy_score(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))","5cfd6ea2":"## Statistical analysis - check stats for all columns","038f4cd0":"looks like our dataset is unbalanced, there are more datapoints in the group of non-potable water and less in the potable one, which may affect our model effectiveness in the prediction","0fb85770":"### This notebooks is to complete a task from the dataset of Water Quality: predict if water is safe for human consumption.\n### [Link for the task](https:\/\/www.kaggle.com\/adityakadiwal\/water-potability\/tasks?taskId=4186)","28204374":"## Prediction of drinkable water","5d517e03":"## Hypothesis testing\n* H0: no difference in the compostions between potable and non portable water\n* H1: there is difference in the compositions between potable and non-potable water <br>\n* Significant level: 90% <br>\n* Since we are comparing compositions in water potability which is a multually exclusive character, i.e. water can only be drinkable or not, we will be using 2 sample test\n\n","2faed77b":"### We can see the accuracy is 66%. F1-score is higher when the water is non-potable ","24206f7a":"The goal is to predict what kind of compostions of a water make it human-drinkable.\nFrom the [descriptions of the dataset](https:\/\/www.kaggle.com\/adityakadiwal\/water-potability), we can conclude if water has below attributes, meaning the water is safe for human to drink, i.e. potability = 1. When potability = 0, it means the water is not suitable for human to drink.\n1. ph value: 6.5-8.5\n2. hardness: not defined\n3. solids: 500mg\/l-1000mg\/l\n4. chloramines:  up to 4mg\/l\n5. sulfate: not defined\n6. conductivity: up to 400 \u03bcS\/cm\n7. organic carbon: up to 2mg\/l\n8. trihalomethanes: up to 80 ppm\n9. turbidity: up to 5 NTU\n\nThe analysis consists of four sections:\n* Initial analysis\n* Statistical analysis\n* Hypothesis testing\n* Prediction modeling\n\nspecial thanks for Jason Brownlee @ machinelearningmastery.com \n","712f4834":"## Initial analysis - checking dataframe, null values and deal with nulls","e4698585":"results: there are no linear relationship between two compositions. so we do not need to run a pearson r function to test if any relationship is significant","9445272d":"### GradientBoostingClassifier has the highest score"}}