{"cell_type":{"a3c2ae73":"code","f258b676":"code","77b6f144":"code","55cdec1c":"code","1c5d318f":"code","707d73a6":"code","7ddb8a7d":"code","d84779ec":"code","33194454":"code","f0def2bb":"code","faa19612":"code","05481980":"code","abea1125":"code","bfec3bba":"code","9e7b1710":"code","f4b11fe2":"code","2f39908d":"code","2a5034e9":"code","ecbf3f5b":"code","cb497d67":"code","594669a6":"code","de3bfd68":"code","f0ffc4f9":"code","c7aef86c":"code","1805c62d":"code","c2ce8b00":"code","bd4919ad":"code","8c139dc6":"markdown","5dcc2061":"markdown","dd23dddd":"markdown","433b855f":"markdown"},"source":{"a3c2ae73":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport seaborn as sns\nimport warnings\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f258b676":"df = pd.read_csv('..\/input\/determine-the-pattern-of-tuberculosis-spread\/tubercolusis_from 2007_WHO.csv')\ndf.head()","77b6f144":"#Correlation map to see how features are correlated with each other and with SalePrice\ncorrmat = df.corr(method='kendall')\nplt.subplots(figsize=(8,6))\nsns.heatmap(corrmat, vmax=0.9, square=True)","55cdec1c":"df.isnull().sum()","1c5d318f":"# filling missing values with NA\ndf[['Number of prevalent tuberculosis cases (End range)', 'Number of deaths due to tuberculosis, excluding HIV (Start range)', 'Number of deaths due to tuberculosis, excluding HIV (End range)','Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (Start range)', 'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (End range)']] = df[['Number of prevalent tuberculosis cases (End range)', 'Number of deaths due to tuberculosis, excluding HIV (Start range)', 'Number of deaths due to tuberculosis, excluding HIV (End range)', 'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (Start range)', 'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (End range)']].fillna('NA')","707d73a6":"df = df.fillna(value = {'Number of prevalent tuberculosis cases (End range)' : 'no_info', \n                            'Number of deaths due to tuberculosis, excluding HIV (Start range)' : 'no_info', \n                            'Number of deaths due to tuberculosis, excluding HIV (End range)':'no_info',\n                           'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (Start range)' : 'no_info',\n                           'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (End range)' : 'no_info'})","7ddb8a7d":"from sklearn.preprocessing import LabelEncoder\ncategorical_col = ('Country', 'Number of deaths due to tuberculosis, excluding HIV', 'Number of deaths due to tuberculosis, excluding HIV (Start range)', 'Number of deaths due to tuberculosis, excluding HIV (End range)', 'Number of prevalent tuberculosis cases', 'Number of prevalent tuberculosis cases (Start range)', 'Number of prevalent tuberculosis cases (End range)', 'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (Start range)', 'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (End range)', 'Prevalence of tuberculosis (per 100 000 population)', 'Prevalence of tuberculosis (per 100 000 population)(end range)')\n        \n        \nfor col in categorical_col:\n    label = LabelEncoder() \n    label.fit(list(df[col].values)) \n    df[col] = label.transform(list(df[col].values))\n\nprint('Shape all_data: {}'.format(df.shape))","d84779ec":"from scipy.stats import norm, skew\nnum_features = df.dtypes[df.dtypes != 'object'].index\nskewed_features = df[num_features].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nskewness = pd.DataFrame({'Skew' :skewed_features})\nskewness.head(15)","33194454":"numerical_df = df.select_dtypes(exclude='object')\n\nfor i in range(len(numerical_df.columns)):\n    f, ax = plt.subplots(figsize=(7, 4))\n    fig = sns.distplot(numerical_df.iloc[:,i].dropna(), rug=True, hist=False, label='UW', kde_kws={'bw':0.1})\n    plt.xlabel(numerical_df.columns[i])","f0def2bb":"from sklearn.model_selection import train_test_split\n# Hot-Encode Categorical features\ndf = pd.get_dummies(df) \n\n# Splitting dataset back into X and test data\nX = df[:len(df)]\ntest = df[len(df):]\n\nX.shape","faa19612":"# Save target value for later\ny = df.Year.values\n\n# In order to make imputing easier, we combine train and test data\ndf.drop(['Year'], axis=1, inplace=True)\ndf = pd.concat((df, test)).reset_index(drop=True)","05481980":"#df = pd.get_dummies(df, drop_first=True)","abea1125":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=0)","bfec3bba":"from sklearn.model_selection import KFold\n# Indicate number of folds for cross validation\nkfolds = KFold(n_splits=5, shuffle=True, random_state=42)\n\n# Parameters for models\ne_alphas = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007]\ne_l1ratio = [0.8, 0.85, 0.9, 0.95, 0.99, 1]\nalphas_alt = [14.5, 14.6, 14.7, 14.8, 14.9, 15, 15.1, 15.2, 15.3, 15.4, 15.5]\nalphas2 = [0.00005, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008]","9e7b1710":"from sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.pipeline import Pipeline","f4b11fe2":"from xgboost import XGBRegressor\nxgboost = make_pipeline(RobustScaler(),\n                        XGBRegressor(learning_rate =0.01, n_estimators=3460, \n                                     max_depth=3,min_child_weight=0 ,\n                                     gamma=0, subsample=0.7,\n                                     colsample_bytree=0.7,nthread=4,\n                                     scale_pos_weight=1,seed=27, \n                                     reg_alpha=0.00006))\n\n# Printing out XGBOOST Score and STD\nxgboost_score = cross_val_score(xgboost, X, y, cv=kfolds, scoring='neg_mean_squared_error')\nxgboost_rmse = np.sqrt(-xgboost_score.mean())\nprint(\"XGBOOST RMSE: \", xgboost_rmse)\nprint(\"XGBOOST STD: \", xgboost_score.std())","2f39908d":"# Separate target variable\n\ndf_tunning = df\ny = df_tunning.iloc[:,1]\nX = pd.concat([df_tunning.iloc[:,0],df_tunning.iloc[:,2:30]], axis=1)","2a5034e9":"# Drop `baby` feature from data\n\n#df_model = df_model.drop(['Number of deaths due to tuberculosis, excluding HIV (Start range)'], axis=1)","ecbf3f5b":"# Separate target variable for model building \n\ny_model = df.iloc[:,1]\nX_model = pd.concat([df_tunning.iloc[:,0],df_tunning.iloc[:,2:30]], axis=1)\ny_model.describe()","cb497d67":"# Split to train and test with 70-30 ratio\n\nX_train, X_test, y_train, y_test = train_test_split(X_model, y_model, test_size=0.3, random_state=42, stratify = y)","594669a6":"from sklearn.preprocessing import StandardScaler\n# Implement standart scaler method\n\nstandardScalerX = StandardScaler()\nX_train = standardScalerX.fit_transform(X_train)\nX_test = standardScalerX.fit_transform(X_test)","de3bfd68":"from sklearn.model_selection import StratifiedKFold\n# Stratified K-Fold Cross Validation Method\n\nkfold_cv=StratifiedKFold(n_splits=5, random_state=42, shuffle=True)\n\nfor train_index, test_index in kfold_cv.split(X_model,y_model):\n    X_train, X_test = X_model.iloc[train_index], X_model.iloc[test_index]\n    y_train, y_test = y_model.iloc[train_index], y_model.iloc[test_index]","f0ffc4f9":"from xgboost import XGBClassifier\n# Extreme Gradient Boosting Model Building\n\nxgb_model = XGBClassifier(criterion = 'giny', learning_rate = 0.01, max_depth = 5, n_estimators = 100,\n                          objective ='binary:logistic', subsample = 1.0)\n# fit the model\nxgb_model.fit(X_train, y_train)\n#Predict Model\npredict_xgb = xgb_model.predict(X_test)","c7aef86c":"from sklearn.metrics import classification_report\nprint(\"XGB\", classification_report(y_test, predict_xgb))","1805c62d":"from sklearn.metrics import confusion_matrix\nXGB_matrix = confusion_matrix(y_test, predict_xgb)\n\nfig, ax = plt.subplots(figsize=(15, 8))\nsns.heatmap(XGB_matrix,annot=True, fmt=\"d\", cbar=False, cmap=\"Pastel1\")\nplt.title(\"Gradient Boosting\", weight='bold')\nplt.xlabel('Predicted Labels')\nplt.ylabel('Actual Labels')","c2ce8b00":"#Using Label Encoder method for categorical features\nfrom sklearn.preprocessing import LabelEncoder\n\n#labelencoder = LabelEncoder()\n#df['Country'] = labelencoder.fit_transform(df['Country'])\n#df['Number of deaths due to tuberculosis, excluding HIV'] = labelencoder.fit_transform(df['Number of deaths due to tuberculosis, excluding HIV'])\n#df['Number of deaths due to tuberculosis, excluding HIV (Start range)']= labelencoder.fit_transform(df['Number of deaths due to tuberculosis, excluding HIV (Start range)'])\n#df['Number of deaths due to tuberculosis, excluding HIV (End range)']=labelencoder.fit_transform(df['Number of deaths due to tuberculosis, excluding HIV (End range)'])\n#df['Number of prevalent tuberculosis cases'] = labelencoder.fit_transform(df['Number of prevalent tuberculosis cases'])\n#df['Number of prevalent tuberculosis cases (Start range)'] = labelencoder.fit_transform(df['Number of prevalent tuberculosis cases (Start range)'])\n#df['Number of prevalent tuberculosis cases (End range)'] = labelencoder.fit_transform(df['Number of prevalent tuberculosis cases (End range)'])\n#df['Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (Start range)'] = labelencoder.fit_transform(df['Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (Start range)'])\n#df['Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (End range)'] = labelencoder.fit_transform(df['Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (End range)'])\n#df['Prevalence of tuberculosis (per 100 000 population)'] = labelencoder.fit_transform(df['Prevalence of tuberculosis (per 100 000 population)'])\n#df['Prevalence of tuberculosis (per 100 000 population)(end range)'] = labelencoder.fit_transform(df['Prevalence of tuberculosis (per 100 000 population)(end range)'])","bd4919ad":"#df = pd.get_dummies(df, drop_first=True)","8c139dc6":"Das War's, Kaggle Notebook runner: Mar\u00edlia Prata  @mpwolke ","5dcc2061":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcT78_8rzZ8fUINyi6h3Es7qZy-33J-Nn9Js7Q&usqp=CAU)\nunaids.org","dd23dddd":"#Skew Visualization - Visualize each numerical feature with distplot","433b855f":"Encoding with that snippets below, simply didn't work."}}