{"cell_type":{"0b3596bf":"code","e6e362eb":"code","c0ac4761":"code","da2e1754":"code","59b50d83":"code","3fb09fbc":"code","eed90c35":"code","52f91e34":"code","de4816ae":"code","2d9425af":"code","44e71348":"code","98fd0845":"code","f80d2641":"code","9cde56f2":"code","fb11d2b4":"code","2af89ff2":"code","845e323d":"code","3dec7cce":"code","f62729c9":"code","573dd7d8":"code","524bbab1":"code","0fa823f9":"code","47e6cb4f":"markdown","ae5b5fdf":"markdown","f1ac2eab":"markdown","777dc639":"markdown","f45cb6b3":"markdown","8548b2fa":"markdown","8bf8a077":"markdown","2e802dfd":"markdown"},"source":{"0b3596bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e6e362eb":"data = pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')\n\n#drop the extra columns\ndata.drop('Unnamed: 32', axis = 1, inplace = True)\ndata.drop('id', axis = 1, inplace = True)","c0ac4761":"data.head()","da2e1754":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","59b50d83":"figure = plt.figure(figsize=(10,10))\nsns.heatmap(data.corr())","3fb09fbc":"data.columns","eed90c35":"data_mean = data[['radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean']]","52f91e34":"sns.heatmap(data_mean.corr())","de4816ae":"sns.pairplot(data_mean)","2d9425af":"data_worst = data[['radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']]","44e71348":"sns.heatmap(data_worst.corr())","98fd0845":"sns.pairplot(data_worst)","f80d2641":"#Statistics about the features\nfor feature in data.columns[1:]:\n    print('________{}_________'.format(feature))\n    print(data[feature].describe())\n    ","9cde56f2":"X = data[['radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']]","fb11d2b4":"y = data['diagnosis']","2af89ff2":"#Checking for NULL values\nsns.heatmap(X.isnull(),yticklabels=False,cmap = 'viridis')","845e323d":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ny = le.fit_transform(y)","3dec7cce":"y","f62729c9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=100)","573dd7d8":"from sklearn.svm import SVC\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)","524bbab1":"y_pred = classifier.predict(X_test)","0fa823f9":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\nprint('Model Accuracy : {:.2f}%'.format(accuracy_score(y_test, y_pred) * 100))","47e6cb4f":"# Data Collection and Preprocessing","ae5b5fdf":"# Model Prediction","f1ac2eab":"# Splitting the data into Training and Test set","777dc639":"# Exploratory Data Analysis","f45cb6b3":"# Model Selection and fitting the training data","8548b2fa":"# Encoding the dependent variable 'diagnosis'","8bf8a077":"# Model Evaluation \n**Accuracy, Confusion Matrix and Classification Report","2e802dfd":"Data Preprocessing"}}