{"cell_type":{"f785ee4e":"code","bba8f076":"code","49fcbfe6":"code","1ae20d28":"code","179ee541":"code","f996f9e8":"code","f0faab91":"code","19789667":"code","bbd44e55":"code","f407f918":"code","26be0532":"code","db97ffa5":"code","443d4d84":"code","212a9032":"code","5646ab06":"code","a88221d7":"code","bba1f9cb":"code","ecee59e0":"code","5c2717f8":"code","35da1918":"code","605d420a":"code","2d3f99c3":"code","df795c34":"code","2cb3427e":"code","81574018":"code","cf246946":"code","5241e47e":"code","43e8e313":"code","8c398dd6":"code","850e378f":"markdown","bfe7c335":"markdown","a9a62248":"markdown","19e494fa":"markdown","0d5e689b":"markdown","b641377b":"markdown","6bf42c4b":"markdown"},"source":{"f785ee4e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bba8f076":"train=pd.read_csv('..\/input\/train.csv')\ntest=pd.read_csv('..\/input\/test.csv')","49fcbfe6":"print(train.info())\nprint(train.head())","1ae20d28":"train.describe()","179ee541":"plt.figure()\nsns.heatmap(train.corr(),annot=True)\nplt.show()","f996f9e8":"train.ApplicantIncome.hist(bins=50,edgecolor='black')","f0faab91":"train.boxplot(column='ApplicantIncome')","19789667":"train.boxplot(column='ApplicantIncome',by='Education')","bbd44e55":"train.LoanAmount.hist(bins=50,edgecolor='black')","f407f918":"train.boxplot(column='LoanAmount')","26be0532":"train.boxplot(column='LoanAmount',by='Education')","db97ffa5":"print('Credit History')\nprint(train.Credit_History.value_counts())\nprint('Loan Status')\nprint(train.Loan_Status.value_counts())","443d4d84":"train.pivot_table(values='Loan_Status',index=['Credit_History'],aggfunc=lambda x: x.map({'Y':1,'N':0}).mean())","212a9032":"var1=pd.crosstab(index=train['Credit_History'],columns=train['Loan_Status'])\nprint(var1)\nvar1.plot(kind='bar',stacked='true',color=['orange','green'],grid=False)","5646ab06":"var2=pd.crosstab(index=[train['Credit_History'],train['Gender']],columns=train['Loan_Status'])\nvar2.plot(kind='bar',stacked='true',color=['orange','green'],grid=False)","a88221d7":"train.apply(lambda x: sum(x.isnull()),axis=0)","bba1f9cb":"train.Gender.fillna(train['Gender'].mode()[0],inplace=True)\ntrain.Married.fillna(train['Married'].mode()[0],inplace=True)\ntrain.Dependents.fillna(train['Dependents'].mode()[0],inplace=True)\ntrain.Self_Employed.fillna(train['Self_Employed'].mode()[0],inplace=True)\ntrain.Credit_History.fillna(train['Credit_History'].mode()[0],inplace=True)","ecee59e0":"train[train['Loan_Amount_Term']==360].count()","5c2717f8":"train.Loan_Amount_Term.fillna(train['Loan_Amount_Term'].mode()[0],inplace=True)","35da1918":"la_table=train.pivot_table(values='LoanAmount', index='Self_Employed' ,columns='Education', aggfunc=np.median)\nprint(la_table)","605d420a":"def la_fill(f):\n    return la_table.loc[f['Self_Employed'],f['Education']]\n\ntrain['LoanAmount'].fillna(train[train['LoanAmount'].isnull()].apply(la_fill, axis=1), inplace=True)","2d3f99c3":"train.info()","df795c34":"plt.figure(figsize=(15,6))\nplt.subplot(1,2,1)\ntrain['LoanAmount'].hist(bins=20,edgecolor='black')\nplt.subplot(1,2,2)\ntrain['ApplicantIncome'].hist(bins=20,edgecolor='black')","2cb3427e":"train['TotalIncome']=train['ApplicantIncome']+train['CoapplicantIncome']\ntrain['TotalIncome_log']=np.log(train['TotalIncome'])\ntrain['LoanAmount_log']=np.log(train['LoanAmount'])\nplt.figure(figsize=(15,6))\nplt.subplot(1,2,1)\ntrain['LoanAmount_log'].hist(bins=20,edgecolor='black')\nplt.subplot(1,2,2)\ntrain['TotalIncome_log'].hist(bins=20,edgecolor='black')","81574018":"from sklearn.preprocessing import LabelEncoder\n# will create a list of column names with non numeric data\ncol_names=['Gender','Married','Dependents','Education','Self_Employed','Property_Area','Loan_Status']\nle=LabelEncoder()\nfor name in col_names:\n    train[name]=le.fit_transform(train[name])\ntrain.dtypes","cf246946":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom sklearn import metrics","5241e47e":"def model_fun(model,df,features,target):\n    model.fit(df[features],df[target])\n    predictions=model.predict(df[features])\n    accuracy=metrics.accuracy_score(predictions,df[target])\n    print (\"Accuracy : %s\" % \"{0:.3%}\".format(accuracy))\n    cv_score=cross_val_score(model,df[features],df[target],cv=5)\n    print (\"Cross validation score : %s\" % \"{0:.3%}\".format(np.mean(cv_score)))\n    model.fit(df[features],df[target])","43e8e313":"#Logistic Regression\ntarget_var='Loan_Status'\nmodel=LogisticRegression()\nfeatures_var=['Credit_History']\nmodel_fun(model,train,features_var,target_var)","8c398dd6":"features_var=['Gender', 'Married', 'Dependents', 'Education','Self_Employed','Loan_Amount_Term', 'Credit_History', 'Property_Area','TotalIncome_log', 'LoanAmount_log']\nmodel_fun(model,train,features_var,target_var)","850e378f":"We will create a common funclion in which we can pass objects of various models to test the performances.","bfe7c335":"*Now, we have to study the relationship between the status of loan and the person's credit history. We will explore to find out how a person's credit history plays a part in getting his\/her loan approved if at all it acts as an important factor!*","a9a62248":"Now, we have to handle the missing values.","19e494fa":"Filling of missing Loan Amount values require some extra effort that just filling the most frequent values.","0d5e689b":"Since, now we have all non-null values, some of those values are non numeric. In order to use them as a feature in training our machine learning models, we have to convert them into some sort of numeric data. This can be done with the help of LabelEncoder.","b641377b":"*The following table shows the percentage (\/100) of Approved Loans segregated on the basis of credit history. This can also be considered as a probability of getting the loan aproved.*","6bf42c4b":"In the next part, we will be focusing on 2 things,\n1. Reducing the skewness of some features\n2. Sincle the applicant's income is supported by the coapplicant's income for loan approval, we will calculate total income as a sum of both."}}