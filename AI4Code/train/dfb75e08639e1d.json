{"cell_type":{"a42c9a06":"code","efb789e8":"code","f0e19093":"code","018cfbff":"code","60d2608a":"code","a317ed57":"code","da15ba26":"code","5a2ed37c":"code","dcc75e41":"code","193c6260":"code","483d24c3":"code","1a649bb0":"markdown","d6726655":"markdown","38a011f8":"markdown","a016980d":"markdown","134ef469":"markdown","68e0475e":"markdown"},"source":{"a42c9a06":"!pip install pycountry\n\nimport pandas as pd  #manipulaci\u00f3n y an\u00e1lisis de datos \nimport numpy as np   #soporte para vectores y matrices\nimport seaborn as sns #libreria para visualizacion\nfrom matplotlib import pyplot as plt #biblioteca para generacion de graficos\nimport plotly.graph_objects as go #biblioteca para generacion de graficos interactivos\nfrom fbprophet import Prophet #procedimientos para predicciones\nimport pycountry #provee funciones de conversion entre nombres de paises en formato ISO, codigos de pais y nombres de continentes. \nimport plotly.express as px\nfrom scipy.optimize import curve_fit #es una biblioteca libre y de c\u00f3digo abierto para Python. Se compone de herramientas y algoritmos matem\u00e1ticos. \nfrom datetime import date #funciones de tiempo y fechas","efb789e8":"today = date.today()\n\n# Mes, dia y a\u00f1o\t\nd2 = today.strftime(\"%d  %B, %Y\")\n\nprint(\"Base de datos actualizada a la fecha ====> \" + d2 + \" <====\")","f0e19093":"df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv', parse_dates=['Last Update'])\ndf.rename(columns = {'ObservationDate' : 'Date', 'Country\/Region' : 'Country'}, inplace=True)\n\ndf_confirmed = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\ndf_recovered = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv\")\ndf_deaths = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\")\n\ndf_confirmed.rename(columns = {'Country\/Region' : 'Country'}, inplace=True)\ndf_recovered.rename(columns = {'Country\/Region' : 'Country'}, inplace=True)\ndf_deaths.rename(columns = {'Country\/Region' : 'Country'}, inplace=True)\n\ndf\n#df_confirmed","018cfbff":"countries = df['Country'].unique().tolist()\ndata_new = {}\nfor name in countries:\n  a = df[df['Country'] == name].groupby('Date').sum()\n  data_new[name] = a.to_numpy()\nprint(\"Total de Paises infectados con COVID19 a nivel mundial: \", len(countries))\n","60d2608a":"from matplotlib.pylab import *\n\nfigure(figsize = (10, 7))\nlarge_cases = []\n\ncountries_list = [\"Mexico\", \"Colombia\", \"Argentina\", \"Peru\", \"Venezuela\", \"Chile\", \"Ecuador\", \"Guatemala\", \"Cuba\", \"Haiti\", \"Bolivia\", \"Dominican Republic\", \"Honduras\", \"Paraguay\",\n                  \"Nicaragua\", \"El Salvador\", \"Costa Rica\", \"Panama\", \"Puerto Rico\", \"Uruguay\", \"Guadeloupe\", \"Martinique\", \"French Guiana\", \"Saint Martin\", \"Saint Barth\u00e9lemy\"]\n\ncountries_list = [ \"Chile\", \"Venezuela\", \"Ecuador\", \"Guatemala\", \"Cuba\", \"Haiti\", \"Bolivia\", \"Dominican Republic\", \"Honduras\", \"Paraguay\",\n                  \"Nicaragua\", \"El Salvador\", \"Costa Rica\", \"Panama\", \"Puerto Rico\", \"Uruguay\", \"Guadeloupe\", \"Martinique\",]\n\n#Place names of countries in your scope and uncomment the following line\n#countries_list = [\"Bolivia\", \"Mexico\",   \"Colombia\", \"Costa Rica\", \"Venezuela\", \"Ecuador\"]\n\ncount = 0\n\nfor name in countries: \n  confirm = data_new[name][:, 1]\n  for country_name in countries_list:\n    if name == country_name:\n      plot(confirm, 'o-', label = name)\n\nlegend(fontsize = 10, loc = 'upper left')\nxlabel(\"N\u00famero de d\u00edas\")\nylabel(\"N\u00famero de casos\")\ntitle('COVID19 Casos Confirmados en Paises de America Latina')\ngrid(True)\nshow()","a317ed57":"def calc_covid_fit(name, days, start, stop):\n  name_conf = data_new[name][:,1][start:stop]\n  name_dea = data_new[name][:,2][start:stop]\n  name_rec = data_new[name][:,3][start:stop]\n\n  def function_to_fit(x, a, b, c, d):\n    return a\/(d + b * np.exp(-c * x))\n  #print(name_conf)\n  xdata = np.arange(0, len(name_conf), 1)\n  x_100 = np.arange(0, stop + days, 1)\n  popt, pcov = curve_fit(function_to_fit, xdata, name_conf)\n  figure(figsize=(8,5))\n  plot(x_100, function_to_fit(x_100, *popt), label = 'Model', linewidth = 3)\n  plot(xdata, name_conf, 'o', label = \"Confirmados\")\n  plot(xdata, name_dea, 'o', label = \"Decesos\", color = \"Red\")\n  plot(xdata, name_rec, 'o', label = \"Recuperados\", color = \"Green\")\n  legend()\n  xlabel(\"N\u00famero de d\u00edas\")\n  ylabel(\"N\u00famero de casos\")\n  title(\"COVID19 Casos Confirmados en \" + name)\n  grid(True)\n  show()","da15ba26":"calc_covid_fit(\"Mexico\", 2, 0, 320)","5a2ed37c":"calc_covid_fit(\"Bolivia\", 2, 0, 320)","dcc75e41":"calc_covid_fit(\"Costa Rica\", 2, 0,320)","193c6260":"calc_covid_fit(\"Peru\", 2, 0,320)","483d24c3":"cont = 1\nlatin_cases = []\nlatin_cases_values = []\n\n#countries_list = [ \"Brazil\", \"Mexico\", \"Colombia\", \"Argentina\", \"Peru\", \"Venezuela\", \"Chile\", \"Ecuador\", \"Guatemala\", \"Cuba\", \"Haiti\", \"Bolivia\", \"Dominican Republic\", \"Honduras\", \"Paraguay\",\n#                  \"Nicaragua\", \"El Salvador\", \"Costa Rica\", \"Panama\", \"Puerto Rico\", \"Uruguay\", \"Guadeloupe\", \"Martinique\", \"French Guiana\", \"Saint Martin\", \"Saint Barthelemy\"]\n\n#countries_list = [\"Mexico\", \"Colombia\", \"Argentina\", \"Peru\", \"Venezuela\", \"Chile\", \"Ecuador\", \"Guatemala\", \"Cuba\", \"Bolivia\", \"Paraguay\",\n#                   \"Uruguay\", ]\n\ncountries_list = [\"Mexico\", \"Costa Rica\",\"Colombia\", \"Argentina\", \"Peru\", \"Venezuela\", \"Chile\", \"Ecuador\", \"Bolivia\", \"Uruguay\"]\n\nfor name in countries: \n  confirm = data_new[name][:, 1]\n  for country_name in countries_list:\n    if name == country_name:\n      latin_cases.append(name)\n      latin_cases_values.append(confirm[-1])\n\nlatin_cases_df = pd.DataFrame({ \"Paises\": latin_cases, \"Casos\": latin_cases_values})\nlatin_cases_df = latin_cases_df.sort_values(by = [\"Casos\"], ascending=False)\n\n\nfor names in range(len(latin_cases_df[\"Paises\"].tolist())):\n    latin_cases[names] = str(cont) + \". \" + latin_cases_df.iloc[names][\"Paises\"] + \" \" + str(int(latin_cases_df.iloc[names][\"Casos\"]))\n    cont += 1\n\n\nfig, ax = plt.subplots( figsize=(15,8))\n\ny_pos = np.arange(len(latin_cases_df[\"Casos\"].tolist()))\nax.barh(y_pos, latin_cases_df[\"Casos\"].tolist(), align='center')\nax.set_yticks(y_pos)\nax.set_yticklabels(latin_cases)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlabel('Numero de casos')\nax.set_title('COVID19 Casos Confirmados en Paises de America Latina')\n\nplt.show()\n","1a649bb0":"Colocar el nombre del pa\u00eds del que quiere comprobar los datos, seguido del numero de d\u00edas a calcular, inicio del periodo, fin del periodo.\n\nSe recomienda hacer la prediccion con una ventana de m\u00e1ximo 3 d\u00edas a partir del dia intoducido como: \"fin del periodo\".","d6726655":"**COVID19 Total de Casos Confirmados en Paises de America Latina**","38a011f8":"**COVID19 Casos Confirmados en Paises de America Latina** (Diario - Tendencias)","a016980d":"**Asegurarse de que la base de datos se puede leer**","134ef469":"Total de Paises infectados con COVID19 a nivel mundial","68e0475e":"**Ajuste de Casos a Curva de Regresion Log\u00ecstica **\n\nTendencia de crecimiento a 2 d\u00edas"}}