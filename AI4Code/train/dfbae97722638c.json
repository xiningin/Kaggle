{"cell_type":{"87d6cd7c":"code","76717b03":"code","84e7454c":"code","27ad1956":"code","eb7f1038":"code","7c5fc3d7":"code","2dd5b3bc":"code","13949a02":"code","6f008e5e":"code","080ebbf8":"code","3976aa0b":"code","aac9cec6":"code","838bf302":"code","26ab0761":"markdown","b6b47a4b":"markdown","58d12e0e":"markdown","339b571e":"markdown"},"source":{"87d6cd7c":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport cv2\nfrom PIL import Image\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")\n\nHEIGHT = 120\nWEIGHT = 120\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)\n    #print(os.path.join(dirname, filename))","76717b03":"train_dirs = [\"\/kaggle\/input\/withwithout-mask\/maskdata\/maskdata\/train\",\n             \"\/kaggle\/input\/withwithout-mask\/masks2.0\/masks\/train\",\n             \"\/kaggle\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Train\",\n             \"\/kaggle\/input\/faces-with-masks\"]\n\ntest_dirs = [\"\/kaggle\/input\/withwithout-mask\/maskdata\/maskdata\/test\",\n            \"\/kaggle\/input\/withwithout-mask\/masks2.0\/masks\/test\",\n            \"\/kaggle\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Test\",\n            \"\/kaggle\/input\/face-mask-detection\/dataset\"]\n\nvalidation_dirs = [\"\/kaggle\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Validation\"]","84e7454c":"fullimg = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        fullimg.append(os.path.join(dirname, filename))","27ad1956":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_data_generator = ImageDataGenerator(rescale=1.\/255,\n                                         zoom_range=0.2,\n                                         shear_range=0.2,\n                                         rotation_range=0.2)\n\ntest_data_generator = ImageDataGenerator(rescale=1.\/255)\n\nvalidation_data_generator = ImageDataGenerator(rescale=1.\/255,\n                                         zoom_range=0.2,\n                                         shear_range=0.2)","eb7f1038":"print(\"Flowing Train\")\ntrain_generator1 = train_data_generator.flow_from_directory(\n        train_dirs[0],\n        target_size=(HEIGHT,WEIGHT),\n        batch_size=77,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"without_mask\",\"with_mask\"])\ntrain_generator2 = train_data_generator.flow_from_directory(\n        train_dirs[1],\n        target_size=(HEIGHT,WEIGHT),\n        batch_size=46,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"0\",\"1\"])\ntrain_generator3 = train_data_generator.flow_from_directory(\n        train_dirs[2],\n        target_size=(HEIGHT,WEIGHT),\n        batch_size=80,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"WithoutMask\",\"WithMask\"])\ntrain_generator4 = train_data_generator.flow_from_directory(\n        train_dirs[3],\n        target_size=(HEIGHT,WEIGHT),\n        batch_size=163,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"_\",\"faces_with_mask\"])\n\nprint(\"\\nFlowing Test\")\ntest_generator1 = test_data_generator.flow_from_directory(\n        test_dirs[0],\n        target_size=(HEIGHT,WEIGHT),\n        batch_size=66,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"without_mask\",\"with_mask\"])\ntest_generator2 = test_data_generator.flow_from_directory(\n        test_dirs[1],\n        target_size=(HEIGHT,WEIGHT),\n        batch_size=11,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"0\",\"1\"])\ntest_generator3 = test_data_generator.flow_from_directory(\n        test_dirs[2],\n        target_size=(HEIGHT,WEIGHT),\n        batch_size=62,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"WithoutMask\",\"WithMask\"])\ntest_generator4 = test_data_generator.flow_from_directory(\n        test_dirs[3],\n        target_size=(HEIGHT,WEIGHT),\n        batch_size=55,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"without_mask\",\"with_mask\"])\nprint(\"\\nFlowing Validation\")\nvalidation_generator1 = validation_data_generator.flow_from_directory(\n        validation_dirs[0],\n        target_size=(HEIGHT,WEIGHT),\n        batch_size=80,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"WithoutMask\",\"WithMask\"])\nwithWithoutMask = {\"0\":\"Without Mask\",\"1\":\"With Mask\"}","7c5fc3d7":"def genToTuple(gen):\n    templist = []\n    templist2 = []\n    for i in range(gen.__len__()):\n        tempnext = gen.next()\n        templist.append(tempnext[0])\n        templist2.append(tempnext[1])\n    x=np.concatenate(templist)\n    y=np.concatenate(templist2)\n    return (x,y)\n\ndef combine_tuple(*tuples):\n    x=np.concatenate([tuples[i][0] for i in range(len(tuples))])\n    y=np.concatenate([tuples[i][1] for i in range(len(tuples))])\n    return (x,y.astype(int))\n    \n\ntrain_generator1_t = genToTuple(train_generator1)\ntrain_generator2_t = genToTuple(train_generator2)\ntrain_generator3_t = genToTuple(train_generator3)\ntrain_generator4_t = genToTuple(train_generator4)\n\ntest_generator1_t = genToTuple(test_generator1)\ntest_generator2_t = genToTuple(test_generator2)\ntest_generator3_t = genToTuple(test_generator3)\ntest_generator4_t = genToTuple(test_generator4)\n\n\n\nx_train,y_train = combine_tuple(train_generator1_t,train_generator2_t,train_generator3_t,train_generator4_t)\nx_test,y_test = combine_tuple(test_generator1_t,test_generator2_t,test_generator3_t,test_generator4_t)\n\nx_val,y_val = genToTuple(validation_generator1)","2dd5b3bc":"print(x_train.shape,y_train.shape)\nprint(x_test.shape,y_test.shape)\nprint(x_val.shape,y_val.shape)","13949a02":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPool2D, Dropout, SpatialDropout2D, BatchNormalization, Input, Activation, Dense, Flatten\nfrom keras.optimizers import Adam, RMSprop\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping\nfrom keras.utils import plot_model\nfrom keras.losses import binary_crossentropy\n\ndef build_model():\n        model = Sequential()\n        \n        model.add(Input(shape=(HEIGHT,WEIGHT,3,)))\n\n        model.add(Conv2D(filters=16,kernel_size=(2,2),padding=\"same\"))\n        model.add(Activation(\"relu\"))\n        model.add(SpatialDropout2D(0.25))\n        \n        model.add(MaxPool2D(pool_size=(4,4)))\n\n        model.add(Conv2D(filters=32,kernel_size=(2,2),padding=\"same\"))\n        model.add(Activation(\"relu\"))\n        model.add(SpatialDropout2D(0.25))\n        \n        model.add(MaxPool2D(pool_size=(4,4),strides=(4,4)))\n               \n        model.add(Flatten())\n        \n        model.add(Dense(2048))\n        model.add(Activation(\"relu\"))\n        model.add(Dropout(0.25))\n        \n        model.add(Dense(1024))\n        model.add(Activation(\"relu\"))\n        model.add(Dropout(0.2))\n        \n        \n        model.add(Dense(1))\n        model.add(Activation(\"sigmoid\"))\n        \n        optimizer = Adam(lr=0.001)\n        model.compile(optimizer = optimizer ,metrics=[\"accuracy\"], loss = binary_crossentropy)\n        \n        return model","6f008e5e":"model = build_model()\nplot_model(model,show_shapes=True,show_layer_names=True)","080ebbf8":"reducer = ReduceLROnPlateau(monitor='loss',patience=3,factor=0.75,min_lr=0.000001,verbose=1)\nstopSign = EarlyStopping(monitor = \"loss\",patience=20,min_delta=0.000000000001,mode=\"min\")\n\nepochs = 1000000\nbatch_size = 32\nsteps_per_epoch = x_train.shape[0] \/\/ batch_size\nhistory = model.fit(x_train,y_train,\n                    epochs = epochs, \n                    validation_data = (x_val,y_val),\n                    verbose = 1,\n                    batch_size=batch_size,\n                    steps_per_epoch = steps_per_epoch,\n                    callbacks=[reducer,stopSign])","3976aa0b":"from sklearn.metrics import confusion_matrix, accuracy_score\nimport seaborn as sns\n\nypred = model.predict_classes(x_test)\nplt.subplots(figsize=(18,14))\nsns.heatmap(confusion_matrix(ypred,y_test),annot=True,fmt=\"1.0f\",cbar=False,annot_kws={\"size\": 20})\nplt.title(f\"CNN Accuracy: {accuracy_score(ypred,y_test)}\",fontsize=40)\nplt.xlabel(\"Target\",fontsize=30)\nplt.show()","aac9cec6":"plt.figure(figsize=(50,50))\ntempc = np.random.choice(x_test[y_test == ypred.ravel()].shape[0],35,replace=False)\nd = 0\nfor i in tempc:\n    plt.subplot(7, 5, d+1)\n    d += 1\n    tempc = np.random.randint(x_test[y_test == ypred.ravel()].shape[0])\n    plt.imshow(x_test[y_test == ypred.ravel()][tempc])\n    plt.title(f\"True:{withWithoutMask[str(y_test[y_test == ypred.ravel()][tempc])]}\\nPredicted:{withWithoutMask[str(ypred.ravel()[y_test == ypred.ravel()][tempc])]}\",\n              fontsize=40)\n    plt.axis(\"off\")\nplt.subplots_adjust(wspace=-0.1, hspace=0.3)\nplt.show()","838bf302":"plt.figure(figsize=(50,50))\ntempc = np.random.choice(x_test[y_test != ypred.ravel()].shape[0],35,replace=False)\nd = 0\nfor i in tempc:\n    plt.subplot(7, 5, d+1)\n    d += 1\n    tempc = np.random.randint(x_test[y_test != ypred.ravel()].shape[0])\n    plt.imshow(x_test[y_test != ypred.ravel()][tempc])\n    plt.title(f\"True:{withWithoutMask[str(y_test[y_test != ypred.ravel()][tempc])]}\\nPredicted:{withWithoutMask[str(ypred.ravel()[y_test != ypred.ravel()][tempc])]}\",\n             fontsize=40)\n    plt.axis(\"off\")\nplt.subplots_adjust(wspace=-0.1, hspace=0.3)\nplt.show()","26ab0761":"# Preprocessing","b6b47a4b":"# Build Model","58d12e0e":"# Prediction","339b571e":"# Train Model"}}