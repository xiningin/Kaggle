{"cell_type":{"d2b1726c":"code","e9388e26":"code","11a59e70":"code","555b8b8f":"code","abd04820":"code","94365f00":"code","228987d3":"code","d09d04cd":"code","f88b92f3":"code","fdc33b04":"code","6b6d9c45":"code","4035da23":"code","9b2b4ef7":"code","ccbccb63":"code","05f2166b":"code","14e8269f":"code","fe23a45d":"code","608c7119":"code","96444360":"code","2edac60f":"code","4f50e1ee":"markdown","a3f5aeb2":"markdown","e39b9b76":"markdown"},"source":{"d2b1726c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# ML tools \nimport tensorflow as tf\nfrom kaggle_datasets import KaggleDatasets\nfrom keras.models import Sequential\n\nfrom keras import layers\nfrom keras.optimizers import Adam\nfrom tensorflow.keras import Model\n# import tensorflow.keras.applications.efficientnet as efn\nfrom tensorflow.keras.applications import *\nimport os\nfrom keras import optimizers\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, ModelCheckpoint, EarlyStopping\n","e9388e26":"from keras.models import load_model\nimport cv2\ndenseNet_model = load_model('..\/input\/densenet121-14-diseases-softmax\/Densenet_model.h5')\ninceptionv2_model = load_model('..\/input\/inceptionv2-14-diseases-softmax\/Inception_model.h5')\n# mobilenet_model = load_model('')","11a59e70":"def DensepredictClass(path):\n    img = cv2.imread(path, cv2.IMREAD_COLOR)\n    img = img\/255\n    img = cv2.resize(img, (256, 256))\n    img = img.reshape((1,256,256,3))\n    return denseNet_model.predict(img)\n\ndef InceptionpredictClass(path):\n    img = cv2.imread(path, cv2.IMREAD_COLOR)\n    img = img\/255\n    img = cv2.resize(img, (256, 256))\n    img = img.reshape((1,256,256,3))\n    return inceptionv2_model.predict(img)\n\ndef mobilepredictClass(path):\n    img = cv2.imread(path, cv2.IMREAD_COLOR)\n    img = img\/255\n    img = cv2.resize(img, (128, 128))\n    img = img.reshape((1,128,128,3))\n    return mobilenet_model.predict(img)","555b8b8f":"disease_names = [\"Atelectasis\",\"Cardiomegaly\",\"Effusion\",\"Infiltration\",\"Mass\",\"Nodule\",\"Pneumonia\",\"Pneumothorax\",\"Consolidation\",\"Edema\",\"Emphysema\",\"Fibrosis\",\"Pleural Thickening\",\"Hernia\"]","abd04820":"def classnames(arr):\n    for i in range(arr.size):\n        print(\"Disease:\", disease_names[i], \" Probability:\",arr[i]*100)\ndef meanf(arr1, arr2, arr3):\n    for i in range(14):\n        print(\"Disease:\", disease_names[i], \" Probability:\",((arr1[i]+arr2[i]+0)\/3) * 100)","94365f00":"def soft_voting(path):\n    x = DensepredictClass(path)\n    y = InceptionpredictClass(path)\n#     z = mobilepredictClass(path)\n    print('\\nSoft Voting ImageName:-',path)\n    return meanf(x[0], y[0], 0) ","228987d3":"DATASET_NAME = \"nih-image-600x600-data\"","d09d04cd":"from kaggle_datasets import KaggleDatasets\nGCS_DS_PATH = KaggleDatasets().get_gcs_path(DATASET_NAME)\nGCS_DS_PATH","f88b92f3":"df = pd.read_csv('..\/input\/nih-dataframe\/NIH_Dataframe.csv')\ndf.img_ind= df.img_ind.apply(lambda x: x.split('.')[0])\ndisplay(df.head(4))\nprint(df.shape)","fdc33b04":"paths = GCS_DS_PATH + \"\/NIH_Images\/\" + df['img_ind'] + '.jpg'\n#Get the multi-labels\nlabel_cols = df.columns[:-1]\nlabels = df[label_cols].values","6b6d9c45":"(train_paths, valid_paths, \n  train_labels, valid_labels) = train_test_split(paths, labels, test_size=0.2, random_state=11)","4035da23":"test = pd.read_csv('..\/input\/data\/Data_Entry_2017.csv')\ntest.head()\nvalid = valid_paths.reset_index()\nvalid.drop(['index'],inplace=True, axis = 1)\nprint(valid)\nvalid['img_ind']","9b2b4ef7":"import cv2","ccbccb63":"type((valid['img_ind'][0]).split('\/')[-1])","05f2166b":"#Pass Image Name to get labels\ndiseases = [\"Cardiomegaly\",\"Effusion\",\"Infiltration\",\"Mass\",\"Nodule\",\"Pneumonia\",\"Pneumothorax\",\"Consolidation\",\"Edema\",\"Emphysema\",\"Fibrosis\",\"Pleural_Thickening\",\"Hernia\"]\n\ndef actual_labels(img_name):\n    df.loc[df['img_ind'] == img_name]\n    print(\"Actual Labels:\")\n    for disease in diseases:\n        if df.loc[df['img_ind'] == img_name][disease].iloc[-1]:\n            print(disease)","14e8269f":"name=valid['img_ind'][0].split('\/')[-1].split('.')[0]\nactual_labels(name)","fe23a45d":"pred = []\nfor i in range(2):\n    img = valid['img_ind'][i]\n    actual_labels((valid['img_ind'][i]).split('\/')[-1])\n    img = '..\/input\/nih-image-600x600-data\/NIH_Images\/' + img.split('\/')[-1]\n    pred.append(soft_voting(img))\n    \n    \n","608c7119":"print('AUC CKECK-UP per CLASS')\n\nclasses= df.columns[:-1]\nfor i, n in enumerate(classes):\n  print(classes[i])\n  print(i, roc_auc_score(valid_labels[:, i], pred[:, i]))\n  print('---------')","96444360":"df = pd.read_csv('..\/input\/nih-dataframe\/NIH_Dataframe.csv')\ndf.img_ind= df.img_ind.apply(lambda x: x.split('.')[0])\ndf = df.reset_index()\ndf.drop(['index'],inplace=True, axis = 1)\ndf.set_index('img_ind')","2edac60f":"# tf.keras.backend.clear_session()\n\n# from sklearn.metrics import roc_auc_score\n\n# ensemble_model= tf.keras.models.load_model(name)\n# pred = model.predict(dvalid, verbose=1)\n\nprint('AUC CKECK-UP per CLASS')\n\nclasses= df.columns[:-1]\nfor i, n in enumerate(classes):\n  print(classes[i])\n  print(i, roc_auc_score(valid_labels[:, i], pred[:, i]))\n  print('---------')","4f50e1ee":"# Checking Labels of Image","a3f5aeb2":"# Extracting Image Name","e39b9b76":"**Creating DataFrame for Images Labels**"}}