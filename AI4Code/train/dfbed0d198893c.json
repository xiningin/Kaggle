{"cell_type":{"fbd86034":"code","673d3cff":"code","29ef6c80":"code","1cdd12f5":"code","e0d9d842":"code","ef854fa2":"code","204150e2":"code","b69282a0":"code","e61d37c9":"code","fe4ff7ae":"code","53e128be":"code","5ff97c80":"code","33e13be0":"code","d1273792":"code","1fdc909a":"code","8ade069d":"markdown"},"source":{"fbd86034":"# Importing libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport requests\nimport io\nimport math\nfrom datetime import date","673d3cff":"# Call API and create dataframe\n\nresponse = requests.get(\"https:\/\/api.covid19india.org\/csv\/latest\/state_wise_daily.csv\")\ndf = pd.read_csv(io.StringIO(response.text), delimiter=\",\")\ndf.drop(df[df[\"Date_YMD\"] == str(date.today())].index, inplace=True)\ndisplay(df)","29ef6c80":"# State codes\n\nstate_codes = list(df.columns)[4:-1]\nprint(\"Number of States & UTs:\", len(state_codes))\nprint(state_codes)","1cdd12f5":"# Handle negative counts\n\nnegative_count = 0\n\nfor i in range(len(df)):\n    for j in range(4, 41):\n        if df.iloc[i, j] < 0:\n            negative_count += 1\n            if j == 4:\n                df.iloc[i, j] = 0\n            elif j == 5:\n                df.iloc[i, j] = math.floor((df.iloc[i, j-1].sum() + df.iloc[i, j+1].sum()) \/ 2)\n            elif j == 6:\n                df.iloc[i, j] = math.floor((df.iloc[i, j-2:j].sum() + df.iloc[i, j+1:j+3].sum()) \/ 4)\n            elif j == 38:\n                df.iloc[i, j] = math.floor((df.iloc[i, j-2:j].sum() + df.iloc[i, j+1:j+3].sum()) \/ 4)\n            elif j == 39:\n                df.iloc[i, j] = math.floor((df.iloc[i, j-1].sum() + df.iloc[i, j+1].sum()) \/ 2)\n            elif j == 40:\n                avg = df.iloc[i, j-7:j].mean()\n                df.iloc[i, j] = math.floor((avg \/ df.iloc[i, j-7]) * avg)\n            else:\n                df.iloc[i, j] = math.floor((df.iloc[i, j-3:j].sum() + df.iloc[i, j+1:j+4].sum()) \/ 6)\n\nprint(\"Total negative count:\", negative_count)","e0d9d842":"# Create active cases dataframe\n\nactive = pd.DataFrame(columns=df.columns)\n\nrunning_confirmed = [0] * len(df.loc[0][3:])\nrunning_recovered = [0] * len(df.loc[1][3:])\nrunning_deceased = [0] * len(df.loc[2][3:])\n\nfor row in range(len(df)):\n    if df.loc[row][\"Status\"] == \"Confirmed\":\n        running_confirmed += df.loc[row][3:]\n    elif df.loc[row][\"Status\"] == \"Recovered\":\n        running_recovered += df.loc[row][3:]\n    else:\n        running_deceased += df.loc[row][3:]\n        active.loc[len(active)] = [df.loc[row][\"Date\"], df.loc[row][\"Date_YMD\"], \"Active\"] + list(running_confirmed - running_recovered - running_deceased)\n\nactive = active.infer_objects()\ndisplay(active)","ef854fa2":"# Active cases in India\n\nfig, ax = plt.subplots(1, 1, figsize=(30, 15))\nax.yaxis.grid(color=\"grey\", linestyle=\"dashed\")\ng = sns.lineplot(data=active[\"TT\"])\ng.set(xticklabels=[])\ng.set(title=\"Active cases in India\")\ng.set(xlabel=\"Days\")\ng.set(ylabel=\"Current Active Cases\")\nplt.show()","204150e2":"# Set window size\n\nlast_ndays = 30","b69282a0":"# Top 5 states with highest active cases\n\nstates = {}\nfor state in state_codes:\n     states[state] = active.loc[len(active)-1][state]\n\nstates = dict(sorted(states.items(), key=lambda x: x[1], reverse=True)[:5]).keys()\n\nfig, ax = plt.subplots(1, 1, figsize=(30, 12))\nax.yaxis.grid(color=\"grey\", linestyle=\"dashed\")\ng = sns.lineplot(data=active[states][-last_ndays:], dashes=False)\ng.set(xticklabels=[])\ng.set(title=\"Top 5 states with highest active cases over the past \" + str(last_ndays) + \" days\")\ng.set(xlabel=\"Days\")\ng.set(ylabel=\"Current Active Cases\")\nplt.show()","e61d37c9":"# Segregate confirmed, recovered and deceased cases\n\nconfirmed = df.loc[df[\"Status\"] == \"Confirmed\"]\nrecovered = df.loc[df[\"Status\"] == \"Recovered\"]\ndeceased = df.loc[df[\"Status\"] == \"Deceased\"]\n\ndisplay(confirmed)\ndisplay(recovered)\ndisplay(deceased)","fe4ff7ae":"# Calculate total active, confirmed, recovered and deceased cases\n\nprint(\"Total Active Cases:\", list(active[\"TT\"])[-1])\nprint(\"Total Confirmed Cases:\", confirmed[\"TT\"].sum())\nprint(\"Total Recovered Cases:\", recovered[\"TT\"].sum())\nprint(\"Total Deceased Cases:\", deceased[\"TT\"].sum())","53e128be":"# Top 5 states with highest confirmed cases\n\nstates = {}\nfor state in state_codes:\n     states[state] = confirmed[state].sum()\n\nstates = dict(sorted(states.items(), key=lambda x: x[1], reverse=True)[:5]).keys()\n\nfig, ax = plt.subplots(1, 1, figsize=(30, 12))\nax.yaxis.grid(color=\"grey\", linestyle=\"dashed\")\ng = sns.lineplot(data=confirmed[states][-last_ndays:], dashes=False)\ng.set(xticklabels=[])\ng.set(title=\"Top 5 states with highest confirmed cases over the past \" + str(last_ndays) + \" days\")\ng.set(xlabel=\"Days\")\ng.set(ylabel=\"Daily Confirmed Cases\")\nplt.show()","5ff97c80":"# Top 5 states with highest recovered cases\n\nstates = {}\nfor state in state_codes:\n    states[state] = recovered[state].sum() \n\nstates = dict(sorted(states.items(), key=lambda x: x[1], reverse=True)[:5]).keys()\n\nfig, ax = plt.subplots(1, 1, figsize=(30, 12))\nax.yaxis.grid(color=\"grey\", linestyle=\"dashed\")\ng = sns.lineplot(data=recovered[states][-last_ndays:], dashes=False)\ng.set(xticklabels=[])\ng.set(title=\"Top 5 states with highest recovered cases over the past \" + str(last_ndays) + \" days\")\ng.set(xlabel=\"Days\")\ng.set(ylabel=\"Daily Recovered Cases\")\nplt.show()","33e13be0":"# Top 5 states with highest deceased cases\n\nstates = {}\nfor state in state_codes:\n    states[state] = deceased[state].sum() \n\nstates = dict(sorted(states.items(), key=lambda x: x[1], reverse=True)[:5]).keys()\n\nfig, ax = plt.subplots(1, 1, figsize=(30, 12))\nax.yaxis.grid(color=\"grey\", linestyle=\"dashed\")\ng = sns.lineplot(data=deceased[states][-last_ndays:], dashes=False)\ng.set(xticklabels=[])\ng.set(title=\"Top 5 states with highest deceased cases over the past \" + str(last_ndays) + \" days\")\ng.set(xlabel=\"Days\")\ng.set(ylabel=\"Daily Deceased Cases\")\nplt.show()","d1273792":"# Daily percentage contribution\n\ndaily_percentage = confirmed.copy()\n\nfor idx in range(len(daily_percentage)):\n    daily_percentage.iloc[idx, 4:] = (daily_percentage.iloc[idx, 4:] \/ daily_percentage.iloc[idx, 3]) * 100\n\ndaily_percentage.drop(columns=[\"Date\", \"Status\", \"TT\", \"UN\"], inplace=True)\ndisplay(daily_percentage)","1fdc909a":"# Top 5 daily contributing states\n\ndaily_mean = dict.fromkeys(state_codes, 0)\nfor state in state_codes:\n    daily_mean[state] = daily_percentage[state][-last_ndays:].mean()\n\ntop_five_daily = dict(sorted(daily_mean.items(), key=lambda item: item[1]))\ntop_five_daily = list(top_five_daily.keys())[-5:]\n\nfig, ax = plt.subplots(1, 1, figsize=(30, 12))\nax.yaxis.grid(color=\"grey\", linestyle=\"dashed\")\ng = sns.lineplot(data=daily_percentage[top_five_daily][-last_ndays:], dashes=False)\ng.set(xticklabels=[])\ng.set(title=\"Top 5 states with daily % contribution over the past \" + str(last_ndays) + \" days\")\ng.set(xlabel=\"Days\")\ng.set(ylabel=\"Daily % Contribution\")\nplt.show()","8ade069d":"If you found this notebook helpful please give a thumbs up!"}}