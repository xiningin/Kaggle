{"cell_type":{"66e5d3d9":"code","a54d85ef":"code","b44ab57c":"code","73220bd2":"code","5a520b89":"code","9a174b09":"code","ecf55ef3":"code","a91e123d":"code","a32ce49e":"code","a7fab3a9":"code","a5a5d3ad":"code","53ece87d":"code","f4888d28":"code","1110284d":"code","cedd6117":"code","80f603b7":"code","132715f9":"code","0b539653":"code","1d48f79f":"code","af925cfa":"markdown","e8091281":"markdown","9ea375bc":"markdown","f8a555e7":"markdown","f95032ac":"markdown","928f005c":"markdown"},"source":{"66e5d3d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a54d85ef":"import matplotlib.pyplot as plt\nfrom matplotlib import style\n\nstyle.use('dark_background')\n\nfont = {'family' : 'sans-serif',\n        'weight' : 'bold',\n        'size'   : 20}\n\nplt.rc('font', **font)\nplt.rc('xtick', labelsize=20) \nplt.rc('ytick', labelsize=20)\nplt.rcParams['figure.figsize'] = (15, 8)","b44ab57c":"df = pd.read_csv('\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv', parse_dates = ['date'])","73220bd2":"df.shape","5a520b89":"df.head()","9a174b09":"ind = df[df['country'] == 'India']\n\nind.isna().sum()","ecf55ef3":"def GroupByCountryAndDaily(df):\n    groups = df.groupby('country')\n    dailies = {}\n    for name, group in groups:\n        dailies[name] = GroupByDay(group)\n    return dailies\n\ndef GroupByDay(df, function = np.mean):\n    grouped = df[['date', 'people_vaccinated_per_hundred', 'people_fully_vaccinated', 'people_vaccinated', 'people_fully_vaccinated_per_hundred', 'daily_vaccinations_raw']].groupby('date')\n    daily = grouped.aggregate(function)\n    daily['date'] = daily.index\n    return daily","a91e123d":"ind.loc[:, 'people_fully_vaccinated'].fillna(0.0, inplace = True)\nind.loc[:, 'people_fully_vaccinated_per_hundred'].fillna(0.0, inplace = True)\nind.loc[:, 'daily_vaccinations_raw'].fillna(0.0, inplace = True)","a32ce49e":"ind.isna().sum()","a7fab3a9":"dailies = GroupByCountryAndDaily(ind)","a5a5d3ad":"ind_df = pd.DataFrame(dailies['India'])","53ece87d":"ind_df.dropna(0, inplace = True)\nind_df.head()","f4888d28":"ind_df.iloc[:, 1:3] = ind_df.iloc[:, 1:3] \/ 1000\nind_df.iloc[:, 4] = ind_df.iloc[:, 4] \/ 1000","1110284d":"columns = {'people_vaccinated_per_hundred': 'people vaccinated per hundred',\n           'people_fully_vaccinated': 'people fully vaccinated',\n           'people_vaccinated': 'people vaccinated',\n           'people_fully_vaccinated_per_hundred': 'people fully vaccinated per hundred',\n           'daily_vaccinations_raw': 'daily vaccinations raw'}\n\nind_df.rename(columns = columns, inplace = True)\nind_df.head()","cedd6117":"ind_df[['people vaccinated per hundred', 'people fully vaccinated per hundred']].plot(ylabel = '% vaccinated', linewidth = 3)\nplt.grid()","80f603b7":"ind_df[['people vaccinated', 'people fully vaccinated']].plot(ylabel = '(in 1000) vaccinated', linewidth = 3)\nplt.grid()","132715f9":"def EvalCdf(sample, x):\n    count = 0\n    for i in sample:\n        if i <= x:\n            count += 1\n    return count \/ len(sample)","0b539653":"vaccinated = sorted(ind_df['people vaccinated'].values)\ncdf = [EvalCdf(vaccinated, x) for x in vaccinated]\n\nplt.plot(vaccinated, cdf, linewidth = 3)\nplt.grid()","1d48f79f":"plt.bar(ind_df.index[1:], ind_df['daily vaccinations raw'][1:].values, label = 'daily vaccinations')\nplt.xlabel('date')\nplt.ylabel('(in 1000)daily vaccination numbers')\nplt.axhline(y = np.median(ind_df['daily vaccinations raw'].values), color = 'maroon', ls = ':', linewidth = 10, label = 'population mean')\nplt.legend(loc = 9)\nplt.xticks(rotation = 90)\nplt.grid()","af925cfa":"# Analysis of the number and the percentage of people vaccinated ","e8091281":"# Analysis of the number of people being vaccinated daily","9ea375bc":"Next, I group the data by country and then take the mean of values in all 4 columns based on the date column. I do it, for I might be interested in analyzing various countries together. Also, there might be multiple records for a given day that must be aggregated based on their average. ","f8a555e7":"# Analytic distribution of number of people vaccinated","f95032ac":"There are as many as 15 variables in the dataset; nonetheless, I make use of 5 variables, namely; the date, number of people vaccinated and number of people vaccinated per hundred. As per the documentation (description of the data); 2 columns namely; the number of people fully vaccinated, and number of people vaccinated per hundred which is the count of those people that have taken the complete dose (taken vaccine a couple of times). Thus, I include the latter 2 also.\n\nThat said, it would be wise to eliminate or substitute the null values of the aforesaid variables. That I do later.","928f005c":"The number of people being vaccinated has been increasing exponentially (the graph demonstrates an exponential distribution)."}}