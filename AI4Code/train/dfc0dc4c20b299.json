{"cell_type":{"f7e13c49":"code","f7a17866":"code","3cd89f83":"code","787adb37":"code","ff4f721c":"code","428f24db":"code","4d0305b1":"code","4e3d946f":"code","fb77162e":"code","2749e97f":"code","29f490e3":"code","220be2f5":"code","f3f024b0":"code","3f25ea30":"code","c2411a5f":"code","b6e29bbb":"code","7e7dc1d9":"code","bc45f3b9":"markdown","56dbee5d":"markdown","733a674b":"markdown","50b690bf":"markdown","9ff28267":"markdown"},"source":{"f7e13c49":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7a17866":"import pandas as pd\nimport numpy as np\nimport re\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pickle\n\nimport warnings\nwarnings.simplefilter(\"ignore\")","3cd89f83":"# Loading the dataset\ndata = pd.read_csv(\"\/kaggle\/input\/language-detection\/Language Detection.csv\")","787adb37":"data.head(10)","ff4f721c":"# value count for each language\ndata[\"Language\"].value_counts()","428f24db":"# separating the independent and dependant features\nX = data[\"Text\"]\ny = data[\"Language\"]","4d0305b1":"# converting categorical variables to numerical\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ny = le.fit_transform(y)","4e3d946f":"data_list = []\nfor text in X:\n    text = re.sub(r'[!@#$(),\\n\"%^*?\\:;~`0-9]', ' ', text)\n    text = re.sub(r'[[]]', ' ', text)\n    text = text.lower()\n    data_list.append(text)","fb77162e":"# creating bag of words using countvectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer()\nX = cv.fit_transform(data_list).toarray()","2749e97f":"X.shape","29f490e3":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.20)","220be2f5":"from sklearn.naive_bayes import MultinomialNB\n\nmodel = MultinomialNB()\nmodel.fit(x_train, y_train)","f3f024b0":"# prediction \ny_pred = model.predict(x_test)","3f25ea30":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\nac = accuracy_score(y_test, y_pred)\ncm = confusion_matrix(y_test, y_pred)\ncr = classification_report(y_test, y_pred)","c2411a5f":"print(\"Accuracy is :\",ac)","b6e29bbb":"# classification report\nprint(cr)","7e7dc1d9":"# visualising the confusion matrix\nplt.figure(figsize=(15,10))\nsns.heatmap(cm, annot = True)\nplt.show()","bc45f3b9":"# prediction \n","56dbee5d":"# Bag of Words","733a674b":"# Text Preprocessing","50b690bf":"# Model creation and Prediction\n","9ff28267":"# Train Test Split"}}