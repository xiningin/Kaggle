{"cell_type":{"a4b452a6":"code","873ef76d":"code","0dad4d12":"code","32aee174":"code","c24038ca":"code","4c1d90e9":"code","a15ac604":"code","38e21a76":"code","ad5789e2":"code","a457ed90":"code","732d270f":"code","37cfee60":"code","004344d8":"code","25f7d974":"code","332ae803":"code","93ad4758":"code","2db4670d":"code","5cefcf2a":"code","5a48afba":"code","433b8c35":"code","d7b08e78":"code","68343fcd":"code","3eeee067":"code","63418c4b":"code","28b2438d":"code","f5e2a775":"code","8087a655":"code","d7c2b857":"code","cd987629":"code","cc7d570a":"code","aa5229ca":"code","f07b5c59":"code","94876757":"code","3ad63f34":"code","74b85e36":"code","360e7f23":"code","f6f9da9a":"code","52885b05":"code","4c7fd81e":"code","8e7b0638":"code","d9256e85":"code","d3039353":"code","d7b256db":"code","6f92bb1d":"code","3c9a70c9":"code","9548a234":"code","5db990e2":"code","d0b543a3":"code","0609e5cc":"code","020bc249":"code","674c1357":"code","1fae8f5c":"code","020baf31":"code","6a262b0e":"code","9b87cc22":"code","cd8823ea":"code","c1c1b1f0":"code","fee55260":"code","620f8c19":"code","9d666f8e":"code","9c1d04d3":"code","57812f46":"code","86aecd93":"code","e3e9b375":"code","c194fd54":"code","bab5bf3b":"code","6e7c05a0":"code","0200ffbb":"code","3776ad2f":"code","3e5c45a0":"code","459eff42":"code","d92949d9":"code","946e7ede":"code","6009df9a":"code","c2f3cf4e":"code","4cfe01b0":"code","fb099c8b":"code","0ebd9fe5":"code","df435576":"code","b99b2841":"code","e155b1c3":"code","884ef8db":"code","a49a9d97":"code","86bdf535":"code","cb782151":"code","74962b6c":"code","2c5d7f04":"code","e3c9dd83":"code","8e1d82bb":"code","c4f9e663":"code","bb345894":"code","f0eaf5de":"markdown","0508bebb":"markdown","a700bebf":"markdown","33d0c52f":"markdown","64056aae":"markdown","55b44295":"markdown","82daf2d4":"markdown","cdc62db0":"markdown","dcbbf89a":"markdown","7301538d":"markdown","c223a44e":"markdown","9617c6c4":"markdown","41fde2ad":"markdown","88140668":"markdown","8f9613ef":"markdown","a3d16d14":"markdown","7f8c0ee6":"markdown","9ebe6627":"markdown","946036c3":"markdown","9fc57f70":"markdown","10cdc2c3":"markdown","8d3a4a10":"markdown","0a8dfcb9":"markdown","3482542a":"markdown","c2331eed":"markdown","a73158ec":"markdown","a689c4ce":"markdown","94ccc502":"markdown","1505e749":"markdown","b3374bb9":"markdown"},"source":{"a4b452a6":"from sklearn.preprocessing import *\nfrom sklearn.cluster import DBSCAN, KMeans\nfrom sklearn.manifold import TSNE\nfrom sklearn.linear_model import LinearRegression, ElasticNetCV, LassoCV, RidgeCV\nfrom sklearn.ensemble import IsolationForest,GradientBoostingRegressor\nfrom sklearn.model_selection import ShuffleSplit, GridSearchCV\n\nfrom IPython.core.display import display, HTML\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport seaborn as sns\nimport missingno\nimport markdown\n\nfrom scipy import stats\nimport pandas as pd\nimport numpy as np\n\nfrom mlxtend.regressor import StackingCVRegressor,StackingRegressor\nfrom catboost import CatBoostRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\n\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n\nhtml = markdown.markdown('<img style=\"max-height: 700px; \\\n                           align=center\" \\\n                           src=\"https:\/\/sun9-53.userapi.com\/impg\/ETdrzYnU_3MnOd3fkaLI8oWCBHt9XNDCgo1dUQ\/Ua2rbr3Wt1k.jpg?size=1000x400&quality=96&sign=38aa16cdd20dea8825a2c2b640ea6108&type=album\">')\ndisplay(HTML(html))\n\npalette = ['#2f4c28',\"#c3762c\",\"#b14404\",'#3a6049',\"#8f6e60\",\"#a03031\"]\ngradient = ['#2f4c28','#3a6049','#4e7f76',\"#8f6e60\",'#a96d46',\"#c3762c\",\"#b14404\",\"#a03031\"]\nsns.palplot(gradient)","873ef76d":"path = \"..\/input\/home-data-for-ml-course\"\ndf = pd.concat([pd.read_csv(f\"{path}\/train.csv\",index_col=0),\n                pd.read_csv(f\"{path}\/test.csv\",index_col=0)])\ndf = df.reset_index(drop=True)\nnan_mask = df[\"SalePrice\"].isna()\nprint(\"\\033[4mDATA SHAPE CHECK:\\033[0m\")\nprint(f\" Train dataset length: \\t{len(df[~nan_mask])}\")\nprint(f\" Train dataset length: \\t{len(df[nan_mask])}\")\nprint(f\" Number of features: \\t{len(df.columns)-1}\")","0dad4d12":"print(\"\\033[4mFEATURE DESCRIPTION EXTRACTION:\\033[0m\")\nf = open(f\"{path}\/data_description.txt\").read().split('\\n')\ndescriptions = {}\nfor s in f:\n    s=s.strip()\n    if (\":\" in s) and not (\"2nd level\" in s):\n        k,v = s.split(\":\")\n        print(f\"  {k} \\t:{v}\")\n        descriptions[k] = v","32aee174":"print(\"\\033[4mATTRIBUTES TYPES:\\033[0m\")\ncategorical, numerical = [],[]\nfor c in df.columns:\n    t = df.dtypes[c]\n    if t=='object':\n        categorical.append(c)\n    else:\n        numerical.append(c)\nprint(\"\\n\\033[4mCATEGORICAL:\\033[0m\")\nprint(categorical)\nprint(\"\\n\\033[4mNUMERICAL:\\033[0m\")\nprint(numerical)","c24038ca":"print(\"\\033[4mNAN VALUES:\\033[0m\")\n_df = df.loc[:,df.isna().any().values]\n_df = _df.drop(\"SalePrice\",axis=1)\nmissingno.bar(_df, color=gradient, figsize=(30,2), sort=\"ascending\")\ndisplay(df.head(3))","4c1d90e9":"less_50p_nans = [\"Alley\", \"PoolQC\", \"Fence\", \"MiscFeature\", \"FireplaceQu\"]\nprint(\"Attributes that have more then 50% NaN values:\\n\")\nfor k in less_50p_nans:\n    print(f\"{k}   \\t:{descriptions[k]}\")","a15ac604":"# We only leave MiscFeature cause it can affec to the SalePrice\ndf = df.drop([\"Alley\",\"PoolQC\",\"Fence\",\"FireplaceQu\"], axis=1)","38e21a76":"target_scaler = QuantileTransformer(output_distribution='normal', random_state=0)\ndf.loc[~nan_mask,\"SalePrice_transformed\"] = \\\n    target_scaler.fit_transform(df.loc[~nan_mask,\"SalePrice\"].to_numpy().reshape(-1,1))\n\nfig = make_subplots(rows=1, cols=2)\nfig.add_trace(go.Violin(y = df.loc[~nan_mask,\"SalePrice\"], \n                        line={\"color\":palette[0]}, name=\"original target\"), row=1, col=1)\nfig.add_trace(go.Violin(y = df.loc[~nan_mask,\"SalePrice_transformed\"], \n                        line={\"color\":palette[1]}, name=\"scaled target\"), row=1, col=2)\nfig.update_traces(meanline_visible=True)\nfig.show()","ad5789e2":"attributes_grouped = {\n    \"qualitative\" : [\"OverallQual\",\"OverallCond\",\"ExterQual\",\"ExterCond\",\"BsmtQual\",\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinType2\",\"HeatingQC\",\n                     \"LowQualFinSF\",\"KitchenQual\",\"GarageQual\",\"GarageCond\"],\n    \"environment\" : [\"MSZoning\",\"LotFrontage\",\"Street\",\"Neighborhood\",\"Condition1\",\"Condition2\",\"PavedDrive\"],\n    \"sellterms\"   : [\"MoSold\",\"YrSold\",\"SaleType\",\"SaleCondition\"],\n    \"landplot\"    : [\"LotArea\",\"LotShape\",\"LandContour\",\"LotConfig\",\"LandSlope\"],\n    \"dwelling\"    : [\"BldgType\",\"HouseStyle\",\"YearBuilt\",\"YearRemodAdd\",\"RoofStyle\",\"RoofMatl\",\"Exterior1st\",\"Exterior2nd\",\"MasVnrType\",\"MasVnrArea\",\n                     \"Foundation\",\"KitchenQual\",\"Fireplaces\",\"BsmtFullBath\",\"BsmtHalfBath\",\"FullBath\",\"HalfBath\",\"MSSubClass\"],\n    \"benefits\"    : [\"Heating\",\"CentralAir\",\"Electrical\",\"Utilities\",\"Functional\",\"TotRmsAbvGrd\"],\n    \"sqrfeets\"    : [\"1stFlrSF\",\"2ndFlrSF\",\"LowQualFinSF\",\"GrLivArea\",\"WoodDeckSF\",\"OpenPorchSF\",\"EnclosedPorch\",\"3SsnPorch\",\"ScreenPorch\",\"PoolArea\"],\n    \n    # Repeats some of the qualitative attributes\n    \"basement\"    : [\"BsmtQual\",\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinSF1\",\"BsmtFinType2\",\"BsmtFinSF2\",\"BsmtUnfSF\",\"TotalBsmtSF\"],\n    \"garage\"      : [\"GarageType\",\"GarageYrBlt\",\"GarageFinish\",\"GarageCars\",\"GarageArea\",\"GarageQual\",\"GarageCond\"],\n    \"other\"       : [\"MiscVal\",\"MiscFeature\"]}\n\nprint(\"\\033[4mATTRIBURTES GROUPS:\\033[0m\")\nfor k in attributes_grouped:\n    print(f\"\\n\\033[1m{k}\\033[0m:\")\n    print(\",\".join(attributes_grouped[k]))","a457ed90":"def save_to_df(group_name:str, new_df:pd.DataFrame):\n    \"\"\"\n    Saves processed dataset of some group of features into main df\n    :param group_name: name of the feature group\n    :param new_df:     precessed DataFrame features\n    \"\"\"\n    if \"target\" in new_df:\n        new_df = new_df.drop(\"target\", axis=1)\n    global df\n    df = df.drop(attributes_grouped[group_name], axis=1)\n    df = pd.concat([df,new_df], axis=1)\n    attributes_grouped[group_name] = new_df.columns.values\n    return attributes_grouped[group_name]\n        \ndef replace_dummies(name , df):\n    \"\"\"\n    Replace feature with dummies\n    :param name: str feature name\n    :param df:   pd.DataFrame data\n    \"\"\"\n    _d = pd.get_dummies(df[name])\n    _d = _d.rename({i:f\"{name}_{i}\" for i in _d.columns}, axis=1)\n    df = df.drop(name, axis=1)\n    return pd.concat([df,_d],axis=1)\n\ndef attribute_slice(attributes_group):\n    attr_list = attributes_grouped[attributes_group]\n    _df = df.copy()[attr_list]\n    _df[\"target\"] = df[\"SalePrice\"]\n    missingno.bar(_df, color=palette, figsize=(30,2))\n    display(_df.head(3))\n    return attr_list, _df","732d270f":"attr_list,_df = attribute_slice(\"qualitative\")","37cfee60":"categorical = {\"Gd\":3,\"Av\":2,\"Mn\":1,\"No\":0}\n_df.loc[:,\"BsmtExposure\"] = _df[\"BsmtExposure\"].replace(categorical)\n\ncategorical = {\"Ex\":5,\"Gd\":4,\"TA\":3,\"Fa\":2,\"Po\":1,\"No\":0}\n_df = _df.replace(categorical)\n\ncategorical = {\"GLQ\":6,\"ALQ\":5,\"BLQ\":4,\"Rec\":3,\"LwQ\":2,\"Unf\":1}\n_df = _df.replace(categorical)\n\n_df = _df.fillna(0).astype(int)","004344d8":"_model = LinearRegression()\n_model.fit(_df[~nan_mask][attr_list],_df[~nan_mask][\"target\"])\n_df[\"_GeneralQuality\"] = QuantileTransformer().fit_transform(_model.predict(_df[attr_list]).reshape(-1,1))","25f7d974":"pltdf = _df[~nan_mask].copy()\nfig = px.scatter(pltdf, x=\"_GeneralQuality\", y=\"target\",color=\"target\",height=400, color_continuous_scale=gradient)\nfig.show()","332ae803":"save_to_df(\"qualitative\", _df)\n_df.head(1)","93ad4758":"attr_list,_df = attribute_slice(\"environment\")","2db4670d":"_df = replace_dummies(\"MSZoning\",_df)","5cefcf2a":"_df.loc[_df[\"LotFrontage\"].isna(),\"LotFrontage\"] = _df.mode()[\"LotFrontage\"].values[0]\n_df[\"LotFrontage\"] = QuantileTransformer().fit_transform(_df[\"LotFrontage\"].to_numpy().reshape(-1,1))\npx.scatter(_df, x=\"LotFrontage\", y=\"target\", color=\"target\", height=400, color_continuous_scale=gradient)","5a48afba":"_df[\"_LfOverNormal\"] = 0\n_df.loc[_df[\"LotFrontage\"]>0.8,\"_LfOverNormal\"] = 1\npx.box(_df, color=\"_LfOverNormal\", x=\"target\", height=400, color_discrete_sequence=palette)","433b8c35":"# \"Street\" feature, only contains 2 values, so we will transfet it into binary \"Is_Pave_Street feature\"\nprint(set(_df[\"Street\"]))\n_df[\"_IsPaveStreet\"] = (_df[\"Street\"]=='Pave').astype(int)\n_df = _df.drop(\"Street\", axis=1)","d7b08e78":"# for \"PavedDrive\" we will manually endoe lables. Partially paved will be 0.5\n_df.loc[:,\"PavedDrive\"] = _df[\"PavedDrive\"].replace({\"Y\":1,\"N\":0,\"P\":0.5})","68343fcd":"# This one may be inaccurate, cause some of the loaction names are umbiquose\nll = {\"Blmngtn\":(40.480592,-89.033689),\"Blueste\":(47.5248776,-118.1266345),\"BrDale\":(36.5723285,-82.1790214),\"BrkSide\":(39.66706, -75.72688),\n      \"ClearCr\":(39.645833,-111.151667),\"CollgCr\":(37.225412, -76.693987),\"Crawfor\":(42.683024,-103.405479),\"Edwards\":(39.64499, -106.5942),\n      \"Gilbert\":(33.35283, -111.78903),\"IDOTRR\":(41.6613, -91.5299),\"MeadowV\":(40.0172943, -81.6192906),\"Mitchel\": (43.70943, -98.0298),\"NAmes\":(42.034722, -93.62),\n      \"NoRidge\":(34.22834, -118.53675),\"NPkVill\":(32.580697,-92.0804111),\"NridgHt\":(48.218016,-114.3329096),\"NWAmes\":(42.034722, -93.62),\n      \"OldTown\":(29.601657, -82.981928),\"SWISU\":(42.023949, -93.647595),\"Sawyer\":(45.907319, -91.320396),\"SawyerW\": (46.333407, -87.365986),\n      \"Somerst\":(40.4976, -74.48849),\"StoneBr\":(35.3465056, -82.4917868),\"Timber\":(45.6760608,-92.1060166),\"Veenker\": (42.0414857,-93.6501622),}","3eeee067":"for k in ll:\n    _msk = _df[\"Neighborhood\"]==k\n    _df.loc[_msk,[\"_Lat\",\"_Lon\"]] = ll[k]\n    \n    _target = _df.loc[_msk,\"target\"]\n    _df.loc[_msk,\"mean\"] =  _target.mean()\n    _df.loc[_msk,\"max\"]  =  _target.max()","63418c4b":"_df[\"max\"] = MinMaxScaler().fit_transform(_df[\"max\"].to_numpy().reshape(-1,1))\nfig = px.scatter_mapbox(_df[~nan_mask], lat=\"_Lat\", lon=\"_Lon\", size=\"max\", hover_name=\"Neighborhood\", color=\"mean\", zoom=3, height=500,color_continuous_scale=gradient)\nfig.update_layout(mapbox_style='carto-positron')\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","28b2438d":"_df[\"_Lat\"] = MinMaxScaler().fit_transform(_df[\"_Lat\"].to_numpy().reshape(-1,1))\n_df[\"_Lon\"] = MinMaxScaler().fit_transform(_df[\"_Lon\"].to_numpy().reshape(-1,1))","f5e2a775":"px.box(_df, color=\"Neighborhood\", y=\"target\", height=400, color_discrete_sequence=palette)","8087a655":"_df = _df.drop([\"mean\",\"max\"],axis=1)\n_df[\"_ExpenciveNh\"] = _df[\"Neighborhood\"].isin([\"NoRidge\",\"NridgHt\",\"StoneBr\"]).astype(int)\n_df = replace_dummies(\"Neighborhood\",_df)","d7c2b857":"encoder = OneHotEncoder(sparse=True)\ncond = encoder.fit_transform(_df[\"Condition1\"].to_numpy().reshape(-1,1)).toarray()\ncond += encoder.transform(_df[\"Condition2\"].to_numpy().reshape(-1,1)).toarray()\ncond = cond.astype(bool).astype(int)\ncond = pd.DataFrame(data=cond,columns=encoder.categories_, index=_df.index)\ncond.columns = [i[0] for i in cond.columns]","cd987629":"_df = _df.drop([\"Condition1\",\"Condition2\"], axis=1)\n_df = pd.concat([_df,cond], axis=1)","cc7d570a":"save_to_df(\"environment\", _df)\n_df.head(1)","aa5229ca":"attr_list,_df = attribute_slice(\"sellterms\")","f07b5c59":"_df =replace_dummies(\"SaleCondition\",_df)","94876757":"ym_df = _df.groupby([\"YrSold\",\"MoSold\"],as_index=False).sum()\nym_df[\"&\"] = ym_df[\"YrSold\"].astype(str)+\".\"+ym_df[\"MoSold\"].astype(str)\nfig = px.line(ym_df, x=\"&\", y=\"target\", color_discrete_sequence=palette)\nfig.add_hline(y=ym_df[\"target\"].mean(), line_dash=\"dash\", line_color=palette[1])","3ad63f34":"_df[\"_HighDemand\"] = ym_df[\"MoSold\"]\n_df.loc[:,\"_HighDemand\"] = _df[\"MoSold\"].replace([1,2,3,9,10,11,12],0)\n_df.loc[:,\"_HighDemand\"] = _df[\"MoSold\"].replace([4,5,6,7,8],1)","74b85e36":"_df[\"YrSold\"] = _df[\"YrSold\"].astype(str)\n_df =replace_dummies(\"YrSold\",_df)","360e7f23":"_df[\"SaleType\"] = _df[\"SaleType\"].fillna(\"Oth\")\n_df[\"SaleType\"] = _df[\"SaleType\"].astype(str)\n\n# Warranty deed\n_df[\"_Deed\"] = _df[\"SaleType\"].isin([\"WD\",\"CWD\",\"VWD\",\"COD\"]).astype(int)\n#Contract\n_df[\"_Contract\"] = _df[\"SaleType\"].isin([\"Con\",\"ConLw\",\"ConLI\",\"ConLD\"]).astype(int)\n\n_df =replace_dummies(\"SaleType\",_df)","f6f9da9a":"save_to_df(\"sellterms\", _df)\n_df.head(1)","52885b05":"attr_list,_df = attribute_slice(\"landplot\")","4c7fd81e":"# We will scale Lot Area, to check the distribution\n_df[\"LotArea\"] = QuantileTransformer().fit_transform(_df[\"LotArea\"].values.reshape(-1,1))\npx.scatter(_df, x=\"LotArea\", y=\"target\", color=\"target\", color_continuous_scale=gradient, height=400)","8e7b0638":"for k in [\"LotShape\",\"LandContour\",\"LotConfig\",\"LandSlope\"]:\n    _df = replace_dummies(k,_df)","d9256e85":"save_to_df(\"landplot\", _df)\n_df.head(1)","d3039353":"attr_list,_df = attribute_slice(\"dwelling\")","d7b256db":"_df[\"_WasRemod\"] = (_df[\"YearBuilt\"] != _df[\"YearRemodAdd\"]).astype(int)","6f92bb1d":"# I shrink Exterior features, with a small lost of informations i hope\ne = 3\n_df[\"_Exterior\"] = _df[\"Exterior1st\"] + \"_\" + _df[\"Exterior2nd\"]\n_df.loc[:,[\"_Exterior\"]] = _df.loc[:,[\"_Exterior\"]].fillna(\"extra\")\n_df = _df.drop([\"Exterior1st\",\"Exterior2nd\"],axis=1)\n_a = _df[\"_Exterior\"].value_counts()\nto_replace = _a[_a==1].index.values\nfor i in _a[_a<=e].index.values:\n    _df = _df.replace({i:\"extra\"})\npx.box(_df[~nan_mask], color=\"_Exterior\", y=\"target\", color_discrete_sequence=gradient, height=400)","3c9a70c9":"_df.loc[:,[\"MasVnrType\"]] = _df.loc[:,[\"MasVnrType\"]].fillna(\"None\")\n_df[\"_HasVnr\"] = (_df[\"MasVnrType\"]!=\"None\").astype(int)\n\n_df.loc[:,[\"MasVnrArea\"]] = _df.loc[:,[\"MasVnrArea\"]].fillna(0)\n_df[\"MasVnrArea\"] = MinMaxScaler().fit_transform(_df[\"MasVnrArea\"].values.reshape(-1,1))\n\n_df.loc[:,[\"BsmtFullBath\"]] = _df.loc[:,[\"BsmtFullBath\"]].fillna(0)\n_df.loc[:,[\"BsmtHalfBath\"]] = _df.loc[:,[\"BsmtHalfBath\"]].fillna(0)\n\n_df[\"_Bath\"] = 0.5 * (_df[\"BsmtHalfBath\"] + _df[\"HalfBath\"]) + _df[\"BsmtFullBath\"] + _df[\"FullBath\"]","9548a234":"for f in [\"BldgType\",\"HouseStyle\",\"_Exterior\",\"Foundation\",\"RoofStyle\",\"MasVnrType\",\"MSSubClass\",\"RoofMatl\"]:\n    _df = replace_dummies(f,_df)","5db990e2":"tsne = TSNE(n_components=2, perplexity=50, early_exaggeration=5,random_state=0)\nX = tsne.fit_transform(_df.drop([\"target\"],axis=1))\nX = pd.DataFrame(data=X, columns=[\"DwellTSNE1\",\"DwellTSNE2\"], index=_df.index)","d0b543a3":"gmm = DBSCAN(4)\nclusters = pd.Series(gmm.fit_predict(X), index=_df.index)[~nan_mask]+1","0609e5cc":"fig = px.scatter(x=X.loc[~nan_mask,\"DwellTSNE1\"], \n                 y=X.loc[~nan_mask,\"DwellTSNE2\"], \n                 color=clusters, size_max=7,\n                 color_continuous_scale=gradient)\nfig.show()","020bc249":"_df","674c1357":"save_to_df(\"dwelling\", _df)\n_df.head(1)","1fae8f5c":"attr_list,_df = attribute_slice(\"benefits\")","020baf31":"_df[\"_GasHeating\"] = _df[\"Heating\"].isin([\"GasA\",\"GasW\"]).astype(int)\npx.box(_df[~nan_mask], color=\"_GasHeating\", y=\"target\", color_discrete_sequence=palette, height=400)","6a262b0e":"_df[\"CentralAir\"] = (_df[\"CentralAir\"]==\"Y\").astype(int)\n_df[\"Electrical\"] = _df[\"Electrical\"].fillna(\"NA\")\n_df[\"Utilities\"] = (_df[\"Utilities\"]!=\"AllPub\").astype(int)\n_df[\"Functional\"] = _df[\"Functional\"].fillna(\"Typ\")","9b87cc22":"for k in [\"Functional\",\"Electrical\",\"Heating\"]:\n    _df =replace_dummies(k,_df)","cd8823ea":"save_to_df(\"benefits\", _df)\n_df.head(1)","c1c1b1f0":"attr_list,_df = attribute_slice(\"sqrfeets\")","fee55260":"_df[\"_PorchSF\"] = _df[[\"WoodDeckSF\",\"OpenPorchSF\",\"EnclosedPorch\",\"3SsnPorch\",\"ScreenPorch\"]].sum(axis=1)\n_df[\"_PorchSF\"] = MinMaxScaler().fit_transform(_df[\"_PorchSF\"].values.reshape(-1,1))\n_df[\"_NoPorch\"] = (_df[\"_PorchSF\"]==0).astype(int)\npx.scatter(_df,x=\"_PorchSF\",y=\"target\",color=\"target\",color_continuous_scale=gradient)","620f8c19":"_df[\"_NoPool\"] = (_df[\"PoolArea\"]==0).astype(int)\n_df[\"_1to2floorSF\"] = _df[\"2ndFlrSF\"]\/_df[\"1stFlrSF\"]\n_df[\"_No2floor\"] = (_df[\"_1to2floorSF\"]==0).astype(int)","9d666f8e":"_df[\"1stFlrSF\"] = MinMaxScaler().fit_transform(_df[\"1stFlrSF\"].values.reshape(-1,1))\n_df[\"2ndFlrSF\"] = MinMaxScaler().fit_transform(_df[\"2ndFlrSF\"].values.reshape(-1,1))\n_df[\"GrLivArea\"] = MinMaxScaler().fit_transform(_df[\"GrLivArea\"].values.reshape(-1,1))\n_df[\"OpenPorchSF\"] = MinMaxScaler().fit_transform(_df[\"OpenPorchSF\"].values.reshape(-1,1))","9c1d04d3":"save_to_df(\"sqrfeets\", _df)\n_df.head(1)","57812f46":"attr_list,_df = attribute_slice(\"basement\")","86aecd93":"_df.loc[_df[\"BsmtFinSF1\"].isna(),[\"BsmtFinSF1\", \"BsmtFinSF2\", \"BsmtUnfSF\",\"TotalBsmtSF\"]] = 0","e3e9b375":"_df['_Nobsmt'] = (_df[\"TotalBsmtSF\"]==0).astype(int)","c194fd54":"_df[\"BsmtUnfSF\"] = MinMaxScaler().fit_transform(_df[\"BsmtUnfSF\"].values.reshape(-1,1))\n_df[\"TotalBsmtSF\"] = MinMaxScaler().fit_transform(_df[\"TotalBsmtSF\"].values.reshape(-1,1))","bab5bf3b":"_model = LinearRegression()\n_model.fit(_df[~nan_mask][attr_list],_df[~nan_mask][\"target\"])\n_df[\"_BasementSummary\"] = QuantileTransformer().fit_transform(_model.predict(_df[attr_list]).reshape(-1,1))","6e7c05a0":"pltdf = _df[~nan_mask].copy()\nfig = px.scatter(pltdf, x=\"_BasementSummary\", y=\"target\",color=\"target\",height=400, color_continuous_scale=gradient)\nfig.show()","0200ffbb":"save_to_df(\"basement\", _df)\n_df.head(1)","3776ad2f":"attr_list,_df = attribute_slice(\"garage\")","3e5c45a0":"_df[\"GarageType\"] = _df[\"GarageType\"].fillna(\"NA\")\n\n_msk =_df[\"GarageYrBlt\"].isna()\n_df.loc[_msk,\"GarageYrBlt\"] = df.loc[_msk,\"YearBuilt\"]\n_df.loc[_msk,\"GarageFinish\"] = 'Fin'\n_df.loc[_df[\"GarageCars\"].isna(),\"GarageCars\"] = _df.mode()[\"GarageCars\"].values[0]\n_df.loc[_df[\"GarageArea\"].isna(),\"GarageArea\"] = _df.mode()[\"GarageArea\"].values[0]\n\n_df[\"_NoGarage\"] = (_df[\"GarageArea\"] == 0).astype(int)","459eff42":"px.box(_df[~nan_mask], color=\"_NoGarage\", y=\"target\", color_discrete_sequence=palette, height=400)","d92949d9":"_df[\"GarageArea\"] = QuantileTransformer().fit_transform(_df[\"GarageArea\"].to_numpy().reshape(-1,1))\npx.scatter(_df[~nan_mask], x=\"GarageArea\", y=\"target\", color=\"target\", color_continuous_scale=gradient, height=400)","946e7ede":"for f in [\"GarageType\",\"GarageFinish\"]:\n    _df = replace_dummies(f,_df)","6009df9a":"save_to_df(\"garage\", _df)\n_df.head(1)","c2f3cf4e":"attr_list,_df = attribute_slice(\"other\")","4cfe01b0":"plt_df = _df.copy()\nplt_df[\"MiscFeature\"] = plt_df[\"MiscFeature\"].astype(str)\npx.box(plt_df[~nan_mask], color=\"MiscFeature\", y=\"target\", color_discrete_sequence=palette, height=400)","fb099c8b":"_df.loc[_df[\"MiscFeature\"] == \"TenC\",\"MiscFeature\"] = np.nan","0ebd9fe5":"_df= replace_dummies(\"MiscFeature\",_df)","df435576":"save_to_df(\"other\", _df)\n_df.head(1)","b99b2841":"_df = df.copy(deep=True)\ntsne = TSNE(n_components=2, perplexity=50, early_exaggeration=12,random_state=0)\nX = tsne.fit_transform(_df.drop([\"SalePrice\",\"SalePrice_transformed\"],axis=1))\nX = pd.DataFrame(data=X, columns=[\"DwellTSNE1\",\"DwellTSNE2\"], index=_df.index)","e155b1c3":"gmm = DBSCAN(7, min_samples=10)\n_df = df.copy(deep=True)\ncolor = pd.Series(gmm.fit_predict(X), index=_df.index)[~nan_mask]+1","884ef8db":"fig = px.scatter(x=X.loc[~nan_mask,\"DwellTSNE1\"], \n                 y=X.loc[~nan_mask,\"DwellTSNE2\"], \n                 color= color, \n                 size_max=7,\n                 color_continuous_scale=gradient)\nfig.show()","a49a9d97":"df[\"_cluster\"] = gmm.fit_predict(X)","86bdf535":"print(f\"Number of attributes: {len(df.columns)}\")","cb782151":"# Pruning of the features with less then 30 non-zero values\nfor c in df.columns:\n    if (len(df) - df[df[c]==0][c].count()) < 30:\n        df = df.drop(c,axis=1)\nprint(f\"Number of attributes (Pruned): {len(df.columns)}\")","74962b6c":"X = df.loc[~df[\"SalePrice_transformed\"].isna(),:]\nX[\"outlier\"] = IsolationForest(random_state=0, n_estimators=1000).fit_predict(X)*-1+2\ndf = df.drop(X[X[\"outlier\"]!=1].index)\npx.scatter(X, y=\"SalePrice_transformed\", color=\"outlier\", size=\"outlier\",color_continuous_scale=gradient,size_max=7)","2c5d7f04":"_df = df.drop(\"SalePrice\",axis=1)\n_df.index = _df.index+1\nmask = _df[\"SalePrice_transformed\"].isna()","e3c9dd83":"train, deploy = _df.loc[~mask,:], _df.loc[mask,:]\nmodels = {}","8e1d82bb":"x_tr, y_tr = train.drop(\"SalePrice_transformed\", axis=1), train[\"SalePrice_transformed\"]","c4f9e663":"#name= \"cat\"\n#_grid = {\"l2_leaf_reg\":(0.0038,0.004,0.0042),\n#         \"rsm\":(0.05,0.1,0.25),\n#         \"learning_rate\":np.arange(0.0108,0.011,0.00001)} \n\n#model = CatBoostRegressor(verbose=False, iterations=5000, depth=6)\n#_cv =ShuffleSplit(n_splits=50, test_size=1400, random_state=0)\n#model.grid_search(_grid, X=x_tr, y=y_tr, cv=_cv, plot=True, verbose=False)","bb345894":"name= \"cat\"\nparams = {\"rsm\":0.05, \"depth\":6, \"learning_rate\": 0.0109, \"l2_leaf_reg\": 0.004}\nmodels[name] = CatBoostRegressor(verbose=False, iterations=5000, **params)\nmodels[name].fit(x_tr, y_tr)\n\nprint(f\"SCORE:{models[name].score(x_tr, y_tr)}\")\n\nd = models[name].predict(deploy.drop([\"SalePrice_transformed\"], axis=1))\nd  = target_scaler.inverse_transform(d.reshape(-1,1)).squeeze()\nd = pd.DataFrame({\"Id\":deploy.index,\"SalePrice\":d})\nd.to_csv(f\"{name}.csv\", index=False)\n# \"cat\" : 0.12245","f0eaf5de":"## <a class=\"anchor\" id=\"1.6_bullet\" style=\"color:#b14404\"> 1.6 Benefits features <\/a>\n---","0508bebb":"## <a class=\"anchor\" id=\"1.11_bullet\" style=\"color:#b14404\"> 1.11 Clusterization <\/a>\n---","a700bebf":"## <a class=\"anchor\" id=\"1.5_bullet\" style=\"color:#b14404\"> 1.5 Dwelling features <\/a>\n---","33d0c52f":"\n\n\ud83d\udcaa\ud83d\udcaa\ud83d\udcaa **I will be very happy to get your upvote for this kernel and the notebook, enjoy** \n\n\ud83d\udcaa\ud83d\udcaa\ud83d\udcaa **Also, check my \"Top 3% Titanic solution\" (https:\/\/www.kaggle.com\/nikitakudriashov\/top-4-titanic-solution)**","64056aae":"In the end of this part we will initialise some usefull methods to wirk with attributes groups:\n* **save_to_df** - updates the general DataFrame with processed group attributes\n* **replace_dummies** - replaces given feature with dummies values\n* **attribute_slice** - gets the subframe of group attributes","55b44295":"# <a class=\"anchor\" id=\"1.1_bullet\" style=\"color:#b14404\"> 1.1 Qualitative features <\/a>\n---","82daf2d4":"<h1 style=\"font-size:200%;color:#2f4c28\"> House Prices - Advanced Regression Techniques <\/h1>\n\nStarting this solution I was drowning in all the 79 variables describing (almost) every aspect of residential homes. Which do I have to start from? Or is it better just to take all of them end let it go as it goes.\n\nSo in this case I developed such approach for this task:\n1. **General EDA** with general data preparation - on this step I just tried to get some general information about the data and in some cases drop some data. After that a got the idea of separating all the attributes into several groups by their meanings and their nature.\n\n2. On the second part of EDA (actually the EDA + feature engineering)  I decided to analyze the **values in every group separately**. During this part I analyzed the data, filled None values and created new in-group features.\n\n3. After the in-group operations with data I decided to create some **new features, based on all 79 of them, and on some intergroup relations**.\n\n4. Fourth part is the **modeling** - I just create several variants, based on different models and put everything together. \n\nI hope such structure will be usefull for others who try to solve this task. Also, i spent some time to create good and strainforward visualisation for you to be comfortable with reading this.\n\n**Let's start**","cdc62db0":"# <a class=\"anchor\" id=\"1_bullet\" style=\"color:#2f4c28\"> 1. EDA \/ Feature engeneering (Attributes) <\/a>\n----\n----","dcbbf89a":"# <a class=\"anchor\" id=\"0_bullet\" style=\"color:#2f4c28\"> 0. EDA \/ Data Preparation (Primary) <\/a>\n----\n----","7301538d":"We will reaplce categorical values manually, for not to loose there connections.","c223a44e":"## <a class=\"anchor\" style=\"color:#8f6e60\"> General Quality weak regressor<\/a>\n---\nAfter a bunch of prunings I've chosen the set of features for general quality feature.","9617c6c4":"## <a class=\"anchor\" id=\"1.8_bullet\" style=\"color:#b14404\"> 1.8 Basement features <\/a>","41fde2ad":"## <a class=\"anchor\" style=\"color:#8f6e60\"> Clusters <\/a>\n---","88140668":"## <a class=\"anchor\" id=\"1.10_bullet\" style=\"color:#b14404\"> 1.10 Other features <\/a>\n---","8f9613ef":"## <a class=\"anchor\" style=\"color:#8f6e60\"> Neighborhood features<\/a> \n---","a3d16d14":"## <a class=\"anchor\" style=\"color:#8f6e60\"> Basement summary feature <\/a>\n---","7f8c0ee6":"## <a class=\"anchor\" id=\"2.2_bullet\" style=\"color:#b14404\"> 2.2 Baseline models <\/a>\n## <a class=\"anchor\" style=\"color:#8f6e60\"> CatBoost Regression<\/a>\n---","9ebe6627":"## <a class=\"anchor\" style=\"color:#8f6e60\"> General dwelling type feature <\/a>\n---","946036c3":"We can see that original target contains a bunch of outliers. \\\nIt will complicate our visualisation and analysis. \\\nIn this case, we will transform out target into normal dstrebution with the QuantileTransformer","9fc57f70":"## <a class=\"anchor\" id=\"1.7_bullet\" style=\"color:#b14404\"> 1.7 Square feet features <\/a>","10cdc2c3":"# <a class=\"anchor\" id=\"2_bullet\" style=\"color:#2f4c28\"> 2. Modeling <\/a>\n## <a class=\"anchor\" id=\"2.1_bullet\" style=\"color:#b14404\"> 2.1 Data Preprocessing <\/a>\n---","8d3a4a10":"## <a class=\"anchor\" id=\"1.3_bullet\" style=\"color:#b14404\"> 1.3 Selling terms features <\/a>\n---------------------","0a8dfcb9":"## <a class=\"anchor\" id=\"1.4_bullet\" style=\"color:#b14404\"> 1.4 Land plot features <\/a>\n---","3482542a":"For this feature wew will just use the normality test for distrebutions, and shrink those values, that influence target equally.","c2331eed":"# <a class=\"anchor\" id=\"1.2_bullet\" style=\"color:#b14404\"> 1.2 Environment features <\/a>\n---------------------------","a73158ec":"## <a class=\"anchor\" style=\"color:#8f6e60\"> YrSold and MoSold feature <\/a>\n---","a689c4ce":"## <a class=\"anchor\" id=\"1.9_bullet\" style=\"color:#b14404\"> 1.9 Garage features <\/a>\n---","94ccc502":"## <a class=\"anchor\" style=\"color:#8f6e60\"> SaleType feature <\/a>\n---","1505e749":"<a style=\"font-size:200%;color:#2f4c28\">Table Of Content\n* [<a style=\"font-size:150%;color:#2f4c28\">0. EDA \/ Data Preparation (Primary)](#0_bullet)\n* [<a style=\"font-size:150%;color:#2f4c28\">1. EDA \/ Feature engeneering (Attributes)](#1_bullet)\n    * [<a style=\"font-size:130%;color:#b14404\"> 1.1 Qualitative features](#1.1_bullet)\n      -Desctibes the lot from the qualitative point of view (ordinal categorical data).\n    * [<a style=\"font-size:130%;color:#b14404\"> 1.2 Environment features](#1.2_bullet)\n      -Describes the location, area and the environment condition of the lot.\n    * [<a style=\"font-size:130%;color:#b14404\"> 1.3 Selling terms features](#1.3_bullet)\n      -Describes the particular qualities of the selling process.\n    * [<a style=\"font-size:130%;color:#b14404\"> 1.4 Land plot features](#1.4_bullet)\n      -Describes the land quality features.\n    * [<a style=\"font-size:130%;color:#b14404\"> 1.5 Dwelling features](#1.5_bullet)\n      -Describes the house in objective values   \n    * [<a style=\"font-size:130%;color:#b14404\"> 1.6 Benefits features](#1.6_bullet)\n      -Describes lot benefits or utilities\n    * [<a style=\"font-size:130%;color:#b14404\"> 1.7 Square feet features](#1.7_bullet)\n      -Describes sqr feets of the lot areas\n    * [<a style=\"font-size:130%;color:#b14404\"> 1.8 Basement features](#1.8_bullet)\n      -Describes the basement quality and other features\n    * [<a style=\"font-size:130%;color:#b14404\"> 1.9 Garage features](#1.9_bullet)\n      -Describes the garage features\n    * [<a style=\"font-size:130%;color:#b14404\"> 1.10 Other features](#1.10_bullet)\n      -Describes the misk features\n    * [<a style=\"font-size:130%;color:#b14404\"> 1.11 Clusterization](#1.10_bullet)\n      -General classes of the data  \n* [<a style=\"font-size:150%;color:#2f4c28\">2. Modeling](#2_bullet)\n    * [<a style=\"font-size:130%;color:#b14404\"> 2.1 Data Preprocessing](#2.1_bullet)\n    * [<a style=\"font-size:130%;color:#b14404\"> 2.2 Linear models](#2.2_bullet)\n    * [<a style=\"font-size:130%;color:#b14404\"> 2.3 Advanced models](#2.3_bullet)\n    * [<a style=\"font-size:130%;color:#b14404\"> 2.4 Mixture models](#2.4_bullet)\n    * [<a style=\"font-size:130%;color:#b14404\"> 2.5 Avaraging](#2.5_bullet)","b3374bb9":"## <a class=\"anchor\" style=\"color:#8f6e60\"> Conditions features<\/a>\n---"}}