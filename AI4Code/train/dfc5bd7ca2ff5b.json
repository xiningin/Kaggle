{"cell_type":{"1449f85d":"code","d2e5b0b4":"code","0edc4c59":"code","5a40a9d4":"code","10c447d0":"code","98a7ac19":"code","e44e05f6":"code","1ae75e64":"code","2233b7ac":"code","5d666c1e":"code","700d3e97":"code","965032c4":"code","0316f49a":"code","bff81a17":"code","e0ffc670":"code","5fb37caf":"code","9daaab0c":"code","2896d518":"code","1afb90cd":"code","836f416a":"code","eb66f596":"markdown","8fe85ad1":"markdown","903e53b4":"markdown","cdbdfde7":"markdown","9e5514b3":"markdown","fcfee5ab":"markdown","1e4f7f3a":"markdown","5b9f75c3":"markdown","41ee77ba":"markdown","a8423c61":"markdown"},"source":{"1449f85d":"!pip install ta > \/dev\/null","d2e5b0b4":"import pandas as pd\nimport json\nimport requests\nfrom tqdm.notebook import tqdm\nimport datetime","0edc4c59":"import hmac\nimport hashlib\nimport time\nimport base64\nfrom requests.auth import AuthBase","5a40a9d4":"from ta.volatility import BollingerBands","10c447d0":"PATH_CONFIG = \"..\/input\/coinbase-config\/config_coinbase.json\"\n\nwith open(PATH_CONFIG) as json_file:\n    config = json.load(json_file)","98a7ac19":"API_URL = config.get(\"API_URL\") # \"https:\/\/api.pro.coinbase.com\/\"\nAPI_KEY = config.get(\"API_KEY\")\nAPI_SECRET = config.get(\"API_SECRET\")\nAPI_PASS = config.get(\"API_PASS\")","e44e05f6":"class CoinbaseExchangeAuth(AuthBase):\n    def __init__(self, api_key: str, secret_key: str, passphrase: str):\n        self.api_key = api_key\n        self.secret_key = secret_key\n        self.passphrase = passphrase\n\n    def __call__(self, request):\n        timestamp = str(time.time())\n        message = timestamp + request.method + request.path_url + (request.body or b'').decode()\n        hmac_key = base64.b64decode(self.secret_key)\n        signature = hmac.new(hmac_key, message.encode(), hashlib.sha256)\n        signature_b64 = base64.b64encode(signature.digest()).decode()\n\n        request.headers.update({\n            'CB-ACCESS-SIGN': signature_b64,\n            'CB-ACCESS-TIMESTAMP': timestamp,\n            'CB-ACCESS-KEY': self.api_key,\n            'CB-ACCESS-PASSPHRASE': self.passphrase,\n            'Content-Type': 'application\/json'\n        })\n        return request","1ae75e64":"def get_product(product: str, params: dict) -> pd.DataFrame:\n    data = requests.get(f'{API_URL}products\/{product}\/candles', auth=AUTH, params=params).json()\n\n    df = pd.DataFrame(data, columns=['time', 'low', 'high', 'open', 'close', 'volume'])\n    df = df.sort_values(by='time').reset_index(drop=True)\n    return df","2233b7ac":"def bollinger_bands(data, window=20, window_dev=2):\n    bb = BollingerBands(close=data['close'], window=window, window_dev=window_dev)\n    out = data.copy()\n    out['bb_bbm'] = bb.bollinger_mavg()\n    out['bb_bbh'] = bb.bollinger_hband()\n    out['bb_bbl'] = bb.bollinger_lband()\n    out['bb_bbhi'] = bb.bollinger_hband_indicator()\n    out['bb_bbli'] = bb.bollinger_lband_indicator()\n    return out","5d666c1e":"def compute_indicators(data: pd.DataFrame, indicators: list, symbols: list, params: dict) -> dict:\n    out = {}\n    for i in indicators:\n        out[i] = {}\n    for market in tqdm(data[(data.base_currency.isin(symbols)) | (data.quote_currency.isin(symbols))].id.values):\n        data = get_product(market, params)\n        for i in indicators:\n            if i == 'BB':\n                out[i][market] = bollinger_bands(data)\n    return out","700d3e97":"def plot_bb(data: dict, symbol: str):\n    bb = data['BB'][symbol]\n    bb['time'] = bb.time.apply(datetime.datetime.fromtimestamp)\n    bb.set_index('time', inplace=True)\n    bb[['close', 'bb_bbm', 'bb_bbh', 'bb_bbl']].plot(figsize=(15,10), title=symbol, ylabel='PRICE', xlabel='TIME')","965032c4":"def get_latest_bb_indicators(data: dict) -> pd.DataFrame:\n    output = None\n    for k, v in data['BB'].items():\n        if len(v) < 1:\n            continue\n        bb_mstd = (v.iloc[-1].bb_bbh - v.iloc[-1].bb_bbm)\/2\n        last_value = v.iloc[-1].to_frame().T\n        last_value['market'] = k\n        last_value['stds'] = (v.iloc[-1].close - v.iloc[-1].bb_bbm)\/bb_mstd\n        output = last_value if output is None else pd.concat([output, last_value])\n    output.reset_index(drop=True, inplace=True)\n    output.drop(columns=['time', 'low', 'high', 'volume'], inplace=True)\n\n    output = output.sort_values(by='stds')\n    return output","0316f49a":"AUTH = CoinbaseExchangeAuth(API_KEY, API_SECRET, API_PASS)","bff81a17":"data = pd.DataFrame(requests.get(f'{API_URL}products', auth=AUTH).json())","e0ffc670":"data.head(5)","5fb37caf":"output = compute_indicators(data, ['BB'], ['BTC', 'USDC'], {'granularity': '86400'})","9daaab0c":"plot_bb(output, 'ETH-USDC')","2896d518":"plot_bb(output, 'LTC-BTC')","1afb90cd":"output_std = get_latest_bb_indicators(output)","836f416a":"output_std","eb66f596":"These are all the available products on Coinbase.","8fe85ad1":"This is a well known class used to handle authentication to Coinbase taken from their documentation.","903e53b4":"This is a function meant to be extended with more indicators. I decided to keep every indicator separate in a dictionary, but it is very easy to modify it to output only one dataframe.","cdbdfde7":"Create a private dataset where you place your own config file or directly replace API_URL, API_KEY, API_SECRET, API_PASS here.","9e5514b3":"This function computes for the products how far the last closing price is from the current moving average in terms of standard deviations.","fcfee5ab":"This notebook is meant as a starting point to apply technical analysis over the data provided by the Coinbase Pro API.","1e4f7f3a":"Get one product of interest.","5b9f75c3":"The granularity field must be one of the following values: {60, 300, 900, 3600, 21600, 86400}. Otherwise, your request will be rejected. These values correspond to timeslices representing one minute, five minutes, fifteen minutes, one hour, six hours, and one day, respectively. \n\nThis is directly taken from the Coinbase documentation. For other details regarding the access to the data use the official documentation\n\n> https:\/\/docs.pro.coinbase.com\/","41ee77ba":"Compute the Bollinger Bands over the closing price of one product where window is the window size for the moving average and window_dev is the number of standard deviations from the mean which is used to define the lower and upper bands.\n\n> https:\/\/school.stockcharts.com\/doku.php?id=technical_indicators:bollinger_bands","a8423c61":"ta is a great technical analysis library\n> https:\/\/github.com\/bukosabino\/ta"}}