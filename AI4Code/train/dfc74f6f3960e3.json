{"cell_type":{"aefa9641":"code","a418df29":"code","68250bd7":"code","87d33f51":"code","2c261225":"code","77895554":"code","5478b41a":"code","99027af8":"code","f4f902f2":"code","1025f619":"code","1fe9a5e0":"code","9c6900ed":"code","905871ff":"code","6fd30684":"markdown","ea149203":"markdown","e1e857cb":"markdown","73a94680":"markdown","d525cb82":"markdown","81ed843a":"markdown"},"source":{"aefa9641":"import numpy as np \nimport pandas as pd\n\nimport glob\nimport json\n\nroot_path = '\/kaggle\/input\/CORD-19-research-challenge\/'","a418df29":"all_json_pmc = glob.glob(f'{root_path}\/**\/pmc_json\/*.json', recursive=True)\nlen(all_json_pmc)","68250bd7":"methods = ['methods','method','statistical methods','materials','materials and methods',\n                'data collection','the study','study design','experimental design','objective',\n                'objectives','procedures','data collection and analysis', 'methodology',\n                'material and methods','the model','experimental procedures','main text']","87d33f51":"[''.join(x.lower() for x in m if x.isalpha()) for m in methods]","2c261225":"for m in methods:\n    print(''.join(x.lower() for x in m if x.isalpha()))","77895554":"class FileReader:\n    def __init__(self, file_path):\n        with open(file_path) as file:\n            content = json.load(file)\n            self.paper_id = content['paper_id']\n            self.body_text = []\n            self.methods = []\n            self.results = []\n\n            # Body text\n            for entry in content['body_text']:\n                self.body_text.append(entry['text'])\n            # Methods\n            methods = ['methods','method','statistical methods','materials','materials and methods',\n                'data collection','the study','study design','experimental design','objective',\n                'objectives','procedures','data collection and analysis', 'methodology',\n                'material and methods','the model','experimental procedures','main text']\n            for entry in content['body_text']:\n                section_title = ''.join(x.lower() for x in entry['section'] if x.isalpha()) #remove numbers and spaces\n                if any(m in section_title for m in [''.join(x.lower() for x in m if x.isalpha()) for m in methods]) : \n                    self.methods.append(entry['text'])\n            # Results\n            results_synonyms = ['result']\n            for entry in content['body_text']:\n                section_title = ''.join(x.lower() for x in entry['section'] if x.isalpha())\n                if any(r in section_title for r in results_synonyms) :\n                    self.results.append(entry['text'])\n                    \n            self.body_text = '\\n'.join(self.body_text)\n            self.methods = '\\n'.join(self.methods)\n            self.results = '\\n'.join(self.results)\n\n    def __repr__(self):\n        return f'{self.paper_id}: {self.body_text[:200]}...'\nfirst_row = FileReader(all_json_pmc[0])\nprint(first_row)","5478b41a":"dict_ = {'paper_id': [], 'body_text': [], 'methods': [], 'results': []}\nfor idx, entry in enumerate(all_json_pmc):\n    if idx % (len(all_json_pmc) \/\/ 10) == 0:\n        print(f'Processing index: {idx} of {len(all_json_pmc)}')\n    content = FileReader(entry)\n    dict_['paper_id'].append(content.paper_id)\n    dict_['body_text'].append(content.body_text)\n    dict_['methods'].append(content.methods)\n    dict_['results'].append(content.results)\ndel all_json_pmc","99027af8":"pmc_text = pd.DataFrame(dict_, columns=['paper_id', 'body_text', 'methods', 'results'])\ndel dict_\ngc.collect()\npmc_text.head()","f4f902f2":"root_path = '\/kaggle\/input\/CORD-19-research-challenge\/'\nmetadata_path = f'{root_path}\/metadata.csv'\nmetadata_df = pd.read_csv(metadata_path, dtype={\n    'pubmed_id': str,\n    'Microsoft Academic Paper ID': str, \n    'doi': str\n})\nmetadata_df.head(2)","1025f619":"# running out of memory, so filter to papers published from 1 Jan 2020 onwards\nmetadata_df = metadata_df.drop(metadata_df[metadata_df.publish_time < '2020'].index) \nmetadata_df.head(2)","1fe9a5e0":"# only using metadata_df as a filter, so drop non-key columns\nmetadata_df = metadata_df[['sha']]","9c6900ed":"# how = right to drop papers without metadata\npmc_text = pd.merge(pmc_text, metadata_df, left_on='paper_id', right_on='sha', how='right').drop('sha', axis=1)\ndel df\ngc.collect()","905871ff":"pmc_text.to_csv('pmc_json_df.csv', index=False)","6fd30684":"# Load and Prepare Data","ea149203":"# pmc_json","e1e857cb":"# Load Packages","73a94680":"This only contains the full text - no abstracts!","d525cb82":"To read the JSON files we follow [COVID EDA: Initial Exploration Tool](https:\/\/www.kaggle.com\/ivanegapratama\/covid-eda-initial-exploration-tool).","81ed843a":"Mike Honey: Cloned from [this notebook](https:\/\/www.kaggle.com\/danielwolffram\/cord-19-create-dataframe).\n\nCrashing with memory errors, so breaking into separate notebooks.  This one will just prepare the pmc_json input data and write out the results."}}