{"cell_type":{"3a274ef6":"code","5175051e":"code","b77279cd":"code","1b30cd0d":"code","b86a122c":"code","23461c92":"code","88b1d8cb":"code","b1aadf40":"code","77ab35b6":"code","d765f4cf":"code","087a1bd3":"code","6026ba23":"code","db1bb4ea":"code","924bef4b":"code","08c2e89d":"code","a9f5537c":"code","4f631a87":"code","5ef315dd":"code","36a72cdf":"code","1649529e":"markdown","e2924020":"markdown","ec4731c4":"markdown","20611951":"markdown","5cb990b8":"markdown","b05d46a0":"markdown","010892cb":"markdown","d8f6acf3":"markdown","241a06e1":"markdown","efed6a87":"markdown","893a0d2d":"markdown","58339088":"markdown","60e5c992":"markdown","09a93492":"markdown","78aa0a89":"markdown"},"source":{"3a274ef6":"from IPython.display import Image\nImage(filename=\"..\/input\/image1\/DV_Plotly_Motivation.png\")","5175051e":"from IPython.display import Image\nImage(filename=\"..\/input\/image2\/DV_Plotly_Fundamentals.png\")","b77279cd":"from IPython.display import Image\nImage(filename=\"..\/input\/image2\/DV_Plotly_StatisticalCharts.png\")","1b30cd0d":"from IPython.display import Image\nImage(filename=\"..\/input\/image2\/DV_Plotly_AIMLCharts.png\")","b86a122c":"from IPython.display import Image\nImage(filename=\"..\/input\/image2\/DV_Plotly_MapOptions.png\")","23461c92":"from IPython.display import Image\nImage(filename=\"..\/input\/image2\/DV_Plotly_JupyterWidgets.png\")","88b1d8cb":"import datetime\nimport numpy as np\nimport pandas as pd\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom ipywidgets import widgets\n\nimport warnings\nwarnings.filterwarnings('ignore')","b1aadf40":"df = pd.read_csv('https:\/\/raw.githubusercontent.com\/yankev\/testing\/master\/datasets\/nycflights.csv')\n\ndf = df.drop(df.columns[[0]], axis=1)","77ab35b6":"df.head()","d765f4cf":"df.shape","087a1bd3":"df['carrier'].unique()","6026ba23":"# For capturing Month Numbers so that user can change\n# From 1 to 12 representing JAN to DEC\nmonth = widgets.IntSlider(\n    value=1.0,\n    min=1.0,\n    max=12.0,\n    step=1.0,\n    description='Month:',\n    continuous_update=False\n)\n\n# Date checkbox\nuse_date = widgets.Checkbox(\n    description='Date: ',\n    value=True,\n)\n\ncontainer = widgets.HBox(children=[use_date, month])\n\n# For Airline dropdown\n# Default can be set to a particular carrier using \"value=\"\ntextbox = widgets.Dropdown(\n    description='Airline:   ',\n    value='DL',\n    options=df['carrier'].unique().tolist()\n)\n\n# Origin airport code\n# Within NYC, we have Newark, LaGuardia, JFKennedy etc\norigin = widgets.Dropdown(\n    options=list(df['origin'].unique()),\n    value='LGA',\n    description='Origin Airport:',\n)\n\n\n# Assign an empty figure widget with two traces\ntrace1 = go.Histogram(x=df['arr_delay'], opacity=0.75, name='Arrival Delays')\ntrace2 = go.Histogram(x=df['dep_delay'], opacity=0.75, name='Departure Delays')\ng = go.FigureWidget(data=[trace1, trace2],\n                    layout=go.Layout(\n                        title=dict(\n                            text='NYC Flight Database'\n                        ),\n                        barmode='overlay'\n                    ))","db1bb4ea":"def validate():\n    if origin.value in df['origin'].unique() and textbox.value in df['carrier'].unique():\n        return True\n    else:\n        return False\n\n\ndef response(change):\n    if validate():\n        if use_date.value:\n            filter_list = [i and j and k for i, j, k in\n                           zip(df['month'] == month.value, df['carrier'] == textbox.value,\n                               df['origin'] == origin.value)]\n            temp_df = df[filter_list]\n\n        else:\n            filter_list = [i and j for i, j in\n                           zip(df['carrier'] == 'DL', df['origin'] == origin.value)]\n            temp_df = df[filter_list]\n        x1 = temp_df['arr_delay']\n        x2 = temp_df['dep_delay']\n        with g.batch_update():\n            g.data[0].x = x1\n            g.data[1].x = x2\n            g.layout.barmode = 'overlay'\n            g.layout.xaxis.title = 'Delay in Minutes'\n            g.layout.yaxis.title = 'Number of Delays'\n\n\norigin.observe(response, names=\"value\")\ntextbox.observe(response, names=\"value\")\nmonth.observe(response, names=\"value\")\nuse_date.observe(response, names=\"value\")","924bef4b":"container2 = widgets.HBox([origin, textbox])\nwidgets.VBox([container,\n              container2,\n              g])","08c2e89d":"np.random.seed(1)\n\nx = np.random.rand(100)\ny = np.random.rand(100)\n\nf = go.FigureWidget([go.Scatter(x=x, y=y, mode='markers')])\n\nscatter = f.data[0]\ncolors = ['#a3a7e4'] * 100\nscatter.marker.color = colors\nscatter.marker.size = [10] * 100\nf.layout.hovermode = 'closest'\n\n\n# create our callback function\ndef update_point(trace, points, selector):\n    c = list(scatter.marker.color)\n    s = list(scatter.marker.size)\n    for i in points.point_inds:\n        c[i] = '#bae2be'\n        s[i] = 20\n        with f.batch_update():\n            scatter.marker.color = c\n            scatter.marker.size = s\n\n\nscatter.on_click(update_point)\n\nf","a9f5537c":"df = px.data.tips()\n\nfig = px.scatter(\n    df, x='total_bill', y='tip', opacity=0.65,\n    trendline='ols', trendline_color_override='darkblue'\n)\nfig.show()","4f631a87":"from sklearn.linear_model import LinearRegression\n\ndf = px.data.tips()\nX = df.total_bill.values.reshape(-1, 1)\n\nmodel = LinearRegression()\nmodel.fit(X, df.tip)\n\nx_range = np.linspace(X.min(), X.max(), 100)\ny_range = model.predict(x_range.reshape(-1, 1))\n\nfig = px.scatter(df, x='total_bill', y='tip', opacity=0.65)\nfig.add_traces(go.Scatter(x=x_range, y=y_range, name='Regression Fit'))\nfig.show()","5ef315dd":"#import plotly.express as px\ndf = px.data.gapminder()\n\nfig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", animation_frame=\"year\", animation_group=\"country\",\n           size=\"pop\", color=\"continent\", hover_name=\"country\", facet_col=\"continent\",\n           log_x=True, size_max=45, range_x=[100,100000], range_y=[25,90])\nfig.show()","36a72cdf":"#import plotly.express as px\n\ndf = px.data.gapminder()\n\nfig = px.bar(df, x=\"continent\", y=\"pop\", color=\"continent\",\n  animation_frame=\"year\", animation_group=\"country\", range_y=[0,4000000000])\nfig.show()","1649529e":"Here is the gapminder data on population increase by continent","e2924020":"# 1. Premise and Motivation\n\n* The objective is to provide basics around data visualization using Plotly library. \n* Target audience - Beginners in Data Science","ec4731c4":"### Linear Regression with scikit-learn","20611951":"Here, we will see how to apply a simple regression model for predicting tips a server will receive based on various client attributes (such as sex, time of the week, and whether they are a smoker or not etc).\n\nWe will be using the Linear Regression, which is a simple model that fit an intercept (the mean tip received by a server), and add a slope for each feature we use, such as the value of the total bill. We can see how to do that with both Plotly Express and Scikit-learn.\n\n### Ordinary Least Square (OLS) with plotly.express\n\nThis use case shows how to use ```plotly.express's``` trendline parameter to train a simply Ordinary Least Square (OLS) for predicting the tips waiters will receive based on the value of the total bill.","5cb990b8":"# 2. About Plotly\n\n* It is a Python graphic library from javascript (it uses D3 and stack.gl)\n* It helps create interactive, publication-quality charts\n* It has 3 key interfaces\n    * An object oriented interface\n    * A high level interface similar to Seaborn named \u201cPlotly Express\u201d\n    * An imperative interface that allows us to specify our plot using JSON like data structures\n* AI\/ML charts can also be done\n* Plotly Express in Dash (Dash is the best way to build analytical apps in Python using Plotly figures)","b05d46a0":"# 7. AI\/ML - Basic Linear Regression Plotting","010892cb":"\n\n# 3. Import Required Libraries\n\nPlotly Express is a terse, consistent, high-level API for creating figures. The ```plotly.express``` module (usually imported as px) contains functions that can create entire figures at once, and is referred to as Plotly Express or PX. Plotly Express is a built-in part of the plotly library, and is the recommended starting point for creating most common figures. Every Plotly Express function uses graph objects internally and returns a ```plotly.graph_objects.Figure``` instance.\n\nThe figures created, manipulated and rendered by the plotly Python library are represented by tree-like data structures which are automatically serialized to JSON for rendering by the Plotly.js JavaScript library. These trees are composed of named nodes called \"attributes\", with their structure defined by the Plotly.js figure schema, which is available in machine-readable form. The ```plotly.graph_objects``` module (typically imported as go) contains an automatically-generated hierarchy of Python classes which represent non-leaf nodes in this figure schema. The term \"graph objects\" refers to instances of these classes.\n\n```ipywidgets```, also known as jupyter-widgets or simply widgets, are interactive HTML widgets for Jupyter notebooks and the IPython kernel.","d8f6acf3":"# 8. More Animations\n\nSeveral Plotly Express functions support the creation of animated figures through the animation_frame and animation_group arguments.\n\nHere is an example of an animated scatter plot creating using Plotly Express. Note that you should always fix the x_range and y_range to ensure that your data remains visible throughout the animation.","241a06e1":"## Summary\n\nIntent is not to cover each and every aspect of the Plotly features \/ functionalities. Instead it guiedes users to get a step-by step idea and how to proceed with it in your business use cases \/ problem solving. This is very powerful as you have noticed above and is more collaborative and interactive compared to other libraries in Python such as Matplotlib and Seaborn.\n\nPlease try to run in your environment and try to reproduce charts accordingly if you are not able to view them here on the Kaggle Kernel.\n\nPlease feel free to provide your feedback\/suggestions in the comments section.","efed6a87":"# 6. Click Events in Python\n\nUpdate points in the chart using a click callback","893a0d2d":"Let now write a function that will handle the input from the widgets, and alter the state of the graph","58339088":"Let's get the set of all the airlines, so that we can type the right things into the search box later.","60e5c992":"# 4. Import Dataset \n\nWe will consider the NYC Flights dataset for analysis below.\n\nObjective: We'll be making an application to take a look at delays from all flights out of NYC in the year 2013.\n","09a93492":"# 5. Interactive Charts with widgets","78aa0a89":"Let's assign the widgets that we're going to be using in our app. In general all these widgets will be used to filter the data set, and thus what we visualize."}}