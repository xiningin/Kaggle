{"cell_type":{"01ee890f":"code","8a4081c7":"code","10b23db8":"code","4f6b2af7":"code","c88768cb":"code","055eecb6":"code","6c702ee5":"code","8c3d4dc6":"code","a4373064":"code","8e02da49":"code","6795a5b8":"code","c9cd650e":"code","9add05a2":"code","f62f7c71":"code","ebf3d2bd":"code","3f3ec232":"code","be10f269":"code","510fb246":"code","431cb914":"code","a8390361":"code","9bbec0c8":"code","dc753ffb":"code","eea47d91":"code","81bbda32":"code","2b0ac3e9":"code","f19a287d":"code","d6fef28a":"code","443258c9":"code","4c59793c":"code","ff97cc08":"code","4ecf831b":"markdown","84ede974":"markdown","911b64fb":"markdown","251ac6a9":"markdown","5887e0b3":"markdown","4852c340":"markdown","6f2a649b":"markdown","1bc529c0":"markdown","5ba57a8e":"markdown","6d5bf629":"markdown","76523398":"markdown","7e3d8cb5":"markdown","331cc426":"markdown","be5c58b5":"markdown","8fa03803":"markdown","d378ed99":"markdown","e8b9ed23":"markdown","50ef8a3f":"markdown","d8a5b232":"markdown","d426add8":"markdown","996f840a":"markdown","b23c039c":"markdown","6be8421c":"markdown","76982c04":"markdown","aa815c19":"markdown","9623b624":"markdown","49455755":"markdown","747e8934":"markdown","ef6bba4e":"markdown","4d32aafb":"markdown","ee6e3ad1":"markdown"},"source":{"01ee890f":"import pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport re\nimport seaborn as sns\nimport os\nimport numpy as np\nimport datetime as dt","8a4081c7":"\ndf = pd.read_csv(\"..\/input\/car-crashes-severity-prediction\/train.csv\")\nweather = pd.read_csv(\"..\/input\/car-crashes-severity-prediction\/weather-sfcsv.csv\")\ntest = pd.read_csv('..\/input\/car-crashes-severity-prediction\/test.csv')\nprint(\"The shape of the dataset is {}.\\n\\n\".format(df.shape))\n","10b23db8":"import xml.etree.ElementTree as ET\nroot = ET.parse(\"..\/input\/car-crashes-severity-prediction\/holidays.xml\").getroot()\n\ntags = {\"tags\":[]}\nfor elem in root:\n    tag = {}\n    tag[\"date\"] = elem[0].text\n    \n    tag[\"description\"] = elem[1].text\n    #tag['description']=1\n    tags[\"tags\"].append(tag)\n\nholidays = pd.DataFrame(tags[\"tags\"])\nholidays.info()","4f6b2af7":"#Convert object to date time\ndf['timestamp']=pd.to_datetime(df['timestamp'])\n\n#Create date column in df dataframe \ndf['date'] = [d.date() for d in df['timestamp']]\ndf['date']=pd.to_datetime(df['date'])\n\n#Create date column in weather dataframe\nweather[\"date\"]= weather[\"Year\"].astype(str)+\"-\" + weather[\"Month\"].astype(str)+\"-\"+weather[\"Day\"].astype(str)\nweather['date'] = pd.to_datetime(weather['date'])\nweather=weather.drop_duplicates(subset=['Hour', 'date'])\n\nweather_cp = weather.copy()\ndf_cp = df.copy()\n#========================================\ndf_cp[\"year\"]=df_cp.date.dt.year\ndf_cp[\"month\"]=df_cp.date.dt.month\ndf_cp[\"Day\"]=df_cp.date.dt.day\ndf_cp['weekday'] = df_cp[['date']].apply(lambda x: dt.datetime.strftime(x['date'], '%A'), axis=1)\n\ndef hr_func(ts):\n    return ts.hour\ndf_cp['Hour'] = df_cp['timestamp'].apply(hr_func)\n\n#========================================\nholidays_cp = holidays.copy()\nholidays_cp['date']=  pd.to_datetime(holidays_cp['date'])\n","c88768cb":"df_cp1 = pd.merge(df_cp,weather_cp,on=['date','Hour'],how = \"left\")\ndf_cp2 = pd.merge(df_cp1,holidays_cp,on=['date'],how = \"left\")\n","055eecb6":"df_cp2.info()","6c702ee5":"cleand_df_cp = df_cp2.drop([\"Junction\",\"Year\",\"Month\",\"Day_y\",\"date\",\"ID\",\"Wind_Chill(F)\",\"Bump\",\"Give_Way\",\"No_Exit\",\"Roundabout\",\"timestamp\"],axis=1)\ncleand_df_cp.info()","8c3d4dc6":"cleand_df_cp.isnull().sum().sort_values(ascending = False).head(10)","a4373064":"cleand_df_cp['Temperature(F)']= cleand_df_cp['Temperature(F)'].fillna(cleand_df_cp['Temperature(F)'].mean())\ncleand_df_cp['Visibility(mi)']= cleand_df_cp['Visibility(mi)'].fillna(cleand_df_cp['Visibility(mi)'].mean())\ncleand_df_cp['Humidity(%)']= cleand_df_cp['Humidity(%)'].fillna(cleand_df_cp['Humidity(%)'].mean())\ncleand_df_cp['Weather_Condition']= cleand_df_cp['Weather_Condition'].fillna(\"Plarty Cloudy\")\ncleand_df_cp['Wind_Speed(mph)']= cleand_df_cp['Wind_Speed(mph)'].fillna(cleand_df_cp['Wind_Speed(mph)'].mean())\ncleand_df_cp['Precipitation(in)']= cleand_df_cp['Precipitation(in)'].fillna(cleand_df_cp['Precipitation(in)'].mean())\ncleand_df_cp['description']= cleand_df_cp['description'].fillna(0)\ncleand_df_cp.isnull().sum().sort_values(ascending = False).head(5)\ncleand_df_cp[\"H_day\"] = cleand_df_cp[\"description\"].copy()","8e02da49":"cleand_df_cp.isnull().sum().sort_values(ascending = False).head(10)","6795a5b8":"cleand_df_cp.info()","c9cd650e":"bool_df1 = cleand_df_cp.select_dtypes(include = \"bool\")\n# bool_df1.columns\n\nfor i in range(len(cleand_df_cp[\"description\"])):\n    if cleand_df_cp[\"description\"][i] != 0:\n        cleand_df_cp[\"H_day\"][i]= 1\n        \n\nfor i in range(len(cleand_df_cp['weekday'])):\n    if cleand_df_cp['weekday'][i] == 'Sunday':\n        cleand_df_cp['H_day'][i] = 1\n    elif cleand_df_cp['weekday'][i] == 'Saturday':\n        cleand_df_cp['H_day'][i] = 1\n    else:\n        cleand_df_cp['H_day'][i] = 0\n\nfor i in range(len(cleand_df_cp[\"Hour\"])):\n    if (cleand_df_cp[\"Hour\"][i] > 18) or (cleand_df_cp[\"Hour\"][i] <= 6):\n        cleand_df_cp[\"Hour\"][i]= 1\n    else :\n        cleand_df_cp[\"Hour\"][i]= 0\n        \n\n","9add05a2":"cleand_df_cp['Hour'].hist(bins =2 , rwidth = 0.5 ,figsize=(10,5) )\nplt.title(\"day_night accident\")\nplt.show()","f62f7c71":"cleand_df_cp['weekday'].hist(bins =7 , rwidth = 0.5 ,figsize=(10,5) )\nplt.title(\"day accident\")\nplt.show()","ebf3d2bd":"\ncleand_df_cp.groupby(['Severity',df_cp['Hour']]).count().plot(kind='barh', figsize=(14,40.8))\nplt.title('When the accedent done')\nplt.show()","3f3ec232":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\nfor i in bool_df1.columns :\n    cleand_df_cp[i]=le.fit_transform(cleand_df_cp[i])\n    \ncleand_df_cp[\"Selected\"]=le.fit_transform(cleand_df_cp[\"Selected\"])\ncleand_df_cp[\"Weather_Condition\"]=le.fit_transform(cleand_df_cp[\"Weather_Condition\"])\ncleand_df_cp[\"Side\"]=le.fit_transform(cleand_df_cp[\"Side\"])\n\ncleand_df_cp = cleand_df_cp.drop([\"description\",\"weekday\",\"Day_x\",\"year\",\"Precipitation(in)\",\"Humidity(%)\"],axis=1)","be10f269":"cleand_df_cp","510fb246":"import pandas as pd\nimport os","431cb914":"from sklearn.model_selection import train_test_split\n\ntrain_df, val_df = train_test_split(cleand_df_cp, test_size=0.2, random_state=42) # Try adding `stratify` here\n\nX_train = train_df.drop(columns=['Severity'])\ny_train = train_df['Severity']\n\nX_val = val_df.drop(columns=['Severity'])\ny_val = val_df['Severity']\n","a8390361":"from sklearn.ensemble import RandomForestClassifier\n\n# Create an instance of the classifier\nclassifier = RandomForestClassifier(max_depth=2, random_state=0)\n\n# Train the classifier\nclassifier = classifier.fit(X_train, y_train)","9bbec0c8":"print(\"The accuracy of the classifier on the validation set is \", (classifier.score(X_val, y_val)))","dc753ffb":"import datetime as dt\n#Convert object to date time\ntest['timestamp']=pd.to_datetime(test['timestamp'])\n\n#Create date column in df dataframe \ntest['date'] = [d.date() for d in test['timestamp']]\ntest['date']=pd.to_datetime(test['date'])\n\nweather_ts = weather.copy()\n\n\ntest[\"year\"]=test.date.dt.year\ntest[\"month\"]=test.date.dt.month\ntest[\"Day\"]=test.date.dt.day\ntest['weekday'] = test[['date']].apply(lambda x: dt.datetime.strftime(x['date'], '%A'), axis=1)\n\n\ndef hr_func(ts):\n    return ts.hour\n\ntest['Hour'] = test['timestamp'].apply(hr_func)\n\n#========================================\nholidays_ts = holidays.copy()\nholidays_ts['date']=  pd.to_datetime(holidays_ts['date'])","eea47d91":"test1 = pd.merge(test,weather_ts,on=['date','Hour'],how = \"left\")\ntest2 = pd.merge(test1,holidays_ts,on=['date'],how = \"left\")","81bbda32":"test2_cp = test2.drop([\"Junction\",\"Year\",\"Month\",\"Day_y\",\"date\",\"ID\",\"Wind_Chill(F)\",\"Bump\",\"Give_Way\",\"No_Exit\",\"Roundabout\",\"timestamp\"],axis=1)\n","2b0ac3e9":"test2_cp.isnull().sum().sort_values(ascending = False).head(10)","f19a287d":"test2_cp['Temperature(F)']= test2_cp['Temperature(F)'].fillna(test2_cp['Temperature(F)'].mean())\ntest2_cp['Visibility(mi)']= test2_cp['Visibility(mi)'].fillna(test2_cp['Visibility(mi)'].mean())\ntest2_cp['Humidity(%)']= test2_cp['Humidity(%)'].fillna(test2_cp['Humidity(%)'].mean())\ntest2_cp['Weather_Condition']= test2_cp['Weather_Condition'].fillna(\"Plarty Cloudy\")\ntest2_cp['Wind_Speed(mph)']= test2_cp['Wind_Speed(mph)'].fillna(test2_cp['Wind_Speed(mph)'].mean())\ntest2_cp['Precipitation(in)']= test2_cp['Precipitation(in)'].fillna(test2_cp['Precipitation(in)'].mean())\ntest2_cp['description']= test2_cp['description'].fillna(0)\ntest2_cp.isnull().sum().sort_values(ascending = False).head(5)\ntest2_cp[\"H_day\"] = test2_cp[\"description\"].copy()","d6fef28a":"bool_d = test2_cp.select_dtypes(include = \"bool\")\n\n\nfor i in range(len(test2_cp[\"description\"])):\n    if test2_cp[\"description\"][i] != 0:\n        test2_cp[\"H_day\"][i]= 1\n        \n\nfor i in range(len(test2_cp['weekday'])):\n    if test2_cp['weekday'][i] == 'Sunday':\n        test2_cp['H_day'][i] = 1\n    elif test2_cp['weekday'][i] == 'Saturday':\n        test2_cp['H_day'][i] = 1\n    else:\n        test2_cp['H_day'][i] = 0\n\nfor i in range(len(test2_cp[\"Hour\"])):\n    if (test2_cp[\"Hour\"][i] > 18) or (test2_cp[\"Hour\"][i] <= 6):\n        test2_cp[\"Hour\"][i]= 1\n    else :\n        test2_cp[\"Hour\"][i]= 0","443258c9":"        \nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\nfor i in bool_d.columns :\n    test2_cp[i]=le.fit_transform(test2_cp[i])\n    \ntest2_cp[\"Selected\"]=le.fit_transform(test2_cp[\"Selected\"])\ntest2_cp[\"Weather_Condition\"]=le.fit_transform(test2_cp[\"Weather_Condition\"])\ntest2_cp[\"Side\"]=le.fit_transform(test2_cp[\"Side\"])\n\ntest2_cp = test2_cp.drop([\"description\",\"weekday\",\"Day_x\",\"year\",\"Precipitation(in)\",\"Humidity(%)\"],axis=1)","4c59793c":"X_test = test2_cp\n\ny_test_predicted = classifier.predict(X_test)\n\ntest2_cp['Severity'] = y_test_predicted\n\ntest2_cp.head()","ff97cc08":"test2_cp[\"ID\"] = test.ID\n\ntest2_cp[['ID', 'Severity']].to_csv('\/kaggle\/working\/submission.csv', index=False)\ntest2_cp\n","4ecf831b":"Now we're ready to generate the submission file. The submission file needs the columns `ID` and `Severity` only.","84ede974":"# Replace null with suitable values","911b64fb":"## Submission File Generation\n\nWe have built a model and we'd like to submit our predictions on the test set! In order to do that, we'll load the test set, predict the class and save the submission file. \n\nFirst, we'll load the data.","251ac6a9":"# Plotting","5887e0b3":"# Convert type of timestamp Column","4852c340":"# Take a look about null data","6f2a649b":"# Encoding categorical datatype to numerical datatype","1bc529c0":"# Encoding categorical datatype to numerical datatype","5ba57a8e":"we will drop ID column later now we noticed that 1- Wind_Chill(F) have lots of nulls (3138).** 2- Bump** all of its data is just false. 3- Give_Way also is just all false except 3 data sets. 4- All other dummy column also as \"No_Exit\",\"Roundabout\",..etc","6d5bf629":"# Merge weather and holidays data with main dataframe","76523398":"# There is no missing values now!","7e3d8cb5":"# Drop dummy column","331cc426":"# Replace null with suitable values","be5c58b5":"Well. That's a good start, right? A classifier that predicts all examples' `Severity` as 2 will get around 0.63. You should get better score as you add more features and do better data preprocessing.","8fa03803":"# Convert boolen datatype to 1 and 0","d378ed99":"Now let's test our classifier on the validation dataset and see the accuracy.","e8b9ed23":"## Conclusion\n\nIn this notebook, we have demonstrated the essential steps that one should do in order to get \"slightly\" familiar with the data and the submission process. We chose not to go into details in each step to keep the welcoming notebook simple and make a room for improvement.\n\nYou're encourged to `Fork` the notebook, edit it, add your insights and use it to create your submission.","50ef8a3f":"# Reading Files","d8a5b232":"# Convert boolen datatype to 1 and 0","d426add8":"Note that the test set has the same features and doesn't have the `Severity` column.\nAt this stage one must **NOT** forget to apply the same processing done on the training set on the features of the test set.\n\nNow we'll add `Severity` column to the test `DataFrame` and add the values of the predicted class to it.\n\n**I'll select the numerical features here as I did in the training set. DO NOT forget to change this step as you change the preprocessing of the training data.**","996f840a":"## Model Training\n\nLet's train a model with the data! We'll train a Random Forest Classifier to demonstrate the process of making submissions. ","b23c039c":"# Drop dummy column","6be8421c":"# Take a look on null data","76982c04":"# Reading Holiday file","aa815c19":"# Merge weather and holidays data with main dataframe","9623b624":"# Import our libraries ","49455755":"## Import the libraries\n\nWe'll use `pandas` to load and manipulate the data. Other libraries will be imported in the relevant sections.","747e8934":"The remaining steps is to submit the generated file and are as follows. \n\n1. Press `Save Version` on the upper right corner of this notebook.\n2. Write a `Version Name` of your choice and choose `Save & Run All (Commit)` then click `Save`.\n3. Wait for the saved notebook to finish running the go to the saved notebook.\n4. Scroll down until you see the output files then select the `submission.csv` file and click `Submit`.\n\nNow your submission will be evaluated and your score will be updated on the leaderboard! CONGRATULATIONS!!","ef6bba4e":"# Convert type of timestamp Column","4d32aafb":"## Data Splitting\n\nNow it's time to split the dataset for the training step. Typically the dataset is split into 3 subsets, namely, the training, validation and test sets. In our case, the test set is already predefined. So we'll split the \"training\" set into training and validation sets with 0.8:0.2 ratio. \n\n*Note: a good way to generate reproducible results is to set the seed to the algorithms that depends on randomization. This is done with the argument `random_state` in the following command* ","ee6e3ad1":"As pointed out eariler, I'll use the numerical features to train the classifier. **However, you shouldn't use the numerical features only to make the final submission if you want to make it to the top of the leaderboard.** "}}