{"cell_type":{"dd4353e8":"code","ca1d7227":"code","64fcb06c":"code","bf6baeef":"code","5a323d64":"code","24af41e2":"code","eda68197":"code","0fbdc84e":"code","93fe1684":"code","ab863e08":"code","3686b5bc":"code","7cc69af2":"code","173987bc":"code","9800a5a9":"code","d691b0e9":"code","cfa4732d":"code","01ab9c40":"code","52e0215f":"code","d1597e94":"code","f2b678e1":"code","b15072b2":"code","b9c857e8":"code","6586ecee":"code","59ade20c":"code","7dff39c2":"code","30746c2d":"code","ffc22d25":"code","23b83715":"code","dab5a152":"code","fd75b48c":"code","2d0aa0f9":"code","7bb68869":"code","8283104e":"code","2b379548":"code","71105573":"code","07676cf2":"code","d2fadda2":"code","57a8e938":"code","5debf5db":"code","76551dc5":"code","a13d5f97":"code","be5b8d6c":"code","159d72aa":"code","2aaf593c":"code","bae68e13":"markdown","22c5eb82":"markdown","9034343e":"markdown","c7ed926a":"markdown","808a8711":"markdown","3160a834":"markdown","3feab067":"markdown","9e544b5a":"markdown","f8b27769":"markdown","5c01de71":"markdown","de14786d":"markdown","c535a096":"markdown","45c44d9a":"markdown","1946f534":"markdown","0ff4fa1f":"markdown","da360f02":"markdown","beb2fb26":"markdown","266e2c98":"markdown"},"source":{"dd4353e8":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom nltk.corpus import stopwords\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud, STOPWORDS\nfrom sklearn.tree import DecisionTreeClassifier\nimport seaborn as sns\nimport gc\nimport re","ca1d7227":"import tensorflow as tf\nfrom tensorflow.keras.layers import GRU, LSTM, Embedding\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras import optimizers\nfrom tensorflow.keras.layers import Activation, Dense, Bidirectional","64fcb06c":"df_poetry=pd.read_csv(\"..\/input\/poetry-analysis-with-machine-learning\/all.csv\", sep=\",\")\ndf_poetry.head()","bf6baeef":"df_poetry.rename(columns={\"poem name\":\"poem_name\"}, inplace=True)","5a323d64":"df_poetry.age.unique()","24af41e2":"df_poetry.type.unique()","eda68197":"df_poetry.author.unique()","0fbdc84e":"def remove_special_chars(text, remove_digits=True):\n    text=re.sub('[^a-zA-Z.\\d\\s]', '',text)\n    return text\ndf_poetry.content=df_poetry.content.apply(remove_special_chars)","93fe1684":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ndf_poetry.age=le.fit_transform(df_poetry.age)\ndf_poetry","ab863e08":"df_poetry.drop(columns=[\"author\", \"poem_name\",\"type\"])","3686b5bc":"from keras.preprocessing.text import Tokenizer\ntokenizer=Tokenizer(num_words=1009)\ntokenizer.fit_on_texts(df_poetry.content)\nsequences=tokenizer.texts_to_sequences(df_poetry.content)\ntokenized=tokenizer.texts_to_matrix(df_poetry.content)\nword_index=tokenizer.word_index\nprint(\"Found %s unique tokens.\"%len(word_index))","7cc69af2":"tokenized","173987bc":"tokenized.shape","9800a5a9":"X=tokenized\nY=df_poetry.age","d691b0e9":"tokenized.shape","cfa4732d":"df_poetry.age.shape","01ab9c40":"X_train, X_test, y_train, y_test =train_test_split(X,Y,test_size=0.2)","52e0215f":"X_train=tf.keras.preprocessing.sequence.pad_sequences(X_train, maxlen=300)\nX_test=tf.keras.preprocessing.sequence.pad_sequences(X_test, maxlen=300)","d1597e94":"tensorboard = tf.keras.callbacks.TensorBoard(log_dir='my_log_dir')","f2b678e1":"max_features=10\ncallback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=20)\nmodel = tf.keras.Sequential([Embedding(input_dim=100, output_dim=128),\n                            LSTM(128,activation='relu', dropout=0.05, return_sequences=True),\n                            LSTM(128, activation=\"relu\",dropout=0.05,recurrent_dropout=0.01, return_sequences=True),\n                            LSTM(64, activation=\"relu\",dropout=0.01,recurrent_dropout=0.01, return_sequences=True),\n                            LSTM(32, activation=\"relu\",dropout=0.01,recurrent_dropout=0.01),\n                            Dense(2, activation=\"relu\"),\n                            Dense(1, activation=\"sigmoid\")])\nopt=tf.keras.optimizers.RMSprop()\nmodel.compile(optimizer=opt, loss=\"binary_crossentropy\", metrics=[\"acc\"])","b15072b2":"model.fit(X_train, y_train.values, epochs=100, batch_size=40, validation_split=0.1, callbacks=[callback, tensorboard])","b9c857e8":"model.evaluate(X_test, y_test)","6586ecee":"df_poetry=pd.read_csv(\"..\/input\/poetry-analysis-with-machine-learning\/all.csv\", sep=\",\")\ndf_poetry.head()","59ade20c":"import plotly.graph_objects as go\nfrom plotly.offline import iplot\nwords = df_poetry['content'].str.split(expand=True).unstack().value_counts()\ndata = [go.Bar(\n            x = words.index.values[2:20],\n            y = words.values[2:20],\n            marker= dict(colorscale='RdBu',\n                         color = words.values[2:40]\n                        ),\n            text='Word counts'\n    )]\n\nlayout = go.Layout(\n    title='Most used words excluding stopwords'\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig, filename='basic-bar')","7dff39c2":"import matplotlib.pyplot as plt\ndef word_cloud(content, title):\n    wc = WordCloud(background_color='white', max_words=200,\n                  stopwords=STOPWORDS, max_font_size=50)\n    wc.generate(\" \".join(content))\n    plt.figure(figsize=(16, 13))\n    plt.title(title, fontsize=20)\n    plt.imshow(wc.recolor(colormap='Pastel2', random_state=42), alpha=0.98)\n    plt.axis('off')","30746c2d":"word_cloud(df_poetry.content, \"Word Cloud\")","ffc22d25":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf_poetry.type=le.fit_transform(df_poetry.type)\ndf_poetry.age=le.fit_transform(df_poetry.age)\ndf_poetry.author=le.fit_transform(df_poetry.author)","23b83715":"corr = df_poetry.corr()\ncorr","dab5a152":"sns.heatmap(corr, \n        xticklabels=corr.columns,\n        yticklabels=corr.columns)","fd75b48c":"sns.catplot(x=\"age\", y=\"author\",hue=\"type\", data=df_poetry);","2d0aa0f9":"y=df_poetry['author']\nx=df_poetry[\"content\"]\nX_train, X_test, y_train, y_test =train_test_split(x,y,test_size=0.33, random_state=50)\nprint(X_train)","7bb68869":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer()\nvectrain = vectorizer.fit_transform(X_train)\nvectest = vectorizer.transform(X_test)","8283104e":"vectest.shape","2b379548":"y_train.shape","71105573":"dtclassifier=DecisionTreeClassifier(criterion=\"entropy\", max_depth=None)\ndtclassifier.fit(vectrain,y_train)\npreddt = dtclassifier.predict(vectest)","07676cf2":"accuracy= accuracy_score(preddt,y_test)\nprint(accuracy)","d2fadda2":"y=df_poetry['age']\nx=df_poetry[\"content\"]\nX_train, X_test, y_train, y_test =train_test_split(x,y,test_size=0.33, random_state=50)","57a8e938":"vectorizer = TfidfVectorizer()\nvectrain = vectorizer.fit_transform(X_train)\nvectest = vectorizer.transform(X_test)","5debf5db":"dtclassifier=DecisionTreeClassifier(criterion=\"entropy\", max_depth=None)\ndtclassifier.fit(vectrain,y_train)\npreddt = dtclassifier.predict(vectest)","76551dc5":"accuracy= accuracy_score(preddt,y_test)\nprint(accuracy)","a13d5f97":"y=df_poetry['author']\nX=df_poetry.loc[:, df_poetry.columns!=\"author\"]\nX_train, X_test, y_train, y_test =train_test_split(x,y,test_size=0.33, random_state=50)","be5b8d6c":"vectorizer = TfidfVectorizer()\nvectrain = vectorizer.fit_transform(X_train)\nvectest = vectorizer.transform(X_test)","159d72aa":"dtclassifier=DecisionTreeClassifier(criterion=\"gini\", max_depth=None)\ndtclassifier.fit(vectrain,y_train)\npreddt = dtclassifier.predict(vectest)","2aaf593c":"accuracy= accuracy_score(preddt,y_test)\nprint(accuracy)","bae68e13":"I expect strong correlation between label encoded features.","22c5eb82":"**Removing special characters from the content column, leaving the spaces for tokenization**","9034343e":"**Most used 20 words**","c7ed926a":"Categorical plot to explain distribution of type and authors of poetry through the ages. It'd be better if the ages were given in years instead of two categories.","808a8711":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer()\nX = vectorizer.fit_transform(df_poetry.content)\n","3160a834":"**Poetry Classification Notebook**","3feab067":"**Creating word cloud from most used 100 words**","9e544b5a":"Importing the list of stopwords, I have gathered the below gist def remove_stopwords from another notebook.","f8b27769":"Trying to predict the age of the poem from the content. Used Count Vectorizer and Decision Tree Classifier with entropy.","5c01de71":"First I'll do exploratory data analysis, then classify the poetries in age, type and author. Let's see the list of authors, types and ages.","de14786d":"Heat map between label encoded features.","c535a096":"Trying to predict the author of the poem from the content. Used Count Vectorizer and Decision Tree Classifier with entropy.","45c44d9a":"Trying to predict authors from rest of the features this time, I don't expect too much of an improvement. Used Tfidf vectorizer and decision tree with gini index as split criterion.","1946f534":"I've came across this dataset as I was looking for renaissance paintings to use in GAN, and seeing there are no kernels on it, I thought I might just dive in. \nThere are five columns, the poetry itself, the type, author, age of it. First I'll do exploratory data analysis and preprocessing, then I'll classify the author and the age of the poetries using decision trees.","0ff4fa1f":"**Importing the dataset**","da360f02":"There are three types of poetry.","beb2fb26":"Let's see the list of authors.","266e2c98":"First I'll separate the dataset for training and test, then I'll vectorize both sets with TFIDF and Count Vectorizer, and then apply decision tree for classification."}}