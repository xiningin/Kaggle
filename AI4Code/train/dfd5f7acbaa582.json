{"cell_type":{"573b92e9":"code","0685517a":"code","07dffefe":"code","2a490a08":"code","4e9c450c":"code","3b2d5f75":"code","7e34478d":"code","a64a6bc3":"code","c60766fb":"code","5fbece3c":"code","d3b5c35f":"code","2c309130":"code","d7c72173":"code","b79a0b66":"code","d05d4c76":"code","ab9bde61":"code","bffa88fc":"code","d6c3a9ef":"code","332fa39e":"code","3d9752b0":"code","1fdb5008":"code","50658202":"code","9ed06748":"code","35dc9d58":"code","20ddf098":"code","9b0c7f3b":"code","dd62479b":"code","70e75180":"code","58306396":"code","47dfede9":"code","20826020":"code","0dcd045c":"code","7f66e1c8":"code","fb566e16":"code","a4441dc6":"code","b574b2ac":"markdown","538d7525":"markdown","91131602":"markdown","af30cb37":"markdown","cf4a8f43":"markdown"},"source":{"573b92e9":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium\nfrom folium import plugins\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","0685517a":"data0 = pd.read_csv(\"..\/input\/sri-lanka-house-prices-dataset\/house_prices.csv\")\ndata0[0:2].T","07dffefe":"# caution!\ndata0['Lat2']=data0['Lon']\ndata0['Lon2']=data0['Lat']","2a490a08":"data0=data0.drop(['Lon','Lat'],axis=1)","4e9c450c":"data0['Price']=data0['Price'].apply(lambda x: int(x.replace('Rs ','').replace(',','')))\ndata0['Price']","3b2d5f75":"fig, ax = plt.subplots(figsize=(12,4)) \nsns.histplot(data0['Price'], label='Price', ax=ax, color='C1',bins=100) \nax.legend() \nax.grid()","7e34478d":"LandSize2=[]\nfor item in data0['Land size']:\n    if ' acres' in item:\n        LandSize2+=[float(item.replace(',','').replace(' acres',''))*160]\n    elif ' perches' in item:\n        LandSize2+=[float(item.replace(',','').replace(' perches',''))]\ndata0['Land size']=LandSize2","a64a6bc3":"fig, ax = plt.subplots(figsize=(12,4)) \nsns.histplot(data0['Land size'], label='Land size', ax=ax, color='C1',bins=100) \nax.legend() \nax.grid()","c60766fb":"HouseSize2=[]\nfor item in data0['House size']:\n    if ' sqft' in item:\n        HouseSize2+=[float(item.replace(',','').replace(' sqft',''))]\ndata0['House size']=HouseSize2","5fbece3c":"fig, ax = plt.subplots(figsize=(12,4)) \nsns.histplot(data0['House size'], label='Price', ax=ax, color='C1',bins=100) \nax.legend() \nax.grid()","d3b5c35f":"data0.columns","2c309130":"data0.info()","d7c72173":"df=data0\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","b79a0b66":"data1=df\ndata1[0:2].T","d05d4c76":"data1.columns","ab9bde61":"target=['Price']\ndatay=data1[target]\ndatax=data1.drop([target[0]],axis=1)","bffa88fc":"print(datay[0:2].T)\nprint()\nprint(datax[0:2].T)","d6c3a9ef":"train=np.array(datax)\ntrainy=np.array(datay)\nprint(train.shape)\nprint(trainy.shape)","332fa39e":"df_columns = list(datax.columns)\nprint(df_columns)","3d9752b0":"train_df=pd.DataFrame(train)\n#test_df=pd.DataFrame(test)","1fdb5008":"train_df.columns=df_columns\n#test_df.columns=df_columns","50658202":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","9ed06748":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","35dc9d58":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","20ddf098":"train_feat_df = to_feature(train_df)\n#test_feat_df = to_feature(test_df)","9b0c7f3b":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","dd62479b":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","70e75180":"y = trainy\nprint(y.shape)\nprint(y[0:3])","58306396":"ydf=pd.DataFrame(y)\nydf","47dfede9":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('oof '+str(i),fontsize=12)\n    ax.set_ylabel('train_y '+str(i),fontsize=12)\n    ax.scatter(oof,y)\n","20826020":"print(target)","0dcd045c":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n    print(order[0:5])\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","7f66e1c8":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n","fb566e16":"data2=data1[data1['Price']>10**8]\ndata2","a4441dc6":"data3=data2[['Lat2','Lon2']]\neq_map = folium.Map(location=[7.2,80.5],tiles='Stamen Terrain',zoom_start=8.0,min_zoom=2.0)\neq_map.add_child(plugins.HeatMap(data3))\neq_map","b574b2ac":"# Target setting","538d7525":"# Visualize Importance","91131602":"### 'House size', 'Land size', 'Location', 'Lat2', 'Address' are the top 5 important factors for 'Price. ","af30cb37":"# Data preparation","cf4a8f43":"# Model"}}