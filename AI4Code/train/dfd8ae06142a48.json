{"cell_type":{"034c8fca":"code","dee19a1f":"code","f355add7":"code","ad7c70a7":"code","59c42210":"code","091cca46":"code","b89d14cd":"code","a0cf96f0":"code","15e6c5bb":"code","27a82bfc":"code","b57e8292":"code","024018cc":"code","aa48ce60":"code","dbe9f4fe":"code","c1dd2a06":"markdown","3be212b2":"markdown","16100dee":"markdown","16e4706a":"markdown","1172abf5":"markdown"},"source":{"034c8fca":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom keras.utils import plot_model\nfrom IPython.display import Image\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","dee19a1f":"X_train = np.array(train.drop('label', axis=1)).reshape(-1,28,28,1)\nX_test = np.array(test).reshape(-1,28,28,1)\ny_train = np.array(pd.get_dummies(train['label']))","f355add7":"X_train=X_train\/255\nX_test=X_test\/255","ad7c70a7":"from keras.models import Sequential, load_model\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, BatchNormalization\n\nmodel=Sequential()\nmodel.add(Conv2D(16, kernel_size=4, input_shape=[28,28,1], activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32, kernel_size=4, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(2))\nmodel.add(Conv2D(64, kernel_size=4, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.1))\nmodel.add(Conv2D(128, kernel_size=4, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Flatten())\nmodel.add(Dense(3200, activation='tanh'))\nmodel.add(BatchNormalization())\nmodel.add(Dense(10, activation='softmax'))\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","59c42210":"history = model.fit(X_train, y_train, epochs=10, validation_split=0.10)","091cca46":"pd.DataFrame({'ImageId': np.arange(1,len(test)+1), 'label': np.argmax(model.predict(X_test), axis=1)}).to_csv('sample_submission.csv', index=False)","b89d14cd":"y_pred = model.predict(X_train)","a0cf96f0":"ypred = np.argmax(y_pred, axis=1)\nytrain = np.argmax(y_train, axis=1)","15e6c5bb":"from sklearn.metrics import confusion_matrix\nimport itertools\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),horizontalalignment=\"center\",color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.tight_layout()","27a82bfc":"cnf_matrix = confusion_matrix(ytrain, ypred)\nnp.set_printoptions(precision=2)\nclass_names = np.arange(0,10)\nplt.figure(figsize=[12,12])\nplot_confusion_matrix(cnf_matrix, classes=class_names,\n                      title='Confusion matrix')\n\nplt.show()","b57e8292":"plt.figure(figsize=[10,5])\nplt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.title(\"Accuracy per epochs\")\nplt.legend(['train accuracy', 'validation accuracy']);","024018cc":"plt.figure(figsize=[10,5])\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title(\"Loss per epochs\")\nplt.legend(['train loss', 'validation loss']);","aa48ce60":"plot_model(model, to_file='model.png', show_shapes=True, show_layer_names=True)","dbe9f4fe":"Image('model.png')","c1dd2a06":"# Visualizing the results","3be212b2":"# Data preprocessing","16100dee":"# Model architecture","16e4706a":"## Saving results on csv file","1172abf5":"# Model training"}}