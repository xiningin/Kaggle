{"cell_type":{"1750d321":"code","71bfef83":"code","dd225e55":"code","241da442":"code","e31c6aa0":"code","a8f02f9e":"code","ba68e98e":"code","9b180917":"code","ba357fd5":"code","e15677ea":"code","88d4d333":"code","9e898bbe":"code","029524c5":"code","47e1d889":"code","25a6c76e":"code","6527040e":"code","ecb41fe8":"code","2781969f":"code","cb4cafc9":"code","1c6e5d2e":"code","34c15875":"code","39f430ff":"code","ac59dd76":"code","2e27fc51":"code","53a1db89":"code","e1ef230d":"code","7a4a5743":"code","1cd10279":"code","f9eb9a8a":"code","f9810b7c":"code","268a0879":"code","6d1563b6":"code","26631d87":"code","57ab5b22":"code","f333a918":"code","e7636722":"code","4ffa98b0":"code","a7bcba3d":"code","b7ff54c4":"code","1f34e9a8":"code","d5d0de8e":"code","6df13055":"code","a4ae7e70":"code","981a44bf":"code","626c4c6e":"code","e0231df4":"code","98fe2222":"code","140dd419":"code","51e809cd":"code","eb1f7f7c":"code","552a697e":"code","093fe96e":"code","cf2099b1":"code","c21a0b97":"code","7ac2385d":"code","d28be869":"code","6a6bc066":"code","7a557ef9":"markdown"},"source":{"1750d321":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","71bfef83":"#Pandas has most of our functionalities..including loading as a\n# dataframe object, as well as removing na, finding description of data\nimport pandas as pd","dd225e55":"#Reads the loan file and stores everything loaded into a variable named data\n# Henceforth, we can perform all operations on the variable named data\n#Thus you should always put the loaded data into a variable\n\n#It isnt necessary to name the variable data, I have used that name\n#because it is the most sensible name for this variable\n\ndata = pd.read_csv(\"..\/input\/train.csv\")","241da442":"#This file was with the data, it has description of all the columns\n#In normal hackathons, you might or might not get a meta data file\n\n#Metadata is simply explaination about the given data\nmetadata = pd.read_excel(\"..\/input\/LCDataDictionary.xlsx\")","e31c6aa0":"#We visually inspect the first and last 10 rows\ndata.head(10)","a8f02f9e":"data.tail(10)","ba68e98e":"#Visual inspections show last few columns had null values..how about\n#we check the entire table for nulls? We do that using the function\n#info()\n#to get info of the table, the syntax is variablename.info()\n#In our case that will be data.info()","9b180917":"data.info()\n","ba357fd5":"#We see that there are several null values! We also see the several data\n#types that are present in the data\n\"\"\"\nThis is in pg 119 of the python book I forwarded\n\"\"\"\n##Keep in mind that we need to eliminate the nulls and handle the\n##categorical values before we build a model\/train it","e15677ea":"#Whats the number of rows and columns??\ndata.shape","88d4d333":"#Do not forget, shape is an attribute of data..\n\"\"\"\nExplanation of Class and Object for everyone that missed it\n\"\"\"\n\n#Consider the IPL example:\n\n#IPL wants to keep data of all the players. To do that, they \n#create a template of how the data will be stored..\n\n# If it was for Sachin\n##IPL necessarily needs to store data of each player's matchwise\n##performance too! That can be a table with columns like\n##date of match, location, time, team in which sachin played, against whom,\n## etc.\n## These will have several rows storing each match's data\n\n##few values for Sachin like (age, height, weight, year of starting, DOB)\n##are constant for sachin. \n##These do not need to be stored in the table.\n##These are the attributes and can be stored seperately in this template\n##Thus the template has a table and several values like dob, age, etc\n##to get attributes, you just type variablename.NameOfAttribute\n##thus sachin.age can store his age, sachin.height can store his height etc\n##A sensible template would also handle operations like, if IPL wants\n##sachin's strike rate; I would expect the code to PROCESS the entire \n##match data and give me a result (note that I want a process to be run\n##on the data). To get that, the template should also have few inbuilt\n##function for the same. Thus sachin.strikeRate() should give me the\n##strikerate (notice that process to be done on data is a function\n## and is associated with round bracket -> ())\n\n#IPL can use this template for every other player they have! \n\n#The template is called a class. A class has attributes and functions \n#associated with it. When you use the template for a specific\n#instance, it is called an object. \n#Thus as the above example is of variable named sachin, sachin is the\n#object of the IPL template\n\n\n\n\n\n\n","9e898bbe":"#Statistical data of our table\ndata.describe()","029524c5":"##when someone is filling out your survey, they arent always so sweet to\n##fill all the fields. They will skip optional fields.\n##In python, all blank fields will be filled by Null\/nan\/na\n","47e1d889":"#Trying out different configurations for dropna\n#dropna is useful to drop null values\n#This drops all rows which have even 1 occurance of null\nnew_data = data.dropna()","25a6c76e":"#We see how many rows are left!!\nnew_data.shape\n","6527040e":"#NO ROWS LEFT!! Cant dropna on rows..but how about columns?","ecb41fe8":"new_data_2 = data.dropna(axis = 1)","2781969f":"#This is good..we get 34 columns\nnew_data_2.shape","cb4cafc9":"#How do you get number of null values for each column??\n\n#One way is using the function isnull(), \n# it returns a table with true false. true value measn the cell was null\n\n#when we write isnull().sum(), it gives us columnwise sum of the true-false table\n#derived from isnull function\nnew_data_2.isnull().sum()","1c6e5d2e":"#Percentage of null values\npctg = (data.isnull().sum()\/data.shape[0])*100","34c15875":"#Sorting values!\npctg.sort_values(ascending =  False)","39f430ff":"92*887379\/100","ac59dd76":"#Dropping columns with less than 92% data absent by using thresh parameter\nnew_data = data.dropna(axis = 1,thresh= data.shape[0]*92\/100)","2e27fc51":"#These for and if statements eleminate the null values\n#in Categorical columns nulls are replaced by mode\n#in numerical columns, nulls are replaced by mean","53a1db89":"for col_name in new_data.columns:\n    if new_data[col_name].dtype == \"object\":\n        mode_var = new_data[col_name].mode()[0]\n        new_data[col_name].fillna(mode_var,inplace = True)\n    else:\n        mean_var = new_data[col_name].mean()\n        new_data[col_name].fillna(mean_var,inplace = True)","e1ef230d":"#Confirming if our nulls are deleted\nnew_data.isnull().sum()","7a4a5743":"#We havent converted all categorical to numerical!!\n\n#Wha are the different ways of doing it??\n\n\n\"\"\"\n0. Replace\n1. One hot encoding\n2. LabelEncoder\n    2.1 categorical to codes\n    2.2 sklearn's encoder\n\"\"\"","1cd10279":"#What is our X and Y?\n#Y is loan_status!\n\nnew_data[\"loan_status\"].unique()\n\n#How to find the count of each class?? Is it imbalenced??","f9eb9a8a":"new_data[\"loan_status\"].value_counts()","f9810b7c":"#Imbalenced!! And I see repeatred words charged off and fully paid.. \n#lets merge them with 'does not meet.....\"\"","268a0879":"new_data = new_data[new_data[\"loan_status\"] != \"Current\"]","6d1563b6":"new_data = new_data[new_data[\"loan_status\"] != \"Issued\"]","26631d87":"\"\"\"Fully Paid\nCharged Off\nLate (31-120 days)\nIn Grace Period\nLate (16-30 days)\nDoes not meet the credit policy. Status:Fully Paid\nDefault\nDoes not meet the credit policy. Status:Charged Off\"\"\".split(\"\\n\")","57ab5b22":"def converts(x):\n    values = \"\"\"Fully Paid\nCharged Off\nLate (31-120 days)\nIn Grace Period\nLate (16-30 days)\nDoes not meet the credit policy. Status:Fully Paid\nDefault\nDoes not meet the credit policy. Status:Charged Off\"\"\".split(\"\\n\")\n    is_it_positive = [1,0,0,0,0,1,0,0]\n    for this_string,ret_value in zip(values,is_it_positive):\n        if x == this_string:\n            return ret_value\n\nnew_data[\"loan_status\"] = new_data[\"loan_status\"].apply(converts)","f333a918":"#Google what is charged off, current and fully paid","e7636722":"new_data[\"term\"]","4ffa98b0":"from sklearn.preprocessing import LabelEncoder\n\nenc = LabelEncoder()\n\nenc.fit(new_data[\"term\"])","a7bcba3d":"new_data[\"term\"] = enc.transform(new_data[\"term\"])","b7ff54c4":"#count by function, count by indexing, count by aggregation\/groupby","1f34e9a8":"new_data[\"loan_status\"]","d5d0de8e":"class_marks = [1,2,3,4,5,6,7,8,9,10,1,1,1,2,34,4,5,6,78,32,64,3,4,6,7,11]\n\n\nfor mark in class_marks:\n    if mark < 30:\n        print(\"Fail\")\n    else:\n        print(\"Pass\")\n    ","6df13055":"co = \"addr_state\"\ndata[co].dtype == \"object\"","a4ae7e70":"from sklearn.preprocessing import LabelEncoder\n\nfor co_name in new_data.columns:\n    if new_data[co_name].dtype == \"object\":\n        template = LabelEncoder()\n        template.fit(new_data[co_name])\n        new_data[co_name] = template.transform(new_data[co_name])\n\nnew_data.head(10)\n        ","981a44bf":"from sklearn.model_selection import train_test_split\n\ny = new_data[\"loan_status\"]\nx = new_data.drop(labels = \"loan_status\", axis = 1)","626c4c6e":"X_train, X_test, y_train, y_test = train_test_split(x,y, random_state=23)","e0231df4":"X_train","98fe2222":"from sklearn.ensemble import RandomForestClassifier\n\nrftemplate = RandomForestClassifier()\nrftemplate.fit(x,y)\n\n","140dd419":"rftemplate.score(x,y)","51e809cd":"%matplotlib notebook\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\n\nplt.figure()\nsns.distplot(new_data[\"loan_amnt\"])\n\nplt.figure()\nplt.hist(new_data[\"loan_amnt\"],bins = 100)\n\n","eb1f7f7c":"new_data.columns","552a697e":"plt.figure()\nnew_data[\"installment\"].plot(kind = \"hist\")","093fe96e":"sns.countplot(data[\"title\"])","cf2099b1":"%matplotlib notebook\n\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\nimport pandas as pd\n\n\n","c21a0b97":"#create a new canvas\nplt.figure()\n\n#plot scatterplot..x axis is loan amount, y  is annual income\ncanv_scatter = sns.scatterplot(x = \"loan_amnt\",y = \"annual_inc\", data = new_data)\ncanv_scatter.set_title(\"Loan Amount vs Income\")\n","7ac2385d":"sns.scatterplot(x = \"loan_amnt\",y = \"annual_inc\", data = new_data, hue = \"loan_status\")","d28be869":"new_data[\"loan_status\"].value_counts()","6a6bc066":"canv1 = sns.FacetGrid(data = new_data,row = \"term\", col= \"loan_status\")\ncanv1.map(plt.hist,\"loan_amnt\")","7a557ef9":"#https:\/\/s3.amazonaws.com\/assets.datacamp.com\/blog_assets\/Python_Matplotlib_Cheat_Sheet.pdf\n#https:\/\/s3.amazonaws.com\/assets.datacamp.com\/blog_assets\/Python_Seaborn_Cheat_Sheet.pdf"}}