{"cell_type":{"959c34c2":"code","ce1a9521":"code","11789aba":"code","7b515f19":"code","3cfd7002":"code","5c466ebe":"code","2e9ff1eb":"code","0cf7f9f2":"code","96fae340":"code","b0bd65c8":"code","d6527888":"code","83d56752":"code","cbbc9a5d":"code","ea44ad5b":"code","bc94f4ae":"code","d67d0679":"code","b7adea87":"code","94b9e4be":"code","eb28cee8":"code","454b16fd":"code","9285fe82":"code","c4b759ad":"code","c13693fa":"code","fd76c375":"code","243afe38":"code","ca837ab4":"code","65229a24":"code","e5567e35":"code","c2f41996":"code","8ba60c2b":"code","56162a4f":"code","fa45563a":"code","cc05d065":"code","4f916776":"code","4228b1ae":"code","511d2f6e":"code","b1ac7c49":"code","55701778":"code","adfa3608":"code","86e39cbf":"code","95a3b9da":"code","ba2dafb0":"code","7814505e":"code","19874446":"code","2bd2278a":"code","19430745":"code","ff1ed9fb":"code","5a868457":"code","12eed089":"code","5105695c":"code","a4168bde":"code","a800d7c7":"code","daa3e1f5":"code","6009b5c7":"code","7af1f735":"code","2dd8d577":"code","1f660ed8":"code","99f04e98":"code","d6d45515":"code","9505a950":"code","2ca9fbc5":"code","efd290cc":"code","7f87770c":"code","60dbbd8d":"code","f297994e":"code","a34c1486":"code","72026126":"code","33894d2e":"code","221112dd":"code","406716c4":"code","684b9b97":"code","9fdc4723":"code","34d220d4":"code","6a3250e1":"code","c78b00af":"code","15c96464":"code","3476a427":"code","674718ca":"code","af728645":"code","2c02f985":"code","48c28b74":"code","899e975b":"code","22790989":"code","1f4626e1":"code","e9bcd68e":"code","39f3fdae":"code","6a081bb0":"code","14fd28df":"code","bfc2a37d":"code","c36ac70c":"code","482a4614":"code","2d1d417d":"code","95f43587":"code","d80bbc53":"code","dbb4412a":"code","57a0a758":"code","5a5b589b":"code","257fe795":"code","63582f1d":"code","0a8790f7":"code","5808bdc2":"code","f5b920bb":"code","24d7e2e1":"code","abb17592":"code","6719be0e":"code","82401d2f":"code","b850079b":"code","3a405a49":"code","789b1e2d":"code","fc0166e9":"code","6053bc49":"code","40ab8acb":"markdown","522113c3":"markdown","4b03c9cc":"markdown","7bcda5a8":"markdown","ee7a8891":"markdown","474616c9":"markdown","58d4eb1e":"markdown","742b8f5d":"markdown","366ffe58":"markdown","11302031":"markdown","a174e4b5":"markdown","a7e134d6":"markdown","caa79fb4":"markdown","d0700294":"markdown","555cbf38":"markdown","383370ac":"markdown","8c7ff03b":"markdown","37c7ae78":"markdown","b1f5bd53":"markdown","ca46f901":"markdown","2f362350":"markdown","924c1e0d":"markdown","8891691f":"markdown","4eb381a9":"markdown","72122b9d":"markdown","97094c27":"markdown"},"source":{"959c34c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce1a9521":"import seaborn as sns\nimport matplotlib.pyplot as plt","11789aba":"cars_data = pd.read_csv(r'\/kaggle\/input\/used-cars-database\/autos.csv', encoding='ISO-8859-1')","7b515f19":"cars_data.head(5)","3cfd7002":"cars_data.shape","5c466ebe":"## Create copy of dataframe for data manipulation\ncars_copy=cars_data.copy()","2e9ff1eb":"cars_copy.info()","0cf7f9f2":"cars_copy.describe()","96fae340":"## To display maximum set of columns\npd.set_option('display.max_columns', 500)\ncars_copy.describe()","b0bd65c8":"## Dropping unnecessary columns from dataframe\ncol=['name','dateCrawled','dateCreated','postalCode','lastSeen','nrOfPictures']\ncars_copy = cars_copy.drop(columns=col, axis=1)\ncars_copy.shape","d6527888":"## Remove duplicate records\ncars_copy.drop_duplicates(keep='first', inplace=True)\ncars_copy.shape","83d56752":"## Find total null values in each column\ncars_copy.isnull().sum()","cbbc9a5d":"## Variable year of registration\nyearwise_count=cars_copy['yearOfRegistration'].value_counts().sort_index()\nsum(cars_copy['yearOfRegistration'] >2020)\nsum(cars_copy['yearOfRegistration'] >1950)\nsns.regplot(x='yearOfRegistration', y='price', scatter=True, fit_reg=False, data=cars_copy)\n## Working range 1950 and 2020","ea44ad5b":"## No. of cars having year of registration is greater than 2020 thats why above graph is unclear due to higher value\nyearwise_count=cars_copy['yearOfRegistration'].value_counts().sort_index()\nsum(cars_copy['yearOfRegistration'] >2020)","bc94f4ae":"## No. of cars having year of registration is lesser than 1950\nyearwise_count=cars_copy['yearOfRegistration'].value_counts().sort_index()\nsum(cars_copy['yearOfRegistration'] <1950)","d67d0679":"## Now work on variable price for cleaning\nprice_count=cars_copy['price'].value_counts().sort_index()\nprice_count","b7adea87":"## Now working range is 100 to 150000\nsns.distplot(cars_copy['price'])\ncars_copy['price'].describe()","94b9e4be":"## check how many cars price is out of our range i.e 100 to 150000\nsns.boxplot(y=cars_copy['price'])\nsum(cars_copy['price'] >150000)\nsum(cars_copy['price'] <100)\n## The box plot is unclear coz of extreme values in data which is highly extreme","eb28cee8":"## Next variable is powerPS\npower_count =cars_copy['powerPS'].value_counts().sort_index()\npower_count","454b16fd":"sns.distplot(cars_copy['powerPS'])","9285fe82":"## Above distplot is unclear and irregular due to unconsistent value in column\ncars_copy['powerPS'].describe()","c4b759ad":"## Boxplot is unclear and irregular due to unconsistent value in column\nsns.boxplot(y=cars_copy['powerPS'])","c13693fa":"sns.regplot(x='powerPS', y='price', scatter=True, fit_reg=False, data=cars_copy)","fd76c375":"## Now set range of powerPS in column i.e 10 to 500 and check how many values are out of range\nsum(cars_copy['powerPS'] >500)\nsum(cars_copy['powerPS'] <100)","243afe38":"## Set range of coluun values of dataframe for further processing \ncars_copy = cars_copy[\n    (cars_copy.yearOfRegistration <=2020)\n   & (cars_copy.yearOfRegistration >=1950)\n   & (cars_copy.price >=100)\n    & (cars_copy.price <= 150000)\n    & (cars_copy.powerPS >= 10)\n    & (cars_copy.powerPS <=500)\n     ]\ncars_copy.shape ##Sure we loose some data which is out of range","ca837ab4":"## Further simplication to reduce number of variables\n## Combining year of registration and month of registration \n\ncars_copy['monthOfRegistration']\/=12","65229a24":"## Creating new variable Age by adding yearOfRegistration and monthOfRegistration\ncars_copy['Age'] = (2020-cars_copy['yearOfRegistration']) + cars_copy['monthOfRegistration']\ncars_copy['Age'] = round(cars_copy['Age'],2)\ncars_copy['Age'].describe()","e5567e35":"## Now, drop column yearofregistration and monthofregistration from df\ncars_copy.drop(columns=['yearOfRegistration', 'monthOfRegistration'], axis =1, inplace=True)\ncars_copy.shape","c2f41996":"sns.distplot(cars_copy['Age'])\nplt.title(\"Age Frequency of cars\")\nplt.show()","8ba60c2b":"## boxpllot of Age of an car it shows min, max and outliners or extreme age value of an car\nsns.boxplot(y =cars_copy['Age'])\nplt.show()","56162a4f":"sns.distplot(cars_copy['price'])\nplt.show()\nsns.boxplot(y= cars_copy['price'])\nplt.show","fa45563a":"## PowerPS plot representation\nsns.distplot(cars_copy['powerPS'])\nplt.show()\nsns.boxplot(y =cars_copy['powerPS'])","cc05d065":"## Visualizing parameters after narrowing working range \nsns.regplot(x='Age', y='price', scatter =True, data=cars_copy)","4f916776":"sns.regplot(x='powerPS', y='price', scatter=True, data=cars_copy, fit_reg=True)","4228b1ae":"## Check individual frequency count of an category under categorical variables \n## Variable seller'\ncars_copy['seller'].value_counts()","511d2f6e":"pd.crosstab(cars_copy['seller'], columns ='count', normalize=True) ## FInd marginal probability","b1ac7c49":"sns.countplot(x='seller', data=cars_copy)","55701778":"## Variable offerType\ncars_copy['offerType'].value_counts()","adfa3608":"sns.countplot(x='offerType', data=cars_copy)","86e39cbf":"## VAriable abtest\ncars_copy['abtest'].value_counts()","95a3b9da":"sns.countplot(x='abtest', data=cars_copy)","ba2dafb0":"pd.crosstab(cars_copy['abtest'], columns='count', normalize=True)","7814505e":"## Equally distributed\nsns.boxplot(x= 'abtest', y='price', data=cars_copy)","19874446":"## Variable Vehicletype\ncars_copy['vehicleType'].value_counts()","2bd2278a":"pd.crosstab(cars_copy['vehicleType'], columns ='count', normalize=True)","19430745":"## Which type of car are in higher number\nsns.countplot(x='vehicleType', data=cars_copy)\nplt.xticks(rotation='vertical')\nplt.show()","ff1ed9fb":"## Show box plot of an car of different type\nsns.boxplot(x= 'vehicleType',y='price', data=cars_copy)","5a868457":"## Vehicle gearbox\ncars_copy['gearbox'].value_counts()","12eed089":"pd.crosstab(cars_copy['gearbox'], columns='count', normalize=True)","5105695c":"sns.countplot(x='gearbox', data=cars_copy)","a4168bde":"## Find impact of different gearbox in price of a car\nsns.boxplot(x='gearbox', y='price', data=cars_copy)","a800d7c7":"## Variable model\ncars_copy['model'].value_counts() >10000","daa3e1f5":"## Totally irrelevant to analyse because of large no. of category of car models\nsns.boxplot(x='model', y='price', data=cars_copy)","6009b5c7":"## Variable kilometer\ncars_copy['kilometer'].value_counts()","7af1f735":"pd.crosstab(cars_copy['kilometer'], columns='count', normalize=True)","2dd8d577":"sns.boxplot(x='kilometer', y='price', data=cars_copy)\nplt.xticks(rotation='vertical')\nplt.show()","1f660ed8":"## Variable Fueltype\ncars_copy['fuelType'].value_counts()","99f04e98":"pd.crosstab(cars_copy['fuelType'], columns='count', normalize=True)","d6d45515":"sns.boxplot(x='fuelType', y='price', data=cars_copy)","9505a950":"## VAriable Brand\ncars_copy.brand.value_counts()","2ca9fbc5":"sns.boxplot(x='brand', y= 'price', data=cars_copy)\nplt.xticks(rotation='vertical')\nplt.show()","efd290cc":"## Variable notRepairDamage\n## yes - car is damaged but not rectified\n## no - car is damaged but has been rectified\ncars_copy.notRepairedDamage.value_counts()","7f87770c":"pd.crosstab(cars_copy['notRepairedDamage'], columns='count', normalize=True)","60dbbd8d":"sns.boxplot(x= 'notRepairedDamage', y='price', data=cars_copy)","f297994e":"## Recovering insignificant variables\ncol_insig =['abtest','seller','offerType']\ncars_copy =cars_copy.drop(columns=col_insig, axis=1)\ncars_copy2 = cars_copy.copy()","a34c1486":"## Correlation between numeric data type variable only\ncars_select1 =cars_copy.select_dtypes(exclude='object')","72026126":"correlation =cars_select1.corr()\nround(correlation,3)","33894d2e":"## PLot heatmap of correlation matrix\nsns.heatmap(correlation,  cmap=\"YlGnBu\")","221112dd":"## .loc function based on price and return only 1st column and taking absolute value and sorting in ascending order\ncars_select1.corr().loc[:,'price'].abs().sort_values(ascending=False)[1:]","406716c4":"cars_omit = cars_copy.dropna(axis=0)","684b9b97":"## After drop missing rows we check shape of data\ncars_omit.shape","9fdc4723":"## Converting categorical variables to dummy variables\ncars_omit=pd.get_dummies(cars_omit, drop_first=True)","34d220d4":"## After adding dummy values the columns will be increase coz each category is now shown in either 0 or 1 and there are large number of categories in categorical varaible\ncars_omit.shape","6a3250e1":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error","c78b00af":"## Separating input and output features\nx1 = cars_omit.drop(['price'], axis='columns', inplace=False)\ny1 = cars_omit['price']","15c96464":"## Plotting the variable price and log of price\nprices =pd.DataFrame({\"1. Before\":y1, \"2. After\":np.log(y1)})\nprices.hist()\nplt.show()","3476a427":"## Transform price as a logarithmic value\ny1 =np.log(y1)","674718ca":"## splitting data into test and train to fit model & predict\n## Train set contains 70% data because test_size =0.3 and random state is a predefined algorithm its called pseudo random  number generator \nx_train, x_test, y_train, y_test = train_test_split(x1, y1, test_size=0.3, random_state = 3)\nprint(x_train.shape, x_test.shape, y_train.shape, y_test.shape)","af728645":"## Finding the mean for test data value\nbase_pred =np.mean(y_test)\nprint(base_pred)","2c02f985":"## Representing some value till length of test data\nbase_pred = np.repeat(base_pred, len(y_test))","48c28b74":"## FInding the RMSE(Root Mean Squared Error)\n## RMSE computes the difference between the test value and the predicted value and squared them and divides them by number of samples.\n\nbase_root_mean_square_error = np.sqrt(mean_squared_error(y_test, base_pred))\nprint(base_root_mean_square_error)","899e975b":"## Setting intercept as true\nlgr = LinearRegression(fit_intercept =True)","22790989":"## MODEL\nmodel_lin1 = lgr.fit(x_train, y_train)","1f4626e1":"## Predicting model on test set\ncars_predictions_lin1 = lgr.predict(x_test)","e9bcd68e":"## Computing MSE and RMSE\nlin_mse1 = mean_squared_error(y_test, cars_predictions_lin1)\nlin_rmse1 = np.sqrt(lin_mse1)\nprint(lin_rmse1)","39f3fdae":"## R squared value\nr2_lin_test1 = model_lin1.score(x_test, y_test)\nr2_lin_train1 = model_lin1.score(x_train, y_train)\nprint(r2_lin_test1, r2_lin_train1)","6a081bb0":"## Regression diagnostics :- Resident plot analysis\n## It is differnce test data and your prediction. It is just difference between actual & predicted value.\nresiduals1 = y_test - cars_predictions_lin1\nsns.regplot(x = cars_predictions_lin1, y=residuals1, scatter=True, fit_reg=False, data=cars_copy)\nresiduals1.describe()","14fd28df":"## MODEL PARAMETERS\nrf = RandomForestRegressor(n_estimators = 100, max_features='auto', max_depth=100, min_samples_split=10, min_samples_leaf=4, random_state=1)","bfc2a37d":"## MODEL\nmodel_rf1 =rf.fit(x_train, y_train)","c36ac70c":"## Predicting model on test set\ncars_predictions_rf1 = rf.predict(x_test)","482a4614":"## Computing MSE and RSME\nrf_mse1 = mean_squared_error(y_test, cars_predictions_rf1)\nrf_rmse1 = np.sqrt(rf_mse1)\nprint(rf_rmse1)","2d1d417d":"## R Squared value\nr2_rf_test1 = model_rf1.score(x_test, y_test)\nr2_rf_train1 = model_rf1.score(x_train, y_train)\nprint(r2_rf_test1, r2_rf_train1)","95f43587":"## Fillna will fill missing value with median in float data type variable and otherwise it will fill the cell with most frequent value\n\ncars_inputed = cars_copy.apply(lambda x:x.fillna(x.median()) if x.dtype=='float' else x.fillna(x.value_counts().index[0]))\ncars_inputed.isnull().sum()","d80bbc53":"## Converting categorical variables to dummy variables\n\ncars_inputed = pd.get_dummies(cars_inputed, drop_first = True)","dbb4412a":"## MODEL BUILDING\n\n## Separating input and output feature\nx2 = cars_inputed.drop(['price'], axis='columns', inplace=False)\ny2 = cars_inputed['price']","57a0a758":"## Ploting the variable price\nprices2 = pd.DataFrame({\"1. Before\":y2, \"2. After\": np.log(y2)})","5a5b589b":"## Transforming price as a logarithmic value\ny2 = np.log(y2)","257fe795":"## splitting data into test and train to fit model & predict\n## Train set contains 70% data because test_size =0.3 and random state is a predefined algorithm its called pseudo random  number generator \n\nx_train1, x_test1, y_train1, y_test1 = train_test_split(x2, y2, test_size=0.3, random_state = 3)\nprint(x_train1.shape, x_test1.shape, y_train1.shape, y_test1.shape)","63582f1d":"## Find the mean for test data\nbase_pred2 = np.mean(y_test1)\nprint(base_pred2)","0a8790f7":"## Representing some value till length of test data\nbase_pred2 = np.repeat(base_pred2, len(y_test1))","5808bdc2":"## FInding the RMSE(Root Mean Squared Error)\n## RMSE computes the difference between the test value and the predicted value and squared them and divides them by number of samples.\n\nbase_root_mean_square_error_inputed = np.sqrt(mean_squared_error(y_test1, base_pred2))\nprint(base_root_mean_square_error_inputed)","f5b920bb":"## Setting intercept as true\nlgr2 = LinearRegression(fit_intercept =True)","24d7e2e1":"## MODEL\nmodel_lin2 = lgr2.fit(x_train1, y_train1)","abb17592":"## Predicting model on test set\ncars_predictions_lin2 = lgr2.predict(x_test1)","6719be0e":"## Computing MSE and RMSE\nlin_mse2 = mean_squared_error(y_test1, cars_predictions_lin2)\nlin_rmse2 = np.sqrt(lin_mse2)\nprint(lin_rmse2)","82401d2f":"## R squared value\nr2_lin_test2 = model_lin2.score(x_test1, y_test1)\nr2_lin_train2 = model_lin2.score(x_train1, y_train1)\nprint(r2_lin_test2, r2_lin_train2)","b850079b":"## MODEL PARAMETERS\nrf2 = RandomForestRegressor(n_estimators = 100, max_features='auto', max_depth=100, min_samples_split=10, min_samples_leaf=4, random_state=1)","3a405a49":"## MODEL\nmodel_rf2 =rf2.fit(x_train1, y_train1)","789b1e2d":"## Predicting model on test set\ncars_predictions_rf2 = rf2.predict(x_test1)","fc0166e9":"## Computing MSE and RSME\nrf_mse2 = mean_squared_error(y_test1, cars_predictions_rf2)\nrf_rmse2 = np.sqrt(rf_mse2)\nprint(rf_rmse2)","6053bc49":"## R Squared value\nr2_rf_test2 = model_rf2.score(x_test1, y_test1)\nr2_rf_train2 = model_rf2.score(x_train1, y_train1)\nprint(r2_rf_test2, r2_rf_train2)","40ab8acb":"#### The plot of price of cars is now better than previous but still there are extreme values","522113c3":"### OMITTING MISSING VALUES","4b03c9cc":"##### Increase in kilometer of car decrease in price but there is some exception i.e kilometer variable impacts price of cars. The car travelled more so the price value also reduces.","7bcda5a8":"##### The plot between car age and price shows negative correlation i.e price of car is reducing as age increasing but there are few cars also whose price does not reduce because they were vintage cars.","ee7a8891":"## MODEL BULDING WITH INPUTED DATA","474616c9":"#### Above shows both vategorical variable are insignificant for our analysis. ","58d4eb1e":"#### Distlplot of variable 'age'","742b8f5d":"### MODEL BUILDING WITH OMITTED DATA","366ffe58":"### BASELINE MODEL FOR INPUTTED DATA","11302031":"### RANDOM FOREST WITH INPUTED DATA","a174e4b5":"### Find Correlation matrix between numeric variables and plot for better understanding.","a7e134d6":"### Importing necessary libraries for model development","caa79fb4":"# Visualization","d0700294":"#### Above analysis shows our predicted and actual value are very closer.","555cbf38":"## LINEAR REGRESSION WITH OMITTED DATA","383370ac":"### LINEAR REGRESSION WITH INPUTTED DATA","8c7ff03b":"#### Distplot and boxplot of Price of car","37c7ae78":"### BASELINE MODEL FOR OMITTED DATA\n\nWE are making a base model by using test data mean value. This is to set a benchmark and to compare with our regression model.","b1f5bd53":"# Data Cleaning","ca46f901":"# Model Development :- Prediction\n\n### Now, build a Linear Regression and Random Forest Model on two set of data.\n\nData obtained by omitting rows with any missing values.\n\nData obtained by inputing the missing values.","2f362350":"### RANDOM FOREST with Omitted Data","924c1e0d":"##### The powerPS graph representation is more clear to understand and visualize than previously.","8891691f":"##### Above plot shows equally distributed graph between price and abtest that shows it is in-significant variable. Equally distributed category did not contribute so much to our analysis so they are mostly in-significant.","4eb381a9":"### Manipulation of Numeric variable","72122b9d":"##### The higher the powerPs the price of cars also getting higher","97094c27":"## Set working range of data"}}