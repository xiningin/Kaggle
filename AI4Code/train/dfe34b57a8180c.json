{"cell_type":{"a90a2c95":"code","63e92555":"code","9def96ab":"code","f5d9207c":"code","43b5dc52":"code","aa2ac225":"code","8d7687e0":"code","39255fea":"code","6c328e65":"code","80cac44c":"code","9176e4f2":"code","14620cd3":"code","90fe7665":"code","432cca8d":"code","90a4a129":"code","23d4ef9c":"code","231e49a1":"code","f1d589ac":"code","d36be201":"code","43d7bd17":"code","f0248ed8":"code","018185b6":"code","2ffaee77":"code","69b0c5b9":"code","326d5f45":"markdown","d305c6b5":"markdown","4ac715da":"markdown","818d029b":"markdown"},"source":{"a90a2c95":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\nfrom scipy.cluster.hierarchy import linkage, dendrogram, cut_tree\nfrom sklearn.preprocessing import StandardScaler\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","63e92555":"iris = pd.read_csv(\"..\/input\/iris-flower-dataset\/IRIS.csv\")","9def96ab":"iris.head()","f5d9207c":"iris.shape","43b5dc52":"iris.info()","aa2ac225":"iris.describe()","8d7687e0":"iris.species.unique()","39255fea":"print(\" The number of coulumns in given dataset is: \",iris.shape[1])\nprint(\"The target variable is Species:\", iris.species.unique())","6c328e65":"iris.isnull().sum()","80cac44c":"df = iris[['sepal_length','sepal_width','petal_length','petal_width']]\ndf","9176e4f2":"# finding outliers if any\ncols = df.columns\nfor i in cols:\n    sns.boxplot(y=df[i])\n    plt.show()\n","14620cd3":"# removing outliers from 'sepal width (cm) column'\nq1 = df['sepal_width'].quantile(0.25)\nq3 = df['sepal_width'].quantile(0.75)\niqr = q3 - q1\ndf = df[(df['sepal_width'] >= q1-1.5*iqr) & (df['sepal_width'] <= q3+1.5*iqr)]\ndf.shape","90fe7665":"# Boxplot after removing outlier's  (sepal width column)\nsns.boxplot(y=df['sepal_width'])\nplt.show()","432cca8d":"# Standardizing\nstd_scaler = StandardScaler()\ndf_norm = std_scaler.fit_transform(df)\n","90a4a129":"#To find no of clusters\ncluster_rng = range(1,20)\ncluster_errors = []\n\nfor a in cluster_rng:\n    clusters = KMeans(a, n_init = 10)\n    clusters.fit(df_norm)\n    labels = clusters.labels_\n    centroids = clusters.cluster_centers_\n    cluster_errors.append(clusters.inertia_)\n    \nc_df = pd.DataFrame({'no_of_cluster': cluster_rng, 'cluster_errors': cluster_errors})\nc_df[0:20]","23d4ef9c":"#Ploting elbow curve \nplt.figure(figsize=(12,6))\nplt.plot(c_df.no_of_cluster, c_df.cluster_errors, marker = 'o') \nplt.xlabel('K') \nplt.ylabel('Error') \nplt.title('Elbow Plot') \nplt.show()","231e49a1":"# Creating object of the model and fitting it\nmodel = KMeans(n_clusters=3, max_iter=50)\nmodel.fit(df)","f1d589ac":"#analysis of cluster found\ndf.index = pd.RangeIndex(len(df.index))\ndf_kmeans = pd.concat([df, pd.Series(model.labels_)], axis=1)\ndf_kmeans.columns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'ClusterID']\n\nkmeans_clusters_Sepal_length = pd.DataFrame(df_kmeans.groupby(['ClusterID']).agg({'sepal_length':'mean'}))\nkmeans_clusters_Sepal_width = pd.DataFrame(df_kmeans.groupby(['ClusterID']).agg({'sepal_width':'mean'}))\nkmeans_clusters_Petal_length = pd.DataFrame(df_kmeans.groupby(['ClusterID']).agg({'petal_length':'mean'}))\nkmeans_clusters_Petal_width = pd.DataFrame(df_kmeans.groupby(['ClusterID']).agg({'petal_width':'mean'}))","d36be201":"df2 = pd.concat([pd.Series([0,1,2]), kmeans_clusters_Sepal_length, kmeans_clusters_Sepal_width, kmeans_clusters_Petal_length, kmeans_clusters_Petal_width\n                ], axis=1)\ndf2.columns = ['ClusterID','sepal_length_mean','sepal_width_mean','petal_length_mean',\n               'petal_width_mean']\ndf2.head()","43d7bd17":"sns.countplot(x=df_kmeans.ClusterID)\nplt.title('Count plot')\nplt.show()","f0248ed8":"#heirarchical clustering with full dendrogram\nplt.figure(figsize=(15,7))\nmergings = linkage(df_kmeans, method = 'ward', metric='euclidean')","018185b6":"# set cut-off to 50\nmax_d = 7.08                # max_d as in max_distance\ndendrogram(mergings,\n           truncate_mode='lastp',  # show only the last p merged clusters\n           p=150,                  # Try changing values of p\n           leaf_rotation=90.,      # rotates the x axis labels\n           leaf_font_size=8.,      # font size for the x axis labels\n          )\n\nplt.axhline(y=max_d, c='k')\nplt.show()","2ffaee77":"#heirarchical clustering with full dendrogram for 50\nplt.figure(figsize=(15,7))\nmergings = linkage(df_kmeans, method = 'ward', metric='euclidean')\n\n# set cut-off to 50\nmax_d = 7.08                # max_d as in max_distance\ndendrogram(mergings,\n           truncate_mode='lastp',  # show only the last p merged clusters\n           p=50,                  # Try changing values of p\n           leaf_rotation=90.,      # rotates the x axis labels\n           leaf_font_size=8.,      # font size for the x axis labels\n          )\n\nplt.axhline(y=max_d, c='k')\nplt.show()","69b0c5b9":"# Scatter plot to visualize the clusters\nplt.figure(figsize=(10,7))\nsns.scatterplot(x='sepal_length',y='sepal_width', data=df_kmeans, hue='ClusterID', palette=['green','blue','red'])\n\n# Plotting the centroids of the clusters\nplt.scatter(model.cluster_centers_[:, 0], model.cluster_centers_[:,1], \n            s = 100, c = 'black',marker=\"*\" ,label = 'Centroids')\nplt.show()","326d5f45":"**After outlier treatment the number of rows are reduced to 146 from 150**","d305c6b5":"**From the above elbow curve we can say that '3' is the optimal number of cluster**","4ac715da":"**From the above boxplot we can say that there are outliers in the column 'sepal width'**","818d029b":"**Importing Required Libraries**"}}