{"cell_type":{"1d422a8b":"code","4c3073d2":"code","9432100d":"code","3831e44b":"code","dda2f343":"code","60d16b3e":"code","0300d20d":"code","35b84bd2":"code","0b7f55f2":"code","1c8e826c":"code","b1b7c563":"code","f35a1531":"code","f25e228c":"code","753e93ed":"markdown","4575c443":"markdown","09307b05":"markdown","e63b7557":"markdown","18295499":"markdown","4014e7a9":"markdown","b0a82461":"markdown","09fbb02b":"markdown","f6a16a7d":"markdown","2e4b12b8":"markdown","121c9d2d":"markdown"},"source":{"1d422a8b":"# forked from : https:\/\/www.kaggle.com\/mihaskalic\/lstm-is-all-you-need-well-maybe-embeddings-also\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\n\nimport os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\nimport math\nfrom sklearn.model_selection import train_test_split","4c3073d2":"SEQ_LEN = 28  # magic number - length to truncate sequences of words","9432100d":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntrain_df, val_df = train_test_split(train_df, test_size=0.07)","3831e44b":"#minor eda: average question length (in words) is 12  , majority are under 12 words\ntrain_df.question_text.str.split().str.len().describe()","dda2f343":"### Unclear why fails to open [encoding error], format is same as for glove. Will Debug, Dan:\n### f = open('..\/input\/embeddings\/paragram_300_sl999\/paragram_300_sl999.txt')\n\n# embedding setup\n# Source https:\/\/blog.keras.io\/using-pre-trained-word-embeddings-in-a-keras-model.html\n# \nembeddings_index = {}\nf = open('..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt')\n# f = open('..\/input\/embeddings\/paragram_300_sl999\/paragram_300_sl999.txt')\nfor line in tqdm(f):\n    values = line.split(\" \")\n    word = values[0]\n    coefs = np.asarray(values[1:], dtype='float32')\n    embeddings_index[word] = coefs\nf.close()\n\nprint('Found %s word vectors.' % len(embeddings_index))","60d16b3e":"# Convert values to embeddings\ndef text_to_array(text):\n    empyt_emb = np.zeros(300)\n    text = text[:-1].split()[:SEQ_LEN]\n    embeds = [embeddings_index.get(x, empyt_emb) for x in text]\n    embeds+= [empyt_emb] * (SEQ_LEN - len(embeds))\n    return np.array(embeds)\n\n# train_vects = [text_to_array(X_text) for X_text in tqdm(train_df[\"question_text\"])]\nval_vects = np.array([text_to_array(X_text) for X_text in tqdm(val_df[\"question_text\"][:3000])])\nval_y = np.array(val_df[\"target\"][:3000])","0300d20d":"# Data providers\nbatch_size = 128\n\ndef batch_gen(train_df):\n    n_batches = math.ceil(len(train_df) \/ batch_size)\n    while True: \n        train_df = train_df.sample(frac=1.)  # Shuffle the data.\n        for i in range(n_batches):\n            texts = train_df.iloc[i*batch_size:(i+1)*batch_size, 1]\n            text_arr = np.array([text_to_array(text) for text in texts])\n            yield text_arr, np.array(train_df[\"target\"][i*batch_size:(i+1)*batch_size])","35b84bd2":"from keras.models import Sequential\nfrom keras.layers import CuDNNLSTM, Dense, Bidirectional, CuDNNGRU\nimport matplotlib.pyplot as plt\n%matplotlib inline","0b7f55f2":"model = Sequential()\nmodel.add(Bidirectional(CuDNNLSTM(128, return_sequences=True),input_shape=(SEQ_LEN, 300)))\nmodel.add(Bidirectional(CuDNNGRU(128, return_sequences=True),input_shape=(SEQ_LEN, 300)))\nmodel.add(Bidirectional(CuDNNGRU(64)))\nmodel.add(Dense(1, activation=\"sigmoid\"))\n\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])","1c8e826c":"mg = batch_gen(train_df)\nmodel.fit_generator(mg, epochs=25,\n                    steps_per_epoch=1000,\n                    validation_data=(val_vects, val_y),\n                    verbose=True)","b1b7c563":"# Plot training & validation accuracy values\nplt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(12,5))\nplt.plot(model.history.history['acc'])\nplt.plot(model.history.history['val_acc'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\n# Plot training & validation loss values\nplt.figure(figsize=(12,5))\nplt.plot(model.history.history['loss'])\nplt.plot(model.history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","f35a1531":"# prediction part\nbatch_size = 256\ndef batch_gen(test_df):\n    n_batches = math.ceil(len(test_df) \/ batch_size)\n    for i in range(n_batches):\n        texts = test_df.iloc[i*batch_size:(i+1)*batch_size, 1]\n        text_arr = np.array([text_to_array(text) for text in texts])\n        yield text_arr\n\ntest_df = pd.read_csv(\"..\/input\/test.csv\")\n\nall_preds = []\nfor x in tqdm(batch_gen(test_df)):\n    all_preds.extend(model.predict(x).flatten())","f25e228c":"y_te = (np.array(all_preds) > 0.5).astype(np.int)\n\nsubmit_df = pd.DataFrame({\"qid\": test_df[\"qid\"], \"prediction\": y_te})\nsubmit_df.to_csv(\"submission.csv\", index=False)","753e93ed":"# 8.Model Training <a id=\"8\"> <\/a>","4575c443":"# 1. Load Library<a id=\"1\"><\/a>","09307b05":"# 7.Data Providers <a id=\"7\"> <\/a>","e63b7557":"# 9.Inference of result <a id = \"9\"><\/a>","18295499":"# 5.Embedding Datasetup <a id=\"5\"> <\/a>","4014e7a9":"# 2.Define the sequence of words<a id=\"2\"><\/a>","b0a82461":"## Quora Insincere Question Classification\n---\n>  ### Outline of the notebook\n> 1. [**Load Library**](#1)\n> 1. [**Define the sequence of words**](#2)\n> 1. [**Setup Train data**](#3)\n> 1. [**Some Question Statistics**](#4)\n> 1. [**Embedding Datasetup**](#5)\n> 1. [**Value to Embedding**](#6)\n> 1. [**Data Providers**](#7)\n> 1. [**Model Training**](#8)\n> 1. [**Inference of result**](#9)\n> 1. [**Submission**](#10)","09fbb02b":"# 10.Submission<a id=\"10\"> <\/a>","f6a16a7d":"# 4.Some Question Statistics <a id=\"4\"> <\/a>","2e4b12b8":"# 6. Value to Embedding<a id=\"6\"><\/a> ","121c9d2d":"# 3.Setup Train data <a id=\"3\"><\/a>"}}