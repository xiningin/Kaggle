{"cell_type":{"9d0aaae3":"code","03f4fac8":"code","d563af74":"code","cf6a02cb":"code","d92c6c44":"code","57689ce9":"code","0ab67a93":"code","19abbbe6":"code","7b25c217":"code","289e1032":"code","4b39981f":"code","aff0e4a9":"code","9382c94a":"code","9009f0c5":"code","ea0f9fe5":"code","df878313":"code","edc054e1":"code","69c9622b":"code","a2542461":"code","0430316c":"code","84a4737d":"code","e8850d79":"code","28adec96":"code","fd73b879":"code","fbd5aa75":"markdown","4e0c4b24":"markdown","aefdd526":"markdown","af4d4823":"markdown","48e28e45":"markdown","866f3c08":"markdown","fdb7094f":"markdown","fdabee84":"markdown","9700d9f1":"markdown","cd08e941":"markdown","ac706a55":"markdown","18f77718":"markdown","8318cb40":"markdown","a66bc398":"markdown","44526394":"markdown","77ad22ea":"markdown","c93e053e":"markdown","fc2077a0":"markdown","c25fe6fd":"markdown","f75b344a":"markdown","4e5b5113":"markdown","591c37c1":"markdown","82c465a4":"markdown","4f228020":"markdown","a1f84bae":"markdown","ba0d1060":"markdown","3ee29ba6":"markdown","42784d68":"markdown","400aef9b":"markdown","d98da051":"markdown","c2056808":"markdown","ea8d617b":"markdown","c1814310":"markdown"},"source":{"9d0aaae3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom bokeh.plotting import figure\nfrom bokeh.io import output_file , show\nfrom bokeh.plotting import ColumnDataSource\nfrom bokeh.layouts import gridplot,row,column\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","03f4fac8":"lit_birth_rate=pd.read_csv('\/kaggle\/input\/visualizeusingbokeh\/literacy_birth_rate.csv')\nafrica_df=lit_birth_rate[lit_birth_rate['Continent']=='AF']\namerica_df=lit_birth_rate[lit_birth_rate['Continent']=='LAT']\nasia_df=lit_birth_rate[lit_birth_rate['Continent']=='ASI']\neurope_df=lit_birth_rate[lit_birth_rate['Continent']=='EUR']\n\nfertility_africa=africa_df['fertility']\nfemale_literacy_africa=africa_df['female literacy']\nfertility_latinamerica=america_df['fertility']\nfemale_literacy_latinamerica=america_df['female literacy']\n\nfertility_asia=asia_df['fertility']\nfemale_literacy_asia=asia_df['female literacy']\n\nfertility_europe=europe_df['fertility']\nfemale_literacy_europe=europe_df['female literacy']","d563af74":"source=ColumnDataSource(africa_df)\n# Create a blank figure: p1\np1 = figure(x_axis_label='fertility (children per woman)', y_axis_label='female_literacy (% population)',title=\"Africa\")\n\n# Add circle scatter to the figure p1\np1.circle('fertility', 'female literacy',source=source)\n\np2 = figure(x_axis_label='fertility (children per woman)', y_axis_label='female_literacy (% population)',title=\"Latin America\")\n\n# Add circle scatter to the figure p1\np2.circle(fertility_latinamerica, female_literacy_latinamerica)\n\np3 = figure(x_axis_label='fertility (children per woman)', y_axis_label='female_literacy (% population)',title=\"Asia\")\n\n# Add circle scatter to the figure p1\np3.circle(fertility_asia, female_literacy_asia)\n\n\np4 = figure(x_axis_label='fertility (children per woman)', y_axis_label='female_literacy (% population)',title=\"Europe\")\n\n# Add circle scatter to the figure p1\np4.circle(fertility_europe, female_literacy_europe)","cf6a02cb":"# Link the x_range of p2 to p1: p2.x_range\np2.x_range = p1.x_range\n\n# Link the y_range of p2 to p1: p2.y_range\np2.y_range = p1.y_range\n\n# Link the x_range of p3 to p1: p3.x_range\np3.x_range=p1.x_range\n\n# Link the y_range of p4 to p1: p4.y_range\np4.y_range=p1.y_range\n\nlayout=gridplot([[p1,p2],[p3,p4]])\n# Specify the name of the output_file and show the result\noutput_file('linked_range.html')\nshow(layout)\n","d92c6c44":"# Create ColumnDataSource: source\nsource = ColumnDataSource(lit_birth_rate)\n\n# Create the first figure: p1\np1 = figure(x_axis_label='fertility (children per woman)', y_axis_label='female literacy (% population)',\n            tools='box_select,lasso_select')\n\n# Add a circle glyph to p1\np1.circle('fertility','female literacy',source=source)\n\n# Create the second figure: p2\np2 = figure(x_axis_label='fertility (children per woman)', y_axis_label='population (millions)',\n            tools='box_select,lasso_select' )\n\n# Add a circle glyph to p2\np2.circle('fertility','population',source=source)\n\n# Create row layout of figures p1 and p2: layout\nlayout = row(p1,p2)\n\n# Specify the name of the output_file and show the result\noutput_file('linked_brush.html')\nshow(layout)","57689ce9":"latin_america=ColumnDataSource(america_df)\nafrica=ColumnDataSource(africa_df)","0ab67a93":"p=figure(x_axis_label='Fertility',y_axis_label='Literacy rate')","19abbbe6":"# Add the first circle glyph to the figure p\np.circle('fertility', 'female literacy', source=latin_america, size=10, color='red', legend_label='Latin America')\n\n# Add the second circle glyph to the figure p\np.circle('fertility', 'female literacy', source=africa, size=10, color='blue', legend_label='Africa')\n\n# Specify the name of the output_file and show the result\noutput_file('fert_lit_groups.html')\nshow(p)\n","7b25c217":"from bokeh.io import curdoc\nfrom bokeh.plotting import figure\n\n# Create a new plot: plot\nplot = figure(x_axis_label=\" \",y_axis_label=\" \")\n\n# Add a line to the plot\nplot.line([1,2,3,4,5],[2,5,4,6,7])\n\n# Add the plot to the current document\ncurdoc().add_root(plot)","289e1032":"from bokeh.layouts import Column\nfrom bokeh.models import Slider\n\n# Create a slider: slider\nslider = Slider(title='my slider', start=0, end=10, step=0.1, value=2)\n\n# Create a widgetbox layout: layout\nlayout = Column(slider)\n\n# Add the layout to the current document\ncurdoc().add_root(layout)","4b39981f":"\n\n# Create first slider: slider1\nslider1 = Slider(title=\"slider1\",start=0,end=10,step=0.1, value=2)\n\n# Create second slider: slider2\nslider2 = Slider(title=\"slider2\",start=10,end=100,step=1, value=20)\n\n# Add slider1 and slider2 to a widgetbox\nlayout = Column(slider1,slider2)\n\n# Add the layout to the current document\ncurdoc().add_root(layout)","aff0e4a9":"x=[  0.3, 0.33244147  , 0.36488294  , 0.39732441  , 0.42976589\n,0.46220736,0.49464883,0.5270903, 0.55953177,0.59197324\n,0.62441472,0.65685619,0.68929766,0.72173913,0.7541806\n,0.78662207,0.81906355,0.85150502,0.88394649,0.91638796\n,0.94882943,0.9812709, 1.01371237,1.04615385,1.07859532\n,1.11103679,1.14347826,1.17591973,1.2083612, 1.24080268\n,1.27324415,1.30568562,1.33812709,1.37056856,1.40301003\n,1.43545151,1.46789298,1.50033445,1.53277592,1.56521739\n,1.59765886,1.63010033,1.66254181,1.69498328,1.72742475\n,1.75986622,1.79230769,1.82474916,1.85719064,1.88963211\n,1.92207358,1.95451505,1.98695652,2.01939799,2.05183946\n,2.08428094,2.11672241,2.14916388,2.18160535,2.21404682\n,2.24648829,2.27892977,2.31137124,2.34381271,2.37625418\n,2.40869565,2.44113712,2.4735786, 2.50602007,2.53846154\n,2.57090301,2.60334448,2.63578595,2.66822742,2.7006689\n,2.73311037,2.76555184,2.79799331,2.83043478,2.86287625\n,2.89531773,2.9277592, 2.96020067,2.99264214,3.02508361\n,3.05752508,3.08996656,3.12240803,3.1548495, 3.18729097\n,3.21973244,3.25217391,3.28461538,3.31705686,3.34949833\n,3.3819398, 3.41438127,3.44682274,3.47926421,3.51170569\n,3.54414716,3.57658863,3.6090301, 3.64147157,3.67391304\n,3.70635452,3.73879599,3.77123746,3.80367893,3.8361204\n,3.86856187,3.90100334,3.93344482,3.96588629,3.99832776\n,4.03076923,4.0632107, 4.09565217,4.12809365,4.16053512\n,4.19297659,4.22541806,4.25785953,4.290301,  4.32274247\n,4.35518395,4.38762542,4.42006689,4.45250836,4.48494983\n,4.5173913, 4.54983278,4.58227425,4.61471572,4.64715719\n,4.67959866,4.71204013,4.74448161,4.77692308,4.80936455\n,4.84180602,4.87424749,4.90668896,4.93913043,4.97157191\n,5.00401338,5.03645485,5.06889632,5.10133779,5.13377926\n,5.16622074,5.19866221,5.23110368,5.26354515,5.29598662\n,5.32842809,5.36086957,5.39331104,5.42575251,5.45819398\n,5.49063545,5.52307692,5.55551839,5.58795987,5.62040134\n,5.65284281,5.68528428,5.71772575,5.75016722,5.7826087\n,5.81505017,5.84749164,5.87993311,5.91237458,5.94481605\n,5.97725753,6.009699,  6.04214047,6.07458194,6.10702341\n,6.13946488,6.17190635,6.20434783,6.2367893, 6.26923077\n,6.30167224,6.33411371,6.36655518,6.39899666,6.43143813\n,6.4638796, 6.49632107,6.52876254,6.56120401,6.59364548\n,6.62608696,6.65852843,6.6909699, 6.72341137,6.75585284\n,6.78829431,6.82073579,6.85317726,6.88561873,6.9180602\n,6.95050167,6.98294314,7.01538462,7.04782609,7.08026756\n,7.11270903,7.1451505, 7.17759197,7.21003344,7.24247492\n,7.27491639,7.30735786,7.33979933,7.3722408, 7.40468227\n,7.43712375,7.46956522,7.50200669,7.53444816,7.56688963\n,7.5993311, 7.63177258,7.66421405,7.69665552,7.72909699\n,7.76153846,7.79397993,7.8264214, 7.85886288,7.89130435\n,7.92374582,7.95618729,7.98862876,8.02107023,8.05351171\n,8.08595318,8.11839465,8.15083612,8.18327759,8.21571906\n,8.24816054,8.28060201,8.31304348,8.34548495,8.37792642\n,8.41036789,8.44280936,8.47525084,8.50769231,8.54013378\n,8.57257525,8.60501672,8.63745819,8.66989967,8.70234114\n,8.73478261,8.76722408,8.79966555,8.83210702,8.86454849\n,8.89698997,8.92943144,8.96187291,8.99431438,9.02675585\n,9.05919732,9.0916388, 9.12408027,9.15652174,9.18896321\n,9.22140468,9.25384615,9.28628763,9.3187291, 9.35117057\n,9.38361204,9.41605351,9.44849498,9.48093645,9.51337793\n,9.5458194, 9.57826087,9.61070234,9.64314381,9.67558528\n,9.70802676,9.74046823,9.7729097, 9.80535117,9.83779264\n,9.87023411,9.90267559,9.93511706,9.96755853 , 10  ]","9382c94a":"y=[-0.19056796,0.13314778,0.39032789,0.58490071,0.72755027,0.82941604\n,0.90008145,0.94719898,0.97667411,0.99299073,0.99952869,0.99882928\n,0.99280334,0.98288947,0.97017273,0.95547297,0.93941048,0.92245495\n,0.90496191,0.88720012,0.86937208,0.85162961,0.83408561,0.81682308\n,0.79990193,0.78336433,0.76723876,0.75154314,0.7362873, 0.72147487\n,0.70710477,0.69317237,0.67967038,0.66658956,0.65391928,0.64164796\n,0.62976339,0.61825301,0.60710407,0.59630386,0.58583975,0.57569933\n,0.56587047,0.55634135,0.5471005, 0.53813683,0.52943965,0.52099866\n,0.51280394,0.50484599,0.49711569,0.48960429,0.48230342,0.47520507\n,0.46830157,0.4615856, 0.45505012,0.44868845,0.44249417,0.43646114\n,0.43058352,0.42485569,0.4192723, 0.41382821,0.40851854,0.40333859\n,0.39828387,0.39335008,0.38853312,0.38382904,0.37923407,0.37474459\n,0.37035715,0.36606841,0.3618752, 0.35777446,0.35376325,0.34983877\n,0.34599831,0.34223928,0.33855919,0.33495564,0.33142632,0.32796903\n,0.32458163,0.32126208,0.3180084, 0.3148187, 0.31169115,0.30862399\n,0.30561552,0.30266411,0.29976818,0.29692621,0.29413673,0.29139834\n,0.28870966,0.28606938,0.28347622,0.28092895,0.27842639,0.27596739\n,0.27355084,0.27117567,0.26884083,0.26654532,0.26428818,0.26206846\n,0.25988525,0.25773767,0.25562487,0.25354602,0.25150031,0.24948698\n,0.24750527,0.24555444,0.24363379,0.24174264,0.23988032,0.23804617\n,0.23623958,0.23445993,0.23270663,0.2309791, 0.2292768, 0.22759917\n,0.22594568,0.22431583,0.22270912,0.22112506,0.21956318,0.21802302\n,0.21650414,0.2150061, 0.21352848,0.21207087,0.21063286,0.20921408\n,0.20781413,0.20643266,0.20506929,0.20372368,0.20239549,0.20108438\n,0.19979003,0.19851212,0.19725034,0.19600439,0.19477398,0.19355882\n,0.19235862,0.19117313,0.19000206,0.18884517,0.18770219,0.18657288\n,0.18545699,0.1843543, 0.18326456,0.18218756,0.18112306,0.18007087\n,0.17903076,0.17800253,0.17698598,0.17598091,0.17498713,0.17400446\n,0.1730327, 0.17207168,0.17112122,0.17018115,0.1692513, 0.16833151\n,0.16742161,0.16652145,0.16563087,0.16474972,0.16387786,0.16301513\n,0.16216139,0.16131651,0.16048035,0.15965278,0.15883366,0.15802286\n,0.15722027,0.15642575,0.15563919,0.15486047,0.15408947,0.15332608\n,0.15257018,0.15182167,0.15108044,0.15034639,0.14961941,0.14889939\n,0.14818625,0.14747988,0.14678019,0.14608708,0.14540046,0.14472024\n,0.14404634,0.14337866,0.14271712,0.14206163,0.14141212,0.1407685\n,0.14013069,0.13949862,0.1388722, 0.13825137,0.13763605,0.13702616\n,0.13642163,0.1358224, 0.13522839,0.13463954,0.13405578,0.13347705\n,0.13290327,0.1323344, 0.13177035,0.13121109,0.13065653,0.13010663\n,0.12956133,0.12902056,0.12848428,0.12795242,0.12742494,0.12690177\n,0.12638288,0.12586819,0.12535768,0.12485127,0.12434893,0.12385061\n,0.12335625,0.12286581,0.12237925,0.12189652,0.12141757,0.12094236\n,0.12047084,0.12000298,0.11953873,0.11907805,0.1186209, 0.11816724\n,0.11771703,0.11727022,0.11682679,0.11638669,0.11594988,0.11551634\n,0.11508601,0.11465888,0.11423489,0.11381403,0.11339624,0.11298151\n,0.11256979,0.11216106,0.11175527,0.11135241,0.11095243,0.11055531\n,0.11016102,0.10976953,0.1093808, 0.10899481,0.10861153,0.10823093\n,0.10785298,0.10747766,0.10710493,0.10673478,0.10636717,0.10600208\n,0.10563948,0.10527936,0.10492167,0.1045664, 0.10421352,0.10386302\n,0.10351486,0.10316902,0.10282548,0.10248422,0.10214521,0.10180843\n,0.10147386,0.10114148,0.10081127,0.1004832, 0.10015726,0.09983342]","9009f0c5":"source = ColumnDataSource(data={'x': x, 'y': y})\n\n# Add a line to the plot\nplot.line('x', 'y', source=source)\n\n# Create a column layout: layout\nlayout = column(Column(slider), plot)\n\n# Add the layout to the current document\ncurdoc().add_root(layout)","ea0f9fe5":"source = ColumnDataSource(data={'x': x, 'y': y})\n\n# Add a line to the plot\nplot.line('x', 'y', source=source)\n\n# Define a callback function: callback\ndef callback(attr, old, new):\n\n    # Read the current value of the slider: scale\n    scale = slider.value\n\n    # Compute the updated y using np.sin(scale\/x): new_y\n    new_y = np.sin(scale\/x)\n\n    # Update source with the new data values\n    source.data = {'x': x, 'y': new_y}\n\n# Attach the callback to the 'value' property of slider\nslider.on_change('value',callback)\n\n# Create layout and add to current document\nlayout = column(Column(slider), plot)\ncurdoc().add_root(layout)","df878313":"# Perform necessary imports\nfrom bokeh.models import ColumnDataSource, Select\n\n# Create ColumnDataSource: source\nsource = ColumnDataSource(lit_birth_rate)\n\n# Create a new plot: plot\nplot = figure()\n\n# Add circles to the plot\nplot.circle('fertility', 'female literacy', source=source)\n\n# Define a callback function: update_plot\ndef update_plot(attr, old, new):\n    # If the new Selection is 'female_literacy', update 'y' to female_literacy\n    if new == 'female_literacy': \n        source.data = {\n            'x' :lit_birth_rate[' fertility'],\n            'y' : lit_birth_rate['female literacy']\n        }\n    # Else, update 'y' to population\n    else:\n        source.data = {\n            'x' : lit_birth_rate[' fertility'],\n            'y' : lit_birth_rate[' population']\n        }\n\n# Create a dropdown Select widget: select    \nselect = Select(title=\"distribution\", options=['female_literacy', 'population'], value='female_literacy')\n\n# Attach the update_plot callback to the 'value' property of select\nselect.on_change('value', update_plot)\n\n# Create layout and add to current document\nlayout = row(select, plot)\ncurdoc().add_root(layout) ","edc054e1":"# Create two dropdown Select widgets: select1, select2\nselect1 = Select(title='First', options=['A', 'B'], value='A')\nselect2 = Select(title='Second', options=['1', '2', '3'], value='1')\n\n# Define a callback function: callback\ndef callback(attr, old, new):\n    # If select1 is 'A' \n    if select1.value == 'A':\n        # Set select2 options to ['1', '2', '3']\n        select2.options = ['1', '2', '3']\n\n        # Set select2 value to '1'\n        select2.value = '1'\n    else:\n        # Set select2 options to ['100', '200', '300']\n        select2.options = ['100', '200', '300']\n\n        # Set select2 value to '100'\n        select2.value = '100'\n\n# Attach the callback to the 'value' property of select1\nselect1.on_change('value', callback)\n\n# Create layout and add to current document\nlayout = Column(select1, select2)\ncurdoc().add_root(layout)","69c9622b":"from bokeh.models import Button\n# Create a Button with label 'Update Data'\nbutton = Button(label='Update Data')\n\n# Define an update callback with no arguments: update\ndef update():\n\n    # Compute new y values: y\n    y = np.sin(x) + np.random.random(N)\n\n    # Update the ColumnDataSource data dictionary\n    source.data = {'x': x, 'y': y}\n\n# Add the update callback to the button\nbutton.on_click(update)\n\n# Create layout and add to current document\nlayout = column(Column(button), plot)\ncurdoc().add_root(layout)","a2542461":"# Import CheckboxGroup, RadioGroup, Toggle from bokeh.models\nfrom bokeh.models import CheckboxGroup,RadioGroup,Toggle\n\n# Add a Toggle: toggle\ntoggle = Toggle(button_type='success',label='Toggle button')\n\n# Add a CheckboxGroup: checkbox\ncheckbox = CheckboxGroup(labels=['Option 1', 'Option 2', 'Option 3'])\n\n# Add a RadioGroup: radio\nradio = RadioGroup(labels=['Option 1', 'Option 2', 'Option 3'])\n\n# Add widgetbox(toggle, checkbox, radio) to the current document\ncurdoc().add_root(Column(toggle, checkbox, radio))","0430316c":"gapminder_df=pd.read_csv('\/kaggle\/input\/visualizeusingbokeh\/gapminder_tidy.csv')","84a4737d":"# Perform necessary imports\nfrom bokeh.io import output_file, show\nfrom bokeh.plotting import figure\nfrom bokeh.models import HoverTool, ColumnDataSource\n\n# Make the ColumnDataSource: source\nsource = ColumnDataSource(data={\n    'x'       : gapminder_df[gapminder_df['Year']==1970].fertility,\n    'y'       : gapminder_df[gapminder_df['Year']==1970].life,\n    'country' : gapminder_df[gapminder_df['Year']==1970].Country,\n})\n\n# Create the figure: p\np = figure(title='1970', x_axis_label='Fertility (children per woman)', y_axis_label='Life Expectancy (years)',\n           plot_height=400, plot_width=700,\n           tools=[HoverTool(tooltips='@country')])\n\n# Add a circle glyph to the figure p\np.circle(x='x', y='y', source=source)\n\n# Output the file and show the figure\noutput_file('gapminder.html')\nshow(p)","e8850d79":"# Import the necessary modules\nfrom bokeh.io import curdoc\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.plotting import figure\n\n# Make the ColumnDataSource: source\nsource = ColumnDataSource(data={\n    'x'       : gapminder_df[gapminder_df['Year']==1970].fertility,\n    'y'       : gapminder_df[gapminder_df['Year']==1970].life,\n    'country'      : gapminder_df[gapminder_df['Year']==1970].Country,\n    'pop'      : (gapminder_df[gapminder_df['Year']==1970].population \/ 20000000) + 2,\n    'region'      : gapminder_df[gapminder_df['Year']==1970].region,\n})\n\n# Save the minimum and maximum values of the fertility column: xmin, xmax\nxmin, xmax = min(gapminder_df.fertility), max(gapminder_df.fertility)\n\n# Save the minimum and maximum values of the life expectancy column: ymin, ymax\nymin, ymax = min(gapminder_df.life), max(gapminder_df.life)\n\n# Create the figure: plot\nplot = figure(title='Gapminder Data for 1970', plot_height=400, plot_width=700,\n              x_range=(xmin, xmax), y_range=(ymin, ymax))\n\n# Add circle glyphs to the plot\nplot.circle(x='x', y='y', fill_alpha=0.8, source=source)\n\n# Set the x-axis label\nplot.xaxis.axis_label ='Fertility (children per woman)'\n\n# Set the y-axis label\nplot.yaxis.axis_label = 'Life Expectancy (years)'\n\n# Add the plot to the current document and add a title\ncurdoc().add_root(plot)\ncurdoc().title = 'Gapminder'\n\n","28adec96":"# Make a list of the unique values from the region column: regions_list\nregions_list = gapminder_df.region.unique().tolist()\n\n# Import CategoricalColorMapper from bokeh.models and the Spectral6 palette from bokeh.palettes\nfrom bokeh.models import CategoricalColorMapper\nfrom bokeh.palettes import Spectral6\n\n# Make a color mapper: color_mapper\ncolor_mapper = CategoricalColorMapper(factors=regions_list,palette=Spectral6)\n\n# Add the color mapper to the circle glyph\nplot.circle(x='x', y='y', fill_alpha=0.8, source=source,\n            color=dict(field='region', transform=color_mapper), legend_label='region')\n\n# Set the legend.location attribute of the plot to 'top_right'\nplot.legend.location = 'top_right'\n\n# Add the plot to the current document and add the title\ncurdoc().add_root(plot)\ncurdoc().title = 'Gapminder'","fd73b879":"# Import the necessary modules\nfrom bokeh.layouts import Column,row\nfrom bokeh.models import Slider\n\n# Define the callback function: update_plot\ndef update_plot(attr,old,new):\n    # Set the yr name to slider.value and new_data to source.data\n    yr = slider.value\n    new_data = {\n        'x'       : gapminder_df[gapminder_df['Year']==yr].fertility,\n        'y'       :  gapminder_df[gapminder_df['Year']==yr].life,\n        'country' :  gapminder_df[gapminder_df['Year']==yr].Country,\n        'pop'     : ( gapminder_df[gapminder_df['Year']==yr].population \/ 20000000) + 2,\n        'region'  :  gapminder_df[gapminder_df['Year']==yr].region,\n    }\n    source.data = new_data\n    plot.title.text = 'Gapminder data for %d' % yr\n\n\n# Make a slider object: slider\nslider = Slider(start=1970,end=2010,step=1,value=1970,title='Year')\n\n# Attach the callback to the 'value' property of slider\nslider.on_change('value',update_plot)\n\n# Make a row layout of widgetbox(slider) and plot and add it to the current document\nlayout = row(Column(slider), plot)\ncurdoc().add_root(layout)","fbd5aa75":"### Let's get started with building an interactive Bokeh app. This typically begins with importing the curdoc, or \"current document\", function from bokeh.io. This current document will eventually hold all the plots, controls, and layouts that you create. Your job in this exercise is to use this function to add a single plot to your application.","4e0c4b24":"## Updating Plot from dropdown","aefdd526":"## Linked brushing\n### By sharing the same ColumnDataSource object between multiple plots, selection tools like BoxSelect and LassoSelect will highlight points in both plots that share a row in the ColumnDataSource.In this exercise, you'll plot female literacy vs fertility and population vs fertility in two plots using the same ColumnDataSource.After you have built the figure, experiment with the Lasso Select and Box Select tools. Use your mouse to drag a box or lasso around points in one figure, and notice how points in the other figure that share a row in the ColumnDataSource also get highlighted.","af4d4823":"## Annotations and guides","48e28e45":"## Add a single slider\n\n\n### In the previous exercise, you added a single plot to the \"current document\" of your application. In this exercise, you'll practice adding a layout to your current document.Your job here is to create a single slider, use it to create a widgetbox layout, and then add this layout to the current document.","866f3c08":"### You'll now learn to update the plot's data using a drop down menu instead of a slider. This would allow users to do things like select between different data sources to view.The ColumnDataSource source has been created for you along with the plot. Your job in this exercise is to add a drop down menu to update the plot's data.","fdb7094f":"## You'll now learn how to use widget callbacks to update the state of a Bokeh application, and in turn, the data that is presented to the user.Your job in this exercise is to use the slider's on_change() function to update the plot's data from the previous example. NumPy's sin() function will be used to update the y-axis data of the plot.Now that you have added a widget callback, notice how as you move the slider of your app, the figure also updates!","fdabee84":"## Output of above code\n### Since a widget callback hasn't been defined here, the slider does not update the figure.\n\n![image.png](attachment:image.png)","9700d9f1":"# Building Interactive apps with Bokeh","cd08e941":"## Legends","ac706a55":"### Here, you'll practice using a dropdown callback to update another dropdown's options. This will allow you to customize your applications even further and is a powerful addition to your toolbox.Your job in this exercise is to create two dropdown select widgets and then define a callback such that one dropdown is used to update the other dropdown.\n\n","18f77718":"### Here, you'll continue your Exploratory Data Analysis by making a simple plot of Life Expectancy vs Fertility for the year 1970.Your job is to import the relevant Bokeh modules and then prepare a ColumnDataSource object with the fertility, life and Country columns, where you only select the rows with the index value 1970.Remember, as with the figures you generated in previous chapters, you can interact with your figures here with a variety of tools.","8318cb40":"## Linked axes\n### Linking axes between plots is achieved by sharing range objects.In this exercise, you'll link four plots of female literacy vs fertility so that when one plot is zoomed or dragged, one or more of the other plots will respond.The four plots p1, p2, p3 and p4 along with the layout that you created in the last section have been provided for you.Your job is link p1 with the three other plots by assignment of the .x_range and .y_range attributes.","a66bc398":"## Output of above code\n![image.png](attachment:image.png)","44526394":"![image.png](attachment:image.png)","77ad22ea":"## Output of above code:\n![image.png](attachment:image.png)","c93e053e":"## Output of above code\n![image.png](attachment:image.png)","fc2077a0":"## Value will change if the value on the slider change:\n![image.png](attachment:image.png)","c25fe6fd":"## Notice how life expectancy seems to go down as fertility goes up? It would be interesting to see how this varies by continent.","f75b344a":"## Output of above code\n![image.png](attachment:image.png)","4e5b5113":"## How to combine Bokeh models into layouts","591c37c1":"## Outpu of above code\n![](http:\/\/)![image.png](attachment:image.png)","82c465a4":"## Inorder to run the application we have to use :\n### bokeh serve file_name.py  #whereas the file_name is the file in which we place the above code\n\n\n## Output of above code will be:\n![image.png](attachment:image.png)","4f228020":"## Let's get started on the Gapminder app. Your job is to make the ColumnDataSource object, prepare the plot, and add circles for Life expectancy vs Fertility. You'll also set x and y ranges for the axes.","a1f84bae":"## Output of above code\n![image.png](attachment:image.png)","ba0d1060":"### Legends can be added to any glyph by using the legend_label keyword argument.In this exercise, you will plot two circle glyphs for female literacy vs fertility in Africa and Latin America.Two ColumnDataSources called latin_america and africa have been provided.Your job is to plot two circle glyphs for these two objects with fertility on the x axis and female_literacy on the y axis and add the legend values. The figure p has been provided for you.","3ee29ba6":"## Synchronize two dropdowns","42784d68":"## Buttons","400aef9b":"![image.png](attachment:image.png)","d98da051":"## Output of above code\n![image.png](attachment:image.png)","c2056808":"# Putting It All Together! A Case Study","ea8d617b":"![image.png](attachment:image.png)","c1814310":"# Layouts, Interactions, and Annotations"}}