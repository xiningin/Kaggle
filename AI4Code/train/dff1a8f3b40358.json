{"cell_type":{"6070dec1":"code","8261fdf5":"code","f3c65d78":"code","480a5f54":"code","b2a10aa2":"code","45e22c19":"code","14836618":"code","989c0510":"markdown","2f622ec4":"markdown","40e0064c":"markdown","703f230c":"markdown"},"source":{"6070dec1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib.colors\nimport seaborn as sns\nfrom sklearn.decomposition import PCA\n\n\ndef plot_graph(edges, nodes_positions, data = None, dim_reduction = 'PCA', graph_color = 'black', graph_linewidth=2, \n               plot_data = True, data_linewidth = 1,  data_color = None, palette = None,  \n               data_transparency_alpha = 0.9,\n               color_dict = None, # can be: {0:'red',1:'green',2:'blue'}, \n               default_data_color = 'black',               \n               showNodeNumbers = True, # Shows text with internal number of each node\n               umap_n_neighbors = 50, umap_min_dist = 0.99):\n    '''\n    #' Plots graphs defined by edges and nodes_positions, optionally - scatter plot the \"data\" on the same plot,\n    #' Optionally performs PCA\/etc (depending on dim_reduction)\n    #'\n    #' @param edges Nx2-shape matrix with edges ends, i.e. edges[k,0], edges[k,1] - ends of k-th edge  \n    #' @param nodes_positions  matrix of nodes positions \n    #' @param data  \"original dataset\", basically arbitrary dataset for scatter plot, it should have same shape[1] as nodes_positions\n    #' @param plot_data  True\/False - to scatterplot or not data\n    #' @param dim_reduction  'PCA', 'plot_first2axis', 'umap'\n    #' @param data_color can be a vector or predefined color - argument for c = data_color in scatter\n    #' @param default_data_color default color for data, used if data_color is not specified, of for labels which are not in color_dict\n    #' @param color_dict dictionary between labels (data_color) and colors, e.g. color_dict = {0:'deepskyblue','any_label':'orange'}, if label is not in dictionary default_data_color will be used\n    \n    #' @examples\n    # edges = np.array([ [0,1],[1,2],[2,0] ] )\n    # nodes_positions = np.random.rand(3,10) # 3 points in 10d space\n    # plot_graph(edges, nodes_positions)\n    #\n    # t = elpigraph_output\n    # edges = t[0]['Edges'][0]\n    # nodes_positions = t[0]['NodePositions']\n    # plot_graph(edges, nodes_positions)\n    '''\n\n    def get_data_color_effective_and_color_map(data_color, color_dict = {0:'red',1:'green',2:'blue'}, default_data_color = 'black' ):\n        '''\n        #' From human-friendly description of colors for data, returns matplotlib.scatter friendly outcome  \n        #'\n        #' @param data_color - vector of labels for data\n        #' @param color_dict - dictionary between labels and colors, e.g. color_dict = {0:'deepskyblue','any_label':'orange'}, if label is not in dictionary default_data_color will be used\n\n        #' return data_color_effective, cmap_loc, color_list - numeric vector and color map which can be used in plt.scatter\n        '''\n        # import matplotlib.colors\n\n        if data_color is not None:\n            list_unique_vals = list( set(data_color) )\n            cnt_unique_vals = len( list_unique_vals )\n            #print(cnt_unique_vals, list_unique_vals)\n            color_list = [default_data_color for i0 in range(cnt_unique_vals)] # Initialization \n            for uv in list_unique_vals:\n                IX_loc = list_unique_vals.index(uv)    \n                if uv in color_dict.keys():\n                    color_list[IX_loc] = color_dict[uv]\n            data_color_effective = np.zeros(len(data_color ),  dtype = int)\n            for i0 in range(len(data_color)):\n                cc = data_color[i0]\n                IX_loc = list_unique_vals.index(cc)\n                data_color_effective[i0] = IX_loc \n\n            cmap_loc = matplotlib.colors.ListedColormap( color_list )\n\n            return data_color_effective, cmap_loc\n\n\n    str_dim_reduction = dim_reduction\n    flag_make_dim_reduction = False\n    if dim_reduction in ['PCA', 'umap' ]: #  not 'plot_first2axis':\n        flag_make_dim_reduction = True\n        if dim_reduction.upper() == 'PCA':\n            reducer = PCA()\n        elif dim_reduction.lower() == 'umap':\n            n_neighbors = umap_n_neighbors#  50\n            min_dist= umap_min_dist # 0.99\n            #n_components=n_components\n            reducer = umap.UMAP( n_neighbors=n_neighbors,        min_dist=min_dist, n_components = 2)\n        if data is not None:\n            data2 = reducer.fit_transform(data)\n            nodes_positions2 = reducer.transform( nodes_positions )\n        else:\n            data2 = data\n            nodes_positions2 = reducer.fit_transform( nodes_positions )\n    else:\n        data2 = data\n        nodes_positions2 = ( nodes_positions )\n        \n    if plot_data == True:\n        if data is not None:\n            if data_color is None:\n                plt.scatter(data2[:,0],data2[:,1], c = default_data_color, linewidth = data_linewidth , alpha = data_transparency_alpha)# ,cmap=plt.cm.Paired) # ,c=np.array(irx) \n            else:\n                #plt.scatter(data2[:,0],data2[:,1] ,cmap=plt.cm.Paired,c= data_color, linewidth = data_linewidth, alpha = data_transparency_alpha ) \n                if  (color_dict is not None ): # also we already have: data_color is not None\n                    data_color_effective, cmap_loc = get_data_color_effective_and_color_map(data_color, \n                            color_dict = color_dict, default_data_color = 'black' )\n                    plt.scatter(data2[:,0],data2[:,1], c = data_color_effective, cmap = cmap_loc,\n                                linewidth = data_linewidth , alpha = data_transparency_alpha)# ,cmap=plt.cm.Paired) # ,c=np.array(irx) \n                else:\n                    if palette is None:\n                        sns.scatterplot( x=data2[:,0], y=data2[:,1], hue = data_color )# ,   palette=['tab:orange', 'tab:green','tab:pink','tab:brown','tab:purple']  )\n                    else:\n                        sns.scatterplot( x=data2[:,0], y=data2[:,1], hue = data_color,   palette=palette)# ['tab:orange', 'tab:green','tab:pink','tab:brown','tab:purple']  )\n\n            if flag_make_dim_reduction:\n                plt.xlabel(str_dim_reduction+'1')\n                plt.ylabel(str_dim_reduction+'2')\n            \n    plt.scatter(nodes_positions2[:,0],nodes_positions2[:,1],c = graph_color, linewidth = graph_linewidth)#, cmap=plt.cm.Paired)\n\n    edgeCount = edges.shape[0]\n    for k in range(edgeCount):\n        n0 = edges[k,0]\n        n1 = edges[k,1]\n        x_line = [ nodes_positions2[n0,0],  nodes_positions2[n1,0] ]\n        y_line = [ nodes_positions2[n0,1],  nodes_positions2[n1,1] ]\n        plt.plot(x_line, y_line, graph_color, linewidth = graph_linewidth) # 'black')\n\n    if showNodeNumbers:\n        for i in range(nodes_positions2.shape[0]):\n            plt.text(nodes_positions2[i,0],nodes_positions2[i,1],str(i),fontsize=20,bbox=dict(facecolor='grey', alpha=0.5))    \n    \nedges = np.array([ [0,1],[1,2],[2,0] ] )\nnodes_positions = np.random.rand(3,10) # 3 points in 10d space\nplot_graph(edges, nodes_positions)\nplt.title('Example graph plot with  plot_graph function')\nplt.show()","8261fdf5":"X = np.random.rand(100,10)","f3c65d78":"data_color = ['A'+str(i%5) for i in range(len(X) ) ]\ncolor_dict = {'A0':'red','A2':'green','A3':'blue' } \nplot_graph(edges, nodes_positions, data = X, data_color = data_color, color_dict = color_dict,\n           data_linewidth = 10 , data_transparency_alpha = 0.5)\nplt.title('Example graph plot with  plot_graph function')\nplt.show()\n\ndata_color = [i%5 for i in range(len(X) ) ]\nplot_graph(edges, nodes_positions, data = X, data_color = data_color)\nplt.title('Example graph plot with  plot_graph function')\nplt.show()\n\nplot_graph(edges, nodes_positions, data = X)\nplt.title('Example graph plot with  plot_graph function')\nplt.show()","480a5f54":"plot_graph(edges, nodes_positions, data = X)\nplt.title('Example graph plot with  plot_graph function')\nplt.show()","b2a10aa2":"import matplotlib.pyplot as plt\n\nX = np.random.rand(10,3)\nX[:]","45e22c19":"import matplotlib.colors\nc = matplotlib.colors.ListedColormap( [[1,0,0],[0,1,0],[0,0,1]] )\nc = matplotlib.colors.ListedColormap( ['red','green','blue'] )\n\nplt.scatter(np.arange(10),np.arange(10), c = (np.arange(10)%3) , cmap = c)#  ['red','green','blue'] )","14836618":"import matplotlib.colors\nc = matplotlib.colors.ListedColormap( [[1,0,0],[0,1,0],[0,0,1]] )\nc = matplotlib.colors.ListedColormap( ['red','green','blue'] )\n\nplt.scatter(np.arange(10),np.arange(10), c = (np.arange(10)%2) , cmap = c)#  ['red','green','blue'] )","989c0510":"# Key function","2f622ec4":"# What is about ? \n\nUpdating function to plot graphs AND DATA (on the same plot), in context of ElPiGraph and ClinTraj packages. \n\n\n\n\nVersions\n\n\n2 Major update  of the main function - plot_graphplot_graph - introduce new params \"color_dict\" and \"default_data_color\", and updating flexibility of the param \"data_color\".\nNow data_color can be not only numeric but for example text or both, and color_dict specifies correspondence,\nbetween values of data_color and colors. If color_dict not speficied (None - default). Then data_color still should be numeric. \n\n\n1 just testing how to manage colors for plt.scatterplot\n\n","40e0064c":"# Use examples","703f230c":"# Experiment how to set colormap for scatterplot"}}