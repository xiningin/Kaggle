{"cell_type":{"592be51d":"code","c8ca58d3":"code","97d0d0e0":"code","5865b3e0":"code","0fb03960":"code","853316fb":"code","4ce22d90":"code","e391dba3":"code","50d6e5f9":"code","6bafdd89":"code","9d374143":"code","bacc2ab9":"code","9996fa0c":"code","5c93133d":"code","61035ebd":"code","fadc2e94":"code","4c562488":"code","daa08e89":"code","7e8f102d":"code","1523cbde":"code","40e4191e":"code","e0d0ca50":"code","0d74b946":"code","5dbeedee":"code","ebfe2186":"code","567d1094":"code","75051e86":"code","069f4d6a":"code","3ab38a19":"code","c127a9eb":"code","88ee2f3e":"code","39deb0d3":"code","9c456c39":"code","3afa80a9":"code","f34f470b":"code","2360beec":"code","7e55e9ca":"code","6267de10":"code","e227f4dc":"code","b6940317":"code","31e23782":"code","962ba2b5":"code","a80e5225":"code","c10ee41f":"code","cebdb8fd":"code","32e3578e":"code","48eb0623":"code","7ddd2492":"code","b7b3d7e0":"code","08d8f916":"code","796c1aa3":"code","69f04b40":"code","20fe6f4b":"code","3e1b785c":"code","db7c0492":"code","bfea82e2":"code","26a62bc2":"code","48fc2ac2":"code","331162cf":"code","0f6934d5":"code","a04b9875":"code","bacc8a6d":"code","6b5234b2":"code","715fa42a":"code","50495573":"code","442884ab":"code","3a1c58e4":"code","cd647544":"code","97dd6734":"code","05aee5d8":"code","8aca4040":"code","d1ff09a8":"code","6c8343bb":"code","b2629cdb":"code","21a63e80":"code","1ac2d2b3":"code","cb570682":"code","6b2eb414":"code","da420320":"code","8f4cad03":"code","52cd3dc8":"code","305fcb7a":"code","113ea983":"code","84b7528f":"code","9152aad0":"code","a2157e6c":"code","8d607a2b":"code","6c9de5bd":"code","ffd95331":"code","735e0aeb":"code","45ee1857":"code","f4484ebb":"code","dea73de1":"code","d9fd68bb":"code","7744fae8":"code","66fc1bcd":"code","97b9fe28":"code","76df930e":"code","60017492":"code","23b52011":"code","9c2061a2":"code","0544b9ce":"code","82ef1391":"code","6b68f76f":"code","f356feb6":"markdown","fc64fdc3":"markdown","c1cc6bd5":"markdown","9762e836":"markdown","52a0bd1d":"markdown","98bba465":"markdown","eeacd01e":"markdown","40e0eb73":"markdown","edae4c69":"markdown","176dba75":"markdown","3b0eb916":"markdown","559fca2a":"markdown","606fd55c":"markdown","906f613f":"markdown","7a9f42c2":"markdown","02f469e1":"markdown","f7334682":"markdown","84d28c7e":"markdown","766ef39f":"markdown","c259bcb3":"markdown","392103b5":"markdown","ae712910":"markdown","5795e90b":"markdown","bde02180":"markdown","04e3c081":"markdown","b59999ab":"markdown","c38237cf":"markdown","89546040":"markdown","e48e0155":"markdown","cac1c930":"markdown","690e86b9":"markdown","cdb99d6b":"markdown","c011e859":"markdown","eff8d4d9":"markdown","bd58235f":"markdown","6cd3b599":"markdown","4753aec1":"markdown","0f289c15":"markdown","cca16d69":"markdown","c8d1df51":"markdown","ead22442":"markdown","7d1a6faa":"markdown","e88cd390":"markdown","ca09a3f6":"markdown","c99ed2da":"markdown","6fcb337f":"markdown","0621d640":"markdown","6bb99681":"markdown","c3a7a23b":"markdown","3615477a":"markdown","997095c7":"markdown","5f9c4fbe":"markdown","190b6af5":"markdown","d9623d77":"markdown","aaadf196":"markdown","c5fb76c4":"markdown","5654abaf":"markdown"},"source":{"592be51d":"#importing basic libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","c8ca58d3":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","97d0d0e0":"train.head()","5865b3e0":"train.shape, test.shape","0fb03960":"train.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis = 1, inplace = True)","853316fb":"train.isna().sum()","4ce22d90":"train['Age'].fillna(train['Age'].mean(), inplace = True)","e391dba3":"train.Embarked.value_counts()","50d6e5f9":"train['Embarked'].fillna('S', inplace = True)","6bafdd89":"train.isna().sum()","9d374143":"train.Survived.value_counts()","bacc2ab9":"train.Survived.value_counts().plot(kind = 'bar', color = ['lightblue', 'lightgreen']);","9996fa0c":"train.Sex.value_counts()","5c93133d":"train.Sex.value_counts().plot(kind = 'bar', color = ['skyblue', 'plum']);","61035ebd":"pd.crosstab(train.Sex, train.Survived)","fadc2e94":"pd.crosstab(train.Sex, train.Survived).plot(kind = 'bar', color = ['slategray', 'salmon']);","4c562488":"pd.crosstab(train.Pclass, train.Survived)","daa08e89":"pd.crosstab(train.Pclass, train.Survived).plot(kind = 'bar', color = ['slategray', 'lightcoral']);","7e8f102d":"train.Embarked.value_counts()","1523cbde":"sns.countplot(x = 'Embarked', data = train);","40e4191e":"sns.displot(x = 'Age', data = train, color = 'cadetblue', kde = True);","e0d0ca50":"sns.displot(x = 'Fare', data = train, kind = 'kde');","0d74b946":"sns.lmplot(x = 'Age', y = 'Survived', hue = 'Pclass', data = train);","5dbeedee":"correlation_matrix = train.corr()\nplt.figure(figsize=(15, 10))\nsns.heatmap(correlation_matrix, \n            annot=True, \n            linewidths=0.5, \n            fmt= \".2f\", \n            cmap=\"YlGnBu\");","ebfe2186":"train['family'] = train['SibSp'] + train['Parch']","567d1094":"train.head(10)","75051e86":"train['Age']=np.log(train['Age']+1)","069f4d6a":"train['Age'].plot(kind = 'density', figsize=(10, 6));","3ab38a19":"train['Fare']=np.log(train['Fare']+1)","c127a9eb":" train['Fare'].plot(kind = 'density', figsize=(10, 6));","88ee2f3e":"train.head(10)","39deb0d3":"x = train.drop('Survived',  axis = 1)\ny = train['Survived']","9c456c39":"x.shape","3afa80a9":"x.head()","f34f470b":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\n\ncategorical_features = ['Sex', 'Embarked', 'Pclass']\nonehotencode = OneHotEncoder()\n\ntransformer = ColumnTransformer([('Encoder', onehotencode, categorical_features)], remainder = 'passthrough')\n\nencoded = transformer.fit_transform(x)","2360beec":"encoded_df = pd.DataFrame(encoded)","7e55e9ca":"encoded_df.shape","6267de10":"encoded_df.head()","e227f4dc":"encoded_x = encoded_df.drop([0, 2, 5], axis = 1)","b6940317":"encoded_x.head()","31e23782":"encoded_x.shape","962ba2b5":"y.shape","a80e5225":"test['family'] = test['SibSp'] + test['Parch']","c10ee41f":"test.head()","cebdb8fd":"test['Age']=np.log(test['Age']+1)","32e3578e":"test['Fare']=np.log(test['Fare']+1)","48eb0623":"test['Age'].plot(kind = 'density', figsize=(10, 6));","7ddd2492":"test['Fare'].plot(kind = 'density', figsize=(10, 6));","b7b3d7e0":"test.head(10)","08d8f916":"test.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis = 1, inplace = True)","796c1aa3":"test.head(10)","69f04b40":"test.isna().sum()","20fe6f4b":"test['Age'].fillna(test['Age'].mean(), inplace = True)\ntest['Fare'].fillna(test['Fare'].mean(), inplace = True)","3e1b785c":"test.isna().sum()","db7c0492":"categorical_features = ['Sex', 'Embarked', 'Pclass']\nonehotencode = OneHotEncoder()\n\ntransformer = ColumnTransformer([('Encoder', onehotencode, categorical_features)], remainder = 'passthrough')\n\nencoded_test = transformer.fit_transform(test)","bfea82e2":"encoded_test = pd.DataFrame(encoded_test)","26a62bc2":"encoded_test.head()","48fc2ac2":"encoded_test_x = encoded_test.drop([0, 2, 5], axis = 1)","331162cf":"encoded_test_x.head()","0f6934d5":"encoded_test_x.shape","a04b9875":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(encoded_x,y,random_state = 31)","bacc8a6d":"len(x_train), len(x_test), len(y_train), len(y_test)","6b5234b2":"x_train.shape","715fa42a":"y_train.shape","50495573":"from sklearn.linear_model import LogisticRegression\nlog_clf = LogisticRegression(max_iter = 1000, random_state = 4)\nlog_clf.fit(x_train, y_train)\nlog_score = log_clf.score(x_test, y_test)\nlog_score","442884ab":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV","3a1c58e4":"log_grid = {'C': np.logspace(-4, 4),\n            'solver': ['liblinear'],\n            'max_iter': np.arange(100, 2000, 100),\n            'penalty':['l1', 'l2']\n           }\n\nlog_gscv = GridSearchCV(LogisticRegression(max_iter = 1000, random_state = 7),\n                          param_grid=log_grid,\n                          cv=5,\n                          verbose=True)\n\nlog_gscv.fit(x_train, y_train)\nlog_tuned_score = log_gscv.score(x_test, y_test)\nlog_tuned_score","cd647544":"log_gscv.best_params_","97dd6734":"from sklearn.metrics import classification_report\ny_preds = log_clf.predict(x_test)\nprint(classification_report(y_test, y_preds))","05aee5d8":"from sklearn.metrics import plot_roc_curve\nplot_roc_curve(log_clf, x_test, y_test)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic Curve');","8aca4040":"from sklearn import svm\nsvc_clf = svm.SVC(random_state = 7)\nsvc_clf.fit(x_train, y_train)\nsvc_score = svc_clf.score(x_test, y_test)\nsvc_score","d1ff09a8":"svc_grid = {'C': np.logspace(-5, 5, 20),\n            'kernel': ['rbf'],\n            'degree': [2,3,4]\n           }\n\nsvc_gscv = GridSearchCV(svm.SVC(random_state = 31),\n                        param_grid=svc_grid,\n                        cv=5,\n                        verbose=True)\n\nsvc_gscv.fit(x_train, y_train)\nsvc_tuned_score = log_gscv.score(x_test, y_test)\nsvc_tuned_score","6c8343bb":"svc_gscv.best_params_","b2629cdb":"y_preds = svc_clf.predict(x_test)\nprint(classification_report(y_test, y_preds))","21a63e80":"from sklearn.metrics import plot_roc_curve\nplot_roc_curve(svc_clf, x_test, y_test)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic Curve');","1ac2d2b3":"from sklearn.neighbors import KNeighborsClassifier\n\nknn_clf = KNeighborsClassifier()\nknn_clf.fit(x_train, y_train)\nknn_score = knn_clf.score(x_test, y_test)\nknn_score","cb570682":"knn_grid = {'n_neighbors': np.arange(2, 15),\n            'leaf_size': [10, 15, 20, 25, 30, 35, 40, 45, 50],\n            'p':[1,2,3,4,5], \n            'algorithm': ['auto', 'ball_tree', 'kd_tree']}\n\nknn_gscv = GridSearchCV(KNeighborsClassifier(),\n                        param_grid=knn_grid,\n                        cv=5,\n                        verbose=True)\n\nknn_gscv.fit(x_train, y_train)\nknn_tuned_score = knn_gscv.score(x_test, y_test)\nknn_tuned_score","6b2eb414":"knn_gscv.best_params_","da420320":"y_preds = knn_clf.predict(x_test)\nprint(classification_report(y_test, y_preds))","8f4cad03":"from sklearn.metrics import plot_roc_curve\nplot_roc_curve(knn_clf, x_test, y_test)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic Curve');","52cd3dc8":"from sklearn.ensemble import RandomForestClassifier\n\nrand_clf = RandomForestClassifier(n_estimators=1000, random_state = 35)\nrand_clf.fit(x_train, y_train)\nranf_score = rand_clf.score(x_test, y_test)\nranf_score","305fcb7a":"rfcv_grid = {\"n_estimators\": np.arange(500, 2000, 100),\n           \"max_depth\": [None, 3, 5, 10],\n           \"min_samples_split\": np.arange(2, 20, 2),\n           \"min_samples_leaf\": np.arange(1, 20, 2)}\n\nrfcv_clf = RandomizedSearchCV(RandomForestClassifier(),\n                           param_distributions = rfcv_grid,\n                           cv=5,\n                           n_iter = 100,\n                           verbose=True)\n\nrfcv_clf.fit(x_train, y_train)\nranf_tuned_score = rfcv_clf.score(x_test, y_test)\nranf_tuned_score","113ea983":"rfcv_clf.best_params_","84b7528f":"y_preds = rfcv_clf.predict(x_test)\nprint(classification_report(y_test, y_preds))","9152aad0":"from sklearn.metrics import plot_roc_curve\nplot_roc_curve(rfcv_clf, x_test, y_test)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic Curve');","a2157e6c":"from sklearn.ensemble import GradientBoostingClassifier\ngbc = GradientBoostingClassifier()\ngbc.fit(x_train, y_train)\ngbc_score = gbc.score(x_test, y_test)\ngbc_score","8d607a2b":"gbc_grid = {'loss': ['deviance', 'exponential'],\n            'learning_rate': [0.1,0.01],\n            'n_estimators': [100, 200, 500, 1000],\n            'min_samples_split': [2, 4, 6, 8, 10],\n            'min_samples_leaf': [1, 2, 3, 5],\n            'max_depth': [1, 2, 3]}\n\n\ngbc_clf = GridSearchCV(GradientBoostingClassifier(),\n                      param_grid = gbc_grid,\n                           cv=5,\n                           verbose=True)\ngbc_clf.fit(x_train, y_train)\ngbc_tuned_score = gbc_clf.score(x_test, y_test)\ngbc_tuned_score","6c9de5bd":"gbc_clf.best_params_","ffd95331":"y_preds = gbc.predict(x_test)\nprint(classification_report(y_test, y_preds))","735e0aeb":"from sklearn.metrics import plot_roc_curve\nplot_roc_curve(gbc, x_test, y_test)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic Curve');","45ee1857":"from catboost import CatBoostClassifier\ncbc = CatBoostClassifier(random_seed = 31)\ncbc.fit(x_train, y_train, verbose=False);\ncbc_score = cbc.score(x_test, y_test);\ncbc_score","f4484ebb":"cbc_grid = {'iterations':[10, 100, 200, 500, 1000],\n            'learning_rate': [0.1, 0.01]}\n\n\ncbc_clf = GridSearchCV(CatBoostClassifier(random_state = 31),\n                      param_grid = cbc_grid,\n                           cv=5,\n                           verbose=True)\n\ncbc_clf.fit(x_train, y_train, verbose=False)\ncbc_tuned_score = cbc_clf.score(x_test, y_test)\ncbc_tuned_score","dea73de1":"cbc_clf.best_params_","d9fd68bb":"y_preds = cbc_clf.predict(x_test)\nprint(classification_report(y_test, y_preds))","7744fae8":"from sklearn.metrics import plot_roc_curve\nplot_roc_curve(cbc_clf, x_test, y_test)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic Curve');","66fc1bcd":"from lightgbm import LGBMClassifier\nlgbm = LGBMClassifier()\nlgbm.fit(x_train, y_train)\nlgbm_score = lgbm.score(x_test, y_test)\nlgbm_score","97b9fe28":"lgbm_grid = {'num_leaves': [10, 15, 30, 31, 40, 45],\n             'n_estimators':[10, 50, 100, 200],\n             'learning_rate': [0.1, 0.01],\n             'min_child_samples': [5, 10, 15, 20, 25]}\n\n\nlgbm_clf = GridSearchCV(LGBMClassifier(random_state = 31),\n                           param_grid = lgbm_grid,\n                           cv=5,\n                           verbose=True)\n\nlgbm_clf.fit(x_train, y_train, verbose=False)\nlgbm_tuned_score = lgbm_clf.score(x_test, y_test)\nlgbm_tuned_score","76df930e":"lgbm_clf.best_params_","60017492":"y_preds = lgbm.predict(x_test)\nprint(classification_report(y_test, y_preds))","23b52011":"from sklearn.metrics import plot_roc_curve\nplot_roc_curve(lgbm, x_test, y_test)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic Curve');","9c2061a2":"score = [{'Model':'Logistic Regression', 'Score': log_score, 'Tuned_score': log_tuned_score}, \n         {'Model':'SVC', 'Score': svc_score, 'Tuned_score': svc_tuned_score},\n         {'Model':'KNN', 'Score': knn_score, 'Tuned_score': knn_tuned_score},\n         {'Model':'Random Forest', 'Score': ranf_score, 'Tuned_score': ranf_tuned_score},\n         {'Model':'Gradient Boosting', 'Score': gbc_score, 'Tuned_score': gbc_tuned_score},\n         {'Model':'CatBoost', 'Score': cbc_score, 'Tuned_score': cbc_tuned_score},\n         {'Model':'LGBM', 'Score': lgbm_score, 'Tuned_score': lgbm_tuned_score}]","0544b9ce":"pd.DataFrame(score, columns=['Model','Score','Tuned_score'])","82ef1391":"final_preds = svc_clf.predict(encoded_test_x)","6b68f76f":"sub_data = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nfinal_data = {'PassengerId': sub_data.PassengerId, 'Survived': final_preds}\nfinal_submission = pd.DataFrame(data=final_data)\nfinal_submission.to_csv('submission_file_titanic.csv',index =False)","f356feb6":"# Feature Engineering in test data","fc64fdc3":"## Data Preprocessing on Train data\n\nRemoving columns that we don't need","c1cc6bd5":"### Random Forest hyperparameter tuning","9762e836":"Let's check how many male and female was there","52a0bd1d":"Removing skewness in `Age` column","98bba465":"We succesfully removed all the null values","eeacd01e":"**Avoiding Dummy variables**","40e0eb73":"# Preparing test set","edae4c69":"Let's split our dataset","176dba75":"Let's check again for null values.","3b0eb916":"# GradientBoostingClassifier","559fca2a":"# CatBoost","606fd55c":"### KNeighbors Classifier Hyperparameter Tuning","906f613f":"Let's view all model score as a dataframe to get a good overview","7a9f42c2":"**Looks like SVC classifier is doing best. So, let's predict with this**.","02f469e1":"**Nice!**\n\nWe don't any null values now","f7334682":"`Southampton` is the top port of embarkation. So, let's fill the null values with `S`","84d28c7e":"### Evaluating CatBoost model","766ef39f":"Let's now find a relation among age, survived and pclass columns","c259bcb3":"Let's create x and y matrix of features","392103b5":"### LGBM hyperparameter tuning","ae712910":"### Evaluating logistic regression model","5795e90b":"We have null values in two columns. Let's take care of this problem.\n\nLet's fill the null values of age columns with the mean values","bde02180":"# Modeling","04e3c081":"Checking for null values","b59999ab":"Let's look at our age column","c38237cf":"# LGBM","89546040":"let's check out survivors w.r.t sex","e48e0155":"### CatBoostClassifier hyperparameter tuning","cac1c930":"# Creating file for submission ","690e86b9":"### Evaluating LGBM model","cdb99d6b":"### Evaluating with SVC ","c011e859":"Removing skewness in `Fare` column","eff8d4d9":"# Feature Engineering in train data","bd58235f":"We have two `categorical` columns. Let's take care of them now.","6cd3b599":"Let's make a dictionary of all models and accuracy","4753aec1":"Removing skewness in `Age` column","0f289c15":"# Logistic Regression","cca16d69":"### SVC Hyperparameter tuning","c8d1df51":"### GradientBoostingClassifier hyperparameter tuning","ead22442":"# KNeighbors Classifier","7d1a6faa":"Let's check the Port of Embarkation","e88cd390":"**`If this notebook was useful to you. Don't forget to upvote. Thanks`**","ca09a3f6":"Removing skewness in `Fare` column","c99ed2da":"### Evaluating gradient boosting model","6fcb337f":"Checking for null values","0621d640":"# Data Exploration on Train set","6bb99681":"### Evaluating KNN model","c3a7a23b":"Survivors w.r.t pclass","3615477a":"As before we now have to take care of `categorical columns`","997095c7":"### Evaluating Random Forest model","5f9c4fbe":"Avoiding dummy variable trap","190b6af5":"Now we have to take care of null values of Embarked column.\n\nLet's first check which embarkation port we have most in our dataset.","d9623d77":"Let's first check how many people survived","aaadf196":"# Linear SVC","c5fb76c4":"# Random Forest","5654abaf":"### Logistic Regression Hyperparameter Tuning"}}