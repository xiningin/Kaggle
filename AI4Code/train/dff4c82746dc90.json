{"cell_type":{"a27c112b":"code","1b0fcb17":"code","004f5443":"code","13b78995":"code","0ff61918":"code","212c3005":"code","c79df8b3":"code","64e7c071":"code","26a5b768":"code","c1014364":"code","0971bc73":"code","0bd28ca2":"code","9b887b1b":"code","28f0d330":"code","52eb5ee2":"code","ba205305":"code","6ff44591":"code","d9ca95fa":"code","c1b3211d":"code","24fef1c3":"code","529a8ec1":"code","5221062b":"code","4f976419":"code","2c7795c8":"code","be82fd54":"code","e81cbf9b":"code","86da82e9":"code","0ade31fb":"code","cfb34652":"code","900cb196":"code","c1eb31c8":"code","4811f287":"code","0fdf3256":"code","cdd3770f":"code","e6829343":"code","43e94ab3":"code","a2531b40":"code","22d0675a":"markdown","10b87ece":"markdown","29b6e79f":"markdown","7e590c15":"markdown","5889cc2b":"markdown","b21ceefb":"markdown","8a15ade2":"markdown","0302c980":"markdown","48a1df88":"markdown","344b93f5":"markdown","49176d4f":"markdown","1a31eb42":"markdown","98dd16ef":"markdown","174dfb75":"markdown","fc014562":"markdown","71ef181e":"markdown","49e0dbb2":"markdown","550a4ac7":"markdown","c797fc6e":"markdown","4be14236":"markdown","5b213ad8":"markdown","611f2219":"markdown","914bfafd":"markdown","a41d4b01":"markdown","fc779fb9":"markdown","0852fa3e":"markdown","d55d8dcd":"markdown","8382d1fc":"markdown","9f2cb8e7":"markdown","8b83cfba":"markdown","9e9a0f0e":"markdown"},"source":{"a27c112b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline  \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1b0fcb17":"train = pd.read_csv('\/kaggle\/input\/GiveMeSomeCredit\/cs-training.csv', index_col=0)\ntest = pd.read_csv(\"\/kaggle\/input\/GiveMeSomeCredit\/cs-test.csv\", index_col=0)","004f5443":"print(train.shape)\nprint(test.shape)\ntrain.describe()","13b78995":"train.isnull().sum()\n","0ff61918":"train.isnull().sum()\/train.shape[0]","212c3005":"train['MonthlyIncome'] = train['MonthlyIncome'].fillna(train['MonthlyIncome'].mean())\ntrain = train.dropna()\ntrain.info()","c79df8b3":"plt.boxplot(train['RevolvingUtilizationOfUnsecuredLines'])\nplt.show()\ntrain['RevolvingUtilizationOfUnsecuredLines'].describe()","64e7c071":"q1=train['RevolvingUtilizationOfUnsecuredLines'].quantile(0.25)  #\u8ba1\u7b97\u4e0a\u56db\u5206\u4f4d\u6570\nq3=train['RevolvingUtilizationOfUnsecuredLines'].quantile(0.75)  #\u8ba1\u7b97\u4e0b\u56db\u5206\u4f4d\u6570\niqr=q3-q1\nlow=q1-1.5*iqr\nup=q3+1.5*iqr\ntrain=train[(train['RevolvingUtilizationOfUnsecuredLines']>low) & (train['RevolvingUtilizationOfUnsecuredLines']< up)]\n\n\nplt.boxplot(train['RevolvingUtilizationOfUnsecuredLines'])\nplt.show()\ntrain['RevolvingUtilizationOfUnsecuredLines'].describe()","26a5b768":"plt.boxplot(train['age'])\nplt.show()\ntrain['age'].describe()","c1014364":"train = train[train['age']>0]\nplt.boxplot(train['age'])\nplt.show()\ntrain['age'].describe()","0971bc73":"plt.boxplot(train['NumberOfTime30-59DaysPastDueNotWorse'])\nplt.show()\ntrain['NumberOfTime30-59DaysPastDueNotWorse'].describe()","0bd28ca2":"fig=plt.figure(figsize=(5,5))\na=fig.add_subplot(1,1,1)\na.boxplot([train['NumberOfTimes90DaysLate'],train['NumberOfTime60-89DaysPastDueNotWorse']])\nplt.show()","9b887b1b":"train = train[train['NumberOfTime30-59DaysPastDueNotWorse']<80]\ntrain = train[train['NumberOfTimes90DaysLate']<80]\ntrain = train[train['NumberOfTime60-89DaysPastDueNotWorse']<80]\n","28f0d330":"plt.boxplot(train['DebtRatio'])\nplt.show()\ntrain['DebtRatio'].describe()","52eb5ee2":"q1=train['DebtRatio'].quantile(0.25)  #\u8ba1\u7b97\u4e0a\u56db\u5206\u4f4d\u6570\nq3=train['DebtRatio'].quantile(0.75)  #\u8ba1\u7b97\u4e0b\u56db\u5206\u4f4d\u6570\niqr=q3-q1\nlow=q1-1.5*iqr\nup=q3+1.5*iqr\ntrain=train[(train['DebtRatio']>low) & (train['DebtRatio']< up)]\n\n\nplt.boxplot(train['DebtRatio'])\nplt.show()\ntrain['DebtRatio'].describe()","ba205305":"plt.boxplot(train['MonthlyIncome'])\nplt.show()\ntrain['MonthlyIncome'].describe()","6ff44591":"plt.boxplot(train['NumberOfOpenCreditLinesAndLoans'])\nplt.show()\ntrain['NumberOfOpenCreditLinesAndLoans'].describe()","d9ca95fa":"q1=train['NumberOfOpenCreditLinesAndLoans'].quantile(0.25)  #\u8ba1\u7b97\u4e0a\u56db\u5206\u4f4d\u6570\nq3=train['NumberOfOpenCreditLinesAndLoans'].quantile(0.75)  #\u8ba1\u7b97\u4e0b\u56db\u5206\u4f4d\u6570\niqr=q3-q1\nlow=q1-1.5*iqr\nup=q3+1.5*iqr\ntrain=train[(train['NumberOfOpenCreditLinesAndLoans']>low) & (train['NumberOfOpenCreditLinesAndLoans']< up)]\n\n\nplt.boxplot(train['NumberOfOpenCreditLinesAndLoans'])\nplt.show()\ntrain['NumberOfOpenCreditLinesAndLoans'].describe()","c1b3211d":"plt.boxplot(train['NumberRealEstateLoansOrLines'])\nplt.show()\ntrain['NumberRealEstateLoansOrLines'].describe()","24fef1c3":"q1=train['NumberRealEstateLoansOrLines'].quantile(0.25)  #\u8ba1\u7b97\u4e0a\u56db\u5206\u4f4d\u6570\nq3=train['NumberRealEstateLoansOrLines'].quantile(0.75)  #\u8ba1\u7b97\u4e0b\u56db\u5206\u4f4d\u6570\niqr=q3-q1\nlow=q1-1.5*iqr\nup=q3+1.5*iqr\ntrain=train[(train['NumberRealEstateLoansOrLines']>low) & (train['NumberRealEstateLoansOrLines']< up)]\n\n\nplt.boxplot(train['NumberRealEstateLoansOrLines'])\nplt.show()\ntrain['NumberRealEstateLoansOrLines'].describe()","529a8ec1":"plt.boxplot(train['NumberOfDependents'])\nplt.show()\ntrain['NumberOfDependents'].describe()","5221062b":"\ntrain.hist(figsize=(20,15))\n","4f976419":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\nfrom sklearn.model_selection import StratifiedKFold\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\n","2c7795c8":"\nx = train.drop(['SeriousDlqin2yrs'],axis=1)\ny = train['SeriousDlqin2yrs']\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 20)\n","be82fd54":"\nrf = RandomForestClassifier()\nresult = cross_val_score(rf,x_train,y_train,scoring='roc_auc',cv=StratifiedKFold(n_splits=10))\nrfAuc = result.mean()\nrfAuc","e81cbf9b":"svc = SVC()\nresult = cross_val_score(svc,x_train,y_train,scoring='roc_auc',cv=StratifiedKFold(n_splits=10))\nsucAuc = result.mean()\nsucAuc","86da82e9":"perceptron = Perceptron()\nresult = cross_val_score(perceptron,x_train,y_train,scoring='roc_auc',cv=StratifiedKFold(n_splits=10))\nperceptronAuc = result.mean()\nperceptronAuc","0ade31fb":"tree = DecisionTreeClassifier()\nresult = cross_val_score(tree,x_train,y_train,scoring='roc_auc',cv=StratifiedKFold(n_splits=10))\ntreeAuc = result.mean()\ntreeAuc","cfb34652":"lgbm = LGBMClassifier()\nresult = cross_val_score(lgbm,x_train,y_train,scoring='roc_auc',cv=StratifiedKFold(n_splits=10))\nlgbmAuc = result.mean()\nlgbmAuc","900cb196":"xg = XGBClassifier()\nresult = cross_val_score(xg,x_train,y_train,scoring='roc_auc',cv=StratifiedKFold(n_splits=10))\nxgAuc = result.mean()\nxgAuc","c1eb31c8":"models = pd.DataFrame({\n    'Model': ['Random Forest', 'Support Vector Machines', 'Perceptron', \n              'Decision Tree', 'lgbm',\n              'xgboost'],\n    'CV-Auc': [rfAuc, sucAuc, perceptronAuc,treeAuc,\n             lgbmAuc, xgAuc]\n})\nmodels.sort_values(by='CV-Auc', ascending=False)","4811f287":"sns.countplot(y)","0fdf3256":"from sklearn.model_selection import GridSearchCV\nlgbm = LGBMClassifier()\n\n## Search grid for optimal parameters\nhyper_space = {'n_estimators': [1000, 1500, 2000],\n               'learning_rate' : [0.01,0.02,0.03]\n              }\n\n# Cross validate model with Kfold stratified cross val\nkfold = StratifiedKFold(n_splits=10)\n\ngrid= GridSearchCV(lgbm, param_grid=hyper_space, cv=kfold, scoring=\"roc_auc\", verbose=1)\n\ngrid.fit(x_train, y_train)\n\nbestEL = grid.best_params_\n","cdd3770f":"from sklearn.model_selection import GridSearchCV\nlgbm = LGBMClassifier()\n\n## Search grid for optimal parameters\nhyper_space = {'max_depth':  [4, 5, 8],\n               'num_leaves': [15, 31, 63],\n              }\n\n# Cross validate model with Kfold stratified cross val\nkfold = StratifiedKFold(n_splits=10)\n\ngrid = GridSearchCV(lgbm, param_grid=hyper_space, cv=kfold, scoring=\"roc_auc\", verbose=1)\n\ngrid.fit(x_train, y_train)\n\nbestMN =  grid.best_params_\n\n","e6829343":"print(bestEL)\nprint(bestMN)","43e94ab3":"from sklearn.metrics import roc_auc_score\nlgbm = LGBMClassifier(learning_rate = 0.01,n_estimators=1000,max_depth = 5,num_leaves=15)\nlgbm.fit(x_train,y_train)\npredict = lgbm.predict_proba(x_test)[:,1]\nroc_auc_score(y_test, predict)","a2531b40":"x = test.drop(['SeriousDlqin2yrs'],axis=1)\ny = lgbm.predict_proba(x)[:,1]\nids = np.arange(1,101504)\nsub = pd.DataFrame({'Id': ids, 'Probability':y})\nsub.to_csv(\"submission.csv\", index=False)\n","22d0675a":"\u5229\u7528\u8c03\u4f18\u540e\u7684\u53c2\u6570\u8bad\u7ec3\u6a21\u578b","10b87ece":"* \u901a\u8fc7\u8868\u683c\u4ee5\u53ca\u7bb1\u7ebf\u56fe\uff0c\u6211\u4eec\u53d1\u73b0\u5176\u5177\u6709outline\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u516c\u5f0f\u8fdb\u884c\u5f02\u5e38\u503c\u5220\u9664\u5904\u7406\n","29b6e79f":"3.2.4 DebtRatio\n","7e590c15":"* \u5bf9\u6bd4\u5404\u4e2a\u6a21\u578b\u540e\u6211\u4eec\u53d1\u73b0 SVM\uff0cDecision Tree Perceptron\u7684\u5206\u6570\u975e\u5e38\u4f4e\uff0c\u5176\u539f\u56e0\u901a\u8fc7\u67e5\u770by\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5176\u5206\u5e03\u4e0d\u5e73\u8861\uff0c\u5bfc\u81f4\u6a21\u578b\u7684\u6b63\u786e\u7387\u4f4e\u3002\u901a\u8fc7\u5bf9\u6bd4\u5176\u4ed6\u6a21\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0lgbm\u5177\u6709\u6700\u597d\u6570\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u6700\u540e\u5229\u7528lgbm\u8fdb\u884c\u9884\u6d4b\u548c\u8c03\u53c2\n* \u8d85\u53c2\u6570\u4f18\u5316\uff1a'n_estimators','learning_rate','max_depth','num_leaves,\u6811\u7684\u6df1\u5ea6\u4e0e\u53f6\u5b50\u6811\u76f8\u5173\uff0c\u6240\u4ee5\u6211\u4eec\u8bb2\u5176\u5171\u540c\u5229\u7528k-fold\u4e3a10\u8fdb\u884c\u4f18\u5316\uff0c\u5269\u4f59\u53c2\u6570\u4e3a\u53e6\u5916\u4e00\u7ec4\u3002\u8fd9\u6837\u505a\u4e5f\u53ef\u4ee5\u66f4\u597d\u7684\u8282\u7701\u8fd0\u884c\u65f6\u95f4","5889cc2b":"# 1.\u5b9a\u4e49\u95ee\u9898\n\u901a\u8fc7\u4e2a\u4eba\u7684\u6570\u636e\u5224\u522b\u5c06\u6765\u7684\u8fd8\u6b3e\u80fd\u529b\u4e0e\u8fd8\u6b3e\u610f\u613f","b21ceefb":"* \u57fa\u4e8e\u4e0a\u8ff0\u7bb1\u7ebf\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e24\u4e2a\u53d8\u91cf\u62e5\u6709\u76f8\u540c\u7684\u5f02\u5e38\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u8fd9\u4e09\u6837\u53d8\u91cf\u7684\u5f02\u5e38\u503c\u8fdb\u884c\u5220\u9664","8a15ade2":"# \u4e03\u6b65\u6d41\u7a0b\n1. \u5b9a\u4e49\u95ee\u9898\n2. \u83b7\u53d6\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\n3. \u6574\u7406\uff0c\u51c6\u5907\uff0c\u6e05\u6d17\u6570\u636e\n4. \u63a2\u7d22\u6570\u636e\n5. \u5efa\u6a21\n6. \u53ef\u89c6\u5316\uff0c\u62a5\u544a\uff0c\u5448\u73b0\u95ee\u9898\u6c42\u89e3\u6b65\u9aa4\u548c\u6700\u7ec8\u7ed3\u8bba\n7. \u63d0\u4ea4","0302c980":"* \u4ece\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u5176\u8bad\u7ec3\u96c6\u670915000\u6761\u6570\u636e\u548c101503\u6761\u6d4b\u8bd5\u96c6\u6570\u636e","48a1df88":"* \u901a\u8fc7\u8868\u683c\u4ee5\u53ca\u7bb1\u7ebf\u56fe\uff0c\u6211\u4eec\u53d1\u73b0\u5176\u5177\u6709outline\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u516c\u5f0f\u8fdb\u884c\u5f02\u5e38\u503c\u5220\u9664\u5904\u7406\n","344b93f5":"3.2.2 Age","49176d4f":"# 5.\u6a21\u578b\u9884\u6d4b","1a31eb42":"## 4.\u63a2\u7d22\u6570\u636e","98dd16ef":"3.2.8 NumberOfDependents","174dfb75":"3.2.3 NumberOfTimePastDueNotWorse","fc014562":"* \u901a\u8fc7\u7bb1\u7ebf\u56fe\u4ee5\u53ca\u8868\u683c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u5176\u524d75%\u7684\u6570\u503c\u4e3a0.56\uff0c\u4f46\u662f\u6700\u5927\u503c\u4e3a50708\uff0c\u53ef\u4ee5\u5224\u65ad\u51fa\u6b21\u7279\u5f81\u6570\u636e\u5177\u6709\u5f02\u5e38\u503c\u3002\u5f02\u5e38\u503c\u7684\u5b9a\u4e49\u4e3a\u5728\u56db\u5206\u4f4d\u6570\u5916\u7684\u503c\uff0c\u901a\u8fc7\u516c\u5f0f\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u5176\u6570\u503c\uff0c\u5e76\u5bf9\u5f02\u5e38\u503c\u8fdb\u884c\u5220\u9664","71ef181e":"\n* 1. \u4ece\u8868\u683c\u4e2d\u53ef\u4ee5\u53d1\u73b0MonthlyIncome \u548cNumber of Dependents \u5177\u6709\u7f3a\u5931\u503c\uff0c\u5206\u522b\u4e3a29731\u548c3924\u3002 MonthlyIncome\u7684\u7f3a\u5931\u503c\u6bd4\u4f8b\u4e3a19.82%,numberofDependents\u7684\u7f3a\u5931\u503c\u4e3a2.6%\u3002\u7531\u4e8eMonthlyIncome\u7684\u7f3a\u5931\u503c\u6570\u91cf\u5927\uff0c\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5220\u9664\uff0c\u800c\u662f\u9700\u8981\u7528\u5e73\u5747\u503c\u8fdb\u884c\u66ff\u6362\uff0c\u800cNumberOfDependents\u7684\u7f3a\u5931\u503c\u5360\u6bd4\u4e0d\u5927,\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5220\u9664","49e0dbb2":"3.2.7 NumberRealEstateLoansOrLines","550a4ac7":"3.2.6 NumberOfOpenCreditLinesAndLoans","c797fc6e":"5.1 Split \u6d4b\u8bd5\u96c6\u548c\u9884\u6d4b\u96c6","4be14236":"* \u6570\u636e\u63a2\u7d22 \u5224\u65ad\u5404\u4e2a\u7279\u5f81\u53d8\u91cf\u662f\u5426\u6ee1\u8db3\u7edf\u8ba1\u57fa\u672c\u5047\u8bbe\uff0c\u5206\u522b\u7ed8\u5236\u76f4\u65b9\u56fe\u8fdb\u884c\u5206\u6790\u3002\n* \u4ece\u4e0a\u6211\u4eec\u53d1\u73b0\u5176\u8fde\u7eed\u6027\u53d8\u91cf\u90fd\u662f\u7b26\u5408\u7edf\u8ba1\u57fa\u672c\u5047\u8bbe\n","5b213ad8":"# 2.\u8bfb\u53d6\u6570\u636e","611f2219":"# 7.Submission","914bfafd":"* \u57fa\u4e8e\u6708\u6536\u5165\u7684\u8303\u56f4\u53ef\u4ee5\u5f88\u5e7f\uff0c\u5bf9\u6b64\u53d8\u91cf\u6211\u4eec\u4e0d\u505a\u5f02\u5e38\u503c\u5904\u7406","a41d4b01":"* \u6b64\u5904\u8003\u8651\u5b9e\u9645\u60c5\u51b5\uff0c\u6709\u53ef\u80fd\u4f9d\u9760\u7684\u5bb6\u5ead\u6570\u91cf\u6709\u6b64\u8303\u56f4\uff0c\u6211\u4eec\u4e0d\u505a\u5904\u7406","fc779fb9":"* \u4ece\u4e0a\u8ff0\u56fe\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u5176\u5728\u5927\u4e8e80\u7684\u5730\u65b9\u6709\u4e24\u4e2a\u5f02\u5e38\u503c\uff0c\u6839\u636e\u5b9e\u9645\u60c5\u51b5\uff0c\u903e\u671f\u7b14\u6570\u572898\u7684\u60c5\u51b5\u4e0d\u592a\u53ef\u80fd\u5b58\u5728\uff0c\u6211\u4eec\u8fdb\u884c\u5220\u9664\u5904\u7406\u3002\u57fa\u4e8e\u5173\u4e8e\u5927\u4e8e\u903e\u671f\u5929\u6570\u7684\u7279\u5f81\u8fd8\u6709\u4e24\u6837\uff0c\u6211\u4eec\u5bf9\u5176\u4ed6\u4e24\u6837\u518d\u8fdb\u884c\u5206\u6790\uff0c\u67e5\u770b\u662f\u5426\u6709\u76f8\u540c\u60c5\u51b5","0852fa3e":"3.2.5 MontylyIncome","d55d8dcd":"* \u6b64\u53d8\u91cf\u5177\u6709\u548cRevolvingUtilizationOfUnsecuredLines\u4e00\u6837\u7684\u5f02\u5e38\u503c\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4e5f\u5229\u7528\u8ba1\u7b97\u516c\u5f0f\u53bb\u9664\u5f02\u5e38\u503c","8382d1fc":"# 3.\u6570\u636e\u9884\u5904\u7406\n## 3.1\u7f3a\u5931\u503c\u5904\u7406","9f2cb8e7":"5.2 \u5bf9\u6bd4\u6a21\u578b","8b83cfba":"* \u901a\u8fc7\u67e5\u770b\u7bb1\u7ebf\u56fe\u4ee5\u53ca\u8868\u683c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u5176\u4e3b\u8981\u7684\u5f02\u5e38\u503c\u662f\u5176\u6700\u5c0f\u503c0\uff0c\u6839\u636e\u65e5\u5e38\u60c5\u51b5\uff0c\u5c81\u6570\u4e3a0\u7684\u8d37\u6b3e\u4eba\u4e0d\u53ef\u80fd\u5b58\u5728\uff0c\u6240\u4ee5\u5728\u5904\u7406\u6b64\u7279\u5f81\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u9700\u8981\u53d6\u5927\u4e8e0\u7684\u6570\u503c\u3002","9e9a0f0e":"## 3.2\u5f02\u5e38\u503c\u5904\u7406\n3.2.1 RevolvingUtilizationOfUnsecuredLines\n"}}