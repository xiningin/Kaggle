{"cell_type":{"8474616c":"code","117398e5":"code","27566d0b":"code","b7e504ce":"code","8a926a82":"code","cb6545af":"code","9f43b13d":"code","457294af":"code","85cd55f2":"code","02c0892a":"code","c3434260":"code","4ba1a241":"code","7b34a56a":"code","96603837":"code","8d0a161f":"code","474f0d65":"code","911a26cc":"code","1da6793c":"code","9dbfe370":"code","eaac49d8":"code","c1405068":"code","eab991e8":"code","a014d95b":"code","b88bc030":"code","2708735e":"code","dfd6f083":"code","d530e9e2":"code","b686b65c":"code","87308512":"code","d4ed8858":"code","f9a3b973":"code","560bab9f":"code","1a0387ac":"code","1456377a":"code","0b6f3c15":"code","e465af01":"code","4dbb658f":"code","56e00c56":"code","0d8bd6dd":"code","5156a4e6":"code","89058dc7":"code","69c3a4eb":"code","b884ccd5":"code","d067307a":"code","3660f7e9":"code","e998fd17":"code","5fec879e":"code","a93b0636":"code","7d83dbaa":"code","5b65d281":"code","bfea93bb":"code","acd7d516":"code","a3f7e4d9":"code","2789917d":"code","c89540a0":"code","85406bc5":"code","0b7c3d29":"markdown","ba5bd444":"markdown","3b0458e8":"markdown","2ff0fce1":"markdown"},"source":{"8474616c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#import sklearn\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import OrdinalEncoder\n\n#import matplotlib for visualization\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","117398e5":"df_train=pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/train.csv\")\ndf_test=pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/test.csv\")\ndf_sub=pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/submission.csv\")\n\nprint(df_train.shape)\nprint(df_test.shape)\nprint(df_sub.shape)\n","27566d0b":"df_train.shape","b7e504ce":"df_train.head()","8a926a82":"df_train.info()","cb6545af":"df_train.describe()","9f43b13d":"df_train.Province_State.isna().sum()","457294af":"len(df_train[df_train.Country_Region.isna()==False])","85cd55f2":"df_train.Country_Region.value_counts()","02c0892a":"df_train[df_train.Province_State.isna()==False]","c3434260":"df_train['Region']=df_train['Country_Region']","4ba1a241":"df_train.Region[df_train.Province_State.isna()==False]=df_train['Province_State']+','+df_train['Country_Region']","7b34a56a":"df_train","96603837":"len(df_train.Date.unique())","8d0a161f":"df_train.Date.min()","474f0d65":"df_train.Date.max()","911a26cc":"df_train.drop(labels=['Id','Province_State','Country_Region'], axis=1, inplace=True)","1da6793c":"df_train","9dbfe370":"df_test","eaac49d8":"df_test.shape","c1405068":"df_test.info()","eab991e8":"df_test.describe()","a014d95b":"df_test.Date.min()","b88bc030":"df_test.Date.max()","2708735e":"len(df_test.Date.unique())","dfd6f083":"df_test.shape[0]","d530e9e2":"df_test.Country_Region.value_counts()","b686b65c":"df_test['Region']=df_test['Country_Region']","87308512":"df_test.head()","d4ed8858":"df_test.Region[df_test.Province_State.isna()==False]=df_test.Province_State+','+df_test.Country_Region","f9a3b973":"df_test","560bab9f":"len(df_test.Region.unique())","1a0387ac":"df_test.drop(labels=['ForecastId','Province_State','Country_Region'],axis=1,inplace=True)","1456377a":"len(df_test.Region.unique())","0b6f3c15":"len(df_test.Date.unique())","e465af01":"df_sub","4dbb658f":"df_sub.info()","56e00c56":"df_sub.describe()","0d8bd6dd":"df_sub.shape","5156a4e6":"train_dates=list(df_train.Date.unique())","89058dc7":"test_dates=list(df_test.Date.unique())","69c3a4eb":"only_train_dates=set(train_dates)-set(test_dates)","b884ccd5":"len(only_train_dates)","d067307a":"intersection_dates=set(train_dates)&set(test_dates)","3660f7e9":"len(intersection_dates)","e998fd17":"only_test_dates=set(test_dates)-set(train_dates)","5fec879e":"len(only_test_dates)","a93b0636":"import random\ndf_test_temp=pd.DataFrame()\ndf_test_temp[\"Date\"]=df_test.Date\ndf_test_temp[\"ConfirmedCases\"]=0.0\ndf_test_temp[\"Fatalities\"]=0.0\ndf_test_temp[\"Region\"]=df_test.Region\ndf_test_temp[\"Delta\"]=1.0","7d83dbaa":"df_test_temp","5b65d281":"%%time\nfinal_df=pd.DataFrame(columns=[\"Date\",\"ConfirmedCases\",\"Fatalities\",\"Region\"])","bfea93bb":"final_df","acd7d516":"df_train[df_train.Region=='New York,US'].tail(1).ConfirmedCases","a3f7e4d9":"df_train[df_train.Region=='New York,US'].tail(1).ConfirmedCases","2789917d":"for region in df_train.Region.unique():\n    df_temp=df_train[df_train.Region==region].reset_index()\n    df_temp[\"Delta\"]=1.0\n    size_train=df_temp.shape[0]\n    for i in range(1,df_temp.shape[0]):\n        if(df_temp.ConfirmedCases[i-1]>0):\n            df_temp.Delta[i]=df_temp.ConfirmedCases[i]\/df_temp.ConfirmedCases[i-1]\n    #number of days for delta trend\n    n=5     \n\n    #delta as trend for previous n days\n    delta_list=df_temp.tail(n).Delta\n    \n    #Average Growth Factor\n    delta_avg=df_temp.tail(n).Delta.mean()\n\n    #Morality rate as on last availabe date\n    death_rate=df_temp.tail(1).Fatalities.sum()\/df_temp.tail(1).ConfirmedCases.sum()\n\n    df_test_app=df_test_temp[df_test_temp.Region==region]\n    df_test_app=df_test_app[df_test_app.Date>df_temp.Date.max()]\n\n    X=np.arange(1,n+1).reshape(-1,1)\n    Y=delta_list\n    model=LinearRegression()\n    model.fit(X,Y)\n    #score_pred.append(model.score(X,Y))\n    #reg_pred.append(region)\n\n    df_temp=pd.concat([df_temp,df_test_app])\n    df_temp=df_temp.reset_index()\n\n    for i in range (size_train, df_temp.shape[0]):\n        n=n+1        \n        df_temp.Delta[i]=(df_temp.Delta[i-3]+max(1,model.predict(np.array([n]).reshape(-1,1))[0])+delta_avg)\/3\n        \n    for i in range (size_train, df_temp.shape[0]):\n        df_temp.ConfirmedCases[i]=round(df_temp.ConfirmedCases[i-1]*df_temp.Delta[i],0)\n        df_temp.Fatalities[i]=round(death_rate*df_temp.ConfirmedCases[i],0)\n\n\n    size_test=df_temp.shape[0]-df_test_temp[df_test_temp.Region==region].shape[0]\n\n    df_temp=df_temp.iloc[size_test:,:]\n    \n    df_temp=df_temp[[\"Date\",\"ConfirmedCases\",\"Fatalities\",\"Region\",\"Delta\"]]\n    final_df=pd.concat([final_df,df_temp], ignore_index=True)\n\n#df_score=pd.DataFrame({\"Region\":reg_pred,\"Score\":score_pred})\n#print(f\"Average score (n={n}): {df_score.Score.mean()}\")\n#sns.distplot(df_score.Score)    \nfinal_df.shape","c89540a0":"final_df.shape","85406bc5":"df_sub.Fatalities=final_df.Fatalities\ndf_sub.ConfirmedCases=final_df.ConfirmedCases\ndf_sub.to_csv(\"submission.csv\", index=None)","0b7c3d29":"# EDA Train Data","ba5bd444":"# Predict","3b0458e8":"# EDA Test Data","2ff0fce1":"# EDA sub"}}