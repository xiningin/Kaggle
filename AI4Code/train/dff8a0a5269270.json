{"cell_type":{"abf15171":"code","41b5922f":"code","6e6b7b21":"code","b6b8037e":"code","05452aa3":"code","cb9be5fd":"code","0489c333":"code","a05abc83":"code","26eba543":"markdown","63b535d8":"markdown"},"source":{"abf15171":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\n%matplotlib inline","41b5922f":"def ensembling(main, support, coeff): \n    \n    suba  = main.copy() \n    subav = suba.values\n       \n    subb  = support.copy()\n    subbv = subb.values    \n           \n    ense  = main.copy()    \n    ensev = ense.values  \n \n    for i in range (len(main)):\n        \n        pera = subav[i, 1]\n        perb = subbv[i, 1]\n        per = (pera * coeff) + (perb * (1.0 - coeff))   \n        ensev[i, 1] = per\n        \n    ense.iloc[:, 1] = ensev[:, 1]  \n    \n    ###############################    \n    X  = suba.iloc[:, 1]\n    Y1 = subb.iloc[:, 1]\n    Y2 = ense.iloc[:, 1]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(9, 9), facecolor='lightgray')\n    plt.title(f'\\nE N S E M B L I N G\\n')   \n      \n    plt.scatter(X, Y1, s=1.5, label='Support')    \n    plt.scatter(X, Y2, s=1.5, label='Generated')\n    plt.scatter(X, X , s=0.1, label='Main(X=Y)')\n    \n    plt.legend(fontsize=12, loc=2)\n    plt.show()     \n    ###############################   \n    ense.iloc[:, 1] = ense.iloc[:, 1].astype(float)\n    hist_data = [subb.iloc[:, 1], ense.iloc[:, 1], suba.iloc[:, 1]] \n    group_labels = ['Support', 'Ensembling', 'Main']\n    \n    fig = ff.create_distplot(hist_data, group_labels, bin_size=.2, show_hist=False, show_rug=False)\n    fig.show()   \n    ###############################       \n    \n    return ense    ","6e6b7b21":"mainsubmission = '..\/input\/optuna-tuning-with-xgboost-catboost-lgbm\/submission.csv' \n\nsubmain = pd.read_csv(mainsubmission)","b6b8037e":"sub1path = '..\/input\/tps-aug-2021-simple-weighted-ensemble\/submission_weighted_ensemble_9.csv' \n\nsub1 = pd.read_csv(sub1path)","05452aa3":"sub2path = '..\/input\/blending-tool-tps-aug-2021\/file1_7.85017_file2_7.85151_blend.csv' \n\nsub2 = pd.read_csv(sub2path)","cb9be5fd":"subsub = ensembling(submain, sub1, 0.20)","0489c333":"subsubfinal = ensembling(subsub, sub2, 0.40)","a05abc83":"subsubfinal.to_csv(\"blendceptionsubmissionfinal.csv\",index=False)","26eba543":"# Note and Credits","63b535d8":"Hello everyone. This notebook is empirically tested on already blended results to see if final results differs advantageuosly or not. \nAs it can be inferred from notebook's name, blended results are used once more to test the efficiency of this method. However, I'll use main submission as my gathered submission from early notebook here. [\ud83e\udd16 Optuna Tuning with XGBoost+CatBoost+LGBM](https:\/\/www.kaggle.com\/tolgakurtulus\/optuna-tuning-with-xgboost-catboost-lgbm)\n\nThese are the notebooks and submissions I blended on this notebook. \n\n* [[TPS Aug 2021] Simple weighted ensemble](https:\/\/www.kaggle.com\/aayush26\/tps-aug-2021-simple-weighted-ensemble) Credits to @aayush26\n\n* [Blending Tool [TPS Aug 2021]](https:\/\/www.kaggle.com\/yus002\/blending-tool-tps-aug-2021) Credits to @yus002\n\n* Graphs and visualisation ideas are a copy of TPS8 - Smart Ensembling by Somayyeh Gholami. [[2] TPS8 - Smart Ensembling](https:\/\/www.kaggle.com\/somayyehgholami\/2-tps8-smart-ensembling) Credits to @somayyehgholami\n"}}