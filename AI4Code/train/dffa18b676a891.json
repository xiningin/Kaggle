{"cell_type":{"ff074e22":"code","be5be153":"code","4d4a986c":"code","44a5d722":"code","3a309aef":"code","a91de596":"code","2deca03b":"code","9ceaac62":"code","75fea747":"code","e25cb0f9":"code","054c3ace":"code","dec8896d":"code","20957023":"code","93eea52f":"code","900f3971":"code","42a499ab":"code","0973c008":"code","fd33dbab":"code","efba75a3":"code","32c8172b":"markdown","237966fc":"markdown","a7957be9":"markdown","b16372ab":"markdown","3ab5a6ce":"markdown","b50dbf2e":"markdown","c54fec5c":"markdown","33e5c903":"markdown","78aa6ea9":"markdown","a1cd5d16":"markdown"},"source":{"ff074e22":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport sklearn as skl\nfrom sklearn import preprocessing\nimport lightgbm as lgbm\n\nimport json\nimport pickle\nimport gc","be5be153":"dl_train_df          = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/train.csv\", sep=\",\", header=0, quotechar=\"\\\"\")\ndl_test_df           = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/test.csv\", sep=\",\", header=0, quotechar=\"\\\"\")","4d4a986c":"dl_train_df[\"data_type\"] = \"train\"\ndl_test_df[\"data_type\"] = \"test\"\nbase_event_data_df = pd.concat([dl_train_df[[\"data_type\", \"installation_id\", \"event_data\"]], dl_test_df[[\"data_type\", \"installation_id\",\"event_data\"]]], axis=0)\nbase_event_data_df = base_event_data_df.reset_index()\nbase_event_data_df = base_event_data_df.rename(columns={\"index\": \"event_data_id\"})\ndel dl_train_df, dl_test_df","44a5d722":"base_event_data_df.shape","3a309aef":"event_data_set = set()\nfor x in base_event_data_df.event_data.values:\n    event_data_set = event_data_set | set(json.loads(x).keys())\nevent_data_columns = list(event_data_set)","a91de596":"len(event_data_columns)","2deca03b":"event_data_columns","9ceaac62":"base_event_data_df[\"event_data_cnt\"] = base_event_data_df.event_data.apply(lambda x : len(json.loads(x)))","75fea747":"base_event_data_df.event_data_cnt.unique()","e25cb0f9":"base_event_data_df[[\"event_data_cnt\", \"event_data_id\"]].groupby([\"event_data_cnt\"]).count().T","054c3ace":"base_event_data_df.head()","dec8896d":"gc.collect","20957023":"# event_data_seri = base_event_data_df.event_data.apply(lambda x:json.loads(x))\nevent_data_seri = base_event_data_df.sample(n=10000).event_data.apply(lambda x:json.loads(x))","93eea52f":"# event_data_seri.to_pickle(\".\/kaggle\/input\/data-science-bowl-2019\/event_data_seri.pickle\")","900f3971":"event_data_open_df = pd.DataFrame(index=event_data_seri.index)\n# -------------------\nevent_data_open_df[\"bottle\"] = event_data_seri.apply(lambda x:x.get(\"bottle\"))\nevent_data_open_df[\"level\"] = event_data_seri.apply(lambda x:x.get(\"level\"))\nevent_data_open_df[\"total_duration\"] = event_data_seri.apply(lambda x:x.get(\"total_duration\"))\nevent_data_open_df[\"cloud_size\"] = event_data_seri.apply(lambda x:x.get(\"cloud_size\"))\nevent_data_open_df[\"chests\"] = event_data_seri.apply(lambda x:x.get(\"chests\"))\nevent_data_open_df[\"dinosaurs\"] = event_data_seri.apply(lambda x:x.get(\"dinosaurs\"))\nevent_data_open_df[\"target_containers\"] = event_data_seri.apply(lambda x:x.get(\"target_containers\"))\nevent_data_open_df[\"media_type\"] = event_data_seri.apply(lambda x:x.get(\"media_type\"))\nevent_data_open_df[\"starting_weights\"] = event_data_seri.apply(lambda x:x.get(\"starting_weights\"))\nevent_data_open_df[\"caterpillar\"] = event_data_seri.apply(lambda x:x.get(\"caterpillar\"))\nevent_data_open_df[\"crystals\"] = event_data_seri.apply(lambda x:x.get(\"crystals\"))\nevent_data_open_df[\"total_containers\"] = event_data_seri.apply(lambda x:x.get(\"total_containers\"))\nevent_data_open_df[\"cauldron\"] = event_data_seri.apply(lambda x:x.get(\"cauldron\"))\nevent_data_open_df[\"shell_size\"] = event_data_seri.apply(lambda x:x.get(\"shell_size\"))\nevent_data_open_df[\"castles_placed\"] = event_data_seri.apply(lambda x:x.get(\"castles_placed\"))\nevent_data_open_df[\"dinosaurs_placed\"] = event_data_seri.apply(lambda x:x.get(\"dinosaurs_placed\"))\nevent_data_open_df[\"target_bucket\"] = event_data_seri.apply(lambda x:x.get(\"target_bucket\"))\nevent_data_open_df[\"previous_jars\"] = event_data_seri.apply(lambda x:x.get(\"previous_jars\"))\nevent_data_open_df[\"scale_contents\"] = event_data_seri.apply(lambda x:x.get(\"scale_contents\"))\nevent_data_open_df[\"has_water\"] = event_data_seri.apply(lambda x:x.get(\"has_water\"))\nevent_data_open_df[\"correct\"] = event_data_seri.apply(lambda x:x.get(\"correct\"))\nevent_data_open_df[\"pillars\"] = event_data_seri.apply(lambda x:x.get(\"pillars\"))\nevent_data_open_df[\"object_type\"] = event_data_seri.apply(lambda x:x.get(\"object_type\"))\nevent_data_open_df[\"destination\"] = event_data_seri.apply(lambda x:x.get(\"destination\"))\nevent_data_open_df[\"max_position\"] = event_data_seri.apply(lambda x:x.get(\"max_position\"))\nevent_data_open_df[\"duration\"] = event_data_seri.apply(lambda x:x.get(\"duration\"))\nevent_data_open_df[\"water_level\"] = event_data_seri.apply(lambda x:x.get(\"water_level\"))\nevent_data_open_df[\"holding_shell\"] = event_data_seri.apply(lambda x:x.get(\"holding_shell\"))\nevent_data_open_df[\"source\"] = event_data_seri.apply(lambda x:x.get(\"source\"))\nevent_data_open_df[\"bird_height\"] = event_data_seri.apply(lambda x:x.get(\"bird_height\"))\nevent_data_open_df[\"containers\"] = event_data_seri.apply(lambda x:x.get(\"containers\"))\nevent_data_open_df[\"sand\"] = event_data_seri.apply(lambda x:x.get(\"sand\"))\nevent_data_open_df[\"animals\"] = event_data_seri.apply(lambda x:x.get(\"animals\"))\nevent_data_open_df[\"round_prompt\"] = event_data_seri.apply(lambda x:x.get(\"round_prompt\"))\nevent_data_open_df[\"gate\"] = event_data_seri.apply(lambda x:x.get(\"gate\"))\nevent_data_open_df[\"mode\"] = event_data_seri.apply(lambda x:x.get(\"mode\"))\nevent_data_open_df[\"nest\"] = event_data_seri.apply(lambda x:x.get(\"nest\"))\nevent_data_open_df[\"tape_length\"] = event_data_seri.apply(lambda x:x.get(\"tape_length\"))\nevent_data_open_df[\"side\"] = event_data_seri.apply(lambda x:x.get(\"side\"))\nevent_data_open_df[\"buckets\"] = event_data_seri.apply(lambda x:x.get(\"buckets\"))\nevent_data_open_df[\"growth\"] = event_data_seri.apply(lambda x:x.get(\"growth\"))\nevent_data_open_df[\"cloud\"] = event_data_seri.apply(lambda x:x.get(\"cloud\"))\nevent_data_open_df[\"total_bowls\"] = event_data_seri.apply(lambda x:x.get(\"total_bowls\"))\nevent_data_open_df[\"options\"] = event_data_seri.apply(lambda x:x.get(\"options\"))\nevent_data_open_df[\"holes\"] = event_data_seri.apply(lambda x:x.get(\"holes\"))\nevent_data_open_df[\"filled\"] = event_data_seri.apply(lambda x:x.get(\"filled\"))\nevent_data_open_df[\"bucket\"] = event_data_seri.apply(lambda x:x.get(\"bucket\"))\nevent_data_open_df[\"position\"] = event_data_seri.apply(lambda x:x.get(\"position\"))\nevent_data_open_df[\"time_played\"] = event_data_seri.apply(lambda x:x.get(\"time_played\"))\nevent_data_open_df[\"bug\"] = event_data_seri.apply(lambda x:x.get(\"bug\"))\nevent_data_open_df[\"flower\"] = event_data_seri.apply(lambda x:x.get(\"flower\"))\nevent_data_open_df[\"toy\"] = event_data_seri.apply(lambda x:x.get(\"toy\"))\nevent_data_open_df[\"diet\"] = event_data_seri.apply(lambda x:x.get(\"diet\"))\nevent_data_open_df[\"hats_placed\"] = event_data_seri.apply(lambda x:x.get(\"hats_placed\"))\nevent_data_open_df[\"identifier\"] = event_data_seri.apply(lambda x:x.get(\"identifier\"))\nevent_data_open_df[\"dinosaur\"] = event_data_seri.apply(lambda x:x.get(\"dinosaur\"))\nevent_data_open_df[\"left\"] = event_data_seri.apply(lambda x:x.get(\"left\"))\nevent_data_open_df[\"round\"] = event_data_seri.apply(lambda x:x.get(\"round\"))\nevent_data_open_df[\"misses\"] = event_data_seri.apply(lambda x:x.get(\"misses\"))\nevent_data_open_df[\"houses\"] = event_data_seri.apply(lambda x:x.get(\"houses\"))\nevent_data_open_df[\"container_type\"] = event_data_seri.apply(lambda x:x.get(\"container_type\"))\nevent_data_open_df[\"target_size\"] = event_data_seri.apply(lambda x:x.get(\"target_size\"))\nevent_data_open_df[\"caterpillars\"] = event_data_seri.apply(lambda x:x.get(\"caterpillars\"))\nevent_data_open_df[\"round_number\"] = event_data_seri.apply(lambda x:x.get(\"round_number\"))\nevent_data_open_df[\"location\"] = event_data_seri.apply(lambda x:x.get(\"location\"))\nevent_data_open_df[\"scale_weights\"] = event_data_seri.apply(lambda x:x.get(\"scale_weights\"))\nevent_data_open_df[\"round_target\"] = event_data_seri.apply(lambda x:x.get(\"round_target\"))\n# event_data_open_df[\"coordinates\"] = event_data_seri.apply(lambda x:x.get(\"coordinates\"))\nevent_data_open_df[\"dinosaur_weight\"] = event_data_seri.apply(lambda x:x.get(\"dinosaur_weight\"))\nevent_data_open_df[\"end_position\"] = event_data_seri.apply(lambda x:x.get(\"end_position\"))\nevent_data_open_df[\"bowl_id\"] = event_data_seri.apply(lambda x:x.get(\"bowl_id\"))\nevent_data_open_df[\"jar_filled\"] = event_data_seri.apply(lambda x:x.get(\"jar_filled\"))\nevent_data_open_df[\"stage_number\"] = event_data_seri.apply(lambda x:x.get(\"stage_number\"))\nevent_data_open_df[\"buglength\"] = event_data_seri.apply(lambda x:x.get(\"buglength\"))\nevent_data_open_df[\"prompt\"] = event_data_seri.apply(lambda x:x.get(\"prompt\"))\nevent_data_open_df[\"stumps\"] = event_data_seri.apply(lambda x:x.get(\"stumps\"))\nevent_data_open_df[\"target_distances\"] = event_data_seri.apply(lambda x:x.get(\"target_distances\"))\nevent_data_open_df[\"hat\"] = event_data_seri.apply(lambda x:x.get(\"hat\"))\nevent_data_open_df[\"dinosaur_count\"] = event_data_seri.apply(lambda x:x.get(\"dinosaur_count\"))\nevent_data_open_df[\"target_weight\"] = event_data_seri.apply(lambda x:x.get(\"target_weight\"))\nevent_data_open_df[\"rocket\"] = event_data_seri.apply(lambda x:x.get(\"rocket\"))\nevent_data_open_df[\"flowers\"] = event_data_seri.apply(lambda x:x.get(\"flowers\"))\nevent_data_open_df[\"animal\"] = event_data_seri.apply(lambda x:x.get(\"animal\"))\n# event_data_open_df[\"jar\"] = event_data_seri.apply(lambda x:x.get(\"jar\"))\nevent_data_open_df[\"target_water_level\"] = event_data_seri.apply(lambda x:x.get(\"target_water_level\"))\nevent_data_open_df[\"bowls\"] = event_data_seri.apply(lambda x:x.get(\"bowls\"))\nevent_data_open_df[\"event_code\"] = event_data_seri.apply(lambda x:x.get(\"event_code\"))\nevent_data_open_df[\"description\"] = event_data_seri.apply(lambda x:x.get(\"description\"))\nevent_data_open_df[\"shells\"] = event_data_seri.apply(lambda x:x.get(\"shells\"))\nevent_data_open_df[\"weight\"] = event_data_seri.apply(lambda x:x.get(\"weight\"))\nevent_data_open_df[\"bug_length\"] = event_data_seri.apply(lambda x:x.get(\"bug_length\"))\nevent_data_open_df[\"hole_position\"] = event_data_seri.apply(lambda x:x.get(\"hole_position\"))\nevent_data_open_df[\"toy_earned\"] = event_data_seri.apply(lambda x:x.get(\"toy_earned\"))\nevent_data_open_df[\"table_weights\"] = event_data_seri.apply(lambda x:x.get(\"table_weights\"))\nevent_data_open_df[\"distance\"] = event_data_seri.apply(lambda x:x.get(\"distance\"))\nevent_data_open_df[\"session_duration\"] = event_data_seri.apply(lambda x:x.get(\"session_duration\"))\nevent_data_open_df[\"group\"] = event_data_seri.apply(lambda x:x.get(\"group\"))\nevent_data_open_df[\"bottles\"] = event_data_seri.apply(lambda x:x.get(\"bottles\"))\nevent_data_open_df[\"launched\"] = event_data_seri.apply(lambda x:x.get(\"launched\"))\nevent_data_open_df[\"game_time\"] = event_data_seri.apply(lambda x:x.get(\"game_time\"))\nevent_data_open_df[\"event_count\"] = event_data_seri.apply(lambda x:x.get(\"event_count\"))\nevent_data_open_df[\"size\"] = event_data_seri.apply(lambda x:x.get(\"size\"))\nevent_data_open_df[\"dwell_time\"] = event_data_seri.apply(lambda x:x.get(\"dwell_time\"))\nevent_data_open_df[\"hats\"] = event_data_seri.apply(lambda x:x.get(\"hats\"))\nevent_data_open_df[\"tutorial_step\"] = event_data_seri.apply(lambda x:x.get(\"tutorial_step\"))\nevent_data_open_df[\"current_containers\"] = event_data_seri.apply(lambda x:x.get(\"current_containers\"))\nevent_data_open_df[\"layout\"] = event_data_seri.apply(lambda x:x.get(\"layout\"))\nevent_data_open_df[\"exit_type\"] = event_data_seri.apply(lambda x:x.get(\"exit_type\"))\nevent_data_open_df[\"molds\"] = event_data_seri.apply(lambda x:x.get(\"molds\"))\nevent_data_open_df[\"crystal_id\"] = event_data_seri.apply(lambda x:x.get(\"crystal_id\"))\nevent_data_open_df[\"house\"] = event_data_seri.apply(lambda x:x.get(\"house\"))\nevent_data_open_df[\"movie_id\"] = event_data_seri.apply(lambda x:x.get(\"movie_id\"))\nevent_data_open_df[\"right\"] = event_data_seri.apply(lambda x:x.get(\"right\"))\nevent_data_open_df[\"has_toy\"] = event_data_seri.apply(lambda x:x.get(\"has_toy\"))\nevent_data_open_df[\"weights\"] = event_data_seri.apply(lambda x:x.get(\"weights\"))\nevent_data_open_df[\"buckets_placed\"] = event_data_seri.apply(lambda x:x.get(\"buckets_placed\"))\nevent_data_open_df[\"version\"] = event_data_seri.apply(lambda x:x.get(\"version\"))\nevent_data_open_df[\"object\"] = event_data_seri.apply(lambda x:x.get(\"object\"))\nevent_data_open_df[\"scale_weight\"] = event_data_seri.apply(lambda x:x.get(\"scale_weight\"))\nevent_data_open_df[\"item_type\"] = event_data_seri.apply(lambda x:x.get(\"item_type\"))\nevent_data_open_df[\"height\"] = event_data_seri.apply(lambda x:x.get(\"height\"))\nevent_data_open_df[\"resources\"] = event_data_seri.apply(lambda x:x.get(\"resources\"))","42a499ab":"# event_data_coordinates_seri = event_data_seri.apply(lambda x:x.get(\"coordinates\")).apply(lambda x:json.loads(x) if x is not None else None)","0973c008":"# event_data_coordinates_seri","fd33dbab":"# event_data_open_coordinates_df = pd.DataFrame(index=event_data_coordinates_seri.index)\n# event_data_open_coordinates_df[\"coordinates_stage_height\"] = event_data_coordinates_seri.apply(lambda x:x.get(\"stage_height\"))\n# event_data_open_coordinates_df[\"coordinates_stage_width\"] = event_data_coordinates_seri.apply(lambda x:x.get(\"stage_width\"))\n# event_data_open_coordinates_df[\"coordinates_x\"] = event_data_coordinates_seri.apply(lambda x:x.get(\"x\"))\n# event_data_open_coordinates_df[\"coordinates_y\"] = event_data_coordinates_seri.apply(lambda x:x.get(\"y\"))","efba75a3":"# event_data_jar_seri = event_data_seri.apply(lambda x:x.get(\"jar\")).apply(lambda x:json.loads(x))","32c8172b":"## event_data_df of second layer jar","237966fc":"## event data check","a7957be9":"# read data","b16372ab":"# Proprecess event_data","3ab5a6ce":"## event_data_columns of first layer","b50dbf2e":"# event data","c54fec5c":"## display event_data_columns","33e5c903":"## event_data_df of second layer coordinates","78aa6ea9":"## event_data_df of first layer","a1cd5d16":"# init"}}