{"cell_type":{"29f29cf6":"code","3f8ae74a":"code","825174c9":"code","97598550":"code","b0a7aa51":"code","ea38fc76":"code","c9615f3e":"code","fc4bd371":"code","93d67ba2":"code","f1769f41":"code","0854855b":"code","664f646b":"code","5cd7b420":"code","06bf91ad":"code","d634ef29":"code","62565be4":"code","ff6818aa":"code","8fa47873":"code","ca245323":"code","3198d054":"code","bec8a4f3":"code","39458b7e":"code","06541ec1":"code","b498049b":"code","4b2c798f":"code","dd3f499f":"code","021e100e":"code","837dfbe0":"code","9c12c9a2":"code","88c0d94d":"code","f1906b8f":"code","bb2eeff6":"code","8294816a":"code","eba8f152":"code","762f2b96":"code","cdced205":"code","d9d147b6":"code","ec132ae7":"code","1a068551":"code","7cec69a9":"code","c308cf21":"code","6e17b4e6":"code","c3398462":"code","29796b76":"code","9436f863":"code","1339d2c2":"code","41666926":"code","13a8965a":"code","f1f6784e":"code","8ed4d36f":"code","43613af4":"code","7a101f0a":"code","964d2e84":"code","847c31f4":"code","0cf20900":"code","9eaa1384":"code","8cedbc1a":"code","93c39537":"code","c448121c":"code","e9ecc30a":"code","b664e649":"code","996e138e":"code","2926a205":"code","a5868f8e":"code","8348e3ef":"code","2c672487":"code","20fd574b":"code","adba48a8":"code","9e73e145":"code","42bc2626":"code","a6cb6a8d":"code","1b6e1757":"code","ee38f13e":"code","d41b7093":"code","33db7f52":"code","6671a9f9":"code","c66d51b5":"code","39421f5b":"code","dfef6de8":"code","210f14c9":"code","63134064":"code","fa1e7051":"code","7a261435":"code","92a2eb7f":"code","c2c621ee":"code","0f138674":"code","2053ece6":"code","5ee89da9":"code","a3ca9e9d":"code","115f9144":"code","813d7b72":"code","f9596da6":"code","a91b703d":"code","d6b5d390":"code","f797725d":"code","d2f931e6":"code","248a5684":"code","74b8293f":"code","f52df733":"code","263a61cc":"code","38f0c151":"code","e0fa155d":"code","05ce0a38":"code","4a164b4d":"code","6b5c6337":"code","960d6fc0":"code","2ab0bd60":"code","1a71be85":"code","ad2b7439":"code","db60f906":"code","de6f08f8":"code","3b20fc85":"code","cca206e2":"code","e8751558":"code","96bfbab9":"code","754abcae":"code","77f2a9f5":"code","12663c4d":"code","631813bc":"code","435d9a4a":"code","8180052e":"markdown","6eb6087a":"markdown","a11269b8":"markdown","75711536":"markdown","d3be9468":"markdown","970b90a6":"markdown","ef99fce4":"markdown","ac997d14":"markdown","f470c7c7":"markdown","96f3a821":"markdown","9152744d":"markdown","0870c2c5":"markdown","59a4e58d":"markdown","3f7e61fe":"markdown","5fd01373":"markdown","4373e194":"markdown","44cd8e2d":"markdown","d95fe04d":"markdown","897d42f2":"markdown","adbba012":"markdown","4b1ea171":"markdown","e91caec3":"markdown","addf2aec":"markdown","0a5d4bcf":"markdown","f504b94d":"markdown","d68a2e7d":"markdown","6fe4c279":"markdown","0dc0cb8b":"markdown","f9f5f809":"markdown","0d5c61b5":"markdown","b8d35ef9":"markdown"},"source":{"29f29cf6":"# data analysis libraries:\nimport numpy as np\nimport pandas as pd\n\n# data visualization libraries:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# to ignore warnings:\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# to display all columns:\npd.set_option('display.max_columns', None)\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV","3f8ae74a":"pwd","825174c9":"# Read train and test data with pd.read_csv():\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n","97598550":"# copy data in order to avoid any change in the original:\ndf_train=train_data.copy()\ndf_test=test_data.copy()","b0a7aa51":"df_train.head()","ea38fc76":"df_test.head()","c9615f3e":"df_train.info()","fc4bd371":"df_test.info()","93d67ba2":"df_test.info()","f1769f41":"df_train.describe().T","0854855b":"df_train['Pclass'].value_counts()","664f646b":"df_train[\"Sex\"].value_counts()","5cd7b420":"df_train[\"SibSp\"].value_counts()","06bf91ad":"df_train[\"Parch\"].value_counts()","d634ef29":"df_train[\"Ticket\"].value_counts()","62565be4":"df_train[\"Cabin\"].value_counts()","ff6818aa":"df_train[\"Embarked\"].value_counts()","8fa47873":"sns.barplot(x=\"Pclass\",y=\"Survived\", data=df_train) ;","ca245323":"sns.barplot(x=\"SibSp\", y=\"Survived\" , data= df_train);","3198d054":"sns.barplot(x= \"Parch\" , y=\"Survived\", data=df_train);","bec8a4f3":"sns.barplot(x=\"Sex\",y=\"Survived\" , data= df_train);","39458b7e":"df_train.info()","06541ec1":"Age_visualization=df_train[\"Age\"].dropna()","b498049b":"sns.distplot(Age_visualization, kde = False);","4b2c798f":"sns.kdeplot(df_train[\"Fare\"], shade = True);","dd3f499f":"(sns\n .FacetGrid(df_train,\n                hue = \"Survived\",\n                height = 6,\n                xlim = (0, 500))\n .map(sns.kdeplot, \"Fare\", shade= True)\n .add_legend()\n);","021e100e":"(sns\n .FacetGrid(df_train,\n                  hue = \"Survived\",\n                  height = 5,\n                  xlim = (0, 90))\n .map(sns.kdeplot, \"Age\", shade= True)\n .add_legend()\n);","837dfbe0":"df_train.head()","9c12c9a2":"df_train= df_train.drop(\"Ticket\", axis=1)\ndf_test=df_test.drop(\"Ticket\", axis=1)\ndf_train.head()\n","88c0d94d":"df_train.describe().T","f1906b8f":"sns.boxplot(x=df_train[\"Fare\"]);","bb2eeff6":"Q1= df_train[\"Fare\"].quantile(0.25)\nQ3= df_train[\"Fare\"].quantile(0.75)\nIQR=Q3-Q1\n\nlower_limit=Q1-1.5*IQR\nupper_limit=Q3+1.5*IQR\nupper_limit","8294816a":"df_test.isnull().sum()","eba8f152":"df_train.sort_values(\"Fare\", ascending=False).head(40)","762f2b96":"df_train_Fare=df_train[\"Fare\"]","cdced205":"df_test_Fare=df_test[\"Fare\"]","d9d147b6":"upper_fare=263","ec132ae7":"aykiri_df_train = (df_train_Fare>upper_fare)","1a068551":"aykiri_df_test = (df_test_Fare> upper_fare)\n","7cec69a9":"df_train_Fare[aykiri_df_train] = upper_fare","c308cf21":"df_train[\"Fare\"]=df_train_Fare","6e17b4e6":"df_test_Fare[aykiri_df_test] = upper_fare","c3398462":"df_test[df_test[\"PassengerId\"]==1044]","29796b76":"df_train.sort_values(\"Fare\", ascending=False).head(20)","9436f863":"df_test.sort_values(\"Fare\", ascending=False).head(10)","1339d2c2":"df_train.isnull().sum()","41666926":"df_test.isnull().sum()","13a8965a":"df_train[\"Title\"] = df_train[\"Name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\ndf_test[\"Title\"] = df_test[\"Name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)","f1f6784e":"df_train.head()","8ed4d36f":"df_train['Title'] = df_train['Title'].replace([ 'Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\ndf_train['Title'] = df_train['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\ndf_train['Title'] = df_train['Title'].replace('Mlle', 'Miss')\ndf_train['Title'] = df_train['Title'].replace('Ms', 'Miss')\ndf_train['Title'] = df_train['Title'].replace('Mme', 'Mrs')","43613af4":"df_test['Title'] = df_test['Title'].replace([ 'Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\ndf_test['Title'] = df_test['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\ndf_test['Title'] = df_test['Title'].replace('Mlle', 'Miss')\ndf_test['Title'] = df_test['Title'].replace('Ms', 'Miss')\ndf_test['Title'] = df_test['Title'].replace('Mme', 'Mrs')","7a101f0a":"df_train.head(20)","964d2e84":"df_train[[\"Title\",\"Age\"]].groupby(\"Title\").mean()","847c31f4":"for i in df_train[\"Title\"]:\n    if i==\"Master\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(5)\n    elif i==\"Miss\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(22) \n    elif i==\"Mr\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(32)\n    elif i==\"Mrs\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(36)\n    elif i==\"Rare\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(46)\n    else:\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(43)","0cf20900":"df_train.isnull().sum()","9eaa1384":"df_test[[\"Title\",\"Age\"]].groupby(\"Title\").mean()","8cedbc1a":"for i in df_test[\"Title\"]:\n    if i==\"Master\":\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(7)\n    elif i==\"Miss\":\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(22) \n    elif i==\"Mr\":\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(32)\n    elif i==\"Mrs\":\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(39)\n    else:\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(44)","93c39537":"df_test.isnull().sum()","c448121c":"df_test[[\"Pclass\",\"Fare\"]].groupby(\"Pclass\").mean()","e9ecc30a":"df_test[\"Fare\"] = df_test[\"Fare\"].fillna(12)","b664e649":"df_test.isnull().sum()","996e138e":"df_train.isnull().sum()","2926a205":"df_train[\"N_cabin\"] = (df_train[\"Cabin\"].notnull().astype('int'))\ndf_test[\"N_Cabin\"] = (df_test[\"Cabin\"].notnull().astype('int'))\n\ndf_train = df_train.drop(['Cabin'], axis = 1)\ndf_test = df_test.drop(['Cabin'], axis = 1)","a5868f8e":"df_train.head()","8348e3ef":"df_train.isnull().sum()","2c672487":"df_test.isnull().sum()","20fd574b":"df_train[\"Embarked\"].value_counts()","adba48a8":"df_train[\"Embarked\"]=df_train[\"Embarked\"].fillna(\"S\")","9e73e145":"df_train.isnull().sum()","42bc2626":"\nfrom sklearn import preprocessing\n\nlbe=preprocessing.LabelEncoder()\ndf_train[\"Embarked\"]=lbe.fit_transform(df_train[\"Embarked\"])\ndf_test[\"Embarked\"]=lbe.fit_transform(df_test[\"Embarked\"])\n","a6cb6a8d":"df_train.head(10)","1b6e1757":"Sex_mapping={\"male\":0,\"female\":1}\ndf_train[\"Sex\"]=df_train[\"Sex\"].map(Sex_mapping)\ndf_test[\"Sex\"]=df_test[\"Sex\"].map(Sex_mapping)","ee38f13e":"df_train.head()","d41b7093":"df_train[[\"Title\",\"Survived\"]].groupby([\"Title\"], as_index=False).mean().sort_values(\"Survived\")","33db7f52":"Title_mapping={\"Mr\":1,\"Rare\":2,\"Master\":3,\"Miss\":4,\"Mrs\":5,\"Royal\":6}\ndf_train[\"Title\"]=df_train[\"Title\"].map(Title_mapping)\ndf_test[\"Title\"]=df_test[\"Title\"].map(Title_mapping)","6671a9f9":"df_train.info()","c66d51b5":"df_train.head()","39421f5b":"df_test.head()","dfef6de8":"df_train = df_train.drop(['Name'], axis = 1)\ndf_test = df_test.drop(['Name'], axis = 1)","210f14c9":"df_train.head()","63134064":"sns.distplot(df_train[\"Age\"], kde = False);","fa1e7051":"sns.distplot(Age_visualization, kde = False);","7a261435":"bins = [0, 13, 18, 24, 32, 75, np.inf]\nmylabels = ['Child', 'Teenager', 'Young', 'Young Adult', 'Adult', 'Senior']\ndf_train['AgeGroup'] = pd.cut(df_train[\"Age\"], bins, labels = mylabels)\ndf_test['AgeGroup'] = pd.cut(df_test[\"Age\"], bins, labels = mylabels)","92a2eb7f":"df_train[[\"AgeGroup\",\"Survived\"]].groupby(\"AgeGroup\").mean()","c2c621ee":"# Map each Age value to a numerical value:\nage_mapping = {'Child': 1, 'Teenager': 2, 'Young': 3, 'Young Adult':4 , 'Adult': 5, 'Senior':6}\ndf_train['AgeGroup'] = df_train['AgeGroup'].map(age_mapping)\ndf_test['AgeGroup'] = df_test['AgeGroup'].map(age_mapping)","0f138674":"df_train.head(10)","2053ece6":"sns.kdeplot(df_train[\"Fare\"], shade = True);","5ee89da9":"(sns\n .FacetGrid(df_train,\n                hue = \"Survived\",\n                height = 8,\n                xlim = (0, 300))\n .map(sns.kdeplot, \"Fare\", shade= True)\n .add_legend()\n);","a3ca9e9d":"df_train['FareBand'] = pd.qcut(df_train['Fare'], 10, labels = [1, 2, 3, 4,5,6,7,8,9,10])\ndf_test['FareBand'] = pd.qcut(df_test['Fare'], 10, labels = [1, 2, 3, 4,5,6,7,8,9,10])","115f9144":"df_train.head(10)","813d7b72":"df_train.head()","f9596da6":"df_train[\"FamilySize\"] =df_train[\"SibSp\"]+df_train[\"Parch\"]+1\ndf_train[\"FamilySize\"].mean()","a91b703d":"df_test[\"FamilySize\"] =df_test[\"SibSp\"]+df_test[\"Parch\"]+1\ndf_test[\"FamilySize\"].mean()","d6b5d390":"sns.distplot(df_train[\"FamilySize\"], kde = False);","f797725d":"df_train['Single'] = df_train['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ndf_train['SmallFam'] = df_train['FamilySize'].map(lambda s: 1 if  2 <= s <= 3  else 0)\ndf_train['MedFam'] = df_train['FamilySize'].map(lambda s: 1 if 4 <= s <= 5 else 0)\ndf_train['LargeFam'] = df_train['FamilySize'].map(lambda s: 1 if s >= 6 else 0)","d2f931e6":"df_test['Single'] = df_test['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ndf_test['SmallFam'] = df_test['FamilySize'].map(lambda s: 1 if  2 <= s <= 3  else 0)\ndf_test['MedFam'] = df_test['FamilySize'].map(lambda s: 1 if 4 <= s <= 5 else 0)\ndf_test['LargeFam'] = df_test['FamilySize'].map(lambda s: 1 if s >= 6 else 0)","248a5684":"df_train.head(10)","74b8293f":"df_train = pd.get_dummies(df_train, columns = [\"Title\"])\ndf_train = pd.get_dummies(df_train, columns = [\"Embarked\"], prefix=\"Em\")\n","f52df733":"df_test = pd.get_dummies(df_test, columns = [\"Title\"])\ndf_test = pd.get_dummies(df_test, columns = [\"Embarked\"], prefix=\"Em\")\n","263a61cc":"df_train[\"Pclass\"] = df_train[\"Pclass\"].astype(\"category\")\ndf_train = pd.get_dummies(df_train, columns = [\"Pclass\"],prefix=\"Pc\")","38f0c151":"df_test[\"Pclass\"] = df_test[\"Pclass\"].astype(\"category\")\ndf_test = pd.get_dummies(df_test, columns = [\"Pclass\"],prefix=\"Pc\")","e0fa155d":"df_train.head(10)","05ce0a38":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\npredictors = df_train.drop(['Survived', 'PassengerId'], axis=1)\ntarget = df_train[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(predictors, target, test_size = 0.20, random_state = 0)","4a164b4d":"x_train.shape","6b5c6337":"x_test.shape","960d6fc0":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_test)\nacc_logreg = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_logreg)","2ab0bd60":"from sklearn.ensemble import RandomForestClassifier\n\nrandomforest = RandomForestClassifier()\nrandomforest.fit(x_train, y_train)\ny_pred = randomforest.predict(x_test)\nacc_randomforest = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_randomforest)","1a71be85":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbk = GradientBoostingClassifier()\n\ngbk.fit(x_train, y_train)\ny_pred = gbk.predict(x_test)\nacc_gbk = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_gbk)","ad2b7439":"gbk","db60f906":"xgb_params = {\n        'n_estimators': [200, 500],\n        'subsample': [0.6, 1.0],\n        'max_depth': [2,5,8],\n        'learning_rate': [0.1,0.01,0.02],\n        \"min_samples_split\": [2,5,10]}","de6f08f8":"xgb = GradientBoostingClassifier()\n\nxgb_cv_model = GridSearchCV(xgb, xgb_params, cv = 10, n_jobs = -1, verbose = 2)","3b20fc85":"xgb_cv_model.fit(x_train, y_train)","cca206e2":"xgb_cv_model.best_params_","e8751558":"xgb = GradientBoostingClassifier(learning_rate = xgb_cv_model.best_params_[\"learning_rate\"], \n                    max_depth = xgb_cv_model.best_params_[\"max_depth\"],\n                    min_samples_split = xgb_cv_model.best_params_[\"min_samples_split\"],\n                    n_estimators = xgb_cv_model.best_params_[\"n_estimators\"],\n                    subsample = xgb_cv_model.best_params_[\"subsample\"])","96bfbab9":"xgb_tuned =  xgb.fit(x_train,y_train)","754abcae":"y_pred = xgb_tuned.predict(x_test)\nacc_gbk = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_gbk)","77f2a9f5":"feature_imp = pd.Series(xgb_tuned.feature_importances_,\n                        index=x_train.columns).sort_values(ascending=False)\n\nsns.barplot(x=feature_imp, y=feature_imp.index)\nplt.xlabel('Significance Score Of Variables')\nplt.ylabel('Variables')\nplt.title(\"Variable Severity Levels\")\nplt.show()","12663c4d":"df_test","631813bc":"ids = df_test['PassengerId']\npredictions = xgb_tuned.predict(df_test)\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput.to_csv('submission.csv', index=False)","435d9a4a":"output","8180052e":"# Modeling, Evaluation and Model Tuning","6eb6087a":"## Embarked & Title &   Pclass","a11269b8":"In general, barplot is used for categorical variables while histogram, density and boxplot are used for numerical data.","75711536":"# Data Understanding","d3be9468":"# Missing Value Treatment","970b90a6":"## Name and Title","ef99fce4":"# Analysis and Visualization of Numeric and Categorical Variables","ac997d14":"## Ticket","f470c7c7":"## Fare ","96f3a821":"## Embarked","9152744d":"## Gradient Boosting Classifier","0870c2c5":"## Visualization","59a4e58d":"## Basic summary statistics about the numerical data","3f7e61fe":"## Classes of some categorical variables","5fd01373":"## Cabin","4373e194":"## Sex","44cd8e2d":"## Spliting the train data","d95fe04d":"## Embarked","897d42f2":"## Outlier Treatment","adbba012":"## Family Size","4b1ea171":"# Variable Transformation","e91caec3":"## AgeGroup","addf2aec":"## Random Forest","0a5d4bcf":"## Deployment","f504b94d":"## Loading Data","d68a2e7d":"## Logistic Regression","6fe4c279":"# Feature Engineering","0dc0cb8b":"## Deleting Unnecessary Variables","f9f5f809":"## Name ","0d5c61b5":"## Librarires","b8d35ef9":"# Data Preparations"}}