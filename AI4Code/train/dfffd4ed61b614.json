{"cell_type":{"61007d4d":"code","907a3311":"code","cc105333":"code","11475569":"code","c0d8d554":"code","9c0182fc":"code","03e88c29":"code","91af3b34":"code","00cc353b":"code","b36e251b":"code","54b4039d":"code","0047ad8e":"code","1adfa8bb":"code","f4d82380":"code","1e84aedc":"code","fa754283":"code","b3b0db2f":"code","eb53650e":"code","4f7c03fc":"code","d58dcb39":"code","3edadb18":"code","d9de8ffa":"code","b466ca0f":"code","37be9d31":"code","3c55a8c0":"code","e8ed05f7":"code","6ab3bb00":"code","d7440dd9":"code","b050aff8":"code","d9a407bc":"code","754b4247":"code","055d31b3":"code","daa1129e":"code","5a4311fd":"code","e038f32c":"code","de917f4b":"markdown","3d7413b5":"markdown","ff553c91":"markdown","3e993871":"markdown","cfea8469":"markdown","3cd98897":"markdown","dea12b0d":"markdown","f8b30bce":"markdown","088e71e5":"markdown","e03cc7cc":"markdown","557742a6":"markdown","9d37d020":"markdown","2aa4e23b":"markdown","e2103a67":"markdown"},"source":{"61007d4d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport itertools\nimport gc\nimport os\nimport sys\n\nsns.set_style('darkgrid')\nsns.set_palette('bone')\npd.options.display.float_format = '{:,.3f}'.format\n\nprint(os.listdir(\"..\/input\"))","907a3311":"def toTapleList(list1,list2):\n    return list(itertools.product(list1,list2))","cc105333":"# Memory saving function credit to https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.\n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                #if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                #    df[col] = df[col].astype(np.float16)\n                #el\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        #else:\n            #df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB --> {:.2f} MB (Decreased by {:.1f}%)'.format(\n        start_mem, end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","11475569":"%%time\ntrain = pd.read_csv('..\/input\/train_V2.csv')\ntrain = reduce_mem_usage(train)\ntest = pd.read_csv('..\/input\/test_V2.csv')\ntest = reduce_mem_usage(test)\nprint(train.shape, test.shape)","c0d8d554":"train.info()","9c0182fc":"null_cnt = train.isnull().sum().sort_values()\nprint('null count:', null_cnt[null_cnt > 0])\n# dropna\ntrain.dropna(inplace=True)","03e88c29":"train.describe(include=np.number).drop('count').T","91af3b34":"all_data = train.append(test, sort=False).reset_index(drop=True)\ndel train, test\ngc.collect()","00cc353b":"def fillInf(df, val):\n    numcols = df.select_dtypes(include='number').columns\n    cols = numcols[numcols != 'winPlacePerc']\n    df[df == np.Inf] = np.NaN\n    df[df == np.NINF] = np.NaN\n    for c in cols: df[c].fillna(val, inplace=True)","b36e251b":"all_data['_totalDistance'] = all_data['rideDistance'] + all_data['walkDistance'] + all_data['swimDistance']\nall_data['_healthItems'] = all_data['heals'] + all_data['boosts']\nall_data['_headshotKillRate'] = all_data['headshotKills'] \/ all_data['kills']\nall_data['_killPlaceOverMaxPlace'] = all_data['killPlace'] \/ all_data['maxPlace']\nall_data['_killsOverWalkDistance'] = all_data['kills'] \/ all_data['walkDistance']\n#all_data['_killsOverDistance'] = all_data['kills'] \/ all_data['_totalDistance']\n#all_data['_walkDistancePerSec'] = all_data['walkDistance'] \/ all_data['matchDuration']\n\nfillInf(all_data, 0)","54b4039d":"match = all_data.groupby('matchId')\nall_data['killsPerc'] = match['kills'].rank(pct=True).values\nall_data['killPlacePerc'] = match['killPlace'].rank(pct=True).values\nall_data['walkDistancePerc'] = match['walkDistance'].rank(pct=True).values\n#all_data['damageDealtPerc'] = match['damageDealt'].rank(pct=True).values\n\nall_data['walkPerc_killsPerc'] = all_data['walkDistancePerc'] \/ all_data['killsPerc']\n#all_data['walkPerc_kills'] = all_data['walkDistancePerc'] \/ all_data['kills']\n#all_data['kills_walkPerc'] = all_data['kills'] \/ all_data['walkDistancePerc']","0047ad8e":"#all_data.drop(['killStreaks','DBNOs'], axis=1, inplace=True)\nall_data.drop(['boosts','heals','revives','assists'], axis=1, inplace=True)\nall_data.drop(['headshotKills','roadKills','vehicleDestroys','teamKills'], axis=1, inplace=True)\nall_data.drop(['rideDistance','swimDistance','matchDuration'], axis=1, inplace=True)\nall_data.drop(['rankPoints','killPoints','winPoints'], axis=1, inplace=True)","1adfa8bb":"match = all_data.groupby(['matchId'])\ngroup = all_data.groupby(['matchId','groupId','matchType'])\n\n# target feature (max, min)\nagg_col = list(all_data.columns)\nexclude_agg_col = ['Id','matchId','groupId','matchType','maxPlace','numGroups','winPlacePerc']\nfor c in exclude_agg_col:\n    agg_col.remove(c)\nprint(agg_col)\n\n# target feature (sum)\nsum_col = ['kills','killPlace','damageDealt','walkDistance','_healthItems']","f4d82380":"''' match sum, match max, match mean, group sum\n'''\nmatch_data = pd.concat([\n    match.size().to_frame('m.players'), \n    match[sum_col].sum().rename(columns=lambda s: 'm.sum.' + s), \n    match[sum_col].max().rename(columns=lambda s: 'm.max.' + s),\n    match[sum_col].mean().rename(columns=lambda s: 'm.mean.' + s)\n    ], axis=1).reset_index()\nmatch_data = pd.merge(match_data, \n    group[sum_col].sum().rename(columns=lambda s: 'sum.' + s).reset_index())\nmatch_data = reduce_mem_usage(match_data)\n\nprint(match_data.shape)","1e84aedc":"''' ranking of kills and killPlace in each match\n'''\nminKills = all_data.sort_values(['matchId','groupId','kills','killPlace']).groupby(\n    ['matchId','groupId','kills']).first().reset_index().copy()\nfor n in np.arange(5):\n    c = 'kills_' + str(n) + '_Place'\n    nKills = (minKills['kills'] == n)\n    minKills.loc[nKills, c] = minKills[nKills].groupby(['matchId'])['killPlace'].rank().values\n    match_data = pd.merge(match_data, minKills[nKills][['matchId','groupId',c]], how='left')\n    match_data[c].fillna(0, inplace=True)\nmatch_data = reduce_mem_usage(match_data)\ndel minKills, nKills\n\nprint(match_data.shape)","fa754283":"''' group mean, max, min\n'''\nall_data = pd.concat([\n    group.size().to_frame('players'),\n    group.mean(),\n    group[agg_col].max().rename(columns=lambda s: 'max.' + s),\n    group[agg_col].min().rename(columns=lambda s: 'min.' + s),\n    ], axis=1).reset_index()\nall_data = reduce_mem_usage(all_data)\n\nprint(all_data.shape)","b3b0db2f":"numcols = all_data.select_dtypes(include='number').columns.values\nnumcols = numcols[numcols != 'winPlacePerc']","eb53650e":"''' match summary, max\n'''\nall_data = pd.merge(all_data, match_data)\ndel match_data\ngc.collect()\n\nall_data['enemy.players'] = all_data['m.players'] - all_data['players']\nfor c in sum_col:\n    all_data['enemy.' + c] = (all_data['m.sum.' + c] - all_data['sum.' + c]) \/ all_data['enemy.players']\n    #all_data['p.sum_msum.' + c] = all_data['sum.' + c] \/ all_data['m.sum.' + c]\n    #all_data['p.max_mmean.' + c] = all_data['max.' + c] \/ all_data['m.mean.' + c]\n    all_data['p.max_msum.' + c] = all_data['max.' + c] \/ all_data['m.sum.' + c]\n    all_data['p.max_mmax.' + c] = all_data['max.' + c] \/ all_data['m.max.' + c]\n    all_data.drop(['m.sum.' + c, 'm.max.' + c], axis=1, inplace=True)\n    \nfillInf(all_data, 0)\nprint(all_data.shape)","4f7c03fc":"''' match rank\n'''\nmatch = all_data.groupby('matchId')\nmatchRank = match[numcols].rank(pct=True).rename(columns=lambda s: 'rank.' + s)\nall_data = reduce_mem_usage(pd.concat([all_data, matchRank], axis=1))\nrank_col = matchRank.columns\ndel matchRank\ngc.collect()\n\n# instead of rank(pct=True, method='dense')\nmatch = all_data.groupby('matchId')\nmatchRank = match[rank_col].max().rename(columns=lambda s: 'max.' + s).reset_index()\nall_data = pd.merge(all_data, matchRank)\nfor c in numcols:\n    all_data['rank.' + c] = all_data['rank.' + c] \/ all_data['max.rank.' + c]\n    all_data.drop(['max.rank.' + c], axis=1, inplace=True)\ndel matchRank\ngc.collect()\n\nprint(all_data.shape)","d58dcb39":"''' TODO: incomplete\n''' \nkillMinorRank = all_data[['matchId','min.kills','max.killPlace']].copy()\ngroup = killMinorRank.groupby(['matchId','min.kills'])\nkillMinorRank['rank.minor.maxKillPlace'] = group.rank(pct=True).values\nall_data = pd.merge(all_data, killMinorRank)\n\nkillMinorRank = all_data[['matchId','max.kills','min.killPlace']].copy()\ngroup = killMinorRank.groupby(['matchId','max.kills'])\nkillMinorRank['rank.minor.minKillPlace'] = group.rank(pct=True).values\nall_data = pd.merge(all_data, killMinorRank)\n\ndel killMinorRank\ngc.collect()","3edadb18":"# drop constant column\nconstant_column = [col for col in all_data.columns if all_data[col].nunique() == 1]\nprint('drop columns:', constant_column)\nall_data.drop(constant_column, axis=1, inplace=True)","d9de8ffa":"'''\nsolo  <-- solo,solo-fpp,normal-solo,normal-solo-fpp\nduo   <-- duo,duo-fpp,normal-duo,normal-duo-fpp,crashfpp,crashtpp\nsquad <-- squad,squad-fpp,normal-squad,normal-squad-fpp,flarefpp,flaretpp\n'''\nmapper = lambda x: 'solo' if ('solo' in x) else 'duo' if ('duo' in x) or ('crash' in x) else 'squad'\nall_data['matchType'] = all_data['matchType'].apply(mapper)\n\nall_data = pd.concat([all_data, pd.get_dummies(all_data['matchType'], prefix='matchType')], axis=1)","b466ca0f":"cols = [col for col in all_data.columns if col not in ['Id','matchId','groupId']]\nfor i, t in all_data.loc[:, cols].dtypes.iteritems():\n    if t == object:\n        all_data[i] = pd.factorize(all_data[i])[0]\n\nall_data = reduce_mem_usage(all_data)\nall_data.head()","37be9d31":"X_train = all_data[all_data['winPlacePerc'].notnull()].reset_index(drop=True)\nX_test = all_data[all_data['winPlacePerc'].isnull()].drop(['winPlacePerc'], axis=1).reset_index(drop=True)\ndel all_data\ngc.collect()\n\nY_train = X_train.pop('winPlacePerc')\nX_test_grp = X_test[['matchId','groupId']].copy()\n\n# drop matchId,groupId\nX_train.drop(['matchId','groupId'], axis=1, inplace=True)\nX_test.drop(['matchId','groupId'], axis=1, inplace=True)\n\nX_train_cols = X_train.columns\n\nprint(X_train.shape, X_test.shape)","3c55a8c0":"#print(pd.DataFrame([[val for val in dir()], [sys.getsizeof(eval(val)) for val in dir()]],\n#                   index=['name','size']).T.sort_values('size', ascending=False).reset_index(drop=True)[:10])","e8ed05f7":"from keras import optimizers, regularizers\nfrom keras.callbacks import LearningRateScheduler, EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nfrom keras.layers import Dense, Dropout, BatchNormalization, PReLU\nfrom keras.models import load_model\nfrom keras.models import Sequential\n\ndef createModel():\n    model = Sequential()\n    model.add(Dense(512, kernel_initializer='he_normal', input_dim=X_train.shape[1], activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.2))\n\n    model.add(Dense(256, kernel_initializer='he_normal'))\n    model.add(PReLU(alpha_initializer='zeros', alpha_regularizer=None, alpha_constraint=None, shared_axes=None))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.2))\n\n    model.add(Dense(128, kernel_initializer='he_normal'))\n    model.add(PReLU(alpha_initializer='zeros', alpha_regularizer=None, alpha_constraint=None, shared_axes=None))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.1))\n\n    model.add(Dense(1, kernel_initializer='normal', activation='sigmoid'))\n\n    optimizer = optimizers.Adam(lr=0.005)\n    model.compile(optimizer=optimizer, loss='mse', metrics=['mae'])\n    #model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['mae'])\n    \n    return model","6ab3bb00":"def step_decay_schedule(initial_lr=1e-3, decay_factor=0.75, step_size=10, verbose=0):\n    ''' Wrapper function to create a LearningRateScheduler with step decay schedule. '''\n    def schedule(epoch):\n        return initial_lr * (decay_factor ** np.floor(epoch\/step_size))\n    \n    return LearningRateScheduler(schedule, verbose)\n\nlr_sched = step_decay_schedule(initial_lr=0.001, decay_factor=0.97, step_size=1, verbose=1)\nearly_stopping = EarlyStopping(monitor='val_mean_absolute_error', mode='min', patience=10, verbose=1)","d7440dd9":"from sklearn import preprocessing\nfrom tensorflow import set_random_seed\nnp.random.seed(42)\nset_random_seed(1234)\n\nscaler = preprocessing.StandardScaler().fit(X_train.astype(float))\nX_train = scaler.transform(X_train.astype(float))\nX_test = scaler.transform(X_test.astype(float))\n\nmodel = createModel()\nhistory = model.fit(\n        X_train, Y_train,\n        epochs=200,\n        batch_size=2**15,\n        validation_split=0.2,\n        callbacks=[lr_sched, early_stopping],\n        verbose=2)\npred = model.predict(X_test).ravel()","b050aff8":"# Plot training & validation loss values\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\n# Plot training & validation mae values\nplt.plot(history.history['mean_absolute_error'])\nplt.plot(history.history['val_mean_absolute_error'])\nplt.title('Mean Abosulte Error')\nplt.ylabel('Mean absolute error')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","d9a407bc":"'''\nfrom eli5.permutation_importance import get_score_importances\n\ndef score(X, y):\n    y_pred = model.predict(X).ravel()\n    return np.sum(np.abs(y - y_pred))\n\nbase_score, score_decreases = get_score_importances(score, X_train[:10000], Y_train[:10000])\nfeature_importances = np.mean(score_decreases, axis=0) * -1\n\nfeature_importances = 100.0 * (feature_importances \/ feature_importances.max())\nsorted_idx = np.argsort(feature_importances)\nsorted_idx = sorted_idx[len(feature_importances) - 30:]\npos = np.arange(sorted_idx.shape[0]) + .5\n\nplt.figure(figsize=(12,8))\nplt.barh(pos, feature_importances[sorted_idx], align='center')\nplt.yticks(pos, X_train_cols[sorted_idx])\nplt.xlabel('Relative Importance')\nplt.title('Variable Importance')\nplt.show()\n\nX_train_cols[np.argsort(feature_importances)[::-1]].values\n'''","754b4247":"X_test = pd.read_csv('..\/input\/test_V2.csv')\nX_test = X_test.groupby(['matchId','groupId','matchType']).first().reset_index()\nX_test = X_test[['matchId','groupId','matchType','numGroups','maxPlace','kills','killPlace']]\n\ngroup = X_test_grp.groupby(['matchId'])\nX_test_grp['winPlacePerc'] = pred\nX_test_grp['_rank.winPlacePerc'] = group['winPlacePerc'].rank(method='min')\nX_test = pd.merge(X_test, X_test_grp)","055d31b3":"fullgroup = (X_test['numGroups'] == X_test['maxPlace'])\n\n# full group (201366) --> calculate from rank\nsubset = X_test.loc[fullgroup]\nX_test.loc[fullgroup, 'winPlacePerc'] = (subset['_rank.winPlacePerc'].values - 1) \/ (subset['maxPlace'].values - 1)\n\n# not full group (684872) --> align with maxPlace\nsubset = X_test.loc[~fullgroup]\ngap = 1.0 \/ (subset['maxPlace'].values - 1)\nnew_perc = np.around(subset['winPlacePerc'].values \/ gap) * gap  # half&up\nX_test.loc[~fullgroup, 'winPlacePerc'] = new_perc\n\nX_test['winPlacePerc'] = X_test['winPlacePerc'].clip(lower=0,upper=1)","daa1129e":"from tqdm import tqdm\n\n# credit to https:\/\/www.kaggle.com\/nagroda100\/pubg-submission-postprocessor\/code\nprint(\"Checking for anomalies in the winPlacePerc - players with same number of kills should have scores in order of killPlace\")\n\ndo_correct = True\niteration_number = 1\n\nwhile do_correct & (iteration_number <= 1000):\n    X_test.sort_values(ascending=False, by=[\"matchId\",\"kills\",\"killPlace\",\"winPlacePerc\",\"groupId\"], inplace=True)\n    X_test[\"winPlacePerc_diff\"] = X_test[\"winPlacePerc\"].diff()\n    X_test[\"kills_diff\"] = X_test[\"kills\"].diff()\n    X_test[\"prev_matchId\"] = X_test[\"matchId\"].shift(1)\n    X_test[\"prev_groupId\"] = X_test[\"groupId\"].shift(1)\n    X_test[\"prev_winPlacePerc\"] = X_test[\"winPlacePerc\"].shift(1)\n\n    df_sub2 = X_test[(X_test[\"winPlacePerc_diff\"] < 0) \n                     & (X_test[\"kills_diff\"] == 0) \n                     & (X_test[\"matchId\"] == X_test[\"prev_matchId\"])]\n    anomalies_count = len(df_sub2)\n\n    print(\"Iteration \" + str(iteration_number) + \" Anomalies count: \" + str(anomalies_count))\n\n    changed_groups = list()\n\n    if anomalies_count > 0:\n        print()\n        print(\"Looking for pairs to change...\")\n\n        df_sub2[\"new_winPlacePerc\"] = df_sub2[\"winPlacePerc\"] \n\n        df_sub3 = pd.DataFrame()\n\n        for i in tqdm(range(1, min(15001, max(anomalies_count, 2))), \n                      desc=\"Identifying unique groups\", mininterval=10):\n            row = df_sub2.iloc[i - 1]\n            id_prev = str(row[\"prev_matchId\"]) + \"!\" + str(row[\"prev_groupId\"])\n            id_cur = str(row[\"matchId\"]) + \"!\" + str(row[\"groupId\"])\n            if (not id_prev in changed_groups) & (not id_cur in changed_groups):\n                changed_groups.append(id_prev)\n                changed_groups.append(id_cur)\n                df_sub3 = df_sub3.append({\"matchId\": row[\"matchId\"], \"groupId\": row[\"prev_groupId\"], \n                                          \"new_winPlacePerc\": row[\"winPlacePerc\"]}, \n                                         sort=False, ignore_index=True)\n                df_sub3 = df_sub3.append({\"matchId\": row[\"matchId\"], \"groupId\": row[\"groupId\"], \n                                          \"new_winPlacePerc\": row[\"prev_winPlacePerc\"]}, \n                                         sort=False, ignore_index=True)\n\n        df_sub3.drop_duplicates(inplace=True)\n        X_test = X_test.merge(df_sub3, on=[\"matchId\", \"groupId\"], how=\"left\")\n        notna = X_test[\"new_winPlacePerc\"].notna()\n        X_test.loc[notna, \"winPlacePerc\"] = X_test.loc[notna][\"new_winPlacePerc\"]\n        X_test.drop(labels=\"new_winPlacePerc\", axis=1, inplace=True)\n        del df_sub2\n        del df_sub3\n        df_sub2 = None\n        df_sub3 = None\n        gc.collect()\n    else:\n        do_correct = False\n\n    iteration_number = iteration_number + 1\n\nif do_correct:\n    print(\"Limit of iterations reached...\")\n\nprint(\"Finished correcting winPlacePerc\")","5a4311fd":"# edge cases\nX_test.loc[X_test['maxPlace'] == 0, 'winPlacePerc'] = 0\nX_test.loc[X_test['maxPlace'] == 1, 'winPlacePerc'] = 1  # nothing\nX_test.loc[(X_test['maxPlace'] > 1) & (X_test['numGroups'] == 1), 'winPlacePerc'] = 0\nX_test['winPlacePerc'].describe()","e038f32c":"test = pd.read_csv('..\/input\/test_V2.csv')\n\nsubmission = pd.merge(test, X_test[['matchId','groupId','winPlacePerc']])\nsubmission = submission[['Id','winPlacePerc']]\nsubmission.to_csv(\"submission.csv\", index=False)","de917f4b":"## drop feature","3d7413b5":"## killPlace rank of group and kills","ff553c91":"## encode","3e993871":"## feature importances","cfea8469":"# Predict","3cd98897":"# Feature Engineering","dea12b0d":"# Submit","f8b30bce":"## alignment","088e71e5":"## aggregate feature","e03cc7cc":"## drop constant feature","557742a6":"## grouping\n\n* need to predict the order of places for groups within each match.\n* train on group-level instead of the user-level","9d37d020":"## rank as percent","2aa4e23b":"# Load data","e2103a67":"## new feature"}}