{"cell_type":{"4585dbdd":"code","51916c87":"code","45ff09cf":"code","ed257480":"code","e3ddb471":"code","57f3b235":"code","fbc3f375":"code","da9598dc":"code","6fa1eefc":"code","20ecb9a2":"code","c64949fd":"code","ce28618b":"code","e3d5cf15":"code","665f0ae0":"code","003b5603":"code","d056ad45":"code","16c0f91c":"code","a0815175":"markdown","03afe208":"markdown","bfc00a07":"markdown","0bb75c03":"markdown","3e325ed6":"markdown","9f145848":"markdown"},"source":{"4585dbdd":"import os\nimport cv2\nimport matplotlib.pyplot as plt \nfrom sklearn.model_selection import train_test_split\nimport keras\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras import optimizers\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Dense, Conv2D, Flatten\nfrom keras.layers import MaxPooling2D, GlobalAveragePooling2D\nfrom keras.layers import Activation, BatchNormalization\nfrom keras.layers import Dropout","51916c87":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","45ff09cf":"parasitized_data = os.listdir('..\/input\/cell_images\/Parasitized_VGG\/')\nuninfected_data = os.listdir('..\/input\/cell_images\/Uninfected_VGG\/')","ed257480":"# images_1 = os.listdir(base_address_1)\n# images_0 = os.listdir(base_address_0)\n# # Removing 'Thumbs.db' file from the list of images\n# for img in images_1:\n#     if 'Thumbs.db' in img:\n#         idx = images_1.index(img)\n#         images_1.pop(idx)\n# for img in images_0:\n#     if 'Thumbs.db' in img:\n#         idx = images_0.index(img)\n#         images_0.pop(idx)","e3ddb471":"print('The image files for Uninfected are: '+str(len(uninfected_data)))\nprint('The image files for Infected are: '+str(len(parasitized_data)))","57f3b235":"data = []\nlabels = []\nfor img in parasitized_data:\n    try:\n        img_array = cv2.imread('..\/input\/cell_images\/Parasitized_VGG\/' + img)\n        data.append(img_array)\n        labels.append(1)\n    except:\n        print(\"Runtime Exception due to image at index \"+ str(parasitized_data.index(img)))\n        \nfor img in uninfected_data:\n    try:\n        img_array = cv2.imread('..\/input\/cell_images\/Uninfected_VGG' + \"\/\" + img)\n        data.append(img_array)\n        labels.append(0)\n    except:\n        print(\"Runtime Exception due to image at index \"+ str(uninfected_data.index(img)))","fbc3f375":"print(len(data))\nprint(len(labels))","da9598dc":"# Visualization an uninfected image\nimg = cv2.imread('..\/input\/cell_images\/Uninfected_VGG' + \"\/\" + uninfected_data[0])\nplt.imshow(img)","6fa1eefc":"# Visualization an infected image\nimg = cv2.imread('..\/input\/cell_images\/Parasitized_VGG' + \"\/\" + parasitized_data[0])\nplt.imshow(img)","20ecb9a2":"image_data = np.array(data)\nlabels = np.array(labels)\n# Shuffling the data \nidx = np.arange(image_data.shape[0])\nnp.random.shuffle(idx)\nimage_data = image_data[idx]\nlabels = labels[idx]","c64949fd":"# Training and Test data split\nX_train, X_test, y_train, y_test = train_test_split(image_data,labels, test_size=0.20, random_state = 101) ","ce28618b":"# One- Hot Encoding the lables\ny_train = np_utils.to_categorical(y_train, num_classes = 2)\ny_test = np_utils.to_categorical(y_test, num_classes = 2)","e3d5cf15":"# Normalizing the data\nX_train = X_train.astype('float32')\/255\nX_test = X_test.astype('float32')\/255","665f0ae0":"########################################################################################################################\n# Defining the model\n###########################################################################################################################\n\nmodel = Sequential()\nmodel.add(Conv2D(filters=16,kernel_size=2,padding=\"same\",activation=\"relu\",input_shape=(50,50,3)))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(BatchNormalization(axis = -1))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(filters=32,kernel_size=2,padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=64,kernel_size=2,padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(500,activation=\"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(2, activation = 'softmax'))","003b5603":"model.summary()","d056ad45":"# Defining the optimizer, loss, performance of the metrcis of the model\nbatches = 50\noptim = optimizers.Adam(lr = 0.001, decay = 0.001 \/ batches)\nmodel.compile(loss='categorical_crossentropy', optimizer=optim, metrics=['accuracy'])\nmodel.fit(X_train,y_train,batch_size=batches,epochs=25,verbose=1)","16c0f91c":"model.evaluate(X_test,y_test, steps = 1)","a0815175":"**In the given kernel, I am using 50 x 50 reduced images of the original Malaria Cell Images Dataset for the purpose of classification.** The reason behind this decision was to see the effect of scaling on the classification algorithm being used.","03afe208":"...and a validation accuracy of > 95%.","bfc00a07":"**Train- Test Split**","0bb75c03":"**Conversion of the lists into arrays**","3e325ed6":"Use the following code to find whether Thumbs.db exists in your list of images. It consequently removes the concerned file.","9f145848":"* We get an accuracy of 98.27% on the training data with 25 epochs."}}