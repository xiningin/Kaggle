{"cell_type":{"b9315753":"code","e10f2553":"code","f628ec2a":"code","3172e2fb":"code","2d050e34":"code","684146aa":"code","5a0b5fa1":"code","ec26ad34":"code","bb0cafc9":"code","d4f1e685":"markdown","be5f2317":"markdown","5cdaa3ba":"markdown","edccee6d":"markdown","859b2826":"markdown","f9d19d70":"markdown","cfb405ee":"markdown","61d43edb":"markdown","c7b083ad":"markdown","3e5275f4":"markdown","25c772be":"markdown","fc3a03e5":"markdown","237bdaf7":"markdown","b727fa04":"markdown"},"source":{"b9315753":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nimport tensorflow_hub as hub\nfrom tensorflow.python.keras.applications.mobilenet_v2 import preprocess_input\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport glob\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e10f2553":"class_names = ['cat','dog']\ngenerator = ImageDataGenerator(rescale = 1.\/255)\ntrain_set = generator.flow_from_directory(\"..\/input\/dogs-cats-images\/dataset\/training_set\",\n                                          class_mode = \"binary\",\n                                          batch_size = 32,\n                                          target_size = (224,224))\n\nval_set = generator.flow_from_directory(\"..\/input\/dogs-cats-images\/dataset\/test_set\",\n                                        batch_size = 32,\n                                        class_mode = \"binary\",\n                                        target_size = (224,224))","f628ec2a":"plt.figure(figsize = (20,6))\nfor i in range(5):\n    plt.subplot(1,5,i+1)\n    plt.imshow(train_set[0][0][i])\nplt.show()","3172e2fb":"num_classes = 2\nepochs = 5\n\nURL = \"https:\/\/tfhub.dev\/google\/tf2-preview\/mobilenet_v2\/feature_vector\/4\"\nfeature_extractor = hub.KerasLayer(URL,\n                                  input_shape = (224,224,3))\n\n\nfeature_extractor.trainable = False\n","2d050e34":"#define model\nmodel = Sequential([\n    feature_extractor, #pre-trained model\n    tf.keras.layers.Dense(num_classes,activation='softmax') #output model\n])\n\nmodel.summary()","684146aa":"model.compile(optimizer = 'adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics = ['accuracy']\n             )","5a0b5fa1":"history = model.fit(train_set,validation_data = val_set,epochs = epochs)","ec26ad34":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(20,6))\nplt.subplot(1,2,1)\nplt.plot(range(epochs),acc,label = \"Training Accuracy\")\nplt.plot(range(epochs),val_acc,label = \"Validation Accuracy\")\nplt.legend()\nplt.title(\"Training and Validation Accuracy\")\n\nplt.subplot(1,2,2)\nplt.plot(range(epochs),loss,label = \"Training Loss\")\nplt.plot(range(epochs),val_loss,label=\"Validation Loss\")\nplt.legend()\nplt.title(\"Training and Validation Loss\")\nplt.show()","bb0cafc9":"predictions = [np.argmax(i) for i in model.predict(val_set[0])]\n#predictions = [class_names[np.argmax(i)] for i in model.predict(val_set[0])]\nplt.figure(figsize = (20,6))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.subplots_adjust(hspace = 0.3)\n    plt.imshow(val_set[0][0][i])\n    if(predictions[i] == int(val_set[0][1][i])):\n        plt.title(class_names[predictions[i]],color='g')\n    else:\n        plt.title(class_names[predictions[i]],color='r')\n    plt.axis('off')\nplt.show()","d4f1e685":"We apply 5 epochs and get very high score for totally 10000 images. It's awesome.","be5f2317":"<a id='1'><\/a>\n# Imports","5cdaa3ba":"<a id='9'><\/a>\n## Check Predictions\n\nLet's look at result of our model. If title is green it means that prediction is correct, if it is red, prediction is wrong.","edccee6d":"<a id='8'><\/a>\n## Train and Validation Results","859b2826":"# Introduction\nTo purpose of this kernel is classify dogs and cats by using pre-trained model with Tensorflow. Using pre-trained model for classification is also called Transfer Learning. These models are trained by people who are expert in own working area. I will use MobileNet v2 model in this kernel. This model is developed by Google team on ImageNet dataset. Our dataset like this;\n\n* Dataset has 2 label. They are dog and cats.\n* Dataset includes train and test sets in different folders.\n* There are 8000 images in train folder and 2000 images in test folder.\n\nContent\n1. [Imports](#1)\n1. [Prepare Dataset](#2)\n1. [Transfer Learning](#3)\n  * [Create Model](#4)\n  * [Compile Model](#5)\n  * [Fit Model](#6)\n1. [Conclusion](#7)\n    * [Train and Validation Results](#8)\n    * [Check Predictions](#9)","f9d19d70":"To prepare dataset ImageDataGenerator class can be used. ImageDataGenerator class provides a new dataset from original dataset. This class provides some changes labout zoom, rotation or brightness. I will use this class to normalization and resize images. To do this, I set the rescale parameters as (1.\/255). So every pixel which are between 0 and 255, are converted between 0 and 1.\n\nAfter create generator object, flow_from_directory function is called with some parameters. The paramaters which will be used, are listed below.\n\n\n* directory = path of image directory\n* class_mode = it can be binary or categorical. We have 2 target in our dataset. So binary class mode wil be selected.\n* batch_size = Number of images to be yielded from the generator per batch.\n* target_size = Size of images. MobileNet expects 224x224 images.","cfb405ee":"<a id='2'><\/a>\n# Prepare Dataset","61d43edb":"Now, we have train and validation sets. Each pixel of images are between 0 and 1. Also, each image size is 224x224x3. Let's look at first 5 image in training set.","c7b083ad":"<a id='7'><\/a>\n# Conclusion","3e5275f4":"<a id='4'><\/a>\n## Create Model\n\nTo create model is very simple with Tensorflow. To do this, tensorflow_hub library is used. KerasLayer function is called from library and pre-trained model url is given and of course KerasLayer expects to know what input shape is. \n\nNote that, we don't want to change the model except the output layer so we need to set trainable parameter as False.","25c772be":"Okey, we prepare our model except output layer until here. Now we will follow these steps;\n* Define a Sequential model\n* Set pre-trained model\n* Ser output layer.","fc3a03e5":"<a id='6'><\/a>\n## Fit Model","237bdaf7":"<a id='3'><\/a>\n# Transfer Learning\n\nTransfer learning is a technique which transfer the learning of existing model to a new dataset. To do this, we just need change the output layer. We change output layer because each dataset has different number of output class. For example, MobileNet v2 model has 1000 output class becuase it was trained on ImageNet dataset but our dataset has just 2 output class. So we have to give this information to our model.\n\nThanks to Tensorflow, it provides a lots of different pre-trained model on [Tensorflow Hub](https:\/\/tfhub.dev\/) and I will use [this](https:\/\/tfhub.dev\/google\/tf2-preview\/mobilenet_v2\/feature_vector\/4).","b727fa04":"<a id='5'><\/a>\n## Compile Model\n\nCompiling model same as trained your own model. Choose optimizer, loss function and metric and our model ready to fit."}}