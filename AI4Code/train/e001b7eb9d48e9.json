{"cell_type":{"95702e05":"code","8a27f4fe":"code","a995d914":"code","774f4f72":"code","61a475a1":"code","87503ba0":"code","d60a29c2":"markdown"},"source":{"95702e05":"!pip install kaggle-environments -U","8a27f4fe":"!cp -r ..\/input\/lux-ai-2021\/* .","a995d914":"%%writefile agent.py\nfrom lux.game import Game\nfrom lux.game_map import Cell, RESOURCE_TYPES, Position\nfrom lux.constants import Constants\nfrom lux.game_constants import GAME_CONSTANTS\nfrom lux import annotate\nimport math\nimport sys\nimport collections\n### Define helper functions\n\n# this snippet finds all resources stored on the map and puts them into a list so we can search over them\ndef find_resources(game_state):\n    resource_tiles: list[Cell] = []\n    width, height = game_state.map_width, game_state.map_height\n    for y in range(height):\n        for x in range(width):\n            cell = game_state.map.get_cell(x, y)\n            if cell.has_resource():\n                resource_tiles.append(cell)\n    return resource_tiles\n\n# the next snippet finds the closest resources that we can mine given position on a map\ndef find_closest_resources(pos, player, resource_tiles):\n    closest_dist = math.inf\n    closest_resource_tile = None\n    for resource_tile in resource_tiles:\n        # we skip over resources that we can't mine due to not having researched them\n        if resource_tile.resource.type == Constants.RESOURCE_TYPES.COAL and not player.researched_coal(): continue\n        if resource_tile.resource.type == Constants.RESOURCE_TYPES.URANIUM and not player.researched_uranium(): continue\n        dist = resource_tile.pos.distance_to(pos)\n        if dist < closest_dist:\n            closest_dist = dist\n            closest_resource_tile = resource_tile\n    return closest_resource_tile\n\ndef find_closest_city_tile(pos, player):\n    closest_city_tile = None\n    if len(player.cities) > 0:\n        closest_dist = math.inf\n        # the cities are stored as a dictionary mapping city id to the city object, which has a citytiles field that\n        # contains the information of all citytiles in that city\n        for k, city in player.cities.items():\n            for city_tile in city.citytiles:\n                dist = city_tile.pos.distance_to(pos)\n                if dist < closest_dist:\n                    closest_dist = dist\n                    closest_city_tile = city_tile\n    return closest_city_tile\n\n\n# the next snippet all resources distance and return as sorted order.\ndef find_resources_distance(pos, player, resource_tiles):\n    resources_distance = {}\n    for resource_tile in resource_tiles:\n        # we skip over resources that we can't mine due to not having researched them\n        if resource_tile.resource.type == Constants.RESOURCE_TYPES.COAL and not player.researched_coal(): continue\n        if resource_tile.resource.type == Constants.RESOURCE_TYPES.URANIUM and not player.researched_uranium(): continue\n        dist = resource_tile.pos.distance_to(pos)\n        resources_distance[resource_tile] = dist\n    resources_distance = collections.OrderedDict(sorted(resources_distance.items(), key= lambda x:x[1]))\n    return resources_distance\n\n\n\n# snippet to find the all citytiles distance and sort them.\ndef find_city_tile_distance(pos, player):\n    city_tiles_distance = {}\n    if len(player.cities) > 0:\n        closest_dist = math.inf\n        # the cities are stored as a dictionary mapping city id to the city object, which has a citytiles field that\n        # contains the information of all citytiles in that city\n        for k, city in player.cities.items():\n            for city_tile in city.citytiles:\n                dist = city_tile.pos.distance_to(pos)\n                city_tiles_distance[city_tile] = dist\n    city_tiles_distance = collections.OrderedDict(sorted(city_tiles_distance.items(), key= lambda x:x[1]))\n#     print(len(city_tiles_distance))\n    return city_tiles_distance\n\nimport numpy as np\ndef get_random_step():\n    return np.random.choice(['s','n','w','e'])","774f4f72":"%%writefile -a agent.py\n\ngame_state = None\ndef agent(observation, configuration):\n    global game_state\n\n    ### Do not edit ###\n    if observation[\"step\"] == 0:\n        game_state = Game()\n        game_state._initialize(observation[\"updates\"])\n        game_state._update(observation[\"updates\"][2:])\n        game_state.id = observation.player\n    else:\n        game_state._update(observation[\"updates\"])\n    \n    actions = []\n\n    ### AI Code goes down here! ### \n    player = game_state.players[observation.player]\n    opponent = game_state.players[(observation.player + 1) % 2]\n    width, height = game_state.map.width, game_state.map.height\n    \n    # add debug statements like so!\n    if game_state.turn == 0:\n        print(\"Agent is running!\", file=sys.stderr)\n\n    resource_tiles = find_resources(game_state)\n#     print(\"Observation setp: \",observation[\"step\"])\n    \n    # tract the agent move\n    move_mapper = {}\n#     build_worker() \n    \n#     print(len(player.cities))\n#     print(len(player.units))\n    \n    total_city_tiles = sum([len(city.citytiles) for city in  player.cities.values()])\n#     print('Total City: ', len(player.cities.values()))\n#     print('total citytiles: ', total_city_tiles)\n    \n    \n    if total_city_tiles > len(player.units):\n        for city in player.cities.values():\n            city_tiles = city.citytiles[0]\n            if city_tiles.cooldown <= 0:\n                action = city_tiles.build_worker()\n                actions.append(action)\n                break\n    \n    night_step_left = 40 - max((observation[\"step\"] % 40), 30)\n    \n    can_build= False\n    if len(player.cities) > 0:\n        for k, city in player.cities.items():\n#             print(city.fuel)\n            total_city_tiles = len(city.citytiles)\n#             print(total_city_tiles)\n            \n            total_need_fuel = (23 * total_city_tiles * night_step_left) * 3.5\n#             print('fuel need: ', total_need_fuel)\n            \n            if city.fuel - total_need_fuel >20:\n                can_build = True\n#                 print('can build true')\n                break\n    \n    # store all unit current loacaion on move tracker\n    for unit in player.units:\n        move_mapper[(unit.pos.x, unit.pos.y)] = unit\n                    \n                    \n#     print(\"Straing unit loop..\")\n            \n    for unit in player.units:\n        # if the unit is a worker (can mine resources) and can perform an action this turn\n#         print('free space: ', unit.get_cargo_space_left())\n#         print('cool down: ', unit.cooldown )\n        if unit.is_worker() and unit.can_act():\n            # we want to mine only if there is space left in the worker's cargo\n            if can_build and unit.can_build(game_state.map):\n                is_build = False\n#                 print(\"Is build...\")\n                # build city tiles adjasent of other tiles to make only one city.\n                for city in player.cities.values():\n                    for citytiles in city.citytiles:\n                        if citytiles.pos.is_adjacent(unit.pos):\n                            is_build = True\n#                             print(\"IS Build\")\n                            break\n\n                    if is_build:\n                        break\n\n                if is_build:\n                    action = unit.build_city()\n                    actions.append(action)  \n                    can_build = False\n#                     print('city build..')\n                    continue\n#                \n                    \n                    \n\n            \n            # if unit cant make citytiles try to collct resouce collection. \n            resources_distance = find_resources_distance(unit.pos, player, resource_tiles)\n            city_tile_distance = find_city_tile_distance(unit.pos, player)\n#             print(closest_resource_tile.resource.type, closest_resource_tile.resource.amount)\n            \n            flag = True\n            for r in resource_tiles:\n                if r.pos.equals(unit.pos):\n                    flag = False\n                    break\n            \n            if unit.get_cargo_space_left() > 0 and flag:\n                # find the closest resource if it exists to this unit\n                \n#                 print(closest_resource_tile\n                \n                if resources_distance is not None and len(resources_distance) >0:\n                    # create a move action to move this unit in the direction of the closest resource tile and add to our actions list\n                    closest_resource_tile, c_dist = None, None\n                    can_move = False\n                    for resource, dist in resources_distance.items():\n                        if move_mapper.get((resource.pos.x, resource.pos.y)) is None:\n                            closest_resource_tile = resource\n                            c_dist = dist\n                            \n\n#                     print(closest_resource_tile.resource.type, closest_resource_tile.resource.amount)\n                            if closest_resource_tile is not None and not closest_resource_tile.pos.equals(unit.pos):\n                                actions.append(annotate.line(unit.pos.x, unit.pos.y, closest_resource_tile.pos.x, closest_resource_tile.pos.y))\n                                direction = unit.pos.direction_to(closest_resource_tile.pos)\n                                next_pos = unit.pos.translate(direction, 1)\n\n                                if move_mapper.get((next_pos.x, next_pos.y)):\n                                    continue\n                                \n                                can_move = True\n                                next_state_pos = unit.pos.translate(direction,1)\n\n                                action = unit.move(direction)\n                                actions.append(action)\n                                move_mapper[(next_state_pos.x, next_state_pos.y)] = unit\n        #                         print(\"Move..\")\n                                break\n                    if not can_move:\n                        print(\"Random.... pos\")\n                        direction = get_random_step()\n                        next_state_pos = unit.pos.translate(direction,1)\n\n                        action = unit.move(direction)\n                        actions.append(action)\n                        move_mapper[(next_state_pos.x, next_state_pos.y)] = unit\n                        \n            else:\n                # find the closest citytile and move the unit towards it to drop resources to a citytile to fuel the city\n                if city_tile_distance is not None and len(city_tile_distance)> 0:\n                    closest_city_tile = None\n                    can_move = False\n                    for city_tile, dist in city_tile_distance.items():\n                        if move_mapper.get((city_tile.pos.x, city_tile.pos.y)) is None:\n                            closest_city_tile = city_tile\n                            \n                \n                            if closest_city_tile is not None:\n                                # create a move action to move this unit in the direction of the closest resource tile and add to our actions list\n                                actions.append(annotate.line(unit.pos.x, unit.pos.y, closest_city_tile.pos.x, closest_city_tile.pos.y))\n        #                         action = unit.move(unit.pos.direction_to(closest_city_tile.pos))\n                                direction = unit.pos.direction_to(closest_city_tile.pos)\n                                next_pos = unit.pos.translate(direction,1)\n\n                                if move_mapper.get((next_pos.x, next_pos.y)):\n                                    continue\n                                    \n                                can_move = True\n                                next_state_pos = unit.pos.translate(direction, 1)\n\n                                action = unit.move(direction)\n                                actions.append(action)\n                                move_mapper[(next_state_pos.x, next_state_pos.y)] = unit\n        #                         print('Back in city..')\n                                break\n                        \n        \n                    if not can_move:\n                        print(\"Random .. City\")\n                        direction = get_random_step()\n                        next_state_pos = unit.pos.translate(direction, 1)\n\n                        action = unit.move(direction)\n                        actions.append(action)\n                        move_mapper[(next_state_pos.x, next_state_pos.y)] = unit\n                \n                        \n                    \n#     print(move_mapper)\n#     print('')\n    return actions","61a475a1":"from kaggle_environments import make\n\nenv = make(\"lux_ai_2021\", configuration={\"seed\": 52, \"loglevel\": 2, \"annotations\": True}, debug=True)\nsteps = env.run(['agent.py', \"simple_agent\"])\nenv.render(mode=\"ipython\", width=1000, height=800)","87503ba0":"!tar -czf submission.tar.gz *","d60a29c2":"## Util Function"}}