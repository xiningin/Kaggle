{"cell_type":{"53d8f790":"code","44791f3a":"code","91c47fd5":"code","3ce1328a":"code","8a28a4cb":"code","54d9f46a":"code","1b93e49a":"code","dba3ebda":"code","80da87cd":"code","59c98513":"code","adda7d10":"code","84fe45b6":"code","4da7ff6f":"code","be121f2d":"code","08e6ad6a":"code","e0737c5b":"code","7e8a2b84":"code","8edee3b0":"code","3cf76d66":"code","12e4077f":"code","abd3cb26":"code","dd05427d":"code","c6ffcefd":"code","efeefc4c":"code","7b571090":"code","63aa665b":"code","430b692a":"code","a81dbbe4":"code","fddb29ea":"code","4b89dd05":"code","7b6de69c":"code","98ee2868":"code","6950d67f":"code","cbbc6498":"code","74f2812c":"code","aa1986b0":"code","df5c7be2":"markdown","3069a3c0":"markdown","12649d37":"markdown"},"source":{"53d8f790":"# Importando as Bibliotecas\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\n\nimport itertools\n\nfrom sklearn.metrics import balanced_accuracy_score\nfrom imblearn.datasets import fetch_datasets\nfrom imblearn.ensemble import BalancedRandomForestClassifier\n\nfrom imblearn.metrics import geometric_mean_score\n\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","44791f3a":"# Importando os dados para o dataframe\ndfori = pd.read_csv('\/kaggle\/input\/hmeq-data\/hmeq.csv')","91c47fd5":"# Exibindo quantidade de linhas e colunas\nprint('dfori:', dfori.shape)","3ce1328a":"# Exibindo colunas e seus tipos de dados\ndfori.info()","8a28a4cb":"# Mostrando alguns exenplos da base de dados\ndfori.sample(5).T","54d9f46a":"# Analisando os dados da coluna BAD\ndfori['BAD'].value_counts()","1b93e49a":"# Exibindo gr\u00e1fico de barras da coluna BAD\ndfori['BAD'].value_counts().plot.bar()","dba3ebda":"# Analisando os dados da coluna JOB\ndfori['JOB'].value_counts()","80da87cd":"# Exibindo gr\u00e1fico de barras da coluna JOB\ndfori['JOB'].value_counts().plot.bar()","59c98513":"# Exibindo gr\u00e1fico de barras da coluna JOB com a coluna BAD\nBADXJOB = pd.crosstab(dfori['JOB'],dfori['BAD'])\nBADXJOB.div(BADXJOB.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, title='BAD X JOB', figsize=(8,8))","adda7d10":"# Analisando os dados da coluna REASON\ndfori['REASON'].value_counts()","84fe45b6":"# Exibindo gr\u00e1fico de barras da coluna JOB\ndfori['REASON'].value_counts().plot.bar()","4da7ff6f":"# Exibindo gr\u00e1fico de barras da coluna REASON com a coluna BAD\nBADXREASON = pd.crosstab(dfori['REASON'],dfori['BAD'])\nBADXREASON.div(BADXREASON.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, title='BAD X REASON', figsize=(8,8))","be121f2d":"#Exibindo estat\u00edsticas b\u00e1sicas quando o empr\u00e9stimo est\u00e1 em situa\u00e7\u00e3o de inadimpl\u00eancia\ndfori[dfori['BAD']==1].drop('BAD', axis=1).describe().style.format(\"{:.2f}\")","08e6ad6a":"#Exibindo estat\u00edsticas b\u00e1sicas quando o empr\u00e9stimo est\u00e1 em situa\u00e7\u00e3o de normalidade\ndfori[dfori['BAD']==0].drop('BAD', axis=1).describe().style.format(\"{:.2f}\")","e0737c5b":"# Preenchendo os valores nulos da base de dados\ndfori = dfori.fillna({\"VALUE\": dfori['VALUE'].mean()\/\/1, \"MORTDUE\": 0,  \"DEROG\": 0, \"DELINQ\": 0, \"CLAGE\": 0, \n                      \"NINQ\": 0, \"CLNO\": 0, \"YOJ\": dfori['YOJ'].mean()\/\/1, \"DEBTINC\": dfori['DEBTINC'].mean()\/\/1,\n                      \"REASON\": 'Debtcon', \"JOB\": 'Other'})","7e8a2b84":"# Exibindo novamente as caracteristicas da base de dados\ndfori.info()","8edee3b0":"# Tranformando em categ\u00f3ricas as colunas do tipo \"object\"\nfor col in dfori.columns:\n    if dfori[col].dtype == 'object':\n        dfori[col]= dfori[col].astype('category').cat.codes","3cf76d66":"# Exibindo novamente as caracteristicas da base de dados\ndfori.info()","12e4077f":"#Exibindo estat\u00edsticas b\u00e1sicas\ndfori.describe().style.format(\"{:.2f}\")","abd3cb26":"# Exibindo primeiros registros de forma transposta\ndfori.head().T","dd05427d":"# Criando matriz de correla\u00e7\u00e3o entre as vari\u00e1veis\ndfori_matrix = dfori.corr()","c6ffcefd":"# Exibindo correla\u00e7\u00e3o das colunas com coluna BAD\ndfori_matrix[\"BAD\"].sort_values(ascending=False)","efeefc4c":"# Criando uam nova coluna com a raz~~ao entre o valor do empr\u00e9stimo e o valor do im\u00f3vel\ndfori[\"LOAN_PER_VALUE\"] = dfori[\"LOAN\"]\/dfori[\"VALUE\"]","7b571090":"# Recriando matriz de correla\u00e7\u00e3o entre as vari\u00e1veis\ndfori_matrix = dfori.corr()","63aa665b":"# Exibindo correla\u00e7\u00e3o das colunas com coluna BAD\ndfori_matrix[\"BAD\"].sort_values(ascending=False)","430b692a":"# Criando uma c\u00f3pia do dataframe\ndfori2 = dfori.copy()","a81dbbe4":"# Selecionando as colunas para uso no modelo\nfeats = [c for c in dfori2.columns if c not in ['BAD']]","fddb29ea":"# Exibindo as colunas\nfeats","4b89dd05":"# Criando as bases de teste e treino\nX, y = dfori2[feats], dfori2['BAD']\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y,\n                                                    random_state=0)\nL_train, L_test, m_train, m_test = train_test_split(L, m, stratify=m,\n                                                    random_state=0)","7b6de69c":"# Criando as bases de teste e treino\nL, m = dfori2[feats], dfori2['BAD']\nL_train, L_test, m_train, m_test = train_test_split(L, m, stratify=m,\n                                                    random_state=0)\n","98ee2868":"# Trabalhando com XGBoost\nfrom xgboost import XGBClassifier\nxgb = XGBClassifier(n_estimators=200, learning_rate=0.4, random_state=42)\nxgb.fit(L_train, m_train)\nm_pred_xgb = xgb.predict(L_test)\nprint('XGB performance:')\nprint('Accuracy: {:.4f}'\n      .format(accuracy_score(m_test, m_pred_xgb)))\nprint('Balanced accuracy: {:.4f}'\n      .format(balanced_accuracy_score(m_test, m_pred_xgb)))\nprint('F1 Score: {:.4f}'\n      .format(f1_score(m_test, m_pred_xgb)))\n","6950d67f":"# Mostrando as colunas mais importantes com com XGB\npd.Series(xgb.feature_importances_, index=feats).sort_values().plot.barh()","cbbc6498":"# Treinando os modelos para predi\u00e7\u00e3o com o Random Forest com balanceamento com a apresenta\u00e7\u00e3o das acur\u00e1cias\nbrf = BalancedRandomForestClassifier(n_estimators=50, random_state=0,\n                                     n_jobs=-1)\nbrf.fit(X_train, y_train)\ny_pred_brf = brf.predict(X_test)\nprint('Balanced Random Forest classifier performance:')\nprint('Accuracy: {:.4f}'\n      .format(accuracy_score(y_test, y_pred_brf)))\nprint('Balanced accuracy: {:.4f}'\n      .format(balanced_accuracy_score(y_test, y_pred_brf)))\nprint('F1 Score: {:.4f}'\n      .format(f1_score(y_test, y_pred_brf)))\n            ","74f2812c":"# Treinando os modelos para predi\u00e7\u00e3o com o Random Forest som balanceamento com a apresenta\u00e7\u00e3o das acur\u00e1cias\nrf = RandomForestClassifier(n_estimators=50, random_state=0, n_jobs=-1)\nrf.fit(X_train, y_train)\ny_pred_rf = rf.predict(X_test)\nprint('Random Forest classifier performance:')\nprint('Accuracy: {:.4f}'\n      .format(accuracy_score(y_test, y_pred_rf)))\nprint('Balanced accuracy: {:.4f}'\n      .format(balanced_accuracy_score(y_test, y_pred_rf)))\nprint('F1 Score: {:.4f}'\n      .format(f1_score(y_test, y_pred_rf)))\n","aa1986b0":"Na aplica\u00e7\u00e3o dos modelos preditivos RandomForest (com e sem balanceamento) e XGBoost, o XGBoost apresentou melhor acur\u00e1cia com os valores apurados, conforme abaixo:\n    Accuracy: 0.9309\n    Balanced accuracy: 0.8607\n    F1 Score: 0.8110","df5c7be2":"Conclus\u00e3o","3069a3c0":"#Descri\u00e7\u00e3o do Trabalho","12649d37":"Contexto\n \nO departamento de cr\u00e9dito ao consumidor de um banco deseja automatizar o processo de tomada de decis\u00e3o para aprova\u00e7\u00e3o das linhas de cr\u00e9dito Home Equity (Cr\u00e9dito com Garantia em Im\u00f3vel) do patrim\u00f4nio l\u00edquido. Para fazer isso, eles seguir\u00e3o as recomenda\u00e7\u00f5es da Lei da Igualdade de Oportunidades de Cr\u00e9dito para criar um modelo de pontua\u00e7\u00e3o de cr\u00e9dito derivado empiricamente e estatisticamente s\u00f3lido. O modelo ser\u00e1 baseado em dados coletados de solicitantes recentes concedidos cr\u00e9dito atrav\u00e9s do processo atual de concess\u00e3o de empr\u00e9stimos. O modelo ser\u00e1 constru\u00eddo a partir de ferramentas de modelagem preditiva, mas o modelo criado deve ser suficientemente interpret\u00e1vel para fornecer um motivo para qualquer a\u00e7\u00e3o adversa (rejei\u00e7\u00e3o).\n\nConte\u00fado\n\nO conjunto de dados de Home Equity (HMEQ) (Cr\u00e9dito com Garantia em Im\u00f3vel) cont\u00e9m informa\u00e7\u00f5es de linha de base e de desempenho de empr\u00e9stimos para 5.960 empr\u00e9stimos recentes de home equity. O alvo (BAD) \u00e9 uma vari\u00e1vel bin\u00e1ria que indica se um requerente acabou de tornar inadimplente ou \u00e9 um inadimplente conntumaz. Esse desfecho adverso ocorreu em 1.189 casos (20%). Para cada candidato, foram registradas 12 vari\u00e1veis de entrada.\n\n\nMotiva\u00e7\u00e3o\n\nE se voc\u00ea puder prever clientes que n\u00e3o pagam seus empr\u00e9stimos.\n\nBAD\n\n1 = cliente inadimplente no empr\u00e9stimo 0 = empr\u00e9stimo recebido\n\nLOAN\n\nMontante do pedido de empr\u00e9stimo\n\nMORTDUE\n\nValor devido da hipoteca existente\n\nVALUE\n\nValor da propriedade atual\n\nREASON\n\nDebtCon = consolida\u00e7\u00e3o da d\u00edvida HomeImp = melhoria da casa\n\nJOB\n\nSeis categorias ocupacionais\n\nYOJ\n\nAnos no emprego atual\n\nDEROG\n\nN\u00famero de principais relat\u00f3rios depreciativos\n\nDELINQ\n\nN\u00famero de linhas de cr\u00e9dito inadimplentes\n\nCLAGE\n\nIdade da linha comercial mais antiga em meses\n\nNINQ\n\nN\u00famero de linhas de cr\u00e9dito recentes\n\nCLNO\n\nN\u00famero de linhas de cr\u00e9dito\n\nDEBTINC\n\nRaz\u00e3o d\u00edvida \/ rendimento\n\n\nJOB - Valores dos Campos\n\nMgr-Manager -> trabalho de gerente\nOffice -> trabalho de escrit\u00f3rio\nOther -> outros trabalhos\nProfExe -> trabalho profissional e\/ou executivo\nSales -> trabalho com vendas\nSelf -> trabalho por conta pr\u00f3pria"}}