{"cell_type":{"131231f2":"code","54060371":"code","bb945a82":"code","2bb0ca8c":"code","251eab71":"code","e7dc2d2a":"code","7c6b6e98":"code","d1113772":"code","3912496f":"code","d750a872":"code","b710a661":"code","035bec3e":"code","15d1f7a4":"code","96e495ae":"code","1489f571":"code","67bee0cf":"code","fae6561a":"code","ce1ccc9b":"code","33bbc3be":"code","4176220e":"code","d4cbddec":"code","62f76f16":"code","e4b22bfb":"code","68142928":"code","08b5a93f":"code","eec66411":"code","b602c87e":"code","f4a5579a":"code","3958f228":"code","05a5c085":"code","6a1c1fec":"code","545e6287":"code","74460cc0":"code","e02c56f6":"code","a2b3648e":"code","720e34fe":"code","76538d03":"code","7bb0be21":"code","5ec7fe14":"code","24495b5d":"code","b5a7bd5c":"code","25831268":"code","258a6b09":"code","529e0a89":"markdown","e7b564a4":"markdown","598d8353":"markdown","4db8d172":"markdown","0b020e47":"markdown","42d38c90":"markdown","cca77147":"markdown","dbbad6a2":"markdown","4188ae60":"markdown","586b93da":"markdown","9f2251e6":"markdown","015db2ec":"markdown","21d3104e":"markdown","1b585da3":"markdown","19b2abca":"markdown","60735e7d":"markdown","4c314666":"markdown","94b4b9d9":"markdown","778ffaee":"markdown","201209c6":"markdown","7fae0ab5":"markdown","f23e98d4":"markdown","00010cf4":"markdown","e9a2dfbb":"markdown","ea3fe2c4":"markdown","1e0c6929":"markdown","9f4d5c8e":"markdown","1a24bcd3":"markdown","52346267":"markdown","040bff2c":"markdown","bd02f062":"markdown","45cd9acb":"markdown","3fc87eb2":"markdown","4007df15":"markdown","0f5e53cb":"markdown","82e3466a":"markdown","b019d57c":"markdown","a7958ccb":"markdown","6e490e2a":"markdown","1fd8e3ce":"markdown"},"source":{"131231f2":"import pandas as pd\nimport matplotlib.pyplot as plt","54060371":"headers = [\"symboling\",\"normalized-losses\",\"make\",\"fuel-type\",\"aspiration\", \"num-of-doors\",\"body-style\",\n         \"drive-wheels\",\"engine-location\",\"wheel-base\", \"length\",\"width\",\"height\",\"curb-weight\",\"engine-type\",\n         \"num-of-cylinders\", \"engine-size\",\"fuel-system\",\"bore\",\"stroke\",\"compression-ratio\",\"horsepower\",\n         \"peak-rpm\",\"city-mpg\",\"highway-mpg\",\"price\"]","bb945a82":"df = pd.read_csv(\"..\/input\/eda-auto\/auto.csv\", names = headers)","2bb0ca8c":"import numpy as np\ndf.replace(\"?\", np.nan, inplace = True)\ndf.head(5)","251eab71":"missing_data = df.isnull()\nmissing_data.head(5)","e7dc2d2a":"for column in missing_data.columns.values.tolist():\n    print(column)\n    print (missing_data[column].value_counts())\n    print(\"\")","7c6b6e98":"avg_norm_loss = df[\"normalized-losses\"].astype(\"float\").mean(axis=0)\nprint(\"Average of normalized-losses:\", avg_norm_loss)","d1113772":"df[\"normalized-losses\"].replace(np.nan, avg_norm_loss, inplace=True)","3912496f":"avg_bore=df['bore'].astype('float').mean(axis=0)\nprint(\"Average of bore:\", avg_bore)","d750a872":"df[\"bore\"].replace(np.nan, avg_bore, inplace=True)","b710a661":"avg_stroke=df['stroke'].astype('float').mean(axis=0)\nprint(\"Average of Stroke:\", avg_stroke)\ndf['stroke'].replace(np.nan, avg_stroke, inplace=True)","035bec3e":"avg_horsepower = df['horsepower'].astype('float').mean(axis=0)\nprint(\"Average horsepower:\", avg_horsepower)","15d1f7a4":"df['horsepower'].replace(np.nan, avg_horsepower, inplace=True)","96e495ae":"avg_peakrpm=df['peak-rpm'].astype('float').mean(axis=0)\nprint(\"Average peak rpm:\", avg_peakrpm)","1489f571":"df['peak-rpm'].replace(np.nan, avg_peakrpm, inplace=True)","67bee0cf":"df['num-of-doors'].value_counts()","fae6561a":"df['num-of-doors'].value_counts().idxmax()","ce1ccc9b":"#replace the missing 'num-of-doors' values by the most frequent \ndf[\"num-of-doors\"].replace(np.nan, \"four\", inplace=True)","33bbc3be":"# simply drop whole row with NaN in \"price\" column\ndf.dropna(subset=[\"price\"], axis=0, inplace=True)\n\n# reset index, because we droped two rows\ndf.reset_index(drop=True, inplace=True)","4176220e":"df.head()","d4cbddec":"df.dtypes","62f76f16":"df[[\"bore\", \"stroke\", \"peak-rpm\", \"price\"]] = df[[\"bore\", \"stroke\", \"peak-rpm\", \"price\"]].astype(\"float\")\ndf[[\"normalized-losses\"]] = df[[\"normalized-losses\"]].astype(\"int\")","e4b22bfb":"df.dtypes","68142928":"df.head()","08b5a93f":"# Convert mpg to L\/100km by mathematical operation (235 divided by mpg)\ndf['city-L\/100km'] = 235\/df[\"city-mpg\"]\n\n# check your transformed data \ndf.head()","eec66411":"df['highway-L\/100km'] = 235\/df[\"highway-mpg\"]\ndf.head()","b602c87e":"# replace (original value) by (original value)\/(maximum value)\ndf['length'] = df['length']\/df['length'].max()\ndf['width'] = df['width']\/df['width'].max()\ndf['height'] = df['height']\/df['height'].max()\n#df[['length','width','height']]","f4a5579a":"df[\"horsepower\"]=df[\"horsepower\"].astype(int, copy=True)","3958f228":"%matplotlib inline\nplt.hist(df[\"horsepower\"])\nplt.xlabel(\"horsepower\")\nplt.ylabel(\"count\")\nplt.title(\"horsepower bins\")","05a5c085":"bins = np.linspace(min(df[\"horsepower\"]), max(df[\"horsepower\"]), 4)\nbins","6a1c1fec":"group_names = ['Low', 'Medium', 'High']","545e6287":"df['horsepower-binned'] = pd.cut(df['horsepower'], bins, labels=group_names, include_lowest=True )\ndf[['horsepower','horsepower-binned']].head(20)","74460cc0":"df[\"horsepower-binned\"].value_counts()","e02c56f6":"%matplotlib inline\nplt.bar(group_names, df[\"horsepower-binned\"].value_counts())\nplt.xlabel(\"horsepower\")\nplt.ylabel(\"count\")\nplt.title(\"horsepower bins\")","a2b3648e":"%matplotlib inline\na = (0,1,2)\n\n# draw historgram of attribute \"horsepower\" with bins = 3\nplt.hist(df[\"horsepower\"], bins = 3)\nplt.xlabel(\"horsepower\")\nplt.ylabel(\"count\")\nplt.title(\"horsepower bins\")","720e34fe":"df.columns","76538d03":"dummy_variable_1 = pd.get_dummies(df[\"fuel-type\"])\ndummy_variable_1.head()","7bb0be21":"dummy_variable_1.rename(columns={'fuel-type-gas':'gas', 'fuel-type-diesel':'diesel'}, inplace=True)\ndummy_variable_1.head()","5ec7fe14":"# merge data frame \"df\" and \"dummy_variable_1\" \ndf = pd.concat([df, dummy_variable_1], axis=1)\n\n# drop original column \"fuel-type\" from \"df\"\ndf.drop(\"fuel-type\", axis = 1, inplace=True)","24495b5d":"df.head()","b5a7bd5c":"dummy_variable_2 = pd.get_dummies(df[\"aspiration\"])\ndummy_variable_2.rename(columns={'aspiration-turbo':'turbo', 'aspiration-std':'std'}, inplace=True)\ndummy_variable_2.head()","25831268":"df = pd.concat([df, dummy_variable_2], axis=1)\ndf.drop(\"aspiration\", axis=1, inplace=True)","258a6b09":"df","529e0a89":"According to what we have analyzed, some data of numerical values are in the object type. So we will clean them by method .astype() and changing their datatypes.","e7b564a4":"<h4>Calculate the mean value for 'bore' column<\/h4>","598d8353":" Python list <b>headers<\/b> containing name of headers ","4db8d172":"We now have the value 0 to represent \"gas\" and 1 to represent \"diesel\" in the column \"fuel-type\". We will now insert this column back into our original dataset. ","0b020e47":"<h4>Replace \"NaN\" by mean value:<\/h4>","42d38c90":"<h4>Listing the data types for each column<\/h4>","cca77147":"using method idxmax() to know what Number of doors are common in Cars in the dataset.","dbbad6a2":"So the same step(s) we used previously.","4188ae60":"Lets see the number of vehicles in each bin.","586b93da":"<p>The formula for unit conversion is<p>\nL\/100km = 235 \/ mpg","9f2251e6":"<h4>Replace NaN by mean value<\/h4>","015db2ec":"<h2>Data Normalization<\/h2>","21d3104e":"**Analyzing Missing data**","1b585da3":"**Now for Column 'Stroke'**","19b2abca":" We set group  names:","60735e7d":"**For making 3 bins**","4c314666":"<h2>Binning<\/h2>\nWe will use the Pandas method 'cut' to segment the 'horsepower' column into 3 bins","94b4b9d9":"**Importing Pandas and Matplotlib**","778ffaee":"<h4>Replace NaN by mean value:<\/h4>","201209c6":"**Reading CSV file**","7fae0ab5":"<b>Good!<\/b> Now, we obtain the dataset with no missing values.","f23e98d4":"Double-click <b>here<\/b> for the solution.\n\n<!-- The answer is below:\n\n# get indicator variables of aspiration and assign it to data frame \"dummy_variable_2\"\ndummy_variable_2 = pd.get_dummies(df['aspiration'])\n\n# change column names for clarity\ndummy_variable_2.rename(columns={'std':'aspiration-std', 'turbo': 'aspiration-turbo'}, inplace=True)\n\n# show first 5 instances of data frame \"dummy_variable_1\"\ndummy_variable_2.head()\n\n-->","00010cf4":"<h4>Calculate the mean value for 'peak-rpm' column:<\/h4>","e9a2dfbb":"The last two columns are now the indicator variable representation of the fuel-type variable. It's all 0s and 1s now.","ea3fe2c4":"Finally, let's drop all rows that do not have price data:","1e0c6929":"<h4>Replace \"NaN\" by mean value in \"normalized-losses\" column<\/h4>","9f4d5c8e":"<h4>Calculate the mean value for the  'horsepower' column:<\/h4>","1a24bcd3":"**Importing Numpy  and replacing \"?\" value**","52346267":"We have seen that our Fuel data is not in standard form. So, we will now make it so.","040bff2c":"**Much Cleaner now :-)**","bd02f062":"<h3>Bins visualization<\/h3>","45cd9acb":"**Converting Categorical values to numerical**","3fc87eb2":"**Data Standardization**","4007df15":"<h4>Calculating the average of the column <\/h4>","0f5e53cb":"**Histogram for Horsepower**","82e3466a":" We apply the function \"cut\" the determine what each value of \"df['horsepower']\" belongs to. ","b019d57c":"**By this, we know that; how much values are missing from each column. Thanks to For loop**","a7958ccb":"Lets plot the distribution of each bin.","6e490e2a":"**Now for Highway fuel Consumption**","1fd8e3ce":"<h4>Convert data types to proper format<\/h4>"}}