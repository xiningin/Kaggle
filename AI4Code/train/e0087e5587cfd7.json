{"cell_type":{"e6c85cd0":"code","1dd96ddb":"code","ed02ab97":"code","f12a143e":"code","588a244e":"code","0a1600ff":"code","868f08b7":"code","c73ed4e4":"code","415b3290":"code","c9f1cfdc":"code","2cf89132":"code","98da8317":"code","a4b176a6":"code","b078bfa8":"code","4d6e898b":"code","af704355":"code","03372ba4":"code","5c928237":"markdown","698b880b":"markdown","8f498407":"markdown","f560a981":"markdown","07c1e3dd":"markdown","39f40feb":"markdown","c9bebcf1":"markdown","415fc41d":"markdown","e33e14bf":"markdown","29ad2321":"markdown","4aed163c":"markdown","2c1c470c":"markdown","049c56c8":"markdown","02d3183a":"markdown","dd73c2e9":"markdown","f305072d":"markdown","1c7dda3a":"markdown","d6ceb951":"markdown","af54f53b":"markdown"},"source":{"e6c85cd0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport csv\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1dd96ddb":"img_rows, img_cols = 28, 28\nnum_classes = 10\n\nX_train = np.load(\"\/kaggle\/input\/fashionmnistchallenge\/train_images.npy\/train_images.npy\")\n\nwith open(\"\/kaggle\/input\/fashionmnistchallenge\/train_labels.csv\") as csv_file:\n    csv_reader = csv.reader(csv_file)\n    colnames = next(csv_reader)  # skip column names\n    y_train = np.array(list(csv_reader)).astype(float)\n    y_train = np.delete(y_train, 0, axis=1) # delete index column","ed02ab97":"X_train[0][0], y_train[0]","f12a143e":"def show_image(arr):\n    two_d = (np.reshape(arr, (img_rows, img_cols)) * 255).astype(np.uint8)\n    plt.imshow(two_d, interpolation='nearest')\n    plt.show()\n\nshow_image(X_train[0]) # 0 is the index of the training image you want to display","588a244e":"X_train = X_train \/ 255.0\n\n# As the dimension of each image is 28x28, we changed the entire database to the format [-1 (all elements), height * width]\nX_train = X_train.reshape(-1, img_rows*img_cols)","0a1600ff":"X_train.shape","868f08b7":"y_train.shape","c73ed4e4":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D\n\nfashion_model = tf.keras.models.Sequential()","415b3290":"fashion_model.add(Dense(units=128,\n                        activation='relu',\n                        input_shape = (img_rows*img_cols, )))","c9f1cfdc":"fashion_model.add(tf.keras.layers.Dropout(0.2))","2cf89132":"# Prediction layer. It has 10 units, each corresponding to a different class.\nfashion_model.add(tf.keras.layers.Dense(units=num_classes, activation='softmax'))","98da8317":"fashion_model.compile(optimizer='adam',\n                      loss='sparse_categorical_crossentropy',\n                      metrics=['sparse_categorical_accuracy'])","a4b176a6":"fashion_model.summary()","b078bfa8":"fashion_model.fit(X_train, y_train, epochs=5)","4d6e898b":"X_test = np.load(\"\/kaggle\/input\/fashionmnistchallenge\/test_images.npy\/test_images.npy\")\nX_test = X_test \/ 255.0\nX_test = X_test.reshape(-1, img_rows*img_cols)","af704355":"predictions = [np.argmax(i) for i in fashion_model.predict(X_test)]","03372ba4":"submission = test.id.copy().to_frame()\nsubmission['prediction'] = predictions","5c928237":"### Preprocessing test data","698b880b":"Visualize an image using the given code block.","8f498407":"### Adding the remaining layers ","f560a981":"## 3) Fitting the model","07c1e3dd":"### Loading and visualizing data\nLoad the train values and labels into X_train and y_train respectively.","39f40feb":"## 2) Building the Artificial Neural Network","c9bebcf1":"# MAIS 202 Assignment 4: Fashion MNIST challenge","415fc41d":"### Creating CSV file from prediction list","e33e14bf":"### Adding the output layer","29ad2321":"By Anthony Dumais and Alberto Lopez-Garcia\n\nWe were inspired by the organization of the [Fashion_MNIST_TensorFlow_classification](https:\/\/www.kaggle.com\/juniorbueno\/fashion-mnist-tensorflow-classification) notebook and implemented 2D convolutional neural networks with the valuable help of the tutorial [Deep Learning from Scratch](https:\/\/www.kaggle.com\/dansbecker\/exercise-deep-learning-from-scratch-daily).","4aed163c":"We display the first elements of X_train and y_train to make sure we have the correct data format.","2c1c470c":"### Adding Dropout\nDropout is a regularization technique in which some neurons get their value updated to 0. That is, during training, these neurons will not be modified. As a result, there is less chance of overfitting (reduces variance).","049c56c8":"### Compiling the model","02d3183a":"### Defining the model","dd73c2e9":"## 4) Making predictions and creating output file","f305072d":"### Adding the first dense (fully-connected) layer","1c7dda3a":"### Normalizing images and reshaping database","d6ceb951":"### Generating predictions","af54f53b":"## 1) Preprocessing\n### Importing libraries and making sure our datasets are in the correct directory\n\nWe will work with the datasets provided in the Kaggle competition."}}