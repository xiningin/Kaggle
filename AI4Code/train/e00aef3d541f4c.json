{"cell_type":{"183d4b2b":"code","178d9690":"code","da87195c":"code","df5b58c8":"code","f7cb6c65":"code","22c30e59":"code","d5abf764":"code","2c28db60":"code","8a02bfdc":"code","15a0d4d1":"code","eb4e41f2":"code","c8e9a45f":"code","5cb5112a":"code","29bfd284":"code","57f7aa9d":"code","db58d997":"code","f4a42d12":"code","713dbb56":"code","88598b91":"code","a6e5097c":"code","06dc0a8a":"code","0996a037":"code","aadcaae8":"code","1326f3a2":"code","4fee4464":"code","26807a66":"markdown","e666a6a7":"markdown","818d31f3":"markdown","f483b9ca":"markdown","08c9e8ec":"markdown","46892deb":"markdown","44990365":"markdown","dd06f14a":"markdown"},"source":{"183d4b2b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","178d9690":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport itertools\nfrom sklearn.preprocessing import PolynomialFeatures, LabelEncoder\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","da87195c":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv')","df5b58c8":"train.shape, test.shape","f7cb6c65":"train.head()","22c30e59":"train.info()","d5abf764":"target = train['Survived']\ntrain.drop('Survived', axis = 1, inplace = True)","2c28db60":"train.isnull().values.sum(), test.isnull().values.sum()","8a02bfdc":"train.isnull().mean(), test.isnull().mean()","15a0d4d1":"fig, (ax1, ax2) = plt.subplots(1,2,figsize=(12,5))\n\nsns.heatmap(train.isnull(), yticklabels=False, cbar=False, cmap='viridis', ax=ax1)\nsns.heatmap(test.isnull(), yticklabels=False, cbar=False, cmap='viridis', ax=ax2);\n","eb4e41f2":"df = pd.concat([train, test], axis = 0, ignore_index = True)","c8e9a45f":"# categorical\nfeat_cat = [col for col in df.columns if df[col].dtypes == 'object']\nfeat_cat","5cb5112a":"for col in feat_cat:\n    df.loc[:, col] = df[col].astype(str).fillna('NONE')","29bfd284":"# numerical\nfeat_num = df.dtypes[df.dtypes != \"object\"]\nfeat_num","57f7aa9d":"df['Age'].fillna(train['Age'].mean(), inplace = True)\ndf['Fare'].fillna(train['Fare'].median(), inplace = True)","db58d997":"comb = list(itertools.combinations(['Sex', 'Embarked'], 2))","f4a42d12":"for c1, c2 in comb:\n    df.loc[:, c1 + '_' + c2] = df[c1].astype(str) + '_' + df[c2].astype(str)","713dbb56":"pf = PolynomialFeatures(degree = 2, interaction_only = False, include_bias = False)","88598b91":"feat_poly = pf.fit_transform(df.loc[:, ['Age', 'Fare']])\nn = feat_poly.shape[1]\ndf_transformed = pd.DataFrame(feat_poly, columns = [f'f_{i}' for i in range(1, n+1)])\ndf = pd.concat([df, df_transformed], axis = 1)","a6e5097c":"def label_encode(df, column):\n    le = LabelEncoder()\n    new_feature = \"{}_le\".format(column)\n    le.fit(df[column].unique().tolist())\n    df[new_feature] = le.transform(df[column])\n    return new_feature","06dc0a8a":"feat_le = []\nfor feat in ['Sex', 'Embarked', 'Sex_Embarked']:\n    feat_le.append(label_encode(df, feat))","0996a037":"df.drop(['PassengerId','Name', 'Ticket', 'Cabin',\n         'Sex', 'Embarked','Sex_Embarked',\n         'Age', 'Fare'], axis = 1, inplace = True)","aadcaae8":"df.head()","1326f3a2":"train, test = df.iloc[:train.shape[0], ], df.iloc[train.shape[0]:, ]","4fee4464":"train.shape, test.shape","26807a66":"## Impute","e666a6a7":"## Drop Columns","818d31f3":"## Read Data","f483b9ca":"## Load Libraries","08c9e8ec":"## Label Encoder","46892deb":"## Categorical Interactions","44990365":"## Polynomial Features","dd06f14a":"## Missing Values"}}