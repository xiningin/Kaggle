{"cell_type":{"0cd338b4":"code","b1495aed":"code","5b27c762":"code","020261b5":"code","9bf79344":"code","91db466c":"code","331cdd2b":"code","34f6213a":"code","491ac72b":"code","b9267351":"code","524c4eb6":"code","94a0f6eb":"code","811f9e2a":"code","1f5dbab0":"code","aae0a722":"code","8daae53e":"code","e0c262f1":"code","f641afe6":"code","fc6b9055":"code","cf8c9700":"code","ad6f5759":"code","fe496725":"code","64c7178d":"code","1ff2926a":"code","100894e6":"code","511f7d87":"code","0da51fd5":"code","7e8f0f47":"code","0584c643":"code","d0a49594":"code","439cdfd1":"code","d42e33da":"code","907a1a38":"code","b42b0a1e":"code","1ef35939":"code","5dd3f9f9":"code","adb91ded":"code","4f416635":"code","6423a011":"code","bf7ecd79":"code","ff108ba6":"code","452db8cd":"code","4c56c305":"code","58593128":"code","f09aca8b":"code","1f934e50":"code","63613d75":"code","0b1d22a5":"code","68742170":"code","fa36bc6e":"code","a1f26c97":"code","4a6a06e3":"code","1cdfa25b":"code","f30919eb":"code","9b8bda53":"code","12f8ee98":"code","ed1a24f5":"code","7da4ade4":"code","6924742e":"code","02cdbed6":"code","1d8b5b55":"code","270b4b82":"code","da664a8e":"code","cd1f0e0d":"code","a0b24001":"code","070ec7a7":"code","cb60fb91":"code","5db7527b":"code","61db8314":"code","ee85a87e":"code","ee544f64":"code","d62271b6":"code","845645ea":"code","648baa4e":"code","6f4bfefa":"code","68b35d7c":"code","6ed361cf":"code","5c2cd635":"code","4e8f3dd1":"code","5e3fad0a":"code","6a463e3a":"code","1e5d8059":"code","8ff39f3c":"code","865a1864":"code","cdced8a6":"code","3b88246b":"code","7e2e0d9e":"code","d9e4ecc1":"code","48992feb":"code","37e32559":"code","80c0d158":"code","30fd024f":"code","c9bb8c84":"code","3a09f046":"code","24773f2c":"code","178a7ae3":"code","0498bb2c":"code","eacce24e":"code","6c096923":"code","052bb45a":"code","8c77eb3c":"code","449a5498":"code","ad50cc8b":"code","66a65bf8":"code","161eecb0":"code","47240139":"code","b33b7960":"code","5c730b47":"code","161b16de":"code","001cb642":"code","ceb466f2":"code","ecffe160":"code","ad03fed9":"code","e0687fa3":"markdown","c5af45ee":"markdown","55cf05b9":"markdown","9d37f293":"markdown","aa571251":"markdown","5e617f9a":"markdown","168477a5":"markdown","a6c967a4":"markdown","34f6de18":"markdown","1b5d6e8d":"markdown","50d16c06":"markdown","dbbda512":"markdown","0a7d2ed7":"markdown","d4cbc24f":"markdown","08898455":"markdown","aad04b79":"markdown","6c863c35":"markdown","4a61270f":"markdown","16abf0c6":"markdown","01e12338":"markdown","eb971dbd":"markdown","3ec4ab6e":"markdown","a84d82ad":"markdown","2305279d":"markdown","c31fdc3b":"markdown","a44c94cd":"markdown","077ab5f1":"markdown","dc76789c":"markdown","2a055f7d":"markdown","64b8b1eb":"markdown","e31d3e74":"markdown","7c7ad45e":"markdown","f850b1d7":"markdown","677ed08d":"markdown","46e64678":"markdown","ec97ccd2":"markdown","65b4b0b8":"markdown","f315bf16":"markdown","fe7d52dd":"markdown","049d99a1":"markdown","d103c923":"markdown","39941ba8":"markdown","897df17e":"markdown","98a2f626":"markdown","c123eab4":"markdown","d70b18e1":"markdown","19bb99fc":"markdown","69daa589":"markdown","87fed1fc":"markdown","839fc2bd":"markdown","e46a4955":"markdown","005d4f07":"markdown","c94ccf55":"markdown","9d510860":"markdown","5eef21f5":"markdown","f806b9a5":"markdown","d4367837":"markdown","4d5a878e":"markdown","56640986":"markdown","d5fada5a":"markdown","0ce629db":"markdown","f3752b5e":"markdown","e2f1a104":"markdown","f4001169":"markdown","ca350425":"markdown","574cd9f3":"markdown","a73355ad":"markdown","a170b008":"markdown","f3345e77":"markdown","fade7da4":"markdown","e94c186b":"markdown","a2359226":"markdown","53ecefe5":"markdown","5cb8f494":"markdown","0282bfcb":"markdown","46385b50":"markdown","74207da2":"markdown","5c9853d6":"markdown","d583e23d":"markdown","62dc6f9f":"markdown","42b93414":"markdown","fcaf0155":"markdown","42be17b4":"markdown"},"source":{"0cd338b4":"import pandas as pd\nimport numpy as np\nimport math\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport scipy.sparse\nimport gc\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.manifold import TSNE\nfrom sklearn.metrics import roc_auc_score\nimport warnings \nfrom lightgbm import LGBMClassifier\nwarnings.filterwarnings('ignore')","b1495aed":"identity_train = pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/train_identity.csv\")\nidentity_test = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/test_identity.csv')\ntest_transaction = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/test_transaction.csv')\ntrain_transaction = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/train_transaction.csv')","5b27c762":"# h\u1ee3p nh\u1ea5t data d\u1ef1a theo thu\u1ed9c t\u00ednh TransactionID \ntrain = pd.merge(train_transaction,identity_train, on='TransactionID', how='left')\ntest = pd.merge(test_transaction,identity_test, on='TransactionID', how='left')","020261b5":"train","9bf79344":"test","91db466c":"# train data\nfor i in train.columns:\n    print(i,'NaN values present is:',train[i].isnull().sum(),end=\" \")\n    print('type is :',train[i].dtypes,end=\" \")\n    print('% of NaN values:',np.round(train[i].isnull().sum()\/train.shape[0]*100,2))","331cdd2b":"# test data\nfor i in test.columns:\n    print(i,'NaN values present is:',test[i].isnull().sum(),end=\" \")\n    print('type is :',test[i].dtypes,end=\" \")\n    print('% of NaN values:',np.round(test[i].isnull().sum()\/test.shape[0]*100,2))","34f6213a":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: \n        print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","491ac72b":"# gi\u1ea3i ph\u00f3ng data frame kh\u00f4ng c\u1ea7n thi\u1ebft\ndel train_transaction,test_transaction,identity_train,identity_test\ngc.collect()","b9267351":"# gi\u1ea3m memory\ntrain=reduce_mem_usage(train)\ntest=reduce_mem_usage(test)\nprint('training set shape:', train.shape)\nprint('test set shape:', test.shape)","524c4eb6":"sns.countplot(train['isFraud'])\nplt.show()\nprint('D\u1eef li\u1ec7u ch\u1ee9a ',np.round(train[train['isFraud']==1].shape[0]\/train.shape[0]*100,2),'% giao d\u1ecbch gian l\u1eadn.')\nprint('D\u1eef li\u1ec7u ch\u1ee9a ',np.round(train[train['isFraud']==0].shape[0]\/train.shape[0]*100,2),'% giao d\u1ecbch h\u1ee3p ph\u00e1p.')","94a0f6eb":"def describe(datatrain,datatest,feature):\n    d = pd.DataFrame(columns=[feature,'Train','TrainFraud','TrainLegit','Test'])\n    d[feature] = ['count','mean','std','min','25%','50%','75%','max','unique','NaN','NaNshare']\n    for i in range(0,8):\n        d['Train'].iloc[i] = datatrain[feature].describe().iloc[i]\n        d['TrainFraud'].iloc[i]=datatrain[datatrain['isFraud']==1][feature].describe().iloc[i]\n        d['TrainLegit'].iloc[i]=datatrain[datatrain['isFraud']==0][feature].describe().iloc[i]\n        d['Test'].iloc[i]=datatest[feature].describe().iloc[i]\n    d['Train'].iloc[8] = len(datatrain[feature].unique())\n    d['TrainFraud'].iloc[8]=len(datatrain[datatrain['isFraud']==1][feature].unique())\n    d['TrainLegit'].iloc[8]=len(datatrain[datatrain['isFraud']==0][feature].unique())\n    d['Test'].iloc[8]=len(datatest[feature].unique())\n    d['Train'].iloc[9] = datatrain[feature].isnull().sum()\n    d['TrainFraud'].iloc[9] = datatrain[datatrain['isFraud']==1][feature].isnull().sum()\n    d['TrainLegit'].iloc[9] = datatrain[datatrain['isFraud']==0][feature].isnull().sum()\n    d['Test'].iloc[9]=datatest[feature].isnull().sum()\n    d['Train'].iloc[10] = datatrain[feature].isnull().sum()\/len(datatrain)\n    d['TrainFraud'].iloc[10] = datatrain[datatrain['isFraud']==1][feature].isnull().sum()\/len(datatrain[datatrain['isFraud']==1])\n    d['TrainLegit'].iloc[10] = datatrain[datatrain['isFraud']==0][feature].isnull().sum()\/len(datatrain[datatrain['isFraud']==0])\n    d['Test'].iloc[10]=datatest[feature].isnull().sum()\/len(datatest)\n    return d","811f9e2a":"transactionDTDescribe = describe(train,test,'TransactionDT')","1f5dbab0":"transactionDTDescribe","aae0a722":"sns.distplot(train['TransactionDT'],kde=False)\nsns.distplot(test['TransactionDT'],kde=False)\nplt.legend(['train','test'])","8daae53e":"train['day'] = (train['TransactionDT']\/\/(3600*24)-1)%7\ntest['day'] = (test['TransactionDT']\/\/(3600*24)-1)%7","e0c262f1":"train_day = (train.groupby(['isFraud'])['day']\n                     .value_counts(normalize=True)\n                     .rename('percentage')\n                     .mul(100)\n                     .reset_index()\n                     .sort_values('day'))\nsns.barplot(x=\"day\", y=\"percentage\", hue=\"isFraud\", data=train_day)","f641afe6":"train['hour'] = (train['TransactionDT']\/\/(3600))%24\ntest['hour'] = (test['TransactionDT']\/\/(3600))%24","fc6b9055":"train_hour = (train.groupby(['isFraud'])['hour']\n                     .value_counts(normalize=True)\n                     .rename('percentage')\n                     .mul(100)\n                     .reset_index()\n                     .sort_values('hour'))\nsns.barplot(x=\"hour\", y=\"percentage\", hue=\"isFraud\", data=train_hour)","cf8c9700":"# T\u1ea1o hour feature - mang m\u1ed9t ch\u00fat t\u00ednh c\u1ea3nh b\u00e1o d\u1ef1a v\u00e0o c\u00e1c ph\u00e2n t\u00edch tr\u00ean\ndef hourFeature(hour):\n    if hour>3 and hour < 11:\n        return \"highalert\"\n    if hour ==11 or hour==18:\n        return \"lowalert\"\n    if hour==2 or hour==3 or hour==23:\n        return \"mediumalert\"\n    else:\n        return \"noalert\"","ad6f5759":"train['alertFeature'] = train['hour'].apply(hourFeature)\ntest['alertFeature'] = test['hour'].apply(hourFeature)","fe496725":"transactionAmtDescribe = describe(train,test,'TransactionAmt')","64c7178d":"transactionAmtDescribe","1ff2926a":"l=[99.9,99.91,99.92,99.93,99.94,99.95,99.96,99.97,99.98,99.99]\nfor i in l:\n    print('train',np.percentile(train['TransactionAmt'],i))\n    print('test',np.percentile(test['TransactionAmt'],i))","100894e6":"# th\u1eed s\u1eed d\u1ee5ng ng\u01b0\u1ee1ng 10000 tr\u1edf l\u00ean:\ntrain[train['TransactionAmt']>10000]","511f7d87":"train = train[train['TransactionAmt']<10000]","0da51fd5":"# l\u1ea5y gi\u00e1 tr\u1ecb log c\u1ee7a TransactionAmt \u0111\u1ec3 t\u1ea1o ra thu\u1ed9c t\u00ednh m\u1edbi LogTransactionAmt\ntrain['LogTransactionAmt'] = np.log(train['TransactionAmt'])\ntest['LogTransactionAmt'] = np.log(test['TransactionAmt'])","7e8f0f47":"plt.figure(figsize=(9,6))\nplt.subplot(1,2,1)\nsns.distplot(train[train['isFraud']==0]['LogTransactionAmt'])\nsns.distplot(train[train['isFraud']==1]['LogTransactionAmt'])\nplt.legend(['legit','fraud'])\nplt.title('Train')\n# plt.subplot(1,2,2)\n# sns.distplot(test['LogTransactionAmt'])","0584c643":"plt.figure(figsize=(12,6))\nplt.subplot(1,2,1)\ntrain_ProductCD = (train.groupby(['isFraud'])['ProductCD']\n                     .value_counts(normalize=True)\n                     .rename('percentage')\n                     .mul(100)\n                     .reset_index()\n                     .sort_values('ProductCD'))\nsns.barplot(x=\"ProductCD\", y=\"percentage\", hue=\"isFraud\", data=train_ProductCD)\nplt.subplot(1,2,2)\ntest_ProductCD =test['ProductCD'].value_counts(normalize=True).mul(100).rename('percentage')\\\n.reset_index()\nsns.barplot(x=\"index\", y=\"percentage\", data=test_ProductCD)","d0a49594":"plt.figure(figsize=(11,6))\nplt.subplot(1,2,1)\nsns.distplot(train[(train['isFraud']==0) & (~train['card3'].isnull())]['card3'])\nsns.distplot(train[(train['isFraud']==1) & (~train['card3'].isnull())]['card3'])\nplt.legend(['Legit','Fraud'])\nplt.title('Train')\nplt.subplot(1,2,2)\nsns.distplot(test[~test['card3'].isnull()]['card3'])\nplt.title('Test')","439cdfd1":"def card3Values(val):\n    if val==np.nan:\n        return val\n    else:\n        if val > 150:\n            return 'T'\n        else:\n            return 'F'","d42e33da":"train['card3Values'] = train['card3'].apply(card3Values)","907a1a38":"test['card3Values'] = test['card3'].apply(card3Values)","b42b0a1e":"plt.figure(figsize=(12,6))\nplt.subplot(1,2,1)\ntrain_card4 = (train[~train['card4'].isnull()].groupby(['isFraud'])['card4']\n                     .value_counts(normalize=True)\n                     .rename('percentage')\n                     .mul(100)\n                     .reset_index()\n                     .sort_values('card4'))\nsns.barplot(x=\"card4\", y=\"percentage\", hue=\"isFraud\", data=train_card4)\nplt.title('Train')\nplt.subplot(1,2,2)\ntest_card4 =test[~test['card4'].isnull()]['card4'].value_counts(normalize=True).mul(100).rename('percentage')\\\n.reset_index()\nsns.barplot(x=\"index\", y=\"percentage\", data=test_card4)\nplt.title('Test')","1ef35939":"plt.figure(figsize=(12,6))\nplt.subplot(1,2,1)\ntrain_card6 = (train[~train['card6'].isnull()].groupby(['isFraud'])['card6']\n                     .value_counts(normalize=True)\n                     .rename('percentage')\n                     .mul(100)\n                     .reset_index()\n                     .sort_values('card6'))\nsns.barplot(x=\"card6\", y=\"percentage\", hue=\"isFraud\", data=train_card6)\nplt.title('Train')\nplt.subplot(1,2,2)\ntest_card6 =test[~test['card6'].isnull()]['card6'].value_counts(normalize=True).mul(100).rename('percentage')\\\n.reset_index()\nsns.barplot(x=\"index\", y=\"percentage\", data=test_card6)\nplt.title('Test')","5dd3f9f9":"def replaceToOther(value):\n    if value==np.nan:\n        return value\n    if value=='debit or credit' or value=='charge card':\n        return 'debit'\n    else:\n        return value","adb91ded":"train['card6'] = train['card6'].apply(replaceToOther)\ntest['card6'] = test['card6'].apply(replaceToOther)","4f416635":"train['P_emaildomain'].value_counts()[:10]","6423a011":"def returnfirst(email):\n    return email.split(\".\")[0]","bf7ecd79":"train['first'] = train[~train['P_emaildomain'].isnull()]['P_emaildomain'].apply(returnfirst)","ff108ba6":"test['first'] = test[~test['P_emaildomain'].isnull()]['P_emaildomain'].apply(returnfirst)","452db8cd":"train_email = (train.groupby(['isFraud'])['first']\n                     .value_counts(normalize=True)\n                     .rename('percentage')\n                     .mul(100)\n                     .reset_index()\n                     .sort_values('first'))","4c56c305":"sns.barplot(x=\"first\", y=\"percentage\", hue=\"isFraud\", data=train_email)\nplt.xticks(rotation=90)","58593128":"emails = {'gmail': 'google', 'att.net': 'att', 'twc.com': 'spectrum',\n'scranton.edu': 'other', 'optonline.net': 'other', 'hotmail.co.uk': 'microsoft', 'comcast.net': 'other', 'yahoo.com.mx': 'yahoo', 'yahoo.fr'\n: 'yahoo', 'yahoo.es': 'yahoo', 'charter.net': 'spectrum', 'live.com':\n'microsoft', 'aim.com': 'aol', 'hotmail.de': 'microsoft', 'centurylink.net': 'centurylink', \n'gmail.com': 'google', 'me.com': 'apple', 'earthlink.net': 'other', 'gmx.de': 'other', \n'web.de': 'other', 'cfl.rr.com': 'other', 'hotmail.com': 'microsoft', 'protonmail.com': 'other', \n'hotmail.fr': 'microsoft', 'windstream.net': 'other', 'outlook.es': 'microsoft', \n'yahoo.co.jp': 'yahoo', 'yahoo.de': 'yahoo', 'servicios-ta.com': 'other', 'netzero.net': 'other', \n'suddenlink.net': 'other', 'roadrunner.com': 'other', 'sc.rr.com': 'other', 'live.fr': 'microsoft', \n'verizon.net': 'yahoo', 'msn.com': 'microsoft', 'q.com': 'centurylink',\n'prodigy.net.mx': 'att', 'frontier.com': 'yahoo', 'anonymous.com': 'other', 'rocketmail.com': 'yahoo', \n'sbcglobal.net': 'att', 'frontiernet.net': 'yahoo', 'ymail.com': 'yahoo', 'outlook.com': 'microsoft', \n'mail.com': 'other', 'bellsouth.net': 'other', 'embarqmail.com': 'centurylink', \n'cableone.net': 'other', 'hotmail.es': 'microsoft', 'mac.com':\n'apple', 'yahoo.co.uk': 'yahoo', 'netzero.com': 'other', 'yahoo.com':\n'yahoo', 'live.com.mx': 'microsoft', 'ptd.net': 'other', 'cox.net': 'other', 'aol.com': 'aol', \n'juno.com': 'other', 'icloud.com': 'apple'}\nus_emails = ['gmail', 'net', 'edu']\nfor c in ['P_emaildomain', 'R_emaildomain']:\n    train[c + '_bin'] = train[c].map(emails)\n    test[c + '_bin'] = test[c].map(emails)\n    train[c + '_suffix'] = train[c].map(lambda x: str(x).split('.')[-1])\n    test[c + '_suffix'] = test[c].map(lambda x: str(x).split('.')[-1])\n    train[c + '_suffix'] = train[c + '_suffix'].map(lambda x: x if str(x) not in us_emails else 'us')\n    test[c + '_suffix'] = test[c + '_suffix'].map(lambda x: x if str(x) not in us_emails else 'us')","f09aca8b":"# b\u1ecf \u0111i \"first\" \ntrain.drop(['first'],axis=1,inplace=True)","1f934e50":"plt.figure(figsize=(11,6))\nplt.subplot(1,2,1)\nsns.scatterplot(x=\"TransactionDT\",y=\"C1\",hue=\"isFraud\",data=train,alpha=0.7,hue_order=[0,1])\nplt.title('Train')\nplt.subplot(1,2,2)\nsns.scatterplot(x=\"TransactionDT\",y=\"C1\",data=test[~test['C1'].isnull()])\nplt.title('Test')","63613d75":"train = train[train['C1']<=2000]","0b1d22a5":"# visualize C2\nplt.figure(figsize=(11,6))\nplt.subplot(1,2,1)\nsns.scatterplot(x=\"TransactionDT\",y=\"C2\",hue=\"isFraud\",data=train,alpha=0.7,hue_order=[0,1])\nplt.title('Train')\nplt.subplot(1,2,2)\nsns.scatterplot(x=\"TransactionDT\",y=\"C2\",data=test[~test['C2'].isnull()])\nplt.title('Test')","68742170":"train = train[train['C2']<=2000]","fa36bc6e":"c12des = describe(train,test,'C12')\nc12des","a1f26c97":"# V\u1ebd m\u1ed9t bi\u1ec3u \u0111\u1ed3 ph\u00e2n t\u00e1n l\u1ea5y tr\u1ee5c x l\u00e0m TransactionDT v\u00e0 tr\u1ee5c y l\u00e0 C12.\nplt.figure(figsize=(11,6))\nplt.subplot(1,2,1)\nsns.scatterplot(x=\"TransactionDT\",y=\"C12\",hue=\"isFraud\",data=train,alpha=0.7,hue_order=[0,1])\nplt.title('Train')\nplt.subplot(1,2,2)\nsns.scatterplot(x=\"TransactionDT\",y=\"C12\",data=test[~test['C12'].isnull()])\nplt.title('Test')","4a6a06e3":"cor_c = train[['C1','C2','C3','C4','C5','C6','C7','C8','C9','C10','C11','C12','C13','C14','isFraud']]","1cdfa25b":"f = cor_c.corr()","f30919eb":"plt.figure(1,figsize=(18,18))\nsns.heatmap(f,annot=True)","9b8bda53":"cor_c_test = test[['C1','C2','C3','C4','C5','C6','C7','C8','C9','C10','C11','C12','C13','C14']]","12f8ee98":"f = cor_c_test.corr()","ed1a24f5":"plt.figure(1,figsize=(18,18))\nsns.heatmap(f,annot=True)","7da4ade4":"# visualize D4\nplt.figure(figsize=(11,6))\nplt.subplot(1,2,1)\nsns.scatterplot(x=\"TransactionDT\",y=\"D4\",hue=\"isFraud\",data=train[~train['D4'].isnull()],alpha=0.7,hue_order=[0,1])\nplt.title('Train')\nplt.subplot(1,2,2)\nsns.scatterplot(x=\"TransactionDT\",y=\"D4\",data=test[~test['D4'].isnull()])\nplt.title('Test')","6924742e":"# nhi\u1ec1u gi\u00e1 tr\u1ecb <0 c\u00f3 t\u00ednh ngo\u1ea1i lai -> lo\u1ea1i b\u1ecf\ntrain[train['D4']<0].index","02cdbed6":"train.drop([2947,   4210,   5264,   5501,   6057,   9120, 110695, 268153,\n            444548, 444552, 445576, 446484, 455658, 456223, 473396],inplace=True)","1d8b5b55":"#visualize D11\nplt.figure(figsize=(11,6))\nplt.subplot(1,2,1)\nsns.scatterplot(x=\"TransactionDT\",y=\"D11\",hue=\"isFraud\",data=train[~train['D11'].isnull()],alpha=0.7,hue_order=[0,1])\nplt.title('Train')\nplt.subplot(1,2,2)\nsns.scatterplot(x=\"TransactionDT\",y=\"D11\",data=test[~test['D11'].isnull()])\nplt.title('Test')","270b4b82":"# nh\u1eadn th\u1ea5y c\u00e1c gi\u00e1 tr\u1ecb <0 d\u1ecb th\u01b0\u1eddng -> lo\u1ea1i b\u1ecf\ntrain[train['D11']<0].index","da664a8e":"train.drop([3814, 4932, 358337, 359698, 442488],inplace=True)","cd1f0e0d":"plt.figure(figsize=(11,6))\nplt.subplot(1,2,1)\nsns.scatterplot(x=\"TransactionDT\",y=\"D12\",hue=\"isFraud\",data=train[~train['D12'].isnull()],alpha=0.7,hue_order=[0,1])\nplt.title('Train')\nplt.subplot(1,2,2)\nsns.scatterplot(x=\"TransactionDT\",y=\"D12\",data=test[~test['D12'].isnull()])\nplt.title('Test')","a0b24001":"plt.figure(figsize=(11,6))\nplt.subplot(1,2,1)\nsns.scatterplot(x=\"TransactionDT\",y=\"D14\",hue=\"isFraud\",data=train[~train['D14'].isnull()],alpha=0.7,hue_order=[0,1])\nplt.title('Train')\nplt.subplot(1,2,2)\nsns.scatterplot(x=\"TransactionDT\",y=\"D14\",data=test[~test['D14'].isnull()])\nplt.title('Test')","070ec7a7":"# nh\u1eadn th\u1ea5y c\u00e1c gi\u00e1 tr\u1ecb <0 d\u1ecb th\u01b0\u1eddng -> lo\u1ea1i b\u1ecf\ntrain[train['D14']<0].index","cb60fb91":"train.drop([4085,4097],inplace=True)","5db7527b":"plt.figure(figsize=(11,6))\nplt.subplot(1,2,1)\nsns.scatterplot(x=\"TransactionDT\",y=\"D15\",hue=\"isFraud\",data=train[~train['D15'].isnull()],alpha=0.7,hue_order=[0,1])\nplt.title('Train')\nplt.subplot(1,2,2)\nsns.scatterplot(x=\"TransactionDT\",y=\"D15\",data=test[~test['D15'].isnull()])\nplt.title('Test')","61db8314":"# nh\u1eadn th\u1ea5y c\u00e1c gi\u00e1 tr\u1ecb <0 d\u1ecb th\u01b0\u1eddng -> lo\u1ea1i b\u1ecf\ntrain[train['D15']<0].index","ee85a87e":"train.drop([3034, 7589, 13149, 442444, 442467],inplace=True)","ee544f64":"for i in ['M1','M2','M3','M4','M5','M6','M7','M8','M9']:\n    print(train[(~train[i].isnull())&(train['isFraud']==0)][i].value_counts())\n    print(train[(~train[i].isnull())&(train['isFraud']==1)][i].value_counts())\n    print('----------------------------------------------------------------------')","d62271b6":"plt.figure(figsize=(18,18))\nplt.subplot(3,3,1)\ntrain_m1 = (train.groupby(['isFraud'])['M1']\n                     .value_counts(normalize=True)\n                     .rename('percentage')\n                     .mul(100)\n                     .reset_index()\n                     .sort_values('M1'))\nsns.barplot(x=\"M1\", y=\"percentage\", hue=\"isFraud\", data=train_m1)\nplt.title('TrainM1')\nplt.subplot(3,3,2)\ntrain_m2 = (train.groupby(['isFraud'])['M2']\n                     .value_counts(normalize=True)\n                     .rename('percentage')\n                     .mul(100)\n                     .reset_index()\n                     .sort_values('M2'))\nsns.barplot(x=\"M2\", y=\"percentage\", hue=\"isFraud\", data=train_m2)\nplt.title('TrainM2')\nplt.subplot(3,3,3)\ntrain_m3 = (train.groupby(['isFraud'])['M3']\n                     .value_counts(normalize=True)\n                     .rename('percentage')\n                     .mul(100)\n                     .reset_index()\n                     .sort_values('M3'))\nsns.barplot(x=\"M3\", y=\"percentage\", hue=\"isFraud\", data=train_m3)\nplt.title('TrainM3')\nplt.subplot(3,3,4)\ntrain_m4 = (train.groupby(['isFraud'])['M4']\n                     .value_counts(normalize=True)\n                     .rename('percentage')\n                     .mul(100)\n                     .reset_index()\n                     .sort_values('M4'))\nsns.barplot(x=\"M4\", y=\"percentage\", hue=\"isFraud\", data=train_m4)\nplt.title('TrainM4')\nplt.subplot(3,3,5)\ntrain_m5 = (train.groupby(['isFraud'])['M5']\n                     .value_counts(normalize=True)\n                     .rename('percentage')\n                     .mul(100)\n                     .reset_index()\n                     .sort_values('M5'))\nsns.barplot(x=\"M5\", y=\"percentage\", hue=\"isFraud\", data=train_m5)\nplt.title('TrainM5')\nplt.subplot(3,3,6)\ntrain_m6 = (train.groupby(['isFraud'])['M6']\n                     .value_counts(normalize=True)\n                     .rename('percentage')\n                     .mul(100)\n                     .reset_index()\n                     .sort_values('M6'))\nsns.barplot(x=\"M6\", y=\"percentage\", hue=\"isFraud\", data=train_m6)\nplt.title('TrainM6')\nplt.subplot(3,3,7)\ntrain_m7 = (train.groupby(['isFraud'])['M7']\n                     .value_counts(normalize=True)\n                     .rename('percentage')\n                     .mul(100)\n                     .reset_index()\n                     .sort_values('M7'))\nsns.barplot(x=\"M7\", y=\"percentage\", hue=\"isFraud\", data=train_m7)\nplt.title('TrainM7')\nplt.subplot(3,3,8)\ntrain_m8 = (train.groupby(['isFraud'])['M8']\n                     .value_counts(normalize=True)\n                     .rename('percentage')\n                     .mul(100)\n                     .reset_index()\n                     .sort_values('M8'))\nsns.barplot(x=\"M8\", y=\"percentage\", hue=\"isFraud\", data=train_m8)\nplt.title('TrainM8')\nplt.subplot(3,3,9)\ntrain_m9 = (train.groupby(['isFraud'])['M9']\n                     .value_counts(normalize=True)\n                     .rename('percentage')\n                     .mul(100)\n                     .reset_index()\n                     .sort_values('M9'))\nsns.barplot(x=\"M9\", y=\"percentage\", hue=\"isFraud\", data=train_m9)\nplt.title('TrainM9')","845645ea":"train['DeviceInfo'].value_counts()[:10]","648baa4e":"def transform_DeviceInfo(df):\n    df['DeviceCorp'] = df['DeviceInfo']\n    df.loc[df['DeviceInfo'].str.contains('HUAWEI|HONOR', case=False, na=False, regex=True), 'DeviceCorp'] = 'HUAWEI'\n    df.loc[df['DeviceInfo'].str.contains('OS', na=False, regex=False), 'DeviceCorp'] = 'APPLE'\n    df.loc[df['DeviceInfo'].str.contains('Idea|TA', case=False, na=False), 'DeviceCorp'] = 'Lenovo'\n    df.loc[df['DeviceInfo'].str.contains('Moto|XT|Edison', case=False, na=False), 'DeviceCorp'] = 'Moto'\n    df.loc[df['DeviceInfo'].str.contains('MI|Mi|Redmi', na=False), 'DeviceCorp'] = 'Mi'\n    df.loc[df['DeviceInfo'].str.contains('VS|LG|EGO', na=False), 'DeviceCorp'] = 'LG'\n    df.loc[df['DeviceInfo'].str.contains('ONE TOUCH|ALCATEL', case=False, na=False, regex=False), 'DeviceCorp'] = 'ALCATEL'\n    df.loc[df['DeviceInfo'].str.contains('ONE A', na=False, regex=False), 'DeviceCorp'] = 'ONEPLUS'\n    df.loc[df['DeviceInfo'].str.contains('OPR6', na=False, regex=False), 'DeviceCorp'] = 'HTC'\n    df.loc[df['DeviceInfo'].str.contains('Nexus|Pixel', case=False, na=False, regex=True), 'DeviceCorp'] = 'google'\n    df.loc[df['DeviceInfo'].str.contains('STV', na=False, regex=False), 'DeviceCorp'] = 'blackberry'\n    df.loc[df['DeviceInfo'].str.contains('ASUS', case=False, na=False, regex=False), 'DeviceCorp'] = 'ASUS'\n    df.loc[df['DeviceInfo'].str.contains('BLADE', case=False, na=False, regex=False), 'DeviceCorp'] = 'ZTE'\n    \n    df['DeviceCorp'] = df['DeviceInfo'].astype('str').str.split(':', expand=True)[0].\\\n                                str.split('-', expand=True)[0].str.split(expand=True)[0]\n    \n    df.loc[df['DeviceInfo'].isin(['rv', 'SM', 'GT', 'SGH']), 'DeviceCorp'] = 'SAMSUNG'\n    df.loc[df['DeviceInfo'].str.startswith('Z', na=False), 'DeviceCorp'] = 'ZTE'\n    df.loc[df['DeviceInfo'].str.startswith('KF', na=False), 'DeviceCorp'] = 'Amazon'\n    \n    for i in ['D', 'E', 'F', 'G']:\n        df.loc[df['DeviceInfo'].str.startswith(i, na=False), 'DeviceCorp'] = 'SONY'\n\n    df.loc[df['DeviceCorp'].isin(df['DeviceCorp'].value_counts()\\\n                                 [df['DeviceCorp'].value_counts() < 100].index), 'DeviceCorp'] = 'Other'\n    df['DeviceCorp'] = df['DeviceCorp'].str.upper()\n    \n    return df","6f4bfefa":"train = transform_DeviceInfo(train)","68b35d7c":"test = transform_DeviceInfo(test)","6ed361cf":"def settingNaN(value):\n    if value=='NAN':\n        return np.nan\n    else:\n        return value","5c2cd635":"train['DeviceCorp'] = train['DeviceCorp'].apply(settingNaN)\ntest['DeviceCorp'] = test['DeviceCorp'].apply(settingNaN)","4e8f3dd1":"plt.figure(figsize=(11,6))\nplt.subplot(1,2,1)\nDeviceTypetrain = (train.groupby(['isFraud'])['DeviceType']\n                     .value_counts(normalize=True)\n                     .rename('percentage')\n                     .mul(100)\n                     .reset_index()\n                     .sort_values('DeviceType'))\nsns.barplot(x=\"DeviceType\", y=\"percentage\", hue=\"isFraud\", data=DeviceTypetrain)\nplt.title('TrainDeviceType')\nplt.subplot(1,2,2)\nDeviceTypeTest =test[~test['DeviceType'].isnull()]['DeviceType'].value_counts(normalize=True).mul(100).rename('percentage')\\\n.reset_index()\nsns.barplot(x=\"index\", y=\"percentage\", data=DeviceTypeTest)\nplt.title('TestDeviceType')","5e3fad0a":"train['id_31'].value_counts()[:10]","6a463e3a":"def id31_split(dataframe):\n    dataframe['browser_id_31'] = dataframe['id_31'].str.split(' ', expand=True)[0]\n    dataframe['version_id_31'] = dataframe['id_31'].str.split(' ', expand=True)[1]","1e5d8059":"id31_split(train)","8ff39f3c":"def id31_split_test(dataframe):\n    dataframe['browser_id_31'] = dataframe['id-31'].str.split(' ', expand=True)[0]\n    dataframe['version_id_31'] = dataframe['id-31'].str.split(' ', expand=True)[1]","865a1864":"id31_split_test(test)","cdced8a6":"train['id_30'].value_counts()[:10]","3b88246b":"test['id-30'].value_counts()[:10]","7e2e0d9e":"def id30_split(dataframe):\n    dataframe['OS_id_30'] = dataframe['id_30'].str.split(' ', expand=True)[0]\n    dataframe['version_id_30'] = dataframe['id_30'].str.split(' ', expand=True)[1]","d9e4ecc1":"id30_split(train)","48992feb":"test['OS_id_30'] = test['id-30'].str.split(' ', expand=True)[0]\ntest['version_id_30'] = test['id-30'].str.split(' ', expand=True)[1]","37e32559":"train['id_33'].value_counts()[:10]","80c0d158":"test['id-33'].value_counts()[:10]","30fd024f":"def id33_split(dataframe):\n    dataframe['screen_width'] = dataframe['id_33'].str.split('x', expand=True)[0]\n    dataframe['screen_height'] = dataframe['id_33'].str.split('x', expand=True)[1]","c9bb8c84":"id33_split(train)","3a09f046":"test['screen_width'] = test['id-33'].str.split('x', expand=True)[0]\ntest['screen_height'] = test['id-33'].str.split('x', expand=True)[1]","24773f2c":"def afterDecimalCount(amt):\n    amtString = str(amt)\n    return len(amtString.split(\".\")[1])","178a7ae3":"train['TransDecimalCount'] = train['TransactionAmt'].apply(afterDecimalCount)\ntest['TransDecimalCount'] = test['TransactionAmt'].apply(afterDecimalCount)","0498bb2c":"train.groupby(\"isFraud\").mean()['TransDecimalCount']","eacce24e":"train['card1_count_full'] = train['card1'].map(pd.concat([train['card1'], test['card1']], ignore_index=True).value_counts(dropna=False))\ntest['card1_count_full'] = test['card1'].map(pd.concat([train['card1'], test['card1']], ignore_index=True).value_counts(dropna=False))\ntrain['card2_count_full'] = train['card2'].map(pd.concat([train['card2'], test['card2']], ignore_index=True).value_counts(dropna=False))\ntest['card2_count_full'] = test['card2'].map(pd.concat([train['card2'], test['card2']], ignore_index=True).value_counts(dropna=False))\ntrain['card3_count_full'] = train['card3'].map(pd.concat([train['card3'], test['card3']], ignore_index=True).value_counts(dropna=False))\ntest['card3_count_full'] = test['card3'].map(pd.concat([train['card3'], test['card3']], ignore_index=True).value_counts(dropna=False))\ntrain['card4_count_full'] = train['card4'].map(pd.concat([train['card4'], test['card4']], ignore_index=True).value_counts(dropna=False))\ntest['card4_count_full'] = test['card4'].map(pd.concat([train['card4'], test['card4']], ignore_index=True).value_counts(dropna=False))\ntrain['card5_count_full'] = train['card5'].map(pd.concat([train['card5'], test['card5']], ignore_index=True).value_counts(dropna=False))\ntest['card5_count_full'] = test['card5'].map(pd.concat([train['card5'], test['card5']], ignore_index=True).value_counts(dropna=False))\ntrain['card6_count_full'] = train['card6'].map(pd.concat([train['card6'], test['card6']], ignore_index=True).value_counts(dropna=False))\ntest['card6_count_full'] = test['card6'].map(pd.concat([train['card6'], test['card6']], ignore_index=True).value_counts(dropna=False))\ntrain['addr1_count_full'] = train['addr1'].map(pd.concat([train['addr1'], test['addr1']], ignore_index=True).value_counts(dropna=False))\ntest['addr1_count_full'] = test['addr1'].map(pd.concat([train['addr1'], test['addr1']], ignore_index=True).value_counts(dropna=False))\ntrain['addr2_count_full'] = train['addr2'].map(pd.concat([train['addr2'], test['addr2']], ignore_index=True).value_counts(dropna=False))\ntest['addr2_count_full'] = test['addr2'].map(pd.concat([train['addr2'], test['addr2']], ignore_index=True).value_counts(dropna=False))\ntrain['TransactionAmt_to_mean_card1'] = train['TransactionAmt'] \/ train.groupby(['card1'])['TransactionAmt'].transform('mean')\ntrain['TransactionAmt_to_mean_card4'] = train['TransactionAmt'] \/ train.groupby(['card4'])['TransactionAmt'].transform('mean')\ntrain['TransactionAmt_to_std_card1'] = train['TransactionAmt'] \/ train.groupby(['card1'])['TransactionAmt'].transform('std')\ntrain['TransactionAmt_to_std_card4'] = train['TransactionAmt'] \/ train.groupby(['card4'])['TransactionAmt'].transform('std')\ntest['TransactionAmt_to_mean_card1'] = test['TransactionAmt'] \/ test.groupby(['card1'])['TransactionAmt'].transform('mean')\ntest['TransactionAmt_to_mean_card4'] = test['TransactionAmt'] \/ test.groupby(['card4'])['TransactionAmt'].transform('mean')\ntest['TransactionAmt_to_std_card1'] = test['TransactionAmt'] \/ test.groupby(['card1'])['TransactionAmt'].transform('std')\ntest['TransactionAmt_to_std_card4'] = test['TransactionAmt'] \/ test.groupby(['card4'])['TransactionAmt'].transform('std')\ntrain['id_02_to_mean_card1'] = train['id_02'] \/ train.groupby(['card1'])['id_02'].transform('mean')\ntrain['id_02_to_mean_card4'] = train['id_02'] \/ train.groupby(['card4'])['id_02'].transform('mean')\ntrain['id_02_to_std_card1'] = train['id_02'] \/ train.groupby(['card1'])['id_02'].transform('std')\ntrain['id_02_to_std_card4'] = train['id_02'] \/ train.groupby(['card4'])['id_02'].transform('std')\ntest['id_02_to_mean_card1'] = test['id-02'] \/ test.groupby(['card1'])['id-02'].transform('mean')\ntest['id_02_to_mean_card4'] = test['id-02'] \/ test.groupby(['card4'])['id-02'].transform('mean')\ntest['id_02_to_std_card1'] = test['id-02'] \/ test.groupby(['card1'])['id-02'].transform('std')\ntest['id_02_to_std_card4'] = test['id-02'] \/ test.groupby(['card4'])['id-02'].transform('std')\ntrain['D15_to_mean_card1'] = train['D15'] \/ train.groupby(['card1'])['D15'].transform('mean')\ntrain['D15_to_mean_card4'] = train['D15'] \/ train.groupby(['card4'])['D15'].transform('mean')\ntrain['D15_to_std_card1'] = train['D15'] \/ train.groupby(['card1'])['D15'].transform('std')\ntrain['D15_to_std_card4'] = train['D15'] \/ train.groupby(['card4'])['D15'].transform('std')\ntest['D15_to_mean_card1'] = test['D15'] \/ test.groupby(['card1'])['D15'].transform('mean')\ntest['D15_to_mean_card4'] = test['D15'] \/ test.groupby(['card4'])['D15'].transform('mean')\ntest['D15_to_std_card1'] = test['D15'] \/ test.groupby(['card1'])['D15'].transform('std')\ntest['D15_to_std_card4'] = test['D15'] \/ test.groupby(['card4'])['D15'].transform('std')\ntrain['D15_to_mean_addr1'] = train['D15'] \/ train.groupby(['addr1'])['D15'].transform('mean')\ntrain['D15_to_mean_card4'] = train['D15'] \/ train.groupby(['card4'])['D15'].transform('mean')\ntrain['D15_to_std_addr1'] = train['D15'] \/ train.groupby(['addr1'])['D15'].transform('std')\ntrain['D15_to_std_card4'] = train['D15'] \/ train.groupby(['card4'])['D15'].transform('std')\n\ntest['D15_to_mean_addr1'] = test['D15'] \/ test.groupby(['addr1'])['D15'].transform('mean')\ntest['D15_to_mean_card4'] = test['D15'] \/ test.groupby(['card4'])['D15'].transform('mean')\ntest['D15_to_std_addr1'] = test['D15'] \/ test.groupby(['addr1'])['D15'].transform('std')\n\ntest['D15_to_std_card4'] = test['D15'] \/ test.groupby(['card4'])['D15'].transform('std')","6c096923":"vfeatures = []\nfor i in train.columns:\n    if 'V' in i:\n        vfeatures.append(i)","052bb45a":"vfeatures.remove('card3Values')\nvfeatures.append('isFraud')","8c77eb3c":"v_train = train[:412785]\nv_cv = train[412785:]","449a5498":"v_train = v_train[vfeatures]\nv_cv = v_cv[vfeatures]","ad50cc8b":"v_train_x  = v_train.drop(['isFraud'],axis=1)\nv_train_y = v_train['isFraud']\nv_cv_x = v_cv.drop(['isFraud'],axis=1)\nv_cv_y = v_cv['isFraud']","66a65bf8":"v_train_x.fillna(v_train_x.mean(),inplace=True)\nv_cv_x.fillna(v_cv_x.mean(),inplace=True)","161eecb0":"rf = LGBMClassifier()\nrf.fit(v_train_x,v_train_y)\npredict_y_=rf.predict_proba(v_train_x)\npredict_y = rf.predict_proba(v_cv_x)\nprint('train auc:',roc_auc_score(v_train_y,predict_y_[:,1]))\nprint('cv auc:',roc_auc_score(v_cv_y,predict_y[:,1]))","47240139":"g = rf.feature_importances_\nj=1\nvremove=[]\nfor i in g:\n    if i<2:\n        vremove.append('V'+str(j))\n    j+=1\nlen(vremove)","b33b7960":"for i in vremove:\n    vfeatures.remove(i)\n    print('removed:',i)","5c730b47":"v_train = v_train[vfeatures]\nv_cv = v_cv[vfeatures]","161b16de":"v_train_x  = v_train.drop(['isFraud'],axis=1)\nv_train_y = v_train['isFraud']\nv_cv_x = v_cv.drop(['isFraud'],axis=1)\nv_cv_y = v_cv['isFraud']","001cb642":"v_train_x.fillna(v_train_x.mean(),inplace=True)\nv_cv_x.fillna(v_cv_x.mean(),inplace=True)","ceb466f2":"rf = LGBMClassifier()\nrf.fit(v_train_x,v_train_y)\npredict_y_=rf.predict_proba(v_train_x)\npredict_y = rf.predict_proba(v_cv_x)\nprint('train auc:',roc_auc_score(v_train_y,predict_y_[:,1]))\nprint('cv auc:',roc_auc_score(v_cv_y,predict_y[:,1]))","ecffe160":"# train.to_csv('new_train_01.csv',index = False)","ad03fed9":"# test.to_csv('new_test_01.csv',index = False)","e0687fa3":"**Lo\u1ea1i b\u1ecf feature d\u1ef1a v\u00e0o \u0111\u1ed9 quan tr\u1ecdng (importance):**","c5af45ee":"- **Kh\u00f4ng c\u00f3 s\u1ef1 kh\u00e1c bi\u1ec7t c\u00e1c gi\u00e1 tr\u1ecb** trong ph\u00e2n v\u1ecb 99,99.\n\n-> Trong t\u1eadp train, thu\u1ed9c t\u00ednh TrainsactionAmt **c\u00f3 v\u1ea5n \u0111\u1ec1 x\u1ea5u**.","55cf05b9":"Ta c\u00f3 th\u1ec3 th\u1ea5y r\u1eb1ng m\u1ed9t s\u1ed1 feature \u0111\u01b0\u1ee3c k\u1ebft h\u1ee3p ch\u1eb7t ch\u1ebd v\u1edbi nhau: 'C1' v\u00e0 'C2', 'C1' v\u00e0 'C6', 'C1' v\u00e0 'C14', 'C6' v\u00e0 'C14', v.v.\n\n-> **vi\u1ec7c lo\u1ea1i b\u1ecf c\u00e1c feature t\u01b0\u01a1ng quan cao n\u00e0y s\u1ebd c\u1ea3i thi\u1ec7n acc ho\u1eb7c gi\u1ea3m acc**.","9d37f293":"- B\u00e0i to\u00e1n ph\u00e2n lo\u1ea1i nh\u1ecb ph\u00e2n (2 l\u1edbp): giao d\u1ecbch gian l\u1eadn \u0111\u01b0\u1ee3c k\u00fd hi\u1ec7u b\u1eb1ng 1, giao d\u1ecbch h\u1ee3p ph\u00e1p \u0111\u01b0\u1ee3c k\u00fd hi\u1ec7u b\u1eb1ng 0. \n- \u0110\u01b0\u1ee3c \u0111\u00e1nh gi\u00e1 tr\u00ean **Area under the ROC curve** gi\u1eefa x\u00e1c su\u1ea5t d\u1ef1 \u0111o\u00e1n v\u00e0 m\u1ee5c ti\u00eau.","aa571251":"**Nh\u1eadn x\u00e9t:**\n\nV\u00ec D ch\u1ec9 timedelta -> kh\u00f4ng th\u1ec3 ch\u1ee9a \"-ve\" -> lo\u1ea1i b\u1ecf.","5e617f9a":"Tr\u00ean \u0111\u00e2y l\u00e0 \u0111\u1ed3 th\u1ecb v\u1ec1 s\u1ef1 ph\u00e2n b\u1ed1 d\u1eef li\u1ec7u c\u1ee7a 2 nh\u00e3n 0 & 1 (isFraud).  \n\n-> D\u1ec5 d\u00e0ng nh\u1eadn th\u1ea5y s\u1ef1 **m\u1ea5t c\u00e2n b\u1eb1ng d\u1eef li\u1ec7u** - m\u1ed9t v\u1ea5n \u0111\u1ec1 ph\u1ee9c t\u1ea1p cho b\u00e0i to\u00e1n ph\u00e2n lo\u1ea1i.","168477a5":"D\u1eef li\u1ec7u \u0111\u01b0\u1ee3c chia th\u00e0nh hai t\u1ec7p nh\u1eadn d\u1ea1ng v\u00e0 giao d\u1ecbch, \u0111\u01b0\u1ee3c k\u1ebft h\u1ee3p v\u1edbi m\u1ed7i t\u1ec7p b\u1eb1ng **TransactionID** \u0111\u1ec3 *train* v\u00e0 *test* (c\u00f3 4 t\u1ec7p nh\u01b0 input v\u00e0 1 t\u1ec7p sample_submission).\n\u0110i\u1ec1u quan tr\u1ecdng c\u1ea7n l\u01b0u \u00fd l\u00e0 t\u1ea5t c\u1ea3 c\u00e1c giao d\u1ecbch kh\u00f4ng c\u00f3 th\u00f4ng tin nh\u1eadn d\u1ea1ng t\u01b0\u01a1ng \u1ee9ng.\n- T\u1eadp \u0111\u1ecbnh danh Train ch\u1ee9a 144233 h\u00e0ng v\u00e0 41 t\u00ednh n\u0103ng.\n- T\u1eadp giao d\u1ecbch Train ch\u1ee9a 590540 h\u00e0ng v\u00e0 394 t\u00ednh n\u0103ng.","a6c967a4":"- \u0110\u1ed1i v\u1edbi m\u1ed7i thi\u1ebft b\u1ecb c\u00f3 nhi\u1ec1u model c\u00f3 th\u1ec3 c\u00f3 t\u1eeb model c\u0169 \u0111\u1ebfn model m\u1edbi.\n- C\u00f3 th\u1ec3 nh\u00f3m t\u1ea5t c\u1ea3 c\u00e1c thi\u1ebft b\u1ecb t\u01b0\u01a1ng t\u1ef1 v\u00e0 t\u1ea1o m\u1ed9t t\u00ednh n\u0103ng kh\u00e1c.","34f6de18":"<h4> Ph\u00e2n t\u00edch feature card4 <\/h4>","1b5d6e8d":"**Nh\u1eadn x\u00e9t:**\n\nT\u1eeb bi\u1ec3u \u0111\u1ed3, c\u00f3 th\u1ec3 nh\u1eadn th\u1ea5y r\u1eb1ng gi\u1edd t\u1eeb 4 \u0111\u1ebfn 9 c\u00f3 t\u1ef7 l\u1ec7 giao d\u1ecbch gian l\u1eadn nhi\u1ec1u h\u01a1n v\u00e0 t\u1eeb 9h \u0111\u1ebfn 18h t\u1ef7 l\u1ec7 giao d\u1ecbch h\u1ee3p ph\u00e1p nhi\u1ec1u h\u01a1n.","50d16c06":"**Feature D11:**","dbbda512":"## 1.1 B\u00e0i to\u00e1n\nB\u00e0i to\u00e1n nh\u1eadn d\u1eef li\u1ec7u \u0111\u1ebfn t\u1eeb c\u00e1c giao d\u1ecbch th\u01b0\u01a1ng m\u1ea1i \u0111i\u1ec7n t\u1eed trong th\u1ef1c t\u1ebf c\u1ee7a Vesta - m\u1ed9t c\u00f4ng ty cung c\u1ea5p d\u1ecbch v\u1ee5 thanh to\u00e1n h\u00e0ng \u0111\u1ea7u v\u00e0 ch\u1ee9a m\u1ed9t lo\u1ea1t c\u00e1c t\u00ednh n\u0103ng t\u1eeb lo\u1ea1i thi\u1ebft b\u1ecb \u0111\u1ebfn t\u00ednh n\u0103ng c\u1ee7a s\u1ea3n ph\u1ea9m.\nNhi\u1ec7m v\u1ee5 c\u1ee7a cu\u1ed9c thi n\u00e0y l\u00e0 x\u00e2y d\u1ef1ng c\u00e1c m\u00f4 h\u00ecnh h\u1ecdc m\u00e1y \u0111\u1ec3 d\u1ef1 \u0111o\u00e1n x\u00e1c su\u1ea5t \u0111\u1ec3 m\u1ed9t giao d\u1ecbch tr\u1ef1c tuy\u1ebfn l\u00e0 gian l\u1eadn (isFraud).","0a7d2ed7":"- Id_30 represents the os  and its version. ","d4cbc24f":"**Feature C12**","08898455":"## 2.1 V\u1ec1 d\u1eef li\u1ec7u","aad04b79":"**Nh\u1eadn x\u00e9t:**\n\n\u0110\u1ed1i v\u1edbi D12, c\u00e1c t\u00ednh n\u0103ng h\u1ee3p ph\u00e1p v\u00e0 giao d\u1ecbch gian l\u1eadn ho\u00e0n to\u00e0n b\u1ecb **overlapped**.","6c863c35":"C\u1ea3 d\u1eef li\u1ec7u train v\u00e0 test \u0111\u1ec1u c\u00f3 gi\u00e1 tr\u1ecb ngo\u1ea1i l\u1ec7.\n\n-> Lo\u1ea1i b\u1ecf gi\u00e1 tr\u1ecb tr\u00ean 2000 trong C2.","4a61270f":"**Feature D14:**","16abf0c6":"T\u1ea1o m\u1ed9t h\u00e0m 'describe' \u0111\u1ec3 thu\u1eadn ti\u1ec7n vi\u1ec7c m\u00f4 t\u1ea3 c\u00e1c t\u00ednh ch\u1ea5t c\u1ee7a m\u1ed7i feature:","01e12338":"**Nh\u1eadn x\u00e9t:**\nNhi\u1ec1u feature ch\u1ee9 l\u01b0\u1ee3ng l\u1edbn gi\u00e1 tr\u1ecb null\n\n-> c\u1ea7n th\u1ef1c hi\u1ec7n lo\u1ea1i b\u1ecf c\u00e1c gi\u00e1 tr\u1ecb b\u1eb1ng c\u00e1c ph\u01b0\u01a1ng ph\u00e1p thay th\u1ebf (\u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n \u1edf d\u01b0\u1edbi \u0111\u00e2y).","eb971dbd":"**Feature D4**","3ec4ab6e":"- T\u1ea1o ra 2 feature: t\u00ean mail v\u00e0 extension t\u01b0\u01a1ng \u1ee9ng.\n- K\u1ebft h\u1ee3p c\u00e1c mail t\u01b0\u01a1ng \u0111\u1ed3ng (c\u00f9ng t\u00ean mi\u1ec1n) l\u1ea1i.","a84d82ad":"\u1ede \u0111\u00e2y ta s\u1eed d\u1ee5ng ph\u01b0\u01a1ng ph\u00e1p **np.percentile** trong numpy (quan s\u00e1t th\u1ea5y r\u1eb1ng 99,99 gi\u00e1 tr\u1ecb ph\u00e2n v\u1ecb cho c\u1ea3 train v\u00e0 test \u0111\u1ec1u n\u1eb1m trong ph\u1ea1m vi 6K). \n\n-> T\u1ea5t c\u1ea3 c\u00e1c h\u00e0ng c\u00f3 gi\u00e1 tr\u1ecb TransactionAmt l\u1edbn h\u01a1n 6K s\u1ebd b\u1ecb x\u00f3a tr\u00ean t\u1eadp train \u0111\u1ec3 hu\u1ea5n luy\u1ec7n b\u1edbt nhi\u1ec5u h\u01a1n. \n\nFeature n\u00e0y c\u00f3 **ph\u00e2n ph\u1ed1i l\u1ec7ch** -> c\u1ea7n t\u1ea1o ra m\u1ed9t t\u00ednh n\u0103ng kh\u00e1c c\u00f3 t\u00ean l\u00e0 **LogTransactionAmt** - mang t\u00ednh gi\u1ed1ng nh\u01b0 ph\u00e2n ph\u1ed1i b\u00ecnh th\u01b0\u1eddng b\u00e2y gi\u1edd.","2305279d":" ## 1.2 M\u1ee5c ti\u00eau\nX\u00e1c \u0111\u1ecbnh m\u1ee5c ti\u00eau nghi\u1ec7p v\u1ee5 ch\u00ednh c\u1ee7a vi\u1ec7c t\u00ecm ki\u1ebfm c\u00e1c giao d\u1ecbch gian l\u1eadn:\n* D\u1ef1 \u0111o\u00e1n x\u00e1c su\u1ea5t giao d\u1ecbch gian l\u1eadn\n* Kh\u00f4ng n\u00ean d\u1ef1 \u0111o\u00e1n c\u00e1c giao d\u1ecbch gian l\u1eadn l\u00e0 kh\u00f4ng gian l\u1eadn v\u00e0 ng\u01b0\u1ee3c l\u1ea1i. V\u00ec v\u1eady, c\u1ea7n ch\u00fa \u00fd c\u1ea3 precision v\u00e0 recall.\n* X\u00e2y d\u1ef1ng c\u00e1c m\u00f4 h\u00ecnh d\u1ef1 \u0111o\u00e1n \u0111\u1ec3 gi\u1ea3i quy\u1ebft b\u00e0i to\u00e1n ph\u00e2n lo\u1ea1i nh\u1ecb ph\u00e2n -> gi\u1ea3m thi\u1ec3u c\u1ea3 *false negatives (FN)* v\u00e0 *false positives (FP)*.\n* Ch\u00fa \u00fd c\u00e1c giao d\u1ecbch l\u1edbn, v\u00ec ch\u00fang c\u00f3 th\u1ec3 g\u00e2y ra t\u1ed5n th\u1ea5t l\u1edbn h\u01a1n n\u1ebfu sai s\u00f3t. \u0110\u1eb7t ng\u01b0\u1ee1ng x\u00e1c su\u1ea5t th\u1ea5p h\u01a1n -> ch\u1eb7t ch\u1ebd h\u01a1n \u0111\u1ec3 ph\u00e2n lo\u1ea1i giao d\u1ecbch gian l\u1eadn khi li\u00ean quan \u0111\u1ebfn s\u1ed1 ti\u1ec1n giao d\u1ecbch cao h\u01a1n.\n* Hi\u1ec3u nh\u1eefng y\u1ebfu t\u1ed1\/ \u0111\u1eb7c tr\u01b0ng n\u00e0o mang t\u00ednh d\u1ef1 \u0111o\u00e1n cao h\u01a1n \u0111\u1ec3 ph\u00e1t hi\u1ec7n gian l\u1eadn.","c31fdc3b":"**Nh\u1eadn x\u00e9t:**\n- Nh\u1eadn th\u1ea5y gi\u00e1 tr\u1ecb l\u1edbn h\u01a1n 150, x\u00e1c su\u1ea5t giao d\u1ecbch l\u00e0 gian l\u1eadn s\u1ebd t\u0103ng l\u00ean.\n- Ta s\u1ebd t\u1ea1o m\u1ed9t t\u00ednh n\u0103ng kh\u00e1c nh\u01b0 n\u1ebfu gi\u00e1 tr\u1ecb l\u1edbn h\u01a1n 150 th\u00ec \u0111\u00e1nh d\u1ea5u n\u00f3 l\u00e0 T (c\u00f3 ngh\u0129a l\u00e0 gian l\u1eadn) n\u1ebfu kh\u00f4ng th\u00ec F.","a44c94cd":"# IEEE-CIS Fraud Detection Part 01: T\u00ecm hi\u1ec3u b\u00e0i to\u00e1n + Ph\u00e2n t\u00edch d\u1eef li\u1ec7u + Feature Engineering","077ab5f1":"- addr1 l\u00e0 khu v\u1ef1c thanh to\u00e1n (m\u00e3 zip)\n- addr2 l\u00e0 qu\u1ed1c gia thanh to\u00e1n\n\nC\u1ea3 hai addr \u0111\u1ec1u d\u00e0nh cho ng\u01b0\u1eddi mua","dc76789c":"**C\u00e1c danh m\u1ee5c tr\u00f9ng l\u1eb7p cao, m\u00e1y t\u00ednh \u0111\u1ec3 b\u00e0n v\u00e0 \u0111i\u1ec7n tho\u1ea1i di \u0111\u1ed9ng \u0111\u1ec1u c\u00f3 c\u00f9ng s\u1ed1 l\u01b0\u1ee3ng giao d\u1ecbch h\u1ee3p ph\u00e1p v\u00e0 gian l\u1eadn.**","2a055f7d":"**Nh\u1eadn x\u00e9t bi\u1ec3u \u0111\u1ed3:**\n* Giao d\u1ecbch gian l\u1eadn c\u00f3 gi\u00e1 tr\u1ecb C12 nh\u1ecf ch\u1ee7 y\u1ebfu n\u1eb1m trong kho\u1ea3ng 200. \n\n* C\u1ea3 tr\u00ean train v\u00e0 test \u0111\u1ec1u nh\u1eadn m\u1ed9t s\u1ed1 gi\u00e1 tr\u1ecb c\u1ef1c \u0111oan trong th\u1eddi gian \u0111\u1ea7u ti\u00ean c\u1ee7a train v\u00e0 th\u1eddi gian cu\u1ed1i c\u00f9ng c\u1ee7a test.","64b8b1eb":"Ti\u1ebfp theo, b\u1eaft \u0111\u1ea7u th\u1ef1c hi\u1ec7n ph\u00e2n t\u00edch d\u1eef li\u1ec7u v\u1ec1 c\u00e1c feature \u0111\u01b0\u1ee3c cung c\u1ea5p v\u00e0 t\u00ecm s\u1ef1 t\u01b0\u01a1ng quan d\u1eef li\u1ec7u gi\u1eefa t\u1eadp train v\u00e0 t\u1eadp test.","e31d3e74":"Ti\u1ebfp theo, ph\u00e2n t\u00edch m\u1ed9t s\u1ed1 \u0111\u1eb7c \u0111i\u1ec3m t\u1eeb thu\u1ed9c t\u00ednh n\u00e0y:","7c7ad45e":"**Feature D12:**","f850b1d7":"- Ch\u1ec9 c\u00f3 2 gi\u00e1 tr\u1ecb > 10.000 m\u00e0 c\u00f2n b\u1ecb tr\u00f9ng l\u1eb7p nhi\u1ec1u \n\n-> Lo\u1ea1i b\u1ecf","677ed08d":"# 3. Ph\u00e2n t\u00edch v\u00e0 x\u1eed l\u00fd d\u1eef li\u1ec7u","46e64678":"**Nh\u1eadn x\u00e9t:**\n- H\u1ea7u h\u1ebft c\u00e1c giao d\u1ecbch di\u1ec5n ra th\u00f4ng qua lo\u1ea1i th\u1ebb visa, c\u00f2n th\u1ebb mastercard c\u0169ng t\u1ec9 l\u1ec7 kh\u00e1 cao.\n- Trong c\u00e1c giao d\u1ecbch gian l\u1eadn, vi\u1ec7c s\u1eed d\u1ee5ng th\u1ebb \u0111\u01b0\u1ee3c th\u1ea5y nhi\u1ec1u h\u01a1n so v\u1edbi giao d\u1ecbch h\u1ee3p ph\u00e1p.\n","ec97ccd2":"Ta c\u00f3 th\u1ec3 th\u1ea5y gi\u00e1 tr\u1ecb kho\u1ea3ng 2000 th\u00ec kh\u00f4ng sao nh\u01b0ng l\u00ean tr\u00ean 3000 th\u00ec xu\u1ea5t hi\u1ec7n d\u1ecb th\u01b0\u1eddng.\n\n-> Lo\u1ea1i b\u1ecf t\u1ea5t c\u1ea3 c\u00e1c h\u00e0ng c\u00f3 gi\u00e1 tr\u1ecb> 2000.","65b4b0b8":"**Nh\u1eadn x\u00e9t:**\n* T\u1eeb b\u1ea3ng m\u00f4 t\u1ea3 tr\u00ean, ta nh\u1eadn th\u1ea5y kh\u00f4ng c\u00f3 gi\u00e1 tr\u1ecb null n\u00e0o trong c\u1ea3 t\u1eadp d\u1eef li\u1ec7u train v\u00e0 test. \n* \u0110\u1eb7c \u0111i\u1ec3m \u0111\u00e1ng ch\u00fa \u00fd l\u00e0 c\u00f3 t\u1edbi 75% c\u00e1c gi\u00e1 tr\u1ecb d\u01b0\u1edbi 125 nh\u01b0ng \u0111\u1ed9t nhi\u00ean n\u00f3 t\u0103ng l\u00ean kho\u1ea3ng 32K trong train v\u00e0 10K trong test. -> C\u00f3 th\u1ec3 c\u00f3 m\u1ed9t s\u1ed1 ngo\u1ea1i l\u1ec7 \u1edf \u0111\u00f3.","f315bf16":"D\u00f9ng LGBM \u0111\u1ec3 test (v\u00ec t\u1ed1c \u0111\u1ed9 nhanh):","fe7d52dd":"### \u0110\u1ecdc file v\u00e0 h\u1ee3p nh\u1ea5t tr\u00ean c\u1ea3 *train* v\u00e0 *test* d\u1ef1a v\u00e0o c\u1ed9t *TransactionID*","049d99a1":"**V\u1ea5n \u0111\u1ec1 g\u1eb7p ph\u1ea3i: Gi\u00e1 tr\u1ecb c\u1ef1c \u0111oan (extreme values)**\n* Kh\u00f4ng th\u1ec3 train m\u00f4 h\u00ecnh tree-based sau m\u1ed9t \u0111\u1ed9 s\u00e2u nh\u1ea5t \u0111\u1ecbnh b\u1edfi v\u00ec n\u00f3 s\u1ebd b\u1eaft c\u00e1c gi\u00e1 tr\u1ecb ngo\u1ea1i lai -> overfitting.\n* \u0110\u1ed1i v\u1edbi Logistic regression c\u0169ng b\u1ecb \u1ea3nh h\u01b0\u1edfng l\u1edbn.","d103c923":"#### Ki\u1ec3m tra l\u01b0\u1ee3ng gi\u00e1 tr\u1ecb null tr\u00ean d\u1eef li\u1ec7u\nTa s\u1ebd quan s\u00e1t s\u1ed1 l\u01b0\u1ee3ng gi\u00e1 tr\u1ecb null c\u00f3 trong t\u1ea5t c\u1ea3 c\u00e1c feature v\u00e0 ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a n\u00f3 th\u00f4ng qua h\u00e0m sau:","39941ba8":"**Nh\u1eadn x\u00e9t:**\n- Th\u1ebb ghi n\u1ee3 ho\u1eb7c th\u1ebb t\u00edn d\u1ee5ng v\u00e0 th\u1ebb t\u00ednh ph\u00ed g\u1ea7n nh\u01b0 b\u1eb1ng 0% trong t\u1eadp d\u1eef li\u1ec7u.\n- Cho ph\u00e9p k\u1ebft h\u1ee3p th\u1ebb th\u00e0nh danh m\u1ee5c th\u1ebb m\u1edbi.\n- Ch\u1ee7 th\u1ebb t\u00edn d\u1ee5ng c\u00f3 xu h\u01b0\u1edbng giao d\u1ecbch gian l\u1eadn nhi\u1ec1u h\u01a1n ch\u1ee7 th\u1ebb ghi n\u1ee3.","897df17e":"<h4> Ph\u00e2n t\u00edch feature TransactionAmt <\/h4>\n\n**TransactionAmt** bi\u1ec3u th\u1ecb cho s\u1ed1 ti\u1ec1n thanh to\u00e1n giao d\u1ecbch b\u1eb1ng USD","98a2f626":"<h4> Ph\u00e2n t\u00edch features : addr1,addr2  <\/h4>","c123eab4":"<h4> Ph\u00e2n t\u00edch v\u1ec1 feature TransactionDT tr\u00ean 2 t\u1eadp train v\u00e0 test <\/h4>\n\n**TransactionDT** l\u00e0 m\u1ed9t trong nh\u1eefng t\u00ednh n\u0103ng quan tr\u1ecdng nh\u1ea5t trong t\u1eadp d\u1eef li\u1ec7u, li\u00ean quan \u0111\u1ebfn th\u1eddi gian (t\u00ednh b\u1eb1ng gi\u00e2y\/sec.)","d70b18e1":"**Ti\u1ebfp c\u1eadn v\u1edbi c\u00e1c feature V, lo\u1ea1i b\u1ecf nh\u1eefng d\u1eef li\u1ec7u d\u01b0 th\u1eeba:**","19bb99fc":"- Mail: jp (nh\u1eadt b\u1ea3n), fr (ph\u00e1p), de (\u0111\u1ee9c), uk (Anh), mx (mexico), es (t\u00e2y ban nha)\n\n-> T\u1ea1o th\u00eam 1 feature m\u1edbi t\u1eeb c\u00e1c \u0111\u1eb7c \u0111i\u1ec3m n\u00e0y.","69daa589":"<h4> Ph\u00e2n t\u00edch id_31 features<\/h4>\n\nM\u00f4 t\u1ea3 version c\u1ee7a tr\u00ecnh duy\u1ec7t c\u1ee7a ng\u01b0\u1eddi d\u00f9ng.","87fed1fc":"**Nh\u1eadn x\u00e9t:**\n* C\u00f3 tr\u00f9ng l\u1eb7p nh\u01b0ng logTransactionAmt sau 5 v\u00e0 tr\u01b0\u1edbc 3 c\u00f3 t\u1ea7n su\u1ea5t gian l\u1eadn cao h\u01a1n.\n* logTransactionAmt t\u1eeb 3 \u0111\u1ebfn 5 c\u00f3 c\u01a1 h\u1ed9i cao h\u01a1n l\u00e0 giao d\u1ecbch h\u1ee3p ph\u00e1p","839fc2bd":"**V\u1edbi m\u1ed7i M s\u1ebd t\u1ea1o ra m\u1ed9t bi\u1ec3u \u0111\u1ed3 hi\u1ec3n th\u1ecb t\u1ef7 l\u1ec7 ph\u1ea7n tr\u0103m c\u1ee7a c\u1ea3 giao d\u1ecbch gian l\u1eadn v\u00e0 h\u1ee3p ph\u00e1p cho m\u1ed7i h\u1ea1ng m\u1ee5c.**","e46a4955":"**G\u00e1n c\u00e1c gi\u00e1 tr\u1ecb V v\u1edbi gi\u00e1 tr\u1ecb trung b\u00ecnh:**","005d4f07":"# 2. Nh\u1eadn \u0111\u1ecbnh b\u00e0i to\u00e1n","c94ccf55":"**Nh\u1eadn x\u00e9t:**\nTrong c\u1ea3 7 ng\u00e0y, giao d\u1ecbch h\u1ee3p ph\u00e1p v\u00e0 gian l\u1eadn \u0111\u00e3 x\u1ea3y ra v\u1edbi t\u1ef7 l\u1ec7 (ph\u1ea7n tr\u0103m) g\u1ea7n nh\u01b0 b\u1eb1ng nhau","9d510860":"<h4> Ph\u00e2n t\u00edch V features <\/h4>\n\nL\u01b0\u1ee3ng V_xxx qu\u00e1 nhi\u1ec1u -> kh\u00f3 ph\u00e2n t\u00edch v\u00e0 tr\u1ef1c quan k\u0129, nh\u01b0ng em ch\u1ec9 n\u1eafm \u0111\u01b0\u1ee3c lo\u1ea1i d\u1eef li\u1ec7u l\u00e0 float v\u00e0 nhi\u1ec1u gi\u00e1 tr\u1ecb NaN.","5eef21f5":"# 1. T\u00ecm hi\u1ec3u b\u00e0i to\u00e1n","f806b9a5":"Th\u1ef1c hi\u1ec7n s\u1ed1 t\u01b0\u01a1ng t\u00e1c c\u00e1c features:","d4367837":"### M\u00f4 t\u1ea3\n\n**Data**:  \n- *TransactionID*: Id c\u1ee7a giao d\u1ecbch.\n- *identity* and *transaction*, \u0111\u01b0\u1ee3c join b\u1edfi TransactionID. Kh\u00f4ng ph\u1ea3i t\u1ea5t c\u1ea3 c\u00e1c giao d\u1ecbch \u0111\u1ec1u c\u00f3 *identity information*.\n- *TransactionDT* l\u00e0 m\u1ed9t b\u1ed9 \u0111\u1ebfm th\u1eddi gian t\u1eeb m\u1ed9t ng\u00e0y gi\u1edd tham chi\u1ebfu nh\u1ea5t \u0111\u1ecbnh (kh\u00f4ng ph\u1ea3i l\u00e0 m\u1ed9t d\u1ea5u th\u1eddi gian th\u1ef1c t\u1ebf) - (not an actual timestamp).\n\n**Categorical Features - Transaction**:\n* TransactionAmt : s\u1ed1 ti\u1ec1n thanh to\u00e1n giao d\u1ecbch b\u1eb1ng USD  \n* ProductCD : product CODE \n* card1 - card6: th\u00f4ng tin th\u1ebb thanh to\u00e1n, ch\u1eb3ng h\u1ea1n nh\u01b0 lo\u1ea1i th\u1ebb, lo\u1ea1i th\u1ebb, ng\u00e2n h\u00e0ng ph\u00e1t h\u00e0nh, qu\u1ed1c gia, v.v..\n* addr1, addr2\n* P_emaildomain : mi\u1ec1n email c\u1ee7a ng\u01b0\u1eddi mua v\u00e0 ng\u01b0\u1eddi nh\u1eadn (purchaser and recipient)\n* R_emaildomain\n* M1 - M9\n* C1-C14: \u0111\u1ebfm, ch\u1eb3ng h\u1ea1n nh\u01b0 c\u00f3 bao nhi\u00eau \u0111\u1ecba ch\u1ec9 \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y c\u00f3 li\u00ean quan \u0111\u1ebfn th\u1ebb thanh to\u00e1n, v.v. *The actual meaning is masked*.\n* D1-D15: timedelta - kho\u1ea3ng c\u00e1ch bao nhi\u00eau ng\u00e0y gi\u1eefu c\u00e1c giao d\u1ecbch tr\u01b0\u1edbc, etc.\n* M1-M9: match - v\u00ed d\u1ee5 t\u00ean tr\u00ean card v\u00e0 address, etc.\n* Vxxx: Vesta \u0111\u00e3 thi\u1ebft k\u1ebf c\u00e1c t\u00ednh n\u0103ng phong ph\u00fa bao g\u1ed3m x\u1ebfp h\u1ea1ng, \u0111\u1ebfm v\u00e0 c\u00e1c quan h\u1ec7 th\u1ef1c th\u1ec3 kh\u00e1c.\n\n**Categorical Features - Identity**:\n* DeviceType: Lo\u1ea1i thi\u1ebft b\u1ecb \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho giao d\u1ecbch.\n* DeviceInfo: Th\u00f4ng tin th\u00eam v\u1ec1 thi\u1ebft b\u1ecb \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng.\n* id_1 - id_38: Th\u00f4ng tin k\u1ebft n\u1ed1i m\u1ea1ng, th\u00f4ng tin tr\u00ecnh duy\u1ec7t, v.v. (id 12\u201338 l\u00e0 th\u00f4ng tin ph\u00e2n lo\u1ea1i).\nXem th\u00eam tham kh\u1ea3o t\u1ea1i: https:\/\/www.kaggle.com\/c\/ieee-fraud-detection\/discussion\/101203","4d5a878e":"Ta \u0111\u00e3 t\u1ea1o 2 t\u00ednh n\u0103ng l\u00e0 \u2018P_emaildomain_bin\u2019 v\u00e0 \u2018P_emaildomain_prefix\u2019 :\n* P_emaildomain_bin : t\u00ean c\u00f4ng ty cho email \u0111\u00f3 \n* P_emaildomain_prefix : extension c\u1ee7a email \u0111\u00f3 \n\nT\u01b0\u01a1ng t\u1ef1 l\u00e0 R_emaildomain_perfix v\u00e0 R_emaildomain_bin.","56640986":"**Nh\u1eadn x\u00e9t:**\n- Kho\u1ea3ng th\u1eddi gian tr\u00ean feature c\u1ee7a 2 b\u1ed9 test v\u00e0 train l\u00e0 r\u1eddi r\u1ea1c -> th\u1ef1c hi\u1ec7n ph\u00e2n t\u00e1ch theo c\u1ee5m th\u1eddi gian.\n- M\u1ed9t \u0111i\u1ec1u ch\u00fa \u00fd l\u00e0 ph\u1ea7n \u0111\u1ea7u c\u1ee7a train c\u00f3 th\u1eddi gian giao d\u1ecbch cao, ph\u1ea7n cu\u1ed1i c\u1ee7a test c\u0169ng v\u1eady.","d5fada5a":"**Feature D15:**","0ce629db":"<h4> Ph\u00e2n t\u00edch v\u1ec1 feature ProductCD tr\u00ean train v\u00e0 test <\/h4>","f3752b5e":"## 2.2 X\u00e1c \u0111\u1ecbnh b\u00e0i to\u00e1n h\u1ecdc m\u00e1y","e2f1a104":"### M\u1ee5c ti\u00eau v\u00e0 kh\u00f3 kh\u0103n:\n- M\u1ee5c ti\u00eau: T\u1ed1i \u0111a h\u00f3a *area under the ROC curve* gi\u1eefa x\u00e1c su\u1ea5t d\u1ef1 \u0111o\u00e1n v\u00e0 m\u1ee5c ti\u00eau.\n- M\u00f4 h\u00ecnh ph\u1ea3i \u0111\u01b0a ra \u0111\u1ea7u ra c\u00f3 x\u00e1c su\u1ea5t.\n- Y\u00eau c\u1ea7u v\u1ec1 \u0111\u1ed9 tr\u1ec5 th\u1ea5p\n- Gi\u1ea3m thi\u1ec3u c\u1ea3 *false positive* v\u00e0 *false negative*","f4001169":"- Tr\u00ean test: gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c 'C'  c\u0169ng C\u00f3 t\u01b0\u01a1ng quan cao.","ca350425":"**M1 v\u00e0 M7 kh\u00f4ng c\u00f3 \u0111\u00f3ng g\u00f3p g\u00ec trong vi\u1ec7c ph\u00e1t hi\u1ec7n xem m\u1ed9t giao d\u1ecbch c\u00f3 gian l\u1eadn v\u00e0 h\u1ee3p ph\u00e1p hay kh\u00f4ng.**","574cd9f3":"<h4> Ph\u00e2n t\u00edch id_33 features<\/h4>\n\nM\u00f4 t\u1ea3 \u0111\u1ed9 r\u1ed9ng m\u00e0n h\u00ecnh.","a73355ad":"**Nh\u1eadn x\u00e9t:**\n* Theo \u0111\u1ed3 th\u1ecb, ta th\u1ea5y n\u1ebfu ProductCD l\u00e0 \"C\" th\u00ec c\u00f3 40% kh\u1ea3 n\u0103ng \u0111\u00f3 l\u00e0 gian l\u1eadn.\n* \u0110\u1ed1i v\u1edbi H, R, S kh\u1ea3 n\u0103ng l\u00e0 t\u1ef7 l\u1ec7 gian l\u1eadn cao.","a170b008":"#### Nh\u1eadn x\u00e9t s\u01a1 b\u1ed9 v\u1ec1 d\u1eef li\u1ec7u:\n- C\u1ed9t ***isFraud*** l\u00e0 m\u1ee5c ti\u00eau c\u1ea7n x\u00e1c \u0111\u1ecbnh.\n- ***TransactionDT*** l\u00e0 th\u1eddi gian (Kh\u00f4ng ph\u1ea3i th\u1eddi gian th\u1ef1c t\u1ebf m\u00e0 t\u1eeb m\u1ed9t tham chi\u1ebfu c\u1ee5 th\u1ec3) giao d\u1ecbch x\u1ea3y ra (t\u00ednh b\u1eb1ng sec.) D\u1eef li\u1ec7u tr\u00ean t\u1eadp test l\u1ea1i c\u00f3 gi\u00e1 tr\u1ecb l\u1edbn h\u01a1n nhi\u1ec1u n\u00ean ***kh\u00f4ng overlap***. ","f3345e77":"<h4> Ph\u00e2n t\u00edch m\u1ed9t s\u1ed1 feature C <\/h4>","fade7da4":"<h4> Ph\u00e2n t\u00edch feature card6 <\/h4>\n\n**Card6** cho bi\u1ebft li\u1ec7u giao d\u1ecbch \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n th\u00f4ng qua th\u1ebb t\u00edn d\u1ee5ng hay th\u1ebb ghi n\u1ee3 ho\u1eb7c th\u1ebb t\u00ednh ph\u00ed.","e94c186b":"<h4> Ph\u00e2n t\u00edch m\u1ed9t s\u1ed1 feature D<\/h4>\n\nC\u00e1c t\u00ednh n\u0103ng D li\u00ean quan \u0111\u1ebfn tham chi\u1ebfu th\u1eddi gian.","a2359226":"\u0110\u1ea7u ti\u00ean, ta t\u00e1ch ph\u1ea7n \u0111\u1ea7u ti\u00ean kh\u1ecfi ph\u1ea7n th\u1ee9 hai c\u1ee7a th\u01b0. \n\nT\u1eeb ph\u1ea7n \u0111\u1ea7u ti\u00ean, m\u1ed9t feature m\u1edbi s\u1ebd \u0111\u01b0\u1ee3c t\u1ea1o v\u00e0 t\u1eeb ph\u1ea7n th\u1ee9 hai, m\u1ed9t feature m\u1edbi kh\u00e1c s\u1ebd \u0111\u01b0\u1ee3c t\u1ea1o. \n\nPh\u1ea7n th\u1ee9 hai bao g\u1ed3m net, com, de , es, jp, fr, uk, mx, es ... \n\nPh\u1ea7n \u0111\u1ea7u ti\u00ean bao g\u1ed3m msn, hotmail, outlook, gmail, me, icloud, v.v. T\u1ea5t c\u1ea3 ph\u1ea7n \u0111\u1ea7u thu\u1ed9c v\u1ec1 m\u1ed9t s\u1ed1 c\u00f4ng ty, nh\u01b0 msn, hotmail , outlook - Microsoft, icloud - Apple.","53ecefe5":"**Chia data th\u00e0nh 70:30 \u0111\u1ec3 train**","5cb8f494":"#### Gi\u1ea3m memory\nKi\u1ec3u d\u1eef li\u1ec7u ch\u1ee9a nhi\u1ec1u int64, int32, float64, v.v.\n\n-> C\u1ea7n gi\u1ea3m \u0111\u1ec3 tr\u00e1nh b\u1ecb tr\u00e0n memory.","0282bfcb":"Kh\u00f4ng c\u00f3 gi\u00e1 tr\u1ecb null trong C12 tr\u00ean train, v\u00e0 ch\u1ec9 c\u00f3 3 gi\u00e1 tr\u1ecb null trong C12 test. \n\n75% gi\u00e1 tr\u1ecb trong C12 l\u00e0 0 (train). V\u00e0 gi\u00e1 tr\u1ecb t\u1ed1i \u0111a l\u00e0 1187 c\u00f3 ngh\u0129a l\u00e0 c\u00f3 m\u1ed9t s\u1ed1 ngo\u1ea1i l\u1ec7 c\u1ea7n ph\u1ea3i lo\u1ea1i b\u1ecf.","46385b50":"#### Ph\u00e2n t\u00edch feature card3 ","74207da2":"# **Nguy\u1ec5n Huy S\u01a1n - 18021102 - H\u1ecdc M\u00e1y**","5c9853d6":"Ta s\u1ebd t\u1ea1o ra 2 features m\u1edbi v\u1ec1 th\u1eddi gian: 'hour' v\u00e0 'day' thay v\u00ec t\u00ednh b\u1eb1ng 'sec' nh\u01b0 c\u0169.","d583e23d":"<h4> Ph\u00e2n t\u00edch m\u1ed9t s\u1ed1 feature M<\/h4>","62dc6f9f":"#### Feature engineering","42b93414":"<h4> Ph\u00e2n t\u00edch DeviceInfo<\/h4>\n\nM\u00f4 t\u1ea3 thi\u1ebft b\u1ecb ng\u01b0\u1eddi d\u00f9ng giao d\u1ecbch.","fcaf0155":"<h4> Ph\u00e2n t\u00edch id_30 features<\/h4>\n\nM\u00f4 t\u1ea3 version OS c\u1ee7a ng\u01b0\u1eddi d\u00f9ng\n","42be17b4":"<h4> Ph\u00e2n t\u00edch feature P_emaildomain, R_emaildomain<\/h4>\n\n**P_emaildomain** \u0111\u1ec1 c\u1eadp \u0111\u1ebfn email c\u1ee7a ng\u01b0\u1eddi mua v\u00e0 **R_emaildomain** \u0111\u1ec1 c\u1eadp \u0111\u1ebfn email c\u1ee7a ng\u01b0\u1eddi nh\u1eadn"}}