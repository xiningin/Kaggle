{"cell_type":{"459e1925":"code","cf6c92dc":"code","e3fe6ebe":"code","04bedca9":"code","66cbf3f8":"code","9748d5c0":"code","4ff5d9be":"code","92f87e78":"code","3c8cb3ea":"code","1df93ae2":"code","175b68dd":"code","0f6a9b68":"code","ee007341":"code","34c3c3c2":"code","c111df1f":"code","64ce3a0b":"code","a7adf3f8":"code","5f23e323":"code","1d03cce0":"code","60e81049":"code","75ba398b":"code","4ab4a536":"code","fcebd79a":"code","7c0b14f4":"code","8a304329":"code","64df2915":"code","6c05cc04":"code","a3414934":"code","ab4e035c":"code","20e14074":"code","7abadad5":"code","36782433":"code","2c4add39":"code","298ec26f":"code","e1d307c7":"code","1a4c8707":"code","1ed9f244":"code","a0a11a03":"markdown","29d5f4a5":"markdown","144fbf68":"markdown","3d66a691":"markdown","6c655bec":"markdown","a5248a04":"markdown","c3ef4a62":"markdown","9d94d89f":"markdown","6eac9993":"markdown","a021cab3":"markdown","e4040fcc":"markdown","30d997da":"markdown","31ec0d53":"markdown","aa675ec2":"markdown","6ea39d78":"markdown","d536e653":"markdown","4c985d40":"markdown","38fde05c":"markdown","7f78fffb":"markdown","11983849":"markdown","d8073040":"markdown","9290fb87":"markdown","2fa03037":"markdown","d7bfc7ce":"markdown","671e3370":"markdown","075ed38a":"markdown","7196528b":"markdown","b877fa3c":"markdown"},"source":{"459e1925":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cf6c92dc":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\ncolor = sns.color_palette()","e3fe6ebe":"application_train = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/application_train.csv')\napplication_test= pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/application_test.csv')\nbureau = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/bureau.csv')\nbureau_balance = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/bureau_balance.csv')\nPOS_CASH_balance = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/POS_CASH_balance.csv')\ncredit_card_balance = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/credit_card_balance.csv')\nprevious_application = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/previous_application.csv')\ninstallments_payments = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/installments_payments.csv')","04bedca9":"application_train.head()","66cbf3f8":"application_train.columns.values","9748d5c0":"def find_missing(data):\n    # number of missing values\n    count_missing = data.isnull().sum().values\n    # total records\n    total = data.shape[0]\n    # percentage of missing\n    ratio_missing = count_missing\/total\n    # return a dataframe to show: feature name, # of missing and % of missing\n    return pd.DataFrame(data={'missing_count':count_missing, 'missing_ratio':ratio_missing}, index=data.columns.values)\nfind_missing(application_train).head(12)","4ff5d9be":"POS_CASH_balance.head()","92f87e78":"POS_CASH_balance.columns.values","3c8cb3ea":"find_missing(POS_CASH_balance).head(12)","1df93ae2":"bureau.head()","175b68dd":"bureau.columns.values","0f6a9b68":"find_missing(bureau).head(12)","ee007341":"bureau_balance.head()","34c3c3c2":"bureau_balance.columns.values","c111df1f":"find_missing(bureau_balance).head(12)","64ce3a0b":"credit_card_balance.head()","a7adf3f8":"credit_card_balance.columns.values","5f23e323":"find_missing(credit_card_balance).head(12)","1d03cce0":"previous_application.head()","60e81049":"previous_application.columns.values","75ba398b":"find_missing(previous_application).head(12)","4ab4a536":"installments_payments.head()","fcebd79a":"installments_payments.columns.values","7c0b14f4":"find_missing(installments_payments).head(12)","8a304329":"def plot_categorical(data, col, size=[8 ,4], xlabel_angle=0, title=''):\n    '''use this for ploting the count of categorical features'''\n    plotdata = data[col].value_counts()\n    plt.figure(figsize = size)\n    sns.barplot(x = plotdata.index, y=plotdata.values)\n    plt.title(title)\n    if xlabel_angle!=0: \n        plt.xticks(rotation=xlabel_angle)\n    plt.show()\nplot_categorical(data=application_train, col='TARGET', size=[8 ,4], xlabel_angle=0, title='train set: label')","64df2915":"plot_categorical(data=application_train, col='OCCUPATION_TYPE', size=[12 ,4], xlabel_angle=30, title='Occupation Type')","6c05cc04":"plot_categorical(data=application_train, col='NAME_INCOME_TYPE', size=[12 ,4], xlabel_angle=0, title='Income Type')","a3414934":"plot_categorical(data=application_train, col='NAME_HOUSING_TYPE', size=[12 ,4], xlabel_angle=0, title='House Type')","ab4e035c":"def plot_numerical(data, col, size=[8, 4], bins=50):\n    '''use this for ploting the distribution of numercial features'''\n    plt.figure(figsize=size)\n    plt.title(\"Distribution of %s\" % col)\n    sns.distplot(data[col].dropna(), kde=True,bins=bins)\n    plt.show()\nplot_numerical(application_train, 'AMT_CREDIT')","20e14074":"plot_numerical(application_train, 'AMT_ANNUITY')","7abadad5":"plot_numerical(application_train, 'DAYS_EMPLOYED')","36782433":"def plot_categorical_bylabel(data, col, size=[12 ,6], xlabel_angle=0, title=''):\n    '''use it to compare the distribution between label 1 and label 0'''\n    plt.figure(figsize = size)\n    l1 = data.loc[data.TARGET==1, col].value_counts()\n    l0 = data.loc[data.TARGET==0, col].value_counts()\n    plt.subplot(1,2,1)\n    sns.barplot(x = l1.index, y=l1.values)\n    plt.title('Default: '+title)\n    plt.xticks(rotation=xlabel_angle)\n    plt.subplot(1,2,2)\n    sns.barplot(x = l0.index, y=l0.values)\n    plt.title('Non-default: '+title)\n    plt.xticks(rotation=xlabel_angle)\n    plt.show()\nplot_categorical_bylabel(application_train, 'CODE_GENDER', title='Gender')","2c4add39":"plot_categorical_bylabel(application_train, 'NAME_EDUCATION_TYPE', size=[15 ,6], xlabel_angle=15, title='Education Type')","298ec26f":"def plot_numerical_bylabel(data, col, size=[12, 6]):\n    plt.figure(figsize=size)\n    # Calculate the correlation coefficient between the new variable and the target\n    corr = data['TARGET'].corr(data[col])\n    \n    # Calculate medians for repaid vs not repaid\n    avg_repaid = data.ix[data['TARGET'] == 0, col].median()\n    avg_not_repaid = data.ix[data['TARGET'] == 1, col].median()\n    \n    plt.figure(figsize = (12, 6))\n    \n    # Plot the distribution for target == 0 and target == 1\n    sns.kdeplot(data.ix[data['TARGET'] == 0, col], label = 'TARGET == 0')\n    sns.kdeplot(data.ix[data['TARGET'] == 1, col], label = 'TARGET == 1')\n    \n    # label the plot\n    plt.xlabel(col); plt.ylabel('Density'); plt.title('%s Distribution' % col)\n    plt.legend();\n    # print out the correlation\n    print('The correlation between %s and the TARGET is %0.4f' % (col, corr))\n    # Print out average values\nplot_numerical_bylabel(application_train, 'EXT_SOURCE_1')","e1d307c7":"plot_numerical_bylabel(application_train, 'EXT_SOURCE_2')","1a4c8707":"plot_numerical_bylabel(application_train, 'EXT_SOURCE_3')","1ed9f244":"corr_mat = application_train.corr()\nplt.figure(figsize=[15, 15])\nsns.heatmap(corr_mat.values, annot=False)\nplt.show()","a0a11a03":"### 2.3 Bureau","29d5f4a5":"### 2.4 Bureau_balance","144fbf68":"## 2. Check the data","3d66a691":"Days employed","6c655bec":"## 3.5 Correlation Matrix","a5248a04":"### 2.5 credit_card_balance","c3ef4a62":"Annuity Amount","9d94d89f":"**House Type**","6eac9993":"Occupation Type\n","a021cab3":"### 2.2 POS_CASH_balance","e4040fcc":"### 3.4 Numerical features by label","30d997da":"Education Type","31ec0d53":"Credit Amount\n","aa675ec2":"## 3. Explore the data","6ea39d78":"### 3.1 Categorical features\n","d536e653":"EXT_SOURCE_1","4c985d40":"EXT_SOURCE_3","38fde05c":"## **1. Importing Data and Libraries**","7f78fffb":"EXT_SOURCE_2","11983849":"Label","d8073040":"Gender","9290fb87":"### 2.7 installments_payments","2fa03037":"### 2.1 application train \/ test\n","d7bfc7ce":"### 3.2 Numerical features","671e3370":"**Income Type\n**","075ed38a":"### 2.6 previous_application\n","7196528b":"Gender","b877fa3c":"### 3.3 Categorical features by label\n"}}