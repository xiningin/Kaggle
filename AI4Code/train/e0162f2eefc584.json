{"cell_type":{"dbd388e6":"code","963c5219":"code","7c9f1500":"code","2998147c":"code","ea08b495":"code","6ea6694f":"code","3ac5a0cc":"code","9dc822b2":"code","0b88a353":"code","a3eeeb82":"code","0a4d5f6f":"code","19864676":"code","ab95a839":"code","25423caf":"code","10d92874":"code","63c79df3":"markdown","f07705f6":"markdown","b1544703":"markdown","ccfad160":"markdown","76b2621c":"markdown","03faf467":"markdown","d42732b2":"markdown","2a106958":"markdown","04b5afd2":"markdown","6eec052d":"markdown"},"source":{"dbd388e6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","963c5219":"train_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain_data.head()","7c9f1500":"train_data.describe()","2998147c":"train_data['Gender'] = pd.get_dummies(train_data['Sex'], drop_first=True)\ntest_data['Gender'] = pd.get_dummies(test_data['Sex'], drop_first=True)\n\ntrain_data.drop(columns=['Sex', 'Embarked', 'Fare'], inplace=True)\ntest_data.drop(columns=['Sex', 'Embarked', 'Fare'], inplace=True)","ea08b495":"train_data","6ea6694f":"_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\n_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ndataset = pd.concat([_train, _test], sort=True, ignore_index=True)\ntrain_len = len(train_data)","3ac5a0cc":"surname = dataset['Name'].apply(lambda x: x[:x.find(',')])\nticket = dataset['Ticket'].apply(lambda x: x[:-1])\ndataset['PassengerGroup'] = (surname.astype(str) + '-' + dataset['Pclass'].astype(str) + '-'\n           + ticket.astype(str) + '-' + dataset['Embarked'].astype(str))\n\ndef PassengerGroup_labeler(group):\n    group_elements = dataset.loc[dataset['PassengerGroup'] == group, 'PassengerId']\n    if len(group_elements) == 1:\n        return 0\n    else:\n        return group_elements.min()\n\ndataset['GroupId'] = dataset['PassengerGroup'].apply(PassengerGroup_labeler)\ndataset.drop(columns='PassengerGroup', inplace=True)","9dc822b2":"dataset['InGroup'] = (dataset['GroupId'] > 0).astype(int)\n\ntrain_data['InGroup'] = dataset.iloc[:train_len, -1]\ntest_data['InGroup'] = dataset.iloc[train_len:, -1].reset_index(drop=True)","0b88a353":"dataset['Title'] = dataset['Name'].apply(lambda x: x[x.find(', ') + 2:x.find('.')])\n\nmask = (dataset['GroupId'] != 0) & ((dataset['Title'] == 'Master') | (dataset['Sex'] == 'female'))\n\nfcg_groups = dataset.loc[mask, 'GroupId'].value_counts()\nfcg_groups = fcg_groups[fcg_groups > 1]\n\nmask = mask & (dataset['GroupId'].isin(fcg_groups.index))\n\ndataset['InFCG'] = 0\ndataset.loc[mask, 'InFCG'] = 1\n\ntrain_data['FCGSurvived'] = dataset.iloc[:train_len, -1]\ntest_data['FCGSurvived'] = dataset.iloc[train_len:, -1].reset_index(drop=True)","a3eeeb82":"dataset['FCGSurvived'] = dataset.loc[dataset['InFCG'] == 1].groupby('GroupId')['Survived'].transform(np.nanmean)\n\ndataset.loc[dataset['FCGSurvived'].isna(), 'FCGSurvived'] = 0\ndataset['FCGSurvived'] = dataset['FCGSurvived'].astype(int)\n\ntrain_data['FCGSurvived'] = dataset.iloc[:train_len, -1]\ntest_data['FCGSurvived'] = dataset.iloc[train_len:, -1].reset_index(drop=True)","0a4d5f6f":"train_data.drop(columns=['Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Age'], inplace=True)\ntest_data.drop(columns=['Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Age'], inplace=True)","19864676":"train_data.head()","ab95a839":"X_train = train_data.drop(columns='Survived')\nY_train = train_data['Survived'].astype(int)\nX_test = test_data\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","25423caf":"model = KNeighborsClassifier(leaf_size=3, weights='uniform', n_neighbors=19)\nmodel.fit(X_train, Y_train)\npred = model.predict(X_test)","10d92874":"submission_df = pd.DataFrame({'PassengerId': _test['PassengerId'], 'Survived': pred})\nsubmission_df.to_csv(\"submission.csv\", index=False)","63c79df3":"\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 Sex, Embarked, Fare","f07705f6":"\u042d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0437\u0436\u0435, \u0447\u0442\u043e\u0431\u044b \u043b\u0435\u0433\u043a\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435\n\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0435 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445","b1544703":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f, \u0441\u043c\u043e\u0433\u043b\u0438 \u043b\u0438 \u0432\u044b\u0436\u0438\u0442\u044c \u0432\u0441\u0435 \u0447\u043b\u0435\u043d\u044b \u0432 \u0433\u0440\u0443\u043f\u043f\u0435","ccfad160":"\u0421\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430","76b2621c":"\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432","03faf467":"\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438","d42732b2":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u0440\u0443\u043f\u043f\u044b \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043b\u0438 \u0432\u043c\u0435\u0441\u0442\u0435 (\u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0444\u0430\u043c\u0438\u043b\u0438\u0438, \u043a\u043b\u0430\u0441\u0441\u0430 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430, \u043d\u043e\u043c\u0435\u0440\u0430 \u0431\u0438\u043b\u0435\u0442\u0430 \u0438 \u043c\u0435\u0441\u0442\u0430 \u043f\u043e\u0441\u0430\u0434\u043a\u0438) \u0438 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435 \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c \u0433\u0440\u0443\u043f\u043f\u044b","2a106958":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 k \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0434\u043b\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","04b5afd2":"\u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u043d\u0430 \u0433\u0440\u0443\u043f\u043f\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0436\u0435\u043d\u0449\u0438\u043d\u044b \u0438 \u0434\u0435\u0442\u0438","6eec052d":"\u041e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f"}}