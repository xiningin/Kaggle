{"cell_type":{"7e5828b2":"code","b22c72c7":"code","48bc0474":"code","6eadafcc":"code","1cc09488":"code","7314fe76":"code","0bc78a7d":"code","1ab8a219":"code","67a6c666":"markdown","7675ea5a":"markdown"},"source":{"7e5828b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b22c72c7":"!pip install apyori","48bc0474":"#importing libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","6eadafcc":"#importing dataset\nds = pd.read_csv('..\/input\/market-basket-optimisation\/market basket optimisation.csv', header = None)\ntransactions = []\nfor i in range(0, 7501):\n  transactions.append([str(ds.values[i,j]) for j in range(0, 20)])","1cc09488":"#training eclat model to the dataset\nfrom apyori import apriori\nrules = apriori(transactions = transactions, min_support = 0.003, min_confidence = 0.2, min_lift = 3, min_length = 2, max_length = 2)","7314fe76":"#Displaying the first results coming directly from the output of the apriori function\nresults = list(rules)\nresults","0bc78a7d":"#Putting the results well organised into a Pandas DataFrame\ndef inspect(results):\n    lhs         = [tuple(result[2][0][0])[0] for result in results]\n    rhs         = [tuple(result[2][0][1])[0] for result in results]\n    supports    = [result[1] for result in results]\n    return list(zip(lhs, rhs, supports))\nresultsinDataFrame = pd.DataFrame(inspect(results), columns = ['Product 1', 'Product 2', 'Support'])","1ab8a219":"#Displaying the results sorted by descending supports\nresultsinDataFrame.nlargest(n = 10, columns = 'Support')","67a6c666":"Visualising the results","7675ea5a":"**Eclat Algorithm - Association Rule Learning** suggests what customers will buy, based on past purchases (i.e, dataset containing 7500 values)"}}