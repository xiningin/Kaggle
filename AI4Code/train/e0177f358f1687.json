{"cell_type":{"d67348d8":"code","b45b83ee":"code","be232e2b":"code","9cae6dba":"code","36d6254c":"code","4cde33e7":"code","c5f94739":"code","07097a49":"code","97733eed":"code","3458cf8c":"code","c5534bb3":"code","df92fff0":"code","daf005e4":"code","380f22bb":"code","d5bf1e94":"code","def4a77b":"code","56b9de67":"code","9474fc8c":"code","ecd316ac":"code","4a758c9f":"code","4d23de39":"code","823f0afe":"code","9a5e3fa0":"code","45a007d0":"code","42ea3366":"code","81fe189e":"code","d029c564":"markdown","6fdf546a":"markdown"},"source":{"d67348d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b45b83ee":"from kaggle_datasets import KaggleDatasets\nimport numpy as np\nimport tensorflow as tf\nimport re\nfrom tensorflow import keras\n\nprint(f'Tensorflow version: {tf.__version__}')","be232e2b":"try:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is set.\n    # On Kaggle this is always the case.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\n# TPUStrategy for distributing training\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse: # default strategy that works on CPU and single GPU\n    strategy = tf.distribute.get_strategy()\n\nprint('Replicas ',strategy.num_replicas_in_sync)","9cae6dba":"AUTO = tf.data.experimental.AUTOTUNE\n\nIMAGE_SIZE = [224,224]\nEPOCHS = 20\nFOLDS = 3\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync","36d6254c":"\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('tpu-getting-started')\nprint(GCS_DS_PATH)\n\nGCS_PATH = GCS_DS_PATH + '\/tfrecords-jpeg-224x224'\nAUTO = tf.data.experimental.AUTOTUNE\n\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrec')\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test\/*.tfrec') ","4cde33e7":"CLASSES = ['pink primrose',    'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',     'wild geranium',     'tiger lily',           'moon orchid',              'bird of paradise', 'monkshood',        'globe thistle',         # 00 - 09\n           'snapdragon',       \"colt's foot\",               'king protea',      'spear thistle', 'yellow iris',       'globe-flower',         'purple coneflower',        'peruvian lily',    'balloon flower',   'giant white arum lily', # 10 - 19\n           'fire lily',        'pincushion flower',         'fritillary',       'red ginger',    'grape hyacinth',    'corn poppy',           'prince of wales feathers', 'stemless gentian', 'artichoke',        'sweet william',         # 20 - 29\n           'carnation',        'garden phlox',              'love in the mist', 'cosmos',        'alpine sea holly',  'ruby-lipped cattleya', 'cape flower',              'great masterwort', 'siam tulip',       'lenten rose',           # 30 - 39\n           'barberton daisy',  'daffodil',                  'sword lily',       'poinsettia',    'bolero deep blue',  'wallflower',           'marigold',                 'buttercup',        'daisy',            'common dandelion',      # 40 - 49\n           'petunia',          'wild pansy',                'primula',          'sunflower',     'lilac hibiscus',    'bishop of llandaff',   'gaura',                    'geranium',         'orange dahlia',    'pink-yellow dahlia',    # 50 - 59\n           'cautleya spicata', 'japanese anemone',          'black-eyed susan', 'silverbush',    'californian poppy', 'osteospermum',         'spring crocus',            'iris',             'windflower',       'tree poppy',            # 60 - 69\n           'gazania',          'azalea',                    'water lily',       'rose',          'thorn apple',       'morning glory',        'passion flower',           'lotus',            'toad lily',        'anthurium',             # 70 - 79\n           'frangipani',       'clematis',                  'hibiscus',         'columbine',     'desert-rose',       'tree mallow',          'magnolia',                 'cyclamen ',        'watercress',       'canna lily',            # 80 - 89\n           'hippeastrum ',     'bee balm',                  'pink quill',       'foxglove',      'bougainvillea',     'camellia',             'mallow',                   'mexican petunia',  'bromelia',         'blanket flower',        # 90 - 99\n           'trumpet creeper',  'blackberry lily',           'common tulip',     'wild rose']                                                                                                                                               # 100 - 102","c5f94739":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels = 3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.reshape(image, [*IMAGE_SIZE, 3])\n    return image","07097a49":"def read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        'image':tf.io.FixedLenFeature([], tf.string),\n        'class':tf.io.FixedLenFeature([], tf.int64),\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label","97733eed":"def read_unlabeled_tfrecord(test_example):\n    UNLABELED_TFREC_FORMAT = {\n        'image':tf.io.FixedLenFeature([], tf.string),\n        'id':tf.io.FixedLenFeature([], tf.string),\n    }\n    example = tf.io.parse_single_example(test_example,UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum","3458cf8c":"def data_augment(image, label):\n    image = tf.image.random_flip_left_right(image)\n    return image, label ","c5534bb3":"def load_dataset(filenames, labeled = True, ordered = False):\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads = AUTO)\n    \n    dataset = dataset.with_options(ignore_order)\n    \n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls = AUTO)\n    return dataset","df92fff0":"def get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled = True, ordered = False)\n    dataset = dataset.map(data_augment, num_parallel_calls = AUTO)\n    dataset = dataset.repeat()\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO)\n    return dataset","daf005e4":"def get_validation_dataset():\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled = True, ordered = False)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO)\n    return dataset","380f22bb":"def get_test_dataset():\n    dataset = load_dataset(TEST_FILENAMES, labeled = False, ordered = True)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO)\n    return dataset","d5bf1e94":"def count_data_items(filenames):\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)","def4a77b":"NUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nprint('Dataset: {} training images, {} validation images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES, NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))","56b9de67":"training_dataset = get_training_dataset()\nvalidation_dataset = get_validation_dataset()","9474fc8c":"for img, label in training_dataset.take(1):\n    data = [img[0:16,:,:,:].numpy(),label[0:16].numpy()]","ecd316ac":"data[0].shape, data[1].shape","4a758c9f":"import matplotlib.pyplot as plt\n\nrows = 4\ncols = 4\nfig = plt.figure(figsize  = (10, 10))\nfor index in range(1, rows * cols + 1):\n    ax = fig.add_subplot(rows, cols, index)\n    img = data[0][index -1]\n    label = data[1][index - 1]\n    ax.axis('off')\n    plt.imshow(img)\n    plt.title(CLASSES[label])\nplt.tight_layout()\nplt.show()","4d23de39":"LR_START = 0.00001\nLR_MAX = 0.00005 * strategy.num_replicas_in_sync\nLR_MIN = 0.00001\nLR_RAMPUP_EPOCHS = 5\nLR_SUSTAIN_EPOCHS = 0\nLR_EXP_DECAY = 0.8\n\n\ndef lrfun(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS*epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN)*LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr","823f0afe":"lr_callback = tf.keras.callbacks.LearningRateScheduler(lrfun, verbose = True)\n\nrng = [i for i in range(25 if  EPOCHS < 25 else EPOCHS)]\ny = [lrfun(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","9a5e3fa0":"from tensorflow.keras.applications import InceptionV3\n\nwith strategy.scope():\n    pretrained_model = InceptionV3(weights = 'imagenet', include_top = False, input_shape = [*IMAGE_SIZE, 3]) \n    pretrained_model.trainable = False\n    \n    incv3 = tf.keras.Sequential([\n        pretrained_model,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation = 'softmax', dtype = 'float32')\n    ])\n    \nincv3.compile(\n    optimizer = 'adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics = ['sparse_categorical_accuracy'])\n\nhistoricalincv3 = incv3.fit(\n    training_dataset,\n    steps_per_epoch = STEPS_PER_EPOCH,\n    epochs = 20,\n    callbacks = [lr_callback],\n    validation_data = validation_dataset)\n","45a007d0":"training_loss = historicalincv3.history['loss']\ntraining_sparse_categorical_accuracy = historicalincv3.history['sparse_categorical_accuracy']\n\nvalidation_loss = historicalincv3.history['val_loss']\nvalidation_sparse_categorical_accuracy = historicalincv3.history['val_sparse_categorical_accuracy']\n\nepochs = np.arange(EPOCHS)\n\nplt.subplots(1,2)\n\nplt.subplot(1, 2, 1)\nplt.plot(epochs, training_loss,label = 'Training Loss')\nplt.plot(epochs, validation_loss, label = 'Validation Loss')\nplt.xlabel('Epochs')\nplt.legend()\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs, training_sparse_categorical_accuracy,label = 'Training Accuracy')\nplt.plot(epochs, validation_sparse_categorical_accuracy, label = 'Validation Accuracy')\nplt.xlabel('Epochs')\nplt.legend()\n\nplt.show()","42ea3366":"test_ds = get_test_dataset()\n\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = incv3.predict(test_images_ds)\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)","81fe189e":"test_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')","d029c564":"training_loss = historicalDN201.history['loss']\ntraining_sparse_categorical_accuracy = historicalDN201.history['sparse_categorical_accuracy']\n\nvalidation_loss = historicalDN201.history['val_loss']\nvalidation_sparse_categorical_accuracy = historicalDN201.history['val_sparse_categorical_accuracy']\n\nepochs = np.arange(EPOCHS)\n\nplt.subplots(1,2)\n\nplt.subplot(1, 2, 1)\nplt.plot(epochs, training_loss,label = 'Training Loss')\nplt.plot(epochs, validation_loss, label = 'Validation Loss')\nplt.xlabel('Epochs')\nplt.legend()\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs, training_sparse_categorical_accuracy,label = 'Training Accuracy')\nplt.plot(epochs, validation_sparse_categorical_accuracy, label = 'Validation Accuracy')\nplt.xlabel('Epochs')\nplt.legend()\n\nplt.show()","6fdf546a":"with strategy.scope():\n    pretrained_model = tf.keras.applications.DenseNet201(weights = 'imagenet', include_top = False, input_shape = [*IMAGE_SIZE, 3]) \n    pretrained_model.trainable = False\n    \n    DN201 = tf.keras.Sequential([\n        pretrained_model,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation = 'softmax', dtype = 'float32')\n    ])\n    \nDN201.compile(\n    optimizer = 'adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics = ['sparse_categorical_accuracy'])\n\nhistoricalDN201 = DN201.fit(\n    training_dataset,\n    steps_per_epoch = STEPS_PER_EPOCH,\n    epochs = 20,\n    callbacks = [lr_callback],\n    validation_data = validation_dataset)\n"}}