{"cell_type":{"bfcf7257":"code","c06ff776":"code","f26922ba":"code","59707ba5":"code","f04a3d70":"code","552c3d6c":"code","e75c251d":"markdown","ddd915a3":"markdown","c9849fcd":"markdown","2bd1bf05":"markdown","0178fe22":"markdown","95e46dbf":"markdown"},"source":{"bfcf7257":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c06ff776":"import warnings\nwarnings.filterwarnings('ignore')\nimport json \nwith open('\/kaggle\/input\/chatbots-intent-recognition-dataset\/Intent.json') as json_file:\n    data = json.load(json_file)\ndata = data['intents']","f26922ba":"dataset = pd.DataFrame(columns=['intent', 'text', 'response'])\nfor i in data:\n    intent = i['intent']\n    for t, r in zip(i['text'], i['responses']):\n        row = {'intent': intent, 'text': t, 'response':r}\n        dataset = dataset.append(row, ignore_index=True)\ndataset","59707ba5":"def cosine_distance_countvectorizer_method(s1, s2):\n    \n    # sentences to list\n    allsentences = [s1 , s2]\n    \n    # packages\n    from sklearn.feature_extraction.text import CountVectorizer\n    from scipy.spatial import distance\n    \n    # text to vector\n    vectorizer = CountVectorizer()\n    all_sentences_to_vector = vectorizer.fit_transform(allsentences)\n    text_to_vector_v1 = all_sentences_to_vector.toarray()[0].tolist()\n    text_to_vector_v2 = all_sentences_to_vector.toarray()[1].tolist()\n    \n    # distance of similarity\n    cosine = distance.cosine(text_to_vector_v1, text_to_vector_v2)\n    return round((1-cosine),2)","f04a3d70":"def respond(text):\n    maximum = float('-inf')\n    response = \"\"\n    closest = \"\"\n    for i in dataset.iterrows():\n        sim = cosine_distance_countvectorizer_method(text, i[1]['text'])\n        if sim > maximum:\n            maximum = sim\n            response = i[1]['response']\n            closest = i[1]['text']\n    return response","552c3d6c":"while True:\n    text = str(input(\"Input: \"))\n    if text.lower() == \"exit\":\n        print(\"Response: Exiting.....\")\n        break\n    print(\"Response:\",respond(text))","e75c251d":"# Chat","ddd915a3":"# Finding Response\n\nThe following function will find the most suitable reponse using the cosine distance to find the closest match to the input in the text field and giving the corresponding response.","c9849fcd":"# Cosine Distance for Similarity of Texts","2bd1bf05":"# Creating Dataset","0178fe22":"# ChatBot using the Given Data","95e46dbf":"# THE END"}}