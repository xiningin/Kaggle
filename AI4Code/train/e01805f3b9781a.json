{"cell_type":{"bef66d59":"code","d689800b":"code","16384bc4":"code","b549e7b7":"code","a5f63fb8":"code","a61d87b9":"code","f67d67d2":"code","2a1ed04e":"code","7cd3b69b":"code","f2e09373":"code","d2b681bc":"code","80604a4a":"code","a36f3379":"code","7efccfce":"code","9ef6448c":"code","6ca22b1b":"code","cd375ed6":"code","4cdd4b38":"code","7676c82e":"code","1e578e21":"code","e888ce0d":"markdown","fb02010b":"markdown","d97e31a4":"markdown","ffa1aa45":"markdown","5095d215":"markdown","2d126464":"markdown","dd0c9521":"markdown","73c3b3e7":"markdown","e554b74e":"markdown","0479fd10":"markdown","640bfac2":"markdown","4ed859b4":"markdown","09db9a0c":"markdown","56f3294d":"markdown","4aa386a2":"markdown","25027f99":"markdown","0e61378b":"markdown","4056024b":"markdown","1e2c204b":"markdown","a0f472af":"markdown","b7bad727":"markdown"},"source":{"bef66d59":"# # This Python 3 environment comes with many helpful analytics libraries installed\n# # It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# # For example, here's several helpful packages to load\n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# # Input data files are available in the read-only \"..\/input\/\" directory\n# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# # You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# # You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d689800b":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np","16384bc4":"Aquifer_Doganella = pd.read_csv(\"\/kaggle\/input\/acea-water-prediction\/Aquifer_Doganella.csv\")\nAquifer_Auser = pd.read_csv(\"\/kaggle\/input\/acea-water-prediction\/Aquifer_Auser.csv\")\nWater_Spring_Amiata = pd.read_csv(\"\/kaggle\/input\/acea-water-prediction\/Water_Spring_Amiata.csv\")\nLake_Bilancino = pd.read_csv(\"\/kaggle\/input\/acea-water-prediction\/Lake_Bilancino.csv\")\nWater_Spring_Madonna_di_Canneto = pd.read_csv(\"\/kaggle\/input\/acea-water-prediction\/Water_Spring_Madonna_di_Canneto.csv\")\nAquifer_Luco = pd.read_csv(\"\/kaggle\/input\/acea-water-prediction\/Aquifer_Luco.csv\")\nAquifer_Petrignano = pd.read_csv(\"\/kaggle\/input\/acea-water-prediction\/Aquifer_Petrignano.csv\")\nWater_Spring_Lupa = pd.read_csv(\"\/kaggle\/input\/acea-water-prediction\/Water_Spring_Lupa.csv\")\nRiver_Arno = pd.read_csv(\"\/kaggle\/input\/acea-water-prediction\/River_Arno.csv\")\n\nAquifer_Doganella['Date'] = pd.to_datetime(Aquifer_Doganella['Date'])\nAquifer_Auser['Date'] = pd.to_datetime(Aquifer_Auser['Date'])\nWater_Spring_Amiata['Date'] = pd.to_datetime(Water_Spring_Amiata['Date'])\nLake_Bilancino['Date'] = pd.to_datetime(Lake_Bilancino['Date'])\nWater_Spring_Madonna_di_Canneto['Date'] = pd.to_datetime(Water_Spring_Madonna_di_Canneto['Date'])\nAquifer_Luco['Date'] = pd.to_datetime(Aquifer_Luco['Date'])\nAquifer_Petrignano['Date'] = pd.to_datetime(Aquifer_Petrignano['Date'])\nWater_Spring_Lupa['Date'] = pd.to_datetime(Water_Spring_Lupa['Date'])\nRiver_Arno['Date'] = pd.to_datetime(River_Arno['Date'])","b549e7b7":"def get_datefeatures(df):\n    df['month'] = df.Date.dt.month\n    df['day'] = df.Date.dt.day\n    df['week'] = df.Date.dt.week\n    df['year'] = df.Date.dt.year\n    \n    return df\n\nAquifer_Doganella = get_datefeatures(df = Aquifer_Doganella)\nAquifer_Auser = get_datefeatures(df = Aquifer_Auser)\nWater_Spring_Amiata = get_datefeatures(df = Water_Spring_Amiata)\nLake_Bilancino = get_datefeatures(df = Lake_Bilancino)\nWater_Spring_Madonna_di_Canneto = get_datefeatures(df = Water_Spring_Madonna_di_Canneto)\nAquifer_Luco = get_datefeatures(df = Aquifer_Luco)\nAquifer_Petrignano = get_datefeatures(df = Aquifer_Petrignano)\nWater_Spring_Lupa = get_datefeatures(df = Water_Spring_Lupa)\nRiver_Arno = Water_Spring_Lupa = get_datefeatures(df = River_Arno)","a5f63fb8":"def date_range_of_data(df, df_name):\n    \n    print(f\"The date range for ## {df_name} ## is from\")\n    print(f\"{df['Date'].min()} to {df['Date'].max()}\")\n    print(f\"which is a total of {(df['Date'].max() - df['Date'].min()).days} days\")\n    print(\"\")\n\ndate_range_of_data(df = Aquifer_Doganella, df_name='Aquifer_Doganella')\ndate_range_of_data(df = Aquifer_Auser, df_name='Aquifer_Auser')\ndate_range_of_data(df = Water_Spring_Amiata, df_name='Water_Spring_Amiata')\ndate_range_of_data(df = Lake_Bilancino, df_name='Lake_Bilancino')\ndate_range_of_data(df = Water_Spring_Madonna_di_Canneto, df_name='Water_Spring_Madonna_di_Canneto')\ndate_range_of_data(df = Aquifer_Luco, df_name='Aquifer_Luco')\ndate_range_of_data(df = Aquifer_Petrignano, df_name='Aquifer_Petrignano')\ndate_range_of_data(df = Water_Spring_Lupa, df_name='Water_Spring_Lupa')\ndate_range_of_data(df = River_Arno, df_name='River_Arno')\n\n","a61d87b9":"def check_duplicates(df, df_name):\n    print(f\"{df_name}\")\n    print(f\"{df.Date.duplicated().value_counts()}\")\n    print(\"\")\n\ncheck_duplicates(df = Aquifer_Doganella, df_name='Aquifer_Doganella')\ncheck_duplicates(df = Aquifer_Auser, df_name='Aquifer_Auser')\ncheck_duplicates(df = Water_Spring_Amiata, df_name='Water_Spring_Amiata')\ncheck_duplicates(df = Lake_Bilancino, df_name='Lake_Bilancino')\ncheck_duplicates(df = Water_Spring_Madonna_di_Canneto, df_name='Water_Spring_Madonna_di_Canneto')\ncheck_duplicates(df = Aquifer_Luco, df_name='Aquifer_Luco')\ncheck_duplicates(df = Aquifer_Petrignano, df_name='Aquifer_Petrignano')\ncheck_duplicates(df = Water_Spring_Lupa, df_name='Water_Spring_Lupa')\ncheck_duplicates(df = River_Arno, df_name='River_Arno')","f67d67d2":"def find_total_missing_days(df, df_name):\n    daily_date = pd.date_range(start=df.Date.min(),\n                               end=df.Date.max(), freq='D'\n                              )\n    uniq_days = df.Date.nunique()\n    \n    print(f\"#### {df_name}\")\n    print(f\"Total unique days we have data: {uniq_days}\")\n    print(f\"Total days missing: {len(daily_date) - uniq_days}\")\n    print(\"\")\n    \nfind_total_missing_days(df = Aquifer_Doganella, df_name='Aquifer_Doganella')\nfind_total_missing_days(df = Aquifer_Auser, df_name='Aquifer_Auser')\nfind_total_missing_days(df = Water_Spring_Amiata, df_name='Water_Spring_Amiata')\nfind_total_missing_days(df = Lake_Bilancino, df_name='Lake_Bilancino')\nfind_total_missing_days(df = Water_Spring_Madonna_di_Canneto, df_name='Water_Spring_Madonna_di_Canneto')\nfind_total_missing_days(df = Aquifer_Luco, df_name='Aquifer_Luco')\nfind_total_missing_days(df = Aquifer_Petrignano, df_name='Aquifer_Petrignano')\nfind_total_missing_days(df = Water_Spring_Lupa, df_name='Water_Spring_Lupa')\nfind_total_missing_days(df = River_Arno, df_name='River_Arno')","2a1ed04e":"def total_missing_days_pattern(df, df_name):\n\n    daily_date = pd.date_range(start=df.Date.min(),\n                               end=df.Date.max(), \n                               freq='D'\n                              )\n    daily_data = pd.DataFrame({'Date' : daily_date})\n\n    temp = df[['Date']].copy()\n    temp['missing'] = 0\n        \n    final = daily_data.merge(temp, on = ['Date'], how='left')\n    final.fillna(1, inplace=True)\n    \n    plt.figure(figsize=(20, 5))\n    sns.scatterplot(final.Date, final.missing, hue=final.missing)\n    plt.title(df_name)\n    \ntotal_missing_days_pattern(df = Aquifer_Doganella, df_name='Aquifer_Doganella')\ntotal_missing_days_pattern(df = Aquifer_Auser, df_name='Aquifer_Auser')\ntotal_missing_days_pattern(df = Water_Spring_Amiata, df_name='Water_Spring_Amiata')\ntotal_missing_days_pattern(df = Lake_Bilancino, df_name='Lake_Bilancino')\ntotal_missing_days_pattern(df = Water_Spring_Madonna_di_Canneto, df_name='Water_Spring_Madonna_di_Canneto')\ntotal_missing_days_pattern(df = Aquifer_Luco, df_name='Aquifer_Luco')\ntotal_missing_days_pattern(df = Aquifer_Petrignano, df_name='Aquifer_Petrignano')\ntotal_missing_days_pattern(df = Water_Spring_Lupa, df_name='Water_Spring_Lupa')\ntotal_missing_days_pattern(df = River_Arno, df_name='River_Arno')","7cd3b69b":"def Null_analysis(df, title):\n    temp = df.isnull().sum()\n\n    plt.figure(figsize=(15,5))\n    g = sns.barplot(temp.index, temp.values)\n    plt.xticks(rotation=90)\n    plt.ylim(0,(temp.values.max()+1000))\n    plt.title(title)\n    \n    for p in g.patches:\n        g.annotate('{:.0f}\\n{:.2f}%'.format(p.get_height(), (p.get_height()\/df.shape[0]) ), \n                   (p.get_x()+0.4, p.get_height()+10),\n                    ha='center', va='bottom',\n                    color= 'black')\n    \n    plt.show()\n    \n    \n    \nNull_analysis(df = Aquifer_Doganella, title='Aquifer_Doganella')\nNull_analysis(df = Aquifer_Auser, title='Aquifer_Auser')\nNull_analysis(df = Water_Spring_Amiata, title='Water_Spring_Amiata')\nNull_analysis(df = Lake_Bilancino, title='Lake_Bilancino')\nNull_analysis(df = Water_Spring_Madonna_di_Canneto, title='Water_Spring_Madonna_di_Canneto')\nNull_analysis(df = Aquifer_Luco, title='Aquifer_Luco')\nNull_analysis(df = Aquifer_Petrignano, title='Aquifer_Petrignano')\nNull_analysis(df = Water_Spring_Lupa, title='Water_Spring_Lupa')\nNull_analysis(df = River_Arno, title='River_Arno')\n","f2e09373":"def temperature_distribution(df, df_name):\n    temperature_columns = df.columns[df.columns.str.contains(\"Temp\")]\n\n    \n    f, axes = plt.subplots(1, len(temperature_columns), figsize=(25,5))\n    if len(temperature_columns) == 1:\n        axes = [axes]\n    for i, temp_col in enumerate(temperature_columns):\n        sns.distplot(df[temp_col], kde=False, ax=axes[i])\n        axes[i].set_title(df_name)\n       \n    \ntemperature_distribution(df = Aquifer_Doganella, df_name=\"Aquifer_Doganella\")\ntemperature_distribution(df = Aquifer_Auser, df_name=\"Aquifer_Auser\")\ntemperature_distribution(df = Water_Spring_Amiata, df_name=\"Water_Spring_Amiata\")\ntemperature_distribution(df = Lake_Bilancino, df_name=\"Lake_Bilancino\")\ntemperature_distribution(df = Water_Spring_Madonna_di_Canneto, df_name=\"Water_Spring_Madonna_di_Canneto\")\ntemperature_distribution(df = Aquifer_Luco, df_name=\"Aquifer_Luco\")\ntemperature_distribution(df = Aquifer_Petrignano, df_name=\"Aquifer_Petrignano\")\n# temperature_distribution(df = Water_Spring_Lupa, df_name=\"Water_Spring_Lupa\")\ntemperature_distribution(df = River_Arno, df_name=\"River_Arno\")\n","d2b681bc":"\ndef temperature_overtime(df, df_name):\n    temperature_columns = df.columns[df.columns.str.contains(\"Temp\")]\n    \n    plt.figure(figsize=(27.5,5))\n    for i, temp_col in enumerate(temperature_columns):\n        sns.lineplot(df['Date'], df[temp_col], label=temp_col)\n    plt.title(df_name)\n    plt.legend(loc='upper left')\n    plt.show()\n       \n    \ntemperature_overtime(df = Aquifer_Doganella, df_name=\"Aquifer_Doganella\")\ntemperature_overtime(df = Aquifer_Auser, df_name=\"Aquifer_Auser\")\ntemperature_overtime(df = Water_Spring_Amiata, df_name=\"Water_Spring_Amiata\")\ntemperature_overtime(df = Lake_Bilancino, df_name=\"Lake_Bilancino\")\ntemperature_overtime(df = Water_Spring_Madonna_di_Canneto, df_name=\"Water_Spring_Madonna_di_Canneto\")\ntemperature_overtime(df = Aquifer_Luco, df_name=\"Aquifer_Luco\")\ntemperature_overtime(df = Aquifer_Petrignano, df_name=\"Aquifer_Petrignano\")\n# temperature_overtime(df = Water_Spring_Lupa, df_name=\"Water_Spring_Lupa\")\ntemperature_overtime(df = River_Arno, df_name=\"River_Arno\")\n","80604a4a":"def rainfall_distribution(df, condition, df_name):\n    rain_columns = df.columns[df.columns.str.contains(\"Rainfall\")]\n    \n    f, axes = plt.subplots(1, len(rain_columns), figsize=(25,5))\n    if len(rain_columns) == 1:\n        axes = [axes]\n    for i, temp_col in enumerate(rain_columns):\n        sns.distplot(df[temp_col][df[temp_col]>condition], kde=False, ax=axes[i])\n        axes[i].set_title(df_name)\n\n        \nrainfall_distribution(df = Aquifer_Doganella, condition=0, df_name='Aquifer_Doganella')\nrainfall_distribution(df = Aquifer_Auser, condition=0, df_name='Aquifer_Auser')\nrainfall_distribution(df = Water_Spring_Amiata, condition=0, df_name='Water_Spring_Amiata')\nrainfall_distribution(df = Lake_Bilancino, condition=0, df_name='Lake_Bilancino')\nrainfall_distribution(df = Water_Spring_Madonna_di_Canneto, condition=0, df_name='Water_Spring_Madonna_di_Canneto')\nrainfall_distribution(df = Aquifer_Luco, condition=0, df_name='Aquifer_Luco')\nrainfall_distribution(df = Aquifer_Petrignano, condition=0,df_name='Aquifer_Petrignano')\nrainfall_distribution(df = Water_Spring_Lupa, condition=0, df_name='Water_Spring_Lupa')\nrainfall_distribution(df = River_Arno, condition=0, df_name='River_Arno')","a36f3379":"threshold=1\nrainfall_distribution(df = Aquifer_Doganella, condition=threshold, df_name='Aquifer_Doganella')\nrainfall_distribution(df = Aquifer_Auser, condition=threshold, df_name='Aquifer_Auser')\nrainfall_distribution(df = Water_Spring_Amiata, condition=threshold, df_name='Water_Spring_Amiata')\nrainfall_distribution(df = Lake_Bilancino, condition=threshold, df_name='Lake_Bilancino')\nrainfall_distribution(df = Water_Spring_Madonna_di_Canneto, condition=threshold, df_name='Water_Spring_Madonna_di_Canneto')\nrainfall_distribution(df = Aquifer_Luco, condition=threshold, df_name='Aquifer_Luco')\nrainfall_distribution(df = Aquifer_Petrignano, condition=threshold,df_name='Aquifer_Petrignano')\nrainfall_distribution(df = Water_Spring_Lupa, condition=threshold, df_name='Water_Spring_Lupa')\nrainfall_distribution(df = River_Arno, condition=threshold, df_name='River_Arno')","7efccfce":"def rainfall_overtime(df, df_name):\n    rain_columns = df.columns[df.columns.str.contains(\"Rainfall\")]\n    \n    plt.figure(figsize=(27.5,5))\n    for i, temp_col in enumerate(rain_columns):\n        sns.lineplot(df['Date'], df[temp_col], label=temp_col)\n    plt.title(df_name)\n    plt.legend(loc='upper left')\n    plt.show()\n       \n    \nrainfall_overtime(df = Aquifer_Doganella, df_name=\"Aquifer_Doganella\")\nrainfall_overtime(df = Aquifer_Auser, df_name=\"Aquifer_Auser\")\nrainfall_overtime(df = Water_Spring_Amiata, df_name=\"Water_Spring_Amiata\")\nrainfall_overtime(df = Lake_Bilancino, df_name=\"Lake_Bilancino\")\nrainfall_overtime(df = Water_Spring_Madonna_di_Canneto, df_name=\"Water_Spring_Madonna_di_Canneto\")\nrainfall_overtime(df = Aquifer_Luco, df_name=\"Aquifer_Luco\")\nrainfall_overtime(df = Aquifer_Petrignano, df_name=\"Aquifer_Petrignano\")\nrainfall_overtime(df = Water_Spring_Lupa, df_name=\"Water_Spring_Lupa\")\nrainfall_overtime(df = River_Arno, df_name=\"River_Arno\")\n","9ef6448c":"def avg_monthly_temperature(df, df_name):\n    temperature_columns = df.columns[df.columns.str.contains(\"Temp\")]\n    \n    #f, axes = plt.subplots(1, len(temperature_columns), figsize=(25,5))\n    \n    if len(temperature_columns)>3:\n        f, axes = plt.subplots( int(np.ceil(len(temperature_columns)\/3)), 3, figsize=(22.5, 15))\n        axes = axes.flatten()[0:len(temperature_columns)]\n    else:\n        f, axes = plt.subplots(1, len(temperature_columns), figsize=(22.5,5))\n\n    if len(temperature_columns) == 1:\n        axes = [axes]\n        \n        \n    for i, temp_col in enumerate(temperature_columns):\n        \n        temp = df.groupby(['month']).agg(col_name = (temp_col,'mean')).reset_index()\n        temp = temp.rename(columns={\"col_name\":temp_col+'_avg_temp'})\n    \n    \n        #plt.figure(figsize=(15,5))\n        sns.scatterplot(temp.month, temp[temp_col+'_avg_temp'], \n                        size=temp[temp_col+'_avg_temp'], \n                        hue=temp[temp_col+'_avg_temp'], \n                        size_norm=None,\n                        legend=None, \n                        ax=axes[i])\n        axes[i].set_title(df_name + \" - \"+ temp_col)\n        axes[i].set_xlabel(\"Month\")\n        axes[i].set_ylabel(\"Avg. temperature\")\n        plt.xticks(temp.month.unique())\n    \n    \navg_monthly_temperature(df=Aquifer_Doganella, df_name=\"Aquifer_Doganella\")\navg_monthly_temperature(df = Aquifer_Doganella, df_name=\"Aquifer_Doganella\")\navg_monthly_temperature(df = Aquifer_Auser, df_name=\"Aquifer_Auser\")\navg_monthly_temperature(df = Water_Spring_Amiata, df_name=\"Water_Spring_Amiata\")\navg_monthly_temperature(df = Lake_Bilancino, df_name=\"Lake_Bilancino\")\navg_monthly_temperature(df = Water_Spring_Madonna_di_Canneto, df_name=\"Water_Spring_Madonna_di_Canneto\")\navg_monthly_temperature(df = Aquifer_Luco, df_name=\"Aquifer_Luco\")\navg_monthly_temperature(df = Aquifer_Petrignano, df_name=\"Aquifer_Petrignano\")\navg_monthly_temperature(df = Water_Spring_Lupa, df_name=\"Water_Spring_Lupa\")\navg_monthly_temperature(df = River_Arno, df_name=\"River_Arno\")\n","6ca22b1b":"def avg_monthly_rainfall(df, df_name):\n    rain_columns = df.columns[df.columns.str.contains(\"Rainfall\")]\n    \n    # f, axes = plt.subplots(1, len(rain_columns), figsize=(25,5))\n    if len(rain_columns)>3:\n        f, axes = plt.subplots( int(np.ceil(len(rain_columns)\/3)), 3, figsize=(22.5, 15))\n        axes = axes.flatten()[0:len(rain_columns)]\n    else:\n        f, axes = plt.subplots(1, len(rain_columns), figsize=(22.5,5))\n\n    if len(rain_columns) == 1:\n        axes = [axes]\n\n    for i, temp_col in enumerate(rain_columns):\n        temp = df.groupby(['month']).agg(col_name = (temp_col,'mean')).reset_index()\n        temp = temp.rename(columns={\"col_name\":temp_col+'_avg_temp'})\n    \n        sns.lineplot(temp.month, temp[temp_col+'_avg_temp'], \n                     legend=None, \n                     ax=axes[i])\n        sns.scatterplot(temp.month, temp[temp_col+'_avg_temp'], \n                        size=temp[temp_col+'_avg_temp'], \n                        hue=temp[temp_col+'_avg_temp'], \n                        size_norm=None,\n                        legend=None, \n                        ax=axes[i])\n        axes[i].set_xticks(temp.month.unique())\n        axes[i].set_xlabel(\"Month\")\n        axes[i].set_ylabel(\"\")\n        axes[i].set_ylabel(\"Avg Temperature\")\n        axes[i].set_title(df_name + \" - \\n\"+ temp_col)\n        \n    \navg_monthly_rainfall(df = Aquifer_Doganella, df_name=\"Aquifer_Doganella\")\navg_monthly_rainfall(df = Aquifer_Auser, df_name=\"Aquifer_Auser\")\navg_monthly_rainfall(df = Water_Spring_Amiata, df_name=\"Water_Spring_Amiata\")\navg_monthly_rainfall(df = Lake_Bilancino, df_name=\"Lake_Bilancino\")\navg_monthly_rainfall(df = Water_Spring_Madonna_di_Canneto, df_name=\"Water_Spring_Madonna_di_Canneto\")\navg_monthly_rainfall(df = Aquifer_Luco, df_name=\"Aquifer_Luco\")\navg_monthly_rainfall(df = Aquifer_Petrignano, df_name=\"Aquifer_Petrignano\")\navg_monthly_rainfall(df = Water_Spring_Lupa, df_name=\"Water_Spring_Lupa\")\navg_monthly_rainfall(df = River_Arno, df_name=\"River_Arno\")","cd375ed6":"def avg_yearly_monthly_temperature(df, df_name):\n    temperature_columns = df.columns[df.columns.str.contains(\"Temp\")]\n    \n    # f, axes = plt.subplots(1, len(rain_columns), figsize=(25,5))\n    if len(temperature_columns)>3:\n        f, axes = plt.subplots( int(np.ceil(len(temperature_columns)\/3)), 3, figsize=(22.5, 15))\n        axes = axes.flatten()[0:len(temperature_columns)]\n    else:\n        f, axes = plt.subplots(1, len(temperature_columns), figsize=(22.5,5))\n\n    if len(temperature_columns) == 1:\n        axes = [axes]\n\n    for i, temp_col in enumerate(temperature_columns):\n        temp = df.groupby(['year', 'month']).agg(col_name = (temp_col,'mean')).reset_index()\n        temp['Date'] = temp['year'].astype('str') + \"-\" + temp['month'].astype('str')\n        temp[\"Date\"] = pd.to_datetime(temp[\"Date\"])\n        \n        temp = temp.rename(columns={\"col_name\":temp_col+'_avg_temp'})\n        sns.lineplot(temp.Date, temp[temp_col+'_avg_temp'], \n                     legend=None, \n                     ax=axes[i])\n        sns.scatterplot(temp.Date, temp[temp_col+'_avg_temp'], \n                        size=temp[temp_col+'_avg_temp'], \n                        hue=temp[temp_col+'_avg_temp'], \n                        size_norm=None,\n                        legend=None, \n                        ax=axes[i])\n\n        #axes[i].set_xticks(temp.Date)\n        axes[i].tick_params(axis='x', rotation=90)\n        #axes[i].set_xlabel(\"Month\")\n        axes[i].set_ylabel(\"\")\n        axes[i].set_ylabel(\"Avg Temperature\")\n        axes[i].set_title(df_name + \" - \\n\"+ temp_col)\n        \n    \navg_yearly_monthly_temperature(df = Aquifer_Doganella, df_name=\"Aquifer_Doganella\")\navg_yearly_monthly_temperature(df = Aquifer_Auser, df_name=\"Aquifer_Auser\")\navg_yearly_monthly_temperature(df = Water_Spring_Amiata, df_name=\"Water_Spring_Amiata\")\navg_yearly_monthly_temperature(df = Lake_Bilancino, df_name=\"Lake_Bilancino\")\n# avg_yearly_monthly_temperature(df = Water_Spring_Madonna_di_Canneto, df_name=\"Water_Spring_Madonna_di_Canneto\")\navg_yearly_monthly_temperature(df = Aquifer_Luco, df_name=\"Aquifer_Luco\")\navg_yearly_monthly_temperature(df = Aquifer_Petrignano, df_name=\"Aquifer_Petrignano\")\navg_yearly_monthly_temperature(df = Water_Spring_Lupa, df_name=\"Water_Spring_Lupa\")\navg_yearly_monthly_temperature(df = River_Arno, df_name=\"River_Arno\")","4cdd4b38":"def avg_yearly_monthly_rainfall(df, df_name):\n    rain_columns = df.columns[df.columns.str.contains(\"Rainfall\")]\n    \n    # f, axes = plt.subplots(1, len(rain_columns), figsize=(25,5))\n    if len(rain_columns)>3:\n        f, axes = plt.subplots( int(np.ceil(len(rain_columns)\/3)), 3, figsize=(22.5, 15))\n        axes = axes.flatten()[0:len(rain_columns)]\n    else:\n        f, axes = plt.subplots(1, len(rain_columns), figsize=(22.5,5))\n\n    if len(rain_columns) == 1:\n        axes = [axes]\n\n    for i, temp_col in enumerate(rain_columns):\n        temp = df.groupby(['year', 'month']).agg(col_name = (temp_col,'mean')).reset_index()\n        temp['Date'] = temp['year'].astype('str') + \"-\" + temp['month'].astype('str')\n        temp[\"Date\"] = pd.to_datetime(temp[\"Date\"])\n        \n        temp = temp.rename(columns={\"col_name\":temp_col+'_avg_rain'})\n        sns.lineplot(temp.Date, temp[temp_col+'_avg_rain'], \n                     legend=None, \n                     ax=axes[i])\n        sns.scatterplot(temp.Date, temp[temp_col+'_avg_rain'], \n                        size=temp[temp_col+'_avg_rain'], \n                        hue=temp[temp_col+'_avg_rain'], \n                        size_norm=None,\n                        legend=None, \n                        ax=axes[i])\n\n        #axes[i].set_xticks(temp.Date)\n        axes[i].tick_params(axis='x', rotation=90)\n        #axes[i].set_xlabel(\"Month\")\n        axes[i].set_ylabel(\"\")\n        axes[i].set_ylabel(\"Avg Rainfall\")\n        axes[i].set_title(df_name + \" - \\n\"+ temp_col)\n        \n    \navg_yearly_monthly_rainfall(df = Aquifer_Doganella, df_name=\"Aquifer_Doganella\")\navg_yearly_monthly_rainfall(df = Aquifer_Auser, df_name=\"Aquifer_Auser\")\navg_yearly_monthly_rainfall(df = Water_Spring_Amiata, df_name=\"Water_Spring_Amiata\")\navg_yearly_monthly_rainfall(df = Lake_Bilancino, df_name=\"Lake_Bilancino\")\n# avg_yearly_monthly_rainfall(df = Water_Spring_Madonna_di_Canneto, df_name=\"Water_Spring_Madonna_di_Canneto\")\navg_yearly_monthly_rainfall(df = Aquifer_Luco, df_name=\"Aquifer_Luco\")\navg_yearly_monthly_rainfall(df = Aquifer_Petrignano, df_name=\"Aquifer_Petrignano\")\navg_yearly_monthly_rainfall(df = Water_Spring_Lupa, df_name=\"Water_Spring_Lupa\")\navg_yearly_monthly_rainfall(df = River_Arno, df_name=\"River_Arno\")","7676c82e":"def ground_water_depth(df, df_name):\n    depth_columns = df.columns[df.columns.str.contains('Depth')]\n    \n    if len(depth_columns)>3:\n        f, axes = plt.subplots( int(np.ceil(len(depth_columns)\/3)), 3, figsize=(22.5, 15))\n        axes = axes.flatten()[0:len(depth_columns)]\n    else:\n        f, axes = plt.subplots(1, len(depth_columns), figsize=(22.5,5))\n        \n    if len(depth_columns) == 1:\n        axes = [axes]\n\n    for i, depth_col in enumerate(depth_columns):\n        temp = df[depth_col][~df[depth_col].isnull()]\n        sns.distplot(temp.values, kde=False, ax=axes[i])\n        axes[i].set_title(df_name + \"\\n\" + depth_col)\n        \n\nground_water_depth(df=Aquifer_Doganella, df_name=\"Aquifer_Doganella\")\nground_water_depth(df=Aquifer_Auser, df_name=\"Aquifer_Auser\")\nground_water_depth(df=Water_Spring_Amiata, df_name=\"Water_Spring_Amiata\")\n# ground_water_depth(df=Lake_Bilancino, df_name=\"Lake_Bilancino\")\n# ground_water_depth(df=Water_Spring_Madonna_di_Canneto, df_name=\"Water_Spring_Madonna_di_Canneto\")\nground_water_depth(df=Aquifer_Luco, df_name=\"Aquifer_Luco\")\nground_water_depth(df=Aquifer_Petrignano, df_name=\"Aquifer_Petrignano\")\n# ground_water_depth(df=Water_Spring_Lupa, df_name=\"Water_Spring_Lupa\")\n# ground_water_depth(df=River_Arno, df_name=\"River_Arno\")","1e578e21":"def volume_analysis(df, df_name):\n    volume_columns = df.columns[df.columns.str.contains('Volume')]\n    \n    if len(volume_columns)>3:\n        f, axes = plt.subplots( int(np.ceil(len(volume_columns)\/3)), 3, figsize=(22.5, 15))\n        axes = axes.flatten()[0:len(volume_columns)]\n    else:\n        f, axes = plt.subplots(1, len(volume_columns), figsize=(22.5,5))\n        \n    if len(volume_columns) == 1:\n        axes = [axes]\n\n    for i, depth_col in enumerate(volume_columns):\n        temp = df[depth_col][~df[depth_col].isnull()]\n        sns.distplot(temp.values, kde=False, ax=axes[i])\n        axes[i].set_title(df_name + \"\\n\" + depth_col)\n        \n\nvolume_analysis(df=Aquifer_Doganella, df_name=\"Aquifer_Doganella\")\nvolume_analysis(df=Aquifer_Auser, df_name=\"Aquifer_Auser\")\n# volume_analysis(df=Water_Spring_Amiata, df_name=\"Water_Spring_Amiata\")\n# volume_analysis(df=Lake_Bilancino, df_name=\"Lake_Bilancino\")\n# volume_analysis(df=Water_Spring_Madonna_di_Canneto, df_name=\"Water_Spring_Madonna_di_Canneto\")\nvolume_analysis(df=Aquifer_Luco, df_name=\"Aquifer_Luco\")\nvolume_analysis(df=Aquifer_Petrignano, df_name=\"Aquifer_Petrignano\")\n# volume_analysis(df=Water_Spring_Lupa, df_name=\"Water_Spring_Lupa\")\n# volume_analysis(df=River_Arno, df_name=\"River_Arno\")","e888ce0d":"# Year on Year , every months avg temperature and rainfall","fb02010b":"# Missing days \nWe have day ranging from different time periods for each of thed dataset. But do we have data for each day? Let's find out","d97e31a4":"# Let's understand the total null values for each feature in each of the dataset","ffa1aa45":"Looks like almost all of them have missing values in the year 2020. Additionally Aquifer Petrignano has missing values in 2006, Lake_Bilancino in 2002, Aquifer_Auser in 1998\n","5095d215":"# Rainfall varying over time\nAgain similar to temperature over time, let's understand the rainfall over time for each rainfall column in each of the dataset","2d126464":"The plot above is for months averaged for all year. Let's try to try how it varies on a month on month basis for each year","dd0c9521":"As we saw most of the data points are close to 0 or <1, it over shadows the rest of the distribution and all of them are skewed right. Let's re-run and only include rainfall datapoints which are >1.","73c3b3e7":"# Temperature varying over time\nLet's understand the temperature across years in each of the dataset for all the temperature columns\n","e554b74e":"# Find the duplicates","0479fd10":"# Temperature distribution\nLet's understand the ditribution of temperature for each of the temperature columns in each of the dataset","640bfac2":"# Average temperature \nLets check the monthly average temperature","4ed859b4":"# Rainfall distribution\nJust like how we analyzed the temperature, lets do the same thing with rainfall in each of the dataset","09db9a0c":"Okay Let's move ahead and understand how the ground water depth looks like for each of the data sources.","56f3294d":"Avg. Rainfall","4aa386a2":"Looks like we have 8 dates duplicated for Water_Spring_Madonna_di_Canneto","25027f99":"Similarly let's check the volume feature in each of them","0e61378b":"# Data duration\nLet's find the duration of data we have for each of the dataset","4056024b":"Now that we saw there couple of days missing in each of the dataset. Let's take one step further to see when they are having those missing dates, is it random or it follows a pattern.","1e2c204b":"# About this Notebooks\n\nThis is a very simple EDA notebooks where I have focused on the temperature and the rainfall and couple of data quality checks. This is the first Notebook I have written as a competition EDA. Do upvote if you like it.\n\nNote: This Notebook is not complete yet and will be updating over time","a0f472af":"Avg Temperature","b7bad727":"# Monthly avg rainfall\nSimilarly Lets do for the monthly average Rainfall"}}