{"cell_type":{"d12284c4":"code","0cb5dac8":"code","6685557f":"code","6174b786":"code","f7947e09":"code","10e40d76":"code","f13b015d":"code","10bd8aee":"code","fa33ac36":"code","a140324a":"code","33652c7f":"code","47da70ea":"code","a77f8ffe":"code","8b8d8819":"code","91fcb166":"code","16272deb":"code","89538256":"code","5f6d2f91":"code","efe75a0d":"code","39290642":"code","25b177a6":"markdown","486ca9be":"markdown","b5f7a6a9":"markdown","af4496dc":"markdown","3b845e86":"markdown"},"source":{"d12284c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0cb5dac8":"df_train = pd.read_csv(\"\/kaggle\/input\/cat-in-the-dat-ii\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/cat-in-the-dat-ii\/test.csv\")","6685557f":"# Checking for missing value on the training dataset\ndf_train.isna().sum()","6174b786":"# Checking for missing value on the test dataset\ndf_test.isna().sum()","f7947e09":"df_train.info()","10e40d76":"#  Since we have both integers\/floats and strings I will fill integers with np.nan and strings with \"NA\"\nobject\nobject_type = np.dtype(\"O\")\ndf_train = df_train.apply(lambda x: x.fillna(\"NA\") if x.dtype == object_type\n                                       else x.fillna(-1))\ndf_test = df_test.apply(lambda x: x.fillna(\"NA\") if x.dtype == object_type\n                                       else x.fillna(-1))","f13b015d":"from sklearn.preprocessing import LabelEncoder","10bd8aee":"# For simplicity sake I will encode all categorical variables the same way but this is not the way we will do it for our actual submission\ncategorical_columns = df_train.select_dtypes(\"object\")\n\nfor col in categorical_columns:\n    encoder = LabelEncoder()\n    encoded = encoder.fit_transform(df_train[col])\n    df_train[col] = encoded\n    \n# Same for the test\n    \ncategorical_columns = df_test.select_dtypes(\"object\")\n\nfor col in categorical_columns:\n    encoder = LabelEncoder()\n    encoded = encoder.fit_transform(df_test[col])\n    df_test[col] = encoded","fa33ac36":"df_train.head()","a140324a":"from sklearn.model_selection import train_test_split","33652c7f":"X = df_train.drop([\"id\",\"target\"],axis=1)\ny = df_train.target\nX_train, X_test, y_train, y_test = train_test_split(X,y) # Splitting the data to train and test to see how we are doing","47da70ea":"from sklearn.ensemble import RandomForestClassifier # Importing our model of choice","a77f8ffe":"# Notice I'm not using cross validation here but it will be neccesary when we want to make a good submission\nrf = RandomForestClassifier(n_jobs=-1)\nrf.fit(X_train,y_train)","8b8d8819":"preds = rf.predict(X_test)","91fcb166":"from sklearn.metrics import classification_report","16272deb":"print(classification_report(preds,y_test)) # We are not doing well here as we lack precision on target class 1","89538256":"preds = rf.predict(df_test.drop(\"id\",axis=1))","5f6d2f91":"sample = pd.read_csv('\/kaggle\/input\/cat-in-the-dat-ii\/sample_submission.csv')\nsample.head()","efe75a0d":"submission = pd.DataFrame({\n    \"id\" : df_test.id,\n    \"target\" : preds\n})\nsubmission.head()","39290642":"submission.to_csv(\"submission.csv\",index=False)","25b177a6":"# Loading in the dataset","486ca9be":"# Making a submission\n\nWe want ids from y_test and the predictions but to make sure lets check the sample submission","b5f7a6a9":"# Encoding Features\n\nNow that we have dealt with missing values I will move on to encode the features","af4496dc":"We can then submit the prediction after committing the kernel by selecting it from the output files.","3b845e86":"* We happen to have a lot of missing data for both training and testing.\n* For the sake of simplicity I will just replace them with NA.\n* Later, however, we will need to impute the missing variables."}}