{"cell_type":{"30fec792":"code","28b47af7":"code","e2331196":"code","331fb263":"code","df6f4261":"code","50fd3a6a":"code","13a2ccc9":"code","ed8bc028":"code","b6295011":"code","a93f1bc4":"markdown","73fb09d1":"markdown","3c909c84":"markdown","30102d3b":"markdown","8e113566":"markdown","1489c1a4":"markdown","5f7bc2fa":"markdown","67f5b487":"markdown","4d9c81d7":"markdown"},"source":{"30fec792":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","28b47af7":"sources = []\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        sources.append(os.path.join(dirname, filename))\n        \ncar_names = [j.split('\/')[-1].split('.')[0] for j in sources]\ndf = {}\nfor c, s in zip(car_names, sources):\n    df[c] = pd.read_csv(s)","e2331196":"for n in car_names:\n    print(n)\n    print(df[n].columns)","331fb263":"df['hyundi'] = df['hyundi'].rename(columns={'tax(\u00a3)':'tax'})\ndf['unclean cclass'] = df['unclean cclass'].rename(columns={'fuel type':'fuelType', 'engine size':'engineSize',\n                                                            'fuel type2':'fuelType2', 'engine size2':'engineSize2'})","df6f4261":"from sklearn.feature_selection import SelectKBest, f_regression\n\ntrain, test = df['audi'].drop(['price', 'model', 'transmission', 'fuelType'], axis=1), df['audi']['price']\nselector = SelectKBest(f_regression, k=3)\ntrain = selector.fit_transform(train, test)\n\nimportant_cols = []\nfor i in range(3):\n    for j in range(len(df['audi'].columns)):\n        if sum(train[:, i] == df['audi'].iloc[:, j]) == len(df['audi']):\n            important_cols.append(df['audi'].columns[j])\n            \nimportant_cols","50fd3a6a":"df['toyota'].head(3)","13a2ccc9":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef made_up_encoder(dx, param):\n    a = dx[[param, 'price']].groupby(param).mean().sort_values('price', ascending='True').index\n    return a\n\ndef convert_to_num(dx, param, mu):\n    a = []\n    for i in dx[param]:\n        for j, k in enumerate(mu):\n            if i == k: \n                a.append(j)\n                break\n    return a\n\ndef made_up_transformer(ds, params):\n    for p in params:\n        a = made_up_encoder(ds, p)\n        ds[p] = convert_to_num(ds, p, a)\n    return ds\n\ndef the_model(x_train, y_train):\n    model = Sequential()\n    model.add(Dense(10, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(5, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(1, activation='relu'))\n    model.compile(optimizer='adam', loss='mse', metrics=['mae'])\n    model.fit(x_train, y_train, epochs=15)\n    return model\n\ndef process_for_model(dv, params):\n    cols = dv.columns\n    dv_new = pd.DataFrame(made_up_transformer(dv, params))\n    dv_new = pd.DataFrame(MinMaxScaler().fit_transform(dv_new), columns=cols)\n    \n    x_ = dv_new.drop(['price'], axis=1)\n    y_ = dv_new.price\n    \n    x_train, x_valid, y_train, y_valid = train_test_split(x_, y_, test_size=0.2, random_state=42)\n    \n    model_car = the_model(x_train, y_train)\n    \n    return model_car, x_train, x_valid, y_train, y_valid","ed8bc028":"model = {}\nx_train = {}\nx_valid = {}\ny_train = {}\ny_valid = {}\n\ncar_brands = ['audi', 'toyota', 'skoda', 'ford', 'vauxhall', 'bmw', 'vw', 'hyundi', 'merc']\n\nfor c in car_brands:\n    model[c], x_train[c], x_valid[c], y_train[c], y_valid[c] = process_for_model(df[c],\n                                                                                 ['model', 'transmission', 'fuelType'])","b6295011":"from sklearn.metrics import mean_absolute_error\n\nscaler_price = {}\ny_predict = {}\ny_predict_conv = {}\ny_valid_conv = {}\nthe_errors = np.zeros([len(car_brands), 2])\n\nfor c in car_brands:\n    scaler_price[c] = MinMaxScaler().fit(np.array(df[c].price).reshape(-1, 1))\n\nfor i, c in enumerate(car_brands):\n    y_predict[c] = model[c].predict(x_valid[c])\n    \n    y_predict_conv[c] = scaler_price[c].inverse_transform(y_predict[c])\n    y_valid_conv[c] = scaler_price[c].inverse_transform(np.array(y_valid[c]).reshape(-1, 1))\n    \n    the_errors[i, 0] = mean_absolute_error(y_predict[c], y_valid[c])\n    the_errors[i, 1] = mean_absolute_error(y_predict_conv[c], y_valid_conv[c])\n    \ndf_errors = pd.DataFrame(the_errors, index=car_brands, columns=['MAE on scale', 'MAE on real price'])\ndf_errors","a93f1bc4":"# I. Importing Data\n\nFirst and foremost, importing the libraries needed and all the data. We are doing this by using *numpy* and *pandas*.","73fb09d1":"From the result above, we can see that **year, miles per gallon** and **engine size** are the most important features contributing to price respectively. This analysis by the way, only the analysis on Audi car. But we can assume that the result would be the same if we analyzed another brand. ","3c909c84":"# III. Model Building","30102d3b":"Now, we will make the model that can predict the price of a car. The features of this model would be:\n\n**1.** Brand\n\n**2.** Year being bought\n\n**3.** Model\n\n**4.** Transmission\n\n**5.** Mileage\n\n**6.** Fuel Type\n\n**7.** Miles per gallon\n\n**8.** Engine Size\n\nTo make the model more accurate, **we would just make one model for each brand**. These brands have their own inner value that is hard to measure in numbers (we could, but we wouldn't do that here). Beside, making a model for each brand is also an attempt to discard the effect of model's luxury that we can't calculate. \n\nWe also built this by using functions. Later on, when we need to make a new model on new brand, we just need to call this functions. Or even make a loop so we can get all models at once. ","8e113566":"**Here we use Artificial Neural Network as the model.**\n\nThere are some features that are categorical. We can just use Label Encoder. But that's not what we would do here. We realize that this categorical data also contribute to price. There are certain models that are expensive than the other just because of the model. Same thing goes to fuel type. \n\nSo, we decided to do something like Label Encoder but the value that has higher average of price would be labeled higher (BMW X7 would labeled higher than BMW X5 for example).","1489c1a4":"## II. Exploratory Data Analysis\n\nNow, I want to find what features from a car that contribute to its cost the most. We can find this out by doing an ANOVA test. We would make the price as the target, and all other features as the data being analyzed. Here, we also excluded categorical features like *model*, *transmission* and *fuel type*. ","5f7bc2fa":"As you can see above, there are a lot of data from different files. Each file represent different brand. But, when you see the location of these files, you can see that the name of the files are also the brand. Then we just have to manipulate the location of the file, extract the name of the file to name the dataframe that later we will be using. ","67f5b487":"We can see from the result above, that Hyundi is a car brand that our model has the worst prediction on (Hyundi is not the right name, we all know that it's supposed to be Hyundai but whatever).The model predict on average the price of a car can be 11,268 pounds higher or lower, which oviously not a good number.\n\nBut the other model is quiet satisfying. They don't have an error that are huge. ","4d9c81d7":"As you can see above, each dataframe has different name of columns. Even though they actually showed the similar features (*'fuelType'* and *'fuel type'* for example, they both told the data of what fuel a car used). Because of this, we need to change the name of some columns."}}