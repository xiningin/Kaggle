{"cell_type":{"4e86d8d0":"code","246ed312":"code","bdc8cb04":"code","014ac4da":"code","8a859945":"code","e3045d46":"code","a3623cd7":"code","390419ab":"code","f113d0ed":"code","f7e8916a":"code","ff6a90bf":"code","6f18455c":"code","0abc4f63":"code","02a3da35":"code","a6b08306":"code","e2d4b6fa":"code","da7ed97e":"code","9d172ec7":"code","b253c23f":"code","e9e4175f":"code","f22f9800":"code","32195550":"code","c0cf750b":"code","323cbba4":"code","0561091e":"code","8f95c824":"code","e5442b6b":"markdown","a053b053":"markdown","aab6aca9":"markdown","e03b2eb1":"markdown"},"source":{"4e86d8d0":"import numpy as np\nimport pandas as pd\nimport pandas_datareader as pdr\nfrom pandas import Timestamp\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns \nfrom IPython import display\nimport matplotlib.ticker as mticker\nfrom datetime import datetime\nimport warnings\nwarnings.filterwarnings('ignore')\ntry:\n  from stockai import Stock\nexcept:\n  print('instalando stockai....')\n  !pip install --upgrade  stockai\n  from stockai import Stock\ndisplay.clear_output(wait=True)\nplt.style.use(['seaborn-deep'])\nmpl.style.use(['seaborn-deep'])\ndisplay.clear_output()","246ed312":"#@title Par\u00e2metros de pesquisa. \n#@markdown ---\n#@markdown ### Exemplo de ticker: PETR4.SA\nticker = 'PETR4.SA' # @param {type:\"string\"}\n#@markdown ---\nstart_date = '2008-01-01'  #@param {type:\"date\"}\nend_date = '2019-12-31'  #@param {type:\"date\"}","bdc8cb04":"stock = Stock(ticker)\nprices_list = stock.get_historical_prices(start_date, end_date)\nprices_dataframe = pd.DataFrame.from_dict(prices_list)\nhistory_data = prices_dataframe.copy()\nhistory_data.describe()","014ac4da":"#Verificando dados n\u00e3o preenchidos..\nhistory_data.isna().any()","8a859945":"#Removendo dados n\u00e3o preenchidos... (excluindo ruidos)\nhistory_data.dropna(inplace=True)\nhistory_data.isna().any()","e3045d46":"history_data.info()","a3623cd7":"history_data = history_data.sort_values('date')\nhistory_data.head(5)","390419ab":"data = history_data.copy()\ndata['date'] = pd.to_datetime( data['date'], format='%Y\/%m\/%d')\ndata.head(1)","f113d0ed":"plt.clf()\nplt.figure(figsize=(15,2),frameon=False)\nplt.title('AdjClose')\nplt.xlabel('Days', fontsize=14)\nplt.ylabel('AdjClose R$',fontsize=14)\ndata.adjclose.plot(color='C8')\nplt.grid(True)\nplt.show()","f7e8916a":"#Cacl o MACD e sinal\n#short - Exponetial Moving Avage - EMA \n#Fibonacci 0,1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,\nshort_EMA = data.adjclose.ewm(span=8,adjust=False).mean()\n#long - Exponetial Moving Avage - EMA\nlong_EMA = data.adjclose.ewm(span=21,adjust=False).mean()\n#MACD line\nmacd = short_EMA - long_EMA\n#MACD signal\nsignal = macd.ewm(span=5,adjust=False).mean()","ff6a90bf":"#create new col\ndata['macd'] = macd\ndata['macd_signal'] = signal\n# buy and sell an asset\ndef buy_or_sell(rows):\n  buy =[]\n  sell =[]\n  flag = -1\n  for i in range(0, rows.shape[0]):\n    if rows[i][0] > rows[i][1]:\n      sell.append(np.nan)\n      if flag != 1:\n        buy.append(rows[i][2])\n        flag=1\n      else:\n         buy.append(np.nan)\n    elif rows[i][0] < rows[i][1]:\n      buy.append(np.nan)\n      if flag != 0:\n        sell.append(rows[i][2])\n        flag=0\n      else:\n         sell.append(np.nan)\n    else:\n       sell.append(np.nan)\n       buy.append(np.nan)\n  return buy,sell","6f18455c":"d = data[(data.shape[0]-233):].copy()\nplt.clf()\nplt.figure(figsize=(15,4))\nplt.plot(d.index, d.macd, label=ticker+' MACD',color='red')\nplt.plot(d.index, d.macd_signal, label=ticker+' Signal',color='blue')\nplt.legend(loc='upper center')\nplt.xlabel('Days', fontsize=14)\nplt.grid(True)\nplt.show()","0abc4f63":"data.dropna(inplace=True)","02a3da35":"#create buy \ncols=['macd','macd_signal','adjclose']\nrows = data[(data.shape[0]-233):][cols].copy()\nbuy,sell = buy_or_sell(rows.values)\nrows['buy_signal'] = buy\nrows['sell_signal'] = sell\ndata.drop(\"close\", axis = 1, inplace = True)","a6b08306":"#Visually  stock buy and sell signals\nplt.clf()\nplt.figure(figsize=(15,5))\nplt.plot(rows.index, rows.buy_signal, label='Buy',color='green', marker='^', alpha=2)\nplt.plot(rows.index, rows.sell_signal, label='Sell',color='red', marker='*', alpha=2)\nplt.plot(rows.index, rows.adjclose, label=ticker+' Close', alpha=0.7)\nplt.legend(loc='upper center')\nplt.ylabel('Close R$')\nplt.xticks(rotation=45)\nplt.xlabel('Days')\nplt.title('Close Buy & Sell Signals')\nplt.grid(True)\nplt.show()\n#https:\/\/www.youtube.com\/watch?v=kz_NJERCgm8","e2d4b6fa":"#@title ATR - intervalo verdadeiro medio\n#@markdown \u00c9 um indicador de an\u00e1lise t\u00e9cnica que mede a volatilidade do mercado decompondo todo o intervalo de um pre\u00e7o de ativo para esse per\u00edodo. \n#@markdown Especificamente, o ATR \u00e9 uma medida de volatilidade.\n#http:\/\/kaushik316-blog.logdown.com\/posts\/1964522\ndata['tr1'] = data.high - data.low\ndata['tr2'] = abs(data.high - data.adjclose.shift(1))\ndata['tr3'] = abs(data.low - data.adjclose.shift(1))\ndata['true_range'] = data[['tr1','tr2','tr3']].max(axis=1)\ndata[\"tr_avg\"] = data.true_range.rolling(min_periods=13, window=13, center=False).mean()\ndata['atr'] = data[\"tr_avg\"] .ewm(alpha=1\/13, adjust=False).mean()\ndata.drop('tr1',axis=1,inplace=True)\ndata.drop('tr2',axis=1,inplace=True)\ndata.drop('tr3',axis=1,inplace=True)\ndata.drop('tr_avg',axis=1,inplace=True)\ndata.drop('true_range',axis=1,inplace=True)\ndata.atr.fillna(0.001,inplace=True)\n","da7ed97e":"windows =[5, 8, 13, 21]\nfor w in windows:\n  data['ma_{}days'.format(w)] = data.adjclose.rolling(window=w).mean()\n  data['close_{}days'.format(w)] = data.adjclose.shift(w*-1) \n  data['close_{}days_pct'.format(w)] = data.adjclose.pct_change(w)\ndata.dropna(axis = 1, inplace = True)\ndata.isna().any()","9d172ec7":"total=data.isnull().sum().sort_values(ascending=False)\npercent=(data.isnull().sum()\/data.isnull().count()).sort_values(ascending=False)\nmissing=pd.concat([total,percent], axis=1,keys=['Total','%'])\nmissing[(missing['%']>0)].head(30)","b253c23f":"data_corr = data.copy() \ndata_corr = data_corr.reset_index(drop=True)\nplt.clf()\nplt.figure(figsize=(15,5))\ncorr =data_corr.corr(method='pearson')\ncorr = corr[corr>=.2]\nsns.heatmap(corr,annot=True,cmap='YlGnBu',fmt='.1f',linewidths=1)","e9e4175f":"best_corr = corr['adjclose'].sort_values(ascending=False).to_dict()\ncolumns =[]\nfor key,value in best_corr.items():\n  if value > 0 :\n    columns.append(key)\n    print(key,value)","f22f9800":"dataset = data.copy()\ndataset.dropna(inplace=True)\ntrain_len =  int(dataset.shape[0] * 0.8) \ntrain_base = dataset[columns].values\nx_train = train_base\ny_train = dataset[['adjclose']].values.reshape(-1)\n\nx_test = x_train[train_len:]\ny_test = y_train[train_len:]\n\nx_train = x_train[:train_len]\ny_train = y_train[:train_len]\n\n# reshape os dados pois o modelo LSTM  espera receber entradas em 3D\nx_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1], 1))\nx_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1], 1))\n\nx_train.shape, x_test.shape","32195550":"#Modelo LSTM\nimport tensorflow as tf\nfrom tensorflow import keras\nmodel = keras.Sequential()\n\nmodel.add(keras.layers.LSTM(144, return_sequences=True, input_shape=(x_train.shape[1], 1)))\nmodel.add(keras.layers.Dropout(0.1))\nmodel.add(keras.layers.LSTM(89, return_sequences=True))\nmodel.add(keras.layers.Dropout(0.1))\nmodel.add(keras.layers.LSTM(55))\nmodel.add(keras.layers.Dense(1))\nbatch_size = 32\ntrain_size = x_train.shape[0]\nmodel.compile(optimizer='RMSprop', loss='mean_absolute_error', metrics=['mean_absolute_error'])\nhistory = model.fit(x_train, y_train,  verbose=2, epochs=25, batch_size=32)\ndisplay.clear_output()","c0cf750b":"#@title MAE - Erro Absoluto M\u00e9dio\n#@markdown O mae mede a magnitude m\u00e9dia dos erros em um conjunto de previs\u00f5es, sem considerar sua dire\u00e7\u00e3o.\n#@markdown \u00c9 a m\u00e9dia sobre a amostra de teste das diferen\u00e7as absolutas entre previs\u00e3o e observa\u00e7\u00e3o real, onde todas as diferen\u00e7as individuais t\u00eam peso igual.\nepochs = list(range(1,(np.array(history.history['mean_absolute_error']).shape[0])+1))\nplt.clf()\nfig = plt.figure(facecolor='white',figsize=(10,3))\nplt.xlabel('Epochs',fontsize=15)\nplt.ylabel('MAE')\nplt.plot(epochs,history.history['mean_absolute_error'],color='red')\nplt.legend(('MAE','MAE'),fontsize=18)\nplt.grid(True)\nplt.show()","323cbba4":"predict = model.predict(x_test)\nprevisoes = predict.reshape(-1)\n# obter o mean absolute error\nmae = np.mean(np.abs(previsoes - y_test))\nmae","0561091e":"# plot the data\ntrain = dataset[:train_len]\nactual = dataset[train_len:]\nactual['predictions'] = previsoes# pd.Series(np.random.randn(sLength), index=df1.index)\nactual.head(2)","8f95c824":"plt.figure(figsize=(15,15))\nplt.title(\"LSTM - Predict Stock\")\nplt.xlabel('Days', fontsize =18)\nplt.ylabel('Close', fontsize=18)\nplt.grid(True)\nplt.plot(train['adjclose'][2000:])\nplt.plot(actual[['adjclose','predictions']])\nplt.legend(['Train', 'Actual', 'Prediction'], loc='upper center')\nplt.axis([2000,3000,7,31])\nplt.annotate(\"NADA DURA PARA SEMPRE...  ;'-('\", xy=(2700, 21), xytext=(2700,14), arrowprops=dict(facecolor='black', width=1.5, shrink=0.1, headwidth=15))\nplt.show()","e5442b6b":"### Setup... ","a053b053":"### Basic prediction ","aab6aca9":"### Carregando dados...","e03b2eb1":"### Par\u00e2metros"}}