{"cell_type":{"a330fc82":"code","dc77f353":"code","664b20a2":"code","22a8a1a9":"code","783b4a0f":"code","041095a1":"code","3ea04163":"code","029f99a0":"code","27845d49":"code","fe92ab0e":"code","30265287":"code","3e7adb1b":"code","8cdb7c4a":"code","705f19f9":"code","c6e1a639":"code","e5415389":"code","09e19468":"code","496e5306":"code","d8f4f0de":"markdown","da5aacf9":"markdown","d8f2a269":"markdown","ebfa4da0":"markdown","bc0e15fa":"markdown","72848f51":"markdown","38b51ae3":"markdown"},"source":{"a330fc82":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline\n\n# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import datasets","dc77f353":"import tensorflow as tf\n\nfrom tensorflow.keras.models import Sequential, load_model\n\nfrom tensorflow.keras.layers import InputLayer, Dense, Dropout, Flatten\n\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, MaxPool2D\n\nfrom tensorflow.keras.utils import to_categorical\n\nfrom tensorflow.keras.preprocessing.image import load_img, ImageDataGenerator","664b20a2":"from tensorflow.keras.preprocessing import image_dataset_from_directory\nfrom tensorflow.keras.layers.experimental.preprocessing import Rescaling, RandomFlip, RandomRotation, RandomZoom, RandomContrast, RandomTranslation","22a8a1a9":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","783b4a0f":"train_data_dir = \"..\/input\/dummy-astronomy-data\/Cutout Files\"\nimage_size = (299, 299)\n\ndataset = image_dataset_from_directory(\n    train_data_dir,\n    image_size=image_size,\n)","041095a1":"plt.figure(figsize=(15, 25))\nclass_names = dataset.class_names\nfor images, labels in dataset.take(1):\n    for i in range(32):\n        plt.subplot(7, 5, i + 1)\n        plt.imshow(np.array(images[i]).astype(\"uint8\"))\n        plt.title(class_names[labels[i]])\n        plt.axis(\"off\")","3ea04163":"train_data_dir = \"..\/input\/dummy-astronomy-data\/Cutout Files\"\nimage_size = (299, 299)\n\ntrain_dataset = image_dataset_from_directory(\n    train_data_dir,\n    validation_split=0.2,\n    seed=1,\n    subset=\"training\",\n    label_mode=\"categorical\",\n    image_size=image_size\n)\n\nvalidation_dataset = image_dataset_from_directory(\n    train_data_dir,\n    validation_split=0.2,\n    seed=1,\n    subset=\"validation\",\n    label_mode=\"categorical\",\n    image_size=image_size\n)","029f99a0":"data_augmentation = Sequential([\n    RandomFlip(\"horizontal\"),\n    RandomRotation(0.1),\n    RandomZoom((-0.1,0.1)),\n    RandomContrast(0.05),  \n    RandomTranslation(0.1,0.1)\n])","27845d49":"# Mod\u00e8le CNN \nmodel = Sequential()\nmodel.add(InputLayer(input_shape=(299, 299, 3)))\nmodel.add(data_augmentation)\nmodel.add(Rescaling(scale=1.\/255))\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\n#model.add(Dense(2, activation='softmax', kernel_initializer=tf.keras.initializers.Constant(0.01)))\nmodel.add(Dense(2, activation='softmax'))\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer=tf.keras.optimizers.Adam(1e-4), metrics=['accuracy'])","fe92ab0e":"history = model.fit(\n    train_dataset, \n    validation_data=validation_dataset, \n    epochs=20,\n    verbose=1)","30265287":"plot_scores(history)","3e7adb1b":"model = Sequential()\nmodel.add(InputLayer(input_shape=(299, 299, 3)))\nmodel.add(data_augmentation)\nmodel.add(Rescaling(scale=1.\/255))\nmodel.add(Conv2D(input_shape=(224,224,3),filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(2, activation='softmax', kernel_initializer=tf.keras.initializers.Constant(0.01)))\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer=tf.keras.optimizers.Adam(1e-4), metrics=['accuracy'])","8cdb7c4a":"history = model.fit(\n    train_dataset, \n    validation_data=validation_dataset, \n    epochs=10,\n    verbose=1)","705f19f9":"plot_scores(history)","c6e1a639":"from tensorflow.keras.applications import Xception\nxception = Xception(weights='imagenet', include_top=False, input_shape=(299,299,3))#64\nxception.trainable = False","e5415389":"model = Sequential()\nmodel.add(data_augmentation)\nmodel.add(Rescaling(scale=1.\/255))\nmodel.add(xception)\nmodel.add(Flatten())\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(2, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer=tf.keras.optimizers.Adam(1e-4), metrics=['accuracy'])","09e19468":"history = model.fit(\n    train_dataset, \n    validation_data=validation_dataset, \n    epochs=5,\n    verbose=1)","496e5306":"plot_scores(history)","d8f4f0de":"# Mod\u00e8le et entra\u00eenement","da5aacf9":"# Transfer learning","d8f2a269":"# Lecture des images depuis un r\u00e9pertoire","ebfa4da0":"Avec un mod\u00e8le de type VGG16 :","bc0e15fa":"# Fonctions utiles","72848f51":"# Star and galaxy","38b51ae3":"# Cr\u00e9ation des datasets"}}