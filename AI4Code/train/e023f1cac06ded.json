{"cell_type":{"146a60ec":"code","ab00e8c0":"code","e30f4868":"code","14f99ad0":"code","c03b2c54":"code","5dcc3c35":"code","73a44fdb":"code","e2f2437e":"code","2f09d185":"code","1d923aaf":"code","c0e679cd":"code","bf38a51d":"code","674d1a18":"code","25d94e50":"code","d4d2388f":"code","e5a6bd57":"code","9eb0cf30":"code","8019381a":"code","5f7defa7":"code","1b6ebe4b":"code","25d5ba5d":"code","84c35ceb":"code","6415588d":"code","f3cd8307":"code","0a300763":"code","6459e0a7":"code","24d659bd":"code","56d3ec00":"code","5f4c15db":"code","ee9fbc77":"code","5a894fc0":"code","ee431ac1":"code","b3b65c13":"code","4c984db2":"code","69f19e18":"code","cf8cf78d":"code","4ce18de6":"code","ce78bcec":"code","83a751cd":"code","68a44cd8":"code","dbdd018b":"code","21dc1e00":"code","c915e56c":"code","2beb7e1b":"code","f42a257d":"code","bf072a7b":"code","de9b6122":"code","0b0d5bc6":"code","5792ba11":"code","57302de4":"code","62f28928":"code","87f06bff":"code","5c8fab9f":"code","f8ffee2a":"code","4d5038a3":"code","73c781ee":"code","0c7f9e91":"code","08dcef74":"code","be5e14f8":"code","d54fa840":"code","3db72492":"code","fa83835d":"code","8971d834":"code","d9ce48cc":"code","5766f11a":"code","da4eb72c":"code","dc2973cc":"code","53d22497":"code","366eef24":"code","c0d2f9dd":"code","8e788447":"code","c3858ba0":"code","22fac198":"code","be67dacc":"code","628285ee":"code","63d7ecf0":"code","1491f2cf":"code","3c6706da":"code","c6e79070":"code","5cde1daa":"code","4724ab96":"code","be1b32c9":"code","620558ba":"code","55fecd3b":"code","3cdf85c0":"code","d0b92ba8":"code","72202647":"code","7ab63a5c":"code","820ebf2f":"code","c0b25d90":"code","35499eb9":"code","2c15a40f":"code","84292b4f":"code","ee0e4680":"code","d757f13b":"code","a3e32789":"code","fef0e409":"code","bb28ff27":"code","24d46164":"code","113dbe01":"code","06677094":"markdown","21ae8e4a":"markdown","35283b89":"markdown","aa9ab562":"markdown","f1db4823":"markdown","64038961":"markdown","8b037133":"markdown","3961e3ac":"markdown","74466768":"markdown","375d00df":"markdown","82566ca6":"markdown","540734e4":"markdown","bad88d20":"markdown","689fd03d":"markdown","bcadc992":"markdown","28ffd485":"markdown","f0a1f115":"markdown","89dc83a0":"markdown","1a019c55":"markdown","64dbc738":"markdown","f38af852":"markdown","85151dcd":"markdown","ccbcd9c6":"markdown","f7da9b43":"markdown","849a9791":"markdown","a9dbac5e":"markdown","3f417fb5":"markdown","d3e82e72":"markdown","c1c73980":"markdown","5b4f2a5e":"markdown","6fc82426":"markdown","790a2806":"markdown","27929fe3":"markdown","0caa58ff":"markdown","a0c3f4a6":"markdown","fec76139":"markdown","9c1a81f1":"markdown","db02a938":"markdown","9312b4d9":"markdown","6fb51dd8":"markdown","1d6f559b":"markdown","1cea4d43":"markdown","f3a056cc":"markdown","85995974":"markdown","87df94b8":"markdown","c89a046c":"markdown","6e95be18":"markdown","c6942422":"markdown","4400d0d9":"markdown","1df7e09f":"markdown","e2d5b085":"markdown","ffd363e6":"markdown","c5a0361c":"markdown","abbe36a2":"markdown","3869ba7c":"markdown","8309451d":"markdown","ae36dd5f":"markdown","361987ec":"markdown","167ea574":"markdown","3549fbcb":"markdown","3a8423e8":"markdown","18988c3e":"markdown","3c705ea1":"markdown","c0cbf524":"markdown","47c5d81a":"markdown","9ef4bedf":"markdown","e7c2e876":"markdown","9bc16b93":"markdown","f9ec2de2":"markdown","d6719cb9":"markdown","561154f0":"markdown","c72e6428":"markdown","4b094366":"markdown","e585b325":"markdown","c0f08f31":"markdown","cb4fdc7a":"markdown","8e0ee064":"markdown","9d217e33":"markdown","aacc64e5":"markdown","ef3ce889":"markdown","5a7dbebb":"markdown","4b8e6bdb":"markdown","520de154":"markdown","179b0a45":"markdown","4b051516":"markdown","f3f4d8d4":"markdown","09d6b480":"markdown"},"source":{"146a60ec":"# import basic libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ab00e8c0":"# load the datasets\nsteam = pd.read_csv('\/kaggle\/input\/steam-store-games\/steam.csv')\nsteam_description = pd.read_csv('\/kaggle\/input\/steam-store-games\/steam_description_data.csv')\nsteam_media = pd.read_csv('\/kaggle\/input\/steam-store-games\/steam_media_data.csv')\nsteam_requirement = pd.read_csv('\/kaggle\/input\/steam-store-games\/steam_requirements_data.csv')\nsteam_support = pd.read_csv('\/kaggle\/input\/steam-store-games\/steam_support_info.csv')\nsteamspy_tag = pd.read_csv('\/kaggle\/input\/steam-store-games\/steamspy_tag_data.csv')","e30f4868":"steam.head(2)","14f99ad0":"steam_description.head(2)","c03b2c54":"steam_media.head(2)","5dcc3c35":"steam_requirement.head(2)","73a44fdb":"steam_support.head(2)","e2f2437e":"steamspy_tag.head(2)","2f09d185":"# check for missing values\nsteam.isna().sum()","1d923aaf":"steam.duplicated().sum()","c0e679cd":"steam.columns","bf38a51d":"steam.info()","674d1a18":"# examine platforms\nplatforms = pd.DataFrame(steam['platforms'].value_counts())\nplatforms","25d94e50":"# assign values to the subset\nvenn_subsets = (platforms.loc['windows']['platforms'], \n                platforms.loc['mac']['platforms'], \n                platforms.loc['windows;mac']['platforms'], \n                platforms.loc['linux']['platforms'], \n                platforms.loc['windows;linux']['platforms'], \n                platforms.loc['mac;linux']['platforms'], \n                platforms.loc['windows;mac;linux']['platforms'])","d4d2388f":"# plot the veen diagram for platforms\nfrom matplotlib_venn import venn3, venn3_circles\nplt.figure(figsize = (10, 10))\nvd = venn3(subsets = (venn_subsets),\n           set_labels = ('Windows', 'Mac', 'Linux'))\n\n# outline the circles\nvenn3_circles(subsets = venn_subsets,\n              linestyle = 'dashed', linewidth = 1)\n\n# see the ids\n# print(vd.id2idx)\n\n# move 3\nlbl = vd.get_label_by_id('01')\nx, y = lbl.get_position()\nlbl.set_position((x + 0.02, y))\n\n# move 1\nlbl = vd.get_label_by_id('001')\nx, y = lbl.get_position()\nlbl.set_position((x + 0.02, y))\n\n# move 610\nlbl = vd.get_label_by_id('101')\nx, y = lbl.get_position()\nlbl.set_position((x + 0.01, y - 0.01))\n\n# move 610\nlbl = vd.get_label_by_id('110')\nx, y = lbl.get_position()\nlbl.set_position((x + 0.1, y + 0.02))\n\n# move Windows\nlbl = vd.get_label_by_id('A')\nx, y = lbl.get_position()\nlbl.set_position((x, y - 0.5))\n\n# move Mac\nlbl = vd.get_label_by_id('B')\nx, y = lbl.get_position()\nlbl.set_position((x - 0.25, y - 0.12))\n\n# move Linux\nlbl = vd.get_label_by_id('C')\nx, y = lbl.get_position()\nlbl.set_position((x - 0.01 , y + 0.07))\n\n# title\nplt.title('Most Games require Windows Platform')\nplt.show()","e5a6bd57":"# clean the values into lists\nsteam['platforms'] = steam['platforms'].apply(lambda x: x.split(\";\"))\nsteam['platforms']","9eb0cf30":"# clean the values into lists\nsteam['categories'] = steam['categories'].apply(lambda x: x.split(\";\"))\n\n# number of categories for each game\nplt.figure()\nsteam['categories'].apply(lambda x: len(x)).value_counts().plot(kind = 'bar')\nplt.xlabel('Number of Categories')\nplt.ylabel('Frequency')\nplt.title('Most Games only have a few Categories Listed')\nplt.show()","8019381a":"# take a look at the categories\nsteam['categories']","5f7defa7":"# write a function to list all existing labels, and include all occurrences in another list\ndef get_labels(data):\n  unique_labels = []\n  all_labels = []\n\n  for i in range(len(data)):\n    for label in data[i]:\n      all_labels.append(label)\n      if label not in unique_labels:\n        unique_labels.append(label)\n  \n  print('Number of unique labels:', len(unique_labels))\n  print('Number of total labels applied:', len(all_labels))\n  \n  return unique_labels, all_labels","1b6ebe4b":"# list all existing categories, and include all occurrences in another list\nunique_cats, all_cats = get_labels(steam['categories'])\nunique_cats[:10]","25d5ba5d":"# visualize the top 10 categories\nplt.figure(figsize = (14, 10))\npd.Series(all_cats).value_counts()[:10].plot(kind = 'barh')\nplt.gca().invert_yaxis()\nplt.xlabel('Frequency')\nplt.title('Visualize the Frequency of Categories')\nplt.show()","84c35ceb":"# encode categories\ncats = steam['categories']\ncats = cats.apply(lambda x: str(x).strip('[]'))\ncats = cats.str.get_dummies(sep=', ')","6415588d":"# clean the column names\ncol_rename_dict = {}\nfor col_name in cats.columns:\n  col_rename_dict[col_name] = col_name.strip(\"'\")\ncats.rename(columns = col_rename_dict, inplace = True)","f3cd8307":"# filter the categories about player modes\nplayer_cols = [col for col in cats.columns if \"layer\" in col] # exclude p due to case sensitivity\nplayer_cols","0a300763":"# multi-player categories \nmulti = cats[player_cols[:-1]]\n\n# when Multi-player is 0, other sub-categories could still be 1\nmulti[multi['Multi-player'] == 0].sum(axis = 0)","6459e0a7":"# when Multi-player is 1, more than one sub-categories could be 1\nmulti[multi['Multi-player'] == 1].sum(axis = 1).value_counts()","24d659bd":"# when one of the multi-player subcategories is 1, the Multi-player column is 1\nplayer_cats = cats[player_cols].copy()\nplayer_cats.loc[(player_cats['Cross-Platform Multiplayer'] == 1) | (player_cats['Local Multi-Player'] == 1) | (player_cats['Online Multi-Player'] == 1), 'Multi-player'] = 1","56d3ec00":"player_cats = player_cats[['Multi-player', 'Single-player']]\nplayer_cats.sum()","5f4c15db":"# single player only\ns = len(player_cats[(player_cats['Single-player'] == 1) & (player_cats['Multi-player'] == 0)])\ns","ee9fbc77":"# single & multi player\ns_m = len(player_cats[(player_cats['Single-player'] == 1) & (player_cats['Multi-player'] == 1)])\ns_m","5a894fc0":"# multi player only\nm = len(player_cats[(player_cats['Single-player'] == 0) & (player_cats['Multi-player'] == 1)])\nm","ee431ac1":"# no player mode indicated\nlen(player_cats[(player_cats['Single-player'] == 0) & (player_cats['Multi-player'] == 0)])","b3b65c13":"# venn diagram\nfrom matplotlib_venn import venn2 \nvenn2(subsets = (s, s_m, m), set_labels = ('Single-player', 'Multi-player'))\nplt.title('Most Games Support Single-player Mode')\nplt.show()","4c984db2":"# clean the values into lists\nsteam['steamspy_tags'] = steam['steamspy_tags'].apply(lambda x: x.split(\";\"))","69f19e18":"# number of categories for each game\nplt.figure()\nsteam['steamspy_tags'].apply(lambda x: len(x)).value_counts().plot(kind = 'bar')\nplt.xlabel('Number of Tags')\nplt.ylabel('Frequency')\nplt.title('Most Games Have 3 Tags')\nplt.show()","cf8cf78d":"# list all existing tags, and include all occurrences in another list\nunique_tags, all_tags = get_labels(steam['steamspy_tags'])\nunique_tags[:10]","4ce18de6":"pd.Series(all_tags).value_counts(ascending = True)","ce78bcec":"# visualize the top 10 tags\nplt.figure(figsize = (14, 10))\npd.Series(all_tags).value_counts().head(10).plot(kind = 'barh')\nplt.gca().invert_yaxis()\nplt.xlabel('Frequency')\nplt.title('Visualize the Frequency of Tags')\nplt.show()","83a751cd":"# clean the values into lists\nsteam['genres'] = steam['genres'].apply(lambda x: x.split(\";\"))","68a44cd8":"# number of categories for each game\nplt.figure()\nsteam['genres'].apply(lambda x: len(x)).value_counts().sort_index().plot(kind = 'bar')\nplt.xlabel('Number of Genres')\nplt.ylabel('Frequency')\nplt.title('Most Games Have Less than 5 Genres Listed')\nplt.show()","dbdd018b":"# list all existing genres, and include all occurrences in another list\nunique_genres, all_genres = get_labels(steam['genres'])\nunique_genres[:10]","21dc1e00":"# visualize the genres\nplt.figure(figsize = (16, 10))\npd.Series(all_genres).value_counts().head(10).plot(kind = 'barh')\nplt.gca().invert_yaxis()\nplt.xlabel('Frequency')\nplt.title('Visualize the Frequency of Genres')\nplt.show()","c915e56c":"# split the lower and upper bound into a temperatory df\ntmp = pd.DataFrame()\ntmp[['lower', 'upper']] = steam['owners'].str.split('-', expand = True)\ntmp['lower'] = tmp['lower'].astype('int')\ntmp['upper'] = tmp['upper'].astype('int')\ntmp['owner_median'] = (tmp['lower'] + tmp['upper']) \/ 2\ntmp","2beb7e1b":"# insert the owner_median column into steam df\nsteam['owner_median'] = tmp['owner_median']\nsteam.head(2)","f42a257d":"# distribution of owner_median\nplt.figure()\nsteam['owner_median'].value_counts().sort_index().plot(kind = 'barh')\nplt.gca().invert_yaxis()\nplt.xlabel('Frequency')\nplt.ylabel('owner_median')\nplt.title('Most Games are Owned by < 20k Players')\nplt.show()","bf072a7b":"# top games by owners\nsteam.sort_values(by = 'owner_median', ascending = False).head(6)[['name', 'owner_median']]","de9b6122":"# convert release_date to datetime format\nsteam['release_date'] = steam['release_date'].astype('datetime64')","0b0d5bc6":"# release date by year\nplt.figure()\nsteam['release_date'].dt.year.value_counts().sort_index().plot(kind = 'line')\nplt.ylabel('Releases')\nplt.title('Releases Grow by Years')\nplt.show()","5792ba11":"# release date by year, exclude 2019\nplt.figure()\nsteam['release_date'].dt.year.value_counts().sort_index()[:-1].plot(kind = 'line')\nplt.ylabel('Releases')\nplt.title('Releases Grow by Years')\nplt.show()","57302de4":"# release date by month, exclude 2019\nplt.figure()\nsteam[steam['release_date'] < '2019-01-01']['release_date'].dt.month.value_counts().sort_index().plot(kind = 'line')\nplt.xlabel('Month')\nplt.ylabel('Releases')\nplt.title('Most Games are Released around October')\nplt.show()","62f28928":"# plot by daily releases over time\nrelease_counts = steam['release_date'].value_counts().sort_index()\n\nplt.figure()\nrelease_counts.plot()\nplt.ylabel('Daily Releases')\nplt.title('Not Many Releases Before 2006')\nplt.show()","87f06bff":"# plot from 2006\nplt.figure()\nrelease_counts['2006-01-01':].plot()\nplt.ylabel('Daily Releases')\nplt.title('Too Messy to Specify Trends')\nplt.show()","5c8fab9f":"from datetime import datetime\n# reformat the release date to year-week\nrelease_year_week = steam['release_date']\nrelease_year_week = release_year_week.apply(lambda x: x.strftime(\"%Y-%W\"))\nrelease_year_week = release_year_week[release_year_week >= '2006-01'] # start from 2006\nrelease_year_week","f8ffee2a":"# plot releases by year-week\nplt.figure(figsize = (10, 8))\nrelease_year_week.value_counts().sort_index().plot()\nplt.ylabel('Releases')\nplt.title('Still A Little Messy')\nplt.show()","4d5038a3":"# reformat the release date\nrelease_year_month = steam['release_date']\nrelease_year_month = release_year_month.apply(lambda x: x.strftime(\"%Y-%m\"))\nrelease_year_month = release_year_month[release_year_month >= '2006-01'] # start from 2006\nrelease_year_month","73c781ee":"# plot releases by year-month\nplt.figure(figsize = (12, 8))\nrelease_year_month.value_counts().sort_index()[:-1].plot() # Exclude the last month since the data was collected before the end of that month.\nplt.ylabel('Releases')\nplt.title('Good Overall Growth')\nplt.show()","0c7f9e91":"# highest daily release amount\nsteam['release_date'].value_counts().sort_values(ascending = False).head()","08dcef74":"# categorical columns\ncat_cols = ['english', 'developer', 'publisher', 'required_age']\n\n# required_age is numeric but here it better suits as a categorical column","be5e14f8":"# plot all categorical columns\n# note: only the top 10 frequent categories are plotted\nfor col in cat_cols:\n  plt.figure(figsize = (10, 8))\n  tmp = steam[col].value_counts()\n  tmp.head(10).plot(kind = 'barh')\n  plt.gca().invert_yaxis()\n  plt.xlabel(col)\n  plt.ylabel('Frequency')\n  plt.title(col)\n  plt.show()\n  print(f'Total number of categories in {col}: {len(tmp)}')\n  print(tmp.head(10))\n  print('\\n')","d54fa840":"# numeric columns\nnum_cols = ['achievements', 'positive_ratings', 'negative_ratings', 'average_playtime', 'median_playtime', 'price']","3db72492":"# visualize all numeric columns\nfor col in num_cols:\n  plt.figure(figsize = (10, 8))\n  steam[col].plot(kind = 'hist', bins = 50)\n  plt.xlabel(col)\n  plt.ylabel('Frequency')\n  plt.title(col)\n  plt.show()\n  print('\\n')","fa83835d":"# write a function to remove outliers\n# In the definition of box plots, values < Q1 - 1.5 IQR and values > Q3 + 1.5 IQR are the outliers\ndef remove_outliers(data):\n  Q1 = data.quantile(0.25)\n  Q3 = data.quantile(0.75)\n  IQR = Q3-Q1\n  data_outlier_excluded = data[(data >= Q1 - (1.5 * IQR)) & (data <= Q3 + (1.5 * IQR))]\n  return data_outlier_excluded","8971d834":"# games with 0 achievements\nlen(steam[steam['achievements'] == 0])","d9ce48cc":"# at least 1 achievements\nsteam[steam['achievements'] != 0]['achievements'].sort_values(ascending = False)","5766f11a":"# check the game with the most achievements\nsteam.loc[12604]","da4eb72c":"# exclude games with 0 achievements\nnone_0_ach = steam[steam['achievements'] != 0]['achievements']\n\n# exclude the outliers\nach_ex = remove_outliers(none_0_ach)\n\n# plot the distribution of achievements\nplt.figure()\nach_ex.plot(kind = 'hist', bins = 50)\nplt.xlabel('Number of Achievements')\nplt.title('Most Games have <70 Achievements')\nplt.show()\n\n# conclusion\nprint('total games:', len(steam['achievements']))\nprint('games with non-zero achievements:', len(none_0_ach))\nprint('games with non-zero achievements, outliers excluded:', len(ach_ex))","dc2973cc":"# top 10 game by positive ratings\nsteam.sort_values(by = 'positive_ratings', ascending = False).head(10)[['name', 'positive_ratings']]","53d22497":"# plot the distribution of positive ratings\nplt.figure()\nsteam['positive_ratings'].value_counts().sort_index().plot()\nplt.xlabel('Positive Ratings')\nplt.ylabel('Frequency')\nplt.title('Need to Exclude the Outliers')\nplt.show()","366eef24":"# exclude outliers from positive_ratings\npos_r = steam['positive_ratings']\npos_r_ex = remove_outliers(pos_r)\n\n# plot the distribution of positive ratings\nplt.figure()\npos_r_ex.plot(kind = 'hist', bins = 50)\nplt.xlabel('Positive Ratings')\nplt.ylabel('Frequency')\nplt.title('Most Games are not Frequently Rated')\nplt.show()\n\n# conclusion\nprint('total games:', len(pos_r))\nprint('games with positive ratings outliers excluded:', len(pos_r_ex))","c0d2f9dd":"steam.sort_values(by = 'negative_ratings', ascending = False).head(10)[['name', 'negative_ratings']]","8e788447":"# ratio of positive\/negative ratings\npos_neg_ratio = steam['positive_ratings'] \/ (steam['negative_ratings'] + 1) # +1 to avoid zero divisions\ntop_ratios_id = pos_neg_ratio.sort_values(ascending = False).head(5).index\n\nsteam.loc[top_ratios_id]","c3858ba0":"# check 0 values in average_playtime\nprint('total games:', steam.shape[0])\nprint('games with average playtime != 0:', steam[steam['average_playtime'] != 0].shape[0])","22fac198":"# calculation\n6170\/27075","be67dacc":"# top 10 games with longest average playtime\nsteam.sort_values(by = 'average_playtime', ascending = False).head()","628285ee":"# exclude games with average playtime as 0\nnone_0_avg_pt = steam[steam['average_playtime'] != 0]['average_playtime']\n\n# exclude the outliers\navg_pt_ex = remove_outliers(none_0_avg_pt)\n\n# plot the distribution of average playtimes\nplt.figure()\navg_pt_ex.plot(kind = 'hist', bins = 50)\nplt.xlabel('Average Playtime')\nplt.title('Most Games are played for Less than 10 Hours')\nplt.show()\n\n# conclusion\nprint('total games:', len(steam))\nprint('games with non-zero average_playtime:', len(none_0_avg_pt))\nprint('games with average_playtime outliers excluded:', len(avg_pt_ex))","63d7ecf0":"# check 0 values in median_playtime\nprint('total games:', steam.shape[0])\nprint('games with median playtime != 0:', steam[steam['median_playtime'] != 0].shape[0])","1491f2cf":"# top 10 games with longest median playtime\nsteam.sort_values(by = 'median_playtime', ascending = False).head()","3c6706da":"# exclude games with median playtime as 0\nnone_0_med_pt = steam[steam['median_playtime'] != 0]['median_playtime']\n\n# exclude the outliers\nmed_pt_ex = remove_outliers(none_0_med_pt)\n\n# plot the distribution of median playtimes\nplt.figure()\nmed_pt_ex.plot(kind = 'hist', bins = 50)\nplt.xlabel('Median Playtime')\nplt.title('Median Playtime Has Similar Distribution As Average Playtime')\nplt.show()\n\n# conclusion\nprint('total games:', len(steam))\nprint('games with non-zero median_playtime:', len(none_0_med_pt))\nprint('games with median_playtime outliers excluded:', len(med_pt_ex))","c6e79070":"# free games\nsteam[steam['price'] == 0].shape[0]","5cde1daa":"# pricy games\nsteam.sort_values(by = 'price', ascending = False).head()","4724ab96":"# exclude the outliers in price\nprice = steam['price']\nprice_ex = remove_outliers(price)\n\n# plot the distribution of price\nplt.figure()\nprice_ex.plot(kind = 'hist', bins = 20)\nplt.xlabel('Price')\nplt.title('Most Games Cost Less than \u00a316')\nplt.show()\n\n# conclusion\nprint('total games:', len(steam))\nprint('games with price outliers excluded:', len(price_ex))\nprint('\\n')\nprint('Note: the price data was collected in \u00a3.')","be1b32c9":"# plot the distribution of prices for games with non-zero playtime\nplt.figure()\nremove_outliers(steam[steam['average_playtime'] != 0]['price']).plot(kind = 'hist', bins = 20)\nplt.xlabel('Price')\nplt.title('Broader Price Range for Games with Longer Playtime')\nplt.show()","620558ba":"# calculate revenue by release date, owner_median, and price for each game\nsales = pd.DataFrame()\nsales['revenue'] = steam['owner_median'] * steam['price'] \n\n# label the release year-month of each game\nsales['release_month'] = steam['release_date'].apply(lambda x: x.strftime(\"%Y-%m\"))\nsales","55fecd3b":"# plot sales amount by release week\nplt.figure(figsize = (12, 8))\nsales.groupby('release_month').sum()['revenue'].plot()\nplt.ylabel('Revenue')\nplt.title('Revenue by Release Time')\nplt.show()","3cdf85c0":"# attach the name column to find the games with highest revenue\nsales.index = steam['name']\nsales.sort_values(['revenue'], ascending = False).head()","d0b92ba8":"# visualize the games with highest revenue\nplt.figure()\nsales.sort_values(by = 'revenue', ascending = False).head(10).plot(kind = 'barh')\nplt.gca().invert_yaxis()\nplt.xlabel('Revenue')\nplt.title('PUBG Has the Highest Revenue')\nplt.show()","72202647":"# exclude PUBG to zoom in on the rest\nplt.figure()\nsales.sort_values(by = 'revenue', ascending = False).head(11)[1:].plot(kind = 'barh')\nplt.gca().invert_yaxis()\nplt.xlabel('Revenue')\nplt.title('Games with Highest Revenue, Excluding PUBG')\nplt.show()","7ab63a5c":"print('Number of games with detailed_description and about_the_game the same:')\nlen(steam_description[steam_description['detailed_description'] == steam_description['about_the_game']])","820ebf2f":"# compare the length of detailed\/short description\nprint('The detailed description is this many times longer than the short description:')\nround((steam_description['detailed_description'].str.len() \/ steam_description['short_description'].str.len()).mean(), 1)","c0b25d90":"# clean the descriptions\n\n# strip html\nimport re\nsteam_description['short_description'] = steam_description['short_description'].apply(lambda x: re.sub('<[^<]+?>', '', x))\nsteam_description['short_description'] = steam_description['short_description'].apply(lambda x: x.replace('&quot', '').replace('\\r\\n', ''))\n\n# convert to lowercase\nsteam_description['short_description'] = steam_description['short_description'].apply(lambda x: x.lower())","35499eb9":"# vectorize the words (top 100 with highest frequency)\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(stop_words = 'english', min_df = 5, max_features = 100)\ncv.fit(steam_description['short_description'])\nshort_des_transformed = cv.transform(steam_description['short_description'])","2c15a40f":"# extract the information and put it in a dataframe\nshort_des_vectorized = pd.DataFrame(columns = cv.get_feature_names(), \n                                    data = short_des_transformed.toarray())\nshort_des_vectorized.head(2)","84292b4f":"# count the occurrence of each word (token)\ntokens = short_des_vectorized.sum(axis = 0).sort_values(ascending = False)\ntokens","ee0e4680":"# join the tokens into one string\ntokens_str = ' '.join(tokens.index)\ntokens_str","d757f13b":"# create a word cloud\nfrom wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\nwordcloud = WordCloud(width = 800, height = 800,\n                background_color ='white',\n                stopwords = stopwords,\n                min_font_size = 10).generate(tokens_str)\n \n# plot the word cloud image                      \nplt.figure(figsize = (12, 12), facecolor = None)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.tight_layout(pad = 0)\n \nplt.show()","a3e32789":"# id of the top 100 games by positive ratings\ntop_100_id = steam.sort_values(by = 'positive_ratings', ascending = False).head(100)['appid']\ntop_100_id.values","fef0e409":"# short description of the top 100 games\ntop_100_des = pd.merge(top_100_id, steam_description, left_on = 'appid', right_on = 'steam_appid', how = 'left')['short_description']\ntop_100_des","bb28ff27":"# vectorize the top 100 words with highest frequency\ncv = CountVectorizer(stop_words = 'english', min_df = 5, max_features = 100)\ncv.fit(top_100_des)\ntop_100_des_transformed = cv.transform(top_100_des)\n\n# extract the information and put it in a data frame to make it easier to see what has occured\ntop_100_des_vectorized = pd.DataFrame(columns = cv.get_feature_names(), \n                                    data = top_100_des_transformed.toarray())\ntop_100_des_vectorized.head(2)","24d46164":"# count the occurrence of each word (token)\ntokens = top_100_des_vectorized.sum(axis = 0).sort_values(ascending = False)\ntokens","113dbe01":"# visualize the tags\nplt.figure(figsize = (14, 10))\nsteamspy_tag.sum(axis =0).sort_values(ascending = False)[1:].head(10).plot(kind = 'barh')\nplt.gca().invert_yaxis()\nplt.xlabel('Frequency')\nplt.title('Popular Steamspy Tags')\nplt.show()","06677094":"### `release_date`","21ae8e4a":"#### `price`","35283b89":"# Conclusion","aa9ab562":"Does look more informative! We'll use the description of the top games in final visualization, and remove some stopwords like `game`, `play`, `players`.","f1db4823":"About half of the games have no achievement system.\n\nMost games have <70 achievements, while the champion has 9000+ achievements.\n\nThere's a small peak around 12 on the histogram.","64038961":"Could do a bit EDA but may focus on more important features.","8b037133":"# EDA for each dataset","3961e3ac":"#### highest daily release amount\n\nOn 2018-07-13, 64 games were releasedy!","74466768":"Not many releases before 2006.","375d00df":"Data gathered in May 2019, so 2019 has incomplete data (unexpectedly low releases).","82566ca6":"# Steam Games Visualization\n\nThis notebook performs EDA on the datasets downloaded from https:\/\/www.kaggle.com\/nikdavis\/steam-store-games. These datasets were scraped in May 2019 and contain information for more than 27,000 games on the Steam platform.\n\nThe purpose of this notebook is to explore existing features in the datasets, in order to find the most representative ones for the following visualization in Tableau.","540734e4":"Um. Need to exclude outliers to make it human-interpretable.","bad88d20":"#### `negative_ratings`","689fd03d":"### Further EDA","bcadc992":"#### `achievements`","28ffd485":"Could do some NLP on the entire set or the most popular ones.","f0a1f115":"Some words should be removed from the list to improve the image quality e.g. `game`, `player`..\n\nLet's try for the top 100 popular games.","89dc83a0":"The top game in the list has 3000 hours on average?? The fans are invested..\n\nThese are not very popular games though. Probably the kind of game for fasinated players to spend forever in a sandbox.","1a019c55":"Note: some popular games are cheap\/free, but there's payable DLC or upgrade available and we don't have data on how many owners purchased these contents. e.g. CSGO","64dbc738":"### Split strings into lists","f38af852":"The term INDIE is used with the meaning \"Independent\" to refer to movies, music and video games created without financial backing from major companies.\n\nhttps:\/\/www.cyberdefinitions.com\/definitions\/INDIE.html","85151dcd":"The detailed description is on average 9.6x longer than the short one.","ccbcd9c6":"Show some most popular tags.\n\nShow popular tags for top games.\n\nFit a classifier model (optional, since this is a visualization project).","f7da9b43":"Links to images. Not very helpful.","849a9791":"There are too many outliers to get a meaningful distribution. Let's remove the outliers.","a9dbac5e":"Most games are cheap.. \n\nBut also, most games are not played much. \n\nWhat's the distribution of prices for games with non-zero playtime?","3f417fb5":"#### `owners`","d3e82e72":"Most games are supported by the Windows platform. \n\nThere are some overlapping between categories. We can use a Veen diagram to visualize.","c1c73980":"#### `positive_ratings`","5b4f2a5e":"It's a puzzle game! You get achievements by finishing parts of the puzzle..amazing","6fc82426":"#### `genres`\n\nPartly overlapping with `steamspy tags`","790a2806":"Most games are released around October, while very few games are released in June. ","27929fe3":"## `steam_description`","0caa58ff":"Well, people don't seem to like to pay for such pricy games!","a0c3f4a6":"### Numeric Columns","fec76139":"#### `median_playtime`","9c1a81f1":"Still a little messy. Let's try year-month.","db02a938":"Very few games have no player mode indicated. They are currently not included in the visualization.","9312b4d9":"#### By year","6fb51dd8":"Similar pattern. 2 peaks. One at 0 and dropping (buy a game, start playing, refun in 2 hrs). One at 4 hrs (fun games!)\n\nNot a lot of games get played for very long. which probably fits steam's design: a \"market\" that people can keep buying new games they like.","1d6f559b":"Um. The data is extremely skewed. Let's exclude the outliers and zoom in..","1cea4d43":"Oh wow.. only 22% of the games actually get played for a noticeable amount of time.","f3a056cc":"In this section, we'll take a glance at each dataset and decide which ones are the most useful for our following visualization.","85995974":"There are 3 description columns in this table.\n\n`detailed_description` and `about_the_game` are mostly identical.","87df94b8":"#### `steamspy_tags`\n\nThis columns could contain the same data as the table `steamspy_tag`.","c89a046c":"Surprisingly, there's only 29 categories applied on 27,000+ games.. ","6e95be18":"After excluding the games with unnoticable playtime, the upper bound of price distribution is higher. \n\nAs long as the game is interesting, players will be willing to spend more time as well as money on it!","c6942422":"### NLP \nLet's do NLP (natural language processing) on `short_description` to get the most popular words in the descriptions.","4400d0d9":"Now the distribution:","1df7e09f":"## `steam`","e2d5b085":"This looks better.\n\nMost Games are not frequently rated though.","ffd363e6":"Let's look at the top 10 games with the most positive ratings.","c5a0361c":"No missing values in this dataset.","abbe36a2":"The information in tables `steam_description` and `steamspy_tag` will be first processed by a python file. The output files will then be visualized in Tableau.\n\nSee my Git Hub for the full work:\n\nhttps:\/\/github.com\/aaw707\/Steam-Games-Visualization","3869ba7c":"#### By trend over time","8309451d":"Similar result for average & median playtime.","ae36dd5f":"Too messy! Let's count by year-week.","361987ec":"Most games have 3 tags.","167ea574":"Cleaning plan:\n\n`platforms`: split into lists\n\n`categories`: split into lists\n\n`steamspy_tags`: split into lists\n\n`genres`: split into lists\n\n`owners`: get upper and lower bound, and then the median of them\n\n`release_date`: convert to datetime format","3549fbcb":"The classes in `english` and `required_age` are very unbalanced. Almost all games are in English, and almost all games have no age limits. \n\nCan show the top publishers and developers in final visualizations.","3a8423e8":"#### `platforms`","18988c3e":"No duplicates in this dataset.","3c705ea1":"#### Revenue by release date","c0cbf524":"Next, we'll look at all the categorical columns together.","47c5d81a":"#### By month","9ef4bedf":"Not very useful.\n\nAt most link some support url for the top games, if they are listed.","e7c2e876":"## `steamspy_tag`\nSimilar to the `steamspy tags` column in `steam`. Only one should be included in the final visualization.","9bc16b93":"Now these games have high ratios but are not very popular..\n\nShould still consider the total number of ratings at ranking!\n\nFinal solution: rank with number of positive ratings, but show negative ratings for these games at the same time. \n\nSee the Tableau file for visualization.","f9ec2de2":"It's PUBG!\n\nThere isn't a very obvious trend of \"games become more and more porfitable\" over the years.. but maybe the yearly sales are going up. We just don't have the data for that. We can only estimate based on the release date, but people buy good games after they are released for years. ","d6719cb9":"### Categorical Columns","561154f0":"The most popular category is `Single-player`. There's more categories about players: `Multi-player`, `Local Multi-Player`, etc. \n\nCan we classify the games by the single\/multiple player mode?","c72e6428":"Table `steam` has the most information valuable for visualization. The Tableau visualization will include: \n* `categories`: most popular categories\n* `genres`: most popular genres\n* `owners`: most owned game, distribution of game owners\n* `release_date`: total games released, releases by year, highest daily releases\n* `developer`: developers released most games\n* `publisher`: publishers released most games\n* `positive_ratings` & `negative_ratings`: average pos:neg ratio, top games by positive ratings with negative ratings shown at the side\n* `average_playtime` & `median_playtime`: most played game, distribution of playtime\n* total revenue, revenue by release date\n\nTable `steam_description` can be studied with NLP to extract the most frequent words used in popular games, in order to show possible trends.\n* Columns `detailed_description` and `about_the_game` are mostly identical\n* `short_description` is more concise and will be used for extraction.\n\nTable `steamspy_tag` will be used to visualize the most popular tags voted by community.\n","4b094366":"#### `average_playtime` \n\nin minutes","e585b325":"#### `categories`","c0f08f31":"## `steam_media`, `steam_requirement`, `steam_support`\nNot useful for this project.","cb4fdc7a":"#### Sales amount by game","8e0ee064":"What happened at the end of 2017??","9d217e33":"Top 10 with the most negative ratings","aacc64e5":"The champion has the longest average and median playtime.\n\nThe median playtime is generally longer than the average playtime.","ef3ce889":"Therefore, we'll just combine the sub-categories for multi-player games.","5a7dbebb":"11864 games don't include any achivement.\n\nThere is a game with 9821 achievements! What is it?","4b8e6bdb":"A LOT of overlap. Mostly because of popularity.\n\nWe should look at the ratio instead.","520de154":"There are 18 columns in this dataset.\n\nPrimary ID: `appid` \n\n","179b0a45":"# Initial Examination","4b051516":"Is `owners` an indicator for sales? If yes, split it to 2 columns: upper and lower bound, and convert the datatype to numeric.\n\nGames can be evaluated by `owners`, `positive_ratings`, `negative_ratings`, `average_playtime` and `median_playtime`.\n\nWill do EDA on all columns and split the tags, etc.","f3f4d8d4":"There's one category for single-player games and 4 for multi-player games.\n\nHowever, the sub-categories of mult-player don't add up to `Multi-player`. ","09d6b480":"This looks good!!"}}