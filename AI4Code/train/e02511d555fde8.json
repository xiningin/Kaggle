{"cell_type":{"3a549602":"code","d99b93b3":"code","77126c29":"code","236cf62c":"code","b4405f5c":"code","06b48990":"code","c1d1273b":"code","114f9f3e":"code","c20de4bb":"code","e19767e5":"code","573e6cd2":"code","14141787":"code","5b610bd1":"code","4b8aa72d":"code","ba509782":"code","edf4515f":"code","11e70064":"code","99ab3435":"code","8b10d03c":"code","75f43589":"code","0e39e4ef":"code","0a6f99e8":"code","c0c40c43":"code","d6dc4d4f":"code","64525bff":"code","1c19fb79":"code","dc4a94a2":"code","2e6b0061":"code","4aecf764":"code","8aee99e2":"code","24a825d7":"code","bb8637de":"code","89aac25b":"code","20a676cd":"code","ff044562":"markdown","b838b1c2":"markdown","e19fc80c":"markdown","6041fbce":"markdown","06487a7c":"markdown","afd8b7ea":"markdown","44ae156e":"markdown","8be4b1a5":"markdown","5cd8b9aa":"markdown","1b17d9c6":"markdown","b9a33137":"markdown","496b7a3e":"markdown","e04f10cf":"markdown","c2ded376":"markdown","f0ffb2c0":"markdown","faa4a26f":"markdown","dfafb4ee":"markdown","d80fa48b":"markdown","4d8aa7cb":"markdown","409262cc":"markdown","b4e6baac":"markdown","d1e6d8d4":"markdown","5e63d314":"markdown","634d3e8a":"markdown","3684f07c":"markdown","32db876e":"markdown","ae96bbb4":"markdown","288b89f6":"markdown","35bd1097":"markdown","28bdd27d":"markdown","6efd2e83":"markdown","5db9d83d":"markdown","b3b8ce15":"markdown","05ad64f3":"markdown","811d7266":"markdown","6601bfbc":"markdown","127eda4d":"markdown","9e53e68d":"markdown","04f0354a":"markdown","6ee32a60":"markdown","8e7cfda6":"markdown","077764d9":"markdown","d927cc76":"markdown"},"source":{"3a549602":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv(\"..\/input\/acea-water-prediction\/Aquifer_Petrignano.csv\")\nprint(df.shape)\ndf.head()","d99b93b3":"df.isnull().sum()","77126c29":"df = df[df.Rainfall_Bastia_Umbra.notna()].reset_index(drop=True)\ndf.isnull().sum()","236cf62c":"sns.heatmap(df.corr(),annot=True)","b4405f5c":"df = df.drop(['Depth_to_Groundwater_P24', 'Temperature_Petrignano'], axis=1)","06b48990":"df.columns = ['date', 'rainfall', 'depth_to_groundwater', 'temperature', 'drainage_volume', 'river_hydrometry']","c1d1273b":"targets = ['depth_to_groundwater']\nfeatures = [feature for feature in df.columns if feature not in targets]\ndf.head()","114f9f3e":"df.info()","c20de4bb":"from datetime import datetime,date\ndf['date'] = pd.to_datetime(df['date'], format = '%d\/%m\/%Y')\ndf.head()","e19767e5":"f, ax = plt.subplots(nrows=5, ncols=1, figsize=(15, 25))\n\nfor i, column in enumerate(df.drop('date', axis=1).columns):\n    sns.lineplot(x=df['date'], y=df[column].fillna(method='ffill'), ax=ax[i], color='dodgerblue')\n    ax[i].set_title('Feature: {}'.format(column), fontsize=14)\n    ax[i].set_ylabel(ylabel=column, fontsize=14)\n                      \n    ax[i].set_xlim([date(2009, 1, 1), date(2020, 6, 30)])   ","573e6cd2":"df = df.sort_values(by='date')\ndf['delta'] = df['date'] - df['date'].shift(1)","14141787":"df['delta'].sum(),df['delta'].count()","5b610bd1":"# setting rows, columns and size \nf, ax = plt.subplots(nrows=2, ncols=1, figsize=(15, 15))\n\n\n# hydrometry having original values and hydrometry having zoeros replaced with nan\nold_hydrometry = df['river_hydrometry'].copy()\ndf['river_hydrometry'] = df['river_hydrometry'].replace(0, np.nan)\n\n# ploting for old and new hydrometry\nsns.lineplot(x=df['date'], y=old_hydrometry, ax=ax[0], color='darkorange', label='original')\nsns.lineplot(x=df['date'], y=df['river_hydrometry'].fillna(np.inf), ax=ax[0], color='dodgerblue', label='modified')\nax[0].set_title('Feature: Hydrometry', fontsize=14)\nax[0].set_ylabel(ylabel='Hydrometry', fontsize=14)\nax[0].set_xlim([date(2009, 1, 1), date(2020, 6, 30)])\n\nold_drainage = df['drainage_volume'].copy()\ndf['drainage_volume'] = df['drainage_volume'].replace(0, np.nan)\n\nsns.lineplot(x=df['date'], y=old_drainage, ax=ax[1], color='darkorange', label='original')\nsns.lineplot(x=df['date'], y=df['drainage_volume'].fillna(np.inf), ax=ax[1], color='dodgerblue', label='modified')\nax[1].set_title('Feature: Drainage', fontsize=14)\nax[1].set_ylabel(ylabel='Drainage', fontsize=14)\nax[1].set_xlim([date(2009, 1, 1), date(2020, 6, 30)])","4b8aa72d":"f,ax = plt.subplots(nrows=1,ncols=1,figsize=(16,5))\nsns.heatmap(df.T.isna(),cmap='Blues')\nax.set_title('Missing Values',fontsize=16)\n\nfor tick in ax.yaxis.get_major_ticks():\n    tick.label.set_fontsize(14)\nplt.show()\n    ","ba509782":"f, ax = plt.subplots(nrows=4,ncols=1,figsize=(15,12))\n\n## we take np.inf to differentiate with \nsns.lineplot(x=df['date'],y=df['drainage_volume'].fillna(0),ax = ax[0],color = 'darkorange',label = 'modified')\nsns.lineplot(x=df['date'],y=df['drainage_volume'].fillna(np.inf),ax = ax[0],color = 'dodgerblue',label = 'original')\nax[0].set_title('filling Nan values with zeros')\n\nmean_drain = df['drainage_volume'].mean()\nsns.lineplot(x=df['date'],y=df['drainage_volume'].fillna(mean_drain),ax = ax[1],color = 'darkorange',label = 'modified')\nsns.lineplot(x=df['date'],y=df['drainage_volume'].fillna(np.inf),ax = ax[1],color = 'dodgerblue',label = 'original')\nax[0].set_title('filling Nan values with meanvalue')\n\n\nlast_value = df['drainage_volume'].ffill()\nsns.lineplot(x=df['date'],y=df['drainage_volume'].fillna(last_value),ax = ax[2],color = 'darkorange',label = 'modified')\nsns.lineplot(x=df['date'],y=df['drainage_volume'].fillna(np.inf),ax = ax[2],color = 'dodgerblue',label = 'original')\nax[0].set_title('filling Nan values with last value')\n\ninterpolate = df['drainage_volume'].interpolate()\nsns.lineplot(x=df['date'],y=df['drainage_volume'].fillna(interpolate),ax = ax[3],color = 'darkorange',label = 'modified')\nsns.lineplot(x=df['date'],y=df['drainage_volume'].fillna(np.inf),ax = ax[3],color = 'dodgerblue',label = 'original')\nax[0].set_title('filling Nan values with interpolation')\n\nfor i in range(4):\n    ax[i].set_xlim([date(2019, 5, 1), date(2019, 10, 1)])\n    \nplt.tight_layout()\nplt.show()","edf4515f":"df['drainage_volume'] = df['drainage_volume'].interpolate()\ndf['river_hydrometry'] = df['river_hydrometry'].interpolate()\ndf['depth_to_groundwater'] = df['depth_to_groundwater'].interpolate()","11e70064":"f, ax = plt.subplots(nrows=3,ncols=2,figsize = (16,12))\n\nsns.lineplot(x=df['date'],y=df['drainage_volume'],ax = ax[0,0], color = 'dodgerblue')\nax[0,0].set_title('drainage_volume',fontsize =14)\n\nresampling = df[['date','drainage_volume']].resample('7D',on='date').sum().reset_index(drop = False)\nsns.lineplot(x=resampling['date'],y=resampling['drainage_volume'],ax = ax[1,0], color = 'dodgerblue')\nax[1,0].set_title('weekly_drainage_volume',fontsize =14)\n\nresampling = df[['date','drainage_volume']].resample('M',on='date').sum().reset_index(drop = False)\nsns.lineplot(x=resampling['date'],y=resampling['drainage_volume'],ax = ax[2,0], color = 'dodgerblue')\nax[2,0].set_title('Monthly_drainage_volume',fontsize =14)\n\nfor i in range(3):\n    ax[i, 0].set_xlim([date(2009, 1, 1), date(2020, 6, 30)])\n\nsns.lineplot(x=df['date'],y=df['temperature'],ax = ax[0,1], color = 'dodgerblue')\nax[0,1].set_title('temperature',fontsize =14)\n\nresampling = df[['date','temperature']].resample('7D',on='date').mean().reset_index(drop = False)\nsns.lineplot(x=resampling['date'],y=resampling['temperature'],ax = ax[1,1], color = 'dodgerblue')\nax[1,1].set_title('weekly_temperature',fontsize =14)\n\nresampling = df[['date','temperature']].resample('M',on='date').mean().reset_index(drop = False)\nsns.lineplot(x=resampling['date'],y=resampling['temperature'],ax = ax[2,1], color = 'dodgerblue')\nax[2,1].set_title('Monthly_temperature',fontsize =14)\n\nfor i in range(3):\n    ax[i, 1].set_xlim([date(2009, 1, 1), date(2020, 6, 30)])\nplt.show()","99ab3435":"downsammple = df[['date',\n                 'depth_to_groundwater', \n                 'temperature',\n                 'drainage_volume', \n                 'river_hydrometry',\n                 'rainfall']].resample('7D',on='date').mean().reset_index(drop = False)\n\ndf = downsammple.copy()","8b10d03c":"# rolling windo is the number of weeks per year\nrolling_window = 52\nf , ax = plt.subplots(nrows=2,ncols=1,figsize= (16,16))\n\nsns.lineplot(x=df['date'],y=df['drainage_volume'],ax= ax[0], color = 'dodgerblue')\nsns.lineplot(x=df['date'],y=df['drainage_volume'].rolling(rolling_window).mean(),ax= ax[0], color = 'black',label = 'roling_mean')\nsns.lineplot(x=df['date'],y=df['drainage_volume'].rolling(rolling_window).std(),ax= ax[0], color = 'orange',label = 'roling_std')\nax[0].set_title('Depth to Groundwater: Non-stationary \\n non-constant mean & non-constant variance', fontsize=14)\nax[0].set_ylabel(ylabel='Drainage Volume', fontsize=14)\nax[0].set_xlim([date(2009, 1, 1), date(2020, 6, 30)])\n\nsns.lineplot(x=df['date'], y=df['temperature'], ax=ax[1], color='dodgerblue')\nsns.lineplot(x=df['date'], y=df['temperature'].rolling(rolling_window).mean(), ax=ax[1], color='black', label='rolling mean')\nsns.lineplot(x=df['date'], y=df['temperature'].rolling(rolling_window).std(), ax=ax[1], color='orange', label='rolling std')\nax[1].set_title('Temperature: Non-stationary \\nvariance is time-dependent (seasonality)', fontsize=14)\nax[1].set_ylabel(ylabel='Temperature', fontsize=14)\nax[1].set_xlim([date(2009, 1, 1), date(2020, 6, 30)])\n\nplt.tight_layout()\nplt.show()","75f43589":"from statsmodels.tsa.stattools import adfuller\n\nresult = adfuller(df['depth_to_groundwater'].values)\nresult","0e39e4ef":"f,ax = plt.subplots(nrows=3,ncols=2,figsize = (15,9))\n\ndef visualisation(series,title,ax):\n    result = adfuller(series)\n    sig_lvl = 0.05\n    adf_stat = result[0]\n    p_val = result[1]\n    crit_val_1 = result[4]['1%']\n    crit_val_5 = result[4]['5%']\n    crit_val_10 = result[4]['10%']\n    if (p_val < sig_lvl) & ((adf_stat < crit_val_1)):\n        linecolor = 'forestgreen' \n    elif (p_val < sig_lvl) & (adf_stat < crit_val_5):\n        linecolor = 'orange'\n    elif (p_val < sig_lvl) & (adf_stat < crit_val_10):\n        linecolor = 'red'\n    else:\n        linecolor = 'purple'\n    sns.lineplot(x=df['date'],y=series,ax=ax,color=linecolor)\n    ax.set_title(f'ADF Statistic {adf_stat:0.3f}, p-value: {p_val:0.3f}\\nCritical Values 1%: {crit_val_1:0.3f}, 5%: {crit_val_5:0.3f}, 10%: {crit_val_10:0.3f}', fontsize=14)\n    ax.set_ylabel(ylabel=title, fontsize=14)\n    \nvisualisation(df['rainfall'].values, 'Rainfall', ax[0, 0])\nvisualisation(df['temperature'].values, 'Temperature', ax[1, 0])\nvisualisation(df['river_hydrometry'].values, 'River_Hydrometry', ax[0, 1])\nvisualisation(df['drainage_volume'].values, 'Drainage_Volume', ax[1, 1])\nvisualisation(df['depth_to_groundwater'].values, 'Depth_to_Groundwater', ax[2, 0])\n\n","0a6f99e8":"df['depth_to_groundwater_log'] = np.log(abs(df['depth_to_groundwater']))\nf, ax = plt.subplots(nrows=1, ncols=2, figsize=(20, 6))\nvisualisation(df['depth_to_groundwater_log'], 'Transformed \\n Depth to Groundwater', ax[0])\n\nsns.distplot(df['depth_to_groundwater_log'], ax=ax[1])","c0c40c43":"# First Order Differencing\nts_diff = np.diff(df['depth_to_groundwater'])\ndf['depth_to_groundwater_diff_1'] = np.append([0], ts_diff)\n\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(15, 6))\nvisualisation(df['depth_to_groundwater_diff_1'], 'Differenced (1. Order) \\n Depth to Groundwater', ax)","d6dc4d4f":"df['year'] = pd.DatetimeIndex(df['date']).year\ndf['month'] = pd.DatetimeIndex(df['date']).month\ndf['days'] = pd.DatetimeIndex(df['date']).day\ndf['day_of_year'] = pd.DatetimeIndex(df['date']).dayofyear\ndf['week_of_year'] = pd.DatetimeIndex(df['date']).weekofyear\ndf['quarter'] = df['month']%12\/\/3+1","64525bff":"df[['year','month','days','day_of_year','week_of_year','quarter']]","1c19fb79":"f,ax = plt.subplots(nrows=1,ncols=1,figsize=(20,3))\n\nsns.lineplot(x=df['date'],y=df['month'],color = 'dodgerblue')\nax.set_xlim([date(2009, 1, 1), date(2020, 6, 30)])\nplt.show()","dc4a94a2":"month_in_year = 12\ndf['month_sin'] = np.sin(2*np.pi*df['month']\/month_in_year)\ndf['month_cos'] = np.cos(2*np.pi*df['month']\/month_in_year)\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(6, 6))\n\nsns.scatterplot(df.month_sin,df.month_cos)","2e6b0061":"from statsmodels.tsa.seasonal import seasonal_decompose\n\ncore_columns =  [\n    'rainfall', 'temperature', 'drainage_volume', \n    'river_hydrometry', 'depth_to_groundwater'\n]\n\nfor column in core_columns:\n    decomp = seasonal_decompose(df[column], period=52, model='additive', extrapolate_trend='freq')\n    df[f\"{column}_trend\"] = decomp.trend\n    df[f\"{column}_seasonal\"] = decomp.seasonal","4aecf764":"f,ax = plt.subplots(nrows=4,ncols=2,figsize=(16,10))\n\nfor i, j in enumerate(['temperature', 'depth_to_groundwater']):\n    result = seasonal_decompose(df[j],freq=52,model='additive',extrapolate_trend='freq')\n    ax[0,i].set_title('Decomposition of {}'.format(j),fontsize=16)\n    \n    result.observed.plot(ax=ax[0,i],legend=False,color='dodgerblue')\n    ax[0,i].set_ylabel('observed',fontsize=14)\n    \n    result.trend.plot(ax=ax[1,i], legend=False, color='dodgerblue')\n    ax[1,i].set_ylabel('Trend', fontsize=14)\n    \n    result.seasonal.plot(ax=ax[2,i], legend=False, color='dodgerblue')\n    ax[2,i].set_ylabel('Seasonal', fontsize=14)\n    \n    result.resid.plot(ax=ax[3,i], legend=False, color='dodgerblue')\n    ax[3,i].set_ylabel('Residual', fontsize=14)\n    ","8aee99e2":"weeks_in_month = 4\n\nfor column in core_columns:\n    df[f'{column}_seasonal_shift_b_2m'] = df[f'{column}_seasonal'].shift(-2 * weeks_in_month)\n    df[f'{column}_seasonal_shift_b_1m'] = df[f'{column}_seasonal'].shift(-1 * weeks_in_month)\n    df[f'{column}_seasonal_shift_1m'] = df[f'{column}_seasonal'].shift(1 * weeks_in_month)\n    df[f'{column}_seasonal_shift_2m'] = df[f'{column}_seasonal'].shift(2 * weeks_in_month)\n    df[f'{column}_seasonal_shift_3m'] = df[f'{column}_seasonal'].shift(3 * weeks_in_month)","24a825d7":"f,ax = plt.subplots(nrows=5,ncols=1,figsize=(20,15))\n\nfor i,j in enumerate(core_columns):\n    sns.lineplot(x=df['date'],y=df[j+'_seasonal'],ax=ax[i],color= 'dodgerblue')\n    ax[i].set_ylabel(j)\n    ax[i].set_xlim([date(2017,9,30),date(2020,6,30)])\nplt.tight_layout()\n    ","bb8637de":"f,ax = plt.subplots(nrows=2,ncols=1,figsize=(20,15))\n\nsns.heatmap(df[core_columns].corr(),vmin=-1,vmax=1,annot=True,cmap='coolwarm_r',ax=ax[0])\nax[0].set_title('Correlation Matrix of Core Features', fontsize=16)\n\nshifted_cols = [\n    'depth_to_groundwater_seasonal',         \n    'temperature_seasonal_shift_b_2m',\n    'drainage_volume_seasonal_shift_2m', \n    'river_hydrometry_seasonal_shift_3m'\n]\n\nsns.heatmap(df[shifted_cols].corr(),vmin=-1,vmax=1,annot=True,cmap='coolwarm_r',ax=ax[1])\nax[1].set_title('Correlation Matrix of shifted Features', fontsize=16)","89aac25b":"from pandas.plotting import autocorrelation_plot\n\nautocorrelation_plot(df['depth_to_groundwater_diff_1'])\nplt.show()","20a676cd":"from statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf\n\nf, ax = plt.subplots(nrows=2, ncols=1, figsize=(16, 8))\n\nplot_acf(df['depth_to_groundwater_diff_1'], lags=100, ax=ax[0])\nplot_pacf(df['depth_to_groundwater_diff_1'], lags=100, ax=ax[1])\n\nplt.show()","ff044562":"We can see there is still some null values in the features\n\nAlso we can see that  there are some zero values in river_hydrometry and drainage volume which we can repalce with nan values and filling them afterwords ","b838b1c2":"Now, we are going to check for each variable:\n\nThe p-value is less than 0.05\nCheck the range of the ADF statistic compared with critical_values","e19fc80c":"#### Differencing","6041fbce":"### Unit Root Test\n\nUnit Root test is a charachteristic of time series that make time series Non stationary, ADF is a Unit root test. A unit root is said to be exist in a time series if Value of alpha =1 in time series \n\nY\nt\n=\n\u03b1\nY\nt\n\u2212\n1\n+\n\u03b2\nX\ne\n+\n\u03f5","06487a7c":"Chronological Order of timeseries data must be checked and preprocessed. Similarly Equidistant of the date also needed to be check.\n\nIn order make in chronological order we  sort the data. similarly to check for equidistant we see the difference between the current and previous date or you can use a constant time and find the diffenrence in date","afd8b7ea":"### Autocorrelation Analysis","44ae156e":"After the timeseries has been stationarised by differencing. we will be plotting for AR(Auto Correlation) and MA (Moving Average) in order to correct any auto correlation in the time series.\n\nAutocorrelation Function (ACF): P = Periods to lag for eg: (if P= 3 then we will use the three previous periods of our time series in the autoregressive portion of the calculation) P helps adjust the line that is being fitted to forecast the series. P corresponds with MA parameter\n\nPartial Autocorrelation Function (PACF): D = In an ARIMA model we transform a time series into stationary one(series without trend or seasonality) using differencing. D refers to the number of differencing transformations required by the time series to get stationary. D corresponds with AR parameter.\nAutocorrelation plots help in detecting seasonality.","8be4b1a5":"## Feature Engineering\n\n","5cd8b9aa":"## Stationarity","1b17d9c6":"From the above we can see \n\ndepth_to_groundwater: Reaches maximum on May and drops minimum on October\n\ntemperature: Reaches Maximum on October and drops Minimum on January\n\ndrainage_volume: Reaches Maximum on June and drops Minumum on July\n\nriver_hydrometry: Reaches its maximum around February\/March and its minimum around September","b9a33137":"From the above we can see that features don't have constant mean and standard deviation","496b7a3e":"Differencing can be done in different orders:\n\nFirst order differencing: linear trends with  \nz\ni\n=\ny\ni\n\u2212\ny\ni\n\u2212\n1\n \nSecond-order differencing: quadratic trends with  \nz\ni\n=\n(\ny\ni\n\u2212\ny\ni\n\u2212\n1\n)\n\u2212\n(\ny\ni\n\u2212\n1\n\u2212\ny\ni\n\u2212\n2\n)\n \nand so on...","e04f10cf":"### Transformation","c2ded376":"##### Smoothing data \/ Resampling","f0ffb2c0":"Resampling the data can provide additional information. there are two types of resampling\n\n-  Upsampling : upsampling is making weekly wise data into day wise data\n-  downsampling : downsapling is making day wise data into weekly or mothly data\n\nin this we will use .resample() method to resample","faa4a26f":"From the above we can see Depth_to_Groundwater_P24 and Depth_to_Groundwater_P25 are highly correlated so we ca remove one of the feature.\n\nsimilarly for Temperature_Bastia_Umbra and Temperature_Petrignano we can remove one of the feature","dfafb4ee":"From the above we can see that best option is to interpolate ","d80fa48b":"Removing rows having null values, from the below output we can see that similar kind of null values are in all the column\nalso resetting index","4d8aa7cb":"shift function will shift the value of the date one record below its previous record based on the argumet given inside the shift function.\n\n ","409262cc":"# Exploratory Data Analysis","b4e6baac":"This stationarity check can be done with three methods\n\n- Visually: by ploting in a graph and checking trends and seasonality\n- Statistical: spliting time series and camparing the mean and variance of the data\n- Staitstical test: Augmented Dickey Fuller test ","d1e6d8d4":"now we can see date column is in Object type we have to change it to date time index for analysis","5e63d314":"Lag is maily used find the correlation between the features","634d3e8a":"From the above we can see that zeros are replaced by null values which is mentioned in orange lines ","3684f07c":"Changing column name for our understanding","32db876e":"#### Handling Missing Values","ae96bbb4":"# Time Series Part-1 (data visualisation) is explained clearly in the below link kindly check and then continue here\n\n#### https:\/\/www.kaggle.com\/nandha13\/time-series-part-1-data-visualization","288b89f6":"lets plot the data ans extrct some knowledge","35bd1097":"Sationarity means dataset is sattionary when the data properties does not depend on time. the data with sesonality and trends are said to be non stationary. since the trends and sesonality affects the data at different at diffrent timeseries.\n\nStationarity defines the time series as\n\n* constant mean and mean is not time-dependent\n* constant variance and variance is not time dependent \n* constant covariance and covariance is not time dependent\n\n","28bdd27d":"we can see that the equdistant between each record has been maintained ","6efd2e83":"# TimeSeries \ud83d\udcc8 ARIMA, Prophet, ADF, PACF... \ud83d\udcda Beginner to Pro\n\nIn this project we will work on how to preprocess, how to review the data in time series","5db9d83d":"###### Missing values handling\n\n1. filling NaN values with zeros or Outliers.\n2. filling NaN values with last value\n3. filling NaN values with mean value\n4. filling NaN values with  .interpolate()","b3b8ce15":"#### Chronological Order and Equidistant Timestamps","05ad64f3":"# Time Series - Part 2 (Data Preprocessing)","811d7266":"add Codeadd Markdown\nWe also will be working on some commonly used timeseries topics\n\nACF\/PACF\nARIMA\nAuto-ARIMA\nProphet\nAugumented Dickey Fuller (ADF)\nadd Codeadd Markdown","6601bfbc":"If the data is not staionary bh=ut we want to use ARIMA models. we can do that transforming the data.The two most common methods to transform series into stationarity ones are:\n\nTransformation: e.g. log or square root to stabilize non-constant variance\n\nDifferencing: subtracts the current value from the previous\n","127eda4d":"From the above heatmap gives insights on null values and we can see that  hydrometry having more null values","9e53e68d":"###### The above steps are already detalied explined in my data visualisation notebook","04f0354a":"### Agumented Dicky Fuller(ADF)\n\nAgumeented Dicky Fuller is a type of Statistical test called as Unit root test. we can give them by.\n\n**Null Hypothesis(H0)**: Time Series has unit Root (Non- Stationary)\n**Alternate Hypothesis(H1)**: Time Series not has unit Root (Stationary)\n\nIf the null hypothesis can be rejected, we can conclude that the time series is stationary.\n\nThere are two ways to rejects the null hypothesis:\n\nOn the one hand, the null hypothesis can be rejected if the p-value is below a set significance level. The defaults significance level is 5%\n\n**p-value > significance level (default: 0.05)**: Fail to reject the null hypothesis (H0), the data has a unit root and is non-stationary.\n**p-value <= significance level (default: 0.05)**: Reject the null hypothesis (H0), the data does not have a unit root and is stationary.\nOn the other hand, the null hypothesis can be rejects if the test statistic is less than the critical value.\n\n**ADF statistic > critical value**: Fail to reject the null hypothesis (H0), the data has a unit root and is non-stationary.\n**ADF statistic < critical value**: Reject the null hypothesis (H0), the data does not have a unit root and is stationary.","6ee32a60":"### Encoding Cyclic Features\n\nfrom the above we can see that new time features are cyclical, fo example if we take feature month. it cycles from 1 to 12 having a difference of  1 month for each month. if you consider for two year then diffrence between the year end month december and the next year starting month january will be 12-1 = 11 ","8e7cfda6":"## TimeSeries Decomposition\n\nTimeseries Decomposition is making time series more understandable with the following terms Level,Trend,Sesonality,Noise. By decomposing the timeseries data.\n\nLevel: The average value in the series.\nTrend: The increasing or decreasing value in the series.\nSeasonality: The repeating short-term cycle in the series.\nNoise: The random variation in the series.\n\nDecomposition provides a useful abstract model for thinking about time series generally and for better understanding problems during time series analysis and forecasting.\n\nAll series have a level and noise. The trend and seasonality components are optional.\n\nIt is helpful to think of the components as combining either additively or multiplicatively:\n\nAdditive:  \ny\n(\nt\n)\n=\nL\ne\nv\ne\nl\n+\nT\nr\ne\nn\nd\n+\nS\ne\na\ns\no\nn\na\nl\ni\nt\ny\n+\nN\no\ni\ns\ne\n \nMultiplicative:  \ny\n(\nt\n)\n=\nL\ne\nv\ne\nl\n\u2217\nT\nr\ne\nn\nd\n\u2217\nS\ne\na\ns\no\nn\na\nl\ni\nt\ny\n\u2217\nN\no\ni\ns\ne\n \nIn this case we are going to use function seasonal_decompose() from the statsmodels library.","077764d9":"## Lag","d927cc76":"From the above we can see that down sampling weekly wise will make the analysis easy with less data loss"}}