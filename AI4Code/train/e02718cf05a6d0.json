{"cell_type":{"2a98411d":"code","e7f32300":"code","c8fd1712":"code","3bf00ba9":"code","f4ddde93":"code","29d2db92":"code","809ca8f7":"code","3f899580":"code","17690740":"code","42ada225":"code","6e388b4c":"code","95bd2ae0":"code","7ec06532":"code","a5e1e739":"code","45c3e98e":"code","b43732f2":"code","8b5a3020":"code","eb8b806f":"code","1a4ba184":"code","644bdfe0":"code","1d1dc6e7":"code","f76b4aa1":"code","3601c625":"code","7f1bc461":"code","249addca":"code","f22dd23c":"code","82029670":"code","9f13ef50":"code","f84285ef":"code","9d01ed2a":"code","afdf8752":"code","3d204542":"code","26a33261":"code","b7af3fb8":"code","6d25a372":"code","2b509003":"code","76e72d47":"code","a00d4dc6":"code","f24c01c8":"code","8e417c56":"code","66257f3c":"markdown","de800c60":"markdown","b2dc5e9e":"markdown","abb5a0d6":"markdown","1fec8480":"markdown","eb4b1e8b":"markdown","9babaf91":"markdown","6d666224":"markdown","3c13e111":"markdown","43a325f0":"markdown","ab23e16c":"markdown","14a29903":"markdown","00744f41":"markdown","b29b0451":"markdown","ee046fb5":"markdown","c5923196":"markdown","3d71468a":"markdown","14d84174":"markdown","9e50f64f":"markdown","cef9dcac":"markdown","2971d2e2":"markdown","4fb345e5":"markdown","d63466c3":"markdown","071ba554":"markdown","a08a4da1":"markdown","759411f9":"markdown","d515f6ef":"markdown","ea2cb4e3":"markdown","8e69f1f9":"markdown","79c84a5e":"markdown","5b194b19":"markdown","3b76d9e4":"markdown","5611a2c4":"markdown","1089005a":"markdown","a9829589":"markdown","e063e456":"markdown","48b5dcf4":"markdown","93317c06":"markdown","7166e696":"markdown","c73e4e8a":"markdown","9d840b63":"markdown","74f1769e":"markdown","c18ac40e":"markdown","6193df14":"markdown","4cba69f1":"markdown","35eccf7c":"markdown","b8ec4119":"markdown","a93d90b6":"markdown","c336829f":"markdown","a3f8d763":"markdown","57535539":"markdown","653caa8a":"markdown","12910e56":"markdown"},"source":{"2a98411d":"!pip install ..\/input\/sacremoses\/sacremoses-master \n!pip install ..\/input\/transformers\/transformers-master ","e7f32300":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pathlib import Path \n\nimport os\n\nimport torch\nimport torch.optim as optim\n\nimport random \n\n# fastai\nfrom fastai import *\nfrom fastai.text import *\nfrom fastai.callbacks import *\n\n# classification metric\nfrom scipy.stats import spearmanr\n\n# transformers\nfrom transformers import PreTrainedModel, PreTrainedTokenizer, PretrainedConfig\nfrom transformers import RobertaForSequenceClassification, RobertaTokenizer, RobertaConfig","c8fd1712":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)","3bf00ba9":"def seed_all(seed_value):\n    random.seed(seed_value) # Python\n    np.random.seed(seed_value) # cpu vars\n    torch.manual_seed(seed_value) # cpu  vars\n    \n    if torch.cuda.is_available(): \n        torch.cuda.manual_seed(seed_value)\n        torch.cuda.manual_seed_all(seed_value) # gpu vars\n        torch.backends.cudnn.deterministic = True  #needed\n        torch.backends.cudnn.benchmark = False","f4ddde93":"seed=42\nseed_all(seed)","29d2db92":"DATA_ROOT = Path(\"..\/input\/google-quest-challenge\/\")\nMODEL_ROOT = Path(\"..\/input\/robertabasepretrained\")\ntrain = pd.read_csv(DATA_ROOT \/ 'train.csv')\ntest = pd.read_csv(DATA_ROOT \/ 'test.csv')\nsample_sub = pd.read_csv(DATA_ROOT \/ 'sample_submission.csv')\nprint(train.shape,test.shape)","809ca8f7":"train.head()","3f899580":"labels = list(sample_sub.columns[1:].values)","17690740":"for label in labels: print(label) ","42ada225":"MODEL_CLASSES = {\n    'roberta': (RobertaForSequenceClassification, RobertaTokenizer, RobertaConfig),\n}","6e388b4c":"# Parameters\nseed = 42\nuse_fp16 = False\nbs = 8\n\nmodel_type = 'roberta'\npretrained_model_name = 'roberta-base' # 'roberta-base-openai-detector'","95bd2ae0":"model_class, tokenizer_class, config_class = MODEL_CLASSES[model_type]","7ec06532":"model_class.pretrained_model_archive_map.keys()","a5e1e739":"class TransformersBaseTokenizer(BaseTokenizer):\n    \"\"\"Wrapper around PreTrainedTokenizer to be compatible with fast.ai\"\"\"\n    def __init__(self, pretrained_tokenizer: PreTrainedTokenizer, model_type = 'bert', **kwargs):\n        self._pretrained_tokenizer = pretrained_tokenizer\n        self.max_seq_len = pretrained_tokenizer.max_len\n        self.model_type = model_type\n\n    def __call__(self, *args, **kwargs): \n        return self\n\n    def tokenizer(self, t:str) -> List[str]:\n        \"\"\"Limits the maximum sequence length and add the spesial tokens\"\"\"\n        CLS = self._pretrained_tokenizer.cls_token\n        SEP = self._pretrained_tokenizer.sep_token\n        if self.model_type in ['roberta']:\n            tokens = self._pretrained_tokenizer.tokenize(t, add_prefix_space=True)[:self.max_seq_len - 2]\n        else:\n            tokens = self._pretrained_tokenizer.tokenize(t)[:self.max_seq_len - 2]\n        return [CLS] + tokens + [SEP]","45c3e98e":"transformer_tokenizer = tokenizer_class.from_pretrained(MODEL_ROOT)\ntransformer_base_tokenizer = TransformersBaseTokenizer(pretrained_tokenizer = transformer_tokenizer, model_type = model_type)\nfastai_tokenizer = Tokenizer(tok_func = transformer_base_tokenizer, pre_rules=[], post_rules=[])","b43732f2":"class TransformersVocab(Vocab):\n    def __init__(self, tokenizer: PreTrainedTokenizer):\n        super(TransformersVocab, self).__init__(itos = [])\n        self.tokenizer = tokenizer\n    \n    def numericalize(self, t:Collection[str]) -> List[int]:\n        \"Convert a list of tokens `t` to their ids.\"\n        return self.tokenizer.convert_tokens_to_ids(t)\n        #return self.tokenizer.encode(t)\n\n    def textify(self, nums:Collection[int], sep=' ') -> List[str]:\n        \"Convert a list of `nums` to their tokens.\"\n        nums = np.array(nums).tolist()\n        return sep.join(self.tokenizer.convert_ids_to_tokens(nums)) if sep is not None else self.tokenizer.convert_ids_to_tokens(nums)","8b5a3020":"transformer_vocab =  TransformersVocab(tokenizer = transformer_tokenizer)\nnumericalize_processor = NumericalizeProcessor(vocab=transformer_vocab)\n\ntokenize_processor = TokenizeProcessor(tokenizer=fastai_tokenizer, include_bos=False, include_eos=False)\n\ntransformer_processor = [tokenize_processor, numericalize_processor]","eb8b806f":"pad_first = bool(model_type in ['xlnet'])\npad_idx = transformer_tokenizer.pad_token_id","1a4ba184":"databunch = (TextList.from_df(train, cols=['question_title','question_body','answer'], processor=transformer_processor)\n             .split_by_rand_pct(0.1,seed=seed)\n             .label_from_df(cols=labels)\n             .add_test(test)\n             .databunch(bs=bs, pad_first=pad_first, pad_idx=pad_idx))","644bdfe0":"print('[CLS] token :', transformer_tokenizer.cls_token)\nprint('[SEP] token :', transformer_tokenizer.sep_token)\nprint('[PAD] token :', transformer_tokenizer.pad_token)\ndatabunch.show_batch()","1d1dc6e7":"print('[CLS] id :', transformer_tokenizer.cls_token_id)\nprint('[SEP] id :', transformer_tokenizer.sep_token_id)\nprint('[PAD] id :', pad_idx)\ntest_one_batch = databunch.one_batch()[0]\nprint('Batch shape : ',test_one_batch.shape)\nprint(test_one_batch)","f76b4aa1":"# defining our model architecture \nclass CustomTransformerModel(nn.Module):\n    def __init__(self, transformer_model: PreTrainedModel):\n        super(CustomTransformerModel,self).__init__()\n        self.transformer = transformer_model\n        \n    def forward(self, input_ids, attention_mask=None):\n        \n        attention_mask = (input_ids!=1).type(input_ids.type()) # attention_mask for RoBERTa\n            \n        logits = self.transformer(input_ids,\n                                attention_mask = attention_mask)[0]   \n        return logits","3601c625":"config = config_class.from_pretrained(MODEL_ROOT)\ntransformer_model = model_class.from_pretrained(MODEL_ROOT, config = config)\ncustom_transformer_model = CustomTransformerModel(transformer_model = transformer_model)","7f1bc461":"class AvgSpearman(Callback):\n    \n    def on_epoch_begin(self, **kwargs):\n        self.preds = np.empty( shape=(0, 30) )\n        self.target = np.empty( shape=(0, 30) )\n    \n    def on_batch_end(self, last_output, last_target, **kwargs):\n        self.preds = np.append(self.preds,last_output,axis=0)\n        self.target = np.append(self.target,last_target,axis=0)\n    \n    def on_epoch_end(self, last_metrics, **kwargs):\n        spearsum = 0\n        for col in range(self.preds.shape[1]):\n            spearsum += spearmanr(self.preds[:,col],self.target[:,col]).correlation\n        res = spearsum \/ (self.preds.shape[1] + 1)\n        return add_metrics(last_metrics, res)","249addca":"from fastai.callbacks import *\nfrom transformers import AdamW\n\nlearner = Learner(databunch, \n                  custom_transformer_model, \n                  opt_func = lambda input: AdamW(input,correct_bias=False), \n                  metrics=[AvgSpearman()])\n\n# Show graph of learner stats and metrics after each epoch.\nlearner.callbacks.append(ShowGraph(learner))\n\n# Put learn in FP16 precision mode. --> Not working in the tutorial\nif use_fp16: learner = learner.to_fp16()","f22dd23c":"print(learner.model)","82029670":"num_groups = len(learner.layer_groups)\nprint('Learner split in',num_groups,'groups')","9f13ef50":"list_layers = [learner.model.transformer.roberta.embeddings,\n              learner.model.transformer.roberta.encoder.layer[0],\n              learner.model.transformer.roberta.encoder.layer[1],\n              learner.model.transformer.roberta.encoder.layer[2],\n              learner.model.transformer.roberta.encoder.layer[3],\n              learner.model.transformer.roberta.encoder.layer[4],\n              learner.model.transformer.roberta.encoder.layer[5],\n              learner.model.transformer.roberta.encoder.layer[6],\n              learner.model.transformer.roberta.encoder.layer[7],\n              learner.model.transformer.roberta.encoder.layer[8],\n              learner.model.transformer.roberta.encoder.layer[9],\n              learner.model.transformer.roberta.encoder.layer[10],\n              learner.model.transformer.roberta.encoder.layer[11],\n              learner.model.transformer.roberta.pooler]\n\nlearner.split(list_layers);","f84285ef":"num_groups = len(learner.layer_groups)\nprint('Learner split in',num_groups,'groups')","9d01ed2a":"seed_all(seed)\nlearner.freeze_to(-1)","afdf8752":"learner.lr_find()","3d204542":"learner.recorder.plot(skip_end=7,suggestion=True)","26a33261":"unfreeze_layers = [-1,-2,-3,-4,-5,-7]\nlearning_rates = [2e-4, 5e-5, 1e-5, 5e-6, 1e-6,5e-7]\nepochs = [6, 5, 5, 5, 7, 7]","b7af3fb8":"def model_unfreezing_and_training():\n    for layer in range(0,len(unfreeze_layers)):\n        learner.freeze_to(unfreeze_layers[layer])\n        print('freezing to:',unfreeze_layers[layer],' - ',epochs[layer],'epochs')\n        learner.fit_one_cycle(epochs[layer], \n                              max_lr=slice(learning_rates[layer]*0.95**num_groups, learning_rates[layer]),\n                              moms=(0.8, 0.9))\n        learner.save('cycle_'+str(layer))","6d25a372":"model_unfreezing_and_training()","2b509003":"def get_preds_as_nparray(ds_type) -> np.ndarray:\n    \"\"\"\n    the get_preds method does not yield the elements in order by default\n    we borrow the code from the RNNLearner to resort the elements into their correct order\n    \"\"\"\n    preds = learner.get_preds(ds_type)[0].detach().cpu().numpy()\n    sampler = [i for i in databunch.dl(ds_type).sampler]\n    reverse_sampler = np.argsort(sampler)\n    return preds[reverse_sampler, :]\n\ntest_preds = get_preds_as_nparray(DatasetType.Test)","76e72d47":"test_preds,test_preds.shape","a00d4dc6":"sample_submission = pd.read_csv(DATA_ROOT \/ 'sample_submission.csv')\nsample_submission[labels] = test_preds\nsample_submission.to_csv(\"submission.csv\", index=False)","f24c01c8":"test.head()","8e417c56":"sample_submission.head()","66257f3c":"This notebook is based off of this great tutorial kernel and accompanying [article](https:\/\/medium.com\/p\/fastai-with-transformers-bert-roberta-xlnet-xlm-distilbert-4f41ee18ecb2?source=email-29c8f5cf1dc4--writer.postDistributed&sk=119c3e5d748b2827af3ea863faae6376): <br>\nhttps:\/\/www.kaggle.com\/maroberti\/fastai-with-transformers-bert-roberta\n\nHere, I've just implemented roBERTa, but go check out the original kernel to see how the same procedure could be used for BERT, RoBERTa, XLNet, XLM, and DistilBERT). I'd love if you upvote my kernel, but make sure to give the original votes, too. ","de800c60":"Let's check that we now have 14 layer groups:","b2dc5e9e":"Due to randomness, there can be little differences in the learning rate. Based on a few runs on my computer, I've chosen 2e-4 for the starting point of my kaggle submission. ","abb5a0d6":"Now that we've created the Learner, we can train the model. During training, we are going to use techniques known to help in other classification tasks: **discriminative layer training**, **gradual unfreezing** and **slanted triangular learning rates**. The kernel tutorial author noted that he didn't find any documentation about influence of these techniques with transformers. I've used them because I think that these techniques are probably domain general, and will therefore give a boost in this system. \n\nTo implement unfreezing, our model needs to be specified into different layer groups. ``fastai`` allows us to \"split\" the structure model into groups, [described here](https:\/\/docs.fast.ai\/basic_train.html#Discriminative-layer-training).\n\nTo see the structure of the RoBERTa model, look at the output of the following:","1fec8480":"When using pretrained models, the current data needs to be preprocessed in the same way as the data that trained the model. In ``transformers``, each model architecture is associated with 3 main types of classes:\n* A **model class** to load\/store a particular pre-train model.\n* A **tokenizer class** to pre-process the data and make it compatible with a particular model.\n* A **configuration class** to load\/store the configuration of a particular model.\n\nFor the RoBERTa architecture, we use `RobertaForSequenceClassification` for the **model class**, `RobertaTokenizer` for the **tokenizer class**, and `RobertaConfig` for the **configuration class**.\u00a0","eb4b1e8b":"### Custom processor","9babaf91":"The training data. In this kernel, I'll use the `question_title`, `question_body` and `answer` columns.","6d666224":"Load the configuration file, and pretrained models (that we saved with that configuration file.) Then, we create the custom model.","3c13e111":"## Transfer learning approach","43a325f0":"# Specifying Data Preprocessing ","ab23e16c":"You will see later, that those classes share a common class method ``from_pretrained(pretrained_model_name,\u00a0...)``. In our case, the parameter ``pretrained_model_name`` is a string with the shortcut name of a pre-trained model\/tokenizer\/configuration to load, e.g ``'bert-base-uncased'``. We can find all the shortcut names in the transformers documentation [here](https:\/\/huggingface.co\/transformers\/pretrained_models.html#pretrained-models).","14a29903":"## References\n* [Fastai with HuggingFace \ud83e\udd17Transformers (BERT, RoBERTa, XLNet, XLM, DistilBERT)](https:\/\/www.kaggle.com\/maroberti\/fastai-with-transformers-bert-roberta)\n* Hugging Face, Transformers GitHub (Nov 2019), [https:\/\/github.com\/huggingface\/transformers](https:\/\/github.com\/huggingface\/transformers)\n* Fast.ai, Fastai documentation (Nov 2019), [https:\/\/docs.fast.ai\/text.html](https:\/\/docs.fast.ai\/text.html)\n* Jeremy Howard & Sebastian Ruder, Universal Language Model Fine-tuning for Text Classification (May 2018), [https:\/\/arxiv.org\/abs\/1801.06146](https:\/\/arxiv.org\/abs\/1801.06146)\n* Keita Kurita's article\u00a0: [A Tutorial to Fine-Tuning BERT with Fast AI](https:\/\/mlexplained.com\/2019\/05\/13\/a-tutorial-to-fine-tuning-bert-with-fast-ai\/)\u00a0(May 2019)\n* Dev Sharma's article\u00a0: [Using RoBERTa with Fastai for NLP](https:\/\/medium.com\/analytics-vidhya\/using-roberta-with-fastai-for-nlp-7ed3fed21f6c) (Sep 2019)","00744f41":"This kernel uses [the data block API](https:\/\/docs.fast.ai\/data_block.html#The-data-block-API), to create the `DataBunch`. \n\nIn the `DataBunch` creation, I have specified to use the 'question_title','question_body', and 'answer' columns as the training data. Recall from the introduction that some of the target answers relate to the question (title + body) and some only to the answer. It's an open question as to whether it's a good choice to stick these all together. ","b29b0451":"# Predictions and Submission","ee046fb5":"# Loading and Processing Data","c5923196":"This challenge is about questions and answers. \n\nIn [question answering (QA)](https:\/\/en.wikipedia.org\/wiki\/Question_answering) systems are built that automatically answer questions posed by humans in a natural language. These computer systems excel at answering questions with single, verifiable answers. In contrast, humans are better at addressing subjective questions that require a deeper, multidimensional understanding of context.  \n\nFor the [Google QUEST Q&A Labeling competition](https:\/\/www.kaggle.com\/c\/google-quest-challenge\/overview), we're tasked with predicting different subjective aspects of question-answering. The data for this competition includes questions and answers, and the task is to predict target values of 30 labels for each question-answer pair.Target labels with the prefix question_ relate to the question_title and\/or question_body features in the data, and target labels with the prefix answer_ relate to the answer feature.\n\nThis is not a binary prediction challenge. Target labels are aggregated from multiple raters, and can have continuous values in the range [0,1]. Submissions are evaluated with the mean [Spearman's rank correlation coefficient](https:\/\/en.wikipedia.org\/wiki\/Spearman%27s_rank_correlation_coefficient).","3d71468a":"In fastai, the `Learner` holds the data, model and other parameter, like the optimizer. Since we're using transformers, we want to use an optimizer designed for them: the AdamW optimizer. This optimizer matches Pytorch Adam optimizer Api, therefore, it becomes straightforward to integrate it within ``fastai``. To reproduce BertAdam specific behavior, you have to set ``correct_bias = False``. We include our new AvgSpearman metric. Make sure to specify the loss function to implement the weighted cross entropy. ","14d84174":"The predicted lables are in the columns of the sample submission. Note that some labels are with respect to the question, and some are with respect to the answer.","9e50f64f":"### Adding the evaluation metric","cef9dcac":"#### Find an appropriate learning rate","2971d2e2":"We check the order","4fb345e5":"One group won't allow us to unfreeze parts of the model. The tutorial kernel suggested to divide the RoBERTa model in 14 blocks:\n* 1 Embedding\n* 12 transformer\n* 1 classifier","d63466c3":"Check batch and tokenizer. Because the RoBERTa tokenizer was used, there are a lot of 'G' in the text column.","071ba554":"Thanks for looking through this kernel! I hope that it helps you understand transformers, and how to integrate Huggingface with fastai. \n\nCheck out the original for some other cool architectures:\n[Fastai with HuggingFace \ud83e\udd17Transformers (BERT, RoBERTa, XLNet, XLM, DistilBERT)](https:\/\/www.kaggle.com\/maroberti\/fastai-with-transformers-bert-roberta)","a08a4da1":"## Acknowledgements:","759411f9":"### Custom Tokenizer","d515f6ef":"# Creating the Model","ea2cb4e3":"Now that the model is trained, we can generate our predictions from the test dataset. As [noted in other tutorials](https:\/\/mlexplained.com\/2019\/05\/13\/a-tutorial-to-fine-tuning-bert-with-fast-ai\/) the function ``get_preds`` does not return elements in order by default. Therefore, we will have to resort the test elements into their correct order.","8e69f1f9":"This statement prints all of the directories in the \/kaggle\/input\/ directory. This can be useful when trying to determine the path of the external datasets.","79c84a5e":"The numericalizer takes the the tokens, and turns them into numbers. The ``fastai`` documentation notes that:\n1. The [``NumericalizeProcessor``  object](https:\/\/docs.fast.ai\/text.data.html#NumericalizeProcessor) takes as ``vocab`` argument a [``Vocab`` object](https:\/\/docs.fast.ai\/text.transform.html#Vocab)\n\nTo use the RoBERTa numericalizer, we create a new class ``TransformersVocab`` that inherits from ``Vocab`` and overwrite ``numericalize`` and ``textify`` functions.","5b194b19":"As mentioned [here](https:\/\/github.com\/huggingface\/transformers#models-always-output-tuples), the RoBERTa model's forward method always outputs a ``tuple`` with various elements depending on the model and the configuration parameters. In our case, we are interested to access only to the logits. One way to access them is to create a custom model.","3b76d9e4":"This kernel uses fastai and Huggingface transformser. fastai is already installed on Kaggle, and [here](https:\/\/www.kaggle.com\/c\/tensorflow2-question-answering\/discussion\/117716) is a discussion post that shows how to get Huggingface installled.","5611a2c4":"# Implementing RoBERTa with fastai and HuggingFace \ud83e\udd17Transformers","1089005a":"#### Train with progressive unfreezing","a9829589":"Check batch and numericalizer :","e063e456":"To train the model we will:\n1. Find an appropriate initial learning rate\n1. Progressively unfreeze the layers while training\n\nDuring all training, we use the **Slanted Triangular Learning Rates** with the `.fit_one_cycle` command, described [here](https:\/\/docs.fast.ai\/callbacks.one_cycle.html). Originally, I wanted to unfreeze the entire model, but I would have to make super small batch size. ","48b5dcf4":"A tokentizer takes the text and transforms it into tokens. The ``fastai`` documentation notes that: \n1. The [``TokenizeProcessor`` object](https:\/\/docs.fast.ai\/text.data.html#TokenizeProcessor) takes as ``tokenizer`` argument a ``Tokenizer`` object.\n2. The [``Tokenizer`` object](https:\/\/docs.fast.ai\/text.transform.html#Tokenizer) takes as ``tok_func`` argument a ``BaseTokenizer`` object.\n3. The [``BaseTokenizer`` object](https:\/\/docs.fast.ai\/text.transform.html#BaseTokenizer) implement the function ``tokenizer(t:str) \u2192 List[str]`` that take a text ``t`` and returns the list of its tokens.\n\nTo use the RoBERTa tokenizer, we create a new class ``TransformersBaseTokenizer`` that inherits from ``BaseTokenizer`` and overwrite a new ``tokenizer`` function. It is important to note that RoBERTa requires a space to start the input string. The encoding methods should be called with ``add_prefix_space`` set to ``True``. The output of the tokenizer should have the following pattern. (Note that padding is added when the `DataBunch` is created.)\n\n    roberta: [CLS] + prefix_space + tokens + [SEP] + padding","93317c06":"Because the code to progressively unfreeze and train the model is very repetitive, I have made it into a loop. I unfreeze only the first 5 layer groups because I run out of memory after that. The learning rates and number of epochs are mostly arbitrary.","7166e696":"**Kernel Technicality:**\nTo make this run completely within the Kaggle kernels, we need to upload the pretrained configuration, vocabulary and model as a dataset (i.e., MODEL_ROOT below). To create the dataset, I had to create a separate notebook, download the files from the internet, and use `.save_pretrained` to save them in the format HuggingFace was expecting. When saving the model that we'll use for classification, we will have to specify how many categories we will use for classification (i.e., 30). \n\n    MODEL_ROOT = Path(\"\/wherever\/roberta-base-pretrained\")\n    transformer_tokenizer = tokenizer_class.from_pretrained(pretrained_model_name)\n    transformer_tokenizer.save_pretrained(MODEL_ROOT)\n    \n    config = config_class.from_pretrained(pretrained_model_name)\n    config.num_labels = 30\n    config.use_bfloat16 = use_fp16\n    config.save_pretrained(MODEL_ROOT)\n    \n    transformer_model = model_class.from_pretrained(pretrained_model_name, config = config)\n    transformer_model.save_pretrained(MODEL_ROOT)","c73e4e8a":"Now that we have a custom processor, which contains the custom tokenizer and numericalizer, we can create the `DataBunch`. During the DataBunch creation, we have to pay attention to set the processor argument to our new custom processor ``transformer_processor`` and manage correctly the padding. For RoBERTa, it's usually advised to pad the inputs on the right rather than the left.","9d840b63":"Now that we have our custom **tokenizer** and **numericalizer**, we can create the custom **processor**. Notice we are passing the ``include_bos = False`` and ``include_eos = False`` options. This is because ``fastai`` adds its own special tokens by default which interferes with the ``[CLS]`` and ``[SEP]`` tokens added by our custom tokenizer.","74f1769e":"### Model Training","c18ac40e":"Let's check how many layer groups we currently have:","6193df14":"It's important to be able to see how well the model is doing. For this competition: \n> Submissions are evaluated on the mean column-wise Spearman's correlation coefficient. The Spearman's rank correlation is computed for each target column, and the mean of these values is calculated for the submission score.\n\nAlthough scipy provides an implementation of [Spearman's R](https:\/\/docs.scipy.org\/doc\/scipy-0.16.1\/reference\/generated\/scipy.stats.spearmanr.html), we also need to take the average across all of the columns. Therefore,  we need to create our own [custom metric](https:\/\/docs.fast.ai\/metrics.html#Creating-your-own-metric). The custom metric is only used on the validations set.\n- `on_epoch_begin`: create empty numpy arrays to hold the predictions and targets\n- `on_batch_end`: after each back, append the most recent output (predictions) and targets\n- `on_epoch_end`: when the epoch is finished, compute Spearman's R on the columns, and then take the average\n\n","4cba69f1":"The first **transfer learning** method applied to Natural Language Processing (NLP) was [Universal Language Model Fine-tuning for Text Classification](https:\/\/medium.com\/r\/?url=https%3A%2F%2Farxiv.org%2Fpdf%2F1801.06146.pdf).(ULMFiT) method. This method involves starting with a pre-trained language model (LM), for example, trained on the Wikitext 103 dataset, and then fine tuning the language model on a new dataset. The fine tuned language model can then be used ina classification task for the new dataset. A demonstration is in the [fast.ai course](https:\/\/course.fast.ai\/videos\/?lesson=4), incorporating other techniques like discriminate learning rates, gradual model unfreezing, and slanted triangular learning rates.\n\nRecently, a new architecture called the **Transformer** (cf. [Attention is all you need](https:\/\/arxiv.org\/abs\/1706.03762)) has been shown to be powerful. Google (BERT, Transformer-XL, XLNet), Facebook (RoBERTa, XLM) or even OpenAI (GPT, GPT-2) have pre-trained their own models (that use architectures based on the Transformer) on very large corpora. \n\nThese transformers are availiable through the [HuggingFace](https:\/\/huggingface.co\/) \ud83e\udd17 [transformers library](https:\/\/github.com\/huggingface\/transformers). Formerly knew as ``pytorch-transformers`` or ``pytorch-pretrained-bert``, this library has both pre-trained NLP models and additional utilities like tokenizers, optimizers and schedulers. \n\nThis kernel uses the ``transformers`` library within the ``fastai`` framework. Specifically, I am using the [RoBERTa model](https:\/\/towardsdatascience.com\/bert-roberta-distilbert-xlnet-which-one-to-use-3d5ab82ba5f8). I've broken the process down into different parts:\n1. Specifying Data Preprocessing\n    - More complete explanation of saved model (V6)\n1. Loading and Processing Data\n1. Creating the Model\n    - Including the challenge metric (V5)\n1. Training the Model\n    - With attention (V6)\n1. Predictions and Submission","35eccf7c":"## Google Quest Q&A Overview","b8ec4119":"# Training the Model","a93d90b6":"Text data is preprocessed through tokenization and numericalization. To match the pretrained models, we need to use the same tokenization and numericalization as the model. Fortunately, the **tokenizer class** from ``transformers`` provides the correct pre-process tools that correspond to each pre-trained model.\n\nIn ``fastai``, data pre-processing is performed during the creation of the ``DataBunch``. When creating a `DataBunch`, the tokenizer and numericalizer are passed in the processor argument.\n\nTherefore, the first step is to create a customized tokenize and numericalizer that use the correct transformer tokenizer classes. ","c336829f":"### Fastai Learner\u00a0with Custom Optimizer","a3f8d763":"A utility function to set the seed for generating random numbers","57535539":"# Set Up and Data Loading","653caa8a":"## Implementing the RoBERTa tokenizer and numericalizer in fastai","12910e56":"### Custom Numericalizer"}}