{"cell_type":{"b8e84a33":"code","72240c95":"code","6ab9e115":"code","2fde7502":"code","74401896":"code","189960e0":"code","bedc183f":"code","a2f31bb5":"code","3b215dc1":"code","82acfccf":"code","ec4cdf68":"code","2231ddb9":"code","1e6d34ce":"code","793f6e52":"code","43ae557b":"code","659dfb95":"code","63587c79":"code","fc8148d3":"code","1250256f":"code","4a200e2e":"code","9d3c5ff1":"code","387ffaaa":"code","d23c9431":"code","bf821465":"code","cd87d1ca":"code","3ded73cf":"code","ef3aa0ae":"code","01240daf":"code","d22fd129":"code","30b4d0cb":"code","aef39592":"code","71a414d4":"code","21706163":"code","01504e19":"code","e53138dc":"code","69413fff":"code","cbc7f998":"code","c385af97":"code","594d3ec7":"code","5841393a":"code","606eaa19":"code","14fd9d63":"code","e9c197a8":"code","6b8f2fe3":"code","2265b9d9":"code","eeff6ad1":"code","d21432f3":"code","32d09bff":"code","b2f884c4":"code","85c4dd67":"code","476b64df":"code","88cc6547":"code","79088e61":"code","a9c19092":"code","911f8196":"code","d77278ef":"code","577397d1":"code","0da73a14":"code","54deafae":"code","e03e59cb":"code","fb9d3c4c":"code","e94bbcfa":"code","59f1ddb4":"code","1db06507":"code","cef8eaca":"code","1c287048":"code","c01f22c1":"code","1cdba302":"code","0a03933b":"code","ced7b760":"code","4816e729":"code","fdd91fbb":"code","2428a5f2":"code","f98cddfd":"code","7dad1ae8":"code","ee4e4435":"code","fac492ef":"code","54fb58ed":"code","eba1e5ad":"code","fbfa00bc":"code","e4c55539":"code","7dffa2a3":"code","58386ec8":"code","f3dea3dd":"code","59233ac1":"code","4604a3cf":"markdown","1d1670d6":"markdown","8934979b":"markdown","016dd016":"markdown","8506ab7a":"markdown","cf7f694e":"markdown","699b773a":"markdown","ade57470":"markdown","15e0a485":"markdown","710d3af5":"markdown"},"source":{"b8e84a33":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","72240c95":"import warnings\nwarnings.filterwarnings('ignore')","6ab9e115":"import matplotlib.pyplot as plt\nimport seaborn as sns","2fde7502":"df = pd.read_csv(\"\/kaggle\/input\/car-price\/CarPrice_Assignment.csv\")","74401896":"df.head()","189960e0":"#shape of the data\ndf.shape","bedc183f":"#info the dataframe\ndf.info()","a2f31bb5":"#describe the data\ndf.describe()","3b215dc1":"# checking for duplicates\ndf.duplicated(subset = ['car_ID']).sum()","82acfccf":"# checking for null values\ndf.isnull().sum()","ec4cdf68":"# pairplot for symboling vs price\nsns.pairplot(y_vars = 'symboling', x_vars = 'price' ,data = df)","2231ddb9":"#Column CarName\ndf['CarName'].value_counts()","1e6d34ce":"#spliting carname and car company\ndf['car_company'] = df['CarName'].apply(lambda x:x.split(' ')[0])","793f6e52":"#rechecking\ndf.head()","43ae557b":"#deleting the original column\ndf = df.drop(['CarName'], axis =1)","659dfb95":"#cheking car company \ndf['car_company']","63587c79":"# replacing names for duplicate values\ndf['car_company'].replace('toyouta', 'toyota',inplace=True)\ndf['car_company'].replace('Nissan', 'nissan',inplace=True)\ndf['car_company'].replace('maxda', 'mazda',inplace=True)\ndf['car_company'].replace('vokswagen', 'volkswagen',inplace=True)\ndf['car_company'].replace('vw', 'volkswagen',inplace=True)\ndf['car_company'].replace('porcshce', 'porsche',inplace=True)","fc8148d3":"#rechecking the data:\ndf['car_company'].value_counts()","1250256f":"#doornumber - Number of doors in a car\ndf['doornumber'].value_counts()","4a200e2e":"# changing format by using functions concept\ndef number_(x):\n    return x.map({'four':4, 'two': 2})\n    \ndf['doornumber'] = df[['doornumber']].apply(number_)","9d3c5ff1":"#rechecking\ndf['doornumber'].value_counts()","387ffaaa":"#cylindernumber- cylinder placed in the car\ndf['cylindernumber'].value_counts()","d23c9431":"# changing format by using functions\ndef convert_number(x):\n    return x.map({'two':2, 'three':3, 'four':4,'five':5, 'six':6,'eight':8,'twelve':12})\n\ndf['cylindernumber'] = df[['cylindernumber']].apply(convert_number)","bf821465":"# splitting data into numeric values\ncars_numeric = df.select_dtypes(include =['int64','float64'])\ncars_numeric.head()","cd87d1ca":"plt.figure(figsize = (30,30))\nsns.pairplot(cars_numeric)\nplt.show()","3ded73cf":"# checking co-relation of variables\nplt.figure(figsize = (20,20))\nsns.heatmap(df.corr(), annot = True ,cmap = 'YlGnBu')\nplt.show()","ef3aa0ae":"#spliting data into categorical values\ncategorical_cols = df.select_dtypes(include = ['object'])\ncategorical_cols.head()","01240daf":"# boxplot for checking outliers\nplt.figure(figsize = (20,12))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'fueltype', y = 'price', data = df)\nplt.subplot(3,3,2)\nsns.boxplot(x = 'aspiration', y = 'price', data = df)\nplt.subplot(3,3,3)\nsns.boxplot(x = 'carbody', y = 'price', data = df)\nplt.subplot(3,3,4)\nsns.boxplot(x = 'drivewheel', y = 'price', data = df)\nplt.subplot(3,3,5)\nsns.boxplot(x = 'enginelocation', y = 'price', data = df)\nplt.subplot(3,3,6)\nsns.boxplot(x = 'enginetype', y = 'price', data = df)\nplt.subplot(3,3,7)\nsns.boxplot(x = 'fuelsystem', y = 'price', data = df)","d22fd129":"plt.figure(figsize = (20,12))\nsns.boxplot(x = 'car_company', y = 'price', data = df)","30b4d0cb":"#creating dummies\ncars_dummies = pd.get_dummies(categorical_cols, drop_first = True)\ncars_dummies.head()","aef39592":"# merging dummys with the original data set\ncar_df  = pd.concat([df, cars_dummies], axis =1)","71a414d4":"car_df = car_df.drop(['fueltype', 'aspiration', 'carbody', 'drivewheel', 'enginelocation',\n       'enginetype', 'fuelsystem', 'car_company'], axis =1)","21706163":"car_df.info()","01504e19":"# importing libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm\nfrom sklearn.feature_selection import RFE\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error","e53138dc":"# spliting data\ndf_train, df_test = train_test_split(car_df, train_size = 0.7, test_size = 0.3, random_state = 100)","69413fff":"df_train.shape","cbc7f998":"df_test.shape","c385af97":"cars_numeric.columns","594d3ec7":"col_list = ['symboling', 'doornumber', 'wheelbase', 'carlength', 'carwidth','carheight', 'curbweight', 'cylindernumber', 'enginesize', 'boreratio',\n            'stroke', 'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price']","5841393a":"scaler = StandardScaler()","606eaa19":"df_train[col_list] = scaler.fit_transform(df_train[col_list])","14fd9d63":"df_train.describe()","e9c197a8":"y_train = df_train.pop('price')\nX_train = df_train","6b8f2fe3":"lr = LinearRegression()\nlr.fit(X_train,y_train)\n\n# Subsetting training data for 15 selected columns\nrfe = RFE(lr,15)\nrfe.fit(X_train, y_train)","2265b9d9":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","eeff6ad1":"cols = X_train.columns[rfe.support_]\ncols","d21432f3":"#model 1\nX1 = X_train[cols]\nX1_sm = sm.add_constant(X1)\n\nlr_1 = sm.OLS(y_train,X1_sm).fit()","32d09bff":"lr_1.params","b2f884c4":"print(lr_1.summary())","85c4dd67":"#VIF\nvif = pd.DataFrame()\nvif['Features'] = X1.columns\nvif['VIF'] = [variance_inflation_factor(X1.values, i) for i in range(X1.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = 'VIF', ascending = False)\nvif","476b64df":"\nlr2 = LinearRegression()\n\nrfe2 = RFE(lr2,10)\nrfe2.fit(X_train,y_train)","88cc6547":"list(zip(X_train.columns,rfe2.support_,rfe2.ranking_))","79088e61":"supported_cols = X_train.columns[rfe2.support_]\nsupported_cols ","a9c19092":"#model 2\nX2 = X_train[supported_cols]\nX2_sm = sm.add_constant(X2)\n\nmodel_2 = sm.OLS(y_train,X2_sm).fit()","911f8196":"model_2.params","d77278ef":"print(model_2.summary())","577397d1":"#VIF\nvif = pd.DataFrame()\nvif['Features'] = X2.columns\nvif['VIF'] = [variance_inflation_factor(X2.values, i) for i in range(X2.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = 'VIF', ascending = False)\nvif","0da73a14":"#model 3\nX3 = X2.drop(['car_company_subaru'], axis =1)\nX3_sm = sm.add_constant(X3)\n\nModel_3 = sm.OLS(y_train,X3_sm).fit()","54deafae":"Model_3.params","e03e59cb":"print(Model_3.summary())","fb9d3c4c":"#VIF\nvif = pd.DataFrame()\nvif['Features'] = X3.columns\nvif['VIF'] = [variance_inflation_factor(X3.values, i) for i in range(X3.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = 'VIF', ascending = False)\nvif","e94bbcfa":"#model 4\nX4 = X3.drop(['enginetype_ohcf'], axis =1)\nX4_sm = sm.add_constant(X4)\n\nModel_4 = sm.OLS(y_train,X4_sm).fit()","59f1ddb4":"Model_4.params","1db06507":"print(Model_4.summary())","cef8eaca":"#VIF\nvif = pd.DataFrame()\nvif['Features'] = X4.columns\nvif['VIF'] = [variance_inflation_factor(X4.values, i) for i in range(X4.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = 'VIF', ascending = False)\nvif","1c287048":"#model 5\nX5 = X4.drop(['car_company_peugeot'], axis =1)\nX5_sm = sm.add_constant(X5)\n\nModel_5 = sm.OLS(y_train,X5_sm).fit()","c01f22c1":"Model_5.params","1cdba302":"print(Model_5.summary())","0a03933b":"#VIF\nvif = pd.DataFrame()\nvif['Features'] = X5.columns\nvif['VIF'] = [variance_inflation_factor(X5.values, i) for i in range(X5.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = 'VIF', ascending = False)\nvif","ced7b760":"#model 6\nX6 = X5.drop(['enginetype_l'], axis =1)\nX6_sm = sm.add_constant(X6)\n\nModel_6 = sm.OLS(y_train,X6_sm).fit()","4816e729":"Model_6.params","fdd91fbb":"print(Model_6.summary())","2428a5f2":"#VIF\nvif = pd.DataFrame()\nvif['Features'] = X6.columns\nvif['VIF'] = [variance_inflation_factor(X6.values, i) for i in range(X6.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = 'VIF', ascending = False)\nvif","f98cddfd":"y_train_pred = Model_6.predict(X6_sm)\ny_train_pred.head()","7dad1ae8":"Residual = y_train- y_train_pred","ee4e4435":"sns.distplot(Residual, bins =15)","fac492ef":"df_test[col_list] = scaler.transform(df_test[col_list])","54fb58ed":"y_test = df_test.pop('price')\nX_test = df_test","eba1e5ad":"final_cols = X6.columns","fbfa00bc":"X_test_model6= X_test[final_cols]\nX_test_model6.head()","e4c55539":"X_test_sm = sm.add_constant(X_test_model6)","7dffa2a3":"y_pred = Model_6.predict(X_test_sm)","58386ec8":"y_pred.head()","f3dea3dd":"plt.scatter(y_test, y_pred)\nplt.xlabel('y_test')\nplt.ylabel('y_pred')","59233ac1":"r_squ = r2_score(y_test,y_pred)\nr_squ","4604a3cf":"# Residual analysis #","1d1670d6":"* The cars with fueltype as diesel are comparatively expensive than the cars with fueltype as gas.\n* All the types of carbody is relatively cheaper as compared to convertible carbody.\n* The cars with rear enginelocation are way expensive than cars with front enginelocation.\n* The price of car is directly proportional to no. of cylinders in most cases.\n* Enginetype ohcv comes into higher price range cars.\n* DoorNumber isn't affecting the price much.\n* HigerEnd cars seems to have rwd drivewheel","8934979b":"# Building MLR Models #","016dd016":"# Checking error terms distribution #","8506ab7a":"# Performing Train and Test #","cf7f694e":"**Business Goal**\nYou are required to model the price of cars with the available independent variables. It will be used by the management to  understand how exactly the prices vary with the independent variables. They can accordingly manipulate the design of the cars, the business strategy etc. to meet certain price levels. Further, the model will be a good way for management to understand the pricing dynamics of a new market.\n\n**So linear equation for price can be given as: \ud835\udc5d\ud835\udc5f\ud835\udc56\ud835\udc50\ud835\udc52 = -0.0748 + 0.3978 \u00d7 carwidth + 0.5204 x enginesize + enginelocation_rear x 2.0419 + 0.7640 xenginetype_rotor + 1.1294 Xcar_company_bmw - 0.5879 x car_company_renault**\n\npredicted model is performing well with 89% accuracy","699b773a":"# Data Visualization #","ade57470":"# predicted model accuracy #","15e0a485":"# Data Prepration #","710d3af5":"* carwidth , carlength, curbweight ,enginesize ,horsepowerseems to have a poitive correlation with price.\n* carheight doesn't show any significant trend with price.\n* citympg , highwaympg - seem to have a significant negative correlation with price."}}