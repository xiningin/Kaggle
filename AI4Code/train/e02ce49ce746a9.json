{"cell_type":{"a19d62cc":"code","154bd7ec":"code","0ffb33b8":"code","801e3bb8":"code","104ceeff":"code","129a0023":"code","1502bacc":"code","7709c993":"code","06286749":"code","805d47aa":"code","4bab608e":"code","131575a8":"code","49ffa719":"code","628fda30":"code","882c04a1":"code","81fdb51d":"code","3663fa34":"markdown","96e626d8":"markdown","0c676f43":"markdown","16f2e2d8":"markdown","165487cc":"markdown","92336ecb":"markdown","a1b40916":"markdown","b6d7ec3d":"markdown","71bbdca8":"markdown","8c4b7c8f":"markdown","72375063":"markdown","414125ee":"markdown","1dd20c85":"markdown"},"source":{"a19d62cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport pickle\n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","154bd7ec":"# df\u306e\u5404\u5217\u306e\u578b\u3092\u8a2d\u5b9a\u3057\u30e1\u30e2\u30ea\u8efd\u6e1b\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","0ffb33b8":"# read data\ntrain = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/example_test.csv')","801e3bb8":"# \u6b20\u640d\u5024\u306e\u88dc\u5b8c(\u524d\u306e\u5024\u3067\u88dc\u5b8c\u3059\u308b)\ntrain.fillna(method = 'ffill', inplace=True) \ntrain.dropna(inplace=True)","104ceeff":"# resp\u306b\u3064\u3044\u3066\nresp_params = (train['resp'].mean(), train['resp'].std())\nresp_standardized = ((train['resp'] - resp_params[0])\/resp_params[1]).values\nresp_info = (resp_params, resp_standardized)","129a0023":"# \u57fa\u6e96\u5316\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nsc.fit(train[test.columns])\nZ = sc.transform(train[test.columns])\ntrain = pd.DataFrame(Z, columns=test.columns) # df\u306e\u6574\u5f62\ntrain = reduce_mem_usage(train) # \u30e1\u30e2\u30ea\u5bfe\u7b56","1502bacc":"# \u4fdd\u5b58\nimport pickle\ntrain.to_pickle('\/kaggle\/working\/train_standardized_without_null.pickle')\nwith open('\/kaggle\/working\/SC.pickle', 'wb') as f:\n    pickle.dump(sc, f)\nwith open('\/kaggle\/working\/resp_info.pickle', 'wb') as f:\n    pickle.dump(resp_info, f)","7709c993":"from sklearn.decomposition import PCA \nimport matplotlib.pyplot as plt\n\n# \u7279\u5fb4\u91cf\u306e\u307f\u306b\u3059\u308b\nX = train.drop(['weight', 'date', 'ts_id'],axis=1).values\n\n# \u4e3b\u6210\u5206\u5206\u6790\npca = PCA()\npca.fit(X)\n# \u30c7\u30fc\u30bf\u3092\u4e3b\u6210\u5206\u7a7a\u9593\u306b\u5199\u50cf(\u4e3b\u6210\u5206\u30b9\u30b3\u30a2)\nscore = pca.transform(X)\n\n# \u7d2f\u7a4d\u5bc4\u4e0e\u7387\u3092\u56f3\u793a\u3059\u308b\nplt.plot([0] + list( np.cumsum(pca.explained_variance_ratio_)), \"-o\")\nplt.xlabel(\"Number of principal components\")\nplt.ylabel(\"Cumulative contribution rate\")\nplt.grid()\nplt.show()","06286749":"import seaborn as sns\n# resp\u3068\u4e3b\u6210\u5206\u30b9\u30b3\u30a2\u306e\u95a2\u4fc2\n# df\u4f5c\u6210\ntarget = pd.DataFrame(np.concatenate([resp_info[1][:, np.newaxis], score[:, :16]], axis=1))\ntarget.columns = pd.Index(['resp'] + ['PC{}'.format(i+1) for i in range(16)])\n# \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u4f5c\u6210\nsns.heatmap(target.corr())","805d47aa":"import statsmodels.api as sm\n\n# 'weight'\u3092\u8ffd\u52a0\ntarget = pd.concat([target, train['weight']], axis=1).copy()\ntarget.head()\n\n# PCR\nx = target.drop(['resp'], axis=1)\nx = sm.add_constant(x)\nmodel = sm.OLS(target['resp'], x)\nresult = model.fit()\nprint(result.summary())\n\n# \u30b0\u30e9\u30d5\u3092\u66f8\u304f\nplt.plot(target['resp'], label='resp', linestyle='--')\nresult.fittedvalues.plot(label='fitted', style=':')\nplt.legend()","4bab608e":"\n# PCR\nx = target.drop(['resp'], axis=1)\nx = sm.add_constant(x)\nmodel = sm.OLS(target['resp'][:100], x[:100])\nresult = model.fit()\nprint(result.summary())\n\n# \u30b0\u30e9\u30d5\u3092\u66f8\u304f\nplt.plot(target['resp'][:100], label='resp', linestyle='--')\nresult.fittedvalues.plot(label='fitted', style=':')\nplt.legend()","131575a8":"from sklearn.cluster import KMeans # K-means\nkmeans_model = KMeans(n_clusters=5, random_state=0).fit(target.iloc[:, 1:]) # resp\u4ee5\u5916\nkm_result = pd.concat([target, pd.DataFrame(kmeans_model.labels_, columns=['cluster'])],axis=1)\nkm_result.groupby('cluster').describe()['resp']","49ffa719":"#resp\u3092\u6b63\u8ca0\u306b\u5909\u63db\u3057\u3001\u30af\u30e9\u30b9\u30bf\u3054\u3068\u306b\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u307f\u308b\u3002\nkm_result['resp_pn'] = km_result['resp'].apply(lambda x:'p' if x>0 else 'n')\nkm_result.groupby(['cluster', 'resp_pn']).count()['resp'].plot.bar(color=['blue', 'red'])","628fda30":"# \u30af\u30e9\u30b9\u30bf\u30fc\u6570:3\nkmeans_model = KMeans(n_clusters=3, random_state=0).fit(target.iloc[:, 1:]) # resp\u4ee5\u5916\nkm_result = pd.concat([target, pd.DataFrame(kmeans_model.labels_, columns=['cluster'])],axis=1)\nkm_result.groupby('cluster').describe()['resp']\nkm_result['resp_pn'] = km_result['resp'].apply(lambda x:'p' if x>0 else 'n')\nkm_result.groupby(['cluster', 'resp_pn']).count()['resp'].plot.bar(color=['blue', 'red'])","882c04a1":"# \u30af\u30e9\u30b9\u30bf\u30fc\u6570:10\nkmeans_model = KMeans(n_clusters=3, random_state=0).fit(target.iloc[:, 1:]) # resp\u4ee5\u5916\nkm_result = pd.concat([target, pd.DataFrame(kmeans_model.labels_, columns=['cluster'])],axis=1)\nkm_result.groupby('cluster').describe()['resp']\nkm_result['resp_pn'] = km_result['resp'].apply(lambda x:'p' if x>0 else 'n')\nkm_result.groupby(['cluster', 'resp_pn']).count()['resp'].plot.bar(color=['blue', 'red'])","81fdb51d":"# PCR + Clustering\nx = km_result.drop(['resp', 'resp_pn'], axis=1)\nx = sm.add_constant(x)\nmodel = sm.OLS(km_result['resp'][:100], x[:100])\nresult = model.fit()\nprint(result.summary())","3663fa34":"> \u4e0a\u56f3\u304b\u3089\u6982\u306d\u7b2c30\u4e3b\u6210\u5206\u7a0b\u5ea6\u3067\u7279\u5fb4\u91cf\u5168\u4f53\u306e90%\u3092\u8868\u73fe\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\u8abf\u3079\u3066\u307f\u305f\u3089\u7b2c16\u4e3b\u6210\u5206\u306780%\u3001\u7b2c20\u4e3b\u6210\u5206\u306785%\u3001\u7b2c28\u4e3b\u6210\u5206\u76ee\u306790%\u3092\u4e0a\u56de\u3063\u3066\u3044\u305f\u3002","96e626d8":"\u5168\u671f\u9593\u3067\u7dda\u5f62\u56de\u5e30\u3092\u884c\u3063\u305f\u7d50\u679c\u3001\u6c7a\u5b9a\u4fc2\u6570\u306f0.002\u3068\u9177\u3044\u3002\u5168\u671f\u9593\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3046\u306e\u306f\u8ce2\u660e\u3067\u306f\u306a\u3055\u305d\u3046\u3002\u5468\u671f\u6027\u306a\u3069\u3092\u8003\u616e\u3057\u305f\u307b\u3046\u304c\u826f\u3044\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u6b21\u306b\u3001\u6700\u521d\u306e100\u500b\u3092\u5bfe\u8c61\u306b\u6700\u9069\u5316\u3092\u884c\u3063\u305f\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\u3002","0c676f43":"## \u4e3b\u6210\u5206\u5206\u6790(PCA)","16f2e2d8":"## \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0(K-means)","165487cc":"## \u4e3b\u6210\u5206\u5206\u6790\uff0b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0","92336ecb":"\u305d\u3053\u305d\u3053\u30d5\u30a3\u30c3\u30c8\u3057\u3066\u3044\u308b\u69d8\u5b50\u304c\u898b\u3089\u308c\u308b\u3002\u30c7\u30fc\u30bf\u3092\u5c11\u306a\u304f\u3059\u308c\u3070\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u3088\u3046\u3067\u3042\u308b\u3002\u671f\u9593\u3092\u8907\u6570\u306b\u5206\u3051\u3001\u5404\u671f\u9593\u3054\u3068\u3067\u6700\u9069\u306a\u30e2\u30c7\u30eb\u3092\u63a1\u7528\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u306b\u3059\u308b\u3068\u826f\u3044\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u5206\u6790\u306b\u5165\u308b\u524d\u306b\u3001\u30ea\u30bf\u30fc\u30f3\u306e\u7279\u5fb4(\u5468\u671f\u6027\u306a\u3069)\u3092\u6700\u521d\u306b\u898b\u308b\u3079\u304d\u3060\u3063\u305f\u3002","a1b40916":"\u5404\u4e3b\u6210\u5206\u3084resp\u306e\u9593\u306b\u76f8\u95a2\u306f\u4f4e\u3044\u3053\u3068\u304c\u308f\u304b\u308b\u3002","b6d7ec3d":"\u30af\u30e9\u30b9\u30bf\u30fc\u3067\u5206\u3051\u308b\u3053\u3068\u3067\u30de\u30a4\u30ca\u30b9\u306e\u7279\u5fb4\u3092\u6349\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\u307e\u305f\u3001\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306f\u3001\uff13\u7a0b\u5ea6\u3067\u3082\u5341\u5206\u3068\u601d\u308f\u308c\u308b\u3002\u3072\u3068\u307e\u305a\u3001\u4eca\u56de\u306e\u7d50\u679c\u3092\u8e0f\u307e\u3048\u308b\u3068\u3001\u30e2\u30c7\u30eb\u958b\u767a\u306b\u304a\u3044\u3066\u30af\u30e9\u30b9\u30bf\u30fc\u756a\u53f7\u3092\u5165\u308c\u3066\u307f\u308b\u4fa1\u5024\u306f\u3042\u308a\u305d\u3046\u3060\u3002\u305f\u3060\u3001\u30dd\u30b8\u30c6\u30a3\u30d6\u306e\u7279\u5fb4\u306b\u3064\u3044\u3066\u898b\u308b\u3068\u3001\u30af\u30e9\u30b9\u30bf\u30fc\u65705\u306e(2,p)\u304c\u6349\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3092\u8e0f\u307e\u3048\u308b\u3068\u3001\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306f5\u3068\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3046\u3002","71bbdca8":"\u3042\u307e\u308a\u6539\u5584\u306f\u3055\u308c\u3066\u3044\u306a\u3044\u3002\u5909\u6570\u304c\u4e00\u3064\u5897\u3048\u305f\u3053\u3068\u3067\u3001\u88dc\u6b63\uff32\uff12\u306f\u4f4e\u4e0b\u3057\u3066\u3044\u308b\u3002\n\u305d\u3082\u305d\u3082\u4e3b\u6210\u5206\u5206\u6790\u3092\u884c\u3044\u3001\u6b21\u5143\u6570\u3092\u7e2e\u5c0f\u3055\u305b\u308b\u3053\u3068\u306b\u4fa1\u5024\u304c\u3042\u308b\u306e\u304b\u78ba\u8a8d\u306e\u305f\u3081\u3001\u5143\u306e\u7279\u5fb4\u91cf(feature_X)\u3067\u5168\u671f\u9593\u306b\u5bfe\u3057\u3066\u7dda\u5f62\u56de\u5e30\u3092\u884c\u3063\u3066\u307f\u305f\u3002","8c4b7c8f":"## \u30ea\u30bf\u30fc\u30f3\u3068\u5404\u4e3b\u6210\u5206\u306e\u95a2\u4fc2","72375063":"## \u30c7\u30fc\u30bf\u306e\u6a19\u6e96\u5316","414125ee":"## \u4e3b\u6210\u5206\u56de\u5e30\u30e2\u30c7\u30eb(PCR\u30e2\u30c7\u30eb)","1dd20c85":"\u30ab\u30a6\u30f3\u30c8\u30d9\u30fc\u30b9\u3067\u307f\u308b\u3068\u3001\u30af\u30e9\u30b9\u30bf\u30fc1\u30683\u3067\u306f\u30de\u30a4\u30ca\u30b9\u306e\u65b9\u304c\u6570\u304c\u591a\u3044\u3053\u3068\u304c\u308f\u304b\u308b\u3002\u30af\u30e9\u30b9\u30bf\u30fc1\u306b\u3064\u3044\u3066\u306f\u3001\u5e73\u5747\u3082\u30de\u30a4\u30ca\u30b9\u3067\u3042\u308a\u3001\u30de\u30a4\u30ca\u30b9\u306e\u7279\u6027\u3092\u6301\u3061\u305d\u3046\u3060\u3002"}}