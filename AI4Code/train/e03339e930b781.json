{"cell_type":{"0b30bf6d":"code","40b0de24":"code","5838159a":"code","33e0a3c7":"code","4d28bbf9":"code","b4f86e10":"code","05f7c438":"code","ab4f9da2":"code","073850df":"code","385dfd04":"code","a8131d5f":"code","7e9025ba":"code","80950862":"code","dcaa83e1":"code","2669b60a":"code","fee24619":"code","1739bce3":"code","c65075b3":"code","1db3e687":"code","f94f4812":"code","c86f5d5d":"code","4fd49486":"code","9f863e5f":"code","3404a763":"code","5610edfc":"code","0727608d":"code","0dda439c":"code","31cc4121":"code","22fbc0d0":"code","29af1d3b":"code","add4ce2d":"code","75334358":"code","3bd612cc":"code","c6244f15":"code","ec7f5846":"code","26f7ceb0":"code","be11930a":"code","650ac0fd":"code","9ea4f660":"code","9ad71813":"code","8711d1c0":"code","6141738a":"markdown","cf712057":"markdown","e0c09ef5":"markdown","a1d2ea88":"markdown","1b28655d":"markdown","ed51531a":"markdown","ae06befc":"markdown","8ceb86c1":"markdown","e8c1ae9b":"markdown","7e3bf20d":"markdown","b7227662":"markdown","5465f369":"markdown","e920d3d8":"markdown","b7063661":"markdown","613bcbe6":"markdown","c97961a4":"markdown"},"source":{"0b30bf6d":"#Importing required packages.\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\n%matplotlib inline","40b0de24":"#Loading dataset\nwine = pd.read_csv('..\/input\/winequality-red.csv')","5838159a":"#Let's check how the data is distributed\nwine.head()","33e0a3c7":"#Information about the data columns\nwine.info()","4d28bbf9":"#Here we see that fixed acidity does not give any specification to classify the quality.\nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'fixed acidity', data = wine)","b4f86e10":"#Here we see that its quite a downing trend in the volatile acidity as we go higher the quality \nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'volatile acidity', data = wine)","05f7c438":"#Composition of citric acid go higher as we go higher in the quality of the wine\nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'citric acid', data = wine)","ab4f9da2":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'residual sugar', data = wine)","073850df":"#Composition of chloride also go down as we go higher in the quality of the wine\nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'chlorides', data = wine)","385dfd04":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'free sulfur dioxide', data = wine)","a8131d5f":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'total sulfur dioxide', data = wine)","7e9025ba":"#Sulphates level goes higher with the quality of wine\nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'sulphates', data = wine)","80950862":"#Alcohol level also goes higher as te quality of wine increases\nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'alcohol', data = wine)","dcaa83e1":"#Making binary classificaion for the response variable.\n#Dividing wine as good and bad by giving the limit for the quality\nbins = (2, 6.5, 8)\ngroup_names = ['bad', 'good']\nwine['quality'] = pd.cut(wine['quality'], bins = bins, labels = group_names)","2669b60a":"#Now lets assign a labels to our quality variable\nlabel_quality = LabelEncoder()","fee24619":"#Bad becomes 0 and good becomes 1 \nwine['quality'] = label_quality.fit_transform(wine['quality'])","1739bce3":"wine['quality'].value_counts()","c65075b3":"sns.countplot(wine['quality'])","1db3e687":"#Now seperate the dataset as response variable and feature variabes\nX = wine.drop('quality', axis = 1)\ny = wine['quality']","f94f4812":"#Train and Test splitting of data \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","c86f5d5d":"#Applying Standard scaling to get optimized result\nsc = StandardScaler()","4fd49486":"X_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","9f863e5f":"rfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train, y_train)\npred_rfc = rfc.predict(X_test)","3404a763":"#Let's see how our model performed\nprint(classification_report(y_test, pred_rfc))","5610edfc":"#Confusion matrix for the random forest classification\nprint(confusion_matrix(y_test, pred_rfc))","0727608d":"rfc = RandomForestClassifier(n_estimators=200)\nrfc.fit(X_train, y_train)\npred_rfc = rfc.predict(X_test)","0dda439c":"#Let's see how our model performed\nprint(classification_report(y_test, pred_rfc))","31cc4121":"#Confusion matrix for the random forest classification\nprint(confusion_matrix(y_test, pred_rfc))","22fbc0d0":"rfc1 = RandomForestClassifier(n_estimators=20)\nrfc.fit(X_train, y_train)\npred_rfc = rfc.predict(X_test)","29af1d3b":"#Let's see how our model performed\nprint(classification_report(y_test, pred_rfc))","add4ce2d":"#Confusion matrix for the random forest classification\nprint(confusion_matrix(y_test, pred_rfc))","75334358":"sgd = SGDClassifier(penalty=None)\nsgd.fit(X_train, y_train)\npred_sgd = sgd.predict(X_test)","3bd612cc":"print(classification_report(y_test, pred_sgd))","c6244f15":"print(confusion_matrix(y_test, pred_sgd))","ec7f5846":"svc = SVC()\nsvc.fit(X_train, y_train)\npred_svc = svc.predict(X_test)","26f7ceb0":"print(classification_report(y_test, pred_svc))","be11930a":"#Finding best parameters for our SVC model\nparam = {\n    'C': [0.1,0.8,0.9,1,1.1,1.2,1.3,1.4],\n    'kernel':['linear', 'rbf'],\n    'gamma' :[0.1,0.8,0.9,1,1.1,1.2,1.3,1.4]\n}\ngrid_svc = GridSearchCV(svc, param_grid=param, scoring='accuracy', cv=10)","650ac0fd":"grid_svc.fit(X_train, y_train)","9ea4f660":"#Best parameters for our svc model\ngrid_svc.best_params_","9ad71813":"#Let's run our SVC again with the best parameters.\nsvc2 = SVC(C = 1.2, gamma =  0.9, kernel= 'rbf')\nsvc2.fit(X_train, y_train)\npred_svc2 = svc2.predict(X_test)\nprint(classification_report(y_test, pred_svc2))","8711d1c0":"#Now lets try to do some evaluation for random forest model using cross validation.\nrfc_eval = cross_val_score(estimator = rfc, X = X_train, y = y_train, cv = 10)\nrfc_eval.mean()","6141738a":"### Random forest accuracy increases from 87% to 91 % using cross validation score","cf712057":"#### 84% accuracy using stochastic gradient descent classifier","e0c09ef5":"#### Random forest gives the accuracy of 87%","a1d2ea88":"### Random Forest Classifier","1b28655d":"## **Let's do some plotting to know how the data columns are distributed in the dataset**","ed51531a":"### SVC improves from 86% to 90% using Grid Search CV","ae06befc":"### Thank for going through this notebook","8ceb86c1":"\n\n## Stochastic Gradient Decent Classifier","e8c1ae9b":"## Our training and testing data is ready now to perform machine learning algorithm","7e3bf20d":"## If you find this notebook useful then please upvote. So the beginners can find easily","b7227662":"# **Thank You for opening this notebook!!!**\n\n## **This notebook tutorial is for those who are beginners to machine learning.**\n\n*In this notebook, First I have done some exploration on the data using matplotlib and seaborn.\nThen, I use different classifier models to predict the quality of the wine.*\n\n**1. Random Forest Classifier**\n\n**2. Stochastic Gradient Descent Classifier**\n\n**3. Support Vector Classifier(SVC) **\n\n*Then I use cross validation evaluation technique to optimize the model performance.*\n\n**1. Grid Search CV**\n\n**2. Cross Validation Score**\n\n## **If you find this notebook useful then please upvote.**","5465f369":"## Support Vector Classifier","e920d3d8":"## Cross Validation Score for random forest and SGD","b7063661":"## Preprocessing Data for performing Machine learning algorithms","613bcbe6":"#### Support vector classifier gets 86%","c97961a4":"## Let's try to increase our accuracy of models\n## Grid Search CV"}}