{"cell_type":{"bc77273f":"code","4cf830d1":"code","d2163960":"code","cce87d73":"code","41be7c49":"code","188895fe":"code","64958a5b":"code","14fa14fe":"code","8b4d4a63":"code","0bfe8698":"code","172d8a65":"code","de0ae8a3":"code","0120c1af":"code","fc09e118":"code","4a97ea87":"code","d14aef32":"code","941f1faf":"code","ee713ddb":"code","ac603285":"code","c911ed09":"code","40a5729f":"code","22282d3f":"code","3706250b":"code","bca8f890":"code","73a3ed93":"code","31f9161e":"code","cb004545":"code","8511f833":"code","47ee780b":"code","417c633a":"code","ce14447e":"markdown","04eb6719":"markdown","a7bba461":"markdown","2dd4369e":"markdown","7715c332":"markdown","2d1ba81e":"markdown","44f8029c":"markdown","cc2a7848":"markdown","b202cc6a":"markdown","9bd13ff5":"markdown","e71ecd0e":"markdown","ec27c31a":"markdown","a1a7dfd6":"markdown","08e7d5b8":"markdown","d92f508b":"markdown","fb2b38be":"markdown","ba63495b":"markdown","5e052e0a":"markdown","1f1bf0d3":"markdown","e285b089":"markdown","a023bc7b":"markdown","1f2d8962":"markdown","e95fad59":"markdown","02b53d98":"markdown"},"source":{"bc77273f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.tree import DecisionTreeClassifier,plot_tree\nfrom sklearn.model_selection import cross_val_score\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nimport seaborn as sns; sns.set()\n","4cf830d1":"records = pd.DataFrame(pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv'))","d2163960":"records.isna().sum()\n","cce87d73":"for i in records.columns:\n    print(\"'\"+i+\"',\")","41be7c49":"data= records[[\n'age',\n'anaemia',\n'creatinine_phosphokinase',\n'diabetes',\n'ejection_fraction',\n'high_blood_pressure',\n'platelets',\n'serum_creatinine',\n'serum_sodium',\n'sex',\n'smoking',\n'time',]]\ntarget = records['DEATH_EVENT']","188895fe":"data","64958a5b":"len(data)","14fa14fe":"def normalize(x):\n    return (x-np.mean(x))\/np.std(x)","8b4d4a63":"def show_tree(data,target, depth):\n    decision_tree = DecisionTreeClassifier(criterion=\"gini\", random_state=0, max_depth=depth, )\n    decision_tree = decision_tree.fit(data, target)\n    my_dpi = 50\n    plt.figure(figsize=(1600\/my_dpi, 1800\/my_dpi), dpi=my_dpi)\n    plot_tree(decision_tree, filled=True)\n    plt.savefig('tree'+str(depth)+'.png', dpi=my_dpi)\n    plt.show()\n    return decision_tree","0bfe8698":"train = normalize(data[:int(0.7*len(data))])\ndev = normalize(data[int(0.7*len(data)):int(0.85*len(data))])\ntest = normalize(data[int(0.85*len(data)):])\n\ntarget_train = target[:int(0.7*len(data))]\ntarget_dev = target[int(0.7*len(data)):int(0.85*len(data))]\ntarget_test = target[int(0.85*len(data)):]","172d8a65":"len(test) + len(dev) + len(train)","de0ae8a3":"target_train","0120c1af":"trained = show_tree(train, target_train, 3)\nprint(\"Dev accuracy: \",trained.score(dev, target_dev))\nprint(\"TRAIN accuracy: \",trained.score(train, target_train))\nprint(\"Test accuracy: \",trained.score(test, target_test))","fc09e118":"trained = show_tree(train, target_train, 7)\nprint(\"Dev accuracy: \",trained.score(dev, target_dev))\nprint(\"TRAIN accuracy: \",trained.score(train, target_train))\nprint(\"Test accuracy: \",trained.score(test, target_test))","4a97ea87":"trained = show_tree(train, target_train, 10)\nprint(\"TRAIN accuracy: \",trained.score(train, target_train))\nprint(\"Dev accuracy: \",trained.score(dev, target_dev))\nprint(\"Test accuracy: \",trained.score(test, target_test))","d14aef32":"train","941f1faf":"def add_noise(x):\n    for i in x.columns:\n        x[i] += np.random.uniform()\n    return x","ee713ddb":"train_noisy = add_noise(train)","ac603285":"trained = show_tree(train_noisy, target_train, 3)\nprint(\"Dev accuracy: \",trained.score(dev, target_dev))\nprint(\"Test accuracy: \",trained.score(test, target_test))","c911ed09":"trained = show_tree(train, target_train, 7)\nprint(\"Dev accuracy: \",trained.score(dev, target_dev))\nprint(\"Test accuracy: \",trained.score(test, target_test))","40a5729f":"trained = show_tree(train, target_train, 10)\nprint(\"Dev accuracy: \",trained.score(dev, target_dev))\nprint(\"Test accuracy: \",trained.score(test, target_test))","22282d3f":"pca = PCA(0.50).fit(train_noisy)\ncomponents = pca.transform(train_noisy)\nfiltered = pca.inverse_transform(components)\n","3706250b":"trained = show_tree(filtered, target_train, 3)\nprint(\"Dev accuracy: \",trained.score(dev, target_dev))\nprint(\"Test accuracy: \",trained.score(test, target_test))","bca8f890":"def draw_vector(v0, v1, ax=None):\n    ax = ax or plt.gca()\n    arrowprops=dict(arrowstyle='->',\n                    linewidth=2,\n                    shrinkA=0, shrinkB=0)\n    ax.annotate('', v1, v0, arrowprops=arrowprops)\n","73a3ed93":"def pca_(x):\n    pca = PCA()\n    pca.fit(x)\n    index = list(np.argsort(pca.explained_variance_ratio_)[::-1])\n    s = sum(pca.explained_variance_ratio_)\n    while s > 0.95:\n        index.pop(len(index)-1)\n        s = sum(pca.explained_variance_ratio_[index])\n    return pca","31f9161e":"model = pca_(train)\nprint(model.explained_variance_ratio_)","cb004545":"model = pca_(train)\ni, j = 0, 1\nplt.scatter(train['age'], train['serum_creatinine'])\nfor length, vector in zip(model.explained_variance_, model.components_):\n    v = vector * 3 * np.sqrt(length)\n    print([model.mean_[i], model.mean_[j]], [model.mean_[i] + v[i], model.mean_[j] + v[j]])\n    draw_vector([model.mean_[i], model.mean_[j]], [model.mean_[i] + v[i], model.mean_[j] + v[j]])\nplt.axis('equal');\n","8511f833":"pca_noisy = pca_(train_noisy)\ni, j = 0, 1\nplt.scatter(train_noisy['age'], train_noisy['serum_creatinine'])\nfor length, vector in zip(pca_noisy.explained_variance_, pca_noisy.components_):\n    v = vector * 3 * np.sqrt(length)\n    draw_vector([pca_noisy.mean_[i], pca_noisy.mean_[j]], [pca_noisy.mean_[i] + v[i], pca_noisy.mean_[j] + v[j]])\nplt.axis('equal');","47ee780b":"pca = PCA(0.50).fit(train_noisy)\ncomponents = pca.transform(train_noisy)\nfiltered = pca.inverse_transform(components)","417c633a":"pca_without = pca_(filtered)\ni, j = 0, 1\nplt.scatter(filtered[:,0], filtered[:,7])\nfor length, vector in zip(pca_without.explained_variance_, pca_without.components_):\n    v = vector * 3 * np.sqrt(length)\n    draw_vector([pca_without.mean_[i], pca_without.mean_[j]], [pca_without.mean_[i] + v[i], pca_without.mean_[j] + v[j]])\nplt.axis('equal');","ce14447e":"\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u0456\u0448\u0435 \u043f\u0440\u043e \u0442\u0435, \u044f\u043a \u0431\u0443\u0434\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u0435\u0440\u0435\u0432\u043e \u0440\u0456\u0448\u0435\u043d\u043d\u044f \u043c\u043e\u0436\u043d\u0430 \u043f\u043e\u0447\u0438\u0442\u0430\u0442\u0438 \u0442\u0443\u0442: https:\/\/colab.research.google.com\/drive\/16-07LFuEoX2Zd_bb-JZgVnMse6l3k-RK?usp=sharing","04eb6719":"\u041f\u0456\u0441\u043b\u044f \u0437\u043d\u0435\u0448\u0443\u043c\u043b\u0435\u043d\u043d\u044f \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e PCA, \u0441\u0438\u0442\u0443\u0430\u0446\u0456\u044f \u043d\u0435 \u0441\u0442\u0430\u043b\u0430 \u043a\u0440\u0430\u0449\u043e\u044e...\n","a7bba461":"# Preprocessing","2dd4369e":"# max_depth=10","7715c332":"\u0414\u0456\u043b\u044e \u0434\u0430\u043d\u0456 \u043d\u0430 \u0442\u0440\u0438 \u0447\u0430\u0441\u0442\u0438\u043d\u0438, \u0446\u0435 \u0440\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0449\u043e\u0431 \u043d\u0430 \u0434\u0430\u043d\u0438\u0445 \u0442\u0440\u0435\u0439\u043d\u0443 - \u0442\u0440\u0435\u043d\u0443\u0432\u0430\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u044c, \u043d\u0430 \u0434\u0430\u043d\u0438\u0445 \u0434\u0435\u0432\u0443 - \u0432\u0438\u0431\u0438\u0440\u0430\u0442\u0438 \u043d\u0430\u0439\u043a\u0440\u0430\u0449\u0456 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0456, \u043d\u0430 \u0442\u0435\u0441\u0442\u0430\u0445 - \u0442\u0435\u0441\u0442\u0438\u0442\u0438,\u0449\u043e\u0431 \u0437\u043d\u0430\u0442\u0438 \u044f\u043a \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0434\u0435 \u043f\u043e\u0432\u043e\u0434\u0438\u0442\u0438\u0441\u044c \u0432 \u0436\u0438\u0442\u0442\u0456(\u0447\u0438 \u0432\u043e\u043d\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0442\u0440\u0435\u043d\u043e\u0432\u0430\u043d\u0430)","2d1ba81e":"\u0456 \u0437\u0430\u0431\u0438\u0440\u0430\u0454\u043c\u043e \u0448\u0443\u043c","44f8029c":"\u0444\u0443\u043d\u043a\u0446\u0456\u044f pca, \u0437\u0430\u043b\u0438\u0448\u0430\u0454\u043c\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0438 \u0437 \u043d\u0430\u0439\u0431\u0456\u043b\u044c\u0448\u0438\u043c\u0438 \u0432\u043b\u0430\u0441\u043d\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c\u0438, \u0449\u043e\u0431 \u0437\u0431\u0435\u0440\u0435\u0433\u0442\u0438 95% \u0432\u0430\u0440\u0456\u0435\u043d\u0441\u0443. \u0420\u0435\u0448\u0442\u0430 \u0432\u0432\u0430\u0436\u0430\u0454\u0442\u044c\u0441\u044f \u043d\u0435\u043f\u043e\u0442\u0440\u0456\u0431\u043d\u0438\u043c, \u043e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0432\u043e\u043d\u0438 \u043d\u0435 \u043d\u0435\u0441\u0443\u0442\u044c \u0431\u0430\u0433\u0430\u0442\u043e \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0457.","cc2a7848":"\u0414\u0456\u043b\u044e \u043d\u0430 \u0444\u0456\u0447\u0456 \u0456 \u0446\u0456\u043b\u044c\u043e\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f","b202cc6a":"\u0422\u0443\u0442, \u0437\u043c\u0456\u043d\u044e\u044e\u0447\u0438 \u0433\u043b\u0438\u0431\u0438\u043d\u0443 \u0434\u0435\u0440\u0435\u0432\u0430, \u043c\u043e\u0436\u043d\u0430 \u0441\u043f\u043e\u0441\u0442\u0435\u0440\u0456\u0433\u0430\u0442\u0438 \u0437\u0430 \u043f\u0435\u0440\u0435\u0442\u0440\u0435\u043d\u0443\u0432\u0430\u043d\u043d\u044f\u043c)\n\u041d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434 \u043f\u0440\u0438 \u0433\u043b\u0438\u0431\u0438\u043d\u0456 3, \u0434\u0435\u0440\u0435\u0432\u043e \u0434\u0430\u043b\u043e +- \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u0456 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0438 \u0442\u043e\u0447\u043d\u0456\u0441\u0442\u0456 \u043d\u0430 \u0432\u0441\u0456\u0445 \u0432\u0438\u0431\u0456\u0440\u043a\u0430\u0445. \u0410 \u043e\u0442 \u043f\u0440\u0438 \u0433\u043b\u0438\u0431\u0438\u043d\u0456 10 - \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e \u043f\u0435\u0440\u0435\u0442\u0440\u0435\u043d\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f - \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0456 \u0442\u043e\u0447\u043d\u0456\u0441\u0442\u044c 1, \u0430 \u043d\u0430 \u0434\u0435\u0432\u0456 \u0456 \u0442\u0435\u0441\u0442\u0456 \u043c\u0435\u043d\u0448\u0435 0.5","9bd13ff5":"\u0424\u0443\u043d\u043a\u0446\u0456\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457(\u041d\u043e\u0440\u043c\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u044f \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u0430 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0449\u043e\u0431 \u043c\u043e\u0436\u043d\u0430 \u0431\u0443\u043b\u043e \u043f\u0440\u0430\u0446\u044e\u0432\u0430\u0442\u0438 \u0437 PCA \u043f\u043e\u0442\u0456\u043c)","e71ecd0e":"**PCA without noise**","ec27c31a":"\u041f\u0440\u043e\u0441\u0442\u043e \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u043a\u0430 \u0447\u0438 \u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0456\u043b\u0438\u043b\u0430)","a1a7dfd6":"**PCA with noise**","08e7d5b8":"# With noise","d92f508b":"\u0414\u043e\u0434\u0430\u0454\u043c\u043e \u0448\u0443\u043c\n\n\u0421\u0442\u0432\u043e\u0440\u044e\u0454\u043c\u043e \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437\u0430 \u0440\u0456\u0432\u043d\u043e\u043c\u0456\u0440\u043d\u0438\u043c \u0440\u043e\u0437\u043f\u043e\u0434\u0456\u043b\u043e\u043c \u0456 \u0434\u043e\u0434\u0430\u0454\u043c\u043e \u0434\u043e \u043d\u0430\u044f\u0432\u043d\u0438\u0445","fb2b38be":"# max_depth=3","ba63495b":"# Decision Tree building","5e052e0a":"\u041f\u0435\u0440\u0435\u0432\u0456\u0440\u043a\u0430 \u043d\u0430 \u0432\u0456\u0434\u0441\u0443\u0442\u043d\u0456 \u0434\u0430\u043d\u0456, \u044f\u043a \u0431\u0430\u0447\u0438\u043c\u043e, \u0432\u0456\u0434\u0441\u0442\u0443\u0442\u043d\u0456 \u0434\u0430\u043d\u0456 \u0432\u0456\u0434\u0441\u0443\u0442\u043d\u0456)","1f1bf0d3":"\u0414\u0438\u0432\u0438\u043c\u043e\u0441\u044c \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0438 \u043d\u0430\u0448\u0438\u0445 \u0434\u0435\u0440\u0435\u0432 - \u0432\u043e\u0447\u0435\u0432\u0438\u0434\u044c \u0432\u043e\u043d\u0438 \u043f\u043e\u0433\u0456\u0440\u0448\u0438\u043b\u0438\u0441\u044c.","e285b089":"# PCA Part","a023bc7b":"\u0417\u0431\u0435\u0440\u0456\u0433\u0430\u0454\u043c\u043e \u0434\u0430\u043d\u0456 \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c","1f2d8962":"# max_depth=7","e95fad59":"\u0412\u0456\u0437\u0443\u0430\u043b\u0456\u0437\u043e\u0432\u0443\u0454\u043c\u043e \u0432\u043b\u0430\u0441\u043d\u0456 \u0432\u0435\u043a\u0442\u043e\u0440\u0438","02b53d98":"\u0424\u0443\u043d\u043a\u0446\u0456\u044f \u0434\u043b\u044f \u0432\u0456\u0434\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0434\u0435\u0440\u0435\u0432\u0430"}}