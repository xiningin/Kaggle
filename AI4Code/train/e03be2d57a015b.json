{"cell_type":{"d0df1729":"code","39674e23":"code","a875ac86":"code","d4fb5d4a":"code","3082e5b2":"code","9e7f5dd0":"code","bd0fdc61":"code","c5be59b6":"code","4af10bdb":"code","ba14b5ef":"code","2675d396":"code","6eef9d0e":"code","781ced50":"code","c1dadf79":"code","8931a10d":"code","2f579226":"code","490b6702":"code","8e012249":"code","1cbab608":"code","93dbf559":"code","12d0d1f8":"code","005e77bc":"code","47ade244":"code","287a3fe4":"code","5b995285":"markdown","36b62473":"markdown","0bc78730":"markdown","1824a486":"markdown","9d904269":"markdown","25578946":"markdown","5f1a5f12":"markdown","6b6aa991":"markdown","6da761e7":"markdown","6e46cd88":"markdown","6b0a8948":"markdown","1228bc0c":"markdown","380fa2d6":"markdown"},"source":{"d0df1729":"#!pip install optuna \nimport optuna","39674e23":"from lightgbm import LGBMClassifier\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split,StratifiedKFold\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","a875ac86":"train = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest  = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')\nsub = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')","d4fb5d4a":"train.head()","3082e5b2":"#complete embarked with mode\ntrain['Embarked'].fillna(train['Embarked'].mode()[0], inplace = True)\ntest['Embarked'].fillna(test['Embarked'].mode()[0], inplace = True)\n\n#complete sex with mode\ntrain['Sex'].fillna(train['Sex'].mode()[0], inplace = True)\ntest['Sex'].fillna(test['Sex'].mode()[0], inplace = True)\n\n#complete missing age with mean\ntrain['Age'].fillna(train['Age'].mean(), inplace = True)\ntest['Age'].fillna(test['Age'].mean(), inplace = True)\n\n#complete missing fare with mean\ntrain['Fare'].fillna(test['Fare'].median(), inplace = True)\ntest['Fare'].fillna(test['Fare'].median(), inplace = True)","9e7f5dd0":"columns = [c for c in train.columns if c not in ['PassengerId','Cabin','Ticket','Survived','Name']]","bd0fdc61":"train_objs_num = len(train)\ndataset = pd.concat(objs=[train[columns], test[columns]], axis=0)\ndataset_preprocessed = pd.get_dummies(dataset,columns=['Sex','Embarked','Parch','SibSp'])\ntrain_preprocessed = dataset_preprocessed[:train_objs_num]\ntest_preprocessed = dataset_preprocessed[train_objs_num:]","c5be59b6":"def objective(trial,data=train_preprocessed,target=train['Survived']):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42,stratify = train['Survived'])\n    param = {\n        'metric': 'binary_logloss', \n        'random_state': 48,\n        'n_estimators': 20000,\n        'reg_alpha': trial.suggest_loguniform('reg_alpha', 1e-3, 10.0),\n        'reg_lambda': trial.suggest_loguniform('reg_lambda', 1e-3, 10.0),\n        'colsample_bytree': trial.suggest_categorical('colsample_bytree', [0.3,0.4,0.5,0.6,0.7,0.8,0.9, 1.0]),\n        'subsample': trial.suggest_categorical('subsample', [0.4,0.5,0.6,0.7,0.8,1.0]),\n        'bagging_freq': trial.suggest_int('bagging_freq', 1, 5),\n        'learning_rate': trial.suggest_categorical('learning_rate', [0.008,0.01,0.014,0.017,0.02]),\n        'max_depth': trial.suggest_categorical('max_depth', [30,100]),\n        'num_leaves' : trial.suggest_int('num_leaves', 10, 300),\n        'min_child_samples': trial.suggest_int('min_child_samples', 10, 300),\n        'cat_smooth' : trial.suggest_int('cat_smooth', 1, 100)\n    }\n    model = LGBMClassifier(**param)   \n    \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    \n    preds = model.predict(test_x)\n    \n    accuracy = accuracy_score(test_y, preds)\n    \n    return accuracy","4af10bdb":"study = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=50)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","ba14b5ef":"study.trials_dataframe()","2675d396":"#plot_optimization_histor: shows the scores from all trials as well as the best score so far at each point.\noptuna.visualization.plot_optimization_history(study)","6eef9d0e":"#plot_parallel_coordinate: interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","781ced50":"'''plot_slice: shows the evolution of the search. You can see where in the hyperparameter space your search\nwent and which parts of the space were explored more.'''\noptuna.visualization.plot_slice(study)","c1dadf79":"#plot_contour: plots parameter interactions on an interactive chart. You can choose which hyperparameters you would like to explore.\noptuna.visualization.plot_contour(study, params=['num_leaves',\n                            'max_depth',\n                            'subsample',\n                            'learning_rate'])","8931a10d":"#Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","2f579226":"#Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","490b6702":"params=study.best_params   \nparams['random_state'] = 48\nparams['n_estimators'] = 20000 \nparams['metric'] = 'binary_logloss'","8e012249":"params","1cbab608":"kf = StratifiedKFold(n_splits=5,random_state=48,shuffle=True)                  \naccuracy=[]   # list contains accuracy for each fold  \nn=0   \nfor trn_idx, test_idx in kf.split(train_preprocessed,train['Survived']):\n    X_tr,X_val=train_preprocessed.iloc[trn_idx],train_preprocessed.iloc[test_idx]\n    y_tr,y_val=train['Survived'].iloc[trn_idx],train['Survived'].iloc[test_idx]\n    model = LGBMClassifier(**params) \n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=200,verbose=False) \n    sub[str(n)] = model.predict(test_preprocessed)\n    accuracy.append(accuracy_score(y_val, model.predict(X_val))) \n    print(n+1,accuracy[n])                                                                                       \n    n+=1 ","93dbf559":"np.mean(accuracy)  ","12d0d1f8":"from optuna.integration import lightgbm as lgb\nlgb.plot_importance(model, max_num_features=10, figsize=(10,10))\nplt.show()\n","005e77bc":"df=sub[['0','1','2','3','4']].mode(axis=1) # select the most frequent predicted class by our model\nsub['Survived']=df[0]    \nsub=sub[['PassengerId','Survived']]\nsub['Survived']=sub['Survived'].apply(lambda x : int(x))\nsub.to_csv('submission.csv',index=False)","47ade244":"sub","287a3fe4":"# # Please If you find this kernel helpful, upvote it to help others see it \ud83d\ude0a \ud83d\ude0b","5b995285":"### This function uses LGBMClassifier model, takes \n* the data\n* the target\n* trial(How many executions we will do)  \n#### and returns\n* accuracy","36b62473":"# Basic Concepts\nSo, We use the terms study and trial as follows:\n* Study: optimization based on an objective function\n* Trial: a single execution of the objective function","0bc78730":"# Let's do some Quick Visualization for Hyperparameter Optimization Analysis\n### Optuna provides various visualization features in optuna.visualization to analyze optimization results visually","1824a486":"## Notes:\n* Note that I used some LGBMClassifier hyperparameters from LGBM official site. \n* So if you like to add more parameters or change them, check this [link](https:\/\/lightgbm.readthedocs.io\/en\/latest\/Parameters.html) \n* Also I used early_stopping_rounds to avoid overfiting","9d904269":"## One Hot Encoding for Encoding Categorical Features","25578946":"# Let's create an LGBMClassifier model with the best hyperparameters","5f1a5f12":"## Impute missing values","6b6aa991":"# Submission","6da761e7":"# Optuna: A hyperparameter optimization framework","6e46cd88":"## All thing is ready So let's start \ud83c\udfc4\u200d\n* Note that the objective of our fuction is to maxmize the accuracy that's why I set direction='maximize'\n* you can vary n_trials(number of executions) ","6b0a8948":"* *In This Kernel I will use the amazing **Optuna** to find the best hyparameters of LGBM*","1228bc0c":"## Let's build our optimization function using optuna","380fa2d6":"**So, Optuna is an automatic hyperparameter optimization software framework, particularly designed for machine learning. It features an imperative, define-by-run style user API. The code written with Optuna enjoys high modularity, and the user of Optuna can dynamically construct the search spaces for the hyperparameters.** \n* To learn more about Optuna check this [link](https:\/\/optuna.org\/)"}}