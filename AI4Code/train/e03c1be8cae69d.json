{"cell_type":{"8756ca0c":"code","15d712b3":"code","834e4159":"code","18f8b94d":"code","35c4c381":"code","48120b95":"code","44c7dad3":"code","429e61a9":"code","fded08e7":"code","70ecacce":"code","1a76b632":"code","90c52813":"code","ec78fd80":"code","f2a41386":"code","10265d30":"code","1128a8e5":"code","466081fa":"code","a0db21b1":"markdown","60df2839":"markdown","ca8d5f49":"markdown","485086a3":"markdown","d11d5068":"markdown","72994f31":"markdown","81d87077":"markdown","d517bfa7":"markdown","0c19aa88":"markdown","94180ef4":"markdown","963af170":"markdown","802ebf1f":"markdown","29528352":"markdown","143ddd76":"markdown"},"source":{"8756ca0c":"from IPython.display import HTML\n\nHTML('<center><iframe width=\"700\" height=\"400\" src=\"https:\/\/www.youtube.com\/embed\/dIUktr3Zpyk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe><\/center>')","15d712b3":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('white')","834e4159":"df_cur = pd.read_csv(\"\/kaggle\/input\/euro-exchange-daily-rates-19992020\/euro-daily-hist_1999_2021.csv\", parse_dates=[\"Period\\\\Unit:\"])\ndf_cur.sample(5)","18f8b94d":"names = str.maketrans('', '', '[]')\ndf_cur.columns = df_cur.columns.str.translate(names)\ndf_cur.columns = df_cur.columns.str.strip()\ndf_cur.set_index('Period\\\\Unit:', inplace=True)\ndf_cur.index.rename('DateSeries', inplace = True)\ndf_cur.info()","35c4c381":"cols = list(df_cur)\ndf_cur[cols] = df_cur[cols].apply(pd.to_numeric, errors='coerce')\ndf_cur.info()","48120b95":"df_cur.isnull().sum(axis = 0)","44c7dad3":"n = df_cur.index[df_cur.isnull().all(1)]\nprint(n)\nprint('Number of NaN rows: {}'.format(len(n)))","429e61a9":"df_cur = df_cur.drop(n)","fded08e7":"#df_cur = df_cur.fillna(method='backfill')","70ecacce":"df_cur.describe(include='all')","1a76b632":"df_cur1 = df_cur.reset_index()\ndf_melted=df_cur1.melt(id_vars=['DateSeries'], var_name='Currency name', value_name='Value')\ndf_melted.head(5)","90c52813":"dataUSDGBP = df_melted.loc[(df_melted['Currency name'] == 'US dollar') | (df_melted['Currency name'] == 'UK pound sterling')]\ndataUSDGBP.sample(5)","ec78fd80":"fig = plt.figure(figsize=(15,8))\nplt.grid(which='major', linewidth = 2)\nplt.minorticks_on()\nplt.grid(which='minor', linewidth = 0.5)\nsns.lineplot(x='DateSeries', y='Value', hue='Currency name', data = dataUSDGBP)\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.);","f2a41386":"dataUSD = dataUSDGBP.loc[(dataUSDGBP['Currency name'] == 'US dollar')]\ndataUSD.set_index('DateSeries', inplace=True)\nprint('------USD: 5 largest values by dates------')\nprint(dataUSD['Value'].nlargest().sort_values(ascending = False))\nprint('------USD: 5 smallest values by dates-----')\nprint(dataUSD['Value'].nsmallest().sort_values(ascending = False))","10265d30":"dataGBP = dataUSDGBP.loc[(dataUSDGBP['Currency name'] == 'UK pound sterling')]\ndataGBP.set_index('DateSeries', inplace=True)\nprint('------GBP: 5 largest values by dates------')\nprint(dataGBP['Value'].nlargest().sort_values(ascending = False))\nprint('------GBP: 5 smallest values by dates-----')\nprint(dataGBP['Value'].nsmallest().sort_values(ascending = False))","1128a8e5":"dataSIT = df_melted.loc[(df_melted['Currency name'] == 'Slovenian tolar')]\ndataSIT;","466081fa":"fig = plt.figure(figsize=(15,8))\n\nplt.grid(which='major', linewidth = 2)\nplt.minorticks_on()\nplt.grid(which='minor', linewidth = 0.5)\nsns.lineplot(x='DateSeries', y='Value', hue='Currency name', data = dataSIT)\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.);","a0db21b1":"# Example: EUR\/USD and EUR\/GBP\n\n* Create new dataframe `dataUSDGBP` containig only values of US dollar and UK pound sterling amd get 5 sample rows;\n* Plot the graph including both currencies in rates of Euro.","60df2839":"* U can replace currency which doesn't exist anymore by the last value it had before it was replaced by the Euro \u20ac: Cypriot pound (2007), Estonian kroon (2011), Greek drachma (2002), Lithuanian litas (2015), Latvian lats (2014), Maltese lira (2008), Slovenian tolar (2007), Slovak koruna (2009). For now this cell is commented.\n","ca8d5f49":"# Melt data\n* Change the structure of dataframe:   \n     reset index and make 2 columns: one with all the currency types: `Currency name` and another with `Value` attribute.","485086a3":"### Get final description of every column in a dataframe:","d11d5068":"* find rows with only NaN values: print them by index (DateSeries) and delete these rows:","72994f31":"### Dataframe:  \n* has 1 unique DatetimeIndex (column `DateSeries`) and 40 data columns of different currencies;\n* Not all of 40 data columns were converted straight to `float64` type. `Object` type indicates a column has text. It's most common to one-hot encode these \"object\" columns, since they can't be plugged directly into most models;\n* there is null data in some columns, for example Iceland krona, Greek Drachma etc.\n\n### 2. Convert columns data to numeric\n* convert all series to float64. Then invalid parsing will be set as NaN ('coerse' parameter).","81d87077":"# Introduction\n\nIt wasn't until 1999 that the euro really began its journey, when 11 countries (Austria, Belgium, Finland, France, Germany, Ireland, Italy, Luxembourg, the Netherlands, Portugal and Spain) fixed their exchange rates and created a new currency with monetary policy passed to the European Central Bank. Today euro is 20+ years old.\n\nCurrently, the euro (\u20ac) is the official currency of 19 out of 27 EU member countries which together constitute the Eurozone, officially called the euro area.\n* Euro area member countries  \nAlthough all EU countries are part of the Economic and Monetary Union (EMU), 19 of them have replaced their national currencies with the single currency \u2013 the euro. These EU countries form the euro area, also known as the eurozone: **Austria, Belgium, Cyprus, Estonia, Finland, France, Germany, Greece, Ireland, Italy, Latvia, Lithuania, Luxembourg, Malta, the Netherlands, Portugal, Slovakia, Slovenia, Spain**.\n* Non-euro area member countries  \nThese are countries where the euro has still not been adopted, but who will join once they have met the necessary conditions. Mostly, it consists of countries of member states which acceded to the Union in 2004, 2007 and 2013, after the euro was launched in 2002: **Bulgaria, Croatia, Czech Republic, Hungary, Poland, Romania, Sweden**.\n* Member countries with an opt-out  \nOccasionally, member states can negotiate an opt-out from any of the European Union legislation or treaties, and agree to not participate in certain policy areas. Concerning the single currency, this is the case for Denmark. It kept its former currency after becoming member of the EU. This list includes only **Denmark**.\n* Outside the EU  \nThe euro is also the sole currency of **Montenegro** and **Kosovo**.  \n\nsource: [Which countries use the euro?](https:\/\/europa.eu\/european-union\/about-eu\/euro\/which-countries-use-euro_en)\n\nWatch short video about Euro history before we start exploratory analysis:","d517bfa7":"From graph you can clearly see that 1 GBP was never less expensive than 1 EUR (but 1 USD was).\n\n### Find MAXIMUM and MINIMUM \n* Minimum and maximum for USD (US dollar) over years (sorting descending):","0c19aa88":"### 2. Process NaN values\n\n* count NaN values in every column:","94180ef4":"# Conclusion\n\nSo we made small EDA over dataset [Daily Exchange Rates per Euro 1999-2020](https:\/\/www.kaggle.com\/lsind18\/euro-exchange-daily-rates-19992020) \ud83d\udcb6 \ud83d\udcb6 \ud83d\udcb6   That's all!\n\n### Please upvote my notebook if you find it useful or fork it \ud83d\ude4b\ud83c\udf93\nFeel free to give any suggestions to improve my code.\n## To make some further predictions don't forget to normalize data!","963af170":"# Read data\n\n* import necessary modules: `pandas` (and `pandas.plotting`), `matplotlib` and `seaborn`; \n* register pandas formatters and converters with matplotlib;\n* read dataset `euro-daily-hist_1999_2021.csv` (updated), parse dates of first column and get 5 sample rows.","802ebf1f":"* Minimum and maximum for GBP (UK pound sterling) over years (sorting descending):","29528352":"# Preprocess data\n\n### 1. Set index and rename columns\n* clean headers and delete `[]` as well as unnecessary spaces;\n* set datetime column as index (DatetimeIndex) of a dataframe;\n* rename `Period\\\\Unit:` header.","143ddd76":"# Example: EUR\/SIT\n* Check the currency which doesn't exist anymore: Slovenian tolar was replaced by Euro in 2007;\n* plot the graph."}}