{"cell_type":{"22b49432":"code","95ca2287":"code","05baf5e9":"code","a6ee0b57":"code","a4cb2647":"code","3dbee631":"code","7a635df6":"code","a0aca812":"code","856242ac":"code","42f753d8":"code","d0c23cab":"code","c9b021bf":"code","f3c52f9c":"code","3c48806a":"code","c553f024":"code","a344adb6":"code","ae1c77b6":"code","eb67f9da":"code","952e7076":"code","446ea94b":"code","7fda8537":"code","33d17d90":"code","a62e9dd7":"code","671cb01d":"code","8669502d":"code","969683a1":"code","b4296a4f":"code","3463da71":"code","1d89e0d1":"markdown","7d64b171":"markdown","8a808df8":"markdown","e780c81a":"markdown","a4a0d2b1":"markdown","b04ac666":"markdown","8e8aa456":"markdown","6f079cda":"markdown","b9aaa89a":"markdown","a3b436a5":"markdown","acd0e257":"markdown","86ea056d":"markdown","debee86c":"markdown","d722dd67":"markdown"},"source":{"22b49432":"import numpy as np\nimport pandas as pd\nimport math\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n%matplotlib inline","95ca2287":"df_confirmed = pd.read_csv('..\/input\/covid-19-cssegisanddata\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndf_deaths = pd.read_csv('..\/input\/covid-19-cssegisanddata\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\ndf_recovered = pd.read_csv('..\/input\/covid-19-cssegisanddata\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\ndf_active = pd.DataFrame([]).append(df_confirmed)\ndf_active['4\/1\/20'] = df_active['4\/1\/20'].sub(df_deaths['4\/1\/20'])\ndf_active['4\/1\/20'] = df_active['4\/1\/20'].sub(df_recovered['4\/1\/20'])\ndf_population = pd.read_csv('..\/input\/world-population-united-nations\/world_population_data.csv')\ndf_population['pop2020'] = (df_population['pop2020'] * 1000).astype(int)","05baf5e9":"number_of_cases = 2000\npopulation_size = 200000\ninfected_fraction = number_of_cases \/ population_size\nnp.random.seed(0)\ndata_set = np.array(np.random.binomial(1, infected_fraction, population_size))\ndata_set","a6ee0b57":"# This may add some error for smaller datasets as it fillls last row with 0s\ndef split_padded(a,n):\n    padding = (-len(a))%n\n    return np.array(np.split(np.concatenate((a,np.zeros(padding))),n))\n\ndef format_percent(n):\n    return \"%.2f\" % (n * 100) + \"%\"\n\ndef calc_test_data(batches, data_set_length):\n    batches, tests_made, iterations = batches\n    print(f'Results for test fraction of {format_percent(test_fraction)}')\n    print('')\n    print('Input data:')\n    print('')\n    print(f'Population: {data_set_length}')    \n    print(f'Test fraction: {format_percent(test_fraction)} - on first batch we\\'re testing {round(1\/test_fraction)} people x ~{round(data_set_length\/(1\/test_fraction))} batches')\n    print(f'Infected people: {number_of_cases} - this gives us {format_percent(infected_fraction)} infected fraction')\n    print('')\n    print('Outputs:')\n    print('')\n    print(f'Iterations: {iterations}')\n    print(f'Tests made: {tests_made}')\n    print('')\n    print(f'Fraction of how many tests have we used, compared to whole population: {format_percent(tests_made \/ data_set_length)}')","a4cb2647":"def testing(test_fraction, data, iterations=1):\n    population = data\n    tests_made = 0\n    population_number = len(population)\n    tests_amount = math.ceil(population_number * test_fraction)\n    if(tests_amount < 2):\n        tests_amount = 2\n    population_splitted = split_padded(population, tests_amount)\n    tests_made += tests_amount\n    population_splitted = np.array(population_splitted)\n    condition = np.any(population_splitted, axis=1)\n    infected_batches = population_splitted[condition]\n    batches_to_return = []\n    if (len(infected_batches) and len(infected_batches[0]) > 1):\n        for batch in infected_batches:\n            inner_batches_to_return, inner_tests_made, inner_iterations = testing(\n                test_fraction, batch, iterations+1\n            )\n            batches_to_return = np.append(batches_to_return, inner_batches_to_return)\n            tests_made += inner_tests_made\n        return batches_to_return, tests_made, inner_iterations\n    return infected_batches, math.ceil(tests_made), iterations","3dbee631":"test_fraction = 0.01\nres = testing(test_fraction, data_set)\ncalc_test_data(res, len(data_set))","7a635df6":"def testing_alt(test_fraction, infected_fraction, population_size):\n    np.random.seed(0)\n    data_set = np.random.binomial(1, infected_fraction, population_size)\n    return testing(test_fraction, data_set)\n\ndef generate_df_from_all(infected_fraction, population_size, start=0, end=0.1, step=0.002, custom_breakpoints=[]):\n    breakpoints = np.arange(start, end, step) + 0 if start > 0 else step\n    if(len(custom_breakpoints) > 0):\n        breakpoints = custom_breakpoints\n    df = pd.DataFrame([])\n    for test_fraction in breakpoints:\n        batches, tests_amount, iterations = testing_alt(test_fraction, infected_fraction, population_size)\n        df = df.append(\n            pd.DataFrame(\n                [[test_fraction, tests_amount, iterations]], \n                columns=['Test fraction', 'Test Amount', 'Iterations'],\n            ),\n            ignore_index=True\n        )\n    return df\n\ndef create_plot(df, country, population, test_amount_divisor=1):\n    fig, (ax, ax1) = plt.subplots(ncols=2, figsize=(16, 8))\n    fig.suptitle(country, fontsize=16, fontweight=700)\n    ax.plot(df['Test fraction'], df['Test Amount'] \/ test_amount_divisor)\n    ax.plot(df['Test fraction'], df['Iterations'])\n    \n    empty_str = ''\n    test_amount_divisor_str = f'(in {test_amount_divisor}s)'\n    ax.set(\n        title=\"Logarithmic\",\n        yscale=\"log\",\n        ylabel=f'Iterations \/ Test Amount{test_amount_divisor_str if test_amount_divisor > 1 else empty_str}',\n        xlabel=\"Fraction of population at which we\\'re testing\",\n    )\n    \n    ax1.plot(df['Test fraction'], df['Test Amount'] \/ test_amount_divisor)\n    ax1.plot(df['Test fraction'], df['Iterations'])\n    \n    ax1.set(\n        title=\"Linear\",\n        ylabel=f'Iterations \/ Test Amount{test_amount_divisor_str if test_amount_divisor > 1 else empty_str}',\n        xlabel=\"Fraction of population at which we\\'re testing\",\n    )\n    \n    first = df.iloc[0]\n    last = df.iloc[df.shape[0] - 1]\n    tf_first = first['Test fraction']\n    ta_first = first['Test Amount']\n    it_first = first['Iterations']\n    tf_last = last['Test fraction']\n    ta_last = last['Test Amount']\n    it_last = last['Iterations']\n    \n    print('Summary:')\n    print('')\n    print('First DataFrame row')\n    print(f'Test fraction:{tf_first * 100}%, Test Amount: {int(ta_first)}, Iterations: {int(it_first)}')\n    print(f'Fraction of how many people have we tested, compared to whole population: {format_percent(ta_first\/ population)}')\n    print('')\n    print('Last DataFrame row')\n    print(f'Test fraction: {tf_last * 100}%, Test Amount: {int(ta_last)}, Iterations: {int(it_last)}')    \n    print(f'Fraction of how many tests have we used, compared to whole population: {format_percent(ta_last\/ population)}')\n    return fig","a0aca812":"test_fraction = 0.05\ncalc_test_data(testing_alt(test_fraction, infected_fraction, population_size), population_size)","856242ac":"test_fraction = 0.1\ncalc_test_data(testing_alt(test_fraction, infected_fraction, population_size), population_size)","42f753d8":"test_fraction = 0.25\ncalc_test_data(testing_alt(test_fraction, infected_fraction, population_size), population_size)","d0c23cab":"old_infected = infected_fraction\ninfected_fraction = 0.5","c9b021bf":"test_fraction = 0.02\ncalc_test_data(testing_alt(test_fraction, infected_fraction, population_size), population_size)","f3c52f9c":"infected_fraction = old_infected","3c48806a":"def get_number_of_cases(country):\n    data = df_confirmed[df_confirmed['Country\/Region'] == country]\n    return data['4\/1\/20'].to_list()[0]\n\ndef get_population(cca2):\n    return df_population[df_population['cca2'] == cca2]['pop2020'].to_list()[0]\n\nstart = 0.00125\nstop = 0.08\nstep = 0.005\n\ndf = generate_df_from_all(\n    infected_fraction, \n    population_size,\n    start,\n    stop,\n    step,\n)\n\ndf","c553f024":"create_plot(df, \"Example country\", population_size, 1000);","a344adb6":"def prep_data(country_name, country_code):\n    number_of_cases = get_number_of_cases(country_name)\n    population_size = get_population(country_code)\n    infected_fraction = (number_of_cases \/ population_size) * 4\n    start = 0.00125\n    stop = 0.08\n    step = 0.005\n    \n    df = generate_df_from_all(\n        infected_fraction, \n        population_size,\n        start,\n        stop,\n        step,\n    )\n\n    return df, population_size","ae1c77b6":"df, population = prep_data('Poland', 'PL')\ndf","eb67f9da":"create_plot(df, 'Poland', population, 1000);","952e7076":"df, population = prep_data('Italy', 'IT')\ndf","446ea94b":"create_plot(df, 'Italy', population, 1000);","7fda8537":"df, population = prep_data('Spain', 'ES')\ndf","33d17d90":"create_plot(df, 'Spain', population, 1000);","a62e9dd7":"df, population = prep_data('France', 'FR')\ndf","671cb01d":"create_plot(df, 'France', population, 1000);","8669502d":"df, population = prep_data('Germany', 'DE')\ndf","969683a1":"create_plot(df, 'Germany', population, 1000);","b4296a4f":"df, population = prep_data('US', 'US')\ndf","3463da71":"create_plot(df, 'United States', population, 1000);","1d89e0d1":"## Introduction\n\nThe whole idea behind this simulation is \"What if we could apply algorithms to coronavirus diagnostics?\"\nMore specifically, what if we could test some fraction of population at once, not single person one by one? How many iterations of testing we'd need to do, to say with 100% certainity who is infected, and who is not infected in some country. The idea is inspired by divide-and-conquer algorithm.\n\nFirst we'll test example data to get some understanding of algorithm work, then we'll make simulate few real countries.\n\nExample data:\n- population number = 200000\n- infected fraction = 0.005 (1000 people in total)\n- testing rate = 0.01 (that'snumber of tests per one person. It means we're testing 1\/0.01 = 100 people at once, what gives us 2000 batches)\n\nInput data:\n- an array of randomly generated 0s and 1s, with length of population size. Array's base is 0s, with 1s generated at rate of infected population fraction. The array for example data will be 199000 0s and 1000 1s.\n- fraction of population we're testing with single test. In first iteration for example data  we'll make 2000 tests, each testing 100 people.\n\nA little overview of algorithm internals for example data\nIn first iteration we'll make 2000 tests, each testing 100 people. 1298 batches are positive(containing at least one 1), so in second iteration we'll make 2 tests (if testing rate gives us number smaller than 2 tests per batch, we'll default it to 2 - that's space for optimizations) times number of batches, which gives us 2596 tests, each half of previous iteration(50 people). Next iterations work similarly to previous. We finish with:\n\n```\nIterations: 8\nTests made: 14637\n```\n\nOutupts of algorithm are:\n- Iterations: how deep is our recursion and in a more human words - how long does the whole process takes\n- Tests made: the total amount of tests that were needed to be made\n\nThe main idea of this notebook is to demonstrate some concept, so many simplifications were made.\nSo far I haven't seen similar idea, and I think it may be worth sharing in this unprecedented situation.","7d64b171":"How does the amount of tests needed changes for different batch size?","8a808df8":"Let's also test it for big infections fraction","e780c81a":"## Dataset generation","a4a0d2b1":"### Let's make few simulations","b04ac666":"Here's how whole testing algorithm looks like. It's not 100% optimal in terms of performance. I'll update it when I'll have more time, now I just wanted to demonstrate idea","8e8aa456":"First we'll simulate example from introduction.","6f079cda":"Well... in this case results are pretty bad as we have to batch test every single group + every single person after that for confirmation","b9aaa89a":"## Conclusion\nIt's pretty hard to to say something meaningful about these graphs, but we can clearly see that if testing samples of multiple people at once would be possible, the amount of tests needed to be done dramatically falls.\n\nFeel free to comment!","a3b436a5":"Now let's create a dataframe and plot it","acd0e257":"Data is simply array with binary data. 1 means infected, 0 not infected.","86ea056d":"Let's make simulations for some real countries","debee86c":"Disclaimer - my knowledge in medicine\/diagnostics is close to nothing, so please contact me if there are any innacuracies\n\nAlso, that's my first notebook on Kaggle, so please let me know if I made some mistake","d722dd67":"## Testing"}}