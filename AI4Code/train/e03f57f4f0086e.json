{"cell_type":{"c5de9b64":"code","8833372f":"code","0306755a":"code","a2c51876":"code","29db7a8f":"code","7340fa1d":"code","5cbc4195":"code","d85f48d1":"code","553dd355":"code","7a0be170":"code","a66aa0ca":"code","1ee45d8d":"code","ddaf979e":"code","f6c2e4fb":"code","413f17ce":"code","d2ade596":"code","40c6cebc":"code","db8386bb":"code","00354cb0":"code","8543cf51":"code","665e0c6f":"code","1952e6e4":"code","5d3e8811":"code","bd3cca9b":"markdown","4ca0582e":"markdown","2a59b855":"markdown","33ac1010":"markdown","d7ba3fb8":"markdown","3c110103":"markdown","b609dd28":"markdown","376db413":"markdown","3ae1439c":"markdown","f24ed06a":"markdown","e9eaced3":"markdown","bbd48a55":"markdown","aa10074b":"markdown","22a93ada":"markdown","87e2cdc2":"markdown","22945474":"markdown"},"source":{"c5de9b64":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8833372f":"# Importng Required Libraries\nimport tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0306755a":"train = pd.read_csv(r'\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv(r'\/kaggle\/input\/digit-recognizer\/test.csv')","a2c51876":"y_train = train['label']\nX_train=train.drop('label',axis=1)","29db7a8f":"sns.set_style('whitegrid')\nplt.figure(figsize=(7,5))\nsns.countplot(y_train)","7340fa1d":"X_train.isnull().any().describe()","5cbc4195":"test.isnull().any().describe()","d85f48d1":"X_train \/= 255.0\ntest \/= 255.0","553dd355":"X_train=X_train.values.reshape(-1,28,28,1)\ntest=test.values.reshape(-1,28,28,1)","7a0be170":"y_train = tf.keras.utils.to_categorical(y_train, num_classes=10)","a66aa0ca":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=2)","1ee45d8d":"plt.imshow(X_train[0][:,:,0])","ddaf979e":"y_train.shape","f6c2e4fb":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32,(5,5),activation='relu',padding='same',input_shape=(28,28,1)),\n    tf.keras.layers.Conv2D(32,(5,5),activation='relu',padding='same'),\n    tf.keras.layers.MaxPooling2D((2,2)),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(64,(3,3),activation='relu',padding='same'),\n    tf.keras.layers.Conv2D(64,(3,3),activation='relu',padding='same'),\n    tf.keras.layers.MaxPooling2D((2,2), strides=(2,2)),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256,activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(10,activation='softmax')\n])\nmodel.summary()","413f17ce":"optimizer= 'adam'","d2ade596":"model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['acc'])","40c6cebc":"from keras.preprocessing.image import ImageDataGenerator\ndatagen=ImageDataGenerator(rotation_range=10,\n                          width_shift_range=0.1,\n                          height_shift_range=0.1,\n                          shear_range=0.1,\n                          zoom_range=0.1,\n                          horizontal_flip=False,\n                          fill_mode='nearest')\ndatagen.fit(X_train)","db8386bb":"learning_rate_reduction = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","00354cb0":"history = model.fit_generator(datagen.flow(X_train,y_train, batch_size=86),\n                              epochs = 50 , validation_data = (X_val,y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ 86,\n                              callbacks=[learning_rate_reduction])","8543cf51":"plt.figure(figsize=(15,7))\nax1 = plt.subplot(1,2,1)\nax1.plot(history.history['loss'], color='b', label='Training Loss') \nax1.plot(history.history['val_loss'], color='r', label = 'Validation Loss',axes=ax1)\nlegend = ax1.legend(loc='best', shadow=True)\nax2 = plt.subplot(1,2,2)\nax2.plot(history.history['acc'], color='b', label='Training Accuracy') \nax2.plot(history.history['val_acc'], color='r', label = 'Validation Accuracy')\nlegend = ax2.legend(loc='best', shadow=True)","665e0c6f":"y_pred = model.predict(X_val)\ny_pred_classes = np.argmax(y_pred, axis=1)\ny_true = np.argmax(y_val, axis=1)\nimport scikitplot as skplt\nskplt.metrics.plot_confusion_matrix(y_true,y_pred_classes,title='Confusion Matrix for Train Data')","1952e6e4":"results = model.predict(test)\nresults = np.argmax(results, axis=1)\nresults = pd.Series(results, name='Label')","5d3e8811":"submission = pd.concat([pd.Series(range(1,28001), name='ImageId'), results], axis=1)\nsubmission.to_csv(r'Digit_Recognizer', index=False)","bd3cca9b":"### Label Encoding","4ca0582e":"### Reshape","2a59b855":"### Predicting results on test data","33ac1010":"### Confusion Matrix","d7ba3fb8":"In this competition, goal is to correctly identify digits from a dataset of tens of thousands of handwritten images.","3c110103":"### Split Training and Validation Set","b609dd28":"### Normalization","376db413":"## CNN","3ae1439c":"### Defining the model","f24ed06a":"### Load Data","e9eaced3":"### Check for Missing Values","bbd48a55":"### Data Augmentation","aa10074b":"## Data Prepration","22a93ada":"### Initializing Optimizer","87e2cdc2":"### Evaluating the Model","22945474":"# Problem Statement"}}