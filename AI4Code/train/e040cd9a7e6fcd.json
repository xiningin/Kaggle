{"cell_type":{"12fb9df6":"code","0b0e3bb9":"code","8141e237":"code","f415d001":"code","0f08740b":"code","b506907f":"code","bc978284":"code","298d9875":"code","25fe865d":"code","41e00bf8":"code","c71c6da5":"code","90d12671":"code","48092a48":"code","87fa2cb8":"code","ca9a8f76":"code","9302ccd2":"code","16a53187":"code","d53f4aa8":"code","61a9d22f":"code","c9937a77":"code","2ecb0904":"code","f8fc5b6d":"code","aedd272a":"code","f2a579db":"code","51422264":"code","b55692f1":"code","fdd10af6":"code","e34c6b30":"code","5dba5940":"code","bb7e12c7":"code","3ca71431":"markdown"},"source":{"12fb9df6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0b0e3bb9":"import pandas as  pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling\ntest1 = pd.read_csv(\"..\/input\/test1.csv\")\ntrain1 = pd.read_csv(\"..\/input\/train1.csv\")","8141e237":"train1.info()\ntest1.info()","f415d001":"train1.describe()\ntest1.describe()","0f08740b":"train1.drop(train1.columns[[0,4]], axis = 1, inplace = True)\ntest1.drop(test1.columns[[0,4]], axis = 1, inplace = True)","b506907f":"train1[train1.isnull().any(axis=1)].count()\ntest1[test1.isnull().any(axis=1)].count()\ntest1.isna().sum()\ntrain1.isna().sum()\ntrain1['PROD_CD'].unique()\n\n\n","bc978284":"train1.info()","298d9875":"\ntrain1['PROD_CD'].value_counts()","25fe865d":"train1['SLSMAN_CD'].value_counts()","41e00bf8":"train1['PLAN_MONTH'].value_counts()","c71c6da5":"train1['PLAN_YEAR'].value_counts()","90d12671":"train1['TARGET_IN_EA'].value_counts()","48092a48":"train1['ACH_IN_EA'].value_counts()","87fa2cb8":"import re\np=re.compile(r'\\D')\ntrain1['TARGET_IN_EA']=[p.sub('',x) for x in train1['TARGET_IN_EA']]\ntrain1['ACH_IN_EA']=[p.sub('',x) for x in train1['ACH_IN_EA']]\n\ntest1['TARGET_IN_EA']=[p.sub('',x) for x in test1['TARGET_IN_EA']]\n","ca9a8f76":"train1.head()\ntrain1['TARGET_IN_EA']=pd.to_numeric(train1['TARGET_IN_EA'])\ntrain1['ACH_IN_EA']=pd.to_numeric(train1['ACH_IN_EA'])\ntest1['TARGET_IN_EA']=pd.to_numeric(test1['TARGET_IN_EA'])","9302ccd2":"train1.info()\ntest1.info()","16a53187":"pandas_profiling.ProfileReport(train1)","d53f4aa8":"plt.scatter(x='TARGET_IN_EA',y='ACH_IN_EA',data=train1)","61a9d22f":"sns.pairplot(train1.iloc[:,:])\nsns.pairplot(test1.iloc[:,:])","c9937a77":"train1.boxplot()\ntest1.boxplot()","2ecb0904":"train1.info()\ntest1.info()","f8fc5b6d":"train1.head(10)\n","aedd272a":"test1.head(10)","f2a579db":"plt.hist(\"ACH_IN_EA\",data=train1)","51422264":"train1['ACH_IN_EA'].value_counts()[:20].plot(kind='barh')","b55692f1":"plt.scatter(x='TARGET_IN_EA',y='ACH_IN_EA',data=train1)\nsns.pairplot(train1.iloc[:,:])\nsns.pairplot(test1.iloc[:,:])\ntrain1.boxplot()\ntest1.boxplot()\nplt.hist(\"ACH_IN_EA\",data=train1)\nplt.hist(\"TARGET_IN_EA\",data=train1)\nplt.hist(\"TARGET_IN_EA\",data=test1)\ntrain1['ACH_IN_EA'].value_counts()[:20].plot(kind='barh')\ntrain1['SLSMAN_CD'].value_counts()[:20].plot(kind='barh')\ntrain1['TARGET_IN_EA'].value_counts()[:20].plot(kind='barh')\ntest1['SLSMAN_CD'].value_counts()[:20].plot(kind='barh')\ntest1['TARGET_IN_EA'].value_counts()[:20].plot(kind='barh')\nsns.distplot(\"ACH_IN_EA\",data=train1)\nsns.distplot(train1[\"TARGET_IN_EA\"])\nsns.distplot(train1[\"TARGET_IN_EA\"])\nsns.distplot(train1[\"PLAN_YEAR\"])\nsns.distplot(train1[\"PLAN_MONTH\")]\n\n\n\nsns.distplot(train1['SLSMAN_CD'], hist=True, kde=False, \n             bins=int(180\/5), color = 'blue',\n             hist_kws={'edgecolor':'black'})\n\nplt.title('salesperson achieved target')\nplt.xlabel('SLSMAN_CD')\nplt.ylabel('ACH_IN_EA')\n\nsns.heatmap(train1.corr(), cmap='Blues', annot = True)","fdd10af6":"from sklearn import preprocessing\nlabel_encoder=preprocessing.LabelEncoder()\ntrain1['PROD_CD']=label_encoder.fit_transform(train1['PROD_CD'])\ntrain1['SLSMAN_CD']=label_encoder.fit_transform(train1['SLSMAN_CD'])\ntest1['PROD_CD']=label_encoder.fit_transform(test1['PROD_CD'])\ntest1['SLSMAN_CD']=label_encoder.fit_transform(test1['SLSMAN_CD'])","e34c6b30":"X = train1.iloc[:,0:4]\nY = train1['ACH_IN_EA']  ","5dba5940":"\nX_matrix = X.as_matrix()\nY_matrix = Y.as_matrix()","bb7e12c7":"\nimport xgboost as xgb\nxgb1 = xgb.XGBRegressor(learning_rate=0.01,max_depth=9,min_child_weight=2,n_estimators=2000,booster= 'gbtree',base_score=0.5,random_state=0)\nxgb1.fit(X_matrix, Y_matrix)\ntrain1pred=xgb1.predict(X_matrix)\n\nMeanSquaredError22=mean_squared_error(y,train1pred)\n\nrootMeanSquaredError =sqrt(MeanSquaredError22)\nr2score=r2_score(Y_matrix,train1pred)\n\nPredction1=xgb1.predict(test1)\n","3ca71431":"Using xgboost regressor model predicting sales achieved by sales person "}}