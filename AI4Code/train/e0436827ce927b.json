{"cell_type":{"8f1fcde4":"code","f8469187":"code","b951a88b":"code","0c27317f":"code","d1d05c79":"code","3d292695":"code","f3ff8ae1":"code","275cf03f":"code","8a97368d":"code","d717ba0a":"code","39297a22":"code","b0b6de3b":"code","db4e66d9":"code","264e858a":"code","5e14957d":"code","5bb1dd8f":"code","8a5fa85d":"markdown","e25582b4":"markdown","8c806ac2":"markdown","87510398":"markdown","92fd1146":"markdown","14a776b3":"markdown","0d3a53dd":"markdown","083043b8":"markdown","0e69bea7":"markdown","bc385b48":"markdown","8ec9a78c":"markdown","b627b427":"markdown","7245d7ca":"markdown","912ebed9":"markdown","15df1735":"markdown"},"source":{"8f1fcde4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f8469187":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b951a88b":"train = pd.read_csv(\"..\/input\/widsdatathon2022\/train.csv\")\ntest = pd.read_csv(\"..\/input\/widsdatathon2022\/test.csv\")","0c27317f":"display(train, test)","d1d05c79":"train.info()","3d292695":"print(\"No. of unique values:\")\nfor col in train.columns:\n    print(f\"{col}: {train[col].nunique()}: {train[col].unique()}\")\n    \n# NUMCOLS=['floor_area', 'ELEVATION', '..._temp', '..._degree_days', '..._inches', 'avg_temp', 'days_below_...', \n# 'days_above_...', 'direction_max_wind_speed', 'direction_peak_wind_speed', 'max_wind_speed', 'days_with_fog']\n\n# difference between year_built and ...nvm\n# energy star rating has 'nan'\n# ordinal variables=['year_built', 'energy_star_rating', ]","f3ff8ae1":"df = pd.DataFrame(train.groupby('year_built')['site_eui'].agg('mean'), columns=['site_eui']).reset_index()\n\nplt.figure(figsize=(12, 6))\nsns.lineplot(data=df, x='year_built', y='site_eui')\nplt.show()","275cf03f":"# plt.figure(figsize=(12, 6))\ndf = pd.DataFrame(train.groupby('Year_Factor')['site_eui'].agg('mean')).reset_index()\nsns.barplot(data=df, x='Year_Factor', y='site_eui')\nplt.show()","8a97368d":"df = pd.DataFrame(train.groupby('building_class')['site_eui'].agg('mean'), columns=['site_eui']).reset_index()\n\nsns.barplot(data=df, x='building_class', y='site_eui')\nplt.show()","d717ba0a":"sns.countplot(train['building_class'])","39297a22":"# plt.figure(figsize=(12, 6))\ndf = pd.DataFrame(train.groupby('State_Factor')['site_eui'].agg('mean')).reset_index()\nsns.barplot(data=df, x='State_Factor', y='site_eui')\nplt.show()","b0b6de3b":"plt.figure(figsize=(12, 6))\ndf = pd.DataFrame(train.groupby(['State_Factor', 'building_class'])['site_eui'].agg('mean')).reset_index()\nsns.barplot(data=df, x='State_Factor', y='site_eui', hue='building_class')\nplt.show()\n# df.head()","db4e66d9":"plt.figure(figsize=(18, 6))\ndf = pd.DataFrame(train.groupby('avg_temp')['site_eui'].agg('mean')).reset_index()\nsns.regplot(data=df, x='avg_temp', y='site_eui')\nplt.show()","264e858a":"plt.figure(figsize=(18, 6))\ndf = pd.DataFrame(train.groupby('precipitation_inches')['site_eui'].agg('mean')).reset_index()\nsns.regplot(data=df, x='precipitation_inches', y='site_eui')\nplt.show()","5e14957d":"plt.figure(figsize=(18, 6))\ndf = pd.DataFrame(train.groupby('snowfall_inches')['site_eui'].agg('mean')).reset_index()\nsns.regplot(data=df, x='snowfall_inches', y='site_eui')\nplt.show()","5bb1dd8f":"plt.figure(figsize=(18, 6))\ndf = pd.DataFrame(train.groupby('ELEVATION')['site_eui'].agg('mean')).reset_index()\nsns.regplot(data=df, x='ELEVATION', y='site_eui')\nplt.show()","8a5fa85d":"#### How does Site EUI vary with state?","e25582b4":"#### How does Site EUI vary with elevation of the building?","8c806ac2":"#### How does Site EUI vary with snowfall?","87510398":"## Checking unique values","92fd1146":"#### How does Site EUI vary with precipitation?","14a776b3":"#### How does Site EUI vary with building class?","0d3a53dd":"#### How does Site EUI vary with year_built?","083043b8":"#### How does Site EUI vary with Year factor?","0e69bea7":"#### How does Site EUI vary with average temperature?","bc385b48":"How can year built be 0? \ud83e\udd14 Something seems wrong...","8ec9a78c":"## EDA","b627b427":"* There are more residential buildings compared to commercial buildings in our data.\n* However, on average EUI of commercial buildings is higher than that of residential buildings.","7245d7ca":"## Checking for missing values","912ebed9":"There are null values in the columns 'year_built', 'energy_star_rating', 'direction_max_wind_speed', 'direction_peak_wind_speed', 'max_wind_speed' and 'days_with_fog'.","15df1735":"## Importing libraries"}}