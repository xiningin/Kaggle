{"cell_type":{"4aa576d3":"code","59a2e426":"code","02f52c7f":"code","e494914f":"code","19773719":"code","bb07a415":"code","7a6ff705":"code","c5d552e7":"code","d6dfd8b9":"code","fafaa881":"code","d8d55c93":"code","baa9725b":"code","73ed25e6":"code","2a8bfea1":"code","7a04f51a":"code","41d2c9a4":"code","6bd30b25":"code","9a1d5938":"code","bbfc6da2":"code","4a309074":"code","158bf778":"code","6329803b":"code","49b35afa":"code","54af55b3":"code","74a185c0":"code","ce83114b":"code","bb208888":"code","5a556928":"code","6afe725b":"code","f8c578de":"code","b3bd250e":"code","d07ba971":"code","5df84d58":"code","d6fc15e9":"code","cab8ee82":"code","a088a58b":"code","a4264810":"code","23b6b46b":"code","3366fe7f":"code","922e237e":"code","381013e1":"code","de144c5f":"code","0d779950":"code","60921ff8":"code","9bdf77ac":"code","041019c7":"code","0ceb4339":"code","3da314fa":"code","b2dbe3e3":"code","d9f39bdd":"code","2b83efcb":"code","91131a2c":"code","5eb915d0":"code","e548ab9d":"code","60814647":"code","f98dfc69":"code","c405c326":"code","60130bb0":"code","ead682b3":"code","a1073806":"code","4376e3f0":"code","8329b153":"code","acde566a":"code","4e2afbde":"code","b9b4baeb":"code","f61ce203":"code","f0645e4a":"code","a25ee88c":"code","474d28b3":"code","be0ba82d":"code","bcf6d8a9":"code","edf62617":"code","14432477":"code","c18c5cfc":"code","ac49d729":"code","28b2391c":"code","e206f478":"code","76693a8d":"code","0df7ca9b":"code","d7ce7174":"code","abbb28b9":"code","dfd60d94":"code","934e410a":"code","dd2cc8a9":"code","540c37a7":"code","e49bac6d":"code","56f69439":"code","e20639bb":"code","ef63a92f":"code","1ac4f1db":"markdown"},"source":{"4aa576d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59a2e426":"data=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndata","02f52c7f":"data.drop(columns = ['PassengerId','Ticket','Cabin','Name'],inplace = True)\ndata\n","e494914f":"import seaborn as sns\nsns.heatmap(data.isnull())","19773719":"data.Age = data.Age.fillna(0)\n","bb07a415":"data.Embarked = data.Embarked.fillna(0)\ndata.isnull().sum()","7a6ff705":"data.head()","c5d552e7":"data['Sex'] = data['Sex'].map({'female':1,'male':0}).astype(int)\ndata['Embarked_S'] = data['Embarked'].replace('Q',0).replace('C',0).replace('S',1)\ndata['Embarked_Q'] = data['Embarked'].replace('C',0).replace('S',0).replace('Q',1)\ndata['Embarked_C'] = data['Embarked'].replace('S',0).replace('Q',0).replace('C',1)","d6dfd8b9":"data.head()\n","fafaa881":"data.drop(columns = ['Embarked'],inplace = True)\n","d8d55c93":"data[(data.Survived ==1)].groupby('Sex').count().iloc[:1,0]\n","baa9725b":"x = data.iloc[:,0:8]\ny = data['Survived']","73ed25e6":"x = data.drop(columns = ['Survived'])\n","2a8bfea1":"x","7a04f51a":"y","41d2c9a4":"x.dtypes\n","6bd30b25":"nominal_col = [1]\nordinal_col = []\nnumeric_col = [0,3,4,6,7,8]\nKBin_col = [5]\nBina_col = [2]\n#null_col = []\n","9a1d5938":"from sklearn.preprocessing import OneHotEncoder,OrdinalEncoder\nfrom sklearn.preprocessing import KBinsDiscretizer,Binarizer\n#from sklearn.impute import SimpleImputer\nfrom sklearn.compose import make_column_transformer\nfrom sklearn import set_config\ntrans  = make_column_transformer((OneHotEncoder(sparse = False),nominal_col),\n                                  (OrdinalEncoder(),ordinal_col),\n                                 (KBinsDiscretizer(),KBin_col),\n                                 (Binarizer(threshold = 55),Bina_col),\n                                 #(SimpleImputer(strategy = 'mean'),null_col),\n                                 remainder = 'passthrough')\nset_config(display = 'diagram')\ntrans","bbfc6da2":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.34)  ","4a309074":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.pipeline import make_pipeline\nmodel = KNeighborsClassifier(9)\npipe = make_pipeline(trans,model)","158bf778":"model\n","6329803b":"pipe","49b35afa":"pipe.fit(x_train,y_train)\n","54af55b3":"pred = pipe.predict(x_test)\n","74a185c0":"from sklearn.metrics import accuracy_score\naccuracy_score(pred,y_test)*100","ce83114b":"from sklearn.metrics import plot_confusion_matrix\nplot_confusion_matrix(pipe,x_test,y_test)","bb208888":"# from sklearn.svm import SVC\n# from sklearn.pipeline import make_pipeline\n# model_n =SVC(kernel='linear')\n# pipe_n = make_pipeline(trans,model_n)\n# pipe_n.fit(x_train,y_train)\n# pred_n = pipe_n.predict(x_test)\n# accuracy_score(pred_n,y_test)*100","5a556928":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import make_pipeline\nmodel_2 = LogisticRegression(solver = 'liblinear')\npipe_2 = make_pipeline(trans,model_2)","6afe725b":"model_2\n","f8c578de":"pipe_2","b3bd250e":"pipe_2.fit(x_train,y_train)\n","d07ba971":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data","5df84d58":"test_data = test_data.drop(columns = ['PassengerId','Name','Ticket','Cabin'])","d6fc15e9":"test_data.isnull().sum()\n","cab8ee82":"test_data.dtypes\n","a088a58b":"test_data['Sex'] = test_data['Sex'].map({'female':1,'male':0}).astype(int)\ntest_data['Embarked_S'] = test_data['Embarked'].replace('Q',0).replace('C',0).replace('S',1)\ntest_data['Embarked_Q'] = test_data['Embarked'].replace('C',0).replace('S',0).replace('Q',1)\ntest_data['Embarked_C'] = test_data['Embarked'].replace('S',0).replace('Q',0).replace('C',1)","a4264810":"test_data.Age = test_data.Age.fillna(0)\ntest_data.Fare = test_data.Fare.fillna(0)","23b6b46b":"test_data\n","3366fe7f":"test_data.drop(columns = ['Embarked'],inplace = True)\n","922e237e":"test_data.dtypes\n","381013e1":"submission_data = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","de144c5f":"submission_data.drop(columns = ['PassengerId'],inplace = True)\nsubmission_data","0d779950":"#Here model_2 is LogesticRegression\nmodel_2.fit(x_train,y_train)","60921ff8":"from sklearn.metrics import accuracy_score\nmodel_2.score(x_train,y_train)*100","9bdf77ac":"prediction_model_2 = model_2.predict(test_data)\n","041019c7":"accuracy_score(prediction_model_2,submission_data)*100\n","0ceb4339":"print(\"Train Accuracy: {:.5f}%\".format(model_2.score(x_train,y_train)*100))\nprint('Test Accuracy: {:.5f}%'.format(accuracy_score(prediction_model_2,submission_data)*100))","3da314fa":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.pipeline import make_pipeline\nmodel_3 = DecisionTreeClassifier()\npipe_3 = make_pipeline(trans,model_3)","b2dbe3e3":"model_3","d9f39bdd":"pipe_3","2b83efcb":"pipe_3.fit(x_train,y_train)","91131a2c":"from sklearn.metrics import accuracy_score\npipe_3.score(x_train,y_train)*100","5eb915d0":"prediction_model_3 = pipe_3.predict(test_data)","e548ab9d":"prediction_model_3","60814647":"accuracy_score(prediction_model_3,submission_data)*100","f98dfc69":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import VotingClassifier\n\nl1 = KNeighborsClassifier(9)\nl2 = LogisticRegression()\nl3= DecisionTreeClassifier()\nmodel_4 = VotingClassifier(estimators=[('x1',model),('x2',model_2),('x3',model_3)],voting='soft',verbose=True)\nmodel_4\n","c405c326":"from sklearn.pipeline import make_pipeline\npipe_4 = make_pipeline(trans,model_4)                          \npipe_4.fit(x_train,y_train)\n#print(pipe_4.predict(test_data))","60130bb0":"pipe_4.predict(test_data)","ead682b3":"from sklearn.metrics import accuracy_score\npipe_4.score(x_train,y_train)*100","a1073806":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import BaggingClassifier\n\nl1 = KNeighborsClassifier(9)\nl2 = LogisticRegression()\nl3= DecisionTreeClassifier()\nmodel_5 = BaggingClassifier(verbose=True)\nmodel_5","4376e3f0":"from sklearn.pipeline import make_pipeline\npipe_5 = make_pipeline(trans,model_5)                          \npipe_5.fit(x_train,y_train)","8329b153":"pipe_5.predict(test_data)","acde566a":"from sklearn.metrics import accuracy_score\npipe_5.score(x_train,y_train)*100","4e2afbde":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier \n\nparams = {'criterion':['gini','entropy'],'max_depth':[None,2,5,10],'min_samples_split':[2,10,100]}\n\nq_pipe = make_pipeline (trans,GridSearchCV (model_3 ,params,verbose=3,refit=True))\n                    \nq_pipe","b9b4baeb":"DecisionTreeClassifier().get_params().keys()\n","f61ce203":"q_pipe.fit(x_train,y_train)","f0645e4a":"q_pipe.predict(test_data)","a25ee88c":"from sklearn.metrics import accuracy_score\nq_pipe.score(x_train,y_train)*100","474d28b3":"q_pipe.named_steps['gridsearchcv'].best_params_","be0ba82d":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.tree import DecisionTreeClassifier \n\nparams = {'criterion':['gini','entropy'],'max_depth':[None,2,5,12,6,7],'min_samples_split':[2,10,67,45,100]}\n\np_pipe = make_pipeline (trans,RandomizedSearchCV (model_3 ,params,verbose=3,refit=True))\n                    \np_pipe","bcf6d8a9":"p_pipe.fit(x_train,y_train)","edf62617":"p_pipe.predict(test_data)","14432477":"from sklearn.metrics import accuracy_score\np_pipe.score(x_train,y_train)*100","c18c5cfc":"p_pipe.named_steps['randomizedsearchcv'].best_params_","ac49d729":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.tree import DecisionTreeClassifier \n\nparams = {'criterion':['gini'],'max_depth':[12],'min_samples_split':[45]}\n\nt_pipe = make_pipeline (trans,RandomizedSearchCV (model_3 ,params,verbose=3,refit=True))\n                    \nt_pipe","28b2391c":"t_pipe.fit(x_train,y_train)","e206f478":"t_pipe.predict(test_data)\n","76693a8d":"from sklearn.metrics import accuracy_score\nt_pipe.score(x_train,y_train)*100","0df7ca9b":"from sklearn.ensemble import RandomForestClassifier\nRf = RandomForestClassifier()\nmodel_Rf=RandomForestClassifier()","d7ce7174":"from sklearn.pipeline import make_pipeline\npipe_Rf = make_pipeline(trans,model_Rf)                          \npipe_Rf.fit(x_train,y_train)","abbb28b9":"pipe_Rf.predict(test_data)","dfd60d94":"from sklearn.metrics import accuracy_score\npipe_Rf.score(x_train,y_train)*100","934e410a":"from sklearn.ensemble import RandomForestClassifier\nforest = RandomForestClassifier ()\nfrom sklearn.pipeline import make_pipeline\npipe_Rf =  make_pipeline(trans,Rf)\npipe_Rf.fit(x_train,y_train)\nimportances = Rf.feature_importances_\n","dd2cc8a9":"importances.shape","540c37a7":"feature","e49bac6d":"importances","56f69439":"data.columns","e20639bb":"import matplotlib.pyplot as plt\nimport numpy as np\n\nplt.bar (feature,importances)\n","ef63a92f":"feature = y_train.columns\nfeature.shape\n","1ac4f1db":"1.which gender survived more malae or female?\n\n"}}