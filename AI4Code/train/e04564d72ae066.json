{"cell_type":{"83603207":"code","fe4f1dd8":"code","6cab4ff8":"code","115bb678":"code","ba497c35":"code","6bce7550":"code","6220e44a":"code","7d01c9c9":"code","3e31acf4":"code","86f16d24":"code","0a77eddc":"code","0ad2c14a":"code","9a766183":"code","ce79b715":"code","fe7b6eda":"code","857abf88":"code","a9e754b5":"code","74ec0829":"code","dca1d410":"code","b3552671":"code","948b3fdf":"code","05223e9d":"code","52e1bbab":"code","807272d1":"code","57d76ffb":"code","6863bcb5":"code","112ecfe0":"code","1e8649b0":"code","aed4da45":"code","d2cb48ce":"code","7269b72f":"code","3c77d43f":"code","22c3f828":"code","445ee7b5":"code","c6b1d72f":"code","3633fa46":"code","c0c93850":"code","746604dc":"code","2097fc1c":"code","4e4e724c":"code","8aa02a54":"code","df935d43":"code","edcf520b":"code","00a384d0":"code","1131a44a":"code","43570b0b":"code","1d3c71ab":"code","78064c15":"code","c0507c53":"code","a8044bd3":"code","1edda47b":"code","07d2d318":"code","326809b4":"code","f50a49ef":"code","14aecb3b":"code","3c383379":"code","2cf5d314":"code","6a987784":"code","d1e1950b":"code","00bda522":"code","95cf2c3f":"code","ed64a0cf":"code","761010dd":"code","f613234c":"code","a3ac0e56":"code","3c180167":"markdown","50b81dd3":"markdown","fd950988":"markdown","ea334ecc":"markdown","77f2c6b8":"markdown","84c01e8b":"markdown","7b9776c3":"markdown","37df70b5":"markdown","b3655cec":"markdown","0fa54a79":"markdown","f4a00543":"markdown","32809c16":"markdown","7cdbb095":"markdown","0f41c071":"markdown","14cb4857":"markdown","9834746c":"markdown","2f559256":"markdown"},"source":{"83603207":"# \u041f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nrussia_reg = pd.read_csv('\/kaggle\/input\/russia-regions-in-sber-covid-competition\/russia_regions.csv')","fe4f1dd8":"# \u041e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0432 \u041c\u043e\u0441\u043a\u0432\u0435 \u0438 \u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438, \u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433\u0435 \u0438 \u041b\u0435\u043d\u0438\u043d\u0433\u0440\u0430\u0434\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438, \u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438\n\nrussia_cases = pd.read_csv('\/kaggle\/input\/covid19-russia-regions-cases\/covid19-russia-cases-scrf.csv')\nmoscow_cases = russia_cases.loc[(russia_cases['Region\/City'] == '\u041c\u043e\u0441\u043a\u0432\u0430') | (russia_cases['Region\/City'] == '\u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c')]\nspb_cases = russia_cases.loc[(russia_cases['Region\/City'] == '\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433') | (russia_cases['Region\/City'] == '\u041b\u0435\u043d\u0438\u043d\u0433\u0440\u0430\u0434\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c')]\nnsk_cases = russia_cases.loc[russia_cases['Region\/City'] == '\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c']","6cab4ff8":"# \u0413\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0434\u0430\u0442\u0435\n\nmoscow_cases = moscow_cases.groupby('Date').sum()\nspb_cases = spb_cases.groupby('Date').sum()\nnsk_cases = nsk_cases.groupby('Date').sum()","115bb678":"moscow_cases","ba497c35":"spb_cases","6bce7550":"nsk_cases","6220e44a":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043b\u0438\u0448\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\n\nmoscow_cases.drop(['Region_ID', 'Day-Confirmed', 'Day-Deaths', 'Day-Recovered', 'Deaths', 'Recovered'], axis=1, inplace=True)\nspb_cases.drop(['Region_ID', 'Day-Confirmed', 'Day-Deaths', 'Day-Recovered', 'Deaths', 'Recovered'], axis=1, inplace=True)\nnsk_cases.drop(['Region_ID', 'Day-Confirmed', 'Day-Deaths', 'Day-Recovered', 'Deaths', 'Recovered'], axis=1, inplace=True)","7d01c9c9":"# \u0413\u0440\u0430\u0444\u0438\u043a \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0432 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\u0445 (\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 - \u0414\u0430\u0442\u0430)\n\nfig, ax = plt.subplots(figsize=(15,10))\nplt.plot(moscow_cases['Confirmed'], 'ro-', label = 'Moscow')\nplt.plot(spb_cases['Confirmed'], 'go-', label = 'Saint-Petersburg')\nplt.plot(nsk_cases['Confirmed'], 'bo-', label = 'Novosibirsk')\nplt.ylabel('Confirmed')\nplt.xlabel('Date')\nplt.grid()\nplt.legend()","3e31acf4":"# \u0413\u0440\u0430\u0444\u0438\u043a \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0432 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\u0445 (\u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 - \u0414\u0430\u0442\u0430)\n\nfig, ax = plt.subplots(figsize=(15,10))\nplt.plot(np.log(moscow_cases['Confirmed']+1), 'ro-', label = 'Moscow')\nplt.plot(np.log(spb_cases['Confirmed']+1), 'go-', label = 'Saint-Petersburg')\nplt.plot(np.log(nsk_cases['Confirmed']+1), 'bo-', label = 'Novosibirsk')\nplt.grid()\nplt.ylabel('Log(confirmed)')\nplt.xlabel('Date')\nplt.legend()","86f16d24":"russia_regions = pd.read_csv('\/kaggle\/input\/russia-regions-in-sber-covid-competition\/russia_regions.csv')\n","0a77eddc":"import fetch\ndata = fetch.fetch_yandex(dump_folder='')\ndata, filepath = fetch.format_csse2(data, dump_folder='')","0ad2c14a":"russia = pd.read_csv('https:\/\/raw.githubusercontent.com\/grwlf\/COVID-19_plus_Russia\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_RU.csv')","9a766183":"russia_latest = pd.read_csv(filepath)\nrussia_latest","ce79b715":"rus = russia.set_index('Province_State').join(russia_latest.set_index('Province_State')['Confirmed'])\nrus","fe7b6eda":"today = filepath[:10]\ntoday2 = today[3:5]+'\/'+today[:2]+'\/'+today[-2:]","857abf88":"rus.drop(['UID','iso2','iso3','FIPS','Admin2','Country_Region','Lat','Long_','Combined_Key','code3'], axis=1, inplace=True)\nrus[today2] = rus['Confirmed']\ndel rus['Confirmed']\n","a9e754b5":"del rus['06\/09\/20'] # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430 \u0438\u044e\u043d\u044c(\u043f\u043e\u0437\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0432 \u043d\u0443\u0436\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435)","74ec0829":"df = rus.T.iloc[-30:,:]\ndf","dca1d410":"df.plot(figsize=(15,10), legend=None)\n\nplt.show()","b3552671":"(np.log(rus + 0.5).T).plot(figsize=(15,10), legend=None)\n\nplt.show()\n","948b3fdf":"y = np.log(rus + 0.5).T\ny_m = y[y>5]\ny_m","05223e9d":"y_m.count().max()","52e1bbab":"list_columns = []\nfor column in y_m.columns:\n    list_columns.append(y_m[column].count())\n    \nfilled = pd.Series(list_columns).max()","807272d1":"y_gt_148 = pd.DataFrame(data = [[0 for i in range(len(y_m.columns))] for j in range(filled)], index = range(filled), columns = y_m.columns)\ny_gt_148","57d76ffb":"for i in range(len(y_m.columns)):\n    temp = y_m.iloc[:,i].dropna().reset_index(drop=True)\n    y_gt_148.iloc[:temp.shape[0],i] = temp","6863bcb5":"y_gt_148 = y_gt_148.replace(0,np.nan)\ny_gt_148","112ecfe0":"y_gt_148.plot(figsize=(15,10), legend=None)\n\nplt.show()","1e8649b0":"y_gt_148.iloc[0,:].max()","aed4da45":"delta = y_gt_148.iloc[0,:].max() - y_gt_148.iloc[0,:]\nall_in_one = y_gt_148 + delta\nall_in_one.head()","d2cb48ce":"all_in_one.plot(figsize=(15,10), legend=None)\n\nplt.show()","7269b72f":"# \u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043d\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u044b, \u043f\u043e\u043c\u043e\u0436\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u0442\u044c\n\nrussia_regions.loc[russia_regions['iso_code'] == 'RU-NEN', 'csse_province_state'] = 'Nenetskiy autonomous oblast'\nrussia_regions.loc[russia_regions['iso_code'] == 'RU-CHU', 'csse_province_state'] = 'Chukotskiy autonomous oblast'","3c77d43f":"rus['ind'] = rus.index\n# Altay republic > Republic of Altay\nrus.loc[rus.index == 'Altay republic', 'ind'] = 'Republic of Altay'\nrus.set_index('ind', inplace=True)","22c3f828":"sorted_obl = russia_regions.sort_values(['population']).reset_index()\n\nnsk_index = sorted_obl[sorted_obl['name']=='\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\u0430\u044f'].index[0]\n\nsorted_obl[nsk_index-3:nsk_index+4]","445ee7b5":"selected_regions = list(sorted_obl[nsk_index-3:nsk_index+4]['csse_province_state'])\nshow_regions = selected_regions + ['Moscow']\nall_in_one[show_regions]","c6b1d72f":"all_in_one[show_regions].plot(figsize=(15,10))\nplt.show()","3633fa46":"(np.log(rus.loc[show_regions] + 0.5).T[-30:]).plot(figsize=(15,10))\nplt.show()","c0c93850":"last_30_days = np.log(rus.loc[show_regions] + 0.5).T[-30:]\nlast_30_days.head()","746604dc":"last_30_days = last_30_days - last_30_days.loc['05\/02\/20']\nlast_30_days.head()","2097fc1c":"last_30_days.plot(figsize=(15,10))\n\nplt.show()","4e4e724c":"last_100_days = np.log(rus.loc[show_regions] + 0.5).T[-100:]\nlast_100_days.plot(figsize=(15,10))\nplt.show()","8aa02a54":"d100 = last_100_days[last_100_days > 5]\n\nfilled2 = d100.count().max()","df935d43":"d100_eq = pd.DataFrame(data = [[0 for i in range(len(d100.columns))] for j in range(filled2)], \\\n                        index = range(filled2), columns = d100.columns)\n\n# \u041d\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f, \u0433\u0434\u0435 148+ \u043a\u0435\u0439\u0441\u043e\u0432 \u0432 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0448\u043a\u0430\u043b\u0435\n\nfor i in range(len(d100.columns)):\n    temp = d100.iloc[:,i].dropna().reset_index(drop=True)\n    d100_eq.iloc[:temp.shape[0],i] = temp\n    \nd100_eq = d100_eq.replace(0,np.nan)\nprint(d100_eq.iloc[0,:].max())\ndelta = d100_eq.iloc[0,:].max() - d100_eq.iloc[0,:]\nd100_eq = d100_eq + delta\n\nprint(d100_eq.head())\n\nd100_eq.plot()\nplt.show()","edcf520b":"d100.plot()\nplt.show()","00a384d0":"d100","1131a44a":"d100['Novosibirsk oblast'].dropna().plot(figsize=(15,10))\nplt.show()","43570b0b":"nsk = rus.loc['Novosibirsk oblast']\nnsk","1d3c71ab":"nsk['06\/01\/20'] = 2914\nnsk['06\/02\/20'] = 3020\nnsk['06\/03\/20'] = 3122\nnsk['06\/04\/20'] = 3226\nnsk['06\/05\/20'] = 3334\nnsk['06\/06\/20'] = 3441\nnsk['06\/07\/20'] = 3546\nnsk['06\/08\/20'] = 3648\nnsk['06\/09\/20'] = 3752","78064c15":"nsk.tail()","c0507c53":"nsk[nsk>150].plot(figsize=(15,10))","a8044bd3":"delta_nsk = nsk - nsk.shift() # \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\ndelta_nsk = delta_nsk[delta_nsk>0]","1edda47b":"delta_nsk.plot(figsize=(15,10))\nplt.show()","07d2d318":"log_nsk = np.log(nsk)\nlog_nsk = log_nsk[log_nsk>5]","326809b4":"log_nsk.plot(figsize=(15,10))\nplt.show()","f50a49ef":"log_nsk.shape # \u0440\u0430\u0437\u043c\u0435\u0440","14aecb3b":"# \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u044f\u0447\u0435\u0439\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 1, \u0442.\u043a. \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043e\u0442 0 \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442)\nlog_nsk['06\/10\/20'] = 1\nlog_nsk['06\/11\/20'] = 1\nlog_nsk['06\/12\/20'] = 1\nlog_nsk['06\/13\/20'] = 1\nlog_nsk['06\/14\/20'] = 1\nlog_nsk['06\/15\/20'] = 1\nlog_nsk['06\/16\/20'] = 1\nlog_nsk['06\/17\/20'] = 1\nlog_nsk['06\/18\/20'] = 1\nlog_nsk['06\/19\/20'] = 1\nlog_nsk['06\/20\/20'] = 1\nlog_nsk['06\/21\/20'] = 1\nlog_nsk['06\/22\/20'] = 1\nlog_nsk['06\/23\/20'] = 1\nlog_nsk['06\/24\/20'] = 1\nlog_nsk['06\/25\/20'] = 1\nlog_nsk['06\/26\/20'] = 1\nlog_nsk['06\/27\/20'] = 1\nlog_nsk['06\/28\/20'] = 1\nlog_nsk['06\/29\/20'] = 1\nlog_nsk['06\/30\/20'] = 1\nlog_nsk.shape\ndf_nsk = pd.DataFrame(data = {'date' : pd.to_datetime(log_nsk.index), 'Nsk' : log_nsk.values, 'X' : range(1,71)})","3c383379":"# \u041c\u043e\u0434\u0435\u043b\u044c y = x^a \u0438\u043b\u0438 ln y = a * ln x, \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u043d\u0430 45 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f\u0445, \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u0438\u044e\u043d\u044f (21 \u0434\u0435\u043d\u044c)\n\nX_train = np.log(df_nsk.loc[0:44,'X']).values.reshape(-1,1) \ny_train = np.log(df_nsk.loc[0:44,'Nsk']).values.reshape(-1,1)\nX_test = np.log(df_nsk.loc[45:69,'X']).values.reshape(-1,1) ","2cf5d314":"X_train = np.log(df_nsk.loc[0 : 44,'X']).values.reshape(-1,1) \ny_train = np.log(df_nsk.loc[0 : 44,'Nsk']).values.reshape(-1,1)\nX_test = np.log(df_nsk.loc[45 : 69, 'X']).values.reshape(-1,1) \n\n    # \u0421\u043a\u0430\u043b\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0434\u043b\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0441 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0445\u043e\u0440\u043e\u0448\u043e\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\n\n    # print(scaler.mean_, scaler.var_)\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n    # \u0421\u0442\u0440\u043e\u0438\u043c \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e\nfrom sklearn.linear_model import LinearRegression\nreg = LinearRegression().fit(X_train_scaled, y_train)\n\n    # \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f 2 \u043c\u0435\u0442\u0440\u0438\u043a: \u043f\u0435\u0440\u0432\u0430\u044f - \u043a\u043e\u043d\u043a\u0443\u0440\u0441\u043d\u0430\u044f, \u0432\u0442\u043e\u0440\u0430\u044f - \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u043e\u0442 \u0438\u0441\u0442\u0438\u043d\u044b\ndef MALE(pred, true):\n    return np.mean(np.abs(np.log10((pred + 1) \/ (true + 1))))\n\ndef AvgProc(pred, true):\n    return np.mean(np.abs((pred-true)\/true))\n\n    # \u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0443 \u043a \u043a\u043e\u043b-\u0432\u0443 \u0441\u043b\u0443\u0447\u0430\u0435\u0432\ny_pred_test_exp = np.round(np.exp(np.exp(reg.predict(X_test_scaled))),0)\ny_pred_train_exp = np.round(np.exp(np.exp(reg.predict(X_train_scaled))),0)\ny_train_exp = np.round(np.exp(np.exp(y_train)),0)\n\nplt.figure(figsize=(15,10))\n\nplt.plot(df_nsk.loc[45 : 69,'date'], y_pred_test_exp) \nplt.plot(df_nsk.loc[0 : 44,'date'], y_pred_train_exp)\nplt.plot(df_nsk.loc[0 : 44,'date'], y_train_exp)\n\nplt.legend()\nplt.legend()\nplt.show()\nplt.grid","6a987784":"from matplotlib import pyplot\nfrom statsmodels.tsa.ar_model import AutoReg\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nX = log_nsk.values\ntrain, test = X[1:len(X)-31], X[len(X)-31:len(X)-21] # \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043d\u0430 30 \u0434\u043d\u044f\u0445, \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c - 10, \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043e\u043c\n\nmodel = AutoReg(train, lags=10) # lag = 10, \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0434\u043b\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 (RMSE \u043f\u0440\u0438 lag = 10 - \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0430\u044f)\nmodel_fit = model.fit()\nprint('Coefficients: %s' % model_fit.params)\n\npredictions = model_fit.predict(start=len(train), end=len(train)+len(test)-1, dynamic=False)\nfor i in range(len(predictions)):\n    print('predicted=%f, expected=%f' % (predictions[i], test[i]))\nrmse = sqrt(mean_squared_error(test, predictions))\nprint('Test RMSE: %.3f' % rmse) # RMSE - \u0441\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430\n\npyplot.plot(test)\npyplot.plot(predictions, color='red')\npyplot.show()","d1e1950b":"X = log_nsk.values\ntrain, test = X[1:len(X)-21], X[len(X)-21:] # \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043d\u0430 39 \u0434\u043d\u044f\u0445, \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c - 21\n\nmodel = AutoReg(train, lags=10)\nmodel_fit = model.fit()\nprint('Coefficients: %s' % model_fit.params)\n\npredictions = model_fit.predict(start=len(train), end=len(train)+len(test)-1, dynamic=False)\nfor i in range(len(predictions)):\n    print('predicted=%f' % (predictions[i]))\n\npyplot.plot(predictions, color='red')\npyplot.show()","00bda522":"# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0432 \u043c\u0438\u0440\u0435\n\nworld_cases = pd.read_csv('\/kaggle\/input\/updatedjohn\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\nworld_cases = world_cases.groupby('Country\/Region').sum()\nworld_cases.drop(['Lat', 'Long'], axis=1, inplace=True)\nworld_cases = world_cases.T\nworld_cases","95cf2c3f":"# \u0413\u0440\u0430\u0444\u0438\u043a \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0432 \u0420\u043e\u0441\u0441\u0438\u0438, \u0413\u0435\u0440\u043c\u0430\u043d\u0438\u0438, \u0421\u0428\u0410, \u0418\u0442\u0430\u043b\u0438\u0438, \u041a\u0438\u0442\u0430\u0435 (\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 - \u0414\u0430\u0442\u0430)\n\nfig, ax = plt.subplots(figsize=(15,10))\nplt.plot(world_cases['Russia'], 'r.-', label = 'Russia')\nplt.plot(world_cases['Germany'], 'g.-', label = 'Germany')\nplt.plot(world_cases['US'], 'b.-', label = 'US')\nplt.plot(world_cases['Italy'], 'y.-', label = 'Italy')\nplt.plot(world_cases['China'], 'c.-', label = 'China')\nplt.ylabel('Confirmed')\nplt.xlabel('Date')\nplt.grid()\nplt.legend()","ed64a0cf":"# \u0413\u0440\u0430\u0444\u0438\u043a \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0432 \u0420\u043e\u0441\u0441\u0438\u0438, \u0413\u0435\u0440\u043c\u0430\u043d\u0438\u0438, \u0421\u0428\u0410, \u0418\u0442\u0430\u043b\u0438\u0438, \u041a\u0438\u0442\u0430\u0435 (\u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 - \u0414\u0430\u0442\u0430)\n\nfig, ax = plt.subplots(figsize=(15,10))\nplt.plot(np.log(world_cases['Russia']+1), 'r.-', label = 'Russia')\nplt.plot(np.log(world_cases['Germany']+1), 'g.-', label = 'Germany')\nplt.plot(np.log(world_cases['US']+1), 'b.-', label = 'US')\nplt.plot(np.log(world_cases['Italy']+1), 'y.-', label = 'Italy')\nplt.plot(np.log(world_cases['China']+1), 'c.-', label = 'China')\nplt.ylabel('Log(confirmed)')\nplt.xlabel('Date')\nplt.grid()\nplt.legend()","761010dd":"# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0441\u043c\u0435\u0440\u0442\u043d\u043e\u0441\u0442\u0438 \u0432 \u043c\u0438\u0440\u0435\n\nworld_deaths = pd.read_csv('\/kaggle\/input\/updatedjohn\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nworld_deaths = world_deaths.groupby('Country\/Region').sum()\nworld_deaths.drop(['Lat', 'Long'], axis=1, inplace=True)\nworld_deaths = world_deaths.T","f613234c":"# \u0413\u0440\u0430\u0444\u0438\u043a \u0441\u043c\u0435\u0440\u0442\u043d\u043e\u0441\u0442\u0438 \u0432 \u0420\u043e\u0441\u0441\u0438\u0438, \u0413\u0435\u0440\u043c\u0430\u043d\u0438\u0438, \u0421\u0428\u0410, \u0418\u0442\u0430\u043b\u0438\u0438, \u041a\u0438\u0442\u0430\u0435 (\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043c\u0435\u0440\u0442\u0435\u0439 \u043e\u0442 COVID-19 - \u0414\u0430\u0442\u0430)\n\nfig, ax = plt.subplots(figsize=(15,10))\nplt.plot(world_deaths['Russia'], 'r.-', label = 'Russia')\nplt.plot(world_deaths['Germany'], 'g.-', label = 'Germany')\nplt.plot(world_deaths['US'], 'b.-', label = 'US')\nplt.plot(world_deaths['Italy'], 'y.-', label = 'Italy')\nplt.plot(world_deaths['China'], 'c.-', label = 'China')\nplt.ylabel('Died')\nplt.xlabel('Date')\nplt.grid()\nplt.legend()","a3ac0e56":"# \u0413\u0440\u0430\u0444\u0438\u043a \u0441\u043c\u0435\u0440\u0442\u043d\u043e\u0441\u0442\u0438 \u0432 \u0420\u043e\u0441\u0441\u0438\u0438, \u0413\u0435\u0440\u043c\u0430\u043d\u0438\u0438, \u0421\u0428\u0410, \u0418\u0442\u0430\u043b\u0438\u0438, \u041a\u0438\u0442\u0430\u0435 (\u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u043c\u0435\u0440\u0442\u0435\u0439 - \u0414\u0430\u0442\u0430)\n\nfig, ax = plt.subplots(figsize=(15,10))\nplt.plot(np.log(world_deaths['Russia']+1), 'r.-', label = 'Russia')\nplt.plot(np.log(world_deaths['Germany']+1), 'g.-', label = 'Germany')\nplt.plot(np.log(world_deaths['US']+1), 'b.-', label = 'US')\nplt.plot(np.log(world_deaths['Italy']+1), 'y.-', label = 'Italy')\nplt.plot(np.log(world_deaths['China']+1), 'c.-', label = 'China')\nplt.ylabel('Log(died)')\nplt.xlabel('Date')\nplt.grid()\nplt.legend()","3c180167":"# \u0412\u0442\u043e\u0440\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","50b81dd3":"\u0414\u043e\u0431\u0430\u0432\u0438\u043b\u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0430\u0442\u0443","fd950988":"*\u041f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u043e \u0430\u0432\u0442\u043e\u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u043e\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 AR(10) \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 COVID-19 \u0432 \u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043d\u0430 1 \u0438\u044e\u043b\u044f 2020\u0433 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 6000, (\u043e\u0441\u044c y - \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u043b\u0443\u0447\u0430\u0435\u0432, x - \u043d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u0434\u043d\u044f (10 - 30 \u0438\u044e\u043d\u044f)). \u041f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, RMSE \u043e\u043a\u0430\u0437\u0430\u043b\u0430\u0441\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u043e\u0439, \u043f\u0440\u0438\u0447\u0435\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u043a\u0430\u0437\u0430\u043b\u0438\u0441\u044c \u0432\u044b\u0448\u0435 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 => \u0438\u0437 \u0434\u0432\u0443\u0445 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0439 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e. \u0421 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0431\u043e\u043b\u0435\u0435 \u043a\u043e\u043d\u0441\u0435\u0440\u0432\u0430\u0442\u0438\u0432\u043d\u044b\u0439.  *","ea334ecc":"\u0410\u043d\u0430\u043b\u0438\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432: \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432, \u0438\u0437 \u0442\u0440\u0435\u0445 \u0440\u0435\u0433\u0438\u043e\u043d\u043e\u0432 \u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0435 \u0442\u0435\u043c\u043f\u044b \u0440\u043e\u0441\u0442\u0430 \u0447\u0438\u0441\u043b\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0430\u043d\u0438\u044f COVID-19 ","77f2c6b8":"\u0422\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0430 10 \u0434\u043d\u0435\u0439","84c01e8b":"\u0412 \u0434\u0432\u0443\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0432\u044b\u0448\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\u0445 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u0430 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0430 \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0432 \u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0438 6 \u0441\u0445\u043e\u0436\u0438\u0445 \u043f\u043e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0433\u0438\u043e\u043d\u0430\u0445","7b9776c3":"\u0421\u0440\u0430\u0432\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437","37df70b5":"# \u0427\u0430\u0441\u0442\u044c 1. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432. \u0414\u0438\u043d\u0430\u043c\u0438\u043a\u0430 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f (\u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c) COVID-19 \u0432 \u0442\u0440\u0451\u0445 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\u0445 \u0420\u043e\u0441\u0441\u0438\u0438.","b3655cec":"# Here is the end of the presentation","0fa54a79":"\u0418\u0442\u043e\u0433\u043e\u0432\u043e\u0435 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 10 \u043f\u043e 30 \u0438\u044e\u043d\u044f (\u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e)","f4a00543":"\u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d \u043f\u043e \u0430\u0432\u0442\u043e\u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u043e\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 AR(10). \u0411\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. ","32809c16":"\u041d\u0430\u043f\u043e\u043b\u043d\u0438\u043b\u0438 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f, \u0433\u0434\u0435 148+ \u043a\u0435\u0439\u0441\u043e\u0432 \u0432 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0448\u043a\u0430\u043b\u0435","7cdbb095":"# \u0427\u0430\u0441\u0442\u044c 2. \u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f COVID-19 \u0432 \u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043d\u0430 \u0438\u044e\u043d\u044c.","0f41c071":"\u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u043f\u043e\u043a\u0430\u0437\u0430\u043b, \u0447\u0442\u043e \u043d\u0430 1 \u0438\u044e\u043b\u044f \u0432 \u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0437\u0430\u0440\u0430\u0436\u0435\u043d\u0438\u044f COVID-19 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 5000 \u0441\u043b\u0443\u0447\u0430\u0435\u0432. \u041d\u043e, \u043a\u0430\u043a \u043c\u044b \u0432\u0438\u0434\u0438\u043c \u0438\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430, \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0438 \u043e\u0431\u0443\u0447\u0430\u0435\u043c\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u043e\u0439 \u0440\u0430\u0441\u0442\u0443\u0442 => \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435.","14cb4857":"\u0418\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u0441\u043b\u0435\u0434\u0443\u0435\u0442, \u0447\u0442\u043e \u0447\u0438\u0441\u043b\u043e \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0448\u0438\u0445 COVID-19 \u0432 \u041c\u043e\u0441\u043a\u0432\u0435 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0432\u044b\u0448\u0435, \u0447\u0435\u043c \u0432 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\u0445 => \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c","9834746c":"# \u0427\u0430\u0441\u0442\u044c 3. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432. \u0414\u0438\u043d\u0430\u043c\u0438\u043a\u0430 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f (\u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c, \u0441\u043c\u0435\u0440\u0442\u043d\u043e\u0441\u0442\u044c) COVID-19 \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u043c\u0438\u0440\u0430.","2f559256":"# \u041f\u0435\u0440\u0432\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"}}