{"cell_type":{"5ef70add":"code","8cd1ccea":"code","376a4498":"code","b4963fcb":"code","392cfa4f":"code","35bee69c":"code","7ddd8cc2":"code","d2162302":"code","4c166b79":"code","3419ecfe":"code","98cea348":"code","22f52e6d":"code","b01e31cf":"code","468ad14d":"code","b2266035":"code","c73a184f":"code","41ed6e5e":"code","e3019ad0":"code","c2eb65bd":"code","dd3c3ff9":"code","2be95966":"code","d506ad5b":"code","1f79d3d5":"code","c89e05d9":"code","d5abfc45":"code","bb9656f6":"code","42920375":"code","bb0fd4d6":"code","798dfa26":"code","dbdaa699":"code","26b1fb12":"code","2473215b":"code","e7dea60e":"code","068edb6e":"code","0705d135":"code","463f4f09":"code","2758c7f5":"code","17af86c5":"code","137bbc7c":"code","ada86010":"code","b9e0b247":"code","919a83f2":"code","478bcd5f":"code","c182ef17":"code","58354c22":"code","3b0f736d":"code","f14b7824":"code","ec1d9c78":"code","838fe33a":"code","abbad0b9":"code","d6451146":"code","e4e88dd8":"code","670275ed":"code","a5e3129f":"code","fdaf3fc2":"code","42c30900":"code","a549ef67":"code","d67758ec":"code","7a212333":"code","4c97a20f":"code","9e3df889":"code","b926af2a":"code","ec5acd9e":"code","77ff06ce":"code","2b5cb8b0":"code","5ecb9ecf":"code","df489dae":"code","6b831987":"code","67ce925e":"code","73105412":"code","2c5626a4":"code","a10ed2b8":"code","7bc35dbb":"code","8bc1e106":"markdown","b513a3ce":"markdown","e286eed0":"markdown","6b562a07":"markdown","73e378c8":"markdown","97f7ee6a":"markdown","2aee7c9a":"markdown","00156228":"markdown","3ae83c1f":"markdown","d442b5cc":"markdown","00834211":"markdown","9c71552b":"markdown","9c26f7a3":"markdown","c47e04d8":"markdown","b3d52d40":"markdown","c587e0fe":"markdown","cedb131f":"markdown","15d19002":"markdown","e922440c":"markdown","153b4bb2":"markdown","d82a4a1d":"markdown","51f4a529":"markdown","50f899b9":"markdown","cb42eead":"markdown","af21d6a5":"markdown","3c34d689":"markdown","c33162a5":"markdown","f60e5ce2":"markdown"},"source":{"5ef70add":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n#sns.set() #To set style\n\nimport warnings\nwarnings.filterwarnings('ignore')","8cd1ccea":"x = np.float32(1.0)\nprint(x)","376a4498":"x = np.float64(946464646464646464646464646464466.333131313113)\nprint(x)","b4963fcb":"x = np.int_([1,2,4])\nprint(x)","392cfa4f":"x = np.arange(3, dtype=np.uint8)\nprint(x)","35bee69c":"x = np.arange(2, 10, 2)\nx","7ddd8cc2":"x = np.array([1, 2, 3], dtype='f')\nprint(x)","d2162302":"x = np.int8(34)\nprint(x)","4c166b79":"import numpy as np","3419ecfe":"np.zeros((7, 8))","98cea348":"np.ones((5, 6))","22f52e6d":"np.arange(10)","b01e31cf":"np.arange(2, 10)","468ad14d":"np.arange(3.5, 9.8, 0.2)","b2266035":"np.arange(2, 10, dtype=float)","c73a184f":"np.arange(2, 10, 0.2)","41ed6e5e":"np.linspace(5, 10, 6)","e3019ad0":"np.linspace(1, 10, 20)","c2eb65bd":"np.indices((2, 3, 1))","dd3c3ff9":"x = np.array([1, 2, 3])\nprint(x)","2be95966":"x = np.array([[0, 0],[1, 1]])\nprint(x)\n","d506ad5b":"x = np.arange(10)\nx","1f79d3d5":"print(x[5])","c89e05d9":"# let's create an array\nx = np.arange(10)\n\n# let's make the array 2 dimensional\nx.shape = (2, 5)\nx\n","d5abfc45":"# let's try to access array elements\nprint(x[1, 2]) #7\nprint(x[0, 2])  #2\nprint(x[1, 3])  #8","bb9656f6":"# let's try to get the rows of the array\n\nprint(x[0])\nprint(x[1])","42920375":"# let's try anther way to access the elements\n\nprint(x[0][2])","bb0fd4d6":"# let's try other indexing options\n\nx = np.arange(20)\nprint(x[5:11]) #5 6 7 8 9 10","798dfa26":"x = [1, 2, 3, 4, 5]\nx= x[::-1]\nx\n","dbdaa699":"x = np.array([1, 2, 3, 4, 5])\nprint(x[:-3])\nprint(x[:3])\nprint(x[-3:])\nprint(x[3:])","26b1fb12":"x = np.array([2, -4, 5, -6, 7, 0])\nx = x[x > 0]\nx","2473215b":"# indexing through values\n\nprint(x[x > 2])\nprint(x[x == 3])\nprint(x[x >= 2])","e7dea60e":"x = [1, 2, 3, 4, 5]\nz = (a**2 for a in x)\n\nq = []\nfor i in z:\n    q.append(i)\nprint(q)","068edb6e":"x = [1, 2, 3, 4, 5]\nz = [a\/3 for a in x]\nz\n","0705d135":"x = np.array([('Sita', 39, 51.8), ('Gita', 23, 47.5)],\n            dtype=[('name', 'U10'), ('age', 'i4'), ('weight', 'f4')])","463f4f09":"# let's print x(structured array)\n\nprint(x)","2758c7f5":"# let's do some indexing\n\nprint(x[1])\nprint(x[0])\n","17af86c5":"# let's try to access according to the fields\n\nprint(x['age'])\nprint(x['name'])\nprint(x['weight'])","137bbc7c":"# let's try to modify the values using the fields\n\nx['age'] = [19, 74]\nprint(x['age'])","ada86010":"# lets check the documentation of np.ones()\n\nhelp(np.ones)\n","b9e0b247":"np.zeros(4)","919a83f2":"np.zeros((3, 4))","478bcd5f":"np.zeros((2, 3), dtype = 'int')","c182ef17":"np.random.random(3)","58354c22":"np.random.random(11)","3b0f736d":"np.arange(2, 50)","f14b7824":"np.arange(2, 200, 10)","ec1d9c78":"np.linspace(1, 10)","838fe33a":"np.linspace(2, 7, 10)","abbad0b9":"import numpy as np\nnp.full((2,5), 6)\n","d6451146":"np.full(5, 9)","e4e88dd8":"np.tile([0, 1], 5)","670275ed":"np.tile([0, 1], [3, 4])","a5e3129f":"np.eye(2)","fdaf3fc2":"np.eye(4)","42c30900":"np.random.randint(1, 100)","a549ef67":"np.random.randint(30)","d67758ec":"np.random.randint(-40, 40)","7a212333":"a = np.array([2, 3, 45, 6])\nprint(a)","4c97a20f":"a.shape\n","9e3df889":"a.dtype\n","b926af2a":"a.ndim\n","ec5acd9e":"a.itemsize","77ff06ce":"import numpy as np\n\nx= np.zeros((2, 4))\nprint(x)","2b5cb8b0":"# lets take an array a and take 12 elements inside it\n\na = np.arange(0, 12)\nprint(a)\n","5ecb9ecf":"# lets try to resize this array\n\nprint('Array with 3 Rows and 4 Columns')\nb = a.reshape(3, 4)\nprint(b,'\\n')\n\nprint('Array with 4 Rows and 3 Columns')\nc = a.reshape(4, 3)\nprint(c, '\\n')\n\nprint('Array with 6 Rows and 2 Columns')\nd = a.reshape(6, 2)\nprint(d, '\\n')\n\nprint('Array with 2 Rows and 6 Columns')\ne = a.reshape(2, 6)\nprint(e, '\\n')\n","df489dae":"# If you specify -1 as a dimension, the dimensions are automatically calculated\n\nx = a.reshape(4, -1)\ny = a.reshape(3, -1)\nz = a.reshape(6, -1)\nq = a.reshape(2, -1)\n\nprint(x, '\\n')\nprint(y, '\\n')\nprint(z, '\\n')\nprint(a, '\\n')","6b831987":"import numpy as np\nx = np.full((2, 6), 4)\nx.T","67ce925e":"# lets make an array and transpose the array\n\n# lets take an array\narray = np.array([[3, 4, 4],[7, 7,8]])\n\nprint('Before Transposition of Array b')\nprint(array)\n\n# lets transpose the array\ntranspose = array.T\n\nprint('After Transposition of Array a')\nprint(transpose)","73105412":"# lets create two arrays for performing the operation of vertical stacking\n\n# for vertical stacking the number of columns must be same\narr1 = np.arange(28).reshape(7, 4)\narr2 = np.arange(20).reshape(5, 4)\n\nprint('First Array')\nprint(arr1, '\\n')\nprint('Second Array')\nprint(arr2)\n","2c5626a4":"# Note that np.vstack(a, b) throws an error - you need to pass the arrays as a list\n\nnp.vstack((arr1, arr2))\n","a10ed2b8":"# lets create two arrays for performing the operation of vertical stacking\n\n# for horizontal stakcing we must have same numbers of rows\narr1 = np.arange(21).reshape(3, 7)\narr2 = np.arange(6).reshape(3, 2)\n\nprint('First Array')\nprint(arr1, '\\n')\nprint('Second Array')\nprint(arr2)\n","7bc35dbb":"# Note that np.hstack(a, b) throws an error - you need to pass the arrays as a list\n\nnp.hstack((arr1, arr2))","8bc1e106":"#### Stacking of Arrays\n\nStacking: np.hstack() and n.vstack()\n\nStacking is done using the np.hstack() and np.vstack() methods. For horizontal stacking, the number of rows should be the same, while for vertical stacking, the number of columns should be the same.","b513a3ce":"### Inspect the Structure and Content of Arrays\nIt is helpful to inspect the structure of numpy arrays, especially while working with large arrays. Some attributes of numpy arrays are:\n\n- shape: Shape of array (n x m)\n- dtype: data type (int, float etc.)\n- ndim: Number of dimensions (or axes)\n- itemsize: Memory used by each array elememnt in bytes\n\n\nLet's say you are working with a moderately large array of size 1000 x 300. First, you would want to wrap your head around the basic shape and size of the array.","e286eed0":"### random","6b562a07":"### linspace","73e378c8":"## Happy Learning","97f7ee6a":"### Manipulating Arrays\nLet's look at some ways to manipulate arrays, i.e. changing the shape, combining and splitting arrays, etc.\n\n### Reshaping Arrays\nReshaping is done using the reshape() function.\n\n","2aee7c9a":"### tile","00156228":"### Operations in Numpy","3ae83c1f":"### arange","d442b5cc":"### eye","00834211":"####  Array indexing refers to any use of the square brackets ([]) to index array values. There are many options to indexing, which give numpy indexing great power\n#### Single Element Indexing","9c71552b":"### Transposing an Array","9c26f7a3":"### full","c47e04d8":"\nWe will cover some of the most useful built in functions available in numpy\n\nFor initializing arrays.\n\nApart from usual arrays, we can also create arrays with special patterns\n\nThe following ways are commonly used:\n\n- np.ones(): Create array of 1s\n- np.zeros(): Create array of 0s\n- np.random.random(): Create array of random numbers\n- np.arange(): Create array with increments of a fixed step size\n- np.linspace(): Create array of fixed length","b3d52d40":"### -1 means \"whatever dimension is needed\"","c587e0fe":"### randint","cedb131f":"#### hstack","15d19002":"### Zeros","e922440c":"# Numpy\nNumPy is a Python package which stands for 'Numerical Python'. It is the core library for scientific computing, which contains a powerful n-dimensional array object, provide tools for integrating C, C++ etc. It is also useful in linear algebra, random number capability etc","153b4bb2":"Structured arrays are n dimensional arrays whose datatype is a composition of simpler datatypes organized as a sequence of named fields","d82a4a1d":"### Operations on NumPy Arrays\nThe learning objectives of this section are:\n\n- Manipulate arrays\n        - Reshape arrays\n        - Stack arrays\n- Perform operations on arrays\n        - Perform basic mathematical operations\n        - Apply built-in functions\n        - Apply your own functions\n        - Apply basic linear algebra operations","51f4a529":"**Basics**","50f899b9":"## Structured Arrays","cb42eead":"## There are 5 general mechanisms for creating arrays:\n    - Conversion from other Python structures (e.g., lists, tuples)\n    - Intrinsic numpy array creation objects (e.g., arange, ones, zeros, etc.)\n    - Reading arrays from disk, either from standard or custom formats\n    - Creating arrays from raw bytes through the use of strings or buffers\n    - Use of special library functions (e.g., random)\n## Instrinsic Array Creation","af21d6a5":"Unlike lists and tuples, numpy arrays support multidimensional indexing for multidimensional arrays. That means that it is not necessary to separate each dimension\u2019s index into its own set of square brackets.","3c34d689":"Apart from the methods mentioned above, there are a few more NumPy functions that you can use to create special NumPy arrays:\n\n- np.full(): Create a constant array of any number \u2018n\u2019\n- np.tile(): Create a new array by repeating an existing array for a particular number of times\n- np.eye(): Create an identity matrix of any dimension\n- np.random.randint(): Create a random array of integers within a particular range","c33162a5":"## Built in Functions","f60e5ce2":"#### vstack"}}