{"cell_type":{"7fd4bc0e":"code","b98dfc97":"code","c65b159f":"code","7247023b":"code","9163e59f":"code","b2dd5d8c":"code","7c59d8ba":"code","ed294c72":"code","ccd216c5":"code","5004fd11":"code","679c942b":"code","fcf82240":"code","747ed13e":"code","5ebc0069":"code","7834fe42":"code","bec2be7d":"code","371a7e06":"code","350c89b7":"code","8b17acf8":"code","75e73645":"code","a09bb135":"code","9ee75f3e":"code","90e712d2":"code","bad7150f":"code","eb0902da":"markdown","fc36b8cb":"markdown","3177ffd9":"markdown","408bf715":"markdown","0d863a9b":"markdown","4fa1a852":"markdown","075810a7":"markdown","6f16eb71":"markdown","20df7a2b":"markdown","0ad603c4":"markdown","6070f2a8":"markdown","a562a0dd":"markdown","ceb1d216":"markdown","d010da89":"markdown","0ef93d69":"markdown","2af75848":"markdown","9883b9e4":"markdown"},"source":{"7fd4bc0e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","b98dfc97":"df = pd.read_csv('..\/input\/sonar-dataset-suitable-for-classification\/sonar.all-data.csv')","c65b159f":"df.head()","7247023b":"df.info()","9163e59f":"df.describe()","b2dd5d8c":"df[\"Label\"].describe()","7c59d8ba":"X = df.drop([\"Label\"], axis = 1)\ny = df[\"Label\"]","ed294c72":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)","ccd216c5":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()","5004fd11":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier()","679c942b":"operations = [(\"Scaler\",scaler),(\"KNN\", knn)]","fcf82240":"from sklearn.pipeline import Pipeline\n\npipeline = Pipeline(operations)","747ed13e":"from sklearn.model_selection import GridSearchCV\n\nk_values = list(range(1,20))","5ebc0069":"pipeline.get_params().keys()","7834fe42":"param_grid = {\"KNN__n_neighbors\" : k_values}","bec2be7d":"cv_classifier = GridSearchCV(pipeline,param_grid=param_grid,scoring=\"accuracy\")","371a7e06":"cv_classifier.fit(X_train,y_train)","350c89b7":"cv_classifier.best_estimator_.get_params()","8b17acf8":"scaler.fit(X_train)\nscaled_X_train= scaler.transform(X_train)\nscaled_X_test= scaler.transform(X_test)","75e73645":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nerror = []\n\nfor i in range(1,40):\n    knn_model = KNeighborsClassifier(n_neighbors=i)\n    knn_model.fit(scaled_X_train,y_train)\n    \n    y_pred = knn_model.predict(scaled_X_test)\n    \n    e = 1- accuracy_score(y_test, y_pred)\n    error.append(e)\n\nerror","a09bb135":"plt.figure(figsize=(10, 6))\nplt.plot(range(1, 40), error, label='Test Error')\nplt.legend()\nplt.ylabel('Error Rate')\nplt.xlabel('K Value')","9ee75f3e":"knn_model = KNeighborsClassifier(n_neighbors=1)\nknn_model.fit(scaled_X_train,y_train)\ny_pred = knn_model.predict(scaled_X_test)","90e712d2":"y_pred","bad7150f":"print(classification_report(y_test, y_pred))","eb0902da":"## 5. Spliting the test and train data","fc36b8cb":"## 6. Scaling the features for pipeline","3177ffd9":"## 1. Import Libraries","408bf715":"## 4. Determining features and label","0d863a9b":"### Best k = 1 via Elbow method","4fa1a852":"## 9. Finding best K with Grid Search","075810a7":"## 8. Building the pipeline","6f16eb71":"### Because all of the features are the same type, EDA won't give us any intuiton. so let's just move to model training!","20df7a2b":"### Best K = 1 via Grid Search","0ad603c4":"## 11. Evaluating the final model","6070f2a8":"### Label consists of two values, M and R.","a562a0dd":"### Fortunately we got 60 clean features!","ceb1d216":"## 10. Finding best K with Elbow method","d010da89":"## 7. Creating the model for pipeling","0ef93d69":"### 83% Accuracy!","2af75848":"## 3. Data overview","9883b9e4":"## 2. Reading Data"}}