{"cell_type":{"ae4ec22e":"code","1ea81b10":"code","d7e48fdc":"code","34d387ed":"code","cde5cc49":"code","2585f295":"code","3ec91241":"code","510d7a9e":"code","57cb930e":"code","bf550edd":"code","df586d39":"code","08328a92":"code","1f4e39bb":"code","692dfeb8":"code","b7afc752":"code","b39c48c4":"code","348beb66":"code","9bb163ad":"code","7c3c20ff":"code","bb43c2c8":"code","dc1e6427":"code","2995e74a":"code","76075153":"code","48c60165":"code","ec58bcd9":"code","1b0498c6":"code","914a8268":"code","87f6f5ea":"code","ea8e0b75":"code","f060a77e":"code","fcac23b8":"code","8aa6a887":"code","ec3abb64":"code","95bd39c7":"code","2425ff83":"code","c135c208":"code","c44b496b":"code","1fbe5fdb":"code","97678de8":"code","42d19f72":"code","87093d08":"code","a64781ab":"code","133ad758":"code","b1f4d269":"code","555f921a":"code","f45aeac1":"code","bcaee33b":"code","1afaefab":"code","4dcfee86":"code","a59194a0":"code","0c2d2479":"code","0d99cf7e":"code","4044ed39":"code","0b63934d":"code","a48ca661":"code","37aa23ac":"code","f1e43105":"code","cce5fca6":"code","d2722b92":"code","fab66529":"code","35e8b0ed":"code","01d5f4cb":"code","907bd2de":"code","3349d7b7":"code","0b318fe6":"code","fc420b99":"code","19c90261":"code","49a6391f":"code","d4468e2e":"code","04ef2eec":"code","76a2352a":"code","7e7204b0":"code","900fed1e":"code","d63ff829":"code","93f1c997":"code","304fbb43":"code","3c5055bf":"code","d4e66780":"code","8f3ab3b0":"code","6996ed4b":"code","673cea9f":"code","0d68c83c":"code","7af363d0":"code","b3a90c51":"code","c199a008":"code","cdf0c4b1":"code","7b98ec8d":"code","3056d041":"code","3f953345":"code","8c3f6ca9":"code","50e36f94":"code","00d663e0":"code","8faff0a5":"code","a17a9f71":"code","5fed6bc2":"code","7ea8b57d":"code","e5b4154a":"code","f78a741b":"code","87047e24":"markdown","28f23320":"markdown","79d275aa":"markdown","f72d5d37":"markdown","cb5d6235":"markdown","5e3292a0":"markdown","4541b917":"markdown","a8b085ea":"markdown","bd9e0810":"markdown","052cd1fc":"markdown","78474839":"markdown","4f34fdff":"markdown","cc513ba1":"markdown","b4aea6fa":"markdown","74f037b9":"markdown","2c3b30bc":"markdown","73115f3d":"markdown","9039e838":"markdown"},"source":{"ae4ec22e":"#Let's Import the Packages...\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nimport warnings\nwarnings.filterwarnings('ignore')","1ea81b10":"#Let's Read csv file\nchurn = pd.read_csv(\"..\/input\/churn-modelling\/Churn_Modelling.csv\")\n#Show some records of dataframe\nchurn.sample(5)","d7e48fdc":"churn.index","34d387ed":"# get information about data!!\nchurn.info()\n# In this data some features are in the form object (Geography -Gender -Surname)","cde5cc49":"# Check columns list and missing values\nchurn.isnull().sum()","2585f295":"# Get unique count for each variable\nchurn.nunique()","3ec91241":"# We choose the features that affect exited  \n#  First method\nchurn_select = churn.loc[:,['CreditScore','Geography','Gender','Age','Tenure','Balance','NumOfProducts','HasCrCard','IsActiveMember','EstimatedSalary','Exited']]\nchurn_select","510d7a9e":"# Drop the columns as explained above---->(\"RowNumber\", \"CustomerId\", \"Surname\")\n# Second method\nchurn_sel = churn.drop([\"RowNumber\", \"CustomerId\", \"Surname\"], axis = 1)\nchurn_sel","57cb930e":"# get information new dataset\nchurn_select.info()\n# We need to pay attention to  two object: 1-Geography  &  2-Gender ","bf550edd":"#  check missing Values \nchurn_select.isnull().sum()","df586d39":"# ENCODING Convert object to int\nchurn_select_encod = pd.get_dummies(churn_select)\nchurn_select_encod","08328a92":"churn_select_encod.info()","1f4e39bb":"churn_select_encod","692dfeb8":"#We specify continuous and discrete variables for scaling \ncontinuous_var = ['CreditScore','Age','Tenure','Balance','NumOfProducts','EstimatedSalary']\ndiscrete_var = ['HasCrCard','IsActiveMember',\"Geography\", \"Gender\"]","b7afc752":"# minMax scaling the continuous variables \nminvar = churn_select_encod[continuous_var].min().copy()\nmaxvar = churn_select_encod[continuous_var].max().copy()\nchurn_select_encod[continuous_var] = (churn_select_encod[continuous_var]-minvar)\/(maxvar-minvar)\nchurn_select_encod.head()","b39c48c4":"corr = churn_select_encod.corr()\ncorr.shape","348beb66":"# Plotting the heatmap of correlation between features\nplt.figure(figsize=(25,25))\nsns.heatmap(corr, cbar=True, square= True, fmt='.1f', annot=True, annot_kws={'size':15}, cmap='YlGnBu',linewidths=.5)","9bb163ad":"# shift column 'exited' to first position\nfirst_column = churn_select_encod.pop('Exited')\n  \n# insert column using insert(position,column_name,\n# first_column) function\nchurn_select_encod.insert(0, 'Exited', first_column)","7c3c20ff":"churn_select_encod","bb43c2c8":"corr = churn_select_encod.corr()\ncorr.shape","dc1e6427":"mask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    f, ax = plt.subplots(figsize=(15, 15))\n    ax = sns.heatmap(corr, cbar=True, square= True, fmt='.1f', annot=True, annot_kws={'size':15}, cmap='YlGnBu',linewidths=.5,mask = mask)","2995e74a":"# crosstab between Age and exited\npd.crosstab(churn_select.Age,churn_select.Exited,normalize = \"index\"  )","76075153":"# crosstab between Gender and exited\npd.crosstab(churn_select.Gender,churn_select.Exited,normalize = \"index\"  )","48c60165":"# crosstab between Geography and exited\npd.crosstab(churn_select.Geography,churn_select.Exited,normalize = \"index\"  )","ec58bcd9":"# crosstab between IsActiveMember and exited\npd.crosstab(churn_select.IsActiveMember,churn_select.Exited,normalize = \"index\"  )","1b0498c6":"# crosstab between Balance and exited\npd.crosstab(churn_select.Balance,churn_select.Exited,normalize = \"index\"  )","914a8268":"print('seaborn: %s' % sns.__version__)","87f6f5ea":"churn_select","ea8e0b75":"# number of total Servived sex\nsns.displot(data=churn_select, x=\"Exited\",hue='Gender') ","f060a77e":"labels = 'Exited', 'Retained'\nsizes = [churn_select.Exited[churn_select['Exited']==1].count(), churn_select.Exited[churn_select['Exited']==0].count()]\nexplode = (0, 0.1)\nfig1, ax1 = plt.subplots(figsize=(10, 8))\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.title(\"\", size = 20)\nplt.show()","fcac23b8":"sns.displot(data=churn_select, x=\"Exited\",hue='Geography',kind ='kde') ","8aa6a887":"sns.countplot(data=churn_select, x=\"Geography\",hue='Exited')","ec3abb64":"sns.countplot(data=churn_select, x=\"IsActiveMember\",hue='Exited')","95bd39c7":"sns.displot(data=churn_select, x=\"Exited\",hue='IsActiveMember',kind ='kde') ","2425ff83":"sns.countplot(data=churn_select, x=\"NumOfProducts\",hue='Exited')","c135c208":"sns.displot(data=churn_select, x=\"NumOfProducts\",hue='Exited',kind ='kde') ","c44b496b":"sns.catplot(x=\"Exited\", y=\"Age\", data=churn_select,kind=\"swarm\")","1fbe5fdb":"sns.catplot(x=\"Exited\", y=\"CreditScore\",hue = 'Gender', data=churn_select,kind=\"violin\")","97678de8":"sns.factorplot(\"Tenure\", \"Exited\", \"Gender\",data=churn_select, kind=\"bar\",size=6, palette=\"muted\",legend_out=False)","42d19f72":"fig, axarr = plt.subplots(3, 2, figsize=(20, 12))\nsns.boxplot(y='CreditScore',x = 'Exited', hue = 'Exited',data = churn_select, ax=axarr[0][0])\nsns.boxplot(y='Age',x = 'Exited', hue = 'Exited',data = churn_select , ax=axarr[0][1])\nsns.boxplot(y='Tenure',x = 'Exited', hue = 'Exited',data = churn_select, ax=axarr[1][0])\nsns.boxplot(y='Balance',x = 'Exited', hue = 'Exited',data = churn_select, ax=axarr[1][1])\nsns.boxplot(y='NumOfProducts',x = 'Exited', hue = 'Exited',data = churn_select, ax=axarr[2][0])\nsns.boxplot(y='EstimatedSalary',x = 'Exited', hue = 'Exited',data = churn_select, ax=axarr[2][1])","87093d08":"# relationship \nsns.relplot(x=\"Age\", y=\"Exited\", data=churn_select)","a64781ab":"sns.relplot(x=\"NumOfProducts\", y=\"Exited\", data=churn_select)","133ad758":"sns.relplot(x=\"Balance\", y=\"Exited\", data=churn_select)","b1f4d269":"from sklearn.linear_model import LogisticRegression # for Logistic Regression Algorithm\nfrom sklearn.model_selection import train_test_split # to split the dataset for training and testing \nfrom sklearn import metrics # for checking the model accuracy\n","555f921a":"churn_select_encod\n","f45aeac1":"X = churn_select_encod.drop(['Exited'],axis = 1)\ny = churn_select_encod['Exited']","bcaee33b":"print(X.shape)\nprint(y.shape)","1afaefab":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size =0.25, random_state = 4)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","4dcfee86":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","a59194a0":"y_pred = logreg.predict(X_test)","0c2d2479":"print('The accuracy of Logistic Regression is: ', (metrics.accuracy_score(y_test, y_pred)))","0d99cf7e":" #Recall\nfrom sklearn.metrics import recall_score\nprint('The Recall of Logistic Regression is: ', (metrics.recall_score(y_test, y_pred)))","4044ed39":"# Precision\nfrom sklearn.metrics import precision_score\nprint('The Precision of Logistic Regression is: ', (metrics.precision_score(y_test, y_pred)))","0b63934d":"confusion_matrix = pd.crosstab(logreg.predict(X),y)","a48ca661":"confusion_matrix","37aa23ac":"sns.heatmap(confusion_matrix, annot=True)\nplt.show()","f1e43105":"from sklearn.neighbors import KNeighborsClassifier","cce5fca6":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size =0.25, random_state = 4)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","d2722b92":"knn = KNeighborsClassifier()","fab66529":"knn.fit(X_train, y_train)","35e8b0ed":"y_pred_knn = knn.predict(X_test)","01d5f4cb":"knn.score(X_train, y_train)","907bd2de":"knn.score(X_test, y_test)","3349d7b7":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report","0b318fe6":"print(classification_report(y_test, y_pred_knn))","fc420b99":"cm =confusion_matrix(y_test, y_pred_knn)\nsns.heatmap(cm, square=True , annot=True)","19c90261":"error_rate = []\n# Might take some time\nfor i in range(1,40):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","49a6391f":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=15)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","d4468e2e":"# min Error Rate  = 9\nknn9 = KNeighborsClassifier(n_neighbors=9)","04ef2eec":"knn9.fit(X_train, y_train)","76a2352a":"y_pred_knn9 = knn9.predict(X_test)","7e7204b0":"knn9.score(X_train, y_train)","900fed1e":"knn9.score(X_test, y_test)","d63ff829":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","93f1c997":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","304fbb43":"from sklearn.tree import DecisionTreeClassifier\nclassifier_Decicsion = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier_Decicsion.fit(X_train, y_train)","3c5055bf":"y_pred_Decision = classifier_Decicsion.predict(X_test)","d4e66780":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred_Decision)\nprint(cm)\naccuracy_score(y_test,y_pred_Decision)","8f3ab3b0":"sns.heatmap(cm, square=True , annot=True)","6996ed4b":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size =0.25, random_state = 4)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","673cea9f":"# Building  Random Forest Classifier\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(criterion = 'entropy', random_state = 42)\nrfc.fit(X_train, y_train)","0d68c83c":"from sklearn.metrics import f1_score\nrfc_pred_test = rfc.predict(X_test)\nprint('Testing Set Evaluation F1-Score=>',f1_score(y_test,rfc_pred_test))","7af363d0":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=5)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","b3a90c51":"from sklearn.svm import SVC\nsvclassifier = SVC(kernel='linear')\nsvclassifier.fit(X_train, y_train)","c199a008":"y_pred_svm = svclassifier.predict(X_test)","cdf0c4b1":"y_pred_svm","7b98ec8d":"accuracy = accuracy_score(y_test, y_pred_svm) * 100\nprint(\"Accuracy of the Logistic Regression Model: \",accuracy)","3056d041":"from sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test,y_pred_svm))\nprint(classification_report(y_test,y_pred_svm))","3f953345":"cm =confusion_matrix(y_test,y_pred_svm)\nsns.heatmap(cm, square=True , annot=True)","8c3f6ca9":"!pip install xgboost","50e36f94":"import xgboost as xgb","00d663e0":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size =0.25, random_state = 4)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","8faff0a5":"from xgboost import XGBClassifier","a17a9f71":"model = XGBClassifier()\nmodel.fit(X_train, y_train)","5fed6bc2":"y_pred_XGB = model.predict(X_test)","7ea8b57d":"accuracy = accuracy_score(y_test,y_pred_XGB) * 100\nprint(\"Accuracy of the Logistic Regression Model: \",accuracy)","e5b4154a":"from sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test,y_pred_XGB))\nprint(classification_report(y_test,y_pred_XGB))","f78a741b":"cm =confusion_matrix(y_test,y_pred_XGB)\nsns.heatmap(cm, square=True , annot=True)","87047e24":"<img src = \"https:\/\/slitayem.github.io\/img\/blog\/2020-08-04\/churn.png\" width=50%>","28f23320":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">Logistic Regression <\/span><\/strong>","79d275aa":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong> <span style=\"font-family: courier new, courier; font-size: 18pt;\"> KNN Regressor<\/span><\/strong>","f72d5d37":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong> <span style=\"font-family: courier new, courier; font-size: 18pt;\"> XGBoost <\/span><\/strong>","cb5d6235":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">load Data <\/span><\/strong>\n<p style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\"> \n<\/div>","5e3292a0":"## Importing the libraries","4541b917":"## Load ","a8b085ea":"## EDA and Prepare Data","bd9e0810":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">Strorytelling - Visualization <\/span><\/strong>\n<p style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\"> \n<\/div>","052cd1fc":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong> <span style=\"font-family: courier new, courier; font-size: 18pt;\"> Random Forest <\/span><\/strong>","78474839":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">Prepare Data and EDA <\/span><\/strong>\n<p style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\"> \n<\/div>","4f34fdff":"## Train  model (Classification)","cc513ba1":"<div class=\"alert alert-block alert-success\">\n    <h1 align=\"center\">Machine Learning in Python<\/h1>\n    <h3 align=\"center\">Project2<\/h3>\n<\/div>","b4aea6fa":"## Optimal value of K","74f037b9":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">Train  Model <\/span><\/strong>\n<p style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">\n<\/div>","2c3b30bc":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong> <span style=\"font-family: courier new, courier; font-size: 18pt;\"> Decision Tree<\/span><\/strong>","73115f3d":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong> <span style=\"font-family: courier new, courier; font-size: 18pt;\"> SVM <\/span><\/strong>","9039e838":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">Visualizing statistical relationships <\/span><\/strong>\n<p style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\"> \n<\/div>"}}