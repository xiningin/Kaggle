{"cell_type":{"85ee964b":"code","f765bd75":"code","65e4295c":"code","61a61b3b":"code","d1d449d8":"code","36082ed4":"code","d91c41f3":"code","624fbc51":"code","c9fe2e64":"code","671b313c":"code","067021c0":"code","a1b420a8":"code","abef0878":"code","9af2e30e":"code","b875a9bf":"code","4d4c3fb5":"code","36eab58d":"code","4440ccf8":"code","50549ed1":"code","120113ba":"code","93a77f47":"code","2c465f1c":"code","5335229c":"markdown","f1ea7615":"markdown","6aaf8de4":"markdown","08f614c8":"markdown","a8dfb99d":"markdown","8c731574":"markdown","2a911de9":"markdown","a45a60f2":"markdown","d2d46626":"markdown","94c78e8b":"markdown","f6e19643":"markdown","656cd8c3":"markdown","7492f9e8":"markdown","75e8d4db":"markdown","f1d5ad3c":"markdown","3855faa1":"markdown"},"source":{"85ee964b":"# Import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nfrom textwrap import wrap\n\n# Set default fontsize and colors for graphs\nSMALL_SIZE, MEDIUM_SIZE, BIG_SIZE = 8, 12, 16\nplt.rc('font', size=MEDIUM_SIZE)       \nplt.rc('axes', titlesize=BIG_SIZE)     \nplt.rc('axes', labelsize=MEDIUM_SIZE)  \nplt.rc('xtick', labelsize=MEDIUM_SIZE) \nplt.rc('ytick', labelsize=MEDIUM_SIZE) \nplt.rc('legend', fontsize=SMALL_SIZE)  \nplt.rc('figure', titlesize=BIG_SIZE)\nmy_colors = 'rgbkymc'\n\n# Disable scrolling for long output\nfrom IPython.display import display, Javascript\ndisable_js = \"\"\"\nIPython.OutputArea.prototype._should_scroll = function(lines) {\n    return false;\n}\n\"\"\"\ndisplay(Javascript(disable_js))\n\nplt.style.use('ggplot')","f765bd75":"# Read the input training data\ninput_data_file_movie = \"..\/input\/movie.csv\"\ninput_data_file_rating = \"..\/input\/rating.csv\"\n\nmovie_data_all = pd.read_csv(input_data_file_movie)\nrating_data_all = pd.read_csv(input_data_file_rating)","65e4295c":"movie_data_all.head(5)","61a61b3b":"rating_data_all.head(5)","d1d449d8":"print(\"Total number of movies =\", movie_data_all.shape[0])\nprint(\"Total number of unique movies =\", len(movie_data_all.movieId.unique()))\nprint(\"\")\nprint(\"Total number of user ratings =\", rating_data_all.shape[0])\nprint(\"Total number of unique users =\", len(rating_data_all.userId.unique()))","36082ed4":"# Keep only required columns\nmovie_data_all = movie_data_all.drop(['genres'], axis=1)\nrating_data_all = rating_data_all.drop(['timestamp'], axis=1)","d91c41f3":"# Pick top movies\ntop_action_movies = ['Dark Knight, The', 'Lord of the Rings: The Return of the King', \n                     'Inception', 'Star Wars: Episode V - The Empire Strikes Back',\n                     'Matrix, The']\ntop_romantic_movies = ['Notting Hill', 'Love Story \\(1970\\)', 'When Harry Met Sally',\n                       'Titanic \\(1997\\)', 'Pretty Woman']\ntop_movies = top_action_movies + top_romantic_movies\n\nmovie_data = movie_data_all[movie_data_all.title.str.contains('|'.join(top_movies))]\nmovie_data","624fbc51":"# Pick all ratings\n#num_ratings = 2000000\nrating_data = rating_data_all.iloc[:, :]","c9fe2e64":"movie_rating_merged_data = movie_data.merge(rating_data, on='movieId', how='inner')\nmovie_rating_merged_data.head()","671b313c":"# Mean rating of a movie\nmovie_rating_merged_data[movie_rating_merged_data.title == 'Pretty Woman (1990)']['rating'].mean()","067021c0":"# Top 10 movies by mean rating\nmovie_rating_merged_data.groupby(['title'], sort=False)['rating'].mean().sort_values(ascending=False).head(10)","a1b420a8":"movie_rating_merged_pivot = pd.pivot_table(movie_rating_merged_data,\n                                           index=['title'],\n                                           columns=['userId'],\n                                           values=['rating'],\n                                           dropna=False,\n                                           fill_value=0\n                                          )\nmovie_rating_merged_pivot.shape","abef0878":"Y = movie_rating_merged_pivot","9af2e30e":"R = np.ones(Y.shape)\nno_rating_idx = np.where(Y == 0.0)\nR[no_rating_idx] = 0\nR","b875a9bf":"n_u = Y.shape[1]\nn_m = Y.shape[0]\nn_f = 2  # Because we want to cluster movies into 2 genres","4d4c3fb5":"# Setting random seed to reproduce results later\nnp.random.seed(7)\nInitial_X = np.random.rand(n_m, n_f)\nInitial_Theta = np.random.rand(n_u, n_f)\n#print(\"Initial_X =\", Initial_X)\n#print(\"Initial_Theta =\", Initial_Theta)","36eab58d":"# Cost Function\ndef collabFilterCostFunction(X, Theta, Y, R, reg_lambda):\n    cost = 0\n    error = (np.dot(X, Theta.T) - Y) * R\n    error_sq = np.power(error, 2)\n    cost = np.sum(np.sum(error_sq)) \/ 2\n    cost = cost + ((reg_lambda\/2) * ( np.sum(np.sum((np.power(X, 2)))) + np.sum(np.sum((np.power(Theta, 2))))))\n    return cost","4440ccf8":"# Gradient Descent\ndef collabFilterGradientDescent(X, Theta, Y, R, alpha, reg_lambda, num_iters):\n    cost_history = np.zeros([num_iters, 1])\n    \n    for i in range(num_iters):\n        error = (np.dot(X, Theta.T) - Y) * R\n        X_grad = np.dot(error, Theta) + reg_lambda * X\n        Theta_grad = np.dot(error.T, X) + reg_lambda * Theta\n        \n        X = X - alpha * X_grad \n        Theta = Theta - alpha * Theta_grad\n        \n        cost_history[i] = collabFilterCostFunction(X, Theta, Y, R, reg_lambda)\n        \n    return X, Theta, cost_history","50549ed1":"# Tune hyperparameters\nalpha = 0.0001\nnum_iters = 100000\nreg_lambda = 1\n\n# Perform gradient descent to find optimal parameters\nX, Theta = Initial_X, Initial_Theta\nX, Theta, cost_history = collabFilterGradientDescent(X, Theta, Y, R, alpha, reg_lambda, num_iters)\ncost = collabFilterCostFunction(X, Theta, Y, R, reg_lambda)\nprint(\"Final cost =\", cost)","120113ba":"fig, axes = plt.subplots(figsize=(15,6))\naxes.plot(cost_history, 'k--')\naxes.set_xlabel('# of iterations')\naxes.set_ylabel('Cost')\naxes.set_title('Cost \/ iteration')\nplt.show()","93a77f47":"fig, axes = plt.subplots(figsize=(12,12))\naxes.scatter(X[:,0], X[:,1], color='red', marker='D')\n\nfor val, movie in zip(X, Y.index):\n    axes.text(val[0], val[1], movie)\n\naxes.set_xlabel('Feature$_1$ of Movies')\naxes.set_ylabel('Feature$_2$ of Movies')\naxes.set_title('Movies and its Features')\n\naxes.spines['right'].set_visible(False)\naxes.spines['left'].set_visible(True)\naxes.spines['top'].set_visible(False)\naxes.spines['bottom'].set_visible(True)\naxes.set_xlim(0,)\naxes.set_ylim(0,)\naxes.set_facecolor('linen')\n\nplt.show()","2c465f1c":"user_idx = np.random.randint(n_u)\npred_rating = []\nprint(\"Original rating of an user:\\n\", Y.iloc[:,user_idx].sort_values(ascending=False))\n\npredicted_ratings = np.dot(X, Theta.T)\npredicted_ratings = sorted(zip(predicted_ratings[:,user_idx], Y.index), reverse=True)\nprint(\"\\nPredicted rating of the same user:\")\n_ = [print(rating, movie) for rating, movie in predicted_ratings]","5335229c":"### Create a pivot table of movies (on rows) and corresponsing user ratings (on columns). The pivot table will contain the ratings of only selected movies.\n### Thus, rows = movies and columns = users","f1ea7615":"### Read \"movie\" and \"rating\" dataset","6aaf8de4":"### Cost function or Objective function of collborative filtering algorithm","08f614c8":"## (1) Read and Prepare Data","a8dfb99d":"## (2) Build Collaborative Filtering Model","8c731574":"### Since we have considered only 2 genres (and hence 2 features), we plot the learned feature parameters of movies to visualize the pattern.\n### We find below that the algorithm has learnt the features pretty well and hence the movies of same genre and clustered together. \n### In this particular example, we considered movies of genres \"Action\" and \"Romance\". From the visualization, it can be concluded that one axis represents \"Degree of Action\" and another axis represents \"Degree of Romance\".\n### As a next step, we can run K-Means clustering to further verify our understanding.","2a911de9":"### Plot cost vs number of iterations","a45a60f2":"### Assign random initial values to movie and user parameters.\n### X = parameters of movies (each row represent a movie)\n### Theta = parameters of users (each row represent a user)","d2d46626":"## (3) Train the collborative filtering model","94c78e8b":"### Assign n_m (number of movies), n_u (number of users) and n_f (number of features)","f6e19643":"### Select few most popular movies, from two distinct genres. In this particular example, we considered movies of genres \"Action\" and \"Romance\".\n### The objective is to find if collborative filtering algorithm can successfully learn the features of these movies based on user ratings, such that we can clearly distinguish their genres and recommend accordingly.","656cd8c3":"### Computation of Gradient Descent of collaborative filtering algorithm","7492f9e8":"# Collaborative Filtering Algorithm\n## This is an implementation of Movie Recommemder System using Collaborative Filtering Algorithm from scratch using only Python. In this kernel, I made an attempt to cluster movies into 2 genres based on ratings from users, using Collaborative Filtering algorithm.\n<p align=\"center\"><img src=\"https:\/\/data.whicdn.com\/images\/325570784\/original.jpg\" height=\"300px\" width=\"400px\"><\/p>\n### Dataset source: https:\/\/www.kaggle.com\/grouplens\/movielens-20m-dataset","75e8d4db":"### For a random user, what are her preferred movies, and what is our recommendation for her based on result of collaborative filtering algorithm?","f1d5ad3c":"### Merge movie and rating dataset based on movieId column","3855faa1":"### Create a matrix R, such that, R(i,j) = 1 iff User j has selected a rating for Movie i. R(i,j) = 0 otherwise."}}