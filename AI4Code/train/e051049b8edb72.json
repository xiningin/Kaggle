{"cell_type":{"58e6759e":"code","b3c8c7ad":"code","69a1c5ac":"code","db5f9bf6":"code","ea470127":"code","d6807ffa":"code","7c738a53":"code","f287c847":"code","1e27447b":"code","47235a94":"code","7b6f3f6b":"code","a680acd9":"code","1f46a66d":"code","14cd0f9a":"code","9a5aa394":"code","f407b7ce":"code","4adc63a9":"code","9046d0df":"code","b0b6c9cd":"code","921eb9fd":"code","79cbf101":"code","474ecfd0":"code","4f4c3fef":"code","87536270":"code","d0f0abd7":"code","7c290eb7":"markdown"},"source":{"58e6759e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sqlite3\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.cluster import KMeans\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b3c8c7ad":"path = '..\/input\/'\ndatabase = path + 'database.sqlite'\nconn = sqlite3.connect(database)\n\ntables = pd.read_sql(\"\"\"SELECT *\n                        FROM sqlite_master\n                        WHERE type='table';\"\"\", conn)\ntables","69a1c5ac":"player = pd.read_sql(\"SELECT * FROM Player\",conn)","db5f9bf6":"player_att = pd.read_sql(\"SELECT * FROM Player_Attributes\",conn)","ea470127":"player_att.dropna(inplace=True)","d6807ffa":"player_att = player_att.drop_duplicates(subset='player_api_id')","7c738a53":"player_att.overall_rating.describe()","f287c847":"plt.figure(figsize=(12,8))\nplt.title(\"Overall Rating Distributions\",fontdict={'fontsize':15})\nplt.xlabel(\"Overall\")\nplt.ylabel(\"Ratio\")\nsns.distplot(list(player_att.overall_rating),bins=100)","1e27447b":"player_att.columns","47235a94":"player_att.dropna(inplace=True)","7b6f3f6b":"player_att.head()","a680acd9":"model = KMeans(n_clusters=5)\nmodel.fit(player_att[['overall_rating','potential']])\npredict = pd.DataFrame(model.predict(player_att[['overall_rating','potential']]))\npredict.columns=['predict']\nplt.figure(figsize=(8,7))\nplt.scatter(x=player_att.overall_rating,y=player_att.potential,c=predict.predict)\nplt.title(\"Clustering Using Overall Ratings and Potential Scores\",fontdict={'fontsize':15})\nplt.ylabel(\"Potential\")\nplt.xlabel(\"Overall_Rating\")","1f46a66d":"player_att.columns","14cd0f9a":"plt.figure(figsize=(10,8))\ncorr = player_att.corr()\nsns.heatmap(corr)","9a5aa394":"forward_features = ['finishing','volleys']\nmid_features = ['short_passing','vision']\ndefender_features = ['standing_tackle','sliding_tackle']\ngk_features = ['gk_diving','gk_handling','gk_kicking','gk_positioning']\n\n\"\"\"\ndef position_column(position):\n    feature = str(position)+'_features'\n    player_att[str(position)] = player_att[x for x in feature]\n    \"\"\"","f407b7ce":"print(map(sum,player_att[forward_features]))","4adc63a9":"player_att['forward'] = (player_att[forward_features].iloc[:,0] + player_att[forward_features].iloc[:,1])\/2\nplayer_att['mid'] = (player_att[mid_features].iloc[:,0] + player_att[mid_features].iloc[:,1])\/2\nplayer_att['defender'] = (player_att[defender_features].iloc[:,0] + player_att[defender_features].iloc[:,1])\/2\nplayer_att['gk'] = (player_att[gk_features].iloc[:,0] + player_att[gk_features].iloc[:,1] +\n                   player_att[gk_features].iloc[:,2]+player_att[gk_features].iloc[:,3])\/4","9046d0df":"player_att","b0b6c9cd":"def cluster_position(pos1,pos2):\n    model = KMeans(n_clusters=4)\n    model.fit(player_att[['forward','mid','defender','gk']])\n    predict = pd.DataFrame(model.predict(player_att[['forward','mid','defender','gk']]))\n    predict.columns=['predict']\n    plt.figure(figsize=(8,7))\n    plt.scatter(x=player_att[str(pos1)],y=player_att[str(pos2)],c=predict.predict,marker='o')\n    plt.title(\"Clustering Using \"+pos1+\" Stats \"+pos2+\" Stats\",fontdict={'fontsize':15})\n    plt.ylabel(pos2)\n    plt.xlabel(pos1)","921eb9fd":"cluster_position('forward','mid')\ncluster_position('mid','defender')\ncluster_position('forward','defender')\ncluster_position('gk','forward')","79cbf101":"def find_player(name):\n    id = player[player.player_name==name]['player_api_id']\n    return(player_att[player_att.player_api_id==int(id)])","474ecfd0":"find_player(\"Lionel Messi\")","4f4c3fef":"find_player(\"Aaron Doran\")","87536270":"country = pd.read_sql(\"\"\"SELECT * FROM Country\"\"\",conn)\ncountry","d0f0abd7":"country","7c290eb7":"## Clustering After Feature engineering:\n### In my opinion, below's features are well representing the each position's characteristics\n### Forward : Finishing, Volleys, Shot_Power\n### Mid-fielder : Short_Passing, Vision\n### Defender : Standing_Tackle, Sliding_Tackle\n### Goalkeeper : GK_handling, GK_positioning, GK_reflexes\n\n#### So, I will average this sub-features into position columnsb"}}