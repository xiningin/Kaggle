{"cell_type":{"f799b52b":"code","c6653957":"code","469a3f3d":"code","006cbee8":"code","c0923036":"code","c7989939":"code","6f66cd1b":"code","bc4be3ac":"code","a9d4b6a7":"code","61413f22":"code","52c4c895":"code","518619ac":"code","8e2d5511":"code","8c879ac1":"code","a2ba86e4":"code","c9d1bd9d":"code","dfbef91a":"code","f1e3d699":"code","eb9b40d2":"markdown","7c5b6e36":"markdown","60da7977":"markdown","293d68a2":"markdown","e2ba9420":"markdown","42b07605":"markdown","cb5e1292":"markdown","46f1e4c1":"markdown","0535a2a1":"markdown","b3d02700":"markdown","e1219dbf":"markdown","16c8d85c":"markdown","4afddf0e":"markdown","ef6dd7fe":"markdown"},"source":{"f799b52b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c6653957":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head()","469a3f3d":"train.info()","006cbee8":"columns_interested = ['Pclass', 'Sex','SibSp', 'Parch', 'Embarked']\nfor col in columns_interested:\n    print(col)\n    total_counts = train[col].value_counts().rename_axis(col).reset_index(name='Total')\n    survived_counts = train[train['Survived'] == 1][col].value_counts().rename_axis(col).reset_index(name='Survived')\n    temp = pd.merge(survived_counts, total_counts, on=col)\n    temp['Survival%'] = 100* temp['Survived']\/temp['Total']\n    print(temp.sort_values(by='Survival%', ascending=False))\n    print('-'*10)","c0923036":"train['Fare'].hist()","c7989939":"train[train['Survived'] == 1]['Fare'].hist()","6f66cd1b":"# Name, Pclass of top 5 oldest people\n# Method 1:\n\ntrain.sort_values(by='Age', ascending=False)[['Age','Name', 'Pclass']].head()","bc4be3ac":"# Name, Pclass of top 5 oldest people\n# Method 2: \n\ntrain.nlargest(5, 'Age').filter(items=['Age', 'Name', 'Pclass'])","a9d4b6a7":"# Name, Pclass of top 5 youngest people\n# Method 1:\n\ntrain.sort_values(by='Age')[['Age','Name', 'Pclass']].head()","61413f22":"# Name, Pclass of top 5 youngest people\n# Method 2:\n\ntrain.nsmallest(5, 'Age')[['Age','Name', 'Pclass']]","52c4c895":"# People travelling solo\n# Method 1\n\ntrain.loc[:, 'IsAlone'] = train[['SibSp', 'Parch']].apply(lambda cols:(cols[0], cols[1]) == (0, 0), axis=1)\ntrain['IsAlone'] = train['IsAlone'].astype('int')\ntrain['IsAlone'].value_counts()\nlen(train[train['IsAlone']==1])","518619ac":"# People travelling solo\n# Method 2\n\ntrain['Alone'] = (train['SibSp']==0) & (train['Parch'] == 0)\ntrain['Alone'].value_counts()\nlen(train[train['Alone']==1])","8e2d5511":"# People travelling solo\n# Method 3\n\ntrain.query('SibSp == 0 and Parch == 0')['Survived'].value_counts()","8c879ac1":"# Survival rate of people travelling solo\n100* len(train[(train['Survived']==1) & (train['Alone']==1)]) \/ 537","a2ba86e4":"# How many paid > $200\nlen(train[train['Fare']>200])","c9d1bd9d":"# How many paid > $200 and survived\n100* len(train[(train['Survived']==1) & (train['Fare']>200)]) \/ 20","dfbef91a":"# Survival rate of Pclass=1\ntotal_pclass_1 = len(train[train['Pclass']==1])\n100 * len(train[(train['Survived']==1) & (train['Pclass']==1)]) \/ total_pclass_1","f1e3d699":"# Survival rate of females\ntotal_females = len(train[train['Sex']=='female'])\n100 * len(train[(train['Survived']==1) & (train['Sex']=='female')]) \/ total_females","eb9b40d2":"### 1. Display Name, Pclass of top 5 oldest people","7c5b6e36":"### 8. Survival rate of females","60da7977":"### 6. Survival rate of people paid more than \\$200 Fare","293d68a2":"## 7. Survival rate of people with Pclass = 1","e2ba9420":"### 3. Count of people travelling alone","42b07605":"## Questions to answer","cb5e1292":"### 2. Display Name, Pclass of top 5 youngest people","46f1e4c1":"## Load train data","0535a2a1":"## Basic info about train dataframe","b3d02700":"### 5. How many paid Fare more than \\$200?","e1219dbf":"### 4. Survival rate of people travelling alone","16c8d85c":"## Plot histogram for Fare column","4afddf0e":"## Compute survival rate based on different columns","ef6dd7fe":"From the above analysis, we can figure that following were given priority for 'Survived':\n+ Pclass = 1, survival % = ~63%\n+ Female, survival % = ~74%\n+ Having atmost 2 sibling\/spouse, survival % = ~53%\n+ Parch = 3, 1 & 2, survival % = ~60%, ~55%, ~50%\n+ Embarked = C, survival % = ~55%\n"}}