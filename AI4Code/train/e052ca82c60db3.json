{"cell_type":{"21fe1b5d":"code","37f81997":"code","37d69172":"code","a42bdf13":"code","2bad0b1c":"code","becb65ea":"code","d64c7323":"code","fdc525d9":"code","86b1a641":"code","a3b9f32a":"code","62aae5f1":"code","d86da220":"code","71694e36":"code","b0837ba8":"code","9b9b120f":"code","2e84a88e":"code","eeddeb71":"code","cc687bcc":"code","0eab0ebb":"code","338c512f":"code","aa077179":"code","cd273e7b":"code","6f28aadf":"code","aab7a22a":"code","c83dcf56":"code","81a5bc8d":"code","8d205f20":"code","6d2c629b":"code","784c3a76":"code","515ea57b":"code","341d4b39":"code","54c8412c":"code","cf5badd2":"code","7b5f63b6":"code","424c9332":"code","e9d82c15":"code","5d260efd":"code","4e5027a4":"code","881867c2":"code","11c2d19b":"code","502e474d":"code","cd60d3a2":"code","fe56a7ba":"code","76010023":"code","69b2e2d0":"code","10874f3d":"code","6aafb96f":"code","aa7bfe51":"markdown","7d66423d":"markdown","4a74f359":"markdown","8d9ca95b":"markdown","79eab688":"markdown","2bafc8b5":"markdown","95573e84":"markdown","5db15e71":"markdown","dcefcbba":"markdown","d6b77cbd":"markdown","f6c30fa2":"markdown","99578c02":"markdown","5f32d8f2":"markdown","55fb2f20":"markdown","7c0f8c59":"markdown","bd3940c4":"markdown","a1fff0cd":"markdown","13c86a5e":"markdown","8ee8ce12":"markdown","1b6e0197":"markdown","8cdfbd48":"markdown","ee9463d1":"markdown","b93f3411":"markdown","4fc760dc":"markdown","27fa733a":"markdown","4cacfb99":"markdown","e89f5698":"markdown","bde4d78d":"markdown","304e2f14":"markdown","030e02f7":"markdown","eb1f0636":"markdown","7ba2a54d":"markdown","5fc2337b":"markdown","eacc5822":"markdown","4e900804":"markdown","e2ea6995":"markdown","e39828c6":"markdown","032da0ee":"markdown","065305ed":"markdown","436624ea":"markdown","888c95fa":"markdown","3c923617":"markdown","85f3ed0d":"markdown","262aba46":"markdown"},"source":{"21fe1b5d":"import pandas as pd\nimport numpy as np\nimport sys\nimport os\nimport random\nfrom pathlib import Path\nimport imageio\nimport skimage\nimport skimage.io\nimport skimage.transform\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\nimport scipy\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom keras import optimizers\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, Flatten, MaxPool2D, Dropout, BatchNormalization,LeakyReLU\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ModelCheckpoint, Callback, EarlyStopping, ReduceLROnPlateau, LearningRateScheduler\nfrom keras.utils import to_categorical\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\nimport tensorflow","37f81997":"IMAGE_PATH = '..\/\/input\/\/chinese-mnist\/\/data\/\/data\/\/'\nIMAGE_WIDTH = 64\nIMAGE_HEIGHT = 64\nIMAGE_CHANNELS = 1\nRANDOM_STATE = 42\nTEST_SIZE = 0.2\nVAL_SIZE = 0.2\nCONV_2D_DIM_1 = 16\nCONV_2D_DIM_2 = 16\nCONV_2D_DIM_3 = 32\nCONV_2D_DIM_4 = 64\nMAX_POOL_DIM = 2\nKERNEL_SIZE = 3\nBATCH_SIZE = 32\nNO_EPOCHS_1 = 5\nNO_EPOCHS_2 = 10\nNO_EPOCHS_3 = 50\nPATIENCE = 5\nVERBOSE = 1","37d69172":"os.listdir(\"..\/\/input\/\/chinese-mnist\")","a42bdf13":"data_df=pd.read_csv('..\/\/input\/\/chinese-mnist\/\/chinese_mnist.csv')","2bad0b1c":"data_df.shape","becb65ea":"data_df.sample(100).head()","d64c7323":"def missing_data(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    return pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data(data_df)","fdc525d9":"image_files = list(os.listdir(IMAGE_PATH))\nprint(\"Number of image files: {}\".format(len(image_files)))","86b1a641":"def create_file_name(x):\n    \n    file_name = f\"input_{x[0]}_{x[1]}_{x[2]}.jpg\"\n    return file_name","a3b9f32a":"data_df[\"file\"] = data_df.apply(create_file_name, axis=1)","62aae5f1":"file_names = list(data_df['file'])\nprint(\"Matching image names: {}\".format(len(set(file_names).intersection(image_files))))","d86da220":"def read_image_sizes(file_name):\n    image = skimage.io.imread(IMAGE_PATH + file_name)\n    return list(image.shape)","71694e36":"m = np.stack(data_df['file'].apply(read_image_sizes))\ndf = pd.DataFrame(m,columns=['w','h'])\ndata_df = pd.concat([data_df,df],axis=1, sort=False)","b0837ba8":"data_df.head()","9b9b120f":"print(f\"Number of suites: {data_df.suite_id.nunique()}\")\nprint(f\"Samples: {data_df.sample_id.unique()}\")","2e84a88e":"train_df, test_df = train_test_split(data_df, test_size=TEST_SIZE, random_state=RANDOM_STATE)","eeddeb71":"train_df, val_df = train_test_split(train_df, test_size=VAL_SIZE, random_state=RANDOM_STATE)","cc687bcc":"print(\"Train set rows: {}\".format(train_df.shape[0]))\nprint(\"Test  set rows: {}\".format(test_df.shape[0]))\nprint(\"Val   set rows: {}\".format(val_df.shape[0]))","0eab0ebb":"def plot_count(feature, title, df, size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set3')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()    ","338c512f":"plot_count(\"value\", \"value (train data)\", train_df, size=3)","aa077179":"plot_count(\"value\", \"value (validation data)\", val_df, size=3)","cd273e7b":"plot_count(\"value\", \"value (test data)\", test_df, size=3)","6f28aadf":"train_df, test_df = train_test_split(data_df, test_size=TEST_SIZE, random_state=RANDOM_STATE, stratify=data_df[\"code\"].values)\ntrain_df, val_df = train_test_split(train_df, test_size=VAL_SIZE, random_state=RANDOM_STATE, stratify=train_df[\"code\"].values)\nprint(\"Train set rows: {}\".format(train_df.shape[0]))\nprint(\"Test  set rows: {}\".format(test_df.shape[0]))\nprint(\"Val   set rows: {}\".format(val_df.shape[0]))","aab7a22a":"plot_count(\"value\", \"value (train data)\", train_df, size=3)","c83dcf56":"plot_count(\"value\", \"value (validation data)\", val_df, size=3)","81a5bc8d":"plot_count(\"value\", \"value (test data)\", test_df, size=3)","8d205f20":"def read_image(file_name):\n    image = skimage.io.imread(IMAGE_PATH + file_name)\n    image = skimage.transform.resize(image, (IMAGE_WIDTH, IMAGE_HEIGHT, 1), mode='reflect')\n    return image[:,:,:]","6d2c629b":"def categories_encoder(dataset, var='character'):\n    X = np.stack(dataset['file'].apply(read_image))\n    y = pd.get_dummies(dataset[var], drop_first=False)\n    return X, y","784c3a76":"X_train, y_train = categories_encoder(train_df)\nX_val, y_val = categories_encoder(val_df)\nX_test, y_test = categories_encoder(test_df)","515ea57b":"model1=Sequential()\nmodel1.add(Conv2D(CONV_2D_DIM_1, kernel_size=KERNEL_SIZE, input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT, 1), activation='relu', padding='same'))\nmodel1.add(MaxPool2D(MAX_POOL_DIM))\nmodel1.add(Conv2D(CONV_2D_DIM_2, kernel_size=KERNEL_SIZE, activation='relu', padding='same'))\nmodel1.add(Flatten())\nmodel1.add(Dense(y_train.columns.size, activation='softmax'))\nmodel1.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","341d4b39":"model1.summary()","54c8412c":"train_model1 = model1.fit(X_train, y_train,\n                  batch_size=BATCH_SIZE,\n                  epochs=NO_EPOCHS_1,\n                  verbose=1,\n                  validation_data=(X_val, y_val))","cf5badd2":"def create_trace(x,y,ylabel,color):\n        trace = go.Scatter(\n            x = x,y = y,\n            name=ylabel,\n            marker=dict(color=color),\n            mode = \"markers+lines\",\n            text=x\n        )\n        return trace\n    \ndef plot_accuracy_and_loss(train_model):\n    hist = train_model.history\n    acc = hist['accuracy']\n    val_acc = hist['val_accuracy']\n    loss = hist['loss']\n    val_loss = hist['val_loss']\n    epochs = list(range(1,len(acc)+1))\n    #define the traces\n    trace_ta = create_trace(epochs,acc,\"Training accuracy\", \"Green\")\n    trace_va = create_trace(epochs,val_acc,\"Validation accuracy\", \"Red\")\n    trace_tl = create_trace(epochs,loss,\"Training loss\", \"Blue\")\n    trace_vl = create_trace(epochs,val_loss,\"Validation loss\", \"Magenta\")\n    fig = tools.make_subplots(rows=1,cols=2, subplot_titles=('Training and validation accuracy',\n                                                             'Training and validation loss'))\n    #add traces to the figure\n    fig.append_trace(trace_ta,1,1)\n    fig.append_trace(trace_va,1,1)\n    fig.append_trace(trace_tl,1,2)\n    fig.append_trace(trace_vl,1,2)\n    #set the layout for the figure\n    fig['layout']['xaxis'].update(title = 'Epoch')\n    fig['layout']['xaxis2'].update(title = 'Epoch')\n    fig['layout']['yaxis'].update(title = 'Accuracy', range=[0,1])\n    fig['layout']['yaxis2'].update(title = 'Loss', range=[0,1])\n    #plot\n    iplot(fig, filename='accuracy-loss')\n\nplot_accuracy_and_loss(train_model1)","7b5f63b6":"score = model1.evaluate(X_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","424c9332":"def test_accuracy_report(model):\n    predicted = model.predict(X_test)\n    test_predicted = np.argmax(predicted, axis=1)\n    test_truth = np.argmax(y_test.values, axis=1)\n    print(metrics.classification_report(test_truth, test_predicted, target_names=y_test.columns)) \n    test_res = model.evaluate(X_test, y_test.values, verbose=0)\n    print('Loss function: %s, accuracy:' % test_res[0], test_res[1])","e9d82c15":"test_accuracy_report(model1)","5d260efd":"model2=Sequential()\nmodel2.add(Conv2D(CONV_2D_DIM_1, kernel_size=KERNEL_SIZE, input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT,IMAGE_CHANNELS), activation='relu', padding='same'))\nmodel2.add(MaxPool2D(MAX_POOL_DIM))\n# Add dropouts to the model\nmodel2.add(Dropout(0.4))\nmodel2.add(Conv2D(CONV_2D_DIM_2, kernel_size=KERNEL_SIZE, activation='relu', padding='same'))\n# Add dropouts to the model\nmodel2.add(Dropout(0.4))\nmodel2.add(Flatten())\nmodel2.add(Dense(y_train.columns.size, activation='softmax'))\nmodel2.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","4e5027a4":"model2.summary()","881867c2":"train_model2  = model2.fit(X_train, y_train,\n                  batch_size=BATCH_SIZE,\n                  epochs=NO_EPOCHS_2,\n                  verbose=1,\n                  validation_data=(X_val, y_val))","11c2d19b":"plot_accuracy_and_loss(train_model2)","502e474d":"test_accuracy_report(model2)","cd60d3a2":"annealer3 = LearningRateScheduler(lambda x: 1e-3 * 0.995 ** (x+NO_EPOCHS_3))\nearlystopper3 = EarlyStopping(monitor='loss', patience=PATIENCE, verbose=VERBOSE)\ncheckpointer3 = ModelCheckpoint('best_model_3.h5',\n                                monitor='val_acc',\n                                verbose=VERBOSE,\n                                save_best_only=True,\n                                save_weights_only=True)","fe56a7ba":"model3=Sequential()\nmodel3.add(Conv2D(CONV_2D_DIM_1, kernel_size=KERNEL_SIZE, input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT,IMAGE_CHANNELS), activation='relu', padding='same'))\nmodel3.add(MaxPool2D(MAX_POOL_DIM))\n# Add dropouts to the model\nmodel3.add(Dropout(0.4))\nmodel3.add(Conv2D(CONV_2D_DIM_2, kernel_size=KERNEL_SIZE, activation='relu', padding='same'))\n# Add dropouts to the model\nmodel3.add(Dropout(0.4))\nmodel3.add(Flatten())\nmodel3.add(Dense(y_train.columns.size, activation='softmax'))\nmodel3.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","76010023":"model3.summary()","69b2e2d0":"train_model3  = model3.fit(X_train, y_train,\n                  batch_size=BATCH_SIZE,\n                  epochs=NO_EPOCHS_3,\n                  verbose=1,\n                  validation_data=(X_val, y_val),\n                  callbacks=[earlystopper3, checkpointer3, annealer3])","10874f3d":"plot_accuracy_and_loss(train_model3)","6aafb96f":"test_accuracy_report(model3)","aa7bfe51":"<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>  \n\n## <a id='32'>Explore image data<\/a>  \n\nLet's also check the image data. First, we check how many images are stored in the image folder.","7d66423d":"Let's populate now the train, val and test sets with the image data and create the  dummy variables corresponding to the categorical target variable, in our case `subspecies`.","4a74f359":"Now, using `stratify` option, we also balanced train, validation and test set with respect with the classes distribution.  \nWe are now ready to start building our first model.","8d9ca95b":"<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>  \n\n# <a id='3'>Data exploration<\/a>  \n\n\n\nLet's start by checking if there are missing data, unlabeled data or data that is inconsistently labeled. \n","79eab688":"# <a id='2'>Prepare the data analysis<\/a>   \n\n\nBefore starting the analysis, we need to make few preparation: load the packages, load and inspect the data.\n\n","2bafc8b5":"Let's check the shape of the three datasets.","95573e84":"**Note**:  Training, validation and test data are slightly unbalanced. We can improve on this part, if we use a different train-test split approach, imposing to have balanced distribution in the splits, based on the label feature. Let's do it now.","5db15e71":"<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>  \n\n\n## <a id='42'>Model evaluation<\/a> \n\n\nLet's start by plotting the loss error for the train and validation set. \nWe define a function to visualize these values.","dcefcbba":"<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>  \n\n# <a id='6'>Conclusions<\/a>  \n\nAfter exploring the data to understand its various features, a baseline model is created.  We start with a baseline model because we want to evaluate first how a simple model performs, what is the precision\/accuracy for training, validation and test set. \n\nEvaluation of the baseline model  results for valid set and test set allows us to decide, based on analysis of bias and variance, how to conduct furher our experiments. After the analysis of the baseline solution, we decided that, while the training is good enough, we would like to improve on the variance, thus reducing overfitting.\n\nFrom the possible solutions for overfitting, we choose to add Dropout layers. Adding Dropout layers improve a bit the algorithm performance (reduce overfitting).  \n\nA third model, with adjustable learning rate, early stoping based on validation accuracy measurement. The model is saved every time when validation accuracy improves. Also, the training will stop if after a number of steps the validation accuracy is not improving. With this model, accuracy of prediction for the test set was improved. But looking to the validation loss, we can see we do have a problem - we most probably we still overfit on train data, so we will have to further improve this model.\n\nThe **key lessons learned** from this Kernel are the following:   \n* start by analyzing the data;   \n* follow with a simple baseline model;   \n* refine gradually the model, by making corrections based on the analysis of the (partial) results.\n\n**Note**: we didn't used an accelerator for this Kernel. Therefore, if you want to improve the calculation speed, select to use one accelerator (**GPU**\/**TPU**) for your Kernel.\n\n<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>","d6b77cbd":"The data contains the following values:  \n\n* suite_id - each suite corresponds to a set of handwritten samples by one volunteer;  \n* sample_id - each sample wil contain a complete set of 15 characters for Chinese numbers;\n* code - for each Chinese character we are using a code, with values from 1 to 15;\n* value - this is the actual numerical value associated with the Chinese character for number;  \n* character - the Chinese character;  \n\nWe index the files in the dataset by forming a file name from suite_id, sample_id and code. The pattern for a file is as following:\n\n> \"input_{suite_id}_{sample_id}_{code}.jpg\"","f6c30fa2":"## <a id='33'>Suites<\/a>  \n\nLet's check the suites of the images. For this, we will group by `suite`.","99578c02":"## <a id='40'>Split the data<\/a>  \n\nFirst, we split the whole dataset in train and test. We will use **random_state** to ensure reproductibility of results.   \n\nThe train-test split is **80%** for training set and **20%** for test set.\n","5f32d8f2":"Now, let's train the model.","55fb2f20":"### Evaluate model accuracy and loss","7c0f8c59":"<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>  \n\n\n## <a id='43'>Add Dropout<\/a>  \n\nWe add two Dropout layers.  The role of the Dropout layers is to reduce the overfitting, by dropping, each training epoch, a certain percent of the nodes connections (by rotation). This is equivalent of using less training data and in the same time training the network with various data as well as using `parallel` alternative networks, thus reducing the likelihood that the network will overfit the train data.  \n\nThe definition of the second model is:","bd3940c4":"There is no missing (null) data in the dataset. Still it might be that some of the data labels are misspelled; we will check this when we will analyze each data feature.","a1fff0cd":"Let's inspect the new model.","13c86a5e":"Let's also check the image sizes.","8ee8ce12":"# <a id='4'>Characters classification<\/a>\n\nOur objective is to use the images that we investigated until now to correctly identify the Chinese numbers (characters).   \n\nWe have a unique dataset and we will have to split this dataset in **train** and **test**. The **train** set will be used for training a model and the test will be used for testing the model accuracy against new, fresh data, not used in training.\n\n","1b6e0197":"# <a id='1'>Introduction<\/a>  \n\n\nIn this Kernel, we will explore a dataset with adnotated images of Chinese numbers, handwritten by a number of 100 volunteers, each providing a number of 10 samples, each sample with a complete set of 15 Chinese characters for numbers.\n\nThe Chinese characters are the following:\n* \u96f6 - for 0  \n* \u4e00 - for 1\n* \u4e8c - for 2  \n* \u4e09 - for 3  \n* \u56db - for 4  \n* \u4e94 - for 5  \n* \u516d - for 6  \n* \u4e03 - for 7  \n* \u516b - for 8  \n* \u4e5d - for 9  \n* \u5341 - for 10\n* \u767e - for 100\n* \u5343 - for 1000\n* \u4e07 - for 10 thousands\n* \u4ebf - for 100 millions\n\n\nThe objective of the Kernel is to take us through the steps of a machine learning analysis.   \nWe start by preparing the analysis (load the libraries and the data), continue with an Exploratory Data Analysis (EDA) where we highlight the data features, spending some time to try to understand the data and also get an idea about various features predictive potential and correlation with other features.   \n\nWe follow then with features engineering and preparation for creation of a model. The dataset is split in training, validation and test set. We start then with a simple model to classify the Chinese numbers images, something we are calling a baseline model.   \n\nWe evaluate the model, estimating the training error and accuracy and also the validation error and accuracy. With these, and with an rough estimate of what will be the (human) error rate for classification of Chinese numbers images, we decide how to follow our machine learning for image classification work. If we have at start a high bias, we will try first to improve our model so that will learn better the train images dataset. If we have a small bias but large variance (the model learns well the training data but fails to generalize, that means our model is overfitting. Based on these kind of observation, we make decission for how to adjust the model.   \n\nWe run few models with the improvements decided based on analysis or error and accuracy and we decide at the end for a final model. This model will be used for classification of fresh, new data, not used for training or validation, the test set.\n\n<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>  ","8cdfbd48":"### Model accuracy and loss","ee9463d1":"## <a id='41'>Build a baseline model<\/a>    \n\n\nNext step in our creation of a predictive model is to create a simple model, a **baseline model**.  \n\n Why start with a simple model (as simple as possible, but not simpler :-) )?\n \n With a simple model, we can get fast insight in how well will the data predict our target value. Looking to the training results (the training error and accuracy, the validation error and accuracy), we can understand if we need to add more data (because the training accuracy is small) or if we need to optimize the model (by adding more convolutional layers) or if we need to add Dropout layers (because the validation error is increasing after few steps - the model is overfitting) etc.\n \nLet's define few auxiliary functions that we will need for creation of our models.","b93f3411":"We have 100 suites, each with 10 samples.","4fc760dc":"<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>  \n\n## <a id='45'>Model refinement<\/a>  \n\n\nWe define now also a refined model. \n\nWe add an early stopping condition (monitor the loss error and stops the training if for a number of stept given in the `patience` parameters the loss is not improving).\n\nWe are also saving a model checkpoint after each epoch when accuracy improves; if accuracy degrades, no new model is saved. Thus, Model Checkpoint saves all the time the best model in terms of accuracy.  \n\nWe adjust as well the learning rate with the training epochs.\n\nAlso, we increase the number of training epochs to 50.\n\n","27fa733a":"<h1><center><font size=\"6\">Chinese MNIST EDA and Prediction<\/font><\/center><\/h1>\n\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-forum-message-attachments\/o\/inbox%2F769452%2Ffae77a81c057fe419de60f5e2b20be25%2Fchinese_mnist_profile_small.png?generation=1596963542354014&alt=media)\n \n\n# <a id='0'>Content<\/a>\n\n- <a href='#1'>Introduction<\/a>  \n- <a href='#2'>Prepare the data analysis<\/a>  \n - <a href='#21'>Load packages<\/a>  \n - <a href='#21'>Load the data<\/a>  \n - <a href='#21'>Preprocessing data<\/a>  \n- <a href='#3'>Data exploration<\/a>   \n - <a href='#31'>Check for missing data<\/a>  \n - <a href='#32'>Explore image data<\/a>  \n  - <a href='#33'>Suites<\/a>  \n- <a href='#4'>Characters classification<\/a>  \n - <a href='#40'>Split the data<\/a>  \n - <a href='#41'>Build a baseline model<\/a>  \n - <a href='#42'>Model evaluation<\/a>    \n - <a href='#43'>Add Dropout<\/a>  \n - <a href='#44'>Model refinement<\/a>  \n- <a href='#6'>Conclusions<\/a>    \n- <a href='#7'>References<\/a>    ","4cacfb99":"\nLet's continue by evaluating the **test** set **loss** and **accuracy**. We will use here the test set.","e89f5698":"We can observe that this model has the same number of parameters and trainable parameters as  the previous model.","bde4d78d":"Let's glimpse the data. First, let's check the number of columns and rows.","304e2f14":"## <a id='31'>Check for missing data<\/a>  \n\nLet's create a function that check for missing data in the dataset.","030e02f7":"<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>  \n\n\n# <a id='22'>Load the data<\/a>  \n\nLet's see first what data files do we have in the root directory.","eb1f0636":"There are 15000 rows and 5 columns. Let's look to the data.","7ba2a54d":"# <a id='7'>References<\/a>  \n\n[1] Gabriel Preda, RSNA Pneumonia Detection EDA, https:\/\/www.kaggle.com\/gpreda\/rsna-pneumonia-detection-eda     \n[2] Gabriel Preda, CNN with Tensorflow|Keras for Fashion-MNIST, https:\/\/www.kaggle.com\/gpreda\/cnn-with-tensorflow-keras-for-fashion-mnist    \n[3] DanB, CollinMoris, Deep Learning From Scratch, https:\/\/www.kaggle.com\/dansbecker\/deep-learning-from-scratch  \n[4] DanB, Dropout and Strides for Larger Models, https:\/\/www.kaggle.com\/dansbecker\/dropout-and-strides-for-larger-models  \n[5] BGO, CNN with Keras, https:\/\/www.kaggle.com\/bugraokcu\/cnn-with-keras  \n[6] Dmitri Pukhov, Honey Bee health detection using CNN, https:\/\/www.kaggle.com\/gpreda\/honey-bee-health-detection-with-cnn\/notebook     \n[7] Why Dropounts prevent overfitting in Deep Neural Networks, https:\/\/medium.com\/@vivek.yadav\/why-dropouts-prevent-overfitting-in-deep-neural-networks-937e2543a701  \n[8] Dropout: A Simple Way to Prevent Neural Networks from Overfitting, https:\/\/www.cs.toronto.edu\/~hinton\/absps\/JMLRdropout.pdf  \n[9] Gabriel Preda, Honey Bee Subspecies Classification, https:\/\/www.kaggle.com\/gpreda\/honey-bee-subspecies-classification  \n<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>\n","5fc2337b":"A function to create the dummy variables corresponding to the categorical target variable.","eacc5822":"Let's check also the test accuracy per class.","4e900804":"We train the first model using and a predefined batch size. We are using the predefined epoch number for this first experiment (5 steps) and as well validation, using the validation set. ","e2ea6995":"### Test accuracy and loss\n\nLet's evaluare as well the test accuracy and loss.","e39828c6":"Now we are ready to start creating our model.  \n\nWe will add the folllowing elements to our model: \n* One convolutional layer, with 16 filters of dimmension 3;  \n* One maxpoll2d layer, with reduction factor 2;  \n* One convolutional layer, with 16 filters of dimmension 3;  \n* A flatten layer;  \n* A dense layer;  ","032da0ee":"There is a dataset file and a folder with images.  \n\nLet's load the dataset file first.","065305ed":"Let's also check that each line in the dataset has a corresponding image in the image list.  \nFirst, we will have to compose the name of the file from the indexes.","436624ea":"Let's inspect the refined model.","888c95fa":"We used a simple model. We separated 20% of the data for testing. From the training data, 80% is used for actual training and 20% for testing.   \n\nAdding additional data will only slightly increase the accuracy of the training set (it is already very good).   \nTo reduce the loss of the validation set (which is a sign of overfitting), we can have three strategies:  \n* add Dropout layers;  \n* introduce strides;  \n* modify the learning rate during the training;  \n","3c923617":"Next, we will split further the **train** set in **train** and **validation**. We want to use as well a validation set to be able to measure not only how well fits the model the train data during training (or how well `learns` the training data) but also how well the model is able to generalize so that we are able to understands not only the bias but also the variance of the model.  \n\nThe train-validation split is **80%** for training set and **20%** for validation set.","85f3ed0d":"# <a id='21'>Load packages<\/a>\n\nWe load the packages used for the analysis.\n","262aba46":"### Test accuracy and loss"}}