{"cell_type":{"03beb36c":"code","f6d19b8f":"code","4d552ff3":"code","57ebfcca":"code","36316fbf":"code","bb7c33c5":"code","05b20092":"code","1ea90e94":"code","63909aab":"code","0f75487e":"code","c84bd5cc":"code","165e272d":"code","d17fa99f":"code","d16e8d14":"code","ef212061":"code","fa25036f":"code","85be97b3":"code","e4a770bd":"code","d510d7a7":"code","e158062c":"code","9174951f":"code","de42e57d":"code","2e8086df":"code","c32c685a":"code","3e0dc04e":"code","49037ee7":"markdown","140f5acc":"markdown","9af62c30":"markdown","10b7fe42":"markdown","b40dfac1":"markdown","ce8ae4e3":"markdown","1634bb08":"markdown","23b7d096":"markdown","2477e242":"markdown","b3dc1a4b":"markdown","7c2b8a1e":"markdown"},"source":{"03beb36c":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom scipy import stats\nfrom scipy.stats import iqr\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom lightgbm import LGBMClassifier\nimport xgboost as xgb\nimport catboost as cb\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import GridSearchCV\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ndf = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')","f6d19b8f":"df.head()","4d552ff3":"df.info()","57ebfcca":"group_Outcome= df.groupby('Outcome')['Pregnancies'].count().reset_index()\ngroup_Outcome.rename(columns={'Pregnancies':'Count'}, inplace=True)\ngroup_Outcome['Percentages'] = round(group_Outcome['Count']\/sum(group_Outcome['Count'])*100,2)\n\n# fig\nfig = plt.figure(figsize=(12,4))\n\n# axes\naxes = fig.add_axes([0,0,1,1])\n\n# barh\naxes.barh(width=group_Outcome['Percentages'][0]+group_Outcome['Percentages'][1], y=0, color='silver')\naxes.barh(width=group_Outcome['Percentages'][0], y=0, color='steelblue')\n\n# annotation\naxes.text(group_Outcome['Percentages'][0]\/2.5, 0, f\"{group_Outcome['Percentages'][0]}%\", color='black', fontsize=30, fontweight='bold')\naxes.text(group_Outcome['Percentages'][0]\/2.5, -0.1, f\"({group_Outcome['Count'][0]})\", color='black', fontsize=30, fontweight='bold')\naxes.text((group_Outcome['Percentages'][0]+group_Outcome['Percentages'][1])\/1.3, 0, f\"{group_Outcome['Percentages'][1]}%\", color='black', fontsize=30, fontweight='bold')\naxes.text((group_Outcome['Percentages'][0]+group_Outcome['Percentages'][1])\/1.3, -0.1, f\"({group_Outcome['Count'][1]})\", color='black', fontsize=30, fontweight='bold')\n\n# title\naxes.text(group_Outcome['Percentages'][0]\/2.2, 0.5, 'No', color='Black', fontsize=30, fontweight='bold')\naxes.text((group_Outcome['Percentages'][0]+group_Outcome['Percentages'][1])\/1.27, 0.5, 'Yes', color='Black', fontsize=30, fontweight='bold')\n\n# conclusion\naxes.text(110, 0.3, 'We observe an unbalanced number of target.', fontsize=16, fontweight='bold', color='black', alpha=0.6)\naxes.text(110, 0.19, '''The number of people without diabetes significantly \nexceeds the number of people with diabetes.''', fontsize=16, fontweight='bold', color='black', alpha=0.6)\n\n# axis\naxes.axis('off')\n\nfig.show()","36316fbf":"# compare\ndf_age_no = df[df['Outcome']==0]['Age'].value_counts().to_frame().reset_index()\ndf_age_no.rename(columns={'index':'Age', 'Age':'Count'}, inplace=True)\ndf_age_no.sort_values(by='Age', inplace=True)\ndf_age_no.reset_index(inplace=True)\ndf_age_no.drop('index', axis=1, inplace=True)\n\ndf_age_yes = df[df['Outcome']==1]['Age'].value_counts().to_frame().reset_index()\ndf_age_yes.rename(columns={'index':'Age', 'Age':'Count'}, inplace=True)\ndf_age_yes.sort_values(by='Age', inplace=True)\ndf_age_yes.reset_index(inplace=True)\ndf_age_yes.drop('index', axis=1, inplace=True)\n\n# table\nstats_list_no = []\nfor x in df_age_no['Age'].describe()[1:]:\n    stats_list_no.append(round(x, 2))\nstats_list_no.append(iqr(df_age_no['Age']))\nstats_list_yes = []\nfor x in df_age_yes['Age'].describe()[1:]:\n    stats_list_yes.append(round(x, 2))\nstats_list_yes.append(iqr(df_age_yes['Age']))\nparametres_list = ['mean', 'std', 'min', '25%', 'median', '75%', 'max', 'iqr']\ndf_stats = pd.DataFrame({'Parametres':parametres_list, 'No':stats_list_no, 'Yes':stats_list_yes})\nlist_ = []\nfor n in range(len(df_stats)):\n    x = df_stats.loc[n,:]\n    list_.append(x)\n\n# colors for table\ncolor_list=[['white', 'white', 'white']]    \n\n# fig\nfig = plt.figure(figsize=(13,6))\n\n# axes\naxes1 = fig.add_axes([0, 0, 1.1, 1.1])\naxes2 = fig.add_axes([0.7, 0.5, 0.7, 0.7]) \n\n# line\nsns.lineplot(x=df_age_no['Age'], y=df_age_no['Count'], ax=axes1, color='steelblue', lw=3)\nsns.lineplot(x=df_age_yes['Age'], y=df_age_yes['Count'], ax=axes1, color='silver', lw=3)\n\n# scatter\naxes1.scatter(x=df_age_no['Age'], y=df_age_no['Count'], color='steelblue', lw=5)\naxes1.scatter(x=df_age_yes['Age'], y=df_age_yes['Count'], color='silver', lw=5)\n\n# lines\naxes1.axvline(30, ymin=0, ymax=0.6, linestyle=':', lw=4, color='crimson')\n\n# spines\naxes1.spines[['right', 'top']].set_visible(False)\n\n# ticks\naxes1.set_xticks(range(20, 85, 5))\naxes1.set_yticks(range(0, 65, 5))\n\n# labels\naxes1.set_xlabel('Age', fontsize=16, color='black')\naxes1.set_ylabel('Number of patients', fontsize=16, color='black')\n\n# annotate\naxes1.text(27, 48, 'Before 30 years percentages of patients, who', fontsize=16, fontweight='bold', color='black', alpha=0.6)\naxes1.text(27, 45, \"don't have diabets is greater than percentages, who\", fontsize=16, fontweight='bold', color='black', alpha=0.6)\naxes1.text(27, 42, 'have diabets. After 30 percentges is almost equal.', fontsize=16, fontweight='bold', color='black', alpha=0.6)\n \n# title\naxes1.text(15, 74, 'Number of patients by age', fontsize=24, color='black', fontweight='bold')\n\n# table\naxes2.set_axis_off() \ntable=axes2.table(cellColours=color_list*8,cellText = list_, cellLoc ='left', loc ='upper left', colWidths=[0.25, 0.15, 0.15],\n                  colLabels=df_stats.columns,colColours=['white', 'steelblue', 'silver'])           \ntable.auto_set_font_size(False) \ntable.set_fontsize(16)  \ntable.scale(1.1, 2.1) \naxes2.text(0.22, 1.1, \"What's about age\", color='black', fontsize=18, fontweight='bold')\n\nfig.show()","bb7c33c5":"# crosstab\ncross_Pregnancies = pd.crosstab(df['Pregnancies'], df['Outcome'], margins=True)\ncross_Pregnancies['Percentages_no'] = round(cross_Pregnancies[0]\/cross_Pregnancies['All']*100, 1)\ncross_Pregnancies['Percentages_yes'] = round(cross_Pregnancies[1]\/cross_Pregnancies['All']*100, 1)\n\n# percentages of Pregnancies\nperecetges_list_no = []\nfor x in cross_Pregnancies[0][:17]:\n    i = round(x\/cross_Pregnancies[0]['All'] * 100, 1)\n    perecetges_list_no.append(i)\n\nperecetges_list_yes = []\nfor x in cross_Pregnancies[1][:17]:\n    i = round(x\/cross_Pregnancies[1]['All'] * 100, 1)\n    perecetges_list_yes.append(i)\n\n# fig\nfig = plt.figure(figsize=(13,6))\n\n# axes\naxes1 = fig.add_axes([0, 0, 1, 1])\naxes2 = fig.add_axes([0, -1.5, 1, 1])\n\n# bar\naxes1.bar(height=cross_Pregnancies['Percentages_no'][:17], x=cross_Pregnancies.index[:17]-0.18, width=0.35, color='steelblue', edgecolor='black')\naxes1.bar(height=cross_Pregnancies['Percentages_yes'][:17], x=cross_Pregnancies.index[:17]+0.18, width=0.35, color='silver', edgecolor='black')\naxes2.bar(height=perecetges_list_no, x=cross_Pregnancies.index[:17]-0.18, width=0.35, color='steelblue', edgecolor='black')\naxes2.bar(height=perecetges_list_yes, x=cross_Pregnancies.index[:17]+0.18, width=0.35, color='silver', edgecolor='black')\n\n# ticks\naxes1.set_xticks(range(0,18,1))\naxes2.set_xticks(range(0,18,1))\n\n# annotates\nfor p in axes1.patches:\n    width = p.get_width()\n    height = p.get_height()\n    x, y = p.get_xy() \n    axes1.annotate('{:.0f}'.format(height), (x + width\/2, y + height*1.02), ha='center') \nfor p in axes2.patches:\n    width = p.get_width()\n    height = p.get_height()\n    x, y = p.get_xy() \n    axes2.annotate('{:.0f}'.format(height), (x + width\/2, y + height*1.02), ha='center')\n\n# spines\naxes1.spines[['top', 'right']].set_visible(False)\naxes2.spines[['top', 'right']].set_visible(False)\n\n# labels\naxes1.set_xlabel('Pregnancies', fontsize=16, color='black')\naxes1.set_ylabel('Ppercentages', fontsize=16, color='black')\naxes2.set_xlabel('Pregnancies', fontsize=16, color='black')\naxes2.set_ylabel('Ppercentages', fontsize=16, color='black')\n\n# title\naxes1.text(-3, 125, 'Ratio of percentages in Pregnancies by Outcome', color='black', fontsize=24, fontweight='bold')\naxes2.text(-3, 27, 'Ratio of percentages in Outcome by Pregnancies', color='black', fontsize=24, fontweight='bold')\n\n# annotate \naxes1.text(1, 100, '''The percentage of patients who do not have \ndiabetes in the range of 0 to 6 pregnancies is significantly higher \nthan the percentage of patients who have diabetes.''', fontsize=16, fontweight='bold', color='black', alpha=0.6)\naxes2.text(2, 20, f'''Maximum percentage of patients who don't have diabetes - 1 pregnancy.\nMaximum percentage of patients who don't have diabetes - 0 pregnancy.\nMean of pregnancies in patients without diabetes - {round(df[df['Outcome']==0]['Pregnancies'].mean())}\nMean of pregnancies in patients with diabetes - {round(df[df['Outcome']==1]['Pregnancies'].mean())}''', fontsize=16, fontweight='bold', color='black', alpha=0.6)\n\nfig.show()","05b20092":"df['Outcome'].replace({0 : 'No', 1 : 'Yes'}, inplace=True)\n\n# fig\nfig = plt.figure(figsize=(13, 6))\n\n# axes\naxes1 = fig.add_axes([0, 0, 1, 1.2])\naxes2 = fig.add_axes([1, 0, 0.6, 0.5])\naxes3 = fig.add_axes([1, 0.7, 0.6, 0.5])\n\n# violin\nsns.violinplot(y=df['Outcome'], x=df['Glucose'], palette=['silver', 'steelblue'], ax=axes1)\n\n# swarm\nsns.swarmplot(y=df['Outcome'], x=df['Glucose'], palette=['black', 'black'], ax=axes1)\n\n# distplot\nsns.distplot(x=df[df['Outcome']=='Yes']['Glucose'], ax=axes3,  hist_kws = dict(alpha=0.9, edgecolor='black', lw=2), \n             color='silver', kde_kws=dict(color='black', lw=3))\nsns.distplot(x=df[df['Outcome']=='No']['Glucose'], ax=axes2,  hist_kws = dict(alpha=0.9, edgecolor='black', lw=2), \n             color='steelblue', kde_kws=dict(color='black', lw=3))\n\n# lines\naxes1.axvline(240, ymin=0, ymax=1, color='black')\naxes1.axvline(59, ymin=0, ymax=1, color='crimson', lw=4, linestyle=':')\naxes1.axvline(99, ymin=0, ymax=1, color='crimson', lw=4, linestyle=':')\naxes3.axvline(df[df['Outcome']=='Yes']['Glucose'].mean(), ymin=0, ymax=1, lw=4, color='crimson', linestyle=':')\naxes2.axvline(df[df['Outcome']=='No']['Glucose'].mean(), ymin=0, ymax=1, lw=4, color='crimson', linestyle=':')\n\n# spines\naxes1.spines[['right', 'left', 'top']].set_visible(False)\naxes2.spines[['right', 'left', 'top']].set_visible(False)\naxes3.spines[['right', 'left', 'top']].set_visible(False)\n\n# labels\naxes1.set_xlabel('')\naxes2.set_xlabel('')\naxes3.set_xlabel('')\naxes1.set_ylabel('')\naxes2.set_ylabel('')\naxes3.set_ylabel('')\n\n# ticks\naxes1.set_xticks(range(0, 220, 20))\naxes2.set_xticks(range(0, 220, 20))\naxes3.set_xticks(range(0, 220, 20))\naxes1.set_yticks([])\naxes2.set_yticks([])\naxes3.set_yticks([])\n\n# annotate\naxes1.text(0, -0.7, f'''The chart shows that in most cases glucose \nlevels are lower in patients without diabetes.\nWe have some observations with a zero value (maybe error or nan).\nNormal blood glucose in range 59 - 99.\nPercentage of patients with diabets with normal glucose  - {round(len(df[df['Outcome']=='Yes'][df[df['Outcome']=='Yes']['Glucose']>=59][df[df['Outcome']=='Yes'][df[df['Outcome']=='Yes']['Glucose']>=59]['Glucose']<=99])\/len(df[df['Outcome']=='Yes'])*100, 1)}%.\nPercentage of patients without diabets with normal glucose  - {len(df[df['Outcome']=='No'][df[df['Outcome']=='No']['Glucose']>=59][df[df['Outcome']=='No'][df[df['Outcome']=='No']['Glucose']>=59]['Glucose']<=99])\/len(df[df['Outcome']=='No'])*100}%''', \n           fontsize=16, fontweight='bold', color='black', alpha=0.6)\naxes2.text(-40, 0.024, f'''Mean of glucose in patients without diabetes - {round(df[df['Outcome']=='No']['Glucose'].mean(), 2)}''', \n           fontsize=16, fontweight='bold', color='black', alpha=0.6)\naxes3.text(-40, 0.014, f'''Mean of glucose in patients with diabetes - {round(df[df['Outcome']=='Yes']['Glucose'].mean(), 2)}''', \n           fontsize=16, fontweight='bold', color='black', alpha=0.6)\n\n# title\naxes1.text(-25, -1.2, 'Distribution Glucose by Outcome', color='black', fontsize=24, fontweight='bold')\n\nfig.show()","1ea90e94":"# fig\nfig = plt.figure(figsize=(13, 6))\n\n# axes\naxes1 = fig.add_axes([0, 0, 1, 1.2])\naxes2 = fig.add_axes([1, 0, 0.6, 0.5])\naxes3 = fig.add_axes([1, 0.7, 0.6, 0.5])\n\n# violin\nsns.violinplot(y=df['Outcome'], x=df['BloodPressure'], palette=['silver', 'steelblue'], ax=axes1)\n\n# swarm\nsns.swarmplot(y=df['Outcome'], x=df['BloodPressure'], palette=['black', 'black'], ax=axes1)\n\n# distplot\nsns.distplot(x=df[df['Outcome']=='No']['BloodPressure'], ax=axes2,  hist_kws = dict(alpha=0.9, edgecolor='black', lw=2), \n             color='steelblue', kde_kws=dict(color='black', lw=3))\nsns.distplot(x=df[df['Outcome']=='Yes']['BloodPressure'], ax=axes3,  hist_kws = dict(alpha=0.9, edgecolor='black', lw=2), \n             color='silver', kde_kws=dict(color='black', lw=3))\n\n# lines\naxes1.axvline(140, ymin=0, ymax=1, color='black')\naxes1.axvline(80, ymin=0, ymax=1, color='crimson', lw=4, linestyle=':')\naxes3.axvline(df[df['Outcome']=='Yes']['BloodPressure'].mean(), ymin=0, ymax=1, lw=4, color='crimson', linestyle=':')\naxes2.axvline(df[df['Outcome']=='No']['BloodPressure'].mean(), ymin=0, ymax=1, lw=4, color='crimson', linestyle=':')\n\n# spines\naxes1.spines[['right', 'left', 'top']].set_visible(False)\naxes2.spines[['right', 'left', 'top']].set_visible(False)\naxes3.spines[['right', 'left', 'top']].set_visible(False)\n\n# labels\naxes1.set_xlabel('')\naxes2.set_xlabel('')\naxes3.set_xlabel('')\naxes1.set_ylabel('')\naxes2.set_ylabel('')\naxes3.set_ylabel('')\n\n# ticks\naxes1.set_xticks(range(0, 120, 10))\naxes2.set_xticks(range(0, 120, 10))\naxes3.set_xticks(range(0, 120, 10))\naxes1.set_yticks([])\naxes2.set_yticks([])\naxes3.set_yticks([])\n\n# annotate \naxes1.text(-12, -0.65, f'''There are no significant differences in diastolic blood pressure\nbetween patients with diabetes and patients without diabetes.\nAnd we have a lot of observations with a zero value (maybe are errors or nan).\nPercentage of patients with diabets with normal diastolic blood pressure - {round(len(df[df['Outcome']=='Yes'][df[df['Outcome']=='Yes']['BloodPressure']<=80])\/len(df[df['Outcome']=='Yes'])*100, 1)}%.\nPercentage of patients without diabets with normal diastolic blood pressure  - {round(len(df[df['Outcome']=='No'][df[df['Outcome']=='No']['BloodPressure']<=80])\/len(df[df['Outcome']=='No'])*100, 1)}%.''', \n           fontsize=16, fontweight='bold', color='black', alpha=0.6)\naxes2.text(-30, 0.038, f'''Mean of diastolic blood pressure in patients without diabetes - {round(df[df['Outcome']=='No']['BloodPressure'].mean(), 2)}''', \n           fontsize=16, fontweight='bold', color='black', alpha=0.6)\naxes3.text(-35, 0.048, f'''Mean of diastolic blood pressure in patients with diabetes - {round(df[df['Outcome']=='Yes']['BloodPressure'].mean(), 2)}''', \n           fontsize=16, fontweight='bold', color='black', alpha=0.6)\n\n# title\naxes1.text(-25, -1.2, 'Distribution BloodPressure by Outcome', color='black', fontsize=24, fontweight='bold')\n\nfig.show()","63909aab":"# age category\ndf['Age_category'] = pd.cut(df['Age'], [20, 30, 40, 50, 60, 100])\ndf['Age_category'] = df['Age_category'].astype('str')\ndf['Age_category'].value_counts()\ndf['Age_category'].replace({'(20, 30]' : '21 - 30', '(30, 40]' : '31 - 40', '(40, 50]' : '41 - 50', '(50, 60]' : '51 - 60', '(60, 100]' : '61+'}, inplace=True)\ndf_sort_age_category = df.sort_values(by='Age_category')\n\n# fig\nfig = plt.figure(figsize=(13, 6))\n\n# axes\naxes = fig.add_axes([0, 0, 1.3, 1.3])\n\n# stripplot\nsns.stripplot(y=df_sort_age_category['SkinThickness'], x=df_sort_age_category['Age_category'], \n              hue=df_sort_age_category['Outcome'], palette=['steelblue', 'silver'], dodge=True, size=6, \n              linewidth=1, edgecolor='black', ax=axes)\n\n# legend\naxes.legend().set_visible(False)\n\n# spines\naxes.spines[['top', 'right']].set_visible(False)\n\n# ticks\naxes.set_yticks(range(0, 101, 5))\n\n# labels\naxes.set_xlabel('Age_category', fontsize=16, color='black')\naxes.set_ylabel('SkinThickness', fontsize=16, color='black')\n\n# annotate\naxes.text(0.5, 95, '''Triceps skin fold thickness is measured by age categories.\nAgain we have a lot of observations with a zero value.\nI don't observe significant differences between patients with or without diabetes.''', fontsize=16, fontweight='bold', color='black', alpha=0.6)\n\n# title\naxes.text(-0.75, 115, 'Triceps skin fold thickness (mm)', color='black', fontsize=24, fontweight='bold')\n\nfig.show()","0f75487e":"# fig\nfig = plt.figure(figsize=(13, 6))\n\n# axes\naxes1 = fig.add_axes([0, 0, 1, 1.2])\naxes2 = fig.add_axes([1, 0, 0.6, 0.5])\naxes3 = fig.add_axes([1, 0.7, 0.6, 0.5])\n\n# violin\nsns.violinplot(y=df['Outcome'], x=df['Insulin'], palette=['silver', 'steelblue'], ax=axes1)\n\n# swarm\nsns.swarmplot(y=df['Outcome'], x=df['Insulin'], palette=['black', 'black'], ax=axes1)\n\n# distplot\nsns.distplot(x=df[df['Outcome']=='No']['Insulin'], ax=axes2,  hist_kws = dict(alpha=0.9, edgecolor='black', lw=2), \n             color='steelblue', kde_kws=dict(color='black', lw=3))\nsns.distplot(x=df[df['Outcome']=='Yes']['Insulin'], ax=axes3,  hist_kws = dict(alpha=0.9, edgecolor='black', lw=2), \n             color='silver', kde_kws=dict(color='black', lw=3))\n\n# lines\naxes1.axvline(950, ymin=0, ymax=1, color='black')\naxes1.axvline(16, ymin=0, ymax=1, color='crimson', lw=4, linestyle=':')\naxes1.axvline(166, ymin=0, ymax=1, color='crimson', lw=4, linestyle=':')\naxes3.axvline(df[df['Outcome']=='Yes']['Insulin'].mean(), ymin=0, ymax=1, lw=4, color='crimson', linestyle=':')\naxes2.axvline(df[df['Outcome']=='No']['Insulin'].mean(), ymin=0, ymax=1, lw=4, color='crimson', linestyle=':')\n\n# spines\naxes1.spines[['right', 'left', 'top']].set_visible(False)\naxes2.spines[['right', 'left', 'top']].set_visible(False)\naxes3.spines[['right', 'left', 'top']].set_visible(False)\n\n# labels\naxes1.set_xlabel('')\naxes2.set_xlabel('')\naxes3.set_xlabel('')\naxes1.set_ylabel('')\naxes2.set_ylabel('')\naxes3.set_ylabel('')\n\n# ticks\naxes1.set_xticks(range(0, 851, 50))\naxes2.set_xticks(range(0, 851, 50))\naxes3.set_xticks(range(0, 851, 50))\naxes1.set_yticks([])\naxes2.set_yticks([])\naxes3.set_yticks([])\n\n# annotate \naxes1.text(-12, -0.65, f'''A lot of observations with a zero value.\nPercentage of patients with diabets with normal insulin - {round(len(df[df['Outcome']=='Yes'][df[df['Outcome']=='Yes']['Insulin']>=16][df[df['Outcome']=='Yes'][df[df['Outcome']=='Yes']['Insulin']>=16]['Insulin']<=166]['Insulin'])\/len(df[df['Outcome']=='Yes'])*100, 1)}%.\nPercentage of patients without diabets with normal insulin  - {len(df[df['Outcome']=='No'][df[df['Outcome']=='No']['Insulin']>=16][df[df['Outcome']=='No'][df[df['Outcome']=='No']['Insulin']>=16]['Insulin']<=166]['Insulin'])\/len(df[df['Outcome']=='No'])*100}%. ''', \n           fontsize=16, fontweight='bold', color='black', alpha=0.6)\naxes2.text(-35, 0.022, f'''Mean of insulin in patients without diabetes - {round(df[df['Outcome']=='No']['Insulin'].mean(), 2)}''', \n           fontsize=16, fontweight='bold', color='black', alpha=0.6)\naxes3.text(-35, 0.012, f'''Mean of insulin in patients with diabetes - {round(df[df['Outcome']=='Yes']['Insulin'].mean(), 2)}''', \n           fontsize=16, fontweight='bold', color='black', alpha=0.6)\n\n# title\naxes1.text(-120, -1.2, 'Distribution Insulin by Outcome', color='black', fontsize=24, fontweight='bold')\n\nfig.show()","c84bd5cc":"# fig\nfig = plt.figure(figsize=(13, 6))\n\n# axes\naxes1 = fig.add_axes([0, 0, 1, 1.2])\naxes2 = fig.add_axes([1, 0, 0.6, 0.5])\naxes3 = fig.add_axes([1, 0.7, 0.6, 0.5])\n\n# violin\nsns.violinplot(y=df['Outcome'], x=df['BMI'], palette=['silver', 'steelblue'], ax=axes1)\n\n# swarm\nsns.swarmplot(y=df['Outcome'], x=df['BMI'], palette=['black', 'black'], ax=axes1)\n\n# distplot\nsns.distplot(x=df[df['Outcome']=='No']['BMI'], ax=axes2,  hist_kws = dict(alpha=0.9, edgecolor='black', lw=2), \n             color='steelblue', kde_kws=dict(color='black', lw=3))\nsns.distplot(x=df[df['Outcome']=='Yes']['BMI'], ax=axes3,  hist_kws = dict(alpha=0.9, edgecolor='black', lw=2), \n             color='silver', kde_kws=dict(color='black', lw=3))\n\n# lines\naxes1.axvline(75, ymin=0, ymax=1, color='black')\naxes1.axvline(18.5, ymin=0, ymax=1, color='crimson', lw=4, linestyle=':')\naxes1.axvline(24.9, ymin=0, ymax=1, color='crimson', lw=4, linestyle=':')\naxes3.axvline(df[df['Outcome']=='Yes']['BMI'].mean(), ymin=0, ymax=1, lw=4, color='crimson', linestyle=':')\naxes2.axvline(df[df['Outcome']=='No']['BMI'].mean(), ymin=0, ymax=1, lw=4, color='crimson', linestyle=':')\n\n# spines\naxes1.spines[['right', 'left', 'top']].set_visible(False)\naxes2.spines[['right', 'left', 'top']].set_visible(False)\naxes3.spines[['right', 'left', 'top']].set_visible(False)\n\n# labels\naxes1.set_xlabel('')\naxes2.set_xlabel('')\naxes3.set_xlabel('')\naxes1.set_ylabel('')\naxes2.set_ylabel('')\naxes3.set_ylabel('')\n\n# # ticks\naxes1.set_xticks(range(0, 75, 5))\naxes2.set_xticks(range(0, 75, 5))\naxes3.set_xticks(range(0, 75, 5))\naxes1.set_yticks([])\naxes2.set_yticks([])\naxes3.set_yticks([])\n\n# annotate \naxes1.text(-12, -0.65, f'''Some observations with a zero value.\nPercentage of patients with diabets with normal BMI - {round(len(df[df['Outcome']=='Yes'][df[df['Outcome']=='Yes']['BMI']>=18.5][df[df['Outcome']=='Yes'][df[df['Outcome']=='Yes']['BMI']>=18.5]['BMI']<=24.9]['BMI'])\/len(df[df['Outcome']=='Yes'])*100, 1)}%\nPercentage of patients without diabets with normal BMI  - {len(df[df['Outcome']=='No'][df[df['Outcome']=='No']['BMI']>=18.5][df[df['Outcome']=='No'][df[df['Outcome']=='No']['BMI']>=18.5]['BMI']<=24.9]['Insulin'])\/len(df[df['Outcome']=='No'])*100}%. ''', \n           fontsize=16, fontweight='bold', color='black', alpha=0.6)\naxes2.text(-5, 0.062, f'''Mean of BMI in patients without diabetes - {round(df[df['Outcome']=='No']['BMI'].mean(), 2)}''', \n           fontsize=16, fontweight='bold', color='black', alpha=0.6)\naxes3.text(-5, 0.082, f'''Mean of BMI in patients with diabetes - {round(df[df['Outcome']=='Yes']['BMI'].mean(), 2)}''', \n           fontsize=16, fontweight='bold', color='black', alpha=0.6)\n\n# title\naxes1.text(-20, -1.2, 'Distribution BMI by Outcome', color='black', fontsize=24, fontweight='bold')\n\nfig.show()","165e272d":"# fig\nfig = plt.figure(figsize=(13, 6))\n\n# axes\naxes1 = fig.add_axes([0, 0, 1, 1.2])\naxes2 = fig.add_axes([1, 0, 0.6, 0.5])\naxes3 = fig.add_axes([1, 0.7, 0.6, 0.5])\n\n# violin\nsns.violinplot(y=df['Outcome'], x=df['DiabetesPedigreeFunction'], palette=['silver', 'steelblue'], ax=axes1)\n\n# swarm\nsns.swarmplot(y=df['Outcome'], x=df['DiabetesPedigreeFunction'], palette=['black', 'black'], ax=axes1)\n\n# distplot\nsns.distplot(x=df[df['Outcome']=='No']['DiabetesPedigreeFunction'], ax=axes2,  hist_kws = dict(alpha=0.9, edgecolor='black', lw=2), \n             color='steelblue', kde_kws=dict(color='black', lw=3))\nsns.distplot(x=df[df['Outcome']=='Yes']['DiabetesPedigreeFunction'], ax=axes3,  hist_kws = dict(alpha=0.9, edgecolor='black', lw=2), \n             color='silver', kde_kws=dict(color='black', lw=3))\n\n# lines\naxes1.axvline(2.8, ymin=0, ymax=1, color='black')\n# axes1.axvline(18.5, ymin=0, ymax=1, color='crimson', lw=4, linestyle=':')\n# axes1.axvline(24.9, ymin=0, ymax=1, color='crimson', lw=4, linestyle=':')\naxes3.axvline(df[df['Outcome']=='Yes']['DiabetesPedigreeFunction'].mean(), ymin=0, ymax=1, lw=4, color='crimson', linestyle=':')\naxes2.axvline(df[df['Outcome']=='No']['DiabetesPedigreeFunction'].mean(), ymin=0, ymax=1, lw=4, color='crimson', linestyle=':')\n\n# spines\naxes1.spines[['right', 'left', 'top']].set_visible(False)\naxes2.spines[['right', 'left', 'top']].set_visible(False)\naxes3.spines[['right', 'left', 'top']].set_visible(False)\n\n# labels\naxes1.set_xlabel('')\naxes2.set_xlabel('')\naxes3.set_xlabel('')\naxes1.set_ylabel('')\naxes2.set_ylabel('')\naxes3.set_ylabel('')\n\n# ticks\naxes1.set_yticks([])\naxes2.set_yticks([])\naxes3.set_yticks([])\n\n# annotate \naxes1.text(1, -0.32, f'''I don't observe significant differences\nbetween patients with or without diabetes.''', fontsize=16, fontweight='bold', color='black', alpha=0.6)\naxes2.text(0.3, 2.7, f'''Mean of DiabetesPedigreeFunction in patients without diabetes - {round(df[df['Outcome']=='No']['DiabetesPedigreeFunction'].mean(), 2)}''', \n           fontsize=16, fontweight='bold', color='black', alpha=0.6)\naxes3.text(0.3, 2.2, f'''Mean of DiabetesPedigreeFunction in patients with diabetes - {round(df[df['Outcome']=='Yes']['DiabetesPedigreeFunction'].mean(), 2)}''', \n           fontsize=16, fontweight='bold', color='black', alpha=0.6)\n\n# title\naxes1.text(-0.5, -0.6, 'Distribution DiabetesPedigreeFunction by Outcome', color='black', fontsize=24, fontweight='bold')\n\nfig.show()\n","d17fa99f":"df['Outcome'].replace({'No' : 0, 'Yes' : 1}, inplace=True)\ndf[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']] = df[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']].replace(0, np.NaN)\n\n# fig\nfig= plt.figure(figsize=(8, 8))\n\n# mask\nmask = np.triu(df.corr())\n\n# axes \naxes = fig.add_axes([0, 0, 1, 1])\nsns.heatmap(df.dropna().corr(), annot=True, mask=mask, square=True,fmt='.2g',vmin=-1, vmax=1, center= 0, cmap='coolwarm', linecolor='white',\n            cbar_kws= {'orientation': 'vertical'}, ax=axes) \n\n# annotate\naxes.text(12, 0, f'''We do not have strong correlation between features.\nMax correlation between age and pregnancies - {round(df.dropna().corr()['Pregnancies'][7], 2)}''', fontsize=16, fontweight='bold', color='black', alpha=0.6)\n\n# title\naxes.text(-1, -1.5, 'Correlation', color='black', fontsize=24, fontweight='bold')\n\nfig.show()","d16e8d14":"df.drop('Age_category', axis=1, inplace=True)\n\ndf_no = df[df['Outcome']==0]\ndf_yes = df[df['Outcome']==1]\n\n# Glucose\ndf_no['Glucose'].fillna(df_no['Glucose'].median(),inplace=True)\ndf_yes['Glucose'].fillna(df_yes['Glucose'].median(),inplace=True)\n\n# BloodPressure\ndf_no['BloodPressure'].fillna(df_no['BloodPressure'].median(),inplace=True)\ndf_yes['BloodPressure'].fillna(df_yes['BloodPressure'].median(),inplace=True)\n\n# SkinThickness\ndf_no['SkinThickness'].fillna(df_no['SkinThickness'].median(),inplace=True)\ndf_yes['SkinThickness'].fillna(df_yes['SkinThickness'].median(),inplace=True)\n\n# Insulin\ndf_no['Insulin'].fillna(df_no['Insulin'].median(),inplace=True)\ndf_yes['Insulin'].fillna(df_yes['Insulin'].median(),inplace=True)\n\n#BMI\ndf_no['BMI'].fillna(df_no['BMI'].median(),inplace=True)\ndf_yes['BMI'].fillna(df_yes['BMI'].median(),inplace=True)\n\n# concat\ndf = pd.concat([df_no, df_yes])\n\n# scaler\nscaler = StandardScaler()\nnorm = scaler.fit_transform(df[['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']])\ndf_norm = pd.DataFrame({'Pregnancies': norm[ :, 0], 'Glucose' : norm[ :, 1], 'BloodPressure' : norm[ :, 2], 'SkinThickness' : norm[ :, 3],\n                       'Insulin' : norm[ :, 4], 'BMI' : norm[ :, 5], 'DiabetesPedigreeFunction' : norm[ :, 5], 'Age' : norm[ :, 6]}, \n                       columns=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age'])\ndf_norm['Outcome'] = df['Outcome']\n\n# split\nx = df.drop(['Outcome'], axis=1)\ny = df['Outcome']\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)\n\n# os\nos = SMOTE(random_state=42)\ncolumns = x_train.columns\nos_data_x,os_data_y = os.fit_resample(x_train, y_train.ravel())","ef212061":"# log\nlog_params = {'penalty':['l1', 'l2'], \n              'C': [0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 100], \n              'solver':['liblinear', 'saga']}\nlog_model = GridSearchCV(LogisticRegression(), log_params, cv=5)\nlog_model.fit(os_data_x, os_data_y)\nlog_predict = log_model.predict(x_test)\nlog_cm = confusion_matrix(y_test, log_predict)\nlog_score = log_model.best_score_","fa25036f":"# knn\nknn_params = {'n_neighbors': list(range(3, 20, 2)),\n          'weights':['uniform', 'distance'],\n          'algorithm':['auto', 'ball_tree', 'kd_tree', 'brute'],\n          'metric':['euclidean', 'manhattan', 'chebyshev', 'minkowski']}\nknn_model = GridSearchCV(KNeighborsClassifier(), knn_params, cv=5)\nknn_model.fit(os_data_x, os_data_y)\nknn_predict = knn_model.predict(x_test)\nknn_cm = confusion_matrix(y_test, knn_predict)\nknn_score = knn_model.best_score_","85be97b3":"# svc\nsvc_params = {'C': [0.001, 0.01, 0.1, 1],\n              'kernel': [ 'linear' , 'poly' , 'rbf' , 'sigmoid' ]}\nsvc_model = GridSearchCV(SVC(), svc_params, cv=5)\nsvc_model.fit(os_data_x, os_data_y)\nsvc_predict = svc_model.predict(x_test)\nsvc_cm = confusion_matrix(y_test, svc_predict)\nsvc_score = svc_model.best_score_","e4a770bd":"# dt\ndt_params = {'criterion' : ['gini', 'entropy'],\n              'splitter': ['random', 'best'], \n              'max_depth': [3, 5, 7, 9, 11, 13]}\ndt_model = GridSearchCV(DecisionTreeClassifier(), dt_params, cv=5)\ndt_model.fit(os_data_x, os_data_y)\ndt_predict = dt_model.predict(x_test)\ndt_cm = confusion_matrix(y_test, dt_predict)\ndt_score = dt_model.best_score_","d510d7a7":"# rf\nrf_params = {'criterion' : ['gini', 'entropy'],\n             'n_estimators': list(range(5, 26, 5)),\n             'max_depth': list(range(3, 20, 2))}\nrf_model = GridSearchCV(RandomForestClassifier(), rf_params, cv=5)\nrf_model.fit(os_data_x, os_data_y)\nrf_predict = rf_model.predict(x_test)\nrf_cm = confusion_matrix(y_test, rf_predict)\nrf_score = rf_model.best_score_","e158062c":"# sgd\nsgd_params = {'loss' : ['hinge', 'log', 'squared_hinge', 'modified_huber'],\n              'alpha' : [0.0001, 0.001, 0.01, 0.1, 1, 10],\n              'penalty' : ['l2', 'l1', 'none']}\nsgd_model = GridSearchCV(SGDClassifier(max_iter=10000), sgd_params, cv=5)\nsgd_model.fit(os_data_x, os_data_y)\nsgd_predict = sgd_model.predict(x_test)\nsgd_cm = confusion_matrix(y_test, sgd_predict)\nsgd_score = sgd_model.best_score_","9174951f":"# lgb\nlgb_params = {'n_estimators': [5, 10, 15, 20, 25, 50, 100],\n                   'learning_rate': [0.01, 0.05, 0.1],\n                   'num_leaves': [7, 15, 31],\n                  }\nlgb_model = GridSearchCV(LGBMClassifier(), lgb_params, cv=5)\nlgb_model.fit(os_data_x, os_data_y)\nlgb_predict = lgb_model.predict(x_test)\nlgb_cm = confusion_matrix(y_test, lgb_predict)\nlgb_score = lgb_model.best_score_","de42e57d":"# xgb\nxgb_params = {'max_depth': [3, 5, 7, 9],\n              'n_estimators': [5, 10, 15, 20, 25, 50, 100],\n              'learning_rate': [0.01, 0.05, 0.1]}\nxgb_model = GridSearchCV(xgb.XGBClassifier(eval_metric='logloss'), xgb_params, cv=5)\nxgb_model.fit(os_data_x, os_data_y)\nxgb_predict = xgb_model.predict(x_test)\nxgb_cm = confusion_matrix(y_test, xgb_predict)\nxgb_score = xgb_model.best_score_","2e8086df":"# cb\ncb_params = {'learning_rate': [0.01, 0.05, 0.1],\n             'depth': [3, 5, 7, 9]}\ncb_model = GridSearchCV(cb.CatBoostClassifier(verbose=False), cb_params, cv=5)\ncb_model.fit(os_data_x, os_data_y)\ncb_predict = cb_model.predict(x_test)\ncb_cm = confusion_matrix(y_test, cb_predict)\ncb_score = cb_model.best_score_","c32c685a":"# Results\n\nfigure = plt.figure()\naxes1 = figure.add_axes([0, 0, 1, 1]) # log_model\naxes2 = figure.add_axes([1, 0, 1, 1]) # knn_model\naxes3 = figure.add_axes([2, 0, 1, 1]) # svc_model\naxes4 = figure.add_axes([0, -1.3, 1, 1]) # dt_model\naxes5 = figure.add_axes([1, -1.3, 1, 1]) # rf_model\naxes6 = figure.add_axes([2, -1.3, 1, 1]) # rf_model\naxes7 = figure.add_axes([0, -2.6, 1, 1]) # lgb_model\naxes8 = figure.add_axes([1, -2.6, 1, 1]) # xgb_model\naxes9 = figure.add_axes([2, -2.6, 1, 1]) # xgb_model\n\n# log_model\naxes1.imshow(log_cm, cmap='coolwarm')\naxes1.grid(False)\naxes1.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes1.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes1.set_title('Confusion matrix (LogisticRegression)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes1.text(j, i, log_cm[i, j], ha='center', va='center', color='black')\n\n# knn_model\naxes2.imshow(knn_cm, cmap='coolwarm')\naxes2.grid(False)\naxes2.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes2.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes2.set_title('Confusion matrix (KNeighborsClassifier)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes2.text(j, i, knn_cm[i, j], ha='center', va='center', color='black')\n\n# svc_model\naxes3.imshow(svc_cm, cmap='coolwarm')\naxes3.grid(False)\naxes3.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes3.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes3.set_title('Confusion matrix (SVC)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes3.text(j, i, svc_cm[i, j], ha='center', va='center', color='black')\n\n# knn_model       \naxes4.imshow(dt_cm, cmap='coolwarm')\naxes4.grid(False)\naxes4.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes4.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes4.set_title('Confusion matrix (DecisionTreeClassifier)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes4.text(j, i, dt_cm[i, j], ha='center', va='center', color='black')\n\n# rf_model       \naxes5.imshow(rf_cm, cmap='coolwarm')\naxes5.grid(False)\naxes5.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes5.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes5.set_title('Confusion matrix (RandomForestClassifier)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes5.text(j, i, rf_cm[i, j], ha='center', va='center', color='black')\n        \n# sgd_model       \naxes6.imshow(sgd_cm, cmap='coolwarm')\naxes6.grid(False)\naxes6.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes6.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes6.set_title('Confusion matrix (SGDClassifier)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes6.text(j, i, sgd_cm[i, j], ha='center', va='center', color='black')\n\n# lgb_model       \naxes7.imshow(lgb_cm, cmap='coolwarm')\naxes7.grid(False)\naxes7.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes7.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes7.set_title('Confusion matrix (LGBMClassifier)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes7.text(j, i, lgb_cm[i, j], ha='center', va='center', color='black')\n        \n# xgb_model       \naxes8.imshow(xgb_cm, cmap='coolwarm')\naxes8.grid(False)\naxes8.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes8.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes8.set_title('Confusion matrix (XGBClassifier)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes8.text(j, i, xgb_cm[i, j], ha='center', va='center', color='black')\n\n# cb_model       \naxes9.imshow(cb_cm, cmap='coolwarm')\naxes9.grid(False)\naxes9.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes9.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes9.set_title('Confusion matrix (CatBoostClassifier)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes9.text(j, i, cb_cm[i, j], ha='center', va='center', color='black')","3e0dc04e":"models = ['LogisticRegression', 'KNeighborsClassifier', 'SVC', 'DecisionTreeClassifier', \n          'RandomForestClassifier', 'SGDClassifier', 'LGBMClassifier', 'XGBClassifier', 'CatBoostClassifier']\nscores = [log_score, knn_score, svc_score, dt_score, rf_score, sgd_score, lgb_score, xgb_score, cb_score]\nscore_table = pd.DataFrame({'Model':models, 'Score':scores})\nscore_table.sort_values(by='Score', axis=0, ascending=False)","49037ee7":"# Outcome","140f5acc":"# Pregnancies\n**What I want to know:**\n\n* Ratio of percentages in Pregnancies by Outcome\n* Ratio of percentages in Outcome by Pregnancies","9af62c30":"**And so we do not have strong correlation between features.**","10b7fe42":"# BMI","b40dfac1":"# Correlation\n\n**I want to check correlation, but firstly I will replace 0 with NaN**","ce8ae4e3":"# Glucose","1634bb08":"# Preparing and models\n**We have a lot of NaN values and I suggest replacing them all with the median values by Outcome. Also we have unbalanced target.**","23b7d096":"# SkinThickness","2477e242":"# DiabetesPedigreeFunction","b3dc1a4b":"# Age","7c2b8a1e":"# Results"}}