{"cell_type":{"de9bab77":"code","6792d99b":"code","f4206217":"code","78f080af":"code","14ca3aed":"code","2ff6126a":"code","a6a2e958":"code","e64e677b":"code","06b030e7":"code","175d6e63":"code","92f9253d":"code","a69cb0c9":"code","54d018d0":"code","41957330":"code","9cdef0cc":"code","3e2a7ca8":"code","29ce7c84":"code","711013aa":"code","2ef0cf53":"code","87f46374":"code","99419d20":"code","0a5ae62e":"code","84c69e88":"code","4f759003":"code","b4d5cb20":"code","79caf4d3":"markdown","78e4ea05":"markdown"},"source":{"de9bab77":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\ntrain_data = pd.read_csv(\"..\/input\/train.csv\")\nprint(train_data.head())\npd.set_option('display.max_columns', None)\n\n# Any results you write to the current directory are saved as output.","6792d99b":"print(train_data.shape)","f4206217":"target = train_data[\"Category\"].unique()","78f080af":"print(target)","14ca3aed":"test_data = pd.read_csv(\"..\/input\/test.csv\")\nprint(test_data.head())","2ff6126a":"print(test_data.shape)","a6a2e958":"print(train_data.shape)","e64e677b":"data_dict = {}\ncount = 1\nfor data in target:\n    data_dict[data] = count\n    count = count + 1\ntrain_data[\"Category\"] = train_data[\"Category\"].replace(data_dict)","06b030e7":"print(train_data)","175d6e63":"data_week_dict= {\n    \"Monday\": 1,\n    \"Tuesday\":2,\n    \"Wednesday\":3,\n    \"Thursday\":4,\n    \"Friday\":5,\n    \"Saturday\":6,\n    \"Sunday\":7\n}\ntrain_data[\"DayOfWeek\"] = train_data[\"DayOfWeek\"].replace(data_week_dict)\ntest_data[\"DayOfWeek\"] = test_data[\"DayOfWeek\"].replace(data_week_dict)","92f9253d":"district = train_data[\"PdDistrict\"].unique()\ndata_dict_district = {}\ncount = 1\nfor data in district:\n    data_dict_district[data] = count\n    count+=1\ntrain_data[\"PdDistrict\"] = train_data[\"PdDistrict\"].replace(data_dict_district)\ntest_data[\"PdDistrict\"] = test_data[\"PdDistrict\"].replace(data_dict_district)\n\n","a69cb0c9":"print(train_data.head())","54d018d0":"columns_train = train_data.columns\nprint(columns_train)","41957330":"columns_test = test_data.columns\nprint(columns_test)","9cdef0cc":"cols = columns_train.drop(\"Resolution\")\nprint(cols)","3e2a7ca8":"train_data_new = train_data[cols]\nprint(train_data_new.head())","29ce7c84":"print(train_data_new.describe())","711013aa":"corr = train_data_new.corr()\nprint(corr[\"Category\"])","2ef0cf53":"skew = train_data_new.skew()\nprint(skew)","87f46374":"features = [\"DayOfWeek\", \"PdDistrict\", \"X\", \"Y\"]\nX_train = train_data[features]\ny_train = train_data[\"Category\"]\nX_test = test_data[features]","99419d20":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 5)\nknn.fit(X_train, y_train)\npredictions = knn.predict(X_test)","0a5ae62e":"from collections import OrderedDict\ndata_dict_new = OrderedDict(sorted(data_dict.items()))\nprint(data_dict_new)","84c69e88":"#print prediction\n\nresult_dataframe = pd.DataFrame({\n    \"Id\": test_data[\"Id\"]\n})\nfor key, value in data_dict_new.items():\n    result_dataframe[key] = 0\ncount = 0\nfor item in predictions:\n    for key,value in data_dict.items():\n        if(value == item):\n            result_dataframe[key][count] = 1\n    count = count + 1\nresult_dataframe.to_csv(\"submission_knn.csv\", index = False)","4f759003":"from sklearn.ensemble import RandomForestClassifier\nRF = RandomForestClassifier(n_estimators = 250, criterion = 'gini',max_depth = 10)\nRF.fit(X_train, y_train)\n#prediction\n\nRFpredictions = RF.predict(X_test)\n\n","b4d5cb20":"#print prediction\n\nresult_dataframe = pd.DataFrame({\n    \"Id\": test_data[\"Id\"]\n})\nfor key, value in data_dict_new.items():\n    result_dataframe[key] = 0\ncount = 0\nfor item in RFpredictions:\n    for key,value in data_dict.items():\n        if(value == item):\n            result_dataframe[key][count] = 1\n    count = count + 1\nresult_dataframe.to_csv(\"submission_RF_v2.csv\", index = False)","79caf4d3":"KNN Algorithm\n","78e4ea05":"Random Forest"}}