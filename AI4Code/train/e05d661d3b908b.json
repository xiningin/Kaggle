{"cell_type":{"2f653573":"code","b3ff7383":"code","0979db4f":"code","10195838":"code","483dbc3f":"code","4f070905":"code","e18ff3b0":"code","981acbe9":"code","afc42f78":"code","d3318928":"code","73ca424b":"code","0d945fc6":"code","e894b36a":"code","34c1b10b":"code","690a5839":"code","f60ee05b":"code","9cc78c5e":"code","a0a2014e":"code","517553a0":"code","a95570b8":"code","ebfc799c":"code","14d4d73d":"code","acf6874d":"code","890fdf4f":"code","fd7e6d52":"code","16b37662":"code","0f05fbc1":"code","58b9010a":"code","a878100b":"code","26bff583":"code","b3ee2728":"code","a4d554f8":"code","66dfe106":"code","e0976cdd":"code","5fb41fc3":"code","ddbe2a91":"code","2d2aee07":"code","6496c2ba":"code","736080e6":"code","0b785836":"code","822eb873":"code","92d57429":"code","19352f43":"code","900bbdba":"code","8a784082":"code","fa22f2ab":"code","896a05d9":"code","1690194d":"code","593a8e37":"code","441e4ffa":"code","1eefe812":"code","2608d622":"code","3760ef6e":"code","e73f1231":"code","3be7e8a9":"code","68558d92":"code","80ccbaf7":"code","f4ffa35c":"code","7c9c6285":"code","f34e9ea1":"code","374e5cdb":"code","f2a9fa9a":"code","e2cbf50b":"code","e30e3da0":"code","149a9d77":"code","29ec798b":"code","32c312df":"code","8a95b808":"code","00d7e561":"code","d103d7a7":"code","b6152a03":"code","592993eb":"code","ef2a703e":"code","03facfea":"code","5c5b926a":"code","9bb24760":"code","98f96ed0":"code","2a983326":"code","26a4c911":"code","e978b560":"code","0dcaddda":"code","e7982b2c":"code","c5bd0444":"code","93f24dfe":"code","82ff2a11":"code","26e58b08":"code","fd4dd5d5":"markdown","9182c543":"markdown","b9f7a105":"markdown","a96e6345":"markdown","0c25dedc":"markdown","6746e462":"markdown"},"source":{"2f653573":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b3ff7383":"df = pd.read_csv('..\/input\/iba-ml1-final-project\/train.csv')","0979db4f":"df.head() #checking columns","10195838":"df.shape ","483dbc3f":"for col in df:\n    print (col, df[col].dtypes) #checking if data has correct data types and numerical values are not object type","4f070905":"print(df.isnull().sum())","e18ff3b0":"newdf=df.dropna() #new dataset without rows with NA","981acbe9":"#newdf=newdf.drop(columns=['Id'])","afc42f78":"print(newdf.isnull().sum())","d3318928":"newdf","73ca424b":"correlation=newdf.corr(method='pearson')\nfig, ax = plt.subplots(figsize=(10,10))\nsns.heatmap(correlation, cmap='BuGn', xticklabels=True, yticklabels=True, annot=True)","0d945fc6":"from wordcloud import WordCloud","e894b36a":"full_text_review = '\\n'.join(newdf['Review']) #preparing data for wordcloud","34c1b10b":"full_text_review_title = '\\n'.join(newdf['Review_Title'])  #preparing data for wordcloud","690a5839":"plt.figure(figsize=(14, 10)) #checking wordcloud\nwc = WordCloud(background_color='white',\n               width=1280, height=720).generate(full_text_review)\nplt.imshow(wc, interpolation='bilinear')\nplt.show()","f60ee05b":"plt.figure(figsize=(14, 10)) #checking wordcloud\nwc = WordCloud(background_color='white',\n               width=1280, height=720).generate(full_text_review_title)\nplt.imshow(wc, interpolation='bilinear')\nplt.show()","9cc78c5e":"#X = newdf[['Review_Title','Review']]\nX = newdf['Review_Title']+' '+ newdf['Review'] #choosing data for training\ny = newdf[['Rating','Recommended']]\n#y = newdf['Rating']+' '+ newdf['Recommended']","a0a2014e":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8) ","517553a0":"from sklearn.feature_extraction.text import CountVectorizer","a95570b8":"X_train.dropna(inplace=True) #dropping NA data\nX_test.dropna(inplace=True)\ny_train.dropna(inplace=True)\ny_test.dropna(inplace=True)","ebfc799c":"vectorizer = CountVectorizer()","14d4d73d":"from imblearn.under_sampling import RandomUnderSampler","acf6874d":"#rus=RandomUnderSampler(random_state=42)\n#X_rus_train, y_rus_train = rus.fit_resample(X_train, y_train) ","890fdf4f":"from sklearn.pipeline import Pipeline\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif\nfrom sklearn.multioutput import MultiOutputClassifier\nfrom sklearn.svm import NuSVC\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.impute import SimpleImputer","fd7e6d52":"imp=SimpleImputer(strategy='most_frequent')","16b37662":"clf = Pipeline(steps=[  #model for predicting recommended column\n    ('vectorization', CountVectorizer( ngram_range=(1, 2))),\n    ('preprocessing', SimpleImputer()),\n    ('feature_selection', SelectKBest(f_classif, 10000)),\n    ('classification', DecisionTreeClassifier(max_depth=10))\n    #('classification', MultiOutputClassifier(DecisionTreeClassifier(max_depth=10)))\n    #('classification', OneVsRestClassifier(LinearSVC()))\n])","0f05fbc1":"clf.fit(X_train, y_train['Recommended'])","58b9010a":"predicted_redcom=clf.predict(X_test)","a878100b":"predicted_redcom","26bff583":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import roc_auc_score","b3ee2728":"accuracy_score(y_test['Recommended'], predicted_redcom)","a4d554f8":"roc_auc_score(y_test['Recommended'], predicted_redcom)","66dfe106":"from scipy import stats","e0976cdd":"stats.spearmanr(y_test['Recommended'],predicted_redcom, axis=None)","5fb41fc3":"predicted_redcomdf=pd.DataFrame(data=predicted_redcom)","ddbe2a91":"predicted_redcomdf.to_csv('submission recom Aghamir Aghazada.csv')","2d2aee07":"clf2 = Pipeline(steps=[  #model for predicting ratnig column\n    ('vectorization', CountVectorizer( ngram_range=(1, 2))),\n    ('preprocessing', SimpleImputer()),\n    ('feature_selection', SelectKBest(f_classif, 10000)),\n    ('classification', DecisionTreeClassifier(max_depth=10))\n    #('classification', MultiOutputClassifier(DecisionTreeClassifier(max_depth=10)))\n    #('classification', OneVsRestClassifier(LinearSVC()))\n])","6496c2ba":"clf2.fit(X_train, y_train['Rating'])","736080e6":"predicted_rating=clf2.predict(X_test)","0b785836":"predicted_ratingdf=pd.DataFrame(data=predicted_rating)","822eb873":"predicted_ratingdf.to_csv('submission rating Aghamir Aghazada.csv')","92d57429":"accuracy_score(y_test['Rating'], predicted_rating)","19352f43":"stats.spearmanr(y_test['Rating'],predicted_rating, axis=None)","900bbdba":"trainresults=pd.DataFrame({'Rating':predicted_rating, 'Recommended': predicted_redcom}) \ntrainresults","8a784082":"stats.spearmanr(y_test,trainresults, axis=None)","fa22f2ab":"testdata=pd.read_csv('..\/input\/iba-ml1-final-project\/test.csv')","896a05d9":"testX = testdata['Review_Title']+' '+ testdata['Review']","1690194d":"testX","593a8e37":"#testX=vectorizer.fit_transform(testX.values.astype('U'))","441e4ffa":"prediction=clf.predict(testX.values.astype('U'))\npredictiondf=pd.DataFrame(data=prediction)","1eefe812":"prediction2=clf2.predict(testX.values.astype('U'))\nprediction2df=pd.DataFrame(data=prediction2)","2608d622":"#testX=imp.fit_transform(testX)","3760ef6e":"testX","e73f1231":"#results=pd.concat([prediction2df,predictiondf], axis=1)\n#results.columns=['Rating','Recommended']\nresults=pd.DataFrame({'Id':testdata['Id'], 'Rating':prediction2, 'Recommended': prediction})\n#results.index.name = 'Id'\n#results.index += 1 ","3be7e8a9":"results.to_csv('Final submission 1 Aghamir Aghazada', index=False)","68558d92":"import numpy as np\n\nimport tensorflow_datasets as tfds\nimport tensorflow as tf\n\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.sequence import pad_sequences\n\nfrom imblearn.under_sampling import RandomUnderSampler \nfrom imblearn.over_sampling import RandomOverSampler\n\nfrom keras.optimizers import Adam\nfrom keras.regularizers import l1\nfrom keras.regularizers import l2\n\nfrom keras.layers.experimental.preprocessing import TextVectorization\nfrom keras.preprocessing.text import Tokenizer\n\nfrom collections import Counter\n\nfrom imblearn.under_sampling import RandomUnderSampler \nfrom imblearn.over_sampling import RandomOverSampler\n\nfrom scipy import stats\n\nfrom sklearn.metrics import roc_auc_score","80ccbaf7":"dataset=pd.read_csv('..\/input\/iba-ml1-final-project\/train.csv')","f4ffa35c":"newdf = dataset[['Review','Rating','Recommended']]\nnewdf['Review'] = newdf['Review'].str.lower()\nnewdf=newdf.dropna()\nnewdf=newdf.sample(frac=1) #shuffle data","7c9c6285":"Counter(newdf['Recommended']) #data imbalanced. we have a lot of positive reviews and few negative.","f34e9ea1":"X, y = (newdf['Review'].values, newdf['Recommended'].values)","374e5cdb":"tk = Tokenizer()\ntk.fit_on_texts(X)\nX_seq = tk.texts_to_sequences(X)\nX_pad = pad_sequences(X_seq, maxlen=100, padding='post')","f2a9fa9a":"X_train, X_test, y_train, y_test = train_test_split(X_pad, y, test_size = 0.15, random_state = 42)","e2cbf50b":"rs = RandomOverSampler()","e30e3da0":"X_train, y_train = rs.fit_resample(X_train, y_train)","149a9d77":"batch_size = 64\nX_train1 = X_train[batch_size:]\ny_train1 = y_train[batch_size:]\nX_valid = X_train[:batch_size]\ny_valid = y_train[:batch_size]","29ec798b":"from keras.models import Sequential\nfrom keras.layers import Embedding, LSTM, Dense, Dropout\n\nvocabulary_size = len(tk.word_counts.keys())+1\nmax_words = 1500\n\nembedding_size = 32\nmodel = Sequential()\nmodel.add(Embedding(vocabulary_size, embedding_size, input_length=max_words))\nmodel.add(LSTM(200))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","32c312df":"model.fit(X_train1, y_train1, validation_data=(X_valid, y_valid), batch_size=batch_size, epochs=10)","8a95b808":"check_predict = model.predict_classes(X_test, verbose = 0)","00d7e561":"check_predict=check_predict.ravel()","d103d7a7":"spear1=stats.spearmanr(y_test, check_predict, axis=None)\nspear1","b6152a03":"y2 = newdf['Rating'].values","592993eb":"Counter(newdf['Rating']) #data imbalanced. we have a lot of positive reviews and few negative.","ef2a703e":"X_train, X_test, y_train, y_test = train_test_split(X_pad, y2, test_size = 0.15, random_state = 42)","03facfea":"X_train, y_train = rs.fit_resample(X_train, y_train)","5c5b926a":"Counter(y_train)","9bb24760":"batch_size = 32\nX_train1 = X_train[batch_size:]\ny_train1 = y_train[batch_size:]\nX_valid = X_train[:batch_size]\ny_valid = y_train[:batch_size]","98f96ed0":"vocabulary_size = len(tk.word_counts.keys())+1\nmax_words = 1500\nopt= Adam(lr=0.001)\n\n\nembedding_size = 64\nmodel2 = Sequential()\nmodel2.add(Embedding(vocabulary_size, embedding_size, input_length=max_words))\nmodel2.add(LSTM(300))\nmodel2.add(Dense(6, activation='softmax'))\nmodel2.compile(loss='sparse_categorical_crossentropy', optimizer=opt, metrics=['categorical_accuracy'])","2a983326":"model2.fit(X_train1, y_train1, validation_data=(X_valid, y_valid), batch_size=batch_size, epochs=10)","26a4c911":"check_predict2 = model2.predict_classes(X_test, verbose = 0)","e978b560":"spear2=stats.spearmanr(y_test, check_predict2, axis=None)\nspear2","0dcaddda":"meanspear=(spear1[0]+spear2[0])\/2\nmeanspear","e7982b2c":"test_data=pd.read_csv('..\/input\/iba-ml1-final-project\/test.csv')\ntest_data=test_data.astype(str)\ntest_data","c5bd0444":"test_review = test_data['Review'].dropna()\ntest_review = tk.texts_to_sequences(test_data['Review'])\ntest_review = pad_sequences(test_review)\nX_pad = pad_sequences(test_review, maxlen=100, padding='post')","93f24dfe":"recommended_column=model.predict_classes(test_review)\nrating_column=model2.predict_classes(test_review)","82ff2a11":"rec_column=recommended_column.ravel()","26e58b08":"results=pd.DataFrame({'Id':test_data['Id'], 'Rating':rating_column, 'Recommended': rec_column})\nresults.to_csv('Final submission 20 Aghamir Aghazada', index=False)","fd4dd5d5":"RandomUnder and Over Samplers did not improve the results. The results actually decreased in this case.","9182c543":"Looking for correlation between numerical data. As expected the only correlation is between Rating and Recommended columns since one leads to another. ","b9f7a105":"There is significant amount missing values in Review Titles (~ 16% of column) and  some in Review (~ 3%). Number ofmissing values in rest of columns is insignificant","a96e6345":"## RNN model implementation","0c25dedc":"Majority of words in wordcloud are useful words not having many useless words that are not describing the product","6746e462":"## Bag of Words demonstrated better results than RNN based model. The models are overfitting. Adding additional layer to NN did not lead to better results. Additional data might lead to better results.  "}}