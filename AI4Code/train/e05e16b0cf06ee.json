{"cell_type":{"3775d7d8":"code","39ba234f":"code","01e972ca":"code","d63e96c8":"code","19c24e4c":"code","63d6062d":"code","12441869":"code","093aa056":"code","9904dde6":"code","6a81808b":"code","beaee2cf":"code","7c26c220":"code","d36da2e7":"code","6c850443":"code","8db090c8":"code","e710013d":"code","3cbdffd2":"code","a80b6b10":"code","a18ef263":"code","86defb8e":"code","a2bcac51":"code","00f43f2c":"code","7233bfd7":"code","03bca9b6":"code","75777b3a":"code","e462e2c2":"code","a7a0fa5f":"code","bd4bc247":"code","ad8d35fe":"code","357ba312":"code","411b7ddb":"code","95d66c7f":"code","bf0443c7":"code","3d215544":"code","a4aa97e8":"code","ecd5aeed":"code","b90ac542":"code","2025bddc":"code","71f286b9":"code","3112fdf3":"code","34596b8a":"code","069f569e":"code","bd27249a":"code","77626a1a":"code","f12c9f76":"code","d7634e61":"code","ca94945b":"code","ede0215a":"code","1334b29f":"code","31e93e8d":"code","0238e630":"code","66472234":"code","969b8d28":"code","8cf80841":"code","cb5f8856":"code","1f69d47b":"code","968df7df":"code","051097e8":"code","378f5cb7":"code","ce042d8a":"code","973a6b73":"code","9b5431d2":"code","773c5123":"code","96348d6e":"code","e87d06de":"code","3102085b":"code","40dd08a5":"code","30ac44af":"code","b03dff0a":"code","9b246002":"code","c5e7266a":"code","1bf0f02a":"code","9478c5c2":"code","5093dfff":"code","0ed82a55":"code","3282d86c":"code","3120911e":"code","3df904ad":"code","fd1ee96d":"code","5bc145cb":"code","62880878":"code","895e4e24":"code","8af71fbf":"code","49c9e4f1":"code","bea90044":"code","1588be99":"code","c15f4719":"code","cf5b0538":"markdown","188db5c6":"markdown","435276df":"markdown","37b57bef":"markdown","60774ba1":"markdown","9e4bd45e":"markdown","42ab8083":"markdown","90c58bf9":"markdown","22f4e330":"markdown","2cf95e5e":"markdown","b01205ad":"markdown","de13f945":"markdown","cab4fa89":"markdown"},"source":{"3775d7d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","39ba234f":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import pipeline\nfrom sklearn.metrics import mean_squared_error as MSE\n\n# Pandas Profiling package\nfrom pandas_profiling import ProfileReport\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","01e972ca":"from keras import optimizers\nfrom keras.utils import plot_model\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, LSTM, RepeatVector, TimeDistributed, Dropout, Flatten\nfrom keras.layers.convolutional import Conv1D, Conv2D","d63e96c8":"df_train = pd.read_csv(\"..\/input\/segmind-grand-ai-challenge-2021\/TRAIN.csv\")\ndf_store = pd.read_csv(\"..\/input\/segmind-grand-ai-challenge-2021\/store.csv\")","19c24e4c":"train_profile = ProfileReport(\n    df_train, title=\"Training Dataset\", html={\"style\": {\"full_width\": True}}, sort=\"None\"\n)","63d6062d":"train_profile","12441869":"store_profile = ProfileReport(\n    df_store, title=\"Test Dataset\", html={\"style\": {\"full_width\": True}}, sort=\"None\"\n)","093aa056":"df_train.head()\n#print(df_train.shape)","9904dde6":"df_train.info()","6a81808b":"df_train[\"Store\"].value_counts()","beaee2cf":"plt.figure(figsize = (12, 4))\nsns.countplot(x = 'DayOfWeek', data = df_train, palette='rainbow')    #df_train['DayOfWeek'].value_counts()\nplt.title(\"Distribution among Day of weeks\")\nplt.show()","7c26c220":"df_train[\"Date\"] = pd.to_datetime(df_train[\"Date\"])\ndf_train.head()","d36da2e7":"train_gp = df_train.groupby('Store')","6c850443":"idx = 1\nstore = train_gp.get_group(idx)\nstore.sort_values(by = 'Date', inplace = True)\nstore.head()","8db090c8":"st = 6\nplt.figure(figsize = (20, 4))\nplt.plot(df_train[df_train['Store'] == st][\"Date\"], df_train[df_train['Store'] == st][\"Sales\"])\nplt.show()","e710013d":"plt.figure(figsize = (15, 5))\n\nplt.subplot(121)\nsns.countplot(x = 'Open', data = df_train, palette='rainbow')    #df_train['DayOfWeek'].value_counts()\n\nplt.subplot(122)\nsns.countplot(x = 'Open', hue = 'DayOfWeek', data = df_train, palette = \"Set3\")\n\nplt.show()","3cbdffd2":"plt.figure(figsize = (15, 5))\n\nplt.subplot(121)\nsns.countplot(x = 'Promo', data = df_train, palette='rainbow')    #df_train['DayOfWeek'].value_counts()\n\nplt.subplot(122)\nsns.countplot(x = 'Promo', hue = 'DayOfWeek', data = df_train, palette = \"Set3\")\n\nplt.show()","a80b6b10":"df_train['StateHoliday'][df_train['StateHoliday'] == 0] = '0'\ndf_train['StateHoliday'].value_counts()","a18ef263":"state_holiday_encoder = LabelEncoder()\ndf_train['StateHoliday'] = state_holiday_encoder.fit_transform(df_train['StateHoliday'])","86defb8e":"state_holiday_encoder.classes_","a2bcac51":"plt.figure(figsize = (15, 5))\n\nplt.subplot(121)\nsns.countplot(x = 'StateHoliday', data = df_train, palette='rainbow')   \n\nplt.subplot(122)\nsns.countplot(x = 'StateHoliday', hue = 'DayOfWeek', data = df_train, palette = \"RdGy\")\n\nplt.show()","00f43f2c":"plt.figure(figsize = (15, 5))\n\nplt.subplot(121)\nsns.countplot(x = 'SchoolHoliday', data = df_train, palette='rainbow')   \n\nplt.subplot(122)\nsns.countplot(x = 'SchoolHoliday', hue = 'DayOfWeek', data = df_train, palette = \"Set3\")\n\nplt.show()","7233bfd7":"plt.figure(figsize = (8, 6))\nsns.heatmap(df_train.corr(), annot=True, cmap=\"RdYlGn\", fmt = \"0.4f\")\nplt.show()","03bca9b6":"df_store.head()\n#print(df_store.shape)","75777b3a":"df_store['Store'].value_counts()","e462e2c2":"df_store.info()","a7a0fa5f":"df_store['StoreType'].value_counts()","bd4bc247":"df_store['Assortment'].value_counts()","ad8d35fe":"df_store['Promo2'].value_counts()","357ba312":"df = pd.merge(df_train, df_store, how = 'left', left_on = 'Store', right_on = 'Store')\ndf.head()","411b7ddb":"input_cols = ['Store', 'DayOfWeek', 'Date', 'Open', 'Promo',\n       'StateHoliday', 'SchoolHoliday', 'StoreType', 'Assortment', 'Promo2', \n             'CompetitionDistance']\ntarget_cols = ['Sales']\ndf_new = df[input_cols + target_cols]\ndf_new.head()","95d66c7f":"# Now, I am using DateTime so this will not work\n#df_new['Year'] = df_new['Date'].apply(lambda x: int(x.split('-')[0]))\n#df_new['Month'] = df_new['Date'].apply(lambda x: int(x.split('-')[1]))\n#df_new['Day'] = df_new['Date'].apply(lambda x: int(x.split('-')[2]))","bf0443c7":"#df_new.drop(columns='Date', inplace = True)\ndf_new.head()","3d215544":"store_type_encoder = LabelEncoder()\nassortment = LabelEncoder()\n\ndf_new['StoreType'] = store_type_encoder.fit_transform(df_new['StoreType'])\ndf_new['Assortment'] = assortment.fit_transform(df_new['Assortment'])","a4aa97e8":"df_new.head()","ecd5aeed":"print(len(df_new[df_new['CompetitionDistance'].isnull()]))\ndf_new = df_new.dropna()\n\nprint(len(df_new))","b90ac542":"plt.figure(figsize = (14, 8))\nsns.heatmap(df_new.corr(), annot=True, cmap=\"YlGnBu\", fmt = \"0.4f\")\nplt.show()","2025bddc":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX = scaler.fit_transform(df_new.drop(columns = ['Sales', 'Date']))","71f286b9":"X.shape","3112fdf3":"x_train, x_test, y_train, y_test = train_test_split(X, np.asarray(df_new['Sales']), test_size= 0.3) \n\nprint(x_train.shape)\nprint(x_test.shape)","34596b8a":"from sklearn.tree import DecisionTreeRegressor\nRegressor = DecisionTreeRegressor(criterion='mse')","069f569e":"Regressor.fit(x_train, y_train)","bd27249a":"Regressor.score(x_test, y_test)","77626a1a":"pred_dt = Regressor.predict(x_test)\n# RMSE Computation\nrmse = np.sqrt(MSE(y_test, pred_dt))\nprint(\"RMSE : % f\" %(rmse))","f12c9f76":"sns.displot(y_test - pred_dt)\nplt.show()","d7634e61":"plt.scatter(y_test, pred_dt, alpha = 0.5)\nplt.xlabel(\"y_test\")\nplt.ylabel(\"y_pred\")\nplt.show()","ca94945b":"from sklearn.ensemble import RandomForestRegressor\nregr = RandomForestRegressor(random_state=0, verbose=1, n_jobs=5)","ede0215a":"#pd.DataFrame(x_train).describe()","1334b29f":"#regr.fit(x_train, y_train)\nregr.fit(X, df_new['Sales'].values)","31e93e8d":"regr.score(x_test, y_test)","0238e630":"pred_rf = regr.predict(x_test)\n\n# RMSE Computation\nrmse = np.sqrt(MSE(y_test, pred_rf))\nprint(\"RMSE : % f\" %(rmse))","66472234":"import xgboost as xg","969b8d28":"xgb_r = xg.XGBRegressor(objective ='reg:linear',\n                  n_estimators = 50, seed = 123)","8cf80841":"xgb_r.fit(x_train, y_train, verbose=1)","cb5f8856":"# Predict the model\npred_xgbr = xgb_r.predict(x_test)\n  \n# RMSE Computation\nrmse = np.sqrt(MSE(y_test, pred_xgbr))\nprint(\"RMSE : % f\" %(rmse))","1f69d47b":"from tensorflow import keras\nfrom keras import layers","968df7df":"model = keras.Sequential()\n\nmodel.add(layers.Dense(26, activation = 'relu', input_shape = (x_train.shape[1], ))),\nmodel.add(layers.BatchNormalization()),\nmodel.add(layers.Dense(45, activation = 'relu')),\nmodel.add(layers.BatchNormalization()),\nmodel.add(layers.Dropout(0.2)),\nmodel.add(layers.Dense(100, activation = 'relu')),\nmodel.add(layers.BatchNormalization()),\nmodel.add(layers.Dropout(0.2)),\nmodel.add(layers.Dense(50, activation = 'relu')),\nmodel.add(layers.BatchNormalization()),\nmodel.add(layers.Dropout(0.2)),\nmodel.add(layers.Dense(20, activation = 'relu')),\nmodel.add(layers.BatchNormalization()),\nmodel.add(layers.Dropout(0.2)),\nmodel.add(layers.Dense(10, activation = 'relu')),\nmodel.add(layers.Dense(1, activation = 'linear')),\n\nmodel.summary()","051097e8":"model.compile(loss = 'mse',\n              optimizer = 'adam',\n             metrics = ['mse'])\n\nhistory = model.fit(X, df_new['Sales'], verbose= 1, epochs = 10, batch_size = 256, \n                    validation_split = 0.2, shuffle= True, use_multiprocessing= True)","378f5cb7":"pred_rf = model.predict(x_test)\n\n# RMSE Computation\nrmse = np.sqrt(MSE(y_test, pred_rf))\nprint(\"RMSE : % f\" %(rmse))","ce042d8a":"import h2o\nfrom h2o.automl import H2OAutoML","973a6b73":"h2o.init(\n    nthreads=-1,     # number of threads when launching a new H2O server\n    max_mem_size=12  # in gigabytes\n\n)","9b5431d2":"train = h2o.H2OFrame(df_new)\n#test = h2o.H2OFrame(x_test)","773c5123":"x = train.columns\ny = \"Sales\"\nx.remove(y)","96348d6e":"aml = H2OAutoML(max_models=2, seed=1)\naml.train(x=x, y=y, training_frame=train)","e87d06de":"lb = aml.leaderboard\nlb.head(rows=lb.nrows)","3102085b":"model_lstm = Sequential()\nmodel_lstm.add(LSTM(units = 64, input_shape = (None, x_train.shape[1])))\nmodel_lstm.add(Dropout(0.4))\nmodel_lstm.add(Dense(1))\n\nmodel_lstm.compile(loss = 'mse',optimizer = 'adam', metrics = ['mean_squared_error'])\nmodel_lstm.summary()","40dd08a5":"plot_model(model_lstm)","30ac44af":"x_train = X\ny_train = np.asarray(df_new['Sales']).reshape((len(df_new), 1))\n\nprint(x_train.shape, y_train.shape)","b03dff0a":"#history_lstm = model_lstm.fit(x_train,y_train,batch_size = 4096,epochs = 10)","9b246002":"from sklearn.linear_model import LinearRegression, ElasticNet, Lasso, Ridge, HuberRegressor, LogisticRegression, BayesianRidge\nfrom sklearn.tree import DecisionTreeRegressor, ExtraTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor, VotingRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error","c5e7266a":"models = [['LinearRegression : ', LinearRegression()],\n          ['Lasso : ', Lasso()],\n          ['Ridge : ', Ridge()],\n          ['KNeighborsRegressor : ', KNeighborsRegressor()],\n          ['DecisionTreeRegressor : ', DecisionTreeRegressor()],\n          ['RandomForestRegressor : ', RandomForestRegressor()],\n          ['AdaBoostRegressor : ', AdaBoostRegressor()],\n          ['GradientBoostingRegressor : ', GradientBoostingRegressor()],\n          ['ExtraTreeRegressor : ', ExtraTreeRegressor()],\n          ['HuberRegressor : ', HuberRegressor()],\n          ['XGBRegressor : ', XGBRegressor()],\n          ['BayesianRidge : ', BayesianRidge()]]","1bf0f02a":"for name, model in models:\n    model=model\n    model.fit(x_train, y_train)\n    predictions = model.predict(x_test)\n    print(name, (np.sqrt(mean_squared_error(y_test, predictions))))","9478c5c2":"from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score, RandomizedSearchCV","5093dfff":"algorithms = {\n    'XGBRegressor' : {\n        'model' : XGBRegressor(),\n        'param' : {\n            'learning_rate' : [0.5, 0.8, 0.1, 0.20, 0.25, 0.30],\n            'max_depth' : [3, 5, 7, 9, 11, 13, 15],\n            'gamma' : [0.1,0.2, 0.3, 0.4, 0.5],\n            'min_child_weight' : [1, 3, 5, 7, 9],\n            'colsample_bytree' : [0.5, 0.8, 0.1, 0.20, 0.25, 0.30]\n        }\n    },\n    'RandomForestRegressor' : {\n        'model' : RandomForestRegressor(),\n        'param' : {\n            'n_estimators' : [300, 500, 700, 1000, 2100],\n            'max_depth' : [3, 5, 7, 9, 11, 13, 15],\n            'max_features' : [\"auto\", \"sqrt\", \"log2\"],\n            'min_samples_split' : [2, 4, 6, 8]\n        }\n    },\n    'GradientBoostingRegressor' : {\n        'model' : GradientBoostingRegressor(),\n        'param' : {\n            'learning_rate' : [0.5, 0.8, 0.1, 0.20, 0.25, 0.30],\n            'n_estimators' : [300, 500, 700, 1000, 2100],\n            'criterion' : ['friedman_mse', 'mse']\n        }\n    }\n}","0ed82a55":"score = []\n\nfor name, mp in algorithms.items() :\n    rs = RandomizedSearchCV(estimator = mp['model'], param_distributions = mp['param'], cv = 10, n_jobs=-1, verbose=3)\n    rs.fit(x_train, y_train)\n    score.append({\n        'model': name,\n        'score' : rs.best_score_,\n        'params' : rs.best_params_\n    })","3282d86c":"score","3120911e":"df_test = pd.read_csv(\"..\/input\/segmind-grand-ai-challenge-2021\/TEST.csv\")\ndf_test.head()","3df904ad":"test_df = pd.merge(df_test, df_store, how = 'left', left_on = 'Store', right_on = 'Store')\ntest_df.head()","fd1ee96d":"test_df = test_df[input_cols]\ntest_df.head()","5bc145cb":"test_df['Year'] = test_df['Date'].apply(lambda x: int(x.split('-')[0]))\ntest_df['Month'] = test_df['Date'].apply(lambda x: int(x.split('-')[1]))\ntest_df['Day'] = test_df['Date'].apply(lambda x: int(x.split('-')[2]))\ntest_df.drop(columns='Date', inplace = True)\n\ntest_df.head()","62880878":"test_df['StoreType'] = store_type_encoder.transform(test_df['StoreType'])\ntest_df['Assortment'] = assortment.transform(test_df['Assortment'])\ntest_df['StateHoliday'] = state_holiday_encoder.transform(test_df['StateHoliday'])\ntest_df['CompetitionDistance'].fillna(test_df['CompetitionDistance'].mean(), inplace = True)\n\ntest_X = scaler.transform(test_df)","895e4e24":"test_df.describe()","8af71fbf":"pred = regr.predict(test_X)\n#pred","49c9e4f1":"sub1 = pd.DataFrame(pred)\nsub1 = sub1.reset_index()","bea90044":"#sub1['Index'] = sub1['Index'] - 1\nsub1 = sub1.rename(columns={\"index\": \"Index\", 0: \"Sales\"})\nsub1.head()\n\nsub1.to_csv('sub_v4.csv', header = True, index=False)","1588be99":"sub_979 = pd.read_csv(\".\/sub_v4.csv\")\nsub_979.head()","c15f4719":"print(\"MSE: \", (((sub_979['Sales'] - sub1['Sales']))))","cf5b0538":"### **Neural Network**","188db5c6":"### **Model Comparision**","435276df":"### **Pandas Profiling**","37b57bef":"### **Data Pre-processing**","60774ba1":"### **Decision Tree Regressor**","9e4bd45e":"### **RandomForest**","42ab8083":"### **Split data into train and test data**","90c58bf9":"### **LSTM**","22f4e330":"### **EDA on train.csv**","2cf95e5e":"### **AutoML**\n\nLet's see the power of autoML","b01205ad":"### **EDA on store.csv**","de13f945":"### **XGBoost**","cab4fa89":"### **Submission File**"}}