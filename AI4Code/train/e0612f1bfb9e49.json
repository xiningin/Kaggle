{"cell_type":{"11f1da22":"code","f7a69277":"code","6c81932f":"code","025d08ca":"code","f8c03ded":"code","36f6c18f":"code","2f7c2092":"code","e7c301a7":"code","986b2423":"code","fa78e797":"code","001c1a81":"code","20cd93fd":"code","3568f10b":"code","4ca22234":"code","d6808404":"code","3f95a535":"code","944d828f":"code","576757bf":"code","5fe38ef6":"code","a56c6047":"code","f7a132d9":"code","1934fd49":"code","7bbd7e29":"code","32db73b6":"code","a2ebaf78":"code","da80307e":"code","7f416e1c":"code","5b252dd2":"code","0d626955":"code","590fb70f":"code","bcfc24d8":"code","aa3a9206":"code","de30e4ed":"code","0142715b":"code","288e631d":"code","5c919f9c":"code","c06e50c3":"code","6f603917":"code","4e3f7a3d":"code","ac791c14":"code","4f218b14":"markdown","c630bf72":"markdown","f51dabc9":"markdown","29bec035":"markdown","0d444d3e":"markdown","9852785b":"markdown","8a440b09":"markdown","c1179f9e":"markdown","8f092f6b":"markdown","3ce7755a":"markdown","52be174c":"markdown","a0da6a90":"markdown","0b97d9f7":"markdown","fc002d3a":"markdown","21874bf9":"markdown","1e53e740":"markdown","95d39914":"markdown","fad123e8":"markdown","4add0ae7":"markdown","7e9a5876":"markdown","86e25ca8":"markdown"},"source":{"11f1da22":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport xlrd\n\npd.set_option(\"display.max.columns\", None)\nsns.set_style(\"whitegrid\")\n \n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7a69277":"df_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","6c81932f":"df_train.head()","025d08ca":"def woman_child_or_man(passenger):\n    age, sex = passenger\n    if age < 16:\n        return \"child\"\n    else:\n        return dict(male=\"man\", female=\"woman\")[sex]","f8c03ded":"df_train[\"Class\"] = df_train.Pclass.map({1: \"First\", 2: \"Second\", 3: \"Third\"})\ndf_train[\"Who\"] = df_train[[\"Age\", \"Sex\"]].apply(woman_child_or_man, axis=1)\ndf_train[\"Adult_male\"] = df_train.Who == \"man\"\ndf_train[\"Deck\"] = df_train.Cabin.str[0].map(lambda s: \"np.nan\" if s == \"T\" else s)\ndf_train[\"Embark_town\"] = df_train.Embarked.map({\"C\": \"Cherbourg\", \"Q\": \"Queenstown\", \"S\": \"Southampton\"})\ndf_train[\"Alive\"] = df_train.Survived.map({0: \"no\", 1: \"yes\"})\ndf_train[\"Alone\"] = ~(df_train.Parch + df_train.SibSp).astype(bool)\n\n#df_train = df_train.drop([\"Name\", \"Ticket\", \"Cabin\"], axis=1)","36f6c18f":"df_test[\"Class\"] = df_test.Pclass.map({1: \"First\", 2: \"Second\", 3: \"Third\"})\ndf_test[\"Who\"] = df_test[[\"Age\", \"Sex\"]].apply(woman_child_or_man, axis=1)\ndf_test[\"Adult_male\"] = df_test.Who == \"man\"\ndf_test[\"Deck\"] = df_test.Cabin.str[0].map(lambda s: \"np.nan\" if s == \"T\" else s)\ndf_test[\"Embark_town\"] = df_test.Embarked.map({\"C\": \"Cherbourg\", \"Q\": \"Queenstown\", \"S\": \"Southampton\"})\ndf_test[\"Alone\"] = ~(df_test.Parch + df_train.SibSp).astype(bool)\n\n#df_train = df_train.drop([\"Name\", \"Ticket\", \"Cabin\"], axis=1)","2f7c2092":"df_train.sample(n=5).head(5)","e7c301a7":"columns = [\"Survived\", \"Class\", \"Who\", \"Alive\", \"Embark_town\", \"Deck\"]\n\nfor column in columns:\n           df_train[column] = df_train[column].astype('category')","986b2423":"matrix_train_pps = pps.matrix(train_pps)[['x','y','ppscore']].pivot(columns='x',index='y', values='ppscore')","fa78e797":"colorMap = sns.color_palette(\"plasma\", n_colors=5)\nplt.figure(figsize = (16,5))\nsns.heatmap(matrix_train_pps, vmin=0, vmax=1,cmap=colorMap ,linewidths=0.5,annot=True)","001c1a81":"col = df_train.columns\nprint(df_train[col[0:11]])\n\npps.score(df_train, \"Class\",\"Alive\")\n\ntrain_pps = df_train[col[0:11]]\npps.matrix(train_pps)","20cd93fd":"ax = sns.catplot(data=df_train,\n            x=\"Class\", \n            col = 'Alive',\n            sharex=False, sharey=True,\n            hue=\"Who\", \n            kind = 'count', \n            palette='colorblind',\n            col_order = [\"yes\",\"no\"])\nax.fig.suptitle('Who survived?', y=1.05)\nplt.show()","3568f10b":"pd.crosstab(index=[df_train.Alive,df_train.Class],\n                  columns=df_train.Who,\n                  values=df_train.Who,\n                  normalize = False,\n                  margins = False,\n                  aggfunc = \"count\").fillna(0)","4ca22234":"print(\"Percentage of Who survived, grouped by class, survival and gender.\")\npd.crosstab(index=[df_train.Alive,df_train.Class],\n                  columns=df_train.Who,\n                  values=df_train.Who,\n                  normalize = True,\n                  margins = True, \n                  aggfunc = \"count\").round(4)*100","d6808404":"df_train[[\"Alive\",\"Class\",\"Who\"]].groupby([\"Alive\",\"Class\"]).count()","3f95a535":"pd.pivot_table(df_train,values = \"Survived\",index = [\"Pclass\",\"Who\"],columns = [\"Alive\"],aggfunc=\"count\",margins=True)","944d828f":"df_train.dtypes","576757bf":"df_train.describe(include = \"category\")","5fe38ef6":"df_train.describe(include = \"all\")","a56c6047":"for column in df_train.columns:\n    print(column, len(df_train[column].dropna().unique()))","f7a132d9":"print(\"df_test shape: \")\nprint(df_test.shape)\n\nprint(\"df_train shape: \")\nprint(df_train.shape)","1934fd49":"df_train.columns","7bbd7e29":"df_test.columns","32db73b6":"# Create a list of test and train\ndf_list = [df_test, df_train.drop(columns=['Survived'])]\n\n\n# Concatenate\ndf_combined = pd.concat(df_list, axis = 0)","a2ebaf78":"df_combined.shape[0]\n\nsurvived = 1502\nall_passengers = 2224\ndied = all_passengers - survived\n\nhistorical_data_list = [[0, survived], [1,died]]\n    \nhistorical_data = pd.DataFrame(historical_data_list, columns =['Survived','Total']) \n\n#print(historical_data)\n\nprint(\"Amount of passengers on Titanic: %d\" % (sum(historical_data[\"Total\"])))\nprint(\"Amount of passengers in Datasets: %d\" % (df_train.shape[0] + df_test.shape[0]))\n\nprint(\"\\nThe difference between the real amount of passengers compared \\nto the amount of passenger in the test and training set is %d\" % (all_passengers-df_combined.shape[0])) ","da80307e":"print(\"\\n\" + \"Info of Train Data\" + \"\\n\" + \"_\"*80)\ndf_train.info()\n\nprint(\"\\n\" + \"Any missing value?\" + \"\\n\" + \"_\"*80)\n\nprint(df_train.isnull().values.any())\n\nprint(\"\\n\" + \"Where are the missing values?\" + \"\\n\" + \"_\"*80)\nprint(df_train.isnull().sum())","7f416e1c":"print(\"\\n\" + \"Info of Test Data\" + \"\\n\" + \"_\"*80)\ndf_test.info()\n\nprint(\"\\n\" + \"Any missing value?\" + \"\\n\" + \"_\"*80)\n\nprint(df_test.isnull().values.any())\n\nprint(\"\\n\" + \"Where are the missing values?\" + \"\\n\" + \"_\"*80)\nprint(df_test.isnull().sum())","5b252dd2":"#df_train = df_train.drop([\"Name\", \"Ticket\", \"Cabin\"], axis=1)","0d626955":"df_train.columns","590fb70f":"pal = \"Colorblind\"","bcfc24d8":"g = sns.catplot(\"Who\", col=\"Pclass\", col_wrap=3,\n                data=df_train,\n                kind=\"count\", height=5, aspect=.5, palette = \"colorblind\")","aa3a9206":"sns.catplot(x = \"Adult_male\",kind = \"count\",hue = \"Survived\", data=df_train, palette=\"colorblind\",col=\"Class\");","de30e4ed":"import plotly.express as px\n\nfig = px.histogram(df_train, x=\"Who\", color=\"Who\", facet_row=\"Class\", facet_col=\"Alive\",\n                  category_orders={\"Alive\": [\"yes\", \"no\"], \"Class\": [\"First\", \"Second\", \"Third\"]})\nfig.show()","0142715b":"g = sns.FacetGrid(df_train, col='Class',row=\"Alive\")\ng = g.map(sns.distplot, \"Age\",bins=5)","288e631d":"fig = px.histogram(df_train, x=\"Class\", y=\"Age\", color=\"Who\",\n                   marginal=\"violin\", # or violin, rug\n                   hover_data=df_train.columns)\nfig.show()","5c919f9c":"sns.catplot(x = \"Who\",kind = \"count\",hue = \"Survived\", data=df_train, palette=\"plasma\",col=\"Pclass\");","c06e50c3":"g = sns.FacetGrid(df_train, row='Class',col=\"Survived\")\ng = g.map(sns.distplot, \"Age\",bins=5)","6f603917":"sns.violinplot(x=\"Class\", y=\"Age\", hue=\"Sex\", data=df_train, split=True, inner = \"quartile\").set_title(\"Age Distribution in class\",y=1.07)\nplt.hlines([0,16], xmin=-1, xmax=3, linestyles=\"dotted\")\n","4e3f7a3d":"sns.violinplot(x=\"Class\", y=\"Fare\", hue=\"Sex\", data=df_train, split=True, inner = \"quartile\").set_title(\"Fare Distribution in class\",y=1.07)\nplt.hlines([0,16], xmin=-1, xmax=3, linestyles=\"dotted\")\n","ac791c14":"g = sns.catplot(\"Alive\", col=\"Deck\",col_wrap=4,\n                data=df_train[df_train.Deck.notnull()],\n                kind=\"count\", height=2.5, aspect=.8)","4f218b14":"### groupby","c630bf72":"### How many unique values per feature?\n\ningnoring Nulls","f51dabc9":"# NOTE:\nMy focus in this playground lies in following areas:\n\nUNDERSTANDING\n* crosstab\n* pivot\n* pivot_table\n* groupby\n* value_counts\n\n\nFEATURE ENGINEERING\n* map, apply, etc.\n* missing values\n\nVISUALISATION\n* python modules (seaborn, plotly)\n* Correlation Plot\n* Predictive Power Score (in a different channel)\n* Tableau(in a different channel)\n","29bec035":"### crosstab","0d444d3e":"# Predictive Power Score","9852785b":"# OUTLINE\n<font color='gray'><em>Note: Hi there, this is a work in progress with a focus on EDA and visualisation.<\/em><\/font>\n\n* PROBLEM DEFINITION\n * [x] The Brief: Question or problem definition\n * [X] Frame the problem space into the right context\n * [x] Load Data and Modules\n* EXPLORE & UNDERSTAND (EDA)\n * [x] Conjectures and observation\n * [x] Feature engineering\n * [ ] Missing values \n* TRAIN THE MACHINE\n * [ ] Select the right features and algorithm\n * [ ] Let's save some time with AutoML\n* PREDICT\n * [ ] Deploy \n * [ ] Preparing our prediction for submission ","8a440b09":"### Who survived, grouped by class, survival and gender.","c1179f9e":"## The Brief: Question or problem definition\n\n**The competition is simple: use machine learning to create a model that predicts which passengers survived the Titanic shipwreck.**\n\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the **death of 1502 out of 2224 passengers and crew**.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\n**In this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).**","8f092f6b":"## Feature engineering","3ce7755a":"In our data we have 915 less passengers, than there were in reality.","52be174c":"## Frame the problem space into the right context\n\nTo the time of the TITANIC disaster there were some common habits:\n\n**Standard procedures:**\n* Evacuate women and children first, in a later stage men can be evacuated, too.\n * <font color='gray'><em> Note: In other words it was talked about \"masculine sacrifce\" <\/em><\/font>\n* Lower decks were evacuated through a different way from a lower gangway. That is why there are not many staircases that conncect lower decks to upper decks. Because there was a different route in emergency.\n * <font color='gray'><em> Note: In other words it was talked about \"class discrimination\" <\/em><\/font>\n\n### So here is the question related to the data at hand:\nI imagine, we are the company that owned the Titanic and we want to maximize survival rate on other ships of the same type, in future.\nWe might ask\u2026\n* How many people died?\n* What are the attributes of passengers that lived and died?\n* If they had a family member on the ship, what questions would be most important to ask to know whether that family member survived?\n\n ","a0da6a90":"### Let's have a closer look at our data.","0b97d9f7":"## Dataset Overview\n\n**Index**\n* `PassengerId` \n * is the unique id of the row and it doesn't have any effect on target\n\n**Mixed (numeric + string)**\n* `Cabin` is the cabin number of the passenger it contains strings and numbers\n* `Ticket` is the ticket number of the passenger contains strings and numbers\n\n**Ordinal integer features**\n* `SibSp` is the total number of the passengers' siblings and spouse\n* `Parch` is the total number of the passengers' parents and children\n* `Pclass `(Passenger Class) is the socio-economic status of the passenger and it is a categorical ordinal feature which has **3** unique values \n(1, 2 or 3):\n * *1 = First Class*\n * *2 = Second Class*\n * *3 = Third Class*\n\n**Categorical**\n* `Survived` is the target variable we are trying to predict (0 or 1):\n * *1 = Survived*\n * *0 = Not Survived*\n* `Embarked` is port of embarkation and it is a categorical feature \nwhich has **3** unique values (C, Q or S):\n * *C = Cherbourg*\n * *Q = Queenstown*\n * *S = Southampton*\n* `Sex` is the gender\n * Female\n * Male\n\n**Continuous**\n* `Age` is a float in the shape of xx.x\n* `Fare` is the passenger fare as a floating point feature; let's check if this is a ordinal number.\n\n**String**\n* `Name` contains the Firstname, Lastname, Title and for female passengers the Name of an associated person\n\n\n*In summary we have 1 floating point feature (Fare), 1 integer variable (Age), 3 ordinal integer features (Plcass, SibSp, Parch), 2 categorical text features (Sex, Embarked), and 3 text string features (Ticket, Cabin, Name)*","fc002d3a":"![](http:\/\/)","21874bf9":"The shape is different, because the train set contains data about survival as `Survived` and `Alive`","1e53e740":"## Load Data and Modules","95d39914":"### Missing values\nLet's see if we are missing some values","fad123e8":"### pivot_table","4add0ae7":"# EXPLORE & UNDERSTAND (EDA)\n\nLet's have a look at what we've got...","7e9a5876":"# PROBLEM DEFINITION","86e25ca8":"## Conjectures and observation \n**What we have learned**\n\nHere are some of the initial questions\n* How many people died?\n* What are the attributes of passengers that lived and died?\n\nLet's adjust our features\n* make them easier to be understood by human.\n* create some categorical variables can act as factors\n\n### Feature engineering\n* Alive\n * Create feature `Alive` (Yes or No) informed by `Survived`\n* Is it save to travel with the family or alone?\n * What is the perfect size of a family on a boat?\n  * `SibSp` is the total number of the passengers' siblings and spouse\n  * `Parch` is the total number of the passengers' parents and children\n * Is it saver to travel `Alone`\n * How is the distribution across classes of groups?\n* `Deck`\n * The `Cabin` contain a letter that shows the `Deck`\n * Let's see how that affects the survival rate.\n* `Age`\n * Is the age a factor for survival?\n * How is the age distribution across classes?\n * `Who` is on board, are there children on board\n* Let's turn `Pclass` into \n * `Class = [First, Second, Third]`\n* Let's show the place of embarkment easier\n * `Embark_town = {\"C\": \"Cherbourg\", \"Q\": \"Queenstown\", \"S\": \"Southampton\"}`\n"}}