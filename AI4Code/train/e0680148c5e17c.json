{"cell_type":{"ea23f552":"code","d5a9903d":"code","96611b92":"code","8323f251":"code","2aeab41b":"code","d0b2ab76":"code","e600c626":"code","1c15d964":"code","9f9c2bd4":"code","a28eb6ec":"code","10b9b8a1":"code","321e6fe2":"code","1443dbf4":"code","bfab53f7":"code","9c7296d4":"markdown","e9c2e7fc":"markdown","d3a9dd63":"markdown"},"source":{"ea23f552":"from fastai.vision.all import *","d5a9903d":"input_path = Path(\"..\/input\/digit-recognizer\/\")\ntrain = pd.read_csv(input_path\/\"train.csv\")","96611b92":"from torchvision import transforms\n\nclass NumberDataset:\n    def __init__(self, data, transform=None):\n        self.data = data.reset_index(drop=True)\n        self.trans = transform\n    \n    def __len__(self):\n        return self.data.shape[0]\n    \n    def __getitem__(self, index):\n        \n        d = self.data.iloc[index, 1:].values.reshape(1, 28, 28)\n        \n        if self.trans:\n            d = self.trans(tensor(d))\n        else:\n            d = tensor(d)\/255\n        \n        y = self.data.iloc[index, 0]\n        \n        return d, tensor(y)","8323f251":"train_idx, valid_idx = RandomSplitter()(train)\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\ntrain_ds = NumberDataset(train.iloc[train_idx, :])\nvalid_ds = NumberDataset(train.iloc[valid_idx, :])\n\ntrain_dl = DataLoader(train_ds, bs=64)\nvalid_dl = DataLoader(valid_ds, bs=128)\n\ndls = DataLoaders(train_dl, valid_dl).to(device)","2aeab41b":"model = nn.Sequential(\n    ConvLayer(1, 32),\n    ConvLayer(32, 64),\n    nn.MaxPool2d(2),\n    ConvLayer(64, 128),\n    ConvLayer(128, 256),\n    nn.MaxPool2d(2),\n    ConvLayer(256, 512),\n    ConvLayer(512, 1024),\n    nn.MaxPool2d(2),\n    nn.AdaptiveAvgPool2d(1),\n    Flatten(), \n    nn.Linear(1024, 256),\n    nn.Dropout(0.5),\n    nn.Linear(256, 10)\n).to(device)","d0b2ab76":"learn = Learner(dls, model, metrics=accuracy, \n                loss_func=LabelSmoothingCrossEntropy())","e600c626":"learn.lr_find()","1c15d964":"learn.fit_one_cycle(15, 1e-3)","9f9c2bd4":"preds, targs = learn.get_preds()","a28eb6ec":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\n\nfig = plt.figure(dpi=150)\nsns.heatmap(confusion_matrix(targs, preds.argmax(1)), cmap=\"Blues\",\n            square=True, annot=True);","10b9b8a1":"test = pd.read_csv(input_path\/\"test.csv\")","321e6fe2":"class TestDS(NumberDataset):\n    def __getitem__(self, index):\n        \n        d = self.data.iloc[index, :].values.reshape(1, 28, 28)\n        \n        if self.trans:\n            d = self.trans(tensor(d)\/255)\n        else:\n            d = tensor(d)\/255\n        \n        return d, tensor(0)\n\n\n\ntest_ds = TestDS(test)\ntest_dl = DataLoader(test_ds, bs=128, device=device)","1443dbf4":"preds, targ = learn.get_preds(dl=test_dl)","bfab53f7":"sub = pd.read_csv(input_path\/\"sample_submission.csv\")\nsub[\"Label\"] = np.argmax(preds, axis=1)\nsub.to_csv(\"submission.csv\", index=False)","9c7296d4":"# Make prediction on the test set","e9c2e7fc":"# Prepare our training data","d3a9dd63":"# Build and Train the model"}}