{"cell_type":{"92b2fba4":"code","382edbb4":"code","9f4c3ad7":"code","1078262c":"code","7242f33b":"code","2d4cbed3":"code","298c8f80":"code","2b17b1c2":"code","fb19c5b1":"code","8e0b13f7":"code","1dfbe0a9":"code","58fe4ad6":"code","cf6b1a66":"markdown","b8a507a7":"markdown","240be7a4":"markdown"},"source":{"92b2fba4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","382edbb4":"\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras import Model\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","9f4c3ad7":"from tensorflow.keras.applications.inception_v3 import InceptionV3\n\n\nweights_path = '\/kaggle\/input\/inceptionv3\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5'\npretrained_model = InceptionV3(input_shape = (150, 150, 3), \n                                include_top = False, \n                                weights = None)\n\npretrained_model.load_weights(weights_path)\n\nfor layer in pre_trained_model.layers:\n     layer.trainable = False","1078262c":"\nlast_layer=pretrained_model.get_layer('mixed7')\nprint('last layer output shape: ', last_layer.output_shape)\nlast_output=last_layer.output","7242f33b":"x=layers.Flatten()(last_output)\nx=layers.Dense(1024,activation='relu')(x)\nx=layers.Dropout(0.2)(x)  #20% dropout\nx=layers.Dense(6,activation='softmax')(x)\nmodel=Model(pretrained_model.input,x)\nmodel.compile(optimizer = RMSprop(lr=0.0001), \n              loss = 'categorical_crossentropy', \n              metrics =['acc'])","2d4cbed3":"###########  WITHOUT TRANSFER LEARNING\n\n# model=tf.keras.models.Sequential([\n#     layers.Conv2D(32,(3,3),activation='relu',input_shape=(150,150,3)),\n#     layers.MaxPool2D(2,2),\n#     layers.Conv2D(32,(3,3),activation='relu'),\n#     layers.MaxPooling2D(2,2),\n#     layers.Conv2D(64,(3,3),activation='relu'),\n#     layers.MaxPooling2D(2,2),\n#     layers.Conv2D(128, (3,3), activation='relu'),\n#     layers.MaxPooling2D(2,2),\n#     layers.Flatten(),\n#     layers.Dense(512,activation='relu'),\n#     layers.Dense(6,activation='softmax')  \n# ])\n\n# model.compile(optimizer=RMSprop(lr=0.001), loss='categorical_crossentropy', metrics=['acc'])","298c8f80":"TRAINING_DIR = '\/kaggle\/input\/intel-image-classification\/seg_train\/seg_train\/'\ntrain_datagen = ImageDataGenerator(\n                  rescale=1\/255.0,\n                  rotation_range=40,\n                  horizontal_flip=True,\n                  width_shift_range=0.2,\n                  height_shift_range=0.2,\n                  shear_range=0.2,\n                  zoom_range=0.2,\n                  fill_mode='nearest'\n)\n\ntrain_generator = train_datagen.flow_from_directory(\n                      TRAINING_DIR,target_size=(150,150),batch_size=10,class_mode='categorical')\n\nVALIDATION_DIR = '\/kaggle\/input\/intel-image-classification\/seg_test\/seg_test\/'\nvalidation_datagen = ImageDataGenerator(rescale=1\/255.0)\n\nvalidation_generator = validation_datagen.flow_from_directory(\n                      VALIDATION_DIR,target_size=(150,150),batch_size=10,class_mode='categorical')","2b17b1c2":"history = model.fit_generator(train_generator,\n                              epochs=30,\n                              steps_per_epoch=10,\n                              verbose=1,\n                              validation_data=validation_generator,\n                             validation_steps=50)","fb19c5b1":"%matplotlib inline\n\nimport matplotlib.pyplot as plt\ntrain_acc=history.history['acc']\nval_acc=history.history['val_acc']\nloss=history.history['loss']\nval_loss=history.history['val_loss']\n\nepochs=range(len(history.history['acc']))\n\nplt.plot(epochs,train_acc,'r','Training acc')\nplt.plot(epochs,val_acc,'b','Validation acc')\nplt.figure()\nplt.plot(epochs,loss,'r','Train loss')\nplt.plot(epochs,val_loss,'b','Val loss')","8e0b13f7":"%matplotlib inline\nimport numpy as np\nfrom keras.preprocessing import image\nimport matplotlib.image as mpimg\n\nfiles=os.listdir('\/kaggle\/input\/sample\/sample\/')\n\npath='\/kaggle\/input\/sample\/sample\/'\nfor filename in files:\n    file=path+filename\n    img=image.load_img(file, target_size=(150, 150))\n    x=image.img_to_array(img)\n    x=x\/255\n    x=np.expand_dims(x, axis=0)\n    images = np.vstack([x])\n    classes = model.predict(images, batch_size=10)\n    plt.imshow(mpimg.imread(file))\n    plt.figure()\n    i,j=np.unravel_index(classes.argmax(), classes.shape)\n    if j==0:\n        print('Building')\n    elif j==1:\n        print('forest')\n    elif j==2:\n        print('glacier')    \n\n    elif j==3:\n        print('mountain')\n    elif j==4:\n        print('sea')\n    else:\n        print('street')    \n        \n  \n","1dfbe0a9":"#total_images=len(os.listdir('\/kaggle\/input\/intel-image-classification\/seg_pred\/seg_pred\/'))\n\n\nfiles=os.listdir('\/kaggle\/input\/intel-image-classification\/seg_pred\/seg_pred\/')[:100]\npath='\/kaggle\/input\/intel-image-classification\/seg_pred\/seg_pred\/'\nresults=[]\nfor filename in files:\n    file=path+filename\n    img=image.load_img(file, target_size=(150, 150))\n    x=image.img_to_array(img)\n    x=x\/255\n    x=np.expand_dims(x, axis=0)\n    images = np.vstack([x])\n    classes = model.predict(images, batch_size=10)\n    i,j=np.unravel_index(classes.argmax(), classes.shape)\n    if j==0:\n        classname='Building'\n    elif j==1:\n        classname='forest'\n    elif j==2:\n        classname='glacier'    \n\n    elif j==3:\n        classname='mountain'\n    elif j==4:\n        classname='sea'\n    else:\n        classname='street'\n    \n    results.append(classname)\n    \nresults=pd.Series(results,name=\"Label\")   \nsubmission = pd.concat([pd.Series(range(1,101),name = \"ImageId\"),results],axis = 1)  \nsubmission.head()\n","58fe4ad6":"submission.to_csv(\"intel_image_classification.csv\",index=False)","cf6b1a66":"# ****CSV File For Prediction Of Given Images (seg-pred folder)\n\n# ****First 100 Images","b8a507a7":"# ****Test With Custom Input ","240be7a4":"# Applying Transfer Learning"}}