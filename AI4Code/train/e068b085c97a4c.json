{"cell_type":{"604bb927":"code","cbe20088":"code","7a390276":"code","bcf82750":"code","afd2ef9c":"code","e67281f6":"code","d11f06b6":"code","2c8881b7":"code","36e51f58":"code","d3fe3a7f":"code","e947aa4c":"code","5551464c":"code","38bd037e":"code","31c39d93":"code","5d75890a":"code","3badd322":"code","0f06f8b8":"code","5fec003e":"code","c2c457ce":"code","56cc9c08":"code","57efcf09":"code","b7ff1c79":"code","36b03294":"code","18ae817e":"code","1a8227af":"code","ae10a8ec":"code","e88a9719":"code","fc6d0e61":"code","9576f501":"code","d07a98bf":"code","7adc1dd0":"code","755a4067":"code","1ba39d5a":"code","f76102c6":"code","5fab58d1":"code","33e7b755":"code","01dbf6bd":"code","60650216":"code","94e2173c":"code","d2f6b6e5":"code","e610934e":"code","142438d2":"code","3df30632":"code","3d356352":"code","26161ad6":"code","c5837247":"code","95a1011f":"code","a34dee42":"code","75b5a206":"markdown","643c2b70":"markdown","8cdf5022":"markdown","693e8a61":"markdown","db385480":"markdown","a2b9023d":"markdown"},"source":{"604bb927":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom xgboost import plot_importance\nfrom matplotlib import pyplot\n# import shap\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nfrom time import time\nfrom tqdm import tqdm_notebook as tqdm\nfrom collections import Counter\nfrom scipy import stats\nimport lightgbm as lgb\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.model_selection import KFold, StratifiedKFold\nimport gc\nimport json\npd.set_option('display.max_columns', 1000)","cbe20088":"Id = \"installation_id\"\ntarget = \"accuracy_group\"","7a390276":"def eval_qwk_lgb_regr(y_true, y_pred):\n    \"\"\"\n    Fast cappa eval function for lgb.\n    \"\"\"\n    dist = Counter(reduce_train['accuracy_group'])\n    for k in dist:\n        dist[k] \/= len(reduce_train)\n#     reduce_train['accuracy_group'].hist()\n    \n    acum = 0\n    bound = {}\n    for i in range(3):\n        acum += dist[i]\n        bound[i] = np.percentile(y_pred, acum * 100)\n\n    def classify(x):\n        if x <= bound[0]:\n            return 0\n        elif x <= bound[1]:\n            return 1\n        elif x <= bound[2]:\n            return 2\n        else:\n            return 3\n\n    y_pred = np.array(list(map(classify, y_pred))).reshape(y_true.shape)\n\n    return 'cappa', cohen_kappa_score(y_true, y_pred, weights='quadratic'), True","bcf82750":"def cohenkappa(ypred, y):\n    y = y.get_label().astype(\"int\")\n    ypred = ypred.reshape((4, -1)).argmax(axis = 0)\n    loss = cohenkappascore(y, y_pred, weights = 'quadratic')\n    return \"cappa\", loss, True","afd2ef9c":"# input_path = \"..\/input\/\"\ninput_path = \"\/kaggle\/input\/data-science-bowl-2019\/\"\n\ndef read_data():\n    print('Reading train.csv file....')\n    train = pd.read_csv(input_path + 'train.csv')\n    print('Training.csv file have {} rows and {} columns'.format(train.shape[0], train.shape[1]))\n\n    print('Reading test.csv file....')\n    test = pd.read_csv(input_path + 'test.csv')\n    print('Test.csv file have {} rows and {} columns'.format(test.shape[0], test.shape[1]))\n\n    print('Reading train_labels.csv file....')\n    train_labels = pd.read_csv(input_path + 'train_labels.csv')\n    print('Train_labels.csv file have {} rows and {} columns'.format(train_labels.shape[0], train_labels.shape[1]))\n\n    print('Reading specs.csv file....')\n    specs = pd.read_csv(input_path + 'specs.csv')\n    print('Specs.csv file have {} rows and {} columns'.format(specs.shape[0], specs.shape[1]))\n\n    print('Reading sample_submission.csv file....')\n    sample_submission = pd.read_csv(input_path + 'sample_submission.csv')\n    print('Sample_submission.csv file have {} rows and {} columns'.format(sample_submission.shape[0], sample_submission.shape[1]))\n    return train, test, train_labels, specs, sample_submission","e67281f6":"# read data\ntrain, test, train_labels, specs, sample_submission = read_data()","d11f06b6":"def encode_title(train, test, train_labels):\n    # encode title\n    train['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), train['title'], train['event_code']))\n    test['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), test['title'], test['event_code']))\n    all_title_event_code = list(set(train[\"title_event_code\"].unique()).union(test[\"title_event_code\"].unique()))\n    # make a list with all the unique 'titles' from the train and test set\n    list_of_user_activities = list(set(train['title'].unique()).union(set(test['title'].unique())))\n    # make a list with all the unique 'event_code' from the train and test set\n    list_of_event_code = list(set(train['event_code'].unique()).union(set(test['event_code'].unique())))\n    list_of_event_id = list(set(train['event_id'].unique()).union(set(test['event_id'].unique())))\n    # make a list with all the unique worlds from the train and test set\n    list_of_worlds = list(set(train['world'].unique()).union(set(test['world'].unique())))\n    # create a dictionary numerating the titles\n    activities_map = dict(zip(list_of_user_activities, np.arange(len(list_of_user_activities))))\n    activities_labels = dict(zip(np.arange(len(list_of_user_activities)), list_of_user_activities))\n    activities_world = dict(zip(list_of_worlds, np.arange(len(list_of_worlds))))\n    assess_titles = list(set(train[train['type'] == 'Assessment']['title'].value_counts().index).union(set(test[test['type'] == 'Assessment']['title'].value_counts().index)))\n    # replace the text titles with the number titles from the dict\n    train['title'] = train['title'].map(activities_map)\n    test['title'] = test['title'].map(activities_map)\n    train['world'] = train['world'].map(activities_world)\n    test['world'] = test['world'].map(activities_world)\n    train_labels['title'] = train_labels['title'].map(activities_map)\n    win_code = dict(zip(activities_map.values(), (4100*np.ones(len(activities_map))).astype('int')))\n    # then, it set one element, the 'Bird Measurer (Assessment)' as 4110, 10 more than the rest\n    win_code[activities_map['Bird Measurer (Assessment)']] = 4110\n    # convert text into datetime\n    train['timestamp'] = pd.to_datetime(train['timestamp'])\n    test['timestamp'] = pd.to_datetime(test['timestamp'])\n    \n    \n    return train, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code","2c8881b7":"# get usefull dict with maping encode\ntrain, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code = encode_title(train, test, train_labels)\n","36e51f58":"# tag = \"encode_title\"\n\n# # train\n# result_path = \"..\/temp\/train_\" + tag + \".pkl\"\n# train.to_pickle(result_path)\n\n# # test\n# result_path = \"..\/temp\/test_\" + tag + \".pkl\"\n# test.to_pickle(result_path)","d3fe3a7f":"# tag = \"encode_title\"\n# train = pd.read_pickle(\"..\/temp\/train_\" + tag + \".pkl\")\n# test = pd.read_pickle(\"..\/temp\/test_\" + tag + \".pkl\")\n\n# print('Reading sample_submission.csv file....')\n# sample_submission = pd.read_csv(input_path + 'sample_submission.csv')\n# print('Sample_submission.csv file have {} rows and {} columns'.format(sample_submission.shape[0], sample_submission.shape[1]))\n","e947aa4c":"# this is the function that convert the raw data into processed features\ndef get_data(user_sample, test_set=False):\n    '''\n    The user_sample is a DataFrame from train or test where the only one \n    installation_id is filtered\n    And the test_set parameter is related with the labels processing, that is only requered\n    if test_set=False\n    '''\n    # Constants and parameters declaration\n    last_activity = 0\n    \n    user_activities_count = {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n    \n    # new features: time spent in each activity\n    last_session_time_sec = 0\n    accuracy_groups = {0:0, 1:0, 2:0, 3:0}\n    all_assessments = []\n    accumulated_accuracy_group = 0\n    accumulated_accuracy = 0\n    accumulated_correct_attempts = 0 \n    accumulated_uncorrect_attempts = 0\n    accumulated_actions = 0\n    counter = 0\n    time_first_activity = float(user_sample['timestamp'].values[0])\n    durations = []\n    last_accuracy_title = {'acc_' + title: -1 for title in assess_titles}\n    event_code_count: Dict[str, int] = {ev: 0 for ev in list_of_event_code}\n    event_id_count: Dict[str, int] = {eve: 0 for eve in list_of_event_id}\n    title_count: Dict[str, int] = {eve: 0 for eve in activities_labels.values()} \n    title_event_code_count: Dict[str, int] = {t_eve: 0 for t_eve in all_title_event_code}\n        \n    # last features\n    sessions_count = 0\n    \n    # itarates through each session of one instalation_id\n    for i, session in user_sample.groupby('game_session', sort=False):\n        # i = game_session_id\n        # session is a DataFrame that contain only one game_session\n        \n        # get some sessions information\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]\n        session_title_text = activities_labels[session_title]\n                    \n        # for each assessment, and only this kind off session, the features below are processed\n        # and a register are generated\n        if (session_type == 'Assessment') & (test_set or len(session)>1):\n            # search for event_code 4100, that represents the assessments trial\n            all_attempts = session.query(f'event_code == {win_code[session_title]}')\n            # then, check the numbers of wins and the number of losses\n            true_attempts = all_attempts['event_data'].str.contains('true').sum()\n            false_attempts = all_attempts['event_data'].str.contains('false').sum()\n            # copy a dict to use as feature template, it's initialized with some itens: \n            # {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n            features = user_activities_count.copy()\n            features.update(last_accuracy_title.copy())\n            features.update(event_code_count.copy())\n            features.update(event_id_count.copy())\n            features.update(title_count.copy())\n            features.update(title_event_code_count.copy())\n            features.update(last_accuracy_title.copy())\n            features['installation_session_count'] = sessions_count\n            \n            # get installation_id for aggregated features\n            features['installation_id'] = session['installation_id'].iloc[-1]\n            # add title as feature, remembering that title represents the name of the game\n            features['session_title'] = session['title'].iloc[0]\n            # the 4 lines below add the feature of the history of the trials of this player\n            # this is based on the all time attempts so far, at the moment of this assessment\n            features['accumulated_correct_attempts'] = accumulated_correct_attempts\n            features['accumulated_uncorrect_attempts'] = accumulated_uncorrect_attempts\n            accumulated_correct_attempts += true_attempts \n            accumulated_uncorrect_attempts += false_attempts\n            # the time spent in the app so far\n            if durations == []:\n                features['duration_mean'] = 0\n                features['duration_std'] = 0\n            else:\n                features['duration_mean'] = np.mean(durations)\n                features['duration_std'] = np.std(durations)\n            durations.append((session.iloc[-1, 2] - session.iloc[0, 2] ).seconds)\n            # the accurace is the all time wins divided by the all time attempts\n            features['accumulated_accuracy'] = accumulated_accuracy\/counter if counter > 0 else 0\n            accuracy = true_attempts\/(true_attempts+false_attempts) if (true_attempts+false_attempts) != 0 else 0\n            accumulated_accuracy += accuracy\n            last_accuracy_title['acc_' + session_title_text] = accuracy\n            # a feature of the current accuracy categorized\n            # it is a counter of how many times this player was in each accuracy group\n            if accuracy == 0:\n                features['accuracy_group'] = 0\n            elif accuracy == 1:\n                features['accuracy_group'] = 3\n            elif accuracy == 0.5:\n                features['accuracy_group'] = 2\n            else:\n                features['accuracy_group'] = 1\n            features.update(accuracy_groups)\n            accuracy_groups[features['accuracy_group']] += 1\n            # mean of the all accuracy groups of this player\n            features['accumulated_accuracy_group'] = accumulated_accuracy_group\/counter if counter > 0 else 0\n            accumulated_accuracy_group += features['accuracy_group']\n            # how many actions the player has done so far, it is initialized as 0 and updated some lines below\n            features['accumulated_actions'] = accumulated_actions\n            \n            # there are some conditions to allow this features to be inserted in the datasets\n            # if it's a test set, all sessions belong to the final dataset\n            # it it's a train, needs to be passed throught this clausule: session.query(f'event_code == {win_code[session_title]}')\n            # that means, must exist an event_code 4100 or 4110\n            if test_set:\n                all_assessments.append(features)\n            elif true_attempts+false_attempts > 0:\n                all_assessments.append(features)\n                \n            counter += 1\n        \n        sessions_count += 1\n        # this piece counts how many actions was made in each event_code so far\n        def update_counters(counter: dict, col: str):\n                num_of_session_count = Counter(session[col])\n                for k in num_of_session_count.keys():\n                    x = k\n                    if col == 'title':\n                        x = activities_labels[k]\n                    counter[x] += num_of_session_count[k]\n                return counter\n        \n        event_code_count = update_counters(event_code_count, \"event_code\")\n        event_id_count = update_counters(event_id_count, \"event_id\")\n        title_count = update_counters(title_count, 'title')\n        title_event_code_count = update_counters(title_event_code_count, 'title_event_code')\n        \n        # counts how many actions the player has done so far, used in the feature of the same name\n        accumulated_actions += len(session)\n        if last_activity != session_type:\n            user_activities_count[session_type] += 1\n            last_activitiy = session_type \n                        \n    # if it't the test_set, only the last assessment must be predicted, the previous are scraped\n    if test_set:\n        return all_assessments[-1]\n    # in the train_set, all assessments goes to the dataset\n    return all_assessments","5551464c":"def get_train_and_test(train, test):\n    compiled_train = []\n    compiled_test = []\n    for i, (ins_id, user_sample) in tqdm(enumerate(train.groupby('installation_id', sort = False)), total = 17000):\n        compiled_train += get_data(user_sample)\n    for ins_id, user_sample in tqdm(test.groupby('installation_id', sort = False), total = 1000):\n        test_data = get_data(user_sample, test_set = True)\n        compiled_test.append(test_data)\n    reduce_train = pd.DataFrame(compiled_train)\n    reduce_test = pd.DataFrame(compiled_test)\n    categoricals = ['session_title']\n    \n    compiled_test_his = []\n    for i, (ins_id, user_sample) in tqdm(enumerate(test.groupby('installation_id', sort = False)), total = 1000):\n        compiled_test_his += get_data(user_sample)\n    reduce_test_his = pd.DataFrame(compiled_test_his)\n    \n    return reduce_train, reduce_test, categoricals, reduce_test_his","38bd037e":"# tranform function to get the train and test set\nreduce_train, reduce_test, categoricals, reduce_test_his = get_train_and_test(train, test)","31c39d93":"reduce_train.shape, reduce_test.shape, reduce_test_his.shape","5d75890a":"reduce_train.head()","3badd322":"categoricals = ['session_title']","0f06f8b8":"def run_lgb_regression(reduce_train, reduce_test, usefull_features, n_splits, depth):\n    kf = StratifiedKFold(n_splits=n_splits, shuffle = True, random_state = 42)\n    target = 'accuracy_group'\n    oof_pred = np.zeros((len(reduce_train), ))\n    y_pred = np.zeros((len(reduce_test), ))\n    for fold, (tr_ind, val_ind) in enumerate(kf.split(reduce_train, reduce_train[target])):\n        print('Fold {}'.format(fold + 1))\n        x_train, x_val = reduce_train[usefull_features].iloc[tr_ind], reduce_train[usefull_features].iloc[val_ind]\n        y_train, y_val = reduce_train[target][tr_ind], reduce_train[target][val_ind]\n        train_set = lgb.Dataset(x_train, y_train, categorical_feature=categoricals)\n        val_set = lgb.Dataset(x_val, y_val, categorical_feature=categoricals)\n        \n        params = {'n_estimators':5000,\n                    'boosting_type': 'gbdt',\n                    'objective': 'regression',\n                    'metric': 'rmse',\n                    'subsample': 0.75,\n                    'subsample_freq': 1,\n                    'learning_rate': 0.01,\n                    'feature_fraction': 0.9,\n                    'max_depth': depth,\n                    'lambda_l1': 1,  \n                    'lambda_l2': 1,\n                    'verbose': 100,\n                    'early_stopping_rounds': 100\n                    }\n        \n        model = lgb.train(params, train_set, num_boost_round = 1000000, early_stopping_rounds = 300, \n                          valid_sets=[train_set, val_set], verbose_eval = 100)\n        oof_pred[val_ind] = model.predict(x_val)\n        y_pred += model.predict(reduce_test[usefull_features]) \/ n_splits\n    _, loss_score, _ = eval_qwk_lgb_regr(reduce_train[target], oof_pred)\n    print('Our oof cohen kappa score is: ', loss_score)\n\n    return y_pred, loss_score\n","5fec003e":"def run_xgb_regression(reduce_train, reduce_test, usefull_features, n_splits):\n    kf = StratifiedKFold(n_splits=n_splits, shuffle = True, random_state = 42)\n    target = 'accuracy_group'\n    oof_pred = np.zeros((len(reduce_train), ))\n    y_pred = np.zeros((len(reduce_test), ))\n    for fold, (tr_ind, val_ind) in enumerate(kf.split(reduce_train, reduce_train[target])):\n        print('Fold {}'.format(fold + 1))\n        x_train, x_val = reduce_train[usefull_features].iloc[tr_ind], reduce_train[usefull_features].iloc[val_ind]\n        y_train, y_val = reduce_train[target][tr_ind], reduce_train[target][val_ind]\n        xgb_train = xgb.DMatrix(x_train, y_train)\n        xgb_eval = xgb.DMatrix(x_val, y_val)\n\n        pars = {\n            'colsample_bytree': 0.8,                 \n            'learning_rate': 0.01,\n            'max_depth': 10,\n            'subsample': 1,\n            'objective':'reg:squarederror',\n            #'eval_metric':'rmse',\n            'min_child_weight':5,\n            'gamma':0.25,\n            'n_estimators':5000\n        }\n\n        model = xgb.train(pars,\n                      xgb_train,\n                      num_boost_round=5000,\n                      evals=[(xgb_train, 'train'), (xgb_eval, 'val')],\n                      verbose_eval=100,\n                      early_stopping_rounds=100\n                     )\n        \n        val_X=xgb.DMatrix(x_val)\n        oof_pred[val_ind] = model.predict(val_X)\n        test_X = xgb.DMatrix(reduce_test[usefull_features])\n        y_pred += model.predict(test_X) \/ n_splits\n    _, loss_score, _ = eval_qwk_lgb_regr(reduce_train[target], oof_pred)\n    print('Our oof cohen kappa score is: ', loss_score)\n\n    return y_pred\n","c2c457ce":"# call feature engineering function\nfeatures = reduce_train.loc[(reduce_train.sum(axis=1) != 0), (reduce_train.sum(axis=0) != 0)].columns # delete useless columns\nfeatures = [x for x in features if x not in ['accuracy_group', 'installation_id']]","56cc9c08":"to_exclude = []\najusted_test = reduce_test.copy()\nfor feature in ajusted_test.columns:\n    if feature not in ['accuracy_group', 'installation_id', 'accuracy_group', 'session_title']:\n        data = reduce_train[feature]\n        train_mean = data.mean()\n        data = ajusted_test[feature] \n        test_mean = data.mean()\n        try:\n            ajust_factor = train_mean \/ test_mean\n            if ajust_factor > 10 or ajust_factor < 0.1:\n                to_exclude.append(feature)\n                print(feature, train_mean, test_mean)\n            else:\n                ajusted_test[feature] *= ajust_factor\n        except:\n            to_exclude.append(feature)\n            print(feature, train_mean, test_mean)","57efcf09":"features = [x for x in features if x not in to_exclude]\nreduce_train[features].shape","b7ff1c79":"reduce_train_origin = reduce_train.copy()","36b03294":"## sample\nhis_idx = []\n\nused_idx = []\nfrom tqdm import tqdm_notebook, tqdm\nimport random\nrandom.seed(1260)\nfor iid in tqdm_notebook(set(reduce_train_origin[Id])):\n    list_ = list(reduce_train_origin.loc[reduce_train_origin[Id] == iid].index)\n#     print(list_)\n    \n    cur = random.choices(list_, k=1)[0]\n    cur_target = reduce_train_origin.loc[cur, target]\n    his = [x for x in list_ if x < cur]\n    his_idx.append([his, cur_target])\n    \n    used_idx.append(cur)\nprint(len(used_idx))","18ae817e":"train_feature = pd.DataFrame()\nfor i in tqdm_notebook(range(len(his_idx))):\n    temp_feature = reduce_train_origin.loc[his_idx[i][0]]\n    temp_feature[\"feature_target\"] = his_idx[i][1]\n    train_feature = train_feature.append(temp_feature)","1a8227af":"test_feature = reduce_test_his.copy()\ntest_feature[\"feature_target\"] = -1","ae10a8ec":"train_feature.shape, test_feature.shape","e88a9719":"train_x = train_feature[features]\ntrain_y = train_feature[target]\ntest_x  = test_feature[features]","fc6d0e61":"# debug for \"LightGBMError: Do not support special JSON characters in feature name.\"\nfeatures = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in features]\ntrain_x.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in train_x.columns]\ntest_x.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in test_x.columns]\n\nreduce_train.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in reduce_train.columns]\nreduce_test.columns  = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in reduce_test.columns]\najusted_test.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in ajusted_test.columns]","9576f501":"# Run a 5 fold\nfolds = StratifiedKFold(n_splits=5, shuffle=True, random_state=777)\noof_preds = np.zeros(train_x.shape[0])\nsub_preds = np.zeros(test_x.shape[0])","d07a98bf":"category = ['session_title']\n\nlr = 0.1\nEarly_Stopping_Rounds = 150\n\nN_round = 5000\nVerbose_eval = 100\n\nparams =  {'num_leaves': 61,  # \u5f53\u524dbase 61\n           'min_child_weight': 0.03454472573214212,\n           'feature_fraction': 0.3797454081646243,\n           'bagging_fraction': 0.4181193142567742,\n           'min_data_in_leaf': 96,  # \u5f53\u524dbase 106\n           'objective': 'regression',\n           \"metric\": 'rmse',\n           'max_depth': -1,\n           'learning_rate': lr,   # \u5feb\u901f\u9a8c\u8bc1\n    #      'learning_rate': 0.006883242363721497,\n           \"boosting_type\": \"gbdt\",\n           \"bagging_seed\": 11,\n           \"verbosity\": -1,\n           'reg_alpha': 0.3899927210061127,\n           'reg_lambda': 0.6485237330340494,\n           'random_state': 47,\n           'num_threads': 16,\n           'lambda_l1': 1,  \n           'lambda_l2': 1\n    #      'is_unbalance':True\n             }","7adc1dd0":"import datetime\nfrom sklearn.metrics import mean_squared_error\n\noof_preds = np.zeros(train_x.shape[0])\nsub_preds = np.zeros(test_x.shape[0])\n\nfeature_importances = pd.DataFrame()\nfeature_importances['feature'] = train_x[features].columns\n\nRMSEs = []\n\nfor n_fold, (trn_idx, val_idx) in enumerate(folds.split(train_x, train_y)):\n    \n    start_time = time()\n    print('Training on fold {}'.format(n_fold + 1))\n    \n    trn_data = lgb.Dataset(train_x[features].iloc[trn_idx], label=train_y.iloc[trn_idx],\n                           categorical_feature=category)\n    val_data = lgb.Dataset(train_x[features].iloc[val_idx], label=train_y.iloc[val_idx],\n                           categorical_feature=category)\n\n    clf = lgb.train(params, trn_data, num_boost_round=N_round, valid_sets=[trn_data, val_data],\n                    verbose_eval=Verbose_eval, early_stopping_rounds=Early_Stopping_Rounds)\n    \n    val = clf.predict(train_x[features].iloc[val_idx])\n    oof_preds[val_idx] = val\n    \n    sub_preds += clf.predict(test_x[features]) \/ folds.n_splits\n    \n    rmse = np.sqrt(mean_squared_error(train_y.iloc[val_idx], val))\n    print('RMSE: {}'.format(rmse))\n    RMSEs.append(rmse)\n    \n    feature_importances['fold_{}'.format(n_fold + 1)] = clf.feature_importance()\n    \n    print('fold {} finished in {}'.format(n_fold + 1, str(datetime.timedelta(seconds=time() - start_time))))","755a4067":"print(RMSEs)\nprint('Mean RMSE:', np.mean(RMSEs))","1ba39d5a":"feature_importances['average'] = feature_importances[[x for x in feature_importances.columns if x != \"feature\"]].mean(axis=1)\nfeature_importances = feature_importances.sort_values(by = \"average\", ascending = False)\nfeature_importances","f76102c6":"train_feature_score = train_feature[[Id]]\ntrain_feature_score['score'] = oof_preds\ntest_feature_score = test_feature[[Id]]\ntest_feature_score['score'] = sub_preds\n\nfeature_score = pd.concat([train_feature_score, test_feature_score])\n# feature_score.to_csv('..\/temp\/feature_score.csv',index=False)","5fab58d1":"# groupby\u4e4b\u540e\u7684\u9884\u6d4b\u503c\u4f5c\u4e3a\u7279\u5f81\nfeature_agg = feature_score.groupby(Id).agg({'score': ['mean', 'sum', 'max', 'var']}).reset_index()\nfeature_agg.columns = [Id, 'score_mean', 'score_sum', 'score_max', 'score_var']","33e7b755":"feature_agg.head()","01dbf6bd":"# \u6309Id\u548c\u4e0a\u9762\u751f\u6210\u7684\u7279\u5f81merge\nreduce_train = pd.merge(reduce_train, feature_agg, on = Id, how = \"left\")\nreduce_test = pd.merge(reduce_test, feature_agg, on = Id, how = \"left\")\najusted_test = pd.merge(ajusted_test, feature_agg, on = Id, how = \"left\")","60650216":"# use reduce_train as training data","94e2173c":"reduce_train.shape, reduce_test.shape","d2f6b6e5":"reduce_train = reduce_train.loc[used_idx]\nreduce_train.index = range(len(reduce_train))","e610934e":"reduce_train.shape, reduce_test.shape, ajusted_test.shape","142438d2":"\"score_mean\" in features","3df30632":"features.extend(['score_mean', 'score_sum', 'score_max', 'score_var'])","3d356352":"reduce_train.shape","26161ad6":"depth = 15\n# y_lgb_pred, loss_score = run_lgb_regression(train_app, ajusted_test, features, 5, depth)\ny_lgb_pred, loss_score = run_lgb_regression(reduce_train, ajusted_test, features, 5, depth)","c5837247":"final_pred = y_lgb_pred","95a1011f":"dist = Counter(reduce_train['accuracy_group'])\nfor k in dist:\n    dist[k] \/= len(reduce_train)\nreduce_train['accuracy_group'].hist()","a34dee42":"acum = 0\nbound = {}\nfor i in range(3):\n    acum += dist[i]\n    bound[i] = np.percentile(final_pred, acum * 100)\nprint(bound)\n\ndef classify(x):\n    if x <= bound[0]:\n        return 0\n    elif x <= bound[1]:\n        return 1\n    elif x <= bound[2]:\n        return 2\n    else:\n        return 3\n    \nfinal_pred = np.array(list(map(classify, final_pred)))\n\nsample_submission['accuracy_group'] = final_pred.astype(int)\nsample_submission.to_csv('.\/submission.csv', index=False)\nsample_submission['accuracy_group'].value_counts(normalize=True)","75b5a206":"# Notes\n* Check the distribution of the target variable of the out of folds score and the prediction distribution. A good model should more or less have the same distribution.","643c2b70":"### use groupby-agg stat of prediction as features","8cdf5022":"# Objective\n\n* In the last notebook we create our baseline model including a feature selection part. \n* Cohen cappa score of 0.456 (lb) with a local cv score of 0.529\n* In this notebook we are going to add more features and remove others that i think they overfitt the train set and then check if our local cv score improve.\n* Next, we will check if this improvement aligns with the lb.","693e8a61":"### run model","db385480":"- This notebook is original fork from [Convert to Regression](https:\/\/www.kaggle.com\/braquino\/convert-to-regression), thanks to Bruno Aquino. \n- The idea of sampling is from discusion.\n- The idea of \"use agg stat feature of prediction\" is from [qchemdog's solusion in Kaggle home credit default risk competition](https:\/\/github.com\/NoxMoon\/home-credit-default-risk)\n","a2b9023d":"#### save to pickle and reload"}}