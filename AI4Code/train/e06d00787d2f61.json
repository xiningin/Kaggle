{"cell_type":{"a6a2c8b6":"code","90de18ad":"code","617042fc":"code","e8d52ddd":"code","30b328ee":"code","66dfaa4b":"code","e3907d55":"code","473883c0":"code","fda15f6c":"code","b0717ca8":"code","88a3c9b3":"code","4a48d996":"code","d1ed1d02":"code","dd0d48ea":"code","e7ad4c01":"code","bf392266":"code","93820daf":"code","d536ece0":"code","7b7c56fd":"code","1b218a50":"code","09d7ce4e":"code","34626c10":"code","f02c7dfc":"code","8ef9e7e1":"code","72c0f1fe":"code","9644d334":"code","4cc5cdb0":"code","f9a1cd18":"code","2cea1449":"code","4a839791":"code","c998b937":"code","ccadb8fb":"code","d85c433f":"code","375a5cfe":"code","26a48af7":"code","689e283a":"code","d37f01fa":"code","8c8788d4":"code","98c25ed3":"code","2e76f01c":"code","dab7412f":"code","b22ecdad":"code","dc3fa8c6":"code","7d4713c1":"code","e66e680b":"code","5a3e548d":"code","1c11eaec":"code","9f747bb7":"code","26a7d0bf":"code","8ff23006":"code","222a6d45":"code","1d7f210b":"code","5044c0ff":"code","a7c900db":"code","489d2b85":"code","ec858e98":"code","3e2b022b":"code","4020ad1c":"code","c3d75447":"code","fcadd2ba":"code","9ab9669c":"code","dbf632dc":"code","20583b76":"code","783a54df":"code","0bd50815":"code","e99ee320":"code","323a295e":"code","56bce2a2":"code","cb8b75b6":"code","226c6d8d":"code","40bebbc8":"code","cd9bae3b":"code","02fdac13":"code","22ef1e2b":"code","2a1a2fbf":"code","5f3b5d62":"code","37b24522":"code","8d98d481":"code","7af709b6":"code","37ec5f10":"code","79b1a3e1":"code","fa0112c1":"code","dad6e3fd":"code","c6461d51":"code","8bb9d5e7":"code","82014f55":"code","60553852":"code","a12a254b":"code","6144581d":"code","391f9880":"code","c252bfdb":"code","8f74095b":"code","2ce949d0":"code","b7297656":"code","57de51d9":"code","d4bf2962":"code","7c98346e":"code","fddc9ff6":"code","967e8c33":"code","ae2120cd":"code","258c0864":"code","4977f862":"code","6aec9227":"code","5e55df3d":"code","e391fb58":"code","bfe29291":"code","a7aae150":"code","9a16c4d1":"code","c8806f1f":"code","332edbab":"code","7354a8c4":"code","dd06d206":"code","d76d8c79":"code","791cebb3":"code","c6786671":"code","68adbeff":"code","1c7152a1":"code","0f69998b":"code","c94aa61d":"code","61206171":"code","561d2b55":"code","b0ca9417":"code","512d6b79":"code","bf1399aa":"code","0c4f2598":"code","150ba9de":"code","81838055":"code","901ed545":"code","abed1ccd":"code","477eab6b":"code","d591534a":"code","0f48c2e5":"code","b3bf7cf6":"code","23b1b99b":"code","494b7d7f":"code","d8caa082":"code","6f3cd7df":"code","f54ce788":"code","6420ce45":"code","d9dc1217":"code","901d4c54":"code","d55f7513":"code","40c8c932":"markdown","141da0c1":"markdown","95c713bf":"markdown","39f8fd9a":"markdown","4a87e4b5":"markdown","5f3e5bd5":"markdown","be6cc1b7":"markdown","d62607e0":"markdown","e2f361c4":"markdown","ce351aca":"markdown","13e34f21":"markdown","d3b1d478":"markdown","7be96343":"markdown","f8a17b3e":"markdown","403e3730":"markdown","9eeb2b7c":"markdown"},"source":{"a6a2c8b6":"#Importing the libraries needed\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.simplefilter(\"ignore\")\n","90de18ad":"from imblearn.over_sampling import RandomOverSampler\nsns.set(style='whitegrid')","617042fc":"train  = pd.read_csv(\"..\/input\/health-insurance-cross-sell-prediction\/train.csv\")\ntest = pd.read_csv(\"..\/input\/health-insurance-cross-sell-prediction\/test.csv\")","e8d52ddd":"train.head(2)","30b328ee":"test.head(2)","66dfaa4b":"print(\"Shape of train dataset \",train.shape )\nprint(\"Shape of test dataset \",test.shape )","e3907d55":"#checking for null values\n\ntrain.isnull().sum()\n\n#we founnd that there are no null values in the dataset","473883c0":"train.isnull().values.any()","fda15f6c":"train = train.dropna(how='any',axis=0)","b0717ca8":"train.info()","88a3c9b3":"#Concatinating both training and testing file for analysis\n\ndata= pd.concat([train,test],axis=0,sort=False)","4a48d996":"data.nunique()","d1ed1d02":"#Code to find numeric data\nnumeric_data = train.select_dtypes(include = np.number)\nnumeric_col = numeric_data.columns\nnumeric_data.head(1)","dd0d48ea":"#code to find categorical data\ncategorical_data = train.select_dtypes(exclude= np.number)\ncategorical_col = categorical_data.columns\ncategorical_data.head(1)","e7ad4c01":"a = train['Response'].value_counts()\/len(train)*100\nb = train['Gender'].value_counts()\nc = train['Vehicle_Age'].value_counts()\nd = train['Vehicle_Damage'].value_counts()\n\nprint(a)\nprint('\\n')\nprint(b)\nprint('\\n')\nprint(c)\nprint('\\n')\nprint(d)\n\n\n","bf392266":"#Outlier Analysis\n\ndef outliers(df, variable, distance):\n     IQR = df[variable].quantile(0.75) - df[variable].quantile(0.25)\n     lower_boundary = df[variable].quantile(0.25) - (IQR * distance)\n     upper_boundary = df[variable].quantile(0.75) + (IQR * distance) \n        \n     return upper_boundary, lower_boundary\n    \nupper_limit, lower_limit = outliers(train, 'Annual_Premium', 1.5)\nupper_limit, lower_limit  ","93820daf":"data['Annual_Premium']= np.where(data['Annual_Premium'] > upper_limit, upper_limit, \n                                 np.where(data['Annual_Premium'] < lower_limit, lower_limit, data['Annual_Premium']))","d536ece0":"plt.hist(data['Annual_Premium'],bins=30);","7b7c56fd":"train.columns","1b218a50":"#Split the data set into numerical and categorical variables\nnumerical_columns = ['Age', 'Region_Code', 'Annual_Premium', 'Vintage']\ncategorical_columns =['Gender', 'Driving_License', 'Previously_Insured','Vehicle_Age', 'Vehicle_Damage', 'Policy_Sales_Channel', 'Response' ] ","09d7ce4e":"train[numerical_columns].describe()\n\n#The maximum age given is 85\n#50% people are at the age of 36\n#mean is 38.8\n#standard deviation is 15.5","34626c10":"col = train.columns.tolist()\ncol.remove('id')\ntrain[col].describe(percentiles = [.25,.50,.75,.95,.99])","f02c7dfc":"# In the Annual_Premium the 99th percentile is 72544 and the max is 540165 this represents the outliers in this column. Hence it is an outlier","8ef9e7e1":"#Here we have Response as the Independent varaiable or the target variable","72c0f1fe":"plt.subplot(1,2,1)\nsns.countplot(train['Response'],palette = 'cool')\nplt.title(\"Target variable count\")\n\n\n\nplt.subplot(1,2,2)\ncount = train['Response'].value_counts()\ncount.plot.pie(    autopct = '%1.1f%%',   colors=['pink', 'green'], figsize= (10,7), explode= [0,0.1], title = \"pie chart of percentage of target class\")","9644d334":"print( \"Percentage of target class\\n\")\nprint(train['Response'].value_counts()\/len(train)*100)","4cc5cdb0":"%matplotlib inline\nimport matplotlib.pyplot as plt\ntrain.hist(bins= 50, figsize= (10,10))\nplt.show()","f9a1cd18":"plt.figure(figsize= (9,4))\nplt.subplot(1,2,1)\nsns.countplot(train['Gender'])\nplt.title(\"Count of male and female\")\n\n\n\nplt.subplot(1,2,2)\nsns.countplot(train['Gender'], hue= train['Response'], palette= \"rocket_r\")\nplt.title(\"Response in male and female category\")\nplt.show()\n","2cea1449":"train['Gender'].value_counts()","4a839791":"#There are 30619 males and 26223 females\n\n#The chance that male would buy the insurance is high than females","c998b937":"plt.figure(figsize=(20,4))\nsns.countplot(train['Age'], palette= 'hsv')\nplt.title(\"count on age\")\nplt.show()","ccadb8fb":"plt.figure(figsize= (15,4))\nplt.subplot(1,2,1)\nsns.distplot(train['Age'])\n\n\nplt.subplot(1,2,2)\nsns.boxplot(train['Age'], palette= 'Accent')","d85c433f":"plt.figure(figsize= (9,4))\nplt.subplot(1,2,1)\nsns.countplot(train['Driving_License'])\n\n\nplt.subplot(1,2,2)\nsns.countplot(train['Driving_License'], hue= train['Response'], data= train, palette= \"rocket_r\")\n\nprint(\"Percentage of  Driving_License feature\\n \")\nprint(train['Driving_License'].value_counts()\/len(train)*100)","375a5cfe":"#Customers who have the DL are 99%\n#Among people has DL who need insurance is less compared to who require no insurance","26a48af7":"plt.figure(figsize=(26,20))\nplt.subplot(3,1,1)\nsns.countplot(train[\"Region_Code\"], data= train, palette= 'hsv')\n\n\nplt.subplot(3,1,2)\nsns.distplot(train['Region_Code'])\nplt.title('Distribution of Region code')\n\n\nplt.subplot(3,1,3)\nsns.boxplot(train['Region_Code'])\n","689e283a":"#Customers from Region Code 28 has more chance of buying insurance","d37f01fa":"plt.figure(figsize=(12,4))\nplt.subplot(1,2,1)\nsns.countplot(train['Previously_Insured'])\n\nplt.subplot(1,2,2)\nsns.countplot(train['Previously_Insured'], hue=train['Response'], palette= 'hsv' )\n\nprint(\"Percentage of Previously_Insured feature \")\nprint(train['Previously_Insured'].value_counts()\/len(train)*100)","8c8788d4":"#Cutomers who has not previously insured are likely to be interested","98c25ed3":"#plt.figure(figsize =(9,4))\n#plt.subplot(1,2,1)\n#sns.countplot(train['Vehicle_Age'])\n\n\nplt.figure(figsize =(9,4))\nplt.subplot(1,2,1)\nax = sns.countplot(train['Vehicle_Age'], data=train,\n                   facecolor=(0, 0, 0, 0),\n                   linewidth=5,\n                   edgecolor=sns.color_palette(\"dark\", 7))\n\nplt.subplot(1,2,2)\nsns.countplot(train['Vehicle_Age'], hue=train['Response'], facecolor=(0, 0, 0, 0),\n                   linewidth=5, edgecolor=sns.color_palette(\"dark\", 7))","2e76f01c":"#There are less number of customers with vehicle age greater than 2 years\n#customers with vehicle age 1-2 years are more likely to buy the insurance compared to other ","dab7412f":"plt.figure(figsize=(7,7))\ntrain['Vehicle_Age'].value_counts().plot.pie(autopct='%1.1f%%', colors = ['r', 'b', 'g'])","b22ecdad":"#Damage Vehicle and Response\n\nplt.figure(figsize= (9,4))\nplt.subplot(1,2,1)\nsns.countplot(train['Vehicle_Damage'])\n\n\nplt.subplot(1,2,2)\nsns.countplot(train['Vehicle_Damage'], hue= train['Response'], palette ='binary_r')","dc3fa8c6":"#Customers with vehicle damage are equallly distributed\n#Customers with vehicle damage are more interested in the insurance","7d4713c1":"plt.figure(figsize =(11,6))\nplt.subplot (2,1,1)\nsns.distplot(train['Annual_Premium'])\nplt.show()\n\nplt.subplot(2,1,2)\nsns.boxplot(train['Annual_Premium'])\nplt.show()","e66e680b":"#There are more outliers in the annual premium feature","5a3e548d":"plt.figure(figsize=(10,10))\nplt.title(\"Correlation plot\")\nsns.heatmap(train.corr(),linewidths=5, annot=True, square=True,annot_kws={'size': 10},cmap='YlGnBu')","1c11eaec":"#policy sales channel has slightly low correlation with Age variable","9f747bb7":"train.head(5)","26a7d0bf":"#Age vs Annual Premium","8ff23006":"sns.scatterplot(x= train['Age'], y= train['Annual_Premium'])","222a6d45":"df =train.groupby(['Gender'])['Driving_License'].count().to_frame().reset_index()\ndf","1d7f210b":"sns.catplot(x='Gender', y='Driving_License', data=df, kind='bar')","5044c0ff":"#Vintage= Number of Days, Customer has been associated with the company","a7c900db":"sns.distplot(train.Vintage)","489d2b85":"train.columns","ec858e98":"train.head(5)","3e2b022b":"train.columns","4020ad1c":"train['Gender'] = train['Gender'].map( {'Female': 0, 'Male': 1} ).astype(int)","c3d75447":"train=pd.get_dummies(train,drop_first=True)","fcadd2ba":"train.head(5)","9ab9669c":"#Renaming the column name","dbf632dc":"train = train.rename(columns ={\"Vehicle_Age_< 1 Year\": \"Vehicle_Age_lt_1 Year\", \"Vehicle_Age_> 2 Years\" : \"Vehicle_Age_gt_ 2 Years\"})","20583b76":"train.head(5)","783a54df":"num_feat = ['Age','Vintage']","0bd50815":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\n\n#Apply Standardscaler for Age and Vintage\nss = StandardScaler()\ntrain[num_feat]= ss.fit_transform(train[num_feat])\n\n#Apply minmaxscaler for annual premium\nmm=MinMaxScaler()\ntrain['Annual_Premium']= mm.fit_transform(train[['Annual_Premium']])","e99ee320":"train.head(5)","323a295e":"test['Gender'] = test['Gender'].map( {'Female': 0, 'Male': 1} ).astype(int)\ntest=pd.get_dummies(test,drop_first=True)\ntest=test.rename(columns={\"Vehicle_Age_< 1 Year\": \"Vehicle_Age_lt_1_Year\", \"Vehicle_Age_> 2 Years\": \"Vehicle_Age_gt_2_Years\"})\ntest['Vehicle_Age_lt_1_Year']=test['Vehicle_Age_lt_1_Year'].astype('int')\ntest['Vehicle_Age_gt_2_Years']=test['Vehicle_Age_gt_2_Years'].astype('int')\ntest['Vehicle_Damage_Yes']=test['Vehicle_Damage_Yes'].astype('int')","56bce2a2":"from sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler, RobustScaler\nss = StandardScaler()\ntest[num_feat] = ss.fit_transform(test[num_feat])\n\nmm = MinMaxScaler()\ntest[['Annual_Premium']] = mm.fit_transform(test[['Annual_Premium']])","cb8b75b6":"train.head()","226c6d8d":"test.head()","40bebbc8":"from sklearn.model_selection import train_test_split","cd9bae3b":"train_target=train['Response']\ntrain=train.drop(['Response'], axis = 1)\n\nX_train,X_test,y_train,y_test = train_test_split(train,train_target, random_state = 0)","02fdac13":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier","22ef1e2b":"from sklearn.tree import DecisionTreeClassifier","2a1a2fbf":"X_train, X_test, y_train, y_test = train_test_split(train,train_target, test_size=0.3, random_state= 124)","5f3b5d62":"print(X_train.shape, X_test.shape)","37b24522":"model= DecisionTreeClassifier()","8d98d481":"model.fit(X_train, y_train)","7af709b6":"prediction = model.predict(X_test)","37ec5f10":"from sklearn.metrics import classification_report, confusion_matrix","79b1a3e1":"print (confusion_matrix(y_test, prediction))","fa0112c1":"print (classification_report (y_test, prediction))","dad6e3fd":"from sklearn.ensemble.forest import RandomForestClassifier","c6461d51":"rf_model =RandomForestClassifier(n_estimators =150)","8bb9d5e7":"rf_model.fit(X_train, y_train)","82014f55":"rf_prediction = rf_model.predict(X_test)","60553852":"print(classification_report(y_test, rf_prediction))","a12a254b":"print(confusion_matrix(y_test, rf_prediction))","6144581d":"#Feature Importance","391f9880":"feat_importances = pd.Series(rf_model.feature_importances_, index=X_train.columns)\nfeat_importances.nlargest(15).plot(kind='barh')\n#feat_importances.nsmallest(20).plot(kind='barh')\nplt.show()","c252bfdb":"#Hyper parameter tuning","8f74095b":"#LGBM CLASSIFIER","2ce949d0":"from lightgbm import LGBMClassifier\nfrom sklearn.model_selection import ShuffleSplit, cross_val_score\nfrom sklearn.metrics import roc_auc_score","b7297656":"model=LGBMClassifier(colsample_bytree=0.5, learning_rate=0.03,\n                     n_estimators=600, objective='binary', reg_alpha=0.1,\n                     random_state=101,reg_lambda=0.8)\n\nmodel.fit(X_train,y_train)","57de51d9":"cv = ShuffleSplit(n_splits=5, test_size=0.3, random_state=0)\nscores=cross_val_score(model, X_test, y_test, cv=cv,scoring='roc_auc')\nscores.mean()","d4bf2962":"val_pred= model.predict_proba(X_test)[:,1]","7c98346e":"val_pred","fddc9ff6":"print(roc_auc_score(y_test,val_pred))","967e8c33":"#Logistic Regression\n\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel\n","ae2120cd":"model.fit (X_train, y_train)","258c0864":"prediction = model.predict(X_test)","4977f862":"prediction","6aec9227":"from sklearn.metrics import classification_report","5e55df3d":"print (classification_report (y_test, prediction))","e391fb58":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report","bfe29291":"cm = confusion_matrix(y_test, prediction)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':11}, cmap = 'PuBu',fmt=\".1f\");","a7aae150":"#Gaussian Naive Bayes","9a16c4d1":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb_model = nb.fit(X_train, y_train)\nnb_model","c8806f1f":"y_pred_nb = nb_model.predict(X_test)","332edbab":"accuracy_score(y_test, y_pred_nb)","7354a8c4":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_nb)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","dd06d206":"print(classification_report(y_test, y_pred_nb))","d76d8c79":"#KNN","791cebb3":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn_model = knn.fit(X_train, y_train)\nknn_model","c6786671":"y_pred_knn = knn_model.predict(X_test)","68adbeff":"accuracy_score(y_test, y_pred_knn)","1c7152a1":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_knn)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","0f69998b":"print(classification_report(y_test, y_pred_knn))","c94aa61d":"#Random Forest","61206171":"from sklearn.ensemble import RandomForestClassifier\nrf_model = RandomForestClassifier().fit(X_train, y_train)\n","561d2b55":"y_pred_rf = rf_model.predict(X_test)\naccuracy_score(y_test, y_pred_rf)","b0ca9417":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_rf)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","512d6b79":"print(classification_report(y_test, y_pred_rf))","bf1399aa":"Importance = pd.DataFrame({\"Importance\": rf_model.feature_importances_*100},\n                         index = X_train.columns)","0c4f2598":"Importance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = True).plot(kind =\"barh\", color = \"r\")\n\nplt.xlabel(\"Variable Significance Levels\")","150ba9de":"#Gradient Boosting Machines","81838055":"from sklearn.ensemble import GradientBoostingClassifier","901ed545":"gbm_model = GradientBoostingClassifier().fit(X_train, y_train)","abed1ccd":"y_pred_gbm = gbm_model.predict(X_test)\naccuracy_score(y_test, y_pred_gbm)","477eab6b":"print(classification_report(y_test, y_pred_gbm))","d591534a":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_gbm)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","0f48c2e5":"#XG Boost","b3bf7cf6":"from xgboost import XGBClassifier\nimport xgboost as xgb\nxgb_model = XGBClassifier().fit(X_train, y_train)","23b1b99b":"y_pred_xgb_model = xgb_model.predict(X_test)\naccuracy_score(y_test, y_pred_xgb_model)","494b7d7f":"print(classification_report(y_test, y_pred_xgb_model))","d8caa082":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_xgb_model)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","6f3cd7df":"from xgboost import XGBClassifier\n# Model Tuning\nXGB_model = XGBClassifier(random_state = 42, max_depth = 8, n_estimators = 3000, \n                          reg_lambda = 1.2, reg_alpha = 1.2, \n                          min_child_weight = 1,objective = 'binary:logistic',\n                         learning_rate = 0.15, gamma = 0.3, colsample_bytree = 0.5,\n                          eval_metric = 'auc').fit(X_train, y_train)","f54ce788":"y_pred_XGB_model = XGB_model.predict(X_test)\naccuracy_score(y_test, y_pred_XGB_model)","6420ce45":"print(classification_report(y_test, y_pred_XGB_model))","d9dc1217":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_XGB_model)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","901d4c54":"models = [\n    knn_model,\n    nb_model,\n    gbm_model,\n    xgb_model,\n    XGB_model,\n    rf_model,\n      \n]\n\nfor model in models:\n    names = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)\n    print(\"-\"*28)\n    print(names + \":\" )\n    print(\"Accuracy: {:.4%}\".format(accuracy))","d55f7513":"# Create submission file\nsubmmission = pd.DataFrame()\nsubmmission['id'] = test['id'].values\nsubmmission['Response'] = y_test\nsubmmission.to_csv('cat_submitfinal.csv', float_format='%.6f', index=False)\n\nsubmmission.head()","40c8c932":"From the diagram we read that it is an imbalanced binary problem\nOnly 12.3 % customers are interested","141da0c1":"Splitting Training and Testing","95c713bf":"Modelling","39f8fd9a":"For Test Data","4a87e4b5":"# Data Preprocessing","5f3e5bd5":"Vehicle Age analysis","be6cc1b7":"EDA on Previously Insured","d62607e0":"EDA on Driving License","e2f361c4":"EDA on Age","ce351aca":"Random Forest Classifier","13e34f21":"**Exploratory** **data analysis**","d3b1d478":"Decision Tree Classifier","7be96343":"Region distribution","f8a17b3e":"Annual Premiums","403e3730":"Plot on Gender","9eeb2b7c":"LOGISTIC REGRESSION"}}