{"cell_type":{"3f3d1726":"code","822ba851":"code","f37b2537":"code","a7e463bb":"code","5464f1c4":"code","a8ef3e59":"code","93a6f0cc":"code","c32d576c":"code","97ff6655":"code","934346cf":"code","da898875":"code","d0dd211d":"code","d0b53a68":"code","40a1abe7":"code","856df5a2":"code","8000f80b":"code","c8eee741":"code","81477a91":"code","10eb0003":"code","d5d303b9":"code","ed87328b":"code","a89de20b":"code","8e9b20a8":"code","3f45c20b":"code","dcf35cf1":"code","ee442a1a":"code","3526cdca":"markdown","b0829b4d":"markdown","d5349932":"markdown","994eedc2":"markdown","03d514bc":"markdown","34edc031":"markdown","53be876e":"markdown"},"source":{"3f3d1726":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","822ba851":"pip install pycaret","f37b2537":"from pycaret.classification import *","a7e463bb":"import matplotlib.pyplot as plt\nimport seaborn as sns","5464f1c4":"from sklearn.impute import KNNImputer","a8ef3e59":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_df_o = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","93a6f0cc":"# PassangerID, Ticket and Name are not numerical data and not much useful for model building\ntrain_df = train_df.drop(['PassengerId','Name','Ticket'],axis=1)\ntest_df = test_df.drop(['PassengerId','Name','Ticket'],axis=1)","c32d576c":"# Cabin column has 77% missing data, we should delete this column\nprint('% missisng values in Cabin Column are:',train_df['Cabin'].isna().sum()\/len(train_df)*100)","97ff6655":"train_df = train_df.drop(['Cabin'],axis=1)\ntest_df = test_df.drop(['Cabin'],axis=1)","934346cf":"#We can apply one-hot encoding on Sex column\ntrain_df['Sex'] = train_df['Sex'].replace({'male':1,'female':0})\ntest_df['Sex'] = test_df['Sex'].replace({'male':1,'female':0})","da898875":"#Column Age has multiple missing values\n#lets replace NaN values using KNNImputer\ntrain_df['Age'] = KNNImputer(n_neighbors=4).fit_transform(train_df[['Age']])","d0dd211d":"#Embarked column has two missing values, we can fill those with mode of the column\ntrain_df['Embarked'].fillna(train_df['Embarked'].mode()[0], inplace=True)\ntest_df['Age'] = KNNImputer(n_neighbors=4).fit_transform(test_df[['Age']])","d0b53a68":"test_df['Fare'] = KNNImputer(n_neighbors=4).fit_transform(test_df[['Fare']])","40a1abe7":"train_df = train_df.join(pd.get_dummies(train_df['Embarked']))\ntrain_df.drop(['Embarked'],axis=1,inplace=True)\ntest_df = test_df.join(pd.get_dummies(test_df['Embarked']))\ntest_df.drop(['Embarked'],axis=1,inplace=True)","856df5a2":"train_df.info()","8000f80b":"test_df.info()","c8eee741":"X = train_df.drop('Survived',axis=1)\ny = train_df['Survived']","81477a91":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)","10eb0003":"from sklearn.linear_model import LogisticRegression\nLR = LogisticRegression()\nLR.fit(X_train,y_train)\ny_pred = LR.predict(X_test)","d5d303b9":"from sklearn.metrics import confusion_matrix, plot_confusion_matrix, classification_report\nfrom sklearn.metrics import accuracy_score","ed87328b":"plot_confusion_matrix(LR, X_test, y_test)\nplt.show()","a89de20b":"y_train_pred = LR.predict(X_train)\n\nprint(\"Training Accuracy Score is:\",accuracy_score(y_train, y_train_pred))","8e9b20a8":"print(\"Testing Accuracy Score is:\",accuracy_score(y_test, y_pred))","3f45c20b":"LRF = LogisticRegression()\nLRF.fit(X,y)\npred = LRF.predict(test_df)","dcf35cf1":"submission = pd.DataFrame({\n        \"PassengerId\": test_df_o[\"PassengerId\"],\n        \"Survived\": pred\n    })\nsubmission.to_csv('submission.csv', index=False)","ee442a1a":"s = setup(train_df, target = 'Survived')\nbest_model = compare_models(sort='AUC')","3526cdca":"### Testing Accuracy","b0829b4d":"### Training Accuracy","d5349932":"# Final Prediction","994eedc2":"# 1. Logistic Regression","03d514bc":"# Other","34edc031":"# Train-Test_Split","53be876e":"# EDA of Data"}}