{"cell_type":{"2c47b7c7":"code","9c900cdb":"code","a3445f3c":"code","1ca841c1":"code","f490a4e0":"code","b6e9c9d8":"code","bee99c0a":"code","f249b59f":"code","68ee1afa":"code","571fb2fc":"code","5ec9ee94":"code","bffbc0f2":"code","396c00ce":"code","3dfa4f03":"code","d9223ae6":"code","2d091cad":"code","748eaecf":"code","4c7e7f27":"code","0238d669":"code","85284cf6":"code","0bb455ec":"code","769ab853":"code","d7f23b84":"code","d57e1bfa":"code","278c61d9":"code","8a4667a8":"code","9abdcd05":"markdown","921e77ee":"markdown","0e31de2b":"markdown","21006393":"markdown","47587b98":"markdown","b5d82f81":"markdown"},"source":{"2c47b7c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9c900cdb":"import os\nimport re\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport tensorflow.keras as keras \nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import (Embedding, \n                                     LSTM, \n                                     Dense, \n                                     Dropout,\n                                     GRU) \nfrom tensorflow.keras.callbacks import EarlyStopping\nprint('You are using TensorFlow version: ',tf.__version__)","a3445f3c":"dirs = '\/kaggle\/input\/nlp-getting-started\/'\ndf_train = pd.read_csv(dirs+'train.csv', sep=',', encoding='ISO-8859-1')\ndf_test = pd.read_csv(dirs+'test.csv', sep=',', encoding='ISO-8859-1')\n\npd.set_option('display.max_colwidth', None)\ndf_train.head(10)","1ca841c1":"print(\"======= TRAIN DATA =======\")\nprint(\"shape : \", df_train.shape)\nprint(\"null  : \", np.sum(df_train.isnull().any(axis=1)))\nprint(\"======= TEST DATA =======\")\nprint(\"shape : \", df_test.shape)\nprint(\"null  : \", np.sum(df_test.isnull().any(axis=1)))","f490a4e0":"stopwordlist = ['a', 'about', 'above', 'after', 'again', 'ain', 'all', 'am', 'an',\n             'and','any','are', 'as', 'at', 'be', 'because', 'been', 'before',\n             'being', 'below', 'between','both', 'by', 'can', 'd', 'did', 'do',\n             'does', 'doing', 'down', 'during', 'each','few', 'for', 'from',\n             'further', 'had', 'has', 'have', 'having', 'he', 'her', 'here',\n             'hers', 'herself', 'him', 'himself', 'his', 'how', 'i', 'if', 'in',\n             'into','is', 'it', 'its', 'itself', 'just', 'll', 'm', 'ma',\n             'me', 'more', 'most','my', 'myself', 'now', 'o', 'of', 'on', 'once',\n             'only', 'or', 'other', 'our', 'ours','ourselves', 'out', 'own', 're','s', 'same', 'she', \"shes\", 'should', \"shouldve\",'so', 'some', 'such',\n             't', 'than', 'that', \"thatll\", 'the', 'their', 'theirs', 'them',\n             'themselves', 'then', 'there', 'these', 'they', 'this', 'those',\n             'through', 'to', 'too','under', 'until', 'up', 've', 'very', 'was',\n             'we', 'were', 'what', 'when', 'where','which','while', 'who', 'whom',\n             'why', 'will', 'with', 'won', 'y', 'you', \"youd\",\"youll\", \"youre\",\n             \"youve\", 'your', 'yours', 'yourself', 'yourselves']\n\nSTOPWORDS = set(stopwordlist)","b6e9c9d8":"## Utility codes for text cleaning\n\ndef remove_stopwords(text):\n    return \" \".join([word for word in str(text).split() if word not in STOPWORDS])\n\ndef remove_urls(text):\n    new_text = re.sub(r'http?:\\\/\\\/.*[\\r\\n]*', \"\", text)\n    new_text = re.sub(r'https?:\\\/\\\/.*[\\r\\n]*', \"\", new_text)\n    #new_text = re.sub(r'@[a-zA-Z0-9]', \"\", new_text)\n    new_text = ' '.join(x for x in new_text.split() if not x.startswith('@'))\n    return new_text.casefold().strip()\n\ndef remove_special_chrs(text):\n    new_text = re.sub(r\"[^a-zA\\s]\",'',text)\n    new_text=new_text.replace(\"#\",\"\").strip()\n    return new_text.strip()","bee99c0a":"df_train['text'] = df_train.text.apply(remove_urls).dropna()\ndf_test['text'] = df_test.text.apply(remove_urls)\ndf_train.sample(10)","f249b59f":"## Sorting by id\nX = df_train.sort_values(by=['id'], ascending=True)\nXtest = df_test.sort_values(by=['id'], ascending=True)\n\n## get target\ntweets = X.loc[:, X.columns =='text'].values.flatten()\ntweets_test = Xtest.loc[:, Xtest.columns =='text'].values.flatten()","68ee1afa":"print(tweets[:10])","571fb2fc":"u_token = Tokenizer()\ndef preprocess(text):\n    seqs = u_token.fit_on_texts(text)\n    return seqs","5ec9ee94":"## fit tokenizer on training set:\ntokens=preprocess(tweets)\nprint(tokens)","bffbc0f2":"## Text to Sequences\nX_train = u_token.texts_to_sequences(tweets)\nX_test = u_token.texts_to_sequences(tweets_test)\nprint(X_train[0])","396c00ce":"## Pad Sequences\nX_train = np.array(X_train, dtype=object)\nX_test = np.array(X_test, dtype=object)\nprint(\"Array Sequence: \", X_train[0])\nX_train = keras.preprocessing.sequence.pad_sequences(X_train)\nX_test = keras.preprocessing.sequence.pad_sequences(X_test)\nprint(\"Pad Sequence:\\n\",X_train[0])","3dfa4f03":"## size of the vocabulary\nvocab_size = len(u_token.word_index)\nprint('Size of vocabulary:', vocab_size)","d9223ae6":"# target training variable:\ny_train = df_train.target.values\nprint(y_train[0])","2d091cad":"from sklearn.model_selection import train_test_split\nx_train, x_val, y, y_val = train_test_split(X_train, y_train, \n                                            test_size=0.2, \n                                            random_state=42)\n\nprint(\"Training data shape: \", x_train.shape)\nprint(\"Validation data shape: \", x_val.shape)","748eaecf":"model = keras.Sequential([\n    Embedding(input_dim = vocab_size+2, output_dim = 128, name='Embedding'),\n    GRU(128, return_sequences=True),\n    GRU(128),\n    Dense(1)\n])","4c7e7f27":"model.compile(\n    loss = 'binary_crossentropy',\n    optimizer = 'adam',\n    metrics = ['binary_accuracy'],\n)\nmodel.summary()","0238d669":"early_stopping = EarlyStopping(\n                monitor = 'val_accuracy',\n                min_delta = .001,\n                patience = 5,\n                restore_best_weights = True    \n            )\n\nhistory = model.fit(\n    x_train, y,\n    validation_data=(x_val, y_val),\n    batch_size=120,\n    epochs=10,\n    callbacks=[early_stopping],\n)","85284cf6":"train_score = model.evaluate(x_val, y_val)","0bb455ec":"# Plot history: Binary Cross-entropy\nplt.plot(history.history['loss'], label='BCE (training data)')\nplt.plot(history.history['val_loss'], label='BCE (validation data)')\nplt.title('BCE for disaster Twitts')\nplt.ylabel('BCE value')\nplt.xlabel('Epochs')\nplt.legend(loc=\"upper left\")","769ab853":"# Plot history: Accuracy\nplt.plot(history.history['binary_accuracy'], label='acc (training data)')\nplt.plot(history.history['val_binary_accuracy'], label='acc (validation data)')\nplt.title('Accuracy for disaster Twitts')\nplt.ylabel('Accuracy value')\nplt.xlabel('No. epoch')\nplt.legend(loc=\"upper left\")\nplt.show()","d7f23b84":"from sklearn.metrics import f1_score\n\ny_pred = np.where(model.predict(x_val)>0.5,1.0,0.0).flatten().astype('int32')\ny_true = y_val\nf1_score(y_true, y_pred)","d57e1bfa":"preds = np.where(model.predict(X_test)>0.5,1.0,0.0).flatten().astype('int32')","278c61d9":"results = {'text':tweets_test, 'target':preds}\ndf_results = pd.DataFrame(results)\ndf_results.sample(20)","8a4667a8":"submission = pd.merge(df_test, df_results, on='text').drop_duplicates()\nsubmission.drop(['text', 'keyword', 'location'],axis=1).to_csv('submission_2.csv', index=False)","9abdcd05":"# Applying NLP Techniques","921e77ee":"# Metric Validation","0e31de2b":"# Training the Model","21006393":"# Modelling","47587b98":"# Import Libraries","b5d82f81":"# Load Datasets"}}