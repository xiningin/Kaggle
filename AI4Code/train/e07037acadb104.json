{"cell_type":{"1d1e1cde":"code","0861936b":"code","c2657cf1":"code","d890b21b":"code","ffad8bb8":"code","9ee229cd":"code","62edec49":"code","347fffeb":"code","637ac98c":"code","19cba0cc":"code","459ad5f9":"code","44fc5457":"code","9ad13778":"code","d5fd9553":"code","cd748ee3":"code","edbe1819":"code","9029b49c":"code","da69989b":"code","1fc2563f":"code","5286ab5b":"code","5b55fd48":"code","1ea6c323":"code","9f0dc6eb":"code","596e38a5":"code","236d108f":"code","ae2bc875":"code","31b1cc47":"code","c42eb04f":"code","506e3322":"code","a1974756":"code","57b305fe":"markdown","9ebdbdfe":"markdown"},"source":{"1d1e1cde":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0861936b":"data = pd.read_csv('\/kaggle\/input\/california-housing-prices\/housing.csv')\ndata.head()","c2657cf1":"data.shape","d890b21b":"X = data.iloc[:, 7].values\nY = data.iloc[:, 8].values","ffad8bb8":"print(data['median_income'].isnull().any())\nprint(data['median_house_value'].isnull().any())","9ee229cd":"import matplotlib.pyplot as plt","62edec49":"plt.scatter(X, Y)\nplt.show()","347fffeb":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics","637ac98c":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2)","19cba0cc":"X_train = X_train.reshape(-1, 1)\ny_train = y_train.reshape(-1, 1)\nX_test = X_test.reshape(-1, 1)\ny_test = y_test.reshape(-1, 1)","459ad5f9":"reg = LinearRegression()\nreg.fit(X_train, y_train)","44fc5457":"y_pred = reg.predict(X_test)","9ad13778":"y_pred2 = reg.predict(X_train)","d5fd9553":"mse = (1\/len(X_train)) * sum(val ** 2 for val in (y_train - (41786.85738712 * X_train + 45163.07458515)))\nprint('mse_me :', mse)\n\nMSE_train = metrics.mean_squared_error(y_train, y_pred2)\nR2 = reg.score(y_train, y_pred2)\nprint('MSE :', MSE_train)\nprint('R2 :', R2)","cd748ee3":"mse = (1\/len(X_test)) * sum(val ** 2 for val in (y_test - (41786.85738712 * X_test + 45163.07458515)))\nprint('mse_me :', mse)\n\nMSE_train = metrics.mean_squared_error(y_test, y_pred)\nR2 = reg.score(y_test, y_pred)\nprint('MSE :', MSE_train)\nprint('R2 :', R2)","edbe1819":"print(\"M :\", reg.coef_)\nprint(\"C :\", reg.intercept_)","9029b49c":"print(X_train.shape)\nplt.scatter(X_train, y_train)\nplt.plot(X_train,y_pred2, color='green')\nplt.show()","da69989b":"print(X_test.shape)\nplt.scatter(X_test, y_test)\nplt.plot(X_test,y_pred, color='green')\nplt.show()","1fc2563f":"from sklearn.linear_model import Ridge","5286ab5b":"ridgeReg = Ridge(alpha=1, normalize=True)\nridgeReg.fit(X_train, y_train)","5b55fd48":"y_pred6 = ridgeReg.predict(X_test)\ny_pred7 = ridgeReg.predict(X_train)","1ea6c323":"print(metrics.mean_squared_error(y_train, y_pred7))\nmse = (1\/len(X_train)) * sum(val ** 2 for val in (y_train - y_pred7))\nprint(mse)","9f0dc6eb":"print(metrics.mean_squared_error(y_test, y_pred6))\nmse = (1\/len(X_test)) * sum(val ** 2 for val in (y_test - y_pred6))\nprint(mse)","596e38a5":"print(\"R2 : \", ridgeReg.score(y_test, y_pred6))","236d108f":"from sklearn.linear_model import Lasso","ae2bc875":"lasso = Lasso(alpha=1, normalize=True)\nlasso.fit(X_train, y_train)","31b1cc47":"y_pred8 = lasso.predict(X_test)\ny_pred9 = lasso.predict(X_train)","c42eb04f":"print(metrics.mean_squared_error(y_train, y_pred9))\n\nm = 0\nfor i in range(len(y_train)):\n    val = y_train[i] - y_pred9[i]\n    m += val ** 2\nmse = (1\/len(X_train)) * m\nprint(mse)","506e3322":"print(metrics.mean_squared_error(y_test, y_pred8))\n\nm = 0\nfor i in range(len(y_test)):\n    val = y_test[i] - y_pred8[i]\n    m += val ** 2\n    \nmse = (1\/len(X_test))  * m\nprint(mse)","a1974756":"print(\"R2 : \", lasso.score(y_test, y_pred8))","57b305fe":"# Ridge Regrassion","9ebdbdfe":"# Lasso Regression"}}