{"cell_type":{"5dc20388":"code","577a11d5":"code","ee71d913":"code","dc4ccd55":"code","5e5adae3":"code","087249ee":"code","881c7bed":"code","19f3f0b3":"code","f91953e9":"code","f5f3a34a":"code","ae94af49":"code","b0d6863f":"markdown","3acbe6d0":"markdown"},"source":{"5dc20388":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom PIL import Image \nimport requests\n#Source : https:\/\/stackoverflow.com\/questions\/17056209\/python-pil-affine-transformation","577a11d5":"url = 'https:\/\/images.pexels.com\/photos\/2850833\/pexels-photo-2850833.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'","ee71d913":"# Open image \nim = Image.open(requests.get(url, stream=True).raw)\n#im = Image.open(\"..\/input\/lineartransformationimages\/pexels-cristina-andrea-alvarez-cruz-2850833.jpg\")\nplt.imshow(im)","dc4ccd55":"## Grayscale\nim = im.convert('LA')\nim","5e5adae3":"b, h = im.size\nb, h","087249ee":"def linear_transform(trans_mat, b_new = b, h_new = h):\n    '''\n    Effectively mulitplying each pixel vector by the transformation matrix\n    PIL uses a tuple of 1st 2 rows of the inverse matrix\n    '''\n    Tinv = np.linalg.inv(trans_mat)\n    Tinvtuple = (Tinv[0,0],Tinv[0,1], Tinv[0,2], Tinv[1,0],Tinv[1,1],Tinv[1,2])\n    return im.transform((int(b_new), int(h_new)), Image.AFFINE, Tinvtuple, resample=Image.BILINEAR) ","881c7bed":"T = np.matrix([[1\/2, 0, 0],\n               [0, 1\/2, 0],\n               [0, 0, 1]])\n\ntrans = linear_transform(T, b\/2, h\/2)\ntrans","19f3f0b3":"T = np.matrix([[1\/4, 0, 0],\n               [0, 1\/2, 0],\n               [0, 0, 1]])\n\ntrans = linear_transform(T, b\/4, h\/2)\ntrans","f91953e9":"mat_rotate = (1\/ np.sqrt(2)) * \\\n    np.matrix([[1, -1, 0],\n               [1, 1, 0],\n               [0, 0, np.sqrt(2)]])\n\ntrans = linear_transform(mat_rotate)\ntrans","f5f3a34a":"\nT = mat_rotate @ np.matrix(\n    [[1\/4, 0, 0],\n     [0, 1\/4, 0], \n     [0, 0, 1]])\n\nlinear_transform(T, b\/4, h\/4)","ae94af49":"T = np.matrix(\n    [[0, -1, 0],\n     [1, 0, 0], \n     [0, 0, 1]]) @ np.matrix(\n    [[1, 0, -b],\n     [0, 1, h],\n     [0, 0, 1]])\n\nlinear_transform(T, b, h)","b0d6863f":"Rotation by 45 degree counter clockwise","3acbe6d0":"Scaling the image to half the size"}}