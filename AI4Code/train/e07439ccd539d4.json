{"cell_type":{"f0e3ff47":"code","bf3276aa":"code","f507861a":"code","76ac17b8":"code","9fda6b11":"code","13eac7d2":"code","daf15b20":"code","78ce2bac":"code","43c7732b":"code","d1f862d9":"code","f038b2ed":"code","f4852bb7":"code","bfced47d":"code","e3c56a21":"code","b0eb7917":"code","1624b778":"code","949623e1":"code","6834838a":"code","1e99efec":"code","449cadff":"code","41c9f53b":"code","c559a06c":"code","ce45ce68":"code","73c4b143":"code","d372df68":"code","b2af854a":"code","79197378":"code","964f26ab":"code","8543027a":"code","8c011419":"code","f81802e0":"code","63e8ab59":"code","86c83863":"code","21d8720b":"code","58fbdc82":"code","b1026fd4":"code","aa7005cd":"code","6df8245c":"code","cad68770":"code","d19956ff":"code","296924eb":"code","9a887b3e":"code","daaaacae":"code","d754480d":"markdown","8fddfeba":"markdown","ec201250":"markdown","5eaa6d84":"markdown","0f0d8279":"markdown","809ace8f":"markdown","76279e82":"markdown","fe94d6f0":"markdown","2b5f604e":"markdown","00ca4a38":"markdown","f94bae84":"markdown","afcdb015":"markdown","26971ae5":"markdown","4b89b172":"markdown","496ddbe7":"markdown","ddc8d6e2":"markdown","24eb6f6a":"markdown"},"source":{"f0e3ff47":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bf3276aa":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","f507861a":"airbnb = pd.read_csv('\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\nairbnb.head(10)","76ac17b8":"airbnb.info()","9fda6b11":"airbnb.duplicated().sum()\nairbnb.drop_duplicates(inplace=True)","13eac7d2":"airbnb.isnull().sum()","daf15b20":"# replace nan reviews_per_month by zero\nairbnb['reviews_per_month'].fillna(0,inplace=True)\nairbnb['name'].fillna('noname',inplace=True)\n# drop columns that are useless for analysis\nairbnb.drop(['id','host_name','last_review'],axis=1,inplace=True)\nairbnb.isnull().sum()","78ce2bac":"airbnb.dropna(how='any',inplace=True)\nairbnb.info()","43c7732b":"airbnb['neighbourhood'].value_counts()","d1f862d9":"airbnb['neighbourhood_group'].value_counts()","f038b2ed":"airbnb['room_type'].value_counts()","f4852bb7":"airbnb.describe(include='all')","bfced47d":"top_host = airbnb['host_id'].value_counts().head(10)\ntop_host","e3c56a21":"plt.figure(figsize=(10,8))\nsns.heatmap(airbnb.corr(),linewidths=0.1,vmax=1.0, square=True, cmap=plt.cm.RdBu, linecolor='white', annot=True)","b0eb7917":"sns.set()\n# Top 10 room host\nplt.figure(figsize=(10,6))\npic_host = sns.barplot(top_host.index,top_host.values,palette=\"Blues_d\")\npic_host.set_title('Top 10 Host')\npic_host.set_xlabel('Host_id')\npic_host.set_ylabel('Amount of Airbnbs')","1624b778":"# Location of houses from the host who has most airbnb\nmost_host = airbnb[airbnb['host_id']==219517861]\n\nnyc_img=mpimg.imread('\/kaggle\/input\/new-york-city-airbnb-open-data\/New_York_City_.png',0)\nax=plt.gca()\n#scaling the image based on the latitude and longitude max and mins for proper output\nplt.imshow(nyc_img,zorder=0,extent=[-74.258, -73.7, 40.49,40.92])\nmost_host.plot(kind='scatter', x='longitude', y='latitude', label='neighbourhood_group',ax=ax, c='price',cmap=plt.get_cmap('jet'), colorbar=True, alpha=0.4, figsize=(10,8))","949623e1":"# Plot all Neighbourhood\n# Which Neighbourhood group has the most airbnb?\nsub_1=airbnb.loc[airbnb['neighbourhood_group'] == 'Brooklyn']\nsub_2=airbnb.loc[airbnb['neighbourhood_group'] == 'Manhattan']\nsub_3=airbnb.loc[airbnb['neighbourhood_group'] == 'Queens']\nsub_4=airbnb.loc[airbnb['neighbourhood_group'] == 'Staten Island']\nsub_5=airbnb.loc[airbnb['neighbourhood_group'] == 'Bronx']\nplt.figure(figsize=(10,8))\npic_neigh = sns.barplot(airbnb['neighbourhood_group'].value_counts().index,airbnb['neighbourhood_group'].value_counts().values,palette=\"Blues_d\")\npic_neigh.set_title('Amount of rooms in different neighbourhood_group')\npic_neigh.set_xlabel('Neighbourhood Groups')\npic_neigh.set_ylabel('Amount of Airbnbs')","6834838a":"# All airbnb distribution sorted by neighbourhood group\nplt.figure(figsize=(10,8))\nnyc_img=mpimg.imread('\/kaggle\/input\/new-york-city-airbnb-open-data\/New_York_City_.png',0)\nax=plt.gca()\n\n#scaling the image based on the latitude and longitude max and mins for proper output\nplt.imshow(nyc_img,zorder=0,extent=[-74.258, -73.7, 40.49,40.92])\n\nsns.scatterplot(airbnb.longitude,airbnb.latitude,hue=airbnb.neighbourhood_group,\n                ax=ax,alpha=0.4,cmap=plt.get_cmap('jet'))","1e99efec":"# Room type distribution\nplt.figure(figsize=(6,6))\npic_roomtype = sns.countplot(airbnb['room_type'])\n# sns.barplot(top_host.index,top_host.values,palette=\"Blues_d\")\npic_roomtype.set_title('Room Type')\npic_roomtype.set_xlabel('Room Type')\npic_roomtype.set_ylabel('Amount of Airbnbs')","449cadff":"# Room type distribution\nroom1 = sub_1['room_type'].value_counts()\nroom2 = sub_2['room_type'].value_counts()\nroom3 = sub_3['room_type'].value_counts()\nroom4 = sub_4['room_type'].value_counts()\nroom5 = sub_5['room_type'].value_counts()\nroom = pd.DataFrame([room1,room2,room3,room4,room5],index=['Brooklyn','Manhattan','Queens','Staten Island','Bronx'])\nroom.head()","41c9f53b":"room.plot(kind='bar',stacked=True,figsize=(10,8))","c559a06c":"# Room type distribution\nplt.figure(figsize=(10,8))\nnyc_img=mpimg.imread('\/kaggle\/input\/new-york-city-airbnb-open-data\/New_York_City_.png',0)\nax=plt.gca()\n\n#scaling the image based on the latitude and longitude max and mins for proper output\nplt.imshow(nyc_img,zorder=0,extent=[-74.258, -73.7, 40.49,40.92])\n\nsns.scatterplot(airbnb.longitude,airbnb.latitude,hue=airbnb.room_type,\n                ax=ax,alpha=0.4,cmap=plt.get_cmap('jet'))","ce45ce68":"# Price in different Neighbourhood?\n\nprice_sub1=sub_1['price'] #Brooklyn\nprice_sub2=sub_2['price'] #Manhattan\nprice_sub3=sub_3['price'] #Queens\nprice_sub4=sub_4['price'] #Staten Island\nprice_sub5=sub_5['price'] #Bronx\n\nplt.figure(figsize=(20,8))\nsns.kdeplot(price_sub1[price_sub1<500],shade=True,label='Brooklyn')\nsns.kdeplot(price_sub2[price_sub2<500],shade=True,label='Manhattan')\nsns.kdeplot(price_sub3[price_sub3<500],shade=True,label='Queens')\nsns.kdeplot(price_sub4[price_sub4<500],shade=True,label='Staten Island')\nsns.kdeplot(price_sub5[price_sub5<500],shade=True,label='Bronx')\nplt.title('Distribution of prices for each neighberhood_group',size=20)\nplt.legend(prop={'size':16})","73c4b143":"# Map of price\nnyc_img=mpimg.imread('\/kaggle\/input\/new-york-city-airbnb-open-data\/New_York_City_.png',0)\nax=plt.gca()\n#scaling the image based on the latitude and longitude max and mins for proper output\nplt.imshow(nyc_img,zorder=0,extent=[-74.258, -73.7, 40.49,40.92])\n# drop price over 500\nairbnb_price = airbnb[airbnb['price']<500] \nairbnb_price.plot(kind='scatter', x='longitude', y='latitude', label='neighbourhood_group',ax=ax, c='price',cmap=plt.get_cmap('jet'), colorbar=True, alpha=0.4, figsize=(10,8))","d372df68":"plt.figure(figsize=(10,15))\nsns.boxplot(x='neighbourhood_group',y='number_of_reviews',data=airbnb)","b2af854a":"# Map of views\nnyc_img=mpimg.imread('\/kaggle\/input\/new-york-city-airbnb-open-data\/New_York_City_.png',0)\nax=plt.gca()\n#scaling the image based on the latitude and longitude max and mins for proper output\nplt.imshow(nyc_img,zorder=0,extent=[-74.258, -73.7, 40.49,40.92])\n# drop views over 120\nairbnb_views = airbnb[airbnb['number_of_reviews']<120] \nairbnb_views.plot(kind='scatter', x='longitude', y='latitude',ax=ax, c='number_of_reviews',cmap=plt.get_cmap('jet'), colorbar=True, alpha=0.4, figsize=(10,8))","79197378":"airbnb['availability_365'].median()","964f26ab":"plt.figure(figsize=(10,8))\nsns.boxplot(x='neighbourhood_group',y='availability_365',data=airbnb)","8543027a":"# Map of views\nnyc_img=mpimg.imread('\/kaggle\/input\/new-york-city-airbnb-open-data\/New_York_City_.png',0)\nax=plt.gca()\n#scaling the image based on the latitude and longitude max and mins for proper output\nplt.imshow(nyc_img,zorder=0,extent=[-74.258, -73.7, 40.49,40.92])\n\nairbnb.plot(kind='scatter', x='longitude', y='latitude',ax=ax, c='availability_365',cmap=plt.get_cmap('jet'), colorbar=True, alpha=0.4, figsize=(10,8))","8c011419":"# Word cloud of room name\nfrom wordcloud import WordCloud\nplt.subplots(figsize=(25,15))\nwordcloud = WordCloud(background_color='white',width=1920,height=1080).generate(\" \".join(airbnb.name.str.upper()))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('roomname.png')\nplt.show()","f81802e0":"# Word cloud of top 50 views rooms' name\nairbnb_top_view = airbnb.sort_values('number_of_reviews',ascending=False).iloc[:100]\nfrom wordcloud import WordCloud\nplt.subplots(figsize=(25,15))\nwordcloud = WordCloud(background_color='white',width=1920,height=1080).generate(\" \".join(airbnb_top_view.name.str.upper()))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('roomname_topviews.png')\nplt.show()","63e8ab59":"airbnb_ana = airbnb[['neighbourhood_group','room_type','price','number_of_reviews','availability_365']]\nairbnb_ana.head(10)","86c83863":"# Mapping\nairbnb_ana['neighbourhood_group'] = airbnb_ana['neighbourhood_group'].map({'Brooklyn':1,'Manhattan':2,'Queens':3,'Staten Island':4,'Bronx':5}).astype(int)\nairbnb_ana['room_type'] = airbnb_ana['room_type'].map({'Private room':1,'Entire home\/apt':2,'Shared room':3}).astype(int)\nairbnb_ana.head(10)","21d8720b":"plt.figure(figsize=(6,6))\nsns.heatmap(airbnb_ana.corr(),linewidths=0.1,vmax=1.0, square=True, cmap=plt.cm.RdBu, linecolor='white', annot=True)","58fbdc82":"def Dropabnormal(df,columns,alpha):\n    # use quantile to drop abnormal\n    q_low = df[columns].quantile(q=0.25)\n    q_high = df[columns].quantile(q=0.75)\n    q_interval = q_high - q_low\n    df = df[df[columns]<q_high+alpha*q_interval][df[columns]>q_low-alpha*q_interval]\n    return df","b1026fd4":"# drop abnormal price and \nairbnb_ana = Dropabnormal(airbnb_ana,'price',3)\nairbnb_ana = Dropabnormal(airbnb_ana,'number_of_reviews',3)\nairbnb_ana.head(10)","aa7005cd":"airbnb_ana2 = airbnb_ana\nplt.figure(figsize=(6,6))\nsns.heatmap(airbnb_ana2.corr(),linewidths=0.1,vmax=1.0, square=True, cmap=plt.cm.RdBu, linecolor='white', annot=True)","6df8245c":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix,r2_score,mean_squared_error","cad68770":"x = np.array(airbnb_ana[['neighbourhood_group','room_type','number_of_reviews','availability_365']])\ny = np.array(airbnb_ana['price'])\n#Getting Test and Training Set\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=231)","d19956ff":"# LinearRegression Model\nfrom sklearn.linear_model import LinearRegression\nlg = LinearRegression()\nlg.fit(x_train,y_train)\ny_pred = lg.predict(x_test)\nprint('LR:',r2_score(y_test,y_pred))\nprint('LR:',mean_squared_error(y_test,y_pred))\nsns.regplot(y_pred,y_test)","296924eb":"# Decision Tree Regression\nfrom sklearn.tree import DecisionTreeRegressor\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=346)\ndt = DecisionTreeRegressor(min_samples_leaf=.0001)\ndt.fit(x_train,y_train)\ny_pred = dt.predict(x_test)\nprint('DT:',r2_score(y_test,y_pred))\nprint('DT:',mean_squared_error(y_test,y_pred))\nsns.regplot(y_pred,y_test)","9a887b3e":"# Lasso\nfrom sklearn.linear_model import Lasso\nla=Lasso(alpha=0.01)\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1)    \nla.fit(x_train,y_train)\nprint('Lasso:',r2_score(y_test,y_pred))\nprint('Lasso:',mean_squared_error(y_test,y_pred))\nsns.regplot(y_pred,y_test)","daaaacae":"# LogisticRegression\nfrom sklearn.linear_model import LogisticRegression\n\nlg = LogisticRegression()\nlg.fit(x_train,y_train)\ny_pred = lg.predict(x_test)\nprint('LR:',r2_score(y_test,y_pred))\nprint('LR:',mean_squared_error(y_test,y_pred))\nsns.regplot(y_pred,y_test)","d754480d":"## To know the data better\n### To find how many unique neighbourhood, neighbourhood_group and room_types?","8fddfeba":"# Importing and Loading","ec201250":"## Room Type","5eaa6d84":"## View times","0f0d8279":"## Room availability","809ace8f":"## Dropping NaN and Duplicated Data","76279e82":"## Regression","fe94d6f0":"# Analysis & Visualization\nWe analysis and visualize columns values one by one.\n## Host","2b5f604e":"### Dropping NaN values","00ca4a38":"### Deleting duplicated data","f94bae84":"# Model Establishment\n## Selecting feature","afcdb015":"## Word Cloud","26971ae5":"What is the correlation between these features?","4b89b172":"## Price","496ddbe7":"# Data Cleaning\n## First Thoughts\nAccoring to the raw data, we can divide the imformation about the airbnb into two types: \n- **Objective Attribute:** id, location, room type, price, etc\n- **Market Situation:** number of reviews, number of days when listing is available for booking, etc\n\nTherefore we could find the correlation between these two types of data.","ddc8d6e2":"### Who has the most rooms in NYC?","24eb6f6a":"## Neighbourhood"}}