{"cell_type":{"eea5ad63":"code","8ca33efb":"code","fa937277":"code","ec6f8a1c":"code","5c67ca13":"code","c6b799cf":"code","b455c573":"code","5088b80e":"code","a8f6ef4a":"code","e262b1c2":"code","412b5aee":"code","8deaf55d":"code","5be1ed8b":"code","e85ec33b":"code","f1beba73":"code","ca285843":"code","faa21aea":"markdown","e036b9ff":"markdown","96489bd7":"markdown","39cd1bb7":"markdown","d31621fe":"markdown","13e23d0c":"markdown","ad728cf0":"markdown","7df4c5bf":"markdown","71e89126":"markdown","522243fd":"markdown","5a05adc8":"markdown","44f0b5f8":"markdown","6effa340":"markdown","057b9bf9":"markdown","650b57f4":"markdown","02e029d0":"markdown","20aba278":"markdown"},"source":{"eea5ad63":"import re\nimport time\nimport json\nimport random\nimport warnings\nfrom pathlib import Path\nfrom functools import partial, reduce\nfrom collections import Counter\n\nimport multiprocessing\nfrom multiprocessing import Process\n\nfrom tqdm import tqdm_notebook as tqdm\nimport lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\nfrom scipy import optimize\nfrom sklearn.metrics import mean_squared_error\nfrom numba import jit\nfrom IPython.display import display\n\nimport chainer\nfrom chainer import functions as F\nfrom chainer import links as L\nfrom chainer import cuda, serializers, reporter\nfrom chainer.dataset import convert\nfrom chainer.datasets.dict_dataset import DictDataset\nfrom chainer.training.extensions import Evaluator","8ca33efb":"warnings.filterwarnings('ignore')\n\n# dir_dataset = Path('..\/..\/dataset')\ndir_dataset = Path('\/kaggle\/input\/data-science-bowl-2019')\n\n# dir_model = Path('_model')\ndir_model = Path('\/kaggle\/input\/dsb2019-37th-models')\n\ndebug_lgbm = False","fa937277":"def calc_weighted_kappa(truth, pred, categories=(0, 1, 2, 3)):\n\n    truth = pd.Categorical(truth, categories=categories)\n    pred = pd.Categorical(pred, categories=categories)\n\n    confusion_matrix = pd.crosstab(truth, pred, dropna=False)\n\n    O = confusion_matrix.values\n\n    true_counts = truth.value_counts()\n    pred_counts = pred.value_counts()\n\n    E = np.outer(true_counts, pred_counts)\n\n    n = len(categories)\n    w = np.zeros((n, n))\n\n    for i in range(len(w)):\n        for j in range(len(w)):\n            w[i][j] = float(((i - j) ** 2) \/ (n - 1) ** 2)\n\n    E = E \/ E.sum()\n    O = O \/ O.sum()\n\n    num = np.sum(w * O)\n    den = np.sum(w * E)\n\n    weighted_kappa = (1 - (num \/ den))\n\n    return weighted_kappa","ec6f8a1c":"class OptimizedRounder(object):\n    \"\"\"\n    An optimizer for rounding thresholds\n    to maximize Quadratic Weighted Kappa (QWK) score\n    \"\"\"\n\n    def __init__(self, thresholds):\n        self.coef_ = thresholds\n\n    def _kappa_loss(self, coef, X, y):\n        \"\"\"\n        Get loss according to\n        using current coefficients\n\n        :param coef: A list of coefficients that will be used for rounding\n        :param X: The raw predictions\n        :param y: The ground truth labels\n        \"\"\"\n        X_p = pd.cut(X, [-np.inf] + list(np.sort(coef)) + [np.inf], labels=[0, 1, 2, 3])\n\n        return -calc_weighted_kappa(y, X_p)\n\n    def fit(self, X, y):\n        \"\"\"\n        Optimize rounding thresholds\n\n        :param X: The raw predictions\n        :param y: The ground truth labels\n        \"\"\"\n        loss_partial = partial(self._kappa_loss, X=X, y=y)\n        initial_coef = [0.5, 1.5, 2.5]\n        try:\n            new_coef = optimize.minimize(loss_partial, initial_coef, method='nelder-mead')['x']\n        except ValueError:\n            new_coef = initial_coef\n        self.coef_.update(new_coef)\n\n    def predict(self, X, coef):\n        \"\"\"\n        Make predictions with specified thresholds\n\n        :param X: The raw predictions\n        :param coef: A list of coefficients that will be used for rounding\n        \"\"\"\n        return pd.cut(X, [-np.inf] + list(np.sort(coef)) + [np.inf], labels=[0, 1, 2, 3])\n\n    def coefficients(self):\n        \"\"\"\n        Return the optimized coefficients\n        \"\"\"\n        return self.coef_.coefficients()\n\n\nclass SharedThresholds:\n\n    def __init__(self):\n        self.thresholds = None\n\n    def update(self, new_thresholds):\n        self.thresholds = new_thresholds\n\n    def coefficients(self):\n        return self.thresholds\n\n    def save(self, path):\n        np.savetxt(str(path), np.array(self.thresholds))\n\n    def load(self, path):\n        self.thresholds = np.loadtxt(str(path))","5c67ca13":"class ConvolutionSentence(L.Convolution2D):\n    \"\"\" Position-wise Linear Layer for Sentence Block\n    Position-wise linear layer for array of shape\n    (batchsize, dimension, sentence_length)\n    can be implemented a convolution layer.\n    \"\"\"\n\n    def __init__(self, in_channels, out_channels,\n                 ksize=1, stride=1, pad=0, nobias=False,\n                 initialW=None, initial_bias=None):\n        super(ConvolutionSentence, self).__init__(\n            in_channels, out_channels,\n            ksize, stride, pad, nobias,\n            initialW, initial_bias)\n\n    def __call__(self, x):\n        \"\"\"Applies the linear layer.\n        Args:\n            x (~chainer.Variable): Batch of input vector block. Its shape is\n                (batchsize, in_channels, sentence_length).\n        Returns:\n            ~chainer.Variable: Output of the linear layer. Its shape is\n                (batchsize, out_channels, sentence_length).\n        \"\"\"\n        x = F.expand_dims(x, axis=3)\n        y = super(ConvolutionSentence, self).__call__(x)\n        y = F.squeeze(y, axis=3)\n        return y\n\n\ndef seq_func(func, x, reconstruct_shape=True):\n    \"\"\" Change implicitly function's target to ndim=3\n    Apply a given function for array of ndim 3,\n    shape (batchsize, dimension, sentence_length),\n    instead for array of ndim 2.\n    \"\"\"\n\n    batch, units, length = x.shape\n    e = F.transpose(x, (0, 2, 1)).reshape(batch * length, units)\n    e = func(e)\n    if not reconstruct_shape:\n        return e\n    out_units = e.shape[1]\n    e = F.transpose(e.reshape((batch, length, out_units)), (0, 2, 1))\n    assert(e.shape == (batch, out_units, length))\n    return e\n\n\nlinear_init = chainer.initializers.LeCunUniform()\n\n\nclass MultiHeadAttention(chainer.Chain):\n    \"\"\" Multi Head Attention Layer for Sentence Blocks\n    For batch computation efficiency, dot product to calculate query-key\n    scores is performed all heads together.\n    \"\"\"\n\n    def __init__(self, n_units, h=8, dropout=0.1, self_attention=True):\n        super(MultiHeadAttention, self).__init__()\n        with self.init_scope():\n            if self_attention:\n                self.W_QKV = ConvolutionSentence(\n                    n_units, n_units * 3, nobias=True,\n                    initialW=linear_init)\n            else:\n                self.W_Q = ConvolutionSentence(\n                    n_units, n_units, nobias=True,\n                    initialW=linear_init)\n                self.W_KV = ConvolutionSentence(\n                    n_units, n_units * 2, nobias=True,\n                    initialW=linear_init)\n            self.finishing_linear_layer = ConvolutionSentence(\n                n_units, n_units, nobias=True,\n                initialW=linear_init)\n        self.h = h\n        self.scale_score = 1. \/ (n_units \/\/ h) ** 0.5\n        self.dropout = dropout\n        self.is_self_attention = self_attention\n\n    def __call__(self, x, z=None, mask=None):\n        xp = self.xp\n        h = self.h\n\n        # temporary mask\n        mask = np.zeros((8, x.shape[2], x.shape[2]), dtype=np.bool)\n\n        if self.is_self_attention:\n            Q, K, V = F.split_axis(self.W_QKV(x), 3, axis=1)\n        else:\n            Q = self.W_Q(x)\n            K, V = F.split_axis(self.W_KV(z), 2, axis=1)\n        batch, n_units, n_querys = Q.shape\n        _, _, n_keys = K.shape\n\n        # Calculate Attention Scores with Mask for Zero-padded Areas\n        # Perform Multi-head Attention using pseudo batching\n        # all together at once for efficiency\n\n        batch_Q = F.concat(F.split_axis(Q, h, axis=1), axis=0)\n        batch_K = F.concat(F.split_axis(K, h, axis=1), axis=0)\n        batch_V = F.concat(F.split_axis(V, h, axis=1), axis=0)\n        assert(batch_Q.shape == (batch * h, n_units \/\/ h, n_querys))\n        assert(batch_K.shape == (batch * h, n_units \/\/ h, n_keys))\n        assert(batch_V.shape == (batch * h, n_units \/\/ h, n_keys))\n\n        # mask = xp.concatenate([mask] * h, axis=0)\n        batch_A = F.matmul(batch_Q, batch_K, transa=True) * self.scale_score\n        # batch_A = F.where(mask, batch_A, xp.full(batch_A.shape, -xp.inf, 'f'))\n        # batch_A = F.softmax(batch_A, axis=2)\n        # batch_A = F.where(\n        #     xp.isnan(batch_A.data), xp.zeros(batch_A.shape, 'f'), batch_A)\n        # assert(batch_A.shape == (batch * h, n_querys, n_keys))\n\n        # Calculate Weighted Sum\n        batch_A, batch_V = F.broadcast(\n            batch_A[:, None], batch_V[:, :, None])\n        batch_C = F.sum(batch_A * batch_V, axis=3)\n        assert(batch_C.shape == (batch * h, n_units \/\/ h, n_querys))\n        C = F.concat(F.split_axis(batch_C, h, axis=0), axis=1)\n        assert(C.shape == (batch, n_units, n_querys))\n        C = self.finishing_linear_layer(C)\n        return C\n\n\nclass FeedForwardLayer(chainer.Chain):\n    def __init__(self, n_units: int, ff_inner: int, ff_slope: float):\n        super(FeedForwardLayer, self).__init__()\n        n_inner_units = n_units * ff_inner\n        self.slope = ff_slope\n        with self.init_scope():\n            self.W_1 = ConvolutionSentence(n_units, n_inner_units, initialW=linear_init)\n            self.W_2 = ConvolutionSentence(n_inner_units, n_units, initialW=linear_init)\n            self.act = F.leaky_relu\n\n    def __call__(self, e):\n        e = self.W_1(e)\n        e = self.act(e, slope=self.slope)\n        e = self.W_2(e)\n        return e\n\n\nclass LayerNormalizationSentence(L.LayerNormalization):\n    \"\"\" Position-wise Linear Layer for Sentence Block\n    Position-wise layer-normalization layer for array of shape\n    (batchsize, dimension, sentence_length).\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super(LayerNormalizationSentence, self).__init__(*args, **kwargs)\n\n    def __call__(self, x):\n        y = seq_func(super(LayerNormalizationSentence, self).__call__, x)\n        return y\n\n\nclass EncoderLayer(chainer.Chain):\n    def __init__(self, n_units, ff_inner: int, ff_slope: float, h: int, dropout1: float, dropout2: float):\n        super(EncoderLayer, self).__init__()\n        with self.init_scope():\n            self.self_attention = MultiHeadAttention(n_units, h)\n            self.feed_forward = FeedForwardLayer(n_units, ff_inner, ff_slope)\n            self.ln_1 = LayerNormalizationSentence(n_units, eps=1e-6)\n            self.ln_2 = LayerNormalizationSentence(n_units, eps=1e-6)\n        self.dropout1 = dropout1\n        self.dropout2 = dropout2\n\n    def __call__(self, e, xx_mask):\n        sub = self.self_attention(e, e, xx_mask)\n        e = e + F.dropout(sub, self.dropout1)\n        e = self.ln_1(e)\n\n        sub = self.feed_forward(e)\n        e = e + F.dropout(sub, self.dropout2)\n        e = self.ln_2(e)\n        return e","c6b799cf":"class DSB2019Net(chainer.Chain):\n\n    def __init__(self, dim_input: int, dim_enc: int, dim_fc: int,\n                 ff_inner: int, ff_slope: float, head: int,\n                 dropout1: float, dropout2: float, dropout3: float, **kwargs):\n\n        super(DSB2019Net, self).__init__()\n\n        self.dropout3 = dropout3\n\n        with self.init_scope():\n\n            self.cur_fc1 = L.Linear(128)\n            self.cur_fc2 = L.Linear(128)\n\n            self.hist_conv1 = ConvolutionSentence(dim_input, int(dim_enc))\n            self.hist_enc1 = EncoderLayer(int(dim_enc), ff_inner, ff_slope, head, dropout1, dropout2)\n\n            self.fc1 = L.Linear(dim_fc)\n            self.fc2 = L.Linear(1)\n\n    def __call__(self, query, history, targets):\n\n        out = self.predict(query, history)\n        loss = F.mean_absolute_error(out, targets)\n        reporter.report({'loss': loss}, self)\n        return loss\n\n    def predict(self, query, history, **kwargs):\n        \"\"\"\n            query: [batch_size, feature]\n            history: [batch_size, time_step, feature]\n        \"\"\"\n\n        h_cur = F.leaky_relu(self.cur_fc1(query))\n        h_cur = self.cur_fc2(h_cur)\n\n        h_hist = F.swapaxes(history, 1, 2)\n\n        h_hist = self.hist_conv1(h_hist)\n        h_hist = self.hist_enc1(h_hist, xx_mask=None)\n\n        h_hist_ave = F.average(h_hist, axis=2)\n        h_hist_max = F.max(h_hist, axis=2)\n\n        h = F.concat([h_cur, h_hist_ave, h_hist_max], axis=1)\n\n        h = F.dropout(F.leaky_relu(self.fc1(h)), ratio=self.dropout3)\n        out = self.fc2(h)\n\n        return out","b455c573":"class ThresholdEvaluator(Evaluator):\n\n    def __init__(self, iterator, target, name, thresholds, converter=convert.concat_examples, device=None,\n                 is_validate=False, is_submit=False, installation_id=None, submission_name='submission'):\n\n        super(ThresholdEvaluator, self).__init__(iterator, target, converter=converter, device=device)\n\n        self.is_validate = is_validate\n        self.is_submit = is_submit\n        self.name = name\n\n        self.rounder = OptimizedRounder(thresholds)\n        self.installation_id = installation_id\n        self.submission_name = submission_name\n\n    def evaluate(self):\n        iterator = self._iterators['main']\n        eval_func = self._targets['main']\n\n        iterator.reset()\n        it = iterator\n\n        y_total = []\n        t_total = []\n\n        for batch in it:\n            in_arrays = self.converter(batch, self.device)\n            with chainer.no_backprop_mode(), chainer.using_config('train', False):\n                y = eval_func.predict(**in_arrays)\n\n            y_data = cuda.to_cpu(y.data)\n            y_total.append(y_data)\n            t_total.append(cuda.to_cpu(in_arrays['targets']))\n\n        y_truth = np.concatenate(t_total).flatten()\n        y_pred_value = np.concatenate(y_total).flatten()\n\n        if self.is_validate:\n            self.rounder.fit(y_pred_value, y_truth)\n\n        y_pred_label = self.rounder.predict(y_pred_value, self.rounder.coefficients())\n\n        if self.is_submit:\n\n            print('\\nsave submission !')\n\n            submit = pd.DataFrame()\n            submit['installation_id'] = self.installation_id\n            submit['accuracy_group'] = y_pred_label\n            submit.sort_values('installation_id', inplace=True)\n            submit.to_csv(f'{self.submission_name}.csv', index=False)\n\n        if self.is_validate:\n\n            valid_score = calc_weighted_kappa(y_truth, y_pred_label)\n            observation = {}\n            with reporter.report_scope(observation):\n                reporter.report({'qw_kappa': valid_score}, self._targets['main'])\n            return observation\n\n        return {}","5088b80e":"session_merge = partial(pd.merge, on='game_session')\n\ndef extract_features(data, data_labels, event_codes, titles, types, num_history_step: int):\n\n    data['timestamp'] = pd.to_datetime(data['timestamp'])\n    data['correct'] = data['event_data'].map(lambda x: '\"correct\":true' in x)\n    data['incorrect'] = data['event_data'].map(lambda x: '\"correct\":false' in x)\n\n    data_gp = data.groupby(['installation_id', 'game_session'])\n    data_time = data_gp['timestamp'].agg(min).reset_index()\n\n    data_time_max = data_gp['timestamp'].agg(max).reset_index()[['game_session', 'timestamp']]\n    data_time_max.columns = ['game_session', 'timestamp_end']\n\n    data_level = data_gp['f_level'].agg(np.max).reset_index()[['game_session', 'f_level']]\n    data_level = data_level.fillna(0.0)\n\n    data_count = data_gp[['correct', 'incorrect']].agg(sum).reset_index()[['game_session', 'correct', 'incorrect']]\n\n    data_code = pd.crosstab(data['game_session'], data['event_code']).astype(np.float32)\n    data_title = pd.crosstab(data['game_session'], data['title']).astype(np.float32)\n    data_type = pd.crosstab(data['game_session'], data['type']).astype(np.float32)\n\n    data_title_str = data.drop_duplicates('game_session', keep='last').copy()[['game_session', 'title']]\n\n    data_feature = reduce(\n        session_merge,\n        [data_time, data_code, data_title, data_type, data_time_max, data_title_str, data_count, data_level]\n    )\n    data_feature.index = data_feature['game_session']\n    data_feature_gp = data_feature.groupby('installation_id')\n\n    list_history = list()\n    list_current = list()\n\n    num_unique_geme_session = len(set(data_feature['game_session']))\n    num_unique_id_and_game_session = len(set(zip(data_feature['installation_id'], data_feature['game_session'])))\n    assert num_unique_geme_session == num_unique_id_and_game_session\n\n    assessments = [\n        'Mushroom Sorter (Assessment)',\n        'Bird Measurer (Assessment)',\n        'Cauldron Filler (Assessment)',\n        'Cart Balancer (Assessment)',\n        'Chest Sorter (Assessment)'\n    ]\n\n    for _, row in tqdm(data_labels.iterrows(), total=len(data_labels), miniters=100):\n\n        same_id = data_feature_gp.get_group(row['installation_id'])\n\n        target_timestamp = same_id.loc[row['game_session'], 'timestamp']\n\n        same_id_before = same_id.loc[same_id['timestamp'] < target_timestamp].copy()\n        same_id_before.sort_values('timestamp', inplace=True)\n\n        same_id_before['duration'] = (same_id_before['timestamp_end'] - same_id_before['timestamp']).dt.total_seconds()\n        same_id_before['duration'] = np.log1p(same_id_before['duration'])\n\n        h_feature = same_id_before.iloc[-num_history_step:][event_codes + titles + types + ['duration']]\n        h_feature = np.log1p(h_feature.values)\n\n        c_feature = (same_id.loc[row['game_session']][assessments].values != 0).astype(np.int32)\n\n        query_title = row['title']\n        success_exp = np.sum(same_id_before.query('title==@query_title')['correct'])\n        failure_exp = np.sum(same_id_before.query('title==@query_title')['incorrect'])\n\n        c_feature = np.append(c_feature, np.log1p(success_exp))\n        c_feature = np.append(c_feature, np.log1p(failure_exp))\n        c_feature = np.append(c_feature, (success_exp + 1) \/ (success_exp + failure_exp + 2) - 0.5)\n        c_feature = np.append(c_feature, (target_timestamp.hour - 12.0) \/ 10.0)\n\n        if len(h_feature) < num_history_step:\n            h_feature = np.pad(h_feature, ((num_history_step - len(h_feature), 0), (0, 0)),\n                               mode='constant', constant_values=0)\n\n        list_history.append(h_feature)\n        list_current.append(c_feature)\n\n    history = np.asarray(list_history)\n    current = np.asarray(list_current)\n\n    return history, current","a8f6ef4a":"def single_fold(dir_dataset: Path, dir_model: Path, num_history_step: int,\n                batch_size: int, seed: int, device: int, **kwargs):\n\n    random.seed(seed)\n    np.random.seed(seed)\n\n    tic = time.time()\n\n    sub = pd.read_csv(dir_dataset \/ 'sample_submission.csv')\n\n    test_installation_id = list(set(sub.installation_id))\n\n    print('test installation id: {}'.format(test_installation_id[:10]))\n\n    test = pd.read_csv(dir_dataset \/ 'test.csv')\n    test = test[test.installation_id.isin(test_installation_id)]\n    print('test shape: {}'.format(test.shape))\n\n    test.sort_values(['installation_id', 'timestamp'], inplace=True)\n    test_labels = test.drop_duplicates('installation_id', keep='last').copy()\n    test_labels.reset_index(drop=True, inplace=True)\n    test_labels['accuracy_group'] = -1  # dummy label\n\n    event_codes = pd.read_csv(dir_model \/ f'event_codes.csv')['event_code'].tolist()\n    titles = pd.read_csv(dir_model \/ 'media_sequence.csv')['title'].tolist()\n    types = ['Activity', 'Assessment', 'Clip', 'Game']\n    re_level = re.compile(r'.*\"level\":([0-9]+).*')\n\n    test['event_code'] = pd.Categorical(test['event_code'], categories=event_codes)\n    test['title'] = pd.Categorical(test['title'], categories=titles)\n    test['type'] = pd.Categorical(test['type'], categories=types)\n    test['f_level'] = test['event_data'].map(\n        lambda x: int(re.sub(re_level, '\\\\1', x)) + 1 if '\"level\"' in x else np.nan)\n\n    print(' test shape: {}'.format(test.shape))\n\n    model = DSB2019Net(len(event_codes + titles + types) + 1, **kwargs)\n\n    serializers.load_npz(dir_model \/ f'model_seed{seed}.npz', model)\n    model.to_cpu()\n\n    test_history, test_current = extract_features(test, test_labels, event_codes, titles, types, num_history_step)\n\n    test_dataset = DictDataset(history=test_history.astype(np.float32),\n                               query=test_current.astype(np.float32),\n                               targets=np.asarray(test_labels[['accuracy_group']], dtype=np.float32))\n\n    test_iter = chainer.iterators.SerialIterator(test_dataset, batch_size, repeat=False, shuffle=False)\n\n    thresholds = SharedThresholds()\n    thresholds.load(dir_model \/ f'thresholds_seed{seed}.txt')\n\n    dir_model.mkdir(exist_ok=True)\n\n    ThresholdEvaluator(test_iter, model, 'test', thresholds, device=device, is_submit=True,\n                       installation_id=test_labels['installation_id'],\n                       submission_name=f'submission_seed{seed}').evaluate()\n\n    elapsed_time = time.time() - tic\n    print('elapsed time: {:.1f} [min]'.format(elapsed_time \/ 60.0))\n\n\ndef main_nn(dir_dataset: Path, dir_model: Path, device: int, seeds_nn: str):\n\n    list_seed = [int(s) for s in seeds_nn.split(',')]\n\n    for seed in list_seed:\n\n        with open(str(dir_model \/ f'parameters_seed{seed}.json'), 'r') as f:\n            hyper_params = json.load(f)\n\n        single_fold(dir_dataset=dir_dataset,\n                    dir_model=dir_model,\n                    seed=seed,\n                    device=device,\n                    **hyper_params)","e262b1c2":"seeds_nn = '3048,3049,3050,3051,3052,3053,3054,3055,3056,3057'\n\nmain_nn(\n    dir_dataset=dir_dataset,\n    dir_model=dir_model,\n    device=-1,\n    seeds_nn=seeds_nn\n)","412b5aee":"def read_data(dir_dataset: Path, debug: bool):\n\n    start = time.time()\n    print('Start read data')\n\n    print('Reading train data....')\n    if debug:\n        print('debug mode !')\n        train = pd.read_csv(dir_dataset \/ 'train.csv', nrows=10000)\n        train_labels = pd.read_csv(dir_dataset \/ 'train_labels.csv', nrows=100)\n    else:\n        print('full data mode !')\n        train = pd.read_csv(dir_dataset \/ 'train.csv')\n        train_labels = pd.read_csv(dir_dataset \/ 'train_labels.csv')\n    print('Training.csv file have {} rows and {} columns'.format(train.shape[0], train.shape[1]))\n    print('Train_labels.csv file have {} rows and {} columns'.format(train_labels.shape[0], train_labels.shape[1]))\n\n    print('Reading test data....')\n    test = pd.read_csv(dir_dataset \/ 'test.csv')\n    print('Test.csv file have {} rows and {} columns'.format(test.shape[0], test.shape[1]))\n\n    print('Reading specs.csv file....')\n    specs = pd.read_csv(dir_dataset \/ 'specs.csv')\n    print('Specs.csv file have {} rows and {} columns'.format(specs.shape[0], specs.shape[1]))\n\n    print('Reading sample_submission.csv file....')\n    sample_submission = pd.read_csv(dir_dataset \/ 'sample_submission.csv')\n    print('Sample_submission.csv file have {} rows and {} columns'.format(\n        sample_submission.shape[0], sample_submission.shape[1]))\n\n    print(\"read data done, time - \", time.time() - start)\n    return train, test, train_labels, specs, sample_submission\n\n\ndef encode_title(train, test, train_labels):\n    start = time.time()\n\n    print(\"Start encoding data\")\n\n    str_concat = lambda x, y: str(x) + '_' + str(y)\n    sorted_list = lambda set_obj: sorted(list(set_obj))\n\n    # encode title\n    train['title_event_code'] = sorted_list(map(str_concat, train['title'], train['event_code']))\n    test['title_event_code'] = sorted_list(map(str_concat, test['title'], test['event_code']))\n    all_title_event_code = sorted_list(set(train[\"title_event_code\"].unique()).union(test[\"title_event_code\"].unique()))\n\n    train['type_world'] = sorted_list(map(str_concat, train['type'], train['world']))\n    test['type_world'] = sorted_list(map(str_concat, test['type'], test['world']))\n    all_type_world = sorted_list(set(train[\"type_world\"].unique()).union(test[\"type_world\"].unique()))\n\n    # make a list with all the unique 'titles' from the train and test set\n    list_of_user_activities = sorted_list(set(train['title'].unique()).union(set(test['title'].unique())))\n\n    # make a list with all the unique 'event_code' from the train and test set\n    list_of_event_code = sorted_list(set(train['event_code'].unique()).union(set(test['event_code'].unique())))\n    list_of_event_id = sorted_list(set(train['event_id'].unique()).union(set(test['event_id'].unique())))\n\n    # make a list with all the unique worlds from the train and test set\n    list_of_worlds = sorted_list(set(train['world'].unique()).union(set(test['world'].unique())))\n\n    # create a dictionary numerating the titles\n    activities_map = dict(zip(list_of_user_activities, np.arange(len(list_of_user_activities))))\n    activities_labels = dict(zip(np.arange(len(list_of_user_activities)), list_of_user_activities))\n    activities_world = dict(zip(list_of_worlds, np.arange(len(list_of_worlds))))\n    assess_titles = sorted_list(set(train[train['type'] == 'Assessment']['title'].value_counts().index).union(\n        set(test[test['type'] == 'Assessment']['title'].value_counts().index)))\n\n    # replace the text titles with the number titles from the dict\n    train['title'] = train['title'].map(activities_map)\n    test['title'] = test['title'].map(activities_map)\n    train['world'] = train['world'].map(activities_world)\n    test['world'] = test['world'].map(activities_world)\n    train_labels['title'] = train_labels['title'].map(activities_map)\n    win_code = dict(zip(activities_map.values(), (4100 * np.ones(len(activities_map))).astype('int')))\n    # then, it set one element, the 'Bird Measurer (Assessment)' as 4110, 10 more than the rest\n    win_code[activities_map['Bird Measurer (Assessment)']] = 4110\n    # convert text into datetime\n    train['timestamp'] = pd.to_datetime(train['timestamp'])\n    test['timestamp'] = pd.to_datetime(test['timestamp'])\n    print(\"End encoding data, time - \", time.time() - start)\n\n    event_data = {}\n    event_data[\"train_labels\"] = train_labels\n    event_data[\"win_code\"] = win_code\n    event_data[\"list_of_user_activities\"] = list_of_user_activities\n    event_data[\"list_of_event_code\"] = list_of_event_code\n    event_data[\"activities_labels\"] = activities_labels\n    event_data[\"assess_titles\"] = assess_titles\n    event_data[\"list_of_event_id\"] = list_of_event_id\n    event_data[\"all_title_event_code\"] = all_title_event_code\n    event_data[\"activities_map\"] = activities_map\n    event_data[\"all_type_world\"] = all_type_world\n\n    return train, test, event_data\n\n\ndef get_all_features(feature_dict, ac_data):\n    if len(ac_data['durations']) > 0:\n        feature_dict['installation_duration_mean'] = np.mean(ac_data['durations'])\n        feature_dict['installation_duration_sum'] = np.sum(ac_data['durations'])\n    else:\n        feature_dict['installation_duration_mean'] = 0\n        feature_dict['installation_duration_sum'] = 0\n\n    return feature_dict\n\n\ndef get_data(user_sample, event_data, test_set):\n    \"\"\"\n    The user_sample is a DataFrame from train or test where the only one\n    installation_id is filtered\n    And the test_set parameter is related with the labels processing, that is only requered\n    if test_set=False\n    \"\"\"\n    # Constants and parameters declaration\n    last_assesment = {}\n\n    last_activity = 0\n\n    user_activities_count = {'Clip': 0, 'Activity': 0, 'Assessment': 0, 'Game': 0}\n\n    assess_4020_acc_dict = {'Cauldron Filler (Assessment)_4020_accuracy': 0,\n                            'Mushroom Sorter (Assessment)_4020_accuracy': 0,\n                            'Bird Measurer (Assessment)_4020_accuracy': 0,\n                            'Chest Sorter (Assessment)_4020_accuracy': 0}\n\n    game_time_dict = {'Clip_gametime': 0, 'Game_gametime': 0,\n                      'Activity_gametime': 0, 'Assessment_gametime': 0}\n\n    accuracy_groups = {0: 0, 1: 0, 2: 0, 3: 0}\n    all_assessments = []\n    accumulated_accuracy_group = 0\n    accumulated_accuracy = 0\n    accumulated_correct_attempts = 0\n    accumulated_uncorrect_attempts = 0\n    accumulated_actions = 0\n\n    # Newly added features\n    accumulated_game_miss = 0\n    Cauldron_Filler_4025 = 0\n    mean_game_round = 0\n    mean_game_duration = 0\n    mean_game_level = 0\n    Assessment_mean_event_count = 0\n    Game_mean_event_count = 0\n    Activity_mean_event_count = 0\n    chest_assessment_uncorrect_sum = 0\n\n    counter = 0\n    durations = []\n    durations_game = []\n    durations_activity = []\n    last_accuracy_title = {'acc_' + title: -1 for title in event_data[\"assess_titles\"]}\n    last_game_time_title = {'lgt_' + title: 0 for title in event_data[\"assess_titles\"]}\n    ac_game_time_title = {'agt_' + title: 0 for title in event_data[\"assess_titles\"]}\n    ac_true_attempts_title = {'ata_' + title: 0 for title in event_data[\"assess_titles\"]}\n    ac_false_attempts_title = {'afa_' + title: 0 for title in event_data[\"assess_titles\"]}\n    event_code_count: dict[str, int] = {ev: 0 for ev in event_data[\"list_of_event_code\"]}\n    event_code_proc_count = {str(ev) + \"_proc\" : 0. for ev in event_data[\"list_of_event_code\"]}\n    event_id_count: dict[str, int] = {eve: 0 for eve in event_data[\"list_of_event_id\"]}\n    title_count: dict[str, int] = {eve: 0 for eve in event_data[\"activities_labels\"].values()}\n    title_event_code_count: dict[str, int] = {t_eve: 0 for t_eve in event_data[\"all_title_event_code\"]}\n    type_world_count: dict[str, int] = {w_eve: 0 for w_eve in event_data[\"all_type_world\"]}\n    session_count = 0\n\n    # iterates through each session of one installation_id\n    for i, session in user_sample.groupby('game_session', sort=False):\n        # i = game_session_id\n        # session is a DataFrame that contain only one game_session\n        # get some sessions information\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]\n        session_title_text = event_data[\"activities_labels\"][session_title]\n\n        if session_type == \"Activity\":\n            Activity_mean_event_count = (Activity_mean_event_count + session['event_count'].iloc[-1]) \/ 2.0\n\n        if session_type == \"Game\":\n            Game_mean_event_count = (Game_mean_event_count + session['event_count'].iloc[-1]) \/ 2.0\n\n            game_s = session[session.event_code == 2030]\n            misses_cnt = cnt_miss(game_s)\n            accumulated_game_miss += misses_cnt\n\n            try:\n                game_round = json.loads(session['event_data'].iloc[-1])[\"round\"]\n                mean_game_round = (mean_game_round + game_round) \/ 2.0\n            except:\n                pass\n\n            try:\n                game_duration = json.loads(session['event_data'].iloc[-1])[\"duration\"]\n                mean_game_duration = (mean_game_duration + game_duration) \/ 2.0\n            except:\n                pass\n\n            try:\n                game_level = json.loads(session['event_data'].iloc[-1])[\"level\"]\n                mean_game_level = (mean_game_level + game_level) \/ 2.0\n            except:\n                pass\n\n        # for each assessment, and only this kind off session, the features below are processed\n        # and a register are generated\n        if (session_type == 'Assessment') & (test_set or len(session) > 1):\n            # search for event_code 4100, that represents the assessments trial\n            all_attempts = session.query(f'event_code == {event_data[\"win_code\"][session_title]}')\n            # then, check the numbers of wins and the number of losses\n            true_attempts = all_attempts['event_data'].str.contains('true').sum()\n            false_attempts = all_attempts['event_data'].str.contains('false').sum()\n            # copy a dict to use as feature template, it's initialized with some itens:\n            # {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n            features = user_activities_count.copy()\n            features.update(last_accuracy_title.copy())\n            features.update(event_code_count.copy())\n            features.update(title_count.copy())\n            features.update(game_time_dict.copy())\n            features.update(event_id_count.copy())\n            features.update(title_event_code_count.copy())\n            features.update(assess_4020_acc_dict.copy())\n            features.update(type_world_count.copy())\n            features.update(last_game_time_title.copy())\n            features.update(ac_game_time_title.copy())\n            features.update(ac_true_attempts_title.copy())\n            features.update(ac_false_attempts_title.copy())\n\n            features.update(event_code_proc_count.copy())\n            features['installation_session_count'] = session_count\n            features['accumulated_game_miss'] = accumulated_game_miss\n            features['mean_game_round'] = mean_game_round\n            features['mean_game_duration'] = mean_game_duration\n            features['mean_game_level'] = mean_game_level\n            features['Assessment_mean_event_count'] = Assessment_mean_event_count\n            features['Game_mean_event_count'] = Game_mean_event_count\n            features['Activity_mean_event_count'] = Activity_mean_event_count\n            features['chest_assessment_uncorrect_sum'] = chest_assessment_uncorrect_sum\n\n            variety_features = [('var_event_code', event_code_count),\n                                ('var_event_id', event_id_count),\n                                ('var_title', title_count),\n                                ('var_title_event_code', title_event_code_count),\n                                ('var_type_world', type_world_count)]\n\n            for name, dict_counts in variety_features:\n                arr = np.array(list(dict_counts.values()))\n                features[name] = np.count_nonzero(arr)\n\n            # get installation_id for aggregated features\n            features['installation_id'] = session['installation_id'].iloc[-1]\n            # add title as feature, remembering that title represents the name of the game\n            features['session_title'] = session['title'].iloc[0]\n            # the 4 lines below add the feature of the history of the trials of this player\n            # this is based on the all time attempts so far, at the moment of this assessment\n            features['accumulated_correct_attempts'] = accumulated_correct_attempts\n            features['accumulated_uncorrect_attempts'] = accumulated_uncorrect_attempts\n            accumulated_correct_attempts += true_attempts\n            accumulated_uncorrect_attempts += false_attempts\n\n            # ----------------------------------------------\n            ac_true_attempts_title['ata_' + session_title_text] += true_attempts\n            ac_false_attempts_title['afa_' + session_title_text] += false_attempts\n\n            last_game_time_title['lgt_' + session_title_text] = session['game_time'].iloc[-1]\n            ac_game_time_title['agt_' + session_title_text] += session['game_time'].iloc[-1]\n            # ----------------------------------------------\n\n            # the time spent in the app so far\n            if durations == []:\n                features['duration_mean'] = 0\n                features['duration_std'] = 0\n                features['last_duration'] = 0\n                features['duration_max'] = 0\n            else:\n                features['duration_mean'] = np.mean(durations)\n                features['duration_std'] = np.std(durations)\n                features['last_duration'] = durations[-1]\n                features['duration_max'] = np.max(durations)\n            durations.append((session.iloc[-1, 2] - session.iloc[0, 2]).seconds)\n\n            if durations_game == []:\n                features['duration_game_mean'] = 0\n                features['duration_game_std'] = 0\n                features['game_last_duration'] = 0\n                features['game_max_duration'] = 0\n            else:\n                features['duration_game_mean'] = np.mean(durations_game)\n                features['duration_game_std'] = np.std(durations_game)\n                features['game_last_duration'] = durations_game[-1]\n                features['game_max_duration'] = np.max(durations_game)\n\n            if durations_activity == []:\n                features['duration_activity_mean'] = 0\n                features['duration_activity_std'] = 0\n                features['game_activity_duration'] = 0\n                features['game_activity_max'] = 0\n            else:\n                features['duration_activity_mean'] = np.mean(durations_activity)\n                features['duration_activity_std'] = np.std(durations_activity)\n                features['game_activity_duration'] = durations_activity[-1]\n                features['game_activity_max'] = np.max(durations_activity)\n\n            # the accuracy is the all time wins divided by the all time attempts\n            features['accumulated_accuracy'] = accumulated_accuracy \/ counter if counter > 0 else 0\n            # --------------------------\n            features['Cauldron_Filler_4025'] = Cauldron_Filler_4025 \/ counter if counter > 0 else 0\n\n            Assess_4025 = session[(session.event_code == 4025) & (session.title == 'Cauldron Filler (Assessment)')]\n            true_attempts_ = Assess_4025['event_data'].str.contains('true').sum()\n            false_attempts_ = Assess_4025['event_data'].str.contains('false').sum()\n\n            if (true_attempts_ + false_attempts_) != 0:\n                cau_assess_accuracy_ = true_attempts_ \/ (true_attempts_ + false_attempts_)\n            else:\n                cau_assess_accuracy_ = 0\n            Cauldron_Filler_4025 += cau_assess_accuracy_\n\n            chest_assessment_uncorrect_sum += len(session[session.event_id == \"df4fe8b6\"])\n\n            Assessment_mean_event_count = (Assessment_mean_event_count + session['event_count'].iloc[-1]) \/ 2.0\n            # ----------------------------\n            accuracy = true_attempts \/ (true_attempts + false_attempts) if (true_attempts + false_attempts) != 0 else 0\n            accumulated_accuracy += accuracy\n            last_accuracy_title['acc_' + session_title_text] = accuracy\n            # a feature of the current accuracy categorized\n            # it is a counter of how many times this player was in each accuracy group\n            if accuracy == 0:\n                features['accuracy_group'] = 0\n            elif accuracy == 1:\n                features['accuracy_group'] = 3\n            elif accuracy == 0.5:\n                features['accuracy_group'] = 2\n            else:\n                features['accuracy_group'] = 1\n            features.update(accuracy_groups)\n            accuracy_groups[features['accuracy_group']] += 1\n            # mean of the all accuracy groups of this player\n            features['accumulated_accuracy_group'] = accumulated_accuracy_group \/ counter if counter > 0 else 0\n            accumulated_accuracy_group += features['accuracy_group']\n            # how many actions the player has done so far, it is initialized as 0 and updated some lines below\n            features['accumulated_actions'] = accumulated_actions\n\n            # there are some conditions to allow this features to be inserted in the datasets\n            # if it's a test set, all sessions belong to the final dataset\n            # it it's a train, needs to be passed throught this clausule\n            # : session.query(f'event_code == {win_code[session_title]}')\n            # that means, must exist an event_code 4100 or 4110\n            if test_set:\n                last_assesment = features.copy()\n\n            if true_attempts + false_attempts > 0:\n                all_assessments.append(features)\n\n            counter += 1\n\n        if session_type == 'Game':\n            durations_game.append((session.iloc[-1, 2] - session.iloc[0, 2]).seconds)\n\n        if session_type == 'Activity':\n            durations_activity.append((session.iloc[-1, 2] - session.iloc[0, 2]).seconds)\n\n        session_count += 1\n\n        # this piece counts how many actions was made in each event_code so far\n        def update_counters(counter: dict, col: str):\n            num_of_session_count = Counter(session[col])\n            for k in num_of_session_count.keys():\n                x = k\n                if col == 'title':\n                    x = event_data[\"activities_labels\"][k]\n                counter[x] += num_of_session_count[k]\n            return counter\n\n        def update_proc(count: dict):\n            res = {}\n            for k, val in count.items():\n                res[str(k) + \"_proc\"] = (float(val) * 100.0) \/ accumulated_actions\n            return res\n\n        event_code_count = update_counters(event_code_count, \"event_code\")\n\n        event_id_count = update_counters(event_id_count, \"event_id\")\n        title_count = update_counters(title_count, 'title')\n        title_event_code_count = update_counters(title_event_code_count, 'title_event_code')\n        type_world_count = update_counters(type_world_count, 'type_world')\n\n        assess_4020_acc_dict = get_4020_acc(session, assess_4020_acc_dict, event_data)\n        game_time_dict[session_type + '_gametime'] = (game_time_dict[session_type + '_gametime'] + (\n                    session['game_time'].iloc[-1] \/ 1000.0)) \/ 2.0\n\n        # counts how many actions the player has done so far, used in the feature of the same name\n        accumulated_actions += len(session)\n        event_code_proc_count = update_proc(event_code_count)\n\n        if last_activity != session_type:\n            user_activities_count[session_type] += 1\n            last_activitiy = session_type\n\n            # if it't the test_set, only the last assessment must be predicted, the previous are scraped\n    if test_set:\n        return last_assesment, all_assessments\n    # in the train_set, all assessments goes to the dataset\n    return all_assessments\n\n\ndef cnt_miss(df):\n    cnt = 0\n    for e in range(len(df)):\n        x = df['event_data'].iloc[e]\n        y = json.loads(x)['misses']\n        cnt += y\n    return cnt\n\n\ndef get_4020_acc(df, counter_dict, event_data):\n    for e in ['Cauldron Filler (Assessment)', 'Bird Measurer (Assessment)',\n              'Mushroom Sorter (Assessment)', 'Chest Sorter (Assessment)']:\n        Assess_4020 = df[(df.event_code == 4020) & (df.title == event_data[\"activities_map\"][e])]\n        true_attempts_ = Assess_4020['event_data'].str.contains('true').sum()\n        false_attempts_ = Assess_4020['event_data'].str.contains('false').sum()\n\n        if (true_attempts_ + false_attempts_) != 0:\n            measure_assess_accuracy_ = true_attempts_ \/ (true_attempts_ + false_attempts_)\n        else:\n            measure_assess_accuracy_ = 0\n        counter_dict[e + \"_4020_accuracy\"] += (counter_dict[e + \"_4020_accuracy\"] + measure_assess_accuracy_) \/ 2.0\n\n    return counter_dict\n\n\ndef get_users_data(users_list, return_dict,  event_data, test_set):\n\n    if test_set:\n        for user in users_list:\n            return_dict.append(get_data(user, event_data, test_set))\n    else:\n        answer = []\n        for user in users_list:\n            answer += get_data(user, event_data, test_set)\n        return_dict += answer\n\n\ndef get_data_parallel(users_list, event_data, test_set):\n\n    manager = multiprocessing.Manager()\n    return_dict = manager.list()\n    threads_number = event_data[\"process_numbers\"]\n    data_len = len(users_list)\n    processes = []\n    cur_start = 0\n    cur_stop = 0\n    for index in range(threads_number):\n        cur_stop += (data_len-1) \/\/ threads_number\n\n        if index != (threads_number - 1):\n            p = Process(target=get_users_data, args=(users_list[cur_start:cur_stop], return_dict, event_data, test_set))\n        else:\n            p = Process(target=get_users_data, args=(users_list[cur_start:], return_dict, event_data, test_set))\n\n        processes.append(p)\n        cur_start = cur_stop\n\n    for proc in processes:\n        proc.start()\n\n    for proc in processes:\n        proc.join()\n\n    return list(return_dict)\n\n\ndef get_train_and_test(train, test, event_data):\n\n    start = time.time()\n    print(\"Start get_train_and_test\")\n\n    compiled_train = []\n    compiled_test = []\n\n    user_train_list = []\n    user_test_list = []\n\n    stride_size = event_data[\"strides\"]\n    for i, (ins_id, user_sample) in enumerate(tqdm(train.groupby('installation_id', sort=False), miniters=100)):\n        user_train_list.append(user_sample)\n        if (i + 1) % stride_size == 0:\n            compiled_train += get_data_parallel(user_train_list, event_data, False)\n            del user_train_list\n            user_train_list = []\n\n    if len(user_train_list) > 0:\n        compiled_train += get_data_parallel(user_train_list, event_data, False)\n        del user_train_list\n\n    for i, (ins_id, user_sample) in enumerate(tqdm(test.groupby('installation_id', sort=False), miniters=100)):\n        user_test_list.append(user_sample)\n        if (i + 1) % stride_size == 0:\n            compiled_test += get_data_parallel(user_test_list, event_data, True)\n            del user_test_list\n            user_test_list = []\n\n    if len(user_test_list) > 0:\n        compiled_test += get_data_parallel(user_test_list, event_data, True)\n        del user_test_list\n\n    reduce_train = pd.DataFrame(compiled_train)\n\n    reduce_test = [x[0] for x in compiled_test]\n\n    reduce_train_from_test = []\n    for i in [x[1] for x in compiled_test]:\n        reduce_train_from_test += i\n\n    reduce_test = pd.DataFrame(reduce_test)\n    reduce_train_from_test = pd.DataFrame(reduce_train_from_test)\n    print(\"End get_train_and_test, time - \", time.time() - start)\n    return reduce_train, reduce_test, reduce_train_from_test\n\n\ndef get_train_and_test_single_proc(train, test, event_data):\n\n    compiled_train = []\n    compiled_test = []\n    compiled_test_his = []\n    for ins_id, user_sample in tqdm(train.groupby('installation_id', sort=False), miniters=100):\n        compiled_train += get_data(user_sample, event_data, False)\n    for ins_id, user_sample in tqdm(test.groupby('installation_id', sort=False), miniters=100):\n        test_data = get_data(user_sample, event_data, True)\n        compiled_test.append(test_data[0])\n        compiled_test_his += test_data[1]\n\n    reduce_train = pd.DataFrame(compiled_train)\n    reduce_test = pd.DataFrame(compiled_test)\n    reduce_test_his = pd.DataFrame(compiled_test_his)\n\n    return reduce_train, reduce_test, reduce_test_his\n\n\ndef predict(sample_submission, y_pred, file_name='submission.csv'):\n    sample_submission['accuracy_group'] = y_pred\n    sample_submission['accuracy_group'] = sample_submission['accuracy_group'].astype(int)\n    sample_submission.to_csv(file_name, index=False)\n    print(sample_submission['accuracy_group'].value_counts(normalize=True))\n\n\ndef get_random_assessment(reduce_train):\n    used_idx = []\n    for iid in tqdm(set(reduce_train['installation_id']), miniters=200):\n        list_ = list(reduce_train[reduce_train['installation_id'] == iid].index)\n        cur = random.choices(list_, k=1)[0]\n        used_idx.append(cur)\n    reduce_train_t = reduce_train.loc[used_idx]\n    return reduce_train_t, used_idx","8deaf55d":"# function to exclude columns from the train and test set if the mean is different,\n# also adjust test column by a factor to simulate the same distribution\ndef exclude(reduce_train, reduce_test, features):\n    to_exclude = []\n    ajusted_test = reduce_test.copy()\n    for feature in features:\n        if feature not in ['accuracy_group', 'installation_id', 'session_title']:\n            data = reduce_train[feature]\n            train_mean = data.mean()\n            data = ajusted_test[feature]\n            test_mean = data.mean()\n            try:\n                ajust_factor = train_mean \/ test_mean\n                if ajust_factor > 10 or ajust_factor < 0.1:  # or error > 0.01:\n                    to_exclude.append(feature)\n                    print(feature)\n                else:\n                    ajusted_test[feature] *= ajust_factor\n            except:\n                to_exclude.append(feature)\n                print(feature)\n    return to_exclude, ajusted_test\n\n\ndef remove_correlated_features(reduce_train, features):\n    counter = 0\n    to_remove = []\n    for feat_a in features:\n        for feat_b in features:\n            if feat_a != feat_b and feat_a not in to_remove and feat_b not in to_remove:\n                c = np.corrcoef(reduce_train[feat_a], reduce_train[feat_b])[0][1]\n                if c > 0.995:\n                    counter += 1\n                    to_remove.append(feat_b)\n                    print('{}: FEAT_A: {} FEAT_B: {} - Correlation: {}'.format(counter, feat_a, feat_b, c))\n    return to_remove","5be1ed8b":"@jit\ndef qwk(a1, a2):\n    max_rat = 3\n    a1 = np.asarray(a1, dtype=int)\n    a2 = np.asarray(a2, dtype=int)\n\n    hist1 = np.zeros((max_rat + 1,))\n    hist2 = np.zeros((max_rat + 1,))\n\n    o = 0\n    for k in range(a1.shape[0]):\n        i, j = a1[k], a2[k]\n        hist1[i] += 1\n        hist2[j] += 1\n        o += (i - j) * (i - j)\n\n    e = 0\n    for i in range(max_rat + 1):\n        for j in range(max_rat + 1):\n            e += hist1[i] * hist2[j] * (i - j) * (i - j)\n\n    e = e \/ a1.shape[0]\n\n    return 1 - o \/ e\n\n\nclass MyModel:\n\n    def __init__(self, train_all, features, list_seed):\n        self.bin_models = []\n        self.models = []\n        self.rounders = []\n        self.features = features\n        self.list_seed = list_seed\n\n        params_origin = {\n            'num_boost_round': 1000,\n            'boosting_type': 'gbdt',  # 'dart', 'dart', 'gbdt'\n            'metric': \"None\",\n            'objective': 'regression',  # regression',quantile fair huber poisson\n            'n_jobs': -1,\n            'num_leaves': 32,\n            'learning_rate': 0.08,\n            'max_depth': 14,\n            'lambda_l1': 2.0,\n            'lambda_l2': 1.0,\n            'bagging_fraction': 0.90,\n            'bagging_freq': 1,\n            'feature_fraction': 0.90,\n            'early_stopping_rounds': 300,\n            'verbose': 0,\n        }\n\n        oof_rmse_scores = []\n        oof_cohen_scores = []\n\n        target = 'accuracy_group'\n\n        for model_number, seed in enumerate(self.list_seed):\n\n            random.seed(seed)\n            np.random.seed(seed)\n\n            print(f'model_number: {model_number}')\n\n            installation_id_all = sorted(list(set(train_all['installation_id'])))\n            random.shuffle(installation_id_all)\n\n            num_train = int(len(installation_id_all) * 0.8)\n            train_installation_id = installation_id_all[:num_train]\n            valid_installation_id = installation_id_all[num_train:]\n\n            train = train_all.query('installation_id in @train_installation_id')\n            valid = train_all.query('installation_id in @valid_installation_id')\n\n            print('train installation id: {}'.format(train_installation_id[:10]))\n            print('valid installation id: {}'.format(valid_installation_id[:10]))\n\n            x_train, x_valid = train[features], valid[features]\n            y_train, y_valid = train[target], valid[target]\n            x_train.drop('installation_id', inplace=True, axis=1)\n\n            x_valid, idx_val = get_random_assessment(x_valid)\n            x_valid.drop('installation_id', inplace=True, axis=1)\n            y_valid = y_valid.loc[idx_val]\n\n            train_set = lgb.Dataset(x_train, y_train, categorical_feature=['session_title'])\n            val_set = lgb.Dataset(x_valid, y_valid, categorical_feature=['session_title'])\n\n            params = dict(params_origin)\n            params['seed'] = seed\n\n            model = lgb.train(params, train_set,\n                              valid_sets=[train_set, val_set], verbose_eval=10,\n                              feval=eval_qwk_lgb_metric)\n\n            self.models.append(model)\n            reg_pred = model.predict(x_valid)\n\n            optR = OptimizedRounder_LGBM()\n            optR.fit(reg_pred, y_valid)\n            coef = optR.coefficients()\n            self.rounders.append(optR)\n\n            oof_rmse_score = np.sqrt(mean_squared_error(y_valid, reg_pred))\n            oof_cohen_score = qwk(y_valid, optR.predict(reg_pred, coef))\n\n            print('RMSE:', oof_rmse_score)\n            print(' QWK:', oof_cohen_score)\n\n            oof_rmse_scores.append(oof_rmse_score)\n            oof_cohen_scores.append(oof_cohen_score)\n\n        print('mean RMSE: ', sum(oof_rmse_scores) \/ len(oof_rmse_scores))\n        print('mean  QWK: ', sum(oof_cohen_scores) \/ len(oof_cohen_scores))\n\n    def predict(self, test):\n\n        print('number of models: {}'.format(len(self.models)))\n\n        current_features = [x for x in self.features if x not in ['installation_id']]\n\n        list_y_pred = list()\n\n        for i in range(len(self.list_seed)):\n\n            model = self.models[i]\n            coef = self.rounders[i].coefficients()\n\n            y_pred_i = self.rounders[i].predict(model.predict(test[current_features]), coef)\n            list_y_pred.append(np.squeeze(y_pred_i))\n\n        y_preds = np.stack(list_y_pred, axis=1)\n\n        assert len(y_preds) == len(test)\n        assert y_preds.shape[1] == len(self.list_seed)\n\n        print(y_preds[:10])\n\n        return y_preds\n\n\nclass OptimizedRounder_LGBM(object):\n    \"\"\"\n    An optimizer for rounding thresholds\n    to maximize Quadratic Weighted Kappa (QWK) score\n    # https:\/\/www.kaggle.com\/naveenasaithambi\/optimizedrounder-improved\n    \"\"\"\n\n    def __init__(self):\n        self.coef_ = 0\n\n    def _kappa_loss(self, coef, X, y):\n        \"\"\"\n        Get loss according to\n        using current coefficients\n\n        :param coef: A list of coefficients that will be used for rounding\n        :param X: The raw predictions\n        :param y: The ground truth labels\n        \"\"\"\n        X_p = pd.cut(X, [-np.inf] + list(np.sort(coef)) + [np.inf], labels=[0, 1, 2, 3])\n\n        return -qwk(y, X_p)\n\n    def fit(self, X, y):\n        \"\"\"\n        Optimize rounding thresholds\n\n        :param X: The raw predictions\n        :param y: The ground truth labels\n        \"\"\"\n        loss_partial = partial(self._kappa_loss, X=X, y=y)\n        initial_coef = [1.10, 1.72, 2.25]\n        self.coef_ = sp.optimize.minimize(loss_partial, initial_coef,\n                                          method='nelder-mead', options={'maxiter': 5000})\n\n    def predict(self, X, coef):\n        \"\"\"\n        Make predictions with specified thresholds\n\n        :param X: The raw predictions\n        :param coef: A list of coefficients that will be used for rounding\n        \"\"\"\n        return pd.cut(X, [-np.inf] + list(np.sort(coef)) + [np.inf], labels=[0, 1, 2, 3])\n\n    def coefficients(self):\n        \"\"\"\n        Return the optimized coefficients\n        \"\"\"\n        return self.coef_['x']\n\n\ndef eval_qwk_lgb_metric(y_pred, true):\n    y_true = true.label\n\n    dist = Counter(y_true)\n    for k in dist:\n        dist[k] \/= len(y_true)\n\n    acum = 0\n    bound = {}\n    for i in range(3):\n        acum += dist[i]\n        bound[i] = np.percentile(y_pred, acum * 100)\n\n    def classify(x):\n        if x <= bound[0]:\n            return 0\n        elif x <= bound[1]:\n            return 1\n        elif x <= bound[2]:\n            return 2\n        else:\n            return 3\n\n    y_pred = np.array(list(map(classify, y_pred)))\n\n    return 'cappa', qwk(y_true, y_pred), True\n\n\ndef main_lgbm(dir_dataset: Path, debug: Path, seeds_lgbm: str):\n\n    list_seed = [int(s) for s in seeds_lgbm.split(',')]\n\n    in_kaggle = False\n    random.seed(42)\n    np.random.seed(42)\n    start_program = time.time()\n\n    event_data = {}\n    if in_kaggle:\n        event_data[\"strides\"] = 300\n        event_data[\"process_numbers\"] = 4\n    else:\n        event_data[\"strides\"] = 300\n        event_data[\"process_numbers\"] = 3\n\n    # read data\n    train, test, train_labels, specs, sample_submission = read_data(dir_dataset, debug)\n    # get useful dict with mapping encode\n    train, test, event_data_update = encode_title(train, test, train_labels)\n    event_data.update(event_data_update)\n\n    # reduce_train, reduce_test, reduce_train_from_test = get_train_and_test_single_proc(train, test, event_data)\n    reduce_train, reduce_test, reduce_train_from_test = get_train_and_test(train, test, event_data)\n    dels = [train, test]\n    del dels\n\n    sample_submission = pd.read_csv(dir_dataset \/ 'sample_submission.csv')\n\n    reduce_train.sort_values(\"installation_id\", axis=0, ascending=True, inplace=True, na_position='last')\n    reduce_test.sort_values(\"installation_id\", axis=0, ascending=True, inplace=True, na_position='last')\n\n    reduce_train = pd.concat([reduce_train, reduce_train_from_test], ignore_index=True)\n\n    old_features = list(reduce_train.columns[0:99]) + list(reduce_train.columns[886:])\n    el_features = ['accuracy_group', 'accuracy', 'installation_id']\n    old_features = [col for col in old_features if col not in el_features]\n    event_id_features = list(reduce_train.columns[99:483])\n    title_event_code_cross = list(reduce_train.columns[483:886])\n    features = old_features + event_id_features + title_event_code_cross\n\n    to_remove = remove_correlated_features(reduce_train, features)\n    features = [col for col in features if col not in to_remove]\n    print('Training with {} features'.format(len(features)))\n\n    features.append('installation_id')\n\n    # to avoid below error\n    # lightgbm.basic.LightGBMError: Do not support special JSON characters in feature name.\n    features = [str(s).replace(',', '__') for s in features]\n    reduce_train.columns = [str(s).replace(',', '__') for s in reduce_train.columns]\n    reduce_test.columns = [str(s).replace(',', '__') for s in reduce_test.columns]\n\n    to_exclude, ajusted_test = exclude(reduce_train, reduce_test, features)\n    features = [col for col in features if col not in to_exclude]\n\n    my_model = MyModel(reduce_train, features, list_seed=list_seed)\n    train_pred = my_model.predict(reduce_train)\n    test_pred = my_model.predict(ajusted_test)\n\n    y = reduce_train['accuracy_group'].values\n\n    for i, seed in enumerate(list_seed):\n\n        train_pred_round = train_pred[:, i]\n        test_pred_round = test_pred[:, i]\n\n        print('train cappa rounding: {:.4f}'.format(qwk(y, train_pred_round)))\n\n        predict(sample_submission, test_pred_round, f'submission_seed{seed}.csv')\n\n    print(\"Program full time:\", time.time() - start_program)","e85ec33b":"seeds_lgbm = '1048,1049,1050,1051,1052,1053,1054,1055,1056,1057' \\\n             ',1058,1059,1060,1061,1062,1063,1064,1065,1066'\n\nmain_lgbm(\n    dir_dataset=dir_dataset,\n    debug=debug_lgbm,\n    seeds_lgbm=seeds_lgbm\n)","f1beba73":"def ensemble(submissions_all: pd.DataFrame, weights):\n\n    assert submissions_all.shape[1] == len(weights)\n\n    vote_table_all = np.zeros((len(submissions_all), 4))\n\n    for i in range(len(weights)):\n\n        vote_table = np.zeros((len(submissions_all), 4))\n        vote_table[np.arange(len(submissions_all)), submissions_all.iloc[:, i]] = 1.0\n\n        vote_table_all += vote_table * weights[i]\n\n    display(pd.DataFrame(vote_table_all[:20]))\n\n    return np.argmax(vote_table_all, axis=1)","ca285843":"list_seed_lgbm = [int(s) for s in seeds_lgbm.split(',')]\nlist_seed_nn = [int(s) for s in seeds_nn.split(',')]\n\nseed_str = seeds_lgbm + ',' + seeds_nn\nlist_seed = [int(s) for s in seed_str.split(',')]\n\nsubmission1 = pd.read_csv(f'submission_seed{list_seed[0]}.csv')['installation_id']\n\nsubmission_all = pd.concat([pd.read_csv(f'submission_seed{seed}.csv')[['accuracy_group']] for seed in list_seed],\n                           axis=1)\n\nensemble_weights = np.append(np.full(len(list_seed_lgbm), 0.25),\n                             np.ones(len(list_seed_nn)))\n\nensemble_pred = ensemble(submission_all, ensemble_weights)\n\nsubmission = pd.DataFrame()\nsubmission['installation_id'] = submission1\nsubmission['accuracy_group'] = ensemble_pred\nsubmission.to_csv('submission.csv', index=False)\n\nprint('prediction counts')\nprint(submission['accuracy_group'].value_counts())","faa21aea":"# 7. Conclusion\nIn this competition, I employed self-attention models and Light GBM.\nEmsembling with them improved public LB score more.\nIt was interesting that self-attention models could be used for tabular data competition.\n\nEven though my approach would have potential to win this competition, I lost my way at somewhere.\nI was misled by public LB and it caused shake-down.\nI want to learn from this failure and try to win next competition.","e036b9ff":"This qwk function was shared by CPMP ( @cpmpml ).\n* Fast QWK Computation<br>https:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/114133#latest-660168","96489bd7":"# 5. Light GBM\nI learned many things from public kernel.\nEspecially, below three kernels were informative for me.\nI integreted these kernels and adjusted a little.\n\nAndrew Lukyanenko ( @artgor ) created regression based kernel.\nIt tought us a good way to handle QWK.\n* Quick and dirty regression<br>https:\/\/www.kaggle.com\/artgor\/quick-and-dirty-regression\n\nBhavika ( @bhavikapanara ) share additional features which can boost public LB.\n* 2019 DSB - With more features (QWK-0.549)<br>https:\/\/www.kaggle.com\/bhavikapanara\/2019-dsb-with-more-features-qwk-0-549\n\nMemento Mori ( @nxrprime ) integrated above ideas and create nice script based kernel (I personally prefer script format rather than notebook).\n* simple<br>https:\/\/www.kaggle.com\/nxrprime\/simple\n\n## 5.1 Functions and Classes\nAll functions and classes for Light GBM are implemented here.","39cd1bb7":"# 3. Setup\nFile paths are setup here.\nI used to switch directories for local debug.\nPlease set `debug_lgbm = True` for dry-run (trial of training with small data).","d31621fe":"# 6. Ensemble\nAll pre-submissions are ensembled here.\nI implemented weighted voting.","13e23d0c":"## 4.2 Model definition\nThe network of self-attention models is implemented here.\nThis architecture is so-called Transfomer.\nI empoyed Encoder part of it.\n\nSubset of Transfomer is forked from below.\n* Transformer - Attention Is All You Need<br>https:\/\/github.com\/soskek\/attention_is_all_you_need<br>Copyright (c) 2017, Sosuke Kobayashi","ad728cf0":"## 4.5 Execution\nPretrained models are loaded and predictions are executed.\n10 pre-submisions are saved on local strage.","7df4c5bf":"## 4.4 Main function\nData Loading and simple preprocessing are implemented here.","71e89126":"# 1. Introduction\nAt the end of this competition, I was 9th place on public LB and expected to win this competition.\nHowever, I could not prevent shake-down, and dropped down to 37th on private LB.\nEven though private score was not impressive one, I would like to share my solution for thanks to kernel authers and OSS developpers.\n\nMy approach consists of two types of models.\nThe one is neural networks (self-attention models), and the other is Light GBM.\nI mainly worked on improving self-attention models.\nFor Light GBM, I integreted public kernels and modified only some parts.\nFinally, I ensembled both types of models.\n# 2. Import packages\nAll packages are imported here.","522243fd":"Final submission (submission.csv) is generated here.\nSince, self-attention models achieved higher score on public LB, I gave higher weight with them.\nThe each weight of self-attention model is 1.0, and each weight of Light GBM model is 0.25.\nConsidering number of models, each sample get 14.75 weight in total (1.0 x 10 + 0.25 x 19).","5a05adc8":"# \uff14. Self-Attention Model\nSelf-Attention Models are the core components of my solution.\nThese models were trained offline, and uploaded for prediction.\n## 4.1 Utility function\nUtility functions are implemented here.\nEvaluate function is forked from Aman Arora ( @aroraaman )'s implementation.\n* Quadratic Kappa Metric explained in 5 simple steps<br>https:\/\/www.kaggle.com\/aroraaman\/quadratic-kappa-metric-explained-in-5-simple-steps","44f0b5f8":"It was obvious that scaling by ajust_factor was risky.\nWhan I chose two submissions at the end of the competition, I chose the one which used ajust_factor and the other one which didn't use ajust_factor.","6effa340":"Optimized Rounder is useful module to tune thresholds. I forked it from Naveen Asaithambi ( @naveenasaithambi )'s implementation.\n* OptimizedRounder() - Improved<br>https:\/\/www.kaggle.com\/naveenasaithambi\/optimizedrounder-improved","057b9bf9":"Evaluator is used for generating a submission.\nThis is used for validation during training too.","650b57f4":"The entire model receive query features and history features.\nEncoder layer extract high level features from history and they are concatenated with query features.\nSubsequently, output values are calculated throught FC layers.","02e029d0":"## 4.3 Feature Extraction\nSince history data is given to the model directly, feature extraction is very simple.\n\nAs a history feature, the number of event code, title, types are counted for each game_session.\nDuration of geme_session is also calculated and concatenated with history features.\n\nAs a query feature, the number of `correct` and `incorrect` are counted respectively. ","20aba278":"## 5.2 Execution\n19 LGBM models are trained here.\n19 pre-submissions are saved on local strage."}}