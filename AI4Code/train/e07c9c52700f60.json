{"cell_type":{"d8fa870d":"code","77c79326":"code","68f26953":"code","7267e9b8":"code","86d959e7":"code","a4cebe66":"code","cfc67056":"code","b08ae5db":"code","770a26e7":"code","7dc4bc51":"code","a030d36f":"code","d4ce9193":"code","98812ad0":"code","6d4d57cd":"code","58d2b2a4":"code","9211539b":"code","ded8f059":"code","fd7de188":"code","ab3ca383":"code","57f31076":"code","896ffe6d":"code","f8d932ba":"markdown"},"source":{"d8fa870d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","77c79326":"#Importing Neccesary libraries\n# Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Handle table-like data and matrices\nimport numpy as np\nimport pandas as pd\nimport math \n# Modelling Algorithms\nfrom sklearn import linear_model\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestRegressor\n\n#preprocessing\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\n\n# Modelling Helpers\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n","68f26953":"#Reading the files \nstore = pd.read_csv('..\/input\/rossmann-store-sales\/store.csv')\n#store.head()\nstore1=store.copy()\ndf = pd.read_csv('..\/input\/rossmann-store-sales\/train.csv', parse_dates = True)\n#df.head()\ndf1=df.copy()\ntest = pd.read_csv('..\/input\/rossmann-store-sales\/test.csv')\n#test.head()\ntest1=test.copy()","7267e9b8":"#Preprocessing the given data \ntest.fillna(1, inplace=True)\ndf = df[df[\"Open\"] != 0]\ndf = df[df[\"Sales\"] > 0]\ndf['log_sales'] = np.log(df['Sales'])\ndf = pd.merge(df, store, on='Store')\ntest = pd.merge(test, store, on='Store')\ndf.fillna(0,inplace=True)\ntest.fillna(0,inplace=True)","86d959e7":"#Scaling\ndf[\"StateHoliday\"] = df[\"StateHoliday\"].map({0: 0, \"0\": 0, \"a\": 1, \"b\": 1, \"c\": 1})\ntest[\"StateHoliday\"] = test[\"StateHoliday\"].map({0: 0, \"0\": 0, \"a\": 1, \"b\": 1, \"c\": 1})\ndf['StateHoliday'] = df['StateHoliday'].astype(float)\ntest['StateHoliday'] = test['StateHoliday'].astype(float)","a4cebe66":"#Converting the date feature into 3 different features\ndef extract1(x):\n    return int(str(x)[:4])\n\ndef extract2(x):\n    return int(str(x)[5:7])\n\ndef extract3(x):\n    return (str(x)[:7])","cfc67056":"df[\"year\"]=df.Date.apply(extract1)\ndf[\"month\"]=df.Date.apply(extract2)\ndf[\"Day\"]=df.Date.apply(lambda x: int(str(x)[8:10]))","b08ae5db":"test[\"year\"]=test.Date.apply(extract1)\ntest[\"month\"]=test.Date.apply(extract2)\ntest[\"Day\"]=test.Date.apply(lambda x: int(str(x)[8:10]))","770a26e7":"#One hot encoding\ndf = pd.get_dummies(df,columns=['StoreType','Assortment','year'])\ntest = pd.get_dummies(test,columns=['StoreType','Assortment','year'])\ntest['year_2013']=0\ntest['year_2014']=0","7dc4bc51":"#Dividing the given data set into Input and Output formats\nX = df.drop(['Sales','log_sales','Store','Date','Customers','CompetitionOpenSinceYear','Promo2SinceYear','PromoInterval'] , axis = 1)\ny = df['log_sales']","a030d36f":"#Dividing the given data set into training and testing splits\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=7)\nX_test = test.drop(['Id','Store','Date' ,'CompetitionOpenSinceYear','Promo2SinceYear','PromoInterval'] , axis = 1)","d4ce9193":"#Applying Linear Regression model\nlinreg = linear_model.LinearRegression()\nlinreg.fit(X_train , y_train)\npred = linreg.predict(X_val)","98812ad0":"rmse_linreg = np.sqrt(mean_squared_error(y_val,pred))\nprint(\"RMSE for Linear Regression model is \",rmse_linreg) ","6d4d57cd":"'''' # Applying Support Vector Regression with Polynomial Kernal\nsupport_1 = make_pipeline(StandardScaler(),SVR(C=1.0, epsilon=0.2,kernal='poly',degree=2))\nsupport_1.fit(X_train, y_train)\npred_svm1=support_1.predict(X_val) '''\n","58d2b2a4":"''''rmse_svm_1 = np.sqrt(mean_squared_error(y_val,pred_svm1))\nprint(\"RMSE for Support Vector Regression with Polynomial Kernal is\", rmse_svm_1) '''","9211539b":"'''# Applying Support Vector Regression with Gaussian Kernal\nsupport_2 = make_pipeline(StandardScaler(),SVR(C=1.0, epsilon=0.2,kernal='rbf',degree=2))\nsupport_2.fit(X_train, y_train)\npred_svm2=support_2.predict(X_val)  '''\n","ded8f059":"''''rmse_svm_2 = np.sqrt(mean_squared_error(y_val,pred_svm2))\nprint(\"RMSE for Support Vector Regression with Gaussian Kernal is\", rmse_svm_2) '''","fd7de188":"# Applying Random Forest Regression \nrand = RandomForestRegressor(n_estimators=100, random_state=0,min_samples_split=5,max_features=\"auto\")\nrand.fit(X_train, y_train)\npred = rand.predict(X_val)","ab3ca383":"rmse_rand = np.sqrt(mean_squared_error(y_val,pred))\nprint(\"RMSE for Random Forest Regression model is \",rmse_rand)","57f31076":"#Predicting the sales for the given random data\ndef final_pred(test1,x):\n    test1=test1.append(pd.Series(x,index=['Id','Store','DayOfWeek','Date','Open','Promo','StateHoliday','SchoolHoliday']),ignore_index=True)\n    test1.fillna(1, inplace=True)\n    test1 = pd.merge(test1, store1, on='Store')\n    test1.fillna(0,inplace=True)\n    test1[\"StateHoliday\"] = test1[\"StateHoliday\"].map({0: 0, \"0\": 0, \"a\": 1, \"b\": 1, \"c\": 1})\n    test1['StateHoliday'] = test1['StateHoliday'].astype(float)\n    test1[\"year\"]=test1.Date.apply(extract1)\n    test1[\"month\"]=test1.Date.apply(extract2)\n    test1[\"Day\"]=test1.Date.apply(lambda x: int(str(x)[8:10]))\n    test1 = pd.get_dummies(test1,columns=['StoreType','Assortment','year'])\n    test1['year_2013']=0\n    test1['year_2014']=0\n    test1 = test1.drop(['Id','Store','Date' ,'CompetitionOpenSinceYear','Promo2SinceYear','PromoInterval'] , axis = 1)\n    pred_final = rand.predict(test1)\n    return(math.exp(pred_final[41088]))","896ffe6d":"#Enter data set with columns 'Id','Store','DayOfWeek','Date','Open','Promo','StateHoliday','SchoolHoliday'\nx=[3,7,5,'2015-09-19',1.0,0.0,0,0] \nsales_pred=final_pred(test1,x)\nprint(\"Predicted Sales for given data set is\",sales_pred)","f8d932ba":"# Random Forest Regression model has given the best RMSE score of 0.13 i.e, 13%  "}}