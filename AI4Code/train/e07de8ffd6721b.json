{"cell_type":{"36610790":"code","32cb6d68":"code","cb28fb03":"code","0c8b37a7":"code","0aaf7a47":"code","05db0681":"code","5d03a06b":"code","575ad37f":"code","a456be79":"markdown","f126efe0":"markdown","182695aa":"markdown","76310744":"markdown","0b0e5c48":"markdown"},"source":{"36610790":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","32cb6d68":"df = pd.read_json('\/kaggle\/input\/simple-talk1\/intents.json')\n","cb28fb03":"!pip install discord","0c8b37a7":"import discord\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport json\nimport random \nimport pickle\nfrom nltk.stem import WordNetLemmatizer\nimport nltk\nimport json\nimport random \nimport pickle\nfrom nltk.stem import WordNetLemmatizer\nimport json\nimport random \nimport pickle\nfrom nltk.stem import WordNetLemmatizer\nimport nltk\nnltk.download('punkt')\nimport nltk\nnltk.download('wordnet')\nfrom nltk.stem import WordNetLemmatizer\nfrom tensorflow.keras.models import load_model","0aaf7a47":"lemmatizer = WordNetLemmatizer()\nintents = json.loads(open('\/kaggle\/input\/simple-talk1\/intents.json').read())\nwords = pickle.load(open('.\/words.pkl', 'rb'))\nclasses = pickle.load(open('.\/classes.pkl', 'rb'))\nmodel = load_model('.\/chatbotmodel.h5')","05db0681":"#import this because discord take async message \nimport nest_asyncio\nnest_asyncio.apply()","5d03a06b":"def clean_up_sentence(sentence):\n    sentence_words = nltk.word_tokenize(sentence)\n    sentence_words = [lemmatizer.lemmatize(word) for word in sentence_words]\n    return sentence_words\n\n\ndef bag_of_words(sentence):\n    sentence_words = clean_up_sentence(sentence)\n    bag = [0]*len(words)\n    for w in sentence_words:\n        for i, word in enumerate(words):\n            if word == w:\n                bag[i]= 1\n\n    return np.array(bag)\n\n\n\ndef predict_class(sentence):\n    bow = bag_of_words(sentence)\n    res = model.predict(np.array([bow]))[0]\n    ERROR_THRESHOLD = 0.25\n    results = [[i,r] for i , r in enumerate(res)  if r > ERROR_THRESHOLD]\n    results.sort(key = lambda x:x[1], reverse=True)\n    return_list = []\n    for r in results:\n        return_list.append({'intent': classes[r[0]], 'probability':str(r[1])})\n\n    return return_list\n\n\n\ndef get_response(intents_list, intents_json):\n    tag = intents_list[0]['intent']\n    list_of_intents = intents_json['intents']\n    for i in list_of_intents:\n        if i['tag'] == tag:\n            result = random.choice(i['responses'])\n            break\n    return result","575ad37f":"#here we are creating discord clinent which will help us to access our bot\nclient = discord.Client()\n@client.event\nasync def on_ready():\n    print('we have logged in {0.user}'.format(client))\n\n\n@client.event\nasync def on_message(message):\n    #here i am taking message that anyone write in discord server\n    msg = message.content\n    #here checking if message is for bot then do nothing\n    if message.author == client.user:\n        return\n    #here i am prediting message answer and giving it to bot\n    ints = predict_class(msg)\n    res =get_response(ints, intents)\n    await message.channel.send(res)\n        \n     \n\n#here copy your token and which will online your bot \nclient.run('ODcwNjk2MTk0MzY2NjYwNjg4.YQQhBQ.FHMHPf4fi4AsQjcYHDo4ysuz-Ro')","a456be79":"**wow! see bot is answering the question**\n\n![botisworking.PNG](attachment:8ccc5ca4-0f6a-49a4-b2dd-575b3ba1035d.PNG)","f126efe0":"**Now setect server name in which you want to add your bot then click Authorize button** \n![bot8.PNG](attachment:c1162893-29bd-424a-b120-7e7d3de51e07.PNG)\n ","182695aa":"**Thank you!! **","76310744":"now go back to is link \nhttps:\/\/discord.com\/developers\/applications\n\n**then choose your bot and option on side navigation choose bot option then click on copy button to copy your Token**\n\n ![adding1.PNG](attachment:9cadbb50-c4be-42a1-924e-a73adaa53dbf.PNG)\n\n\nit will look like this **ODcwNjk2MTk0MzY2NjYwNjg4.YQQhBQ.FHMHPf4fi4AsQjcYHDo4ysuz-Ro**\n**Note:** Do not show your bot token to anyone because then anyone can use your bot and will change Token of by bot before ulpoading this Notebook","0b0e5c48":"**copy the link by clicking copy button **\n ![bot7.PNG](attachment:de69c40c-564d-4d47-964b-1b52bf4c9b83.PNG)\n\n\n**now open new tab copy the link**"}}