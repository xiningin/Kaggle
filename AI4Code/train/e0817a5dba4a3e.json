{"cell_type":{"bdc7bc8b":"code","74108a2a":"code","2802f059":"code","0939817f":"code","37f76c25":"code","fffdb98a":"code","66669f1a":"code","64dc9852":"code","c50c45f2":"code","47768801":"code","3ec9ee95":"code","9605d48d":"code","7048bc7e":"code","83630940":"code","8cd050d9":"code","20d0346c":"code","f7707510":"code","ed683209":"code","b8d5d762":"code","c1e8eed0":"code","5d36bebb":"code","f63397c6":"code","24d904a9":"code","6674064b":"code","f2f46335":"code","c90a5135":"code","020941c3":"code","a47466e8":"code","06a9c928":"code","0b76dd5b":"code","b468e101":"code","ad3393b8":"code","b68c7956":"code","a750e738":"code","58b58e5c":"code","d2c9a7c4":"code","d7e2caef":"code","bf335c4c":"code","276880e4":"code","1d02d892":"code","90031cf1":"code","d2aa408c":"code","eb24af94":"code","7a33ab9f":"code","38747ac0":"code","c9660e32":"code","ddeada8e":"code","57b5a2af":"code","7591f6f7":"code","3fcd9bf8":"code","ac3361a8":"code","64597100":"code","c1ea39a6":"code","aff31b88":"code","3cb3ad51":"code","d9fed7e0":"code","8045cae9":"code","e414eb3e":"code","c5b368f2":"markdown","f237fb0c":"markdown","c34ab4e1":"markdown","ffca0c6f":"markdown","8ca13f75":"markdown","1f688b7b":"markdown","95b001a3":"markdown","6a182fda":"markdown","ece3769d":"markdown","74e829e8":"markdown","aaab1aba":"markdown","364221bb":"markdown","e924a2eb":"markdown","f793633e":"markdown","a9a094bf":"markdown"},"source":{"bdc7bc8b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","74108a2a":"# import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.style.use('fivethirtyeight')","2802f059":"# get the data\ndf = pd.read_csv(r'\/kaggle\/input\/fish-market\/Fish.csv')","0939817f":"# get the head of the data\ndf.head()","37f76c25":"#shape\ndf.shape","fffdb98a":"#info\ndf.info()","66669f1a":"# columns of the data\nfor i,col in enumerate(df.columns):\n    print(i,col)","64dc9852":"# check for nulls\ndf.isnull().sum()","c50c45f2":"# check for duplicated\ndf.duplicated().sum()","47768801":"# statistical summary\ndf.describe().T","3ec9ee95":"# Get a sample of data\ndf.sample(5)","9605d48d":"# check species names\ndf.Species.unique()","7048bc7e":"df.Species = df.Species.astype('category')","83630940":"assert df.Species.dtype == 'category'","8cd050d9":"plt.figure(figsize=(15,10))\nlabel=['Perch','Bream','Roach','Pike','Smelt','Parkki','Whitefish']\nplt.pie(df.Species.value_counts(),explode=[0.1]*len(label),labels=label,autopct='%.1f%%',shadow=True)\nplt.axis('equal')\nplt.title('Fish Species')\nplt.show()","20d0346c":"df.Species.value_counts()","f7707510":"# create a function to plot a histogram\ndef plot_hist(col,style):\n    g = sns.FacetGrid(df,hue='Species',palette=style,height=6,aspect=2)\n    g.map(plt.hist,col,alpha=0.6,bins=20)\n    plt.legend()\n    plt.show()    ","ed683209":"plot_hist('Weight','rainbow')","b8d5d762":"plot_hist('Length1','Set1')","c1e8eed0":"plot_hist('Length2','cool')","5d36bebb":"plot_hist('Length3','dark')","f63397c6":"plot_hist('Height','hot')","24d904a9":"plot_hist('Width','Set2')","6674064b":"# create a function to plot a scatterplot\ndef plot_scatter(col,style):\n    plt.figure(figsize=(12,10))\n    sns.scatterplot(data = df,x=col,y='Weight',hue='Species',palette=style)\n    plt.xlabel(col)\n    plt.ylabel('Weight')\n    plt.legend()\n    plt.show()","f2f46335":"plot_scatter('Length1','Set1')","c90a5135":"plot_scatter('Length2','cool')","020941c3":"plot_scatter('Length3','dark')","a47466e8":"plot_scatter('Height','hot')","06a9c928":"plot_scatter('Width','Set2')","0b76dd5b":"# # create a function to plot a boxplot\ndef plot_box(col,style):\n    plt.figure(figsize=(12,10))\n    sns.boxplot(data = df,x='Species',y=col,palette=style)\n    plt.ylabel(col)\n    plt.xlabel('Species')\n    plt.show()","b468e101":"plot_box('Length1','Set1')","ad3393b8":"plot_box('Length2','cool')","b68c7956":"plot_box('Length3','dark')","a750e738":"plot_box('Height','hot')","58b58e5c":"plot_box('Width','Set2')","d2c9a7c4":"plot_box('Weight','rainbow')","d7e2caef":"# convert species column to nnmbers each one represent a specific species\ndf.Species =df.Species.cat.codes","bf335c4c":"# indicating the outliers \ndf_outlier = df['Weight']\ndf_outlier_Q1 = df_outlier.quantile(0.25)\ndf_outlier_Q3 = df_outlier.quantile(0.75)\ndf_outlier_IQR = df_outlier_Q3 - df_outlier_Q1\ndf_outlier_lower = df_outlier_Q1 - (1.5 * df_outlier_IQR)\ndf_outlier_upper = df_outlier_Q3 + (1.5 * df_outlier_IQR)\n(df_outlier_lower,df_outlier_upper)","276880e4":"df.query('Weight >= 1445.0 or Weight <= -675.0')","1d02d892":"# drop outliers rows\ndf.drop([142,143,144],axis=0,inplace=True)\ndf.reset_index(inplace=True,drop=True)","90031cf1":"# plot a heatmap\nplt.figure(figsize=(15,12))\nsns.heatmap(df.corr(),annot=True,cmap='Blues')","d2aa408c":"# drop species columns because it had negative corrleation with weight\ndf.drop('Species',axis=1,inplace=True)","eb24af94":"# drop Length2 , Length3 columns because it had 1 corrleation with Length1\ndf.drop(['Length2','Length3'],axis=1,inplace=True)","7a33ab9f":"# get head of data\ndf.head()","38747ac0":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures","c9660e32":"X = df.drop('Weight',axis=1)\npoly = PolynomialFeatures(degree=2)\nX= poly.fit_transform(X)\ny = df['Weight']","ddeada8e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)","57b5a2af":"from sklearn.linear_model import LinearRegression","7591f6f7":"lm=LinearRegression()","3fcd9bf8":"# fit the model to the data\nlm.fit(X_train,y_train)","ac3361a8":"# display intercept\nlm.intercept_","64597100":"# display coefficient\nlm.coef_","c1ea39a6":"predict = lm.predict(X_test)","aff31b88":"# create a plot for the relation between y_test and the model predicitions\nplt.figure(figsize=(12,6))\nplt.scatter(y_test,predict,color='orange')\nplt.ylabel('predict')\nplt.xlabel('y_test')\nplt.show()","3cb3ad51":"# import mean_squared_error,r2_score\nfrom sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error","d9fed7e0":"# compute root mean_squared_error\nnp.sqrt(mean_squared_error(y_test,predict))","8045cae9":"# compute mean_absolute_error\nmean_absolute_error(y_test,predict)","e414eb3e":"# compute r2_score\nr2_score(y_test,predict)","c5b368f2":"# Clean Data\n***The data is clean and doesn't require any fix except convert Species columns type to category***","f237fb0c":"# Linear Regression","c34ab4e1":"# Prepare The Data For The Model","ffca0c6f":"# Gather Data","8ca13f75":"# Quality\n- The Species columns type need to be category not object","1f688b7b":"# Exploratory Data Analysis","95b001a3":"***Train and fit a Linear regression model on the training set***","6a182fda":"***Define***\n- The Species columns type need to be category not object\n\n**Code**","ece3769d":"### **The plots show that all feature increasing with the increasing of weight which mean that all fearure are in linear relationship with weight** ","74e829e8":"# Assess Data","aaab1aba":"# Predictions and Evaluations","364221bb":"**Test**","e924a2eb":"### Linear Regression Project\n#### In this project we will be working with a Fish market data set, indicating the weight of fishs. We will try to create a model that will predict weight in future based of the features of the past weight.\n#### This data set contains the following features:\n- Species :species name of fish\n- Weight : weight of fish in Gram g\n- Length1 : vertical length in cm\n- Length2 : diagonal length in cm\n- Length3 : cross length in cm\n- Height : height in cm\n- Width : diagonal width in cm","f793633e":"***The plot show that Perch ,Bream species are the most common and Parkki ,Whitefish are less common***","a9a094bf":"# Split the data into training set and testing set using train_test_split"}}