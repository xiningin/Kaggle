{"cell_type":{"3b01c126":"code","98d18a17":"code","38b8773a":"code","eea53e95":"code","2bc0ec6b":"code","cfa82e0a":"code","78864fc7":"code","b19d7a5a":"code","821e87c0":"code","d77edaf0":"markdown","021614ba":"markdown","944f8d39":"markdown","92494d39":"markdown"},"source":{"3b01c126":"!pip install -U --no-build-isolation --no-deps ..\/input\/transformers-master\/ -qq","98d18a17":"!pip uninstall fsspec -qq -y\n!pip install --no-index --find-links ..\/input\/hf-datasets\/wheels datasets -qq","38b8773a":"import sys\nsys.path.append(\"..\/input\/tez-lib\/\")\nfrom sklearn import metrics\nimport transformers\nfrom transformers import AdamW, get_linear_schedule_with_warmup\nimport torch\nimport torch.nn as nn\nimport numpy as np\n\nimport tez\nimport transformers\nimport argparse\nfrom transformers import AutoTokenizer\nimport random\nimport os\nimport numpy as np\nimport torch\nimport pandas as pd\nfrom functools import partial\nfrom transformers import default_data_collator\n\nimport tez\nprint(transformers.__version__)","eea53e95":"import collections\nimport numpy as np\nfrom tqdm import tqdm\n\nimport numpy as np\nfrom tez import enums\nfrom tez.callbacks import Callback\nfrom datasets import Dataset\nfrom functools import partial\nimport torch\n\n\ndef jaccard(str1, str2):\n    a = set(str1.lower().split())\n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))\n\n\nclass EarlyStopping(Callback):\n    def __init__(\n        self,\n        monitor,\n        model_path,\n        valid_dataframe,\n        valid_data_loader,\n        tokenizer,\n        pad_on_right,\n        max_length,\n        doc_stride,\n        patience=3,\n        mode=\"min\",\n        delta=0.001,\n        save_weights_only=False,\n    ):\n        self.monitor = monitor\n        self.patience = patience\n        self.counter = 0\n        self.mode = mode\n        self.best_score = None\n        self.early_stop = False\n        self.delta = delta\n        self.save_weights_only = save_weights_only\n        self.model_path = model_path\n        if self.mode == \"min\":\n            self.val_score = np.Inf\n        else:\n            self.val_score = -np.Inf\n\n        if self.monitor.startswith(\"train_\"):\n            self.model_state = \"train\"\n            self.monitor_value = self.monitor[len(\"train_\") :]\n        elif self.monitor.startswith(\"valid_\"):\n            self.model_state = \"valid\"\n            self.monitor_value = self.monitor[len(\"valid_\") :]\n        else:\n            raise Exception(\"monitor must start with train_ or valid_\")\n\n        self.valid_targets = valid_dataframe.answer_text.values\n        self.valid_data_loader = valid_data_loader\n        self.tokenizer = tokenizer\n        valid_dataframe = valid_dataframe.drop([\"answer_text\", \"answer_start\"], axis=1)\n        self.valid_dataset = Dataset.from_pandas(valid_dataframe)\n        self.valid_features = self.valid_dataset.map(\n            partial(\n                prepare_validation_features,\n                tokenizer=self.tokenizer,\n                pad_on_right=pad_on_right,\n                max_length=max_length,\n                doc_stride=doc_stride,\n            ),\n            batched=True,\n            remove_columns=self.valid_dataset.column_names,\n        )\n\n    def on_epoch_end(self, model):\n        model.eval()\n        tk0 = tqdm(self.valid_data_loader, total=len(self.valid_data_loader))\n        start_logits = []\n        end_logits = []\n\n        for _, data in enumerate(tk0):\n            with torch.no_grad():\n                for key, value in data.items():\n                    data[key] = value.to(\"cuda\")\n                output, _, _ = model(**data)\n                start = output[0].detach().cpu().numpy()\n                end = output[1].detach().cpu().numpy()\n                start_logits.append(start)\n                end_logits.append(end)\n\n        start_logits = np.vstack(start_logits)\n        end_logits = np.vstack(end_logits)\n\n        valid_preds = postprocess_qa_predictions(\n            self.valid_dataset, self.tokenizer, self.valid_features, (start_logits, end_logits)\n        )\n        epoch_score = np.mean([jaccard(x, y) for x, y in zip(self.valid_targets, valid_preds.values())])\n        print(f\"Jaccard Score = {epoch_score}\")\n        model.train()\n        if self.mode == \"min\":\n            score = -1.0 * epoch_score\n        else:\n            score = np.copy(epoch_score)\n\n        if self.best_score is None:\n            self.best_score = score\n            self.save_checkpoint(epoch_score, model)\n        elif score < self.best_score + self.delta:\n            self.counter += 1\n            print(\"EarlyStopping counter: {} out of {}\".format(self.counter, self.patience))\n            if self.counter >= self.patience:\n                model.model_state = enums.ModelState.END\n        else:\n            self.best_score = score\n            self.save_checkpoint(epoch_score, model)\n            self.counter = 0\n\n    def save_checkpoint(self, epoch_score, model):\n        if epoch_score not in [-np.inf, np.inf, -np.nan, np.nan]:\n            print(\"Validation score improved ({} --> {}). Saving model!\".format(self.val_score, epoch_score))\n            model.save(self.model_path, weights_only=self.save_weights_only)\n        self.val_score = epoch_score\n\n\ndef convert_answers(r):\n    start = r[0]\n    text = r[1]\n    return {\"answer_start\": [start], \"text\": [text]}\n\n\ndef prepare_train_features(examples, tokenizer, pad_on_right, max_length, doc_stride):\n    # ref: https:\/\/github.com\/huggingface\/notebooks\/blob\/master\/examples\/question_answering.ipynb\n    # Some of the questions have lots of whitespace on the left, which is not useful and will make the\n    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that\n    # left whitespace\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n\n    # Tokenize our examples with truncation and padding, but keep the overflows using a stride. This results\n    # in one example possible giving several features when a context is long, each of those features having a\n    # context that overlaps a bit the context of the previous feature.\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    # Since one example might give us several features if it has a long context, we need a map from a feature to\n    # its corresponding example. This key gives us just that.\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n    # The offset mappings will give us a map from token to character position in the original context. This will\n    # help us compute the start_positions and end_positions.\n    offset_mapping = tokenized_examples.pop(\"offset_mapping\")\n\n    # Let's label those examples!\n    tokenized_examples[\"start_positions\"] = []\n    tokenized_examples[\"end_positions\"] = []\n\n    for i, offsets in enumerate(offset_mapping):\n        # We will label impossible answers with the index of the CLS token.\n        input_ids = tokenized_examples[\"input_ids\"][i]\n        cls_index = input_ids.index(tokenizer.cls_token_id)\n\n        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n        sequence_ids = tokenized_examples.sequence_ids(i)\n\n        # One example can give several spans, this is the index of the example containing this span of text.\n        sample_index = sample_mapping[i]\n        answers = examples[\"answers\"][sample_index]\n        # If no answers are given, set the cls_index as answer.\n        if len(answers[\"answer_start\"]) == 0:\n            tokenized_examples[\"start_positions\"].append(cls_index)\n            tokenized_examples[\"end_positions\"].append(cls_index)\n        else:\n            # Start\/end character index of the answer in the text.\n            start_char = answers[\"answer_start\"][0]\n            end_char = start_char + len(answers[\"text\"][0])\n\n            # Start token index of the current span in the text.\n            token_start_index = 0\n            while sequence_ids[token_start_index] != (1 if pad_on_right else 0):\n                token_start_index += 1\n\n            # End token index of the current span in the text.\n            token_end_index = len(input_ids) - 1\n            while sequence_ids[token_end_index] != (1 if pad_on_right else 0):\n                token_end_index -= 1\n\n            # Detect if the answer is out of the span (in which case this feature is labeled with the CLS index).\n            if not (offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char):\n                tokenized_examples[\"start_positions\"].append(cls_index)\n                tokenized_examples[\"end_positions\"].append(cls_index)\n            else:\n                # Otherwise move the token_start_index and token_end_index to the two ends of the answer.\n                # Note: we could go after the last offset if the answer is the last word (edge case).\n                while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:\n                    token_start_index += 1\n                tokenized_examples[\"start_positions\"].append(token_start_index - 1)\n                while offsets[token_end_index][1] >= end_char:\n                    token_end_index -= 1\n                tokenized_examples[\"end_positions\"].append(token_end_index + 1)\n\n    return tokenized_examples\n\n\ndef prepare_validation_features(examples, tokenizer, pad_on_right, max_length, doc_stride):\n    # ref: https:\/\/github.com\/huggingface\/notebooks\/blob\/master\/examples\/question_answering.ipynb\n    # Some of the questions have lots of whitespace on the left, which is not useful and will make the\n    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that\n    # left whitespace\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n\n    # Tokenize our examples with truncation and maybe padding, but keep the overflows using a stride. This results\n    # in one example possible giving several features when a context is long, each of those features having a\n    # context that overlaps a bit the context of the previous feature.\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    # Since one example might give us several features if it has a long context, we need a map from a feature to\n    # its corresponding example. This key gives us just that.\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n\n    # We keep the example_id that gave us this feature and we will store the offset mappings.\n    tokenized_examples[\"example_id\"] = []\n\n    for i in range(len(tokenized_examples[\"input_ids\"])):\n        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n        sequence_ids = tokenized_examples.sequence_ids(i)\n        context_index = 1 if pad_on_right else 0\n\n        # One example can give several spans, this is the index of the example containing this span of text.\n        sample_index = sample_mapping[i]\n        tokenized_examples[\"example_id\"].append(examples[\"id\"][sample_index])\n\n        # Set to None the offset_mapping that are not part of the context so it's easy to determine if a token\n        # position is part of the context or not.\n        tokenized_examples[\"offset_mapping\"][i] = [\n            (o if sequence_ids[k] == context_index else None)\n            for k, o in enumerate(tokenized_examples[\"offset_mapping\"][i])\n        ]\n\n    return tokenized_examples\n\n\ndef postprocess_qa_predictions(\n    examples, tokenizer, features, raw_predictions, n_best_size=20, max_answer_length=30, squad_v2=False\n):\n    # ref: https:\/\/github.com\/huggingface\/notebooks\/blob\/master\/examples\/question_answering.ipynb\n    all_start_logits, all_end_logits = raw_predictions\n    # Build a map example to its corresponding features.\n    example_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\n    features_per_example = collections.defaultdict(list)\n    for i, feature in enumerate(features):\n        features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)\n\n    # The dictionaries we have to fill.\n    predictions = collections.OrderedDict()\n\n    # Logging.\n    print(f\"Post-processing {len(examples)} example predictions split into {len(features)} features.\")\n\n    # Let's loop over all the examples!\n    for example_index, example in enumerate(tqdm(examples)):\n        # Those are the indices of the features associated to the current example.\n        feature_indices = features_per_example[example_index]\n\n        min_null_score = None  # Only used if squad_v2 is True.\n        valid_answers = []\n\n        context = example[\"context\"]\n        # Looping through all the features associated to the current example.\n        for feature_index in feature_indices:\n            # We grab the predictions of the model for this feature.\n            start_logits = all_start_logits[feature_index]\n            end_logits = all_end_logits[feature_index]\n            # This is what will allow us to map some the positions in our logits to span of texts in the original\n            # context.\n            offset_mapping = features[feature_index][\"offset_mapping\"]\n\n            # Update minimum null prediction.\n            cls_index = features[feature_index][\"input_ids\"].index(tokenizer.cls_token_id)\n            feature_null_score = start_logits[cls_index] + end_logits[cls_index]\n            if min_null_score is None or min_null_score < feature_null_score:\n                min_null_score = feature_null_score\n\n            # Go through all possibilities for the `n_best_size` greater start and end logits.\n            start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            for start_index in start_indexes:\n                for end_index in end_indexes:\n                    # Don't consider out-of-scope answers, either because the indices are out of bounds or correspond\n                    # to part of the input_ids that are not in the context.\n                    if (\n                        start_index >= len(offset_mapping)\n                        or end_index >= len(offset_mapping)\n                        or offset_mapping[start_index] is None\n                        or offset_mapping[end_index] is None\n                    ):\n                        continue\n                    # Don't consider answers with a length that is either < 0 or > max_answer_length.\n                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:\n                        continue\n\n                    start_char = offset_mapping[start_index][0]\n                    end_char = offset_mapping[end_index][1]\n                    valid_answers.append(\n                        {\n                            \"score\": start_logits[start_index] + end_logits[end_index],\n                            \"text\": context[start_char:end_char],\n                        }\n                    )\n\n        if len(valid_answers) > 0:\n            best_answer = sorted(valid_answers, key=lambda x: x[\"score\"], reverse=True)[0]\n        else:\n            # In the very rare edge case we have not a single non-null prediction, we create a fake prediction to avoid\n            # failure.\n            best_answer = {\"text\": \"\", \"score\": 0.0}\n\n        # Let's pick our final answer: the best one or the null answer (only for squad_v2)\n        if not squad_v2:\n            predictions[example[\"id\"]] = best_answer[\"text\"]\n        else:\n            answer = best_answer[\"text\"] if best_answer[\"score\"] > min_null_score else \"\"\n            predictions[example[\"id\"]] = answer\n\n    return predictions","2bc0ec6b":"class ChaiiModel(tez.Model):\n    def __init__(self, model_name, num_train_steps, steps_per_epoch, learning_rate):\n        super().__init__()\n        self.learning_rate = learning_rate\n        self.steps_per_epoch = steps_per_epoch\n        self.model_name = model_name\n        self.num_train_steps = num_train_steps\n        self.step_scheduler_after = \"batch\"\n\n        hidden_dropout_prob: float = 0.0\n        layer_norm_eps: float = 1e-7\n\n        config = transformers.AutoConfig.from_pretrained(model_name+\"config.json\")\n        config.update(\n            {\n                \"output_hidden_states\": True,\n                \"hidden_dropout_prob\": hidden_dropout_prob,\n                \"layer_norm_eps\": layer_norm_eps,\n                \"add_pooling_layer\": False,\n            }\n        )\n        print(config)\n        self.transformer = transformers.AutoModel.from_pretrained(model_name+\"pytorch_model.bin\", config=config)\n        self.output = nn.Linear(config.hidden_size, config.num_labels)\n\n    def fetch_optimizer(self):\n        param_optimizer = list(self.named_parameters())\n        no_decay = [\"bias\", \"LayerNorm.bias\"]\n        optimizer_parameters = [\n            {\n                \"params\": [p for n, p in param_optimizer if not any(nd in n for nd in no_decay)],\n                \"weight_decay\": 0.01,\n            },\n            {\n                \"params\": [p for n, p in param_optimizer if any(nd in n for nd in no_decay)],\n                \"weight_decay\": 0.0,\n            },\n        ]\n        opt = AdamW(optimizer_parameters, lr=self.learning_rate)\n        return opt\n\n    def fetch_scheduler(self):\n        sch = get_linear_schedule_with_warmup(\n            self.optimizer,\n            num_warmup_steps=0,\n            num_training_steps=self.num_train_steps,\n        )\n        return sch\n\n    def loss(self, start_logits, end_logits, start_positions, end_positions):\n        if len(start_positions.size()) > 1:\n            start_positions = start_positions.squeeze(-1)\n        if len(end_positions.size()) > 1:\n            end_positions = end_positions.squeeze(-1)\n\n        ignored_index = start_logits.size(1)\n        start_positions = start_positions.clamp(0, ignored_index)\n        end_positions = end_positions.clamp(0, ignored_index)\n        loss_fct = nn.CrossEntropyLoss(ignore_index=ignored_index)\n        start_loss = loss_fct(start_logits, start_positions)\n        end_loss = loss_fct(end_logits, end_positions)\n        total_loss = (start_loss + end_loss) \/ 2\n        return total_loss\n\n    def monitor_metrics(self, outputs, targets):\n        return {\"jaccard\": None}\n\n    def forward(self, ids, mask, token_type_ids=None, start_positions=None, end_positions=None):\n        if token_type_ids is not None:\n            transformer_out = self.transformer(ids, mask, token_type_ids)\n        else:\n            transformer_out = self.transformer(ids, mask)\n        sequence_output = transformer_out[0]\n        logits = self.output(sequence_output)\n        start_logits, end_logits = logits.split(1, dim=-1)\n        start_logits = start_logits.squeeze(-1).contiguous()\n        end_logits = end_logits.squeeze(-1).contiguous()\n\n        loss = None\n        if start_positions is not None and end_positions is not None:\n            loss = self.loss(start_logits, end_logits, start_positions, end_positions)\n\n        return (start_logits, end_logits), loss, {}","cfa82e0a":"class ChaiiDataset:\n    def __init__(self, data):\n        self.data = data\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, item):\n        if \"token_type_ids\" in self.data[item]:\n            return {\n                \"ids\": torch.tensor(self.data[item][\"input_ids\"], dtype=torch.long),\n                \"mask\": torch.tensor(self.data[item][\"attention_mask\"], dtype=torch.long),\n                \"token_type_ids\": torch.tensor(self.data[item][\"token_type_ids\"], dtype=torch.long),\n                \"start_positions\": torch.tensor(self.data[item][\"start_positions\"], dtype=torch.long),\n                \"end_positions\": torch.tensor(self.data[item][\"end_positions\"], dtype=torch.long),\n            }\n        return {\n            \"ids\": torch.tensor(self.data[item][\"input_ids\"], dtype=torch.long),\n            \"mask\": torch.tensor(self.data[item][\"attention_mask\"], dtype=torch.long),\n            \"start_positions\": torch.tensor(self.data[item][\"start_positions\"], dtype=torch.long),\n            \"end_positions\": torch.tensor(self.data[item][\"end_positions\"], dtype=torch.long),\n        }","78864fc7":"def seed_everything(seed: int) -> None:\n    random.seed(seed)\n    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = True","b19d7a5a":"class args:\n    # NOTE: you need to train for all folds from 0 to 9\n    fold = 0\n    model = \"..\/input\/rembert-pt\/\"\n    batch_size = 1\n    max_len = 384\n    doc_stride = 128\n    learning_rate = 1e-5\n    epochs = 20\n    accumulation_steps = 8\n    max_answer_length = 30","821e87c0":"output_path = f\"{args.model.replace('\/',':')}__fold_{args.fold}.bin\"\n\ntokenizer = transformers.AutoTokenizer.from_pretrained(args.model)\npad_on_right = tokenizer.padding_side == \"right\"\n\ndf = pd.read_csv(\"..\/input\/chaii-extra\/train_folds.csv\")\ndf_train = df[df.kfold != args.fold].reset_index(drop=True)\n\nexternal_data1 = pd.read_csv(\"..\/input\/chaii-extra\/mlqa_hindi.csv\")\nexternal_data2 = pd.read_csv(\"..\/input\/chaii-extra\/xquad.csv\")\nexternal_data = pd.concat([external_data1, external_data2], axis=0)\nexternal_data = external_data.drop_duplicates(keep=\"last\")\nexternal_data = external_data.reset_index(drop=True)\n\ndf_valid = df[df.kfold == args.fold].reset_index(drop=True)\n\ncols = [\"context\", \"question\", \"answer_text\", \"answer_start\"]\nexternal_data = external_data[cols].reset_index(drop=True)\ndf_train = df_train[cols].reset_index(drop=True)\n\ndf_train = pd.concat([df_train, external_data], axis=0).reset_index(drop=True)\ndf_train[\"answers\"] = df_train[[\"answer_start\", \"answer_text\"]].apply(convert_answers, axis=1)\ndf_valid[\"answers\"] = df_valid[[\"answer_start\", \"answer_text\"]].apply(convert_answers, axis=1)\n\ntrain_data = Dataset.from_pandas(df_train)\ntrain_features = train_data.map(\n    partial(\n        prepare_train_features,\n        tokenizer=tokenizer,\n        pad_on_right=pad_on_right,\n        max_length=args.max_len,\n        doc_stride=args.doc_stride,\n    ),\n    batched=True,\n    remove_columns=train_data.column_names,\n)\n\nvalid_data = Dataset.from_pandas(df_valid)\nvalid_features = valid_data.map(\n    partial(\n        prepare_train_features,\n        tokenizer=tokenizer,\n        pad_on_right=pad_on_right,\n        max_length=args.max_len,\n        doc_stride=args.doc_stride,\n    ),\n    batched=True,\n    remove_columns=valid_data.column_names,\n)\n\ntrain_dataset = ChaiiDataset(train_features)\nvalid_dataset = ChaiiDataset(valid_features)\n\nn_train_steps = int(len(train_dataset) \/ args.batch_size * args.epochs)\nmodel = ChaiiModel(\n    model_name=args.model,\n    num_train_steps=n_train_steps,\n    learning_rate=args.learning_rate,\n    steps_per_epoch=len(df_train) \/ args.batch_size,\n)\n\nvalid_data_loader = torch.utils.data.DataLoader(\n    valid_dataset,\n    batch_size=4,\n    num_workers=4,\n    shuffle=False,\n)\n\nes = EarlyStopping(\n    monitor=\"valid_jaccard\",\n    model_path=output_path,\n    valid_dataframe=df_valid,\n    valid_data_loader=valid_data_loader,\n    tokenizer=tokenizer,\n    pad_on_right=pad_on_right,\n    max_length=args.max_len,\n    doc_stride=args.doc_stride,\n    save_weights_only=True,\n    mode=\"max\",\n)\nmodel.fit(\n    train_dataset,\n    valid_dataset=valid_dataset,\n    train_collate_fn=default_data_collator,\n    valid_collate_fn=default_data_collator,\n    train_bs=args.batch_size,\n    valid_bs=4,\n    device=\"cuda\",\n    epochs=args.epochs,\n    callbacks=[es],\n    fp16=True,\n    accumulation_steps=args.accumulation_steps,\n)","d77edaf0":"## Install Transformers","021614ba":"## NOTE: MOst of the code is same as Abhishek's XLM-R notebook. I just used that to train RemBERT.","944f8d39":"# RemBERT\n\nDetailed Discussion -> https:\/\/www.kaggle.com\/c\/chaii-hindi-and-tamil-question-answering\/discussion\/267827\n\nSome important points from the paper\n* The authors claim that they combined their techniques in a Rebalanced mBERT (RemBERT) model that outperforms XLM-R (Conneau et al., 2020a), the state-of-the-art cross-lingual model while having been pre-trained on 3.5\u00d7 fewer tokens and 10 more languages.\n\n* Recent multilingual models are pre-trained on data covering around 100 languages using a subword vocabulary shared across all languages (Devlin et al., 2019; Pires et al., 2019; Conneau et al., 2020a). In order to achieve reasonable performance for most languages, these models need to allocate sufficient capacity for each language, known as the curse of multilinguality (Conneau et al., 2020a; Pfeiffer et al., 2020). As a result, such multilingual models have large vocabularies with large embedding sizes to ensure that tokens in all languages are adequately represented.\n\n* They propose a Rebalanced mBERT (RemBERT) model that matches XLM-R\u2019s number of fine-tuning parameters (559M) while using a reduced embedding size, resized layers, and more effective capacity during pre-training. The model has a vocabulary size of 250k, Ein = 256, Eout = 1536, and 32 layers with 1152 dimensions and 18 attention heads per layer and was trained on data covering 110 languages.","92494d39":"## Install Huggingface Datasets"}}