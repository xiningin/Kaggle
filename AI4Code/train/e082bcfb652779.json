{"cell_type":{"7de49cdb":"code","6c678465":"code","e5ffbd72":"code","6d02ad4b":"code","da46ef51":"code","f8d23578":"code","daf23781":"code","4e614c40":"code","71210cf6":"code","09c9c14d":"code","9afc4d7f":"code","08c966c3":"code","4d047a4d":"code","7cd9887f":"code","ee37ec83":"code","3d471092":"code","35d0557e":"code","5f032abe":"code","9cbd34fb":"code","7e710544":"code","6f65a3e0":"code","3bf57584":"code","3f7f3c5b":"code","ce2f407c":"code","4e9c1963":"code","6b3ed2bf":"code","98211799":"code","a1115f69":"code","3a81bcaf":"code","32073242":"code","6cffe339":"code","709e9bdb":"code","e09a17f9":"code","81b12b40":"code","1c616b95":"code","49bd8515":"code","14e2fcfc":"code","c6f6dce2":"code","fc35444b":"code","e6b9e8ce":"code","a3d17d81":"markdown","0659a70c":"markdown","ebb91d0a":"markdown","b93c5521":"markdown","52b92437":"markdown","7d4f751e":"markdown","f4ab4b43":"markdown","e9d5f8b1":"markdown","b013f11a":"markdown","6f37f16f":"markdown","af40270a":"markdown","550f3267":"markdown","ec0a124a":"markdown","1a333766":"markdown","3a928f82":"markdown","96c3dde7":"markdown","bce1f4cb":"markdown","6c6a5125":"markdown","9f04bfcc":"markdown","78daf6cf":"markdown","d352ec5e":"markdown","d1e32ac0":"markdown","caa49b05":"markdown","59b85dd7":"markdown","00d954c8":"markdown"},"source":{"7de49cdb":"## Basic Datatype in Python\nnum=7           # Integer Data Type\na = 3 + 4j      # Create a complex number\nr = a.real      # Get the real part (an attribute)\nfi=56.5454\nb = [1, 2, 3]   # Create a list\ndict1=dict(a=1,b=2,c=3)\ntup1=(1,2,3,4)\nc = b      \nd =list(c)   # The Memory Location changes this is similar to .copy \nprint(id(b)) # Id gives the memory address of variable\nprint(id(c)) # Observe the values are same\nprint(id(d))  # observe the address of d \nb.append(7)     # Add a new element using the append method\nprint(type(num))  # Type function tells about the variable type\nprint(type(a))\nprint(type(r))\nprint(type(fi))\nprint(type(b))\nprint(type(dict1))\nprint(type(tup1))\n\n","6c678465":"# list, dict, arrays are a mutable\nprog = ['Python', 'R', 'Java', 'Php']\nprog[2] ='c++'\nprint(prog)\n#Strings and tuples are immutable\nz_tuple = (9, 10, 11, 23)\n#z_tuple[1] = 'twenty two' # Will this Give Error ","e5ffbd72":"# As I said before python strings are immutable.\nmyname= 'My Name is Ramesh , I stay in Pune'\n#x[10] = 'f'  # Will this Give error \nprint(myname)   #  Want to Print Whole String \nprint(myname[3:]) # Want to print from Name to end \nprint(myname[3:18]) # Want to Print Name is Ramesh\nprint(myname[::-1])  # Want to reverse pune to I \nprint(myname)         # Want to print pune in stay I , Ramesh is Name My please help how to do this","6d02ad4b":"# # Here is the Answer to Question Asked\nlist1=list(myname.split(' '))\nlist1.remove(',')\n#list1.remove('',)\nlist1\nlist1[::-1]","da46ef51":"list_new=[12,45,['Indian','Forest','Gump'],56] # Example of list with multiple list inside it \nprint(list_new)","f8d23578":"## Some more on String \nx = 'Upx had been a Wonderful learning Experience for Me'\ny = x.replace('Wonderful', 'may be')\na = 'Python'\np = \"Python is the best programming language\"\nq = \", I have ever seen\"\nz = p+q\nprint(x)\nprint(y)\nprint(list(a))\nprint(z)\nq='I am Stupid '\nprint( q * 3)","daf23781":"print(type(range(100))) ## This will return range \nprint(range(5)) ## It means start from 0 go till 5 but not five \nprint(list(range(10))) ## This will Start Values from 0 and go till 9 , Range starts with 0 and goes -1 or 1 less than max value \nprint(len(list(range(10)))) # This returns 10 as the values starts from 0 \nprint(range(5,10,1))","4e614c40":"## Example of range in Loop , 50 is starting point , 1000 end point , 100 increment \n## we can 1 Start , 2 Max Value , 3 Incremental \nfor seq in range(50,1000,100):\n    print(seq,end=\",\")\nprint()\nprint(list(range(0, 11, 3)))","71210cf6":"##########Print Function and its different Avtars .\nprint(\"Hi space left is just %.3f gb, and  the data base is %s\"  %(0.987123, 'mysql')) # Will print 3 Decimal becox of .3f\nprint(\"Hi space left is just %f gb, and  the data base is %s\"  %(0.987, 'mysql')) #will Print Float Value due to %f\nprint(\"Hi space left is just %d gb, and  the data base is %s\"  %(0.987, 'mysql')) # Will print integer\nexperience_years = 1.5\nname=\"Rakesh\"\nprint(\"Hi %s, you have %s years of experience.\" % (name, experience_years))\nprint(\"Hi {}, you have {} years of experience\".format(name, experience_years))\nprint(f\"Hi {name}, you have {experience_years} years of experience.\") # This is my favourite just need some practice ","09c9c14d":"# boolean values in python are written as True and False.\nprint(True and True)  ## All Gate\nprint(True or False)  ## Or Gate\nprint(True and False) # And Gate both has to be true\nprint(bool([]), bool([1,2,3]))  # First is false as list is empty which is false\nprint(bool('Hello Python!'), bool(''))  # Second is false as empty string is false \nbool(0), bool(1)   # Boolean 0 is false and 1 is true ","9afc4d7f":"#Python date and time module provides datetime, date and time types\nfrom datetime import datetime, date, time\ntd = datetime.now()# do not write number 6 as 06, you will get an invalid token error.\nprint(td.day,\"\/\",td.hour,\"\/\",td.minute,\"\/\",td.time())\nprint(td.date()) # Default date format is yyyy-mm-dd\ntd.strftime('%m\/%d\/%y %H:%M:%S')#strf method converts the date and time into a string\n\n\nimport pytz\ntz_NY = pytz.timezone('Asia\/Calcutta')  ## This gives the Timezone of Asia and Calcutta which is india time zone\ndatetime_NY = datetime.now(tz_NY)\nprint(\"India  date and time is :\",td.date(), datetime_NY.strftime(\"%H:%M:%S\"))","08c966c3":"list1=[1,2,3,]\nprint(list1)\nlist1[2]=5   # replace items in list\nlist1.append(55)\nlist2=['hi',1,[1,2]]\nprint(list1,list2)\nlist2=list1+list2\n\n#list2=list2 -list1  ## Will this Give error if yes why ?? Answer in next section but think through \nnest = [1,2,3,[4,5,['target']]]\n# How to print target from this list \nprint(nest[3][2])  # Think through how this has come out . \n\n#Clear the List \nlist1.clear()\nlist1\n\n## Difference between copy the list and equal to sign operator \nlist2=list1.copy()   # Correct Method of Copying the list\nlist3=list1          # This would just create link or pointer to address of list1 \nprint(id(list1),id(list2))\nprint(id(list3))\n\n#Count the Items in a list \nprint(nest.count(3))  # Here is 3 return 1 as the for list its one item composite item only.\nnest[3]\n\n### remove function\nlist2=[1,3,5,7]\nlist2.remove(5)  # If we change the list 3 to nonexisting item it will throw an error\nprint(list2)\n\n## list with duplicate value and remove function\nlist3=[1,3,5,7,5,9,11,5,13]\nlist3.remove(5)\nprint(list3)  ## Remove only removes the first iteration and not all values . \n\nthislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist[-1])\nprint(thislist[::-1])\n\n#Adding and Item in a list in a desired location \nprint(list3)\nlist3.insert(0,100)\nprint(list3)\n\n##### Deleting elements inside the list\ndel list3[0]\nprint(list3)\ndel list3[0:3]\nprint(list3)\nlist3.pop(0)  #Another way of removing items in a list . \nprint(list3)\n","4d047a4d":"# Creating a Tuple\ntup1 = ('physics', 'chemistry', 1997, 2000);\ntup2 = (1, 2, 3, 4, 5 );\nprint(tup1)\nprint(tup2)\n###Combining 2 Tupples.\ntup3=tup1 + tup2\nprint(tup3)\n### Accessing items in tupple\nprint(tup1[0])\nprint(tup1[0:3])\nprint(tup1[::-1])\n\n#Tuple Functions \nprint(any(tup1))  ## Any is just to see tupple is empty or has element\n\n## Min max function\nprint(f\"In Tup2 the min value={min(tup2)} and maximum value is={max(tup2)} also length is:{len(tup2)} also sum={sum(tup2)}\")\n\n## sorted will in ascending order\ntup4=(-1,23,5,8,0,22)\ntup5=(\"indian\",\"america\",\"japan\")\nprint(sorted(tup4))\nprint(sorted(tup5))  # Sorted is alphabaticall order only. \n\n\n# Import the 'namedtuple' function from the 'collections' module\nfrom collections import namedtuple\n# Set the tuple\nclass1 = namedtuple(\"Class\", \"name maths eng hindi\")\nsub = class1(name=\"Virat\", maths=90,eng=92,hindi=89)\n# Print the tuple\nprint(sub)\n# Print each item in the tuple\nprint(sub.name,sub.maths,sub.eng,sub.hindi)\n\n","7cd9887f":"kk  = ('1603', 2887) \nkkk = ('THE END', 2870),('THE END', 6117)\nif kk == kkk: print(\"Success\")\n#else: \n#    if kk[2]>kk[]","ee37ec83":"set1 = {1,2,3,4}\nfor x in set1:print(x)\n#thisset[0] ## This raises an error and set can't accessed using index\nset1.add(\"orange\")\nprint(set1)\nset1.update([\"orange\", \"mango\", \"grapes\"])\nprint(set1)\nprint(len(set1))\n### Remove item from set\nset1.remove(\"mango\")\nprint(set1)\n\n#Pop Method in sets remove the last itemsRemember that sets are unordered, \n#so you will not know what item that gets removed.\nset1.pop()\nprint(set1)\n\n########Updates in sets , please note set ignores duplicates\nset2 = {\"a\", \"b\" , \"c\"}\nset3 = {1, 2, 3,'a'}\n\nset2.update(set3)\nprint(set2)\n\n########clear set 3 \nprint(set3)\nset3.clear()\nprint(set3)\n\n## Copy Values \nset4=set2.copy()\nprint(set4)\nset5={1,2,3,4,5}\nset6={4,5,6,7,8}\nprint(\"Difference \",set5.difference(set6))\n\n### Difference update\nx = {\"apple\", \"banana\", \"cherry\"}\ny = {\"google\", \"microsoft\", \"apple\"}\nprint(\"Difference 2\",x.difference_update(y))\n\n## Discard Method \nfruits = {\"apple\", \"banana\", \"cherry\"}\nfruits.discard(\"jamatadi\") ## This does not raise error if items does not exist \nprint(fruits)\n\n### Union of Set\na={1,2,3,4,5}\nb={3,4,6,7}\nprint(a.union(b))","3d471092":"# Define a Dictionary \ncar = {\"Brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964,\"topspeed\":200}  # Method 1\nstudents_ages = dict(Amanda=27, Teresa=38, Paula=17, Mario=40) ## Method 2 when all datatypes are of same type\nprint(car)\n\n# create a dictionary using two list\nstudents = ['Amanda', 'Teresa', 'Paula', 'Mario']\nages = [27, 38, 17, 40]\nstud_ages = dict(zip(students, ages))\nprint(stud_ages)\n\nprint(car)   # Printing Whole Dictionary \nprint(car[\"model\"])  # Printing a value inside a model in car dictionary\nprint(car.get(\"model\") ) # Another method of getting values \n# Add a value to the dictionary\ncar[\"drive\"]=4  # Type of drive 4 wheel 3 wheel \nprint(type(car))  # Dictionary is class in python \ncar1=car.copy()\ncar1.clear()  ## This would clear the dictionary\nprint(car1)\n\n# This is simplest method of accessing keys and values in same time the loop can be written in different manner\nfor keys,values in car.items():\n  print(f\"Keys =>{keys} and Values=>{values}\")\n\nif \"model\" in car:  # Checking if Keys exisit inside car dicitionary\n    print(\"Yes, 'model' is one of the keys in the thisdict dictionary\")\nelse: print(\"Not Found in Dictionary\")\n\n## Printing Length of Dictionary \nprint(len(car))\n\n### Create Dictionary from key method \nx = ('key1', 'key2', 'key3')\ny = 0\ndict1= dict.fromkeys(x, y)\nprint(dict1)\n\n### Pop and Pop Items Pop removes specific key and popitems last key\ndict1.pop(\"key1\")  ## removing keys from dictionary \nprint(dict1)\n\ndict1.popitem()\nprint(dict1)\n\n######## Update adds another Keys value pair in Dictionary \ncar.update({\"color\": \"White\"})\nprint(car)\n\n# Del is used to remove key from dictionary \n# the element dusseldorf is removed\ndel car['model']  # This will throw an error if key is not present \nprint(car)","35d0557e":"print(car)\nif \"topspeed\" in car:  # Checking if Keys exisit inside car dicitionary\n    print(\"Yes, 'topspeed' is one of the keys in the thisdict dictionary\")\nelse: print(\"Not Found in Dictionary\")","5f032abe":"students = ['Amanda', 'Teresa', 'Paula', 'Mario']\nages = [27, 38, 17, 40,67,88,99,100]\nstud_ages = dict(zip(students, ages))\nprint(stud_ages)","9cbd34fb":"## Basics of for loops\n# Prints out the numbers 0,1,2,3,4\nfor x in range(5):print(x,end =\" \")\n# Prints out 3,4,5\nprint(\"\")\nfor x in range(3, 6):print(x,end =\" \")\n# Prints out 3,5,7\nprint(\"\")\nfor x in range(3, 8, 2):print(x,end =\" \")\nprint(\"\")\n# While loop\ncount = -5\nwhile count <= 0:\n    print(count,end =\" \")\n    count += 1  # This is the same as count = count + 1\n #   if count==-3: break   ## Use of Break Statement in While loop the method is same for other loops also \n","7e710544":"count = -5\nwhile count <= 0:\n    print(count,end =\" \")\n    count += 1 ","6f65a3e0":"# Enumerate returns index and values\nprime=[2,3,5,7,11]\nfor no in enumerate(prime):\n   # print(no,end=\" \")\n    print(no) ## This prints the index and values \n\n## Another way of Printing the Same is \nfor idx,no in enumerate(prime):\n    print(f\"Index values={idx} and Value=>{no}\")\n\n### Enumerate in a string\nstring1=\"Sunday\"\nfor idx,str1 in enumerate(string1):\n    print(f\"Index={idx} Value=>{str1}\")","3bf57584":"prime=[2,3,5,7,11]\nfor idx,no in enumerate(prime):\n    print(f\"Index values={idx} and Value=>{no}\")","3f7f3c5b":" # To loop over two or more sequences at the same time, the entries can be paired with the zip() function.\n\nnum = [1, 2, 3]\ncolors= ['red', 'blue', 'green']\nfor i in zip(num, colors):\n    print(i)\n\nnum = [1, 2, 3,4,5,6,7,8]  ## Output here would be the Same as Zip will combine only 3 items\ncolors= ['red', 'blue', 'green']\nfor i in zip(num, colors):\n    print(i)\n\n","ce2f407c":"#Make an iterator that aggregates elements from each of the iterables. \n#If the iterables are of uneven length, missing values are filled-in with fillvalue. \n#Iteration continues until the longest iterable is exhausted.\nfrom itertools import zip_longest\ncolors=['red','apple','three']  \nnum=[1,2,3,4,5]\nfor i in zip_longest(colors,num):# Unlike Zip Zip longest will combine the non null values with None\n    print (i)\n\nfrom itertools import zip_longest\ncolors=['red','apple','three']\nnum=[1,2,3,4,5]\nfor i in zip_longest(colors,num,fillvalue='NoMatch'):# Here the Non existing is replaced with NoMatch\n    print (i)\n","4e9c1963":"# Looping through the sequence (list) in sorted order(ascending order) using sorted () function.\nnum=[1,10,3,-1,4,34]\nfor i in sorted(num):  # Print the list in ascending order\n    print (i,end=\" \")   # End is written to print the output in Ascending order.\nprint()\n# Looping through the sequence (list) in sorted order(descending order) using sorted () function.\nlist1=[1,10,3,-1,4,34]\nfor i in sorted(list1,reverse=True):  # Print the list in descending order reverse=True is for that\n    print (i,end=\" \") # End is written to print the output in Ascending order.\n","6b3ed2bf":"# Looping Through Dicitionary \nbase=dict(a=1,b=2,c=3,d=4,e=5,f=6)  # Defining Dictionary dict word we dont need to put quote for similar types of values\nfor key,values in sorted(base.items()):  # the dictionary is printed in sorted order ascending \n    print(key,values,end=\" \")\n\nprint()\n  \nbase=dict(a=1,b=2,c=3,d=4,e=5,f=6)  # Defining Dictionary dict word we dont need to put quote for similar types of values\nfor key,values in sorted(base.items(),reverse=True):  # the dictionary is printed in sorted order reverse \n    print(key,values,end=\" \")","98211799":"import numpy as np\nimport pandas as pd\ndata = np.array(list('Kagglers'))\nser = pd.Series(data)\nprint(ser)\n## All the Operation of List slicing works on series as well \ndata = np.array(data)\nser = pd.Series(data,index=[10,11,12,13,14,15,16,17])#Series have index which can predefined else it gives defailt \nprint(ser,)\nincome={\"usa\":80000,\"germany\":50000,\"turkey\":15000}\nft=pd.Series(income)\nprint(ft['usa'])  ## here counteries becomes index and no's becomes values\nprint(ft.index,ft.values,ft.dtypes) # Can you tell why values are coming as int64","a1115f69":"x = np.array([1, 2, 3, 4, 5])\nprint(f\"Values in x {x} and its shape {x.dtype} with datatype {x.dtype} and size {x.size}\")\n\n# Create a rank 2 ndarray that only contains integers\ny = np.array([[1,2,3],[4,5,6],[7,8,9], [10,11,12]])\nprint(f\"Values in y {y} and its shape {y.shape} with datatype {y.dtype} and size {y.size}\")\ny=y.reshape(6,2)  # Reshape can only work if x * y \/ a * b divisible by anoter shape\nprint(\"After reshape values is: \")\nprint(y)","3a81bcaf":"# Specify the dtype when creating the ndarray\nx = np.array([1.5, 2.2, 3.7, 4.0, 5.9], dtype = np.int64) # Create np.array with dtype\nprint(x)\nprint(np.zeros((2,3)))# np.zeor for 2 * 3 matrix \nprint(np.ones((3,4)))  # np.ones will create 3 * 4 values \nnp.eye(5)  # A square matrix in which all the main diagonal elements are 1's and all the remaining elements are 0's is called an Identity Matrix. Identity Matrix is also called","32073242":"print(np.diag([10,20,30,50,60])) ## Self Explanatory dignonal matrix\nprint(np.arange(10))   # Creates 0-9 index \nprint(np.arange(4,10)) # Starting point is 4-9\nprint(np.arange(1,9,3)) # Here we define how \nprint(np.linspace(0,30,10))  ## Calculation 30 \/ 10 -1 \nprint(np.linspace(0,30,11))  ## Go from 0 -30 difference 30 \/ 11-1 =3 total element is last value\nprint(np.arange(20).reshape(4, 5))  ## Here we are 20 one dimension is converted to 4 * 5","6cffe339":"X=np.arange(20).reshape(4, 5)\nprint(X)\n#print(X[1:4,2:5])  ## Please tell me the command to get 12 from array list answer in next section\nX[:2,:2]","709e9bdb":"X[2,2:3]","e09a17f9":"# Random\nprint(np.random.random((2,2)))  #Creates the Random float of matrix between 0 and 1 \nnp.random.randint(4,15,size=(3,2)) # Creates random into \nprint(\"==>\",X)\nY=np.arange(12).reshape(3,4)\nprint(Y)\nY[0,2]=390  ## Changing Values in np.arrange. \nprint(\"==\",Y)\n","81b12b40":"# Delete\n# np.delete(ndarray, elements, axis)\nx = np.array([1, 2, 3, 4, 5])\nprint(x)\n# delete the first and fifth element of x\nx = np.delete(x, [0,4])\n","1c616b95":"x=np.arange(12)\nprint(x)\nx=np.append(x, [12], axis=0) \nx=np.append(x, [11], axis=0) \nprint(x)\n# Find Unique Elements in ndarray\nu = np.unique(X)\nprint(u)","49bd8515":"X = np.arange(15).reshape(3, 5)\nprint(X)\nprint('The elements in X that are greater than 11:', X[X > 11])\nprint('The elements in X that less than or equal to 4:', X[X <= 4])\nprint('The elements in X that are between 10 and 14:', X[(X > 10) & (X < 14)])\n\nX=np.array([1,6,4,2,4,3,4])  # Similar to this are numerous availabe in numpy\nprint(np.sort(X))\nprint(np.sort(np.unique(X)))","14e2fcfc":"# Pandas the first this is axis which is 0 for rows and 1 for Columns during any operation this is to be given\n#df.sum(axis=0)(Sum of Rows and 1 for columns )\n\n# limit which rows are read when reading in a file\n# pd.read_csv(\u2018df.csv\u2019, nrows=10) \n# pd.read_csv(\u2018df.csv\u2019, skiprows=[1, 2])   # Will Skip rows 1 and 2 \n\n# describe all object columns\n#df.describe(include=['object'])\n\n# describe all columns\n#df.describe(include='all')\n\n#temp1=pd.read_csv(local_path+'roemissing.csv',na_values=['NULL','RP',-999])  ( Conver the Values to NAN)\n#temp1=pd.read_csv(local_path+'roemissing.csv',na_values={'Number of firms':['NULL','RP',-999],'ROE':['10000.00%']})\n","c6f6dce2":"#df=pd.read_csv('..\/input\/roemissing\/roemissing.csv')\nimport pandas as pd\ndf=pd.read_csv('..\/input\/reemissing\/roemissing.csv')\n#df = pd.read_csv(\"SampleDataset.csv\", na_values=['?']) # Specify to convert ? values to null \n","fc35444b":"# Transpose the rows to columns useful in some cases\ndf.T","e6b9e8ce":"## Rename columns\ndf.rename(columns = {'Industry Name':'Industry','Number of firms':'No_of_firm'}, inplace = True) \n","a3d17d81":"## Advance Looping in Python\n1. Loop enumerate(): Return an enumerate object. iterable must be a sequence, an iterator, or some other object which supports iteration\n1. Loop using zip() function:\n1. Loop itertools.zip_longest()\n1. Loop sorted order using sorted()\n1. Loop using reversed() function:\n1. Looping through a dictionary.","0659a70c":"## String Operation\n1. Replacing String\n1. Adding String\n1. Multiplying String","ebb91d0a":"## Advance Python Topics\n1. Series \n2. Numpy \n3. Pandas\n","b93c5521":"## Boolean Data Types\n1. True and False Boolean \n1. Boolean with or without Values and their results\n","52b92437":"## String in Python \n1. String are immutable\n1. Different number of string can be accessed using Slicing \n1. String index starts at 0\n","7d4f751e":"## Dictionary in Python is an unordered collection of data values, used to store data values like a map, which unlike other Data Types that hold only single value as an element, Dictionary holds key:value pair. Key value is provided in the dictionary to make it more optimized.\n1. clear()\tRemoves all the elements from the dictionary\n1. copy()\tReturns a copy of the dictionary\n1. fromkeys()\tReturns a dictionary with the specified keys and value\n1. get()\tReturns the value of the specified key\n1. items()\tReturns a list containing a tuple for each key value pair\n1. keys()\tReturns a list containing the dictionary's keys\n1. pop()\tRemoves the element with the specified key\n1. popitem()\tRemoves the last inserted key-value pair\n1. setdefault()\tReturns the value of the specified key. If the key does not exist: insert the key, with the specified value\n1. update()\tUpdates the dictionary with the specified key-value pairs\n1. values()\tReturns a list of all the values in the dictionar\n\nPlease refer link for more in dictionary \nhttps:\/\/towardsdatascience.com\/15-things-you-should-know-about-dictionaries-in-python-44c55e75405c","f4ab4b43":"## Please refer this notbook for details on Numpy \nhttps:\/\/www.kaggle.com\/lavanyashukla01\/pandas-numpy-python-cheatsheet","e9d5f8b1":"## Basics of Python. \n 1. Different data Types in Python\n 1. Strings\n 1. Tuples \n 1. Lists, \n 1. range()\n 1. Print Function with Different types of Values\n 1. Dictionaries, \n 1. Sets ","b013f11a":"## Set is a collection which is unordered and unindexed. In Python, sets are written with curly brackets.\n1. add()\tAdds an element to the set\n1. clear()\tRemoves all the elements from the set\n1. copy()\tReturns a copy of the set\n1. difference()\tReturns a set containing the difference between two or more sets\n1. difference_update()\tRemoves the items in this set that are also included in another, specified set\n1. discard()\tRemove the specified item\n1. intersection()\tReturns a set, that is the intersection of two other sets\n1. intersection_update()\tRemoves the items in this set that are not present in other, specified set(s)\n1. isdisjoint()\tReturns whether two sets have a intersection or not\n1. issubset()\tReturns whether another set contains this set or not\n1. issuperset()\tReturns whether this set contains another set or not\n1. pop()\tRemoves an element from the set\n1. remove()\tRemoves the specified element\n1. symmetric_difference()\tReturns a set with the symmetric differences of two sets\n1. symmetric_difference_update()\tinserts the symmetric differences from this set and another\n1. union()\tReturn a set containing the union of sets\n1. update()\tUpdate the set with the union of this set and others\n","6f37f16f":" ## Mutable and immutable objects \n 1.  Mutable means can be changed .\n 1.  String , Tuples are Unmutable\n 1. List and Dictionary are Mutable","af40270a":"## Working with List \n1. Define Basic List \n1. Appending List\n1. Nested List\n1. Copy and Clear List\n1. Adding items in a list\n1. Adding items at specific value in List\n1. Copying list and copy with assigne a=b difference explained.\n1. List Slicing\n1. Delting selected group of rows . ","550f3267":"## Reading Different Files in Pandas\n1. df = pd.read_excel (r'E:\\UPX\\Assignements\\attachment_obes-phys-acti-diet_lyst6401_lyst6891.xls')\n1. df = pd.read_csv(filename,delimeter='\\t') for reading tab seprated csv file\n1. df1= pd.ExcelFile(r'E:\\UPX\\Assignements\\attachment_obes-phys-acti-diet_lyst6401_lyst6891.xls')\n1. df1.sheet_names ( Gives the Sheet Names )\n1. df = pd.read_csv(\"SampleDataset.csv\", index_col='ID',dtype={'ID':np.int32}) index column given specifically\n1. data_age=x1.parse(sheet_name='7.2',skiprows=4,skipfooter=14) \n\n( When read data as excel file needs to converted to normal dataframe uses parse method readable by python ) ","ec0a124a":"## Print Function with Different types of Values\n1. print Integer\n1. print Using {} \n1. print float to 3 decimal point\n1. print using %s of C language\n1. print using f most commonly using method","1a333766":"## Pandas Series is a one-dimensional labeled array capable of holding data of any type (integer, string, float, python objects, etc.). The axis labels are collectively called index. Pandas Series is nothing but a column in an excel sheet.","3a928f82":"## Please upvote if you Like it \n1. Please share your feedback on Comments session on How to improve \n1. Feel free to correct or Post suggestion and i will try to incorporate it next version.","96c3dde7":"### Range \n1. Range function was introduced only in Python3, while in Python2,it was xrange , range consumes less memory in comparision to tuples \n1. Range Function only works with integer and not with Float.","bce1f4cb":"## Numpy  is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays.( Wikipedia )  ","6c6a5125":"### Different Different Data Types in Python \n1. Python is run time language which means code is not pre- compiled , data type need not to be pre defined  . ","9f04bfcc":"![image.png](attachment:image.png)","78daf6cf":"# Basics of Python Explained 30 Minutes Read ","d352ec5e":"## A tuple is a collection of objects which ordered and immutable. Tuples are sequences, just like lists. The differences between tuples and lists are, the tuples cannot be changed unlike lists and tuples use parentheses, whereas lists use square brackets\n1. any()\tReturns True if any element present in a tuple and returns False if the tuple is empty\n1. min()\tReturns smallest element (Integer) of the Tuple\n1. max()\tReturns largest element (Integer) of the Tuple\n1. len()\tReturns the length of the Tuple\n1. sorted()\tUsed to sort all the elements of the Tuple\n1. sum()\tReturns sum of all elements (Integers) of the Tuples","d1e32ac0":"## Pandas ","caa49b05":"![image.png](attachment:image.png)","59b85dd7":"## Understanding Loops in Python\n1. For Loop\n1. WHile loop\n1. break conditon in loop\n\n","00d954c8":"## Working with Dates and Time \n1. Extract Date , Month , Time from Date\n1. datetime and time function \n1. Getting the current date in python\n1. Working with Tymezone for dates \n1. This linke will give complete list on Timezone https:\/\/gist.github.com\/heyalexej\/8bf688fd67d7199be4a1682b3eec7568"}}