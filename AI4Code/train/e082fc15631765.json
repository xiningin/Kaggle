{"cell_type":{"2d1388de":"code","7a1a11f0":"code","6a9354b0":"code","0807a1b8":"code","be6b9c02":"code","e6cdacd2":"code","91c4f3d0":"code","86f3ef72":"code","29fb8433":"code","07923e5e":"code","edebd966":"code","84d18273":"code","8710341a":"code","e66cbd28":"markdown","0e282183":"markdown","4f8f39c4":"markdown","7ae9eb61":"markdown","0265d6d8":"markdown","3e169e8f":"markdown","53ea1911":"markdown","71071bc8":"markdown","2432bc50":"markdown","b0406ab7":"markdown","34720c23":"markdown","394a0492":"markdown","139f7f25":"markdown","7f9db852":"markdown","65d898f2":"markdown","46cafd8e":"markdown","c7b97655":"markdown","ad7e47da":"markdown","5ee20d11":"markdown","c7091da1":"markdown","a792b0c3":"markdown","802c1277":"markdown","1522ed70":"markdown","6a2fbe65":"markdown"},"source":{"2d1388de":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom tqdm.auto import tqdm\nimport shutil as sh","7a1a11f0":"!cp -r ..\/input\/yolov5\/* .","6a9354b0":"#uncomment this line \n#!pip install -r requirements.txt","0807a1b8":"df = pd.read_csv('..\/input\/global-wheat-detection\/train.csv')\nbboxs = np.stack(df['bbox'].apply(lambda x: np.fromstring(x[1:-1], sep=',')))\nfor i, column in enumerate(['x', 'y', 'w', 'h']):\n    df[column] = bboxs[:,i]\ndf.drop(columns=['bbox'], inplace=True)\ndf['x_center'] = df['x'] + df['w']\/2\ndf['y_center'] = df['y'] + df['h']\/2\ndf['classes'] = 0\nfrom tqdm.auto import tqdm\nimport shutil as sh\ndf = df[['image_id','x', 'y', 'w', 'h','x_center','y_center','classes']]","be6b9c02":"df.head()","e6cdacd2":"df.image_id.nunique()","91c4f3d0":"index =  list(sorted(set(df.image_id)))","86f3ef72":"source = 'train'\nif True:\n    for fold in [0]:\n        val_index = index[len(index)*fold\/\/5:len(index)*(fold+1)\/\/5]\n        for name,mini in tqdm(df.groupby('image_id')):\n            if name in val_index:\n                path2save = 'val2017\/'\n            else:\n                path2save = 'train2017\/'\n            if not os.path.exists('convertor\/fold{}\/labels\/'.format(fold)+path2save):\n                os.makedirs('convertor\/fold{}\/labels\/'.format(fold)+path2save)\n\n            if not os.path.exists('convertor\/fold{}\/labels\/'.format(fold)+path2save+name+\".txt\"):   \n              with open('convertor\/fold{}\/labels\/'.format(fold)+path2save+name+\".txt\", 'w+') as f:\n                  row = mini[['classes','x_center','y_center','w','h']].astype(float).values\n                  row = row\/1024\n                  row = row.astype(str)\n                  for j in range(len(row)):\n                      text = ' '.join(row[j])\n                      f.write(text)\n                      f.write(\"\\n\")\n            if not os.path.exists('convertor\/fold{}\/images\/{}'.format(fold,path2save)):\n                os.makedirs('convertor\/fold{}\/images\/{}'.format(fold,path2save))\n\n            if not os.path.exists('convertor\/fold{}\/images\/{}\/{}.jpg'.format(fold,path2save,name)):    \n              sh.copy(\"..\/input\/global-wheat-detection\/{}\/{}.jpg\".format(source,name),'convertor\/fold{}\/images\/{}\/{}.jpg'.format(fold,path2save,name))","29fb8433":"# Apex install\n#uncomment this line\n#!git clone https:\/\/github.com\/NVIDIA\/apex && cd apex && pip install -v --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" . --user && cd .. && rm -rf apex","07923e5e":"#uncomment this line \n#!python .\/train.py --img 1024 --batch 2 --epochs 1 --data \"..\/input\/configyolo5v1\/configYolo5v1\/wheat0.yaml\" --cfg \"..\/input\/yolov5yaml\/yolov5xx.yaml\"   --name yolov5x_fold0 --weights yolov5x.pt","edebd966":"rm -rf .\/convertor","84d18273":"#!cp \"\/content\/weights\/last_yolov5x_fold3.pt\" \"\/content\/drive\/My Drive\/your_path_here\"\n#!cp \"\/content\/weights\/best_yolov5x_fold3.pt\" \"\/content\/drive\/My Drive\/your_path_here\"","8710341a":"\"\"\"\"\"\n\nfunction ClickConnect(){\nconsole.log(\"Working\"); \ndocument.querySelector(\"colab-toolbar-button\").click() \n}setInterval(ClickConnect,60000)\n\n\"\"\"","e66cbd28":"![image.png](attachment:image.png)","0e282183":"# **Introduction**","4f8f39c4":"* **--batch** : the batch size, and here I choose 2 because it gives the best results.\n* **--epochs** : here I choose 1 but to just show you how it works. You can set it to **100**\n* **--data** : it's path to the yaml file which contains the paths to our training data (which we stored in **convertor** directory)\n* **--cfg** : the path to our custom yolov5 yaml config file.\n* **--name** : after training this prefix s added to last and best so we get best_yolov5x_fold0.pt and last_yolov5x_fold0.pt.\n* **--weights** : that's the most important argument, here we tell Yolov5 to use coco pretrained weights to train on our data.  \n","7ae9eb61":"# **Next  ?** ","0265d6d8":"# What Next ? ","3e169e8f":"# Dataframe Creation : ","53ea1911":"Hey Everyone, My Name is **Nacir Bouazizi** and in this notebook I am going to show how simply add coco pretrained weights and get a **score > 0.735** without Pseudo Labeling and **> 0.76** with Pseudo Labeling . I am going to make this as easy as possible for everyone to make their submission.\n\nDon't Forget to **Upvote** this notebook if you find it helpful.\n\nPs : this notebook is based on the great work of [OrKatz](https:\/\/www.kaggle.com\/orkatz2) which you can find it [here](https:\/\/www.kaggle.com\/orkatz2\/yolov5-train) + Some useful tips to make training with coco pretrained weights easier for everyone + Useful tips to train on Colab without having runtime issues. So I hope you enjoy reading it as much as I did writing it.\n\nLet's start with importing some useful Modules :","71071bc8":"Training for 100 epochs takes alot of time and we can't do that on kaggle because we have limited ressources. So my advice would be to use Colab ( or Colab Pro if you can pay **10$\/month**) \nBut many are complaining about runtime errors and random disconnections on Colab. \nSo here's how you can train on it and go to sleep \ud83d\ude03","2432bc50":"Go to sleep \ud83d\ude34.\nAnd the next day you wakeup, train for the remaining epochs (if you use normal colab). \nWhen you finish training take a look on this great notebooks to make an inference : \n* [YoloV5 Pseudo Labeling](https:\/\/www.kaggle.com\/nvnnghia\/yolov5-pseudo-labeling)\n* [YoloV5 fake or real [Single Model] L.B>0.753](https:\/\/www.kaggle.com\/orkatz2\/yolov5-fake-or-real-single-model-l-b-0-753)\n* [YoloV5 [Single Model] with more TTA L.B>0.745](https:\/\/www.kaggle.com\/wasupandceacar\/yolov5-single-model-with-more-tta-lb-0-745)","b0406ab7":"# Training: ","34720c23":"You won't have a problem because you will have a 24 hours session \ud83d\ude03","394a0492":"Many of you have been asking how to fix this because we loose everything everytime Colab disconnects and no one wants that especially in this competition \ud83d\ude22 So here's how to avoid it using a simple Javascript code. You can copy paste it in your console. **ctrl +Shift + I** to open it.","139f7f25":"Here's a screenshot to better illustrate my words. ","7f9db852":"Now comes the good and easy part. Let's install **apex** first which will make our training faster. ","65d898f2":"Let's copy the content of yolov5 to our current directory.","46cafd8e":"We are going to choose **fold 0** to be our **OOF**. **Fold 0** gave the **best** score compared to the other folds but we can't trust it as we may overfit. Maybe I'll post another notebook to show how to train on different folds and make an ensemble out of them if some of you asked for it. But now let's just take **fold 0** to show how much it is simple to use **Yolo5**.","c7b97655":"Now we will train our model using coco pretrained weights so below you can find the command and I'm going to explain important arguments in this command : ","ad7e47da":"I think I finished my job here, I hope you like this notebook, it's my first one. Upvote to see more content like this one. And feel free to ask anything below. I can help just ask \ud83d\ude0a","5ee20d11":"\ud83d\uded1**PS** : this validation strategy is not that good but here we just want to show how to train using coco pretrained weights.\n","c7091da1":"We have to make our data in a format that yolov5 accepts, and that's what we are doing below :","a792b0c3":"**Avoid Runtime Erros and disconnections :** ","802c1277":"Every epoch takes 10 to 12 minutes so that's 16.6 to 20 hours to train for 100 epochs. \nNormal Colab gives you a session of 12 hours per day. so we can train up to 72 epochs (maximum) and 60 (minimum ) . That's not always the case but it's an approximation. \nSo my advice would be :\n* to train for 50 epochs and save your weights (which you can find in the weights folder) to your drive using this command : ","1522ed70":"**If you choose to use Normal Colab :** ","6a2fbe65":"**If you choose to use Colab Pro :**"}}