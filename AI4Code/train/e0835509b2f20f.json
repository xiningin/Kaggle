{"cell_type":{"5b7abb4f":"code","bc32db41":"code","0aaa39e6":"code","c543c44c":"code","78582fc5":"code","fd308b26":"code","bdae6fa4":"code","b8e03fdd":"code","965ca151":"code","bc0df279":"code","73ff87f6":"code","2acbe436":"code","668f6a6f":"code","3f3f8f15":"markdown","b577ba77":"markdown","3babfa0b":"markdown","72b655ef":"markdown","b596b881":"markdown","ec015ae7":"markdown","446f99b4":"markdown","54030a4a":"markdown","4d489ec2":"markdown","40e023bd":"markdown","35cc7e4f":"markdown","3cb5d7d3":"markdown","acf8dc78":"markdown","46f074f8":"markdown","7ddb2b3d":"markdown","0fe554bb":"markdown"},"source":{"5b7abb4f":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n\nfrom scipy.stats import uniform, randint","bc32db41":"df_train = pd.read_csv('\/kaggle\/input\/mercedes-benz-greener-manufacturing\/train.csv.zip')\ndf_test = pd.read_csv('\/kaggle\/input\/mercedes-benz-greener-manufacturing\/test.csv.zip')\nsubmission = pd.read_csv('\/kaggle\/input\/mercedes-benz-greener-manufacturing\/sample_submission.csv.zip')","0aaa39e6":"df_train","c543c44c":"df_train['y'].hist(bins=100)","78582fc5":"threshold = df_train['y'].quantile(0.99)\n\nwhere = df_train['y'] <= threshold\n\ndf_train = df_train[where]\n\ndf_train['y'].hist(bins=100)","fd308b26":"std = df_train.std()\n\ncolumns = std[std == 0].index\n\ndf_train = df_train.drop(columns=columns)\n\ndf_train","bdae6fa4":"df_test = df_test.drop(columns=columns)\n\ndf_test","b8e03fdd":"for column in df_train:\n    \n    if df_train[column].dtypes == 'object':\n        \n        X = [df_train[column], df_test[column]]\n        X = np.hstack(X)\n        \n        enc = LabelEncoder()\n        enc.fit(X)\n        \n        df_train[column] = enc.transform(df_train[column])\n        df_test[column] = enc.transform(df_test[column])\n        \ndf_train","965ca151":"X_train = df_train.loc[:, 'X0':]\ny_train = df_train.loc[:, 'y']","bc0df279":"param_random = {\n    'learning_rate': uniform(0.01, 0.1),\n    'n_estimators': randint(100, 300),\n    'max_depth': randint(3, 5)\n}\nmodel_gbr = RandomizedSearchCV(GradientBoostingRegressor(), param_random, n_jobs=-1)\nmodel_gbr.fit(X_train, y_train)\nmodel_gbr.best_score_","73ff87f6":"param_random = {\n    'C': uniform(0.1, 3.0),\n}\nmodel_svr = RandomizedSearchCV(SVR(), param_random, n_jobs=-1)\nmodel_svr.fit(X_train, y_train)\nmodel_svr.best_score_","2acbe436":"param_random = {\n    'alpha': uniform(0.01, 100),\n    'l1_ratio': uniform(0.25, 0.75)\n}\nmodel_esn = RandomizedSearchCV(ElasticNet(), param_random, n_jobs=-1, n_iter=100)\nmodel_esn.fit(X_train, y_train)\nmodel_esn.best_score_","668f6a6f":"X_test = df_test.loc[:, 'X0':]\ny_test = 0.5 * model_gbr.predict(X_test) + 0.1 * model_svr.predict(X_test) + 0.4 * model_esn.predict(X_test)\nsubmission['y'] = y_test\nsubmission.to_csv('submssion.csv', index=False)","3f3f8f15":"### 2020.09.07\n - How to join kaggle competition and submit a submission\n - RandomForestRegressor\n - K-Fold Cross Validation\n - GridSearchCV\n\n### 2020.09.14\n - Outliers\n - Low variance features\n - LabelEncoder\n - GradientBoostingRegressor\n\n### 2020.09.16\n - Deep Learning Model\n \n### 2020.09.23\n - RandomSearchCV\n - Ensemble(ElasticNet, SVM, DNN, GradientBoosting)","b577ba77":"# Predict test data","3babfa0b":"### 2.SVR","72b655ef":"# Outliers","b596b881":"# Modeling","ec015ae7":"# Load modules","446f99b4":"X_train = df_train.loc[:, 'X10':]\ny_train = df_train.loc[:, 'y']","54030a4a":"### 4. Deep Neural Network","4d489ec2":"# Label encoding","40e023bd":"# Logs","35cc7e4f":"# Remove low variance features (std = 0)","3cb5d7d3":"### 1. Gradient Boosting Regressor","acf8dc78":"model = tf.keras.Sequential([\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(1)\n])\nmodel.compile(loss='mean_squared_error', metrics=[r2_keras])\nmodel.fit(X_train, y_train, batch_size=128, epochs=40, verbose=1)","46f074f8":"# Load files","7ddb2b3d":"import tensorflow.keras.backend as K\n\ndef r2_keras(y_true, y_pred):\n    SS_res = K.sum(K.square(y_true - y_pred)) \n    SS_tot = K.sum(K.square(y_true - K.mean(y_true))) \n    return (1 - SS_res \/ (SS_tot + K.epsilon()))","0fe554bb":"### 3.ElasticNet"}}