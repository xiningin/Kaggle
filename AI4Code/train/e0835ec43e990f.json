{"cell_type":{"394bc8ec":"code","e0a23a03":"code","9d1638ca":"code","8b161aa2":"code","5f05bca2":"code","88a270b3":"code","856dbb2a":"code","2351d07b":"code","2737c4db":"code","e15209fb":"markdown"},"source":{"394bc8ec":"# import necessary modules\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data plotting\nimport seaborn as sns # data plotting\n\n# data testing\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split \n\n# Different models\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n# lists all files under input directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","e0a23a03":"# The next 2 cells load and print the first 5 rows of each dataframe\n\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest.head()","9d1638ca":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain.head()","8b161aa2":"# Exploratory data analysis\n\ny = train[\"Survived\"]\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"] # Did not include all features to avoid overfitting\nX = pd.get_dummies(train[features])\nX_test = pd.get_dummies(test[features])\n\nsurvivingFirstClass = train[(train['Pclass'] == 1) & (train['Survived'] == 1)]\nsFC_Ratio = survivingFirstClass.shape[0] \/ train[train['Pclass'] == 1].shape[0]\nprint(str(sFC_Ratio * 100) + \" is the percentage of first class passengers that survived\")\n\nprint(train.isnull().sum())\n\ntrain['Age'] = train['Age'].fillna(train['Age'].mean())\nprint(train['Age'].isnull().sum())","5f05bca2":"# Predict using Decision Trees\n\ntree = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\ntree.fit(X, y)\npredictionsTrees = tree.predict(X_test)","88a270b3":"# Modeling\/Predicting using linear regression\n\nreg = LinearRegression()\nreg.fit(X, y)\npredictions = reg.predict(X_test)","856dbb2a":"# Modeling\/Predicting with Nearest Neighbors\n\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X, y)\npredictionsKNN = knn.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': predictionsKNN})\noutput.to_csv('submission3.csv', index=False)","2351d07b":"# Modeling\/Predicting with SGDClassifier\n\nlinear_classifier = SGDClassifier(random_state=0)\nparameters = {'alpha':[0.00001, 0.0001, 0.001, 0.01, 0.1, 1], \n             'loss':['hinge', 'log'], 'penalty':['l1', 'l2']}\nsearcher = GridSearchCV(linear_classifier, parameters, cv=10)\nsearcher.fit(X, y)\n\nprint(\"Best CV params\", searcher.best_params_)\nprint(\"Best CV accuracy\", searcher.best_score_)\n\noutput = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': searcher})\noutput.to_csv('submission2.csv', index=False)","2737c4db":"# Choosing a model\noutput = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': predictionsTrees})\noutput.to_csv('submission.csv', index=False)","e15209fb":"I chose the Random Forest Classifier Model because it had the highest accuracy"}}