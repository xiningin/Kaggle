{"cell_type":{"2835704a":"code","104258d7":"code","fb8ff539":"code","ce48ba4c":"code","bfa2c368":"code","03ed8fa4":"code","14da4158":"code","8b579106":"code","e4ca402b":"code","6290ecdc":"code","60fa8200":"code","9cae49fb":"code","72555ff5":"code","8da502cc":"code","5eddfaf0":"code","2fe1f3e1":"code","60173e07":"code","1dcaa786":"code","da4b8342":"code","5a6584d9":"code","8e5dec83":"code","00dcab23":"code","0a5cc1f3":"code","2ebd66f6":"code","318a92d1":"code","fa7f3e8e":"code","f933f0d1":"code","076dcdc3":"code","a6661308":"code","4b219b53":"code","14b56de3":"code","d606f906":"code","c8ebe4aa":"code","48d1ae55":"code","1c150f70":"code","44b62af8":"code","fa9db7bf":"code","6839a67c":"code","0a0f1f15":"code","069c5c08":"code","7868d4ed":"code","158c0fc0":"code","521173f9":"code","45de8e67":"code","92b15e7e":"code","fc814706":"code","d09dd1d0":"markdown","8e48b7d7":"markdown","eb1d755d":"markdown","4db8e0bb":"markdown","e59444ff":"markdown","0f7a3a3e":"markdown","942de0cb":"markdown","e88fdaef":"markdown","be00e1c9":"markdown"},"source":{"2835704a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","104258d7":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom scipy import stats\nfrom sklearn.metrics import accuracy_score","fb8ff539":"train = pd.read_csv(\"..\/input\/train.csv\")\nprint(\"The shape of train data : \" + str(train.shape))","ce48ba4c":"test = pd.read_csv(\"..\/input\/test.csv\")\nprint(\"The shape of test data : \" + str(test.shape))","bfa2c368":"train.head()","03ed8fa4":"train.info()","14da4158":"test.info()","8b579106":"plt.subplots(figsize = (12,10))\nsns.distplot(train['SalePrice'], fit = stats.norm)\n\nfig = plt.figure()\nstats.probplot(train['SalePrice'], plot = plt)\nplt.show()","e4ca402b":"train['SalePrice'] = np.log1p(train['SalePrice'])","6290ecdc":"plt.subplots(figsize = (12,10))\nsns.distplot(train['SalePrice'], fit = stats.norm)\n\nfig = plt.figure()\nstats.probplot(train['SalePrice'], plot = plt)\nplt.show()","60fa8200":"plt.scatter(train.GrLivArea, train.SalePrice, c = \"blue\", marker = \"o\")\nplt.title(\"Looking for outliers\")\nplt.xlabel(\"GrLivArea\")\nplt.ylabel(\"SalePrice\")\nplt.show()","9cae49fb":"train.columns[train.isnull().any()]","72555ff5":"plt.subplots(figsize = (12,10))\nsns.heatmap(train.isnull())\nplt.show()","8da502cc":"train_id = train['Id']\ntrain.drop(['Id'], axis = 1, inplace = True)\ny_train = train['SalePrice']","5eddfaf0":"test_id = test['Id']\ntest.drop(['Id'], axis = 1, inplace = True)","2fe1f3e1":"train_corr = train.corr()\nplt.subplots(figsize = (12,10))\nsns.heatmap(train_corr)\nplt.show()","60173e07":"new_train = train.shape[0]\nnew_test = test.shape[0]\ny_train = train.SalePrice.values\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"The shape of all_data is : {}\".format(all_data.shape))","1dcaa786":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Percentage' :all_data_na})\nmissing_data.head(30)","da4b8342":"all_data['PoolQC'] = all_data['PoolQC'].fillna('None')\nall_data['MiscFeature'] = all_data['MiscFeature'].fillna('None')\nall_data['Alley'] = all_data['Alley'].fillna('None')\nall_data['Fence'] = all_data['Fence'].fillna('None')\nall_data['FireplaceQu'] = all_data['FireplaceQu'].fillna('None')\nall_data['LotFrontage'] = all_data['LotFrontage'].fillna('None')\nall_data['Neighborhood'] = all_data['Neighborhood'].fillna('None')\n\nfor col in ['GarageCond', 'GarageType','GarageQual','GarageYrBlt','GarageFinish']:\n    all_data[col] = all_data[col].fillna('None')\n\nfor col in ['BsmtExposure','BsmtFinType2','BsmtFinType1','BsmtCond','BsmtQual','MasVnrType']:\n    all_data[col] = all_data[col].fillna('None')\n\nall_data['MasVnrArea'] = all_data['MasVnrArea'].fillna(int(0))\nall_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])","5a6584d9":"all_data['MSZoning'] = all_data['MSZoning'].fillna('None')\nall_data['Functional'] = all_data['Functional'].fillna('None')\nall_data['BsmtFullBath'] = all_data['BsmtFullBath'].fillna('None')\nall_data['BsmtHalfBath'] = all_data['BsmtHalfBath'].fillna('None')\nall_data['TotalBsmtSF'] = all_data['TotalBsmtSF'].fillna('None')\nall_data['SaleType'] =all_data['SaleType'].fillna('None')\nall_data['GarageArea'] = all_data['GarageArea'].fillna('None')\nall_data['Exterior1st'] = all_data['Exterior1st'].fillna('None')\nall_data['BsmtUnfSF'] = all_data['BsmtUnfSF'].fillna('None')\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna('None')\nall_data['KitchenQual'] = all_data['KitchenQual'].fillna('None')\nall_data['GarageCars'] = all_data['GarageCars'].fillna('None')\nall_data['BsmtFinSF1'] =all_data['BsmtFinSF1'].fillna('None')\nall_data['BsmtFinSF2'] = all_data['BsmtFinSF2'].fillna('None')\n                                                       \nall_data['Utilities'] = all_data.drop(['Utilities'], axis = 1)","8e5dec83":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Percentage' :all_data_na})\nmissing_data.head(30)","00dcab23":"from sklearn.preprocessing import LabelEncoder\ncols = ('1stFlrSF', '2ndFlrSF', '3SsnPorch', 'Alley', 'BedroomAbvGr',\n       'BldgType', 'BsmtCond', 'BsmtExposure', 'BsmtFinSF1', 'BsmtFinSF2',\n       'BsmtFinType1', 'BsmtFinType2', 'BsmtFullBath', 'BsmtHalfBath',\n       'BsmtQual', 'BsmtUnfSF', 'CentralAir', 'Condition1', 'Condition2',\n       'Electrical', 'EnclosedPorch', 'ExterCond', 'ExterQual', 'Exterior1st',\n       'Exterior2nd', 'Fence', 'FireplaceQu', 'Fireplaces', 'Foundation',\n       'FullBath', 'Functional', 'GarageArea', 'GarageCars', 'GarageCond',\n       'GarageFinish', 'GarageQual', 'GarageType', 'GarageYrBlt', 'GrLivArea',\n       'HalfBath', 'Heating', 'HeatingQC', 'HouseStyle', 'KitchenAbvGr',\n       'KitchenQual', 'LandContour', 'LandSlope', 'LotArea', 'LotConfig',\n       'LotFrontage', 'LotShape', 'LowQualFinSF', 'MSSubClass', 'MSZoning',\n       'MasVnrArea', 'MasVnrType', 'MiscFeature', 'MiscVal', 'MoSold',\n       'Neighborhood', 'OpenPorchSF', 'OverallCond', 'OverallQual',\n       'PavedDrive', 'PoolArea', 'PoolQC', 'RoofMatl', 'RoofStyle',\n       'SaleCondition', 'SaleType', 'ScreenPorch', 'Street', 'TotRmsAbvGrd',\n       'TotalBsmtSF', 'Utilities', 'WoodDeckSF', 'YearBuilt', 'YearRemodAdd',\n       'YrSold')\n\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\n     \nprint('Shape all_data: {}'.format(all_data.shape))","0a5cc1f3":"x_train = all_data[:new_train]\nx_test = all_data[new_train:]","2ebd66f6":"from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold","318a92d1":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(x_train,y_train)\nlr_pred = lr.predict(x_test)\n\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = lr, X = x_train, y = y_train, cv = 10)\naccuracies.mean()","fa7f3e8e":"from sklearn.linear_model import LassoCV\nlasso = LassoCV(alphas = [0.0001, 0.0003, 0.0006, 0.001, 0.003, 0.006, 0.01, 0.03, 0.06, 0.1, \n                          0.3, 0.6, 1], \n                max_iter = 50000, cv = 10)\nlasso.fit(x_train, y_train)\nalpha = lasso.alpha_\nprint(\"Best alpha :\", alpha)\n\nprint(\"Try again for more precision with alphas centered around \" + str(alpha))\nlasso = LassoCV(alphas = [alpha * .6, alpha * .65, alpha * .7, alpha * .75, alpha * .8, \n                          alpha * .85, alpha * .9, alpha * .95, alpha, alpha * 1.05, \n                          alpha * 1.1, alpha * 1.15, alpha * 1.25, alpha * 1.3, alpha * 1.35, \n                          alpha * 1.4], \n                max_iter = 50000, cv = 10)\nlasso.fit(x_train, y_train)\nalpha = lasso.alpha_\nprint(\"Best alpha :\", alpha)\nlasso_pred = lasso.predict(x_test)","f933f0d1":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = lasso, X = x_train, y = y_train, cv = 10)\naccuracies.mean()","076dcdc3":"from sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor(n_estimators= 1000)\nrfr.fit(x_train,y_train)\nrfr_pred = rfr.predict(x_test)\n\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = rfr, X = x_train, y = y_train, cv = 10)\naccuracies.mean()","a6661308":"from sklearn.ensemble import GradientBoostingRegressor\ngbr = GradientBoostingRegressor()\ngbr.fit(x_train,y_train)\ngbr_pred = gbr.predict(x_test)\n\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = gbr, X = x_train, y = y_train, cv = 10)\naccuracies.mean()","4b219b53":"from sklearn.model_selection import GridSearchCV\n\nparam_grid={'n_estimators':[100], 'learning_rate': [0.1,0.05, 0.02, 0.01], 'max_depth':[6,4,6], 'min_samples_leaf':[3,5,9,17], 'max_features':[1.0,0.3,0.1] }\nn_jobs=4 \ngrid = GridSearchCV(GradientBoostingRegressor(),param_grid)\ngrid.fit(x_train,y_train)","14b56de3":"grid.best_params_","d606f906":"gbr = GradientBoostingRegressor(learning_rate= 0.1,\n max_depth= 6,\n max_features= 0.1,\n min_samples_leaf= 9,\n n_estimators= 100)\ngbr.fit(x_train,y_train)\ngbr_pred = gbr.predict(x_test)\n\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = gbr, X = x_train, y = y_train, cv = 10)\naccuracies.mean()","c8ebe4aa":"from xgboost import XGBRegressor \nxgbr = XGBRegressor(max_depth=4,learning_rate=0.1,n_estimators=1000)\nxgbr.fit(x_train,y_train)\nxgbr_pred = xgbr.predict(x_test)\n\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = xgbr, X = x_train, y = y_train, cv = 10)\naccuracies.mean()","48d1ae55":"param = {'nthread':[4], \n              'objective':['reg:linear'],\n              'learning_rate': [.03, 0.05, .07],\n              'max_depth': [5, 6, 7],\n              'min_child_weight': [4],\n              'silent': [1],\n              'subsample': [0.7],\n              'colsample_bytree': [0.7],\n              'n_estimators': [500]}\ngrid = GridSearchCV(XGBRegressor(),param)\ngrid.fit(x_train,y_train)","1c150f70":"grid.best_params_","44b62af8":"xgbr = XGBRegressor(colsample_bytree= 0.7,\n learning_rate= 0.05,\n max_depth= 5,\n min_child_weight= 4,\n n_estimators=500,\n nthread=4,\n objective= 'reg:linear',\n silent= 1,\n subsample=0.7)\nxgbr.fit(x_train,y_train)\nxgbr_pred = xgbr.predict(x_test)","fa9db7bf":"accuracies = cross_val_score(estimator = xgbr, X = x_train, y = y_train, cv = 10)\naccuracies.mean()","6839a67c":"from lightgbm import LGBMRegressor\nlgbm = LGBMRegressor(objective='regression', \n                                       num_leaves=6,\n                                       learning_rate=0.01, \n                                       n_estimators=6400,\n                                       verbose=-1,\n                                       bagging_fraction=0.80,\n                                       bagging_freq=4, \n                                       bagging_seed=6,\n                                       feature_fraction=0.2,\n                                       feature_fraction_seed=7,\n                                    )\nlgbm.fit(x_train,y_train)\nlgbm_pred = lgbm.predict(x_test)\n\naccuracies = cross_val_score(estimator = lgbm, X = x_train, y = y_train, cv = 10)\naccuracies.mean()","0a0f1f15":"def rmse(y_train, y_pred):\n    return np.sqrt(mean_squared_error(np.log(y_train), np.log(y_pred)))","069c5c08":"from vecstack import stacking\nfrom sklearn.metrics import r2_score, mean_squared_error\nmodels = [lr,lasso,rfr,gbr,xgbr,lgbm]\n\nS_train, S_test = stacking(models,\n                           x_train, y_train, x_test,\n                           regression=True,\n                           mode='oof_pred_bag',\n                           metric=rmse,\n                           n_folds=5,\n                           random_state=25,\n                           verbose=2\n                          )","7868d4ed":"xgbr_new =  XGBRegressor(colsample_bytree= 0.7,\n learning_rate= 0.05,\n max_depth= 5,\n min_child_weight= 4,\n n_estimators=500,\n nthread=4,\n objective= 'reg:linear',\n silent= 1,\n subsample=0.7)\nxgbr_new.fit(S_train,y_train)\nxgbr_new_pred = xgbr_new.predict(S_test)\n\naccuracies = cross_val_score(estimator = xgbr_new, X = S_train, y = y_train, cv = 10)\naccuracies.mean()","158c0fc0":"lr_pred1 = models[0].predict(x_test)\nlasso_pred1 = models[1].predict(x_test)\nrfr_pred1 = models[2].predict(x_test)\ngbr_pred1 = models[3].predict(x_test)\nxgbr_pred1 = models[4].predict(x_test)\nlgbm_pred1 = models[5].predict(x_test)\nS_test = np.c_[lr_pred1,lasso_pred1,rfr_pred1,gbr_pred1,xgbr_pred1,lgbm_pred1]","521173f9":"final_pred = xgbr_new.predict(S_test)","45de8e67":"final_pred1 = np.expm1(final_pred)","92b15e7e":"sub = pd.DataFrame()\nsub['Id'] = test_id\nsub['SalePrice'] = final_pred1","fc814706":"sub.to_csv('submission.csv',index = False)","d09dd1d0":"Now, we check the values after transforming it using log(1+x)","8e48b7d7":"Hyper Tuning the parameters:","eb1d755d":"**Lets start with simple Linear Regression**","4db8e0bb":"To find the missing values in our training dataset","e59444ff":"Since, SalePrice is our target variable, we need to check whether the values of SalePrice are normally fitted and check for skewness.","0f7a3a3e":"**Imputing the missing values **","942de0cb":"Here, there are only two outliers I don't think these are going to affect our results. So I am not going to remopve it.","e88fdaef":"From the above probability plot, we could infer that the values are not normally fitted and they are right skewed. To fit the values normally, we need to use the log(1+x) transformation function.","be00e1c9":"Checking for Outliers:"}}