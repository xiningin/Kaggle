{"cell_type":{"21ef8537":"code","0f5d5df1":"code","7e2cf13a":"code","e0a46e3a":"code","f3488394":"code","287b9736":"code","f5c17e62":"code","878b6646":"code","94b9acb9":"code","fff2b01c":"code","0100a19c":"code","8b355093":"code","b4b6a510":"code","58ded231":"code","3987a8fd":"code","bc75d483":"code","5a3d8bcf":"code","4513394a":"code","fb543e1d":"code","8c2bf16f":"code","1d27d7ae":"code","4d0070fe":"code","af957c14":"code","912a5bfe":"code","68578636":"code","521382aa":"code","56b92112":"code","f69eeb26":"code","f55c9567":"code","b8370c89":"code","bc589d55":"code","f4c64301":"code","b79d9247":"code","bef6f6b6":"code","4112c27f":"code","2223e682":"code","53cb389b":"code","733c773d":"code","0a364c10":"code","a58e0763":"code","15ad8e56":"code","18ac9b2c":"code","113d2eed":"code","1ac7ef32":"code","362d54c8":"code","4b9eb9aa":"code","e48ff056":"code","91dc4754":"code","d28eae36":"code","769f630e":"code","b0496d8c":"code","1841a498":"code","0baf989f":"code","d93a255b":"code","c9950a4e":"code","6ec0d95f":"code","dd9b65c1":"code","e1489e12":"code","4e73c3bd":"code","e9cb6808":"code","18410f8e":"code","c3d96379":"code","8b9bb9fc":"code","2a24bde7":"code","fdee576d":"code","1139fa4d":"code","9f234d37":"code","44f138d2":"code","588bec37":"code","98c2321a":"code","fc8ab6d8":"code","27981a85":"code","8d004f6a":"code","26ee0239":"code","26d805aa":"code","9bc97eb1":"code","d12c1b4e":"code","3caa8587":"code","7b0cee5a":"code","7225a9bf":"code","f385b08f":"code","985ff8f2":"code","43381101":"code","a17628c0":"code","44048cb2":"code","5159316a":"code","90606230":"code","7f8dd27c":"code","e677e01d":"code","894cd9b7":"code","57e8ffa3":"code","86c5f1fa":"code","9f1c1deb":"code","fe3b6c20":"code","ba15e875":"markdown","09705f56":"markdown","700dddf3":"markdown","3a9d1cde":"markdown","c4fc65d7":"markdown","9b0fd21c":"markdown","fc9e2ab2":"markdown","485785ef":"markdown","5db68e5d":"markdown","e7ed3369":"markdown","97344e37":"markdown","96f62f82":"markdown","178a1edd":"markdown"},"source":{"21ef8537":"# Using the Python 3 environment with analytics libraries \n#as defined by the kaggle\/python docker \n\nimport numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0f5d5df1":"#other libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt \n%matplotlib inline\n\nimport sys\nimport warnings\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")\n    \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\n\nfrom sklearn import preprocessing\n\nimport statsmodels.api as sm \n","7e2cf13a":"df1=pd.read_csv('..\/input\/playstore-analysis\/googleplaystore.csv')\ndf1","e0a46e3a":"#are there NaNs?\ndf1.isnull().values.any()","f3488394":"#how many NaNs?\ndf1.isnull().sum().sum()","287b9736":"#which columns have NaNs?\ndf1.isna().any()","f5c17e62":"#remove rows with NaNs\ndf2=df1.dropna()\n\n#observe shape change\ndf2.shape","878b6646":"#fix Size column\n\ndf2['Size'] = df2['Size'].replace(['Varies with device'],'0k')\n\n#Extract Last character from right of the column \n#and make another one\n\ndf2['Measure'] = df2['Size'].str[-1:]\n\n#remove letter\ndf2['Size']=df2['Size'].replace({'M':'', 'k':'', 'K':''}, regex=True)\n\n#change datatype\ndf2['Size']=df2['Size'].astype(float)\n\ndf2['Size'] = np.where(df2['Measure'] == 'M',\n                                           df2['Size'] * 1000,\n                                           df2['Size'])\n","94b9acb9":"#drop added column\ndf3=df2.drop(['Measure'], axis=1)","fff2b01c":"#change datatype for Reviews column\ndf3['Reviews']=df3['Reviews'].astype(float)\n\n#fix Installs\n# remove special character \ndf3['Installs'] = df3['Installs'].str.replace('[,,+]', '') ","0100a19c":"#change datatype for Installs column\ndf3['Installs']=df3['Installs'].astype(int)","8b355093":"#fix Price\ndf3['Price'] = df3['Price'].str.replace('[$]', '') \n#change datatype \ndf3['Price']=df3['Price'].astype(float)","b4b6a510":"#verify\ndf3.head()","58ded231":"# delete all rows with Ratings outside the 1-5 range\nindexOut = df3[ (df3['Rating'] < 0) & (df3['Rating'] > 5) ].index\ndf3.drop(indexOut , inplace=True)","3987a8fd":"#verify\ndf3.shape","bc75d483":"# delete Review rows that exceed Installs\ndf3 = df3[df3['Reviews'] <= df3['Installs']]","5a3d8bcf":"#verify\ndf3.shape","4513394a":"# get indexes where free Types have a price over 0 \nindexOut2 = df3[(df3['Price'] >= 0.1) & (df3['Type'] == 'Free')].index \n  \n# drop these row \ndf3.drop(indexOut2, inplace = True) \n#verify  \ndf3.shape","fb543e1d":"#find possible outliers\n#boxplot Price and Review columns\nboxplot = df3.boxplot(column=['Price','Reviews'], rot=45)","8c2bf16f":"#verify individually\nsns.boxplot(y=df3[\"Price\"])","1d27d7ae":"#Price Histogram\ndf3.Price.plot.hist(color='salmon', figsize=(8,8))","4d0070fe":"df3[\"Price\"].unique()","af957c14":"sns.boxplot(y=df3[\"Reviews\"])","912a5bfe":"df3[\"Reviews\"].describe()","68578636":"df3[\"Reviews\"].value_counts().head(10)","521382aa":"# Density Plot and Histogram of ratings\nsns.distplot(df3['Rating'], hist=True, kde=True, \n             bins=int(180\/5), color = 'darkgreen', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4})","56b92112":"# Density Plot and Histogram of Size\nsns.distplot(df3['Size'], hist=True, kde=True, \n             bins=int(100\/5), color = 'darkorange', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4})","f69eeb26":"#drop Price rows at 200 and higher\ndf4=df3[df3['Price'] < 200]\n#verify\ndf4.shape","f55c9567":"#Drop Review rows with over 2 million reviews\ndf4=df4[df4['Reviews'] <= 2000000]\n#verify\ndf4.shape","b8370c89":"#drop rows with 100,000,000 and more Installs\ndf4=df4[df4['Installs'] <= 100000000]\n#verify\ndf4.shape","bc589d55":"percentiles=df4[['Rating','Reviews','Size','Installs','Price']]","f4c64301":"#10, 25, 50, 70, 90, 95, 99 percentiles\nprint(\"10th percentile : \",\n       np.percentile(percentiles, 10))\n\nprint(\"25th percentile : \",\n       np.percentile(percentiles, 25))\n\nprint(\"50th percentile : \", \n       np.percentile(percentiles, 50))\n\nprint(\"70th percentile : \",\n       np.percentile(percentiles, 70))\n\nprint(\"90th percentile : \",\n       np.percentile(percentiles, 90))\nprint(\"95th percentile : \",\n       np.percentile(percentiles, 95))\nprint(\"99th percentile  : \",\n       np.percentile(percentiles, 99))","b79d9247":"#find other outliers with boxplots \npercentiles.boxplot(rot=50)","bef6f6b6":"percentiles.boxplot(column=['Rating'])","4112c27f":"#remove outliers\nindexOut3 = df4[(df4['Rating'] < 3.5) ].index\ndf4.drop(indexOut3 , inplace=True)","2223e682":"df4.shape","53cb389b":"percentiles.boxplot(column=['Size'])","733c773d":"percentiles.boxplot(column=['Price'], figsize=(7,7))","0a364c10":"#remove outliers\nindexOut4 = df4[(df4['Price'] > 40)].index\ndf4.drop(indexOut4 , inplace=True)\n#verify\ndf4.shape","a58e0763":"percentiles.boxplot(column=['Installs'])","15ad8e56":"#remove outliers\nindexOut5 = df4[(df4['Installs'] >= 100000000)].index\ndf4.drop(indexOut5 , inplace=True)\n#verify\ndf4.shape","18ac9b2c":"#correlation graph\ncorr1=df4.corr()\nsns.heatmap(corr1, cmap=\"YlOrBr\")","113d2eed":"sns.catplot(x=\"Type\", y=\"Rating\", data=df4)","1ac7ef32":"# 'Android Ver' and Rating\nc=sns.catplot(x=\"Android Ver\", y=\"Rating\", data=df4, palette ='icefire', height=5, aspect=6)","362d54c8":"#Scatter plot for Rating vs. Price\nplt.figure(figsize=(10, 9))\nsns.scatterplot(\n    data=df4, x=\"Rating\", y=\"Price\", hue=\"Rating\", size=\"Rating\",\n    sizes=(20, 200), hue_norm=(0, 5), legend=\"full\")","4b9eb9aa":"#Scatter plot for Rating vs. Size\nplt.figure(figsize=(10, 9))\nsns.scatterplot(\n    data=df4, x=\"Rating\", y=\"Size\", hue=\"Rating\", size=\"Rating\",\n    sizes=(20, 200), hue_norm=(2, 7), legend=\"full\")","e48ff056":"#Scatter plot for Rating vs. Price\n\nplt.figure(figsize=(10, 9))\nsns.scatterplot(\n    data=df4, x=\"Rating\", y=\"Reviews\", hue=\"Rating\", size=\"Rating\",\n    sizes=(20, 200), hue_norm=(4, 6), legend=\"full\")","91dc4754":"# 'Content Rating' and Price\nc=sns.catplot(x=\"Content Rating\", y=\"Rating\", data=df4, palette ='icefire', height=3.5, aspect=5)","d28eae36":"plt.figure(figsize=(12, 5))\nr=sns.boxplot(x ='Content Rating', y ='Rating', data = df4, palette ='cubehelix') \nplt.setp(r.get_xticklabels(), rotation=45)","769f630e":"# Plot category in relation to rating\nplt.figure(figsize=(15, 6))\ng=sns.boxplot(x ='Category', y ='Rating', data = df4, palette ='plasma') \nplt.setp(g.get_xticklabels(), rotation=70)\n","b0496d8c":"# Plot categorical data in relation to Genres\nplt.figure(figsize=(16, 8))\ng=sns.barplot(x ='Genres', y ='Rating', data = df4, palette ='Set2') \nplt.setp(g.get_xticklabels(), rotation=90)","1841a498":"df4.describe()","0baf989f":"df4.plot(x='Reviews', y='Rating', style='+')  \nplt.title('Reviews and Rating')  \nplt.xlabel('Reviews')  \nplt.ylabel('Rating')  \nplt.show()","d93a255b":"X = df4['Reviews'].values.reshape(-1,1)\ny = df4['Rating'].values.reshape(-1,1)","c9950a4e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2)","6ec0d95f":"reg1 = LinearRegression()  \nreg1.fit(X_train, y_train) #training the algorithm","dd9b65c1":"reg1.intercept_","e1489e12":"reg1.coef_","4e73c3bd":"y_pred = reg1.predict(X_test)","e9cb6808":"dfReg1 = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred.flatten()})\ndfReg1","18410f8e":"top10=dfReg1.head(10)\ntop10.plot(kind='bar',figsize=(8,10))\nplt.grid(which='major', linestyle='-', linewidth='0.3', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","c3d96379":"plt.scatter(X_test, y_test,  color='gray')\nplt.plot(X_test, y_pred, color='purple', linewidth=2)\nplt.show()","8b9bb9fc":"'Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred)","2a24bde7":"'Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred)","fdee576d":"'Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred))","1139fa4d":"#Price variable\ndf4.plot(x='Price', y='Rating', style='*', color='darkorange')  \nplt.title('Price and Rating')  \nplt.xlabel('Price')  \nplt.ylabel('Rating')  \nplt.show()","9f234d37":"X = df4['Reviews'].values.reshape(-1,1)\ny = df4['Rating'].values.reshape(-1,1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\nreg3 = LinearRegression()  \nreg3.fit(X_train, y_train) #training the algorithm","44f138d2":"reg3.intercept_","588bec37":"reg3.coef_","98c2321a":"y_pred = reg3.predict(X_test)","fc8ab6d8":"dfReg3 = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred.flatten()})\ndfReg3","27981a85":"top10=dfReg3.head(10)\ntop10.plot(kind='bar',figsize=(8,10))\nplt.grid(which='major', linestyle='-', linewidth='0.3', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","8d004f6a":"plt.scatter(X_test, y_test,  color='navy')\nplt.plot(X_test, y_pred, color='salmon', linewidth=2)\nplt.show()","26ee0239":"'Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred)","26d805aa":"'Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred)","9bc97eb1":"'Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred))","d12c1b4e":"#ordinary least squares (OLS)\n#is a linear least squares method to estimate the unknown parameters in a linear regression model\n\nX = df4[['Reviews' , 'Installs']]\ny = df4['Rating']\n\nmodel = sm.OLS(y, X).fit()\npredictions = model.predict(X)\nmodel.summary()","3caa8587":"dfReg2 = pd.DataFrame({'Actual': y, 'Predicted': predictions})\ndfReg2","7b0cee5a":"top10=dfReg2.head(10)\ntop10.plot(kind='bar',figsize=(8,10))\nplt.grid(which='major', linestyle='-', linewidth='0.3', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","7225a9bf":"#Encode label data\n#create labelEncoder\nle = preprocessing.LabelEncoder()\n\n# Converting string labels into numbers.\nGenres_enc =le.fit_transform(df4.Genres)\nCat_enc =le.fit_transform(df4.Category)\n\n#verify\nGenres_enc","f385b08f":"Cat_enc","985ff8f2":"#convert other label columns\nType_enc =le.fit_transform(df4['Type'])","43381101":"Type_enc","a17628c0":"##Rating encoding\n#Ratings are FLOAT and need to be non-continuous for KNN\n\nRate_enc=le.fit_transform(df4['Rating'])\n\n#categorize Installs\nIns_enc=le.fit_transform(df4['Installs'])\n\n\nAndrdV_enc=le.fit_transform(df4['Android Ver'])","44048cb2":"AndrdV_enc","5159316a":"Rate_enc","90606230":"Ins_enc","7f8dd27c":"#combining type, android version, Genres\nfeatures=list(zip(Genres_enc, Cat_enc, Type_enc, Ins_enc, AndrdV_enc))","e677e01d":"features","894cd9b7":"#scale the features\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X)\n","57e8ffa3":"X = scaler.transform(X)","86c5f1fa":"#model\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Create feature and target arrays \nX = features\ny = Rate_enc \n  \n# Split into training and test set \nX_train, X_test, y_train, y_test = train_test_split( \n             X, y, test_size = 0.4, random_state=10) \n  \nknn = KNeighborsClassifier(n_neighbors=6) \n  \nknn.fit(X_train, y_train) \n  \n# Predict on dataset which model has not seen before \nprint(knn.predict(X_test)) \n","9f1c1deb":"# Calculate the accuracy of the model \nprint(knn.score(X_test, y_test)) ","fe3b6c20":"# Generate plot \nplt.figure(figsize=(12, 6))\nplt.plot(X_test) \nplt.plot(X_train)   \n\nplt.show() ","ba15e875":"### 8- Regression","09705f56":"### 1- Null values","700dddf3":"### **Predict Ratings Using Regression Models**\n\nTasks:   \n1. Handle Null data\n\n2. Format columns and values\n\n3. Drop unwanted rows\n\n4. Perform univariate analysis\n\n5. Find percentiles   \n\n6. Perform bivariate analysis   \n\n7. Observe predictors and target variable\n\n8. Regressions\n","3a9d1cde":"### 3-Remove Unwanted Rows ","c4fc65d7":"### 4-Univariate analysis","9b0fd21c":"### 6- Bivariate analysis","fc9e2ab2":"### KNN","485785ef":"### 2-Variable format","5db68e5d":"There are no obvious relationship between Ratings of games and the variables offered here.","e7ed3369":"### **Observations**:   \n1.App, Last Updated, Current Ver, and Genres have too many unique entries to plot.   \n2.Possible relationships between some elements in Rating and Type, Rating and Content Ratings, and Rating and Android Ver. But none obvious.      \n3.Between Price and Rating:         \n-Most data concentrates within Ratings 4.4 to 5.0 and Price between 0 and 10.   \n-Price does not mean better ratings.   \n4.Rating and Size:   \n-Entries seem evenly distributed throughout sizes.   \n-Heavier ones rate around 4.4 to 4.8.   \n-Lighter ones rate better than heavier ones.   \n5.Rating and Reviews:   \n-Amount of reviews do not always mean better ratings.    \n6.Rating and Content Rating:  \n-There does not seem to be a difference between Content Ratings in relation to Ratings.   \n7.Category and Rating:   \n-No visible changes between categories in relation to ratings.  \n8.Genres and Rating:   \n-Comics\/Creativity and Board Pretend Play rate highest.\n\n","97344e37":"### 7- Possible Predictors: 'App', 'Category', 'Reviews', 'Size', 'Installs', 'Type','Price', 'Content Rating', 'Genres', 'Last Updated', 'Current Ver','Android Ver'      \nTarget variable: 'Rating'","96f62f82":"**Outliers**   \n1- Price   \nThose apps over $100 seems to be outliers.   \n2- Reviews   \nThe mean of Reviews is 514760.6 with a standard deviation of 3146169 between values.   \nThis seems as a large discrepancy between values, and perhaps several outliers.   \n3- Rating   \nMost apps lean towards HIGH rates.   \n4- Size   \nMost apps' size are below 20,000.   \n","178a1edd":"### 5- Percentiles"}}