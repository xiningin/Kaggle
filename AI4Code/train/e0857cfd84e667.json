{"cell_type":{"934b068c":"code","d7c34d05":"code","b9e9cac0":"code","9b42fa70":"code","da927fde":"code","973f5784":"code","41b27b07":"code","503d9d34":"code","e3f21a73":"code","29bf8c91":"code","934af6db":"code","362dd19a":"code","dc40256f":"code","1d511f19":"markdown","14bd7c48":"markdown","7cea3cb0":"markdown","51210c24":"markdown","6f2b8d7d":"markdown","9599c7e7":"markdown","ee80c28d":"markdown","334380c9":"markdown","62c6b5ce":"markdown","97f5e551":"markdown","e0c938a6":"markdown"},"source":{"934b068c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7c34d05":"data= pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv',usecols=[0,1,3,4,5,6,7,8,9])\ntarget = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv',usecols=[2])","b9e9cac0":"data.info()\ntarget.info()","9b42fa70":"data.head()","da927fde":"from sklearn.preprocessing import MinMaxScaler\nscaler= MinMaxScaler()\n\ndata[[\"chol\",\"trestbps\",\"thalach\",\"oldpeak\"]]=scaler.fit_transform(data[[\"chol\",\"trestbps\",\"thalach\",\"oldpeak\"]])\ndata.head()","973f5784":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test= train_test_split(data,target.values,test_size=0.2,random_state=42)\nprint(X_train.shape, X_test.shape , y_train.shape , y_test.shape)","41b27b07":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nrf= RandomForestClassifier()\nparams = {\n    'n_estimators' : [35,45,55],\n    'criterion': ['gini', 'entropy'],\n    'class_weight': ['balanced', 'balanced_subsample']\n    \n    }\ngrid_kn = GridSearchCV(estimator = rf,\n                        param_grid = params,\n                        scoring = 'accuracy', \n                        cv = 5, \n                        verbose = 1,\n                        n_jobs = -1)\n\ngrid_kn.fit(X_train, y_train)\n\nprint(grid_kn.best_estimator_)\nprint(grid_kn.score(X_test, y_test))","503d9d34":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import confusion_matrix\nnb= GaussianNB()\nnb.fit(X_train, y_train.ravel())\naccuracy = nb.score(X_test, y_test) \nprint(accuracy) \n\ny_pred = nb.predict(X_test)\ncm2 = confusion_matrix(y_test, y_pred) \nprint(cm2)","e3f21a73":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\nparams = {\n    'criterion': ['gini', 'entropy'],\n    'splitter' : ['best','random'],\n    'max_features' : ['auto','sqrt','log2', None]\n    \n    }\ngrid_dt = GridSearchCV(estimator = dt,\n                        param_grid = params,\n                        scoring = 'accuracy', \n                        cv = 5, \n                        verbose = 1,\n                        n_jobs = -1)\n\ngrid_dt.fit(X_train, y_train)\n\nprint(grid_dt.best_estimator_)\nprint(grid_dt.score(X_test, y_test))\n","29bf8c91":"from sklearn.naive_bayes import BernoulliNB\nbnb= BernoulliNB()\n\nbnb.fit(X_train,y_train.ravel())\naccuracy_bnb = bnb.score(X_test,y_test)\nprint(accuracy_bnb)\n\n\ny_pred = bnb.predict(X_test)\ncm3 = confusion_matrix(y_test, y_pred) \nprint(cm3)","934af6db":"from sklearn.linear_model import LogisticRegressionCV\n\nlrcv=LogisticRegressionCV()\n\nparams_lrcv ={\n    'multi_class' : ['auto','ovr','multinomial'],\n    'solver' :['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],\n    'penalty' :['l1', 'l2', 'elasticnet']\n}\n\ngrid_lcv= GridSearchCV(estimator= lrcv,\n                       param_grid=params_lrcv,\n                       scoring = 'accuracy', \n                        cv = 5, \n                        verbose = 1,\n                        n_jobs = -1\n                      )\ngrid_lcv.fit(X_train, y_train)\n\nprint(grid_lcv.best_estimator_)\nprint(grid_lcv.score(X_test, y_test))\n\n","362dd19a":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\nX_train_pca = pca.fit_transform(X_train)\nX_test_pca = pca.transform(X_test)","dc40256f":"grid_lcv.fit(X_train_pca, y_train)\n\nprint(grid_lcv.best_estimator_)\nprint(grid_lcv.score(X_test_pca, y_test))\n","1d511f19":"**Berbaoulli Naive Bayes :**","14bd7c48":"**Logistic Regression CV :**","7cea3cb0":"**2.) Feature Scaling :**","51210c24":"**1. ) Splittiing the data into training and test sets**","6f2b8d7d":"**Decision Tree :**","9599c7e7":"**1.)Choosing relevant coulmns and separting the target column :**","ee80c28d":"**Random Forest Classifier : **","334380c9":"**Naive Bayes :**","62c6b5ce":"**PCA :**","97f5e551":"# **Loading Data :**","e0c938a6":"# Building a Classifier "}}