{"cell_type":{"00444657":"code","d7bc4e72":"code","47944da8":"code","f2bb1f0b":"code","d117a1e2":"code","d38388ef":"code","5f920dce":"code","b07a47a6":"code","32f84b05":"code","159c27ad":"code","dc572a5e":"code","f329a5a6":"code","971ab9b7":"code","a79ac73a":"code","fa0013a8":"code","284f66bb":"code","161494c3":"markdown","68c52a97":"markdown"},"source":{"00444657":"# import the necessary libraries\nimport numpy as np \nimport pandas as pd \nimport os\n\n# Visualisation libraries\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\nimport pycountry\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode, iplot \nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\n\n!pip install pywaffle\nfrom pywaffle import Waffle\n\npy.init_notebook_mode(connected=True)\nimport folium \nfrom folium import plugins\nplt.style.use(\"fivethirtyeight\")# for pretty graphs\n\n# Increase the default plot size and set the color scheme\nplt.rcParams['figure.figsize'] = 8, 5\n#plt.rcParams['image.cmap'] = 'viridis'\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Disable warnings \nimport warnings\nwarnings.filterwarnings('ignore')","d7bc4e72":"# Reading the datasets\n\ndf= pd.read_csv('..\/input\/coronavirus-cases-in-india\/Covid cases in India.csv')\ndf_india = df.copy()\n\n# Coordinates of India States and Uts\nIndia_coord = pd.read_csv('..\/input\/coronavirus-cases-in-india\/Indian Coordinates.csv')\n\n#Day by day data of India, Korea and Italy\ndbd_India = pd.read_excel('..\/input\/coronavirus-cases-in-india\/per_day_cases.xlsx',sheet_name='India')\ndbd_Italy = pd.read_excel('..\/input\/coronavirus-cases-in-india\/per_day_cases.xlsx',sheet_name=\"Italy\")\ndbd_Korea = pd.read_excel('..\/input\/coronavirus-cases-in-india\/per_day_cases.xlsx',sheet_name=\"Korea\")\n\n","47944da8":"df.drop(['S. No.'],axis=1,inplace=True)\ndf['Total cases'] = df['Total Confirmed cases (Indian National)'] + df['Total Confirmed cases ( Foreign National )'] \ndf['Active cases'] = df['Total cases'] - (df['Cured\/Discharged\/Migrated'] + df['Deaths'])\nprint(f'Total number of Confirmed COVID 2019 cases across India:', df['Total cases'].sum())\nprint(f'Total number of Active COVID 2019 cases across India:', df['Active cases'].sum())\nprint(f'Total number of Cured\/Discharged\/Migrated COVID 2019 cases across India:', df['Cured\/Discharged\/Migrated'].sum())\nprint(f'Total number of Deaths due to COVID 2019  across India:', df['Deaths'].sum())\nprint(f'Total number of States\/UTs affected:', len(df['Name of State \/ UT']))","f2bb1f0b":"colors = ['#1f77b4', '#17becf']\n\nindian = df['Total Confirmed cases (Indian National)'].sum()\nforeign = df['Total Confirmed cases ( Foreign National )'].sum()\nfig = go.Figure(data=[go.Pie(labels=['Indian','Foreign Nationals'],\n                             values= [indian,foreign],hole =.3)])\n                          \n\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#FFFFFF', width=2)))\nfig.show()","d117a1e2":"\n\nx = df.groupby('Name of State \/ UT')['Active cases'].sum().sort_values(ascending=False).to_frame()\nx.style.background_gradient(cmap='Reds')\n\n","d38388ef":"fig = px.bar(df.sort_values('Active cases', ascending=False).sort_values('Active cases', ascending=True), \n             x=\"Active cases\", y=\"Name of State \/ UT\", \n             title='Total Active Cases', \n             text='Active cases', \n             orientation='h', \n             width=1000, height=700, range_x = [0, max(df['Active cases'])])\nfig.update_traces(marker_color='#46cdcf', opacity=0.8, textposition='inside')\n\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nfig.show()","5f920dce":"df_condensed = pd.DataFrame([df['Active cases'].sum(),df['Cured\/Discharged\/Migrated'].sum(),df['Deaths'].sum()],columns=['Cases'])\ndf_condensed.index=['Active cases','Recovered','Death']\ndf_condensed\n\n\nfig = plt.figure(\n    FigureClass=Waffle, \n    rows=5,\n    values=df_condensed['Cases'],\n    labels=list(df_condensed.index),\n    figsize=(15,15),\n    legend={'loc': 'upper left', 'bbox_to_anchor': (1.1, 1)}\n)","b07a47a6":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(\n    rows=1, cols=2,\n    subplot_titles=(\"National Cases\",\"Foreign Cases\"))\n\ntemp = df.sort_values('Total Confirmed cases (Indian National)', ascending=False).sort_values('Total Confirmed cases (Indian National)', ascending=False)\n\nfig.add_trace(go.Bar( y=temp['Total Confirmed cases (Indian National)'], x=temp[\"Name of State \/ UT\"],  \n                     marker=dict(color=temp['Total Confirmed cases (Indian National)'], coloraxis=\"coloraxis\")),\n              1, 1)\n                     \ntemp1 = df.sort_values('Total Confirmed cases ( Foreign National )', ascending=False).sort_values('Total Confirmed cases ( Foreign National )', ascending=False)\n\nfig.add_trace(go.Bar( y=temp1['Total Confirmed cases ( Foreign National )'], x=temp1[\"Name of State \/ UT\"],  \n                     marker=dict(color=temp1['Total Confirmed cases ( Foreign National )'], coloraxis=\"coloraxis\")),\n              1, 2)                     \n                     \n\nfig.update_layout(coloraxis=dict(colorscale='rdbu'), showlegend=False,title_text=\"National vs Foreign Cases\",plot_bgcolor='rgb(250, 242, 242)')\nfig.show()\n\n\n\n\n","32f84b05":"# create map and display it\n\ndf_full = pd.merge(India_coord,df,on='Name of State \/ UT')\nmap = folium.Map(location=[20, 80], zoom_start=2,tiles='Stamen Toner')\n\nfor lat, lon, value, name in zip(df_full['Latitude'], df_full['Longitude'], df_full['Active cases'], df_full['Name of State \/ UT']):\n    folium.CircleMarker([lat, lon],\n                        radius=value*0.7,\n                        popup = ('<strong>State<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Active Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.3 ).add_to(map)\nmap","159c27ad":"%%HTML\n<div class='tableauPlaceholder' id='viz1585145553118' style='position: relative'><noscript><a href='#'><img alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Bo&#47;Book1_31496&#47;Dashboard3&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='Book1_31496&#47;Dashboard3' \/><param name='tabs' value='no' \/><param name='toolbar' value='yes' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Bo&#47;Book1_31496&#47;Dashboard3&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><param name='filter' value='publish=yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1585145553118');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.minWidth='420px';vizElement.style.maxWidth='650px';vizElement.style.width='100%';vizElement.style.minHeight='587px';vizElement.style.maxHeight='887px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.minWidth='420px';vizElement.style.maxWidth='650px';vizElement.style.width='100%';vizElement.style.minHeight='587px';vizElement.style.maxHeight='887px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else { vizElement.style.width='100%';vizElement.style.height='727px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","dc572a5e":"\n\nf, ax = plt.subplots(figsize=(12, 8))\ndata = df_full[['Name of State \/ UT','Total cases','Cured\/Discharged\/Migrated','Deaths']]\ndata.sort_values('Total cases',ascending=False,inplace=True)\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Total cases\", y=\"Name of State \/ UT\", data=data,\n            label=\"Total\", color=\"r\")\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Cured\/Discharged\/Migrated\", y=\"Name of State \/ UT\", data=data,\n            label=\"Recovered\", color=\"g\")\n\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(xlim=(0, 35), ylabel=\"\",\n       xlabel=\"Cases\")\nsns.despine(left=True, bottom=True)","f329a5a6":"# Rise in COVID-19 cases in India\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=dbd_India['Date'], y=dbd_India['Total Cases'],\n                    mode='lines+markers',name='Total Cases'))\n\nfig.add_trace(go.Scatter(x=dbd_India['Date'], y=dbd_India['Recovered'], \n                mode='lines',name='Recovered'))\nfig.add_trace(go.Scatter(x=dbd_India['Date'], y=dbd_India['Active'], \n                mode='lines',name='Active'))\nfig.add_trace(go.Scatter(x=dbd_India['Date'], y=dbd_India['Deaths'], \n                mode='lines',name='Deaths'))\n        \n    \nfig.update_layout(title_text='Trend of Coronavirus Cases in India(Cumulative cases)',plot_bgcolor='rgb(250, 242, 242)')\n\nfig.show()\n\n\n# New COVID-19 cases reported daily in India\n\nimport plotly.express as px\nfig = px.bar(dbd_India, x=\"Date\", y=\"New Cases\", barmode='group',\n             height=400)\nfig.update_layout(title_text='New Coronavirus Cases in India per day',plot_bgcolor='rgb(250, 242, 242)')\n\nfig.show()\n","971ab9b7":"fig = px.bar(dbd_Italy, x=\"Date\", y=\"Total Cases\", color='Total Cases', orientation='v', height=600,\n             title='Confirmed Cases in Italy', color_discrete_sequence = px.colors.cyclical.mygbm)\n\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nfig.show()\n\nfig = px.bar(dbd_Korea, x=\"Date\", y=\"Total Cases\", color='Total Cases', orientation='v', height=600,\n             title='Confirmed Cases in Korea', color_discrete_sequence = px.colors.cyclical.mygbm)\n\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nfig.show()\n\nfig = px.bar(dbd_India, x=\"Date\", y=\"Total Cases\", color='Total Cases', orientation='v', height=600,\n             title='Confirmed Cases in India', color_discrete_sequence = px.colors.cyclical.mygbm)\n\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nfig.show()","a79ac73a":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(\n    rows=2, cols=2,\n    specs=[[{}, {}],\n           [{\"colspan\": 2}, None]],\n    subplot_titles=(\"S.Korea\",\"Italy\", \"India\"))\n\nfig.add_trace(go.Bar(x=dbd_Korea['Date'], y=dbd_Korea['Total Cases'],\n                    marker=dict(color=dbd_Korea['Total Cases'], coloraxis=\"coloraxis\")),\n              1, 1)\n\nfig.add_trace(go.Bar(x=dbd_Italy['Date'], y=dbd_Italy['Total Cases'],\n                    marker=dict(color=dbd_Italy['Total Cases'], coloraxis=\"coloraxis\")),\n              1, 2)\n\nfig.add_trace(go.Bar(x=dbd_India['Date'], y=dbd_India['Total Cases'],\n                    marker=dict(color=dbd_India['Total Cases'], coloraxis=\"coloraxis\")),\n              2, 1)\n\nfig.update_layout(coloraxis=dict(colorscale='Bluered_r'), showlegend=False,title_text=\"Total Confirmed cases(Cumulative)\")\n\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nfig.show()","fa0013a8":"\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(\n    rows=2, cols=2,\n    specs=[[{}, {}],\n           [{\"colspan\": 2}, None]],\n    subplot_titles=(\"S.Korea\",\"Italy\", \"India\"))\n\nfig.add_trace(go.Scatter(x=dbd_Korea['Date'], y=dbd_Korea['Total Cases'],\n                    marker=dict(color=dbd_Korea['Total Cases'], coloraxis=\"coloraxis\")),\n              1, 1)\n\nfig.add_trace(go.Scatter(x=dbd_Italy['Date'], y=dbd_Italy['Total Cases'],\n                    marker=dict(color=dbd_Italy['Total Cases'], coloraxis=\"coloraxis\")),\n              1, 2)\n\nfig.add_trace(go.Scatter(x=dbd_India['Date'], y=dbd_India['Total Cases'],\n                    marker=dict(color=dbd_India['Total Cases'], coloraxis=\"coloraxis\")),\n              2, 1)\n\nfig.update_layout(coloraxis=dict(colorscale='Bluered_r'), showlegend=False,title_text=\"Trend of Coronavirus cases\")\n\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nfig.show()","284f66bb":"import plotly.graph_objects as go\nimport numpy as np\n\ntitle = 'Main Source for News'\nlabels = ['S.Korea', 'Italy', 'India']\ncolors = ['rgb(0,128,0)', 'rgb(255,0,0)', 'rgb(49,130,189)']\n\nmode_size = [8, 8, 12]\nline_size = [2, 2, 4]\n\nfig = go.Figure()\n\n\nfig.add_trace(go.Scatter(x=dbd_Korea['Days after surpassing 100 cases'], \n                 y=dbd_Korea['Total Cases'],mode='lines',\n                 name=labels[0],\n                 line=dict(color=colors[0], width=line_size[0]),            \n                 connectgaps=True,\n    ))\nfig.add_trace(go.Scatter(x=dbd_Italy['Days after surpassing 100 cases'], \n                 y=dbd_Italy['Total Cases'],mode='lines',\n                 name=labels[1],\n                 line=dict(color=colors[1], width=line_size[1]),            \n                 connectgaps=True,\n    ))\n\nfig.add_trace(go.Scatter(x=dbd_India['Days after surpassing 100 cases'], \n                 y=dbd_India['Total Cases'],mode='lines',\n                 name=labels[2],\n                 line=dict(color=colors[2], width=line_size[1]),            \n                 connectgaps=True,\n    ))\n    \n    \n    \nannotations = []\n\nannotations.append(dict(xref='paper', yref='paper', x=0.5, y=-0.1,\n                              xanchor='center', yanchor='top',\n                              text='Days after surpassing 100 cases ',\n                              font=dict(family='Arial',\n                                        size=12,\n                                        color='rgb(150,150,150)'),\n                              showarrow=False))\n\nfig.update_layout(annotations=annotations,plot_bgcolor='white',yaxis_title='Cumulative cases')\n\nfig.show()","161494c3":"![](https:\/\/gramener.com\/indiamap\/)","68c52a97":"## 2.3 Trend after surpassing 100 cases"}}