{"cell_type":{"55d52c2d":"code","a2b2907b":"code","0d3e23eb":"code","9d1e7185":"code","be5c6a0f":"code","45b4c5ea":"code","855463ac":"code","0211c205":"code","c43abd3f":"code","b355728a":"code","fd332cd9":"code","7d9cab3d":"code","8a63ff63":"code","1f67cb7f":"code","d7c00da5":"code","1c6cd25b":"code","0a606597":"code","ceb51a06":"code","5e522c10":"code","4feddb0d":"code","17cffe9f":"code","cb3dcfc5":"code","6661194b":"code","7d341382":"code","4791deca":"code","17578197":"code","2f847a84":"code","73c8e70d":"code","3734540e":"code","90fc522e":"code","b4dd5fed":"code","1ab738a5":"code","a06eefbf":"code","2c08f801":"markdown","e93d6a8e":"markdown","cad3e1da":"markdown","a859c63c":"markdown","0a00c241":"markdown","bdc4fb66":"markdown","b1a1d2a9":"markdown","364a6d0f":"markdown","68d34d8a":"markdown","f48cd074":"markdown"},"source":{"55d52c2d":"# Required packages\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LinearRegression\nfrom statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","a2b2907b":"# Loading the Data\noil = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/oil.csv\")\nholidays = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/holidays_events.csv\")\nstores = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/stores.csv\")\ntrain = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/train.csv\")\ntest = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/test.csv\")\ntransactions = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/transactions.csv\")\nsamp_subm = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/sample_submission.csv\")","0d3e23eb":"train.head()","9d1e7185":"test.head()","be5c6a0f":"oil.head()","45b4c5ea":"holidays.head()","855463ac":"stores.head()","0211c205":"transactions.head()","c43abd3f":"# This function will do basic checks for Dataframes\ndef basic_eda(df):\n    print(\"\\n----------TOP 5 RECORDS--------\\n\")\n    print(df.head(5))\n    print(\"\\n----------INFO-----------------\\n\")\n    print(df.info())\n    print(\"\\n----------Describe-------------\\n\")\n    print(df.describe())\n    print(\"\\n----------Columns--------------\\n\")\n    print(df.columns)\n    print(\"\\n----------Data Types-----------\\n\")\n    print(df.dtypes)\n    print(\"\\n-------Missing Values----------\\n\")\n    print(df.isnull().sum())\n    print(\"\\n-------NULL values-------------\\n\")\n    print(df.isna().sum())\n    print(\"\\n-----Shape Of Data-------------\\n\")\n    print(df.shape)\n    numeric_variables = df.select_dtypes(include=[np.number])\n    categorical_variables = df.select_dtypes(exclude=[np.number])\n\n    print('Numeric variables in the given the dataframe : ',numeric_variables.shape[1])\n    print('Categorical variables in the givne the dataframe:',categorical_variables.shape[1])","b355728a":"#Litle bit of exploration of data\n\nprint(\"\\n============================= oil =============================\")\nbasic_eda(oil)","fd332cd9":"print(\"\\n============================= holidays =============================\")\nbasic_eda(holidays)","7d9cab3d":"print(\"\\n============================= Shops =============================\")\nbasic_eda(stores)","8a63ff63":"print(\"\\n============================= train =============================\")\nbasic_eda(train)","1f67cb7f":"print(\"\\n============================= test =============================\")\nbasic_eda(test)","d7c00da5":"print(\"\\n============================= transactions =============================\")\nbasic_eda(transactions )","1c6cd25b":"# Let's check the store data\nstores.type.value_counts()","0a606597":"stores.state.value_counts()","ceb51a06":"stores.city.value_counts()","5e522c10":"plt.figure(figsize=(15, 10))\nsns.countplot(data=stores, x='type', order=stores.type.value_counts().index)\n\nplt.title('Number of Stores based on Type',fontweight=\"bold\")\nplt.xlabel('Type')\nplt.ylabel('Count')","4feddb0d":"plt.figure(figsize=(15, 10))\nsns.countplot(data=stores, y='city',order=stores.city.value_counts().index)\n\nplt.title('Number of Stores based on Cities',fontweight=\"bold\")\nplt.ylabel('City')\nplt.xlabel('Count')","17cffe9f":"train.date = pd.to_datetime(train.date)\ntest.date = pd.to_datetime(test.date)\nmonths_sales = train.groupby(train['date'].dt.strftime('%B'))['sales'].sum().sort_values()\n\nplt.figure(figsize=(15,10))\nplt.plot(months_sales)\nplt.title(\"the sales by month\", fontweight=\"bold\")\nplt.xlabel(\"the month\")\nplt.ylabel(\"the sales\")","cb3dcfc5":"plt.figure(figsize=(15,8))\ntrain.groupby(pd.Grouper(key='date', freq='2D')).sum()['sales'].plot()\nplt.ylabel(\"the sales\", fontsize=15)","6661194b":"plt.figure(figsize=(15,10))\ntrain.groupby(pd.Grouper(key='date', freq='1Y')).sum()['sales'].plot()\nplt.title(\"the sales by year\", fontweight=\"bold\")\nplt.ylabel(\"the sales\")","7d341382":"# some Features\nfeatures = ['store_nbr', 'family', 'onpromotion']\ntarget = 'sales'","4791deca":"# creating the features weekday, month or year.\ndef extract_weekday(df):\n    return df.dayofweek\n\ndef extract_month(df):\n    return df.month\n\ndef extract_year(df):\n    return df.year","17578197":"train['weekday'] = train['date'].apply(extract_weekday)\ntrain['year'] = train['date'].apply(extract_year)\ntrain['month'] = train['date'].apply(extract_month)\n\ntest['weekday'] = test['date'].apply(extract_weekday)\ntest['year'] = test['date'].apply(extract_year)\ntest['month'] = test['date'].apply(extract_month)","2f847a84":"features.append('weekday')\nfeatures.append('year')\nfeatures.append('month')","73c8e70d":"store_sales = pd.read_csv(\n    '..\/input\/store-sales-time-series-forecasting\/train.csv',\n    usecols=['store_nbr', 'family', 'date', 'sales'],\n    dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'sales': 'float32',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\nstore_sales['date'] = store_sales.date.dt.to_period('D')\nstore_sales = store_sales.set_index(['store_nbr', 'family', 'date']).sort_index()\n\n\ndf_test = pd.read_csv(\n    '..\/input\/store-sales-time-series-forecasting\/test.csv',\n    dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'onpromotion': 'uint32',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\ndf_test['date'] = df_test.date.dt.to_period('D')\ndf_test = df_test.set_index(['store_nbr', 'family', 'date']).sort_index()","3734540e":"# Target\ny = store_sales.unstack(['store_nbr', 'family']).loc[\"2017\"]\ny","90fc522e":"fourier = CalendarFourier(freq='M', order=4)\ndp = DeterministicProcess(\n    index=y.index,\n    constant=True,\n    order=1,\n    seasonal=True,\n    additional_terms=[fourier],\n    drop=True,\n)\nX = dp.in_sample()\nX['NewYear'] = (X.index.dayofyear == 1)","b4dd5fed":"# Linear Regression\nmodel = LinearRegression(fit_intercept=False)\nmodel.fit(X, y)\ny_pred = pd.DataFrame(model.predict(X), index=X.index, columns=y.columns)","1ab738a5":"X_test = dp.out_of_sample(steps=16)\nX_test.index.name = 'date'\nX_test['NewYear'] = (X_test.index.dayofyear == 1)","a06eefbf":"y_submit = pd.DataFrame(model.predict(X_test), index=X_test.index, columns=y.columns)\ny_submit = y_submit.stack(['store_nbr', 'family'])\ny_submit = y_submit.join(df_test.id).reindex(columns=['id', 'sales'])\ny_submit.to_csv('submission.csv', index=False)","2c08f801":"#  **Pre-processing & Feature Engineering**","e93d6a8e":"#  **Modeling**","cad3e1da":"#### **Let's do some visualization**","a859c63c":"#### **Credit**\nhttps:\/\/www.kaggle.com\/dkomyagin\/simple-ts-ridge-rf","0a00c241":"#### **Submission**","bdc4fb66":"#### **Encode Labels**","b1a1d2a9":"#### **Create training data**","364a6d0f":"#### **Getting to know the Data**","68d34d8a":"<h2 style=\"font-weight: bold\">Store Sales TS Forecast<\/h2>\n\n<h4>Emmm... wouldn't it be if we could use machine learning to predict grocery sales. So Yeah! you guess it! this notebook is going to be about the Store Sales TS Forecast Compeition \ud83d\ude04\ud83d\ude04<br><br>I will be doing a EDA of review texts, some Visualization and Pre-Processing. and finally modelling <br><\/h4>\n\n* <h5 style=\"font-weight: 700\">Your feedback is very welcome<\/h5>\n* <h5 style=\"font-weight: 700\">If you find this notebook useful, please don't forget to upvote it!<\/h5>","f48cd074":"#  **Exploratory Data Analysis**"}}