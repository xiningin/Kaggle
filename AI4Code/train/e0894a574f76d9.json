{"cell_type":{"0ecc09c6":"code","d1bff312":"code","5cb85b44":"code","230a3016":"code","693220a8":"code","f3dc8281":"code","9cc5c11f":"code","da6884f0":"code","56ee4360":"code","275e55ba":"code","0da419c3":"code","46b445c9":"code","986a0043":"code","700f4ff8":"code","511f96c1":"code","b7e653c3":"code","b1cba529":"code","4e09c13f":"code","bf274b87":"code","18ee0f53":"code","bfea1b42":"code","46699f2d":"code","bfa10de7":"code","97d42704":"code","2a6051c8":"code","c0cdf72f":"code","4f575182":"code","7a9a3f36":"code","88c98852":"code","68aeb508":"code","35b1d6b9":"code","fe729643":"code","b84fcda0":"markdown","dc1ab84f":"markdown","b8f9cadf":"markdown","0d4e1a4a":"markdown","c98edf03":"markdown","54de23f7":"markdown","c9cfe3b8":"markdown","2973306d":"markdown","a2dac10a":"markdown","39a51921":"markdown","60ad8360":"markdown","d3173080":"markdown"},"source":{"0ecc09c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d1bff312":"path = \"..\/input\/nsduh-alcohol-related\/Source_Number_2017.csv\"\n\ndf_2017 = pd.read_csv(path).set_index('ID')\ndf_2017 = df_2017.replace('*', 0)\ndf_2017","5cb85b44":"df_2017","230a3016":"all_id = df_2017.index.values\nall_id","693220a8":"total_id = 'TOTAL PAST MONTH ALCOHOL USERS', \nprimary_id = ['UNDERAGE DRINKER PAID', 'UNDERAGE DRINKER DID NOT PAY']\npaid_id = ['Purchased It Himself or Herself',\n       'From Store, Restaurant, Bar, Club, or Event',\n       'Liquor, Convenience, or Grocery Store',\n       'Restaurant, Bar, or Club', 'Concert, Sports, or Other Event',\n       'From Another Person', 'From Person under Age 21',\n       'From Person Aged 21 or Older', 'Purchased by Someone Else',\n       'Parent or Guardian', 'Another Family Member Aged 21 or Older',\n       'Someone Not Related Aged 21 or Older', 'Someone under Age 21']\nunpaid_id = [\n    'Got It from Parent or Guardian',\n       'Got It from Another Family Member Aged 21 or Older',\n       'Got It from Someone Not Related Aged 21 or Older',\n       'Got It from Someone under Age 21', 'Took It from Own Home',\n       \"Took It from Someone Else's Home\", 'Got It Some Other Way',\n       'From Friend or Acquaintance, Unspecified Age and Method'\n]\ncol = df_2017.columns.values","f3dc8281":"def remove_punc(x, dtype=int):\n    if not isinstance(x, str):\n        return x\n    x_ = \"\"\n    for i in x:\n        if i == ',':\n            continue\n        x_ += i\n    x_ = dtype(x_)\n    return x_","9cc5c11f":"for c in col:\n    df_2017[c] = df_2017[c].apply(lambda x : remove_punc(x))","da6884f0":"default_index = ['TOTAL PAST MONTH ALCOHOL USERS', 'UNDERAGE DRINKER PAID',\n       'Purchased It Himself or Herself',\n       'From Store, Restaurant, Bar, Club, or Event',\n       'Liquor, Convenience, or Grocery Store',\n       'Restaurant, Bar, or Club', 'Concert, Sports, or Other Event',\n       'From Another Person', 'From Person under Age 21',\n       'From Person Aged 21 or Older', 'Purchased by Someone Else',\n       'Parent or Guardian', 'Another Family Member Aged 21 or Older',\n       'Someone Not Related Aged 21 or Older', 'Someone under Age 21',\n       'UNDERAGE DRINKER DID NOT PAY', 'Got It from Parent or Guardian',\n       'Got It from Another Family Member Aged 21 or Older',\n       'Got It from Someone Not Related Aged 21 or Older',\n       'Got It from Someone under Age 21', 'Took It from Own Home',\n       \"Took It from Someone Else's Home\", 'Got It Some Other Way',\n       'From Friend or Acquaintance, Unspecified Age and Method']\n\ndef preprocessing(df, dtype=int):\n    \"\"\"\n    Input: Unpreprocess dataframe\n    Output: Preprocessed Dataframe\n    \"\"\"\n    df.index = default_index\n    df = df.replace('*', 0)\n    \n    col = df.columns\n    \n    for c in col:\n        df[c] = df[c].apply(lambda x : remove_punc(x, dtype))\n        \n    return df","56ee4360":"import matplotlib.pyplot as plt \nimport seaborn as sns","275e55ba":"plt.subplots(figsize=(6,6))\nplt.pie(df_2017[col[0]].loc[primary_id].values, autopct='%1.1f%%')\n\nplt.legend(primary_id)\nplt.show()","0da419c3":"height=df_2017[col[0]].loc[primary_id].values\nheight","46b445c9":"fig = plt.figure()\nax = fig.add_axes([0,0,1,1])\n\nax.bar(x = primary_id, height=df_2017[col[0]].loc[primary_id].values)\n\nfor bar in ax.patches:\n \n    # Using Matplotlib's annotate function and\n    # passing the coordinates where the annotation shall be done\n    ax.annotate(format(bar.get_height(), 'd'),\n                   (bar.get_x() + bar.get_width() \/ 2,\n                    bar.get_height()), ha='center', va='center',\n                   size=15, xytext=(0, 5),\n                   textcoords='offset points')\n\nax.legend(primary_id)\nplt.show()","986a0043":"def plot_hbar(df, index, col, title=\"\"):\n    \"\"\"\n    df: Current dataframe \n    index: List of index\n    col: Value of column\n    \"\"\"\n    index = sorted(index, key=lambda x : df[col][x])\n    \n    plt.barh(index, df[col][index].values)\n    plt.title(title + \" \" + col)\n    plt.show()\n","700f4ff8":"def plot_single_attribute(df, c, r, title=None):\n    \"\"\"\n    df: DataFrame\n    c: column, only one instance\n    r: row, can be an array\n    \"\"\"\n    # bar chart\n    \n    fig = plt.figure()\n    ax = fig.add_axes([0,0,1,1])\n\n    ax.barh(y = r, width=df[c].loc[r].values)\n\n    if title is not None:\n        plt.title(title)\n    plt.show()\n    \n    \nplot_hbar(df_2017, paid_id, col[0], \"2017\")\n\n# tr\u01b0\u1eddng h\u1ee3p mu\u1ed1n plot theo row th\u00ec x\u00e0i df.transpose","511f96c1":"paid_id","b7e653c3":"def plot_multiple_attribute(df, cols, rows, title=\"\"):\n    \"\"\"\n    df: DataFrame\n    cols: column, can be an array\n    rows: row, can be an array\n    \"\"\"\n    for c in cols:\n        plot_hbar(df, rows, c, title)\n        \n    if len(rows) == 2:\n        prev = [0] * len(cols)\n        plt.subplots(figsize=(7, 10))\n        for row in rows:\n            plt.bar(cols, df.loc[row, cols], bottom=prev, label=row)\n            prev = prev + df.loc[row, cols]\n\n        if title is not None:\n            plt.title(title)\n\n        plt.xticks(rotation=25)\n        plt.legend()\n        plt.show()\n\nplot_multiple_attribute(df_2017, col, paid_id)\n","b1cba529":"def plot_hbar(df, index, col, title=\"\"):\n    \"\"\"\n    df: Current dataframe \n    index: List of index\n    col: Value of column\n    \"\"\"\n    index = sorted(index, key=lambda x : df[col][x])\n    \n    plt.barh(index, df[col][index].values)\n    plt.title(title + \" \" + col)\n    plt.show()\n\nplot_hbar(df_2017, paid_id, 'Aged 12-14', \"2017\")\nplot_hbar(df_2017, paid_id, 'Aged 15-17', \"2017\")\nplot_hbar(df_2017, paid_id, 'Aged 18-20', \"2017\")","4e09c13f":"test_cal = df_2017.index.values\ntest_cal","bf274b87":"age_cols = ['Aged 12-14', 'Aged 15-17', 'Aged 18-20']\n\npath_2018 = \"..\/input\/nsduh-alcohol-related\/Source_Number_2018.csv\"\npath_2019 = \"..\/input\/nsduh-alcohol-related\/Source_Number_2019.csv\"\npath_2020 = \"..\/input\/nsduh-alcohol-related\/Source_Number_2020.csv\"\npath_percentage_2017 = \"..\/input\/nsduh-alcohol-related\/Source_Percentage_2017.csv\"\npath_percentage_2018 = \"..\/input\/nsduh-alcohol-related\/Source_Percentage_2018.csv\"\npath_percentage_2019 = \"..\/input\/nsduh-alcohol-related\/Source_Percentage_2019.csv\"\npath_percentage_2020 = \"..\/input\/nsduh-alcohol-related\/Source_Percentage_2020.csv\"\n\ndf_2018 = pd.read_csv(path_2018).set_index(\"ID\")[age_cols]\ndf_2019 = pd.read_csv(path_2019).set_index(\"ID\")[age_cols]\ndf_2020 = pd.read_csv(path_2020).set_index(\"ID\")[age_cols]\n\ndf_percentage_2017 = pd.read_csv(path_percentage_2017).set_index(\"ID\")\ndf_percentage_2018 = pd.read_csv(path_percentage_2018).set_index(\"ID\")\ndf_percentage_2019 = pd.read_csv(path_percentage_2019).set_index(\"ID\")\ndf_percentage_2020 = pd.read_csv(path_percentage_2020).set_index(\"ID\")\n\ndf_2018 = preprocessing(df_2018)\ndf_2019 = preprocessing(df_2019)\ndf_2020 = preprocessing(df_2020)\n\ndf_percentage_2017 = preprocessing(df_percentage_2017, float)[age_cols]\ndf_percentage_2018 = preprocessing(df_percentage_2018, float)[age_cols]\ndf_percentage_2019 = preprocessing(df_percentage_2019, float)[age_cols]\ndf_percentage_2020 = preprocessing(df_percentage_2020, float)[age_cols]\n\nxlabel = [\"2017\", \"2018\", \"2019\", \"2020\"]","18ee0f53":"df_2017 = df_2017[age_cols]","bfea1b42":"df_2017","46699f2d":"def plot_mutiple_dataframe(dfs, index, column, xlabel, title=\"\"):\n    \"\"\"\n    dfs: list of DataFrame, order in incease year\n    index: value of index \n    column: columns name\n    \"\"\"\n    fig = plt.figure()\n    ax = fig.add_axes([0,0,1,1])\n    \n    values = [df[column][index] for df in dfs]\n    ax.bar(xlabel, values)\n    plt.title(title + \" \\\"{}\\\" - \\\"{}\\\" at year {}\".format(index, column, xlabel))\n    plt.show()","bfa10de7":"plot_mutiple_dataframe([df_percentage_2017, df_percentage_2018, df_percentage_2019, df_percentage_2020], unpaid_id[4], \"Aged 12-14\", xlabel)","97d42704":"plot_multiple_attribute(df_percentage_2017, age_cols, primary_id)","2a6051c8":"total_id = 'TOTAL PAST MONTH ALCOHOL USERS', \nprimary_id = ['UNDERAGE DRINKER PAID', 'UNDERAGE DRINKER DID NOT PAY']\npaid_id = ['Purchased It Himself or Herself',\n       'From Store, Restaurant, Bar, Club, or Event',\n       'Liquor, Convenience, or Grocery Store',\n       'Restaurant, Bar, or Club', 'Concert, Sports, or Other Event',\n       'From Another Person', 'From Person under Age 21',\n       'From Person Aged 21 or Older', 'Purchased by Someone Else',\n       'Parent or Guardian', 'Another Family Member Aged 21 or Older',\n       'Someone Not Related Aged 21 or Older', 'Someone under Age 21']\nunpaid_id = [\n    'Got It from Parent or Guardian',\n       'Got It from Another Family Member Aged 21 or Older',\n       'Got It from Someone Not Related Aged 21 or Older',\n       'Got It from Someone under Age 21', 'Took It from Own Home',\n       \"Took It from Someone Else's Home\", 'Got It Some Other Way',\n       'From Friend or Acquaintance, Unspecified Age and Method'\n]\nage_cols = ['Aged 12-14', 'Aged 15-17', 'Aged 18-20']\n\nyears = [str(i) for i in range(2017, 2021)]","c0cdf72f":"df_2018.loc[paid_id]","4f575182":"age_cols","7a9a3f36":"plot_multiple_attribute(df_2017, age_cols, paid_id, \"2017\")","88c98852":"age_cols = ['Aged 12-14', 'Aged 15-17']","68aeb508":"dfs = [df_2017, df_2018, df_2019, df_2020]\ndf_percentage_s = [df_percentage_2017, df_percentage_2018, df_percentage_2019, df_percentage_2020]","35b1d6b9":"def plot_multiple_bar_multiple_df_2(dfs, cols, index, years, title=None):\n    \"\"\"\n    dfs: Array of dataframes\n    cols: Array of columns\n    index: an index\n    \"\"\"\n    x_axis = np.arange(len(dfs))\n    \n    width = 0.25\n    \n    for i, cl in enumerate(cols):\n        values = []\n        for df in dfs:\n            values = [df[cl][index] for df in dfs]\n        \n        plt.bar(x_axis + width * i, values, width=width, label=cl)\n        \n    plt.xticks(x_axis + width * len(cols) \/\/ 2, years, rotation=25)\n    plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n    if title is not None:\n        plt.title(title)\n    plt.show()\n    \nplot_multiple_bar_multiple_df_2(\n    df_percentage_s, \n    age_cols, \n    'Got It from Parent or Guardian',\n    years,\n    'Got It from Parent or Guardian Trend'\n)","fe729643":"def plot_all(dfs, title=\"Number \"):\n#     for i, df in enumerate(dfs):    \n#         plot_multiple_attribute(df, age_cols, primary_id, title + years[i] + \" Primary \")\n#         plot_multiple_attribute(df, age_cols, unpaid_id, title + years[i] +  \" Unpaid \")\n#         plot_multiple_attribute(df, age_cols, paid_id, title + years[i] +  \" Paid \")\n\n#         for age_col in age_cols:\n#             plot_hbar(df, primary_id, age_col, title + years[i] + \" Primary \")\n#             plot_hbar(df, unpaid_id, age_col, title + years[i] +  \" Unpaid \")\n#             plot_hbar(df, paid_id, age_col, title + years[i] +  \" Paid \")\n\n    for idx in primary_id:\n        plot_multiple_bar_multiple_df_2(\n            dfs, \n            age_cols, \n            idx, \n            years, \n            title=title + \" Trend - Source:\" + idx\n        )\n\n    for idx in paid_id:\n        plot_multiple_bar_multiple_df_2(\n            dfs, \n            age_cols, \n            idx, \n            years, \n            title=title + \" Trend - Source:\" + idx\n        )\n\n    for idx in unpaid_id:\n        plot_multiple_bar_multiple_df_2(\n            dfs, \n            age_cols, \n            idx, \n            years, \n            title=title + \" Trend - Source:\" + idx\n        )\n            \nplot_all(df_percentage_s, \"Percentage\")","b84fcda0":"# Plot c\u1ed9t n\u1eb1m ngang\n\nC\u00f3 plot ngang v\u00e0 sort, \u0111\u1ec3 th\u1ec3 hi\u1ec7n \u1ea3nh h\u01b0\u1edbng c\u00e1c index t\u1edbi c\u00e1c column c\u1ee5 th\u1ec3","dc1ab84f":"## Plot th\u1ec3 hi\u1ec7n h\u00e0nh vi ng\u01b0\u1eddi d\u00f9ng trong \u0111\u1ed9 tu\u1ed5i","b8f9cadf":"# Nh\u1eafc nh\u1edf chung:\n\u1ede c\u00e1c h\u00e0m b\u00ean tr\u00ean, c\u00e1c gi\u00e1 tr\u1ecb df c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111c cho c\u1ea3 t\u1eadp s\u1ed1 l\u01b0\u1ee3ng v\u00e0 %\n\nV\u00ed d\u1ee5:","0d4e1a4a":"# H\u00e0m bi\u1ec3u di\u1ec5n theo m\u1ed9t c\u1ed9t duy nh\u1ea5t:\n\n\u0111\u1ea7u v\u00e0o c\u00f3 df: dataframe, c l\u00e0 c\u1ed9t, ch\u1ec9 \u0111c c\u00f3 1 c\u1ed9t, r l\u00e0 ch\u1ec9 s\u1ed1 c\u00e1c d\u00f2ng, \u0111\u1ec3 array hay 1 gi\u00e1 tr\u1ecb index \u0111\u1ec1u \u0111c","c98edf03":"# H\u00e0m n\u00e0y n\u00f3 s\u1ebd t\u1ef1 \u0111\u1ed9ng plot nhi\u1ec1u h\u01a1n c\u00e1c thu\u1ed9c t\u00ednh:\n\u1ede cu\u1ed1i c\u00f9ng k\u00e8m 1 bi\u1ec3u \u0111\u1ed3 c\u1ed9t ch\u1ed3ng l\u00ean nhau \u0111\u1ec3 th\u1ec3 hi\u1ec7n t\u1ed5ng s\u1ed1 l\u00e0 t\u1ec9 l\u1ec7, c\u00f3 th\u1ec3 nh\u00e9t v\u00e0o df_percentage \u0111\u1ec3 xem t\u1ec9 l\u1ec7 n\u00f3 ntn","54de23f7":"# Import ploting lib","c9cfe3b8":"# \u1ede trong n\u00e0y, ta g\u1ecdi t\u00ean c\u00e1c d\u00f2ng l\u00e0 column, t\u00ean c\u00e1c c\u1ed9t l\u00e0 index","2973306d":"plot_multiple_attribute(df_2017, col, primary_id)\n\nplot_hbar(df_2017, paid_id, 'Aged 12-14')\n\nplot_mutiple_dataframe([df_percentage_2017, df_percentage_2018, df_percentage_2019, df_percentage_2020], unpaid_id[4], \"Total\", xlabel)","a2dac10a":"# H\u00e0m so s\u00e1nh thay \u0111\u1ed5i qua c\u00e1c n\u0103m\n\nv\u1edbi m\u1ed9t index c\u1ed1 \u0111\u1ecbnh, 1 column c\u1ed1 \u0111\u1ecbnh, v\u00e0 dfs l\u00e0 c\u00e1c dataframe d\u1eef li\u1ec7u c\u1ee7a c\u00e1c n\u0103m s\u1eafp t\u0103ng d\u1ea7n, h\u00e0m s\u1ebd th\u1ec3 hi\u1ec7n s\u1ef1 thay \u0111\u1ed5i c\u1ee7a gi\u00e1 tr\u1ecb t\u01b0\u01a1ng \u1ee9ng qua c\u00e1c n\u0103m","39a51921":"Tr\u01b0\u1eddng h\u1ee3p: mu\u1ed1n kh\u1ea3o s\u00e1t trend tr\u00ean d\u1eef li\u1ec7u v\u1ec1 %, \u0111\u1eb7t dfs = [df_percentage_2017, df_percentage_2018, df_percentage_2019, df_percentage_2020], index = gi\u00e1 tr\u1ecb index t\u01b0\u01a1ng \u1ee9ng, column = gi\u00e1 tr\u1ecb c\u1ed9t t\u01b0\u01a1ng \u1ee9ng, xlabel m\u1eb7c \u0111\u1ecbnh c\u00e1c n\u0103m kh\u00f4ng n\u00ean thay \u0111\u1ed5i.\n\nTr\u01b0\u1eddng h\u1ee3p: mu\u1ed1n kh\u1ea3o s\u00e1t trend tr\u00ean d\u1eef li\u1ec7u v\u1ec1 s\u1ed1 l\u01b0\u1ee3ng, \u0111\u1eb7t dfs = [df_2017, df_2018, df_2019, df_2020], index = gi\u00e1 tr\u1ecb index t\u01b0\u01a1ng \u1ee9ng, column = gi\u00e1 tr\u1ecb c\u1ed9t t\u01b0\u01a1ng \u1ee9ng, xlabel m\u1eb7c \u0111\u1ecbnh c\u00e1c n\u0103m kh\u00f4ng n\u00ean thay \u0111\u1ed5i.","60ad8360":"## Gotta Plot Them All","d3173080":"# \u0110\u00e2y ch\u1ec9 l\u00e0 load data th\u00f4i"}}