{"cell_type":{"6eba8178":"code","6a4248e0":"code","519c83b7":"code","ceb01d6a":"code","5f3f5534":"code","220299d9":"code","f6f20123":"code","91f9f19c":"code","880d71e2":"code","7be63a7f":"code","74753a9c":"code","3fac2f06":"code","a2832486":"code","2cabe613":"markdown","a875d49b":"markdown"},"source":{"6eba8178":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6a4248e0":"df = pd.read_csv(\"..\/input\/pokemon-type-chart\/poke_type_data.csv\")\ndf = df.rename(columns = {\"Unnamed: 0\":\"Type\"}).set_index(\"Type\")\ndf","519c83b7":"types = df.columns\ntypes","ceb01d6a":"df['Effective against'] = df[types].applymap(lambda x: 1 if x == \"2\u00d7\" else 0).sum(axis=1)","5f3f5534":"df['Weak against'] = df[types].applymap(lambda x: 1 if x == \"\u00bd\u00d7\" else 0).sum(axis=1)","220299d9":"df","f6f20123":"effective_list = []\nfor col in df.index:\n    temp_list = df[df.loc[col,types]=='2\u00d7'].index.tolist()\n    effective_list.append(set(temp_list))\n\ndf['Effective against set'] = effective_list\ndf","91f9f19c":"weak_list = []\nfor col in df.index:\n    temp_list = df[df.loc[col,types]=='\u00bd\u00d7'].index.tolist()\n    weak_list.append(set(temp_list))\n\ndf['Weak against set'] = weak_list\ndf","880d71e2":"df.sort_values('Effective against', ascending =False)","7be63a7f":"from itertools import combinations \nfrom tqdm import tqdm_notebook\ndf_combs = pd.DataFrame()\nfor i in tqdm_notebook(combinations(types,3)):\n    comb_list = set()\n    for j in i:\n        comb_list |= df['Effective against set'][j]\n        \n    df_combs = df_combs.append({'Type a':i[0],'Type b':i[1],'Type c': i[2],'Comb effective against': comb_list}, ignore_index=True)\ndf_combs","74753a9c":"df_combs['Eff_factor'] = df_combs['Comb effective against'].apply(len)\ndf_combs","3fac2f06":"# df_combs.sort_values('Eff_factor', ascending =False).head(20)\nwith pd.option_context('display.max_colwidth', 400):\n    display(df_combs.sort_values('Eff_factor', ascending =False).head(20))","a2832486":"set(types) - df_combs.iloc[137,:]['Comb effective against']","2cabe613":"## In this notebook, I try to analyse the pokemon type charts and come with a dream team for the PvP trainer battles.","a875d49b":"## The conclusion came out as follows:\n### A team comprising of a Fighting, Ground and Ice type pokemons should be the best. \n\n> More analysis, example teams and win rates to follow"}}