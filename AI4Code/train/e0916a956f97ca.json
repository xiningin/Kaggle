{"cell_type":{"6b8021e4":"code","3b97ec47":"code","65c4c4f0":"code","fbcb7c93":"code","9c7053b7":"code","27249414":"code","29b0b4f8":"code","f399e79f":"code","426908c2":"code","36648c4e":"code","600f1397":"code","1cd6d10b":"code","52111ab1":"code","df3d35b3":"code","a68d63b1":"code","5991fcd4":"code","e60ccc2e":"code","6be26e82":"code","d8e68427":"code","ec6624ce":"code","1db8cbc9":"code","edc8879a":"code","e3bb3897":"code","ab449f2b":"code","8e32b0df":"code","cfa14e2f":"code","8d21171d":"markdown","b96ddfa0":"markdown","7fceb312":"markdown","b1bdccd0":"markdown","6bf5342c":"markdown","340f607b":"markdown","f14915c6":"markdown","f4e16534":"markdown","8b38200b":"markdown","d4d10f59":"markdown","f422fd53":"markdown","3de548d6":"markdown","1111f0b3":"markdown","a675a5b3":"markdown","99c5599f":"markdown"},"source":{"6b8021e4":"!pip install pywaffle","3b97ec47":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.colors import n_colors\nfrom wordcloud import WordCloud,ImageColorGenerator\ninit_notebook_mode(connected=True)\nfrom plotly.subplots import make_subplots\nfrom pywaffle import Waffle\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65c4c4f0":"df = pd.read_csv(\"\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")\ndf.head()","fbcb7c93":"new_df = df.groupby([\"country\",'iso_code','vaccines'])['total_vaccinations','people_vaccinated','people_fully_vaccinated',\n                                           'daily_vaccinations','total_vaccinations_per_hundred','people_vaccinated_per_hundred',\n                                           \"people_fully_vaccinated_per_hundred\",'daily_vaccinations_per_million'].max().reset_index()\nnew_df.head()","9c7053b7":"new_df['vaccines'].nunique()","27249414":"top10 = new_df['vaccines'].value_counts().nlargest(10)\ntop10","29b0b4f8":"#plt.figure(figsize=(16,9))\ndata = dict(new_df['vaccines'].value_counts(normalize = True).nlargest(10)*100)\n\nvaccine = ['Oxford\/AstraZeneca', 'Moderna, Oxford\/AstraZeneca, Pfizer\/BioNTech',\n       'Oxford\/AstraZeneca, Pfizer\/BioNTech',\n       'Johnson&Johnson, Moderna, Oxford\/AstraZeneca, Pfizer\/BioNTech',\n       'Pfizer\/BioNTech', 'Sputnik V', 'Oxford\/AstraZeneca, Sinopharm\/Beijing',\n       'Sinopharm\/Beijing', 'Moderna, Pfizer\/BioNTech',\n       'Oxford\/AstraZeneca, Pfizer\/BioNTech, Sinovac'] \n            \n\nfig = plt.figure( \n    rows=7,\n    columns=12,\n    FigureClass = Waffle, \n    values = data, \n    title={'label': 'Proportion of Vaccines', 'loc': 'center',\n          'fontsize':15},\n    colors=(\"#FF0000\", \"#FF7F00\", \"#FFD400\",\"#FFFF00\",\"#BFFF00\",\"#6AFF00\",\"#00EAFF\",\"#0095FF\",\"#0040FF\",\"#AA00FF\"),#\"#FF00AA\",\n           #\"#EDB9B9\",\"#E7E9B9\",\"#B9EDE0\",\"#B9D7ED\",\"#DCB9ED\",\"#8F2323\",\"#8F6A23\",\"#4F8F23\",\"#23628F\"),#\"#6B238F\",\"#000000\",\n            #\"#737373\",\"#CCCCCC\",\"#ffa500\",\"#d3ffce\",\"#00ff00\",\"#ff6666\",\"#66cdaa\",\"#ff00ff\",\"#c0d6e4\",\"#ccff00\",\"#8a2be2\",\"#7fffd4\"),#,\"#DE3163\"\n    labels=[f\"{k} ({v:.2f}%)\" for k, v in data.items()],\n    legend={'loc': 'lower left', 'bbox_to_anchor': (0, -0.3), 'ncol': 3, 'framealpha': 0},\n    figsize=(12, 9)\n)\nfig.show()","f399e79f":"data = new_df[['country','total_vaccinations']].nlargest(25,'total_vaccinations')\nfig = px.bar(data, x = 'country',y = 'total_vaccinations',title=\"Number of total vaccinations according to countries\",)\nfig.show()","426908c2":"data = new_df[['country','people_vaccinated']].nlargest(25,'people_vaccinated')\nfig = px.bar(data, x = 'country',y = 'people_vaccinated',title=\"Number of people vaccinated according to countries\",)\nfig.show()","36648c4e":"data = new_df[['country','daily_vaccinations']].nlargest(25,'daily_vaccinations')\nfig = px.bar(data, x = 'country',y = 'daily_vaccinations',title=\"Number of daily vaccinations according to countries\",)\nfig.show()","600f1397":"data = new_df[['country','people_vaccinated_per_hundred']].nlargest(30,'people_vaccinated_per_hundred')\nfig = px.bar(data, x = 'country',y = 'people_vaccinated_per_hundred',title=\"Highest Number of people vaccinated per hundred according to Countries\",)\nfig.show()","1cd6d10b":"fig = px.choropleth(new_df,locations = 'country',locationmode = 'country names',color = 'vaccines',\n                   title = 'Vaccines used by specefic Country',hover_data= ['total_vaccinations'],\n                   )#projection = \"mercator\"\nfig.show()","52111ab1":"vacc = new_df[\"vaccines\"].unique()\nfor i in vacc:\n    c = list(new_df[new_df[\"vaccines\"] == i]['country'])\n    print(f\"Vaccine: {i}\\nUsed countries: {c}\")\n    print('-'*70)","df3d35b3":"vaccine = new_df[\"vaccines\"].value_counts().reset_index()\nvaccine.columns = ['Vaccines','Number of Country']\nvaccine","a68d63b1":"fig = px.bar(vaccine.nlargest(20,\"Number of Country\"),x='Vaccines',y='Number of Country',hover_data = '',\n             title = 'Number of Countries each vaccine is being used',height = 800)\nfig.show()","5991fcd4":"fig = px.treemap(new_df,names = 'country',values = 'total_vaccinations',path = ['vaccines','country'],\n                 title=\"Total Vaccinations per country grouped by Vaccines\",\n                 color_discrete_sequence =px.colors.qualitative.Set1)\nfig.show()","e60ccc2e":"fig = go.Choropleth(locations = new_df[\"country\"],locationmode = 'country names',z = new_df['total_vaccinations'],\n                                         text= new_df['country'],colorbar = dict(title= \"Total Vaccinations\") )\ndata = [fig]\n\nlayout = go.Layout(title = 'Total Vaccinations per Country')\nfig = dict(data = data,layout = layout)\niplot(fig)","6be26e82":"fig = px.treemap(new_df,names = 'country',values = 'people_vaccinated',path = ['vaccines','country'],\n                 title=\"People Vaccinated per country grouped by Vaccines\",\n                 color_discrete_sequence =px.colors.qualitative.Bold)\nfig.show()","d8e68427":"fig = go.Choropleth(locations = new_df[\"country\"],locationmode = 'country names',z = new_df['people_vaccinated'],\n                                         text= new_df['country'],colorbar = dict(title= \"People Vaccinated\") )\ndata = [fig]\n\nlayout = go.Layout(title = 'People Vaccinated per Countries')\nfig = dict(data = data,layout = layout)\niplot(fig)","ec6624ce":"fig = go.Choropleth(locations = new_df[\"country\"],locationmode = 'country names',z = new_df['daily_vaccinations'],\n                                         text= new_df['country'],colorbar = dict(title= \"Daily Vaccinations\") )\ndata = [fig]\n\nlayout = go.Layout(title = 'Daily Vaccinations per Countries')\nfig = dict(data = data,layout = layout)\niplot(fig)","1db8cbc9":"fig = go.Choropleth(locations = new_df[\"country\"],locationmode = 'country names',z = new_df['total_vaccinations_per_hundred'],\n                                         text= new_df['country'],\n                    colorbar = dict(title= \"Total Vaccinations per hundred\"),reversescale =True,colorscale = 'viridis')\ndata = [fig]\n\nlayout = go.Layout(title = 'Total Vaccinations per hundred according to each Country')\nfig = dict(data = data,layout = layout)\niplot(fig)","edc8879a":"fig = px.scatter(new_df,x = 'total_vaccinations',y='total_vaccinations_per_hundred',size='total_vaccinations',\n                 hover_name = 'country',size_max = 50,title=\"Total vs Total vaccinations per hundred grouped by Vaccines\",\n                color_discrete_sequence = px.colors.qualitative.Bold)\nfig.show()","e3bb3897":"def plot_trend(dataframe,feature,title,country):\n    plt.style.use('ggplot')\n    plt.figure(figsize=(20,25))\n    \n    for i,country in enumerate(country):\n        plt.subplot(8,4,i+1)\n        data = dataframe[dataframe['country'] == country]\n        sns.lineplot(x=data['date'] ,y=data[feature],label = feature)\n        plt.xlabel('')\n        plt.tick_params(axis='x',which='both',top=False,bottom=False,labelbottom=False)\n        plt.title(country)\n        \n    plt.suptitle(title,y=1.05)\n    plt.tight_layout()\n    plt.show()","ab449f2b":"country = ['Argentina', 'Austria', 'Belgium', 'Brazil','Canada','China','Czechia', 'Denmark', 'England','Finland', 'France',\n       'Germany','India','Ireland', 'Israel', 'Italy', 'Kuwait','Mexico', 'Netherlands','Norway', 'Poland','Russia',\n        'Saudi Arabia', 'Scotland','Singapore','Spain', 'Sweden', 'Switzerland', 'Turkey',\n        'United Arab Emirates', 'United Kingdom', 'United States']\nplot_trend(df,'total_vaccinations','Trend of total vaccination',country)","8e32b0df":"def plot_trend2(dataframe,feature,title,country):\n    plt.style.use('ggplot')\n    plt.figure(figsize=(20,18))\n    \n    for i,country in enumerate(country):\n        plt.subplot(5,5,i+1)\n        data = dataframe[dataframe['country'] == country]\n        sns.lineplot(x=data['date'] ,y=data[feature],label = feature)\n        plt.xlabel('')\n        plt.tick_params(axis='x',which='both',top=False,bottom=False,labelbottom=False)\n        plt.legend(loc = 'upper left')\n        plt.title(country)\n        \n    plt.suptitle(title,y=1.05)\n    plt.tight_layout()\n    plt.show()","cfa14e2f":"country = ['Argentina', 'Austria', 'Belgium', 'Brazil','Canada','China','Czechia', 'Denmark', 'England','Finland', 'France',\n       'Germany','Ireland', 'Israel', 'Italy','Mexico','Norway', 'Poland','Scotland','Singapore','Spain', 'Sweden','United Arab Emirates', 'United Kingdom', \n        'United States']\nplot_trend2(df,'people_vaccinated_per_hundred','Trend of people vaccinated per hundred',country)","8d21171d":"#### The data contains the following information:\n\n- **Country**- this is the country for which the vaccination information is provided;\n- Country ISO Code - ISO code for the country;\n- **Date**- date for the data entry; for some of the dates we have only the daily vaccinations, for others, only the (cumulative) total;\n- **Total number of vaccinations** - this is the absolute number of total immunizations in the country;\n- **Total number of people vaccinated** - a person, depending on the immunization scheme, will receive one or more (typically 2) vaccines; at a certain moment, the number of vaccination might be larger than the number of people;\n- **Total number of people fully vaccinated** - this is the number of people that received the entire set of immunization according to the immunization scheme (typically 2); at a certain moment in time, there might be a certain number of people that received one vaccine and another number (smaller) of people that received all vaccines in the scheme;\n- **Daily vaccinations (raw)** - for a certain data entry, the number of vaccination for that date\/country;\n- **Daily vaccinations** -       for a certain data entry, the number of vaccination for that date\/country;\n- **Total vaccinations per hundred** - ratio (in percent) between vaccination number and total population up to the date in the country;\n- **Total number of people vaccinated per hundred** - ratio (in percent) between population immunized and total population up to the date in the country;\n- **Total number of people fully vaccinated per hundred** - ratio (in percent) between population fully immunized and total population up to the date in the country;\n- **Number of vaccinations per day** - number of daily vaccination for that day and country;\n- **Daily vaccinations per million** - ratio (in ppm) between vaccination number and total population for the current date in the country;\n- **Vaccines used in the country** - total number of vaccines used in the country (up to date);\n- **Source name** - source of the information (national authority, international organization, local organization etc.);\n- **Source website** - website of the source of information;","b96ddfa0":"---\n\n<h1 style=\"text-align: center;font-size: 40px;\">Vaccination Progress of Covid19<\/h1>\n\n---\n\n<center><img src=\"https:\/\/www.jhsph.edu\/sebin\/z\/z\/SARS-CoV-2-vaccine-820x440.jpg\n\"width=\"500\" height=\"400\"><\/center>\n\n---","7fceb312":"> #### Total Vaccinations per hundred according to each Country:","b1bdccd0":"Observation:\n- In a range of percentage of vaccines 29.08% used Oxford\/AstraZeneca\n- 10.20% used Moderna, Oxford\/AstraZeneca\n- Oxford\/AstraZeneca is the mostly used Vaccine\n\n- Later **Pfizer\/BioNTech** was the mostly used Vaccine and now it's in the **5th** place also **Oxford\/AstraZeneca** was not in the top 3 & now it's in the **1st place****. Looks like **Oxford\/AstraZeneca** works **best** among the vaccines","6bf5342c":"> #### Number of People Vaccinated per country grouped by Vaccines:","340f607b":"- Oxford\/AstraZeneca  is being used by highest number of countries which is 57","f14915c6":"> #### Total Vaccinations per country grouped by Vaccines:","f4e16534":"> #### Which Vaccine is Used the most?","8b38200b":"> #### Daily Vaccinations per Countries:","d4d10f59":"> #### What is the proportion of Top 10 vaccine in the race of fighting Covid19?","f422fd53":"['equirectangular', 'mercator', 'orthographic', 'natural\n            earth', 'kavrayskiy7', 'miller', 'robinson', 'eckert4',\n            'azimuthal equal area', 'azimuthal equidistant', 'conic\n            equal area', 'conic conformal', 'conic equidistant',\n            'gnomonic', 'stereographic', 'mollweide', 'hammer',\n            'transverse mercator', 'albers usa', 'winkel tripel',\n            'aitoff', 'sinusoidal']","3de548d6":"> #### What is the number of total vaccinations,people vaccinated,daily vaccinations according to countries?","1111f0b3":"> #### What is the trend of total vaccinations,daily vaccinations,people vaccinated per hundred according to countries?","a675a5b3":"> #### Which vaccine is used by which Country?","99c5599f":"Observation:\n\n- Although USA & China produce the highest number of vaccinations to their citizens, according to their population this is not much."}}