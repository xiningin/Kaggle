{"cell_type":{"9e75bada":"code","185f57c5":"code","f1cb9805":"code","339521b9":"code","67cb67ce":"code","1ef035cf":"code","8c6a7e34":"code","d26c95e0":"code","1a9a594c":"code","65cd1ba4":"code","a3af862f":"code","198907ac":"code","9c9cd918":"code","53ac0c1d":"code","fcaf3eeb":"code","d425439b":"code","21a73198":"code","65988dd8":"code","1a56c1e6":"code","14ae334f":"code","04c1c2c9":"code","f26948bb":"code","fe758669":"code","c5cc851e":"code","863d0f00":"code","d5ec8c9c":"code","bd4beb89":"code","9effa380":"code","6327aec4":"code","b90e7b00":"code","a1a7339c":"code","585c0955":"code","5f342abd":"markdown","b0673beb":"markdown","b05cc752":"markdown","fe832137":"markdown","616bbf64":"markdown","db0fea3e":"markdown","83c74e46":"markdown","ae6fa6f8":"markdown"},"source":{"9e75bada":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","185f57c5":"df = pd.read_csv('..\/input\/iris\/Iris.csv')\ndf.head()","f1cb9805":"df.shape","339521b9":"# delete a column\ndf = df.drop(columns = ['Id'])\ndf.head()","67cb67ce":"# to display stats about data\ndf.describe()","1ef035cf":"# to basic info about datatype\ndf.info()","8c6a7e34":"# to display no. of samples on each class\ndf['Species'].value_counts()","d26c95e0":"# check for null values\ndf.isnull().sum()","1a9a594c":"# histograms\ndf['SepalLengthCm'].hist()","65cd1ba4":"df['SepalWidthCm'].hist()","a3af862f":"df['PetalLengthCm'].hist()","198907ac":"df['PetalWidthCm'].hist()","9c9cd918":"sns.pairplot(df)","53ac0c1d":"# scatterplot\ncolors = ['red', 'orange', 'blue']\nspecies = ['Iris-virginica','Iris-versicolor','Iris-setosa']","fcaf3eeb":"for i in range(3):\n    x = df[df['Species'] == species[i]]\n    plt.scatter(x['SepalLengthCm'], x['SepalWidthCm'], c = colors[i], label=species[i])\nplt.xlabel(\"Sepal Length\")\nplt.ylabel(\"Sepal Width\")\nplt.legend()","d425439b":"for i in range(3):\n    x = df[df['Species'] == species[i]]\n    plt.scatter(x['PetalLengthCm'], x['PetalWidthCm'], c = colors[i], label=species[i])\nplt.xlabel(\"Petal Length\")\nplt.ylabel(\"Petal Width\")\nplt.legend()","21a73198":"for i in range(3):\n    x = df[df['Species'] == species[i]]\n    plt.scatter(x['SepalLengthCm'], x['PetalLengthCm'], c = colors[i], label=species[i])\nplt.xlabel(\"Sepal Length\")\nplt.ylabel(\"Petal Length\")\nplt.legend()","65988dd8":"for i in range(3):\n    x = df[df['Species'] == species[i]]\n    plt.scatter(x['SepalWidthCm'], x['PetalWidthCm'], c = colors[i], label=species[i])\nplt.xlabel(\"Sepal Width\")\nplt.ylabel(\"Petal Width\")\nplt.legend()","1a56c1e6":"df.corr()","14ae334f":"corr = df.corr()\nfig, ax = plt.subplots(figsize=(5,4))\nsns.heatmap(corr, annot=True, ax=ax, cmap = 'coolwarm')","04c1c2c9":"#from sklearn import preprocessing\n#le = preprocessing.LabelEncoder()\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","f26948bb":"df['Species'] = le.fit_transform(df['Species'])\ndf.head()","fe758669":"from sklearn.model_selection import train_test_split\nX = df.drop(columns=['Species'])\nY = df['Species']\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.30) # train-70, test-30\n\n#OR\n\n#from sklearn import model_selection\n#te = model_selection.train_test_split\n#X = df.drop(columns=['Species'])\n#Y = df['Species']\n#x_train, x_test, y_train, y_test = te(X, Y, test_size=0.30)''''","c5cc851e":"# logistic regression \nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression(max_iter=700)\n#OR\n\n#from sklearn import linear_model\n#model = linear_model.LogisticRegression()","863d0f00":"# model training\nmodel.fit(x_train, y_train)","d5ec8c9c":"# print metric to get performance\nprint(\"Accuracy: \",model.score(x_test, y_test) * 100)","bd4beb89":"# knn - k-nearest neighbours\nfrom sklearn.neighbors import KNeighborsClassifier\nmodel = KNeighborsClassifier()","9effa380":"model.fit(x_train, y_train)","6327aec4":"# print metric to get performance\nprint(\"Accuracy: \",model.score(x_test, y_test) * 100)","b90e7b00":"# decision tree\nfrom sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()","a1a7339c":"model.fit(x_train, y_train)","585c0955":"# print metric to get performance\nprint(\"Accuracy: \",model.score(x_test, y_test) * 100)","5f342abd":"# Import modules","b0673beb":"# Label Encoder\n\nIn machine learning, we usually deal with datasets which contains multiple labels in one or more than one columns. These labels can be in the form of words or numbers. Label Encoding refers to converting the labels into numeric form so as to convert it into the machine-readable form","b05cc752":"# Loading the dataset","fe832137":"# Coorelation Matrix\n\nA correlation matrix is a table showing correlation coefficients between variables. Each cell in the table shows the correlation between two variables. The value is in the range of -1 to 1. If two varibles have high correlation, we can neglect one variable from those two.","616bbf64":"# Model Training","db0fea3e":"# Exploratory Data Analysis","83c74e46":"# Preprocessing the dataset","ae6fa6f8":"# Dataset Information\n\nThe data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other.\n\nAttribute Information:\n\n1. sepal length in cm\n2. sepal width in cm\n3. petal length in cm\n4. petal width in cm\n5. class:\n-- Iris Setosa\n-- Iris Versicolour\n-- Iris Virginica"}}