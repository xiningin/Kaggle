{"cell_type":{"823c4be6":"code","367c9f7e":"code","ae7d34f9":"code","f7e68895":"code","7dd70657":"code","1558b33c":"code","ef7de14f":"code","28e4efb3":"code","b8bc54b5":"code","0c4085cf":"code","0e6ff1aa":"code","877dfded":"code","4946a038":"code","2cc63bee":"code","4c1f09aa":"code","00f68828":"code","7c6cce54":"code","2dd55050":"code","5e9a1bf9":"code","20eaa33e":"code","eaa9cc69":"code","ee524704":"code","dcb1499a":"code","82dbddc7":"code","bf617892":"code","6a81055d":"code","577607ee":"code","c6e72ee7":"code","94a2604d":"code","1a69c918":"code","3f9faeb8":"code","0f73db4c":"code","0b111961":"code","4c0f823a":"code","11fabfa6":"markdown","9aa0b14a":"markdown","66e79e05":"markdown","18d2cd4c":"markdown","f7db095c":"markdown"},"source":{"823c4be6":"import pandas as pd # \ub370\uc774\ud130 \ucc98\ub9ac \ubaa8\ub4c8..\nimport matplotlib.pyplot as plt # \ub370\uc774\ud130 \uc2dc\uac01\ud654 \ubaa8\ub4c8 \nimport seaborn as sns # \ub370\uc774\ud130 \uc2dc\uac01\ud654 \ubaa8\ub4c8\nfrom sklearn.model_selection import train_test_split # \ub370\uc774\ud130 \ubd84\ud560 \ubaa8\ub4c8\n\nfrom sklearn import linear_model\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import linear_model\nfrom sklearn.linear_model import Lasso\nfrom sklearn.neural_network import MLPRegressor\n\n\ndef disable_warning():\n    import warnings\n    warnings.filterwarnings('ignore')\n    \n    \n# data_f = load_csv('..\/input\/plant-diary-new\/plant_diary_new.csv')\ndef load_csv(file):\n    import pandas as pd # \ub370\uc774\ud130 \ucc98\ub9ac \ubaa8\ub4c8\n    # CSV \ud30c\uc77c \uc77d\uc5b4\uc624\uae30\n    imsi = pd.read_csv(file)\n    return imsi;\n\n\ndef show_all_lines(df):\n    import seaborn as sns # \ub370\uc774\ud130 \uc2dc\uac01\ud654 \ubaa8\ub4c8\n    import matplotlib.pyplot as plt # \ub370\uc774\ud130 \uc2dc\uac01\ud654 \ubaa8\ub4c8 \n\n    sns.set(rc={'figure.figsize':(8,5)})\n    ax = sns.lineplot(data=df, x=\"hour\", y=\"count\", hue=\"name\", markers=True, dashes=False)\n\n    plt.title('', fontsize=10)\n    plt.ylabel('count', fontsize=12)\n    plt.xlabel('hour', fontsize=12)\n    plt.legend(fontsize=8, loc='best')\n    xlist=list(range(0, 170, 24))\n    plt.xticks(xlist)\n    plt.show()\n\n    \ndef show_line(df):    \n    sns.set(rc={'figure.figsize':(8,5)})\n    ax = sns.lineplot(data=df, x=\"hour\", y=\"count\", hue=\"name\", style=\"name\", markers=True, dashes=False\n    )\n    plt.title('', fontsize=10)\n    plt.ylabel('count', fontsize=12)\n    plt.xlabel('hour', fontsize=12)\n    plt.legend(fontsize=8, loc='best')\n\n    xlist=list(range(0, 170, 24))\n    plt.xticks(xlist)\n\n    plt.show()\n\n","367c9f7e":"disable_warning()","ae7d34f9":"data_f = load_csv('..\/input\/microbial-community-shindari-combined\/combined_new.csv')","f7e68895":"data_f","7dd70657":"data_f.describe()","1558b33c":"data_f['name']","ef7de14f":"data_f['name'].unique() # name \ud544\ub4dc\uc5d0 \uc788\ub294 \uac12\uc744 \ubcf4\uc5ec\uc90c.","28e4efb3":"show_all_lines(data_f)","b8bc54b5":"df_1 = data_f[data_f['name']=='Pediococcus acidilactici group']\ndf_1","0c4085cf":"show_line(df_1)","0e6ff1aa":"# \ubb38\uc81c\uc640 \uc815\ub2f5\uc744 \uc900\ube44\na = df_1[['hour']] # \ubb38\uc81c\nb = df_1[['count']] # \uc815\ub2f5","877dfded":"a","4946a038":"b","2cc63bee":"minseo = RandomForestRegressor(n_estimators=28,random_state=0)\n#minseo = DecisionTreeRegressor(random_state = 0)\nminseo.fit(a, b)\nprint(minseo.score(a, b))","4c1f09aa":"pred = minseo.predict([[6],[18],[30],[42],[54],[66],[78],[90],[102],[108],[114],[126],[132],[138],[144],[150],[156],[162]]) # \uc608\uce21\npred","00f68828":"df_pred = pd.DataFrame([\n        [6, 'Pediococcus acidilactici group', 5833.03571429],\n        [18, 'Pediococcus acidilactici group', 19166.07142857],    \n        [30, 'Pediococcus acidilactici group', 33341.17857143],\n        [42, 'Pediococcus acidilactici group', 43940.92857143],   \n    \n        [54, 'Pediococcus acidilactici group', 51185.17857143],    \n        [66, 'Pediococcus acidilactici group', 59179.64285714],    \n        [78, 'Pediococcus acidilactici group', 65433],  \n        [90, 'Pediococcus acidilactici group', 66615.46428571],  \n    \n        [102, 'Pediococcus acidilactici group', 67833.53571429],    \n        [108, 'Pediococcus acidilactici group', 66846.53571429],    \n        [114, 'Pediococcus acidilactici group', 64921.10714286],    \n        [126, 'Pediococcus acidilactici group', 64921.10714286], \n    \n        [132, 'Pediococcus acidilactici group', 63576.32142857],    \n        [138, 'Pediococcus acidilactici group', 58336.32142857],    \n        [144, 'Pediococcus acidilactici group', 58336.32142857],    \n        [150, 'Pediococcus acidilactici group', 53257.39285714],   \n    \n        [156, 'Pediococcus acidilactici group', 53257.39285714],    \n        [162, 'Pediococcus acidilactici group', 53257.39285714],        \n], columns=['hour', 'name', 'count'])","7c6cce54":"df_1_augmented = df_1.append(df_pred)\naugmented1 = df_1_augmented","2dd55050":"show_line(df_1_augmented)","5e9a1bf9":"minseo = linear_model.BayesianRidge(compute_score=True)\nminseo.fit(a, b)\nprint(minseo.score(a, b)) # score\uc758 \uc758\ubbf8: \uc815\ud655\ud558\uac8c \uc608\uce21\ud558\uba74 1, \ud3c9\uade0\uc73c\ub85c \uc608\uce21\ud558\uba74 0, \ub354 \ubabb \uc608\uce21\ud558\uba74 \uc74c\uc218  \n\nminseo = linear_model.Lasso(alpha = .01)\nminseo.fit(a, b)\nprint(minseo.score(a, b))\n\nminseo = MLPRegressor(hidden_layer_sizes = (10,6), activation='relu', solver='lbfgs')\nminseo.fit(a, b)\nprint(minseo.score(a, b))\n\nminseo = LinearRegression()\nminseo.fit(a, b)\nprint(minseo.score(a, b))","20eaa33e":"df_2 = data_f[data_f['name']=='Bacillus amyloliquefaciens group']\nprint(df_2)","eaa9cc69":"show_line(df_2)","ee524704":"# \ud559\uc2b5\uc6a9 \ubb38\uc81c\uc640 \uc815\ub2f5\na = df_2[['hour']]\nb = df_2[['count']]","dcb1499a":"minseo = RandomForestRegressor(n_estimators=28,random_state=0)\n#minseo = DecisionTreeRegressor(random_state = 0)\nminseo.fit(a, b)\nminseo.score(a, b)","82dbddc7":"questions = [[6],[18],[30],[42],[54],[66],[78],[90],[102],[108],[114],[126],[132],[138],[144],[150],[156],[162]]\nanswers = minseo.predict(questions) # \uc608\uce21\nanswers","bf617892":"df_pred = pd.DataFrame([\n        [questions[0][0], 'Bacillus amyloliquefaciens group', answers[0]],\n        [questions[1][0], 'Bacillus amyloliquefaciens group', answers[1]],\n        [questions[2][0], 'Bacillus amyloliquefaciens group', answers[2]],\n        [questions[3][0], 'Bacillus amyloliquefaciens group', answers[3]],    \n        [questions[4][0], 'Bacillus amyloliquefaciens group', answers[4]],    \n        [questions[5][0], 'Bacillus amyloliquefaciens group', answers[5]],    \n        [questions[6][0], 'Bacillus amyloliquefaciens group', answers[6]],    \n        [questions[7][0], 'Bacillus amyloliquefaciens group', answers[7]],    \n        [questions[8][0], 'Bacillus amyloliquefaciens group', answers[8]],    \n        [questions[9][0], 'Bacillus amyloliquefaciens group', answers[9]],    \n        [questions[10][0], 'Bacillus amyloliquefaciens group', answers[10]],    \n        [questions[11][0], 'Bacillus amyloliquefaciens group', answers[11]],    \n        [questions[12][0], 'Bacillus amyloliquefaciens group', answers[12]],    \n        [questions[13][0], 'Bacillus amyloliquefaciens group', answers[13]],    \n        [questions[14][0], 'Bacillus amyloliquefaciens group', answers[14]],    \n        [questions[15][0], 'Bacillus amyloliquefaciens group', answers[15]],    \n        [questions[16][0], 'Bacillus amyloliquefaciens group', answers[16]],    \n        [questions[17][0], 'Bacillus amyloliquefaciens group', answers[17]],    \n    ], columns=['hour', 'name', 'count'])\n","6a81055d":"df_2_augmented = df_2.append(df_pred)\naugmented2 = df_2_augmented","577607ee":"show_line(df_2_augmented)","c6e72ee7":"def augment(microbial_name):\n    df_2 = data_f[data_f['name']==microbial_name]\n    print(df_2)\n\n    show_line(df_2)\n\n    # \ud559\uc2b5\uc6a9 \ubb38\uc81c\uc640 \uc815\ub2f5\n    a = df_2[['hour']]\n    b = df_2[['count']]\n\n    \n    from sklearn.ensemble import RandomForestRegressor\n\n    minseo = RandomForestRegressor(n_estimators=28,random_state=0)\n    #minseo = DecisionTreeRegressor(random_state = 0)\n    minseo.fit(a, b)\n    minseo.score(a, b)\n\n    \n    questions = [[6],[18],[30],[42],[54],[66],[78],[90],[102],[108],[114],[126],[132],[138],[144],[150],[156],[162]]\n    answers = minseo.predict(questions) # \uc608\uce21\n\n    df_pred = pd.DataFrame([\n            [questions[0][0], microbial_name, answers[0]],\n            [questions[1][0], microbial_name, answers[1]],\n            [questions[2][0], microbial_name, answers[2]],\n            [questions[3][0], microbial_name, answers[3]],    \n            [questions[4][0], microbial_name, answers[4]],    \n            [questions[5][0], microbial_name, answers[5]],    \n            [questions[6][0], microbial_name, answers[6]],    \n            [questions[7][0], microbial_name, answers[7]],    \n            [questions[8][0], microbial_name, answers[8]],    \n            [questions[9][0], microbial_name, answers[9]],    \n            [questions[10][0], microbial_name, answers[10]],    \n            [questions[11][0], microbial_name, answers[11]],    \n            [questions[12][0], microbial_name, answers[12]],    \n            [questions[13][0], microbial_name, answers[13]],    \n            [questions[14][0], microbial_name, answers[14]],    \n            [questions[15][0], microbial_name, answers[15]],    \n            [questions[16][0], microbial_name, answers[16]],    \n            [questions[17][0], microbial_name, answers[17]],           \n        ], columns=['hour', 'name', 'count'])\n\n    df_2_augmented = df_2.append(df_pred)\n    df_2_augmented\n\n    show_line(df_2_augmented)\n\n    return df_2_augmented\n\n\naugmented3 = augment('Enterococcus durans group')","94a2604d":"data_f['name'].unique()","1a69c918":"augmented4 = augment('Pediococcus_uc')\naugmented5 = augment('Ralstonia pickettii')\naugmented6 = augment('Enterobacter asburiae group')\naugmented7 = augment('Lactococcus lactis group')\naugmented8 = augment('Citrobacter koseri')\naugmented9 = augment('Escherichia hermannii group')\naugmented10 = augment('Pantoea allii')","3f9faeb8":"augmented_all = augmented1.append(augmented2)\naugmented_all = augmented_all.append(augmented3)\naugmented_all = augmented_all.append(augmented4)\naugmented_all = augmented_all.append(augmented5)\naugmented_all = augmented_all.append(augmented6)\naugmented_all = augmented_all.append(augmented7)\naugmented_all = augmented_all.append(augmented8)\naugmented_all = augmented_all.append(augmented9)\naugmented_all = augmented_all.append(augmented10)\n","0f73db4c":"show_all_lines(data_f)","0b111961":"show_all_lines(augmented_all)","4c0f823a":"augmented_all.to_csv('augmented_all.csv')","11fabfa6":"## 2. Bacillus amyloliquefaciens group","9aa0b14a":"## 4. Pediococcus_uc and others","66e79e05":"## 3. Enterococcus durans group","18d2cd4c":"# \uc270\ub2e4\ub9ac \ubbf8\uc0dd\ubb3c \uac1c\uccb4\ub7c9 \uc608\uce21","f7db095c":"## 1. Pediococcus acidilactici group"}}