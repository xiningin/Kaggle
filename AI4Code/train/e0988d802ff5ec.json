{"cell_type":{"82d7fc6c":"code","afbc555e":"code","62c8e5f7":"code","43a197d0":"code","84c64604":"code","8f9b351c":"code","add57f50":"code","06acf02a":"code","fdfbe75f":"code","aac3699e":"code","5c49ff70":"code","f74b9ee6":"code","59023906":"code","1bb6f954":"code","30b875ea":"code","36e69ba3":"code","3a56f486":"code","48df725c":"code","96918575":"code","e2909b50":"code","d1c06b1f":"code","e677021b":"code","bc51c73f":"code","f9fb33a1":"code","76dd0232":"code","32ebc229":"code","c8499b5c":"code","5bc67ba7":"code","857bc55b":"code","0bcfcce9":"code","acf9f30c":"code","1c5eb881":"code","6ba76db1":"code","9f98f85e":"code","48e96fd8":"code","1f4dc27a":"code","d9f961df":"code","a0708891":"code","fdcc207f":"code","6d542f78":"markdown","f0eb0be1":"markdown","f7f467d8":"markdown","963c112a":"markdown"},"source":{"82d7fc6c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm.auto import tqdm\nfrom glob import glob\nimport time, gc\nimport cv2\n\nfrom tensorflow import keras\nimport matplotlib.image as mpimg\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Model\nfrom keras.models import clone_model\nfrom keras.layers import Dense,Conv2D,Flatten,MaxPool2D,Dropout,BatchNormalization, Input\nfrom keras.optimizers import Adam\nfrom keras.callbacks import ReduceLROnPlateau\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport PIL.Image as Image, PIL.ImageDraw as ImageDraw, PIL.ImageFont as ImageFont\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom keras.utils import plot_model\n%matplotlib inline\ngc.enable()\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","afbc555e":"train_df = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/test.csv')\nclass_map_df = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/class_map.csv')\nsample_sub_df = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/sample_submission.csv')","62c8e5f7":"train_df.head()","43a197d0":"test_df","84c64604":"sample_sub_df.head()","8f9b351c":"class_map_df.head()","add57f50":"print('Size of training data: {}'.format(train_df.shape))\nprint('Size of test data: {}'.format(test_df.shape))\nprint('Size of class map: {}'.format(class_map_df.shape))","06acf02a":"count = class_map_df.groupby('component_type').count().reset_index()\ncount","fdfbe75f":"# plotting labels. belonged to each class \nsns.barplot('component_type','label',data = count)","aac3699e":" # now visualising some of the top labels in each class\n# uses pd.groupby to count the occurence of each label in all three classes    \nroot_component = train_df.groupby('grapheme_root').count().reset_index()[['grapheme_root','image_id']].sort_values(by = 'image_id', ascending = False)\nvowel_component = train_df.groupby('vowel_diacritic').count().reset_index().sort_values(by = 'image_id', ascending = False)[['vowel_diacritic','image_id']]\ncons_component = train_df.groupby('consonant_diacritic').count().reset_index().sort_values(by = 'image_id', ascending = False)[['consonant_diacritic','image_id']]\nroot_component","5c49ff70":"# images vs grapheme_root\nplt.figure(figsize = (10,10))\nsns.barplot('grapheme_root','image_id',data = root_component,order = root_component['grapheme_root'] )","f74b9ee6":"# images vs grapheme_root\nplt.figure(figsize = (10,10))\nsns.barplot('grapheme_root','image_id',data = root_component,order = root_component['grapheme_root'] )#","59023906":"# plotting 10 most occuring among them\nplt.figure(figsize = (10,10))\nsns.barplot('grapheme_root','image_id',data = root_component.iloc[0:10],order = root_component['grapheme_root'][0:10] )","1bb6f954":"# now finding how these 10 looks like\nnp.array(root_component['grapheme_root'].map(dict(class_map_df[class_map_df['component_type']=='grapheme_root'][['label', 'component']].values)))[0:10]","30b875ea":"# plotting 10 least among given\nplt.figure(figsize = (10,10))\nsns.barplot('grapheme_root','image_id',data = root_component.iloc[-10:],order = root_component['grapheme_root'][-10:] )","36e69ba3":"# now finding how these 10 looks like\nnp.array(root_component['grapheme_root'].map(dict(class_map_df[class_map_df['component_type']=='grapheme_root'][['label', 'component']].values)))[-10:]","3a56f486":"# same for vowel_diacritics\n# images vs vowel_diacritic\nplt.figure(figsize = (10,10))\nsns.barplot('vowel_diacritic','image_id',data = vowel_component,order = vowel_component['vowel_diacritic'] )","48df725c":"# now finding how these  looks like\nnp.array(vowel_component['vowel_diacritic'].map(dict(class_map_df[class_map_df['component_type']=='vowel_diacritic'][['label', 'component']].values)))","96918575":"# same for 'consonant_diacritic'\n# images vs 'consonant_diacritic'\nplt.figure(figsize = (10,10))\nsns.barplot('consonant_diacritic','image_id',data = cons_component,order = cons_component['consonant_diacritic'] )","e2909b50":"# now finding how these  looks like\nnp.array(cons_component['consonant_diacritic'].map(dict(class_map_df[class_map_df['component_type']=='consonant_diacritic'][['label', 'component']].values)))","d1c06b1f":"train_df = train_df.drop(['grapheme'], axis=1, inplace=False)","e677021b":"train_df[['grapheme_root', 'vowel_diacritic', 'consonant_diacritic']] = train_df[['grapheme_root', 'vowel_diacritic', 'consonant_diacritic']].astype('uint8')","bc51c73f":"train_df","f9fb33a1":"IMG_SIZE=64\nN_CHANNELS=1","76dd0232":"def resize(df, size=64, need_progress_bar=True):\n    resized = {}\n    resize_size=64\n    if need_progress_bar:\n        for i in tqdm(range(df.shape[0])):\n            image=df.loc[df.index[i]].values.reshape(137,236)\n            _, thresh = cv2.threshold(image, 30, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)\n            contours, _ = cv2.findContours(thresh,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)[-2:]\n\n            idx = 0 \n            ls_xmin = []\n            ls_ymin = []\n            ls_xmax = []\n            ls_ymax = []\n            for cnt in contours:\n                idx += 1\n                x,y,w,h = cv2.boundingRect(cnt)\n                ls_xmin.append(x)\n                ls_ymin.append(y)\n                ls_xmax.append(x + w)\n                ls_ymax.append(y + h)\n                xmin = min(ls_xmin)\n                ymin = min(ls_ymin)\n                xmax = max(ls_xmax)\n                ymax = max(ls_ymax)\n                roi = image[ymin:ymax,xmin:xmax]\n                resized_roi = cv2.resize(roi, (resize_size, resize_size),interpolation=cv2.INTER_AREA)\n                resized[df.index[i]] = resized_roi.reshape(-1)\n\n    else:\n        for i in range(df.shape[0]):\n            #image = cv2.resize(df.loc[df.index[i]].values.reshape(137,236),(size,size),None,fx=0.5,fy=0.5,interpolation=cv2.INTER_AREA)\n            image=df.loc[df.index[i]].values.reshape(137,236)\n            _, thresh = cv2.threshold(image, 30, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)\n            contours, _ = cv2.findContours(thresh,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)[-2:]\n\n            idx = 0 \n            ls_xmin = []\n            ls_ymin = []\n            ls_xmax = []\n            ls_ymax = []\n            for cnt in contours:\n                idx += 1\n                x,y,w,h = cv2.boundingRect(cnt)\n                ls_xmin.append(x)\n                ls_ymin.append(y)\n                ls_xmax.append(x + w)\n                ls_ymax.append(y + h)\n                xmin = min(ls_xmin)\n                ymin = min(ls_ymin)\n                xmax = max(ls_xmax)\n                ymax = max(ls_ymax)\n\n                roi = image[ymin:ymax,xmin:xmax]\n                resized_roi = cv2.resize(roi, (resize_size, resize_size),interpolation=cv2.INTER_AREA)\n                resized[df.index[i]] = resized_roi.reshape(-1)\n    resized = pd.DataFrame(resized).T\n    return resized","32ebc229":"def get_dummies(df):\n    cols = []\n    for col in df:\n        cols.append(pd.get_dummies(df[col].astype(str)))\n    return pd.concat(cols, axis=1)","c8499b5c":"# model preparation\n\ninputs = Input(shape = (IMG_SIZE, IMG_SIZE, 1))\n\nmodel = Conv2D(filters=32, kernel_size=(3, 3), padding='SAME', activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 1))(inputs)\nmodel = Conv2D(filters=32, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\nmodel = BatchNormalization(momentum=0.15)(model)\nmodel = MaxPool2D(pool_size=(2, 2))(model)\nmodel = Conv2D(filters=32, kernel_size=(5, 5), padding='SAME', activation='relu')(model)\nmodel = Dropout(rate=0.25)(model)\n\nmodel = Conv2D(filters=64, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\nmodel = Conv2D(filters=64, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\nmodel = BatchNormalization(momentum=0.15)(model)\nmodel = MaxPool2D(pool_size=(2, 2))(model)\nmodel = Conv2D(filters=64, kernel_size=(5, 5), padding='SAME', activation='relu')(model)\nmodel = BatchNormalization(momentum=0.15)(model)\nmodel = Dropout(rate=0.25)(model)\n\nmodel = Conv2D(filters=128, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\nmodel = Conv2D(filters=128, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\nmodel = BatchNormalization(momentum=0.15)(model)\nmodel = MaxPool2D(pool_size=(2, 2))(model)\nmodel = Conv2D(filters=128, kernel_size=(5, 5), padding='SAME', activation='relu')(model)\nmodel = BatchNormalization(momentum=0.15)(model)\nmodel = Dropout(rate=0.2)(model)\n\nmodel = Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\nmodel = Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\nmodel = Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\nmodel = BatchNormalization(momentum=0.15)(model)\nmodel = MaxPool2D(pool_size=(2, 2))(model)\nmodel = Conv2D(filters=256, kernel_size=(5, 5), padding='SAME', activation='relu')(model)\nmodel = BatchNormalization(momentum=0.20)(model)\nmodel = Dropout(rate=0.25)(model)\n\nmodel = Flatten()(model)\nmodel = Dense(512, activation = \"relu\",name= 'dense_')(model)\nmodel = Dropout(rate=0.25)(model)\ndense = Dense(256, activation = \"relu\",name= 'dense_1')(model)\n\nhead_root = Dense(168, activation = 'softmax',name= 'dense_2')(dense)\nhead_vowel = Dense(11, activation = 'softmax',name= 'dense_3')(dense)\nhead_consonant = Dense(7, activation = 'softmax',name= 'dense_4')(dense)\n\nmodel = Model(inputs=inputs, outputs=[head_root, head_vowel, head_consonant]) # 3 outputs one for each","5bc67ba7":"model.summary()","857bc55b":"# plotting the model how it exactly look like\nplot_model(model, to_file='model.png')","0bcfcce9":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","acf9f30c":"# Set a learning rate annealer. Learning rate will be half after 3 epochs if accuracy is not increased\nlearning_rate_reduction_root = ReduceLROnPlateau(monitor='dense_2_accuracy', \n                                            patience=3, \n                                            verbose=1,\n                                            factor=0.5, \n                                            min_lr=0.00001)\nlearning_rate_reduction_vowel = ReduceLROnPlateau(monitor='dense_3_accuracy', \n                                            patience=3, \n                                            verbose=1,\n                                            factor=0.5, \n                                            min_lr=0.00001)\nlearning_rate_reduction_consonant = ReduceLROnPlateau(monitor='dense_4_accuracy', \n                                            patience=3, \n                                            verbose=1,\n                                            factor=0.5, \n                                            min_lr=0.00001)","1c5eb881":"batch_size = 256\nepochs = 16","6ba76db1":"# creating a custom data augmentor which supports multi class output\n\nclass MultiOutputDataGenerator(keras.preprocessing.image.ImageDataGenerator):\n\n    def flow(self,\n             x,\n             y=None,\n             batch_size=256,\n             shuffle=True,\n             sample_weight=None,\n             seed=None,\n             save_to_dir= None,\n             save_prefix='',\n             save_format='png',\n             subset=None):\n\n        targets = None\n        target_lengths = {}\n        ordered_outputs = []\n        for output, target in y.items():\n            if targets is None:\n                targets = target\n            else:\n                targets = np.concatenate((targets, target), axis=1)\n            target_lengths[output] = target.shape[1]\n            ordered_outputs.append(output)\n            \n        for flowx, flowy in super().flow(x, targets, batch_size=batch_size,\n                                     shuffle=shuffle):\n            target_dict = {}\n            i = 0\n            for output in ordered_outputs:\n                target_length = target_lengths[output]\n                target_dict[output] = flowy[:, i: i + target_length]\n                i += target_length\n\n            yield flowx, target_dict","9f98f85e":"HEIGHT = 137\nWIDTH = 236\ngc.collect()","48e96fd8":"# training iteratively using loops\n\ngc.enable()\nhistories = []\nfor i in range(3):\n    \n    gc.collect()\n    len(gc.get_objects())\n    train_df_new = pd.merge(pd.read_parquet(f'\/kaggle\/input\/bengaliai-cv19\/train_image_data_{i}.parquet'), train_df.iloc[i*len(train_df)\/\/4:(i+1)*len(train_df)\/\/4], on='image_id').drop(['image_id'], axis=1)\n    \n    # Visualize few samples of current training dataset\n    fig, ax = plt.subplots(nrows=3, ncols=4, figsize=(16, 8))\n    count=0\n    for row in ax:\n        for col in row:\n            col.imshow(resize(train_df_new.drop(['grapheme_root', 'vowel_diacritic', 'consonant_diacritic'], axis=1).iloc[[count]], need_progress_bar=False).values.reshape(-1).reshape(IMG_SIZE, IMG_SIZE).astype(np.float64))\n            count += 1\n    plt.show()\n    \n    X_train = train_df_new.drop(['grapheme_root', 'vowel_diacritic', 'consonant_diacritic'], axis=1)\n    X_train = resize(X_train)\/255\n    \n    # CNN takes images in shape `(batch_size, h, w, channels)`, so reshape the images\n    X_train = X_train.values.reshape(-1, IMG_SIZE, IMG_SIZE, N_CHANNELS)\n    \n    Y_train_root = pd.get_dummies(train_df_new['grapheme_root']).values\n    Y_train_vowel = pd.get_dummies(train_df_new['vowel_diacritic']).values\n    Y_train_consonant = pd.get_dummies(train_df_new['consonant_diacritic']).values\n\n    print(f'Training images: {X_train.shape}')\n    print(f'Training labels root: {Y_train_root.shape}')\n    print(f'Training labels vowel: {Y_train_vowel.shape}')\n    print(f'Training labels consonants: {Y_train_consonant.shape}')\n\n    # Divide the data into training and validation set\n    x_train, x_test, y_train_root, y_test_root, y_train_vowel, y_test_vowel, y_train_consonant, y_test_consonant = train_test_split(X_train, Y_train_root, Y_train_vowel, Y_train_consonant, test_size=0.08, random_state=666)\n    gc.collect()\n    \n    del train_df_new\n    del X_train\n    del Y_train_root\n    del Y_train_vowel\n    del Y_train_consonant\n    len(gc.get_objects())\n    gc.collect()\n\n    # Data augmentation for creating more training data\n    datagen = MultiOutputDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=8,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.15, # Randomly zoom image \n        width_shift_range=0.15,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.15,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n        \n    # This will just calculate parameters required to augment the given data. This won't perform any augmentations\n    datagen.flow(x_train)\n\n    # Fit the model\n    history = model.fit_generator(datagen.flow(x_train, {'dense_2': y_train_root, 'dense_3': y_train_vowel, 'dense_4': y_train_consonant}, batch_size=batch_size),\n                              epochs = epochs, validation_data = (x_test, [y_test_root, y_test_vowel, y_test_consonant]), \n                              steps_per_epoch=x_train.shape[0] \/\/ batch_size, \n                              callbacks=[learning_rate_reduction_root, learning_rate_reduction_vowel, learning_rate_reduction_consonant])\n\n    histories.append(history)\n    \n    del datagen\n    gc.collect()\n    len(gc.get_objects())\n    # Delete to reduce memory usage\n    del x_train\n    del x_test\n    del y_train_root\n    del y_test_root\n    del y_train_vowel\n    del y_test_vowel\n    del y_train_consonant\n    del y_test_consonant\n   \n    gc.collect()\n    \n    ","1f4dc27a":"gc.collect()","d9f961df":"# functions for plotting losses and accuracies\n\ndef plot_loss(his, epoch, title):\n    plt.style.use('ggplot')\n    plt.figure()\n    plt.plot(np.arange(0, epoch), his.history['loss'], label='train_loss')\n    plt.plot(np.arange(0, epoch), his.history['dense_2_loss'], label='train_root_loss')\n    plt.plot(np.arange(0, epoch), his.history['dense_3_loss'], label='train_vowel_loss')\n    plt.plot(np.arange(0, epoch), his.history['dense_4_loss'], label='train_consonant_loss')\n    \n    plt.plot(np.arange(0, epoch), his.history['val_dense_2_loss'], label='val_train_root_loss')\n    plt.plot(np.arange(0, epoch), his.history['val_dense_3_loss'], label='val_train_vowel_loss')\n    plt.plot(np.arange(0, epoch), his.history['val_dense_4_loss'], label='val_train_consonant_loss')\n    \n    plt.title(title)\n    plt.xlabel('Epoch #')\n    plt.ylabel('Loss')\n    plt.legend(loc='upper right')\n    plt.show()\n\ndef plot_acc(his, epoch, title):\n    plt.style.use('ggplot')\n    plt.figure()\n    plt.plot(np.arange(0, epoch), his.history['dense_2_accuracy'], label='train_root_acc')\n    plt.plot(np.arange(0, epoch), his.history['dense_3_accuracy'], label='train_vowel_accuracy')\n    plt.plot(np.arange(0, epoch), his.history['dense_4_accuracy'], label='train_consonant_accuracy')\n    \n    plt.plot(np.arange(0, epoch), his.history['val_dense_2_accuracy'], label='val_root_acc')\n    plt.plot(np.arange(0, epoch), his.history['val_dense_3_accuracy'], label='val_vowel_accuracy')\n    plt.plot(np.arange(0, epoch), his.history['val_dense_4_accuracy'], label='val_consonant_accuracy')\n    plt.title(title)\n    plt.xlabel('Epoch #')\n    plt.ylabel('Accuracy')\n    plt.legend(loc='upper right')\n    plt.show()","a0708891":"# plotting graphs for all four sets\nfor i in range(3):\n    plot_loss(histories[i], epochs, f'Training Dataset: {i}')\n    plot_acc(histories[i], epochs, f'Training Dataset: {i}')\n    \ndel histories\ngc.collect()\nlen(gc.get_objects())","fdcc207f":"model.save('bengalimodal.h5')","6d542f78":"# At this stage various analysis can be made\n1. in every cases some labels are predominant have a large no. while some are relatively small\n2. To solve this, a custom data augmentor needs to be created for multi label outputs","f0eb0be1":" *now uses opencv thresholding technique to centre crop the train data, taking references from some kernels","f7f467d8":"# MODEL BUILDING AND TRAINING","963c112a":"*train data need to be processed iteratively and deleted at regulat intervals due to huge data*"}}