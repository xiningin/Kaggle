{"cell_type":{"d13eb7e4":"code","b0f24565":"code","d74b322e":"code","0e94a22b":"code","ce052279":"code","8807524f":"code","3a314f03":"code","c68a1fe8":"code","94f5c879":"code","b7c49a80":"code","6baa90c7":"code","59004fd5":"code","c3d5d397":"code","b4fc3cb8":"code","4a8fc25f":"code","e54d3b56":"code","880db0e7":"code","f81dd987":"code","9165193b":"code","d8cf5d54":"code","679581e6":"code","85da2e6d":"code","c567b3ae":"code","432bbfe1":"code","f6a00eca":"code","c80623dc":"code","2edb4ecd":"code","5efeb4ec":"code","a39986c6":"code","1f5ebc8d":"code","79fe5368":"code","e1fddfc3":"markdown","fb5d86ac":"markdown","8fb35c5a":"markdown","8b5c7522":"markdown","f20c4895":"markdown","7732294a":"markdown","003c28cb":"markdown","ad1d22b0":"markdown","67467f4a":"markdown","fbe540da":"markdown","f3f67029":"markdown","55dc71ef":"markdown","ce422768":"markdown","18581736":"markdown","4701a8b6":"markdown","a3924e03":"markdown","20d0685b":"markdown","059f579f":"markdown"},"source":{"d13eb7e4":"# Common Packages\nimport pandas as pd\nimport numpy as np\n\n# plot and visulization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot\n\n# ML Models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nimport xgboost as xgb\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Metrics \nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score","b0f24565":"df = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')\n\nprint(\"Number of rows in data : {}\".format(df.shape[0]))\nprint(\"Number of columns in data :{}\".format(df.shape[1]))","d74b322e":"df.head()","0e94a22b":"df.info()","ce052279":"# Statistical properties\ndf.describe().round(3)","8807524f":"# Change the names of the columns for better understanding\ndf.columns = ['age', 'sex', 'chest_pain_type', 'resting_blood_pressure', 'cholesterol', 'fasting_blood_sugar', 'rest_ecg', 'max_heart_rate_achieved',\n       'exercise_induced_angina', 'st_depression', 'st_slope', 'num_major_vessels', 'thalassemia', 'target']\n\ndf.columns","3a314f03":"df.head()","c68a1fe8":"plt.rcParams['figure.figsize'] = (10, 10)\nplt.style.use('ggplot')\n\nsns.heatmap(df.corr(), annot = True, cmap = 'rocket_r')\nplt.title('Heatmap for the Dataset', fontsize = 20)\nplt.show()","94f5c879":"print(f\"Minimum Age : {min(df.age)} years\")\nprint(f\"Maximum Age : {max(df.age)} years\")","b7c49a80":"\nhist_data = [df['age']]\ngroup_labels = ['age'] \n\ncolors = ['#835AF1']\n\n# Create distplot with curve_type set to 'normal'\nfig = ff.create_distplot(hist_data, group_labels=group_labels, colors=colors,\n                         bin_size=10, show_rug=False)\n\n# Add title\nfig.update_layout(width=700, title_text='Age Distribution')\nfig.show()","6baa90c7":"categorical_cols = ['sex','chest_pain_type','fasting_blood_sugar','rest_ecg','exercise_induced_angina','st_slope','num_major_vessels','thalassemia']\nnumeric_cols = ['age', 'resting_blood_pressure', 'cholesterol', 'max_heart_rate_achieved', 'st_depression']","59004fd5":"multi_label_cols = [i for i in categorical_cols if df[i].nunique()>2]\nmulti_label_cols","c3d5d397":"# Lets normalize the numerical_cols\nfrom sklearn.preprocessing import StandardScaler\nstd = StandardScaler()\ndf[numeric_cols] = std.fit_transform(df[numeric_cols])","b4fc3cb8":"df.head()","4a8fc25f":"# Catgorical Encoding\ndf = pd.get_dummies(data = df,columns = multi_label_cols)","e54d3b56":"df.head()","880db0e7":"x = df.drop(['target'],axis=1) \ny = df['target']","f81dd987":"from sklearn.model_selection import train_test_split\n\n# Train = 70 % Test= 30 %\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 0)","9165193b":"print(\"Shape of x_train : {}\".format(x_train.shape))\nprint(\"Shape of x_test : {}\".format(x_test.shape))\nprint(\"Shape of y_train :{}\".format(y_train.shape))\nprint(\"Shape of y_test :{}\".format(y_test.shape))","d8cf5d54":"lr = LogisticRegression()\n\n# Model fit\nlr.fit(x_train, y_train)\n\ny_pred_prob = lr.predict_proba(x_test)[:, 1]\ny_pred = lr.predict(x_test)\n\n\n# AUC Score\nauc = roc_auc_score(y_test, y_pred_prob)\n\n# evaluating the model\nprint(\"Training Accuracy :{}\".format(lr.score(x_train, y_train)))\nprint(\"Testing Accuracy :{}\".format(lr.score(x_test, y_test)))\nprint(\"AUC Score :{}\".format(auc))","679581e6":"# cofusion matrix\ncm = confusion_matrix(y_test, y_pred)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')\n\n# classification report\ncr = classification_report(y_test, y_pred)\nprint(cr)","85da2e6d":"total=sum(sum(cm))\n\nsensitivity = cm[0,0]\/(cm[0,0]+cm[1,0])\nprint('Sensitivity : ', sensitivity )\n\nspecificity = cm[1,1]\/(cm[1,1]+cm[0,1])\nprint('Specificity : ', specificity)","c567b3ae":"fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\n\nfig, ax = plt.subplots()\nax.plot(fpr, tpr)\nax.plot([0, 1], [0, 1], transform=ax.transAxes, ls=\"-\", c=\".3\")\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\n\nplt.rcParams['figure.figsize'] = (15, 5)\nplt.title('ROC curve for diabetes classifier', fontweight = 30)\nplt.xlabel('False Positive Rate (1 - Specificity)')\nplt.ylabel('True Positive Rate (Sensitivity)')\nplt.show()","432bbfe1":"rf = RandomForestClassifier(n_estimators=100, max_depth=5)\nrf.fit(x_train, y_train)\ny_pred_prob = rf.predict_proba(x_test)[:, 1]\ny_pred = rf.predict(x_test)\n\n# AUC Score\nauc = roc_auc_score(y_test, y_pred_prob)\n\n# evaluating the model\nprint(\"Training Accuracy :{}\".format(rf.score(x_train, y_train)))\nprint(\"Testing Accuracy :{}\".format(rf.score(x_test, y_test)))\nprint(\"AUC Score :{}\".format(auc))","f6a00eca":"# cofusion matrix\ncm = confusion_matrix(y_test, y_pred)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')\n\n# classification report\ncr = classification_report(y_test, y_pred)\nprint(cr)","c80623dc":"total=sum(sum(cm))\n\nsensitivity = cm[0,0]\/(cm[0,0]+cm[1,0])\nprint('Sensitivity : ', sensitivity )\n\nspecificity = cm[1,1]\/(cm[1,1]+cm[0,1])\nprint('Specificity : ', specificity)","2edb4ecd":"fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\n\nfig, ax = plt.subplots()\nax.plot(fpr, tpr)\nax.plot([0, 1], [0, 1], transform=ax.transAxes, ls=\"-\", c=\".3\")\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\n\nplt.rcParams['figure.figsize'] = (15, 5)\nplt.title('ROC curve for diabetes classifier', fontweight = 30)\nplt.xlabel('False Positive Rate (1 - Specificity)')\nplt.ylabel('True Positive Rate (Sensitivity)')\nplt.show()","5efeb4ec":"# Random forest model\nimport eli5 #for purmutation importance\nfrom eli5.sklearn import PermutationImportance\n\nperm = PermutationImportance(rf, random_state=1).fit(x_test, y_test)\neli5.show_weights(perm, feature_names = x_test.columns.tolist())","a39986c6":"import pickle\n\n# Save a model to  pickle file\nPkl_Filename = \"Pickle_lr_Model.pkl\"\nwith open(Pkl_Filename, 'wb') as file:  \n    pickle.dump(lr, file)","1f5ebc8d":"with open(Pkl_Filename, 'rb') as file:  \n    Pickled_LR_Model = pickle.load(file)\n\nPickled_LR_Model","79fe5368":"# Use the Reloaded Model to \n# Calculate the accuracy score and predict target values\n\n# Calculate the Score \nscore = Pickled_LR_Model.score(x_test, y_test)  \n# Print the Score\nprint(\"Test score: {0:.2f} %\".format(100 * score))  \n\n# Predict the Labels using the reloaded Model\nYpredict = Pickled_LR_Model.predict(x_test)  \n\nYpredict","e1fddfc3":"### Cross Validation","fb5d86ac":"## Permutation importance","8fb35c5a":"### Import everything important","8b5c7522":"## Save and Verify","f20c4895":"#### this looks better!","7732294a":"## Feature Engineering","003c28cb":"> #### So, We have 302 samples and 14 features","ad1d22b0":"#### No null values which is very good. No need to clean a data ","67467f4a":"# Heart Diseases Analysis - My first Kaggle work","fbe540da":"The Heat Maps shows that almost all features in the dataset are very less correlated with each other and this implies we must include all of the features.","f3f67029":"### Dataset","55dc71ef":"### Correlation Plot","ce422768":"Normal distribution!","18581736":"### Logistic regression","4701a8b6":"## Models","a3924e03":"## EDA","20d0685b":"#### Basic Understanding of features\n* age - Age in Years \n* sex - [ Male = 1, Female = 0]\n* cp  - Chest pain type\n  * typical angina = 0\n  * atypical angina = 1\n  * non-anginal pain = 2\n  * asymptomatic = 3\n* trestbps - Resting blood pressure (in mm Hg on admission to the hospital)\n* chol     - Cholesterol measurement in mg\/dl\n* fbs      - Fasting blood sugar > 120 mg\/dl\n    * true  = 1\n    * false = 0\n* restecg -  Resting electrocardiographic measurement\n    * Normal = 0\n    * Having ST-T wave abnormality = 1\n    * Definite left ventricular hypertrophy = 2\n* thalach - Maximum heart rate achieved\n* exang   - Exercise induced angina\n    * Yes - 1\n    * No  - 0\n* oldpeak - ST depression induced by exercise relative to rest\n* slope   - The slope of the peak exercise ST segment\n* ca      -  Number of major vessels (0-3) colored by flourosopy\n* thal    - A blood disorder called thalassemia\n    * Normal = 3\n    * Fixed Defect = 6\n    * Reversable Defect = 7\n* target \n    * Heart Disease Yes = 1\n    * No = 0","059f579f":"## Random Forest"}}