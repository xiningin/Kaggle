{"cell_type":{"dde0f311":"code","2695fd9b":"code","7ff00950":"code","e04b42cb":"code","91635f3e":"code","45dd781e":"code","75fe3f85":"code","079fd519":"code","4006f97d":"code","6d31450d":"code","5b1161a5":"code","38a19c7b":"code","3ab6e16b":"code","8bccfbb6":"code","a12c5932":"code","9c8dc68c":"code","633f617c":"code","ae7177f6":"code","ec25d78b":"code","a5a2c2ba":"code","2238447e":"code","0a9701a3":"code","0f1f6b9d":"code","0b2d673c":"code","328fc780":"code","58909668":"code","3fa4b323":"code","36e8f023":"code","813c64ae":"code","36d411de":"code","95e66e17":"code","099e3907":"code","a0d40351":"code","a5f47847":"code","1f9b44d2":"code","e6fdc8d1":"code","c2a32398":"code","bbf62302":"code","91384382":"code","d1b81fd9":"code","f34d41b5":"code","2f161123":"code","87320bd1":"code","5c73d724":"code","bf167742":"code","9111cb74":"code","d8f08915":"code","c1d2ecb9":"code","0f4c9940":"code","d3632ac1":"code","9a7b707a":"code","e5d4c6a9":"code","4e9d74ce":"code","fd2befe9":"code","c5880f0f":"code","d7100808":"code","1dab0902":"code","f04109cf":"code","72ab30cf":"code","81a70faf":"code","37dc5d4b":"code","aca0d9fe":"code","c5fc1cc0":"code","0024d3eb":"code","17e3edfb":"code","2aa6c1e1":"code","bd63ab51":"code","9dba17e0":"code","f71c31d7":"code","887d6543":"code","069c44f0":"code","dafd89ac":"code","a5511f2d":"code","4bc9077d":"code","3e54ee8c":"code","e9b197ff":"code","f2f36f05":"code","6c85d996":"code","798d0819":"code","ef55cb3f":"code","fcc67cd3":"code","eb375c7d":"code","2c4478d6":"code","a0902e7b":"code","6842eb28":"code","f5e82396":"markdown","39796a07":"markdown","2b452456":"markdown","89f2036a":"markdown","3621e301":"markdown","27b2b65c":"markdown","0ed12bdf":"markdown","7ed86abf":"markdown","3162ed05":"markdown","c5fa58aa":"markdown","be1df96a":"markdown","e0b99c08":"markdown","f53e96cd":"markdown","882c18af":"markdown","1dec952c":"markdown","f09fbc0a":"markdown","319d11e9":"markdown","98873169":"markdown","efcafd1a":"markdown","be9e1b60":"markdown","c509ec18":"markdown","a38ff799":"markdown","d81a30e4":"markdown","70499bb5":"markdown","51947a45":"markdown","693878fd":"markdown","b9f688c4":"markdown","31e6ef4b":"markdown","9044c26c":"markdown","13fdc6c8":"markdown","6dd5b124":"markdown","bdebcc62":"markdown","0ccc91d5":"markdown","58a6ef6d":"markdown","2bec2b58":"markdown","26f488ba":"markdown","c8c1d5fa":"markdown","56e4a1e2":"markdown","53c65f4b":"markdown","99ba7d0c":"markdown","a13b07ab":"markdown","3ac9ee56":"markdown","56fea73f":"markdown","91d61cba":"markdown","10058f3c":"markdown","6653beab":"markdown","53f5becb":"markdown","b7bdaed5":"markdown","31ea5727":"markdown"},"source":{"dde0f311":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2695fd9b":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as stats\nfrom ast import literal_eval\nfrom sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel, cosine_similarity\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.corpus import wordnet\nfrom surprise import Reader,Dataset,SVD\n\npd.pandas.set_option('display.max_columns',None)\n","7ff00950":"md = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/movies_metadata.csv')\nmd.head()","e04b42cb":"md['genres'] = md['genres'].fillna('[]').apply(literal_eval).apply(lambda x: [i['name'] for i in x]if isinstance(x,list) else [])","91635f3e":"md['vote_count']","45dd781e":"vote_count= md[md['vote_count'].notnull()]['vote_count'].astype('int')\nvote_averages = md[md['vote_average'].notnull()]['vote_average'].astype('int')\nC = vote_averages.mean()\nC","75fe3f85":"m = vote_count.quantile(0.95)\nm","079fd519":"md['release_date']","4006f97d":"pd.to_datetime(md['release_date'], errors='coerce')","6d31450d":"md['year'] = pd.to_datetime(md['release_date'], errors='coerce').apply(lambda x: str(x).split('-')[0] if x != np.nan else np.nan)","5b1161a5":"qualified = md[(md['vote_count'] >= m) & (md['vote_count'].notnull()) & (md['vote_average'].notnull())][['title', 'year', 'vote_count', 'vote_average', 'popularity', 'genres']]\nqualified['vote_count'] = qualified['vote_count'].astype('int')\nqualified['vote_average'] = qualified['vote_average'].astype('int')\nqualified.shape","38a19c7b":"def weig_rat(x):\n    v = x['vote_count']\n    R = x['vote_average']\n    return (v\/(v+m)*R) + (m\/(m+v)*C)","3ab6e16b":"qualified['wr'] = qualified.apply(weig_rat,axis = 1)","8bccfbb6":"qualified.head()","a12c5932":"qualified = qualified.sort_values('wr',ascending=False).head(250)","9c8dc68c":"qualified.head(15)","633f617c":"s = md.apply(lambda x: pd.Series(x['genres']),axis=1).stack().reset_index(level=1, drop=True)","ae7177f6":"s.name = 'genre'\ngen_md = md.drop('genres', axis=1).join(s)","ec25d78b":"gen_md","a5a2c2ba":"def top_movie(genre,n_precentile =.85):\n    df = gen_md[gen_md['genre'] == genre]\n    vote_count = df[df['vote_count'].notnull()]['vote_count'].astype('int')\n    vote_avg = df[df['vote_average'].notnull()]['vote_average'].astype('int')\n    C = vote_avg.mean()\n    m = vote_count.quantile(n_precentile)\n    qualified = df[(df['vote_count']>= m) & (df['vote_count'].notnull()) & (df['vote_average'].notnull())][['title', 'year', 'vote_count', 'vote_average', 'popularity']]\n    qualified['vote_count'] = qualified['vote_count'].astype('int')\n    qualified['vote_average'] = qualified['vote_average'].astype('int')\n    qualified['wr'] = qualified.apply(lambda x: (x['vote_count']\/(x['vote_count']+m)*x['vote_average'])+(m\/(m+x['vote_count'])*C),axis = 1)\n    qualified = qualified.sort_values('wr',ascending =False).head(250)\n    return qualified\n    ","2238447e":"top_movie('Action')","0a9701a3":"link_small = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/links_small.csv')\nlink_small.head()","0f1f6b9d":"print(link_small['tmdbId'].isnull().sum())\nprint(link_small.info())","0b2d673c":"link_small = link_small[link_small['tmdbId'].notnull()]['tmdbId'].astype('int')\nlink_small.head()","328fc780":"md.isnull().sum()","58909668":"md['id']","3fa4b323":"md = md.drop([19730, 29503, 35587])","36e8f023":"md['id'] = md['id'].astype('int')","813c64ae":"smd = md[md['id'].isin(link_small)]\nsmd.shape","36d411de":"smd['tagline'] = smd['tagline'].fillna('')","95e66e17":"smd['description'] = smd['overview'] + smd['tagline']\n","099e3907":"smd['description'] = smd['description'].fillna('')","a0d40351":"from sklearn.feature_extraction.text import TfidfVectorizer\n\ntf = TfidfVectorizer(analyzer='word',ngram_range=(1,2),min_df=0,stop_words='english')\ntfid_mat = tf.fit_transform(smd['description'])","a5f47847":"cos_sim = linear_kernel(tfid_mat,tfid_mat)","1f9b44d2":"len(cos_sim[0])","e6fdc8d1":"smd = smd.reset_index()","c2a32398":"titles = smd['title']","bbf62302":"indices = pd.Series(smd.index,index=smd['title'])\nindices","91384382":"idx = indices['The Dark Knight']","d1b81fd9":"sim_scores = list(enumerate(cos_sim[idx]))\nsim_scores[:5]","f34d41b5":"sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True) #sorting the movies based on the max similarity score\nsim_scores = sim_scores[1:31]\nmovie_indices = [i[0] for i in sim_scores]#getting the similarity score of the movies based on movie 'the dark night raises'\nprint(titles.iloc[movie_indices])","2f161123":"def get_recommendations(title):\n    idx = indices[title]#Gettting the index of the movie\n    sim_scores = list(enumerate(cos_sim[idx])) #finding the cos similarity of the movie using it index and enumarating the similarity\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True) #sorting the movie based on the similarity score \n    sim_scores = sim_scores[1:31] # taking first 30 movies\n    movie_indices = [i[0] for i in sim_scores] # taking the sorted movies \n    return titles.iloc[movie_indices]","87320bd1":"get_recommendations('The Godfather').head(10)","5c73d724":"get_recommendations('The Dark Knight').head(10)","bf167742":"credits = pd.read_csv('..\/input\/the-movies-dataset\/credits.csv')\nkeyword = pd.read_csv('..\/input\/the-movies-dataset\/keywords.csv')","9111cb74":"pd.set_option('max_colwidth',60)\ncredits['cast'][0:1][0]","d8f08915":"keyword['id'] = keyword['id'].astype('int')\ncredits['id'] = credits['id'].astype('int')\nmd['id'] = md['id'].astype('int')","c1d2ecb9":"md = md.merge(keyword,on='id')\n","0f4c9940":"md = md.merge(credits,on='id')\n","d3632ac1":"smd = md[md['id'].isin(link_small)]\nsmd","9a7b707a":"smd['cast'] = smd['cast'].apply(literal_eval)\nsmd['crew'] = smd['crew'].apply(literal_eval)\nsmd['keywords'] = smd['keywords'].apply(literal_eval)\nsmd['cast_size'] = smd['cast'].apply(lambda x: len(x))\nsmd['crew_size'] = smd['crew'].apply(lambda x: len(x))\n","e5d4c6a9":"print(smd['cast'][0:1][0])# first row cast details\nprint(len(smd['cast'][0:1][0])) #length  of the first row cast\n\n","4e9d74ce":"def direct(na):\n    for i in na:\n        if i['job'] == 'Director':\n            return i['name']\n    return np.nan","fd2befe9":"smd['directors'] = smd['crew'].apply(direct)","c5880f0f":"smd['cast']","d7100808":"smd['cast'] = smd['cast'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])\nsmd['cast'] = smd['cast'].apply(lambda x: x[:3] if len(x) >=3 else x)","1dab0902":"smd['cast']","f04109cf":"smd['keywords'] = smd['keywords'].apply(lambda x: [ i['name'] for i in x] if isinstance(x,list) else [])","72ab30cf":"smd['keywords']","81a70faf":"smd['cast'] = smd['cast'].apply(lambda x: [str.lower(i.replace(\" \",\"\")) for i in x])","37dc5d4b":"smd['cast']","aca0d9fe":"smd.info()","c5fc1cc0":"smd['directors'] = smd['directors'].astype('str').apply(lambda x: str.lower(x.replace(\" \",\"\")))","0024d3eb":"smd['directors'] =smd['directors'].apply(lambda x: [x,x, x])","17e3edfb":"smd['directors'][0]","2aa6c1e1":"s = smd.apply(lambda x: pd.Series(x['keywords']),axis=1).stack().reset_index(level =1,drop = True)\ns.name = 'keyword'","bd63ab51":"s = s.value_counts()\ns = s[s>1]","9dba17e0":"\ndef keywords(x):\n    m = []\n    for i in x:\n        if i in s:\n            m.append(i)\n    return m","f71c31d7":"stemmer = SnowballStemmer('english')\nstemmer.stem('catching')","887d6543":"smd['keywords'] = smd['keywords'].apply(keywords)\nsmd['keywords'] = smd['keywords'].apply(lambda x: [stemmer.stem(i) for i in x])\nsmd['keywords'] = smd['keywords'].apply(lambda x: [str.lower(i.replace(\" \",\"\")) for i in x])\nsmd['keywords']","069c44f0":"smd['soup'] = smd['keywords'] + smd['cast'] + smd['directors'] + smd['genres']\nsmd['soup'][0]","dafd89ac":"smd['soup'] = smd['soup'].apply(lambda x: \" \".join(x))","a5511f2d":"smd['soup']","4bc9077d":"count = CountVectorizer(analyzer='word',ngram_range=(1,2),min_df=0,stop_words='english')\ncount_mat = count.fit_transform(smd['soup'])","3e54ee8c":"cos_sim=cosine_similarity(count_mat,count_mat)","e9b197ff":"smd = smd.reset_index()\ntitles = smd['title']\nindices = pd.Series(smd.index,index=smd['title'])\nindices","f2f36f05":"get_recommendations('The Dark Knight').head(10)","6c85d996":"get_recommendations('Mean Girls').head(10)","798d0819":"idx = indices['The Dark Knight']","ef55cb3f":"sim_score = list(enumerate(cos_sim[idx]))","fcc67cd3":"sim_score = sorted(sim_score,key= lambda x: x[1],reverse=True)","eb375c7d":"sim_score = sim_score[1:20]\nmovie_ind = [i[0] for i in sim_score]\nmovi = smd.iloc[movie_ind][['title','vote_average','vote_count','year']]\nvote_count = movi[movi['vote_count'].notnull()]['vote_count'].astype('int')\nvote_ava = movi[movi['vote_average'].notnull()]['vote_average'].astype('int')\n","2c4478d6":"c = vote_ava.mean()\nm = vote_count.quantile(0.60)\nquantifi = movi[(movi['vote_count']>= m) & (movi['vote_count'].notnull()) & (movi['vote_average'].notnull())]\nquantifi['vote_count'] = quantifi['vote_count'].astype('int')\nquantifi['vote_average'] = quantifi['vote_average'].astype('int')\nquantifi['wr'] =  quantifi.apply(weig_rat, axis=1)\nquantifi =quantifi.sort_values('wr', ascending=False).head(10)\nprint(quantifi)","a0902e7b":"def final_reco(movi):\n    idx = indices[movi]\n    sim_score = list(enumerate(cos_sim[idx]))\n    sim_score = sorted(sim_score,key= lambda x: x[1],reverse=True)\n    sim_score = sim_score[1:20]\n    movie_ind = [i[0] for i in sim_score]\n    movi = smd.iloc[movie_ind][['title','vote_average','vote_count','year']]\n    vote_count = movi[movi['vote_count'].notnull()]['vote_count'].astype('int')\n    vote_ava = movi[movi['vote_average'].notnull()]['vote_average'].astype('int')\n    c = vote_ava.mean()\n    m = vote_count.quantile(0.60)\n    quantifi = movi[(movi['vote_count']>= m) & (movi['vote_count'].notnull()) & (movi['vote_average'].notnull())]\n    quantifi['vote_count'] = quantifi['vote_count'].astype('int')\n    quantifi['vote_average'] = quantifi['vote_average'].astype('int')\n    quantifi['wr'] =  quantifi.apply(weig_rat, axis=1)\n    quantifi =quantifi.sort_values('wr', ascending=False).head(10)\n    return quantifi","6842eb28":"print(final_reco('Mean Girls'))","f5e82396":"creating the new dataset containing the votecount graeter then the 95% percentile votecount ignoring the null values both from  vote_count and vote_average. and changing the type as int\n\n\nwe can see the vote count of the movie must be above 434, and the avarage rating will be 5.244896612406511","39796a07":"Changind the data type as Int","2b452456":"from the above we can see that we are making directors into three stacked list inorder to match the crew members","89f2036a":"Droping worngly indexed row found by feature analysis","3621e301":"Similarly as we did recommendation based on description we will be using metadata features like crew, directors, cast and combaining all the data then doing count vectorisation. ","27b2b65c":"From the above we can able to see that when we give the dark night it gives all the batman movies . where it found the similarity based on discription and taglines. This recomendation are good when we want a sequel of the movie. but suppose if the movie doesn't have any sequel then we have to recommend movies based on other criteria like cast,crew,and geners and keywords.","0ed12bdf":"we will use Cosine similarity to find the similarity between the movies. such that cosine similarity is understood by ploting the data in the x y plot,where x and y are the each document tfid values. since the dot product of the cosine similarity is alredy found we will use\nlinear_kernal to find the similarity","7ed86abf":"We can see that inception dark knight are having higher weighted rating which are christopher nolan film","3162ed05":"from the above literal_eval library is used to evaluate non string data types in a list. therefore it consider the list of dictionary which helps us to count the length of the cast","c5fa58aa":"From the above we can see that Batman: Under the Red Hood is similar to Darknight Raises because of the similar characters in both films. But Batman: Under the Red Hood is not a good movie. when commpared to other Batman Movies. lets work on this detailings","be1df96a":"now we will use get recommendation with updated cosine similarity","e0b99c08":"In the above we are taking the notnull values alone and changeing the data type as 'int'","f53e96cd":"we can see using tag line we can work out some combinations","882c18af":"We have 9099 movies got by modeling the dataset or joining the table which is 5 times smaller than original dataset","1dec952c":"from the above we can see that we are droping the geners and concatinating the stacked seperated geners and get assingned to the sepecific movies","f09fbc0a":"merging the keword dataset to md dataset based on its ID","319d11e9":"Weighted Rating (WR) =  (vv+m.R)+(mv+m.C) \nwhere,\n\nv is the number of votes for the movie\nm is the minimum votes required to be listed in the chart\nR is the average rating of the movie\nC is the mean vote across the whole report\n\nvalue of m is determined by taking 95th percentile as the cutoff. i.e we are taking movies having more votes than 95%","98873169":"thus encoding the descrption in TFid matrix","efcafd1a":"here analyzer indicates what to be analysed in the document like word, number,characters\n\nngram_range is to specify the grouping in the tfid vectoriser (1,2) indicates group the letters in unigram and bigram. where if you consider a document 'i am studying NLP' for bigram this will group as 'i am' 'am studying' 'studying NLP'","be9e1b60":"here we are taking the genres column and making it as a series the stack() Function will make the list of geners for movie as a stack and having the same index for the geners of the specific movie","c509ec18":"getting the index of the movie we need","a38ff799":"enumarating the cosine similarity of all the movies based on the dark night raises to match the index","d81a30e4":"#### Movie Discription Based Recommender\n\n\n\n","70499bb5":"### now creating a function","51947a45":"we combined overview and tagline to encode and find some similarity ","693878fd":"function to get the most importtant keywords and removing rest","b9f688c4":"Above shows that for 95th Percentile the votecount of the movies must be above 434 and those movies are taken for consideration","31e6ef4b":"we use literal_eval to find the dictionary,list or tuple kind  of datas. which will evaluate the list data as single data. because of this we can able to find the length of dic inside  the list.     ","9044c26c":"from ast import literal_eval is used to evaluate the python literals like float,int,string etc.\neg: code = \"\"\"(1, 2, {'foo': 'bar'})\"\"\" can be evaluated as Tuple when passed through the literal_eval object \n","13fdc6c8":"The above will get the year from the release_date, to_datetime will convert the pandas datetime to datafram ","6dd5b124":"merging the credits dataset to md dataset based on its ID","bdebcc62":"let's sort the values in decending order","0ccc91d5":"We have already calculated the weighted rating for the entire genres  columns for the movie having the vote count above 95% precentile. from that we found the most good rated movies. similarly  since we seperated the movies in tearm of genres we are going to create a function which finds the top rated movie based on specific genres. and we are going to take 85% as the criticle value of vote count. so the movies above 85% of vote count of total vote count wiill be selected.","58a6ef6d":"combining all the key words directors,geners,cast,crew etc to get a list of words","2bec2b58":"from the above we can see that each record created alist of values containing their similarity","26f488ba":"using TFid vectoriser to encode the description","c8c1d5fa":"taking th character names alone and making it as cast then taking first three cast members","56e4a1e2":"from the above we can be satisfied since the system recognise the Chistopher Nolan Movies. we can also experiment on this engine by giving more weights to Directors, cast,geners. by reducing the importance or weightage given to the Keywords by limiting the keywords.weighing geners based on their freaquency","53c65f4b":"we made the title as index and index as values so that we can match the index of cosine similarity with the title.","99ba7d0c":"### Content Based Recommender\n\nAs of above, we have created simple recommender system where we can get the movies recommended based on the ratings and based on the genre. But with this recommendation system we cannot able to recommend a movie based on personal choice.\n\nfor example if you consider Inception the Darknight are the movie by cristopher nolan from this we can make a assumption that the person Like Cristopher nolan movies.But he can only see the action movies. where most of them were made by differnt directors and not by cristopher nolan\n\nTo personalise this recommendation we need some more features to form a certain metric to recommend the movie\n\nwe are going to build two content based system\n\n> Movie Overviews and Taglines\n\n> Movie Cast, Crew, Keywords and Genre","a13b07ab":"taking the most important keywords corpus sepeartely and removing records having less keywords","3ac9ee56":"we have 13 null values removing those and changing tmdbId to int64","56fea73f":"above is the example of stemming","91d61cba":"TMBD Rating is used for Top Movie rating. we will be using IMDB Weighted Rating to construct the chart","10058f3c":"taking the director name from the data set ","6653beab":"by printing we would get the movies similar to dark night raises based on the tagline and discription","53f5becb":"**Simmple Recomender**\n\nIn this we are going to recommend movies based on the gener and rating or popularity of movie watched by most people ","b7bdaed5":"From the above we are taking out the genres values from the dictionary such that the name from the data alone is picked up and made into list. here literal_eval will evaluate the list we gave in the fillna and will apply the same.","31ea5727":"now we can create a funtion such that it accepts the argument of differnt movie and go thorught  the  series of pipeline to get the resullt"}}