{"cell_type":{"cb3df1ab":"code","306a8c60":"code","f46fd97a":"code","59d89ad1":"code","fde34f58":"code","076fbd1c":"code","38eea943":"code","03fee868":"code","2c9fc41c":"code","803872ac":"code","97279fbd":"code","6ba55650":"code","df1da99b":"code","39e98ab0":"code","a16fb37b":"code","62179fc3":"code","4d919467":"code","5af5708d":"code","7362ac45":"code","32b8f860":"code","4796a0ad":"code","cb544df0":"code","5a0acb5a":"code","5798ad2d":"code","62e91c57":"code","506de884":"markdown","46529795":"markdown","3d84526d":"markdown","8297ff39":"markdown","85813b54":"markdown","105c889a":"markdown","977d5775":"markdown","f43a16a3":"markdown","d76178ec":"markdown","f1ccdeab":"markdown","5bf8a4b4":"markdown","a94d6b54":"markdown","1b526fb6":"markdown","51c5c355":"markdown","03d5697b":"markdown","ed967c7a":"markdown","b969df1b":"markdown","4efb7aec":"markdown"},"source":{"cb3df1ab":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nimport pandas as pd\nimport numpy as np\nfrom itertools import cycle, islice\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import parallel_coordinates\n\n%matplotlib inline","306a8c60":"data = pd.read_csv('..\/input\/minute_weather.csv')","f46fd97a":"data.shape","59d89ad1":"data.head()","fde34f58":"sampled_df = data[(data['rowID'] % 10) == 0]\nsampled_df.shape","076fbd1c":"sampled_df.describe().transpose()","38eea943":"sampled_df[sampled_df['rain_accumulation'] == 0].shape","03fee868":"sampled_df[sampled_df['rain_duration'] == 0].shape","2c9fc41c":"del sampled_df['rain_accumulation']\ndel sampled_df['rain_duration']","803872ac":"rows_before = sampled_df.shape[0]\nsampled_df = sampled_df.dropna()\nrows_after = sampled_df.shape[0]","97279fbd":"rows_before - rows_after","6ba55650":"sampled_df.columns","df1da99b":"features = ['air_pressure', 'air_temp', 'avg_wind_direction', 'avg_wind_speed', 'max_wind_direction', \n        'max_wind_speed','relative_humidity']","39e98ab0":"select_df = sampled_df[features]","a16fb37b":"select_df.columns","62179fc3":"select_df","4d919467":"X = StandardScaler().fit_transform(select_df)\nX","5af5708d":"kmeans = KMeans(n_clusters=12)\nmodel = kmeans.fit(X)\nprint(\"model\\n\", model)","7362ac45":"centers = model.cluster_centers_\ncenters","32b8f860":"# Function that creates a DataFrame with a column for Cluster Number\n\ndef pd_centers(featuresUsed, centers):\n\tcolNames = list(featuresUsed)\n\tcolNames.append('prediction')\n\n\t# Zip with a column called 'prediction' (index)\n\tZ = [np.append(A, index) for index, A in enumerate(centers)]\n\n\t# Convert to pandas data frame for plotting\n\tP = pd.DataFrame(Z, columns=colNames)\n\tP['prediction'] = P['prediction'].astype(int)\n\treturn P","4796a0ad":"# Function that creates Parallel Plots\n\ndef parallel_plot(data):\n\tmy_colors = list(islice(cycle(['b', 'r', 'g', 'y', 'k']), None, len(data)))\n\tplt.figure(figsize=(15,8)).gca().axes.set_ylim([-3,+3])\n\tparallel_coordinates(data, 'prediction', color = my_colors, marker='o')","cb544df0":"P = pd_centers(features, centers)\nP","5a0acb5a":"parallel_plot(P[P['relative_humidity'] < -0.5])","5798ad2d":"parallel_plot(P[P['air_temp'] > 0.5])","62e91c57":"parallel_plot(P[(P['relative_humidity'] > 0.5) & (P['air_temp'] < 0.5)])","506de884":"<p style=\"font-family: Arial; font-size:1.75em;color:purple; font-style:bold\"><br>\n\nScale the Features using StandardScaler\n<br><br><\/p>\n","46529795":"Let us first create some utility functions which will help us in plotting graphs:","3d84526d":"# Cool Days","8297ff39":"<p style=\"font-family: Arial; font-size:1.75em;color:purple; font-style:bold\"><br>\n\nUse k-Means Clustering\n<br><br><\/p>\n","85813b54":"In this notebook, we will learn how to perform k-means lustering using scikit-learn in Python. \n\nWe will use cluster analysis to generate a big picture model of the weather at a local station using a minute-graunlarity data. In this dataset, we have in the order of millions records. How do we create 12 clusters our of them?\n","105c889a":"<p style=\"font-family: Arial; font-size:2.75em;color:purple; font-style:bold\"><br>\n\nPlots\n<br><br><\/p>\n","977d5775":"<p style=\"font-family: Arial; font-size:1.75em;color:purple; font-style:bold\"><br>\n\nStatistics\n<br><br><\/p>\n","f43a16a3":"<p style=\"font-family: Arial; font-size:1.75em;color:purple; font-style:bold\"><br>\n\nWhat are the centers of 12 clusters we formed ?\n<br><br><\/p>\n","d76178ec":"# Dry Days","f1ccdeab":"# Warm Days","5bf8a4b4":"<p style=\"font-family: Arial; font-size:1.75em;color:purple; font-style:bold\"><br>\n\nData Sampling<br><\/p>\n\nLots of rows, so let us sample down by taking every 10th row. <br>\n","a94d6b54":"<p style=\"font-family: Arial; font-size:2.75em;color:purple; font-style:bold\"><br>\n\nClustering with scikit-learn\n\n<br><br><\/p>","1b526fb6":"<p style=\"font-family: Arial; font-size:1.75em;color:purple; font-style:bold\"><br>\n\nCreating a Pandas DataFrame from a CSV file<br><br><\/p>\n","51c5c355":"<p style=\"font-family: Arial; font-size:1.75em;color:purple; font-style:bold\"><br>\n\nDrop all the Rows with Empty rain_duration and rain_accumulation\n<br><br><\/p>\n","03d5697b":"<p style=\"font-family: Arial; font-size:1.75em;color:purple; font-style:bold\"><br>\n\nHow many rows did we drop ?\n<br><br><\/p>\n","ed967c7a":"<p style=\"font-family: Arial; font-size:1.75em;color:purple; font-style:bold\"><br>\n\nSelect Features of Interest for Clustering\n<br><br><\/p>\n","b969df1b":"<p style=\"font-family: Arial; font-size:1.75em;color:purple; font-style:bold\">Minute Weather Data Description<\/p>\n<br>\nThe **minute weather dataset** comes from the same source as the daily weather dataset that we used in the decision tree based classifier notebook. The main difference between these two datasets is that the minute weather dataset contains raw sensor measurements captured at one-minute intervals. Daily weather dataset instead contained processed and well curated data. The data is in the file **minute_weather.csv**, which is a comma-separated file.\n\nAs with the daily weather data, this data comes from a weather station located in San Diego, California. The weather station is equipped with sensors that capture weather-related measurements such as air temperature, air pressure, and relative humidity. Data was collected for a period of three years, from September 2011 to September 2014, to ensure that sufficient data for different seasons and weather conditions is captured.\n\nEach row in **minute_weather.csv** contains weather data captured for a one-minute interval. Each row, or sample, consists of the following variables:\n\n* **rowID:** \tunique number for each row\t(*Unit: NA*)\n* **hpwren_timestamp:**\ttimestamp of measure\t(*Unit: year-month-day hour:minute:second*)\n* **air_pressure:** air pressure measured at the timestamp\t(*Unit: hectopascals*)\n* **air_temp:**\tair temperature measure at the timestamp\t(*Unit: degrees Fahrenheit*)\n* **avg_wind_direction:**\twind direction averaged over the minute before the timestamp\t(*Unit: degrees, with 0 means coming from the North, and increasing clockwise*)\n* **avg_wind_speed:**\twind speed averaged over the minute before the timestamp\t(*Unit: meters per second*)\n* **max_wind_direction:**\thighest wind direction in the minute before the timestamp\t(*Unit: degrees, with 0 being North and increasing clockwise*)\n* **max_wind_speed:**\thighest wind speed in the minute before the timestamp\t(*Unit: meters per second*)\n* **min_wind_direction:**\tsmallest wind direction in the minute before the timestamp\t(*Unit: degrees, with 0 being North and inceasing clockwise*)\n* **min_wind_speed:**\tsmallest wind speed in the minute before the timestamp\t(*Unit: meters per second*)\n* **rain_accumulation:**\tamount of accumulated rain measured at the timestamp\t(*Unit: millimeters*)\n* **rain_duration:**\tlength of time rain has fallen as measured at the timestamp\t(*Unit: seconds*)\n* **relative_humidity:**\trelative humidity measured at the timestamp\t(*Unit: percent*)","4efb7aec":"<p style=\"font-family: Arial; font-size:1.75em;color:purple; font-style:bold\"><br>\n\nImporting the Necessary Libraries<br><\/p>"}}