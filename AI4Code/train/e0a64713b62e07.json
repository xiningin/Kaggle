{"cell_type":{"411707ae":"code","8caa57a1":"code","a03d6005":"code","4107fb2b":"code","c947e0bb":"code","9de37c4c":"code","9c47bf16":"code","4fccc0aa":"code","f48195c2":"code","6ccd417a":"code","7b37712d":"code","8e2a4595":"code","890cc067":"code","3ccb4173":"code","165f04b8":"code","73930431":"code","7730c468":"code","ca5117c3":"code","2b336b12":"code","95df2ca0":"code","160ed5e1":"code","7faba1a1":"code","4b4f8968":"code","ffa530f3":"code","499df7b5":"code","ca74f46e":"code","25bcc096":"code","e0abc172":"code","7dc2fbe8":"code","ff8e3237":"code","e26537bc":"code","f5c399ec":"code","1e906b34":"code","be868363":"code","c0b18a2e":"code","11dd3e79":"code","98658a9c":"code","62ca078a":"code","65b430c7":"markdown","1256e46f":"markdown","290d0bb1":"markdown","516e2b32":"markdown","204be386":"markdown","b3c505f8":"markdown","000d75d7":"markdown","02f9881c":"markdown","e884e483":"markdown","256cd5bf":"markdown","b4ef56b8":"markdown","10dd5629":"markdown","5983c1d6":"markdown","ee95c8c6":"markdown","b138c9ee":"markdown","3f5adcd6":"markdown"},"source":{"411707ae":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn import preprocessing\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout","8caa57a1":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')\n\ntrain_data_copy = train_data.copy()\ntest_data_copy = test_data.copy()","a03d6005":"train_data.head()","4107fb2b":"test_data['Test'] = 1\ntrain_data['Test'] = 0\ndata = train_data.append(test_data, sort = False)\n\ndrop_cols = list()\none_hot_encoding_cols = list()\nnormalization_cols = list()","c947e0bb":"data.drop('PassengerId', axis = 1, inplace = True)","9de37c4c":"data['Pclass'].value_counts(dropna = False)\n\nnormalization_cols.append('Pclass')","9c47bf16":"data['Title'] = data['Name'].str.extract('([A-Za-z]+)\\.', expand=True)\ndata.drop('Name', axis = 1, inplace = True)","4fccc0aa":"data['Title'].value_counts()","f48195c2":"mapping = {'Col': 'Army', 'Mlle' : 'Miss', 'Major' : 'Army', 'Sir': 'Royal',\n          'Mme': 'Mrs', 'Capt' : 'Army', 'Don' : 'Royal', 'Jonkheer' : 'Royal',\n          'Ms' : 'Miss', 'Countess' : 'Royal', 'Lady': 'Royal'}\n           \ndata.replace({'Title': mapping}, inplace=True)","6ccd417a":"one_hot_encoding_cols.append('Title')\ndata.head()","7b37712d":"data['Sex'].value_counts(dropna = False)","8e2a4595":"label_encoder = preprocessing.LabelEncoder()\ndata['Sex'] = label_encoder.fit_transform(data['Sex'])\n\ndata.head()","890cc067":"data[data['Test'] == 0].groupby(['Title', 'Sex']).Age.mean()","3ccb4173":"data.loc[(data.Age.isna()) & (data.Sex == 1) & (data.Title == 'Army'), 'Age'] = 56.60\n\ndata.loc[(data.Age.isna()) & (data.Sex == 1) & (data.Title == 'Dr'), 'Age'] = 49.00\ndata.loc[(data.Age.isna()) & (data.Sex == 0) & (data.Title == 'Dr'), 'Age'] = 40.60\n\ndata.loc[(data.Age.isna()) & (data.Sex == 1) & (data.Title == 'Master'), 'Age'] = 4.57\n\ndata.loc[(data.Age.isna()) & (data.Sex == 0) & (data.Title == 'Miss'), 'Age'] = 21.85\n\ndata.loc[(data.Age.isna()) & (data.Sex == 1) & (data.Title == 'Mr'), 'Age'] = 32.36\n\ndata.loc[(data.Age.isna()) & (data.Sex == 0) & (data.Title == 'Mrs'), 'Age'] = 35.78\n\ndata.loc[(data.Age.isna()) & (data.Sex == 1) & (data.Title == 'Rev'), 'Age'] = 43.16\n\ndata.loc[(data.Age.isna()) & (data.Sex == 0) & (data.Title == 'Royal'), 'Age'] = 40.50\ndata.loc[(data.Age.isna()) & (data.Sex == 1) & (data.Title == 'Royal'), 'Age'] = 42.33","165f04b8":"normalization_cols.append('Age')\ndata.head()","73930431":"data['SibSp'].value_counts()\nnormalization_cols.append('SibSp')","7730c468":"data['Parch'].value_counts()\nnormalization_cols.append('Parch')\n\ndata.head()","ca5117c3":"data.drop('Ticket', axis =1, inplace = True)","2b336b12":"normalization_cols.append('Fare')\n","95df2ca0":"data['HasCabin'] = data['Cabin'].isnull() == False\ndata['HasCabin'].replace(False, 0, inplace = True)\ndata['HasCabin'].replace(True, 1, inplace = True)\n\ndata.drop('Cabin', axis =1, inplace = True)","160ed5e1":"one_hot_encoding_cols.append('Embarked')","7faba1a1":"data.head()","4b4f8968":"data = pd.get_dummies(data = data, columns = one_hot_encoding_cols)","ffa530f3":"data.head()","499df7b5":"std = data[data['Test'] == 0][normalization_cols].std(axis = 0)\nmean = data[data['Test'] == 0][normalization_cols].mean(axis = 0)\n\ndata[normalization_cols] = (data[normalization_cols] - mean) \/ std","ca74f46e":"data.head(10)","25bcc096":"train_data = data[data['Test'] == 0].drop(columns = ['Test'])\n\ntest_data = data[data['Test'] == 1].drop(columns = ['Survived', 'Test'])","e0abc172":"train_data.head()\ntrain_data.shape","7dc2fbe8":"test_data.head()","ff8e3237":"X = train_data.iloc[: , 1:].to_numpy()\ny = train_data.iloc[:, 0].to_numpy()\n\nprint(str(X.shape))\nprint(str(y.shape))","e26537bc":"def create_model():\n\n    model = Sequential()\n    model.add(Dense(14, input_dim = 19, activation = 'relu'))\n    model.add(Dropout(0.3))\n    model.add(Dense(8, activation = 'relu'))\n    \n    model.add(Dense(1, activation = 'sigmoid'))\n\n    model.compile(loss='binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n    \n    return model","f5c399ec":"epochs = 20\nmodel = create_model()\nhistory = model.fit(X, y, epochs=epochs, validation_split = 0.3, batch_size=10)","1e906b34":"epochs = 20\nmodel = create_model()\nhistory = model.fit(X, y, epochs=epochs, batch_size=10, verbose = 0)","be868363":"X_test = test_data.to_numpy()","c0b18a2e":"prediction = model.predict(X_test)","11dd3e79":"submission = pd.DataFrame(test_data_copy[['PassengerId']])\nsubmission['Survived'] = prediction\nsubmission['Survived'] = submission['Survived'].apply(lambda x: 0 if x < 0.5 else 1)","98658a9c":"submission.to_csv('submission.csv', index = False)","62ca078a":"submission.head(10)","65b430c7":"### Parch","1256e46f":"## Data Preprocessing","290d0bb1":"### Sex","516e2b32":"### Fare","204be386":"### Name\n\nAssuming someones name in its entirety doesn't have any effect on that person's survival, title on the other hand can tell us a lot about that person like class, age, gender, marital status etc. And it also much easier to process than the full name. So, we will drop the name column and keep the titles only.","b3c505f8":"### PassengerId\n\nPassengerId is simply unique identifiers for each passengers and doesn't have any impact on the outcome. So we will simply remove this column from our training and testing dataset.","000d75d7":"### Applying Encoding and Normalization","02f9881c":"### Age","e884e483":"### Ticket","256cd5bf":"### Merge Train and Test Data\n\nWe will merge train and test data for making it easier to apply same preprocessing steps","b4ef56b8":"### Embarked","10dd5629":"### Cabin","5983c1d6":"## Fitting","ee95c8c6":"### SibSp","b138c9ee":"## Loading Data","3f5adcd6":"### Pclass\nThis column has no missing value and only 3 class and classes has a ordered relationship. So we don''t need to apply any encoding for this cloumn."}}