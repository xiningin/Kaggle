{"cell_type":{"544e2879":"code","1eb17bc1":"code","a55473da":"code","7b6b4766":"code","e307682a":"code","6f0cbe0e":"code","d5b727de":"code","93fe8c12":"code","2009d9dc":"markdown","742678c7":"markdown","bca13f67":"markdown","7b9059ea":"markdown","f61a389c":"markdown","3be6e846":"markdown"},"source":{"544e2879":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# let's keep our keras backend tensorflow quiet\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL']='3'\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Dense, Dropout, Lambda, Flatten, Conv2D, MaxPool2D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.utils.np_utils import to_categorical\n\nfrom keras.datasets import mnist","1eb17bc1":"import os\n\n(X_train, y_train), (X_test, y_test) = mnist.load_data(path=os.path.abspath('..\/input\/mnist-numpy\/mnist.npz'))\n\n# building the input vector from the 28x28 pixels\nX_train = X_train.reshape(X_train.shape[0], 28, 28, 1)\nX_test = X_test.reshape(X_test.shape[0], 28, 28, 1)\nX_train = X_train.astype('float32')\nX_test = X_test.astype('float32')\n\n# normalizing the data to help with the training\nX_train \/= 255\nX_test \/= 255\n\n# print the final input shape ready for training\nprint(\"Train matrix shape\", X_train.shape)\nprint(\"Test matrix shape\", X_test.shape)","a55473da":"Y_train = y_train.astype('int32') \nY_test = y_test.astype('int32') \n\n# one-hot encoding\nn_classes = 10\nY_train = to_categorical(Y_train, n_classes)\nY_test = to_categorical(Y_test, n_classes)","7b6b4766":"model= Sequential()\n\nmodel.add(Conv2D(filters = 128, kernel_size = (5,5),padding = 'Same', activation ='relu', kernel_initializer='he_normal', input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 128, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 256, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 256, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.33))\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.compile(\n    optimizer = 'rmsprop', # 'rmsprop', 'adam'\n    loss = 'categorical_crossentropy',\n    metrics=['accuracy'])","e307682a":"from keras.callbacks import EarlyStopping, ModelCheckpoint\n\n# Set callback functions to early stop training and save the best model so far\ncallbacks = [EarlyStopping(monitor='val_loss', patience=20),\n         ModelCheckpoint(filepath=os.path.abspath('best_model.h5'), monitor='val_loss', save_best_only=True)]\n\nh = model.fit(\n        X_train,\n        Y_train, \n        callbacks=callbacks,\n        batch_size=256,\n        epochs = 50, \n        validation_data=(X_test, Y_test),\n        verbose = 1)","6f0cbe0e":"model.load_weights('best_model.h5')\n%rm best_model.h5\n\nfinal_loss, final_acc = model.evaluate(X_test, Y_test, verbose=0)\nprint(\"Final loss: {0:.6f}, final accuracy: {1:.6f}\".format(final_loss, final_acc))","d5b727de":"loss = h.history['loss']\nval_loss = h.history['val_loss']\n\nepochs = range(len(loss))\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","93fe8c12":"predicted_classes = model.predict_classes(X_test)\n\nsubmissions = pd.DataFrame({\"ImageId\": list(range(1, len(predicted_classes) + 1)), \"Label\": predicted_classes})\nsubmissions.to_csv(\"submission.csv\", index=False, header=True)","2009d9dc":"**Plot history**","742678c7":"**Import required libraries**","bca13f67":"**Load and reshape test data**","7b9059ea":"**Learn**","f61a389c":"**Load and reshape data**","3be6e846":"**A simple model**"}}