{"cell_type":{"d2312a22":"code","80a828b0":"code","ae3de1c9":"code","8ba7c2c1":"code","cdf7fd18":"code","e1014e77":"code","81336acb":"code","74b476f2":"code","72e01a1c":"code","3c933857":"code","4db124f0":"code","7b517716":"code","2b8b783a":"code","96afae8c":"code","86691549":"code","94c75973":"code","e1aa0d7f":"code","76ae79d3":"code","d2ccce91":"code","c22fe054":"code","b86249b0":"code","3e37c411":"code","13a0700b":"code","b43b4cdf":"code","b5ae5969":"code","26224f62":"code","c4f6fb23":"code","29b34367":"code","6f524cb0":"code","9be0853a":"code","3bd2a7f8":"code","80dd543e":"code","05f2b011":"code","57ae3c8e":"code","5f4b4006":"code","da0a53ae":"code","baec67d3":"code","ae373bb0":"code","24dbfe17":"code","d13e8d1a":"code","c81e316e":"code","308d7df1":"code","4b3f1cc2":"code","527e2ffb":"code","ec5e8942":"code","397548f3":"code","af7c5e19":"code","51ddcbab":"code","716396c7":"code","996d8a81":"code","9e8b6059":"code","1e34e4e1":"code","442455d1":"code","70c836ec":"code","e8aabd42":"code","4795a005":"code","b3ab82c2":"markdown","cc73e01f":"markdown","1a037b2b":"markdown","06961f5c":"markdown","e5c91939":"markdown","7f6f95bc":"markdown","e0cb4113":"markdown","c872bdb2":"markdown","56f709d9":"markdown","603e4c68":"markdown","bb28c621":"markdown","14549201":"markdown","86efd010":"markdown","6259899f":"markdown","ae336181":"markdown","933c6f2c":"markdown","7d0cf468":"markdown","d448f49a":"markdown","52607c28":"markdown","d72ee957":"markdown","14688479":"markdown","c6d6abe4":"markdown","ddb3fc46":"markdown","630cb69b":"markdown","f4d0cb2a":"markdown"},"source":{"d2312a22":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport bokeh\nfrom bokeh.io import show, output_notebook\nfrom bokeh.palettes import Spectral9\nfrom bokeh.plotting import figure\noutput_notebook() # You can use output_file();\n\nimport plotly.graph_objects as go\nimport plotly.express as px\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected = True)\nimport plotly.offline as py\npy.init_notebook_mode(connected = True)\n\n# Special\nimport wordcloud, missingno\nfrom wordcloud import WordCloud # wordcloud\nimport missingno as msno # check missing value\nimport networkx as nx\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","80a828b0":"data = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')","ae3de1c9":"data.head()","8ba7c2c1":"data.describe()","cdf7fd18":"data.shape","e1014e77":"data.info()","81336acb":"#missing data\ndata.isnull().sum()","74b476f2":"data.columns","72e01a1c":"import missingno as msno","3c933857":"# Visualise the missing ones\nmsno.matrix(data)","4db124f0":"data.dropna(how = 'any', inplace = True)","7b517716":"data.isnull().sum()","2b8b783a":"g = sns.countplot(x=\"Category\",data=data, palette = \"Set1\")\ng.set_xticklabels(g.get_xticklabels(), rotation=90, ha=\"right\")\nplt.title('Category Counter',size = 20)","96afae8c":"data = pd.get_dummies(data, columns = ['Category'])","86691549":"data.drop(['Current Ver','Last Updated','Android Ver'], axis = 1, inplace = True)","94c75973":"labels =data['Type'].value_counts(sort = True).index\nsizes = data['Type'].value_counts(sort = True)\n\n\ncolors = [\"blue\",\"red\"]\nexplode = (0.1,0)  # explode 1st slice\n\n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=270,)\n\nplt.title('How much free apps?',size = 20)\nplt.show()","e1aa0d7f":"data['Free'] = data['Type'].map(lambda s :1  if s =='Free' else 0)\ndata.drop(['Type'], axis=1, inplace=True)","76ae79d3":"#Cleaning the installs with replace \"+ to ' '\"\ndata.Installs = data.Installs.apply(lambda x: x.replace(',',''))\ndata.Installs = data.Installs.apply(lambda x: x.replace('+',''))\ndata.Installs = data.Installs.apply(lambda x: int(x))","d2ccce91":"sortedv = sorted(list(data['Installs'].unique()))","c22fe054":"#Encoding\ndata['Installs'].replace(sortedv,range(0,len(sortedv),1), inplace = True )","b86249b0":"data.Installs.value_counts()","3e37c411":"#Scatter Plot Installs- Reviews\nfig = px.scatter(data, y= \"Installs\", x =\"Reviews\")\npy.iplot(fig, filename = \"test\")","13a0700b":"plt.figure(figsize = (12,10))\nsns.regplot(x=\"Installs\", y=\"Rating\", color = 'purple',data=data);\nplt.title('Rating-Installs',size = 15)","b43b4cdf":"hist = data.hist(figsize =(50,50))","b5ae5969":"data['Price'].value_counts().head(10)","26224f62":"#Cleaning the Price from $ to ' '\ndata.Price = data.Price.apply(lambda x: x.replace('$',''))\ndata['Price'] = data['Price'].apply(lambda x: float(x))","c4f6fb23":"data['Price'].describe()","29b34367":"#We can give a number to string values\ndata.loc[data['Price'] == 0, 'priceint'] = '0'\ndata.loc[(data['Price'] > 0) & (data['Price'] <= 1), 'priceint'] = '1'\ndata.loc[(data['Price'] > 1) & (data['Price'] <= 3), 'priceint']   = '2'\ndata.loc[(data['Price'] > 3) & (data['Price'] <= 5), 'priceint']   = '3'\ndata.loc[(data['Price'] > 5) & (data['Price'] <= 15), 'priceint']   = '4'\ndata.loc[(data['Price'] > 15), 'priceint']  = '5'","6f524cb0":"#Rating-Priceint\ndata[['priceint', 'Rating']].groupby(['priceint'], as_index=False).mean()","9be0853a":"g = sns.catplot(x=\"priceint\",y=\"Rating\",data=data, kind=\"boxen\", height = 10 ,palette = \"Pastel1\")\ng.despine(left=True)\ng.set_xticklabels(rotation=90)\ng = g.set_ylabels(\"Rating\")\nplt.title('Catplot Rating VS Priceint',size = 10)\n","3bd2a7f8":"data['priceint'] = data['priceint'].astype(int)","80dd543e":"g = sns.kdeplot(data.Rating, color = 'Purple', shade = True)\ng.set_xlabel('Rating')\ng.set_ylabel('Frequency')\nplt.title('Rating Frequency',size = '25')","05f2b011":"#We need to extract string values\ndata.Size.unique()","57ae3c8e":"len(data[data.Size == 'Varies with device'])","5f4b4006":"#We replace Varies with device to Nan \ndata['Size'].replace('Varies with device', np.nan, inplace = True )","da0a53ae":"#Some cleaning and string to float\ndata.Size = (data.Size.replace(r'[kM]+$', '', regex=True).astype(float) * \\\n             data.Size.str.extract(r'[\\d\\.]+([KM]+)', expand=False)\n            .fillna(1)\n            .replace(['k','M'], [10**3, 10**6]).astype(int))","baec67d3":"#Instead of dropping for too many missing values, we write values that do not change the mean standard deviation from the relation with Genres.\ndata['Size'].fillna(data.groupby('Genres')['Size'].transform('mean'),inplace = True)","ae373bb0":"# we have 1 unrated value \ndata[data['Content Rating']=='Unrated']","24dbfe17":"data = data[data['Content Rating'] != 'Unrated']","d13e8d1a":"#one hot encoding\ndata = pd.get_dummies(data, columns = ['Content Rating'])","c81e316e":"data.Genres.value_counts()","308d7df1":"data['Genres'] = data['Genres'].str.split(';').str[0]","4b3f1cc2":"data.Genres.value_counts()","527e2ffb":"# Music And Music & Audio Columns is the same Genres So we can apply it\ndata['Genres'].replace('Music & Audio', 'Music',inplace = True)","ec5e8942":"g = sns.countplot(x=\"Genres\",data=data, palette = \"Set1\")\ng.set_xticklabels(g.get_xticklabels(), rotation=90, ha=\"right\")\nplt.title('Count of app in each Genres',size = 20)","397548f3":"g = sns.catplot(x=\"priceint\",y = \"Rating\",hue = \"Genres\" , kind = 'swarm' , data=data , palette = \"Paired\", size = 15)\ng.set_xticklabels(rotation = 90)\nplt.title('Genres in each Prices vs Ratings',size = 20)","af7c5e19":"data.loc[data['Rating'] < 0.5,'Ratingint'] = '0'\ndata.loc[(data['Rating'] >= 0.5) & (data['Rating'] < 1.5),'Ratingint'] = '1'\ndata.loc[(data['Rating'] >= 1.5) & (data['Rating'] < 2.5),'Ratingint'] = '2'\ndata.loc[(data['Rating'] >= 2.5) & (data['Rating'] < 3.5),'Ratingint'] = '3'\ndata.loc[(data['Rating'] >= 3.5) & (data['Rating'] < 4.5),'Ratingint'] = '4'\ndata.loc[(data['Rating'] >= 4.5) & (data['Rating'] < 5),'Ratingint'] = '5'","51ddcbab":"data.dropna(how = 'any', inplace = True)","716396c7":"data[\"Ratingint\"]=data[\"Ratingint\"].astype(int)","996d8a81":"data.Ratingint.dtype","9e8b6059":"data.Rating.head(10)","1e34e4e1":"data.Ratingint.head(10)","442455d1":"f ,ax = plt.subplots(figsize = (12,12))\nsns.heatmap(data[['Installs','Price','Size','Ratingint']].corr(), annot = True , ax=ax , cmap =\"YlGnBu\")\nplt.show()","70c836ec":"#and we need one hot encoding for ML\ndata = pd.get_dummies(data, columns = ['Genres'])","e8aabd42":"data.drop(['App','Reviews','Installs','Rating'],axis = 1 ,inplace = True)","4795a005":"data.corr()","b3ab82c2":"* downloads have no effect on ratings, the overall average is around 4\n* If the more Installs,the more reviews","cc73e01f":"So As you can see Personalization apps are higher than all","1a037b2b":"Converted to Integer as we can't predict in floats, and drop the Ratings","06961f5c":"* 0 = Free\n* 1 = Cheap\n* 2 = Normal\n* 3 = Medium Price\n* 4 = Expensive\n* 5 = Too much expensive (exaggeration)\n","e5c91939":"# Genres","7f6f95bc":"# Some apps with So heavy loads\n![](https:\/\/images.squarespace-cdn.com\/content\/v1\/553b52dde4b00f34b14ec0c3\/1587388025420-JWM8ZUJRGTPJ2052Y3ED\/ke17ZwdGBToddI8pDm48kLPZj9fdYGhbsx1GpfQRT0RZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZUJFbgE-7XRK3dMEBRBhUpwIVMluBXZMLorQ5T5U-oBeVqz2BZWkSKenPylfg4JsjT2iiUO--LIiPvsl8--1asI\/Google-Play_New-Logos2_books.jpg)\n![](https:\/\/cdn.browsercam.com\/com.facebook.orca-header.png)\n![](https:\/\/112paykasa.com\/paykasa_upload\/2018\/09\/Whatsapp-logo.png)\n![](https:\/\/i12.haber7.net\/\/haber\/haber7\/photos\/google_chrome_indirme_1431270339_9785.jpg)\n![](https:\/\/i.pinimg.com\/originals\/ae\/47\/fa\/ae47fa9a8fd263aa364018517020552d.png)\n![](https:\/\/image.shutterstock.com\/image-photo\/bangkok-thailand-may-14-2016-260nw-419396578.jpg)\n![](https:\/\/www.gursesgazetesi.com\/images\/haberler\/2020\/04\/tiktok-logosu-olmadan-tiktok-videosu-nasil-indirilir.jpg)","e0cb4113":"# Import Libraries","c872bdb2":"# Types","56f709d9":"# Data exploration","603e4c68":"# Installs","bb28c621":"* cheap applications received the most ratings.","14549201":"* density range from 4 to 4.5","86efd010":"Most of Apps Are free(%93.1)","6259899f":"# Google Play Store Visualizations & Create the Machine Learning Model\n![](https:\/\/akillitelefon.com\/wp-content\/uploads\/2019\/12\/Google-Play-Store.jpg)\n# Introduction\nI wanted to prepare a simple and understandable data cleaning, Exploratory Data Analysis and Machine learning model in the Google Play Store dataset.\nIn this kernel you can see;\n* Basic Exploratory Data Analysis\n* Data Cleaning\n* Data preprocessing\n* Visualization\n* Creating the machine learning model and & Visualize the model","ae336181":"# \u0130mport Libraries","933c6f2c":"# Visualize the Missing Data","7d0cf468":"Comments do not have much effect on Rating ","d448f49a":"So we have 1637 Values of NaN","52607c28":"# Price","d72ee957":"* most family-based apps","14688479":"# Data Cleaning & Visualizations","c6d6abe4":"# Category","ddb3fc46":"# Content Rating","630cb69b":"# Size","f4d0cb2a":"# Rating & Price"}}