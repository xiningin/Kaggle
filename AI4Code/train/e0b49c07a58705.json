{"cell_type":{"26afdd96":"code","975cb712":"code","044cb685":"code","1f9e4c75":"code","d0b97904":"code","212e8d39":"code","a189cd07":"code","03868f06":"code","86aa3632":"code","12f88d86":"code","db33170b":"code","6a73417e":"code","402447de":"code","4a83e0fa":"code","de00ba26":"code","966d633c":"code","6235c9c2":"code","92439663":"code","405e8ad8":"code","aee9844f":"code","4d189690":"code","7ddaf140":"code","9357340d":"code","9ee826cc":"code","0954af53":"code","fbd12ddd":"code","415462ae":"markdown"},"source":{"26afdd96":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","975cb712":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom patsy import dmatrices\nimport sklearn\nimport seaborn as sns","044cb685":"walmart_data = pd.read_csv(\"..\/input\/walmart-sales\/Walmart_Store_sales.csv\")\nwalmart_data.head()","1f9e4c75":"walmart_data_groupby = walmart_data.groupby('Store')['Weekly_Sales'].sum()\nprint(\"Store Number {} has maximum Sales. Sum of Total Sales {}\".format(walmart_data_groupby.idxmax\n(),walmart_data_groupby.max()))","d0b97904":"walmart_data_std = walmart_data.groupby('Store').agg({'Weekly_Sales':'std'})\nprint(\"Store Number {} has maximum Standard Deviation. STD {}\".format(walmart_data_std['Weekly_Sales'].idxmax(),walmart_data_std['Weekly_Sales'].max()))","212e8d39":"walmart_data_std = walmart_data.groupby('Store').agg({'Weekly_Sales':['mean','std']})\nwalmart_data_std.head()","a189cd07":"walmart_data_Q32012 = walmart_data[(pd.to_datetime(walmart_data['Date']) >= pd.to_datetime('07-01-2012')) & (pd.to_datetime(walmart_data['Date']) <= pd.to_datetime('09-30-2012'))]\nwalmart_data_growth = walmart_data_Q32012.groupby(['Store'])['Weekly_Sales'].sum()\nprint(\"Store Number {} has Good Quartely Growth in Q3'2012 {}\".format(walmart_data_growth.idxmax(),walmart_data_growth.max()))","03868f06":"# Stores Holiday Sales\nstores_holiday_sales = walmart_data[walmart_data['Holiday_Flag'] == 1]","86aa3632":"# Stores Weekday Sales\nstores_nonholiday_sales = walmart_data[walmart_data['Holiday_Flag'] == 0]","12f88d86":"#Stores Sales in Super Bowl Day\n#Super Bowl: 12-Feb-10, 11-Feb-11, 10-Feb-12, 8-Feb-13\nstores_holiday_sales_superBowl = stores_holiday_sales[(pd.to_datetime(stores_holiday_sales['Date']) == pd.to_datetime('12-02-2010')) |(pd.to_datetime(stores_holiday_sales['Date']) == pd.to_datetime('11-02-2011'))|(pd.to_datetime(stores_holiday_sales['Date']) == pd.to_datetime('10-02-2012'))|(pd.to_datetime(stores_holiday_sales['Date']) == pd.to_datetime('08-02-2013'))]","db33170b":"#Stores Sales in Labour Day\n#Labour Day: 10-Sep-10, 9-Sep-11, 7-Sep-12, 6-Sep-13\nstores_holiday_sales_labourDay = stores_holiday_sales[(pd.to_datetime(stores_holiday_sales['Date']) == pd.to_datetime('10-09-2010')) |(pd.to_datetime(stores_holiday_sales['Date']) == pd.to_datetime('09-09-2011'))|(pd.to_datetime(stores_holiday_sales['Date']) == pd.to_datetime('07-09-2012'))|(pd.to_datetime(stores_holiday_sales['Date']) == pd.to_datetime('06-09-2013'))]","6a73417e":"#Stores Sales in Thanks Giving\n#Thanksgiving: 26-Nov-10, 25-Nov-11, 23-Nov-12, 29-Nov-13\nstores_holiday_sales_thanksgiving = stores_holiday_sales[(pd.to_datetime(stores_holiday_sales['Date']) == pd.to_datetime('26-11-2010')) |(pd.to_datetime(stores_holiday_sales['Date']) == pd.to_datetime('25-11-2011'))|(pd.to_datetime(stores_holiday_sales['Date']) ==\npd.to_datetime('23-11-2012'))|(pd.to_datetime(stores_holiday_sales['Date']) == pd.to_datetime('29-11-2013'))]","402447de":"#Stores Sales in Christmas\n# Christmas: 31-Dec-10, 30-Dec-11, 28-Dec-12, 27-Dec-13\nstores_holiday_sales_Christmas = stores_holiday_sales[(pd.to_datetime(stores_holiday_sales['Date']) == pd.to_datetime('31-12-2010')) |(pd.to_datetime(stores_holiday_sales['Date']) == pd.to_datetime('30-12-2011'))|(pd.to_datetime(stores_holiday_sales['Date']) == pd.to_datetime('28-12-2012'))|(pd.to_datetime(stores_holiday_sales['Date']) == pd.to_datetime('27-12-2013'))]\nstores_nonholiday_sales_mean = stores_nonholiday_sales.groupby(['Date']).agg({'Weekly_Sales':'mean'}).reset_index()\nstores_holiday_sales_sum = stores_holiday_sales.groupby(['Date']).agg({'Weekly_Sales':'sum'}).reset_index()","4a83e0fa":"for row in stores_holiday_sales_sum.itertuples():\n    for row1 in stores_nonholiday_sales_mean.itertuples():\n        if row.Weekly_Sales > row1.Weekly_Sales:\n            print(\"On this Date {} Holiday Sales is greater than Non Holiday Sales and the Sales :- {}\".format(row.Date,row.Weekly_Sales))\n            break;","de00ba26":"print(\"Super Bowl Day Sale\",stores_holiday_sales_superBowl['Weekly_Sales'].sum())\nprint(\"Labour Day Sale\",stores_holiday_sales_labourDay['Weekly_Sales'].sum())\nprint(\"Thanksgiving Day Sale\",stores_holiday_sales_thanksgiving['Weekly_Sales'].sum())\nprint(\"Christmas Day Sale\",stores_holiday_sales_Christmas['Weekly_Sales'].sum())","966d633c":"x_features_object = walmart_data[walmart_data['Store'] ==1][['Store','Date']]\ndate_obj = walmart_data[walmart_data['Store'] ==1][['Date']]\ndate_obj.index +=1\nx_features_object.Date = date_obj.index\nx_features_object.head()","6235c9c2":"y_target = walmart_data[walmart_data['Store'] ==1]['Weekly_Sales']\ny_target.head()","92439663":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x_features_object,y_target,random_state=1)","405e8ad8":"from sklearn.linear_model import LinearRegression\nlinreg = LinearRegression()\nlinreg.fit(x_train,y_train)\nfeature_dataset = walmart_data[walmart_data['Store'] ==1][['Store','CPI','Unemployment','Fuel_Price']]\nfeature_dataset.head()","aee9844f":"response_set_cpi = walmart_data[walmart_data['Store'] ==1]['CPI'].astype('int64')\nresponse_set_unemployment = walmart_data[walmart_data['Store'] ==1]['Unemployment'].astype('int64')","4d189690":"from sklearn.model_selection import train_test_split\nx_train_cpi,x_test_cpi,y_train_cpi,y_test_cpi = train_test_split(feature_dataset,response_set_cpi,random_state=1)\nx_train_unemp, x_test_unemp, y_train_unemp, y_test_unemp = train_test_split(feature_dataset,response_set_unemployment,random_state=1)","7ddaf140":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression(max_iter=10000)\nlogreg.fit(x_train_cpi,y_train_cpi)\ny_pred = logreg.predict(x_test_cpi)\nlogreg.fit(x_train_unemp,y_train_unemp)\n#y_pred_unemp = logreg.predict(x_test_unemp)","9357340d":"y_pred_unemp = logreg.predict(x_test_unemp)","9ee826cc":"from sklearn import metrics\nprint(metrics.accuracy_score(y_test_cpi,y_pred))\nprint(metrics.accuracy_score(y_test_unemp,y_pred_unemp))","0954af53":"print('cpi actual :', y_test_cpi.values[0:30])\nprint('cpi Predicted :', y_pred[0:30])\nprint('actual Unemployment :', y_test_unemp.values[0:30])\nprint('Predicted Unemployment :', y_pred_unemp[0:30])","fbd12ddd":"walmart_data['Day'] = pd.to_datetime(walmart_data['Date']).dt.day_name()\nwalmart_data.head()","415462ae":"# Retail analysis with Walmart \n\nThe aim of this project is enable category managers of Walmart to check the weekly and monthly sales of the departments. Analysis includes the effect of markdowns on the sales and the extent of effect on the sales by fuel prices, temperature, unemployment, CPI etc. Has been analyzed using simple and multiple linear regression models.\n\n**Business problem**\n\nThe decision makers of Walmart should be able to analyze the effect of various factors affecting the sales of the products in their stores.\n\n**Analytics Problem**\n\nIn this problem we have analyzed sales across different departments by store type and created weekly and monthly. We have analyzed the effect of various factors such as temperature, store size, fuel prices, markdown in prices, unemployment and CPI to determine Which factors have a statistical significance in explaining sales in the stores by using simple and multiple linear regression.\n\uf0b7"}}