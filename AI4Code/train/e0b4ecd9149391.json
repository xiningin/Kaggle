{"cell_type":{"dd20a49a":"code","b92fb1f2":"code","8636656e":"code","40ceed56":"code","a4308131":"code","c916e13d":"code","3453f6f7":"code","596808c8":"code","08fe103b":"code","73f85b52":"code","7eda5a4a":"code","131a5f53":"code","912263cc":"code","482f8293":"code","b8715133":"code","aac7dcdc":"code","764bb477":"code","a6b0025d":"code","733e38c0":"markdown","bbd020a9":"markdown","693ac504":"markdown"},"source":{"dd20a49a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b92fb1f2":"dataset = pd.read_csv(\"\/kaggle\/input\/patient-treatment-classification\/training_set.csv\")","8636656e":"data = pd.DataFrame(dataset)","40ceed56":"data.head()","a4308131":"data.shape","c916e13d":"data.info()","3453f6f7":"# mengecek apakah ada data yang berisi null\ndata.isnull().values.any()","596808c8":"# mengubah isi kolom jenis kelamin dari text menjadi integer (Laki-laki = 1; Perempuan= 0)\njk = {\"M\" : 1, \"F\" : 0}\ndata[\"SEX\"] = data[\"SEX\"].map(jk)","08fe103b":"data.head()","73f85b52":"x = dataset.iloc[:, 0:10]\ny = dataset.iloc[:,10]","7eda5a4a":"len(x)\nlen(y)","131a5f53":"from sklearn.model_selection import train_test_split\n\nvalidation_size = 0.20\nseed = 7\nnum_trees = 100\nx_train, x_test, y_train, y_test=train_test_split(x, y, test_size=validation_size, random_state=seed)","912263cc":"#Check Algorithms\nmodels = []\nmodels.append(( 'LR' , LogisticRegression()))\nmodels.append(( 'LDA' , LinearDiscriminantAnalysis()))\nmodels.append(( 'KNN' , KNeighborsClassifier()))\nmodels.append(( 'CART' , DecisionTreeClassifier()))\nmodels.append(( 'NB' , GaussianNB()))\nmodels.append(('SVM', SVC(random_state=seed)))\nmodels.append(('RF', RandomForestClassifier(n_estimators=num_trees, random_state=seed)))\n# evaluate each model\nresults = []\nnames = []\nfor name, model in models:\n  kfold = KFold(n_splits=10, random_state=seed)\n  cv_results = cross_val_score(model, x_train, y_train, cv=kfold, scoring= 'accuracy' )\n  results.append(cv_results)\n  names.append(name)\n  msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n  print(msg)","482f8293":"rf = RandomForestClassifier(n_estimators=num_trees, random_state=seed)\nrf.fit(x_train, y_train)\npredictions = rf.predict(x_test)\nprint(accuracy_score(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))","b8715133":"# test data baru\n# ket: \n# 33.8 = HAEMATOCRIT\n# 11.1 = HAEMOGLOBINS\n# 4.18 = ERYTHROCYTE\n# 4.6 = LEUCOCYTE\n# 150 = THROMBOCYTE\n# 26.6 = MCH \n# 32.8 = MCHC\n# 80.9 = MCV\n# 33 = AGE\n# 0 = SEX\nprediction_rf=rf.predict([[33.8,11.1,4.18,4.6,150,26.6,32.8,80.9,33,0]])\nscore1 = rf.score(x_test, y_test)\nif prediction_rf[0] == 1:\n    pred = \"in care patient\"\nelse:\n    pred = \"out care patient\"\nprint('Prediksi :',pred)\nprint(\"Test score: {0:.2f} %\".format(100 * score1))  ","aac7dcdc":"# ubah label  \nlbl = {1 : \"in care patient\", 0 : 'out care patient'}\nlabel = pd.DataFrame(y_test)\nlabel[\"SOURCE\"] = label[\"SOURCE\"].map(lbl)","764bb477":"submission = pd.merge(x_test,label, left_index=True, right_index=True)","a6b0025d":"# simpan ke csv\nsubmission.to_csv(\"submission.csv\")\nprint(\"Done\")","733e38c0":"* LR: 0.709470 (0.026042)\n* LDA: 0.707576 (0.026901)\n* KNN: 0.690603 (0.030742)\n* CART: 0.658125 (0.030274)\n* NB: 0.694744 (0.026783)\n* SVM: 0.698152 (0.026260)\n* RF: 0.755951 (0.015866)\n\nRF paling tinggi 75%","bbd020a9":"Menyimpan hasil Test","693ac504":"Tingkatkan Akurasi"}}