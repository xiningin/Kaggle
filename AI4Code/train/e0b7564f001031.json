{"cell_type":{"621c5437":"code","ecfe20e7":"code","b6dd99b8":"code","ab27f1cc":"code","002c2ca3":"code","a427617a":"code","4d864ec7":"code","3d2aa8ba":"code","e30a6e79":"code","bf6f2695":"code","9b393db1":"code","01b20388":"code","2f18816f":"code","e25636a8":"code","08fe45ea":"code","b4256252":"code","b3fc32eb":"code","2deebcdc":"code","243b7749":"code","ac4b5ff9":"code","41efed8a":"code","75e44bee":"code","d97ad2b2":"code","ba28af1d":"code","dbcc59b0":"code","6d9eaaf8":"code","d0c7383f":"code","632ea0a2":"code","9c054f4c":"code","d086dd84":"code","153a4d2d":"code","c1b1e629":"code","0d451e25":"code","903fa9e0":"code","43360eb5":"code","42ea6b1f":"code","7affd264":"code","4e0a0995":"code","adb51336":"code","2b3e70a9":"code","da126435":"code","a9b82e71":"code","6dfbabc1":"code","22215bf3":"code","1c9a5bbc":"code","0824753a":"code","d8dcf563":"code","1e909220":"code","b2f9040b":"code","0536de51":"code","e13eea05":"code","65e87423":"markdown","4aa3eebc":"markdown","a5d5ef7b":"markdown","230ddf89":"markdown","0629d77b":"markdown","0d700b11":"markdown","7ba0cd5c":"markdown","053b3bc8":"markdown","94674db4":"markdown","2deab03e":"markdown","513e494c":"markdown","2aa67777":"markdown","28ad4a4e":"markdown","133beabc":"markdown","f80f370b":"markdown","934bd6ad":"markdown","55333d81":"markdown","caa6c64e":"markdown","d7305ece":"markdown","65498e39":"markdown","f95d7a9a":"markdown","3e6a8bfe":"markdown","64fbf819":"markdown","0e7d08aa":"markdown","7a88794b":"markdown","9cfcdfc3":"markdown","b2816951":"markdown","6ff8d083":"markdown","5bcd2e36":"markdown","6e67bfb6":"markdown","ad5dadb5":"markdown","8c433e80":"markdown"},"source":{"621c5437":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ecfe20e7":"df = pd.read_csv('\/kaggle\/input\/rental-price-of-indias-it-capital-pune-mh-ind\/train.csv')\n\nprint(df.shape)\ndf.head()","b6dd99b8":"df.describe()","ab27f1cc":"df.isnull().sum()","002c2ca3":"target = 'rent'","a427617a":"df.sort_values(by = [target], ascending = False).head()","4d864ec7":"df.drop((df.loc[df['rent'] == max(df['rent'])]).index, inplace = True)","3d2aa8ba":"df.boxplot(column = target)\nplt.show()","e30a6e79":"df[target].hist(bins = 15)\nplt.xlabel(target)\nplt.ylabel('count')\nplt.show()","bf6f2695":"## log transformation\n\ndf[target] = np.log(df[target])\n\ndf[target].hist(bins = 15)\nplt.xlabel(target)\nplt.ylabel('count')\nplt.show()","9b393db1":"num_features = [feature for feature in df.columns if df[feature].dtype != 'O' and feature != target]\n\ndf[num_features].head()","01b20388":"dis_features = [feature for feature in num_features if len(df[feature].unique()) < 20 and feature != target]\n\nprint(dis_features)","2f18816f":"for feature in dis_features:\n    df.groupby(feature)[target].median().plot.bar()\n    \n    plt.xlabel(feature)\n    plt.ylabel(target)\n    plt.title('{} vs log({})_median'.format(feature, target))\n    plt.show()","e25636a8":"con_features = [feature for feature in num_features if feature not in dis_features and feature != target]\n\nprint(con_features)","08fe45ea":"for feature in con_features:\n    df[feature].hist(bins = 15)\n    \n    plt.xlabel(feature)\n    plt.ylabel('count')\n    plt.show()","b4256252":"data = df.copy()\n\nfor feature in con_features:\n    \n    extreme = int(data[feature].median() + 2 * data[feature].std()) + 1\n    print('Values being replaced: {}'.format(len(data.loc[data[feature] > extreme])))\n    data[feature] = np.where(data[feature] > extreme, extreme, data[feature])\n    data[feature] = data[feature] ** 0.5\n    \n    data[feature].hist(bins = 15)\n    \n    plt.xlabel(feature)\n    plt.ylabel('count')\n    plt.show()","b3fc32eb":"data = df.copy()\n\nfor feature in con_features:\n    \n    extreme = int(data[feature].median() + 2 * data[feature].std()) + 1\n    data[feature] = np.where(data[feature] > extreme, extreme, data[feature])\n    data[feature] = data[feature] ** 0.5\n    \n    plt.scatter(data[feature], data[target])\n    \n    plt.xlabel(feature)\n    plt.ylabel(target)\n    plt.show()","2deebcdc":"cat_features = [feature for feature in df.columns if feature not in num_features and feature != target]\n\ndf[cat_features].head()","243b7749":"for feature in cat_features:\n    print('{}: {} categories'.format(feature, len(df[feature].unique())))","ac4b5ff9":"area = list(df['address'].astype(str))\n\narea_new = []\n\nfor a in area:\n    area_new.append(a[a.find(',') + 1: a.find(',', a.find(',') + 1)])\n    \narea_new = np.array(area_new)","41efed8a":"df['address'] = area_new\ndf['expo_rent'] = np.e ** df['rent']\ndf.head()","75e44bee":"area_mean = {}\n\nfor area in np.unique(area_new):\n    area_mean[area] = df.loc[df['address'] == area]['expo_rent'].mean()\n    \ndf['address_num'] = df['address'].map(area_mean)\ndf.head()","d97ad2b2":"df['address_num'].hist(bins = 15)\nplt.show()","ba28af1d":"df.drop(['address', 'expo_rent'], axis = 1, inplace = True)","dbcc59b0":"df.drop(['maintenance_amt'], axis = 1, inplace = True)","6d9eaaf8":"cat_features.remove('address')\ncat_features.remove('maintenance_amt')","d0c7383f":"df['furnishing'] = np.where(df['furnishing'] == 'Unfurnishe', 'Unfurnished', df['furnishing'])\ndf['furnishing'].unique()","632ea0a2":"for feature in cat_features:\n    df.groupby(feature)[target].count().plot.bar()\n    \n    plt.xlabel(feature)\n    plt.ylabel('count')\n    plt.show()","9c054f4c":"for feature in cat_features:\n    df.groupby(feature)[target].mean().plot.bar()\n    \n    plt.xlabel(feature)\n    plt.ylabel('count')\n    plt.show()","d086dd84":"df = pd.read_csv('\/kaggle\/input\/rental-price-of-indias-it-capital-pune-mh-ind\/train.csv')\n\nprint(df.shape)\ndf.head()","153a4d2d":"df.drop((df.loc[df['rent'] == max(df['rent'])]).index, inplace = True)","c1b1e629":"area = list(df['address'].astype(str))\n\narea_new = []\n\nfor a in area:\n    area_new.append(a[a.find(',') + 1: a.find(',', a.find(',') + 1)])\n    \ndf['address'] = np.array(area_new)","0d451e25":"area_mean = {}\n\nfor area in np.unique(np.array(area_new)):\n    area_mean[area] = df.loc[df['address'] == area]['rent'].mean()\n    \ndf['address_num'] = df['address'].map(area_mean)","903fa9e0":"## log transformation of target variable\n\ndf[target] = np.log(df[target])","43360eb5":"## replacement of outliers and square root transformation of continuous features\n\nfor feature in con_features:\n    \n    extreme = int(df[feature].median() + 2 * df[feature].std()) + 1\n    df[feature] = np.where(df[feature] > extreme, extreme, df[feature])\n    df[feature] = df[feature] ** 0.5","42ea6b1f":"df.drop(['maintenance_amt', 'address'], axis = 1, inplace = True)","7affd264":"dummy_df = pd.get_dummies(df, drop_first = True)\n\nprint(dummy_df.shape)\ndummy_df.head()","4e0a0995":"cor = dummy_df[num_features].corr()\n\nplt.figure(figsize = (15, 6))\nsns.heatmap(cor, annot = True, cmap = plt.cm.CMRmap_r)\nplt.show()","adb51336":"dummy_df.drop(['bathrooms'], axis = 1, inplace = True)","2b3e70a9":"X = dummy_df.drop(['rent'], axis = 1)\ny = dummy_df['rent']","da126435":"scaler = MinMaxScaler()\n\nscaler.fit(X)\nX_scaled = scaler.transform(X)","a9b82e71":"feature_sel_model = SelectFromModel(Lasso(alpha = 0.005, random_state = 0))\nfeature_sel_model.fit(X_scaled, y)   ","6dfbabc1":"selected_features = X.columns[(feature_sel_model.get_support())]\n\nprint('total features:', X.shape[1])\nprint('selected features:', len(selected_features))\nprint('features with coefficients shrunk to 0:', np.sum(feature_sel_model.estimator_.coef_ == 0))","22215bf3":"print('Selected Features:\\n', selected_features)","1c9a5bbc":"X_lasso = X[selected_features]","0824753a":"X = X_lasso\ny = dummy_df['rent']","d8dcf563":" X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)","1e909220":"scaler = MinMaxScaler()\n\nscaler.fit(X_train)\n\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)","b2f9040b":"scores = []\n\nfor i in range(10):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n    \n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    scores.append(model.score(X_test, y_test))\n\nprint(np.mean(scores))","0536de51":"scores = []\n\nfor i in range(10):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n    \n    model = RandomForestRegressor()\n    model.fit(X_train, y_train)\n    scores.append(model.score(X_test, y_test))\n\nprint(np.mean(scores))","e13eea05":"scores = []\n\nfor i in range(10):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n    \n    model = XGBRegressor()\n    model.fit(X_train, y_train)\n    scores.append(model.score(X_test, y_test))\n\nprint(np.mean(scores))","65e87423":"## Missing Values","4aa3eebc":"## Random Forest Regression","a5d5ef7b":"# Models","230ddf89":"## XGBoost Regression","0629d77b":"## Encoding address feature","0d700b11":"#### Dealing with outliers","7ba0cd5c":"Since distribution is right skewed we can apply a log transformation","053b3bc8":"# Feature Engineering","94674db4":"### Dropping maintenance_amt ","2deab03e":"## Numerical Features","513e494c":"### Discrete Features","2aa67777":"## Dropping Features","28ad4a4e":"# EDA","133beabc":"#### Distribution","f80f370b":"## Dropping using Correlation","934bd6ad":"## Selection using Lasso","55333d81":"#### vs Target Variable","caa6c64e":"There is some discrepancy in the first entry as the price is too large","d7305ece":"## Target Variable","65498e39":"## Scaling","f95d7a9a":"### Encoding addresses by average rent in the area","3e6a8bfe":"## Dropping Rows","64fbf819":"## Encoding of Categorial Variables","0e7d08aa":"We can drop bedroom or bathrooms","7a88794b":"## Linear Regression","9cfcdfc3":"## Categorical Features","b2816951":"## Transformation of Numerical Features","6ff8d083":"### Continuous Features","5bcd2e36":"# Feature Selection","6e67bfb6":"### Distribution of categories","ad5dadb5":"### vs Target Variable","8c433e80":"#### vs Target Variable"}}