{"cell_type":{"d849515f":"code","1710fa73":"code","f2585e33":"code","e5aa9622":"code","e537be11":"code","95380008":"code","adf09a33":"code","19795a93":"code","53160332":"code","d5ae07d0":"code","974b2d43":"code","268d8100":"code","b3af8e98":"code","acb19e16":"code","a36172ad":"code","5e30888f":"code","4222738d":"markdown","1f7ba311":"markdown","7d819ec5":"markdown","63aa272b":"markdown","e0f83e33":"markdown","9c8939af":"markdown","563b167e":"markdown"},"source":{"d849515f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\nimport plotly.graph_objs as go\n\n\n# Any results you write to the current directory are saved as output.","1710fa73":"df_main = pd.read_csv(\"..\/input\/Pokemon.csv\")","f2585e33":"df_type_mean = df_main.iloc[:,[2,4,5,6,7,8,9,10]]\ndf_type_mean= df_type_mean.groupby('Type 1',as_index=False).mean()\n","e5aa9622":"plt.style.use('fivethirtyeight')\nplt.figure(figsize=(15,15))\nplt.subplot(2,1,1)\ng=sns.lineplot(x=\"Type 1\",y=\"HP\",data= df_type_mean)\n\nsns.lineplot(x=\"Type 1\",y=\"Attack\",data= df_type_mean,color=\"green\")\nsns.lineplot(x=\"Type 1\",y=\"Defense\",data= df_type_mean,color=\"red\")\n\n\n\nblue_patch = mpatches.Patch(color='blue', label='HP')\ngreen_patch = mpatches.Patch(color='green', label='Attack')\nred_patch = mpatches.Patch(color='red', label='Defense')\n\n\n\n\n\n\ng.set(xlabel='Type of pokemon', ylabel='Mean values of attributes')\n\nplt.legend(handles=[blue_patch,green_patch,red_patch])\n\n\nplt.subplot(2,1,2)\nk= sns.lineplot(x=\"Type 1\",y=\"Sp. Atk\",data= df_type_mean,color=\"yellow\")\nsns.lineplot(x=\"Type 1\",y=\"Sp. Def\",data= df_type_mean,color=\"pink\")\nsns.lineplot(x=\"Type 1\",y=\"Speed\",data= df_type_mean,color=\"black\")\n\nyellow_patch = mpatches.Patch(color='yellow', label='Special Attack')\npink_patch = mpatches.Patch(color='pink', label='Special Defense')\nblack_patch = mpatches.Patch(color='black', label='Speed')\n\n\nk.set(xlabel='Type of pokemon', ylabel='Mean values of attributes')\nplt.legend(handles=[yellow_patch,pink_patch,black_patch])\n","e537be11":"df_legendary = df_main[df_main['Legendary']==True]\ndf_legen_count = df_legendary.groupby('Type 1').size().reset_index(name='counts')\n#df_legen_count\nplt.figure(figsize=(15,10))\n\n#g=sns.barplot(x=\"Type 1\",y=\"counts\",data= df_legen_count,color='cyan').set_title('Count of legendary pokemons in each type')\ncountlegen = [go.Bar(\n          x=df_legen_count['Type 1'] ,\n    y=df_legen_count['counts'],\n      marker=dict(\n      color='rgb(49,130,189)'\n    )\n    )]\nlayout1 = go.Layout(\n    title='Count of legendary pokemons in each type'\n)\nfig1 = go.Figure(data=countlegen, layout=layout1)\niplot(fig1)","95380008":"# aggragation of water,normal and grass\ndf_normal = df_main[df_main['Type 1']=='Normal']\ndf_normal_mean = df_normal.mean().reset_index(name='mean_Values')\ndf_normal_mean=df_normal_mean.iloc[2:8,:]\ndf_normal_mean['Type']='Normal' \n\n\ndf_water = df_main[df_main['Type 1']=='Water']\ndf_water_mean = df_water.mean().reset_index(name='mean_Values')\ndf_water_mean=df_water_mean.iloc[2:8,:]\ndf_water_mean['Type']='Water'\n\ndf_grass = df_main[df_main['Type 1']=='Grass']\ndf_grass_mean = df_grass.mean().reset_index(name='mean_Values')\ndf_grass_mean=df_grass_mean.iloc[2:8,:]\ndf_grass_mean['Type']='Grass'\n\n\n\ndf_appended_WNG = df_water_mean.append(df_normal_mean)\n\ndf_appended_WNG= df_appended_WNG.append(df_grass_mean)\n#df_appended_WNG\n\n","adf09a33":"#Aggregation of Bug,Psychic and Fire\ndf_bug = df_main[df_main['Type 1']=='Bug']\ndf_bug_mean = df_bug.mean().reset_index(name='mean_Values')\ndf_bug_mean=df_bug_mean.iloc[2:8,:]\ndf_bug_mean['Type']='Bug' \n\n\ndf_psychic = df_main[df_main['Type 1']=='Psychic']\ndf_psychic_mean = df_psychic.mean().reset_index(name='mean_Values')\ndf_psychic_mean=df_psychic_mean.iloc[2:8,:]\ndf_psychic_mean['Type']='Psychic'\n\ndf_fire = df_main[df_main['Type 1']=='Fire']\ndf_fire_mean = df_fire.mean().reset_index(name='mean_Values')\ndf_fire_mean=df_fire_mean.iloc[2:8,:]\ndf_fire_mean['Type']='Fire'\n\n\n\ndf_appended_BPF = df_bug_mean.append(df_psychic_mean)\n\ndf_appended_BPF= df_appended_BPF.append(df_fire_mean)\n#df_appended_BPF","19795a93":"# Aggregation of  Rock,Electric and Ground\ndf_rock = df_main[df_main['Type 1']=='Rock']\ndf_rock_mean = df_rock.mean().reset_index(name='mean_Values')\ndf_rock_mean=df_rock_mean.iloc[2:8,:]\ndf_rock_mean['Type']='Rock' \n\n\ndf_electric = df_main[df_main['Type 1']=='Electric']\ndf_electric_mean = df_electric.mean().reset_index(name='mean_Values')\ndf_electric_mean=df_electric_mean.iloc[2:8,:]\ndf_electric_mean['Type']='Electric'\n\ndf_ground = df_main[df_main['Type 1']=='Ground']\ndf_ground_mean = df_ground.mean().reset_index(name='mean_Values')\ndf_ground_mean=df_ground_mean.iloc[2:8,:]\ndf_ground_mean['Type']='Ground'\n\n\n\ndf_appended_REG = df_rock_mean.append(df_electric_mean)\n\ndf_appended_REG= df_appended_REG.append(df_ground_mean)\n#df_appended_REG","53160332":"# Aggregation of Ghost,Dragon and dark\ndf_ghost = df_main[df_main['Type 1']=='Ghost']\ndf_ghost_mean = df_ghost.mean().reset_index(name='mean_Values')\ndf_ghost_mean=df_ghost_mean.iloc[2:8,:]\ndf_ghost_mean['Type']='Ghost' \n\n\ndf_dragon = df_main[df_main['Type 1']=='Dragon']\ndf_dragon_mean = df_dragon.mean().reset_index(name='mean_Values')\ndf_dragon_mean=df_dragon_mean.iloc[2:8,:]\ndf_dragon_mean['Type']='Dragon'\n\ndf_dark = df_main[df_main['Type 1']=='Dark']\ndf_dark_mean = df_dark.mean().reset_index(name='mean_Values')\ndf_dark_mean=df_dark_mean.iloc[2:8,:]\ndf_dark_mean['Type']='Dark'\n\n\n\ndf_appended_GDD = df_ghost_mean.append(df_dragon_mean)\n\ndf_appended_GDD= df_appended_GDD.append(df_dark_mean)\n#df_appended_GDD","d5ae07d0":"# Aggregation of Poison,fighting and steel\ndf_poison = df_main[df_main['Type 1']=='Poison']\ndf_poison_mean = df_poison.mean().reset_index(name='mean_Values')\ndf_poison_mean=df_poison_mean.iloc[2:8,:]\ndf_poison_mean['Type']='Poison' \n\n\ndf_fighting = df_main[df_main['Type 1']=='Fighting']\ndf_fighting_mean = df_fighting.mean().reset_index(name='mean_Values')\ndf_fighting_mean=df_fighting_mean.iloc[2:8,:]\ndf_fighting_mean['Type']='Fighting'\n\ndf_steel = df_main[df_main['Type 1']=='Ground']\ndf_steel_mean = df_steel.mean().reset_index(name='mean_Values')\ndf_steel_mean=df_steel_mean.iloc[2:8,:]\ndf_steel_mean['Type']='Steel'\n\n\n\ndf_appended_PFS = df_poison_mean.append(df_fighting_mean)\n\ndf_appended_PFS= df_appended_PFS.append(df_steel_mean)\n#df_appended_PFS","974b2d43":"# Aggregation of Ice,Fairy and flying\ndf_ice = df_main[df_main['Type 1']=='Ice']\ndf_ice_mean = df_ice.mean().reset_index(name='mean_Values')\ndf_ice_mean=df_ice_mean.iloc[2:8,:]\ndf_ice_mean['Type']='Ice' \n\n\ndf_fairy = df_main[df_main['Type 1']=='Fairy']\ndf_fairy_mean = df_fairy.mean().reset_index(name='mean_Values')\ndf_fairy_mean=df_fairy_mean.iloc[2:8,:]\ndf_fairy_mean['Type']='Fairy'\n\ndf_flying = df_main[df_main['Type 1']=='Flying']\ndf_flying_mean = df_flying.mean().reset_index(name='mean_Values')\ndf_flying_mean=df_flying_mean.iloc[2:8,:]\ndf_flying_mean['Type']='Flying'\n\n\n\ndf_appended_IFF = df_ice_mean.append(df_fairy_mean)\n\ndf_appended_IFF= df_appended_IFF.append(df_flying_mean)\n#df_appended_IFF","268d8100":"plt.style.use('bmh')\n\n\nplt.figure(figsize=(16,20))\n\nax1=plt.subplot(3,2,1)\nsns.barplot(x=\"index\",y=\"mean_Values\",hue='Type',data=df_appended_WNG,palette=[\"dodgerblue\", \"gold\",\"green\"]).set_title(\"Comparision between water,normal and grass\")\nax1.legend(loc='upper center', bbox_to_anchor=(0.5, 1),ncol=3, fancybox=True, shadow=True)\nax1.set_ylim(0,90)\n\n\nax2=plt.subplot(3,2,2)\nsns.barplot(x=\"index\",y=\"mean_Values\",hue='Type',data=df_appended_BPF,palette=[\"green\", \"pink\",\"red\"]).set_title(\"Comparision between Bug Phychic Fire\")\nax2.legend(loc='upper center', bbox_to_anchor=(0.5, 1.02),ncol=3, fancybox=True, shadow=True)\nax2.set_ylim(0,110)\n\nax3=plt.subplot(3,2,3)\nsns.barplot(x=\"index\",y=\"mean_Values\",hue='Type',data=df_appended_REG,palette=[\"brown\", \"yellow\",\"pink\"]).set_title(\"Comparision between rock electric ground\")\nax3.legend(loc='upper center', bbox_to_anchor=(0.5, 1.03),ncol=3, fancybox=True, shadow=True)\nax3.set_ylim(0,110)\n\n\nax4=plt.subplot(3,2,4)\nsns.barplot(x=\"index\",y=\"mean_Values\",hue='Type',data=df_appended_GDD,palette=[\"grey\", \"red\",\"black\"]).set_title(\"Comparision between Ghost dragon dark\")\nax4.legend(loc='upper center', bbox_to_anchor=(0.65, 1),ncol=3, fancybox=True, shadow=True)\nax4.set_ylim(0,110)\n\n\nax5=plt.subplot(3,2,5)\nsns.barplot(x=\"index\",y=\"mean_Values\",hue='Type',data=df_appended_PFS,palette=[\"forestgreen\", \"orange\",\"grey\"]).set_title(\"Comparision between poison fighting steel\")\nax5.legend(loc='upper center', bbox_to_anchor=(0.5, 1),ncol=3, fancybox=True, shadow=True)\nax5.set_ylim(0,110)\n\n\n\nax6=plt.subplot(3,2,6)\nsns.barplot(x=\"index\",y=\"mean_Values\",hue='Type',data=df_appended_IFF,palette=[\"cyan\", \"silver\",\"indigo\"]).set_title(\"Comparision between Ice Fairy Flying\")\nax6.legend(loc='upper center', bbox_to_anchor=(0.5, 1),ncol=3, fancybox=True, shadow=True)\nax6.set_ylim(0,110)\n\n","b3af8e98":"df_main_nonull = df_main.dropna()\n#df_main_nonull.head()\n","acb19e16":"df_main_nonull =  df_main_nonull.groupby(['Type 1','Type 2']).size().reset_index(name='counts')\n#df_main_nonull.head()","a36172ad":"plt.figure(figsize=(20,10))\nax23=sns.barplot(x=\"Type 1\",y=\"counts\",data=df_main_nonull,hue=\"Type 2\")\nax23.legend_.remove()\nax23.legend(loc='upper center', bbox_to_anchor=(0.5, 1),ncol=3, fancybox=True, shadow=True)\n","5e30888f":"df_Genecount = df_main['Generation'].value_counts().to_frame()\ndf_Genecount['Gene'] = df_Genecount.index\ndf_Genecount.columns = ['Counts','Generation']\ncountGene = [go.Bar(\n          x=df_Genecount['Generation'] ,\n    y=df_Genecount['Counts'],\n      marker=dict(\n      color='rgb(49,130,189)'\n    )\n    )]\n\nfig2= go.Figure(data=countGene)\niplot(fig2)\n","4222738d":"## Count of pokemons in each Generation","1f7ba311":"<center><H1>Analysing Pokemons<H1><center>","7d819ec5":"## Count of legendary pokemons in each type ","63aa272b":"## Comparision between mean of all attributes of all pokemon types","e0f83e33":"## Further classifications across Type 1 pokemons","9c8939af":"## Comparision between various attributes of different types of pokemons","563b167e":"* [Comparision between various attributes of different types of pokemons](#Comparision-between-various-attributes-of-different-types-of-pokemons)\n* [Count of legendary pokemons in each type](#Count-of-legendary-pokemons-in-each-type)\n* [Comparision between mean of all attributes of all pokemon types](#Comparision-between-mean-of-all-attributes-of-all-pokemon-types)\n* [Further classifications across Type 1 pokemons](#Further-classifications-across-Type-1-pokemons)\n* [Count of pokemons in each Generation](#Count-of-pokemons-in-each-Generation)"}}