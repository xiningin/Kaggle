{"cell_type":{"5c4fa143":"code","7fbbae54":"code","3fb6fe70":"code","37a4d237":"code","e9b1904c":"code","8703c93f":"code","2406e057":"code","d8b1af6e":"code","c1c44f1b":"code","d9fcd600":"code","68358912":"code","26804a52":"code","c908b87f":"code","ec9e879f":"code","c88bb2b5":"code","39065e6e":"code","7a74e9a9":"code","41579dc4":"code","55f916b4":"code","0bfe8018":"code","8b878df0":"code","a9b16dbc":"code","4ab315b6":"code","e575dd1b":"code","93da317b":"code","d7e5e957":"code","054043d8":"code","6778680b":"code","5b76e23a":"code","6bcf2346":"code","5542ee80":"code","7e266793":"code","85e134b5":"code","1d94f86a":"code","a2937743":"code","69af0dfb":"code","9495c41a":"code","782937e9":"code","2cccb139":"code","4c8112a8":"code","a20e5e44":"code","b0e63d25":"code","7c520e4a":"code","63d70208":"code","bd1e966d":"code","76b41c16":"code","f767667e":"code","b2ab3894":"code","2443fdcb":"code","01c4945b":"code","7aa129a0":"code","601d159c":"code","470cf3e3":"code","5ae58773":"code","6160fd70":"code","607d7354":"code","7e30750b":"code","c2aaf8d1":"code","79c21b02":"code","c57d39c9":"code","0a74afcc":"code","4942f9a5":"code","06bb6170":"code","c53296f4":"code","16965a88":"code","dd61d1e9":"code","2ca749fa":"code","17c46b6d":"code","caf42f3d":"code","093204a4":"code","6ec0f399":"code","04721dba":"code","95cb8437":"code","9f2a5a3f":"code","67c0a1b8":"code","4a284947":"code","d7c011a8":"code","c0b22295":"code","211b2dd8":"markdown"},"source":{"5c4fa143":"import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer, HashingVectorizer\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nimport re\nimport nltk\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB,GaussianNB\nimport itertools\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom gensim.models import Word2Vec\nfrom sklearn.linear_model import PassiveAggressiveClassifier,LogisticRegression\nfrom tensorflow.keras.preprocessing.text import one_hot\nfrom tensorflow.keras.layers import Embedding,LSTM,Dense,Dropout\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential","7fbbae54":"df = pd.read_csv('..\/input\/fake-news\/train.csv')\ndf_test = pd.read_csv('..\/input\/fake-news\/test.csv')","3fb6fe70":"df","37a4d237":"df = df.dropna()\ndf.reset_index(inplace = True)","e9b1904c":"df","8703c93f":"X = df.drop('label',axis =1)\nY = df['label']","2406e057":"ps = PorterStemmer()\ncorpus = []\nwords = []\nfor i in range(0,len(df)):\n    review = re.sub('[^a-zA-Z0-9]',' ',df['title'][i])\n    review = review.lower()\n    review = review.split()\n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    statements = ' '.join(review)\n    corpus.append(statements)\n    words.append(review)","d8b1af6e":"count = CountVectorizer(max_features=5000,ngram_range=(1,3))\nX_count = count.fit_transform(corpus).toarray()\ntfidf = TfidfVectorizer(max_features=5000,ngram_range=(1,3))\nX_tfidf = tfidf.fit_transform(corpus).toarray()\n","c1c44f1b":"corpus","d9fcd600":"X_count.shape","68358912":"Y =df[\"label\"]","26804a52":"X_train_count,X_test_count,Y_train_count,Y_test_count = train_test_split(X_count,Y,test_size=0.33,random_state = 27)\nX_train_tfidf,X_test_tfidf,Y_train_tfidf,Y_test_tfidf = train_test_split(X_tfidf,Y,test_size=0.33,random_state = 27)\n","c908b87f":"count.get_feature_names()[:10]","ec9e879f":"count.get_params()","c88bb2b5":"df_count = pd.DataFrame(X_train_count,columns = tfidf.get_feature_names())\ndf_count.head()","39065e6e":"df_tfidf = pd.DataFrame(X_train_tfidf,columns = tfidf.get_feature_names())\ndf_tfidf.head()","7a74e9a9":"classfier_count = MultinomialNB(alpha=0.1)\nclassfier_tfidf = MultinomialNB(alpha=0.1)","41579dc4":"classfier_count.fit(X_train_count,Y_train_count)\nY_pred_count = classfier_count.predict(X_test_count)\nclassfier_tfidf.fit(X_train_tfidf,Y_train_tfidf)\nY_pred_tfidf = classfier_tfidf.predict(X_test_tfidf)","55f916b4":"acc_count = accuracy_score(Y_test_count,Y_pred_count)\nclassification_count = classification_report(Y_test_count,Y_pred_count)\nconfusion_matrix_count = confusion_matrix(Y_test_count,Y_pred_count)\nacc_tfidf = accuracy_score(Y_test_tfidf,Y_pred_tfidf)\nclassification_tfidf = classification_report(Y_test_tfidf,Y_pred_tfidf)\nconfusion_matrix_tfidf = confusion_matrix(Y_test_tfidf,Y_pred_tfidf)","0bfe8018":"print(\"FOR COUNT VECTORIZER: \\n\")\nprint(\" \\n Accuracy : \",acc_count,\"\\n\",\"Classification report \\n\",classification_count,\"\\n\",\"Confusion matrix \\n\",confusion_matrix_count,\"\\n\\n\\n\")\nprint(\"FOR TFIDF VECTORIZER: \\n\")\nprint(\" \\n Accuracy : \",acc_tfidf,\"\\n\",\"Classification report \\n\",classification_tfidf,\"\\n\",\"Confusion matrix \\n\",confusion_matrix_tfidf)","8b878df0":"highest_score_count = 0\nhighest_score_tfidf = 0\nprint(\"Choosing Alpha for Count Vectorizer \\n\")\nfor alpha in np.arange(0,1,0.1):\n    sub_classifier_count = MultinomialNB(alpha=alpha)\n    sub_classifier_count.fit(X_train_count,Y_train_count)\n    Y_pred_hyper_count = sub_classifier_count.predict(X_test_count)\n    score = accuracy_score(Y_test_count,Y_pred_hyper_count)\n    if score > highest_score_count:\n        highest_score_count = score\n        classfier_count = sub_classifier_count\n    print(\"Alpha : {},Score {}\".format(alpha,score))\nprint(\"\\n Choosing Alpha for Tfidf Vectorizer \\n\")\nfor alpha in np.arange(0,1,0.1):\n    sub_classifier_tfidf = MultinomialNB(alpha=alpha)\n    sub_classifier_tfidf.fit(X_train_tfidf,Y_train_tfidf)\n    Y_pred_hyper_tfidf = sub_classifier_tfidf.predict(X_test_tfidf)\n    score = accuracy_score(Y_test_tfidf,Y_pred_hyper_tfidf)\n    if score > highest_score_tfidf:\n        highest_score_tfidf = score\n        classfier_tfidf = sub_classifier_tfidf\n    print(\"Alpha : {},Score {}\".format(alpha,score))\nprint(\"\\n\\n Best Alpha value for count vectorizer:\",classfier_count)\nprint(\"\\n Best Alpha value for tfidf vectorizer:\" ,classfier_tfidf)","a9b16dbc":"feature_names_count = count.get_feature_names()\nfeature_names_tfidf = tfidf.get_feature_names()","4ab315b6":"sub_classifier_count.coef_","e575dd1b":"#Most Fake words\nprint(\"\\n Fake words from Count Vectorizer \\n\")\nfor i in (sorted(zip(sub_classifier_count.coef_[0],feature_names_count))[:10]):\n          print(i,\"\\n\")\nprint(\"\\n Fake words from Tfidf Vectorizer \\n\")\nfor i in (sorted(zip(sub_classifier_tfidf.coef_[0],feature_names_tfidf))[:10]):\n    print(i,\"\\n\")","93da317b":"#Real News\nprint(\"\\n Real words from Count Vectorizer \\n\")\nfor i in (sorted(zip(sub_classifier_count.coef_[0],feature_names_count),reverse=True)[:10]):\n          print(i,\"\\n\")\nprint(\"\\n Real words from Tfidf Vectorizer \\n\")\nfor i in (sorted(zip(sub_classifier_tfidf.coef_[0],feature_names_tfidf),reverse=True)[:10]):\n    print(i,\"\\n\")","d7e5e957":"passive_classifier_count = PassiveAggressiveClassifier(n_iter_no_change = 50)\npassive_classifier_count.fit(X_train_count,Y_train_count)\nY_pred_count_passive = passive_classifier_count.predict(X_test_count)\npassive_classifier_tfidf = PassiveAggressiveClassifier(n_iter_no_change = 50)\npassive_classifier_tfidf.fit(X_train_tfidf,Y_train_tfidf)\nY_pred_tfidf_passive = passive_classifier_count.predict(X_test_tfidf)","054043d8":"acc_count_passive = accuracy_score(Y_test_count,Y_pred_count_passive)\nclassification_count_passive = classification_report(Y_test_count,Y_pred_count_passive)\nconfusion_matrix_count_passive = confusion_matrix(Y_test_count,Y_pred_count_passive)\nacc_tfidf_passive = accuracy_score(Y_test_tfidf,Y_pred_tfidf_passive)\nclassification_tfidf_passive = classification_report(Y_test_tfidf,Y_pred_tfidf_passive)\nconfusion_matrix_tfidf_passive = confusion_matrix(Y_test_tfidf,Y_pred_tfidf_passive)","6778680b":"print(\"FOR COUNT VECTORIZER - Passive Aggressive Model: \\n\")\nprint(\" \\n Accuracy : \",acc_count_passive,\"\\n\",\"Classification report \\n\\n\",classification_count_passive,\"\\n\",\"Confusion matrix \\n\\n\",confusion_matrix_count_passive,\"\\n\\n\\n\")\nprint(\"FOR TFIDF VECTORIZER - Passive Aggressive Model: \\n\")\nprint(\" \\n Accuracy : \",acc_tfidf_passive,\"\\n\",\"Classification report \\n\\n\",classification_tfidf_passive,\"\\n\",\"Confusion matrix \\n\\n\",confusion_matrix_tfidf_passive)","5b76e23a":"stopwords.words(\"english\")","6bcf2346":"wordvec = Word2Vec(words,min_count=1)","5542ee80":"vocab = wordvec.wv.vocab","7e266793":"vocab","85e134b5":"similar = wordvec.wv.most_similar('hillari')\nsimilar","1d94f86a":"vector = wordvec.wv[\"hillari\"]\nvector","a2937743":"for i,j in zip(words,range(0,len(words))):\n    print(j,i)","69af0dfb":"words[562]","9495c41a":"rows_to_be_removed = []\nfor i,j in zip(words,range(0,500000)):\n    if i == []:\n        rows_to_be_removed.append(j)","782937e9":"len(rows_to_be_removed)","2cccb139":"series= pd.Series(words)","4c8112a8":"df = pd.DataFrame(series,columns = [\"news\"])","a20e5e44":"df","b0e63d25":"df.drop(df.index[rows_to_be_removed], inplace=True)","7c520e4a":"def document_vector(doc):\n    doc = [word for word in doc if word in wordvec.wv.vocab]\n    return np.mean(wordvec.wv[doc],axis = 0)","63d70208":"X_wordvec = pd.DataFrame(df.news.apply(document_vector))\nX_wordvec.reset_index(inplace=True,drop =True)","bd1e966d":"X_wordvec","76b41c16":"Y_wordvec = Y.drop(index=rows_to_be_removed)\nY_wordvec = Y_wordvec.reset_index(drop =True)","f767667e":"Y_wordvec","b2ab3894":"X_train_wordvec,X_test_wordvec,Y_train_wordvec,Y_test_wordvec = train_test_split(X_wordvec,Y_wordvec,test_size=0.33,random_state = 27)","2443fdcb":"lr = LogisticRegression()","01c4945b":"X_train_wordvec = X_train_wordvec.squeeze('columns')\nX_train_wordvec","7aa129a0":"X_test_wordvec = X_test_wordvec.squeeze('columns')\nX_test_wordvec","601d159c":"lr.fit(list(X_train_wordvec),Y_train_wordvec)","470cf3e3":"Y_pred_wordvec_log = lr.predict(list(X_test_wordvec))","5ae58773":"accuracy_score(Y_test_wordvec,Y_pred_wordvec_log)","6160fd70":"classfier_wordvec = GaussianNB()","607d7354":"classfier_wordvec.fit(list(X_train_wordvec),Y_train_wordvec)\nY_pred_wordvec_multi = classfier_wordvec.predict(list(X_test_wordvec))","7e30750b":"accuracy_score(Y_test_wordvec,Y_pred_wordvec_multi)","c2aaf8d1":"df_test","79c21b02":"ps = PorterStemmer()\ncorpus_test = []\nfor i in range(0,len(df_test)):\n    review = re.sub('[^a-zA-Z0-9]',' ',str(df_test['title'][i]))\n    review = review.lower()\n    review = review.split()\n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    statements = ' '.join(review)\n    corpus_test.append(statements)\n    words.append(review)","c57d39c9":"df_test.isna().sum()","0a74afcc":"count_test = CountVectorizer(max_features=5000,ngram_range=(1,3))\nX_test_count = count.fit_transform(corpus_test).toarray()","4942f9a5":"Y_pred_count_passive = passive_classifier_count.predict(X_test_count)","06bb6170":"submission= pd.DataFrame({\"id\":df_test.id,\"label\":Y_pred_count_passive})\nsubmission.head()","c53296f4":"filename = \"submission.csv\"\nsubmission.to_csv(filename, index=False)","16965a88":"voc_size = 5000\nsent_length=20\nembedding_vector_features=40","dd61d1e9":"messages=X.copy()","2ca749fa":"messages['title'][1]","17c46b6d":"messages.reset_index(inplace=True)","caf42f3d":"onehot_repr=[one_hot(words,voc_size)for words in corpus] \nonehot_repr","093204a4":"embedded_docs=pad_sequences(onehot_repr,padding='post',maxlen=sent_length)\nprint(embedded_docs)","6ec0f399":"embedded_docs[0]","04721dba":"model=Sequential()\nmodel.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))\nmodel.add(Dropout(0.3))\nmodel.add(LSTM(100))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nprint(model.summary())","95cb8437":"X_final=np.array(embedded_docs)\ny_final=np.array(Y)","9f2a5a3f":"X_final.shape,y_final.shape","67c0a1b8":"X_train_embed, X_test_embed, Y_train_embed, Y_test_embed = train_test_split(X_final, y_final, test_size=0.33, random_state=27)","4a284947":"model.fit(X_train_embed,Y_train_embed,validation_data=(X_test_embed,Y_test_embed),epochs=20,batch_size=64)","d7c011a8":"Y_pred_embed=model.predict_classes(X_test_embed)","c0b22295":"accuracy_score(Y_test_embed,Y_pred_embed)","211b2dd8":"## Keras Word Embeddings"}}