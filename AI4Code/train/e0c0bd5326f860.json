{"cell_type":{"088d3525":"code","3939f43c":"code","a130bbf4":"code","d40f0e94":"code","b281fc45":"code","5dcdeb5e":"code","94094dfb":"code","9a0ed17a":"code","7c8a0519":"code","1acc853d":"code","8e464476":"code","7b0ef953":"code","901ea0a8":"code","c2ca4d12":"code","f903b88b":"code","0a9aee56":"code","c842ef5d":"code","96833b8a":"code","435ad9e9":"code","fca15bfe":"code","3b03d56d":"code","6bc589de":"code","2812e0f3":"code","e23f24be":"code","8318b01b":"code","d5df6999":"code","8f3c29f2":"code","cf9e3349":"code","04636ba4":"code","259eb023":"code","8bcf9787":"code","4669c613":"code","c89cbb1d":"code","3840ac6d":"code","7dab3dbe":"code","eb8ecabd":"code","f0529e8a":"code","96c3773f":"code","d855f523":"code","8c14ac2e":"code","02b8ebb0":"code","97f06322":"code","013506f7":"code","2d9769de":"code","c54d7600":"code","4fafe1c3":"code","76a627eb":"code","4998c141":"code","fbf01ab8":"code","a2bc8c8b":"code","fe2cc820":"code","117402e5":"code","d4ca5079":"code","06e05599":"code","c3c50915":"code","d91777cb":"code","28e847a7":"code","f9a65ded":"code","b724a4a2":"code","11a33535":"code","3542b453":"code","6c2947f4":"code","a9029200":"code","a4da077a":"code","618d1bef":"code","954d7177":"code","1b303d61":"code","cee35df8":"code","125f39f6":"code","a9fd3336":"code","352b4b49":"code","53047f1c":"code","b5758911":"code","d9a045cd":"code","4739bf8a":"code","cce23c76":"code","5a5cf6b0":"code","eb03948b":"code","c3944700":"code","a9dade6b":"code","0f00f064":"code","fc0b0c30":"code","05ec70fa":"code","d53c2a55":"code","c53f33f0":"code","5de04e49":"code","30e299ad":"code","ff3fc96a":"code","c7756960":"code","62e94aa9":"code","5929db1e":"code","1880a079":"code","39a76512":"code","88800ebc":"code","1baa0c79":"code","6fd89728":"code","aa0e3bad":"code","d17a6a7a":"code","94a5a4a7":"code","4cb54abb":"code","d92a7b61":"code","46e05d34":"code","8cc60663":"code","27b63d02":"code","9edefd52":"code","f52cdb10":"code","8e49e3a7":"code","2ac5ea30":"code","06ebeba4":"code","c30cd7fe":"code","ecbbcea5":"code","94315645":"code","13cf3fad":"code","a972f27f":"code","aa907a1a":"code","fb39b1b7":"code","7ff3ef5c":"markdown","44f47a8f":"markdown","228bb7d1":"markdown","d723b01d":"markdown","3e0ee6cf":"markdown","ea9da848":"markdown","2e83e85e":"markdown","fbce427a":"markdown","6b1abfbb":"markdown","2ff17b64":"markdown","bd1552f4":"markdown","723408a1":"markdown","a3f4e403":"markdown","99b3f546":"markdown","53c0f65c":"markdown","102857d6":"markdown","df09acf5":"markdown","aead8410":"markdown","d57fbcb4":"markdown","8527aa7b":"markdown","e00bf25d":"markdown","49e2a581":"markdown","2af8a526":"markdown","fa8604d8":"markdown","1ad5216a":"markdown","56fb4648":"markdown","616495f5":"markdown","93661dfe":"markdown","5b9a8769":"markdown","c5564432":"markdown","3101c317":"markdown","5441450b":"markdown","19bc67b6":"markdown","aefdade7":"markdown","b524e580":"markdown","ab2521ef":"markdown","933c9e86":"markdown","9a4ab3bc":"markdown","dc1b2638":"markdown","78bf1c51":"markdown","12f5b6a1":"markdown","6fab2359":"markdown","b86a113e":"markdown","93e1fc4c":"markdown","c24e168e":"markdown","64b1b18d":"markdown","5779a4a9":"markdown","d6c7dc84":"markdown","2a376220":"markdown"},"source":{"088d3525":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\nimport os\nfor dirname, _, filenames in os.walk(\"\/kaggle\/input\"):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# Any results you write to the current directory are saved as output.","3939f43c":"data = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/train.csv')\ndata.head()","a130bbf4":"data.info()","d40f0e94":"data.corr()","b281fc45":"#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","5dcdeb5e":"data.head(10)","94094dfb":"data.columns","9a0ed17a":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.store_nbr.plot(kind = 'line', color = 'g',label = 'store_nbr',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.sales.plot(color = 'r',label = 'sales',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","7c8a0519":"# Scatter Plot \n# x = attack, y = defense\ndata.plot(kind='scatter', x='store_nbr', y='sales',alpha = 0.5,color = 'red')\nplt.xlabel('store_nbr')              # label = name of label\nplt.ylabel('sales')\nplt.title('store_nbr sales Scatter Plot')            # title = title of plot","1acc853d":"# Histogram\n# bins = number of bar in figure\ndata.store_nbr.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","8e464476":"# clf() = cleans it up again you can start a fresh\ndata.store_nbr.plot(kind = 'hist',bins = 50)\nplt.clf()\n# We cannot see plot due to clf()","7b0ef953":"#create dictionary and look its keys and values\ndictionary = {'spain' : 'madrid','usa' : 'vegas'}\nprint(dictionary.keys())\nprint(dictionary.values())","901ea0a8":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary['spain'] = \"barcelona\"    # update existing entry\nprint(dictionary)\ndictionary['france'] = \"paris\"       # Add new entry\nprint(dictionary)\ndel dictionary['spain']              # remove entry with key 'spain'\nprint(dictionary)\nprint('france' in dictionary)        # check include or not\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)\n","c2ca4d12":"# In order to run all code you need to take comment this line\n#del dictionary         # delete entire dictionary     \nprint(dictionary)       # it gives error because dictionary is deleted","f903b88b":"data = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/stores.csv')\ndata.head()\n","0a9aee56":"series = data['city']        # data['Defense'] = series\nprint(type(series))\ndata_frame = data[['city']]  # data[['Defense']] = data frame\nprint(type(data_frame))","c842ef5d":"# Comparison operator\nprint(3 > 2)\nprint(3!=2)\n# Boolean operators\nprint(True and False)\nprint(True or False)","96833b8a":"# 1 - Filtering Pandas data frame\nx = data['cluster']>10     # There are only 19 items who have higher cluster value than 10\ndata[x]","435ad9e9":"# 2 - Filtering pandas with logical_and\n# There are only 9 items who have higher cluster value than 10 and higher store_nbr value than 20\ndata[np.logical_and(data['cluster']>10, data['store_nbr']>20 )]","fca15bfe":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data['cluster']>10) & (data['store_nbr']>20)]","3b03d56d":"# Stay in loop if condition( i is not equal 5) is true\ni = 0\nwhile i != 5 :\n    print('i is: ',i)\n    i +=1\nprint(i,' is equal to 5')","6bc589de":"# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in data[['cluster']][0:1].iterrows():\n    print(index,\" : \",value)\n\n","2812e0f3":"# example of what we learn above\ndef tuple_ex():\n    \"\"\" return defined t tuple\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuple_ex()\nprint(a,b,c)","e23f24be":"# guess prints what\nx = 2\ndef f():\n    x = 3\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope","8318b01b":"# What if there is no local scope\nx = 5\ndef f():\n    y = 2*x        # there is no local scope x\n    return y\nprint(f())         # it uses global scope x  \n# First local scope searched, then global scope searched, if two of them cannot be found lastly built in scope searched.","d5df6999":"# How can we learn what is built in scope\nimport builtins\ndir(builtins)","8f3c29f2":"#nested function\ndef square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())    ","cf9e3349":"# default arguments\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n# what if we want to change default arguments\nprint(f(5,4,3))","04636ba4":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():               # If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(key, \" \", value)\nf(country = 'spain', capital = 'madrid', population = 123456)","259eb023":"# lambda function\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","8bcf9787":"number_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","4669c613":"# iteration example\nname = \"ronaldo\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration\n","c89cbb1d":"# zip example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","3840ac6d":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuple\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","7dab3dbe":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","eb8ecabd":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","f0529e8a":"# lets return pokemon csv and make one more list comprehension example\n# lets classify pokemons whether they have high or low speed. Our threshold is average speed.\nthreshold = sum(data.store_nbr)\/len(data.store_nbr)\ndata[\"store_nbr_level\"] = [\"high\" if i > threshold else \"low\" for i in data.store_nbr]\ndata.loc[:10,[\"store_nbr_level\",\"store_nbr\"]] # we will learn loc more detailed later","96c3773f":"data = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/oil.csv')\ndata.head()  # head shows first 5 rows","d855f523":"# tail shows last 5 rows\ndata.tail()","8c14ac2e":"# columns gives column names of features\ndata.columns","02b8ebb0":"# shape gives number of rows and columns in a tuble\ndata.shape","97f06322":"# info gives data type like dataframe, number of sample or row, number of feature or column, feature types and memory usage\ndata.info()","013506f7":"# For example lets look frequency of dcoilwtico types\nprint(data['dcoilwtico'].value_counts(dropna =False))  # if there are nan values that also be counted\n","2d9769de":"1,2,3,4,200","c54d7600":"# For example max dcoilwtico is 110.62 or min defense is 26.19\ndata.describe() #ignore null entries","4fafe1c3":"data = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/train.csv')\ndata.head()","76a627eb":"# For example: \ndata.boxplot(column='store_nbr',by = 'onpromotion')","4998c141":"data = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/holidays_events.csv')\ndata.head()","fbf01ab8":"# Firstly I create new data from pokemons data to explain melt nore easily.\ndata_new = data.head()    # I only take 5 rows into new data\ndata_new","a2bc8c8b":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'locale_name', value_vars= ['type','date'])\nmelted","fe2cc820":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'locale_name', columns = 'variable',values='value')","117402e5":"# Firstly lets create 2 data frame\ndata1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","d4ca5079":"data1 = data['description'].head()\ndata2= data['locale_name'].head()\nconc_data_col = pd.concat([data1,data2],axis =1) # axis = 1 : adds dataframes in column\nconc_data_col","06e05599":"data.dtypes","c3c50915":"# lets convert object(str) to categorical and int to float.\ndata['locale'] = data['locale'].astype('category')\ndata['description'] = data['description'].astype('string')","d91777cb":"# As you can see Type 1 is converted from object to categorical\n# And Speed ,s converted from int to float\ndata.dtypes","28e847a7":"data = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/oil.csv')\ndata.head()","f9a65ded":"# Lets look at does data have nan value\n# As you can see there are 1218 entries. However dcoilwtico has 1175 non-null object so it has 43 null object.\ndata.info()","b724a4a2":"# Lets chech dcoilwtico\ndata[\"dcoilwtico\"].value_counts(dropna =False)\n# As you can see, there are 43 NAN value","11a33535":"# Lets drop nan values\ndata1=data   # also we will use data to fill missing value so I assign it to data1 variable\ndata1[\"dcoilwtico\"].dropna(inplace = True)  # inplace = True means we do not assign it to new variable. Changes automatically assigned to data\n# So does it work ?","3542b453":"#  Lets check with assert statement\n# Assert statement:\nassert 1==1 # return nothing because it is true","6c2947f4":"# In order to run all code, we need to make this line comment\n# assert 1==2 # return error because it is false","a9029200":"#  Lets check with assert statement\n# Assert statement:\nassert 1==1 # return nothing because it is true\n\ntry:\n    assert '1'=='1'  # return nothing because it is true\n    print('True') \nexcept AssertionError:\n    print('Houston, we have a problem.')\n    raise","a4da077a":"data[\"dcoilwtico\"].fillna('empty',inplace = True)\n","618d1bef":"assert  data['dcoilwtico'].notnull().all() # returns nothing because we do not have nan values","954d7177":"# # With assert statement we can check a lot of thing. For example\n# assert data.columns[1] == 'Name'\n# assert data.Speed.dtypes == np.int","1b303d61":"# data frames from dictionary\ncountry = [\"Spain\",\"France\"]\npopulation = [\"11\",\"12\"]\nlist_label = [\"country\",\"population\"]\nlist_col = [country,population]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","cee35df8":"# Add new columns\ndf[\"capital\"] = [\"madrid\",\"paris\"]\ndf","125f39f6":"# Broadcasting\ndf[\"income\"] = 0 #Broadcasting entire column\ndf","a9fd3336":"data = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/train.csv')\ndata.head()","352b4b49":"# Plotting all data \ndata1 = data.loc[:,[\"store_nbr\",\"sales\",\"onpromotion\"]]\ndata1.plot()\n# it is confusing","53047f1c":"# subplots\ndata1.plot(subplots = True)\nplt.show()","b5758911":"# scatter plot  \ndata1.plot(kind = \"scatter\",x=\"sales\",y = \"onpromotion\")\nplt.show()","d9a045cd":"# hist plot  \ndata1.plot(kind = \"hist\",y = \"store_nbr\",bins = 5,range= (0,60))","4739bf8a":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"sales\",bins = 50,range= (0,250),ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"store_nbr\",bins = 5,range= (0,60),ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","cce23c76":"data.describe()","5a5cf6b0":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","eb03948b":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndata2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\ndata2 ","c3944700":"# Now we can select according to our date index\nprint(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","a9dade6b":"# We will use data2 that we create at previous part\ndata2.resample(\"A\").mean()","0f00f064":"# Lets resample with month\ndata2.resample(\"M\").mean()\n# As you can see there are a lot of nan because data2 does not include all months","fc0b0c30":"# In real life (data is real. Not created from us like data2) we can solve this problem with interpolate\n# We can interpolete from first value\ndata2.resample(\"M\").first().interpolate(\"linear\")","05ec70fa":"# Or we can interpolate with mean()\ndata2.resample(\"M\").mean().interpolate(\"linear\")","d53c2a55":"# read data\ndata = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/holidays_events.csv')\ndata= data.set_index(\"transferred\")\ndata.head()","c53f33f0":"# indexing using square brackets\ndata[\"type\"][1]","5de04e49":"# using column attribute and row label\ndata.type[1]","30e299ad":"# Selecting only some columns\ndata[[\"type\",\"locale_name\"]]","ff3fc96a":"data = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/stores.csv')\ndata.head()","c7756960":"# Difference between selecting columns: series and dataframes\nprint(type(data[\"city\"]))     # series\nprint(type(data[[\"city\"]]))   # data frames","62e94aa9":"# Slicing and indexing series\ndata.loc[1:10,\"store_nbr\":\"state\"]   # specified 10 rows and column range","5929db1e":"# Reverse slicing \ndata.loc[10:1:-1,\"store_nbr\":\"state\"] # specified 10 rows in reverse order and column range","1880a079":"# From something to end\ndata.loc[1:10,\"city\":]  # specified 10 rows and column range starting from city","39a76512":"# Creating boolean series\nboolean = data.cluster > 5\ndata[boolean]","88800ebc":"# Combining filters\nfirst_filter = data.cluster > 10\nsecond_filter = data.state == 'Pichincha'\ndata[first_filter & second_filter]","1baa0c79":"# Filtering column based others\ndata.state[data.cluster<5]","6fd89728":"# Plain python functions\ndef div(n):\n    return n\/2\ndata.cluster.apply(div)","aa0e3bad":"# Or we can use lambda function\ndata.cluster.apply(lambda n : n\/2)","d17a6a7a":"# Defining column using other columns\ndata[\"total_power\"] = data.store_nbr + data.cluster\ndata.head()","94a5a4a7":"# our index name is this:\nprint(data.index.name)\n# lets change it\ndata.index.name = \"index_name\"\ndata.head()","4cb54abb":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndata.head()\n# first copy of our data to data3 then change index \ndata3 = data.copy()\n# lets make index start from 10. It is not remarkable change but it is just example\ndata3.index = range(10,64,1)\ndata3.head()","d92a7b61":"# We can make one of the column as index. I actually did it at the beginning of manipulating data frames with pandas section\n# It was like this\n# data= data.set_index(\"#\")\n# also you can use \n# data.index = data[\"#\"]","46e05d34":"# lets read data frame one more time to start from beginning\ndata = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/stores.csv')\ndata.head()\n# As you can see there is index. However we want to set one or more column to be index","8cc60663":"# Setting index : type 1 is outer type 2 is inner index\ndata1 = data.set_index([\"city\",\"state\"]) \ndata1.head(100)\n# data1.loc[\"Fire\",\"Flying\"] # howw to use indexes","27b63d02":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","9edefd52":"# pivoting\ndf.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")","f52cdb10":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1\n# lets unstack it","8e49e3a7":"# level determines indexes\ndf1.unstack(level=0)","2ac5ea30":"df1.unstack(level=1)","06ebeba4":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","c30cd7fe":"df","ecbbcea5":"# df.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")\npd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])","94315645":"# We will use df\ndf","13cf3fad":"# according to treatment take means of other features\ndf.groupby(\"treatment\").mean()   # mean is aggregation \/ reduction method\n# there are other methods like sum, std,max or min","a972f27f":"# we can only choose one of the feature\ndf.groupby(\"treatment\").age.max() ","aa907a1a":"# Or we can choose multiple features\ndf.groupby(\"treatment\")[[\"age\",\"response\"]].min() ","fb39b1b7":"df.info()\n# as you can see gender is object\n# However if we use groupby, we can convert it categorical data. \n# Because categorical data uses less memory, speed up operations like groupby\n#df[\"gender\"] = df[\"gender\"].astype(\"category\")\n#df[\"treatment\"] = df[\"treatment\"].astype(\"category\")\n#df.info()\n","7ff3ef5c":"zip(): zip lists","44f47a8f":"<a id=\"38\"><\/a> <br>\n### HIERARCHICAL INDEXING\n* Setting indexing","228bb7d1":"<a id=\"14\"><\/a> <br>\n### ITERATORS\n* iterable is an object that can return an iterator\n* iterable: an object with an associated iter() method\n<br> example: list, strings and dictionaries\n* iterator: produces next value with next() method","d723b01d":"<a id=\"27\"><\/a> <br>\n### BUILDING DATA FRAMES FROM SCRATCH\n* We can build data frames from csv as we did earlier.\n* Also we can build dataframe from dictionaries\n    * zip() method: This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.\n* Adding new column\n* Broadcasting: Create new column and assign a value to entire column","3e0ee6cf":"<a id=\"25\"><\/a> <br>\n# 4. PANDAS FOUNDATION ","ea9da848":"<a id=\"41\"><\/a> <br>\n### MELTING DATA FRAMES\n* Reverse of pivoting","2e83e85e":"<a id=\"20\"><\/a> <br>\n### TIDY DATA\nWe tidy data with melt().\nDescribing melt is confusing. Therefore lets make example to understand it.\n","fbce427a":"<a id=\"32\"><\/a> <br>\n# MANIPULATING DATA FRAMES WITH PANDAS","6b1abfbb":"<a id=\"33\"><\/a> <br>\n### INDEXING DATA FRAMES\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns","2ff17b64":"<a id=\"1\"><\/a> <br>\n# 1. INTRODUCTION TO PYTHON","bd1552f4":"In this part, you learn:\n* Diagnose data for cleaning\n* Exploratory data analysis\n* Visual exploratory data analysis\n* Tidy data\n* Pivoting data\n* Concatenating data\n* Data types\n* Missing data and testing with assert","723408a1":"<a id=\"17\"><\/a> <br>\n### DIAGNOSE DATA for CLEANING\nWe need to diagnose and clean data before exploring.\n<br>Unclean data:\n* Column name inconsistency like upper-lower case letter or space between words\n* missing data\n* different language\n\n<br> We will use head, tail, columns, shape and info methods to diagnose data\n","a3f4e403":"<a id=\"16\"><\/a> <br>\n# 3.CLEANING DATA","99b3f546":"[i + 1 for i in num1 ]: list of comprehension\n<br> i +1: list comprehension syntax\n<br> for i in num1: for loop syntax\n<br> i: iterator\n<br> num1: iterable object","53c0f65c":"<a id=\"36\"><\/a> <br>\n### TRANSFORMING DATA\n* Plain python functions\n* Lambda function: to apply arbitrary python function to every element\n* Defining column using other columns","102857d6":"<a id=\"5\"><\/a> <br>\nBefore continuing with pandas,   we need to learn **logic, control flow** and **filtering.**\n<br>Comparison operator:  ==, <, >, <=\n<br>Boolean operators: and, or ,not\n<br> Filtering pandas","df09acf5":"<a id=\"18\"><\/a> <br>\n### EXPLORATORY DATA ANALYSIS\nvalue_counts(): Frequency counts\n<br>outliers: the value that is considerably higher or lower from rest of the data\n* Lets say value at 75% is Q3 and value at 25% is Q1. \n* Outlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR\n<br>We will use describe() method. Describe method includes:\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry\n\n<br> What is quantile?\n\n* 1,4,5,6,8,9,11,12,13,14,15,16,17\n* The median is the number that is in **middle** of the sequence. In this case it would be 11.\n\n* The lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n* The upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above.","aead8410":"<a id=\"21\"><\/a> <br>\n### PIVOTING DATA\nReverse of melting.","d57fbcb4":"Up to now, you learn \n* User defined function \n* Scope\n* Nested function\n* Default and flexible arguments\n* Lambda function\n*  Anonymous function\n*  Iterators\n* List comprehension\n","8527aa7b":"<a id=\"6\"><\/a> <br>\n### WHILE and FOR LOOPS\nWe will learn the most basic while and for loops","e00bf25d":"<a id=\"26\"><\/a> <br>\n### REV\u0130EW of PANDAS\nAs you notice, I do not give all idea in a same time. Although, we learn some basics of pandas, we will go deeper in pandas.\n* single column = series\n* NaN = not a number\n* dataframe.values = numpy\n","49e2a581":"<a id=\"7\"><\/a> <br>\n# 2. PYTHON DATA SCIENCE TOOLBOX","2af8a526":"# CONCLUSION\nThank you for your votes and comments","fa8604d8":"<a id=\"19\"><\/a> <br>\n### VISUAL EXPLORATORY DATA ANALYSIS\n* Box plots: visualize basic statistics like outliers, min\/max or quantiles","1ad5216a":"<a id=\"15\"><\/a> <br>\n### LIST COMPREHENS\u0130ON\n**One of the most important topic of this kernel**\n<br>We use list comprehension for data analysis often. \n<br> list comprehension: collapse for loops for building lists into a single line\n<br>Ex: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is  unnecessarily long. We can make it one line code that is list comprehension.","56fb4648":"<a id=\"8\"><\/a> <br>\n### USER DEFINED FUNCTION\nWhat do we need to know about functions:\n* docstrings: documentation for functions. Example:\n<br>for f():\n    <br>\"\"\"This is docstring for documentation of function f\"\"\"\n* tuple: sequence of immutable python objects. \n<br>cant modify values\n<br>tuple uses paranthesis like tuble = (1,2,3)\n<br>unpack tuple into several variables like a,b,c = tuple\n    ","616495f5":"<a id=\"9\"><\/a> <br>\n### SCOPE\nWhat we need to know about scope:\n* global: defined main body in script\n* local: defined in a function\n* built in scope: names in predefined built in scope module such as print, len\n<br><br>Lets make some basic examples","93661dfe":"In this part, you learn:\n* how to import csv file\n* plotting line,scatter and histogram\n* basic dictionary features\n* basic pandas features like filtering that is actually something always used and main for being data scientist\n* While and for loops","5b9a8769":"<a id=\"23\"><\/a> <br>\n### DATA TYPES\nThere are 5 basic data types: object(string),boolean, integer, float and categorical.\n<br> We can make conversion data types like from str to categorical or from int to float\n<br> Why is category important: \n* make dataframe smaller in memory \n* can be utilized for anlaysis especially for sklearn(we will learn later)","c5564432":"<a id=\"4\"><\/a> <br>\n### PANDAS\nWhat do we need to know about pandas?\n* CSV: comma - separated values\n\n","3101c317":"<a id=\"10\"><\/a> <br>\n### NESTED FUNCTION\n* function inside function.\n* There is a LEGB rule that is search local scope, enclosing function, global and built in scopes, respectively.","5441450b":"<a id=\"39\"><\/a> <br>\n### PIVOTING DATA FRAMES\n* pivoting: reshape tool","19bc67b6":"<a id=\"28\"><\/a> <br>\n### VISUAL EXPLORATORY DATA ANALYSIS\n* Plot\n* Subplot\n* Histogram:\n    * bins: number of bins\n    * range(tuble): min and max values of bins\n    * normed(boolean): normalize or not\n    * cumulative(boolean): compute cumulative distribution","aefdade7":"<a id=\"24\"><\/a> <br>\n### MISSING DATA and TESTING WITH ASSERT\nIf we encounter with missing data, what we can do:\n* leave as is\n* drop them with dropna()\n* fill missing value with fillna()\n* fill missing values with test statistics like mean\n<br>Assert statement: check that you can turn on or turn off when you are done with your testing of the program","b524e580":"<a id=\"42\"><\/a> <br>\n### CATEGORICALS AND GROUPBY","ab2521ef":"<a id=\"34\"><\/a> <br>\n### SLICING DATA FRAME\n* Difference between selecting columns\n    * Series and data frames\n* Slicing and indexing series\n* Reverse slicing \n* From something to end","933c9e86":"<a id=\"13\"><\/a> <br>\n### ANONYMOUS FUNCT\u0130ON\nLike lambda function but it can take more than one arguments.\n* map(func,seq) : applies a function to all the items in a list\n","9a4ab3bc":"<a id=\"11\"><\/a> <br>\n### DEFAULT and FLEXIBLE ARGUMENTS\n* Default argument example:\n<br> def f(a, b=1):\n        \"\"\" b = 1 is default argument\"\"\"\n* Flexible argument example:\n<br> def f(*args):\n       \"\"\" *args can be one or more\"\"\"\n<br>def f(** kwargs)\n       \"\"\" **kwargs is a dictionary\"\"\"\n       \n<br><br> lets write some code to practice  ","dc1b2638":"<a id=\"2\"><\/a> <br>\n### MATPLOTLIB\nMatplot is a python library that help us to plot data. The easiest and most basic plots are line, scatter and histogram plots.\n* Line plot is better when x axis is time.\n* Scatter is better when there is correlation between two variables\n* Histogram is better when we need to see distribution of numerical data.\n* Customization: Colors,labels,thickness of line, title, opacity, grid, figsize, ticks of axis and linestyle  ","78bf1c51":"<a id=\"31\"><\/a> <br>\n### RESAMPLING PANDAS TIME SERIES\n* Resampling: statistical method over different time intervals\n    * Needs string to specify frequency like \"M\" = month or \"A\" = year\n* Downsampling: reduce date time rows to slower frequency like from daily to weekly\n* Upsampling: increase date time rows to faster frequency like from daily to hourly\n* Interpolate: Interpolate values according to different methods like \u2018linear\u2019, \u2018time\u2019 or index\u2019 \n    * https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.interpolate.html\n","12f5b6a1":"<a id=\"29\"><\/a> <br>\n### STATISTICAL EXPLORATORY DATA ANALYSIS\nI already explained it at previous parts. However lets look at one more time.\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry","6fab2359":"<a id=\"22\"><\/a> <br>\n### CONCATENATING DATA\nWe can concatenate two dataframe ","b86a113e":"<a id=\"35\"><\/a> <br>\n### FILTERING DATA FRAMES\nCreating boolean series\nCombining filters\nFiltering column based others","93e1fc4c":"# DATA SCIENTIST\n**In this tutorial, I only explain you what you need to be a data scientist neither more nor less.**\n\nData scientist need to have these skills:\n\n1. Basic Tools: Like python, R or SQL. You do not need to know everything. What you only need is to learn how to use **python**\n1. Basic Statistics: Like mean, median or standart deviation. If you know basic statistics, you can use **python** easily. \n1. Data Munging: Working with messy and difficult data. Like a inconsistent date and string formatting. As you guess, **python** helps us.\n1. Data Visualization: Title is actually explanatory. We will visualize the data with **python** like matplot and seaborn libraries.\n1. Machine Learning: You do not need to understand math behind the machine learning technique. You only need is understanding basics of machine learning and learning how to implement it while using **python**.\n\n### As a summary we will learn python to be data scientist !!!\n\n**Content:**\n1. [Introduction to Python:](#1)\n    1. [Matplotlib](#2)\n    1. [Dictionaries ](#3)\n    1. [Pandas](#4)\n    1. [Logic, control flow and filtering](#5)\n    1. [Loop data structures](#6)\n1. [Python Data Science Toolbox:](#7)\n    1. [User defined function](#8)\n    1. [Scope](#9)\n    1. [Nested function](#10)\n    1. [Default and flexible arguments](#11)\n    1. [Lambda function](#12)\n    1. [Anonymous function](#13)\n    1. [Iterators](#14)\n    1. [List comprehension](#15)\n1. [Cleaning Data](#16)\n    1. [Diagnose data for cleaning](#17)\n    1. [Exploratory data analysis](#18)\n    1. [Visual exploratory data analysis](#19)\n    1. [Tidy data](#20)\n    1. [Pivoting data](#21)\n    1. [Concatenating data](#22)\n    1. [Data types](#23)\n    1. [Missing data and testing with assert](#24)\n1. [Pandas Foundation](#25)\n    1. [Review of pandas](#26)\n    1. [Building data frames from scratch](#27)\n    1. [Visual exploratory data analysis](#28)\n    1. [Statistical explatory data analysis](#29)\n    1. [Indexing pandas time series](#30)\n    1. [Resampling pandas time series](#31)\n1. [Manipulating Data Frames with Pandas](#32)\n    1. [Indexing data frames](#33)\n    1. [Slicing data frames](#34)\n    1. [Filtering data frames](#35)\n    1. [Transforming data frames](#36)\n    1. [Index objects and labeled data](#37)\n    1. [Hierarchical indexing](#38)\n    1. [Pivoting data frames](#39)\n    1. [Stacking and unstacking data frames](#40)\n    1. [Melting data frames](#41)\n    1. [Categoricals and groupby](#42)\n1. Data Visualization\n    1. Seaborn: ","c24e168e":"<a id=\"37\"><\/a> <br>\n### INDEX OBJECTS AND LABELED DATA\nindex: sequence of label\n","64b1b18d":"<a id=\"40\"><\/a> <br>\n### STACKING and UNSTACKING DATAFRAME\n* deal with multi label indexes\n* level: position of unstacked index\n* swaplevel: change inner and outer level index position","5779a4a9":"<a id=\"3\"><\/a> <br>\n### DICTIONARY\nWhy do we need dictionary?\n* It has 'key' and 'value'\n* Faster than lists\n<br>\nWhat is key and value. Example:\n* dictionary = {'spain' : 'madrid'}\n* Key is spain.\n* Values is madrid.\n<br>\n<br>**It's that easy.**\n<br>Lets practice some other properties like keys(), values(), update, add, check, remove key, remove all entries and remove dicrionary.","d6c7dc84":"<a id=\"12\"><\/a> <br>\n### LAMBDA FUNCTION\nFaster way of writing function","2a376220":"<a id=\"30\"><\/a> <br>\n### INDEXING PANDAS TIME SERIES\n* datetime = object\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format"}}