{"cell_type":{"a5cb21ce":"code","ec00c255":"code","0eb31415":"code","385fa3a8":"code","81669a84":"code","14ec6f2f":"code","952b6225":"code","fc406894":"code","e9c99474":"code","4345eb6e":"code","55ff8b16":"code","57500394":"code","935b5303":"code","779f0957":"code","3f8702ff":"code","589aced9":"code","10cd5535":"code","e7f385d1":"code","3f889009":"code","62980f61":"code","43edf78b":"code","d185ca94":"code","8af2037e":"code","f34a68a1":"code","9d0ffe5e":"code","d12392ea":"code","7c884b36":"code","ca13300d":"code","307ac983":"markdown","0c17ab18":"markdown","6e10f5e9":"markdown","967271ea":"markdown","44d974b2":"markdown","bff2e812":"markdown","9fb3deda":"markdown","e193532c":"markdown","74e3a93e":"markdown","1c9fdaa1":"markdown"},"source":{"a5cb21ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        pass #print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec00c255":"df = pd.read_csv(\"\/kaggle\/input\/fashion-product-images-small\/styles.csv\", nrows=6000, error_bad_lines=False)\ndf = df.sample(frac=1).reset_index(drop=True)\ndf.head(10)","0eb31415":"[print(i, df[i].unique(), end=\"\\n\\n\") for i in df.columns if df[i].dtype=='object']","385fa3a8":"df.info()\ndf = df.dropna(axis=0)\ndf.info()","81669a84":"df.describe()","14ec6f2f":"numerical_data = ['year']\ncategorical_data = ['masterCategory', 'subCategory', 'articleType', 'baseColour', 'season', 'usage']","952b6225":"sns.distplot(df['year'], norm_hist=False, kde=False, hist_kws={\"alpha\": 1})#.set(xlabel='Sale Price', ylabel='Count');","fc406894":"print(df.columns)\nf, axes = plt.subplots(3, 3, figsize=(20,20))\nsns.countplot(x=\"gender\", data=df, ax=axes[0,0])\nsns.countplot(x=\"masterCategory\", data=df, ax=axes[0,1])\nsns.countplot(y=\"baseColour\", data=df, ax=axes[0,2])\n\nsns.countplot(y=\"subCategory\", data=df, ax=axes[1,0])\nsns.countplot(x=\"season\", data=df, ax=axes[1,1])\nsns.countplot(x=\"year\", data=df, ax=axes[1,2])\n\nsns.countplot(y=\"articleType\", data=df, ax=axes[2,0])\nsns.countplot(x=\"usage\", data=df, ax=axes[2,1])\n","e9c99474":"f, axes = plt.subplots(2, 2, figsize=(20,20))\nsns.countplot(x=\"gender\", hue=\"masterCategory\", data=df, ax=axes[0,0])\nsns.countplot(x=\"masterCategory\", hue=\"gender\", data=df, ax=axes[0,1])\n\nsns.countplot(x=\"season\", hue=\"masterCategory\", data=df, ax=axes[1,0])\nsns.countplot(x=\"usage\", hue=\"masterCategory\", data=df,ax=axes[1,1])","4345eb6e":"f, ax = plt.subplots(2, 3, figsize=(15, 15))\nfor var, subplot in zip(categorical_data, ax.flatten()):\n    sns.boxplot(x=var, y='year', data=df, ax=subplot)","55ff8b16":"f, ax = plt.subplots(4, 3, figsize=(15, 15))\nfor i, subplot in (zip(sorted(df.year.unique()),ax.flatten())):\n    df[df.year == i].groupby('season').count().plot(kind=\"bar\",title=i, ax=subplot)\n    plt.tight_layout()","57500394":"f, ax = plt.subplots(2, 2, figsize=(15, 15))\nfor i, subplot in (zip(sorted(df.season.unique()),ax.flatten())):\n    df[df.season == i].groupby('masterCategory').count().plot(kind=\"bar\",title=i, ax=subplot)\n    plt.tight_layout()","935b5303":"f, ax = plt.subplots(2, 2, figsize=(15, 15))\nfor i, subplot in (zip(sorted(df.season.unique()),ax.flatten())):\n    df[df.season == i].groupby('year').count().plot(kind=\"bar\",title=i, ax=subplot)\n    plt.tight_layout()","779f0957":"import numpy as np\nimport torch \nimport matplotlib.pylab as plt\nimport numpy as np\nimport pandas as pd\nimport time, os, random\nimport h5py\nfrom torch.utils.data import Dataset, DataLoader\nfrom keras.utils import to_categorical\nfrom torchvision import transforms\nprint(torch.__version__)\nimport nibabel as nib\nfrom torch.autograd import Variable\nimport torch\nfrom torch import nn\nfrom torch import optim\nimport torch.nn.functional as F\nfrom torchvision import datasets, transforms, models\nfrom torch.utils.data import Dataset, DataLoader\nimport torchvision\nfrom torchvision import transforms, utils\n#!pip install torchsummary --quiet\n!pip install torchsummaryX  --quiet\nfrom torchsummaryX import summary","3f8702ff":"df = pd.read_csv('..\/input\/fashion-product-images-small\/styles.csv',error_bad_lines=False)\ndf['image_path'] = df.apply(lambda x : os.path.join(\"\/kaggle\/input\/fashion-product-images-small\/myntradataset\/images\",str(x.id)+\".jpg\"), axis=1)\ndf.head()","589aced9":"mapper = {}\nfor i,cat in enumerate(list(df.masterCategory.unique())):\n    mapper[cat] = i\nprint(mapper)\ndf['targets'] = df.masterCategory.map(mapper)\ndf.head()","10cd5535":"img = plt.imread('\/kaggle\/input\/fashion-product-images-small\/myntradataset\/images\/4711.jpg')\nplt.imshow(img)","e7f385d1":"for i in range(6):\n    print(\"label {} - Total Count {}\".format(i,df.targets[df.targets==i].count()))","3f889009":"fold = ['train']*(int(len(df)*0.9)) + ['valid']*(len(df) - int(len(df)*0.9))\nrandom.shuffle(fold)\ndf['fold'] = fold\ndf.head()","62980f61":"sns.countplot(df['fold'])","43edf78b":"df.image_path[0]","d185ca94":"NUM_SAMP=5\nfig = plt.figure(figsize=(25, 16))\nimport cv2\nfor jj in range(5):\n    for i, (idx, row) in enumerate(df.sample(NUM_SAMP,random_state=123+jj).iterrows()):\n        ax = fig.add_subplot(5, NUM_SAMP, jj * NUM_SAMP + i + 1, xticks=[], yticks=[])\n        path=f\"\/kaggle\/input\/fashion-product-images-small\/myntradataset\/images\/{row['id']}.jpg\"\n        image = plt.imread(path)\n        plt.imshow(image)\n        ax.set_title('%d-%s' % (idx, row['id']) )","8af2037e":"classifier = True # input as False makes the model regressor.\n\n# Flag for feature extracting. When False, we finetune the whole model,\n#   when True we only update the reshaped layer params\nfeature_extract = False\n\nif classifier:\n    num_classes = 5 # Classifier\n    criterion =  nn.CrossEntropyLoss() \nelse:\n    num_classes = 1 # Regressor\n    criterion =  nn.MSELoss() \n\n\n\ndef set_parameter_requires_grad(model, feature_extracting):\n    if feature_extracting:\n        for param in model.parameters():\n            param.requires_grad = False\n\ndef initialize_model(model_name, num_classes, feature_extract, use_pretrained=True):\n    # Initialize these variables which will be set in this if statement. Each of these\n    #   variables is model specific.\n    model_ft = None\n    input_size = 0\n\n    if model_name == \"resnet\":\n        \"\"\" Resnet18\n        \"\"\"\n        model_ft = models.resnet18(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        num_ftrs = model_ft.fc.in_features\n        model_ft.avgpool = nn.AdaptiveMaxPool2d(output_size=(1, 1))\n        model_ft.fc = nn.Linear(num_ftrs, num_classes)\n        input_size = 224\n\n    elif model_name == \"alexnet\":\n        \"\"\" Alexnet\n        \"\"\"\n        model_ft = models.alexnet(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        num_ftrs = model_ft.classifier[6].in_features\n        model_ft.classifier[6] = nn.Linear(num_ftrs,num_classes)\n        input_size = 224\n\n    elif model_name == \"vgg\":\n        \"\"\" VGG11_bn\n        \"\"\"\n        model_ft = models.vgg11_bn(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        num_ftrs = model_ft.classifier[6].in_features\n        model_ft.classifier[6] = nn.Linear(num_ftrs,num_classes)\n        input_size = 224\n\n    elif model_name == \"squeezenet\":\n        \"\"\" Squeezenet\n        \"\"\"\n        model_ft = models.squeezenet1_0(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        model_ft.classifier[1] = nn.Conv2d(512, num_classes, kernel_size=(1,1), stride=(1,1))\n        model_ft.num_classes = num_classes\n        input_size = 224\n\n    elif model_name == \"densenet\":\n        \"\"\" Densenet\n        \"\"\"\n        model_ft = models.densenet121(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        num_ftrs = model_ft.classifier.in_features\n        model_ft.classifier = nn.Linear(num_ftrs, num_classes)\n        input_size = 224\n\n    elif model_name == \"inception\":\n        \"\"\" Inception v3\n        Be careful, expects (299,299) sized images and has auxiliary output\n        \"\"\"\n        model_ft = models.inception_v3(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        # Handle the auxilary net\n        num_ftrs = model_ft.AuxLogits.fc.in_features\n        model_ft.AuxLogits.fc = nn.Linear(num_ftrs, num_classes)\n        # Handle the primary net\n        num_ftrs = model_ft.fc.in_features\n        model_ft.fc = nn.Linear(num_ftrs,num_classes)\n        input_size = 299\n\n    else:\n        print(\"Invalid model name, exiting...\")\n        exit()\n\n    return model_ft, input_size\n","f34a68a1":"# Initialize the model for this run\nmodel_name = \"resnet\" # Models to choose [\"resnet\", \"alexnet\", \"vgg\", \"squeezenet\", \"densenet\", \"inception\"]\nmodel_ft, input_size = initialize_model(model_name, num_classes, feature_extract, use_pretrained=True)\n\n# Print the model we just instantiated\nprint(model_ft)\nprint()\nprint(\"Input image size format\",(input_size,input_size))","9d0ffe5e":"summary(model_ft, torch.zeros((1, 3, 224, 224)))","d12392ea":"feature_extract = True\n\nBATCH_SIZE =  16 # Desired batch size\nSAMPLE = 0 # Increase the sample size if you want to train only on a specific number of samples, otherwise to train on entire datset, set sample = 0\nimg_size = input_size # This sets the input image size based on the model's you choose\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n\nprint(\"Running on\",device)\nmodel_ft = model_ft.to(device)\n\nparams_to_update = model_ft.parameters()\nprint(\"Params to learn:\")\nif feature_extract:\n    params_to_update = []\n    for name,param in model_ft.named_parameters():\n        if param.requires_grad == True:\n            params_to_update.append(param)\n            print(\"\\t\",name)\nelse:\n    for name,param in model_ft.named_parameters():\n        if param.requires_grad == True:\n            print(\"\\t\",name)\n\n\nlearning_rate=0.01\n# optimizer = optim.Adam(params_to_update, lr=learning_rate)\noptimizer = optim.SGD(params_to_update, lr=learning_rate , momentum=0.9)\nscheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, factor=0.85, patience=2, verbose=True)","7c884b36":"from PIL import Image\n\nclass FDataset(Dataset):\n    # Constructor\n    def __init__(self, df, fold , img_size, transform=True):\n        # Image directory\n        self.transform = transform\n        self.img_size = img_size\n        self.fold = fold\n        self.df = df\n        self.df = self.df[self.df['fold'] == fold]\n        #print(self.df.head())\n        if transform is None:\n            transform = torchvision.transforms.Compose([\n                torchvision.transforms.Resize((224, 224)),\n                torchvision.transforms.ToTensor()\n            ])\n        self.transform = transform\n\n    # Get the length\n    def __len__(self):\n        return len(self.df)\n    \n    # Getter\n    def __getitem__(self, idx):\n        img_path = self.df.image_path[idx]\n        #print(img_path)\n        img = Image.open(img_path).convert('RGB')\n        img_tensor = self.transform(img)\n        \n        label = self.df.targets[idx]        \n        print(label)\n        return image, label","ca13300d":"transformed_datasets = {}\ntransformed_datasets['train'] = FDataset(df,  fold=\"train\" ,img_size = img_size)\ntransformed_datasets['valid'] = FDataset(df,  fold=\"valid\" ,img_size = img_size)\n \ndataloaders = {}\ndataloaders['train'] = torch.utils.data.DataLoader(transformed_datasets['train'],batch_size=BATCH_SIZE,shuffle=True)\ndataloaders['valid'] = torch.utils.data.DataLoader(transformed_datasets['valid'],batch_size=BATCH_SIZE,shuffle=True)  \nprint()\nprint(len(dataloaders['train']))\nprint(len(dataloaders['valid']))","307ac983":"# Deep Learning Model (Pytorch) for Classification","0c17ab18":"# Stats for mastercategory for every season","6e10f5e9":"# Stats for year vs Mastercategory for every season","967271ea":"# Stats between season and mastercategory for every year","44d974b2":"# End of EDA","bff2e812":"## Relationship between Gender, Season with M.Category","9fb3deda":"# Scrutiny based on year","e193532c":"# EDA","74e3a93e":"# Bi-Variate analysis","1c9fdaa1":"## Univariate Analysis"}}