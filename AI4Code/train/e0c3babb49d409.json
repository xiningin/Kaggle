{"cell_type":{"6f0434e1":"code","d1164752":"code","fdffa08b":"code","c583dd67":"code","81d7c2df":"code","7d86428f":"code","48ce5778":"code","bd664f05":"code","8b07b3b8":"code","818f8b4d":"code","dd9fb7e3":"code","0cbc3542":"code","af8ed196":"code","b4e2d5a1":"code","4227ea1e":"code","77156b37":"code","8036245e":"code","b4af2cf7":"code","e6b25563":"code","ab0b3445":"code","0d40146b":"code","de588151":"code","f910c2c4":"code","6a8265be":"code","a481dfb9":"code","42c7632c":"code","5a666e76":"code","bbdd4bed":"code","437ef2cd":"code","6710f79f":"code","450d1878":"markdown","3ac2ded4":"markdown","9e3d163c":"markdown","b447dede":"markdown","bd3224d1":"markdown","e90434bb":"markdown","3d30a49a":"markdown","f77b6927":"markdown","0d79d4f8":"markdown","4cd4c86f":"markdown"},"source":{"6f0434e1":"# importing necessary library\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d1164752":"# load the data\ndata=pd.read_csv('..\/input\/zomato-bangalore-restaurants\/zomato.csv')","fdffa08b":"data.info()","c583dd67":"data.dtypes","81d7c2df":"data.duplicated().sum()                        #checking duplicates in data","7d86428f":"data.columns","48ce5778":"data=data.rename(columns={'approx_cost(for two people)':'cost','listed_in(type)':'type','listed_in(city)':'city'})      #Rename column","bd664f05":"data.head(3)","8b07b3b8":"data.isnull().sum()                                                          #total null","818f8b4d":"pd.DataFrame(round(data.isnull().sum()\/data.shape[0] * 100,3), columns = [\"Missing\"])  # null in percentage","dd9fb7e3":"data.dropna(how='any',inplace = True)","0cbc3542":"pd.DataFrame(round(data.isnull().sum()\/data.shape[0] * 100,3), columns = [\"Missing\"])  # null in percentage","af8ed196":"data['rate'].unique()","b4e2d5a1":"data['rate']=data['rate'].apply(lambda x: x.replace('\/5','').strip())                             #replacing commas  ","4227ea1e":"data=data.loc[data['rate']!='NEW']","77156b37":"data['cost'].unique()                                                                           # getting unique values","8036245e":"data['cost']=data['cost'].apply(lambda x: x.replace(',','.').strip())                             #replacing commas  ","b4af2cf7":"data['cost']=data['cost'].astype('float')                                                        #converting to float","e6b25563":"data['rate']=data['rate'].astype('float')                                                        #converting to float ","ab0b3445":"data['votes']=data['votes'].astype('int')                                                        #converting to integer","0d40146b":"# Encode the input Variables\ndef Encode(data):\n    for column in data.columns[~data.columns.isin(['rate', 'cost', 'votes'])]:\n        data[column] = data[column].factorize()[0]        \n    return data\nzomato_data = Encode(data.copy())","de588151":"zomato_data.corr()","f910c2c4":"#Get Correlation between different variables\ncorr = zomato_data.corr(method='kendall')\nplt.figure(figsize=(15,8))\nsns.heatmap(corr, annot=True)\nzomato_data.columns","6a8265be":"from sklearn.model_selection import train_test_split\nx = zomato_data.iloc[:,[2,3,5,6,7,8,9,11]]\ny = zomato_data['rate']\n#Getting Test and Training Set\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.33,random_state=42)\nx_train.head()\ny_train.head()","a481dfb9":"from sklearn.linear_model import LinearRegression\nreg=LinearRegression()\nreg.fit(x_train,y_train)\ny_pred=reg.predict(x_test.head(1))\nprint(y_pred)\ny_predict=reg.predict(x_test)\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_predict)","42c7632c":"#Prepairng a Decision Tree Regression\nfrom sklearn.tree import DecisionTreeRegressor\n# x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=105)\nDTree=DecisionTreeRegressor(min_samples_leaf=.0001)\nDTree.fit(x_train,y_train)\ny_pred=DTree.predict(x_test.head(1))\nprint(y_pred)\ny_predict=DTree.predict(x_test)\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_predict)","5a666e76":"#Preparing Random Forest REgression\nfrom sklearn.ensemble import RandomForestRegressor\nRForest=RandomForestRegressor(n_estimators=500,random_state=42,min_samples_leaf=.0001)\nRForest.fit(x_train,y_train)\ny_pred=RForest.predict(x_test.head(1))\nprint('test value:',x_test['rate'][0])\nprint('predicted value:',y_pred)\ny_predict=RForest.predict(x_test)\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_predict)","bbdd4bed":"#Preparing Extra Tree Regression\nfrom sklearn.ensemble import  ExtraTreesRegressor\nETree=ExtraTreesRegressor(n_estimators = 100)\nETree.fit(x_train,y_train)\ny_pred=ETree.predict(x_test.head(1))\nprint(y_pred)\ny_predict=ETree.predict(x_test)\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_predict)","437ef2cd":"#importing Random Forest Classifier from sklearn.ensemble\nfrom sklearn.model_selection import GridSearchCV #GridSearchCV is for parameter tuning\nfrom sklearn.ensemble import RandomForestRegressor\ncls=RandomForestRegressor()\nn_estimators=[25,50,75,100,125,150,175,200] #number of decision trees in the forest, default = 100\ncriterion=['mse'] #criteria for choosing nodes default = 'gini'\nmax_depth=[3,5,10] #maximum number of nodes in a tree default = None (it will go till all possible nodes)\nparameters={'n_estimators': n_estimators,'criterion':criterion,'max_depth':max_depth} #this will undergo 8*2*3 = 48 iterations\nRFC_cls = GridSearchCV(cls, parameters)\nRFC_cls.fit(x_train,y_train)","6710f79f":"y_pred=RFC_cls.predict(x_test.head(1))\nprint('test value:',x_test['rate'][0])\nprint('predicted value:',y_pred)\ny_predict=RFC_cls.predict(x_test)\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_predict)","450d1878":"**Linear Regresion**","3ac2ded4":"**Get Correlation Between columns**","9e3d163c":"**Extra Tree Regression**","b447dede":"# **Regression Analysis**","bd3224d1":"**Getting The Set To Be Trained And Tested**","e90434bb":"**Plotting Correlation Between Columns**","3d30a49a":"# **Tuning The Model With Gridsearch**","f77b6927":"**Encoding Each Column**","0d79d4f8":"**Random Forest Regression**","4cd4c86f":"**Decision Tree Regression**"}}