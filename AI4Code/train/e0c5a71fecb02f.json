{"cell_type":{"9dcb3223":"code","02b964c2":"code","44e9791d":"code","59f6b73f":"code","01036311":"code","7edecbd7":"code","b65b19d2":"code","fdade422":"code","b11a736b":"code","0a1d384c":"code","a8b3876c":"code","8534c55f":"code","16ada320":"code","a7e48010":"code","d64efe73":"code","09441500":"code","d8cbc3e1":"code","fa9228f2":"code","1755c498":"code","103e5c7f":"code","17cbd926":"code","666fd4a6":"code","b9d987c9":"code","456ad439":"code","19f2891f":"code","a469ccfb":"markdown","29618a29":"markdown","b066882b":"markdown","9652ad43":"markdown","69688d0a":"markdown","bc44251b":"markdown","81940175":"markdown","e30d54df":"markdown","5997e33e":"markdown","0f64b4ef":"markdown","cd8bd0d8":"markdown","d750d594":"markdown","3415e066":"markdown","4fc8a352":"markdown","02727f08":"markdown","fc1c5080":"markdown","15c047ca":"markdown","743b209f":"markdown"},"source":{"9dcb3223":"import os\nprint(os.listdir(\"..\/input\"))","02b964c2":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\n#%matplotlib inline","44e9791d":"df = pd.read_csv(\"..\/input\/F_Player_dataset.csv\")\n\ndf.head(7)","59f6b73f":"df.columns","01036311":"#df.describe()","7edecbd7":"import pandas as pd\ndel df['National_Kit']\ndf.head()","b65b19d2":"plt.figure(figsize = (15,32))\nsns.countplot(y=df.Nationality, palette = 'Set2') #Plot all the nations as Y Axis","fdade422":"plt.figure(figsize = (15,6))\nsns.countplot(x='Age',data=df)","b11a736b":"#weights\n\na = 0.5\nb =  1\nc = 2\nd = 3","0a1d384c":"# Goalkeeping Characterstics\n#df.columns\ndf['gk_Shot_Stopper'] = (b*df.Reactions + b*df.Composure + a*df.Speed + a*df.Strength + c*df.Jumping + b*df.GK_Positioning + c*df.GK_Reflexes + b*df.GK_Handling)\/(2*a + 4*b + 2*c + 1*d)\ndf['gk_Skeeper'] = (b*df.Reactions + b*df.Composure + b*df.Speed + a*df.Short_Pass + a*df.Long_Pass + b*df.Jumping + b*df.GK_Positioning + b*df.GK_Diving + d*df.GK_Reflexes + b*df.GK_Handling + d*df.GK_Kicking + c*df.GK_Kicking + c*df.Vision)\/(2*a + 4*b + 2*c + 1*d)","a8b3876c":"plt.figure(figsize = (15,6))\n\n# Generate sequential data and plot\nsd1 = df.sort_values('gk_Shot_Stopper', ascending = False)[:5]\nx1 = np.array(list(sd1['Name']))\ny1 = np.array(list(sd1['gk_Shot_Stopper']))\n\nsns.barplot(x1, y1, palette = \"colorblind\")\nplt.ylabel(\"Shot Stopping Score\")","8534c55f":"plt.figure(figsize = (15,6))\n\n# Generate sequential data and plot\nsd1 = df.sort_values('gk_Skeeper', ascending = False)[:5]\nx1 = np.array(list(sd1['Name']))\ny1 = np.array(list(sd1['gk_Shot_Stopper']))\n\nsns.barplot(x1, y1, palette = \"colorblind\")\nplt.ylabel(\"Shot Stopping Score\")","16ada320":"#Choosing Defenders(4 best defenders) : 2 Centre backs and 2 wing backs\ndf['df_centre_backs'] = ( d*df.Reactions + c*df.Interceptions + d*df.Sliding_Tackle + d*df.Standing_Tackle + b*df.Vision+ b*df.Composure + b*df.Crossing +a*df.Short_Pass + b*df.Long_Pass+ c*df.Acceleration + b*df.Speed\n+ d*df.Stamina + d*df.Jumping + d*df.Heading + b*df.Long_Shots + d*df.Marking + c*df.Aggression)\/(6*b + 3*c + 7*d)\ndf['df_wb_Wing_Backs'] = (b*df.Ball_Control + a*df.Dribbling + a*df.Marking + d*df.Sliding_Tackle + d*df.Standing_Tackle + a*df.Attacking_Position + c*df.Vision + c*df.Crossing + b*df.Short_Pass + c*df.Long_Pass + d*df.Acceleration +d*df.Speed + c*df.Stamina + a*df.Finishing)\/(4*a + 2*b + 4*c + 4*d)","a7e48010":"plt.figure(figsize=(15,6))\nsd = df[(df['Club_Position'] == 'LCB')].sort_values('df_centre_backs', ascending=False)[:5]\nx2 = np.array(list(sd['Name']))\ny2 = np.array(list(sd['df_centre_backs']))\nsns.barplot(x2, y2, palette=sns.color_palette(\"Blues_d\"))\nplt.ylabel(\"LCB Score\")","d64efe73":"plt.figure(figsize=(15,6))\n \nsd = df[(df['Club_Position'] == 'RCB')].sort_values('df_centre_backs', ascending=False)[:5]\nx2 = np.array(list(sd['Name']))\ny2 = np.array(list(sd['df_centre_backs']))\nsns.barplot(x2, y2, palette=sns.color_palette(\"Blues_d\"))\nplt.ylabel(\"RCB Score\")","09441500":"plt.figure(figsize=(15,6))\n \nsd = df[(df['Club_Position'] == 'LWB') | (df['Club_Position'] == 'LB')].sort_values('df_wb_Wing_Backs', ascending=False)[:5]\nx4 = np.array(list(sd['Name']))\ny4 = np.array(list(sd['df_wb_Wing_Backs']))\nsns.barplot(x4, y4, palette=sns.color_palette(\"Blues_d\"))\nplt.ylabel(\"Left Back Score\")","d8cbc3e1":"plt.figure(figsize=(15,6))\nsd = df[(df['Club_Position'] == 'RWB') | (df['Club_Position'] == 'RB')].sort_values('df_wb_Wing_Backs', ascending=False)[:5]\nx5 = np.array(list(sd['Name']))\ny5 = np.array(list(sd['df_wb_Wing_Backs']))\nsns.barplot(x5, y5, palette=sns.color_palette(\"Blues_d\"))\nplt.ylabel(\"Right Back Score\")","fa9228f2":"#Midfielding Indices\ndf['mf_playmaker'] = (d*df.Ball_Control + d*df.Dribbling + a*df.Marking + d*df.Reactions + d*df.Vision + c*df.Attacking_Position + c*df.Crossing + d*df.Short_Pass + c*df.Long_Pass + c*df.Curve + b*df.Long_Shots + c*df.Freekick_Accuracy)\/(1*a + 1*b + 4*c + 4*d)\ndf['mf_beast'] = (d*df.Agility + c*df.Balance + b*df.Jumping + c*df.Strength + d*df.Stamina + a*df.Speed + c*df.Acceleration + d*df.Short_Pass + c*df.Aggression + d*df.Reactions + b*df.Marking + b*df.Standing_Tackle + b*df.Sliding_Tackle + b*df.Interceptions)\/(1*a + 5*b + 4*c + 4*d)\ndf['mf_controller'] = (b*df.Weak_foot + d*df.Ball_Control + a*df.Dribbling + a*df.Marking + a*df.Reactions + c*df.Vision + c*df.Composure + d*df.Short_Pass + d*df.Long_Pass)\/(2*c + 3*d + 4*a)","1755c498":"plt.figure(figsize=(15,6))\n \nss = df[(df['Club_Position'] == 'CAM') | (df['Club_Position'] == 'LAM') | (df['Club_Position'] == 'RAM')].sort_values('mf_playmaker', ascending=False)[:5]\nx3 = np.array(list(ss['Name']))\ny3 = np.array(list(ss['mf_playmaker']))\nsns.barplot(x3, y3, palette=sns.diverging_palette(145, 280, s=85, l=25, n=5))\nplt.ylabel(\"PlayMaker Score\")","103e5c7f":"plt.figure(figsize=(15,6))\n \nss = df[(df['Club_Position'] == 'RCM') | (df['Club_Position'] == 'RM')].sort_values('mf_beast', ascending=False)[:5]\nx2 = np.array(list(ss['Name']))\ny2 = np.array(list(ss['mf_beast']))\nsns.barplot(x2, y2, palette=sns.diverging_palette(145, 280, s=85, l=25, n=5))\nplt.ylabel(\"Beast Score\")","17cbd926":"plt.figure(figsize=(15,6))\n \n# Generate some sequential data\nss = df[(df['Club_Position'] == 'LCM') | (df['Club_Position'] == 'LM')].sort_values('mf_controller', ascending=False)[:5]\nx1 = np.array(list(ss['Name']))\ny1 = np.array(list(ss['mf_controller']))\nsns.barplot(x1, y1, palette=sns.diverging_palette(145, 280, s=85, l=25, n=5))\nplt.ylabel(\"Controller Score\")","666fd4a6":"#Attackers\ndf['att_left_wing'] = (c*df.Weak_foot + c*df.Ball_Control + c*df.Dribbling + c*df.Speed + d*df.Acceleration + b*df.Vision + c*df.Crossing + b*df.Short_Pass + b*df.Long_Pass + b*df.Aggression + b*df.Agility + a*df.Curve + c*df.Long_Shots + b*df.Freekick_Accuracy + d*df.Finishing)\/(a + 6*b + 6*c + 2*d)\ndf['att_right_wing'] = (c*df.Weak_foot + c*df.Ball_Control + c*df.Dribbling + c*df.Speed + d*df.Acceleration + b*df.Vision + c*df.Crossing + b*df.Short_Pass + b*df.Long_Pass + b*df.Aggression + b*df.Agility + a*df.Curve + c*df.Long_Shots + b*df.Freekick_Accuracy + d*df.Finishing)\/(a + 6*b + 6*c + 2*d)\ndf['att_striker'] = (b*df.Weak_foot + b*df.Ball_Control + a*df.Vision + b*df.Aggression + b*df.Agility + a*df.Curve + a*df.Long_Shots + d*df.Balance + d*df.Finishing + d*df.Heading + c*df.Jumping + c*df.Dribbling)\/(3*a + 4*b + 2*c + 3*d)","b9d987c9":"plt.figure(figsize=(15,6))\n \nss = df[(df['Club_Position'] == 'LW') | (df['Club_Position'] == 'LM') | (df['Club_Position'] == 'LS')].sort_values('att_left_wing', ascending=False)[:5]\nx1 = np.array(list(ss['Name']))\ny1 = np.array(list(ss['att_left_wing']))\nsns.barplot(x1, y1, palette=sns.diverging_palette(255, 133, l=60, n=5, center=\"dark\"))\nplt.ylabel(\"Left Wing\")","456ad439":"# Next, let us plot the right wing attacker\nplt.figure(figsize=(15,6))\n \nss = df[(df['Club_Position'] == 'RW') | (df['Club_Position'] == 'RM') | (df['Club_Position'] == 'RS')].sort_values('att_right_wing', ascending=False)[:5]\nx2 = np.array(list(ss['Name']))\ny2 = np.array(list(ss['att_right_wing']))\nsns.barplot(x2, y2, palette=sns.diverging_palette(255, 133, l=60, n=5, center=\"dark\"))\nplt.ylabel(\"Right Wing\")","19f2891f":"plt.figure(figsize=(15,6))\nss = df[(df['Club_Position'] == 'ST') | (df['Club_Position'] == 'LS') | (df['Club_Position'] == 'RS') | (df['Club_Position'] == 'CF')].sort_values('att_striker', ascending=False)[:5]\nx3 = np.array(list(ss['Name']))\ny3 = np.array(list(ss['att_striker']))\nsns.barplot(x3, y3, palette=sns.diverging_palette(255, 133, l=60, n=5, center=\"dark\"))\nplt.ylabel(\"Striker\")","a469ccfb":"I hope this kernal is useful to you to learn data visualization with seaborn.\n\nIf find this notebook help you to learn, Please Upvote.\n\nThank You!!","29618a29":"## Best Goal Keeper","b066882b":"# World\u2019s Best Playing XI: Finding The Best Goalkeeper\n\nIn order to get the best goalkeeper, I\u2019ll be analyzing the data for the below mentioned parameters:\n\n#### Shot Stopper: A goalkeeper who is strong in stopping shots taken by opponents.\n#### Sweeper: A goalkeeper who is strong in playing with his feet and making passes.","9652ad43":"#### Controller:","69688d0a":"#### RIGHT WING BACK:","bc44251b":"![](https:\/\/www.foxsportsasia.com\/tachyon\/2018\/07\/37294466_10160601896805273_1234826097149870080_n.jpg?w=1366)","81940175":"#### Beast:","e30d54df":"#### PLAYMAKER:","5997e33e":"#### Right Wing Attacker : Attacking Right Wing","0f64b4ef":"### World\u2019s Best Playing XI: Finding The Best Mid-Fielders","cd8bd0d8":"### World\u2019s Best Playing XI: Finding The Best Attackers","d750d594":"#### Striker","3415e066":"#### RIGHT CENTRAL DEFENDER (Club_Position == 'RCB)","4fc8a352":"#### LEFT WING BACK:","02727f08":"# FIFA World Cup 2018 Best XI: Analyzing Fifa Dataset Using Python\n\n![](https:\/\/www.kevaljaankari.com\/wp-content\/uploads\/2018\/01\/Top-10-Soccer-Players-of-the-world.jpg)\n\nOnce in every 4 years, the world celebrates a festival called \u201cFifa World Cup\u201d and with that, everything seems to change. Priorities switch to football, and predictions switch to the teams and players that would perform in the tournament. Through the medium of this blog, I am going to predict the \u201cWorld\u2019s Best Playing XI\u201d in 2018 and I would be using Python for the analytical implementation.\n\nAnalyze the Fifa Dataset to predict the World\u2019s Best Playing XI in 2018!!","fc1c5080":"#### Left Wing Attacker: Attacking Left Wing:","15c047ca":"#### LEFT CENTRAL DEFENDER (Club Position = LCB):","743b209f":"## 4 Best Defenders"}}