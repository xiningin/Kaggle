{"cell_type":{"99a65209":"code","d2193736":"code","9804eb16":"code","576e21d9":"code","30b336fe":"code","e17872c7":"code","18ab5aa7":"code","8a7b9b3b":"code","43ef272b":"code","63adb03c":"code","93390ea1":"code","be5dc477":"code","b64a3dae":"code","e8bedd34":"code","f45b31cc":"code","19ef5750":"code","ebf77403":"code","1accd6cf":"code","5f6d3555":"code","631698c7":"code","3114d5e2":"code","4b8e3d7f":"code","035d0358":"code","012bf50d":"code","3bc2a016":"code","d638d734":"code","4e6063ab":"code","821ea37f":"markdown","3849cdc8":"markdown"},"source":{"99a65209":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d2193736":"# load the image\nfrom keras.preprocessing.image import load_img\nimage = load_img(\"\/kaggle\/input\/intel-image-classification\/seg_train\/seg_train\/street\/5713.jpg\")","9804eb16":"import os\n\nfrom os import listdir","576e21d9":"listdir(\"\/kaggle\/input\")","30b336fe":"listdir(\"\/kaggle\/input\/intel-image-classification\")","e17872c7":"listdir(\"\/kaggle\/input\/intel-image-classification\/seg_train\")","18ab5aa7":"listdir(\"\/kaggle\/input\/intel-image-classification\/seg_train\/seg_train\")","8a7b9b3b":"listdir(\"\/kaggle\/input\/intel-image-classification\/seg_train\/seg_train\/street\")","43ef272b":"from keras.preprocessing.image import img_to_array\nfrom keras.preprocessing.image import array_to_img\n","63adb03c":"from keras.preprocessing.image import load_img\nx_train=[]\ny_train=[]\n\nk=\"\/kaggle\/input\/intel-image-classification\/seg_train\/seg_train\"\nfor file1 in listdir(k):\n    file2=k+\"\/\"+file1\n    for file3 in listdir(file2):\n        file4=file2+\"\/\"+file3\n        image = load_img(file4,target_size=(64,64,3))\n        img_array = img_to_array(image)\n        x_train.append(img_array)\n        y_train.append(file1)\n","93390ea1":"x_test=[]\ny_test=[]\n\nk=\"\/kaggle\/input\/intel-image-classification\/seg_test\/seg_test\"\nfor file1 in listdir(k):\n    file2=k+\"\/\"+file1\n    for file3 in listdir(file2):\n        file4=file2+\"\/\"+file3\n        image = load_img(file4,target_size=(64,64,3))\n        img_array = img_to_array(image)\n        x_test.append(img_array)\n        y_test.append(file1)\n","be5dc477":"len(x_train),len(y_train)","b64a3dae":"len(x_test),len(y_test)","e8bedd34":"import numpy as np\nx_train=np.array(x_train)\ny_train=np.array(y_train)","f45b31cc":"x_test=np.array(x_test)\ny_test=np.array(y_test)","19ef5750":"x_train.shape,y_train.shape","ebf77403":"from sklearn.preprocessing import LabelEncoder\nk = LabelEncoder()\ny_train = k.fit_transform(y_train)\ny_test= k.fit_transform(y_train)","1accd6cf":"from keras.utils import to_categorical\ny_train=to_categorical(y_train)","5f6d3555":"y_train.shape","631698c7":"from keras.applications.vgg16 import VGG16","3114d5e2":"model=VGG16(input_shape=(64,64,3),include_top=False)","4b8e3d7f":"#Import libraries to create model\nfrom keras import Model\nfrom keras.optimizers import SGD\nfrom keras.layers import Flatten, Dense","035d0358":"def Intel_Image_classification():\n    model=VGG16(input_shape=(64,64,3),include_top=False)\n    for layer in model.layers:\n        layer.trainable = False\n    flat1 = Flatten()(model.layers[-1].output)\n    class1 = Dense(128, activation=\"relu\", kernel_initializer=\"he_uniform\")(flat1)\n    #class2 = Dense(62, activation=\"relu\", kernel_initializer=\"he_uniform\")(class1)\n    output = Dense(6, activation=\"softmax\")(class1)\n    model1 = Model(inputs=model.inputs, outputs=output)\n    opt = SGD(lr=0.01, momentum=0.9)\n    model1.compile(optimizer=opt,loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n    return model1","012bf50d":"obj=Intel_Image_classification()","3bc2a016":"x_train=x_train.astype(float)\nx_test=x_test.astype(float)","d638d734":"train_norm=x_train\/255\ntest_norm=x_test\/255","4e6063ab":"obj.fit(train_norm,y_train,batch_size=32, epochs=10,verbose=1)","821ea37f":"# I have tried to build powerful Neural network that can classify these images with more accuracy.\n","3849cdc8":"Using VGG16 Model to find the accuracy"}}