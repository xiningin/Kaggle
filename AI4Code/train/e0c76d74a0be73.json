{"cell_type":{"1f6fbbbf":"code","f03bc1f5":"code","aac5d846":"code","4d10a9d4":"markdown","0b394ee1":"markdown","64644199":"markdown","c1ebd228":"markdown","1f080fc0":"markdown","129663c1":"markdown","220009ef":"markdown","2b126ebf":"markdown","fd7b0f41":"markdown"},"source":{"1f6fbbbf":"print(\"abc hash value on the first run:\")\n!python3 -c 'print(hash(\"abc\"))'\nprint(\"----------------------------\")\nprint(\"abc hash value on the second run:\")\n!python3 -c 'print(hash(\"abc\"))'","f03bc1f5":"import os\nseed = 666 #can be any arbitrary number\nos.environ[\"PYTHONHASHSEED\"] = str(seed) #where seed is the value you then use for all random number generated values and pseudo-random number generated values","aac5d846":"print(\"abc hash value on the first run:\")\n!python3 -c 'print(hash(\"abc\"))'\nprint(\"----------------------------\")\nprint(\"abc hash value on the second run:\")\n!python3 -c 'print(hash(\"abc\"))'","4d10a9d4":"#### more context for those interested:\n\nThe hashing that occurs after a variable is declared is used to map the data(your variable and its value) to a fixed-chunk of data(the hash value generated). \n\nThis has the effect of speeding up recall of a variable because the interpreter just needs to compare the most recently calculated hash value to the one it stored\n\n#### Simplification\/Conceptualization of what we are doing when we set our pythonhashseed environment variable to a seed value:\n\nWe are effectively making our model generating script(that ordinarily is subject to environment level fluctuations in data prescription via hash location due to time to grab, compute, and\n\ncompare) a reproducible product that will hopefully make our model have a greater liklihood of reproducibility and chance of more visible\/significant iterative changes to our model","0b394ee1":"> now when we try the same thing again:","64644199":"#### How to implement it","c1ebd228":"### This is just a quick review of PYTHONHASHSEED in your os.environ\n> I am open to edit suggestions if any information appears to be incorrectly conveyed\n> #### Credit\n> #### source 1: https:\/\/death.andgravity.com\/stable-hashing\n> #### source 2: https:\/\/www.dummies.com\/programming\/python\/using-python-environment-variables-advantage\/","1f080fc0":"* The hash values we generate during declaration are the same for the given variable \n* The hash value being the same will, in theory, reduce the variance in comparing the hash values of variable and thus giving a script that gives reproducible results","129663c1":"#### quick context: what is pythonhashseed and why do we want to access it?\n\n> a pythonhashseed is randomly generated when you create a variable in python(see next code block for example).","220009ef":"Unrelated mentions:\nJoin the ml progression [discord](https:\/\/discord.gg\/KTXKq7Mm) with me and fellow kagglers!","2b126ebf":"#### Key Takeaways","fd7b0f41":"> According to the python documentation this is done for privacy concerns but for us working with highly volatile models that can give you a LB .82 in one \nrun and a .69 in another, it is critical to create a model that produces reproducible accuracy that then can\ncan be iterated from to improve it further(less regressing = more fun kaggling)"}}