{"cell_type":{"3da0ba0f":"code","b6a7697e":"code","cfb42018":"code","bacc6fae":"code","75203172":"code","4d5c5858":"code","7e170e55":"code","a0ee7fa1":"code","5eec2de4":"code","e95b07ac":"code","c47534f1":"code","2917a315":"code","b7ac1e6e":"code","380453a6":"code","343981df":"code","ae509542":"code","82d47f65":"code","ce639467":"code","2ebc2930":"code","0b8cb253":"markdown","8b25f9d1":"markdown"},"source":{"3da0ba0f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b6a7697e":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/cusersmarildownloadsgermancsv\/german.csv', delimiter=';', encoding = \"ISO-8859-2\", nrows = nRowsRead)\ndf.dataframeName = 'german.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head()","cfb42018":"sns.scatterplot(data=df, x='Duration_of_Credit_monthly', y='Creditability', hue='Credit_Amount', alpha=0.5)","bacc6fae":"X=df.drop('Creditability',axis=1)\ny=df['Creditability']","75203172":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42, shuffle=True)","4d5c5858":"from sklearn.preprocessing import StandardScaler\nscaler= StandardScaler().fit(X_train)\nX_train=scaler.transform(X_train)\nX_test=scaler.transform(X_test)","7e170e55":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_auc_score, plot_roc_curve, confusion_matrix, classification_report, accuracy_score\n\nmodel_set=[LogisticRegression(), DecisionTreeClassifier(),KNeighborsClassifier(n_neighbors=10)]\n       \nfor model in model_set:\n    model.fit(X_train,y_train)\n    model.score(X_train,y_train)\n    pred = model.predict(X_test)\n    print(\"Accuracy scoe of {} is {:.2f}%\\n\".format(model, accuracy_score(y_test, pred)*100))","a0ee7fa1":"accuracy_score(y_test, pred)","5eec2de4":"sns.heatmap(confusion_matrix(y_test, pred), annot=True)","e95b07ac":"print(classification_report(y_test,pred))","c47534f1":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\n\nmodel=Sequential()\nmodel.add(Dense(X_train.shape[1], activation='relu'))\n#model.add(Dropout(0.2))\nmodel.add(Dense(32,activation='relu'))\n#model.add(Dropout(0.2))\nmodel.add(Dense(16,activation='relu'))\nmodel.add(Dense(8,activation='relu'))\nmodel.add(Dense(3,activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))","2917a315":"from tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.optimizers import Adam, SGD\ncallback=EarlyStopping(monitor='val_loss',patience=3)\nmodel.compile(optimizer=Adam(learning_rate=0.0001), loss='binary_crossentropy',metrics=['accuracy'])\nmodel.fit(X_train,y_train, validation_data=(X_test,y_test), verbose=1, epochs=100, callbacks=[callback])","b7ac1e6e":"report =pd.DataFrame(model.history.history)","380453a6":"plt.plot(report[['loss','val_loss']], color='b');","343981df":"plt.plot(report[['accuracy','val_accuracy']])","ae509542":"pred = np.argmax(model.predict(X_test), axis=1)","82d47f65":"accuracy_score(y_test,pred)","ce639467":"from sklearn.decomposition import PCA\nmodel = PCA(n_components=1)\nmodel.fit(X_train,y_train)\nx_val=model.transform(X_train)","2ebc2930":"x_val","0b8cb253":"#Code by Madhan Chandrasekharan https:\/\/www.kaggle.com\/gcmadhan\/classification-with-80-accuracy\/notebook ","8b25f9d1":"#Only that!"}}