{"cell_type":{"cf222066":"code","917c5cfe":"code","864414fc":"code","9e6ed497":"code","3f5e7437":"code","a6b4c8d5":"code","7bb97da6":"code","a80802f5":"code","75c7bf3b":"code","12ca21e1":"code","284b072b":"code","d0684f0d":"code","4df19378":"code","d16a1fae":"code","85f1c1eb":"code","6e437bc7":"code","e44ad9b8":"code","b141775a":"code","ba6fff28":"code","63b49915":"code","4b25e03a":"code","0f56f033":"code","ba259801":"code","66e8511d":"code","e0d21287":"code","e69a2a84":"code","75ef4943":"code","f75fe2ef":"code","fbff1e41":"code","40604256":"code","97274ac5":"code","9b63c47c":"code","062b2016":"code","0295a15d":"markdown","b26a7130":"markdown","91bcd6f1":"markdown","f247b805":"markdown","9c2522be":"markdown","55281b50":"markdown","f4ec9e91":"markdown","1afd986c":"markdown","1d3847cf":"markdown","0b71d653":"markdown","95d4bb0d":"markdown","34f28404":"markdown","ff7b3f25":"markdown","d7d0fa00":"markdown","009460e2":"markdown","0690248c":"markdown","c7b7d8b8":"markdown","e0a1aaa9":"markdown","5cf68690":"markdown","7917e7c8":"markdown","28e1188f":"markdown","1394531f":"markdown","beca4241":"markdown","0d2abef2":"markdown"},"source":{"cf222066":"#Update global variables:\n#When update global variable inside function treat it as local \nx=4\ndef addnum():\n    x+=3\n    return x\nprint(addnum())\n# will print error as x treated as local variable used before assignment","917c5cfe":"#To treat it as global use global keyword\nx=10\ndef addnum():\n    global x\n    x += 5\n    print ('inside fun x=',x)\n    return\n\naddnum()\nprint('outside fun x=',x) ","864414fc":"#to access global variable but still use a local variable with the same name\nx=10\ndef fun():\n    y=globals()['x']     #assign global value to new variable\n    x=15                 #local  x\n    globals()['x']=20    #change global x\n    print ('inside fun',x)\nfun()\nprint('outside fun',x)","9e6ed497":"print('----------------------------')\nprint(3+5) # print numbers\nprint('----------------------------')\nprint('hello python') # print strings\nprint('----------------------------')\nx='hello'\nprint(format(x,\"<30\")) # print on space 30 from start\nprint('----------------------------')\nprint(format(x,\">30\")) # print on space 30 from end\nprint('----------------------------')\n#print in the same line not start new line after write\nprint('Hello python',end='')\nprint('----------------------------')\n#New line in string\nprint('Hello Python\\nWelcome to seriese')\nprint('----------------------------')\n#to print string contain \\n and no mean new line  print it as row\nprint(r'C:\\python\\docs\\navin')\nprint('----------------------------')\n#repeat string\n10* 'start'","3f5e7437":"name=input() # enter string\nnum=int(input()) # enter number\nrow=int(input('Enter number of rows: '))\nprint(f'name {name}, type: {type(name)}')\nprint(f'num {num}, type: {type(num)}')\nprint(f'row {row}, type: {type(row)}')","a6b4c8d5":"#To split line to more than line.\nname=\"ahmed\n# error as double quote not closed","7bb97da6":"name=\"ahmed \\\nmahmoud\"\nprint(name)","a80802f5":"print(\"ahmed\"\n      \" mahmoud\")","75c7bf3b":"print(\"\"\"\n data\n age\"\"\")","12ca21e1":"# for single line comment\n# for multiple line 3 single or double quotes\n'''\n\n'''   \n#or     \n\"\"\"\n\n\"\"\"    \n","284b072b":"# Binary\nnums =bin (12)\nprint(\"binary \",nums)\n#Hexadecimal\nnums =hex (20)\nprint(\"hexadecimal \",nums)\n# Octal \nnums =oct (30)\nprint(\"octal \",nums)","d0684f0d":"# swap variables values in python not need temp variables as done in other programming languages\nprint(\"before swape\")\nx=5\nprint(\"x\",x)\ny=10\nprint(\"y\",y)\nx,y=y,x\nprint(\"after swape\")\nprint(\"x\",x)\nprint(\"y\",y)","4df19378":"x= 12 \ny= 25 \nprint(f'x {x},bin(x) {bin(x)}')\nprint(f'y {y},bin(y) {bin(y)}')\n# Bitwise AND\nz= x&y\nprint(f'x&y {z},bin(x&y) {bin(z)}')\n# Bitwise OR\nz= x|y\nprint(f'x|y {z},bin(x|y) {bin(z)}')\n# Bitwise XOR (exclusive OR) \nz= x^y\nprint(f'x^y {z},bin(x^y) {bin(z)}')\n#complement\n# For any integer n, bitwise complement of n will be -(n+1)\nz= ~x\nprint(f'x {z},bin(~x) {bin(z)}')\n#Right shift \n# shifts all bits towards right by certain number of specified bits.\n212>>2\n# Left shift\n#shifts all bits towards left by a certain number of specified bits. The bit positions that have been vacated by the left shift operator are filled with 0.","d16a1fae":"#length\nnums='123456'\nprint(f'length {len(nums)}')\n#select\nprint(f'select nums[0] {nums[0]}')  \n#slice\nnums[1:3] #return    nums[1],nums[2] \nnums[2:]\nnums[:5]\nst='amuls'\n#slice with increment\nss=st[1:4] #slice from 1 to 3 with increment 1\uf0e0mul\nss=st[1:4:2] #slice from 1 to 3 with increment 2\uf0e0ml\n#reverse\nss=st[::1] #will print all items with increment  1\uf0e0amuls\nss=st[::-1] #will print all items with increment 1 from backwards\uf0e0sluma\n#or with for loop\ndef reverse(string):\n    reversed_string=''\n    for i in string:\n        reversed_string=i+reversed_string\n        print('reversed string is: ',reversed_string)\n\n#count\nnums.count()\nnums.count(3) #count numbers 3 in sequence\n#index\nnums.index(3) #first index contain 3\n#Membership\n3 in nums # return true or false\n#Concatenation\nNums=nums+[1,2,3] \n#Concate list with list or tuble with tuble\n#Minimum\n#Maximum\n#Sum\nsum(nums) ","85f1c1eb":"# To show variable type\nname='jone'\nx='45'\ny=34\ntype(name)\n# To parse variable\nint(x)\nfloat(y)\ncomplex(x)","6e437bc7":"print(\"My name is %s and weight is %d kg!\"%('mahmoud',71))\nprint(\"My name is {} and weight is {} kg!\".format('mahmoud',71))","e44ad9b8":"\ns='red'\uf0e0\ns[0]='m'\uf0e0 #TypeError:str object dosen\u2019t support item assignment","b141775a":"name='youtube'\n#print string\nprint(name)\n#print character in string\nprint(name[2])\n#print range of characters\nprint(name[0:3])\n#print character in string\nprint(name[-2])\n#change character not allowed \nname[1]='g'","ba6fff28":"str1=\"ahmed mahmoud\"\n#functions not change the original string\n#capitalize first letter\nprint(f'capitalize first letter {str1.capitalize()}') \n\n#lower case for all string\nstr2=\"AHMED Mahmoud\"\nprint(f'lower case for all string {str2.lower()}') \n\n#check if all letters is lower\nprint(f'check if all letters in {str1} is lower {str1.islower()}')\n\n#upper case for all string\nprint(f'upper case for all strin {str1.upper()}')\n\n#check if all letters is upper\nprint(f'check if all letters in {str2} is upper {str2.isupper()}')\n\n#swap each letter case from upper to lower and from lower to upper\nprint(f'swap each letter case from upper to lower and from lower to upper in {str2} > {str2.swapcase()}')\n\n#whitespace characters\n#returns true if string contains only whitespace characters and false otherwise.\nprint(f'isspace {str1.isspace()}')\n\n#center string\n#center(width,fillchar)\n#returns a space-padded string with the original string centered to a total of width columns.\nstr1=\"ahmed mahmoud\"\nprint('center string')\nstr1.center(20,'.')\n\ns='this is example'\n#count how many string accured\n#count(str,beg=0,end=len(string))\n#counts how many times str occurs in string or in a substring of string if starting index beg and ending index end are given.\nprint(f' count \"is\" in {s} is {s.count(\"is\")}')\nprint(s.count('I',8))","63b49915":"\n\ns='welcome in python'\n\n#replace\ns.replace('on','oon')\n# check all is digit\ns.isdigit()\uf0e0#false\n\n#check all is alpha\ns.isalpha()\uf0e0#true\n\n#check if string ends with specific string\ns.endswith('mn')\uf0e0#false\n\n#find the index of particular word in string\ns.find('f') \uf0e0#-1 if not exist return -1 otherwise return first occure index\ns.find('w')\uf0e0#0\n\n#length of string\nlen(s)\uf0e0 \n\n#split\nstr1.split()\uf0e0\n\nname='ahmed hassan'\n#capitalize the first letter of each word\nname.title() \n\n#strip function remove extra character alphabets or numbers from left and right side of this string not from the middle\nstr2='!!!!!!hello!!!!!!'\nstr2.strip('!') #hello\n#strip only right\nstr2.rstrip('!')\n#strip only left\nstr2.lstrip('!')","4b25e03a":"stuff='Hello \\nWorld!'\nstuff\nprint(stuff)\n#Newline is still one character-not two\nstuff='X\\nY'\nprint(stuff)\nprint(len(stuff)) #3\n\n#newlines are whitespace. \n#It's things you don't see, but exist. \n#Raw string :\n#Don\u2019t treat the backslash as a special character at all. Every character you put into a raw string stay the way you wrote it.\nprint(r\"C:\\python34\\scripts\\newdata\") ","0f56f033":"#create list elements \n#using range\n#create list from start, start default=0 to end-1 and increment by inc=1\n#range(start, end, inc)\n\nl1=list(range(7))        #[0, 1, 2, 3, 4, 5 ,6]\nprint(l1)\n\nl2=list(range(3,10))     #[3, 4, 5, 6, 7, 8, 9]\nprint(l2)\n\nl3=list(range(3,10,4))    #[3,  7] \nprint(l3)\n\n#create list with expression\nresult=[x**2 for x in range(7)]   #[0, 1, 4, 9, 16, 25, 36]\nprint(result)\n\n#Two dimension list\nnums=[[1,2,3,4,5,6],[7,8,9,10,11,12]]\nnums[0][0]=1\n\nnums=[1,2,3,4,5,6]\n#Print element\nprint(nums[3])\nprint(nums[1:])\nprint(nums[-2])  #start from end with last item index =-1\n\n#edit element\nnums[3]=6\n\n#append to the end\nnums.append(6)\n\n#specify the index value to add to it    (index, value)\nnums.insert(0,4)  \n\n#add more than one value\nnums.extend([3,3,3])\n\n#get minimum value\nmin(nums)\n\n#get maximum value\nmax(nums)\n\n#sort list\nnums.sort()   #list must be the same type or it can\u2019t be sorted\n\n#reverse list\nnums.reverse()\n\n#remove last item\nnums.pop()\n\n#remove specific element index or set of elements\ndel nums[1:2]\n\n#remove value    \/remove first one match the value\nnums.remove(4)     \n\n#remove all elements\nnums.clear()\n\n#remove from specific element index to end\ndel nums [3:]\n\n#delete list \ndel nums\n\nlist1=[1,2,3,4]\n#copy list to another one\nlist2=list1   #when edit list1 list2 will also be changed \n\n#to copy only value\nlist2=list(list1) \n#or   \nlist2=list1[:]\nlist2[0]=20\nprint(list1)\nprint(list2)\n","ba259801":"constval=(1,2,3)\nprint(constval[0])\nconstval[0]=10","66e8511d":"values={1,2,4,6}\nvalues[1]","e0d21287":"#create set\nfruits={'apple','banana'}\n\n#create immutable set using keyword frozenset so can\u2019t add or delete items\nfruits=frozenset(['apple','banana'])\n#add new item\n#fruits.add('grapes') #not allowed as it frozenset\n\n#create empty set\nnums=set()\n\n#add new item\nnums.add(2)\n#add repeated item will be ignored\n\n#operations:\nset1={1,2,3,4,'hello'}\n#membership.\n6 in set1  #false\n#Add\nset1.add(6) \n#Remove \nset1.remove(4) \n#Union    combine elemtns \nset2={1,'apple'}\nset3=set1|set2\n\n#Clear\nset1.clear()   #clear all set1 elements  \n#Intersection \nset1 & set2\n#Difference\nset1-set2    #in set1 not in set2\n#Sym difference\n#Values which are not common in set1 and set2\nset1^set2\n\n#Size\nlen(set1) \n#Copy\nset3=set1.copy()\n","e69a2a84":"#create a dictionaries \ntemp={}\ntemp['one']=3.4\ntemp['two']=5.4\nprint(temp)\n \n#fromkeys function:\n#create dictionaries with keys from the iterables (tuple, range function or any other iterables) and values set to value\n#iterables: anything that can be loop over.\n#Fromkeys(iterable,values)\ntemp=dict.fromkeys([1,2,3],['one','two','three'])\nprint(temp)\ntemp={}.fromkeys(range(1,4),['one','two','three'])\nprint(temp)\n\n#Access keys\uf0e0\ntemp.keys()\n\n#Access values\uf0e0\ntemp.values()\n\n#Access values using keys\ntemp[1]\ntemp.get(1)\n\n#Operations\n#Create empty dictionary\nt=dict()\nt={}\n\n#from list of tuples\ndict1=dict([(1,'one'),(2,'two'),(3,'three')]) #{1:'one',2:'two',3:'three'}\n\n#from two list\na=[1,2,3]\nb=['one','two','three']\nmy_dict={}\nfor I in range(len(a)):\n     my_dict[a[I]]=b[I]\n        \n#Copy dictionary\nt1=dict(dict1)\n\n#Length \nlen(dict1)\n\n#Delete element\ndel temp[1]\n\n#Check key exist \n'one' in temp   #true \n\n#Insert new item\ntemp[4]='four'\n\n#setdefault(key, value optional if nor presented its default none)\n#Check if the key exist return its value if not add it to the dictionary with default value\ntemp.setdefault(5)\n\n#Update\n#To concatenate two dictionaries \ndic1={1:'one',2:'two'}\ndic2={3:'three',4:'four'}\ndic1.update(dic2)\n\n#Update with list\ndic1.update([(5,'Five')]\n#When update with the same key will take the new value for key\n\n","75ef4943":"dic1={1:'one',2:'two'}\ndic2={3:'three',4:'four'}\n#Del\n#Delete item in dictionary with key\n#delete item with key 1 \ndel dic1[1]\n\n#Pop\n#Delete and return the value of the key\ndic1.pop(2)\n\n#Copy\n#Copy shallow value.\ndict2=dic2.copy()\n\n\n#Clear \n#Delete all items\ndic2.clear()  \n#Delete the dictionary when try to access it after that give error it\u2019s not exist\ndel dic1 ","f75fe2ef":"#error as dic1 deleted\ndic1\n","fbff1e41":"#Sort dictionary according to value not key\n#Even Shorter Version\nc={'a':10, 'b':1, 'c':22,'d':10}\nprint(sorted([(v,k) for k,v in c.items()]))\n#List comprehension creates a dynamic list. In this case, we make a list of reversed tuples and then sort it.\n","40604256":"#import math\nimport math \n#or\n#import math as m\n#or\n#from math import pow,sqrt\n\n#squar root\nprint(math.sqrt(4))\n\n#log\nprint(math.log(50))\n\n#power\nprint(math.pow(4,2))\n\n#next higher number\nprint(math.ceil(4.3))\n\nprint(math.ceil(-4.3))\n\n#next lower number\nprint(math.floor(4.6))\n\n#trunc value and give only integer part.\nprint(math.trunc(4.3))\n\n#pi\nprint(math.pi)  #3.141592653589793\n\n#epsilon value\nprint(math.e)  #2.718281828459045\n\n#exponential     \nprint(math.exp(4))   \n#or  \nprint(math.e**4)\n\n#quadratic    \nprint(math.sqrt(25))\n\n#Separate the fractional part and integer part\nprint(math.modf(11.5))  #(0.5,11))","97274ac5":"#radian   degrees to radian\n#print(math.radians(180))\ndegrees=120\nrad=degrees * (math.pi \/ 180)\n\n#radian to degree\n#print(math.degrees(math.pi)) \nrad=2.09\nrad \/ (math.pi \/ 180)","9b63c47c":"import array as arr\n#create array\n#array( type ,values)\narray1=arr([1,2,3,4])","062b2016":"import array as arr\n#create array\n#array( type ,values)\narray1=arr(float64 ,[1,2,3,4])\narray.append(x)\nvals=array(\u2018i\u2019,[1,2,3])\nvals.reverse()\nvals=array('i',[1,2,3])\nnewarr=array(vals.typecode,(a*2 for a in vals))\nprint(newarr)\nlen(newarr)\nnewarr.typecode\n\nmulti dimension array\narr=array([\n        [1,2,3],\n        [4,5,6]\n])\nArr.dtype()\nArr.ndim()   array dimension     \uf0e02\nArr.shape()   shape in rows, columns    \uf0e0(2,3)\nArr2=arr.flatten()  make array one dimension     \uf0e0 [1,2,3,4,5,6]\nFrom 1D to multidimension\nArr3=arr2.reshape(2,3)\nmatrix\nFrom 2d array to matrix\nM=matrix(arr)\nNew matrix\nM=matrix(\u20181,2,3;4,5,6\u2019)\nPrint diagonal element\nPrint(diagonal(m))","0295a15d":"# array\n* to work with array import array module\n<pre>from array import *\n#or\nimport array as ar<\/pre>\n* in the array all values are of the same type","b26a7130":"<div id='introduction' name='introduction'><h1>Introduction <\/h1>\n<h3>What\u2019s python?<\/h3>\n<pre>Python is an interpreted object oriented and high level language, also support procedure programming.\nOne of the fastest growing language in term of developers use it, companies use it, libraries it has, area we can use it in called general purpose language.<\/pre>\n\n<h3>Why it\u2019s so useful? Why you should learn it?<\/h3>\n<pre>Python is easy to use, powerful, and versatile, making it a great choice for beginners and experts alike. Python\u2019s readability makes it a great first programming language \u2014 it allows you to think like a programmer and not waste time with confusing syntax. For instance, look at the following code to print \u201chello world\u201d in Java and Python.<\/pre>\n\n<h3>Area to use:<\/h3>\n<ul><li>Machine learning.\n<li>Software development.\n<li>GUI.\n<li>Web development.<\/ul>\n\n<h3>Why it\u2019s famous?<\/h3>\n<pre>Easy and simpler than c, c++, java\u2026\nCompanies use it Google, drop box, YouTube, yahoo, nasa.<\/pre>\n\n<h3>Why name python?<\/h3>\n<p>The author of python he\u2019s a big fan of a British comedy movie called as monty python\u2019s flying circus <\/p>\n \n<h3>Versions<\/h3>\n<ul><li>1.x   January 1994\n<li>2.x   October 2000\n<li>3.x   December 2008<\/ul>\n\n<h3>Code Run<\/h3>\n<ul><li>Python prompt\n<li>Microsoft command prompt(cmd)\n<ul><li>Type python to access python environment\n<li>start write your code\n<li>or type python followed with the code file name to execute it.<\/ul>\n\n<li>Python IDE<\/ul>\n<pre>An IDE (Integrated Development Environment) is a software application used by developers for\n    creating programs. IDEs are meant to make the developer\u2019s job easier by combining tools that are necessary during software development. \nYour typical IDE will contain tools such as:\n* a text editor;\n* a compiler and\/or interpreter;\n* a debugger and code profiler;\n* version control integration;\n* a number of supporting utilities to interface with external tooling(Docker, cloud deployments,\n    etc.)\n* \u2026all combined into a single user interface.\n\nMany IDEs also include additional, optional features and toolkits. Some are single-language-\n    specific, others support every language you can think of, either out of the box or through plugins.\n<\/pre>\n>   One thing is certain: the selection is so wide that you will definitely find an IDE that can cover \n    all your needs.\n>    1. PyCharm\n>    2. Visual Studio Code\n>    3. Sublime Text\n>    4. Vim\n>    5. Atom\n>    6. Jupyter Notebook\n>    7. Spyder\n    \n\n<h3>Set path in windows<\/h3>\nTo access python in command prompt\n<pre>When install python check the box \u2018Add python to path\u2019\nor from control panel   >   system and security\uf0e0system   >   advanced system settings \nShow new dialog then select   >   Environment variable \nShow new dialog then   >   In system variable double click on path \nClick new then add the path where python installed on your machine\nLike C:\\Users\\marwa\\AppData\\Local\\Programs\\Python\\Python37-32\\Scripts\\ \nIn the command type python then start to type python commands\nTo learn about python type help ()\uf0e0topics <\/pre>\n<\/div>","91bcd6f1":"<div id='operators' name='operators'><h1>Operators <\/h1><\/div>\n\n# symbol used for computation\n># based on operand\n>* unary operator with single operand -4, !true\n>* binary operator\n># based on operator:\n>* Arithmetic\n<pre>Negation : unary operator to negate the operand -4\n'+'    Addition          3+4\n'-'    Subtraction       3-4\n'\/'    Division          7\/3   > 2.3333333333333335 \n'\/\/'   Truncating        7\/\/3  > 2\n'%'    Modulus           give reminder as result\n'*'    Multiplication    3*4\n'**'   Exponential       3**2  >9\n<\/pre>\n>* Assignment\n<pre> =\n +=\n -=\n *=\n \/=\n %=<\/pre>\n>*\tRelational\n<pre>>     Greater than         \n<     Less than         \n==\t  Equal        \n<=\t  Less than or equall       \n>==\t  Greater than or equall \n!=\t  Not equall <\/pre>\n>*\tLogical\/Boolean operators\nCombine two or more statements\n<pre>and    5<6 and 4==4 >  true\n or\n not    to reverse the answer<\/pre>\n>* membership operators\nused to check whether the given element is member of group of elements\n<pre> in             \n not in<\/pre>\n>* unary\n<pre>-x\n X++\n --X<\/pre>\n>* Bitwise operator\n<pre>\n ~    Bitwise complement\n |    Bitwise OR\n &    Bitwise AND\n ^    Bitwise XOR\n <<   Shift left\n >>   Shift right\n <\/pre>","f247b805":"# numeric functions\n<pre>abs(-6)\uf0e0       >6\nround \nround(3.7778687,3)\uf0e0 >  3.778<\/pre>\nTo use ceil, trunk, floor functions need to import math module.\n","9c2522be":"<div id='identifiers' name='identifiers'><h1>Identifiers <\/h1>\n<pre>- Names used in our program:\n- Variables names, functions, etc.\n- Rules for identifier:\n<ul><li>Start with underscore or letter\n<li>Can contain numbers, no special characters.\n<li> Can\u2019t be language keywords.<\/ul>\n<h4>Keywords:<\/h4>\n- Words which has predefined meaning like \u2018 for else if \u2026\u2019\n<h4>Addressing<\/h4>\n- When two variables or more have the same value they have the same address in memory\n<\/pre><\/div>","55281b50":"# Sequences\n* String , tuples, list\n># operations:","f4ec9e91":"<div id='links' name='links'><h1>Links <\/h1>\n    <h2>Requirements <\/h2>\n    <ul>\n        <li><a href ='https:\/\/www.python.org\/downloads\/'>python <\/a><\/li>\n        <li><a href ='https:\/\/www.jetbrains.com\/pycharm\/download'>pycharm<\/a>\n    <\/ul>\n    <h2>YouTube Channels <\/h2>\n    <ul>\n        <li><a href='https:\/\/www.youtube.com\/playlist?list=PLeo1K3hjS3us_ELKYSj_Fth2tIEkdKXvV'>Codebasics<\/a>\n    <\/ul>\n<\/div>","1afd986c":"# Collection\n* List but instead of index use unique keys\n<pre>d={'name':'ahmed','age':33}<\/pre>\n* Print collection keys\nd.keys()\n* Print collection values\nd.values()\n* Print specific value by its key\n<pre>d['name']\nd.get('name')\n<\/pre>\n## dictionary\n* dictionary is something that allows you to store key value pairs.\n* Also known as maps hash table associative arrays and the classical example of a \n* Unordered collection of items and contain key and value pairs inside curly praces.\n* Keys should be of immutable types\/non changeable {integer, string, floating point, tuple}\n* before storing large data to database we need to organize this data or we need to store this data in a particular format and this format is called as data structures\n>* linear data structure\nthat is lists and tuples where the data is stored in the linear order and we can access the data using the location or index of the data\n>* associated data structure\n in the Associated data structure we can access the data using associated key values and the dictionaries are one of the associated data structure \t\n* in the dictionaries there will be keys and values \n* dictionaries are mutable that is we can alter them\n","1d3847cf":"<div id='data_types' name='data_types'><h1>Data Types <\/h1><\/div>\nnone   when the variable to assign to any value yet   in another languages null\n<ul><li>numeric\n<ul><li>int \n    <li>float\n    <li>complex\n    <li>bool <\/ul>\n<li>sequence\n<ul><li>list\n<li>Tuple\n<li>Set\n<li>String   class= str\n<li>range <\/ul>\n<li>collection\n<ul><li>dictionary<\/ul>\n<\/ul>\n","0b71d653":"<div id='number_system_conversion' name='number_system_conversion'><h1>Number system conversion <\/h1><\/div>","95d4bb0d":"# Math library","34f28404":"<div id='comments' name='comments'><h1>Comments<\/h1><\/div> ","ff7b3f25":"<div id='swap_variable' name='swap_variable'><h1>Swap variable<\/h1><\/div>","d7d0fa00":"# Tuple\n* most basic difference between the list and Tuple is that in list all the values have a same meaning whereas Interpol all values have a different meaning when the values are have different meaning they're called heterogeneous values and then they have seen meaning they're called homogeneous values here in this example \n<pre> point(5,6) \uf0e0 5 represent x axis, 6 represent y axis<\/pre>\n* Immutable   like list but can't change value\n","009460e2":"<div id='variables' name='variables'><h1>Variables <\/h1>\n<pre>    X=70 <\/pre>\n<pre>Name given to some value or information.\nVariable as its changed not contain the same value.\nContainers that can hold any data so you can use them to store numerical data tax data. <\/pre>\n<h3>Why variables?<\/h3>\n<pre>When using variables it\u2019s easy to understand the program.\nIn program need to deal with large values it\u2019s easy to write variable name instead of write the value every time.\nNeed to store value in memory for next use.<\/pre>\n<h3>Scope of variables<\/h3>\n<pre>- All variables in a program may not be accessible at all locations in that program. This depends on where you have declared a variable.\n- The scope of a variable determines the portion of the program where you can access a particular identifier. There are two basic scopes of variables in python global, local.\n- Variables that are defined inside a function body have a local scope, and those defined outside have a global scope.\n- This means that local variables can be accessed only inside the function in which they are declared, whereas global variables can be accessed throughout the program body by all functions.\n- When you call a function, the variables declared inside it are brought into scope.<\/pre>\n<h3>Scopes: <\/h3>\n<pre>- Local: can be used in given function other function can\u2019t use it.\n- Global:  can be used in other functions<\/pre><\/div>","0690248c":"# Precedence\n-\t()\n-\t**\n-\tUnary operator\n-\t*,\/,\/\/,%\n-\t+,-\n-\t<<,>>\n-\t&\n-\t^\n-\t|\n-\tRelational and membership\n-\tNot\n-\tAnd\n-\tOr\napply left to right evaluation\n","c7b7d8b8":"# Set\n* mutable data type with non-duplicated unordered vales\n* associated data structure there is no first element, second element.. values unordered\n* Collection of unique elements\n<pre>values={1,2,4,6}<\/pre>\n* indexing not supported\n<pre>values[1] \uf0e0 > error <\/pre>\n","e0a1aaa9":"## Functions","5cf68690":"<h2>Input<\/h2>","7917e7c8":"# string\n* all strings are treated as true, except the empty string \"\"\n* Strings are amongst the most popular types in python. We can create them simply by enclosing characters in quotes. Python treats single quotes the same as double quotes\n* Creating strings is as simple as assigning a value to a variable.\n* Sequence of characters can access its characters using indexing.\n* Strings are immutable in python programming, can\u2019t change it.","28e1188f":"<h1>Content<\/h1>\n<ul>\n    <li><a href='#links'>Links<\/a><\/li>    \n    <li><a href='#introduction'>Introduction<\/a><\/li>\n    <li><a href='#variables'>Variables<\/a><\/li>\n    <li><a href='#identifiers'>Identifiers<\/a><\/li>\n    <li><a href='#input_output'>Input Output<\/a><\/li>\n    <li><a href='#line_join'>Implicit and explicit line joining<\/a><\/li>\n    <li><a href='#comments'>Comments<\/a><\/li>\n    <li><a href='#data_types'>DataTypes<\/a><\/li>\n    <li><a href='#number_system_conversion'>Number system conversion<\/a><\/li>\n    <li><a href='#swap_variable'>Swap variable<\/a><\/li>\n    <li><a href='#operators'>Operators<\/a><\/li>\n    <li><a href='#precedence'>Precedence<\/a><\/li>\n    <li><a href='#sequences'>Sequences<\/a><\/li>\n    <li><a href='#collection'>Collection<\/a><\/li>\n<\/ul>","1394531f":"<div id='line_join' name='line_join'><h1>Implicit and explicit line joining <\/h1><\/div> ","beca4241":"# List\n* Group of different types of elements.\n* When make our grocery list ( items that we won't buy from grocery store ) create different variables or different items for example \n<pre>item 1 ='bread'\nitem 2 ='pasta'\nitem 3 ='fruits'<\/pre> \n* But the problem here is you are creating so many variables if you have like certain items say ten to buy from a grocery store you will create ten variables \n* instead using list just define one list variable and add all items in it\n<pre>items= ['bread', 'pasta', 'fruits']<\/pre>\n* the most basic data structure in python is the sequence. Each element of a sequence is assigned a number \u2013its position or index. The first index is zero, the second index is one, and so forth\n* creating a list is simple as putting different comma-separated values between square brackets.\n* For example:\n<pre>List1=[1,2,3,4,5]\nList2=[\"a\",\"b\",\"c\",\"d\"]<\/pre>\n* List maintain order so the order that you put things in is the order that you get them out.\n* mutable can access, change, add, or remove value.\n* Linear data structure that is elements are arranged in the linear order that is there will be a first element ,second element, third element so this called as linear data structure.\n* Contain mixed type of elements.\n* Variable length.\n* Zero based indexing.\n* list items enclosed in square brakets\n>* nums =[1,2,3,4]","0d2abef2":"<div id='input_output' name='input_output'><h1>Input\/ Output <\/h1>\n\n<h2>Output<\/h2>\n<\/div>"}}