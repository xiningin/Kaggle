{"cell_type":{"237aaebf":"code","faf2df1c":"code","06accbba":"code","f455ec7f":"code","c8ee305e":"code","fa4c6b20":"code","cab4294a":"code","68e0d24e":"code","b0225953":"code","bf5f88f7":"code","960e0c1e":"code","066df26d":"code","085fa08a":"code","5099d442":"code","fe56f982":"code","0ce740e7":"code","5723a096":"code","7ef8cecf":"code","c0e13018":"code","ca6c9ce9":"code","95f4c161":"code","6f01e97b":"code","f6e426bb":"code","d017dd07":"code","53a3f104":"code","d8d56084":"code","c7c4151c":"code","ff0476b5":"code","2e24b10f":"code","94593800":"code","20c1ecc0":"code","168e4c77":"code","f8ca19e2":"code","80506f99":"code","fd6c471a":"code","916a7556":"code","9c6358e3":"code","400c4950":"code","dab00257":"code","8576ebe2":"code","780a18a7":"code","990d6c5a":"code","b0c182e9":"code","529625bf":"code","bdde9f90":"code","56e9b40f":"code","f8604d09":"code","a74655eb":"code","8f157249":"code","96fd3128":"code","56c80a05":"code","496914cc":"code","e5fd94bd":"code","5b228900":"code","0a8c4bec":"code","0a2e560f":"code","17f37a38":"code","aa900ffc":"code","fba99a41":"code","a84e08ef":"code","96ffbae9":"markdown","98e7c09d":"markdown"},"source":{"237aaebf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","faf2df1c":"df = pd.read_csv(\"\/kaggle\/input\/health-insurance-cross-sell-prediction\/train.csv\")","06accbba":"df.head()","f455ec7f":"import pandas as pd\nimport seaborn as sn\nimport matplotlib.pyplot as plt","c8ee305e":"new_df = df.copy()","fa4c6b20":"gender_uniques = list(new_df[\"Gender\"].unique())\nnew_df[\"Gender\"] = new_df[\"Gender\"].apply(lambda x: gender_uniques.index(x))","cab4294a":"corrMatrix = new_df.corr()\nfig, ax = plt.subplots(figsize= (15,10))\nsn.heatmap(corrMatrix, annot=True)\nplt.show()","68e0d24e":"new_df.head()","b0225953":"vehicle_age_dict= {\n    '> 2 Years' : 2,\n    '1-2 Year' : 1,\n    \"< 1 Year\" : 0\n}\nnew_df[\"Vehicle_Age\"] = new_df[\"Vehicle_Age\"].apply(lambda x: vehicle_age_dict[x])","bf5f88f7":"new_df.head()","960e0c1e":"dict_damage = {\"Yes\": 1, \"No\": 0}\nnew_df[\"Vehicle_Damage\"] = new_df[\"Vehicle_Damage\"].apply(lambda x: dict_damage[x])","066df26d":"new_df.head()","085fa08a":"corrMatrix = new_df.corr()\nfig, ax = plt.subplots(figsize= (15,10))\nsn.heatmap(corrMatrix, annot=True)\nplt.show()","5099d442":"age =list(new_df[\"Age\"])\nresponses = list(new_df[\"Response\"])","fe56f982":"age_groups = list([(i-1, i) for i in range(1, 100, 1)])","0ce740e7":"age_groups_response = {age_group: [0, 0] for age_group in age_groups}","5723a096":"def get_age_group(age):\n    for group in age_groups:\n        if group[0] <= age <= group[1]:\n            return group","7ef8cecf":"age_groups_response","c0e13018":"for a, r in zip(age, responses):\n    group = get_age_group(a)\n    age_groups_response[group][1] += 1\n    if r == 1:\n        age_groups_response[group][0] += 1","ca6c9ce9":"age_groups_response","95f4c161":"groups, response_rate = zip(*list(map(lambda x: (x[0], x[1][0] \/ (x[1][1]+1)),age_groups_response.items())))","6f01e97b":"groups","f6e426bb":"response_rate","d017dd07":"#groups_string = list([f\"{group[0]}-{group[1]}\" for group in groups])\ngroups_string = []\nfor i in range(len(groups)):\n    group = groups[i]\n    if i % 5 ==0:\n        groups_string.append(f\"{group[0]}\")\n    else:\n        groups_string.append(\"\")","53a3f104":"plt.bar(list([i for i in range(len(response_rate))]), response_rate, tick_label=groups_string)","d8d56084":"mean_response_rate = responses.count(1) \/ len(responses)","c7c4151c":"mean_response_rate","ff0476b5":"plt.bar(list([i for i in range(len(response_rate))]), response_rate, tick_label=groups_string, label=\"response_rate\")\nplt.plot([0,100], [mean_response_rate, mean_response_rate],c=\"grey\", label=\"mean response rate\")\nplt.xlabel(\"age\")\nplt.ylabel(\"response rate\")\nplt.legend()","2e24b10f":"age_groups = list([(0, 30), (30, 50), (50 , 60), (60, 100)])","94593800":"def get_age_group(age):\n    for group in age_groups:\n        if group[0] <= age <= group[1]:\n            return group","20c1ecc0":"ages = list(new_df[\"Age\"])","168e4c77":"age_groups_l = [[] for _ in range(len(age_groups))]\nfor age in ages:\n    group = get_age_group(age)\n    i = age_groups.index(group)\n    age_groups_l[i].append(1)\n    all_indices = list([i for i in range(len(age_groups_l))])\n    all_indices.remove(i)\n    for index in all_indices:\n        age_groups_l[index].append(0)\n    ","f8ca19e2":"age_groups_l","80506f99":"for group, group_name in zip(age_groups_l, age_groups):\n    group_str = f\"age group {group_name[0]} -{group_name[1]}\"\n    new_df[group_str] = group","fd6c471a":"new_df.head(10)","916a7556":"corrMatrix = new_df.corr()\nfig, ax = plt.subplots(figsize= (15,10))\nsn.heatmap(corrMatrix, annot=True)\nplt.show()","9c6358e3":"rc = list(new_df[\"Region_Code\"])\nresponse = list(new_df[\"Response\"])","400c4950":"new_df[\"Region_Code\"].describe()","dab00257":"region_codes = list(set(rc))","8576ebe2":"region_codes_dict = {r: [0, 0]for r in region_codes}","780a18a7":"def categorical_data_to_groups(data, responses):\n    uniques = list(set(data))\n    data_response_dict = {d: [0, 0] for d in uniques}\n    for region_code_, r in zip(data, responses):\n        if r==1:\n            data_response_dict[region_code_][0] += 1\n        data_response_dict[region_code_][1] += 1\n    region_codes, response_rates = zip(*list(map(lambda x: (x[0], x[1][0] \/ (x[1][1]+0.1)) , list(data_response_dict.items()))))\n    return region_codes, response_rates","990d6c5a":"for region_code_, r in zip(rc, response):\n    if r==1:\n        region_codes_dict[region_code_][0] += 1\n    region_codes_dict[region_code_][1] += 1","b0c182e9":"region_codes_dict","529625bf":"region_codes, response_rates = zip(*list(map(lambda x: (x[0], x[1][0] \/ (x[1][1]+0.1)) , list(region_codes_dict.items()))))","bdde9f90":"plt.bar(list([i for i in range(len(response_rates))]), response_rates)\nplt.plot([0,len(response_rates)], [mean_response_rate, mean_response_rate],c=\"grey\", label=\"mean response rate\")","56e9b40f":"sorted_response_rate = sorted(list(zip(region_codes, response_rates)), key= lambda x: x[1], reverse=True)","f8604d09":"region_codes_groups = [\"top region\",\"normal region\", \"bad region\"]\nsizes = [(0,10), (10, 30), (30, 53)]","a74655eb":"region_codes_sorted, response_rates = zip(*sorted_response_rate)","8f157249":"top_group = region_codes_sorted[:sizes[0][1]]\nnormal_group = region_codes_sorted[sizes[1][0]:sizes[1][1]]\nbad_group = region_codes_sorted[sizes[2][0]:]\n# region_codes_g = [top_group, normal_group, bad_group]","96fd3128":"bad_group","56c80a05":"groups_ = [top_group, normal_group, bad_group]","496914cc":"arrays = [[], [], []]\nfor region_code_, r in zip(rc, response):\n    for i in range(len(groups_)):\n        arrays[i].append(int(region_code_ in groups_[i]))","e5fd94bd":"for counter, ar in enumerate(arrays):\n    name = region_codes_groups[counter]\n    new_df[name] = ar","5b228900":"new_df.head()","0a8c4bec":"plt.boxplot(response_rates)","0a2e560f":"corrMatrix = new_df[[\"Response\", \"top region\", \"normal region\", \"bad region\"]].corr()\nfig, ax = plt.subplots(figsize= (15,10))\nsn.heatmap(corrMatrix, annot=True)\nplt.show()","17f37a38":"new_df.head()","aa900ffc":"data = list(new_df[\"Policy_Sales_Channel\"])\nresponses = list(new_df[\"Response\"])","fba99a41":"data_values, response_rates = categorical_data_to_groups(data, responses)","a84e08ef":"plt.title(\"Policy Sales Channel Response Rates\")\nplt.bar(list([i for i in range(len(response_rates))]), response_rates)\nplt.plot([0,len(response_rates)], [mean_response_rate, mean_response_rate],c=\"grey\", label=\"mean response rate\")\nplt.xlabel(\"Policy Sales Channels\")\nplt.ylabel(\"response rates\")\n\n","96ffbae9":"Top!! Region Code works!","98e7c09d":"# Age groups have correlation the positive response is much better at ages 30 - 50"}}