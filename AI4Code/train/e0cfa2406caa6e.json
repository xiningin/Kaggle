{"cell_type":{"3d7050c7":"code","b405d77f":"code","ca06a136":"code","b64a88fc":"code","382bf9e9":"code","d932fda2":"code","cca66fbd":"code","454588a9":"code","33d83a4c":"code","361c1f60":"code","fe400438":"code","911c703b":"code","fbecf366":"code","bc274052":"code","0a58fc1c":"code","01bc3d98":"code","33d2c4fa":"code","d5c37663":"code","8259071b":"code","43c2344d":"code","77268c47":"code","af4dd98e":"code","cb2c1f89":"code","a43d33eb":"code","f58b9f2c":"code","2232b05a":"code","74c294b4":"code","c0aa00ff":"code","2f5b9b4f":"code","3022842f":"code","be9ca0ee":"code","44ea8f6f":"code","1341ef0d":"code","c5280f26":"code","38083b1a":"code","4a2ae775":"code","966387e3":"code","58540246":"code","3a757357":"code","f44cdcfe":"code","098912b7":"code","cc7cb1c8":"code","fafc38e4":"code","96cb6167":"code","7a5d2dc9":"code","3f0fecf1":"code","a43d00a4":"code","164ac7b6":"code","3106a427":"code","d72a7aa7":"code","78d7213a":"code","07e59ec1":"code","1d792658":"code","b87b2400":"code","a165bffc":"code","c6dc89ab":"code","c58858a2":"code","372eb374":"code","19fefdcb":"code","f8794528":"code","c54dd3e6":"code","99632e3d":"code","9401179c":"code","ec899b8e":"code","b1ef70eb":"code","15fca4b8":"code","3a11de0b":"code","224d2ac8":"code","b3b7e31d":"code","a8729bd7":"code","e2d2eda3":"code","5e93768e":"code","e032ff04":"code","d74d761e":"code","2b0bd9a7":"code","f69469e8":"code","5e7bf06f":"code","a281a613":"code","acbcf0d9":"code","dd0a18b3":"code","e3ff1428":"code","32e77f7c":"code","d67d4874":"code","0f14e8c4":"code","87d8168d":"code","e1323b13":"code","68515806":"code","5392354a":"code","c3e29ed6":"code","9b2854bf":"code","b0e88fd1":"code","3779ef75":"code","e5bf26d3":"code","23fffc70":"code","0e334724":"code","99c5b002":"code","ff86d223":"code","4c2405d2":"code","7e342405":"code","5ac65ae8":"code","d1e6418a":"code","1e436cbf":"code","576fe2a1":"code","c360fa33":"code","632bc425":"code","e4aa5446":"code","41275ac0":"code","fff8db30":"code","3f28dbb4":"code","48702bf4":"code","30892776":"code","59c5c409":"code","f5718ca0":"code","944f151c":"code","122d1157":"code","43b0dcbd":"code","ddd8aa0d":"code","f45167c4":"code","a8041ca1":"code","50aee619":"code","dcff42dc":"code","6cee14e6":"code","df17269e":"code","3e154fe5":"code","22f26b2a":"markdown","b5f1d32f":"markdown","6c0c0f24":"markdown","12ddbdab":"markdown"},"source":{"3d7050c7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","b405d77f":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ca06a136":"def plot_feature(df,col):\n    plt.figure(figsize=(14,6))\n    plt.subplot(1,2,1)\n    if df[col].dtype == 'int64':\n        df[col].value_counts().sort_index().plot()\n    else:\n        mean = df.groupby(col)['Sales'].mean()\n        df[col] = df[col].astype('category')\n        levels = mean.sort_values().index.tolist()\n        df[col].cat.reorder_categories(levels,inplace=True)\n        df[col].value_counts().plot()\n    plt.xticks(rotation=45)\n    plt.xlabel(col)\n    plt.ylabel('Counts')\n    plt.subplot(1,2,2)\n    \n    if df[col].dtype == 'int64' or col == 'Sales':\n        mean = df.groupby(col)['Sales'].mean()\n        std = df.groupby(col)['Sales'].std()\n        mean.plot()\n        plt.fill_between(range(len(std.index)),mean.values-std.values,mean.values + std.values, \\\n                        alpha=0.1)\n    else:\n        sns.boxplot(x = col,y='Sales',data=df)\n    plt.xticks(rotation=45)\n    plt.ylabel('Sales')\n    plt.show()    ","b64a88fc":"def missingdata(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    ms=pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    ms= ms[ms[\"Percent\"] > 0]\n    f,ax =plt.subplots(figsize=(8,6))\n    plt.xticks(rotation='90')\n    fig=sns.barplot(ms.index, ms[\"Percent\"],color=\"green\",alpha=0.8)\n    plt.xlabel('Features', fontsize=15)\n    plt.ylabel('Percent of missing values', fontsize=15)\n    plt.title('Percent missing data by feature', fontsize=15)\n    return ms","382bf9e9":"def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n                        n_jobs=1, train_sizes=np.linspace(.1, 1.0, 5)):\n    plt.figure()\n    plt.title(title)\n    if ylim is not None:\n        plt.ylim(*ylim)\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    plt.grid()\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1,\n                     color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n             label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n             label=\"Validation score\")\n\n    plt.legend(loc=\"best\")\n    return plt","d932fda2":"df = pd.read_csv('\/kaggle\/input\/Advertising.csv')","cca66fbd":"df.head()","454588a9":"df.info()","33d83a4c":"#plt.figure(figsize=(12,7))\nsns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","361c1f60":"df.isnull().sum()","fe400438":"df.describe()","911c703b":"df.corr()","fbecf366":"plt.figure(figsize=(12,5))\nsns.heatmap(df.corr(),annot=True,cmap='Blues')\nplt.show()","bc274052":"plt.figure(figsize=(12,5))\nsns.heatmap(df.corr(),annot=False,cmap='viridis')\nplt.show()","0a58fc1c":"plt.figure(figsize=(12,5))\nsns.heatmap(df.corr(),annot=True,cmap='Reds')\nplt.show()","01bc3d98":"# Data back up we use it for Eda\ndf1 =  df.copy()\ndf2  = df.copy()\ndf3  = df.copy()","33d2c4fa":"df1.head()","d5c37663":"plot_feature(df1,'TV')","8259071b":"plot_feature(df1,'Radio')","43c2344d":"plot_feature(df1,'Newspaper')","77268c47":"plt.style.use('dark_background')\ndf1.plot(x='TV',y='Sales',color='white')\nplt.show()","af4dd98e":"plt.style.use('dark_background')\ndf1.plot(x='Radio',y='Sales')\nplt.show()","cb2c1f89":"plt.style.use('dark_background')\ndf1.plot(x='Newspaper',y='Sales')\nplt.show()","a43d33eb":"plt.style.use('ggplot')\ndf1['TV'].value_counts().plot()\nplt.show()","f58b9f2c":"plt.style.use('ggplot')\ndf1['Radio'].value_counts().plot()\nplt.show()","2232b05a":"plt.style.use('ggplot')\ndf1['Newspaper'].value_counts().plot()\nplt.show()","74c294b4":"df2['TV'] = df2['TV'].apply(int)\ndf2['Radio'] = df2['Radio'].apply(int)\ndf2['Newspaper'] = df2['Newspaper'].apply(int)\ndf2['Sales'] = df2['Sales'].apply(int)","c0aa00ff":"plt.style.use('ggplot')\ndf2['TV'].value_counts().plot()\nplt.show()","2f5b9b4f":"plt.style.use('ggplot')\ndf2['Radio'].value_counts().plot()\nplt.show()","3022842f":"plt.style.use('ggplot')\ndf2['Newspaper'].value_counts().plot()\nplt.show()","be9ca0ee":"plt.style.use('ggplot')\ndf2['Sales'].value_counts().plot()\nplt.show()","44ea8f6f":"df2['TV'].mean()","1341ef0d":"def tv_avg(tv):\n    if tv >= 146.57:\n        return \"Higher\"\n    else:\n        return \"Lower\"","c5280f26":"plt.figure(figsize=(15,8))\nplt.style.use('ggplot')\ndf2['TV'].apply(tv_avg).value_counts().plot(kind = \"pie\",legend=True)\nplt.show()","38083b1a":"df2['Radio'].mean()","4a2ae775":"def radio_avg(radio):\n    if tv >= 22.79:\n        return \"Higher\"\n    else:\n        return \"Lower\"","966387e3":"plt.figure(figsize=(15,8))\nplt.style.use('ggplot')\ndf2['Radio'].apply(tv_avg).value_counts().plot(kind = \"pie\",legend=True)\nplt.show()","58540246":"df2['Newspaper'].mean()","3a757357":"def radio_avg(radio):\n    if tv >= 30.1:\n        return \"Higher\"\n    else:\n        return \"Lower\"","f44cdcfe":"plt.figure(figsize=(15,8))\nplt.style.use('ggplot')\ndf2['Newspaper'].apply(tv_avg).value_counts().plot(kind = \"pie\",legend=True)\nplt.show()","098912b7":"df2['TV'].value_counts().sum()","cc7cb1c8":"def tv_sales(tv):\n    if tv <= 50:\n        return \"drop sales\"\n    elif tv > 100 and tv <=239:\n        return \"Sales imporved\"\n    else:\n        \"avg Sales\"","fafc38e4":"plt.figure(figsize=(10,5))\nplt.style.use('ggplot')\ndf2['TV'].apply(tv_sales).value_counts().plot(kind='bar')\nplt.show()","96cb6167":"plt.figure(figsize=(10,5))\ndf2['TV'].plot(kind='hist',bins=50)\nplt.show()","7a5d2dc9":"plt.figure(figsize=(10,5))\ndf2['Radio'].plot(kind='hist',bins=50)\nplt.show()","3f0fecf1":"plt.figure(figsize=(10,5))\ndf2['Newspaper'].plot(kind='hist',bins=50)\nplt.show()","a43d00a4":"plt.figure(figsize=(10,5))\ndf2['Sales'].plot(kind='hist',bins=50)\nplt.show()","164ac7b6":"df3.head()","3106a427":"for col in df3.columns:\n    plt.figure(figsize=(19,10))\n    sns.barplot(x=col,y='Sales',data=df3)\n    plt.tight_layout()\n    plt.show()","d72a7aa7":"for col in df3.columns:\n    plt.figure(figsize=(18,9))\n    sns.jointplot(x=col,y='Sales',data=df3,kind='reg')\n    plt.tight_layout()\n    plt.show()","78d7213a":"for col in df3.columns:\n    plt.figure(figsize=(18,9))\n    sns.jointplot(x=col,y='Sales',data=df3,kind='hex')\n    plt.tight_layout()\n    plt.show()","07e59ec1":"for col in df3.columns:\n    plt.figure(figsize=(18,9))\n    sns.jointplot(x=col,y='Sales',data=df3,kind='hex',space=0,color='g')\n    plt.tight_layout()\n    plt.show()","1d792658":"for col in df3.columns:\n    plt.figure(figsize=(18,9))\n    sns.stripplot(x=col,y='Sales',data=df3,jitter=True,edgecolor='gray',size=10,palette='winter',orient='v')\n    plt.tight_layout()\n    plt.show()","b87b2400":"for col in df3.columns:\n    plt.figure(figsize=(18,9))\n    sns.swarmplot(x=col,y='Sales',data=df3)\n    plt.tight_layout()\n    plt.show()","a165bffc":"for col in df3.columns:\n    plt.figure(figsize=(18,9))\n    sns.factorplot(x=col,y='Sales',data=df3)\n    plt.tight_layout()\n    plt.show()","c6dc89ab":"for col in df3.columns:\n    plt.figure(figsize=(18,9))\n    sns.residplot(x=col,y='Sales',data=df3,lowess=True)\n    plt.tight_layout()\n    plt.show()","c58858a2":"for col in df3.columns:\n    plt.figure(figsize=(18,9))\n    sns.distplot(df3[col],color='red')\n    plt.tight_layout()\n    plt.show()","372eb374":"for col in df3.columns:\n    plt.figure(figsize=(18,9))\n    plt.plot(col,'Sales',data=df3,color='orange')\n    plt.tight_layout()\n    plt.show()","19fefdcb":"for col in df3.columns:\n    plt.figure(figsize=(18,9))\n    plt.bar(col,'Sales',data=df3,color='Orange')\n    plt.tight_layout()\n    plt.xlabel(col)\n    plt.ylabel('Sales')\n    plt.show()","f8794528":"for col in df3.columns:\n    plt.figure(figsize=(18,9))\n    sns.lineplot(x=col,y='Sales',data=df3)\n    plt.tight_layout()\n    plt.xlabel(col)\n    plt.ylabel('Sales')\n    plt.show()","c54dd3e6":"import scipy.stats as st\nfor col in df3.columns:\n    plt.figure(figsize=(18,9))\n    st.probplot(df3[col],plot=plt)\n    plt.tight_layout()\n    plt.show()","99632e3d":"for col in df3.columns:\n    plt.figure(figsize=(18,9))\n    sns.barplot(x=col,y='Sales',data=df3)\n    sns.pointplot(x=col,y='Sales',data=df3,color='Black')\n    plt.tight_layout()\n    plt.show()","9401179c":"for col in df3.columns:\n    plt.figure(figsize=(18,9))\n    sns.boxplot(data=df3)\n    sns.stripplot(data=df3,jitter=True,edgecolor='gray')\n    plt.tight_layout()\n    plt.ylabel('Sales')\n    plt.show()","ec899b8e":"for col in df3.columns:\n    plt.figure(figsize=(18,9))\n    plt.scatter(x=col,y='Sales',data=df3)\n    plt.tight_layout()\n    plt.xlabel(col)\n    plt.ylabel('Sales')\n    plt.axhline(15,color='Black')\n    plt.axvline(50,color='Black')\n    plt.show()","b1ef70eb":"for col in df3.columns:\n    plt.figure(figsize=(18,9))\n    sns.kdeplot(data=df3)\n    plt.tight_layout()\n    plt.show()","15fca4b8":"sns.pairplot(df3)\nplt.show()","3a11de0b":"plt.figure(figsize=(14,6))\nplt.subplot(1,2,1)\nsns.boxplot(df3.Sales)\nplt.subplot(1,2,2)\nsns.distplot(df3.Sales,bins=20)\nplt.show()","224d2ac8":"q = df3.Sales.describe()\nprint(q)\nIQR    = q['75%'] - q['25%']\nUpper  = q['75%'] + 1.5 * IQR\nLower  = q['25%'] - 1.5 * IQR\nprint(\"the upper and lower outliers are {} and {}\".format(Upper,Lower))","b3b7e31d":"rows =2\n\ncols = 2\n\nfig,ax = plt.subplots(nrows=rows,ncols=cols,figsize=(16,5))\n\ncol = df3.columns\n\nindex = 0\n\nfor i in range(rows):\n    for j in range(cols):\n        sns.distplot(df3[col[index]],ax=ax[i][j])\n        index = index + 1\n        \nplt.tight_layout()","a8729bd7":"rows = 2\ncols = 2\n\nfig,ax = plt.subplots(nrows=rows,ncols=cols,figsize=(16,5))\n\ncol = df3.columns\n\nindex = 0\n\nfor i in range(rows):\n    for j in range(cols):\n        sns.regplot(x=df3[col[index]],y=df3['Sales'],ax=ax[i][j])\n        index = index + 1\n        \nplt.tight_layout()\n        ","e2d2eda3":"# back to orginal data\ndf.head()","5e93768e":"def normalize (x): \n    return ( (x-np.min(x))\/ (max(x) - min(x)))","e032ff04":"df = df.apply(normalize)","d74d761e":"X = df.drop(['Sales'],axis=1)","2b0bd9a7":"y = df[['Sales']]","f69469e8":"X.head()","5e7bf06f":"y.head()","a281a613":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn import metrics\nfrom sklearn.ensemble import GradientBoostingRegressor\nimport time\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import learning_curve\nimport statsmodels.api as sm\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV","acbcf0d9":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=100)","dd0a18b3":"cross_val_score(LinearRegression(),X_train,y_train).mean()","e3ff1428":"cross_val_score(RandomForestRegressor(n_estimators=100),X_train,y_train).mean()","32e77f7c":"cross_val_score(GradientBoostingRegressor(),X_train,y_train).mean()","d67d4874":"cross_val_score(SVR(),X_train,y_train).mean()","0f14e8c4":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","87d8168d":"rf = RandomForestRegressor(n_estimators=100)\nrf.fit(X_train,y_train)\npred = rf.predict(X_test)\nr2_score(y_test,pred)","e1323b13":"gb = GradientBoostingRegressor()\ngb.fit(X_train,y_train)\npred = gb.predict(X_test)\nr2_score(y_test,pred)","68515806":"svm = SVR()\nsvm.fit(X_train,y_train)\npred = svm.predict(X_test)\nr2_score(y_test,pred)","5392354a":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","c3e29ed6":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","9b2854bf":"rf.feature_importances_","b0e88fd1":"feature_importance = pd.Series(rf.feature_importances_,index=X_train.columns)\nfeature_importance.sort_values()\nfeature_importance.plot(kind='barh',figsize=(8,6))\nplt.show()","3779ef75":"plt.figure(figsize=(7,8))\nfeatures = X_train.columns\nimportances = rf.feature_importances_\nindices = np.argsort(importances)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='Blue', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","e5bf26d3":"from sklearn.feature_selection import SelectFromModel","23fffc70":"fe = SelectFromModel(RandomForestRegressor(n_estimators=100))","0e334724":"fe.fit(X_train,y_train)","99c5b002":"fe.get_support()","ff86d223":"a = X_train.columns[fe.get_support()]","4c2405d2":"a","7e342405":"lr = LinearRegression()\nlr.fit(X_train[a],y_train)\npred = lr.predict(X_test[a])\nr2_score(y_test,pred)","5ac65ae8":"rf = RandomForestRegressor(n_estimators=100)\nrf.fit(X_train[a],y_train)\npred = rf.predict(X_test[a])\nr2_score(y_test,pred)","d1e6418a":"gb = GradientBoostingRegressor()\ngb.fit(X_train[a],y_train)\npred = gb.predict(X_test[a])\nr2_score(y_test,pred)","1e436cbf":"from sklearn.feature_selection import RFE","576fe2a1":"def run_Linear(X_train, X_test, y_train, y_test):\n    clf = LinearRegression()\n    clf.fit(X_train, y_train)\n    pred = clf.predict(X_test)\n    print('R2 Score: ', r2_score(y_test, pred))\n    print('MSE:',metrics.mean_squared_error(pred,y_test))\n    rms = np.sqrt(metrics.mean_squared_error(pred, y_test))\n    print('RMSE:',rms)","c360fa33":"def run_randomForest(X_train, X_test, y_train, y_test):\n    clf = RandomForestRegressor(n_estimators=100, random_state=100, n_jobs=-1)\n    clf.fit(X_train, y_train)\n    pred = clf.predict(X_test)\n    print('R2 Score: ', r2_score(y_test, pred))\n    print('MSE:',metrics.mean_squared_error(pred,y_test))\n    rms = np.sqrt(metrics.mean_squared_error(pred, y_test))\n    print('RMSE:',rms)","632bc425":"def run_Gradient(X_train, X_test, y_train, y_test):\n    clf = GradientBoostingRegressor(n_estimators=100, random_state=100)\n    clf.fit(X_train, y_train)\n    pred = clf.predict(X_test)\n    print('R2 Score: ', r2_score(y_test, pred))\n    print('MSE:',metrics.mean_squared_error(pred,y_test))\n    rms = np.sqrt(metrics.mean_squared_error(pred, y_test))\n    print('RMSE:',rms)","e4aa5446":"for index in range(1,4):\n    fe = RFE(LinearRegression(), n_features_to_select = index)\n    fe.fit(X_train, y_train)\n    X_train_b = fe.transform(X_train)\n    X_test_b = fe.transform(X_test)\n    print('Selected Feature: ', index)\n    run_Linear(X_train_b, X_test_b, y_train, y_test)\n    print()","41275ac0":"for index in range(1,4):\n    fe = RFE(RandomForestRegressor(n_estimators=100, random_state=100), n_features_to_select = index)\n    fe.fit(X_train, y_train)\n    X_train_b = fe.transform(X_train)\n    X_test_b = fe.transform(X_test)\n    print('Selected Feature: ', index)\n    run_randomForest(X_train_b, X_test_b, y_train, y_test)\n    print()","fff8db30":"for index in range(1,4):\n    fe = RFE(GradientBoostingRegressor(random_state=100), n_features_to_select = index)\n    fe.fit(X_train, y_train)\n    X_train_b = fe.transform(X_train)\n    X_test_b = fe.transform(X_test)\n    print('Selected Feature: ', index)\n    run_Gradient(X_train_b, X_test_b, y_train, y_test)\n    print()","3f28dbb4":"fe = RFE(RandomForestRegressor(n_estimators=100, random_state=100), n_features_to_select = 2)\nfe.fit(X_train, y_train)\nX_train_b = fe.transform(X_train)\nX_test_b = fe.transform(X_test)\nprint('Selected Feature: ', 2)\nrun_randomForest(X_train_b, X_test_b, y_train, y_test)\nprint()","48702bf4":"fe.get_support()","30892776":"a = X_train.columns[fe.get_support()]","59c5c409":"a","f5718ca0":"lr = LinearRegression()\nlr.fit(X_train[a],y_train)\npred = lr.predict(X_test[a])\nr2_score(y_test,pred)","944f151c":"rf = RandomForestRegressor(n_estimators=100)\nrf.fit(X_train[a],y_train)\npred = rf.predict(X_test[a])\nr2_score(y_test,pred)","122d1157":"gb = GradientBoostingRegressor()\ngb.fit(X_train[a],y_train)\npred = gb.predict(X_test[a])\nr2_score(y_test,pred)","43b0dcbd":"svm = SVR()\nsvm.fit(X_train[a],y_train)\npred = svm.predict(X_test[a])\nr2_score(y_test,pred)","ddd8aa0d":"plt.style.use('default')","f45167c4":"title = \"Learning Curves (Linear Regression)\"\ncv = 5\nplot_learning_curve(lr, title, X_train[a], \n                    y_train, ylim=(0.7, 1.0), cv=cv, n_jobs=-1);","a8041ca1":"title = \"Learning Curves (Random Forest)\"\ncv = 5\nplot_learning_curve(rf, title, X_train[a], \n                    y_train, ylim=(0.7, 1.0), cv=cv, n_jobs=-1);","50aee619":"title = \"Learning Curves (Gradient Boosting)\"\ncv = 5\nplot_learning_curve(gb, title, X_train[a], \n                    y_train, ylim=(0.7, 1.0), cv=cv, n_jobs=-1);","dcff42dc":"title = \"Learning Curves (Gradient Boosting)\"\ncv = 5\nplot_learning_curve(svm, title, X_train[a], \n                    y_train, ylim=(0.7, 1.0), cv=cv, n_jobs=-1);","6cee14e6":"plt.figure(figsize=(10,5))\nplt.style.use('default')\nlr = LinearRegression()\nlr.fit(X_train[a],y_train)\npred = lr.predict(X_test[a])\nr2_score(y_test,pred)\nplt.scatter(y_test,pred)\nplt.show()","df17269e":"plt.figure(figsize=(10,5))\nsns.distplot(y_test-pred)\nplt.show()","3e154fe5":"plt.figure(figsize=(13,5))\nc = [i for i in range(1,61,1)]\nfig = plt.figure() \nplt.plot(c,y_test, color=\"blue\", linewidth=2.5, linestyle=\"-\") \nplt.plot(c,pred, color=\"red\",  linewidth=2.5, linestyle=\"-\") \nfig.suptitle('Actual and Predicted', fontsize=20)               \nplt.xlabel('Index', fontsize=18)                               \nplt.ylabel('Price', fontsize=16)\nplt.show()","22f26b2a":"# Feature Selection","b5f1d32f":"# Model Building","6c0c0f24":"# Import Data","12ddbdab":"# Eda"}}