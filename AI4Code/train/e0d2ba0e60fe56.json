{"cell_type":{"7baecd59":"code","e1f4dcca":"code","6ccc52c0":"code","4df1d29a":"code","221be8b6":"code","c718ca77":"code","2126a860":"code","6449c243":"code","ee98774c":"code","49359565":"code","d047c2ea":"code","2d389c2b":"code","1bdc8de3":"code","30121c57":"code","822477d3":"markdown","cd75989e":"markdown","94aae166":"markdown","e137c12f":"markdown","1244e68f":"markdown"},"source":{"7baecd59":"# import packages\nimport os\nimport joblib\nimport numpy as np\nimport pandas as pd\nimport warnings\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom skimage.filters import threshold_otsu\nfrom matplotlib import ticker\nimport seaborn as sns\n\n# import datasets\ntrain_df = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv', index_col='id')\ntest_df = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv', index_col='id')\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv', index_col='id')","e1f4dcca":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","6ccc52c0":"train_df = reduce_mem_usage(train_df)\ntest_df = reduce_mem_usage(test_df)","4df1d29a":"print(f'Number of rows: {train_df.shape[0]};  Number of columns: {train_df.shape[1]}; No of missing values: {sum(train_df.isna().sum())}')","221be8b6":"def plot_kde(features):\n    background_color = \"#f6f5f5\"\n\n    plt.rcParams['figure.dpi'] = 600\n    fig = plt.figure(figsize=(10, 10), facecolor='#f6f5f5')\n    gs = fig.add_gridspec(5, 5)\n    gs.update(wspace=0.3, hspace=0.3)\n\n    run_no = 0\n    for row in range(0, 5):\n        for col in range(0, 5):\n            locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n            locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n            for s in [\"top\",\"right\"]:\n                locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n            run_no += 1  \n\n    run_no = 0\n    for col in features:\n        sns.kdeplot(ax=locals()[\"ax\"+str(run_no)], x=train_df[col], zorder=2, alpha=1, linewidth=1, color='#ffd514')\n        locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n        locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n        locals()[\"ax\"+str(run_no)].set_ylabel('')\n        locals()[\"ax\"+str(run_no)].set_xlabel(col, fontsize=4, fontweight='bold')\n        locals()[\"ax\"+str(run_no)].tick_params(labelsize=4, width=0.5)\n        locals()[\"ax\"+str(run_no)].xaxis.offsetText.set_fontsize(4)\n        locals()[\"ax\"+str(run_no)].yaxis.offsetText.set_fontsize(4)\n        run_no += 1\n\n    run_no = 0\n    for col in features:\n        sns.kdeplot(ax=locals()[\"ax\"+str(run_no)], x=test_df[col], zorder=2, alpha=1, linewidth=1, color='#ff355d')\n        locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n        locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n        locals()[\"ax\"+str(run_no)].set_ylabel('')\n        locals()[\"ax\"+str(run_no)].set_xlabel(col, fontsize=4, fontweight='bold')\n        locals()[\"ax\"+str(run_no)].tick_params(labelsize=4, width=0.5)\n        locals()[\"ax\"+str(run_no)].xaxis.offsetText.set_fontsize(4)\n        locals()[\"ax\"+str(run_no)].yaxis.offsetText.set_fontsize(4)\n        run_no += 1\n\n    plt.show()","c718ca77":"plot_kde(list(train_df.columns[0:25]))\nplot_kde(list(train_df.columns[25:50]))\nplot_kde(list(train_df.columns[50:75]))\nplot_kde(list(train_df.columns[75:100]))","2126a860":"target_df = pd.DataFrame(train_df['target'].value_counts()).reset_index()\ntarget_df.columns = ['target', 'count']\n\ntarget_percent_df = pd.DataFrame(train_df['target'].value_counts()\/train_df.shape[0]).reset_index()\ntarget_percent_df.columns = ['target', 'count']\n\nplt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(5, 1), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 2)\ngs.update(wspace=0.3, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nax0 = fig.add_subplot(gs[0, 0])\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\nax0.set_facecolor(background_color)\nax0_sns = sns.barplot(ax=ax0, y=target_df['target'], x=target_df['count'], \n                      zorder=2, linewidth=0, orient='h', saturation=1, alpha=1)\nax0_sns.set_xlabel(\"count\",fontsize=3, weight='bold')\nax0_sns.set_ylabel(\"\",fontsize=3, weight='bold')\nax0_sns.tick_params(labelsize=3, width=0.5, length=1.5)\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0.text(0, -0.8, 'Claim', fontsize=4, ha='left', va='top', weight='bold')\nax0.text(0, -0.65, 'Both of 0 and 1 has almost the same numbers', fontsize=2.5, ha='left', va='top')\nax0.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n# data label\nfor p in ax0.patches:\n    value = f'{p.get_width():,.0f}'\n    x = p.get_x() + p.get_width() + 10000\n    y = p.get_y() + p.get_height() \/ 2 \n    ax0.text(x, y, value, ha='left', va='center', fontsize=2, \n            bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.2))\n    \nax1 = fig.add_subplot(gs[0, 1])\nfor s in [\"right\", \"top\"]:\n    ax1.spines[s].set_visible(False)\nax1.set_facecolor(background_color)\nax1_sns = sns.barplot(ax=ax1, y=target_percent_df['target'], x=target_percent_df['count'], \n                      zorder=2, linewidth=0, orient='h', saturation=1, alpha=1)\nax1_sns.set_xlabel(\"percentage\",fontsize=3, weight='bold')\nax1_sns.set_ylabel(\"\",fontsize=3, weight='bold')\nax1_sns.tick_params(labelsize=3, width=0.5, length=1.5)\nax1_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1.text(0, -0.8, 'Claim in %', fontsize=4, ha='left', va='top', weight='bold')\nax1.text(0, -0.65, 'Both of 0 and 1 distributrion are alomost the same of 50%', fontsize=2.5, ha='left', va='top')\n# data label\nfor p in ax1.patches:\n    value = f'{p.get_width():.2f}'\n    x = p.get_x() + p.get_width() + 0.01\n    y = p.get_y() + p.get_height() \/ 2 \n    ax1.text(x, y, value, ha='left', va='center', fontsize=2, \n            bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.2))","6449c243":"def plot_target_series(df):\n    plt.figure(figsize=(20,20))\n    sns.histplot(pd.concat([df[y==0].rename('0'), df[y==1].rename('1')], axis=1), bins=100, alpha=0.5)\n    plt.show()","ee98774c":"'''\n!pip install pandarallel -q\nfrom pandarallel import pandarallel\npandarallel.initialize(progress_bar=True)\n'''","49359565":"X = train_df.drop([\"target\"], axis=1)\ny = train_df[\"target\"]","d047c2ea":"features = pd.DataFrame(y)\nfeatures['std'] = X.std(1)","2d389c2b":"pointy = [0,2,4,9,12,16,19,20,21,23,24,27,28,30,31,32,33,35,39,42,44,46,48,49,51,52,53,56,58,59,60,61,62,63,64,68,69,72,73,75,76,78,79,81,83,84,87,88,89,90,92,93,94,95,98,99]\nbimodal = [x for x in range(0,100) if x not in pointy]\n\npointy = list(map(lambda x: 'f'+str(x), pointy))\nbimodal = list(map(lambda x: 'f'+str(x), bimodal))","1bdc8de3":"plot_target_series(X['f1'])","30121c57":"threshold_otsu(X['f81'])","822477d3":"## Feature Exploration (WIP)\n\nExperiments implemented in the following notebook\nwww.kaggle.com\/realtimshady\/baseline-lgbm","cd75989e":"Credit to\n\n1. For the EDA functions: https:\/\/www.kaggle.com\/dwin183287\/tps-september-2021-eda","94aae166":"I pretty much looked at whether the distribution was a unimodal point, or a bimodal distribution","e137c12f":"For example, a plot of target distribution with feature 'f1'","1244e68f":"# EDA + feature exploration"}}