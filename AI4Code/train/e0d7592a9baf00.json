{"cell_type":{"5315e6fa":"code","72843c43":"code","8aa4b311":"code","e7495af3":"code","6ceec64b":"code","23bf7960":"code","26ebc22b":"code","2873c18a":"code","d2ee5ea9":"code","697707b8":"code","d707e565":"code","a13196b0":"code","6881297d":"code","03e57a60":"code","5b54aacc":"code","0d4ba64a":"code","e4419d79":"code","ba3cd014":"code","3ff4b07e":"markdown","b9d1627b":"markdown","41655fe5":"markdown","b2b4a2f5":"markdown","a3d48089":"markdown","73043113":"markdown"},"source":{"5315e6fa":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport tensorflow as tf\nimport keras\nimport keras.layers as L\nimport math\nimport cv2\nfrom keras.utils import Sequence\nfrom keras.preprocessing import image\nfrom random import shuffle\nfrom sklearn.model_selection import train_test_split","72843c43":"train_labels = pd.read_csv('..\/input\/landmark-recognition-2021\/train.csv')\nsample_submission = pd.read_csv('..\/input\/landmark-recognition-2021\/sample_submission.csv')\ncounts = train_labels.landmark_id.value_counts()\ncounts = counts[counts >=50].index #indexing only classes which have atleast 50 samples\ntrain_labels = train_labels.loc[train_labels.landmark_id.isin(counts)]\nnum_classes = counts.shape[0] \nprint(num_classes)","8aa4b311":"def id2path(idx,is_train=True):\n    path = '..\/input\/landmark-recognition-2021'\n    if is_train:\n        path += '\/train\/'+idx[0]+'\/'+idx[1]+'\/'+idx[2]+'\/'+idx+'.jpg'\n    else:\n        path += '\/test\/'+idx[0]+'\/'+idx[1]+'\/'+idx[2]+'\/'+idx+'.jpg'\n    return path\ntrain_labels['file_path'] = train_labels['id'].apply(id2path)\nsample_submission['file_path'] = sample_submission['id'].apply(id2path,False)","e7495af3":"def read_image(idx):\n    image = cv2.imread(idx)\n    image = image\/255.\n    image = cv2.resize(image,(256,256))\n    return image","6ceec64b":"def plot_images(landmark_id=27): #plot images by image_id\n    landmark = train_labels[train_labels['landmark_id']==landmark_id].head(25)\n    imgs = [read_image(x) for x in landmark['file_path']]\n    _, axs = plt.subplots(5,5, figsize=(12, 12))\n    axs = axs.flatten()\n    for i, (img, ax) in enumerate(zip(imgs, axs)):\n        ax.title.set_text(str(landmark['id'].iloc[i]))\n        ax.imshow(img)\n        ax.axis('off')\n    plt.show()","23bf7960":"plot_images()","26ebc22b":"plot_images(136)","2873c18a":"plot_images(139)","d2ee5ea9":"plot_images(203071)","697707b8":"class Dataset(Sequence):\n    def __init__(self,idx,y=None,batch_size=32,shuffle=True):\n        self.idx = idx\n        self.batch_size = batch_size\n        self.shuffle = shuffle\n        if y is not None:\n            self.is_train=True\n        else:\n            self.is_train=False\n        self.y = y\n    def __len__(self):\n        return math.ceil(len(self.idx)\/self.batch_size)\n    def __getitem__(self,ids):\n        batch_ids = self.idx[ids * self.batch_size:(ids + 1) * self.batch_size]\n        if self.y is not None:\n            batch_y = self.y[ids * self.batch_size: (ids + 1) * self.batch_size]\n            \n        list_x = np.array([read_image(x) for x in batch_ids])\n        batch_X = np.stack(list_x)\n        if self.is_train:\n            return batch_X, batch_y\n        else:\n            return batch_X\n    \n    def on_epoch_end(self):\n        if self.shuffle and self.is_train:\n            ids_y = list(zip(self.idx, self.y))\n            shuffle(ids_y)\n            self.idx, self.y = list(zip(*ids_y))","d707e565":"train_idx =  train_labels['file_path'].values\ny = train_labels['landmark_id'].values\ntest_idx = sample_submission['file_path'].values","a13196b0":"x_train,x_valid,y_train,y_valid = train_test_split(train_idx,y,test_size=0.05,random_state=42)","6881297d":"train_dataset = Dataset(x_train,y_train)\nvalid_dataset = Dataset(x_valid,y_valid)\ntest_dataset = Dataset(test_idx)","03e57a60":"!pip install ..\/input\/keras-efficientnet-whl\/Keras_Applications-1.0.8-py3-none-any.whl\n!pip install ..\/input\/keras-efficientnet-whl\/efficientnet-1.1.1-py3-none-any.whl","5b54aacc":"import efficientnet.keras as efn","0d4ba64a":"model = tf.keras.Sequential([efn.EfficientNetB0(include_top=False,input_shape=(256,256,3),weights='..\/input\/efficientnet-keras-weights-b0b5\/efficientnet-b0_imagenet_1000_notop.h5'),\n        L.GlobalAveragePooling2D(),\n        L.Dense(32,activation='relu'),\n        L.Dense(num_classes, activation='sigmoid')])\nmodel.summary()\nmodel.compile(optimizer=keras.optimizers.Adam(learning_rate=0.001),\n              loss=keras.losses.SparseCategoricalCrossentropy(), metrics=[keras.metrics.SparseCategoricalAccuracy()])","e4419d79":"#model.fit(train_dataset,epochs=1,validation_data=valid_dataset)","ba3cd014":"#preds = model.predict(test_dataset)\n#preds = preds.reshape(-1)\nsample_submission = pd.read_csv('..\/input\/landmark-recognition-2021\/sample_submission.csv')\nsample_submission.to_csv('submission.csv',index=False)","3ff4b07e":"# About the Competition\ud83d\udea9\n<p style=\"font-size:15px\">Welcome to the fourth Landmark Recognition competition! This year, we introduce a lot more diversity in the challenge\u2019s test images in order to measure global landmark recognition performance in a fairer manner. And following last year\u2019s success, we set this up as a code competition.\n<br><\/p>\n<p>\nHave you ever gone through your vacation photos and asked yourself: What is the name of this temple I visited in China? Who created this monument I saw in France? Landmark recognition can help! This technology can predict landmark labels directly from image pixels, to help people better understand and organize their photo collections. This competition challenges Kagglers to build models that recognize the correct landmark (if any) in a dataset of challenging test images.<br><\/p>\n<p>\nMany Kagglers are familiar with image classification challenges like the ImageNet Large Scale Visual Recognition Challenge (ILSVRC), which aims to recognize 1K general object categories. Landmark recognition is a little different from that: it contains a much larger number of classes (there are more than 81K classes in this challenge), and the number of training examples per class may not be very large. Landmark recognition is challenging in its own way\n<br>\n<\/p>","b9d1627b":"<img src=\"https:\/\/1.bp.blogspot.com\/-5pULKUERnIc\/Wpc7qPnUCuI\/AAAAAAAACao\/4YOtEQb_1gEweHRf8-drmi7KBEa1BmBTgCLcBGAs\/s1600\/image2.png\">","41655fe5":"<h2><center>Work in Progress ... \u23f3<\/center><\/h2>","b2b4a2f5":"# Evaluation\nSubmissions are evaluated using Global Average Precision (GAP) at (k), where (k=1). This metric is also known as micro Average Precision (\\mu AP), as per references 1 and 2 below. It works as follows:\n\nFor each test image, you will predict one landmark label and a corresponding confidence score. The evaluation treats each prediction as an individual data point in a long list of predictions, sorted in descending order by confidence scores, and computes the Average Precision based on this list.\n\nReferences:\n\n1) F. Perronnin, Y. Liu, and J.-M. Renders, \"A Family of Contextual Measures of Similarity between Distributions with Application to Image Retrieval,\" Proc. CVPR'09\n\n2) T. Weyand, A. Araujo, B. Cao and J. Sim, \"Google Landmarks Dataset v2 - A Large-Scale Benchmark for Instance-Level Recognition and Retrieval,\" Proc. CVPR'20","a3d48089":"# Data Description\n<div style=\"font-size:15px\">\n there are 2 folder train and test which contains images in jpg format and 2 csv files:-\n<ul>\n    <li><code>train:<\/code> contains train images in jpf format \n<\/li>\n    <li><code>test:<\/code>contains test images in jpf format<\/li>\n    <li><code>train.csv:<\/code> labels of train images<\/li>\n    <li><code>sample_submission.csv:<\/code> a sample submission file in the correct format\n<\/li>\n<\/ul>    \n<\/div>","73043113":"<h2><center>If you found this notebook useful please upvote<\/center><\/h2>"}}