{"cell_type":{"68912bb3":"code","d76db5ca":"code","254e84d3":"code","1de2812f":"code","d888f0a0":"code","8d829cba":"code","69777c2f":"code","6f98f329":"code","ae239a8f":"code","09ec11ea":"code","6aacfeba":"code","5c1190e5":"code","10933335":"code","b66e819e":"code","5e0f9418":"code","4e49e77a":"code","8c7d905a":"code","154c50fd":"code","f4f35353":"code","fde78e62":"code","7a9947d6":"code","b822cb97":"code","fcb3001f":"code","02aeb4ce":"code","3ae01421":"markdown","fbd186e1":"markdown","bf5b2297":"markdown"},"source":{"68912bb3":"# Reading the cleaned numeric car prices data\nimport pandas as pd\nimport numpy as np\n\n# To remove the scientific notation from numpy arrays\nnp.set_printoptions(suppress=True)\n\nCarPricesDataNumeric=pd.read_pickle('..\/input\/carprice-pickle\/CarPricesDataNumeric.pkl')\nCarPricesDataNumeric.head()","d76db5ca":"# After Standardization of data\n# Separate Target Variable and Predictor Variables\nTargetVariable=['Price']\nPredictors=['Age', 'KM', 'HP', 'MetColor', 'Automatic', 'CC', 'Doors',\n       'Weight', 'FuelType_CNG', 'FuelType_Diesel', 'FuelType_Petrol']\n\nX=CarPricesDataNumeric[Predictors].values\ny=CarPricesDataNumeric[TargetVariable].values\n\n\n### Sandardization of data ###\nfrom sklearn.preprocessing import StandardScaler\nPredictorScaler=StandardScaler()\nTargetVarScaler=StandardScaler()\n\n# Storing the fit object for later reference\nPredictorScalerFit=PredictorScaler.fit(X)\nTargetVarScalerFit=TargetVarScaler.fit(y)\n\n# Generating the standardized values of X and y\nX=PredictorScalerFit.transform(X)\ny=TargetVarScalerFit.transform(y)\n\n\n# Split the data into training and testing set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","254e84d3":"# Quick sanity check with the shapes of Training and testing datasets\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","1de2812f":"# Standardized predictors\nX[0:3]","d888f0a0":"# Inverse transform will take the data back to original form\nPredictorScalerFit.inverse_transform(X)[0:3]","8d829cba":"from keras.models import Sequential\nfrom keras.layers import Dense","69777c2f":"# create ANN model\nmodel = Sequential()\n\n# Defining the first layer of the model\nmodel.add(Dense(units=5, input_dim=11, kernel_initializer='normal', activation='relu'))\n\n# Defining the Second layer of the model\n# after the first layer we don't have to specify input_dim as keras configure it automatically\nmodel.add(Dense(units=5, kernel_initializer='normal', activation='tanh'))\n\n\n# The output neuron is a single fully connected node \n# Since we will be predicting a single number\nmodel.add(Dense(1, kernel_initializer='normal'))\n\n# Compiling the model\nmodel.compile(loss='mean_squared_error', optimizer='adam')","6f98f329":"# Fitting the ANN to the Training set\n#1000\/20 --- forward\/backward\nmodel.fit(X_train, y_train ,batch_size = 20, epochs = 50, verbose=1)","ae239a8f":"def FunctionFindBestParams(X_train, y_train, X_test, y_test):\n    \n    # Defining the list of hyper parameters to try\n    batch_size_list=[5, 10, 15, 20]\n    epoch_list  =   [5, 10, 50, 100]\n    \n    import pandas as pd\n    SearchResultsData=pd.DataFrame(columns=['TrialNumber', 'Parameters', 'Accuracy'])\n    \n    # initializing the trials\n    TrialNumber=0\n    for batch_size_trial in batch_size_list:\n        for epochs_trial in epoch_list:\n            TrialNumber+=1\n            # create ANN model\n            model = Sequential()\n            # Defining the first layer of the model\n            model.add(Dense(units=10, input_dim=11, kernel_initializer='normal', activation='relu'))\n\n            # Defining the Second layer of the model\n            model.add(Dense(units=5, input_dim=20, kernel_initializer='normal', activation='relu'))\n\n            # The output neuron is a single fully connected node \n            # Since we will be predicting a single number\n            model.add(Dense(1, kernel_initializer='normal'))\n\n            # Compiling the model\n            model.compile(loss='mean_squared_error', optimizer='adam')\n\n            # Fitting the ANN to the Training set\n            model.fit(X_train, y_train ,batch_size = batch_size_trial, epochs = 10, verbose=0)\n\n            MAPE = np.mean(100 * (np.abs(y_test-model.predict(X_test))\/y_test))\n            \n            # printing the results of the current iteration\n            print(TrialNumber, 'Parameters:','batch_size:', batch_size_trial,'-', 'epochs:',epochs_trial, 'Accuracy:', 100-MAPE)\n            \n            SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n                                                                    columns=['TrialNumber', 'Parameters', 'Accuracy'] ))\n    return(SearchResultsData)","09ec11ea":"# Calling the function\nResultsData=FunctionFindBestParams(X_train, y_train, X_test, y_test)","6aacfeba":"%matplotlib inline\nResultsData.plot(x='Parameters', y='Accuracy', figsize=(15,4), kind='line')","5c1190e5":"# Fitting the ANN to the Training set\nmodel.fit(X_train, y_train ,batch_size = 10, epochs = 100, verbose=0)","10933335":"# Predictions on testing data\nPredictions=model.predict(X_test)\n\n# Scaling the predicted Price data back to original price scale\nPredictions=TargetVarScalerFit.inverse_transform(Predictions)\n\n# Scaling the y_test Price data back to original price scale\ny_test_orig=TargetVarScalerFit.inverse_transform(y_test)\n\n# Scaling the test data back to original scale\nTest_Data=PredictorScalerFit.inverse_transform(X_test)\n\nTestingData=pd.DataFrame(data=Test_Data, columns=Predictors)\nTestingData['Price']=y_test_orig\nTestingData['PredictedPrice']=Predictions\nTestingData.head()","b66e819e":"# Comparing a sample row from original data to confirm if the reverse transform has happend correctly\nCarPricesDataNumeric[CarPricesDataNumeric['KM']==89520]","5e0f9418":"APE=100* (abs(TestingData['Price']-TestingData['PredictedPrice'])\/TestingData['Price'])\nTestingData['APE']=APE\nprint('The Accuracy of ANN model is:', 100-np.mean(APE))\nTestingData.head(18)","4e49e77a":"# Printing top 10 errors made by model\nTestingData.sort_values(by='APE', ascending=False).head(10)","8c7d905a":"# Looking at the distribution is errors\n%matplotlib inline\nTestingData['APE'].hist(figsize=(10,4))","154c50fd":"TestingData.boxplot(column='APE', figsize=(15,4), vert=False)","f4f35353":"# Function to generate Deep ANN model \ndef make_regression_ann(Optimizer_trial):\n    from keras.models import Sequential\n    from keras.layers import Dense\n    \n    model = Sequential()\n    model.add(Dense(units=10, input_dim=11, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(units=5, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(1, kernel_initializer='normal'))\n    model.compile(loss='mean_squared_error', optimizer=Optimizer_trial)\n    return model","fde78e62":"from sklearn.model_selection import GridSearchCV\nfrom keras.wrappers.scikit_learn import KerasRegressor\n\n\nParameter_Trials={'batch_size':[10,20,30],\n                      'epochs':[10,20],\n                    'Optimizer_trial':['adam', 'rmsprop']\n                 }\n\n\nRegModel=KerasRegressor(make_regression_ann, verbose=0)","7a9947d6":"from sklearn.metrics import make_scorer\n\n# Defining a custom function to calculate accuracy\ndef Accuracy_Score(orig,pred):\n    MAPE = np.mean(100 * (np.abs(orig-pred)\/orig))\n    print('#'*70,'Accuracy:', 100-MAPE)\n    return(100-MAPE)\n\ncustom_Scoring=make_scorer(Accuracy_Score, greater_is_better=True)","b822cb97":"# Creating the Grid search space\n# See different scoring methods by using sklearn.metrics.SCORERS.keys()\ngrid_search=GridSearchCV(estimator=RegModel, param_grid=Parameter_Trials, scoring=custom_Scoring, cv=5)","fcb3001f":"# Measuring how much time it took to find the best params\nimport time\nStartTime=time.time()\n\n# Running Grid Search for different paramenters\ngrid_search.fit(X,y, verbose=1)\n\nEndTime=time.time()\nprint(\"########## Total Time Taken: \", round((EndTime-StartTime)\/60), 'Minutes')","02aeb4ce":"grid_search.best_params_","3ae01421":"# Sklearn GridSearchCV","fbd186e1":"# Finding best set of parameters using manual grid search","bf5b2297":"# Regression using Deep Learning- Artificial Neural Networks(ANN)"}}