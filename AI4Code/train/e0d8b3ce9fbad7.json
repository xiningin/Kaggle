{"cell_type":{"030577d3":"code","86cae3e7":"code","97247da0":"code","959f48c6":"code","137d4fb6":"code","2cacdd0d":"markdown","b641dcbb":"markdown","76a806d7":"markdown","386d31cb":"markdown","3fe79d16":"markdown","66544ab9":"markdown","959cfc40":"markdown"},"source":{"030577d3":"# Downloading the necesary libraries\n!pip install pywaffle\n!pip install proplot\n\n\n# Importing the necesary libraries\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nfrom pywaffle import Waffle\nimport proplot as pplt\n\nimport warnings\nwarnings.filterwarnings('ignore') \n\n# Importing the data\ngames = pd.read_csv('\/kaggle\/input\/magnus-carlsen-lichess-games-dataset\/csv\/csv\/carlsen_games.csv', encoding=\"latin1\")\neco = pd.read_csv('\/kaggle\/input\/magnus-carlsen-lichess-games-dataset\/csv\/csv\/eco_codes.csv', encoding=\"latin1\")\n\ngames = games.drop(columns=['game_id', 'site', 'round', 'game_order', 'white_rating_diff', 'black_rating_diff', 'winner_elo', 'loser_elo', 'winner_loser_elo_diff',\n                            'termination', 'time_control', 'variant', 'ply_count', 'date_created', 'file_name'])\n","86cae3e7":"# Results\ngames_count = games['group_name_result'].value_counts()   # Counting wins-losses-draws\ngames_count = games_count.to_frame().reset_index()        # Convert series to dataframe\ngames_count.columns = ['result', 'count']                 # Rename column names\n\n\n# Visualization\nfig = plt.figure(figsize=(14,8))\nfig.patch.set_facecolor('#FDD776')\n\nmpl.rcParams['font.size'] = 18\nmpl.rcParams['font.family'] = 'Ubuntu'\n\nplt.pie(games_count['count'], \n        explode=(0, 0, 0.2), \n        labels=['Win', 'Loss', 'Draw'], \n        colors= ['lightskyblue', 'lightcoral', 'palegreen'],\n        autopct='%1.1f%%', \n        shadow=True, \n        startangle=200)\n        \nplt.axis('equal')\nplt.title('Carlsen Results Distribution', fontsize=35, fontweight=\"bold\", color = 'brown')\nplt.show()\n\n","97247da0":"games_color = games.groupby(['group_name_color','group_name_result']).size().reset_index(name='counts')   # Counting\ngames_color = games_color.pivot(index=\"group_name_color\",columns = \"group_name_result\",values=\"counts\")   # Pivoting df\n\n# Visualizing\nfig = plt.figure(\n    FigureClass=Waffle,\n    plots={\n        '311': {\n            'values': games_color['won'] \/102,\n            'labels': [f\"{k} ({v})\" for k, v in games_color['won'].items()],\n            'icons': 'chess-knight',\n            'icon_size':25,\n            'legend': {'loc': 'upper left', 'bbox_to_anchor': (1.05, 1), 'fontsize': 14, 'facecolor': '#FDD776', 'edgecolor': '#FDD776'},\n            'title': {'label': 'Victories', 'loc': 'left'}\n        },\n        '312': {\n            'values': games_color['lost'] \/36,\n            'labels': [f\"{k} ({v})\" for k, v in games_color['lost'].items()],\n            'icons': 'chess-knight',\n            'icon_size':25,\n            'legend': {'loc': 'upper left', 'bbox_to_anchor': (1.05, 1), 'fontsize': 14, 'facecolor': '#FDD776', 'edgecolor': '#FDD776'},\n            'title': {'label': 'Losses', 'loc': 'left'}\n        },\n        '313': {\n            'values': games_color['draw'] \/12.1,\n            'labels': [f\"{k} ({v})\" for k, v in games_color['draw'].items()],\n            'icons': 'chess-knight',\n            'icon_size':25,\n            'legend': {'loc': 'upper left', 'bbox_to_anchor': (1.05, 1), 'fontsize': 14, 'facecolor': '#FDD776', 'edgecolor': '#FDD776'},\n            'title': {'label': 'Draws', 'loc': 'left'}\n        },\n    },\n    rows=5,  \n    colors=[\"black\", \"whitesmoke\"], \n    figsize=(16,10)\n)\nfig.patch.set_facecolor('#FDD776')\nmpl.rcParams['font.family'] = 'Ubuntu'\nplt.title('Magnus Carlsen Game Breakdown', fontsize=40, y=3.7, fontweight=\"bold\", color = 'brown')\nplt.subplots_adjust(left=0.23, right=0.9, top=0.8, bottom=0.1)\nplt.show()\n","959f48c6":"biggest_rival = games['winner'].value_counts()                                                      # Relative frequency\nbiggest_rival = biggest_rival.drop(['DrNykterstein', 'draw', 'DrDrunkenstein', \n                                    'manwithavan', 'DrGrekenstein', 'DannyTheDonkey',\n                                    'damnsaltythatsport'])      # Remove Carlsen's accounts\nbiggest_rival = biggest_rival.to_frame().reset_index()                                              # Convert series to dataframe\nbiggest_rival.columns = ['name', 'wins']                                                            # Rename column names\nbiggest_rival = biggest_rival.head(10)                                                              # Selecting the first 10 values\nbiggest_rival = biggest_rival.sort_values('wins', ascending = True)                                 # Sorting data\n\n\nfig, ax = plt.subplots(figsize =(17, 13))\nax.barh(biggest_rival.name, biggest_rival.wins, color = 'darkseagreen', edgecolor= 'darkgreen')\n\n# Remove ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Remove axes splines\nfor i in ['top', 'bottom', 'left', 'right']:\n    ax.spines[i].set_visible(False)\n\n# Add annotation to bars\nfor i in ax.patches:\n    plt.text(i.get_width()+1, i.get_y()+0.3,\n             str(round((i.get_width()), 2)),\n             fontsize = 14, fontweight ='bold',\n             color ='dimgray')\n\nmpl.rcParams['font.family'] = 'Ubuntu'\nax.set_facecolor('#FDD776')\nfig.patch.set_facecolor('#FDD776')\nplt.title('Number of Wins Against Carlsen', fontsize=20, loc = 'left', color = 'brown')\nplt.suptitle(\"Carlsen's Greatest Rivals on Lichess\", fontsize=37, color = 'brown')\nplt.subplots_adjust(left=0.25, right=0.9, top=0.9, bottom=0.1)\nplt.show()\n\n","137d4fb6":"games_eco = games.groupby(['group_name_result','group_name_color','eco']).size().reset_index(name='counts')\ngames_eco = games_eco.merge(eco, on='eco', how = 'inner')\nwin_eco = games_eco.loc[games_eco['group_name_result'] == 'won']\nwin_eco['total'] = win_eco.groupby(['group_name_color', 'eco_name'])['counts'].transform('sum')\nwin_eco = win_eco.drop_duplicates(subset=['group_name_color', 'eco_name'])\nwin_eco_white = win_eco.loc[win_eco['group_name_color'] == 'white'].sort_values('total', ascending = False).head(10).sort_values('total', ascending = True)\nwin_eco_black = win_eco.loc[win_eco['group_name_color'] == 'black'].sort_values('total', ascending = False).head(10).sort_values('total', ascending = True)\n\nfig, axs = plt.subplots(2, figsize =(17, 14))\n\naxs[0].hlines(y = win_eco_white.eco_name, \n           xmin = 0,\n           xmax = win_eco_white.total, \n           color = 'white',\n           linewidth=3)\n\naxs[0].plot(win_eco_white.total, win_eco_white.eco_name, 'o', markersize=12, color = 'whitesmoke')\n\naxs[1].hlines(y = win_eco_black.eco_name, \n               xmin = 0,\n               xmax = win_eco_black.total, \n               color = 'dimgray',\n               linewidth=3)\n\naxs[1].plot(win_eco_black.total, win_eco_black.eco_name, 'o', markersize=12, color = 'black')\n\n# Remove ticks\naxs[0].xaxis.set_ticks_position('none')\naxs[0].yaxis.set_ticks_position('none')\naxs[1].xaxis.set_ticks_position('none')\naxs[1].yaxis.set_ticks_position('none')\n\n# Remove axes splines\nfor i in ['top', 'bottom', 'left', 'right']:\n    axs[0].spines[i].set_visible(False)\nfor i in ['top', 'bottom', 'left', 'right']:\n    axs[1].spines[i].set_visible(False)\n\n# Setting the values for all axes.\nplt.setp(axs, xlim=(0,450))\n\naxs[0].set_title('As White', fontsize=30, color = 'dimgray', loc = 'left');\naxs[1].set_title('As Black', fontsize=30, loc = 'left');\n\naxs[0].tick_params(axis='x', colors='dimgray')\naxs[0].tick_params(axis='y', colors='dimgray')\n\nplt.subplots_adjust(left=0.25, right=0.9, top=0.9, bottom=0.1)\n\nfig.patch.set_facecolor('#FDD776')\naxs[0].set_facecolor('#FDD776')\naxs[1].set_facecolor('#FDD776')\n\naxs[1].set_xlabel('\\n\\n Note: The openings are measured by the number of wins.', color = 'darkred');\nplt.suptitle('Top Openings by Victories', fontsize=40, color = 'brown');","2cacdd0d":"# How to win at chess: Learning from Magnus Carlsen","b641dcbb":"* Magnus Carlsen **wins** more when he plays as white (*53%*).\n* Magnus Carlsen **loses** more when he plays as black (*57%*).\n* Magnus Carlsen **draws** more when he plays as black (*58%*).","76a806d7":"* *penguingim1* is **GM Andrew Tang**\n* *RebeccaHarris* is **GM Daniel Naroditsky**\n* *alireza2003* is **GM Alireza Firouzja**\n* *Zhigalko_Sergei* is **GM Zhigalko Sergei**\n* *chessbrahs* is **GM Eric Hansen**\n* *nihalsarin2004* is **GM Nihal Sarin**\n* *C9C9C9C9C9* is **unknown**\n* *grizzlybear79* is **GM Parham Maghsoodloo**\n* *Night-King96* is **GM Oleksandr Bortnyk**\n* *mutdpro* is **IM Minh Le Tuan**","386d31cb":"These are the openings that Magnus Carlsen wins with the most. **With this knowledge, and a little bit of studying, you too can become the number one chess player in the world.**","3fe79d16":"![Chess move](https:\/\/assets.dicebreaker.com\/chess-playing-hand.jpeg\/BROK\/resize\/1200x1200%3E\/format\/jpg\/quality\/70\/chess-playing-hand.jpeg)","66544ab9":"![Carlsen](https:\/\/www.economist.com\/sites\/default\/files\/20181201_BLP505.jpg)","959cfc40":"<font size=\"14\">If you liked this notebook, please leave a comment and a like. Thank you all!<\/font>"}}