{"cell_type":{"01500d25":"code","6786ed11":"code","e509be0c":"code","15906bec":"code","52b6db84":"code","42c62b47":"code","2acf638f":"code","06b94f86":"code","9f3e3ef0":"code","b08719c1":"code","3b37ebe2":"code","3b789be7":"code","12fa18a2":"code","7aff039c":"code","370311a9":"code","82127e25":"code","16e64018":"code","85fb9914":"code","0d1d6474":"markdown","4ea0cde0":"markdown","1141457b":"markdown","9b3bab61":"markdown","b23b77aa":"markdown","359f6b01":"markdown"},"source":{"01500d25":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Any results you write to the current directory are saved as output.","6786ed11":"df=pd.read_csv('..\/input\/BreadBasket_DMS.csv')\n#After loading of data ,we are taking a look to check dataset briefly.\ndf.info()","e509be0c":"#To be able to examine sales frequency, we'd better seperate of Date and Time columns and add new columns as months,days and hours.\ndf['Months']=[ int(each.split('-')[1]) for each in df.Date]\ndf['Days']=[ int(each.split('-')[2]) for each in df.Date]\ndf['Hours']=[ int(each.split(':')[0]) for each in df.Time]\n#In hours section, there is only one feature (2017-01-01\t01:21:05\t4090\tBread\t2017) which is less important if we consider all features .\n#Thats why we are removing this feature.\ndf=df[df.Hours!=1]\n#We made a column for Monts too but in this kernel we are not gonna use .","15906bec":"df.head()\n#Now our data is ready to analyze.","52b6db84":"all_items=list(df.Item.unique())\n\nprint('Total Number of Item: ',len(all_items))\n#lets check 15 Items  which are most sold\nfrom collections import Counter\nall_sales=Counter(df.Item)\nmost_common_sales=all_sales.most_common(15)\nx,y=zip(*most_common_sales)\nx,y=list(x),list(y)\nnames=pd.DataFrame(x)\nnumber_of_sales=pd.DataFrame(y)\nnumber_of_sales=pd.DataFrame(y)\nmost_selling_items=pd.concat([names.iloc[:,0],number_of_sales.iloc[:,0]],axis=1)\nmost_selling_items.columns='Items','Number_of_Sales'\n\nmost_selling_items.head(15)","42c62b47":"import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, plot,iplot # plotly offline mode\ninit_notebook_mode(connected=True) \nimport plotly.graph_objs as go # plotly graphical object\ninit_notebook_mode(connected=True)\n\nlabels1=most_selling_items.Items\nfig={'data':[{'values':most_selling_items.iloc[:,1],'labels':labels1,'name':\n    'Items','hoverinfo':'label+percent+name','hole':.4,'type':'pie'}]\n    ,'layout':{\n    'title':'Most Selling 15 Items','annotations':[{'font':{'size':20},'showarrow':False,'text':'Most Selling ','x':.5,'y':.5}]}}  \niplot(fig)\n\n","2acf638f":"\nlabels = x\nvalues = y\n\ntrace = go.Pie(labels=labels, values=values,\n               hoverinfo='label+percent', textinfo='value', \n               textfont=dict(size=20),\n               marker=dict(line=dict(color='#000000', width=2)))\n\niplot([trace], filename='styled_pie_chart')\n#As it can be seen below with pie chart,most selling Item is Coffee within 5471 number of sales .\n#Second one is Bread within 3324 number of sales","06b94f86":"#Now we are going to examine sales frequency according to hours\n\nhours_list=sorted(list(df.Hours.unique()))\n\nitem_list_by_hours=[]\nfor i in hours_list:\n    s=df[df.Hours==i]\n    item_list_by_hours.append(Counter(s.Item))\n    \ndf_hours=pd.DataFrame(item_list_by_hours).set_index([hours_list])\nsales_list=[]\nsales_list_sum=[]\nsales_list_sum_avarage=[]\nfor i in hours_list:\n     sales_list.append(df_hours.loc[i,:].sum())\n     counters=df[df.Hours==i]\n     sales_list_sum.append(counters.Item.value_counts())\n     sales_list_sum_avarage.append(((counters.Item.value_counts())\/len(counters.Hours)*100))\nsales_list=(pd.DataFrame(sales_list)).set_index([hours_list])#Sales_list is all number of sales\nsales_list['Hours']=sales_list.index\nsales_list.columns='Number_of_Sales','Hours'\nsales_list_sum=(pd.DataFrame(sales_list_sum)).set_index([hours_list]) #Sales_list_sum is all Items within number of sales \nsales_list_sum_avarage=(pd.DataFrame(sales_list_sum_avarage)).set_index([hours_list])  \n#Sales_list_sum_avarage is percentage of specif time and specific Item.\n# For e.g   ((number of all sales  at 7 am )\/(number of coffe sales at 7 am))*100= 52 \n\n","9f3e3ef0":"import matplotlib.pyplot as plt\nimport seaborn as sns \nf, ax = plt.subplots(figsize=(15, 6))\nsns.set(style=\"whitegrid\")\nsns.barplot(x='Hours', y='Number_of_Sales', data=sales_list,  label='Sales Frequency',color='r')\nsns.set_context(\"paper\")\nax.legend(ncol=2, loc=\"upper right\", frameon=True)\n","b08719c1":"#Lets take a look to scatter plot to be able to see what we need as regression model \ntrace = go.Scatter(\n                    x = sales_list.Hours,\n                    y = sales_list.Number_of_Sales,\n                    mode = \"markers\",\n                    name = \"citations\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'))\n#\ndata = [trace]\nlayout = dict(title = 'Sales Frequency of Hours',\n              xaxis= dict(title= 'Hours',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\n","3b37ebe2":"\n#According to above plot , we are going to set Polynomial Linear Regression Model to our Data\n#For regression models , we are using Sklearn library\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n\nx=sales_list.Hours.values.reshape(-1,1)\ny=sales_list.Number_of_Sales.values.reshape(-1,1)\npr=PolynomialFeatures(degree=7) #Setting of degree to polynomial \nx_pr=pr.fit_transform(x) #Fitting and transforming \n\nlinear_r=LinearRegression()\n\nlinear_r.fit(x_pr,y)\n\ny_head=linear_r.predict(x_pr)\ny_head=pd.DataFrame(y_head)\n# x_pr values are being predicted \n#Now lets see how much it is proper on our data\n\n","3b789be7":"trace1 = go.Scatter(\n                    x = sales_list.Hours,\n                    y = sales_list.Number_of_Sales,\n                    mode = \"markers\",\n                    name = \"Actual Values\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'))\n#Trace1 is our data values of sales\ntrace2=go.Scatter(\n                    x = sales_list.Hours,\n                    y = y_head.iloc[:,0],\n                    mode = \"lines+markers\",\n                    name = \"Polynomial Regression\",\n                    marker = dict(color = 'rgba(66, 32, 111, 0.6)'))\n#Trace2 is prediction values \ndata = [trace1,trace2]\nlayout = dict(title = 'Polynomial Regression',\n              xaxis= dict(title= 'Hours',ticklen= 10,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","12fa18a2":"day_list=sorted(df.Days.unique())\n\nitem_list_by_days=[]\nfor each in day_list:\n    m=df[df.Days==each]\n    item_list_by_days.append(Counter(m.Item))\ndf_days=(pd.DataFrame(item_list_by_days)).set_index([day_list])\n\nsales_list1=[]\nsales_list_sum1=[]\nfor i in day_list:\n    sales_list1.append(df_days.loc[i,:].sum())\n    counters1=df[df.Days==i]\n    sales_list_sum1.append(counters1.Item.value_counts())\nsales_list1=(pd.DataFrame(sales_list1)).set_index([day_list])\nsales_list1['Number_of_sales']=sales_list1.iloc[:,0]\nsales_list1['Days']=sales_list1.index\nsales_list1.drop([0],axis=1,inplace=True)\nsales_list_sum1=pd.DataFrame(sales_list_sum1).set_index([day_list])\nsales_list1.head()","7aff039c":"sales_list_sum1.head()\n","370311a9":"f, ax = plt.subplots(figsize=(15, 6))\nsns.set(style=\"darkgrid\")\nax = sns.kdeplot(sales_list1.Days,sales_list1.Number_of_sales,\n                 cmap=\"Reds\", shade=True, shade_lowest=False,cut=3)\nred = sns.color_palette(\"Reds\")[-2]\nax.text(25,1100, \"Sales Frequency\", size=20, color=red)\n#In this plot , we can see that most selling days are happening between 0-10 days in Months.","82127e25":"#Lets take a look to our  3 Items  to see max,min ,median etc parameters with BoxPlot\ntrace0 = go.Box(\n    y=sales_list_sum1.iloc[:,0],\n    name = 'Coffe Sales',\n    boxpoints = 'suspectedoutliers',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=sales_list_sum1.iloc[:,1],\n    name = 'Bread Sales',\n    jitter = 0.3,\n    pointpos = -1.8,\n    boxpoints = 'all',\n    marker = dict(\n        color = 'rgb(42, 22, 110)',\n    )\n)\ntrace2 = go.Box(\n    y=sales_list_sum1.iloc[:,2],\n    name = 'Tea Sales',\n    boxpoints = 'suspectedoutliers',\n    marker = dict(\n        color = 'rgb(76,112,143)',\n    )\n)\ntrace3 = go.Box(\n    y=sales_list_sum1.iloc[:,4],\n    name = 'Cake Sales',\n    jitter = 0.3,\n    pointpos = -1.8,\n    boxpoints = 'all',\n    marker = dict(\n        color = 'rgb(100, 100, 100)',\n    )\n)\nlayout = go.Layout(title='Most Selling 4 Item in Month ', \n                   yaxis=dict(title='Number Of Sales'))\ndata = [trace0,trace1,trace2,trace3]\nfig=go.Figure(data=data,layout=layout)\n\niplot(fig)","16e64018":"\nx_coffee=sales_list_sum1.index.values.reshape(-1,1)\ny=sales_list_sum1.iloc[:,0].values.reshape(-1,1)\nx_bread=sales_list_sum1.index.values.reshape(-1,1)\ny_1=sales_list_sum1.iloc[:,1].values.reshape(-1,1)\n\nplr=PolynomialFeatures(degree=6)\nx_coffee=plr.fit_transform(x_coffee)\nx_bread=plr.fit_transform(x_bread)\n\nlnr=LinearRegression()\nlnr_1=LinearRegression()\n\nlnr.fit(x_coffee,y)\nlnr_1.fit(x_bread,y_1)\n\ny_predicted_coffee=lnr.predict(x_coffee)\ny_predicted_bread=lnr_1.predict(x_bread)\ny_predicted_coffee=pd.DataFrame(y_predicted_coffee)\ny_predicted_bread=pd.DataFrame(y_predicted_bread)\n\n\n","85fb9914":"#Trace1 is values of coffee sales\ntrace1 = go.Scatter(\n                    x = sales_list_sum1.index,\n                    y = sales_list_sum1.Coffee,\n                    mode = \"markers\",\n                    name = \"Coffe Sales\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'))\n#Trace2 is values of bread sales\ntrace2=go.Scatter(\n                    x = sales_list_sum1.index,\n                    y = sales_list_sum1.Bread,\n                    mode = \"markers\",\n                    name = \"Bread Sales\",\n                    marker = dict(color = 'rgba(66, 32, 111, 0.6)'))\n#Trace3 is predicted values of coffee sales\ntrace3=go.Scatter(\n                    x = sales_list_sum1.index,\n                    y = y_predicted_coffee.iloc[:,0],\n                    mode = \"lines+markers\",\n                    name = \"Coffee Sales Predict\",\n                    marker = dict(color = 'rgba(44, 103, 177, 0.6)'))\n#Trace4 is predicted values of bread sales\ntrace4=go.Scatter(\n                    x = sales_list_sum1.index,\n                    y = y_predicted_bread.iloc[:,0],\n                    mode = \"lines+markers\",\n                    name = \"Bread Sales Predict\",\n                    marker = dict(color = 'rgba(103, 10, 73, 0.6)'))\n\ndata = [trace1,trace2,trace3,trace4]\nlayout = dict(title = 'PLR for Coffee and Bread Sales ',\n              xaxis= dict(title= 'Days',ticklen= 10,zeroline=True)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\n\n\n\n","0d1d6474":"**CONCLUSION**\n \n In this kernel  we have tried to analyze  for Market Sales. There can be alot of way to examine this dataset but mostly  we have tried to give examples of some plots. If you have any question or recommendation for this kernel please let me know. \n\n\n\n","4ea0cde0":"From  this plot, we can see that  our regression mode is good to fit .If you change of polynomial degree , you may find  better fittings as line .Now we are going to examine next column (Days) and try to fit  Polynomial Linear Regression too . ","1141457b":"**INTRODUCTION**\n\nIn this kernel , we are going to try to analyze  and illustrate  sales  frequency of  products .For  library ,  we will be using  Matplotlib,Seaborn, Plotly, Scikit-Learn .\nIf you want to see more example of Visualizations for Plotly and Seaborn , you can go to check https:\/\/www.kaggle.com\/kanncaa1\/plotly-tutorial-for-beginners\nhttps:\/\/www.kaggle.com\/kanncaa1\/seaborn-tutorial-for-beginners\n\nLets begin with loading dataset.","9b3bab61":"With this  plot , we can see that most selling hours between 10-14  . Next part we will try to fit a regression model according to our data.","b23b77aa":"Our prediction model seems close to actual values. But to get more closer predictions  polynomial degree can be changed and changes  can be observed . Aslo for bread sales prediction , maybe we could have tried Linear Regression too.","359f6b01":"As we can see above Boxplot, most selling item Coffees' max values are 226 , 260 and 281 and this  values is too many for daily sales values .Also minimum  value of Tea sales  is 25 . This value is so low as we consider daily sales .Now  lets  try to fit a Polynomial Linear Regression model  for Coffe and Bread Sales values."}}