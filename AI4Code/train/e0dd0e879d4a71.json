{"cell_type":{"371e31a7":"code","200f4d59":"code","7cec3fad":"code","cb217d65":"code","1ff26970":"code","5054d6f5":"code","0d3493bf":"markdown","653b3f85":"markdown","00a882da":"markdown","544c95fa":"markdown"},"source":{"371e31a7":"import traceback\nimport numpy as np\nimport pandas as pd\nimport gresearch_crypto\n# from lightgbm import LGBMRegressor\nimport xgboost as xgb\n\nTRAIN_CSV = '\/kaggle\/input\/g-research-crypto-forecasting\/train.csv'\nASSET_DETAILS_CSV = '\/kaggle\/input\/g-research-crypto-forecasting\/asset_details.csv'","200f4d59":"df_train = pd.read_csv(TRAIN_CSV)\ndf_train.head()","7cec3fad":"df_asset_details = pd.read_csv(ASSET_DETAILS_CSV).sort_values(\"Asset_ID\")\ndf_asset_details","cb217d65":"\n# Two new features from the competition tutorial\ndef upper_shadow(df):\n    return df['High'] - np.maximum(df['Close'], df['Open'])\n\ndef lower_shadow(df):\n    return np.minimum(df['Close'], df['Open']) - df['Low']\n\n# A utility function to build features from the original df\n# It works for rows to, so we can reutilize it.\ndef get_features(df):\n    df_feat = df[['Count', 'Open', 'High', 'Low', 'Close', 'Volume', 'VWAP']].copy()\n    df_feat['Upper_Shadow'] = upper_shadow(df_feat)\n    df_feat['Lower_Shadow'] = lower_shadow(df_feat)\n    return df_feat\n\ndef get_Xy_and_model_for_asset(df_train, asset_id):\n    df = df_train[df_train[\"Asset_ID\"] == asset_id]\n    \n    # TODO: Try different features here!\n    df_proc = get_features(df)\n    df_proc['y'] = df['Target']\n    df_proc = df_proc.dropna(how=\"any\")\n    \n    X = df_proc.drop(\"y\", axis=1)\n    y = df_proc[\"y\"]\n    \n    model = xgb.XGBRegressor(\n        n_estimators=900,\n        max_depth=12,\n        learning_rate=0.01,\n        subsample=0.9,\n        colsample_bytree=0.7,\n        missing=-999,\n        random_state=2020,\n        tree_method='gpu_hist'  # THE MAGICAL PARAMETER\n    )\n    model.fit(X, y)\n\n    return X, y, model","1ff26970":"Xs = {}\nys = {}\nmodels = {}\n\nfor asset_id, asset_name in zip(df_asset_details['Asset_ID'], df_asset_details['Asset_Name']):\n    print(f\"Training model for {asset_name:<16} (ID={asset_id:<2})\")\n    try:\n        X, y, model = get_Xy_and_model_for_asset(df_train, asset_id)    \n        Xs[asset_id], ys[asset_id], models[asset_id] = X, y, model\n    except: \n        traceback.print_exc()\n        Xs[asset_id], ys[asset_id], models[asset_id] = None, None, None","5054d6f5":"env = gresearch_crypto.make_env()\niter_test = env.iter_test()\n\nfor i, (df_test, df_pred) in enumerate(iter_test):\n    for j , row in df_test.iterrows():\n        \n        if models[row['Asset_ID']] is not None:\n            try:\n                model = models[row['Asset_ID']]\n                x_test = get_features(row)\n                y_pred = model.predict(pd.DataFrame([x_test]))[0]\n                df_pred.loc[df_pred['row_id'] == row['row_id'], 'Target'] = y_pred\n            except:\n                df_pred.loc[df_pred['row_id'] == row['row_id'], 'Target'] = 0\n                traceback.print_exc()\n        else: \n            df_pred.loc[df_pred['row_id'] == row['row_id'], 'Target'] = 0\n        \n    env.predict(df_pred)","0d3493bf":"# Load Data","653b3f85":"# Extract Features and Train Model","00a882da":"# Predict","544c95fa":"Copied From: https:\/\/www.kaggle.com\/yamqwe\/crypto-prediction-xgb-regressor\n\nChanged parameters"}}