{"cell_type":{"d3e003f6":"code","81e13206":"code","7aa7a74c":"code","5c3aadb6":"code","d547541b":"code","1fd0afd7":"code","8863bc99":"code","aecdfa6f":"code","80ea004c":"code","f4f7734b":"code","5134dd83":"code","faf0d8a1":"code","d8a6e9a1":"code","6e571c5e":"code","b9b46534":"code","8a90279a":"code","f264e809":"code","530863b2":"code","fca607eb":"code","e13447c3":"code","f4654f02":"code","f6cc19df":"code","53c55b44":"code","0f14399a":"markdown","46c4d005":"markdown","26507999":"markdown","57274de2":"markdown","6b5a4d3b":"markdown","a25ce6ef":"markdown","c025f76a":"markdown","4ff13bd4":"markdown","28c0b76c":"markdown"},"source":{"d3e003f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm;\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","81e13206":"#Importing DataSet \ndataset = pd.read_csv(\"..\/input\/kc-housesales-data\/kc_house_data.csv\")\n#Keggle note \uc6b0\uce21 \ub370\uc774\ud130 \"kc_house_data.csv\" click \ud6c4 path \ubcf5\uc0ac","7aa7a74c":"dataset.head()","5c3aadb6":"dataset.shape","d547541b":"dataset.columns","1fd0afd7":"dataset.dtypes","8863bc99":"dataset.describe()","aecdfa6f":"dataset.isnull().sum()","80ea004c":"dataset['bedrooms'].value_counts()","f4f7734b":"fig,axes=plt.subplots(nrows=1,ncols=1,figsize=(15,10))\nsns.countplot(dataset.bedrooms,order=dataset['bedrooms'].value_counts().index)","5134dd83":"fig,axes=plt.subplots(nrows=1,ncols=1,figsize=(15,10))\nsns.distplot(dataset['price'],hist=True,kde=True,rug=False,label='price',norm_hist=True)","faf0d8a1":"variables = dataset[['bedrooms', 'bathrooms', 'sqft_living',\n       'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade',\n       'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', \n       'lat', 'long', 'sqft_living15', 'sqft_lot15']]","d8a6e9a1":"colormap = plt.cm.PuBu \nplt.figure(figsize=(15, 10)) \nplt.title(\"Person Correlation of Features\", y = 1.05, size = 15) \nsns.heatmap(variables.astype(float).corr(), linecolor = \"white\", cmap = colormap, annot = True)\n            #, linewidths = 0.1, vmax = 1.0, square = True, cmap = colormap, \n         #   linecolor = \"white\", annot = True, annot_kws = {\"size\" : 16})\n","6e571c5e":"# bedroom\uc774 \uc885\uc18d\ubcc0\uc218\uc778 price\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce58\ub294 \uad00\uacc4\ub97c \uad6c\ud558\uae30 \uc704\ud55c \ud68c\uadc0\ubd84\uc11d \n\ndataset['intercept'] = 1\npm = sm.OLS(dataset['price'], dataset[['intercept','bedrooms']])\nresults_p = pm.fit()\nresults_p.summary()","b9b46534":"#'sqft_living'-'sqft_above', \ndataset['intercept'] = 1\nlm = sm.OLS(dataset['price'], dataset[['bedrooms', 'bathrooms', 'sqft_living',\n       'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade',\n       'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', \n       'lat', 'long', 'sqft_living15', 'sqft_lot15']])\nresults = lm.fit()\nresults.summary()","8a90279a":"#, 'bathrooms', 'sqft_living', 'sqft_above', 'sqft_living15'  \ubcc0\uc218 \uc81c\uac70\ndataset['intercept'] = 1\nlm_re = sm.OLS(dataset['price'], dataset[['bedrooms', \n       'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade',\n        'sqft_basement', 'yr_built', 'yr_renovated', \n       'lat', 'long','sqft_lot15']])\nresults_re = lm_re.fit()\nresults_re.summary()","f264e809":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","530863b2":"X = dataset[['bedrooms', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade',\n        'sqft_basement', 'yr_built', 'yr_renovated', 'lat', 'long','sqft_lot15']]\ny = dataset['price']","fca607eb":"# Train, Test set 80:20 \ubd84\ud560\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)","e13447c3":"# \ud68c\uadc0\ubaa8\ub378 \ud559\uc2b5\nmodel =  LinearRegression()\nmodel.fit(X_train, y_train)\nprint(model.coef_)\nprint(model.intercept_)","f4654f02":"# X_test set \uc5d0 \ub300\ud55c \uc608\uce21 \uacb0\uacfc\ny_pred = model.predict(X_test)\ny_pred","f6cc19df":"pd.options.display.float_format = '{:.5f}'.format\n\n#\uc2e4\uc81c y\uac12\uacfc \uc608\uce21 \uac12 \ube44\uad50\ny_compare={'y_test':y_test, 'y_predicted':y_pred}\npd.DataFrame(y_compare)","53c55b44":"from sklearn.metrics import mean_squared_error, mean_absolute_error\nprint(\"mean_squared_error: \", mean_squared_error(y_test, y_pred))\nprint(\"mean_root_squared_error: \", mean_squared_error(y_test, y_pred,squared=False))\nprint(\"mean_absolute_error: \", mean_absolute_error(y_test, y_pred))","0f14399a":"# EDA(Exploratory Data Analysis)","46c4d005":"y(price) = -13543932.428068105 + 2.43119521e+04X1 + 1.99257992e-01X2 + 5.95084840e+04X3 + .... + 1.59292252e-02X13","26507999":" - bedroom\uc774 \ub9ce\uc744 \uc218\ub85d price\uac00 \ube44\uc2f8\ub2e4\ub294 \uc591\uc758 \ud68c\uadc0\uacc4\uc218\uac00 \ub3c4\ucd9c \ub428(\ub2e4\ub978 \ubcc0\uc218\uc758 \uc601\ud5a5\uc744 \ubc1b\uc9c0 \uc54a\uc558\uc744 \ub54c)","57274de2":" - \ub3c5\ub9bd \ubcc0\uc218\uac04 \uc0c1\uad00 \uad00\uacc4\ub97c \ubcf4\uc774\ub294 \uac83\uc744 \ub2e4\uc911\uacf5\uc120\uc131(Multicollinearity)\uc774\ub77c \ud558\uba70, \ub2e4\uc911\uacf5\uc120\uc131\uc774 \uc788\uc73c\uba74 \ubd80\uc815\ud655\ud55c \ud68c\uadc0 \uacb0\uacfc\uac00 \ub3c4\ucd9c\ub428\n - X\ub294 Y\uc640 \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc544\uc57c \ud558\uace0 \ub3c5\ub9bd\ubcc0\uc218\ub07c\ub9ac \uc0c1\uad00\uad00\uacc4\uac00 \uc5c6\uc5b4\uc57c \ube44\uad50\uc801 \uc815\ud655\ud55c \uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\uc74c\n -- \uacc4\uc218 \ucd94\uc815\uc774 \uc798 \ub418\uc9c0 \uc54a\uac70\ub098 \ubd88\uc548\uc815\ud574\uc838\uc11c \ub370\uc774\ud130\uac00 \uc57d\uac04\ub9cc \ubc14\ub00c\uc5b4\ub3c4 \ucd94\uc815\uce58\uac00 \ud06c\uac8c \ub2ec\ub77c\uc9c8 \uc218 \uc788\uc74c\n -- \uacc4\uc218\uac00 \ud1b5\uacc4\uc801\uc73c\ub85c \uc720\uc758\ubbf8\ud558\uc9c0 \uc54a\uc740 \uac83\ucc98\ub7fc \ub098\uc62c \uc218 \uc788\uc74c","6b5a4d3b":"# \ub2e4\uc911 \uc120\ud615\ud68c\uadc0\ubaa8\ub378 \ud559\uc2b5 \ubc0f \uc608\uce21","a25ce6ef":"# \ub2e4\uc911\uacf5\uc120\uc131 \ubcc0\uc218 \uc81c\uac70","c025f76a":"Data & kaggle_note: https:\/\/www.kaggle.com\/harlfoxem\/housesalesprediction","4ff13bd4":" - \ubcc0\uc218\uac00 \ub9ce\uc544\uc9c8\uc218\ub85d \ub2e4\uc911\uacf5\uc120\uc131\uc758 \ubc1c\uc0dd\uc73c\ub85c \ud68c\uadc0\uacb0\uacfc\uac00 \uc798\ubabb \ub3c4\ucd9c \ub420 \uc218 \uc788\uc74c\n - bedrooms coef = -3.549e+04 : bedroom\uc774 \ub9ce\uc744 \uc218\ub85d price\uac00 \ub5a8\uc5b4\uc9c4\ub2e4\ub294 \uc774\uc0c1\ud55c \uacb0\uacfc\uac00 \ub3c4\ucd9c\ub428\n - \uc774\ucc98\ub7fc \ub2e4\uc911\uacf5\uc120\uc131\uc774 \uc788\ub2e4\uba74 \ud68c\uadc0 \uacb0\uacfc\ub97c \uc65c\uace1\ud558\uac8c \ub428, \ub530\ub77c\uc11c \uc11c\ub85c \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc740 \ubcc0\uc218\ub4e4 \uc911 \ud558\ub098\ub97c \uc81c\uac70\ud574\uc57c \ud568\n","28c0b76c":"# \ub370\uc774\ud130 \ud30c\uc545\ud558\uae30 "}}