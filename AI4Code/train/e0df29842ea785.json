{"cell_type":{"880213b4":"code","6dedb60b":"code","ddf7a1fd":"code","0fa9121d":"code","f3a417b3":"code","e2c65dac":"code","7e0b182d":"code","6062fee9":"code","718876e2":"code","c5c099cd":"code","ee24516c":"code","3ff629f2":"code","0e783b90":"code","c6431ee5":"code","eac7c164":"code","d91bd7c4":"code","79ce6476":"code","16ad081d":"code","eefde0c6":"code","3de0fb91":"code","e82b34a4":"code","ce1ca10f":"code","869b767b":"code","f4599550":"code","8fa52742":"code","237e8ea9":"code","96cff892":"code","08d4ac89":"code","5f06c113":"markdown","d3399dae":"markdown","a8d4751a":"markdown","85faf5ae":"markdown","fc8fdbfd":"markdown","f00488db":"markdown","5ac78400":"markdown","e04c0c98":"markdown","a7dbd9ac":"markdown","d58d02dc":"markdown","0349ba96":"markdown","66b1ee5a":"markdown","d53fc64c":"markdown","3cb1dc02":"markdown","724998fd":"markdown","5db2cabc":"markdown","845a2d64":"markdown","9e31632a":"markdown","dffe952c":"markdown","15e7cf5f":"markdown","e96821c3":"markdown","9519dcec":"markdown","7f6beba5":"markdown","aa1d21d2":"markdown","04c66fe5":"markdown","f7f15214":"markdown","31d6b6b7":"markdown"},"source":{"880213b4":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom tpot import TPOTClassifier","6dedb60b":"df = pd.read_csv('..\/input\/parkinsons-data-set\/parkinsons.data')\ndf.head()","ddf7a1fd":"df.shape # 195 rows and 24 features","0fa9121d":"df.info()","f3a417b3":"df.nunique()","e2c65dac":"df['MDVP:Jitter(Abs)'].value_counts()","7e0b182d":"df.columns[df.isna().any()] # No null values","6062fee9":"df.describe()","718876e2":"df.groupby('status').mean()","c5c099cd":"FEATURES = [col for col in df.columns if col not in ['name', 'status']]","ee24516c":"FEATURES","3ff629f2":"# barplot to all the continous features (target variable status on x-axis, continous features on y-axis)\n# 0 -> magenta, 1 -> orange \nncols = 7\nnrows = int(len(FEATURES) \/ ncols + (len(FEATURES) % ncols > 0))-1\n\nfig, axes = plt.subplots(nrows, ncols, figsize=(40, 15), facecolor='#EAEAF2')\n\nfor r in range(nrows):\n    for c in range(ncols):\n        col = FEATURES[r*ncols+c]\n        sns.barplot(y=df[col], x=df['status'], ax=axes[r, c], palette='spring', label='Train data')\n        axes[r, c].set_ylabel('')\n        axes[r, c].set_xlabel(col, fontsize=20, fontweight='bold')\n        axes[r, c].tick_params(labelsize=20, width=0.5)\n        axes[r, c].xaxis.offsetText.set_fontsize(4)\n        axes[r, c].yaxis.offsetText.set_fontsize(4)\nplt.show()","0e783b90":"# Distrbution for all the continous features\nncols = 7\nnrows = int(len(FEATURES) \/ ncols + (len(FEATURES) % ncols > 0))-1\n\nfig, axes = plt.subplots(nrows, ncols, figsize=(40, 15), facecolor='#EAEAF2')\n\nfor r in range(nrows):\n    for c in range(ncols):\n        col = FEATURES[r*ncols+c]\n        sns.kdeplot(x=df[col], ax=axes[r, c], color='#DE3163')\n        axes[r, c].set_ylabel('')\n        axes[r, c].set_xlabel(col, fontsize=20, fontweight='bold')\n        axes[r, c].tick_params(labelsize=20, width=0.5)\n        axes[r, c].xaxis.offsetText.set_fontsize(4)\n        axes[r, c].yaxis.offsetText.set_fontsize(4)\nplt.show()","c6431ee5":"# boxplot for all the features\nncols = 7\nnrows = int(len(FEATURES) \/ ncols + (len(FEATURES) % ncols > 0))-1\n\nfig, axes = plt.subplots(nrows, ncols, figsize=(40, 15), facecolor='#EAEAF2')\n\nfor r in range(nrows):\n    for c in range(ncols):\n        col = FEATURES[r*ncols+c]\n        sns.boxplot(x=df[col], ax=axes[r, c])\n        axes[r, c].set_ylabel('')\n        axes[r, c].set_xlabel(col, fontsize=20, fontweight='bold')\n        axes[r, c].tick_params(labelsize=20, width=0.5)\n        axes[r, c].xaxis.offsetText.set_fontsize(4)\n        axes[r, c].yaxis.offsetText.set_fontsize(4)\nplt.show()","eac7c164":"status_df = df.copy()","d91bd7c4":"status_df.status.unique()","79ce6476":"status_df.status = status_df.status.apply(lambda x: 'Sick' if x == 1 else 'Healthy')","16ad081d":"status_df.status.unique()","eefde0c6":"status_df.status.value_counts()","3de0fb91":"plt.figure(figsize=(15,11))\n\nplt.subplot(2,2,1)\nplt.title('Parkinsons Disease', {'fontsize':'15'})\nsns.countplot(x='status', data=status_df, palette='ocean');\n\nplt.subplot(2,2,2)\nyes = status_df.status[status_df.status == 'Sick'].count()\nno = status_df.status[status_df.status == 'Healthy'].count()\nplt.title(\"Distrbution of the Parkinsons disease in the data\", {'fontsize':'15'})\nplt.pie([yes, no], labels=['Sick', 'Healthy'], autopct=\"%.2f%%\", explode = [0.01,0.01], colors=['gray', 'yellow'])\nplt.legend()\nplt.show()","e82b34a4":"df[\"mean\"] = df[FEATURES].mean(axis=1)\ndf[\"std\"] = df[FEATURES].std(axis=1)\ndf[\"min\"] = df[FEATURES].min(axis=1)\ndf[\"max\"] = df[FEATURES].max(axis=1)\n\nFEATURES.extend(['mean', 'std', 'min', 'max'])","ce1ca10f":"scaler = StandardScaler()\nfor col in FEATURES:\n    df[col] = scaler.fit_transform(df[col].to_numpy().reshape(-1,1))\n    \nX = df[FEATURES].to_numpy()\ny = df['status'].to_numpy()","869b767b":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.25, random_state=10)","f4599550":"tpot_model = TPOTClassifier(generations=10, population_size=200, \n                           verbosity=2, cv=10, random_state=10)\ntpot_model.fit(X_train, y_train)","8fa52742":"tpot_model.score(X_test, y_test)","237e8ea9":"y_pred = tpot_model.predict(X_test)\nprint(classification_report(y_test, y_pred))","96cff892":"cm = confusion_matrix(y_test, y_pred)\ncm","08d4ac89":"plt.figure(figsize=(8,5))\nsns.heatmap(cm, annot=True);","5f06c113":"<a id='9'><\/a>\n# Report","d3399dae":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>","a8d4751a":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>","85faf5ae":"<a id = '2'><\/a>\n# Import Necssaries Libraries","fc8fdbfd":"<a id='6'><\/a>\n# Scalling and Assigning Feature and Target variables","f00488db":"**conclusion from the kdeplots:**<br><br>\n- all the features are skewed to the right except (HNR, RPDE, DFA, spread1, spread2, D2) are approximatly normal distrbution","5ac78400":"<a id='4'><\/a>\n# EDA","e04c0c98":"<a id ='7'><\/a>\n# Spliting the Data into Training and Testing Data","a7dbd9ac":"<a id='3'><\/a>\n# Data Exploaring and Preparation","d58d02dc":"<a id='8.1'><\/a>\n***tpot autoML modeling***","0349ba96":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>","66b1ee5a":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>","d53fc64c":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>","3cb1dc02":"<a id='5'><\/a>\n# Feature Engineering","724998fd":"<a id='4.2'><\/a>\n***Distrbution of the target variable***","5db2cabc":"<a id='3.1'><\/a>\n**Diminsions of the data**","845a2d64":"**All the features are continous**","9e31632a":"# Table of Contents\n<a id=\"toc\"><\/a>\n- [1. Data Description](#1)\n- [2. Import Necssaries Libraries](#2)\n- [3. Data Exploaring and Preparation](#3)\n    - [3.1 Diminsions of the data](#3.1)\n- [4. EDA](#4)\n    - [4.1 Visualizations](#4.1)\n    - [4.2 Distrbution of the target variable](#4.2)\n- [5. Feature Engineering](#5)\n- [6. Scalling and Assigning Feature and Target variables](#6)\n- [7. Spliting the Data into Training and Testing Data](#7)\n- [8. Modeling](#8)\n    - [8.1 tpot autoML](#8.1)\n    - [8.2 Accuracy of tpot model](#8.2)\n- [9. Report](#9)\n    - [9.1 Classification Report](#9.1)\n    - [9.2 Confusion Matrix](#9.2)","dffe952c":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>","15e7cf5f":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>","e96821c3":"<a id='8.2'><\/a>\n***Accuracy of tpot model***","9519dcec":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>","7f6beba5":"<a id='9.1'><\/a>\n***Classification Report***","aa1d21d2":"<a id='9.2'><\/a>\n***Confusion Matrix***","04c66fe5":"<a id='8'><\/a>\n# Modeling","f7f15214":"<a id='4.1'><\/a>\n***Visualization***","31d6b6b7":"**conclusion from the barplots:**<br><br>\n   * When these values of these features [MDVP:Fo(Hz), MDVP:Fhi(Hz), MDVP:Flo(Hz), HNR] increase, pepole in the data are more likely to be in good health \n   * the rest of the features when increase Most pepole in the data have Parkinson's disease"}}