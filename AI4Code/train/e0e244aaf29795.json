{"cell_type":{"c08c4e04":"code","06682585":"code","8a1633ab":"code","17878f76":"code","c45a78b7":"code","b284fb29":"code","08f77175":"code","7414708a":"code","a17a5566":"code","88cc0de8":"code","7a4c73c1":"code","c7a1bfbc":"code","d3b82921":"code","0a2b742b":"code","9b991717":"code","ba34f05f":"code","b0eab1c6":"code","2300b1be":"code","58478ab7":"code","d8f48cc2":"code","1f799ade":"markdown","fc51dcb4":"markdown","45dbe183":"markdown","519b92d6":"markdown","318fcc5e":"markdown","72cbdf19":"markdown","a5bd630c":"markdown","c1442777":"markdown","eed3a47b":"markdown"},"source":{"c08c4e04":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","06682585":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier","8a1633ab":"redwine = pd.read_csv('..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\n\n#always copy that\n\ndf = redwine.copy()","17878f76":"df.head()","c45a78b7":"df.describe().T","b284fb29":"df.isnull().sum()","08f77175":"df['quality'] = [1 if x>6.5 \n                 else 0 \n                 for x in df['quality']]\ny = df[\"quality\"]\nX = df.drop(\"quality\", axis=1)\nX = pd.DataFrame(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=40,\n                                                    stratify=y)","7414708a":"knn_model = KNeighborsClassifier().fit(X_train, y_train)\ny_pred = knn_model.predict(X_test)\naccuracy_score(y_test, y_pred)\n","a17a5566":"knn_cv = GridSearchCV(KNeighborsClassifier(), {\"n_neighbors\": np.arange(1,50)}, cv=10)\nknn_cv.fit(X_train, y_train)","88cc0de8":"print(\"Best score is:\" + str(knn_cv.best_score_),\"and Best params is: \" + str(knn_cv.best_params_))","7a4c73c1":"#OK. Let's use this for tuning.\n\nknn = KNeighborsClassifier(2)\nknn_tuned = knn.fit(X_train, y_train)","c7a1bfbc":"knn_tuned.score(X_test, y_test)","d3b82921":"df=redwine.copy()\ndf['quality'] = [1 if x>6.5 else 0 for x in df['quality']]\ny = df[\"quality\"]\nX = df.drop(\"quality\", axis=1)\nX = pd.DataFrame(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=40)","0a2b742b":"rf_model = RandomForestClassifier().fit(X_train, y_train)\ny_pred = rf_model.predict(X_test)\naccuracy_score(y_test, y_pred)","9b991717":"rf_params = {\"max_depth\": [2,5,8,10],\n            \"max_features\": [2,5,8],\n            \"n_estimators\": [10,500,1000],\n            \"min_samples_split\": [2,5,10]}","ba34f05f":"rf_model = RandomForestClassifier()\nrf_cv_model = GridSearchCV(rf_model, \n                           rf_params, \n                           cv = 10, \n                           n_jobs = -1, \n                           verbose = 2)\nrf_cv_model.fit(X_train, y_train)","b0eab1c6":"rf_cv_model.best_params_","2300b1be":"#OK. Let's use this for tuning.\nrf_tuned = RandomForestClassifier(max_depth = 10, \n                                  max_features = 2, \n                                  min_samples_split = 2, \n                                  n_estimators = 1000)","58478ab7":"rf_tuned.fit(X_train, y_train)\ny_pred = rf_tuned.predict(X_test)\naccuracy_score(y_test, y_pred)","d8f48cc2":"Importance = pd.DataFrame({\"Importance\": rf_tuned.feature_importances_*100},\n                         index = X_train.columns)\nImportance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = True).plot(kind =\"barh\", color = \"g\")\n\nplt.xlabel(\"Variable Importance\")","1f799ade":"### Split data into training and test sets\n\nI chose the quality classification as 1 and 0. As u guess 1 is good quality and 0 is bad. Stratify your sample will ensure your training set looks similar to your test set, making your evaluation metrics more reliable.","fc51dcb4":"### Random Forests","45dbe183":"# All used libraries and modules","519b92d6":"Cool! There is no null data here.","318fcc5e":"### Import dataset","72cbdf19":"### Descriptive statistics and read data","a5bd630c":"## K-NN","c1442777":"First of all, this is my first kaggle project. I'm very excited for this. I've been waiting for a long time to do this. Waiting for your suggestions about errors and omissions.","eed3a47b":"### DataViz for variable importance level"}}