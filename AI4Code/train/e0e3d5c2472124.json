{"cell_type":{"3da4a220":"code","d9e8eb35":"code","6015b9c7":"code","95b20b90":"code","5cc9f0c0":"code","4c83c62d":"code","b9ded4e4":"code","e1d37b24":"code","f5c145b4":"code","06e520ae":"code","26fc1c9b":"code","a13d63e1":"code","46f1f53b":"code","234bd51a":"code","108e54e9":"code","99d76184":"code","7936fa9e":"code","a7ae5bed":"code","dafee876":"code","44a1d1f6":"code","37163edd":"code","57853d98":"code","c0e6eb2f":"code","be9575c6":"code","d6cccb4a":"code","2d026130":"code","e7527da0":"code","868e327e":"code","6dbeb03c":"code","cbc87432":"code","ee493928":"code","73f695ba":"code","1ba501e5":"code","36169b20":"markdown","fc63167e":"markdown","ceb36ce2":"markdown"},"source":{"3da4a220":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9e8eb35":"import matplotlib.pyplot as plt \nimport seaborn as sns","6015b9c7":"from sklearn.datasets import load_boston\nboston=load_boston()\nboston.keys()","95b20b90":"boston.data","5cc9f0c0":"boston.feature_names","4c83c62d":"print(boston.DESCR)","b9ded4e4":"#Creating the dataframe...\n\ndf=pd.DataFrame(boston.data,columns=boston.feature_names)","e1d37b24":"df.head()","f5c145b4":"df.shape","06e520ae":"#Adding target to dataframe...\n\ndf['TARGET']=boston.target","26fc1c9b":"df.head()","a13d63e1":"df.isnull().sum()","46f1f53b":"df.dtypes","234bd51a":"df.describe()","108e54e9":"X=df.drop(['TARGET'],axis=1)\ny=df['TARGET']","99d76184":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)","7936fa9e":"print(len(X_train),len(y_train),len(X_test),len(y_test))","a7ae5bed":"from sklearn.linear_model import LinearRegression\nclf=LinearRegression()","dafee876":"clf.fit(X_train,y_train)","44a1d1f6":"predictions=clf.predict(X_test)","37163edd":"#Accuracy...\n\nclf.score(X_test,y_test)","57853d98":"#So here are our predictions of 102...\n\npredictions","c0e6eb2f":"plt.scatter(y_test,predictions)\nplt.show()","be9575c6":"plt.figure(figsize=(12,6))\nsns.heatmap(df.corr(),annot=True)","d6cccb4a":"X2=df.drop(['TARGET','CRIM','INDUS','NOX','AGE','RAD','TAX','PTRATIO','LSTAT'],axis=1)\ny2=df['TARGET']","2d026130":"X2.head()","e7527da0":"X2_train,X2_test,y2_train,y2_test=train_test_split(X2,y2,test_size=0.2,random_state=42)","868e327e":"print(len(X2_train),len(y2_train),len(X2_test),len(y2_test))","6dbeb03c":"clf.fit(X2_train,y2_train)","cbc87432":"predictions2=clf.predict(X2_test)","ee493928":"#Second Accuracy\n\nclf.score(X2_test,y2_test)","73f695ba":"predictions2","1ba501e5":"plt.scatter(y2_test,predictions2)\nplt.show()","36169b20":"**As we have used all the features earlier and now I will first check the correlation and will drop those features having negative correlation with the target and then check the accuracy and predictions...**","fc63167e":"So, we can conclude that there can be many factors on which accuracy or prediction can depend, even though in second prediction we used correlation and dropped the features which have negative correlation with the target but even its accuracy is less than the first accuracy in which we used all the features.","ceb36ce2":"**We can import dataset directly from sklearn.datasets or you can use from the kaggle dataset...**"}}