{"cell_type":{"c5131066":"code","09bb0cfb":"code","9bab39f9":"code","10ff5a16":"code","24047a2a":"code","49f8c010":"code","a4264047":"code","c121e505":"code","3f16e291":"code","64adc7c3":"code","601cbb15":"code","865d5f16":"code","a653a2ee":"code","4f54b69d":"code","ff036203":"code","9a839f41":"code","aff323cf":"code","4c5248f5":"code","c8465db2":"code","fdbafaa0":"code","03488356":"code","db30ab4c":"code","001f04d7":"code","c618f691":"code","5cb224f3":"markdown","17f82e08":"markdown","de676986":"markdown","b19a7574":"markdown","30ef1d17":"markdown","9b5865a6":"markdown","4edb2628":"markdown","b8805988":"markdown","8300645b":"markdown","f815c5a3":"markdown","74706177":"markdown","bd49ec23":"markdown","22554522":"markdown"},"source":{"c5131066":"import os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","09bb0cfb":"dfs = []\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/airline-2019'):\n    for filename in filenames:\n        path = os.path.join(dirname, filename)\n        dfs.append(pd.read_csv(path))\n\ndf = pd.concat(dfs, ignore_index=True)\nprint('Shape of data: ', df.shape)","9bab39f9":"df.info(null_counts=True)","10ff5a16":"df.select_dtypes(exclude=['O'])","24047a2a":"df.select_dtypes(include=['O'])","49f8c010":"re = r'\\s*,\\s*[a-zA-Z]*\\s*$'","a4264047":"# Clean origin cities\ndf['ORIGIN_CITY_NAME'] = df['ORIGIN_CITY_NAME'].str.replace(re, '')\n\n# Check\n(df['ORIGIN_CITY_NAME'].str.contains(',') == False).sum() == df['ORIGIN_CITY_NAME'].index.size","c121e505":"df['ORIGIN_CITY_NAME']","3f16e291":"# Clean destination cities\ndf['DEST_CITY_NAME'] = df['DEST_CITY_NAME'].str.replace(re, '')\n\n# Check\n(df['DEST_CITY_NAME'].str.contains(',') == False).sum() == df['DEST_CITY_NAME'].index.size","64adc7c3":"df['DEST_CITY_NAME']","601cbb15":"df['Unnamed: 25'].value_counts(dropna=False)","865d5f16":"(df['Unnamed: 25'].isna()).sum() == df['Unnamed: 25'].index.size","a653a2ee":"df.drop('Unnamed: 25', axis=1, inplace=True)","4f54b69d":"df['CANCELLED'].value_counts(dropna=False)","ff036203":"df['CANCELLATION_CODE'].value_counts(dropna=False)","9a839f41":"# Split CANCELLATION_CODE into two groups by CANCELLED\ndf_cancelled_0 = df[df['CANCELLED'] == 0]['CANCELLATION_CODE']\ndf_cancelled_1 = df[df['CANCELLED'] == 1]['CANCELLATION_CODE']","aff323cf":"df_cancelled_0.value_counts(dropna=False)","4c5248f5":"df_cancelled_1.value_counts(dropna=False)","c8465db2":"df.drop('CANCELLED', axis=1, inplace=True)","fdbafaa0":"df['TOTAL_DELAY'] = df['CARRIER_DELAY'] + df['WEATHER_DELAY'] + df['NAS_DELAY'] + df['SECURITY_DELAY'] + df['LATE_AIRCRAFT_DELAY']\n\ndf_delays = df[['CARRIER_DELAY', 'WEATHER_DELAY', 'NAS_DELAY', 'SECURITY_DELAY', 'LATE_AIRCRAFT_DELAY']]\nax = df_delays.sum().plot.pie(title='Delays', figsize=(8, 8))\nax.set_xlabel('')\nax.set_ylabel('');","03488356":"df_airlines = df.groupby('OP_CARRIER_AIRLINE_ID')['TOTAL_DELAY'].aggregate(np.sum).reset_index().sort_values('TOTAL_DELAY', ascending=False)\n\n# Find out the flight operators which correspond to maximum delay in general\nplt.figure(figsize=(15, 8))\nax = sns.barplot(x='OP_CARRIER_AIRLINE_ID', y='TOTAL_DELAY', data=df_airlines)\nax.set_xlabel('Airline', fontsize=16)\nax.set_ylabel('Total delay', fontsize=16)\nplt.show();","db30ab4c":"df_airports = df.groupby('ORIGIN')['TOTAL_DELAY'].aggregate(np.sum).reset_index().sort_values('TOTAL_DELAY', ascending=False)\n\n# Find out the airports which correspond to maximum delay in general\nplt.figure(figsize=(15, 70))\nax = sns.barplot(y='ORIGIN', x='TOTAL_DELAY', data=df_airports)\nax.set_ylabel('Airport', fontsize=16)\nax.set_xlabel('Total delay', fontsize=16)\nplt.show();","001f04d7":"df[df['ORIGIN'] == 'ORD'][['ORIGIN', 'ORIGIN_CITY_NAME', 'ORIGIN_STATE_NM']].head()","c618f691":"# Rename columns\n# df.rename(columns={'ORIGIN_STATE_NM': 'ORIGIN_STATE_NAME'}, inplace=True)\n# df.rename(columns={'DEST_STATE_NM': 'DEST_STATE_NAME'}, inplace=True)","5cb224f3":"--------------------------------------------------------------------------------------------------\n\n## 4. Find out the airports and the flight operators which correspond to maximum delay in general","17f82e08":"https:\/\/www.kaggle.com\/neel90\/airline-2019\/tasks?taskId=1271\n\n**Task Details**\n\n1. Combine different csv files into a single dataframe\n1. Clean the city_name columns, which also contain the abreviated state names.\n1. Check which of the columns are redundant information (i.e. they can easily be computed from the other columns)\n1. Find out the airports and the flight operators which correspond to maximum delay in general.\n\n**Submission**\n\nSubmit your notebook containing all the tasks mentioned below. If you are interested in figuring out some more features from the data, you are free to do so. However please separate each of them with appropriate headings for ease of evaluation.\n\n--------------------------------------------------------------------------------------------------","de676986":"### Showing columns with object data types","b19a7574":"### The flight operator with ID *20304* has the maximum delay in general","30ef1d17":"### Showing columns with non-object data types","9b5865a6":"### So, the column Unnamed: 25 can be dropped because it consists of NaN values only","4edb2628":"### Check that ORD with the maximum delay","b8805988":"#### Chicago airport (ORD) has the maximum delay in general","8300645b":"--------------------------------------------------------------------------------------------------\n## 2. Clean the city_name columns, which also contain the abreviated state names","f815c5a3":"---\n\n## 1. Combine different csv files into a single dataframe","74706177":"### **5. Possible additional changes**","bd49ec23":"--------------------------------------------------------------------------------------------------\n## 3. Check which of the columns are redundant information (i.e. they can easily be computed from the other columns)","22554522":"### So, the column CANCELLED can be dropped because when it has NaN value the column CANCELLATION_CODE will also have NaN value"}}