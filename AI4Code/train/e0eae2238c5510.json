{"cell_type":{"8b073898":"code","a453681e":"code","162ce169":"code","ffee6afa":"code","60f328b9":"code","cafe7d3e":"code","6bf51eed":"code","43155067":"code","da21e716":"code","a3a67d43":"code","360ab326":"code","576b8af2":"code","6c12e1b2":"code","cdaab0f1":"code","c60b6cee":"code","97ddc650":"code","4663b075":"code","dd1074b2":"code","058d04c1":"code","f65db72a":"markdown","2375eca4":"markdown","20fe9e57":"markdown","f6da291f":"markdown","b4d12a3e":"markdown","06957137":"markdown","dbe67e8e":"markdown","d24022b2":"markdown","bbf8b5a8":"markdown"},"source":{"8b073898":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a453681e":"# Import the dataset\nimport tensorflow as tf\nfrom tensorflow import keras","162ce169":"# Load the dataset and split it into training and test sets\n(x_train, y_train), (x_test, y_test) = keras.datasets.fashion_mnist.load_data()","ffee6afa":"x_train[0].shape","60f328b9":"x_test.shape","cafe7d3e":"# Let's look at a sample from the dataset\nimport matplotlib.pyplot as plt\nplt.imshow(x_train[43]);","6bf51eed":"class_names = ['T-shirt\/top', 'Trouser', \"Pullover\", \"Dress\",\"Coat\",\"Sandal\",\"Shirt\",\"Sneaker\",\"Bag\",\"Ankle boot\"]","43155067":"#Let's plot random images from our dataset and look at the lables\nimport random\nplt.figure(figsize=(7,7))\nfor i in range(4):\n    ax = plt.subplot(2,2,i+1)\n    rand_index = random.choice(range(len(x_train)))\n    plt.imshow(x_train[rand_index], cmap=plt.cm.binary)\n    plt.title(class_names[y_train[rand_index]])\n    plt.axis(False)","da21e716":"x_train = x_train\/255.0\nx_test = x_test\/255.0","a3a67d43":"x_train = np.expand_dims(x_train, axis=-1)\n","360ab326":"x_test = np.expand_dims(x_test, axis=-1)","576b8af2":"tf.random.set_seed(42)\n\nmodel = tf.keras.Sequential()\n\nmodel.add(tf.keras.layers.Conv2D(filters=64, kernel_size=2, padding='same', activation='relu', input_shape=(28,28,1))) \nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=2))\nmodel.add(tf.keras.layers.Dropout(0.3))\nmodel.add(tf.keras.layers.Conv2D(filters=32, kernel_size=2, padding='same', activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=2))\nmodel.add(tf.keras.layers.Dropout(0.3))\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(256, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.5))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))","6c12e1b2":"tf.keras.utils.plot_model(model)","cdaab0f1":"#compile our model\nmodel.compile(loss='sparse_categorical_crossentropy',\n             optimizer='adam',\n             metrics=['accuracy'])\n\n#fit our model\nhistory = model.fit(x_train,\n                   y_train,\n                   epochs=35)","c60b6cee":"score = model.evaluate(x_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","97ddc650":"y_prob = model.predict(x_test)","4663b075":"y_preds = y_prob.argmax(axis=1)\ny_preds","dd1074b2":"import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import confusion_matrix\n\ndef make_confusion_matrix(y_true,y_pred, classes=None, figsize=(10,10),text_size=15):\n\n  cm = confusion_matrix(y_true, tf.round(y_pred))\n  cm_norm = cm.astype(\"float\")\/cm.sum(axis=1)[:,np.newaxis]\n  n_classes = cm.shape[0]\n\n\n  fig, ax = plt.subplots(figsize=figsize)\n\n  cax = ax.matshow(cm, cmap=plt.cm.Blues)\n  fig.colorbar(cax)\n\n  if classes:\n    labels = classes\n  else:\n    labels = np.arange(cm.shape[0])\n\n\n  ax.set(title=\"Confusion Matrix\",\n        xlabel=\"Predicted label\",\n        ylabel=\"True label\",\n        xticks=np.arange(n_classes),\n        yticks=np.arange(n_classes),\n        xticklabels=labels,\n        yticklabels=labels)\n\n  ax.xaxis.set_label_position(\"bottom\")\n  ax.xaxis.tick_bottom()\n\n  # Adjust label size\n  ax.xaxis.label.set_size(text_size)\n  ax.yaxis.label.set_size(text_size)\n  ax.title.set_size(text_size)\n\n  threshold = (cm.max() + cm.min()) \/ 2.\n\n  for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n    plt.text(j, i, f\"{cm[i, j]} ({cm_norm[i, j]*100:.1f}%)\",\n            horizontalalignment=\"center\",\n            color=\"white\" if cm[i, j] > threshold else \"black\",\n            size=text_size)","058d04c1":"make_confusion_matrix(y_test,y_preds,class_names,figsize=(15,15),text_size=10)","f65db72a":"The images are of the shape 28x28 pixels","2375eca4":"We need to know what are the classes in the dataset. [This](https:\/\/github.com\/zalandoresearch\/fashion-mnist#labels) Github repository contains all the information on the dataset","20fe9e57":"## Visualizing the confusion matrix","f6da291f":"## Creating a model","b4d12a3e":"# Mutli-class classification on the Fashion MNIST dataset with Tensorflow","06957137":"### Normalzing the data","dbe67e8e":"### Model Architecture","d24022b2":"## Evaluating Our Model","bbf8b5a8":"## Becoming one with the data!"}}