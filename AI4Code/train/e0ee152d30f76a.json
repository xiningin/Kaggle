{"cell_type":{"85688577":"code","9a7bea3c":"code","38639770":"code","84ce25f3":"code","88e3ed90":"code","6aee6123":"code","66dd4f68":"code","d3021d74":"code","3a8bbf7f":"code","0ded8db8":"code","9a888627":"code","1d379b5f":"code","a5598978":"code","32bab3a3":"code","341ae23c":"code","3e8d38c4":"code","f26d4e6b":"code","2ec90195":"code","37bad782":"markdown","6cd91f70":"markdown","961d8b68":"markdown","cb8fb611":"markdown","e2955605":"markdown","e54ccd83":"markdown","61cbc347":"markdown","7723d842":"markdown","0907c79f":"markdown"},"source":{"85688577":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn import datasets","9a7bea3c":"iris = datasets.load_iris()\ndf = pd.DataFrame(iris.data, columns = iris.feature_names)\ndf.head()","38639770":"df.shape         # Shape of the data","84ce25f3":"df.describe()","88e3ed90":"df.info()        # Check for cols and datatypes","6aee6123":"# Check for null values\n\ndf.isnull().sum()","66dd4f68":"# Check for duplicate values\n\ndf.duplicated().sum()","d3021d74":"# Remove duplicate values\n\ndf.drop_duplicates(inplace = True)","3a8bbf7f":"df.shape","0ded8db8":"df.corr()","9a888627":"plt.figure(figsize = (10,6))\nsns.heatmap(abs(df.corr()), cmap = 'Spectral', annot = True)\nplt.show()","1d379b5f":"x = df.iloc[:, [0,1,2,3]].values\n\nfrom sklearn.cluster import KMeans\nwcss = []\nfor i in range(1,11):\n    kmeans = KMeans(n_clusters = i, init = 'k-means++', \n                    max_iter = 300, n_init = 10, random_state = 0)\n    kmeans.fit(x)\n    wcss.append(kmeans.inertia_)","a5598978":"plt.plot(range(1, 11), wcss, color='blue')\nplt.title('Elbow method')\nplt.xlabel('No of clusters')\nplt.ylabel('WCSS') \nplt.show()","32bab3a3":"# Applying k-means to the dataset\n\nkmeans = KMeans(n_clusters = 3, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\ny_kmeans = kmeans.fit_predict(x)","341ae23c":"plt.scatter(x[y_kmeans == 0, 0], x[y_kmeans == 0, 1], s = 100, c = 'purple', label = 'Iris-setosa')\nplt.scatter(x[y_kmeans == 1, 0], x[y_kmeans == 1, 1], s = 100, c = 'green', label = 'Iris-versicolour')\nplt.scatter(x[y_kmeans == 2, 0], x[y_kmeans == 2, 1], s = 100, c = 'blue', label = 'Iris-virginica')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], s = 100, c = 'red', label = 'Centroids')\nplt.legend()\nplt.show()","3e8d38c4":"plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], s = 100, c = 'red', label = 'Centroids')\nplt.legend()\nplt.show()","f26d4e6b":"df['cluster'] = kmeans.labels_\ndf","2ec90195":"plt.scatter(x[y_kmeans == 0, 0], x[y_kmeans == 0, 1], s = 100, c = 'purple', label = 'Iris-setosa')\nplt.scatter(x[y_kmeans == 1, 0], x[y_kmeans == 1, 1], s = 100, c = 'green', label = 'Iris-versicolour')\nplt.scatter(x[y_kmeans == 2, 0], x[y_kmeans == 2, 1], s = 100, c = 'blue', label = 'Iris-virginica')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], s = 100, c = 'red', label = 'Centroids')\nplt.legend()\nplt.show()","37bad782":"**Import Libraries** ","6cd91f70":"**Plotting Centroid of Clusters**","961d8b68":"**Read Dataset**","cb8fb611":"**Correlation matrix**","e2955605":"**Therefore, We have successfully predicted the optimum number of clusters and represented it visually**","e54ccd83":"### Task  :-  Prediction using Unsupervised ML\n### From the \u2018Iris\u2019 dataset, predict the optimum number of clusters and represent it visually.","61cbc347":"**Finding the optimum number using k-clusters**","7723d842":"The optimal clusters are formed where the elbow occurs. This is when the WCSS(Within Cluster Sum of Squares) doesn't decrease with every iteration significantly. Here we choose 3 number of clusters","0907c79f":"**Visualize the Cluster Data**"}}