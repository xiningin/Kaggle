{"cell_type":{"ee88d2ef":"code","be6e2572":"code","a87e086d":"code","6478b86c":"code","bbfc9492":"code","6085ed1c":"code","339dd481":"code","14acc54e":"code","6a32c9a0":"code","105e90f1":"code","a384cf5e":"code","5f4e211e":"code","1e09155a":"code","02c31d6b":"code","871dd072":"code","b7034de2":"code","3c77837f":"code","592c0133":"code","6ca5d5f2":"code","fba829a3":"code","8b7351b0":"code","d3fa8161":"code","2f50b7d0":"code","6a4cd3bc":"code","32dc55ae":"code","b88f54cf":"code","f9b9cc82":"code","97dd5ef7":"code","fb50a063":"code","46324225":"code","4ea7ef46":"code","29bac3b7":"code","ee35971c":"code","98e32fe4":"code","e1129d49":"code","d9d356a8":"code","4f89acd1":"code","bb36a2ba":"code","1c59db39":"code","c8edaf2d":"code","31985d36":"code","e9af79a0":"code","5d90b285":"code","ddd15949":"code","c0e4a650":"code","26d62096":"code","d0c2e96d":"code","3fc50793":"code","3e976caf":"code","0483991e":"code","b7c58509":"code","b7f2f01d":"code","c9882c00":"code","0ee67d41":"code","2cdf15e0":"code","ae2e63c4":"code","6641b01b":"code","fb8ff9d2":"code","3492783a":"code","c01f0622":"markdown","b4fb0ad5":"markdown","f59d881a":"markdown","300dc61c":"markdown","0c8909ea":"markdown","94803311":"markdown","81825749":"markdown","05a6fb3b":"markdown","bb78734e":"markdown","8b82f554":"markdown","8adac74e":"markdown","0206cd0c":"markdown","876505ef":"markdown","5ba05598":"markdown","539c0c72":"markdown","05b2d07d":"markdown","30191d5e":"markdown","3b829cd6":"markdown","7ba9eabe":"markdown","cc0d17e4":"markdown","f83658f4":"markdown","ab4b504c":"markdown","94141acd":"markdown","c4a097ef":"markdown","8e0dfccc":"markdown","f9fcfa15":"markdown","a3d9c904":"markdown","aade15b9":"markdown","0d0e79bb":"markdown","e20a10d8":"markdown","0177dfc4":"markdown","4cfbf9d9":"markdown","72bfd30f":"markdown","dab6af6c":"markdown","af5c35e1":"markdown","b1eff2d2":"markdown","92618633":"markdown","b9ed3c8b":"markdown","e2cd4dec":"markdown","e00cf693":"markdown","4488b5f5":"markdown","bf2a294f":"markdown"},"source":{"ee88d2ef":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\ndf = pd.read_csv('..\/input\/border-crossing-entry-data\/Border_Crossing_Entry_Data.csv')\ndf","be6e2572":"df.shape","a87e086d":"df.describe()","6478b86c":"df.info()","bbfc9492":"df.head()","6085ed1c":"df[\"Border\"] = [\"Mexico\" if i == \"US-Mexico Border\" else \"Canada\" for i in df.Border]","339dd481":"print(\"Unique port name: \",len(df[\"Port Name\"].unique()))\nprint(\"Unique States: \",len(df[\"State\"].unique()))\nprint(\"Unique Port Codes: \",len(df[\"Port Code\"].unique()))\nprint(\"Unique Borders: \",len(df[\"Border\"].unique()))\nprint(\"Unique measure of entries: \",len(df[\"Measure\"].unique()))","14acc54e":"df.isnull().any()","6a32c9a0":"import folium\nworld_map =folium.Map(location=[37.09, -95.71],zoom_start=4)\nworld_map","105e90f1":"#temp = df['Location']\ndf['Location']","a384cf5e":"df['Location'] = df['Location'].str.lstrip('POINT')\ndf['Location']","5f4e211e":"'''df['Location'] = df['Location'].map(lambda x: x.lstrip('('))\ndf['Location'].str.lstrip(')')\ndf['Location']'''\ndf['Location']= df['Location'].str.replace(r'\\)', '')\ndf['Location']= df['Location'].str.replace(r'\\(', '')\ndf['Location']","1e09155a":"df['Location'].shape","02c31d6b":"temp = df['Location']\ntemp.to_frame()\ntemp[0]\ntemp.shape\ntemp = pd.DataFrame(df['Location'].str.split(' ',2).tolist(),columns = ['z','Y','X'])\ntemp\ntemp.X.shape","871dd072":"df.insert(8, \"X\", temp.X, True) \ndf.insert(9,\"Y\",temp.Y,True)","b7034de2":"df","3c77837f":"df.head()","592c0133":"df =df.iloc[:1000,:]\ndf.shape\ndf['Port Name']","6ca5d5f2":"#Create entry_map for plotting\nentry_map =folium.Map(location=[37.09, -95.71],zoom_start=4)\nentry_map","fba829a3":"entries = folium.map.FeatureGroup()\nfor lat,lon in zip(df.X,df.Y):\n    entries.add_child(\n    folium.CircleMarker(\n    [lat,lon],\n    radius=5,\n    color='yellow',\n    fill=True,\n    fill_color='blue',\n    fill_opacity=0.6,\n        )\n    )\nentry_map.add_child(entries)","8b7351b0":"latitudes = list(df.X)\nlongitudes = list(df.Y)\nlabels = list(df['Port Name'])\n\nfor lat, lng, label in zip(latitudes, longitudes, labels):\n    folium.Marker([lat, lng], popup=label).add_to(entry_map)    \n    \n# add incidents to map\nentry_map.add_child(entries)","d3fa8161":"entry_map = folium.Map(location=[37.09, -95.71], zoom_start=4)\n\n# loop through the 100 crimes and add each to the map\nfor lat, lng, label in zip(df.X, df.Y, df.Measure):\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5, # define how big you want the circle markers to be\n        color='yellow',\n        fill=True,\n        popup=label,\n        fill_color='blue',\n        fill_opacity=0.6\n    ).add_to(entry_map)\n\n# show map\nentry_map","2f50b7d0":"from folium import plugins\n\ncluster_map = folium.Map(location = [37.09, -95.71], zoom_start = 4)\n\nentries = plugins.MarkerCluster().add_to(cluster_map)\n\n# loop through the dataframe and add each data point to the mark cluster\nfor lat, lng, label, in zip(df.X, df.Y, df['Port Name']):\n    folium.Marker(\n        location=[lat, lng],\n        icon=None,\n        popup=label,\n    ).add_to(entries)\n\n# display map\ncluster_map","6a4cd3bc":"plt.figure(figsize=(18,5))\nax = sns.violinplot(x=\"State\", y=\"Value\",\n                    data=df[df.Value < 30000],\n                    scale=\"width\", palette=\"Set3\")","32dc55ae":"df_state =df.groupby('State',axis=0).sum()\ndf_state=df_state.drop(columns=['Port Code'])\n#Top 5 States\ndf_state = df_state.sort_values(['Value'], ascending=[0])\ndf_state\nlimit = 6\ndf_state = df_state.iloc[:limit,:]\ndf_state","b88f54cf":"explode_list = [0, 0, 0, 0.1,0.1,0.1]\n\ndf_state['Value'].plot(kind='pie',figsize=(15,6), autopct='%1.1f%%',startangle=90,shadow=True,pctdistance=1.12,explode=explode_list,labels=None)\nplt.title('Border crossed based on the States',y=1.12)\nplt.legend(labels=df_state.index, loc='upper left')\nplt.axis('equal') \nplt.show()","f9b9cc82":"df_measure=df.groupby('Measure',axis=0).sum()\ndf_measure=df_measure.drop(columns=['Port Code'])\ndf_measure=df_measure.sort_values(['Value'],ascending=[0])\nlimit=6\ndf_measure=df_measure.iloc[:limit,:]\ndf_measure","97dd5ef7":"explode_list = [0, 0,0,0.1,0.1,0.1]\n\ndf_measure['Value'].plot(kind='pie',figsize=(15,6), autopct='%1.1f%%',startangle=90,shadow=True,pctdistance=1.12,explode=explode_list,labels=None)\nplt.title('Border crossed based on measures of crossing',y=1.12)\nplt.legend(labels=df_measure.index, loc='upper left')\nplt.axis('equal') \nplt.show()","fb50a063":"df_country=df.groupby('Border').sum()\ndf_country=df_country.drop(columns=['Port Code'])\ndf_country","46324225":"df_country['Value'].plot(kind='pie',figsize=(15,6),autopct='%1.1f%%',startangle=90,shadow=True,pctdistance=1.12,labels=None)\nplt.title('Border crossed based on country',y=1.12)\nplt.legend(labels=df_country.index, loc='upper left')\nplt.axis('equal') \nplt.show()","4ea7ef46":"df_port=df.groupby('Port Name').sum()\ndf_port=df_port.drop(columns=['Port Code'])\ndf_port=df_port.sort_values(['Value'],ascending=[0])\ndf_port.head(10)\ndf_port = df_port.iloc[:10,:]\ndf_port","29bac3b7":"exp_list = [0, 0,0,0,0,0,0.1,0.1,0.1,0.1]\n\ndf_port['Value'].plot(kind='pie',figsize=(15,6), autopct='%1.1f%%',startangle=90,shadow=True,pctdistance=1.12,explode=exp_list,labels=None)\nplt.title('Border crossed based on measures of crossing',y=1.12)\nplt.legend(labels=df_port.index, loc='upper left')\nplt.axis('equal') \nplt.show()","ee35971c":"df","98e32fe4":"df_state =df.groupby('State',axis=0).sum()\ndf_state=df_state.drop(columns=['Port Code'])\n#Top 5 States\ndf_state = df_state.sort_values(['Value'], ascending=[0])\ndf_state","e1129d49":"df_state.plot(kind='bar', figsize=(10, 6), rot=90) ","d9d356a8":"df_measure=df.groupby('Measure',axis=0).sum()\ndf_measure=df_measure.drop(columns=['Port Code'])\ndf_measure=df_measure.sort_values(['Value'],ascending=[0])\ndf_measure","4f89acd1":"df_measure.plot(kind='bar', figsize=(10, 6), rot=90) ","bb36a2ba":"df_country.plot(kind='bar',figsize=(10,6),rot=90)","1c59db39":"df_port.plot(kind='bar',figsize=(10,6),rot=90)","c8edaf2d":"#Using Seaborn\nimport seaborn as sns\n\nplt.figure(figsize=(18,7))\nsns.barplot(x = df_state.index, y = \"Value\", data = df_state)\nplt.xticks(rotation=45)\nplt.show()","31985d36":"plt.figure(figsize=(18,7))\nsns.barplot(x = \"State\", y = \"Value\", data = df)\nplt.xticks(rotation=45)\nplt.show()","e9af79a0":"plt.figure(figsize=(18,7))\nsns.barplot(x = \"State\", y = \"Value\",hue='Border', data = df)\nplt.xticks(rotation=45)\nplt.show()","5d90b285":"plt.figure(figsize=(18,7))\nsns.barplot(x = df_measure.index, y = \"Value\", data = df_measure)\nplt.xticks(rotation=45)\nplt.show()","ddd15949":"plt.figure(figsize=(18,7))\nsns.barplot(x = \"Measure\", y = \"Value\", data = df)\nplt.xticks(rotation=45)\nplt.show()","c0e4a650":"plt.figure(figsize=(18,7))\nsns.barplot(x = df_port.index, y = \"Value\", data = df_port)\nplt.xticks(rotation=45)\nplt.show()","26d62096":"sns.boxenplot(x=\"Border\", y=\"Value\",\n              color=\"b\",\n              scale=\"linear\", data=df)\nplt.show()","d0c2e96d":"df","3fc50793":"from wordcloud import WordCloud, ImageColorGenerator\ntext=\" \".join(str(port) for port in df['Port Name'])\ntext","3e976caf":"word_cloud = WordCloud(max_words=100,background_color='white').generate(text)\nplt.figure(figsize=(15,10))\nplt.imshow(word_cloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","0483991e":"fig,ax = plt.subplots(1,2,figsize=(15,5))\nchart1=sns.countplot(df['Measure'],hue='Border',data=df,ax=ax[1])\nchart1.set_xticklabels(chart1.get_xticklabels(), rotation=90)\nchart2=sns.countplot(df['Measure'],data=df,ax=ax[0])\nchart2.set_xticklabels(chart2.get_xticklabels(), rotation=90)\nax[0].title.set_text(\"Measure:data\")\nax[1].title.set_text(\"Measure:Border\")","b7c58509":"fig,ax = plt.subplots(1,2,figsize=(15,5))\nchart1=sns.countplot(df['State'],hue='Border',data=df,ax=ax[1])\nchart1.set_xticklabels(chart1.get_xticklabels(), rotation=45)\nchart2=sns.countplot(df['State'],data=df,ax=ax[0])\nchart2.set_xticklabels(chart2.get_xticklabels(), rotation=90)\nax[0].title.set_text(\"State:data\")\nax[1].title.set_text(\"State:Border\")","b7f2f01d":"df_date = pd.read_csv('..\/input\/border-crossing-entry-data\/Border_Crossing_Entry_Data.csv')\ndf_date","c9882c00":"df_date[\"DateAsDateObj\"] = pd.to_datetime(df_date.Date)\ndf_date = df_date.set_index(\"DateAsDateObj\")\ndf_date","0ee67d41":"dataForPlot = df_date.resample(\"M\").mean()\ndataForPlot.loc[:,[\"Value\"]].plot()","2cdf15e0":"dataForPlot = df_date.resample(\"M\").mean()\ndataForPlot.loc[:,[\"Value\"]].plot()","ae2e63c4":"##Plot  by year\ndataForPlot = df_date.loc[:,[\"Measure\",\"Value\"]]\ndataForPlot = dataForPlot.groupby(\"Measure\").resample(\"Y\").mean()\ndataForPlot.reset_index().pivot(index=\"DateAsDateObj\",columns=\"Measure\", values=\"Value\").plot(subplots=True, figsize=(8,14))","6641b01b":"dataForPlot = df_date.loc[:,[\"State\",\"Value\"]]\ndataForPlot = dataForPlot.groupby(\"State\").resample(\"Y\").mean()\ndataForPlot.reset_index().pivot(index=\"DateAsDateObj\",columns=\"State\", values=\"Value\").plot(subplots=True, figsize=(8,14))","fb8ff9d2":"dataForPlot = df_date.loc[:,[\"Measure\",\"Value\"]]\ndataForPlot = dataForPlot.groupby(\"Measure\").resample(\"M\").mean()\ndataForPlot.reset_index().pivot(index=\"DateAsDateObj\",columns=\"Measure\", values=\"Value\").plot(subplots=True, figsize=(8,14))","3492783a":"dataForPlot = df_date.loc[:,[\"State\",\"Value\"]]\ndataForPlot = dataForPlot.groupby(\"State\").resample(\"M\").mean()\ndataForPlot.reset_index().pivot(index=\"DateAsDateObj\",columns=\"State\", values=\"Value\").plot(subplots=True, figsize=(8,14))","c01f0622":"## Pie-chars of different Measures of entry. Limit the Measures to Top 6. ","b4fb0ad5":"## We can also add marker on the map with labels","f59d881a":"## Pie-chart of entries from different Ports. Limit upto 10 Ports","300dc61c":"## Line chart of all the states vs no of entries over the years","0c8909ea":"## Convert into two different columns","94803311":"## Count plots of State vs Border","81825749":"## We need to format the Location column so that we can use it to plot the location on the map","05a6fb3b":"## Convert the Data columns into pandas readable format and set it as index","bb78734e":"## Line chart of no of entries(Value) Vs months","8b82f554":"## Bar Chart of States Vs no of entries(Values) . We can see that california has the highest no fo entries","8adac74e":"## Wordcloud with max 100 words ","0206cd0c":"## Bar Chart of Measure of entry vs no of entries using that Measure using Seaborn.","876505ef":"## Let's  plot line chart. We read the dataset into a new dataframe df_date","5ba05598":"## Bar chart of State Vs no fo entries using Seaborn.","539c0c72":"## Import important libraries and load the data","05b2d07d":"## Bar Chart of Measure of Entry Vs No of entries(Values) . We can see that no of entries are more by personal entry passengers.","30191d5e":"## Line chart of all the measures of entries Vs no of entries over months","3b829cd6":"## Plot 1st 1000 onto the map","7ba9eabe":"## Violinplots of State Vs Value (no of people crossing the border)","cc0d17e4":"## Insert into the dataframe","f83658f4":"## We can make cluster maps. Whenever we zoon the clusters will split","ab4b504c":"## Bar Chart of Port vs No of entries from that port","94141acd":"## Check shape and view basic statistical details using describe()","c4a097ef":"## Strip parenthsis from both sides","8e0dfccc":"## Line Chart of all the States Vs no of entries over months\n","f9fcfa15":"## If the markers look more congested we can remove them and add labels on points","a3d9c904":"## Line chart of all the Measures of entries Vs no of entries over the years","aade15b9":"## Bar chart of Ports vs no of entries from that port","0d0e79bb":"## Add point of entries on the map","e20a10d8":"# Let's make a word cloud of all the ports. Convert all values in Port Names into text.","0177dfc4":"## Pie-chars of different states. Limit the states to Top 6 states ","4cfbf9d9":"df","72bfd30f":"## import folium to visualize the data on a map","dab6af6c":"## Find unique values in each column","af5c35e1":"## Check for Null values","b1eff2d2":"## Line chart of no of entries(Value) Vs years ","92618633":"## Count plots of Measure vs Border","b9ed3c8b":"## Pre-process the data by converting Border values to country names","e2cd4dec":"## Pie-Chart of number of entries from Mexico and Canada Border","e00cf693":"## Boxenplot of Mexico VS Canada ","4488b5f5":"##  First we strip POINT infront of our data","bf2a294f":"## Bar chart of No of entries from Mexico Vs Canada. We can see that entries from Mexico are more."}}