{"cell_type":{"260b17fe":"code","90431dc9":"code","7e9bfa64":"code","19b8bcaf":"code","a1f1d390":"code","bc8174bd":"code","14da7547":"code","68c40620":"code","12021c80":"code","e454982a":"code","dcfff03e":"code","24c70206":"code","89a69358":"code","9dbaa98a":"code","15bc32e3":"code","037b896f":"code","8f9e3556":"code","8ec384e5":"code","caf43a65":"code","2383b0bd":"code","50537d45":"code","9d89ec1d":"code","20ac37de":"code","48f01c36":"code","580276a5":"code","8a405f9c":"markdown","9565743b":"markdown","f74e4db2":"markdown","458e05cc":"markdown","d1b198ec":"markdown","8e3e1d0b":"markdown","7ebb765d":"markdown","69ac701e":"markdown"},"source":{"260b17fe":"#Import different packages\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.style.use(\"fivethirtyeight\")\nplt.rcParams['figure.figsize'] = (12, 8)","90431dc9":"all_files=[]\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/airline-2019'):\n    for filename in filenames:\n        all_files.append(os.path.join(dirname, filename))\n        \nli = []\n\nfor filename in all_files:\n    df = pd.read_csv(filename, index_col=None, header=0)\n    li.append(df)\n\nairline = pd.concat(li, axis=0, ignore_index=True)","7e9bfa64":"#Delete temp files \ndel li","19b8bcaf":"# Clean city data in the dataset\ncitycode=pd.DataFrame(airline['ORIGIN'].unique())\ncitycode.columns=['ORIGIN']\ncity=citycode.merge(airline[['ORIGIN','ORIGIN_CITY_NAME']], how='left').drop_duplicates()\ncity[['Cityname', 'State']]=city['ORIGIN_CITY_NAME'].str.split(\",\", expand=True)\ncity=city.drop(columns=['ORIGIN_CITY_NAME'])\ncity=city.reset_index().drop(columns='index')\ncity.columns=['Code', 'Cityname', 'State']\n\n#import airport GPS information\nairportgps=pd.read_csv('\/kaggle\/input\/airport\/ICAO_airports.csv')\n\n#remove NaN values and only keep IATA code and GPS coordinates\nairportgps=airportgps[['iata_code','latitude_deg', 'longitude_deg']].dropna()\nairportgps.columns=['Code', 'Lat', 'Lng']\ncity=city.merge(airportgps, how='left')\n\ncity.head()","a1f1d390":"#Since the city dataframe includes all information, the additional information can be deleted.\nairline=airline.drop(columns=['ORIGIN_CITY_NAME', 'ORIGIN_STATE_NM', 'DEST_CITY_NAME', 'DEST_STATE_NM'])\nairline.head(3)","bc8174bd":"airline.columns","14da7547":"airline.describe()","68c40620":"#Let's check the departure time, taxi out and wheels off relationship. \n#It seems the majority of time difference is 0. And some -40 number is due to formate.  \n(airline['DEP_TIME']+airline['TAXI_OUT']-airline['WHEELS_OFF']).value_counts()","12021c80":"# Same applies to Wheels on and taxi_in time. \n(airline['WHEELS_ON']+airline['TAXI_IN']-airline['ARR_TIME']).value_counts()","e454982a":"#Based on the above analysis, these columns can be deleted\nairline=airline.drop(columns=['WHEELS_OFF','WHEELS_ON', 'Unnamed: 25'])","dcfff03e":"airline['CANCELLED'].value_counts()","24c70206":"airline['CANCELLATION_CODE'].value_counts()","89a69358":"airline['CANCELLATION_CODE'].value_counts().sum()","9dbaa98a":"airline=airline.drop(columns='CANCELLED')","15bc32e3":"airline.head(5)","037b896f":"#Create a new column with total delay\nairline['Total_Delay']=airline.iloc[:,-5:].sum(axis=1)","8f9e3556":"airline.head(3)","8ec384e5":"delayed=airline[airline['Total_Delay']>0.5]\ndelayed['OP_CARRIER_AIRLINE_ID'].value_counts().plot(kind='bar')\nplt.xlabel('Operating airline')\nplt.ylabel('Total counts of delayed flights')\nplt.title(\"Number of delayed flight for different operators\", size=20)\nplt.tight_layout()","caf43a65":"#Is time an important factor for delay? \nflight_time=round(delayed['DEP_TIME']\/100)\ndelayed['flight_time']=pd.Series(flight_time)\nsns.countplot(delayed['flight_time'].dropna(), color='r')\nplt.xlabel('Flight Time')\nplt.ylabel('Total counts of delayed flights')\nplt.xticks(rotation=90)\nplt.title(\"Number of delayed flight at different hours\", size=20)\nplt.tight_layout()","2383b0bd":"airportdelay=delayed.groupby(['ORIGIN'])['Total_Delay'].agg(['count', 'mean']).reset_index().sort_values(by='count', ascending=False)[:15]\n\nfig, ax1 = plt.subplots()\n\nax2 = ax1.twinx()\nax1.bar(airportdelay['ORIGIN'],airportdelay['count'])\nax2.plot(airportdelay['ORIGIN'],airportdelay['mean'], 'b-')\n\nax1.set_xlabel('Airport')\nax1.set_ylabel('Total number of delayed flight')\nax1.set_ylim([0,81000])\nax2.set_ylabel('Average delay (min)', color='b')\nax2.set_ylim([0,81])\n\nplt.title('Top 15 aiports with the most delay and average delay in time')\nplt.show()","50537d45":"#Which are the most delayed route? Top 50 routes\nmostdelay=delayed.groupby(['ORIGIN','DEST'])['Total_Delay'].agg(['count', \n                'mean']).reset_index().sort_values(ascending=False, by='count')[:50]\nlongestdelay= delayed.groupby(['ORIGIN','DEST'])['Total_Delay'].agg(['count', 'mean']).reset_index().sort_values(ascending=False,\n                by='count')[:50].sort_values(ascending=False, by='count')","9d89ec1d":"mostdelay=mostdelay.merge(city, left_on='ORIGIN', right_on='Code', how='left')\nmostdelay=mostdelay.drop(columns=['Code', 'Cityname', 'State'])\nmostdelay=mostdelay.rename(columns={'Lat': 'Orgin_Lat', 'Lng':'Origina_Lng'})\nmostdelay=mostdelay.merge(city, left_on='DEST', right_on='Code', how='left')\nmostdelay=mostdelay.drop(columns=['Code', 'Cityname', 'State',])\nmostdelay=mostdelay.rename(columns={'Lat': 'Dest_Lat', 'Lng':'Dest_Lng'})\nmostdelay.head()","20ac37de":"top20=mostdelay.iloc[:20]","48f01c36":"majoraiport=mostdelay[['ORIGIN', 'Orgin_Lat', 'Origina_Lng']].drop_duplicates()","580276a5":"# create new figure, axes instances.\nfig=plt.figure()\nax=fig.add_axes([0.1,0.1,0.8,0.8])\n\n# setup mercator map projection.\nm = Basemap(llcrnrlon=-119,llcrnrlat=22,urcrnrlon=-64,urcrnrlat=49,\n        projection='lcc', resolution='l', lat_1=33,lat_2=45,lon_0=-95,)\n\nfor startlat, startlng, endlat, endlng, delay in zip(top20['Orgin_Lat'],top20['Origina_Lng'], top20['Dest_Lat'], \n                                                     top20['Dest_Lng'], top20['count']):\n\n    m.drawgreatcircle(startlng,startlat,endlng,endlat,linewidth=delay\/500,color='red')\n\n\nfor lat, lng, label1 in zip(majoraiport['Orgin_Lat'],majoraiport['Origina_Lng'], majoraiport['ORIGIN']):\n    x, y = m(lng, lat)\n    plt.plot(x, y, 'ob', markersize=10)\n    x1, y1 = m(lng+0.5, lat-0.5)\n    plt.text(x1, y1, label1, fontsize=15, bbox=dict(facecolor='yellow', alpha=0.5));\n    \nm.drawcoastlines()\nm.fillcontinents()\nm.drawcoastlines()\nm.drawcountries(linewidth=2)\nm.drawstates()\nm.fillcontinents(color='coral',lake_color='aqua', zorder = 1,alpha=0.4)\nm.drawmapboundary(fill_color='aqua')\nax.set_title('Top 20 routes with the most delayed flight')\n\n\n\nplt.show()","8a405f9c":"# What about the specific flight route?","9565743b":"From the above chart, it's clear time is a great factor and the delay peaks at 1800 hour. ","f74e4db2":"# 4. Find out the airports and the flight operators which correspond to maximum delay in general.\nAs the last few columns are delays, let's sum all delays into one total delays","458e05cc":"# Which origin airport had the most delay?","d1b198ec":"# 2. Clean the city_name columns, which also contain the abreviated state names.\nThe three-letter airport code are specific enough. A seperate dataframe can be generated to store the airport code with city and state name. \nFor the subsequte analysis, it's also interesting to have the GPS coordiates for different airport. The detailed coordinates for different airport can be found here. https:\/\/www.airport-data.com\/forums\/topic4054.html ","8e3e1d0b":"Looks like the cancelled columns can also be deleted. As if there is a cancellation code, the cancelled value is 1. ","7ebb765d":"# 3. Check which of the columns are redundant information (i.e. they can easily be computed from the other columns)\n\nFirst we examine the column names. It seems there are some relationship among WHEELS_ON, WHEELS_OFF time. This needs to be confirmed. \nSecondly, the unnamed:25 columns is empty, so it can be deleted. ","69ac701e":"# 1.Combine different csv files into a single dataframe\nAll datasets were combined into airline dataframe"}}