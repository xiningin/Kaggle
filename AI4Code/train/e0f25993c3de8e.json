{"cell_type":{"e339da8f":"code","dda906a6":"code","40d14c67":"code","2f6f7346":"code","cee78109":"code","438da407":"code","e4b2ad07":"code","e564de5a":"code","8d133384":"code","44e63129":"code","b58cb0d5":"code","f62eb24b":"code","cc57955c":"code","20922827":"code","72b79ebf":"code","d45cee9f":"code","a38adf19":"code","1fd9202a":"code","2a5f11e3":"markdown","40a30f7c":"markdown","9a8f9a40":"markdown","3092ad63":"markdown","02533d3f":"markdown","f65f1d2e":"markdown"},"source":{"e339da8f":"# system stuff..\nfrom tqdm import tqdm\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# data manipulation\nimport numpy as np\nimport pandas as pd\n\n# library for visulaization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# sklearn\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\n\n# models\nfrom sklearn.ensemble import RandomForestClassifier\n\n# stats\nfrom scipy import stats","dda906a6":"train = pd.read_csv(\"..\/input\/tabular-playground-series-mar-2021\/train.csv\",index_col='id')\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-mar-2021\/test.csv\",index_col='id')\nsample_submission = pd.read_csv(\"..\/input\/tabular-playground-series-mar-2021\/sample_submission.csv\")","40d14c67":"# label encoder\nfor c in tqdm(train.columns):\n    if train[c].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(train[c].values) + list(test[c].values))\n        train[c] = lbl.transform(train[c].values)\n        test[c] = lbl.transform(test[c].values)","2f6f7346":"fig, (\n      (ax0, ax1, ax2),\n      (ax3, ax4, ax5),\n      (ax6, ax7, ax8),\n      (ax9, ax10, ax11),\n      (ax12, ax13, ax14),\n      (ax15, ax16, ax17),\n      (ax18, ax19, ax20)\n    ) = plt.subplots(nrows=7, ncols=3, sharey=True, figsize=(20, 10))\n\nplt.subplots_adjust(hspace=1.3) \n\nsns.boxplot(x=train.cat0, ax=ax0)\nsns.boxplot(x=train.cat1, ax=ax1)\nsns.boxplot(x=train.cat2, ax=ax2)\nsns.boxplot(x=train.cat3, ax=ax3)\nsns.boxplot(x=train.cat4, ax=ax4)\nsns.boxplot(x=train.cat5, ax=ax5)\nsns.boxplot(x=train.cat6, ax=ax6)\nsns.boxplot(x=train.cat7, ax=ax7)\nsns.boxplot(x=train.cat8, ax=ax8)\nsns.boxplot(x=train.cat9, ax=ax9)\nsns.boxplot(x=train.cat10, ax=ax10)\nsns.boxplot(x=train.cat11, ax=ax11)\nsns.boxplot(x=train.cat12, ax=ax12)\nsns.boxplot(x=train.cat13, ax=ax13)\nsns.boxplot(x=train.cat14, ax=ax14)\nsns.boxplot(x=train.cat15, ax=ax15)\nsns.boxplot(x=train.cat16, ax=ax16)\nsns.boxplot(x=train.cat17, ax=ax17)\nsns.boxplot(train.cat18,ax=ax18)\n\nplt.show()","cee78109":"# remove outlier using iqr score\nfor i in train.columns:\n    if i != 'target':\n        q1 = train[i].quantile(0.25)\n        q3 = train[i].quantile(0.75)\n        iqr = q3 - q1\n        train[i] = train[i][~((train[i]<(q1-1.5*iqr)) | (train[i]>(q3+1.5*iqr)))]","438da407":"# remove outlier using iqr score\nfor i in test.columns:\n    if i != 'target':\n        q1 = test[i].quantile(0.25)\n        q3 = test[i].quantile(0.75)\n        iqr = q3 - q1\n        test[i] = test[i][~((test[i]<(q1-1.5*iqr)) | (test[i]>(q3+1.5*iqr)))]","e4b2ad07":"fig, (\n      (ax0, ax1, ax2),\n      (ax3, ax4, ax5),\n      (ax6, ax7, ax8),\n      (ax9, ax10, ax11),\n      (ax12, ax13, ax14),\n      (ax15, ax16, ax17),\n      (ax18, ax19, ax20)\n    ) = plt.subplots(nrows=7, ncols=3, sharey=True, figsize=(20, 10))\n\nplt.subplots_adjust(hspace=1.3) \n\nsns.boxplot(x=train.cat0, ax=ax0)\nsns.boxplot(x=train.cat1, ax=ax1)\nsns.boxplot(x=train.cat2, ax=ax2)\nsns.boxplot(x=train.cat3, ax=ax3)\nsns.boxplot(x=train.cat4, ax=ax4)\nsns.boxplot(x=train.cat5, ax=ax5)\nsns.boxplot(x=train.cat6, ax=ax6)\nsns.boxplot(x=train.cat7, ax=ax7)\nsns.boxplot(x=train.cat8, ax=ax8)\nsns.boxplot(x=train.cat9, ax=ax9)\nsns.boxplot(x=train.cat10, ax=ax10)\nsns.boxplot(x=train.cat11, ax=ax11)\nsns.boxplot(x=train.cat12, ax=ax12)\nsns.boxplot(x=train.cat13, ax=ax13)\nsns.boxplot(x=train.cat14, ax=ax14)\nsns.boxplot(x=train.cat15, ax=ax15)\nsns.boxplot(x=train.cat16, ax=ax16)\nsns.boxplot(x=train.cat17, ax=ax17)\nsns.boxplot(train.cat18,ax=ax18)\n\nplt.show()","e564de5a":"train.isnull().sum()","8d133384":"test.isnull().sum()","44e63129":"# replace with mean\nfor i in train.columns:\n    if train[i].isnull().sum() > 0:\n        train[i].fillna(train[i].mean(), inplace=True)","b58cb0d5":"# replace with mean\nfor i in test.columns:\n    if test[i].isnull().sum() > 0:\n        test[i].fillna(test[i].mean(), inplace=True)","f62eb24b":"def wrangle(X):\n    \"\"\"\n    simple difference\n    ratio a\n    power\n    square root\n    polynomial a\n    polynomial b\n    polynomial c\n    \"\"\"\n    \n    X['diff_1'] = abs(X['cat0'] - X['cat1'])\n    X['diff_2'] = abs(X['cat2'] - X['cat3'])\n    X['diff_3'] = abs(X['cat4'] - X['cat5'])\n    X['diff_4'] = abs(X['cat6'] - X['cat7'])\n    X['diff_5'] = abs(X['cat8'] - X['cat9'])\n    X['diff_6'] = abs(X['cat10'] - X['cat11'])\n    X['diff_7'] = abs(X['cat12'] - X['cat13'])\n    X['diff_8'] = abs(X['cat14'] - X['cat15'])\n    X['diff_8'] = abs(X['cat16'] - X['cat17'])\n    X['diff_8'] = abs(X['cat18'] - X['cat0']) \n    X['diff_9'] = abs(X['cont0'] - X['cont1'])\n    X['diff_10'] = abs(X['cont2'] - X['cont3'])\n    X['diff_11'] = abs(X['cont4'] - X['cont5'])\n    X['diff_12'] = abs(X['cont6'] -X['cont7'])\n    X['diff_13'] = abs(X['cont8'] -X['cont9'])\n    X['diff_14'] = abs(X['cont10'] -X['cont0'])\n    \n    \n    X['rat_1'] = 1 \/ (X['cont0'] + X['cont1']**2)\n    X['rat_2'] = 1 \/ (X['cont2'] + X['cont3']**2)\n    X['rat_3'] = 1 \/ (X['cont4'] + X['cont5']**2)\n    X['rat_4'] = 1 \/ (X['cont6'] + X['cont7']**2)\n    X['rat_5'] = 1 \/ (X['cont8'] + X['cont9']**2)\n    X['rat_6'] = 1 \/ (X['cont10'] + X['cont7']**2)\n    \n    X['pow_0'] = X['cont0']**2\n    X['pow_1'] = X['cont1']**2\n    X['pow_2'] = X['cont2']**2\n    X['pow_3'] = X['cont3']**2\n    X['pow_4'] = X['cont4']**2\n    X['pow_5'] = X['cont5']**2\n    X['pow_6'] = X['cont6']**2\n    X['pow_7'] = X['cont7']**2\n    X['pow_8'] = X['cont8']**2\n    X['pow_9'] = X['cont9']**2\n    X['pow_10'] = X['cont10']**2\n    \n    X['sqrt_0'] = np.sqrt(X['cont0'])\n    X['sqrt_1'] = np.sqrt(X['cont1'])\n    X['sqrt_2'] = np.sqrt(X['cont2'])\n    X['sqrt_3'] = np.sqrt(X['cont3'])\n    X['sqrt_4'] = np.sqrt(X['cont4'])\n    X['sqrt_5'] = np.sqrt(X['cont5'])\n    X['sqrt_6'] = np.sqrt(X['cont6'])\n    X['sqrt_7'] = np.sqrt(X['cont7'])\n    X['sqrt_8'] = np.sqrt(X['cont8'])\n    X['sqrt_9'] = np.sqrt(X['cont9'])\n    X['sqrt_10'] = np.sqrt(X['cont10'])\n\n    X['poly_0'] = 1 + 5*X['cont0'] + 8*X['cont0']**2\n    X['poly_1'] = 1 + 5*X['cont1'] + 8*X['cont1']**2\n    X['poly_2'] = 1 + 5*X['cont2'] + 8*X['cont2']**2\n    X['poly_3'] = 1 + 5*X['cont3'] + 8*X['cont3']**2\n    X['poly_4'] = 1 + 5*X['cont4'] + 8*X['cont4']**2\n    X['poly_5'] = 1 + 5*X['cont5'] + 8*X['cont5']**2\n    X['poly_6'] = 1 + 5*X['cont6'] + 8*X['cont6']**2\n    X['poly_7'] = 1 + 5*X['cont7'] + 8*X['cont7']**2\n    X['poly_8'] = 1 + 5*X['cont8'] + 8*X['cont8']**2\n    X['poly_9'] = 1 + 5*X['cont9'] + 8*X['cont9']**2\n    X['poly_10'] =1 + 5*X['cont10'] + 8*X['cont10']**2\n    \n\n    X['poly_b_0'] = X['cont0'] \/ X['cont0']**2\n    X['poly_b_1'] = X['cont1'] \/ X['cont1']**2\n    X['poly_b_2'] = X['cont2'] \/ X['cont2']**2\n    X['poly_b_3'] = X['cont3'] \/ X['cont3']**2\n    X['poly_b_4'] = X['cont4'] \/ X['cont4']**2\n    X['poly_b_5'] = X['cont5'] \/ X['cont5']**2\n    X['poly_b_6'] = X['cont6'] \/ X['cont6']**2\n    X['poly_b_7'] = X['cont7'] \/ X['cont7']**2\n    X['poly_b_8'] = X['cont8'] \/ X['cont8']**2\n    X['poly_b_9'] = X['cont9'] \/ X['cont9']**2\n    X['poly_b_10'] = X['cont10'] \/ X['cont10']**2\n    \n\n    X['drat_1'] = 1 \/ (5*X['cont0'] + 8*X['cont1']**2)\n    X['drat_2'] = 1 \/ (5*X['cont2'] + 8*X['cont3']**2)\n    X['drat_3'] = 1 \/ (5*X['cont4'] + 8*X['cont5']**2)\n    X['drat_4'] = 1 \/ (5*X['cont6'] + 8*X['cont7']**2)\n    X['drat_5'] = 1 \/ (5*X['cont8'] + 8*X['cont9']**2)\n    X['drat_6'] = 1 \/ (5*X['cont10'] + 8*X['cont7']**2)\n    \n    return X","cc57955c":"# run the function\ntrain = wrangle(train)\ntest = wrangle(test)","20922827":"# remove train NaNs\nfor i in train.columns:\n    if train[i].isnull().sum() > 0:\n        train[i].fillna(train[i].mean(), inplace=True)","72b79ebf":"# remove test NaNs\nfor i in test.columns:\n    if test[i].isnull().sum() > 0:\n        test[i].fillna(test[i].mean(), inplace=True)","d45cee9f":"train.head(3)","a38adf19":"test.head(3)","1fd9202a":"print(\"Size of new train set:\", train.shape)\nprint(\"Size of new test set:\",test.shape)","2a5f11e3":"# \ud83e\uddee Outlier Detection and Removal using IQR score\n+ \u27a1\ufe0f [IQR WIKI](https:\/\/en.wikipedia.org\/wiki\/Interquartile_range)","40a30f7c":"### Now that we have run the wrangle function...\n+ We will have produced more NaNs that we must handle.","9a8f9a40":"# \u26f2 Feature engineering\n+ As someone with limited experience in ML\/AL feature engineering is something I am still learning about.\n+ I found the following article helpful when understanding how to creat new features \u27a1\ufe0f [ARTICLE](https:\/\/arxiv.org\/pdf\/1701.07852.pdf)\n![img](https:\/\/raw.githubusercontent.com\/andronikmk\/kaggle-notebooks\/main\/mar-tab-playground\/images\/ferandomforrest.png)\n+ Some of my features so far...\n    + Simple Difference\n        + $y = x_{1} - x_{2}$\n    + Ratio a\n        + $y = \\frac{1}{x + x^2}$\n    + Power\n        + $y = x^2$\n    + Square Root\n        + $y = \\sqrt{x} $\n    + Polynomial a\n        + $y = 1 + 5x + 8x^2$\n    + Polynomial b\n        + $y = \\frac{x}{x^2}$\n    + Polynomial c\n        + $y = \\frac{1}{5x+8x^2}$\n+ **Notes:** this is not the final list of features I will be using but it does seem like a good start. I will also add that depending on the algorithm you use certain features will improve on the score others might not.\ud83d\ude0a","3092ad63":"Outliers have been removed but some have been replaced with NaNs.","02533d3f":"# \ud83c\udf40 Outlier detection removal and feature engineering\n\n### **Purpose:**\n+ \ud83c\udfaf How to detect outliers\n+ \ud83d\udd25 Replace them with mean score\n+ \ud83d\udcd0 Feature engineering\n    + simple difference\n    + ratio a\n    + ratio b\n    + power\n    + sqrt\n    + polynomial a\n    + polynomial b\n    + polynomial c\n+ [Reference](https:\/\/arxiv.org\/pdf\/1701.07852.pdf) ","f65f1d2e":"### Conclusion:\n+ Features engineering and outlier detection is a topic that I'm new to and still need to get better at. I hope this notebook helped in some way. Please, leave a comment and upvote if you found this notebook usefull. Thanks for reading! \ud83c\udf89\ud83c\udf89\ud83c\udf89\ud83c\udf89"}}