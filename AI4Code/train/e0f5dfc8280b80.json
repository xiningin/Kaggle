{"cell_type":{"79602f49":"code","627deb37":"code","26012ace":"code","76fac2dd":"code","ed7729aa":"code","7325f483":"code","cee56ecc":"code","3a8f6be7":"code","9dad67bd":"code","7c6df322":"code","f664e79f":"code","5131cd58":"code","78850355":"code","c99c6201":"code","667b1d30":"code","959a9029":"code","5485f081":"code","3601bec4":"code","119d9c52":"code","1800557a":"code","d45e498b":"code","cbc5af62":"code","9b6fcf38":"markdown","104d809b":"markdown","ef69a6af":"markdown","7a82f82b":"markdown","7d9f2579":"markdown","d408476e":"markdown","507f22f1":"markdown","6f4e37ed":"markdown","a7932d88":"markdown"},"source":{"79602f49":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","627deb37":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom xgboost import XGBRegressor\nimport sklearn.metrics as metrics\nimport math","26012ace":"path=\"..\/input\/insurance\/insurance.csv\"\ndf=pd.read_csv(path)\ndf.head(10)","76fac2dd":"object_columns_df = df.select_dtypes(include=['object'])\nnumerical_columns_df =df.select_dtypes(exclude=['object'])","ed7729aa":"object_columns_df.head()","7325f483":"numerical_columns_df.head()","cee56ecc":"#Number of null values in each feature\nnull_counts = object_columns_df.isnull().sum()\nprint(\"Number of null values in each column:\\n{}\".format(null_counts))","3a8f6be7":"#Number of null values in each feature\nnull_counts = numerical_columns_df.isnull().sum()\nprint(\"Number of null values in each column:\\n{}\".format(null_counts))","9dad67bd":"df.region.value_counts()","7c6df322":"df.sex.value_counts()","f664e79f":"cop = df\ncop.head()","5131cd58":"bin_map ={\"female\":1,\"male\":2 ,\"southeast\":1,\"southwest\":2,\"northwest\":3,\"northeast\":4,\"yes\": 1,\"no\":2}\ncop['sex'] = cop['sex'].map(bin_map)\ncop['smoker'] = cop['smoker'].map(bin_map)\ncop[\"region\"]= cop[\"region\"].map(bin_map)\n           ","78850355":"cop.head()","c99c6201":"features = [\"age\",\"sex\",\"bmi\",\"children\",\"smoker\",\"region\"]\nX = cop[features]\ntarget = cop[\"charges\"]","667b1d30":"x_train,x_test,y_train,y_test = train_test_split(X,target,random_state=0)","959a9029":"\nforest_model = RandomForestRegressor(random_state=1)\nforest_model.fit(x_train, y_train)\npreds = forest_model.predict(x_test)\nprint(mean_absolute_error(y_test, preds))\nprint('Root Mean Square Error test = ' + str(math.sqrt(metrics.mean_squared_error(y_test, preds))))","5485f081":"xgb =XGBRegressor( booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=0.6, gamma=0,\n             importance_type='gain', learning_rate=0.01, max_delta_step=0,\n             max_depth=4, min_child_weight=1.5, n_estimators=2400,\n             n_jobs=1, nthread=None, objective='reg:linear',\n             reg_alpha=0.6, reg_lambda=0.6, scale_pos_weight=1, \n             silent=None, subsample=0.8, verbosity=1)","3601bec4":"#Fitting\nxgb.fit(x_train, y_train)\npredict1 = xgb.predict(x_test)\nprint('Root Mean Square Error test = ' + str(math.sqrt(metrics.mean_squared_error(y_test, predict1))))","119d9c52":"x_ax = range(len(y_test))\nplt.figure(figsize=(25,6))\nplt.plot(x_ax, y_test, label=\"original\")\nplt.plot(x_ax, predict1, label=\"predicted\")\nplt.title(\"Medical cost Prediction by XGB Regressor\")\nplt.legend()\nplt.show()","1800557a":"x_ax = range(len(y_test))\nplt.figure(figsize=(20,6))\nplt.plot(x_ax, y_test, label=\"original\")\nplt.plot(x_ax, preds, label=\"predicted\")\nplt.title(\"Medical cost Prediction by RandomForest\")\nplt.legend()\nplt.show()","d45e498b":"submission = pd.DataFrame({\n        \n        \"charges\": preds\n    })\nsubmission.to_csv('submission.csv', index=False)","cbc5af62":"submission.head(100)","9b6fcf38":"## Modeling","104d809b":"\n### I first tried to predict the target by RandomForest then I Used XBGM Regressor which gave less error.\n","ef69a6af":"* **Testing the Data**","7a82f82b":"* **Data Processing**\nWe will first select the categorical features and numerical features","7d9f2579":"**Creating a copy of main dataset**","d408476e":"**Dealing with Categorical features**\nconverting them into numerical feature by assinging 1 to N values","507f22f1":"**Calculating the missing values of each feature**","6f4e37ed":"* **Separating Train and Target**","a7932d88":" # Medical Cost Prediction"}}