{"cell_type":{"fbe96c0b":"code","8afd04f0":"code","ce9d1676":"code","f468f9a1":"code","6f50a175":"code","44db414a":"code","99e56477":"code","d5d57aad":"code","89d6315f":"code","e0f28116":"code","831d6678":"code","b5dcb76d":"code","1e2c1e22":"code","fc2ee352":"code","378e9369":"code","88394e74":"code","2a7ecefc":"code","3a797d49":"code","81fc7808":"code","8f47d69a":"code","348bb693":"code","dbdb75a6":"code","384f2bda":"code","0b8c99ad":"code","0df1f9f9":"code","47a57b45":"code","14de14ab":"code","ac2d2372":"code","a55e4fc6":"code","c17aae6a":"code","1f0c4245":"code","49cdbc80":"code","c43f9b52":"code","e3835ac8":"markdown","1b0dd55a":"markdown","a12951a3":"markdown","080f4988":"markdown","e43fe147":"markdown","aa7ed352":"markdown","0c49638e":"markdown","1039d28d":"markdown","6a3b83b7":"markdown","88f39a59":"markdown","28a73f43":"markdown","3bfcc6e3":"markdown","85d96a3c":"markdown","667c3a2e":"markdown","e86351b9":"markdown","3162589f":"markdown","549f299c":"markdown"},"source":{"fbe96c0b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom collections import Counter\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom xgboost import XGBRegressor\n\nimport warnings\nwarnings.filterwarnings('ignore')","8afd04f0":"df = pd.read_csv('..\/input\/insurance\/insurance.csv')","ce9d1676":"df.shape","f468f9a1":"df.head()","6f50a175":"df.info()","44db414a":"df.describe(percentiles=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.95])","99e56477":"insights = []\no = 1\nfor i in df.columns:\n    if df[i].nunique() < 20:\n        plt.figure(figsize=(15,5))\n        plt.title(f'Distribution based on {i}')\n        c = Counter(df[i])\n        sns.countplot(df[i],palette='coolwarm')\n        plt.figtext(0.12, 0.01, 'Conclusion', fontname = 'monospace', size = 12, color = '#dd4124')\n        plt.figtext(0.12, -0.14, f\"{o}) Most of the customer's {i} = {c.most_common(1)[0][0]}\",fontname = 'monospace', size = 11, color = '#dd0120')\n        insights.append((f\"**{o}) Most of the customer's {i} = {c.most_common(1)[0][0]}**\\n\\n\"))\n        o+=1","d5d57aad":"smokercharges = df.groupby('smoker')['charges'].sum()","89d6315f":"fig = px.bar(x = [i for i in smokercharges.index], y = [i for i in smokercharges],color =[i for i in smokercharges.index],template='plotly_dark')\nfig.update_layout(xaxis_title = 'Smoker', yaxis_title = \"Charges\",title = \"Distribution Based on Smoker and Total Charges\")","e0f28116":"df['Age_Group'] = ['18 - 29' if i<30 else '30 - 49' if i>=30 and i < 50 else '50 +' if i > 50 and i <60 else 'Over 60' for i in df.age]","831d6678":"\nplot_df = df.groupby(['Age_Group','smoker'])['charges'].mean()\nplot_df = plot_df.rename('charges').reset_index().sort_values('smoker', ascending=True)\nfig = px.bar(plot_df, x='Age_Group', y='charges', color='smoker', height=500, text='charges', \n             barmode='group', color_discrete_sequence=['#B8A','#B77'],\n             title=\"Average Insurance Costs by Age and Smoking Status\",template= 'plotly_dark')\nfig.update_traces(texttemplate='$%{text:,.0f}', textposition='outside', \n                  marker_line=dict(width=1, color='#FFFFFF'))\nfig.show()","b5dcb76d":"df.head()","1e2c1e22":"df['BMI'] = ['15-24' if i < 25 else '25-34' if i >= 25 and i < 35 else '35-44' if i>=35 and i < 45 else '45-50' if i>=45 and i<50 else '50+' for i in df.bmi]","fc2ee352":"bmidf = df.groupby(['BMI','smoker'])['charges'].mean()","378e9369":"bmidf = bmidf.rename('Charges').reset_index().sort_values('smoker',ascending=True)","88394e74":"fig = px.bar(bmidf,x = 'BMI',y = 'Charges',color = 'smoker',barmode = 'group',text = 'Charges', color_discrete_sequence=['#B8A','#B77'],title = \"Average Insurance Costs by BMI and Smoking Status\",template= 'plotly_dark')\nfig.update_traces(texttemplate = '$%{text:,.0f}',textposition='outside',marker_line=dict(width=1, color='#FFFFFF'))","2a7ecefc":"regiondf = df.groupby(['region','smoker'])['charges'].mean()","3a797d49":"regiondf = regiondf.rename('Charges').reset_index().sort_values('smoker',ascending = True)","81fc7808":"fig = px.bar(regiondf,x = 'region',y = 'Charges',color = 'smoker',barmode = 'group',text = 'Charges',color_discrete_sequence=['#B8A','#B77'],title = 'Average Insurance Cost by Region and Smoker',template= 'plotly_dark')\nfig.update_traces(texttemplate = '$%{text:,.0f}',textposition='outside',marker_line=dict(width=1, color='#FFFFFF'))","8f47d69a":"sns.pairplot(df)","348bb693":"df.drop(['Age_Group','BMI'],axis = 1,inplace=True)","dbdb75a6":"for i in df.columns:\n    if df[i].dtypes !='O':\n        sns.boxplot(df[i])\n        plt.show()","384f2bda":"for i in df.columns:\n    if df[i].dtype !='O':\n        df[i] = np.clip(df[i],df[i].quantile(0.1),df[i].quantile(0.95))","0b8c99ad":"df.describe(percentiles=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.95])","0df1f9f9":"finaldf = pd.get_dummies(df,drop_first=True)\nfinaldf2 = pd.get_dummies(df,drop_first=False) #for heatmap representation","47a57b45":"x = finaldf.drop('charges',axis=1)\ny = finaldf.charges\n","14de14ab":"plt.figure(figsize= (15,10))\nsns.heatmap(finaldf2.corr(),cmap='coolwarm',annot = True)\nplt.show()","ac2d2372":"#Lets define every model with multiple parameters for the selection of best model with best parameters.\nmodel_params = {\n    'XGB':{\n        'model':XGBRegressor(n_jobs = -1,tree_method = 'gpu_hist'),\n        'params':{\n            'n_estimators':[50,100,200,300,400],   \n            \n        }\n    },\n    'RF':{\n        'model':RandomForestRegressor(n_jobs = -1),\n        'params':{\n            'n_estimators':[50,100],\n            'criterion' : ['mse',\"mae\"]\n            \n        }\n    },\n    'DT':{\n        'model':DecisionTreeRegressor(),\n        'params':{\n            'criterion' : [\"friedman_mse\",'mse','mae'],\n            'splitter':[\"best\", \"random\"]\n        }\n    }\n}","a55e4fc6":"scores = [] #List for all the best scores\nfor model_name, modelp in model_params.items():\n    clf = GridSearchCV(modelp['model'],modelp['params'],cv = 5,return_train_score=False)\n    clf.fit(x,y)\n    scores.append({\n        'model': model_name,\n        'best_score': clf.best_score_,\n        'best_params': clf.best_params_\n    })\nscoreddf = pd.DataFrame(scores,columns=['model','best_score','best_params'])\nscoreddf","c17aae6a":"xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.2,random_state=444)","1f0c4245":"rf = RandomForestRegressor(n_jobs = -1,n_estimators = 50,criterion = \"mae\")","49cdbc80":"rf.fit(xtrain,ytrain)\nypred = rf.predict(xtest)","c43f9b52":"print(f'Accuracy of Model : {round(r2_score(ytest,ypred),2)*100}%')\n","e3835ac8":"## Distribution based on Average Insurance Costs by Age and Smoking Status","1b0dd55a":"***From the above graph we can say that due to increasing age and If the person is a Smoker than charges are Increasing***","a12951a3":"## Correlation Heatmap","080f4988":"**As the distribution of Smoker_Yes was very low as compared to Smoker_No, Still the charges are not substantially differing from each other, Which means people who all are smoking are having higher insurance charges.**","e43fe147":"## BMI and Smoker ","aa7ed352":"## Train - Test Split","0c49638e":"## Distribution based on Average Insurance Costs by Region and Smoking Status","1039d28d":"## Model Building","6a3b83b7":"## Selecting best model","88f39a59":"## Feature Engineering","28a73f43":"## Distribution Based on Smoker and Total Charges","3bfcc6e3":"## EDA","85d96a3c":"***Some of the important Features: 1) AGE 2) BMI 3) Smoker_yes 4) Region_southeast (These were positively Correlated Features)*** \n\n***Smoking Status was the most important feature for predicting Charges***","667c3a2e":"## Capping and Flooring for Outlier Treatment","e86351b9":"## One-Hot Encoding","3162589f":"## If this notebook helped you in getting meaningful Insights, Do Upvote!","549f299c":"***Best Model --> Random Forest || Best Parameters --> 'criterion': 'absolute_error', 'n_estimators': 100***"}}