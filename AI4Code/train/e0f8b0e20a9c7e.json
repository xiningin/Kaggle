{"cell_type":{"9eb4b66a":"code","e5df9a04":"code","e90b69c8":"code","f9d8f761":"code","51d3f02b":"code","a4e58f1e":"code","5daf7cdf":"code","6221e798":"code","eb04bff1":"code","135bb266":"code","4c6cb1c8":"code","c8a5c6db":"code","ff985371":"code","74448371":"code","2c2c523a":"code","e75e5aba":"code","ec953363":"code","90e69201":"code","8067be80":"code","0e73b668":"code","0fca4cdb":"code","e65a0da4":"code","313e577b":"code","1462e744":"code","fa8cdaa0":"code","59942dc1":"code","5fcfd301":"code","1bf76b85":"code","3067bca1":"code","0d0a3977":"code","386be255":"code","1797490f":"code","b393d80f":"code","55c70f85":"code","6c8c864f":"code","59107c76":"code","ed9f2520":"code","abb367d5":"code","24c9ef62":"code","46ec9db7":"code","60821413":"code","f218766d":"code","6b4674a2":"code","3e79fadb":"code","fa3644d7":"code","95dcd0c1":"code","b51cac04":"code","08af08f7":"code","6d375575":"code","245ff364":"code","f7103a5f":"code","9418b5a6":"code","4bfeef6c":"code","70cec827":"code","e52dd06a":"code","20721172":"code","1d6256ad":"code","da3c04cb":"code","98c55073":"code","b3fe0886":"code","5c074a20":"code","9cdc00c6":"code","d27d35c1":"code","402b4004":"code","8b826dfc":"code","8d24909e":"code","60c4e53f":"code","e0708e33":"code","c67540c9":"code","57558eb1":"code","7d1b0c1a":"code","69b99c5e":"code","890660a6":"code","f41bea68":"code","8b9495ef":"code","022c6ee0":"code","41918850":"code","61f44576":"code","80405e03":"code","2e1eb478":"code","23f01085":"code","4e3c8b69":"code","299e773f":"code","7fab9f65":"markdown","6ca829b4":"markdown","6fe6f151":"markdown","03728eb2":"markdown","a762f404":"markdown","909a2d14":"markdown","19c4c419":"markdown","891c9839":"markdown","0133beca":"markdown","8ca5751e":"markdown","70e9d50b":"markdown","e4765f0d":"markdown","449fba2a":"markdown","c07a752d":"markdown","c1c11cde":"markdown","0dbaf5ef":"markdown","e43d204d":"markdown","2bcbcb24":"markdown","06d0bf29":"markdown","497837f5":"markdown","5a71175d":"markdown","2c463a04":"markdown","3eee4f2d":"markdown","b3fa2e03":"markdown","4a53a6bb":"markdown"},"source":{"9eb4b66a":"# \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\nimport pandas as pd\nimport numpy as np\ndf = pd.read_csv('..\/input\/customer-analytics\/Train.csv')\ndf.head()","e5df9a04":"# shape\ndf.shape","e90b69c8":"# \uacb0\uce21\uac12\ndf.isnull().sum()","f9d8f761":"# \ub370\uc774\ud130\ud0c0\uc785\n# \ubc94\uc8fc\ud615: ['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender']\ndf.info()   ","51d3f02b":"# \uae30\ucd08\ud1b5\uacc4\ndf.describe()","a4e58f1e":"df.describe(include='object')","5daf7cdf":"# \ud0c0\uac9f \ubcc0\uc218: Reached.on.time\ny_train = df['Reached.on.Time_Y.N']\nX_train = df.drop(['Reached.on.Time_Y.N'], axis=1)  # \ud6c8\ub828\ub370\uc774\ud130\uc5d0 \ubd88\ud544\uc694\ud55c id \uceec\ub7fc \uc0ad\uc81c\ny_train","6221e798":"X_train","eb04bff1":"print(type(y_train))\nprint(y_train.value_counts())","135bb266":"# y_\ud615\ubcc0\ud658 \ud83d\udca5\ny_train = y_train.map(lambda x: int(x))","4c6cb1c8":"print(type(y_train))\nprint(y_train.value_counts())","c8a5c6db":"X_train.info()","ff985371":"type(X_train)","74448371":"# \ubc94\uc8fc\ud615: ['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender']\n# \ubc94\uc8fc\ud615 \ubcc0\uc218\uc5d0 \uc5b4\ub5a4 \uac12\uc774 \uc788\ub294\uc9c0 \ud655\uc778\ncat_features = ['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender']\nfor cat in cat_features:\n    print(cat, ':', set(X_train[cat]))","2c2c523a":"# \ubc29\ubc95 1>> mapping\n\n# 'Warehouse_block'\n# def wb_map(x):\n#     if x == 'A' : return 1\n#     elif x == 'B' : return 2\n#     elif x == 'C' : return 3\n#     elif x == 'D' : return 4\n#     else: return 5\n\n# #'Mode_of_Shipment'\n# def sp_map(x):\n#     if x == 'Flight' : return 1\n#     elif x == 'Ship' : return 2\n#     else: return 3\n\n# # 'Product_importance'\n# def imp_map(x):\n#     if x == 'low' : return 1\n#     elif x == 'high' : return 2\n#     else: return 3\n\n# # 'Gender'\n# def sex_map(x):\n#     if x == 'F' : return 1\n#     else: return 0\n\n# \ud568\uc218 \uc801\uc6a9\n# X_train['Warehouse_block'] = X_train['Warehouse_block'].map(wb_map)\n# X_train['Mode_of_Shipment'] = X_train['Mode_of_Shipment'].map(sp_map)\n# X_train['Product_importance'] = X_train['Product_importance'].map(imp_map)\n# X_train['Gender'] = X_train['Gender'].map(sex_map)\n\n# X_train","e75e5aba":"# \ubaa8\ub4e0 \ubcc0\uc218\uac00 \uc218\uce58\ud615\uc73c\ub85c \ubcc0\ud658\ub41c \uac83\uc744 \ud655\uc778\nX_train.info()","ec953363":"# \ubc29\ubc95 2>> Label Encoder\nfrom sklearn.preprocessing import LabelEncoder\ncat_features = ['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender']\nfor cat in cat_features:\n    le = LabelEncoder()\n    X_train[cat] = le.fit_transform(X_train[cat])\nX_train","90e69201":"X_train.info()","8067be80":"X_train.describe()","0e73b668":"X_train.head()","0fca4cdb":"'''\n[ \uc815\uaddc\ud654(Scaling) \ubc29\ubc95 ]\n1. StandardScaler : \ud3c9\uade0 0, \ud45c\uc900\ud3b8\ucc28 1\ub85c \ubcc0\ud658\n2. MinMaxScaler : \ucd5c\uc18c\uac12 0, \ucd5c\ub300\uac12 1\uc774 \ub418\ub3c4\ub85d \ubcc0\ud658\n3. RobustScaler: \uc911\uc559\uac12(median) 0, IQR(interquartile range) 1\uc774 \ub418\ub3c4\ub85d \ubcc0\ud658\n'''\n\n# \ub2e8\uc704\ub97c \ub9de\ucdb0\uc8fc\uae30 \uc704\ud574 \uc544\ub798 \uceec\ub7fc\uc744 StandardScaling\n# ['Cost_of_the_Product', 'Discount_offered', 'Weight_in_gms']\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nfeats = ['Cost_of_the_Product', 'Discount_offered', 'Weight_in_gms']\nfor ft in feats:\n    X_train[ft] = scaler.fit_transform(X_train[[ft]]).flatten()\n\nX_train.head()","e65a0da4":"from sklearn.model_selection import train_test_split, KFold  # \ub370\uc774\ud130 \ubd84\ud560, KFold\nfrom sklearn.linear_model import LogisticRegression          # 1. \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0 => \uc815\uaddc\ud654 \ud544\uc218(StandardScaler)\nfrom sklearn.tree import DecisionTreeClassifier              # 2. \uc758\uc0ac\uacb0\uc815\ub098\ubb34 - \ubd84\ub958\nfrom sklearn.ensemble import RandomForestClassifier          # 3. \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8 - \ubd84\ub958\nimport xgboost as xgb                                        # 4. Xgboost\n# from sklearn.svm import SVC                                  # 5. \uc11c\ud3ec\ud2b8 \ubca1\ud130 \uba38\uc2e0\n# from sklearn.neighbors import KNeighborsClassifier           # 6. K-\ucd5c\uadfc\uc811 \uc774\uc6c3 \ubd84\ub958\nfrom sklearn.metrics import roc_curve, roc_auc_score, auc    # roc_auc_score\nfrom datetime import datetime                                \n\n# help\n# print(help(LogisticRegression))\n# print(help(RandomForestClassifier))\n\n# \ubaa8\ub378 \uc815\uc758\n# 1. LogisticRegression\nlr = LogisticRegression(n_jobs = -1, random_state = 42, max_iter = 3000)\n\n# 2. DecisionTreeClassifier\ndtree = DecisionTreeClassifier(max_depth=9, min_samples_split=5, min_samples_leaf=3, \n                               max_features='auto', random_state=42)\n\n# 3. RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=1000, max_depth=9, min_samples_split=5, min_samples_leaf=3, \n                               max_features='auto', random_state=42, n_jobs = -1)\n\n# 4. xgboost.XGBClassifier\nxgb_model = xgb.XGBClassifier(n_estimators=1000, max_depth=9, n_jobs=-1, random_state=42, gamma=0.7,\n                              learning_rate=0.05, eval_metric='logloss', use_label_encoder=False)\n\n# # 5. SVC\n# svc = SVC()\n\n# # 6. KNeighborsClassifier\n# knc = KNeighborsClassifier()\n","313e577b":"# \ub370\uc774\ud130 \ubd84\ud560 ( train : valid = 2 : 8 )\n# print(help(train_test_split))\ntrain_x, val_x, train_y, val_y = train_test_split(X_train, y_train, test_size=0.2, \n                                                  shuffle=True, random_state=42)\nprint(X_train.shape, y_train.shape)\nprint(train_x.shape, val_x.shape, train_y.shape, val_y.shape)","1462e744":"rf.__class__.__name__","fa8cdaa0":"#\ubaa8\ub378 \ud559\uc2b5 (.fit)\nmodels = [lr, dtree, rf, xgb_model]\nfor m in models:\n    start = datetime.now()    # \ud559\uc2b5 \uc2dc\uc791\uc2dc\uac04\n    m.fit(train_x, train_y)   # \ubaa8\ub378 \ud559\uc2b5\n    end = datetime.now()      # \ud559\uc2b5 \uc885\ub8cc\uc2dc\uac04\n    \n    # \uc608\uce21 (.predict_proba())\n    # roc_auc_score\ub97c \ud655\uc778\ud558\uae30 \uc704\ud574, predict_proba (\ud655\ub960)\uc774 \ud544\uc694\ud568\n    pred_y = m.predict_proba(val_x)[:,1]\n    \n    # \ud3c9\uac00\n    name = m.__class__.__name__         # \ubaa8\ub378\uba85 ('LogisticRegression','DecisionTreeClassifier',..)\n    auc = roc_auc_score(val_y, pred_y)  # \uc608\uce21\uac12\uc73c\ub85c roc_auc_score \ud655\uc778\n    time = end - start                  # \ud559\uc2b5 \uc18c\uc694\uc2dc\uac04\n    print('Model {0} - AUC score: {1}, Training time: {2}'.format(name, auc, time))","59942dc1":"print(final_pred_proba)","5fcfd301":"# [\uc2dc\ud5d8\uc6a9 \ub370\uc774\ud130\uc14b \ub9cc\ub4e4\uae30]\n# (\ub2e8, y_test \ub370\uc774\ud130\ub294 \ud65c\uc6a9\ud574\uc11c\ub294 \uc548\ub428)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/customer-analytics\/Train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, \n                                                  target='Reached.on.Time_Y.N', \n                                                  id_name='ID')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","1bf76b85":"# \ub370\uc774\ud130 \ud655\uc778\nprint(X_train.shape)\nX_train.head()","3067bca1":"y_train","0d0a3977":"# \ub808\uc774\ube14(\ud0c0\uac9f) \ud655\uc778\ny_train['Reached.on.Time_Y.N'].value_counts()","386be255":"# X_train \uacb0\uce21\uce58 \ud655\uc778\nX_train.isnull().sum()","1797490f":"# X_test \uacb0\uce21\uce58 \ud655\uc778\nX_test.isnull().sum()","b393d80f":"# \ub370\uc774\ud130 \ud0c0\uc785 \ud655\uc778\nX_train.info()","55c70f85":"# object \ud0c0\uc785 \uceec\ub7fc, \uace0\uc720\uac12 \uac1c\uc218 \ud655\uc778\nX_train[['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender']].nunique()","6c8c864f":"# object \uceec\ub7fc \uc0ad\uc81c (\ub610\ub294 \ub77c\ubca8\uc778\ucf54\ub529, \uc6d0\ud56b\uc778\ucf54\ub529)\nX_train = X_train.drop(['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender'], axis=1)\nX_test = X_test.drop(['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender'], axis=1)\nX_train","59107c76":"from sklearn.linear_model import LogisticRegression  # 1. \ub85c\uc9c0\uc2a4\ud2f1\ud68c\uadc0\nfrom sklearn.neighbors import KNeighborsClassifier   # 2. K-\uc774\uc6c3 \ubd84\ub958\nfrom sklearn.svm import SVC                          # 3. \uc11c\ud3ec\ud2b8 \ubca1\ud130 \uba38\uc2e0\nfrom sklearn.tree import DecisionTreeClassifier      # 4. \uc758\uc0ac\uacb0\uc815\ub098\ubb34 - \ubd84\ub958\nfrom sklearn.ensemble import RandomForestClassifier  # 5. \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8 - \ubd84\ub958\nfrom xgboost import XGBClassifier                    # 6. XB \ubd80\uc2a4\ud2b8 - \ubd84\ub958","ed9f2520":"from sklearn.model_selection import train_test_split\nX_tr,X_val,y_tr,y_val = train_test_split(X_train,y_train['Reached.on.Time_Y.N'],test_size=0.2,random_state=2021)","abb367d5":"model = LogisticRegression()\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","24c9ef62":"model = KNeighborsClassifier()\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","46ec9db7":"model = SVC()\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","60821413":"model = DecisionTreeClassifier()\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","f218766d":"model = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","6b4674a2":"model = XGBClassifier(eval_metric='mlogloss', use_label_encoder=False)\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","3e79fadb":"model = KNeighborsClassifier()\nmodel.fit(X_train, y_train['Reached.on.Time_Y.N'])\npred = model.predict(X_test)\npred","fa3644d7":"submission = pd.DataFrame({\n        \"ID\": y_test[\"ID\"],\n        \"Reached.on.Time_Y.N\": pred\n    })","95dcd0c1":"submission.head()","b51cac04":"submission.to_csv('submission.csv', index=False)  ## \uc218\ud5d8\ubc88\ud638.csv","08af08f7":"# \uc870\uae08 \ub5a8\uc5b4\uc9c4 \uc131\ub2a5\uc744 \ubcf4\uc5ec\uc8fc\uace0 \uc788\uc74c\nround(model.score(X_test, y_test['Reached.on.Time_Y.N']) * 100, 2)","6d375575":"import pandas as pd\ndf = pd.read_csv('..\/input\/customer-analytics\/Train.csv')\ndf","245ff364":"df.shape","f7103a5f":"# [\uc2dc\ud5d8\uc6a9 \ub370\uc774\ud130\uc14b \ub9cc\ub4e4\uae30]\n# y_test \ub370\uc774\ud130\ub294 \ud65c\uc694\ud574\uc11c\ub294 \uc548\ub428\n\nfrom sklearn.model_selection import train_test_split\n\n# 1. df \ub97c (train: test = 8 : 2) \ub85c \ubd84\ud560  => X_train, X_test\nX_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\nprint(X_train.shape, X_test.shape)","9418b5a6":"# 2. \ud559\uc2b5\uc6a9 \ub77c\ubca8 \ub370\uc774\ud130 \uc0dd\uc131  => y_train\n#### X_train\uc5d0\uc11c 'ID' , 'Reached.on.Time_Y.N' \uceec\ub7fc\ub9cc \uac00\uc838\uc628 \ub370\uc774\ud130\uc14b\ny_train = X_train[['ID', 'Reached.on.Time_Y.N' ]]\ny_train.shape","4bfeef6c":"# 3. X_train\uc5d0\uc11c \ud559\uc2b5\uc5d0 \ubd88\ud544\uc694\ud55c 'ID' , 'Reached.on.Time_Y.N' \uceec\ub7fc \uc0ad\uc81c\nX_train = X_train.drop(['ID', 'Reached.on.Time_Y.N'], axis=1)\nX_train.shape","70cec827":"# 4. \ud6c8\ub828\uc6a9 \ub77c\ubca8 \ub370\uc774\ud130 \uc0dd\uc131 => y_test\ny_test = X_test[['ID', 'Reached.on.Time_Y.N']]\ny_test.shape","e52dd06a":"# 5. X_test\uc5d0\uc11c \ud559\uc2b5\uc5d0 \ubd88\ud544\uc694\ud55c 'ID' , 'Reached.on.Time_Y.N' \uceec\ub7fc \uc0ad\uc81c\nX_test = X_test.drop(['ID', 'Reached.on.Time_Y.N'], axis=1)\nX_test.shape","20721172":"# 6. 4\uac00\uc9c0 \ub370\uc774\ud130\uc14b shape \ud655\uc778\nprint(X_train.shape, y_train.shape, X_test.shape, y_test.shape)\nprint(df.shape)","1d6256ad":"# \ub370\uc774\ud130 \ud655\uc778\nprint(X_train.shape)\nX_train.head()","da3c04cb":"print(y_train.shape)\ny_train.head()","98c55073":"# label \ud655\uc778\ny_train['Reached.on.Time_Y.N'].value_counts()","b3fe0886":"# \uacb0\uce21\uce58 \ud655\uc778\n# X_train.isnull().sum()  # >> Not null\n# X_test.isnull().sum()   # >> Not null\n# y_train.isnull().sum()  # >> Not null\n# y_test.isnull().sum()   # >> Not null","5c074a20":"# \ub370\uc774\ud130 \ud0c0\uc785 \ud655\uc778\n# >> \ubc94\uc8fc\ud615: 'Warehouse_block' ,'Mode_of_Shipment','Product_importance','Gender'\nX_train.info()  ","9cdc00c6":"# >> \ubc94\uc8fc\ud615: 'Warehouse_block' ,'Mode_of_Shipment','Product_importance','Gender'\nX_test.info()","d27d35c1":"# \ubc94\uc8fc\ud615 \uceec\ub7fc\uc758 \uace0\uc720\uac12 \"\uac1c\uc218\" \ud655\uc778 \ud83d\udca5\nX_train[['Warehouse_block' ,'Mode_of_Shipment','Product_importance','Gender']].nunique()","402b4004":"# \ubc94\uc8fc\ud615 \uceec\ub7fc\uc758 \"\uace0\uc720\uac12\" \ud655\uc778 \ud83d\udca5\ncols = ['Warehouse_block' ,'Mode_of_Shipment','Product_importance','Gender']\nfor col in cols:\n    print(col, X_train[col].unique())","8b826dfc":"X_train.info()","8d24909e":"X_test.info()","60c4e53f":"# \ubc94\uc8fc\ud615 \uceec\ub7fc \ucc98\ub9ac\n# (\uc0ad\uc81c \ub610\ub294 LabelEncoder \ub610\ub294 \uc6d0\ud56b\uc778\ucf54\ub529)\n# ## 1. Label Encoder\n# from sklearn.preprocessing import LabelEncoder\n# le = LabelEncoder()\n# cols = ['Warehouse_block' ,'Mode_of_Shipment','Product_importance','Gender']\n# for col in cols:\n#     X_train[col] = le.fit_transform(X_train[col])\n#     X_test[col] = le.fit_transform(X_test[col])\n    \n# print(X_train.info(), X_test.info())","e0708e33":"## 2. object \uceec\ub7fc \uc0ad\uc81c (\ub610\ub294 \ub77c\ubca8\uc778\ucf54\ub529, \uc6d0\ud56b\uc778\ucf54\ub529)\nX_train = X_train.drop(['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender'], axis=1)\nX_test = X_test.drop(['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender'], axis=1)\nX_train\nprint(X_train.info(), X_test.info())","c67540c9":"##### \uc5ec\ub7ec\uac00\uc9c0 \ubaa8\ub378 \ud14c\uc2a4\ud2b8 #####\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier","57558eb1":"# \ud559\uc2b5\uc6a9 \ub370\uc774\ud130(X_train, Y_train)\ub97c \ud559\uc2b5&\uac80\uc99d\uc6a9\uc73c\ub85c \ubd84\ud560 (8:2)\n# >> X_tr, X_val, y_tr, y_val\nfrom sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train['Reached.on.Time_Y.N'],\n                                            test_size=0.2, random_state=2021)","7d1b0c1a":"print(X_train.shape, y_train.shape)\nprint(X_tr.shape, X_val.shape, y_tr.shape, y_val.shape)","69b99c5e":"import warnings\nwarnings.filterwarnings('ignore')","890660a6":"# 1. LogisticRegression                               =>63.86\n# \ubc94\uc8fc\ud615 \ub370\uc774\ud130 \uceec\ub7fc\uc744 LableEncoder \ucc98\ub9ac\ud558\uba74 \uc5d0\ub7ec\ub0a8\n# \ubc94\uc8fc\ud615 \ub370\uc774\ud130 \uceec\ub7fc\uc744 \uc0ad\uc81c\ud558\uba74 \uad1c\uce08!.. (\uc65c \uc77c\uae4c..\u2753\u2754)\n\n### \ubaa8\ub378\uc815\uc758\nmodel = LogisticRegression()\n### \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n### \uac80\uc99d\nround(model.score(X_val, y_val) * 100, 2)","f41bea68":"# 2. KNeighborsClassifier                             => 65.97\n### \ubaa8\ub378\uc815\uc758\nmodel = KNeighborsClassifier()\n### \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n### \uac80\uc99d\nround(model.score(X_val, y_val)*100,2)","8b9495ef":"# 3. SVC                                               => 65.4\n### \ubaa8\ub378\uc815\uc758\nmodel = SVC()\n### \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n### \uac80\uc99d\nround(model.score(X_val, y_val)*100, 2)","022c6ee0":"# 4. DecisionTreeClassifier                              => 64.49\n### \ubaa8\ub378\uc815\uc758 \nmodel = DecisionTreeClassifier()\n### \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n### \uac80\uc99d\nround(model.score(X_val, y_val)*100, 2)","41918850":"# 5. RandomForestClassifier                              => 65.34\n### \ubaa8\ub378\uc815\uc758\nmodel = RandomForestClassifier()\n### \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n### \uac80\uc99d\nround(model.score(X_val, y_val)*100, 2)","61f44576":"# 6. XGBClassifier                                        => 65.51\n### \ubaa8\ub378\uc815\uc758\nmodel = XGBClassifier()\n### \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n### \uac80\uc99d\nround(model.score(X_val, y_val)*100, 2)","80405e03":"# \ubaa8\ub378\uc815\uc758\nfinal_model = KNeighborsClassifier()\n\n# \ud559\uc2b5\nfinal_model.fit(X_train, y_train['Reached.on.Time_Y.N'])\n\n# \uc608\uce21\npred = model.predict(X_test)\n\nprint(pred)","2e1eb478":"y_test","23f01085":"# \ub2f5\uc548 \ub370\uc774\ud130\uc14b \ub9cc\ub4e4\uae30\noutput = pd.DataFrame({ 'ID': y_test['ID'],\n                        'Reached.on.Time_Y.N': pred })\noutput","4e3c8b69":"# csv \uc0dd\uc131\noutput.to_csv('20211203.csv', index=False)\n\n# csv \ud655\uc778\npd.read_csv('20211203.csv')","299e773f":"round(final_model.score(X_test, y_test['Reached.on.Time_Y.N'])*100, 2)","7fab9f65":"### \ubc94\uc8fc\ud615 \ubcc0\uc218\ub97c \uc218\uce58\ud615\uc73c\ub85c \ubcc0\ud658","6ca829b4":"## csv \uc0dd\uc131 \ubc0f \ud655\uc778","6fe6f151":"## \ubaa8\ub378\ub9c1 & \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & \uc559\uc0c1\ube14","03728eb2":"## \ud83d\udca5\ud83d\udca5\ud83d\udca5 \ud480\uc774 (Baseline)\ud83d\udca5\ud83d\udca5\ud83d\udca5 \n- \uc544\ub798\ucf54\ub4dc\ub294 \uc815\ub2f5\uc774 \uc544\ub2cc \ud480\uc774 \uc608\uc2dc\uc785\ub2c8\ub2e4.","a762f404":"### \uac01 \ubaa8\ub378 \uc131\ub2a5 \uac80\uc99d","909a2d14":"## \ubaa8\ub378 \uc120\ud0dd \ubc0f \uacb0\uacfc \ucd9c\ub825","19c4c419":"## EDA","891c9839":"## \uacb0\uacfc \ucc44\uc810","0133beca":"## \uacb0\uacfc \uccb4\uc810 (\uc218\ud5d8\uc790\ub294 \uc54c \uc218 \uc5c6\ub294 \ubd80\ubd84\uc784)","8ca5751e":"## \ub370\uc774\ud130 \uc804\ucc98\ub9ac","70e9d50b":"## [\ucc38\uace0]\uc791\uc5c5\ud6152 \ubb38\uad6c\n- \ucd9c\ub825\uc744 \uc6d0\ud558\uc2e4 \uacbd\uc6b0 print() \ud568\uc218 \ud65c\uc6a9\n- \uc608\uc2dc) print(df.head())\n- getcwd(), chdir() \ub4f1 \uc791\uc5c5 \ud3f4\ub354 \uc124\uc815 \ubd88\ud544\uc694\n- \ud30c\uc77c \uacbd\ub85c \uc0c1 \ub0b4\ubd80 \ub4dc\ub77c\uc774\ube0c \uacbd\ub85c(C: \ub4f1) \uc811\uadfc \ubd88\uac00\n\n### \ub370\uc774\ud130 \ud30c\uc77c \uc77d\uae30 \uc608\uc81c\n- import pandas as pd\n- X_test = pd.read_csv(\"data\/X_test.csv\")\n- X_train = pd.read_csv(\"data\/X_train.csv\")\n- y_train = pd.read_csv(\"data\/y_train.csv\")\n\n### \uc0ac\uc6a9\uc790 \ucf54\ub529\n\n### \ub2f5\uc548 \uc81c\ucd9c \ucc38\uace0\n- \uc544\ub798 \ucf54\ub4dc \uc608\uce21\ubcc0\uc218\uc640 \uc218\ud5d8\ubc88\ud638\ub97c \uac1c\uc778\ubcc4\ub85c \ubcc0\uacbd\ud558\uc5ec \ud65c\uc6a9\n- pd.DataFrame({'cust_id': X_test.cust_id, 'gender': pred}).to_csv('003000000.csv', index=False)","e4765f0d":"# EDA","449fba2a":"# \ub370\uc774\ud130 \uc804\ucc98\ub9ac","c07a752d":"#### => AUC score\ub85c \ubd24\uc744\ub54c, RandomForestClassifier\uac00 \uac00\uc7a5 \uc131\ub2a5\uc774 \uc88b\uc74c","c1c11cde":"## \uc804\uc790\uc0c1\uac70\ub798 \ubc30\uc1a1 \ub370\uc774\ud130\n### \uc81c\ud488 \ubc30\uc1a1 \uc2dc\uac04\uc5d0 \ub9de\ucdb0 \ubc30\uc1a1\ub418\uc5c8\ub294\uc9c0 \uc608\uce21\ubaa8\ub378 \ub9cc\ub4e4\uae30\n\ud559\uc2b5\uc6a9 \ub370\uc774\ud130 (X_train, y_train)\uc744 \uc774\uc6a9\ud558\uc5ec \ubc30\uc1a1 \uc608\uce21 \ubaa8\ud615\uc744 \ub9cc\ub4e0 \ud6c4, \uc774\ub97c \ud3c9\uac00\uc6a9 \ub370\uc774\ud130(X_test)\uc5d0 \uc801\uc6a9\ud558\uc5ec \uc5bb\uc740 \uc608\uce21\uac12\uc744 \ub2e4\uc74c\uacfc \uac19\uc740 \ud615\uc2dd\uc758 CSV\ud30c\uc77c\ub85c \uc0dd\uc131\ud558\uc2dc\uc624(\uc81c\ucd9c\ud55c \ubaa8\ub378\uc758 \uc131\ub2a5\uc740 ROC-AUC \ud3c9\uac00\uc9c0\ud45c\uc5d0 \ub530\ub77c \ucc44\uc810)\n\n![image.png](attachment:f70c3a4b-9984-4656-af95-dac047a900cb.png)\n\n[\uc2dc\ud5d8\uc6a9 \ub370\uc774\ud130\uc14b \ub9cc\ub4e4\uae30] \ucf54\ub4dc\ub294 \uc608\uc2dc\ubb38\uc81c\uc640 \ub3d9\uc77c\ud55c \ud615\ud0dc\uc758 X_train, y_train, X_test \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uae30 \uc704\ud568\uc784\n\n(\uc720\uc758\uc0ac\ud56d)\n- \uc131\ub2a5\uc774 \uc6b0\uc218\ud55c \uc608\uce21\ubaa8\ud615\uc744 \uad6c\ucd95\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc801\uc808\ud55c \ub370\uc774\ud130 \uc804\ucc98\ub9ac, \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1, \ubd84\ub958\uc54c\uace0\ub9ac\uc998, \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd, \ubaa8\ud615 \uc559\uc0c1\ube14 \ub4f1\uc774 \uc218\ubc18\ub418\uc5b4\uc57c \ud55c\ub2e4.\n- \uc218\ud5d8\ubc88\ud638.csv\ud30c\uc77c\uc774 \ub9cc\ub4e4\uc5b4\uc9c0\ub3c4\ub85d \ucf54\ub4dc\ub97c \uc81c\ucd9c\ud55c\ub2e4.\n- \uc81c\ucd9c\ud55c \ubaa8\ub378\uc758 \uc131\ub2a5\uc740 ROC-AUC\ud615\ud0dc\ub85c \uc77d\uc5b4\ub4dc\ub9b0\ub2e4.","0dbaf5ef":"# \ud83d\udca5\ud83d\udca5\ud83d\udca5 \ud480\uc774_ver02 \ud83d\udca5\ud83d\udca5\ud83d\udca5 ","e43d204d":"## \ucd5c\uc885 \ubaa8\ub378 \uc120\uc815\ud83d\ude09\n### -> KNeighborsClassifier \ubaa8\ub378\uc758 score\uac00 65.97\ub85c \uac00\uc7a5 \ub192\uc74c","2bcbcb24":"## EDA","06d0bf29":"## \ubaa8\ub378 \ubc0f \ud3c9\uac00","497837f5":"## \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1","5a71175d":"### \uc815\uaddc\ud654","2c463a04":"# \ub77c\uc774\ube0c\ub7ec\ub9ac & \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","3eee4f2d":"# \ubaa8\ub378\ub9c1 & \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & \uc559\uc0c1\ube14","b3fa2e03":"# \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1","4a53a6bb":"## \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30"}}