{"cell_type":{"e6af960a":"code","28f1b807":"code","02ff20fe":"code","03c49366":"code","d4a2a1ac":"code","48e216ad":"code","adc5c5b8":"code","d7aad397":"code","4477aae5":"code","7083c1ae":"code","a1d63b5d":"code","e8907687":"code","e1be8647":"code","cb3d2c09":"code","53358fad":"code","5dd24fdf":"code","1ad02b44":"code","8775b864":"code","aaa27ca1":"code","bd8fc55d":"code","c664850a":"code","66fbb69e":"code","6e731153":"code","b86c5f8e":"code","a4151f22":"code","6bf059c3":"code","5a6d9f04":"code","135bc588":"markdown","25f665b3":"markdown","1d38370e":"markdown","df57f8fe":"markdown","f518924c":"markdown","c44be282":"markdown","65210c33":"markdown","ff1d9fb0":"markdown","473be184":"markdown","f48bb5a8":"markdown","d3aa43cd":"markdown","02d3bc81":"markdown","2b935ad6":"markdown","dec498a4":"markdown","b9c15b3a":"markdown","750f9c7f":"markdown","161be168":"markdown","7a23dfd2":"markdown","75a30ac2":"markdown","98b2ba45":"markdown","1664cb9d":"markdown","c85a82f9":"markdown","dcd931a1":"markdown","3ec48a3f":"markdown","b13ad8e8":"markdown","414e934d":"markdown","bf68634d":"markdown","ef6322fd":"markdown","bf51b6c6":"markdown","ed82b92f":"markdown","f0f2123d":"markdown","725817de":"markdown","95d25e03":"markdown"},"source":{"e6af960a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","28f1b807":"df = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')\ndf.shape","02ff20fe":"df.columns","03c49366":"print('Null values present:',df.isnull().any().any())","d4a2a1ac":"df.info()","48e216ad":"df.head()","adc5c5b8":"plt.figure(figsize=(17,10))\nsns.heatmap(df.corr(),annot=True,fmt='.2f',cmap='OrRd')\nplt.show()","d7aad397":"corr = df.corr()\n\ncorr['price'].drop(['price']).sort_values(ascending=False)","4477aae5":"fig,ax = plt.subplots(ncols=2,figsize=(18,6))\nsns.kdeplot(df[df['waterfront']==0]['price'],color='r',shade=True,label='Without waterfront',ax=ax[0])\nsns.kdeplot(df[df['waterfront']==1]['price'],color='b',shade=True,label='Waterfront',ax=ax[0])\nsns.countplot(x='waterfront',data=df,ax=ax[1])\nplt.yticks([])\nplt.show()","7083c1ae":"fig,ax = plt.subplots(ncols=2,figsize=(18,6))\n\nsns.boxplot(x='bedrooms',y='price',data=df,ax=ax[0])\nsns.pointplot(x='bathrooms',y='price',data=df,estimator=np.mean,ax=ax[1])\n\nplt.xticks(rotation=45)\nplt.show()","a1d63b5d":"sns.set()\n\nfig,ax = plt.subplots(ncols=2,figsize=(18,6))\n\nax[0].scatter(df['sqft_living'],df['price'])\nax[1].scatter(df['sqft_lot'],df['price'])\n\nlabels = [\n    {\n        'title': 'House price based on living space (square ft.)',\n        'xlabel': 'Living space in square feet',\n        'ylabel': 'Price'\n    },\n    {\n        'title': 'House price based on lot space (square ft.)',\n        'xlabel': 'Lot space in square feet',\n        'ylabel': 'Price'\n    }\n]\n\nfor i in range(2):\n    ax[i].set_title(labels[i]['title'])\n    ax[i].set_xlabel(labels[i]['xlabel'])\n    ax[i].set_ylabel(labels[i]['ylabel'])\n\nplt.show()","e8907687":"plt.figure(figsize=(10,7))\n\nsns.boxplot(x='floors',y='price',data=df)\nplt.title('House price based on the number of floors')\nplt.xlabel('Number of floors')\nplt.show()","e1be8647":"fig,ax = plt.subplots(ncols=2,figsize=(18,6))\n\nsns.boxplot(x='view',y='price',data=df,ax=ax[0])\nsns.boxplot(x='condition',y='price',data=df,ax=ax[1])\n\nplt.show()","cb3d2c09":"plt.figure(figsize=(10,7))\nsns.boxplot(x='grade',y='price',data=df)\n\nplt.title('House price based on grade')\nplt.show()","53358fad":"year_built = df.groupby('yr_built')['price'].mean()\nyear_built.index = pd.to_datetime(year_built.index, format='%Y')\nyear_built_resampled = year_built.resample('5A').mean()\n\nyear_renovated = df.groupby('yr_renovated')['price'].mean()[1:]\nyear_renovated.index = pd.to_datetime(year_renovated.index, format='%Y')\nyear_renovated_resampled = year_renovated.resample('5A').mean()\n\nfig,ax = plt.subplots(ncols=2,figsize=(18,6))\nax[0].plot(year_built_resampled,lw=3)\nax[1].plot(year_renovated_resampled,lw=3)\n\nfor i in range(2):\n    ax[i].set_xlabel('Year')\n    ax[i].set_ylabel('Price')\nplt.show()","5dd24fdf":"df2 = df.drop(['id','date','zipcode','sqft_living15','sqft_lot15'],axis='columns')\ndf2.head()","1ad02b44":"print('Shape after removing features and outliers:',df2.shape)","8775b864":"# Splitting and scaling the data\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Creating ANN model\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential, Input\nfrom tensorflow.keras.layers import Dense\n\n# Evaluating the model\nfrom sklearn.metrics import r2_score","aaa27ca1":"X = df2.drop('price',axis='columns')\ny = df2['price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)\n\nprint('Lenght of training data:',len(X_train))\nprint('Lenght of testing data:',len(X_test))","bd8fc55d":"scaler = MinMaxScaler()\n\n# fit and transfrom\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","c664850a":"model = Sequential()\n\n# input layer\nmodel.add(Input(shape=(15,)))\n\n# hidden layers\nmodel.add(Dense(20,activation='relu'))\nmodel.add(Dense(30,activation='relu'))\nmodel.add(Dense(30,activation='relu'))\nmodel.add(Dense(20,activation='relu'))\nmodel.add(Dense(20,activation='relu'))\nmodel.add(Dense(30,activation='relu'))\nmodel.add(Dense(30,activation='relu'))\nmodel.add(Dense(20,activation='relu'))\n\n# output layer\nmodel.add(Dense(1,activation='linear'))\n\nmodel.compile(optimizer='adam',loss='mse')","66fbb69e":"model.fit(x=X_train,y=y_train.values,validation_data=(X_test,y_test.values),batch_size=256,epochs=400)","6e731153":"y_predicted = model.predict(X_test)\n\nprint('r2 score:',r2_score(y_test,y_predicted))","b86c5f8e":"fig,ax = plt.subplots(ncols=2,figsize=(18,6))\n\ny_test_values = y_test.values\ny_predicted_values = y_predicted.reshape(len(y_predicted))\nerrors = y_test_values - y_predicted_values\n\nsns.distplot(errors,ax=ax[0])\nax[0].set_title('Error histogram')\nax[0].set_xlabel('Error')\n\nax[1].scatter(y_test_values,y_predicted_values)\nax[1].plot(y_test_values,y_test_values,'r')\nax[1].set_title('Model Prediction and Perfect fit')\nax[1].set_xlabel('Y test')\nax[1].set_ylabel('Model Prediction')\nplt.show()","a4151f22":"model.save('\/kaggle\/working\/house_price_prediction_model.h5')","6bf059c3":"loaded_model = tf.keras.models.load_model('.\/house_price_prediction_model.h5')\nloaded_model.summary()","5a6d9f04":"loaded_model_y_predicted = loaded_model.predict(X_test)\n\nprint('Loaded model r2 score:',r2_score(y_test,loaded_model_y_predicted))","135bc588":"### Importing necessary libraries","25f665b3":"#### Insight\n\n* We can see that the higher the rate for view and condition, the higher the price.","1d38370e":"# Model Building\n\n* Importing necessary libraries\n* Splitting the dataset into training and testing data\n* Feature Scaling\n* Creating ANN model\n* Training the model\n* Evaluating the model","df57f8fe":"### House price based on number of bedrooms and bathrooms","f518924c":"### Load model and check r2 score","c44be282":"### Dropping unnecessary features\n\nFollowing are the features that we will drop from the dataframe.\n\n* id - IDs are not needed for training.\n* date - The date in this particular dataset are only limited to 2014 and 2015 and will not likely to contribute to price.\n* zipcode,sqft_living15,sqft_lot15 - these features are also not needed","65210c33":"#### Insight\n\n* Houses with waterfront tends to have higher average prices than those who dont have. \n* Prices of houses with waterfront are more spread out.\n* Outliers are present in both categories.\n* Imbalanced distribution of data between houses with and without waterfront","ff1d9fb0":"#### Insight\n\n* Newer houses tends to have higher prices.\n* Houses that were renovated in later years also tends to have higher prices.","473be184":"#### Insight\n\n* Just like the view and condition, higher grade gives higher price.","f48bb5a8":"### Evaluating the model","d3aa43cd":"# Feature Description\n\n1. id: Unique ID for each home sold\n2. date: Date of the home sale\n3. price: Price of each home sold\n4. bedrooms: Number of bedrooms\n5. bathrooms: Number of bathrooms, where .5 accounts for a room with a toilet but no shower\n6. sqft_living: Square footage of the apartments interior living space\n7. sqft_lot: Square footage of the land space\n8. floors: Number of floors\n9. waterfront: - A dummy variable for whether the apartment was overlooking the waterfront or not\n10. view: An index from 0 to 4 of how good the view of the property was\n11. condition: - An index from 1 to 5 on the condition of the apartment,\n12. grade: An index from 1 to 13, where 1-3 falls short of building construction and design, 7 has an average 1. level of construction and design, and 11-13 have a high quality level of construction and design.\n13. sqft_above: The square footage of the interior housing space that is above ground level\n14. sqft_basement: The square footage of the interior housing space that is below ground level\n15. yr_built: The year the house was initially built\n16. yr_renovated: The year of the house\u2019s last renovation\n17. zipcode: What zipcode area the house is in\n18. lat: Lattitude\n19. long: Longitude\n20. sqft_living15: The square footage of interior housing living space for the nearest 15 neighbors\n21. sqft_lot15: The square footage of the land lots of the nearest 15 neighbors\n\n### Categorical Features\n\n* Categorical: id, waterfront, zipcode\n\n### Numerical Features\n\n* Continuous: price, bathrooms, floors, lat, long\n* Discrete:  date, bedrooms, sqft_living, sqft_lot, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated, sqft_living15, sqft_lot15","02d3bc81":"#### Insight\n\n* We can see that the number of floors affect the house price.","2b935ad6":"### House prices with and without waterfront","dec498a4":"### Feature Scaling\n\n* We will be using MinMaxScaler from sklearn library.\n* This scales your data between 0 and 1.","b9c15b3a":"# Feature Selection\n\n* Dropping unnecessary features","750f9c7f":"Lets see the features with high correlation to price (independent feature)","161be168":"### Training the model","7a23dfd2":"# Saving the model\n\n* Save the model\n* Load model and check r2 score","75a30ac2":"### House price based on year built and renovated","98b2ba45":"#### Insight\n\n* Houses with higher number of bedrooms and bathrooms tend to have higher prices as well.","1664cb9d":"### House price based on grade","c85a82f9":"# Exploratory Data Analysis\n\n### Lets see first the correlation of independent variables to target variable","dcd931a1":"### Creating ANN model","3ec48a3f":"### House price based on the number of floors","b13ad8e8":"#### Insight\n\n* We can see that there is a linear relationship between the living space and house price.\n* In terms of lot space and price, we cant see that much relationship between these two variables.","414e934d":"## Exploring numerical variables\n\n* House price based on number of bedrooms and bathrooms\n* House price based on living space and land space (square ft.)\n* House price based on the number of floors\n* House price based on view and condition\n* House price based on grade\n* House price based on year built and renovated","bf68634d":"### Splitting the dataset into training and testing data","ef6322fd":"### House price based on view and condition","bf51b6c6":"# Load the dataset\n\n* The dataset I used is https:\/\/www.kaggle.com\/harlfoxem\/housesalesprediction","ed82b92f":"### Save the model","f0f2123d":"This [notebook](https:\/\/www.kaggle.com\/tomasmantero\/predicting-house-prices-keras-ann) helped me in constructing this notebook.","725817de":"### House price based on living space and land space (square ft.)","95d25e03":"## Exploring categorical variables\n\n* House price distribution based on waterfront"}}