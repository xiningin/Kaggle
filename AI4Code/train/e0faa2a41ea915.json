{"cell_type":{"c13ee9c5":"code","005a3690":"code","52fc50da":"code","f17c7a58":"code","c8d23027":"code","3b779367":"code","f86cfc7f":"code","738a768e":"code","19c7b452":"code","a72d7b7c":"code","48349402":"code","59f59009":"code","5400d123":"code","072f7822":"code","32ef39f0":"code","44d53409":"code","c4165269":"code","d3ce83b9":"code","4c98938c":"code","31eabdf5":"code","3a39c4e5":"code","a216a216":"code","70dceea7":"code","408f8803":"code","f320c7e3":"code","bf9f0a34":"code","7d4b7069":"code","be30b318":"code","da9331ff":"code","0a165e03":"code","35d1812b":"code","85a5cb9d":"code","0b802228":"code","0806f340":"code","f65518e2":"code","f506f46c":"code","994fbfce":"code","c14b4b01":"markdown","5c82160f":"markdown","476287a1":"markdown","632fc0ea":"markdown"},"source":{"c13ee9c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","005a3690":"%cd \"\/kaggle\/input\/titanic\/\"","52fc50da":"# Loading the dataset and analyzing the shape\ntrain = pd.read_csv(\"train.csv\")\ntest = pd.read_csv(\"test.csv\")\nsub = pd.read_csv(\"gender_submission.csv\")\n\ntrain.shape, test.shape, sub.shape","f17c7a58":"# Data preview  \ntrain[20:30]","c8d23027":"# Names of all the columns in train, test and gender submission sets respectively\ntrain.columns, test.columns, sub.columns","3b779367":"x = train[[\"PassengerId\",\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Ticket\",\"Fare\",\"Cabin\",\"Embarked\"]]\ny = train[[\"Survived\"]]","f86cfc7f":"# Viewing the data given to us in train\nx[:20]","738a768e":"# Histogram depicting age vs counts\nx['Age'].hist()","19c7b452":"# Finding the total counts of male and female classes\nx['Sex'].value_counts()","a72d7b7c":"# Finding NaN values in our train dataset\nx.isna().sum()","48349402":"mean     = x['Age'].mean()\nx['Age'] = x['Age'].fillna(mean)\n#mean_test = test['Age'].mean()\n#test['Age'] = test['Age'].fillna(mean_test)","59f59009":"x['Age'] = x['Age'].round(decimals=1)","5400d123":"# Replacing the NaN embarked class with S as it is in the majority\nx['Embarked'] = x['Embarked'].fillna(\"S\")","072f7822":"x.isna().sum()","32ef39f0":"# Analyzing the imbalance in the distribution of Survived(1) and Non-survived(0) classes.\ny.value_counts(),y.hist()","44d53409":"# As the Name column doesn't affect the end result and for this reason \n# we haven't considered it in the train set i.e x hence we also need to remove it from the test set as well.\ntest = test.drop([\"Name\"],axis=1)","c4165269":"# Replacing the class S with 1, class C with 2 and class Q with 3 of Embarked columns\nx['Embarked'] = x['Embarked'].replace(['S','C','Q'],['0','1','2'])\ntest['Embarked'] = test['Embarked'].replace(['S','C','Q'],['0','1','2'])\n\n# Replacing the Male and Female with 0 and 1 classes respectively of Sex columns\n\nx['Sex'] = x['Sex'].replace(['male','female'],['0','1'])\ntest['Sex'] = test['Sex'].replace(['male','female'],['0','1'])","d3ce83b9":"x[:5]","4c98938c":"print(test.Cabin.unique())","31eabdf5":"x = x.drop(['Ticket','Cabin'], axis=1)\ntest = test.drop(['Ticket','Cabin'], axis=1)","3a39c4e5":"# Replacing the NaN values \nmean_test_fare = test['Fare'].mean()\ntest['Fare'] = test['Fare'].fillna(mean_test_fare)\n\nmean_test_age = test['Age'].mean()\ntest['Age'] = test['Age'].fillna(mean_test_age)\n\n\ntest.isna().sum()","a216a216":"import numpy as np\n\nprint(y)\ny.shape","70dceea7":"from sklearn.ensemble import RandomForestClassifier","408f8803":"rf = RandomForestClassifier()\nrf_hist = rf.fit(x,y)","f320c7e3":"y_pred = rf.predict(test)\n\ny_pred[:10]","bf9f0a34":"y_test = sub['Survived'] \n\ny_test[:10]","7d4b7069":"from sklearn.metrics import accuracy_score\nacc_score = accuracy_score(y_test, y_pred)\nacc_score","be30b318":"from sklearn.metrics import classification_report\n\nclass_report = classification_report(y_test,y_pred, output_dict=True)\nprint(pd.DataFrame(class_report).transpose())","da9331ff":"from sklearn.metrics import confusion_matrix\nimport seaborn as sn\nimport matplotlib.pyplot as plt\n\ncm = confusion_matrix(y_test,y_pred)\ncm","0a165e03":"sn.heatmap(cm,annot=True,fmt=\"d\")","35d1812b":"# Using the Synthetic Minority Over-sampling Technique(SMOTE)\nfrom imblearn.over_sampling import SMOTE","85a5cb9d":"sm = SMOTE(random_state=13)\nx_train, y_train = sm.fit_resample(x, y)","0b802228":"# checking the shapes of the new resampled data\nx_train.shape, y_train.shape","0806f340":"# checking the classes distribution of the resampled dataset\npd.DataFrame(np.array(y_train),columns=['y']).value_counts()","f65518e2":"rf2 = RandomForestClassifier()\nrf_hist2 = rf2.fit(x_train,y_train)\ny_pred2 = rf2.predict(test)","f506f46c":"class_report2 = classification_report(y_test, y_pred2, output_dict=True)\npd.DataFrame(class_report2).transpose()","994fbfce":"sn.heatmap(confusion_matrix(y_test,y_pred2), annot=True, fmt='d')\nplt.plot()","c14b4b01":"Now, the imbalance is gone. We are good to go.","5c82160f":"Although we used the Random Forest classifier which was supposed to handle the data imbalance. But it's clear from the above result that our dataset is imbalanced and it causes the model to perform very poorly.","476287a1":"Our dataset\n\nx : x_train\n\ny : y_train\n\ntest : x_test\n\nsub['Survived'] : y_test\n\ny_pred : y_pred\n","632fc0ea":"We are using a Tree Based Algorithm that will handle the imbalance classes distribution as we see above."}}