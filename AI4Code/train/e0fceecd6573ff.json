{"cell_type":{"5e8a3169":"code","7e4209fa":"code","1e4b1d0c":"code","7d306dce":"code","3674e0a4":"code","3b98e691":"code","429695c9":"code","ee459df2":"code","e4b0cb15":"code","7b965779":"code","23db8a3d":"code","e6a823be":"code","40e604cd":"code","27399ad5":"code","cc14bb10":"code","353c250a":"code","b9a6a16a":"code","8fc64f3e":"code","9b0f7ceb":"code","c76480c0":"code","d7ef7103":"code","806d173d":"code","bd4253fa":"code","92a198a2":"code","d4017937":"code","eda9c0b8":"code","4c52dbc3":"code","c188e1d9":"code","4e525eba":"code","7877faf5":"code","bd4170d5":"code","2e951316":"code","ac4e7b43":"code","a970e64c":"code","e71ecf9d":"code","40c5e710":"code","3eb406ed":"code","a743db53":"code","f536ccec":"code","4ee54b3e":"code","246e982a":"code","49ff52e4":"code","090e220e":"code","a14ce180":"code","3a914101":"code","3b811719":"code","091aa588":"code","bb0c76f0":"code","15f8d8aa":"code","4701b5b0":"code","f7df5298":"code","fd6801af":"code","19d2be44":"code","3174b71d":"code","824354ef":"code","e906f8aa":"code","c2e6e153":"code","45e562d7":"code","b04d833b":"code","e47ff7b3":"code","7d9fce25":"code","de54c9ea":"code","8a90fae8":"code","f3e5f5e0":"code","2607d8b9":"code","70588ef4":"markdown","eb05cd73":"markdown","14317fb7":"markdown","d982e8cd":"markdown","39b87b97":"markdown","d9d96f1e":"markdown","d8e9c4d8":"markdown","8da5bf65":"markdown","28685f8c":"markdown","a06cdbe7":"markdown","3ca5a6a7":"markdown","43f04234":"markdown","c7434bcb":"markdown","dc94c0a9":"markdown","fd8812cd":"markdown"},"source":{"5e8a3169":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns ","7e4209fa":"train = pd.read_csv('..\/input\/analytics-vidhya-loan-prediction\/train.csv')\ntrain.head(5)","1e4b1d0c":"test = pd.read_csv('..\/input\/analytics-vidhya-loan-prediction\/test.csv')\ntest.head(5)","7d306dce":"print(train.shape)","3674e0a4":"print(test.shape)","3b98e691":"train.info()","429695c9":"train.isnull().sum()","ee459df2":"test.isnull().sum()","e4b0cb15":"test['Gender'].value_counts()","7b965779":"train['LoanAmount'].value_counts()","23db8a3d":"test['Dependents'].value_counts()","e6a823be":"test['Credit_History'].value_counts()","40e604cd":"train['Self_Employed'].value_counts()","27399ad5":"train['Loan_Amount_Term'].value_counts()","cc14bb10":"train['Gender'] = train['Gender'].fillna(train['Gender'].mode()[0]) #imputing missing values for gender\ntest['Gender'] = test['Gender'].fillna(test['Gender'].mode()[0])","353c250a":"train['Married'] = train['Married'].fillna(train['Married'].mode()[0]) #imputing missing values for married\ntest['Married'] = test['Married'].fillna(test['Married'].mode()[0]) ","b9a6a16a":"train['Dependents'] = train['Dependents'].fillna(train['Dependents'].mode()[0]) #imputing missing values for Dependents\ntest['Dependents'] = test['Dependents'].fillna(test['Dependents'].mode()[0]) ","8fc64f3e":"train['Self_Employed'].fillna('No',inplace=True)\ntest['Self_Employed'].fillna('No',inplace=True)","9b0f7ceb":"train['Credit_History'] = train['Credit_History'].fillna(train['Credit_History'].mode()[0])\ntest['Credit_History'] = test['Credit_History'].fillna(test['Credit_History'].mode()[0])","c76480c0":"train['LoanAmount'] = train['LoanAmount'].fillna(train['LoanAmount'].median())\ntest['LoanAmount'] = test['LoanAmount'].fillna(test['LoanAmount'].median())","d7ef7103":"train['Loan_Amount_Term'] = train['Loan_Amount_Term'].fillna(train['Loan_Amount_Term'].median())\ntest['Loan_Amount_Term'] = test['Loan_Amount_Term'].fillna(test['Loan_Amount_Term'].median())","806d173d":"train.isnull().sum()","bd4253fa":"test.isnull().sum()","92a198a2":"#Credit History \ntrain[\"Credit_History\"]=train[\"Credit_History\"].astype(\"object\")\ntest[\"Credit_History\"]=test[\"Credit_History\"].astype(\"object\")","d4017937":"train['Loan_Amount_Term']=train['Loan_Amount_Term'].astype(int)","eda9c0b8":"df_chi=train.copy()","4c52dbc3":"df_chi.head()","c188e1d9":"#Assigning levels to the categories\nlis = []\nfor i in range(0, df_chi.shape[1]):\n    if(df_chi.iloc[:,i].dtypes == 'object'):\n        df_chi.iloc[:,i] = pd.Categorical(df_chi.iloc[:,i])\n        df_chi.iloc[:,i] = df_chi.iloc[:,i].cat.codes \n        lis.append(df_chi.columns[i])","4e525eba":"cat_var=[\"Gender\",\"Married\",\"Dependents\",\"Education\",\"Self_Employed\",\"Credit_History\",\"Loan_Status\"] \ncatdf=df_chi[cat_var]","7877faf5":"catdf.info()","bd4170d5":"from sklearn.feature_selection import chi2\nn= 7\nfor i in range(0,6):\n    X=catdf.iloc[:,i+1:n]\n    y=catdf.iloc[:,i]\n    chi_scores = chi2(X,y)\n    p_values = pd.Series(chi_scores[1],index = X.columns)\n    print(\"for\",i)\n    print(p_values)\n    for j in range (0, len(p_values)):\n        if (p_values[j]<0.05):\n            print(p_values[j])","2e951316":"#Loan ID is dropped because it is not required\ntrain=train.drop([\"Gender\"],axis=1)\ntest=test.drop([\"Gender\"],axis=1)","ac4e7b43":"#gender is correlated with married and dependent\ntrain=train.drop([\"Loan_ID\"],axis=1)\ntest=test.drop([\"Loan_ID\"],axis=1)","a970e64c":"train=train.drop([\"Dependents\"],axis=1)\ntest=test.drop([\"Dependents\"],axis=1)","e71ecf9d":"train.info()","40c5e710":"df_final= pd.get_dummies(train[[\"Married\",\"Education\",\"Self_Employed\",\"Credit_History\",\"Property_Area\"]], drop_first=True, dtype=bool)","3eb406ed":"df_final.info()","a743db53":"train=train.drop([\"Married\",\"Education\",\"Self_Employed\",\"Credit_History\",\"Property_Area\"],axis=1)","f536ccec":"mergedDf = train.merge(df_final, left_index=True, right_index=True)","4ee54b3e":"#Standardizing the numerical variables\nmergedDf[\"ApplicantIncome\"]= (mergedDf[\"ApplicantIncome\"] - mergedDf[\"ApplicantIncome\"].mean())\/mergedDf[\"ApplicantIncome\"].std()\nmergedDf[\"CoapplicantIncome\"]= (mergedDf[\"CoapplicantIncome\"] - mergedDf[\"CoapplicantIncome\"].mean())\/mergedDf[\"CoapplicantIncome\"].std()\nmergedDf[\"LoanAmount\"]= (mergedDf[\"LoanAmount\"] - mergedDf[\"LoanAmount\"].mean())\/mergedDf[\"LoanAmount\"].std()\nmergedDf[\"Loan_Amount_Term\"]= (mergedDf[\"Loan_Amount_Term\"] - mergedDf[\"Loan_Amount_Term\"].mean())\/mergedDf[\"Loan_Amount_Term\"].std()\n","246e982a":"lis = []\nfor i in range(0, mergedDf.shape[1]):\n    if(mergedDf.iloc[:,i].dtypes == 'object'):\n        mergedDf.iloc[:,i] = pd.Categorical(mergedDf.iloc[:,i])\n        mergedDf.iloc[:,i] = mergedDf.iloc[:,i].cat.codes \n        lis.append(mergedDf.columns[i])","49ff52e4":"mergedDf.tail(5)","090e220e":"mergedDf.info()","a14ce180":"X=mergedDf.drop([\"Loan_Status\"],axis=1)\nY=mergedDf[\"Loan_Status\"]\nY=Y.astype(int)\nx=np.array(X)\ny=np.array(Y)","3a914101":"from sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier","3b811719":"#Naive Bayes\nparameters = {'priors':[[0.01, 0.99],[0.1, 0.9], [0.2, 0.8], [0.25, 0.75], [0.3, 0.7],[0.35, 0.65], [0.4, 0.6],[0.45,0.55],[0.5,0.5],[0.55,0.45],[0.6,0.4]]}\nnb = GridSearchCV(GaussianNB(), parameters, scoring = 'f1', n_jobs=-1)\nnb.fit(x, y)\nscores = cross_val_score(nb, x, y, cv=5,scoring = 'f1')\nprint(\"Cross validation score: {0:.2%} (+\/- {1:.2%})\".format(np.mean(scores), np.std(scores)*2))","091aa588":"from sklearn import tree\nfrom sklearn.pipeline import Pipeline\ndecisiontree = tree.DecisionTreeClassifier()\npipe = Pipeline(steps=[('decisiontree', decisiontree)])\ncriterion = ['gini', 'entropy']\nmax_depth = list(range(1,20))\nparameters = dict(decisiontree__criterion=criterion,decisiontree__max_depth=max_depth)\ndt = GridSearchCV(pipe, parameters,cv=5,scoring=\"f1\", n_jobs=-1)\ndt.fit(x,y)\nscores = cross_val_score(dt, x, y,scoring=\"f1\", cv=5)\nprint(\"DT Cross validation f1 score: {0:.2%} (+\/- {1:.2%})\".format(np.mean(scores), np.std(scores)*2))","bb0c76f0":"number_of_neighbors = range(1,20)\nparams = {'n_neighbors':number_of_neighbors}\nknn = KNeighborsClassifier()\nknnmodel = GridSearchCV(knn, params, cv=5,scoring=\"f1\", n_jobs=-1)\nknnmodel.fit(x,y)\nscores = cross_val_score(knnmodel, x, y,scoring=\"f1\", cv=5)\nprint(\"KNN Cross validation f1 score: {0:.2%} (+\/- {1:.2%})\".format(np.mean(scores), np.std(scores)*2))","15f8d8aa":"df_cat= pd.get_dummies(test[[\"Married\",\"Education\",\"Self_Employed\",\"Credit_History\",\"Property_Area\"]], drop_first=True, dtype=bool)","4701b5b0":"df_cat.head()","f7df5298":"test=test.drop([\"Married\",\"Education\",\"Self_Employed\",\"Credit_History\",\"Property_Area\"],axis=1)","fd6801af":"finaldDf = test.merge(df_cat, left_index=True, right_index=True)","19d2be44":"finaldDf.info()","3174b71d":"finaldDf['Loan_Amount_Term']=finaldDf['Loan_Amount_Term'].astype(int)","824354ef":"finaldDf[\"ApplicantIncome\"]= (finaldDf[\"ApplicantIncome\"] - finaldDf[\"ApplicantIncome\"].mean())\/finaldDf[\"ApplicantIncome\"].std()\nfinaldDf[\"CoapplicantIncome\"]= (finaldDf[\"CoapplicantIncome\"] - finaldDf[\"CoapplicantIncome\"].mean())\/finaldDf[\"CoapplicantIncome\"].std()\nfinaldDf[\"LoanAmount\"]= (finaldDf[\"LoanAmount\"] - finaldDf[\"LoanAmount\"].mean())\/finaldDf[\"LoanAmount\"].std()\nfinaldDf[\"Loan_Amount_Term\"]= (finaldDf[\"Loan_Amount_Term\"] - finaldDf[\"Loan_Amount_Term\"].mean())\/finaldDf[\"Loan_Amount_Term\"].std()","e906f8aa":"finaldDf.head()","c2e6e153":"x=np.array(finaldDf)","45e562d7":"#Prediction for ouput variable\nypred=dt.predict(x)","b04d833b":"test=pd.read_csv(\"..\/input\/analytics-vidhya-loan-prediction\/test.csv\")\ntest[\"Loan_Status\"]=ypred","e47ff7b3":"dict = {1: 'Y', 0: 'N'} ","7d9fce25":"test['Loan_Status']= test['Loan_Status'].map(dict) ","de54c9ea":"test.columns","8a90fae8":"test=test.drop(['Gender', 'Married', 'Dependents', 'Education',\n       'Self_Employed', 'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount',\n       'Loan_Amount_Term', 'Credit_History', 'Property_Area'],axis=1)","f3e5f5e0":"test.head()","2607d8b9":"test.to_csv(\"submission.csv\")","70588ef4":"### IMPUTING FOR CATEGORICAL VARIABLES","eb05cd73":"## Checking for the f1 scores for knn","14317fb7":"### Preparing target and feature variables","d982e8cd":"### chi-square analysis(to undersand the dependency between input categorical variables)","39b87b97":"looks like, LoanAmount has outliers, we will standardize it later","d9d96f1e":"## Checking for the f1 scores for Decision trees","d8e9c4d8":"# Predict Loan Eligibility for Dream Housing Finance company\n\n### Loan eligibilty process is a time consoming process, so automation is required for faster and better outputs.Customer first applies for home loan and after that company validates the customer eligibility for loan.Company wants to automate the loan eligibility process (real time) based on cuThese is done by customer details provided while form filling like gender, Married, Dependents , Education, Self_Employed, Loan_Amount_Term, Credit_History, ApplicantIncome, CoapplicantIncome and LoanAmount. We built a classfication model to target customers who are eligible for loan amount.","8da5bf65":"Studying the input variables","28685f8c":"### Missing value analysis","a06cdbe7":"### working on the test data","3ca5a6a7":"# So we get the best f1 score of approx 87.67% with DT!!!","43f04234":"### IMPUTING FOR CONTINUOUS VARIABLE","c7434bcb":"### dummy variable for categorical variables","dc94c0a9":"will drop dependents and gender as they are highly correlated with 2 other variables","fd8812cd":"## **Checking for the f1 scores for Naive Bayes**"}}