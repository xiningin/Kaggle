{"cell_type":{"f4a987b3":"code","f96c2c17":"code","c9ab438a":"code","31b50079":"code","2eba3d0f":"code","3b1032ec":"code","2a9ffe00":"code","2f043e74":"code","d225a410":"code","825ca597":"code","ee9b4377":"code","3db2d25c":"code","24df813c":"markdown","8d4ba208":"markdown","ab0c0b73":"markdown","76696ab0":"markdown","507e0d6d":"markdown","87ad0b9f":"markdown"},"source":{"f4a987b3":"# Imports\nimport pandas as pd\nimport numpy as np\nimport cv2 as cv\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport gc\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, BatchNormalization, Dropout, MaxPooling2D, Flatten\nfrom keras.layers import PReLU, Activation\nfrom keras.initializers import Constant\nfrom keras.callbacks import ModelCheckpoint\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report","f96c2c17":"# Lists to store images data\nX = []\nY = []\n\ntarget_size = (75, 75) # The images will be resized to these dimensions\n\npath_to_cat = '..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/'\n\nfor category in os.listdir(path_to_cat):\n    path_to_images = os.path.join(path_to_cat, category)\n    for im in os.listdir(path_to_images):\n        try:\n            image_path = os.path.join(path_to_images, im)\n            image = cv.imread(image_path)\n            image = cv.bilateralFilter(image, 3, 75, 75) # Applying bilateral filter to remove noise\n            image = cv.resize(image, target_size) # Resize image        \n\n            X.append(image) \n            Y.append(1) if category == 'Parasitized' else Y.append(0)\n        except:\n            print(f'ERROR: {category}\/{im}')\n\n# Convert lists to np.array and scale data\nX = np.array(X).astype('float32')\nY = np.array(Y)\n\nX = X \/ 255.0\n\ngc.collect()","c9ab438a":"# The data is splitted on 3 subsets:\n# train_x, train_y - to train model\n# val_x, val_y - for validtion during training\n# test_x, test_y - for final validation\nx, test_x, y, test_y = train_test_split(X, Y, test_size = 0.1, stratify = Y, shuffle = True, random_state = 666)\ntrain_x, val_x, train_y, val_y = train_test_split(x, y, test_size = 0.2, stratify = y, shuffle = True, random_state = 666)\n\n# Removing datasets that we don't need anymore to free memory\ndel X\ndel Y\ndel x\ndel y\n\nprint(f'Train data shape: {train_x.shape}, {train_y.shape}')\nprint(f'Validation data shape: {val_x.shape}, {val_y.shape}')\nprint(f'Test data shape: {test_x.shape}, {test_y.shape}')\n\ngc.collect()","31b50079":"# Data augmentation\ndatagen = ImageDataGenerator(rotation_range = 60,\n                            shear_range = 10.0,\n                            zoom_range = 0.1,\n                            fill_mode = 'constant',\n                            horizontal_flip = True,\n                            vertical_flip = True,)\n\n# Uncomment to see ImageDataGenerator output sample\n'''\nimg = cv.imread('..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/Parasitized\/C136P97ThinF_IMG_20151005_140538_cell_96.png')\nimg = img.reshape(-1, img.shape[0], img.shape[1], 3)\nimg = img \/ 255.0\n\nfig = plt.figure(figsize = (18, 10))\n\nfor i, flow in enumerate(datagen.flow(img, batch_size = 1)):\n    if i > 9:\n        break\n    fig.add_subplot(2, 5, i+1)\n    plt.imshow(np.squeeze(flow)[:, :, ::-1])\n    \ngc.collect()\n'''","2eba3d0f":"def make_model(filters, mode = 'normal'):    \n    model = Sequential()\n    model.add(Conv2D(filters.pop(0), 5, input_shape = (75, 75, 3), padding = 'valid', kernel_initializer = 'he_normal'))\n    model.add(Activation('relu')) if mode == 'normal' else model.add(PReLU(alpha_initializer=Constant(value=0.25)))\n    model.add(Dropout(0.2))\n        \n    for i, f in enumerate(filters):        \n        model.add(Conv2D(f, 5 if i == 0 else 3, padding = 'valid', kernel_initializer = 'he_normal'))\n        model.add(Activation('relu')) if mode == 'normal' else model.add(PReLU(alpha_initializer=Constant(value=0.25)))\n        model.add(Dropout(0.2))\n        model.add(MaxPooling2D())        \n        \n    model.add(Flatten())\n    model.add(Dense(128, kernel_initializer = 'he_normal'))\n    model.add(Activation('relu')) if mode == 'normal' else model.add(PReLU(alpha_initializer=Constant(value=0.25)))\n    model.add(Dropout(0.5))\n    model.add(Dense(64, kernel_initializer = 'he_normal'))\n    model.add(Activation('relu')) if mode == 'normal' else model.add(PReLU(alpha_initializer=Constant(value=0.25)))\n    model.add(Dropout(0.5))\n    model.add(Dense(1, activation = 'sigmoid'))\n    \n    return model","3b1032ec":"# Model with ReLU\nm_relu = make_model([16, 32, 64, 128], mode = 'normal')\nm_relu.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\ncheckpoint = ModelCheckpoint('..\/working\/relu_best.hdf5', verbose = 1, save_best_only = True, save_weights_only = True)\nhistory_relu = m_relu.fit_generator(datagen.flow(train_x, train_y, batch_size = 256),\n                             validation_data = [val_x, val_y], \n                             epochs = 60, callbacks = [checkpoint])","2a9ffe00":"# Model with PReLU\nm_prelu = make_model([16, 32, 64, 128], mode = 'prelu')\nm_prelu.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\ncheckpoint = ModelCheckpoint('..\/working\/prelu_best.hdf5', verbose = 1, save_best_only = True, save_weights_only = True)\nhistory_prelu = m_prelu.fit_generator(datagen.flow(train_x, train_y, batch_size = 256),\n                             validation_data = [val_x, val_y], \n                             epochs = 60, callbacks = [checkpoint])","2f043e74":"# Learning curves\nfig = plt.figure(figsize = (18, 6))\n\nfor i, h in enumerate([m_relu.history, m_prelu.history]):\n    fig.add_subplot(1, 2, i+1)\n    plt.plot(h.history['accuracy'], label = 'acc')\n    plt.plot(h.history['val_accuracy'], label = 'val_acc')\n    plt.plot(h.history['loss'], label = 'loss')\n    plt.plot(h.history['val_loss'], label = 'val loss')\n    plt.legend()\n    plt.grid()\n    plt.title('Relu') if i == 0 else plt.title('PRelu')\n    \nplt.show()","d225a410":"# Loading best weights for each model\nm_relu.load_weights('..\/working\/relu_best.hdf5')\nm_prelu.load_weights('..\/working\/prelu_best.hdf5')","825ca597":"def reports(model):\n    fig = plt.figure(figsize = (5, 5))\n    preds = model.predict(test_x)\n    preds = np.where(preds > 0.5, 1, 0)\n    report = classification_report(test_y, preds, output_dict = True)\n    confusion = confusion_matrix(test_y, preds)\n    sns.heatmap(confusion, fmt = 'd', annot = True, square = True, cbar = False, cmap = 'Blues')    \n    print(pd.DataFrame(report))\n    plt.show()","ee9b4377":"# model with ReLU results\nreports(m_relu)","3db2d25c":"# model with PReLU results\nreports(m_prelu)","24df813c":"# Data loading and preprocessing","8d4ba208":"This is experimental kernel. I'm not chasing for 99.99% accuracy here, the goal is to get some practice with PReLU and to compare perfomance of two models - first with \"ReLU\" activation function and second with \"PReLU\" activation function.","ab0c0b73":"# Results","76696ab0":"# Model creation and training","507e0d6d":"# Train and test splits","87ad0b9f":"# Goal"}}