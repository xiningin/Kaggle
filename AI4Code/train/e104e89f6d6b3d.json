{"cell_type":{"86017921":"code","d89f50f0":"code","180278ab":"code","2c035b78":"code","03436578":"code","80b63275":"code","5bb19b5c":"code","adfb568d":"code","4b262b73":"code","2346da10":"code","e38590f9":"code","454e8a47":"code","ea759a97":"code","6ffdbfd2":"code","4a9997ae":"code","5a2109f5":"code","ff9fa4e3":"code","6ecf6369":"code","139d2e85":"code","d5d438d1":"markdown","50d89531":"markdown","5233847f":"markdown","1621f747":"markdown","efeb5eeb":"markdown","3083bdfe":"markdown","ef7ea8aa":"markdown","bda7e357":"markdown","81227b4f":"markdown","e62fe4b6":"markdown","9d2b0423":"markdown","0dd87aed":"markdown","ab5602fc":"markdown","470d6dce":"markdown","5a308706":"markdown","980c7208":"markdown","81662dbc":"markdown","b07f1b03":"markdown","f237cc50":"markdown","02ebfd96":"markdown"},"source":{"86017921":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d89f50f0":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings # current version of seaborn generates a bunch of warnings that we'll ignore\nwarnings.filterwarnings(\"ignore\")","180278ab":"#df_haberman = pd.read_csv('..\/input\/habermans-survival-data-set\/haberman.csv')\ndf_haberman = pd.read_csv('..\/input\/habermans-survival-data-set\/haberman.csv',names=['Age', 'Year', 'Axillary nodes dect', 'Survstatus']) \n# Reading the csv file\n# Also changing the dataset columns name as bydefault there is no column name in the dataset ","2c035b78":"df_haberman.head() # *Prints the 1st 5 entries of dataset*","03436578":"# Q). How many data-point(no. of rows) and features(no. of columns) are there?\ndf_haberman.shape","80b63275":"# Q). What are the columns or feature names in dataset ?\ndf_haberman.columns","5bb19b5c":"# Q). *How many data point or survival for each class in survival status?*\ndf_haberman['Survstatus'].value_counts()\n# *There are 2 classes in Survstatus* \n# *Person who are survived after the surgery* \n# *Person is dead after the surgery* \n\n# *Balanced vs imbalanced dataset* \n# *Haberman is a partial imbalanced dataset since the number of data points for each speicies are not equal.*\n# *What is imbalanced dataset ?* \n# *Ans.) Imagine if we have dataset in which there are only 2 spieces and now if one spieces has 900 datapoints* \n# *and other has 100 only then such a data set is called imbalanced data set.*\n# *for example: dataset from hospital having species cancer and non-cancer as* \n# *we know most of datapoint will be non-cancer patient, so this is imbalanced dataset*","adfb568d":"## 2-D Scatter-Plot :\ndf_haberman.plot(kind='scatter',x='Age',y='Axillary nodes dect')\n\n# Key point: Always see the labels and scale of graph\n# cannot make much sense out it after plotting\n# Now we will do colorthe points by their class-labels\/survival-status","4b262b73":"# We can also use seaborn library to make similiar plot\n# A seaborn jointplot shows bivariate scatterplots and univariate histograms in the same figure.\nsns.jointplot(x='Age',y='Axillary nodes dect',data=df_haberman)","2346da10":"# 2-D scatter plot with color for each  survival-status\nsns.set_style('whitegrid')\nsns.FacetGrid(df_haberman,hue='Survstatus',size=12).map(plt.scatter,'Age','Axillary nodes dect').add_legend()\nplt.show()\n# Survstatus = 1 means survived(blue points)\n# Survstatus = 2 means not=survived(orange points)","e38590f9":"# pairwise scatter plot : Pair-Plot\n# One disadvanatge of Pair Plot : Cant' be Used when number of features are high.\nsns.set_style('whitegrid')\nsns.pairplot(df_haberman,hue='Survstatus',size=7)","454e8a47":"# 1-D scatter plot of \"AGE\"\nsurvived = df_haberman[df_haberman['Survstatus']==1]\nnot_survived= df_haberman[df_haberman['Survstatus']==2]\n#print(survived.head())\nplt.plot(survived['Age'],np.zeros_like(survived['Age']),'ro')\nplt.plot(not_survived['Age'],np.zeros_like(not_survived['Age']),'go')\nplt.legend(['survived','not_survived'])\nplt.show()\n# disadvantage of  1-D scatter plot are very hard to read as point are overlapping a lot.","ea759a97":"# Histogram a better way of visualizing 1-D scatter plots bcz we can tell about the no. of data points present between 2 points\nsns.FacetGrid(df_haberman,hue='Survstatus').map(sns.distplot,'Age').add_legend()","6ffdbfd2":"# Histogram a better way of visualizing 1-D scatter plots bcz we can tell about the no. of data points present between 2 points\nsns.FacetGrid(df_haberman,hue='Survstatus').map(sns.distplot,'Year').add_legend()","4a9997ae":"sns.FacetGrid(df_haberman,hue='Survstatus',size=7).map(sns.distplot,'Axillary nodes dect').add_legend()","5a2109f5":"#Plot PDF and CDF of Patient Age.\ncounts,bin_edges = np.histogram(survived['Age'],bins=10,density=True)\npdf = counts\/(sum(counts))\n#print(\"pdf:\",pdf);\n#print(\"bins:\",bin_edges)\n#compute CDF\ncdf = np.cumsum(pdf)\n#print(\"cdf:\",cdf)\nplt.plot(bin_edges[1:],pdf)\nplt.plot(bin_edges[1:], cdf)\nplt.legend(['pdf','cdf'])\nplt.title(label=\"Pdf and Cdf of patient' Age who are survived\")\nplt.xlabel('Age')\n\n#Plot PDF and CDF of Patient Age.\ncounts,bin_edges = np.histogram(not_survived['Age'],bins=10,density=True)\npdf = counts\/(sum(counts))\n#print(\"pdf:\",pdf);\n#print(\"bins:\",bin_edges)\n#compute CDF\ncdf = np.cumsum(pdf)\n#print(\"cdf:\",cdf)\nplt.plot(bin_edges[1:],pdf)\nplt.plot(bin_edges[1:], cdf)\nplt.legend(['pdf','cdf'])\nplt.title(label=\"Pdf and Cdf of patient' Age who are survived\")\nplt.xlabel('Age')","ff9fa4e3":"#Plot PDF and CDF of Patients' Nodes.\ncounts,bin_edges = np.histogram(survived['Axillary nodes dect'],bins=10,density=True)\npdf = counts\/(sum(counts))\nprint(\"pdf:\",pdf);\nprint(\"bins:\",bin_edges)\n#compute CDF\ncdf = np.cumsum(pdf)\nprint(\"cdf:\",cdf)\nplt.plot(bin_edges[1:], cdf)\nplt.plot(bin_edges[1:],pdf)\nplt.legend(['pdf','cdf'])\nplt.title(label=\"Pdf and Cdf of patient's Axillary nodes dect who are survived and not_survived\")\nplt.xlabel('Axillary nodes dect')\nprint('***********************************&********')\n\n#Plot PDF and CDF of Patients' Nodes.\ncounts,bin_edges = np.histogram(not_survived['Axillary nodes dect'],bins=10,density=True)\npdf = counts\/(sum(counts))\nprint(\"pdf:\",pdf);\nprint(\"bins:\",bin_edges)\n#compute CDF\ncdf = np.cumsum(pdf)\nprint(\"cdf:\",cdf)\nplt.plot(bin_edges[1:], cdf)\nplt.plot(bin_edges[1:],pdf)\nplt.legend(['pdf','cdf'])\nplt.title(label=\"Pdf and Cdf of patient's Axillary nodes dect who are survived\")\nplt.xlabel('Axillary nodes dect')","6ecf6369":"sns.boxplot(x='Survstatus',y='Age',data=df_haberman)\nplt.show()\nsns.boxplot(x='Survstatus',y='Year',data=df_haberman,)\nplt.show()\nsns.boxplot(x='Survstatus',y='Axillary nodes dect',data=df_haberman)\nplt.show()","139d2e85":"sns.violinplot(x='Survstatus',y='Age',data=df_haberman)\nplt.show()\nsns.violinplot(x='Survstatus',y='Year',data=df_haberman,)\nplt.show()\nsns.violinplot(x='Survstatus',y='Axillary nodes dect',data=df_haberman,height=10)\nplt.show()","d5d438d1":"# Simple Plotting Tools","50d89531":"# Observation:\n1. In this plot we can see that both of tha classes overlap each other. Hence wa cant make any obervation from it","5233847f":"# Box Plots:\n### Box-plot with Whiskers : another simple method of visualizing the 1-D scatterplot more intuitively\n### It uses the concept of mean , median ,Percentile and Quantile","1621f747":"# About Dataset : \n\n1. Title: Haberman's Survival Data\n\n2. Sources:\n   (a) Donor:   Tjen-Sien Lim (limt@stat.wisc.edu)\n   (b) Date:    March 4, 1999\n\n3. Past Usage:\n   1. Haberman, S. J. (1976). Generalized Residuals for Log-Linear\n      Models, Proceedings of the 9th International Biometrics\n      Conference, Boston, pp. 104-122.\n   2. Landwehr, J. M., Pregibon, D., and Shoemaker, A. C. (1984),\n      Graphical Models for Assessing Logistic Regression Models (with\n      discussion), Journal of the American Statistical Association 79:\n      61-83.\n   3. Lo, W.-D. (1993). Logistic Regression Trees, PhD thesis,\n      Department of Statistics, University of Wisconsin, Madison, WI.\n\n4. Relevant Information:\n   The dataset contains cases from a study that was conducted between\n   1958 and 1970 at the University of Chicago's Billings Hospital on\n   the survival of patients who had undergone surgery for breast\n   cancer.\n\n5. Number of Instances: 306\n\n6. Number of Attributes: 4 (including the class attribute)\n\n7. Attribute Information:\n   1. Age of patient at time of operation (numerical)\n   2. Patient's year of operation (year - 1900, numerical)\n   3. Number of positive axillary nodes detected (numerical)\n   4. Survival status (class attribute)\n         1 = the patient survived 5 years or longer\n         2 = the patient died within 5 year\n\n8. Missing Attribute Values: None","efeb5eeb":"# Conclusions:\n1. Patient\u2019s age and operation year alone are not deciding factors for his\/her survival. Yet, people less than 35 years have more chance of survival.\n2. Survival chance is inversely proportional to the number of positive axillary nodes. We also saw that the absence of positive axillary nodes cannot always guarantee survival.\n3. The objective of classifying the survival status of a new patient based on the given features is a difficult task as the data is imbalanced.","3083bdfe":"# Obervaion:\n1. We can't make any clear view of which age the patient surive or not \n2. We can only see that patient less that 40 have higher chance of survival.","ef7ea8aa":"# CDF (Cumulative Distribution Function):                \n*The Cumulative Distribution Function (CDF) is the probability that the variable takes a value less than or equal to x.*","bda7e357":"# 1-D scatter plot using just one Feature","81227b4f":"# Observation :\n1. We cant' make analysis from the plot that whether the patient having less age are survived and the patient with less nodes are survived.\n2. Only the plot between year and auxillary nodes is comparitvely better.","e62fe4b6":"# Histogram and PDF\n1. PDF(Probablity Density Function):        \n*In probability theory, a probability density function, or density of a continuous random variable, is a function whose value at any given sample in the sample space can be interpreted as providing a relative likelihood that the value of the random variable would equal that sample. It is the measure of the percentage of distribution for a certain range of values.*","9d2b0423":"# VIOLIN Plot\n1. *Violinplot is the combination of the histogram with pdf and Box-Plot.*\n1. *Denser region of the data are fatter and Sparser ones are thinner in violin plot.*","0dd87aed":"# Observations: From above cdf and pdf plots.\n1. Patient with less than 40 Age have higher chance of survival .There are comparitvely more patient having age between 45 and 60 who did not survive\n2. Patient with more than 1 Nodes have are not likely to survive.More the number of nodes,lesser the survival chances.","ab5602fc":"# Observation :\n1. 83.55% of the Patient who have survived had nodes in the range of 0-5.\n\n#### Such info cannot be understood from pdf , reading the data of cdf we can tell how accurate how our simple if-else model is","470d6dce":" ### Objective : *To classify\/predict a patient survival who had undergone surgery for breast cancer*","5a308706":"### Loading tha haberman.csv dataset in pandas dataFrame and storing in a variable (df_haberman).\n","980c7208":"# Since we cant' do 4-D scatter Plot , So there is a hack of Visualizing Data of all data at once\n# One such hack is Pair-Plot\n","81662dbc":"# Observation:\n1. Patient with 0  nodes or 1 nodes have higher chance to survive.\n2. Pateint with more than 20 nodes have few chances to surivive.","b07f1b03":"# Exploratory Data Analysis : *Haberman\u2019s Cancer Survival Dataset*","f237cc50":"# Observation :\n1. *Using Age and Axillary_nodes_dect feature ,we cant' distuinguish that if a patient has more auxillary nodes then the patient survived or not.*\n2. *One thing we can see the patient who have age between 30 and 40 have higher chance of survival after the surgery.*\n3. *And patient who have age between 60 and 70 have lower chance of survival after the surgery.*\n4. *Patient having 0 nodes have more chances to survive irrespective of their age*","02ebfd96":"# Importing important library that we will need"}}