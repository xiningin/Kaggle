{"cell_type":{"72ee153f":"code","7a0c0f3c":"code","4bda5498":"code","4d692788":"code","195f5d94":"code","f06f6e36":"code","563b6d78":"code","0c327eb2":"code","08aef365":"code","30660adf":"code","c242dece":"code","fe684848":"code","0d9a6961":"code","cb73a27a":"code","1db6233c":"code","0b27d167":"code","9474bbd6":"code","23ab5124":"code","9854f384":"code","6d6fad8a":"code","d1a62d66":"code","e94ef4ec":"markdown","4823a379":"markdown","1f8ebac7":"markdown","d97944e9":"markdown","99ecec67":"markdown","2950bf5b":"markdown","edbf8812":"markdown","ff37525f":"markdown"},"source":{"72ee153f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7a0c0f3c":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n%matplotlib inline \nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 15, 6\n\nfrom datetime import datetime as dt\nfrom statsmodels.tsa.stattools import adfuller,acf,pacf\nfrom statsmodels.tsa.arima_model import ARIMA\nimport math\n\nimport warnings\nwarnings.filterwarnings('ignore')","4bda5498":"data = pd.read_csv('..\/input\/air-passengers\/AirPassengers.csv')","4d692788":"data['Month'].head()","195f5d94":"data['Month']=data['Month'].apply(lambda x: dt(int(x[:4]), int(x[5:]),15))\ndata = data.set_index('Month')\ndata.head()","f06f6e36":"ts = data['#Passengers']","563b6d78":"plt.plot(ts)","0c327eb2":"ts_log = np.log(ts)","08aef365":"def test_stationarity(timeseries):\n    rolmean = timeseries.rolling(window=52,center=False).mean()\n    rolstd = timeseries.rolling(window=52,center=False).std()\n    \n    orig = plt.plot(timeseries,color='blue', label='Original')\n    mean = plt.plot(rolmean,color='red', label='Rolling Mean')\n    std = plt.plot(rolstd,color='black', label='Rolling std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False)\n    \n    print('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries,autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4],index=['Test Statistic','p-value','#Lags Used',\n                                           'Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print(dfoutput)","30660adf":"test_stationarity(data['#Passengers'])","c242dece":"#plot the moving avg\n\nplt.plot(ts_log)","fe684848":"#initializing the moving avg variable\nmovingAverage = ts_log.rolling(window=12).mean()\nmovingSTD = ts_log.rolling(window=12).std()\nplt.plot(ts_log)\nplt.plot(movingAverage, color='green')","0d9a6961":"ts_log_mv_diff = ts_log - movingAverage\nts_log_mv_diff.head(12)\n\nts_log_mv_diff.dropna(inplace=True)\nts_log_mv_diff.head(10)","cb73a27a":"#parse-out time series data and check for stationarty\ntest_stationarity(ts_log_mv_diff)","1db6233c":"plt.plot(np.arange(0,11),acf(ts_log_mv_diff,nlags=10))\nplt.axhline(y=0,linestyle='--', color='gray')\nplt.axhline(y=-7.96\/np.sqrt(len(ts_log_mv_diff)),linestyle='--', color='gray')\nplt.axhline(y=7.96\/np.sqrt(len(ts_log_mv_diff)),linestyle='--', color='gray')\nplt.title('Autocorrelation Function')\nplt.show()","0b27d167":"plt.plot(np.arange(0,11),pacf(ts_log_mv_diff,nlags=10))\nplt.axhline(y=0,linestyle='--', color='gray')\nplt.axhline(y=-7.96\/np.sqrt(len(ts_log_mv_diff)),linestyle='--', color='gray')\nplt.axhline(y=7.96\/np.sqrt(len(ts_log_mv_diff)),linestyle='--', color='gray')\nplt.title('Partial Autocorrelation Function')\nplt.show()","9474bbd6":"model = ARIMA(ts_log,order=(1,1,0))\nresults_ARIMA = model.fit(disp=-1)\nplt.plot(ts_log_mv_diff)\nplt.plot(results_ARIMA.fittedvalues,color='red')\nplt.title('RSS: %.4f'%sum((results_ARIMA.fittedvalues[1:] - ts_log_mv_diff)**2))","23ab5124":"#Model Predictions\npredictions_ARIMA_diff = pd.Series(results_ARIMA.fittedvalues, copy=True)\npredictions_ARIMA_diff.head()","9854f384":"predictions_ARIMA_diff_cumsum = predictions_ARIMA_diff.cumsum()\npredictions_ARIMA_diff_cumsum.head()","6d6fad8a":"predictions_ARIMA_log = pd.Series(ts_log.iloc[0],index=ts_log.index)\npredictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum,fill_value=0)\npredictions_ARIMA_log.head()","d1a62d66":"predictions_ARIMA = np.exp(predictions_ARIMA_log)\nplt.plot(ts)\nplt.plot(predictions_ARIMA)\nplt.title('RMSE: %.4f'%np.sqrt(sum((predictions_ARIMA-ts)**2)\/len(ts)))","e94ef4ec":"By Observing the plot in the result of the Dickey-Fuller Test, we infer the test statistic is more than critical value and the moving avg is not constant over time.\nso the null hypothesis of Dickey-Fuller test can not be rejected.\n* This shows that the timeseries is not stationary","4823a379":"As We can see that it starting from 1949-02-15 and not the first month because we took lag by one, and the first element doesn't have anything before to subtact from the way to convert the differencing to log scale is to add these differences consecultively to the base number.","1f8ebac7":"New Problem Statement:\n* Forecasting Time Series","d97944e9":"Well Our model is good at predicting future but fails in capturing the seasonality.","99ecec67":"# Thank You For Checking Out\n\n* Do help me to improve this.","2950bf5b":"the test is 1% of the critical value which tells us, that we are 99% confident this series is stationary. we can reject the null hypothesis","edbf8812":"## EDA of Air Passenger with Timeseries Analysis\n\n\nObjective: Build a model to forecast the demand(passenger traffic) in Airplanes. The data is classified in date\/time and the passengers travelling per month\n\n\n","ff37525f":"The AFC curve crosses the upper confidence value when the lagged value is between 0 and 1. Thus the optimal value or ARIMA can be 0 or 1."}}