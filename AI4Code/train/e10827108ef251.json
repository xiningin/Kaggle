{"cell_type":{"fdb3801e":"code","f675dd0a":"code","9ccc8a77":"code","03b9bfcc":"code","889ce84e":"code","bd7d8ce4":"code","9d485088":"code","d7af4bf8":"code","fd9da9b6":"code","3e394d02":"code","3b19db35":"code","3baaa489":"code","13f398cb":"code","e1ede0ea":"code","52e10d69":"code","209c1921":"code","de06d218":"code","b9770e0c":"code","c0d3885d":"code","f236b9ab":"code","2bd8e0cf":"code","01d27017":"code","55b686f2":"code","6d7db7c6":"code","894c2dd6":"code","2aa3eabc":"code","39494472":"code","1abdd168":"code","6d2e8866":"code","f86302c8":"code","68c6bb0a":"code","e1ec16d3":"code","6fa00237":"code","ccb10f36":"code","9812611a":"code","263983ff":"code","e6fcca53":"code","cf26f42d":"code","5fc7bf86":"code","f05fbe4a":"code","3574f755":"code","45eab12d":"code","b77fecd1":"code","8e76a706":"code","afd8f828":"code","10a2c42b":"code","b5f87923":"code","185eb22a":"code","4a986f1b":"code","b1f9216c":"code","e313f4dd":"code","9b77d284":"code","204946c2":"code","e5f40d3d":"code","8a9af37b":"code","8e81f91f":"code","ea02e3da":"code","40e81760":"code","3b26cc57":"code","5d339728":"code","3ce5f5c1":"code","8becc860":"code","ff647dad":"code","5245916e":"code","b5973d94":"code","ba2e8b32":"markdown","a9aafb59":"markdown","e16a8ffc":"markdown","04d624b2":"markdown","7fbbc142":"markdown","205bfa6e":"markdown","6f917256":"markdown","9273dc79":"markdown","c77ee664":"markdown","064602d0":"markdown"},"source":{"fdb3801e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\nfrom collections import OrderedDict\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score","f675dd0a":"#loading the data\ntr=pd.read_csv('..\/input\/train.csv')","9ccc8a77":"test=pd.read_csv('..\/input\/train.csv')","03b9bfcc":"# the correlation between numerical variables\ncorr = tr.corr()\nmask = np.array(corr)\nmask[np.tril_indices_from(mask)] = False\nfig,ax= plt.subplots()\nfig.set_size_inches(20,10)\nsns.heatmap(corr, mask=mask,vmax=.9, square=True,annot=True, cmap=\"YlGnBu\")","889ce84e":"tr.head()","bd7d8ce4":"tr['title'].value_counts()[:50].plot(kind='bar',figsize=(60,20),fontsize=10)","9d485088":"tr.plot.scatter('budget','revenue')","d7af4bf8":"tr_mean = tr.groupby('title').mean().sort_values(by='runtime', ascending=False)[['runtime']]","fd9da9b6":"tr_mean.plot(kind='bar',figsize=(80,20),color='green').set_title('runtime for title')","3e394d02":"tr['original_language'].value_counts().plot(kind='bar',figsize=(60,10),fontsize=20).set_title('plotting original languages count')","3b19db35":"tr[['title','revenue']].groupby(['title']).sum().plot()","3baaa489":"#visualizing original title vs revenue\ntrg=tr[:20]\ntrg[['revenue','original_title']].groupby(['original_title']).sum().plot(kind='bar',figsize=(50,10), fontsize=40,color='blue').set_title('original title vs revenue for first 20 data',fontsize=40)","13f398cb":"#visualizing original title vs revenue least 50 data\ntrg=tr[-50:]\ntrg[['revenue','original_title']].groupby(['original_title']).sum().plot(kind='bar',figsize=(50,10), fontsize=40,color='blue').set_title('original title vs revenue for least 50 data',fontsize=40)","e1ede0ea":"#visualizing original title vs budget\ntrg=tr[:20]\ntrg[['budget','original_title']].groupby(['original_title']).sum().plot(kind='bar',figsize=(50,10), fontsize=40,color='pink').set_title('original title vs budget for first 20 data',fontsize=40)","52e10d69":"#visualizing original title vs budget least 50\ntrg=tr[-50:]\ntrg[['budget','original_title']].groupby(['original_title']).sum().plot(kind='bar',figsize=(50,10), fontsize=40,color='pink').set_title('original title vs budget least 50 data',fontsize=40)","209c1921":"#visualizing original title vs budget least 50\ntrg=tr[-50:]\ntrg[['popularity','original_title']].groupby(['original_title']).sum().plot(kind='hist',figsize=(50,10), fontsize=40,color='pink').set_title('original title vs budget least 50 data',fontsize=40)","de06d218":"tr.head()","b9770e0c":"df=tr[:10]\nta=df.sort_values('revenue',ascending=False)\ntit = df['title']\nrbr = ta['revenue']\ncolors  = (\"red\", \"green\", \"orange\", \"cyan\", \"brown\", \n\"grey\",\"blue\",\"indigo\", \"beige\", \"yellow\")\nplt.pie(rbr, labels=tit, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=90)\nplt.title('Top 10 data high revenue titles',fontsize=40)\nplt.show()","c0d3885d":"df=tr[:10]\nta=df.sort_values('revenue',ascending=False)\ntit = df['title']\nrbr = ta['runtime']\ncolors  = (\"red\", \"green\", \"orange\", \"cyan\", \"brown\", \n\"grey\",\"blue\",\"indigo\", \"beige\", \"yellow\")\nplt.pie(rbr, labels=tit, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nplt.title('Top 10 data more runtime titles',fontsize=40)\nplt.show()","f236b9ab":"df=tr[:10]\nta=df.sort_values('budget',ascending=False)\ntit = df['title']\nrbr = ta['budget']\ncolors  = (\"red\", \"green\", \"orange\", \"cyan\", \"brown\", \n\"grey\",\"blue\",\"indigo\", \"beige\", \"yellow\")\nplt.pie(rbr, labels=tit, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nplt.title('Top 10 high budget titles',fontsize=40)\nplt.show()","2bd8e0cf":"tr.info()","01d27017":"tr.dtypes","55b686f2":"tr.head()","6d7db7c6":"tr.shape","894c2dd6":"# missing values in the datasaet\ntr.isnull().sum()","2aa3eabc":"tr.fillna(0,inplace=True)","39494472":"from sklearn.model_selection import train_test_split","1abdd168":"y=tr['revenue']","6d2e8866":"x_train, x_test, y_train, y_test = train_test_split(tr, y, test_size=0.2,random_state=0)","f86302c8":"x_train=tr.drop('revenue',axis=1)","68c6bb0a":"x_test=tr.drop('revenue',axis=1)","e1ec16d3":"y_train=tr['revenue']","6fa00237":"y_test=tr['revenue']","ccb10f36":"# checking the shape of X_train, y_train, X_val and y_val\nx_train.shape, y_train.shape, x_test.shape, y_test.shape","9812611a":"#performing linear regression as the target variable is a continuous data i.e.,revenue","263983ff":"from sklearn.linear_model import LinearRegression","e6fcca53":"x_train=pd.get_dummies(x_train)","cf26f42d":"x_test=pd.get_dummies(x_test)","5fc7bf86":"#filling NaN values","f05fbe4a":"x_train.fillna(0,inplace=True)","3574f755":"x_test.fillna(0,inplace=True)","45eab12d":"# applying dummies on the train dataset\ntr=pd.get_dummies(tr)","b77fecd1":"lg=LinearRegression()","8e76a706":"# fitting the model on X_train and y_train\nlg.fit(x_train,y_train)","afd8f828":"#post processing predicting values","10a2c42b":"# making prediction on validation set\npred=lg.predict(x_test)","b5f87923":"pred","185eb22a":"sol=pd.DataFrame()","4a986f1b":"sol['predicted values']=pred","b1f9216c":"pred1=lg.predict(x_train)","e313f4dd":"pred1","9b77d284":"lg.score(x_train,y_train)","204946c2":"lg.score(x_test,y_test)","e5f40d3d":"from sklearn.metrics import mean_squared_error","8a9af37b":"mean_squared_error(y_test,pred,multioutput='raw_values')","8e81f91f":"from sklearn.metrics import mean_absolute_error","ea02e3da":"mean_absolute_error(y_train,pred1,multioutput='raw_values')","40e81760":"# defining a function which will return the rmsle score\ndef rmsle(y, y_):\n    y = np.exp(y),   # taking the exponential as we took the log of target variable\n    y_ = np.exp(y_)\n    log1 = np.nan_to_num(np.array([np.log(v + 1) for v in y]))\n    log2 = np.nan_to_num(np.array([np.log(v + 1) for v in y_]))\n    calc = (log1 - log2) ** 2\n    return np.sqrt(np.mean(calc))","3b26cc57":"rmsle(y_test,pred)","5d339728":"rmsle(y_train,pred1)","3ce5f5c1":"from sklearn.tree import DecisionTreeClassifier","8becc860":"# defining the decision tree model with depth of 4, you can tune it further to improve the accuracy score\nclf = DecisionTreeClassifier(max_depth=4, random_state=0)","ff647dad":"# fitting the decision tree model\nclf.fit(x_train,y_train)","5245916e":"# making prediction on the validation set\npredict = clf.predict(x_test)","b5973d94":"predict","ba2e8b32":"# performing linear regression model","a9aafb59":"splitting the data into train and test data","e16a8ffc":"#performing decision tree classifier","04d624b2":"**saving predicted data in**** sol.csv**","7fbbc142":"                      **#visualizations****","205bfa6e":"**#performing predictions**","6f917256":"sol.to_csv('..\/input\/sample_submission.csv', header=True, index=False)","9273dc79":"# evaluating performance","c77ee664":"# R2 value","064602d0":"here the correlation is high with revenue by the budget that is 0.75"}}