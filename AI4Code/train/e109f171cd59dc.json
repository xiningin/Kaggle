{"cell_type":{"99a1e5ae":"code","8ff6b629":"code","cf2accb5":"code","850b37d7":"code","b8a1d957":"code","c9286477":"code","ae361206":"code","e0c47203":"code","e579ca3a":"code","39758886":"code","b533162a":"code","3ae895e9":"markdown","8cd56f84":"markdown","41fc93c7":"markdown","c25527fc":"markdown","f15c1830":"markdown","b4a7117f":"markdown","34a63b84":"markdown"},"source":{"99a1e5ae":"import numpy as np\nimport pandas as pd\n\nfrom pandas import Series, DataFrame","8ff6b629":"series_obj = Series(np.arange(8), index=['row 1', 'row 2','row 3','row 4','row 5', 'row 6', 'row 7', 'row 8'])\nseries_obj","cf2accb5":"# ['label-index'] When you write square brackets with a label-index inside them, \n# This tells Python to select and retrieve all records with that label-index.\nseries_obj['row 7']","850b37d7":"# [integer index] When you write square brackets with an integer index inside them, \n# This tells Python to select and retrieve all records with the specified integer index.\nseries_obj[[0,7]]","b8a1d957":"np.random.seed(50)\nDF_obj = DataFrame(np.random.rand(36).reshape((6,6)), \n                   index=['row 1', 'row 2', 'row 3', 'row 4', 'row 5', 'row 6'],\n                   columns=['column 1', 'column 2', 'column 3', 'column 4', 'column 5', 'column 6'])\nDF_obj","c9286477":"# object_name.ix[[row indexes], [column indexes]]\n# When you call the .ix[] special indexer, and pass in a set of row and colum indexes, \n# This tells Python to select and retrieve only those specific rows and columns.\n\nDF_obj.ix[['row 2', 'row 5'], ['column 5', 'column 2']]","ae361206":"# ['starting label-index':'ending label-index'] \n# Data slicing allows you to select and retrieve all records from the starting label-index, to the \n# ending label-index, and every record in between.\n\nseries_obj['row 3':'row 7']","e0c47203":"# object_name < scalar value\n# You can use comparison operators (like greater than or less than) to return True \/ False values for \n# all records, to indicate how each element compares to a scalar value. \nDF_obj < .2","e579ca3a":"# object_name[object_name > scalar value] \n# You can also use comparison operators and scalar values for indexing, to return only the records \n# that satisfy the comparison expression you write.\n\nseries_obj[series_obj > 6]","39758886":"# ['label-index', 'label-index', 'label-index'] = scalar value\n# Setting is where you select all records associated with the specified label-indexes and set those \n# values equal to a scalar.\nseries_obj['row 1', 'row 5', 'row 8'] = 8","b533162a":"series_obj","3ae895e9":"** Segment 1 - Filtering and selecting data**","8cd56f84":"**Comparing with scalars**","41fc93c7":"**Filtering with scalars**","c25527fc":"**Setting values with scalars**","f15c1830":"Selecting and retrieving data","b4a7117f":"**Data slicing**","34a63b84":"**Chapter 1 - Data Munging**"}}