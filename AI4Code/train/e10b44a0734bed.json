{"cell_type":{"7f66a56e":"code","eb83dd31":"code","c40679ec":"code","ba553f33":"code","189d8d64":"code","3f21d423":"code","c21dd86d":"code","2f744088":"code","67f6ae36":"code","c40243d4":"code","4371d3ca":"code","7af88c56":"code","2f7c2b1e":"code","008ed8b1":"code","6ad6d506":"code","cdb3ea2b":"code","7bda64a9":"code","7803f6ac":"code","4fbd91c8":"code","b5b05892":"code","e95d82b1":"code","a38114f6":"code","e32ea5a1":"code","23e470ca":"code","c0715487":"code","0c954da8":"code","857a7045":"code","5f2fc3a2":"code","d06dcc24":"code","9aaca045":"code","edf0eb4c":"code","30de66c5":"code","36157907":"code","49029c09":"code","b58f3d83":"code","4a4a432d":"code","510efd3d":"code","b436e6e0":"code","3bf33594":"code","345d8037":"code","837a4019":"code","3ed46c79":"code","77953aa1":"code","a9109fec":"code","de2cf8a6":"code","988fd7cd":"code","e7ef0eb5":"code","87004030":"code","3afa3928":"code","b3405c3e":"code","7d45729a":"markdown","b186744e":"markdown","7ee0849e":"markdown","7d7ac3a5":"markdown","7c5f09e4":"markdown","e2933a79":"markdown","45891664":"markdown","744dd2dd":"markdown","12ad9789":"markdown","c407a9ca":"markdown","cc0e2402":"markdown","f8bc60d7":"markdown","c3ce3fb9":"markdown"},"source":{"7f66a56e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eb83dd31":"train_data=pd.read_csv(\"\/kaggle\/input\/cap-4611-2021-fall-assignment-3\/train.csv\")\ntest_data=pd.read_csv(\"\/kaggle\/input\/cap-4611-2021-fall-assignment-3\/eval.csv\")","c40679ec":"print(\"training data shape:\",train_data.shape)","ba553f33":"print(\"testing data shape:\",test_data.shape)","189d8d64":"print(\"training data head:\\n\",train_data.head())","3f21d423":"print(\"testing data head:\\n\",test_data.head())","c21dd86d":"train_data","2f744088":"test_data","67f6ae36":"train_data.describe()","c40243d4":"test_data.describe()","4371d3ca":"train_data.dtypes","7af88c56":"test_data.dtypes","2f7c2b1e":"import matplotlib.pyplot as plt","008ed8b1":"cols = train_data.columns\nfigure, ax1 = plt.subplots()\nax1.plot(train_data[\"id\"],train_data[\"Eat\"],linewidth=0.5)","6ad6d506":"train_data.isnull().sum()","cdb3ea2b":"print(\"number of missing values in train data\",(train_data.isnull()).sum().sum())\nprint(\"number of missing values in test data\",(test_data.isnull()).sum().sum())","7bda64a9":"y = train_data[\"Eat\"]\nX = train_data.drop(columns=[\"Eat\",\"id\"])","7803f6ac":"#import\nfrom sklearn import decomposition, datasets\nfrom sklearn import neighbors, tree\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold, RandomizedSearchCV\n\nimport tensorflow as tf\nfrom tensorflow import keras\ntf.random.set_seed(42)\n\n# random search linear regression model on the auto insurance dataset\nfrom scipy.stats import loguniform\n","4fbd91c8":"X_train_full, X_test, y_train_full, y_test = train_test_split(\n X, y,random_state=42)\nX_train, X_valid, y_train, y_valid = train_test_split(\n X_train_full, y_train_full,random_state=42)\n\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.08, random_state=42)\n","b5b05892":"\n# determine the number of input features\nn_features = X_train.shape[1]\n\n# callback = tf.keras.callbacks.EarlyStopping(monitor='mse', patience=300, restore_best_weights=True)\n\nmodel = tf.keras.Sequential([\n      tf.keras.Input(shape=(n_features,)),\n      tf.keras.layers.Dense(20, activation=\"relu\", name=\"firstLayer\"),\n      tf.keras.layers.Dense(30, activation=\"relu\", name=\"secondfLayer\"),\n      tf.keras.layers.Dense(40, activation=\"relu\", name=\"thirdLayer\"),\n      tf.keras.layers.Dense(50, activation=\"relu\", name=\"fourthfLayer\"),\n      tf.keras.layers.Dense(1,name=\"lastLayer\"),\n])\n","e95d82b1":"print(n_features)","a38114f6":"model.compile(loss=\"mean_squared_error\",\n              optimizer=\"adam\",\n              metrics=[tf.keras.metrics.RootMeanSquaredError()])","e32ea5a1":"history = model.fit(X_train, y_train, epochs=600,validation_split=0.08,validation_data=(X_valid, y_valid),verbose=0)\n\nmodel.evaluate(X_test, y_test)","23e470ca":"import keras.backend as K\nprint(K.eval(model.optimizer.lr))","c0715487":"model.summary()","0c954da8":"import matplotlib.pyplot as plt\n\n# show model loss history\nplt.plot(history.history['root_mean_squared_error'])\nplt.plot(history.history['val_root_mean_squared_error'])\nplt.title('model rmse')\nplt.ylabel('rmse')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.ylim([0, 0.8])\nplt.show()","857a7045":"#get distribution of validation scores: first gather the scores\nmodel1_rmse=[]\n\nfor i in range(10):\n    history = model.fit(X_train, y_train, epochs=30,validation_split=0.08,validation_data=(X_valid, y_valid),verbose=0)\n    rmse = model.evaluate(X_test, y_test)[1]\n    model1_rmse.append(rmse)\n    ","5f2fc3a2":"pd_model1=pd.DataFrame(model1_rmse)\nprint(pd_model1.describe())","d06dcc24":"#plot distribution of validation scores\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\nsns.displot(pd_model1)","9aaca045":"#second Multilayer Perceptron models using TensorFlow (or tf.keras)\nmodel2 = tf.keras.Sequential([\n      tf.keras.layers.Flatten(input_shape=(n_features,)),\n      tf.keras.layers.Dense(200, activation=\"relu\", name=\"firstLayer\"),\n      tf.keras.layers.Dense(80, activation=\"relu\", name=\"secondfLayer\"),\n      tf.keras.layers.Dense(50, activation=\"relu\", name=\"thirdLayer\"),\n      tf.keras.layers.Dense(1,name=\"lastLayer\"),\n])\n","edf0eb4c":"model2.compile(loss=\"mean_squared_error\",\n              optimizer=\"adam\",\n              metrics=[tf.keras.metrics.RootMeanSquaredError()])","30de66c5":"history = model2.fit(X_train, y_train, epochs=400,validation_data=(X_valid, y_valid),verbose=0)\n\nmodel2.evaluate(X_test, y_test)","36157907":"# show model loss history\nplt.plot(history.history['root_mean_squared_error'])\nplt.plot(history.history['val_root_mean_squared_error'])\nplt.title('model rmse')\nplt.ylabel('rmse')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.ylim([0, 2])\nplt.show()","49029c09":"model2.summary()","b58f3d83":"#get distribution of validation scores: first gather the scores\nmodel2_rmse=[]\n\nfor i in range(10):\n    history = model2.fit(X_train, y_train, epochs=30,validation_split=0.08,validation_data=(X_valid, y_valid),verbose=0)\n    rmse = model2.evaluate(X_test, y_test)[1]\n    model2_rmse.append(rmse)","4a4a432d":"pd_model2=pd.DataFrame(model2_rmse)\nprint(pd_model2.describe())","510efd3d":"#plot distribution of validation scores\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\nsns.displot(pd_model2)","b436e6e0":"#third Multilayer Perceptron models using TensorFlow (or tf.keras)\n\nmodel3 = tf.keras.Sequential([\n      tf.keras.layers.Flatten(input_shape=(n_features,)),\n      tf.keras.layers.Dense(20, activation=\"sigmoid\", name=\"firstLayer\"),\n      tf.keras.layers.Dense(50, activation=\"sigmoid\", name=\"secondfLayer\"),\n      tf.keras.layers.Dense(1,name=\"lastLayer\"),\n])\n","3bf33594":"model3.compile(loss=\"mean_squared_error\",\n              optimizer=\"adam\",\n              metrics=[tf.keras.metrics.RootMeanSquaredError()])","345d8037":"history = model3.fit(X_train, y_train, epochs=300,validation_split=0.08,validation_data=(X_valid, y_valid),verbose=0)\n\nmodel3.evaluate(X_test, y_test)","837a4019":"# show model loss history\nplt.plot(history.history['root_mean_squared_error'])\nplt.plot(history.history['val_root_mean_squared_error'])\nplt.title('model rmse')\nplt.ylabel('rmse')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.ylim([0, 4])\nplt.show()","3ed46c79":"model3.summary()","77953aa1":"#get distribution of validation scores: first gather the scores\nmodel3_rmse=[]\n\nfor i in range(10):\n    history = model3.fit(X_train, y_train, epochs=30,validation_split=0.08,validation_data=(X_valid, y_valid),verbose=0)\n    rmse = model3.evaluate(X_test, y_test)[1]\n    model3_rmse.append(rmse)","a9109fec":"pd_model3=pd.DataFrame(model3_rmse)\nprint(pd_model3.describe())","de2cf8a6":"#plot distribution of validation scores\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\nsns.displot(pd_model3)","988fd7cd":"#drop id column from test data, then predict the values for the target vector using the best model\ntest=test_data.drop(columns=[\"id\"])\nbest_model_pred = model.predict(test)","e7ef0eb5":"print(best_model_pred.flatten())","87004030":"best_model_pred.shape","3afa3928":"output = pd.DataFrame({'id': test_data.id, 'Eat':best_model_pred.flatten()})\noutput.to_csv('submission.csv', index=False)","b3405c3e":"#output target vector\nprint(output.to_string())","7d45729a":"## Second Model","b186744e":"## Feature Engineering\nAs for which columns to drop, we have to drop the target column from the training dataset before training, as well as drop the \"id\" column that will not do anything to help with our predictions, so we can remove it because keeping it will just make our predictions worse (id number does not correlate).","7ee0849e":"# Load Data\nHere, the data is loaded from the csv files.","7d7ac3a5":"As we can see from the distributions of the loss from each model, some performed better than others, with the first being the best-performing one. Therefore, the first one is the one I am using for my submission to the competition.","7c5f09e4":"# Select Best Model and Output Target Vector","e2933a79":"Now, to get a better idea of the mean, std, and counts of the data, we can do a .describe(). It is also useful to check the datatypes in our dataset using .dtypes.","45891664":"## Check for missing data","744dd2dd":"# Building and Training Models\nBuilding and training the three Multilayer Perceptron models using tf.keras.","12ad9789":"## First Model","c407a9ca":"As you can see, when doing (train_data\/test_data.isnull()).sum().sum() we get zero, which means there are no missing values in the datasets, therefore we do not need to do anything for missing values.","cc0e2402":"# Exploratory Data Analysis\nChecking shape, head, and what the data overall looks like as well as doing .describe() and checking datatypes.","f8bc60d7":"Now, we need to set our training set, validation subset, and test subsets to aid with training, validation, and then finally, testing.","c3ce3fb9":"## Third Model"}}