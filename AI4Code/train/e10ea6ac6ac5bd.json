{"cell_type":{"542b0d90":"code","bb164b08":"code","aec3b7f8":"code","e96bdb37":"code","fbe5b549":"code","2f441801":"code","64e10a68":"code","e8986df3":"code","f6e9c2af":"code","2c859ecb":"code","27db2805":"code","2d000ce9":"code","eb909504":"code","eb2a01f1":"code","4c1b1741":"code","565f4ca6":"code","36680ffd":"code","b9dcb555":"code","84b93dc3":"code","6c06caab":"code","748573e2":"code","d9b3008f":"code","358ccc07":"code","c748940d":"code","95ef6244":"code","27a04cc4":"code","527dd02b":"markdown","807fb49b":"markdown","0631335f":"markdown","515b21f8":"markdown","0134e08a":"markdown","1ceae725":"markdown","dc8ca340":"markdown","288c2dba":"markdown","40471201":"markdown","75b8229c":"markdown","7423f355":"markdown","2f6357f8":"markdown","ade860c4":"markdown","7d449941":"markdown","02f1d8e1":"markdown","d117e8a0":"markdown","51388efd":"markdown","8c4a2f77":"markdown","f3db7ab7":"markdown","78babb65":"markdown","d85570fd":"markdown","07b10ae5":"markdown","da634f35":"markdown","de93e267":"markdown","7bad553d":"markdown","5f62dab3":"markdown","b99aa3f8":"markdown","aa7f5c39":"markdown","02c0e0b7":"markdown","ec005900":"markdown","ade53e67":"markdown","bc60b16f":"markdown","94dbb5da":"markdown","2a7e5874":"markdown","7c143131":"markdown","5c435b50":"markdown","0e96516c":"markdown","4e792ac2":"markdown","42eed4e8":"markdown","30488e4c":"markdown","159e9a80":"markdown","3ebe51f2":"markdown","6c409b9f":"markdown","1e21f712":"markdown","6e3f7e80":"markdown","27c6dac4":"markdown","f9f540e9":"markdown","6b4dd10d":"markdown","4b731a1d":"markdown","fa4437e6":"markdown","d668627a":"markdown","c34d4da9":"markdown"},"source":{"542b0d90":"import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport glob\nfrom wordcloud import WordCloud\nimport nltk\nimport datetime\n# nltk.download()\nfrom nltk.sentiment import SentimentIntensityAnalyzer\nfrom nltk.corpus import stopwords\nfrom nltk import sent_tokenize, word_tokenize\nfrom wordcloud import WordCloud, STOPWORDS\nfrom collections import Counter\nfrom nltk.tokenize import RegexpTokenizer\nimport re\nfrom math import pi\n\n","bb164b08":"data=pd.read_csv(\"..\/input\/newest-trending-videos\/Data.csv\")\ndata.info()\ndata.head(5)","aec3b7f8":"# Overview of nan values\ndata.isna().sum()","e96bdb37":"# Drop null values\ndata = data[pd.notna(data['title'])]\n# Pair the category id with category title\ncategories={}\nwith open('..\/input\/youtube-new\/US_category_id.json', 'r') as f:\n    category = json.load(f)\n    for i in category['items']:\n        categories[int(i['id'])]=i['snippet']['title']        \ndata['category']=[categories[i] for i in data['categoryId']]","fbe5b549":"# Reformat the date and time columns\ndata['publishedAt'] = pd.to_datetime(data['publishedAt'], format='%Y-%m-%d')\ndata['trending_date']=pd.to_datetime(data['trending_date'],format='%y.%d.%m')\n# Drop columns we do not use\ndata.drop(['thumbnail_link', 'categoryId','channelId','video_id'],axis=1,inplace=True)\n# Remove unknown values wihch are shown as 0 in view_count, likes, dislikes, and comment_count\nmissing=data.loc[(data['view_count'] ==0) | (data['likes'] ==0)|(data['dislikes'] ==0)|(data['comment_count'] ==0)]\ndata.head()","2f441801":"# Vlsualize the correlation between view_count, likes,dislikes, and comment_count\ncorrelation=data[['view_count','likes','dislikes','comment_count']].corr()\nsns.heatmap(correlation,cmap='Blues',annot=True);","64e10a68":"# Plot the number of video by category\nplt.figure(figsize = (25,9))\nsns.countplot(data['category'],order = data['category'].value_counts().index, palette=sns.color_palette(\"Blues_r\",15))\nplt.title('Number of Videos by Category',fontsize=20)\nplt.ylabel('Count',fontsize=16)\nplt.xlabel('Category',fontsize=16);","e8986df3":"# The average of four numeric attributes \ngeneral_view=pd.DataFrame(data[['view_count','likes','dislikes','comment_count']].groupby(data['category']).mean())\nplt.figure(figsize=(32,20))\nplt.subplot(2,2,1)\nplt.plot( general_view.index,'view_count' , data=general_view, color='skyblue', linewidth=2)\nplt.title('View_count vs Category',fontsize=20)\nplt.xticks(rotation=30)\nplt.subplot(2,2,2)\nplt.plot( general_view.index, 'likes', data=general_view, color='olive', linewidth=2)\nplt.title('Likes vs Category',fontsize=20)\nplt.xticks(rotation=30)\nplt.subplot(2,2,3)\nplt.plot( general_view.index, 'dislikes', data=general_view, color='black', linewidth=2)\nplt.title('Dislikes vs Category',fontsize=20)\nplt.xticks(rotation=30)\nplt.subplot(2,2,4)\nplt.plot( general_view.index, 'comment_count', data=general_view, color='red', linewidth=2, linestyle='dashed')\nplt.title('Comment_count vs Category',fontsize=20)\nplt.xticks(rotation=30);","f6e9c2af":"\n\n# Plot the distribution of 'view_count','likes','dislikes','comment_count'\nview_count=np.log(data['view_count']+1 )\nlikes=np.log(data['likes']+1)\ndislikes=np.log(data['dislikes']+1)\ncomment=np.log(data['comment_count']+1)\ndata_count=pd.concat([view_count,likes,dislikes,comment], axis=1)\ndata_count.index=data['category']\ndata_count=data_count[(data_count != 0)]\nplt.figure(figsize=(32,25))\n\n# distribution of view counts of different categories\nplt.subplot(2,2,1)\nsns.boxplot(data_count.index,'view_count', data=data_count,order = data['category'].value_counts().index)\nplt.xticks(rotation=30,fontsize=12)\nplt.xlabel('')\nplt.ylabel('')\nplt.title(\"View Count\", fontsize=20)\n\n# distribution of likes of different categories\nplt.subplot(2,2,2)\nsns.boxplot(data_count.index,'likes', data=data_count,order = data['category'].value_counts().index)\nplt.xticks(rotation=30,fontsize=12)\nplt.xlabel('')\nplt.ylabel('')\nplt.title(\"Likes\", fontsize=20)\n\n# distribution of dislikes of different categories\nplt.subplot(2,2,3)\nsns.boxplot(data_count.index,'dislikes', data=data_count,order = data['category'].value_counts().index)\nplt.xticks(rotation=30,fontsize=12)\nplt.xlabel('')\nplt.ylabel('')\nplt.title(\"Dislikes\", fontsize=20)\n\n# distribution of comment counts of different categories\nplt.subplot(2,2,4)\nsns.boxplot(data_count.index,'comment_count', data=data_count,order = data['category'].value_counts().index)\nplt.xticks(rotation=30,fontsize=12)\nplt.xlabel('')\nplt.ylabel('')\nplt.title(\"Comment Count\", fontsize=20);\n\n","2c859ecb":"#the distribution of days that videos take to become popular\ndata['publish_date'] = data['publishedAt'].dt.date\ndata['publish_time'] = data['publishedAt'].dt.time\ndata['interval'] = (data['trending_date'].dt.date-data['publish_date']).astype('timedelta64[D]')\n#Histgram of distribution of interval\nplt.figure(figsize = (25,9))\nsns.countplot(data['interval'], color='skyblue')\nplt.title('Time Interval',fontsize=20)\nplt.xlabel('Interval',fontsize=16)\nplt.ylabel('Count',fontsize=16)\n# Average time interval between published and trending\ndf_t = pd.DataFrame(data['interval'].groupby(data['category']).mean()).sort_values(by=\"interval\")\nplt.figure(figsize = (25,9))\nplt.plot(df_t, color='skyblue', linewidth=2)\nplt.title(\"Average Days to be trending video\", fontsize=20)\nplt.xlabel('Category',fontsize=16)\nplt.ylabel('Average Time Interval',fontsize=16)\nplt.show();\n\n","27db2805":"# Create evaluation matrix by mean of time interval, number of videos, average view count, standard deviation of view count\nMatrix1 = data.pivot_table(index=\"category\", values=[\"view_count\", \"interval\"], \n                 aggfunc={\"interval\": np.mean, \"view_count\":[\"count\", np.std, np.mean]})\nMatrix1.columns = [\"interval_mean\", \"video_count\", \"view_mean\", \"view_std\"]\n\n# Generate socres for each character by descending the rank\nfor col in Matrix1.columns:\n    Matrix1[\"{}_rank\".format(col)] = Matrix1[col].rank(ascending=1)\nMatrix1[\"interval_mean_rank\"] = 15-Matrix1[\"interval_mean_rank\"]\n\n# Calculate total score\nMatrix1[\"score\"] = Matrix1.iloc[:,-4:].sum(axis=1)\nMatrix1.sort_values(by=\"score\", inplace=True, ascending=False)\n","2d000ce9":"# Matrix Ranking\nMatrix1.drop(['interval_mean','video_count','view_mean','view_std'],axis=1)","eb909504":"# Visualization of evalustion matrix\nplt.figure(figsize = (15,12))\nplt.scatter(x=Matrix1['video_count_rank'], y=Matrix1['interval_mean_rank'], s=Matrix1['view_mean_rank']*300, c=Matrix1['view_std_rank'], cmap=\"Blues\", alpha=0.4, edgecolors=\"grey\", linewidth=2)\nplt.xlabel(\"Video count score\",fontsize=16)\nplt.ylabel(\"Interval mean score\",fontsize=16)\nplt.title('Category Score Demostration',fontsize=20)\n\nfor i in range(len(Matrix1)):\n    plt.annotate(s=Matrix1.index[i], xy=(Matrix1['video_count_rank'][i]-0.5, Matrix1['interval_mean_rank'][i]+0.5));\n","eb2a01f1":"# Locate Entertainment\nEntertainment=data.loc[data['category']=='Entertainment']\n\n# Plot the frequency of Channel Appearance\nMatrix2=pd.DataFrame(Entertainment['channelTitle'].groupby(Entertainment['channelTitle']).count())\nMatrix2.columns=['Appearance_Frequency']\n\ndata['publishedAt'] = pd.to_datetime(data['publishedAt'], format='%Y-%m-%dT%H:%M:%S').map(lambda x: x.date)\ndata['trending_date']=pd.to_datetime(data['trending_date'],format='%y.%d.%m').astype(\"str\")\n","4c1b1741":"# Create Heatmap\ndef channelHeatmap(category):\n    plt.figure(figsize=(15,20))\n    pivot_table = data[data.category == category].pivot_table(values='view_count', index='channelTitle', columns='trending_date', aggfunc=lambda x:np.log(x.mean()), fill_value=0)\n    sns.heatmap(pivot_table, cmap = \"Greens\", vmin = 0)\n    plt.title('ViewCount of {}'.format(category),fontsize=20)\n    plt.xlabel('Tranding Date',fontsize=16)\n    plt.ylabel('Frequency',fontsize=16)\n    plt.show();\nchannelHeatmap(\"Entertainment\")\n\n","565f4ca6":"# Entertainment\nEntertainment['likes_to_dislikes'] = Entertainment['likes']\/Entertainment['dislikes']\nMatrix2['likes_to_dislikes']=pd.DataFrame(Entertainment['likes_to_dislikes'].groupby(Entertainment['channelTitle']).mean())","36680ffd":"# Plot for Entertainment\nplt.figure(figsize = (10,25))\nsns.barplot(x=Matrix2['likes_to_dislikes'], y=Matrix2.index, palette=sns.color_palette(\"BuGn_r\",200),order=Matrix2['likes_to_dislikes'].sort_values(ascending=False).index)\nplt.xlabel('likes_to_dislikes ratio',fontsize=16)\nplt.ylabel('Channel',fontsize=16)\nplt.yticks(fontsize=8) \nplt.xticks(fontsize=12)\nplt.title('likes_to_dislikes ratio in Entertainment',fontsize=20)\nplt.yticks(fontsize=7) \nplt.show();\n","b9dcb555":"Entertainment['growth_rate']=Entertainment['view_count']\/(Entertainment['interval']+1)\nMatrix2['growth_rate']=pd.DataFrame(Entertainment['growth_rate'].groupby(Entertainment['channelTitle']).mean())\nplt.figure(figsize=(10,27))\nsns.barplot(x=Matrix2['growth_rate'],y=Matrix2.index,order=Matrix2['growth_rate'].sort_values(ascending=False).index, palette=sns.color_palette(\"Blues_r\",200))\nplt.yticks(fontsize=8) \nplt.xticks(fontsize=12)\nplt.xlabel('Growth Rate',fontsize=16)\nplt.ylabel('Channels',fontsize=16)\nplt.title(\"Growth Rate in Entertainment\", fontsize=20);\n\n","84b93dc3":"# Sentiment Analysis\ncategory_list = Entertainment['channelTitle'].unique()\n# Collect all the related stopwords.\nen_stopwords = list(stopwords.words('english'))\npolarities = list()\nMAX_N=10000\n\nfor i in category_list:\n    tags_word = Entertainment[Entertainment['channelTitle']==i]['description'].str.lower().str.cat(sep=' ')\n# removes punctuation,numbers and returns list of words\n    tags_word = re.sub('[^A-Za-z]+', ' ', tags_word)\n    word_tokens = word_tokenize(tags_word)\n    filtered_sentence = [w for w in word_tokens if not w in en_stopwords]\n    without_single_chr = [word for word in filtered_sentence if len(word) > 2]\n\n# Remove numbers\n    cleaned_data_title = [word for word in without_single_chr if not word.isdigit()]      \n    \n# Calculate frequency distribution\n    word_dist = nltk.FreqDist(cleaned_data_title)\n    hnhk = pd.DataFrame(word_dist.most_common(MAX_N),\n                    columns=['Word', 'Frequency'])\n\n    compound = .0\n    for word in hnhk['Word'].head(MAX_N):\n        compound += SentimentIntensityAnalyzer().polarity_scores(word)['compound']\n\n    polarities.append(compound)","6c06caab":"# Plot of Sentiment\ncategory_list = pd.DataFrame(category_list)\npolarities = pd.DataFrame(polarities)\ntags_sentiment = pd.concat([category_list,polarities],axis=1)\ntags_sentiment.columns = ['channelTitle','polarity']\ntags_sentiment.set_index('channelTitle',inplace=True)\ntags_sentiment=tags_sentiment.sort_values('polarity')\nplt.figure(figsize=(10,25))\nax = sns.barplot(x=tags_sentiment['polarity'],y=tags_sentiment.index, data=tags_sentiment)\nplt.xlabel(\"Polarity\",fontsize=16)\nplt.ylabel(\"Entertainment\",fontsize=16)\nplt.yticks(fontsize=8) \nplt.xticks(fontsize=12)\nplt.title(\"Sentiment Polarity of Entertainment Videos\", fontsize=20);","748573e2":"# Matrix for Entainment\nMatrix2['Frequency'] = Matrix2['Appearance_Frequency'].rank(ascending=1)\nMatrix2['Growth']=Matrix2['growth_rate'].rank(ascending=1)\nMatrix2['Ratio']=Matrix2['likes_to_dislikes'].rank(ascending=1)\nMatrix2=Matrix2.join(tags_sentiment, how='left')\nMatrix2['Sentiment']=Matrix2['polarity'].rank(ascending=1)\n\n\nMatrix2.drop(['Appearance_Frequency', 'growth_rate','likes_to_dislikes','polarity'],axis=1,inplace=True)\nMatrix2['Score']=Matrix2.sum(axis=1)\nMatrix2.sort_values('Score',ascending=False,inplace=True)\nMatrix2.head(10)\n\n","d9b3008f":"# function of plotting spidermap\ndef spidermap(Channel_Name):\n    Channel=Matrix2.loc[Matrix2.index==Channel_Name]\n    Spider = pd.DataFrame({\n    'group': [Channel_Name],\n    'Frequency': Channel['Frequency'].values,\n    'Growth': Channel['Growth'].values,\n    'Ratio': Channel['Ratio'].values,\n    'Sentiment': Channel['Sentiment'].values,\n    })\n    N=4\n    categories=list(Spider)[1:]\n    plt.figure(figsize=(8,8))\n    values=Spider.loc[0].drop('group').values.flatten().tolist()\n    values += values[:1]\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n    ax = plt.subplot(111, polar=True)\n    plt.xticks(angles[:-1], categories, color='grey', size=10)\n    ax.set_rlabel_position(0)\n    plt.yticks([50,100,150,200], [\"50\",\"100\",\"150\"], color=\"grey\", size=13)\n    plt.ylim(0,200)\n    ax.plot(angles, values, linewidth=1, linestyle='solid')\n    ax.fill(angles, values, 'b', alpha=0.1)\n    plt.title(Channel_Name)\n    plt.show()","358ccc07":"# function of creating word cloud\ndef word_cloud(Channel_Name):\n    Channel=data.loc[data['channelTitle']==Channel_Name]\n    tags_word = data.loc[data['channelTitle']==Channel_Name]['description'].to_string().lower()\n    word_tokens = word_tokenize(tags_word)\n    cloud = WordCloud(background_color = 'black', colormap=\"tab20b_r\",max_words=2000, max_font_size=40, random_state=42)\n    cloud.generate(' '.join(word_tokens))\n    \n    plt.figure(figsize = (10,10),facecolor = None)\n    plt.imshow(cloud)\n    plt.axis('off')\n    plt.title(\"\\nWord cloud for {}\\n\".format(Channel_Name), fontsize=20)\n    filtered_sentence = [w for w in word_tokens if not w in en_stopwords]\n    without_single_chr = [word for word in filtered_sentence if len(word) > 2]\n    Channel_Name = [word for word in without_single_chr if not word.isdigit()]","c748940d":"# scores of rank 1 channel\nMatrix2.head(1)\n","95ef6244":"channel_view=pd.DataFrame(data[['view_count','likes','dislikes','comment_count']].groupby(data['channelTitle']).mean())\nprint(channel_view.loc[channel_view.index=='Binging with Babish'])\nspidermap('Binging with Babish')\nword_cloud('Binging with Babish')\n\n","27a04cc4":"print(channel_view.loc[channel_view.index=='MrBeast'])\nspidermap('MrBeast')\nword_cloud('MrBeast')","527dd02b":"\n\nYouTube nowadays is the largest video hosting website, and it has profound influences on the U.S. society in all aspects. Therefore analyzing of youtube\u2019s dataset become significant for companies to analyze the social trends and make a prediction for future strategic business plannings.\n\nOur overall objectives are investors and advertisers. We will provide business recommendations for them, including which channels have more business value and what people are concerning about now.\n\nFirstly, we will help them find the category that have relatively higher business potential. We drafted four judgment criterias, which are the number of videos in each category, average view count, variance of view count, average time interval(trending_date-publishedAt).\n\nSecondly, we will help them find out most favoured and hottest channels by four drafted judgment criterias including the appearance frequency, like to dislike Ratio, growth rate, sentiment polarity. The goal is that advertisers can choose to sign contract with these channels to make profit. In addition, they can choose these channels\/YouTubers to see if they match the characteristics of their products and find potential customers. For example, we find that 'Billie Eilish' goes on trending every day this month, so we look up this channel, and found that is the most potential and popular new star in the U.S, who contains very strong and unique personal style. This information will bring up a very clear target customer for some business, like clothing buyers who can recommend similar style colthes to these audience.\n","807fb49b":"This plot shows that Entertainment category has the highest amount of trending videos. The amount of entertainment videos is close to 3000, which is almot one third of the total number of trending videos and is more than twice of the sencond. This indicates that entertainment is the most trending category that people are focusing on, but it may be the result of large scale of entertainment videos on YouTube website, so we would like to see average view count of different categories.\n","0631335f":"This indicator is the total amout of videos on the trending board grouped by different Categories. It describes which categories are dominating the trending broad, providing an insight of how popular each category is on the YouTube website.\n","515b21f8":"The variance of view count uses the standard deviation of view counts of different categories. It describes how fluctuant the level of views is for different categories. In this part, we also plot the distributions of numbers of likes, dislikes and comments that every video received as a complementary of views.","0134e08a":"## Average view count","1ceae725":"## Average time interval","dc8ca340":"## Recommendation 1: Binging with Babish","288c2dba":"## Appearance Frequency","40471201":"## Data Processing","75b8229c":"\n\nFrom the spider map, Binging with Babish Channel reflects excellent performance in all four indicators, growth rate, frequency, sentiment scores, and likes_to dislikes ratios and has over 4 million subscribers. Andrew Rea is the host of \"Binging with Babish\" which focuses on adapting foods from pop culture, which sounds fluffy but is surprisingly dense with useful cooking information. For instance, demonstrates how to make pasta from scratch, among many other useful techniques. The lists of equipment and shopping are comprehensive and the content and quality of the video the design of video with text attract what the audience's preference. The host of Binging with Babish, Andrew Rea has a strong personal brand and his video mostly goes to all the cooks or even househusbands and housewives that want to be able to make something new receipts. What impressed me most is that the channel focuses on how to make the best efforts on creating delicious dishes with the most precise step descriptions efficiently and effectively.\n","7423f355":"## Matrix Evaluation","2f6357f8":"## Growth Rate","ade860c4":"\n\nBy looking at the distribution of each attribute, we developed some insights:\n\n- Some categories have obviously high variance, such as music, entertainments, film&Animation, etc. This present the variety of videos in these categories, which polarization is very serious. Oppositely, some categories have very condensed distribution, like travel, Pets & Animals, auto &vehicles. This may because these categories have smaller but more stable audience. Sports got in the top three show up frequency on the last graph, but all four distributions are lower than others. According to financial theory, the more fluctuant the factor is, the more value we can gain from investment. For example, the music and film category have high variance, so they should also be considered to invest.\n- Comparing to the count view by category, which Entertainment has the highest value, Music becomes the top category on all four attributes based on the distributions, so this show that Entertainment may not be the most popular category, only because it has the largest video base so it can have so many videos go up on trending, but music gets the most attention from people.\n- Gaming is very prominent in the 'comment count', so do music,while Pet also have the lowest view and number of video, but also a significant trend in 'comment count'. This may reflect that these categories have higher interactive between the audiences.\n\n","7d449941":"It is the top 1 channel in entertainment category and it can bring audience the most pleasure experience","02f1d8e1":"In the evaluation matrix, including appearance frequency, growth rate, likes to dislikes ratio, and sentiment polarity, we used the reverse rank of each attribute as its score for channels, then we summed up all the scores to get a final score of each channel to select most favorable and the hottest category to do further analysis.","d117e8a0":"Channel appearance frequency is the measurement of the frequency a Channel get on trending video during the period of trending date. The data connecting as lines represent whether this Channel shows up on trending video or not during a specific time period. The green color in Heatmap represents the average of view_count during each day of the Entertainment Channel.","51388efd":"## Sentiment Polarity","8c4a2f77":"\n\nAccording to the analysis we have done on pervious section, we would like to focus on Entertainment, since Entertainment is the top one Category.Similar to the analysis of Category, we also used four attributes to evaluate the channels, which include:\n\n- Appearance Frequency\n- Like to Dislike Ratio\n- Growth Rate\n- Sentiment Polarity\n\n","f3db7ab7":"## Variance of view count","78babb65":"\n\nAccording to the Matrixs there are several Channels we would like to focus on:\n\n- The top channel in Entertainment\n- The channel in Entertainment that is really interesting so we want to learn more   \n\nIn addition, we define a function to plot spider maps which show the sore of four analysis fields and word cloud to see what is the main topic of this channel.\n\n","d85570fd":"## Recommendation 2: MrBeast","07b10ae5":"In our report, we develped two major evaluation matrixs to analyze the value of categories and channels on YouTube so as to help investors and advertisers select channels that is worth to invest or cooperate. Based on the YouTube data we scrapyed from March to May, we found that entertainment category is the most valuable category with the best overall performance. So, we digged into entertainment category, and our finding was that Binging with Babish Channel is the most favourable and hot channel in entertainment category. As a result, we would like to recommend Binging with Babish channel to investers and advertisers, while we also recommend a controversial Channel, MrBeast, since it appears to has high attraction on people.","da634f35":"## Evaluation Matrix","de93e267":"## Objective","7bad553d":"View_count growth rate in Entertainment is the total number of view_count divided by the time interval from publishing date to trending date in a channel, which means how many views a channel get daily. We use the barplot to demostrate channels which have the capacity to become trending quickly.","5f62dab3":"\n\nTo have a better insight of this evaluation matrix, we created the bubble plot so that we can see the relations between each attributes and the overall location distribution. The x-axis represents the score for number of video getting on board, and y-axis is the score for time interval getting on board, the size is average view score and color is the standard deviation of view count.\n","b99aa3f8":"Video_id: the unique identity of a video     \nTrending_date: the date that video is ranked     \nTitle: the title of video of the video     \nChannel_title: the title of the channel which the video belongs to     \nCategory_id: the category of video, which can be looked up using the included JSON files     \nPublish_time: the time video was published     \nTags: the tags a video contains     \nViews: the number of views each video have     \nLikes: the number of like each video have     \nDislikes: the number of dislikes each video have     \nComment_count: the number of comment each video have     \nThumbnail_link: the link connected to the cover page     \nComments_disabled: if people can leave comments or not     \nRatings_disabled: if people can rate the video or not     \nDescription: description of the video     \n","aa7f5c39":"It is the hottest channel in entertainment category and always recieves people's attention quickly.","02c0e0b7":"We found MrBeast is a very controversial Channel. After we look up on YouTube, we learned this channel, which has 18 million subscribers already, is focusing on embressing public challenges such as let people siging fake petition, or giving $10000 to random people to see their reaction. It shows very high score of growth rate and high appearance frequency, but very low sentiment and like to dislike ratio. So if I am a blogger, I am very willing to write articles analyzing these behaviors because the score may be a valid reflection of this channel having potential business values to bring controversial topics to people and high site traffic.","ec005900":"# Introduction\n***","ade53e67":"In the evaluation matrix, including number of trending videos, average view count, variance of view count, and average time interval, we used the reverse rank of each attribute as its score for categories, then we summed up all the scores to get a final score of each category to select most valuable category to do further analysis.","bc60b16f":"## Data description","94dbb5da":"With music always be the top category, the Film shows a quit difference trends in these plots that it significantly high in the 'Dislikes'. When we look back to see the distribution we find film has very high variance. The reason behind this may because during these two month, some film or television works cause very high negative emotions of the audience.","2a7e5874":"In the plot, the channel which has a positive polarity to the videos means it may bring more pleasure watching experience for audience. The plot shows changes of polarities from negative to neutral and positive sentiment among Entertainment channels. Accordong to the plot we can see most of the channels are showing positive directions.\n","7c143131":"# Data Analysis Task 1: Category Selection\n***","5c435b50":"## Case Demo","0e96516c":"# Conclusion\n***","4e792ac2":"We calculated the time interval that a video takes to be trending by substracting published date from trending date. The average time interval for each category describes on average how fast a video can show up on the trending borad. This is also a important criterion that investors care about, because the longer time interval is, the larger the time cost will be.","42eed4e8":"\n\nFirst of all,in the dataset, we need to use an extra category_dictionary.json file to index the real category of each video. Then there are two columns have datetime value but not format as datetime, so we convert it to datetime. We check the dataset and NAs, and there are several rows with only \u2018video_id \u2019 exist but other columns show as NAs, so we simply delete these rows. Then there are still some NAs existing in \u2018Description\u2019 but that is due to the restriction by channels and that will not affect later analysis so we keep it in our dataset. In addition, there are some 0 between these numeric variables, but in general these cannot be 0, so we will check what happen to them, and we found restriction on these attributes.\n\n- Dropped null values generated during scraping and corrected time format\n- Pair the category ids with their names for further analysis\n- Dropped useless columns and removed unknown values which are shown as 0 in the data\n\n","30488e4c":"\n\nBy simply plot the heatmap we can see the correlations between view_count, likes, dislikes, and comment_count are colse to 1, suggesting that these four characteristics are highly related. So in the following assessment, we will take view_count as a representative factor.\n","159e9a80":"The top channels appear here are SkyBek, FoxSarhindi, Marvel Entertainment, etc. We may claim these are the topics of public attention trending in these two month because they got more views per day comparing to other channels.","3ebe51f2":"## Like to Dislike Ratio","6c409b9f":"\n\nIn the bubble plot, we can find out that the more trending videos a category has, the more likely it has a high variance as well as a higher average view count. It is resaonable based on statistical theories, but the game category is an exception. It shows that audience of gaming videos are loyal to certain video, so investors can also look at channels of gaming category. Besides, music is another category that investors who are not sensitive to long invest-return period can consider, because it performs well in other three aspects except the time interval.\n      \nIn our report, we selected entertainment category based on overvall performance.\n","1e21f712":"From the distribution of time intervals, we discovered that entire distribution is right-skewed, showing that although the most frequent interval is 2 days, average time interval is much higher than 2 days. This explains why in the line chart, all categories has a average time interval more than 4 days. For the music videos, they take more the longest time and the science takes the short time, nearly 4 days on average. This is because people watching sport video is more like to capture latest information, while music video's attraction decreases slower as time goes by.","6e3f7e80":"Likes_to_dislikes ratio is calculated as number of likes divided by dislikes, which could easily target the channels which have more potential to get audience pleasure.","27c6dac4":"This indicator is calculated by deviding the total view count by the number of videos of each category. It describes the average level of views for different categories. In this part, we also plot the average levels of likes, dislikes and comments as a complementary of views.","f9f540e9":"We collected the data day by day and each day the data file we saved contains 200 records. There are about 4000+ observations with 20+ CSV files so far, but we will keep scraping data from Youtube trending data. Our sample dataset has 15 columns, which include:","6b4dd10d":"# Data Analysis Task 2: Channel Selection\n***","4b731a1d":"For our analysis, we aimed to find out the top valuable categories and select one of them to do further study. So, we decided to look at following four attributes by category to assess categories and developed a matrix:\n\n- Number of trending videos\n- Average view count\n- Variance of view count\n- Average time interval(trending_date-publishedAt)\n","fa4437e6":"In order to get the data from youtube, we registered google developer account that we can have access to Google APIs. Then we used a script, which is reference from GitHub: https:\/\/github.com\/DataSnaek\/Trending-YouTube-Scraper, to collect data. This youtube scraper can scrape the most trending video from different countries, however, we will mainly focus on the US trending videos based on the data we collected through March and April 2019.\n","d668627a":"We intend to obtain a quick overall sense for what elements a channel performed to audience, So we could recommend a detailed trending YouTube Video image description to help investors and advertisers to identify those potential trending channels.\n\nBy using sentiment analyzer from NLTK, we can examine the tags' polarities of each channel in specifical category. Polarity in sentiment analysis refers to identifying sentiment orientation,positive,neutral,and negative.\n","c34d4da9":"## Number of Trending Videos"}}