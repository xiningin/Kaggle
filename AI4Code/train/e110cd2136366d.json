{"cell_type":{"a13e88c9":"code","587d858e":"code","f77019d3":"code","b6dcd9a0":"code","630e57eb":"code","025a01b1":"code","4dac9eea":"code","4e0a96cb":"code","5d5b1fa8":"code","59d272c1":"code","0dada231":"code","63fb67c7":"code","f6ba3b19":"code","3762bc38":"code","fae6b299":"code","f3b4ee05":"code","f85c8c05":"code","3c8c2f2d":"code","5a742ee2":"code","da176d0c":"markdown","c46faeae":"markdown"},"source":{"a13e88c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","587d858e":"from sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nimport warnings\nwarnings.simplefilter(\"ignore\")","f77019d3":"df = pd.read_csv(\"\/kaggle\/input\/disease-symptom-description-dataset\/dataset.csv\")","b6dcd9a0":"df.head()","630e57eb":"df[\"Symptoms\"] = 0","025a01b1":"records = df.shape[0]\nfor i in range(records):\n    values = df.iloc[i].values\n    values = values.tolist()\n    if 0 in values:\n        df[\"Symptoms\"][i] = values[1:values.index(0)]\n    else:\n        df[\"Symptoms\"][i] = values[1:]","4dac9eea":"df.head()","4e0a96cb":"column_values = df[['Symptom_1', 'Symptom_2', 'Symptom_3', 'Symptom_4',\n       'Symptom_5', 'Symptom_6', 'Symptom_7', 'Symptom_8', 'Symptom_9',\n       'Symptom_10', 'Symptom_11', 'Symptom_12', 'Symptom_13', 'Symptom_14',\n       'Symptom_15', 'Symptom_16', 'Symptom_17']].values.ravel()","5d5b1fa8":"symps = pd.unique(column_values)\nsymps = symps.tolist()\nsymps = [i for i in symps if str(i) != \"nan\"]","59d272c1":"symptoms = pd.DataFrame(columns = symps,index = df.index)","0dada231":"symptoms","63fb67c7":"symptoms[\"Symptoms\"] = df[\"Symptoms\"]","f6ba3b19":"for i in symps:\n    symptoms[i] = symptoms.apply(lambda x:1 if i in x.Symptoms else 0, axis=1)","3762bc38":"symptoms[\"Disease\"] = df[\"Disease\"]\nsymptoms = symptoms.drop(\"Symptoms\",axis=1)","fae6b299":"symptoms.head()","f3b4ee05":"train, test = train_test_split(symptoms,test_size=0.2)\nX_train = train.drop(\"Disease\",axis=1)\ny_train = train[\"Disease\"].copy()\nX_test = test.drop(\"Disease\",axis=1)\ny_test = test[\"Disease\"].copy()","f85c8c05":"rnd_forest = RandomForestClassifier()\nrnd_forest.fit(X_train,y_train)","3c8c2f2d":"cross_val_score(rnd_forest,X_train,y_train,cv=10).mean()","5a742ee2":"y_pred = rnd_forest.predict(X_test)\naccuracy_score(y_test,y_pred)","da176d0c":"## Creaing a coulmn with a list of symptoms for each row","c46faeae":"## Creating a DataFrame with symptoms as columns"}}