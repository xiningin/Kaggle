{"cell_type":{"4aa492e7":"code","fa5e29f5":"code","d44a11a4":"code","2bd82c47":"code","0150c5fa":"code","cb1729e3":"code","ae14b72c":"code","9a272c0e":"code","f9727aa2":"code","80f6a4c4":"code","5841d490":"code","240d05d4":"code","92eb4749":"code","e81dfc52":"code","64cc02a4":"code","f6a562f2":"code","1252c2f0":"code","721cfdad":"code","ac483309":"code","fb03e178":"code","7262296c":"code","de635bcf":"code","d8845a68":"code","6de1c8f7":"code","954ccc8a":"markdown","4f0b89ce":"markdown","22f1630d":"markdown","5104eff1":"markdown","a38bedaa":"markdown"},"source":{"4aa492e7":"# TensorFlow and tf.keras\nimport tensorflow as tf\n\n# Helper libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nprint(tf.__version__)\n","fa5e29f5":"test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntrain = pd.read_csv('..\/input\/digit-recognizer\/train.csv')","d44a11a4":"train.describe()","2bd82c47":"train.head()","0150c5fa":"test.describe()","cb1729e3":"test.head()","ae14b72c":"train.shape, train.shape","9a272c0e":"na = [15]\nfor n in na:\n    print(train[n:n+1].values[0][0])\n    plt.figure()\n    plt.imshow(train[n:n+1].values[0][1:].reshape(28,28))\n    plt.colorbar()\n    plt.grid(False)\n    plt.show()\n\n\n    \n    ","f9727aa2":"i_splt = int(len(train)*0.75);\nprint(i_splt)\n\ntrain_data = train.iloc[:i_splt,1:]\ntrain_data = train_data\/255\ntrain_label = train.iloc[:i_splt,0:1]\n\n\ndisplay(train_data.max().max() , train_data.min().min())\n\n\ntest_data = train.iloc[i_splt:,1:]\ntest_data = test_data\/255\ntest_label = train.iloc[i_splt:,0:1]\n\ndisplay(test_data.max().max() , test_data.min().min())\n","80f6a4c4":"eval_data = test\neval_data = eval_data\/255\neval_data.max().max() , eval_data.min().min()","5841d490":"print(f'training size: {len(train_data)}')\nplt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_data.iloc[i:i+1].values[0].reshape(28,28), cmap=plt.cm.binary)\n    plt.xlabel(train_label.iloc[i:i+1].values[0])\nplt.show()\n","240d05d4":"print(f'test size: {len(test_data)}')\nplt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(test_data.iloc[i:i+1].values[0].reshape(28,28), cmap=plt.cm.binary)\n    plt.xlabel(test_label.iloc[i:i+1].values[0])\nplt.show()","92eb4749":"plt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(eval_data[i:i+1].values.reshape(28,28), cmap=plt.cm.binary)\nplt.show()","e81dfc52":"model = tf.keras.Sequential([\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n","64cc02a4":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n","f6a562f2":"model.fit(train_data, train_label, epochs=10)\n","1252c2f0":"test_loss, test_acc = model.evaluate(test_data,  test_label, verbose=2)\n\nprint('\\nTest accuracy:', test_acc)\n","721cfdad":"dig_recog = tf.keras.Sequential([model, \n                                         tf.keras.layers.Softmax()])\n","ac483309":"predictions = dig_recog.predict(eval_data)\n","fb03e178":"result = pd.DataFrame([np.argmax(_) for _ in predictions], columns = ['Label'])\nresult.index.name = 'ImageId'\nresult.index = result.index +1","7262296c":"result","de635bcf":"result\n","d8845a68":"result.to_csv('submission.csv')","6de1c8f7":"pd.read_csv('submission.csv')","954ccc8a":"### Also check eval data","4f0b89ce":"### 75%-25% split for training data and test data.","22f1630d":"# MODELLLLL ","5104eff1":"# Preprocess train and test data","a38bedaa":"### Check data before feeding it to the model "}}