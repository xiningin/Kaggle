{"cell_type":{"03185e50":"code","66a36bcb":"code","0a76cdc6":"code","a45d0112":"code","88bb61be":"code","1826417e":"code","d2bfc056":"code","de3afc79":"code","96344cf4":"code","37565a09":"code","189dfc38":"code","cedc98b1":"code","389f3f4f":"code","f3fd0d76":"code","49e6561a":"code","2f933c66":"code","ac73ffef":"code","158bb182":"code","ddaca748":"code","dfaa642d":"code","3df3977e":"code","72bac2ba":"code","11b22c3e":"code","27738efa":"code","ddfc628c":"code","6fac8528":"code","68d83d1d":"code","95e35d9e":"code","45fc26fa":"code","85a603ca":"code","fc98ba8f":"code","05e02e76":"code","3ebf9d6f":"code","56e6818a":"code","fcb25039":"code","89327a63":"code","642f4d3a":"code","3a8971cf":"code","18a907d6":"code","8cd66238":"code","a28ee398":"code","e471fd2c":"code","cbcbb7ce":"code","108ef778":"code","62dbddac":"code","0897acce":"code","c7a5e8c0":"code","c4e58ca1":"code","60b4bb65":"code","85af4266":"code","106eecec":"code","8b68e164":"markdown","6eccd043":"markdown","a0fd4200":"markdown","bd97de29":"markdown","49cd5b1c":"markdown","79fae507":"markdown","afe1de3b":"markdown","b10dcde3":"markdown","c0716395":"markdown","7479c09f":"markdown","c6499481":"markdown","04fdb898":"markdown","c5c310f1":"markdown","f7bdf359":"markdown","92bd7704":"markdown","48442c0b":"markdown","d553479b":"markdown","fba2b3b9":"markdown","bccaec01":"markdown","e68dddd4":"markdown","2b75d99f":"markdown","c5bbbecc":"markdown","4c663f61":"markdown","19eafa0d":"markdown","0a8ccd24":"markdown","7a4e1225":"markdown","9f448774":"markdown","67c4fd85":"markdown"},"source":{"03185e50":"!pip install seaborn --upgrade","66a36bcb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0a76cdc6":"#Import libs\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport matplotlib.ticker as mticker\n%matplotlib inline\n\nimport seaborn as sns\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nprint(\"Setup Complete\")","a45d0112":"figtext_arg = dict(\n            horizontalalignment='center',\n            fontsize=12,\n            wrap=True,\n            alpha=0.65\n)","88bb61be":"#Data Load\n#-------------- Kaggle 2020 ---------------------\nkaggle2020File = \"..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\"\nkaggle2020 = pd.read_csv(kaggle2020File)\ndescriptions = kaggle2020.loc[0:1,:]\nkaggle2020 = kaggle2020.loc[1:,:]\n\n#-------------- Kaggle 2019 ---------------------\nkaggle2019File = '..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv'\nkaggle2019 = pd.read_csv(kaggle2019File)\nkaggle2019 = kaggle2019.loc[1:,:]\n\n#-------------- Kaggle 2018 ---------------------\nkaggle2018File = '..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv'\nkaggle2018 = pd.read_csv(kaggle2018File)\nkaggle2018 = kaggle2018.loc[1:,:]\n\n\nprint(\"Data loaded\")\npd.set_option('display.max_columns', None)","1826417e":"## Data preparation 2020\n\n#Single choice questions\nsingle = ['Q1','Q2','Q3','Q4','Q5','Q6','Q8','Q15', 'Q20', 'Q21', 'Q24']\n\n#Multiple choice questions\nmulti = ['Q7', 'Q14', 'Q16', 'Q17','Q23', 'Q31_A', 'Q37', 'Q39']\n\nselected_columns = single\n\nfor m in multi:\n    i = 1\n    while True:\n        qPart = (m+\"_Part_\"+str(i))\n        if qPart not in kaggle2020.columns:\n            break\n        selected_columns.append(qPart)\n        i = i+1\n    if m+\"_OTHER\" in kaggle2020.columns:\n        selected_columns.append(m+\"_OTHER\")\n\nkaggle2020 = kaggle2020.loc[:,selected_columns]\nkaggle2020.rename(\n    columns={\n        \"Q1\":\"Age\", \n        \"Q2\":\"Gender\", \n        \"Q3\":\"Country\", \n        \"Q4\":\"Education Level\", \n        \"Q5\":\"Role\", \n        \"Q6\":\"Programming Experience\", \n        \"Q8\":\"Recommended First Language\", \n        \"Q15\":\"ML Experience\", \n        \"Q20\":\"Company Size\", \n        \"Q21\":\"Company Data Scientists\", \n        \"Q24\":\"Yearly Compensation\"\n    }, inplace=True)\n#kaggle2020 = kaggle2020.loc[(kaggle2020.Role.isin(['Data Scientist','Student']))]\nprint(\"Kaggle 2020 data loaded\")","d2bfc056":"## Data preparation 2019\n\n#Single choice questions\nselected_columns = ['Q1','Q2','Q3','Q4','Q5','Q6','Q7', 'Q10','Q15', 'Q23']\nkaggle2019 = kaggle2019.loc[:,selected_columns]\nkaggle2019.rename(\n    columns={\n        \"Q1\":\"Age\", \n        \"Q2\":\"Gender\", \n        \"Q3\":\"Country\", \n        \"Q4\":\"Education Level\", \n        \"Q5\":\"Role\", \n        \"Q6\":\"Company Size\", \n        \"Q7\":\"Company Data Scientists\", \n        \"Q10\":\"Yearly Compensation\", \n        \"Q15\":\"Programming Experience\", \n        \"Q23\":\"ML Experience\"\n    }, inplace=True)\nprint(\"Kaggle 2019 data loaded\")","de3afc79":"## Data preparation 2018\n\n#Single choice questions\nselected_columns = ['Q1','Q2','Q3','Q4','Q6','Q9', 'Q25']\nkaggle2018 = kaggle2018.loc[:,selected_columns]\nkaggle2018.rename(\n    columns={\n        \"Q1\":\"Gender\", \n        \"Q2\":\"Age\", \n        \"Q3\":\"Country\", \n        \"Q4\":\"Education Level\", \n        \"Q6\":\"Role\",\n        \"Q9\":\"Yearly Compensation\",\n        \"Q25\":\"ML Experience\"\n    }, inplace=True)\nprint(\"Kaggle 2018 data loaded\")","96344cf4":"def percent(row, total):\n    row.Percent = (row.Count\/total[row.Year])\n    return row","37565a09":"ages2020 = kaggle2020[['Age', 'Gender']]\n\n#[Year, Gender]\nagesPerYear = pd.concat([\n    ages2020.Gender.value_counts(), kaggle2019.Gender.value_counts(),  kaggle2018.Gender.value_counts()], \n    keys=['2020', '2019', '2018'], \n    names=[\"Year\", \"Gender\"]\n).reset_index(name=\"Count\")\n\nagesPerYear = agesPerYear.replace({'Male':'Man', 'Female':'Woman'})\n\nagesPerYearSum = agesPerYear.groupby('Year').Count.sum()\n\nagesPerYear['Percent'] = pd.Series(dtype='float64')\nagesPerYear = agesPerYear.apply(percent, args=(agesPerYearSum,), axis=1)\nagesPerYear = agesPerYear.sort_values(by=['Year','Percent'], ascending=[True, False])\nagesPerYear.loc[(agesPerYear.Year == '2020')][['Gender','Count']].sort_values('Count')","189dfc38":"sns.set_theme(style=\"ticks\")\nf, ax = plt.subplots(figsize=(10,6))\nsns.despine(f)\n\nages2020 = ages2020.sort_values(by=['Age','Gender'])\nsns.histplot(\n    ages2020,\n    x=\"Age\", hue=\"Gender\", hue_order=['Man','Woman', 'Nonbinary','Prefer to self-describe', 'Prefer not to say'],\n    multiple=\"stack\",\n    palette=\"muted\",\n    log_scale=False,\n    linewidth= .5\n)\n\nplt.ylabel('Participants')\n\nplt.title(\"Age Groups and Gender\")\n\nplt.figtext(0.5,0,\n            \"Figure 1: Representation of participants age groups and proportion of each gender per age group.\",\n            **figtext_arg\n           )\nplt.show()","cedc98b1":"plt.figure(figsize=(12,6))\nsns.set_theme(style=\"whitegrid\")\n\nbars = sns.barplot(\n    data=agesPerYear,\n    x='Year', y='Percent', hue='Gender',\n    order=['2018','2019','2020'],\n    palette=\"Set2\",\n    linewidth= 0\n)\nsns.despine(left=False)\nbars.set_ylim(0, 1)\n\nbars.yaxis.set_major_locator(mticker.FixedLocator(bars.get_yticks().tolist()))\nyTicksLabels = ['{:.0%}'.format(x) for x in bars.get_yticks()]\nbars.set_yticklabels(yTicksLabels)\n\nplt.ylabel('Proportion')\n\nplt.title('Genders per Year')\nplt.figtext(0.5,0,\n            \"Figure 2: Comparison of genders proportion per year.\",\n            **figtext_arg\n           )\n\nplt.show()","389f3f4f":"countries = kaggle2020.loc[(kaggle2020.Country != \"Other\")].Country.value_counts().reset_index(name=\"Count\").sort_values(by=[\"Count\"], ascending=False).rename(columns={\"index\":\"Country\"})\n\ncountriesCodes = {\n    'Argentina':'ARG',\n    'Australia':'AUS',\n    'Bangladesh':'BGD',\n    'Belarus':'BLR',\n    'Belgium':'BEL',\n    'Brazil':'BRA',\n    'Canada':'CAN',\n    'Chile':'CHL',\n    'China':'CHN',\n    'Colombia':'COL',\n    'Egypt':'EGY',\n    'France':'FRA',\n    'Germany':'DEU',\n    'Ghana':'GHA',\n    'Greece':'GRC',\n    'India':'IND',\n    'Indonesia':'IDN',\n    'Iran, Islamic Republic of...':'IRN',\n    'Ireland':'IRL',\n    'Israel':'ISR',\n    'Italy':'ITA',\n    'Japan':'JPN',\n    'Kenya':'KEN',\n    'Malaysia':'MYS',\n    'Mexico':'MEX',\n    'Morocco':'MAR',\n    'Nepal':'NPL',\n    'Netherlands':'NLD',\n    'Nigeria':'NGA',\n    'Other':'',\n    'Pakistan':'PAK',\n    'Peru':'PER',\n    'Philippines':'PHL',\n    'Poland':'POL',\n    'Portugal':'PRT',\n    'Republic of Korea':'KOR',\n    'Romania':'ROU',\n    'Russia':'RUS',\n    'Saudi Arabia':'SAU',\n    'Singapore':'SGP',\n    'South Africa':'ZAF',\n    'South Korea':'PRK',\n    'Spain':'ESP',\n    'Sri Lanka':'LKA',\n    'Sweden':'SWE',\n    'Switzerland':'CHE',\n    'Taiwan':'TWN',\n    'Thailand':'THA',\n    'Tunisia':'TUN',\n    'Turkey':'TUR',\n    'Ukraine':'UKR',\n    'United Arab Emirates':'ARE',\n    'United Kingdom of Great Britain and Northern Ireland':'GBR',\n    'United States of America':'USA',\n    'Viet Nam':'VNM'\n}\n\ndef countryCode(row):\n    row.Code = countriesCodes[row.Country]\n    return row\n\ncountries['Code'] = ''\ncountries = countries.apply(countryCode, axis='columns')","f3fd0d76":"topCountries = countries.loc[:9,:]\ntopCountries.Country = topCountries.Country.map(lambda c: c if (len(c) <= 20) else c[0:17]+\"...\")\ntopCountries.insert(topCountries.shape[1], 'Percent', topCountries.Count\/kaggle2020.shape[0])\n#topCountries.head(20)","49e6561a":"plt.figure(figsize=(6,4))\nsns.set_theme(style=\"white\")\nbars = plt.barh(topCountries.Country, topCountries.Count, color=\"green\")\nplt.xlabel(\"Count\")\nplt.yticks(rotation=30)\n\nfor c in topCountries.index:\n    plt.annotate(\n        f\"{topCountries.loc[c].Percent*100:.2f}%\",\n        xy=(bars[c].get_width(), bars[c].get_y()+(bars[c].get_height()\/2)),\n        va='center',\n        ha='left'        \n                )\nsns.despine(left=False, bottom=False)\n\nplt.xlabel('Participants')\nplt.title('Top 10 Countries')\n\nplt.figtext(0.5,-0.1,\n            \"Figure 3: The ten countries with more participants in the survey 2020.\",\n            **figtext_arg\n           )\n\nplt.show()","2f933c66":"fig = px.choropleth(countries, locations=\"Code\",\n                    color=\"Count\", # lifeExp is a column of gapminder\n                    hover_name=\"Country\", # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.speed,\n                    height=500,\n                    template='seaborn',\n                    labels = {'Count':'# Responses'}\n                   )\n\nfig.update_layout(title={\n    'text': \"<b>Participating Countries<\/b>\",\n    'y': 0.94,\n    'x': 0.5,\n    'yanchor': 'top',\n    'xanchor': 'center',\n    'font' : dict (\n        family='verdana, arial, sans-serif',\n        size = 13,\n        color= 'rgba(0,0,0,0.65)'\n    )\n})\n\nfig.update_layout(annotations=[\n    go.layout.Annotation(\n        showarrow=False,\n        text='Figure 4: Map of number of responses by countries.',\n        xanchor='center',\n        x=0.5,\n        yanchor='bottom',\n        y=-0.1,\n        font = dict (\n            size = 12,\n            color= 'rgba(0,0,0,0.55)'\n        )\n    )\n])\nfig.show(config={'staticPlot':True})","ac73ffef":"edu = kaggle2020['Education Level'].fillna('I prefer not to answer').value_counts().reset_index(name=\"Count\").rename(columns={\"index\":\"Level\"})\nedu = edu.rename(index={0:'b',1:'c',2:'a',3:'e',4:'d',5:'g',6:'f'}).sort_index()\n\nedu['Percent'] = edu.Count\/(kaggle2020.shape[0])\n#edu","158bb182":"plt.figure(figsize=(9,7))\nsns.set_theme(style=\"whitegrid\")\n\nbars = sns.barplot(x='Count', y='Level', data=edu)\n\nfor e in range(len(edu)):\n    plt.annotate(\n        f\"{edu.iloc[e].Percent*100:2.3}%\",\n        xy=(bars.patches[e].get_width(), bars.patches[e].get_y()+(bars.patches[e].get_height()\/2)),\n        va='center',\n        ha='left'        \n    )\nplt.xlabel('Participants')\nplt.ylabel('')\nsns.despine(left=False, bottom=False)\nplt.xticks(np.arange(0,8001,500))\n\nxTicksLabels = ['{:.2}'.format(x)+'k' for x in bars.get_xticks()\/1000]\nbars.set_xticklabels(xTicksLabels)\n\nplt.title('Formal Education')\nplt.figtext(0.5,0,\n            \"Figure 5: Representation of the highest formal education level of participants.\",\n            **figtext_arg\n           )\n\nplt.show()","ddaca748":"educationPerRole = kaggle2020.loc[:,['Role','Education Level']].dropna()\neducationPerRole = educationPerRole.groupby(['Role','Education Level']).size().reset_index(name=\"Count\")\n\ntotal = educationPerRole.groupby('Role').Count.sum().reset_index(name=\"Total\")\n\neducationPerRole = educationPerRole.join(total.set_index('Role'), on='Role')\neducationPerRole['Percent'] = educationPerRole.Count\/educationPerRole.Total\n\neducationPerRole_wide = educationPerRole.pivot(index='Role', columns='Education Level', values='Percent')\neducationPerRole_wide.rename(columns={'Some college\/university study without earning a bachelor\u2019s degree':'Some college\/university study without\\n earning a bachelor\u2019s degree'}, inplace=True)\ncolumns = [\n    'I prefer not to answer',\n    'No formal education past high school',\n    'Some college\/university study without\\n earning a bachelor\u2019s degree',\n    'Professional degree',\n    'Bachelor\u2019s degree',\n    'Master\u2019s degree',\n    'Doctoral degree'\n]\n\norder=[\n    'Research Scientist',\n    'Statistician',\n    'Data Scientist',\n    'Machine Learning Engineer', \n    'Other',\n    'Data Engineer',\n    'Product\/Project Manager',\n    'Currently not employed',\n    'Data Analyst',\n    'Software Engineer',\n    'Student',\n    'DBA\/Database Engineer',\n    'Business Analyst'\n]\n\neducationPerRole_wide = educationPerRole_wide.reindex(order).reindex(columns=columns)","dfaa642d":"plt.figure(figsize=(10,5))\n\nbars = sns.heatmap(educationPerRole_wide, \n            annot=True, \n            fmt='.2%', \n            yticklabels='auto', \n            cmap=sns.color_palette(\"coolwarm_r\", as_cmap=True),\n            center=.2\n           )\nplt.xlabel('')\nplt.ylabel('')\nplt.title('Role vs Formal Education')\nplt.figtext(0.5,-0.6,\n            \"Figure 6: Heatmap plot comparing the proportion of each formal education level in each role.\",\n            **figtext_arg\n           )\n\nplt.show()","3df3977e":"activities = pd.DataFrame()\n\nfor c in kaggle2020.columns:\n    if(c.startswith(\"Q23_\")):\n        act = kaggle2020[c].value_counts()\n        activities = activities.append({'Activity':act.index[0], 'Count':act[0], 'Type':'Use'}, ignore_index=True)\n        \nactivities = activities.sort_values(by='Count', ascending=False)\nactivities['Percent'] = activities.Count\/activities.Count.sum()\nactivities = activities.reset_index(drop=True)\n#activities","72bac2ba":"plt.figure(figsize=(2,8))\nsns.set_theme(style=\"white\")\n\nbars = sns.histplot(data=activities,\n                    x='Type',\n                    hue='Activity',\n                    multiple='stack',\n                    weights=activities['Count'],\n                    legend=False,\n                    palette= sns.color_palette(\"crest\", as_cmap=False, n_colors=8)\n                   )\nsns.despine(left=True, bottom=False)\nplt.xlabel('')\nplt.ylabel('')\nplt.yticks([])\nplt.xticks([])\n\nplt.title('Data Science and ML Activities', x=3.5)\nplt.figtext(3,0.08,\n            \"Figure 7: Activities reported as important part of participants role at work.\",\n            **figtext_arg\n           )\n\nbars.patches.reverse()\n\nfor a in activities.index:\n    plt.annotate(\n        \" - \"+f\"{activities.loc[a].Percent*100:2.3}%\"+': '+activities.loc[a].Activity,\n        xy=(\n            bars.patches[a].xy[0]+bars.patches[a].get_width(), \n            bars.patches[a].xy[1]+bars.patches[a].get_height()\/2\n        ),\n        va='center',\n        ha='left'        \n    )\nplt.show()","11b22c3e":"programmingExp = kaggle2020.loc[:,['Programming Experience']].value_counts().reset_index(name=\"Count\")\nprogrammingExp['Percent'] = programmingExp.Count\/programmingExp.Count.sum()\n#programmingExp","27738efa":"plt.figure(figsize=(10,5))\n\nbars = sns.barplot(x='Count', y='Programming Experience', data=programmingExp, order=['I have never written code', '< 1 years', '1-2 years', '3-5 years',\n       '5-10 years', '10-20 years', '20+ years'])\n\nfor e in range(len(programmingExp)):\n    plt.annotate(\n        f\"{programmingExp.iloc[e].Percent*100:2.3}%\",\n        xy=(bars.patches[e].get_width(), bars.patches[e].get_y()+(bars.patches[e].get_height()\/2)),\n        va='center',\n        ha='left'        \n    )\n\nsns.despine(left=False, bottom=False)\nplt.xticks(np.arange(0,5001,500))\n\nxRange = np.arange(0,5001,500)\nplt.xticks(xRange, [ '{:4.1f}'.format(x\/1000)+'k' for x in xRange])\n\nplt.xlabel('Participants')\nplt.ylabel('Experience Time')\nplt.title('Programming Experience')\nplt.figtext(0.5,-0.05,\n            \"Figure 8: Experience time of participants with programming.\",\n            **figtext_arg\n           )\nplt.show()","ddfc628c":"mlExp = kaggle2020.loc[:,['ML Experience']].value_counts().reset_index(name=\"Count\")\nmlExp['Percent'] = mlExp.Count\/mlExp.Count.sum()\n#mlExp","6fac8528":"plt.figure(figsize=(10,5))\n\nbars = sns.barplot(x='Count', y='ML Experience', \n                   data=mlExp, \n                   order=['I do not use machine learning methods', 'Under 1 year', '1-2 years','2-3 years', '3-4 years','4-5 years', '5-10 years', '10-20 years', '20 or more years']\n                  )\n\nfor e in range(len(mlExp)):\n    plt.annotate(\n        f\"{mlExp.iloc[e].Percent*100:2.3}%\",\n        xy=(100+bars.patches[e].get_width(), bars.patches[e].get_y()+(bars.patches[e].get_height()\/2)),\n        va='center',\n        ha='left'        \n    )\n\nsns.despine(left=False, bottom=False)\n\nxRange = np.arange(0,7001,500)\nplt.xticks(xRange, [ '{:4.1f}'.format(x\/1000)+'k' for x in xRange])\n\nplt.xlabel('Participants')\nplt.ylabel('Experience Time')\nplt.title('ML Experience')\nplt.figtext(0.5,-0.05,\n            \"Figure 9: Experience time of participants using machine learning methods.\",\n            **figtext_arg\n           )\nplt.show()","68d83d1d":"languages = pd.DataFrame()\n\nfor c in kaggle2020.columns:\n    if(c.startswith(\"Q7_\")):\n        lang = kaggle2020[c].value_counts()\n        languages = languages.append({'Language':lang.index[0], 'Count':lang[0], 'Type':'Use'}, ignore_index=True)\n\nfor c in kaggle2020['Recommended First Language'].value_counts().items():\n    languages = languages.append({'Language':c[0], 'Count':c[1], 'Type':'Recommend as First'}, ignore_index=True)\n\nlanguages = languages.sort_values(by=['Count'], ascending=False)\nlanguages['Percent'] = languages.Count\/kaggle2020.shape[0]","95e35d9e":"\nbars = sns.catplot(x='Language', y='Count', hue='Type', data=languages, kind='bar', height=5, aspect=3, legend_out=False)\n\nb = bars.axes.ravel()[0]\nb.patches.sort(key=lambda x: x.get_height(), reverse=True)\n\nfor e in range(len(languages)):\n    plt.annotate(\n        f\"{languages.iloc[e].Percent*100:2.1f}%\",\n        xy=(b.patches[e].get_x()+(b.patches[e].get_width()\/2)+0.1, b.patches[e].get_height()),\n        va='bottom',\n        ha='center',\n        rotation=25\n    )\nplt.xlabel('Programming Language')\nplt.ylabel('Participants')\n\nplt.title('Programming Languages')\nplt.figtext(0.5,-0.09,\n            \"Figure 10: Representation of programming languages that are used (multiple choice) and the recommendations for a first programming language to learn.\",\n            **figtext_arg\n           )\n\nplt.show()","45fc26fa":"libs = pd.DataFrame()\n\nfor c in kaggle2020.columns:\n    if(c.startswith(\"Q14_\")):\n        lib = kaggle2020[c].value_counts()\n        libs = libs.append({'Lib':lib.index[0], 'Count':lib[0]}, ignore_index=True)\nlibs = libs.set_index('Lib').drop('None')\nlibs = libs.sort_values(by='Count', ascending=False)\n\n#libs.head(10)","85a603ca":"plt.figure(figsize=(10,5))\nsns.set_theme(style=\"whitegrid\")\n\nbars = sns.barplot(\n    x='Count', y=libs.index, \n    data= libs,\n    palette= sns.color_palette(\"icefire\",\n                               as_cmap=False, n_colors=11)\n)\n\nplt.ylabel('Tool')\nplt.xlabel('Participants')\n\nplt.title('Data Visualization Libs')\nplt.figtext(0.5,-0.05,\n            \"Figure 11: Data visualization libraries used on a regular basis.\",\n            **figtext_arg\n           )\n\nxRange = np.arange(0,13001,1000)\nplt.xticks(xRange, [ '{:4.0f}'.format(x\/1000)+'k' for x in xRange])\nplt.show()","fc98ba8f":"biTools = pd.DataFrame()\n\nfor c in kaggle2020.columns:\n    if(c.startswith(\"Q31_A_\")):\n        biTool = kaggle2020[c].value_counts()\n        biTools = biTools.append({'Tool':biTool.index[0], 'Count':biTool[0]}, ignore_index=True)\nbiTools = biTools.set_index('Tool').drop('None')\nbiTools = biTools.sort_values(by='Count', ascending=False)\n\n#biTools","05e02e76":"plt.figure(figsize=(12,6))\nsns.set_theme(style=\"whitegrid\")\n\nbars = sns.barplot(\n    x='Count', y=biTools.index, \n    data= biTools,\n    palette= sns.color_palette(\"icefire\",\n                               as_cmap=False, n_colors=16)\n)\n\nplt.ylabel('Tool')\nplt.xlabel('Participants')\n\nplt.title('Business Intelligence Tools')\nplt.figtext(0.5,-0.01,\n            \"Figure 12: Business intelligence tools used on a regular basis.\",\n            **figtext_arg\n           )\n\nxRange = np.arange(0,2001,100)\nplt.xticks(xRange, [ '{:4.0f}'.format(x) for x in xRange])\nplt.show()","3ebf9d6f":"mlAlgorithms = pd.DataFrame()\n\nfor c in kaggle2020.columns:\n    if(c.startswith(\"Q17_\")):\n        mlAlgorithm = kaggle2020[c].value_counts()\n        mlAlgorithms = mlAlgorithms.append({'Algorithm':mlAlgorithm.index[0], 'Count':mlAlgorithm[0]}, ignore_index=True)\nmlAlgorithms = mlAlgorithms.set_index('Algorithm').drop('None')\nmlAlgorithms = mlAlgorithms.sort_values(by='Count', ascending=False)\n\n#mlAlgorithms","56e6818a":"plt.figure(figsize=(12,6))\nsns.set_theme(style=\"whitegrid\")\n\nbars = sns.barplot(\n    x='Count', y=mlAlgorithms.index, \n    data= mlAlgorithms,\n    palette= sns.color_palette(\"icefire\",\n                               as_cmap=False, n_colors=16)\n)\n\n\nplt.ylabel('ML Algorithm')\nplt.xlabel('Participants')\n\nplt.title('ML Algorithms')\nplt.figtext(0.5,-0.01,\n            \"Figure 13: Machine learning algorithms used on a regular basis.\",\n            **figtext_arg\n           )\n\nxRange = np.arange(0,12001,1000)\nplt.xticks(xRange, [ '{:4.0f}'.format(x\/1000)+'k' for x in xRange])\nplt.show()","fcb25039":"mlFrameworks = pd.DataFrame()\n\nfor c in kaggle2020.columns:\n    if(c.startswith(\"Q16_\")):\n        mlFramework = kaggle2020[c].value_counts()\n        mlFrameworks = mlFrameworks.append({'Framework':mlFramework.index[0], 'Count':mlFramework[0]}, ignore_index=True)\nmlFrameworks = mlFrameworks.set_index('Framework').drop('None')\nmlFrameworks = mlFrameworks.sort_values(by='Count', ascending=False)\n\n#mlFrameworks","89327a63":"plt.figure(figsize=(12,6))\nsns.set_theme(style=\"whitegrid\")\n\nbars = sns.barplot(\n    x='Count', y=mlFrameworks.index, \n    data= mlFrameworks,\n    palette= sns.color_palette(\"icefire\",\n                               as_cmap=False, n_colors=16)\n)\n\n\nplt.ylabel('ML Framework')\nplt.xlabel('Participants')\nplt.title('ML Frameworks')\nplt.figtext(0.5,-0.01,\n            \"Figure 14: Machine learning frameworks used on a regular basis.\",\n            **figtext_arg\n           )\n\nxRange = np.arange(0,11001,1000)\nplt.xticks(xRange, [ '{:4.1f}'.format(x\/1000)+'k' for x in xRange])\nplt.show()","642f4d3a":"learningPlatforms = pd.DataFrame()\n\nfor c in kaggle2020.columns:\n    if(c.startswith(\"Q37_\")):\n        learningPlatform = kaggle2020[c].value_counts()\n        learningPlatforms = learningPlatforms.append({'Platform':learningPlatform.index[0], 'Count':learningPlatform[0]}, ignore_index=True)\nlearningPlatforms = learningPlatforms.set_index('Platform').drop('None')\nlearningPlatforms = learningPlatforms.sort_values(by='Count', ascending=False)\n#learningPlatforms.head(10)","3a8971cf":"plt.figure(figsize=(12,6))\nsns.set_theme(style=\"whitegrid\")\n\nbars = sns.barplot(\n    x='Count', y=learningPlatforms.index, \n    data= learningPlatforms,\n    palette= sns.color_palette(\"icefire\",\n                               as_cmap=False, n_colors=16)\n)\n\n\nplt.ylabel('Platform')\nplt.xlabel('Participants')\n\nplt.title('Platforms to Learn')\nplt.figtext(0.5,-0.01,\n            \"Figure 15: Platforms the participants had used to study\",\n            **figtext_arg\n           )\n\nxRange = np.arange(0,8001,500)\nplt.xticks(xRange, [ '{:4.1f}'.format(x\/1000)+'k' for x in xRange])\nplt.show()","18a907d6":"sourceMedias = pd.DataFrame()\n\nfor c in kaggle2020.columns:\n    if(c.startswith(\"Q39_\")):\n        sourceMedia = kaggle2020[c].value_counts()\n        sourceMedias = sourceMedias.append({'Media':sourceMedia.index[0], 'Count':sourceMedia[0]}, ignore_index=True)\nsourceMedias = sourceMedias.set_index('Media').drop('None')\nsourceMedias = sourceMedias.sort_values(by='Count', ascending=False)\n#sourceMedias.head(10)","8cd66238":"plt.figure(figsize=(12,6))\nsns.set_theme(style=\"whitegrid\")\n\nsns.barplot(\n    x='Count', y=sourceMedias.index, \n    data= sourceMedias,\n    palette= sns.color_palette(\"icefire\",\n                               as_cmap=False, n_colors=16)\n)\n\n\nplt.ylabel('Media')\nplt.xlabel('Participants')\n\nplt.title('Media Sources')\nplt.figtext(0.5,-0.01,\n            \"Figure 16: The favorites media sources of topics about machine learning and data science.\",\n            **figtext_arg\n           )\n\nxRange = np.arange(0,8001,500)\nplt.xticks(xRange, [ '{:4.1f}'.format(x\/1000)+'k' for x in xRange])\nplt.show()","a28ee398":"kaggle2020 = kaggle2020.loc[(kaggle2020.Role.isin(['Data Engineer', 'Data Scientist',\n       'Data Analyst', 'Machine Learning Engineer',\n       'Business Analyst']))]","e471fd2c":"def compensationCalc(row):\n    if pd.isna(row['Yearly Compensation']):\n        return row\n    vals = row['Yearly Compensation'].replace(',','').split('-')\n    if len(vals) == 2:\n        vals = (int(vals[0])+int(vals[1]))\/2\n    else:\n        vals = vals[0]\n    row['Value'] = float(vals)\n    return row","cbcbb7ce":"compensation = kaggle2020.loc[:,['Gender','Country','Education Level','Yearly Compensation']].dropna(subset=['Yearly Compensation'])\ncompensation['Yearly Compensation'] = compensation['Yearly Compensation'].replace({'$0-999': '0-999', '> $500,000':'500,000'})\ncompensation[\"Value\"] = pd.Series(dtype='float64')\ncompensation = compensation.apply(compensationCalc, axis='columns')","108ef778":"yearlyCompensation = compensation[['Yearly Compensation', 'Value']]\nyearlyCompensation = yearlyCompensation.sort_values(by=\"Value\")\nyearlyCompensation = yearlyCompensation.groupby('Yearly Compensation').Value.value_counts().reset_index(name='Count')","62dbddac":"plt.figure(figsize=(14,5))\nplt.xticks(rotation=90)\nsns.barplot(data = yearlyCompensation.sort_values(by='Value'), x='Yearly Compensation', y='Count')\n\nplt.ylabel('Participants')\nplt.title('Yearly Compensation')\nplt.figtext(0.5,-0.3,\n            \"Figure 19: The approximate yearly compensation of participants ($USD).\",\n            **figtext_arg\n           )\n\nplt.show()","0897acce":"countriesCompensation = compensation[['Country', 'Yearly Compensation', 'Value']]\ncountriesCompensation = countriesCompensation.sort_values(by=\"Country\")\n\ntopCountries = countriesCompensation.groupby(['Country']).Value.agg(['min','mean','median', 'max']).reset_index()\ntopCountries = topCountries.sort_values(by=['median', 'mean'], ascending=False)[:10]\n\ncountriesCompensation = countriesCompensation.loc[(countriesCompensation.Country.isin(topCountries.Country))]","c7a5e8c0":"plt.figure(figsize=(14,8))\n\nax = sns.boxplot(data=countriesCompensation, x='Country', y='Value', order=topCountries.Country)\nax.xaxis.set_ticks_position('bottom')\nax.yaxis.set_ticks_position('left')\n\nplt.xticks(rotation=45, horizontalalignment='right')\n\nyRange = np.append((np.arange(0,200000,20000)),(np.arange(200000,500001,50000)))\nplt.yticks(yRange, ['0']+[ '{:4.0f}'.format(x\/1000)+'k' for x in yRange[1:]])\nplt.xticks(plt.xticks()[0], topCountries.Country.map(lambda c: c if (len(c) <= 20) else c[0:17]+\"...\"))\n\n\nplt.title('Top Salaries Countries')\nplt.figtext(0.5,-0.125,\n            \"Figure 20: Yearly compensation of the ten countries with the highest mean salary.\",\n            **figtext_arg\n           )\n\nplt.show()","c4e58ca1":"educationCompensation = compensation[['Education Level', 'Yearly Compensation', 'Value']]\neducationCompensation = educationCompensation.loc[(educationCompensation['Education Level'].isin(['Doctoral degree','Master\u2019s degree','Bachelor\u2019s degree','Professional degree']))]\neducationCompensation = educationCompensation.sort_values(\"Education Level\")","60b4bb65":"plt.figure(figsize=(8,8))\n\nax = sns.boxplot(data=educationCompensation, x='Education Level', y='Value', order=['Doctoral degree','Master\u2019s degree','Bachelor\u2019s degree','Professional degree'])\nax.xaxis.set_ticks_position('bottom')\nax.yaxis.set_ticks_position('left')\n\nplt.xticks(rotation=45, horizontalalignment='right')\n\nyRange = np.append((np.arange(0,200000,20000)),(np.arange(200000,500001,50000)))\nplt.yticks(yRange, ['0']+[ '{:4.0f}'.format(x\/1000)+'k' for x in yRange[1:]])\n\nplt.title('Salaries per Formal Education')\nplt.figtext(0.5,-0.125,\n            \"Figure 21: Comparison of yearly compensation per formal education level.\",\n            **figtext_arg\n           )\n\nplt.show()","85af4266":"genderCompensations = compensation[['Gender', 'Country', 'Value']].loc[(compensation.Country.isin(topCountries.Country) & compensation.Gender.isin(['Man', 'Woman']))]\nothers = compensation[['Gender', 'Country', 'Value']].loc[((~compensation.Country.isin(topCountries.Country)) & compensation.Gender.isin(['Man', 'Woman']))]\nothers.Country = 'Others'\n\ngenderCompensations = pd.concat([genderCompensations, others])\n#genderCompensations","106eecec":"ax = sns.catplot(data=genderCompensations,\n            x='Country',\n            y='Value',\n            hue='Gender',\n            order=(np.append(topCountries.Country,['Others'])),\n            kind='box',\n            height=6,\n            aspect=2.8\n           )\n\nax.axes.ravel()[0].xaxis.set_ticks_position('bottom')\nax.axes.ravel()[0].yaxis.set_ticks_position('left')\n\nplt.xticks(rotation=45, horizontalalignment='right')\nyRange = np.append((np.arange(0,200000,20000)),(np.arange(200000,500001,50000)))\nplt.yticks(yRange, ['0']+[ '{:4.0f}'.format(x\/1000)+'k' for x in yRange[1:]])\nplt.xticks(plt.xticks()[0], np.append(topCountries.Country.map(lambda c: c if (len(c) <= 20) else c[0:17]+\"...\"),['Others']))\n\nplt.title('Salaries per Gender')\nplt.figtext(0.5,-0.25,\n            \"Figure 22: Comparison of mean yearly compensation by gender in the countries with a highest mean salary.\",\n            **figtext_arg\n           )\n\nplt.show()","8b68e164":"---","6eccd043":"## 4.1. Activities##\nThe first point here shows how interdisciplinary Data Science is. The **Figure 7** represents the important activities at work and evidences the multidisciplinary in the data science domain, where the three top activities involve business, programming, and statistic background.","a0fd4200":"## 4.6. ML Frameworks##\n**Figure 14** shows the machine learning frameworks used regularly. The Scikit-learn, in the first position, is an easy-to-learn framework and very recommended to those who are just starting. It can be applied in complex situations too but doesn't have some optimizations and advanced options.","bd97de29":"# **3. Profile**\nThe first topic analyzed is the profile of Data Scientists, with information about who they are, where they are from, and their formal education level.","49cd5b1c":"Considering only the top 10 countries in compensation, the median salary is between 90 thousand and 100 thousand dollars a year. The United States of America has the highest median compensation, followed by Switzerland and Israel (see **Figure 20**).","79fae507":"# **6. Conclusion**\n\nData Science and Machine Learning are recent fields that involve multiple disciplines and can be applied in several contexts. The professionals usually invest in their formal studies and use online platforms to stay knowledgeable. In fact, even this field has some antiquated problems about genders, it's very promising and attractive to aspirings in technology.","afe1de3b":"## 4.5. ML Algorithms##\nIn the list of most used Algorithms (see **Figure 13**), the two first positions are related to some basics algorithms for data science and machine learning, as Linear Regression and Decision Tree. Although they are considered basic algorithms, they are very useful from simple to complex cases and can be used in conjunction with other algorithms or even as a basis for creating another one.","b10dcde3":"# **5. Market**\n\nThe third major topic in this analysis is the job market. In this part, the dataset was filtered selecting just the participants that are currently working as a Data Engineer, Data Scientist, Data Analyst, Machine Learning Engineer, or Business Analyst.","c0716395":"# **2. Key Results**\n* Most professionals are young and do not have many years of experience.\n* There is a gender barrier. Even though it's changing, it's still a problem.\n* Formal education is really valued. However, online courses are helpful allies to those who want to start or study specific subjects.\n* The activities are interdisciplinary. Be curious and open to learning different contexts are important characteristics.\n* Python is the most recommended programming language to start.\n* It is important to understand the basics of machine learning algorithms. They are used to solve complex problems as well.\n* Data science and machine learning are emerging jobs with a big growth rate and great compensation.\n* Some countries, like Canada, have a good salary policy. Unfortunately, most countries still have gender-discriminatory compensations. \n","7479c09f":"## **1.1. Kaggle**\nKaggle is a community for people interested in data science and artificial intelligence with an on-line platform that provide a lot of challenges. Furthermore, it offers courses about basic concepts, public datasets of many subjects, and environments to practice.","c6499481":"## 5.1. Yearly Compensation##\n\nThe salaries reported are very varied, as can be seen **in Figure 19**. One of the aspects with a higher impact on salary is the location. In the United States of America, 25% earn more than 150 thousand dollars a year. In the Philippines, on the other hand, only 25% earn more than 15 thousand dollars per year.","04fdb898":"## 4.8. Favorites Media Sources##\nIn the favorites media sources, the most voted option was the Kaggle platform. However, this analysis focus on the other options trying to avoid possible bias, since the surveys were focused on and applied to this platform members.\n\nHaving that in mind, other platforms like YouTube and even blogs have been very important ways to get content and news about topics related to data science and machine learning.\n\nOne reason for this is the amount of good content and the wide diversity of them. Nowadays, is possible to access free classes, courses, and explanations of almost every data science topic. Also, there are a lot of data scientists and machine learning professionals sharing their experiences, details of activities, and how are professional life in this field.","c5c310f1":"In the first part of this analysis, the Profile, was addressed the gap between the genders and these differences manifest once again in the salaries as shown in **Figure 22**. Considering the case of the United States of America, the median is equal for women and men, but the mean is over 20% more for men. In the case of Germany, the median is, approximately, 36% higher for men than women.","f7bdf359":"# **7. Sources**\n1. [2018 Kaggle Machine Learning & Data Science Survey](https:\/\/www.kaggle.com\/kaggle\/kaggle-survey-2018\/)\n\n2. [2019 Kaggle Machine Learning & Data Science Survey](https:\/\/www.kaggle.com\/c\/kaggle-survey-2019)\n\n3. [2020 Kaggle Machine Learning & Data Science Survey](https:\/\/www.kaggle.com\/c\/kaggle-survey-2020)\n\n4. [2020 LinkedIn U.S. Emerging Jobs Report](https:\/\/business.linkedin.com\/content\/dam\/me\/business\/en-us\/talent-solutions\/emerging-jobs-report\/Emerging_Jobs_Report_U.S._FINAL.pdf)\n\n5. [Worldometer - Countries in the world by population (2021)](https:\/\/www.worldometers.info\/world-population\/population-by-country\/)\n\n6. [Data Science Nigeria](https:\/\/www.datasciencenigeria.org\/)","92bd7704":"## **1.2. The Surveys**\nFor this analysis, it was used the data from the Kaggle Machine Learning & Data Science Survey of 2018\u00b9, 2019\u00b2, and, particularly, 2020\u00b3. The surveys were realized by the Kaggle and they were shared on the community, by members e-mail list, and on Kaggle's Twitter account.\n\nThe surveys had 23,859 (2018), 19,717 (2019), and 20,036 (2020) valid responses from participants in 171 different countries and territories. To protect the participant's privacy, the information was anonymized and free-form responses weren't included.","48442c0b":"The formal education level is a valued feature and has influence on the yearly compensation. In the top 10 countries, a doctor earns on average 32% more than a master, approximately. Considering all countries, the difference between a doctoral and a master's degree can be over 50%.","d553479b":"## 4.3. Programming Languages##\n\nThe most used languages are Python (in the first place with 77.5%) and R (in the third place with 21.3%) for programming purposes and SQL(in the second place with 37.6%) to query data. It is worth mentioning it's not rare to use more than one language in the same project.\n\nIn the most recommended as a first programming language to an aspiring data scientist, Python was chosen by 71.1% of participants. Python is a versatile language, with a lot of tools for data science and a well-established community. It makes that a useful option to start, with so many resources to the learning process and opportunities to apply.","fba2b3b9":"## 3.3. Formal Education##\nAs it is an area that involves a lot of research, formal education in data science ends up being more valued, especially in activities requiring skills usually employed in the academy and scientific methodologies. Also, it is necessary to have a solid background, generally about statistics and IT, to work with the most requested technologies.\n\n**Figure 5** shows the education level reported by participants. Whilst **Figure 6** presents a comparison between role and the level of formal education.","bccaec01":"# **4. Technologies**\nIn this topic, the research was referring to the participant's knowledge, experience, and which tools and technics they are using. Many subjects use as a basis multiple-choice questions. For that reason, you may notice cases where the percentage total is over 100%.","e68dddd4":"<style>\n    p {text-align: justify !important; text-indent: 2em}\n    img {display: block; margin-left: auto; margin-right: auto}\n<\/style>","2b75d99f":"## 4.4. Data Visualization and Business Intelligence##\nThe **Figure 11** and **Figure 12** comprehend the tools the participants are regularly using in data visualization and business intelligence, respectively. In these cases, it's not recommendations, but it helps to identify trends.\n\nFor data visualization, the most used libraries are Matplotlib and Seaborn. In the business intelligence case, the most used tools are Tableau and Microsoft Power BI.","c5bbbecc":"# **1. Overview**\n\nData Science is a multidisciplinary field focusing to collect information, detect patterns and generate knowledge from data sets.  Considering the huge growth of the area in the last few years, new techniques and tools are being developed every moment.\n\nWith the objective of have an overview of the data science market to the aspirings and find out the study options most used, was made an analysis with data from the Kaggle platform. The data used was provided by data science and machine learning surveys of 2018, 2019, and, mainly, 2020.\n\nThis work address three major topics: Profile, Technologies, and Market.","4c663f61":"## 4.7. Platforms to Learn##\nDespite the fact of a higher level of formal education being appreciated, on-line courses are also very popular. These learning platforms are very useful, especially for those who want to learn a specific subject or get an introduction to new technology.","19eafa0d":"# **Table of Contents**\n\n1. [Overview](#1.-Overview)<br>\n1.1. [Kaggle](#1.1.-Kaggle)<br>\n1.2. [The Surveys](#1.2.-The-Surveys)<br>\n2. [Key Results](#2.-Key-Results)<br>\n3. [Profile](#3.-Profile)<br>\n3.1. [Ages and Genders](#3.1.-Ages-and-Genders)<br>\n3.2. [Countries](#3.2.-Countries)<br>\n3.3. [Formal Education](#3.3.-Formal-Education)<br>\n4. [Technologies](#4.-Technologies)<br>\n4.1. [Activities](#4.1.-Activities)<br>\n4.2. [Experiences](#4.2.-Experiences)<br>\n4.3. [Programming Languages](#4.3.-Programming-Languages)<br>\n4.4. [Data Visualization and Business Intelligence](#4.4.-Data-Visualization-and-Business-Intelligence)<br>\n4.5. [ML Algorithms](#4.5.-ML-Algorithms)<br>\n4.6. [ML Frameworks](#4.6.-ML-Frameworks)<br>\n4.7. [Platforms to Learn](#4.7.-Platforms-to-Learn)<br>\n4.8. [Favorites Media Sources](#4.8.-Favorites-Media-Sources)<br>\n5. [Market](#5.-Market)<br>\n5.1. [Yearly Compensation](#5.1.-Yearly-Compensation)<br>\n6. [Conclusion](#6.-Conclusion)<br>\n7. [Sources](#7.-Sources)","0a8ccd24":"## 4.2. Experiences##\nLooking at the experiences on programming and with ML, it is noticeable how young the data science field is. As indicated in **Figure 8**, more than 40% of programmers have two years or less of programming experience and more than 64% have five years or less.\n\nIn the case of ML users (see **Figure 9**), more than 61% have two years or less using ML methods. These informations, especially about ML, makes clear how new is the area. \n\nOne reason for programming experience being bigger than ML is because some of the programmers migrated from other jobs like software development.","7a4e1225":"Diversity is very important when looking for new perspectives and to the development of new ideas, even more in a multidisciplinary environment. Unfortunately, the survey audience has a too homogeneous profile concerning gender. In 2020, men represented more than 78% of participants and women only 19%. Meanwhile, nonbinary, self-described, and undeclared together, only 1.8% (see **Figure 2**) .\n\nAlthough the scenario has evolved in recent years, where the rate of men was over 80%, still be far to have the desirable diversity.","9f448774":"## 3.1. Ages and Genders##\n\nData Science is a relatively new and rapidly growing field. According to the LinkedIn U.S. Emerging Jobs Report<sup>4<\/sup>, the data scientist is in the third position of emerging jobs with a growth of 37% in 2020. An interesting point is the Artificial Intelligence, which shares some subjects like machine learning with data science, is in the first position with a growth of 74% in the same year.\n\nThe fact of being a new field causes the professionals are, in the mean, younger. In 2020, more than 56% of participants were 29 years old or younger.","67c4fd85":"## 3.2. Countries##\nOf the ten countries with more participants, shown in **Figure 3**, six are among the ten most populous<sup>5<\/sup>. The other four are UK, Germany, Turkey, and Japan(#11). This does not allow draw accurate conclusions, but it is worth remembering some of these countries already have the technological development culture or are trying to develop this. An example is Nigeria, which has some movements to encourage technological development with a focus on AI and data science, such as the Data Science Nigeria<sup>6<\/sup>."}}