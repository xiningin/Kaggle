{"cell_type":{"92d17178":"code","2f89bf79":"code","fd0f502a":"code","17ca03c1":"code","5c55e40b":"code","a22bf237":"code","47c79702":"code","81176cc7":"code","9a40930d":"code","510840d7":"code","6be3a6fe":"code","44de78c4":"code","e98dff76":"code","71235697":"code","69069241":"code","5ef13452":"code","f01ac2ce":"code","65c1cbcf":"code","03dffa70":"code","50c940c9":"code","86aec410":"code","57571471":"code","48f14036":"markdown","5d4fb404":"markdown","36d4f866":"markdown","1f815ccc":"markdown","c27ceb75":"markdown","f8dab917":"markdown","95714829":"markdown","fcce7bdb":"markdown","5cbce0f5":"markdown","92a61d59":"markdown","694ea22b":"markdown","c25f9dd3":"markdown"},"source":{"92d17178":"# Importing required libraries\n\n# Data analysis \nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n\n# Data visualization\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Modeling\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import GridSearchCV\n\n# Evaluating\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.metrics import precision_score, recall_score, f1_score","2f89bf79":"fetal_data = pd.read_csv(\"..\/input\/fetal-health-classification\/fetal_health.csv\")\nfetal_data.head(10)","fd0f502a":"len(fetal_data)","17ca03c1":"fetal_data.shape","5c55e40b":"fetal_data.fetal_health.value_counts()","a22bf237":"fetal_data.fetal_health.value_counts().plot(kind = \"bar\",color = [\"green\",\"yellow\",\"red\"]);","47c79702":"fetal_data.isna().sum()","81176cc7":"fetal_data.describe()","9a40930d":"fetal_data.corr()","510840d7":"mat = fetal_data.corr()\nfig, ax = plt.subplots(figsize = (15,10))\nax = sns.heatmap(mat,\n                 annot = True,\n                 linewidths=0.5,\n                 fmt = \".2f\",\n                 cmap=\"YlGnBu\")","6be3a6fe":"x = fetal_data.drop(\"fetal_health\",axis = 1)\nx","44de78c4":"y = fetal_data[\"fetal_health\"]\ny","e98dff76":"np.random.seed(42)\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)","71235697":"# Fitting the model\nmodels = {\n          \"Logistic Regression\": LogisticRegression(solver='liblinear'), \n          \"KNN\": KNeighborsClassifier(),\n          \"Random Forest\": RandomForestClassifier(),\n          \"Support Vector\": SVC(),\n          \"Decision tree\": DecisionTreeClassifier()\n          }\n\ndef fit_and_score(models, x_train, x_test, y_train, y_test):\n    \"\"\"\n    Fits and evaluates given machine learning models.\n    models : a dict of different Scikit-Learn machine learning models\n    X_train : training data\n    X_test : testing data\n    y_train : labels assosciated with training data\n    y_test : labels assosciated with test data\n    \"\"\"\n    # Random seed for reproducible results\n    np.random.seed(42)\n    # Make a list to keep model scores\n    model_scores = {}\n    # Loop through models\n    for name, model in models.items():\n        # Fit the model to the data\n        model.fit(x_train, y_train)\n        # Evaluate the model and append its score to model_scores\n        model_scores[name] = model.score(x_test, y_test)\n    return model_scores","69069241":"model_scores = fit_and_score(models = models,\n                             x_train = x_train,\n                             x_test = x_test,\n                             y_train = y_train,\n                             y_test = y_test)\n\nmodel_scores","5ef13452":"# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}","f01ac2ce":"\nrf = RandomForestClassifier()\n\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n# Fit the random search model\nrf_random.fit(x_train, y_train)\n\nrf_random.score(x_test,y_test)","65c1cbcf":"\n# Create the parameter grid based on the results of random search \nparam_grid = {\n    'bootstrap': [True],\n    'max_depth': [80, 90, 100, 110],\n    'max_features': [2, 3],\n    'min_samples_leaf': [3, 4, 5],\n    'min_samples_split': [8, 10, 12],\n    'n_estimators': [100, 200, 300, 1000]\n}\n# Create a based model\nrf1 = RandomForestClassifier()\n# Instantiate the grid search model\ngrid_search = GridSearchCV(estimator = rf1, param_grid = param_grid, \n                          cv = 3, n_jobs = -1, verbose = 2)\n\ngrid_search.fit(x_train,y_train)\ngrid_search.score(x_test,y_test)","03dffa70":"y_pred = rf_random.predict(x_test)","50c940c9":"y_pred","86aec410":"def plot_conf_mat(y_test,y_preds):\n    fig, ax = plt.subplots(figsize=(3,3))\n    ax = sns.heatmap(confusion_matrix(y_test,y_preds),\n                     annot = True,\n                     cbar = False)\n    \n    plt.xlabel(\"Predicted label\")\n    plt.ylabel(\"True label\")\n    \nplot_conf_mat(y_test,y_pred)","57571471":"print(classification_report(y_test,y_pred))","48f14036":"3.2e+02 = 320","5d4fb404":"#### Data Analysis","36d4f866":"# Conclusion \n\n## Accuracy = 95%","1f815ccc":"## max score = 0.9507042253521126","c27ceb75":"## Data\n\nThe following data from Kaggle: \"https:\/\/github.com\/HK2226\/ML-Programs\/blob\/main\/Fetal%20-%20Health\/fetal_health.csv\"\n    \nWe have 22 column in total in which\n\n\n> 21 Attributes\n\n\n* baseline value - Baseline Fetal Heart Rate\n\n\n* accelerations - Number of accelerations per second\n\n\n* fetal_movement - Number of fetal movements per second\n\n\n* uterine_contractions - Number of uterine contractions per second\n\n\n* light_decelerations - Number of LDs per second\n\n\n* severe_decelerations - Number of SDs per second\n\n\n* prolongued_decelerations - Number of PDs per second\n\n\n* abnormal_short_term_variability - Percentage of time with abnormal short term variability\n\n\n* mean_value_of_short_term_variability - Mean value of short term variability\n\n\n* percentage_of_time_with_abnormal_long_term_variability - Percentage of time with abnormal long term variability\n\n\n* mean_value_of_long_term_variability - Mean value of long term variability\n\n\n* histogram_width - Width of the histogram made using all values from a record\n\n\n* histogram_min - Histogram minimum value\n\n\n* histogram_max - Histogram maximum value\n\n\n* histogram_number_of_peaks - Number of peaks in the exam histogram\n\n\n* histogram_number_of_zeroes - Number of zeroes in the exam histogram\n\n\n* histogram_mode - Hist mode\n\n\n* histogram_mean - Hist mean\n\n\n* histogram_median - Hist Median\n\n\n* histogram_variance - Hist variance\n\n\n* histogram_tendency - Histogram trend\n\n\n\n> 1 Target\n\n* fetal_health \n    \n    * Normal - 1\n    \n    * Suspect - 2\n    \n    * Pathological - 3\n    \n","f8dab917":"### Evaluating","95714829":"<img src=\"1.png\">","fcce7bdb":"## Approach to be followed \n\n* Problem defenition\n\n* Data ( Analysis and Visualization)\n\n* Modeling\n\n* Evaluating","5cbce0f5":"### Problem defenition\n\nWith the given details of the fetal we have to classify whether the fetal is:\n\n   * Normal - 1\n    \n   * Suspect - 2\n    \n   * Pathological - 3","92a61d59":"We have 2126 data ","694ea22b":"# Fetal Health prediction","c25f9dd3":"### Modeling"}}