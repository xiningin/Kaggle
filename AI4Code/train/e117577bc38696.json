{"cell_type":{"917ea7ec":"code","e5063c20":"code","63742659":"code","e63686b6":"code","625aa418":"code","e377aedd":"code","fbc7da7b":"code","652ecb7a":"code","f9c89d74":"code","42e3d930":"code","63313353":"code","3ff3ae86":"code","72257e37":"code","2c050e28":"code","a49167fc":"code","64f951c1":"code","cb252b41":"code","241ee81c":"code","45ede2de":"code","d1b25ca3":"code","44231083":"code","78fce718":"code","42837cf1":"code","564b1445":"code","4080e220":"code","844dcac0":"code","3a7578e3":"code","d263bd90":"code","e5b43e65":"code","29568876":"code","8e94816f":"code","59eaaf5d":"code","d10bc0e4":"code","6c6121b1":"code","977870d0":"code","95fddf71":"markdown","931a34ba":"markdown","7f4c9a18":"markdown","986561de":"markdown","dc6838e9":"markdown"},"source":{"917ea7ec":"import pandas as pd","e5063c20":"df=pd.read_csv('\/kaggle\/input\/fake-news\/train.csv')","63742659":"df.head()","e63686b6":"###Drop Nan Values\ndf=df.dropna()\n","625aa418":"## Get the Independent Features\n\nX=df.drop('label',axis=1)","e377aedd":"## Get the Dependent features\ny=df['label']","fbc7da7b":"y.value_counts()","652ecb7a":"X.shape","f9c89d74":"y.shape","42e3d930":"import tensorflow as tf","63313353":"tf.__version__","3ff3ae86":"from tensorflow.keras.layers import Embedding\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import one_hot\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Bidirectional\nfrom tensorflow.keras.layers import Dropout","72257e37":"### Vocabulary size\nvoc_size=5000","2c050e28":"messages=X.copy()","a49167fc":"messages['title'][1]","64f951c1":"messages.reset_index(inplace=True)","cb252b41":"import nltk\nimport re\nfrom nltk.corpus import stopwords","241ee81c":"nltk.download('stopwords')","45ede2de":"### Dataset Preprocessing\nfrom nltk.stem.porter import PorterStemmer\nps = PorterStemmer()\ncorpus = []\nfor i in range(0, len(messages)):\n    print(i)\n    review = re.sub('[^a-zA-Z]', ' ', messages['title'][i])\n    review = review.lower()\n    review = review.split()\n    \n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus.append(review)","d1b25ca3":"corpus","44231083":"onehot_repr=[one_hot(words,voc_size)for words in corpus] \nonehot_repr","78fce718":"sent_length=20\nembedded_docs=pad_sequences(onehot_repr,padding='pre',maxlen=sent_length)\nprint(embedded_docs)","42837cf1":"embedded_docs[0]","564b1445":"## Creating model\nembedding_vector_features=40\nmodel=Sequential()\nmodel.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))\nmodel.add(LSTM(100))\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nprint(model.summary())","4080e220":"## Creating model\nembedding_vector_features=40\nmodel1=Sequential()\nmodel1.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))\nmodel1.add(Bidirectional(LSTM(100)))\nmodel1.add(Dropout(0.3))\nmodel1.add(Dense(1,activation='sigmoid'))\nmodel1.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nprint(model1.summary())","844dcac0":"len(embedded_docs),y.shape","3a7578e3":"import numpy as np\nX_final=np.array(embedded_docs)\ny_final=np.array(y)","d263bd90":"X_final.shape,y_final.shape","e5b43e65":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_final, y_final, test_size=0.33, random_state=42)","29568876":"### Finally Training\nmodel1.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=10,batch_size=64)","8e94816f":"\ny_pred1=model1.predict_classes(X_test)","59eaaf5d":"from sklearn.metrics import confusion_matrix","d10bc0e4":"confusion_matrix(y_test,y_pred1)","6c6121b1":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred1)","977870d0":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred1))","95fddf71":"### Onehot Representation","931a34ba":"### Performance Metrics And Accuracy","7f4c9a18":"## Fake News Classifier Using Bidirectional LSTM\n\nDataset: https:\/\/www.kaggle.com\/c\/fake-news\/data#","986561de":"### Model Training","dc6838e9":"### Embedding Representation"}}