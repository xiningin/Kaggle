{"cell_type":{"8da5d486":"code","93321d9c":"code","9f4a6c77":"code","2eab14da":"code","5a399f43":"code","8f64fafd":"code","ad1b00c5":"code","1e2df8ea":"code","a08bb469":"code","c8e62442":"code","c70df4aa":"code","d089348c":"code","1c2a8ed8":"code","bd321763":"code","38b7d731":"code","c6f1f330":"code","d0082e6e":"code","b4b65fec":"code","91085ee1":"code","e6c4737a":"code","f9683cce":"code","50ee8551":"code","ec259875":"code","50538220":"code","89b338a9":"code","cd0614c0":"code","4b2c8e64":"code","135f9927":"code","eae1d682":"code","02e1f45e":"code","6ddf5831":"code","d6465f13":"code","58c051fc":"code","1aa7ca29":"code","7599a7ed":"code","9fe0ce62":"code","5b4dab85":"code","178f3e55":"code","34722965":"code","ef52e65c":"code","eb6c7314":"code","5a5afd34":"code","32756fd4":"code","8d294e54":"code","0c6f8d31":"code","04a7b00a":"code","5a3784d3":"code","9575147b":"code","80930d2c":"code","6900c557":"code","66ec74cf":"code","fefe4b71":"code","7fe98a7d":"code","6d57a5ef":"code","cbede17b":"code","ef8d564d":"code","54d0b49b":"code","00a12aff":"code","bc19ffd9":"code","f72e4542":"code","ba9ea4bb":"code","93940259":"code","b4f3341e":"code","dec2c284":"code","0f8d23c4":"code","82582768":"code","b49999b7":"code","b7cb8edf":"code","a5bb81e0":"code","98169f8e":"code","1438b4a6":"code","1eed3213":"code","9f633906":"code","1914211e":"code","00d752cd":"code","dd88acd6":"code","a3a19482":"code","fcf580d4":"code","5b2197a0":"code","d258e04a":"code","377fb5ed":"code","60ec2dfc":"code","57484553":"code","1c56d1c7":"code","1003c490":"code","3394c138":"code","1168da04":"code","72d592ff":"markdown","56d39595":"markdown","c42e311e":"markdown","784f042d":"markdown","8f538415":"markdown","f8e8a413":"markdown","00cb6296":"markdown","376aca75":"markdown","5bc87f51":"markdown","2ae8775e":"markdown","3bafd6c5":"markdown","4b46ab66":"markdown","c1ac9f24":"markdown","3c0c72db":"markdown","3f405c76":"markdown","67824827":"markdown","8a0ee30d":"markdown","8e5cc350":"markdown","0696d4a4":"markdown","0fe02e6b":"markdown","ac3c2e72":"markdown","6dbf2d71":"markdown","a1d26dd1":"markdown","f5aef548":"markdown","00723d23":"markdown","9fdddb10":"markdown","6ce9b722":"markdown","7d8bdd44":"markdown","887fb075":"markdown","5dd34766":"markdown","92ad77b2":"markdown"},"source":{"8da5d486":"!pip install chart_studio","93321d9c":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport re \nimport string\nimport requests\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom wordcloud import WordCloud\nimport chart_studio.plotly as py\nimport plotly.graph_objects as go\nfrom plotly.offline import download_plotlyjs, plot, iplot\n\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import TweetTokenizer\n\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport os\nfrom os import path","9f4a6c77":"import nltk\nnltk.download('stopwords')","2eab14da":"import nltk\nnltk.download('wordnet')","5a399f43":"data_dict = {}\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        data_dict[filename] = os.path.join(dirname,filename)\n        print(os.path.join(dirname, filename))\nprint(data_dict)","8f64fafd":"# Load in training data\ntrain = pd.read_csv(data_dict['Corona_NLP_train.csv'], encoding = 'latin1')\n# Copy training data\ndf = train.copy()\ndf.head()","ad1b00c5":"# Load in test data\ntest_df = pd.read_csv(data_dict['Corona_NLP_test.csv'], encoding = 'latin1')\ntest_df.head()","1e2df8ea":"# Check for nulls\ndf.info()","a08bb469":"# Replace na with 'None'\ndf['Location'].fillna('None', inplace = True)\ndf.head()","c8e62442":"# Join stopwords together and set them for use in cleaning function.\n\", \".join(stopwords.words('english'))\nstops = set(stopwords.words('english'))\n\n# Function that cleans tweets for classification. \ndef clean_tweet(tweet):\n    # Remove hyperlinks.\n    tweet= re.sub(r'https?:\/\/\\S+|www\\.\\S+','',tweet)\n    # Remove html\n    tweet = re.sub(r'<.*?>','',tweet)\n    # Remove numbers (Do we want to remove numbers? Death toll?)\n    tweet = re.sub(r'\\d+','',tweet)\n    # Remove mentions\n    tweet = re.sub(r'@\\w+','',tweet)\n    # Remove punctuation\n    tweet = re.sub(r'[^\\w\\s\\d]','',tweet)\n    # Remove whitespace\n    tweet = re.sub(r'\\s+',' ',tweet).strip()\n    # Remove stopwords\n    tweet = \" \".join([word for word in str(tweet).split() if word not in stops])\n    \n    return tweet.lower()","c70df4aa":"# Check function\nexample2 = df['OriginalTweet'][1]\nclean_tweet(example2)","d089348c":"# Apply text cleaning function to training and test dataframes.\ndf['newTweet'] = df['OriginalTweet'].apply(lambda x: clean_tweet(x))\ntest_df['newTweet'] = test_df['OriginalTweet'].apply(lambda x: clean_tweet(x))\ndf.head()","1c2a8ed8":"def token_stem(tweet):\n    tk = TweetTokenizer()\n    stemmer = PorterStemmer()\n    tweet = tk.tokenize(tweet)\n    tweet = [stemmer.stem(word) for word in tweet]\n    tweet =  tweet = \" \".join([word for word in tweet])\n    return tweet","bd321763":"def token_lemma(tweet):\n    tk = TweetTokenizer()\n    lemma = WordNetLemmatizer()\n    tweet = tk.tokenize(tweet)\n    tweet = [lemma.lemmatize(word) for word in tweet]\n    tweet = \" \".join([word for word in tweet])\n    return tweet","38b7d731":"tweet = df['newTweet'][1]\ntweet","c6f1f330":"print(token_stem(tweet))\nprint('\\n')\nprint(token_lemma(tweet))","d0082e6e":"df['stemTweet'] = df['newTweet'].apply(lambda x: token_stem(x))\ndf['lemmaTweet'] = df['newTweet'].apply(lambda x: token_lemma(x))\ndf.head()","b4b65fec":"# Create more useful labels for classification.\n# We will take the original 5 possibilites and\n# reduce them to 3, removing the \"extremelys\".\ndef make_label(sentiment):\n    \n    label = ''\n    if 'Positive' in sentiment: \n        label = 1\n    if 'Negative' in sentiment:\n        label = -1\n    if 'Neutral' in sentiment:\n        label = 0\n    return label","91085ee1":"# Apply make_label funtion to training and test dataframes.\ndf['label'] = df['Sentiment'].apply(lambda x: make_label(x))\ntest_df['label'] = test_df['Sentiment'].apply(lambda x: make_label(x))\ndf.head()","e6c4737a":"# Some frequent US locations\nus_filters = ('New York', 'New York, NY', 'NYC', 'NY', 'Washington, DC', 'Los Angeles, CA',\n             'Seattle, Washington', 'Chicago', 'Chicago, IL', 'California, USA', 'Atlanta, GA',\n             'San Francisco, CA', 'Boston, MA', 'New York, USA', 'Texas, USA', 'Austin, TX',\n              'Houston, TX', 'New York City', 'Philadelphia, PA', 'Florida, USA', 'Seattle, WA',\n             'Washington, D.C.', 'San Diego, CA', 'Las Vegas, NV', 'Dallas, TX', 'Denver, CO',\n             'New Jersey, USA', 'Brooklyn, NY', 'California', 'Michigan, USA', 'Minneapolis, MN',\n             'Virginia, USA', 'Miami, FL', 'Texas', 'Los Angeles', 'United States', 'San Francisco',\n             'Indianapolis, IN', 'Pennsylvania, USA', 'Phoenix, AZ', 'New Jersey', 'Baltimore, MD',\n             'CA', 'FL', 'DC', 'TX', 'IL', 'MA', 'PA', 'GA', 'NC', 'NJ', 'WA', 'VA', 'PAK', 'MI', 'OH',\n             'CO', 'AZ', 'D.C.', 'WI', 'MD', 'MO', 'TN', 'Florida', 'IN', 'NV', 'MN', 'OR','LA', 'Michigan',\n             'CT', 'SC', 'OK', 'Illinois', 'Ohio', 'UT', 'KY', 'Arizona', 'Colorado')\n\n# Various nation's frequent locations\nuk_filters = ('England', 'London', 'london', 'United Kingdom', 'united kingdom',\n              'England, United Kingdom', 'London, UK', 'London, England',\n              'Manchester, England', 'Scotland, UK', 'Scotland', 'Scotland, United Kingdom',\n              'Birmingham, England', 'UK', 'Wales')\nindia_filters = ('New Delhi, India', 'Mumbai', 'Mumbai, India', 'New Delhi', 'India', \n                 'Bengaluru, India')\naustralia_filters = ('Sydney, Australia', 'New South Wales', 'Melbourne, Australia', 'Sydney',\n                     'Sydney, New South Wales', 'Melbourne, Victoria', 'Melbourne', 'Australia')\ncanada_filters = ('Toronto, Ontario', 'Toronto', 'Ontario, Canada', 'Toronto, Canada', 'Canada',\n                  'Vancouver, British Columbia', 'Ontario', 'Victoria', 'British Columbia', 'Alberta',)\nsouth_africa_filters = ('Johannesburg, South Africa', 'Cape Town, South Africa', 'South Africa')\nnigeria_filters = ('Lagos, Nigeria')\nkenya_filters = ('Nairobi, Kenya')\nfrance_filters = ('Paris, France')\nireland_filters = ('Ireland')\nnew_zealand_filters = ('New Zealand')\npakistan_filters = ('Pakistan')\nmalaysia_filters = ('Malaysia')\nuganda_filters = ('Kampala, Uganda', 'Uganda')\nsingapore_filters = ('Singapore')\ngermany_filters = ('Germany', 'Deutschland')\nswitz_filters = ('Switzerland')\nuae_filters = ('United Arab Emirates', 'Dubai')\nspain_filters = ('Spain')\nbelg_filters = ('Belgium')\nphil_filters = ('Philippines')\nhk_filters = ('Hong Kong')\nghana_filters = ('Ghana')\n# These all have large counts. Need to be removed from rest of data\nother_filters = ('None', 'Worldwide', 'Global', 'Earth', '??')","f9683cce":"df['country'] = df['Location'].apply(lambda x: x.split(\",\")[-1].strip() if (\",\" in x) else x)","50ee8551":"df.head()","ec259875":"# Changing strings found with filters into 3 digit codes\ndf['country'] = df['country'].apply(lambda x: 'USA' if x in us_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'GBR' if x in uk_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'IND' if x in india_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'AUS' if x in australia_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'CAN' if x in canada_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'ZAF' if x in south_africa_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'KEN' if x in kenya_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'NGA' if x in nigeria_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'SGP' if x in singapore_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'FRA' if x in france_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'NZL' if x in new_zealand_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'PAK' if x in pakistan_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'MYS' if x in malaysia_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'IRL' if x in ireland_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'UGA' if x in uganda_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'DEU' if x in germany_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'CHE' if x in switz_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'ARE' if x in uae_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'ESP' if x in spain_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'BEL' if x in belg_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'PHL' if x in phil_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'GHA' if x in ghana_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'HKG' if x in hk_filters else x)\ndf['country'] = df['country'].apply(lambda x: 'None' if x in other_filters else x)","50538220":"df['country'].value_counts()","89b338a9":"# 0:30 because that's where the labeled countries end\nplaces_df = pd.DataFrame(df['country'].value_counts()[0:30])\nplaces_df.reset_index(inplace = True)\nplaces_df.rename(columns = {'index':'Country', 'country':'Tweets'}, inplace = True)\n# Remove 'None' location\nplaces_df = places_df[places_df['Country'] != 'None']","cd0614c0":"data = dict(type='choropleth',\n            colorscale = 'inferno',\n            locations = places_df['Country'],\n            z = places_df['Tweets'],\n            #locationmode = 'USA-states',\n            text = places_df['Tweets'],\n            marker = dict(line = dict(color = 'rgb(255,255,255)',width = 2)),\n            colorbar = {'title':\"Number of Tweets\"}\n            ) \n\nlayout = dict(title = 'Number of Tweets By Country',\n              geo = dict(#scope='usa',\n                         showlakes = False,\n                         lakecolor = 'rgb(85,173,240)',\n                         projection_type='equirectangular')\n             )\n\nchoromap = go.Figure(data = [data],layout = layout)","4b2c8e64":"iplot(choromap)","135f9927":"# image courtesy of https:\/\/tse2.mm.bing.net\/th?id=OIP.VLv_PpEOc8TDwuTNvj5hWQHaHa&pid=Api\n#img = Image.open(data_dict['rona4.jpeg'])\nmask = np.array(Image.open(data_dict['rona4.jpeg']))\n\n# Positive WordCloud\npos_df = df[df['label'] == 1]\npos_text = pos_df['newTweet'].to_string(index = False)\npos_text = re.sub(r'\\n','',pos_text)\npos_cloud = WordCloud(colormap = 'Greens', mask = mask).generate(pos_text)\n\n# Neutral WordCloud\nneut_df = df[df['label'] == 0]\nneut_text = neut_df['newTweet'].to_string(index = False)\nneut_text = re.sub(r'\\n','', neut_text)\nneut_cloud = WordCloud(colormap = 'Blues', mask = mask).generate(neut_text)\n\n# Negative wordcloud\nneg_df = df[df['label'] == -1]\nneg_text = neg_df['newTweet'].to_string(index = False)\nneg_text = re.sub(r'\\n','', neg_text)\nneg_cloud = WordCloud(colormap = 'Reds', mask = mask).generate(neg_text)","eae1d682":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize = [30,20])\nax1.imshow(pos_cloud)\nax1.set_title('Positive Cloud', fontsize = 30)\nax1.axis('off')\nax2.imshow(neut_cloud)\nax2.set_title('Neutral Cloud', fontsize = 30)\nax2.axis('off')\nax3.imshow(neg_cloud)\nax3.set_title('Negative Cloud', fontsize = 30)\nax3.axis('off')","02e1f45e":"def ngram_df(corpus,nrange,n=None):\n    vec = CountVectorizer(stop_words = 'english',ngram_range=nrange).fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    total_list=words_freq[:n]\n    df=pd.DataFrame(total_list,columns=['text','count'])\n    return df","6ddf5831":"unigram_df = ngram_df(df['newTweet'],(1,1),20)\nbigram_df = ngram_df(df['newTweet'],(2,2),20)\ntrigram_df = ngram_df(df['newTweet'],(3,3),20)","d6465f13":"unigram_df['text'][::-1]","58c051fc":"sns.set(font_scale = 1.3)\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.barplot(data = unigram_df, y = 'text', x = 'count')","1aa7ca29":"sns.set(font_scale = 1.3)\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.barplot(data = bigram_df, y = 'text', x = 'count')","7599a7ed":"sns.set(font_scale = 1.3)\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.barplot(data = trigram_df, y = 'text', x = 'count')","9fe0ce62":"# Set X and y.\nX = df['newTweet']\ny = df['label']\n\n# Split data into training and test sets.\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","5b4dab85":"X[1]","178f3e55":"clf = dict({'SVC': LinearSVC(max_iter = 5000),\n            'Logisitc': LogisticRegression(max_iter = 5000),\n            'NaiveBayes': MultinomialNB(),\n            'RandomForest': RandomForestClassifier(),\n           })","34722965":"def make_models(clf, vectorizer, X_train, y_train, cv = 5):\n    \n    acc_df = pd.DataFrame(index=range(cv * len(clf)))\n    results = []\n    for classifier in clf.keys():\n        model = Pipeline([('vectorizer',vectorizer),\n                   ('clf', clf[classifier])])\n        model.fit(X_train, y_train)\n        scores = cross_val_score(model, X_train , y_train, cv = cv)\n        model_name = classifier\n        for fold, score in enumerate(scores):\n            results.append((model_name, fold, score))\n    \n    acc_df = pd.DataFrame(results, columns=['model_name', 'fold', 'accuracy'])\n    \n    return acc_df","ef52e65c":"# Number of folds for K-fold cross validation\ncv = 10","eb6c7314":"tfidf_df = make_models(clf, TfidfVectorizer(), X_train, y_train, cv)\ncount_df = make_models(clf, CountVectorizer(), X_train, y_train, cv)\ntfidf_df['vectorizer'] = 'tfidf'\ncount_df['vectorizer'] = 'count'\ncombined_df = tfidf_df.append(count_df)\ncombined_df['method'] = 'none'\ncombined_df.head(10)","5a5afd34":"# Set X and y.\nX = df['stemTweet']\ny = df['label']\n\n# Split data into training and test sets.\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\nstem_tfidf_df = make_models(clf, TfidfVectorizer(), X_train, y_train, cv)\nstem_count_df = make_models(clf, CountVectorizer(), X_train, y_train, cv)\n\nstem_tfidf_df['method'] = 'stem'\nstem_tfidf_df['vectorizer'] = 'tfidf'\nstem_count_df['method'] = 'stem'\nstem_count_df['vectorizer'] = 'count'\nstem_df = stem_tfidf_df.append(stem_count_df)","32756fd4":"# Set X and y.\nX = df['lemmaTweet']\ny = df['label']\n\n# Split data into training and test sets.\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\nlemma_tfidf_df = make_models(clf, TfidfVectorizer(), X_train, y_train, cv)\nlemma_count_df = make_models(clf, CountVectorizer(), X_train, y_train, cv)\n\nlemma_tfidf_df['vectorizer'] = 'tfidf'\nlemma_tfidf_df['method'] = 'lemma'\nlemma_count_df['vectorizer'] = 'count'\nlemma_count_df['method'] = 'lemma'\nlemma_df = lemma_tfidf_df.append(lemma_count_df)","8d294e54":"all_df = lemma_df.append(stem_df)\nall_df = all_df.append(combined_df)","0c6f8d31":"# Skip to here to avoid running the models\nall_df = pd.read_csv(data_dict['pipe_results.csv'])","04a7b00a":"sns.set(font_scale = 1.4)\nsns.catplot(x = 'model_name', y = 'accuracy', hue = 'method', height = 7,\n            data = all_df, kind = 'box', col = 'vectorizer', palette = 'rainbow')","5a3784d3":"no_nb = all_df[all_df['model_name'] != 'NaiveBayes']\nno_nb_rf = no_nb[no_nb['model_name'] != 'RandomForest']\nsns.set(font_scale = 1.4)\nsns.catplot(x = 'model_name', y = 'accuracy', hue = 'method', height = 7,\n            data = no_nb_rf, kind = 'box', col = 'vectorizer', palette = 'rainbow')","9575147b":"accuracies = all_df.groupby(['model_name', 'method', 'vectorizer']).accuracy.mean()\nstdDev = all_df.groupby(['model_name', 'method', 'vectorizer']).accuracy.std()\nmetrics_df = pd.concat([accuracies, stdDev], axis = 1, ignore_index = True)\nmetrics_df.columns = ['mean_acc', 'mean_std']","80930d2c":"metrics_df.sort_values(by = ['mean_acc','method'], ascending = False).head(10)","6900c557":"# Set X and y.\nX = df['newTweet']\ny = df['label']\n\n# Set vectorizer for feature extraction.\nvectorizer = TfidfVectorizer()\n\n# Split data into training and test sets to fit the model.\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Define model for predictions\nmodel = Pipeline([('vectorizer',vectorizer),\n                  ('clf', LinearSVC(max_iter = 5000))])\n\nmodel.fit(X_train, y_train)","66ec74cf":"train_preds = model.predict(X_test)\n\nprint('Accuracy:', accuracy_score(y_test, train_preds))\nprint('\\n')\nprint(classification_report(y_test, train_preds))","fefe4b71":"# Set X and y.\nX2 = test_df['newTweet']\ny2 = test_df['label']\n\n\ntest_preds = model.predict(X2)\nprint('Accuracy:', accuracy_score(y2, test_preds))\nprint('\\n')\nprint(classification_report(y2, test_preds))","7fe98a7d":"# Dictionary of parameters that can be tuned\nmodel.get_params()","6d57a5ef":"# GridSearchCV goes through specified parameter values and finds the best ones. \nfrom sklearn.model_selection import GridSearchCV\n\n# We'll try a few different options here.\nhyperparameters = { 'vectorizer__max_df': [1, 0.9, 0.95, .85],\n                    'vectorizer__ngram_range': [(1,1), (1,2), (2,2),(2,3)],\n                  }\nmodel_tune = GridSearchCV(model, hyperparameters, cv=5)\n\n# Fit and tune model\nmodel_tune.fit(X_train, y_train)","cbede17b":"# These are the best parameters according to the GridSearch\nmodel_tune.best_params_","ef8d564d":"# Gridsearch will refit the model on the best settings\nmodel_tune.refit","54d0b49b":"preds = model_tune.predict(X2)\nprint('Accuracy:', accuracy_score(y2, preds))\nprint('\\n')\nprint(classification_report(y2, preds))","00a12aff":"test_df['pred_label'] = test_preds\ntest_df.head()","bc19ffd9":"mislabel_df = test_df[test_df['label'] != test_preds]\nmislabel_df.head()","f72e4542":"mislabel_df['Location'].fillna('None', inplace = True)\nmislabel_df['country'] = mislabel_df['Location'].apply(lambda x: x.split(\",\")[-1].strip() if (\",\" in x) else x)\n\n# Changing strings found with filters into 3 digit codes\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'USA' if x in us_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'GBR' if x in uk_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'IND' if x in india_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'AUS' if x in australia_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'CAN' if x in canada_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'ZAF' if x in south_africa_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'KEN' if x in kenya_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'NGA' if x in nigeria_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'SGP' if x in singapore_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'FRA' if x in france_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'NZL' if x in new_zealand_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'PAK' if x in pakistan_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'MYS' if x in malaysia_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'IRL' if x in ireland_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'UGA' if x in uganda_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'DEU' if x in germany_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'CHE' if x in switz_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'ARE' if x in uae_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'ESP' if x in spain_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'BEL' if x in belg_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'PHL' if x in phil_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'GHA' if x in ghana_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'HKG' if x in hk_filters else x)\nmislabel_df['country'] = mislabel_df['country'].apply(lambda x: 'None' if x in other_filters else x)","ba9ea4bb":"mislabel_df['country'].value_counts()","93940259":"mislabel_df.head()","b4f3341e":"mislabel_df.tail()","dec2c284":"# Neutral tweet\nprint(mislabel_df['OriginalTweet'][7])\nprint('\\n')\nprint(mislabel_df['newTweet'][7])","0f8d23c4":"# Negative tweet\nprint(mislabel_df['OriginalTweet'][15])\nprint('\\n')\nprint(mislabel_df['newTweet'][15])","82582768":"# Positive tweet\nprint(mislabel_df['OriginalTweet'][3779])\nprint('\\n')\nprint(mislabel_df['newTweet'][3779])","b49999b7":"import torch\nfrom tqdm.notebook import tqdm\n\nfrom transformers import BertTokenizer\n\nfrom torch.utils.data import TensorDataset\n\nimport transformers\nfrom transformers import BertForSequenceClassification\n\n#import numpy as np\n#import pandas as pd\n#import re","b7cb8edf":"from sklearn.preprocessing import LabelEncoder\n\n# Encode the classes for BERT. We'll keep using the 3 labels we made earlier.  \nencoder = LabelEncoder()\ndf['encoded_sentiment'] = encoder.fit_transform(df['label'])","a5bb81e0":"# Set X and y.\nX = df['newTweet']\ny = df['encoded_sentiment']\n\n# Split data into training and test sets.\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","98169f8e":"tokenizer = transformers.BertTokenizer.from_pretrained('bert-base-uncased',do_lower_case=True)","1438b4a6":"# Encoding the words in the training data into vectors.\nencoded_data_train = tokenizer.batch_encode_plus(\n    X_train, \n    truncation = True,\n    add_special_tokens=True, \n    return_attention_mask=True, \n    pad_to_max_length=True, \n    max_length=50, \n    return_tensors='pt'\n)\n\n# Encoding the words in the test data into vectors.\nencoded_data_test = tokenizer.batch_encode_plus(\n    X_test, \n    truncation = True,\n    add_special_tokens=True, \n    return_attention_mask=True, \n    pad_to_max_length=True, \n    max_length=50, \n    return_tensors='pt'\n)","1eed3213":"# Get inputs and attention masks from previously encoded data. \ninput_ids_train = encoded_data_train['input_ids']\nattention_masks_train = encoded_data_train['attention_mask']\nlabels_train = torch.tensor(y_train.values)\n\ninput_ids_test = encoded_data_test['input_ids']\nattention_masks_test = encoded_data_test['attention_mask']\nlabels_test = torch.tensor(y_test.values)\n\n# Instantiate TensorDataset\ndataset_train = TensorDataset(input_ids_train, attention_masks_train, labels_train)\ndataset_test = TensorDataset(input_ids_test, attention_masks_test, labels_test)","9f633906":"# Initialize the model. \nmodel = transformers.BertForSequenceClassification.from_pretrained(\"bert-base-uncased\",\n                                                      num_labels=3,\n                                                      output_attentions=False,\n                                                      output_hidden_states=False)","1914211e":"# DataLoaders for running the model\nfrom torch.utils.data import DataLoader, RandomSampler, SequentialSampler\n\ndataloader_train = DataLoader(dataset_train, \n                              sampler=RandomSampler(dataset_train), \n                              batch_size=128)\n\ndataloader_test = DataLoader(dataset_test, \n                                   sampler=SequentialSampler(dataset_test), \n                                   batch_size=128)","00d752cd":"# Setting hyperparameters\nfrom transformers import AdamW, get_linear_schedule_with_warmup\n\noptimizer = AdamW(model.parameters(),\n                  lr=1e-5, \n                  eps=1e-8)\n                  \nepochs = 10\n\nscheduler = get_linear_schedule_with_warmup(optimizer, \n                                            num_warmup_steps=0,\n                                            num_training_steps=len(dataloader_train)*epochs)\n","dd88acd6":"from sklearn.metrics import f1_score\n\ndef f1_score_func(preds, labels):\n    preds_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return f1_score(labels_flat, preds_flat, average='weighted')","a3a19482":"import random\n\nseed_val = 17\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)\ndevice = torch.device('cuda')","fcf580d4":"model.to(device)\n\nfor epoch in tqdm(range(1, epochs+1)):\n    \n    model.train()\n    \n    loss_train_total = 0\n\n    progress_bar = tqdm(dataloader_train, desc='Epoch {:1d}'.format(epoch), leave=False, disable=False)\n    for batch in progress_bar:\n\n        model.zero_grad()\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0].to(device),\n                  'attention_mask': batch[1].to(device),\n                  'labels':         batch[2].to(device),\n                 }       \n\n        outputs = model(**inputs)\n        \n        loss = outputs[0]\n        loss_train_total += loss.item()\n        loss.backward()\n\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n        optimizer.step()\n        scheduler.step()\n        \n        progress_bar.set_postfix({'training_loss': '{:.3f}'.format(loss.item()\/len(batch))})\n        \n    tqdm.write(f'\\nEpoch {epoch}')\n    \n    loss_train_avg = loss_train_total\/len(dataloader_train)            \n    tqdm.write(f'Training loss: {loss_train_avg}')\n","5b2197a0":"def evaluate(dataloader_test):\n\n    model.eval()\n    \n    loss_val_total = 0\n    predictions, true_vals = [], []\n    \n    for batch in dataloader_test:\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0],\n                  'attention_mask': batch[1],\n                  'labels':         batch[2],\n                 }\n\n        with torch.no_grad():        \n            outputs = model(**inputs)\n            \n        loss = outputs[0]\n        logits = outputs[1]\n        loss_val_total += loss.item()\n\n        logits = logits.detach().cpu().numpy()\n        label_ids = inputs['labels'].cpu().numpy()\n        predictions.append(logits)\n        true_vals.append(label_ids)\n    \n    loss_val_avg = loss_val_total\/len(dataloader_test) \n    \n    predictions = np.concatenate(predictions, axis=0)\n    true_vals = np.concatenate(true_vals, axis=0)\n            \n    return loss_val_avg, predictions, true_vals","d258e04a":"val_loss, predictions, true_vals = evaluate(dataloader_test)\nval_f1 = f1_score_func(predictions, true_vals)","377fb5ed":"print('Val Loss = ', val_loss)\nprint('Val F1 = ', val_f1)","60ec2dfc":"encoded_classes = encoder.classes_\npredicted_category = [encoded_classes[np.argmax(x)] for x in predictions]\ntrue_category = [encoded_classes[x] for x in true_vals]","57484553":"x = 0\nfor i in range(len(true_category)):\n    if true_category[i] == predicted_category[i]:\n        x += 1\n        \nprint('Accuracy Score = ', x \/ len(true_category))","1c56d1c7":"print(classification_report(true_category, predicted_category))","1003c490":"test_df['encoded_sentiment'] = encoder.fit_transform(test_df['label'])\n\n# Set X and y.\nX = test_df['newTweet']\ny = test_df['encoded_sentiment']\n\nencoded_data_test = tokenizer.batch_encode_plus(\n    X, \n    truncation = True,\n    add_special_tokens=True, \n    return_attention_mask=True, \n    pad_to_max_length=True, \n    max_length=50, \n    return_tensors='pt'\n)\n\ninput_ids_test = encoded_data_test['input_ids']\nattention_masks_test = encoded_data_test['attention_mask']\nlabels_test = torch.tensor(y.values)\n\n# Pytorch TensorDataset Instance\ndataset_test = TensorDataset(input_ids_test, attention_masks_test, labels_test)\n\ndataloader_test = DataLoader(dataset_test, \n                                   sampler=SequentialSampler(dataset_test), \n                                   batch_size=128)","3394c138":"val_loss, predictions, true_vals = evaluate(dataloader_test)\nval_f1 = f1_score_func(predictions, true_vals)","1168da04":"encoded_classes = encoder.classes_\npredicted_category = [encoded_classes[np.argmax(x)] for x in predictions]\ntrue_category = [encoded_classes[x] for x in true_vals]\n\nx = 0\nfor i in range(len(true_category)):\n    if true_category[i] == predicted_category[i]:\n        x += 1\n        \nprint('Accuracy Score = ', x \/ len(true_category))\nprint('\\n')\nprint(classification_report(true_category, predicted_category))","72d592ff":"### Wonder how that mark above the 'A' affected the predicted label, and other marked words.  Words that may have contributed to the model predicting positive might be 'surgical' and 'healthworkers'. ","56d39595":"### ~80% accuracy on the training data, not too bad. Precision and recall are significantly lower for neutral tweets than positive or negative, possibly due to the lower support, but it could also be that neutral tweets are harder to classify. This model appears to be slightly better at predicting positive tweets than negative tweets. \n### Now, we'll see how the model performs on the test data.","c42e311e":"### Tried to use an image of the coronavirus for the mask, it certainly could have turned out better...\n### 'Grocery store', 'price', 'supermarket', and 'online shopping' being frequent in positive, neutral, and negative tweets is interesting.  Some stand-out negative terms are 'panic buying' and 'toilet paper'. For positive, 'hand sanitizer' catches my attention. ","784f042d":"### The vast majority of tweets come from English speaking countries, which makes sense, since these tweets are all in English. Largest contributer is the USA followed by the UK and Canada.  \n","8f538415":"### Grocery store dominates these trigrams. People may be concerned about the safety of grocery shopping during a pandemic, and the health of the grocery store workers. ","f8e8a413":"### Here the model predicted positive, and the '\u00c2' showed up again in a mislabel. The model may have seen 'free' and 'rights' and labeled it as positive, even though to a human reader, this is quite clearly a negative tweet.","00cb6296":"### The model predicted negative for this tweet, while the true label is positive. Lower prices is indeed a positive thing for consumers. Perhaps the model took 'stuck', 'coronavirus', and 'covid' to be more negative than the other words in the tweet.","376aca75":"### A big thank you to all these notebooks:\n\nhttps:\/\/www.kaggle.com\/immvab\/transformers-covid-19-tweets-sentiment-analysis\/comments\n\nhttps:\/\/www.kaggle.com\/arushi2\/covid19-tweets-geo-and-sentiment-analysis#data\n\nhttps:\/\/www.kaggle.com\/datatattle\/battle-of-ml-classification-models\n\nhttps:\/\/www.kaggle.com\/baghern\/a-deep-dive-into-sklearn-pipelines\n\n","5bc87f51":"### Takes a good bit to run (over 30 minutes)...10 fold cross validation on 4 separate classifiers will take a while.\n### Results are saved to 'pipe_results.csv' if you want to save time. \n### Skip down a few cells to see where I load the results if you don't want to run each model.\n### Logistic and RandomForest take much longer than SVC and NaiveBayes.","2ae8775e":"# 3. Vizualizations <a name=\"viz\"><\/a>","3bafd6c5":"# 1. Introduction<a name=\"introduction\"><\/a>\n### With this notebook, we will attempt to find the best model to classify these tweets. We'll start with some data cleaning and some vizualizations to get a little more familiar with the data, and from there we'll explore some more traditional classification methods.  After that, we'll train BERT on the tweets and compare the results with other models. ","4b46ab66":"### Model does a little bit worse on test data than on training data. Let's see if we can improve the accuracy by tuning some parameters","c1ac9f24":"### Below are some of the common locations found in the tweets that will help us properly map more tweets to a particular country.","3c0c72db":"# 2. Data Cleaning <a name=\"data_cleaning\"><\/a>","3f405c76":"### On the actual test data, the model scores an 85%, which is ~6% better than the LinearSVC performed on this data. This BERT model could possibly squeeze out some more accuracy with additional hyperparameter tuning, as I did not play around with the learning rate. Also, you could try feeding the lemmatized or stemmed tweets into it, as for this run, I went with the cleaned tweets instead of the stemmed\/lemmatized. ","67824827":"### A possible update to improve accuracy of this model may involve handling the accented letters in a better way. \n### However, if we want better accuracy, we should try BERT. We'll fit a BERT model and see how well it does.","8a0ee30d":"# 5. BERT <a name=\"bert\"><\/a>","8e5cc350":"### See the differences in these techniques? Stemming converts words to their 'stems', while lemmatizing brings the words to their 'lemmas', or dictionary forms. ","0696d4a4":"### We'll try 4 different classifiers here: SVC, Logisitic Regression, Naive Bayes, and Random Forest. Furthermore, we'll also be testing whether these models perform better using Term Frequency Inverse Document Frequency or just a simple Count for the vectors we feed into the model. TFIDF increases every time a word appears in a document(tweet), but is then offset for every document(tweet) that word appears. This can help pick out the more important words for classification. Additionally, we'll be using cross validation to help gauge each model's accuracy and variance across multiple splits of the data. ","0fe02e6b":"## Again, this displays just how small the accuracy differences are between the best models. For the sake of efficiency, an SVC using tfidf vectors is recommended. Let's fit one and explore the results more thorouhgly. ","ac3c2e72":"### Here, we'll define a couple functions to either stem or lemmatize the tweets. These methods will be compared during classification to see which one gives us the model with the greatest accuracy. ","6dbf2d71":"### Looks like our tuning didn't improve accuracy at all.  Let's take a look at some of the mislabled tweets.","a1d26dd1":"# 6. Conclusion <a name=\"conclusion\"><\/a>\n\n### Unsuprisingly, BERT performs better than an SVC or logistic regression. However, it was fairly shocking to see lemmatization and stemming perform a bit worse than just leaving the words alone. It was also a bit curious how the Random Forest Classifier lagged a bit behind the SVC and the logistic regression. We chose the SVC using TFIDF amongst the traditional classifiers because it was the most accurate and runs much faster than the logisitic regression on this data. But when it comes to raw accuracy, BERT is decidedly better than an SVC. \n\n### To further increase prediction accuracy, one should try tuning the hyperparameters of BERT, or testing other pretrained HuggingFace transformers on this dataset. ","f5aef548":"# 4. Classification <a name=\"classification\"><\/a>","00723d23":"### The mislabels mostly come from the USA, which is where the majority of the tweets are from anyway. Let's take a look at a few of the tweets themselves.","9fdddb10":"### 87% accuracy is about 7% better than what we get using an SVC for training. ","6ce9b722":"### Grocery store way outpacing covid bigrams is pretty interesting. Online shopping, hand sanitizer, toilet paper, and panic buying are all within the realm of expectation. ","7d8bdd44":"## Now, we'll use the test dataset to evaluate BERT.","887fb075":"### SVC does better when using tfidf, and Logistic Regression does better when using count. Stemming seems to do worse than lemmatization accuracy wise, although lemmatization has more outliers. The best results tend to come from using neither lemmatization nor stemming on the tweets. \n### SVC using tfidf and Logistic with count have approximately the same median, but the SVC has less variance and a slightly more even distribution. \n### It should be noted that the differences in accuracies between the best performing models are very small, and are probably due to the random splits more than methodology.  Bearing that in mind, I would select the LinearSVC using tfidf and no lemma\/stem because it takes MUCH less time to run than the logistic regression, and based on these results, it has less variance. ","5dd34766":"### Naive Bayes and RandomForest do much worse than Logistic and SVC, and make the boxplots fairly hard to look at. Let's drop them for better visuals. ","92ad77b2":"### 'Prices' being the most frequent unigram after covid\/coronavirus may be due to rising food prices and other various shortages."}}