{"cell_type":{"74b1cc6e":"code","f2cff6dd":"code","69418bc2":"code","0f236465":"code","507e3ba6":"code","27a10147":"code","a7f72e3a":"code","4133f6ff":"code","f5aee8e5":"code","a3d172ca":"code","0f0548eb":"code","03e00c78":"code","8a03661f":"code","6f001292":"code","35e188c0":"code","6c7b6c62":"code","07c5c656":"code","26983935":"code","2fd1c104":"markdown","882fa62e":"markdown","b8f20fb2":"markdown","a1913ad1":"markdown","68a302fb":"markdown","f6615494":"markdown","c28fd4eb":"markdown","a3ba473b":"markdown","78e95d17":"markdown","c3774ddf":"markdown","5f3b4433":"markdown","94b81f6a":"markdown","d660be3f":"markdown","4a970860":"markdown","4c2f41f3":"markdown"},"source":{"74b1cc6e":"import numpy as np\nimport pandas as pd\nimport sklearn \nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import LabelEncoder","f2cff6dd":"path='\/kaggle\/input\/mushroom-classification\/mushrooms.csv'\ndata=pd.read_csv(path)\ndata.head()","69418bc2":"data=data.sample(frac=1)\ndata.head()","0f236465":"data.describe()","507e3ba6":"def map_data(data):\n    for name in list(data.columns):\n        le=LabelEncoder()\n        le.fit(np.array(data[name]).reshape(-1,))\n        data[name]=le.transform(np.array(data[name]).reshape(-1,))\n        val_dict[name]=le\ndef unmap_data(data):\n    for name in list(data.columns):\n        le=val_dict[name]\n        data[name]=le.inverse_transform(np.array(data[name]).reshape(-1,))","27a10147":"val_dict={}","a7f72e3a":"map_data(data)\ndata.head()","4133f6ff":"labels=data.pop('class')\ndata.head()","f5aee8e5":"X=np.array(data)\ny=np.array(labels)","a3d172ca":"unmap_data(data)\ndata.head()","0f0548eb":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25)","03e00c78":"parameters={'max_depth':list(range(200,400,50)),\n            'n_estimators':list(range(10,120,20)),\n           }","8a03661f":"model=RandomForestClassifier()","6f001292":"grid_clf=GridSearchCV(model,parameters,verbose=4,refit=True)","35e188c0":"grid_clf.fit(X_train,y_train)","6c7b6c62":"clf=grid_clf.best_estimator_\nprint(clf)","07c5c656":"def train_test(clf):\n    clf.fit(X_train,y_train)\n    p=clf.predict(X_test)\n    cm=confusion_matrix(y_true=y_test,y_pred=p)\n    acc=cm.trace()\/cm.sum()\n    return acc*100","26983935":"print(f'Accuracy on test set of length {X_test.shape[0]} is : {train_test(clf)}')","2fd1c104":"Looking at the description of the dataset to see if there are any numerical values at all. There aren't, if there were .**describe**() method would have shown me the minimum,maximum,average etc for that column. Meaning we are dealing with text labelled data","882fa62e":"Printing the accuracy(100 %)","b8f20fb2":"Calling the object on my training data","a1913ad1":"Making my X and y variables","68a302fb":"Getting my training and testing data","f6615494":"I have made a function to encode the categorical text data into numerical data using **LabelEncoder**, I have stored the LabelEncoders for each column in a dictionary so that I can encode new data with the same encoder,leading to the same mapping rather than initialising an encoder from scratch which will lead to different encodings","c28fd4eb":"Converting **data** back to categorical form since I have X and y. You can cross check that the conversion has worked out perfectly","a3ba473b":"Making a function to train the model and return the accuracy","78e95d17":"Making my **GridSearch** object","c3774ddf":"Shuffling the entire dataset using .**sample**() method and setting the fraction of data(**frac**) to 1","5f3b4433":"Separating the classes from the remaining data","94b81f6a":"Making the model for which the above parameters will be found ","d660be3f":"Accessing the CSV file and printing the first 5 lines to know what type of data I am dealing with","4a970860":"Making my parameters which I will try to find using **GridSearchCV**","4c2f41f3":"Getting the best estimator from the grid_clf object. For this you need to set **refit=True** while initialising grid_clf"}}