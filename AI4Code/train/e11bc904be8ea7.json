{"cell_type":{"827bec4b":"code","9afd8aa9":"code","4f8f09e6":"code","a3dcc740":"code","dd13f6be":"code","86cf0f71":"code","85b62ce9":"code","f7a2b676":"code","5b509c43":"code","dfb32a81":"code","cfafd11b":"markdown","e398df49":"markdown","25dfcffc":"markdown","1bcbe121":"markdown","83b5f4be":"markdown","ca8420a0":"markdown","fdd03e5b":"markdown","62feba35":"markdown","f582ff7a":"markdown"},"source":{"827bec4b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9afd8aa9":"#import\nimport pandas as pd\nimport numpy as np\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, median_absolute_error\nimport matplotlib.pyplot as plt","4f8f09e6":"#Data\ntrain = pd.read_csv('\/kaggle\/input\/random-linear-regression\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/random-linear-regression\/test.csv')\nX_train = train.iloc[:, :1]\ny_train = train.iloc[:, 1:]\nX_test = test.iloc[:, :1]\ny_test = test.iloc[:, 1:]","a3dcc740":"#Imputer\nImputedModule = SimpleImputer(missing_values= np.nan, strategy= 'mean')\nX_train = ImputedModule.fit_transform(X_train)\ny_train = ImputedModule.fit_transform(y_train)\nX_test = ImputedModule.fit_transform(X_test)\ny_test = ImputedModule.fit_transform(y_test)","dd13f6be":"X_graph = X_test","86cf0f71":"#Polynomail Features\npoly_reg = PolynomialFeatures()\nX_train = poly_reg.fit_transform(X_train)\nX_test = poly_reg.fit_transform(X_test)","85b62ce9":"#Model\nLinearRegressionModel = LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)\nLinearRegressionModel.fit(X_train, y_train)\n\nprint(\"Linear Regression Train Score: \",LinearRegressionModel.score(X_train, y_train))\nprint(\"Linear Regression Test Score: \",LinearRegressionModel.score(X_test, y_test ))","f7a2b676":"#Predict\ny_pred = LinearRegressionModel.predict(X_test)","5b509c43":"#Metrices\nMAEValue = mean_absolute_error(y_test, y_pred, multioutput='uniform_average')\nprint('Mean Absolute Error: ', MAEValue)\n\nMSEValue = mean_squared_error(y_test, y_pred, multioutput='uniform_average')\nprint('Mean Squared Error: ', MSEValue)\n\nMdSEValue = median_absolute_error(y_test, y_pred, multioutput='uniform_average')\nprint('Median Absolute Error: ', MdSEValue)","dfb32a81":"#Graph\nplt.style.use('seaborn-whitegrid')\nax = plt.axes()\nax.set(xlabel='X_train', ylabel='Y_Train and Y_Predict', title='Relationship between Y_Test and Y_Predict')\nplt.scatter(X_graph,y_test, color='#2ecc71', alpha=.5, label='Test')\nplt.plot(X_graph,y_pred, color='#f1c40f', label='Predict')\nplt.legend(prop={'size': 16})","cfafd11b":"**Import needed libraries and classes.**","e398df49":"**Cleaning The Data:**\n\nAfter checking the data we found nan values so we make the *Imputer* to clean the data using mean strategy.","25dfcffc":"**We make a copy from \"*X_train*\" dataset for the graph because it will be changed by adding additional features.**","1bcbe121":"**We add additional features using \"*PolynomialFeatures*\" to increase the accuracy.**","83b5f4be":"**We make our regression using \"*LinearRegression*\"**","ca8420a0":"**Prepare The Data:**\n\nMake 4 variables to split the data to X and y for training and testing. ","fdd03e5b":"**We make the prediction using \"*X_test*\" after editing**","62feba35":"**We present our data using \"*X_graph*\" {*It's a copy from X_test*}**\n\n**This graph show the relationship between Testing Data and Predicted Data**\n\n**The Green color refers to the real testing data and The Yellow color refers to the predicted data.**","f582ff7a":"**We calculate the percentage of the error using \"*mean_absolute_error*\" , \"*mean_squared_error*\" and \"*median_absolute_error*\"**"}}