{"cell_type":{"381f407f":"code","970250fc":"code","8600abd0":"code","a772b356":"code","084bfad7":"code","cabe1814":"code","d52953de":"code","62e3736a":"code","87859820":"code","c8324209":"code","3e39d266":"code","b465b53e":"markdown","c745f825":"markdown","5aaf19ce":"markdown","639a168f":"markdown","601115a4":"markdown","e1cfe540":"markdown","9b23c4e9":"markdown","1c83ad7f":"markdown","eb43a339":"markdown","4019effe":"markdown"},"source":{"381f407f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras \nimport seaborn as sns\n\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.image import ImageDataGenerator","970250fc":"#load data\ndf_train=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ndf_test=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nprint(df_train.shape)\nprint(df_test.shape)\n","8600abd0":"df_test.head()","a772b356":"X_train=df_train.iloc[:,1:]\ny_train=df_train.iloc[:,0]\nprint(X_train.shape)\nprint(y_train.shape)\ng=sns.countplot(y_train)\ny_train.value_counts()","084bfad7":"df_train.describe()","cabe1814":" df_train.isnull().any().describe()","d52953de":"X_train=X_train\/255.0\ndf_test=df_test\/255.0","62e3736a":"X_train=X_train.values.reshape(-1,28,28)\nfor i in range(6, 9):\n    plt.subplot(3,3,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(X_train[i],cmap='gray')\n    plt.title(y_train[i]);","87859820":"X_train=X_train.reshape(-1,28,28,1)\ndf_test=df_test.values.reshape(-1,28,28,1)\n","c8324209":"model=keras.models.Sequential([\n    keras.layers.Conv2D(32,kernel_size=(3,3),input_shape=(28,28,1)),\n    keras.layers.Conv2D(32,kernel_size=(3,3),activation='relu'),\n    keras.layers.MaxPooling2D((2,2)),\n    keras.layers.Dropout(0.2),\n    \n    keras.layers.Conv2D(64,kernel_size=(3,3),activation='relu'),\n    keras.layers.Conv2D(64,kernel_size=(3,3),activation='relu'),\n    keras.layers.MaxPooling2D((2,2)),\n    keras.layers.Dropout(0.2),\n    \n    keras.layers.Flatten(),\n    keras.layers.Dense(480,activation='relu'),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(10,activation='softmax')\n    ])\n\nmodel.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])\n\nmodel.summary()","3e39d266":"model.fit(X_train,y_train,epochs=3,validation_split=0.2)","b465b53e":"# CNN","c745f825":"# fit model","5aaf19ce":"# Reshape","639a168f":"Train and test images (28px x 28px) has been stock into pandas.Dataframe as 1D vectors of 784 values. We reshape all data to 28x28x1 3D matrices.\n\nKeras requires an extra dimension in the end which correspond to channels. MNIST images are gray scaled so it use only one channel. For RGB images, there is 3 channels, we would have reshaped 784px vectors to 28x28x3 3D matrices.","601115a4":"# data preparation","e1cfe540":"We perform a grayscale normalization to reduce the effect of illumination's differences.\n\nMoreover the CNN converg faster on [0..1] data than on [0..255].","9b23c4e9":"# normalization","1c83ad7f":"# Define the model\nI used the Keras Sequential API, where you have just to add one layer at a time, starting from the input.\n\nThe first is the convolutional (Conv2D) layer. It is like a set of learnable filters. I choosed to set 32 filters for the two firsts conv2D layers and 64 filters for the two last ones. Each filter transforms a part of the image (defined by the kernel size) using the kernel filter. The kernel filter matrix is applied on the whole image. Filters can be seen as a transformation of the image.\n\nThe CNN can isolate features that are useful everywhere from these transformed images (feature maps).\n\nThe second important layer in CNN is the pooling (MaxPool2D) layer. This layer simply acts as a downsampling filter. It looks at the 2 neighboring pixels and picks the maximal value. These are used to reduce computational cost, and to some extent also reduce overfitting. We have to choose the pooling size (i.e the area size pooled each time) more the pooling dimension is high, more the downsampling is important.\n\nCombining convolutional and pooling layers, CNN are able to combine local features and learn more global features of the image.\n\nDropout is a regularization method, where a proportion of nodes in the layer are randomly ignored (setting their wieghts to zero) for each training sample. This drops randomly a propotion of the network and forces the network to learn features in a distributed way. This technique also improves generalization and reduces the overfitting.\n\n'relu' is the rectifier (activation function max(0,x). The rectifier activation function is used to add non linearity to the network.\n\nThe Flatten layer is use to convert the final feature maps into a one single 1D vector. This flattening step is needed so that you can make use of fully connected layers after some convolutional\/maxpool layers. It combines all the found local features of the previous convolutional layers.\n\nIn the end i used the features in two fully-connected (Dense) layers which is just artificial an neural networks (ANN) classifier. In the last layer(Dense(10,activation=\"softmax\")) the net outputs distribution of probability of each class.","eb43a339":"# split dataset","4019effe":"# Check for null and missing values"}}