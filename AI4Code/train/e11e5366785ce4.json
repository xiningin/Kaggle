{"cell_type":{"4b005189":"code","45d6a0f3":"code","47298fc8":"code","9e6c8180":"code","01014dac":"code","ab218f20":"code","ab8a1e97":"code","0e4675ec":"code","c11464ed":"markdown","303b15ae":"markdown","3937ac99":"markdown","fe07f727":"markdown","f17b7788":"markdown"},"source":{"4b005189":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","45d6a0f3":"import pandas as pd\nimport pandas_profiling as pp\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import PolynomialFeatures\n\n","47298fc8":"data = pd.read_csv('\/kaggle\/input\/nasa-airfoil-self-noise\/NASA_airfoil_self_noise.csv')","9e6c8180":"data.head()","01014dac":"pp.ProfileReport(data)","ab218f20":"Y = data['Sound']\nX = data.drop(['Sound'], axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)","ab8a1e97":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","0e4675ec":"polynomial_features= PolynomialFeatures(degree=4)\nX_train_p = polynomial_features.fit_transform(X_train)\nX_test_p = polynomial_features.fit_transform(X_test)\nmodel = LinearRegression().fit(X_train_p, y_train)\ny_pred = model.predict(X_test_p)\nprint('r2 score:',r2_score(y_test ,y_pred))","c11464ed":"**Importing dataset**","303b15ae":"**Profiling**","3937ac99":"**Data Split**","fe07f727":"**Polynomial Regression**","f17b7788":"**Scaling**"}}