{"cell_type":{"e6621c0c":"code","077e9026":"code","c2868500":"code","9177b367":"code","b6dde25f":"code","61ef842a":"code","0c9d163f":"code","a7d0f09e":"code","62e4095a":"code","ea679ed2":"code","40717997":"code","82537927":"code","9028ab29":"code","53cf10c8":"code","fd840e21":"code","3a47620c":"code","401c7aaa":"code","00754fb8":"code","e618daea":"code","7bbdbf1c":"code","0d66eea1":"code","fbe3e004":"code","85130c6a":"code","082f894a":"code","4d7b728e":"markdown","2e1ec0c2":"markdown","6207f020":"markdown","54e1d3a5":"markdown","a054caa7":"markdown","5d9a47fe":"markdown","9ca1cb94":"markdown","27c5543f":"markdown","f6492582":"markdown","68dfbef0":"markdown","b3d67575":"markdown","8d4c278f":"markdown","c312ca03":"markdown","0a261d80":"markdown","ff3c8728":"markdown"},"source":{"e6621c0c":"# Some basic setup:\n# import some common libraries\nimport numpy as np\nimport pandas as pd\nimport os\nimport json\nimport random\nimport cv2\nimport matplotlib.pyplot as plt\nimport ast\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split","077e9026":"TOP_INPUT_DIR = \"\/kaggle\/input\/global-wheat-detection\/\"\nDATA_TRAIN_DIR = f\"{TOP_INPUT_DIR}train\/\"\nDATA_TEST_DIR = f\"{TOP_INPUT_DIR}test\/\"","c2868500":"coco_base = { \"info\": {},\n              \"licenses\": [], \n              \"images\": [],\n              \"annotations\": [],\n              \"categories\": []}","9177b367":"coco_base[\"info\"] = {\n    \"description\": \"Global Wheat Detection Dataset, Kaggle 2020\",\n    \"url\": \"https:\/\/www.kaggle.com\/c\/global-wheat-detection\/data\",\n    \"version\": \"1.0\",\n    \"year\": 2020,\n    \"contributor\": \"http:\/\/www.global-wheat.com\/contributors\/\",\n    \"date_created\": \"2020\/05\/29\"\n}","b6dde25f":"coco_base[\"licenses\"].append(\n    {\n        \"url\": \"https:\/\/opensource.org\/licenses\/MIT\",\n        \"id\": 1,\n        \"name\": \"MIT License\"\n    }\n)","61ef842a":"coco_base[\"categories\"].append({\"supercategory\": \"grain\",\"id\": 1,\"name\": \"wheat\"})","0c9d163f":"train_df = pd.read_csv(f'{TOP_INPUT_DIR}train.csv')\ntrain_df.head()","a7d0f09e":"uniq_images = train_df.image_id.unique()\nlen(uniq_images)","62e4095a":"print(train_df.width.unique()[0])\nprint(train_df.height.unique()[0])","ea679ed2":"def get_bboxes_per_image(df):\n    \"\"\"author: @impiyush\"\"\"\n    # convert from string list, to python list\n    df.bbox = df.bbox.apply(ast.literal_eval)\n    # group-by on image id and return all bboxes for that image as a list of lists\n    return train_df.groupby('image_id')['bbox'].apply(list).reset_index(name='bboxes')","40717997":"train_df_bboxes_grped = get_bboxes_per_image(train_df)\ntrain_df_bboxes_grped.head()","82537927":"assert train_df_bboxes_grped.shape[0] == len(uniq_images), \"Number of images differ when grouped\"","9028ab29":"df_train, df_valid = train_test_split(\n    train_df_bboxes_grped,\n    test_size=0.05,\n    random_state=32,\n    shuffle=True\n)\n\ndf_train = df_train.reset_index(drop=True)\ndf_valid = df_valid.reset_index(drop=True)","53cf10c8":"print(df_train.shape[0], df_valid.shape[0])","fd840e21":"coco_base_train = coco_base.copy()\ncoco_base_valid = coco_base.copy()","3a47620c":"def set_coco_images(df):\n    \"\"\"author: @impiyush\"\"\"\n    images = []\n    for _,img in enumerate(tqdm(df.image_id.unique())):\n        img_dict = {\"license\":1, \n                    \"height\":1024, \n                    \"width\":1024,\n                    \"id\":img}\n        img_dict[\"file_name\"] = f\"{img}.jpg\"\n        images.append(img_dict)\n\n    return images","401c7aaa":"coco_base_train[\"images\"] = set_coco_images(df_train)\ncoco_base_valid[\"images\"] = set_coco_images(df_valid)","00754fb8":"coco_base_train[\"images\"][:3]","e618daea":"coco_base_valid[\"images\"][:3]","7bbdbf1c":"assert len(coco_base_train[\"images\"])==len(df_train), \"Number of images differ from df_train\"\nassert len(coco_base_valid[\"images\"])==len(df_valid), \"Number of images differ from df_valid\"","0d66eea1":"def set_coco_annotations(df):\n    \"\"\"author: @impiyush\"\"\"\n    annos = []\n    id_cnt = 1\n\n    for _,row in tqdm(df.iterrows(), total=len(df)):\n    #     print(row)\n        anno = {}\n        anno['segmentation'] = []\n        anno['iscrowd'] = 0\n        anno['image_id'] = row['image_id']\n        anno['category_id'] = 1\n        bboxes = row['bboxes']\n    #     annos.append(box)\n        for ix, box in enumerate(bboxes):\n            anno['bbox'] = box # x,y,w,h\n            anno['area'] = box[2] * box[3] # w*h\n            anno['id'] = f\"{id_cnt:05}\"\n            annos.append(anno.copy()) # copy is necessary here, otherwise it will always point to the last value of anno\n            id_cnt += 1\n    \n    return annos","fbe3e004":"coco_base_train['annotations'] = set_coco_annotations(df_train)\ncoco_base_valid['annotations'] = set_coco_annotations(df_valid)","85130c6a":"with open(f'\/kaggle\/working\/coco_train.json','w') as train_coco:\n    json.dump(coco_base_train, train_coco)","082f894a":"with open(f'\/kaggle\/working\/coco_valid.json','w') as valid_coco:\n    json.dump(coco_base_valid, valid_coco)","4d7b728e":"### Write licenses to COCO Format","2e1ec0c2":"## Simply Convert Data to COCO Format\n\n- Split the training data to train and validation\n- Convert both to COCO Formatted JSON","6207f020":"### Group bboxes by image\n\nCreate one row per image - combining all bboxes for that image into one column. This helps significantly reduce the number of rows to traverse.","54e1d3a5":"#### All images are of size 1024x1024","a054caa7":"### Split to train and validation","5d9a47fe":"### Write category to COCO Format","9ca1cb94":"### Write images to COCO Format","27c5543f":"Let's check the first three images in the list","f6492582":"### There you go, now you have your data in COCO Format. Hope you liked this quick Kernel!","68dfbef0":"### Dump COCO formatted JSON for train and validation sets","b3d67575":"#### There are 3373 unique images in the training set","8d4c278f":"### Write dataset info to COCO Format ","c312ca03":"### Write annotations to COCO Format\n\nThe most important piece of this puzzle","0a261d80":"Let's also verify the number of images match, just for sanity","ff3c8728":"### Create COCO Base"}}