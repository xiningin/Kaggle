{"cell_type":{"dd2e1260":"code","bd99b37a":"code","781af372":"code","aa8d996d":"code","23a07864":"code","42cefcd0":"code","128e4e38":"code","0e0370b1":"code","3cf27aaa":"code","020708bc":"code","b5302e5f":"code","a9385110":"code","c7f78558":"code","5d526fd9":"code","f7d18baa":"code","d191de87":"code","1184c126":"code","b5cf90a4":"code","64a54bdd":"code","c8624c48":"code","2e67eed6":"code","969b0c3b":"code","bc06ca25":"code","b22850fe":"code","19b3a88b":"code","ec66cf8a":"code","fc857e52":"code","b90aee18":"code","45a26687":"code","d64038e5":"code","02916147":"code","eba67b35":"code","e1a5bcd1":"code","0b4c52a7":"code","93ba543b":"code","0078621d":"code","75d37849":"code","cb885ec7":"code","25e31dda":"code","fe824233":"code","50d65616":"code","83e6c8b5":"code","6fc2f704":"code","f2626303":"markdown","eaac79e6":"markdown","8510c518":"markdown","317c29b8":"markdown","4e3c2c52":"markdown"},"source":{"dd2e1260":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ndf_trn = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv\")\ndf_tst = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv\")\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bd99b37a":"df_tst.head","781af372":"df_trn = pd.get_dummies(df_trn, columns=[\"store\", \"country\",\"product\"])\ndf_tst = pd.get_dummies(df_tst, columns=[\"store\", \"country\",\"product\"])","aa8d996d":"df_tst.shape","23a07864":"df_trn.columns, df_tst.columns, df_trn.shape, df_tst.shape","42cefcd0":"from dateutil.easter import easter\neaster_l = []\neaster_year=[]\nfor iy in (2015,2016,2017,2018,2019):\n     easter_l.append( (pd.to_datetime(easter(iy)).day_of_year))\n     easter_year.append(iy)\n        \neaster_dict = {\"year\":easter_year, \"easter_day\":easter_l}\neaster_df = pd.DataFrame.from_dict(easter_dict)\neaster_df.set_index(\"year\",inplace=True)\neaster_df","128e4e38":"def gettimeFeatures(df):\n    # easter day \n    pd.to_datetime(easter(2015)).day_of_year\n    \n    df[\"day_of_year\"]=pd.to_datetime(df.date).dt.day_of_year\n    df[\"day_of_month\"] = pd.to_datetime(df.date).dt.day\n    df[\"week\"]=pd.to_datetime(df.date).dt.isocalendar().week\n    df[\"quarter\"]=pd.to_datetime(df.date).dt.quarter\n    df[\"month\"]=pd.to_datetime(df.date).dt.month\n    df[\"year\"]=pd.to_datetime(df.date).dt.year\n    df[\"weekd\"]=pd.to_datetime(df.date).dt.weekday\n    df[\"weekend\"]=(pd.to_datetime(df.date).dt.weekday>4).astype(int) ## weekday range from 0 to 6. \n    \n    ## fourier features \n    import math\n    dayofyear=df_trn.day_of_year\n\n    for k in range(1, 32, 4):\n        df[f'sin{k}'] = np.sin(dayofyear \/ 365 * 2 * math.pi * k)\n        df[f'cos{k}'] = np.cos(dayofyear \/ 365 * 2 * math.pi * k)\n        df[f'Finland_sin{k}'] = df[f'sin{k}'] * df['country_Finland']\n        df[f'Finland_cos{k}'] = df[f'cos{k}'] * df['country_Finland']\n        df[f'Norway_sin{k}'] = df[f'sin{k}'] * df['country_Norway']\n        df[f'Norway_cos{k}'] = df[f'cos{k}'] * df['country_Norway']\n        df[f'store_sin{k}'] = df[f'sin{k}'] * df['store_KaggleMart']\n        df[f'store_cos{k}'] = df[f'cos{k}'] * df['store_KaggleMart']\n        df[f'mug_sin{k}'] = df[f'sin{k}'] * df['product_Kaggle Mug']\n        df[f'mug_cos{k}'] = df[f'cos{k}'] * df['product_Kaggle Mug']\n        df[f'sticker_sin{k}'] = df[f'sin{k}'] * df['product_Kaggle Sticker']\n        df[f'sticker_cos{k}'] = df[f'cos{k}'] * df['product_Kaggle Sticker']\n\n\n    ## Easter \n    #2015: 5 April: 95\n    #2016: 27 March: 88\n    #2017: 16 April: 106\n    #2018: 1 April: 91\n    #2019: 21 April: 111 \n    ## I still look for an easier way to do this, instead of hardcoding it \n    df.loc[df.month>-1,\"easter\"]=0 ## setting default \n    df.loc[ ( ( (df.year==2018) & ( abs(df.day_of_year-91)<10) ) | \n              ( (df.year==2017) & ( abs(df.day_of_year-106)<10)) | \n              ( (df.year==2016) & ( abs(df.day_of_year-88)<10) ) |\n              ( (df.year==2018) & ( abs(df.day_of_year-95)<10) ) |\n              ( (df.year==2019) & ( abs(df.day_of_year-111)<10) )\n            ),\"easter\"]=1\n\n    ## Year End \n    df.loc[df.month>0,\"year_end\"]=0 ## setting default\n    df.loc[ ( (  (df.month==12) & (df.day_of_month>22) ) |\n                 (  (df.month==1) &  (df.day_of_month <8) ) ),\"year_end\"]=1\n\n    ## Summer \n    df.loc[df.day_of_year>-1,\"summer\"]=0 ## ## setting default\n    df.loc[ ( (df.day_of_year>125) & (df.day_of_year<190) ),\"summer\"] =1\n\n\n\n    ## we don't need date anymore \n    #df.drop([\"date\"],axis=1,inplace=True)\n    return df \n","0e0370b1":"df_gdp = pd.read_csv(\"..\/input\/gdp-20152019-finland-norway-and-sweden\/GDP_data_2015_to_2019_Finland_Norway_Sweden.csv\")\n","3cf27aaa":"df_trn = gettimeFeatures(df_trn)\ndf_tst = gettimeFeatures(df_tst)\n","020708bc":"df_tst = df_tst.set_index(\"year\").merge( df_gdp.set_index(\"year\"), on= [\"year\"])\ndf_trn = df_trn.set_index(\"year\").merge( df_gdp.set_index(\"year\"), on= [\"year\"])\ndf_trn.columns\n","b5302e5f":"df_tst=df_tst.merge( easter_df,on=[\"year\"])\ndf_trn=df_trn.merge( easter_df, on=[\"year\"])\n","a9385110":"df_tst.reset_index(inplace=True)\ndf_trn.reset_index(inplace=True)","c7f78558":"def SMAPE(y_true, y_pred):\n    diff = np.abs(y_true - y_pred) \/ (y_true + np.abs(y_pred)) * 200\n    return diff.mean()\n","5d526fd9":"df_trn = df_trn.set_index([\"date\"])","f7d18baa":"from sklearn.linear_model import LinearRegression\nfrom statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess\n\nfourier = CalendarFourier(freq=\"A\", order=12)  # 10 sin\/cos pairs for \"A\"nnual seasonality\ndef getDataFrame(df, country_=\"\", store_=\"\", product_=\"\"):\n    df_try = df[ ((df[country_]==1) & (df[store_]==1) & (df[product_]==1))]\n    dp = DeterministicProcess(\n        index=pd.DatetimeIndex(df_try.index),\n        constant=True,               # dummy feature for bias (y-intercept)\n        order=1,                     # trend (order 1 means linear)\n        seasonal=True,               # weekly seasonality (indicators)\n        #additional_terms=[fourier],  # annual seasonality (fourier)\n        drop=True,                   # drop terms to avoid collinearity\n    )\n    X=dp.in_sample()\n    Y = df_try['num_sold']\n    \n\n\n    model = LinearRegression(fit_intercept=False)\n    _ = model.fit(X, Y)\n    y_pred = pd.Series(model.predict(X), index=Y.index)\n    \n    Y_tmp_pred = pd.DataFrame(y_pred)\n    df_try_trn = df_try # just rename\n    #print (df_try.head)\n    \n    ## same for testing dataset \n    from pandas import date_range\n    index = date_range(\"2019-1-1\", freq=\"D\", periods=365)\n    X_fore = dp.out_of_sample(steps=365,forecast_index=index)\n    y_fore = pd.Series(model.predict(X_fore), index=X_fore.index)\n    Y_tmp_out = pd.DataFrame(y_fore)\n    \n    df_try_tst = df_tst[ ((df_tst[country_]==1) & (df_tst[store_]==1) & (df_tst[product_]==1))]\n    df_try_tst_1 = df_try_tst.set_index(\"date\")\n\n\n    k=['Finland','Norway', 'Sweden']\n    for ic in k:\n        Y_tmp_out[f'country_{ic}'] = (pd.Series((df_try_tst_1[f'country_{ic}'] ).values, index=Y_tmp_out.index))\n        Y_tmp_pred[f'country_{ic}'] = (pd.Series((df_try_trn[f'country_{ic}'] ).values, index=Y_tmp_pred.index))\n\n    k_=['KaggleRama', 'KaggleMart']\n    for ist in k_:\n        Y_tmp_out[f'store_{ist}'] = (pd.Series((df_try_tst_1[f'store_{ist}'] ).values, index=Y_tmp_out.index))\n        Y_tmp_pred[f'store_{ist}'] = (pd.Series((df_try_trn[f'store_{ist}'] ).values, index=Y_tmp_pred.index))\n\n\n    k__=['Kaggle Sticker','Kaggle Hat','Kaggle Mug']\n    for ip in k__:\n        Y_tmp_out[f'product_{ip}'] = (pd.Series((df_try_tst_1[f'product_{ip}'] ).values, index=Y_tmp_out.index))\n        Y_tmp_pred[f'product_{ip}'] = (pd.Series((df_try_trn[f'product_{ip}'] ).values, index=Y_tmp_pred.index))\n\n\n\n    return Y_tmp_out, Y_tmp_pred\n\nYs=[]\nY_preds = []\nfor ic in [\"country_Finland\", \"country_Sweden\", \"country_Norway\"]:\n    for ist in [\"store_KaggleRama\",\"store_KaggleMart\"]:\n        for ip in [\"product_Kaggle Sticker\",\"product_Kaggle Hat\", \"product_Kaggle Mug\"]:\n            Ys.append(getDataFrame(df_trn,ic, ist, ip)[0])\n            Y_preds.append(getDataFrame(df_trn,ic, ist, ip)[1])\n\n\nY_out=pd.concat(Ys)\nY_pred_out=pd.concat(Y_preds)\n","d191de87":"Y_pred_out","1184c126":"Y_out.rename({0:\"num_sold\"},axis=1, inplace=True)\nY_pred_out.rename({0:\"num_sold\"},axis=1, inplace=True)","b5cf90a4":"Y_out = Y_out.reset_index()\nY_pred_out = Y_pred_out.reset_index()\n\n","64a54bdd":"Y_out = Y_out.rename({\"index\":\"date\"}, axis=1)\nY_pred_out = Y_pred_out.rename({\"index\":\"date\"}, axis=1)\n\n\n","c8624c48":"df_tst.date = pd.to_datetime(df_tst.date)\ndf_trn.date = pd.to_datetime(df_tst.date)","2e67eed6":"\nY_out = Y_out.merge(df_tst,on=['date','country_Finland', 'country_Norway',\n       'country_Sweden', 'store_KaggleRama', 'store_KaggleMart',\n       'product_Kaggle Sticker', 'product_Kaggle Hat', 'product_Kaggle Mug'])\nY_pred_out = Y_pred_out.merge(df_trn,on=['date','country_Finland', 'country_Norway',\n       'country_Sweden', 'store_KaggleRama', 'store_KaggleMart',\n       'product_Kaggle Sticker', 'product_Kaggle Hat', 'product_Kaggle Mug'])\n\n","969b0c3b":"Y_out = Y_out[[\"row_id\",\"num_sold\",]]\nY_pred_out = Y_pred_out[[\"row_id\",\"num_sold_x\",]]","bc06ca25":"Y_pred_out.sort_values(by=\"row_id\")","b22850fe":"df_trn = df_trn.merge(Y_pred_out,on=\"row_id\")","19b3a88b":"df_tst= df_tst.merge(Y_out, on=\"row_id\")","ec66cf8a":"df_tst.rename({\"num_sold\":\"num_sold_x\"}, axis=1, inplace=True)","fc857e52":"from sklearn.ensemble import RandomForestRegressor\nclf = RandomForestRegressor(n_estimators=500, oob_score=True, random_state=100)\nvars=[ 'store_KaggleMart', 'store_KaggleRama', 'country_Finland',\n       'country_Norway', 'country_Sweden', 'product_Kaggle Hat',\n       'product_Kaggle Mug', 'product_Kaggle Sticker', 'day_of_year',\n       'day_of_month', 'week', 'quarter', 'month', 'year', 'weekd', 'weekend',\n       'easter', 'year_end', 'summer','GDP_Finland', 'GDP_Norway', 'GDP_Sweden'#,'num_sold_x'\n      #'Finland_sin1', 'Finland_cos1',  'Norway_sin1',  'Norway_cos1', 'store_sin1',\n     #'store_cos1',  'mug_sin1',  'mug_cos1',  'sticker_sin1',  'sticker_cos1', 'Finland_sin5',\n     #'Finland_cos5','Norway_sin5','Norway_cos5','store_sin5','store_cos5','mug_sin5',\n     #'mug_cos5','sticker_sin5','sticker_cos5','Finland_sin13','Finland_cos13','Norway_sin13',\n     #'Norway_cos13','store_sin13','store_cos13','mug_sin13','mug_cos13','sticker_sin13',\n     #'sticker_cos13','Finland_sin17','Finland_cos17','Norway_sin17','Norway_cos17',\n     #'store_sin17','store_cos17','mug_sin17','mug_cos17','sticker_sin17','sticker_cos17',\n     #'Finland_sin21','Finland_cos21','Norway_sin21','Norway_cos21','store_sin21',\n     #'store_cos21', 'mug_sin21','mug_cos21','sticker_sin21','sticker_cos21','Finland_sin25',\n     #'Finland_cos25','Norway_sin25','Norway_cos25','store_sin25','store_cos25',\n     #'mug_sin25','mug_cos25','sticker_sin25','sticker_cos25','Finland_sin29',\n     #'Finland_cos29','Norway_sin29','Norway_cos29','store_sin29', 'store_cos29',\n     #'mug_sin29','mug_cos29','sticker_sin29','sticker_cos29'\n]\nX = df_trn[df_trn.year<2018][vars]\nY = df_trn[df_trn.year<2018]['num_sold']\nclf.fit(X,Y)\n\n","b90aee18":"X_val = df_trn[df_trn.year>2017][vars]\nY_val = df_trn[df_trn.year>2017]['num_sold']\n\n","45a26687":"\nY_val_predict = clf.predict(X_val) \n\nX_tst = df_tst[vars]\nY_tst=clf.predict(X_tst)","d64038e5":"Y_val_predict[:10]","02916147":"SMAPE(Y_val,Y_val_predict)","eba67b35":"df_gdp_prod =pd.DataFrame(df_gdp.loc[3]\/df_gdp.loc[2]).transpose()\n","e1a5bcd1":"from sklearn.tree import DecisionTreeRegressor\ndtree = DecisionTreeRegressor(max_depth=25, min_samples_leaf=0.0001, random_state=3)\ndtree.fit(X, Y)\nY_val_predict = dtree.predict(X_val)\nprint (SMAPE(Y_val,Y_val_predict))\n\nY_tst_dtree = dtree.predict(X_tst)","0b4c52a7":"Y_tst_dtree","93ba543b":"X.columns\n","0078621d":"from keras.models import Sequential\nfrom keras.layers import Dense\nmodel = Sequential()\nmodel.add(Dense(12, input_dim=8, activation=\"relu\"))\nmodel.add(Dense(12, activation=\"relu\"))\nmodel.add(Dense(1, activation=\"sigmoid\"))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n#model.fit(X, y, epochs=150, batch_size=10)\nmodel.summary()","75d37849":"X.shape, Y.shape","cb885ec7":"#model.fit(X, Y, epochs=150, batch_size=10)\n\n","25e31dda":"df_tst[\"num_sold\"] = Y_tst\ndf_out = df_tst.drop(['store_KaggleMart', 'store_KaggleRama', 'country_Finland',\n       'country_Norway', 'country_Sweden', 'product_Kaggle Hat',\n       'product_Kaggle Mug', 'product_Kaggle Sticker', 'day_of_year',\n       'day_of_month', 'week', 'quarter', 'month', 'year', 'weekd', 'weekend',\n       'easter', 'year_end', 'summer','GDP_Finland', 'GDP_Norway', 'GDP_Sweden','easter_day','date',\n       'Finland_sin1', 'Finland_cos1',  'Norway_sin1',  'Norway_cos1', 'store_sin1',\n     'store_cos1',  'mug_sin1',  'mug_cos1',  'sticker_sin1',  'sticker_cos1', 'Finland_sin5',\n     'Finland_cos5','Norway_sin5','Norway_cos5','store_sin5','store_cos5','mug_sin5',\n     'mug_cos5','sticker_sin5','sticker_cos5','Finland_sin13','Finland_cos13','Norway_sin13',\n     'Norway_cos13','store_sin13','store_cos13','mug_sin13','mug_cos13','sticker_sin13',\n     'sticker_cos13','Finland_sin17','Finland_cos17','Norway_sin17','Norway_cos17',\n     'store_sin17','store_cos17','mug_sin17','mug_cos17','sticker_sin17','sticker_cos17',\n     'Finland_sin21','Finland_cos21','Norway_sin21','Norway_cos21','store_sin21',\n     'store_cos21', 'mug_sin21','mug_cos21','sticker_sin21','sticker_cos21','Finland_sin25',\n     'Finland_cos25','Norway_sin25','Norway_cos25','store_sin25','store_cos25',\n     'mug_sin25','mug_cos25','sticker_sin25','sticker_cos25','Finland_sin29',\n     'Finland_cos29','Norway_sin29','Norway_cos29','store_sin29', 'store_cos29',\n     'mug_sin29','mug_cos29','sticker_sin29','sticker_cos29','sin1', 'cos1', 'sin5', 'cos5', 'sin9', 'cos9',\n       'Finland_sin9', 'Finland_cos9', 'Norway_sin9', 'Norway_cos9',\n       'store_sin9', 'store_cos9', 'mug_sin9', 'mug_cos9', 'sticker_sin9',\n       'sticker_cos9', 'sin13', 'cos13', 'sin17', 'cos17', 'sin21', 'cos21',\n       'sin25', 'cos25', 'sin29', 'cos29','num_sold_x'\n                     ],axis=1)\n","fe824233":"df_out.columns","50d65616":"Y_out.sort_values(by=\"row_id\",inplace=True)","83e6c8b5":"df_out.to_csv(\"submission.csv\",index=False)\n#df_out.shape, df_out.columns\n","6fc2f704":"!tail submission.csv ","f2626303":"## Deep NN using Keras ","eaac79e6":"## Add Easter exact date ","8510c518":"## Add GDP ","317c29b8":"## Linear Regression ","4e3c2c52":"## Decision Tree"}}