{"cell_type":{"0424a72d":"code","c93bbba6":"code","52847edd":"code","8c220391":"code","5b7b3ba8":"code","7034d8e1":"code","2f23dfb8":"code","1b2b0f05":"code","5ca153d6":"code","8ec4895d":"code","83595fbc":"code","31186130":"markdown","92634420":"markdown","058a8e47":"markdown"},"source":{"0424a72d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport gc\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\n\n# ignoring warnings\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\nimport janestreet","c93bbba6":"train_df = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')\nfeatures_df = pd.read_csv('..\/input\/jane-street-market-prediction\/features.csv')\nexample_test = pd.read_csv('..\/input\/jane-street-market-prediction\/example_test.csv')\nsample_prediction_df = pd.read_csv('..\/input\/jane-street-market-prediction\/example_sample_submission.csv')\n\nprint('Train dataset shape: {}'.format(train_df.shape))\nprint('Features dataset shape: {}'.format(features_df.shape))\nprint('Example test dataset shape: {}'.format(example_test.shape))","52847edd":"# Loading prediction work space\nenv = janestreet.make_env()\niter_test = env.iter_test()","8c220391":"# Preparing the data\ntrain_df = train_df[train_df['weight'] != 0]\ntrain_df['action'] = ((train_df['weight'].values * train_df['resp']\n                       .values) > 0).astype('int')\n\nX_train = train_df.loc[:, train_df.columns.str.contains('feature')]\ny_train = train_df.loc[:, 'action']\n\nX_train = X_train.fillna(-999)","5b7b3ba8":"del train_df\ngc.collect()","7034d8e1":"y_train.astype('str').hist()\nplt.show()","2f23dfb8":"X_tr, X_valid, y_tr, y_valid = train_test_split(X_train, y_train, \n                                                train_size = 0.85, \n                                                random_state = 0)","1b2b0f05":"params = {'n_estimators': 500,\n          'max_depth': 10,\n          'learning_rate': 0.05,\n          'missing': -999,\n          'random_state': 0,\n          'tree_method': 'gpu_hist',\n          'verbosity': 1}\n\nmodel = XGBClassifier(**params)\n\nmodel.fit(X_tr, y_tr)","5ca153d6":"print('ROC AUC score: %.3f' \n      %roc_auc_score(y_valid, model.predict(X_valid)))","8ec4895d":"params = {'n_estimators': 500,\n          'max_depth': 11,\n          'subsample': 0.9,\n          'learning_rate': 0.05,\n          'missing': -999,\n          'random_state': 0,\n          'tree_method': 'gpu_hist'}\n\nmodel = XGBClassifier(**params)\n\nmodel.fit(X_train, y_train)","83595fbc":"for (test_df, sample_prediction_df) in iter_test:\n    X_test = test_df.loc[:, test_df.columns.str.contains('feature')]\n    X_test.fillna(-999)\n    preds = model.predict(X_test)\n    sample_prediction_df.action = preds\n    env.predict(sample_prediction_df)","31186130":"# Jane Street Market Prediction: Baseline (Part 2)\n![janestreet](https:\/\/www.janestreet.com\/assets\/logo_horizontal.png)\n\n### \u201cBuy low, sell high.\u201d It sounds so easy\u2026.\n\nIn reality, trading for profit has always been a difficult problem to solve, even more so in today\u2019s fast-moving and complex financial markets. Electronic trading allows for thousands of transactions to occur within a fraction of a second, resulting in nearly unlimited opportunities to potentially find and take advantage of price differences in real time.\n\n## It's the second part of my notebook: \n\n## [Jane Street Market Prediction: EDA, PCA, Baseline](https:\/\/www.kaggle.com\/maksymshkliarevskyi\/jane-street-market-prediction-eda-pca-baseline) with baseline model.","92634420":"# Baseline model","058a8e47":"We have balanced targets."}}