{"cell_type":{"1ffcc7dc":"code","40b5c06e":"code","c58eda6c":"code","e0409d88":"code","e2bb8965":"code","1cfaa27c":"code","1f7ff7fd":"code","c6a81c73":"code","78818119":"code","2daa28e2":"code","de0a892e":"code","104a51a4":"code","541b88c8":"code","b49e62f3":"code","b7bd1ab1":"code","8fded1c3":"code","461f9a37":"code","f8afe062":"code","d33e5a74":"code","b4271263":"code","37834d00":"code","3a22c53c":"code","b1b6cf46":"code","978b9a1d":"code","e9d5da2c":"code","d3168672":"code","f35d5325":"code","7529d2bb":"code","a3f683dd":"code","ddb7fd03":"code","e8a425b3":"code","3ab9429f":"code","c3332ebd":"code","13604499":"code","42f29238":"code","f10027b3":"code","226bc035":"code","6e0a4ebc":"code","dd183989":"code","05b77108":"code","0984dfec":"code","267f2c2f":"code","96280a11":"code","862c4f41":"code","b46a11e7":"code","62b63f74":"code","1b2f2045":"code","cccba3e9":"code","da8358fd":"markdown","d699a840":"markdown","2ed80e59":"markdown","410c6456":"markdown","57c6aa21":"markdown","8f706578":"markdown","20eda5b5":"markdown","74455681":"markdown","f82187fc":"markdown","d4da375c":"markdown","1592d187":"markdown","5b72d053":"markdown","46675cdb":"markdown","490f1da4":"markdown","21ce4d44":"markdown","c2a89bba":"markdown","13c205fd":"markdown","4e937d23":"markdown","4957a075":"markdown","d135dd7b":"markdown","3bfea33b":"markdown","d734d6fb":"markdown","20c90422":"markdown","1ba232d4":"markdown","78e25887":"markdown","1c225acb":"markdown","0473f457":"markdown","e452b035":"markdown","649d23eb":"markdown","61afbe55":"markdown","f0886938":"markdown","08bbc261":"markdown","ee378c41":"markdown","e0f815cc":"markdown","ccb956b2":"markdown","8f4a32cf":"markdown","1654e165":"markdown","d7b41390":"markdown","b5393787":"markdown","c02168c0":"markdown","72786f6c":"markdown","84a7d49b":"markdown","b097c211":"markdown","6bfa3f4b":"markdown","4b6a0fc7":"markdown","03f1f03f":"markdown","cc6d1c3d":"markdown","7457af04":"markdown","9bc11075":"markdown","7bd0d00c":"markdown","5c5bf9b5":"markdown","acb07170":"markdown","1905f011":"markdown"},"source":{"1ffcc7dc":"import folium\nimport numpy as np  \nimport pandas as pd \nfrom geopy.geocoders import Nominatim\nimport geocoder\nimport warnings\nimport requests\nfrom geopy import Nominatim\n\nwarnings.filterwarnings(\"ignore\")","40b5c06e":"# Coordinates of Mumbai\naddress= \"Mumbai, India\"\n\ngeolocator=Nominatim(user_agent='http')\nlocation=geolocator.geocode(address)\nLatitude=location.latitude\nLongitude=location.longitude\n\nprint('The geograpical coordinates of {} are {}, {}'.format(address,Latitude,Longitude))","c58eda6c":"#Geojson file of Mumbai\n!wget --quiet https:\/\/raw.githubusercontent.com\/datameet\/Municipal_Spatial_Data\/master\/Mumbai\/BMC_Wards.geojson\n\nmumbai_geo = r'BMC_Wards.geojson' # geojson file","e0409d88":"# Create a Mumbai map\nmumbai_map = folium.Map(location=[Latitude,Longitude], zoom_start=11)\nfolium.Marker(location=[Latitude,Longitude],popup=address).add_to(mumbai_map)\nmumbai_map.choropleth(\n    geo_data=mumbai_geo,\n    fill_color='blue', \n    fill_opacity=0.2, \n    line_opacity=0.2\n)\n\n# display map\nmumbai_map","e2bb8965":"import shapely.geometry\nimport pyproj\nimport math\n\ndef lonlat_to_xy(lon, lat):\n    proj_latlon = pyproj.Proj(proj='latlong',datum='WGS84')\n    proj_xy = pyproj.Proj(proj=\"utm\", zone=13, datum='WGS84')\n    xy = pyproj.transform(proj_latlon, proj_xy, lon, lat)\n    return xy[0], xy[1]\n\ndef xy_to_lonlat(x, y):\n    proj_latlon = pyproj.Proj(proj='latlong',datum='WGS84')\n    proj_xy = pyproj.Proj(proj=\"utm\", zone=13, datum='WGS84')\n    lonlat = pyproj.transform(proj_xy, proj_latlon, x, y)\n    return lonlat[0], lonlat[1]\n\ndef calc_xy_distance(x1, y1, x2, y2):\n    dx = x2 - x1\n    dy = y2 - y1\n    return math.sqrt(dx*dx + dy*dy)\n\nprint('Coordinate transformation check')\nprint('-------------------------------')\nprint('Mumbai center longitude={}, latitude={}'.format(Longitude, Latitude))\nx, y = lonlat_to_xy(Longitude,Latitude)\nprint('Mumbai center UTM X={}, Y={}'.format(x, y))\nlo,la=xy_to_lonlat(x,y)\nprint('Mumbai center longitude={}, latitude={}'.format(lo, la))","1cfaa27c":"mumbai_center_x, mumbai_center_y = lonlat_to_xy(Longitude, Latitude) # City center in Cartesian coordinates\n\nk = math.sqrt(3) \/ 2 # Vertical offset for hexagonal grid cells\nx_min = mumbai_center_x - 6000\nx_step = 600\ny_min = mumbai_center_y - 6000 - (int(21\/k)*k*600 - 12000)\/2\ny_step = 600 * k \n\nlatitudes = []\nlongitudes = []\ndistances_from_center = []\nxs = []\nys = []\nfor i in range(0, int(21\/k)):\n    y = y_min + i * y_step\n    x_offset = 300 if i%2==0 else 0\n    for j in range(0, 21):\n        x = x_min + j * x_step + x_offset\n        distance_from_center = calc_xy_distance(mumbai_center_x, mumbai_center_y, x, y)\n        if (distance_from_center <= 6001):\n            lon, lat = xy_to_lonlat(x, y)\n            latitudes.append(lat)\n            longitudes.append(lon)\n            distances_from_center.append(distance_from_center)\n            xs.append(x)\n            ys.append(y)\n\nprint(len(latitudes), 'candidate neighborhood centers generated.')","1f7ff7fd":"map_mumbai = folium.Map(location=[Latitude,Longitude], zoom_start=13)\nfolium.Marker([Latitude,Longitude], popup='Mumbai').add_to(map_mumbai)\nfor lat, lon in zip(latitudes, longitudes):\n    #folium.Circle([Latitude,Longitude], radius=6000, color='red', fill=False).add_to(map_mumbai) \n    folium.Circle([lat, lon], radius=300, color='blue', fill=False).add_to(map_mumbai)\n    #folium.Marker([lat, lon]).add_to(map_mumbai)\nmap_mumbai","c6a81c73":"geolocation=Nominatim(user_agent='my-app')\n\naddresses=[]\nfor lat, lon in zip(latitudes,longitudes):\n  location=geolocation.reverse(str(lat)+','+str(lon))\n  address=location.address\n  address=address.replace(', Maharashtra','')\n  address=address.replace(', India','')\n  addresses.append(address)\nprint('Done')\n\n","78818119":"addresses[100:110]","2daa28e2":"df_locations = pd.DataFrame({'Address': addresses,\n                             'Latitude': latitudes,\n                             'Longitude': longitudes,\n                             'X': xs,\n                             'Y': ys,\n                             'Distance from center': distances_from_center})\n\ndf_locations.head(10)","de0a892e":"#Foursquare API\nfoursquare_client_id = '#############################################' \nfoursquare_client_secret = '#############################################' \nversion = '20210217' \nfood_category='4d4b7105d754a06374d81259'\nlimit = 100\nradius=300","104a51a4":"# Category IDs corresponding to Italian restaurants were taken from Foursquare web site (https:\/\/developer.foursquare.com\/docs\/resources\/categories):\nfood_category = '4d4b7105d754a06374d81259' # 'Root' category for all food-related venues\n\nitalian_restaurant_categories = ['4bf58dd8d48988d110941735','55a5a1ebe4b013909087cbb6','55a5a1ebe4b013909087cb7c',\n                                 '55a5a1ebe4b013909087cba7','55a5a1ebe4b013909087cba1','55a5a1ebe4b013909087cba4',\n                                 '55a5a1ebe4b013909087cb95','55a5a1ebe4b013909087cb89','55a5a1ebe4b013909087cb9b',\n                                 '55a5a1ebe4b013909087cb98','55a5a1ebe4b013909087cbbf','55a5a1ebe4b013909087cb79',\n                                 '55a5a1ebe4b013909087cbb0','55a5a1ebe4b013909087cbb3','55a5a1ebe4b013909087cb74',\n                                 '55a5a1ebe4b013909087cbaa','55a5a1ebe4b013909087cb83','55a5a1ebe4b013909087cb8c',\n                                 '55a5a1ebe4b013909087cb92','55a5a1ebe4b013909087cb8f','55a5a1ebe4b013909087cb86',\n                                 '55a5a1ebe4b013909087cbb9','55a5a1ebe4b013909087cb7f','55a5a1ebe4b013909087cbbc',\n                                 '55a5a1ebe4b013909087cb9e','55a5a1ebe4b013909087cbc2','55a5a1ebe4b013909087cbad']\n\ndef is_restaurant(categories, specific_filter=None):\n    restaurant_words = ['restaurant', 'diner', 'taverna', 'steakhouse']\n    restaurant = False\n    specific = False\n    for c in categories:\n        category_name = c[0].lower()\n        category_id = c[1]\n        for r in restaurant_words:\n            if r in category_name:\n                restaurant = True\n        if 'fast food' in category_name:\n            restaurant = False\n        if not(specific_filter is None) and (category_id in specific_filter):\n            specific = True\n            restaurant = True\n    return restaurant, specific\n\n\ndef get_categories(categories):\n    return [(cat['name'], cat['id']) for cat in categories]\n\ndef format_address(location):\n    address = ', '.join(location['formattedAddress'])\n    address = address.replace(', Maharashtra', '')\n    address = address.replace(', India', '')\n    return address\n\ndef get_venues_near_location(lat, lon, category, client_id, client_secret, radius=500, limit=100):\n    version = '20180724'\n    url = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?client_id={}&client_secret={}&v={}&ll={},{}&categoryId={}&radius={}&limit={}'.format(\n        client_id, client_secret, version, lat, lon, category, radius, limit)\n    try:\n        results = requests.get(url).json()['response']['groups'][0]['items']\n        venues = [(item['venue']['id'],\n                   item['venue']['name'],\n                   get_categories(item['venue']['categories']),\n                   (item['venue']['location']['lat'], item['venue']['location']['lng']),\n                   format_address(item['venue']['location']),\n                   item['venue']['location']['distance']) for item in results]        \n    except:\n        venues = []\n    return venues","541b88c8":"# Let's now go over our neighborhood locations and get nearby restaurants\ndef get_restaurants(lats, lons):\n    restaurants = {}\n    italian_restaurants = {}\n    location_restaurants = []\n\n    print('Obtaining venues around candidate locations...')\n    for lat, lon in zip(lats, lons):\n        # Using radius=350 to meke sure we have overlaps\/full coverage so we don't miss any restaurant (we're using dictionaries to remove any duplicates resulting from area overlaps)\n        venues = get_venues_near_location(lat, lon, food_category, foursquare_client_id, foursquare_client_secret, radius=300, limit=100)\n        area_restaurants = []\n        for venue in venues:\n            venue_id = venue[0]\n            venue_name = venue[1]\n            venue_categories = venue[2]\n            venue_latlon = venue[3]\n            venue_address = venue[4]\n            venue_distance = venue[5]\n            is_res, is_italian = is_restaurant(venue_categories, specific_filter=italian_restaurant_categories)\n            if is_res:\n                x, y = lonlat_to_xy(venue_latlon[1], venue_latlon[0])\n                restaurant = (venue_id, venue_name, venue_latlon[0], venue_latlon[1], venue_address, venue_distance, is_italian, x, y)\n                if venue_distance<=300:\n                    area_restaurants.append(restaurant)\n                restaurants[venue_id] = restaurant\n                if is_italian:\n                    italian_restaurants[venue_id] = restaurant\n        location_restaurants.append(area_restaurants)\n    print('Done.')\n    return restaurants, italian_restaurants, location_restaurants\n","b49e62f3":" restaurants, italian_restaurants, location_restaurants = get_restaurants(latitudes, longitudes)","b7bd1ab1":"print('Total number of restaurants:', len(restaurants))\nprint('Total number of Italian restaurants:', len(italian_restaurants))\nprint('Percentage of Italian restaurants: {:.2f}%'.format(len(italian_restaurants) \/ len(restaurants) * 100))\nprint('Average number of restaurants in neighborhood:', np.array([len(r) for r in location_restaurants]).mean())","8fded1c3":"print('List of all restaurants')\nprint('-----------------------')\nfor r in list(restaurants.values())[:5]:\n    print(r)\nprint('...')\nprint('Total:', len(restaurants))","461f9a37":"print('List of Italian restaurants')\nprint('---------------------------')\nfor r in list(italian_restaurants.values())[:5]:\n    print(r)\nprint('...')\nprint('Total:', len(italian_restaurants))","f8afe062":"map_mumbai_restaurant = folium.Map(location=[Latitude,Longitude], zoom_start=13)\nfolium.Marker(location=[Latitude,Longitude], popup='Mumbai').add_to(map_mumbai_restaurant)\nfor res in restaurants.values():\n    lat = res[2]; lon = res[3]\n    is_italian = res[6]\n    color = 'red' if is_italian else 'blue'\n    folium.CircleMarker([lat, lon], radius=3, color=color, fill=True, fill_color=color, fill_opacity=1).add_to(map_mumbai_restaurant)\nmap_mumbai_restaurant","d33e5a74":"location_restaurants_count = [len(res) for res in location_restaurants]\n\ndf_locations['Restaurants in area'] = location_restaurants_count\n\nprint('Average number of restaurants in every area with radius=300m:', np.array(location_restaurants_count).mean())\n\ndf_locations.head(10)","b4271263":"distances_to_italian_restaurant = []\n\nfor area_x, area_y in zip(xs, ys):\n    min_distance = 10000\n    for res in italian_restaurants.values():\n        res_x = res[7]\n        res_y = res[8]\n        d = calc_xy_distance(area_x, area_y, res_x, res_y)\n        if d<min_distance:\n            min_distance = d\n    distances_to_italian_restaurant.append(min_distance)\n\ndf_locations['Distance to Italian restaurant'] = distances_to_italian_restaurant","37834d00":"df_locations.head()","3a22c53c":"print('Average distance to closest Italian restaurant from each area center:', df_locations['Distance to Italian restaurant'].mean())","b1b6cf46":"restaurant_latlons = [[res[2], res[3]] for res in restaurants.values()]\n\nitalian_latlons = [[res[2], res[3]] for res in italian_restaurants.values()]","978b9a1d":"def boroughs_style(feature):\n    return { 'color': 'blue', 'fill': False }","e9d5da2c":"from folium import plugins\nfrom folium.plugins import HeatMap\n\nheatmap_mumbai = folium.Map(location=[Latitude,Longitude], zoom_start=13)\nfolium.TileLayer('cartodbpositron').add_to(heatmap_mumbai) #cartodbpositron cartodbdark_matter\nHeatMap(restaurant_latlons).add_to(heatmap_mumbai)\nfolium.Marker(location=[Latitude,Longitude]).add_to(heatmap_mumbai)\nfolium.Circle(location=[Latitude,Longitude], radius=1000, fill=False, color='white').add_to(heatmap_mumbai)\nfolium.Circle(location=[Latitude,Longitude], radius=2000, fill=False, color='white').add_to(heatmap_mumbai)\nfolium.Circle(location=[Latitude,Longitude], radius=3000, fill=False, color='white').add_to(heatmap_mumbai)\nfolium.GeoJson(mumbai_geo, style_function=boroughs_style, name='geojson').add_to(heatmap_mumbai)\nheatmap_mumbai","d3168672":"heatmap_mumbai_italian = folium.Map(location=[Latitude,Longitude], zoom_start=13)\nfolium.TileLayer('cartodbpositron').add_to(heatmap_mumbai_italian) #cartodbpositron cartodbdark_matter\nHeatMap(italian_latlons).add_to(heatmap_mumbai_italian)\nfolium.Marker(location=[Latitude,Longitude]).add_to(heatmap_mumbai_italian)\nfolium.Circle(location=[Latitude,Longitude], radius=1000, fill=False, color='white').add_to(heatmap_mumbai_italian)\nfolium.Circle(location=[Latitude,Longitude], radius=2000, fill=False, color='white').add_to(heatmap_mumbai_italian)\nfolium.Circle(location=[Latitude,Longitude], radius=3000, fill=False, color='white').add_to(heatmap_mumbai_italian)\nfolium.GeoJson(mumbai_geo, style_function=boroughs_style, name='geojson').add_to(heatmap_mumbai_italian)\nheatmap_mumbai_italian","f35d5325":"new_x_min = mumbai_center_x - 3500\nnew_y_max = mumbai_center_y + 1000\nnew_width = 5000\nnew_height = 5000\nnew_center_x = new_x_min + 2500\nnew_center_y = new_y_max - 2500\nnew_center_lon, new_center_lat = xy_to_lonlat(new_center_x,new_center_y)\nnew_center = [new_center_lat, new_center_lon]\n\nmap_mumbai = folium.Map(location=new_center, zoom_start=14)\nHeatMap(restaurant_latlons).add_to(map_mumbai)\nfolium.Marker([Latitude,Longitude]).add_to(map_mumbai)\nfolium.Circle(new_center, radius=2500, color='white', fill=True, fill_opacity=0.4).add_to(map_mumbai)\nfolium.GeoJson(mumbai_geo, style_function=boroughs_style, name='geojson').add_to(map_mumbai)\nmap_mumbai","7529d2bb":"k = math.sqrt(3) \/ 2 # Vertical offset for hexagonal grid cells\nx_step = 100\ny_step = 100 * k \nnew_y_min = new_center_y - 2500\n\nnew_latitudes = []\nnew_longitudes = []\nnew_xs = []\nnew_ys = []\nfor i in range(0, int(51\/k)):\n    y = new_y_min + i * y_step\n    x_offset = 50 if i%2==0 else 0\n    for j in range(0, 51):\n        x = new_x_min + j * x_step + x_offset\n        d = calc_xy_distance(new_center_x,new_center_y, x, y)\n        if (d <= 2501):\n            lon, lat = xy_to_lonlat(x, y)\n            new_latitudes.append(lat)\n            new_longitudes.append(lon)\n            new_xs.append(x)\n            new_ys.append(y)\n\nprint(len(new_latitudes), 'candidate neighborhood centers generated.')","a3f683dd":"\nmap_mumbai = folium.Map(location=new_center, zoom_start=14)\nHeatMap(restaurant_latlons).add_to(map_mumbai)\nfolium.Marker([Latitude,Longitude]).add_to(map_mumbai)\nfolium.Marker([19.0974, 72.8745],popup=\"Chhatrapati Shivaji Maharaj International Airport\").add_to(map_mumbai)\nfolium.Circle(new_center, radius=2500, color='white', fill=True, fill_opacity=0.4).add_to(map_mumbai)\nfolium.GeoJson(mumbai_geo, style_function=boroughs_style, name='geojson').add_to(map_mumbai)\nmap_mumbai","ddb7fd03":"new_data=[]\n\nfor lat,lon in zip(new_latitudes,new_longitudes):\n  loc=geolocator.reverse(str(lat)+','+str(lon))\n  add=loc.address\n  new_data.append(add)\nprint('Done.')\nprint(len(new_data))","e8a425b3":"# List of addresses that belongs to the Airport\narea=['Bay K5, Sakinaka Tele Exchange Lane, Bindal Estate, L Ward, Zone 5, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay K5, Sakinaka Tele Exchange Lane, Bindal Estate, L Ward, Zone 5, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay V25, Sakinaka Tele Exchange Lane, Bindal Estate, L Ward, Zone 5, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay V31, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay V27, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay K1, Mathuradas Vasanji Road (Andheri Kurla Road), Jarimari, L Ward, Zone 5, Mumbai, Mumbai Suburban, Maharashtra, 400 072, India','Bay V4R, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay V4, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay G3, V K Krishna Marg, Sahar Gaon, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400099, India','Bay V11, V K Krishna Marg, Sahar Gaon, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400099, India','Bay V4, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay K2, Sakinaka Tele Exchange Lane, Bindal Estate, L Ward, Zone 5, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay V7, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay S3, V K Krishna Marg, Sahar Gaon, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400099, India','Bay V21, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay V16, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay S2, V K Krishna Marg, Sahar Gaon, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400099, India','Bay V9, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay V20, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay R2, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay V30, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay V26, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay V24, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay V22, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay R5, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay V13, V K Krishna Marg, Sahar Gaon, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400099, India','V29, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Jarimari, L Ward, Zone 5, Mumbai, Mumbai Suburban, Maharashtra, 400 072, India','Bay V8, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay R1, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay V23, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay V18, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay V14, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay 12, V K Krishna Marg, Sahar Gaon, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400099, India','Bay V14, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Jarimari, L Ward, Zone 5, Mumbai, Mumbai Suburban, Maharashtra, 400 072, India','Mathuradas Vasanji Road (Andheri Kurla Road), Jarimari, L Ward, Zone 5, Mumbai, Mumbai Suburban, Maharashtra, 400 072, India','Jarimari, L Ward, Zone 5, Mumbai, Mumbai Suburban, Maharashtra, 400070, India','Bay V6, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','CSIA T2, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay V28, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay K3, Sakinaka Tele Exchange Lane, Bindal Estate, L Ward, Zone 5, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay K6, Sakinaka Tele Exchange Lane, Bindal Estate, L Ward, Zone 5, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay G4, V K Krishna Marg, Sahar Gaon, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400099, India','Bay R4, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay G5, V K Krishna Marg, Sahar Gaon, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400099, India','Bay V15, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','Bay S1L, V K Krishna Marg, Sahar Gaon, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400099, India','Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400070, India','Air India Road, Kolivery Village, H\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400098, India', 'Kalina Kurla Road, Hallow Pul, L Ward, Zone 5, Mumbai, Mumbai Suburban, Maharashtra, 400070, India','Chhatrapati Shivaji Maharaj International Airport, V K Krishna Marg, Chakala Village, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400099, India','Bay R3, Mathuradas Vasanji Road (Andheri Kurla Road), Jarimari, L Ward, Zone 5, Mumbai, Mumbai Suburban, Maharashtra, 400 072, India','K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400070, India','Terminal 2, Sahar Elevated Road, Sahar, K\/E Ward, Zone 3, Mumbai, Mumbai Suburban, Maharashtra, 400 059, India','L Ward, Zone 5, Mumbai, Mumbai Suburban, Maharashtra, 400070, India']\n\nmap=folium.Map(new_center,zoom_start=14)\nfor lat,long,add in zip(new_latitudes,new_longitudes,new_data):\n  folium.Circle([lat,long],radius=5,color='red' if add in area  else 'blue' ,fill=True,fill_color='red',popup=add).add_to(map)\nmap","3ab9429f":"airport_df=pd.DataFrame({'Address':new_data,\n                         \"lat\":new_latitudes,\n                         \"lon\":new_longitudes})\n","c3332ebd":"airport_df","13604499":"airport_latlong=airport_df.loc[airport_df['Address'].isin(area),:]\nairport_latlong.reset_index(drop=True,inplace=True)\nairport_latlong","42f29238":"airport_lat=airport_latlong['lat'].to_list()\nlen(airport_lat)","f10027b3":"def count_restaurants_nearby(x, y, restaurants, radius=250):    \n    count = 0\n    for res in restaurants.values():\n        res_x = res[7]; res_y = res[8]\n        d = calc_xy_distance(x, y, res_x, res_y)\n        if d<=radius:\n            count += 1\n    return count\n\ndef find_nearest_restaurant(x, y, restaurants):\n    d_min = 100000\n    for res in restaurants.values():\n        res_x = res[7]; res_y = res[8]\n        d = calc_xy_distance(x, y, res_x, res_y)\n        if d<=d_min:\n            d_min = d\n    return d_min\n\nnew_restaurant_counts = []\nnew_italian_distances = []\n\nprint('Generating data on location candidates... ', end='')\nfor x, y in zip(new_xs, new_ys):\n    count = count_restaurants_nearby(x, y, restaurants, radius=450)\n    new_restaurant_counts.append(count)\n    distance = find_nearest_restaurant(x, y, italian_restaurants)\n    new_italian_distances.append(distance)\nprint('done.')\n","226bc035":"# Let's put this into dataframe\ndf_new_locations = pd.DataFrame({'Latitude':new_latitudes,\n                                 'Longitude':new_longitudes,\n                                 'X':new_xs,\n                                 'Y':new_ys,\n                                 'Restaurants nearby':new_restaurant_counts,\n                                 'Distance to Italian restaurant':new_italian_distances})\n\ndf_new_locations.head(10)\n","6e0a4ebc":"df_new_locations=df_new_locations.set_index('Latitude')\ndf_new_locations=df_new_locations.drop(airport_lat)\ndf_new_locations.reset_index(inplace=True)\ndf_new_locations.head()","dd183989":"df_new_locations.shape","05b77108":"good_res_count = np.array((df_new_locations['Restaurants nearby']<=1))\nprint('Locations with no more than two restaurants nearby:', good_res_count.sum())\n\ngood_ita_distance = np.array(df_new_locations['Distance to Italian restaurant']>=500)\nprint('Locations with no Italian restaurants within 400m:', good_ita_distance.sum())\n\ngood_locations = np.logical_and(good_res_count, good_ita_distance)\nprint('Locations with both conditions met:', good_locations.sum())\n\ndf_good_locations = df_new_locations[good_locations]\n","0984dfec":"good_latitudes = df_good_locations['Latitude'].values\ngood_longitudes = df_good_locations['Longitude'].values\n\ngood_locations = [[lat, lon] for lat, lon in zip(good_latitudes, good_longitudes)]\n\nmap_mumbai = folium.Map(location=new_center, zoom_start=14)\nfolium.TileLayer('cartodbpositron').add_to(map_mumbai)\nHeatMap(restaurant_latlons).add_to(map_mumbai)\nfolium.Circle(new_center, radius=2500, color='white', fill=True, fill_opacity=0.6).add_to(map_mumbai)\nfolium.Marker([Latitude,Longitude]).add_to(map_mumbai)\nfor lat, lon in zip(good_latitudes, good_longitudes):\n    folium.CircleMarker([lat, lon], radius=2, color='blue', fill=True, fill_color='blue', fill_opacity=1).add_to(map_mumbai) \nfolium.GeoJson(mumbai_geo, style_function=boroughs_style, name='geojson').add_to(map_mumbai)\nmap_mumbai","267f2c2f":"map_mumbai = folium.Map(location=new_center, zoom_start=14)\nHeatMap(good_locations, radius=25).add_to(map_mumbai)\nfolium.Marker([Latitude,Longitude]).add_to(map_mumbai)\nfor lat, lon in zip(good_latitudes, good_longitudes):\n    folium.CircleMarker([lat, lon], radius=2, color='blue', fill=True, fill_color='blue', fill_opacity=1).add_to(map_mumbai)\nfolium.GeoJson(mumbai_geo, style_function=boroughs_style, name='geojson').add_to(map_mumbai)\nmap_mumbai","96280a11":"from sklearn.cluster import KMeans\n\nnumber_of_clusters = 13\n\ngood_xys = df_good_locations[['X', 'Y']].values\nkmeans = KMeans(n_clusters=number_of_clusters, random_state=0).fit(good_xys)\n\ncluster_centers = [xy_to_lonlat(cc[0], cc[1]) for cc in kmeans.cluster_centers_]\n\nmap_mumbai = folium.Map(location=new_center, zoom_start=14)\nfolium.TileLayer('cartodbpositron').add_to(map_mumbai)\nHeatMap(restaurant_latlons).add_to(map_mumbai)\nfolium.Circle(new_center, radius=2500, color='white', fill=True, fill_opacity=0.4).add_to(map_mumbai)\nfolium.Marker([Latitude,Longitude]).add_to(map_mumbai)\nfor lon, lat in cluster_centers:\n    folium.Circle([lat, lon], radius=500, color='green', fill=True, fill_opacity=0.25).add_to(map_mumbai) \nfor lat, lon in zip(good_latitudes, good_longitudes):\n    folium.CircleMarker([lat, lon], radius=2, color='blue', fill=True, fill_color='blue', fill_opacity=1).add_to(map_mumbai)\nfolium.GeoJson(mumbai_geo, style_function=boroughs_style, name='geojson').add_to(map_mumbai)\nmap_mumbai","862c4f41":"map_mumbai = folium.Map(location=new_center, zoom_start=14)\nfolium.Marker([Latitude,Longitude]).add_to(map_mumbai)\nfor lat, lon in zip(good_latitudes, good_longitudes):\n    folium.Circle([lat, lon], radius=250, color='#00000000', fill=True, fill_color='#0066ff', fill_opacity=0.07).add_to(map_mumbai)\nfor lat, lon in zip(good_latitudes, good_longitudes):\n    folium.CircleMarker([lat, lon], radius=2, color='blue', fill=True, fill_color='blue', fill_opacity=1).add_to(map_mumbai)\nfor lon, lat in cluster_centers:\n    folium.Circle([lat, lon], radius=500, color='green', fill=False).add_to(map_mumbai) \nfolium.GeoJson(mumbai_geo, style_function=boroughs_style, name='geojson').add_to(map_mumbai)\nmap_mumbai","b46a11e7":"map_mumbai = folium.Map(location=[19.0908, 72.9077], zoom_start=15)\nfolium.Marker([Latitude,Longitude]).add_to(map_mumbai)\nfor lon, lat in cluster_centers:\n    folium.Circle([lat, lon], radius=500, color='green', fill=False).add_to(map_mumbai) \nfor lat, lon in zip(good_latitudes, good_longitudes):\n    folium.Circle([lat, lon], radius=250, color='#0000ff00', fill=True, fill_color='#0066ff', fill_opacity=0.04).add_to(map_mumbai)\nfor lat, lon in zip(good_latitudes, good_longitudes):\n    folium.CircleMarker([lat, lon], radius=2, color='blue', fill=True, fill_color='blue', fill_opacity=1).add_to(map_mumbai)\nfolium.GeoJson(mumbai_geo, style_function=boroughs_style, name='geojson').add_to(map_mumbai)\nmap_mumbai","62b63f74":"map_mumbai = folium.Map(location=[19.1075, 72.9018], zoom_start=15)\nfolium.Marker([Latitude,Longitude]).add_to(map_mumbai)\nfor lon, lat in cluster_centers:\n    folium.Circle([lat, lon], radius=500, color='green', fill=False).add_to(map_mumbai) \nfor lat, lon in zip(good_latitudes, good_longitudes):\n    folium.Circle([lat, lon], radius=250, color='#0000ff00', fill=True, fill_color='#0066ff', fill_opacity=0.04).add_to(map_mumbai)\nfor lat, lon in zip(good_latitudes, good_longitudes):\n    folium.CircleMarker([lat, lon], radius=2, color='blue', fill=True, fill_color='blue', fill_opacity=1).add_to(map_mumbai)\nfolium.GeoJson(mumbai_geo, style_function=boroughs_style, name='geojson').add_to(map_mumbai)\nmap_mumbai","1b2f2045":"candidate_area_addresses = []\nprint('==============================================================')\nprint('Addresses of centers of areas recommended for further analysis')\nprint('==============================================================\\n')\nfor lon, lat in cluster_centers:\n    addr = geolocator.reverse(str(lat)+','+str(lon))\n    addr=addr.address\n    addr=addr.replace(', India', '')\n    addr=addr.replace(', Maharashtra','')\n    candidate_area_addresses.append(addr)    \n    x, y = lonlat_to_xy(lon, lat)\n    d = calc_xy_distance(x, y, mumbai_center_x, mumbai_center_y)\n    print('{}{} => {:.1f}km from Mumbai'.format(addr,' '* 5 ,d\/1000))\n    ","cccba3e9":"map_mumbai = folium.Map(location=new_center, zoom_start=14)\nfolium.Circle([Latitude,Longitude], radius=50, color='red', fill=True, fill_color='red', fill_opacity=1,popup='Mumbai City').add_to(map_mumbai)\nfor lonlat, addr in zip(cluster_centers, candidate_area_addresses):\n    folium.Marker([lonlat[1], lonlat[0]], popup=addr).add_to(map_mumbai) \nfor lat, lon in zip(good_latitudes, good_longitudes):\n    folium.Circle([lat, lon], radius=250, color='#0000ff00', fill=True, fill_color='#0066ff', fill_opacity=0.05).add_to(map_mumbai)\nmap_mumbai","da8358fd":"# 4. Results and Discussion","d699a840":"# Analysis","2ed80e59":"## 1.Introduction:","410c6456":"Mumbai (previously known as Bombay until 1996) is a natural harbor on the west coast of India, and is the capital city of Maharashtra state. It is India's largest city, and one of the world's most populous cities. It is the financial capital of India and is a global city, known for being the home to one of the highest number of billionaires as well as having huge global influence. The city is the 9th most populous in the world. It has approximately 20 million people. Along with the neighboring cities of Navi Mumbai and Thane, it forms the world's 4th largest urban agglomeration.","57c6aa21":"Let's look at the generated addresses","8f706578":"In this project we will direct our efforts on detecting areas of Mumbai that have low restaurant density, particularly those with low number of Italian restaurants. We will limit our analysis to area ~6km around city center.\n\nIn first step we have collected the required **data: location and type (category) of every restaurant within 6km from Mumbai center**. We have also **identified Italian restaurants** (according to Foursquare categorization).\n\nSecond step in our analysis will be calculation and exploration of '**restaurant density**' across different areas of Mumbai - we will use **heatmaps** to identify a few promising areas close to center with low number of restaurants in general (*and* no Italian restaurants in vicinity) and focus our attention on those areas.\n\nIn third and final step we will focus on most promising areas and within those create **clusters of locations that meet some basic requirements** established in discussion with stakeholders: we will take into consideration locations with **no more than two restaurants in radius of 250 meters**, and we want locations **without Italian restaurants in radius of 400 meters**. We will present map of all such locations but also create clusters (using **k-means clustering**) of those locations to identify general zones \/ neighborhoods \/ addresses which should be a starting point for final 'street level' exploration and search for optimal venue location by stakeholders.","20eda5b5":"Looking good. So now we have all the restaurants in area within few kilometers from Mumbai Center, and we know which ones are Italian restaurants! We also know which restaurants exactly are in vicinity of every neighborhood candidate center.\n\nThis concludes the data gathering phase - we're now ready to use this data for analysis to produce the report on optimal locations for a new Italian restaurant!","74455681":"Based on definition of our problem, factors that will influence our decision are:\n\n 1. Number of existing restaurants in the neighborhood (any type of restaurant)\n 2. Number of Italian restaurants and distance to Italian restaurants in the neighborhood and\ndistance of neighborhood from city center\n\nWe decided to use regularly spaced grid of locations, centered around city center, to define our neighborhoods.\n\nFollowing data sources will be needed to extract\/generate the required information:\n\n 1. Centers of candidate areas will be generated algorithmically and approximate addresses of centers of those areas will be obtained using Geopy reverse geocoding.\n 2. Number of restaurants and their type and location in every neighborhood will be obtained using Foursquare API.\n 3. Coordinate of Mumbai center will be obtained using Geopy reverse geocoding.","f82187fc":"Now let's create a grid of area candidates, equaly spaced, centered around city center and within ~6km from Mumbai Center. Our neighborhoods will be defined as circular areas with a radius of 300 meters, so our neighborhood centers will be 600 meters apart.\n\nTo accurately calculate distances we need to create our grid of locations in Cartesian 2D coordinate system which allows us to calculate distances in meters (not in latitude\/longitude degrees). Then we'll project those coordinates back to latitude\/longitude degrees to be shown on Folium map. So let's create functions to convert between WGS84 spherical coordinate system (latitude\/longitude degrees) and UTM Cartesian coordinate system (X\/Y coordinates in  meters).","d4da375c":"Looking good. What we have now is a clear indication of zones with low number of restaurants in vicinity, and *no* Italian restaurants at all nearby.\n\nLet us now **cluster** those locations to create **centers of zones containing good locations**. Those zones, their centers and addresses will be the final result of our analysis. ","1592d187":"OK. Let us now **filter** those locations: we're interested only in **locations with no more than one restaurants in radius of 250 meters**, and **no Italian restaurants in radius of 500 meters**.","5b72d053":"Let's now see all the collected restaurants in our area of interest on map, and let's also show Italian restaurants in different color.","46675cdb":"Looking good. Let's now place all this into a Pandas dataframe.","490f1da4":"Let's perform some basic explanatory data analysis and derive some additional info from our raw data. First let's count the **number of restaurants in every area candidate**:","21ce4d44":"As you can see lot of area is covered by the Airport, so we will be removing the coordinates of the Airport from our selected area.\n\n","c2a89bba":"Generating the addresses of the new coordinates by Geopy reverse geocoding.","13c205fd":"# Analysis Of Mumbai City To Estimate Some Optimal Locations for A New Italian Restaurant ","4e937d23":"OK, we now have the coordinates of centers of neighborhoods\/areas to be evaluated, equally spaced (distance from every point to it's neighbors is exactly the same) and within ~6km from Mumbai Center. \n\nLet's now use Geopy reverse geocoding to get approximate addresses of those locations.","4957a075":"# 5. Conclusion","d135dd7b":"Let's visualize the data we have so far: city center location and candidate neighborhood centers:","3bfea33b":"Let's create a **hexagonal grid of cells**: we offset every other row, and adjust vertical row spacing so that **every cell center is equally distant from all it's neighbors**.","d734d6fb":"Great! , We can see the total area covered by the Airport in red.","20c90422":"Let's zoom in on candidate areas in **Ghatkopar**:","1ba232d4":" As we shifted our focus on analysis on areas north-east, north and east from Mumbai center and we can also generated candidate neighborhood centers.\n\nBut we can see that our selected area also covers the **Chhatrapati Shivaji Maharaj International Airport** and including the coordinates of the Airport will mislead our analysis\n","78e25887":"Looking good. We now have a bunch of locations fairly close to Mumbai Center (mostly in Ghatkopar, Asalpha and north-east corner ), and we know that each of those locations has no more than one restaurants in radius of 250m, and no Italian restaurant closer than 500m. Any of those locations is a potential candidate for a new Italian restaurant, at least based on nearby competition.\n\nLet's now show those good locations in a form of heatmap:","1c225acb":"Our clusters represent groupings of most of the candidate locations and cluster centers are placed nicely in the middle of the zones 'rich' with location candidates.\n\nAddresses of those cluster centers will be a good starting point for exploring the neighborhoods to find the best possible location based on neighborhood specifics.\n\nLet's see those zones on a city map without heatmap, using shaded areas to indicate our clusters:","0473f457":"OK. Now let's calculate two most important things for each location candidate: **number of restaurants in vicinity** (we'll use radius of **250 meters**) and **distance to closest Italian restaurant**.","e452b035":"### 1.1 Background","649d23eb":"Let's zoom in on candidate areas in **Asalpha**:","61afbe55":"OK, now let's calculate the **distance to nearest Italian restaurant from every area candidate center** (not only those within 300m - we want distance to closest one, regardless of how distant it is).","f0886938":"Let's visualize Mumbai city using Folium","08bbc261":"We have generated the addresess, now we will input the the addresses that belongs to the Airport and put them into a list","ee378c41":"# 2.Data","e0f815cc":"Geojson file of Mumbai City to get the boundary of Mumbai City.","ccb956b2":"Let's put the generated data into a Dataframe","8f4a32cf":"\nAs you can see from the figures, Mumbai is a city with a high population, In this project we will try to find an optimal location for a restaurant. Specifically, this report will be targeted to stakeholders interested in opening an Italian restaurant in Mumbai, India.\n\nSince there are lots of restaurants in Mumbai we will try to detect locations that are not already crowded with restaurants. We are also particularly interested in areas with no Italian restaurants in vicinity. We would also prefer locations as close to city center as possible preferably within 6 KM, assuming that first two conditions are met.\n\nWe will generate a few most promising neighborhoods based on this criteria.\n","1654e165":"Our analysis shows that although there is a great number of restaurants in Mumbai(~771 in our initial area of interest which was 12x12km around City Center), there are pockets of low restaurant density fairly close to city center. Highest concentration of restaurants was detected north and west from City Center, so we focused our attention to areas north, north-east and east, corresponding to Ghatkopar and Asalpha.\n\nAfter directing our attention to this more narrow area of interest (covering approx. 5x5km north-east from City Center) we first created a dense grid of location candidates (spaced 100m apart); those locations were then filtered so that those with more than one restaurants in radius of 250m and those with an Italian restaurant closer than 500m were removed.\n\nThose location candidates were then clustered to create zones of interest which contain greatest number of location candidates. Addresses of centers of those zones were also generated using reverse geocoding to be used as markers\/starting points for more detailed local analysis based on other factors.\n\nResult of all this is 12 zones containing largest number of potential new restaurant locations based on number of and distance to existing venues - both restaurants in general and Italian restaurants particularly.","d7b41390":"Looks like a few pockets of low restaurant density closest to city center can be found **north, north-east and east**. \n\nLet's create another heatmap map showing **heatmap\/density of Italian restaurants** only.","b5393787":"Let's see how this looks on a map.","c02168c0":"### 1.2 Business Problem","72786f6c":"Let's now extract the latitude and longitude of the addresses that belong to the Airport","84a7d49b":"## Date of Analysis : 18th February 2021","b097c211":"Purpose of this project was to identify Mumbai areas close to center with low number of restaurants (particularly Italian restaurants) in order to aid stakeholders in narrowing down the search for optimal location for a new Italian restaurant. By calculating restaurant density distribution from Foursquare data we have first identified general areas that justify further analysis (Ghatkopar and Asalpha), and then generated extensive collection of locations which satisfy some basic requirements regarding existing nearby restaurants. Clustering of those locations was then performed in order to create major zones of interest (containing greatest number of potential locations) and addresses of those zone centers were created to be used as starting points for final exploration by stakeholders.\n","6bfa3f4b":"# Neighborhood Candidates\nLet's create latitude & longitude coordinates for centroids of our candidate neighborhoods. We will create a grid of cells covering our area of interest which is aprox. 12x12 killometers centered around Mumbai city center.\n\nLet's first find the latitude & longitude of Mumbai city center, using Geopy reverse geocoding.","4b6a0fc7":"*OK*, so **on average Italian restaurant can be found within ~1300m** from every area center candidate. That's fairly close, so we need to filter our areas carefully!","03f1f03f":"Now that we have our location candidates, let's use Foursquare API to get info on restaurants in each neighborhood.\n\nWe're interested in venues in 'food' category, but only those that are proper restaurants - coffe shops, pizza places, bakeries etc. are not direct competitors so we don't care about those. So we will include in out list only venues that have 'restaurant' in category name, and we'll make sure to detect and include all the subcategories of specific 'Italian restaurant' category, as we need info on Italian restaurants in the neighborhood.","cc6d1c3d":"# Methodology ","7457af04":"### Thank you! , Please upvote if you found this notebook helpful.","9bc11075":"# Foursqaure API","7bd0d00c":"Italian restaurants represent a subset of ~5% of all restaurants in Mumbai but it also indicates higher density of existing Italian restaurants directly north and west from City Center, with closest pockets of **low Italian restaurant density positioned north, north-east and east from city center**.\n\nBased on this we will now focus our analysis on areas *north-east, north and east from Mumbai center* - we will move the center of our area of interest and reduce it's size to have a radius of **2.5km**. This places our location candidates mostly in **Ghatkopar and Asalpha** (another potentially interesting borough is **Chandivali** with large low restaurant density north-east from city center)","5c5bf9b5":"This nicely covers all the pockets of low restaurant density in Ghatkopar and Asalpha closest to Mumbai center.\n\nLet's also create new, more dense grid of location candidates restricted to our new region of interest (let's make our location candidates 100m appart).","acb07170":"Let's crete a map showing **heatmap \/ density of restaurants** and try to extract some meaningfull info from that. Also, a few circles indicating distance of 1km, 2km and 3km from Mumbai Center.","1905f011":"Now we will drop the latitudes and longitudes from the data which belongs to the Airport"}}