{"cell_type":{"78b4f598":"code","ad2659d2":"code","b0ac4a1d":"code","95c14af3":"code","9c7fa29e":"code","5c4472e3":"code","dd578dd4":"code","f406a046":"code","35ceb7e5":"code","302b7efe":"code","76b68b09":"code","f0e44ffe":"code","ef221f8c":"code","fa6e530f":"code","e1e3916f":"code","69054ab4":"code","b958058f":"code","ae5d342e":"code","29901565":"code","4ee23b7f":"code","3f0c47ab":"code","c02e5beb":"code","67a263b7":"code","e5961af6":"code","b73089de":"code","1669e5eb":"code","726d02b3":"code","3014b6ec":"code","077219e8":"code","74508d3b":"code","b3874bef":"code","a3718114":"code","90d1869b":"code","c9ecc8a4":"code","62b20b68":"code","5fc87e60":"code","7a74e9dd":"code","26ccc23d":"code","9c39094c":"code","98d6b688":"markdown","55383a8b":"markdown","b029661a":"markdown","8aae8e8a":"markdown","29984b46":"markdown","97a4d37f":"markdown","528022ae":"markdown","97a41eb6":"markdown"},"source":{"78b4f598":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ad2659d2":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","b0ac4a1d":"import os\nos.chdir(r'\/kaggle\/working')","95c14af3":"train.head()","9c7fa29e":"test.head()","5c4472e3":"train.shape\n","dd578dd4":"test.shape","f406a046":"train.info()","35ceb7e5":"test.info()","302b7efe":"train.isnull().sum()","76b68b09":"test.isnull().sum()","f0e44ffe":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","ef221f8c":"survived = train[train[\"Survived\"]==1][\"Sex\"].value_counts()\nsurvived\ndead = train[train[\"Survived\"]==0]['Sex'].value_counts()\ndead\ndf = pd.DataFrame([survived,dead])\ndf","fa6e530f":"def bar_chart(param):\n    survived = train[train[\"Survived\"]==1][param].value_counts()\n    dead = train[train[\"Survived\"]==0][param].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = [\"Survived\",\"Dead\"]\n    df.plot(kind=\"bar\", figsize = (10,5))","e1e3916f":"bar_chart('Sex')","69054ab4":"bar_chart('Embarked')","b958058f":"bar_chart('Pclass')","ae5d342e":"bar_chart('SibSp')","29901565":"bar_chart('Parch')","4ee23b7f":"test['Survived']=\"\"\ntest.head()","3f0c47ab":"train.info()","c02e5beb":"train['Age'].fillna(train['Age'].median(), inplace = True)\n\n    #complete embarked with mode\ntrain['Embarked'].fillna(train['Embarked'].mode()[0], inplace = True)\ntrain.info()","67a263b7":"test.info()","e5961af6":"test['Age'].fillna(test['Age'].median(), inplace = True)\ntest['Embarked'].fillna(test['Embarked'].mode()[0], inplace = True)\ntest['Fare'].fillna(test['Fare'].median(), inplace = True)\ntest.info()","b73089de":"train = train.drop(['Cabin','Name','Ticket'],axis=1)\ntest = test.drop(['Cabin','Name','Ticket'],axis=1)","1669e5eb":"from sklearn.preprocessing import LabelEncoder\n\nlb_make = LabelEncoder()\ntrain['Sex'] = lb_make.fit_transform(train['Sex'])\ntrain['Embarked'] = lb_make.fit_transform(train['Embarked'])\n\ntest['Sex'] = lb_make.fit_transform(test['Sex'])\ntest['Embarked'] = lb_make.fit_transform(test['Embarked'])\ntrain.head()","726d02b3":"plt.figure(figsize=(20,10))\nc= train.corr()\nsns.heatmap(c,cmap=\"BrBG\",annot=True)\nc","3014b6ec":"X_train = train[['Pclass','SibSp','Sex','Age','Embarked']]\ny_train = train['Survived']\nX_test = test[['Pclass','SibSp','Sex','Age','Embarked']]\ny_test = test['Survived']","077219e8":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\n\"\"\"print('Accuracy of K-NN classifier on training set: {:.2f}'\n     .format(knn.score(X_train, y_train)))\nprint('Accuracy of K-NN classifier on test set: {:.2f}'\n     .format(knn.score(X_test, y_test)))\"\"\"","74508d3b":"test[\"Survived\"] = knn.predict(X_test)\ntest","b3874bef":"df = test[[\"PassengerId\",\"Survived\"]]\ndf","a3718114":"df.to_csv('submission.csv')","90d1869b":"from IPython.display import FileLink\nFileLink(r'submission.csv')","c9ecc8a4":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\ntest[\"Survived\"] = logreg.predict(X_test)\ndf = test[[\"PassengerId\",\"Survived\"]]\ndf.to_csv('submission.csv')\nfrom IPython.display import FileLink\nFileLink(r'submission.csv')","62b20b68":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier().fit(X_train, y_train)\ntest[\"Survived\"] = clf.predict(X_test)\ndf = test[[\"PassengerId\",\"Survived\"]]\ndf.to_csv('submission.csv')\nfrom IPython.display import FileLink\nFileLink(r'submission.csv')","5fc87e60":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nlda = LinearDiscriminantAnalysis()\nlda.fit(X_train, y_train)\ntest[\"Survived\"] = lda.predict(X_test)\ndf = test[[\"PassengerId\",\"Survived\"]]\ndf.to_csv('submission.csv')\nfrom IPython.display import FileLink\nFileLink(r'submission.csv')","7a74e9dd":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(X_train, y_train)\ntest[\"Survived\"] = gnb.predict(X_test)\ndf = test[[\"PassengerId\",\"Survived\"]]\ndf.to_csv('submission.csv')\nfrom IPython.display import FileLink\nFileLink(r'submission.csv')","26ccc23d":"from sklearn.svm import SVC\nsvm = SVC()\nsvm.fit(X_train, y_train)\ntest[\"Survived\"] = svm.predict(X_test)\ndf = test[[\"PassengerId\",\"Survived\"]]\ndf.to_csv('submission.csv')\nfrom IPython.display import FileLink\nFileLink(r'submission.csv')","9c39094c":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators = 1000, random_state = 42)\nrf.fit(X_train, y_train)\ntest[\"Survived\"] = rf.predict(X_test)\ndf = test[[\"PassengerId\",\"Survived\"]]\ndf.to_csv('submission.csv')","98d6b688":"# 1- K-neighbors :","55383a8b":"# 3- Decision Tree :","b029661a":"# **EDA :**","8aae8e8a":"# 5- Gaussian Naive Bayes :\n","29984b46":"# 6- Support Vector Machine SVM :","97a4d37f":"# 7- Random Forest :","528022ae":"# 2- Logistic Regression :","97a41eb6":"# 4- Linear Discriminant Analysis :"}}