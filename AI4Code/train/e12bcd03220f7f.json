{"cell_type":{"8e7c5c5e":"code","b5ed96db":"code","a89ae3fe":"code","8d6cb71e":"code","3ffc2455":"code","a5c03234":"code","ea3fa12d":"code","552c4f38":"code","6ddbc6ae":"code","ff317b2e":"code","f4e62e7e":"code","b5dc5724":"code","0c59adbf":"code","b1b8a6bb":"code","c9572d3d":"code","4f445d18":"code","70d61794":"code","28920c1f":"code","f1e374d0":"code","c2f65d24":"code","8efe6b78":"code","f4394527":"code","fe9bccb2":"code","dcb7b65a":"code","382a860b":"code","73f46cf5":"code","1b335ba7":"code","9e62482a":"code","973d9f07":"code","13db5e38":"code","c40b7e68":"code","44df40c2":"code","99e32d3e":"code","9acd6d89":"code","df747957":"code","41b82e6f":"code","1b0f43f2":"code","66c869b8":"code","76e9cadc":"code","b37e8e3a":"code","9be570d9":"code","cfb080b3":"code","121b496b":"code","3d408a1b":"code","875343d2":"code","9bad96de":"code","b77dc6a2":"code","9e91015e":"code","15080e7a":"code","0f4d1683":"code","d08f7ca0":"markdown","35ce747a":"markdown","2bb01611":"markdown"},"source":{"8e7c5c5e":"import pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport category_encoders as ce\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import accuracy_score\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import RobustScaler\nimport numpy as np\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.feature_selection import f_regression, SelectKBest\nfrom sklearn.neighbors import NearestNeighbors,RadiusNeighborsClassifier\nfrom sklearn import ensemble\nfrom sklearn.metrics import classification_report\nfrom scipy.spatial import KDTree,distance_matrix, cKDTree","b5ed96db":"x = pd.read_csv(\"..\/input\/train_features.csv\")\ny = pd.read_csv(\"..\/input\/train_labels.csv\")\ny = y.drop([\"id\"],axis=1)\ntest_features = pd.read_csv(\"..\/input\/test_features.csv\")","a89ae3fe":"pd.set_option('display.max_columns', None)","8d6cb71e":"x.columns.values","3ffc2455":"x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=.25)","a5c03234":"from sklearn.neighbors import KNeighborsClassifier\nKn = KNeighborsClassifier(n_neighbors=20,weights='distance')\nKn.fit(x_train[[\"latitude\",\"longitude\"]],y_train)\nKn.predict(x_train[[\"latitude\",\"longitude\"]])\nKn.score(x_test[[\"latitude\",\"longitude\"]],y_test)","ea3fa12d":"from sklearn.neighbors import KNeighborsClassifier\nKn = KNeighborsClassifier(n_neighbors=1,weights='distance')\nKn.fit(x_train[[\"latitude\",\"longitude\"]],y_train)\nKn.predict(x_train[[\"latitude\",\"longitude\"]])\nKn.score(x_test[[\"latitude\",\"longitude\"]],y_test)","552c4f38":"from sklearn.neighbors import KNeighborsClassifier\nKn = KNeighborsClassifier(n_neighbors=1)\nKn.fit(x_train[[\"latitude\",\"longitude\"]],y_train)\nKn.predict(x_train[[\"latitude\",\"longitude\"]])\nKn.score(x_test[[\"latitude\",\"longitude\"]],y_test)","6ddbc6ae":"y_test.values.ravel().shape","ff317b2e":"kr = RadiusNeighborsClassifier(radius=0.0075,outlier_label='functional')\nkr.fit(x_train[[\"latitude\",\"longitude\"]],y_train)\nkr.score(x_test[[\"latitude\",\"longitude\"]],y_test.values.ravel())","f4e62e7e":"accuracy = []\nfor i in [0.001,0.01,0.1,0.5,.75,1,1.5,2]:\n    kr= RadiusNeighborsClassifier(radius = i,outlier_label='functional')\n    kr.fit(x_train[[\"latitude\",\"longitude\"]],y_train)\n    accuracy.append(kr.score(x_test[[\"latitude\",\"longitude\"]],y_test))\naccuracy","b5dc5724":"accuracy = []\nfor i in [0.001,0.0145,0.03,0.5]:\n    kr= RadiusNeighborsClassifier(radius = i,outlier_label='functional')\n    kr.fit(x_train[[\"latitude\",\"longitude\"]],y_train)\n    accuracy.append(kr.score(x_test[[\"latitude\",\"longitude\"]],y_test.values.ravel()))\naccuracy","0c59adbf":"j = Kn.predict_proba(x[[\"latitude\",\"longitude\"]])\nkn_predictions =pd.DataFrame(j)","b1b8a6bb":"kn_predictions.isna().sum()","c9572d3d":"x[[\"k_0\",\"k_1\",\"k_2\"]] = kn_predictions","4f445d18":"z = x[[\"funder\", \"installer\", \"permit\", \"scheme_management\",\"construction_year\",\"payment\",\"latitude\",\"longitude\",]]\nz = z.replace([0,\"unknown\"],np.nan)\nz = z.isna()\nz[\"poorly_documented\"] = False\nfor i in z.columns.values:\n    z[\"poorly_documented\"] = (z[\"poorly_documented\"] | z[i])\nx[\"poorly_documented\"] = z[\"poorly_documented\"]","70d61794":"x[\"location_approximation\"] = x[\"basin\"] + x[\"region\"] + x[\"lga\"]\nx_work =pd.DataFrame(x[[\"location_approximation\",\"longitude\",\"latitude\"]])\nz = x_work.groupby([\"location_approximation\"]).agg({ 'longitude':np.mean,'latitude':np.mean})\n","28920c1f":"# lmax = x[\"latitude\"].max()\n# for i in range(len(x[\"latitude\"])):\n#     if x[\"latitude\"][i] == lmax:\n#         x.latitude[i] = z.loc[ x[\"location_approximation\"][i] ][1]\n# lmin = x[\"longitude\"].min()\n# for i in range(len(x[\"longitude\"])):\n#     if x[\"longitude\"][i] < 25:\n#         x.longitude[i] = z.loc[ x[\"location_approximation\"][i] ][0]","f1e374d0":"\n\n\ndar_es_salaam = (39.28333,-6.8)\nmwanza = (32.9,-2.516667)\narusha = (36.683333,-3.366667)\ndodoma = (35.741944,-6.173056)\nmbeya = (33.45,-8.9)\nmorongoro = (37.66667,-6.816667)\ntanga = (39.1,-5.0666667)\nkahama = (32.6,-3.8375)\ntabora = (32.8,-5.016667)\nzanzibar = (39.199,-6.165)\n\nx[\"dar_es_salaam\"] = np.sqrt( (x[\"longitude\"] - dar_es_salaam[0])**2 + ( x[\"latitude\"]  - dar_es_salaam[1] )**2 )\nx[\"mwanza\"] = np.sqrt( (x[\"longitude\"] - mwanza[0])**2 + ( x[\"latitude\"]  - mwanza[1] )**2 )\nx[\"arusha\"] = np.sqrt( (x[\"longitude\"] - arusha[0])**2 + ( x[\"latitude\"]  - arusha[1] )**2 )\nx[\"dodoma\"] = np.sqrt( (x[\"longitude\"] - dodoma[0])**2 + ( x[\"latitude\"]  - dodoma[1] )**2 )\nx[\"mbeya\"] = np.sqrt( (x[\"longitude\"] - mbeya[0])**2 + ( x[\"latitude\"]  - mbeya[1] )**2 )\nx[\"morongoro\"] = np.sqrt( (x[\"longitude\"] - morongoro[0])**2 + ( x[\"latitude\"]  - morongoro[1] )**2 )\nx[\"tanga\"] = np.sqrt( (x[\"longitude\"] - tanga[0])**2 + ( x[\"latitude\"]  - tanga[1] )**2 )\nx[\"kahama\"] = np.sqrt( (x[\"longitude\"] - kahama[0])**2 + ( x[\"latitude\"]  - kahama[1] )**2 )\nx[\"tabora\"] = np.sqrt( (x[\"longitude\"] - tabora[0])**2 + ( x[\"latitude\"]  - tabora[1] )**2 )\nx[\"zanzibar\"] = np.sqrt( (x[\"longitude\"] - zanzibar[0])**2 + ( x[\"latitude\"]  - zanzibar[1] )**2 )\nx[\"distance_to_nearest_city\"] = x.loc[: , [\"dar_es_salaam\",\"mwanza\",\"arusha\",\"dodoma\",\"mbeya\",\"morongoro\",\"tanga\",\"kahama\",\"tabora\",\"zanzibar\"]].min(axis=1)\n","c2f65d24":"z = x[(x[\"construction_year\"] >1000)].median()\n# x[\"construction_year\"] = x[\"construction_year\"].replace(0,z)\n# x[\"construction_year\"]\nz[\"construction_year\"]","8efe6b78":"x[\"construction_year\"] = x[\"construction_year\"].replace(0,2000)","f4394527":"sns.distplot(x[\"construction_year\"] )","fe9bccb2":"top_installers =  x[\"installer\"].value_counts().head(100).index\ntop_installers = list(top_installers)\ntop_installers.remove('0')\ntop_installers\nx[\"top_installer\"] = x[\"installer\"].apply(lambda x : x in top_installers)","dcb7b65a":"top_funder =  x[\"funder\"].value_counts().head(100).index\ntop_funder = list(top_funder)\ntop_funder.remove('0')\ntop_funder\nx[\"top_funder\"] = x[\"funder\"].apply(lambda x : x in top_funder)","382a860b":"x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=.25)","73f46cf5":"x","1b335ba7":"pd.set_option('display.max_columns', None)","9e62482a":"x.head()","973d9f07":"len(x_train[\"management_group\"].unique())","13db5e38":"a = x_train[[\"longitude\",\"latitude\"]]\na = a.replace(0,np.nan)\na = a.dropna()\nplt.scatter(a[\"latitude\"],a[\"longitude\"])","c40b7e68":"a = x_train[[\"longitude\",\"latitude\"]]\na = a.replace(0,np.nan)\na = a.dropna()\n\npca = PCA(2)\np = pca.fit_transform(RobustScaler().fit_transform(a[[\"longitude\",\"latitude\"]]))\nplt.scatter(p.T[0],p.T[1])","44df40c2":"cols=[\"funder\",\"installer\",\"wpt_name\",\"basin\",\"subvillage\",\"region\",\"lga\",\"ward\",\"public_meeting\",\"scheme_management\"\\\n     ,\"scheme_name\",\"extraction_type\",\"extraction_type_group\",\"extraction_type_class\",\"management\",\"payment\", \"payment_type\",\\\n     \"water_quality\",\"quality_group\",\"quantity\",\"quantity_group\",\"source\",\"source_type\",\"source_class\",\"waterpoint_type\",\"waterpoint_type_group\"]","99e32d3e":"len(x_train[\"recorded_by\"].unique())","9acd6d89":"sns.distplot(x_train[\"num_private\"])","df747957":"a = x_train[\"population\"]\na =a.replace(0,a.mean())\na = np.log(a)\nsns.distplot(a)","41b82e6f":"pipeline = make_pipeline(\nLogisticRegression()\n)","1b0f43f2":"c = [\"basin\",\"region\",\"region_code\",\"district_code\",\"scheme_management\",\"extraction_type\",\"management\",\\\n         \"extraction_type_group\",\"quantity_group\", \"payment\", \"waterpoint_type\",\"water_quality\",\"quality_group\",\"public_meeting\"\\\n        ,\"lga\",\"poorly_documented\",\"source\",\"source_class\",\"0\",\"1\",\"2\"]","66c869b8":"class_weights = {'functional':1,'non functional':1.2,'functional needs repair':1}","76e9cadc":"c = [\"basin\",\"region\",\"region_code\",\"district_code\",\"scheme_management\",\"extraction_type\",\"management\",\\\n         \"extraction_type_group\",\"quantity_group\", \"payment\", \"waterpoint_type\",\"water_quality\",\"quality_group\",\"public_meeting\"\\\n        ,\"lga\",\"poorly_documented\",\"source\",\"source_class\",\"extraction_type_class\", \"top_installer\",\"management_group\",\\\n         \"top_funder\",\"distance_to_nearest_city\", 'gps_height',\"population\",\"construction_year\"]\n","b37e8e3a":"cols1 = [\"basin\",\"region\",\"region_code\",\"district_code\",\"scheme_management\",\"extraction_type\",\"management\",\\\n         \"extraction_type_group\",\"quantity_group\", \"payment\", \"waterpoint_type\",\"water_quality\",\"quality_group\",\"public_meeting\"\\\n        ,\"lga\",\"poorly_documented\",\"source\",\"source_class\",\"extraction_type_class\", \"top_installer\",\"management_group\",\\\n         \"top_funder\"]\npipeline = make_pipeline(\nce.OneHotEncoder(cols = cols1,use_cat_names=True),\n    RobustScaler(),\n    PCA(349),\nLogisticRegression(solver='lbfgs',class_weight=class_weights)\n)\npipeline.fit(x_train[c],y_train)\ny_pred = pipeline.predict(x_test[c])\naccuracy_score(y_test,y_pred)","9be570d9":"# cols1 = [\"basin\",\"region\",\"region_code\",\"district_code\",\"scheme_management\",\"extraction_type\",\"management\",\\\n#          \"extraction_type_group\",\"quantity_group\", \"payment\", \"waterpoint_type\",\"water_quality\",\"quality_group\",\"public_meeting\"\\\n#         ,\"lga\",\"poorly_documented\",\"source\",\"source_class\",\"extraction_type_class\", \"top_installer\",\"management_group\",\\\n#          \"top_funder\"]\n# pipeline = make_pipeline(\n# ce.OneHotEncoder(cols = cols1, use_cat_names=True),\n#     RobustScaler(),\n#     PCA(349),\n# ensemble.GradientBoostingClassifier(subsample=0.9,n_estimators=200,max_depth=4)\n# )\n# pipeline.fit(x_train[c],y_train)\n# y_pred = pipeline.predict(x_test[c])\n# accuracy_score(y_test,y_pred)","cfb080b3":"print(classification_report(y_test,y_pred))","121b496b":"# from sklearn.metrics import confusion_matrix\n# confusion_matrix(y_test,y_pred)\n# def confusion_viz(y_true, y_pred):\n#     matrix = confusion_matrix(y_true,y_pred)\n#     return sns.heatmap(matrix, annot=True,\n#                       fmt=',', linewidths=1,linecolor='grey',\n#                       square=True,\n#                       xticklabels=['Predicted\\nFunctional', 'Predicted\\nNeeds Repair', \"Predicted\\nNon Functional\"], \n#                        yticklabels=['Actual\\nFunctional', 'Actual\\nNeeds Repair', \"Actual\\nNon Functional\"])\n# confusion_viz(y_test, y_pred)","3d408a1b":"from xgboost import XGBClassifier\n\npipeline = make_pipeline(\nce.OneHotEncoder(cols = cols1, use_cat_names=True),\n    RobustScaler(),\n    PCA(349),\n    XGBClassifier(objective = 'multi:softmax', booster = 'gbtree', nrounds = 'min.error.idx', \n                          num_class = 3, maximize = False, eval_metric = 'merror', eta = .1,\n                          max_depth = 14, colsample_bytree = .4)\n)\npipeline.fit(x_train[c],y_train)\ny_pred = pipeline.predict(x_test[c])\naccuracy_score(y_test,y_pred)","875343d2":"z = test_features[[\"funder\", \"installer\", \"permit\", \"scheme_management\",\"construction_year\",\"payment\",\"latitude\",\"longitude\",]]\nz = z.replace([0,\"unknown\"],np.nan)\nz = z.isna()\nz[\"poorly_documented\"] = False\nfor i in z.columns.values:\n    z[\"poorly_documented\"] = (z[\"poorly_documented\"] | z[i])\ntest_features[\"poorly_documented\"] = z[\"poorly_documented\"]","9bad96de":"dar_es_salaam = (39.28333,-6.8)\nmwanza = (32.9,-2.516667)\narusha = (36.683333,-3.366667)\ndodoma = (35.741944,-6.173056)\nmbeya = (33.45,-8.9)\nmorongoro = (37.66667,-6.816667)\ntanga = (39.1,-5.0666667)\nkahama = (32.6,-3.8375)\ntabora = (32.8,-5.016667)\nzanzibar = (39.199,-6.165)\n\ntest_features[\"dar_es_salaam\"] = np.sqrt( (test_features[\"longitude\"] - dar_es_salaam[0])**2 + ( test_features[\"latitude\"]  - dar_es_salaam[1] )**2 )\ntest_features[\"mwanza\"] = np.sqrt( (test_features[\"longitude\"] - mwanza[0])**2 + ( test_features[\"latitude\"]  - mwanza[1] )**2 )\ntest_features[\"arusha\"] = np.sqrt( (test_features[\"longitude\"] - arusha[0])**2 + ( test_features[\"latitude\"]  - arusha[1] )**2 )\ntest_features[\"dodoma\"] = np.sqrt( (test_features[\"longitude\"] - dodoma[0])**2 + ( test_features[\"latitude\"]  - dodoma[1] )**2 )\ntest_features[\"mbeya\"] = np.sqrt( (test_features[\"longitude\"] - mbeya[0])**2 + ( test_features[\"latitude\"]  - mbeya[1] )**2 )\ntest_features[\"morongoro\"] = np.sqrt( (test_features[\"longitude\"] - morongoro[0])**2 + ( test_features[\"latitude\"]  - morongoro[1] )**2 )\ntest_features[\"tanga\"] = np.sqrt( (test_features[\"longitude\"] - tanga[0])**2 + ( test_features[\"latitude\"]  - tanga[1] )**2 )\ntest_features[\"kahama\"] = np.sqrt( (test_features[\"longitude\"] - kahama[0])**2 + ( test_features[\"latitude\"]  - kahama[1] )**2 )\ntest_features[\"tabora\"] = np.sqrt( (test_features[\"longitude\"] - tabora[0])**2 + ( test_features[\"latitude\"]  - tabora[1] )**2 )\ntest_features[\"zanzibar\"] = np.sqrt( (test_features[\"longitude\"] - zanzibar[0])**2 + ( test_features[\"latitude\"]  - zanzibar[1] )**2 )\n\ntest_features[\"distance_to_nearest_city\"] = test_features.loc[: , [\"dar_es_salaam\",\"mwanza\",\"arusha\",\"dodoma\",\"mbeya\",\"morongoro\",\"tanga\",\"kahama\",\"tabora\",\"zanzibar\"]].min(axis=1)","b77dc6a2":"test_features\ntest_features[\"construction_year\"] = test_features[\"construction_year\"].replace(0,2000)","9e91015e":"test_features[\"top_installer\"] = test_features[\"installer\"].apply(lambda x : x in top_installers)\ntest_features[\"top_funder\"] = test_features[\"funder\"].apply(lambda x : x in top_funder)\n\ny_test_pred = pipeline.predict(test_features[c])\ny_test_pred\ndf = pd.DataFrame(y_test_pred,columns=[\"status_group\"])\ndf = pd.concat([test_features[\"id\"],df],axis=1)\ndf = df.set_index(\"id\")\ndf.to_csv(\"y_test_pred.csv\")","15080e7a":"x_train","0f4d1683":"accuracy_score(y_test_pred)","d08f7ca0":"# Best model","35ce747a":"Each degree of latitude is ~ 69 miles\/111Km. \n* So .1 is 6.9 miles.\n* 0.01 is .69 miles\n* 0.0145 is ~ 1 mile","2bb01611":"# Getting an estimate from all the other wells within a 1 mile radius is a solid estimate."}}