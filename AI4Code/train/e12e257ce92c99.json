{"cell_type":{"f2cc785f":"code","ea65d30e":"code","ff9a1ff0":"code","6b8a81d4":"code","b2c25eaa":"code","7b3e800b":"code","dc5f8d74":"code","b4e1edba":"code","626f9521":"code","6eaed357":"code","cdc462e9":"code","be0a9480":"code","b13b8458":"code","1417c011":"code","3bd7e3ab":"code","f9d7d42d":"code","5020c4b9":"code","24a67f06":"code","01fdba9a":"code","db85acfa":"markdown","bee313c4":"markdown","76df21de":"markdown","825de15c":"markdown","daa67b4c":"markdown"},"source":{"f2cc785f":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n%matplotlib inline\n\n\nplt.rcParams['figure.figsize'] = (6, 4)\nplt.style.use('ggplot')\n%config InlineBackend.figure_formats = {'png', 'retina'}\nfrom surprise import Reader, Dataset, SVD, evaluate","ea65d30e":"anime = pd.read_csv('..\/input\/anime.csv')","ff9a1ff0":"anime.head()","6b8a81d4":"#df_title = anime.loc['anime_id','name']\ndf_title = anime.drop(['genre','type','episodes','rating','members'], axis=1)\ndf_title.set_index('anime_id', inplace = True)\ndf_title.head()","b2c25eaa":"print(anime.shape)","7b3e800b":"user = pd.read_csv('..\/input\/rating.csv')","dc5f8d74":"user.head(10)","b4e1edba":"print(user.shape)","626f9521":"# merge 2 dataset\ndf = pd.merge(anime,user,on=['anime_id','anime_id'])\ndf= df[df.user_id <= 20000]\ndf.head(10)","6eaed357":"f = ['count','mean']\n\ndf_movie_summary = df.groupby('anime_id')['rating_y'].agg(f)\ndf_movie_summary.index = df_movie_summary.index.map(int)\nmovie_benchmark = round(df_movie_summary['count'].quantile(0.8),0)\ndrop_movie_list = df_movie_summary[df_movie_summary['count'] < movie_benchmark].index\n\nprint('Movie minimum times of review: {}'.format(movie_benchmark))\n\ndf_cust_summary = df.groupby('user_id')['rating_y'].agg(f)\ndf_cust_summary.index = df_cust_summary.index.map(int)\ncust_benchmark = round(df_cust_summary['count'].quantile(0.8),0)\ndrop_cust_list = df_cust_summary[df_cust_summary['count'] < cust_benchmark].index\n\nprint('Customer minimum times of review: {}'.format(cust_benchmark))","cdc462e9":"print('Original Shape: {}'.format(df.shape))\ndf = df[~df['anime_id'].isin(drop_movie_list)]\ndf = df[~df['user_id'].isin(drop_cust_list)]\nprint('After Trim Shape: {}'.format(df.shape))\nprint('-Data Examples-')\nprint(df.iloc[::5000000, :])","be0a9480":"df_p = pd.pivot_table(df,values='rating_y',index='user_id',columns='anime_id')\n\nprint(df_p.shape)","b13b8458":"reader = Reader()\n\n# get just top 100K rows for faster run time\ndata = Dataset.load_from_df(df[['user_id', 'anime_id', 'rating_y']][:100000], reader)\ndata.split(n_folds=3)\n\nsvd = SVD()\nevaluate(svd, data, measures=['RMSE', 'MAE'])","1417c011":"df_244 = df[(df['user_id'] == 244) & (df['rating_y'] == 10)]\n#df_152 = df_152.set_index('anime_id')\n#df_152 = df_152.join(df_title)['name']\ndf_244.head(5)","3bd7e3ab":"user_244 = df_title.copy()\nuser_244 = user_244.reset_index()\nuser_244 = user_244[~user_244['anime_id'].isin(drop_movie_list)]\n\n# getting full dataset\ndata = Dataset.load_from_df(df[['user_id', 'anime_id', 'rating_y']], reader)\n\ntrainset = data.build_full_trainset()\nsvd.train(trainset)\n\nuser_244['Estimate_Score'] = user_244['anime_id'].apply(lambda x: svd.predict(144, x).est)\n\nuser_244 = user_244.drop('anime_id', axis = 1)\n\nuser_244 = user_244.sort_values('Estimate_Score', ascending=False)\nuser_244.head(10)\n","f9d7d42d":"df_title['name']","5020c4b9":"def recommend(movie_title, min_count):\n    print(\"For anime ({})\".format(movie_title))\n    print(\"- Top 10 anime recommended based on Pearsons'R correlation - \")\n    i = int(df_title.index[df_title['name'] == movie_title][0])\n    target = df_p[i]\n    similar_to_target = df_p.corrwith(target)\n    corr_target = pd.DataFrame(similar_to_target, columns = ['PearsonR'])\n    corr_target.dropna(inplace = True)\n    corr_target = corr_target.sort_values('PearsonR', ascending = False)\n    corr_target.index = corr_target.index.map(int)\n    corr_target = corr_target.join(df_title).join(df_movie_summary)[['PearsonR', 'name', 'count', 'mean']]\n    print(corr_target[corr_target['count']>min_count][:10].to_string(index=False))","24a67f06":"recommend(\"Howl no Ugoku Shiro\", 0)","01fdba9a":"recommend(\"Kimi no Iru Machi: Tasogare Kousaten\", 0)","db85acfa":"# Anime recommendation based on user clustering","bee313c4":"## Combine two datasets\n\n       In this kernel, I decide to reduce size of dataset, because of running time","76df21de":"## Injest","825de15c":"* ## Recommend with Collaborative Filtering\u00b6","daa67b4c":"## Recommend with Pearsons' R correlations"}}