{"cell_type":{"b7ba23d0":"code","00333d29":"code","98c15249":"code","e1063074":"code","366db64f":"code","9f2f99e4":"code","c76a2651":"code","f723ce29":"code","d1f6956d":"code","5c4ce656":"code","77f0fa19":"code","7ac408d2":"code","595a8bef":"code","2a43b69d":"code","cd21dff1":"code","d557a431":"code","8cc02dea":"code","45812179":"code","0e9bfa40":"code","8e0b865b":"code","b7c6ab8a":"code","424dcb33":"code","40ca40df":"markdown","72fa93b2":"markdown","b4c1d547":"markdown","1262e920":"markdown","1a9b65ad":"markdown","364a5d95":"markdown","033c368c":"markdown","1b0629e1":"markdown","9de8c229":"markdown","b1811c73":"markdown","2f92b741":"markdown","11b6e4e7":"markdown","d8b7951d":"markdown","34cd1f82":"markdown","387a1760":"markdown","73c709aa":"markdown","c7f636bf":"markdown"},"source":{"b7ba23d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00333d29":"# Read data\nimport numpy as np                           # Linear Algebra (calculate the mean and standard deviation)\nimport pandas as pd                          # manipulate data, data processing, load csv file I\/O (e.g. pd.read_csv)\n\n# Visualization\nimport matplotlib.pyplot as plt              # Visualization using matplotlib\n%matplotlib inline\nimport seaborn as sns                        # Visualization using seaborn\n\n# style\nplt.style.use(\"fivethirtyeight\")             # Set Graphs Background style using matplotlib\nsns.set_style(\"darkgrid\")                    # Set Graphs Background style using seaborn\n\nimport warnings                              # To ignore any warnings\nwarnings.filterwarnings(\"ignore\")","98c15249":"# Read train and test dataset\ntrain = pd.read_csv(\"\/kaggle\/input\/analytics-vidhya-janatahack-customer-segmentation\/Train_aBjfeNk.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/analytics-vidhya-janatahack-customer-segmentation\/Test_LqhgPWU.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/analytics-vidhya-janatahack-customer-segmentation\/sample_submission_wyi0h0z.csv\")","e1063074":"# Import first 5 rows\ndisplay(train.head())\ndisplay(test.head())\ndisplay(submission.head())","366db64f":"# Import Last 5 rows\ndisplay(train.tail())\ndisplay(test.tail())\ndisplay(submission.tail())","9f2f99e4":"# checking dimension (num of rows and columns) of dataset\nprint(\"Training data shape (Rows, Columns):\",train.shape)\nprint(\"Test data shape (Rows, Columns):\",test.shape)","c76a2651":"train_original=train.copy() \ntest_original=test.copy()","f723ce29":"# check dataframe structure like columns and its counts, datatypes & Null Values\ndisplay(train.info())\ndisplay(test.info())","d1f6956d":"display(train.columns)\ndisplay(test.columns)","5c4ce656":"train.describe()","77f0fa19":"print(train.Gender.value_counts())\ntrain.Gender.value_counts().plot.bar()","7ac408d2":"print(train['Ever_Married'].value_counts())\ntrain['Ever_Married'].value_counts().plot.bar()","595a8bef":"print(train['Graduated'].value_counts())\ntrain['Graduated'].value_counts().plot.bar()","2a43b69d":"print(train['Profession'].value_counts())\ntrain['Profession'].value_counts().plot.bar()","cd21dff1":"print(train['Spending_Score'].value_counts())\ntrain['Spending_Score'].value_counts().plot.bar()","d557a431":"print(train['Var_1'].value_counts())\ntrain['Var_1'].value_counts().plot.bar()","8cc02dea":"print(train['Segmentation'].value_counts())\ntrain['Segmentation'].value_counts().plot.bar()","45812179":"train.drop('ID', axis=1, inplace=True)\ntest.drop('ID', axis=1, inplace=True)","0e9bfa40":"display(train.isnull().sum())\ndisplay(test.isnull().sum())","8e0b865b":"train.corr()['Age']","b7c6ab8a":"sns.heatmap(train.corr(), annot=True,cmap='viridis', fmt='.1f', linewidth=1, square=True)","424dcb33":"sns.pairplot(train, hue='Var_1')","40ca40df":"### iv) Profession","72fa93b2":"### a. Correlation with the variable of interest","b4c1d547":"### iii) Graduated","1262e920":"### vii) Segmentation","1a9b65ad":"<h3 style=\"color:green\" align=\"left\"> c. Analysis of Relationship between variables <\/h3>","364a5d95":"<h2 style=\"color:blue\" align=\"left\"> 2. EDA(Exploratory Data Analysis) <\/h2>","033c368c":"### ii) Ever_Married","1b0629e1":"### 1. Drop unwanted features","9de8c229":"<h2 style=\"color:blue\" align=\"left\"> 1. Loading Data <\/h2>","b1811c73":"### b. Heatmap","2f92b741":"<h3 style=\"color:green\" align=\"left\"> a. Understand the data <\/h3>","11b6e4e7":"### v) Spending_Score","d8b7951d":"<h3 style=\"color:green\" align=\"left\"> b. Clean the data <\/h3>","34cd1f82":"### i) Gender","387a1760":"### vi) Var_1","73c709aa":"### c. Pairplot","c7f636bf":"### 2. Missing Values"}}