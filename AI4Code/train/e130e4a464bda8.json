{"cell_type":{"e753d2c8":"code","b144c669":"code","06bf58ad":"code","39dbc1f6":"code","5dbeb2d2":"code","26018294":"code","25bc17f1":"code","d28f9e6c":"code","d74e5140":"code","5fed6b00":"code","81ce2b06":"code","87f27625":"code","617ff304":"code","67193d7a":"code","e159b2f1":"code","f0fb95fd":"code","b592b95e":"code","94b2cfd1":"code","7fac990f":"code","00d76398":"code","154b29a0":"code","468614d2":"code","65e68a96":"code","fc48f170":"code","bc8db12b":"code","ae2335c6":"markdown","5e1cbbb5":"markdown","6c3b6aab":"markdown","9ea04633":"markdown","d2411342":"markdown","1da8e677":"markdown","37ef5c4d":"markdown","141eeda3":"markdown","261747f0":"markdown","b7b1b319":"markdown","858c3f5b":"markdown","a971d0c3":"markdown","d6c522f6":"markdown","72abce77":"markdown","8081b08a":"markdown"},"source":{"e753d2c8":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.decomposition import PCA\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import SelectFromModel\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b144c669":"train = pd.read_csv('\/kaggle\/input\/dataset-nj\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/dataset-nj\/test.csv')\nsample_output = pd.read_csv('\/kaggle\/input\/dataset-nj\/Sample_submission.csv')","06bf58ad":"train.head()","39dbc1f6":"test.head()","5dbeb2d2":"sample_output.head()","26018294":"train.describe()","25bc17f1":"test.describe()","d28f9e6c":"sample_output.describe()","d74e5140":"Y = train['Attrition']\nX = train\nX = X.drop(['Id','Attrition','EmployeeNumber'],axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=42)","5fed6b00":"# Label Encoding for Labelled data\nfor col in X.columns:\n    if(isinstance(train[col][0],str)):\n        X[col] = LabelEncoder().fit_transform(X[col])\n        \nfor col in X_train.columns:\n    if(isinstance(train[col][0],str)):\n        X_train[col] = LabelEncoder().fit_transform(X_train[col])\n        \nfor col in X_test.columns:\n    if(isinstance(train[col][0],str)):\n        X_test[col] = LabelEncoder().fit_transform(X_test[col])","81ce2b06":"X_test_data = test\nX_test_data = X_test_data.drop(['Id','EmployeeNumber'],axis=1\n                )\n# Label Encoding for Labelled data\nfor col in X_test_data.columns:\n    if(isinstance(test[col][0],str)):\n        X_test_data[col] = LabelEncoder().fit_transform(X_test_data[col])","87f27625":"# train the model\n\ndtc = DecisionTreeClassifier(max_depth=24,random_state=1)\ndtc.fit(X_train,y_train)","617ff304":"# auc-roc score\n\nprint('For Decision Tree Classifier : ')\ntrain_score = roc_auc_score(y_train,dtc.predict(X_train))\nprint('Train auc-roc score : ',train_score)\ntest_score = roc_auc_score(y_test,dtc.predict(X_test))\nprint('Test auc-roc score : ',test_score)","67193d7a":"# train the model\n\nrfc = RandomForestClassifier(n_estimators=1000,max_features=24,random_state=1)\nrfc.fit(X_train,y_train)","e159b2f1":"# auc-roc score\n\nprint('For Randon Forest Classifier : ')\ntrain_score = roc_auc_score(y_train,rfc.predict(X_train))\nprint('Train auc-roc score : ',train_score)\ntest_score = roc_auc_score(y_test,rfc.predict(X_test))\nprint('Test auc-roc score : ',test_score)","f0fb95fd":"# train the model\n\ngbc = GradientBoostingClassifier(n_estimators=100,max_features=24,random_state=0,learning_rate=1)\ngbc.fit(X_train,y_train)","b592b95e":"# auc-roc score\n\nprint('For Gradient Boosting Classifier : ')\ntrain_score = roc_auc_score(y_train,gbc.predict(X_train))\nprint('Train auc-roc score : ',train_score)\ntest_score = roc_auc_score(y_test,gbc.predict(X_test))\nprint('Test auc-roc score : ',test_score)","94b2cfd1":"# train the model\n\nsvc = SVC()\nsvc.fit(X_train,y_train)","7fac990f":"# auc-roc score\n\nprint('For Support Vector Classifier : ')\ntrain_score = roc_auc_score(y_train,svc.predict(X_train))\nprint('Train auc-roc score : ',train_score)\ntest_score = roc_auc_score(y_test,svc.predict(X_test))\nprint('Test auc-roc score : ',test_score)","00d76398":"# train the model\n\nlrc = LogisticRegression(C=1,max_iter=1000)\nlrc.fit(X_train,y_train)","154b29a0":"# auc-roc score\n\nprint('For Logistic Regression Classifier : ')\ntrain_score = roc_auc_score(y_train,lrc.predict(X_train))\nprint('Train auc-roc score : ',train_score)\ntest_score = roc_auc_score(y_test,lrc.predict(X_test))\nprint('Test auc-roc score : ',test_score)","468614d2":"# train the model\n\nmlpc = MLPClassifier(random_state=0,activation='logistic',max_iter=300,hidden_layer_sizes=(10000,))\nmlpc.fit(X_train,y_train)","65e68a96":"# auc-roc score\n\nprint('For MultiLayer Perceptron Classifier : ')\ntrain_score = roc_auc_score(y_train,mlpc.predict(X_train))\nprint('Train auc-roc score : ',train_score)\ntest_score = roc_auc_score(y_test,mlpc.predict(X_test))\nprint('Test auc-roc score : ',test_score)","fc48f170":"models = [dtc, rfc, gbc, lrc, mlpc]\nmodelName = ['DecisionTreeClassifier', \n             'RandomForestClassifier', \n             'GradientBoostingClassifier', \n             'LogisticRegressionClassifier',\n             'MultiLayerPrecetronClassifier'\n            ]\nfor model in models:\n    model.fit(X,Y)","bc8db12b":"for model,name in zip(models,modelName):\n    test_pred = model.predict_proba(X_test_data)[:,1]\n    model_result = pd.DataFrame({'Id':list(test['Id']),'Attrition':list(test_pred)})\n    model_result.to_csv(\"\/kaggle\/working\/\"+str(name)+\".csv\",index=False)","ae2335c6":"# Gradient Boosting Classifier","5e1cbbb5":"# Random Forest Classifier","6c3b6aab":"# Fitting The Models\n","9ea04633":"# Prepare The Training Dataset","d2411342":"# Preparing The Test Dataset ( Will Be Used For Final Prediction)","1da8e677":"# Analysing Datasets","37ef5c4d":"# Fitting The MODELS on the entire training set","141eeda3":"# Logistic Regression Classifier","261747f0":"### Decision Tree Classifier","b7b1b319":"# Importing the Important Libraries","858c3f5b":"# Support Vector Classifier","a971d0c3":"# Testing the Models on the Test Data again","d6c522f6":"# Visualizing the Training Dataset","72abce77":"# MultiLayer Perceptron Classifier","8081b08a":"# Reading Datasets"}}