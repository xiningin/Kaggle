{"cell_type":{"082622e7":"code","e9845b5c":"code","26e8f35c":"code","19c51c0a":"code","130fb99a":"code","a44f53e5":"code","41cf7106":"code","e9271cc1":"code","de94fa51":"code","13f9c06e":"code","413961fe":"code","08a30c08":"code","da5f3329":"code","65898884":"code","14f63bd3":"code","3bf2df05":"code","184f57a9":"code","27f81e7e":"code","c6701aa9":"code","bbda9a5e":"code","a4138739":"code","73b6d7ea":"code","5df22706":"code","8517dbf8":"code","a9536eb5":"code","eb4a7c9e":"code","227d94fe":"code","f51aa3fb":"code","4745cb8f":"code","d190e767":"code","50b571b3":"code","cfa2b505":"code","468bacfa":"code","05d8fd2b":"code","dcb30bc0":"code","fa1ea9de":"code","909074a0":"code","b7df17dc":"code","468a48e5":"code","37043a68":"markdown","956114b6":"markdown","656e59fe":"markdown","096bfcab":"markdown","8f457b16":"markdown","703ef611":"markdown","d6c5c8c8":"markdown","972da26b":"markdown","11d6b006":"markdown"},"source":{"082622e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport re\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e9845b5c":"train= pd.read_csv('\/kaggle\/input\/house-price-prediction-challenge\/train.csv')\ntrain.head()","26e8f35c":"train.info()","19c51c0a":"test= pd.read_csv('\/kaggle\/input\/house-price-prediction-challenge\/test.csv')\ntest.head()","130fb99a":"train['POSTED_BY'].value_counts()","a44f53e5":"train.isna().sum()","41cf7106":"test.isna().sum()","e9271cc1":"i=1\nplt.figure(figsize=(20,15))\nfor col in ['POSTED_BY', 'UNDER_CONSTRUCTION', 'RERA', 'BHK_NO.', 'BHK_OR_RK', 'READY_TO_MOVE', 'RESALE']:\n    plt.subplot(4,2,i)\n    sns.countplot(train[col])\n    i+=1","de94fa51":"train['BHK_OR_RK'].value_counts()","13f9c06e":"test['BHK_OR_RK'].value_counts()","413961fe":"train.drop(['ADDRESS', 'BHK_OR_RK'], axis=1, inplace=True )\ntest.drop(['ADDRESS', 'BHK_OR_RK'], axis=1, inplace=True )","08a30c08":"train.info()","da5f3329":"test.info()","65898884":"sns.scatterplot(x= 'LATITUDE', y= 'LONGITUDE', hue= 'TARGET(PRICE_IN_LACS)', data=train)","14f63bd3":"plt.figure(figsize=(12,10))\nsns.heatmap(train.corr(), annot=True, cmap='coolwarm')","3bf2df05":"train.drop('READY_TO_MOVE', axis=1, inplace=True)\ntest.drop('READY_TO_MOVE', axis=1, inplace=True)","184f57a9":"train['POSTED_BY']= train['POSTED_BY'].replace({'Owner':0, 'Dealer':1, 'Builder':2})\ntest['POSTED_BY']= test['POSTED_BY'].replace({'Owner':0, 'Dealer':1, 'Builder':2})","27f81e7e":"train.head()","c6701aa9":"X= train.drop('TARGET(PRICE_IN_LACS)', axis=1)\ny= train['TARGET(PRICE_IN_LACS)']","bbda9a5e":"X.head()","a4138739":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test= train_test_split(X,y, test_size=0.2)","73b6d7ea":"X_train.head()","5df22706":"X_test.head()","8517dbf8":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.metrics import mean_squared_error","a9536eb5":"key= ['RandomForestRegressor', 'DecisionTreeRegressor', 'XGBRegressor', 'CatBoostRegressor']\nvalue= [RandomForestRegressor(), DecisionTreeRegressor(), XGBRegressor(), CatBoostRegressor()]\n\nmodels= dict(zip(key,value))\n","eb4a7c9e":"models","227d94fe":"\nfor key, value in models.items():\n    value.fit(X_train, y_train)\n    train_pred= value.predict(X_train)\n    test_pred= value.predict(X_test)\n    train_error= np.sqrt(mean_squared_error(y_train, train_pred))\n    test_error= np.sqrt(mean_squared_error(y_test, test_pred))\n    print(f\"{key}: \\n \")\n    print(f\"Training error: {train_error} \\n\")\n    print(f\"Testing error: {test_error} \\n\")\n    print('\\n')\n    ","f51aa3fb":"test_pred[:5]","4745cb8f":"y_test[:5]","d190e767":"from sklearn.model_selection import RandomizedSearchCV\n\nrfr= RandomForestRegressor(criterion='mse', random_state=42)\nparams=dict(n_estimators= [10,50, 100,200],\n       max_depth= [10,50,100,200],\n       min_samples_split = [1,2,5,10],\n       min_samples_leaf=[1,5,10,20])\n\ngrid= RandomizedSearchCV(rfr, param_distributions=params, cv=5)\n","50b571b3":"grid.fit(X,y)","cfa2b505":"grid.best_estimator_","468bacfa":"pred= grid.best_estimator_.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, pred))","05d8fd2b":"final_predictions= grid.best_estimator_.predict(test)","dcb30bc0":"sample= pd.read_csv('\/kaggle\/input\/house-price-prediction-challenge\/sample_submission.csv')\nsample.head()","fa1ea9de":"sample.shape","909074a0":"final_predictions.shape","b7df17dc":"sample['TARGET(PRICE_IN_LACS)']= final_predictions\nsample.head()","468a48e5":"sample.to_csv('predictions.csv', index=False)","37043a68":"# Preprocess","956114b6":"# Hyperparameter Tuning","656e59fe":"# EDA","096bfcab":"**Ready to Move and Under Construction are completely co-related. So we drop one of them to prevent overfitting**","8f457b16":"# Creating Models\n\n**We use several models and then we will select the best model**","703ef611":"# The score has improved significantly after hyperparameter tuning","d6c5c8c8":"# **As we can see, RandomForestRegressor is performing best. It is surprising that it performs better CatBoost and XGBoost**","972da26b":"# Load Data","11d6b006":"# Upvote and Comment if you liked my notebook :)"}}