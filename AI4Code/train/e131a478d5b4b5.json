{"cell_type":{"eee9ca49":"code","7e56f0c3":"code","d9514769":"code","1bec0752":"code","9007ad72":"code","8c203987":"code","d7d1fcd7":"code","c96e2559":"code","83de93c0":"code","db761ff0":"code","b6482d38":"code","1e3f8afb":"code","5a097f09":"code","882a0d65":"code","414ead3a":"markdown","8e0e44a2":"markdown","fbf9c9b1":"markdown","7ae0ed90":"markdown","e0ba9477":"markdown","883e00d3":"markdown"},"source":{"eee9ca49":"import numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport cv2\nimport matplotlib.pyplot as plt\nimport os\nfrom tqdm import tqdm_notebook\n\nimport collections\n\n\n%matplotlib inline\n\nprint(os.listdir(\"..\/input\"))","7e56f0c3":"df_train = pd.read_csv('..\/input\/train.csv')","d9514769":"df_train.head()","1bec0752":"print(\"Train Sample Num = \",len(df_train))\nprint(\"Null Ratio in train = \",np.sum(df_train['EncodedPixels'].isnull())\/len(df_train))","9007ad72":"len(os.listdir(\"..\/input\/train_images\/\"))","8c203987":"df_sub = pd.read_csv('..\/input\/sample_submission.csv')","d7d1fcd7":"df_sub.head()","c96e2559":"print(\"Test Sample Num = \",len(df_sub))","83de93c0":"len(os.listdir(\"..\/input\/test_images\/\"))","db761ff0":"def rle2mask(rle, imgshape):\n    width = imgshape[0]\n    height= imgshape[1]\n    \n    mask= np.zeros( width*height ).astype(np.uint8)\n    \n    array = np.asarray([int(x) for x in rle.split()])\n    starts = array[0::2]\n    lengths = array[1::2]\n\n    current_position = 0\n    for index, start in enumerate(starts):\n        mask[int(start):int(start+lengths[index])] = 1\n        current_position += lengths[index]\n        \n    return np.flipud( np.rot90( mask.reshape(height, width), k=1 ) )","b6482d38":"num_show_img = 10\n\nplt.figure(figsize=(40, 40))\nfor i in range(num_show_img):\n    img_file = '..\/input\/train_images\/'+df_train['ImageId_ClassId'][i*4].split('_')[0]\n    img = cv2.imread(img_file)\n    mask = np.zeros_like(img)\n    \n    for j in range(4):\n        if type(df_train['EncodedPixels'][i*4+j]) is not str:\n            continue\n            \n        each_mask = rle2mask(df_train['EncodedPixels'][i*4+j],(np.size(img,0),np.size(img,1)))\n\n        if j == 3:\n            mask[:,:,0] = each_mask*255\n            mask[:,:,1] = each_mask*255\n        else:\n            mask[:,:,j] = each_mask*255\n        \n    plt.subplot(num_show_img,1,i+1)\n    plt.imshow(np.concatenate([img,mask],axis=0))\n    plt.title(img_file)","1e3f8afb":"df_train_removed = df_train[df_train['EncodedPixels'].notnull()].reset_index(drop=True)\nprint(\"Num of Defected Train Image = \",len(df_train_removed))\ndf_train_removed.head()","5a097f09":"df_train_removed['ImageId'] = df_train_removed['ImageId_ClassId'].apply(lambda x: x.split('_')[0])\n\ncounter = collections.Counter(list(df_train_removed['ImageId']))\nprint(\"uniq_ImageId = \",len(counter))\nprint(counter.most_common()[:5])","882a0d65":"plt.hist(counter.values(),bins=3)","414ead3a":"### Let's remove train images without any defects ","8e0e44a2":"## EDA","fbf9c9b1":"## Keras Segmentation Base Line","7ae0ed90":"```\nAll Train Image:        12,568\n================================\n\n0 defect Train Image:    5,902\n1 defect Train Image:    6,239\n2 defect Train Image:      425\n3 defect Train Image:        2\n```","e0ba9477":"### Let's visualize Defects\n - Class Id 1:  Red\n - Class Id 2:  Green\n - Class Id 3:  Blue\n - Class Id 4:  Yellow","883e00d3":"### To be continued..."}}