{"cell_type":{"d34d295c":"code","61dfd73b":"code","a26dc093":"code","19703127":"code","96ca4be6":"code","ae2375af":"code","42d63e66":"code","1c17c77b":"code","0ac9dac1":"code","388b6da4":"code","cccb991a":"code","c11f8481":"code","f8941d2e":"code","1032013b":"code","4e9a2cb4":"code","62d11dc1":"code","2903d309":"code","76f49a24":"code","fd9e9818":"code","6800b3d4":"code","7ac76b35":"code","269d8055":"code","b12d17d1":"code","77192e03":"code","12f39a0c":"code","89892eca":"code","5fb85952":"markdown","baf6ef26":"markdown","e8dd38c0":"markdown","25389de0":"markdown","5f291bfb":"markdown","ec8fe165":"markdown","74d7ac1c":"markdown","950fc3e5":"markdown","2a96f8ff":"markdown","e0391ea3":"markdown","d5f4a346":"markdown"},"source":{"d34d295c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","61dfd73b":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error , r2_score\n","a26dc093":"data = pd.read_csv(\"\/kaggle\/input\/pizza-price-prediction\/pizza_v1.csv\")","19703127":"data.head()","96ca4be6":"data.describe","ae2375af":"data.isna().sum()","42d63e66":"data[\"price\"] = np.array(map(lambda x: float(x[2:-4]), data[\"price_rupiah\"]))\ndata.drop(columns = [\"price_rupiah\"], inplace = True)","1c17c77b":"data.head(3)","0ac9dac1":"plt.figure(figsize = (14,8))\nsns.boxplot( x = data[\"company\"], y = data[\"price\"])","388b6da4":"plt.figure(figsize = (12,6))\nsns.countplot(data = data, x=\"company\")","cccb991a":"# Function for doing this changes \ndef ye_no(val):\n    if val == \"yes\":\n        return 1\n    elif val == \"no\":\n        return 0\n    return np.nan","c11f8481":"data[\"extra_sauce\"] = data[\"extra_sauce\"].apply(ye_no)\ndata[\"extra_cheese\"] = data[\"extra_cheese\"].apply(ye_no)","f8941d2e":"def ctg_to_int(ls, val):\n    arr = []\n    for i in ls:\n        if i == val:\n            arr.append(1)\n        else:\n            arr.append(0)\n    return arr","1032013b":"tp = data[\"topping\"]\ntoppings = data[\"topping\"].unique()\nfor tpg in toppings:\n    data[tpg] = ctg_to_int(tp, tpg)","4e9a2cb4":"var = data[\"variant\"]\nvarints = data[\"variant\"].unique()\nfor vr in varints:\n    data[vr] = ctg_to_int(var, vr)","62d11dc1":"comps = data[\"company\"]\ncm = comps.unique()\nfor c in cm:\n    data[c] = ctg_to_int(comps, c)","2903d309":"# Delete not useful for regresion algorithm data\ndata.drop(columns = [\"size\", \"topping\", \"variant\", \"company\"], axis = 1, inplace = True)","76f49a24":"data.head()","fd9e9818":"x, y = data.drop(columns = [\"price\"], axis = 1), data[\"price\"]","6800b3d4":"x_train, x_test, y_train, y_test = train_test_split(x,y )","7ac76b35":"ln = LinearRegression()\nln.fit(x_train, y_train)","269d8055":"pred = ln.predict(x_test)","b12d17d1":"mse = mean_squared_error(y_test, pred)\nr2 = r2_score(y_test, pred)","77192e03":"print(f\"MSE: {mse}\", f\"R2 Score: {r2}\", sep = \"\\n\")","12f39a0c":"cf = ln.coef_\ncl = data.columns.drop(\"price\")\ndc = {cl[n]: cf[n] for n in range(len(cf))}","89892eca":"print(sorted(dc.items(), key = lambda x: x[1], reverse = True)[:4])","5fb85952":"# **Linear Regresion**","baf6ef26":"# **Spliting to X, Y and to Test, Train data**","e8dd38c0":"# Visualize some data","25389de0":"# **Changing extra_cheese and extra_sauce columns**","5f291bfb":"# Adding new integer Price Column","ec8fe165":"# Reading the Dataset","74d7ac1c":"# Checking Info About Dataset","950fc3e5":"# **Preprocess these columns: company, topping, variant, extra_sauce, extra_cheese.**\n# (add new columns to each parameter and if this is included to this pizza 1, if not 0)","2a96f8ff":"# **Metriks**","e0391ea3":"Checking which things have the greatest influence","d5f4a346":"# Importing Necessary Libraries"}}