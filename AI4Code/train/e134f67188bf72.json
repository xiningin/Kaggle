{"cell_type":{"462ee08d":"code","0ebd93c5":"code","dfd1f8ac":"code","c7931b80":"code","8be5579d":"code","2baf8e01":"code","41000cde":"code","91f5e5c8":"code","49c5efd6":"code","2189a8a7":"code","fd3477b6":"code","a9aff9d4":"code","a1b9de7f":"code","9c84fa91":"code","fb1057c7":"code","f37da65e":"code","18b57658":"code","cbff41e0":"code","fc71731c":"code","8f3523a4":"code","9814e8b3":"code","b5f0c4d0":"code","89b0770e":"code","ee974c4f":"code","671af8ee":"code","261a1e74":"code","727c91ae":"code","94ea51d4":"code","7e9627f3":"code","5affbc8c":"markdown","df8b702c":"markdown","177003c1":"markdown","c0e5e66c":"markdown","1864dcee":"markdown"},"source":{"462ee08d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport matplotlib.pyplot as plt\nimport seaborn as sns; sns.set(style=\"ticks\", color_codes=True)\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import recall_score, precision_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ebd93c5":"df_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_train\n","dfd1f8ac":"df_train.info()","c7931b80":"sns.barplot(x='Sex', y ='Survived', data=df_train)\n","8be5579d":"fig, axis1 = plt.subplots(1,1,figsize=(40,10))\nder_data = df_train[['Age', 'Survived']].groupby(['Age'], as_index = False).mean()\nsns.barplot(x='Age', y ='Survived', data = der_data)","2baf8e01":"df_for_plot = df_train.iloc[:, 1:15]\nplt.figure(figsize = [15, 10])\nsns.heatmap(df_for_plot.corr(),annot = True, cmap = 'viridis_r', fmt = '.2f');","41000cde":"df_train['Age']=df_train['Age'].fillna(df_train.Age.median())\ndf_train['Age'].isnull().sum()\ndf_train['Age'].hist()\n\ndf_train['Embarked']=df_train['Embarked'].fillna('S')\n","91f5e5c8":"#make new features for Age ranges\ndef age_cat(age):\n    if age <= 16:\n        return 0\n    elif 16< age <=26:\n        return 10\n    elif 26< age <=36:\n        return 20\n    elif 36< age <=47:\n        return 3\n    elif 47 < age:\n        return 4\n    \ndf_train['Age_n'] = df_train['Age'].apply(age_cat)\n","49c5efd6":"Age_dummy = pd.get_dummies(df_train['Age_n'], prefix= 'Age')\ndf_train = pd.concat([df_train, Age_dummy], axis= 1)\n","2189a8a7":"def preprocess(df_train):\n    df_train=pd.concat([df_train,pd.get_dummies(df_train['Sex'])],axis=1)\n    df_train=pd.concat([df_train,pd.get_dummies(df_train['Parch'],prefix='Parch')],axis=1)\n    df_train=pd.concat([df_train,pd.get_dummies(df_train['SibSp'],prefix='SibSp')],axis=1)\n    df_train=pd.concat([df_train,pd.get_dummies(df_train['Embarked'],prefix='Embarked')],axis=1)\n    df_train=pd.concat([df_train,pd.get_dummies(df_train['Pclass'],prefix='Pclass')],axis=1)\n    \n    return df_train\n\n\ndf_train=preprocess(df_train)\n","fd3477b6":"#encoding for 'Embarked' feature\n\nembark=df_train['Embarked'].fillna('S')\ndf_train['Embarked']=embark.map({'S':1,\"C\":2,\"Q\":3}).astype(int)\nsns.barplot(x='Embarked', y ='Survived', data=df_train)\n","a9aff9d4":"df_train.columns","a1b9de7f":"features=['Pclass', 'Age', 'SibSp',\n       'Parch', 'Fare', 'female', 'male','Embarked',\n       'Parch_0', 'Parch_1', 'Parch_2', 'Parch_3', 'Parch_4', 'Parch_5',\n       'Parch_6', 'SibSp_0', 'SibSp_1', 'SibSp_2', 'SibSp_3', 'SibSp_4',\n       'SibSp_5', 'SibSp_8', 'Embarked_C', 'Embarked_Q', 'Embarked_S',\n       'Pclass_1', 'Pclass_2', 'Pclass_3','Age_n','Age_0',\n       'Age_3', 'Age_4', 'Age_10', 'Age_20']\ndf_train[features].head()","9c84fa91":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test=train_test_split(df_train[features],df_train['Survived'],test_size=0.2,random_state=42)","fb1057c7":"import catboost as cb\nmodel = cb.CatBoostRegressor(loss_function='RMSE'   ,depth= 5,\n    iterations= 2500,\n     subsample= 0.6,\n     learning_rate= 0.07,\n     l2_leaf_reg= 0.0001, silent=True)\n\nmodel.fit(X_train,y_train)\ny_pred=model.predict(X_test)","f37da65e":"#Random forest classification \nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nrf.fit(X_train, y_train)\ncross_forest_score = cross_val_score(rf, X_train, y_train, cv = 10, scoring = 'accuracy')\ncross_forest_score.mean()","18b57658":"#score on validation\ncross_forest_score = cross_val_score(rf, X_test, y_test, cv = 10, scoring = 'accuracy')\ncross_forest_score.mean()","cbff41e0":"y_train_rf_pred = cross_val_predict(rf, X_train, y_train, cv=3)\nprint(\"Confusion matrix: \")\nconfusion_matrix(y_train, y_train_rf_pred )\n","fc71731c":"print(\"Precision score = \",precision_score(y_train,y_train_rf_pred)*100)\nprint(\"Recall score = \",recall_score(y_train,y_train_rf_pred)*100)\n","8f3523a4":"conf_mx=confusion_matrix(y_train,y_train_rf_pred)\nplt.matshow(conf_mx, cmap=plt.cm.Blues)","9814e8b3":"#SVM classification model\nfrom sklearn.svm import SVC\nsvc_clf = SVC()\nsvc_clf.fit(X_train, y_train)\ncross_svc_score = cross_val_score(svc_clf, X_train, y_train, cv = 10, scoring = 'accuracy')\ncross_svc_score.mean()","b5f0c4d0":"df_test=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","89b0770e":"df_test['Age']=df_test['Age'].fillna(df_test.Age.median()).astype(int)\ndf_test['Fare']=df_test['Fare'].fillna(df_test.Fare.median()).astype(int)\n\ndf_test['Age'].isnull().sum()\ndf_train['Embarked']=df_train['Embarked'].fillna('S')\n","ee974c4f":"df_test=preprocess(df_test)\n\ndf_test['Embarked']=embark.map({'S':1,\"C\":2,\"Q\":3}).astype(int)\ndf_test['Age_n'] = df_test['Age'].apply(age_cat)","671af8ee":"Age_dummy_test = pd.get_dummies(df_test['Age_n'], prefix= 'Age')\ndf_test = pd.concat([df_test, Age_dummy_test], axis= 1)","261a1e74":"df_test.dtypes","727c91ae":"df_test[features].head()","94ea51d4":"y_pred=rf.predict(df_test[features])\n\ncross_rf_score = cross_val_score(rf, df_test[features], y_pred, cv = 10, scoring = 'accuracy')\ncross_rf_score.mean()","7e9627f3":"mysubmission = pd.DataFrame({\n        \"PassengerId\": df_test[\"PassengerId\"],\n        \"Survived\": y_pred\n    })\nmysubmission.to_csv('titanic.csv', index=False)","5affbc8c":"# EDA","df8b702c":"# Data Preprocessing","177003c1":"# Read Test Data","c0e5e66c":"### we can see that babies and old are with probability to live heigher than youth or middlle aged","1864dcee":"# Split the data"}}