{"cell_type":{"5dd71fb0":"code","6da00110":"code","05aef99e":"code","8d1a2ace":"code","0798862b":"code","2ccd5b21":"code","834ac27e":"code","a55dbbe8":"code","8d0b607a":"code","82e36597":"code","9eaa90ed":"markdown","b0ca6030":"markdown","8ccd64a4":"markdown","5ec6b0eb":"markdown","b7d6d682":"markdown","9071c724":"markdown","34203fc7":"markdown","102092af":"markdown","5643a87e":"markdown"},"source":{"5dd71fb0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nfrom fbprophet import Prophet\nfrom sklearn.metrics import r2_score\n\nplt.style.use(\"ggplot\")\n\ndf0 = pd.read_csv(\"..\/input\/covid19-data-from-john-hopkins-university\/CONVENIENT_global_confirmed_cases.csv\")\ndf1 = pd.read_csv(\"..\/input\/covid19-data-from-john-hopkins-university\/CONVENIENT_global_deaths.csv\")","6da00110":"df0","05aef99e":"df1","8d1a2ace":"print(df0.info())\nprint(df1.info())","0798862b":"print(df0.describe())\nprint(df1.describe())","2ccd5b21":"world = pd.DataFrame({\"Country\":[],\"Cases\":[]})\nworld[\"Country\"] = df0.iloc[:,1:].columns\ncases = []\nfor i in world[\"Country\"]:\n    cases.append(pd.to_numeric(df0[i][1:]).sum())\nworld[\"Cases\"]=cases\n\ncountry_list=list(world[\"Country\"].values)\nidx = 0\nfor i in country_list:\n    sayac = 0\n    for j in i:\n        if j==\".\":\n            i = i[:sayac]\n            country_list[idx]=i\n        elif j==\"(\":\n            i = i[:sayac-1]\n            country_list[idx]=i\n        else:\n            sayac += 1\n    idx += 1\nworld[\"Country\"]=country_list\nworld = world.groupby(\"Country\")[\"Cases\"].sum().reset_index()\nworld.head()\ncontinent=pd.read_csv(\"..\/input\/country-mapping-iso-continent-region\/continents2.csv\")\ncontinent[\"name\"]=continent[\"name\"].str.upper()\ncontinent[\"name\"]","834ac27e":"world[\"Cases Range\"]=pd.cut(world[\"Cases\"],[-150000,50000,200000,800000,1500000,15000000],labels=[\"U50K\",\"50Kto200K\",\"200Kto800K\",\"800Kto1.5M\",\"1.5M+\"])\nalpha =[]\nfor i in world[\"Country\"].str.upper().values:\n    if i == \"BRUNEI\":\n        i=\"BRUNEI DARUSSALAM\"\n    elif  i==\"US\":\n        i=\"UNITED STATES\" \n    if len(continent[continent[\"name\"]==i][\"alpha-3\"].values)==0:\n        alpha.append(np.nan)\n    else:\n        alpha.append(continent[continent[\"name\"]==i][\"alpha-3\"].values[0])\nworld[\"Alpha3\"]=alpha\n\nfig = px.choropleth(world.dropna(),\n                   locations=\"Alpha3\",\n                   color=\"Cases Range\",\n                    projection=\"mercator\",\n                    color_discrete_sequence=[\"white\",\"khaki\",\"yellow\",\"orange\",\"red\"])\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","a55dbbe8":"\ncount = []\nfor i in range(1,len(df0)):\n    count.append(sum(pd.to_numeric(df0.iloc[i,1:].values)))\n\ndf = pd.DataFrame()\ndf[\"Date\"] = df0[\"Country\/Region\"][1:]\ndf[\"Cases\"] = count\ndf=df.set_index(\"Date\")\n\ncount = []\nfor i in range(1,len(df1)):\n    count.append(sum(pd.to_numeric(df1.iloc[i,1:].values)))\n\ndf[\"Deaths\"] = count\n\ndf.Cases.plot(title=\"Daily Covid19 Cases in World\",marker=\".\",figsize=(10,5),label=\"daily cases\")\ndf.Cases.rolling(window=5).mean().plot(figsize=(10,5),label=\"MA5\")\nplt.ylabel(\"Cases\")\nplt.legend()\nplt.show()","8d0b607a":"df.Deaths.plot(title=\"Daily Covid19 Deaths in World\",marker=\".\",figsize=(10,5),label=\"daily deaths\")\ndf.Deaths.rolling(window=5).mean().plot(figsize=(10,5),label=\"MA5\")\nplt.ylabel(\"Deaths\")\nplt.legend()\nplt.show()","82e36597":"\nclass Fbprophet(object):\n    def fit(self,data):\n        \n        self.data  = data\n        self.model = Prophet(weekly_seasonality=True,daily_seasonality=False,yearly_seasonality=False)\n        self.model.fit(self.data)\n    \n    def forecast(self,periods,freq):\n        \n        self.future = self.model.make_future_dataframe(periods=periods,freq=freq)\n        self.df_forecast = self.model.predict(self.future)\n        \n    def plot(self,xlabel=\"Years\",ylabel=\"Values\"):\n        \n        self.model.plot(self.df_forecast,xlabel=xlabel,ylabel=ylabel,figsize=(9,4))\n        self.model.plot_components(self.df_forecast,figsize=(9,6))\n        \n    def R2(self):\n        return r2_score(self.data.y, self.df_forecast.yhat[:len(df)])\n        \ndf_fb  = pd.DataFrame({\"ds\":[],\"y\":[]})\ndf_fb[\"ds\"] = pd.to_datetime(df.index)\ndf_fb[\"y\"]  = df.iloc[:,0].values\n\nmodel = Fbprophet()\nmodel.fit(df_fb)\nmodel.forecast(30,\"D\")\nmodel.R2()\n\nforecast = model.df_forecast[[\"ds\",\"yhat_lower\",\"yhat_upper\",\"yhat\"]].tail(30).reset_index().set_index(\"ds\").drop(\"index\",axis=1)\nforecast[\"yhat\"].plot(marker=\".\",figsize=(10,5))\nplt.fill_between(x=forecast.index, y1=forecast[\"yhat_lower\"], y2=forecast[\"yhat_upper\"],color=\"gray\")\nplt.legend([\"forecast\",\"Bound\"],loc=\"upper left\")\nplt.title(\"Forecasting of Next 30 Days Cases\")\nplt.show()","9eaa90ed":"I will start the task of Covid-19 cases prediction with Python for the next 30 days by importing the necessary Python libraries and the dataset:","b0ca6030":"Now let\u2019s have a look at the daily death cases of Covid-19:","8ccd64a4":"# Data Preparation\nNow the next step is data preparation, I will simply prepare new data by combining the above datasets and then we will visualize a geographical plot of the data to see what we are going to work with:","5ec6b0eb":"Now let\u2019s have a look at the daily cases all around the world:","b7d6d682":"# Machine Learning Project on Covid-19 Cases Prediction with Python","9071c724":"##  hope you liked this article on Covid-19 cases predictions for the next 30 days with Python programming language. Feel free to ask your valuable questions in the comments section below. and upvote my work if you find it usefull","34203fc7":"### In this article, I will introduce you to a machine learning project on Covid-19 cases prediction with Python for the next 30 days. These types of predictive models help in providing an accurate prediction of epidemics, which is essential for obtaining information on the likely spread and consequences of infectious diseases.\n\n### Governments and other legislative bodies rely on these kinds of machine learning predictive models and ideas to suggest new policies and assess the effectiveness of applied policies.","102092af":"# Covid-19 Cases Prediction with Python for Next 30 Days\nNow, I will use the Facebook prophet model for the task of Covid-19 cases prediction with Python for the next 30 days. Facebook prophet model uses time series method for forecasting. \n\nLet\u2019s see how we can use the Facebook prophet model for Covid-19 cases prediction with Python for the next 30 days:","5643a87e":"# Data Visualization\nNow here I will prepare three visualizations. One will be a geographical visualization to visualize the worldwide spread of Covid-19. Then the next visualization will be to have a look at the daily cases of Covid-19 in the world. Then the last visualization will be to have a look at the daily death cases of Covid-19 in the world.\n\nNow let\u2019s start data visualization by looking at the worldwide spread of Covid-19:"}}