{"cell_type":{"732f4899":"code","13b92e4b":"code","f8800876":"code","0dea897e":"code","e9e07f74":"code","5842884f":"markdown","9e241687":"markdown","05971464":"markdown","70e6ad71":"markdown"},"source":{"732f4899":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score, accuracy_score\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","13b92e4b":"###To continue with previous EDA & Data Pre-processing\n\n##loading data\ntrain = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')\n\n##deal with missing data\ntest['Embarked'].fillna((train['Embarked'].mode()), inplace=True)\ntrain['Embarked'].fillna((train['Embarked'].mode()), inplace=True)\n\ntest['Fare'].fillna((train['Fare'].mean()), inplace=True)\ntrain['Fare'].fillna((train['Fare'].mean()), inplace=True)\ntrain['Fare'] = train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ntest['Fare'] = test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\n\ntest['Age'].fillna((train['Age'].median()), inplace=True)\ntrain['Age'].fillna((train['Age'].median()), inplace=True)\n\n##combine the number of SibSp & Parch +1 to be FamilySize, a new feature synthesized:\ntrain['FamilySize'] = train['SibSp'] + train['Parch'] + 1 \ntest['FamilySize'] = test['SibSp'] + test['Parch'] + 1 \n\n## Encodeing Categorical Columns:\n\n## Dropping unimportant columns:\ntrain.drop(['Name','Ticket','Cabin'], axis=1, inplace=True)\ntest.drop(['Name','Ticket','Cabin'], axis=1, inplace=True)\n\n## Applying Label Encoder:\nobj_cols = train.select_dtypes(include=['object']).columns.tolist()\nfor col in obj_cols:\n    le = LabelEncoder()\n    le.fit(train[col])\n    train[col] = le.transform(train[col])\n    test[col] = le.transform(test[col])","f8800876":"features = ['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked','FamilySize']\n\ntarget = train['Survived'].values","0dea897e":"lr = LogisticRegression()\nlr.fit(train[features], target)\nprint('Logistic Regression Model\\'s ROC AUC score is:', roc_auc_score(target, lr.predict_proba(train[features])[:,1]))\nprint('Logistic Regression Model\\'s accuracy score is:', accuracy_score(target, lr.predict(train[features])))","e9e07f74":"submission['Survived'] = lr.predict(test[features])\nsubmission.to_csv('submission-lr.csv', index=False)\nsubmission.head()","5842884f":"# Naive Models \ud83d\udc53","9e241687":"## Logistic Regression Model","05971464":"## Defining crutial features and the target:","70e6ad71":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:160%; text-align:center\">Tabular Playground Series April<\/p>\n1. [Exploratory Data Analysis \ud83d\udcca](https:\/\/www.kaggle.com\/zhaodianwen\/tps-april-1-eda\/)\n2. [Data Pre-processing \ud83d\udcdd](https:\/\/www.kaggle.com\/zhaodianwen\/tps-april-2-data-pre-processing\/)\n3. [Model Development \ud83e\uddf0](https:\/\/www.kaggle.com\/zhaodianwen\/tps-april-3-model-development\/)"}}