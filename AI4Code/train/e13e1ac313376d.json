{"cell_type":{"29486df8":"code","b564454f":"code","95e4fad2":"code","be240a0b":"code","11ccaf80":"code","784e948f":"code","5ed0e396":"code","d0bc2080":"code","4a044487":"code","26493fff":"code","b00a9f97":"code","7023cb78":"code","86389290":"code","ad4fce77":"code","d904dcf6":"code","03658584":"code","a95b0a2b":"code","7995e2cd":"code","94408c84":"code","653b42d0":"code","76f8a2dc":"code","18a48733":"code","46aa5d6e":"code","9f194e7f":"code","2155fc6a":"code","5c7f4a0e":"code","fc23ddb4":"code","d112d917":"markdown","600ffa6a":"markdown","e8bc3510":"markdown","2bd3ed86":"markdown","271afdd8":"markdown","1b2c3f80":"markdown","d4ecfe8a":"markdown","a3301a69":"markdown","42f7d469":"markdown","34b4524d":"markdown","1266d93a":"markdown","dfa05d03":"markdown","c292588b":"markdown"},"source":{"29486df8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n#plt.style.available\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b564454f":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","95e4fad2":"train_df.columns","be240a0b":"train_df.head()","11ccaf80":"train_df.describe()","784e948f":"train_df.info()","5ed0e396":"def plot_bar_graph(variable):\n    \"\"\"\n    input: variable ex: \"Sex\" \n    output: bar plot & value count\n    \n    \"\"\"\n    #get feature\n    var= train_df[variable]\n    \n    # count number of categorical variable\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable, varValue))","d0bc2080":"category1 = [\"Survived\",\"Sex\", \"Pclass\",\"Embarked\", \"SibSp\", \"Parch\"]\nfor i in category1:\n    plot_bar_graph(i)","4a044487":"category2 = [\"Cabin\", \"Name\" , \"Ticket\"]\nfor i in category2:\n    print(\"{} \\n\".format(train_df[i].value_counts()))\n    ","26493fff":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins= 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} Distribution with Histogram Graph\".format(variable))\n    plt.show()","b00a9f97":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor i in numericVar:\n    plot_hist(i)","7023cb78":"# Pclass vs Survived\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","86389290":"# Sex vs Survived\ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","ad4fce77":"# SibSp vs Survived\ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","d904dcf6":"# Parch vs Survived\ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","03658584":"# Cabin vs Survived\ntrain_df[[\"Cabin\", \"Survived\"]].groupby([\"Cabin\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","a95b0a2b":"def detect_outliers(df, features):\n    outlier_indices = []\n    \n    for i in features:\n        # 1st quartile\n        Q1 = np.percentile(df[i], 25)\n        \n        # 3rd quartile\n        Q3 = np.percentile(df[i], 75)\n        \n        #IQR\n        IQR = Q3 - Q1\n        \n        #Outlier Step\n        outlier_step = IQR * 1.5\n        \n        #Detect outlier and their indices\n        outlier_list_col = df[(df[i] < Q1 - outlier_step) | (df[i] > Q3 + outlier_step)].index\n        \n        # Store indices\n        outlier_indices.extend(outlier_list_col)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v>2)\n    return multiple_outliers","7995e2cd":"train_df.loc[detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","94408c84":"#drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"]),axis = 0).reset_index(drop = True)","653b42d0":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop = True)","76f8a2dc":"train_df.head()","18a48733":"train_df.isnull().sum()","46aa5d6e":"train_df[train_df[\"Embarked\"].isnull()]","9f194e7f":"train_df.boxplot(column= \"Fare\", by = \"Embarked\")\nplt.show()","2155fc6a":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","5c7f4a0e":"train_df[train_df[\"Fare\"].isnull()]","fc23ddb4":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","d112d917":"<a id = \"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","600ffa6a":"<a id = \"2\"><\/a><br>\n# Variable Describtion\n1. PassengerId = Unique id number\n2. Survived = 0 if passenger died, 1 if passenger survived \/\/ 2 type\n3. Pclass = Passenger class\n4. Name = Name of passenger\n5. Sex = Gender of passenger\n6. Age = Age of passenger\n7. SibSp = Number of siblings and spouses\n8. Parch = Number of parents and children\n9. Ticket =  Ticket number\n10. Fare = Amount of money to buy the ticket\n11. Cabin = Cabin category\n12. Embarked = port where passenger embarked. \n    C is Cherbourg, Q is Queenstown, S is Southampton\n","e8bc3510":"<a id = \"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing values\n* Fare has only 1 missing value","2bd3ed86":"* float64 = Fare and Age (2)\n* int64 = Pclass, SibSp, Parch, PassengerId and Survived (5)\n* object = Cabin, Embarked, Name, Sex, Ticker (5)","271afdd8":"<a id = \"9\"><\/a><br>\n## Find Missing Value","1b2c3f80":"<a id = \"5\"><\/a><br>\n## Numerical Variable","d4ecfe8a":"<a id = \"7\"><\/a><br>\n# Outlier Detection","a3301a69":"# Introduction\nAs we already know, Titanic's sinking is one of the most notorious shipwrecks in history. In 1912, the Titanic sank after colliding with an iceberg. There were 2224 passengers. 1502 of them died.\n\n<font color = 'red'>\n    \nContent:\n1. [Load and Check Dataset](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n    ","42f7d469":"<a id = \"1\"><\/a><br>\n# Load and check dataset","34b4524d":"train_df.columns[train_df.isnull().any()]","1266d93a":"<a id = \"4\"><\/a><br>\n## Categorical Variable","dfa05d03":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n* Cabin - Survived","c292588b":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp and Parch\n* Numerical Variable: Fare, Age and PassengerId\n"}}