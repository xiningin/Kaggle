{"cell_type":{"f31a817e":"code","4eb70481":"code","168fe02e":"code","56f1b902":"code","f6409f36":"code","2b4177e1":"code","357c8744":"code","5e39fb42":"code","745b9a5b":"code","22432e39":"code","2df166c4":"code","f204dcdf":"code","18e09ba4":"code","1653cc02":"code","218046d9":"code","123bbf5e":"code","ccd94725":"code","a34f7692":"code","04f2858b":"code","e0dcf7b2":"code","d79597b5":"code","38575d9b":"code","c875a2b8":"code","57da359e":"code","2df5babd":"code","2a9c0960":"code","9bacc01a":"code","eb0675b3":"code","1b2feb82":"code","2e24c9e6":"code","cf965719":"markdown","62c5e447":"markdown","dd237de4":"markdown","5614adac":"markdown","111445a3":"markdown","989d43d6":"markdown","7c83d4b7":"markdown","334eecae":"markdown","bedc7478":"markdown","621153b9":"markdown","6804c3a5":"markdown","6757f88d":"markdown","5b4f0177":"markdown","eb010e90":"markdown","c2566d31":"markdown","90f0e6fa":"markdown","b50a29b1":"markdown","e07f538c":"markdown","769cb3e5":"markdown","41fe7721":"markdown","18ed0401":"markdown","6a10ffac":"markdown","4f4930d0":"markdown"},"source":{"f31a817e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nfrom matplotlib import colors\n\nimport cv2\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","4eb70481":"img_path='..\/input\/train'\nwhale_image_list=os.listdir(img_path)\nwhale_image_list[10:21]","168fe02e":"flags = [i for i in dir(cv2) if i.startswith('COLOR_')]","56f1b902":"len(flags)","f6409f36":"flags[30:40]","2b4177e1":"whale = cv2.imread(img_path+'\/'+whale_image_list[30])\nplt.imshow(whale)\nplt.show()","357c8744":"whale_rgb = cv2.cvtColor(whale, cv2.COLOR_BGR2RGB)\nplt.imshow(whale_rgb)\nplt.show()","5e39fb42":"whale_gray = cv2.cvtColor(whale, cv2.COLOR_BGR2GRAY)\nplt.imshow(whale_gray)\nplt.show()","745b9a5b":"whale_hsv = cv2.cvtColor(whale, cv2.COLOR_BGR2HSV)\nplt.imshow(whale_hsv)\nplt.show()","22432e39":"red = whale_rgb.copy()\n# set blue and green channels to 0\nred[:, :, 1] = 0\nred[:, :, 2] = 0\n# RGB - Red\nplt.imshow(red)\nplt.show()","2df166c4":"green = whale_rgb.copy()\n# set blue and red channels to 0\ngreen[:, :, 0] = 0\ngreen[:, :, 2] = 0\n# RGB - Green\nplt.imshow(green)\nplt.show()\n","f204dcdf":"blue = whale_rgb.copy()\n# set green and red channels to 0\nblue[:, :, 0] = 0\nblue[:, :, 1] = 0\n# RGB - Blue\nplt.imshow(blue)\nplt.show()","18e09ba4":"r, g, b = cv2.split(whale_rgb)\nfig = plt.figure()\naxis = fig.add_subplot(1, 1, 1, projection=\"3d\")\npixel_colors = whale_rgb.reshape((np.shape(whale_rgb)[0]*np.shape(whale_rgb)[1], 3))\nnorm = colors.Normalize(vmin=-1.,vmax=1.)\nnorm.autoscale(pixel_colors)\npixel_colors = norm(pixel_colors).tolist()\naxis.scatter(r.flatten(), g.flatten(), b.flatten(), facecolors=pixel_colors, marker=\".\")\naxis.set_xlabel(\"Red\")\naxis.set_ylabel(\"Green\")\naxis.set_zlabel(\"Blue\")\nplt.show()","1653cc02":"# whale_hsv = cv2.cvtColor(whale_rgb, cv2.COLOR_RGB2HSV)","218046d9":"h, s, v = cv2.split(whale_hsv)\nfig = plt.figure()\naxis = fig.add_subplot(1, 1, 1, projection=\"3d\")\n\naxis.scatter(h.flatten(), s.flatten(), v.flatten(), facecolors=pixel_colors, marker=\".\")\naxis.set_xlabel(\"Hue\")\naxis.set_ylabel(\"Saturation\")\naxis.set_zlabel(\"Value\")\nplt.show()","123bbf5e":"# define range of blue color in HSV\nlower_blue = np.array([110,50,50])\nupper_blue = np.array([130,255,255])","ccd94725":"from matplotlib.colors import hsv_to_rgb\nlo_square = np.full((10, 10, 3), lower_blue, dtype=np.uint8) \/ 255.0\ndo_square = np.full((10, 10, 3), upper_blue, dtype=np.uint8) \/ 255.0","a34f7692":"plt.subplot(1, 2, 1)\nplt.imshow(hsv_to_rgb(do_square))\nplt.subplot(1, 2, 2)\nplt.imshow(hsv_to_rgb(lo_square))\nplt.show()","04f2858b":"mask = cv2.inRange(whale_hsv, lower_blue, upper_blue)","e0dcf7b2":"result = cv2.bitwise_and(whale_rgb, whale_rgb, mask=mask)","d79597b5":"plt.figure(figsize=(15,20))\nplt.subplot(1, 2, 1)\nplt.imshow(mask, cmap=\"gray\")\nplt.subplot(1, 2, 2)\nplt.imshow(result)\nplt.show()","38575d9b":"light_white = (0, 0, 200)\ndark_white = (145, 60, 255)","c875a2b8":"lw_square = np.full((10, 10, 3), light_white, dtype=np.uint8) \/ 255.0\ndw_square = np.full((10, 10, 3), dark_white, dtype=np.uint8) \/ 255.0\n\nplt.subplot(1, 2, 1)\nplt.imshow(hsv_to_rgb(lw_square))\nplt.subplot(1, 2, 2)\nplt.imshow(hsv_to_rgb(dw_square))\nplt.show()","57da359e":"mask_white = cv2.inRange(whale_hsv, light_white, dark_white)\nresult_white = cv2.bitwise_and(whale_hsv, whale_hsv, mask=mask_white)\nplt.figure(figsize=(15,20))\nplt.subplot(1, 2, 1)\nplt.imshow(mask_white, cmap=\"gray\")\nplt.subplot(1, 2, 2)\nplt.imshow(result_white)\nplt.show()","2df5babd":"final_mask = mask + mask_white\n\nfinal_result = cv2.bitwise_and(whale_rgb, whale_rgb, mask=final_mask)\nplt.figure(figsize=(15,20))\nplt.subplot(1, 2, 1)\nplt.imshow(final_mask, cmap=\"gray\")\nplt.subplot(1, 2, 2)\nplt.imshow(final_result)\nplt.show()","2a9c0960":"blur = cv2.GaussianBlur(final_result, (7, 7), 0)\nplt.imshow(blur)\nplt.show()","9bacc01a":"whales_friends = []\nfor whale in whale_image_list[:10]:\n   friend = cv2.cvtColor(cv2.imread(img_path +'\/'+ whale), cv2.COLOR_BGR2RGB)\n   whales_friends.append(friend)","eb0675b3":"def segment_whale(image):\n    ''' Attempts to segment the whale out of the provided image '''\n\n    # Convert the image into HSV\n    hsv_image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)\n\n    # Set the blue range\n    lower_blue = np.array([110,50,50])\n    upper_blue = np.array([130,255,255])\n\n    # Apply the blue mask \n    mask = cv2.inRange(hsv_image, lower_blue, upper_blue)\n\n    # Set a white range\n    light_white = (0, 0, 200)\n    dark_white = (145, 60, 255)\n\n    # Apply the white mask\n    mask_white = cv2.inRange(hsv_image, light_white, dark_white)\n\n    # Combine the two masks\n    final_mask = mask + mask_white\n    result = cv2.bitwise_and(image, image, mask=final_mask)\n\n    # Clean up the segmentation using a blur\n    blur = cv2.GaussianBlur(result, (7, 7), 0)\n    return blur","1b2feb82":"results = [segment_whale(whale) for whale in whales_friends]","2e24c9e6":"\nfor i in range(10):\n    plt.figure(figsize=(15,20))\n    plt.subplot(1, 2, 1)\n    plt.imshow(whales_friends[i])\n    plt.subplot(1, 2, 2)\n    plt.imshow(results[i])\n    plt.show()","cf965719":"Once you get a decent color range, you can use cv2.inRange() to try to threshold Whale. inRange() takes three parameters: the image, the lower range, and the higher range. It returns a binary mask (an ndarray of 1s and 0s) the size of the image where values of 1 indicate values within the range, and zero values indicate values outside:","62c5e447":"**Convert from BGR to RGB color-space**","dd237de4":"**G channel**","5614adac":"### Visualizing Whale in HSV Color Space\n\nHSV stands for Hue, Saturation, and Value (or brightness), and is a cylindrical color space. The colors, or hues, are modeled as an angular dimension rotating around a central, vertical axis, which represents the value channel. Values go from dark (0 at the bottom) to light at the top. The third axis, saturation, defines the shades of hue from least saturated, at the vertical axis, to most saturated furthest away from the center:","111445a3":"# Table of Contents\n* What Are Color Spaces?\n* Simple Segmentation Using Color Spaces\n  * Color Spaces and Reading Images in OpenCV\n  * Visualizing Whale in RGB Color Space\n  * Visualizing Whale in HSV Color Space\n  * Picking Out a Range","989d43d6":"In HSV space, blue\u2019s oranges are much more localized and visually separable. The saturation and value of the blue do vary, but they are mostly located within a small range along the hue axis. This is the key point that can be leveraged for segmentation.","7c83d4b7":"**R channel**","334eecae":" In fact,**OpenCV** by default reads images in **BGR** format. You can use the function `cv2.cvtColor(input_image, flag)` ( where flag determines the type of conversion) to change color-space.","bedc7478":"**B channel**","621153b9":"## Simple Segmentation Using Color Spaces\n### Color Spaces and Reading Images in OpenCV","6804c3a5":"### Segmentation Generalize to Whale\u2019s Relatives","6757f88d":"## What Are Color Spaces?\n\nIn the most common color space, **RGB** (Red Green Blue), colors are represented in terms of their red, green, and blue components. In more technical terms, **RGB** describes a color as a tuple of three components. Each component can take a value between 0 and 255, where the tuple (0, 0, 0) represents black and (255, 255, 255) represents white.\n\nRGB is considered an \u201cadditive\u201d color space, and colors can be imagined as being produced from shining quantities of red, blue, and green light onto a black background.\n\nHere are a few more examples of colors in RGB:\n<hr>\n    **Color \tRGB value**\n    <hr>\n    Red \t255, 0, 0\n    <hr>\n    Orange \t255, 128, 0\n    <hr>\n    Blue     0,0,255\n    <hr>\n\nRGB is one of the five major color space models, each of which has many offshoots. There are so many color spaces because different color spaces are useful for different purposes.\n\nIn the printing world, **CMYK** is useful because it describes the color combinations required to produce a color from a white background. While the 0 tuple in RGB is black, in CMYK the 0 tuple is white. Our printers contain ink canisters of cyan, magenta, yellow, and black.\n\n**HSV** and **HSL** are descriptions of hue, saturation, and brightness\/luminance, which are particularly useful for identifying contrast in images. These color spaces are frequently used in color selection tools in software and for web design.\n\nIn reality, color is a continuous phenomenon, meaning that there are an infinite number of colors. Color spaces, however, represent color through discrete structures (a fixed number of whole number integer values), which is acceptable since the human eye and perception are also limited. Color spaces are fully able to represent all the colors we are able to distinguish between.","5b4f0177":"### Picking Out a Range\n\nLet\u2019s threshold whale just based on a simple range of blues.","eb010e90":"**Load an Image**","c2566d31":"Look at all the color space conversions OpenCV provides","90f0e6fa":"### Changing Color-space ","b50a29b1":"A Gaussian blur is an image filter that uses a kind of function called a Gaussian to transform each pixel in the image. It has the result of smoothing out image noise and reducing detail.","e07f538c":"### Separate the channels of an RGB image ","769cb3e5":"**Convert from BGR to GRAY color-space**","41fe7721":"**Convert from BGR to HSV color-space**","18ed0401":"Not bad! Now you can combine the masks. Adding the two masks together results in 1 values wherever there is blue or white,","6a10ffac":"### Visualizing Whale in RGB Color Space\n\n**HSV** is a good choice of color space for segmenting by color, but to see why, let\u2019s compare the image in both RGB and HSV color spaces by visualizing the color distribution of its pixels. A 3D plot shows this quite nicely, with each axis representing one of the channels in the color space.","4f4930d0":"A simple way to display the colors in Python is to make small square images of the desired color and plot them in Matplotlib."}}