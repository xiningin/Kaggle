{"cell_type":{"7e13ac70":"code","048b4166":"code","a8c689b6":"code","b8ca542d":"code","4bd9c4a6":"code","754cf3b0":"code","c5ae4e5a":"code","7f3efbb7":"code","bcadc7c6":"code","1bfc20e7":"code","02e1796d":"code","d0c45ecd":"code","68cea24a":"code","6d64c60f":"code","2bb2685c":"code","0d28faad":"code","93bc6509":"code","31f25b22":"markdown","4d7432ad":"markdown","d609d4bd":"markdown","6ebb56de":"markdown","33dbf315":"markdown","a0db294c":"markdown","c875ff7f":"markdown","1b1fed11":"markdown","9fe3b265":"markdown","2e23b311":"markdown","c9cd0d3c":"markdown","94b97030":"markdown","2d9912d2":"markdown","0b2a963d":"markdown","cee78d2a":"markdown","55dd1437":"markdown","c2c5e601":"markdown","ef654f37":"markdown","e766762d":"markdown","d23bc748":"markdown"},"source":{"7e13ac70":"## Function to reduce the DF size\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","048b4166":"import pandas as pd \nimport numpy as np\nfrom sklearn.model_selection import KFold\nimport matplotlib.pyplot as plt\nimport os\nimport gc\n\ndirectory = '\/kaggle\/input\/ashrae-energy-prediction'\nos.listdir(directory)\ndf_train = pd.read_csv(directory+'\/train.csv')\ndf_train  = reduce_mem_usage(df_train)\ndf_train[\"timestamp\"] = pd.to_datetime(df_train[\"timestamp\"])","a8c689b6":"folds = [4, 2, 12]\nfor folds in folds:\n    fold = KFold(n_splits=folds, shuffle=False, random_state=42)\n    print('-'*50)\n    print(folds,'-fold')\n    for fold_, (trn_idx, val_idx)  in enumerate(fold.split(df_train, df_train['meter_reading'])):\n        tr_x, tr_y = df_train.iloc[trn_idx], df_train['meter_reading'][trn_idx]\n        vl_x, vl_y = df_train.iloc[val_idx], df_train['meter_reading'][val_idx]\n        print('fold :', fold_)\n        print('val_set_range : ',vl_x['timestamp'].min(), vl_x['timestamp'].max())    \ndel tr_x, tr_y, vl_x, vl_y","b8ca542d":"# Reference - https:\/\/www.kaggle.com\/nroman\/eda-for-ashrae\nfig, axes = plt.subplots(1, 1, figsize=(14, 6), dpi=100)\ndf_train[['timestamp', 'meter_reading']].set_index('timestamp').resample('M').mean()['meter_reading'].plot(ax=axes, label='By month', alpha=1).set_ylabel('Meter reading', fontsize=14);\ndf_train[['timestamp', 'meter_reading']].set_index('timestamp').resample('H').mean()['meter_reading'].plot(ax=axes, label='By hour', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\ndf_train[['timestamp', 'meter_reading']].set_index('timestamp').resample('D').mean()['meter_reading'].plot(ax=axes, label='By day', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\naxes.set_title('Mean Meter reading by hour and day, month', fontsize=16);\naxes.legend();","4bd9c4a6":"df_train['meter'] = df_train['meter'].map({0: 'electricity', 1: 'chilledwater', 2: 'steam', 3: 'hotwater'})\ncol = ['electricity', 'chilledwater', 'steam', 'hotwater']\nfig, axes = plt.subplots(4, 1, figsize=(14, 30), dpi=100)\nfor i, col in enumerate(col):\n    train = df_train[df_train['meter']==col].copy()\n    train[['timestamp', 'meter_reading']].set_index('timestamp').resample('M').mean()['meter_reading'].plot(ax=axes[i], label='By month', alpha=1).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'meter_reading']].set_index('timestamp').resample('H').mean()['meter_reading'].plot(ax=axes[i], label='By hour', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'meter_reading']].set_index('timestamp').resample('D').mean()['meter_reading'].plot(ax=axes[i], label='By day', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    axes[i].set_title(col +' Mean Meter reading by hour and day, month', fontsize=16);\n    axes[i].legend();","754cf3b0":"del df_train\ndel train\n\ndf_test = pd.read_csv(directory+'\/test.csv')\ndf_test = df_test['meter']\n\ngc.collect()\n\nfold2 = pd.read_csv('\/kaggle\/input\/2fold\/submission.csv')\nfold2  = reduce_mem_usage(fold2)\nfold2[\"timestamp\"] = pd.to_datetime(fold2[\"timestamp\"])\nfold2 = pd.concat([fold2,df_test],axis=1)\nfold2['meter'] = fold2['meter'].map({0: 'electricity', 1: 'chilledwater', 2: 'steam', 3: 'hotwater'})\nfold2.head()\ngc.collect()","c5ae4e5a":"column = ['fold0_meter_reading', 'fold1_meter_reading','fold_mean_meter_reading']\nfig, axes = plt.subplots(3, 1, figsize=(14, 18), dpi=100)\nfor i, col in enumerate(column):\n    fold2[['timestamp', col]].set_index('timestamp').resample('M').mean()[col].plot(ax=axes[i], label='By month', alpha=1).set_ylabel('Meter reading', fontsize=14);\n    fold2[['timestamp', col]].set_index('timestamp').resample('H').mean()[col].plot(ax=axes[i], label='By hour', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    fold2[['timestamp', col]].set_index('timestamp').resample('D').mean()[col].plot(ax=axes[i], label='By day', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    axes[i].set_title(col + 'by hour and day, month', fontsize=16);\n    axes[i].legend();","7f3efbb7":"column = ['electricity', 'chilledwater', 'steam', 'hotwater']\nfig, axes = plt.subplots(2, 2, figsize=(20, 12), dpi=100)\nfor i, col in enumerate(column):\n    train = fold2[fold2['meter']==col].copy()\n    train[['timestamp', 'fold0_meter_reading']].set_index('timestamp').resample('M').mean()['fold0_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By month', alpha=1).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'fold0_meter_reading']].set_index('timestamp').resample('H').mean()['fold0_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By hour', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'fold0_meter_reading']].set_index('timestamp').resample('D').mean()['fold0_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By day', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    axes[i%2][i\/\/2].set_title(col + 'by hour and day, month', fontsize=16);\n    axes[i%2][i\/\/2].legend();","bcadc7c6":"fig, axes = plt.subplots(2, 2, figsize=(20, 12), dpi=100)\nfor i, col in enumerate(column):\n    train = fold2[fold2['meter']==col].copy()\n    train[['timestamp', 'fold1_meter_reading']].set_index('timestamp').resample('M').mean()['fold1_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By month', alpha=1).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'fold1_meter_reading']].set_index('timestamp').resample('H').mean()['fold1_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By hour', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'fold1_meter_reading']].set_index('timestamp').resample('D').mean()['fold1_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By day', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    axes[i%2][i\/\/2].set_title(col + 'by hour and day, month', fontsize=16);\n    axes[i%2][i\/\/2].legend();","1bfc20e7":"fig, axes = plt.subplots(2, 2, figsize=(20, 12), dpi=100)\nfor i, col in enumerate(column):\n    train = fold2[fold2['meter']==col].copy()\n    train[['timestamp', 'fold_mean_meter_reading']].set_index('timestamp').resample('M').mean()['fold_mean_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By month', alpha=1).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'fold_mean_meter_reading']].set_index('timestamp').resample('H').mean()['fold_mean_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By hour', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'fold_mean_meter_reading']].set_index('timestamp').resample('D').mean()['fold_mean_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By day', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    axes[i%2][i\/\/2].set_title(col + 'by hour and day, month', fontsize=16);\n    axes[i%2][i\/\/2].legend();","02e1796d":"del fold2\ndel train\ngc.collect()\n\nfold4 = pd.read_csv('\/kaggle\/input\/4fold\/submission.csv')\nfold4  = reduce_mem_usage(fold4)\nfold4[\"timestamp\"] = pd.to_datetime(fold4[\"timestamp\"])\nfold4.head()","d0c45ecd":"column = ['fold0_meter_reading', 'fold1_meter_reading','fold2_meter_reading', 'fold3_meter_reading','fold_mean_meter_reading']\nfig, axes = plt.subplots(5, 1, figsize=(14, 30), dpi=100)\nfor i, col in enumerate(column):\n    fold4[['timestamp', col]].set_index('timestamp').resample('M').mean()[col].plot(ax=axes[i], label='By month', alpha=1).set_ylabel('Meter reading', fontsize=14);\n    fold4[['timestamp', col]].set_index('timestamp').resample('H').mean()[col].plot(ax=axes[i], label='By hour', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    fold4[['timestamp', col]].set_index('timestamp').resample('D').mean()[col].plot(ax=axes[i], label='By day', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    axes[i].set_title(col + 'by hour and day, month', fontsize=16);\n    axes[i].legend();\ngc.collect()","68cea24a":"fold4 = pd.concat([fold4,df_test],axis=1)\nfold4['meter'] = fold4['meter'].map({0: 'electricity', 1: 'chilledwater', 2: 'steam', 3: 'hotwater'})\ncolumn = ['electricity', 'chilledwater', 'steam', 'hotwater']\nfig, axes = plt.subplots(2, 2, figsize=(20, 12), dpi=100)\nfor i, col in enumerate(column):\n    train = fold4[fold4['meter']==col].copy()\n    train[['timestamp', 'fold0_meter_reading']].set_index('timestamp').resample('M').mean()['fold0_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By month', alpha=1).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'fold0_meter_reading']].set_index('timestamp').resample('H').mean()['fold0_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By hour', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'fold0_meter_reading']].set_index('timestamp').resample('D').mean()['fold0_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By day', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    axes[i%2][i\/\/2].set_title(col + 'by hour and day, month', fontsize=16);\n    axes[i%2][i\/\/2].legend();","6d64c60f":"fig, axes = plt.subplots(2, 2, figsize=(20, 12), dpi=100)\nfor i, col in enumerate(column):\n    train = fold4[fold4['meter']==col].copy()\n    train[['timestamp', 'fold1_meter_reading']].set_index('timestamp').resample('M').mean()['fold1_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By month', alpha=1).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'fold1_meter_reading']].set_index('timestamp').resample('H').mean()['fold1_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By hour', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'fold1_meter_reading']].set_index('timestamp').resample('D').mean()['fold1_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By day', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    axes[i%2][i\/\/2].set_title(col + 'by hour and day, month', fontsize=16);\n    axes[i%2][i\/\/2].legend();","2bb2685c":"fig, axes = plt.subplots(2, 2, figsize=(20, 12), dpi=100)\nfor i, col in enumerate(column):\n    train = fold4[fold4['meter']==col].copy()\n    train[['timestamp', 'fold2_meter_reading']].set_index('timestamp').resample('M').mean()['fold2_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By month', alpha=1).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'fold2_meter_reading']].set_index('timestamp').resample('H').mean()['fold2_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By hour', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'fold2_meter_reading']].set_index('timestamp').resample('D').mean()['fold2_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By day', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    axes[i%2][i\/\/2].set_title(col + 'by hour and day, month', fontsize=16);\n    axes[i%2][i\/\/2].legend();","0d28faad":"fig, axes = plt.subplots(2, 2, figsize=(20, 12), dpi=100)\nfor i, col in enumerate(column):\n    train = fold4[fold4['meter']==col].copy()\n    train[['timestamp', 'fold3_meter_reading']].set_index('timestamp').resample('M').mean()['fold3_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By month', alpha=1).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'fold3_meter_reading']].set_index('timestamp').resample('H').mean()['fold3_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By hour', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'fold3_meter_reading']].set_index('timestamp').resample('D').mean()['fold3_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By day', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    axes[i%2][i\/\/2].set_title(col + 'by hour and day, month', fontsize=16);\n    axes[i%2][i\/\/2].legend();","93bc6509":"fig, axes = plt.subplots(2, 2, figsize=(20, 12), dpi=100)\nfor i, col in enumerate(column):\n    train = fold4[fold4['meter']==col].copy()\n    train[['timestamp', 'fold_mean_meter_reading']].set_index('timestamp').resample('M').mean()['fold_mean_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By month', alpha=1).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'fold_mean_meter_reading']].set_index('timestamp').resample('H').mean()['fold_mean_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By hour', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    train[['timestamp', 'fold_mean_meter_reading']].set_index('timestamp').resample('D').mean()['fold_mean_meter_reading'].plot(ax=axes[i%2][i\/\/2], label='By day', alpha=0.7).set_ylabel('Meter reading', fontsize=14);\n    axes[i%2][i\/\/2].set_title(col + 'by hour and day, month', fontsize=16);\n    axes[i%2][i\/\/2].legend();","31f25b22":"# Try\n- [4-kfold by site ID](https:\/\/www.kaggle.com\/kimtaegwan\/lgbm-baseline-what-s-your-cv-method?scriptVersionId=22377656) Public LB : 2.50\n- [GROUP(Month) K-Fold](https:\/\/www.kaggle.com\/kimtaegwan\/what-s-your-cv-method?scriptVersionId=22905017) Public LB :1.10\n- train_test_spilt \n      test_size:0.5(Public LB :1.23)\n      test_size:0.1(Public LB :1.22)","4d7432ad":"# thinking\nat the above picture January to March is a moderate MMR(Mean Meter Reading) but a very high MMR from March to July, then July to Desember shows almost zero, although it is increasing at November\n\n- 2-Fold recorded the highest public lb(1.11); fold0 train until June before MMR falls, and fold1 train after that, then averages two results I don't know exactly, but I think this training affected model performance\n\n- i'll test 2-fold at a reduced timestamp.\n\n- Depending on the variable, the method of cross-validation can also be affected.\n\n- Predictive Mean meter reading is too low for training Mean meter reading because The mean meter reading by meter type has a large difference in value. Therefore, I think that if you perform proper k-fold verification by meter, you will get a good score.","d609d4bd":"## Mean Meter reading by meter","6ebb56de":"# OOF_RMSE AND Public LB\nThe more the fold number increases, the lower the oof_rmse and the more public lb increases.\n- [2-fold](https:\/\/www.kaggle.com\/kimtaegwan\/lgbm-baseline-what-s-your-cv-method?scriptVersionId=22526687)   \noof_rmse : 1.42 Public LB : 1.11\n- [3-fold](https:\/\/www.kaggle.com\/kimtaegwan\/lgbm-baseline-what-s-your-cv-method?scriptVersionId=22513136)   \noof_rmse : 1.35 Public LB : 1.12\n- [4-fold](https:\/\/www.kaggle.com\/kimtaegwan\/lgbm-baseline-what-s-your-cv-method?scriptVersionId=22340799)   \noof_rmse : 1.27 Public LB : 1.16\n- [5-fold](https:\/\/www.kaggle.com\/kimtaegwan\/lgbm-baseline-what-s-your-cv-method?scriptVersionId=22371767)   \noof_rmse : 1.23 Public LB : 1.17\n- [6-fold](https:\/\/www.kaggle.com\/kimtaegwan\/lgbm-baseline-what-s-your-cv-method?scriptVersionId=22371793)   \noof_rmse : 1.20 Public LB : 1.18\n- [12-fold](https:\/\/www.kaggle.com\/kimtaegwan\/lgbm-baseline-what-s-your-cv-method?scriptVersionId=22371727)   \noof_rmse : 1.10 Public LB : 1.20","33dbf315":"# 2-fold predict plot","a0db294c":"## fold_mean_predict by meter","c875ff7f":"## fold_mean_predict by meter","1b1fed11":"## fold0_predict by meter","9fe3b265":"## fold2_predict by meter","2e23b311":"# Reference\n- https:\/\/www.kaggle.com\/nroman\/eda-for-ashrae\n- https:\/\/www.kaggle.com\/ryches\/simple-lgbm-solution\n- https:\/\/www.kaggle.com\/c\/ashrae-energy-prediction\/discussion\/113286#latest-654648\n","c9cd0d3c":"# 4-fold predict plot","94b97030":"# Why is this happening?\nBecause of simple k-fold, I think it will be learned and evaluated by roughly monthly.\n\n        Example(4-fold)\n        fold0 - January ~ March \n        fold1 - April ~ June \n        fold2 - July ~ September\n        fold3 - October ~ December","2d9912d2":"## fold3_predict by meter","0b2a963d":"# What's your CV method?\n- I observed the oof using k-fold, and found that the increase in the number of folds increases the oof_rmse, but the public LB decreases.\n\n- LGBM parmeter(For the fold-12, n_estimators= 1000 learning_rate=0.1 was used as a limited time)\n        n_estimators=6000,\n        learning_rate=0.05,\n        feature_fraction=0.7,\n        subsample=0.4,\n        num_leaves=40,\n        metric='rmse'\n\n\n\n- All variables are the same.","cee78d2a":"# k-fold val_set_range","55dd1437":"## fold1_predict by meter","c2c5e601":"## Mean Meter reading","ef654f37":"## fold0_predict by meter","e766762d":"## fold1_predict by meter","d23bc748":"\n# I'll try\nI'm going to try various cross-validations and upload them to the kernel. If you have idea, please mention it\n- additional variable\n- k-fold per site_ID, meter, Buiding_id\n- 2-fold at a reduced timestamp\n\n"}}