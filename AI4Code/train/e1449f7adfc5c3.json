{"cell_type":{"c37a17ce":"code","27288c9e":"code","ba522ce0":"code","ea35b32d":"code","cc356bc6":"code","ddc7a66d":"code","1c0e01a5":"code","105017e6":"code","de881f92":"code","3d80ebfe":"code","00038201":"code","fff177f9":"code","1d752ec4":"code","941d74a7":"code","eb9918ca":"code","bdd26c5b":"code","ec424af2":"code","0dd13596":"code","5927266f":"code","0c9cdfce":"code","5de15f52":"code","fb9be8ce":"code","42b2979b":"code","96eb7ad7":"code","dfe9eb41":"code","20254e08":"code","0a2f2b4a":"code","13ed2813":"code","d659ec95":"code","22c39b2b":"code","a7298df3":"code","1031e63f":"code","92dd8f4d":"code","909fd492":"code","f49cd5f2":"code","0b056b84":"code","63fb4542":"code","f0034141":"code","c8c37eab":"code","9546f5a8":"code","ec33fe9d":"code","8d824400":"code","09598e79":"code","aeb98bb8":"code","636b4bdf":"code","11adf3c2":"code","64b818a7":"code","3ecbb1ea":"code","5a0d5ece":"code","9858cdf0":"code","41dc77d7":"code","f9ab7793":"code","d083e123":"code","bf8b4dbb":"code","b94423cd":"code","cb7667dd":"code","14813f7b":"code","f1a0d96e":"code","d1fd2b57":"code","28999185":"code","7caf1709":"code","6ee94d47":"code","569fc2fc":"markdown","f89d1d2a":"markdown","29df0eb1":"markdown","d18f9faf":"markdown","5e6ee284":"markdown","fbc4f75c":"markdown","3b5f8f7e":"markdown","451ced8e":"markdown","6782da47":"markdown","28d42bfd":"markdown","2483afba":"markdown","38b2a8e5":"markdown","4a182f6e":"markdown","de55e376":"markdown","518c0bd6":"markdown","ff6c4a04":"markdown","c96af264":"markdown","2ffa501d":"markdown","e7471e67":"markdown","2c34adaa":"markdown","e43041c3":"markdown","ed8b4945":"markdown","ef69371f":"markdown"},"source":{"c37a17ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","27288c9e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as ff\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud,STOPWORDS\nfrom PIL import Image\nimport os\nprint(os.listdir(\"..\/input\"))\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\npd.set_option(\"max_rows\",None)","ba522ce0":"data = pd.read_csv(\"\/kaggle\/input\/videogamesales\/vgsales.csv\")\ndf = data.copy()","ea35b32d":"d=df.head(10)\ntable = ff.create_table(d)\nfor i in range(len(table.layout.annotations)):\n    table.layout.annotations[i].font.size = 9\niplot(table)","cc356bc6":"def check_dataframe(dataframe):\n    print(\"------------------------------------NaN Values------------------------------------\")\n    print(dataframe.isnull().sum())\n    print(\"------------------------------------Head------------------------------------\")\n    print(dataframe.head())\n    print(\"------------------------------------Tail------------------------------------\")\n    print(dataframe.tail())\n    print(\"------------------------------------Describe------------------------------------\")\n    print(dataframe.describe().T)\n    print(\"------------------------------------Info------------------------------------\")\n    print(dataframe.info())\n    print(\"------------------------------------Shape------------------------------------\")\n    print(dataframe.shape)","ddc7a66d":"check_dataframe(df)","1c0e01a5":"def cat_summary(dataframe, col_name):\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                        \"Ratio\": 100 * dataframe[col_name].value_counts() \/ len(dataframe)}))\n","105017e6":"cat_cols = [col for col in df.columns if df[col].dtypes == \"O\" and df[col].nunique() < 20]\ncat_cols","de881f92":"for col in cat_cols:\n    cat_summary(df, col)","3d80ebfe":"cat_summary(df, \"Publisher\")","00038201":"df[df[\"Publisher\"] == \"Unknown\"]","fff177f9":"def num_summary(dataframe, numerical_col, plot=False):\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[numerical_col].describe(quantiles).T)\n\n    if plot:\n        dataframe[numerical_col].hist(bins=20)\n        plt.xlabel(numerical_col)\n        plt.title(numerical_col)\n        plt.show()","1d752ec4":"num_cols = [col for col in df.columns if df[col].dtypes in [int, float]]\nnum_cols","941d74a7":"for col in num_cols:\n    num_summary(df, col)\n    print(\"*\" * 50)","eb9918ca":"df[df.isnull().any(axis=1)]","bdd26c5b":"df.isnull().sum()","ec424af2":"def missing_values_table(dataframe, na_name=False):\n    na_columns = [col for col in dataframe.columns if dataframe[col].isnull().sum() > 0]\n    n_miss = dataframe[na_columns].isnull().sum().sort_values(ascending=False)\n    ratio = (dataframe[na_columns].isnull().sum() \/ dataframe.shape[0] * 100).sort_values(ascending=False)\n    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=['n_miss', 'ratio'])\n    print(missing_df, end=\"\\n\")\n    if na_name:\n        return na_columns","0dd13596":"missing_values_table(df, True)","5927266f":"print(f\"Min Year: {df.Year.min()}\")\nprint(f\"Max Year: {df.Year.max()}\")","0c9cdfce":"msno.heatmap(df);","5de15f52":"df[\"Year\"] = df[\"Year\"].fillna(df[\"Year\"].median())","fb9be8ce":"df[\"Year\"] = df[\"Year\"].astype(int)","42b2979b":"df.Year.isnull().sum()","96eb7ad7":"df.isnull().sum()","dfe9eb41":"df[\"Publisher\"].fillna(\"Unknown\", inplace=True)","20254e08":"df.isnull().sum()","0a2f2b4a":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    return cat_cols, num_cols, cat_but_car","13ed2813":"cat_cols, num_cols, cat_but_car = grab_col_names(df)","d659ec95":"print(f\"Categorical: {cat_cols}\")\nprint(f\"Numerical: {num_cols}\")\nprint(f\"Categorical but Cardinal: {cat_but_car}\")","22c39b2b":"# Genre\ndf[\"Genre\"].value_counts()","a7298df3":"df[\"Total_Sales\"] = df.NA_Sales + df.JP_Sales + df.EU_Sales + df.Other_Sales + df.Global_Sales","1031e63f":"df.head()","92dd8f4d":"df.groupby([\"Genre\"]).agg({\"Total_Sales\": \"mean\"}).sort_values(by=\"Total_Sales\" ,ascending=False).reset_index()","909fd492":"years = [\"1980_1990\", \"1990_2000\", \"2000_2010\", \"2010_2020\"]\ndf[\"Years_CAT\"] = pd.cut(df.Year, labels=years, bins=4)","f49cd5f2":"df[\"Years_CAT\"].value_counts()","0b056b84":"df.groupby([\"Genre\", \"Years_CAT\"]).agg({\"Total_Sales\": \"mean\"}).sort_values(by=\"Total_Sales\", ascending=False).reset_index().head(10)","63fb4542":"trace1 = go.Scatter(\n                    x = df.Years_CAT,\n                    y = df.Total_Sales,\n                    mode = \"markers\",\n                    name = \"Years - Sales\",\n                    marker = dict(color = 'rgba(28, 149, 249, 0.8)',size=8),\n                    text= df.Name)\n\ndata = [trace1]\nlayout = dict(title = 'Total Sales in Years',\n              xaxis= dict(title= 'Years',ticklen= 5,zeroline= False,zerolinewidth=1,gridcolor=\"white\"),\n              yaxis= dict(title= 'Sales(In Millions)',ticklen= 5,zeroline= False,zerolinewidth=1,gridcolor=\"white\",),\n              paper_bgcolor='rgb(243, 243, 243)',\n              plot_bgcolor='rgb(243, 243, 243)' )\nfig = dict(data = data, layout = layout)\niplot(fig)","f0034141":"fig={\n    \"data\" : [\n    {\n        'x': df.Total_Sales,\n        'y': df.Year,\n        'mode': 'markers',\n        'marker': {\n            \"color\":df.Total_Sales,\n            'size': df.Total_Sales,\n            'showscale': True,\n            \"colorscale\":'Blackbody'\n        },\n        \"text\" :  \"Name:\"+ df.Name +\",\"+\" Publisher:\" + df.Publisher\n        \n    },\n],\n\"layout\":\n    {\n    \"title\":\"Release Years of Top 100 Video Games According to Global Sales\",\n    \"xaxis\":{\n        \"title\":\"Rank\",\n        \"gridcolor\":'rgb(255, 255, 255)',\n        \"zerolinewidth\":1,\n        \"ticklen\":5,\n        \"gridwidth\":2,\n    },\n    \"yaxis\":{\n        \"title\":'Years',\n        \"gridcolor\":'rgb(255, 255, 255)',\n        \"zerolinewidth\":1,\n        \"ticklen\":5,\n        \"gridwidth\":2,\n    },\n    \n    \"paper_bgcolor\":'rgb(243, 243, 243)',\n    \"plot_bgcolor\":'rgb(243, 243, 243)'\n    }}\n\niplot(fig)","c8c37eab":"df.groupby([\"Genre\", \"Name\"]).agg({\"Total_Sales\": \"mean\"}).sort_values(by=\"Total_Sales\", ascending=False).head(10)","9546f5a8":"df[\"Genre\"].value_counts()","ec33fe9d":"df[df[\"Genre\"] == \"Platform\"].describe().T","8d824400":"df[df[\"Genre\"] == \"Sports\"].describe().T","09598e79":"df[df[\"Genre\"] == \"Action\"].describe().T","aeb98bb8":"df.loc[(df[\"Platform\"] == \"PS4\"), \"NEW_PLATFORM\"] = \"PS\"\ndf.loc[(df[\"Platform\"] == \"PS3\"), \"NEW_PLATFORM\"] = \"PS\"\ndf.loc[(df[\"Platform\"] == \"PS2\"), \"NEW_PLATFORM\"] = \"PS\"\ndf.loc[(df[\"Platform\"] == \"PS4\"), \"NEW_PLATFORM\"] = \"PS\"\ndf.loc[(df[\"Platform\"] == \"PS\"), \"NEW_PLATFORM\"] = \"PS\"\ndf.loc[(df[\"Platform\"] == \"PSV\"), \"NEW_PLATFORM\"] = \"PS\"","636b4bdf":"df.loc[(df[\"Platform\"] == \"DS\"), \"NEW_PLATFORM\"] = \"NINTENDO\"\ndf.loc[(df[\"Platform\"] == \"Wii\"), \"NEW_PLATFORM\"] = \"NINTENDO\"\ndf.loc[(df[\"Platform\"] == \"GBA\"), \"NEW_PLATFORM\"] = \"NINTENDO\"\ndf.loc[(df[\"Platform\"] == \"GC\"), \"NEW_PLATFORM\"] = \"NINTENDO\"\ndf.loc[(df[\"Platform\"] == \"3DS\"), \"NEW_PLATFORM\"] = \"NINTENDO\"\ndf.loc[(df[\"Platform\"] == \"N64\"), \"NEW_PLATFORM\"] = \"NINTENDO\"\ndf.loc[(df[\"Platform\"] == \"SNES\"), \"NEW_PLATFORM\"] = \"NINTENDO\"\ndf.loc[(df[\"Platform\"] == \"WiiU\"), \"NEW_PLATFORM\"] = \"NINTENDO\"\ndf.loc[(df[\"Platform\"] == \"NES\"), \"NEW_PLATFORM\"] = \"NINTENDO\"","11adf3c2":"df.loc[(df[\"Platform\"] == \"X360\"), \"NEW_PLATFORM\"] = \"XBOX\"\ndf.loc[(df[\"Platform\"] == \"XB\"), \"NEW_PLATFORM\"] = \"XBOX\"\ndf.loc[(df[\"Platform\"] == \"XOne\"), \"NEW_PLATFORM\"] = \"XBOX\"","64b818a7":"df.loc[(df[\"Platform\"] == \"PC\"), \"NEW_PLATFORM\"] = \"PC\"","3ecbb1ea":"df.loc[(df[\"Platform\"] == \"2600\"), \"NEW_PLATFORM\"] = \"ATARI\"","5a0d5ece":"df.loc[(df[\"Platform\"] == \"SAT\"), \"NEW_PLATFORM\"] = \"OTHER\"\ndf.loc[(df[\"Platform\"] == \"GB\"), \"NEW_PLATFORM\"] = \"OTHER\"\ndf.loc[(df[\"Platform\"] == \"DC\"), \"NEW_PLATFORM\"] = \"OTHER\"\ndf.loc[(df[\"Platform\"] == \"GEN\"), \"NEW_PLATFORM\"] = \"OTHER\"\ndf.loc[(df[\"Platform\"] == \"NG\"), \"NEW_PLATFORM\"] = \"OTHER\"\ndf.loc[(df[\"Platform\"] == \"WS\"), \"NEW_PLATFORM\"] = \"OTHER\"\ndf.loc[(df[\"Platform\"] == \"SCD\"), \"NEW_PLATFORM\"] = \"OTHER\"\ndf.loc[(df[\"Platform\"] == \"3DO\"), \"NEW_PLATFORM\"] = \"OTHER\"\ndf.loc[(df[\"Platform\"] == \"TG16\"), \"NEW_PLATFORM\"] = \"OTHER\"\ndf.loc[(df[\"Platform\"] == \"PCFX\"), \"NEW_PLATFORM\"] = \"OTHER\"\ndf.loc[(df[\"Platform\"] == \"GG\"), \"NEW_PLATFORM\"] = \"OTHER\"","9858cdf0":"df.groupby([\"NEW_PLATFORM\", \"Name\"]).agg({\"Total_Sales\": \"mean\"}).sort_values(by=\"Total_Sales\", ascending=False).head(20)","41dc77d7":"xaction=df[df.Genre==\"Action\"]\nxsports=df[df.Genre==\"Sports\"]\nxmisc=df[df.Genre==\"Misc\"]\nxrole=df[df.Genre==\"Role-Playing\"]\nxshooter=df[df.Genre==\"Shooter\"]\nxadventure=df[df.Genre==\"Adventure\"]\nxrace=df[df.Genre==\"Racing\"]\nxplatform=df[df.Genre==\"Platform\"]\nxsimulation=df[df.Genre==\"Simulation\"]\nxfight=df[df.Genre==\"Fighting\"]\nxstrategy=df[df.Genre==\"Strategy\"]\nxpuzzle=df[df.Genre==\"Puzzle\"]","f9ab7793":"trace1 = go.Histogram(\n    x=xaction.NEW_PLATFORM,\n    opacity=0.75,\n    name = \"Action\",\n    marker=dict(color='rgb(165,0,38)'))\ntrace2 = go.Histogram(\n    x=xsports.NEW_PLATFORM,\n    opacity=0.75,\n    name = \"Sports\",\n    marker=dict(color='rgb(215,48,39)'))\ntrace3 = go.Histogram(\n    x=xmisc.NEW_PLATFORM,\n    opacity=0.75,\n    name = \"Misc\",\n    marker=dict(color='rgb(244,109,67)'))\ntrace4 = go.Histogram(\n    x=xrole.NEW_PLATFORM,\n    opacity=0.75,\n    name = \"Role Playing\",\n    marker=dict(color='rgb(253,174,97)'))\ntrace5 = go.Histogram(\n    x=xshooter.NEW_PLATFORM,\n    opacity=0.75,\n    name = \"Shooter\",\n    marker=dict(color='rgb(254,224,144)'))\ntrace6 = go.Histogram(\n    x=xadventure.NEW_PLATFORM,\n    opacity=0.75,\n    name = \"Adventure\",\n    marker=dict(color='rgb(170,253,87)'))\ntrace7 = go.Histogram(\n    x=xrace.NEW_PLATFORM,\n    opacity=0.75,\n    name = \"Racing\",\n    marker=dict(color='rgb(171,217,233)'))\ntrace8 = go.Histogram(\n    x=xplatform.NEW_PLATFORM,\n    opacity=0.75,\n    name = \"Platform\",\n    marker=dict(color='rgb(116,173,209)'))\ntrace9 = go.Histogram(\n    x=xsimulation.NEW_PLATFORM,\n    opacity=0.75,\n    name = \"Simulation\",\n    marker=dict(color='rgb(69,117,180)'))\ntrace10 = go.Histogram(\n    x=xfight.NEW_PLATFORM,\n    opacity=0.75,\n    name = \"Fighting\",\n    marker=dict(color='rgb(49,54,149)'))\ntrace11 = go.Histogram(\n    x=xstrategy.NEW_PLATFORM,\n    opacity=0.75,\n    name = \"Strategy\",\n    marker=dict(color=\"rgb(10,77,131)\"))\ntrace12 = go.Histogram(\n    x=xpuzzle.NEW_PLATFORM,\n    opacity=0.75,\n    name = \"Puzzle\",\n    marker=dict(color='rgb(1,15,139)'))\n\ndata = [trace1, trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11,trace12]\nlayout = go.Layout(barmode='stack',\n                   title='Genre Counts According to Platform',\n                   xaxis=dict(title='Platform'),\n                   yaxis=dict( title='Count'),\n                   paper_bgcolor='beige',\n                   plot_bgcolor='beige'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","d083e123":"trace = go.Histogram(x=df.NEW_PLATFORM,marker=dict(color=\"crimson\",line=dict(color='black', width=2)),opacity=0.75)\nlayout = go.Layout(\n    title='Numbers of Top 100 Video Games Publishers',\n    xaxis=dict(\n        title='Platform'\n    ),\n    yaxis=dict(\n        title='Count'\n    ),\n    bargap=0.2,\n    bargroupgap=0.1, paper_bgcolor='rgb(243, 243, 243)',\n    plot_bgcolor=\"rgb(243, 243, 243)\")\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig)","bf8b4dbb":"df.groupby(\"Name\").agg({\"Total_Sales\": \"mean\"}).sort_values(by=\"Total_Sales\", ascending=False).head(100)","b94423cd":"df[df[\"Name\"] == \"Grand Theft Auto V\"]","cb7667dd":"df[df[\"Name\"] == \"Call of Duty: Black Ops II\"]","14813f7b":"df[df[\"Name\"] == \"Wii Sports\"]","f1a0d96e":"top100 = df.head(100)","d1fd2b57":"trace = go.Histogram(x=top100.Publisher,marker=dict(color=\"crimson\",line=dict(color='black', width=2)),opacity=0.75)\nlayout = go.Layout(\n    title='Numbers of Top 100 Video Games Publishers',\n    xaxis=dict(\n        title='Publishers'\n    ),\n    yaxis=dict(\n        title='Count'\n    ),\n    bargap=0.2,\n    bargroupgap=0.1, paper_bgcolor='rgb(243, 243, 243)',\n    plot_bgcolor=\"rgb(243, 243, 243)\")\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig)","28999185":"genre=pd.DataFrame(df.groupby(\"Genre\")[[\"NA_Sales\",\"EU_Sales\",\"JP_Sales\",\"Other_Sales\",\"Global_Sales\"]].sum())\ngenre.reset_index(level=0, inplace=True)\ngenrecount=pd.DataFrame(df[\"Genre\"].value_counts())\ngenrecount.reset_index(level=0, inplace=True)\ngenrecount.rename(columns={\"Genre\": \"Counts\",\"index\":\"Genre\"}, inplace=True)\n\ngenre=pd.merge(genre,genrecount,on=\"Genre\")","7caf1709":"table_data=genre[[\"Genre\",\"NA_Sales\",\"EU_Sales\",\"JP_Sales\",\"Other_Sales\",\"Global_Sales\"]]\ntable_data = table_data.rename(columns = {\"NA_Sales\": \"North America\", \n                                  \"EU_Sales\":\"Europe\", \n                                  \"JP_Sales\": \"Japan\",\"Other_Sales\":\"Other\",\"Global_Sales\":\"Total\"})","6ee94d47":"x=genre.Genre\nNA_Perce=list(genre[\"NA_Sales\"]\/genre[\"Global_Sales\"]*100)\nEU_Perce=list(genre[\"EU_Sales\"]\/genre[\"Global_Sales\"]*100)\nJP_Perce=list(genre[\"JP_Sales\"]\/genre[\"Global_Sales\"]*100)\nOther_Perce=list(genre[\"Other_Sales\"]\/genre[\"Global_Sales\"]*100)\n\ntrace1 = go.Bar(\n    x=x,\n    y=NA_Perce,\n    name=\"North America\" ,\n    xaxis='x2', yaxis='y2',\n    marker=dict(\n        color='rgb(158,202,225)',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=3),\n        ),\n    opacity=0.75)\ntrace2 = go.Bar(\n    x=x,\n    y=EU_Perce,\n    xaxis='x2', yaxis='y2',\n    marker=dict(\n        color='red',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=3),\n        ),\n    opacity=0.75,\n    name = \"Europe\",\n    )\ntrace3 = go.Bar(\n    x=x,\n    y=JP_Perce,\n    xaxis='x2', yaxis='y2',\n  \n    marker=dict(\n        color='orange',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=3),\n        ),\n    opacity=0.75,\n    name = \"Japan\",\n    )\ntrace4 = go.Bar(\n    x=x,\n    y=Other_Perce,\n    xaxis='x2', yaxis='y2',\n    \n    marker=dict(\n        color='purple',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=3),\n        ),\n    opacity=0.75,\n    name = \"Other\",)\ntrace5=go.Table(\n  header = dict(\n    values = table_data.columns,\n    line = dict(color = 'rgb(8,48,107)',width=3),\n    fill = dict(color = [\"darkslateblue\",\"blue\",\"red\", \"orange\",\"purple\",\"green\"]),\n    align = ['left','center'],\n    font = dict(color = 'white', size = 12),\n     height=30,\n  ),\n  cells = dict(\n    values = [table_data.Genre,round(table_data[\"North America\"]),round(table_data[\"Europe\"]), round(table_data[\"Japan\"]), round(table_data[\"Other\"]),round(table_data[\"Total\"])],\n    height=30,\n    line = dict(color = 'rgb(8,48,107)',width=3),\n    fill = dict(color = [\"silver\",\"rgb(158,202,225)\",\"darksalmon\", \"gold\",\"mediumorchid\",\"yellowgreen\"]),\n    align = ['left', 'center'],\n    font = dict(color = '#506784', size = 12)),\n    domain=dict(x=[0.60,1],y=[0,0.95]),\n)\n\ndata = [trace1, trace2,trace3,trace4,trace5]\nlayout = go.Layout(barmode='stack',autosize=False,width=1200,height=650,\n                legend=dict(x=.58, y=0,orientation=\"h\",font=dict(family='Courier New, monospace',size=11,color='#000'),\n                           bgcolor='beige', bordercolor='beige', borderwidth=1),\n                title='North America, Europe, Japan and Other Sales Percentage and Amounts According to Genre',\n                titlefont=dict(family='Courier New, monospace',size=17,color='black'),\n                xaxis2=dict(domain=[0, 0.50],anchor=\"y2\", title='Genre',titlefont=dict(family='Courier New, monospace'),tickfont=dict(family='Courier New, monospace')), yaxis2=dict( domain=[0, 1],anchor='x2',title=\"Total Percentage\",titlefont=dict(family='Courier New, monospace'),tickfont=dict(family='Courier New, monospace')),\n                paper_bgcolor='beige',plot_bgcolor='beige',\n                annotations=[ dict( text='Sales Percentage According to Region',x=0.08,y=1.02,xref=\"paper\",yref=\"paper\",showarrow=False,font=dict(size=15,family=\"Courier New, monospace\"),bgcolor=\"lightyellow\",borderwidth=5),dict( text='Total Sales(In Millions)',x=0.9,y=1.02,xref=\"paper\",yref=\"paper\",showarrow=False,font=dict(size=15,family='Courier New, monospace'),bgcolor=\"lightyellow\",borderwidth=5)],\n              \n                  )\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","569fc2fc":"<a id='begin'><\/a>\n<h1 style=\"background-color:orange; font-family:newtimeroman; font-size:350%; text-align:center; border-radius: 15px 50px;\">Missing Values<\/h1>","f89d1d2a":"<a id='begin'><\/a>\n<h1 style=\"background-color:orange; font-family:newtimeroman; font-size:350%; text-align:center; border-radius: 15px 50px;\">Top Selling Game of All Time<\/h1>","29df0eb1":"## Before starting this analysis, I would like to gather the scattered platforms under one roof.","d18f9faf":"## We can understand this by creating a year category and looking at the year range of the most sold type.","5e6ee284":" <a id='begin'><\/a>\n<h1 style=\"background-color:orange; font-family:newtimeroman; font-size:350%; text-align:center; border-radius: 15px 50px;\">Top Selling Game Genre<\/h1>","fbc4f75c":"<a id='begin'><\/a>\n<h1 style=\"background-color:orange; font-family:newtimeroman; font-size:350%; text-align:center; border-radius: 15px 50px;\">\ud83c\udfae Video Games Sales Analysis \ud83e\udde9<\/h1>","3b5f8f7e":"<center><img\nsrc=\"https:\/\/i.gifer.com\/3yDz.gif\" style=\"width:75%;height:75%;\">\n<\/center>","451ced8e":"# Data Description\n\n- This dataset contains a list of video games that have sold over 100,000 copies.\n------------------------------------------------------------------------------------------------\n- Variables:\n    * **Rank**: Ranking of overall sales\n    * **Name**: The games name\n    * **Platform**: Platform of the games release (i.e. PC,PS4, etc.)\n    * **Year**: Year of the game's release\n    * **Genre**: Genre of the game\n    * **Publisher**: Publisher of the game\n    * **NA_Sales**: Sales in North America (in millions)\n    * **EU_Sales**: Sales in Europe (in millions)\n    * **JP_Sales**: Sales in Japan (in millions)\n    * **Other Sales**: Sales in the rest of the world (in millions)\n    * **Global Sales**: Total worldwide sales\n    \n    ------------------------------------------------------------------------------------------------\n    \n- In this kernel, I will analyze the video game sales. The questions I will focus on will be:\n 1. What is the most sold game genre ?\n 2. What is the most sold game platform ?\n 3. What is the best selling game of all time ?\n 4. Which region plays the most games ?","6782da47":"# Read Data","28d42bfd":"# It caught my attention that a game like Grand Theft Auto V is not on the list. Upon this, with a little research, I saw that the Grand Theft Auto V game was released at different times for different platforms and the sales on this platform were kept separately. For GTA, sales are divided by platforms and release dates are different. This is valid for many games, it would be very detailed and challenging to collect them all... Even if we collect them, GTA V can only be placed in the second place, so the best selling game is Wii Sports again.","2483afba":"\n<a id='begin'><\/a>\n<h1 style=\"background-color:orange; font-family:newtimeroman; font-size:350%; text-align:center; border-radius: 15px 50px;\">Which region plays more games?<\/h1>","38b2a8e5":"## - It's evident from the number of sales that North America likes gaming more.\n## - looks like less action, more demand for puzzles and role-playing in Japan.\n## - The demand for action and shooter games in North America seems to be quite high.  Approximately 50 percent of the total sales of the action genre were sold in North America.The big impact of this could be GTA love :)","4a182f6e":"<center><img\nsrc=\"https:\/\/64.media.tumblr.com\/2883158079ba281248faba64b7223c23\/tumblr_n6qtp6dkqa1tsxfu3o1_500.gifv\" style=\"width:75%;height:75%;\">\n<\/center>","de55e376":"## The platform genre's high value in Global sales seems to be enough to make it a top seller.","518c0bd6":"<center><img\nsrc=\"https:\/\/media1.giphy.com\/media\/MiiymNgx68qNW\/giphy.gif\" style=\"width:75%;height:75%;\">\n<\/center>","ff6c4a04":"<a id='begin'><\/a>\n<h1 style=\"background-color:orange; font-family:newtimeroman; font-size:350%; text-align:center; border-radius: 15px 50px;\">Library \ud83d\udcda<\/h1>","c96af264":"## Nintendo seems to have taken the lead with the influence of the best selling game platform, Wii Sports and Mario","2ffa501d":"## 52 of the top 100 games were published by Nintendo and 14 by Activision","e7471e67":"<a id='begin'><\/a>\n<h1 style=\"background-color:orange; font-family:newtimeroman; font-size:350%; text-align:center; border-radius: 15px 50px;\">Top Selling Game Platform<\/h1>","2c34adaa":"## Below we see the 10 best-selling games and which genre they belong to, it is remarkable that there are only 2 Platform types in the list","e43041c3":"<a id='begin'><\/a>\n<h1 style=\"background-color:orange; font-family:newtimeroman; font-size:350%; text-align:center; border-radius: 15px 50px;\">EDA<\/h1>","ed8b4945":"## - What is the platform game genre ?\n\n##  Platform game, a two-dimensional video game genre in which the user advances the animated character (hero) on the screen by running, jumping or climbing various planes (platforms).\n\n\n### The biggest reason why Platform is the best-selling genre here is the sale made by Mario.\n\n\n<center><img\nsrc=\"https:\/\/images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com\/f\/6e64b8f7-82f5-47e5-9319-e2e69ca6f56d\/d9f6x59-83bc7697-99b5-4ab1-b56c-48286f982b2b.gif?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7InBhdGgiOiJcL2ZcLzZlNjRiOGY3LTgyZjUtNDdlNS05MzE5LWUyZTY5Y2E2ZjU2ZFwvZDlmNng1OS04M2JjNzY5Ny05OWI1LTRhYjEtYjU2Yy00ODI4NmY5ODJiMmIuZ2lmIn1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmZpbGUuZG93bmxvYWQiXX0.Ecp8az9AAdUgHhqzZodMeTYiyjhki3Mbn-rK2JjN4MM\" style=\"width:75%;height:75%;\">\n<\/center>\n","ef69371f":"<center><img\nsrc=\"https:\/\/c.tenor.com\/mM4X7jIQtxsAAAAC\/fun-play.gif\" style=\"width:75%;height:75%;\">\n<\/center>"}}