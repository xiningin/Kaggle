{"cell_type":{"5a9eb8d5":"code","f6dade64":"code","de8f913b":"code","69247c78":"code","a20cdf70":"code","99e19c22":"code","437fe71d":"code","ed9fece0":"code","522c9860":"code","6044509a":"code","36c957f9":"code","87ff2bf5":"code","24ba85b2":"code","b4719923":"code","f9bc4eab":"code","112bf6dc":"code","5cce7505":"code","26b060c0":"code","717253a9":"code","54ed8820":"code","45439a83":"code","7152d2f1":"code","09e69350":"code","7c0de498":"code","bdc3df07":"code","55681ce2":"code","c2529257":"code","720ff23a":"code","78c84030":"code","51220cd5":"code","34b84f70":"code","bb6c8034":"code","c1443c8d":"code","db9d4372":"code","a3b3a273":"code","dcafea8a":"code","27d8262e":"code","442eb8e4":"code","f5d88a70":"code","b4ca61af":"code","10b30ece":"code","a61b51bb":"code","7fb54e61":"code","ff12ffd9":"code","6bca4cdf":"code","ee7e0fef":"code","c9fdf94d":"code","1bf9485a":"code","186f98f5":"code","62c3c953":"code","8d627caf":"code","41e1a742":"code","e91a4351":"code","ec5ec85f":"code","5e3824bb":"code","8aece337":"code","7f0fb49b":"code","87ffdac5":"code","66aeec95":"code","5e2afbe0":"code","524fda77":"code","287b8be3":"code","e7da1f68":"code","4fe055a6":"code","5f26159c":"code","b7f5531e":"code","b69ae7e0":"code","35729274":"code","b1d8c75b":"code","518703ee":"code","b0c7df72":"code","e6560934":"code","676b62e0":"code","1fb445ce":"markdown","bfc4f318":"markdown","64c76837":"markdown","839f93db":"markdown","ce56d7ac":"markdown","8318baf7":"markdown","479da977":"markdown","1cf862aa":"markdown","b3495ace":"markdown","11eb858b":"markdown","da5cd495":"markdown","70fe0233":"markdown","f9b74839":"markdown","3a1c9fa4":"markdown","1f24e172":"markdown"},"source":{"5a9eb8d5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f6dade64":"train=pd.read_csv(\"..\/input\/titanic\/train.csv\",header=[0])\ntrain.head()","de8f913b":"test=pd.read_csv(\"..\/input\/titanic\/test.csv\",header=[0])\ntest.head()","69247c78":"train.info()","a20cdf70":"test.info()","99e19c22":"train.nunique()","437fe71d":"test.nunique()","ed9fece0":"train.drop(['Ticket'],axis=1,inplace=True)\ntest.drop(['Ticket'],axis=1,inplace=True)","522c9860":"pd.DataFrame(train.Survived.value_counts(normalize=True)*100)","6044509a":"train.Survived.value_counts().plot(kind='bar',xlabel='Survived',ylabel='Count')","36c957f9":"pd.DataFrame(train.Sex.value_counts())","87ff2bf5":"pd.DataFrame(train.groupby(['Sex'])['Survived'].value_counts(normalize=True)*100)","24ba85b2":"pd.crosstab(train.Sex,train.Survived).plot(kind='bar',ylabel='Count')","b4719923":"pd.DataFrame(train.groupby(['Pclass'])['Survived'].value_counts(normalize=True)*100)","f9bc4eab":"pd.crosstab(train.Pclass,train.Survived).plot(kind='bar',ylabel='Count')","112bf6dc":"pd.DataFrame(train.groupby(['Pclass','Sex'])['Survived'].value_counts())","5cce7505":"train.Embarked.value_counts().plot(kind='bar',xlabel='Starting Point',ylabel='Count')","26b060c0":"pd.crosstab(train.Survived,train.Embarked).plot(kind='bar',xlabel='Survived',ylabel='Count')","717253a9":"pd.DataFrame(train.groupby(['Embarked','Sex'])['Survived'].value_counts())","54ed8820":"train.isna().sum()","45439a83":"test.isna().sum()","7152d2f1":"train.Embarked.fillna('S',inplace=True)\ntrain.isna().sum()","09e69350":"test.groupby(['Embarked','Pclass'])['Fare'].describe()","7c0de498":"test[test['Fare'].isna()]","bdc3df07":"test.Fare.fillna(test[(test['Pclass']==3) & (test['Embarked']=='S')].Fare.median(),inplace=True)\ntest.isna().sum()","55681ce2":"train_Fare_Grp=pd.qcut(train.Fare,q=4,labels=['Economy','Economy Plus','Business','First'])\ntrain['Fare_Gp']=train_Fare_Grp\ntrain.head()","c2529257":"test_Fare_Grp=pd.qcut(test.Fare,q=4,labels=['Economy','Economy Plus','Business','First'])\ntest['Fare_Gp']=test_Fare_Grp\ntest.head()","720ff23a":"def cabin_fill(df):\n    for i in range(len(df)):\n        if (df['Cabin'].isna()[i]):\n            fgp=df.iloc[i,:]['Fare_Gp']\n            pcl=df.iloc[i,:]['Pclass']\n            val=df[(df['Fare_Gp']==fgp) | (df['Pclass']==pcl)].Cabin.mode().values[0]\n            df['Cabin'].iloc[i]=val\n            \n    return (df)","78c84030":"cabin_fill(train)\ntrain.isna().sum()","51220cd5":"cabin_fill(test)\ntest.isna().sum()","34b84f70":"def title(df):\n    title=[]\n    for i in range(len(df)):\n        tokens=df.iloc[i,:]['Name'].split(',')\n        title.append(tokens[1].split(' ')[1])\n    df['Title']=title\n    return(df)","bb6c8034":"title(train)\ntrain.head()","c1443c8d":"title(test)\ntest.head()","db9d4372":"train.groupby(['Title','Sex'])['Age'].describe()   ","a3b3a273":"test.groupby(['Title','Sex'])['Age'].describe()","dcafea8a":"train.Title.value_counts()","27d8262e":"train.Title.replace(['Mlle.','Mme.','Ms.','Major.','Lady.','Jonkheer.','Col.',\n                         'Rev.','Capt.','Sir.','Don.','the','Dr.'],\n                 ['Miss.','Miss.','Mrs.','Other','Mrs.','Mr.','Other',\n                  'Other','Other','Other','Mr.','Mrs.','Other'],\n                 inplace=True)\ntrain.Title.value_counts()","442eb8e4":"test.Title.value_counts()","f5d88a70":"test.Title.replace(['Col.','Rev.','Ms.','Dona.','Dr.'],\n                   ['Other','Other','Miss.','Mrs.','Other'],inplace=True)\ntest.Title.value_counts()","b4ca61af":"def age_fill(df):\n    for i in range(len(df)):\n        if (np.isnan(df.iloc[i,:]['Age'])==True):\n            ttl=df.iloc[i,:]['Title']\n            val=df[(df['Title']==ttl)].Age.median()\n            df['Age'].iloc[i]=val\n            \n    return (df)","10b30ece":"age_fill(train)\ntrain.isna().sum()","a61b51bb":"age_fill(test)\ntest.isna().sum()","7fb54e61":"train.head()","ff12ffd9":"train.drop(['Name','Fare_Gp','Title'],axis=1,inplace=True)\ntrain.head()","6bca4cdf":"test.drop(['Name','Fare_Gp','Title'],axis=1,inplace=True)\ntest.head()","ee7e0fef":"y=train.Survived\ntrain.drop(['Survived'],axis=1,inplace=True)\ntrain.head()","c9fdf94d":"data=pd.concat([train,test],axis=0)\ndata.shape","1bf9485a":"data=pd.get_dummies(data,drop_first=True)\ndata.head()","186f98f5":"train=data[data['PassengerId']<892]\ntrain.head()","62c3c953":"test=data[data['PassengerId']>891]\ntest.head()","8d627caf":"from sklearn.preprocessing import StandardScaler","41e1a742":"scaler=StandardScaler()\ntrain_scaled=scaler.fit_transform(train)\ntest_scaled=scaler.fit_transform(test)","e91a4351":"train_scaled.shape, test_scaled.shape","ec5ec85f":"from sklearn.model_selection import train_test_split","5e3824bb":"X_train,X_test,y_train,y_test=train_test_split(train_scaled,y,test_size=0.2)\nX_train.shape, X_test.shape","8aece337":"y_train","7f0fb49b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold","87ffdac5":"skf=StratifiedKFold(n_splits=5,shuffle=True)\nlogmod_scores=cross_val_score(LogisticRegression(solver='liblinear'),train_scaled,y,cv=skf)\nlogmod_scores.mean()","66aeec95":"logmod=LogisticRegression(solver='liblinear')\nlogmod.fit(X_train,y_train)\nypred_logmod=logmod.predict(X_test)\ncm_log=confusion_matrix(y_test,ypred_logmod)\nsns.heatmap(cm_log,annot=True)\nplt.xlabel('Truth')\nplt.ylabel('Prediction')","5e2afbe0":"print(classification_report(y_test,ypred_logmod))","524fda77":"svm_scores=cross_val_score(SVC(C=150,kernel='linear'),train,y,cv=3)\nsvm_scores.mean()","287b8be3":"svmod=SVC(C=150,kernel='linear')\nsvmod.fit(X_train,y_train)\nypred_svmod=svmod.predict(X_test)\ncm_svm=confusion_matrix(y_test,ypred_svmod)\nsns.heatmap(cm_svm,annot=True)\nplt.xlabel('Truth')\nplt.ylabel('Prediction')","e7da1f68":"print(classification_report(y_test,ypred_svmod))","4fe055a6":"dectre_scores=cross_val_score(DecisionTreeClassifier(),train_scaled,y,cv=skf)\ndectre_scores.mean()","5f26159c":"dectre_mod=DecisionTreeClassifier()\ndectre_mod.fit(X_train,y_train)\nypred_dectre=dectre_mod.predict(X_test)\ncm_dectre=confusion_matrix(y_test,ypred_dectre)\nsns.heatmap(cm_dectre,annot=True)\nplt.xlabel('Truth')\nplt.ylabel('Prediction')","b7f5531e":"print(classification_report(y_test,ypred_dectre))","b69ae7e0":"rf_scores=cross_val_score(RandomForestClassifier(criterion='gini'),train_scaled,y,cv=skf)\nrf_scores.mean()","35729274":"rfmod=RandomForestClassifier()\nrfmod.fit(X_train,y_train)\nypred_rfmod=rfmod.predict(X_test)\ncm_rf=confusion_matrix(y_test,ypred_rfmod)\nsns.heatmap(cm_rf,annot=True)\nplt.xlabel('Truth')\nplt.ylabel('Prediction')","b1d8c75b":"print(classification_report(y_test,ypred_rfmod))","518703ee":"nbmod_scores=cross_val_score(BernoulliNB(),train_scaled,y,cv=skf)\nnbmod_scores.mean()","b0c7df72":"nbmod=BernoulliNB()\nnbmod.fit(X_train,y_train)\nypred_nb=nbmod.predict(X_test)\ncm_nb=confusion_matrix(y_test,ypred_nb)\nsns.heatmap(cm_nb,annot=True)\nplt.xlabel('Truth')\nplt.ylabel('Prediction')","e6560934":"print(classification_report(y_test,ypred_nb))","676b62e0":"model=RandomForestClassifier(criterion='gini')\nmodel.fit(train_scaled,y)\nypred_rf=model.predict(test_scaled)\noutput=pd.DataFrame({'PassengerId':data.PassengerId[891:],'Survived':ypred_rf})\noutput.to_csv('MS_Submission.csv',index=False)","1fb445ce":"# Submission","bfc4f318":"# Random Forest","64c76837":"# Filling Embarked Missing Values","839f93db":"Also, after extracting the essential part from name i.e. Title and filling cabin values with Fare_Gp we can safely drop them.","ce56d7ac":"# EDA & Basic Stats","8318baf7":"# Logistic Regression","479da977":"I don't think that Ticket Name will affect the chance of survival. So, I think it is safe to drop it.","1cf862aa":"# Filling Fare Missing Values","b3495ace":"# Filling Missing Age","11eb858b":"# Decision Tree","da5cd495":"# Feature Engineering","70fe0233":"# Filling Cabin Missing Values","f9b74839":"# Checking Structure of Data","3a1c9fa4":"# Bernoulli NB","1f24e172":"# SVM"}}