{"cell_type":{"9c271d0b":"code","08dd5154":"code","ad9380ae":"code","3f2c32b2":"code","38c956eb":"code","4d7fe6b0":"code","58ddda71":"code","4e1ab8e5":"code","8b25637a":"code","d6644789":"code","e6e71903":"code","d72734c8":"code","48f5ac49":"code","90e4686d":"code","79300eb7":"code","20101dbd":"code","9f140eb8":"code","391e5275":"code","b3548c36":"code","35788d6a":"code","ac311476":"code","9c495586":"code","a7d5145e":"code","1ac51ec5":"code","bacc944a":"markdown","fa6ca08b":"markdown","06d647eb":"markdown","e5353b51":"markdown","989b4b11":"markdown","bd426c4a":"markdown","45b46e78":"markdown"},"source":{"9c271d0b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# The imports...\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Data handling and analysis\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import KFold, cross_val_score\n\n# Models\nfrom sklearn import svm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\n\n#super learner lib\nfrom mlens.ensemble import SuperLearner\n\n#plotting lib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","08dd5154":"!pip install mlens","ad9380ae":"#let import dataset using pandas\n\ndataset=pd.read_csv('\/kaggle\/input\/performance-prediction\/summary.csv')\ndataset.head()","3f2c32b2":"dataset.describe()","38c956eb":"# copy all names into one variable and put them aside because unique values in tr \nnames = dataset[\"Name\"]\ndataset.drop([\"Name\"],inplace=True,axis=1)","4d7fe6b0":"dataset.head()","58ddda71":"\n\nplt.subplots(figsize=(18,14))\nsns.heatmap(dataset.corr(),annot=True,linewidths=0.4,linecolor=\"black\",fmt=\"1.2f\",cbar=False)\nplt.title(\"Correlation \",fontsize=50)\nplt.xticks(rotation=35)\nplt.show()","4e1ab8e5":"filterd_col=['GamesPlayed', 'MinutesPlayed', 'PointsPerGame', 'FieldGoalsMade',\n       'FieldGoalsAttempt', 'FieldGoalPercent', 'FreeThrowMade', 'FreeThrowAttempt',\n       'FreeThrowPercent', 'OffensiveRebounds', 'DefensiveRebounds',\n       'Rebounds', 'Assists', 'Steals', 'Blocks', 'Turnovers']","8b25637a":"X = dataset[filterd_col]\ny = dataset[\"Target\"]","d6644789":"\n## imported this lib for handling imbalance data\nfrom imblearn.combine import SMOTETomek\n\n\nsmothy = SMOTETomek(random_state = 42)\nsmothy.fit(X,y)\nX_resampled,y_resampled = smothy.fit_resample(X,y)","e6e71903":"from sklearn.preprocessing import MinMaxScaler","d72734c8":"def get_models():\n\tmodels = list()\n\tmodels.append(LogisticRegression(solver='liblinear'))\n\tmodels.append(DecisionTreeClassifier())\n\tmodels.append(SVC(gamma='scale', probability=True))\n\tmodels.append(GaussianNB())\n\tmodels.append(KNeighborsClassifier())\n\tmodels.append(AdaBoostClassifier())\n\tmodels.append(BaggingClassifier(n_estimators=10))\n\tmodels.append(RandomForestClassifier(n_estimators=10))\n\tmodels.append(ExtraTreesClassifier(n_estimators=10))\n\tmodels.append(XGBClassifier())\n\treturn models\n\n\ndef get_super_learner(X):\n\tensemble = SuperLearner(scorer=accuracy_score, folds=10, shuffle=True, sample_size=len(X)) ## using mlens lib method SuperLearner\n\t# add base models\n\tmodels = get_models()\n\tensemble.add(models)\n\t# add the meta model\n\tensemble.add_meta(LogisticRegression(solver='lbfgs'))\n\t#ensemble.add_meta(XGBClassifier())\n\treturn ensemble","48f5ac49":"\n\nensemble = get_super_learner(X)\npipeline=Pipeline([\n    ('minmax',MinMaxScaler(feature_range=(0,1))),\n    ('predict fun',ensemble)\n])","90e4686d":"X_resampled.dtypes","79300eb7":"# converting data-type of gamesplayed col to float type\n\nX_resampled['GamesPlayed1']=X_resampled['GamesPlayed'].astype('float')","20101dbd":"X_resampled.pop('GamesPlayed')\n# remove this col because it has type int and also we created another same col","9f140eb8":"# checking data types of each col\nX_resampled.dtypes","391e5275":"#pipeline.fit(X_resampled,y_resampled)\n## intial tesing of pipeline is working or not","b3548c36":"#lets make train test split so that we can evaluate accuracy of classifer\n\nfrom sklearn.model_selection import train_test_split\ntrain_X,test_X,train_y,test_y=train_test_split(X_resampled,y_resampled,test_size=0.2,random_state = 42)","35788d6a":"# shape of training and test data we are going to use\ntrain_X.shape,test_X.shape,train_y.shape,test_y.shape","ac311476":"pipeline.fit(np.array(train_X),np.array(train_y))","9c495586":"pred = pipeline.predict(np.array(test_X))\nprint('Super Learner: %.3f' % (accuracy_score(test_y, pred) * 100))","a7d5145e":"plt.subplots(figsize=(14,12))\nsns.heatmap(confusion_matrix(test_y, pred),annot=True,fmt=\"1.0f\",cbar=False,annot_kws={\"size\": 20})\nplt.title(f\"Super-learner model Accuracy: {accuracy_score(test_y, pred)}\",fontsize=40)\nplt.xlabel(\"Target\",fontsize=30)\nplt.show()","1ac51ec5":"kf = KFold(n_splits=10, shuffle=True, random_state=42)\ncv_results = cross_val_score(pipeline, # Pipeline\n                                np.array(train_X),np.array(train_y), # Target vector\n                                cv=kf, # Cross-validation technique\n                                scoring=\"accuracy\", # Loss function\n                                n_jobs=-1) # Use all CPU scores\ncv_results","bacc944a":"## define Stacked model list i.e. Base model and Meta model","fa6ca08b":"## creating pipeline for data preprocessing and model prediction****","06d647eb":"## checking prediction with the help of cross validation techniques","e5353b51":"## Make prediction from the model","989b4b11":"## Confusion matrix of Preditions","bd426c4a":"## training model with the help of pipeline","45b46e78":"Hence we can conclude we achived accuracy of overall 78% using stacked learning method. we can further extend this method and get an more good result using techniques like feature engineering ,Feature Selection or by hypertuning the model so that it can perform more better.\n* We acheived accuracy of Approximtely 78% +-1%\n* Few improvement can be Feature Engineering and Feature Selection.\n* hypertuing network with GridSearchcv or RandomSearchCV"}}