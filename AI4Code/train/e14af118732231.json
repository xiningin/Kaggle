{"cell_type":{"6db4ed15":"code","f57ad151":"code","0af06cc3":"code","e1eb2baa":"code","67a753bf":"code","7f9ad4f9":"code","125e6eb0":"code","9ecae00f":"code","15a5172c":"code","c5c0fcc9":"code","b2ee7548":"code","4036f46d":"code","ac92ce79":"code","a2c1893d":"code","2b95266c":"code","8fb0f4f2":"code","b7e89ad8":"code","4e0006c3":"code","a87055c6":"markdown"},"source":{"6db4ed15":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport cv2\nimport os\nfrom xml.etree import ElementTree\nfrom matplotlib import pyplot as plt\n# Any results you write to the current directory are saved as output.","f57ad151":"#%tensorflow_version 2.x  # this line is not required unless you are in a notebook\nimport tensorflow as tf\nfrom sklearn.metrics import confusion_matrix\nfrom tensorflow.keras import datasets, layers, models\nkeras = tf.keras","0af06cc3":"class_names = ['person','person-like']\nclass_names_label = {class_name:i for i, class_name in enumerate(class_names)}\n\nn_classes = 2\nsize = (200,200)","e1eb2baa":"def load_data():\n    datasets = ['Train\/Train', 'Test\/Test', 'Val\/Val']\n    output = []\n\n    for dataset in datasets:\n        imags = []\n        labels = []\n        directoryA = \"\/kaggle\/input\/pedestrian-detection\/\" + dataset +\"\/Annotations\"\n        directoryIMG = \"\/kaggle\/input\/pedestrian-detection\/\" + dataset +\"\/JPEGImages\/\"\n        file = os.listdir(directoryA)\n        img = os.listdir(directoryIMG)\n        file.sort()\n        img.sort()\n\n        i = 0\n        for xml in file:\n\n            xmlf = os.path.join(directoryA,xml)\n            dom = ElementTree.parse(xmlf)\n            vb = dom.findall('object')\n            label = vb[0].find('name').text\n            labels.append(class_names_label[label])\n\n            img_path = directoryIMG + img[i]\n            curr_img = cv2.imread(img_path)\n            curr_img = cv2.resize(curr_img, size)\n            imags.append(curr_img)\n            i +=1\n        \n        imags = np.array(imags, dtype='float32')\n        imags = imags \/ 255\n        \n      #  labels = pd.DataFrame(labels)\n        labels = np.array(labels, dtype='int32')\n\n        output.append((imags, labels))\n    return output\n\n\n        ","67a753bf":"(train_images, train_labels),(test_images, test_labels),(val_images, val_labels) = load_data()","7f9ad4f9":"train_images.shape","125e6eb0":"plt.figure(figsize=(20,20))\nfor n , i in enumerate(list(np.random.randint(0,len(train_images),36))) : \n    plt.subplot(6,6,n+1)\n    plt.imshow(train_images[i])  \n    plt.title(class_names[train_labels[i]])\n    plt.axis('off')","9ecae00f":"model = models.Sequential()\nmodel.add(layers.Conv2D(16, (3, 3), activation='relu', input_shape=(200, 200, 3)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))","15a5172c":"model.add(layers.Flatten())\nmodel.add(layers.Dense(128, activation='relu'))\nmodel.add(layers.Dense(2))","c5c0fcc9":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","b2ee7548":"history = model.fit(train_images, train_labels, epochs=6, \n                    validation_data=(test_images, test_labels))","4036f46d":"def plot_accuracy_loss(history):\n    \"\"\"\n        Plot the accuracy and the loss during the training of the nn.\n    \"\"\"\n    fig = plt.figure(figsize=(10,5))\n\n    # Plot accuracy\n    plt.subplot(221)\n    plt.plot(history.history['accuracy'],'bo--', label = \"acc\")\n    plt.plot(history.history['val_accuracy'], 'ro--', label = \"val_acc\")\n    plt.title(\"train_acc vs val_acc\")\n    plt.ylabel(\"accuracy\")\n    plt.xlabel(\"epochs\")\n    plt.legend()\n\n    # Plot loss function\n    plt.subplot(222)\n    plt.plot(history.history['loss'],'bo--', label = \"loss\")\n    plt.plot(history.history['val_loss'], 'ro--', label = \"val_loss\")\n    plt.title(\"train_loss vs val_loss\")\n    plt.ylabel(\"loss\")\n    plt.xlabel(\"epochs\")\n\n    plt.legend()\n    plt.show()","ac92ce79":"plot_accuracy_loss(history)","a2c1893d":"preds = model.predict(val_images) ","2b95266c":"plt.figure(figsize=(20,20))\nfor n , i in enumerate(list(np.random.randint(0,len(val_images),36))) : \n    plt.subplot(6,6,n+1)\n    plt.imshow(val_images[i])    \n    plt.axis('off')\n    x =np.argmax(preds[i]) # takes the maximum of of the 6 probabilites. \n    plt.title((class_names[x]))","8fb0f4f2":"result = []\nfor i in range(len(preds)):\n    result.append(np.argmax(preds[i]))","b7e89ad8":"tn, fp, fn, tp = confusion_matrix(val_labels,result).ravel()","4e0006c3":"(tn, fp, fn, tp)","a87055c6":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n"}}