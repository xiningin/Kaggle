{"cell_type":{"27a54785":"code","d0fafca3":"code","375327f8":"code","1ef2dba4":"code","303d59fc":"code","396f00b6":"code","8a2fabf8":"code","2684ec0c":"code","511592f1":"code","ed52ffbb":"code","ba14cfbb":"code","01be9080":"code","2c7b13fb":"code","e94782e1":"code","7476b0c8":"code","53561eed":"code","41d37219":"code","2ae80357":"code","cc76388e":"code","89aba970":"code","eade082b":"code","d9331611":"code","523f35b8":"code","4d1786dc":"code","5755d597":"code","2911d741":"code","61f43d16":"code","a3d2b739":"code","c25a044a":"code","57677252":"code","93c0d8b2":"code","35d0e31f":"code","c265a3e7":"code","c5eee06c":"code","e031a8e8":"code","ea04ea2d":"code","ffcbdfcd":"code","0131ffe2":"markdown","d5c3dcbc":"markdown","c84dc66b":"markdown"},"source":{"27a54785":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d0fafca3":"import pandas as pd\nimport matplotlib.pyplot as plt","375327f8":"df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf.info()","1ef2dba4":"df.head()","303d59fc":"df.describe()","396f00b6":"df.columns","8a2fabf8":"df.shape","2684ec0c":"df['MasVnrType'].value_counts()","511592f1":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(16,12))\nsns.histplot(data=df,x ='SalePrice',bins=30,kde=2,hue= 'SaleCondition',multiple='stack',log_scale=True)\nplt.show()","ed52ffbb":"df['SalePrice'].describe()","ba14cfbb":"#histogram\nsns.displot(df['SalePrice'])","01be9080":"sns.displot(df['SalePrice'],bins = [10000,30000,40000,60000,70000,130000,200000],kde=True,rug=True)","2c7b13fb":"sns.displot(df['SalePrice'],kde=True,rug=True);\n#sns.histplot(df['SalePrice'],kde=True);","e94782e1":"print('Skew',df['SalePrice'].skew())\nprint('Skew',df['SalePrice'].kurt())","7476b0c8":"#scatter plot grlivarea\/saleprice\nvar = 'GrLivArea'\ndata = pd.concat([df['SalePrice'],df[var]],axis=1)\ndata.plot.scatter(x = var,y='SalePrice',ylim=(0,800000));","53561eed":"var = 'TotalBsmtSF'\ndata = pd.concat([df['SalePrice'],df[var]],axis=1)\ndata.plot.scatter(x=var,y='SalePrice',ylim=(0,800000))","41d37219":"df.info()","2ae80357":"# listFeatureStudy = ['MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n#        'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n#        'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n#        'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n#        'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n#        'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n#        'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n#        'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n#        'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n#        'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n#        'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n#        'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n#        'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n#        'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n#        'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n#        'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n#        'SaleCondition', 'SalePrice']\n\ng = sns.PairGrid(df,x_vars=['MSZoning','TotalBsmtSF','GrLivArea'],y_vars=['SalePrice'])\ng.map(sns.scatterplot)","cc76388e":"#box plot overallqual\/saleprice\nvar = 'OverallQual'\ndata = pd.concat([df['SalePrice'], df[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","89aba970":"var = 'YearBuilt'\ndata = pd.concat([df['SalePrice'], df[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 8))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nplt.xticks(rotation=90);","eade082b":"cormat = df.corr()\nf,ax = plt.subplots(figsize=(20,12))\nsns.heatmap(cormat,square=True)","d9331611":"cormat['MasVnrArea'].sort_values(ascending=False)","523f35b8":"import numpy as np\ntopCols = cormat.nlargest(10,'SalePrice')['SalePrice'].index\nprint(df[topCols].shape)\ncorrMat = df[topCols].corr()\nf,ax = plt.subplots(figsize=(20,12))\nsns.heatmap(corrMat,square=True,annot=True,fmt='.2',cbar=True,annot_kws={'size': 20},cmap='viridis')","4d1786dc":"#scatterplot \ncols = ['SalePrice','OverallQual','GrLivArea','GarageCars','TotalBsmtSF','FullBath',\n       'YearBuilt']\n\nsns.pairplot(df[cols],size=1.5)\nplt.show\ndf['GarageCars'].head()","5755d597":"#missing data\ntotal = df.isna().sum().sort_values(ascending=False)\n#print(total)\n#print(df.shape[0])\npercent = (total\/df.shape[0])\n#print(percent)\nmissing_data = pd.DataFrame({'total':total,'percent':percent})\n#print(missing_data.head())\nnpTotal = total.values\nnpPercent = percent.values\n\nprint(npTotal.shape)\nprint(type(npTotal))\nprint(type(npPercent))\ncombine  = np.array([npTotal,npPercent])\nprint(combine.T)\nprint(combine.T.shape)\n#combine = np.concatenate([npTotal,npPercent],axis=1)\nmissing_data = pd.DataFrame(combine.T,columns=['total','percent'])\nprint(missing_data.head())\n# missing_data['total'] = total\n# missing_data['percent'] = percent","2911d741":"!pip install scipy","61f43d16":"#from scipy.stats import norm\nimport seaborn as sns\nfrom scipy import stats","a3d2b739":"sns.distplot(df['SalePrice'],fit=stats.norm)\nfig = plt.figure()\nres = stats.probplot(df['SalePrice'],plot=plt)","c25a044a":"#applying log transformation\ndf['SalePrice'] = np.log(df['SalePrice'])","57677252":"#transformed histogram and normal probability plot\nsns.distplot(df['SalePrice'],fit = stats.norm)\nfig = plt.figure()\nres = stats.probplot(df['SalePrice'],plot=plt)","93c0d8b2":"sns.distplot(df['GrLivArea'],fit = stats.norm)\nfigure = plt.figure()\nstats.probplot(df['GrLivArea'],plot=plt)","35d0e31f":"\ndf['GrLivArea'] = np.log(df['GrLivArea'])\nsns.distplot(df['GrLivArea'],fit = stats.norm)\nfigure = plt.figure()\nstats.probplot(df['GrLivArea'],plot=plt)","c265a3e7":"sns.distplot(df['TotalBsmtSF'],fit=stats.norm)\nfigure = plt.figure()\nstats.probplot(df['TotalBsmtSF'],plot=plt)","c5eee06c":"#Create Feature related to basement availiable or not\n#df['TotalBsmtSF'] = df['TotalBsmtSF'].apply(lambda v:np.log(v) if v > 0 else 0)\n#Make all the basement Availiable feature with log and else make them zero\ndf['HasBsmt'] = 0\ndf.head()\ncondition = (df['TotalBsmtSF'] > 0)\nprint('Condition')\ntype(condition)\ndf.loc[condition,'HasBsmt']=1\ndf.head()\n#df[condition].apply(lambda v: np.log(v) if condition==True else 0)\n# df.loc[df[condition],'HasBsmt']=1\n# print(df['TotalBsmtSF'])","e031a8e8":"df.loc[df['HasBsmt']==1,'TotalBsmtSF'] = np.log(df['TotalBsmtSF'])\ndf.head()","ea04ea2d":"sns.distplot(df[df['TotalBsmtSF']>0]['TotalBsmtSF'],fit=stats.norm)\nfig = plt.figure()\nstats.probplot(df[df['TotalBsmtSF']>0]['TotalBsmtSF'],plot=plt)","ffcbdfcd":"#Scatter Plot of the TotalBsmtSF\nplt.scatter(df[df['TotalBsmtSF']>0]['TotalBsmtSF'],df[df['TotalBsmtSF']>0]['SalePrice'])","0131ffe2":"#Impact of Normality into homoscedasticity","d5c3dcbc":"Source & motivation for the following notebook is from the beatiful notebook by Pedro Marcelino in which he presented a story around the dataset, Which is really interesting and worth trying.\n\nhttps:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python\n\nSo Please upvote the above notebook first.","c84dc66b":"Hmmm... It seems that 'SalePrice' and 'GrLivArea' are really old friends, with a linear relationship.\n\nAnd what about 'TotalBsmtSF'?"}}