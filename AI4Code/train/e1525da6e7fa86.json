{"cell_type":{"403de8ba":"code","22195382":"code","e0f4b4a2":"code","250f4cb9":"code","8cf64744":"code","4ac9a78a":"code","f0038a85":"code","a3bbd0b6":"code","03bc5e80":"code","ef3cc5e5":"code","c097b010":"code","a48308a9":"code","8200a060":"code","d0a85eda":"code","1e7a1eeb":"code","3857cd14":"code","523dbd60":"code","785734fe":"code","91e9424c":"code","c96b4ee9":"code","bd3454fb":"code","b7d28fc9":"code","f83150e5":"code","1af991bd":"code","c82acf9c":"code","58b08642":"code","dd45bc7f":"code","93cc58d9":"code","c8369d86":"code","3a95a3d9":"code","b11110bb":"code","26c48c59":"code","1af7376a":"code","65c08bf6":"code","ff52dad0":"code","6932a785":"code","1619f196":"code","534256be":"code","82134bc7":"code","a625717b":"markdown","208a0505":"markdown","6841f35c":"markdown","eb60578b":"markdown","0c734d6a":"markdown","69fc0ee1":"markdown","562169a6":"markdown","d0b44148":"markdown","63f5daf1":"markdown","0292fa5d":"markdown","463ea3a2":"markdown","d38f5b43":"markdown","ce5436f6":"markdown","a9d65b5a":"markdown","e95e1e9f":"markdown","1c4661cc":"markdown","d0c736eb":"markdown","5e5578c1":"markdown","32df7690":"markdown","500351e4":"markdown","3fd15d98":"markdown","0feeda16":"markdown","50468ff8":"markdown","622a0e48":"markdown","f7d4be38":"markdown","4cf63741":"markdown","1f4a39ad":"markdown","c2175eba":"markdown","8ebdeeb3":"markdown","739ef643":"markdown"},"source":{"403de8ba":"# Importing Python Packages and Tools\nimport pandas as pd\nimport nltk\nfrom tqdm import tqdm\nimport os\nfrom IPython.display import display\nfrom ipywidgets import widgets\nfrom ipywidgets import interact, interactive\n\n# Reading summary tables\nsummarytable_dir = '..\/input\/summarytables\/'\nsum_table = {}\nfor file in os.listdir(summarytable_dir):\n    fname = file.strip('csv').strip('.')\n    full_file = summarytable_dir + file    \n    sum_table[fname] = pd.read_csv(full_file)\nsum_table.keys()","22195382":"# Displaying summary tables\npd.set_option('display.max_rows', 100)\nfor fname, df in sum_table.items():\n    print(fname,' : ' + str(df.shape[0]) +' rows\/row')\n    display(df.head())","e0f4b4a2":"# !python preprocess_get_ids.py\n# !python preprocess_cord_data.py","250f4cb9":"# !pip install git+https:\/\/bitbucket.org\/nmonath\/befree.git\n# !python entities_get_pubtator_annotation.py\n# !python entities_post_tiabs_to_pubtator.py\n# !python entities_retrieve_tiabs_from_pubtator.py\n# !python entities_process_pubtator_annotation.py\n# !python entities_additional_annotation.py","8cf64744":"# !python data_aggregation.py\n# !python data_nodes_relations.py\n# !python data_indexing_time.py\n# !python data_indexing_word.py","4ac9a78a":"# data pathes\ndata_path = '\/kaggle\/input\/cord-19-data-with-tagged-named-entities\/data' # folder for system data\njson_path = '\/kaggle\/input\/cord-19-data-with-tagged-named-entities\/data\/json_files\/json_files' # path of final json files\nmapping_pnid = 'mapping_corduid2nid.json' # dictionary mapping cord_uid to numeric id for each paper\n\nindex_year = 'index_time_year.json' # dictionary of list of papers for each publish year\nindex_title = 'index_word_title.json' # dictionary of list of papers for each word in title\nindex_abstract = 'index_word_abstract.json' # dictionary of list of papers for each word in abstract\nword_counts = 'paper_word_counts.json' # word counts by paper\nindex_table = 'index_word_table.json'\npaper_tables = 'paper_tables.json'\n\nentity_lists = 'entity_lists.json' # entity checking lists including disease list, blacklist etc.\nentity_nodes = 'entity_nodes.json' # entities dictionary\nentity_relations = 'entity_relations.json' # entity relation dictionary\n\nmapping_sents = 'mapping_sents2nid.json' # mapping sent id to numeric id\nindex_sents = 'index_word_sents.json' # mapping word to a list of numeric sent id\nsentences = 'sentences.json' # dictionary of all sentences with unique id\n","f0038a85":"# packages\nfrom utils import *\nfrom mining_search_tool import *\ncsv_path = 'csv'\nif not os.path.exists(csv_path): os.makedirs(csv_path)","a3bbd0b6":"# load dataset for search and display\npapers = SearchPapers(data_path, json_path, mapping_pnid, index_year,\n                      index_title, index_abstract, word_counts, index_table, paper_tables,\n                      entity_lists, entity_nodes, entity_relations, index_sents, mapping_sents, sentences)","03bc5e80":"covid19_names = \"\"\"covid-19, covid19, covid, sars-cov-2, sars-cov2, sarscov2,\n                   novel coronavirus, 2019-ncov, 2019ncov, wuhan coronavirus\n                \"\"\"\npapers_covid19 = papers.search_papers(covid19_names, section = None, publish_year = '2020')\nprint(f\"{'Total papers related to COVID-19:':20}{len(papers_covid19):6}\")","ef3cc5e5":"papers.display_papers(papers_covid19[:1])","c097b010":"# Defining extended keyword quries for risk factors\nAge_query = \"\"\" age, ages, infant, infancy, child, children, adolescent, adolescents, young, youth, old, olds, elderly, senior, pediatric, middle-age, aging, senescence \"\"\"\nAsthma_query = \"\"\" asthma, asthma attack, bronchial asthma, allergy, allergic asthma \"\"\"\nCKD_query = \"\"\" ckd, chronic kidney, chronic kidney disease, chronic renal disease \"\"\"\nCOPD_query =  \"\"\" copd, chronic obstructive pulmonary disease \"\"\"\nCancer_query = \"\"\" malignant neoplastic disease, cancer, tumor, carcinogenesis, melanoma, leukemia, benign, terminal \"\"\"\nCardioCerebrovascular_query = \"\"\"  cardio cerebrovascular disease, vascular disease, cerebrovascular disease, cardiovascular disease, hypercholesterolemia, CVD \"\"\"\nCerebrovascular_query = \"\"\" cerebrovascular, stroke, ischemic, hemorragic \"\"\"\nChronicDigestiveDisorder_query = \"\"\" chronic digestive,  digestion, absorption, celiac disease, ibs, irretable bowel syndrome \"\"\"\nChronicLiverDisease_query = \"\"\" chronic liver,  chronic liver disease, cirrhosis \"\"\"\nChronicRespiratoryDisease_query = \"\"\" chronic respiratory, chronic respiratory disease \"\"\"\nDementia_query = \"\"\" dementia, alzheimer's disease \"\"\"\nDiabete_query = \"\"\" diabetes, diebete, insulin resistance, prediabetes, diabetic, diabetic complications, blood glucose, fasting blood glucose, insulin sensitivity, hyperglycemia \"\"\"\nDrinking_query = \"\"\" alcohol, alcohol intake, alcoholic, alcoholic drinks, alcoholic beverage, alcoholic consumption, intoxicant, inebriant, binge drinking\"\"\"\nEndocrine_query = \"\"\" hormone, endocrine, endocrine gland, endocrine, endocrinal, endocrinal disorder \"\"\"\nHeartDisease_query = \"\"\" heart, heart disease, chd,  coronary heart disease, arrhythmia, atherosclerosis, ischemia, angina \"\"\"\nHeartFailure_query = \"\"\" heart failure\"\"\"\nHispani_query = \"\"\" spanish american, hispanic american,hispanic, latino \"\"\"\nHypertension_query = \"\"\"high blood pressure, hypertension, metabolic syndrome, blood pressure \"\"\"\nImmune_query = \"\"\" immune system, immune system disorder, autoimmune disease, autoimmne thyroiditis, inflammation, inflammatory, gout, arthritis \"\"\"\nMale_query = \"\"\" male, man, gender, female, sex \"\"\"\nObese_query =  \"\"\" bmi, heavy, obese, obesity, body mass index, fat, overweight, abdominal obesity, pear shape, apple shape \"\"\"\nRace_black_query = \"\"\" black, white, african american, afro-american, race, caucasian, caucasoid race, negroid race \"\"\"\nRespiratorySystemDisease_query = \"\"\" respiratory system, respiratory system disease, pneumonia \"\"\"\nSmoking_query = \"\"\" smoke,smoking, tobacco \"\"\"","a48308a9":"# Collecting the query name as a list for future usage.\nquery_list =  ['Age_query' ,'Asthma_query', 'CKD_query','COPD_query','Cancer_query' ,'CardioCerebrovascular_query' ,'Cerebrovascular_query',\n               'ChronicDigestiveDisorder_query','ChronicLiverDisease_query','ChronicRespiratoryDisease_query','Dementia_query','Diabete_query' ,\n               'Drinking_query','Endocrine_query','HeartDisease_query','HeartFailure_query','Hispani_query','Hypertension_query',\n               'Immune_query' ,'Male_query','Obese_query' ,'Race_black_query','RespiratorySystemDisease_query','Smoking_query']","8200a060":"# Defining extended keyword list for risk factors\nsyn_list = []\nfor query_name in query_list:\n    syn_name = query_name.strip('query')+'syn'\n    syn_list.append(syn_name)    \n    globals()[syn_name] = [sent.strip() for sent in globals()[query_name].split(',')]","d0a85eda":"# Defining extended keyword lists for severity terms and mortality terms\nsevere_syn = ['mild', 'moderate', 'severe', 'varied', 'critical', 'icu', 'non-icu','positive','positive testing','hospitalization','hospitalized']\nfatality_syn = ['fatality','mortality','mortalities','death','deaths','dead','casualty']\ncombined_syn = severe_syn + fatality_syn","1e7a1eeb":"Age_query","3857cd14":"# Getting papers related with 'age', searching over titles and abstracts, published in 2020\nriskfactor_papers = papers.search_papers(Age_query, section = 'tiabs', publish_year = '2020')\nprint('There are ' + str(len(riskfactor_papers)) + ' papers in the dataset that are related to age.')\n# Get the subset of Covid-19 related papers\nriskfactor_papers = list(set(riskfactor_papers) & set(papers_covid19))\nprint('Among them, ' + str(len(riskfactor_papers)) + ' papers are related to COVID-19.')","523dbd60":"ratios = ['OR', 'AOR', 'HR', 'AHR', 'RR', 'RH', 'odds ratio', 'hazard ratio', 'relative ratio','odds']\n# The following pattern is looking for pattern: ( ratio keywords + numbers )\nextract_pattern = '|'.join([f'\\([^()]*\\\\b{ratio}\\\\b\\s?[=:]?\\s?\\d+\\.\\d+.*?\\)' for ratio in ratios])","785734fe":"# Search over full text to get papers with pattern ( ratios such as 'OR', 'AOR', 'HR', 'AHR', 'RR', 'RH' )\n# and save these to a dictionary\ndef get_odds(riskfactor_papers):\n    or_riskf = {}\n    for paper_id in riskfactor_papers:\n        paper = papers.get_paper(str(paper_id))\n        date = paper['publish_time']\n        study = paper['title']['text']\n        study_link = paper['url']\n        journal = paper['journal']\n        doi = paper['doi']\n        cord_uid = paper['cord_uid']\n        pmc_link = paper['pmcid']\n        abstract = paper['abstract']['text']\n\n        if pmc_link != '':\n            pmc_link = f\"https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/{pmc_link}\/\"\n\n        if abstract != '':\n            rate = re.findall(extract_pattern, abstract)\n            if rate != []:\n                # if any word in combined synonyms list is in abstract, then we store the paper\n                if (any(word in nltk.word_tokenize(abstract.lower()) for word in combined_syn)):\n                    or_riskf[f'{str(paper_id)}|a|0|0'] = {'Date': date,\n                                                          'Study': study,\n                                                          'Study Link': study_link,\n                                                          'Journal': journal,                                                        \n                                                          'DOI': doi,\n                                                          'CORD_UID': cord_uid,\n                                                          'PMC_Link': pmc_link,\n                                                          'Abstract': abstract,                                                         \n                                                          'Text':abstract,\n                                                          'Ratio':rate}                \n#                 print(rate)\n        bodytext = paper['body_text']\n        if bodytext != []:\n            for sec_id, section in enumerate(bodytext):\n                for txt_id, text in enumerate(section['text']):\n                    rate = re.findall(extract_pattern, text)\n                    if rate != []:\n                        # if any word in combined synonyms list is in body text, then we store the paper\n                         if (any(word in nltk.word_tokenize(abstract.lower()) for word in combined_syn)):\n                            or_riskf[f'{str(paper_id)}|b|{sec_id}|{txt_id}'] = {'Date': date,\n                                                                                'Study': study,\n                                                                                'Study Link': study_link,\n                                                                                'Journal': journal,                                                        \n                                                                                'DOI': doi,\n                                                                                'CORD_UID': cord_uid,\n                                                                                'PMC_Link': pmc_link,\n                                                                                'Abstract': abstract,                                                         \n                                                                                'Text':text,\n                                                                                'Ratio':rate}\n#                         print(rate)\n    return or_riskf","91e9424c":"# Transfering dictionary to a dataframe\nriskfactor_dic = get_odds(riskfactor_papers)\nfor k,v in riskfactor_dic.items():\n    df = pd.DataFrame.from_dict(riskfactor_dic,orient='index')\ndf = df.reset_index().rename(columns={'index':'Ratio_ID'})\ndf.head(2)","c96b4ee9":"keep_pattern = '|'.join([f'(\\([^\\(\\)]*\\\\b{ratio}\\\\b([^\\(\\)]*\\(\\w+\\)[^\\(\\)]*)*\\))|(\\([^\\(\\)]*\\\\b{ratio}\\\\b[^\\(\\)]*\\))' for ratio in ratios])","bd3454fb":"# If there are more than one sentences matching the pattern, then store it in another column (Sentence2)\ndf['Sentence'] = ''; df['Sentence2'] = ''; \nfor idx,text in df.Text.items():\n    sents = nltk.sent_tokenize(text)  \n    for sent in sents:\n        if (re.findall(keep_pattern,sent,re.I)):\n            if any(word in nltk.word_tokenize(sent.lower()) for word in Age_syn) and any(word in sent.lower() for word in combined_syn):\n                if df['Sentence'][idx] == '':\n                    df['Sentence'][idx] += sent + ' '   \n                else:\n                    df['Sentence2'][idx] += sent + ' '\n                    \n# Combining column 'Setence' and 'Sentence2'\ndf1 = df.loc[:,'Ratio_ID':'Sentence']\ndf2 = df.loc[:,'Ratio_ID':'Sentence2'].drop(columns='Sentence')\ndf2 = df2.rename(columns = {'Sentence2':'Sentence'})\ndfn = pd.concat([df1,df2])\ndfn = dfn[dfn['Sentence'] != '']\ndfn = dfn.sort_values('Study')\ndfn = dfn.drop_duplicates(subset = 'Sentence',ignore_index =True)\ndfn.shape","b7d28fc9":"dfn.head(2)","f83150e5":"# Here we use df_dic to store the dataframe.\ndf_dic = {}\nfor riskfactor_query in query_list:\n    riskfactor_name = riskfactor_query.strip('query').strip('_')\n    riskfactor_query = globals()[riskfactor_query]\n    riskfactor_papers = papers.search_papers(riskfactor_query, section = 'tiabs', publish_year = '2020')\n    riskfactor_papers = list(set(riskfactor_papers) & set(papers_covid19))\n    print('-------------------------------------------------------------------------------------------')\n    print('There are '+str(len(riskfactor_papers)) + ' Covid-19 papers in the dataset related to ' + riskfactor_name )      \n    \n    # Transfer dictionary to a dataframe\n    riskfactor_dic = get_odds(riskfactor_papers)\n    for k,v in riskfactor_dic.items():\n        df = pd.DataFrame.from_dict(riskfactor_dic,orient='index')\n    df = df.reset_index().rename(columns={'index':'Ratio_ID'})\n    \n    # Adding column 'Sentence' to store the sentences with pattern ( ratio keywords )\n    df['Sentence'] = ''; df['Sentence2'] = ''; \n    for idx,text in df.Text.items():\n        sents = nltk.sent_tokenize(text)  \n        for sent in sents:\n            if (re.findall(keep_pattern,sent,re.I)):\n                if any(word in nltk.word_tokenize(sent.lower()) for word in Age_syn) and any(word in sent.lower() for word in combined_syn):\n                    if df['Sentence'][idx] == '':\n                        df['Sentence'][idx] += sent + ' '   \n                    else:\n                        df['Sentence2'][idx] += sent + ' '\n                        \n    # Modifying the dataframe                    \n    df1 = df.loc[:,'Ratio_ID':'Sentence']\n    df2 = df.loc[:,'Ratio_ID':'Sentence2'].drop(columns='Sentence')\n    df2 = df2.rename(columns = {'Sentence2':'Sentence'})\n    dfn = pd.concat([df1,df2])\n    dfn = dfn[dfn['Sentence'] != '']\n    dfn = dfn.sort_values('Study')\n    dfn = dfn.drop_duplicates(subset = 'Sentence',ignore_index =True)\n    \n    print('The shape of the dataframe of ' + riskfactor_name + ' is :')\n    print(dfn.shape)\n    \n    # Save dataframes as csv files\n#     dfn.to_csv('csv\/' + riskfactor_name + '.csv')\n    \n    # Save dataframes in a dictionary\n    df_dic[riskfactor_name] = dfn","1af991bd":"# Get dataframe by risk factor name\ndf_dic['Dementia']","c82acf9c":"# Study type extend keywords\nsys_review = ['systematic review', 'meta-analysis',\n              'search: pubmed, pmc, medline, embase, google scholar, pptodate, web of science',\n              'searched: pubmed, pmc, medline, embase, google scholar, uptodate, web of science',\n              'in: pubmed, pmc, medline, embase, google scholar, uptodate, web of science']\nretro_study = ['record review','retrospective', 'observational cohort', 'scoping review']\nsimulation = ['modelling','model','molecular docking','modeling','immunoinformatics', 'simulation', 'in silico', 'in vitro']","58b08642":"# Regex for extracting sample size\nss_patient = re.compile(r'(\\s)([0-9,]+)(\\s|\\s[^0-9,\\.\\s]+\\s|\\s[^0-9,\\.\\s]+\\s[^0-9,\\.\\s]+\\s)(patients|persons|cases|subjects|records)')\nss_review = re.compile(r'(\\s)([0-9,]+)(\\s|\\s[^0-9,\\.\\s]+\\s|\\s[^0-9,\\.\\s]+\\s[^0-9,\\.\\s]+\\s)(studies|papers|articles|publications|reports|records)')","dd45bc7f":"df_dic.keys()","93cc58d9":"s_table = {}\nfor name,dfs in df_dic.items():\n    dfs['Severity of Disease'] = ''\n    dfs['Fatality'] = ''\n    dfs['Study Type'] = ''\n    dfs['Sample Size'] = ''      \n    \n    for idx,row in dfs.iterrows():  \n    \n        abstract = row['Abstract']\n        sentence = row['Sentence']\n        ratio = row['Ratio']\n        \n        # Filling Study Type\n        for pharase in sys_review:\n            if(pharase in abstract):\n                dfs.loc[idx,'Study Type'] = 'Systematic Review'\n        for pharase in retro_study:\n            if(pharase in abstract):\n                dfs.loc[idx,'Study Type'] = 'Retrospective Study'\n        for pharase in simulation:\n            if(pharase in abstract):\n                dfs.loc[idx,'Study Type'] = 'Simulation'\n\n        #Filling Sample Size\n        study_type = dfs.loc[idx,'Study Type']\n        sample_size = ''\n        if study_type == 'Systematic Review':\n            matches = re.findall(ss_review, abstract)\n            for match in matches:\n                if match[1].isdigit() and int(match[1]) != 2019:\n                    dfs.loc[idx, 'Sample Size'] = sample_size + ''.join(match[1:]) + '; '\n        elif study_type == 'Retrospective Study' or study_type == 'Other' :\n            matches = re.findall(ss_patient, abstract)\n            for match in matches:\n                if match[1].isdigit() and int(match[1]) != 2019:\n                    dfs.loc[idx, 'Sample Size'] = sample_size + ''.join(match[1:]) + '; '\n\n        # Filling Ratios\n        if (any(word in nltk.word_tokenize(sentence.lower()) for word in severe_syn )):\n            dfs.loc[idx,'Severity of Disease'] = ratio\n        elif (any(word in nltk.word_tokenize(sentence.lower()) for word in fatality_syn )):\n            dfs.loc[idx,'Fatality'] = ratio\n\n    cols = ['Date','Study','Study Link','Journal','Study Type','Severity of Disease','Fatality','Sample Size','DOI','CORD_UID']\n    dfw = dfs[cols]\n    s_table[name] = dfw\n    display(name + ' : ' + str(dfw.shape[0]) + ' rows\/row' )\n    display(dfw.head())    ","c8369d86":"# Saving risk factor dataframes into csv files\nfor fname, df in s_table.items():\n    df.to_csv(f'{fname}.csv')","3a95a3d9":"import json\nimport csv\nrisk_factor_json_dir = '..\/input\/riskfactorjson\/'","b11110bb":"# Storing the files in a list and a dictionary\nfile_dic = {}\nfor fname in os.listdir(risk_factor_json_dir):\n    filename = fname.strip('json').strip('.')\n    full_fname = risk_factor_json_dir + fname    \n    files = json.load(open(full_fname, 'rb'))    \n    file_dic[filename] = files","26c48c59":"# Get the file from the dictionary\nfile_dic['Age']['0']","1af7376a":"# Defining Graph data structure\nfrom collections import defaultdict\nclass Graph():\n    def __init__(self):\n        \"\"\"\n        self.edges is a dict of all possible next nodes\n        e.g. {'X': ['A', 'B', 'C', 'E'], ...}\n        self.weights has all the weights between two nodes,\n        with the two nodes as a tuple as the key\n        e.g. {('X', 'A'): 7, ('X', 'B'): 2, ...}\n        self.dep sotres the dependency between two nodes,\n        with the two nodes as a tuple as the key\n        e.g. {('X', 'A'): 'nsubj'}\n        \"\"\"\n        self.edges = defaultdict(list)\n        self.weights = {}\n        self.dep = {}\n    \n    def add_edge(self, from_node, to_node, weight, dep):\n        # Note: assumes edges are bi-directional\n        self.edges[from_node].append(to_node)\n        self.edges[to_node].append(from_node)\n        self.weights[(from_node, to_node)] = weight\n        self.weights[(to_node, from_node)] = weight\n        self.dep[(from_node, to_node)] = dep\n        self.dep[(to_node, from_node)] = dep\n\n# Defining dijsktra to get the shortest path from initial node to target node        \ndef dijsktra(graph, initial, end):\n    # shortest paths is a dict of nodes\n    # whose value is a tuple of (previous node, weight)\n    shortest_paths = {initial: (None, 0)}\n    current_node = initial\n    visited = set()\n    \n    while current_node != end:\n        visited.add(current_node)\n        destinations = graph.edges[current_node]\n        weight_to_current_node = shortest_paths[current_node][1]\n\n        for next_node in destinations:\n            weight = graph.weights[(current_node, next_node)] + weight_to_current_node\n            if next_node not in shortest_paths:\n                shortest_paths[next_node] = (current_node, weight)\n            else:\n                current_shortest_weight = shortest_paths[next_node][1]\n                if current_shortest_weight > weight:\n                    shortest_paths[next_node] = (current_node, weight)\n        \n        next_destinations = {node: shortest_paths[node] for node in shortest_paths if node not in visited}\n        if not next_destinations:\n            return \"Route Not Possible\"\n        # next node is the destination with the lowest weight\n        current_node = min(next_destinations, key=lambda k: next_destinations[k][1])\n    \n    # Work back through destinations in shortest path\n    path = []\n    while current_node is not None:\n        path.append(current_node)\n        next_node = shortest_paths[current_node][0]\n        current_node = next_node\n    # Reverse path\n    path = path[::-1]\n    return path\n\n# Switching the order of a tuple\ndef switch(x):\n    return(x[1],x[0])\n\n# Getting the intersection of two lists\ndef intersection(lst1, lst2): \n    return list(set(lst1) & set(lst2)) \n\n# Getting the shortest path from initial node to target node, with the dependecies\ndef shortest_path(file,from_node,to_node):\n    \n    print(file['text'])\n    edges = file['edges']\n    edge_list = []\n    for idx,edge in edges.items():\n        edge_list.append((edge['target'],edge['source'],1,edge['dep']))\n        \n    g = Graph()\n    for edge in edge_list:\n        g.add_edge(*edge)\n    \n    path = dijsktra(g, from_node, to_node)\n    \n    tpl = []\n    for i in range(len(path) - 1):\n        value = tuple(path[i:i+2])\n        tpl.append(value)\n\n    new_path = []\n    for chunk in tpl:\n        if chunk in g.dep.keys():\n            if chunk[0] not in new_path:\n                new_path.append(chunk[0])\n            new_path.append(g.dep[chunk])\n            new_path.append(chunk[1])\n        elif switch(chunk) in g.dep.keys():\n            if switch(chunk)[1] not in new_path:\n                new_path.append(switch(chunk)[1])\n            new_path.append(g.dep[switch(chunk)])\n            new_path.append(switch(chunk)[0])\n    \n    return new_path","65c08bf6":"npaths = []\nfor i in range(len(files)):\n    file = files[str(i)]\n    sent_list = nltk.word_tokenize(file['text'].lower())\n    if intersection(sent_list, Age_syn):\n        age_related =intersection(sent_list, Age_syn)[0]\n    print('-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*')  \n#     print(intersection(sent_list, combined_syn))\n   \n    for severe_related in intersection(sent_list, combined_syn):\n        print(age_related,severe_related)\n        path = shortest_path(file,age_related,severe_related)        \n        print(path)\n        print('----------------------')\n        npaths.append(path) ","ff52dad0":"npaths","6932a785":"file_dic.keys()","1619f196":"# short_path dictionary: take file name as a key and list of path as values\n# gen_dic dictionary: take touple (from_node, to_node, file index) as a key and path as a value; \n#                     file index is to distinguish those same (from_node, to_node) \nshort_path = {} ; gen_dic ={}\nfor riskfactor_query in query_list:\n    \n    fname = riskfactor_query.strip('query').strip('_')\n    files = file_dic[fname]    \n    fname_syn = globals()[fname + '_syn']\n    \n    npaths = []\n    for i in range(len(files)):\n        file = files[str(i)]\n        sent_list = nltk.word_tokenize(file['text'].lower())\n        \n        if intersection(sent_list, fname_syn):\n            fname_related = intersection(sent_list, fname_syn)[0] \n            \n            if (intersection(sent_list, combined_syn)):\n                print('-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*') \n#                 print(intersection(sent_list, combined_syn))\n                \n                for severe_related in intersection(sent_list, combined_syn):\n                    tpl = (fname_related,severe_related, str(i))\n                    path = shortest_path(file,fname_related,severe_related) \n                    if path:\n                        print(path)\n                        npaths.append(path) \n                        gen_dic[tpl] = [path, file['text']]\n\n                            \n    short_path[fname] = npaths","534256be":"short_path['Asthma']","82134bc7":"# Saving gen_dic into a csv file\nimport csv\nwith open('shortest_path.csv', 'w') as f:\n    writer = csv.writer(f)\n    writer.writerow(['Sentence','Nodes','Shortest Path'])\n    for key,value in gen_dic.items():\n        writer.writerow([value[1], key, value[0]])","a625717b":"## Getting the Shortest Paths for Risk Factors\n\n### Finding the shortest pathes in the typed dependency graph between risk factor terms and disease\/severity\/fatality terms","208a0505":"# Extracting information on covid-19 risk factors and constructing benchmark data for building machine learning models","6841f35c":"## Retrieving COVID-19 Related Articles\n\nInformation for the summary tables need to be extracted from the articles relevant to COVID-19. These articles were queried using a list of keywords. We defined the list of extended keywords based on those used by the [PMC COVID-19 Initiative](https:\/\/www.ncbi.nlm.nih.gov\/pmc\/about\/covid-19\/) and manual reading of some relevant articles.\n\nAs most of the articles associated with COVID-19 were published in 2020, we limited the publication time to year 2020.\n\nThere are more than 35 thousand articles identified as relevant to COVID-19 in the [CORD-19 dataset](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge) updated on June 9.\n\nOne of the articles was displayed as follows.","eb60578b":"## Summary Tables of Studies Addressing 24 Different Risk Factors\n\nWe developed a pipeline and a set of approaches to create the summary tables as specified in task 8 using the [CORD-19 Dataset](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge) last updated on June 09. Here we are displaying our manually curated summary tables using the results of our pipeline:","0c734d6a":"### Let's take risk factor 'age' as an example: finding the shortest path for 'age' to severity\/fatality terms.","69fc0ee1":"### Getting the shortest paths for all the risk factors","562169a6":"# Introduction\n\nThe COVID-19 pandemic has caused nearly 8 million confirmed infected patients and more than 430 thousand deathes worldwide. In response to the pandemic, the [CORD-19 dataset](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge) including scholarly articles related to COVID-19 was created for global research community to generate helpful insight for the ongoing combat against this infectious disease using state-of-the-art text mining, NLP and other AI technologies. The [CORD-19 competition](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge) was organized by Kaggle as a call for actions to develop tools and information for answering scientific questions with high priority. [Round \\#2](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge\/discussion\/150921) of the [CORD-19 challenge](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge) asked participants to create summary tables with specific structures derived by expert curators.\n\nTo tackle the challenges, we have organized a collaborative team including scientists from [Insilicom Inc.](https:\/\/insilicom.com\/) and the department of statistics of Florida State University. Insilicom specializes in providing innovative technologies to help scientists effectively use Big Data to accelerate their research and development efforts. It recently developed the [Biomedical Knowledge Discovery Engine (BioKDE)](https:\/\/biokde.com\/), a deep-learning powered search engine for biomedical literature. \n\nOur information extraction pipeline consists of the following components. \nFirst, based on the [CORD-19 dataset](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge), we developed a dataset which is clean and annotated with different entities such as genes, disease, chemicals, etc. using [PubTator](https:\/\/www.ncbi.nlm.nih.gov\/research\/pubtator\/index.html), [BeFree](http:\/\/ibi.imim.es\/befree\/) and [scispacy](https:\/\/allenai.github.io\/scispacy\/) annotated entities; Second, we used extended keywords to query articles relevant to a paticular topic; Third, we used synonyms to further increase the coverage of the retrieved relevant articles; Fourth, we used regular expressions to extract specific information for filling certain columns of the tables; Fifth, we parsed the relevant sentences to obtain typed dependency graphs, which were used to compute the shortest pathes between relevant keywords, such as chemical names and COVID-19 related terms. The shortest pathes are used to further curate the relevant sentences. They will also be used in the future for building predictive models for the corresponding information extraction tasks; Finally, we have manually verified the summary tables before submitting to obtain a manually curated dataset, which can be used in future studies as benchmark data. These manually curated data can also be used to build machine learning models. \n\n**Task 8** is to [create summary tables that address risk factor studies related to COVID-19](http:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge\/tasks?taskId=888). To be more specific, the goal is to create summary tables report about:\n* Hypertension\n* Diabetes\n* Male gender\n* Heart Disease\n* COPD\n* Smoking Status\n* Age\n* Cerebrovascular disease\n* Cardio- and cerebrovascular disease\n* Cancer\n* Respiratory system diseases\n* Chronic kidney disease\n* Chronic respiratory diseases\n* Drinking\n* Overweight or obese\n* Chronic liver disease\n* Asthma\n* Chronic digestive disorder\n* Dementia\n* Endocrine diseases\n* Heart Failure\n* Immune system disorder\n* Race Black vs White\n* Ethnicity Hispanic vs non-Hispacni\n","d0b44148":"# Developing a Cleaned Dataset with Annotated Entity Types\n## Processing the CORD-19 Dataset\nTo process the [CORD-19 Dataset](http:\/\/https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge), we verified the ids of doi, pmid and pmcid of each article and organized all the articles in a consistent format. For articles with pmids and\/or pmcids, the pmids and pmcids will be used for getting entities annotations from PubTator. Each article was stored in a JSON file after the above pre-processing. The codes for extracting ids and article pre-processing can be found as listed:\n\ncode for getting ids\ncode for article process.\n- [code for getting ids](https:\/\/www.kaggle.com\/gdsttian\/preprocess-get-ids)\n- [code for article process](https:\/\/www.kaggle.com\/gdsttian\/preprocess-cord-data).","63f5daf1":"# Creating the Summary Tables\n\nAfter the clean annotated dataset was created, we can start the query and information extraction process.","0292fa5d":"We import the python packages and the tools we developed for the process. These tools can be used for data loading, article query and display. Codes of the tools can be accessed by the following links:\n\n- [code for utility tools](https:\/\/www.kaggle.com\/gdsttian\/utils)\n- [code for search tools](https:\/\/www.kaggle.com\/gdsttian\/mining-search-tool)","463ea3a2":"## Aggregation and Indexing of CORD-19 Articles\n\nWith all the CORD-19 articles processed and the annotations combined, they were aggregated into a single JSON file. For each article, the entities identified were summarized and relations between entities were extracted if they co-occur in the same sentence. \n\nQuery of relevant articles plays an important role in creating the summary tables. In order to retrieve target articles, we created indices of articles by publication time and keywords in titles and abstracts. We used [spaCy](https:\/\/spacy.io\/) for tokenization of titles and abstracts. Articles returned from the query were ranked by the counts of the keywords occuring in the articles.\n\nAll codes for data aggregation and indexing were given as follows:\n\n- [code for data aggregation](https:\/\/www.kaggle.com\/gdsttian\/data-aggregation)\n- [code for entities summary and relation building](https:\/\/www.kaggle.com\/gdsttian\/data-nodes-relations)\n- [code for index by time](https:\/\/www.kaggle.com\/gdsttian\/data-indexing-time)\n- [code for index by words](https:\/\/www.kaggle.com\/gdsttian\/data-indexing-word)","d38f5b43":"## Entity Annotation\n\nEntity annotation is very helpful for extracting relevant information. [PubTator](https:\/\/www.ncbi.nlm.nih.gov\/research\/pubtator\/) provides annotations of biomedical concepts in PubMed abstracts and PMC full-text articles. Using the [PubTator](https:\/\/www.ncbi.nlm.nih.gov\/research\/pubtator\/) API, we acquired annotations for the articles in the [CORD-19 Dataset](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge) when they are available. For those without pre-calculated annotations, we used the [PubTator](https:\/\/www.ncbi.nlm.nih.gov\/research\/pubtator\/) web interface to retrieve the annotations. All [PubTator](https:\/\/www.ncbi.nlm.nih.gov\/research\/pubtator\/) annotations were then parsed and organized in a consistent format for each article. The entities annotated by [PubTator](https:\/\/www.ncbi.nlm.nih.gov\/research\/pubtator\/) include:\n\n- Genes\n- Diseases\n- Chemicals\n- Species\n- Mutation\n- Cellline\n\nBeside [PubTator](https:\/\/www.ncbi.nlm.nih.gov\/research\/pubtator\/) annotations, we also used [BeFree](http:\/\/ibi.imim.es\/befree\/) and [scispacy](https:\/\/allenai.github.io\/scispacy\/) to annotate additional entities. [BeFree](http:\/\/ibi.imim.es\/befree\/) annotates entities of **genes** and **diseases** (a python package needs to be installed from the [BeFree repo](https:\/\/bitbucket.org\/nmonath\/befree\/src\/master\/)). In order to use [BeFree](http:\/\/ibi.imim.es\/befree\/) in our pipeline, we modified a function of the package, which can be found [here](https:\/\/www.kaggle.com\/gdsttian\/befree-ner-covid19).\n\n[scispacy](https:\/\/allenai.github.io\/scispacy\/) includes different models for biomedical concept annotation, among which two were used in our pipeline. The two models and the entities annotated by each model are listed as follows:\n\n- en_ner_craft_md: genes, taxonomies, sequence ontologies, chemicals, gene ontologies and cellline\n- en_ner_jnlpba_md: DNA, cell type, cellline, RNA and protein\n\nAll annotations were combined into a final set of annotations. When annotations by different tools overlap with each other, we selected the annotations with the largest span. When different tools annotate entities at the same span, we gave priority to [PubTator](https:\/\/www.ncbi.nlm.nih.gov\/research\/pubtator\/).\n\nAll codes for annotations are available through the following links:\n\n- [code for acquiring existing PubTator annotations](https:\/\/www.kaggle.com\/gdsttian\/entities-get-pubtator-annotation)\n- [code for posting titles abd abstracts to PubTator for annotations](https:\/\/www.kaggle.com\/gdsttian\/entities-post-tiabs-to-pubtator)\n- [code for retrieving completed title and abstract annotations from PubTator](https:\/\/www.kaggle.com\/gdsttian\/entities-retrieve-tiabs-from-pubtator)\n- [code for parsing PubTator annotations](https:\/\/www.kaggle.com\/gdsttian\/entities-process-pubtator-annotation)\n- [code for adding BeFree and scispacy annotations](https:\/\/www.kaggle.com\/gdsttian\/entities-additional-annotation)esearch\/pubtator\/) include:\n\n","ce5436f6":"short_path.keys()","a9d65b5a":"## Keywords for Retrieving Articles Related to the Summary Table\n\n### Defining extended keyword lists for risk factors, severity terms and mortality terms\n","e95e1e9f":"## Loading the Data","1c4661cc":"With 'age' related papers, we select those papers with patterns indicating numerical outcome of the studies, for example, containing 'OR', 'AOR', 'HR', 'AHR', 'RR', and 'RH'. We call this as ratio pattern.","d0c736eb":"## Extracting relevant information\nWe will first take 'age' as an example, and later generalize to other risk factors","5e5578c1":"# Building machine learning models to answer specific questions","32df7690":"### Running the pipeline for all the other risk factors","500351e4":"Filling some columns of the summary table can be considered as answering certain questions. For example, whether a sentence should be an entry in the table can be determined by answering the following questions: 1. Does the sentence describe the risk factor relationship beween the risk factor term and the disease term (or severity\/fatality)? 2. Does the sentence contain numerical result for such relationship? 3. Is a tagged number in the sentence the numerical result for such relationship? If the answers to the above three questions are true, then we can fill some important columns of the summary table. To answer these questions, the current question-answering systems do not work well because the answers are highly specific to the questions.\n\nTo tackle such problem, we formulated it as building machine learning models to perform classification tasks. Our current pipeline can extract sentences with both risk factor keywords (i.e. age, hypertension, etc.) and disease keywords (COVID-19, severity, mortality, etc.), which also contain numerical results in the ratio pattern. Such sentences are stored in the Sentence column in the generated dataframes. If we manually annotate the sentences based on the questions we have proposed above, then we can build machine learning models to extract the specific information required by the summary table.\n\nWe manually verified the summary tables generated by our pipeline for the following purposes:\n    1. The manually verified information can be more valuable for scientists studying COVID-19;\n    2. The manually verified data can be used as benchmark data for evaluating future studies on this type of problems;\n    3. The manually verified data can be used to build machine learning models to develop better information extraction systems.","3fd15d98":"To this point, we have dataframes with information needed to fill the summary table for different risk factors.","0feeda16":"Defining a function called get_odds to select papers with ratio pattern. Click code to see the code.","50468ff8":"## Generating Summary Tables","622a0e48":"## Sentence parsing\n\nTo build the machine learning models, since the training sample size will be relatively small, we will perform sentence parsing to generate more informative input for the machine learning model. One type of information we extract from sentence result is the shortest pathes between risk factor terms and disease terms. Other information can also be extracted and used in the model building process. We will first try some pre-trained deep learning models. Sentence parsing was performed using Stanford Parser. After parsing the sentence on local machine, we stored the files as json files.","f7d4be38":"In the above dataframe, the column 'Text' stores the paragraph with a matching pattern; The column 'Ratio' stores all the numerical results of the corresponding ratio pattern.","4cf63741":"In the dataframe defined above, we store the sentences with the ratio pattern in the column 'Sentence'. Note that these setences are all from the column 'Text'. Addtional work can be done to decide if the paper is truly relevant to the target table based on the column 'Sentence'.","1f4a39ad":"### Extracting sentences with ratio pattern from 'Text' column and add a new column called Sentence\n\nFollowing regex will find pattern like   ( ratio keywords  (any word) (any word) ) or ( ratio keywords ) ","c2175eba":"#### Loading the json files","8ebdeeb3":"At the moment, we are still working on generating high quality labelled data. Once the labelled training data are available, we will build the model and update our notebook.","739ef643":"#### This notebook was organized in the following structure:\n\n1. Developing a Cleaned Dataset with Annotated Entity Types\n   - Processing the [CORD-19 Dataset](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge)\n   - Entity Annotation\n   - Aggregation and Indexing of CORD-19 Articles\n2. Creating the Summary Tables\n   - Retrieving COVID-19 Related Articles\n   - Keywords for Retrieving Articles Related to the Summary Table\n   - Extracting relevant infromation\n   - Generating the Summary Tables\n3. Building machine learning models to answer specific questions\n   - Sentence Parsing\n   - Getting the shortest paths for risk factors"}}