{"cell_type":{"551d023a":"code","d7947d91":"code","d7c741ac":"code","69807b64":"code","676a1efe":"code","1ed93582":"code","fb32c8d1":"code","5e2a00d7":"code","b7ce1de4":"code","120e7406":"code","0303df40":"code","6f2792fe":"code","351cbd7e":"code","e1d503c3":"code","27404894":"code","bd792032":"code","c8f3fe55":"code","c4bf2a59":"code","1b748ed7":"code","0073038c":"code","604a80bc":"code","ed583302":"code","6054b71a":"code","35490ae3":"code","cad800c4":"code","571b6446":"code","f0760910":"code","8b8f7126":"code","f8f19cae":"code","cc55ab7b":"code","440ba1c3":"code","ddd7faef":"code","b94823aa":"code","a9d6a9e3":"code","110e9725":"code","acbb8a3e":"code","3f63c2f5":"code","e0f2b8c7":"code","68bd12e4":"code","ed634eb9":"code","2a590331":"code","bdd0e324":"code","bc3300aa":"code","38827835":"code","4e40c785":"code","6258f4e4":"code","dc385060":"code","0d5091dd":"markdown","2b92746a":"markdown","9ec59d0b":"markdown","23dd816b":"markdown","621267a9":"markdown","8f0f5a1c":"markdown","d0c7bc8c":"markdown","4f756aab":"markdown","d6bf273f":"markdown","c64fdc23":"markdown","8ac889a8":"markdown","f14dfb6e":"markdown","f73f349f":"markdown","41cb53f4":"markdown"},"source":{"551d023a":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \npyplot.style.use('fivethirtyeight')\npd.set_option('display.width', 100)\npd.set_option('display.max_rows', 25)\npd.set_option('display.max_columns', 25)\n\nimport warnings\nwarnings.simplefilter('ignore')\n\nprint('='*100)\nprint('Ready To Launch !!!!')\nprint('='*100)","d7947d91":"# Load Data\ndf = pd.read_csv('..\/input\/updated-netflix-stock-price-all-time\/netflix.csv')\n\n# Preview Data\ndf","d7c741ac":"# Getting information about the Data\ndf.info()","69807b64":"# Explore the first 5 rows of the structure Data\ndf.head().T","676a1efe":"# Let's see the Data Type\ndf.dtypes.to_frame()","1ed93582":"# Let's see the Statistical Measure of the Data\ndf.describe(include='all')","fb32c8d1":"# Let's hunt the null Value\ndf.isna().mean().to_frame()","5e2a00d7":"del df['Adj Close']","b7ce1de4":"# And let's convert the date column to Timestamp\ndf['Date'] = pd.to_datetime(df['Date'])","120e7406":"# And let's check if the data has changed\ntype(df['Date'][0])","0303df40":"# Let's set the Date column to index\ndf.set_index('Date', inplace=True)","6f2792fe":"# And let's check the first 5 rows of Data\ndf.head()","351cbd7e":"# And let's check the last 5 rows of Data\ndf.tail()","e1d503c3":"# Look at Open Stock\nfig, ax = pyplot.subplots(figsize=[16,4])\nsns.distplot(df['Open'], ax=ax)\nax.set_title('Open Stock Netflix')\npyplot.show()","27404894":"# Look at High Stock\nfig, ax = pyplot.subplots(figsize=[16,4])\nsns.distplot(df['High'], ax=ax)\nax.set_title('High Stock Netflix')\npyplot.show()","bd792032":"# Look at Low Stock\nfig, ax = pyplot.subplots(figsize=[16,4])\nsns.distplot(df['Low'], ax=ax)\nax.set_title('Low Stock Netflix')\npyplot.show()","c8f3fe55":"# Look at Close Stock\nfig, ax = pyplot.subplots(figsize=[16,4])\nsns.distplot(df['Close'], ax=ax)\nax.set_title('Close Stock Netflix')\npyplot.show()","c4bf2a59":"df.hist(figsize=(6, 12))\npyplot.show()","1b748ed7":"# Accomodate data without Volume\ndata = df.drop('Volume',axis=1)","0073038c":"# Plotting Data\npyplot.figure(figsize=(20,10))\nsns.lineplot(data=data.loc['2002-05-23':'2002-12-31'])\npyplot.title('Netflix Stocks in 2002 (Jan - Dec)')\npyplot.show()","604a80bc":"# Plotting Data\npyplot.figure(figsize=(20,10))\nsns.lineplot(data=data.loc['2021-01':])\npyplot.title('Netflix Stocks in 2021 (Jan - Current Month)')\npyplot.show()","ed583302":"# Plotting Data\npyplot.figure(figsize=(20,10))\nsns.lineplot(data=data.loc['2002-05-23':'2012-05-23'])\npyplot.title('Netflix Stocks in 2002 - 2012')\npyplot.show()","6054b71a":"# Plotting Data\npyplot.figure(figsize=(20,10))\nsns.lineplot(data=data.loc['2012-01-01':])\npyplot.title('Netflix Stocks in 2012 - Current Year')\npyplot.show()","35490ae3":"# Plotting Data\npyplot.figure(figsize=(20,10))\nsns.lineplot(data=data, linewidth=1)\npyplot.title('Netflix Overall Stocks')\npyplot.show()","cad800c4":"# Accomodate data Volume\nvolume = df['Volume']","571b6446":"# Plotting Data\npyplot.figure(figsize=(20,10))\nsns.lineplot(data=volume.loc['2002-05-23':'2002-12-31'])\npyplot.title('Netflix Volume Stocks in 2002 (Jan - Dec)')\npyplot.show()","f0760910":"# Plotting Data\npyplot.figure(figsize=(20,10))\nsns.lineplot(data=volume.loc['2021-01':])\npyplot.title('Netflix Volume Stocks in 2021 (Jan - Current Month)')\npyplot.show()","8b8f7126":"# Plotting Data\npyplot.figure(figsize=(20,10))\nsns.lineplot(data=volume.loc['2002-05-23':'2012-05-23'])\npyplot.title('Netflix Volume Stocks in 2002 - 2012')\npyplot.show()","f8f19cae":"# Plotting Data\npyplot.figure(figsize=(20,10))\nsns.lineplot(data=volume.loc['2012-01-01':])\npyplot.title('Netflix Volume Stocks in 2012 - Current Year')\npyplot.show()","cc55ab7b":"# Plotting Data\npyplot.figure(figsize=(20,10))\nsns.lineplot(data=volume, linewidth=1)\npyplot.title('Netflix Overall Volume Stocks')\npyplot.show()","440ba1c3":"# Accomodate Data\nopen_stock = df[['Open']]\nclose_stock = df[['Close']]\nhigh_stock = df[['High']]\nlow_stock = df[['Low']]\nvolume_stock = df[['Volume']]","ddd7faef":"# Make A Plot Function\ndef plot_timeseries(tdf, label1, label2, col, title):\n    \n    # Figuring the size\n    pyplot.figure(figsize=(25,15))\n    \n    # Create a lineplot for data 1\n    sns.lineplot(data=tdf,\n                 label=label1,\n                 legend=False,)\n    \n    # Create a lineplot for data 2\n    sns.lineplot(data=df[col],\n                 label=label2,\n                 legend=False,)\n    \n    # Create a title\n    pyplot.title(title)\n    \n    # Show the legend\n    pyplot.legend()\n    \n    # Show the plot\n    pyplot.show()","b94823aa":"# Prepare Data\nsimple_moving_average_open_stock = open_stock.rolling(window=30).mean()\n\n# Plotting Data\nplot_timeseries(simple_moving_average_open_stock, # Data\n                'Moving Average', # Label 1\n                'Actual', # Label 2\n                'Open', # Column of the Data\n                'Open Stock Moving Average') # Title","a9d6a9e3":"# Prepare Data\nsimple_moving_average_close_stock = close_stock.rolling(window=30).mean()\n\n# Plotting Data\nplot_timeseries(simple_moving_average_close_stock, # Data\n                'Moving Average', # Label 1\n                'Actual', # Label 2\n                'Close', # Column of the Data\n                'Close Stock Moving Average') # Title","110e9725":"# Prepare Data\nsimple_moving_average_high_stock = high_stock.rolling(window=30).mean()\n\n# Plotting Data\nplot_timeseries(simple_moving_average_high_stock, # Data\n                'Moving Average', # Label 1\n                'Actual', # Label 2\n                'High', # Column of the Data\n                'High Stock Moving Average') # Title","acbb8a3e":"# Prepare Data\nsimple_moving_average_low_stock = low_stock.rolling(window=30).mean()\n\n# Plotting Data\nplot_timeseries(simple_moving_average_low_stock, # Data\n                'Moving Average', # Label 1\n                'Actual', # Label 2\n                'Low', # Column of the Data\n                'Low Stock Moving Average') # Title","3f63c2f5":"# Prepare Data\nsimple_moving_average_volume_stock = volume_stock.rolling(window=30).mean()\n\n# Plotting Data\nplot_timeseries(simple_moving_average_volume_stock, # Data\n                'Moving Average', # Label 1\n                'Actual', # Label 2\n                'Volume', # Column of the Data\n                'Volume Stock Moving Average') # Title","e0f2b8c7":"# Prepare Data\nweights = np.arange(1,31)\nopen_MV = df['Open'].rolling(30).apply(lambda close: np.dot(close, weights)\/weights.sum(), \n                                      raw=True)\n\n# Plotting Data\nplot_timeseries(open_MV, # Data\n                'Weighted Moving Average', # Label 1\n                'Actual', # Label 2\n                'Open', # Column of the Data\n                'Open Stock Weighted Moving Average') # Title","68bd12e4":"# Prepare Data\nweights = np.arange(1,31)\nclose_MV = df['Close'].rolling(30).apply(lambda close: np.dot(close, weights)\/weights.sum(), \n                                        raw=True)\n\n# Plotting Data\nplot_timeseries(close_MV, # Data\n                'Weighted Moving Average', # Label 1\n                'Actual', # Label 2\n                'Close', # Column of the Data\n                'Closing Stock Weighted Moving Average') # Title","ed634eb9":"# Prepare Data\nweights = np.arange(1,31)\nhigh_MV = df['High'].rolling(30).apply(lambda close: np.dot(close, weights)\/weights.sum(), \n                                        raw=True)\n\n# Plotting Data\nplot_timeseries(high_MV, # Data\n                'Weighted Moving Average', # Label 1\n                'Actual', # Label 2\n                'High', # Column of the Data\n                'High Stock Weighted Moving Average') # Title","2a590331":"# Prepare Data\nweights = np.arange(1,31)\nlow_MV = df['Low'].rolling(30).apply(lambda close: np.dot(close, weights)\/weights.sum(), \n                                        raw=True)\n\n# Plotting Data\nplot_timeseries(high_MV, # Data\n                'Weighted Moving Average', # Label 1\n                'Actual', # Label 2\n                'Low', # Column of the Data\n                'Low Stock Weighted Moving Average') # Title","bdd0e324":"# Prepare Data\nweights = np.arange(1,31)\nvolume_MV = df['Volume'].rolling(30).apply(lambda close: np.dot(close, weights)\/weights.sum(), \n                                          raw=True)\n\n# Plotting Data\nplot_timeseries(volume_MV, # Data\n                'Weighted Moving Average', # Label 1\n                'Actual', # Label 2\n                'Volume', # Column of the Data\n                'Closing Stock Weighted Moving Average') # Title","bc3300aa":"# Prepare Data\nexpo_mv_open = df['Open'].ewm(span=30, \n                              adjust=False).mean()\n\n# Plotting Data\nplot_timeseries(expo_mv_open, # Data\n                'Exponential Moving Average', # Label 1\n                'Actual', # Label 2\n                'Open', # Column of the Data\n                'Open Stock Exponential Moving Average') # Title","38827835":"# Prepare Data\nexpo_mv_close = df['Close'].ewm(span=30, \n                                adjust=False).mean()\n\n# Plotting Data\nplot_timeseries(expo_mv_close, # Data\n                'Exponential Moving Average', # Label 1\n                'Actual', # Label 2\n                'Close', # Column of the Data\n                'Close Stock Exponential Moving Average') # Title","4e40c785":"# Prepare Data\nexpo_mv_high = df['High'].ewm(span=30, \n                                adjust=False).mean()\n\n# Plotting Data\nplot_timeseries(expo_mv_high, # Data\n                'Exponential Moving Average', # Label 1\n                'Actual', # Label 2\n                'High', # Column of the Data\n                'High Stock Exponential Moving Average') # Title","6258f4e4":"# Prepare Data\nexpo_mv_low = df['Low'].ewm(span=30, \n                                adjust=False).mean()\n\n# Plotting Data\nplot_timeseries(expo_mv_low, # Data\n                'Exponential Moving Average', # Label 1\n                'Actual', # Label 2\n                'Low', # Column of the Data\n                'Low Stock Exponential Moving Average') # Title","dc385060":"# Prepare Data\nexpo_mv_volume = df['Volume'].ewm(span=30, \n                                  adjust=False).mean()\n\n# Plotting Data\nplot_timeseries(expo_mv_volume, # Data\n                'Exponential Moving Average', # Label 1\n                'Actual', # Label 2\n                'Volume', # Column of the Data\n                'Volume Stock Exponential Moving Average') # Title","0d5091dd":"# **Import Libraries**","2b92746a":"# **Netflix Volume Stock From 2002 - Current Year**","9ec59d0b":"# **Analysis on Open, High, Low, and Close from 2002 - Current Year**","23dd816b":"### **1. Load Data**","621267a9":"**yap! the data has been changed, and let's go to the next step**","8f0f5a1c":"# **Netflix Open, High, Low, Close Stock From 2002 - Current Year**","d0c7bc8c":"# **Exponential Moving Average**\n\nThe exponential moving average (EMA) is a technical chart indicator that tracks the price of an investment (like a stock or commodity) over time. The EMA is a type of weighted moving average (WMA) that gives more weighting or importance to recent price data.","4f756aab":"**okay, there's no null value in this data, and everything looks good.**","d6bf273f":"# **Time Series Analysis Stock**","c64fdc23":"**Okay, everything looks good, and here we go, let's analize the data.**","8ac889a8":"# **1. Simple Moving Average**\n\nA simple moving average (SMA) is an arithmetic moving average calculated by adding recent prices and then dividing that figure by the number of time periods in the calculation average.","f14dfb6e":"# **Data Preprocessing**","f73f349f":"# **And that's it! Don't Forget to give me feedback and upvote if you like it!**","41cb53f4":"# **Weighted Moving Average**\n\nA Weighted Moving Average puts more weight on recent data and less on past data. This is done by multiplying each bar's price by a weighting factor. Because of its unique calculation, WMA will follow prices more closely than a corresponding Simple Moving Average."}}