{"cell_type":{"1408048c":"code","aa7a91ce":"code","bbab2b24":"code","d19d8102":"code","743a8331":"code","b268079b":"code","12a3715a":"code","6cf5d093":"code","55900576":"code","afc16ac5":"code","56ffb097":"code","031bb563":"code","2f73298d":"code","f06d2e4d":"code","ba79d11f":"code","79623cf9":"code","c9cfa794":"code","4650c8e5":"code","6e19578e":"code","a1a1773b":"code","648a80c0":"code","45c5e59a":"markdown","e565e92b":"markdown","bce3aa35":"markdown","644cf62e":"markdown","dd3e739d":"markdown","a8108a6a":"markdown","671efee0":"markdown","6afa64a6":"markdown","c28739a9":"markdown","6f43c9e8":"markdown","5aea07f5":"markdown","71899798":"markdown","9c4b8775":"markdown","64c074bd":"markdown","62b9d8b2":"markdown","209a3da7":"markdown","63471946":"markdown"},"source":{"1408048c":"import os\nimport gc\n\nimport re\nimport numpy as np\nimport pandas as pd\n\nimport nltk\nfrom nltk.corpus import wordnet, stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.stem.porter import PorterStemmer\n\nfrom colorama import Fore, Back, Style","aa7a91ce":"train_df = pd.read_csv('..\/input\/train.csv')","bbab2b24":"train_df.head()","d19d8102":"comments = train_df['comment_text']","743a8331":"def example_cleaning_results(function):\n    select_comments = []\n    for i, comment in enumerate(comments):\n        if comment != function(comment):\n            select_comments.append(comment)\n        if len(select_comments) == 5:\n            break\n    \n    print(\"                          \" +\\\n          f'{Style.DIM}'+\\\n          \"EXAMPLE WORKING OF TEXT CLEANING FUNCTION\"+\\\n          f'{Style.RESET_ALL}')\n    print(\"                          \" +\\\n          f'{Style.DIM}'+\\\n          \"-------------------------------------------\"+\\\n          f'{Style.RESET_ALL}')\n    print(\"\")\n\n    for comment in select_comments:\n        print(f'{Fore.YELLOW}{Style.DIM}' + comment + f'{Style.RESET_ALL}' +\\\n              '\\n\\n' + \"                                     \"+\\\n              'CHANGES TO' + '\\n\\n' +\\\n              f'{Fore.CYAN}{Style.DIM}' + function(comment) + f'{Style.RESET_ALL}')\n        \n        print(\"\")\n        \n        print(f'{Fore.WHITE}{Style.DIM}' +\\\n              \"-------------------------\"+\\\n              \"-------------------------\"+\\\n              \"-------------------------\"+\\\n              \"------------------\" +\\\n              f'{Style.RESET_ALL}')","b268079b":"def remove_numbers(text):\n    \"\"\" Removes integers \"\"\"\n    text = ''.join([i for i in text if not i.isdigit()])         \n    return text","12a3715a":"example_cleaning_results(remove_numbers)","6cf5d093":"def replace_multi_exclamation_mark(text):\n    \"\"\" Replaces repetitions of exlamation marks \"\"\"\n    text = re.sub(r\"(\\!)\\1+\", ' multiExclamation ', text)\n    return text\n\ndef replace_multi_question_mark(text):\n    \"\"\" Replaces repetitions of question marks \"\"\"\n    text = re.sub(r\"(\\?)\\1+\", ' multiQuestion ', text)\n    return text\n\ndef replace_multi_stop_mark(text):\n    \"\"\" Replaces repetitions of stop marks \"\"\"\n    text = re.sub(r\"(\\.)\\1+\", ' multiStop ', text)\n    return text","55900576":"example_cleaning_results(lambda x: replace_multi_exclamation_mark(replace_multi_question_mark(replace_multi_stop_mark(x))))","afc16ac5":"contraction_patterns = [(r'won\\'t', 'will not'), (r'can\\'t', 'cannot'), (r'i\\'m', 'i am'),\\\n                        (r'ain\\'t', 'is not'), (r'(\\w+)\\'ll', '\\g<1> will'),\\\n                        (r'(\\w+)n\\'t', '\\g<1> not'),\\\n                        (r'(\\w+)\\'ve', '\\g<1> have'), (r'(\\w+)\\'s', '\\g<1> is'),\\\n                        (r'(\\w+)\\'re', '\\g<1> are'), (r'(\\w+)\\'d', '\\g<1> would'),\\\n                        (r'&', 'and'), (r'dammit', 'damn it'), (r'dont', 'do not'),\\\n                        (r'wont', 'will not')]\n\ndef replace_contraction(text):\n    patterns = [(re.compile(regex), repl) for (regex, repl) in contraction_patterns]\n    for (pattern, repl) in patterns:\n        (text, count) = re.subn(pattern, repl, text)\n    return text","56ffb097":"example_cleaning_results(replace_contraction)","031bb563":"def replace(word, pos=None):\n    \"\"\" Creates a set of all antonyms for the word and if there is only one antonym, it returns it \"\"\"\n    antonyms = set()\n    for syn in wordnet.synsets(word, pos=pos):\n        for lemma in syn.lemmas():\n            for antonym in lemma.antonyms():\n                antonyms.add(antonym.name())\n    if len(antonyms) == 1:\n        return antonyms.pop()\n    else:\n        return None\n\ndef replace_negations(text):\n    \"\"\" Finds \"not\" and antonym for the next word and if found, replaces not and the next word with the antonym \"\"\"\n    i, l = 0, len(text)\n    words = []\n    while i < l:\n        word = text[i]\n        if word == 'not' and i+1 < l:\n            ant = replace(text[i+1])\n            if ant:\n                words.append(ant)\n                i += 2\n                continue\n        words.append(word)\n        i += 1\n    return words\n\ndef tokenize_and_replace_negations(text):\n    tokens = nltk.word_tokenize(text)\n    tokens = replace_negations(tokens)\n    text = \" \".join(tokens)\n    return text","2f73298d":"example_cleaning_results(tokenize_and_replace_negations)","f06d2e4d":"stoplist = stopwords.words('english')\n\ndef remove_stop_words(text):\n    finalTokens = []\n    tokens = nltk.word_tokenize(text)\n    for w in tokens:\n        if (w not in stoplist):\n            finalTokens.append(w)\n    text = \" \".join(finalTokens)\n    return text","ba79d11f":"example_cleaning_results(remove_stop_words)","79623cf9":"def replace_elongated(word):\n    \"\"\" Replaces an elongated word with its basic form, unless the word exists in the lexicon \"\"\"\n\n    repeat_regexp = re.compile(r'(\\w*)(\\w)\\2(\\w*)')\n    repl = r'\\1\\2\\3'\n    if wordnet.synsets(word):\n        return word\n    repl_word = repeat_regexp.sub(repl, word)\n    if repl_word != word:      \n        return replace_elongated(repl_word)\n    else:       \n        return repl_word\n    \ndef replace_elongated_words(text):\n    finalTokens = []\n    tokens = nltk.word_tokenize(text)\n    for w in tokens:\n        finalTokens.append(replace_elongated(w))\n    text = \" \".join(finalTokens)\n    return text","c9cfa794":"example_cleaning_results(replace_elongated_words)","4650c8e5":"stemmer = PorterStemmer()\n\ndef stem_words(text):\n    finalTokens = []\n    tokens = nltk.word_tokenize(text)\n    for w in tokens:\n        finalTokens.append(stemmer.stem(w))\n    text = \" \".join(finalTokens)\n    return text","6e19578e":"example_cleaning_results(stem_words)","a1a1773b":"lemmatizer = WordNetLemmatizer()\n\ndef lemmatize_words(text):\n    finalTokens = []\n    tokens = nltk.word_tokenize(text)\n    for w in tokens:\n        finalTokens.append(lemmatizer.lemmatize(w))\n    text = \" \".join(finalTokens)\n    return text","648a80c0":"example_cleaning_results(lemmatize_words)","45c5e59a":"### Replace the negations with antonyms\nThis function rplaces negations with their respective antonyms.\n\nEg. I am not happy. --> I am unhappy.","e565e92b":"## Introduction\n### In this kernel, I will walk you through some extra text cleaning methods and how they work on sample comments.","bce3aa35":"### Remove stopwords\nThis function removes the most common words used in English (stop words) like 'a', 'is', 'are' etc.\n\nEg. He is a very humorous person. --> He very humorous person.","644cf62e":"### Replace elongated words with the basic form\nThis function replaces elongated words with its basic form.\n\nEg. I eat little food --> I eat litle food","dd3e739d":"### Extract comments from data","a8108a6a":"### Stem words\nThis function \"stems\" the words in the comments. It only keeps the stem of the word, which need not be an actual word.\n\nEg. I love swimming and driving happily --> I love swimm and driv happi","671efee0":"### See first few rows of dataframe","6afa64a6":"### Create function for visualizing the effect of text cleaning function","c28739a9":"### Remove the numbers\nThis function removes all the numbers in the comment\n\nEg. I'm 25 years old. --> I'm years old.","6f43c9e8":"### Remove the exclamation, question and full stop marks\nThis function removes the exclamation, question and full stop marks from the comment.\n\nEg. This is awesome ! --> This is awesome","5aea07f5":"### Download data","71899798":"### That's it ! Thanks for reading my kernel and I hope you found it useful. Your upvote will be appreciated :)","9c4b8775":"## Acknowledgements\nI have borrowed the text cleaning functions from Dimitrios in [this great kernel](https:\/\/www.kaggle.com\/deffro\/text-pre-processing-techniques) from the Quora Insincere Questions Classification competition.","64c074bd":"### Lemmatize words\nThe function lemmatizes the words in the comments. It only keeps the lemma of the actual words, which needs to be an actual word.\n\nEg. I love swimming and driving happily --> I love swim and drive happy","62b9d8b2":"### Import necessary libraries","209a3da7":"### Remove the exclamation, question and full stop marks\nThis function removes the exclamation, question and full stop marks from the comment.\n\nEg. You love cats !? I prefer dogs. --> You love cats I prefer dogs","63471946":"<center><img src=\"https:\/\/i.imgur.com\/CtyQ8Ag.png\" width=\"250px\"><\/center>"}}