{"cell_type":{"d1912a84":"code","bfe8ed77":"code","2a1c66a1":"code","7ccdfd14":"code","448e2166":"code","98574b51":"code","b7f188e6":"code","5818a410":"code","e76b839a":"code","b93a4cdf":"code","ce373cd3":"code","b53d794b":"code","7642b1ea":"code","25969c0f":"code","ec61c133":"markdown","e05162e9":"markdown","0084eb0b":"markdown","3062b425":"markdown","42378b80":"markdown","9f438672":"markdown"},"source":{"d1912a84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bfe8ed77":"dataset = pd.read_csv('\/kaggle\/input\/salary-data-simple-linear-regression\/Salary_Data.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","2a1c66a1":"def mean(d): return sum(d)\/len(d)","7ccdfd14":"def std_dev(d):\n    d_mean = mean(d)\n    numerator = 0\n    for e in d:\n        numerator += (e-d_mean)**2\n    return (numerator\/(len(d)-1))**(1\/2)","448e2166":"def corr_coeff(X, y):\n    n = len(X)\n    Xy = []\n    for i in range(n):\n        Xy.append(X[i]*y[i])\n    X_sq = [e**2 for e in X]\n    y_sq = [e**2 for e in y]\n    numerator = n*sum(Xy)-sum(X)*sum(y)\n    denominator = ((n*sum(X_sq)-sum(X)**2)*(n*sum(y_sq)-sum(y)**2))**(1\/2)\n    return numerator\/denominator","98574b51":"def slope(r, std_dev_X, std_dev_y): return r*(std_dev_y\/std_dev_X)","b7f188e6":"def y_intercept(slope, X_mean, y_mean): return y_mean-(slope*X_mean)","5818a410":"def equation_coeffs(X, y):\n    b1 = slope(corr_coeff(X, y), std_dev(X), std_dev(y))[0]\n    b0 = y_intercept(b1, mean(X), mean(y))[0]\n    return b0, b1","e76b839a":"def estimate(e_X):\n    return b0 + b1*e_X","b93a4cdf":"def equation():\n    return 'y=' + str(b0) + ('+' if b1 >= 0 else '') + str(b1) + 'x'","ce373cd3":"def r_squared():\n    ss_res = sum([(y[i]-estimate(X[i]))**2 for i in range(len(X))])\n    ss_tot = sum([(y[i]-mean(y))**2 for i in range(len(X))])\n    return 1-(ss_res\/ss_tot)","b53d794b":"def plot(eq, r_sq):\n    title = str(eq) + ' : R^2=' + str(r_sq)\n    plt.title(title)\n    plt.xlabel('INDEPENDANT')\n    plt.ylabel('DEPENDANT')\n    plt.scatter(X, y, color='red')\n    plt.plot(X, [estimate(e) for e in X], color='blue')\n    plt.show()","7642b1ea":"b0, b1 = equation_coeffs(X, y)","25969c0f":"plot(equation(), r_squared())","ec61c133":"### Standard Deviation:\n$$\\sigma=\\sqrt{\\frac{\\sum{(x-\\bar{x})}}{n-1}}$$","e05162e9":"### Correlation Coefficient:\n$$r=\\frac{n(\\sum{xy})-(\\sum{x})(\\sum{y})}{\\sqrt{[n(\\sum{x^{2}})-(\\sum{x})^{2}][n(\\sum{y^{2}})-(\\sum{y})^{2}]}}$$","0084eb0b":"### R-Squared\n$$R^2=1-\\frac{\\sum{(y_i-\\hat{y_i})^2}}{\\sum{(y_i-\\bar y)^2}}$$","3062b425":"Our final equation should be in the form $\\hat{y}=b_{0}+b_{1}x$ where $b_0=\\hat{\\beta_0}$ and $b_1=\\hat{\\beta_1}$","42378b80":"### Slope:\n$$b_{1}=r\\frac{\\sigma _{y}}{\\sigma _{x}}\\text{, where }b_1=\\hat{\\beta_1}$$","9f438672":"### Y-Intercept:\n$$b_{0}=\\bar{y}-b_{1}\\bar{x}\\text{, where }b_0=\\hat{\\beta_0}$$"}}