{"cell_type":{"1f9ca31f":"code","d4244380":"code","499ae687":"code","6ded4ef0":"code","79933cff":"code","803b18d6":"code","f7ef1ea0":"code","f95fddcd":"code","d7d1fae9":"code","364d8ab7":"code","13b33063":"code","89b4a9b7":"code","06fb9d45":"code","9e5d384c":"code","9f95beb9":"code","be6f35e6":"code","ffc4b823":"code","dbd75fd2":"code","391c21fc":"code","f34d7c45":"code","b1b77c97":"code","33501675":"code","ad1c723e":"code","66c13512":"code","564f4846":"code","08ba5836":"code","7b5f7346":"code","19a05e55":"code","bd30ab9f":"code","2c34c803":"code","39f478ab":"code","61d023eb":"code","1a7e282e":"code","5f005622":"code","399f19a1":"code","632f8a8b":"code","3455e834":"code","13417174":"code","011666bf":"code","c741d2e0":"code","467c5722":"code","ec279eec":"code","4bbdfe6a":"code","52eeb61b":"code","2b70e2e2":"code","aea39e39":"code","d2a44489":"code","c89e45d8":"code","abf55ec5":"code","d723091c":"code","332cc5f2":"code","266ed493":"code","6b4208f3":"code","07018f73":"code","7150632a":"code","9fd3feac":"code","0dc08c73":"code","215d3a37":"code","68664d83":"code","6014f5b4":"code","8e5a5565":"code","9e173c7e":"code","7e626a31":"code","310c8ebf":"code","6c77df9c":"code","7485d207":"code","470a6f9b":"markdown","e9d572e4":"markdown","70990a29":"markdown","d9960620":"markdown","581d7edd":"markdown","a9195f5e":"markdown","3d700ad0":"markdown","60aaafd2":"markdown","c6effc06":"markdown","6424b164":"markdown","e7f185ad":"markdown","76dbe668":"markdown","bbe7f9f1":"markdown","020931d1":"markdown","bdbdf121":"markdown","5a13e5be":"markdown","16c90fd1":"markdown","2157513c":"markdown","669c2c31":"markdown","a4dceea5":"markdown","fc1d22a1":"markdown","c4839c70":"markdown","21e05569":"markdown","4f34c991":"markdown","d3b71379":"markdown","b7cf9d39":"markdown"},"source":{"1f9ca31f":"import numpy as np  ","d4244380":"a = np.array([0,1,2,3,4])","499ae687":"print(f'Numpy Array a \\n{a}')\nprint(f'Type of Numpy Array a {type(a)}')\nprint(f'Elements Type of Numpy Array a {a.dtype}')\nprint(f'Size of Numpy Array a {a.size}')\nprint(f'Dimensions of Numpy Array a {a.ndim}')\nprint(f'Shape of Numpy Array a {a.shape}')","6ded4ef0":"a[0]","79933cff":"for index,element in enumerate(a):\n    print(f'index {index} element {element}')","803b18d6":"b=np.array([3.1,11.02,6.2,231.2,5.2])","f7ef1ea0":"print(f'Numpy Array b {b}')\nprint(f'Type of Numpy Array b {type(b)}')\nprint(f'Elements Type of Numpy Array b {b.dtype}')\nprint(f'Size of Numpy Array b {b.size}')\nprint(f'Dimensions of Numpy Array b {b.ndim}')\nprint(f'Shape of Numpy Array b {b.shape}')","f95fddcd":"for index,element in enumerate(b):\n    print(f'index {index} element {element}')","d7d1fae9":"c=np.array([20,1,2,3,4])\nc","364d8ab7":"c[0]=100\nc","13b33063":"c[4]=0\nc","89b4a9b7":"d = c[1:4]\nd","06fb9d45":"d.size","9e5d384c":"c[3:5]=300,400\nc","9f95beb9":"u = np.array([1,0])\nu","be6f35e6":"v = np.array([0,1])\nv","ffc4b823":"z = u + v\nz","dbd75fd2":"type(z)","391c21fc":"z = u-v\nz","f34d7c45":"y = np.array([1,2])\ny","b1b77c97":"z = 2*y\nz","33501675":"u = np.array([1,2])\nu","ad1c723e":"v = np.array([3,1])\nv             ","66c13512":"z = u*v\nz","564f4846":"u.T","08ba5836":"z= np.dot(u,v)\nz","7b5f7346":"z = u@v\nz","19a05e55":"u = np.array([1,2,3,-1])\nu","bd30ab9f":"z = u + 1\nz","2c34c803":"a = np.array([1,-1,1,-1])\na","39f478ab":"mean_a = a.mean()\nmean_a","61d023eb":"b = np.array([1,-2,3,4,5])\nb","1a7e282e":"max_b = b.max()\nmax_b","5f005622":"np.pi","399f19a1":"x = np.array([0,np.pi\/2,np.pi])\nx","632f8a8b":"y = np.sin(x)\ny","3455e834":"np.linspace(-2,2,num=5)","13417174":"np.linspace(-2,2,num=9)","011666bf":"x = np.linspace(0,2*np.pi,100)\nx","c741d2e0":"y = np.sin(x)\ny","467c5722":"import matplotlib.pyplot as plt","ec279eec":"%matplotlib inline","4bbdfe6a":"plt.plot(x,y);","52eeb61b":"A = np.array([[11,12,13],\n             [21,22,23],\n             [31,32,33]])\nprint(f'Numpy Array A \\n{A}')\nprint(f'Type of Numpy Array A {type(A)}')\nprint(f'Elements Type of Numpy Array A {A.dtype}')\nprint(f'Size of Numpy Array A {A.size}')\nprint(f'Dimensions of Numpy Array A {A.ndim}')\nprint(f'Shape of Numpy Array A {A.shape}')","2b70e2e2":"A[0]","aea39e39":"A[0][0]","d2a44489":"A[1][2]","c89e45d8":"A[0,0:2]","abf55ec5":"A[1,:]","d723091c":"A[:,2]","332cc5f2":"A[0:2,2]","266ed493":"X = np.array([[1,0],\n              [0,1]])\nX","6b4208f3":"Y = np.array([[2,1],\n              [1,2]])\nY","07018f73":"Z = X + Y\nZ","7150632a":"Z = 2*Y\nZ","9fd3feac":"Z = X * Y\nZ","0dc08c73":"Z = X@Y\nZ","215d3a37":"A = np.array([[0,1,1],\n              [1,0,1]])\nA","68664d83":"B = np.array([[1,1],\n              [1,1],\n              [-1,1]])\nB","6014f5b4":"C = A@B\nC","8e5a5565":"# Plotting functions Plotvec1,Plotvec2\n\ndef Plotvec1(u, z, v):\n    \n    ax = plt.axes()\n    ax.arrow(0, 0, *u, head_width=0.05, color='r', head_length=0.1)\n    plt.text(*(u + 0.1), 'u')\n    \n    ax.arrow(0, 0, *v, head_width=0.05, color='b', head_length=0.1)\n    plt.text(*(v + 0.1), 'v')\n    ax.arrow(0, 0, *z, head_width=0.05, head_length=0.1)\n    plt.text(*(z + 0.1), 'z')\n    plt.ylim(-2, 2)\n    plt.xlim(-2, 2)\n\ndef Plotvec2(a,b):\n    ax = plt.axes()\n    ax.arrow(0, 0, *a, head_width=0.05, color ='r', head_length=0.1)\n    plt.text(*(a + 0.1), 'a')\n    ax.arrow(0, 0, *b, head_width=0.05, color ='b', head_length=0.1)\n    plt.text(*(b + 0.1), 'b')\n    plt.ylim(-2, 2)\n    plt.xlim(-2, 2)","9e173c7e":"u = np.array([1, 0])\nv = np.array([0, 1])\nz = u + v","7e626a31":"Plotvec1(u, z, v)\nprint(f\"The dot product u@z is {u@z}\")","310c8ebf":"a,b = np.array([-1,1]),np.array([1,1])\nPlotvec2(a,b)\nprint(f\"The dot product a@b is {a@b}\")","6c77df9c":"a,b = np.array([1,0]),np.array([0,1])\nPlotvec2(a,b)\nprint(f\"The dot product a@b is {a@b}\")","7485d207":"# The vectors are perpendicular. \n# As a result, the dot product is zero. ","470a6f9b":"### Dot Product","e9d572e4":"## Addition","70990a29":"## Slice","d9960620":"## Dot Matrix Multiplication","581d7edd":"## Create 2D Numpy Array","a9195f5e":"### Indexing","3d700ad0":"# Plotting functions","60aaafd2":"### Adding Constant to an Numpy Array","c6effc06":"## 1D Numpy Array","6424b164":"# Matrix Multiplication","e7f185ad":"### Slicing","76dbe668":"## Manipulate Array","bbe7f9f1":"## Vector Addition & Subtraction","020931d1":"## Plotting ","bdbdf121":"# 05 Arrays","5a13e5be":"## Indexing","16c90fd1":"## Product of two Numpy arrays","2157513c":"## Universal Functions","669c2c31":"# 2D Numpy Array","a4dceea5":"- Creating and Manipulating 1D & 2D Arrays\n- Array Operations","fc1d22a1":"## Hadamard Matrix Multiplication","c4839c70":"## Create array","21e05569":"## Broadcasting","4f34c991":"## Array Operations","d3b71379":"### Hadamard Product","b7cf9d39":"## Array multiplication with a Scalar"}}