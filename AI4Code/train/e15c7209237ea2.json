{"cell_type":{"d89307f4":"code","c8a633fe":"code","5786a6a7":"code","fc6bef31":"code","309f2a92":"code","c61cb6aa":"code","64a9a7e4":"code","96411129":"code","fc1800c1":"code","33107acc":"code","be7a9e0e":"code","64516a88":"code","6ad19d35":"code","2caa43c6":"code","1c59e151":"code","e10ad8d6":"code","55d5dfac":"code","1362700c":"code","d01cf00c":"code","ccf9b86a":"code","3937d1ad":"code","68fa0650":"code","99ebadf3":"code","6333b903":"code","169f190b":"code","d88b20b9":"code","b758e641":"code","0c363207":"code","c4693273":"code","9e31cc96":"code","4a0266de":"code","490000ba":"code","02f84b91":"code","f0a1d377":"markdown","950f0b3c":"markdown","374d420b":"markdown","bb5cb7bd":"markdown","50664563":"markdown","9b79ca92":"markdown","816c115a":"markdown","3dcaa16b":"markdown","f34c1118":"markdown","d6830f7b":"markdown","f171c5f6":"markdown"},"source":{"d89307f4":"#Import Libs\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom statistics import stdev\nimport warnings\nwarnings.filterwarnings('ignore')","c8a633fe":"#Read Data\ndata = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndata.head()","5786a6a7":"data.tail()","fc6bef31":"data.isnull().any()","309f2a92":"data.duplicated().any()","c61cb6aa":"data.info()","64a9a7e4":"dataClean = data.copy()","96411129":"#Remove Outliers Function\ndef RemoveOutliers(df):\n    std = stdev(df)*3\n    mean = df.mean()\n    limitL = mean - std\n    limitR = mean + std\n    outliers = dataClean.loc[(df > limitR) | (df < limitL)]\n    dataClean.drop(outliers.index, inplace=True)\n    return dataClean","fc1800c1":"dataClean.hist(figsize=(15,12))\nplt.show()","33107acc":"plt.figure(figsize=(12,6))\nplt.title(\"Distribution of Pregnancies\", fontsize=20)\nsns.distplot(RemoveOutliers(dataClean.Pregnancies).Pregnancies)\nplt.show()","be7a9e0e":"plt.figure(figsize=(12,7))\nplt.title(\"No. of Pregnancies\", fontsize=20)\nax = sns.countplot(data=dataClean, x=\"Pregnancies\", palette=\"hls\")\nfor bar in ax.patches:\n    bar_value = bar.get_height()\n    text = f'{bar_value:,}'\n    text_x = bar.get_x() + bar.get_width() \/ 2\n    text_y = bar.get_y() + bar_value\n    bar_color = bar.get_facecolor()\n    ax.text(text_x, text_y, text, ha='center', va='bottom', color=bar_color,size=12)","64516a88":"plt.figure(figsize=(12,6))\nplt.title(\"Distribution of Glucose\", fontsize=20)\nsns.distplot(RemoveOutliers(dataClean.Glucose).Glucose)\nplt.show()","6ad19d35":"plt.figure(figsize=(12,6))\nplt.title(\"Distribution of BloodPressure\", fontsize=20)\nsns.distplot(RemoveOutliers(dataClean.BloodPressure).BloodPressure)\nplt.show()","2caa43c6":"plt.figure(figsize=(12,6))\nplt.title(\"Distribution of SkinThickness\", fontsize=20)\nsns.distplot(dataClean.SkinThickness)\nplt.show()","1c59e151":"plt.figure(figsize=(12,6))\nplt.title(\"Distribution of Insulin\", fontsize=20)\nsns.distplot(dataClean.Insulin)\nplt.show()","e10ad8d6":"plt.figure(figsize=(12,6))\nplt.title(\"Distribution of Body Mass Index (BMI)\", fontsize=20)\nsns.distplot(RemoveOutliers(data.BMI).BMI)\nplt.show()","55d5dfac":"plt.figure(figsize=(12,6))\nplt.title(\"Distribution of DiabetesPedigreeFunction\", fontsize=20)\nsns.distplot(dataClean.DiabetesPedigreeFunction)\nplt.show()","1362700c":"plt.figure(figsize=(12,6))\nplt.title(\"Distribution of Age\", fontsize=20)\nsns.distplot(dataClean.Age)\nplt.show()","d01cf00c":"plt.figure(figsize=(12,7))\nplt.title(\"No. of Ages\", fontsize=20)\nax = sns.countplot(data=dataClean, x=\"Age\", palette=\"hls\")\nfor bar in ax.patches:\n    bar_value = bar.get_height()\n    text = f'{bar_value:,}'\n    text_x = bar.get_x() + bar.get_width() \/ 2\n    text_y = bar.get_y() + bar_value\n    bar_color = bar.get_facecolor()\n    ax.text(text_x, text_y, text, ha='center', va='bottom', color=bar_color,size=12)","ccf9b86a":"plt.figure(figsize=(12,7))\nplt.title(\"No. of Women has Diabetes or Not\", fontsize=20)\nax = sns.countplot(data=dataClean, x=\"Outcome\", palette=\"hls\")\nfor bar in ax.patches:\n    bar_value = bar.get_height()\n    text = f'{bar_value:,}'\n    text_x = bar.get_x() + bar.get_width() \/ 2\n    text_y = bar.get_y() + bar_value\n    bar_color = bar.get_facecolor()\n    ax.text(text_x, text_y, text, ha='center', va='bottom', color=bar_color,size=12)","3937d1ad":"plt.figure(figsize=(12,7))\nplt.title(\"Avg. Woman has Diabetes or Not with Pregnancy\", fontsize=20)\nax = sns.boxplot(x=\"Outcome\", y=\"Pregnancies\", data=dataClean, palette=\"hls\")","68fa0650":"plt.figure(figsize=(12,7))\nplt.title(\"Avg. Woman has Diabetes or Not with Ages\", fontsize=20)\nax = sns.boxplot(x=\"Outcome\", y=\"Age\", data=dataClean, palette=\"hls\")","99ebadf3":"corr = dataClean.corr()\nplt.figure(figsize=(12,7))\nmatrix = np.triu(corr)\nsns.heatmap(corr, annot= True, fmt=\".1g\", cmap= 'jet', linewidths=1, linecolor='black', mask=matrix)","6333b903":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier","169f190b":"features = dataClean.drop([\"Outcome\"],axis=1)\ntargets = dataClean.Outcome\nX_train, X_test, y_train, y_test = train_test_split(features, targets, test_size=0.2, random_state=42)\ny_train = y_train.values.reshape(-1,1)\ny_test = y_test.values.reshape(-1,1)","d88b20b9":"print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","b758e641":"#Result Dict\nres_dfTrain = {}\nres_dfTest = {}","0c363207":"GS = {\n    \"n_neighbors\": np.arange(1,20),\n    'weights': ['distance', 'uniform'],\n    'p':np.arange(1,5),\n    \"algorithm\": ['ball_tree', 'kd_tree', 'auto']\n}\n\nknn = KNeighborsClassifier()\nknn_GS = GridSearchCV(knn, GS, cv=5)\nknn_GS.fit(X_train, y_train)\n\nres_dfTrain[\"KNN Train Score\"] = knn_GS.best_score_\nres_dfTest[\"KNN Test Score\"] = knn_GS.score(X_test, y_test)\n\nprint(\"HP: \" + str(knn_GS.best_params_))\nprint(\"Train Score: \" + str(knn_GS.best_score_))\nprint(\"Test Score: \" + str(knn_GS.score(X_test, y_test)))","c4693273":"GS = {\n    \"criterion\": [\"gini\", \"entropy\"],\n    \"n_estimators\": np.arange(0,50)\n}\n\nrf = RandomForestClassifier()\nrf_GS = GridSearchCV(rf, GS, cv=5)\nrf_GS.fit(X_train, y_train)\n\nres_dfTrain[\"RF Train Score\"] = rf_GS.best_score_\nres_dfTest[\"RF Test Score\"] = rf_GS.score(X_test, y_test)\n\nprint(\"HP: \" + str(rf_GS.best_params_))\nprint(\"Train Score: \" + str(rf_GS.best_score_))\nprint(\"Test Score: \" + str(rf_GS.score(X_test, y_test)))","9e31cc96":"df_res_train = pd.DataFrame.from_dict(res_dfTrain, orient=\"index\", columns=[\"Score\"])\ndf_res_train.sort_values(by=[\"Score\"], ascending=False)","4a0266de":"plt.figure(figsize=(12,7))\nplt.title(\"Train Score Result\", fontsize=20)\nax = sns.barplot(x = df_res_train.index, y = df_res_train.Score)\nfor bar in ax.patches:\n    bar_value = bar.get_height()\n    text = f'{bar_value:,}'\n    text_x = bar.get_x() + bar.get_width() \/ 2\n    text_y = bar.get_y() + bar_value\n    bar_color = bar.get_facecolor()\n    ax.text(text_x, text_y, text, ha='center', va='bottom', color=bar_color,size=12)","490000ba":"df_res_test = pd.DataFrame.from_dict(res_dfTest, orient=\"index\", columns=[\"Score\"])\ndf_res_test.sort_values(by=[\"Score\"], ascending=False)","02f84b91":"plt.figure(figsize=(12,7))\nplt.title(\"Test Score Result\", fontsize=20)\nax = sns.barplot(x = df_res_test.index, y = df_res_test.Score)\nfor bar in ax.patches:\n    bar_value = bar.get_height()\n    text = f'{bar_value:,}'\n    text_x = bar.get_x() + bar.get_width() \/ 2\n    text_y = bar.get_y() + bar_value\n    bar_color = bar.get_facecolor()\n    ax.text(text_x, text_y, text, ha='center', va='bottom', color=bar_color,size=12)","f0a1d377":"> No Null Values","950f0b3c":"# **Splitting Data**","374d420b":"# **Data Visualization**","bb5cb7bd":"# **Models Visualization**","50664563":"# **Training Data**","9b79ca92":"# **RF Model With GridSearch**","816c115a":"> No Duplicated","3dcaa16b":"> Data was splitted to 20% Test Set and 80% Train Set","f34c1118":"# **Data Processing**","d6830f7b":"**The Best Model for This problem is Random Forest (RF)**","f171c5f6":"# **KNN Model With GridSearch**"}}