{"cell_type":{"4c61aec1":"code","3baf7367":"code","121c6e1f":"code","179b8341":"code","54101578":"code","d7284ee8":"code","3ba5a54d":"code","8801ce33":"code","7f17fbf8":"code","fb23ce14":"code","34e71d87":"code","9aa668f5":"code","94f40595":"code","117cfd95":"code","ed87a39f":"code","731c5985":"code","4bb0adf7":"code","0a98001c":"code","00681235":"code","4ffe5b44":"code","1b6f7615":"code","4719b60d":"code","660aaddc":"code","e171e5e6":"code","f5217acc":"code","5573c57d":"code","2b307dd2":"code","123953de":"code","a5cf9aa4":"code","bbc8fac1":"code","238d3929":"markdown","513e73f2":"markdown","aafe889a":"markdown","7d176d8b":"markdown","97b6b1af":"markdown","68b4b5c0":"markdown","7ac73405":"markdown","c7e2e6f4":"markdown","67315a90":"markdown","19f004f1":"markdown"},"source":{"4c61aec1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3baf7367":"df = pd.read_csv('..\/input\/child-marriage\/Child-marriage-database.csv', encoding='ISO-8859-2')\ndf.head()","121c6e1f":"print(f\"data shape: {df.shape}\")","179b8341":"df.describe()","54101578":"# categorical features\ncategorical_feat = [feature for feature in df.columns if df[feature].dtypes=='O']\nprint('Total categorical features: ', len(categorical_feat))\nprint('\\n',categorical_feat)","d7284ee8":"# categorical features with missing values\ncategorical_nan = [feature for feature in df.columns if df[feature].isna().sum()>1 and df[feature].dtypes=='O']\nprint(categorical_nan)","3ba5a54d":"df[categorical_nan].isna().sum()","8801ce33":"# replacing missing values in categorical features\nfor feature in categorical_nan:\n    df[feature] = df[feature].fillna('None')","7f17fbf8":"df[categorical_nan].isna().sum()","fb23ce14":"# Lets first handle numerical features with nan value\nnumerical_nan = [feature for feature in df.columns if df[feature].isna().sum()>1 and df[feature].dtypes!='O']\nnumerical_nan","34e71d87":"df[numerical_nan].isna().sum()","9aa668f5":"## Replacing the numerical Missing Values\n\nfor feature in numerical_nan:\n    ## We will replace by using median since there are outliers\n    median_value=df[feature].median()\n    \n    df[feature].fillna(median_value,inplace=True)\n    \ndf[numerical_nan].isnull().sum()","94f40595":"#fill in mean for floats\nfor c in df.columns:\n    if df[c].dtype=='float16' or  df[c].dtype=='float32' or  df[c].dtype=='float64':\n        df[c].fillna(df[c].mean())\n\n#fill in -999 for categoricals\ndf = df.fillna(-999)\n# Label Encoding\nfor f in df.columns:\n    if df[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[f].values))\n        df[f] = lbl.transform(list(df[f].values))\n        \nprint('Labelling done.')","117cfd95":"from sklearn.model_selection import train_test_split\n# Hot-Encode Categorical features\ndf = pd.get_dummies(df) \n\n# Splitting dataset back into X and test data\nX = df[:len(df)]\ntest = df[len(df):]\n\nX.shape","ed87a39f":"def plot_count(feature, title, df, size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set3')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()","731c5985":"plot_count(\"Female Married by 15\", \"Female Married by 15\", df,4)","4bb0adf7":"plot_count(\"Male Married by 18\", \"Male Married by 18\", df,4)","0a98001c":"import plotly.express as px\nfig = px.line(df, x=\"Reference year\", y=\"Female Married by 15\", color_discrete_sequence=['darksalmon'], \n              title=\"Female Married by 15 & Reference Year\")\nfig.show()","00681235":"import plotly.express as px\nfig = px.line(df, x=\"Male Reference year\", y=\"Male Married by 18\", color_discrete_sequence=['#2B3A67'], \n              title=\"Male Married by 18 & Reference Year\")\nfig.show()","4ffe5b44":"fig = px.scatter(df, x=\"Reference year\", y=\"Female Married by 15\",color_discrete_sequence=['crimson'], title=\"Female Married by 15 by Year Reference\" )\nfig.show()","1b6f7615":"import matplotlib.gridspec as gridspec\nfrom scipy.stats import skew\nfrom sklearn.preprocessing import RobustScaler,MinMaxScaler\nfrom scipy import stats\nimport matplotlib.style as style\nstyle.use('seaborn-colorblind')","4719b60d":"def plotting_3_chart(df, feature): \n    ## Creating a customized chart. and giving in figsize and everything. \n    fig = plt.figure(constrained_layout=True, figsize=(10,6))\n    ## crea,ting a grid of 3 cols and 3 rows. \n    grid = gridspec.GridSpec(ncols=3, nrows=3, figure=fig)\n    #gs = fig3.add_gridspec(3, 3)\n\n    ## Customizing the histogram grid. \n    ax1 = fig.add_subplot(grid[0, :2])\n    ## Set the title. \n    ax1.set_title('Histogram')\n    ## plot the histogram. \n    sns.distplot(df.loc[:,feature], norm_hist=True, ax = ax1)\n\n    # customizing the QQ_plot. \n    ax2 = fig.add_subplot(grid[1, :2])\n    ## Set the title. \n    ax2.set_title('QQ_plot')\n    ## Plotting the QQ_Plot. \n    stats.probplot(df.loc[:,feature], plot = ax2)\n\n    ## Customizing the Box Plot. \n    ax3 = fig.add_subplot(grid[:, 2])\n    ## Set title. \n    ax3.set_title('Box Plot')\n    ## Plotting the box plot. \n    sns.boxplot(df.loc[:,feature], orient='v', ax = ax3 );\n \n\nprint('Skewness: '+ str(df['Female Married by 15'].skew())) \nprint(\"Kurtosis: \" + str(df['Female Married by 15'].kurt()))\nplotting_3_chart(df, 'Female Married by 15')","660aaddc":"plt.style.use('fivethirtyeight')\ndf.plot(subplots=True, figsize=(4, 4), sharex=False, sharey=False)\nplt.show()","e171e5e6":"#Codes from Mario Filho https:\/\/www.kaggle.com\/mariofilho\/live26-https-youtu-be-zseefujo0zq\n\nfrom category_encoders import OneHotEncoder\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler\n\ncols_selected = ['Female Married by 15']\nohe = OneHotEncoder(cols=cols_selected, use_cat_names=True)\ndf_t = ohe.fit_transform(df[cols_selected+['Reference year']])\n\n#scaler = MaxAbsScaler()\nX = df_t.iloc[:,:-1]\ny = df_t.iloc[:, -1].fillna(df_t.iloc[:, -1].mean()) \/ df_t.iloc[:, -1].max()\n\nmdl = Ridge(alpha=0.1)\nmdl.fit(X,y)\n\npd.Series(mdl.coef_, index=X.columns).sort_values().head(10).plot.barh()","f5217acc":"ax = df['Female Married by 15'].value_counts().plot.barh(figsize=(10, 4))\nax.set_title('Female Married by 15 by Reference Year', size=18)\nax.set_ylabel('Female Married by 15', size=10)\nax.set_xlabel('count', size=10)","5573c57d":"fig=sns.lmplot(x='Reference year', y=\"Female Married by 15\",data=df)","2b307dd2":"ax = df.groupby('Reference year')['Female Married by 15', 'Female Married by 18'].sum().plot(kind='bar', rot=45, figsize=(12,6), logy=True,\n                                                                 title='Female Married by 15')\nplt.xlabel('Reference Year')\nplt.ylabel('Log')\n\nplt.show()","123953de":"ax = df.groupby('Reference year')['Female Married by 15', 'Female Married by 18'].sum().plot(kind='barh', figsize=(14,8),\n                                                                 title='Female Married by 15', logx=True, linewidth=3)\nplt.xlabel('Log')\nplt.ylabel('Year Reference')\nplt.show()","a5cf9aa4":"df = df.rename(columns={'Female Married by 15':'fmarried15', 'Female Married by 18': 'fmarried18', 'Male Married by 18': 'mMarried18'})","bbc8fac1":"# Distribution of different type of amount\nfig , ax = plt.subplots(1,2,figsize = (12,5))\n\nfmarried15 = df.fmarried15.values\nfmarried18= df.fmarried18.values\n#mMarried18 = df.mMarried18.values\n\nsns.distplot(fmarried15 , ax = ax[0] , color = 'pink').set_title('Female Married by 15' , fontsize = 14)\nsns.distplot(fmarried18 , ax = ax[1] , color = 'cyan').set_title('Female Married by 18' , fontsize = 14)\n#sns.distplot(mMarried18 , ax = ax[2] , color = 'purple').set_title('Male Married by 18' , fontsize = 14)\n\n\nplt.show()","238d3929":"#Male married by 18 KDE hasn't density to be plot. Therefore I commented the respective line.","513e73f2":"#Codes by Gabriel Preda","aafe889a":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcTIrHv1GwkYbQEGLqSWHcqcZXZ7gbEsDeOn3w&usqp=CAU)impdays.com","7d176d8b":"#Label Encoder","97b6b1af":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata   @mpwolke","68b4b5c0":"#Gender equality and empowerment of all women and girls\n\nAt the global level, child marriage is included in Goal 5 \u201cAchieve gender equality and empower all women and girls\u201d under\n\n#Eliminate all harmful practices as forced marriage and female genital mutilation.\n\nTarget 5.3 \u201cEliminate all harmful practices, such as child, early and forced marriage and female genital mutilation\u201d. In 2016, UNICEF and UNFPA joined forces through a Global Programme to Accelerate Action to End Child Marriage in 12 countries with the highest rates of child brides.https:\/\/www.unicef.org\/rosa\/what-we-do\/child-protection\/child-marriage","7ac73405":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcT55MrYuKw3hnVBxRS4GbZcl69GoEzMHbMH2A&usqp=CAU)http:\/\/www.concernedforworkingchildren.org\/empowering-children\/child-marriage\/","c7e2e6f4":"#Dealing with Numerical features(handling missing data)","67315a90":"#Dealing with Categorical features(handling missing data)","19f004f1":"#Child Marriage\n\nIt's defined as a marriage of a girl or boy before the age of 18 and refers to both formal marriages and informal unions in which children under the age of 18 live with a partner as if married. Child marriage affects both girls and boys, but it affects girls disproportionately, especially in South Asia.\n\nSouth Asia has the highest rates of child marriage in the world. Almost half (45%) of all women aged 20-24 years reported being married before the age of 18. Almost one in five girls (17%) are married before the age of 15.\n\nChild marriage violates children\u2019s rights and places them at high risk of violence, exploitation, and abuse.\n\nUNICEF\u2019s approach to ending child marriage in South Asia recognises the complex nature of the problem, and the socio-cultural and structural factors underpinning the practice. UNICEF\u2019s approach, therefore, envisions success in two timeframes. In the short term (5-10 years), UNICEF sees a critical mass of children, families, and communities changing their attitudes and behaviours; in the longer term (10-30 years), UNICEF sees aspirations for all children upheld by new social norms.https:\/\/www.unicef.org\/rosa\/what-we-do\/child-protection\/child-marriage"}}