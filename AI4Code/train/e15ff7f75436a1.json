{"cell_type":{"a7142ee2":"code","b56c0c14":"code","561f192c":"code","7036c15b":"code","84f31141":"code","29e8496d":"code","b9b1a4f2":"code","e06dfca4":"code","2c4051e8":"code","4c694c0d":"code","a10528ab":"code","84ffe8f8":"code","aa6bdc7f":"code","5540b099":"code","a0edd291":"code","9880e043":"code","d17aefce":"code","1cc94496":"code","46f3150a":"code","0ec6dce0":"code","2c933a49":"code","c9a7e4e3":"code","ceae1920":"code","60254698":"code","850c697d":"code","bab2a0fb":"code","4e8987de":"code","97aa7be8":"code","acdf40ef":"code","e6429ea5":"code","446b7b1a":"code","56de9831":"markdown","b963b221":"markdown","2f8ad19a":"markdown","e7eac34e":"markdown","74a231d2":"markdown","dfe2858b":"markdown","5d4d4a0f":"markdown","ac58a53b":"markdown","80ce149e":"markdown","e92a3add":"markdown","e9aaa47b":"markdown","ce67bf89":"markdown","1f9d9912":"markdown","1e42cbce":"markdown","b78ebb2b":"markdown","d32e71a7":"markdown","07272e94":"markdown","cf51e3dd":"markdown","13bf294e":"markdown","e746a739":"markdown","4e5fb60b":"markdown","aaf69734":"markdown"},"source":{"a7142ee2":"import pandas as pd","b56c0c14":"df_spotify = pd.read_csv('..\/input\/data.csv', sep=',')","561f192c":"df_spotify.drop('id', axis=1, inplace=True)\ndf_spotify.drop('song_title',axis=1, inplace=True)","7036c15b":"df_spotify.head()","84f31141":"from sklearn.preprocessing import LabelEncoder\nenc = LabelEncoder()\ninteiros = enc.fit_transform(df_spotify['artist'])\ndf_spotify['artistas_inteiros'] = inteiros\ndf_spotify.drop('artist', axis=1, inplace=True)","29e8496d":"df_spotify.columns","b9b1a4f2":"features = ['acousticness', 'danceability', 'duration_ms', 'energy',\n       'instrumentalness', 'key', 'liveness', 'loudness', 'mode',\n       'speechiness', 'tempo', 'time_signature', 'valence',\n       'artistas_inteiros']\nclasses = ['target']","e06dfca4":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(df_spotify[features], df_spotify[classes], test_size=0.20)\n","2c4051e8":"df_spotify[classes].head()","4c694c0d":"## from sklearn.model_selection import train_test_split\n## X_train, X_test, y_train, y_test = train_test_split(df_spotify, classes)\nfrom sklearn.svm import SVC","a10528ab":"classificador_svm = SVC()","84ffe8f8":"classificador_svm.fit(X_train,y_train)","aa6bdc7f":"y_pred = (classificador_svm.predict(X_test)).reshape(-1,1)\ny_test.shape, y_pred.shape","5540b099":"print(classificador_svm.score(X_test,y_test))","a0edd291":"from sklearn.model_selection import cross_val_predict","9880e043":"resultados = cross_val_predict(classificador_svm, df_spotify[features], df_spotify[classes], cv=10)","d17aefce":"from sklearn import metrics","1cc94496":"print (metrics.accuracy_score(y_test, y_pred))","46f3150a":"# Importe as bibliotecas de Pipelines e Pr\u00e9-processadores\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler","0ec6dce0":"# Criando Pipeline\n\nMD_01 = Pipeline([\n    ('scaler', StandardScaler()),\n    ('classificador', SVC(kernel=\"rbf\", C=100, gamma=0.01))\n])","2c933a49":"def Acuracia(clf,X,y):\n    y_pred = cross_val_predict(clf, X, y, cv=5)\n    return metrics.accuracy_score(y,y_pred)","c9a7e4e3":"# Teste o modelo usando o pipeline(criado anteriormente)\nAcuracia(MD_01,df_spotify[features],df_spotify[classes])","ceae1920":"MD_02 = Pipeline([\n    ('scaler', StandardScaler()),\n    ('classificador', SVC(kernel=\"rbf\", C=100, gamma=0.01))\n])\n\nMD_03 = Pipeline([\n    ('scaler', StandardScaler()),\n    ('classificador', SVC(kernel=\"linear\", C=100, gamma=0.01))\n])\n\nMD_04 = Pipeline([\n    ('scaler', StandardScaler()),\n    ('classificador', SVC(kernel=\"poly\", C=100, gamma=0.01))\n])\n\nMD_05 = Pipeline([\n    ('scaler', StandardScaler()),\n    ('classificador', SVC(kernel=\"rbf\", C=100, gamma=0.1))\n])\n\nMD_06 = Pipeline([\n    ('scaler', StandardScaler()),\n    ('classificador', SVC(kernel=\"linear\", C=100, gamma=0.1))\n])\n\nMD_07 = Pipeline([\n    ('scaler', StandardScaler()),\n    ('classificador', SVC(kernel=\"poly\", C=100, gamma=0.1))\n])","60254698":"def Acuracia(clf,X,y):\n    y_pred = cross_val_predict(clf, X, y, cv=5)\n    return print(\"Acur\u00e1cia para a Pipeline  \u00e9 de \", round(metrics.accuracy_score(y,y_pred), 2)*100,\"%.\")","850c697d":"Acuracia(MD_01,df_spotify[features],df_spotify[classes])\n","bab2a0fb":"Acuracia(MD_02,df_spotify[features],df_spotify[classes])\n","4e8987de":"Acuracia(MD_03,df_spotify[features],df_spotify[classes])\n","97aa7be8":"Acuracia(MD_04,df_spotify[features],df_spotify[classes])\n","acdf40ef":"Acuracia(MD_05,df_spotify[features],df_spotify[classes])\n","e6429ea5":"Acuracia(MD_06,df_spotify[features],df_spotify[classes])\n","446b7b1a":"Acuracia(MD_07,df_spotify[features],df_spotify[classes])\n","56de9831":"Explica\u00e7\u00e3o: A valida\u00e7\u00e3o cruzada serve para dividir o dataset em mais partes, assim nosso modelo ter\u00e1 mais oportunidades de treinar e testar os dados, podendo assim extrair melhor a rela\u00e7\u00e3o entre os dados. Por\u00e9m, h\u00e1 um trade-off com a a quantidade de folds. N\u00e3o pode ser muito elevado, pois aumentar\u00e1 a vari\u00e3ncia entre os dados, nem muito pequeno, que ter\u00e1 mais vi\u00e9s.","b963b221":"2) Leia o arquivo de dados usando o pandas e defina o nome do dataframe como **df_spotify**","2f8ad19a":"9) Treine seu algoritmo e gere um Modelo, explique de forma simples o que \u00e9 um **modelo**","e7eac34e":"11) Execute uma **Valida\u00e7\u00e3o Cruzada** com 10 folds para validar seu modelo e explique de forma resumida porque a valida\u00e7\u00e3o cruzada \u00e9 importante.","74a231d2":"15) Crie outros pipelines e refa\u00e7a todos os passos anteriores para validar outros modelos como:\n    * Kernel linear\n    * Kernel poly\n    * Kernel Rbf (outros valores de C e gamma)","dfe2858b":"# Data Science do Zero","5d4d4a0f":"Explica\u00e7\u00e3o: ","ac58a53b":"7) Separe os dados para validar o algoritmo Already done","80ce149e":"12) Imprima a acur\u00e1cia do modelo apos a valida\u00e7\u00e3o cruzada","e92a3add":"8) Instancia um objeto chamado **classificador_svm**","e9aaa47b":"# Exerc\u00edcios de Machine Learning - SVM","ce67bf89":"Ficou com alguma d\u00favida?\n\nEnvie um e-mail para ** *contato@minerandodados.com.br* ** ou comente na \u00e1rea de membros.","1f9d9912":"10) Valide seu modelo imprimindo o valor de acur\u00e1cia:","1e42cbce":"1) Explique o que \u00e9 conjuntos de **treino** e conjuntos de **teste** e porque esses conjuntos recebem esse nome.","b78ebb2b":"Resposta: Datasets de treino \u00e9 uma parte dos dados em que o algoritmo de Machine Learning tentar\u00e1 extrair rela\u00e7\u00e3o entre os dados baseados nas features e targets que se tem. No de teste, a l\u00f3gica subjacente dos dados que o algoritmo treinou \u00e9 posta em teste para saber se o algoritmo tamb\u00e9m performa t\u00e3o bem no treino quanto no teste.","d32e71a7":"13) Crie um pipeline chamado **MD_01** com as seguintes configura\u00e7\u00f5es:\n\n    a) Standardscaler como a primeira etapa.\n    b) Classificador SVM com Kernel RBF,  C=100 , gamma= 0.01.\n\nEdite as c\u00e9lulas abaixo.","07272e94":"5) Explique o que corresponde cada **vari\u00e1vel** abaixo apos execu\u00e7\u00e3o do seguinte comando: \n    \nX_train, X_test, y_train, y_test = train_test_split(df_spotify, classes)\n    \nX_train = Var\u00edavel para treino\n\nX_test = Vari\u00e1vel de teste\n\ny_train = Target durante o treino\n\ny_test = Target para conferir com as predi\u00e7\u00f5es a partir dos valores de X_test","cf51e3dd":"6) Crie uma vari\u00e1vel chamada **classes** e atribua os dados da coluna **target**. Em seguida remova a coluna target de forma definitiva do dataframe em mem\u00f3ria.","13bf294e":"## Complete os c\u00f3digos abaixo","e746a739":"3) Remova as colunas 'id' e 'song_title' de forma que altera\u00e7\u00e3o modifique o dataframe em **mem\u00f3ria**","4e5fb60b":"14) Teste o desempenho do seu modelo (pipeline) com a fun\u00e7\u00e3o acur\u00e1cia","aaf69734":"4) Aplique o Label Encoder nos dados:"}}