{"cell_type":{"7e29156e":"code","c565d09c":"code","5ad55879":"code","56cce9b6":"code","8d772b43":"code","aab00ece":"code","4de63f42":"code","bd2c8536":"code","d4148ebe":"code","9c2a49eb":"code","0708087c":"code","63ffbf71":"code","fcfdaf6a":"code","12e27d3a":"code","db421576":"code","6874c0b2":"code","5af844a1":"code","7672affa":"code","967233aa":"code","6ed67bbd":"code","49092907":"code","e68219cc":"code","56358b51":"code","a5037272":"code","78a8d55d":"code","a40e0f57":"code","e64d198b":"code","d4ba0e76":"code","f78992b9":"code","1fa58ce8":"code","25835cb3":"code","95d5b7a7":"code","c820b334":"code","10f5d8ad":"code","10de7570":"code","54ea3c6c":"code","2f345f0d":"code","69ef8c4c":"code","3d0e610c":"code","94a53e41":"code","de1f917b":"code","74149d1d":"code","8e55365e":"code","7c88a8fa":"code","8ba8ce07":"code","dac5d3bb":"code","966c7250":"code","f5646947":"code","f6c97a45":"code","ddbb0321":"code","379b4a4d":"code","436dc39e":"code","93bdaeec":"code","c3f33cbf":"code","19684990":"code","7dd6388e":"code","ca2ddeb7":"code","298ed8b2":"code","021fd1df":"code","8bb62dcc":"code","e53a4b34":"code","7241630e":"code","227778be":"code","e11e4b3e":"code","144f2187":"code","b7659b89":"code","a5348b1d":"code","b938484a":"code","40cac87f":"code","d819bd1a":"code","e0cf560c":"code","e83e1a66":"code","e0714875":"markdown","df1ca272":"markdown","349712d0":"markdown","a9b59acc":"markdown","e7ad85fe":"markdown","9dc1e011":"markdown","f6243bd6":"markdown","1f23b292":"markdown","1d243d26":"markdown","b458e36b":"markdown","5021467c":"markdown","600e8c4f":"markdown","bea27df9":"markdown","d904f296":"markdown","dfebc012":"markdown","78d6b975":"markdown","372d8f80":"markdown","36253edd":"markdown","2d581152":"markdown","a768fbe5":"markdown","6c2191fa":"markdown","3023d194":"markdown","9a910b5b":"markdown","fbef55ce":"markdown","c17da757":"markdown","94c4d6a9":"markdown","d569b806":"markdown","0340dd61":"markdown","9fcd15f3":"markdown","6093535e":"markdown","f7c692a8":"markdown","ba92d47a":"markdown","f615a8fd":"markdown","9eff923f":"markdown","1a7aafbd":"markdown","ad2513dc":"markdown","e6d069e8":"markdown","23e4b595":"markdown","10c2cf4a":"markdown","479dbfa4":"markdown","62461006":"markdown","8a6a944c":"markdown","41b2da70":"markdown","7a516f6f":"markdown","73273679":"markdown","16f2fa2f":"markdown","f25ba650":"markdown","4ad2108e":"markdown","49eb061a":"markdown","56243289":"markdown","e6552c43":"markdown","a71fb93f":"markdown","b79214e5":"markdown","6b88d784":"markdown","74d0ef2a":"markdown","b730ee10":"markdown","f841b6ed":"markdown","c1979330":"markdown","334d0aa9":"markdown","d5f2151c":"markdown","0a28e39f":"markdown","ad186066":"markdown","43925cc7":"markdown","384f7d0f":"markdown","b0979be9":"markdown","0bf2d24b":"markdown","fe007488":"markdown","72697a6e":"markdown","a64e8494":"markdown","9e502a28":"markdown","09ca9020":"markdown","9b21e575":"markdown","7c22b15a":"markdown","f347d407":"markdown","826bc08b":"markdown","e45eb801":"markdown","a2b6f2d7":"markdown","7a42f898":"markdown","dc2270c0":"markdown","5f26fd96":"markdown","6e8e44b6":"markdown","93234768":"markdown","41b639e8":"markdown","83dd4cbb":"markdown","e858afa6":"markdown","22887f91":"markdown","f5383d89":"markdown","54432692":"markdown","c42267f9":"markdown","3bb41484":"markdown","960f9b50":"markdown","8102366f":"markdown","6c7bbf16":"markdown","c8660a7a":"markdown","dc9a6e73":"markdown","0a72b0dd":"markdown","8a0ab686":"markdown","c4107bd6":"markdown"},"source":{"7e29156e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor \nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor, BaggingClassifier,AdaBoostClassifier,GradientBoostingClassifier\nfrom sklearn.linear_model import LinearRegression,LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import metrics\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import RFE\nfrom collections import Counter\nfrom imblearn.over_sampling import SMOTE\nimport warnings\nwarnings.filterwarnings('ignore')","c565d09c":"df=pd.read_csv(\"..\/input\/cervical-cancer-risk-classification\/kag_risk_factors_cervical_cancer.csv\")\n\npd.set_option('display.max_columns', 40)","5ad55879":"df.head(20)","56cce9b6":"df.columns","8d772b43":"df.columns=['Age', 'No_of_sex_partner', 'First_sexual_intercourse',\\\n                          'No_pregnancies','Smokes',  'Smokes_yrs',  'Smokes_packs_yr',  'Hormonal_Contraceptives',\\\n                          'Hormonal_Contraceptives_years','IUD', 'IUD_years', 'STDs', 'STDs_number', 'STDs_condylomatosis',\\\n                          'STDs_cervical_condylomatosis', 'STDs_vaginal_condylomatosis', 'STDs_vulvo_perineal_condylomatosis',\\\n                          'STDs_syphilis', 'STDs_pelvic_inflammatory_disease', 'STDs_genital_herpes', 'STDs_molluscum_contagiosum',\\\n                          'STDs_AIDS', 'STDs_HIV', 'STDs_Hepatitis_B', 'STDs_HPV', 'STDs_No_of_diagnosis', 'STD_Time_since_first_diagnosis',\\\n                          'STDs_Time_since_last_diagnosis', 'Dx_Cancer', 'Dx_CIN', 'Dx_HPV', 'Dx', 'Hinselmann','Schiller' ,'Citology', 'Biopsy']","aab00ece":"df.info()","4de63f42":"df.shape","bd2c8536":"## replace ? with NaN\ndf = df.replace('?', np.NaN)","d4148ebe":"plt.figure(figsize=(10,10))\nnp.round(df.isnull().sum()\/df.shape[0]*100).sort_values().plot(kind='barh')","9c2a49eb":"df=df.drop(['STD_Time_since_first_diagnosis','STDs_Time_since_last_diagnosis'],axis=1)\ndf=df.drop(df.index[df.Smokes.isnull()] | df.index[df.First_sexual_intercourse.isnull()])","0708087c":"x_features=list(df.columns)\nx_features.remove('Biopsy')","63ffbf71":"x_features_categorical=[\n 'Smokes','Hormonal_Contraceptives','IUD','STDs','STDs_condylomatosis','STDs_cervical_condylomatosis','STDs_vaginal_condylomatosis','STDs_vulvo_perineal_condylomatosis','STDs_syphilis','STDs_pelvic_inflammatory_disease','STDs_genital_herpes','STDs_molluscum_contagiosum','STDs_AIDS','STDs_HIV','STDs_Hepatitis_B','STDs_HPV','Dx_Cancer','Dx_CIN','Dx_HPV','Dx']\nx_features_categorical","fcfdaf6a":"x_features_numerical=[i for i in x_features if i not in x_features_categorical]\nx_features_numerical","12e27d3a":"df_iud=df.copy()\n\nx_features_categorical.remove('IUD')\nfor i in x_features_categorical:\n    df_iud[i]=df_iud[i].fillna(df_iud[i].mode()[0])\nfor i in x_features_numerical:\n    df_iud[i]=df_iud[i].fillna(df_iud[i].median())\n    \ndf_iud=df_iud.astype('float')\ndf_iud[x_features_categorical]=df_iud[x_features_categorical].replace(0,'no')\ndf_iud[x_features_categorical]=df_iud[x_features_categorical].replace(1,'yes')\ndf_iud=pd.get_dummies(df_iud)\n\ntrain_iud=df_iud[df_iud.IUD.isnull()==False]\ntest_iud=df_iud[df_iud.IUD.isnull()]\n\ntrain_iud_x=train_iud.drop('IUD',axis=1)\ntrain_iud_y=train_iud['IUD']\n\ntest_iud_x=test_iud.drop('IUD',axis=1)\ntest_iud_y=test_iud['IUD']\n\ndt=DecisionTreeClassifier()\niud_model=dt.fit(train_iud_x,train_iud_y)\ntest_iud['IUD']=iud_model.predict(test_iud_x)\n\niud_complete=pd.concat([train_iud,test_iud],axis=0)\n\ndf_impute=df.copy()\ndf_impute['IUD']=iud_complete['IUD'].sort_index()","db421576":"x_features_numerical.remove('IUD_years')\ndf_impute['IUD_years']=df_impute['IUD_years'].fillna(0)","6874c0b2":"df_hor=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_categorical.remove('Hormonal_Contraceptives')\nfor i in x_features_categorical:\n    df_hor[i]=df_hor[i].fillna(df_hor[i].mode()[0])\nfor i in x_features_numerical:\n    df_hor[i]=df_hor[i].fillna(df_hor[i].median())\n    \ndf_hor=df_hor.astype('float')\ndf_hor[x_features_categorical]=df_hor[x_features_categorical].replace(0,'no')\ndf_hor[x_features_categorical]=df_hor[x_features_categorical].replace(1,'yes')\ndf_hor=pd.get_dummies(df_hor)\n\ntrain_hor=df_hor[df_hor.Hormonal_Contraceptives.isnull()==False]\ntest_hor=df_hor[df_hor.Hormonal_Contraceptives.isnull()]\n\ntrain_hor_x=train_hor.drop('Hormonal_Contraceptives',axis=1)\ntrain_hor_y=train_hor['Hormonal_Contraceptives']\n\ntest_hor_x=test_hor.drop('Hormonal_Contraceptives',axis=1)\ntest_hor_y=test_hor['Hormonal_Contraceptives']\n\ndt=DecisionTreeClassifier()\nhor_model=dt.fit(train_hor_x,train_hor_y)\ntest_hor['Hormonal_Contraceptives']=hor_model.predict(test_hor_x)\n\nhor_complete=pd.concat([train_hor,test_hor],axis=0)\n\ndf_impute['Hormonal_Contraceptives']=hor_complete['Hormonal_Contraceptives'].sort_index()","5af844a1":"df_hor_y=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_numerical.remove('Hormonal_Contraceptives_years')\nfor i in x_features_categorical:\n    df_hor_y[i]=df_hor_y[i].fillna(df_hor_y[i].mode()[0])\n\nfor i in x_features_numerical:\n    df_hor_y[i]=df_hor_y[i].fillna(df_hor_y[i].median())\n\ndf_hor_y=df_hor_y.astype('float')\ndf_hor_y[x_features_categorical]=df_hor_y[x_features_categorical].replace(0,'no')\ndf_hor_y[x_features_categorical]=df_hor_y[x_features_categorical].replace(1,'yes')\ndf_hor_y=pd.get_dummies(df_hor_y)\n\ntrain_hor_yrs=df_hor_y[df_hor_y.Hormonal_Contraceptives_years.isnull()==False]\ntest_hor_yrs=df_hor_y[df_hor_y.Hormonal_Contraceptives_years.isnull()]\n\ntrain_hor_yrs_x=train_hor_yrs.drop('Hormonal_Contraceptives_years',axis=1)\ntrain_hor_yrs_y=train_hor_yrs['Hormonal_Contraceptives_years']\n\ntest_hor_yrs_x=test_hor_yrs.drop('Hormonal_Contraceptives_years',axis=1)\ntest_hor_yrs_y=test_hor_yrs['Hormonal_Contraceptives_years']\n\ndt=DecisionTreeRegressor()\nhor_yrs_model=dt.fit(train_hor_yrs_x,train_hor_yrs_y)\ntest_hor_yrs['Hormonal_Contraceptives_years']=hor_yrs_model.predict(test_hor_yrs_x)\n\nhor_yrs_complete=pd.concat([train_hor_yrs,test_hor_yrs],axis=0)\n\ndf_impute['Hormonal_Contraceptives_years']=hor_yrs_complete['Hormonal_Contraceptives_years'].sort_index()","7672affa":"df_std=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_categorical.remove('STDs')\nfor i in x_features_categorical:\n    df_std[i]=df_std[i].fillna(df_std[i].mode()[0])\nfor i in x_features_numerical:\n    df_std[i]=df_std[i].fillna(df_std[i].median())\n    \ndf_std=df_std.astype('float')\ndf_std[x_features_categorical]=df_std[x_features_categorical].replace(0,'no')\ndf_std[x_features_categorical]=df_std[x_features_categorical].replace(1,'yes')\ndf_std=pd.get_dummies(df_std)\n\ntrain_std=df_std[df_std.STDs.isnull()==False]\ntest_std=df_std[df_std.STDs.isnull()]\n\ntrain_std_x=train_std.drop('STDs',axis=1)\ntrain_std_y=train_std['STDs']\n\ntest_std_x=test_std.drop('STDs',axis=1)\ntest_std_y=test_std['STDs']\n\ndt=DecisionTreeClassifier()\nstd_model=dt.fit(train_std_x,train_std_y)\ntest_std['STDs']=std_model.predict(test_std_x)\n\nstd_complete=pd.concat([train_std,test_std],axis=0)\n\ndf_impute['STDs']=std_complete['STDs'].sort_index()","967233aa":"df_std_num=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_numerical.remove('STDs_number')\nfor i in x_features_categorical:\n    df_std_num[i]=df_std_num[i].fillna(df_std_num[i].mode()[0])\nfor i in x_features_numerical:\n    df_std_num[i]=df_std_num[i].fillna(df_std_num[i].median())\n\ndf_std_num=df_std_num.astype('float')\ndf_std_num[x_features_categorical]=df_std_num[x_features_categorical].replace(0,'no')\ndf_std_num[x_features_categorical]=df_std_num[x_features_categorical].replace(1,'yes')\ndf_std_num=pd.get_dummies(df_std_num)\n\ntrain_std_num=df_std_num[df_std_num.STDs_number.isnull()==False]\ntest_std_num=df_std_num[df_std_num.STDs_number.isnull()]\n\ntrain_std_num_x=train_std_num.drop('STDs_number',axis=1)\ntrain_std_num_y=train_std_num['STDs_number']\n\ntest_std_num_x=test_std_num.drop('STDs_number',axis=1)\ntest_std_num_y=test_std_num['STDs_number']\n\ndt=DecisionTreeRegressor()\nstd_model_num=dt.fit(train_std_num_x,train_std_num_y)\ntest_std_num['STDs_number']=std_model_num.predict(test_std_num_x)\n\nstd_num_complete=pd.concat([train_std_num,test_std_num],axis=0)\n\ndf_impute['STDs_number']=std_num_complete['STDs_number'].sort_index()","6ed67bbd":"df_std_con=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_categorical.remove('STDs_condylomatosis')\nfor i in x_features_categorical:\n    df_std_con[i]=df_std_con[i].fillna(df_std_con[i].mode()[0])\nfor i in x_features_numerical:\n    df_std_con[i]=df_std_con[i].fillna(df_std_con[i].median())\n\ndf_std_con=df_std_con.astype('float')\ndf_std_con[x_features_categorical]=df_std_con[x_features_categorical].replace(0,'no')\ndf_std_con[x_features_categorical]=df_std_con[x_features_categorical].replace(1,'yes')\ndf_std_con=pd.get_dummies(df_std_con)\n\ntrain_std_con=df_std_con[df_std_con.STDs_condylomatosis.isnull()==False]\ntest_std_con=df_std_con[df_std_con.STDs_condylomatosis.isnull()]\n\ntrain_std_con_x=train_std_con.drop('STDs_condylomatosis',axis=1)\ntrain_std_con_y=train_std_con['STDs_condylomatosis']\n\ntest_std_con_x=test_std_con.drop('STDs_condylomatosis',axis=1)\ntest_std_con_y=test_std_con['STDs_condylomatosis']\n\ndt=DecisionTreeClassifier()\nstd_model_con=dt.fit(train_std_con_x,train_std_con_y)\ntest_std_con['STDs_condylomatosis']=std_model_con.predict(test_std_con_x)\n\nstd_con_complete=pd.concat([train_std_con,test_std_con],axis=0)\n\ndf_impute['STDs_condylomatosis']=std_con_complete['STDs_condylomatosis'].sort_index()","49092907":"df_std_cerv=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_categorical.remove('STDs_cervical_condylomatosis')\nfor i in x_features_categorical:\n    df_std_cerv[i]=df_std_cerv[i].fillna(df_std_cerv[i].mode()[0])\nfor i in x_features_numerical:\n    df_std_cerv[i]=df_std_cerv[i].fillna(df_std_cerv[i].median())\n\ndf_std_cerv=df_std_cerv.astype('float')\ndf_std_cerv[x_features_categorical]=df_std_cerv[x_features_categorical].replace(0,'no')\ndf_std_cerv[x_features_categorical]=df_std_cerv[x_features_categorical].replace(1,'yes')\ndf_std_cerv=pd.get_dummies(df_std_cerv)\n\ntrain_std_cerv=df_std_cerv[df_std_cerv.STDs_cervical_condylomatosis.isnull()==False]\ntest_std_cerv=df_std_cerv[df_std_cerv.STDs_cervical_condylomatosis.isnull()]\n\ntrain_std_cerv_x=train_std_cerv.drop('STDs_cervical_condylomatosis',axis=1)\ntrain_std_cerv_y=train_std_cerv['STDs_cervical_condylomatosis']\n\ntest_std_cerv_x=test_std_cerv.drop('STDs_cervical_condylomatosis',axis=1)\ntest_std_cerv_y=test_std_cerv['STDs_cervical_condylomatosis']\n\ndt=DecisionTreeClassifier()\nstd_model_cerv=dt.fit(train_std_cerv_x,train_std_cerv_y)\ntest_std_cerv['STDs_cervical_condylomatosis']=std_model_cerv.predict(test_std_cerv_x)\n\nstd_cerv_complete=pd.concat([train_std_cerv,test_std_cerv],axis=0)\n\ndf_impute['STDs_cervical_condylomatosis']=std_cerv_complete['STDs_cervical_condylomatosis'].sort_index()","e68219cc":"df_std_vagi=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_categorical.remove('STDs_vaginal_condylomatosis')\nfor i in x_features_categorical:\n    df_std_vagi[i]=df_std_vagi[i].fillna(df_std_vagi[i].mode()[0])\nfor i in x_features_numerical:\n    df_std_vagi[i]=df_std_vagi[i].fillna(df_std_vagi[i].median())\n\ndf_std_vagi=df_std_vagi.astype('float')\ndf_std_vagi[x_features_categorical]=df_std_vagi[x_features_categorical].replace(0,'no')\ndf_std_vagi[x_features_categorical]=df_std_vagi[x_features_categorical].replace(1,'yes')\ndf_std_vagi=pd.get_dummies(df_std_vagi)\n\ntrain_std_vagi=df_std_vagi[df_std_vagi.STDs_vaginal_condylomatosis.isnull()==False]\ntest_std_vagi=df_std_vagi[df_std_vagi.STDs_vaginal_condylomatosis.isnull()]\n\ntrain_std_vagi_x=train_std_vagi.drop('STDs_vaginal_condylomatosis',axis=1)\ntrain_std_vagi_y=train_std_vagi['STDs_vaginal_condylomatosis']\n\ntest_std_vagi_x=test_std_vagi.drop('STDs_vaginal_condylomatosis',axis=1)\ntest_std_vagi_y=test_std_vagi['STDs_vaginal_condylomatosis']\n\ndt=DecisionTreeClassifier()\nstd_model_vagi=dt.fit(train_std_vagi_x,train_std_vagi_y)\ntest_std_vagi['STDs_vaginal_condylomatosis']=std_model_vagi.predict(test_std_vagi_x)\n\nstd_vagi_complete=pd.concat([train_std_vagi,test_std_vagi],axis=0)\n\ndf_impute['STDs_vaginal_condylomatosis']=std_vagi_complete['STDs_vaginal_condylomatosis'].sort_index()","56358b51":"df_std_peri=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_categorical.remove('STDs_vulvo_perineal_condylomatosis')\nfor i in x_features_categorical:\n    df_std_peri[i]=df_std_peri[i].fillna(df_std_peri[i].mode()[0])\nfor i in x_features_numerical:\n    df_std_peri[i]=df_std_peri[i].fillna(df_std_peri[i].median())\n\ndf_std_peri=df_std_peri.astype('float')\ndf_std_peri[x_features_categorical]=df_std_peri[x_features_categorical].replace(0,'no')\ndf_std_peri[x_features_categorical]=df_std_peri[x_features_categorical].replace(1,'yes')\ndf_std_peri=pd.get_dummies(df_std_peri)\n\ntrain_std_peri=df_std_peri[df_std_peri.STDs_vulvo_perineal_condylomatosis.isnull()==False]\ntest_std_peri=df_std_peri[df_std_peri.STDs_vulvo_perineal_condylomatosis.isnull()]\n\ntrain_std_peri_x=train_std_peri.drop('STDs_vulvo_perineal_condylomatosis',axis=1)\ntrain_std_peri_y=train_std_peri['STDs_vulvo_perineal_condylomatosis']\n\ntest_std_peri_x=test_std_peri.drop('STDs_vulvo_perineal_condylomatosis',axis=1)\ntest_std_peri_y=test_std_peri['STDs_vulvo_perineal_condylomatosis']\n\ndt=DecisionTreeClassifier()\nstd_model_peri=dt.fit(train_std_peri_x,train_std_peri_y)\ntest_std_peri['STDs_vulvo_perineal_condylomatosis']=std_model_peri.predict(test_std_peri_x)\n\nstd_peri_complete=pd.concat([train_std_peri,test_std_peri],axis=0)\n\ndf_impute['STDs_vulvo_perineal_condylomatosis']=std_peri_complete['STDs_vulvo_perineal_condylomatosis'].sort_index()","a5037272":"df_std_syp=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_categorical.remove('STDs_syphilis')\nfor i in x_features_categorical:\n    df_std_syp[i]=df_std_syp[i].fillna(df_std_syp[i].mode()[0])\nfor i in x_features_numerical:\n    df_std_syp[i]=df_std_syp[i].fillna(df_std_syp[i].median())\n\ndf_std_syp=df_std_syp.astype('float')\ndf_std_syp[x_features_categorical]=df_std_syp[x_features_categorical].replace(0,'no')\ndf_std_syp[x_features_categorical]=df_std_syp[x_features_categorical].replace(1,'yes')\ndf_std_syp=pd.get_dummies(df_std_syp)\n\ntrain_std_syp=df_std_syp[df_std_syp.STDs_syphilis.isnull()==False]\ntest_std_syp=df_std_syp[df_std_syp.STDs_syphilis.isnull()]\n\ntrain_std_syp_x=train_std_syp.drop('STDs_syphilis',axis=1)\ntrain_std_syp_y=train_std_syp['STDs_syphilis']\n\ntest_std_syp_x=test_std_syp.drop('STDs_syphilis',axis=1)\ntest_std_syp_y=test_std_syp['STDs_syphilis']\n\ndt=DecisionTreeClassifier()\nstd_model_syp=dt.fit(train_std_syp_x,train_std_syp_y)\ntest_std_syp['STDs_syphilis']=std_model_syp.predict(test_std_syp_x)\n\nstd_syp_complete=pd.concat([train_std_syp,test_std_syp],axis=0)\n\ndf_impute['STDs_syphilis']=std_syp_complete['STDs_syphilis'].sort_index()","78a8d55d":"df_std_pelv=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_categorical.remove('STDs_pelvic_inflammatory_disease')\nfor i in x_features_categorical:\n    df_std_pelv[i]=df_std_pelv[i].fillna(df_std_pelv[i].mode()[0])\n\nfor i in x_features_numerical:\n    df_std_pelv[i]=df_std_pelv[i].fillna(df_std_pelv[i].median())                          \n\ndf_std_pelv=df_std_pelv.astype('float')\ndf_std_pelv[x_features_categorical]=df_std_pelv[x_features_categorical].replace(0,'no')\ndf_std_pelv[x_features_categorical]=df_std_pelv[x_features_categorical].replace(1,'yes')\ndf_std_pelv=pd.get_dummies(df_std_pelv)\n\ntrain_std_pelv=df_std_pelv[df_std_pelv.STDs_pelvic_inflammatory_disease.isnull()==False]\ntest_std_pelv=df_std_pelv[df_std_pelv.STDs_pelvic_inflammatory_disease.isnull()]\n\ntrain_std_pelv_x=train_std_pelv.drop('STDs_pelvic_inflammatory_disease',axis=1)\ntrain_std_pelv_y=train_std_pelv['STDs_pelvic_inflammatory_disease']\n\ntest_std_pelv_x=test_std_pelv.drop('STDs_pelvic_inflammatory_disease',axis=1)\ntest_std_pelv_y=test_std_pelv['STDs_pelvic_inflammatory_disease']\n\ndt=DecisionTreeClassifier()\nstd_model_pelv=dt.fit(train_std_pelv_x,train_std_pelv_y)\ntest_std_pelv['STDs_pelvic_inflammatory_disease']=std_model_pelv.predict(test_std_pelv_x)\n\nstd_pelv_complete=pd.concat([train_std_pelv,test_std_pelv],axis=0)\n\ndf_impute['STDs_pelvic_inflammatory_disease']=std_pelv_complete['STDs_pelvic_inflammatory_disease'].sort_index()","a40e0f57":"df_std_geni=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_categorical.remove('STDs_genital_herpes')\nfor i in x_features_categorical:\n    df_std_geni[i]=df_std_geni[i].fillna(df_std_geni[i].mode()[0])\nfor i in x_features_numerical:\n    df_std_geni[i]=df_std_geni[i].fillna(df_std_geni[i].median())\n\ndf_std_geni=df_std_geni.astype('float')\ndf_std_geni[x_features_categorical]=df_std_geni[x_features_categorical].replace(0,'no')\ndf_std_geni[x_features_categorical]=df_std_geni[x_features_categorical].replace(1,'yes')\ndf_std_geni=pd.get_dummies(df_std_geni)\n\ntrain_std_geni=df_std_geni[df_std_geni.STDs_genital_herpes.isnull()==False]\ntest_std_geni=df_std_geni[df_std_geni.STDs_genital_herpes.isnull()]\n\ntrain_std_geni_x=train_std_geni.drop('STDs_genital_herpes',axis=1)\ntrain_std_geni_y=train_std_geni['STDs_genital_herpes']\n\ntest_std_geni_x=test_std_geni.drop('STDs_genital_herpes',axis=1)\ntest_std_geni_y=test_std_geni['STDs_genital_herpes']\n\ndt=DecisionTreeClassifier()\nstd_model_geni=dt.fit(train_std_geni_x,train_std_geni_y)\ntest_std_geni['STDs_genital_herpes']=std_model_geni.predict(test_std_geni_x)\n\nstd_geni_complete=pd.concat([train_std_geni,test_std_geni],axis=0)\n\ndf_impute['STDs_genital_herpes']=std_geni_complete['STDs_genital_herpes'].sort_index()","e64d198b":"df_std_mollu=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_categorical.remove('STDs_molluscum_contagiosum')\nfor i in x_features_categorical:\n    df_std_mollu[i]=df_std_mollu[i].fillna(df_std_mollu[i].mode()[0])\nfor i in x_features_numerical:\n    df_std_mollu[i]=df_std_mollu[i].fillna(df_std_mollu[i].median())\n\ndf_std_mollu=df_std_mollu.astype('float')\ndf_std_mollu[x_features_categorical]=df_std_mollu[x_features_categorical].replace(0,'no')\ndf_std_mollu[x_features_categorical]=df_std_mollu[x_features_categorical].replace(1,'yes')\ndf_std_mollu=pd.get_dummies(df_std_mollu)\n\ntrain_std_mollu=df_std_mollu[df_std_mollu.STDs_molluscum_contagiosum.isnull()==False]\ntest_std_mollu=df_std_mollu[df_std_mollu.STDs_molluscum_contagiosum.isnull()]\n\ntrain_std_mollu_x=train_std_mollu.drop('STDs_molluscum_contagiosum',axis=1)\ntrain_std_mollu_y=train_std_mollu['STDs_molluscum_contagiosum']\n\ntest_std_mollu_x=test_std_mollu.drop('STDs_molluscum_contagiosum',axis=1)\ntest_std_mollu_y=test_std_mollu['STDs_molluscum_contagiosum']\n\ndt=DecisionTreeClassifier()\nstd_model_mollu=dt.fit(train_std_mollu_x,train_std_mollu_y)\ntest_std_mollu['STDs_molluscum_contagiosum']=std_model_mollu.predict(test_std_mollu_x)\n\nstd_mollu_complete=pd.concat([train_std_mollu,test_std_mollu],axis=0)\n\ndf_impute['STDs_molluscum_contagiosum']=std_mollu_complete['STDs_molluscum_contagiosum'].sort_index()","d4ba0e76":"df_std_aids=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_categorical.remove('STDs_AIDS')\nfor i in x_features_categorical:\n    df_std_aids[i]=df_std_aids[i].fillna(df_std_aids[i].mode()[0])\nfor i in x_features_numerical:\n    df_std_aids[i]=df_std_aids[i].fillna(df_std_aids[i].median())\n\ndf_std_aids=df_std_aids.astype('float')\ndf_std_aids[x_features_categorical]=df_std_aids[x_features_categorical].replace(0,'no')\ndf_std_aids[x_features_categorical]=df_std_aids[x_features_categorical].replace(1,'yes')\ndf_std_aids=pd.get_dummies(df_std_aids)\n\ntrain_std_aids=df_std_aids[df_std_aids.STDs_AIDS.isnull()==False]\ntest_std_aids=df_std_aids[df_std_aids.STDs_AIDS.isnull()]\n\ntrain_std_aids_x=train_std_aids.drop('STDs_AIDS',axis=1)\ntrain_std_aids_y=train_std_aids['STDs_AIDS']\n\ntest_std_aids_x=test_std_aids.drop('STDs_AIDS',axis=1)\ntest_std_aids_y=test_std_aids['STDs_AIDS']\n\ndt=DecisionTreeClassifier()\nstd_model_aids=dt.fit(train_std_aids_x,train_std_aids_y)\ntest_std_aids['STDs_AIDS']=std_model_aids.predict(test_std_aids_x)\n\nstd_aids_complete=pd.concat([train_std_aids,test_std_aids],axis=0)\n\ndf_impute['STDs_AIDS']=std_aids_complete['STDs_AIDS'].sort_index()","f78992b9":"df_std_hiv=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_categorical.remove('STDs_HIV')\nfor i in x_features_categorical:\n    df_std_hiv[i]=df_std_hiv[i].fillna(df_std_hiv[i].mode()[0])\nfor i in x_features_numerical:\n    df_std_hiv[i]=df_std_hiv[i].fillna(df_std_hiv[i].median())\n\ndf_std_hiv=df_std_hiv.astype('float')\ndf_std_hiv[x_features_categorical]=df_std_hiv[x_features_categorical].replace(0,'no')\ndf_std_hiv[x_features_categorical]=df_std_hiv[x_features_categorical].replace(1,'yes')\ndf_std_hiv=pd.get_dummies(df_std_hiv)\n\ntrain_std_hiv=df_std_hiv[df_std_hiv.STDs_HIV.isnull()==False]\ntest_std_hiv=df_std_hiv[df_std_hiv.STDs_HIV.isnull()]\n\ntrain_std_hiv_x=train_std_hiv.drop('STDs_HIV',axis=1)\ntrain_std_hiv_y=train_std_hiv['STDs_HIV']\n\ntest_std_hiv_x=test_std_hiv.drop('STDs_HIV',axis=1)\ntest_std_hiv_y=test_std_hiv['STDs_HIV']\n\ndt=DecisionTreeClassifier()\nstd_model_hiv=dt.fit(train_std_hiv_x,train_std_hiv_y)\ntest_std_hiv['STDs_HIV']=std_model_hiv.predict(test_std_hiv_x)\n\nstd_hiv_complete=pd.concat([train_std_hiv,test_std_hiv],axis=0)\n\ndf_impute['STDs_HIV']=std_hiv_complete['STDs_HIV'].sort_index()","1fa58ce8":"df_std_hepa=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_categorical.remove('STDs_Hepatitis_B')\nfor i in x_features_categorical:\n    df_std_hepa[i]=df_std_hepa[i].fillna(df_std_hepa[i].mode()[0])\nfor i in x_features_numerical:\n    df_std_hepa[i]=df_std_hepa[i].fillna(df_std_hepa[i].median())\n\ndf_std_hepa=df_std_hepa.astype('float')\ndf_std_hepa[x_features_categorical]=df_std_hepa[x_features_categorical].replace(0,'no')\ndf_std_hepa[x_features_categorical]=df_std_hepa[x_features_categorical].replace(1,'yes')\ndf_std_hepa=pd.get_dummies(df_std_hepa)\n\ntrain_std_hepa=df_std_hepa[df_std_hepa.STDs_Hepatitis_B.isnull()==False]\ntest_std_hepa=df_std_hepa[df_std_hepa.STDs_Hepatitis_B.isnull()]\n\ntrain_std_hepa_x=train_std_hepa.drop(['STDs_Hepatitis_B'],axis=1)\ntrain_std_hepa_y=train_std_hepa['STDs_Hepatitis_B']\n\ntest_std_hepa_x=test_std_hepa.drop(['STDs_Hepatitis_B'],axis=1)\ntest_std_hepa_y=test_std_hepa['STDs_Hepatitis_B']\n\ndt=DecisionTreeClassifier()\nstd_model_hepa=dt.fit(train_std_hepa_x,train_std_hepa_y)\ntest_std_hepa['STDs_Hepatitis_B']=std_model_hepa.predict(test_std_hepa_x)\n\nstd_hepa_complete=pd.concat([train_std_hepa,test_std_hepa],axis=0)\n\ndf_impute['STDs_Hepatitis_B']=std_hepa_complete['STDs_Hepatitis_B'].sort_index()","25835cb3":"df_std_hpv=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_categorical.remove('STDs_HPV')\nfor i in x_features_categorical:\n    df_std_hpv[i]=df_std_hpv[i].fillna(df_std_hpv[i].mode()[0])\nfor i in x_features_numerical:\n    df_std_hpv[i]=df_std_hpv[i].fillna(df_std_hpv[i].median())\n\ndf_std_hpv=df_std_hpv.astype('float')\ndf_std_hpv[x_features_categorical]=df_std_hpv[x_features_categorical].replace(0,'no')\ndf_std_hpv[x_features_categorical]=df_std_hpv[x_features_categorical].replace(1,'yes')\ndf_std_hpv=pd.get_dummies(df_std_hpv)\n\ntrain_std_hpv=df_std_hpv[df_std_hpv.STDs_HPV.isnull()==False]\ntest_std_hpv=df_std_hpv[df_std_hpv.STDs_HPV.isnull()]\n\ntrain_std_hpv_x=train_std_hpv.drop(['STDs_HPV'],axis=1)\ntrain_std_hpv_y=train_std_hpv['STDs_HPV']\n\ntest_std_hpv_x=test_std_hpv.drop(['STDs_HPV'],axis=1)\ntest_std_hpv_y=test_std_hpv['STDs_HPV']\n\ndt=DecisionTreeClassifier()\nstd_model_hpv=dt.fit(train_std_hpv_x,train_std_hpv_y)\ntest_std_hpv['STDs_HPV']=std_model_hpv.predict(test_std_hpv_x)\n\nstd_hpv_complete=pd.concat([train_std_hpv,test_std_hpv],axis=0)\n\ndf_impute['STDs_HPV']=std_hpv_complete['STDs_HPV'].sort_index()","95d5b7a7":"df_no_preg=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_numerical.remove('No_pregnancies')\nfor i in x_features_numerical:\n    df_no_preg[i]=df_no_preg[i].fillna(df_no_preg[i].median())\nfor i in x_features_categorical:\n    df_no_preg[i]=df_no_preg[i].fillna(df_no_preg[i].mode()[0])\n\ndf_no_preg=df_no_preg.astype('float')\ndf_no_preg[x_features_categorical]=df_no_preg[x_features_categorical].replace(0,'no')\ndf_no_preg[x_features_categorical]=df_no_preg[x_features_categorical].replace(1,'yes')\ndf_no_preg=pd.get_dummies(df_no_preg)\n\ntrain_no_preg=df_no_preg[df_no_preg.No_pregnancies.isnull()==False]\ntest_no_preg=df_no_preg[df_no_preg.No_pregnancies.isnull()]\n\ntrain_no_preg_x=train_no_preg.drop(['No_pregnancies'],axis=1)\ntrain_no_preg_y=train_no_preg['No_pregnancies']\n\ntest_no_preg_x=test_no_preg.drop(['No_pregnancies'],axis=1)\ntest_no_preg_y=test_no_preg['No_pregnancies']\n\ndt=DecisionTreeRegressor()\nmodel_no_preg=dt.fit(train_no_preg_x,train_no_preg_y)\ntest_no_preg['No_pregnancies']=model_no_preg.predict(test_no_preg_x)\n\nno_preg_complete=pd.concat([train_no_preg,test_no_preg],axis=0)\n\ndf_impute['No_pregnancies']=no_preg_complete['No_pregnancies'].sort_index()","c820b334":"df_no_sexptnr=df_impute.drop(['Biopsy'],axis=1)\n\nx_features_numerical.remove('No_of_sex_partner')\nfor i in x_features_numerical:\n    df_no_sexptnr[i]=df_no_sexptnr[i].fillna(df_no_sexptnr[i].median())\nfor i in x_features_categorical:\n    df_no_sexptnr[i]=df_no_sexptnr[i].fillna(df_no_sexptnr[i].mode()[0])\n\ndf_no_sexptnr=df_no_sexptnr.astype('float')\ndf_no_sexptnr[x_features_categorical]=df_no_sexptnr[x_features_categorical].replace(0,'no')\ndf_no_sexptnr[x_features_categorical]=df_no_sexptnr[x_features_categorical].replace(1,'yes')\ndf_no_sexptnr=pd.get_dummies(df_no_sexptnr)\n\ntrain_no_sexptnr=df_no_sexptnr[df_no_sexptnr.No_of_sex_partner.isnull()==False]\ntest_no_sexptnr=df_no_sexptnr[df_no_sexptnr.No_of_sex_partner.isnull()]\n\ntrain_no_sexptnr_x=train_no_sexptnr.drop(['No_of_sex_partner'],axis=1)\ntrain_no_sexptnr_y=train_no_sexptnr['No_of_sex_partner']\n\ntest_no_sexptnr_x=test_no_sexptnr.drop(['No_of_sex_partner'],axis=1)\ntest_no_sexptnr_y=test_no_sexptnr['No_of_sex_partner']\n\ndt=DecisionTreeRegressor()\nmodel_no_sexptnr=dt.fit(train_no_sexptnr_x,train_no_sexptnr_y)\ntest_no_sexptnr['No_of_sex_partner']=model_no_sexptnr.predict(test_no_sexptnr_x)\n\nno_sexptnr_complete=pd.concat([train_no_sexptnr,test_no_sexptnr],axis=0)\n\ndf_impute['No_of_sex_partner']=no_sexptnr_complete['No_of_sex_partner'].sort_index()","10f5d8ad":"df_impute.isnull().sum()","10de7570":"df_impute[['Age','No_pregnancies', 'No_of_sex_partner',\n 'First_sexual_intercourse',\n 'Smokes_yrs',\n 'Smokes_packs_yr',\n 'STDs_No_of_diagnosis', 'Hormonal_Contraceptives_years', 'IUD_years', 'STDs_number']].describe()","54ea3c6c":"df_impute.to_csv('df_imputation.csv')","2f345f0d":"df = pd.read_csv('df_imputation.csv', index_col=0) #df_imputation is the new CSV file that doesn't have any null values.\n\n#Again manually segregating categorical and numerical colmuns\n\nx_features_categorical = ['Smokes','Hormonal_Contraceptives','IUD','STDs','STDs_condylomatosis','STDs_cervical_condylomatosis',\n                          'STDs_vaginal_condylomatosis','STDs_vulvo_perineal_condylomatosis','STDs_syphilis',\n                          'STDs_pelvic_inflammatory_disease','STDs_genital_herpes','STDs_molluscum_contagiosum','STDs_AIDS',\n                          'STDs_HIV','STDs_Hepatitis_B','STDs_HPV','Dx_Cancer','Dx_CIN','Dx_HPV','Dx', 'Hinselmann', 'Citology', 'Biopsy']\n\nx_features_numerical = [x for x in df.columns if x not in x_features_categorical]","69ef8c4c":"impute = df.copy()\nimpute=df.astype('float')\n\nplt.figure(figsize = (12,8))\nplt.pie(impute['Biopsy'].value_counts(), labels = ['NO', 'YES'], autopct = '%1.1f%%', labeldistance=1.1, textprops = {'fontsize': 20})\nplt.title('Biopsy Percentage', fontsize=20)\nplt.show()","3d0e610c":"print(\"Count Plots of Categorical Columns\");print()\nfor i in impute[x_features_categorical]:\n        print('*'*100)\n        sns.countplot(impute[i])\n        plt.title(i)\n        plt.show()","94a53e41":"print(\"Density Plots\");print()\nfor i in impute[x_features_numerical]:\n        print('*'*100)\n        sns.distplot(impute[i])\n        plt.title(i)\n        plt.show()","de1f917b":"impute[x_features_categorical]=impute[x_features_categorical].replace(0,'no')\nimpute[x_features_categorical]=impute[x_features_categorical].replace(1,'yes')\n\nimpute.Smokes_yrs=impute.Smokes_yrs.astype('float64')\nimpute.IUD_years=impute.IUD_years.astype('float64')\nimpute.Smokes_packs_yr=impute.Smokes_packs_yr.astype('float64')\nimpute['smokes_yr_cat']=pd.cut(impute.Smokes_yrs,[-1,2,5,10,15,20,25,50],labels=['<2','2-5','5-10','10-15','15-20','20-25','>25'])\nimpute=impute.drop(['Smokes_yrs'],axis=1)\nimpute['smokepack_yr_cat']=pd.cut(impute.Smokes_packs_yr,[-1,2,5,10,20,50],labels=['<2','2-5','5-10','10-20','>20'])\nimpute=impute.drop(['Smokes_packs_yr'],axis=1)\nimpute['IUD_years_bin']=pd.cut(impute.IUD_years,[-1,2,4,6,8,10,15,20],labels=['<2','2-4','4-6','6-8','8-10','10-15','>15'])\nimpute=impute.drop(['IUD_years'],axis=1)\nimpute['Hormonal_years_bin']=pd.cut(impute.Hormonal_Contraceptives_years,[-1,2,4,6,8,10,15,20],labels=['<2','2-4','4-6','6-8','8-10','10-15','>15'])","74149d1d":"plt.subplots(1,2,figsize=(16,8))\nplt.subplot(1,2,1)\na=sns.boxplot(x=impute['First_sexual_intercourse'],y=impute['Age'], hue=impute['Biopsy'])\na.axes.set_title(\"Boxplot b\/w Biopsy & First Sexual Intercourse\",fontsize=20)\na.set_xlabel(\"Age during First_sexual_intercourse\",fontsize=20)\na.set_ylabel(\"Age\",fontsize=20)\nplt.xticks(rotation=90)\nplt.subplot(1,2,2)\nplt.title('Boxplot b\/w Biopsy & Number of Sexual Partners',fontsize=20)\na=sns.boxplot(x=impute['No_of_sex_partner'],y=impute['Age'], hue=impute['Biopsy'])\na.set_xlabel(\"Number of Sexual Partners\",fontsize=20)\na.set_ylabel(\"Age\",fontsize=20)\nplt.show()\nplt.figure(figsize=(8,8))\na=sns.boxplot(x=impute['No_pregnancies'],y=impute['Age'], hue=impute['Biopsy'])\na.axes.set_title(\"Box Plot b\/w Biopsy & Total number of Pregnancies\",fontsize=22)\na.set_xlabel('Total number of Pregnancies',fontsize=20)\nplt.xticks(rotation=90)\na.set_ylabel(\"Age\",fontsize=20)\nplt.show()","8e55365e":"plt.subplots(1,2,figsize=(16,8))\nplt.subplot(1,2,1)\na=sns.boxplot(y=impute['First_sexual_intercourse'],hue=impute['Biopsy'],x=impute['Smokes'])\na.axes.set_title(\"Box Plot b\/w Biopsy & First Sexual Intercourse\",fontsize=17)\na.set_xlabel(\"Smokes\",fontsize=15)\na.set_ylabel(\"First Sexual Intercourse\",fontsize=15)\nplt.subplot(1,2,2)\nplt.title('Box Plot b\/w Biopsy & Number of Sexual Partners',fontsize=17)\na=sns.boxplot(y=impute['No_of_sex_partner'],hue=impute['Biopsy'],x=impute['Smokes'])\na.set_xlabel(\"Smokes\",fontsize=15)\na.set_ylabel(\"Number of Sexual Partners\",fontsize=15)\nplt.figure(figsize=(8,7))\na=sns.boxplot(y=impute['No_pregnancies'],hue=impute['Biopsy'],x=impute['Smokes'])\na.axes.set_title(\"Box Plot b\/w Biopsy & Total number of Pregnancies\",fontsize=17)\na.set_xlabel('Smokes',fontsize=20)\na.set_ylabel(\"Total number of Pregnancies\",fontsize=20)\nplt.show()","7c88a8fa":"plt.subplots(1,2,figsize=(16,8))\nplt.subplot(1,2,1)\nb=sns.boxplot(hue=impute['Biopsy'],x=impute['Smokes'],y=impute['Age'])\nb.axes.set_title(\"Box Plot b\/w Biopsy & Smokes\",fontsize=22)\nb.set_xlabel(\"Smokes\",fontsize=20)\nb.set_ylabel(\"Age of Patient\",fontsize=20)\nplt.subplot(1,2,2)\nb=sns.boxplot(hue=impute['Biopsy'],x=impute['smokes_yr_cat'],y=impute['Age'])\nb.axes.set_title(\"Box Plot b\/w Biopsy & Years of Smoking\",fontsize=22)\nb.set_xlabel(\"Years of Smoking\",fontsize=20)\nb.set_ylabel(\"Age of Patient\",fontsize=20)\nplt.show()\nplt.figure(figsize=(8,8))\nb=sns.boxplot(hue=impute['Biopsy'],x=impute['smokepack_yr_cat'],y=impute['Age'])\nb.axes.set_title(\"Box Plot b\/w Biopsy & Years of Smoking\",fontsize=22)\nb.set_xlabel(\"No of Smoking packets in a year\",fontsize=20)\nb.set_ylabel(\"Age of Patient\",fontsize=20)\nplt.show()","8ba8ce07":"plt.subplots(2,2,figsize=(16,12))\nplt.subplot(2,2,1)\nsns.countplot(impute['Hormonal_Contraceptives'])\nplt.subplot(2,2,2)\nsns.countplot(impute['Hormonal_years_bin'])\nplt.subplot(2,2,3)\nsns.countplot(impute['IUD'])\nplt.subplot(2,2,4)\nsns.countplot(impute['IUD_years_bin'])","dac5d3bb":"plt.subplots(2,2,figsize=(20,20))\nplt.subplot(2,2,1)\nc=sns.boxplot(hue=impute['Biopsy'],x=impute['Hormonal_Contraceptives'],y=impute['Age'])\nc.axes.set_title('Box plot b\/w Biopsy & Hormonal Contraceptives',fontsize=20)\nc.set_xlabel('Hormonal Contraceptives',fontsize=20)\nc.set_ylabel('Age of Patient',fontsize=20)\nplt.subplot(2,2,2)\nyears=pd.cut(impute.Hormonal_Contraceptives_years,[0,2,4,6,8],labels=['0-2','2-4','4-6','6-8'])\nc=sns.boxplot(x=years,y='Age',hue='Biopsy',data=impute)\nc.axes.set_title('Box plot b\/w Biopsy & No. of year using Hormonal Contraceptives',fontsize=20)\nc.set_xlabel('No. of year Hormonal Contraceptives',fontsize=20)\nc.set_ylabel('Age of Patient',fontsize=20)\nplt.subplot(2,2,3)\nc=sns.boxplot(hue=impute['Biopsy'],x=impute['IUD'],y=impute['Age'])\nc.axes.set_title('Box plot b\/w Biopsy & IUD',fontsize=20)\nc.set_xlabel('IUD',fontsize=20)\nc.set_ylabel('Age of Patient',fontsize=20)\nplt.subplot(2,2,4)\nc=sns.boxplot(x='IUD_years_bin',y='Age',hue='Biopsy',data=impute)\nc.axes.set_title('Box plot b\/w Biopsy & No. of year using IUD',fontsize=20)\nc.set_xlabel('No. of year IUD',fontsize=20)\nc.set_ylabel('Age of Patient',fontsize=20)\nc=sns.boxplot()\nplt.show()","966c7250":"plt.subplots(1,2, figsize=(20,8))\nplt.subplot(1,2,1)\nsns.countplot(impute['STDs'], hue=impute['Biopsy'])\nplt.subplot(1,2,2)\nsns.countplot(impute['STDs_number'][impute['STDs_number']>0])","f5646947":"plt.subplots(4,3,figsize=(23,23))\nvar=['Dummy','STDs_condylomatosis',\n 'STDs_cervical_condylomatosis',\n 'STDs_vaginal_condylomatosis',\n 'STDs_vulvo_perineal_condylomatosis',\n 'STDs_syphilis',\n 'STDs_pelvic_inflammatory_disease',\n 'STDs_genital_herpes',\n 'STDs_molluscum_contagiosum',\n 'STDs_AIDS',\n 'STDs_HIV',\n 'STDs_Hepatitis_B',\n 'STDs_HPV']\nfor i in np.arange(1,13):\n    plt.subplot(4,3,i)\n    d=sns.boxplot(hue='Biopsy',x=var[i],y='Age',data=impute)\n    d.axes.set_title('Biopsy & ' + var[i],fontsize=15)\n    d.set_xlabel(var[i],fontsize=12)\n    d.set_ylabel('Age of the Patient',fontsize=15)","f6c97a45":"numerical=['Age','No_of_sex_partner','First_sexual_intercourse','No_pregnancies','Smokes_yrs','Smokes_packs_yr',\n 'Hormonal_Contraceptives_years','IUD_years'] # --> Choosing the proper numerical features \n\ndf_copy = df.copy()\ndf_copy[numerical]=df_copy[numerical].astype('float64')","ddbb0321":"df_copy[numerical].plot(kind='box',subplots=True, layout=(4,4), fontsize=8, figsize=(14,14))","379b4a4d":"IQR=df_copy[numerical].describe().T['75%']-df_copy[numerical].describe().T['25%']\n\nmin,max=[df_copy[numerical].describe().T['25%']-(IQR*1.5),df_copy[numerical].describe().T['75%']+(IQR*1.5)]\n\nfor i in numerical:\n    print('range of',i,'b\/w',min[i],'and',max[i])\n\nfor i in numerical:\n    df_copy[i][df_copy[i]>max[i]]=max[i]\n    df_copy[i][df_copy[i]<min[i]]=min[i]","436dc39e":"df_copy[numerical].plot(kind='box',subplots=True, layout=(4,4), fontsize=8, figsize=(14,14))","93bdaeec":"df = df.astype('float64')\n\nx = df.drop('Biopsy', axis=1)\ny = df['Biopsy']\n\nSS = StandardScaler()\ndf_scaled = pd.DataFrame(SS.fit_transform(x), columns = x.columns) # as scaling mandotory for KNN model \n\nx_train,x_test,y_train,y_test = train_test_split(x,y, test_size = 0.3, random_state = 1)\nx_train1,x_test1,y_train,y_test = train_test_split(df_scaled,y, test_size = 0.3, random_state = 1)\n\nl= []  #List to store the various model metrics ","c3f33cbf":"def models_lr(x,y):\n    mod = {}\n    model = LogisticRegression().fit(x,y)\n    ypred = model.predict(x_test)\n    mod['Model'] = 'LogisticRegression'\n    mod['Train_Score'] = model.score(x_train,y_train)\n    mod['Test_accuracy'] = metrics.accuracy_score(y_test,ypred)\n    mod['f1score'] = metrics.f1_score(y_test,ypred)\n    mod['recall'] = metrics.recall_score(y_test, ypred)\n    mod['precision'] = metrics.precision_score(y_test, ypred)\n    model.predict_proba(x_test)\n    mod['roc_auc'] = metrics.roc_auc_score(y_test,ypred)\n    return mod\nl.append(models_lr(x_train,y_train))\n\ndef models_dt(x,y):\n    mod = {}\n    model = DecisionTreeClassifier().fit(x,y)\n    ypred = model.predict(x_test)\n    mod['Model'] = 'Decision Tree'\n    mod['Train_Score'] = model.score(x_train,y_train)\n    mod['Test_accuracy'] = metrics.accuracy_score(y_test,ypred)\n    mod['f1score'] = metrics.f1_score(y_test,ypred)\n    mod['recall'] = metrics.recall_score(y_test, ypred)\n    mod['precision'] = metrics.precision_score(y_test, ypred)\n    model.predict_proba(x_test)\n    mod['roc_auc'] = metrics.roc_auc_score(y_test,ypred)\n    return mod\nl.append(models_dt(x_train,y_train))\n\ndef models_rf(x,y):\n    mod = {}\n    model = RandomForestClassifier().fit(x,y)\n    ypred = model.predict(x_test)\n    mod['Model'] = 'Random Forest'\n    mod['Train_Score'] = model.score(x_train,y_train)\n    mod['Test_accuracy'] = metrics.accuracy_score(y_test,ypred)\n    mod['f1score'] = metrics.f1_score(y_test,ypred)\n    mod['recall'] = metrics.recall_score(y_test, ypred)\n    mod['precision'] = metrics.precision_score(y_test, ypred)\n    model.predict_proba(x_test)\n    mod['roc_auc'] = metrics.roc_auc_score(y_test,ypred)\n    return mod\nl.append(models_rf(x_train,y_train))\n\ndef models_nb(x,y):\n    mod = {}\n    model = GaussianNB().fit(x,y)\n    ypred = model.predict(x_test)\n    mod['Model'] = 'GaussianNB'\n    mod['Train_Score'] = model.score(x_train,y_train)\n    mod['Test_accuracy'] = metrics.accuracy_score(y_test,ypred)\n    mod['f1score'] = metrics.f1_score(y_test,ypred)\n    mod['recall'] = metrics.recall_score(y_test, ypred)\n    mod['precision'] = metrics.precision_score(y_test, ypred)\n    model.predict_proba(x_test)\n    mod['roc_auc'] = metrics.roc_auc_score(y_test,ypred)\n    return mod\nl.append(models_nb(x_train,y_train))\n\ndef models_knn(x,y):\n    mod = {}\n    model = KNeighborsClassifier().fit(x,y)\n    ypred = model.predict(x_test1)\n    mod['Model'] = 'KNN'\n    mod['Train_Score'] = model.score(x_train1,y_train)\n    mod['Test_accuracy'] = metrics.accuracy_score(y_test,ypred)\n    mod['f1score'] = metrics.f1_score(y_test,ypred)\n    mod['recall'] = metrics.recall_score(y_test, ypred)\n    mod['precision'] = metrics.precision_score(y_test, ypred)\n    model.predict_proba(x_test)\n    mod['roc_auc'] = metrics.roc_auc_score(y_test,ypred)\n    return mod\nl.append(models_knn(x_train1,y_train))","19684990":"base_df = pd.DataFrame(l)\nbase_df","7dd6388e":"x_train_s, y_train_s = SMOTE(random_state=33).fit_resample(x_train, y_train.ravel())\nprint(sorted(Counter(y_train_s).items()))","ca2ddeb7":"l_final = [] #--> New list for storing metrics of base models\n\ndef models_dt(x,y):\n    mod = {}\n    model = DecisionTreeClassifier().fit(x,y)\n    ypred = model.predict(x_test)\n    mod['Model'] = 'Decision Tree After Sampling'\n    mod['Train_Score'] = model.score(x_train_s,y_train_s)\n    mod['Test_accuracy'] = metrics.accuracy_score(y_test,ypred)\n    mod['f1score'] = metrics.f1_score(y_test,ypred)\n    mod['recall'] = metrics.recall_score(y_test, ypred)\n    mod['precision'] = metrics.precision_score(y_test, ypred)\n    model.predict_proba(x_test)\n    mod['roc_auc'] = metrics.roc_auc_score(y_test,ypred)\n    return mod\nl_final.append(models_dt(x_train_s,y_train_s))\n\ndef models_rf(x,y):\n    mod = {}\n    model = RandomForestClassifier().fit(x,y)\n    ypred = model.predict(x_test)\n    mod['Model'] = 'Random Forest After Sampling'\n    mod['Train_Score'] = model.score(x_train_s,y_train_s)\n    mod['Test_accuracy'] = metrics.accuracy_score(y_test,ypred)\n    mod['f1score'] = metrics.f1_score(y_test,ypred)\n    mod['recall'] = metrics.recall_score(y_test, ypred)\n    mod['precision'] = metrics.precision_score(y_test, ypred)\n    model.predict_proba(x_test)\n    mod['roc_auc'] = metrics.roc_auc_score(y_test,ypred)\n    return mod\nl_final.append(models_rf(x_train_s,y_train_s))","298ed8b2":"final_model = pd.DataFrame(l_final)\nfinal_model","021fd1df":"for i in range(1,df.shape[1]):\n   \n    model = RFE(DecisionTreeClassifier(),i).fit(x,y)\n    print(x.columns[model.support_])\n    x_train,x_test,y_train,y_test = train_test_split(model.transform(x),y,test_size=0.3,random_state=0)\n    dt = DecisionTreeClassifier()\n    dt.fit(x_train,y_train)\n    y_pred = dt.predict(x_test)\n    dt_recall = metrics.roc_auc_score(y_test,y_pred)\n    print(dt_recall)\n    print('*'*100)","8bb62dcc":"rfe_dt = ['Age', 'No_of_sex_partner', 'First_sexual_intercourse',\n       'No_pregnancies', 'Smokes', 'Smokes_yrs', 'Smokes_packs_yr',\n       'Hormonal_Contraceptives', 'Hormonal_Contraceptives_years', 'IUD_years',\n       'STDs', 'STDs_number', 'STDs_genital_herpes',\n       'STDs_molluscum_contagiosum', 'STDs_AIDS', 'STDs_HIV', 'STDs_HPV',\n       'STDs_No_of_diagnosis', 'Dx_CIN', 'Schiller', 'Citology']  # Set of features with high recall score\n\nlen(rfe_dt)","e53a4b34":"for i in range(1,df.shape[1]):\n   \n    model = RFE(RandomForestClassifier(),i).fit(x,y)\n    print(x.columns[model.support_])\n    x_train,x_test,y_train,y_test = train_test_split(model.transform(x),y,test_size=0.3,random_state=0)\n    rf = RandomForestClassifier()\n    rf.fit(x_train,y_train)\n    y_pred = rf.predict(x_test)\n    rf_recall = metrics.roc_auc_score(y_test,y_pred)\n    print(rf_recall)\n    print('*'*100)","7241630e":"rfe_rf= ['Age', 'No_of_sex_partner', 'First_sexual_intercourse',\n       'No_pregnancies', 'Smokes_yrs', 'Smokes_packs_yr',\n       'Hormonal_Contraceptives', 'Hormonal_Contraceptives_years', 'IUD',\n       'IUD_years', 'STDs_number', 'STDs_condylomatosis',\n       'STDs_genital_herpes', 'Dx_CIN', 'Dx_HPV', 'Dx', 'Hinselmann',\n       'Schiller', 'Citology']  # Set of features with high recall score\n\nlen(rfe_rf)","227778be":"x_train_s = pd.DataFrame(x_train_s, columns = x.columns)\ny_train_s = pd.DataFrame(y_train_s, columns = ['Biopsy'])\nx_test = pd.DataFrame(x_test, columns=x.columns)\n\nrfe_dt_df_train = x_train_s[rfe_dt]\nrfe_dt_df_test = x_test[rfe_dt]\nrfe_rf_df_train = x_train_s[rfe_rf]\nrfe_rf_df_test = x_test[rfe_rf]\n\nl_feature = [] \ndef models_dt(x,y):\n    mod = {}\n    model = DecisionTreeClassifier().fit(x,y)\n    ypred = model.predict(rfe_dt_df_test)\n    mod['Model'] = 'Decision Tree after Feature Selection'\n    mod['Train_Score'] = model.score(rfe_dt_df_train,y_train_s.values)\n    mod['Test_accuracy'] = metrics.accuracy_score(y_test,ypred)\n    mod['f1score'] = metrics.f1_score(y_test,ypred)\n    mod['recall'] = metrics.recall_score(y_test, ypred)\n    mod['precision'] = metrics.precision_score(y_test, ypred)\n    model.predict_proba(rfe_dt_df_test)\n    mod['roc_auc'] = metrics.roc_auc_score(y_test,ypred)\n    return mod\nl_feature.append(models_dt(rfe_dt_df_train,y_train_s.values))\n\ndef models_rf(x,y):\n    mod = {}\n    model = RandomForestClassifier().fit(x,y)\n    ypred = model.predict(rfe_rf_df_test)\n    mod['Model'] = 'Random Forest after Feature Selection'\n    mod['Train_Score'] = model.score(rfe_rf_df_train.values,y_train_s.values)\n    mod['Test_accuracy'] = metrics.accuracy_score(y_test,ypred)\n    mod['f1score'] = metrics.f1_score(y_test,ypred)\n    mod['recall'] = metrics.recall_score(y_test, ypred)\n    mod['precision'] = metrics.precision_score(y_test, ypred)\n    model.predict_proba(rfe_rf_df_test)\n    mod['roc_auc'] = metrics.roc_auc_score(y_test,ypred)\n    return mod\nl_feature.append(models_rf(rfe_rf_df_train.values,y_train_s.values))","e11e4b3e":"final_model = final_model.append(l_feature)\nfinal_model","144f2187":"tree = DecisionTreeClassifier()\ntree_param = {\n    'criterion':['gini','entropy'],\n    'splitter':['best','random'],  \n    'max_depth':[3,4,5,6],\n    'max_features':['auto','log2'],\n    'random_state':[123]\n}\n\ngrid = GridSearchCV(tree, tree_param, cv=10)\nbest_parameter_search = grid.fit(rfe_dt_df_train,y_train_s.values)\nbest_parameter_search.best_params_","b7659b89":"rf = RandomForestClassifier()\nrf_params = {\n    'n_estimators' : range(10,100,10),\n    'max_depth' : range(2,10,1),\n    'criterion' : ['gini','entropy'],\n    'max_leaf_nodes' : range(2,10,1),\n    'max_features' : ['auto','log2']\n}\n\ngrid = RandomizedSearchCV(rf, rf_params, cv=10)\nbest_parameter_search = grid.fit(rfe_dt_df_train,y_train_s.values)\nbest_parameter_search.best_params_","a5348b1d":"l_hyper = []\n\ndef models_dt(x,y):\n    mod = {}\n    model = DecisionTreeClassifier(criterion= 'gini', max_depth = 4, max_features = 'auto', random_state = 123, splitter = 'best').fit(x,y)\n    ypred = model.predict(rfe_dt_df_test)\n    mod['Model'] = 'Decision Tree after Hyperparameter Tuning'\n    mod['Train_Score'] = model.score(rfe_dt_df_train,y_train_s.values)\n    mod['Test_accuracy'] = metrics.accuracy_score(y_test,ypred)\n    mod['f1score'] = metrics.f1_score(y_test,ypred)\n    mod['recall'] = metrics.recall_score(y_test, ypred)\n    mod['precision'] = metrics.precision_score(y_test, ypred)\n    model.predict_proba(rfe_dt_df_test)\n    mod['roc_auc'] = metrics.roc_auc_score(y_test,ypred)\n    return mod\nl_hyper.append(models_dt(rfe_dt_df_train,y_train_s.values))\n\ndef models_rf(x,y):\n    mod = {}\n    model = RandomForestClassifier(criterion= 'gini', max_depth = 9, max_features = 'log2', max_leaf_nodes=9, n_estimators=50).fit(x,y)\n    ypred = model.predict(rfe_rf_df_test)\n    mod['Model'] = 'Random Forest After Hyperparameter Tuning'\n    mod['Train_Score'] = model.score(rfe_rf_df_train,y_train_s.values)\n    mod['Test_accuracy'] = metrics.accuracy_score(y_test,ypred)\n    mod['f1score'] = metrics.f1_score(y_test,ypred)\n    mod['recall'] = metrics.recall_score(y_test, ypred)\n    mod['precision'] = metrics.precision_score(y_test, ypred)\n    model.predict_proba(rfe_rf_df_test)\n    mod['roc_auc'] = metrics.roc_auc_score(y_test,ypred)\n    return mod\nl_hyper.append(models_rf(rfe_rf_df_train,y_train_s.values))","b938484a":"final_model = final_model.append(l_hyper)\nfinal_model","40cac87f":"l_ensemble=[]\n\n#only for hyper tuned decision tree as random forest is by default a bagged model\n\ndef bagg(x,y):\n    mod = {}\n    model = BaggingClassifier(base_estimator = DecisionTreeClassifier(criterion= 'gini', max_depth = 4, max_features = 'auto', random_state = 123, splitter = 'best')).fit(x, y)\n    ypred = model.predict(rfe_dt_df_test)\n    mod['Model'] = 'Bagged Decision Tree with Hyperparameter'\n    mod['Train_Score'] = model.score(rfe_dt_df_train,y_train_s.values)\n    mod['Test_accuracy'] = metrics.accuracy_score(y_test,ypred)\n    mod['f1score'] = metrics.f1_score(y_test,ypred)\n    mod['recall'] = metrics.recall_score(y_test, ypred)\n    mod['precision'] = metrics.precision_score(y_test, ypred)\n    model.predict_proba(rfe_dt_df_test)\n    mod['roc_auc'] = metrics.roc_auc_score(y_test,ypred)\n    return mod\nl_ensemble.append(bagg(rfe_dt_df_train,y_train_s.values))","d819bd1a":"def ada(x,y):\n    mod = {}\n    model = AdaBoostClassifier(base_estimator = DecisionTreeClassifier(criterion= 'gini', max_depth = 4, max_features = 'auto', random_state = 123, splitter = 'best')).fit(x, y)\n    ypred = model.predict(rfe_dt_df_test)\n    mod['Model'] = 'Decision Tree ADA Boost with Hyperparameter'\n    mod['Train_Score'] = model.score(rfe_dt_df_train,y_train_s.values)\n    mod['Test_accuracy'] = metrics.accuracy_score(y_test,ypred)\n    mod['f1score'] = metrics.f1_score(y_test,ypred)\n    mod['recall'] = metrics.recall_score(y_test, ypred)\n    mod['precision'] = metrics.precision_score(y_test, ypred)\n    model.predict_proba(rfe_dt_df_test)\n    mod['roc_auc'] = metrics.roc_auc_score(y_test,ypred)\n    return mod\nl_ensemble.append(ada(rfe_dt_df_train,y_train_s.values))","e0cf560c":"def gb(x,y):\n    mod = {}\n    model = GradientBoostingClassifier(learning_rate=0.01,random_state=1).fit(x, y)\n    ypred = model.predict(rfe_dt_df_test)\n    mod['Model'] = 'Gradient Boost'\n    mod['Train_Score'] = model.score(rfe_dt_df_train,y_train_s.values)\n    mod['Test_accuracy'] = metrics.accuracy_score(y_test,ypred)\n    mod['f1score'] = metrics.f1_score(y_test,ypred)\n    mod['recall'] = metrics.recall_score(y_test, ypred)\n    mod['precision'] = metrics.precision_score(y_test, ypred)\n    model.predict_proba(rfe_dt_df_test)\n    mod['roc_auc'] = metrics.roc_auc_score(y_test,ypred)\n    return mod\nl_ensemble.append(gb(rfe_dt_df_train,y_train_s.values))","e83e1a66":"final_model = final_model.append(l_ensemble)\nfinal_model.index = range(1,len(final_model)+1)\nfinal_model","e0714875":"# Conclusion :\n\n* We believe that the models we have chosen will assist the medical experts to predict the cancer more precisely than the traditional methods.\n- Moreover, the faster diagnosis of early stages of the cancer can be done with the help of this  model. \n- This model will also be cost effective method for low and middle class community. ","df1ca272":"# Problem Statement","349712d0":"### Bagging","a9b59acc":"##### Inferences :\n\n*  Cancer can affect to non-smokers as well and even in the young age (around 22 years) and the average age of Smoking cancer patients are higher than those of non smoking cancer patients. So the smoking people who are aged high are more prone to be test as positive.\n* The person who has smoked for atleast one year are more prone to be test as positive in Biopsy test\n* The person who are aged high and smoke more number of packets a year are prone to be tested as postive in Biopsy test","e7ad85fe":"# Dataset Overview","9dc1e011":"Cervical cancer continues to be listed among the top gynaecologic cancers worldwide. According to current data of WHO, Cervical cancer is the second most frequent cancer in women with an estimated 570,000 new cases in 2018 representing 14.7% of all female cancers. Approximately 90% of deaths from cervical cancer occurred in low- and middle-income countries. The high mortality rate from cervical cancer globally could be reduced through a comprehensive approach that includes prevention, early diagnosis, effective screening and treatment programmes. There are currently vaccines that protect against common cancer-causing types of human papilloma virus and can significantly reduce the risk of cervical cancer.\n\nCervical cancer is the term used to describe tumours that can grow at the lower end of the womb. These tumours usually develop from abnormal cell changes at the entrance to the womb from the vagina (the opening of the cervix). Abnormal cell changes can be detected through screening and then removed. A vaccine against viruses that cause cancer (HPV vaccine) can reduce the risk of cervical cancer.\n\n![image.png](attachment:image.png)\n\n","f6243bd6":"## iv) STD attributes & Age vs Biopsy\n\n\n    STDs : Indicates the presence of Sexually Transmitted Diseases\n    STDs_number : Indicates the total number of sexually transmitted disease present with the patient\n    STDs_condylomatosis\n    STDs_cervical_condylomatosis\n    STDs_vaginal_condylomatosis\n    STDs_vulvo_perineal_condylomatosis\n    STDs_syphilis\n    STDs_pelvic_inflammatory_disease\n    STDs_genital_herpes\n    STDs_molluscum_contagiosum\n    STDs_AIDS\n    STDs_HIV\n    STDs_Hepatitis_B\n    STDs_HPV\n    STDs_No_of_diagnosis","1f23b292":"### Missing Value Imputation for STDs","1d243d26":"* df_impute is the new dataframe that contains missing values imputed columns","b458e36b":"### ii) Smoking and Sexual Habits vs Biopsy\n\n*  Smokes - It indicates whether the person smokes or not\n*  smokes_yr_cat - It indicates for how many years the person has been smoking\n*  smokepack_yr_cat - It indicates how many packets per year the person is smoking","5021467c":"* We have used RFE technique for feature selection.\n* Recursive Feature Elimination (RFE) as its title suggests recursively removes features, builds a model using the remaining attributes and calculates model accuracy. \n* RFE is able to work out the combination of attributes that contribute to the prediction on the target variable (or class).\n* Used RFE on Decision Tree and Random Forest separately and found the best features for both the models individually.\n* The features are choosed based on recall score i.e. which set of features gave the gigher reacall score","600e8c4f":"* The above graph implies that the data contains outliers","bea27df9":"# Missing Values Imputation","d904f296":"* Used Grid Search Cross Validation for Decision Trees and Randomized Search Cross Validation for Random Forest (GridSearchCV may taker longer time) for chosing the best paramter values","dfebc012":"* Predominant of the features are of categorical and remaining are of numerical.","78d6b975":"# EDA","372d8f80":"### i) Age and Sexual Habits vs Biopsy","36253edd":"### Missing Value Imputation for STDs_vulvo_perineal_condylomatosis ","2d581152":"### Outlier Treatment","a768fbe5":"### Missing Value Imputation for STDs_HPV","6c2191fa":"### Missing Value Imputation for STDs_Hepatitis_B","3023d194":"# Final Model and Optimizations","9a910b5b":"### Gradient Boost","fbef55ce":"# Base Models","c17da757":"##### Inferences :\n\n* The persons who did not use the hormonal contraceptives and with more age are high in number, who show positive for Biopsy test\n* The patients with 0-4 years of usage in hormonal contraceptives and the average age between 20yrs & 30yrs show positive for Biopsy test.\n* The persons who did not use IUD and with lesser age between 25 years & 35 years, show positive for Biopsy test where as among those who used IUD, the higg aged people (around 40) are more prone to cancer.\n","94c4d6a9":"##### Inferences :\n\n* Those who had their first sexual intercourse in between 15 and 18 years of their life are more prone to be tested positive with Biopsy test and those people are predominantly in the age group of 20 to 35.\n* The persons who have sexual partners between 1 & 3 are more prone to be testes as positive in Biopsy test and they are predominantly in the age group of 20 to 35.\n* Higher the number of pregancies, higher the chances of getting positive Biopsy test.","d569b806":"* So, as we have done with null values imputation, lets move on to EXPLORATORY DATA ANALYSIS","0340dd61":"### Missing Value Imputation for No_of_sex_partner","9fcd15f3":"* We can see that the columns names contains spaces and colons. So renaming the columns for convenience","6093535e":"* Now 0 and 1 classes have same proportions","f7c692a8":"# Introduction","ba92d47a":"The dataset was collected at 'Hospital Universitario de Caracas' in Caracas, Venezuela. The dataset comprises demographic information, habits, and historic medical records of 858 patients. Several patients decided not to answer some of the questions because of privacy concerns (missing values). This dataset focuses on the prediction of indicators\/diagnosis of cervical cancer. The features cover demographic information, habits, and historic medical records","f615a8fd":"##### Inferences :\n\n* In all the plots we can clearly the person with higher age are prone to be tested as Positive in Biopsy test\n* We can not predict the effect of individual STDs as the data is not sufficient as there is class in imbalance","9eff923f":"# PREDICTION OF INDICATIONS OF CERVICAL CANCER USING BIOPSY TEST","1a7aafbd":"### Missing Value Imputation for STDs_pelvic_inflammatory_disease","ad2513dc":"## Checking the dimensions","e6d069e8":"In India, cervical cancer is the second most common cancer in women (aged 15\u201344 years) after breast cancer accounting for almost 16.5% of all female cancer cases.\nThe higher mortality rate can be attributed largely to the lack of appropriate healthcare infrastructure in India. Cervical cancer in its advanced stage has a dismal outcome in terms of both prognosis and quality of life, registering approximately 587,249 deaths (23.3% of all cancer-related deaths) each year in Indian women\n\n\n![image.png](attachment:image.png)\n\nFor more details about cervical cancer, please refer : https:\/\/www.webmd.com\/cancer\/cervical-cancer\/cervical-cancer#1","23e4b595":"* Hormonal_Contraceptives - Indicates usage of the contraceptives or not\n* Hormonal_Contraceptives_years - It indicates the years in usage of the contraceptives\n* IUD - It indicates the usage of IUD contraceptives (A small, often T-shaped birth control device that is inserted into a woman's uterus to prevent pregnancy) or not\n* IUD_years_bin - It indicates the years in usage of the IUD contraceptives\n* Hormonal_years_bin - It indicates the years in usage of the hormonal contraceptives","10c2cf4a":"### Uni Variate Analysis","479dbfa4":"## Ensembling","62461006":"### Missing Value Imputation for STDs_cervical_condylomatosis","8a6a944c":"### iii) Birth control attributes & Age vs Biopsy","41b2da70":"#### Here we can impute the missing values of IUD years considering the following reasons\n- For all the zero values of IUD_years, the value of IUD is zero.\n- For the zero values of IUD , the value of IUD_years is zero.\n- The predicted value of IUD is completely zero and hence we can consider that the predicted value of IUD years will also be zero.","7a516f6f":"The following are the description of independent and the dependent attributes:\n\n1.\tAge - It indicates the age of a woman. It is expressed in terms of numerical values\n2.\tNumber of sexual partners \u2013 It indicates the total number of sexual partners encountered. It is expressed in terms of numerical values.\n3.\tFirst sexual intercourse- It indicates the age of a woman when she had her first sexual intercourse. It is expressed in terms of the count.\n4.\tNumber of pregnancies \u2013 It indicates the total number of times the woman got pregnant. It is expressed in terms of the total count.\n5.\tSmokes- It indicates whether the person smokes or not. It is expressed in terms of zeros (does not smoke) and ones(smokes).\n6.\tSmokes (years)- It indicates the total number of years for which the woman is smoking. It is expressed in terms of total count.\n7.\tSmokes (packs\/year)- It indicates the total number of packets of cigarettes per year the woman smokes. It is expressed in terms of numbers\n8.\tHormonal Contraceptives - It indicates whether the patient uses hormonal contraceptives or not.\n9.\tHormonal Contraceptives (years) \u2013 It indicates that for how many years the contraceptive method was used. It was in expressed in terms of total number of years.\n10.\tIntra-Uterine Device- It indicated where the intrauterine contraceptive device was used or not. It was expressed in terms of zeros( did not used IUD) and ones( used IUD).\n11.\tIUD (years) \u2013 It indicated that for how many years the IUD was used. It is expressed in terms of the total number of years.\n12.\tSTDs - It indicates the presence of Sexually Transmitted Diseases. It is expressed in terms of zeroes and ones.\n13.\tSTDs (number) \u2013 It indicates the total number of sexually transmitted disease present with the patient. It is expressed in terms of numbers.\n14.\tSTDs:condylomatosis \u2013 It indicates the presence of Condylomatosis with the patient.\n15.\tSTDs:cervical\tcondylomatosis \u2013It indicates\tthe presence of\tCervical condylomatosis.\n16.\tSTDs:vaginal condylomatosis - It indicates\tthe presence of Vaginal  condylomatosis.\n17.\tSTDs:vulvo-perineal condylomatosis \u2013 It indicates the presence of Vulvo- Perineal condylomatosis.\n18.\tSTDs:syphilis \u2013 It indicates the presence of Syphilis.\n19.\tSTDs:pelvic  inflammatory  disease-  It  indicates  the presence of pelvic inflammatory disease.\n20.\tSTDs:genital herpes \u2013 It indicates the presence of Genital Herpes.\n21.\tSTDs:molluscum contagiosum \u2013 It indicates the presence of Molluscum Contagiosum.\n22.\tSTDs:AIDS \u2013 It indicates the presence of AIDS in the patient.\n23.\tSTDs:HIV \u2013 It indicates the presence of HIV in the patient.\n24.\tSTDs:Hepatitis B \u2013 It indicates the presence of Hepatitis B in the patients.\n25.\tSTDs:HPV \u2013 It indicates the presence of HPV in the patients.\n26.\tSTDs: Number of diagnosis \u2013 It indicate the total number of times the STDs have been diagnosed.\n27.\tSTDs: Time since first diagnosis \u2013 It indicates the total number of years since the first diagnose.\n28.\tSTDs: Time since last diagnosis \u2013 It indicates the total number of years elapsed since the last diagnose.\n29.\tDx:Cancer \u2013 It indicates the presence of Cancer after the diagnose.\n30.\tDx:CIN \u2013 It indicates the presence of Cervical intraepithelial neoplasia.\n31.\tDx:HPV- It indicates the presence of Human papillomaviruses.\n32.\tDx - It indicates the presence any one among cancer, CIN and HPV.\n33.\tHinselmann \u2013 also known as colposcopy, is a medical diagnostic procedure to examine an illuminated, magnified view of the cervix as well as the vagina and vulva.\n34.\tSchiller - Schiller Iodine test is a medical test in  which iodine solution is applied to the cervix in order to diagnose cervical cancer.\n35.\tCytology \u2013 also called as PaP smears test, helps detect abnormal cells in the cervix, which can develop into cancer.\n36.\tBiopsy (TARGET) - A cervical biopsy is a surgical procedure in which a small amount of tissue is removed from the cervix. A cervical biopsy is usually done after an abnormality has been found during cytology.\n","73273679":"##### Inference :\n\n* So the table shows obviously that recall score has got better after feature selection.\n* Let's improve it further by tuning the hyper parameters of the models.","16f2fa2f":"# Feature Engineering","f25ba650":"### Missing Value Imputation for STDs_genital_herpes","4ad2108e":"### Missing Value Imputation for No_pregnancies","49eb061a":"\n## Multivariate Analysis ","56243289":"### Missing Value Imputation for STDs_vaginal_condylomatosis","e6552c43":"### Feature Selection","a71fb93f":"##### Inference :\n    \n* While building models ,though outliers removal may have positive impact like getting higher accuracy and other metrics.\n    Once again since it's an medical dataset, it's not recommended to just cap or remove outliers.\n    for example : there are some females who are aged 70+ which comes out as extreme values, generally we should not be \n    capping them to the upper whiscur value (around 50) as it would alter the information provided by the data.\n    Hence we are here building models with the original values as such.","b79214e5":"### ii) Age and Smoking Habits vs Biopsy","6b88d784":"##### Inference :\n* Woah, the recall score has improved a lot after hyperparameter tuning.\n* Let's finally move on to ensemble techniques and check out if there's room for further improvement.","74d0ef2a":"* Cervical cancer is the leading gynecological malignancy worldwide. \n* The business objective is to build a Machine Learning Prediction Model that predicts the result of Biopsy test and thereby confirming the presence\/non-presence of cervical cancer in the patients.\n* It is studied that there is more chance of survival if the cancer is detected during its early stages.\n![image.png](attachment:image.png)\n\n* Therefore, the ML model should be helpful in predicting the cancer and thus it can be a huge assest to the medical industry.","b730ee10":"### Hyper Parameter Tuning","f841b6ed":"### Missing Value Imputation for IUD_years","c1979330":"##### Inference :\n\n* Those who smoke and had their first sexual intercourse in younger age between 15yrs and 18yrs are more prone to be test as Positive in Biopsy test.\n* There is no clear relation between smoking and number of sex partners as the smoking cancer patients and non smoking patients, both have nearly same number of sex partners.\n* The person who smokes and have higher number of pregnancies are more prone to be tested as positive in Biopsy test.","334d0aa9":"### Missing Value Imputation for Hormonal_Contraceptives_Years","d5f2151c":"#### Observation :\n    \n* So, only 6.4% of the record have positive biopsy result i.e. people having cervical cancer.\n* Hence there is a imbalance in the data which needs to taken care in model building section.","0a28e39f":"* First of all, we have to take care of the data imbalance of the target variable.\n* Here we have used OVERSAMPLING TECHNIQUE - SMOTE to overcome the data imbalance","ad186066":"##### Ensemble Inference :\n    \n* Bagging : There is a no improvement in recall score.\n\n* Ada Boost : ADA boost may not be the optimum way as there is overfitting.\n\n* Gradient Boost : Gave the best recall score of 95.2 %\n\n* Finally after appling all optimization techniques, we were able to increase recall score from 53.3 % to 95.2 %7 %\n    \n    ","43925cc7":"## Final Model :\n        \n* So, finally we have choosed 'Gradient boosting' model as it gave the best accuracy score, roc score, f1 score and recall score compared to other models.\n* So, the Gradient Boost model looks superior while considering the overall evaluation metrics.\n* Therefore, we have finalized it as the final model.\n","384f7d0f":"### Missing Value Imputation for STDs_AIDS","b0979be9":"Binning the columns that deals with years","0bf2d24b":"* Finally we have imputed all the columns those had null values.","fe007488":"* Interesting to see that there are a few '?' values in the data.\n* We would cover those in the missing values part.","72697a6e":"* Here using IQR technique, we have capped the extreme values above the upper whiscur value to the value of upper whiscur and similarly capped the extreme lower values to the value of lower whiscur value","a64e8494":"* We can see that the features 'STD_Time_since_first_diagnosis','STDs_Time_since_last_diagnosis' are having more than 80 % null values. \n* So we are dropping it off and also the features 'Smokes' and 'First_sexual_intercourse' are having very little amount of null values and hence we would be removing those particular missing records of those 2 columns.","9e502a28":"### Sampling","09ca9020":"##### No_of_sex_partner - Total number of sexual partners the patient had.\n##### First_sexual_intercourse - The age when the patient had their first sexual intercourse\n##### No_pregnancies - Total number of pregnancies the patient had","9b21e575":"### Missing Value Imputation for Hormonal_Contraceptives","7c22b15a":"* Smokes - It indicates whether the person smokes or not\n* smokes_yr_cat - It indicates for how many years the person has been smoking\n* smokepack_yr_cat - It indicates how many packets per year the person is smoking","f347d407":"* So, first we are replacing '?' with Numpy NaN values.","826bc08b":"### Missing Value Imputation of IUD","e45eb801":"## Limitations Faced with the dataset \n* The dataset had a lot missing values, class-imbalance, lack of enough\/adequate records (rows\/entries) which would adversely affect the model prediction.\n* We overcame these limitations by best practices of industry like imputing the null values with algorithms and overcoming class imbalance using sampling techniques. ","a2b6f2d7":"## Checking the % of missing values in each feature","7a42f898":"### Evaluation Metrics : \n\n##### Accuracy : \n* Ratio of correctly predicted observation to the total observations. It is a great measure but only when you have symmetric datasets where values of false positive and false negatives are almost same.\n    \n##### Precision : \n* The ratio of correctly predicted positive observations to the total predicted positive observations.\n    \n##### Recall (Sensitivity) : \n* The ratio of correctly predicted positive observations to the all observations in actual class - yes(1).\n    \n##### F1 Score :\n* The weighted average of Precision and Recall\n    \n##### ROC score : \n* Measures how well the model can segragate the target classes.\n    \n### Base Model Inference :\n\n* Specifically as this is an sensitive medical data, recall score needs to be given higher importance and hence we are choosing both \"Decision Tree\" and \"Random Forest\" models as our base model because of their higher recall and roc_auc scores.\n* Why recall should be given higher importance is that we have to predict actual cancer patients as cancer patient accurately.\n* Predicting a cancer patient as a healthy (non-cancer) is very dangerous and if predicted wrongly it may cause chaos to the life of a patient.\n* Note : The base models are built using the entire features with default hyper parameters and before oversampling the data.","dc2270c0":"## Boosting","5f26fd96":"## Partioning the features manually into categorical and numerical","6e8e44b6":"### Missing Value Imputation for STDs_Number","93234768":"## Checking for missing values","41b639e8":"### Missing Value Imputation for STDs_molluscum_contagiosum","83dd4cbb":"### Missing Value Imputation for STDs_HIV","e858afa6":"### Inference :\n    \n* Most of the patients are in the age group 20 -40.\n    \n* We have just grouped the overall features  as :\n        \n    1. Sexual habits attributes\n    2. Smoking habits attributes\n    3. Birth control attributes\n    4. STD attributes\n    \n#### Smoking Habits :\n* Relatively larger proportion of the patients are non smokers (around 700) and only a very few (around 100) are smokers.\n  \n#### Sexual Habits :\n* Predominant of the patients had 0 -5  sexual partners.\n* Most of them had their first sexual intercourse between 15 - 20 years.\n* The larger group of patient had 1 -3 pregancies overall in their life.\n       \n#### Birth Control Habits :\n* Most of the patients have used Hormonal contraceptives methods like pills and medications for birth controls where only a few of them have opted for intrauterine devices (IUDs). The reason for this is may be that hormonal contraceptives are readily available in shops (needs presciption) and one can take those at their home on their own with some sort of guidance where as IUD needs an doctor supervision and the patient needs to be in hospital.\n* Generally most patients have used birth control methods only for less than 2 years while very few of them have used  more than 2 years.\n        \n#### Sexually Transmitted Diseases :\n* The countplot above depicts that only a very very people are affected by any one of the STDs.\n* So clearly there's an imbalance here and hence we can suggest that the STD attributes may have significant role while building the models.\n \n     ","22887f91":"##### Inferences:\n\n* Most of the patients have used Hormonal contraceptives methods like pills and medications for birth controls where only a few of them have opted for intrauterine devices (IUDs). The reason for this is may be that hormonal contraceptives are readily available in shops (needs presciption) and one can take those at their home on their own with some sort of guidance where as IUD needs an doctor supervision and the patient needs to be in hospital.\n    \n* Generally most patients have used birth control methods only for less than 2 years while very few of them have used  upto 8","f5383d89":"#  Reading and Understanding the data","54432692":"## Checking the datatypes","c42267f9":"* Now the outliers has been removed\/capped ","3bb41484":"* We have a total of 858 records and 36 different features.","960f9b50":"### Missing Value Imputation for STDs_condylomatosis","8102366f":"* We are doing it manually it because there are a few columns like 'No_of_sex_partner' , 'First_Sexual_intercourse' , 'No_pregnancies' are actually of object categorical type but which should be of numerical type in general","6c7bbf16":"###  AdaBoost","c8660a7a":"# Loading the required libraries","dc9a6e73":"* Just had a quick look at the Stats of the numerical features","0a72b0dd":"As the dataset is a sensitive and medical one, we are not going to use the method of imputation using Mean or Median or Mode.\nInstead here we have used Machine Learning Models to fill the missing values.\nThe steps followed are : \n1. Remove the column that needs to be imputed from the independent columns list.\n2. For everyother independent column in the list (other than the column we are going to impute), fill the null values with mode\/median depending on their datatype.\n3. The concept in ML based imputation is that, we will choose the column that needs to be imputed as our 'Y' and remaining all as 'X' (basically in Step 2, we are imputing X columns so that X columns wont have missing values while training the model)\n4. So now, Y alone will be having null values that needs to be imputed.\n5. Test data will be those records that contains missing values of Y where as training records will be those records that have filled values of Y.\n6. So we build a ML model and train it with filled values and predict the missing values of Y.\n7. For Numerical columns we choosed DecisionTreeRegressor and for Categorical columns we built DecisionTreeClassifier models.","8a0ab686":"##### Inferences :\n\n* There is a huge difference between the proportions of the count of STDs i.e. clearly a very high percent of patients are not affected with any sexual diseases and onlly a very few (less than 100) are infected with those. So there's clearly an imbalance over here and so we can infer may be STD features won't be of much useful while building the models.\n* Even among those who have any of the disease, only a very very few of them are tested positive.\n* Also among thse STD people, most of them have either 1 or 2 sexual disease.","c4107bd6":"### Missing Value Imputation for STDs_syphilis "}}