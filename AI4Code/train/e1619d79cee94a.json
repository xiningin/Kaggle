{"cell_type":{"9ce1e65a":"code","d6d3ddc5":"code","c621e304":"code","91bd261b":"code","84b7c95d":"code","ed60d158":"code","aa2f1545":"code","7e128a1a":"code","633860f7":"code","a1c9f4a7":"code","814d7e4a":"code","99afaa76":"code","69596f1e":"code","0ca9347b":"code","95fbebf2":"code","62b652bb":"code","137aab21":"code","b60e823c":"code","266ecf22":"code","21f436e4":"code","e007612d":"code","eb58b27a":"code","eaf692ab":"code","c952b5c5":"code","b6a9e4c4":"code","47c608e5":"code","2cd3e646":"code","e112a0ca":"code","b10de554":"code","9ee48a4c":"code","a9fb7a51":"code","d7127d82":"code","533f9b17":"code","05868d18":"code","727ac60b":"code","00c79700":"code","c428d94e":"code","4f37fb1b":"code","a3854b2e":"code","4298ee29":"code","0fd25ddc":"code","3fa3e887":"code","ae520522":"code","19bcbba1":"code","eed723e7":"code","02ad6960":"code","df6f9cc1":"code","9cf2df9e":"code","a43b3345":"code","81c3bb7e":"code","8b99beab":"code","f2792ee6":"code","23c0f9d2":"code","036766d9":"code","940876c1":"code","ea6bed3d":"code","749841fe":"code","471e2df4":"code","6a4f8dc7":"code","856854d7":"code","f61c7e29":"code","2a12b6b2":"code","8db07bc9":"code","d60ad3e2":"code","b0167d41":"code","bd3ed836":"code","49fb928f":"code","0f9b8537":"code","0f5912fd":"code","4b550eaf":"code","8341e2f2":"code","cedaaac9":"code","3135b5a0":"code","dfcbf506":"code","b19cc01e":"code","055a3c82":"code","936b011c":"code","f2b541b6":"code","9c2209d5":"code","fb99a5f5":"code","654568cb":"code","7ebc9db6":"markdown","2157cb18":"markdown","243a34f6":"markdown","a26f7c83":"markdown","61511001":"markdown","c1a088c4":"markdown"},"source":{"9ce1e65a":"!pip install geopy\n!pip install emoji --upgrade","d6d3ddc5":"#import libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nimport datetime\n#from geopy.geocoders import Nominatim\n#import plotly.express as px\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nimport statsmodels.api as sm","c621e304":"#create a function for distance calculation between the two locations latitudes and logitudes\nfrom math import radians, cos, sin, asin, sqrt\ndef calculate_distance(lat1, lat2, lon1, lon2):\n\t\n\t# The math module contains a function named\n\t# radians which converts from degrees to radians.\n\tlon1 = radians(lon1)\n\tlon2 = radians(lon2)\n\tlat1 = radians(lat1)\n\tlat2 = radians(lat2)\n\t\n\t# Haversine formula\n\tdlon = lon2 - lon1\n\tdlat = lat2 - lat1\n\ta = sin(dlat \/ 2)**2 + cos(lat1) * cos(lat2) * sin(dlon \/ 2)**2\n\n\tc = 2 * asin(sqrt(a))\n\t\n\t# Radius of earth in kilometers. Use 3956 for miles\n\tr = 6371\n\t\n\t# calculate the result\n\treturn(c * r)\n\t\n\t\n","91bd261b":"#read the data \nuber_fare_df= pd.read_csv('..\/input\/uber-fares-dataset\/uber.csv')","84b7c95d":"uber_fare_df.head()","ed60d158":"uber_fare_df.columns","aa2f1545":"uber_fare_df_1= uber_fare_df.drop(['Unnamed: 0','key'],axis=1) # key and Unnamed ID seems to have no impact on our study\n","7e128a1a":"#study how many missing data are there ?\nuber_fare_df_1.isnull().sum()","633860f7":"#since there are 2 values which are missing , we can remove it ....\nuber_fare_df_1.dropna(axis=0,inplace=True)","a1c9f4a7":"uber_fare_df_1","814d7e4a":"#splitting up the date (pickup date) to extract meaningful datas\n\n#extract the time out of date and bin it to the morning, afternoon, evening, night\nuber_fare_df_1['pickup_datetime'] = pd.to_datetime(uber_fare_df_1.pickup_datetime,utc=True)","99afaa76":"uber_fare_df_1['pickup_timehour']= uber_fare_df_1['pickup_datetime'].apply(lambda x: x.hour)\nuber_fare_df_1['Day']= uber_fare_df_1['pickup_datetime'].dt.day_name()\nuber_fare_df_1['Day Part']= pd.cut(uber_fare_df_1['pickup_timehour'],bins=[-1,4,12,17,21,23],labels=['Night','Morning','Afternoon','Evening','Night'],ordered=False)\nuber_fare_df_1['pickup_month']= uber_fare_df_1['pickup_datetime'].apply(lambda x: x.month)\nuber_fare_df_1['pickup_year']= uber_fare_df_1['pickup_datetime'].apply(lambda x: x.year)\nuber_fare_df_1['distance_travelled (KM)']= uber_fare_df_1.apply(lambda x: calculate_distance(x['pickup_latitude'],x['dropoff_latitude'],x['pickup_longitude'],x['dropoff_longitude']),axis=1)\n","69596f1e":"uber_fare_df_1","0ca9347b":"uber_fare_df_1.describe()","95fbebf2":"#here we can see some data are not real in case ---------------- Final decision\n\n### fare cannot be negative (put the data in test )\n\n### passenger count is not zero (first remove it and study again using that)\n\n#latitude and longitude should not be zero (because location is in middle of Atlantic Ocean, so need to drop all the values )\n","62b652bb":"outlier_data= uber_fare_df_1[(uber_fare_df_1['fare_amount']<=0)|(uber_fare_df_1['passenger_count']==0)|(uber_fare_df_1['pickup_latitude']==0.000000)]","137aab21":"# checking the fare amount =0\noutlier_data[outlier_data['fare_amount']<=0]","b60e823c":"outlier_data[(outlier_data['pickup_latitude']==0.000000)&(outlier_data['pickup_longitude']==0.000000)]","266ecf22":"#distribution of latitude for the outlier data where lattitude==0 and longitude==0\nsb.histplot(outlier_data[(outlier_data['pickup_latitude']==0.000000)&(outlier_data['pickup_longitude']==0.000000)]['dropoff_latitude'])","21f436e4":"sb.histplot(outlier_data[(outlier_data['pickup_latitude']==0.000000)&(outlier_data['pickup_longitude']==0.000000)]['fare_amount'],kde=True)","e007612d":"outlier_data[outlier_data['passenger_count']==0]","eb58b27a":"### study the distribution of distance travelled\n\nsb.histplot(outlier_data[outlier_data['passenger_count']==0]['distance_travelled (KM)'])\n\nplt.xlim(0,30)\nplt.show()","eaf692ab":"print(f'Before dropping {uber_fare_df_1.shape}')","c952b5c5":"#remove the data \n#remove the latitude and longitude ===000, passenger_count=0, fare<=0\n\nuber_fare_df_1=uber_fare_df_1[~((uber_fare_df_1['pickup_latitude']==0.000000)&(uber_fare_df_1['pickup_longitude']==0.000000))]\nprint(f'After dropping the data, the final shape is {uber_fare_df_1.shape}')","b6a9e4c4":"199999-196220","47c608e5":"uber_fare_df_1=uber_fare_df_1[~(uber_fare_df_1['fare_amount']<=0)]\nuber_fare_df_1=uber_fare_df_1[~(uber_fare_df_1['passenger_count']==0)]\nprint(f'After dropping the data, the final shape is {uber_fare_df_1.shape}')","2cd3e646":"uber_fare_df_1=uber_fare_df_1[~(uber_fare_df_1['passenger_count']==208)]\nprint(f'After dropping the data, the final shape is {uber_fare_df_1.shape}')","e112a0ca":"sb.boxplot(uber_fare_df_1['distance_travelled (KM)'])","b10de554":"#let's put a threshold for distance above 500 km as not possible\nuber_fare_df_1= uber_fare_df_1[uber_fare_df_1['distance_travelled (KM)']<=50]\nprint(f'After dropping the data, the final shape is {uber_fare_df_1.shape}')\n","9ee48a4c":"196220-195511","a9fb7a51":"uber_fare_df_1.describe()","d7127d82":"plt.scatter(uber_fare_df_1['distance_travelled (KM)'],uber_fare_df_1['fare_amount'])\nplt.xlabel('Distance Travelled (KM)')\nplt.ylabel('Fare Amount')\nplt.show()\n","533f9b17":"uber_fare_df_1","05868d18":"#study how much fare for each day in different parts of day \nplt.figure(figsize=(20,8))\nsb.histplot(uber_fare_df_1['Day'])\nplt.ylabel('Trip Count')\nplt.title('Day vs Trip count')\nplt.show()","727ac60b":"#study how much fare for each day in different parts of day \nplt.figure(figsize=(20,8))\nsb.histplot(uber_fare_df_1['Day Part'])\nplt.ylabel('Trip Count')\nplt.title('Day Part vs Trip count')\nplt.show()","00c79700":"uber_fare_df_1.columns","c428d94e":"#study how much passenger (in mean) for each day in different parts of day \nplt.figure(figsize=(20,8))\nsb.barplot(x=uber_fare_df_1['Day'],y=uber_fare_df_1['passenger_count'],hue=uber_fare_df_1['Day Part'],order=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'],estimator=sum)\nplt.ylabel('Passenger Count')\nplt.title('Day vs Passenger Count ')\nplt.show()","4f37fb1b":"#study how much passenger (in mean) for each day in different parts of day \nplt.figure(figsize=(20,8))\nsb.barplot(x=uber_fare_df_1['Day'],y=uber_fare_df_1['distance_travelled (KM)'],hue=uber_fare_df_1['Day Part'],order=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'])\nplt.ylabel('Distance Travelled')\nplt.title('Day vs Distance Travelled ')\nplt.show()","a3854b2e":"#month wise study \nplt.figure(figsize=(12,20))\nplt.title('Month vs fare amount')\nsb.barplot(x=uber_fare_df_1['pickup_month'],y=uber_fare_df_1['fare_amount'],estimator=sum)\nplt.xlabel('Month')\nplt.ylabel('fare amount')\nplt.show()","4298ee29":"plt.figure(figsize=(12,10))\nplt.title('Month vs  distance travelled')\nsb.barplot(x=uber_fare_df_1['pickup_month'],y=uber_fare_df_1['distance_travelled (KM)'],estimator=np.mean)\nplt.xlabel('Month')\nplt.ylabel('Distance Travelled (KM)')\nplt.show()","0fd25ddc":"#year wise study \nplt.figure(figsize=(12,20))\nplt.title('year vs fare amount')\nsb.barplot(x=uber_fare_df_1['pickup_year'],y=uber_fare_df_1['fare_amount'])\nplt.xlabel('Year')\nplt.ylabel('Average fare amount')\nplt.show()","3fa3e887":"#year wise study \nplt.figure(figsize=(12,8))\nplt.title('year vs passenger count')\nsb.barplot(x=uber_fare_df_1['pickup_year'],y=uber_fare_df_1['passenger_count'],estimator=sum)\nplt.xlabel('Year')\nplt.ylabel('Total Passenger count')\nplt.show()","ae520522":"#year wise study \nplt.figure(figsize=(12,8))\nplt.title('year vs average distance travelled')\nsb.barplot(x=uber_fare_df_1['pickup_year'],y=uber_fare_df_1['distance_travelled (KM)'])\nplt.xlabel('Year')\nplt.ylabel('Average Distance Travelled')\nplt.show()","19bcbba1":"uber_fare_df_1","eed723e7":"uber_df_2= uber_fare_df_1.copy()","02ad6960":"X= uber_fare_df_1.drop(['pickup_datetime','pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','pickup_timehour','fare_amount'],axis=1)\ny = uber_fare_df_1['fare_amount']","df6f9cc1":"df_temp= pd.get_dummies(uber_fare_df_1[['Day','Day Part']],drop_first=True)\nuber_fare_df_1 = pd.concat([uber_fare_df_1,df_temp],axis=1)\nuber_fare_df_1","9cf2df9e":"uber_fare_df_1.drop(['Day','Day Part'],axis=1,inplace=True)","a43b3345":"X= uber_fare_df_1.drop(['pickup_datetime','pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','pickup_timehour','fare_amount'],axis=1)\ny = uber_fare_df_1['fare_amount']\nX_1=X.copy()\n","81c3bb7e":"def vif_creation(X):\n    vif_df= pd.DataFrame()\n    vif_df['Feature Name'] = X.columns\n    vif_df['Vif Factor']= [variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\n    return vif_df\n\nvif_df= vif_creation(X_1)\nvif_df","8b99beab":"X_1.drop(['pickup_year','pickup_month'],axis=1,inplace=True)\nvif_df=vif_creation(X_1)\nvif_df","f2792ee6":"X.skew(axis=0)","23c0f9d2":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()","036766d9":"from sklearn.model_selection import train_test_split\n#X_1=sm.add_constant(X_1)\nX_train,X_test,y_train,y_test= train_test_split(X_1,y,test_size=0.3,random_state=100)\nX_train['distance_travelled (KM)']=scaler.fit_transform(X_train['distance_travelled (KM)'].values.reshape(-1,1))\nX_test['distance_travelled (KM)'] = scaler.transform(X_test['distance_travelled (KM)'].values.reshape(-1,1))","940876c1":"X_train.describe()","ea6bed3d":"##model building \nfrom sklearn.linear_model import LinearRegression\nlr_model= LinearRegression()\nlr_model.fit(X_train,y_train)","749841fe":"print(f'The train accurcay of linear regression model is {lr_model.score(X_train,y_train)} and test score is {lr_model.score(X_test,y_test)}')","471e2df4":"#model seems to be good but preents overfitting.But needs to be improved","6a4f8dc7":"X_2= X.copy()\n\nX_2.drop(['pickup_year','pickup_month','passenger_count'],axis=1,inplace=True)","856854d7":"vif_creation(X_2)","f61c7e29":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test= train_test_split(X_2,y,test_size=0.3,random_state=100)","2a12b6b2":"scaler= MinMaxScaler()\nX_train['distance_travelled (KM)']=scaler.fit_transform(X_train['distance_travelled (KM)'].values.reshape(-1,1))\nX_test['distance_travelled (KM)'] = scaler.transform(X_test['distance_travelled (KM)'].values.reshape(-1,1))","8db07bc9":"from sklearn.neighbors import KNeighborsRegressor\nknn_model= KNeighborsRegressor()\nknn_model.fit(X_train,y_train)\nprint(f'The train accurcay of KNN model is {knn_model.score(X_train,y_train)} and test score is {knn_model.score(X_test,y_test)}')","d60ad3e2":"### based on default parameters, knn model is fine but is little overfitting","b0167d41":"from sklearn.model_selection import RandomizedSearchCV\nparams = {'n_neighbors':[50,100,150,200,250,300],'weights':['uniform', 'distance'],'metric':['euclidean','minkowski']}\ngrid_model_knn= RandomizedSearchCV(estimator=knn_model,param_distributions=params,cv=5,scoring='r2',return_train_score=True,n_jobs=-1)\ngrid_model_knn.fit(X_train,y_train)\n    \n    \n\n\n","bd3ed836":"grid_model_knn.best_params_","49fb928f":"grid_model_knn.best_score_","0f9b8537":"#building the model with the above params\nknn_model=KNeighborsRegressor(**grid_model_knn.best_params_)\nknn_model.fit(X_train,y_train)\nprint(f'The train accurcay of KNN model is {knn_model.score(X_train,y_train)} and test score is {knn_model.score(X_test,y_test)}')","0f5912fd":"### KNN model seems to have almost simmilar accuracy to linear regression, but there is little increment in scores!","4b550eaf":"#### study the data with using RandomForestRegressor\nX= uber_df_2.drop(['pickup_datetime','pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','pickup_timehour','fare_amount'],axis=1)\ny =uber_df_2['fare_amount']","8341e2f2":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder= LabelEncoder()\nX[['Day','Day Part']]= X[['Day','Day Part']].apply(label_encoder.fit_transform)","cedaaac9":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nX_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.3,random_state=100)\nsc_1= StandardScaler()\nX_train['distance_travelled (KM)']= sc_1.fit_transform(X_train['distance_travelled (KM)'].values.reshape(-1,1))\nX_test['distance_travelled (KM)']= sc_1.transform(X_test['distance_travelled (KM)'].values.reshape(-1,1))","3135b5a0":"#studying with default parameters\nfrom sklearn.ensemble import RandomForestRegressor\nrf_reg = RandomForestRegressor(max_depth=3)\nrf_reg.fit(X_train,y_train)","dfcbf506":"rf_reg.score(X_train,y_train)","b19cc01e":"rf_reg.score(X_test,y_test)","055a3c82":"#let's study the model randomforestregressor using the n_estimators\nfrom sklearn.model_selection import RandomizedSearchCV\nrf_reg= RandomForestRegressor()\nparameters= {'n_estimators':[i for i in range(100,1500,300)],'max_depth':[i for i in range(2,20,5)],'min_samples_split':[30,50,80,100],'min_samples_leaf':[10,20,30,40,50]}\nn_folds=5\ngrid_model= RandomizedSearchCV(estimator=rf_reg,param_distributions=parameters,cv=n_folds,scoring='r2',return_train_score=True)\ngrid_model.fit(X_train,y_train)","936b011c":"grid_model.best_params_","f2b541b6":"grid_model.best_score_","9c2209d5":"df_nestimators= pd.DataFrame(grid_model.cv_results_)","fb99a5f5":"df_nestimators","654568cb":"### creating a model out of the obtained parameters\nrf_reg = RandomForestRegressor(**grid_model.best_params_)\nrf_reg.fit(X_train,y_train)\n\nprint(f'The test score of random forest regression model is {rf_reg.score(X_test,y_test)} and train score is {rf_reg.score(X_train,y_train)}')","7ebc9db6":"### Exploratory Data Analysis (EDA)","2157cb18":"### Linear Regression Model","243a34f6":"### Random Forest Regressor","a26f7c83":"#### Feature modification & Feature selection","61511001":"### KNN ","c1a088c4":"#### Random Forest Regression seems to have better scores than all the models studied"}}