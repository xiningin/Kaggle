{"cell_type":{"674f279e":"code","f867cd7c":"code","318bf20f":"code","c4d51a1e":"code","6ff972cf":"code","e9a49d17":"code","5c1703f5":"code","89496e63":"code","c137eaa9":"code","d3739fb9":"code","185e89d6":"code","383b099b":"code","fb1eadc8":"code","07b5778a":"code","011b4944":"code","853f94ae":"code","28fe116f":"code","326027cd":"code","cfdedcdc":"code","4584e978":"code","c271ec92":"code","81c1977d":"code","2a8600ac":"code","294d50fa":"code","f14ff938":"code","2ee38a6a":"code","0d1f1ec7":"code","45162602":"code","d9f1d280":"code","5f5c2b65":"code","371de0e4":"code","ecc42525":"code","29fe0b62":"code","da0b15c9":"code","f5c314c2":"code","761d7709":"code","6f4f3daf":"code","0eca16bf":"code","62459005":"code","c0e734a2":"code","a80c0b59":"code","7d28c753":"code","7cb0d172":"markdown","3d1e9d09":"markdown","630f6b3e":"markdown","3565906b":"markdown","ed66207f":"markdown"},"source":{"674f279e":"str_save_filename = 'Genes_cicardian_cycle_related.csv'","f867cd7c":"\nlist_circadian_clock = [ 'ARNTL','ARNTL2','BHLHE40','BHLHE41','BTRC','CIART','CIPC','CIRBP','CLOCK','CRY1',\n    'CRY2','CSNK1D','CSNK1E','CSNK2A1','CSNK2A2','CSNK2B','DBP','EZH2','FBXL15','FBXL3','FBXW11','RACK1','GSK3B',\n                        'KDM1A','NFIL3','NONO','NPAS2','NR1D1','NR1D2','NR3C1','PARP1','PER1','PER2','PER3','PPARA','PPP1CA','PPP1CB','PPP1CC','PPP2CA','PPP2CB','PPP2R1A','PPP2R1B','PPP2R5D','PPP2R5E','PPP5C','PRKACA','PRKCA','RORA','RORB','RORC','SIRT1','TIMELESS','WDR5']\n# GNB2L1 - > RACK1\n# CIRP -> CIRBP\n# KMD1A -> KDM1A\n# PARP-1 -> PARP1\n\nlen(list_circadian_clock)\nlist_genes = list_circadian_clock\nprint(len(list_genes))","318bf20f":"l = []\nfor g in list_genes:\n    if g.startswith('PPP'):\n        l.append(g)\nprint(len(l),l)","c4d51a1e":"import numpy as np\nimport pandas as pd \nimport time \nimport matplotlib.pyplot as plt","6ff972cf":"list_proangiogenic_prolif = ['Vegfa', 'Vegfb', 'Vegfc', 'Vegfd','Angpt1','Angpt2','Flt1','Sema3a','Sema3f','Fgf2','Pgf','Hgf','Slit1','Slit2','Svep1','Ccbe1','Adamts3','Adamts9','Adamts1','Adamts18','Tgfb1','Tgfb2','Tgfb3','Dll4','Dll1','Bmp9','Bmp10','Pdgfb','Apln']\nlist_proangiogenic_prolif = [ t.upper() for t in list_proangiogenic_prolif ]\nprint(len(list_proangiogenic_prolif),list_proangiogenic_prolif)","e9a49d17":"    G1S_genes_Tirosh = ['MCM5', 'PCNA', 'TYMS', 'FEN1', 'MCM2', 'MCM4', 'RRM1', 'UNG', 'GINS2', 'MCM6', 'CDCA7', 'DTL', 'PRIM1', 'UHRF1', 'MLF1IP', 'HELLS', 'RFC2', 'RPA2', 'NASP', 'RAD51AP1', 'GMNN', 'WDR76', 'SLBP', 'CCNE2', 'UBR7', 'POLD3', 'MSH2', 'ATAD2', 'RAD51', 'RRM2', 'CDC45', 'CDC6', 'EXO1', 'TIPIN', 'DSCC1', 'BLM', 'CASP8AP2', 'USP1', 'CLSPN', 'POLA1', 'CHAF1B', 'BRIP1', 'E2F8']\n    G2M_genes_Tirosh = ['HMGB2', 'CDK1', 'NUSAP1', 'UBE2C', 'BIRC5', 'TPX2', 'TOP2A', 'NDC80', 'CKS2', 'NUF2', 'CKS1B', 'MKI67', 'TMPO', 'CENPF', 'TACC3', 'FAM64A', 'SMC4', 'CCNB2', 'CKAP2L', 'CKAP2', 'AURKB', 'BUB1', 'KIF11', 'ANP32E', 'TUBB4B', 'GTSE1', 'KIF20B', 'HJURP', 'CDCA3', 'HN1', 'CDC20', 'TTK', 'CDC25C', 'KIF2C', 'RANGAP1', 'NCAPD2', 'DLGAP5', 'CDCA2', 'CDCA8', 'ECT2', 'KIF23', 'HMMR', 'AURKA', 'PSRC1', 'ANLN', 'LBR', 'CKAP5', 'CENPE', 'CTCF', 'NEK2', 'G2E3', 'GAS2L3', 'CBX5', 'CENPA']\n    ","5c1703f5":"G1S_genes_Freeman = ['ADAMTS1', 'ASF1B', 'ATAD2', 'BARD1', 'BLM', 'BRCA1', 'BRIP1', 'C17orf75', 'C9orf40', 'CACYBP', 'CASP8AP2', 'CCDC15', 'CCNE1', 'CCNE2', 'CCP110', 'CDC25A', 'CDC45', 'CDC6', 'CDC7', 'CDK2', 'CDT1', 'CENPJ', 'CENPQ', 'CENPU', 'CEP57', 'CHAF1A', 'CHAF1B', 'CHEK1', 'CLSPN', 'CREBZF', 'CRYL1', 'CSE1L', 'DCLRE1B', 'DCTPP1', 'DEK', 'DERA', 'DHFR', 'DNA2', 'DNAJC9', 'DNMT1', 'DONSON', 'DSCC1', 'DSN1', 'DTL', 'E2F8', 'EED', 'EFCAB11', 'ENDOD1', 'ETAA1', 'EXO1', 'EYA2', 'EZH2', 'FAM111A', 'FANCE', 'FANCG', 'FANCI', 'FANCL', 'FBXO5', 'FEN1', 'GGH', 'GINS1', 'GINS2', 'GINS3', 'GLMN', 'GMNN', 'GMPS', 'GPD2', 'HADH', 'HELLS', 'HSF2', 'ITGB3BP', 'KIAA0101', 'KNTC1', 'LIG1', 'MCM10', 'MCM2', 'MCM3', 'MCM4', 'MCM5', 'MCM6', 'MCM7', 'MCMBP', 'METTL9', 'MMD', 'MNS1', 'MPP1', 'MRE11A', 'MSH2', 'MSH6', 'MYO19', 'NASP', 'NPAT', 'NSMCE4A', 'ORC1', 'OSGEPL1', 'PAK1', 'PAQR4', 'PARP2', 'PASK', 'PAXIP1', 'PBX3', 'PCNA', 'PKMYT1', 'PMS1', 'POLA1', 'POLA2', 'POLD3', 'POLE2', 'PRIM1', 'PRPS2', 'PSMC3IP', 'RAB23', 'RAD51', 'RAD51AP1', 'RAD54L', 'RBBP8', 'RBL1', 'RDX', 'RFC2', 'RFC3', 'RFC4', 'RMI1', 'RNASEH2A', 'RPA1', 'RRM1', 'RRM2', 'SLBP', 'SLC25A40', 'SMC2', 'SMC3', 'SSX2IP', 'SUPT16H', 'TEX30', 'TFDP1', 'THAP10', 'THEM6', 'TIMELESS', 'TIPIN', 'TMEM106C', 'TMEM38B', 'TRIM45', 'TRIP13', 'TSPYL4', 'TTI1', 'TUBGCP5', 'TYMS', 'UBR7', 'UNG', 'USP1', 'WDHD1', 'WDR76', 'WRB', 'YEATS4', 'ZBTB14', 'ZWINT']\nG2M_genes_Freeman = ['ADGRE5', 'ARHGAP11A', 'ARHGDIB', 'ARL6IP1', 'ASPM', 'AURKA', 'AURKB', 'BIRC5', 'BORA', 'BRD8', 'BUB1', 'BUB1B', 'BUB3', 'CCNA2', 'CCNB1', 'CCNB2', 'CCNF', 'CDC20', 'CDC25B', 'CDC25C', 'CDC27', 'CDCA3', 'CDCA8', 'CDK1', 'CDKN1B', 'CDKN3', 'CENPE', 'CENPF', 'CENPI', 'CENPN', 'CEP55', 'CEP70', 'CEP85', 'CKAP2', 'CKAP5', 'CKS1B', 'CKS2', 'CTCF', 'DBF4', 'DBF4B', 'DCAF7', 'DEPDC1', 'DLGAP5', 'ECT2', 'ERCC6L', 'ESPL1', 'FAM64A', 'FOXM1', 'FZD2', 'FZD7', 'FZR1', 'GPSM2', 'GTF2E1', 'GTSE1', 'H2AFX', 'HJURP', 'HMGB2', 'HMGB3', 'HMMR', 'HN1', 'INCENP', 'JADE2', 'KIF11', 'KIF14', 'KIF15', 'KIF18A', 'KIF18B', 'KIF20A', 'KIF20B', 'KIF22', 'KIF23', 'KIF2C', 'KIF4A', 'KIF5B', 'KIFC1', 'KPNA2', 'LBR', 'LMNB2', 'MAD2L1', 'MELK', 'MET', 'METTL4', 'MIS18BP1', 'MKI67', 'MPHOSPH9', 'MTMR6', 'NCAPD2', 'NCAPG', 'NCAPG2', 'NCAPH', 'NDC1', 'NDC80', 'NDE1', 'NEIL3', 'NEK2', 'NRF1', 'NUSAP1', 'OIP5', 'PAFAH2', 'PARPBP', 'PBK', 'PLEKHG3', 'PLK1', 'PLK4', 'PRC1', 'PRR11', 'PSRC1', 'PTTG1', 'PTTG3P', 'RACGAP1', 'RAD21', 'RASSF1', 'REEP4', 'SAP30', 'SHCBP1', 'SKA1', 'SLCO1B3', 'SOGA1', 'SPA17', 'SPAG5', 'SPC25', 'SPDL1', 'STIL', 'STK17B', 'TACC3', 'TAF5', 'TBC1D2', 'TBC1D31', 'TMPO', 'TOP2A', 'TPX2', 'TROAP', 'TTF2', 'TTK', 'TUBB4B', 'TUBD1', 'UBE2C', 'UBE2S', 'VANGL1', 'WEE1', 'WHSC1', 'XPO1', 'ZMYM1']","89496e63":"url = 'https:\/\/raw.githubusercontent.com\/chervov\/genes\/main\/cell_cycle_genes_reactome_extended.txt'\ncell_cycle_genes_reactome_extended = pd.read_csv(url,header= None)\ncell_cycle_genes_reactome_extended = list(cell_cycle_genes_reactome_extended[0].unique())\nprint( len(cell_cycle_genes_reactome_extended), cell_cycle_genes_reactome_extended[:10] )\n","c137eaa9":"print('len of list_circadian_clock: ', len(list_circadian_clock )) \nprint()\n\nll2 = ['list_proangiogenic_prolif','G1S_genes_Tirosh', 'G2M_genes_Tirosh', 'G1S_genes_Freeman', 'G2M_genes_Freeman', 'cell_cycle_genes_reactome_extended'  ]\nfor i,ll in enumerate([list_proangiogenic_prolif, G1S_genes_Tirosh,  G2M_genes_Tirosh,G1S_genes_Freeman , G2M_genes_Freeman , cell_cycle_genes_reactome_extended ]):\n    s = set(list_circadian_clock )  & set( ll )\n    print(len(s),   ll2[i], len(ll))","d3739fb9":"    ll = G1S_genes_Freeman\n    s = set(list_circadian_clock )  & set( ll )\n    print(len(s), s)","185e89d6":"    ll = cell_cycle_genes_reactome_extended\n    s = set(list_circadian_clock )  & set( ll )\n    print(len(s), s)","383b099b":"!pip install mygene\nimport mygene\n\nmg = mygene.MyGeneInfo()\ng = mg.getgene('ENSG00000000003') # return info on ensemble gene with id 'ENSG00000000003'\nprint(type(g )) # dictionary\nprint(len(g.keys() ))  # 37\nprint((g.keys() ))  \n\nprint()\nprint( str(g)[:2000])","fb1eadc8":"print('Mouse')\ngname = list_genes[0]\nprint(gname)\ng = mg.query('symbol:'+gname, species='mouse')\nprint(str(g)[:500])\nentrez_gene_ID = g['hits'][0]['_id']\ng = mg.getgene(entrez_gene_ID)\nprint(str(g)[:500])\nprint(g['summary'])\nprint()\nprint('Human')\ng = mg.query('symbol:'+gname, species='human')\nprint(str(g)[:500])\nentrez_gene_ID = g['hits'][0]['_id']\ng = mg.getgene(entrez_gene_ID)\nprint(str(g)[:700])\nprint(g['summary'])\n","07b5778a":"S_phase_genes_Tirosh = ['MCM5', 'PCNA', 'TYMS', 'FEN1', 'MCM2', 'MCM4', 'RRM1', 'UNG', 'GINS2', 'MCM6', 'CDCA7', 'DTL', 'PRIM1', 'UHRF1', 'MLF1IP', 'HELLS', 'RFC2', 'RPA2', 'NASP', 'RAD51AP1', 'GMNN', 'WDR76', 'SLBP', 'CCNE2', 'UBR7', 'POLD3', 'MSH2', 'ATAD2', 'RAD51', 'RRM2', 'CDC45', 'CDC6', 'EXO1', 'TIPIN', 'DSCC1', 'BLM', 'CASP8AP2', 'USP1', 'CLSPN', 'POLA1', 'CHAF1B', 'BRIP1', 'E2F8']\nG2_M_genes_Tirosh = ['HMGB2', 'CDK1', 'NUSAP1', 'UBE2C', 'BIRC5', 'TPX2', 'TOP2A', 'NDC80', 'CKS2', 'NUF2', 'CKS1B', 'MKI67', 'TMPO', 'CENPF', 'TACC3', 'FAM64A', 'SMC4', 'CCNB2', 'CKAP2L', 'CKAP2', 'AURKB', 'BUB1', 'KIF11', 'ANP32E', 'TUBB4B', 'GTSE1', 'KIF20B', 'HJURP', 'CDCA3', 'HN1', 'CDC20', 'TTK', 'CDC25C', 'KIF2C', 'RANGAP1', 'NCAPD2', 'DLGAP5', 'CDCA2', 'CDCA8', 'ECT2', 'KIF23', 'HMMR', 'AURKA', 'PSRC1', 'ANLN', 'LBR', 'CKAP5', 'CENPE', 'CTCF', 'NEK2', 'G2E3', 'GAS2L3', 'CBX5', 'CENPA']\n\nurl = 'https:\/\/raw.githubusercontent.com\/chervov\/genes\/main\/cell_cycle_genes_reactome_extended.txt'\ncell_cycle_genes_reactome_extended = pd.read_csv(url,header= None)\ncell_cycle_genes_reactome_extended = list(cell_cycle_genes_reactome_extended[0].unique())\nprint( len(cell_cycle_genes_reactome_extended), cell_cycle_genes_reactome_extended[:10] )","011b4944":"import time\ngenes = pd.DataFrame()#df.copy()\nt0 = time.time()\nIX = 0\nlist_exceptions = []\nfor i,gname in enumerate(list_genes): \n    IX += 1\n    genes.loc[IX,'Gene'] = gname\n    if gname.upper() in S_phase_genes_Tirosh:\n        genes.loc[IX,'CCPhase'] = 'G1S'\n    elif gname.upper() in G2_M_genes_Tirosh:\n        genes.loc[IX,'CCPhase'] = 'G2M'\n    else:\n        genes.loc[IX,'CCPhase'] = np.nan\n    if gname.upper() in cell_cycle_genes_reactome_extended:\n        genes.loc[IX,'CCReactome'] = 1\n    else:\n        genes.loc[IX,'CCReactome'] = 0\n        \n        \n    #try:\n    if 1:\n        list_genes_exceptions = ['MLF1IP', 'UBR7', 'CASP8AP2', 'FAM64A', 'HN1','Bmp9']\n        if gname in list_genes_exceptions: # Exception list processed manually, mygene does not return \n            #list_entrez = [79682, 55148, 9994, 54478, 51155]\n            entrez_gene_ID = [79682, 55148, 9994, 54478, 51155,2658][list_genes_exceptions.index(gname) ]\n        else:\n            g = mg.query('symbol:'+gname.upper(), species='human')\n            entrez_gene_ID = g['hits'][0]['_id']\n            \n        g = mg.getgene(entrez_gene_ID)# query by Entrez id\n\n        if isinstance(g['ensembl'],list): # Stangely for UBR7 ENSG00000012963, there is second: ENSG00000278787\n            genes.loc[IX,'Ensembl Human'] = g['ensembl'][0]['gene']\n        else:\n            genes.loc[IX,'Ensembl Human'] = g['ensembl']['gene']\n        \n        if 1: # Get Ensembl for MOUSE\n            if gname == 'MLF1IP': # Exception mygene cannot regonize that symbol neither from alias list\n                genes.loc[IX,'Ensembl Mouse'] = 'ENSMUSG00000031629'\n            elif gname == 'UBR7':\n                genes.loc[IX,'Ensembl Mouse'] = 'ENSMUSG00000041712'\n            elif gname == 'CASP8AP2':\n                genes.loc[IX,'Ensembl Mouse'] = 'ENSMUSG00000028282'\n            elif gname == 'FAM64A': # Pimreg \n                genes.loc[IX,'Ensembl Mouse'] = 'ENSMUSG00000020808'\n            elif gname == 'HN1': #  \n                genes.loc[IX,'Ensembl Mouse'] = 'ENSMUSG00000020737'\n            elif gname == 'Bmp9': #  \n                genes.loc[IX,'Ensembl Mouse'] = 'ENSMUSG00000072625'\n            else:\n                if 'symbol' in g.keys():\n                    symb = g['symbol']\n                else:\n                    symb = gname\n                g_2 = mg.query('symbol:'+symb[0].upper()+symb[1:].lower(), species='mouse')\n                entrez_gene_ID_2 = g_2['hits'][0]['_id']\n\n                g_2 = mg.getgene(entrez_gene_ID_2)# query by Entrez id\n\n                if isinstance(g_2['ensembl'],list): # Stangely for UBR7 ENSG00000012963, there is second: ENSG00000278787\n                    genes.loc[IX,'Ensembl Mouse'] = g_2['ensembl'][0]['gene']\n                else:\n                    genes.loc[IX,'Ensembl Mouse'] = g_2['ensembl']['gene']\n            \n\n            \n        genes.loc[IX,'Entrez'] = entrez_gene_ID\n        #g = mg.getgene(entrez_gene_ID)\n        #print(i,ens_id)\n        #print(g.keys())\n        if 'generif' in g.keys():\n            genes.loc[IX,'count pubmed'] = len(g['generif'])\n\n        genes.loc[IX,'Length'] = np.nan    \n        if  ('genomic_pos_hg19' in g.keys()) and ( isinstance(g['genomic_pos_hg19'], dict) ):\n            tmp_l = []\n            for k in ['start','end']:\n                if k in g['genomic_pos_hg19'].keys():\n                    tmp_l.append(int( g['genomic_pos_hg19'][k]) )\n            if len( tmp_l) == 2: genes.loc[IX,'Length'] = tmp_l[1] - tmp_l[0] \n                    \n\n        list1 = [ 'name', 'symbol',   'map_location' ,    'alias', 'other_names'  ] # 'type_of_gene', 'entrezgene','symbol', \n        for k in list1:\n            if k in g.keys():\n                genes.loc[IX,k] = str(g[k])\n        if  ('genomic_pos_hg19' in g.keys()) and ( isinstance(g['genomic_pos_hg19'], dict) ):\n            for k in ['chr','start','end', 'strand' ]:\n                if k in g['genomic_pos_hg19'].keys():\n                    genes.loc[IX,k] = (g['genomic_pos_hg19'][k])\n        if 'summary' in g.keys():\n            genes.loc[IX,'summary'] = g['summary']\n            \n        if 'pathway' in g.keys():\n            for p in ['kegg','reactome', 'wikipathways']:\n                if p in g['pathway'].keys():\n                    genes.loc[IX,p] = len(g['pathway'][p])\n                \n    #except:\n    if 0:\n        print()\n        print('Exception')\n        print('i', i , 'gene name' , gname)#  entrez_gene_ID, 'kaggle_id', kaggle_id )\n        list_exceptions.append(gname)\n        pass\n    \n    if i%500 == 0:\n        print(i, np.round(time.time() - t0 ,1))\n    if i >= 10e10:\n        break\n\nprint(i, 'Finished. Seconds passed: ',  np.round(time.time() - t0 ,1))\n        \ngenes\n","853f94ae":"genes.describe()","28fe116f":"genes.to_csv(str_save_filename)","326027cd":"gname, g","cfdedcdc":"g_2 = mg.query('symbol:'+'Cenp50', species='mouse')\nprint( g_2 )\nfor gg in  ['CENP50', 'CENPU50', 'KLIP1', 'MLF1IP', 'PBIP1']:\n    g_2 = mg.query('symbol:'+gg, species='human')\n    print( g_2 )\n    \n    ","4584e978":"g.keys(), g['symbol'], g['alias']","c271ec92":"symb, g_2","81c1977d":"genes.columns","2a8600ac":"import matplotlib.pyplot as plt","294d50fa":"genes[[ 'kegg','reactome', 'wikipathways' ]].describe()\n","f14ff938":"col = 'reactome' # 'count pubmed'\nplt.plot(np.sort( genes[col].values),'*-' )\nplt.title(col)\nplt.show()\ngenes.sort_values(col,ascending = False)\n","2ee38a6a":"genes.to_csv('Tirosh_genes_info_cell_97_main_cycle_regulators.csv')","0d1f1ec7":"col = 'count pubmed'\nplt.plot(np.sort( genes[col].values),'*-' )\nplt.title(col)\nplt.show()\ngenes.sort_values(col,ascending = False)","45162602":"col = 'Length'# 'count pubmed'\nplt.plot(np.sort( genes[col].values),'*-' )\nplt.title(col)\nplt.show()\nprint(genes[col].describe())\ngenes.sort_values(col,ascending = False)","d9f1d280":"g['pathway'].keys()\n","5f5c2b65":"g['pathway']['reactome']","371de0e4":"g['go']","ecc42525":"print('Exception list analyse by hands - Entrez Id found on wikipedia and etc ')\nprint(['MLF1IP', 'UBR7', 'CASP8AP2', 'FAM64A', 'HN1'])\nlist_entrez = [79682, 55148, 9994, 54478, 51155]\nprint( )\n\nfor entrez in list_entrez:\n    g = mg.getgene(entrez)# 'MLF1IP' 'CENPU' ['CENP50', 'CENPU50', 'KLIP1', 'MLF1IP', 'PBIP1'] query by Entrez id\n    print(g['symbol'], g['alias'], str(g)[:420] )\n    print()\n\n","29fe0b62":"genes.columns","da0b15c9":"# MCM5\n# The encoded protein is upregulated in the transition from the G0 to G1\/S phase of the cell cycle and may actively participate in cell cycle regulation.\n# There is whole family: MCM2, MCM4, MCM6  - The protein encoded by this gene is one of the highly conserved mini-chromosome maintenance proteins (MCM) \n\n#SLBP G1S 31.0 19755.0 4p16.3\n#stem-loop binding protein HBP\n#This gene encodes a protein that binds to the stem-loop structure in replication-dependent histone mRNAs. Histone mRNAs do not contain introns or polyadenylation signals, and are processed by endonucleolytic cleavage. The stem-loop structure is essential for efficient processing but this structure also controls the transport, translation and stability of histone mRNAs. Expression of the protein is regulated during the cell cycle, increasing more than 10-fold during the latter part of G1. [provided by RefSeq, Jul 2008].\n\n# CTCF G2M 264.0 76776.0 16q22.1\n# CCCTC-binding factor ['CFAP108', 'FAP108', 'MRD21']\n# This gene is a member of the BORIS + CTCF gene family and encodes a transcriptional regulator protein with 11 highly conserved zinc finger (ZF) domains. This nuclear protein is able to use different combinations of the ZF domains to bind different DNA target sequences and proteins. Depending upon the context of the site, the protein can bind a histone acetyltransferase (HAT)-containing complex and function as a transcriptional activator or bind a histone deacetylase (HDAC)-containing complex and function as a transcriptional repressor. If the protein is bound to a transcriptional insulator element, it can block communication between enhancers and upstream promoters, thereby regulating imprinted expression. Mutations in this gene have been associated with invasive breast cancers, prostate cancers, and Wilms' tumors. Alternatively spliced transcript variants encoding different isoforms have been found for this gene. [provided by RefSeq, Jul 2010].\n\n\n# NEK2 G2M 112.0 12846.0 1q32.3\n# NIMA related kinase 2 ['HsPK21', 'NEK2A', 'NLK1', 'PPP1R111', 'RP67']\n# This gene encodes a serine\/threonine-protein kinase that is involved in mitotic regulation. \n# This protein is localized to the centrosome, and undetectable during G1 phase, \n# but accumulates progressively throughout the S phase, reaching maximal levels in late G2 phase. \n# Alternatively spliced transcript variants encoding different isoforms with distinct C-termini have been noted for this gene. \n# [provided by RefSeq, Feb 2011].\n\n","f5c314c2":"for i in range(len(genes)):\n    print(genes.loc[i+1,'Gene'], genes.loc[i+1,'CCPhase'],genes.loc[i+1, 'count pubmed'],  genes.loc[i+1,'Length'], \n          genes.loc[i+1,'map_location'] )\n    print(genes.loc[i+1,'name'], genes.loc[i+1,'alias'] ) # 'symbol', 'map_location', 'alias'\n    print(genes.loc[i+1,'summary'])\n    print()\n    ","761d7709":"c = 0\nfor i in range(len(genes)):\n    if isinstance(genes.loc[i+1,'summary'], str) and ( 'G2' in genes.loc[i+1,'summary']):\n        c +=1\n        print(c, 'G2 found in summary' )\n        print(genes.loc[i+1,'Gene'], genes.loc[i+1,'CCPhase'],genes.loc[i+1, 'count pubmed'],  genes.loc[i+1,'Length'], \n              genes.loc[i+1,'map_location'] )\n        print(genes.loc[i+1,'name'], genes.loc[i+1,'alias'] ) # 'symbol', 'map_location', 'alias'\n        print(genes.loc[i+1,'summary'])\n        print()","6f4f3daf":"c = 0\nfor i in range(len(genes)):\n    if isinstance(genes.loc[i+1,'summary'], str) and ( 'G1' in genes.loc[i+1,'summary']):\n        c +=1\n        print(c, 'G1 found in summary' )\n        print(genes.loc[i+1,'Gene'], genes.loc[i+1,'CCPhase'],genes.loc[i+1, 'count pubmed'],  genes.loc[i+1,'Length'], \n              genes.loc[i+1,'map_location'] )\n        print(genes.loc[i+1,'name'], genes.loc[i+1,'alias'] ) # 'symbol', 'map_location', 'alias'\n        print(genes.loc[i+1,'summary'])\n        print()","0eca16bf":"c = 0\nfor i in range(len(genes)):\n    if isinstance(genes.loc[i+1,'summary'], str) and ( 'cycle' in genes.loc[i+1,'summary']):\n        c +=1\n        print(c, 'cycle found in summary' )\n        print(genes.loc[i+1,'Gene'], genes.loc[i+1,'CCPhase'],genes.loc[i+1, 'count pubmed'],  genes.loc[i+1,'Length'], \n              genes.loc[i+1,'map_location'] )\n        print(genes.loc[i+1,'name'], genes.loc[i+1,'alias'] ) # 'symbol', 'map_location', 'alias'\n        print(genes.loc[i+1,'summary'])\n        print()","62459005":"c = 0\nfor i in range(len(genes)):\n    if isinstance(genes.loc[i+1,'summary'], str) and ( 'cell cycle' in genes.loc[i+1,'summary']):\n        c +=1\n        print(c, '\"cell cycle\" found in summary' )\n        print('In cell_cycle_genes_reactome_extended:', genes.loc[i+1,'Gene'] in cell_cycle_genes_reactome_extended )\n        print(genes.loc[i+1,'Gene'],'CCPhase', genes.loc[i+1,'CCPhase'],'count pubmed=',genes.loc[i+1, 'count pubmed'],  genes.loc[i+1,'Length'], \n              genes.loc[i+1,'map_location'] )\n        print(genes.loc[i+1,'name'], genes.loc[i+1,'alias'] ) # 'symbol', 'map_location', 'alias'\n        print(genes.loc[i+1,'summary'])\n        print()","c0e734a2":"# {'EZH2', 'TIMELESS'}\nc = 0\nfor i in range(len(genes)):\n    if genes.loc[i+1,'Gene'] in ['EZH2', 'TIMELESS']:\n    #if isinstance(genes.loc[i+1,'summary'], str) and ( 'cell cycle' in genes.loc[i+1,'summary']):\n        c +=1\n        #print(c, '\"cell cycle\" found in summary' )\n        print('In cell_cycle_genes_reactome_extended:', genes.loc[i+1,'Gene'] in cell_cycle_genes_reactome_extended )\n        print(genes.loc[i+1,'Gene'],'CCPhase', genes.loc[i+1,'CCPhase'],'count pubmed=',genes.loc[i+1, 'count pubmed'],  genes.loc[i+1,'Length'], \n              genes.loc[i+1,'map_location'] )\n        print(genes.loc[i+1,'name'], genes.loc[i+1,'alias'] ) # 'symbol', 'map_location', 'alias'\n        print(genes.loc[i+1,'summary'])\n        print()    ","a80c0b59":"s = set(list_genes) & set( cell_cycle_genes_reactome_extended )\nprint(s)","7d28c753":"cell_cycle_genes_reactome_extended\n\n# {'EZH2', 'TIMELESS'}\nc = 0\nfor i in range(len(genes)):\n    if genes.loc[i+1,'Gene'] in cell_cycle_genes_reactome_extended: #  ['EZH2', 'TIMELESS']:\n    #if isinstance(genes.loc[i+1,'summary'], str) and ( 'cell cycle' in genes.loc[i+1,'summary']):\n        c +=1\n        #print(c, '\"cell cycle\" found in summary' )\n        print('In cell_cycle_genes_reactome_extended:', genes.loc[i+1,'Gene'] in cell_cycle_genes_reactome_extended )\n        print(genes.loc[i+1,'Gene'],'CCPhase', genes.loc[i+1,'CCPhase'],'count pubmed=',genes.loc[i+1, 'count pubmed'],  genes.loc[i+1,'Length'], \n              genes.loc[i+1,'map_location'] )\n        print(genes.loc[i+1,'name'], genes.loc[i+1,'alias'] ) # 'symbol', 'map_location', 'alias'\n        print(genes.loc[i+1,'summary'])\n        print()    ","7cb0d172":"# Install, Import mygene package \n\nand small use example ","3d1e9d09":"# What is about ?\n\nWe collect information (in particular different Ids) on the:\nlist of genes circadian cycle cycle related\n\nWe use nice Python package \"mygene\". \n\n","630f6b3e":"# Main part","3565906b":"# Genes info","ed66207f":"# Post processing information"}}