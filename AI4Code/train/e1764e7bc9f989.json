{"cell_type":{"33a97b0c":"code","16cfe39a":"code","409a5d71":"code","90839c7c":"code","6ac9c9c0":"code","28e1b983":"code","15b5d21e":"code","363e5e68":"code","68017929":"code","a59fa2af":"code","a397259f":"code","a5ecc2b3":"code","e3560a35":"code","0efe41ae":"code","1ecd4bb5":"code","d6c8a932":"code","f55cf8dd":"code","0a46783c":"code","0a8dbaf1":"markdown","3de36798":"markdown","fd642a88":"markdown","2dc6dca9":"markdown","0c1e7881":"markdown","1f2f0d0d":"markdown","b486b434":"markdown","e8b0ad82":"markdown","98634cfb":"markdown","b034b237":"markdown","82b6931e":"markdown","0318b08e":"markdown","e7e301fb":"markdown","2044eb67":"markdown","262b117b":"markdown","b65db2a9":"markdown","357dbff3":"markdown","0ac86ef6":"markdown","efc14c93":"markdown","38f62658":"markdown","5dca1d4d":"markdown","ff85acb7":"markdown","14a0c5b7":"markdown","47ccf8bb":"markdown","5b41b475":"markdown","b8ea4746":"markdown","9f39ae99":"markdown","5899274c":"markdown","8ad571f9":"markdown","850b20b5":"markdown","39b71878":"markdown"},"source":{"33a97b0c":"# global setting to print all the outputs of a code cell (not just the last one)\nfrom IPython.core.interactiveshell import InteractiveShell  \nInteractiveShell.ast_node_interactivity = \"all\"","16cfe39a":"#### flag for only executing necessary code (without time-consuming outputs)\nspeed_up = True\n\n#### flag for output only useful for debugging purposes\n\ndebug = True","409a5d71":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport warnings\n\npd.options.mode.chained_assignment = None\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n\n# exploratory data analysis (EDA) of a Pandas Dataframe\nimport pandas_profiling\n\nimport os\n#print(os.listdir(\"..\/input\"))\n","90839c7c":"# read training and test set \ntrain = pd.read_csv('..\/input\/bike-sharing-demand\/train.csv')\ntest = pd.read_csv('..\/input\/bike-sharing-demand\/test.csv')","6ac9c9c0":"# create EDA report - takes a moment!\nif speed_up != True:\n  train.profile_report()","28e1b983":"if speed_up != True:\n    type(train)  # display type of train\n    train.shape  # display shape of train\n    train.dtypes # inspect types of featrues","15b5d21e":"_=sns.boxplot(x = 'count', data = train)\n_=plt.title(\"Boxplot of target variable \\\"count\\\"\")\nplt.show()","363e5e68":"#### this code section is devoted to calculate the outliers of target variable 'count'\nQ1 = train['count'].quantile(0.25)\nQ3 = train['count'].quantile(0.75)\nIQR = Q3 - Q1\noutliers_high = len(train[(train['count'] > (Q3 + 1.5 * IQR))])\noutliers_low  = len(train[(train['count'] < (Q1 - 1.5 * IQR)) ])\noutliers_all  = outliers_high + outliers_low\nprint(\"Outliers exceeding 'maximum' ( > Q3 + 1.5 * IQR): \", outliers_high)\nprint(\"Outliers below 'minimum' ( < Q1 - 1.5 * IQR)):    \", outliers_low)\nprint((outliers_all\/len(train))*100)","68017929":"# use \"_\" as temporary object to suppress output of function calls\n_=sns.distplot(train['count'], bins=25)\n_=plt.title(\"Probability Density of target variable \\\"count\\\"\")\n_=plt.ylabel('Probability Density')\n# Limits for the Y axis\n_=plt.xlim(0,1100)\nplt.show()","a59fa2af":"# The boxcox() SciPy function implements the Box-Cox method. (Data must be positiv)\n# The Box-Cox method is a data transform method that is able to perform a range of power transforms.\n# More than that, it can be configured to evaluate a suite of transforms automatically and select a best fit.\n# It takes an argument, called lambda, that controls the type of transform to perform.\n# Below are some common values for lambda:\n# lambda = -1. is a reciprocal transform.\n# lambda = -0.5 is a reciprocal square root transform.\n# lambda = 0.0 is a log transform.\n# lambda = 0.5 is a square root transform.\n# lambda = 1.0 is no transform.","a397259f":"# drop reduandant columns 'registered'and 'atemp'\ntrain.drop(['atemp','registered', 'casual'],axis=1,inplace=True)\n# same for test ('registered' and 'casual' are not contained in test set anyway)\ntest.drop(['atemp'],axis=1,inplace=True)","a5ecc2b3":"if speed_up != True:\n    train.shape  # display shape of train\n    train.dtypes # inspect types of featrues","e3560a35":"#### this code section is devoted to extract features 'year', 'month' and 'hour' information from 'datetime'\n#### the no longer needed 'datetime' column will be dropped afterwards\n\n# convert categorical feature 'datetime' to type datetime\ntrain.datetime = pd.to_datetime(train.datetime)\n\n# extract needed features from date information\ntrain['year'] = train['datetime'].dt.year\ntrain['month'] = train['datetime'].dt.month          # january=0 - december=12\ntrain['day_of_week'] = train['datetime'].dt.weekday  # monday=0 - sunday=6\ntrain['hour'] = train['datetime'].dt.hour\n#drop column \"datetime\", which is no longer needed\ntrain.drop(['datetime'],axis=1,inplace=True)\n\n#### same for test data set\ntest.datetime = pd.to_datetime(test.datetime)\ntest['year'] = test['datetime'].dt.year\ntest['month'] = test['datetime'].dt.month\ntest['day_of_week'] = test['datetime'].dt.weekday  # monday=0 - sunday=6\ntest['hour'] = test['datetime'].dt.hour\ntest.drop(['datetime'],axis=1,inplace=True)\n\n","0efe41ae":"if debug != True:\n    train.dtypes\n    train.head()","1ecd4bb5":"if speed_up != True:\n    # first make shure that these 'categorical' feaures really only contains\n    # the values as defined in the data description\n    print(\"Check for value count for feature 'weather':\")\n    my_value_counts = train['weather'].value_counts(sort=False)\n    my_value_counts.rename_axis('weather categories').reset_index(name='counts')\n\n    print(\"Check for value count for feature 'season':\")\n    my_value_counts = train['season'].value_counts(sort=False)\n    my_value_counts.rename_axis('season categories').reset_index(name='counts')\n\n    print(\"Check for value count for feature 'holiday':\")\n    my_value_counts = train['holiday'].value_counts(sort=False)\n    my_value_counts.rename_axis('holiday categories').reset_index(name='counts')\n\n    print(\"Check for value count for feature 'workingday':\")\n    my_value_counts = train['workingday'].value_counts(sort=False)\n    my_value_counts.rename_axis('workingday categories').reset_index(name='counts')","d6c8a932":"# convert features to type categorical\ntrain['weather'] = train['weather'].astype('category')\ntrain['season'] = train['season'].astype('category')\ntrain['holiday'] = train['holiday'].astype('category')\ntrain['workingday'] = train['workingday'].astype('category')\n\n# same for test\ntest['weather'] = test['weather'].astype('category')\ntest['season'] = test['season'].astype('category')\ntest['holiday'] = test['holiday'].astype('category')\ntest['workingday'] = test['workingday'].astype('category')\n","f55cf8dd":"if debug != True:\n    train.dtypes\n    train.head()","0a46783c":"if speed_up != True:\n    train.profile_report()   # takes a moment to execute","0a8dbaf1":"# EDA conclusion:\n\n## Target \"count\"\nThe target variable \"count\" is strongly **right skewed**, i.e. median < mean => apply one of the **common transformations** include **square root**, **cube root**, or **log**\n","3de36798":"## Repeat EDA-report after all these changes to the dataframe","fd642a88":"**holiday**      - whether the day is considered a holiday","2dc6dca9":"## Input \nHistorical usage patterns of bike rental demand combined with weather data.\nProvided are hourly rental data spanning two years. The training set is comprised of the first 19 days of each month, while the test set is the 20th to the end of the month.\n\n## Task\nThe task is to predict the total count of bikes rented during each hour covered by the test set, using only information available prior to the rental period.","0c1e7881":"**temp** - temperature in Celsius\n\n**atemp** - \"feels like\" temperature in Celsius\n\n**humidity** - relative humidity\n\n**windspeed** - wind speed\n\n**casual** - number of non-registered user rentals initiated (**not available in test set**)\n\n**registered** - number of registered user rentals initiated (**not available in test set**)\n\n**count** - number of total rentals (**not available in test set**)","1f2f0d0d":"# Here comes my battle plan\n\nRead in data\n\nInspect data (Data cleansing necessary?)\n\nOutlier Analysis \/ Clean & Transform\n\nFeature Engineering\n\nML approach - short discussion which machine learning approach to use\n\n...","b486b434":"<div class=\"alert alert-block alert-warning\">  \n<b>Common sense observation:<\/b> \nIt doesn't matter what day it is in the month, so the \"day number of month\" information will not be a feature.\n<p>\nBut we want to include the \"day_of_week\" as a feature. This might give us more insight than just distinguishing between working days and weekends. \n(\"0\" for Monday to \"6\" for Sunday)\n<\/div>","e8b0ad82":"**season**\n*  1 = spring, \n*         2 = summer, \n*         3 = fall, \n*         4 = winter \n","98634cfb":"<div class=\"alert alert-block alert-warning\">  \n<b>Important Observations:<\/b> Thanks to the build-in EDA report of pandas \"profile_report\" we already can state the following observations about our train dataset:\n<p>\n<li> \n  10886 observations with 12 features\n<\/li>     \n<li> \n  no missing cells \/ no dublicates\n  <br>\n  zero values are no issue \n        <div style=\"text-indent:20px;\">- casual \"0\" means no not-registered person rented a bike on that day<\/div> \n        <div style=\"text-indent:20px;\">- windspeed \"0\" means no measurable air movement<\/div>\n  Everything looks reasonable => no data cleansing needed\n<\/li> \n<br>\n<li> \n    feature **\"registered\"** is highly correlated with feature \"count\" => \"registered\" and then also \"casual\" as counterpart can be ignored. Anyhow - **\"registered\" and \"casual\"** are not contained in test set and will not be taken in account further, i.e. these features **will be dropped**.\n<\/li> \n<li> \n    feature **\"atemp\"** (feels like temperature) is highly correlated with feature \"temp\" (temperature) => \"atemp\" can be ignored\n<\/li> \n<br>\n<li> \n  feature **\"datetime\"** only contains datetime values, but is categorical => convert type to \"datetime\"  \n<\/li> \n<li>\n    features **\"weather\", \"season\", \"holiday\"** and **\"workingday\"** are of type numerical => convert to type categorical\n<\/li>\n<p>    \nThe heat diagram also tells us already a few things about correlations. For example, higher temperatures seem to have a positive effect on the number of bicycle rentals, while higher humidity seems to have a rather negative effect on bicycle rentals.\n\n<\/div>\n\n\n\n","b034b237":"## Data Fields","82b6931e":"## First try transformation techniques to tame the outliers","0318b08e":"**Drop features** (columns) **'atemp'**, **'registered'** and **'casual'** because they correlated strongly with another feature and are therefore redundant.","e7e301fb":"**Convert** numeric features  **weather, season, holiday** and **workingday** to categorical features","2044eb67":"![bike.png](attachment:bike.png)\n","262b117b":"**Convert** categorical feature **\"datetime\"** to type **datetime** and extract the following features for the upcoming forcast:\n**month**\n**hour**","b65db2a9":"**Drop** column with column **\"datetime\"**, which is **no longer needed**.","357dbff3":"**weather** \n* 1    = Clear, Few clouds, Partly cloudy, Partly cloudy\n* 2    = Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n* 3    = Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n* 4    = Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog ","0ac86ef6":"**workingday **  - whether the day is neither a weekend nor holiday","efc14c93":"The probablility density diagram shows that the data is right-skewed, i.e. not normal distributed","38f62658":"![outlier.png](attachment:outlier.png)\n","5dca1d4d":"<div class=\"alert alert-block alert-warning\"> \n**Fix for skewness of target variable**\n<br>\nI will use the Box-Cox method to transform the data in a more normal distributed form.\n<br>\nThis will be done as a last step before I start modelling regressors, i.e.after EDA and normalization of the data is done.\n<\/div>","ff85acb7":"# To drop or not to drop the outliers?\nIt is known and obvious that outliers have a bad impact in linear regression models, i.e. if we want to work with linear regression we have to get rid of outliers.\n\nSaying that we should always consider what we lose when we drop data. If we know that a outliers result from a measurement error than it surly would be correct to drop the outliers. In our case it probably is not a measurement error - so we would lose information about the variability in the data.","14a0c5b7":"# Outlier Analysis\n\n\n\n","47ccf8bb":"### Calculate the number of outliers","5b41b475":"**datetime**                   - hourly date + timestamp ","b8ea4746":"# Inspect data","9f39ae99":"# Feature Engineering","5899274c":"# Forecast of bike sharing demand","8ad571f9":"The boxplot diagram it tells us more about the target variable 'count':\n* the data is right skewed, i.e. median < mean, i.e. not normally distributed\n* There are some outliers that exceed the maximum (exceeds the right whisker). \n","850b20b5":"So we have 300 hours with extraordinary high rental counts in the training set, that are <3% of all training sets.\n","39b71878":"# Read data\nRead provided train and test set"}}