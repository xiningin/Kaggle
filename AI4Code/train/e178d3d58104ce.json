{"cell_type":{"b17c18fc":"code","87645892":"code","552a4407":"code","aece9e48":"code","10c3d1d4":"code","58f91c94":"code","7242b2c3":"code","1e1bb9c4":"code","d91143aa":"code","7a2cc9dc":"code","fe2b0bbc":"code","6d3e43a8":"code","2d9df80b":"code","b5333cde":"code","a18b9b26":"code","96dd83aa":"code","49ad64ab":"code","73d84082":"code","f78c482a":"code","98bfa956":"code","63dfac59":"code","7e935fd9":"code","397ff652":"code","4fb0acc1":"code","cfa3a54f":"code","a39cea7f":"code","89d35922":"code","766adeea":"code","8d7f2423":"code","915c5475":"code","935dbfe4":"code","a0a8dffe":"code","c11d9bc4":"code","6fd8ecef":"code","441a4157":"code","a9ee4f07":"code","27aa15a1":"code","7faefa78":"code","b03ca6f4":"code","3930d953":"code","8b03a986":"code","e3b3bd9b":"code","aa810bdc":"markdown","f15d9565":"markdown","99acbb81":"markdown","c1fc2d4c":"markdown","ec3217aa":"markdown","045d4000":"markdown","0f2fbfeb":"markdown","009c6bfe":"markdown"},"source":{"b17c18fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","87645892":"# Common Model Helper\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn import metrics\n\n# Visualization\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\nimport seaborn as sns\nfrom pandas.plotting import scatter_matrix\n\n# Configure Visualization Defaults\n# %matplot inline = show plots in Jupyter notebook browser\n%matplotlib inline\nmpl.style.use('ggplot')\nsns.set_style('darkgrid')\npylab.rcParams['figure.figsize']=15,6","552a4407":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\nprint(train.columns)\nprint('='*30)\nprint(\"Shape of train data is: \",train.shape)\nprint(\"Shape of test data is: \",test.shape)","aece9e48":"# Missing values\ntotal = train.isnull().sum().sort_values(ascending=False)\npercent = (train.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total,percent],axis=1,keys=['Total','Percent'])\nmissing_data.head(15)","10c3d1d4":"# Save the ID column\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\n# Now drop the colum since its unneccessay for the prediction process.\ntrain.drop(\"Id\",axis=1,inplace=True)\ntest.drop(\"Id\",axis=1, inplace=True)","58f91c94":"# Data Processing\nfig, ax = plt.subplots()\nsns.barplot(x=train['MSSubClass'],y=train['SalePrice'])\nplt.xlabel('MSSubClass',fontsize=13)\nplt.ylabel('SalePrice',fontsize=13)\nplt.show()","7242b2c3":"fig, ax = plt.subplots()\nsns.scatterplot(x=train['GrLivArea'],y=train['SalePrice'])\nplt.xlabel('GrLivArea',fontsize=13)\nplt.ylabel('SalePrice',fontsize=13)\nplt.show()","1e1bb9c4":"# Deleting outliers\ntrain=train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)\n\n# Check the graph again\nsns.scatterplot(x=train['GrLivArea'],y=train['SalePrice'])\nplt.xlabel('GrLivArea',fontsize=13)\nplt.ylabel('SalePrice',fontsize=13)\nplt.show()","d91143aa":"from scipy import stats\nfrom scipy.stats import norm, skew #for some statistics\n\nsns.distplot(train['SalePrice'],fit=norm)\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","7a2cc9dc":"# take the log(1+x) to all elements of the col\ntrain['SalePrice'] = np.log1p(train['SalePrice'])\n\nsns.distplot(train['SalePrice'],fit=norm)\n\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint('\\n mu = {:.2f} and sigma {:.2f}\\n'.format(mu, sigma))\n\n# Now plot the distribution\nplt.legend(['Normak dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","fe2b0bbc":"# Features engineering\n# Concatenate the train and test data in the same dataframe\nntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train.SalePrice.values\nall_data = pd.concat((train,test)).reset_index(drop=True)\nall_data.drop(['SalePrice'],axis=1,inplace=True)\nprint(\"all_data size is: {}\".format(all_data.shape))","6d3e43a8":"# Correlation map\ncorrmat = train.corr()\nplt.subplots(figsize=(12,9))\nsns.heatmap(corrmat, vmax=0.9, square=True)","2d9df80b":"# Handling Missing value\n# PoolQC has more than 99% and data description says NA means \"No Pool\", so we can't delete this col\nall_data['PoolQC'] = all_data['PoolQC'].fillna(\"None\")\n\n# Similarly for others\nall_data['MiscFeature'] = all_data['MiscFeature'].fillna('None')\nall_data['Alley']=all_data['Alley'].fillna('None')\nall_data['Fence'] = all_data['Fence'].fillna('None')\nall_data['FireplaceQu'] = all_data['FireplaceQu'].fillna('None')","b5333cde":"#Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\nall_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))","a18b9b26":"for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[col] = all_data[col].fillna('None')\n\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)","96dd83aa":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)\n\n# BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2 : \n# For all these categorical basement-related features, NaN means that there is no basement.\n\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')","49ad64ab":"all_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)","73d84082":"all_data['MSZoning'].describe()","f78c482a":"all_data['MSZoning'] = all_data['MSZoning'].fillna('RL')","98bfa956":"all_data = all_data.drop(['Utilities'],axis=1)\nall_data['Functional'] = all_data['Functional'].fillna('Typ')\nall_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])\nall_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])\nall_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])\nall_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])\nall_data['MSSubClass'] = all_data['MSSubClass'].fillna('None')","63dfac59":"#Check remaining missing values if any \nall_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","7e935fd9":"# Transforming some numerical variables that are really categorical\n#MSSubClass=The building class\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\n\n#Changing OverallCond into a categorical variable\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\n\n#Year and month sold are transformed into categorical features.\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","397ff652":"# Label Encoding\nfrom sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', 'ExterQual', 'ExterCond','HeatingQC', 'PoolQC',\n        'KitchenQual', 'BsmtFinType1','BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond','YrSold', 'MoSold')\nfor c in cols:\n    lbl = LabelEncoder()\n    lbl.fit(list(all_data[c].values))\n    all_data[c] = lbl.transform(list(all_data[c].values))","4fb0acc1":"# Adding total sqfootage feature \nall_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']","cfa3a54f":"# Skewed features\nnumeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","a39cea7f":"# Box Cox Transformation of (highly) skewed features\nskewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    all_data[feat] = boxcox1p(all_data[feat], lam)","89d35922":"# Getting dummy categorical features\nall_data = pd.get_dummies(all_data)\nprint(all_data.shape)","766adeea":"all_data.head()","8d7f2423":"train = all_data[:ntrain]\ntest = all_data[ntrain:]","915c5475":"# Modelling\nfrom sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","935dbfe4":"# Define a cross validation strategy\n#Validation function\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","a0a8dffe":"# LASSO Regression :\n# This model may be very sensitive to outliers. So we need to made it more robust on them. For that we use the \n# sklearn's Robustscaler() method on pipeline\nlasso = make_pipeline(RobustScaler(),Lasso(alpha=0.0005, random_state=1))\n\n# Elastic Net Regression: again made robust to outliers\nENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\n\n# Kernel Ridge Regression\nKRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=0.25)\n\n# Gradient Boosting Regression: with huber loss that makes it robust to outliers\nGBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05, max_depth=4, max_features='sqrt',min_samples_leaf=15,\n                                  min_samples_split=10, loss='huber', random_state=5)\n\n# XGBoost \nmodel_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\n\n# LightGBM \nmodel_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","c11d9bc4":"# Base models scores\nscore = rmsle_cv(lasso)\nprint('\\nLasso score: {:.4f} ({:.4f})\\n'.format(score.mean(), score.std()))\n\nscore = rmsle_cv(ENet)\nprint(\"ElasticNet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n\nscore = rmsle_cv(KRR)\nprint(\"Kernel Ridge score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n\nscore = rmsle_cv(GBoost)\nprint(\"Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n\nscore = rmsle_cv(model_xgb)\nprint('Xgboost score: {:.4f} ({:.4f})\\n'.format(score.mean(), score.std()))\n\nscore = rmsle_cv(model_lgb)\nprint('LGBM score: {:.4f} ({:.4f})\\n'.format(score.mean(), score.std()))","6fd8ecef":"# Stacking models\n# Simplest Stacking approach : Averaging base models\nclass StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n        \n    # We again fit the data on clones of the original models\n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        #Train cloned base models then create out-of-fold predictions\n        #that are needed to train the cloned meta-model\n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n    \n    #Do the predictions of all base models on the test data and use the averaged predictions as \n    #meta-features for the final prediction which is done by the meta-model\n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)","441a4157":"# Stacking Averaged models Score\nstacked_averaged_models = StackingAveragedModels(base_models =(ENet, GBoost, KRR), meta_model=lasso)\n\nscore = rmsle_cv(stacked_averaged_models)\nprint('Stacking Averaged Models Score: {:.4f} ({:.4f})'.format(score.mean(), score.std()))","a9ee4f07":"# Ensembling StackedRegressor, XGBoost and LightGBM\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","27aa15a1":"# StackedRegressor:\nstacked_averaged_models.fit(train.values, y_train)\nstacked_train_pred = stacked_averaged_models.predict(train.values)\nstacked_pred = np.expm1(stacked_averaged_models.predict(test.values))\nprint(rmsle(y_train, stacked_train_pred))","7faefa78":"# XGBoost\nmodel_xgb.fit(train, y_train)\nxgb_train_pred = model_xgb.predict(train)\nxgb_pred = np.expm1(model_xgb.predict(test))\nprint(rmsle(y_train, xgb_train_pred))","b03ca6f4":"# LightGBM:\nmodel_lgb.fit(train, y_train)\nlgb_train_pred = model_lgb.predict(train)\nlgb_pred = np.expm1(model_lgb.predict(test.values))\nprint(rmsle(y_train, lgb_train_pred))","3930d953":"'''RMSE on the entire Train data when averaging'''\n\nprint('RMSLE score on train data:')\nprint(rmsle(y_train,stacked_train_pred*0.70 + xgb_train_pred*0.15 + lgb_train_pred*0.15 ))","8b03a986":"# Ensemble prediction:\nensemble = stacked_pred*0.70 + xgb_pred*0.15 + lgb_pred*0.15","e3b3bd9b":"# Submission\nsub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = ensemble\nsub.to_csv('submission.csv',index=False)","aa810bdc":"All comments\/corrections are more than welcome.Hi This is my second Kaggle competition notebook, I did first which everbody do on the kaggle yes its correct (Titianic) which is private. **If this notebook help you in your scripts\/notebooks, giving some kind of credit would be very much appreciated. :) and All comments\/corrections are more than welcome.**\nI've read some great notebooks here specially for Data Cleaning.\n**To know your data is most difficult part in Data Science**\nI hope it will be useful, So I'm sharing how I applied some of those data analysis principle to this problem.\n1. **Understand the Problem**: predict the value of the SalePrice variable.\n2. **Basic Cleaning**: Handle the missing data.\n3. **Univariate Analysis**: Analysis the data and find patterns that exist within it.\n4. **Multivariate Analysis**: Correlation of dependent(one or more than one.) variable to independent variable.\n5. **Cleaning**: Handle the outliers and categorical variable.\n\nI tried to do all by alone but I am not able to do it so took help form these notebook:\n- [A study on Regression applied to the Ames dataset](https:\/\/www.kaggle.com\/juliencs\/a-study-on-regression-applied-to-the-ames-dataset)\n- [Regularized Linear Models](https:\/\/www.kaggle.com\/apapiu\/regularized-linear-models)\n- [Comprehensive data exploration with Python](https:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python)\n- [Stacked Regressions](https:\/\/www.kaggle.com\/serigne\/stacked-regressions-top-4-on-leaderboard\/notebook#Data-Processing)","f15d9565":"60\t2-STORY 1946 & NEWER -- have the hightest price","99acbb81":"We can see at the bottom right two with extremely large GrLivArea that are of a low price. These values are huge oultliers. Therefore, we can safely delete them.","c1fc2d4c":"**Outliers removal is note always safe. We decided to delete these two as they are very huge and really bad**","ec3217aa":"skew corrected","045d4000":"**MSZoning (The general zoning classification)** : 'RL' is by far the most common value. So we can fill in missing values with 'RL'","0f2fbfeb":"<a href=\".\/submission.csv\"> Download File <\/a>","009c6bfe":"**MasVnrArea and MasVnrType** : NA most likely means no masonry veneer for these houses. We can fill 0 for the area and None for the type."}}