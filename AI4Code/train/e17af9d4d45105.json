{"cell_type":{"0aaf1b88":"code","ba12a654":"code","aeed1148":"code","ff552bca":"code","1866ef72":"code","2ef0a310":"code","c88ced29":"code","17a0b3ad":"code","a16517fe":"code","2701bdcd":"code","1fed27d2":"code","95045543":"code","0bcee55c":"code","33116e5c":"code","a2153050":"code","09faf713":"code","91a4cbe7":"code","dcdf7ae0":"code","ffc36621":"code","bc6e4eba":"code","db85540b":"code","20f3954d":"code","ce95e022":"code","bd0e9432":"code","1ee6e793":"code","f852c91d":"code","e5dda725":"code","990b9cd7":"code","b206cad3":"code","f2fe140d":"code","d924faaf":"code","fbcf57da":"code","ff51c7a0":"code","0ea993ee":"code","88119128":"code","74fb8bbc":"code","4b34b49a":"code","d7785837":"code","f5826d35":"markdown","b9fee71a":"markdown","cad9008e":"markdown","af73e876":"markdown","2295eb28":"markdown","06d23b04":"markdown","ab9202ae":"markdown","be8bc1d8":"markdown","7275cd70":"markdown","65bf2421":"markdown","8a672d7d":"markdown","7e4b9a5e":"markdown","8bea459f":"markdown","1e429329":"markdown","ca916219":"markdown","9ef86804":"markdown","98016f00":"markdown","03bbf0c6":"markdown","5f48f489":"markdown","fe281369":"markdown","f069f265":"markdown","49084f8d":"markdown","c67571e0":"markdown","3d706ed5":"markdown","e3288e38":"markdown","c989b221":"markdown","d2da9921":"markdown","b4434fc0":"markdown","7231056a":"markdown","a5656352":"markdown","904d69ad":"markdown","9ca88e0e":"markdown"},"source":{"0aaf1b88":"# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport folium","ba12a654":"# !ls -lt ..\/input\/corona-virus-report","aeed1148":"# importing datasets\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.head(25)","ff552bca":"# dataframe info\nfull_table.info()","1866ef72":"# checking for missing value\nfull_table.isna().sum()","2ef0a310":"# replacing Mainland china with just China\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values with NA\nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('NA')","c88ced29":"# cases in the Diamond Princess cruise ship\nship = full_table[full_table['Province\/State']=='Diamond Princess cruise ship']\nfull_table = full_table[full_table['Province\/State']!='Diamond Princess cruise ship']\n\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\n\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()","17a0b3ad":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum()\ntemp = temp.reset_index()\ntemp = temp.sort_values('Date', ascending=False)\ntemp.head(1).style.background_gradient(cmap='Pastel1')","a16517fe":"temp = full_latest.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered'].max()\ntemp.style.background_gradient(cmap='Pastel1_r')","2701bdcd":"temp_f = full_latest_grouped[['Country\/Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp_f = temp_f.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Pastel1_r')","1fed27d2":"temp_f = china_latest_grouped[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp_f = temp_f.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Pastel1_r')","95045543":"# World wide\n\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1)\n\nfor i in range(0, len(full_latest)):\n    folium.Circle(\n        location=[full_latest.iloc[i]['Lat'], full_latest.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(full_latest.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(full_latest.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(full_latest.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(full_latest.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(full_latest.iloc[i]['Recovered']),\n        radius=int(full_latest.iloc[i]['Confirmed'])).add_to(m)\nm","0bcee55c":"# China \n\nm = folium.Map(location=[30, 116], tiles='cartodbpositron',\n               min_zoom=2, max_zoom=5, zoom_start=3)\n\nfor i in range(0, len(china_latest)):\n    folium.Circle(\n        location=[china_latest.iloc[i]['Lat'], china_latest.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(china_latest.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(china_latest.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(china_latest.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(china_latest.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(china_latest.iloc[i]['Recovered']),\n        radius=int(china_latest.iloc[i]['Confirmed'])**1).add_to(m)\nm","33116e5c":"fig = px.choropleth(full_latest_grouped, locations=\"Country\/Region\", \n                    locationmode='country names', color=\"Confirmed\", \n                    hover_name=\"Country\/Region\", range_color=[1,500], \n                    color_continuous_scale=\"aggrnyl\", \n                    title='Countries with Confirmed Cases')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()\n\n# ------------------------------------------------------------------------\n\nfig = px.choropleth(full_latest_grouped[full_latest_grouped['Deaths']>0], \n                    locations=\"Country\/Region\", locationmode='country names',\n                    color=\"Deaths\", hover_name=\"Country\/Region\", \n                    range_color=[1,50], color_continuous_scale=\"agsunset\",\n                    title='Countries with Deaths Reported')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","a2153050":"temp = full_table.groupby(['Country\/Region', 'Date'])['Confirmed', 'Deaths', 'Recovered'].sum()\ntemp = temp.reset_index()\n# temp.head()\n\nfig = px.bar(temp, x=\"Date\", y=\"Confirmed\", color='Country\/Region', orientation='v', height=600,\n             title='Cases', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()\n\nfig = px.bar(temp, x=\"Date\", y=\"Deaths\", color='Country\/Region', orientation='v', height=600,\n             title='Deaths', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","09faf713":"formated_gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf = formated_gdf[formated_gdf['Country\/Region']!='China']\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\n\nfig = px.scatter_geo(formated_gdf[formated_gdf['Country\/Region']!='China'], \n                     locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='Confirmed', hover_name=\"Country\/Region\", \n                     range_color= [0, max(formated_gdf['Confirmed'])+2], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Spread outside China over time')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()\n\n# -----------------------------------------------------------------------------------\n\nchina_map = china.groupby(['Date', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', \n                                                      'Lat', 'Long'].max()\nchina_map = china_map.reset_index()\nchina_map['size'] = china_map['Confirmed'].pow(0.5)\nchina_map['Date'] = pd.to_datetime(china_map['Date'])\nchina_map['Date'] = china_map['Date'].dt.strftime('%m\/%d\/%Y')\nchina_map.head()\n\nfig = px.scatter_geo(china_map, lat='Lat', lon='Long', scope='asia',\n                     color=\"size\", size='size', hover_name='Province\/State', \n                     hover_data=['Confirmed', 'Deaths', 'Recovered'],\n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Spread in China over time')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","91a4cbe7":"temp_flg = full_latest_grouped[['Country\/Region', 'Deaths']]\ntemp_flg = temp_flg.sort_values(by='Deaths', ascending=False)\ntemp_flg = temp_flg.reset_index(drop=True)\ntemp_flg = temp_flg[temp_flg['Deaths']>0]\ntemp_flg.style.background_gradient(cmap='Pastel1_r')","dcdf7ae0":"# Countries with no cases recovered\ntemp = row_latest_grouped[row_latest_grouped['Recovered']==0]\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1_r')","ffc36621":"# Provinces with no cases recovered\ntemp = china_latest_grouped[china_latest_grouped['Recovered']==0]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1_r')","bc6e4eba":"temp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Deaths']+\n                          row_latest_grouped['Recovered']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","db85540b":"temp = china_latest_grouped[china_latest_grouped['Confirmed']==\n                          china_latest_grouped['Deaths']+\n                          china_latest_grouped['Recovered']]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","20f3954d":"temp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Recovered']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","ce95e022":"temp = china_latest_grouped[china_latest_grouped['Confirmed']==\n                          china_latest_grouped['Recovered']]\ntemp = temp[['Province\/State', 'Confirmed', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","bd0e9432":"# Cases in the Diamond Princess Cruise Ship\ntemp = ship.sort_values(by='Date', ascending=False).head(1)\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']].reset_index(drop=True)\ntemp.style.background_gradient(cmap='rainbow')","1ee6e793":"formated_gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['size'] = formated_gdf['Confirmed'].pow(0.3)\n\nfig = px.scatter_geo(formated_gdf, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='size', hover_name=\"Country\/Region\", \n                     range_color= [0, max(formated_gdf['Confirmed'])+2], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Spread over time')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","f852c91d":"def location(row):\n    if row['Country\/Region']=='China':\n        if row['Province\/State']=='Hubei':\n            return 'Hubei'\n        else:\n            return 'Other Chinese Provinces'\n    else:\n        return 'Rest of the World'\n\ntemp = full_latest.copy()\ntemp['Region'] = temp.apply(location, axis=1)\ntemp = temp.groupby('Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ntemp = temp.melt(id_vars='Region', value_vars=['Confirmed', 'Deaths', 'Recovered'], \n                 var_name='Case', value_name='Count').sort_values('Count')\ntemp.head()\n\nfig = px.bar(temp, y='Region', x='Count', color='Case', barmode='group', orientation='h',\n             text='Count', title='Hubei - China - World', \n             color_discrete_sequence= ['#EF553B', '#00CC96', '#636EFA'])\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","e5dda725":"# In China\ntemp = china.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\ntemp = temp.reset_index()\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             title='Number of new cases in China everyday')\nfig.update_layout(barmode='group')\nfig.show()\n\n#-----------------------------------------------------------------------------\n\n# ROW\ntemp = row.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\ntemp = temp.reset_index()\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             title='Number of new cases outside China everyday')\nfig.update_layout(barmode='group')\nfig.show()","990b9cd7":"gdf = gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\ngdf = gdf.reset_index()\n\ntemp = gdf[gdf['Country\/Region']=='China'].reset_index()\ntemp = temp.melt(id_vars='Date', value_vars=['Confirmed', 'Deaths', 'Recovered'],\n                var_name='Case', value_name='Count')\nfig = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', facet_col=\"Case\",\n            title='Cases in China')\nfig.show()\n\ntemp = gdf[gdf['Country\/Region']!='China'].groupby('Date').sum().reset_index()\ntemp = temp.melt(id_vars='Date', value_vars=['Confirmed', 'Deaths', 'Recovered'],\n                var_name='Case', value_name='Count')\nfig = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', facet_col=\"Case\",\n             title='Cases Outside China')\nfig.show()","b206cad3":"c_spread = china[china['Confirmed']!=0].groupby('Date')['Province\/State'].unique().apply(len)\nc_spread = pd.DataFrame(c_spread).reset_index()\n\nfig = px.line(c_spread, x='Date', y='Province\/State', \n              title='Number of Provinces\/States\/Regions of China to which COVID-19 spread over the time')\nfig.show()\n\n# ------------------------------------------------------------------------------------------\n\nspread = full_table[full_table['Confirmed']!=0].groupby('Date')['Country\/Region'].unique().apply(len)\nspread = pd.DataFrame(spread).reset_index()\n\nfig = px.line(spread, x='Date', y='Country\/Region', \n              title='Number of Countries\/Regions to which COVID-19 spread over the time')\nfig.show()","f2fe140d":"temp = full_table.groupby('Date').sum().reset_index()\ntemp.head()\n\n# adding two more columns\ntemp['No. of Deaths to 100 Confirmed Cases'] = round(temp['Deaths']\/\n                                                     temp['Confirmed'], 3)*100\ntemp['No. of Recovered to 100 Confirmed Cases'] = round(temp['Recovered']\/\n                                                        temp['Confirmed'], 3)*100\ntemp['No. of Recovered to 1 Death Case'] = round(temp['Recovered']\/\n                                                 temp['Deaths'], 3)\n\ntemp = temp.melt(id_vars='Date', \n                 value_vars=['No. of Deaths to 100 Confirmed Cases', \n                             'No. of Recovered to 100 Confirmed Cases', \n                             'No. of Recovered to 1 Death Case'], \n                 var_name='Ratio', \n                 value_name='Value')\n\nfig = px.line(temp, x=\"Date\", y=\"Value\", color='Ratio', \n              title='Recovery and Mortality Rate Over The Time')\nfig.show()","d924faaf":"rl = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum()\nrl = rl.reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\nrl.head().style.background_gradient(cmap='rainbow')\n\nncl = rl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths'] - ncl['Recovered']\nncl = ncl.melt(id_vars=\"Country\/Region\", value_vars=['Affected', 'Recovered', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             x=\"Country\/Region\", y=\"value\", color='variable', orientation='v', height=800,\n             # height=600, width=1000,\n             title='Number of Cases outside China')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()\n\n# ------------------------------------------\n\ncl = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered'].sum()\ncl = cl.reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\n# cl.head().style.background_gradient(cmap='rainbow')\n\nncl = cl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths'] - ncl['Recovered']\nncl = ncl.melt(id_vars=\"Province\/State\", value_vars=['Affected', 'Recovered', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             y=\"Province\/State\", x=\"value\", color='variable', orientation='h', height=800,\n             # height=600, width=1000,\n             title='Number of Cases in China')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","fbcf57da":"fig = px.treemap(china_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                 path=[\"Province\/State\"], values=\"Confirmed\", \n                 title='Number of Confirmed Cases in Chinese Provinces',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.show()\n\nfig = px.treemap(china_latest.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                 path=[\"Province\/State\"], values=\"Deaths\", \n                 title='Number of Deaths Reported in Chinese Provinces',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.show()\n\nfig = px.treemap(china_latest.sort_values(by='Recovered', ascending=False).reset_index(drop=True), \n                 path=[\"Province\/State\"], values=\"Recovered\", \n                 title='Number of Recovered Cases in Chinese Provinces',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.show()\n\n# ----------------------------------------------------------------------------\n\nfig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Confirmed\", \n                 title='Number of Confirmed Cases outside china',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()\n\nfig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Deaths\", \n                 title='Number of Deaths outside china',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()\n\nfig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Recovered\", \n                 title='Number of Recovered Cases outside china',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()","ff51c7a0":"temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp, x=\"Date\", y=\"Confirmed\", color='Country\/Region',\n             title='Number of new cases everyday')\nfig.show()\n\nfig = px.bar(temp[temp['Country\/Region']!='China'], x=\"Date\", y=\"Confirmed\", color='Country\/Region',\n             title='Number of new cases outside China everyday')\nfig.show()\n\nfig = px.bar(temp, x=\"Date\", y=\"Deaths\", color='Country\/Region',\n             title='Number of new death case reported outside China everyday')\nfig.show()\n\nfig = px.bar(temp[temp['Country\/Region']!='China'], x=\"Date\", y=\"Deaths\", color='Country\/Region',\n             title='Number of new death case reported outside China everyday')\nfig.show()","0ea993ee":"epidemics = pd.DataFrame({\n    'epidemic' : ['COVID-19', 'SARS', 'EBOLA', 'MERS', 'H1N1'],\n    'start_year' : [2019, 2003, 2014, 2012, 2009],\n    'end_year' : [2020, 2004, 2016, 2017, 2010],\n    'confirmed' : [80000, 8096, 28646, 2494, 6724149],\n    'deaths' : [2750, 774, 11323, 858, 19654]\n})\n\nepidemics['mortality'] = round((epidemics['deaths']\/epidemics['confirmed'])*100, 2)\n\nepidemics.head()","88119128":"temp = epidemics.melt(id_vars='epidemic', value_vars=['confirmed', 'deaths', 'mortality'],\n                      var_name='Case', value_name='Value')\n\nfig = px.bar(temp, x=\"epidemic\", y=\"Value\", color='epidemic', text='Value', facet_col=\"Case\",\n             color_discrete_sequence = px.colors.qualitative.Bold)\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_yaxes(showticklabels=False)\nfig.layout.yaxis2.update(matches=None)\nfig.layout.yaxis3.update(matches=None)\nfig.show()","74fb8bbc":"fig = px.scatter(epidemics, x='start_year', y = [1 for i in range(len(epidemics))], \n                 size='confirmed', color='epidemic', title='Confirmed Cases',\n                 color_discrete_sequence = px.colors.qualitative.Bold)\nfig.update_yaxes(showticklabels=False)\nfig.show()\n\nfig = px.scatter(epidemics, x='start_year', y = [1 for i in range(len(epidemics))], \n                 size='deaths', color='epidemic', title='Deaths',\n                 color_discrete_sequence = px.colors.qualitative.Bold)\nfig.update_yaxes(showticklabels=False)\nfig.show()","4b34b49a":"temp = full_table.groupby('Date')['Confirmed'].sum().reset_index()\n\ncovid = temp['Confirmed']\nsars = [8096 for i in range(len(temp))]\nebola = [28646 for i in range(len(temp))]\nmers = [2494 for i in range(len(temp))]\nh1n1 = [6724149 for i in range(len(temp))]\n\nplt.style.use('fivethirtyeight')\nplt.figure(figsize=(20, 8))\nax = plt.plot(temp['Date'], covid, label='COVID-19 (2019-2020)', c='#555555', alpha=0.8)\nax = plt.plot(temp['Date'], sars, label='SARS (2003-2004)', c='#E71D36', ls='--', alpha=0.8)\nax = plt.plot(temp['Date'], ebola, label='EBOLA (2014-2016)', c='#FF9F1C', ls='--', alpha=0.8)\nax = plt.plot(temp['Date'], mers, label='MERS', c='#2EC4B6', ls='--', alpha=0.8)\nplt.title('Number of Cases')\nplt.legend()\nplt.show()","d7785837":"temp = full_table.groupby('Date')['Deaths'].sum().reset_index()\n\ncovid = temp['Deaths']\nsars = [774 for i in range(len(temp))]\nebola = [11323 for i in range(len(temp))]\nmers = [858 for i in range(len(temp))]\nh1n1 = [19654 for i in range(len(temp))]\n\nplt.figure(figsize=(20, 8))\nax = plt.plot(temp['Date'], covid, label='COVID-19 (2019-2020)', c='#555555', alpha=0.8)\nax = plt.plot(temp['Date'], sars, label='SARS (2003-2004)', c='#E71D36', ls='--', alpha=0.8)\nax = plt.plot(temp['Date'], ebola, label='EBOLA (2014-2016)', c='#FF9F1C', ls='--', alpha=0.8)\nax = plt.plot(temp['Date'], mers, label='MERS', c='#2EC4B6', ls='--', alpha=0.8)\nax = plt.plot(temp['Date'], h1n1, label='H1N1', c='#2345BA', ls='--', alpha=0.8)\nplt.title('Number of Deaths')\nplt.legend()\nplt.show()","f5826d35":"## Hubei - China - World","b9fee71a":"### Countries and Provinces with no affected case anymore","cad9008e":"### Country Wise Latest Data","af73e876":"### Diamond Princess Cruise ship Status","2295eb28":"### Spread over the time","06d23b04":"## Map","ab9202ae":"# Number of new cases everyday","be8bc1d8":"### Current Stats","7275cd70":"From the beginning of this epidemic Novel Coronavirus, I was keeping the close view on the news related to the Characteristics of this pandemic disease. \nThe most crucial thing in that disease observed by me while reading several news\/blogs and analytical report is that the symptoms are supposed to appear after 10-14 days of getting affected by the COVID -19 virus which makes that disease too much crucial or lethal and the infected person unknowingly play the role of carrier of this virus and get the other person affected through a chain reaction mechanism due to which it can spread in a large area\/provenance\/state at a quite accelerated rate within a short span of time.\nThus the time is taken by the individual after infection from COVID -19 to appear the symptoms play a major role in spreading this acute disease.\nHere my intention is not to create any panic situation, I am just sharing the observation that observed by me while studying and following the news \/ analytical report related to the COVID-19.\n\nTill I am writing this blog two deaths have been confirmed from this pandemic disease and the number of infected \/suspicious cases are increasing exponentially.\n\nIn the present weather condition, the common cold\/cough or viral fever are quite often in the people of all ages. In everyday life, each and every individual come into the contact of several other individuals, So a common man can not differentiate the patients suffering from a common cold or from COVID -19.\nThus it becomes more essential that we should restrict our movement and lockdown ourselves within our home till the rise of temperature reduces the intensity of spreading of COVID-19 and the concerned ministry\/ medical authority may have the buffer period in which they can take essential step to save the life of the Citizens from this pandemic disease.\nHere I am sharing some links that would support the above-written statements, kindly go through it read it very carefully and aware the People of INDIA.\n","65bf2421":"### Countries and Provinces with no recovered cases","8a672d7d":"### Derived Tables","7e4b9a5e":"## Proportion of Cases","8bea459f":"## Number of Cases","1e429329":"## Recovery and Mortality Rate Over The Time","ca916219":"### Complete Data","9ef86804":"### Cases in differnt Countries","98016f00":"### Reported cases over the world","03bbf0c6":"# Importing the Libraries","5f48f489":"### Countries with deaths reported","fe281369":"# Data Preprocessing","f069f265":"### Countries and Provinces with all the cases recovered","49084f8d":"# Comparison With other Epidemics","c67571e0":"* The Diamond Princess cruise ship was carrying 3,711 passengers and crew on board\n* Ship arrived in Yokohama, near Tokyo, on February 3\n* [https:\/\/www.princess.com\/news\/notices_and_advisories\/notices\/diamond-princess-update.html](https:\/\/www.princess.com\/news\/notices_and_advisories\/notices\/diamond-princess-update.html)","3d706ed5":"### Reported cases in China","e3288e38":"### Cleaning Data","c989b221":"### Chines Province Wise Latest Data","d2da9921":"* During the first few weeks the there were more Deaths reported per day than Recoverd cases\n* Over the time that has changed drastically\n* Although the death rate hasn't come down, the number of recovered cases has defenitly increased","b4434fc0":"* COVID-19 spread to all the provinces of the China really fast and early\n* Number of countries to which COVID-19 spread hasn't increased that much after first few weeks","7231056a":"# Updated Dataset","a5656352":"# Exploratory Data Analysis (EDA)","904d69ad":"## Latest Data","9ca88e0e":"## Number of Places to which COVID-19 Spread"}}