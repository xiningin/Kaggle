{"cell_type":{"9ec75009":"code","7063afcc":"code","ab2b195b":"code","cec97698":"code","6e895bc0":"code","7f8c60ad":"code","f42964a4":"code","af3d18f9":"code","83f6b23d":"code","e6206811":"code","852b8c63":"code","e6b9750d":"code","c5797d02":"code","13dac4a5":"code","4358ec53":"code","c0d06afd":"code","c851f005":"code","117a27dd":"code","57de4028":"code","0c2f776f":"code","12f21131":"code","72726cb7":"code","1f1cc0c4":"code","6af5a09f":"code","f205e057":"code","21739e52":"code","31f185dd":"markdown","b90d6fab":"markdown","f401bae0":"markdown","84ebf103":"markdown","b94eb126":"markdown","410da29f":"markdown","a609390f":"markdown","dc5f3e79":"markdown","f260f280":"markdown","abd52e6d":"markdown","bc004166":"markdown","5acf2757":"markdown","41e609b0":"markdown","335e3d7f":"markdown","70488edf":"markdown"},"source":{"9ec75009":"import pandas as pd\n\n# Set up code checking\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.nlp.ex1 import *\nprint('Setup Complete')","7063afcc":"# Load in the data from JSON file\ndata = pd.read_json('..\/input\/nlp-course\/restaurant.json')\ndata.head()","ab2b195b":"menu = [\"Cheese Steak\", \"Cheesesteak\", \"Steak and Cheese\", \"Italian Combo\", \"Tiramisu\", \"Cannoli\",\n        \"Chicken Salad\", \"Chicken Spinach Salad\", \"Meatball\", \"Pizza\", \"Pizzas\", \"Spaghetti\",\n        \"Bruchetta\", \"Eggplant\", \"Italian Beef\", \"Purista\", \"Pasta\", \"Calzones\",  \"Calzone\",\n        \"Italian Sausage\", \"Chicken Cutlet\", \"Chicken Parm\", \"Chicken Parmesan\", \"Gnocchi\",\n        \"Chicken Pesto\", \"Turkey Sandwich\", \"Turkey Breast\", \"Ziti\", \"Portobello\", \"Reuben\",\n        \"Mozzarella Caprese\",  \"Corned Beef\", \"Garlic Bread\", \"Pastrami\", \"Roast Beef\",\n        \"Tuna Salad\", \"Lasagna\", \"Artichoke Salad\", \"Fettuccini Alfredo\", \"Chicken Parmigiana\",\n        \"Grilled Veggie\", \"Grilled Veggies\", \"Grilled Vegetable\", \"Mac and Cheese\", \"Macaroni\",  \n         \"Prosciutto\", \"Salami\"]","cec97698":"# Check your answer (Run this code cell to receive credit!)\nq_1.solution()","6e895bc0":"import spacy\nfrom spacy.matcher import PhraseMatcher\n\nindex_of_review_to_test_on = 14\ntext_to_test_on = data.text.iloc[index_of_review_to_test_on]\ntext_to_test_on","7f8c60ad":"# Load the SpaCy model\nnlp = spacy.blank('en')\nnlp","f42964a4":"# Create the tokenized version of text_to_test_on\nreview_doc = nlp(text_to_test_on)\nreview_doc","af3d18f9":"# Create the PhraseMatcher object. The tokenizer is the first argument. Use attr = 'LOWER' to make consistent capitalization\nmatcher = PhraseMatcher(nlp.vocab, attr='LOWER')\nmatcher","83f6b23d":"# Create a list of tokens for each item in the menu\nmenu_tokens_list = [nlp(item) for item in menu]\nmenu_tokens_list[-5:]","e6206811":"# Add the item patterns to the matcher. \n# Look at https:\/\/spacy.io\/api\/phrasematcher#add in the docs for help with this step\n# Then uncomment the lines below \n\nmatcher.add(\"MENU\",            # Just a name for the set of rules we're matching to\n            menu_tokens_list  \n           )\nmatcher","852b8c63":"# Find matches in the review_doc\nmatches = matcher(review_doc)\nmatches","e6b9750d":"match_id, start, end = matches[0]\nprint(nlp.vocab.strings[match_id], review_doc[start:end])","c5797d02":"# Uncomment to check your work\nq_2.check()\n\n# Lines below will give you a hint or solution code\n#q_2.hint()\n#q_2.solution()","13dac4a5":"for match in matches:\n    print(f\"Token number {match[1]}: {review_doc[match[1]:match[2]]}\")","4358ec53":"from collections import defaultdict\n\n# item_ratings is a dictionary of lists. If a key doesn't exist in item_ratings,\n# the key is added with an empty list as the value.\nitem_ratings = defaultdict(list)\nitem_ratings","c0d06afd":"debug = False\nfor idx, review in data.iterrows():\n    doc = nlp(review.text)\n    if debug:\n        print('doc')\n        print(doc)\n    \n    # Using the matcher from the previous exercise\n    matches = matcher(doc)\n    if debug:\n        print('matches')\n        print(matches)\n    \n    # Create a set of the items found in the review text\n    found_items = set([doc[match[1]:match[2]].lower_ for match in matches])\n    if debug:\n        print('found_items')\n        print(found_items)\n\n    # Update item_ratings with rating for each item in found_items\n    # Transform the item strings to lowercase to make it case insensitive\n    for item in found_items:\n        item_ratings[item].append(review.stars)","c851f005":"len(item_ratings)","117a27dd":"item_ratings['eggplant'][:5]","57de4028":"q_3.check()\n\n# Lines below will give you a hint or solution code\n#q_3.hint()\n#q_3.solution()","0c2f776f":"# Calculate the mean ratings for each menu item as a dictionary\nmean_ratings = {item: sum(rating)\/len(rating) for item, rating in item_ratings.items()}\nmean_ratings","12f21131":"# Find the worst item, and write it as a string in worst_item. This can be multiple lines of code if you want.\nworst_item = sorted(mean_ratings, key=mean_ratings.get)[0]\nworst_item","72726cb7":"q_4.check()\n\n# Lines below will give you a hint or solution code\n#q_4.hint()\n#q_4.solution() # Good solution","1f1cc0c4":"# After implementing the above cell, uncomment and run this to print \n# out the worst item, along with its average rating. \n\nprint(worst_item)\nprint(mean_ratings[worst_item])","6af5a09f":"counts = {item: len(ratings) for item, ratings in item_ratings.items()}\n\nitem_counts = sorted(counts, key=counts.get, reverse=True)\nfor item in item_counts:\n    print(f\"{item:>25}{counts[item]:>5}\")","f205e057":"sorted_ratings = sorted(mean_ratings, key=mean_ratings.get)\n\nprint(\"Worst rated menu items:\")\nfor item in sorted_ratings[:10]:\n    print(f\"{item:20} Ave rating: {mean_ratings[item]:.2f} \\tcount: {counts[item]}\")\n    \nprint(\"\\n\\nBest rated menu items:\")\nfor item in sorted_ratings[-10:]:\n    print(f\"{item:20} Ave rating: {mean_ratings[item]:.2f} \\tcount: {counts[item]}\")","21739e52":"# Check your answer (Run this code cell to receive credit!)\nq_5.solution()","31f185dd":"# Basic Text Processing with Spacy\n    \nYou're a consultant for [DelFalco's Italian Restaurant](https:\/\/defalcosdeli.com\/index.html).\nThe owner asked you to identify whether there are any foods on their menu that diners find disappointing. \n\n<img src=\"https:\/\/i.imgur.com\/8DZunAQ.jpg\" alt=\"Meatball Sub\" width=\"250\"\/>\n\nBefore getting started, run the following cell to set up code checking.","b90d6fab":"After implementing the above cell, uncomment the following cell to print the matches.","f401bae0":"# Step 1: Plan Your Analysis","84ebf103":"# Step 5: Are counts important here?\n\nSimilar to the mean ratings, you can calculate the number of reviews for each item.","b94eb126":"**This notebook is an exercise in the [Natural Language Processing](https:\/\/www.kaggle.com\/learn\/natural-language-processing) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/matleonard\/intro-to-nlp).**\n\n---\n","410da29f":"Given the data from Yelp and the list of menu items, do you have any ideas for how you could find which menu items have disappointed diners?\n\nThink about your answer. Then run the cell below to see one approach.","a609390f":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161466) to chat with other Learners.*","dc5f3e79":"# Keep Going\n\nNow that you are ready to combine your NLP skills with your ML skills, **[see how it's done](https:\/\/www.kaggle.com\/matleonard\/text-classification)**.","f260f280":"# Step 2: Find items in one review\n\nYou'll pursue this plan of calculating average scores of the reviews mentioning each menu item.\n\nAs a first step, you'll write code to extract the foods mentioned in a single review.\n\nSince menu items are multiple tokens long, you'll use `PhraseMatcher` which can match series of tokens.\n\nFill in the `____` values below to get a list of items matching a single menu item.","abd52e6d":"# Step 4: What's the worst reviewed item?\n\nUsing these item ratings, find the menu item with the worst average rating.","bc004166":"Here is code to print the 10 best and 10 worst rated items. Look at the results, and decide whether you think it's important to consider the number of reviews when interpreting scores of which items are best and worst.","5acf2757":"# Step 3: Matching on the whole dataset\n\nNow run this matcher over the whole dataset and collect ratings for each menu item. Each review has a rating, `review.stars`. For each item that appears in the review text (`review.text`), append the review's rating to a list of ratings for that item. The lists are kept in a dictionary `item_ratings`.\n\nTo get the matched phrases, you can reference the `PhraseMatcher` documentation for the structure of each match object:\n\n>A list of `(match_id, start, end)` tuples, describing the matches. A match tuple describes a span `doc[start:end]`. The `match_id` is the ID of the added match pattern.","41e609b0":"The business owner suggested you use diner reviews from the Yelp website to determine which dishes people liked and disliked. You pulled the data from Yelp. Before you get to analysis, run the code cell below for a quick look at the data you have to work with.","335e3d7f":"Run the following line after you've decided your answer.","70488edf":"The owner also gave you this list of menu items and common alternate spellings."}}