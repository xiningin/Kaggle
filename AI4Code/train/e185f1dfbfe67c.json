{"cell_type":{"bbe53aec":"code","83816efe":"code","33707dae":"code","570810b0":"code","1ce4da66":"code","a25db901":"code","aabd6fa2":"code","a30dafad":"code","78ad8844":"code","9d023ae8":"code","94cfee37":"code","cac1ac12":"code","ab35e339":"code","aa4a46e4":"code","89ff2378":"code","9110046f":"code","d3fc93ec":"markdown","b7878e8d":"markdown","203d4333":"markdown","3e10fa36":"markdown","a9371107":"markdown","47eba947":"markdown","1194c8f6":"markdown","fe4a5a29":"markdown","3b899780":"markdown","8009083c":"markdown","8af06ce5":"markdown","191d75cc":"markdown"},"source":{"bbe53aec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","83816efe":"import torch\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport torch.nn as nn\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom IPython import display\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split","33707dae":"N=1000\nX=torch.randn(N,1)\ny=X+torch.randn(N,1)\/2\n","570810b0":"plt.plot(X,y,'s')","1ce4da66":"# Building a Model\nANNLR=nn.Sequential(\n    # Input\n    nn.Linear(1,1),\n    # Activation\n    nn.ReLU(),\n    # Output\n    nn.Linear(1,1)\n\n)\nANNLR","a25db901":"# Setting the Hyperparasm\n# Learning Rate\nlr=0.05\n# Loss Function\nlf=nn.MSELoss()\n# Optimizers\noptimizer=torch.optim.SGD(ANNLR.parameters(),lr=lr)\n# Epochs or Iterations\nepochs=500\n# Array of losses\nlosses=torch.zeros(500)","aabd6fa2":"# Train the Model\nfor i in range(epochs):\n    #Forward Propogation\n    y_dash=ANNLR(X)\n    # Loss \n    loss=lf(y_dash,y)\n    losses[i]=loss\n    # Back Propogation\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    ","a30dafad":"# One Final Forward Propogation\npreds=ANNLR(X)\n# Final Loss Computation by MSE\nlosses_final=preds-y\nlosses_final\nlosses_final_compute=losses_final.pow(2).mean()\nlosses_final_compute","78ad8844":"# Plotting the Results\nplt.plot(losses.detach(),'o')\nplt.plot(epochs,losses_final_compute.detach(),'ro')\nplt.xlabel('Epcohs')\nplt.ylabel('Loss Value')","9d023ae8":"# Plotting the Data to check how our Model Performs\nplt.plot(X,y,'bo',label='Real Data')\nplt.plot(X,preds.detach(),'rs',label='Predicted Values')\n","94cfee37":"# Building a Fully Connected Dense  Linear Model\n# Apparently seaborn also has the Iris Dataset Built in\ntrain_data=pd.read_csv('..\/input\/iris\/Iris.csv')\ntrain_data","cac1ac12":"sns.pairplot(train_data,hue='Species')","ab35e339":"data=torch.tensor(train_data[train_data.columns[0:4]].values).float()\n# Transforming into Numbers \nlabels=torch.zeros(len(data),dtype=torch.long)\nlabels[train_data.Species=='Iris-setosa']=0\nlabels[train_data.Species=='Iris-versicolor']=1\nlabels[train_data.Species=='Iris-virginica']=2\nlabels","aa4a46e4":"# Creating the Model\nANNClass=nn.Sequential(\n    nn.Linear(4,64),\n    nn.ReLU(),\n    nn.Linear(64,64),\n    nn.ReLU(),\n    nn.Linear(64,3)\n)\n# Loss Function will be Categorical Cross Entropy\nlf1=nn.CrossEntropyLoss()\n\n#Optimizers\noptimizer=torch.optim.SGD(ANNClass.parameters(),lr=0.01)\nlosses1=torch.zeros(500)\nongoingAcc=[]","89ff2378":"# Training the Model\nfor i in range(epochs):\n    # Forward Propogation\n    y_dash=ANNClass(data)\n    \n    # Compute the Loss\n    loss1=lf1(y_dash,labels)\n    losses1[i]=loss1\n    \n    # Backward Propogation\n    optimizer.zero_grad()\n    loss1.backward()\n    optimizer.step()\n    \n    # Computing the Accuracy\n    num_matches=torch.argmax(y_dash,axis=1)==labels\n    matches_Numeric=num_matches.float()\n    accuracy=torch.mean(matches_Numeric)\n    ongoingAcc.append(accuracy)\n    \n    ","9110046f":"# One Final Forward Propogation\npreds1=ANNClass(data)\npred_labels=torch.argmax(preds1,axis=1)\ntotalacc=100*torch.mean((pred_labels==labels).float())\ntotalacc","d3fc93ec":"<h4>\n \n \n<li> PyTorch is an optimized tensor library primarily used for Deep Learning applications\n\n    \n<li>It is an open-source machine learning library for Python,developed by the            Facebook AI team.\n\n   \n<\/h4>","b7878e8d":"## Types of Neural Networks\n####  1. Artificial Neural Networks\n####  2. Recurrent Neural Networks\n####  3. Convolutional Neural Networks","203d4333":"### What is a Perceptron\nWe can consider this entire setup as a Perceptron. This is also be considered as a Layer of the Neural Network. \nIt has 5 main components.\n- Inputs\n- Weights\n- Biases \n- Weighted Sum \/ Dot Product\n- Activation - Generally a Non Linear Function\n\n<b>Inputs (X)<\/b>--> [x<sub>0<\/sub>,x<sub>1<\/sub>....x<sub>n<\/sub>] <br>\n<b>Weights (W)<\/b>--> [w<sub>0<\/sub>,w<sub>1<\/sub>....w<sub>n<\/sub>] <br>\n<b>Biases <\/b>--> b is supplied in the Weighted Sum Step.It is the intercept value and it allows us to deviate from the origin and draw Separating Hyper planes.<br>\n<b>Weighted Sum <\/b>--> It is the Dot Product of the Two Vectors of Inputs and Weights. It can be written as [X<sup>T<\/sup>W] + b. <br>\n<b>Activation <\/b>--> Here there is a Step Function, there can be a softmax, sigmoid or any other kind of Activation function. The Linear Weighted Sum is passed into this Function. <br>\n#### <b>Final Equation can be written as: <\/b>\n\n<b>y=Activation F<sup>n<\/sup> ( [X<sup>T<\/sup>W] + b )<b>\n\nThere are a lot of other things like back propogation, optimizers etc but these forms the core idea behind the Neural Networks and is very essential to understand in order to learn Neural Nets\nAll of these steps together make a Perceptron \nAlso soon we will realize that a Neural Network is a collection of tons and tons of perceptron.","3e10fa36":"## A complete Guide to Artificial Neural Networks with Pytorch\n\n<img src=\"https:\/\/149695847.v2.pressablecdn.com\/wp-content\/uploads\/2022\/01\/Pytorch.png\" height=\"600\" width=\"600\">\n\n","a9371107":"## Much More to Come \ud83d\ude04","47eba947":"### Working on Regression with Iris Dataset \ud83c\udf38\ud83c\udf38","1194c8f6":"### The Math behind Neural Networks\n\n#### Errors, Loss Functions and Backward Propogation\n\n<b>Error = True Value - Predicted Value<br>\n<b>Errors are used to generate Losses using Loss Functions<br>\n    \nLoss Functions work Per sample and the average of Loss Functions for each datapoints is Cost Functions <br>\n    \nSo our main goal is to find a Set of <b> Weights <\/b> that minimizes the Losses and our motive is to minimize the Losses.\n    \nBatches are averaging n number of datapoints and feeding them together to avoid overfitting and n is the BATCH_SIZE\n  \n[Read More on Loss Functions](https:\/\/towardsdatascience.com\/what-is-loss-function-1e2605aeb904#:~:text=The%20loss%20function%20is%20the,algorithm%20and%20the%20expected%20output.)\n\n    \n#### Some More Pointers\n    \n1. Each Node in the Model is an Independent Node not aware of another node\n2. The Input Layer gets Data from the Outside World, and the subsequent layers get Inputs from their Preceding Layers\n3. The Layers makes the Input undergo a Non-Linear Transfromation\n4. Each Layer is a collection of Perceptrons Called Artificial Neurons\n    \n### Back Propogation\n  \n\nBack-propagation is just a way of propagating the total loss back into the neural network to know how much of the loss every node is responsible for, and subsequently updating the weights in such a way that minimizes the loss by giving the nodes with higher error rates lower weights and vice versa.<br>\nIt adjsuts the weights in accordance to the Losses.<br>\n    \n1. Initially the weights are random values between 0 to 1.\n2. Errors  and Loss is calculated based on Weights\n3. Then losses are back propogated in the network to make sure the weights are updated to minimize the loss\n    \n### **Interesting View Point**\n    \n#### Back Propogation is Gradient Descent on Steroids \ud83d\ude05\nThe updated Local minimum is itself minus derivative scaled by lr.<br>\nSo each weight after iteration\/epoch is w<sub>i<\/sub> - (lr* dL\/dx).<br>\nThere is a lot of Math that Goes Behind this.\n[Read More on Propogation and Gradient Descent ](https:\/\/towardsdatascience.com\/an-introduction-to-gradient-descent-and-backpropagation-81648bdb19b2)\n\n<b>Some Calculations on Back Propogation to illustrate it<b>:\n    <img src=\"https:\/\/lh3.googleusercontent.com\/ftS-UBv_KGuLRWOPST_wsKCTYk2_PaE19Y11S4tDf60xpquohY5ec6eUFo3cvYtdTJnGt6RBvXYORjwu6UgFFSe7KOCkRhndBL5UXBwW5jYihj-CAt1e_20vKCsmDYkNU2deNW9k=w2400\" height=\"500\" width=\"500\">\n \n[Read More on Back Propogation](https:\/\/towardsdatascience.com\/how-does-back-propagation-in-artificial-neural-networks-work-c7cad873ea7#:~:text=Back%2Dpropagation%20is%20just%20a,lower%20weights%20and%20vice%20versa.)\n    \n    \n","fe4a5a29":"## Regression with Pytorch\n\n#### No Non Linear Activation Function is needed in Linear Regression and that gets taken out from the Perceptron\n\n#### The error term is compensated  in the Loss Function","3b899780":"### Getting Started with ANNs\n<br>\n<br>\n<img src=\"https:\/\/www.tibco.com\/sites\/tibco\/files\/media_entity\/2021-05\/neutral-network-diagram.svg\" heigth=\"500\" width =\"500\">\n\n#### P.S - Each Node you see in this image is an Unit\/Artificial Neuron which is a Perceptron that is shown in the Figure Below. To condense it into an image it is represented by a Circle but is a complete unit in itself.","8009083c":"### A geometric Understanding of ANN\n- Each of the Feature corresponding to the Data can be considered as an Axis.<br>\n\n- Each datapoint\/observation is a co-ordinate in the n-dimensional space.<br>\n\n- Changing the dimensionality is also going to be an important step for Neural Networks<br>\n\n- While categorizing data or classifying data we use Hyperplanes which is a Line in case of a 2-d Feature Space, a Plane in a 3-D Feature Space and for dimensions  >3 it is generalized to a hyperplane.<br>\n\n- The scenario changes when we  want to make a Continous Prediction, we need to add one axis\/ Dimension on which we get the Result.So even while making discrete or continous Predictions there is a change in the Dims of the space.\n\n[Read More](https:\/\/www.researchgate.net\/publication\/2355641_An_introduction_to_Networks_Neural\/figures?lo=1)","8af06ce5":"### The Math behind Neural Networks\n\n#### Forward Propogation\n\n#### Why can the bias be absorbed into the dot product \n\n<b>Inputs (X)<\/b>--> [x<sub>0<\/sub>,x<sub>1<\/sub>....x<sub>n<\/sub>] <br>\n<b>Weights (W)<\/b>--> [w<sub>0<\/sub>,w<sub>1<\/sub>....w<sub>n<\/sub>] <br>\n<b>Biases <\/b>--> b\nWeight Corresponding to the Bias -> w<sub>b<\/sub> <br>\n\nWeighted Sum -> [X<sup>T<\/sup>W] + bw<sub>b<\/sub>.<br>\n**The Input and Weight Vector can be re-written as**:\n\nX= [b, x<sub>0<\/sub>, x<sub>1<\/sub> ,....x<sub>n<\/sub> ] <br>\nW= [w<sub>b<\/sub> ,w<sub>0<\/sub> ,w<sub>1<\/sub> ....w<sub>n<\/sub> ]  <br>\nSo the bias is now assimilated into [X<sup>T<\/sup>W]<br>\nThe new Y= F<sup>n<\/sup> [X<sup>T<\/sup>W]<br.\n\n#### Functions\n\nThere are many activation Functions to which the Input is fed and then it maps it to the Output. A graph of popular Activation Functions like Sigmoid, Relu, Hyperbolic Tangent , SELU, Softmax etc are given.\n\n<img src=\"https:\/\/assets-global.website-files.com\/5d7b77b063a9066d83e1209c\/60be4975a399c635d06ea853_hero_image_activation_func_dark.png\" height=\"450\" width=\"450\">\n\n\n\nSo now we know that the nodes have linear inputs and when they leave the perceptron they are non-linear in Nature. Now they are fed to the next Node\/Layer and this is the essence of Neural Networks.\n\n","191d75cc":"\n<img src=\"https:\/\/images.deepai.org\/glossary-terms\/perceptron-6168423.jpg\" height=\"500\" width=\"500\">\n"}}