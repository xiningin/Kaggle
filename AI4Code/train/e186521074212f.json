{"cell_type":{"82f9f9c5":"code","05939db3":"code","d10fa0b7":"code","4691dc9e":"code","88a3b1a2":"code","4fa5d281":"code","978cfa4e":"code","538ee5b7":"code","8005278f":"code","1d7ada6a":"code","c013438e":"code","deafd1be":"code","0b71f55d":"code","e5ac536f":"code","b36dbc9a":"code","dc22a215":"code","5c6b87ab":"code","08d27318":"code","ae9a01a1":"code","c96dea91":"code","b4119026":"code","89a74eff":"code","23f8a2b5":"code","056ae953":"code","d6dd8a47":"code","3cf9fbcb":"code","7c0d7b4e":"code","1324d066":"code","d5920e55":"code","2afa2878":"code","f4a040f1":"code","98435e42":"code","aa368226":"code","55dcabb8":"markdown","0b44222d":"markdown","61e794b6":"markdown","83b8f868":"markdown"},"source":{"82f9f9c5":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n\n%matplotlib inline\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport numpy as np \nimport pandas as pd\nimport pickle\nfrom scipy.sparse import csr_matrix\nfrom scipy.sparse import coo_matrix, hstack\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import TimeSeriesSplit\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom catboost import CatBoostClassifier\nimport xgboost as xgb","05939db3":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u0443\u043c\u0435\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u043f\u0438\u0441\u043a\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0438 \u0441\u0430\u0439\u0442\u043e\u0432\n\ntime_list=[\"time%s\"%i for i in range(1,11)]\nsite_list=[\"site%s\"%i for i in range(1,11)]","d10fa0b7":"# \u0417\u0430\u0434\u0430\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b\n\ntrain_df = pd.read_csv('..\/input\/catch-me-if-you-can-intruder-detection-through-webpage-session-tracking2\/train_sessions.csv',\n                       index_col='session_id', parse_dates=time_list)\ntest_df = pd.read_csv('..\/input\/catch-me-if-you-can-intruder-detection-through-webpage-session-tracking2\/test_sessions.csv',\n                       index_col='session_id', parse_dates=time_list)","4691dc9e":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u043c\u0435\u0441\u044f\u0446\u0430\n\ntrain_df[\"month\"] = train_df[\"time1\"].dt.month\n\n# \u0413\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u043f\u043e \u0442\u0430\u0440\u0433\u0435\u0442\u0443 \u0438 \u043c\u0435\u0441\u044f\u0446\u0443\n\ntrain_df.groupby(['target',\"month\"]).count()","88a3b1a2":"graph = sns.FacetGrid(train_df, col=\"target\")\ngraph.map(sns.distplot, \"month\")","4fa5d281":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043c\u0435\u0441\u044f\u0446 \u0432 \u0444\u0430\u043a\u0442\u043e\u0440\u044b \u0430\u043d\u0430\u043b\u0438\u0437\u0430\n\ntest_df[\"month\"] = test_df[\"time1\"].dt.month","978cfa4e":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432 \u0441\u0435\u0441\u0441\u0438\u0438 (\u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445)\n\ndef get_total_time(row): \n    time_length = row.shape[0] - 1 \n    i = time_length \n    while pd.isnull( row [ i ]): \n        i -= 1 \n    return (row[i] - row[0]) \/ np.timedelta64(1,'s')","538ee5b7":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c\n\ntrain_time = train_df[time_list] \ntest_time = test_df[time_list]","8005278f":"# \u0420\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0435\u0441\u0441\u0438\u0438\n\ntotal_time_train = []\nfor row in train_time.values:\n    total_time_train.append(get_total_time(row))\ntotal_time_train = np.array(total_time_train).reshape(-1,1).astype(int)\n\ntotal_time_test = []\nfor row in test_time.values:\n    total_time_test.append(get_total_time(row))\ntotal_time_test = np.array(total_time_test).reshape(-1,1).astype(int)","1d7ada6a":"# \u041f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u044f\u0435\u043c \u043e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u043a \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\u043c\n\ntrain_df['total time train'] = total_time_train\ntest_df['total time test'] = total_time_test","c013438e":"graph = sns.FacetGrid(train_df, col=\"target\")\ngraph.map(sns.distplot, \"total time train\")","deafd1be":"# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u043c\n\ntrain_df[\"day\"]=train_df[\"time1\"].dt.dayofweek\ntrain_df.groupby(['target',\"day\"]).count()","0b71f55d":"graph = sns.FacetGrid(train_df, col=\"target\")\ngraph.map(sns.distplot, 'day')","e5ac536f":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438 \u0432 \u0444\u0430\u043a\u0442\u043e\u0440\u044b \u0430\u043d\u0430\u043b\u0438\u0437\u0430\n\ntest_df[\"day\"] = test_df[\"time1\"].dt.dayofweek","b36dbc9a":"# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0434\u0435\u043d\u044c \u043c\u0435\u0441\u044f\u0446\u0430 \u043a\u0430\u043a \u0444\u0430\u043a\u0442\u043e\u0440\n\ntrain_df[\"date\"] = train_df[\"time1\"].dt.day\ntrain_df.groupby(['target',\"date\"]).count()","dc22a215":"graph = sns.FacetGrid(train_df, col=\"target\")\ngraph.map(sns.distplot, \"date\")","5c6b87ab":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0435\u043d\u044c \u043c\u0435\u0441\u044f\u0446\u0430 \u0432 \u0444\u0430\u043a\u0442\u043e\u0440\u044b \u0430\u043d\u0430\u043b\u0438\u0437\u0430\n\ntest_df[\"date\"] = test_df[\"time1\"].dt.day","08d27318":"# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0430\u0441 \u0441\u0443\u0442\u043e\u043a \u043a\u0430\u043a \u0444\u0430\u043a\u0442\u043e\u0440 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\n\ntrain_df[\"hour\"] = train_df[\"time1\"].dt.hour\ntrain_df.groupby(['target',\"hour\"]).count()","ae9a01a1":"graph = sns.FacetGrid(train_df, col=\"target\")\ngraph.map(sns.distplot, 'hour')","c96dea91":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0447\u0430\u0441 \u0441\u0443\u0442\u043e\u043a \u043a\u0430\u043a \u0444\u0430\u043a\u0442\u043e\u0440\n\ntest_df[\"hour\"] = test_df[\"time1\"].dt.hour","b4119026":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0430\u043a\u0442\u043e\u0440\u044b \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0434\u043d\u0435\u0439, \u043c\u0435\u0441\u044f\u0446\u0430\n\ntrain_df['target_hour'] = np.where((train_df['hour']>=19) | (train_df['hour']<=8) | (train_df['hour']==10), 1, 0)\ntest_df['target_hour'] = np.where((test_df['hour']>=19) | (test_df['hour']<=8) | (test_df['hour']==10), 1, 0)\n\ntrain_df['target_day'] = np.where((train_df['day']==2) | (train_df['day']==6), 1, 0)\ntest_df['target_day'] = np.where((test_df['day']==2) | (test_df['day']==6), 1, 0)\n\ntrain_df['target_date'] = np.where((train_df['date']==1) | (train_df['date']==3) | (train_df['date']==5) | (train_df['date']==21) | (train_df['date']==23) | (train_df['date']==26), 1, 0)\ntest_df['target_date'] = np.where((test_df['date']==1) | (test_df['date']==3) | (test_df['date']==5) | (test_df['date']==21) | (test_df['date']==23) | (test_df['date']==26), 1, 0)\n\ntrain_df['target_month'] = np.where((train_df['month']==10) | ((train_df['month']>=5)&(train_df['month']<=10)), 1, 0)\ntest_df['target_month'] = np.where((test_df['month']==10) | ((test_df['month']>=5)&(test_df['month']<=10)), 1, 0)","89a74eff":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440\u044b \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0442\u0430\u0440\u0433\u0435\u0442 \u0438 \u043e\u0431\u0443\u0447\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c\n\ntime_factors_train = train_df[['target_hour','target_day','target_date','target_month','total time train']]\ntime_factors_test = test_df[['target_hour','target_day','target_date','target_month','total time test']]","23f8a2b5":"sites = ['site%s' % i for i in range(1, 11)]\ntrain_df[sites].fillna(0).to_csv('train_sessions_text.txt', sep=' ', index=None, header=None)\ntest_df[sites].fillna(0).to_csv('test_sessions_text.txt', sep=' ', index=None, header=None)","056ae953":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0441 \u0444\u0430\u043a\u0442\u043e\u0440\u0430\u043c\u0438 \u0438 id \u0441\u0430\u0439\u0442\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u0442\u044c \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438\n\ntfidf = TfidfVectorizer(ngram_range=(1, 3), max_features=50000)\nwith open('train_sessions_text.txt') as inp_train_file:\n    x_train = tfidf.fit_transform(inp_train_file)\nwith open('test_sessions_text.txt') as inp_test_file:\n    x_test = tfidf.transform(inp_test_file)","d6dd8a47":"# \u041f\u0440\u0438\u043a\u0440\u0435\u043f\u0440\u044f\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f\n\nx_train = hstack([x_train,time_factors_train])\nx_test = hstack([x_test,time_factors_test])\n\ny_train = train_df['target'].values","3cf9fbcb":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n\nC = np.linspace(1, 10, 10)\nhyperparameters = dict(C = C)","7c0d7b4e":"# \u0417\u0430\u0434\u0430\u0435\u043c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e \u0438 \u0434\u0435\u043b\u0438\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 3 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\n\nlog = LogisticRegression(max_iter = 5000)\ntime_split = TimeSeriesSplit(n_splits=3)","1324d066":"# \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \n\nlog_model = GridSearchCV(log, hyperparameters,\nscoring='roc_auc', n_jobs=1, cv=time_split, verbose=1)","d5920e55":"# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u043e \u043b\u0443\u0447\u0448\u0438\u043c roc \u0438 auc\n\nbest_local_model = log_model.fit(x_train,y_train)\n \nprint('Best C:', best_local_model.best_estimator_.get_params()['C'])\nprint('Best Roc Auc:', best_local_model.best_score_)","2afa2878":"# \u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u043f\u043e \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438\n\ny_pred = log_model.predict(x_test)\ny_pred","f4a040f1":"# \u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u0430 CatBoostClassifier\n\nx_train, x_test, y_train, y_test = train_test_split(x_train, y_train)\nSEED = 1\n\nparams = {'loss_function':'Logloss',\n'eval_metric':'AUC',\n'verbose': 100, \n'random_seed': SEED\n}\ncbc_model = CatBoostClassifier(**params)\ncbc_model.fit(x_train, y_train, \nuse_best_model = True,\neval_set = (x_test, y_test),\nplot = True\n)","98435e42":"# \u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u043f\u043e \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u0443\n\nprediction = cbc_model.predict(x_test)\nprediction","aa368226":"# \u0413\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0431\u0443\u0441\u0442\u0438\u043d\u0433, XGBoost\n\nX = x_train\ny = y_train\n\nxgb_model = xgb.XGBClassifier(objective=\"binary:logistic\", random_state=42)\nxgb_model.fit(X,y)\n\ny_pred = xgb_model.predict(x_test)\ny_pred","55dcabb8":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0432\u043e 2, 5 \u0438 6 \u0434\u043d\u0438 \u043d\u0435\u0434\u0435\u043b\u0438 \u0442\u0430\u0440\u0433\u0435\u0442 \u043f\u043e\u0441\u0435\u0449\u0430\u0435\u0442 \u0441\u0430\u0439\u0442\u044b \u0437\u0430\u043c\u0435\u0442\u043d\u043e \u0440\u0435\u0436\u0435, \u043d\u043e \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e 6 \u0434\u0435\u043d\u044c, \u0442.\u043a. \u043d\u0435\u043b\u044c\u0437\u044f \u0442\u043e\u0447\u043d\u043e \u043e\u0442\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0430\u0440\u0433\u0435\u0442 \u043e\u0442 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f \u0432 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u043d\u0438","0b44222d":"\u0412\u043e\u0437\u044c\u043c\u0435\u043c \u0434\u043d\u0438 \u043c\u0435\u0441\u044f\u0446\u0430 \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043d\u0435\u0442 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c \u0438 \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f\u043c\u0438. ","61e794b6":"\u0412\u043e\u0437\u044c\u043c\u0435\u043c \u0447\u0430\u0441\u044b \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043d\u0435\u0442 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c \u0438 \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f\u043c\u0438.","83b8f868":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0432 5, 6, 7, 8 \u043c\u0435\u0441\u044f\u0446 \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442 \u043d\u0435 \u043f\u043e\u0441\u0435\u0449\u0430\u0435\u0442 \u0441\u0430\u0439\u0442\u044b - \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u0444\u0430\u043a\u0442\u043e\u0440"}}