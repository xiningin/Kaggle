{"cell_type":{"edb687b8":"code","5e697ae6":"code","abe9cbd8":"code","2a3b592c":"code","403f0406":"code","96a78124":"code","53fc4e48":"code","80268602":"code","d9053faa":"code","599414c6":"code","c3836e4d":"code","9b5f1eab":"code","05e00768":"code","78e467d8":"code","823ecf2f":"code","59815a41":"code","92af5d79":"code","da3a7c84":"code","a2ca23ec":"code","2dec45a3":"code","c24561f0":"code","f8e8ab5b":"code","eff9d050":"code","4fb8cbac":"code","5227276a":"code","2374629d":"code","d479dc5c":"code","42aa1065":"code","6e046fbf":"code","5caae5d2":"code","570f0986":"code","fed265d4":"markdown","a658acfd":"markdown"},"source":{"edb687b8":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","5e697ae6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Model\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Input, Flatten\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, History\nfrom keras.applications.xception import Xception\nfrom keras.applications.resnet50 import ResNet50\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","abe9cbd8":"data_dir = '..\/input\/dog-breed-identification'","2a3b592c":"def plot_results(h):\n    plt.plot(h['loss'], 'blue', label='Train Loss')\n    plt.plot(h['val_loss'], 'orange', label='Val. Loss')\n    plt.ylabel('Loss')\n    plt.xlabel('Epoch')\n    plt.legend()\n    plt.show()","403f0406":"df = pd.read_csv(data_dir + '\/labels.csv')\ndf['filename'] = df.id + '.jpg'\n\n# top_dogs = df['breed'].value_counts()\n# top_dogs = top_dogs[:16].index # top N\n# df = df[df['breed'].isin(top_dogs)].reset_index(drop=True)\nprint(df.shape)\nprint(df.columns)","96a78124":"# Constants\ninput_shape = (224,224,3)\nnum_classes = len(set(df.breed.values))","53fc4e48":"def get_data_generators():\n    train_datagen = ImageDataGenerator(\n        rescale=1.\/255,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        rotation_range=40,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True,\n        fill_mode='nearest',\n        validation_split=0.2\n    )\n    \n    train_generator = train_datagen.flow_from_dataframe(\n        df,\n        directory=data_dir + '\/train\/train',\n        x_col='filename',\n        y_col='breed',\n        target_size=(input_shape[0], input_shape[1]),\n        batch_size=32,\n        class_mode='categorical',\n        shuffle=True,\n        seed=42,\n        subset='training'\n    )\n    valid_generator = train_datagen.flow_from_dataframe(\n        df,\n        directory=data_dir + '\/train\/train',\n        x_col='filename',\n        y_col='breed',\n        target_size=(input_shape[0], input_shape[1]),\n        batch_size=32,\n        class_mode='categorical',\n        shuffle=True,\n        seed=42,\n        subset='validation'\n    )\n    \n    return train_generator, valid_generator","80268602":"train_generator, valid_generator = get_data_generators()\n\nfor s in sorted(train_generator.class_indices):\n    if train_generator.class_indices[s] != valid_generator.class_indices[s]:\n        raise Exception(f'MisMatch: {train_generator.class_indices[s]} {valid_generator.class_indices[s]}')\n\nunique_train_classes = set(train_generator.classes)\nunique_valid_classes = set(valid_generator.classes)\n\nif len(unique_train_classes) != num_classes or len(unique_valid_classes) != num_classes:\n    raise Exception('Train and Valid do not contain all classes.')","d9053faa":"def get_model():\n    pretrained_model = Xception(weights='..\/input\/xception\/xception_weights_tf_dim_ordering_tf_kernels_notop.h5',\n                                include_top=False,\n                                input_shape=input_shape)\n    for l in pretrained_model.layers:\n        l.trainable = False\n    \n    X_input = Input(shape=input_shape)\n    X = pretrained_model(X_input)\n    X = Flatten()(X)\n    X = Dense(4005, activation='relu')(X)\n#     X = Dense(2048, activation='relu')(X)\n#     X = Dropout(0.5)(X)\n    out = Dense(num_classes, activation='softmax')(X)\n    return Model(X_input, [out])","599414c6":"model = get_model()\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\nearly_stop_callback = EarlyStopping(monitor='val_loss',\n                                    verbose=1,\n                                    patience=7,\n                                    min_delta=1e-3)\ncheckpoint_callback = ModelCheckpoint('.\/best-model.h5', save_best_only=True)","c3836e4d":"history = model.fit_generator(\n    train_generator,\n    epochs=100,\n    callbacks=[\n        early_stop_callback,\n        checkpoint_callback\n    ],\n    validation_data=valid_generator,\n    verbose=1,\n    shuffle=True,\n)","9b5f1eab":"all_history = {\n    'loss': [],\n    'val_loss': []\n}\nall_history['loss'] = all_history['loss'] + history.history['loss']\nall_history['val_loss'] = all_history['val_loss'] + history.history['val_loss']","05e00768":"plot_results(all_history)","78e467d8":"from fastai import *\nfrom fastai.vision import *\n\n# Move trained resnet so pytorch can find it\n# Copy training images to a new folder for fastai\n!cp ..\/input\/resnet-from-fastai\/resnet34-333f7ec4.pth \/tmp\/.torch\/models\/resnet34-333f7ec4.pth\n!cp -r ..\/input\/dog-breed-identification\/train ..\/train-jpg","823ecf2f":"bs = 64","59815a41":"data = ImageDataBunch.from_df(path='..\/train-jpg',\n                              df=df, \n                              fn_col='filename',\n                              label_col='breed',\n                              folder='train',\n                              ds_tfms=get_transforms(), \n                              size=224, \n                              bs=bs, \n                              num_workers=0)\ndata = data.normalize(imagenet_stats)","92af5d79":"data.show_batch(rows=3, figsize=(7,6))","da3a7c84":"print(data.classes)\nlen(data.classes),data.c","a2ca23ec":"learn = create_cnn(data, models.resnet34, metrics=error_rate)","2dec45a3":"learn.fit_one_cycle(4)","c24561f0":"learn.save('stage-1')","f8e8ab5b":"interp = ClassificationInterpretation.from_learner(learn)\n\nlosses, idxs = interp.top_losses()\n\nlen(data.valid_ds)==len(losses)==len(idxs)","eff9d050":"interp.plot_top_losses(9, figsize=(15,11))","4fb8cbac":"interp.plot_confusion_matrix(figsize=(12,12), dpi=60)","5227276a":"interp.most_confused(min_val=3)","2374629d":"learn.unfreeze()","d479dc5c":"learn.fit_one_cycle(1)","42aa1065":"learn.load('stage-1')","6e046fbf":"learn.lr_find()","5caae5d2":"learn.recorder.plot()","570f0986":"learn.unfreeze()\nlearn.fit_one_cycle(2, max_lr=slice(1e-5, 1e-4))","fed265d4":"# FastAI Version - this is 10x better","a658acfd":"# Constants and Helper Functions"}}