{"cell_type":{"1ed8ca8c":"code","019cc893":"code","a83bdefa":"code","e257f789":"code","05d6f689":"code","e7be723a":"code","7d2eceed":"code","47ea2713":"code","52309485":"code","d9317b5a":"code","0725678b":"code","4a37cbd7":"code","c1fa51a3":"code","d06d0b7b":"code","1f81be42":"code","95a87bc2":"code","481e2dc3":"markdown","971f3b7f":"markdown"},"source":{"1ed8ca8c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","019cc893":"data_dir = '..\/input\/'\nfname = os.path.join(data_dir,'jena_climate_2009_2016.csv')","a83bdefa":"f = open(fname)\ndata = f.read()\nf.close\n\n\nlines = data.split('\\n')\nheader = lines[0].split(',')\nlines = lines[1:]\n\nprint(header)\nprint(len(lines))\nprint(lines[0])","e257f789":"float_data = np.zeros((len(lines),len(header)-1))\n\nfor i, line in enumerate(lines):\n    values = [float(x) for x in line.split(',')[1:]]\n    float_data[i,:] = values\n\nprint(float_data.shape)","05d6f689":"import matplotlib.pyplot as plt\n\ntemp = float_data[:,1]\nplt.figure(figsize=(30,15))\nplt.xticks(fontsize=25)\nplt.yticks(fontsize=25)\nplt.plot(range(len(temp)),temp)\nplt.show()","e7be723a":"plt.figure(figsize=(30,15))\nplt.xticks(fontsize=25)\nplt.yticks(fontsize=25)\nplt.plot(range(1440),temp[:1440])\nplt.show()","7d2eceed":"mean = float_data[:200000].mean(axis=0)\nfloat_data -= mean\nstd = float_data[:200000].std(axis=0)\nfloat_data \/= std","47ea2713":"def generator(data, lookback, delay, min_index, max_index,shuffle=False, batch_size=128, step=6):\n    if max_index is None:\n        max_index = len(data) - delay - 1\n    \n    i = min_index + lookback\n    while True:\n        if shuffle:\n            rows = np.random.randint(min_index + lookback, max_index, size = batch_size)\n        else:\n            if i + batch_size >= max_index:\n                i = min_index + lookback\n            rows = np.arange(i, min(i + batch_size, max_index))\n            i += len(rows)\n        samples = np.zeros((len(rows),lookback\/\/step,data.shape[1]))\n            \n        targets = np.zeros((len(rows),))\n        #print('Rows:',rows[:3])\n        for j, row in enumerate(rows):\n            indices = range(rows[j] - lookback, rows[j], step)\n            samples[j] = data[indices]\n            targets[j] = data[rows[j] + delay][1]\n        yield samples, targets","52309485":"lookback = 1440\nstep = 6\ndelay = 144\nbatch_size = 128\n\ntrain_gen = generator(float_data,\n                        lookback = lookback,\n                        delay=delay,\n                        min_index=0,\n                        max_index=200000,\n                        shuffle=True,\n                        step=step,\n                        batch_size=batch_size)\n\nval_gen = generator(float_data,\n                        lookback = lookback,\n                        delay=delay,\n                        min_index=200001,\n                        max_index=300000,\n                        shuffle=True,\n                        step=step,\n                        batch_size=batch_size)\n\nval_gen = generator(float_data,\n                        lookback = lookback,\n                        delay=delay,\n                        min_index=300001,\n                        max_index=None,\n                        shuffle=True,\n                        step=step,\n                        batch_size=batch_size)\n\nval_steps = (300000-200001-lookback) \/\/ batch_size\ntest_stpes = (len(float_data)-300001-lookback) \/\/ batch_size\n","d9317b5a":"def evaluate_naive_method():\n    batch_maes = []\n    for step in range(val_steps):\n        samples, targets = next(val_gen)\n        #print(samples.shape)\n        #print(targets.shape)\n        preds = samples[:,-1,1]\n        mae = np.mean(np.abs(preds - targets))\n        batch_maes.append(mae)\n    print(np.mean(batch_maes))\nevaluate_naive_method()","0725678b":"celsius_mae = 0.3 * std[1]\ncelsius_mae","4a37cbd7":"from keras.models import Sequential\nfrom keras.layers import Flatten,Dense\nfrom keras.optimizers import RMSprop\n\nmodel = Sequential()\nmodel.add(Flatten(input_shape=(lookback\/\/step,float_data.shape[-1])))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(1))\nmodel.compile(optimizer=RMSprop(),loss='mae')\nmodel.summary()\n","c1fa51a3":"history = model.fit_generator(train_gen,steps_per_epoch=500,epochs=20,validation_data=val_gen,validation_steps=val_steps)","d06d0b7b":"import matplotlib.pyplot as plt\ndef show_all(history):\n    def show(history,acc,val_acc,label):\n        epochs = range(1, len(history.history[acc])+1)\n        plt.plot(epochs,history.history[acc],label='Training '+label)\n        plt.plot(epochs,history.history[val_acc],label='Validation '+label)\n        plt.legend()\n        \n    plt.figure(figsize=(15,5))\n    \n    #plt.subplot(121)\n    #show(history,'acc','val_acc','acc')\n    #plt.subplot(122)\n    show(history,'loss','val_loss','loss')\nshow_all(history)","1f81be42":"from keras.layers import GRU\n\nmodel_2 = Sequential()\nmodel_2.add(GRU(32,input_shape=(None,float_data.shape[-1])))\nmodel_2.add(Dense(1))\nmodel_2.compile(optimizer=RMSprop(),loss='mae')\nhistory_2 = model_2.fit_generator(train_gen,steps_per_epoch=500,epochs=20,validation_data=val_gen,validation_steps=val_steps)\nshow_all(history_2)","95a87bc2":"'''model_3 = Sequential()\nmodel_3.add(GRU(32,dropout=0.1,recurrent_dropout=0.5,return_sequences=True,input_shape=(None, float_data.shape[-1])))\nmodel_3.add(GRU(64,activation='relu',dropout=0.1,recurrent_dropout=0.5))\nmodel_3.add(Dense(1))\nmodel_3.compile(optimizer=RMSprop(),loss='mae')\nhistory_3 = model_3.fit_generator(train_gen,steps_per_epoch=500,epochs=40,validation_data=val_gen,validation_steps=val_steps)\nshow_all(history_3)'''","481e2dc3":"# GRU","971f3b7f":"# Dense"}}