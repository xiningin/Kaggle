{"cell_type":{"19082f61":"code","5733f652":"code","289ab63d":"code","6fb3a8a0":"code","6b055775":"code","052c3c22":"code","5a8937e2":"code","ae6dac36":"code","a4548651":"code","2387da14":"code","51025b95":"code","42fef124":"code","14bd5f2b":"code","24c39c12":"code","b2b67922":"code","708e95bf":"code","628bde3c":"code","b0827ad7":"code","335e236f":"code","3d167ddc":"code","c24087df":"code","4424e83c":"code","a0e9c324":"code","11460f62":"code","03624313":"code","59a90c8d":"code","87366af6":"code","352ae21a":"code","24caed5a":"code","bc6596a2":"code","ddf4a8e0":"code","9dab9d2d":"code","d8ee3538":"markdown","85b8727d":"markdown","033a646e":"markdown","eba1b469":"markdown","bb135dbb":"markdown"},"source":{"19082f61":"import pandas as pd\nimport numpy as np\n\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import metrics\n\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm, skew\nplt.rc(\"font\", size=14)\n\nimport seaborn as sns\nsns.set(style=\"white\")\nsns.set(style=\"whitegrid\", color_codes=True)\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n","5733f652":"warnings.filterwarnings(\"ignore\")\nempData=pd.read_csv(r\"..\/input\/HR-Employee-Attrition.csv\",header=0)\n#empData.head()\nempData.shape\n","289ab63d":"print(list(empData.columns))","6fb3a8a0":"empData.head()","6b055775":"#empData.drop(['EmployeeNumber'],axis=1,inplace=True)\n#Dropped Emp Number, which is not required for analysis","052c3c22":"empData.describe().T","5a8937e2":"empData.columns.groupby(empData.dtypes)","ae6dac36":"empData.info()","a4548651":"\nisnaa=empData.isna().sum()\nisnaa\n\n\n","2387da14":"empData.duplicated().sum()","51025b95":"\"\"\"\n(mu, sigma) = norm.fit(empData.loc[empData['Attrition'] == 'Yes', 'Age'])\nprint(\"Ave age of emp left the organization : \",mu)\n(mu, sigma) = norm.fit(empData.loc[empData['Attrition'] == 'No', 'Age'])\nprint(\"Ave age of emp in the organization : \",mu)\n\"\"\"","42fef124":"empData['EducationField'].unique()\n","14bd5f2b":"ed_field=empData['EducationField'].unique()\ned_field\nfor i in ed_field:\n    ratio = empData.loc[empData['EducationField'] == i,'Attrition'].shape[0]\/empData.loc[empData['Attrition'] == 'Yes'].shape[0]\n    print(\"Attrition Rate for EduField {0}:\\t {1}\".format(i,ratio))","24c39c12":"#empData.Gender.value_counts()\ned_field=empData['Gender'].unique()\ned_field\nfor i in ed_field:\n    ratio = (empData.loc[empData['Gender'] == i,'Attrition'].shape[0])\/(empData.loc[empData['Attrition'] == 'Yes'].shape[0])\n    print(\"Attrition Rate for {0}: {1}\".format(i,ratio))\n    \n# Changing the Attrition Rate \nempDataAna = empData.copy()\nempDataAna['Target'] = empDataAna['Attrition'].apply(\n    lambda x: 0 if x == 'No' else 1)    \n\n\n\n","b2b67922":"empData.head()","708e95bf":"empData['JobSatisfaction'].value_counts()\n\n\n\n\n#for i in empData['EnvironmentSatisfaction'].unique():\n    #ratio = df_HR[(df_HR['EnvironmentSatisfaction']==field)&(df_HR['Attrition']==\"Yes\")].shape[0] \/ df_HR[df_HR['EnvironmentSatisfaction']==field].shape[0]\n    #ratio = empData.loc[empData['EnvironmentSatisfaction'] == i ,empData['Attrition'] == 'Yes'].shape(0) \/ empData.loc[empData['EnvironmentSatisfaction'] == i].shape(0)\n    \n #   empData[empData['EnvironmentSatisfaction'] == i ,'Attrition'].shape(0)\n    \n    \n    \n    ","628bde3c":"empDataAna.columns","b0827ad7":"# Dropping columns which are not significant\nempDataAna = empDataAna.drop(['Attrition', 'EmployeeCount', 'EmployeeNumber', 'StandardHours','Over18'], axis=1)\nempDataAna.head()\n\n\n","335e236f":"empDataAna.corr()['Target'].sort_values()","3d167ddc":"num_cols = empDataAna.select_dtypes(include = np.number)\na = num_cols[num_cols.columns].hist(bins=15, figsize=(15,35), layout=(9,3),color = 'blue',alpha=0.6)","c24087df":"cat_cols = empDataAna.select_dtypes(exclude=np.number)","4424e83c":"\"\"\"\nfig, ax = plt.subplots(4, 2, figsize=(20, 20))\nfor variable, subplot in zip(cat_col, ax.flatten()):\n    sns.countplot(empDataAna[variable], ax=subplot,palette = 'Set3')\n    for label in subplot.get_xticklabels():\n        label.set_rotation(360)\nplt.tight_layout()\n\"\"\"","a0e9c324":"\"\"\"\ncorr = data.drop(columns=['StandardHours','EmployeeCount']).corr()\ncorr.style.background_gradient(cmap='YlGnBu')\n\"\"\"","11460f62":"print(\"Cat Columns --- {0} and Count ---- {1} \".format(cat_cols.columns,cat_cols.columns.shape[0]))\n\n","03624313":"num_cols = empDataAna.select_dtypes(include = np.number)\nprint(\"Num Columns --- {0} and Count ---- {1} \".format(num_cols.columns,num_cols.columns.shape[0]))","59a90c8d":"# ENCODING CAT COLUMNS...\ncat_col_encoded = pd.get_dummies(cat_cols)\ncat_col_encoded.head()","87366af6":"empDatafin = pd.concat([num_cols,cat_col_encoded,],axis=1)\nempDatafin.head()\n\n","352ae21a":"x = empDatafin.drop(columns='Target')\ny = empDatafin['Target']","24caed5a":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)\n\nmLogReg = LogisticRegression()\nmLogReg.fit(x_train, y_train)","bc6596a2":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\n\nx_train, x_test, y_train, y_test = train_test_split(\nx, y, test_size = 0.3, random_state = 100)\ny_train=np.ravel(y_train)\ny_test=np.ravel(y_test)","ddf4a8e0":"for i in range(25):\n    K = i+1\n    neigh = KNeighborsClassifier(n_neighbors = K, weights='uniform', algorithm='auto')\n    neigh.fit(x_train, y_train) \n    y_pred = neigh.predict(x_test)\n    print (\"Accuracy : {0}% for K-Value {1}\".format(accuracy_score(y_test,y_pred)*100,K))","9dab9d2d":"\"\"\"\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nlogit_roc_auc = roc_auc_score(y_test, mLogReg.predict(x_test))\nfpr, tpr, thresholds = roc_curve(y_test, mLogReg.predict_proba(x_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()\n\"\"\"","d8ee3538":"**ROC CURVE**","85b8727d":"**ANALYSIS**","033a646e":"Correlation Between Target and other variables","eba1b469":"**Basic Infering with plots**","bb135dbb":"**ENCODING**"}}