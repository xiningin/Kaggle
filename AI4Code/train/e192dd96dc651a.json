{"cell_type":{"e08b4d14":"code","7ec16cfa":"code","d38d4ecd":"code","c8896f73":"code","eacad632":"code","18c52ece":"code","7a1bedbc":"code","7305cbf0":"code","36a86b1d":"code","706b6b2c":"code","6c634730":"code","7dea7388":"code","2d426c8c":"code","eb1966d9":"code","5c1cdbaf":"code","49afdad7":"code","3d6fd70f":"code","a772b213":"code","895212d4":"code","89ca5e79":"code","b9aab10d":"code","a82441ad":"code","25f98831":"code","877f7afc":"code","78838fb8":"code","ee022daf":"code","eea7104f":"code","125939b5":"code","89b4435f":"code","ed4bcd9e":"code","1444f185":"code","c77641e5":"code","3f186c16":"code","4ceef2eb":"code","99f052dd":"markdown","67a0a765":"markdown","90c4f8cb":"markdown","a2843b6b":"markdown","9791af91":"markdown","00dbe9d5":"markdown","f854b7fe":"markdown","fafcff0c":"markdown","c36a7c5e":"markdown","86ae9e3c":"markdown","7f2e09fb":"markdown","04b407ee":"markdown","4bb6f79a":"markdown","24b6ccde":"markdown","d8111d66":"markdown"},"source":{"e08b4d14":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7ec16cfa":"import gc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nimport lightgbm as lgb","d38d4ecd":"#Based on this great kernel https:\/\/www.kaggle.com\/arjanso\/reducing-dataframe-memory-size-by-65\ndef reduce_mem_usage(df):\n    start_mem_usg = df.memory_usage().sum() \/ 1024**2 \n    print(\"Memory usage of properties dataframe is :\",start_mem_usg,\" MB\")\n    NAlist = [] # Keeps track of columns that have missing values filled in. \n    for col in df.columns:\n        if df[col].dtype != object:  # Exclude strings            \n            # Print current column type\n            print(\"******************************\")\n            print(\"Column: \",col)\n            print(\"dtype before: \",df[col].dtype)            \n            # make variables for Int, max and min\n            IsInt = False\n            mx = df[col].max()\n            mn = df[col].min()\n            print(\"min for this col: \",mn)\n            print(\"max for this col: \",mx)\n            # Integer does not support NA, therefore, NA needs to be filled\n            if not np.isfinite(df[col]).all(): \n                NAlist.append(col)\n                df[col].fillna(mn-1,inplace=True)  \n                   \n            # test if column can be converted to an integer\n            asint = df[col].fillna(0).astype(np.int64)\n            result = (df[col] - asint)\n            result = result.sum()\n            if result > -0.01 and result < 0.01:\n                IsInt = True            \n            # Make Integer\/unsigned Integer datatypes\n            if IsInt:\n                if mn >= 0:\n                    if mx < 255:\n                        df[col] = df[col].astype(np.uint8)\n                    elif mx < 65535:\n                        df[col] = df[col].astype(np.uint16)\n                    elif mx < 4294967295:\n                        df[col] = df[col].astype(np.uint32)\n                    else:\n                        df[col] = df[col].astype(np.uint64)\n                else:\n                    if mn > np.iinfo(np.int8).min and mx < np.iinfo(np.int8).max:\n                        df[col] = df[col].astype(np.int8)\n                    elif mn > np.iinfo(np.int16).min and mx < np.iinfo(np.int16).max:\n                        df[col] = df[col].astype(np.int16)\n                    elif mn > np.iinfo(np.int32).min and mx < np.iinfo(np.int32).max:\n                        df[col] = df[col].astype(np.int32)\n                    elif mn > np.iinfo(np.int64).min and mx < np.iinfo(np.int64).max:\n                        df[col] = df[col].astype(np.int64)    \n            # Make float datatypes 32 bit\n            else:\n                df[col] = df[col].astype(np.float32)\n            \n            # Print new column type\n            print(\"dtype after: \",df[col].dtype)\n            print(\"******************************\")\n    # Print final result\n    print(\"___MEMORY USAGE AFTER COMPLETION:___\")\n    mem_usg = df.memory_usage().sum() \/ 1024**2 \n    print(\"Memory usage is: \",mem_usg,\" MB\")\n    print(\"This is \",100*mem_usg\/start_mem_usg,\"% of the initial size\")\n    return df, NAlist","c8896f73":"building = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/building_metadata.csv\")\nweather_train = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/weather_train.csv\")\ntrain = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/train.csv\")","eacad632":"train = train.merge(building, left_on = \"building_id\", right_on = \"building_id\", how = \"left\")","18c52ece":"train = train.merge(weather_train, left_on = [\"site_id\", \"timestamp\"], right_on = [\"site_id\", \"timestamp\"], how = \"left\")","7a1bedbc":"del weather_train","7305cbf0":"train[\"timestamp\"] = pd.to_datetime(train[\"timestamp\"])\ntrain[\"hour\"] = train[\"timestamp\"].dt.hour\ntrain[\"day\"] = train[\"timestamp\"].dt.day\ntrain[\"weekend\"] = train[\"timestamp\"].dt.weekday\ntrain[\"month\"] = train[\"timestamp\"].dt.month","36a86b1d":"train = train.drop(\"timestamp\", axis = 1)","706b6b2c":"le = LabelEncoder()\ntrain[\"primary_use\"] = le.fit_transform(train[\"primary_use\"])","6c634730":"train = train.drop([\"precip_depth_1_hr\", \"sea_level_pressure\", \"wind_direction\", \"wind_speed\",\"site_id\", \"floor_count\"],axis=1)","7dea7388":"train","2d426c8c":"target = np.log1p(train[\"meter_reading\"])","eb1966d9":"target","5c1cdbaf":"train = train.drop([\"meter_reading\"],axis=1)","49afdad7":"train, NAlist = reduce_mem_usage(train)","3d6fd70f":"data = [\"building_id\", \"primary_use\", \"hour\", \"day\", \"weekend\", \"month\", \"meter\",\"square_feet\", \"year_built\", \"air_temperature\", \"cloud_coverage\",\"dew_temperature\"]\nnum_folds = 3\nkf = KFold(n_splits = num_folds, shuffle = False, random_state = 42)\nerror = 0\nmodels = []\nevals_results = []\nfor i, (train_index, test_index) in enumerate(kf.split(train)):\n    if i + 1 < num_folds:\n        continue\n    print(train_index.max(), test_index.min())\n    train_X = train[data].iloc[train_index]\n    test_X = train[data].iloc[test_index]\n    train_y = target.iloc[train_index]\n    test_y = target.iloc[test_index]\n    \n    lgb_train = lgb.Dataset(train_X[train_y > 0], train_y[train_y > 0])\n    lgb_test = lgb.Dataset(test_X[test_y > 0] , test_y[test_y > 0])\n    evals_result = {}\n    params = {\n            'boosting_type': 'gbdt',\n            'objective': 'regression',\n            'metric': {'rmse'},\n            'learning_rate': 0.6,\n            'feature_fraction': 0.7,\n            'bagging_fraction': 0.7,\n            'bagging_freq' : 4\n            }\n    model = lgb.train(params,\n                lgb_train,\n                num_boost_round=2000,\n                valid_sets=(lgb_train, lgb_test),\n               early_stopping_rounds=30,\n               verbose_eval = 25,\n               evals_result = evals_result\n                           )\n    models.append(model)\n    evals_results.append(evals_result)","a772b213":"for model, evals_result in zip(models, evals_results):\n    f, (ax1, ax2) = plt.subplots(nrows = 1, ncols = 2, figsize=(15, 6))\n    lgb.plot_importance(model, ax=ax1)\n    lgb.plot_metric(evals_result, metric='rmse', ax=ax2)\n\nplt.show()","895212d4":"sorted(zip(model.feature_importance(), model.feature_name()),reverse = True)","89ca5e79":"test = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/test.csv\")","b9aab10d":"test = test.merge(building, left_on = \"building_id\", right_on = \"building_id\", how = \"left\")","a82441ad":"test[\"primary_use\"] = le.transform(test[\"primary_use\"])","25f98831":"test, NAlist = reduce_mem_usage(test)","877f7afc":"gc.collect()","78838fb8":"weather_test = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/weather_test.csv\")","ee022daf":"weather_test = weather_test.drop([\"precip_depth_1_hr\", \"sea_level_pressure\", \"wind_direction\", \"wind_speed\"], axis = 1)","eea7104f":"test = test.merge(weather_test, left_on = [\"site_id\", \"timestamp\"], right_on = [\"site_id\", \"timestamp\"], how = \"left\")","125939b5":"del weather_test","89b4435f":"test[\"timestamp\"] = pd.to_datetime(test[\"timestamp\"])\ntest[\"hour\"] = test[\"timestamp\"].dt.hour.astype(np.uint8)\ntest[\"day\"] = test[\"timestamp\"].dt.day.astype(np.uint8)\ntest[\"weekend\"] = test[\"timestamp\"].dt.weekday.astype(np.uint8)\ntest[\"month\"] = test[\"timestamp\"].dt.month.astype(np.uint8)\ntest = test[data]","ed4bcd9e":"from tqdm import tqdm\n\nstep_size = 100000\nres = []\ni = 0\nfor j in tqdm(range(int(np.ceil(test.shape[0]\/step_size)))):\n    r = np.zeros(test.iloc[i:i+step_size].shape[0])\n    for model in models:\n        r += np.expm1(model.predict(test.iloc[i:i+step_size], num_iteration=model.best_iteration)) \/ len(models)\n    res = np.append(res,r)\n    i += step_size","1444f185":"submission = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/sample_submission.csv\")","c77641e5":"submission[\"meter_reading\"] = res","3f186c16":"submission","4ceef2eb":"submission.to_csv('Final_result.csv', index=False)","99f052dd":"# Reduce the memory usage","67a0a765":"# Import all the module that we need to use.","90c4f8cb":"# Reduce the menory usage again","a2843b6b":"# Convert data format of 'Primary_use' so that it can be quantified","9791af91":"# Define a function to reduce the memory usage.","00dbe9d5":"# Feature Importance analysis","f854b7fe":"# Predict the final result","fafcff0c":"# Build the model and train it","c36a7c5e":"# Use the method to try to reclaim all memory that is inaccessible","86ae9e3c":"# Data collation, merge the three sheet","7f2e09fb":"# Make the submission","04b407ee":"# Delete unnecessary data to save memory","4bb6f79a":"# Import data for testing and repeat the processing steps for traingin data","24b6ccde":"# Input the CSV file that we use to train the model","d8111d66":"# Convert date format so that it can be quantified"}}