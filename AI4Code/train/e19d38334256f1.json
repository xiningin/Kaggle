{"cell_type":{"5bb55a71":"code","10ec469f":"code","f8b8a219":"code","dcb5072f":"code","58be8958":"code","cca41c09":"code","06a9a8c3":"code","dc5fd5df":"code","8e18bc36":"code","37b2b450":"code","3a2c3a57":"code","052e6121":"code","644c1815":"code","c5dc50cf":"code","9b75f7c1":"code","6bf82825":"code","d3f6760f":"code","ed0df82d":"code","4ebdc0f2":"code","ddaba429":"code","99c16bb1":"code","0f55ea57":"code","3e5eb545":"code","5de0bb72":"code","d5bad9a8":"code","a84ed16a":"code","73ecb8e0":"code","2a68bfa6":"code","7d9e2121":"code","637f3a64":"code","4c84c7b8":"code","f5dbd5dd":"code","56ca3b46":"code","a0fa6ed9":"code","e1fb0b0c":"code","8b8a25ba":"code","f4eefa90":"code","780fcd9f":"code","98e854f6":"markdown","2bebadde":"markdown","092cb779":"markdown","62031e08":"markdown","f9c5c765":"markdown","8eae208b":"markdown","83d70141":"markdown","21a21351":"markdown","85d6d4af":"markdown","f011b89b":"markdown","e2989e7b":"markdown","97b8b583":"markdown","2a1417fd":"markdown","5a8fd251":"markdown","68901888":"markdown","6a3e2cee":"markdown","ca48a22a":"markdown","c74df2af":"markdown","c6550d1c":"markdown","c5b0cca8":"markdown","cb090c5b":"markdown","2e443aed":"markdown","a735445d":"markdown","3c1b23d7":"markdown","80701179":"markdown","5fea153d":"markdown","b408894d":"markdown","07a4d30f":"markdown","b5227f91":"markdown","70944ff5":"markdown","76d5aed3":"markdown","5fd3e173":"markdown","08911424":"markdown","5f9a1ec0":"markdown","beadb572":"markdown","34ff279c":"markdown","bad86af9":"markdown","6b6bdd10":"markdown","3b3756e0":"markdown","7bbb5d75":"markdown","9a068a7b":"markdown","830d8e71":"markdown","e256e859":"markdown"},"source":{"5bb55a71":"import numpy as np # linear algebra\nimport pandas as pd # data processing,\nimport seaborn as sns # For creating plots\nimport matplotlib.ticker as mtick # For specifying the axes tick format \nimport matplotlib.pyplot as plt\n\nsns.set(style = 'white')\n\n# Input data files are available in the \"..\/input\/\" directory.\nimport os\nprint(os.listdir(\"..\/input\"))\n","10ec469f":"telecom_cust = pd.read_csv('..\/input\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","f8b8a219":"telecom_cust.head()","dcb5072f":"telecom_cust.columns.values","58be8958":"# Checking the data types of all the columns\ntelecom_cust.dtypes","cca41c09":"# Converting Total Charges to a numerical data type.\ntelecom_cust.TotalCharges = pd.to_numeric(telecom_cust.TotalCharges, errors='coerce')\ntelecom_cust.isnull().sum()","06a9a8c3":"#Removing missing values \ntelecom_cust.dropna(inplace = True)\n#Remove customer IDs from the data set\ndf2 = telecom_cust.iloc[:,1:]\n#Convertin the predictor variable in a binary numeric variable\ndf2['Churn'].replace(to_replace='Yes', value=1, inplace=True)\ndf2['Churn'].replace(to_replace='No',  value=0, inplace=True)\n\n#Let's convert all the categorical variables into dummy variables\ndf_dummies = pd.get_dummies(df2)\ndf_dummies.head()","dc5fd5df":"#Get Correlation of \"Churn\" with other variables:\nplt.figure(figsize=(15,8))\ndf_dummies.corr()['Churn'].sort_values(ascending = False).plot(kind='bar')","8e18bc36":"colors = ['#4D3425','#E4512B']\nax = (telecom_cust['gender'].value_counts()*100.0 \/len(telecom_cust)).plot(kind='bar',\n                                                                           stacked = True,\n                                                                          rot = 0,\n                                                                          color = colors)\nax.yaxis.set_major_formatter(mtick.PercentFormatter())\nax.set_ylabel('% Customers')\nax.set_xlabel('Gender')\nax.set_ylabel('% Customers')\nax.set_title('Gender Distribution')\n\n# create a list to collect the plt.patches data\ntotals = []\n\n# find the values and append to list\nfor i in ax.patches:\n    totals.append(i.get_width())\n\n# set individual bar lables using above list\ntotal = sum(totals)\n\nfor i in ax.patches:\n    # get_width pulls left or right; get_y pushes up or down\n    ax.text(i.get_x()+.15, i.get_height()-3.5, \\\n            str(round((i.get_height()\/total), 1))+'%',\n            fontsize=12,\n            color='white',\n           weight = 'bold')","37b2b450":"ax = (telecom_cust['SeniorCitizen'].value_counts()*100.0 \/len(telecom_cust))\\\n.plot.pie(autopct='%.1f%%', labels = ['No', 'Yes'],figsize =(5,5), fontsize = 12 )                                                                           \nax.yaxis.set_major_formatter(mtick.PercentFormatter())\nax.set_ylabel('Senior Citizens',fontsize = 12)\nax.set_title('% of Senior Citizens', fontsize = 12)","3a2c3a57":"df2 = pd.melt(telecom_cust, id_vars=['customerID'], value_vars=['Dependents','Partner'])\ndf3 = df2.groupby(['variable','value']).count().unstack()\ndf3 = df3*100\/len(telecom_cust)\ncolors = ['#4D3425','#E4512B']\nax = df3.loc[:,'customerID'].plot.bar(stacked=True, color=colors,\n                                      figsize=(8,6),rot = 0,\n                                     width = 0.2)\n\nax.yaxis.set_major_formatter(mtick.PercentFormatter())\nax.set_ylabel('% Customers',size = 14)\nax.set_xlabel('')\nax.set_title('% Customers with dependents and partners',size = 14)\nax.legend(loc = 'center',prop={'size':14})\n\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate('{:.0f}%'.format(height), (p.get_x()+.25*width, p.get_y()+.4*height),\n                color = 'white',\n               weight = 'bold',\n               size = 14)","052e6121":"colors = ['#4D3425','#E4512B']\npartner_dependents = telecom_cust.groupby(['Partner','Dependents']).size().unstack()\n\nax = (partner_dependents.T*100.0 \/ partner_dependents.T.sum()).T.plot(kind='bar',\n                                                                width = 0.2,\n                                                                stacked = True,\n                                                                rot = 0, \n                                                                figsize = (8,6),\n                                                                color = colors)\nax.yaxis.set_major_formatter(mtick.PercentFormatter())\nax.legend(loc='center',prop={'size':14},title = 'Dependents',fontsize =14)\nax.set_ylabel('% Customers',size = 14)\nax.set_title('% Customers with\/without dependents based on whether they have a partner',size = 14)\nax.xaxis.label.set_size(14)\n\n# Code to add the data labels on the stacked bar chart\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate('{:.0f}%'.format(height), (p.get_x()+.25*width, p.get_y()+.4*height),\n                color = 'white',\n               weight = 'bold',\n               size = 14)","644c1815":"ax = sns.distplot(telecom_cust['tenure'], hist=True, kde=False, \n             bins=int(180\/5), color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4})\nax.set_ylabel('# of Customers')\nax.set_xlabel('Tenure (months)')\nax.set_title('# of Customers by their tenure')","c5dc50cf":"ax = telecom_cust['Contract'].value_counts().plot(kind = 'bar',rot = 0, width = 0.3)\nax.set_ylabel('# of Customers')\nax.set_title('# of Customers by Contract Type')","9b75f7c1":"fig, (ax1,ax2,ax3) = plt.subplots(nrows=1, ncols=3, sharey = True, figsize = (20,6))\n\nax = sns.distplot(telecom_cust[telecom_cust['Contract']=='Month-to-month']['tenure'],\n                   hist=True, kde=False,\n                   bins=int(180\/5), color = 'turquoise',\n                   hist_kws={'edgecolor':'black'},\n                   kde_kws={'linewidth': 4},\n                 ax=ax1)\nax.set_ylabel('# of Customers')\nax.set_xlabel('Tenure (months)')\nax.set_title('Month to Month Contract')\n\nax = sns.distplot(telecom_cust[telecom_cust['Contract']=='One year']['tenure'],\n                   hist=True, kde=False,\n                   bins=int(180\/5), color = 'steelblue',\n                   hist_kws={'edgecolor':'black'},\n                   kde_kws={'linewidth': 4},\n                 ax=ax2)\nax.set_xlabel('Tenure (months)',size = 14)\nax.set_title('One Year Contract',size = 14)\n\nax = sns.distplot(telecom_cust[telecom_cust['Contract']=='Two year']['tenure'],\n                   hist=True, kde=False,\n                   bins=int(180\/5), color = 'darkblue',\n                   hist_kws={'edgecolor':'black'},\n                   kde_kws={'linewidth': 4},\n                 ax=ax3)\n\nax.set_xlabel('Tenure (months)')\nax.set_title('Two Year Contract')","6bf82825":"\ntelecom_cust.columns.values","d3f6760f":"services = ['PhoneService','MultipleLines','InternetService','OnlineSecurity',\n           'OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']\n\nfig, axes = plt.subplots(nrows = 3,ncols = 3,figsize = (15,12))\nfor i, item in enumerate(services):\n    if i < 3:\n        ax = telecom_cust[item].value_counts().plot(kind = 'bar',ax=axes[i,0],rot = 0)\n        \n    elif i >=3 and i < 6:\n        ax = telecom_cust[item].value_counts().plot(kind = 'bar',ax=axes[i-3,1],rot = 0)\n        \n    elif i < 9:\n        ax = telecom_cust[item].value_counts().plot(kind = 'bar',ax=axes[i-6,2],rot = 0)\n    ax.set_title(item)","ed0df82d":"telecom_cust[['MonthlyCharges', 'TotalCharges']].plot.scatter(x = 'MonthlyCharges',\n                                                              y='TotalCharges')","4ebdc0f2":"colors = ['#4D3425','#E4512B']\nax = (telecom_cust['Churn'].value_counts()*100.0 \/len(telecom_cust)).plot(kind='bar',\n                                                                           stacked = True,\n                                                                          rot = 0,\n                                                                          color = colors,\n                                                                         figsize = (8,6))\nax.yaxis.set_major_formatter(mtick.PercentFormatter())\nax.set_ylabel('% Customers',size = 14)\nax.set_xlabel('Churn',size = 14)\nax.set_title('Churn Rate', size = 14)\n\n# create a list to collect the plt.patches data\ntotals = []\n\n# find the values and append to list\nfor i in ax.patches:\n    totals.append(i.get_width())\n\n# set individual bar lables using above list\ntotal = sum(totals)\n\nfor i in ax.patches:\n    # get_width pulls left or right; get_y pushes up or down\n    ax.text(i.get_x()+.15, i.get_height()-4.0, \\\n            str(round((i.get_height()\/total), 1))+'%',\n            fontsize=12,\n            color='white',\n           weight = 'bold',\n           size = 14)","ddaba429":"sns.boxplot(x = telecom_cust.Churn, y = telecom_cust.tenure)","99c16bb1":"colors = ['#4D3425','#E4512B']\ncontract_churn = telecom_cust.groupby(['Contract','Churn']).size().unstack()\n\nax = (contract_churn.T*100.0 \/ contract_churn.T.sum()).T.plot(kind='bar',\n                                                                width = 0.3,\n                                                                stacked = True,\n                                                                rot = 0, \n                                                                figsize = (10,6),\n                                                                color = colors)\nax.yaxis.set_major_formatter(mtick.PercentFormatter())\nax.legend(loc='best',prop={'size':14},title = 'Churn')\nax.set_ylabel('% Customers',size = 14)\nax.set_title('Churn by Contract Type',size = 14)\n\n# Code to add the data labels on the stacked bar chart\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate('{:.0f}%'.format(height), (p.get_x()+.25*width, p.get_y()+.4*height),\n                color = 'white',\n               weight = 'bold',\n               size = 14)","0f55ea57":"colors = ['#4D3425','#E4512B']\nseniority_churn = telecom_cust.groupby(['SeniorCitizen','Churn']).size().unstack()\n\nax = (seniority_churn.T*100.0 \/ seniority_churn.T.sum()).T.plot(kind='bar',\n                                                                width = 0.2,\n                                                                stacked = True,\n                                                                rot = 0, \n                                                                figsize = (8,6),\n                                                                color = colors)\nax.yaxis.set_major_formatter(mtick.PercentFormatter())\nax.legend(loc='center',prop={'size':14},title = 'Churn')\nax.set_ylabel('% Customers')\nax.set_title('Churn by Seniority Level',size = 14)\n\n# Code to add the data labels on the stacked bar chart\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate('{:.0f}%'.format(height), (p.get_x()+.25*width, p.get_y()+.4*height),\n                color = 'white',\n               weight = 'bold',size =14)","3e5eb545":"ax = sns.kdeplot(telecom_cust.MonthlyCharges[(telecom_cust[\"Churn\"] == 'No') ],\n                color=\"Red\", shade = True)\nax = sns.kdeplot(telecom_cust.MonthlyCharges[(telecom_cust[\"Churn\"] == 'Yes') ],\n                ax =ax, color=\"Blue\", shade= True)\nax.legend([\"Not Churn\",\"Churn\"],loc='upper right')\nax.set_ylabel('Density')\nax.set_xlabel('Monthly Charges')\nax.set_title('Distribution of monthly charges by churn')","5de0bb72":"ax = sns.kdeplot(telecom_cust.TotalCharges[(telecom_cust[\"Churn\"] == 'No') ],\n                color=\"Red\", shade = True)\nax = sns.kdeplot(telecom_cust.TotalCharges[(telecom_cust[\"Churn\"] == 'Yes') ],\n                ax =ax, color=\"Blue\", shade= True)\nax.legend([\"Not Churn\",\"Churn\"],loc='upper right')\nax.set_ylabel('Density')\nax.set_xlabel('Total Charges')\nax.set_title('Distribution of total charges by churn')","d5bad9a8":"# We will use the data frame where we had created dummy variables\ny = df_dummies['Churn'].values\nX = df_dummies.drop(columns = ['Churn'])\n\n# Scaling all the variables to a range of 0 to 1\nfrom sklearn.preprocessing import MinMaxScaler\nfeatures = X.columns.values\nscaler = MinMaxScaler(feature_range = (0,1))\nscaler.fit(X)\nX = pd.DataFrame(scaler.transform(X))\nX.columns = features","a84ed16a":"# Create Train & Test Data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","73ecb8e0":"# Running logistic regression model\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nresult = model.fit(X_train, y_train)","2a68bfa6":"from sklearn import metrics\nprediction_test = model.predict(X_test)\n# Print the prediction accuracy\nprint (metrics.accuracy_score(y_test, prediction_test))","7d9e2121":"# To get the weights of all the variables\nweights = pd.Series(model.coef_[0],\n                 index=X.columns.values)\nprint (weights.sort_values(ascending = False)[:10].plot(kind='bar'))\n","637f3a64":"print(weights.sort_values(ascending = False)[-10:].plot(kind='bar'))","4c84c7b8":"from sklearn.ensemble import RandomForestClassifier\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\nmodel_rf = RandomForestClassifier(n_estimators=1000 , oob_score = True, n_jobs = -1,\n                                  random_state =50, max_features = \"auto\",\n                                  max_leaf_nodes = 30)\nmodel_rf.fit(X_train, y_train)\n\n# Make predictions\nprediction_test = model_rf.predict(X_test)\nprint (metrics.accuracy_score(y_test, prediction_test))","f5dbd5dd":"importances = model_rf.feature_importances_\nweights = pd.Series(importances,\n                 index=X.columns.values)\nweights.sort_values()[-10:].plot(kind = 'barh')","56ca3b46":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=99)","a0fa6ed9":"from sklearn.svm import SVC\n\nmodel.svm = SVC(kernel='linear') \nmodel.svm.fit(X_train,y_train)\npreds = model.svm.predict(X_test)\nmetrics.accuracy_score(y_test, preds)","e1fb0b0c":"# Create the Confusion matrix\nfrom sklearn.metrics import classification_report, confusion_matrix  \nprint(confusion_matrix(y_test,preds))  ","8b8a25ba":"ax1 = sns.catplot(x=\"gender\", kind=\"count\", hue=\"Churn\", data=telecom_cust,\n                  estimator=lambda x: sum(x==0)*100.0\/len(x))\n#ax1.yaxis.set_major_formatter(mtick.PercentFormatter())","f4eefa90":"# AdaBoost Algorithm\nfrom sklearn.ensemble import AdaBoostClassifier\nmodel = AdaBoostClassifier()\n# n_estimators = 50 (default value) \n# base_estimator = DecisionTreeClassifier (default value)\nmodel.fit(X_train,y_train)\npreds = model.predict(X_test)\nmetrics.accuracy_score(y_test, preds)","780fcd9f":"from xgboost import XGBClassifier\nmodel = XGBClassifier()\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)\nmetrics.accuracy_score(y_test, preds)","98e854f6":"**iv.) Churn by Monthly Charges**: Higher % of customers churn when the monthly charges are high.","2bebadde":"As we can see from this graph most of the customers are in the month to month contract. While there are equal number of customers in the 1 year and 2 year contracts.\n\n","092cb779":"**4. ADA Boost**","62031e08":"**A.)** ***Demographics*** - Let us first understand the gender, age range, patner and dependent status of the customers","f9c5c765":"**2. Contracts:** To understand the above graph, lets first look at the # of customers by different contracts. ","8eae208b":"### E.) Finally, let's take a look at out predictor variable (Churn) and understand its interaction with other important variables as was found out in the correlation plot. ","83d70141":"Wth SVM I was able to increase the accuracy to upto 82%. However, we need to take a deeper look at the true positive and true negative rates, including the Area Under the Curve (AUC) for a better prediction. I will explore this soon. Stay Tuned!","21a21351":"**1. Logistic Regression**","85d6d4af":"**What would be interesting is to look at the % of customers, who have partners, also have dependents. We will explore this next. **","f011b89b":"3. **Partner and dependent status**  - About 50% of the customers have a partner, while only 30% of the total customers have dependents. ","e2989e7b":"**ii.) Churn by Contract Type**: Similar to what we saw in the correlation plot, the customers who have a month to month contract have a very high churn rate.","97b8b583":"It is important to scale the variables in logistic regression so that all of them are within a range of 0 to 1. This helped me improve the accuracy from 79.7% to 80.7%. Further, you will notice below that the importance of variables is also aligned with what we are seeing in Random Forest algorithm and the EDA we conducted above.","2a1417fd":"Churn is a one of the biggest problem in  the telecom industry. Research has shown that the average monthly churn rate among the top 4 wireless carriers in the US is 1.9% - 2%. ","5a8fd251":"In our data, 74% of the customers do not churn. Clearly the data is skewed as we would expect a large majority of the customers to not churn. This is important to keep in mind for our modelling as skeweness could lead to a lot of false negatives. We will see in the modelling section on how to avoid skewness in the data.","68901888":"**iii.) Churn by Seniority**: Senior Citizens have almost double the churn rate than younger population.","6a3e2cee":"Interestingly,  among the customers who have a partner, only about half of them also have a dependent, while other half do not have any independents. \nAdditionally, as expected, among the customers who do not have any partner, a majority (80%) of them do not have any dependents .","ca48a22a":"# EDA(Exploratory data analysis) and Prediction","c74df2af":"**Let us read the data file in the python notebook**","c6550d1c":"## Data Exploration\n\nLet us first start with exploring our data set, to better understand the patterns in the data and potentially form some hypothesis. First we will look at the distribution of individual variables and then slice and dice our data for any interesting trends.","c5b0cca8":"Interestingly with XG Boost I was able to increase the accuracy on test data to almost 83%. Clearly, XG Boost is a winner among all other techniques. XG Boost is a slow learning model and is based on the concept of Boosting","cb090c5b":"**v.) Churn by Total Charges**: It seems that there is higer churn when the total charges are lower.","2e443aed":"**Observations**\n\nWe can see that some variables have a negative relation to our predicted variable (Churn), while some have positive relation. Negative relation means that likeliness of churn decreases with that variable. Let us summarize some of the interesting features below:\n* As we saw in our EDA, having a 2 month contract reduces chances of churn. 2 month contract along with tenure have the most negative relation with Churn as predicted by logistic regressions\n* Having DSL internet service also reduces the proability of Churn\n* Lastly, total charges, monthly contracts, fibre optic internet services and seniority can lead to higher churn rates. This is interesting because although fibre optic services are faster, customers are  likely to churn because of it. I think we need to explore more to better understad why this is happening. \n\nAny hypothesis on the above would be really helpful! ","a735445d":"Month to month contracts, absence of online security and tech support seem to be positively correlated with churn. While, tenure, two year contracts seem to be negatively correlated with churn. \n\nInterestingly, services such as Online security, streaming TV, online backup, tech support, etc. without internet connection seem to be negatively related to churn.\n\nWe will explore the patterns for the above correlations below before we delve into modelling and identifying the important variables.","3c1b23d7":"**5. XG Boost**","80701179":"**1. Tenure:**  After looking at the below histogram we can see that a lot of customers have been with the telecom company for just a month, while quite a many are there for about 72 months. This could be potentially because different customers have different contracts. Thus based on the contract they are into it could be more\/less easier for the customers to stay\/leave the telecom company.","5fea153d":"**Observations:**\n\n* From random forest algorithm, monthly contract, tenure and total charges are the most important predictor variables to predict churn.\n* The results from random forest are very similar to that of the logistic regression and in line to what we had expected from our EDA","b408894d":"###  C. Let us now look at the distribution of various services used by customers","07a4d30f":"Interestingly most of the monthly contracts last for 1-2 months, while the 2 year contracts tend to last for about 70 months. This shows that the customers taking a longer contract are more loyal to the company and tend to stay with it for a longer period of time. \n\nThis is also what we saw in the earlier chart on correlation with the churn rate. ","b5227f91":"We will observe that the total charges increases as the monthly bill for a customer increases.","70944ff5":"2. Lets now explore the churn rate by tenure, seniority, contract type, monthly charges and total charges to see how it varies by these variables.","76d5aed3":"2. **% Senior Citizens** - There are only 16% of the customers who are senior citizens. Thus most of our customers in the data are younger people.\n","5fd3e173":"### D.) Now let's take a quick look at the relation between monthly and total charges","08911424":"## After going through the above EDA we will develop some predictive models and compare them.\n\nWe will develop Logistic Regression, Random Forest, SVM, ADA Boost and XG Boost","5f9a1ec0":"Below we will understand the tenure of customers based on their contract type.","beadb572":"### B.) **Customer Account Information**:  Let u now look at the tenure, contract","34ff279c":"I also looked at any differences between the % of customers with\/without dependents and partners by gender. There is no difference in their distribution by gender. Additionally, there is no difference in senior citizen status by gender.","bad86af9":"1. Lets first look at the churn rate in our data","6b6bdd10":"**3. Support Vecor Machine (SVM)**","3b3756e0":"After looking at the above output, we can say that there are 11 missing values for Total Charges. Let us replace remove these 11 rows from our data set","7bbb5d75":"**2. Random Forest**","9a068a7b":"**i.) Churn vs Tenure**: As we can see form the below plot, the customers who do not churn, they tend to stay for a longer tenure with the telecom company. ","830d8e71":"**Let's explore the data to see if there are any missing values.**","e256e859":"1. **Gender Distribution** - About half of the customers in our data set are male while the other half are female"}}