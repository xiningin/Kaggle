{"cell_type":{"ec55fea7":"code","4c4d637e":"code","2fee8783":"code","4b358600":"code","95cf6e6a":"code","16d0ffbb":"code","303f47e9":"code","9e25bf16":"code","e26330c6":"code","5f3edcd7":"code","88e8f48d":"code","e95a96aa":"code","f2f46ecf":"code","8347925b":"code","23e20aeb":"code","50f6452f":"code","4fdf2793":"code","d0d4b50b":"code","c2ef1e41":"code","63136906":"code","e1c07470":"code","8c3d9948":"code","d0787bd8":"code","289e845b":"code","05820452":"code","37a248b8":"code","2bd3b341":"code","33c5cf4b":"code","d7739ae1":"code","5d4b84f8":"code","188a36eb":"code","897cfdbb":"code","8201dea2":"code","191e70e3":"code","9ef12885":"code","62672796":"code","102cb0ac":"code","aca8d780":"code","c25d0d4f":"code","fb7aadf8":"code","7a7cc0d2":"code","70438f2d":"code","17b308c3":"code","c146ef00":"code","9ed5c7ec":"code","2b710508":"code","3e89700c":"code","29565ed7":"code","f7611c4d":"code","8635efe2":"code","83759847":"code","16ab31d3":"code","493ba478":"code","08af54b2":"code","14f44b0b":"code","2b60c63a":"code","7e300a3a":"code","b4cb2c87":"code","5ab1efa6":"code","2deb8fea":"code","4555f4c2":"code","719ec324":"code","0ce608cc":"code","fc4e953b":"code","5a1a2e30":"code","f8712e5e":"code","b353986e":"code","250e1fd6":"code","a5c08c91":"code","d79999b5":"code","900dc3a5":"code","cc5c702a":"code","d0fd3da8":"code","0e7367da":"code","07890674":"code","9df6fde2":"code","afaaa58f":"code","11a6bc53":"code","7ddf4322":"code","a1fee51e":"code","6d4740ab":"code","9699911a":"code","7c73ae02":"code","59fd1493":"code","6636b286":"code","dc92693f":"code","e952cc28":"code","cd442455":"code","21275e10":"code","dba459f1":"code","d0de6cea":"code","63506fda":"code","c108d47c":"code","0d0dfa2c":"code","6334fe28":"code","d5071377":"code","97c25fa4":"code","24b1c722":"code","f21f0c32":"code","6b623e4b":"code","7d53ecf4":"code","0d28d111":"code","a3979594":"code","79f509b5":"code","38d57d51":"code","23df2968":"code","6fbe7468":"code","8e25f93b":"code","0e287cbc":"code","331ecdd4":"code","b965ab43":"code","3cea369e":"code","36b56af9":"code","9dee55e6":"markdown","a5c67b0e":"markdown","e8a3aa8b":"markdown","a7e8bf1e":"markdown","86be0617":"markdown","c79727b9":"markdown","2dd35f08":"markdown","4b51eb86":"markdown","07539571":"markdown","9a238673":"markdown","a05d7215":"markdown","e0e55bef":"markdown","511670f7":"markdown","cb060ae4":"markdown","d985cd70":"markdown","2949b1c0":"markdown","4c3927b2":"markdown","301ccf7f":"markdown","8e7a5f20":"markdown","62734a29":"markdown","0d05f3f4":"markdown","2448aae7":"markdown","979d1b15":"markdown","9c205563":"markdown","7d5ed820":"markdown","dd9fe84b":"markdown","4f4476bf":"markdown","6bd58bb2":"markdown","a411e382":"markdown","456d7a1c":"markdown","4af5e7b5":"markdown","bfae3a96":"markdown","8d808201":"markdown","aed7caaa":"markdown","1f2f82e8":"markdown","7d9e5679":"markdown","8337acb2":"markdown","b6b3cad7":"markdown","06c3cf59":"markdown","38dc1952":"markdown","f4e02243":"markdown","a0d9478f":"markdown","9d5d0b82":"markdown","ee391877":"markdown","b833917e":"markdown","58979cf9":"markdown","7d92ca30":"markdown","ce2305cd":"markdown","e96ce317":"markdown","de568b28":"markdown"},"source":{"ec55fea7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\nimport os\nfor dirname, _, filenames in os.walk(\"\/kaggle\/input\"):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# Any results you write to the current directory are saved as output.","4c4d637e":"#data = pd.read_csv('\/kaggle\/input\/pokemon.csv')\n#data.head()","2fee8783":"data = pd.read_csv('..\/input\/pokemon.csv')\ndata.head()","4b358600":"data.info()","95cf6e6a":"data.corr()","16d0ffbb":"#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","303f47e9":"data.head(10)","9e25bf16":"data.columns","e26330c6":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.Speed.plot(kind = 'line', color = 'g',label = 'Speed',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.Defense.plot(color = 'r',label = 'Defense',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","5f3edcd7":"# Scatter Plot \n# x = attack, y = defense\ndata.plot(kind='scatter', x='Attack', y='Defense',alpha = 0.5,color = 'red')\nplt.xlabel('Attack')              # label = name of label\nplt.ylabel('Defence')\nplt.title('Attack Defense Scatter Plot')            # title = title of plot","88e8f48d":"# Histogram\n# bins = number of bar in figure\ndata.Speed.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","e95a96aa":"# clf() = cleans it up again you can start a fresh\ndata.Speed.plot(kind = 'hist',bins = 50)\nplt.clf()\n# We cannot see plot due to clf()","f2f46ecf":"#create dictionary and look its keys and values\ndictionary = {'spain' : 'madrid','usa' : 'vegas'}\nprint(dictionary.keys())\nprint(dictionary.values())","8347925b":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary['spain'] = \"barcelona\"    # update existing entry\nprint(dictionary)\ndictionary['france'] = \"paris\"       # Add new entry\nprint(dictionary)\ndel dictionary['spain']              # remove entry with key 'spain'\nprint(dictionary)\nprint('france' in dictionary)        # check include or not\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)\n","23e20aeb":"# In order to run all code you need to take comment this line\n#del dictionary         # delete entire dictionary     \nprint(dictionary)       # it gives error because dictionary is deleted","50f6452f":"data = pd.read_csv('..\/input\/pokemon.csv')\n","4fdf2793":"series = data['Defense']        # data['Defense'] = series\nprint(type(series))\ndata_frame = data[['Defense']]  # data[['Defense']] = data frame\nprint(type(data_frame))\n","d0d4b50b":"# Comparison operator\nprint(3 > 2)\nprint(3!=2)\n# Boolean operators\nprint(True and False)\nprint(True or False)","c2ef1e41":"# 1 - Filtering Pandas data frame\nx = data['Defense']>200     # There are only 3 pokemons who have higher defense value than 200\ndata[x]","63136906":"# 2 - Filtering pandas with logical_and\n# There are only 2 pokemons who have higher defence value than 2oo and higher attack value than 100\ndata[np.logical_and(data['Defense']>200, data['Attack']>100 )]","e1c07470":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data['Defense']>200) & (data['Attack']>100)]","8c3d9948":"# Stay in loop if condition( i is not equal 5) is true\ni = 0\nwhile i != 5 :\n    print('i is: ',i)\n    i +=1\nprint(i,' is equal to 5')","d0787bd8":"# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in data[['Attack']][0:1].iterrows():\n    print(index,\" : \",value)\n\n","289e845b":"# example of what we learn above\ndef tuple_ex():\n    \"\"\" return defined t tuple\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuple_ex()\nprint(a,b,c)","05820452":"# guess prints what\nx = 2\ndef f():\n    x = 3\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope","37a248b8":"# What if there is no local scope\nx = 5\ndef f():\n    y = 2*x        # there is no local scope x\n    return y\nprint(f())         # it uses global scope x  \n# First local scope searched, then global scope searched, if two of them cannot be found lastly built in scope searched.","2bd3b341":"# How can we learn what is built in scope\nimport builtins\ndir(builtins)","33c5cf4b":"#nested function\ndef square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())    ","d7739ae1":"# default arguments\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n# what if we want to change default arguments\nprint(f(5,4,3))","5d4b84f8":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():               # If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(key, \" \", value)\nf(country = 'spain', capital = 'madrid', population = 123456)","188a36eb":"# lambda function\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","897cfdbb":"number_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","8201dea2":"# iteration example\nname = \"ronaldo\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration\n","191e70e3":"# zip example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","9ef12885":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuple\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","62672796":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","102cb0ac":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","aca8d780":"# lets return pokemon csv and make one more list comprehension example\n# lets classify pokemons whether they have high or low speed. Our threshold is average speed.\nthreshold = sum(data.Speed)\/len(data.Speed)\ndata[\"speed_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Speed]\ndata.loc[:10,[\"speed_level\",\"Speed\"]] # we will learn loc more detailed later","c25d0d4f":"data = pd.read_csv('..\/input\/pokemon.csv')\ndata.head()  # head shows first 5 rows","fb7aadf8":"# tail shows last 5 rows\ndata.tail()","7a7cc0d2":"# columns gives column names of features\ndata.columns","70438f2d":"# shape gives number of rows and columns in a tuble\ndata.shape","17b308c3":"# info gives data type like dataframe, number of sample or row, number of feature or column, feature types and memory usage\ndata.info()","c146ef00":"# For example lets look frequency of pokemom types\nprint(data['Type 1'].value_counts(dropna =False))  # if there are nan values that also be counted\n# As it can be seen below there are 112 water pokemon or 70 grass pokemon","9ed5c7ec":"1,2,3,4,200","2b710508":"# For example max HP is 255 or min defense is 5\ndata.describe() #ignore null entries","3e89700c":"# For example: compare attack of pokemons that are legendary  or not\n# Black line at top is max\n# Blue line at top is 75%\n# Green line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\ndata.boxplot(column='Attack',by = 'Legendary')","29565ed7":"# Firstly I create new data from pokemons data to explain melt nore easily.\ndata_new = data.head()    # I only take 5 rows into new data\ndata_new","f7611c4d":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'Name', value_vars= ['Attack','Defense'])\nmelted","8635efe2":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'Name', columns = 'variable',values='value')","83759847":"# Firstly lets create 2 data frame\ndata1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","16ab31d3":"data1 = data['Attack'].head()\ndata2= data['Defense'].head()\nconc_data_col = pd.concat([data1,data2],axis =1) # axis = 1 : adds dataframes in column\nconc_data_col","493ba478":"data.dtypes","08af54b2":"# lets convert object(str) to categorical and int to float.\ndata['Type 1'] = data['Type 1'].astype('category')\ndata['Speed'] = data['Speed'].astype('float')","14f44b0b":"# As you can see Type 1 is converted from object to categorical\n# And Speed ,s converted from int to float\ndata.dtypes","2b60c63a":"# Lets look at does pokemon data have nan value\n# As you can see there are 800 entries. However Type 2 has 414 non-null object so it has 386 null object.\ndata.info()","7e300a3a":"# Lets chech Type 2\ndata[\"Type 2\"].value_counts(dropna =False)\n# As you can see, there are 386 NAN value","b4cb2c87":"# Lets drop nan values\ndata1=data   # also we will use data to fill missing value so I assign it to data1 variable\ndata1[\"Type 2\"].dropna(inplace = True)  # inplace = True means we do not assign it to new variable. Changes automatically assigned to data\n# So does it work ?","5ab1efa6":"#  Lets check with assert statement\n# Assert statement:\nassert 1==1 # return nothing because it is true","2deb8fea":"# In order to run all code, we need to make this line comment\n# assert 1==2 # return error because it is false","4555f4c2":"assert  data['Type 2'].notnull().all() # returns nothing because we drop nan values","719ec324":"data[\"Type 2\"].fillna('empty',inplace = True)\n","0ce608cc":"assert  data['Type 2'].notnull().all() # returns nothing because we do not have nan values","fc4e953b":"# # With assert statement we can check a lot of thing. For example\n# assert data.columns[1] == 'Name'\n# assert data.Speed.dtypes == np.int","5a1a2e30":"# data frames from dictionary\ncountry = [\"Spain\",\"France\"]\npopulation = [\"11\",\"12\"]\nlist_label = [\"country\",\"population\"]\nlist_col = [country,population]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","f8712e5e":"# Add new columns\ndf[\"capital\"] = [\"madrid\",\"paris\"]\ndf","b353986e":"# Broadcasting\ndf[\"income\"] = 0 #Broadcasting entire column\ndf","250e1fd6":"# Plotting all data \ndata1 = data.loc[:,[\"Attack\",\"Defense\",\"Speed\"]]\ndata1.plot()\n# it is confusing","a5c08c91":"# subplots\ndata1.plot(subplots = True)\nplt.show()","d79999b5":"# scatter plot  \ndata1.plot(kind = \"scatter\",x=\"Attack\",y = \"Defense\")\nplt.show()","900dc3a5":"# hist plot  \ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True)","cc5c702a":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","d0fd3da8":"data.describe()","0e7367da":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","07890674":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndata2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\ndata2 ","9df6fde2":"# Now we can select according to our date index\nprint(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","afaaa58f":"# We will use data2 that we create at previous part\ndata2.resample(\"A\").mean()","11a6bc53":"# Lets resample with month\ndata2.resample(\"M\").mean()\n# As you can see there are a lot of nan because data2 does not include all months","7ddf4322":"# In real life (data is real. Not created from us like data2) we can solve this problem with interpolate\n# We can interpolete from first value\ndata2.resample(\"M\").first().interpolate(\"linear\")","a1fee51e":"# Or we can interpolate with mean()\ndata2.resample(\"M\").mean().interpolate(\"linear\")","6d4740ab":"# read data\ndata = pd.read_csv('..\/input\/pokemon.csv')\ndata= data.set_index(\"#\")\ndata.head()","9699911a":"# indexing using square brackets\ndata[\"HP\"][1]","7c73ae02":"# using column attribute and row label\ndata.HP[1]","59fd1493":"# using loc accessor\ndata.loc[1,[\"HP\"]]","6636b286":"# Selecting only some columns\ndata[[\"HP\",\"Attack\"]]","dc92693f":"# Difference between selecting columns: series and dataframes\nprint(type(data[\"HP\"]))     # series\nprint(type(data[[\"HP\"]]))   # data frames","e952cc28":"# Slicing and indexing series\ndata.loc[1:10,\"HP\":\"Defense\"]   # 10 and \"Defense\" are inclusive","cd442455":"# Reverse slicing \ndata.loc[10:1:-1,\"HP\":\"Defense\"] ","21275e10":"# From something to end\ndata.loc[1:10,\"Speed\":] ","dba459f1":"# Creating boolean series\nboolean = data.HP > 200\ndata[boolean]","d0de6cea":"# Combining filters\nfirst_filter = data.HP > 150\nsecond_filter = data.Speed > 35\ndata[first_filter & second_filter]","63506fda":"# Filtering column based others\ndata.HP[data.Speed<15]","c108d47c":"# Plain python functions\ndef div(n):\n    return n\/2\ndata.HP.apply(div)","0d0dfa2c":"# Or we can use lambda function\ndata.HP.apply(lambda n : n\/2)","6334fe28":"# Defining column using other columns\ndata[\"total_power\"] = data.Attack + data.Defense\ndata.head()","d5071377":"# our index name is this:\nprint(data.index.name)\n# lets change it\ndata.index.name = \"index_name\"\ndata.head()","97c25fa4":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndata.head()\n# first copy of our data to data3 then change index \ndata3 = data.copy()\n# lets make index start from 100. It is not remarkable change but it is just example\ndata3.index = range(100,900,1)\ndata3.head()","24b1c722":"# We can make one of the column as index. I actually did it at the beginning of manipulating data frames with pandas section\n# It was like this\n# data= data.set_index(\"#\")\n# also you can use \n# data.index = data[\"#\"]","f21f0c32":"# lets read data frame one more time to start from beginning\ndata = pd.read_csv('..\/input\/pokemon.csv')\ndata.head()\n# As you can see there is index. However we want to set one or more column to be index","6b623e4b":"# Setting index : type 1 is outer type 2 is inner index\ndata1 = data.set_index([\"Type 1\",\"Type 2\"]) \ndata1.head(100)\n# data1.loc[\"Fire\",\"Flying\"] # howw to use indexes","7d53ecf4":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","0d28d111":"# pivoting\ndf.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")","a3979594":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1\n# lets unstack it","79f509b5":"# level determines indexes\ndf1.unstack(level=0)","38d57d51":"df1.unstack(level=1)","23df2968":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","6fbe7468":"df","8e25f93b":"# df.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")\npd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])","0e287cbc":"# We will use df\ndf","331ecdd4":"# according to treatment take means of other features\ndf.groupby(\"treatment\").mean()   # mean is aggregation \/ reduction method\n# there are other methods like sum, std,max or min","b965ab43":"# we can only choose one of the feature\ndf.groupby(\"treatment\").age.max() ","3cea369e":"# Or we can choose multiple features\ndf.groupby(\"treatment\")[[\"age\",\"response\"]].min() ","36b56af9":"df.info()\n# as you can see gender is object\n# However if we use groupby, we can convert it categorical data. \n# Because categorical data uses less memory, speed up operations like groupby\n#df[\"gender\"] = df[\"gender\"].astype(\"category\")\n#df[\"treatment\"] = df[\"treatment\"].astype(\"category\")\n#df.info()\n","9dee55e6":"<a id=\"35\"><\/a> <br>\n### FILTERING DATA FRAMES\nCreating boolean series\nCombining filters\nFiltering column based others","a5c67b0e":"<a id=\"20\"><\/a> <br>\n### TIDY DATA\nWe tidy data with melt().\nDescribing melt is confusing. Therefore lets make example to understand it.\n","e8a3aa8b":"Up to now, you learn \n* User defined function \n* Scope\n* Nested function\n* Default and flexible arguments\n* Lambda function\n*  Anonymous function\n*  Iterators\n* List comprehension\n","a7e8bf1e":"<a id=\"15\"><\/a> <br>\n### LIST COMPREHENS\u0130ON\n**One of the most important topic of this kernel**\n<br>We use list comprehension for data analysis often. \n<br> list comprehension: collapse for loops for building lists into a single line\n<br>Ex: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is  unnecessarily long. We can make it one line code that is list comprehension.","86be0617":"<a id=\"3\"><\/a> <br>\n### DICTIONARY\nWhy do we need dictionary?\n* It has 'key' and 'value'\n* Faster than lists\n<br>\nWhat is key and value. Example:\n* dictionary = {'spain' : 'madrid'}\n* Key is spain.\n* Values is madrid.\n<br>\n<br>**It's that easy.**\n<br>Lets practice some other properties like keys(), values(), update, add, check, remove key, remove all entries and remove dicrionary.","c79727b9":"<a id=\"24\"><\/a> <br>\n### MISSING DATA and TESTING WITH ASSERT\nIf we encounter with missing data, what we can do:\n* leave as is\n* drop them with dropna()\n* fill missing value with fillna()\n* fill missing values with test statistics like mean\n<br>Assert statement: check that you can turn on or turn off when you are done with your testing of the program","2dd35f08":"<a id=\"32\"><\/a> <br>\n# MANIPULATING DATA FRAMES WITH PANDAS","4b51eb86":"<a id=\"6\"><\/a> <br>\n### WHILE and FOR LOOPS\nWe will learn the most basic while and for loops","07539571":"<a id=\"14\"><\/a> <br>\n### ITERATORS\n* iterable is an object that can return an iterator\n* iterable: an object with an associated iter() method\n<br> example: list, strings and dictionaries\n* iterator: produces next value with next() method","9a238673":"<a id=\"30\"><\/a> <br>\n### INDEXING PANDAS TIME SERIES\n* datetime = object\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","a05d7215":"<a id=\"31\"><\/a> <br>\n### RESAMPLING PANDAS TIME SERIES\n* Resampling: statistical method over different time intervals\n    * Needs string to specify frequency like \"M\" = month or \"A\" = year\n* Downsampling: reduce date time rows to slower frequency like from daily to weekly\n* Upsampling: increase date time rows to faster frequency like from daily to hourly\n* Interpolate: Interpolate values according to different methods like \u2018linear\u2019, \u2018time\u2019 or index\u2019 \n    * https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.interpolate.html\n","e0e55bef":"<a id=\"36\"><\/a> <br>\n### TRANSFORMING DATA\n* Plain python functions\n* Lambda function: to apply arbitrary python function to every element\n* Defining column using other columns","511670f7":"<a id=\"38\"><\/a> <br>\n### HIERARCHICAL INDEXING\n* Setting indexing","cb060ae4":"<a id=\"40\"><\/a> <br>\n### STACKING and UNSTACKING DATAFRAME\n* deal with multi label indexes\n* level: position of unstacked index\n* swaplevel: change inner and outer level index position","d985cd70":"<a id=\"12\"><\/a> <br>\n### LAMBDA FUNCTION\nFaster way of writing function","2949b1c0":"zip(): zip lists","4c3927b2":"<a id=\"27\"><\/a> <br>\n### BUILDING DATA FRAMES FROM SCRATCH\n* We can build data frames from csv as we did earlier.\n* Also we can build dataframe from dictionaries\n    * zip() method: This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.\n* Adding new column\n* Broadcasting: Create new column and assign a value to entire column","301ccf7f":"<a id=\"11\"><\/a> <br>\n### DEFAULT and FLEXIBLE ARGUMENTS\n* Default argument example:\n<br> def f(a, b=1):\n        \"\"\" b = 1 is default argument\"\"\"\n* Flexible argument example:\n<br> def f(*args):\n       \"\"\" *args can be one or more\"\"\"\n<br>def f(** kwargs)\n       \"\"\" **kwargs is a dictionary\"\"\"\n       \n<br><br> lets write some code to practice  ","8e7a5f20":"<a id=\"34\"><\/a> <br>\n### SLICING DATA FRAME\n* Difference between selecting columns\n    * Series and data frames\n* Slicing and indexing series\n* Reverse slicing \n* From something to end","62734a29":"<a id=\"26\"><\/a> <br>\n### REV\u0130EW of PANDAS\nAs you notice, I do not give all idea in a same time. Although, we learn some basics of pandas, we will go deeper in pandas.\n* single column = series\n* NaN = not a number\n* dataframe.values = numpy\n","0d05f3f4":"<a id=\"8\"><\/a> <br>\n### USER DEFINED FUNCTION\nWhat do we need to know about functions:\n* docstrings: documentation for functions. Example:\n<br>for f():\n    <br>\"\"\"This is docstring for documentation of function f\"\"\"\n* tuple: sequence of immutable python objects. \n<br>cant modify values\n<br>tuple uses paranthesis like tuble = (1,2,3)\n<br>unpack tuple into several variables like a,b,c = tuple\n    ","2448aae7":"<a id=\"21\"><\/a> <br>\n### PIVOTING DATA\nReverse of melting.","979d1b15":"<a id=\"19\"><\/a> <br>\n### VISUAL EXPLORATORY DATA ANALYSIS\n* Box plots: visualize basic statistics like outliers, min\/max or quantiles","9c205563":"<a id=\"25\"><\/a> <br>\n# 4. PANDAS FOUNDATION ","7d5ed820":"# CONCLUSION\nThank you for your votes and comments\n<br> **MACHINE LEARNING ** https:\/\/www.kaggle.com\/kanncaa1\/machine-learning-tutorial-for-beginners\/\n<br> **DEEP LEARNING** https:\/\/www.kaggle.com\/kanncaa1\/deep-learning-tutorial-for-beginners\n<br> **STATISTICAL LEARNING** https:\/\/www.kaggle.com\/kanncaa1\/statistical-learning-tutorial-for-beginners\n<br>**If you have any question or suggest, I will be happy to hear it.**","dd9fe84b":"[i + 1 for i in num1 ]: list of comprehension\n<br> i +1: list comprehension syntax\n<br> for i in num1: for loop syntax\n<br> i: iterator\n<br> num1: iterable object","4f4476bf":"<a id=\"39\"><\/a> <br>\n### PIVOTING DATA FRAMES\n* pivoting: reshape tool","6bd58bb2":"<a id=\"42\"><\/a> <br>\n### CATEGORICALS AND GROUPBY","a411e382":"<a id=\"22\"><\/a> <br>\n### CONCATENATING DATA\nWe can concatenate two dataframe ","456d7a1c":"<a id=\"13\"><\/a> <br>\n### ANONYMOUS FUNCT\u0130ON\nLike lambda function but it can take more than one arguments.\n* map(func,seq) : applies a function to all the items in a list\n","4af5e7b5":"<a id=\"28\"><\/a> <br>\n### VISUAL EXPLORATORY DATA ANALYSIS\n* Plot\n* Subplot\n* Histogram:\n    * bins: number of bins\n    * range(tuble): min and max values of bins\n    * normed(boolean): normalize or not\n    * cumulative(boolean): compute cumulative distribution","bfae3a96":"# DATA SCIENTIST\n**In this tutorial, I only explain you what you need to be a data scientist neither more nor less.**\n\nData scientist need to have these skills:\n\n1. Basic Tools: Like python, R or SQL. You do not need to know everything. What you only need is to learn how to use **python**\n1. Basic Statistics: Like mean, median or standart deviation. If you know basic statistics, you can use **python** easily. \n1. Data Munging: Working with messy and difficult data. Like a inconsistent date and string formatting. As you guess, **python** helps us.\n1. Data Visualization: Title is actually explanatory. We will visualize the data with **python** like matplot and seaborn libraries.\n1. Machine Learning: You do not need to understand math behind the machine learning technique. You only need is understanding basics of machine learning and learning how to implement it while using **python**.\n\n### As a summary we will learn python to be data scientist !!!\n\n**Content:**\n1. [Introduction to Python:](#1)\n    1. [Matplotlib](#2)\n    1. [Dictionaries ](#3)\n    1. [Pandas](#4)\n    1. [Logic, control flow and filtering](#5)\n    1. [Loop data structures](#6)\n1. [Python Data Science Toolbox:](#7)\n    1. [User defined function](#8)\n    1. [Scope](#9)\n    1. [Nested function](#10)\n    1. [Default and flexible arguments](#11)\n    1. [Lambda function](#12)\n    1. [Anonymous function](#13)\n    1. [Iterators](#14)\n    1. [List comprehension](#15)\n1. [Cleaning Data](#16)\n    1. [Diagnose data for cleaning](#17)\n    1. [Exploratory data analysis](#18)\n    1. [Visual exploratory data analysis](#19)\n    1. [Tidy data](#20)\n    1. [Pivoting data](#21)\n    1. [Concatenating data](#22)\n    1. [Data types](#23)\n    1. [Missing data and testing with assert](#24)\n1. [Pandas Foundation](#25)\n    1. [Review of pandas](#26)\n    1. [Building data frames from scratch](#27)\n    1. [Visual exploratory data analysis](#28)\n    1. [Statistical explatory data analysis](#29)\n    1. [Indexing pandas time series](#30)\n    1. [Resampling pandas time series](#31)\n1. [Manipulating Data Frames with Pandas](#32)\n    1. [Indexing data frames](#33)\n    1. [Slicing data frames](#34)\n    1. [Filtering data frames](#35)\n    1. [Transforming data frames](#36)\n    1. [Index objects and labeled data](#37)\n    1. [Hierarchical indexing](#38)\n    1. [Pivoting data frames](#39)\n    1. [Stacking and unstacking data frames](#40)\n    1. [Melting data frames](#41)\n    1. [Categoricals and groupby](#42)\n1. Data Visualization\n    1. Seaborn: https:\/\/www.kaggle.com\/kanncaa1\/seaborn-for-beginners\n    1. Bokeh 1: https:\/\/www.kaggle.com\/kanncaa1\/interactive-bokeh-tutorial-part-1\n    1. Rare Visualization: https:\/\/www.kaggle.com\/kanncaa1\/rare-visualization-tools\n    1. Plotly: https:\/\/www.kaggle.com\/kanncaa1\/plotly-tutorial-for-beginners\n1. Machine Learning\n    1. https:\/\/www.kaggle.com\/kanncaa1\/machine-learning-tutorial-for-beginners\/\n1. Deep Learning\n    1. https:\/\/www.kaggle.com\/kanncaa1\/deep-learning-tutorial-for-beginners\n1. Time Series Prediction\n    1. https:\/\/www.kaggle.com\/kanncaa1\/time-series-prediction-tutorial-with-eda\n1. Statistic\n    1. https:\/\/www.kaggle.com\/kanncaa1\/basic-statistic-tutorial-for-beginners\n1. Deep Learning with Pytorch\n    1. Artificial Neural Network: https:\/\/www.kaggle.com\/kanncaa1\/pytorch-tutorial-for-deep-learning-lovers\n    1. Convolutional Neural Network: https:\/\/www.kaggle.com\/kanncaa1\/pytorch-tutorial-for-deep-learning-lovers\n    1. Recurrent Neural Network: https:\/\/www.kaggle.com\/kanncaa1\/recurrent-neural-network-with-pytorch","8d808201":"<a id=\"16\"><\/a> <br>\n# 3.CLEANING DATA","aed7caaa":"In this part, you learn:\n* Diagnose data for cleaning\n* Exploratory data analysis\n* Visual exploratory data analysis\n* Tidy data\n* Pivoting data\n* Concatenating data\n* Data types\n* Missing data and testing with assert","1f2f82e8":"<a id=\"37\"><\/a> <br>\n### INDEX OBJECTS AND LABELED DATA\nindex: sequence of label\n","7d9e5679":"<a id=\"10\"><\/a> <br>\n### NESTED FUNCTION\n* function inside function.\n* There is a LEGB rule that is search local scope, enclosing function, global and built in scopes, respectively.","8337acb2":"In this part, you learn:\n* how to import csv file\n* plotting line,scatter and histogram\n* basic dictionary features\n* basic pandas features like filtering that is actually something always used and main for being data scientist\n* While and for loops","b6b3cad7":"<a id=\"23\"><\/a> <br>\n### DATA TYPES\nThere are 5 basic data types: object(string),boolean, integer, float and categorical.\n<br> We can make conversion data types like from str to categorical or from int to float\n<br> Why is category important: \n* make dataframe smaller in memory \n* can be utilized for anlaysis especially for sklearn(we will learn later)","06c3cf59":"<a id=\"5\"><\/a> <br>\nBefore continuing with pandas,   we need to learn **logic, control flow** and **filtering.**\n<br>Comparison operator:  ==, <, >, <=\n<br>Boolean operators: and, or ,not\n<br> Filtering pandas","38dc1952":"<a id=\"4\"><\/a> <br>\n### PANDAS\nWhat do we need to know about pandas?\n* CSV: comma - separated values\n\n","f4e02243":"<a id=\"9\"><\/a> <br>\n### SCOPE\nWhat we need to know about scope:\n* global: defined main body in script\n* local: defined in a function\n* built in scope: names in predefined built in scope module such as print, len\n<br><br>Lets make some basic examples","a0d9478f":"<a id=\"18\"><\/a> <br>\n### EXPLORATORY DATA ANALYSIS\nvalue_counts(): Frequency counts\n<br>outliers: the value that is considerably higher or lower from rest of the data\n* Lets say value at 75% is Q3 and value at 25% is Q1. \n* Outlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR\n<br>We will use describe() method. Describe method includes:\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry\n\n<br> What is quantile?\n\n* 1,4,5,6,8,9,11,12,13,14,15,16,17\n* The median is the number that is in **middle** of the sequence. In this case it would be 11.\n\n* The lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n* The upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above.","9d5d0b82":"<a id=\"29\"><\/a> <br>\n### STATISTICAL EXPLORATORY DATA ANALYSIS\nI already explained it at previous parts. However lets look at one more time.\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry","ee391877":"<a id=\"41\"><\/a> <br>\n### MELTING DATA FRAMES\n* Reverse of pivoting","b833917e":"**WARNING - UYARI**\n* If you run the code above, if it outputs like in the picture, you need to put the \".csv\" path in pd.read_csv () (as in the picture).\n* Yukar\u0131daki kod blo\u011funu run edince sonu\u00e7 ne veriyorsa read_csv i\u00e7erisine onu yazman\u0131z gerekli.\n* Mesela, e\u011fer yukar\u0131 bulunan kodu \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131n\u0131zda, resimdeki gibi bir output veriyorsa pd.read_csv() i\u00e7erisine resimdeki \".csv\" yolunu koyman\u0131z gerekli (resimde oldu\u011fu gibi). Yukar\u0131da kod blo\u011funu run edince ne \u00e7\u0131k\u0131yorsa onu yazman\u0131z laz\u0131m mesela a\u015fa\u011f\u0131daki gibi.\n<a href=\"https:\/\/ibb.co\/Hg0QX2h\"><img src=\"https:\/\/i.ibb.co\/ZT3CNJ2\/sil.png\" alt=\"sil\" border=\"0\"><\/a>\n* read_csv i\u00e7erisine yukar\u0131da \u00e7\u0131kan .csv dosyalar\u0131 yaz\u0131lmal\u0131.","58979cf9":"<a id=\"17\"><\/a> <br>\n### DIAGNOSE DATA for CLEANING\nWe need to diagnose and clean data before exploring.\n<br>Unclean data:\n* Column name inconsistency like upper-lower case letter or space between words\n* missing data\n* different language\n\n<br> We will use head, tail, columns, shape and info methods to diagnose data\n","7d92ca30":"<a id=\"33\"><\/a> <br>\n### INDEXING DATA FRAMES\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns","ce2305cd":"<a id=\"1\"><\/a> <br>\n# 1. INTRODUCTION TO PYTHON","e96ce317":"<a id=\"7\"><\/a> <br>\n# 2. PYTHON DATA SCIENCE TOOLBOX","de568b28":"<a id=\"2\"><\/a> <br>\n### MATPLOTLIB\nMatplot is a python library that help us to plot data. The easiest and most basic plots are line, scatter and histogram plots.\n* Line plot is better when x axis is time.\n* Scatter is better when there is correlation between two variables\n* Histogram is better when we need to see distribution of numerical data.\n* Customization: Colors,labels,thickness of line, title, opacity, grid, figsize, ticks of axis and linestyle  "}}