{"cell_type":{"b5825fb2":"code","6e6c736a":"code","7ea82795":"code","080b231a":"code","280a397b":"code","b52f463e":"code","e541ef5d":"code","3e8773f1":"code","6c4526bc":"code","d6942503":"code","4e2ccd37":"code","a12bf455":"code","f7029892":"code","c3eda409":"code","0148546c":"code","95cc0ae0":"code","fa4e25c8":"code","59255a3d":"code","2162018d":"code","64b0a297":"code","dcdca27e":"code","6dffafc6":"code","e3b9e7ad":"code","1f0ec39d":"code","3582cd90":"code","423d661d":"code","d3d7e224":"code","7fcaafed":"code","c30e7868":"code","117bab17":"code","83ce8109":"code","46b39f78":"code","6b3c9819":"code","cef7992d":"code","23def467":"code","fede293d":"code","e2851fe3":"code","d05b69a7":"code","9ce99a6f":"code","890228c4":"code","d53b9d2b":"code","0abb91bb":"code","dc60eb51":"code","70a3aed6":"code","81f32b30":"code","2e580eda":"code","1d77fe8e":"code","a80fa99a":"code","40335f4e":"code","16d908dc":"code","e7ee9b4a":"code","4e3d9af3":"code","1f7d3988":"markdown","284c4d3a":"markdown","b654f063":"markdown","5ee0386d":"markdown","1cdb9112":"markdown","f787ead8":"markdown","eba27b24":"markdown","3304fe77":"markdown","81904f0c":"markdown","8e7ede49":"markdown","6831ea90":"markdown","35f858ec":"markdown","3e491271":"markdown","60b74563":"markdown","dc7996e8":"markdown","0f874efa":"markdown","382d8873":"markdown","63703281":"markdown","d7e9738c":"markdown","4f7cdfa4":"markdown","0c77bb2c":"markdown","8b609097":"markdown","87b720b9":"markdown","fa5bc5d5":"markdown","bdfe2278":"markdown","25318bab":"markdown","01d138fc":"markdown","57165f06":"markdown","6e026881":"markdown","173bf217":"markdown","b6805e3f":"markdown","9467f36c":"markdown","6a4136a1":"markdown","f9a865f0":"markdown","c2bff7d0":"markdown","d8e448e3":"markdown","fa07423a":"markdown","62c4baa0":"markdown","bae42b55":"markdown","9edc2517":"markdown","5d036bc8":"markdown","74762d87":"markdown","cc533078":"markdown","efe5ba43":"markdown","23e4089d":"markdown","5e372464":"markdown","2591d714":"markdown","e1b659dd":"markdown","92e804fb":"markdown","d36102cc":"markdown","4f5b8f8e":"markdown","8613bc1a":"markdown","05ac5196":"markdown","a109c8b8":"markdown","494324fb":"markdown","3eb7a6f7":"markdown","a645943f":"markdown","b1b97db7":"markdown","da39c13b":"markdown","a89820e4":"markdown","432f09aa":"markdown","b41085c5":"markdown","2297a9f9":"markdown","b1954fe3":"markdown","ff4be805":"markdown","e6991488":"markdown","e1e10057":"markdown","d1e82447":"markdown","533f2303":"markdown","6ea1a11e":"markdown","0a71da73":"markdown"},"source":{"b5825fb2":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","6e6c736a":"raw_data = pd.read_csv('..\/input\/brasilian-houses-to-rent\/houses_to_rent_v2.csv')\nraw_data.head(20)","7ea82795":"print('ROWS: ', raw_data.shape[0])\nprint('COLUMNS: ', raw_data.shape[1])","080b231a":"raw_data.info()","280a397b":"raw_data.describe().T","b52f463e":"raw_data.isnull().sum()","e541ef5d":"plt.figure(figsize=(12, 6))\nsns.distplot(raw_data['rent amount (R$)'])\nplt.xticks(np.arange(raw_data['rent amount (R$)'].min(), raw_data['rent amount (R$)'].max(), step=3000));","3e8773f1":"plt.figure(figsize=(10, 7))\n\nsns.boxplot(raw_data['rent amount (R$)'])\nplt.xticks(np.arange(raw_data['rent amount (R$)'].min(), raw_data['rent amount (R$)'].max(), step=3000))\n\nplt.show()","6c4526bc":"cities = raw_data['city'].unique()\ncities","d6942503":"plt.figure(figsize=(18, 8))\n\ni = 1\nfor city in cities:\n    \n    if city == 'S\u00e3o Paulo':\n        continue\n    \n    plt.subplot(2, 3, i)\n    plt.title(city)\n    city_name = raw_data.loc[raw_data['city'] == city]\n    sns.distplot(city_name['rent amount (R$)'])\n    plt.xticks(np.arange(city_name['rent amount (R$)'].min(), city_name['rent amount (R$)'].max(), step=2000))\n    i+=1\n    \n\nplt.tight_layout()\nplt.show()","4e2ccd37":"plt.figure(figsize=(18, 5))\n\nsp = raw_data.loc[raw_data['city'] == 'S\u00e3o Paulo']\nsns.distplot(sp['rent amount (R$)'])\nplt.xticks(np.arange(sp['rent amount (R$)'].min(), sp['rent amount (R$)'].max(), step=2000))\n\nplt.show()","a12bf455":"plt.figure(figsize=(16, 8))\n\ni = 1\nstep = 5000\nfor city in cities:\n    if step < 2000:\n        step = 2000\n    plt.subplot(2, 3, i)\n    plt.title(city)\n    city_name = raw_data.loc[raw_data['city'] == city]\n    sns.boxplot(city_name['rent amount (R$)'])\n    plt.xticks(np.arange(city_name['rent amount (R$)'].min(), city_name['rent amount (R$)'].max(),\n                        step=step))\n    step-=3000\n    i+=1\n\n    \n\nplt.tight_layout()\nplt.show()","f7029892":"plt.figure(figsize=(10, 10))\n\nnumData = raw_data._get_numeric_data()\nvar_num_corr = numData.corr()\n\nsns.heatmap(var_num_corr, vmin=-1, vmax=1, annot=True, linewidth=0.01, linecolor='black', cmap='RdBu_r')\n\nplt.show()","c3eda409":"var_num_corr['rent amount (R$)'].round(3)","0148546c":"plt.figure(figsize=(12, 6))\n\nplt.subplot(1, 2, 1)\nsns.barplot(x=raw_data['rooms'], y=raw_data['rent amount (R$)'])\n\nplt.subplot(1, 2, 2)\nsns.boxplot(x=raw_data['rooms'])\nplt.xticks(np.arange(raw_data['rooms'].min(), raw_data['rooms'].max(), step=1))\n\n\nplt.show()","95cc0ae0":"plt.figure(figsize=(12, 6))\n\nplt.subplot(1, 2, 1)\nsns.barplot(x=raw_data['bathroom'], y=raw_data['rent amount (R$)'])\n\nplt.subplot(1, 2, 2)\nsns.boxplot(x=raw_data['bathroom'])\nplt.xticks(np.arange(raw_data['bathroom'].min(), raw_data['bathroom'].max(), step=1))\n\n\nplt.show()","fa4e25c8":"plt.figure(figsize=(12, 6))\n\nplt.subplot(1, 2, 1)\nsns.barplot(x=raw_data['parking spaces'], y=raw_data['rent amount (R$)'])\n\nplt.subplot(1, 2, 2)\nsns.boxplot(x=raw_data['parking spaces'])\nplt.xticks(np.arange(raw_data['parking spaces'].min(), raw_data['parking spaces'].max(), step=1))\n\n\nplt.show()","59255a3d":"plt.figure(figsize=(18, 6))\n\nsns.regplot(x=raw_data['fire insurance (R$)'], y=raw_data['rent amount (R$)'], line_kws={'color': 'r'})\nplt.xticks(np.arange(raw_data['fire insurance (R$)'].min(), raw_data['fire insurance (R$)'].max(), step=20))\n\nplt.show()","2162018d":"furniture = raw_data['furniture'].value_counts()\npd.DataFrame(furniture)","64b0a297":"plt.figure(figsize=(11, 5))\n\nplt.subplot(1, 2, 1)\nplt.title('Furniture ratio')\nplt.pie(furniture, labels = ['not furnished', 'furnished'], colors= ['r', 'g'], \n        explode = (0, 0.1), autopct='%1.1f%%')\n\nplt.subplot(1, 2, 2)\nplt.title('Furniture vs Rent amount')\nsns.barplot(x=raw_data['furniture'], y=raw_data['rent amount (R$)'])\n\nplt.tight_layout()\nplt.show()","dcdca27e":"plt.figure(figsize=(15, 6))\n\nplt.subplot(1, 2, 1)\nplt.title('Acept or not acept')\nsns.countplot(raw_data['city'], hue=raw_data['animal'])\n\nplt.subplot(1, 2, 2)\nplt.title('Boxplot')\nsns.boxplot(x=raw_data['rent amount (R$)'], y=raw_data['animal'])\nplt.xticks(np.arange(raw_data['rent amount (R$)'].min(), raw_data['rent amount (R$)'].max(), step=5000))\n\nplt.tight_layout()\nplt.show()","6dffafc6":"plt.figure(figsize=(15, 6))\n\nplt.subplot(1, 2, 1)\nsns.regplot(x=raw_data['hoa (R$)'], y=raw_data['rent amount (R$)'], line_kws={'color': 'r'})\nplt.xscale('log')\nplt.yscale('log')\n\nplt.show()","e3b9e7ad":"plt.figure(figsize=(15, 6))\n\nplt.subplot(1, 2, 1)\nsns.regplot(x=raw_data['property tax (R$)'], y=raw_data['rent amount (R$)'], line_kws={'color': 'r'})\nplt.xscale('log')\nplt.yscale('log')\n\nplt.show()","1f0ec39d":"plt.figure(figsize=(15, 6))\n\nplt.subplot(1, 2, 1)\nsns.regplot(x=raw_data['area'], y=raw_data['rent amount (R$)'], line_kws={'color': 'r'})\nplt.xscale('log')\nplt.yscale('log')\n\nplt.show()","3582cd90":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom skopt import gp_minimize\n\n# ML models\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom xgboost import XGBRegressor","423d661d":"plt.figure(figsize=(8, 6))\n\nsns.boxplot(raw_data['city'], raw_data['rent amount (R$)'])\n\nplt.show()","d3d7e224":"# Grouping cities\ncity_group = raw_data.groupby('city')['rent amount (R$)']","7fcaafed":"# Quantile 1 = 25% of data\nQ1 = city_group.quantile(.25)\nQ3 = city_group.quantile(.75)\n\n# IQR = Interquartile Range\nIQR = Q3 - Q1\n\n# Limits\nlower = Q1 - 1.5 * IQR\nupper = Q3 + 1.5 * IQR","c30e7868":"# DataFrame to store the new data\nnew_data = pd.DataFrame()\n\nfor city in city_group.groups.keys():\n    is_city = raw_data['city'] == city\n    accepted_limit = ((raw_data['rent amount (R$)'] >= lower[city]) &\n                     (raw_data['rent amount (R$)'] <= upper[city]))\n    \n    select = is_city & accepted_limit\n    data_select = raw_data[select]\n    new_data = pd.concat([new_data, data_select])\n\nnew_data.head()","117bab17":"plt.figure(figsize=(15, 6))\n\nplt.subplot(1, 2, 1)\nplt.title('With outliers')\nsns.boxplot(raw_data['city'], raw_data['rent amount (R$)'])\n\nplt.subplot(1, 2, 2)\nplt.title('Without outliers')\nsns.boxplot(new_data['city'], new_data['rent amount (R$)'])\n\nplt.tight_layout(pad=5.0)\nplt.show()","83ce8109":"catTransformer = Pipeline(steps=[\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])","46b39f78":"numTransformer = Pipeline(steps=[\n    ('scaler', StandardScaler())\n])","6b3c9819":"cols = ['city', 'rooms', 'bathroom', 'parking spaces', 'fire insurance (R$)',\n        'furniture']\n\nX = new_data[cols]\nX.head()","cef7992d":"for col in X:\n    X = X.astype('category')\nX['fire insurance (R$)'] = X['fire insurance (R$)'].astype('int64')\nX.info()","23def467":"y = new_data['rent amount (R$)']\ny","fede293d":"numFeatures = X.select_dtypes(include=['int64', 'float64']).columns\nnumFeatures","e2851fe3":"catFeatures = X.select_dtypes(include=['category']).columns\ncatFeatures","d05b69a7":"preprocessor = ColumnTransformer(\n    transformers=[\n        ('numeric', numTransformer, numFeatures),\n        ('categoric', catTransformer, catFeatures)\n    ])","9ce99a6f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)","890228c4":"regressors = [\n    DecisionTreeRegressor(),\n    RandomForestRegressor(),\n    SVR(),\n    LinearRegression(),\n    XGBRegressor()\n]","d53b9d2b":"# Seed\nnp.random.seed(42)\n\nfor regressor in regressors:\n    \n    estimator = Pipeline(steps=[\n        ('preprocessor', preprocessor),\n        ('regressor', regressor)\n    ])\n    \n    estimator.fit(X_train, y_train)\n    preds = estimator.predict(X_test)\n    \n    print(regressor)\n\n    print('MAE:', mean_absolute_error(y_test, preds))\n    print('RMSE:', np.sqrt(mean_squared_error(y_test, preds)))\n    print('R2:', r2_score(y_test, preds))\n    print('-' * 40)","0abb91bb":"pipe = Pipeline(steps=[('preprocessor', preprocessor),\n                       ('model', XGBRegressor(random_state=42))\n                      ])","dc60eb51":"params = {\n        'model__learning_rate': np.arange(0.01, 0.1),\n        'model__n_estimators': np.arange(100, 1000, step=50),\n        'model__max_depth': np.arange(1, 20, step=2),\n        'model__subsample': [0.8, 0.9, 1],\n        'model__colsample_bytree': [0.8, 0.9, 1],\n        'model__gamma': [0, 1, 3, 5]\n         }","70a3aed6":"estimator = RandomizedSearchCV(pipe, cv=20, param_distributions=params, n_jobs=-1)\nestimator.fit(X_train,y_train)","81f32b30":"estimator.best_params_","2e580eda":"estimator = XGBRegressor(colsample_bytree=0.8,\n                           gamma=0, \n                           learning_rate=0.01, \n                           max_depth=5, \n                           n_estimators=950, \n                           subsample=1)","1d77fe8e":"model = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', estimator)\n])","a80fa99a":"model.fit(X_train, y_train)","40335f4e":"preds = model.predict(X_test)","16d908dc":"print('MAE:', mean_absolute_error(y_test, preds))\nprint('RMSE:', np.sqrt(mean_squared_error(y_test, preds)))\nprint('R2:', r2_score(y_test, preds))","e7ee9b4a":"plt.figure(figsize=(12, 8))\n\nsns.distplot(y_test, hist=False, color='b', label ='Actual')\nsns.distplot(preds, hist=False, color='r', label = 'Predicted')\n\nplt.show()","4e3d9af3":"from joblib import dump, load\ndump(model, 'model_2.joblib')\nmodel = load('model_2.joblib')","1f7d3988":"#### Shape","284c4d3a":"## Analysis of *not so important* features","b654f063":"#### Select FEATURES (X)","5ee0386d":"There doesn't seem to be much correlation between the **area** and the **rent price**.","1cdb9112":"As previously stated, there are several outliers after **9.500,00**.","f787ead8":"### Animal","eba27b24":"### Property tax","3304fe77":"Although the model predicted higher values in the range of 2.000,00, it seems to do a good job of forecasting the other values.","81904f0c":"#### Categorical columns handler","8e7ede49":"### Rent amount (R$) - Analysis","6831ea90":"#### Select categorical features","35f858ec":"### Parking spaces","3e491271":"#### Boxplot","60b74563":"The number of rooms usually varies between 1 and 4, and we noticed that the more rooms, the higher the rent, which is already expected. The value of 10 rooms are strange...","dc7996e8":"Disregarding outliers:\n- **S\u00e3o Paulo**: rent amount around **500,0**0 to **12.000,00**\n- **Porto Alegre**: rent amount around **500,00** to **4.500,00**\n- **Rio de Janeiro**: rent amount around **500,00** to **7.500,00**\n- **Campinas**: rent amount around **500,00** to **5.500,00**\n- **Belo Horizonte**: rent amount around **500,00** to **9.500,00**","0f874efa":"The fact that the house **is furnished** increases **the rent amount**","382d8873":"### hoa","63703281":"#### Select numerical features","d7e9738c":"### Area","4f7cdfa4":"There doesn't seem to be much correlation between the **property tax** and the **rent price**.","0c77bb2c":"#### Histogram\n","8b609097":"## Correlations","87b720b9":"#### Train with the best model and best params ","fa5bc5d5":"As this is a continuous value forecast, I will use regression models.","bdfe2278":"Much better!\nP.S. Thanks to [Samuel Natividade](http:\/\/www.kaggle.com\/juxwzera) for the very useful notebook.","25318bab":"The value of **fire insurance** has a positive influence on **rent amount**. Most of the values are between **3,00** and **200,00**.","01d138fc":"The number of bathrooms usually varies between 1 and 6, and we noticed that the more bathrooms, the higher the rent, which is already expected. The value of 9 bathrooms are strange...","57165f06":"The number of parking spaces usually varies between 0 and 5, and we noticed that the more parking spaces, the higher the rent, which is already expected.The value starts to decrease from 7 parking spaces, something strange...","6e026881":"There is a strong asymmetric on the right (**right skew**) and most of the rent amount is between 450,00 and 3.450,00. There is a great chance that there will be several outliers in this data, and for my business knowledge, a rental costing more than R$ **12.000,00** is something strange...","173bf217":"#### Basic description","b6805e3f":"#### Fit all ML models and select best","9467f36c":"## Analysis of important features","6a4136a1":"The features are:\n* **city** - city where the property is located\n* **area** - property area\n* **rooms** - quantity of rooms\n* **bathroom** - quantity of bathrooms\n* **parking spaces** - quantity of parking spaces\n* **floor** - floor\n* **animal** - acept animals?\n* **furniture** - furniture?\n* **hoa** - Homeowners association tax\n* **property tax** - IPTU \/ property tax\n* **rent amount** - rental price\n* **fire insurance** - fire insurance\n* **total** - total value\n","f9a865f0":"### Furniture","c2bff7d0":"# Load Data","d8e448e3":"#### Histogram","fa07423a":"### rent price (R$) with outliers","62c4baa0":"#### Predictions","bae42b55":"### Train new data without outliers","9edc2517":"# Exploratory Data Analysis (EDA)","5d036bc8":"### City","74762d87":"#### Select TARGET (y)","cc533078":"#### Select TRAIN and TEST data","efe5ba43":"### Fire insurance","23e4089d":"# Objective","5e372464":"### Remove outliers","2591d714":"#### NULL values","e1b659dd":"## RandomizedSearchCV with the best model (XGBRegressor)","92e804fb":"# Testing ML models","d36102cc":"#### Evaluate","4f5b8f8e":"#### List of ML models","8613bc1a":"Maximum rental prices do not usually exceed **15.000**, but with outliers they reach **40.000**.","05ac5196":"### Bathroom\n","a109c8b8":"# Save model","494324fb":"There doesn't seem to be much correlation between the **hoa** and the **rent price**.","3eb7a6f7":"### Comparation","a645943f":"There are about 3x more unfurnished houses than furnished","b1b97db7":"### Select quantiles","da39c13b":"As it is a Kaggle dataset, it is normal to have no null data.","a89820e4":"In this specific case, **XGBoost** showed better results compared to the other models.","432f09aa":"#### Handling numerical and categorical features","b41085c5":"In this notebook, you must do an exploratory data analysis , feature engineering, data treatment and application of Machine Learning models to predict the **RENT AMOUNT (R$)**.\nI will follow this script:\n1. Perform an EDA in order to gain insights and choose the best features;\n2. Preprocess the data;\n3. Test models and choose the best one;\n4. Perform the final test with the chosen model.","2297a9f9":"#### Numerical columns handler","b1954fe3":"### rooms","ff4be805":"#### Basic info","e6991488":"#### Boxplot","e1e10057":"rents in these 4 cities have asymmetry on the right and do not usually exceed **2.500,00**.","d1e82447":"In this first moment, I will remove the outliers from the data using the interquartile range.","533f2303":"Whether or not to accept animals in the price has a small influence on the increase the **rent amount**.","6ea1a11e":"In S\u00e3o Paulo, the data remains with right skew, and most of the rental values **exceed 2,500.00** to almost **4,500.00**.","0a71da73":"The features that most positively influence the **rent amount** (correlation> = 0.5) are:\n* rooms\n* bathroom\n* parking spaces\n* fire insurance (R$)\n\nI will analyze them better below:"}}