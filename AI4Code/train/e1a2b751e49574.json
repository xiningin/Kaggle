{"cell_type":{"d8d22321":"code","1b774b73":"code","567d616e":"code","dee91293":"code","d3b3acf2":"code","bc0cdd90":"code","56aad3dc":"code","ead5fb38":"code","908e319f":"code","333bcc30":"code","646e2598":"code","ea08d632":"markdown","ee34f8ea":"markdown","cce0da7c":"markdown"},"source":{"d8d22321":"#Loading the packages\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import MaxPooling2D\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom keras.preprocessing.image import ImageDataGenerator","1b774b73":"#Creating Model\nmodel = Sequential([\n\n        #Adding 5 Convolution Layers\n        Conv2D(16, (3,3), activation='relu', input_shape=(300,300,3)),\n        MaxPooling2D(2,2),\n\n        Conv2D(32, (3,3), activation='relu'),\n        MaxPooling2D(2,2),\n\n        Conv2D(64, (3,3), activation='relu'),\n        MaxPooling2D(2,2),\n\n        Conv2D(64, (3,3), activation='relu'),\n        MaxPooling2D(2,2),\n\n        Conv2D(64, (3,3), activation='relu'),\n        MaxPooling2D(2,2),\n\n        #Flattenning the Pooled Parameters\n        Flatten(),\n\n        #Creating Fully Connected Networks of 512 Neurons followed by 128 Neurons\n        Dense(512, activation='relu'),\n        Dense(128, activation='relu'),\n\n\n        #Final Prediction is Binary: NORMAL or PNEUMONIA, so using single output neuron with sigmoid funtion\n        #to give output in 0-1 where 0 for NORMAL and 1 for PNEUMONIA\n        Dense(1, activation='sigmoid')\n    ])\n\n#Compiling the model\nmodel.compile(\n    optimizer = 'adam',\n    loss = 'binary_crossentropy',\n    metrics = [\n        'accuracy',\n        tf.keras.metrics.Precision(name='precision'),\n        tf.keras.metrics.Recall(name='recall')\n    ]\n)","567d616e":"model.summary()","dee91293":"#Getting the dataset ready to train the model\n\n#Rescaling image pixel values in 0-1\ntraindatagen = ImageDataGenerator(rescale = 1\/255)\nvaldatagen = ImageDataGenerator(rescale = 1\/255)\n\n\n#The generators below takes the path to a directory & generates batches of augmented data.\n#Target size will rescale the images with different shapes to the same shape\n\ntrain_generator = traindatagen.flow_from_directory(\n    '..\/input\/chest-xray-pneumonia\/chest_xray\/train\/',\n    target_size = (300,300),\n    batch_size = 64,\n    class_mode = 'binary'\n)\n\nvalidation_generator = valdatagen.flow_from_directory(\n    '..\/input\/chest-xray-pneumonia\/chest_xray\/test\/',\n    target_size = (300, 300),\n    batch_size = 64,\n    class_mode = 'binary'\n)","d3b3acf2":"ncount = len([name for name in os.listdir('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL')])\npcount = len([name for name in os.listdir('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA')])\n\nprint('PNUEMONIA Images:', pcount)\nprint('NORMAL Images:', ncount)","bc0cdd90":"#Setting the classweights to remove the imbalancement in the dataset\nclass_weight = {0: ((ncount+pcount)\/ncount)\/2 ,1: ((ncount+pcount)\/pcount)\/2}\nprint('Weight for Class NORMAL:', class_weight[0])\nprint('Weight for Class PNEUMONIA:', class_weight[1])","56aad3dc":"checkpoint_cb = tf.keras.callbacks.ModelCheckpoint(\"chest-xray-model.h5\",\n                                                    save_best_only=True)\n\nearly_stopping_cb = tf.keras.callbacks.EarlyStopping(patience=10,\n                                                     restore_best_weights=True)\n\n# This function keeps the learning rate at 0.001 for the first ten epochs\n# and decreases it exponentially after that.\ndef scheduler(epoch):    \n    if epoch < 10:\n        return 0.001\n    else:\n        return 0.001 * tf.math.exp(0.1 * (10 - epoch))\n\nlr_scheduler = tf.keras.callbacks.LearningRateScheduler(scheduler)\n\n\ncallbacks = [checkpoint_cb, early_stopping_cb, lr_scheduler]","ead5fb38":"#Training the model\nhistory = model.fit(\n    train_generator,\n    steps_per_epoch = 10,\n    epochs = 20,\n    validation_data = validation_generator,\n    class_weight = class_weight,\n    callbacks = callbacks\n)","908e319f":"#Visualising Model's Performance\n\nfig, ax = plt.subplots(1, 4, figsize=(20,3))\nax = ax.ravel()\n\nfor i, met in enumerate(['precision','recall','accuracy', 'loss']):\n    ax[i].plot(history.history[met])\n    ax[i].plot(history.history['val_' + met])\n    ax[i].set_title('Model {}'.format(met))\n    ax[i].set_xlabel('epochs')\n    ax[i].set_ylabel(met)\n    ax[i].legend(['train', 'val'])","333bcc30":"#Loading the unseen data for evaluation\ntestdatagen = ImageDataGenerator(rescale = 1\/255)\n\ntest_generator = valdatagen.flow_from_directory(\n    '..\/input\/chest-xray-pneumonia\/chest_xray\/test\/',\n    target_size = (300, 300),\n    batch_size = 64, \n    class_mode = 'binary'\n)","646e2598":"#Evaluating the trained model\n\nresult = model.evaluate_generator(test_generator, 624)\n\nprint(\"loss at eval data:\", result[0])\nprint('accuracy at eval data:', result[1])\nprint(\"precision at eval data:\", result[2])\nprint(\"recall at eval data:\", result[3])\n","ea08d632":"Useful Link for the following cell:\n[ImageDataGenerator Class](https:\/\/keras.io\/api\/preprocessing\/image\/#imagedatagenerator-class)\n","ee34f8ea":"# **Convolutional Neural Nets for Pneumonia Detection**\n\n\n**The notebook includes:**\n* Constructing Convolutional Neural Networks Model\n* Getting the train-test datasets ready to train the model\n* Training the model\n* Evaluating and visualizing the model's performance.\n\n\nReferences:\n* Dataset: [Chest X-Ray Pneumonia](https:\/\/www.kaggle.com\/paultimothymooney\/chest-xray-pneumonia)\n* [TensorFlow Pneumonia Classification on X-rays by AmyJang](https:\/\/www.kaggle.com\/amyjang\/tensorflow-pneumonia-classification-on-x-rays\/)","cce0da7c":"Brief info about the Layers used for construction of neural network:\n\n* Conv2D: 2D convolution layer (e.g. spatial convolution over images).\n* Flatten: Flattens the input. Does not affect the batch size.\n* MaxPooling2D: Max pooling operation for 2D spatial data.\n* Dense: Just regular fully-connected Neural Nets layer.\n\nLinks for further info about arguments for the various layers:\n* [Conv2D Class](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/Conv2D)\n* [MaxPooling Class](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/MaxPool2D)\n* [Flatten Class](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/Flatten)\n* [Dense Class](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/Dense)\n"}}