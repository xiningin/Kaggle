{"cell_type":{"bde9fc2c":"code","c5608ed8":"code","36cb9271":"code","21f3b8fc":"code","7128c453":"code","17f6b0e5":"code","669277e6":"code","7b69f9cb":"code","4585b926":"code","71823472":"code","4cb62791":"code","fc5a2f7e":"code","8ef6ecec":"code","a9eaef71":"code","ff1e0f6b":"code","24f51532":"code","f529f42c":"code","475669e2":"code","429a0dba":"code","20c7d055":"code","8688dbe4":"code","ab499435":"code","17cb6771":"code","64a706cd":"code","e61b3fa1":"code","b6c7aa62":"code","9fac34bb":"code","d2595d13":"code","d08fc331":"code","32e5cc38":"code","c83e880f":"code","9a3e8b9e":"code","080cf730":"code","cd14a284":"code","6c26ab48":"code","a80aa988":"code","f4d6eecb":"code","36da2d95":"markdown","0ce8b619":"markdown","13131143":"markdown","0f647bcc":"markdown","b6cc71eb":"markdown","a21a6af2":"markdown","82b7233a":"markdown","e5ea66f0":"markdown","763771a9":"markdown","20cfd828":"markdown","22cd3d5d":"markdown","3ea8c74c":"markdown","e35fed98":"markdown","57f6e29f":"markdown","aa8f7138":"markdown","17fc820d":"markdown","831dd336":"markdown","5d23b3c8":"markdown","7aa493be":"markdown","989375ad":"markdown","e8efe275":"markdown","5bec2d34":"markdown","0b6109aa":"markdown","31c4d4b4":"markdown","6074a85e":"markdown","d99ca047":"markdown","4b7adba8":"markdown","b7e2d9d3":"markdown","c7d796f2":"markdown","c4965fe7":"markdown","3c4d40f9":"markdown","7b1f0f71":"markdown","ccc928c6":"markdown","1b061beb":"markdown","3bcdafef":"markdown","1524b8f9":"markdown","ec1a080c":"markdown","d1f407da":"markdown","c9414d91":"markdown"},"source":{"bde9fc2c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c5608ed8":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_style('darkgrid')","36cb9271":"drug = pd.read_csv('\/kaggle\/input\/drug-classification\/drug200.csv')\n\ndrug.head()","21f3b8fc":"print(drug.isna().sum())\nprint(\"------------------------\")\nprint(drug.isnull().sum())","7128c453":"print(drug.info())\nprint('===========================')\nprint(drug.describe())","17f6b0e5":"drug.Drug.value_counts()\n\nplt.figure(figsize=(9,5))\n\nsns.countplot(drug.Drug)\nplt.title('Count-Drug')\nplt.show()","669277e6":"plt.figure(figsize=(9,5))\n\nsns.countplot(drug.Sex)\nplt.title('Count-Sex')\nplt.show()","7b69f9cb":"plt.figure(figsize=(9,5))\n\nprint('Age-min: {}'.format(drug.Age.min()))\nprint('Age-max: {}'.format(drug.Age.max()))\n\nsns.distplot(drug.Age)\nplt.title('Dist-Age')\nplt.show()","4585b926":"print(drug.BP.value_counts())\n\nplt.figure(figsize=(9,5))\n\nsns.countplot(drug.BP)\nplt.title('BP-Count')\nplt.show()","71823472":"plt.figure(figsize=(9,5))\n\nprint('Na_to_K min: {}'.format(drug.Na_to_K.min()))\nprint('Na_to_K max: {}'.format(drug.Na_to_K.max()))\n\nsns.distplot(drug.Na_to_K)\nplt.title('Dist-Na_to_K')\nplt.show()","4cb62791":"print(drug.Cholesterol.value_counts())\n\nplt.figure(figsize=(9,5))\n\nsns.countplot(drug.Cholesterol)\nplt.title('Count-Cholesterol')\nplt.show()\n","fc5a2f7e":"plt.figure(figsize=(9,5))\n\nsns.swarmplot(x='Drug', y='Na_to_K', data=drug)\nplt.title('Drug-Na_to_K')\nplt.show()\n\nprint('min DrugY: {}'.format(drug.Na_to_K[drug.Drug == 'DrugY'].min()))\n\n\n# An important characteristic for DrugY","8ef6ecec":"plt.figure(figsize=(9,5))\n\nsns.swarmplot(x='Drug', y='Age', data=drug)\nplt.title('Drug-Age')\nplt.show()\n\n#less important","a9eaef71":"DrugSex = drug.groupby(['Drug', 'Sex']).size().reset_index(name='Count')\n\nplt.figure(figsize=(9,5))\n\nsns.barplot(x='Drug', y='Count', hue='Sex', data=DrugSex)\nplt.title('Drug-Sex')\nplt.show()\n\n# Nothing important","ff1e0f6b":"DrugBP = drug.groupby(['Drug', 'BP']).size().reset_index(name='Count')\n\nplt.figure(figsize=(9,5))\n\nsns.barplot(x='Drug', y='Count', hue='BP', data=DrugBP)\nplt.title('Drug-BP')\nplt.show()\n\n\n# Drugs A and B are only used by people with high blood pressure.\n# Drug C is only used by people with low blood pressure.\n# Drug X is not used for patients with high blood pressure.\n","24f51532":"DrugChol = drug.groupby(['Drug', 'Cholesterol']).size().reset_index(name='Count')\n\nplt.figure(figsize=(9,5))\n\nsns.barplot(x='Drug', y='Count', hue='Cholesterol', data=DrugChol)\nplt.title('Drug-Cholesterol')\nplt.show()\n\n# Drug C is only used for patients with high cholesterol.\n# The drugs (A, B, and Y) appear to be balanced.\n# Drug X is used in both cases, but more in patients with high cholesterol.","f529f42c":"plt.figure(figsize=(13,10))\n\nplt.subplot(211)\nsns.swarmplot(x='Drug', y='Na_to_K', hue='Cholesterol', data=drug)\nplt.title('Drug-Na_to_K-Cholesterol')\nplt.subplot(212)\nsns.swarmplot(x='Drug', y='Na_to_K', hue='BP', data=drug)\nplt.title('Drug-Na_to_K-BP')\n\nplt.show()\n\n\n# Drug C is used only for people with high cholesterol and low blood pressure.\n# We create a new column where the value will be 0 if Na_to_K is less than 15.015 and 1 if it is greater than this value.\n# Na_to_k is very important\n","475669e2":"drug['GreaterNa15'] = [1 if i >= 15.015 else 0 for i in drug.Na_to_K]\n\ndrug.head()","429a0dba":"DrugGreater = drug.groupby(['Drug','GreaterNa15']).size().reset_index(name='Count')\n\nplt.figure(figsize=(9,5))\n\nsns.barplot(x='Drug', y='Count', hue='GreaterNa15', data = DrugGreater)\nplt.title('Drug-GreaterNa15')\nplt.show()","20c7d055":"from sklearn.impute import SimpleImputer\n\ndef impute(value, imp, dta):\n    \n    for i, j in zip(value, imp):\n        \n        impt = SimpleImputer(missing_values=i, strategy='constant', fill_value=j)\n        \n        impt.fit(drug[dta][:, np.newaxis])\n        \n        drug[dta] = impt.transform(drug[dta][:, np.newaxis])\n        \n    drug[dta] = drug[dta].astype(int)\n    \n    ","8688dbe4":"feature = ['BP', 'Cholesterol']\nVimp = [[0,1,2],[0,1]]\nVal = [['LOW','NORMAL','HIGH'],['NORMAL', 'HIGH']]\n\ndef imp(value, imput, feature):\n    \n    for i, j in enumerate(feature):\n        \n        impute(value[i], imput[i], j)\n    \nimp(Val, Vimp, feature)","ab499435":"drug.head()","17cb6771":"from sklearn.preprocessing import LabelEncoder\n\ndef Encoder(feature):\n    \n    le = LabelEncoder()\n    \n    drug[feature] = le.fit_transform(drug[feature])\n","64a706cd":"Encoder('Drug')\n\ndrug.head()","e61b3fa1":"drug.info()","b6c7aa62":"def boxplot(dta):\n    \n    plt.figure(figsize=(9,5))\n    \n    sns.boxplot(drug[dta])\n    plt.title(dta)\n    plt.show()\n    \nboxplot('Na_to_K')\n\n# Outliers","9fac34bb":"# Removing outliers\nfor i in range(2):\n    \n    mn = np.min(drug.Na_to_K)\n    mx = np.max(drug.Na_to_K)\n\n    Q1 = drug.Na_to_K.quantile(0.25)\n    Q3 = drug.Na_to_K.quantile(0.75)\n    median = drug.Na_to_K.median()\n    IQR = Q3 - Q1\n\n    Qinf = Q1 - 1.5*IQR\n    if Qinf < mn:\n\n        Qinf = mn\n\n    Qsup = Q3 + 1.5*IQR\n    if Qsup > mx:\n\n        Qsup = mx\n\n    drug = drug[(drug.Na_to_K >= Qinf) & (drug.Na_to_K <= Qsup)]\n\n    print('Min: {}'.format(mn))\n    print('Max: {}'.format(mx))\n    print('Quantile 25%: {}'.format(Q1))\n    print('Median: {}'.format(median))\n    print('Quantile 75%: {}'.format(Q3))\n    print('Interquartile range: {}'.format(IQR))\n    print('Lower quantile: {}'.format(Qinf))\n    print('Upper quantile: {}'.format(Qsup))\n    print('Shape: {}'.format(drug.shape))\n\n    boxplot('Na_to_K')","d2595d13":"frame = [drug.Age, drug.BP, drug.Cholesterol, drug.Na_to_K, drug.GreaterNa15]\n\nX_data = pd.concat(frame, axis=1)\ny = drug.Drug.copy()\n","d08fc331":"# Data scaling\n\nX = X_data \/ np.mean(X_data)\n\nX.head()","32e5cc38":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=23)\n\nlr = LogisticRegression(penalty='l2', C=0.67, solver='newton-cg', multi_class='multinomial', max_iter=100, random_state=34)\nlr.fit(X_train, y_train)\n","c83e880f":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\ndef ClasReport(model, y, X):\n    \n    pred = model.predict(X)\n    \n    cm_lr = confusion_matrix(y, pred)\n    \n    print(classification_report(y, pred))\n    \n    sns.heatmap(cm_lr, annot=True, cbar=False, cmap='Blues')\n    \n    plt.show()","9a3e8b9e":"print('\\t\\t\\tScore TEST: {}'.format(lr.score(X_test, y_test)))\nClasReport(lr, y_test, X_test)\n\nprint('\\t\\t======================================')\n\nprint()\nprint('\\t\\t\\tScore TRAIN: {}'.format(lr.score(X_train, y_train)))\nprint(lr.score(X_train, y_train))\nClasReport(lr, y_train, X_train)","080cf730":"from sklearn.model_selection import cross_val_score\n\ndef val_cross(model, _X, _y):\n\n    print('5 CV:\\n{}'.format(cross_val_score(model, _X, _y, cv=5)))\n    print('Total: {}'.format(sum(cross_val_score(model, _X, _y, cv=5))\/5))\n\n    print('4 CV:\\n{}'.format(cross_val_score(model, _X, _y, cv=4)))\n    print('Total: {}'.format(sum(cross_val_score(model, X, y, cv=4))\/4))\n\n    print('3 CV:\\n{}'.format(cross_val_score(model, _X, _y, cv=3)))\n    print('Total: {}'.format(sum(cross_val_score(model, _X, _y, cv=3))\/3))\n    \nval_cross(lr, X, y)","cd14a284":"from imblearn.combine import SMOTETomek\n\nSmoteT = SMOTETomek(sampling_strategy='auto', random_state=0)\n\nX_res, y_res = SmoteT.fit_sample(X, y)\n\nprint('X-X_res shape: {}-{}'.format(X.shape, X_res.shape))\nprint('y-y_res shape: {}-{}'.format(y.shape, y_res.shape))","6c26ab48":"val_cross(lr, X_res, y_res)","a80aa988":"from imblearn.combine import SMOTEENN\n\nSmoteENN = SMOTEENN(sampling_strategy='auto', random_state=0)\n\nXres, yres = SmoteENN.fit_sample(X, y)\n\nprint('X-Xres shape: {}-{}'.format(X.shape, Xres.shape))\nprint('y-yres shape: {}-{}'.format(y.shape, yres.shape))","f4d6eecb":"val_cross(lr, Xres, yres)","36da2d95":"## Graph Drug->Cholesterol","0ce8b619":"# Analysis all with Drug","13131143":"## We can create a new variable with the information from the Na_to_K column","0f647bcc":"### cross_val_score with SMOTETomek","b6cc71eb":"## Graph Cholesterol->Count","a21a6af2":"## Graph Drug->Count","82b7233a":"# Scaling Data\n## data = data \/ mean(data)","e5ea66f0":"## Graph Drug->Age","763771a9":"2. swing with SMOTEENN","20cfd828":"### Encoder Drug","22cd3d5d":"## Removing outliers\n#### repeat the process as many times as necessary","3ea8c74c":"# We balance the data","e35fed98":"## Print metrics","57f6e29f":"# Conclusion","aa8f7138":"# WE LOOK FOR RELATIONSHIPS BETWEEN VARIABLES","17fc820d":"# train_test_split and LogisticRegresion(parameters)","831dd336":"# Graph Boxplot\n### we look for outliers","5d23b3c8":"# Cross_val_score","7aa493be":"## Data Characteristics","989375ad":"## Graph Sex->Count","e8efe275":"# Label Encoder","5bec2d34":"### 0 <- if it is less than 15,015\n### 1 <- if it is greater than 15,015","0b6109aa":"## Classification metric functions","31c4d4b4":"## Import libraries to graph","6074a85e":"## Figure 1. Graph Drug->Na_to_K with Cholesterol\n## Figure 2. Graph Drug->Na_to_K with BP","d99ca047":"## Graph New Column Drug->GreaterNa15","4b7adba8":"# Imputer data","b7e2d9d3":"1. swing with SMOTETomek","c7d796f2":"> As we can see, the probabilistic model (logistic regression) gives us a very good performance, of course entering the correct parameters.\n\n> We rule out over-adjustment, due to the minimum difference in the training and validation metrics, and we can also observe that balancing the data, it maintains its performance; we can verify this in the cross-validation scores for these data.","c4965fe7":"### run only once","3c4d40f9":"## Graph BP->Count","7b1f0f71":"## Graph Drug->Na_to_K","ccc928c6":"## Graph Na_to_K->Dist","1b061beb":"## Graph Drug->Sex","3bcdafef":"## Graph Drug->BP","1524b8f9":"# We prepare data for model training\n#### -without the sex column because it does not have important information","ec1a080c":"## Graph Age->Dist","d1f407da":"### Values we use to impute","c9414d91":"### cross_val_score with SMOTEENN"}}