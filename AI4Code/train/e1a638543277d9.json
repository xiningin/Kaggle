{"cell_type":{"431e9562":"code","f66d17d5":"code","99cc8dc0":"code","4ba43b86":"code","0932bfc3":"code","83b54fd4":"code","ed4fa83d":"code","fc64266b":"code","b32ff492":"markdown","60a3b315":"markdown"},"source":{"431e9562":"#@title Input protein sequence here before you \"Run all\"\n\nprotein = 'MLILISPAKTLDYQSPLTTTRYTLPELLDNSQQLIHEARKLTPPQISTLMRISDKLAGINAARFHDWQPDFTPANARQAILAFKGDVYTGLQAETFSEDDFDFAQQHLRMLSGLYGVLRPLDLMQPYRLEMGIRLENARGKDLYQFWGDIITNKLNEALAAQGDNVVINLASDEYFKSVKPKKLNAEIIKPVFLDEKNGKFKIISFYAKKARGLMSRFIIENRLTKPEQLTGFNSEGYFFDEDSSSNGELVFKRYEQR' #@param {type:\"string\"}\n# remove whitespaces\nprotein=protein.join(protein.split())\nwith open(\"q.fasta\", \"w\") as text_file:\n    text_file.write(\">1\\n%s\" % protein)\njobname = 'default' #@param {type:\"string\"}\n# remove whitespaces\njobname=\"\".join(jobname.split())","f66d17d5":"#@title Install dependencies\n%%bash\nif [ -e AF2_READY ]; then\n  exit 0\nfi\n# install dependencies\napt-get -qq -y update 2>&1 1>\/dev\/null\napt-get -qq -y install jq curl zlib1g gawk 2>&1 1>\/dev\/null\n\npip -q install biopython 2>&1 1>\/dev\/null\npip -q install dm-haiku 2>&1 1>\/dev\/null\npip -q install ml-collections 2>&1 1>\/dev\/null\npip -q install mock 2>&1 1>\/dev\/null\npip -q install py3Dmol 2>&1 1>\/dev\/null\n\n# download model\ngit clone https:\/\/github.com\/deepmind\/alphafold.git --quiet\nmv alphafold alphafold_\nmv alphafold_\/alphafold .\n\n# download model params (~1 min)\nwget -qnc https:\/\/storage.googleapis.com\/alphafold\/alphafold_params_2021-07-14.tar\nmkdir params\ntar -xf alphafold_params_2021-07-14.tar -C params\/\nrm alphafold_params_2021-07-14.tar\n\n# install openmm for refinement\nwget -qnc https:\/\/git.scicore.unibas.ch\/schwede\/openstructure\/-\/raw\/7102c63615b64735c4941278d92b554ec94415f8\/modules\/mol\/alg\/src\/stereo_chemical_props.txt\nmv stereo_chemical_props.txt alphafold\/common\/\nwget -qnc https:\/\/repo.anaconda.com\/miniconda\/Miniconda3-latest-Linux-x86_64.sh\nbash Miniconda3-latest-Linux-x86_64.sh -bfp \/usr\/local 2>&1 1>\/dev\/null\nconda install -y -q -c conda-forge openmm=7.5.1 python=3.7 pdbfixer 2>&1 1>\/dev\/null\n(cd \/usr\/local\/lib\/python3.7\/site-packages; patch -s -p0 < \/content\/alphafold_\/docker\/openmm.patch)\n\ntouch AF2_READY","99cc8dc0":"#@title Build MSA\n\n%%bash\n# build msa using the MMseqs2 search server\nID=$(curl -s -F q=@q.fasta -F mode=all https:\/\/a3m.mmseqs.com\/ticket\/msa | jq -r '.id')\nSTATUS=$(curl -s https:\/\/a3m.mmseqs.com\/ticket\/${ID} | jq -r '.status')\nwhile [ \"${STATUS}\" == \"RUNNING\" ]; do\n    STATUS=$(curl -s https:\/\/a3m.mmseqs.com\/ticket\/${ID} | jq -r '.status')\n    sleep 1\ndone\nif [ \"${STATUS}\" == \"COMPLETE\" ]; then\n    curl -s https:\/\/a3m.mmseqs.com\/result\/download\/${ID}  > result.tar.gz\n    tar xzf result.tar.gz\n    tr -d '\\000' < uniref.a3m > query.a3m\nelse\n    echo \"MMseqs2 server did not return a valid result.\"\n    exit 1\nfi\necho \"Found $(grep -c \">\" query.a3m) sequences (after redundacy filtering)\"","4ba43b86":"#@title Setup model\n\n# the following code is written by Sergey Ovchinnikov\n# setup the model\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\nimport tensorflow as tf\nimport numpy as np\nimport pickle\nimport py3Dmol\nimport matplotlib.pyplot as plt\nimport sys\nsys.path.insert(0, '\/usr\/local\/lib\/python3.7\/site-packages\/')\nfrom alphafold.common import protein\nfrom alphafold.data import pipeline\nfrom alphafold.data import templates\nfrom alphafold.model import data\nfrom alphafold.model import config\nfrom alphafold.model import model\nfrom alphafold.relax import relax\ntf.get_logger().setLevel('ERROR')\nmodel_runners = {}\nmodels = [\"model_1\"] #,\"model_2\",\"model_3\",\"model_4\",\"model_5\"]\nfor model_name in models:\n  model_config = config.model_config(model_name)\n  model_config.data.eval.num_ensemble = 1\n  model_params = data.get_model_haiku_params(model_name=model_name, data_dir=\".\")\n  model_runner = model.RunModel(model_config, model_params)\n  model_runners[model_name] = model_runner\n\ndef mk_mock_template(query_sequence):\n  # since alphafold's model requires a template input\n  # we create a blank example w\/ zero input, confidence -1\n  ln = len(query_sequence)\n  output_templates_sequence = \"-\"*ln\n  output_confidence_scores = np.full(ln,-1)\n  templates_all_atom_positions = np.zeros((ln, templates.residue_constants.atom_type_num, 3))\n  templates_all_atom_masks = np.zeros((ln, templates.residue_constants.atom_type_num))\n  templates_aatype = templates.residue_constants.sequence_to_onehot(output_templates_sequence,\n                                                                    templates.residue_constants.HHBLITS_AA_TO_ID)\n  template_features = {'template_all_atom_positions': templates_all_atom_positions[None],\n                       'template_all_atom_masks': templates_all_atom_masks[None],\n                       'template_sequence': [f'none'.encode()],\n                       'template_aatype': np.array(templates_aatype)[None],\n                       'template_confidence_scores': output_confidence_scores[None],\n                       'template_domain_names': [f'none'.encode()],\n                       'template_release_date': [f'none'.encode()]}\n  return template_features\n\ndef predict_structure(prefix, feature_dict, model_runners, do_relax=True, random_seed=0):  \n  \"\"\"Predicts structure using AlphaFold for the given sequence.\"\"\"\n\n  # Run the models.\n  plddts = {}\n  for model_name, model_runner in model_runners.items():\n    processed_feature_dict = model_runner.process_features(feature_dict, random_seed=random_seed)\n    prediction_result = model_runner.predict(processed_feature_dict)\n    unrelaxed_protein = protein.from_prediction(processed_feature_dict,prediction_result)\n    unrelaxed_pdb_path = f'{prefix}_unrelaxed_{model_name}.pdb'\n    plddts[model_name] = prediction_result['plddt']\n\n    print(f\"{model_name} {plddts[model_name].mean()}\")\n\n    with open(unrelaxed_pdb_path, 'w') as f:\n      f.write(protein.to_pdb(unrelaxed_protein))\n\n    if do_relax:\n      # Relax the prediction.\n      amber_relaxer = relax.AmberRelaxation(max_iterations=0,tolerance=2.39,\n                                            stiffness=10.0,exclude_residues=[],\n                                            max_outer_iterations=20)      \n      relaxed_pdb_str, _, _ = amber_relaxer.process(prot=unrelaxed_protein)\n      relaxed_pdb_path = f'{prefix}_relaxed_{model_name}.pdb'\n      with open(relaxed_pdb_path, 'w') as f: f.write(relaxed_pdb_str)\n\n  return plddts","0932bfc3":"#@title Predict structure\na3m_lines = \"\".join(open(\"query.a3m\",\"r\").readlines())\nmsa, deletion_matrix = pipeline.parsers.parse_a3m(a3m_lines)\nquery_sequence = msa[0]\n\nfeature_dict = {\n    **pipeline.make_sequence_features(sequence=query_sequence,\n                                      description=\"none\",\n                                      num_res=len(query_sequence)),\n    **pipeline.make_msa_features(msas=[msa],deletion_matrices=[deletion_matrix]),\n    **mk_mock_template(query_sequence)\n}\nplddts = predict_structure(jobname,feature_dict,model_runners)","83b54fd4":"#@title Plot LDDT per residue\n# confidence per position\nplt.figure(dpi=100)\nfor model,value in plddts.items():\n  plt.plot(value,label=model)\nplt.legend()\nplt.ylim(0,100)\nplt.ylabel(\"predicted LDDT\")\nplt.xlabel(\"positions\")\nplt.show()\nplt.savefig(jobname+\"_relaxed_model_1.png\")","ed4fa83d":"#@title Show 3D structure\np = py3Dmol.view(js='https:\/\/3dmol.org\/build\/3Dmol.js')\np.addModel(open(jobname+\"_relaxed_model_1.pdb\",'r').read(),'pdb')\np.setStyle({'cartoon': {'color':'spectrum'}})\np.zoomTo()\np.show()","fc64266b":"#@title Download result\n!tar cfz result.tar.gz $jobname\"_relaxed_model_1.pdb\" $jobname\"_relaxed_model_1.png\"\nfrom google.colab import files\nfiles.download('result.tar.gz')","b32ff492":"\nEasy to use version of AlphaFold 2 (Jumper et al. 2021, Nature) using an API hosted at the S\u00f6dinglab based on the MMseqs2 server (Mirdita et al. 2019, Bioinformatics) for the multiple sequence alignment creation. \n\n**Quickstart**\n1. Change the runtime type to GPU at \"Runtime\" -> \"Change runtime type\" (improves speed)\n2. Paste your protein sequence in the input field below\n3. Press \"Runtime\" -> \"Run all\"\n4. The pipeline has 8 steps. The currently running steps is indicated by a circle with a stop sign next to it. \n\n**Result**\n\nWe produce two result files (1) a PDB formated structure and (2) a plot of the model quality. At the end of the computation a download modal box will pop with a `result.tar.gz` file.\n\n**Troubleshooting**\n* Try to restart the session \"Runntime\" -> \"Factory reset runtime\"\n* Check your input sequence \n\n\n**Limitations**\n* MSAs: MMseqs2 might not find as many hits compared to HHblits\/HMMer searched against BFD and Mgnify.\n* Templates: Currently we do not use template information. But this is work in progress. \n* Computing resources: MMseqs2 is fast and we can probably handle >20k requests per day but it is not limitless. \n* It uses only one AF2 model followed by Amber Relaxation.\n\nFor best results, we recommend using the full pipeline: https:\/\/github.com\/deepmind\/alphafold\n\nMost of the python code was written by Sergey Ovchinnikov (@sokrypton). The API is hosted at the S\u00f6dinglab (@SoedingL) and maintained by Milot Mirdita (@milot_mirdita). Martin Steinegger (@thesteinegger) integrated everything.\n\n","60a3b315":"Original source: https:\/\/twitter.com\/thesteinegger\/status\/1416826734322749445?s=28\n\nhttps:\/\/t.co\/WwSN5KE1ZE?amp=1\n\nNotebook is not adapted to kaggle . \n\n# Protein structure prediction with AlphaFold2 and MMseqs2"}}