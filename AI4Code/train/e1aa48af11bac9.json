{"cell_type":{"5b6b381c":"code","2fd7fd5f":"code","234b5a2f":"code","3958fa57":"code","f4604236":"code","41355c04":"code","eab1e567":"code","d7f737c5":"code","029fbb03":"code","2be5f913":"code","fc45037d":"code","5ca700bd":"code","871b1a45":"code","505f756c":"code","18e0edb2":"code","79217d55":"code","659934b9":"code","25f5d531":"code","7aebf8fc":"code","1ec86e2d":"code","fcea310b":"code","e44d034f":"code","c86b15e6":"markdown","2529fdf0":"markdown","2f3ba6d5":"markdown","e1221f5c":"markdown","e353af74":"markdown","4d5f0204":"markdown","be117799":"markdown","47c432c6":"markdown","77291ccd":"markdown","902840d4":"markdown","759012f0":"markdown","a5d4f489":"markdown","62bd2235":"markdown"},"source":{"5b6b381c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n #   for filename in filenames:\n       # print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2fd7fd5f":"import matplotlib.pyplot as plt  #Visualization\nimport plotly.express as px #Visualization \n#!pip install pmdarima\nfrom pmdarima import auto_arima #Predictions\nimport plotly.graph_objs as go\n\nfrom statsmodels.tsa.arima_model import ARIMA\nimport warnings\nwarnings.filterwarnings('ignore')","234b5a2f":"df = pd.read_csv('..\/input\/stock-market-dataset\/stocks\/AAPL.csv') \ndf","3958fa57":"df.set_index('Date',drop=False, inplace=True)\ndf.tail()","f4604236":"df.describe()","41355c04":"fig_open = px.line(data_frame=df, x='Date', y=['Open'])\n\nfig_open.update_yaxes( # the y-axis is in dollars\n    tickprefix=\"$\", showgrid=False, title='Open Price')\nfig_open.update_xaxes(\n    title = 'Date')\n\nfig_open.show()","eab1e567":"fig_close = px.line(data_frame=df, x='Date', y=['Close'])\n\nfig_close.update_yaxes( # the y-axis is in dollars\n    tickprefix=\"$\", showgrid=False, title='Close Price')\nfig_close.update_xaxes(\n    title = 'Date')\n\nfig_close.show()","d7f737c5":"df_lastyears = df.loc['2015-01-02':]\ndf_lastyears.tail()","029fbb03":"fig_close_2 = px.line(data_frame=df_lastyears, x='Date', y=['Close'])\n\nfig_close_2.update_yaxes(tickprefix=\"$\", showgrid=False, title='Close Price')\nfig_close_2.update_xaxes(title = 'Date')\n\nfig_close_2.show()","2be5f913":"fig_open_2 = px.line(data_frame=df, x='Date', y=['Open'])\n\nfig_open_2.update_yaxes(tickprefix=\"$\", showgrid=False, title='Open Price')\nfig_open_2.update_xaxes(title = 'Date')\n\nfig_open_2.show()","fc45037d":"Fig = go.Figure([\n                 go.Scatter(\n                     name = 'Close',\n                     x = df_lastyears.index,\n                     y = df_lastyears['Close'],\n                     mode= 'markers'\n                 ),\n                 go.Scatter(\n                     name = 'Open',\n                     x = df_lastyears.index,\n                     y = df_lastyears['Open'],\n                     mode= 'markers'\n                 )\n\n])\n\nFig.update_layout(\n    yaxis_title='Price',\n    yaxis_tickprefix='$',\n    title = 'Precios de apertura y cierre'\n)\nFig.update_traces(\n    marker = dict(size=2.5)\n)\n\nFig.show()","5ca700bd":"#Price difference between two consecutive days\ndf_lastyears['Price_Difference'] = df_lastyears['Close'].shift(-1) - df_lastyears['Close']\ndf_lastyears = df_lastyears.dropna()\n\n#Let's calculate the daily return by using the expression we wrote before\ndf_lastyears['Return'] = df_lastyears['Price_Difference'] \/ df_lastyears['Close']\n\nfig_return = px.line(data_frame=df_lastyears, x=df_lastyears.index, y='Return', title='Daily Return')\nfig_return.update_xaxes(title='Date')\nfig_return.show()","871b1a45":"df_lastyears['MA10_Close'] = df_lastyears['Close'].rolling(10).mean()\ndf_lastyears['MA10_Open'] = df_lastyears['Open'].rolling(10).mean()\n\ndf_lastyears['MA50_Close'] = df_lastyears['Close'].rolling(50).mean()\ndf_lastyears['MA50_Open'] = df_lastyears['Open'].rolling(50).mean()","505f756c":"MA_Fig = go.Figure([\n                    \n                    go.Scatter(\n                        name='MA10 Close',\n                        x = df_lastyears.index,\n                        y = df_lastyears['MA10_Close']\n\n                    ),\n                    go.Scatter(\n                        name='MA50 Close',\n                        x = df_lastyears.index,\n                        y = df_lastyears['MA50_Close']\n\n                    ),\n                    go.Scatter(\n                        name='Close Price',\n                        x = df_lastyears.index,\n                        y = df_lastyears['Close'],\n                        mode = 'markers'\n\n                    )\n])\nMA_Fig.update_layout(\n    yaxis_title = 'Price',\n    title = 'Close Price & MA10, MA50'\n)\n\nMA_Fig.update_traces(\n    marker = dict(size=4)\n)\n\nMA_Fig.show()","18e0edb2":"train_data, test_data = df_lastyears[0:int(len(df_lastyears)*0.7)], df_lastyears[int(len(df_lastyears)*0.7):]","79217d55":"train_data","659934b9":"Fig_tt = go.Figure([\n                    \n                    go.Scatter(\n                        name= 'Train closes',\n                        x = train_data.index,\n                        y = train_data['Close'],\n                        mode = 'markers'\n                    ),\n                    \n                    go.Scatter(\n                        name = 'Test closes',\n                        x = test_data.index, \n                        y = test_data['Close'],\n                        mode = 'markers'\n\n                    )\n])\n\nFig.update_layout(\n    yaxis_title = 'Price ($)',\n    title = 'Training & Test Close Prices'\n)\nFig_tt.show()","25f5d531":"ex_variables = ['MA50_Close', 'MA50_Open', 'MA10_Open', 'MA10_Close']\ntrain_data = train_data.dropna()\nmodel = auto_arima(\n    train_data['Close'],\n    exogenous=train_data[ex_variables],\n    trace=True, error_action=\"ignore\",\n    suppress_warnings=True)","7aebf8fc":"model.fit(train_data['Close'], exogenous=train_data[ex_variables])\n","1ec86e2d":"test_data = test_data.dropna()","fcea310b":"predictions = model.predict(n_periods=len(test_data), exogenous=test_data[ex_variables])\ntest_data['Predictions'] = predictions","e44d034f":"pred_Fig  = go.Figure([\n                       \n                       go.Scatter(\n                        name= 'Train closes',\n                        x = train_data.index,\n                        y = train_data['Close'],\n                        mode = 'markers'\n                    ),\n                    \n                    go.Scatter(\n                        name = 'Test closes',\n                        x = test_data.index, \n                        y = test_data['Close'],\n                        mode = 'markers'\n\n                    ),\n\n                    go.Scatter(\n                        name = 'Predictions',\n                        x = test_data.index,\n                        y = test_data['Predictions'],\n                        mode = 'lines'\n                    )\n])\n\npred_Fig.show()","c86b15e6":"Let's separate our data in train and test.","2529fdf0":"# 1 - Data Exploration\n\nLet's study Apple stocks.","2f3ba6d5":"And now let's make predictions","e1221f5c":"Now, lets calculate some moving averages:","e353af74":"Let's see a brief description of the dataset","4d5f0204":"Since this notebook is just for learning, let's use the data since 2015.","be117799":"Let's drop any $NaN$ value that we could have:","47c432c6":"Let's configure our model","77291ccd":"# 0 - Importing Packages","902840d4":"# 4 - Price Predictions","759012f0":"Now let's fit our model","a5d4f489":"Let's calculate daily return by using the following expression: <h3>\n$Return[i] = \\frac{Close[i-1]-Close[i]}{Close[i]}$","62bd2235":"# 2 - Feature Engineering"}}