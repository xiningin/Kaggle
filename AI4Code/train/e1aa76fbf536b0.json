{"cell_type":{"cfa63fef":"code","57174c29":"code","a469de81":"code","4e880396":"code","37b33ede":"code","7f9569d4":"code","e274395a":"code","cdb1befe":"code","b5c2fc79":"code","a81a5a13":"code","8ca61fe2":"code","92b85868":"code","f0191006":"code","cbdee7e2":"code","a5fa9604":"code","839525f6":"code","44af810c":"code","37d231db":"code","43974e82":"code","3ada7589":"code","7c352487":"code","94bc5f82":"code","dbe66137":"code","c10d906a":"markdown","2467b73e":"markdown","6728068d":"markdown","72673a74":"markdown","35571c68":"markdown","b7b36e06":"markdown","0b41316b":"markdown","c034a074":"markdown","28107bb0":"markdown"},"source":{"cfa63fef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom datetime import date, timedelta\nimport warnings\n\nfrom sklearn import preprocessing\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.linear_model import LinearRegression\n\nfrom scipy import stats\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nwarnings.filterwarnings('ignore')\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","57174c29":"df_confirmed = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/Time.csv')  \ndf_confirmed['percentage_positive'] = df_confirmed['confirmed']\/df_confirmed['test']\ndf_confirmed['date'] =  pd.to_datetime(df_confirmed['date'])\ndf_confirmed['date_delta'] = (df_confirmed['date'] - df_confirmed['date'].min())  \/ np.timedelta64(1,'D')\ndf_confirmed = df_confirmed[df_confirmed['percentage_positive'] < 0.05] #remove outliers\n\ndf_confirmed[\"date_14\"] = \"\"\nfor index, row in df_confirmed.iterrows():\n    day_retract = row['date'] - timedelta(14)\n    df_confirmed['date_14'][index] = day_retract","a469de81":"plt.title(\"percentage confirmed\")\nsns.regplot(x=\"date_delta\", y=\"percentage_positive\", data=df_confirmed)","4e880396":"plt.title(\"number of tests\")\nsns.regplot(x=\"date_delta\", y=\"test\", data=df_confirmed)","37b33ede":"sns.displot(data=df_confirmed, x=\"percentage_positive\", bins=25, kde=True)\n\ndf_confirmed['percentage_positive_sqrt'] = np.sqrt(df_confirmed['percentage_positive'])\nsns.displot(data=df_confirmed, x=\"percentage_positive_sqrt\", bins=25, kde=True)\n\n# null hypothesis: x comes from a normal distribution\nk2, p = stats.normaltest(df_confirmed[['percentage_positive']])\nk2, p2 = stats.normaltest(df_confirmed[['percentage_positive_sqrt']])\nprint(p)\nprint(p2)","7f9569d4":"df_weather = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/Weather.csv')  \n\ndf_weeks_mean = pd.DataFrame(columns = ['date', 'mean_avg_temp', 'mean_min_temp', 'mean_max_temp', 'mean_precipitation', 'mean_max_wind_speed', 'mean_most_wind_direction', 'mean_avg_relative_humidity', 'day', 'week'])\n\nmean = df_weather.groupby(['date'])['avg_temp'].mean()\ndf_weeks_mean['date'] = mean.index\ndf_weeks_mean['mean_avg_temp'] = mean.values\ndf_weeks_mean['date'] =  pd.to_datetime(df_weeks_mean['date'])\ndf_weeks_mean['day'] = (df_weeks_mean['date'] - df_weeks_mean['date'].min())  \/ np.timedelta64(1,'D')\n\nmean = df_weather.groupby(['date'])['min_temp'].mean()\ndf_weeks_mean['mean_min_temp'] = mean.values\n\nmean = df_weather.groupby(['date'])['max_temp'].mean()\ndf_weeks_mean['mean_max_temp'] = mean.values\n\nmean = df_weather.groupby(['date'])['precipitation'].mean()\ndf_weeks_mean['mean_precipitation'] = mean.values\n\nmean = df_weather.groupby(['date'])['max_wind_speed'].mean()\ndf_weeks_mean['mean_max_wind_speed'] = mean.values\n\nmean = df_weather.groupby(['date'])['most_wind_direction'].mean()\ndf_weeks_mean['mean_most_wind_direction'] = mean.values\n\nmean = df_weather.groupby(['date'])['avg_relative_humidity'].mean()\ndf_weeks_mean['mean_avg_relative_humidity'] = mean.values\n\nfor index, row in df_weeks_mean.iterrows():\n    week = row['day']\/\/7\n    df_weeks_mean['week'][index] = week","e274395a":"df_confirmed_merge = df_confirmed[['date', 'date_14', 'percentage_positive_sqrt']]\ndf_total = df_confirmed_merge.merge(df_weeks_mean, on='date')","cdb1befe":"sns.scatterplot(x=\"date_14\", y=\"mean_avg_temp\", size=\"percentage_positive_sqrt\", sizes=(20, 200), hue=\"percentage_positive_sqrt\", data=df_total)\nplt.title(\"average temperature over time vs percentage positive\")","b5c2fc79":"plot_df = df_total.drop(['week', 'date'], axis = 1)\nsns.pairplot(plot_df, x_vars=\"date_14\", hue=\"percentage_positive_sqrt\")","a81a5a13":"plot_df = df_total.drop(['week', 'date'], axis = 1)\nsns.pairplot(plot_df, hue=\"percentage_positive_sqrt\")\nplt.title(\"pairplot of weather\")","8ca61fe2":"sns.lmplot(x=\"mean_avg_temp\", y=\"percentage_positive_sqrt\", hue=\"week\", data=df_total);\nplt.title(\"percentage positive compared to mean average temperature per week\")","92b85868":"def create_linear_regression_df(column):\n    grouped = df_total.groupby(['week'])\n    lin_reg_df = pd.DataFrame(columns=[column, 'slope', 'type'])\n    lin_reg_14_df = pd.DataFrame(columns=[column, 'slope', 'type'])\n    lin_reg_sub_df = pd.DataFrame(columns=[column, 'slope'])\n    \n    q = 0\n    for name, group in grouped:\n        i = 1\n        for index, row in group.iterrows():\n            group.loc[index, 'day'] = i\n            i = i + 1\n        mean_week = group[[column]].mean().values\n        mean_week = mean_week.tolist()[0]\n        \n        reg = LinearRegression().fit(group[['day']], group[['percentage_positive_sqrt']]) \n        x = reg.coef_[0].tolist()[0]\n        \n        lin_reg_df = lin_reg_df.append({column: mean_week, 'slope': x, 'type': \"normal\"}, ignore_index=True)\n        if q > 1:\n            lin_reg_14_df = lin_reg_14_df.append({column: mean_week, 'slope': x, 'type': \"14_days_later\"}, ignore_index=True)\n        \n        q = q + 1\n        \n    lin_reg_df.drop(lin_reg_df.tail(2).index,inplace=True) \n    lin_reg_sub_df['slope'] = lin_reg_14_df['slope'] - lin_reg_df['slope']\n    lin_reg_sub_df[column] = lin_reg_df[column]\n    \n    return [lin_reg_df, lin_reg_14_df, lin_reg_sub_df]","f0191006":"def paired_t_test(lin_reg_df, lin_reg_14_df):\n    p = stats.ttest_rel(lin_reg_df,lin_reg_14_df)[1]\n    if p > 0.05:\n        p = \"p-value: \" + str(p) + \", null hypothesis can not be rejected\"\n    else:\n        p = \"p-value: \" + str(p) + \", null hypothesis can be rejected\"\n    return p","cbdee7e2":"lin_reg_df = create_linear_regression_df(\"mean_avg_temp\") \nprint(paired_t_test(lin_reg_df[0]['slope'], lin_reg_df[1]['slope']))","a5fa9604":"sns.lmplot(x=\"day\", y=\"percentage_positive_sqrt\", data=df_total);\nplt.title(\"Percentage positive\")","839525f6":"lin_reg_df = create_linear_regression_df(\"mean_avg_temp\") \n\nsns.lmplot(x=\"mean_avg_temp\", y=\"slope\", data=lin_reg_df[2]);\nplt.title(\"average temperature\")","44af810c":"lin_reg_df = create_linear_regression_df(\"mean_min_temp\") \n\nsns.lmplot(x=\"mean_min_temp\", y=\"slope\", data=lin_reg_df[2]);\nplt.title(\"minimum temperature\")","37d231db":"lin_reg_df = create_linear_regression_df(\"mean_max_temp\") \n\nsns.lmplot(x=\"mean_max_temp\", y=\"slope\", data=lin_reg_df[2]);\nplt.title(\"maximum temperature\")","43974e82":"lin_reg_df = create_linear_regression_df(\"mean_precipitation\") \n\nsns.lmplot(x=\"mean_precipitation\", y=\"slope\", data=lin_reg_df[2]);\nplt.title(\"precipitation\")","3ada7589":"lin_reg_df = create_linear_regression_df(\"mean_max_wind_speed\") \n\nsns.lmplot(x=\"mean_max_wind_speed\", y=\"slope\", data=lin_reg_df[2]);\nplt.title(\"maximum wind speed\")","7c352487":"lin_reg_df = create_linear_regression_df(\"mean_most_wind_direction\") \n\nsns.lmplot(x=\"mean_most_wind_direction\", y=\"slope\", data=lin_reg_df[2]);\nplt.title(\"most wind direction\")","94bc5f82":"lin_reg_df = create_linear_regression_df(\"mean_avg_relative_humidity\") \n\nsns.lmplot(x=\"mean_avg_relative_humidity\", y=\"slope\", data=lin_reg_df[2]);\nplt.title(\"mean average relative humidity\")","dbe66137":"df_total_kmeans = df_total.drop(['date','week','day', 'date_14'], axis = 1)\nprint(df_total.isnull().sum())\n\nT = preprocessing.Normalizer().fit_transform(df_total_kmeans)\nn_clusters = 3\nkmean_model = KMeans(n_clusters=n_clusters)\nkmean_model.fit(T)\ncentroids, labels = kmean_model.cluster_centers_, kmean_model.labels_\n\n#print(centroids)\n#print(labels)\n\npca_model = PCA(n_components=2)\npca_model.fit(T) # fit the model\nT = pca_model.transform(T) # transform the 'normalized model'\n# transform the 'centroids of KMean'\ncentroid_pca = pca_model.transform(centroids)\n# print(centroid_pca)\n\ncolors = ['blue', 'red', 'green']\n#colors = ['blue', 'red', 'green', 'orange', 'black', 'brown']\nfeatures_colors = [ colors[labels[i]] for i in range(len(T)) ]\n\nplt.scatter(T[:, 0], T[:, 1],\n            c=features_colors, marker='o',\n            alpha=0.4\n        )\n\nplt.scatter(centroid_pca[:, 0], centroid_pca[:, 1],\n            marker='x', s=100,\n            linewidths=3, c=colors\n        )\n\nxvector = pca_model.components_[0] * max(T[:,0])\nyvector = pca_model.components_[1] * max(T[:,1])\ncolumns = df_total_kmeans.columns\n\nfor i in range(len(columns)):\n    # plot arrows\n    plt.arrow(0, 0, xvector[i], yvector[i],\n                color='b', width=0.0005,\n                head_width=0.002, alpha=0.75\n            )\n    # plot name of features\n    plt.text(xvector[i], yvector[i], list(columns)[i], color='b', alpha=0.75, size=\"x-small\")\n\nplt.show()","c10d906a":"### normalize data and test for normality","2467b73e":"### Effect of weather on regression of percentage positive after two weeks","6728068d":"### create functions for linear regression and t-test","72673a74":"### plot distributions","35571c68":"### merge percentage positive dataframe and weather dataframe","b7b36e06":"### k-means","0b41316b":"### No difference in slopes confirmed weeks vs two weeks later","c034a074":"### select weather data and calculate means for each day, then add week numbers to each row","28107bb0":"### select tested positive and calculate percentage positive and plot data remove outliers and subtract 14 days"}}