{"cell_type":{"a231a58a":"code","8cce5076":"code","bfc76aa0":"code","6f7df42e":"code","567595d2":"code","9f62e820":"code","2f4cbb36":"markdown","f71f7e75":"markdown","fc99a70a":"markdown","7028920e":"markdown"},"source":{"a231a58a":"import numpy as np\nimport pandas as pd\n\nimport os","8cce5076":"df = pd.read_csv('..\/input\/sartorius-cell-instance-segmentation\/train.csv')","bfc76aa0":"df.describe()","6f7df42e":"height = 520\nwidth = 704","567595d2":"#Go through all images\nfor file_id in df['id'].unique():\n    file_name = f'{file_id}_mask.npy'\n    test_mask = np.zeros((height*width))\n    \n    masks = df[df['id']==file_id]['annotation']\n    \n    #Making all masks value 1 in np array\n    for mask in masks:\n        pixel = []\n        length = []\n        for i, val in enumerate(mask.split()):\n            if i % 2 == 0:\n                pixel.append(int(val)-1)\n            else:\n                length.append(int(val))\n        for pixel, length in zip(pixel,length):\n            test_mask[pixel-1:pixel+length] = 1\n    \n    test_mask = test_mask.reshape((height,width))\n    \n    np.save(file_name,test_mask)","9f62e820":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport random\n\nroot = '..\/input\/sartorius-cell-instance-segmentation\/train\/'\nimages = os.listdir(root)\nimages = [x.split('.')[0] for x in images]\nindex=random.randint(0, len(images))\n\nfile_id = images[index]\n\nimage = root+file_id+'.png'\nmask = np.load(file_id+'_mask.npy')\n\nplt.figure(figsize = (15,10))\nplt.title(file_id)\nimg = mpimg.imread(image)\nimgplot = plt.imshow(img, cmap='gray')\nplt.show()\n\nplt.figure(figsize = (15,10))\nplt.imshow(mask, cmap='gray')\nplt.show()","2f4cbb36":"# Make all Masks","f71f7e75":"# Check Random Image and Mask","fc99a70a":"#### All images are 520x704","7028920e":"#### Train csv contains all individual masks. Goal of notebook is to combine all annotations into a single np array for training"}}