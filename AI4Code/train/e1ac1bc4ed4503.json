{"cell_type":{"545a7b1d":"code","546af37e":"code","c66efa3c":"code","81dde445":"code","14b24626":"code","5cf0e985":"code","81e7522d":"code","bd8a15b2":"code","274a41a3":"code","c6416e8a":"code","6d819e55":"code","238fc02c":"code","3d9d74e7":"code","6121e244":"code","2b397b40":"code","1af0dfa5":"code","0d988ee2":"code","38f405ce":"code","14194871":"code","9113c755":"code","6e517dad":"code","ef69d7cf":"code","ca66aeac":"code","77156019":"code","21b0547d":"markdown","70419d62":"markdown","50d15dce":"markdown","aeeb67d4":"markdown","4375e95b":"markdown","f0eb1248":"markdown","d0e1182d":"markdown"},"source":{"545a7b1d":"import tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport plotly.graph_objects as go\nimport io\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom textblob import TextBlob\nfrom wordcloud import WordCloud, STOPWORDS\nfrom nltk.util import ngrams\nfrom nltk.tokenize import word_tokenize\nfrom nltk.classify import NaiveBayesClassifier\nfrom nltk.corpus import subjectivity\nfrom nltk.sentiment import SentimentAnalyzer\nfrom nltk.sentiment.util import *\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer","546af37e":"Trump_dataset = pd.read_csv('\/kaggle\/input\/us-election-2020-tweets\/hashtag_donaldtrump.csv', lineterminator='\\n')\nBiden_dataset = pd.read_csv('..\/input\/us-election-2020-tweets\/hashtag_joebiden.csv',lineterminator='\\n')","c66efa3c":"Trump_dataset.head()","81dde445":"Biden_dataset.head()","14b24626":"# Drop useles columns\nTrump_dataset = Trump_dataset.drop(columns = ['tweet_id','collected_at','user_description','collected_at'])\nBiden_dataset = Biden_dataset.drop(columns = ['tweet_id','collected_at','user_description','collected_at'])","5cf0e985":"Trump_dataset.loc[:,'condidat'] = 'Trump'\nBiden_dataset.loc[:,'condidat'] = 'Biden'","81e7522d":"Data_Mixed = pd.concat([Trump_dataset,Biden_dataset])\nData_Mixed.sort_values(by='created_at')\nData_Mixed.head()","bd8a15b2":"Trump_tweets = Data_Mixed.query('(condidat == \"Trump\")').tweet.sort_values(ascending=False).count()\nBiden_tweets = Data_Mixed.query('(condidat == \"Biden\")').tweet.sort_values(ascending=False).count()\n\nobjects = ('Donald Trump','Joe Biden')\ny_pos = np.arange(len(objects))\nperformance = [Trump_tweets,Biden_tweets]\n\nplt.bar(y_pos, performance, align='center', alpha=0.5)\nplt.xticks(y_pos, objects)\nplt.ylabel('Number of tweets')\nplt.title('Donald vs Biden')\n\nplt.show()","274a41a3":"Trump_tweets = Data_Mixed.query('(condidat == \"Trump\")').likes.count()\nBiden_tweets = Data_Mixed.query('(condidat == \"Biden\")').likes.count()\n\nobjects = ('Donald Trump','Joe Biden')\ny_pos = np.arange(len(objects))\nperformance = [Trump_tweets,Biden_tweets]\n\nplt.bar(y_pos, performance, align='center', alpha = 0.5)\nplt.xticks(y_pos, objects)\nplt.ylabel('Number of Likes')\nplt.title('Donald vs Biden')\n\nplt.show()","c6416e8a":"def Country_tweets(country,kind):\n    Data=Data_Mixed[Data_Mixed.country == country].groupby('condidat').tweet.count()\n    Data.plot(x = 'condidate',y = \"tweet\",kind = kind, title=\"tweets count in country \" + str(country))\n    \nCountry_tweets('Germany','pie')","6d819e55":"Country_tweets('Brazil','bar')","238fc02c":"Country_tweets('India','pie')","3d9d74e7":"class Chart_builder:\n    \n    def __init__(self,topic_index,number):\n        super().__init__()\n        self.topic_index = topic_index\n        self.topics_list = ['source','country','state','continent','city']\n        self.number      = number\n        self.index = self.topics_list[self.topic_index]\n        self.Trump_tweets_sources_x = Data_Mixed.query('(condidat == \"Trump\")').groupby(by = self.index).count().tweet.sort_values(ascending = False)[:self.number].index\n        \n        self.Trump_tweets_sources_y = Data_Mixed.query('(condidat == \"Trump\")').groupby(by = self.index).count().tweet.sort_values(ascending = False)[:self.number]\n        \n        self.Biden_tweets_sources_x = Data_Mixed.query('(condidat == \"Biden\")').groupby(by = self.index).count().tweet.sort_values(ascending = False)[:self.number].index\n        \n        self.Biden_tweets_sources_y = Data_Mixed.query('(condidat == \"Biden\")').groupby(by = self.index).count().tweet.sort_values(ascending = False)[:self.number]\n    \n    def Builder(self):\n        fig = go.Figure([go.Bar(x = self.Trump_tweets_sources_x, y = self.Trump_tweets_sources_y, name = 'Trump'),\n                         go.Bar(x = self.Biden_tweets_sources_x, y = self.Biden_tweets_sources_y, name = 'Biden')])\n        # Customize aspect\n        fig.update_layout(title_text = 'top '+ str(self.number) + ' ' + self.index)\n        fig.update_xaxes(title = 'sources')\n        fig.update_yaxes(title = 'tweets count')\n        fig.show()","6121e244":"# choose index for topic\ntopic_index = 1 # from class list its country\n\n# number of elements in chart\nnumber = 5 # it;s mean top five\n\nlaunch = Chart_builder(topic_index,number)\nlaunch.Builder()\n\n# 1\ntopic_index = 0\nnumber = 10 \nlaunch = Chart_builder(topic_index,number)\nlaunch.Builder()\n# 2\ntopic_index = 2\nnumber = 10 \nlaunch = Chart_builder(topic_index,number)\nlaunch.Builder()\n#3\ntopic_index = 3\nnumber = 10 \nlaunch = Chart_builder(topic_index,number)\nlaunch.Builder()\n#4\ntopic_index = 4\nnumber = 10 \nlaunch = Chart_builder(topic_index,number)\nlaunch.Builder()\n","2b397b40":"def clean(text):\n    '''Make text lowercase, remove text in square brackets,remove links,remove punctuation\n    and remove words containing numbers.'''\n    text = str(text).lower()\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    text=re.sub(r'@[A-Za-z0-9]+','',text)\n    text=re.sub(r'#','',text)\n    text=re.sub(r'RT[\\s]+','',text)\n    text=re.sub(r'[^\\w]', ' ', text)\n    return text","1af0dfa5":"# create fuction to get the subjectivity and polarity\ndef getSubjectivity(text):\n    return TextBlob(text).sentiment.subjectivity\n\ndef getPolarity(text):\n    return TextBlob(text).sentiment.polarity\n\ndef getAnalysis(score):\n    if score < 0:\n        return 'negative'\n    elif score==0:\n        return 'neutral'\n    else:\n        return 'positive'","0d988ee2":"Trump_Tweets = Data_Mixed.query('(condidat == \"Trump\")').sort_values('user_followers_count',ascending = False).drop_duplicates(['user_name'])[['tweet','country']]\nTrump_Tweets = Trump_Tweets.dropna().loc[Trump_Tweets.country == 'United States of America'][:1000]\n\n\nTrump_Tweets.reset_index(inplace = True, drop = True)\n\nTrump_Tweets['ClearTweet'] = Trump_Tweets['tweet'].apply(clean)\n\nTrump_Tweets['subjectivity']= Trump_Tweets['ClearTweet'].apply(getSubjectivity)\nTrump_Tweets['polarity']    = Trump_Tweets['ClearTweet'].apply(getPolarity)\nTrump_Tweets['analysis']    = Trump_Tweets['polarity'].apply(getAnalysis)\nTrump_Tweets.head()\n\n\nTrump_Tweets.head()","38f405ce":"%%time\nTrump_Tweets.polarity = Trump_Tweets.polarity.apply(lambda x: getAnalysis(x))","14194871":"from collections import Counter\n\ntarget_cnt = Counter(Trump_Tweets.polarity)\n\nplt.figure(figsize=(16,8))\nplt.bar(target_cnt.keys(), target_cnt.values())\nplt.title(\"Dataset labels distribuition\")","9113c755":"general  = Trump_Tweets.groupby('analysis').analysis.count()\nneutral  = Trump_Tweets[Trump_Tweets['analysis'] == 'neutral'].ClearTweet.count()\npositive = Trump_Tweets[Trump_Tweets['analysis'] == 'positive'].ClearTweet.count()\nnegative = Trump_Tweets[Trump_Tweets['analysis'] == 'negative'].ClearTweet.count()\n\nfig = go.Figure(data = [go.Funnelarea(labels = [\"positivity\",\"negativity\",\"neutrality\"], values = [positive,negative,neutral])])\nfig.update_layout(title_text ='sentimat analysis tweets Donald Trump')\nfig.show()","6e517dad":"Biden_Tweets = Data_Mixed.query('(condidat == \"Biden\")').sort_values('user_followers_count',ascending = False).drop_duplicates(['user_name'])[['tweet','country']]\nBiden_Tweets = Biden_Tweets.dropna().loc[Biden_Tweets.country == 'United States of America'][:1000]\n\n\nBiden_Tweets.reset_index(inplace = True, drop = True)\n\nBiden_Tweets['ClearTweet'] = Biden_Tweets['tweet'].apply(clean)\n\n \nBiden_Tweets['subjectivity']= Biden_Tweets['ClearTweet'].apply(getSubjectivity)\nBiden_Tweets['polarity']    = Biden_Tweets['ClearTweet'].apply(getPolarity)\nBiden_Tweets['analysis']    = Biden_Tweets['polarity'].apply(getAnalysis)\nBiden_Tweets.head()\n\n\nBiden_Tweets.head()","ef69d7cf":"%%time\nBiden_Tweets.polarity = Biden_Tweets.polarity.apply(lambda x: getAnalysis(x))","ca66aeac":"target_cnt = Counter(Biden_Tweets.polarity)\n\nplt.figure(figsize=(16,8))\nplt.bar(target_cnt.keys(), target_cnt.values())\nplt.title(\"Dataset labels distribuition\")","77156019":"general  = Biden_Tweets.groupby('analysis').analysis.count()\nneutral  = Biden_Tweets[Biden_Tweets['analysis'] == 'neutral'].ClearTweet.count()\npositive = Biden_Tweets[Biden_Tweets['analysis'] == 'positive'].ClearTweet.count()\nnegative = Biden_Tweets[Biden_Tweets['analysis'] == 'negative'].ClearTweet.count()\n\nfig = go.Figure(data = [go.Funnelarea(labels = [\"positivity\",\"negativity\",\"neutrality\"], values = [positive,negative,neutral])])\nfig.update_layout(title_text ='sentimat analysis tweets Joe Biden')\nfig.show()","21b0547d":"# Joe Biden","70419d62":"# DONALD TRUMP","50d15dce":"# Functions for Data Manipulation","aeeb67d4":"# SENTINMENT ANALYSIS \n![sentiment-analysis-with-machine-learning-related-works-d03a.jpg](attachment:sentiment-analysis-with-machine-learning-related-works-d03a.jpg)","4375e95b":"**Klasifikasi dan Visualisasi Tweet Trump vs Biden pada Pemilu AS 2020**","f0eb1248":"****Example of class usage****","d0e1182d":"# Create class for chart building."}}