{"cell_type":{"8950798d":"code","908f0ffa":"code","f5aad64a":"code","da77dce7":"code","5bb2a7a1":"code","4bb30d72":"code","a31d1adf":"code","3d55c0c4":"code","c9912421":"code","51836772":"code","5a990058":"code","350dc5cc":"code","62f7e20c":"code","69074606":"code","058df52f":"code","e7de9b59":"code","a68a3629":"code","77027d4a":"code","b4ff3e2f":"code","da319679":"code","479ff449":"code","625cf68d":"code","1586735e":"code","cefcd1f0":"code","173aa188":"code","649c84bd":"code","80a86bac":"code","c87cb245":"code","b79e23c2":"code","d11f056c":"code","5a1acd88":"code","ec20163a":"code","c0cee1c1":"code","9cb59373":"code","e22a504d":"code","67189e23":"code","3c969e66":"code","d43bbae0":"code","6f771270":"code","60d994db":"code","2e0ae3d0":"code","6b5ccb68":"code","2584cc77":"code","59f1443f":"code","0600b921":"code","4682cec5":"code","541b5566":"code","dabd54d8":"code","f962772d":"code","e818d59b":"code","f9816457":"code","78450e9e":"code","38c057f6":"markdown","5ae845ea":"markdown","97716580":"markdown","3a04c34f":"markdown","53aee903":"markdown","77724a7c":"markdown","57108899":"markdown","c31f5dd9":"markdown","9c3c36a2":"markdown","0dcc50b7":"markdown","3b7e5f18":"markdown","9bce294e":"markdown","df0d3f68":"markdown","f8e9b6ad":"markdown","64043575":"markdown","54eb0609":"markdown","0d656e7f":"markdown","c24235b3":"markdown","45d81b70":"markdown","dd52b76b":"markdown","e0a20f23":"markdown","b7726155":"markdown","91dfcc6b":"markdown","51c1f663":"markdown","1019dccc":"markdown"},"source":{"8950798d":"#Libraries to import\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\nimport pycountry\nimport plotly_express as px\nsns.set_style('darkgrid')\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn import metrics\nimport xgboost as xgb\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance, plot_tree","908f0ffa":"df_train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv') \ndf_test = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv')","f5aad64a":"display(df_train.head())\ndisplay(df_train.describe())\ndisplay(df_train.info())","da77dce7":"df_train['Date'] = pd.to_datetime(df_train['Date'], format = '%Y-%m-%d')\ndf_test['Date'] = pd.to_datetime(df_test['Date'], format = '%Y-%m-%d')","5bb2a7a1":"print('Minimum date from training set: {}'.format(df_train['Date'].min()))\nprint('Maximum date from training set: {}'.format(df_train['Date'].max()))","4bb30d72":"print('Minimum date from test set: {}'.format(df_test['Date'].min()))\nprint('Maximum date from test set: {}'.format(df_test['Date'].max()))","a31d1adf":"df_map = df_train.copy()\ndf_map['Date'] = df_map['Date'].astype(str)\ndf_map = df_map.groupby(['Date','Country_Region'], as_index=False)['ConfirmedCases','Fatalities'].sum()","3d55c0c4":"def get_iso3_util(country_name):\n    try:\n        country = pycountry.countries.get(name=country_name)\n        return country.alpha_3\n    except:\n        if 'Congo' in country_name:\n            country_name = 'Congo'\n        elif country_name == 'Diamond Princess' or country_name == 'Laos':\n            return country_name\n        elif country_name == 'Korea, South':\n            country_name = 'Korea, Republic of'\n        elif country_name == 'Taiwan*':\n            country_name = 'Taiwan'\n        country = pycountry.countries.search_fuzzy(country_name)\n        return country[0].alpha_3\n\nd = {}\ndef get_iso3(country):\n    if country in d:\n        return d[country]\n    else:\n        d[country] = get_iso3_util(country)\n    \ndf_map['iso_alpha'] = df_map.apply(lambda x: get_iso3(x['Country_Region']), axis=1)","c9912421":"df_map['ln(ConfirmedCases)'] = np.log(df_map.ConfirmedCases + 1)\ndf_map['ln(Fatalities)'] = np.log(df_map.Fatalities + 1)","51836772":"px.choropleth(df_map, \n              locations=\"iso_alpha\", \n              color=\"ln(ConfirmedCases)\", \n              hover_name=\"Country_Region\", \n              hover_data=[\"ConfirmedCases\"] ,\n              animation_frame=\"Date\",\n              color_continuous_scale=px.colors.sequential.dense, \n              title='Daily Confirmed Cases growth(Logarithmic Scale)')","5a990058":"px.choropleth(df_map, \n              locations=\"iso_alpha\", \n              color=\"ln(Fatalities)\", \n              hover_name=\"Country_Region\",\n              hover_data=[\"Fatalities\"],\n              animation_frame=\"Date\",\n              color_continuous_scale=px.colors.sequential.OrRd,\n              title = 'Daily Deaths growth(Logarithmic Scale)')","350dc5cc":"#Get the top 10 countries\nlast_date = df_train.Date.max()\ndf_countries = df_train[df_train['Date']==last_date]\ndf_countries = df_countries.groupby('Country_Region', as_index=False)['ConfirmedCases','Fatalities'].sum()\ndf_countries = df_countries.nlargest(10,'ConfirmedCases')\n#Get the trend for top 10 countries\ndf_trend = df_train.groupby(['Date','Country_Region'], as_index=False)['ConfirmedCases','Fatalities'].sum()\ndf_trend = df_trend.merge(df_countries, on='Country_Region')\ndf_trend.drop(['ConfirmedCases_y','Fatalities_y'],axis=1, inplace=True)\ndf_trend.rename(columns={'Country_Region':'Country', 'ConfirmedCases_x':'Cases', 'Fatalities_x':'Deaths'}, inplace=True)\n#Add columns for studying logarithmic trends\ndf_trend['ln(Cases)'] = np.log(df_trend['Cases']+1)# Added 1 to remove error due to log(0).\ndf_trend['ln(Deaths)'] = np.log(df_trend['Deaths']+1)","62f7e20c":"px.line(df_trend, x='Date', y='Cases', color='Country', title='COVID19 Cases growth for top 10 worst affected countries')","69074606":"px.line(df_trend, x='Date', y='Deaths', color='Country', title='COVID19 Deaths growth for top 10 worst affected countries')","058df52f":"px.line(df_trend, x='Date', y='ln(Cases)', color='Country', title='COVID19 Cases growth for top 10 worst affected countries(Logarithmic Scale)')","e7de9b59":"px.line(df_trend, x='Date', y='ln(Deaths)', color='Country', title='COVID19 Deaths growth for top 10 worst affected countries(Logarithmic Scale)')","a68a3629":"# Dictionary to get the state codes from state names for US\nus_state_abbrev = {\n    'Alabama': 'AL',\n    'Alaska': 'AK',\n    'American Samoa': 'AS',\n    'Arizona': 'AZ',\n    'Arkansas': 'AR',\n    'California': 'CA',\n    'Colorado': 'CO',\n    'Connecticut': 'CT',\n    'Delaware': 'DE',\n    'District of Columbia': 'DC',\n    'Florida': 'FL',\n    'Georgia': 'GA',\n    'Guam': 'GU',\n    'Hawaii': 'HI',\n    'Idaho': 'ID',\n    'Illinois': 'IL',\n    'Indiana': 'IN',\n    'Iowa': 'IA',\n    'Kansas': 'KS',\n    'Kentucky': 'KY',\n    'Louisiana': 'LA',\n    'Maine': 'ME',\n    'Maryland': 'MD',\n    'Massachusetts': 'MA',\n    'Michigan': 'MI',\n    'Minnesota': 'MN',\n    'Mississippi': 'MS',\n    'Missouri': 'MO',\n    'Montana': 'MT',\n    'Nebraska': 'NE',\n    'Nevada': 'NV',\n    'New Hampshire': 'NH',\n    'New Jersey': 'NJ',\n    'New Mexico': 'NM',\n    'New York': 'NY',\n    'North Carolina': 'NC',\n    'North Dakota': 'ND',\n    'Northern Mariana Islands':'MP',\n    'Ohio': 'OH',\n    'Oklahoma': 'OK',\n    'Oregon': 'OR',\n    'Pennsylvania': 'PA',\n    'Puerto Rico': 'PR',\n    'Rhode Island': 'RI',\n    'South Carolina': 'SC',\n    'South Dakota': 'SD',\n    'Tennessee': 'TN',\n    'Texas': 'TX',\n    'Utah': 'UT',\n    'Vermont': 'VT',\n    'Virgin Islands': 'VI',\n    'Virginia': 'VA',\n    'Washington': 'WA',\n    'West Virginia': 'WV',\n    'Wisconsin': 'WI',\n    'Wyoming': 'WY'\n}","77027d4a":"df_us = df_train[df_train['Country_Region']=='US']\ndf_us['Date'] = df_us['Date'].astype(str)\ndf_us['state_code'] = df_us.apply(lambda x: us_state_abbrev.get(x.Province_State,float('nan')), axis=1)\ndf_us['ln(ConfirmedCases)'] = np.log(df_us.ConfirmedCases + 1)\ndf_us['ln(Fatalities)'] = np.log(df_us.Fatalities + 1)","b4ff3e2f":"px.choropleth(df_us,\n              locationmode=\"USA-states\",\n              scope=\"usa\",\n              locations=\"state_code\",\n              color=\"ln(ConfirmedCases)\",\n              hover_name=\"Province_State\",\n              hover_data=[\"ConfirmedCases\"],\n              animation_frame=\"Date\",\n              color_continuous_scale=px.colors.sequential.Darkmint,\n              title = 'Daily Cases growth for USA(Logarithmic Scale)')","da319679":"px.choropleth(df_us,\n              locationmode=\"USA-states\",\n              scope=\"usa\",\n              locations=\"state_code\",\n              color=\"ln(Fatalities)\",\n              hover_name=\"Province_State\",\n              hover_data=[\"Fatalities\"],\n              animation_frame=\"Date\",\n              color_continuous_scale=px.colors.sequential.OrRd,\n              title = 'Daily deaths growth for USA(Logarithmic Scale)')","479ff449":"df_train.Province_State.fillna('NaN', inplace=True)","625cf68d":"df_plot = df_train.groupby(['Date','Country_Region','Province_State'], as_index=False)['ConfirmedCases','Fatalities'].sum()","1586735e":"df = df_plot.query(\"Country_Region=='India'\")\npx.line(df, x='Date', y='ConfirmedCases', title='Daily Cases growth for India')","cefcd1f0":"px.line(df, x='Date', y='Fatalities', title='Daily Deaths growth for India')","173aa188":"ch_geojson = \"..\/input\/china-regions-map\/china-provinces.json\"\ndf_plot['day'] = df_plot.Date.dt.dayofyear\ndf_plot['Province_ch'] = \"\u65b0\u7586\u7ef4\u543e\u5c14\u81ea\u6cbb\u533a\"","649c84bd":"df = df_plot.query(\"Country_Region=='China'\")\nfig = px.choropleth_mapbox(df,\n              geojson=ch_geojson,\n              #scope=\"asia\",\n              color=\"ConfirmedCases\",\n              locations=\"Province_ch\",\n              featureidkey=\"objects.CHN_adm1.geometries.properties.NL_NAME_1\",\n              #featureidkey=\"features.properties.name\",\n              animation_frame=\"day\")\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","80a86bac":"df = df_plot.query(\"Country_Region=='China'\")\npx.line(df, x='Date', y='ConfirmedCases', color='Province_State', title='Daily Cases growth for China')","c87cb245":"px.line(df, x='Date', y='Fatalities', color='Province_State', title='Daily Deaths growth for China')","b79e23c2":"def categoricalToInteger(df):\n    #convert NaN Province State values to a string\n    df.Province_State.fillna('NaN', inplace=True)\n    #Define Ordinal Encoder Model\n    oe = OrdinalEncoder()\n    df[['Province_State','Country_Region']] = oe.fit_transform(df.iloc[:,1:3])\n    return df","d11f056c":"def create_features(df):\n    df['day'] = df['Date'].dt.day\n    df['month'] = df['Date'].dt.month\n    df['dayofweek'] = df['Date'].dt.dayofweek\n    df['dayofyear'] = df['Date'].dt.dayofyear\n    df['quarter'] = df['Date'].dt.quarter\n    df['weekofyear'] = df['Date'].dt.weekofyear\n    return df","5a1acd88":"def cum_sum(df, date, country, state):\n    sub_df = df[(df['Country_Region']==country) & (df['Province_State']==state) & (df['Date']<=date)]\n    display(sub_df)\n    return sub_df['ConfirmedCases'].sum(), sub_df['Fatalities'].sum()","ec20163a":"def train_dev_split(df):\n    date = df['Date'].max() - dt.timedelta(days=7)\n    return df[df['Date'] <= date], df[df['Date'] > date]","c0cee1c1":"df_train = categoricalToInteger(df_train)\ndf_train = create_features(df_train)","9cb59373":"df_train, df_dev = train_dev_split(df_train)","e22a504d":"columns = ['day','month','dayofweek','dayofyear','quarter','weekofyear','Province_State', 'Country_Region','ConfirmedCases','Fatalities']\ndf_train = df_train[columns]\ndf_dev = df_dev[columns]","67189e23":"train = df_train.values\ndev = df_dev.values\nX_train, y_train = train[:,:-2], train[:,-2:]\nX_dev, y_dev = dev[:,:-2], dev[:,-2:]","3c969e66":"'''train = df_train.values\nX_train, y_train = train[:,:-2], train[:,-2:]'''","d43bbae0":"def modelfit(alg, X_train, y_train,useTrainCV=True, cv_folds=5, early_stopping_rounds=50):\n    \n    if useTrainCV:\n        xgb_param = alg.get_xgb_params()\n        xgtrain = xgb.DMatrix(X_train, label=y_train)\n        cvresult = xgb.cv(xgb_param, xgtrain, num_boost_round=alg.get_params()['n_estimators'], nfold=cv_folds,\n            metrics='rmse', early_stopping_rounds=early_stopping_rounds, show_stdv=False)\n        alg.set_params(n_estimators=cvresult.shape[0])\n    \n    #Fit the algorithm on the data\n    alg.fit(X_train, y_train,eval_metric='rmse')\n        \n    #Predict training set:\n    predictions = alg.predict(X_train)\n    #predprob = alg.predict_proba(X_train)[:,1]\n        \n    #Print model report:\n    print(\"\\nModel Report\")\n    #print(\"Accuracy : %.4g\" % metrics.accuracy_score(y_train, predictions))\n    print(\"RMSE Score (Train): %f\" % metrics.mean_squared_error(y_train, predictions))\n                    \n    feat_imp = pd.Series(alg.feature_importances_).sort_values(ascending=False)\n    feat_imp.plot(kind='bar', title='Feature Importances')\n    plt.ylabel('Feature Importance Score')","6f771270":"'''model1 = XGBRegressor(\n learning_rate =0.1,\n n_estimators=1000,\n max_depth=5,\n min_child_weight=1,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n objective= 'reg:squarederror',\n scale_pos_weight=1)\nmodelfit(model1, X_train, y_train[:,0])'''","60d994db":"'''model2 = XGBRegressor(\n learning_rate =0.1,\n n_estimators=1000,\n max_depth=5,\n min_child_weight=1,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n objective= 'reg:squarederror',\n scale_pos_weight=1)\nmodelfit(model2, X_train, y_train[:,1])'''","2e0ae3d0":"model1 = XGBRegressor(n_estimators=1000)\nmodel2 = XGBRegressor(n_estimators=1000)","6b5ccb68":"model1.fit(X_train, y_train[:,0],\n           eval_set=[(X_train, y_train[:,0]), (X_dev, y_dev[:,0])],\n           verbose=False)","2584cc77":"model2.fit(X_train, y_train[:,1],\n           eval_set=[(X_train, y_train[:,1]), (X_dev, y_dev[:,1])],\n           verbose=False)","59f1443f":"plot_importance(model1);","0600b921":"plot_importance(model2);","4682cec5":"df_train = categoricalToInteger(df_test)\ndf_train = create_features(df_test)","541b5566":"columns = ['day','month','dayofweek','dayofyear','quarter','weekofyear','Province_State', 'Country_Region']\ndf_test = df_test[columns]","dabd54d8":"y_pred1 = model1.predict(df_test.values)\ny_pred2 = model2.predict(df_test.values)","f962772d":"df_submit = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/submission.csv')","e818d59b":"df_submit.ConfirmedCases = y_pred1\ndf_submit.Fatalities = y_pred2","f9816457":"'''df_submit.ConfirmedCases = df_submit.ConfirmedCases.apply(lambda x:max(0,round(x,0)))\ndf_submit.Fatalities = df_submit.Fatalities.apply(lambda x:max(0,round(x,0)))'''","78450e9e":"df_submit.to_csv(r'submission.csv', index=False)","38c057f6":"Split the training data into train and dev set for cross-validation.","5ae845ea":"#### <a id='us'>United States of America<\/a>\nAs can be seen through the below graphs: \n- The COVID19 outbreak started from Washington state on the west coast and later on picked up pace in New york on the east coast . \n- Now, New York itself has around 40% of the total cases in USA.\n- New Jersey is the second in the list of worst affected states.\n- Cases and Fatalities in the East Coast are more than that of West Coast's.","97716580":"> Below are my analysis from the above line plots for the top 10 affected countries:\n- Cases and Deaths for China have stagnated over time.\n- The cases and deaths are monotonically increasing(almost exponentially) for rest of the countries.\n- US has shown the greatest rise in the number of Confirmed Cases. Italy, on the other hand having the highest rise in deaths has to bear the brunt of the virus. Spain is a close second to Italy.\n- 6 out of the top 10 affected countries are Western European countries.","3a04c34f":"### <a id='world'>Universal growth of COVID19 over time<\/a>\nIn this section, I'll have a look at how COVID19 has been growing throughout the world from 22nd january 2020. I'll be using a chloropleth map with a time slider to show the daily impact of virus.  ","53aee903":"# COVID19 Predictions using XGBOOST\n![covid19](https:\/\/2s7gjr373w3x22jf92z99mgm5w-wpengine.netdna-ssl.com\/wp-content\/uploads\/2020\/02\/coronavirus-768x432.jpg)\nIn this Project I'll be using past three months data to predict the Confirmed Cases and Fatalities for the month of April. The model used for training will be an **XGBOOST** model.\n## <a id='main'>Table of Contents<\/a>\n- [Let's Explore the Data](#exp)\n- [Exploratory Data Analysis(EDA)](#eda)\n    1. [Universal growth of COVID19 over time](#world)\n    2. [Trend of COVID19 in top 10 affected countries](#top10)\n    3. [Country Specific growth of COVID19](#country)\n        - [United States of America](#us)\n        - [India](#in)\n        - [China](#ch)\n- [Preprocessing](#pp)\n- [Training and evaluating the model](#te)\n- [Prediction](#pred)","77724a7c":"# <a id='eda'>Exploratory Data Analysis(EDA)<\/a>\n[Go back to the main page](#main)\n\nAfter exploring the data and its datatypes, let's perform some EDA on the data in order to get a better understanding of the data and how COVID19 is affecting all of us.","57108899":"Create the model","c31f5dd9":"# <a id='exp'>Lets explore the Data<\/a>","9c3c36a2":"#### <a id='in'>India<\/a>\nCOVID19 outbreak has started a bit late in India as compared to other countries. But, it has started to pick up pace. With limited testing and not a well funded healthcare system, India is surely up for a challenge. Let's hope that the 21 day lockdown helps to stop or atleast slower down the spread of this dreaded virus.","0dcc50b7":"Obtain the numpy arrays of the train and dev set.","3b7e5f18":"* Get the feature importance for both the models.","9bce294e":"Train the model and evaluate it using the dev set. I have used last week's data for the dev set.","df0d3f68":">Since, cases and fatalities have grown exponentially over the last two months and countries like China, Italy, USA,and Spain, I have plotted the choropleth map on logarithmic scale. You can hover on the country to know the total confirmed cases or fatalities.","f8e9b6ad":"Below, I have also plotted the daily variation of Confirmed Cases and Deaths for Top 10 affected countries on a logarithmic scale.","64043575":"# <a id='pp'>Preprocessing<\/a>\n[Go back to the main page](#main)\n\nConvert Categorical variables: **Province_State** & **Country_Region**, into integers for training the model.\n\nProvince_State contains Null values. As I need null values as well as this feature is needed for training, I'll convert Null values to string 'NaN'. Now, OrdinalEncoder() can be easily applied on it.","54eb0609":"Select all the columns that are needed for training the model.","0d656e7f":"#### <a id='ch'>China<\/a>\n- This is where it all started! By looking at the graph it can be seen that China has been able to almost stop the spread of COVID19 substantially.\n- Almost all the cases are from the Hubei Province which can be attributed to the fact that the outbreak started from its capital, Wuhan.\n\n> In order to get a better understanding of the cases\/fatalities growth from other provinces, you can click on Hubei in the legend so that it gets hidden and the scale will autoscale.","c24235b3":"# <a id='te'>Training and evaluating the model<\/a>\n[Go back to the main page](#main)\n\nIn this section, I'll training the data on an XGBOOST model and evaluate it on the dev set. Since, I have to predict both: **Confirmed Cases** & **Fatalities**, I'll be using 2 separate models.","45d81b70":"Extract useful features from date.","dd52b76b":"Currenty, the date is coming as a string. Lets convert it into datetime format so that EDA on the data becomes easier.","e0a20f23":"1. Below are my finding from the above plots:-\n- China was the first country to experience the onset of virus.\n- US and Italy, which are the worst affected countries currently didn't recond many cases in january. This shows that how fast the virus spreads.\n- Majority of the cases are in the northern hemisphere, which is relatively cooler at this time of the year. Maybe the virus is temperature sensitive and as the summer progresses, we may see a fall in the growth of the cases in the northern hemisphere. Meaning not a good winter season for the southern hemisphere.\n- Western Europe is the worst affected. Hence, it can be adjudged as the new epicenter of COVID19. USA is also in the reckoning.\n- Lockdown has seem to have worked in China's favour as the growth rate has plummeted.","b7726155":"# <a id='pred'>Prediction<\/a>\n[Go back to the main page](#main)\n\nHere, I have combined the predictions from both the models and prepared the submission file.","91dfcc6b":"# Do leave an upvote if you like the work:) Constructive feedbacks are welcome! ","51c1f663":"### <a id='country'>Country Specific growth of COVID19<\/a>","1019dccc":"### <a id='top10'>Trend of COVID19 in top 10 affected countries<\/a>\nI need to find the Top 10 affected countries. Since, the Confirmed cases and Fatalities are the cummulative sums till date, I'll find the top 10 countries by using the country data of the last date for which the training data is available."}}