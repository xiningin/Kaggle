{"cell_type":{"ee2d3a8b":"code","15ce72d2":"code","5fbb982f":"code","4feeb283":"code","d95460c2":"code","32833d18":"code","ceab673a":"code","26600035":"code","dd9b5a2e":"code","504f9ab2":"code","082b731a":"code","763455c7":"code","288f03f0":"code","55f8077f":"code","32046f64":"code","700a2a1f":"code","1e643331":"code","d141fef4":"code","c74a782e":"code","5755ed34":"code","f9255489":"code","25d082fb":"code","62f8d491":"code","a48816a8":"code","a0167777":"code","455f88db":"code","03f7a43f":"code","4e3008df":"markdown","c2e90675":"markdown","6d48d28a":"markdown","3763d41f":"markdown","a3afd7a7":"markdown","0e2fef4b":"markdown","506d7cd4":"markdown","6479c60b":"markdown","3dd8698f":"markdown","55e8de36":"markdown","cc95893a":"markdown","f8f4e76a":"markdown","80a53a7b":"markdown","b6962b09":"markdown","82e6c190":"markdown","cd7913b7":"markdown","87d96398":"markdown","fab5dd77":"markdown","af270ab2":"markdown","2bba844b":"markdown","6caf86d8":"markdown","82398b19":"markdown","a2862b7f":"markdown","ef6ff75a":"markdown"},"source":{"ee2d3a8b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","15ce72d2":"import tensorflow as tf\nimport tensorflow.keras as keras\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nimport random\nimport inspect\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","5fbb982f":"train_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\nx_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n\nx_train = np.array(train_df.drop(columns='label'))\ny_train = np.array(train_df['label'])\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0\nprint(x_train.shape)","4feeb283":"#import random # \u8aad\u307f\u8fbc\u307f\u6e08\u307f\n\ndef reset_seeds(seed_num=0):\n    np.random.seed(seed_num)\n    random.seed(seed_num)\n    tf.random.set_seed(seed_num)\n    print(\"RANDOM SEEDS RESET\")","d95460c2":"# \u4e71\u6570\u306e\u30ea\u30bb\u30c3\u30c8\nreset_seeds()\n\n#\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\nmodel = keras.models.Sequential([\n  keras.layers.Dense(128, activation='relu'),\n  keras.layers.Dropout(0.2),\n  keras.layers.Dense(10, activation='softmax'),\n])\n\n#\u30e2\u30c7\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\nmodel.compile(optimizer='adam',\n  loss='sparse_categorical_crossentropy',\n  metrics=['accuracy'])\n\n#\u5b66\u7fd2\n#model.fit(x_train, y_train, epochs=3) # \u3053\u3046\u66f8\u3044\u3066\u3082\u5b66\u7fd2\u306f\u3055\u308c\u308b\u304c\u3001\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u623b\u308a\u5024\u3092\u5909\u6570\u306b\u5165\u308c\u308b\nresult = model.fit(x_train, y_train, epochs=3)","32833d18":"result.history.keys()","ceab673a":"#import matplotlib.pyplot as plt # \u8aad\u307f\u8fbc\u307f\u6e08\u307f\n#%matplotlib inline # \u8aad\u307f\u8fbc\u307f\u6e08\u307f\n\nepochs = 3\nplt.plot(range(1, epochs+1), result.history['accuracy'], label=\"training\")\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()","26600035":"def model_1(epochs=5):\n    # \u4e71\u6570\u306e\u30ea\u30bb\u30c3\u30c8\n    reset_seeds()\n\n    #\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\n    model = keras.models.Sequential([\n      keras.layers.Dense(128, activation='relu'),\n      keras.layers.Dropout(0.2),\n      keras.layers.Dense(10, activation='softmax'),\n    ])\n\n    #\u30e2\u30c7\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\n    model.compile(optimizer='adam',\n      loss='sparse_categorical_crossentropy',\n      metrics=['accuracy'])\n\n    #\u5b66\u7fd2\n    result = model.fit(x_train, y_train, epochs=epochs, validation_split=0.2) # \u3053\u3053\uff01\n    \n    return(result, model)","dd9b5a2e":"epochs = 3\nresult , model = model_1(epochs)\nresult.history.keys()","504f9ab2":"def plot_result(result,epochs):\n    plt.plot(range(1, epochs+1), result.history['accuracy'], label=\"training\")\n    plt.plot(range(1, epochs+1), result.history['val_accuracy'], label=\"val\")\n    plt.xlabel('Epochs')\n    plt.ylabel('Accuracy')\n    plt.legend()\n    plt.show()","082b731a":"plot_result(result,epochs)","763455c7":"#from tensorflow.keras.callbacks import EarlyStopping # \u8aad\u307f\u8fbc\u307f\u6e08\u307f\n \ndef model_2(epochs=100):\n    # \u4e71\u6570\u306e\u30ea\u30bb\u30c3\u30c8\n    reset_seeds()\n\n    #\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\n    model = keras.models.Sequential([\n      keras.layers.Dense(128, activation='relu'),\n      keras.layers.Dropout(0.2),\n      keras.layers.Dense(10, activation='softmax'),\n    ])\n\n    #\u30e2\u30c7\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\n    model.compile(optimizer='adam',\n      loss='sparse_categorical_crossentropy',\n      metrics=['accuracy'])\n\n\n    # Early-stopping \n    # \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f val_loss \u306e\u5024\u3092\u76e3\u8996\u3059\u308b\n    early_stopping = EarlyStopping(patience=0, verbose=1)\n    #early_stopping = EarlyStopping(monitor='val_loss', patience=0, verbose=1) # \u3053\u308c\u3067\u3082\u540c\u3058\u3002\n    \n    #\u5b66\u7fd2\n    result = model.fit(x_train, y_train,\n                        epochs=epochs,\n                        validation_split=0.2,\n                        callbacks=[early_stopping]) # \u3053\u3053\uff01\n    \n    return(result, model)","288f03f0":"max_epochs = 100\nresult , model = model_2(max_epochs)\nepochs = len(result.history['val_loss'])\n\nplot_result(result,epochs)","55f8077f":"def model_3(epochs=100):\n    # \u4e71\u6570\u306e\u30ea\u30bb\u30c3\u30c8\n    reset_seeds()\n\n    #\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\n    model = keras.models.Sequential([\n      keras.layers.Dense(10, activation='softmax'),\n    ])\n\n    #\u30e2\u30c7\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\n    model.compile(optimizer='SGD',\n      loss='sparse_categorical_crossentropy',\n      metrics=['accuracy'])\n\n\n    # Early-stopping \n    early_stopping = EarlyStopping(patience=0, verbose=1)\n    \n    #\u5b66\u7fd2\n    result = model.fit(x_train, y_train,\n                        epochs=epochs,\n                        validation_split=0.2,\n                        callbacks=[early_stopping])\n    \n    return(result, model)","32046f64":"result , model = model_3()\nepochs = len(result.history['val_loss'])\n\nplot_result(result,epochs)","700a2a1f":"def model_4(epochs=100):\n    # \u4e71\u6570\u306e\u30ea\u30bb\u30c3\u30c8\n    reset_seeds()\n\n    #\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\n    model = keras.models.Sequential([\n      keras.layers.Dense(10, activation='relu'),\n    ])\n\n    #\u30e2\u30c7\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\n    model.compile(optimizer='SGD',\n      loss='sparse_categorical_crossentropy',\n      metrics=['accuracy'])\n\n\n    # Early-stopping \n    early_stopping = EarlyStopping(patience=0, verbose=1)\n    \n    #\u5b66\u7fd2\n    result = model.fit(x_train, y_train,\n                        epochs=epochs,\n                        validation_split=0.2,\n                        callbacks=[early_stopping])\n    \n    return(result, model)","1e643331":"result , model = model_4()\nepochs = len(result.history['val_loss'])\n\nplot_result(result,epochs)","d141fef4":"def model_5(epochs=100):\n    # \u4e71\u6570\u306e\u30ea\u30bb\u30c3\u30c8\n    reset_seeds()\n\n    #\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\n    model = keras.models.Sequential([\n      keras.layers.Dense(100, activation='relu'),\n      keras.layers.Dense(100, activation='relu'),\n      keras.layers.Dense(10, activation='softmax'),\n    ])\n\n    #\u30e2\u30c7\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\n    model.compile(optimizer='SGD',\n      loss='sparse_categorical_crossentropy',\n      metrics=['accuracy'])\n\n\n    # Early-stopping \n    early_stopping = EarlyStopping(patience=0, verbose=1)\n    \n    #\u5b66\u7fd2\n    result = model.fit(x_train, y_train,\n                        epochs=epochs,\n                        validation_split=0.2,\n                        callbacks=[early_stopping])\n    \n    return(result, model)","c74a782e":"result , model = model_5()\nepochs = len(result.history['val_loss'])\n\nplot_result(result,epochs)","5755ed34":"def model_6(epochs=100):\n    # \u4e71\u6570\u306e\u30ea\u30bb\u30c3\u30c8\n    reset_seeds()\n\n    #\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\n    model = keras.models.Sequential([\n      keras.layers.Dense(100, activation='relu'),\n      keras.layers.Dropout(0.2),\n      keras.layers.Dense(100, activation='relu'),\n      keras.layers.Dropout(0.2),\n      keras.layers.Dense(10, activation='softmax'),\n    ])\n\n    #\u30e2\u30c7\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\n    model.compile(optimizer='SGD',\n      loss='sparse_categorical_crossentropy',\n      metrics=['accuracy'])\n\n\n    # Early-stopping \n    early_stopping = EarlyStopping(patience=0, verbose=1)\n    \n    #\u5b66\u7fd2\n    result = model.fit(x_train, y_train,\n                        epochs=epochs,\n                        validation_split=0.2,\n                        callbacks=[early_stopping])\n    \n    return(result, model)","f9255489":"result , model = model_6()\nepochs = len(result.history['val_loss'])\n\nplot_result(result,epochs)","25d082fb":"def model_7(epochs=100):\n    # \u4e71\u6570\u306e\u30ea\u30bb\u30c3\u30c8\n    reset_seeds()\n\n    #\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\n    model = keras.models.Sequential([\n        keras.layers.Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28,28,1)),\n        keras.layers.MaxPool2D(pool_size=(2,2)),\n        keras.layers.Flatten(),\n        keras.layers.Dropout(0.2),\n        keras.layers.Dense(100, activation='relu'),\n        keras.layers.Dropout(0.2),\n        keras.layers.Dense(10, activation='softmax'),\n    ])\n\n    #\u30e2\u30c7\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\n    model.compile(optimizer='adam',\n      loss='sparse_categorical_crossentropy',\n      metrics=['accuracy'])\n\n\n    # Early-stopping \n    early_stopping = EarlyStopping(patience=0, verbose=1)\n    \n    # \u5b66\u7fd2\u30c7\u30fc\u30bf\u30922\u6b21\u5143\u306b\u5909\u63db\n    x_train_2 = x_train.reshape(-1,28,28,1)\n    \n    #\u5b66\u7fd2\n    result = model.fit(x_train_2, y_train,\n                        epochs=epochs,\n                        validation_split=0.2,\n                        callbacks=[early_stopping])\n    \n    return(result, model)","62f8d491":"result , model = model_7()\nepochs = len(result.history['val_loss'])\n\nplot_result(result,epochs)","a48816a8":"#import inspect # \u8aad\u307f\u8fbc\u307f\u6e08\u307f\nfor a in inspect.getmembers(keras.layers):\n    print(a[0])","a0167777":"#sgd = optimizers.SGD(lr=0.01) #\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3002 lr\u304c\u5b66\u7fd2\u7387\n#model.compile(optimizer=sgd) # \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u4e0a\u3067\u5b9a\u3081\u305f\u5909\u6570\u3092\u6307\u5b9a","455f88db":"#\u3053\u3053\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u304f","03f7a43f":"# CNN\u4ee5\u5916\u306e\u5834\u5408\n#out = model.predict(x_test)\n\n# CNN\u306e\u5834\u5408\nx_test_2 = x_test.values.reshape(-1,28,28,1)\nout = model.predict(x_test_2)\n\n\n# \u4ee5\u4e0b\u3001\u5171\u901a\u90e8\ny_test = [x.argmax() for x in out]\nsubmit_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\nsubmit_df['Label'] = y_test\nsubmit_df.to_csv('submission.csv', index=False)\nprint(\"done.\")","4e3008df":"# 2. \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u6210\u3057\u3066\u307f\u3088\u3046\n\n- \u4ee5\u4e0a\u3067\u6e96\u5099\u306f\u5b8c\u4e86\u3057\u305f\u306e\u3067\u3001\u4e0a\u306emodel_2\u3092\u5909\u66f4\u3059\u308b\u5f62\u3067\u3001\u8272\u3005\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f5c\u3063\u3066\u7d50\u679c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n# 2.1 \u5358\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\n- model_3\u306f\u3001\u3054\u304f\u5358\u7d14\u306a1\u5c64\u306e\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3067\u3059\u3002\n- optimizer \u3082 SGD(\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5)\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n","c2e90675":"## 2.5 \u7573\u307f\u8fbc\u307f\u3092\u3057\u3066\u307f\u3088\u3046(CNN)\n- Conv2D() : \u7573\u307f\u8fbc\u307f\u5c64\n- MaxPool2D() : \u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\n\n- \u7573\u307f\u8fbc\u307f\u306e\u6642\u306b\u306f\u3001\u753b\u7d20\u306e\u5468\u8fba\u60c5\u5831\u3092\u4f7f\u3046\u306e\u3067\u3001flat\u306b\u3057\u3066\u3044\u305f\u30c7\u30fc\u30bf\u3092\u4e8c\u6b21\u5143\u7684\u306b\u4e26\u3079\u76f4\u3057\u307e\u3059\u3002\n    - \u305d\u306e\u90e8\u5206\u304c\u7d42\u308f\u3063\u305f\u3089\u307e\u305fflatten\u3057\u307e\u3059\u3002\n\n\n- \u7573\u307f\u8fbc\u307f\u306e\u5f8c\u306b\u30d7\u30fc\u30ea\u30f3\u30b0\u3059\u308b\u306e\u304c\u30bb\u30aa\u30ea\u30fc\u307f\u305f\u3044\u3067\u3059\u3002\n\n\n- \u66f8\u304d\u65b9\u4f8b\n    - Conv2D(32, kernel_size=(3, 3), activation='relu',input_shape=(28,28,1))\n    - MaxPool2D(pool_size=(2,2))\n    - Flatten()","6d48d28a":"# 4. \u4e88\u6e2c\u3057\u3066\u3001\u30c7\u30fc\u30bf\u3092\u6700\u7d42\u7684\u306b\u51fa\u529b\u3059\u308b\u3068\u3053\u308d\n\n- model\u3068\u3044\u3046\u5909\u6570\u306b\u306f\u3001\u6700\u5f8c\u306b\u5b9f\u884c\u3057\u305f\u5b66\u7fd2\u30e2\u30c7\u30eb\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n- CNN\u3092\u4f7f\u3063\u305f\u5834\u5408\u306f\u3001\u4e88\u6e2c\u3059\u308b\u6642\u306e\u5165\u529b\u30c7\u30fc\u30bf\u3082\u3001reshape\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n","3763d41f":"# keras\u3092\u4f7f\u3063\u305f\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u6210\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\n\n# 0. \u6e96\u5099\n\u2193\u5143\u304b\u3089\u633f\u5165\u3055\u308c\u3066\u3044\u305f\u30b3\u30fc\u30c9\u3002","a3afd7a7":"### 1.1.1 Base\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u3001\u8a08\u7b97\u7d50\u679c\u304c\u56fa\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3002\n\n- 3\u56de\u3050\u3089\u3044\u5b9f\u884c\u3057\u3066\u307f\u3066\u3001\u7d50\u679c\u304c\u540c\u3058\u306b\u306a\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n- \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u30e2\u30c7\u30eb\u306b\u306f\u3001\u3068\u308a\u3042\u3048\u305a\u3053\u3061\u3089\u3067\u5b9f\u88c5\u3057\u305f\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u3082\u306e\u3092\u6d41\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n    - https:\/\/www.kaggle.com\/okadaryotaro\/tensorflow-keras-mnist-base\n\n\n- \u30b7\u30fc\u30c9\u3092\u5909\u3048\u3066\u7d50\u679c\u304c\u5909\u308f\u308b\u306e\u3082\u78ba\u8a8d\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002","0e2fef4b":"### 1.2.1 \u5b66\u7fd2\u66f2\u7dda\u306e\u8868\u793a\n\n- \u3053\u3053\u3067\u306f\u3001accuracy\u3092\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002","506d7cd4":"## 0.1 \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u307f\u8fbc\u307f\n\n- \u5185\u5bb9\u306f\u9806\u306b\u8aac\u660e\u3057\u307e\u3059\u3002","6479c60b":"### 2.6.2 optimizer(\u6700\u9069\u5316\u624b\u6cd5)\u306e\u7a2e\u985e\n\n- \u6700\u9069\u5316 - Keras Documentation https:\/\/keras.io\/ja\/optimizers\/\n\n- SGD(\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5\u3001\u57fa\u672c), Adam(\u65b0\u3057\u3044), RMSprop, Adagrad, Adadelta\u306a\u3069\n ","3dd8698f":"# 1.\u6a5f\u68b0\u5b66\u7fd2\u306e\u305f\u3081\u306eTips\n\n- \u6a5f\u68b0\u5b66\u7fd2\u306e\u305f\u3081\u306b\u5fc5\u8981\u306b\u306a\u308b\u3053\u3068\u306b\u3064\u3044\u3066\u9806\u306b\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n\n- \u53c2\u8003\u6587\u732e\u306a\u3069\n    - Model\u30af\u30e9\u30b9 (functional API) - Keras Documentation https:\/\/keras.io\/ja\/models\/model\/\n    - \u5165\u9580 Keras (6) \u5b66\u7fd2\u904e\u7a0b\u306e\u53ef\u8996\u5316\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0 \u2013 MNIST \u30c7\u30fc\u30bf | \u682a\u5f0f\u4f1a\u793e\u30a4\u30f3\u30d5\u30a3\u30cb\u30c3\u30c8\u30eb\u30fc\u30d7\u6280\u8853\u30d6\u30ed\u30b0 https:\/\/www.infiniteloop.co.jp\/blog\/2018\/02\/learning-keras-06\/\n    - \u76ee\u7684\u95a2\u6570 - Keras Documentation https:\/\/keras.io\/ja\/objectives\/\n    - \u640d\u5931\u95a2\u6570 - Keras Documentation https:\/\/keras.io\/ja\/losses\/\n","55e8de36":"# 2.2 \u51fa\u529b\u306b\u7e4b\u3052\u308b\u3068\u3053\u308d\u306e\u6d3b\u6027\u5316\u95a2\u6570\u3092relu\u306b\u3057\u3066\u307f\u308b\n-\u3069\u3046\u306a\u308b\u306e\u3067\u3057\u3087\u3046","cc95893a":"- \u95a2\u6570\u5b9a\u7fa9\u306b\u3057\u3066\u3044\u307e\u3059\u3002","f8f4e76a":"## 2.4 DropOut\u3092\u5165\u308c\u3066\u307f\u307e\u3057\u3087\u3046","80a53a7b":"### 2.6.3 \u5b66\u7fd2\u7387(Learning Rate)\u306e\u8a2d\u5b9a\n- \u5b66\u7fd2\u7387\u3068\u306f\u3001\u91cd\u307f\u306e\u5909\u66f4\u3092\u3059\u308b\u969b\u306b\u3001\u3069\u308c\u3050\u3089\u3044\u4e00\u6c17\u306b\u5909\u3048\u308b\u304b\u3092\u6c7a\u3081\u308b\u5024\u3067\u3059\u3002\n    - \u3053\u3053\u3067\u306f\u6271\u3044\u307e\u305b\u3093\u304c\u3001epoch\u304c\u9032\u3080\u307b\u3069\u306b\u4e0b\u3052\u305f\u308a\u3068\u3044\u3063\u305f\u4f7f\u3044\u65b9\u3082\u3067\u304d\u307e\u3059\u3002\n- optimizer\u306b\u8ffd\u52a0\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002","b6962b09":"## 1.2 \u5b66\u7fd2\u306e\u53ef\u8996\u5316\n### 1.2.1 history\u306e\u78ba\u8a8d\n\n-\u8fd4\u308a\u5024result\u306b\u306fhistory\u3068\u3044\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\u5b66\u7fd2\u306e\u30ed\u30b0\u304c\u8a18\u9332\u3055\u308c\u3066\u3044\u307e\u3059\u3002keys()\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3067\u4f55\u306e\u30c7\u30fc\u30bf\u304c\u3042\u308b\u304b\u898b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n- \u30b3\u30fc\u30eb\u30d0\u30c3\u30af - Keras Documentation https:\/\/keras.io\/ja\/callbacks\/","82e6c190":"## 1.4 early stopping\n\n- \u4e0a\u306e\u4f8b\u3067\u306f\u3001\u307e\u3060epoch\u6570\u3092\u5897\u3084\u305b\u3070\u5b66\u7fd2\u306f\u3088\u308a\u6700\u9069\u5316\u3055\u308c\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\u3057\u304b\u3057\u3001epoch\u6570\u3092\u3044\u304f\u3064\u306b\u3059\u308c\u3070\u3044\u3044\u306e\u304b\u3068\u3044\u3046\u306e\u306f\u3053\u306e\u307e\u307e\u3067\u306f\u5206\u304b\u308a\u307e\u305b\u3093\u3002\n- early stoppin\u3068\u3044\u3046\u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u3001\u5b66\u7fd2\u306b\u3088\u3063\u3066\u7cbe\u5ea6\u304c\u4e0a\u304c\u3089\u306a\u304f\u306a\u3063\u305f\u3068\u3053\u308d\u3067\u5b66\u7fd2\u3092\u6253\u3061\u5207\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n- \u4f55\u306e\u5024\u3092\u76e3\u8996\u3059\u308b\u304b\u3092\u6c7a\u3081\u3066\u3001\u305d\u306e\u5024\u304c\u5909\u5316\u304c\u7121\u304f\u306a\u3063\u305f\u3089\u305d\u3053\u3067\u5b66\u7fd2\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002\n    - \u30c7\u30d5\u30a9\u30eb\u30c8\u3067'val_loss'\u3068\u3044\u3046\u30e9\u30d9\u30eb\u306e\u5024\u3092\u76e3\u8996\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u4ea4\u5dee\u691c\u8a3c\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u540d\u524d\u3067\u3082\u3042\u308a\u307e\u3059\u3002\n","cd7913b7":"# 3. \u81ea\u5206\u306a\u308a\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\uff01\n\n- kaggle\u306eDigit Recognizer\u306e\u30b3\u30f3\u30da\u3067\u3001\u300cKeras CNN\u300d\u306a\u3069\u3068\u691c\u7d22\u3057\u3066\u3001\u3069\u3093\u306a\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u3044\u308b\u304b\u898b\u3066\u307f\u308b\u306e\u3082\u3044\u3044\u3067\u3057\u3087\u3046\u3002","87d96398":"## 1.3 \u4ea4\u5dee\u691c\u8a3c(cross-validation)\n\n- keras\u306b\u306f\u3001fit\u3059\u308b\u3068\u304d\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u81ea\u52d5\u3067\u5206\u5272\u3057\u3066\u4ea4\u5dee\u691c\u8a3c\u3057\u3066\u304f\u308c\u308b\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002\n    -  validation_split=0.2 \u3053\u308c\u306a\u3089\u300120%\u3092\u691c\u8a3c\u306b\u4f7f\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002","fab5dd77":"# 2.3 \u591a\u5c64\u306e\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3(3\u5c64)\n\n- \u5358\u7d14\u306b\u5c64\u3092\u5897\u3084\u3057\u3066\u307f\u307e\u3057\u3087\u3046","af270ab2":"## 0.2 \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u3068\u524d\u51e6\u7406","2bba844b":"## 1.1 \u4e71\u6570\u306e\u56fa\u5b9a\n\n- Kagggle\u3067\u306f\u3001\u7d50\u679c\u306e\u518d\u73fe\u6027\u304c\u554f\u308f\u308c\u308b\u306e\u3067\u3001\u4e71\u6570\u3092\u56fa\u5b9a\u3057\u3066\u51fa\u6765\u308b\u9650\u308a\u7d50\u679c\u306b\u518d\u73fe\u6027\u3092\u6301\u305f\u305b\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n- \u3057\u304b\u3057\u3001GPU\u3092\u4f7f\u3046\u5834\u5408\u306f\u96e3\u3057\u3044\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u305d\u308c\u306f\u7bc4\u56f2\u5916\u3068\u3057\u307e\u3059\u3002\n- \u4ee5\u4e0b\u306e reset_seeds\u3068\u3044\u3046\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u3044\u3066\u3001\u30e2\u30c7\u30eb\u306e\u69cb\u6210\u524d\u306b\u547c\u3073\u51fa\u3057\u3066\u4e71\u6570\u306e\u521d\u671f\u5024\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n    - tensorflow \u306eversion 1\u7cfb\u3067\u306f\u3001\u3082\u3063\u3068\u3044\u308d\u3044\u308d\u3084\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u306e\u3067\u3059\u304c\u3001version 2\u7cfb\u3067\u306f\u3053\u308c\u3060\u3051\u3067\u3044\u3044\u307f\u305f\u3044\u3067\u3059\u3002\n    - tf.random.set_seed()\u3068\u66f8\u3044\u3066\u3042\u308b\u3068\u3053\u308d\u306f\u3001version1\u3067\u306ftf.set_random_seed()\u3060\u3063\u305f\u308a\u3057\u307e\u3057\u305f\u3002\n","6caf86d8":"- \u300c\u7d50\u679c\u304c\u5909\u308f\u3089\u306a\u304f\u306a\u3063\u305f\u3089\u6b62\u307e\u308b\u300d\u3068\u3044\u3046\u306e\u306f\u3001\u300c\u60aa\u5316\u3057\u305f\u5834\u5408\u300d\u3082\u542b\u307f\u307e\u3059\u3002","82398b19":"- \u666e\u901a\u306f\u691c\u8a3c\u306e\u65b9\u304c\u4f4e\u304f\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u3059\u304c\u3001MNIST\u304c\u90fd\u5408\u304c\u826f\u904e\u304e\u308b\u306e\u304b\u3001\u691c\u8a3c\u306e\u65b9\u304c\u9ad8\u304f\u51fa\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002","a2862b7f":"- \u8868\u793a\u7528\u306e\u90e8\u5206\u3082\u95a2\u6570\u5316\u3057\u3066\u6d41\u7528\u3057\u307e\u3059\u3002","ef6ff75a":"## 2.6 \u305d\u306e\u4ed6Tips\n\n### 2.6.1 \u30ec\u30a4\u30e4\u30fc\u3063\u3066\u3069\u3093\u306a\u306e\u304c\u3042\u308b\u306e\uff1f\n- inspect\u3068\u3044\u3046\u7d44\u307f\u8fbc\u307f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u30e1\u30bd\u30c3\u30c9\u4e00\u89a7\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002(\u30ec\u30a4\u30e4\u30fc\u306b\u9650\u3089\u305a\u3001\u4e00\u822c\u7684\u306b)"}}