{"cell_type":{"fdbb8570":"code","34ce9a0d":"code","3317ad3f":"code","3fa12821":"code","6797356b":"code","03d17c53":"code","6dc9997f":"code","9ad07863":"code","f4ce6069":"code","2f9275c1":"code","f0b55d9c":"code","c71654e2":"code","97ec0304":"code","c6af37d2":"code","20de7c5d":"code","08725240":"code","cbe1b756":"code","1cd1fa18":"code","9cc61862":"code","aa5f94f1":"code","5fb1ed64":"code","293ee181":"code","30400feb":"markdown","0ce87b6c":"markdown","a37d09a8":"markdown","ce60ae5a":"markdown","30dbd9eb":"markdown","719df1e5":"markdown","3c68962d":"markdown"},"source":{"fdbb8570":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport warnings\nwarnings.filterwarnings('ignore')\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","34ce9a0d":"train_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntrain_data.head()","3317ad3f":"X = train_data\ny_train = X.pop(\"label\")\noutput_size = len(np.unique(y_train))\nm = len(y_train)","3fa12821":"y = np.empty([m,output_size])\neye = np.identity(10)\nfor i in range(len(y_train)):\n   y[i,:] = eye[y_train[i],:]\n    \nprint(y)\nprint (y.shape)","6797356b":"Cutoff = int(m * 0.8)\n","03d17c53":"Xtraindf = X.iloc[:Cutoff,:] \nXvaldf = X.iloc[Cutoff:,:]\n\n","6dc9997f":"ydf = pd.DataFrame(y)\ny_traindf = ydf.iloc[:Cutoff,:]\ny_valdf = ydf.iloc[Cutoff:,:]","9ad07863":"X_train = tf.convert_to_tensor(Xtraindf, dtype= tf.float32)\nX_val = tf.convert_to_tensor(Xvaldf, dtype= tf.float32)\ny_train = tf.convert_to_tensor(y_traindf, dtype= tf.float32)\ny_val = tf.convert_to_tensor(y_valdf, dtype= tf.float32)","f4ce6069":"from tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import callbacks\nfrom tensorflow.keras.callbacks import EarlyStopping \n","2f9275c1":"callback = EarlyStopping(\n    monitor = 'val_loss',\n    min_delta=0.001, \n    patience=20, \n    restore_best_weights=True,\n)","f0b55d9c":"model = keras.Sequential ([\n    #layers.Flatten(),\n    layers.Dense(50, activation = \"sigmoid\", input_shape = [784]),\n    layers.Dense(50, activation = \"sigmoid\"),\n    #layers.Dense(50, activation = \"relu\"),\n    layers.Dense(output_size, activation = \"sigmoid\"),\n])","c71654e2":"model.compile(\n    optimizer = 'adam',\n    loss = 'categorical_crossentropy'\n)","97ec0304":"history = model.fit(\n    X_train,y_train,\n    validation_data = (X_val,y_val),\n    batch_size = 200,\n    epochs = 500,\n    callbacks= [callback]\n)","c6af37d2":"lossdf = pd.DataFrame(history.history)\nlossdf.loc[:, ['loss', 'val_loss']].plot()\nprint()\nprint(\"Minimum loss on validation set: {}\".format(lossdf['val_loss'].min()))","20de7c5d":"test_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\ntest_data.head()\nX_test = test_data\nX_test = tf.convert_to_tensor(X_test,dtype = tf.float32)","08725240":"prediction = model.predict(X_test)","cbe1b756":"m_test,n_test = X_test.shape","1cd1fa18":"df = pd.DataFrame(prediction)\ndf.head()","9cc61862":"y_test = np.argmax(prediction, axis = 1)\nprint(y_test)","aa5f94f1":"answer = []\n\nfor i in range (len(y_test)):\n    answer.append(str(y_test[i]))","5fb1ed64":"ID = []\nfor a in range (len(answer)):\n    num = str(a+1)\n    ID.append(num)\n","293ee181":"output = pd.DataFrame({'ImageId': ID, 'Label': answer})\noutput.head()\noutput.size\noutput.to_csv('My_Digit_Recognizer.csv', index=False)\nprint(\"Your submission was successfully saved!\")","30400feb":"**Submit data**","0ce87b6c":"**Training the model**","a37d09a8":"**Load test set and make predictions**","ce60ae5a":"**LOAD DATA**","30dbd9eb":"**Turn data into submission format**","719df1e5":"**DATA MANIPULATION**","3c68962d":"**MODEL**"}}