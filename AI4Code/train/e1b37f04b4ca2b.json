{"cell_type":{"fa742883":"code","642530ea":"code","8403b0cb":"code","81ac6517":"code","c72531ba":"code","5c403b85":"code","422cb399":"code","b60f1c12":"code","67a62cef":"markdown","57906308":"markdown","fc2c96c1":"markdown","d812b57c":"markdown","3874e09c":"markdown","c280323b":"markdown","34520355":"markdown","d07d8f02":"markdown","b4f6fd8b":"markdown","1f31b707":"markdown"},"source":{"fa742883":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","642530ea":"pd.set_option('display.max_columns', None) # Display all columns in the DataFrame as default\npd.set_option('display.max_rows', None) # Display all rows in the DataFrame as default\npd.options.display.float_format = '{:.2f}'.format # Suppresses scientific notation","8403b0cb":"df = pd.read_excel('\/kaggle\/input\/covid19\/dataset.xlsx', sheet_name='All') # Gathering Data: Use Pandas read_excel function to load the DataFrame\ndf.head(n=10) # Show the first 10 rows","81ac6517":"print('DataFrame Shape: ', df.shape) # Show the DataFrame Shape\ndf.describe(include='all') # Show data descriptive summary","c72531ba":"df.replace(to_replace = [\"negative\",\"not_detected\",\"absent\",\"normal\"], value = 0, inplace = True) # Replace to binary\ndf.replace(to_replace = [\"positive\",\"detected\",\"present\"], value = 1, inplace = True) # Replace to binary\ndf.replace(to_replace = [\"not_done\", \"N\u00e3o Realizado\"], value = pd.np.nan, inplace = True) # Replace 'not_done' to NaN\n\n# Leukocytes < 10.000 is considered normal while greater or equal this value is abnormal\ndf[['Urine - Leukocytes']].replace(to_replace = \"<1000\", value = 0, inplace = True) # Replace to zero if equal to <1000\ndf['Urine - Leukocytes'] = pd.to_numeric(df['Urine - Leukocytes'], errors = 'coerce') # Convert to numeric\ndf.loc[df['Urine - Leukocytes'] < 10000, 'Urine - Leukocytes'] = 0 # Replace to zero if < 10000\ndf.loc[df['Urine - Leukocytes'] >= 10000, 'Urine - Leukocytes'] = 1 # Replace to 1 if >= 10000\ndf['Urine - pH'] = pd.to_numeric(df['Urine - pH'], errors = 'coerce') # Convert to numeric\ndf[['Urine - pH']].replace(to_replace = \"5.0\", value = 5, inplace = True) # Adjust number\ndf[['Urine - pH']].replace(to_replace = \"5.5\", value = 5.5, inplace = True) # Adjust number\ndf[['Urine - pH']].replace(to_replace = \"6.0\", value = 6, inplace = True) # Adjust number\ndf[['Urine - pH']].replace(to_replace = \"6.5\", value = 6.5, inplace = True) # Adjust number\ndf[['Urine - pH']].replace(to_replace = \"7.0\", value = 7, inplace = True) # Adjust number\ndf[['Urine - pH']].replace(to_replace = \"7.5\", value = 7.5, inplace = True) # Adjust number\ndf[['Urine - pH']].replace(to_replace = \"8.0\", value = 8, inplace = True) # Adjust number\ndf2 = df.dropna(axis = 'columns', how = 'all') # Exclude columns with NULL values\ndf3 = df2.drop(['Parainfluenza 2', 'Fio2 (venous blood gas analysis)', 'Myeloblasts', 'Urine - Esterase', 'Urine - Bile pigments',\n               'Urine - Ketone Bodies', 'Urine - Urobilinogen', 'Urine - Protein', 'Urine - Hyaline cylinders', 'Urine - Granular cylinders', \n               'Urine - Yeasts'], axis = 'columns') # Remove columns that mean and std are zero or nan\ndf4 = df3.drop(['Urine - Aspect', 'Urine - Crystals', 'Urine - Color'], axis = 'columns') # Remove categorical features with little clinical relevance\nprint('DataFrame Shape: ', df4.shape) # Show the DataFrame Shape","5c403b85":"df4.describe(include='all')","422cb399":"df2 = df.dropna(axis=0, subset=['Hemoglobin'])\ndf2.head()","b60f1c12":"df2.count()","67a62cef":"# Data Display Configuration","57906308":"Just 603 rows were included in our model","fc2c96c1":"# Feature Selection","d812b57c":"We decided to create a model that evaluates exams that have quick results and that are available in places with less laboratory structure.\n\nSome features were not used in the model:","3874e09c":"We have 5644 rows, but most of them does not have information in basic exams (e.g. CBC exam).\n\nPatients who had no CBC were excluded from our model.\n","c280323b":"# Task 1: Predict confirmed COVID-19 cases among suspected cases\n![](https:\/\/www.astellas.com\/br\/system\/files\/coronavirus-cdc.jpg)","34520355":"# Data Understanding","d07d8f02":"# Data Preparation","b4f6fd8b":"# Business Understaning\n\n**TASK 1**\n\n\u2022 Predict confirmed COVID-19 cases among suspected cases.\nBased on the results of laboratory tests commonly collected for a suspected COVID-19 case during a visit to the emergency room, would it be possible to predict the test result for SARS-Cov-2 (positive\/negative)?\n\n**TASK 2**\n\n\u2022 Predict admission to general ward, semi-intensive unit or intensive care unit among confirmed COVID-19 cases.\nBased on the results of laboratory tests commonly collected among confirmed COVID-19 cases during a visit to the emergency room, would it be possible to predict which patients will need to be admitted to a general ward, semi-intensive unit or intensive care unit?","1f31b707":"### Describing, exploring and verifying data quality\n* PatientID: OK (no repeated ID)\n* Paient age quantile: OK\n* SARS-Cov-2 exam result: OK (2 categories)\n* Patient addmited to regular ward: OK (binary)\n* Patient addmited to semi-intensive unit: OK (binary)\n* Patient addmited to intensive care unit: OK (binary)\n* Numerical features Standard: Mean = 0.00; Std = 1.00\n    * Exceptions:\n        * Std = 0.00: 'Myeloblasts'\n        * Std = 1.01: 'Ionized calcium', 'Magnesium', 'Rods #', 'Segmented', 'Promyelocytes', 'Metamyelocytes', 'Myelocytes', 'Urine - Density', 'Urine - Red blood cells' and 'Relationship (Patient\/Normal)'\n        * Std = 1.02: 'Ferritin', 'Arterial Lactic Acid', 'Hb saturation (arterial blood gases)', 'pCO2 (arterial blood gas analysis)', 'Base excess (arterial blood gas analysis)', 'pH (arterial blood gas analysis)', 'Total CO2 (arterial blood gas analysis)', 'HCO3 (arterial blood gas analysis)', 'pO2 (arterial blood gas analysis)' and 'ctO2 (arterial blood gas analysis)'\n        * Std = 1.03: 'Arteiral Fio2' and 'Phosphor'\n        * Std = 1.04: 'Albumin'\n        * Std = 1.07: 'Lipase dosage'\n        * Std = 1.22: 'Vitamin B12' -> Only 3 values\n        * 'Urine - pH': not standardized; values range from 5.5 to 8.0; not summarized because some use a dot as a decimal separator while others use a comma\n        * 'Urine - Leukocytes': not standardized; values range from < 1000 to 5942000; not summarized becuase some rows uses symbol (<)\n* Categorical features Standard: 2 categories - detected or not_detected\n    * Exceptions:\n        * 'Parainfluenza 2': 1 category - all_rows = not_detected\n        * 'Influenza B, rapid test': 2 categories - positive or negative\n        * 'Influenza A, rapid test': 2 categories - positive or negative\n        * 'Strepto A': 3 categories:  - positive, negative or not_done\n        * 'Urine - Esterase': 2 categories - absent or not_done\n        * 'Urine - Aspect': 4 categories - altered_coloring, clear, cloudy or lightly_cloudy\n        * 'Urine - Hemoglobin': 3 categories - absent, present or not_done\n        * 'Urine - Bile pigments': 2 categories - absent or not_done\n        * 'Urine - Ketone Bodies': 2 categories - absent or not_done\n        * 'Urine - Nitrite': 1 categories - not_done\n        * 'Urine - Urobilinogen': 2 categories - normal or not_done\n        * 'Urine - Protein': 2 categories - absent or not_done\n        * 'Urine - Crystals': 5 categories - Ausentes, Oxalato de C\u00e1lcio -++, Oxalato de C\u00e1lcio +++, Urato Amorfo --+ and Urato Amorfo +++\n        * 'Urine - Hyaline cylinders': 1 category - absent\n        * 'Urine - Granular cylinders': 1 category - absent\n        * 'Urine - Yeasts': 1 category - absent\n        * 'Urine - Color': 4 categories - citrus_yellow, light_yellow, orange and yellow\n\n### Critical Data Analysis\n* Std = 0.00 happened because all values was equal to zero\n* Std = 1.01 - 1.22 -> Small differences in Std found due to the sample size. It does not significantly impact the results, being chosen not to perform transformation of these data\n* Urine - pH: adjust the numbero format to allow analysis\n* Urine - Leukocytes: transform in binary data based on reference values for normality (Normal: Leukocytes < 10000)\n* Categorical Features - Binary:\n    * Detected = 1; Not_detected = 0\n    * Positive = 1; Negative = 0; Not_done = NULL\n    * Present = 1; Absent = 0; Not_done = NULL\n    * Normal = 0; Not_done = NULL\n    * N\u00e3o Realizado = NULL\n* Features 'Urine - Aspect', 'Urine - Crystals' and 'Urine - Color' have little clinical relevance. For this reason, we choose not to waste energy on transforming this data\n"}}