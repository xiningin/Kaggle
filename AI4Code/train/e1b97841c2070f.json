{"cell_type":{"e10dfcc9":"code","3692ac05":"code","f7107df9":"code","352cbea2":"code","a8601865":"code","65f6a74f":"code","183ec513":"code","2171a999":"code","45ba58d2":"code","06b27b61":"code","0d4afbee":"code","656a73d3":"code","3ff2e0a6":"code","c00199d4":"code","4e83ecc3":"code","caeb4a1c":"code","0e0c6c14":"code","9b10079f":"code","37eecb89":"code","e75f9ed4":"code","e43d74d1":"code","3eff35a4":"code","1a56bfe0":"code","0a4d53ec":"code","565b0c28":"code","b32ffab0":"code","13f15fc9":"code","8ab69a4b":"code","f3ba2611":"code","eb130e39":"code","a860efca":"code","d41a3057":"code","564b5ab4":"code","11ae9422":"markdown","779d812c":"markdown","b7a2d0b1":"markdown","09a68f17":"markdown"},"source":{"e10dfcc9":"import numpy as np\nimport pandas as pd\nimport pydicom\nimport os\nimport random\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nfrom PIL import Image\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import KFold\n\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M","3692ac05":"def seed_everything(seed=2020):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    \nseed_everything(42)","f7107df9":"ROOT = \"..\/input\/osic-pulmonary-fibrosis-progression\"\nBATCH_SIZE = 128 # Need to see the effect, after reducing batch size","352cbea2":"tr = pd.read_csv(f\"{ROOT}\/train.csv\")\ntr.drop_duplicates(keep=False, inplace=True, subset=['Patient', 'Weeks'])\nchunk = pd.read_csv(f\"{ROOT}\/test.csv\")\n                    \nsub = pd.read_csv(f\"{ROOT}\/sample_submission.csv\")\nsub['Patient'] = sub['Patient_Week'].apply(lambda x:x.split('_')[0])\nsub['Weeks'] = sub['Patient_Week'].apply(lambda x: int(x.split('_')[-1]))\nsub = sub[['Patient', 'Weeks', 'Confidence', 'Patient_Week']]\nsub = sub.merge(chunk.drop('Weeks', axis = 1), on = 'Patient')\nprint(sub.head())","a8601865":"tr['WHERE'] = 'train'\nchunk['WHERE'] = 'val'\nsub['WHERE'] = 'test'\ndata = tr.append([chunk, sub])","65f6a74f":"print(tr.shape, chunk.shape, sub.shape, data.shape)\nprint(tr.Patient.nunique(), chunk.Patient.nunique(), sub.Patient.nunique(), data.Patient.nunique())","183ec513":"data['min_week'] = data['Weeks']\ndata.loc[data.WHERE == 'test', 'min_week'] = np.nan\ndata['min_week'] = data.groupby('Patient')['min_week'].transform('min')\nprint(data['min_week'].head())","2171a999":"base = data.loc[data.Weeks == data.min_week]\nbase = base[['Patient', 'FVC']].copy()\nbase.columns= ['Patient', 'min_FVC']\nbase['nb'] = 1\nbase['nb'] = base.groupby('Patient')['nb'].transform('cumsum')\nbase = base[base.nb == 1]\nbase.drop('nb', axis = 1, inplace = True)\nprint(base.head())","45ba58d2":"data = data.merge(base, on = 'Patient', how = 'left')\ndata['base_week'] = data['Weeks'] - data['min_week']\ndel base","06b27b61":"COLS = ['Sex', 'SmokingStatus']\nFE = []\nfor col in COLS:\n    for mod in data[col].unique():\n        FE.append(mod)\n        data[mod] = (data[col] == mod).astype(int)\n\n","0d4afbee":"#\ndata['age'] = (data['Age'] - data['Age'].min() ) \/ ( data['Age'].max() - data['Age'].min() )\ndata['BASE'] = (data['min_FVC'] - data['min_FVC'].min() ) \/ ( data['min_FVC'].max() - data['min_FVC'].min() )\ndata['week'] = (data['base_week'] - data['base_week'].min() ) \/ ( data['base_week'].max() - data['base_week'].min() )\ndata['percent'] = (data['Percent'] - data['Percent'].min() ) \/ ( data['Percent'].max() - data['Percent'].min() )\nFE += ['age','percent','week','BASE']","656a73d3":"tr = data.loc[data.WHERE=='train']\nchunk = data.loc[data.WHERE=='val']\nsub = data.loc[data.WHERE=='test']\ndel data","3ff2e0a6":"tr.shape, chunk.shape, sub.shape","c00199d4":"C1, C2 = tf.constant(70, dtype='float64'), tf.constant(1000, dtype=\"float64\")\n#=============================#\ndef score(y_true, y_pred):\n    tf.dtypes.cast(y_true, tf.float64)\n    tf.dtypes.cast(y_pred, tf.float64)\n    sigma = y_pred[:, 2] - y_pred[:, 0]\n    fvc_pred = y_pred[:, 1]\n    \n    #sigma_clip = sigma + C1\n    sigma_clip = tf.maximum(sigma, C1)\n    delta = tf.abs(y_true[:, 0] - fvc_pred)\n    delta = tf.minimum(delta, C2)\n    sq2 = tf.sqrt( tf.dtypes.cast(2, dtype=tf.float64) )\n    metric = (delta \/ sigma_clip)*sq2 + tf.math.log(sigma_clip* sq2)\n    return K.mean(metric)\n#============================#\ndef qloss(y_true, y_pred):\n    # Pinball loss for multiple quantiles\n    qs = [0.2, 0.50, 0.8]\n    q = tf.constant(np.array([qs]), dtype=tf.float64)\n    e = y_true - y_pred\n    v = tf.maximum(q*e, (q-1)*e)\n    return K.mean(v)\n#=============================#\ndef mloss(_lambda):\n    def loss(y_true, y_pred):\n        return _lambda * qloss(y_true, y_pred) + (1 - _lambda)*score(y_true, y_pred)\n    return loss\n#=================\ndef make_model(nh):\n    z = L.Input((nh,), name=\"Patient\")\n    x = L.Dense(100, activation=\"relu\", name=\"d1\")(z)\n    x = L.Dense(100, activation=\"relu\", name=\"d2\")(x)\n    #x = L.Dense(100, activation=\"relu\", name=\"d3\")(x)\n    p1 = L.Dense(3, activation=\"linear\", name=\"p1\")(x)\n    p2 = L.Dense(3, activation=\"relu\", name=\"p2\")(x)\n    preds = L.Lambda(lambda x: x[0] + tf.cumsum(x[1], axis=1), \n                     name=\"preds\")([p1, p2])\n    \n    model = M.Model(z, preds, name=\"CNN\")\n    #model.compile(loss=qloss, optimizer=\"adam\", metrics=[score])\n    model.compile(loss=mloss(0.8), optimizer=tf.keras.optimizers.Adam(lr=0.1, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.01, amsgrad=False), metrics=[score])\n    return model","4e83ecc3":"y = tr['FVC'].values\nz = tr[FE].values\nze = sub[FE].values\nnh = z.shape[1]\npe = np.zeros((ze.shape[0], 3))\npred = np.zeros((z.shape[0], 3))","caeb4a1c":"net = make_model(nh)\nprint(net.summary())\nprint(net.count_params())","0e0c6c14":"NFOLD = 5 # originally 5\nkf = KFold(n_splits=NFOLD)","9b10079f":"%%time\ncnt = 0\nEPOCHS = 800\nfor tr_idx, val_idx in kf.split(z):\n    cnt += 1\n    print(f\"FOLD {cnt}\")\n    net = make_model(nh)\n    net.fit(z[tr_idx], y[tr_idx], batch_size=BATCH_SIZE, epochs=EPOCHS, \n            validation_data=(z[val_idx], y[val_idx]), verbose=0) #\n    print(\"train\", net.evaluate(z[tr_idx], y[tr_idx], verbose=0, batch_size=BATCH_SIZE))\n    print(\"val\", net.evaluate(z[val_idx], y[val_idx], verbose=0, batch_size=BATCH_SIZE))\n    print(\"predict val...\")\n    pred[val_idx] = net.predict(z[val_idx], batch_size=BATCH_SIZE, verbose=0)\n    print(\"predict test...\")\n    pe += net.predict(ze, batch_size=BATCH_SIZE, verbose=0) \/ NFOLD\n#==============","37eecb89":"sigma_opt = mean_absolute_error(y, pred[:, 1])\nunc = pred[:,2] - pred[:, 0]\nsigma_mean = np.mean(unc)\nprint(sigma_opt, sigma_mean)","e75f9ed4":"idxs = np.random.randint(0, y.shape[0], 100)\nplt.plot(y[idxs], label=\"ground truth\")\nplt.plot(pred[idxs, 0], label=\"q25\")\nplt.plot(pred[idxs, 1], label=\"q50\")\nplt.plot(pred[idxs, 2], label=\"q75\")\nplt.legend(loc=\"best\")\nplt.show()","e43d74d1":"print(unc.min(), unc.mean(), unc.max(), (unc>=0).mean())","3eff35a4":"plt.hist(unc)\nplt.title(\"uncertainty in prediction\")\nplt.show()","1a56bfe0":"sub.head()","0a4d53ec":"# PREDICTION\nsub['FVC1'] = 1.*pe[:, 1]\nsub['Confidence1'] = pe[:, 2] - pe[:, 0]\nsubm = sub[['Patient_Week','FVC','Confidence','FVC1','Confidence1']].copy()\nsubm.loc[~subm.FVC1.isnull()].head(10)","565b0c28":"subm.loc[~subm.FVC1.isnull(),'FVC'] = subm.loc[~subm.FVC1.isnull(),'FVC1']\nif sigma_mean<70:\n    subm['Confidence'] = sigma_opt\nelse:\n    subm.loc[~subm.FVC1.isnull(),'Confidence'] = subm.loc[~subm.FVC1.isnull(),'Confidence1']","b32ffab0":"subm.head()","13f15fc9":"subm.describe().T","8ab69a4b":"otest = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/test.csv')\nfor i in range(len(otest)):\n    subm.loc[subm['Patient_Week']==otest.Patient[i]+'_'+str(otest.Weeks[i]), 'FVC'] = otest.FVC[i]\n    subm.loc[subm['Patient_Week']==otest.Patient[i]+'_'+str(otest.Weeks[i]), 'Confidence'] = 0.1","f3ba2611":"subm[[\"Patient_Week\",\"FVC\",\"Confidence\"]].to_csv(\"submission_regression.csv\", index=False)","eb130e39":"reg_sub = subm[[\"Patient_Week\",\"FVC\",\"Confidence\"]].copy()","a860efca":"df = reg_sub.sort_values(by=['Patient_Week'], ascending=True).reset_index(drop=True)","d41a3057":"df.head()","564b5ab4":"df.to_csv('submission.csv', index=False)","11ae9422":"**This is work in progress version**","779d812c":"# 1. Loading Libraries and Packages","b7a2d0b1":"**Refrences:**\n\nhttps:\/\/www.kaggle.com\/ulrich07\/osic-multiple-quantile-regression-starter\n\n","09a68f17":"# Further Updates to continue soon..."}}