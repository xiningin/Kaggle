{"cell_type":{"5c323c17":"code","1eff5dbe":"code","42246add":"code","2717ac4b":"code","61e27c27":"code","c2cb7cfa":"code","c7b0ad5b":"code","4806150e":"code","70cb14d3":"code","8832f733":"code","68dbb224":"code","2e04f5b8":"code","b8cb57e2":"code","c1fb8130":"code","4efebf55":"code","1da65ae3":"markdown","b712d88c":"markdown","d6924d07":"markdown","3c8e79b3":"markdown","6e529dc8":"markdown","d4b5a0d6":"markdown","ad3cf430":"markdown","275c4c3a":"markdown","64c0297d":"markdown","4b099d65":"markdown","89685144":"markdown","d40180c7":"markdown","22bbb3b1":"markdown","6e541a64":"markdown","a0d0c0d5":"markdown"},"source":{"5c323c17":"import glob\nimport json\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression","1eff5dbe":"diffs = []\nconfs_1 = []\nconfs_2 = []\ntarget_1 = []\ntarget_2 = []\nmatch_times = []\n\npattern = \"\/kaggle\/input\/simulations-episode-scraper-match-downloader\/*_info.json\"\nfor filename in sorted(glob.glob(pattern)):\n    with open(filename) as fd:\n        json_data_full = json.load(fd)\n        json_data = json_data_full[\"agents\"]\n        \n        if json_data[0][\"submissionId\"] == 22777661:\n            a0, a1 = 0, 1\n        else:\n            a0, a1 = 1, 0\n        \n        if json_data[a0][\"initialConfidence\"] == 0:\n            continue\n\n#         if json_data[a0][\"initialConfidence\"] != 35:\n#             continue\n#         if json_data[a1][\"initialConfidence\"] != 35:\n#             continue\n\n        diffs.append(json_data[a0][\"initialScore\"] - json_data[a1][\"initialScore\"])\n        confs_1.append(json_data[a0][\"initialConfidence\"])\n        confs_2.append(json_data[a1][\"initialConfidence\"])\n        target_1.append(json_data[a0][\"updatedScore\"] - json_data[a0][\"initialScore\"])\n        target_2.append(json_data[a1][\"updatedScore\"] - json_data[a1][\"initialScore\"])\n        match_times.append(json_data_full[\"createTime\"][\"seconds\"])\n        \n\nmatch_times = np.array(match_times)\ndiffs = np.array(diffs)\nconfs_1 = np.array(confs_1)\nconfs_2 = np.array(confs_2)\ntarget_1 = np.array(target_1)\ntarget_2 = np.array(target_2)","42246add":"json_data_full","2717ac4b":"plt.plot(match_times)\nplt.show()","61e27c27":"plt.plot(confs_1)\nplt.show()","c2cb7cfa":"target_1_filtered = []\ntarget_2_filtered = []\ntarget_difference = []\n\nfor c1, c2, t1, t2 in zip(confs_1, confs_2, target_1, target_2):\n    if c1 == c2 == 35:\n        target_1_filtered.append(t1)\n        target_2_filtered.append(t2)\n        target_difference.append(t1+t2)\n        \nplt.plot(target_1_filtered)\nplt.plot(target_2_filtered)\nplt.plot(target_difference)\nplt.show()","c7b0ad5b":"diffs = []\nconfs_1 = []\nconfs_2 = []\ntarget_1 = []\ntarget_2 = []\nmatch_times = []\n\npattern = \"\/kaggle\/input\/simulations-episode-scraper-match-downloader\/*_info.json\"\nfor filename in sorted(glob.glob(pattern)):\n    with open(filename) as fd:\n        json_data_full = json.load(fd)\n        json_data = json_data_full[\"agents\"]\n        \n        if json_data[0][\"reward\"] > json_data[1][\"reward\"]:\n            a0, a1 = 0, 1\n        elif json_data[0][\"reward\"] < json_data[1][\"reward\"]:\n            a0, a1 = 1, 0\n        else:\n            continue\n        \n        if json_data[a0][\"initialConfidence\"] == 0:\n            continue\n\n        if json_data[a0][\"initialConfidence\"] != 35:\n            continue\n#         if json_data[a1][\"initialConfidence\"] != 35:\n#             continue\n\n        diffs.append(json_data[a0][\"initialScore\"] - json_data[a1][\"initialScore\"])\n        confs_1.append(json_data[a0][\"initialConfidence\"])\n        confs_2.append(json_data[a1][\"initialConfidence\"])\n        target_1.append(json_data[a0][\"updatedScore\"] - json_data[a0][\"initialScore\"])\n        target_2.append(json_data[a1][\"updatedScore\"] - json_data[a1][\"initialScore\"])\n        match_times.append(json_data_full[\"createTime\"][\"seconds\"])\n\nmatch_times = np.array(match_times)\ndiffs = np.array(diffs)\nconfs_1 = np.array(confs_1)\nconfs_2 = np.array(confs_2)\ntarget_1 = np.array(target_1)\ntarget_2 = np.array(target_2)","4806150e":"x = diffs\ny = target_1 ** 0.5 \nx = x\ny = y\n\nplt.scatter(x, y, c=confs_2)\n\nX, Y = np.array(x).reshape(-1,1), np.array(y).reshape(-1,1)\nlr = LinearRegression().fit(X, Y)\nplt.plot(X, lr.predict(X))\nplt.show()","70cb14d3":"predicted = (diffs * -0.0038636399198901045 + 2.114669551580679) ** 2\nactual = target_1\n\nplt.scatter(predicted, actual, c=confs_2)\nplt.show()","8832f733":"diffs = []\nconfs_1 = []\nconfs_2 = []\ntarget_1 = []\ntarget_2 = []\nmatch_times = []\n\npattern = \"\/kaggle\/input\/simulations-episode-scraper-match-downloader\/*_info.json\"\nfor filename in sorted(glob.glob(pattern)):\n    with open(filename) as fd:\n        json_data_full = json.load(fd)\n        json_data = json_data_full[\"agents\"]\n        \n        if json_data[0][\"reward\"] > json_data[1][\"reward\"]:\n            a0, a1 = 0, 1\n        elif json_data[0][\"reward\"] < json_data[1][\"reward\"]:\n            a0, a1 = 1, 0\n        else:\n            continue\n        \n        if json_data[a0][\"initialConfidence\"] == 0:\n            continue\n\n#         if json_data[a0][\"initialConfidence\"] != 35:\n#             continue\n#         if json_data[a1][\"initialConfidence\"] != 35:\n#             continue\n\n        diffs.append(json_data[a0][\"initialScore\"] - json_data[a1][\"initialScore\"])\n        confs_1.append(json_data[a0][\"initialConfidence\"])\n        confs_2.append(json_data[a1][\"initialConfidence\"])\n        target_1.append(json_data[a0][\"updatedScore\"] - json_data[a0][\"initialScore\"])\n        target_2.append(json_data[a1][\"updatedScore\"] - json_data[a1][\"initialScore\"])\n        match_times.append(json_data_full[\"createTime\"][\"seconds\"])\n\nmatch_times = np.array(match_times)\ndiffs = np.array(diffs)\nconfs_1 = np.array(confs_1)\nconfs_2 = np.array(confs_2)\ntarget_1 = np.array(target_1)\ntarget_2 = np.array(target_2)","68dbb224":"x = confs_1\ny = ((diffs * -0.0038636399198901045 + 2.114669551580679) - target_1 ** 0.5)\n\nplt.scatter(x, y, c=confs_1)\n\nX, Y = np.array(x).reshape(-1,1), np.array(y).reshape(-1,1)\nlr = LinearRegression().fit(X, Y)\nplt.plot(X, lr.predict(X))\nplt.show()","2e04f5b8":"predicted = ((diffs * -0.0038636399198901045 + 2.114669551580679) - (confs_1*-0.04830843616997959 + 1.6686794100048548)) ** 2\nactual = target_1\n\nplt.scatter(predicted, actual, c=confs_1)\nplt.show()","b8cb57e2":"eps = 10**(-9)\np = np.linspace(0+eps,1-eps,100+1)\nq = (p\/(1-p))**0.5\nm = -0.0038636399198901045\nc = 2.114669551580679\nconverged_difference = (m+c-q*c)\/(m+m*q)","c1fb8130":"plt.plot(p,converged_difference)\nplt.show()","4efebf55":"converged_difference[75]","1da65ae3":"Not really a good estimate, but probably works for now.\n\nHow the `initialConfidence` converges is also unexplored.","b712d88c":"If the `initialConfidence` of both agents is 35, the rating update value cancels out each other.","d6924d07":"We have the exact formula for the rating update, given that `initialConfidence` is 35.","3c8e79b3":"# Hypothesis\n\nFrom the [rules](https:\/\/www.kaggle.com\/c\/lux-ai-2021\/overview\/evaluation)\n\n> After an Episode finishes, we'll update the Rating estimate for all Submissions in that Episode.\n> If one Submission won, we'll increase its $\\mu$ and decrease its opponent's $\\mu$ - if the result was a draw, then we'll move the two $\\mu$ values closer towards their mean.\n> The updates will have magnitude relative to the deviation from the expected result based on the previous $\\mu$ values, and also relative to each Submission's uncertainty $\\sigma$.\n> We also reduce the $\\sigma$ terms relative to the amount of information gained by the result. The score by which your bot wins or loses an Episode does not affect the skill rating updates.\n\nWe hypothesize that the rating update of the winner is only affected by two variables - the initial rating difference and initial confidence of your agent.\n\nWe try to derive the rating update of the winner given only the two variables.\n\nWe will also calculate the expected rating difference between two bots given a win probability.","6e529dc8":"# Variable `initialConfidence`\n\nHowever, the `initialConfidence` of your agent might not be 35. We attempt to derive the rating update value of the winner in the general case.","d4b5a0d6":"For example\n- if your bot win rate against another bot is 100%, your rating will converge to 546.326 more than your opponent\n- if your bot win rate against another bot is 50%, your rating will converge to 0 more than your opponent\n- if your bot win rate against another bot is 75%, your rating will converge to 147.022 more than your opponent","ad3cf430":"We see that first 40 matches are played quickly initially, then the following matches at played at a slower rate.\n\nThis also checks that the matches that we are enumerating are in chronological order.","275c4c3a":"We see that `initialConfidence` the submitted agent generally decreases over time, and converges to 35 at the 70th match.\n\nHowever, apparently, the `initialConfidence` can increase at times in the inital matches.","64c0297d":"# Expected Rating Convergence\n\nFrom the result with `initialConfidence` of your agent fixed, the rating update if you win will be\n\n`(mx + c)**2`\n\nwhere\n* m = -0.0038636399198901045\n* x = how much more initial rating you have compared to your opponent\n* c = 2.114669551580679","4b099d65":"# Data Analysis\n\nWe use matches from an agent submitted by Toad Brigade. The matches were crawled by Rogba. See data section for details.","89685144":"The error term annd the confidence rating follows a somewhat strong linear relationship.","d40180c7":"For a win probability of `p`, the expected rating advantage you are going to converge to is `(m+c-qc)\/(m+mq)`\n\nwhere `q = (p\/(1-p))**0.5`","22bbb3b1":"This is the contents of a sample of `info.json`.","6e541a64":"Even despite different `initialConfidence` of the other agent (see color), the initial rating difference and the root of rating update follows a strong linear relation.\n\nTherefore we can conclude that `initialConfidence` of the other agent does not affect your rating update.","a0d0c0d5":"# Fixed `initialConfidence`"}}