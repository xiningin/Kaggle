{"cell_type":{"5941fc49":"code","d383c1b4":"code","65ebfd6f":"code","9bffc01c":"code","b59cbd6d":"code","242b703a":"code","57047a61":"code","23a15887":"code","989663fb":"code","2cb1b286":"code","3e5e8b8e":"code","84622a4d":"code","e5c8631e":"code","9b84bde6":"code","26e2982c":"code","8417ec48":"code","5c985546":"code","17e64d32":"code","c5ced4bd":"code","db5217df":"code","6c68f45f":"code","aaa33cdb":"code","7c3e3661":"markdown","48d1214b":"markdown","443044fa":"markdown","fa844d42":"markdown","ace3c280":"markdown","3cebaa5b":"markdown","cee31c71":"markdown","6b5da3dc":"markdown","e57ce445":"markdown","ef24b708":"markdown","626d6982":"markdown","b7ec6b78":"markdown","2e093f8f":"markdown","d4a65b85":"markdown","a9502a6c":"markdown","1316e76e":"markdown","644fd23a":"markdown","5d5c97e7":"markdown"},"source":{"5941fc49":"import pandas as pd\nimport numpy as np\nfrom timeit import default_timer as timer\nfrom IPython.display import HTML\nfrom sklearn.model_selection import train_test_split","d383c1b4":"train = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv')\nsample_sub = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv')","65ebfd6f":"train.head()","9bffc01c":"test.head()","b59cbd6d":"x = train.drop(['id', 'target'], axis=1)\ny = train['target']\nx_test = test.drop(['id'], axis=1)","242b703a":"x_train, x_val, y_train, y_val = train_test_split(x, y, test_size=0.1, random_state=0)","57047a61":"from sklearn.preprocessing import StandardScaler\n\nscaler_x = StandardScaler().fit(x_train)\nx_train = scaler_x.transform(x_train)\nx_val = scaler_x.transform(x_val)\nx_test = scaler_x.transform(x_test)","23a15887":"!pip install scikit-learn-intelex -q --progress-bar off","989663fb":"from sklearnex import patch_sklearn\npatch_sklearn()","2cb1b286":"from sklearn.ensemble import StackingRegressor\nimport optuna \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve, auc","3e5e8b8e":"def objective(trial):\n    params ={\n        'C': trial.suggest_float('C', 0.000000001, 1.0),\n        'random_state': 0,\n        'n_jobs': -1,\n    }\n    model = LogisticRegression(**params).fit(x_train, y_train)\n    y_pred = model.predict_proba(x_val)[:, 1]\n    fpr, tpr, _ = roc_curve(y_val, y_pred)\n    score = auc(fpr, tpr)\n    return score","84622a4d":"study = optuna.create_study(sampler=optuna.samplers.TPESampler(seed=123),\n                            direction=\"maximize\",\n                            pruner=optuna.pruners.HyperbandPruner())","e5c8631e":"start = timer()\nstudy.optimize(objective, n_trials=20)\nselect_params_opt = timer() - start\nf\"Intel\u00ae extension for Scikit-learn selection time: {select_params_opt:.2f} s\"","9b84bde6":"x_full = np.concatenate([x_train, x_val])\ny_full = np.concatenate([y_train, y_val])","26e2982c":"start = timer()\nfinal_model = LogisticRegression(**study.best_params, random_state=0, n_jobs=-1).fit(x_full, y_full)\ntrain_opt = timer() - start\nf\"Intel\u00ae extension for Scikit-learn train final model time: {train_opt:.2f} s\"","8417ec48":"y_pred = final_model.predict_proba(x_test)[:, 1]\nsample_sub['target'] = y_pred\nsample_sub.to_csv('submission.csv', index=False)\nsample_sub.head()","5c985546":"from sklearnex import unpatch_sklearn\nunpatch_sklearn()","17e64d32":"from sklearn.linear_model import LogisticRegression","c5ced4bd":"study = optuna.create_study(sampler=optuna.samplers.TPESampler(seed=123),\n                            direction=\"minimize\",\n                            pruner=optuna.pruners.HyperbandPruner())","db5217df":"start = timer()\nstudy.optimize(objective, n_trials=20)\nselect_params_original = timer() - start\nf\"Original Scikit-learn selection time: {select_params_original:.2f} s\"","6c68f45f":"start = timer()\nfinal_model = LogisticRegression(**study.best_params, random_state=0, n_jobs=-1).fit(x_full, y_full)\ntrain_original = timer() - start\nf\"Original Scikit-learn train final model time: {train_original:.2f} s\"","aaa33cdb":"HTML(f'<h2>Selecting parameters speedup: {(select_params_original\/select_params_opt):.2f}x<\/h2>'\n     f'(from {select_params_original:.2f} seconds to {select_params_opt:.2f} seconds)'\n     f'<h2>Training final model speedup: {(train_original\/train_opt):.2f}x<\/h2>'\n     f'(from {train_original:.2f} seconds to {train_opt:.2f} seconds)')","7c3e3661":"<big><strong>Select parameters<\/strong><\/big>","48d1214b":"<h2>Now we use the same algorithms with original Scikit-learn<\/h2>\n<big>Let\u2019s run the same code with original Scikit-learn and compare it's execution time with the execution time of the patched by Intel\u00ae Extension for Scikit-learn.<\/big>","443044fa":"<big>Let's see the execution time without patch.<\/big>","fa844d42":"<big>Patch original scikit-learn.<\/big>","ace3c280":"<h2>Training the model with the selected parameters<\/h2>","3cebaa5b":"<h2>Installing Intel\u00ae Extension for Scikit-learn<\/h2>\n\n<big>Use Intel\u00ae Extension for Scikit-learn* for fast compute Scikit-learn estimators.<\/big>","cee31c71":"<big>For classical machine learning algorithms, we often use the most popular Python library, Scikit-learn. With Scikit-learn you can fit models and search for optimal parameters, but\u202fit\u202fsometimes works for hours.<\/big><br><br>\n\n<big>I want to show you how to use Scikit-learn library and get the results faster without changing the code. To do this, we will make use of another Python library, <strong>\u202f<a href='https:\/\/github.com\/intel\/scikit-learn-intelex'>Intel\u00ae Extension for Scikit-learn*<\/a><\/strong>.<\/big><br><br>\n\n<big>I will show you how to <strong>speed up your kernel more than 17 times<\/strong> without changing your code!<\/big><big>","6b5da3dc":"<h2>Importing data<\/h2>","e57ce445":"<h2>Prediction<\/h2>","ef24b708":"<big>Split the data into features and target.<\/big>","626d6982":"<h2>Using optuna to select parameters for Logistic Regression algorithm<\/h2><br><br>\n<big>Logistic regression is a statistical model that in its basic form uses a logistic function to model a binary dependent variable.<\/big><br><br>\n<big>We adjust hyperparameters for the best result.<\/big><br><br>\n<big>Parameters that we select:<\/big><br>\n<ul>\n<li><big><code>C<\/code> - Parameter inverse to the regularization coefficient.<\/big><\/li><br>\n<li><big><code>solver<\/code> - Algorithm to use in the optimization problem. <\/big><\/li><br>\n<\/ul>","b7ec6b78":"<big>Let's see the execution time with Intel\u00ae Extension for Scikit-learn.<\/big>","2e093f8f":"<big><strong>Select parameters.<\/strong><\/big>","d4a65b85":"<h2>Conclusions<\/h2>\n<big>We can see that using only one classical machine learning algorithm may give you a pretty hight accuracy score. We also use well-known libraries Scikit-learn and Optuna, as well as the increasingly popular library Intel\u00ae Extension for Scikit-learn. Noted that Intel\u00ae Extension for Scikit-learn gives you opportunities to:<\/big>\n\n* <big>Use your Scikit-learn code for training and inference without modification.<\/big>\n* <big>Speed up selection of parameters and training stages<\/big>.\n* <big>Get predictions of the similar quality.<\/big>","a9502a6c":"<big>Predict and save the results in 'submission.csv'.<\/big>","1316e76e":"<big>Split the data into train and validation sets.<\/big>","644fd23a":"<h2>Preprocessing<\/h2>","5d5c97e7":"<big>Normalize the data.<\/big>"}}