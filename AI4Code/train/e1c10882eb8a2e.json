{"cell_type":{"32485760":"code","e1edbdeb":"code","35acd67e":"code","02db3d87":"code","8a0630dd":"code","f01b97ae":"code","8c1d962c":"code","1ee40be8":"code","f64bd19a":"code","ad29179e":"code","4e0e6613":"code","ba5c8f85":"code","aadaddd5":"code","30e83b6d":"code","2afe6437":"code","98cd5244":"code","448f38ea":"code","a309ca4e":"code","cf5a11a1":"code","34ed4ff6":"code","03a0bf63":"code","4f2563ad":"code","1cb9cfa8":"code","fb9794f3":"code","42d9d81d":"code","e1a850ad":"code","6d0714bf":"code","8ed5e5b7":"code","d8916110":"code","36da57e3":"code","b2dac9b4":"code","87532ab0":"code","8c739038":"code","938d673b":"code","7da321ce":"code","1c8cd4a9":"code","902e8ead":"code","ca1f3561":"code","cafb416e":"code","b6162a27":"markdown","fc320482":"markdown","7e5e8a71":"markdown","57dbc31d":"markdown","66e1b167":"markdown","83d998b8":"markdown","8e7e2bcb":"markdown","e55933ef":"markdown","881123e8":"markdown"},"source":{"32485760":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e1edbdeb":"# Set up workspace\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix\n#from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nfrom sklearn.neural_network import MLPClassifier","35acd67e":"# Load data, preserve original data set\ntrain_orig = pd.read_csv('..\/input\/train.csv')\ntest_orig = pd.read_csv('..\/input\/test.csv')","02db3d87":"# create train and test dataframes\ntrain_X = pd.DataFrame(train_orig)\ntest_X = pd.DataFrame(test_orig)","8a0630dd":"train_X.shape","f01b97ae":"test_X.shape","8c1d962c":"# take a peek at the head of train_df\ntrain_X.head()","1ee40be8":"# take a peek at the tail of train_df\ntrain_X.tail()","f64bd19a":"train_X.describe()","ad29179e":"# take a peek at the head of test_df\ntest_X.head()","4e0e6613":"# scatter matrix\nscatters_train = pd.plotting.scatter_matrix(train_X, figsize=[40,40])","ba5c8f85":"# Plot correlations as heatmap\n# Adapted from here: https:\/\/www.kaggle.com\/foutik\/decision-tree\ncorr = train_X.corr()\n_ , ax = plt.subplots( figsize =( 12 , 10 ) )\ncmap = sns.diverging_palette( 220 , 10 , as_cmap = True )\n_ = sns.heatmap(corr, cmap = cmap, square=True, cbar_kws={ 'shrink' : .9 }, ax=ax, annot = True, annot_kws = {'fontsize' : 12 })","aadaddd5":"# Create target_y_df from survived column in train_X_df\n# Then, drop that column from train_df\nactual_y = pd.DataFrame(train_X['Survived'])\ntrain_X = train_X.drop(['Survived'], axis=1)\n# Drop these columns for now. will return to them later\ntrain_X = train_X.drop(['PassengerId'], axis=1)\ntrain_X = train_X.drop(['Embarked'], axis=1)\ntrain_X = train_X.drop(['Ticket'], axis=1)\ntrain_X = train_X.drop(['Name'], axis=1)\ntrain_X = train_X.drop(['Cabin'], axis=1)","30e83b6d":"# Replace missing Fare data with average fare\n# TODO: identify employees of the ship, and change respective data accordingly\ntrain_X.Fare = train_X.Fare.fillna(train_X['Fare'].mean(skipna=True))\ntrain_X.Fare = train_X.Fare.replace(0, train_X['Fare'].mean(skipna=True))","2afe6437":"# Replace missing Age data with average age\ntrain_X.Age = train_X.Age.fillna(train_X['Age'].mean(skipna=True))\ntrain_X.Age = train_X.Age.replace(0, train_X['Age'].mean(skipna=True))","98cd5244":"# check for missing values\ntrain_X.isnull().values.any()","448f38ea":"# check for missing values\ntrain_X.isnull().values.any()","a309ca4e":"train_X.dtypes","cf5a11a1":"# Convert Sex data to 0's or 1's\ntrain_X.loc[train_X.Sex != 'male', 'Sex'] = 0\ntrain_X.loc[train_X.Sex == 'male', 'Sex'] = 1","34ed4ff6":"train_X.head()","03a0bf63":"actual_y.shape","4f2563ad":"# check for missing values\nactual_y.isnull().values.any()","1cb9cfa8":"# check for missing values\nactual_y.isna().values.any()","fb9794f3":"# Replace missing Fare data with average fare\n# TODO: identify employees of the ship, and change respective data accordingly\ntest_X.Fare = test_X.Fare.fillna(test_X['Fare'].mean(skipna=True))\ntest_X.Fare = test_X.Fare.replace(0, test_X['Fare'].mean(skipna=True))","42d9d81d":"# Replace missing Age data with average age\ntest_X.Age = test_X.Age.fillna(test_X['Age'].mean(skipna=True))\ntest_X.Age = test_X.Age.replace(0, test_X['Age'].mean(skipna=True))","e1a850ad":"# Save 'PassengerId' to concatenate w\/ test data output after predictions\ntest_X_passId = test_X.PassengerId","6d0714bf":"test_X_passId.shape","8ed5e5b7":"# dropping these columns for now. will return to them later\ntest_X = test_X.drop(['PassengerId'], axis=1)\ntest_X = test_X.drop(['Embarked'], axis=1)\ntest_X = test_X.drop(['Ticket'], axis=1)\ntest_X = test_X.drop(['Name'], axis=1)\ntest_X = test_X.drop(['Cabin'], axis=1)","d8916110":"# Convert Sex data to 0's or 1's\ntest_X.loc[test_X.Sex != 'male', 'Sex'] = 0\ntest_X.loc[test_X.Sex == 'male', 'Sex'] = 1","36da57e3":"test_X.head()","b2dac9b4":"# check for missing values\ntest_X.isnull().values.any()","87532ab0":"# check for missing values\ntest_X.isna().values.any()","8c739038":"# Set up neural network\nmodel = MLPClassifier(max_iter=2000)","938d673b":"# Grid Search\nparam_grid = {'hidden_layer_sizes': [ (5,), (6,), (7,), (8,), (9,), (10,),\n                        (11,), (12,), (13,), (14,), (15,), (16,),\n                        (17,), (18,), (19,), (20,)]}\ngrid = GridSearchCV(model,param_grid,cv=5)\ngrid.fit(train_X,actual_y)\nprint(\"Grid Search: best parameters:{}\".format(grid.best_params_))","7da321ce":"# Evaluate best model\nbest_model = grid.best_estimator_\n\npredict_y = pd.DataFrame(best_model.predict(train_X))\nprint(\"Accuracy:{}\".format(accuracy_score(actual_y,predict_y)))","1c8cd4a9":"results = pd.DataFrame(best_model.predict(test_X))","902e8ead":"# Add test Passenger ID's to output dataframe\ntitanic_mlp_results = pd.DataFrame(test_X_passId)\n# Create 'Survived' column to store predicted values\ntitanic_mlp_results.insert(1,'Survived', np.nan)","ca1f3561":"# Enter results into survived column of results dataframe\ntitanic_mlp_results.Survived = results","cafb416e":"# Save output, test_predict_dt15, to .csv for submission\ntitanic_mlp_results.to_csv('titanic_mlp_results.csv', index = False)","b6162a27":"## MLP Classifier","fc320482":"## Set up workspace","7e5e8a71":"### Training Data Prep","57dbc31d":"### Accuracy:  ","66e1b167":"\n# Justin Bosscher\n# Kaggle Titantic Comptetition\n## 8th Submission\n## MLPClassifier\n### forked from Cross Validation \/ Grid Search","83d998b8":"### Test Data Prep","8e7e2bcb":"## Prediction","e55933ef":"\n### actual_y","881123e8":"## Data Prep"}}