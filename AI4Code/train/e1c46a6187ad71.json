{"cell_type":{"9222039a":"code","f5c0a6fa":"code","f96b5e6f":"code","a02db3af":"code","f0526268":"code","bb56af6d":"code","60a46cc9":"code","cf45d179":"code","6af338c7":"code","62df0636":"code","792b698c":"code","ebbf7b84":"code","4f42b789":"code","9263b2d9":"code","7cd63c4e":"code","97900449":"code","1c605760":"code","79fe09ad":"code","778ad2c9":"code","69d5528b":"code","4b9f56b5":"code","10a46288":"code","5acf9f4c":"code","7352d262":"code","178827d0":"code","f05c1449":"code","a903cbcb":"code","e08ddf9e":"code","41f13f41":"code","ca798cc8":"code","c4aa9b2d":"code","935b5fd8":"code","830ff5c2":"code","0d4d173d":"code","737c6e18":"code","45b1fa52":"code","e7f9ae9c":"code","fe83083e":"code","cc703c6c":"code","4337bbf5":"code","b646890c":"code","6e634921":"code","83ac2e01":"code","4b3424a2":"code","795631ce":"code","b0e1105c":"code","7422d551":"code","06c9b0be":"code","5dbc1e33":"code","02626969":"code","ddb1872f":"code","4b4a6e7e":"code","e05248f9":"code","2ed2ce2c":"code","8dd41631":"code","c2fa116f":"code","a7547e0e":"code","77a5b2b9":"code","a7322cbe":"code","21ced6a6":"code","a4ec71e2":"code","fbc25dd0":"markdown","eae0a987":"markdown","1f82398a":"markdown","96c92923":"markdown","12ce9865":"markdown","49d8444f":"markdown","4cacad73":"markdown"},"source":{"9222039a":"#Import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","f5c0a6fa":"#Importing dataset from csv to data frame\ndf_traffic_data = pd.read_csv('..\/input\/Metro_Interstate_Traffic_Volume.csv')","f96b5e6f":"df_traffic_data.head()","a02db3af":"df_traffic_data.shape","f0526268":"df_traffic_data.dtypes","bb56af6d":"df_traffic_data.info()","60a46cc9":"df_traffic_data.describe()","cf45d179":"df_traffic_data.describe(include='object')","6af338c7":"print(\"max date :\" +df_traffic_data.date_time.max())\nprint(\"min date :\" +df_traffic_data.date_time.min())","62df0636":"#Plotting frequency of each category in holiday column\nplt.figure(figsize = (8,6))\nsns.countplot(y='holiday', data = df_traffic_data)\nplt.show()","792b698c":"#'None' is far greater than the other days. Removing None data to visualize the others\nholidays = df_traffic_data.loc[df_traffic_data.holiday != 'None']\nplt.figure(figsize=(8,6))\nsns.countplot(y='holiday', data= holidays)\nplt.show()","ebbf7b84":"#plotting distribution of temperature variable\nplt.figure(figsize=(6,4))\nsns.boxplot('temp', data = df_traffic_data)\nplt.show()","4f42b789":"#Temperature is measured in Kelvin, changing to degree celsius to make it more intuitive\n#convert kelvin to celsius\n#(0K \u2212 273.15)\ndf_traffic_data['temp'] = (df_traffic_data['temp']-273.15)\nplt.figure(figsize=(6,4))\nsns.boxplot('temp', data = df_traffic_data)\nplt.show()","9263b2d9":"#There is one data point far away from the rest around -300 degrees celsius. Clearly, this is an error in recording.\n#Eliminating will be eliminated in the data cleaning phase.","7cd63c4e":"#Plotting rain variable\nplt.figure(figsize=(6,4))\nsns.distplot(df_traffic_data.rain_1h)\nplt.show()\n#From the distribution, it shows that the data is extremely skewed. Most of the observations are concentrated around 0.","97900449":"#Plotting observations with values less than 1mm rain shows that more than 40000 observations are around 0.\nplt.hist(df_traffic_data.rain_1h.loc[df_traffic_data.rain_1h<1])\nplt.show()","1c605760":"#Plotting snow variable indicates that data is again skewed and most of the observations have value close to 0.0.\nplt.hist(df_traffic_data.snow_1h)\nplt.show()","79fe09ad":"#clouds_all indicates the cloud coverage for the give day and hour\nsns.distplot(df_traffic_data.clouds_all)\nplt.show()","778ad2c9":"#exploring different categories in weather_main\nsns.countplot(y='weather_main', data=df_traffic_data)","69d5528b":"#exploring different categories in weather_description\nplt.figure(figsize=(10,8))\nsns.countplot(y='weather_description', data=df_traffic_data)\nplt.show()","4b9f56b5":"#Exploring traffic volume on holidays\nplt.figure(figsize=(10,8))\nsns.boxplot(y='holiday',x='traffic_volume', data = holidays)\nplt.show()","10a46288":"#Plotting relationship between temp, rain_1h, snow_1h, cloud_all.\nnum_vars = ['temp','rain_1h','snow_1h','clouds_all','traffic_volume']\nfrom pandas.plotting import scatter_matrix\nscatter_matrix(df_traffic_data[num_vars],figsize=(10,8))\nplt.show()","5acf9f4c":"#plotting temperature against traffic volume\nplt.figure(figsize=(10,8))\nsns.set_style('darkgrid')\nsns.jointplot(y='traffic_volume', x='temp', data = df_traffic_data.loc[df_traffic_data.temp>-50])\nplt.show()","7352d262":"#scatterplot between traffic_volume and temp\nplt.figure(figsize=(8,6))\nsns.scatterplot(y='traffic_volume', x='temp', data = df_traffic_data.loc[df_traffic_data.temp>-50])","178827d0":"#Plotting traffic volume over clouds_all\nplt.figure(figsize=(14,8))\nsns.barplot(x='clouds_all', y = 'traffic_volume', data = df_traffic_data)\nplt.show()","f05c1449":"#Plotting weather_main over traffic volume\nplt.figure(figsize=(8,6))\nsns.barplot(x='weather_main', y = 'traffic_volume', data = df_traffic_data)\nplt.show()","a903cbcb":"#Plotting weather_description over traffic volume\nplt.figure(figsize=(12,8))\nsns.barplot(y='weather_description', x = 'traffic_volume', data = df_traffic_data)\nplt.show()","e08ddf9e":"#correlation between different numeric variables. plot shows no strong correlation between traffic and other variables\nsns.heatmap(df_traffic_data.corr(), annot=True)\nplt.show()","41f13f41":"#copying data to new data frame\ndf_traffic_features = df_traffic_data.copy()","ca798cc8":"#Extracting features from date_time variable\ndf_traffic_features['date_time'] = pd.to_datetime(df_traffic_features.date_time)\ndf_traffic_features['weekday'] = df_traffic_features.date_time.dt.weekday\ndf_traffic_features['date'] = df_traffic_features.date_time.dt.date\ndf_traffic_features['hour'] = df_traffic_features.date_time.dt.hour\ndf_traffic_features['month'] = df_traffic_features.date_time.dt.month\ndf_traffic_features['year'] = df_traffic_features.date_time.dt.year\n#Monday is 0 and Sunday is 6","c4aa9b2d":"df_traffic_features.head()","935b5fd8":"#categorizing hours to different time periods like morning, afternoon etc\ndef hour_modify(x):\n    Early_Morning = [4,5,6,7]\n    Morning = [8,9,10,11]\n    Afternoon = [12,13,14,15]\n    Evening = [16,17,18,19]\n    Night = [20,21,22,23]\n    Late_Night = [24,1,2,3]\n    if x in Early_Morning:\n        return 'Early_Morning'\n    elif x in Morning:\n        return 'Morning'\n    elif x in Afternoon:\n        return 'Afternoon'\n    elif x in Evening:\n        return 'Evening'\n    elif x in Night:\n        return 'Night'\n    else:\n        return 'Late_Night'\n    \ndf_traffic_features['hour'] = df_traffic_features.hour.map(hour_modify)","830ff5c2":"#Traffic volume plotted against weekday. Weekends show less traffic volume.\nplt.figure(figsize=(8,6))\nsns.boxplot(x='weekday', y='traffic_volume', data = df_traffic_features)\nplt.show()","0d4d173d":"#aggreagating traffic volume over year and plotting \n\ndf_date_traffic = df_traffic_features.groupby('year').aggregate({'traffic_volume':'mean'})\nplt.figure(figsize=(8,6))\nsns.lineplot(x = df_date_traffic.index, y = df_date_traffic.traffic_volume, data = df_date_traffic)\nplt.show()","737c6e18":"#Other holidays are very sparse compared to none holidays. \n#Hence encoding the holidays as TRUE and none Holidays as FALSE\n\ndef modify_holiday(x):\n    if x == 'None':\n        return False\n    else:\n        return True\ndf_traffic_features['holiday'] = df_traffic_features['holiday'].map(modify_holiday)","45b1fa52":"#Outlier in temp which was detected earlier needs to be removed\ndf_traffic_features = df_traffic_features.loc[df_traffic_features.temp>-250]","e7f9ae9c":"#Traffic volume difference during holiday and non holiday\nplt.figure(figsize=(8,6))\nsns.barplot(x='holiday', y='traffic_volume', data = df_traffic_features)\nplt.show()","fe83083e":"#clouds, rain and snow distribution over different weather conditions\ndf_traffic_features.groupby('weather_description').aggregate({'traffic_volume':[np.mean,np.size],\n                                                              'clouds_all':'count','rain_1h':'mean','snow_1h':'mean'})","cc703c6c":"df_traffic_features['weather_description'] = df_traffic_features['weather_description'].map(lambda x:x.lower())","4337bbf5":"#The weather description mostly describes rain, snow, thunderstorms, fog, mist and haze.\n\n#I will create following new columns:\n#thunderstorm - True where weather description contains Thunderstorm else False\n#fog - True where weather description contains fog else False\n#mist - True where weather description contains mist else False\n#haze - True where weather description contains haze else False","b646890c":"#Any row containing \"thunderstorm\" is replaced by \"thunderstorm\"\ndf_traffic_features.loc[df_traffic_features['weather_description'].str.contains('thunderstorm'),'weather_description'] = 'thunderstorm'    ","6e634921":"weather = ['thunderstorm','mist','fog','haze']\ndf_traffic_features.loc[np.logical_not(df_traffic_features['weather_description'].isin(weather)),'weather_description'] = 'other'","83ac2e01":"df_traffic_features.weather_description.value_counts()","4b3424a2":"#creating dummy variables for these newly created categories in weather description\ndf_traffic_features = pd.get_dummies(columns=['weather_description'],data=df_traffic_features)","795631ce":"df_traffic_features.rename(columns={'weather_description_fog':'fog', 'weather_description_haze':'haze',\n                                   'weather_description_mist':'mist', 'weather_description_thunderstorm':'thunderstorm'}, inplace = True)\ndf_traffic_features.drop(columns = ['weather_description_other', 'weather_main'], inplace = True)","b0e1105c":"df_traffic_features.columns","7422d551":"#Plotiing rain data shows one outlier data point. Lets remove it.\nplt.figure(figsize=(8,6))\nsns.boxplot('rain_1h',data = df_traffic_features)\nplt.show()","06c9b0be":"sns.boxplot('rain_1h',data = df_traffic_features.loc[df_traffic_features.rain_1h<2000])","5dbc1e33":"#Removing outlier in rain column and converting numeric data to categories\n#rain value equal to 0.0 as no_rain\n#rain value greater than 0.0 is cut into 3 quantiles\n\ndf_traffic_features = df_traffic_features.loc[df_traffic_features.rain_1h<2000]\ndf_traffic_features_temp = df_traffic_features.loc[df_traffic_features.rain_1h>0]\nrain_q = pd.DataFrame(pd.qcut(df_traffic_features_temp['rain_1h'] ,q=3, labels=['light','moderate','heavy']))\ndf_traffic_cat = df_traffic_features.merge(rain_q,left_index=True, right_index=True, how='left')\ndf_traffic_cat['rain_1h_y'] = df_traffic_cat.rain_1h_y.cat.add_categories('no_rain')\ndf_traffic_cat['rain_1h_y'].fillna('no_rain', inplace = True) #no_rain is not in the category, adding it and filling\n\ndf_traffic_cat.drop(columns=['rain_1h_x'], inplace = True)\ndf_traffic_cat.rename(columns={'rain_1h_y':'rain_1h'}, inplace = True)\ndf_traffic_cat.head()","02626969":"#Plotiing snow data shows that it is extremely skewed as observed during univariate analysis\nsns.boxplot('snow_1h',data = df_traffic_features)","ddb1872f":"#only 63 observations have snow greater than 0.0, it can be encoded as no_snow and \ndf_traffic_features.snow_1h[df_traffic_features.snow_1h>0].count()\n#63 columns -> change to snow, no_snow","4b4a6e7e":"def modify_snow1h(x):\n    if x==0:\n        return 'no_snow'\n    else:\n        return 'snow'\n    \ndf_date_traffic['snow_1h'] = df_traffic_cat.snow_1h.map(modify_snow1h)","e05248f9":"df_traffic_features.head()","2ed2ce2c":"#setting date as index\ndf_traffic_cat.set_index('date', inplace = True)","8dd41631":"df_traffic_cat.columns","c2fa116f":"target = ['traffic_volume']\ncat_vars = ['holiday', 'snow_1h','weekday', 'hour', 'month', 'year', 'fog', 'haze','mist', 'thunderstorm', 'rain_1h']\nnum_vars = ['temp','clouds_all']","a7547e0e":"#Creating pipeline to transform data\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.compose import ColumnTransformer\n\nnumeric_transformer = Pipeline(steps=[\n    ('scaler', StandardScaler())])\ncategorical_transformer = Pipeline(steps=[\n    ('oneHot',OneHotEncoder())])\n\npreprocessor = ColumnTransformer(transformers=[\n    ('num',numeric_transformer,num_vars),\n    ('cat',categorical_transformer,cat_vars)])\n\ndf_traffic_transformed = preprocessor.fit_transform(df_traffic_cat).toarray()","77a5b2b9":"#Splitting data into train and test data\n\nX_train = df_traffic_transformed[:32290]\nX_test = df_traffic_transformed[32291:]\ny_train = df_traffic_cat.traffic_volume[:32290]\ny_test = df_traffic_cat.traffic_volume[32291:]","a7322cbe":"#Fitting XGBoost regressor and parameter tuning using Grid search\nfrom sklearn.model_selection import TimeSeriesSplit\nfrom sklearn.model_selection import GridSearchCV\nimport xgboost as xgb\n\ntscv = TimeSeriesSplit(n_splits=3)\nmodel = xgb.XGBRegressor()\n\nparam_grid = {'nthread':[4,6,8], \n              'objective':['reg:linear'],\n              'learning_rate': [.03, 0.05, .07],\n              'max_depth': [5, 6, 7],\n              'min_child_weight': [4],\n              'silent': [1],\n              'subsample': [0.7],\n              'colsample_bytree': [0.7],\n              'n_estimators': [500]}\n\nGridSearch = GridSearchCV(estimator = model,param_grid= param_grid,cv=tscv, n_jobs = 2 )\nGridSearch.fit(X_train, y_train)\ny_pred = GridSearch.predict(X_test)","21ced6a6":"#Root mean square\nfrom sklearn.metrics import mean_squared_error\nRMSE = np.sqrt(mean_squared_error(y_pred=y_pred,y_true=y_test))\nprint(RMSE)","a4ec71e2":"#RMSE is not so great. Next I will explore models specfic for time series data like ARIMA","fbc25dd0":"##### data is collected over 6 years","eae0a987":"### Feature engineering and Data cleaning","1f82398a":"In this notebook, I will explore the effect of temperature, weather conditions, date and time information on Mineeapolis interstate traffic and predict traffic volume given these weather conditions.","96c92923":"### Univariate Analysis","12ce9865":"### Bivariate Analysis\n\nExploring relationship between traffic and other features","49d8444f":"### Metro Interstate Traffic Volume\n\n### Abstract: Hourly Minneapolis-St Paul, MN traffic volume for westbound I-94. Includes weather and holiday features from 2012-2018.\nhttps:\/\/archive.ics.uci.edu\/ml\/datasets\/Metro+Interstate+Traffic+Volume\n\n1. holiday Categorical US National holidays plus regional holiday, Minnesota State Fair \n2. temp Numeric Average temp in kelvin \n3. rain_1h Numeric Amount in mm of rain that occurred in the hour \n4. snow_1h Numeric Amount in mm of snow that occurred in the hour \n5. clouds_all Numeric Percentage of cloud cover \n6. weather_main Categorical Short textual description of the current weather \n7. weather_description Categorical Longer textual description of the current weather \n8. date_time DateTime Hour of the data collected in local CST time \n9. traffic_volume Numeric Hourly I-94 ATR 301 reported westbound traffic volume","4cacad73":"#### No null value is present in the data."}}