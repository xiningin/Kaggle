{"cell_type":{"148435b3":"code","ac4ffe8c":"code","a2635a20":"code","c510b679":"code","74f81e9d":"code","55bddbfb":"code","43bf6bfc":"code","3498b68d":"code","fd29a0e1":"code","be2952bf":"code","9b014dd1":"code","a60b0c38":"code","0cba2465":"code","508e5a96":"code","755a4776":"code","88163f7e":"code","2cb05ed7":"code","6b5719cb":"code","d5934210":"code","416954b9":"code","1b48ece6":"markdown","25c17645":"markdown","c003907b":"markdown","a4f45c95":"markdown","e12387e9":"markdown","eb2927cc":"markdown","cd1b3263":"markdown","1f3c0397":"markdown","458b8b26":"markdown"},"source":{"148435b3":"# !pip install ..\/input\/fastai2-offline\/timm-0.2.1-py3-none-any.whl ..\/input\/fastai2-offline\/wwf-0.0.3-py3-none-any.whl -q","ac4ffe8c":"import pandas as pd\nfrom fastai.vision.all import *\n# from wwf.vision.timm import *\n# from fastai.callback.cutmix import *\n\nimport os","a2635a20":"path = Path('..\/input\/cassava-leaf-disease-classification')\n\n# 2019 and 2020 merge data path\n# data_path = Path('..\/input\/cassava-datasetv2\/cassava_datasetv2')\ndata_path = Path('..\/input\/cassava-leaf-disease-merged')","c510b679":"# train_df = pd.read_csv(data_path\/'train.csv')\ntrain_df = pd.read_csv(data_path\/'merged.csv')\ntrain_df","74f81e9d":"# train_df = train_df[~train_df['image_id'].isin(['1562043567.jpg', '3551135685.jpg', '2252529694.jpg'])]","55bddbfb":"def get_x(r):\n#     return data_path\/'train_images'\/r['image_id']\n    return data_path\/'train'\/r['image_id']\n\ndef get_y(r):\n    return r['label']","43bf6bfc":"def get_data(size=224,bs=128,data_df=train_df):\n    dblock = DataBlock(blocks=(ImageBlock, CategoryBlock),\n                       splitter=RandomSplitter(seed=42),\n                       get_x=get_x, \n                       get_y=get_y,\n                       item_tfms = RandomResizedCrop(size=size, min_scale=0.75, ratio=(1.,1.)),\n                       batch_tfms = [*aug_transforms(size=size, flip_vert=True),Normalize.from_stats(*imagenet_stats)]\n                      )\n    return dblock.dataloaders(data_df,bs=bs)","3498b68d":"dls = get_data(size=112)\ndls.show_batch()","fd29a0e1":"if not os.path.exists('\/root\/.cache\/torch\/hub\/checkpoints\/'):\n        os.makedirs('\/root\/.cache\/torch\/hub\/checkpoints\/')\n!cp '..\/input\/resnet50\/resnet50.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/resnet50-19c8e357.pth'\n# !cp '..\/input\/timm-pretrained-efficientnet\/efficientnet\/efficientnet_b0_ra-3dd342df.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/efficientnet_b0_ra-3dd342df.pth'\n# !cp '..\/input\/timm-pretrained-efficientnet\/efficientnet\/efficientnet_b3_ra2-cf984f9c.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/efficientnet_b3_ra2-cf984f9c.pth'\n# !cp '..\/input\/timm-pretrained-efficientnet\/efficientnet\/tf_efficientnet_b3_ns-9d44bf68.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/tf_efficientnet_b3_ns-9d44bf68.pth'\n# !cp '..\/input\/timm-pretrained-resnet\/resnet\/seresnext26d_32x4d-80fa48a3.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/seresnext26d_32x4d-80fa48a3.pth'\n# !cp '..\/input\/timm-pretrained-resnet\/resnet\/wide_resnet50_2-95faca4d.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/wide_resnet50_2-95faca4d.pth'\n# !cp '..\/input\/timm-pretrained-resnet\/resnet\/resnext50_32x4d_ra-d733960d.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/resnext50_32x4d_ra-d733960d.pth'","be2952bf":"loss_func = LabelSmoothingCrossEntropy()\ncbs = MixUp","9b014dd1":"learn = cnn_learner(dls, resnet50, loss_func=loss_func, metrics=accuracy, cbs=cbs).to_native_fp16()\n\n# learn = timm_learner(dls, 'efficientnet_b3', loss_func=loss_func, metrics=accuracy, cbs=cbs).to_native_fp16()","a60b0c38":"learn.lr_find()","0cba2465":"learn.fine_tune(20, base_lr=1e-2 , freeze_epochs=8)","508e5a96":"learn.dls = get_data()\nlearn.dls.show_batch()","755a4776":"learn.lr_find()","88163f7e":"learn.fine_tune(20, freeze_epochs=8)","2cb05ed7":"learn = learn.to_native_fp32()","6b5719cb":"submission_df = pd.read_csv(path\/'sample_submission.csv')\nsubmission_df","d5934210":"test_data_path = submission_df['image_id'].apply(lambda x: path\/'test_images'\/x)\ntst_dl = learn.dls.test_dl(test_data_path)\npredictions = learn.tta(dl = tst_dl, n=10, beta=0)\n\nsubmission_df['label'] = np.argmax(predictions[0],axis=1)\nsubmission_df","416954b9":"submission_df.to_csv('submission.csv',index=False)","1b48ece6":"# Create Dataloaders","25c17645":"Get dataloader and show the data","c003907b":"# Setup Environment","a4f45c95":"Remove the duplicate image according to this [discussion](https:\/\/www.kaggle.com\/c\/cassava-leaf-disease-classification\/discussion\/198202)\n* '1562043567.jpg' and '3551135685.jpg' (mislabel)\n* '2252529694.jpg' and '911861181.jpg' (duplicate)\n","e12387e9":"prediction using test time augmentation(TTA)","eb2927cc":"# Make Submission file","cd1b3263":"resize to 224","1f3c0397":"# Import Train Data","458b8b26":"# Create learner"}}