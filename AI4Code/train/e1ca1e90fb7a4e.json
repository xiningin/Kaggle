{"cell_type":{"9c6bbbeb":"code","67ab3399":"code","d1522179":"code","01358426":"code","20c3cb43":"code","1ef2cd5e":"code","da01c97b":"code","ff426c73":"code","1cc0499a":"code","5c1725bd":"code","a5f618d8":"code","620b02f7":"code","de35d7e2":"code","528142ad":"code","ca5679e6":"code","950f5883":"markdown","8f749a49":"markdown","b091aaa7":"markdown","70d5a317":"markdown","efde03e8":"markdown"},"source":{"9c6bbbeb":"# Installing the libraries\nimport numpy as np \nimport pandas as pd ","67ab3399":"# Loading the dataset\nsalarydata = pd.read_csv('..\/input\/salarydataset\/Salary_Data.txt')\nsalarydata.head()","d1522179":"# Quick checking on the data characteristics\nsalarydata.info()","01358426":"# Creating objects for the X and Y values\nx = salarydata['YearsExperience'].values\ny = salarydata['Salary'].values","20c3cb43":"# Splitting the dataset into train and test subsets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x,y, test_size = 1\/3, random_state = 5)","1ef2cd5e":"# Checking the resulting subsets\nprint(X_train, end = '\\n\\n')\nprint(X_test, end = '\\n\\n')\nprint(y_train, end = '\\n\\n') \nprint(y_test)","da01c97b":"# Encountered a dimension-related error after fitting the X and Y values. Converting the sets to dataframe as a solution \nX_train = pd.DataFrame(X_train, columns=['Actual_Yrs_train'])\nX_test = pd.DataFrame(X_test, columns=['Actual_Yrs_test'])\ny_train = pd.DataFrame(y_train, columns=['Actual_Salary_train'])\ny_test = pd.DataFrame(y_test, columns=['Actual_Salary_Test'])","ff426c73":"# Creating instance for Linear Regression and fitting the Train sets to the model\nfrom sklearn.linear_model import LinearRegression\nlm = LinearRegression()\nlm.fit(X_train, y_train)","1cc0499a":"# Predicting the Test set and casting it in an object\ny_pred = lm.predict(X_test)\ny_pred","5c1725bd":"# Creating a table showing comparison of the actual observation to the predicted salary\ncomparison = pd.DataFrame(y_pred, columns = ['Prediction'])\ncomparison = pd.concat([X_test, y_test, comparison], axis=1)\ncomparison","a5f618d8":"# In this part, applying the prediction to the Train sets, creating the table of comparison similar to what we did for the Test set\nx_pred = lm.predict(X_train)\ncomparison1 = pd.DataFrame(x_pred, columns = ['Prediction'])\ncomparison1 = pd.concat([X_train, y_train, comparison1], axis=1)\ncomparison1","620b02f7":"# Visualizing the Train set values against the Regression Line (the predicted values of Train set)\nimport matplotlib.pyplot as plt\nplt.scatter(X_train,y_train, c='b', label = 'Actual Salary',)\n#plt.scatter(X_train, lm.predict(X_train), c = 'r', marker=\"^\",label = \"Predicted Salary\", )\nplt.plot(X_train, lm.predict(X_train), label= 'Predicted Salary (Regression Line)', c='g')\nplt.xlabel(\"Years of Experience\")\nplt.ylabel(\"Salary\")\nplt.legend()\nplt.show()","de35d7e2":"# Visualizing the Test set values against the Regression Line (the predicted values of Test set)\nx=sorted(np.array(comparison.Actual_Yrs_test))\ny=sorted(np.array(comparison.Actual_Salary_Test))\nplt.scatter(x,y, c = 'b', marker = 'o',label = 'Actual Salary',alpha=0.5)\nplt.plot(X_test, y_pred, c = 'r',marker = 'X', label = \"Predicted Salary (Regression Line)\", alpha =.5)\nplt.xlabel(\"Years of Experience\")\nplt.ylabel(\"Salary\")\nplt.legend()\nplt.show()","528142ad":"# Residual Plot for the Train set\nimport seaborn as sns\nsns.residplot(x_pred, y_train - x_pred)","ca5679e6":"# Residual Plot for the Test set\nsns.residplot(y_pred, (y_test - y_pred))","950f5883":"### Model Evaluation using Residual Plot\nAs an added value, I tried doing another model evaluation using the residual plot. The visualizations above should already fulfill the same objective, but to exercise and show another means how to evaluate the model, I wanted to do the residual plot which makes use of the Predicted Values and the Residual Values which you can determine by getting the difference of the Actual values (observation) and the Predicted Values. By running these model evaluation using visualization, you would be able to see defects in your data and the accuracy of the model used in training the data as they can easily show over- or underfitting of your model. \n\nRead more about Residual Plot and how to interpret the results at this link: https:\/\/www.qualtrics.com\/support\/stats-iq\/analyses\/regression-guides\/interpreting-residual-plots-improve-regression\/.\n\n","8f749a49":"## Project #2: Predicting Salary Based on Years of Experience\nWelcome! My 1st project felt way advanced as a beginner particularly in Data Modelling part where I had to force-learn myself the concepts of Machine Learning. So for my 2nd project, I will be taking in simple linear regression projects for the mean time starting with this one and then moving gradually to more complex one problem at a time.\n\nCitation: This project is inspired by the work of Omair Aasim from Analytics Vidhya (link: https:\/\/medium.com\/analytics-vidhya\/machine-learning-project-1-predict-salary-using-simple-linear-regression-d83c498d4e05). In a nutshell, it demonstrates how to perform a simple linear regression involving one variable to predict the salary of 30 employees based on the years of experience. I tried to enhance the original work by injecting different methods in extracting the data, visualizing the outcomes, and showing a brief evaluation of the model using Residual Plot. Feel free to comment your observations, suggestions, or ideas to explore and present this data better.","b091aaa7":"### Loading dataset and Creating data variables","70d5a317":"### Model Evaluation using Regression Plot","efde03e8":"### Model Building"}}