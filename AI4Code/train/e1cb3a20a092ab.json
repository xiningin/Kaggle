{"cell_type":{"4bcf333f":"code","58b30b18":"code","d3ced406":"code","669655b9":"code","38fc5bf6":"code","6e888714":"code","3f389791":"code","064b0473":"code","26c51162":"code","082d5d14":"code","2b9cdc1a":"code","4f1ce714":"code","e0c20814":"code","cca2ba42":"code","8491143b":"code","22b633a8":"code","fe7b43db":"code","65a199ef":"code","bab22ea4":"code","a1e68334":"code","1a284607":"code","ca6de0ed":"code","54fae8cb":"code","ed79b43c":"code","fad8fef9":"markdown","e9692417":"markdown"},"source":{"4bcf333f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns  # data visualizaition \n#from sklearn.model_selection import train_test_split    # splitting the data into train and test\nfrom sklearn.metrics import roc_curve, auc   # metrics to evaluate models\nfrom sklearn.metrics import accuracy_score   # metrics to evaluate models\nfrom sklearn.linear_model import LogisticRegression  # create logic regression model using  \nfrom sklearn.model_selection import  RandomizedSearchCV    #hyper paramater tunnning\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","58b30b18":"#load taining & test data\ntrain_df=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\n\n\n# Store target variable of training data in a safe place\nsurvived_train = train_df.Survived\n\n# Concatenate training and test sets\ntitanic = pd.concat([train_df.drop(['Survived'], axis=1), test_df])","d3ced406":"titanic.head(5)","669655b9":"# array of columns in dataset\n#list(train_df.columns.values)\n\n# list of columns in dataset\nlist(titanic.columns)","38fc5bf6":"#datatypes in train data\ntitanic.info()","6e888714":"#statistic table \ntitanic.describe()","3f389791":"#shape of dataset(number of columns & rows)\ntitanic.shape","064b0473":"#missing value in training data\ntitanic.isnull().sum()","26c51162":"#Filling missing value of cabin with 'x'unknown\ntitanic['Cabin'].fillna('x', inplace = True)","082d5d14":"#filling missing value of age column column with mean\ntitanic['Age'].fillna(train_df['Age'].mean(), inplace = True)\n","2b9cdc1a":"#filling missing value of age column column with mean\ntitanic['Fare'].fillna(train_df['Fare'].mean(), inplace = True)","4f1ce714":"titanic.groupby('Embarked').count()","e0c20814":"#filling 2 missing value in 'Embarked' column with 'S' \ntitanic['Embarked'].fillna('S', inplace = True)","cca2ba42":"#distribution of Age \nsns.distplot(titanic['Age'], hist = True) ","8491143b":"#Correlation heatmap\nsns.heatmap(titanic.corr(), annot= True)","22b633a8":"#creating one hot encoding for categorical feature\nlist_categ = ['Pclass','Sex','Cabin','Embarked', 'Parch', 'SibSp']\nPclass_dummy = pd.get_dummies(titanic['Pclass'],drop_first=True, prefix='Pclass')\nSex_dummy = pd.get_dummies(titanic['Sex'],drop_first=True, prefix='Sex')\nCabin_dummy = pd.get_dummies(titanic['Cabin'],drop_first=True,prefix='Cabin')\nEmbarked_dummy = pd.get_dummies(titanic['Embarked'],drop_first=True,prefix = 'Embarked')\nParch_dummy = pd.get_dummies(titanic['Parch'],drop_first=True, prefix='Parch')\nSibSp_dummy = pd.get_dummies(titanic['SibSp'],drop_first=True, prefix='SibSp')","fe7b43db":"# merge all dummified categorical columns\ntitanic= pd.concat([titanic,Pclass_dummy,Sex_dummy,Cabin_dummy,Embarked_dummy,Parch_dummy,SibSp_dummy],1)\ntitanic.shape","65a199ef":"#delete all non dummified columns\ntitanic =titanic.drop(['Pclass', 'Sex','Cabin', 'Embarked', 'Parch', 'SibSp'],axis = 1)\ntitanic.shape","bab22ea4":"titanic.head()","a1e68334":"#prepare train test data\ntrain = titanic.iloc[:891]\ntest = titanic.iloc[891:].drop(['Name','Ticket'],axis =1)\ny = survived_train\nX = train.drop(['Ticket','Name'],axis=1)","1a284607":"#create a logistic regression model\nlogreg = LogisticRegression()\nlogreg.fit(X,y)","ca6de0ed":"test.shape","54fae8cb":"X.shape","ed79b43c":"# rams = { \n#     'n_estimators': [200, 700],\n#     'max_features': ['auto', 'sqrt', 'log2'],\n#     'max_depth':np.arange(5,15,1)\n# }\n# random_search = RandomizedSearchCV(estimator=logreg, param_distributions=params, cv= 5)\n\n# random_search.fit(X, y)\n# print (random_search.best_params_)","fad8fef9":"'Pclass' & 'Fare' are negatively correlated. ","e9692417":" Age distribution is normal "}}