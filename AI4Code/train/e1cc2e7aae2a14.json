{"cell_type":{"3f2352e1":"code","7ae40710":"code","b84cc0ff":"code","ce30b970":"code","49ad67f7":"code","d87f12c2":"code","86b2cbe4":"code","ad89c193":"code","72e0747c":"code","f0153a3f":"code","3b3904b3":"code","9920c8d6":"code","814d84fd":"code","58bbb642":"code","054ac4e7":"code","7895d356":"code","b425a27e":"code","5a951e06":"code","15904f58":"markdown","adbf254f":"markdown","57b39576":"markdown","09b0d7bc":"markdown","ad6698ef":"markdown"},"source":{"3f2352e1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7ae40710":"data = pd.read_csv('..\/input\/heart-disease-prediction-using-logistic-regression\/framingham.csv')\ndata.head()","b84cc0ff":"data.info()","ce30b970":"data.isnull().sum()","49ad67f7":"data['education'].fillna(data['education'].median(),inplace=True)\ndata['cigsPerDay'].fillna(data['cigsPerDay'].median(),inplace=True)\ndata['BPMeds'].fillna(data['BPMeds'].median(),inplace=True)\ndata['totChol'].fillna(data['totChol'].median(),inplace=True)\ndata['BMI'].fillna(data['BMI'].median(),inplace=True)\ndata['heartRate'].fillna(data['heartRate'].median(),inplace=True)\ndata['glucose'].fillna(data['glucose'].median(),inplace=True)\n","d87f12c2":"data.isnull().sum()","86b2cbe4":"X = data.drop('TenYearCHD',axis='columns')\ny = data['TenYearCHD']","ad89c193":"#melakukan normalisasi terhadap data yang kita miliki\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X)\nscaled_data = scaler.transform(X)\nscaled_data = pd.DataFrame(scaled_data, columns= X.columns)\nscaled_data.head()","72e0747c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(scaled_data, y, test_size=0.2, random_state=1)","f0153a3f":"from sklearn.linear_model import LogisticRegression\n \n# latih model dengan fungsi fit\nmodel = LogisticRegression(max_iter=1000)\nmodel.fit(X_train,y_train)","3b3904b3":"y_pred = model.predict(X_test)\n\nprint('actual heart attack')\nprint(y_test.values)\n\nprint('\\n prediksi serangan jantung')\nprint(y_pred)\n\n","9920c8d6":"print('akurasi : ')\nprint(model.score(X_test, y_test) * 100)","814d84fd":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(X)\nX = scaler.transform(X)\ny = y.astype('category')\ny = y.cat.codes","58bbb642":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, shuffle = True,\ntest_size=0.2, random_state = 42)","054ac4e7":"from sklearn.svm import SVC\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.metrics import accuracy_score\n\nclf = make_pipeline(MinMaxScaler(), SVC(kernel='linear'))\nclf.fit(X_train, y_train)","7895d356":"y_pred = clf.predict(X_test)\nacc = accuracy_score(y_test, y_pred )*100\nprint('Akurasi: %.3f' % acc)","b425a27e":"from sklearn.neural_network import MLPClassifier\nclf = MLPClassifier(\n    hidden_layer_sizes=(100, 100, 100),\n    max_iter=500,\n    activation='relu',\n    solver='sgd',\n    learning_rate='constant',\n    learning_rate_init=0.01\n)","5a951e06":"clf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint('Akurasi: %.3f' % acc)","15904f58":"MLP","adbf254f":"logistikLinear","57b39576":"ngisi data kosong\n","09b0d7bc":"SVM","ad6698ef":"data yang hilang:\n    1.education\n    2.cigsperday\n    3.BPMeds\n    4.totChol\n    5.BMI\n    6.heartRate\n    7.glucose\n    "}}