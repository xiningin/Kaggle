{"cell_type":{"0d8eba62":"code","f1980d60":"code","90c6f5d0":"code","780566f7":"code","b48345bd":"code","30e42f30":"code","5f2b0508":"code","019dbff8":"code","6666bab4":"code","f8c492f1":"code","c666b389":"code","339b1be4":"code","ac092274":"code","14fcb4cf":"code","5e236937":"code","e528ceeb":"code","2243ac9a":"code","7752df4a":"code","81ad38bd":"code","2d460aad":"code","240581ad":"code","6c43b0c3":"code","db3166d2":"code","b3f4a45b":"code","e0926139":"code","e67b720b":"code","a7c69630":"code","89f36154":"code","fd9bfe9c":"code","264dfa2c":"code","0ef5773e":"code","cc7c38f3":"code","714f9bb3":"code","b4f09fb7":"code","8c88cc10":"code","ddda541b":"code","97410401":"code","b132603a":"code","d3975a0c":"code","cd433510":"code","b3d9ce7e":"code","ff10935b":"code","1c20741d":"code","f637815e":"code","8bd1688e":"code","efaaabe6":"code","df58555e":"code","b22ed367":"code","cb6c5738":"code","e55ff118":"code","344f3c86":"code","b1dbbd17":"code","aee328b0":"code","ca6cbb51":"code","79d33735":"code","da561da3":"markdown","a092b05d":"markdown","a6a5ac0c":"markdown","c9bcf6bc":"markdown","e5786ed2":"markdown","3cb4cbc7":"markdown","3fe8223e":"markdown","964b828f":"markdown","585a08c7":"markdown","e9601f3c":"markdown","ffc56300":"markdown","15bcfd1e":"markdown","81c4bc86":"markdown","23bfcc6d":"markdown","6dd0d5f8":"markdown"},"source":{"0d8eba62":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","f1980d60":"from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV,RandomizedSearchCV, train_test_split\nfrom sklearn.metrics import accuracy_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns ","90c6f5d0":"df=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","780566f7":"df.sample(10)","b48345bd":"df.info()","30e42f30":"df.isnull().sum()","5f2b0508":"df=df.drop(['Cabin'],axis=1)","019dbff8":"df['Embarked']=df['Embarked'].fillna(df['Embarked'].mode().max())\n","6666bab4":"df.nunique()","f8c492f1":"df=df.drop(['Name','PassengerId','Ticket'],axis=1)","c666b389":"df.sample(10)","339b1be4":"X=df.drop(['Survived'],axis=1)\nage_train=X[X['Age'].notnull()]\nage_test=X[X['Age'].isnull()]","ac092274":"X_age_train=age_train.drop(['Age'],axis=1)\ny_age_train=age_train['Age']\nX_age_test=age_test.drop(['Age'],axis=1)","14fcb4cf":"X_age_train=pd.concat([X_age_train,\n    pd.get_dummies(X_age_train['Sex'],prefix='Sex'),\n    pd.get_dummies(X_age_train['Embarked'],prefix='Embarked')],\n    axis=1)\nX_age_train=X_age_train.drop(columns=['Sex','Embarked','Sex_female'])\n\nX_age_test=pd.concat([X_age_test,\n    pd.get_dummies(X_age_test['Sex'],prefix='Sex'),\n    pd.get_dummies(X_age_test['Embarked'],prefix='Embarked')],\n    axis=1)\nX_age_test=X_age_test.drop(columns=['Sex','Embarked','Sex_female'])","5e236937":"model_age=RandomForestRegressor(random_state=11)","e528ceeb":"param={\n               'n_estimators': list(range(50,250,50)),\n               'max_features': ['log2', 'sqrt'],\n               'max_depth': list(range(1,15,1)),\n               'min_samples_split': list(range(5,25,2)),\n               'min_samples_leaf': list(range(5,25,2)),\n}","2243ac9a":"rs_age = RandomizedSearchCV(model_age, \n                        param, \n                        n_iter = 2000, \n                        cv = 3, \n                        verbose = True, \n                        n_jobs=-1, \n                        random_state=5)","7752df4a":"rs_age.fit(X_age_train,y_age_train)","81ad38bd":"rs_age.best_params_","2d460aad":"y_age_pred=rs_age.predict(X_age_test)","240581ad":"y_age_pred","6c43b0c3":"index=df[df['Age'].isnull()].index\nAge=pd.Series(y_age_pred,index=index)\nfor i in index:\n    df['Age'][i]=Age[i]","db3166d2":"df.sample(10)","b3f4a45b":"df.groupby(['Age'])['Survived'].agg('sum').plot(kind='line')\nplt.title(\"Survival depends on age\")","e0926139":"surv_sex=df.groupby(['Survived','Sex'])['Survived'].agg(count='count').reset_index()\nsns.barplot(x='Sex',y='count',hue='Survived',data=surv_sex)\nplt.title(\"Survival rate in men and women\")","e67b720b":"surv_Pclass=df.groupby(['Survived','Pclass'])['Survived'].agg(count='count').reset_index()\nsns.barplot(x='Pclass',y='count',hue='Survived',data=surv_Pclass)\nplt.title(\"Survival rate in Pclass\")","a7c69630":"surv_Embarked=df.groupby(['Survived','Embarked'])['Survived'].agg(count='count').reset_index()\nsns.barplot(x='Embarked',y='count',hue='Survived',data=surv_Embarked)\nplt.title(\"Survival rate in Embarked\")\n","89f36154":"df.describe()","fd9bfe9c":"def age_func(a):\n    if a<22:\n        return 'Young'\n    elif a>=22 and a<60:\n        return 'Adult'\n    else:\n        return 'Old'\n    ","264dfa2c":"df['age']=[age_func(x) for x in df.Age]","0ef5773e":"df['Sex_Pclass']=df['Sex']+'_'+df['Pclass'].astype('str')\ndf['Sex_age']=df['Sex']+'_'+df['age']\ndf['Sex_Embarked']=df['Sex']+'_'+df['Embarked']","cc7c38f3":"df.sample(10)","714f9bb3":"df=pd.concat([df,pd.get_dummies(df['Sex'], prefix='S'),\n                 pd.get_dummies(df['Sex_Pclass'], prefix='SP'),\n                 pd.get_dummies(df['Sex_age'], prefix='Sa'),\n                 pd.get_dummies(df['Sex_Embarked'], prefix='SE')],axis=1)\n","b4f09fb7":"df=df.drop(columns=['Sex','Embarked','S_female','age','Sex_Pclass','Sex_age','Sex_Embarked'])","8c88cc10":"df.info()","ddda541b":"X=df.drop(['Survived'],axis=1)\ny=df['Survived']","97410401":"X_train,X_valid,y_train,y_valid=train_test_split(X,y,test_size=0.3,random_state=17)","b132603a":"rf=RandomForestClassifier(random_state=17)","d3975a0c":"param={\n               'n_estimators': list(range(150,300,50)),\n               'max_features': list(range(5,10)),\n               'max_depth': list(range(5,15,1)),\n               'min_samples_split': list(range(2,6,2)),\n               'min_samples_leaf': list(range(2,6,2)),\n}","cd433510":"gs=GridSearchCV(rf,param_grid=param,n_jobs=-1,cv=5,verbose=True)","b3d9ce7e":"gs.fit(X_train,y_train)","ff10935b":"gs.best_params_, gs.best_score_","1c20741d":"accuracy_score(y_true=y_valid,y_pred=gs.predict(X_valid))","f637815e":"param={'max_depth': 10,\n  'max_features': 9,\n  'min_samples_leaf': 2,\n  'min_samples_split': 2,\n  'n_estimators': 150}\nrf=RandomForestClassifier(**param,random_state=17)\nrf.fit(X,y)","8bd1688e":"df_test=pd.read_csv('..\/input\/titanic\/test.csv')\ntest=df_test","efaaabe6":"test=test.drop(['Cabin','Name','PassengerId','Ticket'],axis=1)\ntest['Embarked']=test['Embarked'].fillna(test['Embarked'].mode().max())\ntest['Fare']=test['Fare'].fillna(test['Fare'].mean())","df58555e":"age_test=test[test['Age'].isnull()]\nX_age_test=age_test.drop(['Age'],axis=1)","b22ed367":"X_age_test=pd.concat([X_age_test,\n    pd.get_dummies(X_age_test['Sex'],prefix='Sex'),\n    pd.get_dummies(X_age_test['Embarked'],prefix='Embarked')],\n    axis=1)\nX_age_test=X_age_test.drop(columns=['Sex','Embarked','Sex_female'])","cb6c5738":"y_age_pred=rs_age.predict(X_age_test)","e55ff118":"index=test[test['Age'].isnull()].index\nAge=pd.Series(y_age_pred,index=index)\nfor i in index:\n    test['Age'][i]=Age[i]","344f3c86":"test.info()","b1dbbd17":"test['age']=[age_func(x) for x in test.Age]\ntest['Sex_Pclass']=test['Sex']+'_'+test['Pclass'].astype('str')\ntest['Sex_age']=test['Sex']+'_'+test['age']\ntest['Sex_Embarked']=test['Sex']+'_'+test['Embarked']\ntest=pd.concat([test,pd.get_dummies(test['Sex'], prefix='S'),\n                 pd.get_dummies(test['Sex_Pclass'], prefix='SP'),\n                 pd.get_dummies(test['Sex_age'], prefix='Sa'),\n                 pd.get_dummies(test['Sex_Embarked'], prefix='SE')],axis=1)\ntest=test.drop(columns=['Sex','Embarked','S_female','age','Sex_Pclass','Sex_age','Sex_Embarked'])","aee328b0":"test.info()","ca6cbb51":"y_predicted=rf.predict(test)\n","79d33735":"submission = pd.DataFrame({\n        \"PassengerId\": df_test['PassengerId'],\n        \"Survived\": y_predicted\n    })\n\nsubmission.to_csv('titanic_submission', index=False)","da561da3":"# Preprocessing data","a092b05d":"# Divide the data into X and y","a6a5ac0c":"#  To begin with, let's find out how much data is missing","c9bcf6bc":"# Predict the Age","e5786ed2":"![image.png](attachment:0c3b9ba0-564e-4957-a599-fe754f44ee64.png)","3cb4cbc7":"# Load test data and bring it to the train type","3fe8223e":"# Predict and save","964b828f":"# Data visualization and aggregation","585a08c7":"Variables \"Name\", \"PassengerId\"  and \"Ticket\" dropped.","e9601f3c":"# Haha, yeah, titanic again","ffc56300":"# Let's check which variables have many unique values.","15bcfd1e":"\n# Train the model","81c4bc86":"# Preparing data for training","23bfcc6d":"The \"Cabin\" variable has the most missing values this variable is dropped.We will try to predict the variable \"Age\", and not replace it with an mean or median.And we will replace the 3 missing values of the \"Embarked\" variable with the most frequent value.","6dd0d5f8":"# New columns"}}