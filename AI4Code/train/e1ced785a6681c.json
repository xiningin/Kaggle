{"cell_type":{"132acb15":"code","e831920e":"code","940af553":"code","6cfeebb9":"code","98fa18ce":"code","84df1941":"code","79edb74e":"code","2808e988":"code","3bdf95cd":"code","c086424d":"code","810bc336":"code","85a68689":"code","4830477b":"code","573a6f01":"code","f4ccba64":"code","5b1804ac":"code","589a9dc7":"code","9272108e":"code","21af683c":"code","f51a22c7":"code","b516375d":"code","74c5fcd4":"code","50c460a5":"code","7ac779e9":"code","6cd0880f":"code","6e92f414":"code","b8a15fff":"code","4be7b987":"code","5582ba2a":"code","2e6b4f85":"code","b908edb0":"code","b74dca71":"code","3e05b080":"code","49485710":"markdown","7893b9bd":"markdown","1b0ac1c4":"markdown"},"source":{"132acb15":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport warnings\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e831920e":"data = pd.read_csv('..\/input\/data.csv')","940af553":"data.head()","6cfeebb9":"data.info()","98fa18ce":"data.describe()","84df1941":"sns.countplot(x=\"diagnosis\", data=data)\ndata.loc[:,'diagnosis'].value_counts()","79edb74e":"data.drop([\"id\",\"Unnamed: 32\"],axis=1,inplace=True)","2808e988":"# malignant = M  kotu huylu tumor\n# benign = B     iyi huylu tumor\nM = data[data.diagnosis == \"M\"]\nB = data[data.diagnosis == \"B\"]\n","3bdf95cd":"#Scatter Plot\nplt.scatter(M.radius_mean,M.texture_mean,color=\"red\",label=\"Bad\",alpha= 0.4)\nplt.scatter(B.radius_mean,B.texture_mean,color=\"green\",label=\"Good\",alpha= 0.4)\nplt.xlabel(\"radius_mean\")\nplt.ylabel(\"texture_mean\")\nplt.legend()\nplt.show()","c086424d":"data.diagnosis = [1 if each == \"M\" else 0 for each in data.diagnosis]\ny = data.diagnosis.values\nx_data = data.drop([\"diagnosis\"],axis=1)","810bc336":"# normalization \nx = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data))","85a68689":"# train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state=42)\n","4830477b":"# Naive bayes \nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train,y_train)","573a6f01":"print(\"print accuracy of naive bayes algo: \",nb.score(x_test,y_test))\n ","f4ccba64":"x.shape","5b1804ac":"y","589a9dc7":"#CONFUS\u0130ON MATR\u0130X FOR NAIVE BAYES\ny_pred = nb.predict(x_test)\ny_true = y_test\n#%% confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true,y_pred)","9272108e":"f, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","21af683c":"#  train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test,y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state = 42)","f51a22c7":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)","b516375d":"print(\"Decision Tree algorithm accuracy: \", dt.score(x_test,y_test))","74c5fcd4":"#CONFUS\u0130ON MATR\u0130X FOR DESICION TREE\ny_pred = dt.predict(x_test)\ny_true = y_test\n#%% confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true,y_pred)\n","50c460a5":"f, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","7ac779e9":"from sklearn.ensemble import RandomForestClassifier","6cd0880f":"rf = RandomForestClassifier(n_estimators = 100,random_state = 1)\nrf.fit(x_train,y_train)\nprint(\"Random Forest algorithm accuracy: \",rf.score(x_test,y_test))","6e92f414":"#CONFUS\u0130ON MATR\u0130X FOR RANDOM FOREST\ny_pred = rf.predict(x_test)\ny_true = y_test\n#%% confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true,y_pred)","b8a15fff":"f, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","4be7b987":"from sklearn.svm import SVC","5582ba2a":"from sklearn.model_selection import train_test_split\nx_train, x_test,y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state = 42)\n","2e6b4f85":"svm = SVC(random_state = 42)\nsvm.fit(x_train,y_train)","b908edb0":"print(\"SVM algorithm accuracy: \",svm.score(x_test,y_test))","b74dca71":"#CONFUS\u0130ON MATR\u0130X FOR SVM\ny_pred = svm.predict(x_test)\ny_true = y_test\n#%% confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true,y_pred)","3e05b080":"f, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","49485710":"**Random Forest**","7893b9bd":"**Decision Tree**","1b0ac1c4":"**SVM algorithm**"}}