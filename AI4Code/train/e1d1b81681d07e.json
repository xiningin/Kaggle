{"cell_type":{"05dfb95f":"code","77067797":"code","3444b5a4":"code","55cf47ba":"code","8dc0376a":"code","3abfb9ec":"code","8d0b903a":"code","cde13263":"code","404c9981":"code","ac65d174":"code","59f9b449":"code","0bb110a8":"code","0128d5df":"code","54f88f6a":"code","7577c5c9":"code","9755e647":"code","653611e3":"code","c2ffc855":"markdown","8edc58d3":"markdown","5d340da6":"markdown","700dbb6b":"markdown","e3debd4b":"markdown","d579f6be":"markdown","cfec2a08":"markdown","ebb3fc5f":"markdown","47628dad":"markdown","ab919f5e":"markdown","3057d81e":"markdown","a281808c":"markdown","5fdf7be2":"markdown","96a20256":"markdown","ae5cb288":"markdown","22b9a3a8":"markdown","3d4587b9":"markdown","5f83289b":"markdown","ae63a4de":"markdown","999f7f6c":"markdown","beaa1dd9":"markdown","7c53a283":"markdown","d59609c7":"markdown"},"source":{"05dfb95f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style='whitegrid', palette='rainbow')\nfrom scipy.stats import skew, norm\nfrom sklearn.preprocessing import LabelEncoder\nimport lightgbm as lgb\nfrom scipy import stats","77067797":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntrain.head()","3444b5a4":"# extract numeric data\nnum_cols = train.loc[:,train.dtypes != 'object'].drop(['Id'], axis=1).columns\nnum_train = train[num_cols]\n# extract categorical data\ncat_cols = train.loc[:,train.dtypes == 'object'].columns\ncat_train = train[cat_cols]","55cf47ba":"fig, ax = plt.subplots(2,3, figsize=(14,8))\n##### Original\n# histgram\nsns.distplot(train['SalePrice'] , fit=norm, ax=ax[0,0])\nmu, sigma = norm.fit(train['SalePrice'])\nax[0,0].legend([f'Normal dist. ($\\mu=${mu:.2f}, $\\sigma=${sigma:.2f})'], loc='best')\nax[0,0].set_ylabel('Frequency')\nax[0,0].set_title('Distribution(Original)')\n# Q-Q plot\n_ = stats.probplot(train['SalePrice'], plot=ax[0,1])\nax[0,1].set_title('Q-Q plot(Original)')\n# plot boxplot\nsns.boxplot(train['SalePrice'] , orient='v', ax=ax[0,2])\nax[0,2].set_title('Boxplot(Original)')\n\n##### Log-transformation\nlogged = np.log1p(train[\"SalePrice\"])\n# histgram\nsns.distplot(logged , fit=norm, ax=ax[1,0])\nmu, sigma = norm.fit(logged)\nax[1,0].legend([f'Normal dist. ($\\mu=${mu:.2f}, $\\sigma=${sigma:.2f})'], loc='best')\nax[1,0].set_ylabel('Frequency')\nax[1,0].set_title('Distribution(Log-transformation)')\n# Q-Q plot\n_ = stats.probplot(logged, plot=ax[1,1])\nax[1,1].set_title('Q-Q plot(Log-transformation)')\n# plot boxplot\nsns.boxplot(logged , orient='v', ax=ax[1,2])\nax[1,2].set_title('Boxplot(Log-transformation)')\n\nfig.tight_layout()","8dc0376a":"dtype, count = np.unique(train.dtypes.values, return_counts=True)\ndf = pd.DataFrame(data={'count': count}, index=dtype)\nax = df.plot.pie(y='count', autopct=\"%1.1f%%\", figsize=(6,6), legend=False)\nax.set_ylabel('')\nax.set_title('Data Type Ratio', fontsize=18);","3abfb9ec":"# count missing values (extract only over 0)\nmv = train.isnull().sum().sort_values(ascending=False)\nmv = mv[mv.values > 0]\n# convert to percentage\nmv = mv \/ train.shape[0] * 100","8d0b903a":"fig, ax = plt.subplots(figsize=(16,8))\nax = sns.barplot(mv.values,mv.index)\nax.set_xlabel('(%)')\nax.set_ylabel('feature')\nax.set_title('Percentage of missing values', fontsize=16);","cde13263":"# fill nan with \"NULL\"\ntmp_df = train.copy()\ntmp_df[cat_cols] = tmp_df[cat_cols].fillna('NULL')\n# label encoding\nfor col in cat_cols:\n    le = LabelEncoder()\n    le.fit(tmp_df[col])\n    tmp_df[col] = le.transform(tmp_df[col])\n# train data\nX_train = tmp_df.drop(['SalePrice', 'Id'], axis=1)\ny_train = tmp_df['SalePrice']\nlgb_train = lgb.Dataset(X_train, y_train)\nparams = {'objective': 'regression', 'metric': 'rmse'}\ngbm = lgb.train(params, lgb_train)\n# create DataFrame\ncols = train.columns.drop(['Id', 'SalePrice'])\nfeat_importances = pd.DataFrame({'importance': gbm.feature_importance()}, index=X_train.columns).sort_values('importance', ascending=False)\nfeat_importances['dtype'] = ['numeric' if feat in num_cols else 'categorical' for feat in cols]\nfeat_importances.head()","404c9981":"fig, ax = plt.subplots(figsize=(20,10))\nbars = ax.bar(feat_importances.index, feat_importances['importance'])\nleg1 = ax.legend(['categorical'], loc=(0.9, 0.9))\nfig.gca().add_artist(leg1)\n# set labels ans title\nax.set_xlabel('features')\nax.set_ylabel('importance')\nax.set_xticklabels(feat_importances.index, rotation=90)\nax.set_title('Feature importances', fontsize=16)\n# change color of numeric columns\nfor i in np.where(feat_importances['dtype'].values=='numeric')[0]:\n    bars[i].set_color('red')\nleg2 = ax.legend(['numeric'], loc=(0.9, 0.85));","ac65d174":"plt.figure(figsize=(10, 9))\nsns.heatmap(train.drop('Id', axis=1).corr(), cmap='YlGnBu');","59f9b449":"ax = num_train.corr()['SalePrice'].sort_values()[:-1].plot(kind='barh', figsize=(16,10))\nax.set_title('Correlation coefficient with SalePrice', fontsize=16)\nax.set_xlabel('correlation coefficient')\nax.set_ylabel('features');","0bb110a8":"# plot importance of numeric features\nnum_feat_importances = feat_importances.loc[num_cols[:-1]].sort_values('importance', ascending=False)\nax = num_feat_importances.plot.bar(figsize=(16,5))\nax.set_title('Importance of Numeric Features', fontsize=16)\nax.set_xlabel('features')\nax.set_ylabel('count');","0128d5df":"num_train.hist(figsize=(18, 21), bins=30, xlabelsize=8, ylabelsize=8);","54f88f6a":"cols = num_feat_importances.index\nfig, ax = plt.subplots(-(-len(cols)\/\/4), 4, figsize=(14, len(cols)\/1.2))\n\nfor idx,col in enumerate(cols):\n    # show regplot with Sale Price\n    row = idx \/\/ 4\n    col = idx % 4\n    sns.regplot(data=num_train, x=cols[idx], y='SalePrice', ax=ax[row][col])\n    \n    # show correlation coefficient and feature importance\n    corr = num_train['SalePrice'].corr(num_train[cols[idx]])\n    feat_imp = num_feat_importances.loc[cols[idx], 'importance']\n    ax[row][col].set_title(f'corr: {corr:.3f}, importance: {feat_imp}')\n\n    # display scale and label only on the left edge\n    if col != 0:\n        ax[row][col].set_ylabel('')\n        ax[row][col].set_yticklabels('')\n\nfig.tight_layout()","7577c5c9":"# logarithm of numeric data\nlog_num = np.log1p(num_train)\n# compare skewnesses original with log-transformation\nskewness = pd.concat([num_train.apply(lambda x: skew(x.dropna())),\n                      log_num.apply(lambda x: skew(x.dropna()))],\n                     axis=1).rename(columns={0:'original', 1:'log-transformation'}).sort_values('original')\nax = skewness.plot.barh(figsize=(15,12), title='Comparison of skewness of original and log-transformation', width=0.8)\nax.set_xlabel('skewness');","9755e647":"# plot importance of categorical features\ncat_feat_importances = feat_importances.loc[cat_cols].sort_values('importance', ascending=False)\nax = cat_feat_importances.plot.bar(figsize=(15,5))\nax.set_title('Importance of Categorical Features', fontsize=16);","653611e3":"cols = cat_feat_importances.index\nfig, ax = plt.subplots(-(-len(cols)\/\/4), 4, figsize=(14, len(cols)\/1.2))\n\nfor idx,col in enumerate(cols):\n    # show stripplot with Sale Price\n    row = idx \/\/ 4\n    col = idx % 4\n    sns.boxplot(data=pd.concat([cat_train, train['SalePrice']], axis=1), x=cols[idx], y='SalePrice', ax=ax[row][col])\n    \n    # show feature importance\n    feat_imp = cat_feat_importances.loc[cols[idx], 'importance']\n    ax[row][col].set_title(f'importance: {feat_imp}')\n\n    # display scale and label only on the left edge\n    if col != 0:\n        ax[row][col].set_ylabel('')\n        ax[row][col].set_yticklabels('')\n\nfig.tight_layout()","c2ffc855":"## 1.1 Import libraries<a id=\"1.1\"><\/a>\n**Import all required libraries**","8edc58d3":"<a id=\"4\"><\/a><h1 style='background:blue; border:.; color:white'><center>4. Numeric Features<\/center><\/h1>","5d340da6":"## 1.2 Load dataset<a id=\"1.2\"><\/a>\n**Load each data as a Pandas DataFrame**","700dbb6b":"## 5.1 Feature importances<a id=\"5.1\"><\/a>\n**Show the importances of categorical features**","e3debd4b":"## 2.1 Original vs Log-transformation<a id=\"2.1\"><\/a>","d579f6be":"* [1. Preparations](#1)\n    * [1.1 Import libraries](#1.1)\n    * [1.2 Load dataset](#1.2)\n    * [1.3 Split numeric and categorical data](#1.3)\n* [2.SalePrice: Objective variable](#2)\n    * [2.1 Original vs Log-transformation](#2.1)\n* [3. Overall Features](#3)\n    * [3.1 Data Type Ratio](#3.1)\n    * [3.2 Missing Values](#3.2)\n    * [3.3 Feature importances](#3.3)\n* [4. Numeric Features](#4)\n    * [4.1 Correlation Heatmap](#4.1)\n    * [4.2 Correlation coefficient](#4.2)\n    * [4.3 Feature importances](#4.3)\n    * [4.4 Histgram of numeric features](#4.4)\n    * [4.5 Relation of numeric features to target](#4.5)\n    * [4.6 Skewness: Original vs Log-transformation](#4.6)\n* [5. Categorical Features](#5)\n    * [5.1 Feature importances](#5.1)\n    * [5.2 Relation of features to target](#5.2)","cfec2a08":"<a id=\"2\"><\/a><h1 style='background:blue; border:.; color:white'><center>2.SalePrice: Objective variable<\/center><\/h1>","ebb3fc5f":"<a id=\"5\"><\/a><h1 style='background:blue; border:.; color:white'><center>5. Categorical Features<\/center><\/h1>","47628dad":"<a id=\"1\"><\/a><h1 style='background:blue; border:.; color:white'><center>1. Preparations<\/center><\/h1>","ab919f5e":"## 4.2 Correlation coefficient<a id=\"4.2\"><\/a>\n**Show the correlation coefficient with SalePrice**","3057d81e":"## 4.1 Correlation Heatmap<a id=\"4.1\"><\/a>\n**Show the strength of correlation between numerical values**","a281808c":"## 3.2 Missing Values<a id=\"3.2\"><\/a>\n**Show percentage of the missing values**","5fdf7be2":"## 1.3 Split numeric and categorical data<a id=\"1.3\"><\/a>\n**separate numeric and categorical data for further processing**","96a20256":"## 3.1 Data Type Ratio<a id=\"3.1\"><\/a>\n**Display the data types ratio in a pie chart**","ae5cb288":"## 5.2 Relation of features to target<a id=\"5.2\"><\/a>\n**Display the relationship between each caterical data and \"SalePrice\" using seaborn boxplot, and add the future importance**","22b9a3a8":"## 4.4 Histgram of numeric features<a id=\"4.4\"><\/a>\n**Show the histgram of numeric features**","3d4587b9":"## 4.6 Skewness: Original vs Log-transformation<a id=\"4.6\"><\/a>\n**Display the skewness of the logarithmic data side by side with the original**","5f83289b":"# <u>House Prices: Comprehensive EDA & Visualization<\/u>","ae63a4de":"## 4.3 Feature importances<a id=\"4.3\"><\/a>\n**Show the importances of numeric features**","999f7f6c":"## 3.3 Feature importances<a id=\"3.3\"><\/a>\n**Show the feature importances in a bar chart and numeric and categorical data are color coded**","beaa1dd9":"## 4.5 Relation of numeric features to target<a id=\"4.5\"><\/a>\n**Display the relationship between each numeric data and \"SalePrice\" using seaborn regplot, and add the correlation coefficient and future importance**","7c53a283":"<a id=\"3\"><\/a><h1 style='background:blue; border:.; color:white'><center>3. Overall Features<\/center><\/h1>","d59609c7":"This notebook shows you how to quickly visualize the overall features as a first step.  \nIf you like this notebook, please give it an upvote. Thank you! "}}