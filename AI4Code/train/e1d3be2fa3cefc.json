{"cell_type":{"49638c76":"code","bc96e677":"code","e71cd7f5":"code","2637b592":"code","5da77366":"code","c7d33870":"code","a612ea5a":"code","64bf92f9":"code","888035bc":"code","81370cff":"code","89f877cc":"code","b0822371":"code","3a3968ad":"code","831e1aae":"code","708bdb97":"code","ba15170a":"code","dc939545":"code","1c1a2c0e":"code","c24b7629":"code","083038ae":"code","2107bb21":"code","d47bb308":"code","5dbfe952":"code","403faf8f":"code","3d568547":"code","f4ef874b":"code","2e248720":"code","cbce4d01":"code","c6a9f0e1":"code","20be60c3":"code","c65b368b":"code","54d11c92":"code","4cbadfac":"code","b940f9bd":"code","969d93b1":"code","6f401175":"code","aa2546c8":"code","a0ca0c2b":"code","d98b3087":"code","f3e725cf":"code","46eb14b2":"code","a08042de":"code","a1cfce29":"code","fdc45890":"code","beca9d9e":"code","fcdd9d3a":"code","4e649a5a":"code","6a106ffb":"code","8553093c":"code","483b4d52":"code","dc3a04b2":"code","d981b5de":"code","464f6002":"code","fc99f003":"code","569a2464":"code","b9c08c30":"code","9168cda3":"code","85c27717":"code","e1d0d6b1":"code","504118b7":"code","ebc56651":"code","1b63d1d5":"code","2cdd9fe8":"code","f9185abe":"code","029f0d56":"code","ae2ef782":"code","c6747850":"code","b94c7dca":"code","451dae70":"code","81fe974f":"code","a453b703":"code","fd37a7df":"code","7c105ab3":"code","fd8b9c58":"code","102f08f4":"code","1bc5d21b":"code","7602f984":"code","e8fd9fd1":"code","bd107923":"code","159f4e20":"code","b04f248e":"code","c470003d":"code","5d48ca91":"code","c222df14":"code","54a9a290":"code","835ebc16":"code","2deab5f9":"code","335e6bab":"code","2bab2959":"code","c13744d3":"code","e1e89799":"code","d8ab031a":"code","e7a062c3":"code","384d8018":"code","8518877d":"code","6123883b":"code","6a7b94d7":"code","aaf2fb2a":"code","f8b55810":"code","721f2bcb":"code","61aea356":"code","d08888cd":"code","7dba609d":"code","4c72b568":"code","71fa8f76":"code","871aee2c":"code","d6b71c94":"code","9639a8d6":"code","a5df9ac2":"code","5ffb6a8b":"code","11f3ace8":"code","5b730e3f":"code","ea921f34":"code","a8bfdcb1":"code","690f2f57":"code","47c205af":"code","e015034f":"code","c50e7918":"code","cb579c65":"code","5b4b41e8":"code","e3735dfd":"code","60a7f9ac":"code","b761d285":"markdown","b62a1f3a":"markdown","c60bf5cb":"markdown","d5727ab9":"markdown","d0468279":"markdown","3fc169ee":"markdown","f9c65c02":"markdown","eb78af40":"markdown","ba25f006":"markdown","665e2156":"markdown","006a53bf":"markdown","b21aad5a":"markdown","c5ed6988":"markdown","2fc6ff88":"markdown","1a272192":"markdown","817fe126":"markdown","2e5c17f6":"markdown","b87e967d":"markdown","37d68efc":"markdown","92d102e5":"markdown","d43d31d7":"markdown","96f22ba5":"markdown","820cb156":"markdown","cb3aaee5":"markdown","ac685532":"markdown","4bebb68d":"markdown","9b8c93af":"markdown","f796573b":"markdown","1c1fd208":"markdown","807c1742":"markdown","fbc9de02":"markdown","cededda7":"markdown","79408006":"markdown","d7d4fed6":"markdown","777bf95c":"markdown","3607a46a":"markdown","33132177":"markdown","eefbe399":"markdown","36b51195":"markdown","5f963eca":"markdown","bfa33453":"markdown","9ac6f7d3":"markdown","0855cea5":"markdown","02f66f78":"markdown","cae82029":"markdown","d1b53037":"markdown","a2a176d8":"markdown","b2f2b2b2":"markdown","e79aa8c0":"markdown","a112f21b":"markdown","ee50e75c":"markdown","6abb5f27":"markdown","eb4fa67f":"markdown"},"source":{"49638c76":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bc96e677":"#Importing the libraries for the garphs\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nimport plotly.graph_objects as go\n\n#importing the libraries for datapeprocessing\nfrom sklearn.preprocessing import LabelEncoder,StandardScaler\n\n#importing the libraries for splitting the data\nfrom sklearn.model_selection import train_test_split\n\n#Libraries for model building\nfrom sklearn import linear_model\nfrom lightgbm import LGBMRegressor\nfrom sklearn.model_selection import RandomizedSearchCV,GridSearchCV\n\n#import the libraries for checking the metrics\nfrom sklearn.metrics import r2_score,mean_squared_error","e71cd7f5":"df_train = pd.read_csv(\"\/kaggle\/input\/dphi-amsterdam-airbnb-data\/airbnb_listing_train.csv\")\ndf_validate = pd.read_csv(\"\/kaggle\/input\/dphi-amsterdam-airbnb-data\/airbnb_listing_validate.csv\")\ndf_ss=pd.read_csv(\"\/kaggle\/input\/dphi-amsterdam-airbnb-data\/sample_submission.csv\")","2637b592":"def aboutdf (df):\n    count_null = df.isnull().sum()\n    df_stats = pd.DataFrame(index = df.columns, data =\n                           {'datatype': df.dtypes,\n                            'unique_values': df.nunique(),\n                            'have_null?': df.isnull().any(),\n                            'Number of null values' : count_null,\n                            'percentage of null values' : count_null\/df.shape[0]*100 })\n    return df_stats\n","5da77366":"aboutdf(df_train)","c7d33870":"df_train=df_train.drop(columns='neighbourhood_group',axis=1)","a612ea5a":"bool_series = pd.notnull(df_train[\"name\"])\ndf_train[bool_series].name\n","64bf92f9":"df_train.name.describe()","888035bc":"df_train[bool_series].groupby(['name']).size().sort_values(ascending=False).reset_index(name='count').head(100)","81370cff":"d=df_train[bool_series].groupby(['name']).size().sort_values(ascending=False).reset_index(name='count').head(100)\nfig=px.bar(d,\n                           y='name',\n                           x='count',\n                           #size='count',\n                           #color='name',\n                           range_x=[0,30]\n                           )\nfig.update_layout(autosize=False,\n                  height=500,\n                  width=1400,\n                  font=dict(size=15,color=\"#0f0f0f\",family=\"Courier New, monospace\"),\n                 )\nfig.show()","89f877cc":"df_train.host_name.describe()","b0822371":"bool_series1 = pd.notnull(df_train[\"host_name\"])\ndf_train[bool_series1].host_name\n","3a3968ad":"df_train[bool_series1].groupby(['host_name']).size().sort_values(ascending=False).reset_index(name='count').head(100)\n","831e1aae":"d=df_train[bool_series1].groupby(['host_name']).size().sort_values(ascending=False).reset_index(name='count').head(100)\nfig=px.bar(d,\n                           y='host_name',\n                           x='count',\n                           #size='count',\n                           #color='name',\n                           range_x=[0,80]\n                           )\nfig.update_layout(autosize=False,\n                  height=500,\n                  width=1400,\n                  font=dict(size=15,color=\"#0f0f0f\",family=\"Courier New, monospace\"),\n                 )\nfig.show()","708bdb97":"df_train.neighbourhood.describe()","ba15170a":"df_train.groupby(['neighbourhood']).size().sort_values(ascending=False).reset_index(name='count')","dc939545":"d=df_train.groupby(['neighbourhood']).size().sort_values(ascending=False).reset_index(name='count')\nfig=px.bar(d,\n                           y='neighbourhood',\n                           x='count',\n                           #size='count',\n                           #color='name',\n                           range_x=[0,2500]\n                           )\nfig.update_layout(autosize=False,\n                  height=500,\n                  width=1400,\n                  font=dict(size=15,color=\"#0f0f0f\",family=\"Courier New, monospace\"),\n                 )\nfig.show()","1c1a2c0e":"df_train.room_type.unique","c24b7629":"d=df_train.groupby(['room_type']).size().sort_values(ascending=False).reset_index(name='count')\nfig=px.bar(d,\n                           y='room_type',\n                           x='count',\n                           #size='count',\n                           #color='name',\n                           #range_y=[0,5]\n                           )\nfig.update_layout(autosize=False,\n                  height=500,\n                  width=1400,\n                  font=dict(size=15,color=\"#0f0f0f\",family=\"Courier New, monospace\"),\n                 )\nfig.show()","083038ae":"df_train.minimum_nights.describe()","2107bb21":"d=df_train.groupby(['minimum_nights']).size().sort_values(ascending=False).reset_index(name='count').head(100)\nfig=px.scatter(d,\n                           x='minimum_nights',\n                           y='count',\n                           size='minimum_nights',\n                           color='minimum_nights',\n                           range_x=[0,1005],\n                           range_y=[0,80]\n                           )\nfig.update_layout(autosize=False,\n                  height=500,\n                  width=1400,\n                  font=dict(size=15,color=\"#0f0f0f\",family=\"Courier New, monospace\"),\n                 )\nfig.show()","d47bb308":"df_train.number_of_reviews.describe()","5dbfe952":"df_train.groupby(['number_of_reviews']).size().sort_values(ascending=False).reset_index(name='count')","403faf8f":"d=df_train.groupby(['number_of_reviews']).size().sort_values(ascending=False).reset_index(name='count')\nfig=px.scatter(d,\n                           x='number_of_reviews',\n                           y='count',\n                           size='count',\n                           color='number_of_reviews',\n                           range_y=[0,1700],\n                           range_x=[0,900]\n                           )\nfig.update_layout(autosize=False,\n                  height=500,\n                  width=1400,\n                  font=dict(size=15,color=\"#0f0f0f\",family=\"Courier New, monospace\"),\n                 )\nfig.show()","3d568547":"df_train.last_review.describe()","f4ef874b":"df_train.last_review","2e248720":"d=df_train.groupby(['last_review']).size().sort_values(ascending=False).reset_index(name='count').head(100)\nfig=px.scatter(d,\n                           x='last_review',\n                           y='count',\n                           size='count',\n                           color='last_review',\n                           range_y=[0,300],\n                           #range_x=[0,900]\n                           )\nfig.update_layout(autosize=False,\n                  height=500,\n                  width=1400,\n                  font=dict(size=15,color=\"#0f0f0f\",family=\"Courier New, monospace\"),\n                 )\nfig.show()","cbce4d01":"df_train.reviews_per_month.describe()","c6a9f0e1":"df_train.calculated_host_listings_count.describe()","20be60c3":"df_train.availability_365.describe()","c65b368b":"d=df_train.groupby(['availability_365']).size().sort_values(ascending=False).reset_index(name='count')\nfig=px.scatter(d,\n                           x='availability_365',\n                           y='count',\n                           size='availability_365',\n                           color='availability_365',\n                           range_y=[0,200],\n                           #range_x=[0,900]\n                           )\nfig.update_layout(autosize=False,\n                  height=500,\n                  width=1400,\n                  font=dict(size=15,color=\"#0f0f0f\",family=\"Courier New, monospace\"),\n                 )\nfig.show()","54d11c92":"df_train.price.describe()","4cbadfac":"df_train[['name','host_name','price']].sort_values(by='price',ascending=False)","b940f9bd":"d=df_train[['name','host_name','price']].sort_values(by='price',ascending=False).head(50)\nfig=px.scatter(d,\n                           x='name',\n                           y='price',\n                           size='price',\n                           color='host_name',\n                           #range_y=[0,200],\n                           #range_x=[0,900]\n                           )\nfig.update_layout(autosize=False,\n                  height=500,\n                  width=1400,\n                  font=dict(size=15,color=\"#0f0f0f\",family=\"Courier New, monospace\"),\n                 )\nfig.show()","969d93b1":"plt.figure(figsize=(12,8))\nsns.heatmap(df_train.corr(),cmap='bwr',annot=True)","6f401175":"df_train.cp=df_train.copy()","aa2546c8":"df_train_dup=df_train[df_train.duplicated()]\ndf_train_dup.shape","a0ca0c2b":"df_train['last_review'].mode()","d98b3087":"df_train['last_review'].describe()","f3e725cf":"df_train['reviews_per_month'].describe()","46eb14b2":"#df_train['reviews_per_month']=df_train['reviews_per_month'].apply(np.round)","a08042de":"df_train['reviews_per_month'].describe()","a1cfce29":"df_train['last_review']=pd.to_datetime(df_train['last_review'])","fdc45890":"df_train['name'].fillna(df_train['name'].mode()[0], inplace=True)\ndf_train['host_name'].fillna(df_train['host_name'].mode()[0],inplace=True)\ndf_train['last_review'].fillna(df_train['last_review'].mean(),inplace=True)\ndf_train['reviews_per_month'].fillna(df_train['reviews_per_month'].mean(),inplace=True)","beca9d9e":"df_train[\"day\"] = df_train['last_review'].map(lambda x: x.day)\ndf_train[\"month\"] = df_train['last_review'].map(lambda x: x.month)\ndf_train[\"year\"] = df_train['last_review'].map(lambda x: x.year)\n","fcdd9d3a":"aboutdf(df_train)","4e649a5a":"le = LabelEncoder()","6a106ffb":"df_train['name']=LabelEncoder().fit_transform(df_train['name'])\ndf_train['host_name']=LabelEncoder().fit_transform(df_train['host_name'])\ndf_train['neighbourhood']=LabelEncoder().fit_transform(df_train['neighbourhood'])\ndf_train['room_type']=LabelEncoder().fit_transform(df_train['room_type'])","8553093c":"# sns.pairplot(df_train, kind=\"reg\")","483b4d52":"\n# # sns.regpairplot(x=df_train[col],y='price',data=df_train_plot,\n#          scatter_kws={'alpha':0.3},line_kws={'color':'orange'})","dc3a04b2":"# sns.regplot(x='id',y='price',data=df_train,\n#            scatter_kws={'alpha':0.3},line_kws={'color':'orange'})","d981b5de":"# sns.regplot(x='name',y='price',data=df_train,\n#            scatter_kws={'alpha':0.3},line_kws={'color':'orange'})","464f6002":"# sns.regplot(x='host_id',y='price',data=df_train,\n#            scatter_kws={'alpha':0.3},line_kws={'color':'orange'})","fc99f003":"# sns.regplot(x='host_name',y='price',data=df_train,\n#            scatter_kws={'alpha':0.3},line_kws={'color':'orange'})","569a2464":"# sns.regplot(x='neighbourhood',y='price',data=df_train,\n#            scatter_kws={'alpha':0.3},line_kws={'color':'orange'})","b9c08c30":"# sns.regplot(x='latitude',y='price',data=df_train,\n#            scatter_kws={'alpha':0.3},line_kws={'color':'orange'})","9168cda3":"# sns.regplot(x='longitude',y='price',data=df_train,\n#            scatter_kws={'alpha':0.3},line_kws={'color':'orange'})","85c27717":"# sns.regplot(x='room_type',y='price',data=df_train,\n#            scatter_kws={'alpha':0.3},line_kws={'color':'orange'})","e1d0d6b1":"sns.regplot(x='minimum_nights',y='price',data=df_train,\n            scatter_kws={'alpha':0.3},line_kws={'color':'orange'})","504118b7":"# sns.regplot(x='number_of_reviews',y='price',data=df_train,\n#            scatter_kws={'alpha':0.3},line_kws={'color':'orange'})","ebc56651":"# sns.regplot(x='reviews_per_month',y='price',data=df_train,\n#            scatter_kws={'alpha':0.3},line_kws={'color':'orange'})","1b63d1d5":"# sns.regplot(x='calculated_host_listings_count',y='price',data=df_train,\n#            scatter_kws={'alpha':0.3},line_kws={'color':'orange'})","2cdd9fe8":"# sns.regplot(x='availability_365',y='price',data=df_train,\n#            scatter_kws={'alpha':0.3},line_kws={'color':'orange'})","f9185abe":"# sns.regplot(x='day',y='price',data=df_train,\n#            scatter_kws={'alpha':0.3},line_kws={'color':'orange'})","029f0d56":"# sns.regplot(x='month',y='price',data=df_train,\n#            scatter_kws={'alpha':0.3},line_kws={'color':'orange'})","ae2ef782":"# sns.regplot(x='year',y='price',data=df_train,\n#            scatter_kws={'alpha':0.3},line_kws={'color':'orange'})","c6747850":"#X=df_train.drop(columns=['price','last_review','id','host_id'],axis=1)\nX=df_train.drop(columns=['price','last_review'],axis=1)# just check feature selection\ny=df_train['price']","b94c7dca":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=2)","451dae70":"from xgboost import XGBClassifier\nfrom xgboost import plot_importance\n\n# fit model to training data\nxgb_model = XGBClassifier(random_state = 0 )\nxgb_model.fit(X_train, y_train)\n\nprint(\"Feature Importances : \", xgb_model.feature_importances_)\n\n# plot feature importance\nplot_importance(xgb_model)\nplt.show()\n","81fe974f":"from sklearn.feature_selection import SelectFromModel","a453b703":"selection = SelectFromModel(xgb_model)\nprint(selection)\nselection.fit(X_train, y_train)\n\n# Transform the train and test features\nselect_X_train = selection.transform(X_train)\nselect_X_test = selection.transform(X_test) \n\n# train model\nselection_model = XGBClassifier()\nselection_model.fit(select_X_train, y_train)\n","fd37a7df":"select_X_train","7c105ab3":"y_train_pred=xgb_model.predict(X_train)\nmse_train=mean_squared_error(y_train,y_train_pred)\nrmse_train=math.sqrt(mse_train)\nprint(rmse_train)\n","fd8b9c58":"y_pred = xgb_model.predict(X_test)\n\n\n\nmse_test=mean_squared_error(y_test,y_pred)\nrmse_test=math.sqrt(mse_test)\nprint(rmse_test)\n","102f08f4":"predictions = selection_model.predict(select_X_test)","1bc5d21b":"mse_test1=mean_squared_error(y_test,predictions)\nrmse_test1=math.sqrt(mse_test)\nprint(rmse_test1)\n","7602f984":"lgbm =LGBMRegressor()","e8fd9fd1":"lgbm =LGBMRegressor(random_state=4)\nlgbm.fit(X_train,y_train)\nbpred_train=lgbm.predict(X_train)\nbpred=lgbm.predict(X_test)","bd107923":"bmse_train=mean_squared_error(y_train,bpred_train)\nbrmse_train=math.sqrt(bmse_train)\nprint(brmse_train)\n","159f4e20":"bmse_test=mean_squared_error(y_test,bpred)\nbrmse_test=math.sqrt(bmse_test)\nprint(brmse_test)\n","b04f248e":"pip install lazypredict","c470003d":"import lazypredict\nfrom lazypredict.Supervised import LazyRegressor\nfrom sklearn import datasets\nfrom sklearn.utils import shuffle\nreg = LazyRegressor(verbose=0,ignore_warnings=False, custom_metric=None )\nmodels,predictions = reg.fit(X_train, X_test, y_train, y_test)\n","5d48ca91":"models,predictions ","c222df14":"from sklearn import ensemble\n#model_LP = ensemble.ExtraTreesRegressor(n_estimators=5, max_depth=10, max_features=0.3, n_jobs=-1, random_state=0)\n#model_LP = ensemble.ExtraTreesRegressor(n_estimators=100,max_depth=15,max_features=0.8,n_jobs=-2,random_state=0)--217.6253937376234\nmodel_LP = ensemble.ExtraTreesRegressor(n_estimators=100,max_depth=15, n_jobs=-2, min_samples_split=2,min_samples_leaf=2, max_features=0.8,random_state=0)","54a9a290":"model_LP.fit(X_train,y_train)","835ebc16":"LP_pred_train=model_LP.predict(X_train)\nLP_pred_test=model_LP.predict(X_test)","2deab5f9":"LP_train=mean_squared_error(y_train,LP_pred_train)\nMLP_train=math.sqrt(LP_train)\nprint(MLP_train)\n","335e6bab":"LP_test=mean_squared_error(y_test,LP_pred_test)\nMLP_test=math.sqrt(LP_test)\nprint(MLP_test)\n","2bab2959":"scaler =StandardScaler()","c13744d3":"aboutdf(X)","e1e89799":"df_train['availability_365'].describe()","d8ab031a":"X_scaler=scaler.fit_transform(X)","e7a062c3":"X_scaler","384d8018":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=2)","8518877d":"reg = linear_model.Ridge(alpha=.5)","6123883b":"model=reg.fit(X_train,y_train)","6a7b94d7":"pred=model.predict(X_test)","aaf2fb2a":"pred_train=model.predict(X_train)","f8b55810":"mse_train=mean_squared_error(y_train,pred_train)\nrmse_train=math.sqrt(mse_train)\nprint(rmse_train)","721f2bcb":"mse = mean_squared_error(y_test, pred)\n\nrmse = math.sqrt(mse)\nprint(rmse)","61aea356":"from tqdm import tqdm\nimport math\nfrom math import sqrt\n","d08888cd":"alpha = [1, 2, 3, 3.5, 4, 4.5, 5, 6, 7] \ncv_rmsle_array=[] \nfor i in tqdm(alpha):\n    model =linear_model.Ridge(solver=\"sag\", random_state=42, alpha=i)\n    model.fit(X_train, y_train)\n    preds_cv = model.predict(X_test)\n    mse=mean_squared_error(y_test, preds_cv)\n    a=sqrt(mse)\n    cv_rmsle_array.append(a)\n    \n\n\nfor i in range(len(cv_rmsle_array)):\n     print ('RMSLE for alpha = ',alpha[i],'is',cv_rmsle_array[i])\n\nbest_alpha = np.argmin(cv_rmsle_array)\nfig, ax = plt.subplots()\nax.plot(alpha, cv_rmsle_array)\nax.scatter(alpha, cv_rmsle_array)\nfor i, txt in enumerate(np.round(cv_rmsle_array,3)):\n    ax.annotate((alpha[i],np.round(txt,3)), (alpha[i],cv_rmsle_array[i]))\nplt.title(\"Cross Validation Error for each alpha\")\nplt.xlabel(\"Alpha\")\nplt.ylabel(\"Error\")\nplt.show()\n","7dba609d":"print(\"Best alpha: \",  alpha[best_alpha])\nmodel = linear_model.Ridge(solver=\"sag\", random_state=42, alpha=alpha[best_alpha])\nmodel.fit(X_train, y_train)\nridge_preds_tr = model.predict(X_train)\nridge_preds_cv = model.predict(X_test)\n#ridge_preds_te = model.predict(X_test)\nmse=mean_squared_error(y_train, ridge_preds_tr)\nprint('Train RMSLE:', sqrt(mse))\nmse_test=mean_squared_error(y_test, ridge_preds_cv)\nridge_rmsle = sqrt((mse_test))\nprint(\"Cross validation RMSLE: \", ridge_rmsle)\n","4c72b568":"from scipy.stats import uniform\nfrom scipy.stats import randint as sp_randint","71fa8f76":"\nlgb_model = LGBMRegressor(subsample=0.9)\n\nparams = {'learning_rate': uniform(0, 1),\n          'n_estimators': sp_randint(200, 1500),\n          'num_leaves': sp_randint(20, 200),\n          'max_depth': sp_randint(2, 15),\n          'min_child_weight': uniform(0, 2),\n          'colsample_bytree': uniform(0, 1),\n         }\nlgb_random = RandomizedSearchCV(lgb_model, param_distributions=params, n_iter=10, cv=3, random_state=42, \n                                scoring='neg_root_mean_squared_error', verbose=10, return_train_score=True)\nlgb_random = lgb_random.fit(X_train, y_train)\n\nbest_params = lgb_random.best_params_\nprint(best_params)\n","871aee2c":"\nmodel_lgbm = LGBMRegressor(**best_params, subsample=0.9, random_state=42, n_jobs=-1)\nmodel_lgbm.fit(X_train, y_train)\n\nlgb_preds_tr = model_lgbm.predict(X_train)\n#lgb_preds_cv = model.predict(X_test)\nlgb_preds_te = model_lgbm.predict(X_test)\nmse_tr=mean_squared_error(y_train,lgb_preds_tr)\nprint(\"mse_tr:\",mse_tr)\nprint('Train RMSLE:', sqrt(mse_tr))\nmse_te=mean_squared_error(y_test,lgb_preds_te)\nprint(mse_te)\nlgb_rmsle = sqrt(mse_te)\nprint(\"Test RMSLE: \", lgb_rmsle)\n","d6b71c94":"from prettytable import PrettyTable\nx=PrettyTable()\nx.field_names=[\"Model\",\"methods\",\"Train_RMSLE\", \"Test_RMSLE\", \"Kaggle_RMSLE(Public)\"]\nx.add_row([\"Ridge\",\"-id,host_id,+standardscalar\",\"222.7798385525557\",\"246.32535554500578\",\"235.30133\"])\nx.add_row([\"LightGBM\",\"-id,host_id,+standardscalar\",\"6.491644344317403\",\"227.68104533754683\",\"223.08112\"])\nx.add_row([\"Ridge\",\"+id,host_id,-standardscalar\",\"222.24334838932626\",\"245.89118907576744\",\"-\"])\nx.add_row([\"LightGBM\",\"+id,host_id,-standardscalar\",\"3.6579076181175987\",\"224.6785629027711\",\"217.04551\"])\nx.add_row([\"XGB\",\"+id,host_id,-standardscalar +fs\",\"78.35747725276444\",\"224.9775499003927\",\"-\"])\nx.add_row([\"LightGBM\",\"+id,host_id,-standardscalar -fs\",\"114.65801828043752\",\"220.28635168900416\",\"211.71734\"])\nx.add_row([\"ExtraTreesRegressor\",\"+id,host_id,-standardscalar -fs\",\"0.010229915092057028\",\"218.65119082233184\",\"211.66401\"])\nx.add_row([\"ExtraTreesRegressor\",\"+id,host_id,-standardscalar-fs+tune\",\"82.37541294218074\",\"217.095978804005\",\"211.24184\"])\nprint(x)","9639a8d6":"aboutdf(df_validate)","a5df9ac2":"df_validate=df_validate.drop(columns=['neighbourhood_group'],axis=1)","5ffb6a8b":"df_validate['last_review']=pd.to_datetime(df_validate['last_review'])","11f3ace8":"df_validate['name'].fillna(df_validate['name'].mode()[0], inplace=True)\ndf_validate['host_name'].fillna(df_validate['host_name'].mode()[0],inplace=True)\ndf_validate['last_review'].fillna(df_validate['last_review'].mean(),inplace=True)\ndf_validate['reviews_per_month'].fillna(df_validate['reviews_per_month'].mean(),inplace=True)\n","5b730e3f":"df_validate[\"day\"] = df_validate['last_review'].map(lambda x: x.day)\ndf_validate[\"month\"] = df_validate['last_review'].map(lambda x: x.month)\ndf_validate[\"year\"] = df_validate['last_review'].map(lambda x: x.year)\n","ea921f34":"df_validate=df_validate.drop(columns=['last_review'],axis=1)","a8bfdcb1":"df_validate['name']=LabelEncoder().fit_transform(df_validate['name'])\ndf_validate['host_name']=LabelEncoder().fit_transform(df_validate['host_name'])\ndf_validate['neighbourhood']=LabelEncoder().fit_transform(df_validate['neighbourhood'])\ndf_validate['room_type']=LabelEncoder().fit_transform(df_validate['room_type'])","690f2f57":"X_val=df_validate\n","47c205af":"X_valscaler=scaler.fit_transform(X_val)\npred_val=model.predict(X_valscaler)","e015034f":"pred_lgbm=model_lgbm.predict(X_val)","c50e7918":"select_X_val = selection.transform(X_val)","cb579c65":"pred_xgb=selection_model.predict(select_X_val)","5b4b41e8":"bpred_lgbm=lgbm.predict(X_val)","e3735dfd":"pred_lp=model_LP.predict(X_val)","60a7f9ac":"output = pd.DataFrame({'Id': df_validate.id,\n                      'Price': pred_lp})\noutput.to_csv('submission.csv', index=False)\noutput","b761d285":"As you can see in the graph above Martijn has hosted 76 times ...","b62a1f3a":"know lets check about number_of_reviews","c60bf5cb":"so in the above graph you can see some of the costliest apartments.","d5727ab9":"Now we will fill the missing values for the columns name,host_name,last_review,reviews_per_month.\nobject dtype columns i.e name and host_name will replace the missing values with mode and the other 2 with mean.","d0468279":"There are no duplicate records.","3fc169ee":"check this code later","f9c65c02":"Let try with another algorithms","eb78af40":"Looks like the customers prefer the enite home very few customers  prefered shared rooms.","ba25f006":"Data Cleaning","665e2156":"TRy with lazy predict","006a53bf":"plot a graph showing with host_name has got the number of reviews per month.","b21aad5a":"lets check the availability_365 column","c5ed6988":"Looks like customers prefer booking for minimum one day and maximum 1001 days. on an average customers pefer booking for 3 days.\n","2fc6ff88":"> Sugesstions for improving are always welcome","1a272192":"So from the above ExtraTreesRegressor has the good RMSE ..so trying to tune the same","817fe126":"did not use X_scaler as it did not fetch good RMSE","2e5c17f6":"Lets check the corelation","b87e967d":"calulcated host listing is The count of the listing that each host has,\nmay be number homes or apartments...","37d68efc":"Now cleaning is done ..next step  is to preprocess it.","92d102e5":"Now that we have replaces the missing values next step is to encode the object data types ....","d43d31d7":"Explanatory Data Analysis ...Knowing about the data","96f22ba5":"lets now check about the minimum number of nights  the customer want to book ","820cb156":"Above we can see there are average of 24 reviews and a maximum of 843 reviews ...lets look deeper","cb3aaee5":"standarization and then applying to the model","ac685532":"Now finally we will learn about the target variable  price.As it is given price is in USD","4bebb68d":"Now building the model","9b8c93af":"lets know check about the room_type details","f796573b":"Data Cleaning","1c1fd208":"encoding for the object columns name,host_name,neighbourhood","807c1742":"De Baarsjes - Oud-West is the most selected neigbourhood by the airbnd customers.","fbc9de02":"Now this has linear relation","cededda7":"Now lets check about neighbourhood","79408006":"Now as we got to know about the columns now we should clean the data,","d7d4fed6":"lets check about the  calculated_host_listings_count coulmn","777bf95c":"Dropping the neighbourhood_group column as it has 100 percent null values ","3607a46a":"Feature Selection","33132177":"As the reviews column is in float we will apply the ceilling function.","eefbe399":"reading the input files","36b51195":"Hyper parameter tunning","5f963eca":"1.We will check if we have duplicates  rows in the data set given.","bfa33453":"First we will drop the neighourhood_group column as it has 100 percent null column ","9ac6f7d3":"lets check about reviews_per_month column","0855cea5":"now we wil normailize the data using the standard scalar ,before that we will split the target variable","02f66f78":"lets check for the last_review column details","cae82029":"so price  ranges from  minimum of 6 USD to maximum of 9000 USD and the average price of 170 USD ..","d1b53037":"implementing the lgbm for the test data set","a2a176d8":"So the availability of rooms  on an average is 61 days and maximum of 365.","b2f2b2b2":"so per month atleast onew review they will recieve and maximun of 70 reviews.","e79aa8c0":"Now lets check how our model perform with the test file . first we deal with data cleaning and data preprocessing","a112f21b":"Dealing with the last_review datatime columns.split it into year,month,day","ee50e75c":"There are 12653 unique airbnb apartments\/rooms","6abb5f27":"Now splitting the data into train and test","eb4fa67f":"Lets compare the RMSE of the model used"}}