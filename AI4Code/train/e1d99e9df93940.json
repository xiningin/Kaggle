{"cell_type":{"0313bf18":"code","6b08e11b":"code","d5cc4931":"code","ad20013d":"code","8189eaf6":"code","9585e971":"code","34b839b8":"code","8f116e73":"code","34635ad5":"code","dc62c7b3":"code","ef341c32":"code","8c8ca80a":"code","e35efb00":"code","59a3f6bf":"code","68b42f95":"code","a8913ec5":"code","dcca4b9b":"code","5b71e676":"code","23393c8c":"code","66711010":"code","d0b7c121":"code","f5dbdbb7":"code","05b99362":"code","ae932a78":"code","cf12a6d4":"code","9dc1ce96":"code","22941a95":"code","619c0eea":"code","ed9f9eec":"code","d2cfa327":"code","80e228f9":"code","92c27505":"code","e3d70006":"code","7c381512":"code","cbc8e1c8":"code","11e1a32c":"code","12b1e076":"code","df11d079":"code","d0a0d919":"code","d9a2796d":"code","65669c51":"code","594cc631":"code","e410e17a":"code","f69b92b1":"code","2323c11a":"code","90056cd7":"code","5bdc9bec":"code","21750d84":"code","7989a376":"code","081681ad":"code","4ea5b854":"code","8305cc85":"code","9bbcaaca":"code","197183c9":"code","a1ba3261":"code","3531e392":"code","42f6b141":"code","0c448071":"code","86c005ed":"code","c5d709ad":"code","0f83db77":"code","d8036ca6":"code","75daf9fe":"markdown","68aa52d3":"markdown","b980749d":"markdown","aa2f4d1f":"markdown","34bbe64a":"markdown","7996cd10":"markdown","ac20b877":"markdown","c132e385":"markdown","3a406760":"markdown"},"source":{"0313bf18":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\npd.set_option('display.max_columns',None)\n","6b08e11b":"df_train=pd.read_csv('..\/input\/house-prices-data\/train.csv')\ndf_test=pd.read_csv('..\/input\/house-prices-data\/test.csv')","d5cc4931":"df_train.head()","ad20013d":"df_test.head()","8189eaf6":"df_train.shape","9585e971":"df_test.shape","34b839b8":"df_train.columns","8f116e73":"df_test.columns","34635ad5":"df_train.info()","dc62c7b3":"df_train.isnull().sum()","ef341c32":"df_train.corr()","8c8ca80a":"corr = df_train.corr()\nsns.set_context(\"notebook\", font_scale=1.0, rc={\"lines.linewidth\": 2.5})\nplt.figure(figsize=(36,18))\na = sns.heatmap(corr, annot=True, fmt='.2f')\nrotx = a.set_xticklabels(a.get_xticklabels(), rotation=90)\nroty = a.set_yticklabels(a.get_yticklabels(), rotation=30)","e35efb00":"df_train.describe().T ","59a3f6bf":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False)","68b42f95":"df_train.isnull().sum()","a8913ec5":"df_train.info()","dcca4b9b":"df_train[\"LotFrontage\"] = df_train[\"LotFrontage\"].fillna(df_train[\"LotFrontage\"].mean())\ndf_train.drop([\"Alley\"],axis=1,inplace=True) #Aa alley has more than 3\/4 values are null values.so we drop the column","5b71e676":"df_train['MasVnrType']=df_train['MasVnrType'].fillna(df_train['MasVnrType'].mode()[0])\ndf_train['MasVnrArea']=df_train['MasVnrArea'].fillna(df_train['MasVnrArea'].mode()[0])\ndf_train['BsmtCond']=df_train['BsmtCond'].fillna(df_train['BsmtCond'].mode()[0])\ndf_train['BsmtQual']=df_train['BsmtQual'].fillna(df_train['BsmtQual'].mode()[0])\ndf_train['FireplaceQu']=df_train['FireplaceQu'].fillna(df_train['FireplaceQu'].mode()[0])\ndf_train['GarageType']=df_train['GarageType'].fillna(df_train['GarageType'].mode()[0])\ndf_train['GarageFinish']=df_train['GarageFinish'].fillna(df_train['GarageFinish'].mode()[0])\ndf_train['GarageQual']=df_train['GarageQual'].fillna(df_train['GarageQual'].mode()[0])\ndf_train['GarageCond']=df_train['GarageCond'].fillna(df_train['GarageCond'].mode()[0])\ndf_train['Electrical']=df_train['Electrical'].fillna(df_train['Electrical'].mode()[0])","23393c8c":"df_train.drop(['GarageYrBlt'],axis=1,inplace=True)\ndf_train.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\n#I'm droping these columns because they contain more null values","66711010":"df_train.shape","d0b7c121":"df_train.drop([\"Id\"],axis=1,inplace=True)\n#As id did'nt affect our target variable i'm going to delete it","f5dbdbb7":"df_train.isnull().sum()","05b99362":"df_train['BsmtExposure']=df_train['BsmtExposure'].fillna(df_train['BsmtExposure'].mode()[0])\ndf_train['BsmtFinType2']=df_train['BsmtFinType2'].fillna(df_train['BsmtFinType2'].mode()[0])","ae932a78":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False,cmap='YlGnBu')","cf12a6d4":"df_train.isnull().sum()","9dc1ce96":"df_train.dropna(inplace=True)\ndf_train.shape","22941a95":"#Categorical features handling\ncat_feature = [feature for feature in df_train.columns if df_train[feature].dtype==\"O\"]\nlen(cat_feature)","619c0eea":"def category_onehot_multcols(multcolumns):\n    df_final=final_df\n    i=0\n    for fields in multcolumns:\n        \n        print(fields)\n        df1=pd.get_dummies(final_df[fields],drop_first=True)\n        \n        final_df.drop([fields],axis=1,inplace=True)\n        if i==0:\n            df_final=df1.copy()\n        else:\n            \n            df_final=pd.concat([df_final,df1],axis=1)\n        i=i+1\n       \n        \n    df_final=pd.concat([final_df,df_final],axis=1)\n        \n    return df_final","ed9f9eec":"main_df = df_train.copy()","d2cfa327":"main_df.head()","80e228f9":"df_test.head()\n","92c27505":"sol = df_test[\"Id\"]\ndf_test.shape\n","e3d70006":"test_num = [feature for feature in df_test.columns if df_test[feature].isnull().sum()>1]\ntest_num","7c381512":"df_test['MSZoning']=df_test['MSZoning'].fillna(df_test['MSZoning'].mode()[0])\ndf_test['LotFrontage']=df_test['LotFrontage'].fillna(df_test['LotFrontage'].mean())","cbc8e1c8":"df_test.drop(['Alley'],axis=1,inplace=True)\ndf_test.drop(['GarageYrBlt'],axis=1,inplace=True)\ndf_test.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\ndf_test.drop(['Id'],axis=1,inplace=True)\n#Dropping columns not present in train data","11e1a32c":"df_test['Utilities']=df_test['Utilities'].fillna(df_test['Utilities'].mode()[0])\ndf_test['MasVnrType']=df_test['MasVnrType'].fillna(df_test['MasVnrType'].mode()[0])\ndf_test['MasVnrArea']=df_test['MasVnrArea'].fillna(df_test['MasVnrArea'].mode()[0])\ndf_test['BsmtCond']=df_test['BsmtCond'].fillna(df_test['BsmtCond'].mode()[0])\ndf_test['BsmtQual']=df_test['BsmtQual'].fillna(df_test['BsmtQual'].mode()[0])\ndf_test['BsmtExposure']=df_test['BsmtExposure'].fillna(df_test['BsmtExposure'].mode()[0])\ndf_test['BsmtFinType1']=df_test['BsmtFinType1'].fillna(df_test['BsmtFinType1'].mode()[0])\ndf_test['BsmtFinType2']=df_test['BsmtFinType2'].fillna(df_test['BsmtFinType2'].mode()[0])\ndf_test['BsmtFullBath']=df_test['BsmtFullBath'].fillna(df_test['BsmtFullBath'].mode()[0])\ndf_test['BsmtHalfBath']=df_test['BsmtHalfBath'].fillna(df_test['BsmtHalfBath'].mode()[0])\ndf_test['Functional']=df_test['Functional'].fillna(df_test['Functional'].mode()[0])\ndf_test['FireplaceQu']=df_test['FireplaceQu'].fillna(df_test['FireplaceQu'].mode()[0])\ndf_test['GarageType']=df_test['GarageType'].fillna(df_test['GarageType'].mode()[0])\ndf_test['GarageFinish']=df_test['GarageFinish'].fillna(df_test['GarageFinish'].mode()[0])\ndf_test['GarageQual']=df_test['GarageQual'].fillna(df_test['GarageQual'].mode()[0])\ndf_test['GarageCond']=df_test['GarageCond'].fillna(df_test['GarageCond'].mode()[0])\n","12b1e076":"df_test.shape","df11d079":"df_test.loc[:, df_test.isnull().any()].head()","d0a0d919":"df_test['Exterior1st']=df_test['Exterior1st'].fillna(df_test['Exterior1st'].mode()[0])\ndf_test['Exterior2nd']=df_test['Exterior2nd'].fillna(df_test['Exterior2nd'].mode()[0])\ndf_test['BsmtFinSF1']=df_test['BsmtFinSF1'].fillna(df_test['BsmtFinSF1'].mean())\ndf_test['BsmtFinSF2']=df_test['BsmtFinSF2'].fillna(df_test['BsmtFinSF2'].mean())\ndf_test['BsmtUnfSF']=df_test['BsmtUnfSF'].fillna(df_test['BsmtUnfSF'].mean())\ndf_test['TotalBsmtSF']=df_test['TotalBsmtSF'].fillna(df_test['TotalBsmtSF'].mean())\ndf_test['KitchenQual']=df_test['KitchenQual'].fillna(df_test['KitchenQual'].mode()[0])\ndf_test['GarageCars']=df_test['GarageCars'].fillna(df_test['GarageCars'].mean())\ndf_test['GarageArea']=df_test['GarageArea'].fillna(df_test['GarageArea'].mean())\ndf_test['SaleType']=df_test['SaleType'].fillna(df_test['SaleType'].mode()[0])\n","d9a2796d":"df_test.isnull().sum().any()","65669c51":"df_test.shape","594cc631":"df_train.shape","e410e17a":"final_df = pd.concat([df_train,df_test],axis=0)","f69b92b1":"final_df.shape","2323c11a":"final_df = category_onehot_multcols(cat_feature)","90056cd7":"final_df.shape #After one hot encoding categorical data","5bdc9bec":"final_df =final_df.loc[:,~final_df.columns.duplicated()]","21750d84":"final_df.shape","7989a376":"train_df = final_df.iloc[:1422,:]\ntest_df = final_df.iloc[1422:,:]","081681ad":"test_df.head()","4ea5b854":"train_df.head()","8305cc85":"test_df.drop([\"SalePrice\"],axis=1,inplace=True)","9bbcaaca":"train_df[\"SalePrice\"]","197183c9":"X_train=train_df.drop(['SalePrice'],axis=1)\ny_train=train_df['SalePrice']","a1ba3261":"from sklearn.preprocessing import StandardScaler\nscalar = StandardScaler()\nX_train = scalar.fit_transform(X_train)\ntest_df = scalar.transform(test_df)","3531e392":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nlr.fit(X_train,y_train)","42f6b141":"y_tr=lr.predict(X_train)","0c448071":"lr.coef_","86c005ed":"lr.intercept_","c5d709ad":"y_pred = lr.predict(test_df)","0f83db77":"lst = sol\n  \n# list of int\nlst2 = list(y_pred)\n  \n# Calling DataFrame constructor after zipping\n# both lists, with columns specified\ndf = pd.DataFrame(list(zip(lst, lst2)),\n               columns =['id', 'SalePrice'])","d8036ca6":"df.to_csv('result.csv',index=False)","75daf9fe":"**Here i'm filling null values with mean and mode for numerical columns and categorical columns respectively**","68aa52d3":"# Finding predictions for Test data and make .csv file","b980749d":"# Handling Test Data","aa2f4d1f":"#Handling training data","34bbe64a":"**COncatinating train and test data to do one hot encoding for categorical data**","7996cd10":"**Handling missing values**","ac20b877":"#Importing Libraries","c132e385":"# Multiple Linear Regression","3a406760":"#Loading data sets"}}