{"cell_type":{"6700be5d":"code","c2be51c9":"code","b94becea":"code","0c2ef1eb":"code","b12161c0":"code","ac897e65":"code","02dab597":"code","f3719709":"code","9ef02c97":"code","33e4151d":"code","62994e76":"code","d153e6e8":"code","4c0b7f4a":"code","c55e8633":"code","8fd0d9b2":"markdown","863d52b1":"markdown","343f20a3":"markdown","359b1f92":"markdown","2092ce33":"markdown","093e09c8":"markdown","652f48b9":"markdown","c56c6c55":"markdown","12f7c091":"markdown","8b00731d":"markdown"},"source":{"6700be5d":"from __future__ import print_function\nimport numpy as np # For numerical fast numerical calculations\nimport matplotlib.pyplot as plt # For making plots\nimport pandas as pd # Deals with data\nimport seaborn as sns # Makes beautiful plots\nimport keras \nimport sys \nfrom pandas import pandas as pd\nimport category_encoders as ce\nimport datetime\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.optimizers import RMSprop\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nimport os\nimport glob\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\n# skimage\nfrom skimage.io import imshow, imread, imsave\nfrom skimage.transform import rotate, AffineTransform, warp,rescale, resize, downscale_local_mean\nfrom skimage import color,data\nfrom skimage.exposure import adjust_gamma\nfrom skimage.util import random_noise\n# imgaug\nimport imageio\nimport imgaug as ia\nimport imgaug.augmenters as iaa\n# Albumentations\nimport albumentations as A \n# Keras\nfrom keras.preprocessing.image import ImageDataGenerator,array_to_img, img_to_array, load_img \n#visualisation\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n#%matplotlib inline\nimport seaborn as sns\nfrom IPython.display import HTML, Image\nimport cv2\nimport os\nimport matplotlib.ticker as ticker\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# load data\n\np_train=pd.read_csv('..\/input\/plant-pathology-2020-fgvc7\/train.csv')\np_test=pd.read_csv('..\/input\/plant-pathology-2020-fgvc7\/test.csv')","c2be51c9":"p_train=pd.read_csv('..\/input\/plant-pathology-2020-fgvc7\/train.csv')\np_test=pd.read_csv('..\/input\/plant-pathology-2020-fgvc7\/test.csv')\n\ntarget = p_train[['healthy', 'multiple_diseases', 'rust', 'scab']]\ntest_ids = p_test['image_id']\n\nimg_size=224","b94becea":"colors=['#78C850','#6890F0']\np_train['healthy'].value_counts().plot(kind='bar',title='Healthy Frequency Count',color=colors)","0c2ef1eb":"p_train['multiple_diseases'].value_counts().plot(kind='bar',title='Multi-Diseases Frequency Count',color=colors)","b12161c0":"p_train['rust'].value_counts().plot(kind='bar',title='Rust Frequency Count',color=colors)","ac897e65":"p_train['scab'].value_counts().plot(kind='bar',title='Scab Frequency Count',color=colors)","02dab597":"train_image=[]\nfor name in p_train['image_id']:\n    path='..\/input\/plant-pathology-2020-fgvc7\/images\/'+name+'.jpg'\n    img=cv2.imread(path)\n    image=cv2.resize(img,(img_size,img_size),interpolation=cv2.INTER_AREA)\n    train_image.append(image)\n\nfig, ax = plt.subplots(1, 4, figsize=(15, 15))\nfor i in range(4):\n    ax[i].set_axis_off()\n    ax[i].imshow(train_image[i])\n    \n    \ntest_image=[]\nfor name in p_test['image_id']:\n    path='..\/input\/plant-pathology-2020-fgvc7\/images\/'+name+'.jpg'\n    img=cv2.imread(path)\n    image=cv2.resize(img,(img_size,img_size),interpolation=cv2.INTER_AREA)\n    test_image.append(image)\nfig, ax = plt.subplots(1, 4, figsize=(15, 15))\nfor i in range(4):\n    ax[i].set_axis_off()\n    ax[i].imshow(test_image[i])    \n\nfrom keras.preprocessing.image import img_to_array\n\nx_train = np.ndarray(shape=(len(train_image), img_size, img_size, 3),dtype = np.float32)\ni=0\nfor image in train_image:\n    x_train[i]=img_to_array(image)\n    x_train[i]=train_image[i]\n    i=i+1\nx_train=x_train\/255\nprint('Train Shape: {}'.format(x_train.shape))\n\nx_test = np.ndarray(shape=(len(test_image), img_size, img_size, 3),dtype = np.float32)\ni=0\nfor image in test_image:\n    x_test[i]=img_to_array(image)\n    x_test[i]=test_image[i]\n    i=i+1\n    \nx_test=x_test\/255\nprint('Test Shape: {}'.format(x_test.shape))","f3719709":"y = p_train.copy()\ndel y['image_id']\ny.head()\n\ny_train = np.array(y.values)\nprint(y_train.shape,y_train[0])\n\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.2, random_state=115)\n\nx_train.shape, x_val.shape, y_train.shape, y_val.shape","9ef02c97":"from imblearn.over_sampling import SMOTE \n\nsm = SMOTE(random_state = 115) \n \nx_train, y_train = sm.fit_resample(x_train.reshape((-1, img_size * img_size * 3)), y_train)\nx_train = x_train.reshape((-1, img_size, img_size, 3))\nx_train.shape, y_train.sum(axis=0)","33e4151d":"from keras.callbacks import ReduceLROnPlateau\nfrom keras.callbacks import EarlyStopping\nLR_reduce=ReduceLROnPlateau(monitor='val_accuracy',\n                            factor=.5,\n                            patience=10,\n                            min_lr=.000001,\n                            verbose=1)\n\nES_monitor=EarlyStopping(monitor='val_loss',\n                          patience=20)\n\nreg = .0005","62994e76":"from keras.models import Model, Sequential, load_model, Input\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout, BatchNormalization, LeakyReLU\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint\nfrom keras.utils import plot_model\nfrom keras.regularizers import l2\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D,Dense,MaxPool2D,Activation,Dropout,Flatten\nfrom keras.layers import GlobalAveragePooling2D\nfrom keras.optimizers import Adam\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.models import Model\nimport keras\nfrom keras import optimizers\n\nmodel = Sequential()\n\nmodel.add(Conv2D(32, kernel_size=(5,5),activation='relu', input_shape=(img_size, img_size, 3), kernel_regularizer=l2(reg)))\nmodel.add(BatchNormalization(axis=-1,center=True,scale=False))\nmodel.add(Conv2D(128, kernel_size=(5,5),activation='relu', kernel_regularizer=l2(reg)))\nmodel.add(BatchNormalization(axis=-1,center=True,scale=False))\nmodel.add(MaxPooling2D(pool_size=(2,2), padding='SAME'))\nmodel.add(Dropout(.25))\n\nmodel.add(Conv2D(32, kernel_size=(3,3),activation='relu', kernel_regularizer=l2(reg)))\nmodel.add(BatchNormalization(axis=-1,center=True,scale=False))\nmodel.add(Conv2D(128, kernel_size=(3,3),activation='relu',kernel_regularizer=l2(reg)))\nmodel.add(BatchNormalization(axis=-1,center=True,scale=False))\nmodel.add(MaxPooling2D(pool_size=(2,2), padding='SAME'))\nmodel.add(Dropout(.25))\n\n\nmodel.add(Conv2D(128, kernel_size=(5,5),activation='relu', kernel_regularizer=l2(reg)))\nmodel.add(BatchNormalization(axis=-1,center=True,scale=False))\nmodel.add(Conv2D(512, kernel_size=(5,5),activation='relu',kernel_regularizer=l2(reg)))\nmodel.add(BatchNormalization(axis=-1,center=True,scale=False))\nmodel.add(MaxPooling2D(pool_size=(2,2), padding='SAME'))\nmodel.add(Dropout(.25))\n\nmodel.add(Conv2D(128, kernel_size=(3,3),activation='relu',kernel_regularizer=l2(reg)))\nmodel.add(BatchNormalization(axis=-1,center=True,scale=False))\nmodel.add(Conv2D(512, kernel_size=(3,3),activation='relu',kernel_regularizer=l2(reg)))\nmodel.add(BatchNormalization(axis=-1,center=True,scale=False))\nmodel.add(MaxPooling2D(pool_size=(2,2), padding='SAME'))\nmodel.add(Dropout(.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(300,activation='relu'))\nmodel.add(BatchNormalization(axis=-1,center=True,scale=False))\nmodel.add(Dropout(.25))\nmodel.add(Dense(200,activation='relu'))\nmodel.add(BatchNormalization(axis=-1,center=True,scale=False))\nmodel.add(Dropout(.25))\nmodel.add(Dense(100,activation='relu'))\nmodel.add(BatchNormalization(axis=-1,center=True,scale=False))\nmodel.add(Dropout(.25))\nmodel.add(Dense(4,activation='softmax'))\n\nmodel.summary()\n\nfrom keras.preprocessing.image import ImageDataGenerator\n\nmodel.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy']\n              )","d153e6e8":"datagen = ImageDataGenerator(rotation_range=45,\n                             shear_range=.25,\n                              zoom_range=.25,\n                              width_shift_range=.25,\n                              height_shift_range=.25,\n                              rescale=1\/255,\n                              brightness_range=[.5,1.5],\n                              horizontal_flip=True,\n                              vertical_flip=True,\n                              fill_mode='nearest'\n#                              featurewise_center=True,\n#                              samplewise_center=True,\n#                              featurewise_std_normalization=True,\n#                              samplewise_std_normalization=True,\n#                              zca_whitening=True\n                              )\n\nhistory = model.fit_generator(datagen.flow(x_train, y_train, batch_size=24),\n                              epochs=300,\n                              steps_per_epoch=x_train.shape[0] \/\/ 24,\n                              verbose=1,\n                              callbacks=[ES_monitor,LR_reduce],\n                              validation_data=datagen.flow(x_val, y_val,batch_size=24),\n                              validation_steps=x_val.shape[0]\/\/24\n                              )","4c0b7f4a":"from matplotlib import pyplot as plt\n\nh = history.history\n\noffset = 5\nepochs = range(offset, len(h['loss']))\n\nplt.figure(1, figsize=(20, 6))\n\nplt.subplot(121)\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.plot(epochs, h['loss'][offset:], label='train')\nplt.plot(epochs, h['val_loss'][offset:], label='val')\nplt.legend()\n\nplt.subplot(122)\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.plot(h[f'accuracy'], label='train')\nplt.plot(h[f'val_accuracy'], label='val')\nplt.legend()\n\nplt.show()\n\nfrom sklearn.metrics import roc_auc_score\n\npred_test = model.predict(x_val)\nroc_sum = 0\nfor i in range(4):\n    score = roc_auc_score(y_val[:, i], pred_test[:, i])\n    roc_sum += score\n    print(f'{score:.3f}')\n\nroc_sum \/= 4\nprint(f'totally:{roc_sum:.3f}')","c55e8633":"pred = model.predict(x_test)\n\nres = pd.DataFrame()\nres['image_id'] = test_ids\nres['healthy'] = pred[:, 0]\nres['multiple_diseases'] = pred[:, 1]\nres['rust'] = pred[:, 2]\nres['scab'] = pred[:, 3]\nres.to_csv('submission.csv', index=False)\nres.head(10)","8fd0d9b2":"# load datasets and choose image_size","863d52b1":"# Image Data Augmentation and fit model","343f20a3":"# CNN model","359b1f92":"# Set early stopping parameters and kernel regularizer value","2092ce33":"# Variable Frequency Distributions\n### We see below that there are imbalanced classes for the variable multiple_diseases.\n### This could distort our model's evaluation metrics so will have to implement a resampling strategy later on","093e09c8":"# predict on test data","652f48b9":"# Image processing","c56c6c55":"# Plot model training metrics","12f7c091":"# Handle imbalanced dataset classes\n### There are some different re-sampling methods or techniques available with their own advantages and disadvantages\n### I'll be applying Synthetic Minority Oversampling Technique (SMOTE)","8b00731d":"# Split training set to create a validation set"}}