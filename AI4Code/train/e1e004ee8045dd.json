{"cell_type":{"6de2dff2":"code","623ab7c3":"code","9f99f932":"code","9b5d459a":"code","bd96c848":"code","03c6e9c3":"code","1f38f72d":"code","f22b95b6":"code","7cd52f17":"code","61e14c34":"code","9db7efb9":"code","f85bc611":"code","bb533167":"code","340ce2bf":"code","a1915e7b":"code","ba9e837a":"code","1b3b2008":"code","334d9a2f":"code","bba77261":"code","18728b4f":"code","a064fe08":"code","ddf079d0":"code","9cb05df2":"code","b816a688":"code","9cc41378":"code","f886557d":"code","4574735f":"code","65fe1e45":"markdown","83074a79":"markdown","9dc414dc":"markdown","090aaf15":"markdown","b3b49ff5":"markdown"},"source":{"6de2dff2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n%matplotlib inline\n\nnp.random.seed(2905)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\n\n","623ab7c3":"import os\nos.getcwd()","9f99f932":"# Load the data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","9b5d459a":"print(train.shape)\nprint(test.shape)\nprint(train.columns)\nprint(test.columns)","bd96c848":"Y_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"],axis = 1) \nY_train.value_counts()","03c6e9c3":"\nY_train = to_categorical(Y_train, num_classes = 10)\nprint(Y_train.shape)","1f38f72d":"\nnull=X_train.isnull().any()\nnull.describe()","f22b95b6":"test.isnull().any().describe()","7cd52f17":"# Normalize the data so that the model will converge fast if the values are between o and 1\nX_train = X_train \/ 255.0\ntest = test \/ 255.0","61e14c34":"X_train.shape","9db7efb9":"#Visualizing\nplt.imshow(X_train.values.reshape(-1,28,28)[126])\nprint(Y_train[126])","f85bc611":"# Reshape image in 3 dimensions ..n*784 to n*(28*28*1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","bb533167":"X_train[0].shape","340ce2bf":"# Split the train and the validation set for the fitting\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1)","a1915e7b":"\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\nmodel.summary()\n\nmodel.compile(RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0) , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","ba9e837a":"cnn = model.fit(X_train, Y_train, batch_size = 32, epochs = 5, validation_data = (X_val, Y_val))","1b3b2008":"\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  \n        samplewise_center=False, \n        featurewise_std_normalization=False, \n        samplewise_std_normalization=False, \n        rotation_range=10,\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally \n        height_shift_range=0.1,  # randomly shift images vertically \n        horizontal_flip=False,  # randomly flip images not applied because of numbers such as 6 and 9\n        vertical_flip=False)  # randomly flip images not applied because of numbers such as 6 and 9\n\n\ndatagen.fit(X_train)","334d9a2f":"X_train.shape[0] \/\/32","bba77261":"# Fit the model\ncnn_augmented = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=32),epochs = 5, validation_data = (X_val,Y_val),steps_per_epoch=X_train.shape[0] \/\/ 32)","18728b4f":"Y_pred = model.predict(X_val)\nY_pred_classes = np.argmax(Y_pred,axis = 1) \n\nY_true = np.argmax(Y_val,axis = 1) \ncm =confusion_matrix(Y_true, Y_pred_classes)\nprint(cm)\n","a064fe08":"accuracy=sum(np.diag(cm))\/np.sum(cm)\nprint('Accuracy: ',accuracy)","ddf079d0":"\nerrors = (Y_pred_classes - Y_true != 0)\n\nY_pred_classes_errors = Y_pred_classes[errors]\nY_pred_errors = Y_pred[errors]\nY_true_errors = Y_true[errors]\nX_val_errors = X_val[errors]\n\ndef display_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \"\"\" This function shows 9 images with their predicted and real labels\"\"\"\n    n = 0\n    nrows = 3\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True,figsize=(10, 10),constrained_layout=True)\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((28,28)),cmap='gray')\n            ax[row,col].set_title(\"Predicted label :{}\\n\\n True label :{}\".format(pred_errors[error],obs_errors[error]))\n            n += 1\n\n# Probabilities of the wrong predicted numbers\nY_pred_errors_prob = np.max(Y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(Y_pred_errors, Y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = Y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the delta prob errors\nsorted_dela_errors = np.argsort(delta_pred_true_errors)\n\n# Top 9 errors \nmost_important_errors = sorted_dela_errors[-9:]\n\n# Show the top 9 errors\ndisplay_errors(most_important_errors, X_val_errors, Y_pred_classes_errors, Y_true_errors)","9cb05df2":"# predict results\nresults = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","b816a688":"results.value_counts()\n","9cc41378":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"pradeep_cnn_practise.csv\",index=False)","f886557d":"submission_view=pd.read_csv('\/kaggle\/working\/pradeep_cnn_practise.csv')","4574735f":"submission_view.tail(20)","65fe1e45":"# # Submisison","83074a79":"# Model Evaluation","9dc414dc":"# # CNN\n","090aaf15":"# # Data Preprocessing ","b3b49ff5":"## Data augmentation "}}