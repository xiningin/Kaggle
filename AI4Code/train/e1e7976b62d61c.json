{"cell_type":{"5f8bd086":"code","2060021c":"code","ae9e273f":"code","1dd81dd3":"code","bfa097cb":"code","0f890b0a":"code","e8fa30ab":"code","8bf06690":"code","00c1d005":"code","a85f85c9":"code","6cea4fa2":"code","d437f4c8":"code","4f5dd4fa":"code","673333f8":"code","70c00344":"code","6d83c41d":"code","7414f7bd":"code","1e6190ef":"code","9cd52804":"code","0cef4c1c":"code","14da05fa":"code","af68b0cc":"code","6caf1164":"code","12e7ee09":"code","6454b842":"code","163c1dcf":"code","7a4e6894":"code","ccd407e1":"code","1bc81a82":"code","a642fffb":"code","4656ccca":"code","ff066c46":"code","7f782732":"code","3b74a68a":"code","3324c0ba":"code","795e91e2":"code","aae0d603":"code","08129b5f":"code","02a35d10":"code","4dfd7a48":"code","ad9079ec":"code","02e8bd7e":"code","3b102468":"code","416b49ed":"code","840661c3":"code","e5101ca7":"code","d33396dd":"code","8992f3fe":"code","f4f4a224":"code","d6070451":"code","f8e82fcc":"code","18ab314c":"code","07a1f976":"code","4af5bcda":"code","6e5b5a24":"code","2b565c26":"code","9e025886":"code","b06ffeeb":"code","663db64c":"code","7fcf45a7":"code","87e18466":"code","e3b6ef02":"code","081f44de":"code","f5a65200":"code","4c1052e3":"code","22b23fa4":"code","b0dda869":"code","4d28a6c8":"code","794c18e1":"code","8972cc0d":"code","602ed1b8":"code","9a49c7f8":"code","2552eb45":"code","647ad4ee":"code","c19bc1bf":"code","70f4f574":"code","1e770fd8":"code","b8e73337":"code","a23d21f8":"code","cf08765b":"code","95b95dd6":"code","46b90d9c":"code","616223d5":"code","641b312b":"code","c8a41389":"code","921f9d01":"code","bda466fa":"code","5b0787f5":"code","994e272f":"code","e1facd8e":"code","0de69eaf":"code","abd6485b":"code","35647176":"code","a75e2fb4":"code","801ecea9":"code","e52e180a":"code","73acd4a4":"code","193defb7":"code","387eb1df":"code","f430c122":"code","6ebdec5e":"code","09227467":"code","93da2fad":"code","ae2630ac":"code","2016e6cf":"code","3633a772":"code","9195284b":"code","8246a623":"code","3b8a8f95":"code","39443233":"code","6844ada9":"code","00e2d132":"code","918914dd":"code","37e99109":"code","4cfc79bc":"code","7742d4ba":"code","68b81aca":"code","8eb18178":"code","4c1466ba":"code","f26888f1":"code","c9db8c36":"code","40603a06":"code","9e9727ae":"code","cfa1a83d":"code","3cf3e9d9":"code","6521fdf4":"code","0b96a742":"code","20781fad":"markdown","ef0d28ed":"markdown","bc3b9a43":"markdown","6241b91f":"markdown","a978fbc4":"markdown","b3773540":"markdown","e755f2b4":"markdown","84a7fcd2":"markdown","e5951d8c":"markdown","50d1fda2":"markdown","5be703c1":"markdown","c026949e":"markdown","cfdd7a3f":"markdown","b5d2e54c":"markdown","633b17b8":"markdown","d836adc8":"markdown","0c431909":"markdown","a4b5ba14":"markdown","8ade0bad":"markdown","21e75ec1":"markdown","d7b9daf0":"markdown","a5470a50":"markdown","0ff96edf":"markdown","5a1c658c":"markdown","e44542cf":"markdown","6b3e0224":"markdown","ed6c6d7c":"markdown","7bda59d4":"markdown","938dc24d":"markdown","e6730c73":"markdown","3337f6b4":"markdown"},"source":{"5f8bd086":"import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom datetime import date\nfrom datetime import datetime, timedelta","2060021c":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ae9e273f":"pd.set_option('display.max_columns', 500)","1dd81dd3":"df_current = pd.read_csv(\"\/kaggle\/input\/raw_data12.csv\",engine='python')","bfa097cb":"#df_current[(df_current['Date Announced'] == '30\/07\/2020') & total_cases_filter]['Num Cases'].sum()","0f890b0a":"df_current.columns","e8fa30ab":"df_18July_22July = pd.read_csv(\"\/kaggle\/input\/raw_data11.csv\",engine='python')","8bf06690":"df_14July_17July = pd.read_csv(\"\/kaggle\/input\/raw_data10.csv\",engine='python')","00c1d005":"df_8July_13July = pd.read_csv(\"\/kaggle\/input\/raw_data9.csv\",engine='python')","a85f85c9":"df_8July_13July.columns","6cea4fa2":"df_1July_7July = pd.read_csv(\"\/kaggle\/input\/raw_data8.csv\",engine='python')","d437f4c8":"df_1July_7July.columns","4f5dd4fa":"df_20June_30June = pd.read_csv(\"\/kaggle\/input\/raw_data7.csv\",engine='python')","673333f8":"df_20June_30June.columns","70c00344":"df_5June_19June = pd.read_csv(\"\/kaggle\/input\/raw_data6.csv\",engine='python')","6d83c41d":"df_5June_19June.columns","7414f7bd":"df_24May_4June = pd.read_csv(\"\/kaggle\/input\/raw_data5.csv\",engine='python')","1e6190ef":"df_24May_4June.columns","9cd52804":"df_10May_23May = pd.read_csv(\"\/kaggle\/input\/raw_data4.csv\",engine='python')","0cef4c1c":"df_10May_23May.columns","14da05fa":"df_27April_09May = pd.read_csv(\"\/kaggle\/input\/raw_data3.csv\",engine='python')","af68b0cc":"df_27April_09May.columns","6caf1164":"df_20April_26April = pd.read_csv(\"\/kaggle\/input\/raw_data2.csv\",engine='python')","12e7ee09":"df_20April_26April.columns","6454b842":"df_20April_26April.rename(columns={\"Num cases\": \"Num Cases\"}, inplace=True)","163c1dcf":"df_till_19thApril = pd.read_csv(\"\/kaggle\/input\/raw_data1.csv\",engine='python')","7a4e6894":"df_till_19thApril.columns","ccd407e1":"df_till_19thApril.rename(columns={\"Num cases\": \"Num Cases\"}, inplace=True)","1bc81a82":"frames = [df_current, df_18July_22July,df_14July_17July,df_8July_13July,df_1July_7July,df_20June_30June, df_5June_19June,df_24May_4June, df_10May_23May,df_27April_09May,df_20April_26April,df_till_19thApril]","a642fffb":"result = pd.concat(frames).reset_index()","4656ccca":"result.drop('index',axis=1,inplace=True)","ff066c46":"result.info()","7f782732":"result.head()","3b74a68a":"days_to_subtract = 1\nd = datetime.today() - timedelta(days=days_to_subtract)\n\n# dd\/mm\/YY\ntoday = d.strftime(\"%d\/%m\/%Y\")","3324c0ba":"result[result['Date Announced'] == today]['Num Cases'].sum()","795e91e2":"#result['Current Status'].unique()","aae0d603":"### Below query should give almost similar confirmed cases as in https:\/\/www.covid19india.org\/ (1 day before)\ntotal_cases_filter = (result['Current Status']!='Deceased') & (result['Current Status']!='Recovered') \nresult[total_cases_filter]['Num Cases'].sum()","08129b5f":"result[result['Entry_ID'].isnull()].head()","02a35d10":"result.Entry_ID.nunique()","4dfd7a48":"result['State Patient Number'].isnull().sum()","ad9079ec":"result[(result['State Patient Number'].str.startswith('AN', na = False))].head()","02e8bd7e":"result['State Patient Number'].str[:2].unique()","3b102468":"result['Date Announced'].isnull().sum()","416b49ed":"result['Date Announced'] = pd.to_datetime(result['Date Announced'], format='%d\/%m\/%Y')","840661c3":"# Number of cases in each month \ndf_month = result[total_cases_filter].groupby(result['Date Announced'].dt.month_name())['Num Cases'].sum().reset_index().sort_values('Num Cases')\nsns.barplot(x = 'Date Announced',y='Num Cases',data=df_month)\ndf_month","e5101ca7":"result['Age Bracket'].isnull().sum()","d33396dd":"# Percentage of null data \n(result['Age Bracket'].isnull().sum()\/len(result))*100","8992f3fe":"# Removing months string from age column \nresult.loc[result['Age Bracket'].str.contains('onth', na=False),'Age Bracket']=(result[result['Age Bracket'].str.contains('onth', na=False)]['Age Bracket'].str[0].astype(int))\/10","f4f4a224":"# Removing ages which are given as range\nresult.loc[result['Age Bracket']=='28-35','Age Bracket'] = (28+35)\/2","d6070451":"# Converting 'Age Bracket' column to numeric\nresult['Age Bracket'] = pd.to_numeric(result['Age Bracket'],errors='coerce')","f8e82fcc":"result['Age_Bracket_bins']= pd.cut(result['Age Bracket'], bins=[0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89,94,99], \n             include_lowest=True)","18ab314c":"# Active cases age analysis\nplt.figure(figsize=(30,10))\nsns.countplot(x = 'Age_Bracket_bins', data=result[(~result['Age Bracket'].isnull()) & (total_cases_filter) & (result['Num Cases'] != 0) & \n       (result['Num Cases'] != 5)] )\nplt.show()\n#plt.savefig('ex1.pdf')","07a1f976":"# Deceased cases age analysis\nplt.figure(figsize=(30,10))\nsns.countplot(x = 'Age_Bracket_bins', data=result[(~result['Age Bracket'].isnull()) & (result['Current Status']=='Deceased') & (result['Num Cases'] != 0) & \n       (result['Num Cases'] != 5)] )\nplt.show()","4af5bcda":"# Percentage of null data \n(result['Gender'].isnull().sum()\/len(result))*100","6e5b5a24":"result.Gender.unique()","2b565c26":"result[result['Gender'] == 'Non-Binary'].shape","9e025886":"result['Gender'] = result.Gender.str.strip()","b06ffeeb":"result[(~result['Gender'].isnull()) & (total_cases_filter)].shape","663db64c":"result[total_cases_filter].groupby('Gender')['Num Cases'].sum().plot.bar()","7fcf45a7":"# Percentage of null data \n(result['Detected City'].isnull().sum()\/len(result))*100","87e18466":"result.groupby('Detected City')['Num Cases'].sum().nlargest(10)","e3b6ef02":"result[result['Detected City'] == 'Police Line'].head()","081f44de":"# Percentage of null data \n(result['Detected District'].isnull().sum()\/len(result))*100","f5a65200":"result['Detected District'] = result['Detected District'].str.title()","4c1052e3":"#a = result['Detected District'].astype(str).unique()\n#sorted(a)","22b23fa4":"# Converting Others as Unassigned for Detected District\nresult.loc[result['Detected District']=='Others','Detected District'] = 'Unassigned'","b0dda869":"# Converting Other State as Unassigned for Detected District\nresult.loc[result['Detected District']=='Other State','Detected District'] = 'Unassigned'","4d28a6c8":"# Converting Agar malwa district to Agar Malwa for 'Detected District'\nresult.loc[result['Detected District']=='Agar malwa','Detected District'] = 'Agar Malwa'","794c18e1":"# Converting Airport quarantine district to Airport Quarantine for 'Detected District'\nresult.loc[result['Detected District']=='Airport quarantine','Detected District'] = 'Airport Quarantine'","8972cc0d":"# Mapping Airport Quarantine to a new column and converting Airport Quarantine to Unassigned \nresult['Airport_Quarantine'] = result['Detected District'].apply(lambda x: 1 if x == 'Airport Quarantine' else 0)\nresult.loc[result['Detected District']=='Airport Quarantine','Detected District'] = 'Unassigned'","602ed1b8":"# Mapping BSF Camp to a new column and converting BSF Camp to Unassigned \nresult['BSF_Camp'] = result['Detected District'].apply(lambda x: 1 if x == 'BSF Camp' else 0)\nresult.loc[result['Detected District']=='BSF Camp','Detected District'] = 'Unassigned'","9a49c7f8":"# Mapping Evacuees to a new column and converting Evacuees to Unassigned \nresult['Evacuees'] = result['Detected District'].apply(lambda x: 1 if x == 'Evacuees' else 0)\nresult.loc[result['Detected District']=='Evacuees','Detected District'] = 'Unassigned'","2552eb45":"# Mapping Foreign Evacuees to a new column and converting Foreign Evacuees to Unassigned \nresult['Foreign_Evacuees'] = result['Detected District'].apply(lambda x: 1 if x == 'Foreign Evacuees' else 0)\nresult.loc[result['Detected District']=='Foreign Evacuees','Detected District'] = 'Unassigned'","647ad4ee":"# Mapping Italians to a new column and converting Italians to Unassigned \nresult['Italians'] = result['Detected District'].apply(lambda x: 1 if x == 'Italians' else 0)\nresult.loc[result['Detected District']=='Italians','Detected District'] = 'Unassigned'","c19bc1bf":"# Mapping Railway Quarantine to a new column and converting Railway Quarantine to Unassigned \nresult['Railway_Quarantine'] = result['Detected District'].apply(lambda x: 1 if x == 'Railway Quarantine' else 0)\nresult.loc[result['Detected District']=='Railway Quarantine','Detected District'] = 'Unassigned'","70f4f574":"# Converting Unknown to Unassigned for Detected District \nresult.loc[result['Detected District']=='Unknown','Detected District'] = 'Unassigned'","1e770fd8":"# Filling NA with Unassigned\nvalues = {'Detected District': 'Unassigned'}\nresult.fillna(value=values,inplace=True)","b8e73337":"# Percentage of null data \nround((result['Detected State'].isnull().sum()\/len(result))*100,2)","a23d21f8":"state = result['Detected State'].astype(str).unique()\nstate","cf08765b":"result[result['Detected State'].isnull()].head()","95b95dd6":"# Percentage of null data \nround((result['State code'].isnull().sum()\/len(result))*100,2)","46b90d9c":"# Percentage of null data \nround((result['Num Cases'].isnull().sum()\/len(result))*100,2)","616223d5":"round(result[result['Num Cases'] == 1]['Num Cases'].count()\/len(result)*100,2)","641b312b":"round(result[result['Num Cases'] > 1]['Num Cases'].count()\/len(result)*100,2)","c8a41389":"round(result[result['Num Cases'] <= 0]['Num Cases'].count()\/len(result)*100,2)","921f9d01":"improper_entry = result[(result['Num Cases'] > 1) & total_cases_filter]['Num Cases'].sum() + result[(result['Num Cases'] <= 0) & total_cases_filter]['Num Cases'].sum()\nimproper_entry","bda466fa":"proper_entry = result[(result['Num Cases'] == 1) & total_cases_filter]['Num Cases'].sum()\nproper_entry","5b0787f5":"result['Num Cases'].value_counts()\n","994e272f":"# Percentage of null data \nround((result['Current Status'].isnull().sum()\/len(result))*100,2)","e1facd8e":"result['Current Status'].fillna('Missing', inplace=True)\ndf_current_status = result.groupby('Current Status')['Num Cases'].sum().reset_index()\ndf_current_status","0de69eaf":"plt.figure(figsize=(20,6))\nsns.barplot(x='Current Status',y='Num Cases',data=df_current_status)","abd6485b":"# Converting Migrated_Other to Migrated for Current Status \nresult.loc[result['Current Status']=='Migrated_Other','Current Status'] = 'Migrated'","35647176":"# Converting Migrated_other to Migrated for Current Status \nresult.loc[result['Current Status']=='Migrated_other','Current Status'] = 'Migrated'","a75e2fb4":"result.rename(columns = {\"Contracted from which Patient (Suspected)\":\"Contracted_From\"},inplace= True)","801ecea9":"# Percentage of null data \nround((result['Contracted_From'].isnull().sum()\/len(result))*100,2)","e52e180a":"# Percentage of null data \nround((result['Notes'].isnull().sum()\/len(result))*100,2)","73acd4a4":"result[(~result['Notes'].isnull()) & total_cases_filter]['Num Cases'].sum()","193defb7":"result[result['Notes'].str.contains(\"suffering from\", na=False)]['Num Cases'].sum()","387eb1df":"result[~result['Notes'].isnull()]['Entry_ID'].count()","f430c122":"result['Other_disease_2'] = result['Notes'].str.split(\"suffering from\").str[1].str.split(\"and\").str[1]","6ebdec5e":"result['Other_disease_1']  = result['Notes'].str.split(\"suffering from\").str[1].str.split(\"and\").str[0]","09227467":"result['Other_disease_1'] = result['Other_disease_1'].str.strip()\nresult['Other_disease_1'] = result['Other_disease_1'].str.rstrip(\".\")\nresult['Other_disease_1'] = result['Other_disease_1'].str.strip()\nresult['Other_disease_1'] = result['Other_disease_1'].str.title()","93da2fad":"result['Other_disease_2'] = result['Other_disease_2'].str.rstrip(\".\")\nresult['Other_disease_2'] = result['Other_disease_2'].str.strip()","ae2630ac":"# easy mrthod for Split and expand\n#result[~result['Notes'].isnull()]['Notes'].str.split(\"suffering from\").str[1].str.split(\"and\",expand=True)","2016e6cf":"result['Notes'] = result['Notes'].str.lower()","3633a772":"result[(~result['Notes'].isnull()) & \n       (~result['Notes'].str.contains(\"details awaited\", na=False)) & \n      (~result['Notes'].str.contains(\"suffering \", na=False)) & \n      (~result['Notes'].str.contains(\"correction \", na=False)) &\n      (~result['Notes'].str.contains(\"contact\", na=False)) &\n      (~result['Notes'].str.contains(\"travel\", na=False)) &\n      (~result['Notes'].str.contains(\"sari\", na=False)) &\n      (~result['Notes'].str.contains(\"influenza\", na=False)) & \n       (~result['Notes'].str.contains(\"bulk\", na=False)) &\n       (~result['Notes'].str.contains(\"re con\", na=False)) &\n       (~result['Notes'].str.contains(\"reconciled\", na=False)) &\n       (~result['Notes'].str.contains(\"returnees\", na=False)) &\n       (~result['Notes'].str.contains(\"previous\", na=False)) &\n       (~result['Notes'].str.contains(\"returned\", na=False)) &\n       (~result['Notes'].str.contains(\"district wise\", na=False)) &\n       (~result['Notes'].str.contains(\"bsf\", na=False)) &\n       (result['Num Cases'] > 1.0) & total_cases_filter].sort_values('Num Cases',ascending=False).head()","9195284b":"print(result[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"correction \", na=False))]['Num Cases'].sum())\nresult[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"correction \", na=False))]['Num Cases'].count()","8246a623":"print(result[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"suffering \", na=False))]['Num Cases'].sum())\nresult[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"suffering \", na=False))]['Num Cases'].count()","3b8a8f95":"print(result[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"details awaited\", na=False))]['Num Cases'].sum())\nresult[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"details awaited\", na=False))]['Num Cases'].count()","39443233":"print(result[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"contact\", na=False))]['Num Cases'].sum())\nresult[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"contact\", na=False))]['Num Cases'].count()","6844ada9":"print(result[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"travel\", na=False))]['Num Cases'].sum())\nresult[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"travel\", na=False))]['Num Cases'].count()","00e2d132":"print(result[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"sari\", na=False))]['Num Cases'].sum())\n","918914dd":"print(result[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"influenza\", na=False))]['Num Cases'].sum())\nresult[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"influenza\", na=False))]['Num Cases'].count()","37e99109":"print(result[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"bulk\", na=False))]['Num Cases'].sum())\nresult[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"bulk\", na=False))]['Num Cases'].count()","4cfc79bc":"print(result[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"re con\", na=False))]['Num Cases'].sum())\nresult[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"re con\", na=False))]['Num Cases'].count()","7742d4ba":"\nprint(result[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"reconciled\", na=False))]['Num Cases'].sum())\nresult[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"reconciled\", na=False))]['Num Cases'].count()","68b81aca":"print(result[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"returnees\", na=False))]['Num Cases'].sum())\nresult[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"returnees\", na=False))]['Num Cases'].count()","8eb18178":"print(result[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"previous\", na=False))]['Num Cases'].sum())\nresult[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"previous\", na=False))]['Num Cases'].count()","4c1466ba":"print(result[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"returned\", na=False))]['Num Cases'].sum())\nresult[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"returned\", na=False))]['Num Cases'].count()","f26888f1":"print(result[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"district wise\", na=False))]['Num Cases'].sum())\nresult[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"district wise\", na=False))]['Num Cases'].count()","c9db8c36":"print(result[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"bsf\", na=False))]['Num Cases'].sum())\nresult[(~result['Notes'].isnull()) & (result['Notes'].str.contains(\"bsf\", na=False))]['Num Cases'].count()","40603a06":"result.info()","9e9727ae":"# Percentage of null data \nround((result['Source_1'].isnull().sum()\/len(result))*100,2)","cfa1a83d":"result['Source_1_derived'] = result['Source_1'].str.split(\"\/\").str[2]","3cf3e9d9":"result['Source_1_test'] = result['Source_1'].str.split(\"\/\").str[1]","6521fdf4":"result[(~result['Source_1'].isnull()) & (~result['Source_1'].str.startswith('http',na=False))]['Source_1'].str.split(\"\/\").str[0].unique()","0b96a742":"#result[result['Source_1_test'].str.contains('wp',na=False)]","20781fad":"#### Not doing much analysis on 'Date Announced' which is ordered categorical variable as covid19india.org website already done lot of analysis on that","ef0d28ed":"### Analysis using 'Age Bracket'","bc3b9a43":"#### Verdict : Detected City\n- Since there is only 9% valid data not much analysis can be done here.","6241b91f":"### Mergin Data","a978fbc4":"### Analysis on entry_id","b3773540":"#### Merged data ","e755f2b4":"#### Entry_id has only unique value. So this column is not of much use","84a7fcd2":"### No analysis is required as it has 99% null data.","e5951d8c":"### Further Information can be found from 'Notes' column\n- As there are 555 more rows.\n- Although it hard to group now\n- Also not much trend can be found out of this column as only 157069.0 have notes as of 31st July","50d1fda2":"## Reading all input file and \n- printing their columns\n- modifying column names for some inputs","5be703c1":"#### Verdict : Gender\n- Only around 47% cases have gender mentioned for it. \n- Lot of missing data","c026949e":"### Contains other disease analysis using notes but \n- has only 97 total count and so not much helpful. ","cfdd7a3f":"## Analysis on Source_1 column now","b5d2e54c":"### 'State Patient Number' Analysis ","633b17b8":"## Analysis on Num_Cases","d836adc8":"## Analysis on Notes","0c431909":"### Creating bins for age","a4b5ba14":"## Univariate Analysis","8ade0bad":"### 'Detected District' Analysis","21e75ec1":"### For 'Deteted_State' and 'State_code' below is observation\n* Only 35 and 34 rows are having nan value respectively \n* Only 66 rows are having unassigned state as column value for 'Detected_State' and 'State_code'","d7b9daf0":"## Current Status","a5470a50":"### Analsis on 'Detected State' and 'State Code'","0ff96edf":"### Analysis on 'Gender' column","5a1c658c":"### Analysis on 'Num Cases'\n- 90% data have num of cases not equals to 1\n- Although this column has only 1% missing data.","e44542cf":"### 'Detected City' Analysis","6b3e0224":"### Some analysis using 'Date Announced'","ed6c6d7c":"### Analysis Start","7bda59d4":"#### Verdict : Age bracket column has following problems:\n- Data is not acurate as there are spikes at the multiple of age 5\n- Some data has doesn't have proper age mentioned.\n- Lot of missing data is there alsmost 60%\n- some data contains months as suffix","938dc24d":"#### Other Other_disease_2 analysis","e6730c73":"## Analysis on 'Contracted from which Patient (Suspected)'","3337f6b4":"#### State Patient Number is also of not much use as it contains statecode followed by unique id\n\n#### Not so useful but inference made out of this column is below:\n- States which actaully captures patient information using patient id."}}