{"cell_type":{"053419be":"code","63288965":"code","05123bf9":"code","75c634f7":"code","06295227":"code","11cb2989":"code","f37ea5c2":"code","00734c50":"markdown"},"source":{"053419be":"import sys\nfrom matplotlib import pyplot\nfrom keras.datasets import cifar10\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nfrom keras.layers import Dropout\nfrom keras.optimizers import SGD","63288965":"def load_dataset():\n    (trainX, trainY), (testX, testY) = cifar10.load_data()\n    trainY = to_categorical(trainY)\n    testY = to_categorical(testY)\n    return trainX, trainY, testX, testY","05123bf9":"def prep_pixels(train, test):\n    train_norm = train.astype('float32')\n    test_norm = test.astype('float32')\n    train_norm = train_norm \/ 255.0\n    test_norm = test_norm \/ 255.0\n    return train_norm, test_norm","75c634f7":"def summarize_diagnostics(history):\n    # plot loss\n    pyplot.subplot(211)\n    pyplot.title('Cross Entropy Loss')\n    pyplot.plot(history.history['loss'], color='blue', label='train')\n    pyplot.plot(history.history['val_loss'], color='orange', label='test')\n    # plot accuracy\n    pyplot.subplot(212)\n    pyplot.title('Classification Accuracy')\n    pyplot.plot(history.history['accuracy'], color='blue', label='train')\n    pyplot.plot(history.history['val_accuracy'], color='orange', label='test')","06295227":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(32, 32, 3)))\nmodel.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\nmodel.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\nmodel.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.4))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\n# compile model\nopt = SGD(lr=0.001, momentum=0.9)\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])","11cb2989":"# load dataset\ntrainX, trainY, testX, testY = load_dataset()\n# prepare pixel data\ntrainX, testX = prep_pixels(trainX, testX)\n\n# fit model\nhistory = model.fit(trainX, trainY, epochs=200, batch_size=64, validation_data=(testX, testY), verbose=0)\n\n# evaluate model\n_, acc = model.evaluate(testX, testY, verbose=0)\nprint('Accuracy: %.3f' % (acc * 100.0))","f37ea5c2":"# learning curves\nsummarize_diagnostics(history)","00734c50":"# CIFAR 10 CNN"}}