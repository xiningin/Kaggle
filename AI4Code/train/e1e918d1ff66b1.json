{"cell_type":{"6000318a":"code","1b488d37":"code","2ba495c8":"code","ac504a7a":"code","58c9386d":"code","3e4534f3":"code","cf72178e":"code","e2173df0":"code","1640dd65":"code","467cf1e8":"code","b472c835":"code","405e7c07":"code","d034bea5":"code","2c094027":"code","d95e3ea2":"code","8c2b0d2f":"code","379f655b":"code","5a59b9fa":"code","98796725":"code","740202bf":"code","8d8b9149":"code","0a1dad19":"code","ee58d23a":"code","87dbddfd":"code","e8740c22":"code","aff90df6":"code","fdb76d58":"code","32a524de":"code","06c2abf0":"code","8de382a9":"code","701a8a30":"code","6b423dff":"code","0fa06249":"code","6fcf65fa":"code","74988819":"code","00f05d11":"code","7146f8b4":"code","b1f7779e":"code","a0214668":"code","40a33206":"code","8a275786":"code","c9478d33":"code","30753008":"code","5b03ca2c":"code","2d35e517":"code","e181f805":"code","0ceb7836":"code","f961cda6":"code","aeee8a2b":"code","d2331777":"code","93b2c5d4":"code","1afbdf8a":"code","9818672f":"code","b5cd5974":"code","b25d40eb":"code","b2f92bcd":"code","c6e69bf3":"code","35de6098":"code","edc5dcbc":"code","bbe97ff6":"code","899e7b54":"code","53128529":"markdown","27f74178":"markdown","c0fe9ed8":"markdown","ed187d97":"markdown","e882c081":"markdown","d8ca65da":"markdown","cffabd6e":"markdown","9729743d":"markdown","91cb56b0":"markdown","b3d14eef":"markdown","72a109a2":"markdown","5f010367":"markdown","41a1b0bd":"markdown","122892b0":"markdown","24e599a7":"markdown","8bf41931":"markdown","1532c679":"markdown","ae16cd69":"markdown","f1879475":"markdown","3c0650fb":"markdown","68962b52":"markdown","4ac08d7a":"markdown","6cac40a9":"markdown","0f0f55de":"markdown","7e780566":"markdown","d5c86643":"markdown","8537395f":"markdown","05c2355b":"markdown","eb7fc928":"markdown","a74ba75b":"markdown","c2c88c25":"markdown","30629559":"markdown","f48c9072":"markdown","836a36a8":"markdown","df21ac0c":"markdown","9105b28c":"markdown","54c32eef":"markdown","7dc55eb9":"markdown","e4708032":"markdown","ab24be7b":"markdown","8d6d7169":"markdown","c5238512":"markdown","03a529c6":"markdown","dedc18df":"markdown","d96cbdfb":"markdown","08ee25e9":"markdown","f2ce6ff2":"markdown","4fc930f7":"markdown","2fa97b04":"markdown","11206120":"markdown","23dda322":"markdown","3d28b591":"markdown","07255f69":"markdown","e89467cd":"markdown","ce55e635":"markdown","2be521d7":"markdown","1f20d8f0":"markdown"},"source":{"6000318a":"import pandas as pd # package for high-performance, easy-to-use data structures and data analysis\nimport numpy as np # fundamental package for scientific computing with Python\nimport matplotlib\nimport matplotlib.pyplot as plt # for plotting\nimport seaborn as sns # for making plots with seaborn\ncolor = sns.color_palette()\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go  \n#import plotly.graph_objs.layout.YAxis as goly\n#import plotly.graph_objs.layout.scene.YAxis as golsy\nimport plotly.offline as offline\noffline.init_notebook_mode()\n# from plotly import tools\n# import plotly.tools as tls\n# import squarify\n# from mpl_toolkits.basemap import Basemap\n# from numpy import array\n# from matplotlib import cm\n\t\nfrom  sklearn.utils import resample\nfrom sklearn import preprocessing \n\n# import cufflinks and offline mode\nimport cufflinks as cf\ncf.go_offline()\n\n#code to run the xgboost model\nfrom numpy import loadtxt\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n\n# from sklearn import preprocessing\n# # Supress unnecessary warnings so that presentation looks clean\n# import warnings\n# warnings.filterwarnings(\"ignore\")\n\n# # Print all rows and columns\n# pd.set_option('display.max_columns', None)\n# pd.set_option('display.max_rows', None)\n\nfrom sklearn.preprocessing import Imputer\nmy_imputer = Imputer()\n#data_with_imputed_values = my_imputer.fit_transform(original_data)\n","1b488d37":"import os\nprint(os.listdir(\"..\/input\"))","2ba495c8":"application_train = pd.read_csv('..\/input\/application_train.csv')  # creating a data frame named application_train using application_train.csv\n#POS_CASH_balance = pd.read_csv('..\/input\/POS_CASH_balance.csv')\n#bureau_balance = pd.read_csv('..\/input\/bureau_balance.csv')\n#previous_application = pd.read_csv('..\/input\/previous_application.csv')\n#installments_payments = pd.read_csv('..\/input\/installments_payments.csv')\n#credit_card_balance = pd.read_csv('..\/input\/credit_card_balance.csv')\nbureau = pd.read_csv('..\/input\/bureau.csv')\napplication_test = pd.read_csv('..\/input\/application_test.csv')","ac504a7a":"# uncomment for testing only\n# Downsample majority class\n#train_downsampled = resample(application_train, \n#                                 replace=False,    # sample without replacement\n#                                 n_samples=25000,     # to match minority class\n#                                 random_state=123) # reproducible results","58c9386d":"train_d= application_train[[\n\"SK_ID_CURR\",\n\"NAME_CONTRACT_TYPE\",\n\"CODE_GENDER\",\n\"FLAG_OWN_CAR\",\n\"FLAG_OWN_REALTY\",\n\"CNT_CHILDREN\",\n\"AMT_INCOME_TOTAL\",\n\"AMT_CREDIT\",\n\"AMT_ANNUITY\",\n\"AMT_GOODS_PRICE\",\n\"NAME_TYPE_SUITE\",\n\"NAME_INCOME_TYPE\",\n\"NAME_EDUCATION_TYPE\",\n\"NAME_FAMILY_STATUS\",\n\"NAME_HOUSING_TYPE\",\n\"REGION_POPULATION_RELATIVE\",\n\"DAYS_BIRTH\",\n\"DAYS_EMPLOYED\",\n\"OWN_CAR_AGE\",\n\"OCCUPATION_TYPE\",\n\"CNT_FAM_MEMBERS\",\n\"REGION_RATING_CLIENT_W_CITY\",\n\"ORGANIZATION_TYPE\",\n\"EXT_SOURCE_1\",\n\"EXT_SOURCE_2\",\n\"EXT_SOURCE_3\",\n\"YEARS_BUILD_AVG\",\n\"FLAG_DOCUMENT_2\",\n\"FLAG_DOCUMENT_3\",\n\"FLAG_DOCUMENT_4\",\n\"FLAG_DOCUMENT_5\",\n\"FLAG_DOCUMENT_6\",\n\"FLAG_DOCUMENT_7\",\n\"FLAG_DOCUMENT_8\",\n\"FLAG_DOCUMENT_9\",\n\"FLAG_DOCUMENT_10\",\n\"FLAG_DOCUMENT_11\",\n\"FLAG_DOCUMENT_12\",\n\"FLAG_DOCUMENT_13\",\n\"FLAG_DOCUMENT_14\",\n\"FLAG_DOCUMENT_15\",\n\"FLAG_DOCUMENT_16\",\n\"FLAG_DOCUMENT_17\",\n\"FLAG_DOCUMENT_18\",\n\"FLAG_DOCUMENT_19\",\n\"FLAG_DOCUMENT_20\",\n\"FLAG_DOCUMENT_21\",\n\"AMT_REQ_CREDIT_BUREAU_HOUR\",\n\"AMT_REQ_CREDIT_BUREAU_MON\",\n\"AMT_REQ_CREDIT_BUREAU_YEAR\",\n\"TARGET\"]]","3e4534f3":"bureau_g = bureau[bureau['CREDIT_ACTIVE'] == 'Active'].groupby('SK_ID_CURR').agg({'CREDIT_ACTIVE': np.size, \n                                                                              'DAYS_CREDIT': np.mean,\n                                                                              'CREDIT_DAY_OVERDUE': np.mean,\n                                                                              'AMT_CREDIT_MAX_OVERDUE': np.sum,\n                                                                              'CNT_CREDIT_PROLONG': np.size,\n                                                                              'AMT_CREDIT_SUM': np.sum,\n                                                                              'AMT_CREDIT_SUM_DEBT': np.sum,\n                                                                              'AMT_CREDIT_SUM_LIMIT': np.sum,\n                                                                              'AMT_CREDIT_SUM_OVERDUE':np.sum,\n                                                                              'CREDIT_TYPE':np.size,\n                                                                              'AMT_ANNUITY':np.sum\n                                                                             })\n                    ","cf72178e":"bureau_gp=pd.DataFrame(bureau_g).reset_index()","e2173df0":"bureau_gp.head()","1640dd65":"train = pd.merge(train_d, bureau_gp, how='left', on='SK_ID_CURR')\n#bureau_all = pd.merge(bureau, bureau_balance, how='left', on= 'SK_ID_BUREAU')\n#train = train_b.drop('SK_ID_BUREAU', axis=1)\n","467cf1e8":"test_d= application_test[[\n\"SK_ID_CURR\",\n\"NAME_CONTRACT_TYPE\",\n\"CODE_GENDER\",\n\"FLAG_OWN_CAR\",\n\"FLAG_OWN_REALTY\",\n\"CNT_CHILDREN\",\n\"AMT_INCOME_TOTAL\",\n\"AMT_CREDIT\",\n\"AMT_ANNUITY\",\n\"AMT_GOODS_PRICE\",\n\"NAME_TYPE_SUITE\",\n\"NAME_INCOME_TYPE\",\n\"NAME_EDUCATION_TYPE\",\n\"NAME_FAMILY_STATUS\",\n\"NAME_HOUSING_TYPE\",\n\"REGION_POPULATION_RELATIVE\",\n\"DAYS_BIRTH\",\n\"DAYS_EMPLOYED\",\n\"OWN_CAR_AGE\",\n\"OCCUPATION_TYPE\",\n\"CNT_FAM_MEMBERS\",\n\"REGION_RATING_CLIENT_W_CITY\",\n\"ORGANIZATION_TYPE\",\n\"EXT_SOURCE_1\",\n\"EXT_SOURCE_2\",\n\"EXT_SOURCE_3\",\n\"YEARS_BUILD_AVG\",\n\"FLAG_DOCUMENT_2\",\n\"FLAG_DOCUMENT_3\",\n\"FLAG_DOCUMENT_4\",\n\"FLAG_DOCUMENT_5\",\n\"FLAG_DOCUMENT_6\",\n\"FLAG_DOCUMENT_7\",\n\"FLAG_DOCUMENT_8\",\n\"FLAG_DOCUMENT_9\",\n\"FLAG_DOCUMENT_10\",\n\"FLAG_DOCUMENT_11\",\n\"FLAG_DOCUMENT_12\",\n\"FLAG_DOCUMENT_13\",\n\"FLAG_DOCUMENT_14\",\n\"FLAG_DOCUMENT_15\",\n\"FLAG_DOCUMENT_16\",\n\"FLAG_DOCUMENT_17\",\n\"FLAG_DOCUMENT_18\",\n\"FLAG_DOCUMENT_19\",\n\"FLAG_DOCUMENT_20\",\n\"FLAG_DOCUMENT_21\",\n\"AMT_REQ_CREDIT_BUREAU_HOUR\",\n\"AMT_REQ_CREDIT_BUREAU_MON\",\n\"AMT_REQ_CREDIT_BUREAU_YEAR\"\n]]","b472c835":"test = pd.merge(test_d, bureau_gp, how='left', on='SK_ID_CURR')\n#test = test_b.drop('SK_ID_BUREAU', axis=1)","405e7c07":"print (application_train.shape)\nprint (train.shape)\nprint (application_test.shape)\nprint (test.shape)\n\n\n","d034bea5":"categorical_featrs = [\n    k for k in train.columns if train[k].dtype == 'object'\n]\nfor col in categorical_featrs:\n    lb = preprocessing.LabelEncoder()\n    lb.fit(list(train[col].values.astype('str')) ) \n    train[col] = lb.transform(list(train[col].values.astype('str')))\n   ","2c094027":"categorical_featrs = [\n    j for j in test.columns if test[j].dtype == 'object'\n]\nfor col in categorical_featrs:\n    lb = preprocessing.LabelEncoder()\n    lb.fit(list(test[col].values.astype('str')) ) \n    test[col] = lb.transform(list(test[col].values.astype('str')))","d95e3ea2":"train.fillna(-999, inplace = True)","8c2b0d2f":"X= train.drop([\"TARGET\"], axis=1)\ny= train[\"TARGET\"]\n\ntest_size = 0.30\n#x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=test_size, random_state=seed)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size,\n                                                    random_state=0)","379f655b":"\n# fit model no training data\nmodel = XGBClassifier()\n#x_train= application_train[[\"EXT_SOURCE_1\",\"EXT_SOURCE_2\",\"EXT_SOURCE_3\"]]\n#x_test= application_test[[\"EXT_SOURCE_1\",\"EXT_SOURCE_2\",\"EXT_SOURCE_3\"]]\n#y_train= application_train[\"TARGET\"]\nmodel.fit(X_train, y_train)\n# make predictions for test data\ny_pred = model.predict(X_test)\npredictions = [round(value) for value in y_pred]\n# evaluate predictions\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n","5a59b9fa":"from sklearn import metrics\nfrom ggplot import *\nfrom sklearn.metrics import roc_curve, roc_auc_score\n\npreds = model.predict_proba(X_test)[:,1]\nfpr, tpr, _ = metrics.roc_curve(y_test, preds)\n\nrs=roc_auc_score(y_test, preds)\nprint (\"Ther ROC is \",rs  ) \n\ndf = pd.DataFrame(dict(fpr=fpr, tpr=tpr))\nggplot(df, aes(x='fpr', y='tpr')) +\\\n geom_line() +\\\n geom_abline(linetype='dashed') +\\\n    xlim(-0.01,1) +\\\n    ylim(0,1.01) +\\\n    xlab(\"False Positive Rate (FPR) \")+\\\n    ylab(\"True Positive Rate (TPR) \")","98796725":"#preds_see = model.predict_proba(X_test)\npreds = model.predict_proba(test)[:,1]\n# We will look at the predicted prices to ensure we have something sensible.\n#print(preds_see)\n#print(preds)","740202bf":"my_submission = pd.DataFrame({'SK_ID_CURR': test.SK_ID_CURR, 'TARGET': preds})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission.csv', index=False)","8d8b9149":"submission_csv = pd.read_csv('submission.csv')\n","0a1dad19":"print (application_test.shape)\nprint (test.shape)\nprint (submission_csv.shape)","ee58d23a":"from sklearn.preprocessing import Imputer\nmy_imputer = Imputer()\nX_test_imp = my_imputer.fit_transform(X_test)\nX_train_imp= my_imputer.fit_transform(X_train)\n#y_train_imp= my_imputer.fit_transform(y_train)","87dbddfd":"print('Size of application_train data', application_train.shape)\nprint('Size of POS_CASH_balance data', POS_CASH_balance.shape)\nprint('Size of bureau_balance data', bureau_balance.shape)\nprint('Size of previous_application data', previous_application.shape)\nprint('Size of installments_payments data', installments_payments.shape)\nprint('Size of credit_card_balance data', credit_card_balance.shape)\nprint('Size of bureau data', bureau.shape)","e8740c22":"application_train.columns.values","aff90df6":"bureau_balance.head()","fdb76d58":"previous_application.head()","32a524de":"previous_application.columns.values","06c2abf0":"installments_payments.head()","8de382a9":"credit_card_balance.head()","701a8a30":"credit_card_balance.columns.values","6b423dff":"bureau.head()","0fa06249":"# checking missing data\ntotal = application_train.isnull().sum().sort_values(ascending = False)\npercent = (application_train.isnull().sum()\/application_train.isnull().count()*100).sort_values(ascending = False)\nmissing_application_train_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_application_train_data[total>0] ","6fcf65fa":"# checking missing data\ntotal = POS_CASH_balance.isnull().sum().sort_values(ascending = False)\npercent = (POS_CASH_balance.isnull().sum()\/POS_CASH_balance.isnull().count()*100).sort_values(ascending = False)\nmissing_POS_CASH_balance_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_POS_CASH_balance_data[total>0]","74988819":"# checking missing data\ntotal = bureau_balance.isnull().sum().sort_values(ascending = False)\npercent = (bureau_balance.isnull().sum()\/bureau_balance.isnull().count()*100).sort_values(ascending = False)\nmissing_bureau_balance_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_bureau_balance_data","00f05d11":"# checking missing data\ntotal = previous_application.isnull().sum().sort_values(ascending = False)\npercent = (previous_application.isnull().sum()\/previous_application.isnull().count()*100).sort_values(ascending = False)\nmissing_previous_application_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_previous_application_data[total>0]","7146f8b4":"# checking missing data\ntotal = installments_payments.isnull().sum().sort_values(ascending = False)\npercent = (installments_payments.isnull().sum()\/installments_payments.isnull().count()*100).sort_values(ascending = False)\nmissing_installments_payments_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_installments_payments_data.head(3)","b1f7779e":"# checking missing data\ntotal = credit_card_balance.isnull().sum().sort_values(ascending = False)\npercent = (credit_card_balance.isnull().sum()\/credit_card_balance.isnull().count()*100).sort_values(ascending = False)\nmissing_credit_card_balance_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_credit_card_balance_data.head(10)","a0214668":"# checking missing data\ntotal = bureau.isnull().sum().sort_values(ascending = False)\npercent = (bureau.isnull().sum()\/bureau.isnull().count()*100).sort_values(ascending = False)\nmissing_bureau_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_bureau_data.head(8)","40a33206":"plt.figure(figsize=(12,5))\nplt.title(\"Distribution of AMT_CREDIT\")\nax = sns.distplot(application_train[\"AMT_CREDIT\"])","8a275786":"plt.figure(figsize=(12,5))\nplt.title(\"Distribution of AMT_INCOME_TOTAL\")\nax = sns.distplot(application_train[\"AMT_INCOME_TOTAL\"].dropna())","c9478d33":"plt.figure(figsize=(12,5))\nplt.title(\"Distribution of AMT_GOODS_PRICE\")\nax = sns.distplot(application_train[\"AMT_GOODS_PRICE\"].dropna())","30753008":"temp = application_train[\"NAME_TYPE_SUITE\"].value_counts()\n#print(\"Total number of states : \",len(temp))\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp \/ temp.sum())*100,\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"Who accompanied client when applying for the  application in % \",\n    xaxis=dict(\n        title='Name of type of the Suite',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count of Name of type of the Suite in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='schoolStateNames')","5b03ca2c":"temp = application_train[\"TARGET\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Loan Repayed or not')","2d35e517":"temp = application_train[\"NAME_CONTRACT_TYPE\"].value_counts()\nfig = {\n  \"data\": [\n    {\n      \"values\": temp.values,\n      \"labels\": temp.index,\n      \"domain\": {\"x\": [0, .48]},\n      #\"name\": \"Types of Loans\",\n      #\"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\"\n    },\n    \n    ],\n  \"layout\": {\n        \"title\":\"Types of loan\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Loan Types\",\n                \"x\": 0.17,\n                \"y\": 0.5\n            }\n            \n        ]\n    }\n}\niplot(fig, filename='donut')","e181f805":"temp1 = application_train[\"FLAG_OWN_CAR\"].value_counts()\ntemp2 = application_train[\"FLAG_OWN_REALTY\"].value_counts()\n\nfig = {\n  \"data\": [\n    {\n      \"values\": temp1.values,\n      \"labels\": temp1.index,\n      \"domain\": {\"x\": [0, .48]},\n      \"name\": \"Own Car\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .6,\n      \"type\": \"pie\"\n    },\n    {\n      \"values\": temp2.values,\n      \"labels\": temp2.index,\n      \"text\":\"Own Realty\",\n      \"textposition\":\"inside\",\n      \"domain\": {\"x\": [.52, 1]},\n      \"name\": \"Own Reality\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .6,\n      \"type\": \"pie\"\n    }],\n  \"layout\": {\n        \"title\":\"Purpose of loan\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Own Car\",\n                \"x\": 0.20,\n                \"y\": 0.5\n            },\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Own Realty\",\n                \"x\": 0.8,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\niplot(fig, filename='donut')\n\n","0ceb7836":"temp = application_train[\"NAME_INCOME_TYPE\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Income sources of Applicant\\'s', hole = 0.5)","f961cda6":"temp = application_train[\"NAME_FAMILY_STATUS\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Family Status of Applicant\\'s', hole = 0.5)","aeee8a2b":"temp = application_train[\"OCCUPATION_TYPE\"].value_counts()\ntemp.iplot(kind='bar', xTitle = 'Occupation', yTitle = \"Count\", title = 'Occupation of Applicant\\'s who applied for loan', color = 'green')","d2331777":"temp = application_train[\"NAME_EDUCATION_TYPE\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Education of Applicant\\'s', hole = 0.5)","93b2c5d4":"temp = application_train[\"NAME_HOUSING_TYPE\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Type of House', hole = 0.5)","1afbdf8a":"temp = application_train[\"ORGANIZATION_TYPE\"].value_counts()\ntemp.iplot(kind='bar', xTitle = 'Organization Name', yTitle = \"Count\", title = 'Types of Organizations who applied for loan ', color = 'red')","9818672f":"temp = application_train[\"NAME_INCOME_TYPE\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(application_train[\"TARGET\"][application_train[\"NAME_INCOME_TYPE\"]==val] == 1))\n    temp_y0.append(np.sum(application_train[\"TARGET\"][application_train[\"NAME_INCOME_TYPE\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='YES'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='NO'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Income sources of Applicant's in terms of loan is repayed or not  in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='Income source',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","b5cd5974":"temp = application_train[\"NAME_HOUSING_TYPE\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(application_train[\"TARGET\"][application_train[\"NAME_HOUSING_TYPE\"]==val] == 1))\n    temp_y0.append(np.sum(application_train[\"TARGET\"][application_train[\"NAME_HOUSING_TYPE\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='YES'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='NO'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"For which types of house higher applicant's applied for loan in terms of loan is repayed or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='types of house',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","b25d40eb":"temp = application_train[\"ORGANIZATION_TYPE\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(application_train[\"TARGET\"][application_train[\"ORGANIZATION_TYPE\"]==val] == 1))\n    temp_y0.append(np.sum(application_train[\"TARGET\"][application_train[\"ORGANIZATION_TYPE\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='YES'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='NO'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of Organizations in terms of loan is repayed or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='Types of Organizations',\n        tickfont=dict(\n            size=10,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","b2f92bcd":"temp = previous_application[\"NAME_CONTRACT_TYPE\"].value_counts()\nfig = {\n  \"data\": [\n    {\n      \"values\": temp.values,\n      \"labels\": temp.index,\n      \"domain\": {\"x\": [0, .48]},\n      #\"name\": \"Types of Loans\",\n      #\"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\"\n    },\n    \n    ],\n  \"layout\": {\n        \"title\":\"Contract product type of previous application\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Contract product type\",\n                \"x\": 0.12,\n                \"y\": 0.5\n            }\n            \n        ]\n    }\n}\niplot(fig, filename='donut')","c6e69bf3":"temp = previous_application[\"NAME_CASH_LOAN_PURPOSE\"].value_counts()\n#print(\"Total number of states : \",len(temp))\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp \/ temp.sum())*100,\n    marker=dict(\n        color=(temp \/ temp.sum())*100,\n        colorscale = 'Blues',\n        reversescale = True\n    ),\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"Purpose of cash loan in previous application in % \",\n    xaxis=dict(\n        title='Purpose of cash loan',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","35de6098":"temp = previous_application[\"NAME_TYPE_SUITE\"].value_counts()\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp \/ temp.sum())*100,\n    marker=dict(\n        color=(temp \/ temp.sum())*100,\n        colorscale = '#ea7c96',\n        #reversescale = True\n    ),\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"Who accompanied client when applying for the previous application in % \",\n    xaxis=dict(\n        title='Name of type of the Suite',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count of Name of type of the Suite in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","edc5dcbc":"temp = previous_application[\"NAME_CLIENT_TYPE\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Was the client old or new client when applying for the previous application', hole = 0.7,colors=['#ea7c96','#75e575',])","bbe97ff6":"temp = previous_application[\"NAME_GOODS_CATEGORY\"].value_counts()\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp \/ temp.sum())*100,\n    marker=dict(\n        color=(temp \/ temp.sum())*100,\n        colorscale = 'Greens',\n        reversescale = True\n    ),\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"What kind of goods did the client apply for in the previous application in % \",\n    xaxis=dict(\n        title='Name of the goods',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","899e7b54":"data = [\n    go.Heatmap(\n        z= application_train.corr().values,\n        x=application_train.columns.values,\n        y=application_train.columns.values,\n        colorscale='Viridis',\n        reversescale = False,\n        text = True ,\n        opacity = 1.0 )\n]\n\nlayout = go.Layout(\n    title='Pearson Correlation of features',\n    xaxis = dict(ticks='', nticks=36),\n    yaxis = dict(ticks='' ),\n    width = 900, height = 700,\nmargin=dict(\n    l=240,\n),)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='labelled-heatmap')","53128529":"**checking missing data in bureau **","27f74178":"* Approximately 74 % was repeater clients who applied for previous application.","c0fe9ed8":"**installments_payments data**","ed187d97":"* As we can see data is highly imbalanced.","e882c081":"## <a id='5-8'>5.8 Income sources of Applicant's who applied for loan<\/a>","d8ca65da":"## <a id='5-7'>5.7 Purpose of loan<\/a>","cffabd6e":"## <a id='6'>6 Pearson Correlation of features<\/a>","9729743d":"## <a id='5-14-1'>5.14.1 Income sources of Applicant's in terms of loan is repayed or not in %<\/a>","91cb56b0":"* **Types of Organizations who applied for loan :**\n  * Business Entity Type 3 - Approx. 68 K\n  * XNA - Approx. 55 K\n  * Self employed - Approx. 38 K\n  * Others - Approx. 17 K\n  * Medicine - Approx. 11 K\n ","b3d14eef":"**checking missing data in application_train **","72a109a2":"# <a id='3'>3. Glimpse of Data<\/a>","5f010367":"## <a id='5-15-1'>5.15.1 Contract product type of previous application<\/a>","41a1b0bd":"- <a href='#1'>1. Introduction<\/a>  \n- <a href='#2'>2. Retrieving the Data<\/a>\n- <a href='#3'>3. Glimpse of Data<\/a>\n- <a href='#4'> 4. Check for missing data<\/a>\n- <a href='#5'>5. Data Exploration<\/a>\n    - <a href='#5-1'>5.1 Distribution of AMT_CREDIT<\/a>\n    - <a href='#5-2'>5.2 Distribution of AMT_INCOME_TOTAL<\/a>\n    - <a href='#5-3'>5.3 Distribution of AMT_GOODS_PRICE<\/a>\n    <a href='#6'>6. Pearson Correlation of features<\/a>\n- <a href='#7'>7. Feature Importance using Random forest<\/a>","122892b0":" # <a id='2'>2. Retrieving the Data<\/a>","24e599a7":"* **Rovolving loans :**  Arrangement which allows for the loan amount to be withdrawn, repaid, and redrawn again in any manner and any number of times, until the arrangement expires. Credit card loans and overdrafts are revolving loans. Also called evergreen loan","8bf41931":"## <a id='5-15-7'>5.15.7 Who accompanied client when applying for the previous application<\/a>","1532c679":"## <a id='5-13'>5.13 Types of Organizations who applied for loan <\/a>","ae16cd69":"## <a id='5-1'>5.1 Distribution of AMT_CREDIT<\/a>","f1879475":"# <a id='5'>5. Data Exploration<\/a>","3c0650fb":"**credit_card_balance data**","68962b52":"## <a id='5-6'>5.6 Types of loan<\/a>","4ac08d7a":"## <a id='5-15-9'>5.15.9 What kind of goods did the client apply for in the previous application<\/a>","6cac40a9":"* 63.9 % applicants are married. 14.8 % are single etc.","0f0f55de":"## <a id='5-10'>5.10 Occupation of Applicant's who applied for loan<\/a>","7e780566":"* **Who accompanied client when applying for the previous application :**\n  * Unaccompanied : Approx. 60 % times\n  * Family : Approx. 25 % times\n  * Spouse, Partner : Approx. 8 %\n  * Childrens : Approx. 4 %","d5c86643":"* Approx. 89 % peoples applied for loan, they mentioned type of house is **House \/ Appartment**.","8537395f":"* 51.6 % Applicants mentioned that they are working.  23.3 % are Commercial Associate and 18 % are Pensioner etc. ","05c2355b":"## <a id='5-2'>5.2 Distribution of AMT_INCOME_TOTAL<\/a>","eb7fc928":"# <a id='1'>1. Introduction<\/a>","a74ba75b":"**checking missing data in bureau_balance **","c2c88c25":"**checking missing data in installments_payments **","30629559":"* **Contract product type of previous application :**\n  * Cash loans - 44.8 %\n  * Consumer loans - 43.7 %\n  * Rovolving loan - 11.6 %\n  * XNA - 0.0207 %","f48c9072":"**bureau_balance data**","836a36a8":"* 71 % applicants have secondary and 24.3 % having higher education.","df21ac0c":"## <a id='5-12'>5.12 For which types of house higher applicant's applied for loan ?<\/a>","9105b28c":"**checking missing data in credit_card_balance **","54c32eef":"## <a id='5-11'>5.11 Education of Applicant's who applied for loan<\/a>","7dc55eb9":"* Most of the loans are Cash loans which were taken by applicants. **90.5 %** loans are Cash loans.","e4708032":"# <a id='5-15'>5.15 Exploartion of previous application data<\/a>","ab24be7b":"**application_train data**","8d6d7169":"* **Main purpose of the cash loan was  :**\n  * XAP - 55 %\n  * XNA - 41 %","c5238512":"**previous_application data**","03a529c6":"# <a id='4'> 4 Check for missing data<\/a>","dedc18df":"## <a id='5-14'>5.14 Exploration in terms of loan is repayed or not<\/a>","d96cbdfb":"## <a id='5-3'>5.3 Distribution of AMT_GOODS_PRICE<\/a>","08ee25e9":"## <a id='5-14-6'>5.14.6 Types of Organizations in terms of loan is repayed or not in %<\/a>","f2ce6ff2":"**checking missing data in previous_application **","4fc930f7":"Home Credit strives to broaden financial inclusion for the unbanked population by providing a positive and safe borrowing experience. In order to make sure this underserved population has a positive loan experience, Home Credit makes use of a variety of alternative data--including telco and transactional information--to predict their clients' repayment abilities.\n\nWhile Home Credit is currently using various statistical and machine learning methods to make these predictions, they're challenging Kagglers to help them unlock the full potential of their data. Doing so will ensure that clients capable of repayment are not rejected and that loans are given with a principal, maturity, and repayment calendar that will empower their clients to be successful.","2fa97b04":"## <a id='5-5'>5.5 Data is balanced or imbalanced<\/a>","11206120":"**bureau data**","23dda322":"## <a id='5-14-5'>5.14.5 For which types of house higher applicant's applied for loan in terms of loan is repayed or not in %<\/a>","3d28b591":"* **Top Applicant's who applied for loan :**\n  * Laborers - Apprx. 55 K\n  * Sales Staff - Approx. 32 K\n  * Core staff - Approx. 28 K\n  * Managers - Approx. 21 K\n  * Drivers - Approx. 19 K","07255f69":"## <a id='5-9'>5.9 Family Status of Applicant's who applied for loan<\/a>","e89467cd":"## <a id='5-4'>5.4 Who accompanied client when applying for the  application<\/a>","ce55e635":"## <a id='5-15-8'>5.15.8 Was the client old or new client when applying for the previous application<\/a>","2be521d7":"## <a id='5-15-3'>5.15.3 Purpose of cash loan in previous application<\/a>","1f20d8f0":"**checking missing data in POS_CASH_balance **"}}