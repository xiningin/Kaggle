{"cell_type":{"34d8c439":"code","279c6197":"code","9d8d6b8d":"code","7cfd0b50":"code","9549a2ca":"code","fc504231":"code","819773a8":"code","c1665eb4":"code","4d9d0051":"code","7c0e9d37":"code","a78ddaed":"code","1bd4dc21":"code","b42abd50":"code","708aa263":"code","461755e4":"code","1d0070fa":"code","20fdb003":"code","afa4c5b5":"code","41c4e136":"code","64e3112d":"code","a836ccea":"markdown","0577d3cb":"markdown","727ce8e2":"markdown","8863c458":"markdown"},"source":{"34d8c439":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport random\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import DataLoader, Dataset\nfrom torchvision import transforms, models\nimport os","279c6197":"SEED = 42","9d8d6b8d":"def set_seed(seed=SEED):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True","7cfd0b50":"set_seed()","9549a2ca":"train_df = pd.read_csv('..\/input\/digit-recognizer\/train.csv', dtype = np.float32)\nlabels = train_df.pop('label').astype('int64')","fc504231":"train_df = train_df.to_numpy() \/ 255.0\nlabels = labels.to_numpy()\n\ntrain_df = train_df.reshape(-1, 28, 28, 1)\nlabels = labels.reshape(-1,1)","819773a8":"x_train, x_val, y_train, y_val = train_test_split(train_df, labels, test_size=0.2, random_state=SEED)","c1665eb4":"class MNISTDataset(Dataset):\n        \n    def __init__(self, images, labels): \n        self.images = images\n        self.labels = labels\n        self.transform = transforms.Compose([transforms.ToTensor()])\n\n    def __getitem__(self, index):\n        label = self.labels[index]\n        image = self.images[index]\n        image = self.transform(image)\n        image = image.repeat(3, 1, 1)\n        return image, label\n\n    def __len__(self):\n        return len(self.images)","4d9d0051":"train_data = MNISTDataset(x_train, y_train)\nval_data = MNISTDataset(x_val, y_val)","7c0e9d37":"# dataloader batch\nBATCH_SIZE = 64","a78ddaed":"train_loader = DataLoader(train_data, batch_size=BATCH_SIZE, shuffle=True)\nval_loader = DataLoader(val_data, batch_size=BATCH_SIZE)","1bd4dc21":"# set gpu to train model faster\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\nprint(device)","b42abd50":"NUM_CLASSES = 10\nEPOCHS = 30","708aa263":"model = models.resnet18(pretrained=True)\nnum_ftrs = model.fc.in_features\nmodel.fc = nn.Linear(num_ftrs, NUM_CLASSES)\nmodel.to(device)","461755e4":"criterion = nn.CrossEntropyLoss()\n# NOTE: amsgrad = True to improve total accuracy\noptimizer = torch.optim.Adam(model.parameters(), amsgrad=True)\n# decay learning rate each 3 epochs\nxp_lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=3, gamma=0.1, verbose=True)","1d0070fa":"for epoch in range(EPOCHS):\n    for i, (images, labels) in enumerate(train_loader):\n        images = images.to(device)\n        labels = labels.to(device)\n        \n        # Forward pass\n        optimizer.zero_grad()\n        pred = model(images)\n        loss = criterion(pred, labels.flatten())\n        \n        # Backward and optimize\n        loss.backward()\n        optimizer.step()\n        \n        if (i + 1) % 300 == 0:\n            print(f'Epoch: {epoch + 1}\/{EPOCHS}, Loss: {loss.item()}')\n       \n    xp_lr_scheduler.step()\n\nmodel.eval()\nwith torch.no_grad():\n    correct = 0\n    total = 0\n    for images, labels in val_loader:\n        images = images.to(device)\n        labels = labels.to(device)\n\n        outputs = model(images)\n        _, predicted = torch.max(outputs, 1)\n        total += labels.size(0)\n        correct += (predicted == labels.flatten()).sum()\n\n    print(f'Validation acc: {100 * correct \/ total}')","20fdb003":"test_df = pd.read_csv('..\/input\/digit-recognizer\/test.csv', dtype=np.float32)\ntest_df = test_df.to_numpy() \/ 255.0\ntest_df = test_df.reshape(-1, 28, 28, 1)","afa4c5b5":"test_tensor = torch.from_numpy(test_df).permute(0, 3, 1, 2)\ntest_tensor = test_tensor.repeat(1, 3, 1, 1)","41c4e136":"images= test_tensor.to(device)\noutputs = model(images)\n_, predictions = torch.max(outputs, 1)","64e3112d":"predictions = predictions.cpu()\nsubmission = pd.DataFrame({'ImageId': np.arange(1, (predictions.size(0) + 1)), 'Label': predictions})\nsubmission.to_csv(\"submission.csv\", index = False)","a836ccea":"**Create custom dataset**","0577d3cb":"**Training**","727ce8e2":"**Fine tune Resnet18 with loaded weights**","8863c458":"**Submit result**"}}