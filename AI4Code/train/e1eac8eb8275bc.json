{"cell_type":{"c7c9a0c0":"code","a8ed98a4":"code","8ec4b388":"code","68e5f1c3":"code","122fb5de":"code","994e39a1":"code","7da32d22":"code","858c725c":"code","138cfda5":"code","23485d19":"code","f75b7f00":"code","d1f60602":"code","f76a0f2c":"code","9188fb3e":"code","3a48fc9a":"code","bb2f9787":"code","7ad593a5":"code","69148f09":"code","6ab4bb46":"code","155786b3":"code","c0a499b1":"code","87c29e08":"code","35ae1a83":"code","149edf65":"code","be7a6dde":"code","6afe2124":"code","7e85383a":"code","3ed43dd4":"code","16d2cca3":"code","014df54e":"code","e2280ea7":"code","8f8cd1f9":"code","b38846ee":"code","fa728f3a":"code","ebcfabf6":"code","bd2258ed":"code","349bc634":"code","800808a5":"code","3efa38eb":"code","4da3c163":"code","54d66c50":"code","2c909be4":"code","2e0089fc":"code","f01b8ca6":"code","1be72977":"markdown","23ee1774":"markdown","1c163bda":"markdown","045328e7":"markdown","7e65057b":"markdown","a138dec2":"markdown","f943e3b5":"markdown","f805e32e":"markdown","5a2b71df":"markdown"},"source":{"c7c9a0c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a8ed98a4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nimport xgboost as xgb\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import scale\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.decomposition import PCA","8ec4b388":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","68e5f1c3":"print (\"Train data shape:\", train.shape)\nprint (\"Test data shape:\", test.shape)","122fb5de":"train.head()","994e39a1":"plt.style.use(style='ggplot')\nplt.rcParams['figure.figsize'] = (10, 6)","7da32d22":"train.SalePrice.describe()","858c725c":"print (\"Skew is:\", train.SalePrice.skew())\nplt.hist(train.SalePrice, color='blue')\nplt.show()","138cfda5":"target = np.log(train.SalePrice)\nprint (\"Skew is:\", target.skew())\nplt.hist(target, color='blue')\nplt.show()","23485d19":"numeric_features = train.select_dtypes(include=[np.number])\nnumeric_features.dtypes","f75b7f00":"corr = numeric_features.corr()\nprint (corr['SalePrice'].sort_values(ascending=False)[:5], '\\n')\nprint (corr['SalePrice'].sort_values(ascending=False)[-5:])","d1f60602":"train.OverallQual.unique()","f76a0f2c":"quality_pivot = train.pivot_table(index='OverallQual',\n                  values='SalePrice', aggfunc=np.median)","9188fb3e":"quality_pivot","3a48fc9a":"quality_pivot.plot(kind='bar', color='blue')\nplt.xlabel('Overall Quality')\nplt.ylabel('Median Sale Price')\nplt.xticks(rotation=0)\nplt.show()","bb2f9787":"plt.scatter(x=train['GrLivArea'], y=target)\nplt.ylabel('Sale Price')\nplt.xlabel('Above grade (ground) living area square feet')\nplt.show()","7ad593a5":"train = train[train['GarageArea'] < 1200]","69148f09":"plt.scatter(x=train['GarageArea'], y=np.log(train.SalePrice))\nplt.xlim(-200,1600) # This forces the same scale as before\nplt.ylabel('Sale Price')\nplt.xlabel('Garage Area')\nplt.show()","6ab4bb46":"nulls = pd.DataFrame(train.isnull().sum().sort_values(ascending=False)[:25])\nnulls.columns = ['Null Count']\nnulls.index.name = 'Feature'\nnulls","155786b3":"print (\"Unique values are:\", train.MiscFeature.unique())\n","c0a499b1":"categoricals = train.select_dtypes(exclude=[np.number])\ncategoricals.describe()","87c29e08":"print (\"Original: \\n\")\nprint (train.Street.value_counts(), \"\\n\")","35ae1a83":"train['enc_street'] = pd.get_dummies(train.Street, drop_first=True)\ntest['enc_street'] = pd.get_dummies(train.Street, drop_first=True)","149edf65":"print ('Encoded: \\n')\nprint (train.enc_street.value_counts())","be7a6dde":"condition_pivot = train.pivot_table(index='SaleCondition', values='SalePrice', aggfunc=np.median)\ncondition_pivot.plot(kind='bar', color='blue')\nplt.xlabel('Sale Condition')\nplt.ylabel('Median Sale Price')\nplt.xticks(rotation=0)\nplt.show()","6afe2124":"def encode(x):\n return 1 if x == 'Partial' else 0\ntrain['enc_condition'] = train.SaleCondition.apply(encode)\ntest['enc_condition'] = test.SaleCondition.apply(encode)","7e85383a":"condition_pivot = train.pivot_table(index='enc_condition', values='SalePrice', aggfunc=np.median)\ncondition_pivot.plot(kind='bar', color='blue')\nplt.xlabel('Encoded Sale Condition')\nplt.ylabel('Median Sale Price')\nplt.xticks(rotation=0)\nplt.show()","3ed43dd4":"data = train.select_dtypes(include=[np.number]).interpolate().dropna()","16d2cca3":"sum(data.isnull().sum() != 0)","014df54e":"y = np.log(train.SalePrice)\nX = data.drop(['SalePrice', 'Id'], axis=1)","e2280ea7":"X_train, X_test, y_train, y_test = train_test_split(\n                          X, y, random_state=42, test_size=.33)","8f8cd1f9":"kf = KFold(n_splits=12, random_state=42, shuffle=True)\n# Define error metrics\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\ndef cv_rmse(model, X=X):\n    rmse = np.sqrt(-cross_val_score(model, X, train_labels, scoring=\"neg_mean_squared_error\", cv=kf))\n    return (rmse)","b38846ee":"XGB = XGBRegressor(max_depth=3,learning_rate=0.1,n_estimators=1000,reg_alpha=0.001,reg_lambda=0.000001,n_jobs=-1,min_child_weight=3)\nXGB.fit(X_train,y_train)","fa728f3a":"print (\"R^2 is: \\n\", XGB.score(X_test,y_test))","ebcfabf6":"predictions = XGB.predict(X_test)","bd2258ed":"print ('RMSE is: \\n', mean_squared_error(y_test, predictions))","349bc634":"actual_values = y_test\nplt.scatter(predictions, actual_values, alpha=.7,\n            color='b')\nplt.xlabel('Predicted Price')\nplt.ylabel('Actual Price')\nplt.title('XGBoost')\nplt.show()","800808a5":"result = pd.DataFrame()\nresult['Id'] = test.Id","3efa38eb":"feats = test.select_dtypes(\n        include=[np.number]).drop(['Id'], axis=1).interpolate()","4da3c163":"predictions = XGB.predict(feats)","54d66c50":"final_predictions = np.exp(predictions)","2c909be4":"print (\"Original predictions are: \\n\", predictions[:5], \"\\n\")\nprint (\"Final predictions are: \\n\", final_predictions[:5])","2e0089fc":"result['SalePrice'] = final_predictions\nresult.head()","f01b8ca6":"result.to_csv('submission.csv', index=False)","1be72977":"### Feature Engineering","23ee1774":"## Cross-Validation","1c163bda":"### Modelling","045328e7":"### Making the Submission","7e65057b":"### Non-Numeric Values","a138dec2":"### Data Exploration","f943e3b5":"### Handling Null Values","f805e32e":"### Correlation","5a2b71df":"### Numeric Features"}}