{"cell_type":{"d474d56d":"code","76051eb7":"code","a8193fa4":"code","e75ae40a":"code","f39c2db4":"code","30a720be":"code","7882278f":"code","6659dfa4":"code","6a107671":"code","3e28112c":"code","db536239":"code","72966e69":"code","c6195fe4":"code","734cc03c":"code","0adcf334":"code","bb99d6b5":"code","30c8b5df":"code","5ec748a0":"code","92935862":"code","1e0295c1":"code","abc1d3be":"code","e13e61a5":"markdown","50d21137":"markdown","6817a9db":"markdown","f77c8d4e":"markdown","7701accc":"markdown","e158b534":"markdown","b0e8e88a":"markdown"},"source":{"d474d56d":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, random_state=2021)\n    \n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[target])\n\n    \n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","76051eb7":"import pandas as pd","a8193fa4":"X_train.shape, X_test.shape","e75ae40a":"pd.set_option(\"display.max_columns\", 100)\ndisplay(X_train.head(3))\ndisplay(X_test.head(3))","f39c2db4":"y_train['SalePrice'].hist()","30a720be":"y_test['SalePrice'].hist()","7882278f":"X_train.isnull().sum().sort_values(ascending=False)[:20]","6659dfa4":"X_test.isnull().sum().sort_values(ascending=False)[:20]","6a107671":"X_train.info()","3e28112c":"X_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']","db536239":"# id\uac12 \uc62e\uaca8\ub193\uae30\nX_train_id = X_train.pop('Id')\nX_test_id = X_test.pop('Id')","72966e69":"X_train.head(1)","c6195fe4":"from sklearn.impute import SimpleImputer\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)","734cc03c":"from sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=2022)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","0adcf334":"from xgboost import XGBRegressor\n\nmodel = XGBRegressor()\nmodel.fit(X_tr, y_tr, verbose=False)\npred = model.predict(X_val)","bb99d6b5":"from sklearn.metrics import mean_squared_error\n\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\nprint(\"RMSLE : \" + str(rmsle(y_val, pred)))","30c8b5df":"X_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nidx1 = y_train['SalePrice'].quantile(0.005)>y_train['SalePrice']\nidx2 = y_train['SalePrice'].quantile(0.995)<y_train['SalePrice']\n\ny_train = y_train[~(idx1 + idx2)]\nX_train = X_train[~(idx1 + idx2)]\n\nX_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']\nX_train_id = X_train.pop('Id')\nX_test_id = X_test.pop('Id')\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=20222)\n\nmodel = XGBRegressor()\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\n\nprint(\"RMSLE : \" + str(rmsle(y_val, pred)))","5ec748a0":"X_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nidx1 = y_train['SalePrice'].quantile(0.005)>y_train['SalePrice']\nidx2 = y_train['SalePrice'].quantile(0.995)<y_train['SalePrice']\n\ny_train = y_train[~(idx1 + idx2)]\nX_train = X_train[~(idx1 + idx2)]\n\nX_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']\nX_train_id = X_train.pop('Id')\nX_test_id = X_test.pop('Id')\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=20222)\n\nmodel = XGBRegressor(n_estimators=100, max_depth=4, colsample_bytree=0.9)\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\n\nprint(\"RMSLE : \" + str(rmsle(y_val, pred)))","92935862":"pred = model.predict(X_test)\noutput = pd.DataFrame({'Id': X_test_id, 'SalePrice': pred})\noutput.head()","1e0295c1":"# csv\uc0dd\uc131\noutput.to_csv(\"000000.csv\", index=False)\noutput.head(3)","abc1d3be":"pred = model.predict(X_test)\nprint(\"RMSLE : \" + str(rmsle(y_test['SalePrice'], pred)))","e13e61a5":"# Model","50d21137":"## Simple Tuning","6817a9db":"# \uacb0\uacfc \uccb4\uc810","f77c8d4e":"# Predict & to CSV","7701accc":"# Data Load & Simple EDA","e158b534":"# Simple Preprocessing","b0e8e88a":"# Preprocessing"}}