{"cell_type":{"1612da03":"code","69d21bef":"code","09093d2f":"code","45e01ef2":"code","491c86fc":"code","eb3570b4":"code","4cc146b3":"code","9c32d63e":"code","2dab4e15":"code","82478763":"code","0350905e":"code","575ab6c0":"code","c939d574":"code","796ec781":"code","77e64619":"markdown","2b82aaea":"markdown","b3828c08":"markdown","37ad6619":"markdown","3d08cec0":"markdown","83783ee8":"markdown","6923055c":"markdown"},"source":{"1612da03":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","69d21bef":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping, LambdaCallback\n\n\n\nprint('Libraries imported.')","09093d2f":"column_names =[\"serial\",\"date\",\"age\",\"distance\",\"stores\",\"latitude\",\"longitude\",\"price\"]\ndf = pd.read_csv('\/kaggle\/input\/housedataset\/data.csv', names = column_names) \ndf.head()\n","45e01ef2":"df.isna().sum()","491c86fc":"df = df.iloc[:,1:]\ndf_norm = (df - df.mean()) \/ df.std()\ndf_norm.head()\n","eb3570b4":"y_mean = df['price'].mean()\n\ny_std = df['price'].std()\n\ndef convert_label_value(pred):\n    return int(pred * y_std + y_mean)\n\nprint(convert_label_value(0.350088))","4cc146b3":"X = df_norm.iloc[:, :6]\nX.head()","9c32d63e":"Y = df_norm.iloc[:, -1]\nY.head()","2dab4e15":"X_arr = X.values\nY_arr = Y.values\n\nprint('X_arr shape: ', X_arr.shape)\nprint('Y_arr shape: ', Y_arr.shape)","82478763":"X_train, X_test, y_train, y_test = train_test_split(X_arr, Y_arr, test_size = 0.05, shuffle = True, random_state=0)\n\nprint('X_train shape: ', X_train.shape)\nprint('y_train shape: ', y_train.shape)\nprint('X_test shape: ', X_test.shape)\nprint('y_test shape: ', y_test.shape)","0350905e":"def get_model():\n    \n    model = Sequential([\n        Dense(10, input_shape = (6,), activation = 'relu'),\n        Dense(20, activation = 'relu'),\n        Dense(5, activation = 'relu'),\n        Dense(1)\n    ])\n\n    model.compile(\n        loss='mse',\n        optimizer='adadelta'\n    )\n    \n    return model\n\nmodel = get_model()\nmodel.summary()","575ab6c0":"early_stopping = EarlyStopping(monitor='val_loss', patience = 5)\n\nmodel = get_model()\n\npreds_on_untrained = model.predict(X_test)\n\nhistory = model.fit(\n    X_train, y_train,\n    validation_data = (X_test, y_test),\n    epochs = 1000,\n    callbacks = [early_stopping]\n)","c939d574":"print(history.history.keys())","796ec781":"import matplotlib.pyplot as plt\n\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')","77e64619":"Therefore there are no missing data.","2b82aaea":"Feature Selection","b3828c08":"**Fit the model**","37ad6619":"**Normalizing the data**","3d08cec0":"Function to convert the normalized output value to the original value","83783ee8":"Selecting the labels","6923055c":"Extracting the numeric values"}}