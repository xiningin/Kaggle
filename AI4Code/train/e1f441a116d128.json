{"cell_type":{"1c4b61ea":"code","f7d01878":"code","44bbd429":"code","8362ff14":"code","1d127ea4":"code","0254e3a7":"code","d8a0d077":"code","497a7feb":"code","771f20ac":"code","393d523a":"code","f31d6987":"code","e177c241":"code","ad04f8c9":"code","0a3240bd":"code","d41cb5ce":"code","dc1360ca":"code","24719cae":"code","d83a2b96":"code","beef1aad":"code","657bfcac":"code","55f03131":"code","8b75adc8":"code","f8ba088a":"code","99c11c65":"code","cd0c9dfd":"code","6abb38c3":"code","840c785a":"code","83c60af0":"code","15cab07d":"code","0a4b8b01":"code","c179a41d":"code","f52c0d28":"code","18b67a44":"code","c0e4c516":"markdown","86efe5ff":"markdown","1b4c37d7":"markdown","f39445fa":"markdown","168d1b44":"markdown","dad1bb43":"markdown","c6b475f4":"markdown","b168fcb6":"markdown","82bf7935":"markdown","f634440f":"markdown","19367058":"markdown","7e697fc7":"markdown","c070799b":"markdown","9ccbbd16":"markdown","1d5bc510":"markdown","cef4ddbc":"markdown"},"source":{"1c4b61ea":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nfrom tensorflow.keras.optimizers import Adam, RMSprop\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.layers import Conv2D, Dense, Dropout, Flatten, MaxPool2D,BatchNormalization","f7d01878":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","44bbd429":"train.shape, test.shape","8362ff14":"train.head()","1d127ea4":"test.head()","0254e3a7":"Y_train=train['label']\n\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1)\n\nY_train.value_counts()","d8a0d077":"g = sns.countplot(Y_train)\nplt.title('The distribution of the digits in the dataset', weight='bold', fontsize='18')","497a7feb":"# Check the data\nX_train.isnull().any().describe()","771f20ac":"# Check the data\ntest.isnull().any().describe()","393d523a":"# Normalize the data\nX_train = X_train \/ 255\ntest = test \/ 255","f31d6987":"# Reshape image in 3 dimensions (height = 28px, width = 28px , channel = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","e177c241":"X_train[0].shape","ad04f8c9":"plt.figure(figsize=(15,8))\nfor i in range(50):\n    plt.subplot(5,10,i+1)\n    plt.imshow(X_train[i].reshape((28,28)),cmap='binary')\n    plt.axis(\"off\")\nplt.show()","0a3240bd":"print(\"The shape of the labels before One Hot Encoding\",Y_train.shape)\nY_train = to_categorical(Y_train, num_classes = 10)\nprint(\"The shape of the labels after One Hot Encoding\",Y_train.shape)","d41cb5ce":"Y_train[0]","dc1360ca":"# Split the train and the validation set for the fitting\nrandom_seed = 2\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.3, random_state=random_seed)","24719cae":"import matplotlib.pyplot as plt\n# Some examples\ng = plt.imshow(X_train[0][:,:,0])","d83a2b96":"datagen = ImageDataGenerator(zoom_range = 0.1, width_shift_range = 0.1, height_shift_range = 0.1, rotation_range = 10) ","beef1aad":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (3, 3), activation = 'relu', input_shape = (28, 28, 1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 32, kernel_size = (3, 3), activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 32, kernel_size = (5, 5), activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(strides = (2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3, 3), activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 64, kernel_size = (3, 3), activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 64, kernel_size = (5, 5), activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(strides = (2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1024, activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = 'softmax'))","657bfcac":"model.compile(optimizer='adam',metrics=['accuracy'],loss='categorical_crossentropy')","55f03131":"reduction_lr = ReduceLROnPlateau(monitor='val_accuracy',patience=2, verbose=1, factor=0.2, min_lr=0.00001)","8b75adc8":"hist = model.fit_generator(datagen.flow(X_train,Y_train,batch_size=32),epochs=20,validation_data = (X_val,Y_val),callbacks=[reduction_lr])","f8ba088a":"loss = pd.DataFrame(model.history.history)\nloss[['loss', 'val_loss']].plot()\nloss[['accuracy', 'val_accuracy']].plot()","99c11c65":"final_loss, final_acc = model.evaluate(X_val, Y_val, verbose=0)\nprint(\"Final loss: {0:.4f}, final accuracy: {1:.4f}\".format(final_loss, final_acc))","cd0c9dfd":"y_pred = model.predict(X_val, batch_size = 64)\n\ny_pred = np.argmax(y_pred,axis = 1)\ny_pred = pd.Series(y_pred,name=\"Label\")\ny_pred","6abb38c3":"plt.style.use('seaborn')\nsns.set_style('whitegrid')\nfig = plt.figure(figsize=(10,10))\nax1 = plt.subplot2grid((1,2),(0,0))\ntrain_loss = hist.history['loss']\ntest_loss = hist.history['val_loss']\nx = list(range(1, len(test_loss) + 1))\nplt.plot(x, test_loss, color = 'cyan', label = 'Test loss')\nplt.plot(x, train_loss, label = 'Training losss')\nplt.legend()\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.title(' Loss vs. Epoch',weight='bold', fontsize=18)\n\nax1 = plt.subplot2grid((1,2),(0,1))\ntrain_loss = hist.history['loss']\ntest_loss = hist.history['val_loss']\nx = list(range(1, len(test_loss) + 1))\nplt.plot(x, test_loss, color = 'cyan', label = 'Test loss')\nplt.plot(x, train_loss, label = 'Training losss')\nplt.legend()\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.title(' Accuracy vs. Epoch',weight='bold', fontsize=18)","840c785a":"Y_val.shape, y_pred.shape","83c60af0":"Y_val = np.argmax(Y_val,axis = 1)\nY_val = pd.Series(Y_val,name=\"Label\")","15cab07d":"from sklearn.metrics import confusion_matrix\ncmatrix = confusion_matrix(Y_val, y_pred)\n\nplt.figure(figsize=(15,8))\nplt.title('Confusion matrix of the test\/predicted digits ', weight='bold', fontsize=18)\nsns.heatmap(cmatrix,annot=True,cmap=\"Reds\",fmt=\"d\",cbar=False)","0a4b8b01":"# #We use np.argmax with y_test and predicted values: transform them from 10D vector to 1D\n# # class_y = np.argmax(Y_val,axis = 1) \n# # class_num=np.argmax(y_pred, axis=1)\n# #Detect the errors\n# errors = (y_pred - Y_val != 0)\n# #Localize the error images\n# predicted_er = y_pred[errors]\n# y_test_er = Y_val[errors]\n# x_test_er = X_val[errors]\n#Plot the misclassified numbers\n# plt.figure(figsize=(15,9))\n\n# for i in range(30):\n#     plt.subplot(5,6,i+1)\n#     plt.imshow(x_test_er[i].reshape((-1,28,28,1)),cmap='binary')\n#     plt.title( np.argmax(predicted_er[i]), size=13, weight='bold', color='red')\n#     plt.axis(\"off\")\n\n\n# plt.show()\n\n","c179a41d":"# test = test.values.reshape(-1, 28, 28, 1) \/ 255\ny_pred1 = model.predict(test, batch_size = 64)\n\ny_pred1 = np.argmax(y_pred1,axis = 1)\ny_pred1 = pd.Series(y_pred1,name=\"Label\")\ny_pred1","f52c0d28":"y_pred1","18b67a44":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),y_pred1],axis = 1)\nsubmission.to_csv(\"submission.csv\",index=False)","c0e4c516":"# Data Loading\n\nIt is a dataset of 60,000 small square 28\u00d728 pixel grayscale images of handwritten single digits between 0 and 9.\n\nThe task is to classify a given image of a handwritten digit into one of 10 classes representing integer values from 0 to 9, inclusively.\n\nWe will load the data and visualize the data. ","86efe5ff":"Reduce learning rate when a metric has stopped improving.","1b4c37d7":"## Constructing a sequential CNN model\n\n* The model type that we will be using is Sequential. Sequential is the easiest way to build a model in Keras. It allows you to build a model layer by layer.\n\n![Convolution neural network](https:\/\/miro.medium.com\/max\/1000\/1*vkQ0hXDaQv57sALXAJquxA.jpeg)\n\n* We use the \u2018add()\u2019 function to add layers to our model.\n* Our first 3 layers are Conv2D layers. These are convolution layers that will deal with our input images, which are seen as 2-dimensional matrices.\n\n![kernel](https:\/\/i.imgur.com\/NcyYyaJ.gif)\n\n* Activation is the activation function for the layer. The activation function we will be using for our first 2 layers is the ReLU, or Rectified Linear Activation. This activation function has been proven to work well in neural networks.\n\n![Activation Function](https:\/\/miro.medium.com\/max\/1000\/1*4ZEDRpFuCIpUjNgjDdT2Lg.png)\n\n* Batchnormalization layer - Batch normalization is a technique for training very deep neural networks that standardizes the inputs to a layer for each mini-batch. [More info](https:\/\/medium.com\/analytics-vidhya\/everything-you-need-to-know-about-regularizer-eb477b0c82ba)\n\n![Normalization](https:\/\/miro.medium.com\/max\/1200\/1*DmnOhSTIzn04sC0w1d3FPg.png)\n\n* Pooling layers provide an approach to down sampling feature maps by summarizing the presence of features in patches of the feature map. Two common pooling methods are average pooling and max pooling that summarize the average presence of a feature and the most activated presence of a feature respectively.\n\n![Pooling](https:\/\/qph.fs.quoracdn.net\/main-qimg-cf2833a40f946faf04163bc28517959c)\n\n* Dropoutlayer - A single model can be used to simulate having a large number of different network architectures by randomly dropping out nodes during training.\n![Drop out](https:\/\/miro.medium.com\/max\/700\/0*bTMVb8uekPpHxDcm)\n\n* In between the Conv2D layers and the dense layer, there is a \u2018Flatten\u2019 layer. Flatten serves as a connection between the convolution and dense layers.\n* \u2018Dense\u2019 is the layer type we will use in for our output layer. Dense is a standard layer type that is used in many cases for neural networks.\n* We will have 10 nodes in our output layer, one for each possible outcome (0\u20139).\n* The activation is \u2018softmax\u2019. Softmax makes the output sum up to 1 so the output can be interpreted as probabilities. The model will then make its prediction based on which option has the highest probability.","f39445fa":"Images can be used to rescale pixel values from the range of 0-255 to the range 0-1 preferred for neural network models.\n\nScaling data to the range of 0-1 is traditionally referred to as normalization.\n\nhere we are normalizing the pixel values of grayscale images, e.g. rescale them to the range [0,1]. This involves first converting the data type from unsigned integers to floats, then dividing the pixel values by the maximum value.\n\nIn this case, the ratio is 1\/255 or about 0.0039.\n","168d1b44":"# Encoding \n\n![Encoding](https:\/\/i.imgur.com\/wKtY1Og.png)","dad1bb43":"# Data visualization","c6b475f4":"# Problem Statment \n\nIdentify digits from a dataset of tens of thousands of handwritten images. The MNIST handwritten digit classification problem is a standard dataset used in computer vision and deep learning.\n\nIn this Notebook, we will discover how to develop a convolutional neural network for handwritten digit classification from scratch.\n\nWhat we will implement in this notebook:\n\n* How to develop a test harness to develop a robust evaluation of a model and establish a baseline of performance for a classification task.\n* How to explore extensions to a baseline model to improve learning and model capacity.\n* How to develop a finalized model, evaluate the performance of the final model, and use it to make predictions on new images.\n\n\n## **This task can be divided into the following subtasks.**\n\n1. **Data Preparation**\n2. **Building a CNN Model**\n3. **Evalution of the model**\n4. **Prediction of validation data**\n","b168fcb6":"# Normalization\n\n","82bf7935":"From the above plot, we say that all classes have almost equal distribution, We don't have any class imbalance here so we can go forward with our preprocessing.","f634440f":"## Compiling the model\n\nWhile compiling the model, three parameters requires loss, the optimizer and metrics.\n\n* categorical_crossentropy is a loss function for categorical variables\n* Use the Adam Optimizer to control the learning rate\n* The metric 'accuracy' is used to measure the performance of the model","19367058":"# Reshape\n\n![Reshape](https:\/\/backtobazics.com\/wp-content\/uploads\/2018\/08\/numpy-reshape-vector-to-matrix.jpg)","7e697fc7":"Here is a glimpse of what we will be dealing with:\n\n* Images of handwritten Digits from 0 to 9\n* We will feed those images to the CNN in order to learn and predict the test images.\n* We have below an example of few digit images from this dataset","c070799b":"# Spliting the data in to X_train and Y_train","9ccbbd16":"More reference\n\nhttps:\/\/www.pyimagesearch.com\/2019\/07\/08\/keras-imagedatagenerator-and-data-augmentation\/\n\nhttps:\/\/machinelearningmastery.com\/how-to-normalize-center-and-standardize-images-with-the-imagedatagenerator-in-keras\/\n\nhttps:\/\/towardsdatascience.com\/complete-guide-of-activation-functions-34076e95d044\n\nhttps:\/\/towardsdatascience.com\/building-a-convolutional-neural-network-cnn-in-keras-329fbbadc5f5\n\nhttps:\/\/towardsdatascience.com\/a-comprehensive-guide-to-convolutional-neural-networks-the-eli5-way-3bd2b1164a53\n\nhttps:\/\/medium.com\/analytics-vidhya\/everything-you-need-to-know-about-regularizer-eb477b0c82ba\n\nhttps:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/callbacks\/ReduceLROnPlateau\n\nhttps:\/\/www.pluralsight.com\/guides\/getting-started-tensorflow","1d5bc510":"# Data augmentation\n\n![Data Augmentation](https:\/\/nanonets.com\/blog\/content\/images\/2018\/11\/1_dJNlEc7yf93K4pjRJL55PA--1-.png)\n\n* ImageDataGenerator accepts the original data, randomly transforms it, and returns only the new, transformed data.\n* The Keras deep learning neural network library provides the capability to fit models using image data augmentation via the ImageDataGenerator class.","cef4ddbc":"# Building a CNN Model\n![Cnn Model Architecture](https:\/\/miro.medium.com\/max\/700\/1*uAeANQIOQPqWZnnuH-VEyw.jpeg)"}}