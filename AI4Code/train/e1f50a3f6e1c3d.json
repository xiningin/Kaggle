{"cell_type":{"e40dd710":"code","efa76451":"code","647bd087":"code","bb1d5f4d":"code","824e13f7":"code","1f9a546f":"code","360eba84":"code","d1ac0048":"code","88231fe4":"code","d567a3a3":"code","f3719f79":"code","438ab404":"code","2f2ec24a":"code","8b4307b3":"code","4fffcddd":"code","7e729043":"code","0b20959e":"code","ab2826b0":"code","9fb5f06a":"code","5dcadb49":"code","c59c8780":"code","3eed113f":"code","396d1006":"code","573ef432":"code","64b378c4":"code","1c12ae14":"code","1c636bdb":"code","c9401ffd":"code","7bfff63e":"code","e59e1b16":"code","a5076778":"code","256ca311":"code","57405cb5":"code","734235df":"code","b6a7742c":"code","1c321741":"code","cc56c994":"markdown","54993acc":"markdown","6a8de17e":"markdown","0f16f2f1":"markdown","1c915135":"markdown"},"source":{"e40dd710":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n # linear algebra\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","efa76451":"#we import the library and np = numpy\nimport numpy as np","647bd087":"list1 = [1,2,3,4,5,6,7,8,9,10]\nprint(list1)\n\narray1 = np.array(list1) #np.array() converts to an array\narray1","bb1d5f4d":"np.arange(1,15) #np.arange()  creates an array from 1 to 14.","824e13f7":"np.arange(1,15,2) #the same but each progresses by jumping 2","1f9a546f":"np.linspace(-1,1,15) #np.linspace() creates 15 equal numbers between -1 and 1.","360eba84":"np.logspace(0,2,3) #np.logspace() creates [0, 1, 2] => [10^0, 10^1, 10^2]","d1ac0048":"#np.zeros() function enables we to create  arrays that contain only zeros \nnp.zeros(100) ","88231fe4":"#np.ones() function enables we to create  arrays that contain only ones \nnp.ones(50) ","d567a3a3":"#np.zeros(()) -> if we want to create a matrix we should use double brackets.\n#25 rows and 4 columns\nnp.zeros((25,4)) ","f3719f79":"np.eye(5) #np.eye() creates a identity matrix. 5 rows and 5 columns.","438ab404":"np.random.randint(0,50) #np.random.randint() creates a random number between 0 and 50","2f2ec24a":"np.random.randint(0,50,5) #creates 5 random numbers betwenn 0 and 50","8b4307b3":"np.random.rand(3) #np.random.rand() creates 3 random numbers betwenn 0 and 1","4fffcddd":"data1 = np.arange(10) #we created an array\ndata1","7e729043":"#The reshape() function is used to give a new shape to an array without changing its data\ndata1.reshape(2,5)","0b20959e":"data2 = np.array([1,0,5,4,6,3,7,8,2,10]) #we created a new array\ndata2","ab2826b0":"#cumsum() function is used when we want to compute the cumulative sum of array elements over a given axis.\n#      ex = [0,1,2,3]\n#ex.cum() = [0,0+1,0+1+2,0+1+2+3] = [0,1,3,6]\ndata2.cumsum() ","9fb5f06a":"data2.min() #min() is finds the smallest value in the array","5dcadb49":"data2.max() #max() is finds the largest value in the array","c59c8780":"data2.sum() #sum() is  adds all values in the array","3eed113f":"#argmax() is finds the index of the largest value in the array\ndata2.argmax() ","396d1006":"#argmin() is finds the index of the smallest value in the array\ndata2.argmin()","573ef432":"data3 = np.array([[8,3],[2,9]]) #we created a new matrix. 2 rows and 2 columns\ndata3","64b378c4":"np.linalg.det(data3) #np.ligalg.det() is finds determinant.","1c12ae14":"np.std(data3) #np.std() is finds standard deviation","1c636bdb":"np.var(data3) #np.var is finds variance. variance = standard deviation^2","c9401ffd":"data1 #Let's do some operations for data1","7bfff63e":"data1[:5] #finds the first 5 elements of the array.","e59e1b16":"data1[::2] #Find two by two from beginning to end","a5076778":"data1[:3]=8 #finds the first 3 elements and them change is with 8\ndata1","256ca311":"data1[::-1] #reverse the array","57405cb5":"matrix1 = np.array([[5,6],[7,4]])\nmatrix2 = np.array([[0,3],[9,2]])\n\n      ","734235df":"#if axis=0, there are 4 rows and 2 columns in matrix\nmatrix_0=np.concatenate([matrix1,matrix2],axis=0)\nmatrix_0","b6a7742c":"#if axis=1, there are 2 rows and 4 columns in matrix\nmatrix_1=np.concatenate([matrix1,matrix2],axis=1)\nmatrix_1","1c321741":"matrix_0.shape #shape is shows the number of rows and columns\n","cc56c994":"# Numpy (Numeric Python)\n   What is Numpy?    \n   \n   Numpy is a library of python.  Numpy is used for arrays and matrix operations.\n\n   Let's start our lesson :)","54993acc":"We can convert any list into numpy array","6a8de17e":"### An example\nWe have 2 matrices and we want to concatenate them. There are 2 rows and 2 columns in our matrices. ","0f16f2f1":"## Numpy functions","1c915135":"### I hope it helped. See you in another kernel"}}