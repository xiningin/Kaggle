{"cell_type":{"205e9d8f":"code","ba21172d":"code","1df6a3af":"code","09191015":"code","ee5a9e08":"code","314cb148":"code","1e8779ff":"code","2978204c":"code","fb17c5b5":"code","778751e0":"code","f1fc2303":"code","86e747f9":"code","b540e815":"code","79e8d4dc":"code","aa89bf4e":"code","d21e434f":"code","70f19620":"code","711b499f":"markdown","416031d4":"markdown","032f4e19":"markdown","e4171f05":"markdown","edf7aadd":"markdown","0952381d":"markdown","f05d89b5":"markdown","ae586c19":"markdown","9827d3cf":"markdown"},"source":{"205e9d8f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport io\nfrom PIL import Image\n\nfrom tqdm.notebook import tqdm\nimport random\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom kaggle_datasets import KaggleDatasets","ba21172d":"NUM_SHARDS = 16\nIMAGE_SIZE = (224, 224)\nSEED=42","1df6a3af":"df = pd.read_csv('..\/input\/shopee-product-matching\/train.csv')\ndisplay(df)","09191015":"def generate_triplets(df):\n    random.seed(SEED)\n    label_group = dict(list(df.groupby('label_group')))\n    \n    def aux(row):\n        anchor = row['image']\n        \n        # We sample a positive data point from the same group, but\n        # exclude the anchor itself\n        ids = label_group[row['label_group']]['image'].tolist()\n        ids.remove(row['image'])\n        positive = random.choice(ids)\n        \n        # Now, this will sample a group from all possible groups, then sample \n        # a product from that group\n        groups = list(label_group.keys())\n        groups.remove(row['label_group'])\n        neg_group = random.choice(groups)\n        negative = random.choice(label_group[neg_group]['image'].tolist())\n\n        return anchor, positive, negative\n    \n    return aux","ee5a9e08":"triplet_sets = df.apply(generate_triplets(df), axis=1).tolist()\ntriplet_sets = pd.DataFrame(triplet_sets, columns=['anchor', 'positive', 'negative'])\ndisplay(triplet_sets)","314cb148":"#triplet_sets = pd.read_csv('..\/input\/generate-triplet-data\/triplet_sets.csv')\ntriplet_paths = triplet_sets.applymap(lambda x: os.path.join('..\/input\/shopee-product-matching\/train_images', x))\ndisplay(triplet_paths)","1e8779ff":"train_paths, test_paths = train_test_split(triplet_paths, train_size=0.8, random_state=SEED)","2978204c":"#Compare resize methods\nfilepath = train_paths.iloc[1,0]\n\nmethods = ['bilinear', 'lanczos3', 'lanczos5', 'bicubic', 'gaussian', 'nearest', 'area', 'mitchellcubic']\nfig = plt.figure(figsize=(30, 30))\nax = fig.subplots(3,3)\n\nimage_string = tf.io.read_file(filepath)\noriginal = tf.image.decode_jpeg(image_string, channels=3)\nax[0,0].imshow(original)\nax[0,0].set_title('original', fontsize=24)\n\nfor i, method in enumerate(methods):\n    image = original\n    \n    #Must convert dtype to float32 for most resizing methods to work\n    image = tf.image.convert_image_dtype(image, tf.float32)\n    image = tf.image.resize(image, IMAGE_SIZE, method=method, antialias=True)\n    \n    subplot = (i+1)\/\/3, (i+1)%3\n    ax[subplot].imshow(image)\n    ax[subplot].set_title(method, fontsize=24)","fb17c5b5":"def encode(image, method, resize=True):\n    if resize:\n        #Must convert dtype to float32 for most resizing methods to work\n        image = tf.image.convert_image_dtype(image, tf.float32)\n        image = tf.image.resize(image, IMAGE_SIZE, method=method, antialias=True)\n        #Convert dtype to uint8 to be encoded to bytestring for tfrec\n        image = tf.image.convert_image_dtype(image, tf.uint8)\n    image = tf.image.encode_jpeg(image, optimize_size=True)\n    return image\n\n# Example decoding func\ndef decode(image, method, resize=True):\n    image = tf.image.decode_jpeg(image, channels=3)\n    if resize:\n        image = tf.cast(image, tf.uint8) \/ 255\n        image = tf.image.resize(image, IMAGE_SIZE, method=method, antialias=True) \n    return image","778751e0":"#Compare resize methods\nfilepath = train_paths.iloc[1,0]\n\nmethods = ['bilinear', 'lanczos3', 'lanczos5', 'bicubic', 'gaussian', 'nearest', 'area', 'mitchellcubic']\nfig = plt.figure(figsize=(24, 9))\nax = fig.subplots(3,8)\n\nimage_string = tf.io.read_file(filepath)\noriginal = tf.image.decode_jpeg(image_string, channels=3)\n\n# Mimic the data pipeline as shown in \n# Encoding to tfrec - https:\/\/www.kaggle.com\/mattbast\/google-landmarks-2020-create-a-tfrecord-dataset\/notebook\n# Decoding from tfrec - https:\/\/www.kaggle.com\/mattbast\/google-landmark-retrieval-triplet-loss\/data\nfor j in range(3):\n    if j == 0:\n        encode_resize, decode_resize = True, True\n    elif j == 1:\n        encode_resize, decode_resize = True, False\n    else:\n        encode_resize, decode_resize = False, True\n    \n    for i, method in enumerate(methods):\n        image = original\n        #encode to tfrec\n        image = encode(image, method, resize=encode_resize)\n        #decode from tfrec\n        image = decode(image, method, resize=decode_resize)\n        \n        ax[j,i].imshow(image)\n        title = ' resize' + (' encode' if encode_resize else '') + (' decode' if decode_resize else '')\n        ax[j,i].set_title(method + title)\n        ax[j,i].axis('off')","f1fc2303":"#Compare resize methods\nfilepath = train_paths.iloc[1,0]\n\nmethods = ['bilinear', 'gaussian', 'nearest', 'area']\nfig = plt.figure(figsize=(32, 24))\nax = fig.subplots(3,4)\n\nimage_string = tf.io.read_file(filepath)\noriginal = tf.image.decode_jpeg(image_string, channels=3)\n\nfor j in range(3):\n    if j == 0:\n        encode_resize, decode_resize = True, True\n    elif j == 1:\n        encode_resize, decode_resize = True, False\n    else:\n        encode_resize, decode_resize = False, True\n    \n    for i, method in enumerate(methods):\n        image = original\n        #encode to tfrec\n        image = encode(image, method, resize=encode_resize)\n        #decode from tfrec\n        image = decode(image, method, resize=decode_resize)\n        \n        ax[j,i].imshow(image)\n        title = ' resize' + (' encode' if encode_resize else '') + (' decode' if decode_resize else '')\n        ax[j,i].set_title(method + title, fontsize=24)\n        ax[j,i].axis('off')","86e747f9":"def encode_image(filepath, method='bilinear'):\n    image_string = tf.io.read_file(filepath)\n    image = tf.image.decode_jpeg(image_string, channels=3)\n    #Must convert dtype to float32 for most resizing methods to work\n    image = tf.image.convert_image_dtype(image, tf.float32)\n    image = tf.image.resize(image, IMAGE_SIZE, method=method, antialias=True)\n    #Convert dtype to uint8 to be encoded to bytestring for tfrec\n    image = tf.image.convert_image_dtype(image, tf.uint8)\n    image = tf.image.encode_jpeg(image, optimize_size=True)\n    return image","b540e815":"def visualize(df_paths):\n\n    def show(ax, image):\n        ax.imshow(image)\n        ax.axis('off')\n\n    fig = plt.figure(figsize=(9, 9))\n\n    axs = fig.subplots(3, 3)\n    for i in range(3):\n        triplet = df_paths.iloc[i, 0:3]\n        for j in range(3):\n            image = encode_image(triplet[j])\n            image = tf.image.decode_jpeg(image, channels=3)\n            show(axs[i,j], image)\n\nvisualize(train_paths)","79e8d4dc":"def _bytes_feature(value):\n    if isinstance(value, type(tf.constant(0))):\n        value = value.numpy() \n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))","aa89bf4e":"def serialize_example(row):    \n    anchor_img = encode_image(row['anchor'])\n    positive_img = encode_image(row['positive'])\n    negative_img = encode_image(row['negative'])\n    \n    feature = {\n        'anchor_img': _bytes_feature(anchor_img),\n        'positive_img': _bytes_feature(positive_img),\n        'negative_img': _bytes_feature(negative_img),\n    }\n    example_proto = tf.train.Example(features=tf.train.Features(feature=feature))\n    return example_proto.SerializeToString()","d21e434f":"def write_tfrecord_file(df, filepath, filename, file_index, file_size, image_indexes):       \n    with tf.io.TFRecordWriter(f'{filepath}\/{filename}%.2i.tfrec'%(file_index)) as writer:\n        start = file_size * file_index\n        end = file_size * (file_index + 1)\n        for i in tqdm(image_indexes[start:end]):\n            example = serialize_example(df.loc[i])\n            writer.write(example)\n\ndef df_to_tfrecords(df, filepath, filename):\n    if not os.path.exists(filepath):\n        os.makedirs(filepath)\n    image_indexes = df.index.values\n    file_size = len(image_indexes) \/\/ 15\n    file_count = len(image_indexes) \/\/ file_size + int(len(image_indexes) % file_size != 0)\n    for file_index in range(file_count):\n        print('Writing TFRecord %i of %i...'%(file_index, file_count))\n        write_tfrecord_file(df, filepath, filename, file_index, file_size, image_indexes)","70f19620":"df_to_tfrecords(train_paths, '.\/train', 'train')\ndf_to_tfrecords(test_paths, '.\/test', 'test')","711b499f":"[To avoid data bottlenecks in TPU, convert data to TFRecords](https:\/\/www.kaggle.com\/docs\/tpu)\n\nThis notebook demonstrates the encoding of triplet sets into TFRecords. Based on [mattbast's work in the Google Landmark Retrieval 2020 competition](https:\/\/www.kaggle.com\/mattbast\/google-landmarks-2020-create-a-tfrecord-dataset\/notebook)\n\nFor the construction of triplet sets, refer to [xhlulu's excellent notebook](https:\/\/www.kaggle.com\/xhlulu\/shopee-generate-data-for-triplet-loss)","416031d4":"### What method should be used to resize images?","032f4e19":"All look pretty comparable. \n\nRanking: \"Bilinear\" > ... > \"area\" > \"nearest\"","e4171f05":"Seems that only \"bilinear\", \"gaussian\", \"nearest\", and \"area\" survive the original pipeline implementation for whatever reason","edf7aadd":"## Data pipeline prototyping","0952381d":"## Triplet encoding to tfrecs","f05d89b5":"Best results seem to occur when images are resized during preprocessing. \n\nThe remainder of the code in this notebook will resize the images via the \"bilinear\" method to 224x224 for EfficientNetb0","ae586c19":"### When should resizing occur in the data pipeline?","9827d3cf":"# Shopee product matching triplet data conversion to TFRecords"}}