{"cell_type":{"174a4989":"code","ad1c5d05":"code","c03b64d0":"code","6687c952":"code","ba90165e":"code","6a12e662":"code","54545c12":"code","57f19e28":"code","32a93cc7":"code","cbbf0520":"code","f47b1bd3":"code","c2918df5":"code","a37fb997":"code","94ec8589":"code","183da9f1":"code","a8be23f5":"code","c6fbe731":"code","85a4778c":"code","beee84cb":"code","a9cf6ce7":"code","6c2ea050":"code","bb11fcaf":"code","20434976":"code","4be17246":"code","831f7cc8":"code","0226f4bc":"code","3d2a1241":"code","9c255f70":"code","57b7be43":"code","50ce864e":"code","49875abc":"code","f5917943":"code","325086ba":"code","8c175612":"code","b29f11be":"code","06425184":"code","56c79b7d":"code","207eff27":"code","188d5962":"markdown","33aa0f16":"markdown","49b66692":"markdown","1805b48e":"markdown","341af57a":"markdown","578c43ea":"markdown","4aed24d5":"markdown","a63dd7a0":"markdown"},"source":{"174a4989":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","ad1c5d05":"df=pd.read_csv('..\/input\/usa-housing\/USA_Housing.csv')","c03b64d0":"df.head()","6687c952":"df.shape","ba90165e":"y=df['Price']\nX=df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',\n       'Avg. Area Number of Bedrooms', 'Area Population']]","6a12e662":"from sklearn.preprocessing import PolynomialFeatures","54545c12":"polynomial_converter=PolynomialFeatures(degree=2,include_bias=False)","57f19e28":"poly_features=polynomial_converter.fit(X)","32a93cc7":"poly_features=polynomial_converter.transform(X)","cbbf0520":"poly_features.shape","f47b1bd3":"X.shape","c2918df5":"from sklearn.model_selection import train_test_split","a37fb997":"X_train,X_test,y_train,y_test=train_test_split(poly_features, y, test_size=0.3,random_state=101)","94ec8589":"from sklearn.linear_model import LinearRegression\n","183da9f1":"polymodel=LinearRegression()\npolymodel.fit(X_train,y_train)","a8be23f5":"y_pred=polymodel.predict(X_test)","c6fbe731":"pd.DataFrame({'y_test':y_test,'y_pred':y_pred,'Residuals':(y_test-y_pred)}).head(4)","85a4778c":"from sklearn import metrics","beee84cb":"MAE_Poly=metrics.mean_absolute_error(y_test,y_pred) ","a9cf6ce7":"MSE_Poly=metrics.mean_squared_error(y_test,y_pred)","6c2ea050":"RMSE_Poly=np.sqrt(MSE)","bb11fcaf":"pd.DataFrame([MAE,MSE,RMSE],index=['MAE', 'MSE', 'RMSE'], columns=['Metrics'])","20434976":"from sklearn.model_selection import train_test_split\nXS_train,XS_test,ys_train,ys_test=train_test_split(X, y, test_size=0.3,random_state=101)","4be17246":"from sklearn.linear_model import LinearRegression\nSimplemodel=LinearRegression()\nSimplemodel.fit(XS_train,ys_train)","831f7cc8":"ys_pred=Simplemodel.predict(XS_test)\nMAE_simple=metrics.mean_absolute_error(ys_test,ys_pred) \nMSE_simple=metrics.mean_squared_error(ys_test,ys_pred)\nRMSE_simple=np.sqrt(MSE_simple)","0226f4bc":"pd.DataFrame({'Poly Metrics':[MAE_Poly,MSE_Poly,RMSE_Poly],'Simple Metrics':[MAE_simple,MSE_simple,RMSE_simple]}, index=['MAE','MSE','RMSE'])","3d2a1241":"train_RMSE_list=[]\ntest_RMSE_list=[]\n\nfor d in range(1,10):\n    polynomial_converter=PolynomialFeatures(degree=d,include_bias=False)\n    poly_features=polynomial_converter.fit(X)\n    poly_features=polynomial_converter.transform(X)\n    X_train,X_test,y_train,y_test=train_test_split(poly_features, y, test_size=0.3,random_state=101)\n    polymodel=LinearRegression()\n    polymodel.fit(X_train,y_train)\n    y_train_pred=polymodel.predict(X_train)\n    y_test_pred=polymodel.predict(X_test)\n    \n    train_RMSE=np.sqrt(metrics.mean_squared_error(y_train,y_train_pred))\n    test_RMSE=np.sqrt(metrics.mean_squared_error(y_test, y_test_pred))\n    train_RMSE_list.append(train_RMSE)\n    test_RMSE_list.append(test_RMSE)\n    ","9c255f70":"train_RMSE_list\n","57b7be43":"test_RMSE_list\n","50ce864e":"plt.plot( train_RMSE_list[:5], label='Train RMSE')\nplt.plot( test_RMSE_list[:5], label='Test RMSE')\n\nplt.xlabel('Polynomial Degree')\nplt.ylabel('RMSE')\nplt.legend()","49875abc":"Final_polynomial_converter= PolynomialFeatures(degree=2, include_bias=False)\n\nFinal_poly_features= Final_polynomial_converter.fit(X)\nFinal_poly_features= Final_polynomial_converter.transform(X)\nX_train, X_test, y_train, y_test = train_test_split(Final_poly_features, y, test_size=0.3, random_state=101)\nFinal_PolyModel=LinearRegression()\nFinal_PolyModel.fit(X_train, y_train)","f5917943":"from joblib import dump, load","325086ba":"dump(Final_PolyModel, 'Sales_PolyModel.joblib')","8c175612":"dump(Final_polynomial_converter, 'Poly_Converter.joblib')","b29f11be":"Load_Converter=load('Poly_Converter.joblib')\nLoad_PolyModel=load('Sales_PolyModel.joblib')","06425184":"campaign=[[61287.067179,6.002900,5,3,40000]]  ","56c79b7d":"campaign_poly=Load_Converter.transform(campaign)","207eff27":"Final_PolyModel.predict(campaign_poly)","188d5962":"Preprocessing","33aa0f16":"Training the Model","49b66692":"Adjusting Model Parameters","1805b48e":"Predicting test data","341af57a":"Evaluating the model performance","578c43ea":"Split the Data to Train and Test","4aed24d5":"compare to Simple Linear Regression","a63dd7a0":"Determine the Features and Target Variable"}}