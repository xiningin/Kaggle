{"cell_type":{"4e93c469":"code","f8ffd099":"code","ac31182e":"code","144ad69a":"code","6c963f84":"code","5cfeb760":"code","d54b9b00":"code","e39dddbc":"code","01204c25":"code","47d9e9c1":"code","9fa2ad75":"code","ef317318":"code","9e92a731":"code","2b69ca35":"code","e376efe1":"code","648fbc3e":"code","76664c93":"code","636e2360":"code","f1d5f76d":"code","75ddc7b4":"code","5d2c288e":"code","eba649f5":"code","ceff0b34":"code","4d01676d":"code","cf8b8793":"code","43ec75f2":"markdown"},"source":{"4e93c469":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/intel-image-classification\/seg_train\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f8ffd099":"#buildings,street,mountain,glacier,sea\nfrom PIL import Image\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn\nimport glob\nimage=[]\nlabel=[]\nfor i in glob.glob(\"\/kaggle\/input\/intel-image-classification\/seg_train\/seg_train\/buildings\/*.jpg\"):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    image.append(np.array(r))\n    label.append('buildings')\nfor i in glob.glob(\"\/kaggle\/input\/intel-image-classification\/seg_train\/seg_train\/street\/*.jpg\"):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    image.append(np.array(r))\n    label.append('street')\nfor i in glob.glob(\"\/kaggle\/input\/intel-image-classification\/seg_train\/seg_train\/mountain\/*.jpg\"):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    image.append(np.array(r))\n    label.append('mountain')\nfor i in glob.glob(\"\/kaggle\/input\/intel-image-classification\/seg_train\/seg_train\/glacier\/*.jpg\"):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    image.append(np.array(r))\n    label.append('glacier')\nfor i in glob.glob(\"\/kaggle\/input\/intel-image-classification\/seg_train\/seg_train\/sea\/*.jpg\"):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    image.append(np.array(r))\n    label.append('sea')\nfor i in glob.glob(\"\/kaggle\/input\/intel-image-classification\/seg_train\/seg_train\/forest\/*.jpg\"):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    image.append(np.array(r))\n    label.append('forest')","ac31182e":"len(image)","144ad69a":"import matplotlib.pyplot as plt\nfigure=plt.figure(figsize=(15,10))\nax=figure.add_subplot(121)\nax.imshow(image[0])\nbx=figure.add_subplot(122)\nbx.imshow(image[60])\nplt.show()","6c963f84":"label=pd.DataFrame(label)\nfrom sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nlabels=le.fit_transform(label[0])\nlabels","5cfeb760":"unlabels=np.unique(labels)\nunlabels","d54b9b00":"image=np.array(image)\nnp.save(\"image\",image)\nnp.save(\"labels\",labels)","e39dddbc":"image=np.load(\"image.npy\")\nlabels=np.load(\"labels.npy\")","01204c25":"s=np.arange(image.shape[0])\nnp.random.shuffle(s)\nimage=image[s]\nlabels=labels[s]","47d9e9c1":"num_classes=len(np.unique(labels))\nlen_data=len(image)","9fa2ad75":"x_train,x_test=image[(int)(0.1*len_data):],image[:(int)(0.1*len_data)]\nx_train = x_train.astype('float32')\/255\nx_test = x_test.astype('float32')\/255\ntrain_len=len(x_train)\ntest_len=len(x_test)","ef317318":"y_train,y_test=labels[(int)(0.1*len_data):],labels[:(int)(0.1*len_data)]","9e92a731":"import keras\ny_train=keras.utils.to_categorical(y_train,num_classes)\ny_test=keras.utils.to_categorical(y_test,num_classes)","2b69ca35":"from keras.models import Sequential\nfrom keras.layers import Dense,Conv2D,MaxPooling2D,Dropout,Flatten,MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.layers import Activation, Convolution2D, Dropout, Conv2D,AveragePooling2D, BatchNormalization,Flatten,GlobalAveragePooling2D\nfrom keras import layers\nfrom keras.regularizers import l2\nfrom keras.callbacks import ModelCheckpoint,ReduceLROnPlateau","e376efe1":"l2_reg=0.001\nopt=Adam(lr=0.001)","648fbc3e":"model = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=(2,2), input_shape=(50,50, 3), activation='relu',kernel_regularizer=l2(l2_reg)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.1))\nmodel.add(Conv2D(filters=64, kernel_size=(2,2), activation='relu',kernel_regularizer=l2(l2_reg)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.1))\nmodel.add(Conv2D(filters=128, kernel_size=(2,2), activation='relu',kernel_regularizer=l2(l2_reg)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.1))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.1))\nmodel.add(Dense(6, activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])\n\nmodel.summary()","76664c93":"filepath=\"weights.hdf5\"\ncheckpoint = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\nhistory=model.fit(x_train,y_train,batch_size=128,epochs=20,verbose=1,validation_split=0.33,callbacks=[checkpoint])","636e2360":"scores = model.evaluate(x_test, y_test, verbose=1)\nprint('Test loss:', scores[0])\nprint('Test accuracy:', scores[1])","f1d5f76d":"figure=plt.figure(figsize=(15,15))\nax=figure.add_subplot(121)\nax.plot(history.history['accuracy'])\nax.plot(history.history['val_accuracy'])\nax.legend(['Training Accuracy','Val Accuracy'])\nbx=figure.add_subplot(122)\nbx.plot(history.history['loss'])\nbx.plot(history.history['val_loss'])\nbx.legend(['Training Loss','Val Loss'])","75ddc7b4":"test=[]\nfor i in glob.glob(\"\/kaggle\/input\/intel-image-classification\/seg_test\/seg_test\/*\/*.jpg\"):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    test.append(np.array(r))","5d2c288e":"len(test)","eba649f5":"data1=np.array(test)\nnp.save(\"image1\",data1)\nimage1=np.load(\"image1.npy\")","ceff0b34":"pred=np.argmax(model.predict(image1),axis=1)\nprediction = le.inverse_transform(pred)","4d01676d":"t_image=np.expand_dims(image1[100],axis=0)\npred_t=np.argmax(model.predict(t_image),axis=1)\nprediction_t = le.inverse_transform(pred_t)","cf8b8793":"print(prediction_t[0])\nplt.imshow(image1[100])","43ec75f2":"# TEST"}}