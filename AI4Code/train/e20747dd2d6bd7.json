{"cell_type":{"471f6eb4":"code","2b7004d4":"code","0cf7476a":"code","b7ea5daa":"code","15916331":"code","8e396401":"code","d80f8fc1":"code","284e14f3":"code","0d8bf3c4":"code","71984271":"code","7f7db537":"code","b4be0293":"code","edada5d2":"code","8b22c9d8":"code","2cc2c6a8":"code","b87f1e5f":"code","04785464":"code","e471df8f":"code","a91e3637":"code","6c6002c0":"code","2ed45d36":"code","7d5e1313":"code","4741c8f6":"code","cfe1aecd":"code","1f4df7e3":"code","6e397855":"code","26f6ecfb":"code","de1246fd":"code","707b0968":"code","2cf9f6f6":"code","cbd6dac0":"code","6443c466":"code","56dd7d55":"code","f167d612":"code","494eca97":"code","1c6712ad":"code","c50f1b22":"code","9af3ce4c":"code","e208577a":"code","4d6bba4b":"markdown","d20f8a64":"markdown","01e0923e":"markdown","52e3c033":"markdown","603750e5":"markdown","3cfb97a3":"markdown","e4f43d2c":"markdown"},"source":{"471f6eb4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b7004d4":"df=pd.read_csv(\"..\/input\/donorsprediction\/Raw_Data_for_train_test.csv\")","0cf7476a":"df","b7ea5daa":"df.head()","15916331":"df.columns","8e396401":"df.describe()","d80f8fc1":"df.isnull().sum()","284e14f3":"df.columns[df.isnull().any()]","0d8bf3c4":"df.isnull().sum()","71984271":"df['TARGET_D']=df['TARGET_D'].fillna(df['TARGET_D'].mean())","7f7db537":"# create a list of our conditions\nconditions = [\n    (df['TARGET_D'] >= 50),\n    (df['TARGET_D'] >= 20) & (df['TARGET_D'] < 50),\n    (df['TARGET_D'] >= 13) & (df['TARGET_D'] < 20),\n    (df['TARGET_D'] >= 10) & (df['TARGET_D'] < 13),\n    (df['TARGET_D'] < 10)\n    ]\n\n# create a list of the values we want to assign for each condition\nvalues = ['A', 'B', 'C', 'D','E']\n\n# create a new column and use np.select to assign values to it using our lists as arguments\ndf['DONATION_TYPE'] = np.select(conditions, values)\n\n# display updated DataFrame\ndf.head()","b4be0293":"df.isnull().sum()","edada5d2":"#target d contains a lot of null values ,so delete this column\ndf=df.drop(['TARGET_D'],axis=1)","8b22c9d8":"df=df.drop(['PUBLISHED_PHONE'],axis=1)","2cc2c6a8":"df['DONOR_AGE']=df['DONOR_AGE'].fillna(df['DONOR_AGE'].mean())","b87f1e5f":"df['DONOR_AGE']=df['DONOR_AGE'].astype('int64')","04785464":"df['INCOME_GROUP']=df['INCOME_GROUP'].fillna(df['INCOME_GROUP'].mode()[0])","e471df8f":"df['INCOME_GROUP']=df['INCOME_GROUP'].astype('int64')","a91e3637":"df['WEALTH_RATING']=df['WEALTH_RATING'].fillna(df['WEALTH_RATING'].mode()[0])","6c6002c0":"df['WEALTH_RATING']=df['WEALTH_RATING'].astype('int64')","2ed45d36":"df=df.dropna()","7d5e1313":"df.columns[df.isnull().any()]","4741c8f6":"df","cfe1aecd":"df['SES'].value_counts()","1f4df7e3":"df['SES']=df['SES'].str.replace('?','2')\ndf['SES']=df['SES'].astype('int64')","6e397855":"df['URBANICITY'].value_counts()","26f6ecfb":"df['URBANICITY']=df['URBANICITY'].str.replace('?','S')","de1246fd":"df['CLUSTER_CODE'].value_counts()","707b0968":"df['CLUSTER_CODE']=df['CLUSTER_CODE'].str.replace('.','40')\ndf['CLUSTER_CODE']=df['CLUSTER_CODE'].astype('int64')","2cf9f6f6":"# Get list of categorical variables\ns = (df.dtypes == 'object')\nobject_cols = list(s[s].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols)","cbd6dac0":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nfor i in list(df.columns):\n    if df[i].dtype=='object':\n        df[i]=le.fit_transform(df[i])","6443c466":"df.dtypes","56dd7d55":"df","f167d612":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()\nimport numpy as np\nfrom sklearn.cluster import KMeans","494eca97":"#%% KMEANS wiht sklearn \nfrom sklearn.cluster import KMeans\nwcss=[]\n#find best k value\nfor k in range(1,15):\n    kmeans=KMeans(n_clusters=k)\n    kmeans.fit(df)\n    wcss.append(kmeans.inertia_)\n#elbow rule on plot    \nplt.figure(figsize=(12,8))\nplt.plot(range(1,15),wcss,\"-o\")\nplt.title(\"wcss \/ number of cluster\", fontsize=18)\nplt.xlabel(\"number of k(cluster) values\")\nplt.xticks(range(1,15))\nplt.grid(True)\nplt.ylabel(\"wcss\")\nplt.tight_layout()\nplt.show()","1c6712ad":"#%%   from elbow plot we can choose 3 or 4 i'll go with 4 cluster.\n#kmeans2=KMeans(n_clusters=2)\n#kmeans3=KMeans(n_clusters=3)\nkmeans=KMeans(n_clusters=4)\nclusters=kmeans.fit_predict(df)\ndf[\"label\"]=clusters","c50f1b22":"#%% plot with cluster \/ center(centroid)\nplt.figure(figsize=(20,8))\nplt.scatter(df.URBANICITY [df.label==0],df.IN_HOUSE[df.label==0],color=\"red\",alpha= 0.8)\nplt.scatter(df.URBANICITY [df.label==1],df.IN_HOUSE[df.label==1],color=\"green\",alpha= 0.8)\nplt.scatter(df.URBANICITY [df.label==2],df.IN_HOUSE[df.label==2],color=\"blue\",alpha= 0.8)\nplt.scatter(df.URBANICITY [df.label==3],df.IN_HOUSE[df.label==3],color=\"black\",alpha= 0.8)\nplt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],color=\"orange\")# cluster center(centroid)\nplt.title(\"Kmeans(k=4) Cluster\")\nplt.xlabel(\"URBANICITY \")\nplt.ylabel(\"IN_HOUSE\")\nplt.legend(df,loc='upper right')\nplt.show()","9af3ce4c":"#kmeans2=KMeans(n_clusters=2)\n#kmeans3=KMeans(n_clusters=3)\nkmeans=KMeans(n_clusters=6)\nclusters=kmeans.fit_predict(df)\ndf[\"label\"]=clusters","e208577a":"#%% plot with cluster \/ center(centroid)\nplt.figure(figsize=(20,8))\nplt.scatter(df.CONTROL_NUMBER[df.label==0],df.TARGET_B[df.label==0],color=\"red\",alpha= 0.8)\nplt.scatter(df.CONTROL_NUMBER[df.label==1],df.TARGET_B[df.label==1],color=\"green\",alpha= 0.8)\nplt.scatter(df.CONTROL_NUMBER[df.label==2],df.TARGET_B[df.label==2],color=\"blue\",alpha= 0.8)\nplt.scatter(df.CONTROL_NUMBER[df.label==3],df.TARGET_B[df.label==3],color=\"black\",alpha= 0.8)\nplt.scatter(df.CONTROL_NUMBER[df.label==3],df.TARGET_B[df.label==3],color=\"cyan\",alpha= 0.8)\nplt.scatter(df.CONTROL_NUMBER[df.label==3],df.TARGET_B[df.label==3],color=\"purple\",alpha= 0.8)\nplt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],color=\"orange\")# cluster center(centroid)\nplt.title(\"Kmeans(k=6) Cluster\")\nplt.xlabel(\"CONTROL_NUMBER\")\nplt.ylabel(\"TARGET_B\")\nplt.legend(df,loc='upper right')\nplt.show()","4d6bba4b":"# Apply K Means","d20f8a64":"# Read Data","01e0923e":"# make label encoder to categorical coulmns","52e3c033":"# Find missing values","603750e5":"# create a new column(DONATION_TYPE)","3cfb97a3":"# Missing values","e4f43d2c":"# Visulization"}}