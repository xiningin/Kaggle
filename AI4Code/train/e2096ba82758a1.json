{"cell_type":{"d041182c":"code","9dda1dae":"code","60f65851":"code","6ae7ebe3":"code","77c52d2f":"code","1e3c1f9c":"code","37507722":"code","7f081473":"code","c915bb63":"code","5ddc8f1c":"code","aa60193d":"code","b2cf21a3":"code","a2988db5":"code","9ace0c6f":"code","51aefca4":"code","ee0d186b":"code","b784be52":"code","55495418":"markdown","40a77273":"markdown","5938b2c4":"markdown"},"source":{"d041182c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9dda1dae":"import warnings\nimport gc\nimport tensorflow as tf\nimport holidays\n\nfrom sklearn.model_selection import train_test_split\n\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance\n","60f65851":"def smape(y_true, y_pred):\n    return np.mean(np.abs(y_true - y_pred) \/ (y_true + np.abs(y_pred)) * 200)","6ae7ebe3":"def evaluate_model(model, x, y):\n    y_pred = model.predict(x)\n    result = smape(y, y_pred)\n    return result","77c52d2f":"def label_encoder(df):\n    country = {c : i for i, c in enumerate(df['country'].unique())}\n    store = {s : i for i, s in enumerate(df['store'].unique())}\n    product = {p : i for i, p in enumerate(df['product'].unique())}\n    df = df.copy()\n    df['country'] = df['country'].replace(country)\n    df['store'] = df['store'].replace(store)\n    df['product'] = df['product'].replace(product)\n    return df","1e3c1f9c":"# https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/timeseries.html\ndef preprocess_dates(df):\n    df = df.copy()\n    df['date'] = pd.to_datetime(df['date'])\n    df['weekday'] = df['date'].dt.weekday\n    df['quarter'] = df['date'].dt.quarter\n    df['day_of_year'] = df['date'].dt.day_of_year\n    df['is_month_start'] = df['date'].dt.is_month_start\n    df['is_month_end'] = df['date'].dt.is_month_end\n    df['month'] = df['date'].dt.month\n    return df","37507722":"def preprocess_holidays(df):\n    holiday_finland = holidays.CountryHoliday(country='FI', years=[2015, 2016, 2017, 2018, 2019])\n    holiday_norway = holidays.CountryHoliday(country='NO', years=[2015, 2016, 2017, 2018, 2019])\n    holiday_sweden = holidays.CountryHoliday(country='SE', years=[2015, 2016, 2017, 2018, 2019])\n    holidays_fin_nor_swe = holiday_finland.copy()\n    holidays_fin_nor_swe.update(holiday_norway)\n    holidays_fin_nor_swe.update(holiday_sweden)\n    dates = list(holidays_fin_nor_swe.keys())\n    dates = sorted(pd.to_datetime(dates))\n    df = df.copy()\n    df['is_holiday'] = df['date'].apply(lambda x : 1 if x in dates else 0)\n    return df","7f081473":"def preprocess_timeseries(df):\n    df = df.copy()\n    df['sin_day_of_year'] = np.sin(df['day_of_year'])\n    df['sin_month'] = np.sin(df['month'])\n    return df","c915bb63":"seed = 47\nwarnings.filterwarnings(\"ignore\")","5ddc8f1c":"train_df = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv\", sep=',')\ntrain_df = label_encoder(train_df)\ntrain_df = preprocess_dates(train_df)\ntrain_df = preprocess_holidays(train_df)\ntrain_df = preprocess_timeseries(train_df)\nx_train = train_df.drop(['row_id', 'date', 'num_sold'], axis=1)\ny_train = train_df['num_sold']\nx_train, x_test, y_train, y_test = train_test_split(x_train, y_train, test_size=0.1, random_state=seed, shuffle=False)","aa60193d":"params = {'n_estimators': 200, \n          'max_depth': 23, \n          'subsample': 1.0,\n          'eta': 0.3,\n          'colsample_bytree': 1.0,\n          'gamma': 0.0, \n          'min_child_weight': 1,\n          'reg_alpha': 1\n         }\n\nmodel =  XGBRegressor(**params,\n                      objective='reg:linear',\n                      random_state=seed,\n                      early_stopping_rounds=200,\n                      verbosity=0)\nmodel.fit(x_train, y_train, verbose=True)\nscore = evaluate_model(model, x_test, y_test)\nprint(score)","b2cf21a3":"plot_importance(model)","a2988db5":"del train_df, x_train, y_train, x_test, y_test\ngc.collect()","9ace0c6f":"test_df = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv\", sep=',')\ntest_df = label_encoder(test_df)\ntest_df = preprocess_dates(test_df)\ntest_df = preprocess_holidays(test_df)\ntest_df = preprocess_timeseries(test_df)\nx_test = test_df.drop(['row_id', 'date'], axis=1)","51aefca4":"target = model.predict(x_test).squeeze()\nrow_id =  test_df['row_id'].values\nsubmission = pd.DataFrame({'row_id' : row_id, 'num_sold' : target})","ee0d186b":"submission.head()","b784be52":"submission.to_csv('submission.csv', index=False)","55495418":"# XGBoost","40a77273":"# Submission","5938b2c4":"# Reading the dataset and preprocessing the dataset"}}