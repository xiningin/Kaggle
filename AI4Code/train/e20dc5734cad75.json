{"cell_type":{"42d3f345":"code","2449c6d1":"code","4a84c660":"code","0b97c3a4":"code","d452d141":"code","37fefb1d":"code","4a309c3b":"code","d69c785b":"code","3774d612":"code","2cd03b11":"code","63fef623":"code","ff4a6592":"code","05513454":"code","c9a372c0":"code","fddb5044":"code","681325af":"code","e68c024d":"code","6e3c3356":"code","a6d657b9":"code","a355746e":"markdown","94748f5f":"markdown","0700d2ba":"markdown","f03dbbeb":"markdown","4ee81fef":"markdown","3d238368":"markdown","d986d8d0":"markdown"},"source":{"42d3f345":"import os\n\n\nimport random\nimport seaborn as sns\nimport cv2\n\n# General packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport PIL\nimport IPython.display as ipd\nimport glob\nimport h5py\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom PIL import Image\nfrom tempfile import mktemp\n\nfrom bokeh.plotting import figure, output_notebook, show\nfrom math import pi\n\noutput_notebook()\n\n\nfrom IPython.display import Image, display\nimport warnings\nwarnings.filterwarnings(\"ignore\")","2449c6d1":"os.listdir('..\/input\/landmark-retrieval-2021\/')","4a84c660":"DATASET_DIR = '..\/input\/landmark-retrieval-2021\/'\n\nTRAIN_IMAGE_DIR = f'{DATASET_DIR}\/train'\nTEST_IMAGE_DIR = f'{DATASET_DIR}\/test'\ntrain = pd.read_csv(f'{DATASET_DIR}\/train.csv')\nSUB = pd.read_csv(f'{DATASET_DIR}\/sample_submission.csv')","0b97c3a4":"display(train.head())\nprint(\"Shape of train_data :\", train.shape)","d452d141":"landmark = train.landmark_id.value_counts()\nlandmark_df = pd.DataFrame({'landmark_id':landmark.index, 'frequency':landmark.values}).head(30)\n\nlandmark_df['landmark_id'] =   landmark_df.landmark_id.apply(lambda x: f'landmark_id_{x}')\n\nfig = px.bar(landmark_df, x=\"frequency\", y=\"landmark_id\",color='landmark_id',\n             hover_data=[\"landmark_id\", \"frequency\"],\n             height=1000,\n             title='Number of images per landmark_id (Top 30 landmark_ids)',\n             color_discrete_sequence=px.colors.sequential.RdBu)\nfig.show()","37fefb1d":"landmark.hist()","4a309c3b":"#Landmark ID distribution\nplt.figure(figsize = (10, 8))\nplt.title('Landmark ID Distribuition')\nsns.distplot(train['landmark_id'])\n\nplt.show()","d69c785b":"sns.set()\nplt.title('Training set: number of images per class(line plot)')\nsns.set_color_codes(\"pastel\")\nlandmarks_fold = pd.DataFrame(train['landmark_id'].value_counts())\nlandmarks_fold.reset_index(inplace=True)\nlandmarks_fold.columns = ['landmark_id','count']\nax = landmarks_fold['count'].plot(logy=True, grid=True)\nlocs, labels = plt.xticks()\nplt.setp(labels, rotation=30)\nax.set(xlabel=\"Landmarks\", ylabel=\"Number of images\")\nplt.show()","3774d612":"# Visualize outliers, min\/max or quantiles of the landmarks count\nsns.set()\nax = landmarks_fold.boxplot(column='count')\nax.set_yscale('log')","2cd03b11":"train.landmark_id.nunique()","63fef623":"landmark[:5]","ff4a6592":"landmark.describe()","05513454":"landmark[landmark < 100].shape","c9a372c0":"landmark.shape","fddb5044":"import PIL\nfrom PIL import Image, ImageDraw\n\n\ndef display_images(images, title=None): \n    \"\"\"\n    func for display images \n    Thank you @rohitsingh9990 for this fucntion\n    \"\"\"\n    f, ax = plt.subplots(5,5, figsize=(18,22))\n    if title:\n        f.suptitle(title, fontsize = 30)\n\n    for i, image_id in enumerate(images):\n        image_path = os.path.join(TRAIN_IMAGE_DIR, f'{image_id[0]}\/{image_id[1]}\/{image_id[2]}\/{image_id}.jpg')\n        image = Image.open(image_path)\n        \n        ax[i\/\/5, i%5].imshow(image) \n        image.close()       \n        ax[i\/\/5, i%5].axis('off')\n\n        landmark_id = train[train.id==image_id.split('.')[0]].landmark_id.values[0]\n        ax[i\/\/5, i%5].set_title(f\"ID: {image_id.split('.')[0]}\\nLandmark_id: {landmark_id}\", fontsize=\"12\")\n\n    plt.show() ","681325af":"samples = train.sample(25).id.values\ndisplay_images(samples, 'Random')","e68c024d":"samples = train[train.landmark_id == 138982].sample(25).id.values\ndisplay_images(samples, 'Top 1')","6e3c3356":"samples = train[train.landmark_id == 126637].sample(25).id.values\ndisplay_images(samples, 'Top 2')","a6d657b9":"samples = train[train.landmark_id == 20409].sample(25).id.values\ndisplay_images(samples, 'Top 3')","a355746e":"# Info\n\n\nSubmissions are given 12 hours to run, as compared to the site-wide session limit of 9 hours. While your commit must still finish in the 9 hour limit in order to be eligible to submit, the rerun may take the full 12 hours.\n\n* train.csv: This file contains, ids and targets\n - id: image id\n - landmark_id: target landmark id\n ","94748f5f":"- There are 81313 unique landmark_ids","0700d2ba":"- There is only one landmark which has more than 2300 images (landmark_id: 138982)","f03dbbeb":"\n- Out of 81313, there are 79298 (97.5%) landmark_ids with less than 100 images.","4ee81fef":"- Number of images per landmark_id ranges from 2 to 6272.\n- median is 9, mean is 19\n","3d238368":"# Visualizing","d986d8d0":"# Introduction\n\nWelcome to the fourth Landmark Retrieval competition! This year, we introduce a lot more diversity in the challenge\u2019s test images in order to measure global landmark retrieval performance in a fairer manner. And following last year\u2019s success, we set this up as a code competition.\n\nImage retrieval is a central problem in computer vision, relevant to many applications. The problem is usually posed as follows: given a query image, can you find similar images in a large database? This is especially important for query images containing landmarks, which accounts for a large portion of what people like to photograph.\n\n> In this competition, you are asked to develop models that can efficiently retrieve landmark images from a large database. The training set is available in the train\/ folder, with corresponding landmark labels in train.csv. The query images are listed in the test\/ folder, while the \"index\" images from which you are retrieving are listed in index\/. Each image has a unique id. Since there are a large number of images, each image is placed within three subfolders according to the first three characters of the image id (i.e. image abcdef.jpg is placed in a\/b\/c\/abcdef.jpg)."}}