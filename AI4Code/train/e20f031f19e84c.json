{"cell_type":{"4dde20a9":"code","f26f8720":"code","a6730e6b":"code","21582c48":"code","92956657":"code","ef6f0cc9":"code","d5d1d3a5":"code","315d0187":"code","efad88bc":"code","22f57a7d":"code","1396bf49":"code","36092639":"code","10a8299b":"code","93c4bcc5":"code","ac742011":"code","b22cf28f":"code","f5038674":"code","6f27a772":"code","761b6de8":"code","5943de18":"code","8a2406f1":"code","de989c20":"code","94887975":"code","a4928c73":"markdown","af429b7b":"markdown","ea754978":"markdown","3a6739a4":"markdown","dc4c7711":"markdown","51455b67":"markdown","9821edaf":"markdown","725ad54d":"markdown","74fa897f":"markdown","192aeabc":"markdown","a1eb5ce3":"markdown"},"source":{"4dde20a9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f26f8720":"# Here I've just copy\/past the link to the competition datas\n# from the left pannel when you're on editing mode\n# It's in Data, then you click on the datas folder, and put the mouse over a file,\n# a copy\/pasta icon appears, just have to click on it\ntrain_datas = pd.read_csv('..\/input\/hec-dataminds-internal-mnist-compet\/train.csv')","a6730e6b":"train_datas.to_numpy()[0,1:].reshape((28,28)).shape","21582c48":"train_datas.to_numpy()[0,1:].reshape((28,28))","92956657":"import matplotlib.pyplot as plt \nplt.imshow(train_datas.to_numpy()[0,1:].reshape((28,28)), cmap='Greys')\n","ef6f0cc9":"def display_image_in_actual_size(im):\n    dpi = 80\n    im_data = im\n    (height, width), depth = im_data.shape, 1\n\n    # What size does the figure need to be in inches to fit the image?\n    figsize = width \/ float(dpi), height \/ float(dpi)\n\n    # Create a figure of the right size with one axes that takes up the full figure\n    fig = plt.figure(figsize=figsize)\n    ax = fig.add_axes([0, 0, 1, 1])\n\n    # Hide spines, ticks, etc.\n    ax.axis('off')\n\n    # Display the image.\n    ax.imshow(im_data, cmap='Greys')\n\n    plt.show()","d5d1d3a5":"display_image_in_actual_size(train_datas.to_numpy()[2,1:].reshape((28,28)))","315d0187":"train_datas","efad88bc":"X = train_datas.values[:, 1:]\nX","22f57a7d":"Y = train_datas.values[:, 0]\nY","1396bf49":"X = train_datas.values[:, 1:]\/255 # that's the only preprocessing I've done in this notebook\n# I've just divided grays pixels by their maximum value, so every pixel is between 0 and 1\n# So X contains all the pixels vectors of all the training datas\nY = train_datas.values[:, 0] # Here I only take the number the images represent","36092639":"X.shape, Y.shape # just checking the shape of the tensors","10a8299b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.1, random_state=42)","93c4bcc5":"from sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(random_state=42, max_iter=500).fit(X_train, y_train)","ac742011":"clf.score(X_test, y_test) # let's see our score on the validation dataset we've just created","b22cf28f":"test_datas = pd.read_csv('..\/input\/hec-dataminds-internal-mnist-compet\/test.csv')","f5038674":"test_datas","6f27a772":"test_datas = test_datas.values # let's transform the pandas dataframe into a numpy matrix","761b6de8":"predictions = clf.predict(test_datas) # let's predict the numbers display by the images\n# contained in the test dataset","5943de18":"sample_submission = pd.read_csv('..\/input\/hec-dataminds-internal-mnist-compet\/sample_submission.csv')","8a2406f1":"sample_submission","de989c20":"sample_submission['Category'] = predictions # we comlete ","94887975":"sample_submission.to_csv('\/kaggle\/working\/sample_submission.csv', index=False)","a4928c73":"# Now we need to predict the test dataset and save it\nso that you can submit it to kaggle to be ranked according to the score you'll get.\n\nSo in the datas automatically imported when creating a notebook in the way described above, you have test.csv, which contains images but without their labels. Kaggel knows their label, and you have to predict them with a model.\n\nYou also have a file called sample_submission.csv, wich is a file you have to complete with your predictions and send to kaggle.","af429b7b":"# The end !\nThere is still some little things to do in order to submit this file to the competition, when it's your notebook.\n\nWhen you're on editing mode, you have to click on \"Save Version\" and select \"Save & Run All (Commit)\".\n\nWhen it's done, you have to find again your notebook on kaggle, and on reading mode click on the three dots next to the title of the notebook and click on \"Submit to competition\". And you're done, you've submitted the predictions done by your model. You'll be ranked against the others from KD that have done it.\n\nYou can send up to 5 predictions each day. If you want to send more, ask me.\n\nFeel free to \"Copy & Edit\" this notebook, there is lot of room to improve the predictions.","ea754978":"Let's see how the test dataset looks like","3a6739a4":"Alright, same as train dataset but without the label column","dc4c7711":"Now let's train our model, which is a simple logistic regression.","51455b67":"Now we just have to load sample_submission.csv, complete it and save it","9821edaf":"How does the training dataset looks like ?","725ad54d":"We can see that the first column are the labels. Those labels are actually the number the image is containing.\n\nAll the remaining columns are the grey pixels of the image.\n\nMaybe you wonder why all the pixels are on one vector only, not structured in a matrix. That's how it is, don't ask questions ! But I've just took all the lines of the pixel matrix of the images and put them one after the other.\n\nHowever most models take as input vectors, the only models I know that take matrices as input are Convolutional neural networks. If you plan on using them for this competition, you'll therefore need to preprocess a little bit more the datas.\n\nOtherwise letting the pixels in a vector just is the right thing to do.","74fa897f":"# Loading of the training dataset and a little bit of preprocessing \nIt kaggle, when you've joined a competition and when you're on the notebook section, you can create a notebook for this competition. Kaggle will automatically load all the competition datas you need. You can see those datas in the left pannel, when you're on editing mode, or below, when you're on reading mode.","192aeabc":"# Let's train a very basic model\nFirst we need to separate the training datas into a training dataset and a validation dataset. That's what train_test_split is for.","a1eb5ce3":"# Introduction\nHey everyone, this is Joseph, again. So this is a starter notebook. It contains :\n* The loading of the training dataset\n* The training of a logistic regression\n* The loading of the submission dataset (called test.csv)\n* And the creation of the submission dataset with the logistic regression model trained"}}