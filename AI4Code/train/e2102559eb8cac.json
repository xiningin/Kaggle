{"cell_type":{"f4cab3f7":"code","ac1d7640":"code","b7dfb3ca":"code","efb4c7ba":"code","648ef7f8":"code","4e3c4a90":"code","a4bc483e":"code","77d900d9":"code","e0e1da34":"code","418effee":"code","a78f8ed2":"code","9005ce0c":"code","e8ae909f":"code","80dfb9a2":"code","1211e84a":"code","bc77559a":"code","913f5d55":"code","be4dcd4d":"code","44ca5f6b":"code","6f034b2c":"code","0824e59e":"code","0417b3a5":"code","f688aa50":"code","8ac17b41":"markdown","9affbaf6":"markdown","ae4cf807":"markdown","74f8216c":"markdown","8dacc4bc":"markdown","69e64078":"markdown","73b05a96":"markdown","056a255c":"markdown","5f6bf082":"markdown","8cfc3a6e":"markdown","2aa61494":"markdown"},"source":{"f4cab3f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# charts\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nimport matplotlib\nimport squarify #TreeMap\n\n# import graph objects as \"go\"\n\nimport plotly.graph_objs as go\n\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ac1d7640":"train = pd.read_csv(\"\/kaggle\/input\/google-quest-challenge\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/google-quest-challenge\/test.csv\")","b7dfb3ca":"train.head()","efb4c7ba":"test.head()","648ef7f8":"train.info()","4e3c4a90":"test.info()","a4bc483e":"len(train[\"category\"].unique())\nsns.countplot(train[\"category\"])","77d900d9":"def lengthdataframe(data) :\n    df_temp = [len(x) for x in data['question_title']]\n    df_length = pd.DataFrame(data= df_temp, columns=[\"len_Question Title\"])\n    df_length['len_question_body'] = [len(x) for x in data['question_body']]\n    df_length['len_answer'] = [len(x) for x in data['answer']]\n    return df_length\n","e0e1da34":"def custom_distplot(dataframe_length) :\n    fig, axes = plt.subplots(ncols=len(dataframe_length.columns), nrows=1,figsize=(15,3))\n    for column, ax in zip(dataframe_length.columns, axes.flat):\n        sns.distplot(dataframe_length[column],  ax=ax)\n    plt.show()","418effee":"dftrain_length_QA = lengthdataframe(train)\ncustom_distplot(dftrain_length_QA)","a78f8ed2":"dftest_length_QA = lengthdataframe(test)\ncustom_distplot(dftest_length_QA)","9005ce0c":"dftrain_length_QA.describe()","e8ae909f":"dftest_length_QA.describe()","80dfb9a2":"train[\"host\"].unique()","1211e84a":"host = train.groupby(\"host\").agg({'qa_id' : 'count'}).nlargest(20, 'qa_id')\nhost = host.sort_values(by='qa_id')\nvalue=np.array(host)\n#label=[df_dept.loc[x][\"department\"] for x in dept.index]\nlabel= [x.split(\".\")[1]+ \"(\" +str(host.loc[x].qa_id)+\")\" if \"meta.\" in x else str(x.split(\".\")[0])+ \"(\" +str(host.loc[x].qa_id)+\")\"  for x in host.index ]\n\n# create a color palette, mapped to these values\ncmap = matplotlib.cm.CMRmap\nmini=min(value)\nmaxi=max(value)\nnorm = matplotlib.colors.Normalize(vmin=mini, vmax=maxi)\ncolors = [cmap(norm(values)) for values in value]\n\n\nplt.style.use('ggplot')\nplt.rcParams['figure.figsize'] = (10.0, 10.0)\nsquarify.plot(sizes=value, label=label, alpha=.8)\nplt.axis('off')\nplt.show()","bc77559a":"categorical = train.columns[(train.dtypes.values == np.dtype('float64'))]\ncategorical","913f5d55":"fig, axes = plt.subplots(ncols=int(len(categorical)\/6), nrows=6,figsize=(25,25))\nfor column, ax in zip(categorical, axes.flat):\n    sns.distplot(train[column],  ax=ax)\nplt.show()","be4dcd4d":"train[categorical].describe()","44ca5f6b":" result = pd.concat([train[categorical], dftrain_length_QA], axis=1, sort=False)","6f034b2c":"f,ax = plt.subplots(figsize=(16, 16))\nsns.heatmap(result.corr(method ='pearson'),annot=True,fmt= '.1f', ax=ax )","0824e59e":"from wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='black',\n        stopwords=stopwords,\n        max_words=200,\n        max_font_size=40, \n        scale=3,\n        random_state=1 \n).generate(str(data))\n    return wordcloud","0417b3a5":"categories = train[\"category\"].unique()","f688aa50":"fig, axes = plt.subplots(ncols=2, nrows=3,figsize=(30,25))\nplt.axis('off')\nfor category, ax in zip(categories, axes.flat):\n    wordcloud = show_wordcloud(train[train[\"category\"]==category]['question_title'])\n    ax.imshow(wordcloud)\n    ax.title.set_text(category)\n    ax.axis('off')\nplt.subplots_adjust(wspace=0.05, hspace=0.01)","8ac17b41":"# **Sneak Peak in Data**","9affbaf6":"   ![Thank You](https:\/\/tricksbystg.org\/wp-content\/uploads\/2018\/04\/Thanks-gif-1.gif)","ae4cf807":"# **Reading Data**","74f8216c":"**Correlation - Length of Q&A vs Output**","8dacc4bc":"**More to Come **\n\n**please Upvote to Encourage **\n\n![](https:\/\/static2.proactiveinvestors.co.uk\/thumbs\/upload\/News\/Image\/2019_08\/672z311_1566568270_2019-08-23-14-51-10_743428f5cc30f464556b0ee235f06a3d.jpg)\n","69e64078":"# **Data distribution** - Based on host","73b05a96":"# **Data From Eagle View**","056a255c":"# **Data distribution** - A look at output","5f6bf082":"# **Creating WordCloud Based on the Category**","8cfc3a6e":"**Data distribution** - based on category","2aa61494":"**Data distribution** - length of Q&A"}}