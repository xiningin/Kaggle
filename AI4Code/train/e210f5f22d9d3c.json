{"cell_type":{"986830c8":"code","ffd4890e":"code","bbd23bb8":"code","584eb91a":"code","cf331488":"code","f2b6e1f7":"code","0a89d1b6":"code","62b467a6":"code","dbd2c7bd":"code","e337d0a9":"code","b6438e98":"code","1a39ec15":"code","c8fc6dcf":"code","bca8e747":"code","675d78c3":"code","414a2522":"code","94c37776":"code","ae68fe0a":"code","2b971213":"code","3f3d8f3c":"code","ce06ec19":"code","7427b2cd":"code","f3041cc1":"code","927ada4f":"code","83716ece":"code","ae8791cd":"code","4010809e":"code","a5eec2e3":"code","fe049e5f":"code","d2a258f2":"code","c0cd51ad":"code","1f1b18fd":"code","e28f03af":"markdown","6736b2ab":"markdown","3bec2f50":"markdown","f7187839":"markdown","0d985af0":"markdown","e8704bb0":"markdown","d846a9dd":"markdown","399f05fe":"markdown","01009a81":"markdown","bed2584a":"markdown","8d663cb7":"markdown","eed9f689":"markdown","8f79542e":"markdown","17e7947b":"markdown","27649b50":"markdown","81fece16":"markdown","a4640b6a":"markdown","9c03286c":"markdown","eff37578":"markdown","d96d49cc":"markdown"},"source":{"986830c8":"# Nativos\nimport os\nimport sys\n\n#calculo\nimport numpy as np\nimport pandas as pd\n\n#modelamiento\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import MinMaxScaler, PolynomialFeatures, StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.feature_selection import SelectKBest, chi2, f_classif, SelectFromModel, VarianceThreshold\nimport xgboost as xgb\nfrom sklearn import svm\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.feature_selection import RFE\nimport category_encoders as ce\n\n#grafico\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display\n%matplotlib inline\nsns.set(style=\"whitegrid\")\n\n#warning ignore future\nimport warnings\n# warnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.filterwarnings(\"ignore\")\n\nsubfolder = \"..\/input\"\nprint(os.listdir(subfolder))","ffd4890e":"set_parameter_csv = {\n    'sep': ',',\n    'encoding': 'ISO-8859-1',\n    'low_memory': False\n}\n\ntrain = pd.read_csv('{}\/churn_data_train.csv'.format(subfolder), **set_parameter_csv).round(2)\ndisplay(train.head(3))\ntest = pd.read_csv('{}\/churn_data_test.csv'.format(subfolder), **set_parameter_csv).round(2)\ndisplay(test.head(3))\nsub = pd.read_csv('{}\/sample_submit.csv'.format(subfolder), **set_parameter_csv)\ndisplay(sub.head(3))","bbd23bb8":"# CHECK COLUMNS\nprint(train.columns)\nprint(\"=\"*100)\nprint(test.columns)","584eb91a":"def view_cat(data, col_init, col_out, **kwargs):\n    color_label = kwargs.get('color_label', 'black')\n    fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 5))\n    \n    cross = pd.crosstab(data[col_out], data[col_init])\n    sum_total = sum([cross[col].sum() for col in cross.columns])\n    sns.heatmap(\n        cross\/sum_total, \n        annot=True, ax=axes[0], center=0, cmap=\"YlGnBu\", fmt='.2%'\n    )\n    sns.barplot(\n        x=col_init, y=col_out, data=data, ax=axes[1]\n    )\n\ndef view_numeric(data, col_init, col_out, **kwargs):\n    color_label = kwargs.get('color_label', 'black')\n    bins = kwargs.get('bins', 3)\n    fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 5))\n\n    sns.violinplot(x=col_out, y=col_init, data=data, ax=axes[0])\n    sns.distplot(data[col_init], ax=axes[1])","cf331488":"# CHECK NULL\ndef search_null(data):\n    return data.isnull().sum().where(lambda _ : _ > 0).dropna()\n\ndisplay(search_null(train))\nprint(\"\/\"*55)\ndisplay(search_null(test))","f2b6e1f7":"# CHECK ORDER OF NULLS\nimport missingno as msno\n\nmsno.matrix(train)","0a89d1b6":"msno.matrix(test)","62b467a6":"def correct_string_null(val):\n    try:\n        return float(val)\n    except:\n        return float(np.nan)\n    \ntrain['MontoCargadoTotal'] = train['MontoCargadoTotal'].apply(correct_string_null)\ntest['MontoCargadoTotal'] = test['MontoCargadoTotal'].apply(correct_string_null)","dbd2c7bd":"mode_adultomayor = train['AdultoMayor'].mode()[0]\n\ntrain['AdultoMayor'].fillna(mode_adultomayor, inplace=True)\ntest['AdultoMayor'].fillna(mode_adultomayor, inplace=True)\n\ntrain['AdultoMayor'] = train['AdultoMayor'].astype(str)\ntest['AdultoMayor'] = test['AdultoMayor'].astype(str)\n\ntrain['AdultoMayor'].value_counts(dropna=False)","e337d0a9":"display(train.describe().T)\ndisplay(test.describe().T)","b6438e98":"cols_str = list(test.describe(include=['object', 'bool']).columns[1:])\nprint(cols_str)","1a39ec15":"cols_num = list(test.describe().columns)\nprint(cols_num)","c8fc6dcf":"for col in cols_str:\n    print(\"%%%%% \", col)\n    display(train.groupby(by=[col])[cols_num].agg(['mean', 'median', 'min', 'max']))","bca8e747":"col_target = 'Churn'\n\nfor val in train['Socio'].unique():\n    sub_train = train[train['Socio'] == val][col_target]\n    print(val, sub_train.shape)\n    display(sub_train.value_counts(dropna=False, normalize=True))","675d78c3":"def replace_null_socio(val, mes_cliente):\n    if str(val).lower() == 'nan':\n        return 'Si' if mes_cliente < 20 else 'No'\n    \n    return val\n\ntrain['Socio'] = train[['Socio', 'MesesCliente']].apply(\n    lambda _: replace_null_socio(_.Socio, _.MesesCliente), axis=1\n)\ntest['Socio'] = test[['Socio', 'MesesCliente']].apply(\n    lambda _: replace_null_socio(_.Socio, _.MesesCliente), axis=1\n)","414a2522":"def repplace_null_col_numeric(val, es_socio, serie_replace):\n    if str(val).lower() == 'nan':\n        return serie_replace[es_socio]\n    return val\n\nfor col in cols_num:\n    median_socio = train.groupby(by=['Socio'])[col].median()\n    print(col)\n    display(median_socio)\n    \n    train[col] = train[[col, 'Socio']].apply(\n        lambda _: repplace_null_col_numeric(_[col], _.Socio, median_socio), axis=1\n    )\n    test[col] = test[[col, 'Socio']].apply(\n        lambda _: repplace_null_col_numeric(_[col], _.Socio, median_socio), axis=1\n    )\n    view_numeric(train, col, 'Churn')","94c37776":"# ADD NEW VAR 'deuda'\ntrain['deuda'] = train[['MesesCliente', 'MontoCargadoMes', 'MontoCargadoTotal']].apply(\n    lambda _: _.MesesCliente * _.MontoCargadoMes - _.MontoCargadoTotal, axis=1\n)\ntest['deuda'] = test[['MesesCliente', 'MontoCargadoMes', 'MontoCargadoTotal']].apply(\n    lambda _: _.MesesCliente * _.MontoCargadoMes - _.MontoCargadoTotal, axis=1\n)","ae68fe0a":"# ADD NEW VAR CATEGORYC 'MesesCliente_cat'\ndef meses_to_cat(val):\n    if val <= 3:\n        return 'nuevo'\n    elif val <= 10:\n        return 'reciente'\n    elif val <= 30:\n        return 'normal'\n    else:\n        return 'amtiguo'\n\ntrain['MesesCliente_cat'] = train['MesesCliente'].apply(meses_to_cat)\ntest['MesesCliente_cat'] = test['MesesCliente'].apply(meses_to_cat)","2b971213":"for col in cols_num:\n    if col != 'deuda':\n        train[col + '_log'] = np.log(train[col])\n        test[col + '_log'] = np.log(test[col])","3f3d8f3c":"def meses_log_to_cat(val):\n    if val < 4:\n        return 'nuevo'\n    else:\n        return 'amtiguo'\n\ntrain['MesesCliente_cat'] = train['MesesCliente_log'].apply(meses_log_to_cat)\ntest['MesesCliente_cat'] = test['MesesCliente_log'].apply(meses_log_to_cat)","ce06ec19":"def total_to_cat(val):\n    if val < 30:\n        return 'menor30'\n    if val < 70:\n        return 'menor60'\n    else:\n        return 'mayor70'\n\ntrain['MontoCargadoMes_cat'] = train['MontoCargadoMes'].apply(total_to_cat)\ntest['MontoCargadoMes_cat'] = test['MontoCargadoMes'].apply(total_to_cat)","7427b2cd":"def monto_total_to_cat(val):\n    if val < 1500:\n        return 'menor1500'\n    elif val < 3000:\n        return 'menor3000'\n    else:\n        return 'mayo3000'\n\ntrain['MontoCargadoTotal_cat'] = train['MontoCargadoTotal'].apply(monto_total_to_cat)\ntest['MontoCargadoTotal_cat'] = test['MontoCargadoTotal'].apply(monto_total_to_cat)","f3041cc1":"display(train.drop(['ID'], axis=1).describe(include=['object', 'bool']).T)\ndisplay(test.drop(['ID'], axis=1).describe(include=['object', 'bool']).T)","927ada4f":"cols_same_nan = ['SeguridadOnline','RespaldoOnline','ProteccionDispositivo',\n                 'SoporteTecnico','TransmisionTV', 'TransmisionPeliculas']\n\nfor col in cols_str:\n    if col in cols_same_nan:\n        train[col].fillna('lostdata', inplace=True)\n        test[col].fillna('lostdata', inplace=True)\n    else:\n        val_mode = train[col].mode()[0]\n        train[col].fillna(val_mode, inplace=True)\n        test[col].fillna(val_mode, inplace=True)\n        \n    view_cat(train, col, 'Churn')","83716ece":"cols_same_nan = ['SeguridadOnline','RespaldoOnline','ProteccionDispositivo',\n                 'SoporteTecnico', 'TransmisionPeliculas', 'TransmisionTV']\n\ntrain_no_servico = train[train['ServicioInternet'] == 'No']\n\nfor col in cols_same_nan:\n    display(train_no_servico[col].value_counts(dropna=False))\n    print(\"\/\"*100)","ae8791cd":"def fix_cols_same_nan(val):\n    if val in ['Sin servicio de internet', 'lostdata']:\n        return 'NotieneInternet'\n    return val\n\nfor col in cols_same_nan:\n    train[col] = train[col].apply(fix_cols_same_nan)\n    test[col] = test[col].apply(fix_cols_same_nan)","4010809e":"for col in cols_str:\n    tmp_group_by = train.groupby([col])['MontoCargadoMes'].median().round(3)\n    display(tmp_group_by)\n    \n    col_flg = 'flg_{}_mayorMedianMontoMes'.format(col)\n    train[col_flg] = train.apply(\n        lambda x: 1 if x.MontoCargadoMes >= tmp_group_by[x[col]] else 0, axis = 1)\n\n    test[col_flg] = test.apply(\n        lambda x: 1 if x.MontoCargadoMes >= tmp_group_by[x[col]] else 0, axis = 1)","a5eec2e3":"cols_dummies_one = ['FacturacionElectronica', 'Sexo', 'ServicioTelefonico', 'LineasMultiples',\n                    'AdultoMayor', 'Socio', 'Dependientes', 'TransmisionTV', 'TransmisionPeliculas']\n\ntrain = pd.get_dummies(train, drop_first=True, columns=cols_dummies_one)\ntest = pd.get_dummies(test, drop_first=True, columns=cols_dummies_one)\ntrain.shape, test.shape","fe049e5f":"cols_dummies_many = ['MetodoPago', 'TerminoContrato', 'SoporteTecnico', 'SeguridadOnline', 'RespaldoOnline',\n                    'ProteccionDispositivo']\n\ntrain = pd.get_dummies(train, drop_first=False, columns=cols_dummies_many)\ntest = pd.get_dummies(test, drop_first=False, columns=cols_dummies_many)\ntrain.shape, test.shape","d2a258f2":"col_wctm = 'deuda'\ny_train = train[col_target]  \nX_train = train.drop(['ID', 'Churn', col_wctm], axis=1).reset_index(drop=True)\nX_test = test.drop(['ID', col_wctm], axis=1).reset_index(drop=True)\n\ndel train\ndel test\nX_train.shape, X_test.shape, y_train.shape","c0cd51ad":"te = ce.target_encoder.TargetEncoder(\n    drop_invariant=True, return_df=True\n)\n    \nX_train = te.fit_transform(X_train, y_train)\nX_test = te.transform(X_test)\nX_train.shape, X_test.shape, y_train.shape","1f1b18fd":"X_train.dtypes","e28f03af":"## IDENTIFICACI\u00d3N DE VARIABLES CON IGUAL ORDEN DE VALORES NULOS E IMPUTAR ACORDE A ESTE CRITERIO","6736b2ab":"## DECLARE FUNCTIONS FOR VISUALIZATIONS","3bec2f50":"## CORRECTION OF MALFORMED DATA","f7187839":"## \"De  lo anterior se concluye que la varianza tanto en las variables numericas como en el target se evidencia con mayor enfasis en la variable socio\"","0d985af0":"## ADDING NEW VARIABLES FROM NUMERICAL VARIABLES","e8704bb0":"## \"ESO ES TODO AMIGOS\"\n\n### PSDTA: En la primera linea veras muchas herramientas no usadas, puedas jugar con ellas o mirar la luz.","d846a9dd":"## Imputation de var numeric for colum 'Socio'","399f05fe":"## DESCRIPTIVE ANALYSIS OF CATEGORYC VARIABLES","01009a81":"## NEW CATEGORIES REPLACED BY ITS RATIO","bed2584a":"## MANY DUMMIES","8d663cb7":"## DESCRIPTIVE ANALYSIS OF NUMERICAL VARIABLES","eed9f689":"<img src=\"https:\/\/i.pinimg.com\/originals\/e3\/b9\/bb\/e3b9bb082a14123c7f6d6c66498c5965.gif\" alt=\"Smiley face\" height=\"600\" width=\"600\">","8f79542e":"## Imputation var 'Socio'for column 'MesCliente'","17e7947b":"## ANALYZING THE CASES OF EQUAL ORDER OF NULL","27649b50":"## IMPUTATION CATEGORYC 'ADULTO MAYOR'","81fece16":"## ONLY ONE DUMMIE","a4640b6a":"## \"Se concluye que los casos de igual orden de nulos coinciden con el caso de no poseer INTERNET, por lo cual se procede a fusionar estos 2 tipos de categorias\"","9c03286c":"## ANALYSIS OF THE BEHAVIOR OF NUMERICAL VARIABLES ACCORDING TO CATEGORIES","eff37578":"## LOAD DATA","d96d49cc":"## ADDING NEW VARIABLES FROM CATEGORYC VARIABLES"}}