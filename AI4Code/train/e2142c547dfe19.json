{"cell_type":{"686f1225":"code","e4bac9ec":"code","a9f3c4d3":"code","3fc98dab":"code","59660e44":"code","4ed31a41":"code","08a712e9":"code","eda3fbcf":"code","bfc73a2a":"code","405dba0b":"code","6396abd4":"code","d80ffa66":"code","13d7df1e":"code","f502574b":"code","bd160261":"code","f36edd8b":"code","45f0a18d":"code","2e92073a":"code","815faadc":"code","3719bf6b":"code","93231129":"code","5ca15d5c":"code","7d46bd6c":"code","9f1ac466":"code","435bd445":"code","83f8065e":"code","7868b3f1":"code","76bd8bea":"code","89292c7c":"code","cbfb68a0":"code","62f9ef3d":"code","777fb549":"code","6ea7fb2f":"code","452eb969":"code","cf9fb9a8":"code","ecfedc96":"code","e26614b1":"code","f84bb248":"code","bf105727":"code","5ecbb3c0":"code","a8a3348b":"code","e5f7b777":"code","78f7f609":"code","8eb11fbd":"code","0e45d83c":"code","89a3f1fe":"code","4972ce93":"code","0d2a0e60":"code","ceaff714":"code","818a23c4":"code","47caf7b7":"code","462c00d8":"code","2ccf611a":"code","64c88135":"code","b5ce4df5":"code","c621a622":"code","0af02fa5":"code","5f7ff4f9":"code","8b8f4d0a":"code","cf183140":"code","6522208e":"code","8fcd51ae":"code","37d07341":"code","080b0aa8":"code","f4cc5f62":"code","c1692efe":"code","054b3377":"code","c8502972":"code","5592122a":"code","64d44dd6":"code","ef2742bd":"code","175b3b99":"code","503eea2c":"code","6a5772bb":"code","f4556b85":"code","48f5020a":"code","03278e8c":"code","a28c97ba":"code","abf1de8d":"code","6fd5716c":"code","24a307c9":"code","4ffa9aac":"code","0fe844a8":"code","1bb18bb3":"markdown","18e6d577":"markdown","a355df67":"markdown","239bc19f":"markdown","71c52741":"markdown","3822094a":"markdown","307e4db1":"markdown","4f9966d5":"markdown","d76a7d85":"markdown","6905cc3e":"markdown","29d2b28e":"markdown","dec7bf8a":"markdown","45794340":"markdown","ce0c7fe3":"markdown","0815501f":"markdown"},"source":{"686f1225":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","e4bac9ec":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","a9f3c4d3":"df_train.describe(include='O')","3fc98dab":"df_train.describe()","59660e44":"df_train.info()","4ed31a41":"df_train = df_train[df_train['LotArea']<15000]","08a712e9":"sns.scatterplot(x='MiscFeature', y='SalePrice', data=df_train)\n#maioria \u00e9 shred, drop","eda3fbcf":"sns.scatterplot(x='Alley', y='SalePrice', data=df_train)\n#poucas variaveis drop","bfc73a2a":"sns.scatterplot(x='PoolQC', y='SalePrice', data=df_train)\n#poucas variaveis, drop","405dba0b":"sns.scatterplot(x='PoolArea', y='SalePrice', data=df_train)\n#poucas variaveis, drop","6396abd4":"sns.scatterplot(x='BsmtCond', y='SalePrice', data=df_train)\n#poucas variaveis, drop","d80ffa66":"df_train['LandSlope'].value_counts()\nsns.scatterplot(x='LandSlope', y='SalePrice', data=df_train)\n#drop n\u00e3o tem muita varia\u00e7\u00e3o","13d7df1e":"df_train['Neighborhood'].value_counts()\nsns.scatterplot(x='Neighborhood', y='SalePrice', data=df_train)","f502574b":"df_train['PoolArea'].value_counts()\n#drop n\u00e3o serve pra nada","bd160261":"df_train['ScreenPorch'].value_counts()","f36edd8b":"df_train['Fence'].value_counts()","45f0a18d":"df_train['SaleCondition'].value_counts()\n","2e92073a":"df_train['LandContour'].value_counts()\n","815faadc":"df_train['Utilities'].value_counts()\n#drop maioria allpub","3719bf6b":"df_train['LotConfig'].value_counts()","93231129":"drop_columns = ['PoolQC','Alley',  'MiscFeature', 'MasVnrArea', 'Fence', 'PoolArea', 'MiscVal', 'FireplaceQu', 'GarageFinish', 'GarageYrBlt', 'Condition1', 'Condition2', 'Utilities', 'LandSlope', 'Street', 'RoofMatl','Exterior1st', 'Exterior2nd', 'PavedDrive', 'Functional', 'Electrical', 'CentralAir', 'Heating', 'RoofStyle', 'LandContour']","5ca15d5c":"for coluna in drop_columns:\n    df_train.drop([coluna], axis=1, inplace=True)","7d46bd6c":"df_train['LotFrontage'].fillna(df_train['LotFrontage'].mean(), inplace=True)","9f1ac466":"df_train['BsmtQual'].fillna('TA', inplace=True)","435bd445":"df_train['BsmtCond'].fillna('TA', inplace=True)","83f8065e":"df_train['BsmtExposure'].fillna('No', inplace=True)","7868b3f1":"df_train['BsmtFinType2'].fillna('Unf', inplace=True)","76bd8bea":"df_train['LotFrontage'].fillna(df_train['LotFrontage'].median(),inplace=True)","89292c7c":"df_train['GarageQual'].fillna('TA', inplace=True)","cbfb68a0":"df_train['GarageType'].fillna('TA', inplace=True)","62f9ef3d":"df_train['MasVnrType'].fillna('None', inplace=True)","777fb549":"df_train['BsmtFinType1'].fillna('Unf', inplace=True)","6ea7fb2f":"df_train.replace({'TA':0}, inplace=True)\ndf_train.replace({'Gd':1}, inplace=True)\ndf_train.replace({'Ex':2}, inplace=True)\ndf_train.replace({'Fa':3}, inplace=True)\ndf_train.replace({'Po':4}, inplace=True)","452eb969":"dumm = ['MSZoning','LotShape', 'LotConfig', 'Neighborhood', 'BldgType','HouseStyle', 'MasVnrType',  'Foundation','BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'GarageType', 'SaleType', 'SaleCondition']","cf9fb9a8":"for variavel in dumm:\n    df_dumm = pd.get_dummies(df_train[variavel])\n    df_train = pd.concat([df_train, df_dumm], axis=1)","ecfedc96":"df_train.reset_index(inplace=True)","e26614b1":"df_train.drop(['index'], axis=1, inplace=True)","f84bb248":"for coluna in dumm:\n    df_train.drop([coluna], axis=1, inplace=True)","bf105727":"df_train.fillna(0,inplace=True)","5ecbb3c0":"X = df_train.drop(['SalePrice'], axis=1)\nY= df_train['SalePrice']","a8a3348b":"X.drop(['2.5Fin'], axis=1, inplace=True)","e5f7b777":"from sklearn.model_selection import train_test_split","78f7f609":"import numpy as np","8eb11fbd":"X_train, x_test, Y_train, y_test =  train_test_split(X, Y, test_size=0.3, random_state=101)","0e45d83c":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom lightgbm import LGBMRegressor\nfrom sklearn.model_selection import RandomizedSearchCV","89a3f1fe":"# dtc = RandomForestRegressor()","4972ce93":"# dtc.fit(X_train, Y_train)","0d2a0e60":"params = {'bootstrap': [True, False],\n 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n 'max_features': ['auto', 'sqrt'],\n 'min_samples_leaf': [1, 2, 4],\n 'min_samples_split': [2, 5, 10],\n 'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]}","ceaff714":"# rf_random = RandomizedSearchCV(estimator = dtc, param_distributions = params, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)","818a23c4":"# rf_random.fit(X_train, Y_train)","47caf7b7":"dtc = LGBMRegressor(n_estimators=800, min_samples_split=2)","462c00d8":"# dtc = RandomForestRegressor(n_estimators=800,min_samples_split=2,min_samples_leaf=1,max_features='sqrt',max_depth=70,bootstrap=False)","2ccf611a":"dtc.fit(X_train, Y_train)","64c88135":"# df_fi = pd.DataFrame()","b5ce4df5":"# df_fi['Feature'] = X_train.columns","c621a622":"# df_fi['Importance'] = dtc.feature_importances_","0af02fa5":"# df_fi.to_excel('feature_importance.xlsx')","5f7ff4f9":"y_pred = dtc.predict(x_test)\ny_pred_train = dtc.predict(X_train)","8b8f4d0a":"from sklearn import metrics\nprint('RMSLE treinamento', metrics.mean_squared_log_error(Y_train, y_pred_train))\nprint('MAE treinamento:', metrics.mean_absolute_error(Y_train, y_pred_train))\nprint('MSE treinamento:', metrics.mean_squared_error(Y_train, y_pred_train))\nprint('RMSE treinamento:', np.sqrt(metrics.mean_squared_error(Y_train, y_pred_train)))\nprint('\\n')\n\nprint('MAE teste:', metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE teste:', metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE teste:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nprint('RMSLE teste', metrics.mean_squared_log_error(y_test, y_pred))","cf183140":"print('RMSLE', metrics.mean_squared_log_error(Y_train, y_pred_train))","6522208e":"drop_columns = ['PoolQC','Alley',  'MiscFeature', 'MasVnrArea', 'Fence', 'PoolArea', 'MiscVal', 'FireplaceQu', 'GarageFinish', 'GarageYrBlt', 'Condition1', 'Condition2', 'Utilities', 'LandSlope', 'Street', 'RoofMatl','Exterior1st', 'Exterior2nd', 'PavedDrive', 'Functional', 'Electrical', 'CentralAir', 'Heating', 'RoofStyle', 'LandContour']","8fcd51ae":"for coluna in drop_columns:\n    df_test.drop([coluna], axis=1, inplace=True)","37d07341":"df_test['LotFrontage'].fillna(df_train['LotFrontage'].mean(), inplace=True)","080b0aa8":"df_test['BsmtQual'].fillna('TA', inplace=True)","f4cc5f62":"df_test['BsmtCond'].fillna('TA', inplace=True)","c1692efe":"df_test['BsmtExposure'].fillna('No', inplace=True)","054b3377":"df_test['BsmtFinType2'].fillna('Unf', inplace=True)","c8502972":"df_test['LotFrontage'].fillna(df_train['LotFrontage'].median(),inplace=True)","5592122a":"df_test['GarageQual'].fillna('TA', inplace=True)","64d44dd6":"df_test['GarageType'].fillna('TA', inplace=True)","ef2742bd":"df_test['MasVnrType'].fillna('None', inplace=True)","175b3b99":"df_test['BsmtFinType1'].fillna('Unf', inplace=True)","503eea2c":"df_test.replace({'TA':0}, inplace=True)\ndf_test.replace({'Gd':1}, inplace=True)\ndf_test.replace({'Ex':2}, inplace=True)\ndf_test.replace({'Fa':3}, inplace=True)\ndf_test.replace({'Po':4}, inplace=True)","6a5772bb":"dumm = ['MSZoning','LotShape', 'LotConfig', 'Neighborhood', 'BldgType','HouseStyle', 'MasVnrType',  'Foundation','BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'GarageType', 'SaleType', 'SaleCondition']","f4556b85":"for variavel in dumm:\n    df_dumm = pd.get_dummies(df_test[variavel])\n    df_test = pd.concat([df_test, df_dumm], axis=1)","48f5020a":"df_test.reset_index(inplace=True)","03278e8c":"df_test.drop(['index'], axis=1, inplace=True)","a28c97ba":"for coluna in dumm:\n    df_test.drop([coluna], axis=1, inplace=True)","abf1de8d":"dtc.fit(X, Y)","6fd5716c":"df_test.fillna(0, inplace=True)","24a307c9":"y_pred = dtc.predict(df_test)","4ffa9aac":"df_sub = pd.DataFrame()\ndf_sub['Id'] = list(df_test['Id'])\ndf_sub['SalePrice'] = y_pred","0fe844a8":"df_sub.to_csv('answer.csv', index=False)","1bb18bb3":"### Feature importance","18e6d577":"# removendo outliers","a355df67":"# Dropando colunas que n\u00e3o fazem sentido no modelo, ao meu ver","239bc19f":"# Dummizando ","71c52741":"# Tratando vazios","3822094a":"# Dummizando test","307e4db1":"# Entendendo variaveis","4f9966d5":"# Tratando vazios no teste","d76a7d85":"# Machine Learning","6905cc3e":"# Usando Valida\u00e7\u00e3o Cruzada","29d2b28e":"# Lendo os dados","dec7bf8a":"# Dropando colunas que n\u00e3o fazem sentido no modelo, ao meu ver","45794340":"# Data View","ce0c7fe3":"# Entendendo os dados","0815501f":"## Predict no teste"}}