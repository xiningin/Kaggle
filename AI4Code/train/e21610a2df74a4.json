{"cell_type":{"abca73b6":"code","72b74beb":"code","43742f87":"code","91f02e4f":"code","6800a530":"code","ebd4cfce":"code","4a2db461":"code","5b2ee303":"code","66c8f4f9":"code","d6a79732":"code","7d6a0907":"code","0a81ab1a":"code","dacf1dc0":"code","105a4c8f":"code","fb1818fa":"code","b882846b":"code","141d0d19":"code","5e2f3376":"code","4b6f21de":"code","03e40d34":"code","921a28f5":"code","d5b5f132":"code","b98699c2":"code","dc200469":"code","fd898225":"code","2be72592":"code","f6993ba0":"code","8174c14e":"code","c3c370eb":"markdown","42660905":"markdown","44bbcfeb":"markdown","e19a4d1e":"markdown","ce0b10ac":"markdown","85fb01eb":"markdown","e1d44558":"markdown","39d9cd66":"markdown","d2283075":"markdown","44c3463e":"markdown","0db8fce7":"markdown","a3b64192":"markdown","7751f071":"markdown","60e845fa":"markdown","a2506f28":"markdown","37460618":"markdown","8c055c16":"markdown","92abea35":"markdown","410dfdf0":"markdown","db1ddd1e":"markdown"},"source":{"abca73b6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","72b74beb":"ipldeliveries = pd.read_csv('..\/input\/ipldata\/deliveries.csv')\niplmatches = pd.read_csv('..\/input\/ipldata\/matches.csv')","43742f87":"ipldeliveries.head()","91f02e4f":"iplmatches.head()","6800a530":"iplmatches.info()\nipldeliveries.info()","ebd4cfce":"iplmatches.isna().sum()","4a2db461":"ipldeliveries.isna().sum()","5b2ee303":"iplmatches.drop('umpire3', axis = 1)","66c8f4f9":"iplmatches[iplmatches['city'].isna()]['venue']\n","d6a79732":"iplmatches['city'].fillna('Dubai', inplace=True)","7d6a0907":"iplmatches.dropna(subset=['winner'], inplace=True)\n","0a81ab1a":"iplmatches[iplmatches['umpire1'].isnull()]","dacf1dc0":"iplmatches.loc[4, 'umpire1'] = 'Virender Sharma'\niplmatches.loc[4, 'umpire2'] = 'Sundaram Ravi'\niplmatches.loc[753, 'umpire1'] = 'Bruce Oxenford'\niplmatches.loc[753, 'umpire2'] = 'Sundaram Ravi'","105a4c8f":"sorted(iplmatches['city'].unique())","fb1818fa":"iplmatches['city'] = iplmatches['city'].replace('Bengaluru', 'Bangalore')","b882846b":"sorted(iplmatches['team1'].unique())\n","141d0d19":"iplmatches = iplmatches.replace('Deccan Chargers', 'Sunrisers Hyderabad')\niplmatches = iplmatches.replace('Delhi Daredevils', 'Delhi Capitals')\niplmatches = iplmatches.replace('Rising Pune Supergiants', 'Rising Pune Supergiant')","5e2f3376":"sorted(iplmatches['team2'].unique())","4b6f21de":"umpires = pd.DataFrame([(umpire, iplmatches[(iplmatches['umpire1']==umpire) | (iplmatches['umpire2']==umpire)].shape[0]) for umpire in pd.unique(iplmatches[['umpire1', 'umpire2']].values.ravel())]).sort_values(1, ascending=False)\numpires.columns = ['Umpire', 'Count']\ntop_10_fav_umpire = umpires[:10]\n\nfig = px.bar(top_10_fav_umpire, x='Umpire', y='Count', color='Umpire', text=top_10_fav_umpire['Count'], title='Top 10 favourite Umpires | 2008-2019')\nfig.update_xaxes(tickangle=90)\nfig.show()","03e40d34":"most_played_in_city = iplmatches['city'].value_counts().reset_index()\nmost_played_in_city.columns = ['City', 'Count']\n\nfig = px.bar(most_played_in_city, x='City', y='Count', text=most_played_in_city['Count'], title='Most to least favourite city that have hosted match | 2008-2019')\nfig.show()\n\nfig = px.pie(most_played_in_city, values='Count', names='City', title='')\nfig.show()","921a28f5":"top_10_played_in_stad = iplmatches['venue'].value_counts()[:10].reset_index()\ntop_10_played_in_stad.columns = ['Venue', 'Count']\n\nfig = px.bar(top_10_played_in_stad, x='Venue', y='Count', color='Venue', title='Top 10 Stadium(Venue) that have hosted IPL match | 2008 - 2019', text=top_10_played_in_stad['Count'])\nfig.update_xaxes(tickangle=90)\nfig.show()","d5b5f132":"team_palyed_wins = pd.DataFrame((team, iplmatches[(iplmatches['team1']==team) | (iplmatches['team2']==team)].shape[0], iplmatches[iplmatches['winner']==team].shape[0]) for team in iplmatches['team1'].unique())\nteam_palyed_wins.columns = ['Team', 'Played_match', 'Wins_match']\nteam_palyed_wins = team_palyed_wins.sort_values(by='Played_match', ascending=False)\n\nteam_palyed_wins['Win_percent'] = round(team_palyed_wins['Wins_match']*100 \/ team_palyed_wins['Played_match'], 2)\nteam_palyed_wins","b98699c2":"fig = px.bar(team_palyed_wins, x=\"Team\", y=\"Win_percent\", text=team_palyed_wins['Win_percent'], color='Team', title=\"Win Percentage | Played vs Win | 2008-2019\")\nfig.update_xaxes(tickangle=90)\nfig.show()","dc200469":"teams = team_palyed_wins['Team'].tolist()\nplayed = team_palyed_wins['Played_match'].tolist()\nwins = team_palyed_wins['Wins_match'].tolist()\n\nfig = go.Figure(data=[\n    go.Bar(name='Played Match', x=teams, y=played, text=played, textposition='auto'),\n    go.Bar(name='Win Match', x=teams, y=wins, text=wins, textposition='auto')\n])\n\nfig.update_layout(barmode='stack', title_text='Played Vs Wins | 2008 - 2019')\nfig.update_xaxes(tickangle=90)\nfig.show()","fd898225":"ipl_winner_by_season = []\n\nfor year in range(2008, 2020):\n    highest_winner = iplmatches[iplmatches['season']==year]['winner'].value_counts()\n    if highest_winner[0]==highest_winner[1]:\n        ipl_winner_by_season.append((highest_winner.index[1], year, highest_winner[1]))\n        \n    ipl_winner_by_season.append((highest_winner.index[0], year, highest_winner[0]))\n\n    \nipl_winner_by_season = pd.DataFrame(ipl_winner_by_season)\nipl_winner_by_season.columns = ['Team', 'Season', 'Wins']\n\n\nfig = px.bar(ipl_winner_by_season, x=\"Team\", y=\"Wins\", color=\"Team\", text=ipl_winner_by_season['Season'], title=\"Maximum Number of Matches Won in each season| 2008-2019\")\nfig.update_xaxes(tickangle=90)\nfig.show()","2be72592":"top_10_player_of_the_match = iplmatches['player_of_match'].value_counts()[:10].reset_index()\ntop_10_player_of_the_match.columns = ['Player', 'Count']\n\nfig = px.bar(top_10_player_of_the_match, x=\"Player\", y=\"Count\", text=top_10_player_of_the_match['Count'], color='Player', title=\"Top 10 Player of the match | 2008-2019\")\nfig.update_xaxes(tickangle=90)\nfig.show()","f6993ba0":"toss_dicision = iplmatches['toss_decision'].value_counts().reset_index()\ntoss_dicision.columns = ['Toss_dicision', 'Count']\n\nfig = px.pie(toss_dicision, values='Count', names='Toss_dicision', title='Toss Dicision')\nfig.show()","8174c14e":"iplmatches = iplmatches.replace({'Feroz Shah Kotla Ground': 'Feroz Shah Kotla'})\niplmatches = iplmatches.replace({'M. Chinnaswamy Stadium': 'M Chinnaswamy Stadium'})\niplmatches = iplmatches.replace({'MA Chidambaram Stadium, Chepauk': 'M. A. Chidambaram Stadium'})\niplmatches = iplmatches.replace({'Punjab Cricket Association Stadium, Mohali': 'Punjab Cricket Association IS Bindra Stadium, Mohali'})\niplmatches = iplmatches.replace({'Rajiv Gandhi Intl. Cricket Stadium': 'Rajiv Gandhi International Stadium, Uppal'})\nteams_playes_in_stadium = {}\n\nfor venue in iplmatches['venue'].unique():\n    for team in iplmatches['team1'].unique():\n        count = iplmatches[(iplmatches['venue']==venue) & ((iplmatches['team1']==team) | (iplmatches['team2']==team))].shape[0]\n        if venue not in teams_playes_in_stadium:\n            teams_playes_in_stadium[venue] = {team: count}\n        else:\n            teams_playes_in_stadium[venue][team] = count\nplt.figure(figsize=(20, 10))\nteams_played_in_stadium = pd.DataFrame(teams_playes_in_stadium).T\nsns.heatmap(teams_played_in_stadium, annot=True)\nplt.show()","c3c370eb":"# ***Lets see win percentage of teams |2008-2019***","42660905":"# ***Lets see which toss decision is more chosen, i.e. to bat or to field***","44bbcfeb":"# ***Lets see top 10 players have won most player of match | 2008-2019***","e19a4d1e":"The issue the with the city names regarding bangalore and bengaluru is in team names too.","ce0b10ac":"Let's see if we have any missing values","85fb01eb":"# ***Number of games played vs Number of games won by teams | 2008-2019***","e1d44558":"Lets fill the null values of umpire by 4 these names based on the google search","39d9cd66":"**For the 7 missing values in city column, the venue is \"Dubai International Cricket Stadium\", so I am goona fill missing values in city column by dubai, google it if you dont belive me ;P**","d2283075":"# ***Lets see the top 10 favourite umpires | 2008-2019***","44c3463e":"# ***Finally lets see which team has most matches in which stadiums***","0db8fce7":"As evident by the above scores we have very few missing values and mostly the missing v alues are in a fewe selected columns.\nLets just apply the preprocessing on iplmatches.\niplmatches has missing values in:\n* City                   7\n* Winner                 4\n* Player of The Match    4\n* Umpire 1               2\n* Umpire 2               2 \n* Umpire 3             637\n\n\nLets take care of those missing values","a3b64192":"# ***Lets see the favourite Cities to host matches | 2008-2019***","7751f071":"***Its always wise to see the first five rows using .head(), it gives a basic insight as what columns are present.***","60e845fa":"This data has matches delivery by delivery (just like the name of dataset suggests)","a2506f28":"Now if you see the city values, its evident that Bangalore and Bengaluru are the same (although the city airport suggests otherwise :P)\nSo Lets deal with that ","37460618":"# ***Lets analyse which team has highest win percentage***","8c055c16":"# ***Lets see the top 10 favourite stadiums to host the matches | 2008-2019***","92abea35":"# ***Lets see which team is the best and put all the debates to an end | 2008-2019***","410dfdf0":"**As we had more than 85% of values missing of umpire 3 we have droped it.**","db1ddd1e":".info(): ***This method prints information about a DataFrame including the index dtype and columns, non-null values and memory usage.***"}}