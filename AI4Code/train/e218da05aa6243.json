{"cell_type":{"7076894b":"code","81c81a88":"code","db6f8818":"code","b6e05a5e":"code","954c50da":"code","7ec45c75":"code","72c509f2":"code","affa54ca":"code","44cbcf78":"code","7fb16f69":"code","611d0dd5":"code","038f5090":"code","877bc100":"code","c9bd2436":"code","2aba4d39":"code","219064ad":"code","2bd59511":"code","beb7dd0d":"code","9069fbae":"markdown","f685fff9":"markdown"},"source":{"7076894b":"import sys\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","81c81a88":"df_train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv', parse_dates=['Date'])\ndf_train = df_train.replace(np.nan, '', regex=True) # replace nan in Province_State with empty string\nstates = df_train.groupby('Country_Region')['Province_State'].apply(set)\ndf_train = df_train.groupby(['Country_Region', 'Date']).sum().reset_index() # merge islands\n\ndf_pops = pd.read_csv('\/kaggle\/input\/population-by-country-2020\/population_by_country_2020.csv')\npops = dict(zip(df_pops['Country (or dependency)'], df_pops['Population (2020)']))\npops['US'] = pops['United States']\npops['Korea, South'] = pops['South Korea']","db6f8818":"current_confirmed = df_train.groupby('Country_Region').max().sort_values('ConfirmedCases', ascending=False)\ncurrent_fatalities = df_train.groupby('Country_Region').max().sort_values('Fatalities', ascending=False)\ncurrent_confirmed_poprate = current_confirmed.loc[:,'ConfirmedCases'] \/ df_pops.set_index('Country (or dependency)')['Population (2020)']\ntops = current_confirmed[:15]\ntops = pd.concat([tops, current_confirmed[current_confirmed.index == 'Japan']]) # my country...","b6e05a5e":"df_train['ConfirmedCasesDiff'] = df_train.groupby('Country_Region').diff()['ConfirmedCases']\ndf_train['FatalitiesDiff'] = df_train.groupby('Country_Region').diff()['Fatalities']","954c50da":"# calculating moving average of the differences\ndf_train['ConfirmedCasesDiffAvg'] = df_train.groupby('Country_Region').rolling(5)['ConfirmedCasesDiff'].mean().reset_index(level=0)['ConfirmedCasesDiff']\ndf_train['FatalitiesDiffAvg'] = df_train.groupby('Country_Region').rolling(5)['FatalitiesDiff'].mean().reset_index(level=0)['FatalitiesDiff']","7ec45c75":"# set the first confirmed date to each rows\ndf_train['FirstConfirmedDateCountry'] = df_train.query('ConfirmedCases>0').groupby('Country_Region')['Date'].transform('min')\ndf_train['FirstFatalityDateCountry'] = df_train.query('Fatalities>0').groupby('Country_Region')['Date'].transform('min')","72c509f2":"df_train['DaysSinceFirstConfirmed'] = (df_train['Date'] - df_train['FirstConfirmedDateCountry']).dt.days","affa54ca":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nfig.suptitle('The number of cases')\n\nc = df_train[['Date', 'ConfirmedCases', 'Fatalities']].groupby('Date').sum()\nc['ConfirmedCases'].plot(ax=ax1)\nc['ConfirmedCases'].plot(ax=ax2)\nc['Fatalities'].plot(ax=ax1)\nc['Fatalities'].plot(ax=ax2)\nax1.legend(loc='upper left')\nax2.legend()\nax1.set_ylabel('Number of cases')\nax2.set_yscale('log')","44cbcf78":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nfig.suptitle('The number of confirmed cases')\nfor country, df in df_train.groupby('Country_Region'):\n    if country not in tops.index:\n        continue\n    c = df.query('DaysSinceFirstConfirmed>0').set_index('DaysSinceFirstConfirmed').sort_index()['ConfirmedCases']\n    c.plot(label=country, ax=ax1)\n    c.plot(label=country, ax=ax2)\n    ax1.annotate(country, xy=(c.index[-1], c.iloc[-1]))\n    ax2.annotate(country, xy=(c.index[-1], c.iloc[-1]))\nax1.set_ylabel('Number of cases')\nax2.set_yscale('log')","7fb16f69":"fig, ax = plt.subplots(figsize=(20, 10))\nplt.title('Total confirmed cases of COVID-19 per million people from the first case')\nfor country, df in df_train.groupby('Country_Region'):\n    if country not in tops.index:\n        continue\n    if country not in pops.keys():\n        print(f'`{country}` is not found in pops list.', file=sys.stderr)\n        continue\n    c = df.query('DaysSinceFirstConfirmed>0').set_index('DaysSinceFirstConfirmed').sort_index()['ConfirmedCases']\n    c = c \/ pops[country] * 1e6\n    c.plot(label=country, ax=ax)\n    ax.annotate(country, xy=(c.index[-1], c.iloc[-1]), size=14)\nax.set_ylabel('Number of cases')\nax.grid()","611d0dd5":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nfig.suptitle('The number of confirmed cases per day')\nfor country, df in df_train.groupby('Country_Region'):\n    if country not in tops.index:\n        continue\n    c = df.query('DaysSinceFirstConfirmed>0').set_index('DaysSinceFirstConfirmed').sort_index()['ConfirmedCasesDiff']\n    c.plot(label=country, ax=ax1)\n    c[c > 0].plot(label=country, ax=ax2)\n    ax1.annotate(country, xy=(c.index[-1], c.iloc[-1]))\n    ax2.annotate(country, xy=(c.index[-1], c.iloc[-1]))\nax1.set_ylabel('Number of cases')\nax2.set_yscale('log')","038f5090":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nfig.suptitle('The number of confirmed cases per day (smoothed)')\nfor country, df in df_train.groupby('Country_Region'):\n    if country not in tops.index:\n        continue\n    c = df.query('DaysSinceFirstConfirmed>0').set_index('DaysSinceFirstConfirmed').sort_index()['ConfirmedCasesDiffAvg']\n    c.plot(label=country, ax=ax1)\n    c[c > 0].plot(label=country, ax=ax2)\n    ax1.annotate(country, xy=(c.index[-1], c.iloc[-1]))\n    ax2.annotate(country, xy=(c.index[-1], c.iloc[-1]))\nax1.set_ylabel('Number of cases')\nax2.set_yscale('log')","877bc100":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nfig.suptitle('The number of deceased cases')\nfor country, df in df_train.groupby('Country_Region'):\n    if country not in tops.index:\n        continue\n    c = df.query('DaysSinceFirstConfirmed>0').set_index('DaysSinceFirstConfirmed').sort_index()['Fatalities']\n    c.plot(label=country, ax=ax1)\n    c[c > 0].plot(label=country, ax=ax2) # for logarithmic scale\n    ax1.annotate(country, xy=(c.index[-1], c.iloc[-1]))\n    ax2.annotate(country, xy=(c.index[-1], c.iloc[-1]))\nax1.set_ylabel('Number of cases')\nax2.set_yscale('log')","c9bd2436":"fig, ax = plt.subplots(figsize=(20, 10))\nplt.title('Total deceased cases of COVID-19 per million people from the first confirmed case')\nfor country, df in df_train.groupby('Country_Region'):\n    if country not in tops.index:\n        continue\n    if country not in pops.keys():\n        continue\n    c = df.query('DaysSinceFirstConfirmed>0').set_index('DaysSinceFirstConfirmed').sort_index()['Fatalities']\n    c = c \/ pops[country] * 1e6\n    c.plot(label=country, ax=ax)\n    ax.annotate(country, xy=(c.index[-1], c.iloc[-1]), size=14)\nax.set_xlabel('Days')\nax.set_ylabel('Number of cases')\nax.grid()","2aba4d39":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nfig.suptitle('The number of deceased cases per day')\nfor country, df in df_train.groupby('Country_Region'):\n    if country not in tops.index:\n        continue\n    c = df.query('DaysSinceFirstConfirmed>0').set_index('DaysSinceFirstConfirmed').sort_index()['FatalitiesDiff']\n    c.plot(label=country, ax=ax1)\n    c[c > 0].plot(label=country, ax=ax2) # for logarithmic scale\n    ax1.annotate(country, xy=(c.index[-1], c.iloc[-1]))\n    ax2.annotate(country, xy=(c.index[-1], c.iloc[-1]))\nax1.set_ylabel('Number of cases')\nax2.set_yscale('log')","219064ad":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nfig.suptitle('The number of deceased cases per day (smoothed)')\nfor country, df in df_train.groupby('Country_Region'):\n    if country not in tops.index:\n        continue\n    c = df.query('DaysSinceFirstConfirmed>0').set_index('DaysSinceFirstConfirmed').sort_index()['FatalitiesDiffAvg']\n    c.plot(label=country, ax=ax1)\n    c[c > 0].plot(label=country, ax=ax2) # for logarithmic scale\n    ax1.annotate(country, xy=(c.index[-1], c.iloc[-1]))\n    ax2.annotate(country, xy=(c.index[-1], c.iloc[-1]))\nax1.set_ylabel('Number of cases')\nax2.set_yscale('log')","2bd59511":"fig, ax = plt.subplots()\nc = df_train[(df_train['DaysSinceFirstConfirmed'] > 0) & (df_train['Country_Region'] == 'Italy')].set_index('DaysSinceFirstConfirmed').sort_index()\nc['FatalitiesDiff'].plot(label='fatalities diff', ax=ax)\nc['ConfirmedCasesDiff'].plot(label='confirmed diff', ax=ax)\nax.legend()","beb7dd0d":"fig, ax = plt.subplots()\nc = df_train[(df_train['DaysSinceFirstConfirmed'] > 0) & (df_train['Country_Region'] == 'Italy')].set_index('DaysSinceFirstConfirmed').sort_index()\nc['FatalitiesDiffAvg'].plot(label='fatalities diff', ax=ax)\nc['ConfirmedCasesDiffAvg'].plot(label='confirmed diff', ax=ax)\nax.legend()","9069fbae":"## WIPs\nFollowing figures are experimental moving average plots for Italy.","f685fff9":"## Visualizations"}}