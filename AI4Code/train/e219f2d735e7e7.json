{"cell_type":{"45200500":"code","cd5fad5b":"code","f916a5d7":"code","d40097f1":"code","2c6a8c5a":"code","f7821bf1":"code","3b5c696a":"code","3a6346cd":"code","8ffe9795":"code","cd80ac80":"code","f47524f0":"code","73889165":"code","e541d8a6":"code","2525c70f":"code","3d300874":"code","8e21ab8b":"code","d9adba70":"code","d23b9bab":"code","28cf0bf1":"code","078030d7":"code","06a37ca8":"code","ce48731e":"code","e3d9d044":"code","50057672":"code","72792ab7":"code","f42814a1":"code","b14746cf":"code","b55bd613":"code","547a1a46":"code","d6fdb078":"code","fd7c83e2":"code","f6a25065":"code","e8d71d97":"code","3b9d50d8":"code","de2572f5":"code","c2b569a3":"code","6282ab73":"code","96116463":"code","8b8e90ab":"code","faaae8c0":"code","0e574bee":"code","44b09bbe":"code","d9076714":"code","540e529d":"code","ddaebd30":"code","11205793":"code","81c63589":"code","62c61841":"code","9e40b484":"code","80764944":"code","fc07a754":"code","4c9d81fa":"code","5b7d32ef":"code","b79c9ac0":"code","9a13c09f":"code","3bf51470":"code","e6db1dbf":"code","55b3736a":"code","507862cb":"code","cadf9293":"code","39c73b0e":"code","09eb31fc":"code","129e5441":"code","8ec7045a":"code","cec4d649":"code","245b5dd9":"code","7243a3bc":"code","cddc8621":"code","ac5c53da":"code","c0f50cd6":"code","2bbf0b36":"code","62cf5c90":"code","af15de97":"code","bbd5a35b":"code","92a80b02":"code","b34970fc":"code","889da04c":"code","e2dbb9b6":"code","35949119":"code","32a5d367":"code","667da0af":"code","94067b02":"code","ee5b4119":"code","7e4768f0":"code","fb72d80a":"code","64166ba2":"code","a57118cd":"code","7d7e8e0b":"code","ba3136d6":"code","d4ae3530":"code","4a82d4cb":"code","cc5af779":"code","9edbd018":"code","8ed7eeac":"code","2eae908f":"code","50f9fde1":"code","6c482859":"code","78e506e5":"code","0ae76647":"code","2b6fc9f6":"code","792fe081":"code","234d2b93":"code","6ae25853":"code","9e7d7c5b":"code","a2d4dfbd":"code","38c8a0de":"markdown","c399f772":"markdown","9e701c5b":"markdown","76f1b525":"markdown","d1cd8f82":"markdown","19c52e34":"markdown","dbbdcd61":"markdown","49a550d7":"markdown","0c28796a":"markdown","aa1c2bb0":"markdown","147159c4":"markdown","e428a285":"markdown","c923ff9a":"markdown","ac519e2d":"markdown","5035b312":"markdown","4d3eb22a":"markdown","31893c1a":"markdown","311bfc16":"markdown","9f6f7ab6":"markdown","27238eb5":"markdown","3f0c58ce":"markdown","4266faa3":"markdown","2061e5b6":"markdown","fe5a4255":"markdown","25537a26":"markdown","727110f6":"markdown","4b817992":"markdown","1c21992c":"markdown","31ecf814":"markdown","f981a893":"markdown"},"source":{"45200500":"# importing libraries\n\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nimport geopandas as gpd\nfrom shapely.geometry import Point, LineString\n\nimport folium\nfrom folium import Marker, GeoJson\nfrom folium.plugins import MarkerCluster, HeatMap\n","cd5fad5b":"wc = gpd.read_file('..\/input\/human-development-index-hdi\/countries.geojson')\nwc.head(2)","f916a5d7":"wc.columns","d40097f1":"wc.economy","2c6a8c5a":"fig, ax = plt.subplots(figsize=(10, 5))\nwc.plot(ax=ax,color='midnightblue')\nplt.show()","f7821bf1":"type(wc.geometry)","3b5c696a":"len(wc)","3a6346cd":"wc.geometry[:5]","8ffe9795":"wc.geometry[:5].area","cd80ac80":"# wc_json = wc.to_json()\n# print(wc_json)","f47524f0":"italy = wc[wc['name'] =='Italy']\nitaly.plot()","73889165":"china = wc[wc['name'] =='China']\nchina.plot()","e541d8a6":"wc.plot(column='labelrank', cmap='Blues_r', figsize=(10, 5))","2525c70f":"wc.plot(column='labelrank', cmap='Greens', figsize=(10, 5))","3d300874":"wc.plot(column='economy', cmap='Greens_r', figsize=(10, 5), legend=True)","8e21ab8b":"na = wc[wc['continent']=='Asia']\nna.plot(column='labelrank', cmap='Greens', legend=True, figsize=(10, 5))","d9adba70":"leg_kwds={'title':'District Number',\n          'loc': 'upper left',\n          'bbox_to_anchor':(1, 1.03),\n          'ncol':3}\n\nna = wc[wc['continent']=='South America']\nna.plot(column='admin', cmap='Set2', legend=True, legend_kwds=leg_kwds)","d23b9bab":"leg_kwds={'title':'District Number',\n          'loc': 'upper left',\n          'bbox_to_anchor':(1, 1.03),\n          'ncol':4}\n\nna = wc[wc['continent']=='Asia']\nna.plot(column='admin', cmap='Set2', legend=True, legend_kwds=leg_kwds)","28cf0bf1":"na.plot(column='labelrank', cmap='Reds', legend=True, scheme='equal_interval', k=2, figsize=(10, 5))","078030d7":"na.plot(column='labelrank', cmap='Reds', legend=True, scheme='equal_interval', k=4, figsize=(10, 5))","06a37ca8":"na.plot(column='labelrank', cmap='Reds', legend=True, scheme='quantiles', k=3, figsize=(10, 5))","ce48731e":"na.plot(column='labelrank', cmap='Reds', legend=True, scheme='quantiles', k=3, figsize=(10, 5))","e3d9d044":"# ! ls ..\/input\/natural-earth\/110m_cultural\/","50057672":"# most populated cities\ncities = gpd.read_file('..\/input\/natural-earth\/110m_cultural\/ne_110m_populated_places.shp')\n# cities.head(2)","72792ab7":"fig, ax = plt.subplots(figsize=(12, 6))\nwc.plot(ax=ax, color='lightgrey')\ncities.plot(ax=ax, color='darkorange', markersize=10)\nax.set_axis_off()","f42814a1":"brussels = cities.loc[170, 'geometry']\nprint(brussels)\nprint(type(brussels))\nbrussels","b14746cf":"belgium = wc[wc['name']=='Belgium']['geometry'].squeeze()\nuk = wc[wc['name']=='United Kingdom']['geometry'].squeeze()\ngermany = wc[wc['name']=='Germany']['geometry'].squeeze()\nireland = wc[wc['name']=='Ireland']['geometry'].squeeze()\n\ngpd.GeoSeries([belgium, uk, germany, ireland]).plot()","b55bd613":"# .crs","547a1a46":"# to crs","d6fdb078":"# .area .centroid","fd7c83e2":"brussels = cities.loc[170, 'geometry']\ndublin = cities.loc[156, 'geometry']\n\nbrussels.distance(dublin)","f6a25065":"belgium.contains(brussels)","e8d71d97":"ireland.contains(brussels)","3b9d50d8":"brussels.within(belgium)","de2572f5":"belgium.touches(germany)","c2b569a3":"belgium.touches(uk)","6282ab73":"# creating line \ndublin_brussels_line = LineString(zip((brussels.x,dublin.x ), (brussels.y, dublin.y)))\n\nfig, ax = plt.subplots()\ngpd.GeoSeries([belgium, uk, germany, ireland]).plot(color='gainsboro', ax=ax)\ngpd.GeoSeries([dublin_brussels_line]).plot(color='deeppink', ax = ax)\nax.set_axis_off()","96116463":"for i in [belgium, uk, germany, ireland]:\n    print(dublin_brussels_line.intersects(i))","8b8e90ab":"rivers = gpd.read_file('..\/input\/natural-earth\/110m_physical\/ne_110m_rivers_lake_centerlines.shp')\n# rivers.head(2)","faaae8c0":"fig, ax = plt.subplots(figsize=(12, 6))\nwc.plot(ax=ax, color='gainsboro')\nrivers.plot(ax=ax, color='teal', markersize=10)\nax.set_axis_off()","0e574bee":"amazon = rivers[rivers['name']=='Amazonas']\namazon","44b09bbe":"amazon.geometry","d9076714":"amazon.geometry.squeeze()","540e529d":"fig, ax = plt.subplots(figsize=(12, 6))\nwc[wc['continent']=='South America'].plot(ax=ax, color='gainsboro')\nrivers[rivers['name']=='Amazonas'].plot(ax=ax, color='teal', markersize=10)\nax.set_axis_off()","ddaebd30":"print(wc.shape)\nmask = wc.intersects(amazon.geometry.squeeze())\nwc[mask]","11205793":"mask = wc.intersects(dublin)\nwc[mask]","81c63589":"full_data = gpd.read_file(\"..\/input\/geospatial-learn-course-data\/DEC_lands\/DEC_lands\/DEC_lands.shp\")\nfull_data.head(2)","62c61841":"type(full_data)","9e40b484":"data = full_data.loc[:, [\"CLASS\", \"COUNTY\", \"geometry\"]].copy()","80764944":"# How many lands of each type are there?\ndata['CLASS'].value_counts()","fc07a754":"# Select lands that fall under the \"WILD FOREST\" or \"WILDERNESS\" category\nwild_lands = data.loc[data.CLASS.isin(['WILD FOREST', 'WILDERNESS'])].copy()\nwild_lands.head()","4c9d81fa":"wild_lands.plot()","5b7d32ef":"wild_lands.geometry.head()","b79c9ac0":"# Campsites in New York state (Point)\nPOI_data = gpd.read_file(\"..\/input\/geospatial-learn-course-data\/DEC_pointsinterest\/DEC_pointsinterest\/Decptsofinterest.shp\")\ncampsites = POI_data.loc[POI_data.ASSET=='PRIMITIVE CAMPSITE'].copy()\n\n# Foot trails in New York state (LineString)\nroads_trails = gpd.read_file(\"..\/input\/geospatial-learn-course-data\/DEC_roadstrails\/DEC_roadstrails\/Decroadstrails.shp\")\ntrails = roads_trails.loc[roads_trails.ASSET=='FOOT TRAIL'].copy()\n\n# County boundaries in New York state (Polygon)\ncounties = gpd.read_file(\"..\/input\/geospatial-learn-course-data\/NY_county_boundaries\/NY_county_boundaries\/NY_county_boundaries.shp\")","9a13c09f":"ax = counties.plot(figsize=(10, 10), color='none', edgecolor='grey', zorder=3)\nwild_lands.plot(color='teal', ax=ax)\ncampsites.plot(color='red', markersize=2, ax=ax)\ntrails.plot(color='black', markersize=1, ax=ax)","3bf51470":"regions = gpd.read_file(\"..\/input\/geospatial-learn-course-data\/ghana\/ghana\/Regions\/Map_of_Regions_in_Ghana.shp\")\nprint(regions.crs)","e6db1dbf":"# Create a DataFrame with health facilities in Ghana\nfacilities_df = pd.read_csv(\"..\/input\/geospatial-learn-course-data\/ghana\/ghana\/health_facilities.csv\")\n\n# Convert the DataFrame to a GeoDataFrame\nfacilities = gpd.GeoDataFrame(facilities_df, geometry=gpd.points_from_xy(facilities_df.Longitude, facilities_df.Latitude))\n\nax = regions.plot(figsize=(8,8), color='whitesmoke', linestyle=':', edgecolor='black')\nfacilities.plot(markersize=1, ax=ax)","55b3736a":"# Set the coordinate reference system (CRS) to EPSG 4326\nfacilities.crs = {'init': 'epsg:4326'}\n\n# Create a map\nax = regions.plot(figsize=(8,8), color='whitesmoke', linestyle=':', edgecolor='black')\nfacilities.to_crs(epsg=32630).plot(markersize=1, ax=ax)","507862cb":"# The \"Latitude\" and \"Longitude\" columns are unchanged\nfacilities.head()","cadf9293":"# The \"Latitude\" and \"Longitude\" columns are unchanged\nfacilities.to_crs(epsg=32630).head()","39c73b0e":"# Load the data and print the first 5 rows\nbirds_df = pd.read_csv(\"..\/input\/geospatial-learn-course-data\/purple_martin.csv\", parse_dates=['timestamp'])\nprint(\"There are {} different birds in the dataset.\".format(birds_df[\"tag-local-identifier\"].nunique()))\nbirds_df.head()","09eb31fc":"# Create the GeoDataFrame\nbirds = gpd.GeoDataFrame(birds_df, geometry=gpd.points_from_xy(birds_df[\"location-long\"], birds_df[\"location-lat\"]))\n\n# Set the CRS to {'init': 'epsg:4326'}\nbirds.crs = {'init' :'epsg:4326'}","129e5441":"# Load a GeoDataFrame with country boundaries in North\/South America, print the first 5 rows\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\namericas = world.loc[world['continent'].isin(['North America', 'South America'])]\namericas.head()","8ec7045a":"ax = americas.plot(figsize=(10,10), color='white', linestyle=':', edgecolor='gray')\nbirds.plot(ax=ax, markersize=10)","cec4d649":"# GeoDataFrame showing path for each bird\npath_df = birds.groupby(\"tag-local-identifier\")['geometry'].apply(list).apply(lambda x: LineString(x)).reset_index()\npath_gdf = gpd.GeoDataFrame(path_df, geometry=path_df.geometry)\npath_gdf.crs = {'init' :'epsg:4326'}\n\n# GeoDataFrame showing starting point for each bird\nstart_df = birds.groupby(\"tag-local-identifier\")['geometry'].apply(list).apply(lambda x: x[0]).reset_index()\nstart_gdf = gpd.GeoDataFrame(start_df, geometry=start_df.geometry)\nstart_gdf.crs = {'init' :'epsg:4326'}\n\n# Show first five rows of GeoDataFrame\nstart_gdf.head()","245b5dd9":"# Your code here\nend_df = birds.groupby(\"tag-local-identifier\")['geometry'].apply(list).apply(lambda x: x[-1]).reset_index()\nend_gdf = gpd.GeoDataFrame(end_df, geometry=end_df.geometry)\nend_gdf.crs = {'init': 'epsg:4326'}","7243a3bc":"# Your code here\nax = americas.plot(figsize=(10, 10), color='white', linestyle=':', edgecolor='gray')\n\nstart_gdf.plot(ax=ax, color='red',  markersize=30)\npath_gdf.plot(ax=ax, cmap='tab20b', linestyle='-', linewidth=1, zorder=1)\nend_gdf.plot(ax=ax, color='black', markersize=30)\n","cddc8621":"# Path of the shapefile to load\nprotected_filepath = \"..\/input\/geospatial-learn-course-data\/SAPA_Aug2019-shapefile\/SAPA_Aug2019-shapefile\/SAPA_Aug2019-shapefile-polygons.shp\"\n\n# Your code here\n\nprotected_areas = gpd.read_file(protected_filepath)\n\n# Country boundaries in South America\nsouth_america = americas.loc[americas['continent']=='South America']\n\n# Your code here: plot protected areas in South America\nax = south_america.plot(figsize=(10,10), color='white', edgecolor='gray')\nprotected_areas.plot(ax=ax, alpha=0.4)","ac5c53da":"P_Area = sum(protected_areas['REP_AREA']-protected_areas['REP_M_AREA'])\n\n# Your code here: Calculate the total area of South America (in square kilometers)\ntotalArea = sum(south_america.geometry.to_crs(epsg=3035).area) \/ 10**6\n\n# What percentage of South America is protected?\npercentage_protected = P_Area\/totalArea\nprint('Approximately {}% of South America is protected.'.format(round(percentage_protected*100, 2)))","c0f50cd6":"# Your code here\nax = south_america.plot(figsize=(10,10), color='white', edgecolor='gray')\nprotected_areas[protected_areas['MARINE']!='2'].plot(ax=ax, alpha=0.4, zorder=1)\nbirds[birds.geometry.y < 0].plot(ax=ax, color='red', alpha=0.6, markersize=10, zorder=2)","2bbf0b36":"from geopandas.tools import geocode","62cf5c90":"geocode(\"Taj Mahal\")","af15de97":"geocode(\"The White House\")","bbd5a35b":"result = geocode(\"The Great Pyramid of Giza\", provider=\"nominatim\")\nresult","92a80b02":"point = result.geometry.iloc[0]\nprint(\"Latitude:\", point.y)\nprint(\"Longitude:\", point.x)","b34970fc":"universities = pd.read_csv(\"..\/input\/geospatial-learn-course-data\/top_universities.csv\")\nuniversities.head()","889da04c":"import numpy as np\n\ndef my_geocoder(row):\n    try:\n        point = geocode(row, provider='nominatim').geometry.iloc[0]\n        return pd.Series({'Latitude': point.y, 'Longitude': point.x, 'geometry': point})\n    except:\n        return None\n\nuniversities[['Latitude', 'Longitude', 'geometry']] = universities.apply(lambda x: my_geocoder(x['Name']), axis=1)\n\nprint(\"{}% of addresses were geocoded!\".format(\n    (1 - sum(np.isnan(universities[\"Latitude\"])) \/ len(universities)) * 100))\n\n# Drop universities that were not successfully geocoded\nuniversities = universities.loc[~np.isnan(universities[\"Latitude\"])]\nuniversities = gpd.GeoDataFrame(universities, geometry=universities.geometry)\nuniversities.crs = {'init': 'epsg:4326'}\nuniversities.head()","e2dbb9b6":"world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\neurope = world.loc[world.continent == 'Europe'].reset_index(drop=True)\n\neurope_stats = europe[[\"name\", \"pop_est\", \"gdp_md_est\"]]\neurope_boundaries = europe[[\"name\", \"geometry\"]]","35949119":"europe_boundaries.head()","32a5d367":"europe_stats.head()","667da0af":"europe = europe_boundaries.merge(europe_stats, on=\"name\")\neurope.head()","94067b02":"# Use spatial join to match universities to countries in Europe\neuropean_universities = gpd.sjoin(universities, europe)\n\n# Investigate the result\nprint(\"We located {} universities.\".format(len(universities)))\nprint(\"Only {} of the universities were located in Europe (in {} different countries).\".format(\n    len(european_universities), len(european_universities.name.unique())))\n\neuropean_universities.head()","ee5b4119":"# Load and preview Starbucks locations in California\nstarbucks = pd.read_csv(\"..\/input\/geospatial-learn-course-data\/starbucks_locations.csv\")\nstarbucks.head()","7e4768f0":"# How many rows in each column have missing values?\nprint(starbucks.isnull().sum())\n\n# View rows with missing locations\nrows_with_missing = starbucks[starbucks[\"City\"]==\"Berkeley\"]\nrows_with_missing","fb72d80a":"# Your code here\ndef my_geocoder(row):\n    point = geocode(row, provider='nominatim').geometry[0]\n    return pd.Series({'Longitude': point.x, 'Latitude': point.y})\n\nberkeley_locations = rows_with_missing.apply(lambda x: my_geocoder(x['Address']), axis=1)\nstarbucks.update(berkeley_locations)\n\nprint(starbucks.isnull().sum())","64166ba2":"# Create a base map\nm_2 = folium.Map(location=[37.88,-122.26], zoom_start=13)\n\n# Your code here: Add a marker for each Berkeley location\nfor idx, row in starbucks[starbucks[\"City\"]=='Berkeley'].iterrows():\n    Marker([row['Latitude'], row['Longitude']]).add_to(m_2)\n    \n# Show the map\nm_2","a57118cd":"CA_counties = gpd.read_file(\"..\/input\/geospatial-learn-course-data\/CA_county_boundaries\/CA_county_boundaries\/CA_county_boundaries.shp\")\nCA_pop = pd.read_csv(\"..\/input\/geospatial-learn-course-data\/CA_county_population.csv\", index_col=\"GEOID\")\nCA_high_earners = pd.read_csv(\"..\/input\/geospatial-learn-course-data\/CA_county_high_earners.csv\", index_col=\"GEOID\")\nCA_median_age = pd.read_csv(\"..\/input\/geospatial-learn-course-data\/CA_county_median_age.csv\", index_col=\"GEOID\")","7d7e8e0b":"cols_to_add = CA_pop.join([CA_high_earners, CA_median_age]).reset_index()\nCA_stats = CA_counties.merge(cols_to_add, on=\"GEOID\")","ba3136d6":"CA_stats[\"density\"] = CA_stats[\"population\"] \/ CA_stats[\"area_sqkm\"]","d4ae3530":"sel_counties = CA_stats[((CA_stats.high_earners > 100000) &\n                         (CA_stats.median_age < 38.5) &\n                         (CA_stats.density > 285) &\n                         ((CA_stats.median_age < 35.5) |\n                         (CA_stats.density > 1400) |\n                         (CA_stats.high_earners > 500000)))]","4a82d4cb":"starbucks_gdf = gpd.GeoDataFrame(starbucks, geometry=gpd.points_from_xy(starbucks.Longitude, starbucks.Latitude))\nstarbucks_gdf.crs = {'init': 'epsg:4326'}","cc5af779":"# Fill in your answer\nlocations_of_interest = gpd.sjoin(starbucks_gdf, sel_counties)\nnum_stores = len(locations_of_interest)","9edbd018":"import math","8ed7eeac":"# Create a base map\nm_6 = folium.Map(location=[37,-120], zoom_start=6)\n\n# Your code here: show selected store locations\nmc = MarkerCluster()\n\nlocations_of_interest = gpd.sjoin(starbucks_gdf, sel_counties)\nfor idx, row in locations_of_interest.iterrows():\n    if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n        mc.add_child(folium.Marker([row['Latitude'], row['Longitude']]))\n\nm_6.add_child(mc)\n\n# Uncomment to see a hint\n#q_6.hint()\n\n# Show the map\nm_6","2eae908f":"releases = gpd.read_file(\"..\/input\/geospatial-learn-course-data\/toxic_release_pennsylvania\/toxic_release_pennsylvania\/toxic_release_pennsylvania.shp\") \nreleases.head()","50f9fde1":"stations = gpd.read_file(\"..\/input\/geospatial-learn-course-data\/PhillyHealth_Air_Monitoring_Stations\/PhillyHealth_Air_Monitoring_Stations\/PhillyHealth_Air_Monitoring_Stations.shp\")\nstations.head()","6c482859":"print(stations.crs)\nprint(releases.crs)","78e506e5":"# Select one release incident in particular\nrecent_release = releases.iloc[360]\n\n# Measure distance from release to each station\ndistances = stations.geometry.distance(recent_release.geometry)\ndistances","0ae76647":"print('Mean distance to monitoring stations: {} feet'.format(distances.mean()))\n","2b6fc9f6":"print('Closest monitoring station ({} feet):'.format(distances.min()))\nprint(stations.iloc[distances.idxmin()][[\"ADDRESS\", \"LATITUDE\", \"LONGITUDE\"]])","792fe081":"two_mile_buffer = stations.geometry.buffer(2*5280)\ntwo_mile_buffer.head()","234d2b93":"# Create map with release incidents and monitoring stations\nm = folium.Map(location=[39.9526,-75.1652], zoom_start=11)\nHeatMap(data=releases[['LATITUDE', 'LONGITUDE']], radius=15).add_to(m)\nfor idx, row in stations.iterrows():\n    Marker([row['LATITUDE'], row['LONGITUDE']]).add_to(m)\n    \n# Plot each polygon on the map\nGeoJson(two_mile_buffer.to_crs(epsg=4326)).add_to(m)\n\n# Show the map\nm","6ae25853":"# Turn group of polygons into single multipolygon\nmy_union = two_mile_buffer.geometry.unary_union\nprint('Type:', type(my_union))\n\n# Show the MultiPolygon object\nmy_union","9e7d7c5b":"# The closest station is less than two miles away\nmy_union.contains(releases.iloc[360].geometry)","a2d4dfbd":"# The closest station is more than two miles away\nmy_union.contains(releases.iloc[358].geometry)","38c8a0de":"### cmap","c399f772":"https:\/\/geopandas.org\/index.html","9e701c5b":"### .contains()","76f1b525":"### subsetting","d1cd8f82":"### categorical","19c52e34":"### Reading GeoJSON file","dbbdcd61":"### Color according to column values","49a550d7":"### .within()","0c28796a":"### .intersects()","aa1c2bb0":"### Properties","147159c4":"### Plotting geopandas dataframe","e428a285":"# Libraries","c923ff9a":"### Ploting points over base map","ac519e2d":"### Subsetting map","5035b312":"### scheme, k","4d3eb22a":"### Subsetting dataframes","31893c1a":"### Creating line from points","311bfc16":"https:\/\/www.datacamp.com\/community\/tutorials\/geospatial-data-python","9f6f7ab6":"### Converting back to json\n","27238eb5":"### .distance()","3f0c58ce":"### .touches()","4266faa3":"### Subsetting and plotting","2061e5b6":"### Plotting line over base map","fe5a4255":"# NYC wild areas and campsites","25537a26":"# Data","727110f6":"# Table joins","4b817992":"## .distance() .contains() .within() .touches() .intersects()","1c21992c":"### cmap, legend, legend keywords","31ecf814":"https:\/\/datascience103579984.wordpress.com\/2019\/11\/25\/working-with-geospatial-data-in-python-from-datacamp\/","f981a893":"# Geocode"}}