{"cell_type":{"bf7507ce":"code","5e6fcb2f":"code","3967cb10":"code","fd3dcb22":"code","c570d185":"code","1ab9048a":"code","0d6c5430":"code","7433e2f2":"code","d904658b":"code","728fa5bc":"code","5e6634ad":"code","310459ae":"code","61ecb289":"code","e9cb8a5b":"code","31a550f8":"code","66d4ab43":"code","667d1c22":"code","f5771488":"code","b4ac0dfe":"code","2aea5130":"code","ddea2c93":"code","18b2ac1f":"code","345c4524":"code","73f030c1":"code","fdb68e17":"code","353c3b3a":"code","06c76804":"code","099b1e0f":"code","722f8a62":"code","307c2126":"code","c4dbd6e7":"code","4f739f26":"code","cd3a0b67":"code","ae69c7e4":"code","eb585234":"code","d41e107b":"code","e9c9d53f":"code","dd2d8c47":"code","20a0af51":"code","2e554193":"code","3561cc75":"code","9a7b279d":"code","7ad8ed21":"code","2a24d940":"code","c217b29e":"code","c2175e0f":"code","a7d6ad95":"code","1ee686f8":"code","a5b37783":"code","75e9186f":"code","96890ff8":"code","a0635266":"code","264680a8":"code","ccebcacc":"code","93ba0732":"code","160469a2":"code","c5c938a9":"code","c9cbc0a6":"code","378c3ada":"code","112a3157":"code","b38e2fa0":"code","2de3fedf":"code","f4cd3f36":"code","c09d2e0a":"code","f51b4228":"code","9e8a0d7e":"code","936101e5":"code","be5c3bb4":"code","3786bb0a":"code","4319e03c":"code","475fb738":"code","f3804849":"code","de4f63a7":"code","cdf0ff97":"code","aa9594ad":"code","bdc8eeba":"code","ec6b12cb":"code","63fae778":"code","756bba36":"code","2e14cfd3":"code","a1b44db2":"markdown","54ec9ba0":"markdown","79bed7d7":"markdown","5b9ef623":"markdown","200ab9d6":"markdown","b9e6db1d":"markdown","3ae6f50e":"markdown","79f63def":"markdown","d8e80dad":"markdown","14cf2ce4":"markdown","53ab0fb5":"markdown","c6759333":"markdown","b7ae72d3":"markdown","ddf65f62":"markdown","cd253f84":"markdown","d9cc4177":"markdown","30ba5d22":"markdown","a9274384":"markdown","7d75211e":"markdown","8cc4bf88":"markdown","17f5f044":"markdown","f7aa8e61":"markdown","66c6049b":"markdown","3a4880c9":"markdown","8b7b528c":"markdown","6487d069":"markdown","ad2ebde8":"markdown","404ac973":"markdown","9d6c891f":"markdown","97d0a343":"markdown","23229f44":"markdown","6b98c6c8":"markdown","1c094679":"markdown","a38c8365":"markdown","300126e7":"markdown","c520ba07":"markdown","e68f262b":"markdown","7ee77eef":"markdown","f456c53e":"markdown","8e0b418a":"markdown","5326a8ea":"markdown","c128b919":"markdown","8ed93cbf":"markdown","63f4e560":"markdown","22f4d109":"markdown","cb0c5478":"markdown","2984131a":"markdown","e9173fbb":"markdown","f32ea9ab":"markdown","e4351ca1":"markdown","7dcc5840":"markdown","f5ebcade":"markdown","182c9f54":"markdown"},"source":{"bf7507ce":"pip install -U scikit-fuzzy","5e6fcb2f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport folium #visualize map\nfrom pandas.tseries.holiday import USFederalHolidayCalendar as calendar #calendar\nfrom sklearn.cluster import KMeans #k-means clustering\nfrom yellowbrick.cluster import KElbowVisualizer #Elbow visualize K-means\nfrom skfuzzy.cluster import cmeans, cmeans_predict #fuzzy clustering\nfrom sklearn import mixture #Gaussian Mixture Modelling\nfrom sklearn.mixture import GaussianMixture\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","3967cb10":"df1 = pd.read_csv(\"\/kaggle\/input\/uber-pickups-in-new-york-city\/uber-raw-data-apr14.csv\")\ndf2 = pd.read_csv(\"\/kaggle\/input\/uber-pickups-in-new-york-city\/uber-raw-data-aug14.csv\")\ndf3 = pd.read_csv(\"\/kaggle\/input\/uber-pickups-in-new-york-city\/uber-raw-data-jul14.csv\")\ndf4 = pd.read_csv(\"\/kaggle\/input\/uber-pickups-in-new-york-city\/uber-raw-data-jun14.csv\")\ndf5 = pd.read_csv(\"\/kaggle\/input\/uber-pickups-in-new-york-city\/uber-raw-data-may14.csv\")\ndf6 = pd.read_csv(\"\/kaggle\/input\/uber-pickups-in-new-york-city\/uber-raw-data-sep14.csv\")","fd3dcb22":"df_ori = pd.concat([df1, df2, df3, df4, df5, df6])","c570d185":"df_ori.shape","1ab9048a":"df_ori.head()","0d6c5430":"clus_k_ori = df_ori[['Lat', 'Lon']]\nclus_k_ori.dtypes","7433e2f2":"import matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom yellowbrick.cluster import KElbowVisualizer\n\nmodel_ori = KMeans()\nvisualizer = KElbowVisualizer(model_ori, k = (1, 18)) #k = 1 to 17\nvisualizer.fit(clus_k_ori)\nvisualizer.show()","d904658b":"kmeans_ori = KMeans(n_clusters = 5, random_state = 0) #k = 5\nkmeans_ori.fit(clus_k_ori)","728fa5bc":"centroids_k_ori = kmeans_ori.cluster_centers_\ncentroids_k_ori","5e6634ad":"clocation_k_ori = pd.DataFrame(centroids_k_ori, columns = ['Latitude', 'Longitude'])","310459ae":"clocation_k_ori","61ecb289":"plt.scatter(clocation_k_ori['Latitude'], clocation_k_ori['Longitude'], marker = \"x\", color = 'R', s = 200)","e9cb8a5b":"centroid_k_ori = clocation_k_ori.values.tolist()\n\nmap_k_ori = folium.Map(location = [40.71600413400166, -73.98971408426613], zoom_start = 10)\nfor point in range(0, len(centroid_k_ori)):\n    folium.Marker(centroid_k_ori[point], popup = centroid_k_ori[point]).add_to(map_k_ori)\n\nmap_k_ori","31a550f8":"label_k_ori = kmeans_ori.labels_\nlabel_k_ori","66d4ab43":"df_new_k = df_ori.copy()\ndf_new_k['Clusters'] = label_k_ori\ndf_new_k","667d1c22":"sb.factorplot(data = df_new_k, x = \"Clusters\", kind = \"count\", size = 7, aspect = 2)","f5771488":"count_3 = 0\ncount_0 = 0\nfor value in df_new_k['Clusters']:\n    if value == 3:\n        count_3 += 1\n    if value == 0:\n        count_0 += 1\nprint(count_0, count_3)","b4ac0dfe":"new_location_ori = [(40.86, -75.56)]\nkmeans_ori.predict(new_location_ori)","2aea5130":"clus_fuz_ori = df_ori[['Lat', 'Lon']]","ddea2c93":"fpcs_ori = []\n\n# n_cluster = 1 to 11\nfor n_cluster in range(1, 11):\n    cntr, u, u0, d, jm, p, fpc_ori = cmeans(clus_fuz_ori.T, n_cluster, 2 , error=0.01, maxiter=1000)\n    fpcs_ori.append(fpc_ori)","18b2ac1f":"fig, ax = plt.subplots()\nax.plot(np.r_[1:11], fpcs_ori)\nax.set_xlabel(\"Number of centers\")\nax.set_ylabel(\"Fuzzy partition coefficient\")","345c4524":"cntr_ori, u_orig, _, _, _, _, _ = cmeans(clus_fuz_ori.T, 5, 2 , error=0.01, maxiter=1000)","73f030c1":"u_ori, u0, d, jm, p, pc = cmeans_predict(clus_fuz_ori.T, cntr_ori, 2 , error=0.01, maxiter=1000)","fdb68e17":"centroids_fuz_ori = cntr_ori\ncentroids_fuz_ori","353c3b3a":"clocation_fuz_ori = pd.DataFrame(centroids_fuz_ori, columns = ['Latitude', 'Longitude'])\nclocation_fuz_ori","06c76804":"plt.scatter(clocation_fuz_ori['Latitude'], clocation_fuz_ori['Longitude'], marker = \"x\", color = 'R', s = 200)","099b1e0f":"centroid_fuz_ori = clocation_fuz_ori.values.tolist()\n\nmap_fuz_ori = folium.Map(location = [40.71600413400166, -73.98971408426613], zoom_start = 10)\nfor point in range(0, len(centroid_fuz_ori)):\n    folium.Marker(centroid_fuz_ori[point], popup = centroid_fuz_ori[point]).add_to(map_fuz_ori)\n\nmap_fuz_ori","722f8a62":"label_fuz_ori = np.argmax(u_ori, axis = 0)\nlabel_fuz_ori","307c2126":"df_new_fuz = df_ori.copy()\ndf_new_fuz['Clusters'] = label_fuz_ori\ndf_new_fuz","c4dbd6e7":"sb.factorplot(data = df_new_fuz, x = \"Clusters\", kind = \"count\", size = 7, aspect = 2)","4f739f26":"plt.scatter(df_new_fuz['Lat'], df_new_fuz['Lon'], c = label_fuz_ori, cmap='viridis');","cd3a0b67":"clus_gmm_ori = df_ori[['Lat', 'Lon']]","ae69c7e4":"n_components = np.arange(1, 15)\nmodels = [GaussianMixture(n, covariance_type='full', random_state=0).fit(clus_gmm_ori) for n in n_components]\nplt.plot(n_components, [m.bic(clus_gmm_ori) for m in models], label='BIC')\nplt.plot(n_components, [m.aic(clus_gmm_ori) for m in models], label='AIC')\nplt.legend(loc='best')\nplt.xlabel('n_components');","eb585234":"clf = mixture.GaussianMixture(n_components=5, covariance_type='full')\nclf.fit(clus_gmm_ori)","d41e107b":"label_gmm_ori = clf.predict(clus_gmm_ori)","e9c9d53f":"df_new_gmm = df_ori.copy()\ndf_new_gmm['Clusters'] = label_gmm_ori\ndf_new_gmm","dd2d8c47":"df_new_gmm['Clusters'].unique()","20a0af51":"plt.scatter(df_new_gmm['Lat'], df_new_gmm['Lon'], c = label_gmm_ori, cmap='viridis');","2e554193":"new_location_gmm = [(43.86, -71.56)]\nclf.predict(new_location_gmm)","3561cc75":"df_prep = df_ori.copy()","9a7b279d":"df_prep = df_prep.rename(columns = {'Date\/Time' : 'Date_Time'}) #rename Date\/Time -> Date_Time","7ad8ed21":"df_prep.shape","2a24d940":"df_prep.head()","c217b29e":"df_prep['Date_Time'] =  pd.to_datetime(df_prep['Date_Time']) #convert to datetime\ndf_prep['Month'] = df_prep.Date_Time.apply(lambda x: x.month) #Month\ndf_prep['Day'] = df_prep.Date_Time.apply(lambda x: x.day) #Day\ndf_prep['Hour'] =  df_prep.Date_Time.apply(lambda x: x.hour) #hour\ndf_prep['Minute'] =  df_prep.Date_Time.apply(lambda x: x.minute) #minute\ndf_prep['Weekday'] = df_prep.Date_Time.apply(lambda x: x.weekday()) #weekday & onehot encoder\n\nholidays = calendar().holidays(start = df_prep['Date_Time'].min(), end = df_prep['Date_Time'].max()) #get the holiday in US calendar\ndf_prep['Holiday'] = df_prep['Date_Time'].isin(holidays).astype('int') #holidays","c2175e0f":"df_prep","a7d6ad95":"clus_k_prep = df_prep[['Lat', 'Lon', 'Day', 'Month', 'Hour', 'Minute', 'Weekday', 'Holiday']]\nclus_k_prep.dtypes","1ee686f8":"model_prep = KMeans()\nvisualizer_prep = KElbowVisualizer(model_prep, k = (1, 18)) #k = 1 to 17\nvisualizer_prep.fit(clus_k_prep)\nvisualizer_prep.show()","a5b37783":"kmeans_prep = KMeans(n_clusters = 3, random_state = 0) #k = 3\nkmeans_prep.fit(clus_k_prep) ","75e9186f":"centroids_k_prep = kmeans_prep.cluster_centers_\ncentroids_k_prep","96890ff8":"clocation_k_prep = pd.DataFrame(centroids_k_prep, columns = ['Latitude', 'Longitude','Day', 'Month', 'Hour', 'Minute', 'Weekday', 'Holiday'])","a0635266":"clocation_k_prep_map = clocation_k_prep[['Latitude', 'Longitude']]","264680a8":"plt.scatter(clocation_k_prep_map['Latitude'], clocation_k_prep_map['Longitude'], marker = \"x\", color = 'R', s = 200)","ccebcacc":"centroid_k_prep = clocation_k_prep_map.values.tolist()\n\nmap_k_prep = folium.Map(location = [40.7392, -73.973], zoom_start = 20)\nfor point in range(0, len(centroid_k_prep)):\n    folium.Marker(centroid_k_prep[point], popup = centroid_k_prep[point]).add_to(map_k_prep)\n\nmap_k_prep","93ba0732":"label_k_prep = kmeans_prep.labels_\nlabel_k_prep","160469a2":"df_prep_new_k = df_prep.copy()\ndf_prep_new_k['Clusters'] = label_k_prep\ndf_prep_new_k","c5c938a9":"sb.factorplot(data = df_prep_new_k, x = \"Clusters\", kind = \"count\", size = 7, aspect = 2)","c9cbc0a6":"new_location_prep = [(40.86, -75.56, 20, 8, 5, 37, 0, 0)]\nkmeans_prep.predict(new_location_prep)","378c3ada":"clus_fuz_prep = df_prep[['Lat', 'Lon','Day', 'Month', 'Hour', 'Minute', 'Weekday', 'Holiday']]","112a3157":"fpcs_prep = []\n\n# n_cluster = 1 to 11\nfor n_cluster in range(1, 11):\n    cntr_prep, u, u0, d, jm, p, fpc_prep = cmeans(clus_fuz_prep.T, n_cluster, 2 , error=0.01, maxiter=1000)\n    fpcs_prep.append(fpc_prep)","b38e2fa0":"fig, ax = plt.subplots()\nax.plot(np.r_[1:11], fpcs_prep)\nax.set_xlabel(\"Number of centers\")\nax.set_ylabel(\"Fuzzy partition coefficient\")","2de3fedf":"cntr_prep, u_orig, _, _, _, _, _ = cmeans(clus_fuz_prep.T, 5, 2 , error=0.01, maxiter=1000)","f4cd3f36":"u_prep, u0, d, jm, p, pc = cmeans_predict(clus_fuz_prep.T, cntr_prep, 2 , error=0.01, maxiter=1000)","c09d2e0a":"centroids_fuz_prep = cntr_prep\ncentroids_fuz_prep","f51b4228":"clocation_fuz_prep = pd.DataFrame(centroids_fuz_prep, columns = ['Latitude', 'Longitude','Day', 'Month', 'Hour', 'Minute', 'Weekday', 'Holiday'])","9e8a0d7e":"clocation_fuz_prep_map = clocation_fuz_prep[['Latitude', 'Longitude']]","936101e5":"plt.scatter(clocation_fuz_prep_map['Latitude'], clocation_fuz_prep_map['Longitude'], marker = \"x\", color = 'R', s = 200)","be5c3bb4":"centroid_fuz_prep = clocation_fuz_prep_map.values.tolist()\n\nmap_fuz_prep = folium.Map(location = [40.71600413400166, -73.98971408426613], zoom_start = 10)\nfor point in range(0, len(centroid_fuz_prep)):\n    folium.Marker(centroid_fuz_prep[point], popup = centroid_fuz_prep[point]).add_to(map_fuz_prep)\n\nmap_fuz_prep","3786bb0a":"label_fuz_prep = np.argmax(u_prep, axis = 0)\nlabel_fuz_prep","4319e03c":"df_prep_new_fuz = df_prep.copy()\ndf_prep_new_fuz['Clusters'] = label_fuz_prep\ndf_prep_new_fuz","475fb738":"sb.factorplot(data = df_prep_new_fuz, x = \"Clusters\", kind = \"count\", size = 7, aspect = 2)","f3804849":"plt.scatter(df_prep_new_fuz['Lat'], df_prep_new_fuz['Lon'], c = label_fuz_prep, cmap='viridis');","de4f63a7":"clus_gmm_prep = df_prep[['Lat', 'Lon','Day', 'Month', 'Hour', 'Minute', 'Weekday', 'Holiday']]","cdf0ff97":"n_components = np.arange(1, 15)\nmodels_gmm_prep = [GaussianMixture(n, covariance_type='full', random_state=0).fit(clus_gmm_prep) for n in n_components]\nplt.plot(n_components, [m.bic(clus_gmm_prep) for m in models_gmm_prep], label='BIC')\nplt.plot(n_components, [m.aic(clus_gmm_prep) for m in models_gmm_prep], label='AIC')\nplt.legend(loc='best')\nplt.xlabel('n_components');","aa9594ad":"clf_prep = mixture.GaussianMixture(n_components=5, covariance_type='full')\nclf_prep.fit(clus_gmm_prep)\n","bdc8eeba":"label_gmm_prep = clf_prep.predict(clus_gmm_prep)","ec6b12cb":"df_new_prep_gmm = df_ori.copy()\ndf_new_prep_gmm['Clusters'] = label_gmm_prep\ndf_new_prep_gmm","63fae778":"df_new_prep_gmm['Clusters'].unique()","756bba36":"plt.scatter(df_new_prep_gmm['Lat'], df_new_prep_gmm['Lon'], c = label_gmm_prep, cmap='viridis');","2e14cfd3":"new_location_prep_gmm = [(40.86, -75.56, 20, 8, 5, 37, 0, 0)]\nclf_prep.predict(new_location_prep_gmm)","a1b44db2":"#Predict cluster for new location","54ec9ba0":"#For loop to determine the number of cluster","79bed7d7":"#Visualize Latitude and Longitude","5b9ef623":"#Compare the cluster","200ab9d6":"#Visualize datapoint","b9e6db1d":"#For loop to determine the number of cluster","3ae6f50e":"# 1. K-means clustering","79f63def":"#For loop to determine the number of cluster","d8e80dad":"# 1. Kmeans clustering","14cf2ce4":"#Grouping and visualizing the total number of clusters","53ab0fb5":"#Plot the number of cluster","c6759333":"#Selecting Feature","b7ae72d3":"#Grouping and visualizing the total number of cluster","ddf65f62":"#Plot the number of clusters","cd253f84":"# 3. Gaussian Mixture Modelling","d9cc4177":"#Assign number of cluster K-Means Algorithm","30ba5d22":"#Selecting feature","a9274384":"#C-mean algorithm","7d75211e":"**#Read dataset**","8cc4bf88":"#Plot the number of centers","17f5f044":"#Assign number of cluster in K-Means Algorithm","f7aa8e61":"#Storing the Centroid","66c6049b":"#Grouping and visualizing the total number of clusters","3a4880c9":"#Predict the label","8b7b528c":"#Selecting Feature","6487d069":"#Visualize Centroids","ad2ebde8":"# **Install Sklearn Fuzzy**","404ac973":"#Visualize Centroids","9d6c891f":"#Selecting Feature","97d0a343":"# 3. Gaussian Mixture Modelling","23229f44":"**#Row bind using pandas concatenate**","6b98c6c8":"#Split Date\/Time","1c094679":"#Predict new location","a38c8365":"#Visualize datapoint","300126e7":"#Get the Lat and Lon to visualize","c520ba07":"#Predict cluster","e68f262b":"#Row bind using concatenate","7ee77eef":"#Storing the centroid","f456c53e":"# 2. Sklearn Fuzzy","8e0b418a":"#Storing the Centroids","5326a8ea":"#Selecting Feature","c128b919":"#Visualize Centroids","8ed93cbf":"#Predict new location","63f4e560":"#Storing the Centroid","22f4d109":"#Plot the number of cluster","cb0c5478":"#Grouping and visualizing the total number of clusters","2984131a":"# 2. Sklearn Fuzzy","e9173fbb":"#Selecting Feature","f32ea9ab":"# I. Original data","e4351ca1":"#Visualize Latitude and Longitude","7dcc5840":"# II. Pre-processed data & Analysis","f5ebcade":"#Get the Lat and Lon to visualize","182c9f54":"#Visualize Centroids using map"}}