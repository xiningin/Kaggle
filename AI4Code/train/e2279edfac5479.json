{"cell_type":{"415db97f":"code","d393af51":"code","f3c038b1":"code","c137899b":"code","46201762":"code","1aec4666":"code","a1ac532e":"code","eda19078":"code","2a372d81":"code","0ce3a54c":"code","07b91056":"code","20d01c9d":"markdown","ed228c67":"markdown","e1be7f54":"markdown","558560e7":"markdown","8b7779ca":"markdown","2df60847":"markdown"},"source":{"415db97f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","d393af51":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nsubmit = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\n\ntrain.head()","f3c038b1":"X_train = train.iloc[:,1:].values.reshape(-1, 1, 28, 28)\ny_train = train.iloc[:,:1].values.flatten()\nX_test = test.values.reshape(-1, 1, 28, 28)","c137899b":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader","46201762":"class GetData(Dataset):\n    def __init__(self, X, y=None):\n        super(GetData,self).__init__()\n        self.X = X\n        self.y = y\n    \n    def __len__(self):\n        return len(self.X)\n    \n    def __getitem__(self, idx):\n        if self.y is not None:\n            return self.X[idx], self.y[idx]\n        return self.X[idx]","1aec4666":"X_train = torch.tensor(X_train) \/ 255\ny_train = torch.tensor(y_train)\nX_test = torch.tensor(X_test) \/ 255\n\ntrain_set = GetData(X_train, y_train)\ntest_set = GetData(X_test)","a1ac532e":"train_loader = DataLoader(train_set, batch_size=128)\ntest_loader = DataLoader(test_set, batch_size=128)","eda19078":"class CNN(nn.Module):\n    def __init__(self):\n        super(CNN, self).__init__()\n        self.conv1 = nn.Conv2d(1, 32, kernel_size=3)\n        self.conv2 = nn.Conv2d(32, 64, kernel_size=3)\n        self.dropout = nn.Dropout(p=0.4)\n        self.fc1 = nn.Linear(1600, 10)\n        \n        self.optimizer = optim.Adam(self.parameters())\n\n    def forward(self, x):\n        x = F.max_pool2d(self.conv1(x), 2)\n        x = F.max_pool2d(self.conv2(x), 2)\n        x = x.flatten(1)\n        x = F.dropout(x, training=self.training)\n        x = self.fc1(x)\n        return F.log_softmax(x, dim=1)\n    \n    def fit(self, train_loader, epochs=1):\n        self.train()\n        for epoch in range(epochs):\n            total_loss = 0\n            total_acc = 0\n            for batch_idx, (data, target) in enumerate(train_loader):\n                self.optimizer.zero_grad()\n                output = self(data)\n                loss = F.nll_loss(output, target)\n                loss.backward()\n                self.optimizer.step()\n                acc = (output.argmax(1) == target).numpy().mean()\n                total_loss += loss.item()\n                total_acc += acc\n            \n            total_loss = total_loss \/ (batch_idx+1)\n            total_acc = total_acc \/ (batch_idx+1)\n            print(f\"Train Epoch: {epoch}\\tLoss: {total_loss:.6f}\\tAccuracy: {total_acc:.6f}\")\n            \n    def predict(self, test_loader):\n        self.eval()\n        preds=[]\n        print('wait ...')\n        with torch.no_grad():\n            for data in test_loader:\n                output = self(data)\n                preds+=output.argmax(1).numpy().tolist()\n        print('done!')\n        return preds","2a372d81":"model = CNN()","0ce3a54c":"model.fit(train_loader, epochs=3)","07b91056":"preds=model.predict(test_loader)\nsubmit['Label']=preds\nsubmit.head()\n\nsubmit.to_csv('submit.csv',index=False)","20d01c9d":"### load data preparation","ed228c67":"### load library for modeling","e1be7f54":"### create submit file","558560e7":"### library load","8b7779ca":"### modeling ","2df60847":"### data view"}}