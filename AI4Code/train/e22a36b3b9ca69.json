{"cell_type":{"30c9cee9":"code","5b76f686":"code","8c54c280":"code","b3e48bc6":"code","9981f42b":"code","39c3ffa1":"code","f8808d36":"code","a3c49819":"code","da76648c":"code","3f7eb43d":"code","dc40afe4":"code","42566b6f":"code","b7885a67":"code","31898458":"code","32d3c743":"markdown","96bc4561":"markdown","90dbc6cf":"markdown"},"source":{"30c9cee9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5b76f686":"import imageio\nimport shutil\nimport random\nfrom tqdm.auto import tqdm\nimport matplotlib.pyplot as plt","8c54c280":"img_path = '..\/input\/global-wheat-detection\/train\/'\n\ndef display_img(image_idx):\n    img = imageio.imread(f'{img_path}\/{image_idx}.jpg')\n    plt.imshow(img)\n    \n\ndef display_all_locations():\n\n    for location in set(df['combined_src']):\n        loc_mask = df['combined_src'] == location\n\n        plt.figure(figsize=(20, 15))\n        plt.suptitle(location)\n        r, c = 10, 10\n        for i in range(r*c):\n            rand_idx = random.randint(0, df[loc_mask].shape[0]-1)\n            plt.subplot(r, c, i+1)\n            display_img(df[loc_mask].iloc[rand_idx, 0])\n\n        # break","b3e48bc6":"orig_df = pd.read_csv('..\/input\/global-wheat-detection\/train.csv')\norig_df.head()","9981f42b":"orig_df['source'].hist()\norig_df['source'].value_counts()","39c3ffa1":"orig_df['combined_src'] = orig_df['source'].apply(lambda x: x.split('_')[0])\norig_df['combined_src'].hist()\norig_df['combined_src'].value_counts()","f8808d36":"df = orig_df.copy()\n\nbboxs = np.stack(df['bbox'].apply(lambda x: np.fromstring(x[1:-1], sep=',')))\nfor i, column in enumerate(['x', 'y', 'w', 'h']):\n    df[column] = bboxs[:,i]\n    \ndf.drop(columns=['bbox'], inplace=True)\ndf['x_center'] = df['x'] + df['w']\/2\ndf['y_center'] = df['y'] + df['h']\/2\ndf['classes'] = 0\n\nindex = list(set(df.image_id))\n\ndf.head()","a3c49819":"from sklearn.model_selection import train_test_split, GroupKFold\nfolds_info = []\n\nfor fold_idx, (train_idx, valid_idx) in enumerate(GroupKFold(4).split(df, groups=df.combined_src)):\n    train_df = df.iloc[train_idx].reset_index(drop=True)\n    valid_df = df.iloc[valid_idx].reset_index(drop=True)\n\n    plt.figure()\n    train_df['combined_src'].hist()\n    valid_df['combined_src'].hist()\n    name = \"valid_on_\" + \"_\".join(list(set(valid_df['combined_src'])))\n    plt.title(name)\n\n    print(name, train_idx.shape, valid_idx.shape, f\"ratio: {valid_idx.shape[0] \/ train_idx.shape[0] * 100:.2f}\")\n    folds_info.append(\n        [train_df, valid_df, name]\n    )\n    # break","da76648c":"display_all_locations()","3f7eb43d":"def dump(mdf, labels_path, images_path):\n\n    for img_idx, mini in tqdm(mdf.groupby('image_id')):\n        img_loc = f'{img_path}\/{img_idx}.jpg'\n\n        shutil.copy(\n            img_loc,\n            f'{images_path}\/{img_idx}.jpg'\n        )\n        \n        with open(f'{labels_path}\/{img_idx}.txt', 'w+') as f:\n            row = mini[['classes','x_center','y_center','w','h']].astype(float).values\n            row = row\/1024\n            row = row.astype(str)\n            for j in range(len(row)):\n                text = ' '.join(row[j])\n                f.write(text)\n                f.write(\"\\n\")\n        # break","dc40afe4":"def save(train_df, valid_df, savename):\n    outpath = \"\/kaggle\/working\/files\/\"\n    train_path_labels = f'{outpath}\/train\/labels\/'\n    train_path_images = f'{outpath}\/train\/images\/'\n    valid_path_labels = f'{outpath}\/valid\/labels\/'\n    valid_path_images = f'{outpath}\/valid\/images\/'\n\n    for p in [train_path_labels, train_path_images, valid_path_labels, valid_path_images]:\n        os.makedirs(p, exist_ok=True)\n        \n    dump(train_df, train_path_labels, train_path_images)\n    dump(valid_df, valid_path_labels, valid_path_images)\n    \n    os.system(f'zip -rmq {savename}.zip files')","42566b6f":"!ls","b7885a67":"%%time\n\nfor (train_df, valid_df, savename) in folds_info:\n    save(train_df, valid_df, savename)","31898458":"!ls -hl","32d3c743":"As we can see the arvalis dataset was collected in multiple sets. Let's try to combine all sources into one.","96bc4561":"We use GroupKFold on the combined_src as groups to ensure that no two splits contain elements from the same group.","90dbc6cf":"RRES seems to have a good 85%-15% split. So we can use RRES as the validation set and the othes as the training set.\nLet's see how do the samples from each location look."}}