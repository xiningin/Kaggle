{"cell_type":{"d26a6005":"code","82bc40cc":"code","4ef3bbcb":"code","3068115e":"code","d5fcf4cf":"code","28b05db5":"code","8a0ff8b9":"code","1f7101a8":"code","bdb3d3a3":"code","868b0e0b":"code","c2629099":"code","eedde5b6":"code","ff1d26ae":"code","89c617b9":"code","36459e62":"code","efd6d550":"code","99fd034a":"code","d8d501fe":"code","99cc5ec6":"code","f790bfe9":"code","0cb6b973":"code","d1a19ee9":"code","db4e2e32":"code","1969a115":"code","ba8c7f5c":"code","2279a9ce":"code","419316d3":"code","d19d464b":"code","df2eff3c":"code","d50f9a23":"markdown","3dec1a3c":"markdown"},"source":{"d26a6005":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\nplt.style.use(\"fivethirtyeight\")\n\n%matplotlib inline\n\n# For reading stock data from yahoo\nfrom pandas_datareader.data import DataReader\n\n# For time stamps\nfrom datetime import datetime","82bc40cc":"print(datetime.now())\n","4ef3bbcb":"# The tech stocks we'll use for this analysis\ntech_list = ['FB', 'NFLX', 'TSLA', 'BAC']\n\n# Set up End and Start times for data grab\nend = datetime.now()\nstart = datetime(end.year - 1, end.month, end.day)\n\n\n#For loop for grabing yahoo finance data and setting as a dataframe\nfor stock in tech_list:   \n    # Set DataFrame as the Stock Ticker\n    globals()[stock] = DataReader(stock, 'yahoo', start, end)","3068115e":"print('type of apple: {}, apple: {}'.format(type(NFLX), NFLX))","d5fcf4cf":"company_list = [FB, NFLX, TSLA, BAC]\ncompany_name = ['FB', 'NFLX', 'TSLA', 'BAC']\n\nfor company, com_name in zip(company_list, company_name):\n    company[\"company_name\"] = com_name\n    \ndf = pd.concat(company_list, axis=0)\ndf.tail(10)","28b05db5":"# Summary Stats\nFB.describe()","8a0ff8b9":"# General info\nFB.info()","1f7101a8":"# Let's see a historical view of the closing price\n\n\nplt.figure(figsize=(14, 8))\n#plt.subplots_adjust(top=1.25, bottom=1.2)\n\nfor i, company in enumerate(company_list, 1):\n    plt.subplot(2, 2, i)\n    company['Adj Close'].plot()\n    plt.ylabel('Adj Close')\n    plt.xlabel(None)\n    plt.title(f\"{tech_list[i - 1]}\")","bdb3d3a3":"# Now let's plot the total volume of stock being traded each day\nplt.figure(figsize=(20, 8))\nplt.subplots_adjust(top=1.25, bottom=1.2)\n\nfor i, company in enumerate(company_list, 1):\n    plt.subplot(2, 2, i)\n    company['Volume'].plot()\n    plt.ylabel('Volume')\n    plt.xlabel(None)\n    plt.title(f\"{tech_list[i - 1]}\")","868b0e0b":"ma_day = [10, 20, 50]\n\nfor ma in ma_day:\n    for company in company_list:\n        column_name = f\"MA for {ma} days\"\n        company[column_name] = company['Adj Close'].rolling(ma).mean()","c2629099":"print(NFLX.columns)","eedde5b6":"NFLX.head(20)","ff1d26ae":"df.groupby(\"company_name\").hist(figsize=(12, 12));","89c617b9":"#company_name = ['FB', 'NFLX', 'TSLA', 'BAC']","36459e62":"fig, axes = plt.subplots(nrows=2, ncols=2)\nfig.set_figheight(8)\nfig.set_figwidth(15)\n\nFB[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[0,0])\naxes[0,0].set_title('FB')\n\nNFLX[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[0,1])\naxes[0,1].set_title('NFLX')\n\nTSLA[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[1,0])\naxes[1,0].set_title('TSLA')\n\nBAC[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[1,1])\naxes[1,1].set_title('BAC')\n\nfig.tight_layout()","efd6d550":"# We'll use pct_change to find the percent change for each day\nfor company in company_list:\n    company['Daily Return'] = company['Adj Close'].pct_change()\n\n# Then we'll plot the daily return percentage\nfig, axes = plt.subplots(nrows=2, ncols=2)\nfig.set_figheight(8)\nfig.set_figwidth(15)\n\nFB['Daily Return'].plot(ax=axes[0,0], legend=True, linestyle='--', marker='o')\naxes[0,0].set_title('FB')\n\nNFLX['Daily Return'].plot(ax=axes[0,1], legend=True, linestyle='--', marker='o')\naxes[0,1].set_title('NFLX')\n\nTSLA['Daily Return'].plot(ax=axes[1,0], legend=True, linestyle='--', marker='o')\naxes[1,0].set_title('TSLA')\n\nBAC['Daily Return'].plot(ax=axes[1,1], legend=True, linestyle='--', marker='o')\naxes[1,1].set_title('BAC')\n\nfig.tight_layout()","99fd034a":"# Note the use of dropna() here, otherwise the NaN values can't be read by seaborn\nplt.figure(figsize=(12, 12))\n\nfor i, company in enumerate(company_list, 1):\n    plt.subplot(2, 2, i)\n    sns.distplot(company['Daily Return'].dropna(), bins=100, color='purple')\n    plt.ylabel('Daily Return')\n    plt.title(f'{company_name[i - 1]}')\n# Could have also done:\n#AAPL['Daily Return'].hist()","d8d501fe":"# Grab all the closing prices for the tech stock list into one DataFrame\nclosing_df = DataReader(tech_list, 'yahoo', start, end)['Adj Close']\n\n# Let's take a quick look\nclosing_df.head() ","99cc5ec6":"#company_name = ['FB', 'NFLX', 'TSLA', 'BAC']","f790bfe9":"# Make a new tech returns DataFrame\ntech_rets = closing_df.pct_change()\ntech_rets.head()","0cb6b973":"# Comparing Google to itself should show a perfectly linear relationship\nsns.jointplot('FB', 'FB', tech_rets, kind='scatter', color='seagreen')","d1a19ee9":"tech_rets[['FB', 'NFLX', 'TSLA', 'BAC']].corr()","db4e2e32":"# We'll use joinplot to compare the daily returns of Google and Microsoft\nsns.jointplot('FB', 'NFLX', tech_rets, kind='scatter')","1969a115":"# We can simply call pairplot on our DataFrame for an automatic visual analysis \n# of all the comparisons\n\nsns.pairplot(tech_rets, kind='scatter') # reg","ba8c7f5c":"# Set up our figure by naming it returns_fig, call PairPLot on the DataFrame\nreturn_fig = sns.PairGrid(tech_rets.dropna())\n\n# Using map_upper we can specify what the upper triangle will look like.\nreturn_fig.map_upper(plt.scatter, color='purple')\n\n# We can also define the lower triangle in the figure, inclufing the plot type (kde) \n# or the color map (BluePurple)\nreturn_fig.map_lower(sns.kdeplot, cmap='cool_d')\n\n# Finally we'll define the diagonal as a series of histogram plots of the daily return\nreturn_fig.map_diag(plt.hist, bins=30)","2279a9ce":"# Set up our figure by naming it returns_fig, call PairPLot on the DataFrame\nreturns_fig = sns.PairGrid(closing_df)\n\n# Using map_upper we can specify what the upper triangle will look like.\nreturns_fig.map_upper(plt.scatter,color='purple')\n\n# We can also define the lower triangle in the figure, inclufing the plot type (kde) or the color map (BluePurple)\nreturns_fig.map_lower(sns.kdeplot,cmap='cool_d')\n\n# Finally we'll define the diagonal as a series of histogram plots of the daily return\nreturns_fig.map_diag(plt.hist,bins=30)","419316d3":"# Let's go ahead and use sebron for a quick correlation plot for the daily returns\nsns.heatmap(tech_rets.corr(), annot=True, cmap='summer')","d19d464b":"sns.heatmap(closing_df.corr(), annot=True, cmap='summer')","df2eff3c":"# Let's start by defining a new DataFrame as a clenaed version of the oriignal tech_rets DataFrame\nrets = tech_rets.dropna()\n\narea = np.pi*20\n\nplt.figure(figsize=(12, 10))\nplt.scatter(rets.mean(), rets.std(), s=area)\nplt.xlabel('Expected return')\nplt.ylabel('Risk')\n\nfor label, x, y in zip(rets.columns, rets.mean(), rets.std()):\n    plt.annotate(label, xy=(x, y), xytext=(50, 50), textcoords='offset points', ha='right', va='bottom', \n                 arrowprops=dict(arrowstyle='-', color='blue', connectionstyle='arc3,rad=-0.3'))","d50f9a23":"## Concluion \n\n### Facebook is hre best investment and least risk \n\n","3dec1a3c":"\n# Risk analysis in investing \n\n\n### Facebook Inc (FB)\n### Netflix Inc (NFLX)\n### Tesla Inc (TSLA)\n### Bank of America Corp (BAC)\n\n\n#### Start date from 2021-03-30 08:55:09.046103\n\n\n\n\n\n\n\n[![image.png](attachment:image.png)](http:\/\/)"}}