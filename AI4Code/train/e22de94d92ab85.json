{"cell_type":{"c11c0032":"code","6fca73bb":"code","e318b89c":"code","5f011c94":"code","6c95d593":"code","c2a9f81b":"code","978cf123":"code","f5eac26f":"code","a9836c3e":"code","5b119f6f":"code","1695effd":"code","2a1b75cc":"code","2fcee858":"code","f8a17c3d":"code","170b5ae1":"code","cb6a67cf":"code","1fedc23c":"code","c0164a4d":"code","b6203104":"code","6acb2b14":"code","04c5993e":"markdown","8f58e410":"markdown","0faa00f8":"markdown"},"source":{"c11c0032":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6fca73bb":"import matplotlib.pyplot as plt\nimport datetime","e318b89c":"df = pd.read_csv('\/kaggle\/input\/us-accidents\/US_Accidents_May19.csv')\ndf.columns","5f011c94":"df.info()","6c95d593":"print('There are {} accidents in the data'.format(len(df)))","c2a9f81b":"df.Severity.value_counts(normalize=True).sort_index().plot.bar()\nplt.grid()\nplt.title('Severity')\nplt.xlabel('Severity')\nplt.ylabel('Fraction');","978cf123":"bool_cols = [col for col in df.columns if df[col].dtype ==np.dtype('bool')]\nbooldf = df[bool_cols]\nnot_one_hot = booldf[booldf.sum(axis=1) > 1]\nprint('There are {} non one hot metadata rows, which are {:.1f}% of the data'.format(len(not_one_hot),100*len(not_one_hot)\/len(df)))","f5eac26f":"bools = booldf.sum(axis=0)","a9836c3e":"bools","5b119f6f":"bools.plot.pie(figsize=(13,13))\nplt.ylabel('')\nplt.title('Proximity to Traffic Object');","1695effd":"st = pd.to_datetime(df.Start_Time, format='%Y-%m-%d %H:%M:%S')\nend = pd.to_datetime(df.End_Time, format='%Y-%m-%d %H:%M:%S')","2a1b75cc":"diff = (end-st)\ntop20 = diff.astype('timedelta64[m]').value_counts().nlargest(20)\nprint('top 20 accident durations correspond to {:.1f}% of the data'.format(top20.sum()*100\/len(diff)))\n(top20\/top20.sum()).plot.bar(figsize=(14,14))\nplt.title('Accident Duration [Minutes]')\nplt.xlabel('Duration [minutes]')\nplt.ylabel('Fraction');","2fcee858":"df.head()","f8a17c3d":"df['time'] = pd.to_datetime(df.Start_Time, format='%Y-%m-%d %H:%M:%S')\ndf = df.set_index('time')\ndf.head()","170b5ae1":"freq_text = {'D':'Daily','W':'Weekly','Y':'Yearly'}\nplt.subplots(1,3,figsize=(21,7))\nfor i, (fr,text) in enumerate(freq_text.items(),1):\n    plt.subplot(1,3,i)\n    sample = df.ID['2016':].resample(fr).count()\n    sample.plot(style='.')\n    plt.title('Accidents, {} count'.format(text))\n    plt.xlabel('Date')\n    plt.ylabel('Accident Count');","cb6a67cf":"years = ['2016','2017','2018']\nfig, _ = plt.subplots(1,3,figsize=(21,7), sharex='all', sharey='all')\n\nfig.suptitle('Acccidents by month for Different Years')\nplt.xlabel('month')\nplt.ylabel('Accidents')\nfor i, year in enumerate(years,1):\n    plt.subplot(1,3,i)\n    sample = df.loc[year].ID.resample('M').count()\n    sample.plot()\n    plt.ylim(0,100000)\n    plt.title('Accidents, {} count'.format(text))\n    plt.xlabel('Date')\n    plt.ylabel('Accident Count');","1fedc23c":"df['Weekday'] = df.index.weekday_name\nweekday = df.groupby('Weekday').ID.count()\nweekday = weekday\/weekday.sum()\ndayOfWeek=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\nweekday[dayOfWeek].plot.bar()\nplt.title('Acccidents by Weekday')\nplt.xlabel('Weekday')\nplt.ylabel('Accidents');","c0164a4d":"years = ['2016','2017','2018']\nfig, _ = plt.subplots(1,3,figsize=(21,7), sharex='all', sharey='all')\n\nfig.suptitle('Acccidents by Weekday for Different Years')\nplt.xlabel('Weekday')\nplt.ylabel('Accidents')\nfor i, year in enumerate(years,1):\n    weekday = df.loc[year].groupby('Weekday').ID.count()\n    weekday = weekday\/weekday.sum()\n    dayOfWeek=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\n    plt.subplot(1,3,i)\n    plt.title(year)\n    weekday[dayOfWeek].plot.bar()","b6203104":"import folium\nsdf = df.sample(10000)\nm = folium.Map(location=[sdf.Start_Lat.mean(),sdf.Start_Lng.mean()], zoom_start=4,tiles=\"CartoDB dark_matter\")\nsdf.apply(lambda row:folium.CircleMarker(location=[row[\"Start_Lat\"], row[\"Start_Lng\"]],radius=1).add_to(m), axis=1)\nm.save('.\/map.html')","6acb2b14":"from IPython.display import FileLink\nprint(\"The following is a map of 10000 accidents\")\nFileLink(r'map.html')","04c5993e":"### Most common durations are 'Below half an hour', 'exactly 1h', 'Below 3\/4 of an hour', 'Below 1h' respectively. Hence they are probably approximate, and probably correspond to the time it took to resolve the accident rather than the accident itself","8f58e410":"### So there is no phenomena here\n# Map","0faa00f8":"### The are two populations for days (prob. weekday and weekend) as they merge when we look at weeks. There is some seasonal pattern, and the amount increases each year"}}