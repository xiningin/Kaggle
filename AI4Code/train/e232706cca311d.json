{"cell_type":{"0c5ecec5":"code","ed9312da":"code","18d4c3e0":"code","e6f00e0b":"code","213172dc":"code","9cecd713":"code","c6b5f958":"code","dbaad644":"code","808cb0c3":"code","f4ef0e9a":"code","ee173a34":"code","33a7ddfc":"code","03535776":"code","a3f912aa":"code","dcaadfc1":"code","9b5d7d97":"code","8733a45c":"code","092012a6":"code","2aa2a8e2":"code","a3641c7f":"code","c586610d":"code","57d124eb":"code","f32c995d":"code","268f9799":"code","db700277":"code","6d6fe5c3":"code","624e5d1d":"code","0e02ed96":"code","927eaed0":"code","42156571":"code","5f9c4406":"code","bf091051":"code","8d8f5fe6":"code","6bfb720c":"code","3b5a6306":"code","c10174be":"code","1bc45a6f":"code","26ac7dce":"code","a6493779":"code","81c83c58":"code","0eb07e1c":"code","9fb693d6":"code","56ad1ecb":"code","58aa2c15":"code","996dd204":"code","d5b5ff8c":"code","ecd780ce":"code","69e34237":"code","2811beaa":"code","81165836":"code","6441d4bc":"code","ba1217c8":"code","ef7b9fbd":"code","164fd24c":"code","876c4d0a":"code","91d949a7":"code","262390be":"code","d743a80d":"code","137514ba":"code","39330673":"code","84990651":"code","c4ab2074":"code","a006e4ca":"code","86507173":"code","e15d2ee1":"code","cfe2f1a9":"code","42c6a23e":"markdown","e13723ae":"markdown","69035c60":"markdown","06f499a3":"markdown","1d4f3094":"markdown","48fa1ed7":"markdown","6a049a37":"markdown","b536021a":"markdown","e6877bf4":"markdown","257e7882":"markdown"},"source":{"0c5ecec5":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.figure_factory","ed9312da":"from IPython.display import display\n\npd.options.display.max_columns = None\npd.options.display.max_rows = 15\n","18d4c3e0":"# express\nfig = px.line(x=['a', 'b', 'c'], y = [1, 3, 2], title='Express line')\nfig","e6f00e0b":"# see figures the way Plotly.js sees them\nprint(fig)","213172dc":"# accessing attributes\nfig.data[0].line.color","9cecd713":"# accessing attributes\nfig.data[0].line.color = '#FF0000'","c6b5f958":"fig","dbaad644":"# low level: dict\nimport plotly.io\nfig = {\n    \"data\": [{\"type\": \"bar\",\n              \"x\": [1, 2, 3],\n              \"y\": [1, 3, 2]}],\n    \"layout\": {\"title\": {\"text\": \"A Figure made with a Dictionary\"}}\n}\n\nplotly.io.show(fig)\n\n","808cb0c3":"# higher level: graph_objects\nimport plotly.graph_objects\n\nfig = plotly.graph_objects.Figure(\n    data=[plotly.graph_objects.Bar(x=[1, 2, 3], y=[1, 3, 2])],\n    layout=plotly.graph_objects.Layout(\n        title=plotly.graph_objects.layout.Title(\n            text='A Figure made with graph_objects'\n        )\n    )\n)\nfig","f4ef0e9a":"dir(plotly.express.data)","ee173a34":"iris_data = plotly.express.data.iris()\niris_data","33a7ddfc":"iris_data['species'].value_counts()","03535776":"# highest level (recommended)\nfig = plotly.express.scatter(data_frame=iris_data, x='sepal_width',\n                             y='sepal_length', color='species',\n                             title='Iris figure using Plotly Express')\nfig","a3f912aa":"plotly.express.scatter(data_frame=iris_data, x='sepal_width',\n                     y='sepal_length', color='species', facet_col='species',\n                       size='petal_width',\n                     title='Iris figure using Plotly Express')","dcaadfc1":"iris_data.loc[:, 'sepal_length':'species']","9b5d7d97":"plotly.express.scatter_matrix(data_frame=iris_data.loc[:, 'sepal_length':'species'], color='species')","8733a45c":"np.meshgrid([1, 2, 3], [1, 2, 3])","092012a6":"x, y = np.meshgrid(np.arange(-1, 2, 0.3), np.arange(-1, 4, 0.3))\nu = np.cos(x) * y\nv = np.sin(x) * y\n\nfig = plotly.figure_factory.create_quiver(x, y, u, v)\nfig","2aa2a8e2":"dir(plotly.express.data)","a3641c7f":"plotly.express.data.wind()","c586610d":"plotly.express.data.experiment()","57d124eb":"plotly.express.data.gapminder()","f32c995d":"from plotly.express.data import *","268f9799":"tips()","db700277":"plotly.express.data.stocks()","6d6fe5c3":"plotly.express.data.carshare()","624e5d1d":"plotly.express.data.election()","0e02ed96":"import plotly.express as px","927eaed0":"df_gap = px.data.gapminder()\ndf_gap","42156571":"df_gap.info()","5f9c4406":"df_gap['year']","bf091051":"pd.to_datetime?\n","8d8f5fe6":"pd.to_datetime(df_gap['year'], format='%Y').plot(kind='density')","6bfb720c":"df_gap['year'] = pd.to_datetime(df_gap['year'], format='%Y')\ndf_gap.info()","3b5a6306":"df_gap.describe()","c10174be":"df_gap['year'].min()","1bc45a6f":"df_gap['year'].max()","26ac7dce":"df_gap","a6493779":"px.bar?","81c83c58":"df_gap.columns","0eb07e1c":"df_gap['lifeExp'].max()","9fb693d6":"fig = px.bar(df_gap, x='country', y='lifeExp')\nfig","56ad1ecb":"fig = px.scatter(df_gap, y='country', x='lifeExp', facet_row='continent')\nfig","58aa2c15":"df_gap['continent'].unique()","996dd204":"px.scatter?","d5b5ff8c":"df_gap","ecd780ce":"fig = px.scatter(df_gap.loc[df_gap['continent'] == 'Europe'], y='country', x='lifeExp', \n                 hover_data=['year'])\nfig","69e34237":"fig = px.scatter(\n    df_gap.loc[df_gap['continent'] == 'Europe'], x='year', y='lifeExp', size='lifeExp',\n    color='country'\n                )\nfig","2811beaa":"pd.Series.plot?","81165836":"df_gap['gdpPercap'].loc[(df_gap['gdpPercap'] < 20000) & (df_gap['gdpPercap'] > 2000)].plot(kind='box');","6441d4bc":"# list comprehension\n['high' if i > 5000 else 'low' for i in df_gap['gdpPercap']]","ba1217c8":"df_gap['gdp_cat'] = ['high' if i > 5000 else 'low' for i in df_gap['gdpPercap']]","ef7b9fbd":"fig = px.scatter(\n    df_gap.loc[df_gap['continent'] == 'Europe'], x='year', y='lifeExp',\n    color='country', facet_col='gdp_cat'\n                )\nfig","164fd24c":"df_gap['gdp_cat'] = ['high' if i > 5000 else 'low' for i in df_gap['gdpPercap']]","876c4d0a":"df_gap_am = df_gap.loc[df_gap['continent'] == 'Americas']","91d949a7":"df_gap_am","262390be":"df_gap_am.describe()","d743a80d":"df_gap_am['gdp_cat'] = ['high' if i > df_gap_am['gdpPercap'].median() else 'low' for i in df_gap_am['gdpPercap']]","137514ba":"df_gap_am","39330673":"fig = px.scatter(\n    df_gap_am, x='year', y='lifeExp',\n    color='country', facet_col='gdp_cat', size='pop'\n                )\nfig","84990651":"df_gap_am.columns","c4ab2074":"fig","a006e4ca":"fig = px.scatter(\n    df_gap_am, x='year', y='lifeExp',\n    color='country', marginal_y='box',  facet_row='gdp_cat'\n                )\nfig","86507173":"import plotly.figure_factory as ff\n\ndf = [dict(Task=\"Job A\", Start='2009-01-01', Finish='2009-02-28'),\n      dict(Task=\"Job B\", Start='2009-03-05', Finish='2009-04-15'),\n      dict(Task=\"Job C\", Start='2009-02-20', Finish='2009-05-30')]\n\nfig = ff.create_gantt(df)\nfig.show()","e15d2ee1":"fig = px.line(\n    df_gap.loc[df_gap['continent'] == 'Oceania'], x='year', y='lifeExp',\n    color='country'\n                )\nfig","cfe2f1a9":"fig = px.bar(df_gap, x='country', y='lifeExp', facet_col='continent')\nfig","42c6a23e":"### What is a figure made of?\n\nA figure is a __tree__ of attributes. The root attributes are: data, layout, and\nframes.\n\nhttps:\/\/plotly.com\/python\/reference\/\n\n_What is a tree?_\nA metaphor for a data type that has:\n- Leaves.\n    - Nodes with no children.\n- Root.\n","e13723ae":"# Creating and updating figures\n\n__Recommended strategy from Plotly docs__\n\n    Create entire figures at once using Plotly Express and manipulate the\n    result if you need to create something more complex.","69035c60":"## Figure factories\nFigure factories produce graph_object figures for specialized domains.","06f499a3":"## Life expectancy for each country","1d4f3094":"### data\n\nThe `data` attribute is a list of \"traces\", which are dictionaries containing\n types of graphs to be plotted in separate subplots.","48fa1ed7":"# Gapminder","6a049a37":"### layout\n\nThe `layout` attribute is a dict that tells Plotly how to position parts of\nthe figure.\n- Margins and size.\n- Fonts.\n- Legend and color bars.\n- Subplots\n- Interactive controls","b536021a":"### frames\n`Frames` are used in __animated plots__. It is a list of dicts containing\nattributes for each frame in an animation.","e6877bf4":"# The figure data structure in Python\n\n## Overview\n\nThe Plotly Python package is an interface to the Plotly.js library.\n\nFigures are represented as Python `dicts` or `plotly.graph_objects`. Plotly\nserializes figures into JSON and input them into Plotly.js. Because of this\nflexibility, Plotly is available in other languages like R or Julia.\n\nPlotly has two main libraries for plotting:\n- `plotly.graph_objects.Figure`\n- `plotly.express`\n\nPlotly Express is the high-level entry-point to Plotly because it allows you\nto do more with less code. Use Plotly's Figure library if you're already\ncomfortable using Plotly and you want to make more advanced plots.","257e7882":"## Life exp for each country for each decade\n"}}