{"cell_type":{"154e5179":"code","41fcb4ca":"code","b1b591fd":"code","c45e71b6":"code","df428b77":"code","fa06137f":"code","98b19529":"code","5b75a2c6":"code","ca855193":"code","07044297":"code","bd1808df":"code","276ad6a3":"code","2f97fb7c":"code","b93ff7b7":"code","b7e50e40":"code","f9fc2e0d":"code","09ee1765":"code","e287fe05":"code","df061a4b":"code","8c518b63":"code","17ddbba8":"code","682d02da":"code","c6eb24ca":"code","c44b2a00":"code","fd358016":"code","4c5466b4":"code","78702ecf":"code","952a84a0":"code","6fac792e":"code","af9607e1":"code","0f920745":"code","fcb78d5e":"code","8e964739":"code","c5aaa2ff":"code","7db16a32":"code","e85343d9":"code","644fe808":"markdown","0fb78644":"markdown","3ddeef58":"markdown","d67f8dff":"markdown","2fe64a84":"markdown","7e883ae3":"markdown","1a9eaa09":"markdown","79cf1f04":"markdown","2f31090f":"markdown"},"source":{"154e5179":"import pandas as pd\nimport numpy as np\nimport itertools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import adfuller, acf, pacf,arma_order_select_ic\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.arima_model import ARIMA\nimport warnings\nwarnings.simplefilter('ignore')","41fcb4ca":"train=pd.read_csv(\"..\/input\/train.csv\")\ntest=pd.read_csv(\"..\/input\/test.csv\")","b1b591fd":"train.describe()","c45e71b6":"test.describe()","df428b77":"train.sample(6)","fa06137f":"test.sample(6)","98b19529":"df = train.groupby(['Country_Region','Province_State','Date'])['ConfirmedCases'].sum() \\\n                          .groupby(['Country_Region','Province_State']).max().sort_values() \\\n                          .groupby(['Country_Region']).sum().sort_values(ascending = False)\n\ntop10 = pd.DataFrame(df).head(10)\ntop10","5b75a2c6":"fig = px.bar(top10, x=top10.index, y='ConfirmedCases', labels={'x':'Country'},\n             color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Bluyl)\nfig.update_layout(title_text='Confirmed COVID-19 cases by country')\nfig.show()","ca855193":"df_by_date = pd.DataFrame(train.groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'Turkey') &(df_by_date.Date >= '2019-03-01')].sort_values('ConfirmedCases',ascending = True), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Turkey')\nfig.show()","07044297":"df_by_date = pd.DataFrame(train.groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'United States') &(df_by_date.Date >= '2019-03-01')].sort_values('ConfirmedCases',ascending = True), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in US')\nfig.show()","bd1808df":"df_by_date = pd.DataFrame(train.groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'Italy') &(df_by_date.Date >= '2019-03-01')].sort_values('ConfirmedCases',ascending = True), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Italy')\nfig.show()","276ad6a3":"df_by_date = pd.DataFrame(train.groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'Spain') &(df_by_date.Date >= '2019-03-01')].sort_values('ConfirmedCases',ascending = True), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Spain')\nfig.show()","2f97fb7c":"df=train.groupby(['Date','Country_Region']).agg('sum').reset_index()\ndf.tail(5)","b93ff7b7":"train1=pd.read_csv(\"compare.csv\")\n","b7e50e40":"df=train1.groupby(['Date','Country_Region']).sum().reset_index()\ndf.tail(5)","f9fc2e0d":"def pltCountry_cases(ConfirmedCases,*argv):\n    f, ax=plt.subplots(figsize=(25,10))\n    labels=argv\n    for a in argv: \n        country=df.loc[(df['Country_Region']==a)]\n\n        plt.plot(country['Date'],country['ConfirmedCases'],linewidth=3)\n       \n        plt.xticks(rotation=10)\n        plt.legend(labels)\n        ax.set(title='Evolution of the number of cases' )\n  ","09ee1765":"def pltCountry_fatalities(Fatalities,*argv):\n    f, ax=plt.subplots(figsize=(16,5))\n    labels=argv\n    for a in argv: \n        country=df.loc[(df['Country_Region']==a)]\n        plt.plot(country['Date'],country['Fatalities'],linewidth=3)\n        plt.xticks(rotation=40)\n        plt.legend(labels)\n        ax.set(title='Evolution of the number of fatalities' )","e287fe05":"def pltCountry_tests(total_tests,*argv):\n    f, ax=plt.subplots(figsize=(16,5))\n    labels=argv\n    for a in argv: \n        country=df.loc[(df['Country_Region']==a)]\n        plt.plot(country['Date'],country['total_tests'],linewidth=3)\n        plt.xticks(rotation=40)\n        plt.legend(labels)\n        ax.set(title='Evolution of the number of tests' )","df061a4b":"def pltTotal_cases_per_million(total_cases_per_million,*argv):\n    f, ax=plt.subplots(figsize=(16,5))\n    labels=argv\n    for a in argv: \n        country=df.loc[(df['Country_Region']==a)]\n        plt.plot(country['Date'],country['total_tests'],linewidth=3)\n        plt.xticks(rotation=40)\n        plt.legend(labels)\n        ax.set(title='Evolution of the total cases per million' )","8c518b63":"def pltCountry_tests_smooth(new_tests_smoothed,*argv):\n    f, ax=plt.subplots(figsize=(16,5))\n    labels=argv\n    for a in argv: \n        country=df.loc[(df['Country_Region']==a)]\n        plt.plot(country['Date'],country['new_tests_smoothed'],linewidth=3)\n        plt.xticks(rotation=40)\n        plt.legend(labels)\n        ax.set(title='Evolution of the number of tests smoothed' )","17ddbba8":"pltCountry_cases('ConfirmedCases','Turkey')\npltCountry_fatalities('Fatalities','Turkey')\npltCountry_tests('total_tests','Turkey')","682d02da":"pltCountry_cases('ConfirmedCases','Germany')\npltCountry_fatalities('Fatalities','Germany')\npltCountry_tests('total_tests','Germany')","c6eb24ca":"pltCountry_cases('ConfirmedCases','Spain')\npltCountry_fatalities('Fatalities','Spain')\npltCountry_tests_smooth('new_tests_smoothed','Spain')\npltTotal_cases_per_million('pltTotal_cases_per_million','Spain')","c44b2a00":"pltCountry_cases('ConfirmedCases','United Kingdom')\npltCountry_fatalities('Fatalities','United Kingdom')\npltCountry_tests('total_tests','United Kingdom')\npltTotal_cases_per_million('pltTotal_cases_per_million','Spain')","fd358016":"pltCountry_cases('ConfirmedCases', 'Germany','Turkey', 'Italy', 'Spain','Iran','United Kingdom','France')\npltCountry_fatalities('Fatilities','Germany','Turkey', 'Italy', 'Spain','Iran','United Kingdom','France')\npltCountry_tests('total_tests','Germany','Turkey', 'Italy','United Kingdom','France')","4c5466b4":"pltCountry_cases('ConfirmedCases', 'Germany','Turkey', 'Iran','France')\npltCountry_fatalities('Fatilities','Germany','Turkey', 'Iran','France')","78702ecf":"pltCountry_cases('ConfirmedCases', 'Germany','Turkey', 'Iran')\npltCountry_fatalities('Fatilities','Germany','Turkey', 'Iran')","952a84a0":"def pltCountry_tests_smooth(new_tests_smoothed,*argv):\n    f, ax=plt.subplots(figsize=(16,5))\n    labels=argv\n    for a in argv: \n        country=df.loc[(df['Country_Region']==a)]\n        plt.plot(country['Date'],country['new_tests_smoothed'],linewidth=3)\n        plt.xticks(rotation=40)\n        plt.legend(labels)\n        ax.set(title='Evolution of the number of tests smoothed' )\n","6fac792e":"pltCountry_tests_smooth('total_tests','Germany','Turkey','Italy','Iran')","af9607e1":"sns.set(palette = 'Set1',style='darkgrid')\n#Function for making a time serie on a designated country and plotting the rolled mean and standard \ndef roll(country,case='ConfirmedCases'):\n    ts=df.loc[(df['Country_Region']==country)]  \n    ts=ts[['Date',case]]\n    ts=ts.set_index('Date')\n    ts.astype('int64')\n    a=len(ts.loc[(ts['ConfirmedCases']>=10)])\n    ts=ts[-a:]\n    return (ts.rolling(window=4,center=False).mean().dropna())\n\n\ndef rollPlot(country, case='ConfirmedCases'):\n    ts=df.loc[(df['Country_Region']==country)]  \n    ts=ts[['Date',case]]\n    ts=ts.set_index('Date')\n    ts.astype('int64')\n    a=len(ts.loc[(ts['ConfirmedCases']>=10)])\n    ts=ts[-a:]\n    plt.figure(figsize=(16,6))\n    plt.plot(ts.rolling(window=7,center=False).mean().dropna(),label='Rolling Mean')\n    plt.plot(ts[case])\n    plt.plot(ts.rolling(window=7,center=False).std(),label='Rolling std')\n    plt.legend()\n    plt.title('Cases distribution in %s with rolling mean and standard' %country)\n    plt.xticks([])","0f920745":"tsC1=roll('Turkey')\nrollPlot('Turkey')","fcb78d5e":"tsC1=roll('Germany')\nrollPlot('Germany')","8e964739":"tsC1=roll('Italy')\nrollPlot('Italy')","c5aaa2ff":"fig=sm.tsa.seasonal_decompose(tsC1.values,freq=7).plot()","7db16a32":"#Function to check the stationarity of the time serie using Dickey fuller test\ndef stationarity(ts):\n    print('Results of Dickey-Fuller Test:')\n    test = adfuller(ts, autolag='AIC')\n    results = pd.Series(test[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for i,val in test[4].items():\n        results['Critical Value (%s)'%i] = val\n    print (results)\n\n#For China\ntsC=tsC1['ConfirmedCases'].values\nstationarity(tsC)","e85343d9":"def corr(ts):\n    plot_acf(ts,lags=12,title=\"ACF\")\n    plot_pacf(ts,lags=12,title=\"PACF\")\n    \n\n#For Turkey\ncorr(tsC1)","644fe808":"### Confirmed Cases, Fatalities, Total Tests in Turkey (01\/06\/2020-09\/07\/2020)","0fb78644":"### Confirmed Cases, Fatalities, Total Tests in Spain (01\/06\/2020 - 08\/07\/2020)","3ddeef58":"#### Packages","d67f8dff":"### Confirmed Cases, Fatalities, Total Tests in United Kingdom (01\/06\/2020 - 09\/07\/2020)","2fe64a84":"### Confirmed Cases, Fatalities, Total Tests Comparasion (01\/06\/2020 - 09\/07\/2020)","7e883ae3":"### Time Based Evaluation","1a9eaa09":"## Exploratory Data Analysis","79cf1f04":"### Confirmed Cases, Fatalities, Total Tests in Germany (01\/06\/2020 - 05\/07\/2020)","2f31090f":"### Confirmed COVID-19 cases per day in Turkey"}}