{"cell_type":{"54517538":"code","40674b52":"code","280f0bc8":"code","4ff8a150":"code","98b6fd9c":"code","47cec8d8":"code","5824401b":"code","ad2a6bd7":"code","e992386c":"code","17481fa7":"code","cea07b7a":"code","c654979e":"code","e6e6a4d4":"code","be2715cb":"code","15259723":"code","309e8970":"code","5e511965":"code","739da4fc":"code","b0750fd5":"code","8aa4681f":"code","00255371":"code","7de764a9":"markdown","c2bc39ea":"markdown","eecca034":"markdown"},"source":{"54517538":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","40674b52":"train_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","280f0bc8":"y = train_df['label']","4ff8a150":"X = train_df.drop('label',axis=1)","98b6fd9c":"X = X.values.reshape(-1,28,28,1)","47cec8d8":"from matplotlib import pyplot as plt","5824401b":"y[45]","ad2a6bd7":"X = X \/ 255","e992386c":"y[23]","17481fa7":"X.shape","cea07b7a":"from keras.utils import to_categorical","c654979e":"y_cat = to_categorical(y)","e6e6a4d4":"y_cat[0].shape","be2715cb":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation, Dropout, Flatten, Dense, Conv2D, MaxPooling2D","15259723":"model = Sequential()\n\nmodel.add(Conv2D(filters=16, kernel_size=(2,2),input_shape=(28,28,1), activation='relu',))\nmodel.add(MaxPooling2D(pool_size=(1, 1)))\n\nmodel.add(Conv2D(filters=32, kernel_size=(2,2),input_shape=(28,28,1), activation='relu',))\nmodel.add(MaxPooling2D(pool_size=(1, 1)))\n\nmodel.add(Conv2D(filters=64, kernel_size=(2,2),input_shape=(28,28,1), activation='relu',))\nmodel.add(MaxPooling2D(pool_size=(1, 1)))\n\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(10))\nmodel.add(Activation('softmax'))\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","309e8970":"model.summary()","5e511965":"model.fit(X,y_cat,epochs=5)","739da4fc":"test_df = test_df\/255","b0750fd5":"test_df = test_df.values.reshape(-1,28,28,1)","8aa4681f":"test_pred = model.predict(test_df)","00255371":"predictions = np.argmax(test_pred,axis = 1)\npredictions = pd.Series(predictions,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),predictions],axis = 1)\n\nsubmission.to_csv(\"submission_final.csv\",index=False)\n\n","7de764a9":"**Making an CNN**\n","c2bc39ea":"**Data preprocessing**","eecca034":"**Preparing for submission**"}}