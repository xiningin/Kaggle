{"cell_type":{"90272e2f":"code","adb28a5c":"code","cd032be1":"code","af78de22":"code","d77a6537":"code","872a7b05":"code","6cb7b9df":"code","e7c2c855":"code","d8ee1c8f":"code","0d4de452":"code","b387ae9e":"code","76ce159d":"code","d4f05e1a":"code","ffc6e028":"code","f3c3f94a":"code","502f43b2":"code","1cdef69e":"code","6da3f104":"code","d9440881":"code","c2ed580c":"code","bb942a19":"code","3da14094":"code","dd39f0a7":"code","3f951fa8":"code","8f4c3d16":"code","16dac1cd":"code","ded18880":"code","99b7dba0":"code","86d0cec7":"code","7b550c26":"code","0d8e3370":"code","81226e0a":"code","4088db80":"code","49c4d83f":"code","a41842ef":"code","493bdcf4":"code","dcca453a":"code","e7ad125f":"code","d0217dee":"code","49f50a71":"code","2051b454":"code","f8590ae6":"markdown","d0f7f823":"markdown","f3b3fcc7":"markdown","11f78152":"markdown","f560ae39":"markdown","2bdca915":"markdown"},"source":{"90272e2f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nimport warnings\nwarnings.simplefilter('ignore')","adb28a5c":"test_set = pd.read_csv(\"..\/input\/test_V2.csv\")\ntrain = pd.read_csv(\"..\/input\/train_V2.csv\")","cd032be1":"#only one missing WinplacePerc dropping that row\ntrain.dropna(inplace=True)","af78de22":"print(f'Nan values: {train.isnull().values.any()}')","d77a6537":"feature_list = ['assists', 'boosts', 'damageDealt', 'DBNOs',\n                'headshotKills', 'heals', 'killPlace', 'killPoints', 'kills',\n                'killStreaks', 'longestKill', \n                'rankPoints', 'revives', 'rideDistance', 'roadKills',\n                'swimDistance', 'teamKills', 'vehicleDestroys', 'walkDistance',\n                'weaponsAcquired', 'winPoints']","872a7b05":"# Match Totals for all columns in feature_list\nfor x in feature_list:\n    train[f'match_{x}'] = train.groupby('matchId')[x].transform(sum)\n    test_set[f'match_{x}'] = test_set.groupby('matchId')[x].transform(sum)","6cb7b9df":"# Player rate vs match Total \nfor x in feature_list:\n    train[f'{x}_rate'] = (train[x] \/ train[f'match_{x}']).replace([np.inf, -np.inf, np.nan], 0)\n    test_set[f'{x}_rate'] = (test_set[x] \/ test_set[f'match_{x}']).replace([np.inf, -np.inf, np.nan], 0)","e7c2c855":"print(f'Nan values: {train.isnull().values.any()}')","d8ee1c8f":"# Dropping Id's setting y,X and test\ny = train['winPlacePerc']\nX = train.drop(['winPlacePerc','matchType','Id','groupId','matchId'],axis=1)\ntest_pred = test_set.drop(['matchType','Id','groupId','matchId'],axis=1)","0d4de452":"# Create dummy variables for Matchtypes\nmatch = pd.get_dummies(train['matchType'],drop_first=False)\ntmatch = pd.get_dummies(test_set['matchType'],drop_first=False)","b387ae9e":"# Matches to Keep\nkeep_list = ['squad-fpp','squad','solo-fpp','solo']\nX = pd.concat([X,match[keep_list]],axis=1)\ntest_pred = pd.concat([test_pred,tmatch[keep_list]],axis=1)","76ce159d":"# save this variable for the end, so we can delete test_set\ntest_id = test_set['Id']","d4f05e1a":"# Clearing some RAM\ndel test_set\ndel train\ndel match\ndel tmatch\ndel feature_list\ndel keep_list","ffc6e028":"X.head()","f3c3f94a":"# \nplt.figure(figsize=(28,22))\nsns.heatmap(X.corr(),annot=True);","502f43b2":"X.info()","1cdef69e":"# Not this time full  train\n#from sklearn.model_selection import train_test_split","6da3f104":"#X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0, random_state=0)","d9440881":"import lightgbm as lgb","c2ed580c":"# Xentropy seems to be outperforming other linear models\nmy_model = lgb.LGBMRegressor(n_estimators = 10000,\n                             objective= 'xentropy',\n                             metric='l1',\n                             learning_rate = 0.05,\n                             bagging_fraction = 0.9,\n                             colsample_bytree = 0.8,\n                             num_leaves=31)","bb942a19":"my_model.fit(X, y,\n            eval_set=[(X, y)],\n            eval_metric= 'l1',\n            early_stopping_rounds=15,\n             )","3da14094":"#from sklearn import metrics","dd39f0a7":"#y_pred = my_model.predict(X_test)","3f951fa8":"#orig_mae = metrics.mean_absolute_error(y_test, y_pred)\n#print('MAE:', orig_mae)\n#print('MSE:', metrics.mean_squared_error(y_test, y_pred))\n#print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","8f4c3d16":"#print(f'y_pred range: {y_pred.min(), y_pred.max()}')","16dac1cd":"#plt.figure(figsize=(28,14))\n#plt.scatter(y_test,y_pred,alpha=0.05);\n#plt.title('y_test VS y_pred');","ded18880":"#plt.figure(figsize=(12,8));\n#sns.distplot(y, label= 'y',bins=50);\n#sns.distplot(y_pred, label='y_pred',bins=50);\n#plt.title('y vs y_pred distribution');\n#plt.legend();\n#plt.savefig('y_vs_pred_dist.jpg');","99b7dba0":"#plt.figure(figsize=(10,7.5));\n#plt.title('y_test vs y_pred error');\n#sns.distplot((y_test-y_pred),bins=100);","86d0cec7":"lgb.plot_importance(my_model,figsize=(24,18));","7b550c26":"lgb.plot_importance(my_model,importance_type = 'gain',figsize=(24,18));","0d8e3370":"test_pred = my_model.predict(test_pred)","81226e0a":"test_pred","4088db80":"print(f'Length test_pred: {len(test_pred)}')","49c4d83f":"print(f'test_pred range: {test_pred.min(),test_pred.max()}')","a41842ef":"# just to be sure\ntest_pred[test_pred > 1] = 1\ntest_pred[test_pred < 0] = 0","493bdcf4":"plt.figure(figsize=(12,8));\nsns.distplot(y, label= 'y',bins=50);\nsns.distplot(test_pred, label='test_pred',bins=50);\nplt.title('y vs test_pred distribution')\nplt.legend();","dcca453a":"df = pd.DataFrame(test_pred)\ndf.columns = ['winPlacePerc']","e7ad125f":"df = pd.concat([test_id,df],axis=1)","d0217dee":"print(f'y:\\n{y.describe()}\\n')\nprint(f'test_pred:\\n{df.describe()}')","49f50a71":"df.head()","2051b454":"df.to_csv('xen_retry_V8.csv', index=False)","f8590ae6":"# Train\/Test Split","d0f7f823":"# LightGBM","f3b3fcc7":"#### Get Totals per match","11f78152":"# LightGBM Xentropy\n\n### V8\n#### submit score: 0.0492\nX_test score: 0.04500\n* MatchID can get match totals, means etc\n* Create feature_list with columns, for Match totals and player percentage\n* Dropping previous custom features\n* Already at 62 columns\n* Only keeping 4 matchtypes from V1\n* Setting leaves back to 62, from original 124 to prevent overfitting\n* Test looks promising\n\n## V9 - current\n#### submit score: ......\nX_test score: ......\n* V8 was significant improvement\n* Setting leaves back to default (31)\n* Adding more features to feature list\n* Doing full train, so no X_test this time \n\n#### Ideas for further improvement\n* Handlle outliers\n* feature selection\n* There's probarbly some extra data to get with groupby groupId, kills per group etc\n* Add some custum features again\n* Do an average feature list\n* Look into memory management","f560ae39":"# Prediction and Evaluation\n#### Not this time, no Xtest","2bdca915":"# Result"}}