{"cell_type":{"ab5e8056":"code","cad0e378":"code","9c4946a1":"code","c666f174":"code","a5383bed":"code","4a51f9ea":"code","d4b51cc5":"code","ef70bb17":"code","17122252":"code","2a6712e7":"code","2a0220cc":"code","037a91cb":"code","200e423a":"code","05ac603f":"code","3d1bb1dd":"code","37e60b8d":"code","4f462ec3":"code","5f99de46":"markdown","5e46aff1":"markdown","f75be3d9":"markdown","ccc10f60":"markdown","261515fa":"markdown","c6862b12":"markdown","9b10fdb7":"markdown","79440817":"markdown"},"source":{"ab5e8056":"%matplotlib inline\n","cad0e378":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom tqdm import tqdm\nimport gc\nimport matplotlib.pyplot as plt\nimport shap\nimport xgboost as xgb\n\n# load JS visualization code to notebook\nshap.initjs()","9c4946a1":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c666f174":"train = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/test.csv')\nsub = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')\n","a5383bed":"columns = test.columns[1:]\ncolumns\n","4a51f9ea":"target = train['target'].values","d4b51cc5":"cat_features = columns[:10]\ncat_features","ef70bb17":"for feature in cat_features:\n    le = LabelEncoder()\n    le.fit(train[feature])\n    train[feature] = le.transform(train[feature])\n    test[feature] = le.transform(test[feature])","17122252":"train.head()","2a6712e7":"test.head()","2a0220cc":"train_oof = np.zeros((train.shape[0],))\ntest_preds = 0\ntrain_oof_shap = np.zeros((train.shape[0],train.shape[1]-1))\ntest_preds_shap = 0\ntrain_oof.shape","037a91cb":"xgb_params= {\n        \"objective\": \"reg:squarederror\",\n        \"max_depth\": 6,\n        \"learning_rate\": 0.01,\n        \"colsample_bytree\": 0.4,\n        \"subsample\": 0.6,\n        \"reg_alpha\" : 6,\n        \"min_child_weight\": 100,\n        \"n_jobs\": 2,\n        \"seed\": 2001,\n        'tree_method': \"gpu_hist\",\n        \"gpu_id\": 0,\n        'predictor': 'gpu_predictor'\n    }","200e423a":"test = xgb.DMatrix(test[columns])","05ac603f":"NUM_FOLDS = 10\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=0)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(train, target))):\n        #print(f'Fold {f}')\n        train_df, val_df = train.iloc[train_ind][columns], train.iloc[val_ind][columns]\n        train_target, val_target = target[train_ind], target[val_ind]\n        \n        train_df = xgb.DMatrix(train_df, label=train_target)\n        val_df = xgb.DMatrix(val_df, label=val_target)\n        \n        model =  xgb.train(xgb_params, train_df, 3800)\n        temp_oof = model.predict(val_df)\n        temp_oof_shap = model.predict(val_df, pred_contribs=True)\n        temp_test = model.predict(test)\n        temp_test_shap = model.predict(test, pred_contribs=True)\n\n        train_oof[val_ind] = temp_oof\n        test_preds += temp_test\/NUM_FOLDS\n        \n        train_oof_shap[val_ind, :] = temp_oof_shap\n        test_preds_shap += temp_test_shap\/NUM_FOLDS\n        \n        print(mean_squared_error(temp_oof, val_target, squared=False))","3d1bb1dd":"0.8434888431362352","37e60b8d":"mean_squared_error(train_oof, target, squared=False)\n","4f462ec3":"np.save('train_oof', train_oof)\nnp.save('test_preds', test_preds)\nnp.save('train_oof_shap', train_oof_shap)\nnp.save('.test_preds_shap', test_preds_shap)","5f99de46":"Let's applay label encoder to the categorical features.","5e46aff1":"Now let's see what are the SHAP values for this model","f75be3d9":"Next, we calculate the SHAP values for the test set.\n\n","ccc10f60":"Now let's do some plots of these values.","261515fa":"In this notebook we'll explore feature importance using SHAP values. SHAP values are the most mathematically consistent way for getting feature importances, and they work particulalry nicely with the tree-based models. Unfortunately, calculating SHAP values is an **extremely** resource intensive process. However, starting with XGBoost 1.3 it is possible to calcualte these values on GPUs, whcih speeds up the process by a factor of 20X - 50X compared to calculating the same on a CPU. Furthermore, it is also possible to calculate SHAP values for feature interactions. The GPU speedup for those is even more dramatic - it takes a few minutes, as opposed to days or even longer on a CPU.","c6862b12":"Next, we'll calculate SHAP values for featue interactions. There will be 24x24x200,000 + 200,000 numbers that need to be computed.","9b10fdb7":"It took less than 2 minutes to calculate these values. On CPU this would take up to a day to compute.\n\nNow let's take a look at what are the top interactions in this dataset.","79440817":"We will now construct 5 more features out of the top 5 most interactive ones."}}