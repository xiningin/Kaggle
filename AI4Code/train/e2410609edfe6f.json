{"cell_type":{"271591ee":"code","0bba2efd":"code","5ae0fcc2":"code","ff1878e6":"code","0b38cd8f":"code","773e57ce":"code","4215b250":"code","2ac18244":"code","f47e94f0":"code","c33d77b0":"code","9d1d8a29":"code","0b1cd063":"code","e05e3142":"code","b0e80472":"code","0c31de16":"code","1e608023":"code","b2fca8c2":"code","f6f7549b":"code","4afeb910":"code","18413e72":"code","b9283e41":"code","c38f3988":"code","54e0abf0":"code","6f4fcc55":"code","671e5fe9":"code","6bf5585c":"code","feabaa8f":"code","b225784f":"code","64d366bd":"code","4e94bc60":"code","61ee8b7e":"code","a331a6eb":"code","96e8b151":"code","5ded32fc":"code","5d56d61c":"code","4cd50996":"code","cd69ff2f":"code","c5132336":"code","de8c7e92":"code","f53ee4e2":"code","9738d9b4":"code","f7e064af":"code","44304dae":"code","9c02ebd8":"code","138d0b6f":"code","dd62fdb8":"code","531cfdcc":"code","34778aaf":"code","6a1e3850":"markdown","e4ba6f01":"markdown","80030cfb":"markdown","222095d5":"markdown","e0f34140":"markdown","efa8ad3c":"markdown","384dd46b":"markdown","cfe84092":"markdown","089d3d87":"markdown","5fa179e9":"markdown","cf3efd49":"markdown","1db9729e":"markdown","abae8627":"markdown","2f4d71bc":"markdown","961170ec":"markdown","82d7c488":"markdown","f5bea9d0":"markdown","4d3a03a1":"markdown","7984742f":"markdown","506ea5c9":"markdown","4d0b477c":"markdown","98abb30f":"markdown","72052577":"markdown"},"source":{"271591ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0bba2efd":"# !gunzip \/kaggle\/input\/shelter-animal-outcomes\/train.csv.gz -O \/kaggle\nPATH_TRAIN = '\/kaggle\/input\/shelter-animal-outcomes\/train.csv.gz'\nPATH_TEST = '\/kaggle\/input\/shelter-animal-outcomes\/test.csv.gz'\nPATH_SAMPLE = '\/kaggle\/input\/shelter-animal-outcomes\/sample_submission.csv.gz'","5ae0fcc2":"animals = pd.read_csv(PATH_TRAIN, compression='gzip')","ff1878e6":"animals","0b38cd8f":"animals.AnimalType.value_counts().plot(kind='bar')","773e57ce":"animals.OutcomeType.value_counts().plot(kind='bar')","4215b250":"min_count = 1000\nbreeds = animals.Breed.fillna('Unknown')\nbreeds_filtered = breeds.value_counts() > min_count\nbreeds_filtered.values","2ac18244":"animals[animals.AnimalType=='Dog'].Breed.fillna('Unknown').value_counts().head(30).plot(kind='bar')","f47e94f0":"animals[animals.AnimalType=='Cat'].Breed.fillna('Unknown').value_counts().head(30).plot(kind='bar')","c33d77b0":"# We consider a breed 'pure' if the breed name does not contain \"Mix\"\nanimals['PureBred'] = ~animals.Breed.str.contains('Mix', regex=False)\nanimals.PureBred.value_counts()","9d1d8a29":"animals[animals.AnimalType == 'Cat'].PureBred.value_counts().plot(kind='bar')","0b1cd063":"animals[animals.AnimalType == 'Dog'].PureBred.value_counts().plot(kind='bar')","e05e3142":"from datetime import timedelta","b0e80472":"max_int = 20\ntime_map = {f'{n} {word}': n*delta\n            for n in range(max_int+1)\n            for word, delta in [\n                ('day', timedelta(days=1)),\n                ('days', timedelta(days=1)),\n                ('week', timedelta(weeks=1)),\n                ('weeks', timedelta(weeks=1)),\n                ('month', timedelta(days=30)), # close enough\n                ('months', timedelta(days=30)), # close enough\n                ('year', timedelta(days=365)), # close enough\n                ('years', timedelta(days=365)) # close enough\n            ]}\ntime_map[np.nan] = None\ntime_map","0c31de16":"assert all(age in time_map for age in animals.AgeuponOutcome.unique())\nanimals.AgeuponOutcome.unique()\n","1e608023":"animals['AgeInDays'] = animals.AgeuponOutcome.map(time_map).map(lambda age: age.days)","b2fca8c2":"animals.AgeInDays.hist()","f6f7549b":"animals[['OutcomeType', 'AgeInDays']].groupby('OutcomeType').agg(['mean', 'median'])","4afeb910":"animals[(animals.AnimalType=='Dog') & (animals.OutcomeType == 'Died')].AgeInDays.hist()","18413e72":"animals[animals.OutcomeType == 'Euthanasia'].AgeInDays.hist()","b9283e41":"animals[animals.OutcomeType == 'Euthanasia'].OutcomeSubtype.value_counts().plot(kind='bar')","c38f3988":"animals[animals.OutcomeType == 'Return_to_owner'].AgeInDays.hist()","54e0abf0":"animals[animals.OutcomeType == 'Transfer'].AgeInDays.hist()","6f4fcc55":"animals[animals.OutcomeType == 'Transfer'].OutcomeSubtype.value_counts().plot(kind='bar')","671e5fe9":"# TODO: is 'Transfer' a bad outcome?\nanimals['HasBadOutcome'] = animals.OutcomeType.isin(['Euthanasia', 'Died'])","6bf5585c":"animals['HasBadOutcome'].value_counts()","feabaa8f":"animals.head()","b225784f":"animals.Color.unique()","64d366bd":"animals[animals.AnimalType=='Cat'].Color.fillna('Unknown').value_counts().head(40).plot(kind='bar')","4e94bc60":"animals[animals.AnimalType=='Dog'].Color.fillna('Unknown').value_counts().head(40).plot(kind='bar')","61ee8b7e":"def append_column_of_frequent_values(df, base_col_name, new_col_name, min_count, value_other):\n    values = df[base_col_name]\n    counts = pd.value_counts(values)\n    mask_frequent = values.isin(counts[counts > min_count].index)\n\n    # Add default 'other value' to all entries first\n    df[new_col_name] = value_other\n    df[new_col_name][mask_frequent] = df[mask_frequent][base_col_name]\n    \n\n\n\n# counts = pd.value_counts(values)\n# mask_frequent = animals.Color.isin(counts[counts > 100].index)\n\n# # Add column for most frequent colors\n# animals['ColorCleaned'] = 'Other Color'\n# animals['ColorCleaned'][mask_frequent] = animals[mask_frequent]['Color']\n","a331a6eb":"append_column_of_frequent_values(\n    df=animals,\n    base_col_name='Color',\n    new_col_name='ColorCleaned',\n    min_count=80,\n    value_other='Other Color'\n)\n\nanimals['ColorCleaned'].unique()","96e8b151":"animals.ColorCleaned.fillna('Unknown').value_counts().head(50).plot(kind='bar')","5ded32fc":"animals['IsTabby'] = animals.Color.str.contains('Tabby')\nanimals['IsPoint'] = animals.Color.str.contains('Point')\nanimals['IsTortie'] = animals.Color.str.contains('Tortie')","5d56d61c":"animals.head()","4cd50996":"animals.columns.values.tolist()","cd69ff2f":"# multi-class categorical (n_classes > 2)\ncategorical_vars = [\n    'AnimalType',\n    'SexuponOutcome',\n    'ColorCleaned'\n]\n\n# numerical vars, including binary categorical - which we consider numerical\nnumerical_vars = [\n    'AgeInDays',\n    'PureBred',\n    'IsTabby',\n    'IsPoint',\n    'IsTortie'\n]\n\n\ndata = pd.DataFrame()\n\nfor var in categorical_vars:\n    # drop_first ? For interpretability, I prefer to keep all\n    categorical_cols = pd.get_dummies(animals[var])\n    data = data.join(categorical_cols, how='outer')\n    \n# append numerical columns\ndata = pd.concat(\n    [data, animals[numerical_vars]],\n    axis='columns'\n)\n    \ndata","c5132336":"for col in data.columns:\n    if data[col].isnull().values.any():\n        print(f'{col} has NaN value')","de8c7e92":"data['AgeInDays'] = (\n    data['AgeInDays']\n    .fillna(data['AgeInDays'].median())\n)","f53ee4e2":"index = animals['OutcomeType'] != 'Transfer'\n\nX = data[index]\ny = animals[index]['HasBadOutcome']\ny.value_counts()\n\n","9738d9b4":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import metrics\nimport seaborn as sn\nimport matplotlib.pyplot as plt","f7e064af":"# Normalize data by removing mean and scaling to unit variance\nnormalizer = StandardScaler()\nX_norm = normalizer.fit_transform(X)","44304dae":"X_train, X_test, y_train, y_test = train_test_split(X_norm, y, test_size=0.20, random_state=0)","9c02ebd8":"model = LogisticRegression()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)","138d0b6f":"\nvalue_counts = y_test.value_counts()\nguessing_baseline = value_counts[False] \/ (value_counts[False] + value_counts[True])\nprint(f'Always guessing most frequent class (False) yields accuracy: {guessing_baseline}')\nprint(f'Model accuracy: {metrics.accuracy_score(y_test, y_pred)}')","dd62fdb8":"confmat = pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'])\nsn.heatmap(confmat, annot=True)","531cfdcc":"print(metrics.classification_report(y_test, y_pred))","34778aaf":"features = zip(X.columns.values.tolist(), model.coef_[0])\nfeatures = sorted(features, key=lambda ft: abs(ft[1]), reverse=True)\n\npd.DataFrame({\n    'feature': [f[0] for f in features],\n    'weight': [f[1] for f in features]\n}).plot.bar(figsize=(15,6), x='feature', y='weight')","6a1e3850":"## Regression: Can we tell in advance if an animal will face a bad outcome? \n...so that we may give that animal special attention?","e4ba6f01":"## Inspect what the model looks at","80030cfb":"# What other attributes are in the data?\n","222095d5":"## Age in days at outcome","e0f34140":"## Animals that are returned to their owner have a tendency to be older than the whole population of animals in the dataset","efa8ad3c":"## Ignore animals with unknown outcome ('Transfer')\n\nAs we do not know what happens to animals who are transfered, let's ignore them when training the model.","384dd46b":"## What happens to shelter animals?\n\nMost animals are adopted or transfered. Some can be returns to their owner. But also, some acre euthanised (=killed) or die from other causes while at the shelter.","cfe84092":"## Pure-bred vs mix","089d3d87":"## Mark some special fur patterns (cats)","5fa179e9":"## Preprocess color","cf3efd49":"## Unclear: Why is an animal transfered? Age looks similar to whole population","1db9729e":"### Pure bred cats","abae8627":"Classification report without normalization\n\n```\nModel accuracy: 0.9069901790872328\n\n---\n\n              precision    recall  f1-score   support\n\n       False       0.92      0.98      0.95      3069\n        True       0.67      0.36      0.47       393\n\n    accuracy                           0.91      3462\n   macro avg       0.79      0.67      0.71      3462\nweighted avg       0.89      0.91      0.89      3462\n\n```\n\nWith normalization (z-scores instead of raw features)\n\n```\n\nModel accuracy: 0.9072790294627383\n---\n\n              precision    recall  f1-score   support\n\n       False       0.92      0.98      0.95      3069\n        True       0.67      0.36      0.47       393\n\n    accuracy                           0.91      3462\n   macro avg       0.80      0.67      0.71      3462\nweighted avg       0.89      0.91      0.89      3462\n\n\n```","2f4d71bc":"## Prep data for training","961170ec":"## Most animals that die in the shelter are very young","82d7c488":"## Does age differ between outcomes?","f5bea9d0":"## Many animals that are euthanised are also still young","4d3a03a1":"## And why are animals euthanised? Often because they are suffering, sometimes because they are aggressive","7984742f":"## Dog breeds (top 30)","506ea5c9":"## Fill NaN values","4d0b477c":"## A dataset of cats and dogs","98abb30f":"## Cat breeds (top 30)","72052577":"## Animal age"}}