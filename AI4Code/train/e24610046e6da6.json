{"cell_type":{"1530f93d":"code","f170d67a":"code","24d89670":"code","c14d4652":"code","84e3f2bd":"code","bbd439e0":"code","5faa2982":"code","b527aa9e":"code","84aa084e":"code","71c770ae":"code","3e0156e1":"code","b4ba5a9f":"code","e1f20a50":"code","cd620bfd":"code","33acca57":"markdown","4e1173ae":"markdown","bad59b0f":"markdown","5dbe0326":"markdown","2fc3fecd":"markdown","529caf5c":"markdown","7f42433e":"markdown","77974e72":"markdown","06b564e7":"markdown","da825f00":"markdown"},"source":{"1530f93d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f170d67a":"data = pd.read_csv(\"..\/input\/pokemon\/Pokemon.csv\")\nprint(data.head())","24d89670":"print(data.describe())","c14d4652":"print(data.info())","84e3f2bd":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig, axes = plt.subplots(nrows=1, ncols=1, figsize=(10,10))\nax = sns.scatterplot(data[\"Attack\"], data[\"Defense\"], color='b')\nplt.show()","bbd439e0":"data = data.sort_values(\"Attack\", ascending=False)\nprint(data[data[\"Defense\"] > 200])","5faa2982":"fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(10,10))\nax = sns.scatterplot(data[\"Defense\"], data[\"HP\"], color='b')\nplt.show()","b527aa9e":"sns.boxplot(data=data)","84aa084e":"pkmn = data.drop(['#', 'Total', 'Generation', 'Legendary'], axis=1)\nsns.boxplot(data=pkmn)","71c770ae":"pkmn = pd.melt(pkmn, id_vars=[\"Name\", \"Type 1\", \"Type 2\"], var_name=\"Stat\")","3e0156e1":"sns.set_style(\"whitegrid\")\nwith sns.color_palette([\n    \"#8ED752\", \"#F95643\", \"#53AFFE\", \"#C3D221\", \"#BBBDAF\",\n    \"#AD5CA2\", \"#F8E64E\", \"#F0CA42\", \"#F9AEFE\", \"#A35449\",\n    \"#FB61B4\", \"#CDBD72\", \"#7673DA\", \"#66EBFF\", \"#8B76FF\",\n    \"#8E6856\", \"#C3C1D7\", \"#75A4F9\"], n_colors=18, desat=.9):\n    plt.figure(figsize=(12,10))\n    plt.ylim(0, 275)\n    sns.swarmplot(x=\"Stat\", y=\"value\", data=pkmn, hue=\"Type 1\", dodge=True, size=7)\n    plt.legend(bbox_to_anchor=(1, 1), loc=2, borderaxespad=0.)","b4ba5a9f":"data[\"Average of stats\"] = (data[\"HP\"] + data[\"Attack\"] + data[\"Defense\"] + data[\"Sp. Atk\"] + data[\"Sp. Def\"] + data[\"Speed\"])\/6\n#create a new variable that weights speed slightly less, to see if this changes anything\ndata[\"Average of stats_2\"] = (data[\"HP\"] + data[\"Attack\"] + data[\"Defense\"] + data[\"Sp. Atk\"] + data[\"Sp. Def\"] + (data[\"Speed\"]*0.5))\/6","e1f20a50":"plt.figure(figsize=(10,10))\nsns.scatterplot(data[\"#\"], data[\"Average of stats\"], color='b')\nplt.show()","cd620bfd":"data = data.sort_values(\"Average of stats\", ascending=False)\nprint(data.head())\n\ndata = data.sort_values(\"Average of stats\", ascending=False)\nprint(data.head())","33acca57":"The graph makes it much easier to see a breakdown of all the parameters (apologies that it is at the bottom of the error messages, I'm not sure why the Python interpreter has done this). However, this graph does not help answer the question of which Pokemon is best. I think the best way to do this, is to introduce a new column that averages all of the other stats. For now this will just be a average but I think a weighted average should be used to better find the best Pokemon. I wish to explore if this has any effect by introducing a second new column, that weights speed slightly less.","4e1173ae":"Plotting the average against Pokemon number shows no correlation. However, it can be seen that there are several Pokemon with a higher average than others. If I sort the data by the average column and print the head, I should get the top 5 Pokemon.","bad59b0f":"I was expecting to find some Pokemon in the top right corner of this plot, with high defense and high HP. Since this didn't go how I thought it would, I wish to explore the other parameters in this data set. The easiest way to do this, is to make a box and whisker plot.","5dbe0326":"The Pokemon number and Total columns see to have much larger range than the other features, whilst Generation number and Legendary status have much smaller ranges. These columns do not seem to influence the other factors, so I shall remove them. If this was a machine learning project, I would keep the Legendary column as I think this would be a key factor.","2fc3fecd":"# Conclusion\nWith my new metric that averages all of the other stats, I find it is a three way tie for most powerful Pokemon! They are: **MegaMewtwo X, MegaMewtwo Y and Mega Rayquaza.** I guess when Pokemon are in their Mega form they become more powerful. The exploration of weighing speed in the average also gave an interesting result and changes which Pokemon is the most powerful. In this case, it's a two way tie between **Primal Groudo**n and **Primal Kyogre**. This shows that investigating weighting this averaged sum is worth considering.\nFinal note, it seems legendary pokemon truly are the most powerful since the top 5 pokemon in both situations are legendaries.","529caf5c":"With those columns removed, the data is now much clearer to see. However, this plot does not take into account Pokemon type, so I shall make a swarm plot that expresses this. I need to prepare the data by using the Pandas function melt, which reduces the dimensions of the data set.","7f42433e":"Using the metrics of attack and defense, the strongest Pokemon would be Mega Aggron, with Mega Steelix a close second. Another important metric is a Pokemon's health. I shall plot this against Defense to see if there are any trends here.","77974e72":"I can see that there appears to be two Pokemon that have high defense and moderately high attack. I'd like to see which Pokemon these are.","06b564e7":"# Which Pokemon is the best?\nUsing this dataset I would like to try and work out which Pokemon is the best, once and for all.\nTo begin, the first step is to import the data and then examine it.","da825f00":"For the most part, the data seems to look good. However, there is a large amount of data missing in the Type 2 column. I'm guessing this is because not all of the early Pokemon had two types. As the purpose of this investigation is to find the best Pokemon, this shouldn't be an issue. If I wished to do machine learning with this data, then there would be a problem and I would need to tackle it. It is also worth noting, some Pokemon have duplicate numbers. This is because there are different versions of the same pokemon (e.g. mega evolutions).\n\n## How to find the best Pokemon?\nA quick way to find the best Pokemon would be to look at which Pokemon has both high attack and high defense. So I shall do that first."}}