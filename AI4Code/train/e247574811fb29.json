{"cell_type":{"7cbb29ed":"code","04a0bef9":"code","81c54fcd":"code","90c7b3b3":"code","6dc52be0":"code","da3c55d4":"code","a7f3313d":"code","84ab787f":"code","ce72c1ec":"code","880cda88":"code","c2781b58":"code","19bfe7f9":"code","ab90af6c":"code","f06afe7a":"code","a8a6bff5":"code","0bafe5f6":"code","b77c2478":"code","c22f4c26":"code","06cad84a":"code","6388d592":"markdown"},"source":{"7cbb29ed":"# disabling info and warnings\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '2' \n\n# importing necessary libraries\nimport os\nimport glob\nimport numpy as np\nimport cv2\nimport tensorflow as tf\nfrom tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Dropout, GlobalAveragePooling2D\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\n# Visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns","04a0bef9":"# original labels\norg_labels = [\"Black Sea Sprat\", \"Gilt-Head Bream\", \"Hourse Mackerel\", \"Red Mullet\", \"Red Sea Bream\", \"Sea Bass\", \"Shrimp\", \"Striped Red Mullet\", \"Trout\"]","81c54fcd":"# Reading images along with their labels\ndataset_path = r\"..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset\"\ndata = []\nint_labels = []\nfor folder in org_labels:\n    directory = os.path.join(dataset_path, folder, folder)\n    for img in glob.glob(os.path.join(directory, \"*\")):\n        img = cv2.imread(img, -1)\n        img = cv2.resize(img, (192, 192), interpolation=cv2.INTER_AREA)\n        img = img.astype(\"float32\")\/255.0\n        data.append(img)\n        int_labels.append(org_labels.index(folder))","90c7b3b3":"# converting data to array\ndata = np.array(data, dtype=np.float32)\nint_labels = np.array(int_labels)","6dc52be0":"# one-hot-encoding labels\none_hot_labels = to_categorical(int_labels, num_classes=9)\nprint(one_hot_labels.shape)","da3c55d4":"x_train, x_test, y_train, y_test = train_test_split(data, one_hot_labels, test_size=0.1, shuffle=True, random_state=1332)\nprint(\"Training data:\\n\", x_train.shape, y_train.shape)\nprint(\"Testing data:\\n\", x_test.shape, y_test.shape)","a7f3313d":"# generator to read and augment data on the fly\nbatch_size = 64\ndatagen = ImageDataGenerator(validation_split=0.2)\n\ntrain_generator = datagen.flow(x_train, y_train, batch_size=batch_size, subset=\"training\", shuffle=True)\nval_generator = datagen.flow(x_train, y_train, batch_size=batch_size, subset=\"validation\", shuffle=True)\ntest_generator = datagen.flow(x_test, y_test, batch_size=batch_size, shuffle=True)","84ab787f":"# checking shape of data\nfor images, label in train_generator:\n    print(images.shape, label.shape)\n    break","ce72c1ec":"# plotting images with categorical labels\nimages, labels = next(train_generator)\n\nplt.figure(figsize=(15, 15))\n\nfor i in range(9):\n    plt.subplot(3, 3, i+1)\n    img = cv2.cvtColor(images[i], cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    ind = np.argmax(labels[i])\n    plt.title(org_labels[ind])","880cda88":"# Classifcation using pretrained VGG16\nconv_base = VGG16(weights='imagenet', include_top=False, input_shape=(192, 192, 3))\nconv_base.summary()","c2781b58":"# Defining model\nmodel = Sequential()\nmodel.add(conv_base)\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Flatten())\nmodel.add(Dense(9, activation='softmax'))\nmodel.summary()","19bfe7f9":"conv_base.trainable = False\ncallbacks = [EarlyStopping(monitor=\"val_loss\", patience=2, verbose=1)]\nmodel.compile(optimizer=\"rmsprop\", loss=\"categorical_crossentropy\", metrics=[\"acc\"])","ab90af6c":"# training randomly initialized classifier\nhistory = model.fit(train_generator, epochs=36, steps_per_epoch=(train_generator.n\/\/batch_size),\n          validation_data=val_generator, validation_steps=(val_generator.n\/\/batch_size),\n         callbacks=callbacks)","f06afe7a":"# Plotting loss and accuracy\nacc = history.history['acc']\nval_acc = history.history['val_acc']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(loss))\n\n# Accuracy plot\nplt.plot(epochs, acc, 'b', label='Training Accuracy')\nplt.plot(epochs, val_acc, 'ro', label='Validation Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.legend()\n\n# Loss plot\nplt.figure()\nplt.plot(epochs, loss, 'b', label='Training Loss')\nplt.plot(epochs, val_loss, 'ro', label='Validation Loss')\nplt.title('Training and Validation Loss')\nplt.legend()","a8a6bff5":"# Evaluating Model on test data\nmodel.evaluate(test_generator, batch_size=batch_size, steps=test_generator.n\/\/batch_size)","0bafe5f6":"# classification report\npred = model.predict(x_test)\npred = np.argmax(pred, axis=-1)\n\ntrue_labels = np.argmax(y_test, axis=-1)\nprint(classification_report(true_labels, pred, target_names=org_labels))","b77c2478":"# confusion matrix\ncf_matrix = confusion_matrix(true_labels, pred, normalize='true')\nplt.figure(figsize = (10,6))\nsns.heatmap(cf_matrix, annot=True, xticklabels = sorted(set(true_labels)), yticklabels = sorted(set(true_labels)))\nplt.title('Normalized Confusion Matrix')\nplt.show()","c22f4c26":"# Prdicting Results\nplt.figure(figsize=(20, 20))\n\nfor i in range(25):\n    plt.subplot(5, 5, i+1)\n    img = cv2.cvtColor(x_test[i], cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    ind = np.argmax(y_test[i])\n    plt.title(f\"Original Label: {org_labels[ind]}\\nPredicted Label: {org_labels[pred[i]]}\")","06cad84a":"# saving the model for later use\nmodel.save(\"fish_classifier.h5\")","6388d592":"# Classification of Large Scale Fish Dataset (using Augmented Dataset)"}}