{"cell_type":{"15319d67":"code","3b197f8a":"code","e464cd26":"code","84404dfa":"code","875b44a6":"code","85c8d56d":"code","073fda4a":"code","a2d6c826":"code","3754b938":"code","d1970d59":"code","fb70822f":"code","25d12b17":"code","e57eaa6b":"code","22977d6d":"code","45d414c5":"code","1cc1da51":"code","a0d93f34":"code","408c4a17":"code","55ac4f2c":"code","a6664323":"code","292ae27c":"code","23a19434":"code","b00d17e6":"code","9f52ff67":"code","c704867f":"code","3627421a":"code","d8f63d95":"code","db706f08":"code","cbee071b":"code","4c759cb5":"code","841c8e4c":"code","42eb283d":"code","1197b920":"code","9284a0fb":"code","c085ae52":"code","bc288b62":"code","f0d5fa43":"code","2b96aabb":"code","ece996d2":"markdown","1f0a333f":"markdown","55d84fdf":"markdown","ca01b44b":"markdown","eefbc4bb":"markdown","3db76b19":"markdown","6c5ad57f":"markdown","37078ba4":"markdown","117a35b1":"markdown","ff5e4df8":"markdown","0067a849":"markdown","2767e769":"markdown","12fe951c":"markdown","798e64fb":"markdown","d5d413a6":"markdown"},"source":{"15319d67":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\nimport plotly.graph_objects as go\nimport plotly.express as px\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n%matplotlib inline","3b197f8a":"netflix = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv', index_col=0)\nnetflix.sample(5)","e464cd26":"# Checking datatypes and missing values\n\nnetflix.info()","84404dfa":"# Checking the proportion of missing values in each column\n\nfor i in netflix.columns:\n    missing_prop = netflix[i].isna().sum() \/ netflix.shape[0] * 100\n    if missing_prop > 0:\n        print(i, ': {:.2f}'.format(missing_prop))","875b44a6":"plt.figure(figsize=(12,6) , dpi=100)\nsns.heatmap(netflix.isna(), cmap='binary_r', cbar = False)\nplt.show()","85c8d56d":"# Some changes to the data\n\nnetflix['rating'].replace(np.nan, netflix.rating.mode()[0], inplace=True)\n\nnetflix['date_added'] = pd.to_datetime(netflix['date_added'])\nnetflix['year_added'] = netflix['date_added'].dt.year\n\nnetflix.duration.dropna(inplace=True)","073fda4a":"# Movies and TV Shows distribution\n\nplt.figure(figsize=(8,4), dpi=100)\ngraph = sns.countplot(x='type',data = netflix, palette='hls')\nplt.xticks(fontsize = 15)\nplt.xlabel('Type', fontsize = 18)\nplt.ylabel('Count', fontsize = 15)\n\nfor p in graph.patches:\n    height = p.get_height()\n    graph.text(p.get_x() + p.get_width()\/2., height + 20, height , ha=\"center\", fontsize=12)\n    \n#plt.show()","a2d6c826":"# Separate datasets for Movies and TV Shows\n\nnf_movies = netflix[netflix['type'] == 'Movie']\nprint('Number of movies in the dataset : ', nf_movies.shape[0])\n\nnf_tv = netflix[netflix['type'] == 'TV Show']\nprint('Number of TV Shows in the dataset : ', nf_tv.shape[0])","3754b938":"# Changing datatype\n\nnf_movies['duration'] = nf_movies['duration'].str.replace(' min', '')\nduration = nf_movies['duration'].astype('float64')\nduration.describe()","d1970d59":"plt.figure(figsize=(16,8), dpi=150)\n\ngraph = sns.histplot(duration, color='g', kde=True)\nplt.xlabel('Duration in minutes', fontsize=18)\nplt.ylabel('Count', fontsize=18)\nplt.title('Distribution of duration of movies on Netflix', fontsize=22, weight='semibold', color='g')\nplt.xticks(range(0,300,10), rotation=0)\n\ntext1 = 'We notice, in Movies:\\n\\n   - The distribution is approximately Normal.\\n   - Mean lenght of a movie is about 100 minutes with a standard\\n     deviation of 28.3 minutes.'\nplt.text(150, 300, text1, horizontalalignment='left', size='small', color='black', fontsize=14, alpha=0.8, fontstyle='italic')\n\nfor p in graph.patches:\n    height = p.get_height()\n    graph.text(p.get_x() + p.get_width()\/2., height + 5, height , ha='center', fontsize=8, rotation='90')\n    \nplt.show()","fb70822f":"# Cumulative plot\n\nplt.figure(figsize=(16,8), dpi=200)\nsns.kdeplot(duration, cumulative=True, color='g')\nplt.xlabel('Duration in minutes', fontsize=15)\nplt.title('Cumulative distribution of movies on Netflix', fontsize=20).set_color('g')\nplt.show()","25d12b17":"# Changing datatype\n\nnf_tv['duration'] = nf_tv['duration'].str.replace(' Season', '') # Duration = no. of seasons\nnf_tv['duration'] = nf_tv['duration'].str.replace('s', '')\nseasons = nf_tv['duration'].astype('int64')","e57eaa6b":"seasons_df = pd.DataFrame(seasons.value_counts())\nseasons_df['ratio'] = seasons_df \/ seasons_df.sum() * 100\nseasons_df['cum_sum'] = seasons_df.ratio.cumsum()\nseasons_df.style.bar(subset=['cum_sum'], color='#d65f5f')","22977d6d":"plt.figure(figsize=(16,8), dpi=150)\n\ngraph = sns.histplot(seasons, bins=16, discrete=True, color='r')\n\nplt.xticks(seasons.unique(), fontsize=12)\nplt.yticks(fontsize=12)\nplt.xlabel('Number of Season(s)', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.title('Distribution of TV Shows on Netflix', fontsize=22).set_color('r')\n\nfor p in graph.patches:\n    height = p.get_height()\n    graph.text(p.get_x() + p.get_width()\/2., height + 20, height , ha=\"center\", fontsize=12)\n    \ntext2 =' For TV Shows:\\n\\n    - The disritbution is skewed to the right.\\n    - About 90% of the TV Shows have 3 seasons or fewer.'\nplt.text(6, 1200, text2, horizontalalignment='left', size='small', color='black', fontsize=18, alpha=0.8, fontstyle='italic')\nplt.show()","45d414c5":"most_seasons = nf_tv[['duration', 'title']].sort_values('duration', ascending=False)[:10]\nmost_seasons['duration'] = most_seasons['duration'].astype('int64')\n\nplt.figure(figsize=(16,8), dpi=150)\n\nsns.barplot(data = most_seasons, y='title', x='duration', palette = 'Greys_r')\nplt.ylabel('Title', fontsize=20)\nplt.xlabel('Number of Season(s)', fontsize=18)\nplt.xticks(range(0,11), fontsize=15)\nplt.yticks(fontsize=15)\nplt.title('TV Shows with most Seasons', fontsize=22, weight='semibold')\nplt.show()","1cc1da51":"rat = pd.DataFrame(\n                netflix.groupby('rating')['rating'].count().sort_values(ascending=False) )\\\n                .rename(columns = {'rating':'count'})\\\n                .reset_index()\n    \nrat['ratio'] = rat['count'] \/ rat['count'].sum()\nrat.style.bar(subset=['ratio'], color='#de92c7')","a0d93f34":"plt.figure(figsize = (14,8), dpi=150)\n\ngraph = sns.countplot(x='rating', data = netflix, order=rat.rating)\nplt.xlabel('Rating', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.title('Ratings across Netflix', fontsize=20, weight='semibold')\n\nfor p in graph.patches:\n    height = p.get_height()\n    graph.text(p.get_x() + p.get_width()\/2., height + 20, height , ha=\"center\", fontsize=12)\n\ntext3 = 'Top 3 most used ratings :\\n\\n    1. TV-MA : Intended for adults and may be unsuitable for children under 17.\\n    2. TV-14  : Intended for children ages 14 and older in the company of an adult.\\n    3. TV-PG : Intended for younger children in the company of an adult.'\nplt.text(3, 2000, text3, horizontalalignment='left', size='small', color='black', fontsize=14, alpha=0.8, fontstyle='italic')\nplt.show()","408c4a17":"directors_m = nf_movies.director.dropna()\ndirectors_tv = nf_tv.director.dropna()\n\ntop_10_movie_dir = pd.DataFrame(directors_m.value_counts().sort_values(ascending=False).head(10))\ntop_10_tv_dir = pd.DataFrame(directors_tv.value_counts().sort_values(ascending=False).head(6))","55ac4f2c":"plt.figure(figsize = (12,6), dpi=100)\nsns.barplot(x=top_10_movie_dir.director, y=top_10_movie_dir.index, palette='Reds_r')\n\nplt.xlim([0,22])\nplt.xticks(range(0,21))\nplt.yticks(fontsize=12)\nplt.xlabel('Number of movies directed', fontsize=16, alpha=0.6).set_color('red')\nplt.ylabel(\"Director\", fontsize = 16, alpha=0.6).set_color('red')\nplt.title('Top 10 directors with most movies on Netflix', fontsize=20).set_color('red')\n\nplt.show()","a6664323":"plt.figure(figsize = (10,5), dpi=85)\nsns.barplot(x=top_10_tv_dir.director, y=top_10_tv_dir.index, palette='Greens_r')\nplt.yticks(fontsize=12)\n\nplt.xlim([0,4])\nplt.xticks(range(0,6))\nplt.xlabel('Number of TV Shows directed', fontsize=17, alpha=0.6).set_color('green')\nplt.ylabel(\"Director\", fontsize = 17, alpha=0.6).set_color('green')\nplt.title('Top 10 directors with most TV Shows on Netflix', fontsize=20).set_color('green')\n\nplt.show()","292ae27c":"actors = pd.DataFrame(netflix.cast.value_counts()[:10])\nlabels = ['David Attenborough',\n       'Vatsal Dubey,\\n Julie Tejwani,\\n Rupa Bhimani,\\n Jigna Bhardwaj,\\n Rajesh Kava,\\n Mousam, Swapnil',\n       'Samuel West', 'Jeff Dunham',\n       'David Spade,\\n London Hughes,\\n Fortune Feimster', 'Kevin Hart',\n       'Craig Sechler',\n       'Michela Luci,\\n Jamie Watson,\\n Eric Peterson,\\n Anna Claire Bartlam,\\n Nicolas Aqui,\\n Cory Doran,\\n Julie Lemieux,\\n Derek McGrath',\n       'Bill Burr', 'Iliza Shlesinger']","23a19434":"plt.figure(figsize=(20,10), dpi=100)\n\nsns.barplot(x=labels, y='cast', data=actors, palette='coolwarm_r')\nplt.xticks(fontsize = 12)\nplt.yticks(range(0,21))\nplt.title('Most casted actors on Netflix', fontsize=24, weight='semibold')\nplt.xlabel('Cast', fontsize=18, weight='semibold')\nplt.ylabel('Count', fontsize=18, weight='semibold')\n\ntext4 = '- Sir David Attenborough is the most casted actor in Netflix.\\n  He has been casted on 19 unique titles available on Netflix. '\nplt.text(2, 15.75, text4, horizontalalignment='left', size='small', color='black', fontsize=20, alpha=0.8, fontstyle='italic')\nplt.show()","b00d17e6":"genre_mov  = netflix['listed_in'][netflix.type == 'Movie']\nprint('Total unique movie genres : {}'.format(genre_mov.value_counts().shape[0]))\n\ngenre_tv = netflix['listed_in'][netflix.type == 'TV Show']\nprint('Total unique TV Shows genres : {}'.format(genre_tv.value_counts().shape[0]))","9f52ff67":"# Top genres of movies\n\ngenre_m = pd.DataFrame(genre_mov.value_counts()[:10])","c704867f":"plt.figure(figsize=(16,8), dpi=100)\n\ngraph = sns.barplot(x=genre_m.index, y=genre_m.listed_in, palette='Blues_r')\nplt.xticks(fontsize = 15, rotation=75, color='b')\nplt.title('Top 10 movie genres on Netflix', fontsize=24, weight='semibold', color='b', alpha=0.6)\nplt.xlabel('Genre', fontsize=18, weight='semibold')\nplt.ylabel('Count', fontsize=18, weight='semibold')\n\nfor p in graph.patches:\n    height = p.get_height()\n    graph.text(p.get_x() + p.get_width()\/2., height + 1, int(height) , ha=\"center\", fontsize=12)\n    \nplt.show()","3627421a":"# Top genres for TV Shows\n\ngenre_tv = pd.DataFrame(genre_tv.value_counts()[:10])","d8f63d95":"plt.figure(figsize=(16,8), dpi=100)\n\ngraph = sns.barplot(x=genre_tv.index, y=genre_tv.listed_in, palette='YlGn_r')\nplt.xticks(fontsize = 10, rotation=75, color='g', weight='semibold')\nplt.title('Top 10 TV Show genres on Netflix', fontsize=24, weight='semibold', color='g')\nplt.xlabel('Genre', fontsize=20, weight='semibold')\nplt.ylabel('Count', fontsize=18, weight='semibold')\nplt.ylim([0,250])\n\nfor p in graph.patches:\n    height = p.get_height()\n    graph.text(p.get_x() + p.get_width()\/2., height + 1, int(height) , ha=\"center\", fontsize=12)\n    \nplt.show()","db706f08":"release_m = pd.DataFrame(nf_movies.release_year.value_counts()).sort_index()\nrelease_tv = pd.DataFrame(nf_tv.release_year.value_counts()).sort_index()\nprint(release_m.head(3))\nprint(release_tv.head(3))","cbee071b":"# For movies\n\nplt.figure(figsize=(20,12), dpi=100)\nsns.set_style('white')\n\nsns.pointplot(x = release_m.index, y = release_m.release_year)\nplt.xticks(rotation=90, fontsize = 12)\nplt.yticks(range(0,800,50), fontsize = 12)\nplt.xlabel('Release Year', fontsize=20)\nplt.ylabel('Number of movies', fontsize=20)\nplt.title('Distribution of movies on Netflix as per release year', fontsize=24, weight='bold', color='tab:blue')\n\ntext5 = 'Inferences:\\n\\n   1. We have a unfiorm number of titles per year from year 1942 to 1995.\\n   2. We see an exponential growth of number of movies from the release year 1996 up till 2017.\\n   3. We see a decline in number of movies starting from year 2018 to 2021.\\n       So netflix has been putting fewer newer titles relative to preceding years.'\nplt.text(3, 500, text5, horizontalalignment='left', size='small', color='black', fontsize=20, fontstyle='italic', alpha=0.8)\n\nplt.show()","4c759cb5":"# Distribution for TV Shows\n\nplt.figure(figsize=(16,8), dpi=100)\n\nsns.pointplot(x = release_tv.index, y = release_tv.release_year, color = 'r')\nplt.xticks(rotation=90, fontsize = 12)\nplt.yticks(range(0,500,50), fontsize = 12)\nplt.xlabel('Release Year', fontsize=20)\nplt.ylabel('Number of TV Shows', fontsize=20)\nplt.title('Distribution of TV Shows on Netflix as per release year', fontsize=24, weight='bold', color='tab:red')\n\ntext6 = 'Inferences:\\n  The trend is similar to that of Distribution of movies\\n  but the interval of years without any releases is greater.'\nplt.text(3, 300, text6, horizontalalignment='left', size='small', color='black', fontsize=20, fontstyle='italic', alpha=0.8)\n\nplt.show()","841c8e4c":"# Last decade trend of titles on Netflix\n\ndecade = netflix[netflix.release_year > 2010]\nplt.figure(figsize=(16,10), dpi=100)\nsns.set_style('whitegrid')\n\ngraph = sns.countplot(x=\"release_year\", data=decade, hue=\"type\", palette='RdPu', alpha=0.9)\nplt.xticks(fontsize=12)\nplt.yticks(range(0,800,50), fontsize=12)\nplt.xlabel('Release year', fontsize = 20, color='tab:pink')\nplt.ylabel('Number of titles', fontsize = 20, color='tab:pink')\nplt.title('Last decade trend of titles on Netflix', fontsize=22, color='m', weight='bold', alpha=0.8)\n\nfor p in graph.patches:\n    height = p.get_height()\n    graph.text(p.get_x() + p.get_width()\/2., height + 1, int(height) , ha=\"center\", fontsize=12)\n\nplt.show()","42eb283d":"added    = pd.DataFrame(netflix.year_added.value_counts()).sort_index()\nadded_m  = pd.DataFrame(nf_movies.year_added.value_counts()).sort_index()\nadded_tv = pd.DataFrame(nf_tv.year_added.value_counts()).sort_index()","1197b920":"plot1 = go.Scatter(y=added_m['year_added'], x=added_m.index, name=\"Movies\", marker=dict(color=\"#446cbd\"))\nplot2 = go.Scatter(y=added_tv['year_added'], x=added_tv.index, name=\"TV Shows\", marker=dict(color=\"#53e349\"))\nplot3 = go.Scatter(y=added['year_added'], x=added.index, name=\"Total Content\", marker=dict(color=\"red\"))\n\ndata = [plot1, plot2, plot3]\n\nlayout = go.Layout(title=\"Content added on Netflix over the years\",\n                   margin=dict(l=20, b=20),\n                   legend=dict(x=0.01, y=0.98,\n                               orientation='v'))\n\nfig = go.Figure(data, layout=layout)\nfig.update_layout(plot_bgcolor=\"#e3dfc3\")\nfig.show()","9284a0fb":"country = pd.DataFrame(netflix.country.value_counts()[:15])","c085ae52":"fig = px.pie(country, values=country.country,\n             names=country.index,\n             title='Total Netflix content by Countries',\n             height=800, width=800)\nfig.show()","bc288b62":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\ndescription_mov = ''.join(nf_movies['description'])\ndescription_tv  = ''.join(nf_tv['description'])","f0d5fa43":"# For movies\n\nplt.figure(figsize=(14,14))\n\nwordcloud1 = WordCloud(max_words=150,\n                       background_color=\"white\",\n                       width=1600, height=800).generate(description_mov)\n\nplt.imshow(wordcloud1, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title('WordCloud : Movie description', fontsize = 20, color='r', weight='semibold')\n\nplt.show()","2b96aabb":"# For TV Shows\n\nplt.figure(figsize=(14,14))\n\nwordcloud2 = WordCloud(max_words=100,\n                       background_color=\"white\",\n                       width=1600, height=800,).generate(description_tv)\n\nplt.imshow(wordcloud2,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title('WordCloud : TV Shows description', fontsize = 20, color='r', weight='semibold')\n\nplt.show()","ece996d2":"# Movies and TV Shows across the years","1f0a333f":"# Shows with most seasons","55d84fdf":"# Genres","ca01b44b":"### Upvote if you like the notebook\/kernel  : )","eefbc4bb":"# The Directors on Netflix","3db76b19":"# Content added on netflix over the years","6c5ad57f":"# Netflix Data","37078ba4":"### Thank you for sitting through my notebook","117a35b1":"# Description Wordclouds","ff5e4df8":"# Netflix ratings","0067a849":"# Some EDA","2767e769":"# Most casted Actors","12fe951c":"# Duration of the movies and TV Shows","798e64fb":"## Disclaimer\n\nTitles on you Netflix depend upon your region and they keep changing over time.  \nSo the infernces from the data may or may not be relevant in the future.\n\n","d5d413a6":"# Content by countries"}}