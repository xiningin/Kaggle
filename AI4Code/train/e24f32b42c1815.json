{"cell_type":{"0b4cd30e":"code","4a37b395":"code","7e48a99c":"code","17c19425":"code","f0036c45":"code","6186aff7":"code","28fdf25c":"code","bcbad654":"code","1e8783b8":"code","a63716e3":"code","ac430d30":"code","2f93310f":"code","c9b4cea0":"code","33008b24":"code","839be96f":"code","b738bfb4":"code","0ca4b4f7":"code","7522974f":"code","3950dbaf":"code","23f7c1e4":"code","faceec69":"code","d58b4c4a":"code","b6a0bd83":"code","ee37c71e":"code","ef6e763d":"code","c8d43e01":"code","8ad832ea":"code","b27b6d38":"code","ecd5e94a":"code","8f573698":"code","6f113844":"code","be1fd2f0":"code","b9efc623":"code","c2591881":"code","2f08ffb9":"code","df79cc80":"code","e856dd4a":"code","d084647e":"code","decea48b":"code","f6643ec2":"code","cf31f205":"code","4f7fc03a":"code","6f647545":"code","251549b9":"code","a27f2425":"code","8981aae2":"code","fb562558":"code","a2d84f2b":"code","551f3d3e":"code","4d9fcb44":"code","fd4fe20f":"code","2382def2":"code","e358e382":"code","75a4d34a":"code","89c2cc41":"code","b05096f1":"markdown","0466ccc9":"markdown","def8c7dd":"markdown","0c71c4e4":"markdown","310b7231":"markdown","97bc0766":"markdown","0f67874e":"markdown","10582d25":"markdown","2d5ebca8":"markdown"},"source":{"0b4cd30e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nplt.rcParams['figure.figsize'] = (10,6)\nplt.rcParams['font.size'] = 14 \nsns.set_style('whitegrid')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","4a37b395":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","7e48a99c":"# examine first few rows \ndf.head()","17c19425":"# shape of dataset \ndf.shape ","f0036c45":"# columns \ndf.columns ","6186aff7":"# info \ndf.info() ","28fdf25c":"# summary statistics\ndf.describe() ","bcbad654":"# summary statistics: transpose it \ndf.describe().T","1e8783b8":"# numerical counts \ndf.isnull().sum()","a63716e3":"# visualization of missing values \nsns.heatmap(df.isnull(), cmap='viridis')","ac430d30":"# gender: numerical summary \ndf['Sex'].value_counts()","2f93310f":"#  gender: % \ndf['Sex'].value_counts(normalize=True)","c9b4cea0":"# gender: visual representation\nsns.countplot(x='Sex', data=df)","33008b24":"# gender: separate the gender by class \nsns.countplot(x='Sex', hue='Pclass', data=df)","839be96f":"# let's separate age by child, male, female \ndef male_female_child(passenger): \n    # depending on age and sex \n    age, sex = passenger\n    if age < 16: \n        return 'child'\n    else: \n        return sex ","b738bfb4":"# create a new column \ndf['Person'] = df[['Age','Sex']].apply(male_female_child,axis=1)","0ca4b4f7":"# now take a look \ndf.head(10) ","7522974f":"# numerical summary of Person \ndf['Person'].value_counts() ","3950dbaf":"# numerical summary of Person \ndf['Person'].value_counts(normalize=True) ","23f7c1e4":"# graphical summary of Person\nsns.countplot(x='Person', hue='Pclass', data=df)","faceec69":"# average age \ndf['Age'].mean()","d58b4c4a":"# age distribution\ndf['Age'].hist(bins=50)","b6a0bd83":"# age distribution depending on `Sex` \nfig = sns.FacetGrid(df, hue='Sex', aspect=4)\nfig.map(sns.kdeplot, 'Age', shade=True)\nfig.set(xlim=(0, df['Age'].max()))\nfig.add_legend()","ee37c71e":"# age distribution depending on 'Person' \nfig = sns.FacetGrid(df, hue='Person', aspect=4)\nfig.map(sns.kdeplot, 'Age', shade=True)\nfig.set(xlim=(0, df['Age'].max()))\nfig.add_legend()","ef6e763d":"# age distribution depending on `Pclass` \nfig = sns.FacetGrid(df, hue='Pclass', aspect=4)\nfig.map(sns.kdeplot, 'Age', shade=True)\nfig.set(xlim=(0, df['Age'].max()))\nfig.add_legend()","c8d43e01":"# select cabin column \ndf['Cabin'].head() ","8ad832ea":"# drop missing values \ndeck = df['Cabin'].dropna()","b27b6d38":"# check deck \ndeck.head() ","ecd5e94a":"# extract only first letter \nlevels = [] \nfor level in deck: \n    levels.append(level[0])\n    \n# create cabin df \ncabin_df = pd.DataFrame(levels)\ncabin_df.columns = ['Cabin'] \n\n# examine first few lines \ncabin_df.head()","8f573698":"# plot cabin\nsns.countplot(x='Cabin', data=cabin_df, palette='viridis')","6f113844":"# T doesn't make sense! so let's remove it \ncabin_df = cabin_df[cabin_df.Cabin != 'T']\nsns.countplot(x='Cabin', data=cabin_df, palette='viridis')","be1fd2f0":"# now take a look at dataset again\ndf.head() ","b9efc623":"# let's analyze this question \ndf['Embarked'].value_counts() ","c2591881":"# visualization\nsns.countplot(x='Embarked', data=df)","2f08ffb9":"# separate by Sex \nsns.countplot(x='Embarked', data=df, hue='Sex')","df79cc80":"# separate by Person\nsns.countplot(x='Embarked', data=df, hue='Person')","e856dd4a":"# separate by Pclass \nsns.countplot(x='Embarked', data=df, hue='Pclass')","d084647e":"# create a df 'Alone'\ndf['Alone'] = df.Parch + df.SibSp\ndf['Alone']","decea48b":"# > 0 or == 0 to set alone status \ndf['Alone'].loc[df['Alone'] > 0 ] = 'With Family'\ndf['Alone'].loc[df['Alone'] == 0] = 'Alone'","f6643ec2":"df.head(10) ","cf31f205":"# numerical summary of Alone \ndf['Alone'].value_counts() ","4f7fc03a":"# numerical summary of Alone \ndf['Alone'].value_counts(normalize=True) ","6f647545":"# graphical representation\nsns.countplot(x='Alone', data=df)","251549b9":"# 0 == Survived, 1 == Not Survived \n# numerical summary of Survived \ndf['Survived'].value_counts() ","a27f2425":"# % of Survived \ndf['Survived'].value_counts(normalize=True) ","8981aae2":"# visualizations \nsns.countplot(x='Survived', data=df, palette='Set2')","fb562558":"# depending on Sex \nsns.countplot(x='Survived', data=df, hue = 'Sex')","a2d84f2b":"# depending on Person \nsns.countplot(x='Survived', data=df, hue='Person')","551f3d3e":"# depending on Pclass \nsns.countplot(x='Survived', data=df, hue='Pclass')","4d9fcb44":"# divide `Pclass` depending on `Person`  column\nsns.catplot(x='Person', y='Survived', col='Pclass', kind='bar', data=df)","fd4fe20f":"# divide `Sex` depending on `Person`  column\nsns.catplot(x='Sex', y='Survived', col='Pclass', kind='bar', data=df)","2382def2":"# Did age matter in general?\nsns.lmplot('Age', 'Survived', data=df)","e358e382":"sns.lmplot('Age', 'Survived', data=df, hue='Pclass', palette='winter')","75a4d34a":"# generations \ngenerations = [10, 20,40, 60, 60]\nsns.lmplot('Age', 'Survived', data=df, hue='Pclass', palette='winter', x_bins=generations)","89c2cc41":"generations = [10, 20,40, 60, 60]\nsns.lmplot('Age', 'Survived', data=df, hue='Sex', palette='winter', x_bins=generations)","b05096f1":"## Question #2: What deck were the passengers on and how does that relate to their class?","0466ccc9":"## Question #5: What factors helped someone survive the sinking?","def8c7dd":"## Load Data ","0c71c4e4":"## Check Missing Values ","310b7231":"## Question #3: Where did the passengers come from?","97bc0766":"## Question #4: Who was alone and who was with family?","0f67874e":"## Data Exploration","10582d25":"## Question #1: Who were the passengers on titanic?(Ages, Gender, Class)","2d5ebca8":"# Titanic Survival Analysis \n\n\n## Questions \n1. Who were the passengers on titanic?(Ages, Gender, Class) \n2. What deck were the passengers on and how does that relate to their class?\n3. Where did the passengers come from? \n4. Who was alone and who was with family?\n5. What factors helped someone survive the sinking? "}}