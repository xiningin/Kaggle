{"cell_type":{"ec058b3c":"code","fabcf348":"code","53b525c0":"code","a567d74e":"code","f17cdb81":"code","31851dce":"code","cab06fa6":"code","d543bd58":"code","6a13ba9e":"code","c0e7b407":"code","3c60cb06":"code","f67baff6":"code","d2143bb4":"code","57e99b0a":"code","5f842b1d":"code","80ff566f":"code","d40e06ed":"code","ef1d152f":"code","6dbe4993":"code","f5f5e565":"code","e5c6afe6":"code","01171164":"code","e1422446":"code","d2c8d7fd":"code","ffc65e75":"code","ea57cca8":"code","bc618e37":"code","e598419d":"code","fd451a10":"code","96b33559":"code","a57cb6eb":"code","126122cc":"code","3a280fd2":"code","259f17df":"code","76d978e5":"code","62c7be9f":"code","bdec3c13":"code","8a4f1f8e":"code","43da2a67":"code","b1effa56":"code","f72bd3c8":"code","a8d04d90":"code","ca7b7235":"code","f19015c1":"code","4fe5c88b":"code","d14ece82":"code","92d2ab2c":"code","d69ce20c":"code","170a7a28":"code","be536398":"code","b67bf7ae":"code","51912d4e":"code","d584b313":"code","91bd6545":"code","c0653eda":"code","3f82e1be":"code","d7df55bd":"code","73881e19":"code","f5b8fd7a":"code","f6a78763":"code","9c4e2559":"code","e21a0d86":"code","a4513362":"code","ae438920":"code","a4669a8e":"code","87a26bd0":"code","1b87d058":"code","385adb14":"code","cfd2f9ec":"code","bec746ee":"code","ab361c85":"code","a1facda7":"code","dc49826b":"code","55ba5fbb":"code","6650271d":"code","f13b2471":"code","622a48eb":"code","b2796b2d":"markdown","29422988":"markdown","c447cf5c":"markdown","f4d9fd8f":"markdown","a4956e9f":"markdown","003c2aa2":"markdown","33314239":"markdown","ad36ba41":"markdown","bc4768ea":"markdown","fb6feb4e":"markdown","b0bd070a":"markdown","37aa1ea9":"markdown","4c823545":"markdown","38c51f31":"markdown","11fece52":"markdown","8e716c4b":"markdown","9c66c306":"markdown","628ad51f":"markdown","2d88a5d8":"markdown","fcf1b3c6":"markdown","b788844f":"markdown","8a35e606":"markdown","168d3aac":"markdown","4f4c69c4":"markdown","d1cfc9a4":"markdown","77d9f251":"markdown","a236ef3c":"markdown","c3f1a15d":"markdown","27ec69b1":"markdown","fdf70a86":"markdown","3e8250d6":"markdown","a7e8cc74":"markdown","ff6a73d5":"markdown","0934e0ca":"markdown","fbc514d2":"markdown","9f15ea7b":"markdown","e26803e2":"markdown","a1867189":"markdown","1ebe590a":"markdown","8c761c03":"markdown","e13b0a39":"markdown","904e7135":"markdown","f0458d0a":"markdown","dab9479f":"markdown","99f2407e":"markdown","0102f046":"markdown","76e05a9d":"markdown","746f2fa7":"markdown","a19e66e6":"markdown","5f569ad1":"markdown"},"source":{"ec058b3c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","fabcf348":"#We will use pandas for importing data \npokedata = pd.read_csv('..\/input\/pokemon\/Pokemon.csv')\ncountrydata = pd.read_csv('..\/input\/countries\/countries.csv')","53b525c0":"pokedata.info()\n#pokedata.columns\n#pokedata.describe()\n#pokedata.corr()\n#pokedata.head()","a567d74e":"f,ax = plt.subplots(figsize=(9, 9))\nsns.heatmap(pokedata.corr(), annot=True, linewidths=0.1, fmt= '.1f',ax=ax)\nplt.show()","f17cdb81":"pokedata.HP.plot(kind='line', grid=True, label='Hp', color='r', alpha=0.6, linestyle='-.', linewidth=1)\npokedata.Defense.plot(label='Defense', color='g', alpha=0.6, linestyle=':', linewidth=1)\nplt.legend()\nplt.show()","31851dce":"pokedata.Generation.plot(kind='hist', grid=True, bins=20)\nplt.show()\n# Hangi jenerasyondan ka\u00e7 tane pokemon var","cab06fa6":"# Bu veriye g\u00f6re attack artt\u0131kca sp atk art\u0131yor diyebilirz\npokedata.plot(kind = 'scatter', x = 'Attack', y='Sp. Atk', grid = True, alpha = 0.5, color = \"#4700ab\")\nplt.title(\"Pokemons's Attack and Special Attack\")\nplt.show()","d543bd58":"countrydata.country.unique() # with this method we can see unique values of country\n#countrydata['country'].value_counts() # Anotheher way to find unique values (and counts)","6a13ba9e":"turkey = countrydata[countrydata.country == \"Turkey\"]\ngermany = countrydata[countrydata.country == \"Germany\"]","c0e7b407":"turkey.head(12)\n#germany.head(12)","3c60cb06":"turkey.plot(kind='line', x='year', y='population', grid=True)\nplt.ylabel(\"Bilion\")\nplt.show()","f67baff6":"# Turkey's population 3x than Germany in 50 years\nplt.plot(turkey.year, turkey.population \/ turkey.population.iloc[0], label='Turkey') #turkey.population.iloc[0] = turkeys population index 0\nplt.plot(germany.year, germany.population \/ germany.population.iloc[0], label='Germany')\nplt.legend()\nplt.xlabel('year')\nplt.ylabel('population growth multiple')\nplt.show()","d2143bb4":"def growth(country):\n    for i in range(len(country)):# 0,1,2,3....11 (12)\n        length = len(country)-1\n        if length>i:\n            x = round(((country.iloc[i+1]-country.iloc[i])\/country.iloc[i])*100,2) # virg\u00fclden sonraki basamak say\u0131s\u0131n\u0131 belirleme\n            print(\"ge\u00e7en y\u0131la g\u00f6re n\u00fcfusun y\u00fczdelik art\u0131\u015f\/azal\u0131\u015f\u0131: {}\".format(x))\n        else:\n            print(\"population growth 1952-2007 = %{}\".format(int((country.iloc[length]\/country.iloc[0])*100)))\ngrowth(turkey.population)\n#growth(germany.population)","57e99b0a":"turkey[\"growth\"] = [2.54,2.54,2.54,2.54,2.54,2.54,2.54,2.54,2.54,2.54,2.54,0]","5f842b1d":"turkey.head(12)","80ff566f":"def growth(country):\n    for i in range(len(country)):# 0,1,2,3....11 (12)\n        length = len(country)-1\n        if length>i:\n            x = round(((country.iloc[i+1]-country.iloc[i])\/country.iloc[i])*100,2) # virg\u00fclden sonraki basamak say\u0131s\u0131n\u0131 belirleme\n            turkey.growth[1572+i] = x # 1572 first index\n            print(x)\n        else:\n            g = round((country.iloc[length]\/country.iloc[0]),2)\n            turkey[\"tgrowth\"] = [g,g,g,g,g,g,g,g,g,g,g,g]\nprint(growth(turkey.population))","d40e06ed":"turkey.head(12)","ef1d152f":"germany[\"growth\"] = [2.54,2.54,2.54,2.54,2.54,2.54,2.54,2.54,2.54,2.54,2.54,0]","6dbe4993":"germany.head(12)","f5f5e565":"def growth(country):\n    for i in range(len(country)):# 0,1,2,3....11 (12)\n        length = len(country)-1\n        if length>i:\n            x = round(((country.iloc[i+1]-country.iloc[i])\/country.iloc[i])*100,2) # virg\u00fclden sonraki basamak say\u0131s\u0131n\u0131 belirleme\n            germany.growth[564+i] = x # 1572 first index\n            print(x)\n        else:\n            g = round((country.iloc[length]\/country.iloc[0]),2)\n            germany[\"tgrowth\"] = [g,g,g,g,g,g,g,g,g,g,g,g]\nprint(growth(germany.population))","e5c6afe6":"germany.head(12)","01171164":"turkey.head(12)","e1422446":"turger = pd.concat([turkey,germany], axis=0, ignore_index=True) # axis=0 vertical 1 horizontal\nturger","d2c8d7fd":"#pokedata.Attack.mean() -- > mean of Attack\n\n#SHORT VERSION WITH LIST COMP\npokedata[\"meanAttack\"] = [\"Low\" if i<pokedata.Attack.mean() else \"High\" for i in pokedata.Attack]\npokedata.head()\n\n#LONG VERSION WITH FOR LOOP\n#for i in pokedata.Attack:\n#    if i<pokedata.Attack.mean():\n#        ...\"Low\"\n#    else:\n#        ...\"High\"","ffc65e75":"# WHAT IS SPLIT?\nprint(\"[0]= \",pokedata.columns[0].split())\nprint(\"[1]= \",pokedata.columns[1].split())\nprint(\"[2]= \",pokedata.columns[2].split())\nprint(\"[2,0]= \",pokedata.columns[2].split()[0])# 0 index = 'Type'\nprint(\"[2,1]= \",pokedata.columns[2].split()[1]) # 1 index = '1'","ea57cca8":"pokedata.columns","bc618e37":"pokedata.columns = [i.split()[0]+\"_\"+i.split()[1] if(len(i.split())>1) else i for i in pokedata.columns]","e598419d":"pokedata.columns","fd451a10":"pokedata.columns = [i.lower() for i in pokedata.columns]","96b33559":"pokedata.columns","a57cb6eb":"pokedata = pd.read_csv('..\/input\/pokemon\/Pokemon.csv') # CHECKPOINT","126122cc":"pokedata.Attack.describe()","3a280fd2":"pokedata.boxplot(column='Attack',by='Legendary')\nplt.show()","259f17df":"newData = pokedata.head()\nnewData","76d978e5":"# id_vars = what we do not wish to melt (id )\n# value_vars = what we want to melt\n# frame = Data Frame\n# vars = variables\nmelted = pd.melt(frame=newData,id_vars = 'Name', value_vars= ['Attack','Defense'])\nmelted","62c7be9f":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'Name', columns = 'variable',values='value')","bdec3c13":"data1 = pokedata.head()\ndata2 = pokedata.tail()\nverConcat = pd.concat([data1,data2], axis=0, ignore_index=True)\n# ignore_index\n#0 1 2 3 4 5 6 7 8 9, True\n#0 1 2 3 4 795 796 797 798 799, False\n#data2\nverConcat","8a4f1f8e":"data1 = pokedata['Attack'].head()\ndata2= pokedata['Defense'].head()\nhorConcat = pd.concat([data1,data2],axis =1)\nhorConcat","43da2a67":"pokedata.dtypes","b1effa56":"pokedata['Type 1'] = pokedata['Type 1'].astype('category')\npokedata['Attack'] = pokedata['Attack'].astype('float')\npokedata.dtypes","f72bd3c8":"pokedata.info()\n# We can see Type 2 have 386 null","a8d04d90":"# Lets chech Type 2\npokedata[\"Type 2\"].value_counts(dropna =False) # we are using dropna=False here to see NaN values","ca7b7235":"pdata = pokedata.copy()\npdata[\"Type 2\"].dropna(inplace = True) # drop the NaN values\npdata[\"Type 2\"].value_counts(dropna =False) # Another way to check is 'assert'\n# Now we can't see any NaN values","f19015c1":"assert 1==1 # if return false ERROR!!","4fe5c88b":"assert 1==2 # 1 not equal 2 so gives ERROR","d14ece82":"assert pdata['Type 2'].notnull().all() # gives nothing because we droped the null values","92d2ab2c":"pdata[\"Type 2\"].fillna('empty',inplace = True)","d69ce20c":"assert pdata['Type 2'].notnull().all() # gives nothing because we have no null values","170a7a28":"Champion = ['Irelia', 'Aatrox', 'Gankplank', 'Jax'] # values of Champion\nAttack = ['63', '60', '64','70'] # values of Attack\nlabel = ['Champion', 'Attack'] # column names\ncolumn = [Champion, Attack]\nzipped = list(zip(label, column))\n#zipped\ndata_dict = dict(zipped) # for convert to dataframe first we have to convert dictionary\n#data_dict\ndataFrame = pd.DataFrame(data_dict)\ndataFrame","be536398":"print(dataFrame.columns)\nprint(dataFrame.values)","b67bf7ae":"dataFrame['Armor'] = ['34', '33', '35', '36']\ndataFrame['Magic_resist'] =['32', '36', '32', '33'] # real magic resists is 32\ndataFrame","51912d4e":"dataFrame['Movement_speed'] = 325\ndataFrame","d584b313":"data1 = pokedata.loc[:,[\"Attack\",\"Defense\",\"Speed\"]]\n#data1.plot() # bad\ndata1.plot(subplots=True, figsize=(7,7)) # good\nplt.show()","91bd6545":"data1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True)# normed = about y axis \n#data1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = False)\nplt.show()","c0653eda":"fig, axes = plt.subplots(nrows=2,ncols=1)# 2x1 2 column # self run this 3x2 3 column 2 feature total 6\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative = True)\nplt.show()","3f82e1be":"def div(n):\n    return n\/2\ndata1.HP.apply(div)","d7df55bd":"data = pd.read_csv(\"..\/input\/pokemon\/Pokemon.csv\")\ndata.head(2)","73881e19":"data = data.set_index('#')\n# also you can use --> data.index = data['#']\ndata.head(2)","f5b8fd7a":"print(data[\"HP\"][1],\"--> square brackets\") # using square brackets\nprint(data.HP[1],\"--> column attribute and row label\") # using column attribute and row label\nprint(data.loc[1,[\"HP\"]]) # using loc accessor (Dataframe)  ---{   print(data.loc[1,\"HP\"])--->Series   }---","f6a78763":"print(data.loc[2:4,[\"Legendary\",\"Type 1\"]])\nprint(\"-\"*25)\nprint(data.loc[2:4,\"Total\":\"Defense\"])","9c4e2559":"#data.loc[1:5,\"Attack\":\"Sp. Def\"]\ndata.loc[5:1:-1,\"Attack\":\"Sp. Def\"]","e21a0d86":"dataApply = pokedata.head()\ndef div(n):\n    return n\/2\n#-------------------------------------#\nprint(dataApply.HP.apply(div))\n# Like map()\nprint(list(map(div,dataApply.HP)))\n#-------------------------------------#","a4513362":"dataApply.HP.apply(lambda x: x\/2)","ae438920":"countrydata = countrydata.set_index([\"country\",\"year\"])\ncountrydata.head(24)","a4669a8e":"dictionary = {\"Map\":[\"Howling Abyss\",\"Howling Abyss\",\"Summoner's Rift\",\"Summoner's Rift\"],\"Region\":[\"Zaun\",\"Noxus\",\"Zaun\",\"Noxus\"],\"Champion\":[\"Urgot\",\"Sion\",\"Viktor\",\"Darius\"],\"WinRate\":[51.37,52.12,51.95,50.28],\"Patch\":\"8.21\"}# add Patch\nleague = pd.DataFrame(dictionary)\nleague.head()","87a26bd0":"league.pivot(index=\"Map\", columns=\"Region\", values=\"Champion\")","1b87d058":"league1 = league.set_index([\"Map\",\"Region\"])\nleague1","385adb14":"#level determines indexes\nleague1.unstack(level=0)","cfd2f9ec":"league1.unstack(level=1)","bec746ee":"league1","ab361c85":"league2 = league1.swaplevel(0,1)\nleague2","a1facda7":"league","dc49826b":"#league.pivot(index=\"Map\", columns=\"Region\", values=\"Champion\")\npd.melt(league,id_vars=\"Map\",value_vars=[\"Champion\",\"WinRate\"])","55ba5fbb":"league","6650271d":"league.groupby(\"Map\").mean() # only WinRate is integer\n# there are other methods like sum, std,max or min","f13b2471":"league.groupby(\"Region\").WinRate.max() \n#we can choose multiple features\n#league.groupby(\"Region\")[[\"WinRate\",\"another integer column\"]].max() ","622a48eb":"# as you can see Region is object\n# However if we use groupby, we can convert it categorical data. \n# Because categorical data uses less memory, speed up operations like groupby\nleague[\"Region\"] = league[\"Region\"].astype(\"category\")\nleague[\"Map\"] = league[\"Map\"].astype(\"category\")\nleague.info()","b2796b2d":"*<i id=\"Stackingg\" style=\"color:#0047ab\">Stacking<\/i>*","29422988":"> **<i id=\"Transforming\" style=\"color:#0047ab\">TRANSFORMING DATA<\/i>**","c447cf5c":"*<i id=\"Unstacking\" style=\"color:#0047ab\">Unstacking<\/i>*","f4d9fd8f":"* <a href='#assert'>Assert<\/a>\n* <a href='#List'>List Comprehension<\/a>\n*  <a href='#Cleaning'>Cleaning Data<\/a>\n* <a href='#Visual'>Visual Exploratory Data Analysis<\/a>\n* <a href='#Melting'>Tidy and Pivoting Data (Melting and Reverse Melting)<\/a>\n* <a href='#Concatenating'>Concatenating<\/a>\n* <a href='#Data'>Data Converting<\/a>\n* <a href='#Missing'>Missing Data and Testing with Assert<\/a>\n* <a href='#Filling'>Filling Nulls<\/a><br>","a4956e9f":"*<i id=\"Pivoting\" style=\"color:#0047ab\">Pivoting Data Frames<\/i>*","003c2aa2":"*<i id=\"Apply\" style=\"color:#0047ab\">Apply<\/i>*","33314239":"*Histogram plot*","ad36ba41":"**<i id=\"Pandas\">PANDAS FOUNDATION<\/i>**","bc4768ea":"*<i id=\"Pivotingg\" style=\"color:#0047ab\">Pivoting<\/i>*","fb6feb4e":"*REVERSE*","b0bd070a":"**<i id=\"Missing\" style=\"color:#0047ab\">Missing Data and Testing with Assert<\/i>**\n","37aa1ea9":"*<i id=\"Line\" style=\"color:#0047ab\">Line<\/i>*","4c823545":"*Subplots*","38c51f31":"**<i id=\"Data\" style=\"color:#0047ab\">Data Converting<\/i>**","11fece52":"*<i id=\"Stacking\" style=\"color:#0047ab\">Stacking and Unstacking Dataframe<\/i>*\n* deal with multi label indexes","8e716c4b":"1. For example: compare attack of pokemons that are legendary  or not\n2. Black line at top is max\n3. Blue line at top is 75%\n4. Red line is median (50%)\n5. Blue line at bottom is 25%\n6. Black line at bottom is min\n7. There are no outliers","9c66c306":"**<i id='assert' style=\"color:#0047ab\">Assert<\/i>**","628ad51f":"**<i id='Manipulating' style=\"color:#0047ab\">Manipulating Data Frames With Pandas<\/i>**","2d88a5d8":"**<i id=\"Concatenating\" style=\"color:#0047ab\">Concatenating<\/i>**","fcf1b3c6":"*<i id=\"Hierarchical\" style=\"color:#0047ab\">Hierarchical Indexing<\/i>*","b788844f":"*Lets lower*","8a35e606":"*Axis 1 Horizontal*","168d3aac":"*<i id=\"Reverse\" style=\"color:#0047ab\">Reverse Slicing<\/i>*","4f4c69c4":"*<i id=\"Scatter\" style=\"color:#0047ab\">Scatter<\/i>*","d1cfc9a4":"*Broadcasting*","77d9f251":"*Lets Concat*","a236ef3c":"*<i id=\"Reading\" style=\"color:#0047ab\">Reading Data and Seting Index<\/i>*","c3f1a15d":"*<i id=\"Heatmap\" style=\"color:#0047ab\">Heatmap<\/i>*","27ec69b1":"*<i id=\"Change\" style=\"color:#0047ab\">Change Inner and Outer Level Index Position<\/i>*","fdf70a86":"**<i id=\"Melting\" style=\"color:#0047ab\">Tidy and Pivoting Data (Melting and Reverse Melting)<\/i>**","3e8250d6":"<i id=\"First\" style=\"color:#0047ab\">First impressions for data<\/i>","a7e8cc74":"*<i id=\"Slicing\" style=\"color:#0047ab\">Slicing<\/i>*","ff6a73d5":"*Histogram subplot with non cumulative and cumulative*","0934e0ca":"*<i id=\"Histogram\" style=\"color:#0047ab\">Histogram<\/i>*","fbc514d2":"*<a href='#Pandas'>Pandas Foundation<\/a>*\n","9f15ea7b":"*For Germany*","e26803e2":"**<i id=\"Categoricals\" style=\"color:#0047ab\">Categoricals and Groupby<\/i>**","a1867189":"*DELETING SPACE BETWEEN SLICE AND LOWERCASE A COLUMN*","1ebe590a":"**<a href=\"#Manipulating\">Manipulating Data Frames With Pandas<\/a>**\n\n1. <a href=\"#Reading\">Reading Data and Seting Index<\/a>\n2. <a href=\"#Indexing\" style=\"color:#0047ab\">Indexing<\/a>\n3. <a href=\"#Slicing\" style=\"color:#0047ab\">Slicing<\/a>\n4. <a href=\"#Reverse\" style=\"color:#0047ab\">Reverse Slicing<\/a>\n5. <a href=\"#Transforming\" style=\"color:#0047ab\"> TRANSFORMING DATA<\/a>\n6. <a href=\"#Apply\" style=\"color:#0047ab\">Apply<\/a>\n7. <a href=\"#Hierarchical\" style=\"color:#0047ab\">Hierarchical Indexing<\/a>\n8. <a href=\"#Pivoting\" style=\"color:#0047ab\">Pivoting Data Frames<\/a>\n9. <a href=\"#Pivotingg\" style=\"color:#0047ab\">Pivoting<\/a>\n10. <a href=\"#Stacking\" style=\"color:#0047ab\">Stacking and Unstacking Dataframe<\/a>\n11. <a href=\"#Stackingg\" style=\"color:#0047ab\">Stacking<\/a>\n12. <a href=\"#Unstacking\" style=\"color:#0047ab\">Unstacking<\/a>\n13. <a href=\"#Change\" style=\"color:#0047ab\">Change Inner and Outer Level Index Position<\/a>\n14. <a href=\"#Meltingg\" style=\"color:#0047ab\">Melting Data Frames<\/a>\n15. <a href=\"#Categoricals\" style=\"color:#0047ab\">Categoricals and Groupby<\/a>","8c761c03":"**<i id='Filling' style=\"color:#0047ab\">Filling Nulls<\/i>**","e13b0a39":"**BASIC PLOTS**","904e7135":"**<i id=\"Cleaning\" style=\"color:#0047ab\">Cleaning Data<\/i>**","f0458d0a":"**<i id=\"Visual\" style=\"color:#0047ab\">Visual Exploratory Data Analysis<\/i>**","dab9479f":"*Axis 0 Vertical*","99f2407e":"*Adding new columns*","0102f046":" <a href='#First'>First impressions<\/a><br>\n<h4>BASIC PLOTS<\/h4>\n<ul>\n    <li><a href='#Heatmap'>Heatmap<\/a>\n     <li><a href='#Line'>Line<\/a>\n     <li><a href='#Histogram'>Histogram<\/a>\n     <li><a href='#Scatter'>Scatter<\/a>\n<\/ul>","76e05a9d":"*<i id=\"Indexing\" style=\"color:#0047ab\">Indexing<\/i>*","746f2fa7":"**<i id=\"Meltingg\" style=\"color:#0047ab\">Melting Data Frames<\/i>**\n* *Reverse of pivoting*","a19e66e6":"**VISUAL EXPLORATORY DATA ANALYSIS**","5f569ad1":"**<i id=\"List\" style=\"color:#0047ab\">List Comprehension<\/i>**"}}