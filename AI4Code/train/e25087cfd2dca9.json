{"cell_type":{"bc66d2c6":"code","73bdb183":"code","f811479c":"code","90a822eb":"code","44eda41b":"code","82788985":"code","14a9cf50":"code","0a9cbfbb":"code","737ae207":"code","c498dbd1":"code","b7a9875b":"code","a59188fa":"code","c64266cc":"code","c5e1fd1b":"code","6d03c8f6":"code","fa07768d":"code","f5b2747a":"code","feae0d72":"code","b2ba3ec8":"code","101f34d8":"code","24a00e09":"code","5d00cbce":"code","789fda12":"code","69832bfe":"code","abf29f05":"code","daa18223":"code","437ab8bf":"code","4eb16ad0":"code","6e4a9165":"code","c361f1d1":"code","6c74b18e":"code","c05e6bf9":"code","0d76e190":"code","42dad87f":"code","7b34328e":"code","f4216ef2":"code","5ef6af34":"code","474c00a3":"code","0e245356":"code","8a69b661":"code","4c8e9430":"code","63420043":"code","cd4b70a9":"code","ccbb719b":"code","8f26e06d":"code","021e0579":"code","8decde1d":"code","df26f812":"code","284e7437":"code","cfbc35d9":"code","7c3050b5":"code","36fad8d2":"code","b6dfa872":"code","a0163bda":"code","6a3df01f":"code","68f05026":"code","0ee9eb64":"code","49932fb0":"code","90a2d86e":"code","f4d1dfce":"code","4d9b2817":"code","667a1bc3":"code","0835d3d1":"code","d819c566":"code","51290fcd":"code","9aed5346":"code","db7b8a47":"code","858e5616":"code","490a6575":"code","9e156da3":"code","2a8037f6":"code","3821fb77":"code","c30c403a":"code","b70e9089":"code","f7abc7bf":"markdown","406cbcf5":"markdown","12f5a96c":"markdown","4bb5312c":"markdown","f887c24e":"markdown","dd592338":"markdown","4aa94a4f":"markdown","5011e096":"markdown","39ac963d":"markdown","de952302":"markdown","696ef5a7":"markdown","dac6813c":"markdown","5671d13f":"markdown","65042b00":"markdown","01d1cec7":"markdown","08827c06":"markdown","b577211e":"markdown","cb3f529b":"markdown","63610ec1":"markdown","14411e9b":"markdown","c1ef521d":"markdown","3f59492a":"markdown","ccad2226":"markdown","bfbf14bb":"markdown","67291403":"markdown","1248366b":"markdown","491ef956":"markdown","9d4fb2d5":"markdown","8fcef23c":"markdown","d21649e9":"markdown","ff533c95":"markdown","15f64c2d":"markdown","26996fa5":"markdown","27ff0638":"markdown","8e8aa3ce":"markdown","d469a95f":"markdown","d1837a4d":"markdown","46bb9d2f":"markdown","b7bdb427":"markdown","18fa2ffb":"markdown","4c8a4ca5":"markdown"},"source":{"bc66d2c6":"import pandas as pd\npd.set_option('display.max_columns', None)\nparse_date = lambda val : pd.datetime.strptime(val, '%y%m%d%H')\ntrain = pd.read_csv(\"..\/input\/pre-prod-data-verification-with-2m-records\/2Mrecords.csv\", parse_dates=['hour'])\ntrain.head()","73bdb183":"train.columns","f811479c":"train.info()","90a822eb":"col=train.columns.tolist()\ncol.remove('hour')\ncol","44eda41b":"train[col]=train[col].astype('object')\ntrain.info()","82788985":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize = (10,5))\nax=sns.countplot(x='click',data=train, palette='hls')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.1 , p.get_height() * 1.01))\nplt.show();","14a9cf50":"round(train['click'].value_counts()*100\/len(train),2)","0a9cbfbb":"train.hour.describe()","737ae207":"ax=train.groupby('hour').agg({'click':'sum'}).plot(figsize=(20,6))\nplt.ylabel('Number of clicks')\nplt.title('Number of clicks by hour');\nax.get_legend().remove()\nplt.grid()","c498dbd1":"train['hour_of_day'] = train.hour.apply(lambda x: x.hour)\nax=train.groupby('hour_of_day').agg({'click':'sum'}).plot(figsize=(25,6))\nplt.ylabel('Number of clicks')\nplt.title('click trends by hour of day');\nax.get_legend().remove()\nplt.grid()","b7a9875b":"train.groupby(['hour_of_day', 'click']).size().unstack().plot(kind='bar', title=\"Hour of Day\", figsize=(20,6))\nplt.ylabel('count')\nplt.title('Hourly impressions vs. clicks');\nplt.xticks(rotation = 0)\nplt.grid()","a59188fa":"import seaborn as sns\n\ndf_click = train[train['click'] == 1]\ndf_hour = train[['hour_of_day','click']].groupby(['hour_of_day']).count().reset_index()\ndf_hour = df_hour.rename(columns={'click': 'impressions'})\ndf_hour['clicks'] = df_click[['hour_of_day','click']].groupby(['hour_of_day']).count().reset_index()['click']\ndf_hour['CTR'] = df_hour['clicks']\/df_hour['impressions']*100\n\nplt.figure(figsize=(24,6))\nax=sns.barplot(y='CTR', x='hour_of_day', data=df_hour)\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Hourly CTR')\nplt.grid();","c64266cc":"train['day_of_week'] = train['hour'].dt.day_name()\ncats = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nax=train.groupby('day_of_week').agg({'click':'sum'}).reindex(cats).plot(figsize=(20,6))\nticks = list(range(0, 7, 1)) # points on the x axis where you want the label to appear\nlabels = \"Mon Tues Weds Thurs Fri Sat Sun\".split()\nplt.xticks(ticks, labels)\nplt.title('click trends by day of week');\nax.get_legend().remove()\nplt.grid()","c5e1fd1b":"ax=train.groupby(['day_of_week','click']).size().unstack().reindex(cats).plot(kind='bar', title=\"Day of the Week\", \n                                                                           figsize=(20,6))\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nticks = list(range(0, 7, 1)) # points on the x axis where you want the label to appear\nlabels = \"Mon Tues Weds Thurs Fri Sat Sun\".split()\nplt.xticks(ticks, labels)\nplt.title('Impressions vs. clicks by day of week');\nplt.xticks(rotation = 0)\nplt.grid()","6d03c8f6":"df_click = train[train['click'] == 1]\ndf_dayofweek = train[['day_of_week','click']].groupby(['day_of_week']).count().reset_index()\ndf_dayofweek = df_dayofweek.rename(columns={'click': 'impressions'})\ndf_dayofweek['clicks'] = df_click[['day_of_week','click']].groupby(['day_of_week']).count().reset_index()['click']\ndf_dayofweek['CTR'] = df_dayofweek['clicks']\/df_dayofweek['impressions']*100\n\nplt.figure(figsize=(20,6))\nax=sns.barplot(y='CTR', x='day_of_week', data=df_dayofweek, order=['Monday', 'Tuesday',\n                                                                   'Wednesday', 'Thursday', 'Friday',\n                                                                   'Saturday', 'Sunday'])\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Day of week CTR');\nplt.xticks(rotation = 0)\nplt.grid()","fa07768d":"print(train.C1.value_counts()*100\/len(train))","f5b2747a":"import numpy as np\nC1_values = train.C1.unique()\nC1_values.sort()\nctr_avg_list=[]\nfor i in C1_values:\n    ctr_avg=train.loc[np.where((train.C1 == i))].click.mean()*100\n    ctr_avg_list.append(ctr_avg)\n    print(\"for C1 value: {},  click through rate: {}\".format(i,round(ctr_avg,2)))","feae0d72":"ax=train.groupby(['C1', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), title='C1 histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","b2ba3ec8":"df_c1 = train[['C1','click']].groupby(['C1']).count().reset_index()\ndf_c1 = df_c1.rename(columns={'click': 'impressions'})\ndf_c1['clicks'] = df_click[['C1','click']].groupby(['C1']).count().reset_index()['click']\ndf_c1['CTR'] = df_c1['clicks']\/df_c1['impressions']*100\n\nplt.figure(figsize=(20,6))\nax=sns.barplot(y='CTR', x='C1', data=df_c1)\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('CTR by C1');\nplt.grid()","101f34d8":"train['click'].mean()*100 # formula","24a00e09":"df_c1.CTR.describe()","5d00cbce":"print(train.banner_pos.value_counts()*100\/len(train))","789fda12":"banner_pos = train.banner_pos.unique()\nbanner_pos.sort()\nctr_avg_list=[]\nfor i in banner_pos:\n    ctr_avg=train.loc[np.where((train.banner_pos == i))].click.mean()*100\n    ctr_avg_list.append(ctr_avg)\n    print(\"for banner position: {},  click through rate: {}\".format(i,round(ctr_avg,2)))","69832bfe":"ax=train.groupby(['banner_pos', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), \n                                                             title='banner position histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","abf29f05":"df_banner = train[['banner_pos','click']].groupby(['banner_pos']).count().reset_index()\ndf_banner = df_banner.rename(columns={'click': 'impressions'})\ndf_banner['clicks'] = df_click[['banner_pos','click']].groupby(['banner_pos']).count().reset_index()['click']\ndf_banner['CTR'] = df_banner['clicks']\/df_banner['impressions']*100\nsort_banners = df_banner.sort_values(by='CTR',ascending=False)['banner_pos'].tolist()\nplt.figure(figsize=(20,6))\nax=sns.barplot(y='CTR', x='banner_pos', data=df_banner, order=sort_banners)\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nplt.title('CTR by banner position');\nplt.grid()","daa18223":"df_banner.CTR.describe()","437ab8bf":"print(\"There are {} sites in the data set\".format(train.site_id.nunique()))","4eb16ad0":"print('The top 10 site ids that have the most impressions')\nprint((train.site_id.value_counts()*100\/len(train))[0:10])","6e4a9165":"top10_ids = (train.site_id.value_counts()\/len(train))[0:10].index\nclick_avg_list=[]\n\nfor i in top10_ids:\n    click_avg=train.loc[np.where((train.site_id == i))].click.mean()*100\n    click_avg_list.append(click_avg)\n    print(\"for site id value: {},  click through rate: {}\".format(i,round(click_avg,2)))","c361f1d1":"top10_sites = train[(train.site_id.isin((train.site_id.value_counts()\/len(train))[0:10].index))]\ntop10_sites_click = top10_sites[top10_sites['click'] == 1]\nax=top10_sites.groupby(['site_id', 'click']).size().unstack().plot(kind='bar',\n                                                                figsize=(20,6), title='Top 10 site ids histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","6c74b18e":"df_site = top10_sites[['site_id','click']].groupby(['site_id']).count().reset_index()\ndf_site = df_site.rename(columns={'click': 'impressions'})\ndf_site['clicks'] = top10_sites_click[['site_id','click']].groupby(['site_id']).count().reset_index()['click']\ndf_site['CTR'] = df_site['clicks']\/df_site['impressions']*100\nsort_site = df_site.sort_values(by='CTR',ascending=False)['site_id'].tolist()\nplt.figure(figsize=(20,6))\nax=sns.barplot(y='CTR', x='site_id', data=df_site, order=sort_site)\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('CTR by top 10 site id');\nplt.grid()","c05e6bf9":"print(\"There are {} site domains in the data set\".format(train.site_domain.nunique()))","0d76e190":"print('The top 10 site domains that have the most impressions')\nprint((train.site_domain.value_counts()*100\/len(train))[0:10])\n","42dad87f":"top10_domains = (train.site_domain.value_counts()\/len(train))[0:10].index\nclick_avg_list=[]\n\nfor i in top10_domains:\n    click_avg=train.loc[np.where((train.site_domain == i))].click.mean()*100\n    click_avg_list.append(click_avg)\n    print(\"for site domain value: {},  click through rate: {}\".format(i,round(click_avg,2)))","7b34328e":"top10_domain = train[(train.site_domain.isin((train.site_domain.value_counts()\/len(train))[0:10].index))]\ntop10_domain_click = top10_domain[top10_domain['click'] == 1]\nax=top10_domain.groupby(['site_domain', 'click']).size().unstack().plot(kind='bar',\n                                                                     figsize=(20,6), title='Top 10 site domains histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","f4216ef2":"df_domain = top10_domain[['site_domain','click']].groupby(['site_domain']).count().reset_index()\ndf_domain = df_domain.rename(columns={'click': 'impressions'})\ndf_domain['clicks'] = top10_domain_click[['site_domain','click']].groupby(['site_domain']).count().reset_index()['click']\ndf_domain['CTR'] = df_domain['clicks']\/df_domain['impressions']*100\nsort_domain = df_domain.sort_values(by='CTR',ascending=False)['site_domain'].tolist()\nplt.figure(figsize=(20,6))\nax=sns.barplot(y='CTR', x='site_domain', data=df_domain, order=sort_domain)\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('CTR by top 10 site domain');\nplt.grid()","5ef6af34":"print(\"There are {} site categories in the data set\".format(train.site_category.nunique()))","474c00a3":"print('The top 10 site categories that have the most impressions')\nprint((train.site_category.value_counts()*100\/len(train))[0:10])","0e245356":"top10_categories = (train.site_category.value_counts()\/len(train))[0:10].index\nclick_avg_list=[]\n\nfor i in top10_categories:\n    click_avg=train.loc[np.where((train.site_category == i))].click.mean()*100\n    click_avg_list.append(click_avg)\n    print(\"for site category value: {},  click through rate: {}\".format(i,round(click_avg,2)))","8a69b661":"top10_category = train[(train.site_category.isin((train.site_category.value_counts()\/len(train))[0:10].index))]\ntop10_category_click = top10_category[top10_category['click'] == 1]\nax=top10_category.groupby(['site_category', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), \n                                                                         title='Top 10 site categories histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","4c8e9430":"df_category = top10_category[['site_category','click']].groupby(['site_category']).count().reset_index()\ndf_category = df_category.rename(columns={'click': 'impressions'})\ndf_category['clicks'] = top10_category_click[['site_category',\n                                              'click']].groupby(['site_category']).count().reset_index()['click']\ndf_category['CTR'] = df_category['clicks']\/df_category['impressions']*100\nsort_category = df_category.sort_values(by='CTR',ascending=False)['site_category'].tolist()\nplt.figure(figsize=(20,6))\nax=sns.barplot(y='CTR', x='site_category', data=df_category, order=sort_category)\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nplt.title('CTR by top 10 site category');\nplt.grid()","63420043":"print(\"There are {} devices in the data set\".format(train.device_id.nunique()))","cd4b70a9":"print('The top 10 devices that have the most impressions')\nprint((train.device_id.value_counts()*100\/len(train))[0:10])","ccbb719b":"top10_devices = (train.device_id.value_counts()\/len(train))[0:10].index\nclick_avg_list=[]\n\nfor i in top10_devices:\n    click_avg=train.loc[np.where((train.device_id == i))].click.mean()*100\n    click_avg_list.append(click_avg)\n    print(\"for device id value: {},  click through rate: {}\".format(i,round(click_avg,2)))","8f26e06d":"top10_device = train[(train.device_id.isin((train.device_id.value_counts()\/len(train))[0:10].index))]\n\nax=top10_device.groupby(['device_id', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), title='Top 10 device ids histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","021e0579":"print(\"There are {} device ips in the data set\".format(train.device_ip.nunique()))\nprint(\"There are {} device types in the data set\".format(train.device_type.nunique()))\nprint(\"There are {} device models in the data set\".format(train.device_model.nunique()))\nprint(\"There are {} device cnn types in the data set\".format(train.device_conn_type.nunique()))","8decde1d":"print('The impressions by device types')\nprint((train.device_type.value_counts()*100\/len(train)))","df26f812":"ax=train[['device_type','click']].groupby(['device_type','click']).size().unstack().plot(kind='bar',figsize=(20,6),\n                                                                                         title='device types');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","284e7437":"ax=df_click[df_click['device_type']==1].groupby(['hour_of_day',\n                                              'click']).size().unstack().plot(kind='bar',\n                                                                              title=\"Clicks from device type 1 by hour of day\", \n                                                                              figsize=(20,6));\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.get_legend().remove()\nplt.grid()","cfbc35d9":"device_type_click = df_click.groupby('device_type').agg({'click':'sum'}).reset_index()\ndevice_type_impression = train.groupby('device_type').agg({'click':'count'}).reset_index().rename(columns={'click': 'impressions'})\nmerged_device_type = pd.merge(left = device_type_click , right = device_type_impression, how = 'inner', on = 'device_type')","7c3050b5":"merged_device_type['CTR'] = round(merged_device_type['click'] \/ merged_device_type['impressions']*100,2)\nmerged_device_type","36fad8d2":"print(\"There are {} apps in the data set\".format(train.app_id.nunique()))\nprint(\"There are {} app domains in the data set\".format(train.app_domain.nunique()))\nprint(\"There are {} app categories in the data set\".format(train.app_category.nunique()))","b6dfa872":"print('The impressions by app categories')\nprint(round(train.app_category.value_counts()*100\/len(train),2))","a0163bda":"ax=train['app_category'].value_counts().plot(kind='bar', title='App Category v\/s Clicks',figsize=(20,6))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 90)\nax.set_yscale('log')    \nplt.grid()","6a3df01f":"train_app_category = train.groupby(['app_category', 'click']).size().unstack()\ntrain_app_category.div(train_app_category.sum(axis=1), axis=0).plot(kind='bar', stacked=True, \n                                                                    title=\"Intra-category CTR\",figsize=(20,6));\nplt.grid()","68f05026":"print(\"There are {} C14 in the data set\".format(train.C14.nunique()))\nprint(\"There are {} C15 in the data set\".format(train.C15.nunique()))\nprint(\"There are {} C16 in the data set\".format(train.C16.nunique()))\nprint(\"There are {} C17 in the data set\".format(train.C17.nunique()))\nprint(\"There are {} C18 in the data set\".format(train.C18.nunique()))\nprint(\"There are {} C19 in the data set\".format(train.C19.nunique()))\nprint(\"There are {} C20 in the data set\".format(train.C20.nunique()))\nprint(\"There are {} C21 in the data set\".format(train.C21.nunique()))","0ee9eb64":"print(\"There are {} C14 values in the data set\".format(train.C14.nunique()))","49932fb0":"print('The top C14 values that have the most impressions')\nprint((train.C14.value_counts()*100\/len(train))[0:10])","90a2d86e":"top10_device = train[(train.C14.isin((train.C14.value_counts()\/len(train))[0:10].index))]\n\nax=top10_device.groupby(['C14', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), title='Top 10  C14 values histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 90)\nax.set_yscale('log')    \nplt.grid()","f4d1dfce":"top10_device.groupby(['C14', 'click']).size().unstack().plot(kind='bar', stacked=True, title='Top 10 C14 distribution',figsize=(20,6));   \nplt.grid()","4d9b2817":"ax=train[['C15','click']].groupby(['C15','click']).size().unstack().plot(kind='bar',figsize=(20,6),\n                                                                                         title='C15');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","667a1bc3":"ax=train.groupby(['C15', 'click']).size().unstack().plot(kind='bar', stacked=True, title='C15 distribution',figsize=(20,6));   \nax.set_yscale('log')\nplt.xticks(rotation = 0)\nplt.grid()","0835d3d1":"ax=train[['C16','click']].groupby(['C16','click']).size().unstack().plot(kind='bar',figsize=(20,6),\n                                                                                         title='C16');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","d819c566":"ax=train.groupby(['C16', 'click']).size().unstack().plot(kind='bar', stacked=True, title='C16 distribution',figsize=(20,6));   \nax.set_yscale('log')\nplt.xticks(rotation = 0)\nplt.grid()","51290fcd":"top10_device = train[(train.C17.isin((train.C17.value_counts()\/len(train))[0:10].index))]\n\nax=top10_device.groupby(['C17', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), title='Top 10  C17 values histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 90)\nax.set_yscale('log')    \nplt.grid()","9aed5346":"top10_device.groupby(['C17', 'click']).size().unstack().plot(kind='bar', stacked=True, title='Top 10 C17 distribution',figsize=(20,6));   \nplt.grid()","db7b8a47":"ax=train[['C18','click']].groupby(['C18','click']).size().unstack().plot(kind='bar',figsize=(20,6),\n                                                                                         title='C18');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","858e5616":"ax=train.groupby(['C18', 'click']).size().unstack().plot(kind='bar', stacked=True, title='C18 distribution',figsize=(20,6));   \nax.set_yscale('log')\nplt.xticks(rotation = 0)\nplt.grid()","490a6575":"top10_device = train[(train.C19.isin((train.C19.value_counts()\/len(train))[0:10].index))]\n\nax=top10_device.groupby(['C19', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), title='Top 10  C19 values histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')    \nplt.grid()","9e156da3":"top10_device.groupby(['C19', 'click']).size().unstack().plot(kind='bar', stacked=True, title='Top 10 C19 distribution',figsize=(20,6));   \nplt.xticks(rotation = 0)\nplt.grid()","2a8037f6":"top10_device = train[(train.C20.isin((train.C20.value_counts()\/len(train))[0:10].index))]\n\nax=top10_device.groupby(['C20', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), title='Top 10  C20 values histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')    \nplt.grid()","3821fb77":"top10_device.groupby(['C20', 'click']).size().unstack().plot(kind='bar', stacked=True, title='Top 10 C20 distribution',figsize=(20,6));   \nplt.xticks(rotation = 0)\nplt.grid()","c30c403a":"top10_device = train[(train.C21.isin((train.C21.value_counts()\/len(train))[0:10].index))]\n\nax=top10_device.groupby(['C21', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), title='Top 10  C21 values histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')    \nplt.grid()","b70e9089":"top10_device.groupby(['C21', 'click']).size().unstack().plot(kind='bar', stacked=True, title='Top 10 C21 distribution',figsize=(20,6));   \nplt.xticks(rotation = 0)\nplt.grid()","f7abc7bf":"C1 is one of the categorical characteristics that has been anonymised. Even if we don't know what it means, we'd like to see how it's distributed.","406cbcf5":"# Feature Engineering","12f5a96c":"#  Site features","4bb5312c":"## device id","f887c24e":"It appears that the app category is something worth investigating.","dd592338":"The site category attribute appears to be crucial because the CTR for the top ten sites ranges from 28.1 to 2.7, and they deviate considerably from the general CTR of 16.94.","4aa94a4f":"Extract hour from date time feature","5011e096":"## device type","39ac963d":"The data covers 10 days of clicks data from 2014-10-21 to 2014-10-30, that is 240 hours.","de952302":"## app features","696ef5a7":"The highest CTR comes from device type 0.","dac6813c":"## site category","5671d13f":"The important banner positions are:\n\nposition 0: 72% of the data and 16.42 CTR\n\nposition 1: 27.81% of the data and 18.25 CTR","65042b00":"# C1 feature","01d1cec7":"The average CTR in the data is almost 17","08827c06":"## site id","b577211e":"Tuesdays had the highest number of impressions and clicks, followed by Wednesdays and Thursdays. Mondays and Fridays had the fewest impressions and clicks.","cb3f529b":"The most impressions and clicks are generated by C15 as 320.","63610ec1":"You will see that most of device_id is a99f214a : Approx. 83% of the data, and the second major device_id is only 0.05% of the data. And there are some extremely high CTR here with device id at 0f7c61dc.","14411e9b":"We've heard that there are several aspects that influence the effectiveness of our banner advertisements, but the banner location is the most important. Let us check whether this is true.","c1ef521d":"While Tuesdays and Wednesdays have the most impressions and clicks, they also have the lowest CTR. CTR is higher on Saturdays and Sundays. Over the weekend, it appears that individuals have more time to click.","3f59492a":"# Banner position","ccad2226":"## site domain","bfbf14bb":"The site id attribute appears to be crucial because the CTR for the top ten sites ranges from 46.58 to 4.31, and they deviate considerably from the general CTR of 16.94.","67291403":"## Day of week","1248366b":"## C14 - C21 features","491ef956":"Every day, the hourly clicks pattern seems extremely similar. However, there were a couple of peak hours, one in the middle of the day on Oct 22 and another in the middle of the day on Oct 28. On October 24, one off-peak hour is close to midnight.","9d4fb2d5":"## device ip","8fcef23c":"No trends identified","d21649e9":"Although banner positions 0 and 1 have the most impressions and clicks, banner position 7 has the greatest click through rate. Increasing the amount of adverts in banner position 7 appears to be a smart idea.","ff533c95":"C1 value = 1005 has the most data, almost 92%. Let's see whether we can find value of C1 indicates something about CTR.","15f64c2d":"The majority of clicks from device type 1 occurred during business hours, as predicted. The device type is unquestionably a significant feature.","26996fa5":"The most impressions and clicks are generated by device type 1. Other device kinds receive the fewest impressions and clicks. We may need  to investigate device type 1 in further depth.","27ff0638":"# Device features","8e8aa3ce":"Now that we have click and impression, we may go on to the next step. The click-through rate may be calculated (CTR). The click-through rate (CTR) is the ratio of ad impressions to clicks. It calculates the number of times each ad is clicked.","d469a95f":"The site domain attribute appears to be crucial because the CTR for the top ten domains ranges from 45.78 to 4.31, and they deviate considerably from the general CTR of 16.94.","d1837a4d":"Hours 13 and 14 (1 p.m. and 2 p.m.) had the most clicks, whereas hour 0 has the fewest clicks (mid-night). For approximate estimate, it appears to be a valuable feature.","46bb9d2f":"Device ip is more of a users ip address, so, there are a lot of them.","b7bdb427":"## Hour","18fa2ffb":"The important C1 values and CTR pairs are:\n\n1005: 91.86% of the data and 16.88 CTR\n\n1002: 5.5% of the data and 21.14 CTR\n\n1010: 2.24% of the data and 9.59 CTR\n\n1002 has a much higher than average CTR, and 1010 has a much lower than average CTR, it seems these two C1 values are important for predicting CTR.","4c8a4ca5":"One of the most fascinating findings here is that the highest CTR occurred around the hours of midnight, 1, 7, and 15. If we recall correctly, around mid-night gets the fewest impressions and clicks."}}