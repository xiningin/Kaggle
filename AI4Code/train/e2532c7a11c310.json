{"cell_type":{"46bb522e":"code","34553e57":"code","50bbb8df":"code","e62445ff":"code","36286af7":"code","a62db1d4":"code","42ea090a":"code","30c09f49":"code","04425406":"code","2823fcef":"code","97724688":"code","8863d143":"code","111b3b31":"code","731846ed":"code","54fcdfd7":"code","1f2fffe0":"code","3d4e2ced":"code","319f2e56":"code","e1591c9d":"code","c0b4b6b2":"code","4caebc8f":"code","331cfe23":"code","ba2eebd9":"code","47bae6f4":"code","018a1e98":"code","885eb686":"code","bc7d6063":"code","2a8b3af6":"code","3bf6fbf0":"code","4586d597":"code","7adf6230":"code","14d65e60":"code","8bc8e1f8":"markdown","475c6fd4":"markdown","6406abe3":"markdown","848e3bbc":"markdown","615e69e8":"markdown","672e2246":"markdown","7b7602f7":"markdown","2b669d0a":"markdown","809b16b2":"markdown","6c48e3d9":"markdown","c561b9a6":"markdown","a1cdb7ec":"markdown","e7c2bb5b":"markdown"},"source":{"46bb522e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport datetime\n%matplotlib inline \nimport scipy.integrate as integrate\nfrom scipy.optimize import curve_fit\npd.options.display.max_rows = 12","34553e57":"data = pd.read_csv(\"..\/input\/data.txt\", sep = ' ',header = None, names = ['date', 'time','epoch','moteid','temp','humidity','light','voltage'])\ndata.head()","50bbb8df":"data.shape","e62445ff":"data.describe()","36286af7":"data.isnull().sum()","a62db1d4":"data['temp'].plot()","42ea090a":"data.fillna(0, inplace=True)\ndata['epoch'].replace(regex=True, inplace=True, to_replace=r'[^0-9.\\-]', value=r'')\ndata['epoch'] = data['epoch'].astype(int)","30c09f49":"data.isnull().sum()","04425406":"data.groupby('moteid').mean()","2823fcef":"data['Timestamp'] = data[['date', 'time']].apply(lambda x: ' '.join(x.astype(str)), axis=1)\nnew_data = data","97724688":"data.drop(['date','time'],axis=1,inplace =True)\ndata.set_index(pd.to_datetime(data.Timestamp), inplace=True)","8863d143":"data[['moteid','temp','humidity','light','voltage']] = data[['moteid','temp','humidity','light','voltage']].apply(pd.to_numeric)","111b3b31":"data['moteid'].value_counts()","731846ed":"moteid_grp = data.groupby(['moteid'])","54fcdfd7":"corr_id = moteid_grp.corr(method='pearson')\ncorr_id.fillna(0, inplace=True)\ncorr_id","1f2fffe0":"data.head()","3d4e2ced":"new = data['2004\/3\/1':'2004\/3\/21']\n\n#I create two datafranes to hold the data used for covariance calculations\nTemperature_data = pd.DataFrame()\nHumidity_data = pd.DataFrame()\ntest = pd.DataFrame()\n\n#Write data from Node 14\ntest = new.loc[data.moteid==14]\ntest = test.groupby([test.index.year,test.index.month,test.index.day, test.index.hour]).mean()\nTemperature_data [['Node14']] = test[['temp']]\nHumidity_data[['Node14']] = test[['humidity']]\n\n#Write data from Nodes 22 to 29\nfor i in range(8):\n    j = i + 22\n    test = new.loc[data.moteid==j]\n    test = test.groupby([test.index.year,test.index.month,test.index.day, test.index.hour]).mean()\n    Temperature_data[['Node' + str(j)]] = test[['temp']]\n    Humidity_data[['Node'+ str(j)]] = test[['humidity']]","319f2e56":"Temperature_data","e1591c9d":"Humidity_data","c0b4b6b2":"node_distance = pd.read_csv('..\/input\/intel_nodes_distances.csv')\n\nlists_hy = []\nlists_hx = []\n    \nfor z in range(10):\n    # Calculation of the covariance for lag i hour for temp\n    humy = [None] *45\n    humx = [None] *45\n    k=0\n    i=0\n    for first_column in Temperature_data:\n        df1 = Temperature_data[first_column][:-(1+z)]\n        std_test1=np.std(df1)\n        j = 0 \n        for second_column in Temperature_data:\n            if j <= i:\n                df2 = Temperature_data[second_column][(1+z):]\n                std_test2=np.std(df2)\n                humy[k] = (np.cov(df1,df2)\/(std_test1*std_test2)).item((0, 1))\n                humx[k] = node_distance.iloc[i,j]\n                j = j + 1\n                k = k + 1\n        i = i + 1\n    lists_hy.append(humy)\n    lists_hx.append(humx)","4caebc8f":"temperature_timex = []\ntemperature_timey = []\nfor i in range(10):\n    average = (sum(lists_hy[i])\/len(lists_hy[i]))\n    temperature_timey.append(average)\n\nfor z in range(10):\n    temperature_timex.append(z)\n\nplt.scatter(temperature_timex, temperature_timey)","331cfe23":"from statsmodels.tsa.stattools import acf,pacf\nlag_acf = acf(data['temp'])\n#Plot pACF: a\nplt.subplot(121) \nplt.plot(lag_acf)","ba2eebd9":"fig, axes = plt.subplots(nrows=1, ncols=4, figsize=(60,20))\n\nfor xcol, ax in zip(['humidity', 'temp', 'light','voltage'], axes):\n    data.plot(kind='scatter', x='epoch', y=xcol, ax=ax, alpha=1, color='r')","47bae6f4":"fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(60,30))\nfor xcol, ax in zip(['temp', 'light','humidity'], axes):\n    data.plot(kind='scatter', x='voltage', y=xcol, ax=ax, color='b')","018a1e98":"fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(60,30))\nfor xcol, ax in zip(['temp', 'humidity','voltage'], axes):\n    data.plot(kind='scatter', x='light', y=xcol, ax=ax, alpha=1, color='g')","885eb686":"fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(60,30))\nfor xcol, ax in zip(['temp', 'light','voltage'], axes):\n    data.plot(kind='scatter', x='humidity', y=xcol, ax=ax, alpha=1, color='y')","bc7d6063":"fig, axes = plt.subplots(nrows=1, ncols=4, figsize=(60,30))\nfor xcol, ax in zip(['humidity', 'light','voltage'], axes):\n    data.plot(kind='scatter', x='temp', y=xcol, ax=ax, alpha=1, color='b')","2a8b3af6":"data.index\nindex_hour = data.index.hour\ndf1_by_hour =data['temp'].groupby(index_hour).mean()\ndf1_by_hour.plot()\nplt.show()\ndata.index\nindex_hour = data.index.hour\ndf1_by_hour =data['humidity'].groupby(index_hour).mean()\ndf1_by_hour.plot()\nplt.show()\ndata.index\nindex_hour = data.index.hour\ndf1_by_hour =data['light'].groupby(index_hour).mean()\ndf1_by_hour.plot()\nplt.show()\ndata.index\nindex_hour = data.index.hour\ndf1_by_hour =data['voltage'].groupby(index_hour).mean()\ndf1_by_hour.plot()\nplt.show()","3bf6fbf0":"new_data.plot(subplots=True,linewidth=0.5,\n                layout=(2, 4),figsize=(60, 20),\n                sharex=False,\n                sharey=False)\n\nplt.show()","4586d597":"new_data.corr(method='pearson')","7adf6230":"from matplotlib import pyplot as plt \nd_m21 = data.loc[data['moteid'] == 21.0]\nd_m22 = data.loc[data['moteid'] == 22.0]\nd_m10 = data.loc[data['moteid'] == 10.0]\nfig2 = plt.figure(figsize = (15,10))\nd_m21['temp'].plot(label='temperature for moteid=21.0')\nd_m22['temp'].plot(label='temperature for moteid=22.0')\nfig2.suptitle('Variation in temperature over time for moteid= 21.0 and 22.0', fontsize=10)\nplt.xlabel('timestamp', fontsize=10)\nplt.ylabel('temperature', fontsize=10)\nplt.legend()","14d65e60":"from itertools import count\nimport matplotlib.pyplot as plt\nfrom numpy import linspace, loadtxt, ones, convolve\nimport numpy as np\nimport pandas as pd\nimport collections\nfrom random import randint\nfrom matplotlib import style\n%matplotlib inline\ndef mov_average(data, window_size):\n\n    window = np.ones(int(window_size))\/float(window_size)\n    return np.convolve(data, window, 'same')\ndef find_anomalies(y, window_size, sigma=1.0):\n    avg = mov_average(y, window_size).tolist()\n    residual = y - avg\n    std = np.std(residual)\n    return {'standard_deviation': round(std, 3),\n            'anomalies_dict': collections.OrderedDict([(index, y_i) for index, y_i, avg_i in zip(count(), y, avg)\n              if (y_i > avg_i + (sigma*std)) | (y_i < avg_i - (sigma*std))])}\ndef plot_results(x, y, window_size, sigma_value=1,\n                 text_xlabel=\"X Axis\", text_ylabel=\"Y Axis\", applying_rolling_std=False):\n   \n    plt.figure(figsize=(15, 8))\n    plt.plot(x, y, \"k.\")\n    y_av = mov_average(y, window_size)\n    plt.plot(x, y_av, color='green')\n    plt.xlim(0, 40000)\n    plt.xlabel(text_xlabel)\n    plt.ylabel(text_ylabel)\n    events = {}\n    events = find_anomalies(y, window_size=window_size, sigma=sigma_value)\n    \n\n    x_anom = np.fromiter(events['anomalies_dict'].keys(), dtype=int, count=len(events['anomalies_dict']))\n    y_anom = np.fromiter(events['anomalies_dict'].values(), dtype=float,count=len(events['anomalies_dict']))\n    plt.plot(x_anom, y_anom, \"b*\")\n    print(x_anom)\n    plt.grid(True)\n    plt.show()\nx = d_m10['epoch']\nY = d_m10['temp']\nplot_results(x, y=Y, window_size=50, text_xlabel=\"Date\", sigma_value=3,text_ylabel=\"temperature\")","8bc8e1f8":"### Pearson Correlation for the multivariate time series  ","475c6fd4":"## IOT Data analysis \n### Anomaly Detection, Analysis based on data collected from 54 sensors","6406abe3":"### Anomaly Detection using moving average method\nFor moteid:10 and window size: 20, we calculate the mean and standard deviation of the data.If the next entry in the dataframe lies between mean(+-)sd*2,\nit is considered normal else it is considered an anamoly.\n\nAnomaly can be seen by blue *","848e3bbc":"\n### Variation in humidity, temp, light, voltage with epoch","615e69e8":"### Variation in Tempeature, Humidity, light and Voltage over time","672e2246":"### Covariance models in time for the temperature\nTemperature time lags from 0 to 9","7b7602f7":"### Variation in temperature readings over time for moteid's: 21 and 22","2b669d0a":"### Variation with temperature","809b16b2":"### Variation with Humidity","6c48e3d9":"Future work: Using LSTM or GRU, we can predict future temperature,humidity,light and voltage readings based on the given time series data. It is the case of Multidimensional and multivariate time series model.","c561b9a6":"#### Calculating averages for time component:","a1cdb7ec":"### Variation with light","e7c2bb5b":"### Variation with Voltage"}}