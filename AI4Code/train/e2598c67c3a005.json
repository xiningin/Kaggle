{"cell_type":{"a2756ad2":"code","fbfe49ff":"code","abfb1682":"code","713a4a79":"code","c4f1f9f2":"code","04949d06":"code","0584cdf6":"code","334906cf":"code","9b717c9c":"code","4b8bbb84":"code","2b094072":"code","f7da8466":"code","e3d6de53":"markdown","e9b2d58b":"markdown"},"source":{"a2756ad2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","fbfe49ff":"#load the dataset\ndf=pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')\ndf.head(10)","abfb1682":"df.info()","713a4a79":"y_cat = df['class'].values  \nX_cat = df.drop('class', axis=1)","c4f1f9f2":"from sklearn.preprocessing import LabelEncoder\nencoder=LabelEncoder()\n\ny = encoder.fit_transform(y_cat)\nX = pd.get_dummies(X_cat).values","04949d06":"print(X)","0584cdf6":"print(y)","334906cf":"from sklearn.model_selection import train_test_split\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 81)","9b717c9c":"from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, roc_auc_score\nfrom sklearn.model_selection import cross_val_score","4b8bbb84":"from sklearn.naive_bayes import GaussianNB\ngnb=GaussianNB()\n\ngnb.fit(X_train,y_train)\ny_pred=gnb.predict(X_test)\n\ncv_scores = cross_val_score(gnb, X, y, cv=10)\n\nprint(confusion_matrix(y_test, y_pred))\nprint(\"accuracy score : {}\".format(accuracy_score(y_test,y_pred)))\nprint(classification_report(y_test, y_pred))\n\nprint(cv_scores)\nprint(\"average 10 fold tree : {}\".format(np.mean(cv_scores)))\n\ny_pred_proba=gnb.predict_proba(X_test)[:,1]\nprint(\"ROC AUC Score GNB : {}\".format(roc_auc_score(y_test, y_pred_proba)))","2b094072":"from sklearn.tree import DecisionTreeClassifier\n\nclf=DecisionTreeClassifier()\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\ncv_scores = cross_val_score(clf, X, y, cv=10)\n\nprint(confusion_matrix(y_test, y_pred))\nprint(\"accuracy score : {}\".format(accuracy_score(y_test,y_pred)))\nprint(classification_report(y_test, y_pred))\n\nprint(cv_scores)\nprint(\"average 10 fold tree : {}\".format(np.mean(cv_scores)))\n\ny_pred_proba=clf.predict_proba(X_test)[:,1]\n\nprint(\"ROC AUC Score CLF : {}\".format(roc_auc_score(y_test, y_pred_proba)))","f7da8466":"from xgboost import XGBClassifier\nxgb = XGBClassifier()\n\nxgb.fit(X_train, y_train)\nxgb.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\ncv_scores = cross_val_score(clf, X, y, cv=10)\n\nprint(confusion_matrix(y_test, y_pred))\nprint(\"accuracy score : {}\".format(accuracy_score(y_test,y_pred)))\nprint(classification_report(y_test, y_pred))\n\nprint(cv_scores)\nprint(\"average 10 fold tree : {}\".format(np.mean(cv_scores)))\n\ny_pred_proba=xgb.predict_proba(X_test)[:,1]\n\nprint(\"ROC AUC Score xgb : {}\".format(roc_auc_score(y_test, y_pred_proba)))","e3d6de53":"All data is an object and no missing data ?","e9b2d58b":"## Lets try predicting the variable 'class'"}}