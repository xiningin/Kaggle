{"cell_type":{"c2cdbf16":"code","21bc322e":"code","e0c9f62c":"code","21d08f53":"code","f6708505":"code","4b20c085":"code","ed9d0bb1":"code","b49ea2eb":"code","2c45376e":"code","0f67cefc":"code","b6da6117":"code","70201435":"code","fb6a187e":"code","392f39cd":"code","858a83f6":"code","0b3cb382":"markdown","d6791694":"markdown","00a67a3f":"markdown","d394e174":"markdown","6edc6ec6":"markdown","a4aee3fd":"markdown"},"source":{"c2cdbf16":"#https:\/\/www.kaggle.com\/malikumairayub\/notebookf5d7694712\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt","21bc322e":"import matplotlib.pyplot as plt\nimport numpy as np\n\n\nlabels = ['G1', 'G2', 'G3', 'G4', 'G5']\nmen_means = [20, 34, 30, 35, 27]\nwomen_means = [25, 32, 34, 20, 25]\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, men_means, width, label='Men')\nrects2 = ax.bar(x + width\/2, women_means, width, label='Women')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(x, labels)\nax.legend()\n\n#ax.bar_label(rects1, padding=3)\n#ax.bar_label(rects2, padding=3)\n\nfig.tight_layout()\n\nplt.show()","e0c9f62c":"fig = plt.figure()\nx = np.arange(10)\ny = 2.5 * np.sin(x \/ 20 * np.pi)\nyerr = np.linspace(0.1, 0.2, 10)\n\nplt.errorbar(x, y + 3, yerr=yerr, label='both limits (default)')\nplt.errorbar(x, y + 2, yerr=yerr, uplims=True, label='uplims=True')\nplt.errorbar(x, y + 1, yerr=yerr, uplims=True, lolims=True,\n             label='uplims=True, lolims=True')\n\nupperlimits = [True, False] * 5\nlowerlimits = [False, True] * 5\nplt.errorbar(x, y, yerr=yerr, uplims=upperlimits, lolims=lowerlimits,\n             label='subsets of uplims and lolims')\n\nplt.legend(loc='lower right')\nplt.show()\n# plt.savefig(\"my_image.png\")\n# dpi\n# image size","21d08f53":"sns.barplot(x=[\"A\", \"B\", \"C\"], y=[1, 3, 2])","f6708505":"# Array\n\nprint (\"Array Initialization\")\narray = np.array([1,2,3,4,5,6])\nprint (\"Array:\",array)\nprint (\"Array Shape:\",array.shape)\nprint (\"Array Type:\",type(array))\nprint (\"\\n\")\n\nprint (\"Array Initialization with zeros and ones\")\narray = np.zeros(5)\nprint (\"Array:\",array)\narray = np.ones(5)\nprint (\"Array:\",array)\nprint (\"\\n\")\n\n\n# Reshape Array\narray = np.array([1,2,3,4,5,6])\nprint (\"Array Reshape\")\narray = array.reshape(2,3)\nprint (\"Array:\",array)\nprint (\"Array Shape:\",array.shape)\nprint (\"\\n\")\n#indexing\nprint (\"Array Indexing\")\nprint (\"0 Row, 1,2 Columns\", array[0,1:3])\n\nprint (\"first column:\",array[:,0]) # first column\nprint (\"first row:\",array[0,:]) # first column\nprint (\"\\n\")\n\n#counting\nprint (\"Counting Values\")\nunique, counts = np.unique(array, return_counts=True)\nprint (unique)\nprint (counts)\n\nprint(\"\\nList\")\nmylist = list([1,2,3,4,5])\nprint (mylist)\nmylist.append(6)\nprint (\"After Append\",mylist)\nmylist.remove(4)\nprint (\"After Remove\",mylist)\nprint (\"Find\",mylist.index(5))","4b20c085":"iris = pd.read_csv(\"..\/input\/irisdataset\/iris.data\")\nprint (iris.shape)\nprint (type(iris))","ed9d0bb1":"iris.head()","b49ea2eb":"iris.info()","2c45376e":"fig = iris[iris.Species=='Iris-setosa'].plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm',color='orange', label='Setosa')\niris[iris.Species=='Iris-versicolor'].plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm',color='blue', label='versicolor',ax=fig)\niris[iris.Species=='Iris-virginica'].plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm',color='green', label='virginica', ax=fig)\nfig.set_xlabel(\"Sepal Length\")\nfig.set_ylabel(\"Sepal Width\")\nfig.set_title(\"Sepal Length VS Width\")\nfig=plt.gcf()\nfig.set_size_inches(10,6)\nplt.show()","0f67cefc":"fig = iris[iris.Species=='Iris-setosa'].plot.scatter(x='PetalLengthCm',y='PetalWidthCm',color='orange', label='Setosa')\niris[iris.Species=='Iris-versicolor'].plot.scatter(x='PetalLengthCm',y='PetalWidthCm',color='blue', label='versicolor',ax=fig)\niris[iris.Species=='Iris-virginica'].plot.scatter(x='PetalLengthCm',y='PetalWidthCm',color='green', label='virginica', ax=fig)\nfig.set_xlabel(\"Petal Length\")\nfig.set_ylabel(\"Petal Width\")\nfig.set_title(\" Petal Length VS Width\")\nfig=plt.gcf()\nfig.set_size_inches(10,6)\nplt.show()","b6da6117":"iris.hist(edgecolor='black', linewidth=1.2)\nfig=plt.gcf()\nfig.set_size_inches(12,6)\nplt.show()","70201435":"plt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.violinplot(x='Species',y='PetalLengthCm',data=iris)\nplt.subplot(2,2,2)\nsns.violinplot(x='Species',y='PetalWidthCm',data=iris)\nplt.subplot(2,2,3)\nsns.violinplot(x='Species',y='SepalLengthCm',data=iris)\nplt.subplot(2,2,4)\nsns.violinplot(x='Species',y='SepalWidthCm',data=iris)","fb6a187e":"sns.countplot(x=\"Species\", data=iris)\niris.loc[:,'Species'].value_counts()","392f39cd":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\n\n# train test split\nx = iris.loc[:,iris.columns != 'Species']\ny = iris.loc[:,'Species']\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 1)\n\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\n\nprint('With KNN (K=3) accuracy is: ',knn.score(x_test,y_test)) # accuracy","858a83f6":"petal=iris[['PetalLengthCm','PetalWidthCm','Species']]\nsepal=iris[['SepalLengthCm','SepalWidthCm','Species']]\n\n# train test split\nx = petal.loc[:,petal.columns != 'Species']\ny = petal.loc[:,'Species']\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 1)\n\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\nprint('Petal Data accuracy is: ',knn.score(x_test,y_test)) # accuracy\n\n\n# train test split\nx = sepal.loc[:,sepal.columns != 'Species']\ny = sepal.loc[:,'Species']\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 1)\n\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\nprint('Sepal Data accuracy is: ',knn.score(x_test,y_test)) # accuracy","0b3cb382":"### Graphs","d6791694":"# DATA SCIENCE\n\nData scientist need to have these skills:\n1. Basic Tools: Like python, R or SQL. You do not need to know everything. What you only need is to learn how to use **python**\n1. Basic Statistics: Like mean, median or standart deviation. If you know basic statistics, you can use **python** easily. \n1. Data Munging: Working with messy and difficult data. Like a inconsistent date and string formatting. As you guess, **python** helps us.\n1. Data Visualization: Title is actually explanatory. We will visualize the data with **python** like matplot and seaborn libraries.\n1. Machine Learning: You do not need to understand math behind the machine learning technique. You only need is understanding basics of machine learning and learning how to implement it while using **python**.","00a67a3f":"### Import Libraries","d394e174":"### Machine Learning","6edc6ec6":"## Day-1 Plan\n1. What is data science? \n1. Introduction to Datasets\n1. Intro to Data Repositories (Kaggle, UCI ML, R Datasets) and Competitions Platforms(Kaggle, GrandChallenge)HINT\n   1. Networks Data (SNAP, HINT)\n1. Platforms for Machine Learning and Deep Learning\n    1. Kaggle\n    1. CoLab\n    1. Local Machines (Python, Jupyter)\n1. Statistical Analysis\n    1. https:\/\/numpy.org\/doc\/stable\/reference\/routines.statistics.html\n1. Graph plotting and its types\n    1. https:\/\/matplotlib.org\/stable\/gallery\/\n    1. https:\/\/seaborn.pydata.org\/examples\/index.html\n1. Data Structures and Libraries in Python (Numpy Arrays, List, DataFrames)\n    1. https:\/\/numpy.org\/doc\/stable\/user\/quickstart.html\n    2. https:\/\/numpy.org\/doc\/stable\/reference\/routines.array-manipulation.html\n    3. https:\/\/www.programiz.com\/python-programming\/list\n    4. https:\/\/jakevdp.github.io\/PythonDataScienceHandbook\/03.03-operations-in-pandas.html\n1. Introduction to Machine Learning\n    1. Know your data\n    1. Balanced and Imbalanced Data\n        1. How to Handle Imbalance Data (Sampling Techniques)\n        2. https:\/\/datascience.foundation\/sciencewhitepaper\/understanding-imbalanced-datasets-and-techniques-for-handling-them\n    1. Data with Missing Values\n        1. https:\/\/towardsdatascience.com\/7-ways-to-handle-missing-values-in-machine-learning-1a6326adf79e\n        2. https:\/\/jakevdp.github.io\/PythonDataScienceHandbook\/03.04-missing-values.html\n    1. Training, Validation and Test Data\n    1. Data Splitting\n1. KNN Algorithm","a4aee3fd":"### Data Structures"}}