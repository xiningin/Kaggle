{"cell_type":{"1460385c":"code","968ac39f":"code","2b3ffcab":"code","e02bd816":"code","db2a623c":"markdown"},"source":{"1460385c":"!cd ..\/input\/\n","968ac39f":"! git clone https:\/\/github.com\/kairess\/fingerprint_recognition ","2b3ffcab":"import cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport glob, os\n\n\ndef extract_label(img_path):\n    filename, _ = os.path.splitext(os.path.basename(img_path))\n    subject_id, etc = filename.split('__')\n    gender, lr, finger, _ = etc.split('_')\n    \n    gender = 0 if gender == 'M' else 1\n    lr = 0 if lr =='Left' else 1\n    \n    if finger == 'thumb':\n        finger = 0\n    elif finger == 'index':\n        finger = 1\n    elif finger == 'middle':\n        finger = 2\n    elif finger == 'ring':\n        finger = 3\n    elif finger == 'little':\n        finger = 4\n        \n    return np.array([subject_id, gender, lr, finger], dtype=np.uint16)\n\ndef extract_label2(img_path):\n    filename, _ = os.path.splitext(os.path.basename(img_path))\n\n    subject_id, etc = filename.split('__')\n    gender, lr, finger, _, _ = etc.split('_')\n    \n    gender = 0 if gender == 'M' else 1\n    lr = 0 if lr =='Left' else 1\n    \n    if finger == 'thumb':\n        finger = 0\n    elif finger == 'index':\n        finger = 1\n    elif finger == 'middle':\n        finger = 2\n    elif finger == 'ring':\n        finger = 3\n    elif finger == 'little':\n        finger = 4\n        \n    return np.array([subject_id, gender, lr, finger], dtype=np.uint16)","e02bd816":"\nimg_list = sorted(glob.glob('..\/input\/socofing\/SOCOFing\/Real\/*.BMP'))\nprint(\"Length: \",len(img_list))\n\nimgs = np.empty((len(img_list), 96, 96), dtype=np.uint8)\nlabels = np.empty((len(img_list), 4), dtype=np.uint16)\nfor i, img_path in enumerate(img_list):\n    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)\n    img = cv2.resize(img, (96, 96))\n    imgs[i] = img\n    \n    # subject_id, gender, lr, finger\n    labels[i] = extract_label(img_path)\n   \n    \nnp.save('..\/input\/fingerprint-dataset-for-fvc2000-db4-b\/dataset\/x_real.npy', imgs)\nnp.save('fingerprint_recognition\/dataset\/y_real.npy', labels)\n\nplt.figure(figsize=(1, 1))\nplt.title(labels[-1])\nplt.imshow(imgs[-1], cmap='gray')","db2a623c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session"}}