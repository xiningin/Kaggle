{"cell_type":{"156e28d9":"code","e78b751c":"code","252bd4a1":"code","ae081de9":"code","9c0e5cf9":"code","99948df4":"code","80a7b76a":"code","5371488c":"code","cbbab626":"code","3171b1e5":"code","7b4ca12a":"code","3720e96a":"code","ffbe72bb":"code","f0127cf5":"code","0d42cbf5":"code","31c8b11b":"code","85976d02":"code","90f885c8":"code","992cb26e":"code","22329576":"code","e5fd2035":"code","49fd09a5":"code","b15ab70d":"code","f96502fb":"code","55a8a2de":"code","5639efc4":"code","cf344497":"code","0edbeed4":"code","fd6f351f":"code","9f98520f":"code","8e012002":"code","e3014a09":"code","78d8641d":"code","206b66a5":"code","50a683ce":"code","3ba11b30":"code","7df3d544":"code","ed156583":"code","730d1077":"code","ca4234a6":"code","5078a5e3":"code","382b10ce":"code","b4c5a7c0":"code","d5f19d37":"code","379bd860":"code","401170e2":"code","e3bdd6dc":"code","10a1cd74":"code","5c9bacd3":"code","3bcf2c51":"code","152ec774":"code","52869bd4":"code","a6a4ed9f":"code","4fc70f9d":"code","f19fcdc2":"code","970b46fe":"code","7c1fc94f":"code","095febc3":"code","c4538023":"code","369dca0e":"code","113bfed2":"code","0bbd4445":"code","2261767b":"code","de07d6de":"code","cf8162ab":"code","37c2b6cc":"code","28838767":"code","0df76e96":"code","de84c383":"code","3d4af8bb":"code","0acf0754":"code","2c0eeddd":"code","79b2b0d7":"code","bacae3d7":"code","688b0b5c":"code","684d39e9":"code","1c5facae":"code","c62c8f15":"code","55803d15":"code","2a015ad4":"code","3c65f7f7":"code","6f4026d2":"code","79b3702a":"code","cea96399":"code","9a868d3f":"code","125fef80":"code","d9f8d3af":"code","b9895ab5":"code","a2479145":"code","0dec450a":"code","c7d6fbdf":"code","d0dbb3fe":"code","12952cc9":"code","87d6ac39":"code","47812595":"code","a81c9c47":"code","26e61715":"markdown","2d6841f2":"markdown","f1665a96":"markdown","17b563aa":"markdown","c95d7821":"markdown","3b67740d":"markdown","11c840b4":"markdown","bd55b1a6":"markdown","c06ce713":"markdown","1413c017":"markdown","757cdfc2":"markdown","ca245af1":"markdown","1695197b":"markdown","0e085ee0":"markdown","58cb5c44":"markdown","bc8a69cb":"markdown","7a43eaf9":"markdown","1a406fd1":"markdown","e54263dc":"markdown","ab03ad93":"markdown","e5251c54":"markdown","82d240db":"markdown","138b576e":"markdown","590f3291":"markdown","318b9ae0":"markdown","e6055f9b":"markdown","7b07a0d4":"markdown","babf9ae3":"markdown","2e35157b":"markdown","d8285e15":"markdown","935af28c":"markdown","11d66c36":"markdown","aa7539ad":"markdown","3a88980c":"markdown","6b79a6e3":"markdown","fee2ec71":"markdown","3c556934":"markdown","fb38264d":"markdown","18bc391a":"markdown","2c96089b":"markdown","76d5fd76":"markdown","b97f3b60":"markdown","52c7ce82":"markdown","e081145e":"markdown","b1e37c48":"markdown","5dbf8df9":"markdown","7aacdeb7":"markdown","c7871ec8":"markdown","9f5dba7a":"markdown","74c9236b":"markdown","ca4ff69c":"markdown","2ed473d4":"markdown","e62aecb4":"markdown","a1a3cbf8":"markdown","dd42f1e2":"markdown","2c242544":"markdown","0ae6c23e":"markdown","afbbc662":"markdown","362e27a0":"markdown","dede9dd9":"markdown","0600b4fc":"markdown","00dea0b0":"markdown","0fa10841":"markdown","9247e458":"markdown","313fc3e3":"markdown","cb96b1e2":"markdown","e3d094b1":"markdown","e995d9ce":"markdown","395bece6":"markdown","5bd7386e":"markdown","048933db":"markdown"},"source":{"156e28d9":"import os #paths to file\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\nimport warnings# warning filter\n\n\n#ploting libraries\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport plotly.graph_objects as go\n\n\n# ML libraries\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import cross_val_score\n\n\n#ML models\nfrom sklearn.linear_model import Ridge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor","e78b751c":"df=pd.read_csv('..\/input\/videogamesales\/vgsales.csv')\ndf.head()\ndf.shape","252bd4a1":"df.info()","ae081de9":"df.describe()","9c0e5cf9":"df.isnull().sum()\n","99948df4":"len(df)-len(df.drop_duplicates())","80a7b76a":"# null values are little so i will drop them\ndf.dropna(inplace=True)\ndf['Year']=df['Year'].astype(int)\n","5371488c":"df.describe()\n","cbbab626":"df.head()\n","3171b1e5":"ax=plt.figure(figsize=(10,6))\nsns.distplot(df['Year'],color='green')","7b4ca12a":"ax=plt.figure(figsize=(15,6))\nsns.barplot(x='Genre',y='NA_Sales',data=df,palette='Paired')\nplt.ylabel('Sales')\nplt.title('Sales of different genre in North America')","3720e96a":"ax=plt.figure(figsize=(15,6))\nsns.barplot(x='Genre',y='EU_Sales',data=df,palette='tab10')\nplt.ylabel('Sales')\nplt.title('Sales of different genre in Europe')","ffbe72bb":"ax=plt.figure(figsize=(15,6))\nsns.barplot(x='Genre',y='JP_Sales',data=df,palette='hls')\nplt.ylabel('Sales')\nplt.title('Sales of different genre in Japan')","f0127cf5":"ax=plt.figure(figsize=(15,6))\nsns.barplot(x='Genre',y='Other_Sales',data=df,palette='magma')\nplt.ylabel('Sales')\nplt.title('Sales of different genre in other Regions')","0d42cbf5":"ax=plt.figure(figsize=(15,6))\nsns.barplot(x='Genre',y='Global_Sales',data=df,palette='magma')\nplt.ylabel('Sales')\nplt.title('Sales of different genre Globally')","31c8b11b":"plt.figure(figsize=(30, 10))\nsns.countplot(x=\"Year\", data=df, hue='Genre', order=df.Year.value_counts().iloc[:5].index)\nplt.xticks(size=16, rotation=90)","85976d02":"a=np.arange(1,16292)\nax=plt.figure(figsize=(15,6))\nsns.barplot(x='Genre',y=a,data=df,palette='icefire')\nplt.ylabel('Frequency')\nplt.title('Frequency of different Genre')","90f885c8":"ax=plt.figure(figsize=(15,6))\ndf.groupby(['Year'])['Global_Sales'].sum().plot()\nplt.grid()\nplt.ylabel('Global Sales')\nplt.title('Global Sales over the years')","992cb26e":"ax=plt.figure(figsize=(15,6))\ndf.groupby(['Platform'])['Global_Sales'].sum().plot.bar()\nplt.xticks(rotation=45)\nplt.ylabel('Sales')\nplt.title('Sales of games in different platforms globally')","22329576":"year_max_df = df.groupby(['Year', 'Genre']).size().reset_index(name='count')\nyear_max_idx = year_max_df.groupby(['Year'])['count'].transform(max) == year_max_df['count']\nyear_max_genre = year_max_df[year_max_idx].reset_index(drop=True)\nyear_max_genre = year_max_genre.drop_duplicates(subset=[\"Year\", \"count\"], keep='last').reset_index(drop=True)\ngenre = year_max_genre['Genre'].values\n\nplt.figure(figsize=(30, 15))\ng = sns.barplot(x='Year', y='count', data=year_max_genre)\nindex = 0\nfor value in year_max_genre['count'].values:\n    g.text(index, value + 5, str(genre[index] + '----' +str(value)), color='#000', size=14, rotation= 90, ha=\"center\")\n    index += 1\n\n\n\n\nplt.xticks(rotation=90)\nplt.show()","e5fd2035":"top10=df[\"Publisher\"].value_counts().index\nplt.figure(figsize = (20,10))\nsns.barplot(top10[:10], df[\"Publisher\"].value_counts().iloc[:10]\n           ,palette='mako'\n           ,edgecolor='black'\n           )\nplt.title(\"Most Games produced in Specific Gaming Publisher\",fontsize=20)\nplt.show()","49fd09a5":"year_sale_dx = df.groupby(by=['Year', 'Genre'])['Global_Sales'].sum().reset_index()\nyear_sale = year_sale_dx.groupby(by=['Year'])['Global_Sales'].transform(max) == year_sale_dx['Global_Sales']\nyear_sale_max = year_sale_dx[year_sale].reset_index(drop=True)\ngenre = year_sale_max['Genre']\nplt.figure(figsize=(30, 18))\ng = sns.barplot(x='Year', y='Global_Sales', data=year_sale_max)\nindex = 0\nfor value in year_sale_max['Global_Sales']:\n    g.text(index, value + 1, str(genre[index] + '----' +str(round(value, 2))), color='#000', size=14, rotation= 90, ha=\"center\")\n    index += 1\n\nplt.xticks(rotation=90)\nplt.show()","b15ab70d":"Top50byPublisher = df.nlargest(50, 'Global_Sales')[['Global_Sales', 'Name', 'Publisher']]\nTop50byPublisher = Top50byPublisher.groupby(pd.Grouper(key='Publisher')).size().reset_index(name='Number of Games')\nTop50byPublisher","f96502fb":"comp_genre = df[['Genre', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]\ncomp_map = comp_genre.groupby(by=['Genre']).sum()\ncomp_table = comp_map.reset_index()\ncomp_table = pd.melt(comp_table, id_vars=['Genre'], value_vars=['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales'], var_name='Sale_Area', value_name='Sale_Price')\nplt.figure(figsize=(15, 10))\nsns.barplot(x='Genre', y='Sale_Price', hue='Sale_Area', data=comp_table)","55a8a2de":"top_sale_reg = df[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]\ntop_sale_reg = top_sale_reg.sum().reset_index()\ntop_sale_reg = top_sale_reg.rename(columns={\"index\": \"region\", 0: \"sale\"})\ntop_sale_reg\n","5639efc4":"plt.figure(figsize=(12, 8))\nsns.barplot(x='region', y='sale', data = top_sale_reg)","cf344497":"labels = top_sale_reg['region']\nsizes = top_sale_reg['sale']\nplt.figure(figsize=(10, 8))\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)","0edbeed4":"GSales_Year = df.groupby('Year')[['Global_Sales','NA_Sales','EU_Sales','JP_Sales','Other_Sales']].sum()\nGSales_Year.plot(figsize = (20,10))","fd6f351f":"PS = df[df['Platform'] == 'PS'].groupby('Year')['Global_Sales'].sum().reset_index()\nPS2 = df[df['Platform'] == 'PS2'].groupby('Year')['Global_Sales'].sum().reset_index()\nPS3 = df[df['Platform'] == 'PS3'].groupby('Year')['Global_Sales'].sum().reset_index()\nPS4 = df[df['Platform'] == 'PS4'].groupby('Year')['Global_Sales'].sum().reset_index()\nPC = df[df['Platform'] == 'PC'].groupby('Year')['Global_Sales'].sum().reset_index()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=PS['Year'], y=PS['Global_Sales'],\n                         name=\"PS Sales\",\n                         hovertext=PS['Global_Sales']))\n\nfig.add_trace(go.Scatter(x=PS2['Year'], y=PS2['Global_Sales'],\n                         name=\"PS2 Sales\",\n                         hovertext=PS2['Global_Sales']))\n\nfig.add_trace(go.Scatter(x=PS2['Year'], y=PS2['Global_Sales'],\n                         name=\"PS2 Sales\",\n                         hovertext=PS2['Global_Sales']))\n\nfig.add_trace(go.Scatter(x=PS3['Year'], y=PS3['Global_Sales'],\n                         name=\"PS3 Sales\",\n                         hovertext=PS3['Global_Sales']))\n\nfig.add_trace(go.Scatter(x=PS4['Year'], y=PS4['Global_Sales'],\n                         name=\"PS4 Sales\",\n                         hovertext=PS4['Global_Sales']))\n\nfig.add_trace(go.Scatter(x=PC['Year'], y=PC['Global_Sales'],\n                         name=\"PC Sales\",\n                         hovertext=PC['Global_Sales']))\n\nfig.update_layout(title_text='Playstation vs PC Global Sales Comparison',\n                  title_x=0.5, title_font=dict(size=22))  \nfig.update_layout(\n    xaxis_title=\"Year\",\n    yaxis_title=\"Global Sales (M)\")\n\nfig.show()","9f98520f":"dfcopy=df.corr() \n\nsns.heatmap(dfcopy ,annot = True, cmap=\"magma\")","8e012002":"\ndf.plot(kind = \"box\" , subplots = True , figsize = (18,18), layout = (3,5))\n","e3014a09":"g = sns.regplot(df.Global_Sales,df.EU_Sales,ci=None,scatter_kws= {\"color\":\"r\",\"s\":9});\nplt.xlim(-2,85)\nplt.ylim(bottom=0)","78d8641d":"df = df.drop([0],axis=0) ","206b66a5":"g = sns.regplot(df.Global_Sales,df.EU_Sales,ci=None,scatter_kws= {\"color\":\"r\",\"s\":9});\nplt.xlim(-2,85)\nplt.ylim(bottom=0)","50a683ce":"df.head()","3ba11b30":"from sklearn.preprocessing import LabelEncoder\n\ndff = df.copy()\n\nle = LabelEncoder()\n\nfeature = [\"Platform\", \"Genre\"]\n\n\nfor col in feature:\n    dff[col] = le.fit_transform(df[col])\n    ","7df3d544":"dff.head()","ed156583":"X = dff[['Platform', 'Genre', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].values\n\ny = dff['Global_Sales'].values","730d1077":"X.shape","ca4234a6":"y.shape","5078a5e3":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","382b10ce":"from sklearn.preprocessing import RobustScaler\nro = RobustScaler()","b4c5a7c0":"x_train = ro.fit_transform(x_train)\nx_test = ro.fit_transform(x_test)\n","d5f19d37":"from sklearn.metrics import accuracy_score, confusion_matrix, f1_score,classification_report, roc_curve","379bd860":"regressor = DecisionTreeRegressor()\nregressor.fit(x_train, y_train)\n\n\n","401170e2":"regressor.score(x_train,y_train)","e3bdd6dc":"regressor.score(x_test,y_test)\n","10a1cd74":"yTreePre= regressor.predict(x_test)","5c9bacd3":"r2Tree= r2_score(y_test ,yTreePre )\nr2Tree","3bcf2c51":"from sklearn.metrics import mean_absolute_error\nmae = mean_absolute_error(yTreePre, y_test)\nprint('Mean absolute error '+str(mae))","152ec774":"db = pd.DataFrame({'Actual': y_test, 'Predicted': yTreePre})\ndb","52869bd4":"test = pd.DataFrame({'Predicted':yTreePre,'Actual':y_test})\nfig= plt.figure(figsize=(16,8))\ntest = test.reset_index()\ntest = test.drop(['index'],axis=1)\nsns.jointplot(x='Actual',y='Predicted',data=test,kind='reg',);","a6a4ed9f":"db1 = db.head()\ndb1.plot(kind='line',figsize=(15,8))\nplt.show()","4fc70f9d":"regressor.feature_importances_","f19fcdc2":"rid = Ridge()\nrid.fit(x_train,y_train)","970b46fe":"rid.score(x_train,y_train)","7c1fc94f":"rid.score(x_test,y_test)","095febc3":"yRidPre = rid.predict(x_test)","c4538023":"r2Rid = r2_score(y_test ,yRidPre )\nr2Rid","369dca0e":"from sklearn.metrics import mean_absolute_error\nmae = mean_absolute_error(yRidPre, y_test)\nprint('Mean absolute error '+str(mae))","113bfed2":"dbRidge = pd.DataFrame({'Actual': y_test, 'Predicted': yRidPre})\ndbRidge","0bbd4445":"x_test.shape","2261767b":"y_test.shape","de07d6de":"test = pd.DataFrame({'Predicted':yRidPre,'Actual':y_test})\nfig= plt.figure(figsize=(16,8))\ntest = test.reset_index()\ntest = test.drop(['index'],axis=1)\nsns.jointplot(x='Actual',y='Predicted',data=test,kind='reg',);","cf8162ab":"dbridge1 = dbRidge.head()\ndbridge1.plot(kind='line',figsize=(15,8))\nplt.show()","37c2b6cc":"rid.coef_","28838767":"lr = LinearRegression()\nlr.fit(x_train,y_train)","0df76e96":"lr.score(x_train,y_train)","de84c383":"lr.score(x_test,y_test)","3d4af8bb":"yLinearPre = lr.predict(x_test)","0acf0754":"r2Linear = r2_score(y_test , yLinearPre)\nr2Linear","2c0eeddd":"test = pd.DataFrame({'Predicted':yLinearPre,'Actual':y_test})\nfig= plt.figure(figsize=(16,8))\ntest = test.reset_index()\ntest = test.drop(['index'],axis=1)\nsns.jointplot(x='Actual',y='Predicted',data=test,kind='reg',);","79b2b0d7":"from sklearn.metrics import mean_absolute_error\nmae = mean_absolute_error(yLinearPre, y_test)\nprint('Mean absolute error '+str(mae))","bacae3d7":"dbLinear = pd.DataFrame({'Actual': y_test, 'Predicted': yLinearPre})\ndbLinear","688b0b5c":"dbLinear1 = dbLinear.head()\ndbLinear1.plot(kind='line',figsize=(15,8))\nplt.show()","684d39e9":"lr.coef_","1c5facae":"rf = RandomForestRegressor()\nrf.fit(x_train , y_train)","c62c8f15":"rf.score(x_train,y_train)","55803d15":"rf.score(x_test,y_test)","2a015ad4":"yRandomPre= rf.predict(x_test)","3c65f7f7":"r2Random = r2_score(y_test , yRandomPre)\nr2Random","6f4026d2":"from sklearn.metrics import mean_absolute_error\nmae = mean_absolute_error(yRandomPre, y_test)\nprint('Mean absolute error '+str(mae))","79b3702a":"dbRandom = pd.DataFrame({'Actual': y_test, 'Predicted': yRandomPre})\ndbRandom","cea96399":"test = pd.DataFrame({'Predicted':yRandomPre,'Actual':y_test})\nfig= plt.figure(figsize=(16,8))\ntest = test.reset_index()\ntest = test.drop(['index'],axis=1)\nsns.jointplot(x='Actual',y='Predicted',data=test,kind='reg',);","9a868d3f":"dbRandom1 = dbRandom.head()\ndbRandom1.plot(kind='line',figsize=(15,8))\nplt.show()","125fef80":"rf.feature_importances_","d9f8d3af":"knn=KNeighborsRegressor()\nknn.fit(x_train, y_train)","b9895ab5":"knn.score(x_train,y_train)","a2479145":"knn.score(x_test , y_test)","0dec450a":"pred = knn.predict(x_test)\n\nr2_knn = r2_score(y_test,pred)\nprint(r2_knn)","c7d6fbdf":"from sklearn.metrics import mean_absolute_error\nmae = mean_absolute_error(pred, y_test)\nprint('Mean absolute error '+str(mae))","d0dbb3fe":"dbKNN = pd.DataFrame({'Actual': y_test, 'Predicted': pred})\ndbKNN","12952cc9":"test = pd.DataFrame({'Predicted':pred,'Actual':y_test})\nfig= plt.figure(figsize=(16,8))\ntest = test.reset_index()\ntest = test.drop(['index'],axis=1)\nsns.jointplot(x='Actual',y='Predicted',data=test,kind='reg',);","87d6ac39":"dbKNN1 = dbKNN.head()\ndbKNN1.plot(kind='line',figsize=(15,8))\nplt.show()","47812595":"import statsmodels.api as sm\nimport numpy as np\nnp.random.seed(1)\nm = sm.add_constant(X)\nest = sm.OLS(y, m)\nest2 = est.fit()\nprint(est2.params)","a81c9c47":"import statsmodels.api as sm\nfrom scipy import stats\nm = sm.add_constant(X)\nest=sm.OLS(y,m)\nest2 = est.fit()\nprint(est2.summary())","26e61715":"------------------------------------------------------------------------","2d6841f2":"# EDA","f1665a96":"--------------------------------------------------------","17b563aa":"---------------------------------------------------------","c95d7821":"Platform and shooter games are the most played game genre Globally\n\n","3b67740d":"PS2 has recorded highest sales globally\n\n","11c840b4":" Sales compearison by genre","bd55b1a6":"-----------------------------------------------------------","c06ce713":"Frequency of different Genre\n\n","1413c017":"---------------------------------------","757cdfc2":"------------------------------------------------------------","ca245af1":"Role play games are highly played in Japan\n\n","1695197b":"Platform and shooter games are the most played game genre in Europe\n\n","0e085ee0":"--------------------------------------------------------","58cb5c44":"-------------------------------------------------------------","bc8a69cb":"2009 Action is 139.36 million and 2008 Action is 136.39 miliion .","7a43eaf9":"**Decsion Tree**","1a406fd1":"# Preview Data","e54263dc":"**KNN**","ab03ad93":"Top 5 years games release by genre","e5251c54":"-----------------------------------------------------------------","82d240db":"--------------------------------------------------------------------------------------","138b576e":"---------------------------------------------------------------","590f3291":"**Sales of different genre Globally**","318b9ae0":"# Dealing with Outliers","e6055f9b":"---------------------------------------------------------------","7b07a0d4":"----------------------------------------------------------","babf9ae3":"Highest sales have been recorded from 2007 to 2010\n\n","2e35157b":"Adventure and strategy games are the highest in the dataset\n\n","d8285e15":"Sales of games in different platforms globally\n\n","935af28c":"Top 10 Publisher in order and most is Electronic Arts","11d66c36":"# Check duplication","aa7539ad":"**Sales of different genre in North America**","3a88980c":"---------------------------------------------------","6b79a6e3":"----------------------------------------------------------------","fee2ec71":"Which genre game has been released the most in a single year?","3c556934":"# ","fb38264d":"**Sales of different genre in other Regions**","18bc391a":"1. most of sales between 2005 and 2010\n2. lest sales in 1980 to 1990\n\n","2c96089b":"------------------------------------------","76d5fd76":"**RandomForestRegressor**","b97f3b60":"# Label Encoding and prepare X and y","52c7ce82":"Playstation vs PC Global Sales Comparison\u00b6\n","e081145e":"------------------------------------------------------","b1e37c48":"------------------------------------------------------------------","5dbf8df9":" Get the features and labels from the DataFrame (dataset). The features are all the columns except \u2018status\u2019, and the labels are those in the \u2018status\u2019 column.","7aacdeb7":"# Lib","c7871ec8":"# Modeling","9f5dba7a":"**Sales of different genre in Europe**","74c9236b":"**LinearRegression**","ca4ff69c":"2009 Action 272 and 2012 Action  266 games are release.","2ed473d4":"**Sales of different genre in Japan**","e62aecb4":"-----------------------------------------------------------------","a1a3cbf8":"North America is the top","dd42f1e2":"----------------------------------------------------------------------------","2c242544":"2009 has the highest numberof game releases\n\n","0ae6c23e":"----------------------------------------------------------------------------------------------","afbbc662":"-----------------------------------------------","362e27a0":"# Conclusion \n\n1. Most Games produced in Specific Gaming Platform is DS then Ps2\n2. The most popular type of game is Action then Sports. Lowest is Puzzle\n3. Top 10 Publisher in order and most is Electronic Arts\n4. Most games Produced in between 2002 to 2016 sp in 2010\n5. Most published type of games is Action\n6. Most of sales between 2005 and 2010 .lest sales in 1980 to 1990\n\n -----------------------------------------------------------------------\n best Models ara Ridge and Linear Regression\n\n\n \u270c Thank you for reading:\n\n---\n\n\n\n---\n\n","dede9dd9":"Which genre game has sold the most in a single year?","0600b4fc":"Total profit by region","00dea0b0":"**Ridge**","0fa10841":"# Description\n\n![hsieh_angela_nprpchh_videogamesb_wide-7f3d5bac5a5885fdf43d6a7ed54bb6c134b55b12.jpg](attachment:8c2c650d-6dcc-40e4-a9b9-b66cb58ce310.jpg)\n\nThis dataset contains a list of video games with sales greater than 100,000 copies. It was generated by a scrape of vgchartz.com.\n\nMatrix column entries (attributes):\n\n1. Rank - Ranking of overall sales\n\n2.  Name - The games name\n\n3.  Platform - Platform of the games release (i.e. PC,PS4, etc.)\n\n4. Year - Year of the game's release\n\n5. Genre - Genre of the game\n\n6. Publisher - Publisher of the game\n\n7. NA_Sales - Sales in North America (in millions)\n\n8. EU_Sales - Sales in Europe (in millions)\n\n9. JP_Sales - Sales in Japan (in millions)\n\n10. Other_Sales - Sales in the rest of the world (in millions)\n\n11. Global_Sales - Total worldwide sales.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","9247e458":"Global Sales over the years\n\n","313fc3e3":"See, Here Action Sports and Shooter have much sales compare with others. and North America (NA_sales) have heights sales all the time. Its look like they love video games most","cb96b1e2":"Platform and shooter games are the most played game genre in North America","e3d094b1":"------------------------------------------","e995d9ce":"# Train | Test","395bece6":"# Data Preprocessing","5bd7386e":"Distribution of Top Seller 50 Games by Publishers\u00b6\n","048933db":"----------------------------------------------------------"}}