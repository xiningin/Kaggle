{"cell_type":{"482f98fb":"code","afcccbc2":"code","ad22a8d5":"code","12cecbe1":"code","515ad715":"code","1a766cb7":"code","93d6d91d":"code","bc053e7e":"code","4630b37f":"code","7954ba90":"code","7b63eb77":"code","2b67caee":"code","c77e4b01":"code","ff5232c2":"code","1228d8fe":"code","58367712":"code","a5b25361":"code","c1aa2776":"code","90ff3914":"code","b2036b33":"code","0e8c89c1":"code","1a74f75a":"code","75ea7a34":"code","a9761b29":"code","da1498ad":"markdown","13c5ab88":"markdown","ef6dda4b":"markdown","4a6ea519":"markdown","ae0568e5":"markdown","3342a718":"markdown","fcb290a3":"markdown","0a69d6ac":"markdown","2a5ce39b":"markdown","06306fd6":"markdown","3e8a8aa6":"markdown","dfe43fc8":"markdown","b7d2cd7e":"markdown","5969cc8c":"markdown","02090316":"markdown","f4914f87":"markdown","ca846b0c":"markdown","ddf78804":"markdown","6f7c84fb":"markdown","41bf37dc":"markdown","e5706e81":"markdown"},"source":{"482f98fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","afcccbc2":"import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report","ad22a8d5":"df = pd.read_csv('..\/input\/adult-census-income\/adult.csv', na_values=['?'])\ndf.sample(10)","12cecbe1":"df.income.value_counts()","515ad715":"df['income'] = df['income'].map({'<=50K': 0, '>50K': 1})\ndf.head()","1a766cb7":"df.income.value_counts()","93d6d91d":"df.shape","bc053e7e":"df.dtypes","4630b37f":"df.info()","7954ba90":"df.isnull().sum().any()","7b63eb77":"df.isnull().sum()","2b67caee":"print(\"Types of working class :\\n\", df.workclass.value_counts(), '\\n', 'Types in occupation\\n', df.occupation.value_counts(), '\\n', 'Types in Native Country\\n', df['native.country'].value_counts())","c77e4b01":"df['workclass'] = df['workclass'].fillna('X')\ndf['occupation'] = df['occupation'].fillna('X')\ndf['native.country'] = df['native.country'].fillna('X')","ff5232c2":"df.dtypes","1228d8fe":"num_features = ['age', 'fnlwgt', 'education.num', 'capital.gain', 'capital.loss', 'hours.per.week', 'income']\n\ncat_features = ['workclass', 'education', 'marital.status', 'occupation', 'relationship', 'race', 'sex', 'native.country']","58367712":"#Income counts\nsns.countplot(df['income'])\nplt.show()","a5b25361":"#Plotting for the numerical features\nfig, ax = plt.subplots(figsize=(25, 25))\np = sns.heatmap(df[num_features].corr(), annot=True, cmap=\"Blues\")\nplt.title(\"Correlation of Numerical Features\", fontsize=20)\nplt.show()","c1aa2776":"#Education Number vs Income\ng = sns.catplot(x=\"education.num\",y=\"income\",data=df,kind=\"bar\",height = 6,palette = \"muted\")\ng.despine(left=True)\ng = g.set_ylabels(\">50K probability\")","90ff3914":"df['sex'].value_counts()","b2036b33":"df['marital.status'].value_counts()","0e8c89c1":"#Map Sex as a binary column\ndf['sex'] = df.sex.map({'Male':0, 'Female':1})\n\n#Married can be converted manually to binary columns\n#No spouse means Single\ndf['marital.status'] = df['marital.status'].replace(['Never-married', 'Divorced', 'Separated', 'Widowed'], 'Single')\n#Spouse means Married More simple right\ndf['marital.status'] = df['marital.status'].replace(['Married-civ-spouse', 'Married-spouse-absent', 'Married-AF-spouse'], 'Married')\n#Now we map it to Binary values\ndf['marital.status'] = df['marital.status'].map({'Married':1, 'Single':0})","1a74f75a":"#Drop columns that do not contribute to final result\ndf.drop(labels=[\"workclass\",\"education\",\"occupation\",\"relationship\",\"race\",\"native.country\"], axis = 1, inplace = True)\ndf.head()","75ea7a34":"X = df.drop(labels=['income'], axis=1)\ny = df['income']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=7)","a9761b29":"model = LogisticRegression()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nprint(\"Accuracy: %s%%\" % (100*accuracy_score(y_test, y_pred)))\nprint(confusion_matrix(y_test, y_pred))\nprint(\"Classification Report for Logistic Regression\")\nprint(classification_report(y_test, y_pred))","da1498ad":"* Numeric Features(age, fnlwgt, education.num, capital.gain, capital.loss, hours.per.week, income)\n\n* Categorical Features(workclass, education, marital.status, occupation, relationship, race, sex, native.country)","13c5ab88":"I'll be adding a more comprehensive EDA in a later version. I just need to finalise the ones to add","ef6dda4b":"We can convert the following columns easily","4a6ea519":"I noticed question marks when viewing the dataset so I decided to change it when reading the CSV file.","ae0568e5":"**Now the income column is our target so we need to be changing that**\n\n* Greater than 50k - 1\n\n* Lower than 50k - 0","3342a718":"* Target variable is ready now :)","fcb290a3":"## Sex ","0a69d6ac":"# Visualisations of features","2a5ce39b":"# Feature Engineering","06306fd6":"**But first the feature split**\n\nThese are the data types of the columns:","3e8a8aa6":"Education_num refers to number of years of Education a person has done(You can correct me if I'm wrong). So, let's see what relation that has to income","dfe43fc8":"## Marital Status","b7d2cd7e":"**Null values??**","5969cc8c":"# TODO\n\n* More EDA \n* Use a different model to improve maybe","02090316":"# Packages Required","f4914f87":"**Heatmap of Correlation**","ca846b0c":"# DataFrame Analysis\n\n![mem.jpg](attachment:mem.jpg)","ddf78804":"**Let's See:**\n\nAll the columns that have null values are not that easy to replace. Maybe I'll work on them for a future version.","6f7c84fb":"For now I am going to try to fill the values with X for now and maybe change them in the next version","41bf37dc":"# End\n\nThat's all in this notebook for now. I'll be looking to add more if possible. Anything I need to look for that I might have missed? Let me know in the comments below :).","e5706e81":"# Train Logistic Regressor"}}