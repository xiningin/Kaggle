{"cell_type":{"f9aa2677":"code","65cb1a21":"code","e2a4adff":"code","e425b313":"code","632d5583":"code","d281631c":"code","4df270d2":"code","597206d8":"code","18a949b4":"code","73cc1240":"code","4e8c8749":"code","91804666":"code","b43183b4":"code","33b144fc":"code","87ad6f87":"code","40b8e3fa":"code","1f2a884b":"code","d6c5f57a":"code","a71549c1":"code","06911369":"code","7973d48a":"code","2d8bf41e":"code","45722095":"code","caf1e642":"code","db29d0cc":"code","7d7f733d":"code","d0cb45e0":"code","f7473d67":"code","0521dc9a":"code","2bd2a885":"markdown","edbba946":"markdown","f6dd4b35":"markdown","c7b8bf91":"markdown","dedc084e":"markdown","5dad0c34":"markdown"},"source":{"f9aa2677":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65cb1a21":"from sklearn.preprocessing import LabelEncoder\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.metrics import f1_score, recall_score\n","e2a4adff":"data= pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')","e425b313":"print(data.head(5))\ndata.isnull().sum()\n","632d5583":"data['bmi']=data['bmi'].fillna(data['bmi'].mean())","d281631c":"print(len(data[data['stroke']==1]), len(data[data['stroke']==0]))","4df270d2":"np.unique(data['work_type'])","597206d8":"np.unique(data['smoking_status'])","18a949b4":"data.gender.unique()","73cc1240":"\ncategories=['gender','hypertension','heart_disease','ever_married','work_type','Residence_type','smoking_status']\n\n","4e8c8749":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfor i in categories:\n    cat=data[data['stroke']==1][i]\n    fig,n=plt.subplots(figsize=(10,3))\n    g=sns.barplot(x=cat.value_counts().index,y=cat.value_counts())\n    g.set_title(f'Stroke distribution by {i}')\n    g.set_ylabel('Number of observations')\n   ","91804666":"obtype=['gender','ever_married','work_type','Residence_type','smoking_status']\ngen_encode=LabelEncoder()\nmar_encode=LabelEncoder()\nwork_encode=LabelEncoder()\nres_encode=LabelEncoder()\nsmo_encode=LabelEncoder()\ndata['gender']=gen_encode.fit_transform(data['gender'])\ndata['ever_married']=mar_encode.fit_transform(data['ever_married'])\ndata['work_type']=work_encode.fit_transform(data['work_type'])\ndata['Residence_type']=res_encode.fit_transform(data['Residence_type'])\ndata['smoking_status']=smo_encode.fit_transform(data['smoking_status'])","b43183b4":"\nX=data.iloc[:,1:-1]\ny=data.iloc[:,-1]\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.4, random_state=42)\nn_features= X.shape[1]","33b144fc":"data.head(3)","87ad6f87":"import xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import f1_score, recall_score\n\nmodel = xgb.XGBClassifier(n_estimators= 50,objective= 'binary:logistic', scale_pos_weight=1500, seed=42)\nmodel.fit(X_train, y_train )","40b8e3fa":"y_pred = model.predict(X_test)\n","1f2a884b":"print(f1_score(y_test, y_pred))","d6c5f57a":"#LSTM model \nimport os\nimport numpy as np\nimport pandas as pd\nimport random, math\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.utils import shuffle as skshuffle\nfrom sklearn.model_selection import train_test_split as sk_train_test_split\nfrom tensorflow.keras.layers import Convolution1D, Dense, Flatten, GlobalAveragePooling1D, AveragePooling2D\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import BatchNormalization, GlobalAveragePooling2D, Conv2D\nfrom tensorflow.keras.layers import Dropout, AveragePooling2D, LSTM, GRU\nfrom sklearn.metrics import mean_squared_error\nfrom time import time\nfrom tensorflow.keras.callbacks import TensorBoard\nimport tensorflow as tf\n\nfrom tensorflow.keras import regularizers\n\nos.environ[\"PYTHONHASHSEED\"] = \"0\"\nnp.random.seed(64)\nrandom.seed(64)\ntf.compat.v1.set_random_seed(64)\nfrom keras import backend as K\nsess = tf.compat.v1.Session(graph=tf.compat.v1.get_default_graph())\nfrom tensorflow.compat.v1.keras import backend as K\nK.set_session(sess)","a71549c1":"data.head(3)","06911369":"X_train= np.array(X_train).reshape(len(X_train), 1, n_features)\nX_test= np.array(X_test).reshape(len(X_test), 1, n_features)\n","7973d48a":"from sklearn.utils import class_weight\nclass_weights = class_weight.compute_class_weight('balanced', np.unique(y_train),y_train)\nclass_weights = dict(enumerate(class_weights))","2d8bf41e":"model2 = Sequential()\nmodel2.add(LSTM(50, return_sequences=True, input_shape=(1, X_train.shape[2])))\n# model.add(Dropout(0.2))\nmodel2.add(LSTM(25, return_sequences=False))\n\nmodel2.add(Dense(1, activation='sigmoid'))\nfrom tensorflow.keras.optimizers import SGD\n# model.compile(loss='binary_crossentropy', optimizer=SGD(), metrics=['binary_accuracy'])\nmodel2.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel2.summary()\n# fit model\nmodel2.fit(X_train, y_train, epochs=20, batch_size=32, class_weight=class_weights, shuffle=True)\n# ","45722095":"predictions= model2.predict_classes(X_test)\n","caf1e642":"sum(predictions)","db29d0cc":"print(f1_score(y_test, predictions, average = 'binary'))\n","7d7f733d":"X_train = X_train.reshape(len(X_train), n_features)\nX_test= X_test.reshape(len(X_test), n_features)","d0cb45e0":"#### MLP performance investigation\n\ninput_shape = (n_features,)\nmodel3= Sequential()\nmodel3.add(Dense(350, input_shape=input_shape, activation='relu'))\nmodel3.add(Dense(50, activation='relu'))\nmodel3.add(Dense(1, activation='sigmoid'))\n\n# Configure the model and start training\nmodel3.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel3.fit(X_train, y_train, epochs=20, batch_size=32,class_weight=class_weights, shuffle=True )","f7473d67":"prediction= model3.predict_classes(X_test)\n","0521dc9a":"print(f1_score(y_test, prediction, average = 'binary'))\n","2bd2a885":"imbalancity check:","edbba946":"In this note book, I have investigated the performance of three calssifiers (XGB, Stacked LSTM, and MLP) with class weight technique due to the exsiting imbalanced classe. ","f6dd4b35":"Reshaping the data properly:","c7b8bf91":"MLP model:","dedc084e":"XGB Classifier:","5dad0c34":"LSTM classifier:"}}