{"cell_type":{"a717e9e0":"code","673a18e6":"code","814f54d0":"code","11594cde":"code","619f745d":"code","2293c5fb":"code","ea1d9fc7":"code","ffa592be":"code","fb46fc00":"code","58e6e08b":"code","ffe75162":"code","18e99a6f":"code","d136e228":"code","2e68b183":"code","85ca1053":"code","69b34a47":"code","9eba519a":"code","d5688466":"code","214df565":"code","d1d83ba3":"code","a370198c":"code","e1536113":"code","2d9a79e7":"code","4cbea2c9":"code","f1994d35":"code","6e597adf":"code","0fa5c596":"code","0dd83760":"code","18476539":"code","70bec1e8":"code","09a2d775":"code","4a422795":"code","c0b7b958":"code","09ce0cda":"code","cf6e89cf":"code","daf7bb6d":"code","e999fe75":"code","a5fd06ae":"code","3fc9730b":"code","8a36f7b1":"code","56db5e92":"code","43981e80":"code","956493f8":"code","59b46bac":"code","49e6b3fc":"code","f0e025a3":"code","785525fe":"code","5910880a":"code","60dac959":"code","ecbef939":"code","2b19e7ea":"code","e1064fb8":"code","653ba18f":"code","bdada04d":"markdown","3222a7aa":"markdown","a268ed61":"markdown","22c99060":"markdown","dd3ad45d":"markdown","4411dba0":"markdown","ee70e901":"markdown","2e70a437":"markdown","7d304aae":"markdown","ef9d1642":"markdown","febc75fc":"markdown","423882ca":"markdown","9fdbfe0b":"markdown","ff3c5c44":"markdown","e179a5b4":"markdown","4248c595":"markdown","30c0e099":"markdown","0ce43a0f":"markdown","3a9728c0":"markdown","b8b5bbe0":"markdown","1628259d":"markdown","b766b449":"markdown","3c5aa6dc":"markdown","f7e4e079":"markdown","22f25c3d":"markdown","9950151e":"markdown","12f9e1db":"markdown","56f0456c":"markdown","2c469f7d":"markdown","2545510b":"markdown"},"source":{"a717e9e0":"# Importing library\nimport numpy as np\nimport pandas as pd","673a18e6":"# Reading the csv file\nfilename = \"\/kaggle\/input\/used-cars-database-50000-data-points\/autos.csv\"\ndf = pd.read_csv(filename, encoding= 'Windows-1252')","814f54d0":"df.head()","11594cde":"print(df.columns)","619f745d":"df.columns = ['date_crawled', 'name', 'seller', 'offer_type', 'price', 'abtest', 'vehicle_type', 'registration_year', \n              'gear_box', 'power_PS', 'model','odometer', 'registration_month', 'fuel_type', 'brand','unrepaired_damage',\n              'ad_created', 'Num_of_Pictures', 'postal_code', 'lastSeen']","2293c5fb":"df.columns","ea1d9fc7":"# rename method to make specific changes\ndf.rename({'lastSeen':'last_seen'}, axis= 1, inplace= True)","ffa592be":"df.columns","fb46fc00":"df.info()","58e6e08b":"df.isnull().sum() * 100 \/ df.shape[0]","ffe75162":"# To see the column datan types\ndf.dtypes","18e99a6f":"df.head()","d136e228":"# for the price column\n# defining a function\ndef replace(x):\n    x = x.replace('$','')\n    x = x.replace(',','')\n    return x\n\n# applying that function\ndf['price'] = df['price'].apply(replace)","2e68b183":"df['price'].head()","85ca1053":"# For the odometer column \ndef replace_odo(x):\n    x = x.replace(',','')\n    x = x.replace('km','')\n    return x\n\ndf['odometer'] = df['odometer'].apply(replace_odo) ","69b34a47":"# Assigning the data type in a dictionary\ndic = {'price': 'float', 'odometer': 'float'}\n\n# Changing the data type\ndf = df.astype(dic)","9eba519a":"df.dtypes","d5688466":"# Changing the name to make it more readable\ndf.rename({'price':'price_in_dollar', 'odometer':'odometer_in_km'}, axis= 1, inplace= True)","214df565":"df.columns","d1d83ba3":"# Let's check the unique value in the registration_month column\ndf['registration_month'].unique()","a370198c":"d = {0:'unknown',1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'May',6:'Jun',7:'Jul',8:'Aug',9:'Sep',10:'Oct',11:'Nov',12:'Dec'}\ncolumn = []\nfor item in df['registration_month']:\n    if item in d:\n        column.append(d[item])\ndf['reg_month_in_words'] = column","e1536113":"df.head(3)","2d9a79e7":"# We could assign all the rearragned column names to the data frame but i am gonna try the drop and insert method here.\n# Assigning the columns in a variable\nyear = df['registration_year']\nmonth = df['registration_month']\nmonth_words = df['reg_month_in_words']\n\n# Dropping all the columns\ndf.drop(labels=['registration_year'], axis=1, inplace= True)\ndf.drop(labels=['registration_month'], axis=1, inplace= True)\ndf.drop(labels=['reg_month_in_words'], axis=1, inplace= True)\n\n# Inserting to our expected position\ndf.insert(6, 'registration_year', year)\ndf.insert(7, 'registration_month', month)\ndf.insert(8, 'reg_month_in_words', month_words)","4cbea2c9":"df.head(3)","f1994d35":"df[['date_crawled','ad_created','last_seen']].head()","6e597adf":"# Since the first 10 numbers are date, we will just apply the slicing\nfor item in ['date_crawled','ad_created','last_seen']:\n    df[item] = df[item].str[:10]","0fa5c596":"df.head(3)","0dd83760":"# Changing the format of these columns to datetime\n\ndf['date_crawled'] = pd.to_datetime(df['date_crawled'], format= \"%Y-%m-%d\", dayfirst= True )\ndf['ad_created'] = pd.to_datetime(df['ad_created'], format= \"%Y-%m-%d\", dayfirst= True )\ndf['last_seen'] = pd.to_datetime(df['last_seen'], format= \"%Y-%m-%d\", dayfirst= True )","18476539":"df.dtypes","70bec1e8":"# if we want we can just extract month, year or day from these\ndf['date_crawled'][0].year","09a2d775":"df.head(3)","4a422795":"df['price_in_dollar'].value_counts().sort_index(ascending= False).head(20)","c0b7b958":"# Taking data between 0 to 10 millin\ndf = df[df['price_in_dollar'].between(0,10000000)]","09ce0cda":"df.shape","cf6e89cf":"df['registration_year'].value_counts().sort_index(ascending= False).head(20)","daf7bb6d":"df['registration_year'].value_counts().sort_index(ascending= True).head(20)","e999fe75":"# Taking the year from 1900 to 2018\ndf = df[df['registration_year'].between(1900,2018)]","a5fd06ae":"df.shape","3fc9730b":"df.head(3)","8a36f7b1":"# Determining the top car brand in term of their sales number\ntop_20 = df['brand'].value_counts(ascending= False).head(20)\ntop_20","56db5e92":"# making a list of top 20 brand to run the loop\nbrand_list = list(top_20.index )\nbrand_list","43981e80":"# Empty dictionary\nmean_dic = {}\n\n# Running a loop to entry the mean average\nfor item in brand_list:\n    mean = df[df['brand'] == item]['price_in_dollar'].mean()\n    mean_dic[item] = mean\n        \nmean_dic","956493f8":"# Making a series to create the dataframe\nmean_series = pd.Series(mean_dic)\nmean_series","59b46bac":"brand_mean = pd.DataFrame(mean_series, columns=['mean_price'])\nbrand_mean","49e6b3fc":"# now calculating the avg mileage of those car\ndic_mileage = {}\nfor item in brand_list:\n    mean = df[df['brand'] == item]['odometer_in_km'].mean()\n    dic_mileage[item] = mean\n        \nprint(dic_mileage)","f0e025a3":"# Creating series\nmileage_series = pd.Series(dic_mileage)\n\n# Dataframe\nbrand_mileage = pd.DataFrame(mileage_series, columns= ['mileage'])\nbrand_mileage","785525fe":"brand_count = dict(top_20)\nbrand_count","5910880a":"# Creating series\ncount_series = pd.Series(dict(top_20))\n\n# Creating the Dataframe\nbrand_count = pd.DataFrame(count_series, columns= ['count'])\nbrand_count","60dac959":"brand_price_mileage_count = pd.concat([brand_mean, brand_mileage, brand_count], axis=1)\nbrand_price_mileage_count","ecbef939":"# Sorting by number of sales unit\nbrand_price_mileage_count.sort_values(by= 'count', ascending= False)","2b19e7ea":"def green(val):\n    color = 'green'\n    return 'color: %s' % color","e1064fb8":"# Coloring certain cell\nbrand_price_mileage_count[:5].style.applymap(green, subset=pd.IndexSlice[['volkswagen','opel'], ['mean_price','mileage']])","653ba18f":"# Coloring certain cell\nbrand_price_mileage_count[:5].style.applymap(green, subset=pd.IndexSlice['bmw':'audi', ['mean_price','mileage']])","bdada04d":"-  **We see that, it would be better if the registration_year, registration_month, reg_month_in_words postioned side by side but it is not. Let's fix this thing first**","3222a7aa":"-   **For bmw, marcedes and audi the price range are almost similar compare to their mileage. We could easily summarise that their customer demand and brand value might be same.**","a268ed61":"### Fixing the dollar and km sign for the price and odometer columns respectively and then changing their names and data type. ","22c99060":"-   **We can easily find out the anomaly here. There are some years which cannot be existed, for example, 1000, 9996,9999. So, we are also gonna reomve these data**","dd3ad45d":"# Data Cleaning","4411dba0":"-   **Volkswagen have sold most number of cars followed by opel, bmw, marcedez and then other. Let's checkn out their mean price.**","ee70e901":"-  **vehicle_type and unrepaired_damage has the most percent of null object**","2e70a437":"### let's figure out the null object in percentages for every row.","7d304aae":"- **Now it's easier to look at all the months and year**","ef9d1642":"-   **These three columns change to datetime format.**","febc75fc":"-   **Here, we see that, there is relation between the price of the car and its mileage and also the brand value. The mileage are pretty same for the first five car brand but the price are different.**","423882ca":"-   **Since the dictionary are unordered unlike the list, it is not showing the mean price of top 20 car list in an order. What we can do is, we can make another data frame for these top 20 car bradn so that it becomes easier to understand the insights**","9fdbfe0b":"-  **In the dataframe we see that, in the date_crawled, ad_created and last_seen columns there is added time which is completely unnecessary. So, we are gonna remove the extension and also change the data type if needed**","ff3c5c44":"-   One of the column names did not change properly","e179a5b4":"## In the end, I would like to say that this project was all about using different methods, attributes to clean the data set. \n\n## Thank you so much for spending your time on this project. ","4248c595":" -   **Let's look at the registration_year column no**","30c0e099":"-  **There are so many null objects here.**","0ce43a0f":"-   **Here, we found out some outliers. 10 million, 99 million are way high than the other price. So we can remove these data.**","3a9728c0":"### We have cleaned the data as much as possible. Now, let's try to get some insight. We will just work on the top 20 brand and try to find out the relation between their price and mileage.**","b8b5bbe0":"## Ebay Car Sales\nHello there! <br>\nI have worked on a Kaggle data set named 'Ebay Car Sales'. For doing this project I have used the pandas library only. This is a project about cleaning the dataframe to analysis in a better way. I have not shown any visualization but tried to get an organized data set by cleaning unnecessary data and doing some other tasks.\n\n<b> Data Set Columns <\/b> <br>\n- name: Name of the car.\n- seller: Whether the seller is private or a dealer.\n- offerType: The type of listing\n- price: The price on the ad to sell the car.\n- abtest: Whether the listing is included in an A\/B test.\n- vehicleType: The vehicle Type.\n- yearOfRegistration: The year in which the car was first registered.\n- gearbox: The transmission type.\n- powerPS: The power of the car in PS.\n- model: The car model name.\n- kilometer: How many kilometers the car has driven.\n- monthOfRegistration: The month in which the car was first registered.\n- fuelType: What type of fuel the car uses.\n- brand: The brand of the car.\n- notRepairedDamage: If the car has a damage which is not yet repaired.\n- dateCreated: The date on which the eBay listing was created.\n- nrOfPictures: The number of pictures in the ad.\n- postalCode: The postal code for the location of the vehicle.\n- lastSeenOnline: When the crawler saw this ad last online.\n\n","1628259d":"-  **Now it will be super comfy to play with this dataframe**","b766b449":"### Removing the time and also changing the format","3c5aa6dc":"-   **Now I will try to reduce the dataframe by removing wrong and unnecessary data. let's start with the price column. We will try to see the price range. If see that some cars are so expensive and the data are few for them then we will get rid off that**","f7e4e079":"-  **We can see that data type of some columns are not compatible. For example, price and odometer column should not be object type. So, we are gonna change the type of these columns. Before changing, we should check on their format to see if any changes need to make. I have also noticed that the registration_month column would be easier to read if it's mentioned the month name.** ","22f25c3d":"-   **There are unwanted sign in price and odometer column**","9950151e":"-  **We see that the columns are not properly readable though it is in camelcase. To make it more readable, snakecase would be better.**","12f9e1db":"### Changing the column names to make it more readable ","56f0456c":"-   **Volkswagen is 5k, on the other hand opel is almost half of volkswagen's price though the mileage are pretty same.**","2c469f7d":"-  **As i mentioned before that, I will make a new month column and add to the dataframe from registration_month column to make it more readable**","2545510b":"-  **There is one number 0 which basically define nothing. So, we will put unknown for the value 0 and relatable months for the others.**"}}