{"cell_type":{"01606a2b":"code","cfdf8dc9":"code","e6f8b0dd":"code","527f56fc":"code","0b8f7eed":"code","9521527b":"markdown"},"source":{"01606a2b":"import pandas as pd\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense","cfdf8dc9":"path = '\/kaggle\/input\/auto-insurance\/auto-insurance.csv'\ndf = pd.read_csv(path)\ndf.head()","e6f8b0dd":"# split into input and output columns\nX, y = df.values[:, :-1], df.values[:, -1]\n# ensure target is a 2d array\ny = y.reshape((len(y),1))\n# prepare input data\npt1 = MinMaxScaler()\npt1.fit(X)\nX = pt1.transform(X)\n# prepare target\npt2 = MinMaxScaler()\npt2.fit(y)\ny = pt2.transform(y)\n# determine the number of input features\nn_features = X.shape[1]","527f56fc":"# define model\nmodel = Sequential()\nmodel.add(Dense(10, activation='relu', kernel_initializer='he_normal', input_shape=(n_features,)))\nmodel.add(Dense(8, activation='relu', kernel_initializer='he_normal'))\nmodel.add(Dense(1))\n# compile the model\nmodel.compile(optimizer='adam', loss='mse')\n# fit the model\nmodel.fit(X, y, epochs=200, batch_size=8, verbose=0)","0b8f7eed":"# define a row of new data\nrow = [13]\n# transform the input data\nX_new = pt1.transform([row])\n# make prediction\nyhat = model.predict(X_new)\n# invert transform on prediction\nyhat = pt2.inverse_transform(yhat)\n# report prediction\nprint('f(%s) = %.3f' % (row, yhat[0]))","9521527b":"# Auto Insurance"}}