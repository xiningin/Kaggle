{"cell_type":{"aef31343":"code","2fcc9a19":"code","722f55c5":"code","1c825181":"code","1752045d":"code","b475033d":"code","82310048":"code","8b6ee3ed":"code","523ce983":"code","78f1d948":"code","05347da1":"code","2e3a254d":"code","2d277f97":"code","a0113700":"code","4f8f01b9":"code","4e8ba907":"code","6a43e84c":"code","ffe31210":"code","28d52420":"code","dd1d964e":"code","47720b63":"code","ce1be965":"code","984dcb50":"code","e3882963":"code","84e74cc2":"code","3eb082b1":"code","7359d008":"code","9dae4088":"code","44de5586":"code","22166f8a":"code","4629a8bd":"code","6c75ecac":"code","11e4e6ee":"code","71399d56":"code","5b0241f0":"code","489f9bb5":"code","c87ac95e":"code","9022e865":"code","2046afd9":"code","977c0094":"code","1f7a5d46":"code","b9278c0d":"code","b1eb39c1":"code","a5926e93":"code","f4ecc040":"code","271d0a20":"code","793718ba":"code","8c9fd10c":"code","98a3ed91":"code","2c2f7694":"code","7e4e5ffe":"code","b53d931e":"code","01ec031d":"code","b375ff60":"code","8a2b5585":"code","f4a4d423":"code","c2512ef1":"code","29a37a15":"code","5a656a27":"code","f5e5cccc":"code","34a79de3":"code","5c6094c7":"code","16e0742f":"code","5fccb69e":"code","f2262be2":"code","b80900f1":"code","d4f1208c":"code","4d20ad12":"code","a5d2bfac":"code","37824155":"code","c767f266":"code","183de4e0":"code","7166db1c":"code","18b3d122":"code","61d7891b":"code","40a29ad6":"code","a158c1a0":"code","0eda321c":"code","f1ec544d":"code","534cfc5a":"code","60528d4d":"code","2c0777b4":"code","7ee95bd1":"code","3a4fd21a":"code","3aecc76a":"code","01171d25":"code","62d9abce":"code","f38f9c29":"code","baa9884e":"code","24a75eb8":"code","3201151d":"code","70604708":"code","d1f280cb":"code","639047a5":"code","7b34f686":"code","83accc9c":"code","20c291be":"markdown","9c0304bf":"markdown","9b9a2610":"markdown"},"source":{"aef31343":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # graph\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2fcc9a19":"math = pd.read_csv(\"..\/input\/student-alcohol-consumption\/student-mat.csv\")\npor = pd.read_csv(\"..\/input\/student-alcohol-consumption\/student-por.csv\")","722f55c5":"math.head(5)","1c825181":"len(math)","1752045d":"por.head()","b475033d":"len(por)","82310048":"math.rename(columns={'G1':'G1_Mat', 'G2':'G2_Mat', 'G3':'G3_Mat'}, inplace=True)","8b6ee3ed":"por.rename(columns={'G1':'G1_Por', 'G2':'G2_Por', 'G3':'G3_Por'}, inplace=True)","523ce983":"math.columns","78f1d948":"# Students with grades in Math and Portuguese\nboth = pd.merge(math, por, on=['school', 'sex', 'age', 'address', 'famsize', 'Pstatus', 'Medu', 'Fedu',\n       'Mjob', 'Fjob', 'reason', 'guardian', 'traveltime', 'studytime',\n       'failures', 'schoolsup', 'famsup', 'activities', 'nursery',\n       'higher', 'internet', 'romantic', 'famrel', 'freetime', 'goout', 'Dalc',\n       'Walc', 'health', 'absences'])\nboth = both.drop_duplicates()","05347da1":"len(both)","2e3a254d":"por.isna().sum()","2d277f97":"por.school.value_counts(normalize=True)","a0113700":"print(\"%s%% of the students are in Gabriel Pereira school\" % (100*round(por.school.value_counts(normalize=True)[0],4)))","4f8f01b9":"por.sex.value_counts(normalize=True)","4e8ba907":"print(\"%s%% of the students are girls\" % (100*round(por.sex.value_counts(normalize=True)[0],4)))","6a43e84c":"sns.set(rc={'figure.figsize':(8,6)})\nsns.countplot(x=\"school\", hue =\"sex\", data=por)","ffe31210":"sns.countplot(por.age)","28d52420":"por.address.value_counts(normalize=True)","dd1d964e":"print(\"%s%% of the students live in an urban area\" % (100*round(por.address.value_counts(normalize=True)[0],4)))","47720b63":"por.famsize.value_counts(normalize=True)","ce1be965":"print(\"%s%% of the students live in a family with more than 3 members\" % (100*round(por.famsize.value_counts(normalize=True)[0],4)))","984dcb50":"sns.countplot(x=\"school\", hue =\"address\", data=por)","e3882963":"por.Pstatus.value_counts(normalize=True)","84e74cc2":"print(\"%s%% of the students' parents live together\" % (100*round(por.Pstatus.value_counts(normalize=True)[0],4)))","3eb082b1":"sns.countplot(x=\"Pstatus\", hue =\"famsize\", data=por)","7359d008":"sns.countplot(por.Medu)","9dae4088":"sns.countplot(por.Fedu)","44de5586":"sns.countplot(x=\"Medu\", hue =\"Fedu\", data=por)","22166f8a":"sns.countplot(por.Mjob)","4629a8bd":"por.Mjob.value_counts(normalize=True)","6c75ecac":"print(\"%s%% of the mothers are at home\" % (100*round(por.Mjob.value_counts(normalize=True)[2],4)))","11e4e6ee":"sns.countplot(por.Fjob)","71399d56":"por.Fjob.value_counts(normalize=True)","5b0241f0":"print(\"%s%% of the fathers are at home\" % (100*round(por.Fjob.value_counts(normalize=True)[2],4)))","489f9bb5":"sns.countplot(x=\"Mjob\", hue =\"Medu\", data=por)","c87ac95e":"sns.countplot(x=\"Fjob\", hue =\"Fedu\", data=por)","9022e865":"sns.countplot(por.reason)","2046afd9":"por.guardian.value_counts(normalize=True)","977c0094":"sns.countplot(x=\"age\", hue =\"guardian\", data=por)","1f7a5d46":"sns.countplot(por.traveltime)","b9278c0d":"sns.countplot(x=\"address\", hue =\"traveltime\", data=por)","b1eb39c1":"sns.countplot(x=\"school\", hue =\"traveltime\", data=por)","a5926e93":"sns.countplot(por.studytime)","f4ecc040":"sns.countplot(x=\"school\", hue =\"studytime\", data=por)","271d0a20":"sns.countplot(por.failures)","793718ba":"sns.countplot(x=\"age\", hue=\"failures\", data=por)","8c9fd10c":"por.schoolsup.value_counts(normalize=True)","98a3ed91":"por.famsup.value_counts(normalize=True)","2c2f7694":"sns.countplot(x=\"school\", hue=\"famsup\", data=por)","7e4e5ffe":"por.paid.value_counts(normalize=True)","b53d931e":"sns.countplot(por[por.paid == 'yes']['famsup'])","01ec031d":"por.activities.value_counts(normalize=True)","b375ff60":"sns.countplot(x=\"sex\", hue=\"activities\", data=por)","8a2b5585":"por.nursery.value_counts(normalize=True)","f4a4d423":"sns.countplot(x=\"Medu\", hue=\"nursery\", data=por)","c2512ef1":"por.higher.value_counts(normalize=True)","29a37a15":"sns.countplot(x=\"failures\", hue=\"higher\", data=por)","5a656a27":"sns.countplot(x=\"age\", hue=\"higher\", data=por)","f5e5cccc":"por.internet.value_counts(normalize=True)","34a79de3":"sns.countplot(x=\"Medu\", hue=\"internet\", data=por)","5c6094c7":"sns.countplot(x=\"Mjob\", hue=\"internet\", data=por)","16e0742f":"sns.countplot(x=\"school\", hue=\"internet\", data=por)","5fccb69e":"por.romantic.value_counts(normalize=True)","f2262be2":"sns.countplot(x=\"age\", hue=\"romantic\", data=por)","b80900f1":"sns.countplot(por.famrel)","d4f1208c":"sns.countplot(por.freetime)","4d20ad12":"por.head()","a5d2bfac":"sns.countplot(por.goout)","37824155":"sns.countplot(x=\"freetime\", hue=\"goout\", data=por)","c767f266":"sns.countplot(por.Dalc)","183de4e0":"sns.countplot(x=\"goout\", hue=\"Dalc\", data=por)","7166db1c":"sns.countplot(x=\"sex\", hue=\"Dalc\", data=por)","18b3d122":"sns.countplot(por.Walc)","61d7891b":"sns.countplot(x=\"Dalc\", hue=\"Walc\", data=por)","40a29ad6":"sns.countplot(por.health)","a158c1a0":"sns.countplot(x=\"sex\", hue=\"health\", data=por)","0eda321c":"sns.countplot(x=\"Walc\", hue=\"health\", data=por)","f1ec544d":"sns.distplot(por.absences)","534cfc5a":"por.columns","60528d4d":"por['Total_Grades'] = por['G1_Por'] + por['G2_Por'] + por['G3_Por']","2c0777b4":"sns.distplot(por.Total_Grades)","7ee95bd1":"GP = por[por.school == 'GP']\nMS = por[por.school == 'MS']\n\nsns.distplot(GP.Total_Grades, hist=False, label=\"GP\")\nsns.distplot(MS.Total_Grades, hist=False, label=\"MS\")\nplt.show()","3a4fd21a":"por['school'] = por['school'].map({'GP': 0, 'MS': 1}).astype(int)\npor['sex'] = por['sex'].map({'M': 0, 'F': 1}).astype(int)\npor['address'] = por['address'].map({'R': 0, 'U': 1}).astype(int)\npor['famsize'] = por['famsize'].map({'LE3': 0, 'GT3': 1}).astype(int)\npor['Pstatus'] = por['Pstatus'].map({'A': 0, 'T': 1}).astype(int)\npor['Mjob'] = por['Mjob'].map({'at_home': 0, 'health': 1, 'other': 2, 'services': 3, 'teacher': 4}).astype(int)\npor['Fjob'] = por['Fjob'].map({'at_home': 0, 'health': 1, 'other': 2, 'services': 3, 'teacher': 4}).astype(int)\npor['reason'] = por['reason'].map({'course': 0, 'other': 1, 'home': 2, 'reputation': 3}).astype(int)\npor['guardian'] = por['guardian'].map({'mother': 0, 'father': 1, 'other': 2}).astype(int)\npor['schoolsup'] = por['schoolsup'].map({'no': 0, 'yes': 1}).astype(int)\npor['famsup'] = por['famsup'].map({'no': 0, 'yes': 1}).astype(int)\npor['paid'] = por['paid'].map({'no': 0, 'yes': 1}).astype(int)\npor['activities'] = por['activities'].map({'no': 0, 'yes': 1}).astype(int)\npor['nursery'] = por['nursery'].map({'no': 0, 'yes': 1}).astype(int)\npor['higher'] = por['higher'].map({'no': 0, 'yes': 1}).astype(int)\npor['internet'] = por['internet'].map({'no': 0, 'yes': 1}).astype(int)\npor['romantic'] = por['romantic'].map({'no': 0, 'yes': 1}).astype(int)","3aecc76a":"por.head()","01171d25":"por.corr()['Total_Grades'].sort_values(ascending=False)","62d9abce":"grades_corr = por.corr()['Total_Grades']","f38f9c29":"grades_corr = pd.DataFrame({'col':grades_corr.index, 'correlation':grades_corr.values})","baa9884e":"no_corr_cols = grades_corr[(grades_corr.correlation < 0.1) & (grades_corr.correlation > -0.1)]\nno_corr_cols = list(no_corr_cols.col)","24a75eb8":"# Droping grades because they are too correlated and can bias the model\nX = por.drop(['G1_Por', 'G2_Por', 'G3_Por', 'Total_Grades'], axis=1)\ny = por['Total_Grades']","3201151d":"# Droping columns with no correlation\nX = X.drop(no_corr_cols, axis=1)\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import cross_val_score\n\nmodels = [LinearRegression(), Ridge(), Lasso(), DecisionTreeRegressor()]\nnames = ['LinearRegression', 'Ridge', 'Lasso', 'DecisionTreeRegressor']\n\nfor name, clf in zip(names, models):\n    cv_model = cross_val_score(clf, X, y, cv=5).mean()\n    print(name, ': %s' % cv_model)","70604708":"dtr = DecisionTreeRegressor()\ncvs = range(2,20)\ncvs_models = []\nfor i in cvs:\n    cvs_models.append(abs(cross_val_score(clf, X, y, cv=i).mean()))\n    \nprint('Best score with', cvs_models.index(min(cvs_models)), 'subsets : %s' % max(cvs_models))","d1f280cb":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","639047a5":"dtr = DecisionTreeRegressor()","7b34f686":"dtr.fit(X_train, y_train)","83accc9c":"dtr.score(X_test,y_test)","20c291be":"### Data Exploration","9c0304bf":"### Grades Prediction","9b9a2610":"### Data Cleaning"}}