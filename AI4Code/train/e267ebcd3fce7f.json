{"cell_type":{"f582de96":"code","6ab96da5":"code","794b079d":"code","58d45f8f":"code","b760b1b8":"code","f3f3e906":"code","278ab39d":"code","ff374f77":"code","58c9e8ae":"code","b7302469":"code","fe2db881":"code","4bfcfc59":"code","03cc16aa":"code","9063d33e":"code","c7d1172c":"code","05c421ba":"markdown","6ca83d7d":"markdown","878caa97":"markdown","59521a4d":"markdown","0bf7fde7":"markdown","f870c92a":"markdown","db291fb9":"markdown","ce512f51":"markdown","c952bad7":"markdown"},"source":{"f582de96":"import tensorflow as tf\nimport numpy as np\nimport pandas as pd\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import *\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt","6ab96da5":"path_train = \"..\/input\/digit-recognizer\/train.csv\"\npath_test = \"..\/input\/digit-recognizer\/test.csv\"","794b079d":"data = pd.read_csv(path_train,delimiter=',', index_col=False)\ndata.head(5)","58d45f8f":"X = data.iloc[:,1:]\nX = np.array(X)\nX = X.astype('float').reshape(X.shape[0], 28, 28)\n\nY = data.iloc[:,0].astype('int')\nY = np.array(Y)\n\nprint(X.shape, Y.shape)","b760b1b8":"data_test = pd.read_csv(path_test,delimiter=',', index_col=False)\ndata_test.head(5)","f3f3e906":"X_testing = np.array(data_test)\nX_testing = X_testing.astype('float').reshape(X_testing.shape[0], 28, 28)","278ab39d":"X_train, X_test, y_train,y_test = train_test_split(X,Y,test_size=0.2,shuffle=True)","ff374f77":"X_train = X_train.reshape(X_train.shape[0],28,28,1)\nX_test = X_test.reshape(X_test.shape[0],28,28,1)\nprint(X_train.shape, X_test.shape)","58c9e8ae":"model = Sequential()\nmodel.add(Conv2D(256,(7,7),strides=(1, 1), padding='same',activation='relu',input_shape=(28,28,1)))\nmodel.add(Conv2D(256,(7,7),strides=(1, 1), padding='same',activation='relu'))\nmodel.add(MaxPooling2D(2,2))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(128,(7,7),strides=(1, 1), padding='same',activation='relu'))\nmodel.add(Conv2D(128,(7,7),strides=(1, 1), padding='same',activation='relu'))\nmodel.add(MaxPooling2D(2,2))\nmodel.add(Dropout(0.3)) \nmodel.add(Conv2D(64,(7,7),strides=(1, 1), padding='same',activation='relu'))\nmodel.add(Conv2D(64,(7,7),strides=(1, 1), padding='same',activation='relu'))\nmodel.add(Conv2D(64,(7,7),strides=(1, 1), padding='same',activation='relu'))\nmodel.add(MaxPooling2D(2,2))\nmodel.add(Dropout(0.3))\nmodel.add(Flatten())\nmodel.add(Dense(1024,activation='relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(10,activation='softmax'))\n\nmodel.summary()","b7302469":"model.compile(optimizer='adam', loss='sparse_categorical_crossentropy',metrics=['accuracy'])\nhistory = model.fit(X_train, y_train,epochs=75,validation_data=(X_test,y_test),batch_size=128,verbose=1)","fe2db881":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(acc))\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","4bfcfc59":"test = X_testing.reshape(X_testing.shape[0],28,28,1)","03cc16aa":"test_pred = model.predict(test)","9063d33e":"labels = [np.argmax(X) for X in test_pred]\nimage_id = [i+1 for i in range(len(test_pred))]\nsubmission = pd.DataFrame({'ImageId': image_id,\n                           'Label': labels},\n                          index=None)\n\nsubmission.to_csv('submission.csv', index=False)","c7d1172c":"pd.read_csv(\"submission.csv\")","05c421ba":"**Splitting the data**","6ca83d7d":"**Submission file**","878caa97":"**Graph**","59521a4d":"# Digit Recognizer using CNN","0bf7fde7":"**Testing**","f870c92a":"**Testing Data**","db291fb9":"**Model**","ce512f51":"**Training**","c952bad7":"**Training data**"}}