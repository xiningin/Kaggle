{"cell_type":{"5701a452":"code","66546523":"code","598c2a65":"code","1520d4e3":"code","4fd27d8b":"code","4e5fee20":"code","b170c92c":"code","998e209b":"code","39b6d493":"code","ea56c832":"code","fd187b14":"code","16da7b3d":"code","c3b5c44f":"code","fac11cc4":"code","17619b30":"code","51e6fca0":"code","b00c8476":"code","763f4a6e":"code","59eb33da":"code","c73d297b":"code","f13368f5":"code","36e21073":"code","393cf37f":"code","58dcb93f":"code","15e1967d":"code","042ca053":"code","f09a7d4d":"code","afcaf537":"code","d36d2dcb":"code","f074bc90":"code","f4776aa1":"code","dc18489a":"code","b36a9cc4":"code","d500e66c":"code","61bbf0ae":"code","f029534f":"code","be6e6cf8":"code","8c7914f1":"code","8e3f4d29":"code","7f30830a":"code","28a39188":"code","168c040f":"code","1c5d0822":"code","2c0382d9":"code","9bc2acee":"code","2717403f":"code","1c7f20a8":"code","35754173":"code","0ac1e522":"code","8b002005":"code","c4cc5797":"code","868ea2d3":"code","332ee3fd":"code","e578d7f9":"code","c1c23207":"code","e5d04b6b":"code","3490ece4":"code","3bf85c32":"code","5b54486e":"code","9b1554da":"code","9ac63ed6":"code","5f0324f5":"markdown","064b01b5":"markdown","f3200dc7":"markdown","bf234b29":"markdown","3d9610b5":"markdown","9794df26":"markdown","68d33d67":"markdown","c2150567":"markdown","bd924cad":"markdown","f246e8df":"markdown","2e49cf2e":"markdown","0fda24aa":"markdown","ab72fc76":"markdown","7f8ee579":"markdown","64c19897":"markdown","4aa92d7c":"markdown","28e4fe7d":"markdown","6767f2d5":"markdown","817eb7ad":"markdown","3a73751d":"markdown","c63eec53":"markdown","60ca2525":"markdown","b9011371":"markdown","71248ad3":"markdown","33b1262b":"markdown","4e5c884b":"markdown","317bde6a":"markdown","7f4e78a4":"markdown","546a549c":"markdown","ae4c45be":"markdown","3019524c":"markdown","041d5b90":"markdown","145a879e":"markdown","9501b49d":"markdown","0c3be4f1":"markdown","5764fbf8":"markdown","fa6f5796":"markdown","7cf5d001":"markdown","fd86a78c":"markdown","2ee7b179":"markdown","b1adc31c":"markdown","83516c38":"markdown","ded1a64f":"markdown","12c3be1f":"markdown","8da5d7f0":"markdown","8a21842a":"markdown","5483e730":"markdown","37cc68ff":"markdown","a04ee21f":"markdown","4683e120":"markdown","029b633c":"markdown","333483ef":"markdown","96765b0c":"markdown","0a6f61fb":"markdown"},"source":{"5701a452":"# Importing libraries\nimport numpy as np # For linear algebra\nimport pandas as pd # Python's extensive data analyis toolkit\n# Matolotlib for visualizations\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\n%matplotlib inline\n# Seaborn for statistical insights\nimport seaborn as sns\nsns.set_style('whitegrid')\n# PLotly libraries for interactive visualizations\nfrom plotly import tools\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n# Squarify for treemaps\nimport squarify\n# Random for well, random stuff\nimport random\n# operator for sorting dictionaries\nimport operator\n# For ignoring warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# More libraries may be added in further updates","66546523":"# Importing data\ndata = pd.read_csv('..\/input\/survey_results_public.csv')\n\ndata.describe()","598c2a65":"data.head()","1520d4e3":"total = data.isnull().sum().sort_values(ascending = False)\npercent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False).astype('int')\nmissing_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data['Column_Name'] = missing_data.index\ntrace = go.Table(\n    header=dict(values=['Column_Name','Total','Percent'],\n                fill = dict(color='#C2D4FF'),\n                align = ['left'] * 5),\n    cells=dict(values=[missing_data.Column_Name,missing_data.Total,missing_data.Percent],\n               fill = dict(color='#F5F8FF'),\n               align = ['left'] * 5))\n\nd = [trace] \niplot(d, filename = 'pandas_table')","4fd27d8b":"# Preparing data and handling missing values\ndata['Student'] = data['Student'].fillna('Not known')\ndata[\"Country\"] = data[\"Country\"].fillna('Not known')\ndata[\"DevType\"] = data[\"DevType\"].fillna('Not mentioned')\n\ndata[\"Employment\"][data[\"Employment\"] == \"Employed full-time\"] = \"Full-time\"\ndata[\"Employment\"][data[\"Employment\"] == \"Independent contractor, freelancer, or self-employed\"] = \"Self-employed\"\ndata[\"Employment\"][data[\"Employment\"] == \"Not employed, but looking for work\"] = \"Job-hunter\"\n\ndata[\"Employment\"][data[\"Employment\"] == \"Employed part-time\"] = \"Part-time\"\ndata[\"Employment\"][data[\"Employment\"] == \"Not employed, and not looking for work\"] = \"Not employed\"\ndata[\"Employment\"] = data[\"Employment\"].fillna(\"Not known\")\n\ndata[\"FormalEducation\"][data[\"FormalEducation\"] == \"Bachelor\u2019s degree (BA, BS, B.Eng., etc.)\"] = \"Bachelor's degree\"\ndata[\"FormalEducation\"][data[\"FormalEducation\"] == \"Master\u2019s degree (MA, MS, M.Eng., MBA, etc.)\"] = \"Master's degree\"\ndata[\"FormalEducation\"][data[\"FormalEducation\"] == \"Some college\/university study without earning a degree\"] = \"In college\"\ndata[\"FormalEducation\"][data[\"FormalEducation\"] == \"Secondary school (e.g. American high school, German Realschule or Gymnasium, etc.)\"] = \"Secondary school\"\ndata[\"FormalEducation\"][data[\"FormalEducation\"] == \"Other doctoral degree (Ph.D, Ed.D., etc.)\"] = \"Doctoral\"\ndata[\"FormalEducation\"][data[\"FormalEducation\"] == \"Primary\/elementary school\"] = \"ElementaryEd\"\ndata[\"FormalEducation\"][data[\"FormalEducation\"] == \"Professional degree (JD, MD, etc.)\"] = \"Professional\"\ndata[\"FormalEducation\"][data[\"FormalEducation\"] == \"I never completed any formal education\"] = \"No formal ed\"\ndata[\"FormalEducation\"][data[\"FormalEducation\"] == \"Associate degree\"] = \"Associate\"\ndata[\"FormalEducation\"] = data[\"FormalEducation\"].fillna(\"Not known\")\n\ndata[\"TimeAfterBootcamp\"][data[\"TimeAfterBootcamp\"] == \"I already had a full-time job as a developer when I began the program\"] = \"Already had a job\"\n\n\ncolor_brewer = ['#57B8FF','#B66D0D','#009FB7','#FBB13C','#FE6847','#4FB5A5','#8C9376','#F29F60','#8E1C4A','#85809B','#515B5D','#9EC2BE','#808080','#9BB58E','#5C0029','#151515','#A63D40','#E9B872','#56AA53','#CE6786','#449339','#2176FF','#348427','#671A31','#106B26','008DD5','#034213','#BC2F59','#939C44','#ACFCD9','#1D3950','#9C5414','#5DD9C1','#7B6D49','#8120FF','#F224F2','#C16D45','#8A4F3D','#616B82','#443431','#340F09']","4e5fee20":"gs = gridspec.GridSpec(2, 2)\n\nfig = plt.figure(figsize=(15,10))\nax1 = fig.add_subplot(gs[0, 0]) # row 0, col 0\nsns.factorplot(\"Hobby\",data=data,kind=\"count\",ax=ax1,palette=sns.color_palette(\"Spectral\", 10))\n\nax2 = fig.add_subplot(gs[0, 1]) # row 0, col 1\nsns.factorplot(\"Hobby\",data=data,kind=\"count\",ax=ax2,hue=\"OpenSource\",palette=sns.color_palette(\"cubehelix_r\", 10))\n\nax3 = fig.add_subplot(gs[1, :]) # row 1, span all columns\nsns.factorplot(\"Hobby\",data=data,kind=\"count\",ax=ax3,hue=\"Student\",palette=sns.color_palette(\"Paired_r\", 10))\n\nplt.close(2)\nplt.close(3)\nplt.close(4)\nplt.savefig('plot1.png')","b170c92c":"gs = gridspec.GridSpec(2, 2)\n\nfig = plt.figure(figsize=(15,10))\nax1 = fig.add_subplot(gs[0, 0]) # row 0, col 0\nsns.factorplot(\"OpenSource\",data=data,kind=\"count\",ax=ax1,palette=sns.color_palette(\"Spectral_r\", 10))\n\nax2 = fig.add_subplot(gs[0, 1]) # row 0, col 1\nsns.factorplot(\"OpenSource\",data=data,kind=\"count\",ax=ax2,hue=\"Hobby\",palette=sns.color_palette(\"cubehelix_r\", 10))\n\nax3 = fig.add_subplot(gs[1, :]) # row 1, span all columns\nsns.factorplot(\"OpenSource\",data=data,kind=\"count\",ax=ax3,hue=\"Student\",palette=sns.color_palette(\"Paired_r\", 10))\n\nplt.close(2)\nplt.close(3)\nplt.close(4)\nplt.savefig('plot2.png')","998e209b":"def treemap(v):\n    x = 0.\n    y = 0.\n    width = 50.\n    height = 50.\n    type_list = v.index\n    values = v.values\n\n    normed = squarify.normalize_sizes(values, width, height)\n    rects = squarify.squarify(normed, x, y, width, height)\n\n    # Choose colors from http:\/\/colorbrewer2.org\/ under \"Export\"\n    shapes = []\n    annotations = []\n    counter = 0\n\n    for r in rects:\n        shapes.append( \n            dict(\n                type = 'rect', \n                x0 = r['x'], \n                y0 = r['y'], \n                x1 = r['x']+r['dx'], \n                y1 = r['y']+r['dy'],\n                line = dict( width = 1 ),\n                fillcolor = color_brewer[counter]\n            ) \n        )\n        annotations.append(\n            dict(\n                x = r['x']+(r['dx']\/2),\n                y = r['y']+(r['dy']\/2),\n                text = \"{}\".format(type_list[counter]),\n                showarrow = False\n            )\n        )\n        counter = counter + 1\n        if counter >= len(color_brewer):\n            counter = 0\n\n    # For hover text\n    trace0 = go.Scatter(\n        x = [ r['x']+(r['dx']\/2) for r in rects ], \n        y = [ r['y']+(r['dy']\/2) for r in rects ],\n        text = [ str(v) for v in values ], \n        mode = 'text',\n    )\n\n    layout = dict(\n        height=600, \n        width=800,\n        xaxis=dict(showgrid=False,zeroline=False),\n        yaxis=dict(showgrid=False,zeroline=False),\n        shapes=shapes,\n        annotations=annotations,\n        hovermode='closest',\n        font=dict(color=\"#FFFFFF\")\n    )\n\n    # With hovertext\n    figure = dict(data=[trace0], layout=layout)\n    iplot(figure, filename='squarify-treemap')","39b6d493":"country = data[\"Country\"].dropna()\nfor i in country.unique():\n    if country[country == i].count() < 600:\n        country[country == i] = 'Others'\nx = 0.\ny = 0.\nwidth = 50.\nheight = 50.\ntype_list = country.value_counts().index\nvalues = country.value_counts().values\n\nnormed = squarify.normalize_sizes(values, width, height)\nrects = squarify.squarify(normed, x, y, width, height)\n\n# Choose colors from http:\/\/colorbrewer2.org\/ under \"Export\"\ncolor_brewer = color_brewer\nshapes = []\nannotations = []\ncounter = 0\n\nfor r in rects:\n    shapes.append( \n        dict(\n            type = 'rect', \n            x0 = r['x'], \n            y0 = r['y'], \n            x1 = r['x']+r['dx'], \n            y1 = r['y']+r['dy'],\n            line = dict( width = 1 ),\n            fillcolor = color_brewer[counter]\n        ) \n    )\n    annotations.append(\n        dict(\n            x = r['x']+(r['dx']\/2),\n            y = r['y']+(r['dy']\/2),\n            text = \"{}\".format(type_list[counter]),\n            showarrow = False\n        )\n    )\n    counter = counter + 1\n    if counter >= len(color_brewer):\n        counter = 0\n\n# For hover text\ntrace0 = go.Scatter(\n    x = [ r['x']+(r['dx']\/2) for r in rects ], \n    y = [ r['y']+(r['dy']\/2) for r in rects ],\n    text = [ str(v) for v in values ], \n    mode = 'text',\n)\n\nlayout = dict(\n    height=600, \n    width=850,\n    xaxis=dict(showgrid=False,zeroline=False),\n    yaxis=dict(showgrid=False,zeroline=False),\n    shapes=shapes,\n    annotations=annotations,\n    hovermode='closest',\n    font=dict(color=\"#FFFFFF\"),\n    margin = go.Margin(\n            l=0,\n            r=0,\n            pad=0\n        )\n)\n\n# With hovertext\nfigure = dict(data=[trace0], layout=layout)\niplot(figure, filename='squarify-treemap')","ea56c832":"treemap(data[\"Employment\"].value_counts())","fd187b14":"treemap(data[\"FormalEducation\"].value_counts())","16da7b3d":"fig = {\n  \"data\": [\n    {\n      \"values\": data[\"CompanySize\"].value_counts().values,\n      \"labels\": data[\"CompanySize\"].value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"Company size distribution\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"Company size distribution\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Company Size\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\niplot(fig, filename='donut')","c3b5c44f":"random.shuffle(color_brewer)\n\nfig = {\n  \"data\": [\n    {\n      \"values\": data[\"UndergradMajor\"].value_counts().values,\n      \"labels\": data[\"UndergradMajor\"].value_counts().index,\n      \"domain\": {\"x\": [0, .25]},\n      \"name\": \"Company size distribution\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"Undergraduate education distribution\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 15\n                },\n                \"showarrow\": False,\n                \"text\": \"Course\",\n                \"x\": 0.08,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\niplot(fig, filename='donut')","fac11cc4":"def voteSimplifier(v,o,mar,t):\n    d = {}\n    for type in v:\n        type = str(type).split(';')\n        for i in type: \n            if i in d:\n                d[i] = d[i] + 1\n            else:\n                d[i] = 0\n    d = sorted(d.items(), key=operator.itemgetter(1))\n    if o == 'v':\n        d = list(reversed(d))\n    d = dict(d)\n    if o == 'v':\n        Y = list(d.values())\n        X = list(d.keys())\n    else: \n        Y = list(d.keys())\n        X = list(d.values())\n    trace = [go.Bar(\n                y=Y,\n                x=X,\n                orientation = o,\n                marker=dict(color=color_brewer, line=dict(color='rgb(8,48,107)',width=1.5,)),\n                opacity = 0.6\n    )]\n    layout = go.Layout(\n        margin = go.Margin(\n            l = mar\n        ),\n        title=t,\n    )\n\n    fig = go.Figure(data=trace, layout=layout)\n    iplot(fig, filename='horizontal-bar')","17619b30":"random.shuffle(color_brewer)\nvoteSimplifier(data[\"DevType\"].dropna(),'h',300,\"Types of developers\")","51e6fca0":"random.shuffle(color_brewer)\nvoteSimplifier(data[\"LanguageWorkedWith\"].dropna(),'v',50,\"Most used languages\")","b00c8476":"random.shuffle(color_brewer)\nvoteSimplifier(data[\"LanguageDesireNextYear\"].dropna(),'v',50,\"Languages developers want to use\")","763f4a6e":"random.shuffle(color_brewer)\nvoteSimplifier(data[\"DatabaseWorkedWith\"].dropna(),'v',50,\"Most used databases\")","59eb33da":"random.shuffle(color_brewer)\nvoteSimplifier(data[\"DatabaseDesireNextYear\"].dropna(),'v',50,\"Databases developers want to use\")","c73d297b":"random.shuffle(color_brewer)\nvoteSimplifier(data[\"EducationTypes\"].dropna(),'h',520,\"Methods used by developers use to learn new technologies\")","f13368f5":"random.shuffle(color_brewer)\nvoteSimplifier(data[\"SelfTaughtTypes\"].dropna(),'h',600,\"How developers self-study\")","36e21073":"random.shuffle(color_brewer)\nvoteSimplifier(data[\"PlatformWorkedWith\"].dropna(),'v',50,\"Most used platforms\")","393cf37f":"random.shuffle(color_brewer)\nvoteSimplifier(data[\"PlatformDesireNextYear\"].dropna(),'v',50,\"Platforms developers want to use\")","58dcb93f":"random.shuffle(color_brewer)\nvoteSimplifier(data[\"FrameworkWorkedWith\"].dropna(),'v',50,\"Most used frameworks\")","15e1967d":"random.shuffle(color_brewer)\nvoteSimplifier(data[\"FrameworkDesireNextYear\"].dropna(),'v',50,\"Frameworks developers want to use\")","042ca053":"random.shuffle(color_brewer)\nvoteSimplifier(data[\"IDE\"].dropna(),'v',50,\"Most popular IDEs\")","f09a7d4d":"fig = {\n  \"data\": [\n    {\n      \"values\": data[\"OperatingSystem\"].dropna().value_counts().values,\n      \"labels\": data[\"OperatingSystem\"].dropna().value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"Operating System\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"What operating systems are the developers using?\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Operating Systems\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\niplot(fig, filename='donut')","afcaf537":"random.shuffle(color_brewer)\nfig = {\n  \"data\": [\n    {\n      \"values\": data[\"NumberMonitors\"].dropna().value_counts().values,\n      \"labels\": data[\"NumberMonitors\"].dropna().value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"Monitors\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"Number of monitors used by developers\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Number of monitors\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\niplot(fig, filename='donut')","d36d2dcb":"random.shuffle(color_brewer)\nvoteSimplifier(data[\"Methodology\"].dropna(),'h',500,\"Most popular programming methodologies\")","f074bc90":"random.shuffle(color_brewer)\nvoteSimplifier(data[\"VersionControl\"].dropna(),'h',275,\"Most popular version control systems\")","f4776aa1":"random.shuffle(color_brewer)\nfig = {\n  \"data\": [\n    {\n      \"values\": data[\"CheckInCode\"].dropna().value_counts().values,\n      \"labels\": data[\"CheckInCode\"].dropna().value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"Checking code\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"How often do developers check or commit code?\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Check\/Commit\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\niplot(fig, filename='donut')","dc18489a":"random.shuffle(color_brewer)\nvoteSimplifier(data[\"HackathonReasons\"].dropna(),'h',600,\"Why developers participate in hackathons?\")","b36a9cc4":"random.shuffle(color_brewer)\nvoteSimplifier(data[\"TimeAfterBootcamp\"].dropna(),'h',200,\"How much time after the bootcamp did the developers get jobs\")","d500e66c":"random.shuffle(color_brewer)\nvoteSimplifier(data[\"CommunicationTools\"].dropna(),'h',400,\"Most popular communication tools among developers\")","61bbf0ae":"treemap(data[\"YearsCoding\"].dropna().value_counts())","f029534f":"treemap(data[\"YearsCodingProf\"].dropna().value_counts())","be6e6cf8":"random.shuffle(color_brewer)\nfig = {\n  \"data\": [\n    {\n      \"values\": data[\"JobSatisfaction\"].dropna().value_counts().values,\n      \"labels\": data[\"JobSatisfaction\"].dropna().value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"Job Satisfaction\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"Are developers satisfied with their jobs?\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Job Satisfaction\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\niplot(fig, filename='donut')","8c7914f1":"random.shuffle(color_brewer)\nfig = {\n  \"data\": [\n    {\n      \"values\": data[\"CareerSatisfaction\"].dropna().value_counts().values,\n      \"labels\": data[\"CareerSatisfaction\"].dropna().value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"Career Satisfaction\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"Are developers satisfied with their career?\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Career Satisfaction\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\niplot(fig, filename='donut')","8e3f4d29":"random.shuffle(color_brewer)\nfig = {\n  \"data\": [\n    {\n      \"values\": data[\"HopeFiveYears\"].dropna().value_counts().values,\n      \"labels\": data[\"HopeFiveYears\"].dropna().value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"Hopes for future\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"What developers want to be doing in next 5 years?\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Aspirations\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ],\n        \"legend\": dict(orientation=\"h\")\n    }\n}\niplot(fig, filename='donut')","7f30830a":"random.shuffle(color_brewer)\nfig = {\n  \"data\": [\n    {\n      \"values\": data[\"JobSearchStatus\"].dropna().value_counts().values,\n      \"labels\": data[\"JobSearchStatus\"].dropna().value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"Hopes for future\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"Description of job-seeking status of developers\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Job seeking\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ],\n        \"legend\": dict(orientation=\"h\")\n    }\n}\niplot(fig, filename='donut')","28a39188":"random.shuffle(color_brewer)\nfig = {\n  \"data\": [\n    {\n      \"values\": data[\"LastNewJob\"].dropna().value_counts().values,\n      \"labels\": data[\"LastNewJob\"].dropna().value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"Last job\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"When was the last time a developer took a job with a new employer?\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Time since last job\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\niplot(fig, filename='donut')","168c040f":"random.shuffle(color_brewer)\nfig = {\n  \"data\": [\n    {\n      \"values\": data[\"UpdateCV\"].dropna().value_counts().values,\n      \"labels\": data[\"UpdateCV\"].dropna().value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"UpdateCV\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"Last time CV was updated...\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Last CV update\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ],\n        \"legend\":dict(orientation=\"h\")\n    }\n}\niplot(fig, filename='donut')","1c5d0822":"random.shuffle(color_brewer)\nfig = {\n  \"data\": [\n    {\n      \"values\": data[\"SalaryType\"].dropna().value_counts().values,\n      \"labels\": data[\"SalaryType\"].dropna().value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"Salary Type\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"At what frequency are the developers paid?\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Salary Type\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\niplot(fig, filename='donut')","2c0382d9":"fig = ff.create_distplot([data[\"ConvertedSalary\"].dropna()],['Converted Salary'],bin_size=10000)\niplot(fig, filename='Basic Distplot')","9bc2acee":"factor_list = [\"The industry that I'd be working in\",\"The financial performance or funding status of the company or organization\",\"The specific department or team I'd be working on\",\"The languages, frameworks, and other technologies I'd be working with\",\"The compensation and benefits offered\",\"The office environment or company culture\",\"The opportunity to work from home\/remotely\",\"Opportunities for professional development\",\"The diversity of the company or organization\",\"How widely used or impactful the product or service I'd be working on is\"]\nmean_list = [data[\"AssessJob{}\".format(i)].dropna().mean() for i in range(1,11)]\nassess_job = pd.DataFrame()\nassess_job[\"Factors\"] = factor_list\nassess_job[\"Mean_Score\"] = mean_list\nassess_job[\"Rank\"] = assess_job[\"Mean_Score\"].rank()\ndf = assess_job.sort_values(\"Rank\")\n\ntrace1 = go.Table(\n    header=dict(values=df.columns,\n                fill = dict(color='#C2D4FF'),\n                align = ['left'] * 5),\n    cells=dict(values=[df.Factors, df.Mean_Score, df.Rank],\n               fill = dict(color='#F5F8FF'),\n               align = ['left'] * 5))\n\nd = [trace1]\n\niplot(d, filename = 'pandas_table')","2717403f":"factor_list = [\"Salary and\/or bonuses\",\"Stock options or shares\",\"Health insurance\",\"Parental leave\",\"Fitness or wellness benefit\",\"Retirement or pension savings\",\"Company-provided meals or snacks\",\"Computer\/office equipment allowance\",\"Childcare benefit\",\"Transportation benefit\",\"Conference or education budget\"]\nmean_list = [data[\"AssessBenefits{}\".format(i)].dropna().mean() for i in range(1,12)]\nassess_benefits = pd.DataFrame()\nassess_benefits[\"Factors\"] = factor_list\nassess_benefits[\"Mean_Score\"] = mean_list\nassess_benefits[\"Rank\"] = assess_benefits[\"Mean_Score\"].rank()\ndf = assess_benefits.sort_values(\"Rank\")\n\ntrace1 = go.Table(\n    header=dict(values=df.columns,\n                fill = dict(color='#AC68CC'),\n                align = ['left'] * 5),\n    cells=dict(values=[df.Factors, df.Mean_Score, df.Rank],\n               fill = dict(color='#D6B4E7'),\n               align = ['left'] * 5))\n\nd = [trace1]\n\niplot(d, filename = 'pandas_table')","1c7f20a8":"random.shuffle(color_brewer)\n\nd1 = {}\nfor type in data[\"LanguageWorkedWith\"][data.OpenSource == \"Yes\"].dropna():\n    type = str(type).split(';')\n    for i in type: \n        if i in d1:\n            d1[i] = d1[i] + 1\n        else:\n            d1[i] = 0\nd1 = sorted(d1.items(), key=operator.itemgetter(1))\nd1 = dict(d1)\n\nd2 = {}\nfor type in data[\"LanguageWorkedWith\"][data.OpenSource == \"No\"].dropna():\n    type = str(type).split(';')\n    for i in type: \n        if i in d2:\n            d2[i] = d2[i] + 1\n        else:\n            d2[i] = 0\nd2 = sorted(d2.items(), key=operator.itemgetter(1))\nd2 = dict(d2)\n\ntrace1 = go.Bar(\n    x = list(d1.values()),\n    y = list(d1.keys()),\n    orientation='h',\n    marker=dict(color=color_brewer, line=dict(color='rgb(8,48,107)',width=1.5,)),\n    opacity = 0.6\n)\n\ntrace2 = go.Bar(\n    x = list(d2.values()),\n    y = list(d2.keys()),\n    orientation='h',\n    marker=dict(color=color_brewer, line=dict(color='rgb(8,48,107)',width=1.5,)),\n    opacity = 0.6\n)\n\nfig = tools.make_subplots(rows=1, cols=2, shared_yaxes=True)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\nfig['layout'].update(height=1000, width=900, title='Open source contributors vs non-open-source contributors(Most used languages)', showlegend=False, xaxis=dict(domain=[0, 0.41],autorange=\"reversed\"), xaxis2=dict(domain=[0.59, 1]), yaxis=dict(side='right'), yaxis2=dict(side='right'))\niplot(fig, filename='simple-subplot')","35754173":"trace1 = go.Bar(\n    y=data[\"FormalEducation\"][data[\"JobSatisfaction\"] == \"Extremely dissatisfied\"].value_counts().index,\n    x=data[\"FormalEducation\"][data[\"JobSatisfaction\"] == \"Extremely dissatisfied\"].value_counts().values,\n    name='Extremely dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(246, 78, 139, 0.6)',\n        line = dict(\n            color = 'rgba(246, 78, 139, 1.0)',\n            width = 3)\n    )\n)\ntrace2 = go.Bar(\n    y=data[\"FormalEducation\"][data[\"JobSatisfaction\"] == \"Moderately dissatisfied\"].value_counts().index,\n    x=data[\"FormalEducation\"][data[\"JobSatisfaction\"] == \"Moderately dissatisfied\"].value_counts().values,\n    name='Moderately dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(58, 71, 80, 0.6)',\n        line = dict(\n            color = 'rgba(58, 71, 80, 1.0)',\n            width = 3)\n    )\n)\ntrace3 = go.Bar(\n    y=data[\"FormalEducation\"][data[\"JobSatisfaction\"] == \"Slightly dissatisfied\"].value_counts().index,\n    x=data[\"FormalEducation\"][data[\"JobSatisfaction\"] == \"Slightly dissatisfied\"].value_counts().values,\n    name='Slightly dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(255, 225, 79, 0.6)',\n        line = dict(\n            color = 'rgba(255, 225, 79, 1.0)',\n            width = 3)\n    )\n)\ntrace4 = go.Bar(\n    y=data[\"FormalEducation\"][data[\"JobSatisfaction\"] == \"Neither satisfied nor dissatisfied\"].value_counts().index,\n    x=data[\"FormalEducation\"][data[\"JobSatisfaction\"] == \"Neither satisfied nor dissatisfied\"].value_counts().values,\n    name='Neither satisfied nor dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(180, 49, 49, 0.6)',\n        line = dict(\n            color = 'rgba(180, 49, 49, 1.0)',\n            width = 3)\n    )\n)\ntrace5 = go.Bar(\n    y=data[\"FormalEducation\"][data[\"JobSatisfaction\"] == \"Slightly satisfied\"].value_counts().index,\n    x=data[\"FormalEducation\"][data[\"JobSatisfaction\"] == \"Slightly satisfied\"].value_counts().values,\n    name='Slightly satisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(49, 102, 191, 0.6)',\n        line = dict(\n            color = 'rgba(49, 102, 191, 1.0)',\n            width = 3)\n    )\n)\ntrace6 = go.Bar(\n    y=data[\"FormalEducation\"][data[\"JobSatisfaction\"] == \"Moderately satisfied\"].value_counts().index,\n    x=data[\"FormalEducation\"][data[\"JobSatisfaction\"] == \"Moderately satisfied\"].value_counts().values,\n    name='Moderately satisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(245, 157, 22, 0.6)',\n        line = dict(\n            color = 'rgba(245, 157, 22, 1.0)',\n            width = 3)\n    )\n)\ntrace7 = go.Bar(\n    y=data[\"FormalEducation\"][data[\"JobSatisfaction\"] == \"Extremely satisfied\"].value_counts().index,\n    x=data[\"FormalEducation\"][data[\"JobSatisfaction\"] == \"Extremely satisfied\"].value_counts().values,\n    name='Extremely satisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(158, 251, 71, 0.6)',\n        line = dict(\n            color = 'rgba(158, 251, 71, 1.0)',\n            width = 3)\n    )\n)\n\nd = [trace1, trace2,trace3,trace4,trace5,trace6,trace7]\nlayout = go.Layout(\n    barmode='stack',\n    margin=go.Margin(\n        l=120\n    ),\n    title=\"Effect of formal education on job satisfaction\"\n)\n\nfig = go.Figure(data=d, layout=layout)\niplot(fig, filename='marker-h-bar')","0ac1e522":"trace1 = go.Bar(\n    y=data[\"CompanySize\"][data[\"JobSatisfaction\"] == \"Extremely dissatisfied\"].value_counts().index,\n    x=data[\"CompanySize\"][data[\"JobSatisfaction\"] == \"Extremely dissatisfied\"].value_counts().values,\n    name='Extremely dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(246, 78, 139, 0.6)',\n        line = dict(\n            color = 'rgba(246, 78, 139, 1.0)',\n            width = 3)\n    )\n)\ntrace2 = go.Bar(\n    y=data[\"CompanySize\"][data[\"JobSatisfaction\"] == \"Moderately dissatisfied\"].value_counts().index,\n    x=data[\"CompanySize\"][data[\"JobSatisfaction\"] == \"Moderately dissatisfied\"].value_counts().values,\n    name='Moderately dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(58, 71, 80, 0.6)',\n        line = dict(\n            color = 'rgba(58, 71, 80, 1.0)',\n            width = 3)\n    )\n)\ntrace3 = go.Bar(\n    y=data[\"CompanySize\"][data[\"JobSatisfaction\"] == \"Slightly dissatisfied\"].value_counts().index,\n    x=data[\"CompanySize\"][data[\"JobSatisfaction\"] == \"Slightly dissatisfied\"].value_counts().values,\n    name='Slightly dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(255, 225, 79, 0.6)',\n        line = dict(\n            color = 'rgba(255, 225, 79, 1.0)',\n            width = 3)\n    )\n)\ntrace4 = go.Bar(\n    y=data[\"CompanySize\"][data[\"JobSatisfaction\"] == \"Neither satisfied nor dissatisfied\"].value_counts().index,\n    x=data[\"CompanySize\"][data[\"JobSatisfaction\"] == \"Neither satisfied nor dissatisfied\"].value_counts().values,\n    name='Neither satisfied nor dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(180, 49, 49, 0.6)',\n        line = dict(\n            color = 'rgba(180, 49, 49, 1.0)',\n            width = 3)\n    )\n)\ntrace5 = go.Bar(\n    y=data[\"CompanySize\"][data[\"JobSatisfaction\"] == \"Slightly satisfied\"].value_counts().index,\n    x=data[\"CompanySize\"][data[\"JobSatisfaction\"] == \"Slightly satisfied\"].value_counts().values,\n    name='Slightly satisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(49, 102, 191, 0.6)',\n        line = dict(\n            color = 'rgba(49, 102, 191, 1.0)',\n            width = 3)\n    )\n)\ntrace6 = go.Bar(\n    y=data[\"CompanySize\"][data[\"JobSatisfaction\"] == \"Moderately satisfied\"].value_counts().index,\n    x=data[\"CompanySize\"][data[\"JobSatisfaction\"] == \"Moderately satisfied\"].value_counts().values,\n    name='Moderately satisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(245, 157, 22, 0.6)',\n        line = dict(\n            color = 'rgba(245, 157, 22, 1.0)',\n            width = 3)\n    )\n)\ntrace7 = go.Bar(\n    y=data[\"CompanySize\"][data[\"JobSatisfaction\"] == \"Extremely satisfied\"].value_counts().index,\n    x=data[\"CompanySize\"][data[\"JobSatisfaction\"] == \"Extremely satisfied\"].value_counts().values,\n    name='Extremely satisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(158, 251, 71, 0.6)',\n        line = dict(\n            color = 'rgba(158, 251, 71, 1.0)',\n            width = 3)\n    )\n)\n\nd = [trace1, trace2,trace3,trace4,trace5,trace6,trace7]\nlayout = go.Layout(\n    barmode='stack',\n    margin=go.Margin(\n        l=200\n    ),\n    title=\"Effect of company size on job satisfaction\"\n)\n\nfig = go.Figure(data=d, layout=layout)\niplot(fig, filename='marker-h-bar')","8b002005":"trace1 = go.Bar(\n    y=data[\"HopeFiveYears\"][data[\"JobSatisfaction\"] == \"Extremely dissatisfied\"].value_counts().index,\n    x=data[\"HopeFiveYears\"][data[\"JobSatisfaction\"] == \"Extremely dissatisfied\"].value_counts().values,\n    name='Extremely dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(246, 78, 139, 0.6)',\n        line = dict(\n            color = 'rgba(246, 78, 139, 1.0)',\n            width = 3)\n    )\n)\ntrace2 = go.Bar(\n    y=data[\"HopeFiveYears\"][data[\"JobSatisfaction\"] == \"Moderately dissatisfied\"].value_counts().index,\n    x=data[\"HopeFiveYears\"][data[\"JobSatisfaction\"] == \"Moderately dissatisfied\"].value_counts().values,\n    name='Moderately dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(58, 71, 80, 0.6)',\n        line = dict(\n            color = 'rgba(58, 71, 80, 1.0)',\n            width = 3)\n    )\n)\ntrace3 = go.Bar(\n    y=data[\"HopeFiveYears\"][data[\"JobSatisfaction\"] == \"Slightly dissatisfied\"].value_counts().index,\n    x=data[\"HopeFiveYears\"][data[\"JobSatisfaction\"] == \"Slightly dissatisfied\"].value_counts().values,\n    name='Slightly dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(255, 225, 79, 0.6)',\n        line = dict(\n            color = 'rgba(255, 225, 79, 1.0)',\n            width = 3)\n    )\n)\ntrace4 = go.Bar(\n    y=data[\"HopeFiveYears\"][data[\"JobSatisfaction\"] == \"Neither satisfied nor dissatisfied\"].value_counts().index,\n    x=data[\"HopeFiveYears\"][data[\"JobSatisfaction\"] == \"Neither satisfied nor dissatisfied\"].value_counts().values,\n    name='Neither satisfied nor dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(180, 49, 49, 0.6)',\n        line = dict(\n            color = 'rgba(180, 49, 49, 1.0)',\n            width = 3)\n    )\n)\ntrace5 = go.Bar(\n    y=data[\"HopeFiveYears\"][data[\"JobSatisfaction\"] == \"Slightly satisfied\"].value_counts().index,\n    x=data[\"HopeFiveYears\"][data[\"JobSatisfaction\"] == \"Slightly satisfied\"].value_counts().values,\n    name='Slightly satisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(49, 102, 191, 0.6)',\n        line = dict(\n            color = 'rgba(49, 102, 191, 1.0)',\n            width = 3)\n    )\n)\ntrace6 = go.Bar(\n    y=data[\"HopeFiveYears\"][data[\"JobSatisfaction\"] == \"Moderately satisfied\"].value_counts().index,\n    x=data[\"HopeFiveYears\"][data[\"JobSatisfaction\"] == \"Moderately satisfied\"].value_counts().values,\n    name='Moderately satisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(245, 157, 22, 0.6)',\n        line = dict(\n            color = 'rgba(245, 157, 22, 1.0)',\n            width = 3)\n    )\n)\ntrace7 = go.Bar(\n    y=data[\"HopeFiveYears\"][data[\"JobSatisfaction\"] == \"Extremely satisfied\"].value_counts().index,\n    x=data[\"HopeFiveYears\"][data[\"JobSatisfaction\"] == \"Extremely satisfied\"].value_counts().values,\n    name='Extremely satisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(158, 251, 71, 0.6)',\n        line = dict(\n            color = 'rgba(158, 251, 71, 1.0)',\n            width = 3)\n    )\n)\n\nd = [trace1, trace2,trace3,trace4,trace5,trace6,trace7]\nlayout = go.Layout(\n    barmode='stack',\n    margin=go.Margin(\n        l=500\n    ),\n    title=\"Effect of job satisfaction on future goals\",\n    legend=dict(orientation=\"h\")\n)\n\nfig = go.Figure(data=d, layout=layout)\niplot(fig, filename='marker-h-bar')","c4cc5797":"trace1 = go.Bar(\n    y=data[\"YearsCoding\"][data[\"JobSatisfaction\"] == \"Extremely dissatisfied\"].value_counts().index,\n    x=data[\"YearsCoding\"][data[\"JobSatisfaction\"] == \"Extremely dissatisfied\"].value_counts().values,\n    name='Extremely dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(246, 78, 139, 0.6)',\n        line = dict(\n            color = 'rgba(246, 78, 139, 1.0)',\n            width = 3)\n    )\n)\ntrace2 = go.Bar(\n    y=data[\"YearsCoding\"][data[\"JobSatisfaction\"] == \"Moderately dissatisfied\"].value_counts().index,\n    x=data[\"YearsCoding\"][data[\"JobSatisfaction\"] == \"Moderately dissatisfied\"].value_counts().values,\n    name='Moderately dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(58, 71, 80, 0.6)',\n        line = dict(\n            color = 'rgba(58, 71, 80, 1.0)',\n            width = 3)\n    )\n)\ntrace3 = go.Bar(\n    y=data[\"YearsCoding\"][data[\"JobSatisfaction\"] == \"Slightly dissatisfied\"].value_counts().index,\n    x=data[\"YearsCoding\"][data[\"JobSatisfaction\"] == \"Slightly dissatisfied\"].value_counts().values,\n    name='Slightly dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(255, 225, 79, 0.6)',\n        line = dict(\n            color = 'rgba(255, 225, 79, 1.0)',\n            width = 3)\n    )\n)\ntrace4 = go.Bar(\n    y=data[\"YearsCoding\"][data[\"JobSatisfaction\"] == \"Neither satisfied nor dissatisfied\"].value_counts().index,\n    x=data[\"YearsCoding\"][data[\"JobSatisfaction\"] == \"Neither satisfied nor dissatisfied\"].value_counts().values,\n    name='Neither satisfied nor dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(180, 49, 49, 0.6)',\n        line = dict(\n            color = 'rgba(180, 49, 49, 1.0)',\n            width = 3)\n    )\n)\ntrace5 = go.Bar(\n    y=data[\"YearsCoding\"][data[\"JobSatisfaction\"] == \"Slightly satisfied\"].value_counts().index,\n    x=data[\"YearsCoding\"][data[\"JobSatisfaction\"] == \"Slightly satisfied\"].value_counts().values,\n    name='Slightly satisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(49, 102, 191, 0.6)',\n        line = dict(\n            color = 'rgba(49, 102, 191, 1.0)',\n            width = 3)\n    )\n)\ntrace6 = go.Bar(\n    y=data[\"YearsCoding\"][data[\"JobSatisfaction\"] == \"Moderately satisfied\"].value_counts().index,\n    x=data[\"YearsCoding\"][data[\"JobSatisfaction\"] == \"Moderately satisfied\"].value_counts().values,\n    name='Moderately satisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(245, 157, 22, 0.6)',\n        line = dict(\n            color = 'rgba(245, 157, 22, 1.0)',\n            width = 3)\n    )\n)\ntrace7 = go.Bar(\n    y=data[\"YearsCoding\"][data[\"JobSatisfaction\"] == \"Extremely satisfied\"].value_counts().index,\n    x=data[\"YearsCoding\"][data[\"JobSatisfaction\"] == \"Extremely satisfied\"].value_counts().values,\n    name='Extremely satisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(158, 251, 71, 0.6)',\n        line = dict(\n            color = 'rgba(158, 251, 71, 1.0)',\n            width = 3)\n    )\n)\n\nd = [trace1, trace2,trace3,trace4,trace5,trace6,trace7]\nlayout = go.Layout(\n    barmode='stack',\n    margin=go.Margin(\n        l=150\n    ),\n    title=\"Effect of coding experience on job satisfaction\"\n)\n\nfig = go.Figure(data=d, layout=layout)\niplot(fig, filename='marker-h-bar')","868ea2d3":"trace1 = go.Bar(\n    y=data[\"Age\"][data[\"JobSatisfaction\"] == \"Extremely dissatisfied\"].value_counts().index,\n    x=data[\"Age\"][data[\"JobSatisfaction\"] == \"Extremely dissatisfied\"].value_counts().values,\n    name='Extremely dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(246, 78, 139, 0.6)',\n        line = dict(\n            color = 'rgba(246, 78, 139, 1.0)',\n            width = 3)\n    )\n)\ntrace2 = go.Bar(\n    y=data[\"Age\"][data[\"JobSatisfaction\"] == \"Moderately dissatisfied\"].value_counts().index,\n    x=data[\"Age\"][data[\"JobSatisfaction\"] == \"Moderately dissatisfied\"].value_counts().values,\n    name='Moderately dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(58, 71, 80, 0.6)',\n        line = dict(\n            color = 'rgba(58, 71, 80, 1.0)',\n            width = 3)\n    )\n)\ntrace3 = go.Bar(\n    y=data[\"Age\"][data[\"JobSatisfaction\"] == \"Slightly dissatisfied\"].value_counts().index,\n    x=data[\"Age\"][data[\"JobSatisfaction\"] == \"Slightly dissatisfied\"].value_counts().values,\n    name='Slightly dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(255, 225, 79, 0.6)',\n        line = dict(\n            color = 'rgba(255, 225, 79, 1.0)',\n            width = 3)\n    )\n)\ntrace4 = go.Bar(\n    y=data[\"Age\"][data[\"JobSatisfaction\"] == \"Neither satisfied nor dissatisfied\"].value_counts().index,\n    x=data[\"Age\"][data[\"JobSatisfaction\"] == \"Neither satisfied nor dissatisfied\"].value_counts().values,\n    name='Neither satisfied nor dissatisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(180, 49, 49, 0.6)',\n        line = dict(\n            color = 'rgba(180, 49, 49, 1.0)',\n            width = 3)\n    )\n)\ntrace5 = go.Bar(\n    y=data[\"Age\"][data[\"JobSatisfaction\"] == \"Slightly satisfied\"].value_counts().index,\n    x=data[\"Age\"][data[\"JobSatisfaction\"] == \"Slightly satisfied\"].value_counts().values,\n    name='Slightly satisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(49, 102, 191, 0.6)',\n        line = dict(\n            color = 'rgba(49, 102, 191, 1.0)',\n            width = 3)\n    )\n)\ntrace6 = go.Bar(\n    y=data[\"Age\"][data[\"JobSatisfaction\"] == \"Moderately satisfied\"].value_counts().index,\n    x=data[\"Age\"][data[\"JobSatisfaction\"] == \"Moderately satisfied\"].value_counts().values,\n    name='Moderately satisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(245, 157, 22, 0.6)',\n        line = dict(\n            color = 'rgba(245, 157, 22, 1.0)',\n            width = 3)\n    )\n)\ntrace7 = go.Bar(\n    y=data[\"Age\"][data[\"JobSatisfaction\"] == \"Extremely satisfied\"].value_counts().index,\n    x=data[\"Age\"][data[\"JobSatisfaction\"] == \"Extremely satisfied\"].value_counts().values,\n    name='Extremely satisfied',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(158, 251, 71, 0.6)',\n        line = dict(\n            color = 'rgba(158, 251, 71, 1.0)',\n            width = 3)\n    )\n)\n\nd = [trace1,trace2,trace3,trace4,trace5,trace6,trace7]\nlayout = go.Layout(\n    barmode='stack',\n    margin=go.Margin(\n        l=150\n    ),\n    title=\"Effect of age on job satisfaction\"\n)\n\nfig = go.Figure(data=d, layout=layout)\niplot(fig, filename='marker-h-bar')","332ee3fd":"trace1 = {\"x\": [data[\"ConvertedSalary\"][data[\"Country\"]==i].mean() for i in data[\"Country\"].value_counts().index],\n          \"y\": data[\"Country\"].value_counts().index,\n          \"marker\": {\"color\": \"pink\", \"size\": 12},\n          \"mode\": \"markers\",\n          \"name\": \"Mean Salary\",\n          \"type\": \"scatter\"\n}\n\nd = [trace1]\nlayout = {\"title\": \"Mean salary in different countries\",\n          \"xaxis\": {\"title\": \"Converted Salary\", },\n          \"yaxis\": {\"title\": \"Country\"},\n          \"height\":3500,\n          \"margin\":dict(l=300)\n         }\n\nfig = go.Figure(data=d, layout=layout)\niplot(fig, filename='basic_dot-plot')","e578d7f9":"random.shuffle(color_brewer)\nfig = {\n  \"data\": [\n    {\n      \"values\": data[\"EthicsChoice\"].dropna().value_counts().values,\n      \"labels\": data[\"EthicsChoice\"].dropna().value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"Unethical code\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"Do developers write code for unethical purposes\/projects?\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Unethical code\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\niplot(fig, filename='donut')","c1c23207":"d = [go.Bar(\n            x=['Ethical','Unethical'],\n            y=[data[\"ConvertedSalary\"][data[\"EthicsChoice\"]==\"No\"].mean(),data[\"ConvertedSalary\"][data[\"EthicsChoice\"]==\"Yes\"].mean()],\n            text=[int(data[\"ConvertedSalary\"][data[\"EthicsChoice\"]==\"No\"].mean()),int(data[\"ConvertedSalary\"][data[\"EthicsChoice\"]==\"Yes\"].mean())],\n            textposition='auto',\n            marker=dict(\n                color=['rgb(158,202,225)','rgb(58,200,225)'],\n                line=dict(\n                    color='rgb(8,48,107)',\n                    width=1.5,\n                )\n            ),\n            opacity=0.6\n    )]\nlayout = go.Layout(\n    title=\"Are good ethics rewarding(mean salaries of ethical and unethical developers)?\",\n    margin=go.Margin(\n        l=100,\n        r=100\n    )\n)\nfig = go.Figure(data=d, layout=layout)\niplot(fig, filename='bar')","e5d04b6b":"random.shuffle(color_brewer)\nfig = {\n  \"data\": [\n    {\n      \"values\": data[\"EthicsReport\"].dropna().value_counts().values,\n      \"labels\": data[\"EthicsReport\"].dropna().value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"Report\/Call out\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"Do developers report these unethical practices?\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Report\/Call out\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\niplot(fig, filename='donut')","3490ece4":"random.shuffle(color_brewer)\nfig = {\n  \"data\": [\n    {\n      \"values\": data[\"EthicsResponsible\"].dropna().value_counts().values,\n      \"labels\": data[\"EthicsResponsible\"].dropna().value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"Who is responsible\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"Who is responsible for success of unethical code?\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Who is responsible?\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\niplot(fig, filename='donut')","3bf85c32":"random.shuffle(color_brewer)\nfig = {\n  \"data\": [\n    {\n      \"values\": data[\"AIDangerous\"].dropna().value_counts().values,\n      \"labels\": data[\"AIDangerous\"].dropna().value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"AIDangerous\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"Dangerous aspects of AI\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Dangerous AI\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ],\n        \"legend\": dict(orientation=\"h\")\n    }\n}\niplot(fig, filename='donut')","5b54486e":"random.shuffle(color_brewer)\nfig = {\n  \"data\": [\n    {\n      \"values\": data[\"AIInteresting\"].dropna().value_counts().values,\n      \"labels\": data[\"AIInteresting\"].dropna().value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"AIInteresting\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"Interesting aspects of AI\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Interesting AI\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ],\n        \"legend\": dict(orientation=\"h\")\n    }\n}\niplot(fig, filename='donut')","9b1554da":"random.shuffle(color_brewer)\nfig = {\n  \"data\": [\n    {\n      \"values\": data[\"AIResponsible\"].dropna().value_counts().values,\n      \"labels\": data[\"AIResponsible\"].dropna().value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"Who will take the responsibilities of AI's effect?\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"Who will take the responsibilities of AI's effect?\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Responsible for AI\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ],\n        \"legend\": dict(orientation=\"h\")\n    }\n}\niplot(fig, filename='donut')","9ac63ed6":"random.shuffle(color_brewer)\nfig = {\n  \"data\": [\n    {\n      \"values\": data[\"AIFuture\"].dropna().value_counts().values,\n      \"labels\": data[\"AIFuture\"].dropna().value_counts().index,\n      \"domain\": {\"x\": [0, .95]},\n      \"name\": \"AIFuture\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\",\n      \"marker\": {\"colors\": [i for i in reversed(color_brewer)]},\n      \"textfont\": {\"color\": \"#FFFFFF\"}\n    }],\n  \"layout\": {\n        \"title\":\"The future of AI\",\n        \"paper_bgcolor\": \"#D3D3D3\",\n        \"plot_bgcolor\": \"#D3D3D3\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Future of AI\",\n                \"x\": 0.47,\n                \"y\": 0.5\n            }\n        ],\n        \"legend\": dict(orientation=\"h\")\n    }\n}\niplot(fig, filename='donut')","5f0324f5":"#### How often do developers check\/commit code?","064b01b5":"#### Number of monitors used by developers","f3200dc7":"#### Comparing languages used by developers who contribute to open source vs developers who don't","bf234b29":"## Company size distribution","3d9610b5":"## Treemap of Formal education","9794df26":"#### What's the future of AI?","68d33d67":"#### Salary Type","c2150567":"### Let's describe developers' views about Artificial Intelligence\n\n#### Is AI dangerous?","bd924cad":"#### Languages developers work with(Most popular\/used programming languages)","f246e8df":"#### Career Satisfaction","2e49cf2e":"#### Most popular version control systems","0fda24aa":"#### How much time after the bootcamp did the developers get jobs?","ab72fc76":"#### Number of developers by Developer Type","7f8ee579":"#### What kind of benefits do the developers want?\nSince developers assess benefits and compensation the most when going through a job offer, let's have a look at the most important benefits desired by developers.","64c19897":"## Let's gather some insights into the tools and jobs of developers\n\n#### First, we get a simplifier which counts number of votes by separating the votes in each row ","4aa92d7c":"#### Why do developers participate in hackathons?","28e4fe7d":"#### Languages developers desire to learn\/work on the next year","6767f2d5":"#### What do developers look for when assessing a job?","817eb7ad":"### Let's gain some insight into the job satisfaction and salary of developers\n\n#### Job Satisfaction","3a73751d":"#### Salary distribution (Distplot of distribution of salary in USD using the exchange rate on 2018-01-18, assuming 12 working months and 50 working weeks.)","c63eec53":"#### Databases developers desire to learn\/work on the next year","60ca2525":"#### Platforms developers work with(Most popular\/used platforms)","b9011371":"#### What makes AI interesting?","71248ad3":"### Brief analysis of developers' ethics\n#### \tImagine that a developer was asked to write code for a purpose or product that you consider extremely unethical. Does he write the code anyway?","33b1262b":"#### Platforms developers desire to work on the next year","4e5c884b":"#### What communication tools are used by developers?","317bde6a":"## Data insights","7f4e78a4":"#### Frameworks developers desire to work on the next year","546a549c":"#### Databases developers work with(Most popular\/used databases)","ae4c45be":"## Visualizing open source contributions and its relationship with hobbies","3019524c":"So, factors like **compensaton and benefits offered(most important)**, **languages, frameworks and technologies they will use** and **opportunities for professional development** are assessed by developers the most when looking for a job. Developers however, are not bothered about the **diversity of the organization** they work in.","041d5b90":"#### How long have the developers been coding?","145a879e":"#### When did the developers last update their CV?","9501b49d":"#### Future aspirations","0c3be4f1":"#### Most popular programming methodologies","5764fbf8":"#### Frameworks developers work with(Most popular\/used frameworks)","fa6f5796":"#### How do developers teach themselves?","7cf5d001":"#### How long have the developers been coding at a professional level?","fd86a78c":"## Treemap of Employment types","2ee7b179":"### This is certainly not the end. More is yet to come. Kindly upvote if you like my work. Your feedback is valuable.","b1adc31c":"#### What IDEs do developers use?","83516c38":"#### Job search status","ded1a64f":"## Checking missing values (through a scrollable table)","12c3be1f":"#### Who do developers believe is ultimately most responsible for code that accomplishes something unethical?","8da5d7f0":"So, developers are looking for **salary and\/or bonuses** while looking for a job. Surprisingly, **childcare benefits**, **parental leaves** and **fitness benefits** are some benefits developers may look past.","8a21842a":"#### Do developers report or otherwise call out the unethical code in question?","5483e730":"#### What are the methods developers use to learn new technologies?","37cc68ff":"#### Whose responsibility is it, primarily, to consider the ramifications of increasingly advanced AI technology?","a04ee21f":"## Undergraduate education distribution","4683e120":"#### Popular operating systems","029b633c":"# Aim\nThis is an exploratory data analysis of Stack Overflow 2018 Developer Survey. The dataset provided contains a gold mine of data which will be used to learn about the tech environment as seen from the eyes of developers. We will learn about the technologies and jobs the developers of today prefer, their experiences and aspirations and a whole lot of interesting information.\n\n# About the dataset \n**As mentioned by Stack Overflow:** Each year, we at Stack Overflow ask the developer community about everything from their favorite technologies to their job preferences. This year marks the eighth year we\u2019ve published our Annual Developer Survey results\u2014with the largest number of respondents yet. Over 100,000 developers took the 30-minute survey in January 2018.\n\nThis year, we covered a few new topics ranging from artificial intelligence to ethics in coding. We also found that underrepresented groups in tech responded to our survey at even lower rates than we would expect from their participation in the workforce. Want to dive into the results yourself and see what you can learn about salaries or machine learning or diversity in tech? We look forward to seeing what you find!\n\n","333483ef":"## Treemap of top countries with developers","96765b0c":"## Visualizing hobbies and its relationship with open source contributions and education status","0a6f61fb":"#### Last new job"}}