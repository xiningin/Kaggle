{"cell_type":{"94a7b5ec":"code","c8c7e919":"code","acb61bb6":"code","d20d42bf":"code","29e1d5e4":"code","04a222d1":"code","aedb0d0a":"code","287f7e26":"code","06574e8b":"code","2392a7a2":"code","27cf0312":"code","16ac3640":"code","1b77c28c":"code","31a9ed43":"code","b567a285":"code","36fc3332":"code","577da871":"code","ca150768":"code","61d2b3cc":"code","5daad529":"code","143b4f73":"code","9e90b9d8":"code","beee06e6":"code","924b290c":"code","2a9d2d06":"markdown","c45ea012":"markdown","c84a4215":"markdown","b52571ab":"markdown","4eb57f73":"markdown","07d4a7f8":"markdown","0b45112f":"markdown","6e63da1d":"markdown"},"source":{"94a7b5ec":"\nimport numpy as np\nimport pandas as pd\nimport os\nimport cv2\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelBinarizer\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras import optimizers\nfrom keras import backend as K\nfrom keras.layers import Dense, Activation, Flatten, Dense,MaxPooling2D, Dropout\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization","c8c7e919":"def adjust_gamma(image, gamma=1.0):\n    invGamma = 1.0 \/ gamma\n    table = np.array([((i \/ 255.0) ** invGamma) * 255 for i in np.arange(0, 256)])\n    return cv2.LUT(image.astype(np.uint8), table.astype(np.uint8))","acb61bb6":"train_data = []\ngamma = 2.5\nnormal_count = 0\npneumonia_count = 0\nimg_size = 124\nassign_dict = {\"NORMAL\":0, \"PNEUMONIA\":1}\ndirectory = \"..\/input\/chest-xray-pneumonia\/chest_xray\/train\"\nfor sub_directory in os.listdir(directory):\n    if sub_directory == \"NORMAL\":\n        inner_directory = os.path.join(directory,sub_directory)\n        for i in os.listdir(inner_directory):\n            normal_count += 1\n            img = cv2.imread(os.path.join(inner_directory,i),0)\n            img =  adjust_gamma(img, gamma=gamma)\n            img = cv2.resize(img,(img_size,img_size))\n            train_data.append([img,assign_dict[sub_directory]])\n    if sub_directory == \"PNEUMONIA\":\n        inner_directory = os.path.join(directory,sub_directory)\n        for i in os.listdir(inner_directory):\n            pneumonia_count +=1\n            img = cv2.imread(os.path.join(inner_directory,i),0)\n            img =  adjust_gamma(img, gamma=gamma)\n            img = cv2.resize(img,(img_size,img_size))\n            train_data.append([img,assign_dict[sub_directory]])\nrandom.shuffle(train_data)\n        ","d20d42bf":"print(normal_count,pneumonia_count)","29e1d5e4":"val_data = []\ndirectory = \"..\/input\/chest-xray-pneumonia\/chest_xray\/val\"\nfor sub_directory in os.listdir(directory):\n    if sub_directory == \"NORMAL\":\n        inner_directory = os.path.join(directory,sub_directory)\n        for i in os.listdir(inner_directory):\n            img = cv2.imread(os.path.join(inner_directory,i),0)\n            img =  adjust_gamma(img, gamma=gamma)\n            img = cv2.resize(img,(img_size,img_size))\n            val_data.append([img,assign_dict[sub_directory]])\n    if sub_directory == \"PNEUMONIA\":\n        inner_directory = os.path.join(directory,sub_directory)\n        for i in os.listdir(inner_directory):\n            img = cv2.imread(os.path.join(inner_directory,i),0)\n            img =  adjust_gamma(img, gamma=gamma)\n            img = cv2.resize(img,(img_size,img_size))\n            val_data.append([img,assign_dict[sub_directory]])\nrandom.shuffle(val_data)","04a222d1":"test_data = []\ndirectory = \"..\/input\/chest-xray-pneumonia\/chest_xray\/test\"\nfor sub_directory in os.listdir(directory):\n    if sub_directory == \"NORMAL\":\n        inner_directory = os.path.join(directory,sub_directory)\n        for i in os.listdir(inner_directory):\n            img = cv2.imread(os.path.join(inner_directory,i),0)\n            img =  adjust_gamma(img, gamma=gamma)\n            img = cv2.resize(img,(img_size,img_size))\n            test_data.append([img,assign_dict[sub_directory]])\n    if sub_directory == \"PNEUMONIA\":\n        inner_directory = os.path.join(directory,sub_directory)\n        for i in os.listdir(inner_directory):\n            img = cv2.imread(os.path.join(inner_directory,i),0)\n            img =  adjust_gamma(img, gamma=gamma)\n            img = cv2.resize(img,(img_size,img_size))\n            test_data.append([img,assign_dict[sub_directory]])\nrandom.shuffle(test_data)","aedb0d0a":"train_X = []\ntrain_Y = []\nfor features,label in train_data:\n    train_X.append(features)\n    train_Y.append(label)","287f7e26":"val_X = []\nval_Y = []\nfor features,label in val_data:\n    val_X.append(features)\n    val_Y.append(label)","06574e8b":"test_X = []\ntest_Y = []\nfor features,label in test_data:\n    test_X.append(features)\n    test_Y.append(label)","2392a7a2":"train_X = np.array(train_X)\/255.0\ntrain_X = train_X.reshape(-1,124,124,1)\ntrain_Y = np.array(train_Y)","27cf0312":"val_X = np.array(val_X)\/255.0\nval_X = val_X.reshape(-1,124,124,1)\nval_Y = np.array(val_Y)","16ac3640":"test_X = np.array(test_X)\/255.0\ntest_X = test_X.reshape(-1,124,124,1)\ntest_Y = np.array(test_Y)","1b77c28c":"normal = []\ninfected = []\nfig=plt.figure(figsize=(12,12))\nfor i,cl in enumerate(train_Y):\n    if cl == 0:\n        if len(normal) == 2:\n            continue\n        normal.append(train_X[i])\n    if cl== 1:\n        if len(infected) == 2:\n            continue\n        infected.append(train_X[i])\n\nfig.suptitle(\"Normal vs Pneumonia X-ray Images\", fontsize=16)\nax1 = fig.add_subplot(221)\nax2 = fig.add_subplot(222)\nax3 = fig.add_subplot(223)\nax4 = fig.add_subplot(224)\nax1.set_title(\"Normal\")\nax1.imshow(np.squeeze(normal[0]))\nax2.set_title(\"Normal\")\nax2.imshow(np.squeeze(normal[1]))\nax3.set_title(\"Pneumonia\")\nax3.imshow(np.squeeze(infected[0]))\nax4.set_title(\"Pneumonia\")\nax4.imshow(np.squeeze(infected[1]))\nplt.show()","31a9ed43":"model = Sequential()\n\nmodel.add(Conv2D(64, (3, 3), padding = \"same\", activation='relu',input_shape=(124,124,1)))\nmodel.add(Conv2D(64, (1, 1), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(32, (3, 3), padding = \"same\",activation='relu'))\nmodel.add(Conv2D(32, (1, 1),padding = \"same\", activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(16, (3, 3), padding = \"same\",activation='relu'))\nmodel.add(Conv2D(16, (1, 1), padding = \"same\",activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(8, (3, 3), padding = \"same\",activation='relu'))\nmodel.add(Conv2D(8, (1, 1), padding = \"same\",activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\n#model.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(16, activation='relu'))\n#model.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))","b567a285":"model.summary()","36fc3332":"model.compile(loss='binary_crossentropy', optimizer=\"adam\",metrics=['accuracy'])","577da871":"from keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  \n        samplewise_center=False,  \n        featurewise_std_normalization=False,  \n        samplewise_std_normalization=False,  \n        zca_whitening=False,    \n        rotation_range=20,    \n        width_shift_range=0.1,\n        height_shift_range=0.1,  \n        horizontal_flip=False,  \n        vertical_flip=False)\ndatagen.fit(train_X)","ca150768":"from sklearn.model_selection import train_test_split\ntrain_X, val_X_new, train_Y, val_Y_new = train_test_split(train_X, train_Y, test_size=0.2, random_state=42)","61d2b3cc":"val_X = np.vstack((val_X,val_X_new))\nval_Y = np.concatenate([val_Y,val_Y_new])","5daad529":"weights = {0:5, 1:1}\nhistory = model.fit(datagen.flow(train_X,train_Y, batch_size = 32) ,epochs = 100 ,class_weight=weights, validation_data = datagen.flow(val_X, val_Y))","143b4f73":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Training Accuracy vs Validation Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left')\nplt.show()","9e90b9d8":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Training Loss vs Validation Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left')\nplt.show()","beee06e6":"test_X.shape","924b290c":"score = model.evaluate(test_X, test_Y, verbose=0)\nprint(\"Loss: \" + str(score[0]))\nprint(\"Accuracy: \" + str(score[1]*100) + \"%\")","2a9d2d06":"<a id=\"section-five\"><\/a>\n## Result Visualization\n* Training Accuracy vs Validation Accuracy \n* Training Loss vs Validation Loss","c45ea012":"<a id=\"section-four\"><\/a>\n## Model Architecture\n* 1 cross 1 convolution is used to reduce the number of parameters.\n* Image Data Augmentation is used for training.\n* Weight adjustment is done to handle the imbalanced dataset, with some trial and error, the Normal class is given an initial weight of 5 and Pneumonia class is given 1.","c84a4215":"![Pneumonia](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/2\/23\/Lobar_pneumonia_illustrated.jpg)\n\nPneumonia is an infection that inflames the air sacs in one or both lungs. The air sacs may fill with fluid or pus (purulent material), causing cough with phlegm or pus, fever, chills, and difficulty breathing. A variety of organisms, including bacteria, viruses and fungi, can cause pneumonia.\n\nPneumonia can range in seriousness from mild to life-threatening. **It is most serious for infants and young children, people older than age 65, and people with health problems or weakened immune systems.**","b52571ab":"<a id=\"section-three\"><\/a>\n## Building Training, Validation and Test Dataset\n* Normal X-ray Images are given the label 0 and Pneumonia X-ray images are given label 1\n* As we can see from both the counts that pneumonia count > normal count, its an **imbalanced dataset**.\n* For Validation set there are very less images therefore 20% of training data is also put up in the validation set.","4eb57f73":"<a id=\"section-one\"><\/a>\n## Importing Libraries","07d4a7f8":"## Contents \n1. [Importing Libraries](#section-one)\n2. [Gamma Function](#section-two)\n3. [Building Training, Validation and Test Dataset](#section-three)\n4. [Data Visualization](#section-six)\n5. [Model Architecture](#section-four)\n6. [Result Visualization](#section-five)","0b45112f":"<a id=\"section-six\"><\/a>\n## Data Visualization","6e63da1d":"<a id=\"section-two\"><\/a>\n## Gamma Function\nGamma correction, or often simply gamma, is a nonlinear operation used to encode and decode luminance or tristimulus values in video or still image systems. "}}