{"cell_type":{"9db5ac7f":"code","81fc54c4":"code","f3693e1d":"code","96db4146":"code","8973eaf6":"code","bf66d011":"code","eafe1118":"code","61aa2f52":"code","e1251dc4":"code","1310b51b":"code","bb853b45":"code","4c7f3f1e":"code","0eb13213":"code","52b81aca":"code","4da80947":"code","33b36bc9":"code","b847e0c9":"markdown","a4b7f9e5":"markdown","7a30cf94":"markdown","28db8f92":"markdown","81a69e16":"markdown"},"source":{"9db5ac7f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/cap-4611-2021-fall-assignment-1'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","81fc54c4":"train_data = pd.read_csv(\"\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/train.csv\", low_memory=False)\ntest_data = pd.read_csv(\"\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/test.csv\", low_memory=False)","f3693e1d":"%matplotlib inline\ntrain_data.hist(bins = 50, figsize=(20,15))\nplt.show()","96db4146":"train_data.describe()","8973eaf6":"train_data.info()","bf66d011":"train_data.isnull().sum()","eafe1118":"# Drop the features that don't have data for Covid-19 Deaths and MMWR Week.\ntrain_data.dropna(subset=['COVID-19 Deaths','MMWR Week'], inplace=True)\n\n# Fill in missing Month with MMWR Week \/ 4 to get approx Month.\ntrain_data['Month'] = train_data[\"Month\"].fillna(train_data['MMWR Week'] \/ 4)\n\n# Total deaths must be >= Covid deaths, so full those values as well.\ntrain_data['Total Deaths'] = train_data[\"Total Deaths\"].fillna(train_data['COVID-19 Deaths'])\n","61aa2f52":"train_data.describe()","e1251dc4":"train_data.isnull().sum()","1310b51b":"train_data.info()","bb853b45":"sns.barplot(y='Age Group', x='COVID-19 Deaths', data=train_data, orient=\"h\")","4c7f3f1e":"from sklearn.model_selection import TimeSeriesSplit\nfrom sklearn.linear_model import LinearRegression\n\ny = train_data[\"COVID-19 Deaths\"]\nfeatures = [\"id\",\"Age Group\",\"MMWR Week\",\"Month\",\"Year\"]\nX = pd.get_dummies(train_data[features])\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,random_state=42)\n\nlin_reg = LinearRegression()\nlin_reg.fit(X_train, y_train)\nlrg_y_pred = lin_reg.predict(X_test)\nprint(lin_reg.score(X_test, y_test))","0eb13213":"from sklearn.tree import DecisionTreeClassifier\n\ny = train_data[\"COVID-19 Deaths\"]\nfeatures = [\"id\",\"Age Group\",\"MMWR Week\"]\nX = pd.get_dummies(train_data[features])\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,random_state=42)\n\nsum_scores = 0\ntotal = 0\nbest_param = 0\nbest_score = 0\nfor i in range(2, 20):\n    decision_tree = DecisionTreeClassifier(random_state=0, max_depth=i)\n    decision_tree = decision_tree.fit(X_train, y_train)\n    tree_y_pred = decision_tree.predict(X_test)\n    score = decision_tree.score(X_test, y_test)\n    print(i)\n    print(score)\n    \n    sum_scores += score\n    total += 1\n    if score > best_score:\n        best_score = score\n        best_param = i\n    \nprint(\"Average score: \" + str(sum_scores \/ total))\nprint(\"Best score: \" + str(best_score))\nprint(\"Best param: \" + str(best_param))","52b81aca":"# from sklearn.linear_model import Ridge\n\n# y = train_data[\"COVID-19 Deaths\"]\n# features = [\"id\",\"Age Group\",\"MMWR Week\"]\n# X = pd.get_dummies(train_data[features]\n                   \n\n# ridge_model=Ridge(alpha=1.0)\n# ridge_model.fit(X, y)\n# print(ridge_model.score)","4da80947":"# from sklearn.model_selection import TimeSeriesSplit\n\n# y = train_data[\"COVID-19 Deaths\"]\n# features = [\"id\",\"Age Group\",\"MMWR Week\"]\n# X = pd.get_dummies(train_data[features])\n\n# X_train = X[:int(X.shape[0]*0.7)]\n# X_test = X[int(X.shape[0]*0.7):]\n# y_train = y[:int(X.shape[0]*0.7)]\n# y_test = y[int(X.shape[0]*0.7):]\n\n# tscv = TimeSeriesSplit(n_splits=int((len(y)-3)\/3))\n\n# for train_index, test_index in tscv.split(X):\n#      #To get the indices \n#      X_train1, X_test1 = X_train[train_index], X_train[test_index]\n#      y_train1, y_test1 = y_train[train_index], y_train[test_index]\n","33b36bc9":"from sklearn.tree import DecisionTreeClassifier\n\ny = train_data[\"COVID-19 Deaths\"]\nfeatures = [\"id\",\"Age Group\",\"MMWR Week\"]\nX_test = pd.get_dummies(test_data[features])\n\n\n\ndecision_tree = DecisionTreeClassifier(random_state=111, max_depth=14)\ndecision_tree = decision_tree.fit(X, y)\ntree_y_pred = decision_tree.predict(X_test)\n\noutput = pd.DataFrame({'id': test_data.id, 'COVID-19 Deaths': tree_y_pred})\noutput.to_csv('submission14.csv', index=False)\nprint(\"Your submission was successfully saved!\")","b847e0c9":"# Exploratory Data Analysis","a4b7f9e5":"# Linear Model","7a30cf94":"# Load Data","28db8f92":"# Decision Tree","81a69e16":"# Model Choice"}}