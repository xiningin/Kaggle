{"cell_type":{"c74e0842":"code","e427a5bd":"code","3a40461d":"code","1ce50ee3":"code","ee8d216f":"code","13099bfc":"code","af73700e":"code","52545625":"code","d3abcc6b":"code","2f58a93c":"code","be74dcd2":"code","a23d8d87":"code","d78793f6":"code","a2643ab7":"code","66d30312":"code","78a824f0":"code","2caa37d1":"code","d25cb986":"code","ac11aaf4":"code","c0638e05":"code","fbc6e040":"code","1943d855":"code","97fd1c7d":"code","292ab09b":"code","1588ea33":"code","aa1a21d5":"code","bf7e41f6":"code","bf9d742e":"code","60167af2":"code","5a0f8ad6":"code","cd52d124":"code","e1c6cb48":"code","394b6a58":"code","aecbc0ff":"code","093fdb0f":"code","f84d364b":"code","034a6fd5":"code","fa61b5af":"code","bec5a392":"code","060453ca":"code","e389c2bc":"code","34a155ab":"code","6a90c8c2":"code","fbe30129":"code","01d3e893":"code","1727d9c8":"code","6cffecf9":"code","98f97b8b":"code","3e3b3371":"code","6c2123ad":"markdown","f3473ce8":"markdown","869b7637":"markdown","77995434":"markdown","893cb208":"markdown","ca9fadfc":"markdown","edc6f6ce":"markdown","a52a443b":"markdown","033df115":"markdown","49c05565":"markdown","c7f46e6b":"markdown","a6efd6b2":"markdown","995e6d00":"markdown","25e5baf9":"markdown","52cd46c8":"markdown","8b8587ee":"markdown"},"source":{"c74e0842":"# importing packages\nimport numpy as np # arrays\nimport pandas as pd # data frame & structure\nimport matplotlib.pyplot as plt# data visualization\n%matplotlib inline\n# import datetime as dt # date time\nimport datetime as dt\nimport os\nimport glob\nimport seaborn as sns","e427a5bd":"#read all the input csv files\nq1=pd.read_csv(\"..\/input\/case-studyhow-does-a-bikeshare-navigate-success\/Divvy_Trips_2018_Q1.csv\")\nq2=pd.read_csv(\"..\/input\/case-studyhow-does-a-bikeshare-navigate-success\/Divvy_Trips_2018_Q2.csv\")\nq3=pd.read_csv(\"..\/input\/case-studyhow-does-a-bikeshare-navigate-success\/Divvy_Trips_2018_Q3.csv\")\nq4=pd.read_csv(\"..\/input\/case-studyhow-does-a-bikeshare-navigate-success\/Divvy_Trips_2018_Q4.csv\")","3a40461d":"#summary\nq1.info()","1ce50ee3":"#summary\nq2.info()","ee8d216f":"#summary\nq3.info()","13099bfc":"#summary\nq4.info()","af73700e":"#columns \nq1.columns","52545625":"# Before renaming the columns\nprint(\"before Renaming : \\n\\n\",q1.columns)\n\n#rename the columns \nq1.columns = ['trip_id', 'start_time', 'end_time', 'bikeid', 'tripduration',\n       'from_station_id', 'from_station_name', 'to_station_id',\n       'to_station_name', 'usertype', 'gender', 'birthyear']\n  \n# After renaming the columns\nprint(\"\\n after Renaming :\\n\\n \",q1.columns)","d3abcc6b":"#data\nq1","2f58a93c":"#combining 4 csv files into one file\nresult=pd.concat([q1,q2,q3,q4])\n# c = pd.concat([a,b])","be74dcd2":"#data\nresult","a23d8d87":"#information of the data frame\nresult.info()","d78793f6":"#changing the data type object to datetime64[ns]\n\nresult['start_time']= pd.to_datetime(result['start_time'])\nresult['end_time']=pd.to_datetime(result['end_time'])","a2643ab7":"#information\nresult.info()","66d30312":"# obtain the df of missing data points per column\nmissing_values=result.isnull().sum()\n# look at the df of missing points in all columns\nmissing_values[:]","78a824f0":"#starting 10 rows\nresult.head(10)","2caa37d1":"#finding null for customer user \nresult[result['usertype']=='Customer'].count()","d25cb986":"#finding null for subscriber user \nresult[result['usertype']=='Subscriber'].count()","ac11aaf4":"duplicate = result[result.duplicated()]\n# Print the resultant Dataframe  \nprint(\"Duplicate Rows :\",duplicate)","c0638e05":"#adding new column ride_length by subtracting end_time with start_time\nresult['ride_length'] = (result['end_time'] - result['start_time'])\n# analysis['ride_length']=analysis['ride_length']\/np.timedelta64(1,'s')","fbc6e040":"#assign the new weekday column and convert values based on the start_time column.\nresult['weekday'] = result['start_time'].dt.day_name()","1943d855":"#assign the new monthly column and convert values based on the start_time column.\nresult['month'] = result['start_time'].dt.month_name()","97fd1c7d":"#assign the new age column and convert values based on the birthyear.\nyear = 2018\nresult['age'] = year - result['birthyear']","292ab09b":"#removing complete  rows based on null values in age and gender\ndf1 = result.dropna(subset=['age','gender'])","1588ea33":"df1=df1.drop(['start_time', 'end_time', 'bikeid', 'tripduration'], axis = 1)","aa1a21d5":"df1.count()","bf7e41f6":"#analyzing the only subscriber usertype\nsubscriber=df1[df1.usertype=='Subscriber']\nsubscriber.describe()","bf9d742e":"# all the values of weekday column\nsubscriber.weekday.unique()","60167af2":"# all the values of month column\nsubscriber.month.unique()","5a0f8ad6":"# all the values of age column\nsubscriber.age.unique()","cd52d124":"#subscriber minimum age \nsubscriber.groupby('gender').age.min()","e1c6cb48":"#subscriber maximum age \nsubscriber.groupby('gender').age.max()","394b6a58":"#highest subscribers count based on age\nsubscriber.groupby('age').count().gender.idxmin()","aecbc0ff":"#highest subscribers count based on age\nsubscriber.groupby('age').count().gender.idxmax()","093fdb0f":"#highest subscribers count based on month\nsubscriber.groupby('month').count().gender.idxmax()","f84d364b":"#lowest subscribers count based on month\nsubscriber.groupby('month').count().gender.idxmin()","034a6fd5":"#specific values\naug=(subscriber.month==\"August\").sum()\naug","fa61b5af":"#specific values\nfeb=(subscriber.month=='February').sum()\nfeb","bec5a392":"subscriber['from_station_id'].value_counts().nlargest()","060453ca":"subscriber['from_station_id'].value_counts().nsmallest()","e389c2bc":"#getting the smallest number of rides from station name\nsubscriber[subscriber['from_station_id']==648].iloc[0]","34a155ab":" #the largest number of rides from station name\nsubscriber[subscriber['from_station_id']==192].iloc[1]","6a90c8c2":"#counting the values as per usertype \ncounts = df1['usertype'].value_counts(sort=False)","fbe30129":"#plotting pie\ncolors = ['#191970', '#00FF80' ]\ncounts.plot(kind='pie', fontsize=25, colors=colors,autopct='%1.2f%%',textprops={'color':\"w\"})\n\n#adding annotations and visuals\nplt.rcParams[\"figure.figsize\"] = (10,10)\nplt.axis('equal')\nplt.xlabel('Total percentage of user-type',fontsize=15)\nplt.ylabel('usertype',fontsize=15)\nplt.legend(labels=counts.index, loc=2,fontsize=15)\nplt.show()\n","01d3e893":"#plotting bar\nax =subscriber.groupby(['gender','age'])['age'].count().unstack(0).plot.bar(title=\"gender and age overview\",color = ['#ff69b4','#00ffff'],figsize=(16,8))\n_ = ax.set_xlabel('age')\n_ = ax.set_ylabel('count')\nax=ax.tick_params(axis='x', labelsize=9)","1727d9c8":"#for data visualizations\nfrom bokeh.plotting import figure, output_file, show \nfrom bokeh.palettes import Magma, Inferno, Plasma, Viridis, Cividis\nfrom bokeh.palettes import Greys256, Inferno256, Magma256, Plasma256","6cffecf9":"#plotting bar\ncv=subscriber.month.value_counts().loc[['January', 'February', 'March', 'April', 'May', 'June', 'July',\n       'August', 'September', 'October', 'November', 'December']].plot.bar(title=\"monthly subscribers enrolled\",color =Viridis[11],figsize=(14,6))\n_ = cv.set_xlabel('month')\n_ = cv.set_ylabel('count')\ncv=cv.tick_params(axis='x', labelsize=15)","98f97b8b":"#plotting bar\nbv=subscriber.weekday.value_counts().loc[['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday','Friday','Saturday']].plot.bar(title=\"week day subscribers enrolled\",color =Plasma[11],figsize=(14,6))\n_ = bv.set_xlabel('weekday')\n_ = bv.set_ylabel('count')\nbv=bv.tick_params(axis='x', labelsize=15)","3e3b3371":"plt.figure(figsize=(15,8))\nax = sns.countplot(data=subscriber, hue='gender', hue_order=['Male','Female'],\n                   x='weekday', order=['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday','Friday','Saturday'],\n                   palette=['#00ffff','#ff69b4'])\n\n#getting the percentages on bar plot\nfor bars in ax.containers:\n    if bars.get_label() == 'Male':\n        group_total = len(subscriber.gender=='Male')\n    else:\n        group_total = len(subscriber.gender=='Female')\n    for p in bars.patches:\n        # to get percentage of each indiviual bars \n        percentage = f'{100 * p.get_height() \/ group_total:.1f}%\\n'\n        x = p.get_x() + p.get_width() \/ 2\n        y = p.get_height()\n        ax.annotate(percentage, (x, y), ha='center', va='center')\nplt.legend(bbox_to_anchor=(1.05,1), loc=2, borderaxespad=0.,fontsize=15)\nplt.tight_layout()\nplt.xlabel(\"weekday\", fontsize = 15)\nplt.ylabel(\"no of subscribers\", fontsize = 15)\nplt.show()\n","6c2123ad":" * ### ride duration","f3473ce8":"#  *visualizations*","869b7637":"* ### month","77995434":"# INTRO","893cb208":"# PREPARE","ca9fadfc":"### monthly sales","edc6f6ce":"This case study is the Capstone project of the **Google Data Analytics professional certification**. \n\n* Title: **Cyclistic bike-share analysis case study**\n\n* Author: Phaneendra Madduri\n\n* Date: 26 January 2022\n\n","a52a443b":"### weekday sales","033df115":"## subscriber","49c05565":"### weekday & age","c7f46e6b":"# PROCESS","a6efd6b2":"# ANALYZE","995e6d00":"* ### weekday","25e5baf9":"* **The q1 dataset contains the same number of columns but different names.**","52cd46c8":"### age & gender sales","8b8587ee":"* ### age"}}