{"cell_type":{"6fde22d3":"code","3937a809":"code","adce9cb5":"code","903ef542":"code","9ba08356":"code","47461a4f":"code","60266294":"code","f8296d58":"code","ffa5172c":"code","028ccf05":"code","327fa769":"code","7f32a96d":"code","95fbd349":"code","e16dd9e0":"code","22c3d7bc":"code","887e01f0":"code","3c69254b":"code","027f614f":"code","0a94595c":"code","de79a076":"code","6e33371d":"markdown","874b90ce":"markdown","d2570f20":"markdown","82ec7e12":"markdown","12949ad9":"markdown","21f9e2c3":"markdown","85c556e5":"markdown","e454e812":"markdown","6b3a2c43":"markdown","2bd173de":"markdown","577e5c54":"markdown","3d21e5b6":"markdown","79ccd9f0":"markdown","a64c0561":"markdown","9f0cfa24":"markdown","b839de5a":"markdown","2440fed0":"markdown","eaf563bb":"markdown","69360526":"markdown","872b9cbf":"markdown","c13daae6":"markdown","60848489":"markdown","436897d2":"markdown","8ce94da7":"markdown","0e53188d":"markdown","2f9661cf":"markdown","e349e0b3":"markdown"},"source":{"6fde22d3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom zipfile import ZipFile\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        path=os.path.join(dirname, filename)\n        if 'train' in path:\n            __training_path=path\n        elif 'test' in path:\n            __test_path=path","3937a809":"#loaded files\nprint(f'Training path:{__training_path}\\nTest path:{__test_path}')","adce9cb5":"# Kaggle Environment Prepration\n#update kaggle env\nimport sys\n#you may update the environment that allow you to run the whole code\n!{sys.executable} -m pip install --upgrade scikit-learn==\"0.24.2\"","903ef542":"#record this information if you need to run the Kernel internally\nimport sklearn; sklearn.show_versions()","9ba08356":"def proc_multifiles_zip(path, condition, delimiter=','):\n    zip_file = ZipFile(path)\n    for text_file in zip_file.infolist():\n        if condition in text_file.filename:\n            return pd.read_csv(zip_file.open(text_file.filename), delimiter=delimiter)","47461a4f":"def __load__data(__training_path, __test_path, concat=False):\n\t\"\"\"load data as input dataset\n\tparams: __training_path: the training path of input dataset\n\tparams: __test_path: the path of test dataset\n\tparams: if it is True, then it will concatinate the training and test dataset as output\n\treturns: generate final loaded dataset as dataset, input and test\n\t\"\"\"\n\t# LOAD DATA\n\timport pandas as pd\n\t__train_dataset = pd.read_csv(__training_path, delimiter=',')\n\t__test_dataset = pd.read_csv(__test_path, delimiter=',')\n\treturn __train_dataset, __test_dataset\n__train_dataset, __test_dataset = __load__data(__training_path, __test_path, concat=True)\n__train_dataset.head()","60266294":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n\nfig, axes = plt.subplots(5, 4, figsize=(16, 20))\naxes = axes.ravel()\nfor index,col in enumerate(['LotFrontage', 'LotArea', 'YearBuilt', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'GrLivArea', 'GarageYrBlt', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', 'ScreenPorch']):\n\tsns.histplot(__train_dataset[col],ax=axes[index])\n\taxes[index].tick_params(axis=\"x\", rotation=90)\n\taxes[index].set_title(\"Distribution of %s\" %col )\nfor index in range(-3,0):\n\taxes[index].set_visible(False)\nfig.tight_layout();\n\n\nfig, axes = plt.subplots(15, 4, figsize=(16, 60))\naxes = axes.ravel()\nfor index,col in enumerate(['MSSubClass', 'MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'OverallQual', 'OverallCond', 'YearRemodAdd', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'LowQualFinSF', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual', 'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageCars', 'GarageQual', 'GarageCond', 'PavedDrive', '3SsnPorch', 'PoolArea', 'Fence', 'MiscVal', 'MoSold', 'YrSold', 'SaleType', 'SaleCondition']):\n\tsns.countplot(x = __train_dataset[col],ax=axes[index])\n\taxes[index].tick_params(axis=\"x\", rotation=90)\n\taxes[index].set_title(\"Distribution of %s\" %col )\nfig.tight_layout();\n\n\nplt.figure(figsize=(5,5))\nsns.histplot(x = __train_dataset[\"SalePrice\"])\nplt.xticks(rotation=90)\nplt.title(\"Distribution Plots for Target Column\")\nfig.tight_layout();","f8296d58":"# STORE SUBMISSION RELEVANT COLUMNS\n__test_dataset_submission_columns = __test_dataset['Id']","ffa5172c":"# DISCARD IRRELEVANT COLUMNS\n__train_dataset.drop(['Id'], axis=1, inplace=True)\n__test_dataset.drop(['Id'], axis=1, inplace=True)","028ccf05":"# PREPROCESSING-1\nfrom sklearn.impute import SimpleImputer\nimport numpy as np\n_NUMERIC_COLS_WITH_MISSING_VALUES = ['FullBath', 'KitchenAbvGr', 'BsmtUnfSF', 'MoSold', 'BsmtFinSF2', 'MasVnrArea', 'OpenPorchSF', 'WoodDeckSF', '1stFlrSF', 'ScreenPorch', 'TotRmsAbvGrd', 'GarageCars', '2ndFlrSF', 'BsmtFullBath', 'TotalBsmtSF', 'BsmtHalfBath', 'EnclosedPorch', 'OverallQual', 'PoolArea', 'OverallCond', 'GrLivArea', 'LotArea', 'HalfBath', 'YearRemodAdd', 'GarageArea', 'YrSold', 'LotFrontage', '3SsnPorch', 'MiscVal', 'BedroomAbvGr', 'Fireplaces', 'YearBuilt', 'BsmtFinSF1', 'LowQualFinSF', 'GarageYrBlt', 'MSSubClass']\nfor _col in _NUMERIC_COLS_WITH_MISSING_VALUES:\n    __simple_imputer = SimpleImputer(missing_values=np.nan, strategy='mean')\n    __train_dataset[_col] = __simple_imputer.fit_transform(__train_dataset[_col].values.reshape(-1,1))[:,0]\n    if _col in __test_dataset:\n        __test_dataset[_col] = __simple_imputer.transform(__test_dataset[_col].astype(__train_dataset[_col].dtypes).values.reshape(-1,1))[:,0]","327fa769":"# PREPROCESSING-2\nfrom sklearn.impute import SimpleImputer\nimport numpy as np\n_STRING_COLS_WITH_MISSING_VALUES = ['Exterior2nd', 'Exterior1st', 'SaleType', 'HeatingQC', 'BsmtFinType1', 'BsmtQual', 'PoolQC', 'GarageCond', 'BsmtFinType2', 'Foundation', 'FireplaceQu', 'KitchenQual', 'LandSlope', 'MiscFeature', 'Alley', 'LotShape', 'SaleCondition', 'Electrical', 'Condition1', 'PavedDrive', 'LandContour', 'ExterCond', 'BsmtExposure', 'MSZoning', 'BsmtCond', 'GarageQual', 'BldgType', 'GarageFinish', 'Condition2', 'GarageType', 'Fence', 'RoofStyle', 'ExterQual', 'Heating', 'Street', 'Neighborhood', 'Utilities', 'LotConfig', 'CentralAir', 'HouseStyle', 'Functional', 'MasVnrType', 'RoofMatl']\nfor _col in _STRING_COLS_WITH_MISSING_VALUES:\n    __simple_imputer = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\n    __train_dataset[_col] = __simple_imputer.fit_transform(__train_dataset[_col].values.reshape(-1,1))[:,0]\n    if _col in __test_dataset:\n        __test_dataset[_col] = __simple_imputer.transform(__test_dataset[_col].astype(__train_dataset[_col].dtypes).values.reshape(-1,1))[:,0]","7f32a96d":"# PREPROCESSING-3\nfrom sklearn.preprocessing import OrdinalEncoder\n_CATEGORICAL_COLS = ['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature', 'SaleType', 'SaleCondition']\n_ohe = OrdinalEncoder(handle_unknown=\"use_encoded_value\", unknown_value=-1)\n__train_dataset[_CATEGORICAL_COLS] = pd.DataFrame(_ohe.fit_transform(__train_dataset[_CATEGORICAL_COLS]), columns=_CATEGORICAL_COLS)\n__test_dataset[_CATEGORICAL_COLS] = pd.DataFrame(_ohe.transform(__test_dataset[_CATEGORICAL_COLS]), columns=_CATEGORICAL_COLS)","95fbd349":"# PREPROCESSING-4\nimport numpy as np\n_NUMERIC_COLS_TO_SCALE = ['MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold', 'SalePrice']\nfor _col in _NUMERIC_COLS_TO_SCALE:\n    __train_dataset[_col] = np.log1p(__train_dataset[_col])\n    if _col in __test_dataset:\n        __test_dataset[_col] = np.log1p(__test_dataset[_col])","e16dd9e0":"_COLS_FOR_HEATMAP = ['LotFrontage', 'LotArea', 'YearBuilt', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'GrLivArea', 'GarageYrBlt', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', 'ScreenPorch', 'MSSubClass', 'MSZoning', 'Street', 'SalePrice']\nplt.figure(figsize=(20,20))\nplt.title(\"Pearson Correlation HeatMap of Features\")\nsns.heatmap(__train_dataset[_COLS_FOR_HEATMAP].corr(),annot=True)","22c3d7bc":"# DETACH TARGET\n__feature_train = __train_dataset.drop(['SalePrice'], axis=1)\n__target_train =__train_dataset['SalePrice']\n__feature_test = __test_dataset","887e01f0":"# MODEL\nimport numpy as np\nfrom catboost import CatBoostRegressor\n__model = CatBoostRegressor()\n__model.fit(__feature_train, __target_train) \n__y_pred = __model.predict(__feature_test)","3c69254b":"# INVERSE TARGET\nimport numpy as np\nif '__target_test' in locals():\n    __target_test = np.expm1(__target_test)\n__y_pred = np.expm1(__y_pred)","027f614f":"import shap\nexplainer = shap.Explainer(__model)\nshap_values = explainer(__feature_train)\nshap.plots.bar(shap_values)\nshap.summary_plot(shap_values, __feature_train)","0a94595c":"# SUBMISSION\nsubmission = pd.DataFrame(columns=['Id'], data=__test_dataset_submission_columns)\nsubmission = pd.concat([submission, pd.DataFrame(__y_pred, columns=['SalePrice'])], axis=1)\nsubmission.head()","de79a076":"# save submission file\nsubmission.to_csv(\"kaggle_submission.csv\", index=False)","6e33371d":"### Visualization for feature heatmap","874b90ce":"## Input Dataset","d2570f20":"## Remove Missing Values in Numerical Columns\n\nIn the given input dataset there are <b>43 columns <\/b> with  missing data as follows:<b>Exterior2nd, Exterior1st, SaleType, HeatingQC, BsmtFinType1, BsmtQual, PoolQC, GarageCond, BsmtFinType2, Foundation, FireplaceQu, KitchenQual, LandSlope, MiscFeature, Alley, LotShape, SaleCondition, Electrical, Condition1, PavedDrive, LandContour, ExterCond, BsmtExposure, MSZoning, BsmtCond, GarageQual, BldgType, GarageFinish, Condition2, GarageType, Fence, RoofStyle, ExterQual, Heating, Street, Neighborhood, Utilities, LotConfig, CentralAir, HouseStyle, Functional, MasVnrType, RoofMatl<\/b>\n\nThe following code removes the missing values from those columns. We use average value (median) of each column to replace the null values.","82ec7e12":"Let's review the dataset description:\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th><\/th>\n      <th>count<\/th>\n      <th>mean<\/th>\n      <th>std<\/th>\n      <th>min<\/th>\n      <th>25%<\/th>\n      <th>50%<\/th>\n      <th>75%<\/th>\n      <th>max<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <th>Id<\/th>\n      <td>1460.0<\/td>\n      <td>730.500000<\/td>\n      <td>421.610009<\/td>\n      <td>1.0<\/td>\n      <td>365.75<\/td>\n      <td>730.5<\/td>\n      <td>1095.25<\/td>\n      <td>1460.0<\/td>\n    <\/tr>\n    <tr>\n      <th>MSSubClass<\/th>\n      <td>1460.0<\/td>\n      <td>56.897260<\/td>\n      <td>42.300571<\/td>\n      <td>20.0<\/td>\n      <td>20.00<\/td>\n      <td>50.0<\/td>\n      <td>70.00<\/td>\n      <td>190.0<\/td>\n    <\/tr>\n    <tr>\n      <th>LotFrontage<\/th>\n      <td>1201.0<\/td>\n      <td>70.049958<\/td>\n      <td>24.284752<\/td>\n      <td>21.0<\/td>\n      <td>59.00<\/td>\n      <td>69.0<\/td>\n      <td>80.00<\/td>\n      <td>313.0<\/td>\n    <\/tr>\n    <tr>\n      <th>LotArea<\/th>\n      <td>1460.0<\/td>\n      <td>10516.828082<\/td>\n      <td>9981.264932<\/td>\n      <td>1300.0<\/td>\n      <td>7553.50<\/td>\n      <td>9478.5<\/td>\n      <td>11601.50<\/td>\n      <td>215245.0<\/td>\n    <\/tr>\n    <tr>\n      <th>OverallQual<\/th>\n      <td>1460.0<\/td>\n      <td>6.099315<\/td>\n      <td>1.382997<\/td>\n      <td>1.0<\/td>\n      <td>5.00<\/td>\n      <td>6.0<\/td>\n      <td>7.00<\/td>\n      <td>10.0<\/td>\n    <\/tr>\n    <tr>\n      <th>OverallCond<\/th>\n      <td>1460.0<\/td>\n      <td>5.575342<\/td>\n      <td>1.112799<\/td>\n      <td>1.0<\/td>\n      <td>5.00<\/td>\n      <td>5.0<\/td>\n      <td>6.00<\/td>\n      <td>9.0<\/td>\n    <\/tr>\n    <tr>\n      <th>YearBuilt<\/th>\n      <td>1460.0<\/td>\n      <td>1971.267808<\/td>\n      <td>30.202904<\/td>\n      <td>1872.0<\/td>\n      <td>1954.00<\/td>\n      <td>1973.0<\/td>\n      <td>2000.00<\/td>\n      <td>2010.0<\/td>\n    <\/tr>\n    <tr>\n      <th>YearRemodAdd<\/th>\n      <td>1460.0<\/td>\n      <td>1984.865753<\/td>\n      <td>20.645407<\/td>\n      <td>1950.0<\/td>\n      <td>1967.00<\/td>\n      <td>1994.0<\/td>\n      <td>2004.00<\/td>\n      <td>2010.0<\/td>\n    <\/tr>\n    <tr>\n      <th>MasVnrArea<\/th>\n      <td>1452.0<\/td>\n      <td>103.685262<\/td>\n      <td>181.066207<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>0.0<\/td>\n      <td>166.00<\/td>\n      <td>1600.0<\/td>\n    <\/tr>\n    <tr>\n      <th>BsmtFinSF1<\/th>\n      <td>1460.0<\/td>\n      <td>443.639726<\/td>\n      <td>456.098091<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>383.5<\/td>\n      <td>712.25<\/td>\n      <td>5644.0<\/td>\n    <\/tr>\n    <tr>\n      <th>BsmtFinSF2<\/th>\n      <td>1460.0<\/td>\n      <td>46.549315<\/td>\n      <td>161.319273<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>1474.0<\/td>\n    <\/tr>\n    <tr>\n      <th>BsmtUnfSF<\/th>\n      <td>1460.0<\/td>\n      <td>567.240411<\/td>\n      <td>441.866955<\/td>\n      <td>0.0<\/td>\n      <td>223.00<\/td>\n      <td>477.5<\/td>\n      <td>808.00<\/td>\n      <td>2336.0<\/td>\n    <\/tr>\n    <tr>\n      <th>TotalBsmtSF<\/th>\n      <td>1460.0<\/td>\n      <td>1057.429452<\/td>\n      <td>438.705324<\/td>\n      <td>0.0<\/td>\n      <td>795.75<\/td>\n      <td>991.5<\/td>\n      <td>1298.25<\/td>\n      <td>6110.0<\/td>\n    <\/tr>\n    <tr>\n      <th>1stFlrSF<\/th>\n      <td>1460.0<\/td>\n      <td>1162.626712<\/td>\n      <td>386.587738<\/td>\n      <td>334.0<\/td>\n      <td>882.00<\/td>\n      <td>1087.0<\/td>\n      <td>1391.25<\/td>\n      <td>4692.0<\/td>\n    <\/tr>\n    <tr>\n      <th>2ndFlrSF<\/th>\n      <td>1460.0<\/td>\n      <td>346.992466<\/td>\n      <td>436.528436<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>0.0<\/td>\n      <td>728.00<\/td>\n      <td>2065.0<\/td>\n    <\/tr>\n    <tr>\n      <th>LowQualFinSF<\/th>\n      <td>1460.0<\/td>\n      <td>5.844521<\/td>\n      <td>48.623081<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>572.0<\/td>\n    <\/tr>\n    <tr>\n      <th>GrLivArea<\/th>\n      <td>1460.0<\/td>\n      <td>1515.463699<\/td>\n      <td>525.480383<\/td>\n      <td>334.0<\/td>\n      <td>1129.50<\/td>\n      <td>1464.0<\/td>\n      <td>1776.75<\/td>\n      <td>5642.0<\/td>\n    <\/tr>\n    <tr>\n      <th>BsmtFullBath<\/th>\n      <td>1460.0<\/td>\n      <td>0.425342<\/td>\n      <td>0.518911<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>0.0<\/td>\n      <td>1.00<\/td>\n      <td>3.0<\/td>\n    <\/tr>\n    <tr>\n      <th>BsmtHalfBath<\/th>\n      <td>1460.0<\/td>\n      <td>0.057534<\/td>\n      <td>0.238753<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>2.0<\/td>\n    <\/tr>\n    <tr>\n      <th>FullBath<\/th>\n      <td>1460.0<\/td>\n      <td>1.565068<\/td>\n      <td>0.550916<\/td>\n      <td>0.0<\/td>\n      <td>1.00<\/td>\n      <td>2.0<\/td>\n      <td>2.00<\/td>\n      <td>3.0<\/td>\n    <\/tr>\n    <tr>\n      <th>HalfBath<\/th>\n      <td>1460.0<\/td>\n      <td>0.382877<\/td>\n      <td>0.502885<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>0.0<\/td>\n      <td>1.00<\/td>\n      <td>2.0<\/td>\n    <\/tr>\n    <tr>\n      <th>BedroomAbvGr<\/th>\n      <td>1460.0<\/td>\n      <td>2.866438<\/td>\n      <td>0.815778<\/td>\n      <td>0.0<\/td>\n      <td>2.00<\/td>\n      <td>3.0<\/td>\n      <td>3.00<\/td>\n      <td>8.0<\/td>\n    <\/tr>\n    <tr>\n      <th>KitchenAbvGr<\/th>\n      <td>1460.0<\/td>\n      <td>1.046575<\/td>\n      <td>0.220338<\/td>\n      <td>0.0<\/td>\n      <td>1.00<\/td>\n      <td>1.0<\/td>\n      <td>1.00<\/td>\n      <td>3.0<\/td>\n    <\/tr>\n    <tr>\n      <th>TotRmsAbvGrd<\/th>\n      <td>1460.0<\/td>\n      <td>6.517808<\/td>\n      <td>1.625393<\/td>\n      <td>2.0<\/td>\n      <td>5.00<\/td>\n      <td>6.0<\/td>\n      <td>7.00<\/td>\n      <td>14.0<\/td>\n    <\/tr>\n    <tr>\n      <th>Fireplaces<\/th>\n      <td>1460.0<\/td>\n      <td>0.613014<\/td>\n      <td>0.644666<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>1.0<\/td>\n      <td>1.00<\/td>\n      <td>3.0<\/td>\n    <\/tr>\n    <tr>\n      <th>GarageYrBlt<\/th>\n      <td>1379.0<\/td>\n      <td>1978.506164<\/td>\n      <td>24.689725<\/td>\n      <td>1900.0<\/td>\n      <td>1961.00<\/td>\n      <td>1980.0<\/td>\n      <td>2002.00<\/td>\n      <td>2010.0<\/td>\n    <\/tr>\n    <tr>\n      <th>GarageCars<\/th>\n      <td>1460.0<\/td>\n      <td>1.767123<\/td>\n      <td>0.747315<\/td>\n      <td>0.0<\/td>\n      <td>1.00<\/td>\n      <td>2.0<\/td>\n      <td>2.00<\/td>\n      <td>4.0<\/td>\n    <\/tr>\n    <tr>\n      <th>GarageArea<\/th>\n      <td>1460.0<\/td>\n      <td>472.980137<\/td>\n      <td>213.804841<\/td>\n      <td>0.0<\/td>\n      <td>334.50<\/td>\n      <td>480.0<\/td>\n      <td>576.00<\/td>\n      <td>1418.0<\/td>\n    <\/tr>\n    <tr>\n      <th>WoodDeckSF<\/th>\n      <td>1460.0<\/td>\n      <td>94.244521<\/td>\n      <td>125.338794<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>0.0<\/td>\n      <td>168.00<\/td>\n      <td>857.0<\/td>\n    <\/tr>\n    <tr>\n      <th>OpenPorchSF<\/th>\n      <td>1460.0<\/td>\n      <td>46.660274<\/td>\n      <td>66.256028<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>25.0<\/td>\n      <td>68.00<\/td>\n      <td>547.0<\/td>\n    <\/tr>\n    <tr>\n      <th>EnclosedPorch<\/th>\n      <td>1460.0<\/td>\n      <td>21.954110<\/td>\n      <td>61.119149<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>552.0<\/td>\n    <\/tr>\n    <tr>\n      <th>3SsnPorch<\/th>\n      <td>1460.0<\/td>\n      <td>3.409589<\/td>\n      <td>29.317331<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>508.0<\/td>\n    <\/tr>\n    <tr>\n      <th>ScreenPorch<\/th>\n      <td>1460.0<\/td>\n      <td>15.060959<\/td>\n      <td>55.757415<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>480.0<\/td>\n    <\/tr>\n    <tr>\n      <th>PoolArea<\/th>\n      <td>1460.0<\/td>\n      <td>2.758904<\/td>\n      <td>40.177307<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>738.0<\/td>\n    <\/tr>\n    <tr>\n      <th>MiscVal<\/th>\n      <td>1460.0<\/td>\n      <td>43.489041<\/td>\n      <td>496.123024<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>0.0<\/td>\n      <td>0.00<\/td>\n      <td>15500.0<\/td>\n    <\/tr>\n    <tr>\n      <th>MoSold<\/th>\n      <td>1460.0<\/td>\n      <td>6.321918<\/td>\n      <td>2.703626<\/td>\n      <td>1.0<\/td>\n      <td>5.00<\/td>\n      <td>6.0<\/td>\n      <td>8.00<\/td>\n      <td>12.0<\/td>\n    <\/tr>\n    <tr>\n      <th>YrSold<\/th>\n      <td>1460.0<\/td>\n      <td>2007.815753<\/td>\n      <td>1.328095<\/td>\n      <td>2006.0<\/td>\n      <td>2007.00<\/td>\n      <td>2008.0<\/td>\n      <td>2009.00<\/td>\n      <td>2010.0<\/td>\n    <\/tr>\n    <tr>\n      <th>SalePrice<\/th>\n      <td>1460.0<\/td>\n      <td>180921.195890<\/td>\n      <td>79442.502883<\/td>\n      <td>34900.0<\/td>\n      <td>129975.00<\/td>\n      <td>163000.0<\/td>\n      <td>214000.00<\/td>\n      <td>755000.0<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>","12949ad9":"<b> Is there any null value?<\/b> \nThe answer is <b>Yes<\/b>; let's review top 19 of those columns with the number of Null values.\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th><\/th>\n      <th>Column<\/th>\n      <th>#Null<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <th>0<\/th>\n      <td>PoolQC<\/td>\n      <td>1453<\/td>\n    <\/tr>\n    <tr>\n      <th>1<\/th>\n      <td>MiscFeature<\/td>\n      <td>1406<\/td>\n    <\/tr>\n    <tr>\n      <th>2<\/th>\n      <td>Alley<\/td>\n      <td>1369<\/td>\n    <\/tr>\n    <tr>\n      <th>3<\/th>\n      <td>Fence<\/td>\n      <td>1179<\/td>\n    <\/tr>\n    <tr>\n      <th>4<\/th>\n      <td>FireplaceQu<\/td>\n      <td>690<\/td>\n    <\/tr>\n    <tr>\n      <th>5<\/th>\n      <td>LotFrontage<\/td>\n      <td>259<\/td>\n    <\/tr>\n    <tr>\n      <th>6<\/th>\n      <td>GarageType<\/td>\n      <td>81<\/td>\n    <\/tr>\n    <tr>\n      <th>7<\/th>\n      <td>GarageYrBlt<\/td>\n      <td>81<\/td>\n    <\/tr>\n    <tr>\n      <th>8<\/th>\n      <td>GarageFinish<\/td>\n      <td>81<\/td>\n    <\/tr>\n    <tr>\n      <th>9<\/th>\n      <td>GarageQual<\/td>\n      <td>81<\/td>\n    <\/tr>\n    <tr>\n      <th>10<\/th>\n      <td>GarageCond<\/td>\n      <td>81<\/td>\n    <\/tr>\n    <tr>\n      <th>11<\/th>\n      <td>BsmtExposure<\/td>\n      <td>38<\/td>\n    <\/tr>\n    <tr>\n      <th>12<\/th>\n      <td>BsmtFinType2<\/td>\n      <td>38<\/td>\n    <\/tr>\n    <tr>\n      <th>13<\/th>\n      <td>BsmtFinType1<\/td>\n      <td>37<\/td>\n    <\/tr>\n    <tr>\n      <th>14<\/th>\n      <td>BsmtCond<\/td>\n      <td>37<\/td>\n    <\/tr>\n    <tr>\n      <th>15<\/th>\n      <td>BsmtQual<\/td>\n      <td>37<\/td>\n    <\/tr>\n    <tr>\n      <th>16<\/th>\n      <td>MasVnrArea<\/td>\n      <td>8<\/td>\n    <\/tr>\n    <tr>\n      <th>17<\/th>\n      <td>MasVnrType<\/td>\n      <td>8<\/td>\n    <\/tr>\n    <tr>\n      <th>18<\/th>\n      <td>Electrical<\/td>\n      <td>1<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n\nAs partial of the results shown above, there are total <b>19<\/b> columns with Null values.","21f9e2c3":"## CatBoost Regression\nWe will use *CatBoostRegressor* which is a fast, scalable, high performance gradient boosting on decision trees library. Used for ranking, classification, regression and other ML tasks.\nMore details about *CatBoostRegressor* can be found [here](https:\/\/catboost.ai\/docs\/installation\/python-installation-method-pip-install).","85c556e5":"In the given input dataset there are <b>36 columns<\/b> with  missing data as follows:<b>FullBath, KitchenAbvGr, BsmtUnfSF, MoSold, BsmtFinSF2, MasVnrArea, OpenPorchSF, WoodDeckSF, 1stFlrSF, ScreenPorch, TotRmsAbvGrd, GarageCars, 2ndFlrSF, BsmtFullBath, TotalBsmtSF, BsmtHalfBath, EnclosedPorch, OverallQual, PoolArea, OverallCond, GrLivArea, LotArea, HalfBath, YearRemodAdd, GarageArea, YrSold, LotFrontage, 3SsnPorch, MiscVal, BedroomAbvGr, Fireplaces, YearBuilt, BsmtFinSF1, LowQualFinSF, GarageYrBlt, MSSubClass<\/b>\nThe following code removes the missing values from those columns. We use an average value (median) of each column to replace the Null values.","e454e812":"# Exploratory Data Analysis (EDA)\n## General Structure\nHouse prices advanced regression techniques Dataset includes <b>81<\/b> columns and <b>1460<\/b> rows.\nThere are <b>3<\/b> different data types as follows: *int64, object, float64*.","6b3a2c43":"### Visualization for data distribution of columns","2bd173de":"## Numeric to Scale","577e5c54":"# Input Dataset","3d21e5b6":"In the given input dataset there are <b>37 columns <\/b> with numeric values as follows where we can convert those values to scale through [log1p](https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.log1p.html).","79ccd9f0":"# About Competition\nThis is a perfect competition for data science students who have completed an online course in machine learning and are looking to expand their skill set before trying a featured competition. You have some experience with R or Python and machine learning basics.\n Competition Description describes the competition in a new competition. Competition Description is based on a one-week period of competition. The winner of the competition will be announced at the end of the year.Competition file is available [here](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques).","a64c0561":"# Training and Prediction\nFirst, we will train a model based on pre-processed the training dataset.\nSecond, let's predict test values based on the trained model.","9f0cfa24":"Competition dataset located in \"\/kaggle\/input\"; This path defined by Kaggle to access the competition file. We will list two files from this path as input files.","b839de5a":"## Encoding Ordinal Categorical Features\nLet's transfer categorical features as an integer array.\nWe will use Ordinal Encoder as explained [here](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.OrdinalEncoder.html).\n\nIn the given input dataset there are <b>43<\/b> columns that can be transfered to integer and it includes:* MSZoning,Street,Alley,LotShape,LandContour,Utilities,LotConfig,LandSlope,Neighborhood,Condition1,Condition2,BldgType,HouseStyle,RoofStyle,RoofMatl,Exterior1st,Exterior2nd,MasVnrType,ExterQual,ExterCond,Foundation,BsmtQual,BsmtCond,BsmtExposure,BsmtFinType1,BsmtFinType2,Heating,HeatingQC,CentralAir,Electrical,KitchenQual,Functional,FireplaceQu,GarageType,GarageFinish,GarageQual,GarageCond,PavedDrive,PoolQC,Fence,MiscFeature,SaleType,SaleCondition *.","2440fed0":"<img src=\"https:\/\/strelka.com\/img\/90b94360c75eeefe\/istock-582282270.jpg\"\/>\n<center>Image Source: https:\/\/strelkamag.com\/en\/article\/house<\/center>","eaf563bb":"## Remove Missing Values in Categorical Columns","69360526":"# Load Competition Dataset","872b9cbf":"# Submission File\nWe have to maintain the target columns in \"submission.csv\" which will be submitted as our prediction results.","c13daae6":"### Target Column\nWe need to predict the target column.\nTherefore, we need to detach the target column in prediction.\nNote that if we don't drop the field, it will generate a model with high accuracy on training and worst accuracy on test (because the value in test dataset is Null).\nHere is the list of *target column*: <b>SalePrice<\/b>","60848489":"# Finding Intresting Datapoints\nLet's process each field by their histogram frequency and check if there is any intresting data point.\n\nThere are <b>54<\/b> number of intresting values in the following columns.\nThe below table shows each <b>Value<\/b> of each <b>Field<\/b>(column) with their total frequencies, <b>Lower<\/b> shows the lower frequency of normal distribution, <b>Upper<\/b> shows the upper bound frequency of normal distribution, and <b>Criteria<\/b> shows if the frequnecy passed <b>Upper bound<\/b> or <b>Lower bound<\/b>.\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th><\/th>\n      <th>Field<\/th>\n      <th>Value<\/th>\n      <th>Frequency<\/th>\n      <th>Lower<\/th>\n      <th>Upper<\/th>\n      <th>Criteria<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <th>0<\/th>\n      <td>MSSubClass<\/td>\n      <td>20<\/td>\n      <td>536<\/td>\n      <td>4.0084<\/td>\n      <td>535.6682<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>1<\/th>\n      <td>MSZoning<\/td>\n      <td>RL<\/td>\n      <td>1151<\/td>\n      <td>10.0024<\/td>\n      <td>1150.6268<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>2<\/th>\n      <td>LotFrontage<\/td>\n      <td>60.0<\/td>\n      <td>143<\/td>\n      <td>0.0110<\/td>\n      <td>142.1970<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>3<\/th>\n      <td>LotArea<\/td>\n      <td>7200<\/td>\n      <td>25<\/td>\n      <td>1.0000<\/td>\n      <td>24.8928<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>4<\/th>\n      <td>LandContour<\/td>\n      <td>Lvl<\/td>\n      <td>1311<\/td>\n      <td>36.0042<\/td>\n      <td>1310.6256<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>5<\/th>\n      <td>LotConfig<\/td>\n      <td>Inside<\/td>\n      <td>1052<\/td>\n      <td>4.0172<\/td>\n      <td>1051.6844<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>6<\/th>\n      <td>Neighborhood<\/td>\n      <td>NAmes<\/td>\n      <td>225<\/td>\n      <td>2.0168<\/td>\n      <td>224.8200<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>7<\/th>\n      <td>Condition1<\/td>\n      <td>Norm<\/td>\n      <td>1260<\/td>\n      <td>2.0024<\/td>\n      <td>1259.0568<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>8<\/th>\n      <td>Condition2<\/td>\n      <td>Norm<\/td>\n      <td>1445<\/td>\n      <td>1.0000<\/td>\n      <td>1443.9927<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>9<\/th>\n      <td>BldgType<\/td>\n      <td>1Fam<\/td>\n      <td>1220<\/td>\n      <td>31.0048<\/td>\n      <td>1219.5576<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>10<\/th>\n      <td>HouseStyle<\/td>\n      <td>1Story<\/td>\n      <td>726<\/td>\n      <td>8.0021<\/td>\n      <td>725.8033<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>11<\/th>\n      <td>OverallCond<\/td>\n      <td>5<\/td>\n      <td>821<\/td>\n      <td>1.0032<\/td>\n      <td>820.5448<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>12<\/th>\n      <td>YearBuilt<\/td>\n      <td>2006<\/td>\n      <td>67<\/td>\n      <td>1.0000<\/td>\n      <td>66.9667<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>13<\/th>\n      <td>YearRemodAdd<\/td>\n      <td>1950<\/td>\n      <td>178<\/td>\n      <td>4.0060<\/td>\n      <td>177.5140<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>14<\/th>\n      <td>RoofStyle<\/td>\n      <td>Gable<\/td>\n      <td>1141<\/td>\n      <td>2.0025<\/td>\n      <td>1140.5725<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>15<\/th>\n      <td>RoofMatl<\/td>\n      <td>CompShg<\/td>\n      <td>1434<\/td>\n      <td>1.0000<\/td>\n      <td>1433.0039<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>16<\/th>\n      <td>Exterior1st<\/td>\n      <td>VinylSd<\/td>\n      <td>515<\/td>\n      <td>1.0000<\/td>\n      <td>514.5898<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>17<\/th>\n      <td>Exterior2nd<\/td>\n      <td>VinylSd<\/td>\n      <td>504<\/td>\n      <td>1.0000<\/td>\n      <td>503.5650<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>18<\/th>\n      <td>MasVnrArea<\/td>\n      <td>0.0<\/td>\n      <td>861<\/td>\n      <td>0.0327<\/td>\n      <td>833.1069<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>19<\/th>\n      <td>ExterCond<\/td>\n      <td>TA<\/td>\n      <td>1282<\/td>\n      <td>1.0008<\/td>\n      <td>1281.5456<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>20<\/th>\n      <td>BsmtCond<\/td>\n      <td>TA<\/td>\n      <td>1311<\/td>\n      <td>2.0129<\/td>\n      <td>1310.6262<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>21<\/th>\n      <td>BsmtExposure<\/td>\n      <td>No<\/td>\n      <td>953<\/td>\n      <td>114.0060<\/td>\n      <td>952.7804<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>22<\/th>\n      <td>BsmtFinSF1<\/td>\n      <td>0<\/td>\n      <td>467<\/td>\n      <td>1.0000<\/td>\n      <td>438.0620<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>23<\/th>\n      <td>BsmtFinType2<\/td>\n      <td>Unf<\/td>\n      <td>1256<\/td>\n      <td>14.0025<\/td>\n      <td>1255.3990<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>24<\/th>\n      <td>BsmtFinSF2<\/td>\n      <td>0<\/td>\n      <td>1293<\/td>\n      <td>1.0000<\/td>\n      <td>1274.5816<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>25<\/th>\n      <td>BsmtUnfSF<\/td>\n      <td>0<\/td>\n      <td>118<\/td>\n      <td>1.0000<\/td>\n      <td>109.5089<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>26<\/th>\n      <td>TotalBsmtSF<\/td>\n      <td>0<\/td>\n      <td>37<\/td>\n      <td>1.0000<\/td>\n      <td>36.8560<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>27<\/th>\n      <td>Heating<\/td>\n      <td>GasA<\/td>\n      <td>1428<\/td>\n      <td>1.0005<\/td>\n      <td>1427.2950<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>28<\/th>\n      <td>Electrical<\/td>\n      <td>SBrkr<\/td>\n      <td>1334<\/td>\n      <td>1.0008<\/td>\n      <td>1333.5040<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>29<\/th>\n      <td>1stFlrSF<\/td>\n      <td>864<\/td>\n      <td>25<\/td>\n      <td>1.0000<\/td>\n      <td>24.3232<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>30<\/th>\n      <td>2ndFlrSF<\/td>\n      <td>0<\/td>\n      <td>829<\/td>\n      <td>1.0000<\/td>\n      <td>794.9296<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>31<\/th>\n      <td>LowQualFinSF<\/td>\n      <td>0<\/td>\n      <td>1434<\/td>\n      <td>1.0000<\/td>\n      <td>1430.7087<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>32<\/th>\n      <td>GrLivArea<\/td>\n      <td>864<\/td>\n      <td>22<\/td>\n      <td>1.0000<\/td>\n      <td>21.3120<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>33<\/th>\n      <td>BedroomAbvGr<\/td>\n      <td>3<\/td>\n      <td>804<\/td>\n      <td>1.0035<\/td>\n      <td>803.6878<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>34<\/th>\n      <td>KitchenAbvGr<\/td>\n      <td>1<\/td>\n      <td>1392<\/td>\n      <td>1.0003<\/td>\n      <td>1391.6019<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>35<\/th>\n      <td>Functional<\/td>\n      <td>Typ<\/td>\n      <td>1360<\/td>\n      <td>1.0024<\/td>\n      <td>1359.2044<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>36<\/th>\n      <td>GarageType<\/td>\n      <td>Attchd<\/td>\n      <td>870<\/td>\n      <td>6.0015<\/td>\n      <td>869.7585<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>37<\/th>\n      <td>GarageYrBlt<\/td>\n      <td>2005.0<\/td>\n      <td>65<\/td>\n      <td>0.0097<\/td>\n      <td>64.9418<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>38<\/th>\n      <td>GarageCars<\/td>\n      <td>2<\/td>\n      <td>824<\/td>\n      <td>5.0304<\/td>\n      <td>823.8180<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>39<\/th>\n      <td>GarageArea<\/td>\n      <td>0<\/td>\n      <td>81<\/td>\n      <td>1.0000<\/td>\n      <td>79.5920<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>40<\/th>\n      <td>GarageQual<\/td>\n      <td>TA<\/td>\n      <td>1311<\/td>\n      <td>3.0000<\/td>\n      <td>1310.4948<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>41<\/th>\n      <td>GarageCond<\/td>\n      <td>TA<\/td>\n      <td>1326<\/td>\n      <td>2.0020<\/td>\n      <td>1325.4836<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>42<\/th>\n      <td>WoodDeckSF<\/td>\n      <td>0<\/td>\n      <td>761<\/td>\n      <td>1.0000<\/td>\n      <td>741.2621<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>43<\/th>\n      <td>OpenPorchSF<\/td>\n      <td>0<\/td>\n      <td>656<\/td>\n      <td>1.0000<\/td>\n      <td>643.3973<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>44<\/th>\n      <td>EnclosedPorch<\/td>\n      <td>0<\/td>\n      <td>1252<\/td>\n      <td>1.0000<\/td>\n      <td>1237.2797<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>45<\/th>\n      <td>3SsnPorch<\/td>\n      <td>0<\/td>\n      <td>1436<\/td>\n      <td>1.0000<\/td>\n      <td>1433.2773<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>46<\/th>\n      <td>ScreenPorch<\/td>\n      <td>0<\/td>\n      <td>1344<\/td>\n      <td>1.0000<\/td>\n      <td>1333.9650<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>47<\/th>\n      <td>PoolArea<\/td>\n      <td>0<\/td>\n      <td>1453<\/td>\n      <td>1.0000<\/td>\n      <td>1451.9836<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>48<\/th>\n      <td>Fence<\/td>\n      <td>MnPrv<\/td>\n      <td>157<\/td>\n      <td>11.0129<\/td>\n      <td>156.9706<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>49<\/th>\n      <td>MiscFeature<\/td>\n      <td>Shed<\/td>\n      <td>49<\/td>\n      <td>1.0003<\/td>\n      <td>48.9859<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>50<\/th>\n      <td>MiscVal<\/td>\n      <td>0<\/td>\n      <td>1408<\/td>\n      <td>1.0000<\/td>\n      <td>1405.2060<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>51<\/th>\n      <td>SaleType<\/td>\n      <td>WD<\/td>\n      <td>1267<\/td>\n      <td>2.0008<\/td>\n      <td>1266.0840<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>52<\/th>\n      <td>SaleCondition<\/td>\n      <td>Normal<\/td>\n      <td>1198<\/td>\n      <td>4.0040<\/td>\n      <td>1197.4635<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n    <tr>\n      <th>53<\/th>\n      <td>SalePrice<\/td>\n      <td>140000<\/td>\n      <td>20<\/td>\n      <td>1.0000<\/td>\n      <td>19.8014<\/td>\n      <td>Upper<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n\n\n\nFor example, in the <b>MSSubClass<\/b> column the value of <b>20<\/b> has <b>536<\/b> repeatation but this number is not between Lower bound(4.0084) and Upper bound(535.6682).\n\n\nLet     $C_0=20$   and   $Freq(C_0)=536$     ,   $Upper(C_0)=535.6682$     ,   $Lower(C_0)=4.0084$\n\n$Freq(C_0) > Upper(C_0)$.","436897d2":"## Skewness\nIn probability theory and statistics, skewness is a measure of the asymmetry of the probability distribution of a real-valued random variable about its mean. The skewness value can be positive, zero, negative, or undefined.\n\nMore detail can be found [here](https:\/\/en.wikipedia.org\/wiki\/Skewness) and the [Probability and Statistics Tables and Formulae](http:\/\/tomlr.free.fr\/Math%E9matiques\/Math%20Complete\/Probability%20and%20statistics\/CRC%20-%20standard%20probability%20and%20Statistics%20tables%20and%20formulae%20-%20DANIEL%20ZWILLINGER.pdf) by Zwillinger and Kokoska.\n\nHere are two samples Skewness data for positive and negative skew data.<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/f\/f8\/Negative_and_positive_skew_diagrams_%28English%29.svg\" alt=\"source:Wikimedia\">\n\nFirst, we we will calculate the skewness for each columns in House prices advanced regression techniques Dataset if each selected column has positive float\/integer values.\n\nSecond, we will review the following conditions.\n\n- if $Skewness>1$ or $Skewness<-1$, we will consider it as highly skewed;\n\n- if $0.5<Skewness<=1$ or $-0.5<Skewness<=-1$, we will consider it as moderate skewed;\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th><\/th>\n      <th>Column<\/th>\n      <th>Skewness<\/th>\n      <th>Skewness_Type<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <th>0<\/th>\n      <td>MSSubClass<\/td>\n      <td>1.407657<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>1<\/th>\n      <td>LotFrontage<\/td>\n      <td>2.163569<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>2<\/th>\n      <td>LotArea<\/td>\n      <td>12.207688<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>3<\/th>\n      <td>OverallCond<\/td>\n      <td>0.693067<\/td>\n      <td>moderately skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>4<\/th>\n      <td>YearBuilt<\/td>\n      <td>-0.613461<\/td>\n      <td>moderately skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>5<\/th>\n      <td>YearRemodAdd<\/td>\n      <td>-0.503562<\/td>\n      <td>moderately skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>6<\/th>\n      <td>MasVnrArea<\/td>\n      <td>2.669084<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>7<\/th>\n      <td>BsmtFinSF1<\/td>\n      <td>1.685503<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>8<\/th>\n      <td>BsmtFinSF2<\/td>\n      <td>4.255261<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>9<\/th>\n      <td>BsmtUnfSF<\/td>\n      <td>0.920268<\/td>\n      <td>moderately skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>10<\/th>\n      <td>TotalBsmtSF<\/td>\n      <td>1.524255<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>11<\/th>\n      <td>1stFlrSF<\/td>\n      <td>1.376757<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>12<\/th>\n      <td>2ndFlrSF<\/td>\n      <td>0.813030<\/td>\n      <td>moderately skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>13<\/th>\n      <td>LowQualFinSF<\/td>\n      <td>9.011341<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>14<\/th>\n      <td>GrLivArea<\/td>\n      <td>1.366560<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>15<\/th>\n      <td>BsmtFullBath<\/td>\n      <td>0.596067<\/td>\n      <td>moderately skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>16<\/th>\n      <td>BsmtHalfBath<\/td>\n      <td>4.103403<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>17<\/th>\n      <td>HalfBath<\/td>\n      <td>0.675897<\/td>\n      <td>moderately skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>18<\/th>\n      <td>KitchenAbvGr<\/td>\n      <td>4.488397<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>19<\/th>\n      <td>TotRmsAbvGrd<\/td>\n      <td>0.676341<\/td>\n      <td>moderately skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>20<\/th>\n      <td>Fireplaces<\/td>\n      <td>0.649565<\/td>\n      <td>moderately skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>21<\/th>\n      <td>GarageYrBlt<\/td>\n      <td>-0.649415<\/td>\n      <td>moderately skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>22<\/th>\n      <td>WoodDeckSF<\/td>\n      <td>1.541376<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>23<\/th>\n      <td>OpenPorchSF<\/td>\n      <td>2.364342<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>24<\/th>\n      <td>EnclosedPorch<\/td>\n      <td>3.089872<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>25<\/th>\n      <td>3SsnPorch<\/td>\n      <td>10.304342<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>26<\/th>\n      <td>ScreenPorch<\/td>\n      <td>4.122214<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>27<\/th>\n      <td>PoolArea<\/td>\n      <td>14.828374<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>28<\/th>\n      <td>MiscVal<\/td>\n      <td>24.476794<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n    <tr>\n      <th>29<\/th>\n      <td>SalePrice<\/td>\n      <td>1.882876<\/td>\n      <td>highly skewed<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>","8ce94da7":"### Discard Irrelevant Columns\nIn the given input dataset there are <b>1<\/b> column that can be removed as follows:* Id *.","0e53188d":"MSSubClass, LotFrontage, LotArea, OverallQual, OverallCond, YearBuilt, YearRemodAdd, MasVnrArea, BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, 1stFlrSF, 2ndFlrSF, LowQualFinSF, GrLivArea, BsmtFullBath, BsmtHalfBath, FullBath, HalfBath, BedroomAbvGr, KitchenAbvGr, TotRmsAbvGrd, Fireplaces, GarageYrBlt, GarageCars, GarageArea, WoodDeckSF, OpenPorchSF, EnclosedPorch, 3SsnPorch, ScreenPorch, PoolArea, MiscVal, MoSold, YrSold, SalePrice","2f9661cf":"### Visualization for feature importance","e349e0b3":"## Imputation Transformer\nWe will use which is an imputation transformer for completing missing values.\nWe can use out-of-the-box imputation transformer from Scikit-Learn packages. The detail and the list of complete parameters can be found [here](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.impute.SimpleImputer.html)"}}