{"cell_type":{"fce51102":"code","71795a76":"code","4c0ec8a3":"code","90141d45":"code","3885f0b4":"code","0b62d27c":"code","275dee5f":"code","bb1d0ed6":"code","43d6d61d":"code","93d17126":"code","d24a650f":"code","2e5972c6":"code","01f79b77":"code","12e27408":"code","b67ee6c7":"code","38fb480f":"code","f27a062a":"code","17817033":"code","c81d5230":"code","68f10805":"code","a81ca1d0":"code","80e2ee9f":"code","b42f9c8a":"code","96a40c5a":"code","457a4907":"code","f278d4b7":"code","77a8c931":"code","e24a4b09":"code","8b825d96":"code","d81f0c7e":"code","cc8c3039":"code","9134aae6":"code","f55e8d7c":"code","38d4461c":"code","2058e898":"code","faf51699":"code","03754be4":"code","c1add1a0":"code","314e3e9b":"code","0090c81e":"code","af91e987":"code","313cb20f":"code","3c7666fe":"code","2df8c755":"code","c8f86175":"code","67800b1f":"code","60d63211":"code","a62c25dd":"code","fcf9312e":"code","4f29d126":"code","54c46c06":"code","9f7cb8b9":"code","74d6c814":"code","c9843dad":"code","8ca190fa":"code","b34a3499":"code","0c32ed4a":"code","2bd66f03":"code","c4796229":"code","fdc160ed":"code","062ca3db":"code","a2d3c612":"code","7cd925b8":"code","5f062393":"code","e4cec233":"code","cadc7e6b":"code","f384d748":"code","fc9129fa":"code","84a82672":"code","51d1d7bf":"code","fcc5216f":"code","837ab030":"code","cd55b79f":"code","d48d0e60":"code","1469bf48":"code","17f22ca8":"code","97e4d469":"code","770ce4f5":"code","9037a536":"code","44f4cbbd":"code","dd2a3e4a":"code","9b9db351":"code","ba8a7dad":"code","b1ca41c3":"code","f35df233":"code","347e7e5d":"code","33def14b":"code","898c4d53":"code","152b2771":"code","8416bbbf":"code","658da18d":"code","2ddab7d8":"code","f7f52a33":"code","986178a5":"code","68dba51e":"code","e6d22bf5":"code","03f60473":"code","ed29dd34":"code","fd1f5671":"code","7f5c47ec":"code","467dd1e4":"code","18f7386d":"code","7827c6cb":"code","fec8f9b3":"code","acbce0d4":"code","54c616a3":"markdown","e2de4286":"markdown","0acb4ba9":"markdown","97ad8afa":"markdown","a1fa03c9":"markdown","6c676fcd":"markdown","f9ad5dfc":"markdown","3c42fafc":"markdown","c7815a6c":"markdown","cc6c34c5":"markdown","1d9a43bd":"markdown","e0744ce3":"markdown","54853336":"markdown","350b8598":"markdown","ca6dd726":"markdown","3b9e44ca":"markdown","660fd9e0":"markdown","c33adea0":"markdown","2f8fbaf1":"markdown","41bb835a":"markdown","965d546e":"markdown","6a006a9c":"markdown","48161e36":"markdown","801acd72":"markdown","313e0eed":"markdown","f46552dc":"markdown","66e14f3f":"markdown","72dd2bc1":"markdown","fb558143":"markdown","fe189e81":"markdown","81416a93":"markdown","30b6b81b":"markdown","e9093768":"markdown","8499b3cc":"markdown","579d8f04":"markdown","4a5ebbea":"markdown","2c0b9238":"markdown","4347c711":"markdown","d94add4c":"markdown","6d03ece6":"markdown","a7ea13ed":"markdown","2c0e4210":"markdown","735ada80":"markdown","e3aa6cd5":"markdown","d6dc51b1":"markdown","d4981457":"markdown","ebd8e818":"markdown","8f9edcdd":"markdown","0b4f3f85":"markdown","75defbd4":"markdown","dbcca2c5":"markdown","538f290f":"markdown","1b07811a":"markdown","5a85eefa":"markdown","d011deeb":"markdown","4d247887":"markdown","f3fbfda7":"markdown","c2a7f70f":"markdown","395316d6":"markdown","22b473d5":"markdown"},"source":{"fce51102":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","71795a76":"import os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\nfrom scipy.stats import normaltest, anderson\nimport scipy\nfrom warnings import filterwarnings","4c0ec8a3":"from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, cross_val_predict, cross_validate\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier, ExtraTreesClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder, RobustScaler \nfrom xgboost import XGBRFClassifier\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifier\nfrom sklearn.naive_bayes import MultinomialNB, GaussianNB \nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import RocCurveDisplay, confusion_matrix\nfrom sklearn.metrics import plot_roc_curve, roc_auc_score, classification_report, accuracy_score, f1_score\nfrom sklearn.metrics import recall_score, plot_confusion_matrix, precision_score, plot_precision_recall_curve, classification_report\n    \nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom imblearn.combine import SMOTEENN\nfrom imblearn.pipeline import Pipeline\nfrom sklearn.feature_selection import SequentialFeatureSelector \nimport xgboost\nfrom sklearn.decomposition import PCA","90141d45":"sns.set(style='whitegrid')\npd.set_option('display.max_colwidth', 300)\npd.set_option('display.max_rows', 10000)\nfilterwarnings('ignore')\npd.plotting.register_matplotlib_converters()\n%matplotlib inline\nprint(\"Setup Complete\")","3885f0b4":"cvd = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","0b62d27c":"cvd.tail()","275dee5f":"cvd.info()","bb1d0ed6":"no_bool_cols = ['creatinine_phosphokinase', 'platelets', 'ejection_fraction', 'serum_sodium',\n        'serum_creatinine', 'time', 'age']","43d6d61d":"#we describe only not categorical attribute.\ncvd[no_bool_cols].describe()","93d17126":"cvd[no_bool_cols].mode()","d24a650f":"cvd[no_bool_cols].corr()","2e5972c6":"cvd['DEATH_EVENT'].value_counts().plot(kind='pie')\nplt.show()","01f79b77":"(cvd['DEATH_EVENT'].value_counts()\/sum(cvd['DEATH_EVENT'].value_counts()))*100","12e27408":"cvd['sex'].value_counts().plot(kind='pie')\nplt.show()","b67ee6c7":"(cvd['sex'].value_counts()\/sum(cvd['sex'].value_counts()))*100","38fb480f":"cvd['anaemia'].value_counts().plot(kind='pie')\nplt.show()","f27a062a":"(cvd['anaemia'].value_counts()\/sum(cvd['anaemia'].value_counts()))*100","17817033":"cvd['diabetes'].value_counts().plot(kind='pie')\nplt.show()","c81d5230":"(cvd['diabetes'].value_counts()\/sum(cvd['diabetes'].value_counts()))*100","68f10805":"cvd['high_blood_pressure'].value_counts().plot(kind='pie')\nplt.show()","a81ca1d0":"(cvd['high_blood_pressure'].value_counts()\/sum(cvd['high_blood_pressure'].value_counts()))*100","80e2ee9f":"cvd['smoking'].value_counts().plot(kind='pie')\nplt.show()","b42f9c8a":"(cvd['smoking'].value_counts()\/sum(cvd['smoking'].value_counts()))*100","96a40c5a":"cvd[no_bool_cols].skew()","457a4907":"cvd[no_bool_cols].kurtosis()","f278d4b7":"cvd[no_bool_cols].plot(kind='box', subplots=True, layout=(3,3), figsize=(15,20), title='Numeric attributes')\nplt.show()","77a8c931":"def  multibarplot(column=None):\n    figu = plt.figure(figsize=(20,15))\n    figu.subplots_adjust(wspace=0.2, hspace=0.2)\n    cat = ['high_blood_pressure', 'diabetes', 'sex', 'anaemia','smoking']\n    for i, u in enumerate(cat):\n        ax = figu.add_subplot(2,3,i+1)\n        sns.barplot(hue=cat[i], y=column, data=cvd, x=\"DEATH_EVENT\", ax=ax)\n        ax.set_title(f'Cardiovasc. disease:  {column}-death_event\/{cat[i]}.')\n    plt.show()\n    \ndef  multiboxplot(column=None):\n    figu = plt.figure(figsize=(20,15))\n    figu.subplots_adjust(wspace=0.2, hspace=0.2)\n    cat = ['high_blood_pressure', 'diabetes', 'sex', 'anaemia','smoking']\n    for i, u in enumerate(cat):\n        ax = figu.add_subplot(2,3,i+1)\n        sns.boxplot(hue=cat[i], y=column, data=cvd, x=\"DEATH_EVENT\", ax=ax)\n        ax.set_title(f'Cardiovasc. disease:  {column}-death_event\/{cat[i]}.')\n    plt.show()\n    \ndef multi2Dhistogram(column=None):\n    fig= plt.figure(figsize=(15,10))\n    fig.subplots_adjust(wspace=0.2, hspace=0.2)\n    cols = ['creatinine_phosphokinase', 'platelets', 'ejection_fraction', 'serum_sodium',\n        'serum_creatinine', 'time', 'age']\n    cols = list(set(cols) - set([column]))\n    for i, u in enumerate(cols):\n        ax = fig.add_subplot(2,3, i+1)\n        sns.histplot(x=column, y=u, data=cvd, hue='DEATH_EVENT', ax=ax, bins=10, stat='density')\n        ax.set_title(f'Histogram: {column}-{u}.')\n    plt.show()\n    \ndef histogram_attribute():\n    fig= plt.figure(figsize=(20,20))\n    fig.subplots_adjust(wspace=0.2, hspace=0.2)\n    cols = ['creatinine_phosphokinase', 'platelets', 'ejection_fraction', 'serum_sodium',\n        'serum_creatinine', 'time', 'age']\n    \n    for i, u in enumerate(cols):\n        ax = fig.add_subplot(3,3, i+1)\n        sns.histplot(x=u, data=cvd, hue='DEATH_EVENT', ax=ax, bins=10, kde=True)\n        ax.set_title(f'Histogram: {u}.')\n    plt.show()\n    \ndef countplot(cols=None):\n    fig= plt.figure(figsize=(20,20))\n    fig.subplots_adjust(wspace=0.2, hspace=0.2)\n    for i, u in enumerate(cols):\n        ax = fig.add_subplot(2,3, i+1)\n        sns.countplot(x=u, data=cvd, hue='DEATH_EVENT', ax=ax)\n        ax.set_title(f'Countplot: {u}.')\n    plt.show()\n    \ndef barplot_attribute():\n    fig= plt.figure(figsize=(20,20))\n    fig.subplots_adjust(wspace=0.2, hspace=0.2)\n    cols = ['creatinine_phosphokinase', 'platelets', 'ejection_fraction', 'serum_sodium',\n        'serum_creatinine', 'time', 'age']\n    \n    for i, u in enumerate(cols):\n        ax = fig.add_subplot(3,3, i+1)\n        sns.barplot(y=u, data=cvd, x='DEATH_EVENT', ax=ax)\n        ax.set_title(f'Barplot: {u}.')\n    plt.show()","e24a4b09":"histogram_attribute()","8b825d96":"barplot_attribute()","d81f0c7e":"#boxplot\nplt.figure(figsize=(8,5))\nsns.boxplot(x=\"DEATH_EVENT\", y=\"age\", data=cvd)\nplt.title('Cardiovascular disease: Age-Death_Event.')\nplt.show()","cc8c3039":"multiboxplot('age')","9134aae6":"plt.figure(figsize=(8,5))\nsns.barplot(y=\"age\", data=cvd, x=\"DEATH_EVENT\")\nplt.title('Cardiovascular disease: Age-Death_Event.')\nplt.show()","f55e8d7c":"multibarplot('age')","38d4461c":"plt.figure(figsize=(8,5))\nsns.boxplot(x=\"DEATH_EVENT\", y=\"time\", data=cvd)\nplt.title('Cardiovascular disease: Time-Death_Event.')\nplt.show()","2058e898":"multiboxplot(column='time')","faf51699":"plt.figure(figsize=(8,5))\nsns.barplot(y=\"time\", data=cvd, x=\"DEATH_EVENT\")\nplt.title('Cardiovascular disease: Time-Death_Event.')\nplt.show()","03754be4":"multibarplot('time')","c1add1a0":"bool_cols = list(set(cvd.columns) - set(no_bool_cols))","314e3e9b":"countplot(bool_cols)","0090c81e":"death = cvd[cvd['DEATH_EVENT'] == 1]","af91e987":"death.drop(columns=['DEATH_EVENT'], inplace=True)","313cb20f":"death[no_bool_cols].describe()","3c7666fe":"plt.figure(figsize=(12,12))\nsns.heatmap(death.corr(), annot=True)\nplt.title('Correlation heatmap.')\nplt.show()","2df8c755":"def hist_death_patient(value=None, cols=no_bool_cols, data=death):\n    fig= plt.figure(figsize=(20,15))\n    fig.subplots_adjust(wspace=0.2, hspace=0.3)\n    for i, u in enumerate(cols):\n        ax = fig.add_subplot(2, 4, i+1)\n        sns.histplot(x=u, data=data, hue=value, ax=ax, stat='probability', kde=True, cumulative=True)\n        ax.set_title(f'Death histogram: {value}|{u}.')\n    plt.show()","c8f86175":"for c in range(len(bool_cols)):\n    if bool_cols[c] == 'DEATH_EVENT':\n        continue\n    print(bool_cols[c])\n    hist_death_patient(value=bool_cols[c])","67800b1f":"def NormalTest(cols=no_bool_cols, data=death):\n    print('In the Death cardiovascular population.\\n H0: x come from a normal distribution.\\n')\n    norma_attr = []\n    for u in cols:\n        k2, p = normaltest(data[u])  \n        if p < 0.001:\n            print(f'For {u}: The null hypothesis can be rejected. pvalue={p}')\n        else:\n            print(f'For {u}: The null hypothesis cannot be rejected. pvalue={p}')\n            norma_attr.append(u)\n            \n    print(f'\\n The attributes that come from normal process are: {norma_attr}.')\n    return norma_attr","60d63211":" normal_cols = NormalTest()","a62c25dd":"def plot_curve(data=None, label=None):\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\n    ax1.plot(sorted(data)[::-1], 'o')\n    ax1.set_xlabel('Patient')\n    ax1.set_ylabel(label)\n    ax1.set_title(label)\n    sns.histplot(data, stat='probability', kde=True, ax=ax2)\n    ax2.set_xlabel(label)\n    ax2.set_ylabel('Probability')\n    ax2.set_title('Probability distribution function.')","fcf9312e":"def multiscatterplot(column=None, cols=None, data=None, label=None):\n    fig= plt.figure(figsize=(15,10))\n    fig.subplots_adjust(wspace=0.2, hspace=0.2)\n    cols = list(set(cols) - set([column]))\n    for i, u in enumerate(cols):\n        ax = fig.add_subplot(2,3, i+1)\n        sns.scatterplot(x=column, y=u, data=cvd, hue=label)\n        ax.set_title(f'scatter: {column}-{u}.')\n    plt.show()","4f29d126":"death['platelets_less_255300'] = death['platelets'].apply(lambda x: 'yes' if x < 255300 else 'no')","54c46c06":"death['platelets_less_255300'].value_counts().plot(kind='pie')\nplt.show()","9f7cb8b9":"(death['platelets_less_255300'].value_counts()\/sum(death['platelets_less_255300'].value_counts()))*100","74d6c814":"plot_curve(data=death['platelets'], label='platelets')","c9843dad":"def condition(x):\n    if (x>= 50 and x <= 70):\n        return 'normal'  \n    elif (x>= 41 and x <= 49):\n        return 'bordeline'\n    else:\n        return 'reduced'\ndeath['EF_decision'] = death['ejection_fraction'].apply(condition)","8ca190fa":"death['EF_decision'].value_counts().plot(kind='pie')\nplt.show()","b34a3499":"(death['EF_decision'].value_counts()\/sum(death['EF_decision'].value_counts()))*100","0c32ed4a":"death_patient_with_normal_EF = death[death['EF_decision'] == 'normal']","2bd66f03":"pol = []\nfor _, u in enumerate(bool_cols):\n    if u == 'DEATH_EVENT':\n        continue\n    v = death_patient_with_normal_EF[u].value_counts()\n    pol.append((v\/sum(v))*100)","c4796229":"pd.DataFrame(pol)","fdc160ed":"plot_curve(data=death['ejection_fraction'], label='ejection_fraction')","062ca3db":"plot_curve(data=death['age'], label='age')","a2d3c612":"num_cols = list(set(no_bool_cols) - set(normal_cols))\nnum_cols","7cd925b8":"plot_curve(data=death['time'], label='time')","5f062393":"followUP_less75D = death[death['time'] < 75]","e4cec233":"def timeLess75D_histogram(r):\n    fig= plt.figure(figsize=(20,10))\n    fig.subplots_adjust(wspace=0.2, hspace=0.3)\n    cols = ['creatinine_phosphokinase', 'platelets', 'ejection_fraction', 'serum_sodium',\n        'serum_creatinine', 'age']\n    \n    for i, u in enumerate(cols):\n        ax = fig.add_subplot(2, 3, i+1)\n        sns.histplot(x=u, data=followUP_less75D, hue=r, ax=ax, bins=10, kde=True)\n        ax.set_title(f'Time < 75 days: {u}.')\n    plt.show()","cadc7e6b":"print(f'The total cardiovasc. patient die with time < 75 days = {len(followUP_less75D)}\/{len(death)}.\\n')\nfor  k in bool_cols:\n    if k == 'DEATH_EVENT':\n        continue\n        \n    print(f'Time < 75 days: {k}.')\n        \n    timeLess75D_histogram(k)\n    print()","f384d748":"class tools:\n    \"\"\"\n    This class contains all function for classification where target are unbalanced.\n    \"\"\"\n    \n    def __init__(self, xtrain=None, ytrain=None):\n        self.xtrain = xtrain # train data\n        self.ytrain = ytrain # train target data\n        \n        # list of different learner for classification\n        self.clas_model = {'KNeighborsClassifier': KNeighborsClassifier(),\n                'RandomForestClassifier': RandomForestClassifier(random_state=42),\n                'GradientBoostingClassifier': GradientBoostingClassifier(random_state=42),\n                'XGBoostClassifier': XGBRFClassifier(random_state=42, eval_metric='logloss'),\n                'AdaboostClassifier': AdaBoostClassifier(random_state=42),\n                'ExtraTreesClassifier': ExtraTreesClassifier(random_state=42),\n                'MLPClassifier':MLPClassifier(random_state=42),\n                'LogisticRegression': LogisticRegression(random_state=42),\n                'RidgeClassifier': RidgeClassifier(random_state=42),\n                'SVC': SVC(random_state=42),\n                'LinearSVC': LinearSVC(random_state=42),\n                'DecisionTree': DecisionTreeClassifier(random_state=42),\n                'GaussianNB': GaussianNB()}\n        \n    def classification_learner_selection(self):\n\n        \"\"\"\n            This function compute differents score measure like cross validation,\n            auc, accuracy, recall, precision and f1.\n            reg_model: dictionary type containing different model algorithm.     \n        \"\"\" \n    \n        result = {}\n        matrix = []\n        \n        #\n    \n        # we take each classification model\n        for cm in list(self.clas_model.items()):\n        \n            name = cm[0] #name of learner\n            model = cm[1] # learner\n            \n            pipe = Pipeline([('smoteenn', SMOTEENN(random_state=42)),\n                            (name, model)])\n\n            cvs = cross_validate(pipe, self.xtrain, self.ytrain, cv=10,scoring='roc_auc',\n                                return_train_score=True, return_estimator=True,\n                                n_jobs=-1)\n            \n            ypred = cross_val_predict(pipe, self.xtrain, self.ytrain, cv=10) #prediction cv\n            report = classification_report(self.ytrain, ypred)\n            \n            cvs_mean = cvs['test_score'].mean() #mean of cv score\n            cvs_std = cvs['test_score'].std() #std of cv score\n        \n            result[name] = {'cvs_ROC_AUC': cvs_mean, 'report': report}\n        \n            print(f'{name} model done; score mean +\/- std. dev: {round(cvs_mean, 3)} +\/- {round(cvs_std, 3)} !!!')\n            \n        return result","fc9129fa":"target  = cvd['DEATH_EVENT']\ndata = cvd.drop(columns=['time', 'DEATH_EVENT'])","84a82672":"xtrain, xtest, ytrain, ytest = train_test_split(data, target, stratify=target,\n                                                random_state=42,\n                                                test_size=0.2)","51d1d7bf":"#scaling\nscaler = RobustScaler()","fcc5216f":"xtrain_scaled = scaler.fit_transform(xtrain)","837ab030":"xtest_scaled = scaler.transform(xtest)","cd55b79f":"toolModel = tools(xtrain_scaled, ytrain)","d48d0e60":"res = toolModel.classification_learner_selection()","1469bf48":"pd.DataFrame(res).iloc[0,:].sort_values(ascending=False)","17f22ca8":"dcol = pd.DataFrame(res).columns\nfor i in range(len(dcol)):\n    print(dcol[i])\n    print(pd.DataFrame(res).iloc[1, i])\n    print()","97e4d469":"#pipe = Pipeline([('smoteenn', SMOTEENN(random_state=42)),\n #                           ('xgboost', XGBRFClassifier(random_state=42, eval_metric='logloss'))])","770ce4f5":"#param_grid = {'xgboost__learning_rate':[1, 0.1, 0.01], 'xgboost__max_depth': [3, 4, 5], 'xgboost__n_estimators':[100, 1000],\n #        'xgboost__gamma':[0.5, 1.0, 1.5], 'xgboost__subsample':[0.6, 0.8, 1], 'xgboost__colsample_bytree':[0.6, 0.8, 1]}","9037a536":"#grid_search = GridSearchCV(pipe, param_grid, cv=5, scoring='roc_auc', n_jobs=-1, verbose=1)","44f4cbbd":"#grid_search.fit(xtrain_scaled, ytrain)","dd2a3e4a":"#print(f\"Best parameters: {grid_search.best_params_}\")\n#print(f\"Best cross-validation score: {grid_search.best_score_:.2f}\")","9b9db351":"#print(f'Test set score: {grid_search.score(xtest_scaled, ytest)}.')","ba8a7dad":"learner = XGBRFClassifier(random_state=42, gamma=1.5, colsample_bytree=0.8, max_depth=3, \n                                                       n_estimators=1000, subsample=0.6, eval_metric='logloss')\n\nmodel = Pipeline([('smoteenn', SMOTEENN(random_state=42, )),\n                            ('model',learner)])","b1ca41c3":"model.fit(xtrain_scaled, ytrain)","f35df233":"ypred = model.predict(xtest_scaled)","347e7e5d":"print(f'ROC_AUC score: {roc_auc_score(ytest, ypred)}.')","33def14b":"print(classification_report(ytest, ypred))","898c4d53":"plot_roc_curve(model, xtest, ytest)\nplt.show()","152b2771":"plot_confusion_matrix(model, xtest_scaled, ytest)\nplt.grid(False)\nplt.show()","8416bbbf":"print(f'f1 score {f1_score(ytest, ypred)}')\nprint(f'precision score: {precision_score(ytest, ypred)}')\nprint(f'recall score: {recall_score(ytest, ypred)}')\nprint(f'accuracy score: {accuracy_score(ytest, ypred)}')","658da18d":"from sklearn.pipeline import Pipeline","2ddab7d8":"patient = death.drop(columns=['platelets_less_255300','EF_decision', 'time'])","f7f52a33":"patient.tail()","986178a5":"search_info = Pipeline([('scaler', RobustScaler()), ('pca', PCA(n_components=0.95))])","68dba51e":"patient_pca = search_info.fit_transform(patient)","e6d22bf5":"pca = search_info['pca']","03f60473":"pca.components_.shape","ed29dd34":"df = pd.DataFrame(pca.components_, columns=patient.columns, index =  ['PC'+str(i) for i in range(7)])","fd1f5671":"plt.figure(figsize=(15,8))\nsns.heatmap(df, annot=True, center=0, fmt='0.3g', cmap='viridis')\nplt.show()","7f5c47ec":"patient_pc = pd.DataFrame(patient_pca, columns=['PC'+str(i) for i in range(7)])\npatient_pc.shape","467dd1e4":"patient_pc.tail()","18f7386d":"#create function\ndef visualize_decomposition(comp1=None, comp2=None, data=patient_pc):\n    \n    plt.figure(figsize=(15,5))\n    sns.scatterplot(x=comp1, y=comp2, data=data)\n    plt.xlabel(comp1)\n    plt.ylabel(comp2)\n    plt.title(f'Visualization {comp1} and {comp2}.')\n    plt.show()","7827c6cb":"visualize_decomposition(comp1='PC0', comp2='PC1')","fec8f9b3":"A_set = patient_pc[(patient_pc['PC0']>0) &  (patient_pc['PC1']<0)]\nB_set = patient_pc[(patient_pc['PC0']<0) &  (patient_pc['PC1']>0)]\nC_set = patient_pc[(patient_pc['PC0']<0) &  (patient_pc['PC1']<0)]","acbce0d4":"print(f'P(A_set) = {(len(A_set)\/len(patient_pc))*100}%\\nP(B_set) = {(len(B_set)\/len(patient_pc))*100}%',\n     f'\\nP(C_set) = {(len(C_set)\/len(patient_pc))*100}%')","54c616a3":"**Only time and age have positive kurtosis (intliers)**.","e2de4286":"**Data is imbalanced. 68% for 0 (no) and 32% for (1) yes.**","0acb4ba9":"**65% of cardiovascular patient are females and 35% of patient are man.**","97ad8afa":"## Predict heart failure\n\nIn this section, that is what we are going to work.\n1. split data to train and test set\n2. create class tools with multiple function (scaling data with RobustScaler, smote+enn)\n3. find best learner\n4. do selection informative attribute for the best learner\n5. make grid search to find best hyperparameter\n\nOkay, let's go","a1fa03c9":"**correlation shows that all numeric attributes are independant.**","6c676fcd":"### Find best learner","f9ad5dfc":"**Note**\n\nThe cumulative distribution function of a real-valued random variable X is the function given by\n> $F_X(x) = P(X \\leq x)$","3c42fafc":"#### Patelets (kilopatelets\/mL)","c7815a6c":"### Time (days)","cc6c34c5":"1. **80.21% of cardiovasc. patient die with reduced ejection fraction (low blood pumped in heart).**\n2. **14.58% of cardivasc. patient die with normal ejection fraction (other cause).**\n3. **5.21% of cardiovasc. patient die with bordeline ejection fraction (other cause).**\n\nBelow, we find why 2)","1d9a43bd":"The Best learner we choose are:\n1. XGBoostClassifier\n2. GradientBoosting\n\n\nOkay, we have three best learners, we can make some combination to see how model performs better\n1. model1: XGBoostClassifier + GradientBoost\n2. model2: GradientBoost + XGBoostClassifier\n\nOkay, let's go","e0744ce3":"<a id='eda'><\/a>","54853336":"#### Age (year)","350b8598":"### Find best hyperparameter","ca6dd726":"# Heart failure","3b9e44ca":"**Only two patients where DEATH_EVENT = 1 have time > 200 days.**","660fd9e0":"### Time attribute","c33adea0":"Many cadiovascular patients have:\n1. **60 years old**.\n2. **187 and 250 days**.\n3. **1 mg\/dL creatinine in the blood**.\n4. **136 mEq\/L sodium in the blood**.\n5. **35% of blood leaving**.\n6. **263358 kiloplatelets\/mL**.\n7. **582 mcg\/L CPK enzyme in the blood**.","2f8fbaf1":"**What is creatinine kinase and serum creatinine?**\n\n**Creatinine kinase** is an enzyme found in the heart, brain, skeletal muscle, and other tissues. Increased amounts of CK are released into the blood when there is muscle damage. Higher amount of serum CK can indicate muscle damage.\n\n**Serum creatinine** is a measure of how well your kidneys are performing their of filtering waste from your blood. Higer serum creatinine levels in the blood indicate that the kidneys are not functioning properly.\n\nNow,  we are created three sets A, B, C\n\n> A: **a set that describe the death's patient having positive score for PC0 i.e high creatinine kinase and negative score for PC1 i.e low SC (PC0>0 and PC1 <0)**.\n\n> B: **a set that describe the death's patient having positive score for PC1 i.e high serum creatinine and negative score for PC0 i.e low CK (PC0 < 0 and PC1 > 0)**.\n\n> C: **a set that describe the death's patient having negative score for PC0 and PC1 i.e low CK and low Creatinine (PC0 < 0 and PC1 < 0)**.\n\nWe have only two death's patients having high CK and Serum Creatinine (cause 100%).","41bb835a":"## Prediction and model evaluation","965d546e":"The two attributes that patient die with a normal EF are **diabetes** and **anaemia**.  ","6a006a9c":"**In 100 cardiovascular patients, there exist 57 patients who have not anemia but 43 patients have.**","48161e36":"**In 100 cardiovascular patients, we have 42 patients (yes) and 58 patients (no).**","801acd72":"**Insights**\n\nWe denote **AgeMed** the age median of cv's patient. \n\n1. **AgeMed**(DEATH_EVENT = 0 | {smoking=0 or smoking=1}, {sex=0 or sex=1}, {diabetes=0 or diabetes=1}, {anaemia=0 or anaemia = 1}, {high_blood_pressure = 0 or high_blood_pressure = 1}) **is less or equal to 60 years old**.\n2. **AgeMed**(DEATH_EVENT = 1 | {smoking=0 or smoking=1}, {sex=0 or sex=1}, {diabetes=0 or diabetes=1}, {anaemia=0 or anaemia = 1}, {high_blood_pressure = 0 or high_blood_pressure = 1}) **is greater or equal to 60 years old**.\n\nQuestion: What is the probability that a cardiovascular patient over 60 years old will die? (answer after).","313e0eed":"# Exploratory data analysis","f46552dc":"### Let's study platelets, ejection_fraction, age.\n\nBy theses three normal attributes, what attribute that causes heart diseases.","66e14f3f":"**We can see  same behavior for different categorical attributes**. ","72dd2bc1":"#### Age estimation. ","fb558143":"### Let's study other numeric attributes.  ","fe189e81":"In this notebook, we work on Cardiovascular diseases (CVDs) to understand its behavior. Cardiovascular diseases (CVDs) are the first cause of death globally, taking an estimated 17.9 million lives each year, which accounts for 31% of all deaths worlwide. Heart failure is a common event caused by CVDs. We are going to use 12 features that can be used to predict mortality by heart failure.\n\nMost cardiovascular diseases can be prevented by addressing behavioural risk factors such as **tobacco use**, **unhealthy diet and obesity**, **physical inactivity and harmful use of alcohol** using population-wide strategies.\n\nTo do so, we will talk:\n1. [Load package and prepare data](#load)\n2. [Exploratory data analysis](#eda)\n3. [Data visualization](#viz)\n4. [Modelling](#mod)\n\n    4.1 [Predict heart failure](#heart)\n     \n    4.2 [Find relevant informative attributes that causes heart disease.](#rel) \n     \nLet's start","81416a93":"**Insight**\n\n1. PC0 is strongly correlated with creatinine kinase. It show how increase creatinine kinase in the patient \n2. PC1 is strongly correlated with serum_creatinine. It show how increase serum_creatinine.\n3. PC2 is strongly correlated with ejection_fraction and serum_sodium. I PC2 decrease also EF and serum sodium decrease.\n4. PC3 is strongly correlated with EF (positive) and platelets (negative). It show the opposites between EF and platelets.(if EF increase then platelets decrease vis versa)\n5. PC4 is strongly correlated with platelets and serum_sodium. I show how platelets and serum_sodium are opposites. If platelets increase then serum_sodium decrease.\n6. PC5 is correlated with age. if PC5 increase then age increase also\n7. PC6 is correlated with anaemia. It show how increase anaemia.\n\nWe can said that attributes important in this data are:\n\n1. creatinine kinase\n2. serum_creatine\n3. EF\n4. serum_sodium\n5. platelets\n6. age \n7. anaemia.\n\nwhere, \n\n1. PC0 --> creatinine kinase\n2. PC1 --> serum creatinine\n3. PC5 --> age\n4. PC6 --> anaemia\n5. PC2 --> decreasing of EF and serum_sodium\n6. PC3 --> opposition between EF and platelets\n7. PC4 --> opposition between platelets and serum_sodium","30b6b81b":"# Attributes explanations\n\n1. **age**: Age of the patient (years).\n2. **anaemia**: Decrease of red blood cells or hemoglobin (boolean).     \n3. **creatinine_phosphokinase (cpk)**: Level of the CPK enzyme in the blood (mcg\/L).\n4. **diabetes**: If the patient has diabetes (boolean).\n5. **ejection_fraction**: Percentage of blood leaving (%).\n6. **high_blood_pressure**: If a patient has hypertension (boolean).\n7. **platelets**: Platelets in the blood (kiloplatelets\/mL).\n8. **serum_creatinine**: Level of creatinine in the blood (mg\/dL).\n9. **serum_sodium**: Level of sodium in the blood. (mEq\/L).\n10. **smoking**: If the patient smokes (boolean).\n11. **time**: Follow-up period (days).\n12. **DEATH_EVENT**: If the patient died during the follow-up period (target boolean). ","e9093768":"### Other visualization","8499b3cc":"### Age attribute.","579d8f04":"## Histogram for all numeric attributes.","4a5ebbea":"**Insight**\n\nIn sex group::\n> **age < 70 years old**: 12 men die against 9 women.\n\n> **age >= 70 years old**: 6 men die against 16 woman.\n\n> **12 men have ejection_fraction < 40% against 24 women.** in the same condition.\n\n> **10 men against  19 women have serum_sodium <= 135 mEq\/L** At this condition, patient have sodium low in blood (Hyponatremia).\n\n**concl**. In cardiovascular disease, we can said that women are more affected by this disease.","2c0b9238":"**65% of cardivascular patients have not hypertension but 35% of cardiovasc. patient have hypertension.**","4347c711":"**We note**\n\nnb_dp: number of death's patient\n\n1. nb_dp(DEATH_EVENT == 1 | aneamia == 0) > nb_dp(DEATH_EVENT == 1 | anaemia == 1) \n2. nb_dp(DEATH_EVENT == 1 | high_blood_pressure == 0) > nb_dp(DEATH_EVENT == 1 | high_blood_presure == 1)\n3. nb_dp(DEATH_EVENT == 1 | diabetes == 0) > nb_dp(DEATH_EVENT == 1 | diabetes == 1) \n4. nb_dp(DEATH_EVENT == 1 | smoking == 0) > nb_dp(DEATH_EVENT == 1 | smoking == 1) \n","d94add4c":"# Modelling","6d03ece6":"#### Time estimation.","a7ea13ed":"**Conclusion**:\nTwo attributes that patient die mostly are\n1. **Creatinine Kinase**\n2. **serum_creatinine**","2c0e4210":"**BE FREE TO SHARE, DOWNLOAD AND UPVOTE. THANKS FOR READY!**","735ada80":"**Insights**\n\n1. **Age median of cv patients where DEATH_EVENT = 0 is 60 years old**.\n2. **Age median of cv patients where DEATH_EVENT = 1 is 65 years old**.","e3aa6cd5":"## What are numeric attributes that seem to come from poisson process or Normal process for death of the cardiovascular population?\n\nIn this part, we are making test hypothesis to know what attribute come from poisson process or normal process in the death of the cardiovasc. population.  ","d6dc51b1":"### Death's patient visualization.","d4981457":"<a id='mod'> <\/a>","ebd8e818":"**Some attribute at DEATH_EVENT=1 seems to come from poisson process or normal process. We can check it later.**","8f9edcdd":"<a id='heart'> <\/a>","0b4f3f85":"**All patients where DEATH_EVENT = 1 have central tendency (average time) less than or equal to 75 days.**","75defbd4":"**This plot shows the estimation of age with confidence interval(95%) when DEATH_EVENT = 0 and DEATH_EVENT = 1. We can see that the central tendency (mean estimated) for DEATH_EVENT = 0 is less than 60 years. But for DEATH_EVENT = 1 is greater than 60 years old.**","dbcca2c5":"## Find relevant informative attributes that causes heart disease.\n\nD'ont forget that we use only data where patient have DEATH_EVENT = 1. Do not forget that each dot is a patient","538f290f":"# Visualization\n\nNow, we create multibarplot, multiboxplot, multihistogram. And study each numeric attribute with all categorical attributes.","1b07811a":"1. **50% of death's patient have platelets greater than 255300 kiloplatelets\/mL**\n2. **50% of death's patient have platelets less than 255300 kiloplatelets\/mL**\n\nWe can said that platelets does not cause fatality of patient.","5a85eefa":"**69% of patient does not smoke. but 32% of patient smokes.**","d011deeb":"# Load and prepare data","4d247887":"<a id='rel'> <\/a>","f3fbfda7":"#### Ejection_fraction(%)\n\n**EF** is a measurement expressed as a percentage of how much blood the left ventricle pumps out with each contraction.\n\n**How much blood is pumped out?**\n1. **Normal Ejection Fraction = 50-70%**. (confortable during activity).\n2. **Bordeline Ejection Fraction = 41-49%** (symptom may become noticeable during activity).\n3. **Reduced Ejection Fraction <= 40%** (symptom may become noticeable during activity).","c2a7f70f":"<a id='load'> <\/a>","395316d6":"**The best learner for this problem is XGBoost**.","22b473d5":"<a id='viz'> <\/a>"}}