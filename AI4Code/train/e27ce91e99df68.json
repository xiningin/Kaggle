{"cell_type":{"4a6c3474":"code","f1ee00a0":"code","ac3403bf":"code","3b881881":"code","4bbfdb4c":"code","895cd004":"code","662f0d1e":"code","d8f2c267":"code","5f592776":"code","95a18d67":"code","6e03be4b":"code","e2a1c917":"code","8792921e":"code","cee50630":"code","fd653930":"code","19597950":"code","2b31c3df":"code","a5c7c982":"code","766a0423":"code","d22ab5a3":"code","bff332f8":"code","d3588264":"code","9c6cfbc2":"code","6565fab8":"code","899cfef3":"code","003c2773":"code","1cd68589":"code","793e237b":"code","8f3c1f57":"code","1cc0a483":"code","e425d767":"code","5b789e07":"code","d7c8ea67":"code","d16ff28e":"code","f6a632e8":"code","0dbd0068":"code","c2f600f6":"code","44268256":"code","62bd1007":"code","d10d9aee":"code","9c84d7d0":"code","d0d74f80":"code","daacd0bf":"code","7d256bf3":"code","1bbc9933":"code","b1c0bba0":"code","18270582":"code","a83ca937":"code","7f9b16cd":"code","b98d311c":"code","8f1262c0":"code","51965ddb":"code","c58f48c3":"code","bbe6d778":"code","5dd311dd":"code","65591c53":"code","eb6f9ddf":"code","995a6375":"code","ded7c406":"code","60302825":"code","a760f55d":"code","a3487ec1":"code","94a11c69":"code","d4e0d1b3":"code","f2d3bbc6":"code","8a0c2a2e":"code","8a6673e7":"code","258d38bc":"code","3609346a":"code","b1b26f4b":"code","0e5c2e15":"code","ea54f888":"code","18179aa6":"code","626117bb":"code","255ea9d9":"code","6c4976c6":"code","d9e5f651":"code","03eccea6":"code","5a2a9a7d":"code","8d3130ce":"code","581caf5e":"code","28f44932":"code","c6e001a8":"code","6a18eeef":"code","0e4f78eb":"code","edbfb851":"code","39317a4a":"code","e56f3a1e":"code","ac11face":"code","dd8f8fb3":"code","a67a2372":"code","211ef7a4":"code","b075652c":"code","486227ae":"code","db83dd9b":"code","32acbbf4":"code","69071c06":"code","74326d21":"code","e763fbfc":"code","7c5150c8":"code","76419295":"code","b4bd1bec":"code","587300c7":"code","a8142908":"code","1e0abdb8":"code","75472d25":"code","ea6e620e":"code","f6f31be6":"code","a14c4e69":"code","dacf0195":"code","5fb41d15":"code","25744899":"code","fea64c42":"code","c1f4c4c5":"markdown","b364f160":"markdown","089eec3d":"markdown","f5f1d33a":"markdown","415e4849":"markdown","a7f83bab":"markdown","abd552e0":"markdown","973fab50":"markdown","8dc24c21":"markdown","decdf2db":"markdown","9f16054d":"markdown","5ed9f6a7":"markdown","c9d6ff7c":"markdown","3a5207aa":"markdown","74d4a321":"markdown","396f672c":"markdown","0cfbf366":"markdown","121b4396":"markdown","3551dffc":"markdown","261d2694":"markdown","cf321018":"markdown","b52984ba":"markdown","53a49ee5":"markdown","c87eef68":"markdown","bebcbe4d":"markdown","f292da82":"markdown","b2d56ffa":"markdown","51c32faf":"markdown","6f1f28ae":"markdown","ff04f6ec":"markdown","760c4752":"markdown","b093ea1f":"markdown","f2215d3c":"markdown","03731ff8":"markdown","954ad5ce":"markdown","344ffa76":"markdown","fe5fffca":"markdown","935ac9aa":"markdown","bd7796d6":"markdown","c31221ac":"markdown","59b4dcdf":"markdown","69fa66ad":"markdown","35e7fff8":"markdown","b2b8816c":"markdown","92d0d822":"markdown","8c3d238a":"markdown","5311445e":"markdown","010b819b":"markdown","150a75de":"markdown","0aec6157":"markdown","5adde6cb":"markdown","43b5ba80":"markdown","118c58e6":"markdown","00d442c5":"markdown","b64b6278":"markdown","aa3a02f8":"markdown","93420483":"markdown","554b96b1":"markdown","3ebe477c":"markdown","ccba18d8":"markdown","ce4b2e99":"markdown","2e81d71a":"markdown","62d150d7":"markdown"},"source":{"4a6c3474":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport holoviews as hv\nfrom holoviews import opts\nhv.extension('bokeh')\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.metrics import accuracy_score, f1_score, roc_auc_score\nimport os\nfrom scipy import signal\nimport lightgbm as lgb\nimport shap","f1ee00a0":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ac3403bf":"experiment_result = pd.read_csv(\"\/kaggle\/input\/tool-wear-detection-in-cnc-mill\/train.csv\")\nprint(f'train.csv : {experiment_result.shape}')\nexperiment_result.head(3)","3b881881":"experiment_tmp = pd.read_csv(\"\/kaggle\/input\/tool-wear-detection-in-cnc-mill\/experiment_01.csv\")\nprint(f'experiment_XX.csv : {experiment_tmp.shape}')\nprint(experiment_tmp.columns)\nexperiment_tmp.head(3)","4bbfdb4c":"plt.figure(figsize=(25,7))\nplt.plot(df['X1_DCBusVoltage'])","895cd004":"experiment_result['passed_visual_inspection'] = experiment_result['passed_visual_inspection'].fillna('no')","662f0d1e":"frames = []\nfor i in range(1,19):\n    #load files\n    exp_num = '0' + str(i) if i < 10 else str(i)\n    frame = pd.read_csv(f\"\/kaggle\/input\/tool-wear-detection-in-cnc-mill\/experiment_{exp_num}.csv\")\n\n    #load each experiment result row\n    exp_result_row = experiment_result[experiment_result['No'] == i]\n    frame['exp_num'] = i\n\n    #add experiment settings to features\n    frame['material'] = exp_result_row.iloc[0]['material']\n    frame['feedrate'] = exp_result_row.iloc[0]['feedrate']\n    frame['clamp_pressure'] = exp_result_row.iloc[0]['clamp_pressure']\n    \n    #add experiment result to features\n    frame['tool_condition'] = exp_result_row.iloc[0]['tool_condition']\n    frame['machining_finalized'] = exp_result_row.iloc[0]['machining_finalized']\n    frame['passed_visual_inspection'] = exp_result_row.iloc[0]['passed_visual_inspection']\n\n    frames.append(frame)\n\ndf = pd.concat(frames, ignore_index = True)\ndf.head()","d8f2c267":"df.shape","5f592776":"df['Machining_Process'].value_counts().sort_index()","95a18d67":"print(f\"Count of Starting label in Machining_Process column is 1 only in experimet_{df[df['Machining_Process']=='Starting'].exp_num.value_counts().index[0]}\")\nprint(f\"Count of end label in Machining_Process column is 8 only in experimet_{df[df['Machining_Process']=='end'].exp_num.value_counts().index[0]}\")","6e03be4b":"df.replace({'Machining_Process': {'Starting':'Prep','end':'End'}}, inplace=True)","e2a1c917":"feedrate = hv.Distribution(df['feedrate']).opts(title=\"Distribution of feedrate\", color=\"green\", xlabel=\"Feedrate\", ylabel=\"Density\")\nclamp = hv.Distribution(df['clamp_pressure']).opts(title=\"Distribution of clamp pressure\", color=\"green\", xlabel=\"Pressure\", ylabel=\"Density\")\nmaterial = hv.Bars(df['material'].value_counts()).opts(title=\"Material Count\", color=\"green\", xlabel=\"Material\", ylabel=\"Count\")\n(feedrate + clamp + material).opts(opts.Bars(width=300, height=300,tools=['hover'],show_grid=True)).cols(2)","8792921e":"tool_df = np.round(df['tool_condition'].value_counts(normalize=True) * 100)\nfinalized_df = np.round(df['machining_finalized'].value_counts(normalize=True) * 100)\nvis_passed_df = np.round(df['passed_visual_inspection'].value_counts(normalize=True) * 100)\ntool_wear = hv.Bars(tool_df).opts(title=\"Tool Wear Count\", color=\"green\", xlabel=\"Worn\/Unworn\", ylabel=\"Percentage\", yformatter='%d%%')\nfinalized = hv.Bars(finalized_df).opts(title=\"Finalized Count\", color=\"green\", xlabel=\"Yes\/No\", ylabel=\"Percentage\", yformatter='%d%%')\nvis_inspection = hv.Bars(vis_passed_df).opts(title=\"Visual Inspection Passed Count\", color=\"green\", xlabel=\"Yes\/No\", ylabel=\"Percentage\", yformatter='%d%%')\n(tool_wear + finalized + vis_inspection).opts(opts.Bars(width=300, height=300,tools=['hover'],show_grid=True)).cols(2)","cee50630":"finalized_df_worn = np.round(df[df['tool_condition']=='worn']['machining_finalized'].value_counts(normalize=True) * 100)\nfinalized_df_unworn = np.round(df[df['tool_condition']=='unworn']['machining_finalized'].value_counts(normalize=True) * 100)\nvis_passed_df_worn = np.round(df[df['tool_condition']=='worn']['passed_visual_inspection'].value_counts(normalize=True) * 100)\nvis_passed_df_unworn = np.round(df[df['tool_condition']=='unworn']['passed_visual_inspection'].value_counts(normalize=True) * 100)\nfinalized_worn = hv.Bars(finalized_df_worn).opts(title=\"[WORN] Finalized Count\", color=\"orange\", xlabel=\"Yes\/No\", ylabel=\"Percentage\", yformatter='%d%%')\\\n            * hv.Text('yes', 15, f\"{np.round(finalized_df_worn['yes']\/sum(finalized_df_worn)*100)}%\")\\\n            * hv.Text('no', 15, f\"{np.round(finalized_df_worn['no']\/sum(finalized_df_worn)*100)}%\")\nfinalized_unworn = hv.Bars(finalized_df_unworn).opts(title=\"[UNWORN] Finalized Count\", color=\"orange\", xlabel=\"Yes\/No\", ylabel=\"Percentage\", yformatter='%d%%')\\\n            * hv.Text('yes', 15, f\"{np.round(finalized_df_unworn['yes']\/sum(finalized_df_unworn)*100)}%\")\\\n            * hv.Text('no', 15, f\"{np.round(finalized_df_unworn['no']\/sum(finalized_df_unworn)*100)}%\")\nvis_inspection_worn = hv.Bars(vis_passed_df_worn).opts(title=\"[WORN] Visual Inspection Passed Count\", color=\"green\", xlabel=\"Yes\/No\", ylabel=\"Percentage\", yformatter='%d%%')\\\n            * hv.Text('yes', 45, f\"{np.round(vis_passed_df_worn['yes']\/sum(vis_passed_df_worn)*100)}%\")\\\n            * hv.Text('no', 45, f\"{np.round(vis_passed_df_worn['no']\/sum(vis_passed_df_worn)*100)}%\")\nvis_inspection_unworn = hv.Bars(vis_passed_df_unworn).opts(title=\"[UNWORN] Visual Inspection Passed Count\", color=\"green\", xlabel=\"Yes\/No\", ylabel=\"Percentage\", yformatter='%d%%')\\\n            * hv.Text('yes', 15, f\"{np.round(vis_passed_df_unworn['yes']\/sum(vis_passed_df_unworn)*100)}%\")\\\n            * hv.Text('no', 15, f\"{np.round(vis_passed_df_unworn['no']\/sum(vis_passed_df_unworn)*100)}%\")\n((finalized_worn + finalized_unworn) + (vis_inspection_worn + vis_inspection_unworn)).opts(opts.Bars(width=400, height=300,tools=['hover'],show_grid=True)).cols(2)","fd653930":"worn_fin_vis = pd.concat([finalized_df_worn, vis_passed_df_worn], axis=1,sort=True).rename(columns={'machining_finalized':'[WORN] Finalized', 'passed_visual_inspection':'[WORN] Visual Inspection Passed'})\nworn_fin_vis = pd.melt(worn_fin_vis.reset_index(), ['index']).rename(columns={'index':'Yes\/No', 'variable':'Outputs'})\nhv.Bars(worn_fin_vis, ['Outputs','Yes\/No'], 'value').opts(opts.Bars(title=\"Machining Finalized and Passed Visual Inspection by Worn Tool Count\", width=700, height=400,tools=['hover'],\\\n                                                                show_grid=True, ylabel=\"Percentage\", yformatter='%d%%'))","19597950":"hv.Bars(df['Machining_Process'].value_counts()).opts(title=\"Machining Process Count\", color=\"red\", xlabel=\"Machining Processes\", ylabel=\"Count\")\\\n                                        .opts(opts.Bars(width=500, height=300,tools=['hover'],xrotation=45,show_grid=True))","2b31c3df":"def plot_ts(col, color='red', yformat='%d%%'):\n    v_list = []\n    for i in range(1,19):\n        v = hv.Curve(df[df['exp_num']==i].reset_index()[col]).opts(title=f\"{col} in  experiment {i}\", xlabel=\"Time\", ylabel=f\"{col}\", yformatter=yformat)\\\n                                                          .opts(width=300, height=150,tools=['hover'],show_grid=True,fontsize=8, color=color)\n        v_list.append(v)\n    return (v_list[0] + v_list[1] + v_list[2] + v_list[3] + v_list[4] + v_list[5] + v_list[6] + v_list[7] + v_list[8] + v_list[9] + v_list[10] + v_list[11] + v_list[12]\\\n            + v_list[13] + v_list[14] + v_list[15] + v_list[16] + v_list[17]).opts(shared_axes=False).cols(6)","a5c7c982":"plot_ts('X1_ActualVelocity', color='red', yformat='%d mm\/s')","766a0423":"plot_ts('Y1_ActualVelocity', color='orange', yformat='%d mm\/s')","d22ab5a3":"plot_ts('Z1_ActualVelocity', color='green', yformat='%d mm\/s')","bff332f8":"plot_ts('S1_ActualVelocity', color='blue', yformat='%d mm\/s')","d3588264":"plot_ts('X1_CurrentFeedback', color='red', yformat='%d A')","9c6cfbc2":"plot_ts('Y1_CurrentFeedback', color='orange', yformat='%d A')","6565fab8":"plot_ts('Z1_CurrentFeedback', color='green', yformat='%d A')","899cfef3":"plot_ts('S1_CurrentFeedback', color='blue', yformat='%d A')","003c2773":"plot_ts('X1_DCBusVoltage', color='red', yformat='%.1f V')","1cd68589":"plot_ts('Y1_DCBusVoltage', color='orange', yformat='%.1f V')","793e237b":"plot_ts('Z1_DCBusVoltage', color='green', yformat='%.1f V')","8f3c1f57":"plot_ts('S1_DCBusVoltage', color='blue', yformat='%.1f V')","1cc0a483":"g = sns.pairplot(df, hue='tool_condition', vars=[\"feedrate\",\"clamp_pressure\"])\ng.fig.suptitle(\"Tool Condition - feedrate\/clamp pressure\", y=1.1, fontsize=20)\ng.fig.set_figheight(6)\ng.fig.set_figwidth(9)\nplt.show()","e425d767":"g = sns.pairplot(df, hue='machining_finalized', vars=[\"feedrate\",\"clamp_pressure\"])\ng.fig.suptitle(\"Machining Finalized - feedrate\/clamp pressure\", y=1.1, fontsize=20)\ng.fig.set_figheight(6)\ng.fig.set_figwidth(9)\nplt.show()","5b789e07":"g = sns.pairplot(df, hue='tool_condition', vars=['X1_ActualVelocity','Y1_ActualVelocity','Z1_ActualVelocity','S1_ActualVelocity'])\ng.fig.suptitle(\"Tool Condition - velocity\", y=1.1, fontsize=20)\ng.fig.set_figheight(6)\ng.fig.set_figwidth(9)\ng.fig.get_children()[-1].set_bbox_to_anchor((1.1, 0.5, 0, 0))\nplt.show()","d7c8ea67":"g = sns.pairplot(df, hue='machining_finalized', vars=['X1_ActualVelocity','Y1_ActualVelocity','Z1_ActualVelocity','S1_ActualVelocity'])\ng.fig.suptitle(\"Machining Finalized - velocity\", y=1.1, fontsize=20)\ng.fig.set_figheight(6)\ng.fig.set_figwidth(9)\ng.fig.get_children()[-1].set_bbox_to_anchor((1.1, 0.5, 0, 0))\nplt.show()","d16ff28e":"np.seterr(divide='ignore', invalid='ignore')\ng = sns.pairplot(df, hue='tool_condition', vars=['X1_CurrentFeedback','Y1_CurrentFeedback','Z1_CurrentFeedback','S1_CurrentFeedback'])\ng.fig.suptitle(\"Tool Condition - Current\", y=1.1, fontsize=20)\ng.fig.set_figheight(6)\ng.fig.set_figwidth(9)\ng.fig.get_children()[-1].set_bbox_to_anchor((1.1, 0.5, 0, 0))\nplt.show()","f6a632e8":"g = sns.pairplot(df, hue='machining_finalized', vars=['X1_CurrentFeedback','Y1_CurrentFeedback','Z1_CurrentFeedback','S1_CurrentFeedback'])\ng.fig.suptitle(\"Machining Finalized - Current\", y=1.1, fontsize=20)\ng.fig.set_figheight(6)\ng.fig.set_figwidth(9)\ng.fig.get_children()[-1].set_bbox_to_anchor((1.1, 0.5, 0, 0))\nplt.show()","0dbd0068":"g = sns.pairplot(df, hue='tool_condition', vars=['X1_DCBusVoltage','Y1_DCBusVoltage','Z1_DCBusVoltage','S1_DCBusVoltage'])\ng.fig.suptitle(\"Tool Condition - Voltage\", y=1.1, fontsize=20)\ng.fig.set_figheight(6)\ng.fig.set_figwidth(9)\ng.fig.get_children()[-1].set_bbox_to_anchor((1.1, 0.5, 0, 0))\nplt.show()","c2f600f6":"g = sns.pairplot(df, hue='machining_finalized', vars=['X1_DCBusVoltage','Y1_DCBusVoltage','Z1_DCBusVoltage','S1_DCBusVoltage'])\ng.fig.suptitle(\"Machining Finalized - Voltage\", y=1.1, fontsize=20)\ng.fig.set_figheight(6)\ng.fig.set_figwidth(9)\ng.fig.get_children()[-1].set_bbox_to_anchor((1.1, 0.5, 0, 0))\nplt.show()","44268256":"def plot_fft(col, color='red', peak_thr=1):\n    v_list = []\n    dt = 0.1 # experiment data was collected per 100ms(0.1sec)\n    for i in range(1,19):\n        f = df[df['exp_num']==i].reset_index()[col]\n        N = len(f)\n        t = np.arange(0, N*dt, dt)\n        freq = np.linspace(0, 1.0\/dt, N)\n        F = np.fft.fft(f)\n        F_abs = np.abs(F) \/ (N\/2) \n        F_abs[0] = F_abs[0] \/ 2\n        \n        maximal_idx = signal.argrelmax(F_abs, order=1)[0] \n        peak_cut = peak_thr\n        maximal_idx = maximal_idx[(F_abs[maximal_idx] > peak_cut) & (maximal_idx <= N\/2)]\n        \n        v = hv.Curve((freq[:int(N\/2)+1], F_abs[:int(N\/2)+1])).opts(title=f\"{col} in  experiment {i}\", xlabel=\"Frequency(Hz)\", ylabel=f\"Amplitude\")\\\n                                                          .opts(width=300, height=150,tools=['hover'],show_grid=True,fontsize=8, color=color)\\\n            * hv.Scatter((freq[maximal_idx], F_abs[maximal_idx])).opts(color='lime', size=5)\n        \n        v_list.append(v)\n    return (v_list[0] + v_list[1] + v_list[2] + v_list[3] + v_list[4] + v_list[5] + v_list[6] + v_list[7] + v_list[8] + v_list[9] + v_list[10] + v_list[11] + v_list[12]\\\n            + v_list[13] + v_list[14] + v_list[15] + v_list[16] + v_list[17]).opts(shared_axes=False).cols(6)","62bd1007":"plot_fft('X1_ActualVelocity', color='red', peak_thr=3)","d10d9aee":"plot_fft('Y1_ActualVelocity', color='orange', peak_thr=3)","9c84d7d0":"plot_fft('Z1_ActualVelocity', color='green', peak_thr=3)","d0d74f80":"plot_fft('S1_ActualVelocity', color='blue', peak_thr=9)","daacd0bf":"plot_fft('X1_CurrentFeedback', color='red', peak_thr=1.2)","7d256bf3":"plot_fft('Y1_CurrentFeedback', color='orange', peak_thr=1.2)","1bbc9933":"plot_fft('Z1_CurrentFeedback', color='green', peak_thr=3)","b1c0bba0":"plot_fft('X1_CurrentFeedback', color='blue', peak_thr=1.2)","18270582":"plot_fft('X1_DCBusVoltage', color='red', peak_thr=0.015)","a83ca937":"plot_fft('Y1_DCBusVoltage', color='orange', peak_thr=0.02)","7f9b16cd":"plot_fft('Z1_DCBusVoltage', color='green', peak_thr=3)","b98d311c":"plot_fft('S1_DCBusVoltage', color='blue', peak_thr=0.15)","8f1262c0":"for ax in ['X','Y','Z','S']:\n    df[f'{ax}1_Position_Diff'] = abs(df[f'{ax}1_CommandPosition']-df[f'{ax}1_ActualPosition'])\n    df[f'{ax}1_Velocity_Diff'] = abs(df[f'{ax}1_CommandVelocity']-df[f'{ax}1_ActualVelocity'])\n    df[f'{ax}1_Acceleration_Diff'] = abs(df[f'{ax}1_CommandAcceleration']-df[f'{ax}1_ActualAcceleration'])","51965ddb":"for col in ['ActualPosition','ActualVelocity','ActualAcceleration','CurrentFeedback','DCBusVoltage','OutputCurrent','OutputVoltage','OutputPower']:\n    dt = 0.1\n    for i in range(1,19):\n        for ax in ['X','Y','Z','S']:\n            try:\n                f = df[df['exp_num']==i].reset_index()[f'{ax}1_{col}']\n            except:\n                continue\n                \n            N = len(f)\n            t = np.arange(0, N*dt, dt)\n            freq = np.linspace(0, 1.0\/dt, N)\n            F = np.fft.fft(f)\n            F_abs = np.abs(F) \/ (N\/2) \n            F_abs[0] = F_abs[0] \/ 2\n            maximal_idx = signal.argrelmax(F_abs, order=1)[0]\n\n            high_amp = np.max(F_abs[maximal_idx]) if len(maximal_idx) > 0 else 0\n            high_freq = freq[maximal_idx][np.argmax(F_abs[maximal_idx])] if len(maximal_idx) > 0 else 0\n\n            df.loc[df['exp_num']==i,f'{ax}1_{col}_High_Amp'] = high_amp\n            df.loc[df['exp_num']==i,f'{ax}1_{col}_High_Freq'] = high_freq\n            df.loc[df['exp_num']==i,f'{ax}1_{col}_High_Amp_Freq'] = high_amp * high_freq","c58f48c3":"feature_df = df.copy()\nfeature_df['Machining_Process'] = LabelEncoder().fit_transform(feature_df['Machining_Process']).astype(np.int8)\nfeature_df['tool_condition'] = LabelEncoder().fit_transform(feature_df['tool_condition']).astype(np.int8)\nfeature_df['machining_finalized'] = LabelEncoder().fit_transform(feature_df['machining_finalized']).astype(np.int8)\nfeature_df['passed_visual_inspection'] = LabelEncoder().fit_transform(feature_df['passed_visual_inspection']).astype(np.int8)\nfeature_df.drop(['material','exp_num'], axis=1, inplace=True)\nfeature_df.head(3)","bbe6d778":"feature_df.shape,","5dd311dd":"feature_df['X1_DCBusVoltage'].value_counts()","65591c53":"y_series = feature_df['tool_condition']\nx_df = feature_df.drop(['tool_condition','machining_finalized','passed_visual_inspection'], axis=1) \nX_train, X_valid, Y_train, Y_valid = train_test_split(x_df, y_series, test_size=0.2, random_state=0, stratify=y_series)","eb6f9ddf":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV","995a6375":"clf_rf = RandomForestClassifier()\nparametrs = { 'n_estimators': range (10, 51, 10),\n              'max_depth': range (1,13, 2),\n              'min_samples_leaf': range (1,8),\n              'min_samples_split': range (2,10,2)}\ngrid = GridSearchCV(clf_rf, parametrs, cv=5,n_jobs=-1)","ded7c406":"grid.fit(X_train,Y_train)","60302825":"feature_imp = pd.DataFrame()\nfeature_imp['feature'] = list(x_df.columns)\nfeature_imp['importance'] = grid.best_estimator_.feature_importances_\nhv.Bars(feature_imp.sort_values(by='importance', ascending=False)[0:31][::-1]).opts(title=\"Feature Importance\", color=\"purple\", xlabel=\"Features\", ylabel=\"Importance\", invert_axes=True)\\\n                            .opts(opts.Bars(width=700, height=700, tools=['hover'], show_grid=True))","a760f55d":"from sklearn.ensemble import RandomForestRegressor","a3487ec1":"reg_rf = RandomForestRegressor(max_depth=3,\n min_samples_leaf=1,\n min_samples_split=2,\n n_estimators =10,random_state=42)","94a11c69":"reg_rf.fit(X_train,Y_train)","d4e0d1b3":"feature_imp = pd.DataFrame()\nfeature_imp['feature'] = list(x_df.columns)\nfeature_imp['importance'] = reg_rf.feature_importances_\nhv.Bars(feature_imp.sort_values(by='importance', ascending=False)[0:31][::-1]).opts(title=\"Feature Importance\", color=\"purple\", xlabel=\"Features\", ylabel=\"Importance\", invert_axes=True)\\\n                            .opts(opts.Bars(width=700, height=700, tools=['hover'], show_grid=True))","f2d3bbc6":"from sklearn.ensemble import GradientBoostingClassifier\n\ngb_clf =GradientBoostingClassifier(criterion='mse',\n learning_rate=0.1,\n loss='deviance',\n max_depth= 5,\n min_samples_leaf= 0.1,\n min_samples_split= 0.5,\n n_estimators=10,\n subsample=0.8,\n random_state=42)","8a0c2a2e":"gb_clf.fit(X_train,Y_train)","8a6673e7":"feature_imp = pd.DataFrame()\nfeature_imp['feature'] = list(x_df.columns)\nfeature_imp['importance'] = gb_clf.feature_importances_\nhv.Bars(feature_imp.sort_values(by='importance', ascending=False)[0:31][::-1]).opts(title=\"Feature Importance\", color=\"purple\", xlabel=\"Features\", ylabel=\"Importance\", invert_axes=True)\\\n                            .opts(opts.Bars(width=700, height=700, tools=['hover'], show_grid=True))","258d38bc":"from sklearn.ensemble import GradientBoostingRegressor","3609346a":"gb_reg =GradientBoostingRegressor(criterion='mse',\n learning_rate=0.1,\n loss='ls',\n max_depth= 5,\n min_samples_leaf= 0.1,\n min_samples_split= 0.5,\n n_estimators=10,\n subsample=0.8,\n random_state=42)","b1b26f4b":"gb_reg.fit(X_train,Y_train)","0e5c2e15":"feature_imp = pd.DataFrame()\nfeature_imp['feature'] = list(x_df.columns)\nfeature_imp['importance'] = gb_reg.feature_importances_\nhv.Bars(feature_imp.sort_values(by='importance', ascending=False)[0:31][::-1]).opts(title=\"Feature Importance\", color=\"purple\", xlabel=\"Features\", ylabel=\"Importance\", invert_axes=True)\\\n                            .opts(opts.Bars(width=700, height=700, tools=['hover'], show_grid=True))","ea54f888":"from xgboost import XGBClassifier","18179aa6":"model = XGBClassifier(booster='gbtree',objective='binary:logistic',\n                      min_child_weight=5, n_estimators=100,eval_metric='rmse',random_state=42)","626117bb":"model.fit(X_train, Y_train)","255ea9d9":"feature_imp = pd.DataFrame()\nfeature_imp['feature'] = list(x_df.columns)\nfeature_imp['importance'] = model.feature_importances_\nhv.Bars(feature_imp.sort_values(by='importance', ascending=False)[0:31][::-1]).opts(title=\"Feature Importance\", color=\"purple\", xlabel=\"Features\", ylabel=\"Importance\", invert_axes=True)\\\n                            .opts(opts.Bars(width=700, height=700, tools=['hover'], show_grid=True))","6c4976c6":"lgb_train = lgb.Dataset(X_train, Y_train)\nlgb_valid = lgb.Dataset(X_valid, Y_valid, reference=lgb_train)","d9e5f651":"params = {\n    'task' : 'train',\n    'boosting' : 'gbdt',\n    'objective': 'binary',\n    'metric': 'l2',\n    'num_leaves': 200,\n    'feature_fraction': 1.0,\n    'bagging_fraction': 1.0,\n    'bagging_freq': 0,\n    'min_child_samples': 5\n}\ngbm_tool_wear = lgb.train(params,\n            lgb_train,\n            num_boost_round=100,\n            valid_sets=lgb_valid,\n            early_stopping_rounds=100)","03eccea6":"feature_imp = pd.DataFrame()\nfeature_imp['feature'] = gbm_tool_wear.feature_name()\nfeature_imp['importance'] = gbm_tool_wear.feature_importance()\nhv.Bars(feature_imp.sort_values(by='importance', ascending=False)[0:31][::-1]).opts(title=\"Feature Importance\", color=\"purple\", xlabel=\"Features\", ylabel=\"Importance\", invert_axes=True)\\\n                            .opts(opts.Bars(width=700, height=700, tools=['hover'], show_grid=True))","5a2a9a7d":"from sklearn.ensemble import RandomForestClassifier","8d3130ce":"# \u041e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0430\nclf_RF = RandomForestClassifier(n_estimators=10, n_jobs=-1, random_state=42,max_depth=3,min_samples_leaf=1,min_samples_split=2)\nclf_RF.fit(X_train, Y_train)","581caf5e":"feature_imp = pd.DataFrame()\nfeature_imp['feature'] = list(x_df.columns)\nfeature_imp['importance'] = clf_RF.feature_importances_\nhv.Bars(feature_imp.sort_values(by='importance', ascending=False)[0:31][::-1]).opts(title=\"Feature Importance\", color=\"purple\", xlabel=\"Features\", ylabel=\"Importance\", invert_axes=True)\\\n                            .opts(opts.Bars(width=700, height=700, tools=['hover'], show_grid=True))","28f44932":"from keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Dropout, GRU\nfrom keras.layers import *\nfrom sklearn.preprocessing import MinMaxScaler","c6e001a8":"feature_df['X1_DCBusVoltage_High_Freq'] = feature_df['X1_DCBusVoltage_High_Freq'].astype(float)","6a18eeef":"feature_df.head()","0e4f78eb":"feature_df['X1_DCBusVoltage_High_Freq'][::500].plot(figsize=(20,6))\n","edbfb851":"import math","39317a4a":"d = feature_df.filter(['X1_DCBusVoltage_High_Freq'])","e56f3a1e":"dataset = d.values\nlen(dataset)","ac11face":"training_data_size = math.ceil(len(dataset)*.7)\ntraining_data_size","dd8f8fb3":"scaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(dataset)\nscaled_data","a67a2372":"train_data = scaled_data[0:training_data_size,:]\nx_train=[]\ny_train=[]\nfor i in range(60,len(train_data)):\n    x_train.append(train_data[i-60:i,0])\n    y_train.append(train_data[i,0])\n    if i<=61:\n        print(x_train)\n        print(y_train)","211ef7a4":"x_train, Y_train = np.array(x_train), np.array(y_train)\nx_train = np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))\nx_train.shape","b075652c":"model = Sequential()\nmodel.add(LSTM(50, return_sequences=True, input_shape = (x_train.shape[1], 1)))\nmodel.add(LSTM(50, return_sequences=False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))","486227ae":"model.compile(optimizer = 'adam', loss = 'mean_squared_error')","db83dd9b":"model.fit(x_train, y_train, batch_size=1,epochs=1)","32acbbf4":"test_data = scaled_data[training_data_size - 60:, :]\nx_test = []\ny_test = dataset[training_data_size:, :]\nfor i in range(60, len(test_data)):\n    x_test.append(test_data[i-60:i, 0])\n    ","69071c06":"x_test = np.array(x_test)","74326d21":"x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1],1))","e763fbfc":"predictions = model.predict(x_test)\npredictions = scaler.inverse_transform(predictions)","7c5150c8":"rmse = np.sqrt(np.mean(predictions - y_test)**2)\nrmse","76419295":"train = d[:training_data_size]\nvalid = d[training_data_size:]\nvalid['predictions'] = predictions\nplt.figure(figsize=(16,8))\nplt.plot(train['X1_DCBusVoltage_High_Freq'])\nplt.plot(valid[['X1_DCBusVoltage_High_Freq','predictions']])\nplt.show","b4bd1bec":"valid","587300c7":"plt.figure(figsize=(16,8))\nplt.plot(feature_df['X1_DCBusVoltage_High_Freq'])","a8142908":"y_series = feature_df['machining_finalized']\nx_df = feature_df.drop(['tool_condition','machining_finalized','passed_visual_inspection'], axis=1) \nX_train, X_valid, Y_train, Y_valid = train_test_split(x_df, y_series, test_size=0.2, random_state=0, stratify=y_series)\n\nlgb_train = lgb.Dataset(X_train, Y_train)\nlgb_valid = lgb.Dataset(X_valid, Y_valid, reference=lgb_train)","1e0abdb8":"params = {\n    'task' : 'train',\n    'boosting' : 'gbdt',\n    'objective': 'binary',\n    'metric': 'l2',\n    'num_leaves': 200,\n    'feature_fraction': 1.0,\n    'bagging_fraction': 1.0,\n    'bagging_freq': 0,\n    'min_child_samples': 5\n}\ngbm_machining_finalized = lgb.train(params,\n            lgb_train,\n            num_boost_round=100,\n            valid_sets=lgb_valid,\n            early_stopping_rounds=100)","75472d25":"feature_imp = pd.DataFrame()\nfeature_imp['feature'] = gbm_machining_finalized.feature_name()\nfeature_imp['importance'] = gbm_machining_finalized.feature_importance()\nhv.Bars(feature_imp.sort_values(by='importance', ascending=False)[0:31][::-1]).opts(title=\"Feature Importance\", color=\"purple\", xlabel=\"Features\", ylabel=\"Importance\", invert_axes=True)\\\n                            .opts(opts.Bars(width=700, height=700, tools=['hover'], show_grid=True))","ea6e620e":"# \u041e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0430\nclf_RF = RandomForestClassifier(n_estimators=10, n_jobs=-1, random_state=42,max_depth=3,min_samples_leaf=1,min_samples_split=2)\nclf_RF.fit(X_train, Y_train)","f6f31be6":"feature_imp = pd.DataFrame()\nfeature_imp['feature'] = list(x_df.columns)\nfeature_imp['importance'] = clf_RF.feature_importances_\nhv.Bars(feature_imp.sort_values(by='importance', ascending=False)[0:31][::-1]).opts(title=\"Feature Importance\", color=\"purple\", xlabel=\"Features\", ylabel=\"Importance\", invert_axes=True)\\\n                            .opts(opts.Bars(width=700, height=700, tools=['hover'], show_grid=True))","a14c4e69":"y_series = feature_df['passed_visual_inspection']\nx_df = feature_df.drop(['tool_condition','machining_finalized','passed_visual_inspection'], axis=1) \nX_train, X_valid, Y_train, Y_valid = train_test_split(x_df, y_series, test_size=0.2, random_state=0, stratify=y_series)\n\nlgb_train = lgb.Dataset(X_train, Y_train)\nlgb_valid = lgb.Dataset(X_valid, Y_valid, reference=lgb_train)","dacf0195":"params = {\n    'task' : 'train',\n    'boosting' : 'gbdt',\n    'objective': 'binary',\n    'metric': 'l2',\n    'num_leaves': 200,\n    'feature_fraction': 1.0,\n    'bagging_fraction': 1.0,\n    'bagging_freq': 0,\n    'min_child_samples': 5\n}\ngbm_passed_vis_inspection = lgb.train(params,\n            lgb_train,\n            num_boost_round=100,\n            valid_sets=lgb_valid,\n            early_stopping_rounds=100)","5fb41d15":"feature_imp = pd.DataFrame()\nfeature_imp['feature'] = gbm_passed_vis_inspection.feature_name()\nfeature_imp['importance'] = gbm_passed_vis_inspection.feature_importance()\nhv.Bars(feature_imp.sort_values(by='importance', ascending=False)[0:31][::-1]).opts(title=\"Feature Importance\", color=\"purple\", xlabel=\"Features\", ylabel=\"Importance\", invert_axes=True)\\\n                            .opts(opts.Bars(width=700, height=700, tools=['hover'], show_grid=True))","25744899":"# \u041e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0430\nclf_RF = RandomForestClassifier(n_estimators=10, n_jobs=-1, random_state=42,max_depth=3,min_samples_leaf=1,min_samples_split=2)\nclf_RF.fit(X_train, Y_train)","fea64c42":"feature_imp = pd.DataFrame()\nfeature_imp['feature'] = list(x_df.columns)\nfeature_imp['importance'] = clf_RF.feature_importances_\nhv.Bars(feature_imp.sort_values(by='importance', ascending=False)[0:31][::-1]).opts(title=\"Feature Importance\", color=\"purple\", xlabel=\"Features\", ylabel=\"Importance\", invert_axes=True)\\\n                            .opts(opts.Bars(width=700, height=700, tools=['hover'], show_grid=True))","c1f4c4c5":"## Multivariate Analysis","b364f160":"# Light GB","089eec3d":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","f5f1d33a":"### FFT Features\n<div class=\"alert alert-success\" role=\"alert\">\n<ul>\n<li>it is thought that <u>highest frequency and amplitude<\/u> can be good information to detect machinig failures.<\/li>\n<\/ul>\n<\/div>","415e4849":"\u041d\u0430 \u043f\u0440\u043e\u0442\u044f\u0436\u0435\u043d\u0438\u0438 \u0432\u0441\u0435\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043e\u0441\u0438 Z \u043f\u043e\u0447\u0442\u0438 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\u0414\u0438\u0444\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0435 \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u043d\u0430 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0439 \u043d\u0430 \u0432\u0441\u0435\u043c \u043f\u0440\u043e\u0442\u044f\u0436\u0435\u043d\u0438\u0438, \u0438 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0438 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u0431\u044b\u043b\u0430 \u043f\u0440\u0435\u043d\u0435\u0431\u0440\u0435\u0436\u0438\u043c\u043e \u043c\u0430\u043b\u0430 \u0434\u043b\u044f \u0438\u0437\u043d\u043e\u0441\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432.\n","a7f83bab":"## Case3 : Passed Visual Inspection","abd552e0":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","973fab50":"### Volatage","8dc24c21":"# XGBoost","decdf2db":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","9f16054d":">label encoding & drop unnecessary columns","5ed9f6a7":"## Case2 : Machining Finalized","c9d6ff7c":"## Feature Engineering","3a5207aa":"### Current","74d4a321":"## Univariate Analysis","396f672c":"# 3. Load the dataset","0cfbf366":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","121b4396":"### Current\n><div class=\"alert alert-success\" role=\"alert\">\n><ul>\n><li>experiments which had worn tools are not distinctive.<\/li>\n><li>experiments which did not finalize machining and pass visual inspection are seem to have low frequecy of change in <u>X\/Y\/S<\/u> axes.<\/li>\n><\/ul>\n><\/div>","3551dffc":"## Case1 : Tool Condition","261d2694":"### Machine Inputs\n><div class=\"alert alert-success\" role=\"alert\">\n>Observation of material is only 'wax'. So this column is <u>not applicable to modeling feature<\/u>.\n><\/div>","cf321018":"> plot function to output all experiment fft result","b52984ba":"### Machine Outputs\n><div class=\"alert alert-success\" role=\"alert\">\n><ul>\n>    <li>Count of 'Not Passed Visual Insepction' is larger than that of 'Not Finalized Machining'.\n>        <p>This means milling by machineries is not reliable enough, and <u>humans have some tricks or technique to detect failures, which machineries can't do.<\/u><\/p><\/li>\n>    <li>Count of 'Not Finalized Machining' with worn tool is almost same as that with unworn tool.<\/li>\n>    <li>Count of 'Not Passed Visual Insepction' with worn tool is relatively larger than that with unworn tool.\n>        <p>It is thought that machining with worn tool does not affect machinig process itself, <u>but humans can detect a slight difference affected by worn tools.<\/u><\/p><\/li>\n><\/ul>\n><\/div>","53a49ee5":"# Table of Contents<a id='top'><\/a>\n\n>1. [Overview](#1.-Overview)  \n>   * [Project Detail](#Project-Detail)\n>   * [Goal of this notebook](#Goal-of-this-notebook)\n>1. [Import libraries](#2.-Import-libraries)\n>1. [Load the dataset](#3.-Load-the-dataset)\n>1. [Pre-processing](#4.-Pre-processing)\n>1. [EDA](#5.-EDA)  \n>    * [Basic Analysis](#Basic-Analysis)\n>    * [Univariate Analysis](#Univariate-Analysis)\n>    * [Multivariate Analysis](#Multivariate-Analysis)\n>    * [Frequency Analysis](#Frequency-Analysis)\n>1. [Modeling](#6.-Modeling)\n>    * [Feature Engineering](#Feature-Engineering)\n>    * [Case1 : Tool Condition](#Case1-:-Tool-Condition)\n>    * [Case2 : Machining Finalized](#Case2-:-Machining-Finalized)\n>    * [Case3 : Passed Visual Inspection](#Case3-:-Passed-Visual-Inspection)\n>1. [Conclusion](#7.-Conclusion)\n>1. [References](#8.-References)","c87eef68":"### Machining Process","bebcbe4d":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","f292da82":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","b2d56ffa":"# 5. EDA\n### Some points to focus on\n>* Machining Process Unique\n>* Mean value of velocity,voltage,feedrate(x,y,z)\n>* distribution of feedrate, clamp_pressure\n>* correlation of each features\n>* time series plot of each experiment\n>* difference of distribution for each output feature","51c32faf":"### Velocity\n><div class=\"alert alert-success\" role=\"alert\">\n>Machining Finalized\n><ul>\n><li>distribution of <b>velocity in S axis<\/b> in machining not finalized experiment has <u>lower kurtosis<\/u>.<\/li>\n><\/ul>\n><\/div>","6f1f28ae":">NaN in passed_visual_inspection in experiment result means machining_finalized is no, which means machining process was not finished correctly and did not proceed to visual inspection process. So, we need to fill NaN with no.","ff04f6ec":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","760c4752":">adding each experiment settings and result to experiment time series data to make one total dataframe.","b093ea1f":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","f2215d3c":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","03731ff8":"# 1. Overview","954ad5ce":"# GB Regressor","344ffa76":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","fe5fffca":"# 4. Pre-processing","935ac9aa":"# RF Classifier","bd7796d6":"# RF Regressor","c31221ac":"## Project Detail\n>In [this Dataset](https:\/\/www.kaggle.com\/shasun\/tool-wear-detection-in-cnc-mill), collected data in machining experiments are given. Machining data was collected from a CNC machine for variations of tool condition, feed rate, and clamping pressure. <br\/>\n><ul>\n>    <li>feed rate<\/li>\n>        <p>relative velocity of the cutting tool along the workpiece (mm\/s)<\/p>\n>    <li>clamping pressure<\/li>\n>        <p>pressure used to hold the workpiece in the vise (bar)<\/p>\n><\/ul>\n>In 18 machining experiments, time series data was collected with a sampling rate of 100 ms from the 4 motors in the CNC (X, Y, Z axes and spindle).<br\/>\n>And output of each experiments includes tool condition (unworn and worn tools) and whether or not the tool passed visual inspection.<br\/>\n>We can enjoy this dataset for tool wear detection or detection of inadequate clamping.\n\n## Goal of this notebook\n>* Practice EDA technique\n>* Practice visualising technique(especially using bokeh via holoviews)\n>* Practice feature enginieering technique\n>    * Lag features\n>    * Differential feature\n>* Practice modeling technique\n>    * LightGBM\n>* Causal analysis skill\n>* Frequency analysis skill\n>    * FFT","59b4dcdf":"## Basic Analysis","69fa66ad":"### Velocity\n><div class=\"alert alert-success\" role=\"alert\">\n><ul>\n><li>experiments which had worn tools are not distinctive.<\/li>\n><li>experiments which did not finalize machining and pass visual inspection are seem to have certain patterns in <u>X\/Y\/S<\/u> axes.\n>    <p>wide range of change<br\/> \n>       low frequecy of change<\/p><\/li>\n><\/ul>\n><\/div>","35e7fff8":"# 6. Modeling\n* Target variables :\n    * tool_condition\n    * machining_finalized\n    * passed_visual_inspection\n* Through some experiment cases, I examined which features are more important to make robust prediction models.\n    * Especially I wanted to know which CNC imformation, for example tool position or current, is most important to detect machine failure.","b2b8816c":"> plot function to output all experiment time-series","92d0d822":"### Differential Features\n<div class=\"alert alert-success\" role=\"alert\">\n<ul>\n<li>differences between <b>Actual<\/b> and <b>Command<\/b> position can indicate <u>a sign of maching failure<\/u>.<\/li>\n<\/ul>\n<\/div>","8c3d238a":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","5311445e":"### Feedrate \/ Clamp Pressure\n><div class=\"alert alert-success\" role=\"alert\">\n>Tool Condition\n><ul>\n><li>distributions of <b>clamp pressure<\/b> with unworn\/worn tool are almost same.<\/li>\n><li>distribution of <b>feedrate<\/b> with worn tool is <u>more wider<\/u> than that with unworn tool.<\/li>\n><\/ul>\n>Machining Finalized\n><ul>\n><li>distribution of <b>clamp pressure<\/b> in machining not finalized experiment has <u>lower kurtosis<\/u>.<\/li>\n><li>distribution of <b>feedrate<\/b> in machining not finalized experiment has <u>higher kurtosis<\/u>.<\/li>\n><\/ul>\n><\/div>","010b819b":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","150a75de":"# 2. Import libraries","0aec6157":"### Velocity","5adde6cb":"### Current\n><div class=\"alert alert-success\" role=\"alert\">\n>Machining Finalized\n><ul>\n><li>distribution of <b>current in X\/Y\/S axes<\/b> in machining not finalized experiment has <u>higher kurtosis<\/u>.<\/li>\n><\/ul>\n><\/div>","43b5ba80":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","118c58e6":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","00d442c5":"### Voltage\n><div class=\"alert alert-success\" role=\"alert\">\n>Machining Finalized\n><ul>\n><li>distribution of <b>voltage in X\/Y\/S axes<\/b> in machining not finalized experiment has <u>higher skewness<\/u>.<\/li>\n><\/ul>\n><\/div>","b64b6278":"### Voltage\n><div class=\"alert alert-success\" role=\"alert\">\n><ul>\n><li>experiments which had worn tools are not distinctive.<\/li>\n><li>experiments which did not finalize machining and pass visual inspection are seem to have low frequecy of change in <u>X\/Y\/S<\/u> axes.<\/li>\n><\/ul>\n><\/div>","aa3a02f8":"### Label Normalization\n<div class=\"alert alert-success\" role=\"alert\">\nCount of 'Starting' and 'end' label in Machining_Process column is relatevely small.<br\/>\nSo we need to normalize these outlier labels into alternative label.<br\/>\n<ul>\n    <li>Starting -> Prep<\/li>\n    <li>end -> End<\/li>\n<\/ul>\n<\/div>","93420483":"<h2 style=\"text-align:center;font-size:200%;;\">CNC milling machine - Tool Wear Detection<\/h2>\n<h3  style=\"text-align:center;\">Keywords : <span class=\"label label-success\">IoT<\/span> <span class=\"label label-success\">EDA<\/span> <span class=\"label label-success\">Classification<\/span> <span class=\"label label-success\">Causal Analysis<\/span> <span class=\"label label-success\">FFT<\/span><\/h3>","554b96b1":"# GB Classifier","3ebe477c":"# Tool Wear.\n\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043e\u0441\u044f\u043c X \u0438 S \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u0438\u0437\u043d\u043e\u0441 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430, \u0430 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435 \u043e\u0441\u0435\u0439 X \u0438 S \u043c\u043e\u0436\u0435\u0442 \u043f\u043b\u043e\u0445\u043e \u0432\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u0438\u0437\u043d\u043e\u0441 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430.\n\u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0438 \u043d\u0430\u043f\u0440\u044f\u0436\u0435\u043d\u0438\u0435 \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\n\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0411\u041f\u0424, \u0442\u0430\u043a\u0436\u0435 \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u0442\u043e\u043f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0438 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0438\u0437\u043d\u043e\u0441 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u043b \u0430\u043c\u043f\u043b\u0438\u0442\u0443\u0434\u0443 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0447\u0430\u0441\u0442\u043e\u0442.\n\n# Machining Finalized.\n\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043e\u0441\u044f\u043c X \u0438 Y \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u0438\u0437\u043d\u043e\u0441 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430, \u0430 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435 \u043e\u0441\u0435\u0439 X \u0438 Y \u043c\u043e\u0436\u0435\u0442 \u043f\u043b\u043e\u0445\u043e \u043f\u043e\u0432\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.\n\u041f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u043d\u0430\u043f\u0440\u044f\u0436\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\n\n# Passed Visual Inspection\n\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043e\u0441\u044f\u043c X \u0438 Y \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u0438\u0437\u043d\u043e\u0441 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430, \u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u043e\u0441\u0435\u0439 X \u0438 Y \u043c\u043e\u0436\u0435\u0442 \u043f\u043b\u043e\u0445\u043e \u043f\u043e\u0432\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.\n\u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0438 \u043d\u0430\u043f\u0440\u044f\u0436\u0435\u043d\u0438\u0435 \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\n\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0411\u041f\u0424, \u0432\u043e\u0437\u0440\u043e\u0441\u043b\u0430 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0437\u0430\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0440\u043f\u0443\u0441\u0430.\n\u0421\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u0443\u0441\u0442\u0430\u043b\u043e\u0441\u0442\u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430 \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u044b\u0439 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u043e\u043c.","ccba18d8":"## Frequency Analysis\n><div class=\"alert alert-success\" role=\"alert\">\n><ul>\n><li>experiments which did not finalize machining seem to have high amplitude in certain frequencies.\n><li>experiments which did not pass visual inspection seem to have high amplitude in certain frequencies too.\n>    <p>this is not so obvious in univariate plot above.<br\/>\n>       these discoveries observed in frequency analysis can be <u>related to why humans can detect machining failures<\/u>.<\/p><\/li>\n><\/ul>\n><\/div>","ce4b2e99":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","2e81d71a":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","62d150d7":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>"}}