{"cell_type":{"05b42c18":"code","b38bd196":"code","be8513d7":"code","94952408":"code","13e26620":"code","9b37088e":"code","3d9f3328":"code","45ab8269":"code","1abc9087":"code","7c76adf0":"code","1eec5c11":"code","7d6ad91d":"code","d2e4f102":"code","d9f9fff6":"code","b632e3d8":"code","17c9ff9e":"code","47667899":"code","691e7b1b":"code","73c232af":"code","fea02a79":"markdown","3a0fe709":"markdown","f892d156":"markdown","695345c7":"markdown","f9737dd4":"markdown","343077ac":"markdown","93ae2ed8":"markdown","e021cb15":"markdown","565de1e2":"markdown","79b5599f":"markdown","860c9dbd":"markdown","cbdfe2bd":"markdown","f9ffe31e":"markdown","1b954d24":"markdown","b356682f":"markdown","9390a6c4":"markdown","45b80d69":"markdown","9cfad137":"markdown","090699b1":"markdown"},"source":{"05b42c18":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n# linear algebra\nimport numpy as np \n# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd \nfrom datetime import datetime\n#data visualization\nimport seaborn as sns \nimport plotly.graph_objects as go\nimport plotly.express as px\n#statistical tests\nfrom scipy import stats as ss\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b38bd196":"df_all=pd.read_csv('\/kaggle\/input\/35000-age-of-empires-2-1v1-ranked-random-matches\/rankedrm.csv')\ndf_all.info()","be8513d7":"df_all.head()","94952408":"for i in df_all.index:\n    df_all.loc[i,'started.datetime']=datetime.strptime(df_all.loc[i,'started'],'%Y-%m-%d %H:%M:%S')\n    df_all.loc[i,'finished.datetime']=datetime.strptime(df_all.loc[i,'finished'],'%Y-%m-%d %H:%M:%S')\nfirst_start=df_all['started.datetime'].min()\nfirst_end=df_all['finished.datetime'].loc[df_all['started.datetime'].argmin()]\nlast_start=df_all['started.datetime'].max()\nlast_end=df_all['finished.datetime'].loc[df_all['started.datetime'].argmax()]\n\nprint(\"First game in the database started on \",first_start.date(),'at',first_start.time(),' and finished on', first_end.date(),'at',first_end.time(),)\nprint(\"Last game in the database started on\",last_start.date(),'at',last_start.time(),  'and finished on', last_end.date(),'at',last_end.time(),)\n","13e26620":"countries=pd.concat([df_all['country.win'],df_all['country.lose']])\nprint(countries.unique(), \" , \", len(countries.unique())-1)\ncivs=pd.concat([df_all['civ.win.name'],df_all['civ.lose.name']])\nprint(civs.unique(), ',',len(civs.unique()))","9b37088e":"civ_dic={'IT':'Italians','FR':'Franks','BG':'Bulgarians','LT':'Lithuanians','TR':'Turks','VN':'Vietnamese', 'JP':'Japanese','ES':'Spanish','CN':'Chinese','PT':'Portuguese','DE':'Teutons','RU':'Slavs','MY':'Malay','HU':'Magyars','KR':'Koreans','ET':'Ethiopians','MN':'Mongols','IR':'Persians','IN':'Indians','KH':'Khmer','ML':'Malians','MM':'Burmese','GB':'Britons','PE':'Incas'}","3d9f3328":"civ_matches=civs.value_counts()\nfig = go.Figure()\nfig.add_trace(go.Pie(labels= civ_matches.index, values = civ_matches,showlegend = True, name ='quantities'))\nfig.update_layout(title_text = 'Players count by civilization played')\nfig.show()\n","45ab8269":"nation_matches=countries.value_counts().head(10)\nfig = go.Figure()\nfig.add_trace(go.Bar(x= nation_matches.index, y = nation_matches,showlegend = True\n                     , name ='Matches played',marker_color = 'green'))\nfig.update_layout(title_text = 'Players count by nation')\nfig.show()","1abc9087":"def extract_nation (df,civ_dict):\n    df_n=pd.DataFrame()\n    for nation in civ_dict.keys():\n        nw=df['country.win'].loc[df['country.win']==nation].count()\n        nl=df['country.lose'].loc[df['country.lose']==nation].count()\n        #print(nw,nl)\n        #nw=A['country.win'].count()\n        #nl=B['country.lose'].count()\n        if (nw+nl)>=100:\n            yw=df['country.win'].loc[(df['civ.win.name']==civ_dict[nation])&(df['country.win']==nation)].count()\n            yl=df['country.lose'].loc[(df['civ.lose.name']==civ_dict[nation])&(df['country.lose']==nation)].count()\n            frq=None\n            if nw+nl>0:\n                frq=(yw+yl)\/(nw+nl)\n            win_ratio=None\n            if yw+yl>0:\n                win_ratio=yw\/(yw+yl)\n            df_n.loc[nation,'Civ']=civ_dict[nation]\n            df_n.loc[nation,['National Civ Matches','National Civ Wins','National Frequency','National Win %','National Total Matches' ]]=[yw+yl,yw,frq,win_ratio,nw+nl]\n        else:\n            print(nation + ' has only ' + (nw+nl).astype(str) + ' total matches played')\n    total=df['country.win'].count()+df['country.lose'].count()\n    for nation in df_n.index:\n        yw=df['country.win'].loc[(df['civ.win.name']==civ_dict[nation])&(df['country.win'].notna())].count()\n        nw=df['country.win'].count()\n        yl=df['country.lose'].loc[(df['civ.lose.name']==civ_dict[nation])&(df['country.lose'].notna())].count()\n        nl=df['country.lose'].count()\n        frq=None\n        if nw+nl>0:\n            frq=(yw+yl)\/(nw+nl)\n        win_ratio=None\n        if yw+yl>0:\n            win_ratio=yw\/(yw+yl)\n        df_n.loc[nation,['Global Civ Matches','Global Civ Wins','Global Frequency','Global Win %']]=[yw+yl,yw,frq,win_ratio]\n        #print(nation,frq,win_ratio,nw+nl)\n    return(df_n,total)\n\ndf_nation, tot=extract_nation (df_all,civ_dic)\ndf_nation.head()","7c76adf0":"fig = go.Figure()\nfig.add_trace(go.Bar(x = df_nation.loc[:,'Civ']+', '+df_nation.index, y = df_nation['National Frequency'], name = 'National' ))\nfig.add_trace(go.Bar(x = df_nation.loc[:,'Civ']+', '+df_nation.index, y = df_nation['Global Frequency'], name='Global'))\nfig.update_layout(barmode='group',title_text = 'Civilization play rate nationally and globally')\nfig.show()","1eec5c11":"def chisquare_nation (df, tot):\n    for nation in df.index:\n        A=df.loc[nation,'National Civ Matches']\n        B=df.loc[nation,'National Total Matches']-df.loc[nation,'National Civ Matches']\n        C=df.loc[nation,'Global Civ Matches']\n        D=tot-df.loc[nation,'Global Civ Matches']\n        tb=np.array([[A,B],[C,D]])\n        print(nation,\"Chi-square test p-value:\",ss.chi2_contingency(tb) [1], ', statistic:',ss.chi2_contingency(tb) [0])\n\nchisquare_nation(df_nation, tot)","7d6ad91d":"fig = go.Figure()\nfig.add_trace(go.Bar(x = df_nation.loc[:,'Civ']+', '+df_nation.index, y = df_nation['National Win %'], name = 'National' ))\nfig.add_trace(go.Bar(x = df_nation.loc[:,'Civ']+', '+df_nation.index, y = df_nation['Global Win %'], name='Global'))\nfig.update_layout(barmode='group',title_text = 'Civilization win rate nationally and globally')\nfig.show()\n\ndef chisquare_win (df,total):\n    for nation in df.index:\n        A=df.loc[nation,'National Civ Wins']\n        B=df.loc[nation,'National Civ Matches']-df.loc[nation,'National Civ Wins']\n        C=df.loc[nation,'Global Civ Wins']\n        D=df.loc[nation,'Global Civ Matches']-df.loc[nation,'Global Civ Wins']\n        \n        tb=np.array([[A,B],[C,D]])\n        print(nation,\"Chi-square test p-value:\",ss.chi2_contingency(tb) [1], ', statistic:',ss.chi2_contingency(tb) [0] )\n\nchisquare_win(df_nation, tot)","d2e4f102":"df_all.loc[:,'rank.avg']=(df_all.loc[:,'rating.win']+df_all.loc[:,'rating.lose'])\/2\n#print(df_all['rank.avg'].count())\n#print(df_all['match_uuid'].loc[(df_all['rating.win'].notna())&(df_all['rating.lose'].notna())].count())\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(x = df_all['rank.avg']))\nfig.add_vline(x=1000)\nfig.add_vline(x=1500)\nfig.update_layout(barmode='group',title_text = 'Distribution of the ranking across matches')\nfig.show()\n","d9f9fff6":"df_ranked=df_all.dropna(subset=['rank.avg'])\n\ndf_low=df_ranked.loc[df_ranked['rank.avg']<1000]\nprint('Number of low-Elo matches= '+ str(len(df_low.index)))\ndf_nation_low, tot_low=extract_nation(df_low,civ_dic)\n\ndf_mid=df_ranked.loc[(1000<=df_ranked['rank.avg']) & (df_ranked['rank.avg']<1500)]\nprint('Number of mid-Elo matches= '+ str(len(df_mid.index)))\ndf_nation_mid, tot_mid=extract_nation(df_mid,civ_dic)\n\ndf_high=df_ranked.loc[df_ranked['rank.avg']>=1500]\nprint('Number of high-Elo matches= '+ str(len(df_high.index)))\ndf_nation_high, tot_high=extract_nation(df_high,civ_dic)\n","b632e3d8":"fig = go.Figure()\nfig.add_trace(go.Bar(x = df_nation_low['Civ']+', '+df_nation_low.index, y = df_nation_low['National Frequency'], name = 'National' ))\nfig.add_trace(go.Bar(x = df_nation_low['Civ']+', '+df_nation_low.index, y = df_nation_low['Global Frequency'], name='Global'))\nfig.update_layout(barmode='group',title_text = 'Civilization frequency by nation of the player (Elo<1000)')\nfig.show()\nchisquare_nation(df_nation_low,tot_low)","17c9ff9e":"fig = go.Figure()\nfig.add_trace(go.Bar(x = df_nation_mid['Civ']+', '+df_nation_mid.index, y = df_nation_mid['National Frequency'], name = 'National' ))\nfig.add_trace(go.Bar(x = df_nation_mid['Civ']+', '+df_nation_mid.index, y = df_nation_mid['Global Frequency'], name='Global'))\nfig.update_layout(barmode='group',title_text = 'Civilization frequency by nation of the player (1000<Elo<1500)')\nfig.show()\nchisquare_nation(df_nation_mid,tot_mid)","47667899":"fig = go.Figure()\nfig.add_trace(go.Bar(x = df_nation_high['Civ']+', '+df_nation_high.index, y = df_nation_high['National Frequency'], name = 'National' ))\nfig.add_trace(go.Bar(x = df_nation_high['Civ']+', '+df_nation_high.index, y = df_nation_high['Global Frequency'], name='Global'))\nfig.update_layout(barmode='group',title_text = 'Civilization frequency by nation of the player (Elo>1500)')\nfig.show()\nchisquare_nation(df_nation_high,tot_high)","691e7b1b":"df_high['steam_id.win'].loc[df_high['country.win']=='TR'].value_counts()\nids_high=df_high[['country.win','steam_id.win']].rename(columns={'country.win':'country','steam_id.win':'id'})\nids_high_l=df_high[['country.lose','steam_id.lose']].rename(columns={'country.lose':'country','steam_id.lose':'id'})\nids_high.append(ids_high_l)\n\nunique_high=ids_high.groupby('country').nunique()['id'].sort_values(ascending=False)\ndf_nation_high=df_nation_high.join(unique_high)\ndf_nation_high.rename(columns={'id':'Unique players'},inplace=True)\ndf_nation_high['Unique players']","73c232af":"print(df_nation_high.loc['KR',:])\ndf_nation_high.loc['KR','National Total Matches']*df_nation_high.loc['KR','Global Frequency']","fea02a79":"## Civilisations national and global playing frequncies\n\nThe following code extracts from the database the data we are the most interested in. We write it as the function `extract nation` so that it can be run on any subset of the database, in case we want to apply a filter to the matches, like we will do later by skill level. It takes as imput a portion of the database and the country-civilisation dictionary and for each pair computes several informations we need for our following analysis and saves them into a new database. We exclude the nations where less than 100 total games have been played, as that would not be a large enough sample size to draw any conclusion. Unfortunately this means exluding Iran, Mongolia, Malaysia, Myanmar, Cambodia, Ethiopia and Mali, the last two of which had nobody playing ranked AoE2 in the period considered. \n \nWe also run the process on the entire database first and show the first rows of the output database:\n","3a0fe709":"We start analysing low-Elo matches. Indeed at low elo all countries still play their home civilisation at least at the same rate as the global one. Again, except Korea, Japan and maybe India, all the other tests show a difference between the national and global frequency that is very statistically significant.","f892d156":"We also plot the $10$ nations with the highest number of matches played. Unfortunately, US and Argentina, first and third, have no civilisation in-game that was based there. ","695345c7":"## Divisions by level of the matches\n\nAs we said in the introduction, choosing to play your home civilisation instead of making a decision based on in-game reasons or going random is definitely not something done with hard core competition in mind. We thus would expect that this would be more frequent among casual players than among the more dedicated ones, which would like both to learn how to play all civilisations and to make decisions more based on the metagame. \n\nSkill level in AoE 2 is measured mainly by an [Elo type](https:\/\/www.youtube.com\/watch?v=GTaAWtuLHuo) rating, there are no official leagues distinctions like in other competitive games, so we will divide arbitrarily the matches based on the average rating of the players involved.\n\nHere is the the distribution of average rating of the matches, in the further analysis we will consider matches below $1000$ as low Elo, between $1000$ and $1500$ as mid Elo and above $1500$ as high Elo.","f9737dd4":"We take a look at the first rows in the database. What we see is that the countries are represented in the database as their  [ISO 3166-1 alpha-2 code](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2), a two digit code created by the International Organization for Standardization to uniquely identify them. Moreover, we see that there is a decent amount of redundant information, like the civilizations and the maps are identified both by their names and by a numeric code and the column 'matchup' just repeats the two civlizations.","343077ac":"## First look at the database\n\nWe check the entries of the database. It has $105624$ rows, each corresponding to a match and $23$ columns, with quite self-explanatory names. We note that some data are missing, in particular, for the study we are interested in, there are $6784$ matches for which we don't know the nationality of the winner and $7211$ for which we miss the nationality of the loser. We note that data about the civilizations played are complete.","93ae2ed8":"\nWe look at all the nations from which we had a player participating in any of the matches in the database. There is a total of $127$ countries represented. Also, all of the $37$ civilizations (civs in the slang of the game, used also in the database column names) present in the game has been played at least once in the matches considered in the database. ","e021cb15":"## Data about countries and civilizations\n\nWe create a dictionary that maps modern countries to the civilization that represents them most closely in the historical setting of the game. We do this for the civilisations that from their name and in-game description clearly correspond to a modern nation. There are many other less-obvious correspondences we will describe later, but we do not want this to be a controversial discussion on who is the legitimate heir of a specific empire.","565de1e2":"At high level finally we see that players prioritising playing with their home civ are a relatively rare occurrence. Only Chinese and, surprisingly givien the previous result, Peruvians still pick their home civs at a much higher rate than normal. ","79b5599f":"We can now finally plot the frequency with which each civilisation is played in its home country and globally. We find that indeed players are much more likely to choose their home civ, the national pick rate is always higher than the global one. The largest difference beween national and global frequency is seen in Lithuania ($+13.6\\%$) followed by Bulgaria ($+8.8\\%$), these could be outliers due to the relatively small sample sizes, but we can also imagine that as these countries are rarely prominently featured in videogames or in general in media with global diffusion, it might be very exciting for Lithuanians and Bulgarians to be finally able to play as their own people.","860c9dbd":"We check exactly what is the timespan covered by the database. We locate the first and the last match. The times of the matches are saved as strings of text, so to safely compute first and last matches to be played (by starting time) we have to convert the columns `started` and `finished` to datetime. We see that all matches were played in the first two weeks of March 2021.","cbdfe2bd":"Interesting to see that no high-level South Korean player has played Koreans in any of the matches considered, but this is not extremely unusual, as Koreans are overall rarely used and only $104$ high level matches were played by South Korean players, so in total the expected number of times this would have happened choosing according to global frequencies is only $1.6$.","f9ffe31e":"Despite the fact that the game is designed around making the civilizations as balanced as possible across all the various game settings, we see that there is a significant discrepancy in the frequency with which they are played. Franks are by far the most common being played $20106$ times, more than $10$ times more common than the least picked civilization, Burmese (played $1979$ times), as shown in the following pie chart.","1b954d24":"The results look quite evident from the histogram, but to be safe we run a contingency chi-square test for each nation to to confirm that the national frequency of the home civs is different (in this case higher) from the frequency of the civilisation elsewhere by a statistically significant margin. We see that almost everywhere the result is significant by a huge margin (South Korea the main exception, with Japan and India close to be significant, but not quite enough).","b356682f":"Do people like to play as their home country in videogames? We make a case study on how the nation of the player influences in-game choices by analysing [105000 Age of Empires 2 1v1 Ranked Random Matches](https:\/\/www.kaggle.com\/slappdun\/35000-age-of-empires-2-1v1-ranked-random-matches) played in March 2021.\n\nFor the readers who do not know, Age of Empires 2 is a Real Time strategy game set in the medieval period where the player can choose to play as one of 37 different historical civilizations, from Aztecs to Vikings (in alphabetic order). The choice of the civilization to play is not purely cosmetic, but affects significantly the gameplay, with every one having a different roster of units available, plus specific in-game bonuses, like for example Aztecs cannot train cavalry units, but have melee infantry with extra attack.\n\nNormally the choice of the civilization to play is thus an in-game strategic choice, based on your own playstyle, the settings of the game and the kind of civilization you expect the opponent to pick. We see if it is a common thing for players to decide to choose instead to play the civilization that live on their homeland, and how this affects their success in the game. ","9390a6c4":"We also check if the propensity for players to use the local civ affects the win rate of said civ. We find that there is no significant effect either way, we again run a chi-square test to make sure that the differences (which appear in both directions) are not significant, with the only exception of the Portuguese who seem to be particularly good at playing their home civ.\nThis is a bit surprising, as we mentioned how picking a civ based on your own nationality is definitely not a gameplay-based strategy and thus we would expect such players to have worse results than the ones who actually pick the civ for an in-game reason. It could be the case that they get more experience to play the specific civ or that in general most players are not really able to get the best out of every civ no matter why they had chosen it.","45b80d69":"It is worth to note that there are relatively few high level player from each country, and with $37$ civs available in the game the specific pick frequencies rarely exceed $10\\%$, so the behaviour of one or two players can significantly skew the data at this level.","9cfad137":"At mid-Elo level the situation starts to change. We see many less significant results for the chi square test and we even have Korean and Peruvian players using their home civ less than the global average. It is worth nothing that French players are the second most likely to play their home civ after Bulgarians, but only because Franks are by far the most picked civ globally, the difference between the two frequency is not significant.","090699b1":"We run again the function `extract_nation` now on the different elements of the partition of the database by Elo rating to see if the behaviour is significantly different across different skill levels. We note that more nations than the original $7$ now do not reach in some categories the threshold of $100$ played matches to be considered. This is obviously more common in the high-Elo group which has less matches than the others. "}}