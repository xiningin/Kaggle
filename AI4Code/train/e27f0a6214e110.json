{"cell_type":{"56c8fd10":"code","9367c5b5":"code","054933a5":"code","b7f78c33":"code","ebadad6b":"code","c4c97eb6":"code","13f8c985":"code","be0d29bd":"code","92bc64e1":"code","abf7852b":"code","fa2565c0":"code","8b23b3a8":"code","930879e1":"code","503ff19d":"code","5f077570":"code","43b364df":"code","b679578a":"code","5da53ba7":"code","34141c90":"code","1eee1858":"code","caea6f07":"code","bbf22d7b":"code","59ff70eb":"code","92c0bc6f":"code","ad607573":"code","48cf3b97":"code","a476342b":"code","4e930114":"code","ac4457eb":"code","4670f0f9":"code","d56a0445":"code","aa75f879":"markdown","54a4af63":"markdown"},"source":{"56c8fd10":"import torch\nimport os\nimport torchvision\nfrom torch.utils.data import random_split, DataLoader\nimport torchvision.transforms as transforms\nfrom torchvision.datasets import CIFAR10\nfrom torchvision import models\nimport torch.nn as nn\nimport torch.backends.cudnn as cudnn\nimport torch.nn.functional as F\nfrom torchvision.utils import make_grid\nfrom torch.autograd import Variable","9367c5b5":"# Data transforms (normalization & data augmentation)\nstats = ((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010))\ntrain_tfms = transforms.Compose([transforms.RandomCrop(32, padding=4, padding_mode='reflect'), \n                         transforms.RandomHorizontalFlip(), \n                         transforms.ToTensor(), \n                         transforms.Normalize(*stats,inplace=True)])\ntest_tfms = transforms.Compose([transforms.ToTensor(), transforms.Normalize(*stats)])","054933a5":"#importing the datasets\ntrain_data = CIFAR10(root = '.\/data', train = True, \n                     download = True, transform = train_tfms)\ntest_data = CIFAR10(root = '.\/data', train = False,\n                    download = True, transform = test_tfms)","b7f78c33":"train_data","ebadad6b":"#printing out the train shape\nimg,label = train_data[0]\nprint(img.shape, label)\nimg","c4c97eb6":"#printing out the classes in the data\nprint(train_data.classes)","13f8c985":"# PyTorch data loaders\nbatch_size = 400\ntrain_loader = DataLoader(train_data, batch_size, shuffle=True, num_workers=3, pin_memory=True)\ntest_loader = DataLoader(test_data, batch_size*2, num_workers=3, pin_memory=True)","be0d29bd":"import matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nmatplotlib.rcParams['figure.facecolor'] = '#ffffff'\n\ndef denormalize(images, means, stds):\n    means = torch.tensor(means).reshape(1, 3, 1, 1)\n    stds = torch.tensor(stds).reshape(1, 3, 1, 1)\n    return images * stds + means\n\ndef show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(12, 12))\n        ax.set_xticks([]); ax.set_yticks([])\n        denorm_images = denormalize(images, *stats)\n        ax.imshow(make_grid(denorm_images[:64], nrow=8).permute(1, 2, 0).clamp(0,1))\n        break","92bc64e1":"show_batch(train_loader)","abf7852b":"#Using the GPU\ndef get_default_device():\n    \"\"\"Choose GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","fa2565c0":"device = get_default_device()\ndevice","8b23b3a8":"train_loader = DeviceDataLoader(train_loader, device)\ntest_loader = DeviceDataLoader(test_loader, device)","930879e1":"#Residual Block \nclass SimpleResidualBlock(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(in_channels=3, out_channels=3, kernel_size=3, stride=1, padding=1)\n        self.relu1 = nn.ReLU()\n        self.conv2 = nn.Conv2d(in_channels=3, out_channels=3, kernel_size=3, stride=1, padding=1)\n        self.relu2 = nn.ReLU()\n        \n    def forward(self, x):\n        out = self.conv1(x)\n        out = self.relu1(out)\n        out = self.conv2(out)\n        return self.relu2(out) + x","503ff19d":"#Building simple model using the Residual block\nsimple_resnet = to_device(SimpleResidualBlock(), device)\n\nfor images, labels in train_loader:\n    out = simple_resnet(images)\n    print(out.shape)\n    break\n    \ndel simple_resnet, images, labels\ntorch.cuda.empty_cache()","5f077570":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        #print(loss)\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'test_loss': loss.detach(), 'test_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['test_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['test_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'test_loss': epoch_loss.item(), 'test_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], last_lr: {:.5f}, train_loss: {:.4f}, test_loss: {:.4f}, test_acc: {:.4f}\".format(\n            epoch, result['lrs'][-1], result['train_loss'], result['test_loss'], result['test_acc']))","43b364df":"#Building the model\n\ndef conv_block(in_channels, out_channels, pool=False):\n    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1), \n              nn.BatchNorm2d(out_channels), \n              nn.ReLU(inplace=True)]\n    if pool: layers.append(nn.MaxPool2d(2))\n    return nn.Sequential(*layers)\n\nclass ResNet9(ImageClassificationBase):\n    def __init__(self, in_channels, num_classes):\n        super().__init__()\n        \n        self.conv1 = conv_block(in_channels, 64)\n        self.conv2 = conv_block(64, 128, pool=True)\n        self.res1 = nn.Sequential(conv_block(128, 128), conv_block(128, 128))\n        \n        self.conv3 = conv_block(128, 256, pool=True)\n        self.conv4 = conv_block(256, 512, pool=True)\n        self.res2 = nn.Sequential(conv_block(512, 512), conv_block(512, 512))\n        \n        self.classifier = nn.Sequential(nn.MaxPool2d(4), \n                                        nn.Flatten(), \n                                        nn.Dropout(0.2),\n                                        nn.Linear(512, num_classes))\n        \n    def forward(self, xb):\n        out = self.conv1(xb)\n        out = self.conv2(out)\n        out = self.res1(out) + out\n        out = self.conv3(out)\n        out = self.conv4(out)\n        out = self.res2(out) + out\n        out = self.classifier(out)\n        return out","b679578a":"model = to_device(ResNet9(3, 10), device)\nmodel","5da53ba7":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","34141c90":"history = [evaluate(model, test_loader)]\nhistory","1eee1858":"epochs = 10\nmax_lr = .01\ngrad_clip = 0.1\nweight_decay = 1e-4\noptim = torch.optim.Adam","caea6f07":"%%time\nhistory += fit_one_cycle(epochs, max_lr, model, train_loader, test_loader, \n                             grad_clip=grad_clip, \n                             weight_decay=weight_decay, \n                             opt_func=optim)","bbf22d7b":"# Plotting Accuracies\ndef plot_accuracies(history):\n    accuracies = [x['test_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');","59ff70eb":"plot_accuracies(history)","92c0bc6f":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['test_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Test'])\n    plt.title('Loss vs. No. of epochs');","ad607573":"plot_losses(history)","48cf3b97":"import numpy as np\ndef plot_lrs(history):\n    lrs = np.concatenate([x.get('lrs', []) for x in history])\n    plt.plot(lrs)\n    plt.xlabel('Batch no.')\n    plt.ylabel('Learning rate')\n    plt.title('Learning Rate vs. Batch no.');","a476342b":"plot_lrs(history)","4e930114":"#Saving the model \ntorch.save(model.state_dict(), 'ResNet9_Ques1.pth')","ac4457eb":"!pip install adversarial-robustness-toolbox","4670f0f9":"from art.attacks.evasion import FastGradientMethod ","d56a0445":"def fgsm_attack()","aa75f879":"## ART Toolbox","54a4af63":"<a href=\"https:\/\/colab.research.google.com\/github\/pushpendra-aibot\/MyWork\/blob\/master\/ResNet9_CIFAR10.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>"}}