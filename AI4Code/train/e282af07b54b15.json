{"cell_type":{"f5d90f0c":"code","a3745afe":"code","4ff970b4":"code","a78b7206":"code","7cfe0902":"code","43ff2bf5":"code","a9ea1cb0":"code","5cfa4abd":"code","177dddb4":"code","406eb293":"code","b89affc9":"code","a3461885":"code","2be0bea7":"code","a5a0f485":"markdown","b1f73187":"markdown"},"source":{"f5d90f0c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a3745afe":"game_data =  pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/games.csv\")\nplayer_data = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/players.csv\")\nplay_data = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/plays.csv\")","4ff970b4":"week_data = pd.DataFrame()\nfor i in range(1,17):\n    week = \"week\"+str(i)+\".csv\"\n    df = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/\"+week)\n    week_data = pd.concat([df],ignore_index = True)","a78b7206":"week_data = week_data.filter(['nflId','gameId','playId'])\nplay_data = play_data.filter(['gameId', 'playId', 'passResult', 'penaltyCodes', 'playResult'])","7cfe0902":"# test = player_data.merge(play_data, how = \"inner\", left_on = \"nflId\", right_on = \"nflId\")\nplayer_data = week_data.merge(player_data, how = \"inner\", left_on = \"nflId\", right_on = \"nflId\")","43ff2bf5":"player_data","a9ea1cb0":"offensive_positions = [\"QB\", \"WR\", \"RB\", \"TE\", \"FB\", \"HB\"]\ndefensive_positions = [\"SS\", \"FS\", \"MLB\", \"CD\", \"LB\", \"OLB\", \"DE\", \"ILB\", \"S\", \"DB\", \"NT\"]","5cfa4abd":"player_plays = pd.merge(player_data, play_data, how = 'left', left_on =['gameId','playId'], right_on = ['gameId', 'playId'])\nplayer_plays","177dddb4":"# avg_player_play_result = player_plays.groupby(['displayName', 'position', 'height', 'weight', 'birthDate', 'collegeName'])['playResult'].mean().reset_index()\navg_player_play_result = player_plays.groupby(['displayName', 'position', 'height', 'weight', 'birthDate'])['playResult'].mean().reset_index()","406eb293":"avg_player_play_result","b89affc9":"\ndefensive_avg_play_result = avg_player_play_result.loc[avg_player_play_result['position'].isin(defensive_positions)]\noffensive_avg_play_result = avg_player_play_result.loc[avg_player_play_result['position'].isin(offensive_positions)]\ndefensive_avg_play_result","a3461885":"from dateutil.parser import parse\nfrom datetime import datetime, date\n\ndefensive_avg_play_result = defensive_avg_play_result.rename(columns = {'birthDate':'Age'})\n\ndef formatBirthDate(row):\n    dt = parse(str(row['Age']))\n    return dt.strftime('%Y-%m-%d')\n\ndefensive_avg_play_result['Age'] = defensive_avg_play_result.apply(formatBirthDate, axis=1)\n\ndef calculateAge(birth):\n    birth = datetime.strptime(birth, '%Y-%m-%d').date()\n    today = date.today()\n    return today.year - birth.year - ((today.month,today.day) < (birth.month,birth.day))\n\ndefensive_avg_play_result['Age'] = defensive_avg_play_result['Age'].apply(calculateAge)\n\n\ndef formatHeight(row):\n    if row['height'][1] == \"-\":\n        return int(row['height'][0]) * 12 + int(row['height'][2])\n    else:\n        return int(row['height'])\n    \ndefensive_avg_play_result['height'] = defensive_avg_play_result.apply(formatHeight, axis=1)\n    ","2be0bea7":"from sklearn.linear_model import LinearRegression\n\nfor position in defensive_positions:\n    print(f'Defensive_avg_play_result_{position}')\n    stats_groupedby_position = defensive_avg_play_result.loc[defensive_avg_play_result['position'] == position]\n    cols_X = [col for col in stats_groupedby_position if col not in ['displayName', 'playResult', 'position']]\n    cols_Y = [col for col in stats_groupedby_position if col in ['playResult']]\n    stats_groupedby_position_X= stats_groupedby_position[cols_X]\n    stats_groupedby_position_Y= stats_groupedby_position[cols_Y]\n    if len(stats_groupedby_position_X) > 1:\n        print(\"Sample size: \" + str(len(stats_groupedby_position_X)))\n        reg = LinearRegression().fit(stats_groupedby_position_X,stats_groupedby_position_Y)\n        print(\"R^2 value: \" + str(reg.score(stats_groupedby_position_X,stats_groupedby_position_Y)))\n        print(\"Coefficients: \" + str(reg.coef_))\n    else:\n        print(\"No data found for \" + f'Defensive_avg_play_result_{position}')\n    print(\"\\n\")","a5a0f485":"# Combine weekly play data:","b1f73187":"## EDA"}}