{"cell_type":{"6b0a99ea":"code","3ed9793c":"code","cc02e539":"code","c6d5c824":"code","8bede7e0":"code","5b7e201c":"code","0158337b":"code","d3b72406":"code","62ad4d18":"code","3cff5ea9":"code","9ba5e55b":"code","b5eec2f7":"code","f62e59d1":"code","216abf3b":"code","303523db":"code","d94e4501":"code","690ae68e":"code","a4dc5b00":"code","b06e75b2":"code","b44e40bc":"code","f0f3ef45":"code","d27c1139":"code","d411e61f":"code","5122630a":"code","771912e6":"code","5441fe1e":"code","9b1042a2":"code","37435ce4":"code","06d83b96":"code","c66ecf08":"code","cf83a107":"code","3e7d67a6":"code","bf758cc9":"code","ed469b9d":"code","ac2d454d":"code","c5d34ad8":"code","653ee85a":"code","db3ac5b4":"code","77071896":"code","14562dc7":"code","c6459e51":"code","bdb5e39f":"code","e07d24a8":"code","cd9b502f":"code","71ef37fc":"code","8dfd9cc9":"code","16970d82":"code","b264e01b":"code","74a7127a":"code","7dcd1d02":"code","55b51605":"code","6f925619":"code","aca7e6ea":"code","f3c4ea68":"code","55a84774":"code","b4d01f0c":"code","9ae00d26":"code","9202eac2":"code","0b6c2611":"code","c1d23794":"code","46b8946f":"code","bbadbf89":"code","da3b1a0f":"code","90f01813":"code","0eb9cbbf":"code","08451548":"code","c23aca2d":"code","70f3bec9":"code","dc765cbf":"code","d245aa44":"code","520db38e":"code","bf3f49bd":"code","790b724a":"code","fd34447c":"code","72557ec7":"code","78266588":"code","ef24b110":"code","7d39c60e":"code","d3d0782b":"code","ea94002a":"code","66453eaa":"code","18e980a3":"code","246fa225":"code","ec227039":"code","b28c1582":"code","ff58620f":"code","7a3a1497":"code","0ff3f968":"code","943000fe":"code","0d268dfa":"code","16c7ef10":"code","37ccecc7":"code","abb4b122":"code","6047e307":"code","5fc71d40":"code","78aaf497":"code","2b3edcd1":"code","06837a84":"code","955bf03e":"code","2c4c06f2":"code","12bb4d44":"code","6a35c3a1":"code","f6a69baf":"code","6b5e030c":"code","684a5d11":"code","6c78052a":"code","62c1de4b":"code","69ba0d4b":"markdown","022a2312":"markdown","59297672":"markdown","b54354be":"markdown","ab8226f5":"markdown","7ba61680":"markdown","904a1a8b":"markdown","2c850546":"markdown","a8264eea":"markdown","05ddda34":"markdown","d290ce2e":"markdown","4e02020d":"markdown","fec7b486":"markdown","b46c0939":"markdown","a527c5f5":"markdown","03defd03":"markdown","4db64e92":"markdown","8ae07727":"markdown","29c7eabb":"markdown","63a833d7":"markdown","7a64d981":"markdown","046d8d12":"markdown","7cb1877b":"markdown","9a38819f":"markdown","a660b010":"markdown","cffa1d03":"markdown","f0d26c38":"markdown","76200e4a":"markdown","741b2236":"markdown","f37df3d2":"markdown","5c5791aa":"markdown","2f45e7fd":"markdown","0d0ea322":"markdown","2a1f12fe":"markdown","74178991":"markdown","b41fb140":"markdown","41045425":"markdown","444eb4b8":"markdown","6b34fbe4":"markdown","3a940bdf":"markdown","51dc7dea":"markdown","1426ecb8":"markdown","829a9c0b":"markdown","9986e201":"markdown","b5bd81dc":"markdown","d766aa84":"markdown","45486ca9":"markdown","2c30b5fe":"markdown","6d4d17cd":"markdown","5866c98b":"markdown","906b80ea":"markdown","daec17db":"markdown","0b9e7f8d":"markdown","a0793255":"markdown","2405c6d3":"markdown","ac11e56c":"markdown","86d7f0b3":"markdown","dc648cd1":"markdown","8afd8e06":"markdown","472a2471":"markdown","5bee20c4":"markdown"},"source":{"6b0a99ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl","3ed9793c":"## Basic Plot\nplt.figure(figsize=(10,10))\nid1 = np.arange(1,10)\nsalary = np.arange(20,110,10)\nplt.bar(id1,salary)\nplt.xlabel('Employee ID')\nplt.ylabel('Salary')\nplt.show()","cc02e539":"id1 = np.arange(1,10)\nsalary = np.arange(20,110,10)\nplt.figure(figsize=(8,5)) # Setting the figure size\nax = plt.axes()\nax.set_facecolor(\"#ECF0F1\") # Setting the background color by specifying the HEX Code\nplt.bar(id1,salary,color = '#FFA726')\nplt.xlabel(r'$Employee $ $ ID$')\nplt.ylabel(r'$Salary$')\nplt.show()","c6d5c824":"#Plotting multiple sets of data\nx1= [1,3,5,7]\nx2=[2,4,6,8]\ny1 = [7,7,7,7]\ny2= [17,18,29,40]\nplt.figure(figsize=(8,6))\nax = plt.axes()\nax.set_facecolor(\"white\")\nplt.bar(x1,y1,label = \"First\",color = '#42B300') # First set of data\nplt.bar(x2,y2,label = \"Second\",color = '#94E413') # Second set of data\nplt.xlabel('$X$')\nplt.ylabel('$Y$')\nplt.title ('$Bar $ $ Chart$')\nplt.legend()\nplt.show()","8bede7e0":"barplot = plt.bar(id1, salary)\nfor bar in barplot:\n    yval = bar.get_height()\n    plt.text(bar.get_x()+ bar.get_width()\/2.0 , yval, int(yval), va='bottom') #va: vertical alignment y positional argument\n    \nplt.title(\" Bar graph example\")\nplt.xlabel('Employees')\nplt.ylabel(\"Salary\")","5b7e201c":"plt.figure(figsize=(7,7))\nbarplot = plt.bar(id1, salary)\nfor bar in barplot:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()\/2.0, yval, int(yval), va='bottom') #va: vertical alignment y positional argument\n    \nplt.title(\" Bar graph example\")\nplt.xlabel('Employees')\nplt.ylabel(\"Salary\")\nplt.show()","0158337b":"plt.figure(figsize=(7,7))\nbarplot = plt.bar(id1, salary)\nfor bar in barplot:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()\/2.0, yval, int(yval), va='bottom') #va: vertical alignment y positional argument\n    plt.yticks([])\nplt.title(\" Bar graph example\")\nplt.xlabel('Employees')\nplt.ylabel(\"Salary\")\nplt.show()","d3b72406":"Age = [28,33,43,45,57]\nName = [\"Saurav\", \"Raj\", 'John', \"Peter\", \"Russsel\"]\nplt.barh(Name,Age, color =\"yellowgreen\")\nplt.show()","62ad4d18":"plt.figure(figsize=(8,8))\ny,x = zip(*sorted(zip(salary,id1)))\nplt.barh(x,y)","3cff5ea9":"plt.barh(x,y)\nax=plt.subplot()\nax.invert_yaxis()","9ba5e55b":"print(plt.style.available)","b5eec2f7":"plt.figure(figsize=(10,10))\nplt.barh(x,y)\nplt.title(\"Horizontal Bar graph example\")\nplt.xlabel(\"Employees\")\nplt.ylabel('Salary')\nplt.style.use('dark_background')","f62e59d1":"plt.figure(figsize=(10,10))\nplt.barh(x,y)\nplt.title(\"Horizontal Bar graph example\")\nplt.xlabel(\"Employees\")\nplt.ylabel('Salary')\nplt.style.use('tableau-colorblind10')","216abf3b":"# Changing the width of Bars\nnum1 = np.array([1,3,5,7,9])\nnum2 = np.array([2,4,6,8,10])\nplt.figure(figsize=(8,4))\nplt.bar(num1, num1**2, width=0.2 , color = '#FF6F00')\nplt.bar(num2, num2**2, width=0.2 , color = '#FFB300')\nplt.plot()","303523db":"# Displaying values at the top of vertical bars\nnum1 = np.array([1,3,5,7,9])\nnum2 = np.array([2,4,6,8,10])\nplt.figure(figsize=(10,6))\nplt.bar(num1, num1**2, width=0.3 , color = '#FF6F00')\nplt.bar(num2, num2**2, width=0.3 , color = '#FFB300')\nfor x,y in zip(num1,num1**2):\n    plt.text(x, y+0.05, '%d' % y, ha='center' , va= 'bottom')\nfor x,y in zip(num2,num2**2):\n    plt.text(x, y+0.05, '%d' % y, ha='center' , va= 'bottom')\nplt.plot()","d94e4501":"x = np.arange(1,21)\nplt.figure(figsize=(16,8))\ny1 = np.random.uniform(0.1,0.7,20)\ny2 = np.random.uniform(0.1,0.7,20)\nplt.bar(x, +y1, facecolor='#C0CA33', edgecolor='white') #specify edgecolor by name\nplt.bar(x, -y2, facecolor='#FF9800', edgecolor='white')\nfor x,y in zip(x,y1):\n    plt.text(x, y+0.05, '%.2f' % y, ha='center' , va= 'bottom', fontsize = 10)\n    plt.xlim(0,21)\n    plt.ylim(-1.25,+1.25)\nplt.show()","690ae68e":"plt.style.use('seaborn-darkgrid')\nx1= ['Sachin','Saurav','Rahul','Robin']\ny1= [17,18,29,40]\ny2 = [20,21,22,23]\nplt.figure(figsize=(5,7))\nplt.bar(x1,y1,label = \"Batting Average\",width = 0.5,color = '#FF6F00')\nplt.bar(x1,y2,label = \"Bowling Average\",width = 0.5 ,bottom = y1 , color = '#FFB300')\nplt.xlabel('$X$')\nplt.ylabel('$Y$')\nplt.title ('$Bar $ $ Chart$')\nplt.legend()\nplt.show()","a4dc5b00":"plt.style.use('seaborn-darkgrid')\nx1= ['Sachine','Saurav','Rahul','Robin']\ny1= np.array([17,18,29,40])\ny2 =np.array([20,21,22,23])\ny3 =np.array([5,9,11,12])\nplt.figure(figsize=(5,7))\nplt.bar(x1,y1,label = \"Batting Average\",width = 0.5,color = '#FF6F00')\nplt.bar(x1,y2,label = \"Bowling Average\",width = 0.5 ,bottom = y1 , color = '#FFB300')\nplt.bar(x1,y3,label = \"Fielding Average\",width = 0.5 ,bottom = y1+y2 , color = '#F7DC6F')\nplt.xlabel('$X$')\nplt.ylabel('$Y$')\nplt.title ('$Bar $ $ Chart$')\nplt.legend()\nplt.show()","b06e75b2":"# Grouped Bar Chart\nplt.figure(figsize=(7,9))\n# set width of bar\nbarWidth = 0.25\n# set height of bar\ny1= np.array([17,18,29,40])\ny2 =np.array([20,21,22,23])\ny3 =np.array([5,9,11,12])\n# Set position of bar on X axis\npos1 = np.arange(len(y1))\npos2 = [x + barWidth for x in pos1]\npos3 = [x + barWidth for x in pos2]\n# Make the plot\nplt.bar(pos1, y1, color='#FBC02D', width=barWidth, label='Batting')\nplt.bar(pos2, y2, color='#F57F17', width=barWidth, label='Bowling')\nplt.bar(pos3, y3, color='#E65100', width=barWidth, label='Fielding')\n# Add xticks on the middle of the group bars\nplt.xlabel('Assignee', fontweight='bold')\nplt.ylabel('Number of Tickets', fontweight='bold')\nplt.xticks([i + barWidth for i in range(len(y1))], ['Sachin', 'Saurav', 'Rahul', 'Robin'])\n\n# Create legend & Show graphic\nplt.legend()\nplt.show()\n","b44e40bc":"plt.style.use('seaborn-darkgrid')\nx1= ['Saurav','Sachin','Ravi','Minil']\ny1= [17,18,29,40]\ny2 = [20,21,22,23]\nplt.figure(figsize=(8,5))\nplt.barh(x1,y1,label = \"Batting Tickets\",color = '#FF6F00')\nplt.barh(x1,y2,label = \"Bowling Tickets\", left = y1 , color = '#FFB300')\nplt.xlabel('$X$')\nplt.ylabel('$Y$')\nplt.title ('$Bar $ $ Chart$')\nplt.legend()\nplt.show()","f0f3ef45":"# Displaying values in the stacked vertical bars using plt.text()\nplt.style.use('seaborn-darkgrid')\nx1= ['Saurav','Sachin','Rahul','Robin']\ny1= [17,18,29,40]\ny2 = [20,21,22,23]\nplt.figure(figsize=(5,7))\nplt.bar(x1,y1,label = \"Batting Average\",width = 0.5,color = '#FF6F00')\nplt.bar(x1,y2,label = \"Bowling Average\",width = 0.5 ,bottom = y1 , color = '#FFB300')\nplt.xlabel('$X$')\nplt.ylabel('$Y$')\nplt.title ('$Bar $ $ Chart$')\nfor x,y in zip(x1,y1):\n    plt.text(x, y-10, '%d' % y, ha='center' , va= 'bottom')\nfor x,y,z in zip(x1,y2,y1):\n    plt.text(x, y+z-10, '%d' % y, ha='center' , va= 'bottom')\nplt.legend()\nplt.show()","d27c1139":"# Displaying values in the stacked horizontal bars using plt.text()\nplt.style.use('seaborn-darkgrid')\nx1= ['Sachin','Saurav','Rahul','Robin']\ny1= [17,18,29,40]\ny2 = [20,21,22,23]\nplt.figure(figsize=(8,5))\nplt.barh(x1,y1,label = \"Batting Average\",color = '#FF6F00')\nplt.barh(x1,y2,label = \"Bowling Average\", left = y1 , color = '#FFB300')\nplt.xlabel('$X$')\nplt.ylabel('$Y$')\nfor x,y in zip(x1,y1):\n    plt.text(y-10, x, '%d' % y, ha='center' , va= 'bottom')\nfor x,y,z in zip(x1,y2,y1):\n    plt.text(y+z-10, x, '%d' % y, ha='center' , va= 'bottom')\nplt.title ('$Bar $ $ Chart$')\nplt.legend()\nplt.show()","d411e61f":"# Displaying values at the top of the Grouped Bar Chart using plt.text()\nplt.figure(figsize=(7,9))\n# set width of bar\nbarWidth = 0.25\n# set height of bar\ny1= np.array([17,18,29,40])\ny2 =np.array([20,21,22,23])\ny3 =np.array([5,9,11,12])\n# Set position of bar on X axis\npos1 = np.arange(len(y1))\npos2 = [x + barWidth for x in pos1]\npos3 = [x + barWidth for x in pos2]\n# Make the plot\nplt.bar(pos1, y1, color='#FBC02D', width=barWidth, label='Open')\nplt.bar(pos2, y2, color='#F57F17', width=barWidth, label='Closed')\nplt.bar(pos3, y3, color='#E65100', width=barWidth, label='Cancelled')\n\n# Add xticks on the middle of the group bars\nplt.xlabel('Assignee', fontweight='bold')\nplt.ylabel('Number of Tickets', fontweight='bold')\nplt.xticks([i + barWidth for i in range(len(y1))], ['Asif', 'Basit', 'Ravi', 'Minil'])\nfor x,y in zip(pos1,y1):\n    plt.text(x, y, '%d' % y, ha='center' , va= 'bottom')\nfor x,y in zip(pos2,y2):\n    plt.text(x, y, '%d' % y, ha='center' , va= 'bottom')\nfor x,y in zip(pos3,y3):\n    plt.text(x, y, '%d' % y, ha='center' , va= 'bottom')\nplt.title ('$Grouped $ $ Bar $ $ Chart$')\n\n# Create legend & Show graphic\nplt.legend()\nplt.show()","5122630a":"import pandas as pd\n\ndf = pd.DataFrame({\"Year\" : [2015,2016,2017,2018,2019], \n                  \"Salary_Hike\" : [2000, 3000, 4000, 3500, 6000]})","771912e6":"# plot line chart\nplt.figure(figsize=(8,8))\nplt.plot(df[\"Year\"], df[\"Salary_Hike\"])\nplt.title(\"Simple Line Plot\")\nplt.xlabel('Year')\nplt.ylabel('Salary_Hike')\nplt.style.use('seaborn-white')","5441fe1e":"x = np.linspace(0, 10, 1000)\ny = np.sin(x) # Sine Graph\nplt.plot(x,y)\nplt.show()","9b1042a2":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)","37435ce4":"x = np.linspace(0, 10, 1000)\ny = np.sin(x) # Sine Graph\nplt.plot(x,y)\nplt.show()","06d83b96":"plt.style.use('seaborn-darkgrid')\n%matplotlib inline","c66ecf08":"# Solid blue line will be plotted using the argument \"b-\"\nplt.figure(figsize=(10,5))\nx = np.linspace(0, 10, 1000)\ny = np.sin(x) # Sine Graph\nplt.plot(x,y,'b-')\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.show()","cf83a107":"\nax = df.plot(x=\"Year\", y=\"Salary_Hike\", kind=\"line\", title =\"Simple Line Plot\", legend=True, style = 'b--')\nax.set(ylabel='Salary_Hike', xlabel = 'Year', xticks =df[\"Year\"])\nplt.show()","3e7d67a6":"# Solid red line will be plotted using the argument \"r-\"\nplt.figure(figsize=(10,5))\nx = np.linspace(0, 10, 1000)\ny = np.sin(x) # Sine Graph\nplt.plot(x,y,'r-')\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.show()","bf758cc9":"# Plot green dots using the argument \"go\"\nplt.figure(figsize=(10,5))\nx = np.linspace(0, 10, 40)\ny = np.sin(x) # Sine Graph\nplt.plot(x,y,'go')\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.show()","ed469b9d":"# Plotting red dots using the argument \"ro\"\nplt.figure(figsize=(10,5))\nx = np.linspace(0, 10, 40)\ny = np.sin(x) # Sine Graph\nplt.plot(x,y,'ro')\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.show()","ac2d454d":"# Plotting traingular dots using the argument \"r^\"\nplt.figure(figsize=(10,5))\nx = np.linspace(0, 10, 40)\ny = np.sin(x) # Sine Graph\nplt.plot(x,y,'r^')\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.show()","c5d34ad8":"# Plotting traingular dots using the argument \"rv\"\nplt.figure(figsize=(10,5))\nx = np.linspace(0, 10, 40)\ny = np.sin(x) # Sine Graph\nplt.plot(x,y,'rv')\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.show()","653ee85a":"\nproduct = pd.DataFrame({\"Year\" : [2014,2015,2016,2017,2018], \n                  \"ProdAManufacture\" : [2000, 3000, 4000, 3500, 6000],\n                  \"ProdBManufacture\" : [3000, 4000, 3500, 3500, 5500]})\n\n\n# Multi line plot\nax = product.plot(\"Year\", \"ProdAManufacture\", kind=\"line\", label = 'Product A manufacture')\nproduct.plot(\"Year\", \"ProdBManufacture\", ax= ax , kind=\"line\", label = 'Product B manufacture', title= 'MultiLine Plot') #ax : axes object\n\n# Set axes\nax.set(ylabel='Sales', xlabel = 'Year', xticks =df[\"Year\"])\n","db3ac5b4":"plt.figure(figsize=(10,5))\nx = np.array([1,2,3,4,5,6])\ny1 = np.power(x,2)\ny2 = np.power(x,3)\nplt.plot(x,y1, \"b-\" , label = '$y1 = x^2$') # Setting up legends\nplt.plot(x,y2, \"r-\" ,label ='$y2 = x^3$') # Setting up legends\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.legend()\nplt.tight_layout()\nplt.show()","77071896":"#Plotting multiple sets of data\nx = np.linspace(0, 10, 2000)\nplt.figure(figsize=(10,6))\nplt.plot(x,np.sin(x) , label = '$Sin(X)$')\nplt.plot(x,np.cos(x) , label = '$cos(X)$')\nplt.xlabel(r'$X$' , fontsize = 18)\nplt.ylabel(r'$Y$' , fontsize = 18)\nplt.title(\"$Sin(x) $ $ & $ $ Cos(x)$\" ,fontsize = 14)\nplt.legend(loc = 'upper right') # Legend will be placed at upper right position\nplt.show()","14562dc7":"#Changing the line style\nplt.figure(figsize=(10,5))\nx = np.array([1,2,3,4,5,6])\ny1 = np.power(x,2)\ny2 = np.power(x,3)\nplt.plot(x,y1, \"b-\" , label = '$y1 = x^2$') # Setting up legends\nplt.plot(x, y2,color='red',linewidth=1.0,linestyle='--') # Setting up legends\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.legend(loc='upper center', fontsize='large')\nplt.show()","c6459e51":"# Line Styling\nx = np.linspace(0, 10, 2000)\nplt.figure(figsize=(16, 9))\nplt.plot(x,np.sin(x) , label = '$Sin(X) $ $ Dashed $' , linestyle='dashed')\nplt.plot(x+1,np.sin(x) , label = '$Sin(X) $ $ Dashdot $' , linestyle='dashdot')\nplt.plot(x,np.cos(x) , label = '$cos(X) $ $ Solid $' , linestyle='solid')\nplt.plot(x+1,np.cos(x) , label = '$cos(X)$ $ Dotted $' , linestyle='dotted')\nplt.xlabel(r'$X$' , fontsize = 18)\nplt.ylabel(r'$Y$' , fontsize = 18)\nplt.title(\"$Sin(x) $ $ & $ $ Cos(x)$\" ,fontsize = 14)\nplt.legend(loc = 'upper right' , fontsize = 14 , bbox_to_anchor=(1.2, 1.0)) \nplt.show()","bdb5e39f":"# Line Styling\nx = np.linspace(0, 10, 2000)\nplt.figure(figsize=(16, 9))\nplt.plot(x,np.sin(x) , label = '$Sin(X) $ $ Dashed $' , linestyle='--')\nplt.plot(x+1,np.sin(x) , label = '$Sin(X) $ $ Dashdot $' , linestyle='-.')\nplt.plot(x,np.cos(x) , label = '$cos(X) $ $ Solid $' , linestyle='-')\nplt.plot(x+1,np.cos(x) , label = '$cos(X)$ $ Dotted $' , linestyle=':')\nplt.xlabel(r'$X$' , fontsize = 18)\nplt.ylabel(r'$Y$' , fontsize = 18)\nplt.title(\"$Sin(x) $ $ & $ $ Cos(x)$\" ,fontsize = 14)\nplt.legend(loc = 'upper right' , fontsize = 14 , bbox_to_anchor=(1.2, 1.0)) \nplt.show()","e07d24a8":"# Shading Regions with fill_between() function\nx = np.linspace(0, 10, 2000)\nplt.figure(figsize=(10,6))\nplt.plot(x,np.sin(x) , label = '$Sin(X)$')\nplt.plot(x,np.cos(x) , label = '$cos(X)$')\nplt.fill_between(x,0,np.sin(x))\nplt.fill_between(x,0,np.cos(x))\nplt.xlabel(r'$X$' , fontsize = 18)\nplt.ylabel(r'$Y$' , fontsize = 18)\nplt.title(\"$Sin(x) $ $ & $ $ Cos(x)$\" ,fontsize = 14)\nplt.legend(loc = 'lower left') # Legend will be placed at lower left position\nplt.show()","cd9b502f":"#Changing Legend position & font\nx = np.array([1,2,3,4,5,6])\ny1 = np.power(x,2)\ny2 = np.power(x,3)\nplt.plot(x,y1, \"b-\" , label = '$y1 = x^2$') # Setting up legends\nplt.plot(x,y2, \"r-\" ,label ='$y2 = x^3$') # Setting up legends\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.legend(loc='upper center', fontsize='large')\nplt.show()","71ef37fc":"# Changing line width\nplt.figure(figsize=(10,6))\nx= [1,2,3,4,5,6,7,8,9]\ny= [7,8,9,10,7,11,12,13,14]\ny2 = [7,7,7,7,7,7,7,7,7]\nplt.plot(x , y, linewidth = 4 ,label = 'Line -1') # Changing line width\nplt.plot(x , y2, linewidth = 3,label = 'Line - 2')\nplt.xlabel('X Axis Label')\nplt.ylabel('Y Axis Label')\nplt.title ('Line Graph')\nplt.legend()\nplt.show()","8dfd9cc9":"# Plot with Grid Lines\nplt.figure(figsize=(10,6))\nx= [1,2,3,4,5,6,7,8,9]\ny= [7,8,9,10,7,11,12,13,14]\ny2 = [7,8,9,11,14,9,10,7,8]\nplt.plot(x , y, linewidth = 4 ,label = 'Line -1') # Changing line width\nplt.plot(x , y2, linewidth = 3,label = 'Line - 2')\nplt.xlabel('X Axis Label')\nplt.ylabel('Y Axis Label')\nplt.title ('Line Graph')\nplt.legend()\nplt.grid(b=True , linestyle = '-' , which = 'major' , color = 'grey') # Grid Lines\nplt.show()","16970d82":"# Setting the background color\nx = np.array([1,2,3,4,5,6])\ny1 = np.power(x,2)\ny2 = np.power(x,3)\nplt.figure(figsize=(12,5)) # Setting the figure size\nax = plt.axes()\nax.set_facecolor(\"darkgrey\") # Setting the background color by using Hex code\nplt.plot(x,y1,\"bo-\", x,y2, \"ro-\")\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.show()","b264e01b":"# Display multiple plots in one figure (1 row & 2 columns)\nplt.figure(figsize=(14,6))\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x) # Sine Graph\ny2 = np.cos(x) # cosine graph\nplt.subplot(1,2,1)\nplt.plot(x,y1)\nplt.subplot(1,2,2)\nplt.plot(x,y2)\nplt.show()","74a7127a":"# Display multiple plots in one figure (2 row & 1 columns)\nplt.figure(figsize=(12,6))\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x) # Sine Graph\ny2 = np.cos(x) # cosine graph\nplt.subplot(2,1,1)\nplt.plot(x,y1, \"b-\")\nplt.subplot(2,1,2)\nplt.plot(x,y2, \"r-\")\nplt.tight_layout()\nplt.show()","7dcd1d02":"# # Display multiple plots in one figure using subplots()\nx = np.arange(-50,50)\ny1 = np.power(x,2)\ny2 = np.power(x,3)\ny3 = np.sin(x)\ny4 = np.cos(x)\ny5 = np.tan(x)\ny6 = np.tanh(x)\ny7 = np.sinh(x)\ny8 = np.cosh(x)\ny9 = np.exp(x)\nfig1 , ax1 = plt.subplots(nrows=3,ncols=3 , figsize = (20,20)) # Create a figure and subplo\nax1[0,0].plot(x,y1,\"tab:blue\") # set the color of the line chart\nax1[0,0].set_title(\"Square Function\") # setting title of subplot\nax1[0,0].set_xlabel(r'$X$' , fontsize = 18) #Set the label for the x-axis\nax1[0,0].set_ylabel(r'$Y$' , fontsize = 18) #Set the label for the y-axis\nax1[0,1].plot(x,y2,\"tab:orange\")\nax1[0,1].set_title(\"Cubic Function\")\nax1[0,1].set_xlabel(r'$X$' , fontsize = 18)\nax1[0,1].set_ylabel(r'$Y$' , fontsize = 18)\nax1[0,2].plot(x,y3,\"tab:green\")\nax1[0,2].set_title(\"Sine Function\")\nax1[0,2].set_xlabel(r'$X$' , fontsize = 18)\nax1[0,2].set_ylabel(r'$Y$' , fontsize = 18)\nax1[1,0].plot(x,y4,\"b-\")\nax1[1,0].set_title(\"Cosine Function\")\nax1[1,0].set_xlabel(r'$X$' , fontsize = 18)\nax1[1,0].set_ylabel(r'$Y$' , fontsize = 18)\nax1[1,1].plot(x,y5,\"r-\")\nax1[1,1].set_title(\"Tangent Function\")\nax1[1,1].set_xlabel(r'$X$' , fontsize = 18)\nax1[1,1].set_ylabel(r'$Y$' , fontsize = 18)\nax1[1,2].plot(x,y6,\"g-\")\nax1[1,2].set_title(\"Hyperbolic Tangent\")\nax1[1,2].set_xlabel(r'$X$' , fontsize = 18)\nax1[1,2].set_ylabel(r'$Y$' , fontsize = 18)\n\nax1[2,0].plot(x,y7,\"m-\")\nax1[2,0].set_title(\"Hyperbolic Sine\")\nax1[2,0].set_xlabel(r'$X$' , fontsize = 18)\nax1[2,0].set_ylabel(r'$Y$' , fontsize = 18)\nax1[2,1].plot(x,y8,\"y-\")\nax1[2,1].set_title(\"Hyperbolic Cosine\")\nax1[2,1].set_xlabel(r'$X$' , fontsize = 18)\nax1[2,1].set_ylabel(r'$Y$' , fontsize = 18)\nax1[2,2].plot(x,y9,\"k-\")\n\nax1[2,2].set_title(\"Exponential Function\")\nax1[2,2].set_xlabel(r'$X$' , fontsize = 18)\nax1[2,2].set_ylabel(r'$Y$' , fontsize = 18)\nplt.show()","55b51605":"y = [[1,2,3,4,5] , [10,20,30,40,50],[60,70,80,90,100] ]\ncnt =0\nplt.figure(figsize=(10,6))\nfor i in y:\n    x1 = [10,20,30,40,50]\n    cnt +=1\n    print ('iteration Number :- {}'.format(cnt))\n    print ('X1 Value :- {}'.format(x1))\n    print('Y value (i) :- {}'.format(i))\n    plt.plot(x1,i)\nplt.show()","6f925619":"ax = product.plot(\"Year\", \"ProdAManufacture\", kind='scatter', color = 'red', title = 'Year by ProductA Manufacture')\nax.set(ylabel='ProdAManufacture', xlabel = 'Year', xticks =df[\"Year\"])\nplt.show()","aca7e6ea":"x1 = np.array([250,150,350,252,450,550,455,358,158,355])\ny1 =np.array([40,50,80, 90, 100,50,60,88,54,45])\nx2 = np.array([200,100,300,220,400,500,450,380,180,350])\ny2 = np.array([400,500,800, 900, 1000,500,600,808,504,405])","f3c4ea68":"#Graph - 1\nplt.scatter(x1,y1)\nplt.xlabel('$Time $ $ Spent$' , fontsize = 12)\nplt.ylabel('$Score$' , fontsize = 12)\nplt.title ('Scatter Graph')\nplt.show()","55a84774":"#Graph - 2\nplt.scatter(x2,y2 ,color = 'r')\nplt.xlabel('$Time $ $ Spent$' , fontsize = 12)\nplt.ylabel('$Score$' , fontsize = 12)\nplt.title ('Scatter Graph')\nplt.show()","b4d01f0c":"#Graph - 3\nplt.scatter(x1,y1 ,label = 'Class 1')\nplt.scatter(x2,y2 ,label = 'Class 2',color ='r')\nplt.xlabel('$Time $ $ Spent$' , fontsize = 12)\nplt.ylabel('$Score$' , fontsize = 12)\nplt.title ('Scatter Graph')\nplt.legend()\nplt.show()","9ae00d26":"#Graph - 4\nplt.scatter(x1,y1 ,label = 'Class 1',marker='o' , color = 'm')\nplt.scatter(x2,y2 ,label = 'Class 2',marker='v',color ='r')\nplt.xlabel('$Time $ $ Spent$' , fontsize = 12)\nplt.ylabel('$Score$' , fontsize = 12)\nplt.title ('Scatter Graph')\nplt.legend()\nplt.show()","9202eac2":"plt.figure(figsize=(10,6))\nx = np.random.normal(0,10,1000)\ny = np.random.normal(0,10,1000)\nplt.scatter(x,y)\nplt.show()","0b6c2611":"plt.figure(figsize=(8,6))\nx = np.random.random(10)\ny = np.random.random(10)\n# \"alpha\" is used for softnening colors\nplt.scatter(np.random.random(10),np.random.random(10),c='r', s=50 , alpha=0.6 , label = 'One')\nplt.scatter(np.random.random(10),np.random.random(10),c='b', s=100 , alpha=0.6 , label = 'Two')\nplt.scatter(np.random.random(10),np.random.random(10),c='g', s=150 , alpha=0.6 , label = 'Three')\nplt.scatter(np.random.random(10),np.random.random(10),c='y', s=200 , alpha=0.6 , label = 'Four')\nplt.legend(bbox_to_anchor=(1.0, 1.0) , shadow=True, fontsize='x-large')\nplt.show()","c1d23794":"# Changing label color\nplt.figure(figsize=(8,6))\nx = np.random.random(10)\ny = np.random.random(10)\n# \"alpha\" is used for softnening colors\nplt.rcParams['text.color'] = 'red' # Label Color\nplt.scatter(np.random.random(10),np.random.random(10),c='r', s=50 , alpha=0.6 , label = 'One')\nplt.scatter(np.random.random(10),np.random.random(10),c='b', s=100 , alpha=0.6 , label = 'Two')\nplt.scatter(np.random.random(10),np.random.random(10),c='g', s=150 , alpha=0.6 , label = 'Three')\nplt.scatter(np.random.random(10),np.random.random(10),c='y', s=200 , alpha=0.6 , label = 'Four')\nplt.legend(bbox_to_anchor=(1.0, 1.0) , shadow=True, fontsize='x-large')\nplt.show()","46b8946f":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')","bbadbf89":"Goals = [20, 12, 11, 4, 3]\nplayers = ['Ronaldo', 'Messi', 'Suarez', 'Neymar', 'Salah' ]\ncomp = pd.DataFrame({\"Goals\" : Goals, \"players\" : players})\nax = comp.plot(y=\"Goals\", kind=\"pie\", labels = comp[\"players\"], autopct = '%1.0f%%', legend=False, title='No of Goals scored')\n\n# Hide y-axis label\nax.set(ylabel='')","da3b1a0f":"plt.figure(figsize=(9,9))\narea = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (area , labels= labels , colors= colors , startangle=45)\nplt.show()","90f01813":"# Display percentage in Pie Chart using autopct='%1.1f%%'\nplt.figure(figsize=(8,8))\narea = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#7CB342','#C0CA33','#FFB300','#F57C00']\nplt.pie (area , labels= labels , colors= colors , startangle=45 , shadow='true', autopct='%1.1f%%')\nplt.show()","0eb9cbbf":"plt.figure(figsize=(8,8))\narea = [48 , 30 , 20 , 15]\ntotal = np.sum(area)\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ndef val_per(x):\n    return '{:.2f}%\\n({:.0f})'.format(x, total*x\/100)\ncolors = ['#7CB342','#C0CA33','#FFB300','#F57C00']\nplt.pie (area , labels= labels , colors= colors , startangle=45 , shadow='true', autopct=val_per)\nplt.show()","08451548":"ax = comp.plot(y=\"Goals\", kind=\"pie\", labels = comp[\"players\"], startangle = 90, shadow = True, \n        explode = (0.1, 0.1, 0.1, 0, 0), autopct = '%1.0f%%', legend=False, title='No of Goals scored')\nax.set(ylabel='')\nplt.show()","c23aca2d":"#Explode 4th Slice\nplt.figure(figsize=(8,8))\narea = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#7CB342','#C0CA33','#FFB300','#F57C00']\n# explode = [0,0,0,0.1] will explode the fourth slice\nplt.pie (area , labels= labels , colors= colors , startangle=45 , autopct='%1.1f%%' , shadow=True, explode = (0, 0, 0, 0.1))\nplt.show()","70f3bec9":"plt.figure(figsize=(9,9))\narea = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (area , labels= labels , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","dc765cbf":"# Changing background color\nfig = plt.figure(figsize=(9,9))\nfig.patch.set_facecolor('#DADADA') # Changing background color of donut chart\narea = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (area , labels= labels , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='#DADADA') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","d245aa44":"plt.figure(figsize=(9,9))\narea = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (area , labels= labels , colors= colors , startangle=45 , explode=[0,0 , 0.0 , 0.1])\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","520db38e":"plt.figure(figsize=(9,9))\narea = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (area , labels= labels , colors= colors , startangle=45 , explode=[0,0 , 0.1 , 0.1])\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","bf3f49bd":"plt.figure(figsize=(9,9))\narea = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (area , labels= labels , colors= colors , startangle=45 , explode=[0.03,0.03 , 0.03,0.03])\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","790b724a":"plt.figure(figsize=(9,9))\narea = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (area , labels= labels , colors= colors , startangle=45 , autopct='%1.1f%%')\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","fd34447c":"plt.figure(figsize=(9,9))\narea = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (area , labels= labels , colors= colors , startangle=45 , autopct='%1.1f%%', pctdistance=0.8)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","72557ec7":"plt.figure(figsize=(9,9))\narea = [48 , 30 , 20 , 15]\ntotal = np.sum(area)\ndef val_per(x):\n    return '{:.2f}%\\n({:.0f})'.format(x, total*x\/100)\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (area , labels= labels , colors= colors , startangle=45 , autopct=val_per, pctdistance=0.8)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","78266588":"fig = plt.figure(figsize=(20,6))\narea = [48 , 30 , 20 , 15]\npriority = ['Low' , 'Medium' , 'High' , 'Critical']\nstatus = ['Resolved' , 'Cancelled' , 'Pending' , 'Assigned']\ncompany = ['IBM' , 'Microsoft', 'BMC' , 'Apple']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.subplot(1,3,1)\nplt.pie (area , labels= priority , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.subplot(1,3,2)\nplt.pie (area , labels= status , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.subplot(1,3,3)\nplt.pie (area , labels= company , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","ef24b110":"fig = plt.figure(figsize=(20,13))\narea = [48 , 30 , 20 , 15]\npriority = ['Low' , 'Medium' , 'High' , 'Critical']\nstatus = ['Resolved' , 'Cancelled' , 'Pending' , 'Assigned']\ncompany = ['IBM' , 'Microsoft', 'BMC' , 'Apple']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.subplot(2,3,1)\nplt.pie (area , labels= priority , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.subplot(2,3,2)\nplt.pie (area , labels= status , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.subplot(2,3,3)\nplt.pie (area , labels= company , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.subplot(2,3,4)\nplt.pie (area , labels= priority , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0),0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\n\nplt.subplot(2,3,5)\nplt.pie (area , labels= status , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.subplot(2,3,6)\nplt.pie (area , labels= company , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","7d39c60e":"x = np.random.normal(size = 2000)\nplt.hist(x, bins=40, color='yellowgreen')\nplt.gca().set(title='Histogram', ylabel='Frequency')\nplt.show()","d3d0782b":"x = np.random.rand(2000)\nplt.hist(x, bins=30 ,color='#D4AC0D')\nplt.gca().set(title='Histogram', ylabel='Frequency')\nplt.show()","ea94002a":"# Using Edge Color for readability\nplt.figure(figsize=(10,8))\nx = np.random.normal(size = 2000)\nplt.hist(x, bins=40, color='yellowgreen' , edgecolor=\"#6A9662\")\nplt.gca().set(title='Histogram', ylabel='Frequency')\nplt.show()","66453eaa":"# Binning\nplt.figure(figsize=(10,8))\nx = np.random.normal(size = 2000)\nplt.hist(x, bins=30, color='yellowgreen' , edgecolor=\"#6A9662\")\nplt.gca().set(title='Histogram', ylabel='Frequency')\n\n\nplt.figure(figsize=(10,8))\nplt.hist(x, bins=20, color='yellowgreen' , edgecolor=\"#6A9662\")\nplt.gca().set(title='Histogram', ylabel='Frequency')\n\n\nplt.figure(figsize=(10,8))\nplt.hist(x, bins=10, color='yellowgreen' , edgecolor=\"#6A9662\")\nplt.gca().set(title='Histogram', ylabel='Frequency')\nplt.show()","18e980a3":"plt.figure(figsize=(8,11))\nx = np.random.normal(-4,1,size = 800)\ny = np.random.normal(0,1.5,size = 800)\nz = np.random.normal(3.5,1,size = 800)\nplt.hist(x, bins=30, color='yellowgreen' , alpha=0.6)\nplt.hist(y, bins=30, color='#FF8F00' , alpha=0.6)\nplt.hist(z, bins=30, color='blue' , alpha=0.6)\nplt.gca().set(title='Histogram', ylabel='Frequency')\nplt.show()","246fa225":"# Using Histogram to plot a cumulative distribution function\nplt.figure(figsize=(10,8))\nx = np.random.rand(2000)\nplt.hist(x, bins=30 ,color='#ffa41b' , edgecolor=\"#639a67\",cumulative=True)\nplt.gca().set(title='Histogram', ylabel='Frequency')\nplt.show()","ec227039":"labels = ['Amsterdam', 'Berlin', 'Brussels', 'Paris']\nx1 = [45, 30, 15, 10]\nx2 = [25, 20, 25, 50]\n\nfinaldf = pd.DataFrame({\"2017_Score\":x1, \"2018_Score\" : x2, \"cities\" : labels})","b28c1582":"# Method 1\n\nfig = plt.figure()\n\nax1 = fig.add_subplot(121)\nax = finaldf.plot(x=\"cities\",  y=\"2017_Score\", ax=ax1, kind=\"barh\", legend = False, title = \"2017 Score\")\nax.invert_yaxis()\n\nax2 = fig.add_subplot(122)\nax = finaldf.plot(x=\"cities\",  y=\"2018_Score\", ax=ax2, kind=\"barh\", legend = False, title = \"2018 Score\")\nax.invert_yaxis()\nax.set(ylabel='')","ff58620f":"#Method 2\n\nfig, (ax0, ax01) = plt.subplots(1, 2)\n\nax = finaldf.plot(x=\"cities\",  y=\"2017_Score\", ax=ax0, kind=\"barh\", legend = False, title = \"2017 Score\")\nax.invert_yaxis()\n\nax = finaldf.plot(x=\"cities\",  y=\"2018_Score\", ax=ax01, kind=\"barh\", legend = False, title = \"2018 Score\")\nax.invert_yaxis()\nax.set(ylabel='')","7a3a1497":"fig = plt.figure()\nax1 = fig.add_subplot(211)\nax = finaldf.plot(x=\"cities\",  y=\"2017_Score\", ax=ax1, kind=\"barh\", legend = False, title = \"2017 vs 2018 Score\")\nax.invert_yaxis()\nplt.xticks(range(0,60,10))\nax.set(ylabel='')\n\nax2 = fig.add_subplot(212)\nax = finaldf.plot(x=\"cities\",  y=\"2018_Score\", ax=ax2, kind=\"barh\", legend = False)\nax.invert_yaxis()\nax.set(ylabel='')","0ff3f968":"x = np.arange(1,31)\ny = np.random.normal(10,11,size=30)\ny = np.square(y)\nplt.figure(figsize=(16,6))\nplt.plot(x,y)\nplt.fill_between(x, y)\nplt.show()","943000fe":"x = np.arange(1,31)\ny = np.random.normal(10,11,size=30)\ny = np.square(y)\nplt.figure(figsize=(16,6))\nplt.fill_between( x, y, color=\"#baf1a1\") # #Changing Fill color\nplt.plot(x, y, color='#7fcd91') # Color on edges\nplt.title(\"$ Area $ $ chart $\" , fontsize = 16)\nplt.xlabel(\"$X$\" , fontsize = 16)\nplt.ylabel(\"$Y$\" , fontsize = 16)\nplt.show()","0d268dfa":"x = np.arange(1,31)\ny = np.random.normal(10,11,size=30)\ny = np.square(y)\nplt.figure(figsize=(16,6))\nplt.fill_between( x, y, color=\"#C8D700\" , alpha = 0.3) # Changing transperancy using Alpha\nplt.plot(x, y, color='#36BD00')\nplt.title(\"$ Area $ $ chart $\" , fontsize = 16)\nplt.xlabel(\"$X$\" , fontsize = 16)\nplt.ylabel(\"$Y$\" , fontsize = 16)\nplt.show()","16c7ef10":"x = np.arange(1,51)\ny = np.random.normal(1,5,size=50)\ny = np.square(y)\nplt.figure(figsize=(16,6))\nplt.fill_between( x, y, color=\"#5ac8fa\", alpha=0.4)\nplt.plot(x, y, color=\"blue\", alpha=0.6) # Bold line on edges\nplt.title(\"$ Area $ $ chart $\" , fontsize = 16)\nplt.xlabel(\"$X$\" , fontsize = 16)\nplt.ylabel(\"$Y$\" , fontsize = 16)\nplt.show()\nplt.figure(figsize=(16,6))\nplt.fill_between( x, y, color=\"#5ac8fa\", alpha=0.4)\nplt.plot(x, y, color=\"blue\", alpha=0.2) # Less stronger line on edges\nplt.title(\"$ Area $ $ chart $\" , fontsize = 14)\nplt.xlabel(\"$X$\" , fontsize = 14)\nplt.ylabel(\"$Y$\" , fontsize = 14)\nplt.show()","37ccecc7":"x=np.arange(1,6)\ny1 = np.array([1,5,9,13,17])\ny2 = np.array([2,6,10,14,16])\ny3 = np.array([3,7,11,15,19])\ny4 = np.array([4,8,12,16,20])\nplt.figure(figsize=(8,6))\nplt.stackplot(x,y1,y2,y3,y4, labels=['Y1','Y2','Y3','Y4'])\nplt.legend(loc='upper left')\nplt.show()","abb4b122":"x=np.arange(1,6)\ny=[ [1,5,9,13,17], [2,6,10,14,16], [3,7,11,15,19] , [4,8,12,16,20] ]\nplt.figure(figsize=(8,6))\nplt.stackplot(x,y , labels=['Y1','Y2','Y3','Y4'])\nplt.legend(loc='upper left')\nplt.show()","6047e307":"x=np.arange(1,7)\ny=[ [1,5,9,3,17,1], [2,6,10,4,16,2], [3,7,11,5,19,1] , [4,8,12,6,20,2] ]\nplt.figure(figsize=(10,6))\nplt.stackplot(x,y , labels=['Y1','Y2','Y3','Y4'])\nplt.legend(loc='upper left')\nplt.show()","5fc71d40":"x=np.arange(1,7)\ny=[ [1,5,9,3,17,1], [2,6,10,4,16,2], [3,7,11,5,19,1] , [4,8,12,6,20,2] ]\nplt.figure(figsize=(11,6))\nplt.stackplot(x,y , labels=['Y1','Y2','Y3','Y4'] , colors= [\"#00b159\" , \"#ffc425\", \"#f37735\",\"f34234\"])\nplt.legend(loc='upper left')\nplt.show()\nplt.figure(figsize=(11,6))\nplt.stackplot(x,y, labels=['Y1','Y2','Y3','Y4'], colors= [\"#00b159\" , \"#ffc425\", \"#f37735\",\"f34234\"])\nplt.legend(loc='upper left')\nplt.show()\nplt.figure(figsize=(11,6))\nplt.stackplot(x,y, labels=['Y1','Y2','Y3','Y4'], colors= [\"#00b159\" , \"#ffc425\", \"#f37735\",\"f34234\"])\nplt.legend(loc='upper left')\nplt.show()","78aaf497":"TWOPI = 2*np.pi\n\nfig, ax = plt.subplots(1, 1)\n\nt = np.arange(0.0, TWOPI, 0.001)\ns = np.sin(t)\nl = plt.plot(t, s)\n\nax = plt.axis([0,TWOPI,-1,1])\n\nredDot, = plt.plot([0], [np.sin(0)], 'ro')\n\ndef animate(i):\n    redDot.set_data(i, np.sin(i))\n    return redDot,\n\nmyAnimation = animation.FuncAnimation(fig, animate, \n                                      frames=np.arange(0.0, TWOPI, 0.1), \n                                      interval=10, blit=True, \n                                      repeat=False)\n\nplt.show()","2b3edcd1":"# %time myAnimation.save('myAnimation1.gif', writer='imagemagick', fps=30)","06837a84":"def f(x, y):\n    return (1 - x \/ 2 + x ** 5 + y ** 3) * np.exp(-x ** 2 -y ** 2)\nn = 256\nx = np.linspace(-3, 3, n)\ny = np.linspace(-3, 3, n)\nX, Y = np.meshgrid(x, y)\nplt.contourf(X, Y, f(X, Y), 8, alpha=.75, cmap='jet')\nC = plt.contour(X, Y, f(X, Y), 8, colors='black', linewidth=.5)","955bf03e":"def f(x, y):\n    return (1 - x \/ 2 + x ** 5 + y ** 3) * np.exp(-x ** 2 - y ** 2)\nn = 10\nx = np.linspace(-3, 3, 4 * n)\ny = np.linspace(-3, 3, 3 * n)\nX, Y = np.meshgrid(x, y)\nplt.imshow(f(X, Y))\nplt.show()","2c4c06f2":"fig, ax = plt.subplots()\n\n\nx_pos = 0\ny_pos = 0\nx_direct = 1\ny_direct = 1\n\n\nax.quiver(x_pos, y_pos, x_direct, y_direct)\nax.set_title('Quiver plot with one arrow')\n\n\nplt.show()","12bb4d44":"fig, ax = plt.subplots()\n\nx_pos = [0, 0]\ny_pos = [0, 0]\nx_direct = [1, 0]\ny_direct = [1, -1]\n\n\nax.quiver(x_pos,y_pos,x_direct,y_direct,\n         scale=5)\nax.axis([-1.5, 1.5, -1.5, 1.5])\n\n\nplt.show()","6a35c3a1":"n = 8\nX, Y = np.mgrid[0:n, 0:n]\nplt.quiver(X, Y)\nplt.show()","f6a69baf":"from mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = Axes3D(fig)\nX = np.arange(-4, 4, 0.25)\nY = np.arange(-4, 4, 0.25)\nX, Y = np.meshgrid(X, Y)\nR = np.sqrt(X**2 + Y**2)\nZ = np.sin(R)\nax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='hot')","6b5e030c":"#Polar Axis \nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\n\nax = plt.subplot(111, projection='polar')\nax.plot(theta, r)\nax.set_rmax(2)\nax.set_rticks([0.5, 1, 1.5, 2])  # less radial ticks\nax.set_rlabel_position(-22.5)  # get radial labels away from plotted line\nax.grid(True)\n\nax.set_title(\"A line plot on a polar axis\", va='bottom')\nplt.show()","684a5d11":"x = ['A','B','C', 'D']\ny = [100,119,800,900]\nplt.bar(x, y)\nax = plt.subplot()\nax.set_ylim(0,1000)\nplt.show()","6c78052a":"plt.legend([\"First_Legend\",\"Second_Legend\"])","62c1de4b":"plt.bar(x, y)\nplt.title(\"Cost of Living\", fontsize=18, fontweight='bold', color='blue')\nplt.xlabel(\"Cities\", fontsize=16)\nplt.ylabel(\"Score\", fontsize=16)","69ba0d4b":"## 9.2 Displaying percentage and actual values in Donut Chart <a class=\"anchor\" id=\"9.2\"><\/a>\n\n[Table of Contents](#0.1)","022a2312":"The figure contains the overall window where plotting happens, contained within the figure are where actual graphs are plotted. Every Axes has an x-axis and y-axis for plotting. And contained within the axes are titles, ticks, labels associated with each axis. An essential figure of matplotlib is that we can more than axes in a figure which helps in building multiple plots, as shown below. In matplotlib, pyplot is used to create figures and change the characteristics of figures.\n\nYou can think of the figure as a big graph consisting of multiple sub-plots. Sub-plot can be one or more than one on a figure. In graphics world, it is called 'canvas'.\n\n![image.png](attachment:image.png)\n","59297672":"##   Changing font size, weight and color in graph","b54354be":"## 5.8 Grouped Bar Charts <a class=\"anchor\" id=\"5.8\"><\/a>\n\n[Table of Contents](#0.1)","ab8226f5":"## 4.11 Polar Axis","7ba61680":"## 10.1 Binning   <a class=\"anchor\" id=\"10.1\"><\/a>\n\n[Table of Contents](#0.1)","904a1a8b":"## 8.2 Explode Slice in Pie charts   <a class=\"anchor\" id=\"8.2\"><\/a>\n\n[Table of Contents](#0.1)\n\nThe default startangle is 0. By making startangle = 90 , everything will be rotated counter-clockwise by 90 degrees. By using explode = option, you can explode specific categories","2c850546":"# 1. Introduction to Matplot Library  <a class=\"anchor\" id=\"1\"><\/a>\n\n[Table of Contents](#0.1)\n\nIt is the python library for visualizing data by creating diffrent graphs and charts. Some of the key points related to it are mentioned below :-\n\n1. Matplotlib is a 2-D plotting library that helps in visualizing figures.\n2. It took inspiration from MATLAB programming language and provides a similar MATLAB like interface for graphics.\n3. It really integrated with pandas which is used for data manipulation\n4. It is a robust, free and easy library for data visualization.\n","a8264eea":"# 6.Line Graph  <a class=\"anchor\" id=\"6\"><\/a>\n\n[Table of Contents](#0.1)\n\nA line chart or line graph is a type of chart which displays information as a series of data points called 'markers' connected by straight line segments.","05ddda34":"## 11.2 Changing Fill Color and its transperancy  <a class=\"anchor\" id=\"11.2\"><\/a>\n\n[Table of Contents](#0.1)","d290ce2e":"**We can style your graph using the following functions**\n\n1. **plt.title( )** for specifying title of your plot.\n2. **plt.xlabel( )** for labeling x-axis.\n3. **plt.ylabel( )** for labeling y-axis.\n4. **color** = option in plt.bar( ) for defining color of bars.","4e02020d":"# 14.Useful Tips      <a class=\"anchor\" id=\"13\"><\/a>\n\n[Table of Contents](#0.1)","fec7b486":"# 9. Donut Plot  <a class=\"anchor\" id=\"9\"><\/a>\n\n[Table of Contents](#0.1)\n","b46c0939":"# 5 Bar Graph  <a class=\"anchor\" id=\"5\"><\/a>\n\n[Table of Contents](#0.1)\n\nBar graph is mainly used to compare between two categories or groups.For example you want to show the comparison between employees and their incomes.","a527c5f5":"# 10 Histogram  <a class=\"anchor\" id=\"10\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nHistogram is used to show the frequency distribution of a continuous variable.","03defd03":"## 7. Scatter Plot   <a class=\"anchor\" id=\"7\"><\/a>\n\n[Table of Contents](#0.1)\n\nA scatter plot is mainly used to show relationship between two continuous numeric variables. \n\nkind = 'scatter' is used for creating scatter diagram.","4db64e92":"###  Quiver plot with two arrows","8ae07727":"## 8.1 Display percentage and actual value in Pie charts   <a class=\"anchor\" id=\"8.1\"><\/a>\n\n[Table of Contents](#0.1)","29c7eabb":"## 5.2 How to increase the size of the graph  <a class=\"anchor\" id=\"5.2\"><\/a>\n\n[Table of Contents](#0.1)","63a833d7":"# save plot\nx = ['A','B','C', 'D']\n\ny = [1,2,3,4]\n\nfig = plt.figure()\n\nplt.bar(x, y)\n\nfig.savefig('C:\/My Files\/Blog\/myfirstpic.png')\n\nplt.close(fig)","7a64d981":"This kernel aims at depicting various plots and visualization techniques which can be done using matplotlib library.It covers the basic to advance level plotting functions of the libraray.It contains several examples which will give you hands-on experience in generating plots in python.","046d8d12":"##  Setting different limits in axis","7cb1877b":"## 5.1 How to show values and label at the top of the graph <a class=\"anchor\" id=\"5.1\"><\/a>\n\n[Table of Contents](#0.1)\n","9a38819f":"# 4.Functions used for different plots <a class=\"anchor\" id=\"4\"><\/a>\n\n[Table of Contents](#0.1)\n\nThe following methods are used to draw diffrent types of graphs in matplot library\n\n![](http:\/\/)\n![image.png](attachment:image.png)","a660b010":"##  3 D Plots ","cffa1d03":"## 13. Multi- Dimesional Plots            <a class=\"anchor\" id=\"12\"><\/a>\n\n[Table of Contents](#0.1)\n","f0d26c38":"###  How to show sub-plots vertically","76200e4a":"## 6.1 Add Marker in Line Plot\n\nBy making use of style= option, you can include marker with customization in color and style.","741b2236":"## 5.7 Stacked Vertical Bar  <a class=\"anchor\" id=\"5.7\"><\/a>\n\n[Table of Contents](#0.1)","f37df3d2":"## 10.2  Plotting Multiple Histograms            <a class=\"anchor\" id=\"10.2\"><\/a>\n\n[Table of Contents](#0.1)\n\n","5c5791aa":"##  Contour Plots \n\nContour plots (sometimes called Level Plots) are a way to show a three-dimensional surface on a two-dimensional plane. It graphs two predictor variables X Y on the y-axis and a response variable Z as contours. These contours are sometimes called z-slices or iso-response values","2f45e7fd":"### Reverse order of bars\n\nplt.subplot() is used to find out current axes and then invert function assists to reverse the order.","0d0ea322":"## 9.3 Displaying multiple Donut plots in one figure <a class=\"anchor\" id=\"9.3\"><\/a>\n\n[Table of Contents](#0.1)","2a1f12fe":"## 9.1 Exploding slice in Donut chart  <a class=\"anchor\" id=\"9.1\"><\/a>\n\n[Table of Contents](#0.1)\n","74178991":"# 11. Area Plot   <a class=\"anchor\" id=\"11\"><\/a>\n\n[Table of Contents](#0.1)","b41fb140":"## 5.4 Horizontal Bar Graph <a class=\"anchor\" id=\"5.4\"><\/a>\n\n[Table of Contents](#0.1)\n\nHorizontal bar graph can be used to solve the same purpose as of column bar chart . But this time the bars are horizontal to give a diffrent look and feel","41045425":"<a class=\"anchor\" id=\"0.1\"><\/a>\n\n# Table of Contents \n\n1. [Introduction to Matplot library](#1)\n2. [Matplot Installations and basics](#2)\n3. [Anatomy of Matplotlib Figure](#3)\n4. [Functions used for different plots](#4)\n5. [Bar Graphs](#5)\n   - 5.1 [Show Label and values at the top of the graph](#5.1)\n   - 5.2 [How to increase the size of the graph](#5.2)\n   - 5.3 [How to hide the axis](#5.3)\n   - 5.4 [Horizontal bar graph](#5.4)\n   - 5.5 [Sorting the bar graph](#5.5)\n   - 5.6 [Themes\/Styles for graph](#5.6)\n   - 5.7 [Stacked Vertical Bar](#5.7)\n   - 5.8 [Grouped Bar charts](#5.8)\n   - 5.9 [Stacked Horizontal Bars](#5.9)\n   - 5.10 [Displaying values in Bar charts](#5.10)\n6. [Line Graphs](#6)\n7. [Scatter Graphs](#7)\n8. [Pie charts](#8)\n  -  8.1 [Display percentage and actual value in Pie charts](#8.1)\n  -  8.2 [Explode Slice in Pie charts](#8.2)\n9. [Donut plot](#9)\n  -  9.1 [Explode Slice in Donut Chart](#9.1)\n  -  9.2 [Displaying percentage and actual values in Donut chart](#9.2)\n  -  9.3 [Display multiple Donut plots in one figure](#9.3)\n10. [Histograms](#10)\n   - 10.1 [Binning](#10.1)\n   - 10.2 [Plotting Multiple histograms](#10.2)\n11. [Area Plot](#11)\n   - 11.1 [Changing fill color](#11.1)\n   - 11.2 [Changing fill color and it's transparency](#11.2)\n   - 11.3 [Stacked Area plot](#11.3)\n   - 11.4 [Changing Fill Color and its transparency in Stacked Plot](#11.4)\n12. [Animation Plot](#12)\n13. [Multi- Dimesional Plots](#13)\n14. [Useful tips](#14)\n15. [Reference](#15)\n   ","444eb4b8":"## 11.1 Changing Fill Color <a class=\"anchor\" id=\"11.1\"><\/a>\n\n[Table of Contents](#0.1)\n","6b34fbe4":"## 5.3 How to hide axis  <a class=\"anchor\" id=\"5.3\"><\/a>\n\n[Table of Contents](#0.1)\n\nSometimes we hide y-axis to give aesthetic touch to our bar graph. To do this in matplotlib, we can leverage plt.yticks( ) function.[ ] means empty list.[](http:\/\/)","3a940bdf":"# 3.Anatomy of Matplotlib Figure  <a class=\"anchor\" id=\"3\"><\/a>\n\n[Table of Contents](#0.1)\n\nThe figure contains the overall window where plotting happens, contained within the figure are where actual graphs are plotted. Every Axes has an x-axis and y-axis for plotting. And contained within the axes are titles, ticks, labels associated with each axis. An essential figure of matplotlib is that we can more than axes in a figure which helps in building multiple plots, as shown below. In matplotlib, pyplot is used to create figures and change the characteristics of figures.\n\n![image.png](attachment:image.png)\n\n\n\n","51dc7dea":"# 2.Matplotlib installations and basics <a class=\"anchor\" id=\"2\"><\/a>\n\n[Table of Contents](#0.1)\n\nThe first step is to install the matplotlib. if you are using Anaconda then it is already installed. \n\n### Installation\n\nIf matplotlib is not already installed, you can install it by using the command\n\npip install matplotlib\n\n### Import Library\n\nIn the following ways you can import matplot\n\n1. [import matplotlib.pyplot as plt](http:\/\/)\n2. from matplotlib import pyplot as plt\n\n","1426ecb8":"###  How to add multiple sub-plots\n\nMatplotlib provides two interfaces to do this task - plt.subplots( ) and plt.figure(). ","829a9c0b":"##  Quiver plot using a meshgrid\n\n\nA quiver plot with two arrows is a good start, but it is tedious and repetitive to add quiver plot arrows one by one. To create a complete 2D surface of arrows, we'll utilize NumPy's meshgrid() function.\n\nFirst, we need to build a set of arrays that denote the x and y starting positions of each quiver arrow on the plot. The quiver arrow starting position arrays will be called X and Y.\n\nWe can use the x, y arrow starting positions to define the x and y components of each quiver arrow direction. We will call the quiver arrow direction arrays u and v. For this plot, we will define the quiver arrow direction based upon the quiver arrow starting point using the equations below.\n\n\n![image.png](attachment:image.png)","9986e201":"##  How to save plot","b5bd81dc":"**Code Explanation**\n\n1. **.get_height()** returns height of rectangle of each bar which is basically a value of y-axis\n2. **plt.text()** is used to place text on the graph\n3. **get_x() and get_width()**:- to find the value of the x axis.","d766aa84":"![](.\/myAnimation1.gif)\n\n","45486ca9":"## 11.4 Changing Fill Color and its transperancy in Stacked Plot  <a class=\"anchor\" id=\"11.4\"><\/a>\n\n[Table of Contents](#0.1)","2c30b5fe":"## 6.2 Adding multiple lines in the line graph\n","6d4d17cd":"## 12. Animation Plots           <a class=\"anchor\" id=\"12\"><\/a>\n\n[Table of Contents](#0.1)\n","5866c98b":"## 8 Pie Chart  <a class=\"anchor\" id=\"8\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nA pie chart is a circular graph which splits data into slices to show numerical proportion of each category. If you are showing percentages, all of them should add to 100%.","906b80ea":"# 15. Reference <a class=\"anchor\" id=\"14\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n1. https:\/\/problemsolvingwithpython.com\/06-Plotting-with-Matplotlib\/06.15-Quiver-and-Stream-Plots\/\n2. https:\/\/www.listendata.com\/2019\/06\/matplotlib-tutorial-learn-plot-python.html\n3. https:\/\/github.com\/Saurav6789\/Data-visualization\/blob\/master\/Other_Plots.ipynb\n4. https:\/\/gist.github.com\/gizmaa\/7214002\n5. https:\/\/towardsdatascience.com\/data-visualization-using-matplotlib-16f1aae5ce70\n6. LinkedIn Post from Asif Bhatt\n7.  https:\/\/github.com\/datasciencescoop\/Data-Visualization\/blob\/master\/Matplotlib\/Matplotlib.ipynb","daec17db":"## 11.3 Stacked Area Plot <a class=\"anchor\" id=\"11.3\"><\/a>\n\n[Table of Contents](#0.1)","0b9e7f8d":"## 5.9 Stacked Horizontal Bars <a class=\"anchor\" id=\"5.9\"><\/a>\n\n[Table of Contents](#0.1)","a0793255":"##  Quiver Plots \n\nA quiver plot is a type of 2D plot that shows vector lines as arrows. Quiver plots are useful in Electrical Engineering to visualize electrical potential and useful in Mechanical Engineering to show stress gradients.\n\n","2405c6d3":"##  Mutiple Entries in the Legend","ac11e56c":"## 5.6 Professional Themes \/ Styles for Graphs <a class=\"anchor\" id=\"5.6\"><\/a>\n\n[Table of Contents](#0.1)","86d7f0b3":"###  Quiver plot with one arrow","dc648cd1":"##  Imshow Plots\n\nImshow( RGB ) displays the truecolor image RGB in a figure. imshow( BW ) displays the binary image BW in a figure. For binary images, imshow displays pixels with the value 0 (zero) as black and 1 as white. imshow( X , map ) displays the indexed image X with the colormap map .","8afd8e06":"## 5.5 How to sort or order bars <a class=\"anchor\" id=\"5.5\"><\/a>\n\n[Table of Contents](#0.1)\n\nWe can arrange the bars based on the values. We need to combine both the lists and then sort them based on value of list y. zip( ) function is used to combine items of lists x and y. sorted( )sort them based on y. Then we split and store it in x and y lists.","472a2471":"## 5.10 Displaying values in Bar Charts  <a class=\"anchor\" id=\"5.10\"><\/a>\n\n[Table of Contents](#0.1)","5bee20c4":"**We have used plt.figure(figsize=(7,7))**"}}