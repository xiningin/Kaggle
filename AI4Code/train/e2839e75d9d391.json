{"cell_type":{"2a1eff3a":"code","9e71e5ee":"code","5e454bb5":"code","72e89f41":"code","ba9d6f15":"code","b429057e":"code","84b9f34f":"code","82f53da0":"code","2368f29e":"code","d84f871a":"code","2cf1f17c":"code","5176c01c":"code","fd66a3c2":"code","a9a58614":"code","008e0ae1":"code","d67d926d":"code","9bfdcebf":"code","36e55060":"code","bcc4e742":"code","f9d16801":"code","fa4e740b":"code","727e1d16":"code","bbda520f":"code","c4880af7":"code","d91c26e7":"code","dd2b0982":"code","1e7723e9":"code","ced1d846":"code","322b79e8":"code","ded7ee12":"code","576ff05b":"markdown","d4cdcfe1":"markdown","f03eb43f":"markdown","4e0bc725":"markdown","a61e485c":"markdown","9e17131a":"markdown","005d75a8":"markdown","1c29be67":"markdown","5285d6b0":"markdown","c469bf7c":"markdown","b2541e9f":"markdown","68f0cae1":"markdown","41857836":"markdown","f2397662":"markdown","11eb4634":"markdown","84c555aa":"markdown","8b93a4ee":"markdown","a19d1bff":"markdown","92448c66":"markdown","40022761":"markdown"},"source":{"2a1eff3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e71e5ee":"import matplotlib.pyplot as plt\nimport seaborn as sns","5e454bb5":"path = '..\/input\/appliances-energy-prediction-data-set\/energydata_complete.csv'\ndataLoad = pd.read_csv(path, index_col='date')\n","72e89f41":"dataLoad.head()","ba9d6f15":"dataLoad.shape","b429057e":"dataLoad.info()","84b9f34f":"dataLoad.describe()","82f53da0":"dataLoad.isnull().sum()","2368f29e":"dataVisual = dataLoad.drop(['rv1', 'rv2'], axis=1)","d84f871a":"# Distribution plot for each features\n\nls = []\ncolName = [j for j in dataVisual.columns]\na = 0\nwhile a < 7:\n    for i in range(5):\n        ls.append((a, i))\n    a+=1\nfig, ax = plt.subplots(6, 5, figsize=(28, 30))\nfor k in range(26):\n    sns.histplot(ax=ax[ls[k][0], ls[k][1]], x=colName[k], data=dataVisual)\n    \n        ","2cf1f17c":"a = 0\nwhile a < 7:\n    for i in range(5):\n        ls.append((a, i))\n    a+=1\nfig, ax = plt.subplots(6, 5, figsize=(28, 30))\nfor k in range(26):\n    sns.boxplot(ax=ax[ls[k][0], ls[k][1]], y=colName[k], data=dataVisual)","5176c01c":"b = 0\nwhile b < 7:\n    for i in range(5):\n        ls.append((b, i))\n    b+=1\nfig, ax = plt.subplots(5, 5, figsize=(28, 30))\nfor k in range(25):\n    sns.scatterplot(ax=ax[ls[k][0], ls[k][1]], x=colName[k+1], y=colName[0], data=dataVisual)","fd66a3c2":"corr = dataVisual.corr()\nplt.figure(figsize=(30, 30))\nsns.heatmap(corr, annot=True)","a9a58614":"## Data Normalization\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ndataTrans = pd.DataFrame(scaler.fit_transform(dataVisual), columns=dataVisual.columns)\ndataTrans.head()","008e0ae1":"#eliminating outliers\nQ1=dataTrans.quantile(0.25)\nQ3 = dataTrans.quantile(0.75)\nIQR = Q3-Q1\n\ndataClean = dataTrans[~((dataTrans < (Q1-IQR * 1.5)) |(dataTrans > (Q3 + IQR*1.5)))]\ndataClean.head()\ndataClean.shape","d67d926d":"from sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer(strategy='mean')\ndataImp = pd.DataFrame(imputer.fit_transform(dataClean), columns=dataClean.columns)\ndataImp.head()","9bfdcebf":"dataImp.isnull().sum()","36e55060":"dataTarget = dataImp['Appliances']\ndataPred = dataImp.drop('Appliances', axis=1)","bcc4e742":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(dataPred, dataTarget, test_size=0.2, random_state=0)","f9d16801":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_regression\n\nselector = SelectKBest(score_func=f_regression, k=10)\nfit = selector.fit(dataPred, dataTarget)\ndfscores = pd.DataFrame(fit.scores_)\ndfpred = pd.DataFrame(dataPred.columns)\nfeatScore = pd.concat([dfpred, dfscores], axis=1)\nfeatScore.columns = ['Feature', 'Score']\nfeatScore.nlargest(10, 'Score')","fa4e740b":"from sklearn.ensemble import ExtraTreesRegressor","727e1d16":"model = ExtraTreesRegressor()\nmodel.fit(x_train, y_train)\nfeat_importance = pd.Series(model.feature_importances_, index=x_train.columns)\nfeat_importance.nlargest(10).plot(kind='barh')","bbda520f":"y = dataImp['Appliances']\nX = dataImp[['T2', 'T6', 'T8', 'T1', 'T_out', 'T4','RH_9', 'RH_6', 'RH_8', 'RH_out', 'lights']]","c4880af7":"x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=0)","d91c26e7":"xTrain, xVal, yTrain, yVal = train_test_split(x_train, y_train, test_size=0.2, random_state=0)","dd2b0982":"from sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error","1e7723e9":"regmodel = LinearRegression()\nregmodel = regmodel.fit(xTrain, yTrain)\npredReg = regmodel.predict(xVal)\nmaeReg = mean_absolute_error(yVal, predReg)\nprint('This is MAE score for Linear Regression : ', round(maeReg, 3))","ced1d846":"def modelRF(n, xTrain, yTrain, xVal, yVal):\n    modelRF = RandomForestRegressor(n_estimators=n, criterion='mae')\n    modelRF.fit(xTrain, yTrain)\n    predRF = modelRF.predict(xVal)\n    maeRF = mean_absolute_error(yVal, predRF)\n    return print('This is MAE score for Random Forest Regressor model', n, 'estimators : ', round(maeRF, 3))","322b79e8":"n = [1, 5, 10, 20, 25, 50, 75, 100]\n\nfor i in n:\n    modelRF(i, xTrain, yTrain, xVal, yVal)","ded7ee12":"modelFinal = RandomForestRegressor(n_estimators=20, criterion='mae')\nmodelFinal.fit(x_train, y_train)\npredFinal = modelFinal.predict(x_test)\nmaeFinal = mean_absolute_error(y_test, predFinal)\nprint('This is MAE score of final model :', round(maeFinal, 3))","576ff05b":"## Features Selection","d4cdcfe1":"### Univariate","f03eb43f":"## Model building ","4e0bc725":"## Bivariate","a61e485c":"Before the data were pushed to model, I do some preprocessing to avoid poor performance of the model. I do normalization to make distribution of the features become normal. Also, I try to remove outliers of the data. It is because for predictive model that I will use sensitive to outliers and it can make poor performance model. After removing outliers I have found many missing value of the features. I encouter it with filling missing value with imputation method. I use mean value of each feature to fill the missing value.","9e17131a":"I am splitting data into two parts training and test data set for each variable. I do this with proportion 80 % of total data are training dataset and the rest are test dataset. Then I split the training dataset again in to two parts training and validation dataset. The second spltting I use proportion 80% of the training data are training data and the rest of data are validation dataset.","005d75a8":"## Basic Data Exploration","1c29be67":"On the basic data exploration result we can know that the data consist of 28 features and 19735 rows. In the data itself the missing values are not found.","5285d6b0":"Finally I build the model with best performance that I know from baseline model. In here I decide to use random forest regressor model with parameter n_estimators are 20 and the criterion parameter is 'mae'.","c469bf7c":"Then I do feature selection to make sure I use only importance features for training the model and predicting the energy consumption with small error. I try two diffrence approaches for it. First i am using univariate selection with F value. Then, I am also using features importance to find importance feature. In both method I decide to select the 10 best features.","b2541e9f":"For this project we load data set from sensor reading to predict building energy consumption. Besides sensor reading we get the data from weather station which is temperature and humidity on each measurement was conducted. Sensor data were temperature and humidity of building, in this case is two floor house. ","68f0cae1":"### Univariate Selection","41857836":"## Data Splitting","f2397662":"## Baseline Model","11eb4634":"For baseline model I am using linear regression and random forest regressor. For the linear regression model I keep the parameter deafult. For the random forest regressor I vary the n_estimators parameter from 1 until 100. The metrics to evaluate each model performance is mean absolute error. ","84c555aa":"Then we do more exploratory data analysis to know the distribution of dataset. I use univariate distribution analysis for each features in the data sets. Also, I do bivarite analysis to know the correlation between target variable which in here is Appliances column and the predictor variable. In the bivariate analysis I also make correlation heatmap to understand correlation between each feature. From the exploratory data analysis we know that some predictor almost have normal distribution. ","8b93a4ee":"## Preprocessing Data","a19d1bff":"### Feature Importance","92448c66":"## Dataset Loading","40022761":"## Exploratory Data Analysis"}}