{"cell_type":{"d884b042":"code","ac3ba1ac":"code","e5f24435":"code","fe3f6815":"code","d725f72f":"code","dea20722":"code","382a3a4a":"code","ff6bc374":"code","2247fc78":"code","6bf9b3c4":"code","50187d5b":"code","71538bc8":"code","49b0929e":"code","febb010f":"code","81349fa9":"code","17121ec2":"code","8ab9ca07":"code","3d120ad5":"code","b6e6ae00":"code","f487f6be":"code","f468a78c":"code","eb4a73d3":"code","19c0b13b":"code","a0438c16":"code","91095e62":"code","c37404f3":"code","39c23236":"code","82b23328":"code","47f7d426":"code","aca4530b":"code","08ed17e4":"code","761403b3":"code","5f6dea2d":"code","923879e7":"code","ff804a9c":"code","bb6e8f7d":"code","17d97420":"code","9e1cb021":"code","75fbb475":"code","48dc7209":"code","d3e5c214":"code","8aa0052a":"code","9b44c59c":"code","59e0c4bd":"code","825b3b4e":"code","6c309338":"code","ed9bdde5":"markdown","5a9799c3":"markdown"},"source":{"d884b042":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ac3ba1ac":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error, roc_auc_score, roc_curve\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nimport os\nfrom hyperopt import STATUS_OK, Trials, fmin, hp, tpe, pyll\nimport time\nimport colorama\nimport pickle\nfrom collections import Counter\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom catboost import CatBoostClassifier, Pool\n%matplotlib inline","e5f24435":"import warnings\nwarnings.filterwarnings('ignore')","fe3f6815":"SEED = 2021\nrandom.seed(SEED)\nnp.random.seed(SEED)\nos.environ['PYTHONHASHSEED']=str(SEED)","d725f72f":"train_df = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-mar-2021\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-mar-2021\/test.csv\")\nsub_df = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-mar-2021\/sample_submission.csv\")","dea20722":"train_df.head()","382a3a4a":"test_df.head()","ff6bc374":"train_df.shape, test_df.shape","2247fc78":"train_df.info()","6bf9b3c4":"train_df.target.value_counts() \/ len(train_df)","50187d5b":"test_df.info()","71538bc8":"for col in train_df.select_dtypes('object').columns:\n    print(col, train_df[col].nunique())","49b0929e":"train_df.isnull().sum() \/ len(train_df)","febb010f":"cols_to_remove = ['id']\ntarget = 'target'","81349fa9":"_X = train_df.drop(cols_to_remove + [target], axis=1)\ny = train_df[[target]]\n_XTEST = test_df.drop(cols_to_remove , axis=1)","17121ec2":"_X.shape, _XTEST.shape","8ab9ca07":"X_all = pd.concat([_X, _XTEST]).reset_index(drop=True)\nX_all.shape","3d120ad5":"cat_columns = []\nfor col in X_all.select_dtypes('object').columns:\n    print(col)\n    cat_columns.append(col)\n    le = LabelEncoder()\n    X_all[col] = le.fit_transform(X_all[col])","b6e6ae00":"X_all.shape","f487f6be":"X = X_all[:len(y)]\nXTEST = X_all[len(y):]\nX.shape, XTEST.shape","f468a78c":"X.columns","eb4a73d3":"NUM_OF_BOOST_ROUND = 1000\nEARLY_STOPPING = 300","19c0b13b":"cat_features_index = [i for i,col in enumerate(X.columns) if col in cat_columns]\ncat_features_index","a0438c16":"X_train , X_valid, y_train, y_valid = train_test_split(X,y, \n                                                       test_size=0.2, \n                                                       random_state=SEED, \n                                                       stratify=y)","91095e62":"params = {\n    'cat_features': cat_features_index,\n    'eval_metric': 'AUC',\n    'random_seed': SEED,\n    'n_estimators': NUM_OF_BOOST_ROUND,\n}","c37404f3":"clf = lgb.LGBMClassifier(**params, n_jobs= -1)","39c23236":"clf.fit(X_train, y_train, eval_set=(X_valid, y_valid), early_stopping_rounds=100, verbose=-1)","82b23328":"ypred_lgb = clf.predict_proba(X_valid)[:,1]","47f7d426":"roc_auc_score(y_valid, ypred_lgb)","aca4530b":"ytest = clf.predict_proba(XTEST)[:,1]","08ed17e4":"ytest","761403b3":"sub_df.Response = ytest","5f6dea2d":"sns.distplot(sub_df.Response)","923879e7":"params = {\n    'cat_features' : cat_features_index,\n    'eval_metric': 'AUC',\n    'random_seed': SEED,\n    'n_estimators': NUM_OF_BOOST_ROUND\n}","ff804a9c":"bst = CatBoostClassifier(**params, early_stopping_rounds=EARLY_STOPPING,thread_count=-1)\n_ = bst.fit(X_train, y_train, eval_set=(X_valid,y_valid), plot=True, verbose=False)","bb6e8f7d":"ypred_cat = bst.predict_proba(X_valid)[:,1]","17d97420":"roc_auc_score(y_valid, ypred_cat)","9e1cb021":"f_importance_df = pd.DataFrame(bst.get_feature_importance(), columns=['importance'], index=X_valid.columns)\nf_importance_df = f_importance_df.sort_values(by='importance', ascending=False)","75fbb475":"plt.figure(figsize=(10,5))\nsns.barplot(x=f_importance_df.importance[:500], y=f_importance_df.index[:500]);\n","48dc7209":"ypred_test = bst.predict_proba(XTEST)[:,1]","d3e5c214":"sns.distplot(ypred_test)","8aa0052a":"pred_test_df = bst.predict(XTEST)","9b44c59c":"pred_test_df","59e0c4bd":"sub_df","825b3b4e":"def plot_roc(y_trues, y_preds, labels, x_max=1.0):\n    fig, ax = plt.subplots()\n    for i, y_pred in enumerate(y_preds):\n        y_true = y_trues[i]\n        fpr, tpr, thresholds = roc_curve(y_true, y_pred)\n        auc = roc_auc_score(y_true, y_pred)\n        ax.plot(fpr, tpr, label='%s; AUC=%.3f' % (labels[i], auc), marker='o', markersize=1)\n\n    ax.legend()\n    ax.grid()\n    ax.plot(np.linspace(0, 1, 20), np.linspace(0, 1, 20), linestyle='--')\n    ax.set_title('ROC curve')\n    ax.set_xlabel('False Positive Rate')\n    ax.set_xlim([-0.01, x_max])\n    _ = ax.set_ylabel('True Positive Rate')","6c309338":"plot_roc(\n    [y_valid]*2,\n    [ypred_lgb, ypred_cat],\n    ['LGBM', 'CATBOOST'])","ed9bdde5":"LGBM Classifier ","5a9799c3":"CATBOOST Classifier "}}