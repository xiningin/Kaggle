{"cell_type":{"b2da2b65":"code","fcf1cce8":"code","5a9439f0":"code","3e0e69b0":"code","23f09ec2":"code","f9553a80":"code","0ece8c2b":"code","73d64b08":"code","5641baac":"code","61981ceb":"code","34cfd28a":"code","e1f02f68":"code","406037c3":"code","666b6770":"code","c6b59126":"code","08fd9e33":"code","994b1ed9":"code","9d91b199":"code","9a87e48b":"code","bd1b13a0":"code","94fefded":"code","675c9b3d":"code","350bf33f":"code","849a11f5":"code","5ceeb790":"code","6df83210":"code","441a7a33":"code","11c07a2c":"markdown","4adc3d55":"markdown","c1d9c944":"markdown","81199dcb":"markdown","e59583a1":"markdown","b0e83e7e":"markdown","d23ebb2c":"markdown","3f9be1e2":"markdown","38cf6df8":"markdown","e9c8eeff":"markdown","bacb5e08":"markdown","775d3363":"markdown","5239883b":"markdown","95381a0b":"markdown","fccc44d2":"markdown","72aec51a":"markdown","b8b46fbf":"markdown","16a1d1a3":"markdown","6ce79c2f":"markdown","25641179":"markdown","6ce88cfb":"markdown","06ccefc6":"markdown","ac4de618":"markdown","cd2de81d":"markdown","477f703f":"markdown","b6250830":"markdown"},"source":{"b2da2b65":"import os #paths to file\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\nimport warnings# warning filter\n\n#ploting libraries\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\n#feature engineering\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\n\n#train test split\nfrom sklearn.model_selection import train_test_split\n\n#metrics\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.model_selection import cross_validate\n\n#cross validation\nfrom sklearn.model_selection  import cross_val_score as CVS\n\n\n#ML models\nfrom xgboost import XGBClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\n\n#default theme and settings\nsns.set(context='notebook', style='darkgrid', palette='deep', font='sans-serif', font_scale=1, color_codes=False, rc=None)\npd.set_option('display.max_columns', None)\n\n#warning handle\nwarnings.filterwarnings(\"always\")\nwarnings.filterwarnings(\"ignore\")","fcf1cce8":"#list all files under the input directory\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5a9439f0":"#path for the dataset\nMushroom_path = \"\/kaggle\/input\/mushroom-classification\/mushrooms.csv\" ","3e0e69b0":"Mushroom_df = pd.read_csv(Mushroom_path)\nMushroom_df.head()","23f09ec2":"\"Data Shape (row, col): {}\".format(Mushroom_df.shape)","f9553a80":"Mushroom_df.info()","0ece8c2b":"#missing values\nMushroom_df.isnull().sum()","73d64b08":"M_cols = Mushroom_df.columns.to_list()\nprint(\"Value Distribution:\\n\")\nfor col in M_cols:\n    print(col,\"\\n\",Mushroom_df[col].value_counts(),\"\\n\\n\")    ","5641baac":"total = float(len(Mushroom_df[M_cols[0]]))\nplt.figure(figsize=(6,6))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(Mushroom_df[M_cols[0]])\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,height + 3,'{:1.2f}'.format(height\/total),ha=\"center\")\nplt.title(\"Target Plot\", fontsize = 20)\nplt.show()","61981ceb":"for col in M_cols[1:]:\n    plt.figure(figsize=(10,4))\n    sns.countplot(x=col , data=Mushroom_df ,palette='icefire')\n    plt.title(col, fontsize=14)\n    plt.show()\n    print(\"% of total:\")\n    print(round((Mushroom_df[col].value_counts()\/Mushroom_df.shape[0]),4)*100)","34cfd28a":"for col in M_cols[1:]: \n    plt.figure(figsize=(30,20))\n    plt.subplot(2,3,1)\n    sns.countplot(x=col ,hue='class', data=Mushroom_df ,palette='viridis_r')\n    plt.xlabel(col, fontsize=20)\n    plt.legend(loc='upper left')","e1f02f68":"[ pd.pivot_table(Mushroom_df, index=[col,\"class\"], aggfunc = {col:np.count_nonzero}) for col in M_cols[1:]]","406037c3":"Del_cols = ['class','gill-attachment', 'stalk-shape', 'stalk-surface-below-ring', 'stalk-color-below-ring', 'veil-type', 'veil-color', 'ring-number'] \nX =Mushroom_df.copy()\nfor col in Del_cols:\n    X = X.drop(col, axis = 1)\nX=pd.get_dummies(X,columns=X.columns,drop_first=True)\nX.head(2)","666b6770":"y = Mushroom_df['class']\nEncoder_y=LabelEncoder()\ny = Encoder_y.fit_transform(y)\ny","c6b59126":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.75, random_state = 101)\n","08fd9e33":"def cross_val(model_name,model,X,y,cv):\n    \n    scores = CVS(model, X, y, cv=cv)\n    print(f'{model_name} Scores:')\n    for i in scores:\n        print(round(i,2))\n    print(f'Average {model_name} score: {round(scores.mean(),4)}')\n\nindex = ['Valid1','Valid2','Valid3','Valid4','Valid5']\nscoring = ['accuracy','precision', 'recall','f1']","994b1ed9":"#model\nLR = LogisticRegression()\n#cross validation\nLR_report = pd.DataFrame(cross_validate(LR, X, y, scoring=scoring))\n#getting required score methods\nLR_report = LR_report.iloc[:,2:]\n#naming the columns\nLR_report.columns = scoring\n#naming the index\nLR_report.index = index\n\n#final result collection\nmodel_1 = []\n\n#Classification report\nprint(\"Clasification report:\\n\")\nprint(LR_report,\"\\n\\n\")\nprint(\"Mean Scores:\\n\")\nfor score in scoring:\n    print(f\"\\t{score}: {round(LR_report[score].mean(),4)}\")\n    model_1.append(round(LR_report[score].mean(),4))","9d91b199":"#sample prediction for csv file\nLR.fit(X_train, y_train)#training\ny_predict = LR.predict(X_test)#predicting\nLogistic_Regression=pd.DataFrame({'y_test':y_test,'prediction':y_predict})#df for camparison\nLogistic_Regression.to_csv(\"Logistic Regression.csv\")#export to csv     ","9a87e48b":"#model\nDT = DecisionTreeClassifier()\n#cross validation\nDT_report = pd.DataFrame(cross_validate(DT, X, y, scoring=scoring))\n#getting required score methods\nDT_report = DT_report.iloc[:,2:]\n#naming the columns\nDT_report.columns = scoring\n#naming the index\nDT_report.index = index\n\n#final result collection\nmodel_2 = []\n\n#Classification report\nprint(\"Clasification report:\\n\")\nprint(DT_report,\"\\n\\n\")\nprint(\"Mean Scores:\\n\")\nfor score in scoring:\n    print(f\"\\t{score}: {round(DT_report[score].mean(),4)}\")\n    model_2.append(round(DT_report[score].mean(),4))","bd1b13a0":"#sample prediction for csv file\nDT.fit(X_train, y_train)#training\ny_predict = DT.predict(X_test)#predicting\nDecision_Tree=pd.DataFrame({'y_test':y_test,'prediction':y_predict})#df for camparison\nDecision_Tree.to_csv(\"Decision Tree.csv\")#export to csv     ","94fefded":"#model\nRF = RandomForestClassifier()\n#cross validation\nRF_report = pd.DataFrame(cross_validate(RF, X, y, scoring=scoring))\n#getting required score methods\nRF_report = RF_report.iloc[:,2:]\n#naming the columns\nRF_report.columns = scoring\n#naming the index\nRF_report.index = index\n\n#final result collection\nmodel_3 = []\n\n#Classification report\nprint(\"Clasification report:\\n\")\nprint(RF_report,\"\\n\\n\")\nprint(\"Mean Scores:\\n\")\nfor score in scoring:\n    print(f\"\\t{score}: {round(RF_report[score].mean(),4)}\")\n    model_3.append(round(RF_report[score].mean(),4))","675c9b3d":"#sample prediction for csv file\nRF.fit(X_train, y_train)#training\ny_predict = RF.predict(X_test)#predicting\nRandom_Forest = pd.DataFrame({'y_test':y_test,'prediction':y_predict})#df for camparison\nRandom_Forest.to_csv(\"Random Forest.csv\")#export to csv     ","350bf33f":"#model\nXGB = XGBClassifier()\n#cross validation\nXGB_report = pd.DataFrame(cross_validate(XGB, X, y, scoring=scoring))\n#getting required score methods\nXGB_report = XGB_report.iloc[:,2:]\n#naming the columns\nXGB_report.columns = scoring\n#naming the index\nXGB_report.index = index\n\n#final result collection\nmodel_4 = []\n\n#Classification report\nprint(\"Clasification report:\\n\")\nprint(XGB_report,\"\\n\\n\")\nprint(\"Mean Scores:\\n\")\nfor score in scoring:\n    print(f\"\\t{score}: {round(XGB_report[score].mean(),4)}\")\n    model_4.append(round(XGB_report[score].mean(),4))","849a11f5":"#sample prediction for csv file\nXGB.fit(X_train, y_train)#training\ny_predict = XGB.predict(X_test)#predicting\nXGBoost=pd.DataFrame({'y_test':y_test,'prediction':y_predict})#df for camparison\nXGBoost.to_csv(\"XGBoost.csv\")#export to csv     ","5ceeb790":"#model\nSVM = SVC(kernel = 'linear')\n#cross validation\nSVM_report = pd.DataFrame(cross_validate(SVM, X, y, scoring=scoring))\n#getting required score methods\nSVM_report = SVM_report.iloc[:,2:]\n#naming the columns\nSVM_report.columns = scoring\n#naming the index\nSVM_report.index = index\n\n#final result collection\nmodel_5 = []\n\n#Classification report\nprint(\"Clasification report:\\n\")\nprint(SVM_report,\"\\n\\n\")\nprint(\"Mean Scores:\\n\")\nfor score in scoring:\n    print(f\"\\t{score}: {round(SVM_report[score].mean(),4)}\")\n    model_5.append(round(SVM_report[score].mean(),4))\n    \n","6df83210":"#sample prediction for csv file\nSVM.fit(X_train, y_train)#training\ny_predict = SVM.predict(X_test)#predicting\nSupport_Vector_Machines=pd.DataFrame({'y_test':y_test,'prediction':y_predict})#df for camparison\nSupport_Vector_Machines.to_csv(\"Support Vector Machines.csv\")#export to csv     ","441a7a33":"\nModels = pd.DataFrame({\n    'Logistic Regression': np.array(model_1),\n    'Decision Tree': np.array(model_2),\n    'Random Forest': np.array(model_3),\n    'XGBoost': np.array(model_4),\n    'Support Vector Machines': np.array(model_5)})\nModels.index = scoring\n#Models.sort_values(by='Score', ascending=False)\nModels","11c07a2c":"**Unvariate Analisys:**\n\n* **`cap-shape`** - Most of the mushrooms in our dataset have a **convex (45%)** or a **flat (38.8%)** cap\n* **`cap-surface`** - Most frequent cap surface is **scaly (39.93%)** we have next to non **grooves (0.05%)**\n* **`cap-color`** - Over half of the mushrooms in our dataset have a **brown (28.11%)** or a **gray (22.65%)** cap color, we also have 8 other colors that appear less often. \n* **`bruises`** - Most of the mushrooms in our dataset are **not bruised (58.44%)**\n* **`odor`** -  Most frequent scents (over 70%) are either **no smell (43.43%)**  or a **foul smell (26.59%)**.\n* **`gill-attachment`** - Almost our entire data has free gill attachment **(about 97.5%)** so this column is pretty much **usless** in our analysis.  \n* **`gill-spacing`** - More than 85% of the mushrooms in our dataset have a **close gill spacing** so it has **little to no impact** in our analysis.\n* **`gill-size`** - Most of the mushrooms in our dataset have a **broad (69.08%)** gil sizes others are **narrow**.\n* **`gill-color`** - Over half of the mushrooms in our dataset have a **buff (21.27%)**,**pink (18.37%)** or a **white (22.65%)** gill color, we also have 9 other colors that appear less often.\n* **`stalk-shape`** - Most of the mushrooms in our dataset have a **tapering (56.72%)** others are **enlarging**.\n* **`stalk-root`** -  Most frequent stalk roots (over 75%) are either **bulbous (46.48%)**  or **silky (30.53%)**.\n* **`stalk-surface-above-ring`** - Most frequent stalk surface above ring (over 90%) are either **smooth (63.71%)** or **silky (29.2%)**.\n* **`stalk-surface-below-ring`** -  Most frequent stalk surface below ring (almost 90%) are either **smooth (60.76%)** or **silky (28.36%)** next to no difference from `stalk-surface-above-ring`.\n* **`stalk-color-above-ring`** - Over half of the mushrooms in our dataset have a **white (54.95%)** stalk color, we also have 8 other colors that appear less often.\n* **`stalk-color-below-ring`** -  Over half of the mushrooms in our dataset have a **white (53.96%)** stalk color, we also have 8 other colors that appear less often, next to no difference from `stalk-color-above-ring`.\n* **`veil-type`** - All veil type of the mushroom's are partial so this column is pretty much **usless** in our analysis.\n* **`veil-color`** - Almost all of the mushroom's veil color are **white (97.54%)** so this column is pretty much **usless** in our analysis.\n* **`ring-number`** - Almost all of the mushroom's ring number amount are **one (92.17%)** so this column is pretty much **usless** in our analysis.\n* **`ring-type`** - Over 98% of the mushrooms in our dataset have a **pendant (48.84%)**,**evanescent (34.17%)** or a **large (15.95%)** ring type.\n* **`spore-print-color`** -  most frequent colors are **white (29.39%)**,**brown (24.22%)** ,**black (23.04%)**  and **chocolate (20.09%)**, the other colors are insignificant.\n* **`population`** -  Most frequent populations (over 70%) are either **several (49.73%)**  or **solitary (21.07%)**.\n* **`habitat`** -  Most frequent habitats (over 65%) are either **woods (38.75%)**  or **grasses (26.44%)**.\n\n\n\n\n\n\n","4adc3d55":"## Missing values \ud83d\udeab\n\n**We have no missing values! let's confirm it:**","c1d9c944":"# Machine learning models\n\n![](https:\/\/thumbs.gfycat.com\/AshamedWeightyDachshund-small.gif)\n\nIn the previuos seciton we have made `X` as the features and `y` as `class` - the target value we want to predict.\n\n**Assumptions:**\n\n* This is a classification problem so we will use classification methods.\n\n* Train test split will be a 75:25 ratio respectively.\n\n## Models we will use:\n\n* **Logistic Regression** \n* **Decision Tree Classifier** \n* **Random Forest Regressor** \n* **XGBoost Classifier**\n* **Support Vector Machines** \n\n## The Process of Modeling the Data:\n\n1. Importing the model\n\n2. Fitting the model\n\n3. Predicting Item Outlet Sales\n\n4. Classification metrics\n\n### Score Metrics for Classification:\n\n* **Accuracy** - Accuracy is the quintessential classification metric. It is pretty easy to understand. And easily suited for binary as well as a multiclass classification problem.\n    \n![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAY4AAAB\/CAMAAADPY9VGAAABZVBMVEX\/\/\/\/\/wAAAsFCS0FAAAAD\/AABpaWn\/vAD\/\/vzh8dP\/xTP\/+e7\/9OGLzUL\/vQD\/57gAr0ugsn6W0lj5+fn\/wh7X7cTq6urf39\/19fXGxsZVVVV3kj16enqpqamFhYXl5eXa2tpMTEyWlpa8vLyYmJjR0dGkpKRCQkK1tbUsLCwZGRlubm5eXl5tbW0lJSVJSUnzAAA2NjYpKSn\/xgDztwAdHR1XfDDQAAAPDw9ukz6FvkneAADepwD\/3YQ1Sx1HNgA\/WSLHlgB3qUEAeTeIAABeRwAApUtFAAAAEQhqAAAhGQBzVwAAXCoALBQAj0EAaC+jAAAlAAAAQx\/o6trF0LB9qWBipVJKpUzV2sI9oDv\/9NT\/4J3\/0lOTuX\/\/1Gv\/6K+vwpZNmTP\/1Fxxp1n\/13So1WQWHwyjewBehjS4AAAAHg1KaimPbABVAAAaFAAAczQzJgApOhc4AABRAACWAAAgKBFsUgASuNL1AAANDklEQVR4nO2diX+bRhbHx94RUWu3dne8XIUBIS5LWApOnChpm8Np3PRImsbO5aTHbrtt0mvbbrt\/\/84MQkKAJCwhWbLn9\/GHj2AAo\/n6vTfHGwwAFxcXFxcXFxcXFxcXFxcXFxfXLFRdK6zTftTzoPULRbV12o96HrR+YaWg3jztRz0P4jgWShzHaWjt8NnRYV4BxzFvocOjx0+ePt98J69w\/c2trZWVt9\/mOOakZ4+fH2yurq7m46iuHR8fb7x4uXJhHBGOowQdPmYshuKIVT3+4OXKSCIcx\/Q6et6FMQ4H0drGy1EmwnFMK\/nLHowCOIjWv+I4Zqa1JI1COAD4+tIwA+E4phP6NkmjIA5Q\/Y7jmIm+GaBRFAeofpDfFeE4plKKRmEcALzgOErX4fPVSXGAF3nxg+OYRu9sTo4DfJXDg+OYQodPV6fAsbbFcZSqx2njOBEOsMFxlKnqP9M0Toaj+pLjKFFHByNwoJox9gZfcxwlKhPIkzhkKI29QTZ6cBwTay0bOpLOCo63DvCvdOOK45hYh08yNHo4XE2DO5o17haZvgfHMbGyzdweDqRbFsS2i8bc4jg9VMJxTKxMl3wwlBdxVplJdI5jYo3GUSSUcxwlagyOdgHr4M6qPI2IHUXFQ3l5Wvt2ZEO3iHhDtzxVv5wWB+8Glqn03NOJcWSnoJYAh4EtKmzI2MKWmS42o2JLFC2f7Mp25oxZKSeWn4MhRLPZDKDaFAwRNrEA9e5hsdvHcnaaKgx2NNGEUCGHG\/7cnmzKEd2N7PzTEuAgEqHJtqQpj1tydKzm9IpNKNJtx6uRk1rzw5H1VifBsb60008SpHXPoOgtMTrWUnrFDusBm9CB\/lxxHGbaVifAUc00q5YOB6n1wOse2+5bR4xDxJ48TxzgaAocS5y6EOMIPRh1di3yaTvc7hb3cKCGLe7OEQdIm0dhHNUPchMRlwuHrihR5HAUZc9W6nE0j3EAHZrb88Tx7OmEOPJpLBmO5KjcdjZ2iADVAm+eOMCz55PgWM+LG8uHw0wc28vDAeoQzhVHqnVVDMeLreVOmc7Dgfs7DjObqLkrwPpcHw0cPT3ZgoK1jTeHLxVcDhzIkXvbHMkO6m3FYSfNTM+ebBbHUX2R7YoXxoEUZdz8IhdY+7K3\/Gkkjurxxlej16KNwWFA6Iw8gYuq+uzb7uLAYTjWjzdefPdya+zi2dE4XLVlz+Dxz6CO3nnyfHNzCA72TpIi65jH4Kjp9i5zyJoakIaMoqpYFJvEYJRABopVr7nkkypQby01VcHUMaJjegWmJc+cqmuH3zx+fG0IjgIkxuNQdiWRjpLKUPBtDenQ9Zt1o1Wn7UkZ+DC0fWfb9oO2TNya5lsWa+JoAb3Who1Go6PO4pvPTK0OfebyG8olvbHHEgDY0YjPCkkTUgYtlsYlbfdwECuQ5ajZj1ViF0gOMWAAiUFJVMtlJ+yRpfJbZtX1whpxFxRqiqK1JIDZ3zuK6rmPI6S7fhM2dg0QYHaJG5Ii3hibiRQYep5HerkRDhB1sAZx6FAXlY4BBI2dYracIPrkerVarS2M\/AWOcJrCmeepUbVHdSPluT2dm\/ndO032jAHQ94jTMcBuk\/ojFJIzcYxDIxVeJzhwSGycuDR1pzvwLfl1IiVz00VWnWlBHay4x4KaQsKz12q2m6jeqO3s1gHuCGpIcOgtQM0kUEOCQ9wNmx6m+23uq2YiQ2fzbrJrAuS7OvmjkVyXjmnX3broImBGtFxd0qll6C49X4RZK+M6NTlQPO1H4OqrNjp4c81XMo8cXFxcb\/x9nP69NU4r1dP+FmdGb7z1t3EaO4h7geMoSwVwjB3B5ThKUwEcl6g4jrloFI7r167cuvH99zfv\/vzD+5dHEFlEHFhjcoHOtmlFpZoPXI2Offt2pi1t0\/I6qJOtlW1o08OaDSSNjiKIiQSUKTUUx\/VXt76Hfd389PbKMCCLiMPG2m6ISW0JnmuFXrdbL8dDeRbW9jxMqluFdDYL1+Ial+IPNQ9jrACr4dq1RpwaJ8bDAxYkpS5Q2HoDCZY2qjkEx\/4tmNUPl\/OBLCIOomi0m47SG3Hamq71i1U2Yx\/UOqQu2UQXUxinVdSi1xtYNQKxEb\/qAMd2ZkVJ1soeXW8gNWaM48q9HBrERG7n8lhMHCiaLqFbFK+ncfvDLbLK6li1cRslcPRqNsbRJptWPI3RjLnEOKAJ67PGsd+t\/XuPPr\/z4ODK1dcPP\/yoe+hunoEsPI56nGqYg8OiptPHsRdbh6rali0y63B6OaFanANj79mW5RAcSGvLxkxxvIpM48c7D1iaz7WLlUrl4tUPh\/NYaBxN2ILRWjIHtjrkp2soPRzA7qAuDtzYhY1Wg5WrJLRoJgkS5KLIRemdFuy0OoyX3cG0IUBwIGjPFMdPrNrv34lzEhkOSqQL5P0Mj5PhQCh3RFAUCk3vKzaw8tIykJYehO\/i2BFMJwrgsmNiNd5J4JC33S4OyTEbuhnZR+yswt4VhmMGmumw39NzVgi40NybHY6Ixuf9l47FOCqVq8xlfZLhcRIcbkfTsllvighkXAiHvwP07peXzMRx1BqCQ0hE71xnRe4Jm1lnlQjlffUePYFD9oJwZjhesaBxJ5FA3cdRqXzMeFyeBgebK0eAmkg0cC7LAKndRS4yy2Luj6hHHxDL74n2fXY927VplwGxU4jFbRfBYQe9jwkcSG0E8W+EeaG8p2woR2y9waxw7HdohT9ILi9I4qj8SYs\/vTwtDqGm6bKGSV0gLGDL3RZsE4oyFrRABqqGPfq1nW2seQ7QPM1FbtAUELCEZqCBwAK+igWFeHfJUbXQAIqqaV4GR5R+EjQTx5S+n5M91lxiWwX2cNhxzyQqBjhM3tOP692K1qwxHKTvUlrS8SCO67Tnd2+AxiCOCgsgP1+aHIcgEhNoEheARIA6hkLXCYNAAUZHdjXaP6PpVfIuqVyTOA4\/ANhDQCJ\/jEHdDGl3GjRttG2Qi3RSYaoCiL0QaEqYmcA1xP42R8ninJO6h8T8HJDuYdlkW6m0+bFBHFdoZd9ZHYHjIvNXlyfGoYcY+6RGyUfHdVuGxf4IGQ5xx6cpu6TeiQsn\/WBa+06IMDnDb7t62\/UFmhEHmq7DOtEuBmJo67gtEgPJOqul1ACO67SqP1sdhaNSYe5qSmdFcTihZBAckUdhODTSBq2ncHiA4RAkyUD1oIvD9GgkoTg8R5JE+YzioK2q++kXub47SKPykLV2J8axQ7c7BIdeAw5xVsQJ+7LgAwPKxDMBwQUqwUFHicy9OvVdFIdEXJFjmA0E2hq5GJHGvyKSRhZQfSArIPSjlN\/lVxIHixwpV5XFcfEXah6XJsThM+eEiR3ImmAJBnADwoJEZKktk4ZPQDhpJF7S9\/eaoR2Q1q9FHZsSCBYiETwg15OLyS4JMIFgipogiMAMgrpw5nBco8aRppHBUXlNTvt1Dr1yJxx\/zllTEgf1Vf8Zj4NFj+Rg4oxwmOcwvSqB43on08jNx\/Fxqq27mGNWS6kEjv1cX5WD4yobSuQ4ZqAEjlc5rdxcHO\/9AeFvHMcslMBB+4CfF8Fx8SMIO+9zHDNQAsetvGZuHo7KL4M9j7Jx1Of8yokFUgLHjfTg4VAcH88Oh0yXyWaXdJ0XLRoOpwZYP\/ycaiJnNQUOIxBUOgMdNBFQNdWVdnEgiUHgmazIUfeCOrboNFEy6+PcKIHjp5OE8klxNF1giDqpbc0Fqkf6eg2dffYFIOjAkM2AWgcdYBfm+w6pxVCqZVW4ofvJZDhEj2aQCdFIukpImLsyOegreiixIkdF1FkFrhGex0U2qW7goyI4aDfw5mT9jiyOFsHR9hXFMZI4\/LYSjLvXWVRykIRm82T\/T1oWx8PUjMdJnBVBIBp00oM6qy4OhscENR8YhtlmOESvvHSAZVJyCPFGbizP4viCJohOOGZleoIqIS1QNQTaLn2Ns0zjexAowCFFBlBrddqywpm573OhJI5Xud4qg+Nienp2Fr3y8f8B7EwqiWP\/Xl7PI4ODNnPvTjr9VFBGuKCvjZixBiZnf88zjzSOq+npDj5mVZ4GcOznJJJkcPyRGl7nOErUYGIP7ZjfOxiJ42HGODiO8jSIg5lHKpdkEMdrmI4cHEeJSiWFsry3R8NxvEfLfxtI6+E4SlQ6ZZolsD86GILjde6SAo6jNGUWFPwOU53zBA4WNwZ6gBxHucrguM54wM8OMjiu\/jeisZIWx1Gachaj3YjWosUrbiIcF99judKwk7ENjqNE5S3VvNJdl\/nozoOD1c13CYrXf\/4RHcoufeI4ylTuQuZrv3eB3Pvx\/v2\/Pvrii+4u\/DSPBsdRnoYs83+Vt7D8bv6yco6jPA19CcaVG4NEfvvf0LdgcBylacQrYvav3fgrQvHrzZ9vj3hHDMdRmt54a6zYP4pYeXu4OI7StPaPsdoYq9P+ElxcXFxcXFxc50b\/B5H5sw\/x156CAAAAAElFTkSuQmCC)\n\n**key**:\n\n    TP - True Positive\n    TN - True Negitive\n    TP - True Positive\n    TN - True Negitive\n    \n* **Precision** - Answers the following question: what proportion of **predicted Positives** is truly Positive?\n\n    Precision = (TP)\/(TP+FP)\n    \n* **Recall** - Answers the following question: what proportion of **actual Positives** is correctly classified?\n\n    Recall = (TP)\/(TP+FN)\n\n* **f1 score** - A number between 0 and 1, the harmonic mean of precision and recall.\n\n![](https:\/\/miro.medium.com\/max\/564\/0*-lZUM_HsT3RsgePy.png)","81199dcb":"### Csv results of the test for our model:\n<img src=\"https:\/\/cdn.dribbble.com\/users\/134487\/screenshots\/5947007\/quickgif_2_excel_todribble.gif\" alt=\"excel\" width=\"300\" height=\"200\">\n\nFor an example a sample of the models prediction was created, You can see each predition and true value side by side by the csv created in the output directory.\nyou can try to calculate through excel the metrics that have been used in this notebook to enhance your understanding!\n","e59583a1":"<h2 style='text-align:center;font-family:Comic Sans MS;font-size:40px;background-color:green;border:20px;color:white'>\ud83c\udf44 Mushroom Classification \ud83c\udf44<h2>\n\n<img src=\"https:\/\/i.pinimg.com\/originals\/d6\/31\/2e\/d6312e0b5d93b6bd52a299b78890e101.gif\" alt=\"mushroom\" width=\"300\" height=\"200\">\n\n<h2 style='text-align:center;font-size:20px;font-family:Comic Sans MS;background-color:green;border:20px;color:white'> Table of Contents<h2>\n    \n# Introduction\n\n## Problem Statement\n\nThis dataset includes descriptions of hypothetical samples corresponding to 23 species of gilled mushrooms in the Agaricus and Lepiota Family Mushroom drawn from The Audubon Society Field Guide to North American Mushrooms (1981). Each species is identified as definitely edible, definitely poisonous, or of unknown edibility and not recommended. This latter class was combined with the poisonous one. The Guide clearly states that there is no simple rule for determining the edibility of a mushroom; no rule like \"leaflets three, let it be'' for Poisonous Oak and Ivy.\n\n## Breakdown of the Problem Statement:\n    \n* Supervised machine learning problem.\n* classification.\n* The target value will be `class`.\n\n## Aim of the Notebook:\n\nThe objective is to create a model that can predict edibility of the Mushroom based on its features.\n\n# Data Id \ud83d\udc68\u200d\ud83d\udcbb\n    \n## columns:\n\nThis dataset is named [Mushroom Classification](https:\/\/www.kaggle.com\/uciml\/mushroom-classification). The dataset contains a set of **8,125 records** under **23 attributes**:\n    \n| Column Name                | Description                                                 | Values              |    \n|----------------------------|-------------------------------------------------------------|----------------------\n| `class`                    | Edible or poisonous                                         | `e` = Edible, `p` = poisonous                    |\n| `cap-shape`                | The shape of the expanded, upper part of the mushroom       | `b`= bell, `c` = conical, `x` = convex, `f` = flat, `k` = knobbed, `s` = sunken |\n| `cap-surface`              | The structure of the upper part of the mushroom             | `f` = fibrous, `g` = grooves, `y` = scaly, `s` = smooth |\n| `cap-color`                | The color of the surface of the upper part of the mushroom  | `n` = brown, `b` = buff, `c` = cinnamon, `g` = gray, `r` = green, `p` = pink, `u` = purple, `e` = red, `w` = white, `y` = yellow |\n| `bruises`                  | Indicates of there are bruises on the mushroom              | `t` = yes, `f` = no |\n| `odor`                     | The smell the mushroom omits                                | `a` = almond, `l` = anise, `c` = creosote, `y` = fishy, `f`=foul, `m` = musty, `n` = none, `p` = pungent, `s` = spicy |\n| `gill-attachment`          | The way the gill is growing on the mushroom                 | `a`= attached, `d` = descending,`f` = free, `n` = notched |\n| `gill-spacing`             | The gap of space between each gill                          | `c` = close,`w` = crowded, `d` = distant |\n| `gill-size`                | The size of the gills                                       | `b` = broad, `n` = narrow |\n| `gill-color`               | The color of the gills                                      | `k` = black, `n` = brown, `b` = buff, `h` = chocolate, `g` = gray, `r` = green, `o` = orange, `p` = pink, `u` = purple, `e` = red, `w` = white , `y` = yellow |\n| `stalk-shape`              | The Stalk`s form                                            | `e` = enlarging, `t` = tapering |\n| `stalk-root`               | The root of the mushroom                                    | `b` = bulbous, `c` = club, `u` = cup, `e` = equal, `z` = rhizomorphs, `r` = rooted, `?` = missing |\n| `stalk-surface-above-ring` | The surface of the stalk above the mushrooms ring           | `f` = fibrous, `y` = scaly, `k` = silky, `s` = smooth |\n| `stalk-surface-below-ring`   | The surface of the stalk below the mushrooms ring           | `f` = fibrous, `y` = scaly, `k` = silky, `s` = smooth |\n| `stalk-color-above-ring` | The color of the stalk above the mushrooms ring               | `n` = brown, `b` = buff, `c` = cinnamon, `g` = gray, `o` = orange, `p` = pink, `e` = red, `w` = white, `y` = yellow |\n| `stalk-color-below-ring`   | The color of the stalk below the mushrooms ring             | `n` = brown, `b` = buff, `c` = cinnamon, `g` = gray, `o` = orange, `p` = pink, `e` = red, `w` = white, `y` = yellow |\n| `veil-type`                | The type of the mushroom`s veil                             | `p` = partial, `u` = universal |\n| `veil-color`               | The color of the mushroom`s veil                            | `n` = brown, `o` = orange, `w` = white, `y` = yellow |\n| `ring-number`              | The amount fo rings the mushroom has                        | `n`= none, `o` = one, `t` = two |\n| `ring-type`                | The type of the mushroom`s ring                             | `c` = cobwebby, `e` = evanescent, `f` = flaring, `l` = large ,`n` = none, `p` = pendant, `s` = sheathing, `z` = zone |\n| `spore-print-color`        | The color of the  mushromm`s spore                          | `k` = black, `n` = brown, `b` = buff, `h` = chocolate, `r` = green, `o` = orange, `u` = purple, `w` = white , `y` = yellow  |\n| `population`               | The populaotion spread                                      | `a` = abundant, `c` = clustered, `n` = numerous, `s` = scattered, `v` = several, `y` = solitary |\n| `habitat`                | The mushroom`s environment                                    | `g` = grasses, `l` = leaves, `m` = meadows, `p` = paths, `u` = urban, `w` = waste, `d` =  woods |\n\n<h2 style='text-align:center;font-size:20px;font-family:Comic Sans MS;background-color:white;border:20px;color:white'> <h2>\n\n## Definition\n\nA mushroom or toadstool is the fleshy, spore-bearing fruiting body of a fungus, typically produced above ground, on soil, or on its food source (from [wikipedia](https:\/\/en.wikipedia.org\/wiki\/Mushroom)).\n\n\n## Features\n\nFor Better understanding of the columns and their values a picture based explanaition will be given to enhance the notebook readers understanding the anatomy of mushrooms.\n\n\n### Mushroom structure:\n    \n![](https:\/\/datascienceplus.com\/wp-content\/uploads\/2018\/02\/mushroom-glossary.jpg)\n\n\n### Mushroom cap shape:\n\n![](https:\/\/datascienceplus.com\/wp-content\/uploads\/2018\/02\/mushroom-cap-shape.jpg)\n    \n\n### Mushroom cap surface:\n    \n![](https:\/\/datascienceplus.com\/wp-content\/uploads\/2018\/02\/mushroom-cap-surface.jpg)\n\n\n### Mushroom gill attachment:\n    \n![](https:\/\/datascienceplus.com\/wp-content\/uploads\/2018\/02\/mushroom-gill-attachment.jpg)\n    \n\n### Mushroom gill spacing:\n    \n![](https:\/\/datascienceplus.com\/wp-content\/uploads\/2018\/02\/mushroom-gill-spacing.jpg)\n    \n\n### Mushroom gill tissue arrangement:\n\n![](https:\/\/datascienceplus.com\/wp-content\/uploads\/2018\/02\/mushroom-gill-tissue-arrangement.jpg)\n    \n\n### Mushroom stalk type:\n\n![](https:\/\/datascienceplus.com\/wp-content\/uploads\/2018\/02\/mushroom-stalk.jpg)    \n\n\n### Mushroom ring type:\n\n![](https:\/\/datascienceplus.com\/wp-content\/uploads\/2018\/02\/mushroom-ring-type.jpg)\n    \n# Libraries \ud83d\udcda","b0e83e7e":"![](https:\/\/i.imgur.com\/a2Q82U5.gif)\n<h2 style='text-align:center;font-size:60px;font-family:Comic Sans MS;background-color:green;border:20px;color:white'>\ud83c\udf44 The End  \ud83c\udf44<h2>","d23ebb2c":"### Multivariate plots","3f9be1e2":"### Csv results of the test for our model:\n<img src=\"https:\/\/cdn.dribbble.com\/users\/134487\/screenshots\/5947007\/quickgif_2_excel_todribble.gif\" alt=\"excel\" width=\"300\" height=\"200\">\n\nFor an example a sample of the models prediction was created, You can see each predition and true value side by side by the csv created in the output directory.\nyou can try to calculate through excel the metrics that have been used in this notebook to enhance your understanding!\n","38cf6df8":"### cross validation\n\nFor improving the valdition of our score methods we nee to use the cross validation method:\n![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAQ4AAAC7CAMAAACjH4DlAAABU1BMVEX\/\/\/+Z\/8zu7u6Dyv\/\/zJn\/\/P+Y\/8yEzP+\/yNfx8fCd\/9F217xy0bqb\/8\/I0+Tc4uzh4+fy8vm0ztmyy9qO0ciczs6a0cyI0cSA3cKUzctiquUAAADz+P7ZspPIq5uGz\/\/W2OnL2OV2zL+O98eA5cF7seKVuuGyx+FtsuvIyMhQhmuh\/9eE3LDn5+fPz89LfWRdm3xFc1x1w5y1tbWO7b6np6daWlpxvJbY2NiHh4dnZ2c4XktVjXGxsbHjupV7zaSNjY1uqtd2dnZorYpil7+bm5tRUVFOeJdFaoZmncZbjLF9fX1vb28+Z1KN2f8rSDoyTWFBQUE9XnfLo3pLc5IbGxsgNSszVEP\/1qBkUDyefl+0kGzXrIHvv4+er8qUv8pMmtkYJS8WJR0rKyt2vL0sRFdar7Q4ODgjNkR\/t8O+oI+vnJg2KyClhGOMcFR9ZEtYRjX88KyAAAAU40lEQVR4nO2d\/WPaRprHB0iijG4Vx8lmu01yq00pTQckIZAEAqMTIMS7HZs4TWI7zd6muba319z9\/z\/dM3oBJNuDW4NsJ\/q2vEhMZqQPz8wzMzwzRug8Pb\/75enHc2mgu\/jL0z0WjuyXJnz3euHAV\/sVXCscMjYVAq\/3zSwOwCR8CdcIB240EXGbWUxqbpNgxcSGRZ8TvYbrgyPbdU1iTAGHgXCNuA3SMAyrZiZ5CdcHB3YbbkPxcLgYN83GxDAUrV1TkryKa4Sjb5o1v7K0Zdftmq5raLUsVJskL+La4JAJxgpRtCy+77oaNl3FkA3FVbQvEwd1IrQjlPVe\/Lc4OJHcNVwfHNdBbBxfnhid9B+vejx1BWIM4VKlSpUqVapUm9TtG6DkaLz\/txugu2j7H4\/Xp3+cj+NR5vrrzj20\/T23Pn3PwHHnqm92tTwcubUpGRzC\/Cl66vJi4eAucCY5HDqI3rWQyVeFjCDYuiCEHOBIEIJ3m8LB5QqFQo4DBBzH+Sc69B0XHieKQ6g6LxxJ1\/N2JgMvkiDldUkX4AGfSXqF1yXebvGSdCkeLOsojP9z3Cl0RK5TyM1yObFTOBQ7HXE8hnfn8NigdQiZcskp54v2TqasttRqS\/rBfp3Zsf\/JC1KlXtFbDpyznZZ9GR7MtkPc3xsNeuPBeNzZz4m9wWDQGQ9GcNjbP4fHJtuOPOCwedV5kSmqku6oUrlU1p1SmRccqVTOt9Si5EitorNJHIPDwTA3G+RmojjM5Q4Lh0NgMxrsd64ARwVw6BX9n3pZlSSnJVVKFTj8gRdsFeyjalcktaKr6uZwfNwbjwudUWHQA+sY93qDYQFsBQ5mo+RxZGxoI4RqVZJsSc9Lkm7zNg8Q+IxQt+2MI9Xzju7o9csUwcTBjTixN87lxj2xV+C48aiTGxd68IDnK8AheI7Fk+dCqH+ptFTeOxk+Luda2P0O6lVELidynoulDkX0HuJ5riXxbhjP8+vMLslu2Dqve0NacyddZOB4\/6frrwSHcKlSpUqVKlWqVKlSpUqVKlWqVKlSpUqVKlWqVKn+mLbuMQUp2Am2ENpmp3iK0DNmgmcIPWVnsZ0YDuZqJ\/xsG22zU9yFLJhri2S42+ersnh2\/48uT0oax9N7q+7l3uVx3GPjACO1skniwMHybxyskMdxHBgvFojj7Hwd\/RIOHJ4Ks8BxHPFC\/FKWcJwuBIc43CducjhMTbNo4aaGMTFxFpMYDkw0jdCrNWR4QIJgrecChwxZwGdYNiAbguHYXyu8wBEvhC4jjeCYF+L6hUCWXh7+4rVaOykc2GorBBNDJq5stOGK3AM5hqOvEDNraGgqE20Kt9PQungZByZdhWQVwzQn2DAsjKdK01taP8eBLZcsCoH7xJNpDEdYSDOr0UK0tmJm5zjQByUpHJprmkrXrCnu1JzCd4a6cRw1U5G7xNW6kKwPt4KIG8WhNEzFbMo1s9EgbQuycJvRyoItYKVMzKZiNM2pAnerTWI4vEKUsBBsNadkYR1IfpUYjollaRqqEXeKLB8HjuGwDGWKlPZEsxB8qWBP0cqClaZlEBd1lfYUEcAhZ9skZh1QiKWhPjGmyCBYPiA1OYbDL8TtwrVQy8HoYAkH6m\/ePILKAtXZrMG3AlfSh8pC+pYcqywI44Y1UaZKTTugCQiJVRYX2o0aaZqTtjGFytLXmkoUh0ELaWpgY1Otr2CZkH4MR1hI0y\/EahiNZRzaJBkcWRmuizaAspklpgz3RkgMB20HaAMI\/9EKbRKiRHBk4Z9m4RbhI0yzyGaJGWtKY4VAq2rGKkukENpek7lnocIfEsKRDV3k3EniaNsx\/wwHn4UpYv0Oej\/ZhT\/Nnup3RD475WhPFZJdxoGeJIrjlBLrhq3olSaH4\/l9lu4CjrvsFECUmeA+4PiRmeA5EN1aVUhCOLa3mIIU7AQwunrKTnF7VRZbK7N4mhiOG6UUR0QpjohSHBGlOCJKcUSU4ogogW5YgaXH0A376SuW3iP0kJngK+hW\/Loqi2fsLJLrlX7HXp6dRdt\/Za41+QtCD5grhO78HaFvmFl8BTjyK9azJIfjjMVUc63EcefRjcaBsXwWDk4UxWUanBjHwfO8t55NDx7B4QKHEK74gk\/zee84hiNMkacp\/BMxHLFChLCQtePQJhPDe9UUpCGUrZFlHNxofzjLAZLOQBTHHY4b\/RLDwe8Wy3W4Wn43z5cqfEbfrXgrhec4BOl1saxDAr1c4qW6IKjFShSHUIU86B3baqnkSAKcKPMRHLFCBGmnWBU2gqOJkUxqE4uQptYHHFoUR2+0t5fbHw464\/GQrsYtDE\/hKJVK9fJuvqzvqDuAQ+crfBSHUyoJlVZLb1UrlaogSHxRj+Ko26VSZrfoSI5T3AEcerkYxxEWkqeFCHW1uiHrQG7XUizUBxwyNZMYjtHH4XDU29vvjGd7YB05cRbHsVMs25WSpBardWodQqaiZ6I4XhSL8L2XpVa5ZNeFTEmt5GPWsVNsVaulHcmpUOsQypk4jtd+IU7ZK0SQvPW4m8ABCA4UA9UIqZ2FozeCijKmOPb3BoBjb+a3IUs4SnxpN2M7ZVvlwTrylQyfiVsHr7dKu3qrnKlDZWmVHN\/S\/76wDqgoDsWxW2pJgl5p\/aALERxeIYJdL9sOFEK3e3i9GRxkMlGUbsM0TRd1sXe4jKNDLWIw7BR6neGgwImD2SxqHYIKdV0vtngn01JVQbDL\/rL6RVOq0w0rnGI17+hl1RagYWjF2g4bKgivFiX40ssq2BYvOFHr8AqRoBDVKySjQ2u0mbbDQ6KdcTLwLPRZFL1VpiJH34oxzyL4rgFePf8gnPIsQQq6qNr77AzPIvgeSRDCz4SYZ1kuRFhyXxvBgfG5OM7T597vOAMHs1e6TXHcYcjrlTIU4GCl8HGwMklurvT5d0w9RbffP2LpAdwLM8EjGLOws4AxyxY7i2eJ4bhRSnFElOKIKMUR0eZxPHvA0sPb0NgyBT5wi5nFg22EHrILQWibncVWYjgesRzcnW+3Ef6e1TPhvlvhaO94jpaZwHO0zBTJOVr2ZjceDlY\/zcdxg7thsa7po3DuZr4b3mKXvGUcotd5z+W8Lrx3HMcRZJERwmyEGI5ThZzupAcp+PAhbKiTDmM2b8SiwVAWBrNmd4qXcAiSqqp0wCE5PF+lO+I5MRzceDCAUa8oHgKIQ5Eex3DokIUOWegqz0tVAV7rQgTHqUIE3U+xGMI5qlqFBHwrz5daPM3S3tD0DyBQphONkAmd\/iHz8ZyPo17P5HmnJUmq3ipKglDfyUdxiPv0+XAgznLj8UzkOuPcTFzGATebyQv1lq0X860WnQ3LnJr+CQtx9FaZjm4r8dmwnUw+o7fUUiWjOhVeqNY3VVlwY0rI0vRPdoqWcVRb9bqtelMRfAuutFQ+haPXK8xyo\/GwM+D2wTr2xt4mZUs4KtW6VPTmO\/IOnf5p7cSso96qV+lsSVAI70jx6Z8dyKKSqdbLtirQ2bBKpb4Z69Dm0z8eDrMRfhDgUCUpnKiqezj8er2Eo9DJzfYKAzppBnYhDnpiLooDvnbJWcyGSSXHjk3\/OItCHEnQXziv9RgOScrTKTd\/NiyTKZVeRKZ\/Xp01Jv9DOCYTokwbiqI06Lxpu9FQlnHU67yQ31FVWr1fQ2VxfmjpURwfRU4cH84Ks8LHAbzv\/TIYx6xDhWZwVy3qRacIXypfUXfilaUKhexCIU6LFpLR9d1o28G\/hnbDaVX0Xf21Cu\/tSjDHFOJorjOS8szpn2VHm6dNvndh+Uyssvhehb4ueiFc7pSjFRZZwHO0spwqJFTU0Xr\/LvRR+ahnsRpn3MEfFT4r6P939Tu4xTMXbB6baL9j8\/0w5iZ7gt8rZeliOJg7MP4OHO46zeMssfdJ\/wZwsLe3AxwPmVn8CXD8FzPFT4DjTyv2SQ\/1IfwFALnttmIF7xvyUqNitBuxXxoDmRfhsYb961dncbkES1eBX7mBd4GeFLKyboOgtjGRFQsMR2m4We+DA\/AVWGnLGnzqNrS2Bs+y1sftNvKWS1zorm6Esk+e+AZSswx5er+LpoqGpqbVRIZcQ12wi5pmTLBJXE1DBB+gGvoAHsnFfdkwFHNiEVRbl7u+eslPwtrSzMpoet9FE0LQxNS6yDK7yAUcTVlGmmEZmgIYDlAXgExJQyOy4RqaaZgoa1zpLaxTT+YNQA0eTbMNdaPfbnrWYbbbNdn\/QGu4NQPswOgrU9SHU822gQ9ox8tQ8DSRZWRJqMv8YglqXHYB4e1tpiAFO8HTlSnWk4UnzO53yC5hfn4Bvf8rS+Bot79hpniP0PPvWXq8BY6WmYXnaJkpQkdrbNzM2Xsdf7t9gdiw58zpstzW+rphtQt1HS6FY1UnffVvtGfgWJ5e3Vrj5OC6XCR2Xa+rRmCUL9PDsE16FAnsys8Du+I4GLFhPo6l8DKPRzibuMARL+QKY8OaQEA2GjIhGp0NM7BFlnAI9o4ftiWppVLdFgT7h3wUBys2zMPBdT764WWFIY2c4cTBMAiZ2bqGsWEEnC1pL6J\/rJ\/RMg4vbGunqC7Ctk7h8MO29DNiwwIc4709bnY4zB2OZrMex3XEYSFiHdcpNgwj6IVo88lBEynGMg4vbKs+n6jK8KdwMGLDAhy\/DIedwd6sczgTOz2oLONZtO24eGyYuvHYsEnbnShN1yWkj\/t0oNw0l3HUq6V52JYanRxcHRs2tw6oKHv7hcMZN+5x4uHeeMTFrCMaG1a+utgwKmKdcTJoO2w\/bEv3wrYEQS2X9QgOVmyY35QWPIsYjnLjwmxAQ1Nnh9GmdB4bpq+MDfMLyeQ3GhtmnjXTGHiW5bCtpcCuhWdhxIY9XzhX0ftTGJ5P4UJHs3VNY8PO1Gb6HctaZ78jARwrfrLe\/paZYlWv1MdxY36yfvaQqdsIsRM8Q2iLHfKwvSoLGtDATpBcQMONUoojohRHRCmOiDaP48HXLP26jW7\/ykxBw2yZCb6GdrDAjuWF1pidRXJhtpftd1xoaeBj5g95hZX9jmsUG7aOEP3HzGi71TjW3w2zLG8mSYGRrDfbHP6avzI2LOykx8K2wsivRxeJDXscWX\/o\/7nUsF+\/jCOx2LCpLLdlzcUaIcT7ISLcg2tlbFgwhKt7YVt8GLYlOGo+ioMVG+bh4AqDwcBbfzgWxVGHhkb4AUSF5GPDtKmFSAM1AYbpIiQb4Z5TK2PDwgG+H7bFVzKOWoGxd12PLw2Mx4YJi9gwH0evl6Nj3kJnXDgcegvu\/PCyQvKxYUCgvzT90yf9yHxHtbiIDVOjsWEhjiBsq+iFbWWEklOPLRyt1M+NDQtwHPZ6nYFIF9yJhx1OHHeGcRxJxYZNDWuqNK02WEcWKoss9yOBlNVo2NZZ0z9B2FYwG8ar1VImiuN0bNh8aWCAY9zp9EZ7H4PlmIVfxh9zMRwrYsPWZx2yjIhFJ9Mx8qbUwyn6lbFhAY4wbKvih23VX6hOzDqWYsN2Y7FhPo7xSORy+\/SvCR8OPtI\/nVvYj7YdK2PDkpr+8XVmbNiSo10K2wp+Gog72nNiwyKOdjnCLIojXsip2LDPsN+x8LBX2e\/YFI7PrFf68M8s\/US3M2GmeLgqiz\/DmKXD3DOFjlnYhSRnHTdKKY6IUhwRpTgiSnFElIBn+WqFZ7nNbvQfIHRvpWf5lZmAbpTFdD2Fz6zfsfJXuHs5Zs\/kM5sNuwCO6ARZrOO6duswGxMv3EfTLKR4q33kZRzzXa4CnR8MlQ8e52+UlQ+zOG+jrHgpCxxBAJX\/4HJcGE8V4JB\/PufufreaCBFzMiGEtGkw1MSMjmjt3TAYiveCoaTX8fmOcjQYKl8+tVHWTrhRFs\/DAF9wyuUojnkhNhTiBUPZLT6CQ5wNhz26HHMfwND1h\/tDP0QkwGG114VDnkxNYsynfyytG138ZdNdrmicUr24CwN86cxgKLu8mynnd2kwlKTzu2dslFVuqXrL9jbKsktnbpRVKdbDYKj8IhgqwLG\/tyeOZrPcLLc\/2BfpBIm4bB0\/n70w4w9IoUsDrcXSQGS6yzguGAzF0+kfxwuGEip6zDpeFIuSWqpIrTLvb5S1G7OOWCH8UjBUgOPjcDaaiZ3xcDTe81an9rz5sgCHcrAuGsiYTCyl2SBE6dIFDFpsWfEiGKrCCIaqCDQYisYpZTKV\/DkbZQEOgW6UpTI3yoJC9N1FMNTcOqCiiKPxbDSGV65DVyQucDxZm3F4On9poBcMJbSKtlS3y3TqWN2NB0PR2XOpWBTUfFlt8UK1UozPhoFFCGqxnnekcguan3q5GG875oVUaSEZXlBj1kGXb3eGQ26Qmw3gfWE268zbDvzhrMu\/hLJn0b1oMBQfOAv+vI2ywiwuuFFWdA1+6Fn8X2M4Mdipa8mzNJ9cOvz+IrqW\/Y647nmNXzI4GApwrAiGWsNGWexeae55MixAD\/7C0tcwZnnPTEF\/wWdnQTfKYqagG2Wxf+J\/tvo+Un3B+nwWN65ByofN\/92emyO85g7YDZdZQ+jpOnXVN3Q5AY6t\/\/739elfV31DlxPF8R+31qe\/XfUNXU4pjohSHBHJDBzvTk5O3kXOvLwpOExC7mthhwpHR6hkvnoeZ+NjV9Jk4Dj+n+OTE0Dw8uTdW+BycvLpzcnJm99+gxPXHAf9g6ImNjUZmRqW6b41GhwiExGCXJO+kTWc7dMNJxRkKgEVt\/kqy6gsb96+eXn08ujo+Pjk7a1bx7\/9dnRyfPTyt+Pjl2\/fnfNPrgmOJpbRxDwA23flZrZN9+CYyE3UNIlBXLOJpsjN9uHQmJhts6k0\/Gg+rf3KZOM4+nT06d3\/wv9vbn26devo5NMnYPPy6O155nFdcFgG3GcDddHEqOE2QgduW26brtlua645hfMN6wBNZKOLTHho4Yp7ZlP65v\/eHP92cnL87ugYrAOs4ujTyRHwePvu7XmtyDXBQeN7J+YETeWGckArCxgCkp\/ghtJuu2bNfIWm5gdcI0aDNMBqrHDK5z7Ts9B24xiqycs3L6F2QENy6\/jdS3jQ52uNg37bMlSY+8iUQXBEZG+ei2BTRlkF2hT6t11pkCO8Rdmw1U0dbUQpjohSHBEBju1\/\/W19uuFbIdEBfqqFniT0s8INkdxcb6DL\/wOOCVcJqhePHwAAAABJRU5ErkJggg==)\n\nWe use the method for each metric and build a classification report that will be used to rank and determine the model's final rank.","e9c8eeff":"### Unvariate plots","bacb5e08":"## Decision Tree\n\n![](https:\/\/miro.medium.com\/max\/400\/0*r8DWyN5pX4DRU89g.gif)\n\nA decision tree is a flowchart-like structure in which each internal node represents a \"test\" on an attribute (e.g. whether a coin flip comes up heads or tails), each branch represents the outcome of the test, and each leaf node represents a class label ([wikipedia](https:\/\/en.wikipedia.org\/wiki\/Decision_tree)).","775d3363":"## XGBoost\n\n![](https:\/\/lstmemery.github.io\/images\/gradient_descent.gif)\n\nThe Gradient Boosting Machine is a powerful ensemble machine learning algorithm that uses decision trees.\nBoosting is a general ensemble technique that involves sequentially adding models to the ensemble where subsequent models correct the performance of prior models. AdaBoost was the first algorithm to deliver on the promise of boosting.([machinelearningmastery](https:\/\/machinelearningmastery.com\/gradient-boosting-machine-ensemble-in-python\/)).","5239883b":"### Csv results of the test for our model:\n<img src=\"https:\/\/cdn.dribbble.com\/users\/134487\/screenshots\/5947007\/quickgif_2_excel_todribble.gif\" alt=\"excel\" width=\"300\" height=\"200\">\n\nFor an example a sample of the models prediction was created, You can see each predition and true value side by side by the csv created in the output directory.\nyou can try to calculate through excel the metrics that have been used in this notebook to enhance your understanding!\n","95381a0b":"### Csv results of the test for our model:\n<img src=\"https:\/\/cdn.dribbble.com\/users\/134487\/screenshots\/5947007\/quickgif_2_excel_todribble.gif\" alt=\"excel\" width=\"300\" height=\"200\">\n\nFor an example a sample of the models prediction was created, You can see each predition and true value side by side by the csv created in the output directory.\nyou can try to calculate through excel the metrics that have been used in this notebook to enhance your understanding!\n","fccc44d2":"## ranking:\n\n**accuracy** - 1. XGBoost 2. Logistic Regression 3. Random Forest 4. Decision Tree 5. Support Vector Machines\n\n**precision** - 1. XGBoost 2. Logistic Regression 3. Random Forest 4. Decision Tree 5. Support Vector Machines\n\n**recall** - 1. Logistic Regression 2. Random Forest 3. Decision Tree 4. XGBoost\t 5. Support Vector Machines\n\n**f1** - 1. XGBoost 2. Logistic Regression 3. Random Forest 4. Decision Tree 5. Support Vector Machines\n\n### final ranking:\n\n1. XGBoost \n2. Logistic Regression \n3. Random Forest \n4. Decision Tree \n5. Support Vector Machines\n\nonly on the recall score XGBoost gave a bad performance so the ideal ML models are either **XGBoost** or **Logistic Regression** ","72aec51a":"## Logistic Regression\n\n![](https:\/\/predictiveprogrammer.com\/wp-content\/uploads\/2018\/11\/logistic_regression.gif)\n\nLogistic regression is a statistical model that in its basic form uses a logistic function to model a binary dependent variable, although many more complex extensions exist. In regression analysis, logistic regression (or logit regression) is estimating the parameters of a logistic model ([wikipedia](https:\/\/en.wikipedia.org\/wiki\/Logistic_regression)).","b8b46fbf":"## Support Vector Machines\n\n![](https:\/\/miro.medium.com\/max\/1290\/1*qYg3y4_Qaj00U7sMU_XlaQ.gif)\n\nIn machine learning, support-vector machines (SVMs, also support-vector networks) are supervised learning models with associated learning algorithms that analyze data used for classification and regression analysis ([wikipedia](https:\/\/en.wikipedia.org\/wiki\/Support_vector_machine)).","16a1d1a3":"**Multivariate Analisys:**\n\n* **`cap-shape`** - Most of the **knobbed** mushrooms in our dataset are poisonous.\n* **`cap-surface`** - Most **fibrous** cap surface are edible.\n* **`cap-color`** - Most **white** cap colored mushrooms are edible while most **yellow** cap colored mushrooms are poisonous.  \n* **`bruises`** - **Bruised** mushrooms are usually edible while **unbruised** ones are usually the oppisite.\n* **`odor`** - **No smell** mushrooms are mostly edible by a wide margin while all **foul smell** mushrooms are poisonous.\n* **`gill-attachment`** - The **attached** gills are almost always edible. \n* **`gill-spacing`** - The **crowded** gills are almost always edible. \n* **`gill-size`** - The **narrow** gill sized mushrooms are almost always poisonous. \n* **`gill-color`** - The **buff** gill colored mushrooms are always poisonous.\n* **`stalk-shape`** - insignificant difference betwwen each value in terms of poisonous or edible.\n* **`stalk-root`** -  Mushrooms with missing data of stalk roots are usually poisonous.\n* **`stalk-surface-above-ring`** - The **silky** mushrooms are usually poisonous, **smooth** are usually edible.\n* **`stalk-surface-below-ring`** -  About the same as `stalk-surface-above-ring`.\n* **`stalk-color-above-ring`** - The **white** stalk colored mushrooms are usually edible, pink ones are mostly poisonous.\n* **`stalk-color-below-ring`** -  About the same as `stalk-color-above-ring`.\n* **`veil-type`** - All veil type of the mushroom's are partial so this column is pretty much **usless** in our analysis.\n* **`veil-color`** - Almost all of the mushroom's veil color are **white (97.54%)** so this column is pretty much **usless** in our analysis.\n* **`ring-number`** - Almost all of the mushroom's ring number amount are **one (92.17%)** so this column is pretty much **usless** in our analysis.\n* **`ring-type`** - The **pendant** ring typed mushrooms are mostly edible,**evanescent** are mostly poisonous and **large** ring types are all poisonous.\n* **`spore-print-color`** - The **brown** and **black** ones are almost entirely edible while  **white** and **chocolate (20.09%)** are mostly poisonous.\n* **`population`** -  Mushrooms with  a **several** population are mostly poisonous.\n* **`habitat`** - The **woods**  or **grasses** grown mushrooms are mostly edible.\n\n## Feature Engineering\n\nFrom the analysis above the following columns are not needed so we will drop them: `gill-attachment`, `stalk-shape`, `stalk-surface-below-ring`, `stalk-color-below-ring`, `veil-type`, `veil-color`, `ring-number`.\nso now we will create our feetures varable x excluding the mentioned columns:","6ce79c2f":"### Csv results of the test for our model:\n<img src=\"https:\/\/cdn.dribbble.com\/users\/134487\/screenshots\/5947007\/quickgif_2_excel_todribble.gif\" alt=\"excel\" width=\"300\" height=\"200\">\n\nFor an example a sample of the models prediction was created, You can see each predition and true value side by side by the csv created in the output directory.\nyou can try to calculate through excel the metrics that have been used in this notebook to enhance your understanding!\n","25641179":"# conclusion\n\n![](https:\/\/images.squarespace-cdn.com\/content\/v1\/5637990ae4b079867b702d80\/1544043440205-1W8A4YB11EKL4XI6UBFH\/ke17ZwdGBToddI8pDm48kM7hVlVBSZIBDiYFGm4uKL8UqsxRUqqbr1mOJYKfIPR7LoDQ9mXPOjoJoqy81S2I8N_N4V1vUb5AoIIIbLZhVYy7Mythp_T-mtop-vrsUOmeInPi9iDjx9w8K4ZfjXt2dg-9TaKOIrgOcuDKbtfYF7NMOK5RvYUzVpIK_EiFkmZhCjLISwBs8eEdxAxTptZAUg\/Balancing+Scale)\n\nAfter all of the models calculations, we can now compare them,\nwe will show them side by side and by our reports decide how well they performed compared to one another.","6ce88cfb":"### Shape","06ccefc6":"### Information","ac4de618":"## Data Visualization \ud83d\udcca\n\n### Target plot\n\nWe will make a detailed plot for our target to get a clear idea of it's distribution:","cd2de81d":"# Preprocessing and Data Analysis \ud83d\udcbb\u00b6\n\n## File Path \ud83d\udcc2","477f703f":"## First look at the data:","b6250830":"## Random Forest\n\n![](https:\/\/thumbs.gfycat.com\/RigidFantasticBlackfly-max-14mb.gif)\n\nA decision tree is a flowchart-like structure in which each internal node represents a \"test\" on an attribute (e.g. whether a coin flip comes up heads or tails), each branch represents the outcome of the test, and each leaf node represents a class label ([wikipedia](https:\/\/en.wikipedia.org\/wiki\/Decision_tree))."}}