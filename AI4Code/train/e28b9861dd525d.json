{"cell_type":{"8152c0a0":"code","b46a3147":"code","00725455":"code","f7f1cf07":"code","739174b3":"code","d09f8bf7":"code","fee76ec7":"code","c98a45c5":"code","cf2951d1":"code","7b98b782":"code","ce0e2367":"code","39a0fbee":"code","934f997c":"code","92cf7701":"code","0a1d678a":"code","ddeb6ce6":"code","f313ceca":"code","79cc1660":"code","265f39c0":"code","60831065":"code","b840026b":"code","31b6c5e6":"code","14a40937":"code","e15133af":"code","fb085fb1":"code","5b862348":"code","f19c69b5":"code","871dfc5f":"code","fa15dd9c":"code","f1547c23":"code","24356f40":"code","6095fbc8":"code","f69c92c9":"code","0048e628":"code","22a505dd":"code","f7f16500":"code","39b0870c":"code","17ee171e":"code","75eca9a2":"code","aa0f388a":"code","94f4686a":"code","73ec7d0d":"code","b826780a":"code","9d464d64":"code","b64a6466":"code","d023a312":"code","e971e4f8":"code","38eae15d":"code","3bb953cd":"code","3b5a6e84":"code","f5866afa":"code","511b919d":"code","aeb8202d":"code","3837ca19":"code","fd31f4b3":"code","b50c162e":"code","1f0e9ad1":"code","76d7cdc6":"code","8a31b674":"code","69df2b2f":"code","962bebf7":"code","cc0643f8":"code","0f0d1bfe":"code","95a8c063":"code","6bb368ea":"code","545c74ee":"code","f150ab39":"markdown","ff416fde":"markdown","733d4fad":"markdown","7f0ddf78":"markdown","5e6ac8fe":"markdown","634edde4":"markdown","4b1d5aa6":"markdown","72049706":"markdown","d2ab47c9":"markdown"},"source":{"8152c0a0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv\nfrom matplotlib import pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)","b46a3147":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv')","00725455":"train.head(5)","f7f1cf07":"import seaborn as sns","739174b3":"train.info()","d09f8bf7":"df1 = train.Population.groupby(train['Country_Region']).max().sort_values(ascending= False)\ndf10 = pd.DataFrame()\ndf20 = pd.DataFrame()\ndf30 = pd.DataFrame()\ndf40 = pd.DataFrame()\ndf10['population'] = df1.iloc[0:10]\ndf10['country']= df10.index\ndf20['population'] = df1.iloc[11:20]\ndf20['country'] = df20.index\ndf30['population'] = df1.iloc[21:30]\ndf30['country'] = df30.index\ndf40['population'] = df1.iloc[31:40]\ndf40['country'] = df40.index","fee76ec7":"plt.figure(figsize =(10,10))\nplt.subplot(2,1,1)\nsns.barplot(x='country', y='population', data=df10, orient ='v')\nplt.xlabel('Country')\nplt.title('Popoulation Top 10')\nplt.subplot(2,1,2)\nsns.barplot(x='country', y='population', data=df40, orient ='v')\nplt.xlabel('Country')\nplt.title('Population Last 10')","c98a45c5":"train1= train[train['Target']=='ConfirmedCases']\ndata1 = pd.DataFrame()\ndata1['values'] =train1.TargetValue.groupby(train1['Country_Region']).sum().sort_values(ascending= False)\ndata1['country'] = data1.index\ndata1.index = np.arange(0,len(data1))\ndata10 = data1.iloc[0:10,:]\ndata20 = data1.iloc[11:20,:]","cf2951d1":"plt.figure(figsize =(10,10))\nplt.subplot(2,1,1)\nsns.barplot(x='country', y='values', data=data10, orient ='v')\nplt.xlabel('Country')\nplt.ylabel('Cases')\nplt.title('Covid Cases Top 10')\nplt.subplot(2,1,2)\nsns.barplot(x='country', y='values', data=data20, orient ='v')\nplt.xlabel('Country')\nplt.ylabel('Cases')\nplt.title('Covid Cases Next 10')","7b98b782":"train1= train[train['Target']!='ConfirmedCases']\ndata1 = pd.DataFrame()\ndata1['values'] =train1.TargetValue.groupby(train1['Country_Region']).sum().sort_values(ascending= False)\ndata1['country'] = data1.index\ndata1.index = np.arange(0,len(data1))\ndata10 = data1.iloc[0:10,:]\ndata20 = data1.iloc[11:20,:]","ce0e2367":"plt.figure(figsize =(10,10))\nplt.subplot(2,1,1)\nsns.barplot(x='country', y='values', data=data10, orient ='v')\nplt.xlabel('Country')\nplt.ylabel('Deaths')\nplt.title('Covid Cases Top 10')\nplt.subplot(2,1,2)\nsns.barplot(x='country', y='values', data=data20, orient ='v')\nplt.xlabel('Country')\nplt.ylabel('Deaths')\nplt.title('Covid Cases Next 10')","39a0fbee":"china = train[train['Country_Region']=='China']","934f997c":"china.info()","92cf7701":"china.drop(['County','Province_State'],axis =1,inplace =True)","0a1d678a":"china.head(5)","ddeb6ce6":"china.index = np.arange(0,len(china)) #rechanging the index","f313ceca":"china.head(5)","79cc1660":"chi = china[china['Target']=='ConfirmedCases']\nchi.index = np.arange(0,len(chi))","265f39c0":"chi.head(5)","60831065":"print(\"Date with more no.of cases in china {}\".format((chi[chi['TargetValue']==chi['TargetValue'].max()]['Date']).values))\nprint(\"The cases are {}\".format((chi[chi['TargetValue']==chi['TargetValue'].max()]['TargetValue']).values))","b840026b":"list1 = []\nfor i in range(2,7):\n    date = '2020'+'-0'+str(i)+'-01'\n    list1.append(chi[chi['Date']<date]['TargetValue'].sum())\nprint(list1)","31b6c5e6":"sns.barplot(['upto Jan','Upto Feb','Upto Mar', 'Upto Apr','Upto May'],list1)","14a40937":"list2 =[]\nfor i in range(len(list1)):\n    if i ==0:\n        list2.append(list1[i])\n    else:\n        list2.append(list1[i]-list1[i-1])\nprint(list2)","e15133af":"labels =['Jan','Feb','Mar','Apr','May']\nsns.barplot(labels,list2)","fb085fb1":"df = china['TargetValue'].groupby(train['Target']).sum()\ndf","5b862348":"labels =[df.index[0],df.index[1]]\nsizes = [df[0],df[1]]\nexplode = (0, 0.2)  \nplt.figure(figsize = (5,5))\n\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\n\nplt.show()","f19c69b5":"wor = train[train['Target']=='ConfirmedCases']","871dfc5f":"print(\"Date with more no.of cases  {}\".format((wor[wor['TargetValue']==wor['TargetValue'].max()]['Date']).values))\nprint(\"The cases are {}\".format((wor[wor['TargetValue']==wor['TargetValue'].max()]['TargetValue']).values))\nprint(\"The Country is {}\".format((wor[wor['TargetValue']==wor['TargetValue'].max()]['Country_Region']).values))","fa15dd9c":"wor.columns","f1547c23":"independent_columns = ['Country_Region','Weight','Target','Date']\ndependent_column = ['TargetValue']","24356f40":"X= train[independent_columns]\ny = train[dependent_column]","6095fbc8":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nX['Target']=le.fit_transform(X['Target'])","f69c92c9":"X.info()","0048e628":"train1= train[train['Target']=='ConfirmedCases']\ndata1 = pd.DataFrame()\ndata1['values'] =train1.TargetValue.groupby(train1['Country_Region']).sum().sort_values(ascending= False)\ndata1['country'] = data1.index","22a505dd":"k = len(data1['country'])\ndict1 = {}\nfor i in data1['country']:\n    dict1[i] = k\n    k =k-1","f7f16500":"list1=[]\nX['encoded_country']=0\nfor i in X['Country_Region']:\n    list1.append(dict1[i])\nX['encoded_country'] = list1","39b0870c":"X['encoded_country'].value_counts()","17ee171e":"X['date_dup'] = pd.to_datetime(X['Date'])","75eca9a2":"X['month'] = 0\nlist1=[]\nfor i in X['date_dup']:\n    list1.append(i.month)\nX['month'] = list1","aa0f388a":"X['date'] = 0\nlist1=[]\nfor i in X['date_dup']:\n    list1.append(i.day)\nX['date'] = list1","94f4686a":"X.head(5)","73ec7d0d":"X.drop(['Country_Region','Date','date_dup'],axis =1,inplace =True)","b826780a":"X.head(5)","9d464d64":"plt.figure(figsize =(10,10))\nsns.heatmap(X.corr(),annot=True)","b64a6466":"from sklearn.model_selection import train_test_split as tts","d023a312":"max_range =10","e971e4f8":"from sklearn.ensemble import RandomForestRegressor as regr\nfrom sklearn.metrics import r2_score","38eae15d":"'''for i in range(max_range):\n    X_train,X_test,y_train,y_test = tts(X,y,test_size =0.3,random_state =i)\n    model = regr()\n    model.fit(X_train,y_train)\n    print(\"Random state {}\\n\".format(i))\n    print(r2_score(y_test,model.predict(X_test)))'''","3bb953cd":"X_train,X_test,y_train,y_test = tts(X,y,test_size =0.3,random_state =7)\nmodel = regr()\nmodel.fit(X_train,y_train)","3b5a6e84":"print(r2_score(y_test,model.predict(X_test)))","f5866afa":"test = test[independent_columns]","511b919d":"list1=[]\ntest['encoded_country']=0\nfor i in test['Country_Region']:\n    list1.append(dict1[i])\ntest['encoded_country'] = list1","aeb8202d":"test['date_dup'] = pd.to_datetime(test['Date'])","3837ca19":"test['month'] = 0\nlist1=[]\nfor i in test['date_dup']:\n    list1.append(i.month)\ntest['month'] = list1","fd31f4b3":"test['date'] = 0\nlist1=[]\nfor i in test['date_dup']:\n    list1.append(i.day)\ntest['date'] = list1","b50c162e":"test.head(5)","1f0e9ad1":"test.drop(['Country_Region','Date','date_dup'],axis =1,inplace =True)","76d7cdc6":"test.head(5)","8a31b674":"le1 =LabelEncoder()\ntest['Target'] = le1.fit_transform(test['Target'])","69df2b2f":"pred = model.predict(test)","962bebf7":"t =pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv')\nss = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/submission.csv')","cc0643f8":"output = pd.DataFrame({'Id': t.ForecastId  , 'TargetValue': pred})","0f0d1bfe":"a=output.groupby(['Id'])['TargetValue'].quantile(q=0.05).reset_index()\nb=output.groupby(['Id'])['TargetValue'].quantile(q=0.5).reset_index()\nc=output.groupby(['Id'])['TargetValue'].quantile(q=0.95).reset_index()","95a8c063":"a.columns=['Id','q0.05']\nb.columns=['Id','q0.5']\nc.columns=['Id','q0.95']\na=pd.concat([a,b['q0.5'],c['q0.95']],1)\na['q0.05']=a['q0.05']\na['q0.5']=a['q0.5']\na['q0.95']=a['q0.95']","6bb368ea":"sub=pd.melt(a, id_vars=['Id'], value_vars=['q0.05','q0.5','q0.95'])\nsub['variable']=sub['variable'].str.replace(\"q\",\"\", regex=False)\nsub['ForecastId_Quantile']=sub['Id'].astype(str)+'_'+sub['variable']\nsub['TargetValue']=sub['value']\nsub=sub[['ForecastId_Quantile','TargetValue']]\nsub.reset_index(drop=True,inplace=True)\nsub.to_csv(\"submission.csv\",index=False)\nsub.head()","545c74ee":"sub.info()","f150ab39":"# <center>Analysing the cases in China<\/center>","ff416fde":"# <center>Monthly Progression of disease <\/center>","733d4fad":"# <center>Fatalities vs Confirmed cases(China)<\/center>","7f0ddf78":"# <center> Picking out date and month seperately<\/center>","5e6ac8fe":"# <center>Count per month<\/center>","634edde4":"# <center>Encoding Country according to it's rank in no.of confirmed cases<\/center>","4b1d5aa6":"# Actually I did some processing to find the best random state and I commented because it takes so much time to run\nBEST RANDOM STATE:7","72049706":"# <center>Preprocessing the test data in the same way we did for training data<\/center>","d2ab47c9":"# <center> Seeing the Correleation<\/center>"}}