{"cell_type":{"7a570eee":"code","3b8b38f0":"code","f4563323":"code","586f22f7":"code","902d292d":"code","cc5f88b5":"code","c3fe4085":"code","3ace55a1":"code","9c4f9a27":"code","e8162496":"code","ca35a420":"code","96f3467e":"code","2222bcd2":"code","28c59e92":"code","65dd6f6a":"code","d5d43a45":"code","e6ede5e0":"code","2255f333":"code","c5524bf1":"code","cabfa157":"code","82026322":"code","2d31ed79":"code","f6580433":"code","ead93b22":"code","9d7e9658":"code","d2a5b80e":"code","8e9c84f9":"code","7a6befa3":"code","695eb2b5":"code","99e44d3c":"code","6a524bda":"code","26f0896b":"code","d60cc6cc":"code","aed59cba":"code","e3f032dc":"code","141cbeef":"code","63d21f5d":"code","6c751655":"code","a871dbbf":"code","edca69b7":"code","b74d642f":"code","88701cbf":"code","fa584d7c":"code","0fda3eb6":"code","8b55616e":"code","ffb425be":"code","c1236a88":"code","7fd84672":"code","4976ce6c":"code","25280147":"code","e8160670":"markdown","d8d9d0f4":"markdown","3e4b47a1":"markdown","790f5042":"markdown","92b11012":"markdown","6201a55b":"markdown","70e01afc":"markdown","bc1cf4c5":"markdown","4f8ca6bf":"markdown","8e0d1ec8":"markdown","110ad759":"markdown","2d004e5f":"markdown"},"source":{"7a570eee":"import numpy as np # linear b\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)b\nimport seaborn as sns\nimport matplotlib.pyplot as plt","3b8b38f0":"sample_submission = pd.read_csv('..\/input\/jobathon-may-2021-credit-card-lead-prediction\/sample_submission.csv')\ntest =  pd.read_csv('..\/input\/jobathon-may-2021-credit-card-lead-prediction\/test.csv')\ntrain = pd.read_csv( '..\/input\/jobathon-may-2021-credit-card-lead-prediction\/train.csv')","f4563323":"train.head()","586f22f7":"test.head()","902d292d":"train.info()","cc5f88b5":"test.info()","c3fe4085":"train.describe()","3ace55a1":"test.describe()","9c4f9a27":"train.nunique()","e8162496":"train.head()","ca35a420":"Target_col = 'Is_Lead'","96f3467e":"categorical_vars = ['Gender', 'Region_Code', 'Occupation', 'Channel_Code', 'Credit_Product', 'Is_Active']\nconts = ['Age', 'Vintage', 'Avg_Account_Balance']","2222bcd2":"train.Is_Lead.plot.hist()","28c59e92":"train.Age.plot.hist()","65dd6f6a":"test.Age.plot.hist()","d5d43a45":"train.Avg_Account_Balance.plot.hist()","e6ede5e0":"test.Avg_Account_Balance.plot.hist()","2255f333":"train.Vintage.plot.hist()","c5524bf1":"test.Vintage.plot.hist()","cabfa157":"\ntrain = train[train['Avg_Account_Balance']<=max(test.Avg_Account_Balance)].reset_index(drop=True)","82026322":"for i in categorical_vars:\n    print(train.groupby(i)['Is_Lead'].value_counts().nlargest(8))","2d31ed79":"train.isnull().sum()","f6580433":"train = train.fillna('other')\ntest = test.fillna('other')","ead93b22":"train['set'] = 1\ntest['set'] = 0\nconcat = pd.concat([train.drop(['ID'], axis=1), test.drop('ID', axis=1)])","9d7e9658":"results = concat[concat.duplicated(subset=['Gender', 'Age', 'Region_Code', 'Occupation', 'Channel_Code', 'Vintage', 'Credit_Product', 'Is_Active'], keep=False)].sort_values(by=['Gender', 'Age', 'Region_Code', 'Occupation', 'Channel_Code', 'Vintage', 'Credit_Product', 'Is_Active', 'Is_Lead']).fillna(method='ffill')","d2a5b80e":"train = train.drop('set', axis=1)\ntest = test.drop('set', axis=1)","8e9c84f9":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(train['Gender'])\ntrain['Gender'] = le.transform(train['Gender'])\ntest['Gender'] = le.transform(test['Gender'])","7a6befa3":"from sklearn.preprocessing import LabelEncoder\nole = LabelEncoder()\nole.fit(train['Occupation'])\ntrain['Occupation'] = ole.transform(train['Occupation'])\ntest['Occupation'] = ole.transform(test['Occupation'])","695eb2b5":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(train['Channel_Code'])\ntrain['Channel_Code'] = le.transform(train['Channel_Code'])\ntest['Channel_Code'] = le.transform(test['Channel_Code'])","99e44d3c":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(train['Credit_Product'])\ntrain['Credit_Product'] = le.transform(train['Credit_Product'])\ntest['Credit_Product'] = le.transform(test['Credit_Product'])","6a524bda":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(train['Is_Active'])\ntrain['Is_Active'] = le.transform(train['Is_Active'])\ntest['Is_Active'] = le.transform(test['Is_Active'])","26f0896b":"# performing freq encoding\n\ndicto = train['Region_Code'].value_counts(normalize=True).to_dict()\ntrain['Region_Code'] = train['Region_Code'].map(dicto)\ndicto = test['Region_Code'].value_counts(normalize=True).to_dict()\ntest['Region_Code'] = test['Region_Code'].map(dicto)","d60cc6cc":"from scipy import stats","aed59cba":"fitted_data, fitted_lambda = stats.boxcox(np.abs(train['Vintage']))\ntrain['Vintage_box'] = fitted_data\nfitted_data, fitted_lambda = stats.boxcox(np.abs(test['Vintage']))\ntest['Vintage_box'] = fitted_data","e3f032dc":"sns.distplot(fitted_data)","141cbeef":"from sklearn.preprocessing import KBinsDiscretizer\nest = KBinsDiscretizer(n_bins=8, encode='ordinal', strategy='quantile')\nest.fit(train['Age'].values.reshape(-1,1))\ntrain['Age_quantiles'] = est.transform(train['Age'].values.reshape(-1,1)).astype(int)\ntest['Age_quantiles'] = est.transform(test['Age'].values.reshape(-1,1)).astype(int)","63d21f5d":"from sklearn.preprocessing import KBinsDiscretizer\nest = KBinsDiscretizer(n_bins=8, encode='ordinal', strategy='quantile')\nest.fit(train['Vintage'].values.reshape(-1,1))\ntrain['Vintage_quantiles'] = est.transform(train['Vintage'].values.reshape(-1,1)).astype(int)\ntest['Vintage_quantiles'] = est.transform(test['Vintage'].values.reshape(-1,1)).astype(int)","6c751655":"from sklearn.preprocessing import KBinsDiscretizer\nest = KBinsDiscretizer(n_bins=8, encode='ordinal', strategy='quantile')\nest.fit(train['Avg_Account_Balance'].values.reshape(-1,1))\ntrain['Avg_Account_Balance_quantiles'] = est.transform(train['Avg_Account_Balance'].values.reshape(-1,1)).astype(int)\ntest['Avg_Account_Balance_quantiles'] = est.transform(test['Avg_Account_Balance'].values.reshape(-1,1)).astype(int)","a871dbbf":"train['Avg_Account_Balance_log'] = np.log(train['Avg_Account_Balance'])\ntest['Avg_Account_Balance_log'] = np.log(test['Avg_Account_Balance'])\n\ntrain['Vintage_log'] = np.log(train['Vintage'])\ntest['Vintage_log'] = np.log(test['Vintage'])\n","edca69b7":"conts","b74d642f":"train.describe()","88701cbf":"train.head()","fa584d7c":"X = train.drop(['ID', 'Is_Lead', 'Avg_Account_Balance_quantiles', 'Vintage', 'Avg_Account_Balance'], axis=1).values\ny = train[Target_col].values\nX_test = test.drop(['ID', 'Avg_Account_Balance_quantiles', 'Vintage', 'Avg_Account_Balance'], axis=1).values\n\n\nfrom sklearn.preprocessing import MaxAbsScaler\n\ntransformer = MaxAbsScaler().fit(X)\nX = transformer.transform(X)\nX_test = transformer.transform(X_test)","0fda3eb6":"from sklearn.linear_model import Lasso, LinearRegression,Ridge\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.svm import SVC","8b55616e":"from sklearn.metrics import roc_auc_score","ffb425be":"from sklearn.model_selection import StratifiedKFold,KFold","c1236a88":"!pip install catboost","7fd84672":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import ExtraTreeClassifier\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom sklearn import linear_model\nfrom catboost import CatBoostClassifier","4976ce6c":"def entreprenur_make1(sample_submission):\n  indexEntrepreneur = test[test['Occupation'] == list(ole.classes_).index('Entrepreneur')].index\n  sample_submission.loc[indexEntrepreneur, 'Is_Lead'] = 1\n  return sample_submission","25280147":"predictions = np.zeros(test.shape[0])\noobs = np.zeros(train.shape[0])\ny = train[Target_col].values\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\nparams = {'n_estimators': 10000, 'n_jobs': -1, 'random_state': 2, 'learning_rate': 0.014564209621859385, 'colsample_bytree': 0.48762749309989595}\n\nmodel = lgb.LGBMClassifier(**params)\n\nfor i, (train_id, valid_id) in enumerate(skf.split(X,y)):\n    print(\"fold \", i)  \n    X_train, y_train = X[train_id], y[train_id]\n    X_valid, y_valid = X[valid_id], y[valid_id]\n    model.fit(X_train, y_train, eval_set =[(X_valid, y_valid)],  early_stopping_rounds=200, verbose=1000, eval_metric='auc')\n\n    oobs[valid_id] = model.predict_proba(X_valid)[:,1]\n    predictions += model.predict_proba(X_test)[:,1]\nroc_auc = roc_auc_score(y,oobs)\nfinals = predictions\/5\nlgb_predictions = finals\nsample_submission[Target_col] = finals\nsample_submission.to_csv('lgb_final.csv', index=False)\nprint(\"ROCAUC\", roc_auc)\nlgb_oobs = oobs\nprint(\"best oob lightgbm\")\npd.DataFrame(data=oobs).to_csv('oob_lgb.csv')","e8160670":"## Feature Engeneering","d8d9d0f4":"## No Of Records in the dataset","3e4b47a1":"- ID - IUnique Identifier for a row\n- Gender- Gender of the Customer\n- Age-Age of the Customer (in Years)\n- Region_Code-Code of the Region for the customers\n- Occupation-Occupation Type for the customer\n- Channel_Code-Acquisition Channel Code for the Customer  (Encoded)\n- Vintage-Vintage for the Customer (In Months)\n- Credit_Product-If the Customer has any active credit product (Home loan,\nPersonal loan, Credit Card etc.)\n- Avg_Account_Balance- Average Account Balance for the Customer in last 12 Months\n- Is_Active-If the Customer is Active in last 3 Months","790f5042":"### All the Entrepreneur have credit card interest","92b11012":"### Features selected for training","6201a55b":"## get min max std deviation of the dataset \/check quantiles","70e01afc":"## Modelling part","bc1cf4c5":"## Submit lgb_final in the end \n## this gave me 0.8507474057 of ROC_AUC","4f8ca6bf":"## outliers","8e0d1ec8":"## Missing value analysis","110ad759":"### LGBM","2d004e5f":"## Description of Dataset"}}