{"cell_type":{"018f5c90":"code","96e2fef4":"code","3a333cdb":"code","1d867362":"code","ad718061":"code","de9c6dc1":"code","9fe024a3":"code","0aaefd13":"code","867acbd2":"code","ab2d6990":"code","c451b0a0":"code","ca9a8c09":"code","bb6afb99":"code","812c9493":"code","3f201af1":"code","24b5d04a":"code","c2c21586":"code","81c4981b":"code","c834c1d7":"code","5ee1fae0":"code","a074e02e":"code","98478432":"code","bbd5177c":"code","e50d0dd4":"code","341cadce":"code","f860198d":"code","5d21827e":"code","b594c368":"code","7df1b4a9":"markdown","9574c42b":"markdown"},"source":{"018f5c90":"import numpy as np\nimport matplotlib.pyplot as plt\nimport h5py\nfrom PIL import Image\nimport scipy\nimport cv2","96e2fef4":"train_dataset = h5py.File('..\/input\/catvsnoncat\/train_catvnoncat.h5', \"r\")\ntrain_x_orig = np.array(train_dataset[\"train_set_x\"][:]) \ntrain_y = np.array(train_dataset[\"train_set_y\"][:]) \n\ntest_dataset=h5py.File('..\/input\/catvsnoncat\/test_catvnoncat.h5', \"r\")\ntest_x_orig=np.array(test_dataset['test_set_x'][:])\ntest_y=np.array(test_dataset['test_set_y'][:])\n\nclasses = np.array(test_dataset[\"list_classes\"][:])","3a333cdb":"# Example of a picture\nindex = 10\nplt.imshow(train_x_orig[index])\nprint(f\"This image is {classes[train_y[index]].decode('utf-8')}\")","1d867362":"m_train=train_x_orig.shape[0]\nnum_px=train_x_orig.shape[1]\nm_test=test_x_orig.shape[0]\n\nprint(\"Number of training smaples \",m_train)\nprint(\"Number of testing smaples \",m_test)\n\nprint(\"Each immage is of size \",num_px)\n\nprint(\"Shape of train samples \",train_x_orig.shape)\nprint(\"Shape of test samples\",test_x_orig.shape)\n\nprint(\"Shape of Y of train\", train_y.shape)\nprint(\"Shape of Y of test\", test_y.shape)","ad718061":"test_y=test_y.reshape(1,50)\ntrain_y=train_y.reshape(1,209)","de9c6dc1":"# Flatten","9fe024a3":"train_x_flatten=train_x_orig.reshape(train_x_orig.shape[0],-1).T\ntest_x_flatten=test_x_orig.reshape(test_x_orig.shape[0],-1).T\n\ntrain_x=train_x_flatten\/255\ntest_x=test_x_flatten\/255\n\nprint (\"train_x's shape: \" + str(train_x.shape))\nprint (\"test_x's shape: \" + str(test_x.shape))","0aaefd13":"#helper functions","867acbd2":"def sigmoid(z):\n    s=1\/(1+np.exp(-z))\n    return s","ab2d6990":"# initialize parameters","c451b0a0":"def initialize_with_zeros(dim):\n    \n    w=np.zeros((dim,1))\n    b=0\n    \n    return w,b","ca9a8c09":"# Propagation","bb6afb99":"def propagate(w,b,X,Y):\n    \n    m=X.shape[1]\n    \n#     Forward Propagation\n    A=sigmoid(np.dot(w.T,X)+b)\n    \n    cost=-1\/m * (np.sum(Y*np.log(A)+(1-Y)*np.log(1-A),axis=1,keepdims=True))\n    \n#     Backward propagation\n\n    dw=1\/m * (np.dot(X,(A-Y).T))\n    db=1\/m * (np.sum(A-Y))\n    \n    grads={\n        \"dw\":dw,\n        \"db\":db\n    }\n    \n    return grads,cost","812c9493":"# OPtimization","3f201af1":"def optimize(w,b,X,Y,num_iter,learning_rate,print_cost=False):\n    \n    costs=[]\n    \n    for i in range(num_iter):\n        \n        grads,cost=propagate(w,b,X,Y)\n        \n        dw=grads[\"dw\"]\n        db=grads[\"db\"]\n        \n        w=w-learning_rate*dw\n        b=b-learning_rate*db\n  \n        if i%100==0:\n            costs.append(cost)\n            \n        if print_cost and i%100==0:\n            print(f\"Cost after iteration {i}:{cost}\")\n            \n        params={\n            \"w\":w,\n            \"b\":b\n        }\n        \n    return params,grads,costs","24b5d04a":"# predict","c2c21586":"def predict(w,b,X):\n    \n    m=X.shape[1]\n    \n    Y_prediction=np.zeros((1,m))\n    w=w.reshape(X.shape[0],1)\n    \n    A=sigmoid(np.dot(w.T,X)+b)\n    \n    for i in range(A.shape[1]):\n        Y_prediction[0,i]=np.where(A[0,i]>0.5,1,0)\n        \n    return Y_prediction","81c4981b":"# model","c834c1d7":"def model(X_train,Y_train,X_test,Y_test,num_iter=2000,learning_rate=0.005,print_cost=False):\n    \n    w,b=initialize_with_zeros(X_train.shape[0])\n    \n    params,grads,costs=optimize(w,b,X_train,Y_train,num_iter,learning_rate,print_cost)\n    \n    w=params[\"w\"]\n    b=params[\"b\"]\n    \n    Y_predicted_test=predict(w,b,X_test)\n    Y_predicted_train=predict(w,b,X_train)\n    \n    print(f\"train accurcay: {100-np.mean(np.abs(Y_predicted_train-Y_train))*100}\")\n    print(f\"test accurcay: {100-np.mean(np.abs(Y_predicted_test-Y_test))*100}\")\n    \n    d={\n        \"costs\":costs,\n        \"Y_prediction_test\": Y_predicted_test, \n        \"Y_prediction_train\" : Y_predicted_train, \n        \"w\" : w, \n        \"b\" : b,\n        \"learning_rate\" : learning_rate,\n        \"num_iterations\": num_iter\n    }\n        \n    return d","5ee1fae0":"d=model(train_x,train_y,test_x,test_y,num_iter=2000,learning_rate=0.005,print_cost=True)","a074e02e":"y_pred=d['Y_prediction_test']\nlr=d['learning_rate']","98478432":"# example of wrongly classified piccture","bbd5177c":"index=6\nplt.imshow(test_x[:,index].reshape((num_px,num_px,3)))\n\ny_pred=y_pred.reshape(50,1)\n\nprint(f\"This picture is {classes[int(y_pred[index])].decode('utf-8')}\")","e50d0dd4":"# plot of cost function","341cadce":"costs=np.squeeze(d['costs'])\nplt.plot(costs)\nplt.ylabel('cost')\nplt.xlabel('iterations (per hundred)')\nplt.title(f\"Learning Rate= {lr}\")\nplt.show()","f860198d":"# experimenting with the model","5d21827e":"learning_rates = [0.01, 0.001, 0.0001, 0.5, 0.005]\nmodels = {}\nfor i in learning_rates:\n    print (\"learning rate is: \" + str(i))\n    models[str(i)] = model(train_x, train_y, test_x, test_y, num_iter = 1500, learning_rate = i, print_cost = False)\n    print ('\\n' + \"-------------------------------------------------------\" + '\\n')\n\nfor i in learning_rates:\n    plt.plot(np.squeeze(models[str(i)][\"costs\"]), label= str(models[str(i)][\"learning_rate\"]))\n\nplt.ylabel('cost')\nplt.xlabel('iterations (hundreds)')\n\nlegend = plt.legend(loc='upper center', shadow=True)\nframe = legend.get_frame()\nframe.set_facecolor('0.90')\nplt.show()","b594c368":"\nimage = Image.open('..\/input\/catvsnoncat\/cat1.jpg')\nimage=np.array(image.resize((num_px,num_px)))\nmy_image = image.reshape((1, num_px*num_px*3)).T\nmy_predicted_image = predict(d[\"w\"], d[\"b\"], my_image)\n\nplt.imshow(image)\nprint(\"y = \" + str(np.squeeze(my_predicted_image)) + \", your algorithm predicts a \\\"\" + classes[int(np.squeeze(my_predicted_image)),].decode(\"utf-8\") +  \"\\\" picture.\")","7df1b4a9":"As usual you will follow the Deep Learning methodology to build the model:\n\n1. Initialize parameters \/ Define hyperparameters\n2. Loop for num_iterations:\n    a. Forward propagation\n    b. Compute cost function\n    c. Backward propagation\n    d. Update parameters (using parameters, and grads from backprop) \n4. Use trained parameters to predict labels","9574c42b":"# Testing with custom image"}}