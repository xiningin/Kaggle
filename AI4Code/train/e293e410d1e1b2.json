{"cell_type":{"e8276382":"code","9d2920fc":"code","66166eac":"code","762fe146":"code","bcedabe3":"code","7d76069b":"code","30efefdb":"code","ece83c66":"code","529d3a84":"code","305bae70":"code","54680f41":"code","2f160de1":"code","2779f98b":"code","28eef26f":"code","defed10f":"code","0bc85bdd":"code","593380a9":"code","170c5836":"code","981aaca7":"code","4569946f":"code","be8a748e":"code","50ad2849":"code","d15328bc":"code","0b553c20":"code","4f743e05":"code","77fbe03e":"code","07a0e84b":"code","6eceb188":"code","09504f2b":"markdown","f47e7eca":"markdown","eb3f0e3f":"markdown","1a63286d":"markdown","988f8ad2":"markdown","7e9cfbef":"markdown","d2a768b9":"markdown","0661884b":"markdown","f96b428f":"markdown","fb569a90":"markdown","580a2b19":"markdown","5545720a":"markdown","9025c571":"markdown","12ef95dc":"markdown","7446a112":"markdown","144f1fa9":"markdown","70409957":"markdown","98dfcaa5":"markdown"},"source":{"e8276382":"from IPython.display import HTML\nhtmlCodeHide=\"\"\"\n<style>\n    .button {\n        background-color: #008CBA;;\n        border: none;\n        color: white;\n        padding: 8px 22px;\n        text-align: center;\n        text-decoration: none;\n        display: inline-block;\n        font-size: 16px;\n        margin: 4px 2px;\n        cursor: pointer;\n    }\n<\/style>\n<script>\n    function toggleInput() {\n        var i;\n        var textCellsToHide = [1,2,3,4,5,6,11];\n        var outputCellsToHide = [1];\n        for (i = 0; i < document.getElementsByClassName(\"input\").length; i++) {\n            var divTag = document.getElementsByClassName(\"input\")[i]\n            var displaySetting = divTag.style.display;\n            if (displaySetting == 'none') { \n                divTag.style.display = '';\n            }\n            else { \n                divTag.style.display = 'none';\n            }\n        }\n        for (i of textCellsToHide) {\n            var divTag = document.getElementsByClassName(\"text_cell\")[i]\n            var displaySetting = divTag.style.display;\n            if (displaySetting == 'none') { \n                divTag.style.display = '';\n            }\n            else { \n                divTag.style.display = 'none';\n            }\n        }\n        for (i of outputCellsToHide) {\n            var divTag = document.getElementsByClassName(\"output\")[i]\n            var displaySetting = divTag.style.display;\n            if (displaySetting == 'none') { \n                divTag.style.display = '';\n            }\n            else { \n                divTag.style.display = 'none';\n            }\n        }\n    }  \n<\/script>\n<button onclick=\"javascript:toggleInput(0)\" class=\"button\">Show\/Hide Explanatory Cell Visibility<\/button>\n\"\"\"\nHTML(htmlCodeHide)","9d2920fc":"#General\nimport os\nimport numpy as np \nimport pandas as pd\npd.set_option('display.max_rows', 200)\npd.set_option('display.max_columns', 150)\npd.set_option('display.max_colwidth', 200)\nfrom itertools import product\nfrom scipy.optimize import curve_fit\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nimport plotly.io as pio","66166eac":"def short_print(obj):\n    print(str(obj)[:1500])\n\nshort_print(pio.templates['plotly_dark'])","762fe146":"pio.templates['plotly_dark'].layout.colorway = ('#0840D9','#882775','#00A34C','#B86200','#AA250E','#1D8682')","bcedabe3":"HTML(\"\"\"\n<style>\ng.pointtext {display: none;}\n<\/style>\n\"\"\")","7d76069b":"def unify_data(interpolate=True):\n    regions = pd.read_csv('..\/input\/who-countryregion-key\/countryInfo.csv')\n    regions = regions.replace({'region':{\n        'Eastern Mediterranean':'East Mediterranean',\n        'Western Pacific':'West Pacific',\n        'South-East Asia':'SE Asia'\n    }})\n    count = 0\n    for dirname, _, filenames in os.walk('..\/input\/who-worldhealth-statistics-2020-complete'):\n        for filename in filenames:\n            if 'region' not in filename and 'of' not in filename: \n                new = pd.read_csv(f'..\/input\/who-worldhealth-statistics-2020-complete\/{filename}')\n                pivot_cols = ['Indicator']\n                if 'Dim2' in new.columns:\n                    pivot_cols += ['Dim1','Dim2']\n                elif 'Dim1' in new.columns:\n                    new = new.query('Dim1 in (\"Both sexes\",\"Total\")')\n                    del new['Dim1']\n                new.Period = new.Period.astype('str')\n                new['Period'] = [x[-4:] for x in new['Period']]\n                new['Period'] = new['Period'].astype('int32')\n                new = new.pivot(index=['Location','Period'], columns=pivot_cols, values='First Tooltip').reset_index()\n                for col in new.columns:\n                    if col not in ['Location','Period',('Location', '', ''),('Period', '', '')] and new[col].dtype=='object':\n                        new[col] = new[col].replace({'No data':np.NaN})\n                        new[col] = new[col].str.extract(r'^<?([\\d\\.]*)')\n                        new[col] = new[col].astype('float64')\n                if count == 0:\n                    df = new\n                else:\n                    df = pd.merge(df,new,on=['Location','Period'], how='outer')\n                count += 1\n    df = df.rename(columns={\n        'Location':'country',\n        'Period':'year'\n    })\n    #take the last year of periods for ease of use\n    df = df.replace({'country':{'Sudan (until 2011)':'Sudan'}})\n    df = df.join(regions.set_index('country'), on='country')\n    df = df.sort_values(['region','country','year'])\n    df.loc[df['Nursing and midwifery personnel (per 10,000)']>1000,'Nursing and midwifery personnel (per 10,000)'] = np.NaN\n    df.loc[(df['country']=='Haiti') & (df['year']==2010), ['Healthy life expectancy (HALE) at birth (years)','Life expectancy at birth (years)']] = np.NaN\n    if interpolate:\n        df = df.groupby('country').apply(pd.DataFrame.interpolate)\n        df = df.groupby('country').apply(pd.DataFrame.bfill)\n    df['hale_percent'] = df['Healthy life expectancy (HALE) at birth (years)']\/df['Life expectancy at birth (years)']*100\n    df = df[df['year']>=1999]\n    df[['Medical doctors (per 10,000)','Nursing and midwifery personnel (per 10,000)']] *= 10\n    df[['Neonatal mortality rate (per 1000 live births)','Under-five mortality rate (probability of dying by age 5 per 1000 live births)']] *= 100\n    df = pd.merge(df, pd.read_csv('..\/input\/who-countryregion-key\/population.csv'), on=['country','year'], how='left')\n    df = df[~df['region'].isna()]\n    return df\n\ncomplete_df = unify_data()","30efefdb":"def country_graphing_data(df, col_dict, years):\n    \"\"\"\n    input df with all indicators\n    returns df's needed to create movement graphs with desired variables\n    \"\"\"\n    relevant_indicators = list(col_dict.keys())\n    new_cols = list(col_dict.values())\n    df = complete_df[['country','year','region','flag','population']+relevant_indicators]\n    df = df.rename(columns=col_dict)\n    df = df.dropna()\n    df = df[df['year'].isin(years)]\n    countries_with_all_data = df.groupby('country').agg({'year':'nunique'}).query(f'year=={len(years)}').reset_index().country.unique()\n    df = df[df['country'].isin(countries_with_all_data)]\n    df_vectors = (\n        df.pivot(\n            index=['country','region'], \n            columns='year', \n            values=new_cols + ['population'])\n        .sort_values(['region','country'])\n        .reset_index()\n    )\n    return df, df_vectors","ece83c66":"def group_data_by_region(df, x, y):\n    \"\"\" \n    groups country data into regional data using population weighted means\n    returns the dataframes needed by func movement_graphs\n    \"\"\"\n    df = pd.merge(\n    df,\n    df.groupby(['region','year']).agg({'population':'sum'}).rename(columns={'population':'region_population'}).reset_index(),\n    on=['region','year'],\n    how='left'\n    )\n    df['population_prop'] = df['population']\/df['region_population']\n    df['drinking_water'] = df[x]*df['population_prop']\n    df['sanitation'] = df[y]*df['population_prop']\n    df = df.groupby(['region','year']).agg({x:'sum',y:'sum','population_prop':'sum'}).reset_index()\n\n    df_vectors = (\n        df.pivot(\n            index=['region'], \n            columns='year', \n            values=[x,y])\n        .sort_values(['region'])\n        .reset_index()\n    )\n    return df, df_vectors","529d3a84":"def movement_graph(df,df2,x,y,years,group,labels,title):\n    \"\"\"\n    Outputs an animated scatterplot with paths indicating how\n    each datapoint has moved over time.\n    \n    df: a dataframe formatted to make a regular scatterplot\n    df2: a dataframe movement paths will be generated from\n    x: x-axis variable\n    y: y-axis variable\n    years: a list containing the years forming the paths\n    group: how the data is grouped, by country or region\n    labels: axis labels\n    title: plot title\n    \"\"\"\n    num_periods = len(years)\n    #generate figure with scatter plot points\n    x_true_range = df[x].max()-df[x].min()\n    y_true_range = df[y].max()-df[y].min()\n    x_display_range = [max(0,df[x].min()-x_true_range\/20),df[x].max()+x_true_range\/20]\n    y_display_range = [max(0,df[y].min()-y_true_range\/20),df[y].max()+y_true_range\/20]\n    if group == 'country':\n        text = 'flag'\n        opacity = 0.15\n    else:\n        text = 'region'\n        opacity = 0.6    \n    region_rgba = {hale_region_vectors['region'][i]:[f'rgba{tuple(int(h[i:i+2], 16) for i in (1, 3, 5))+(opacity,)}' for h in pio.templates['plotly_dark'].layout.colorway][i] for i in range(6)}\n    fig = px.scatter(\n        df, x=x, y=y,\n        animation_frame='year',\n        text=text, color='region', hover_name=group,\n        height=700, template='plotly_dark',\n        range_x=x_display_range, range_y=y_display_range,\n        labels=labels, title=title\n    )\n    for i in range(len(df2)):\n        for j in range(num_periods-1):\n            fig.add_trace(go.Scatter(\n                x=[df2[(x,years[j])][i],df2[(x,years[j+1])][i]],\n                y=[df2[(y,years[j])][i],df2[(y,years[j+1])][i]],\n                mode='lines', legendgroup=df2['region'][i],showlegend=False, hoverinfo='skip',\n                line={\n                    \"color\":region_rgba[df2['region'][i]],\n                    'width':(j\/(num_periods-1)+0.2)*15              \n                }\n            ))\n    \n    #update figure attributes\n    fig.update_traces(marker={'size':20}, textfont_size=15)\n    fig.update_layout(legend={\n        'orientation':\"h\",\n        'yanchor':'bottom','y':1.02,\n        'xanchor':'left', 'x':0.01,\n        },\n        margin={'l':40,'r':20}                 \n    )\n    #draw the scatter points on top\n    #the final line alone would accomplish this if there were on animations\n    #the loop is needed to prevent messing up animation frames after reordering data\n    for i in range(num_periods):\n        fig['frames'][i]['data'] = fig['data'][6:] + fig['frames'][i]['data']\n    fig['data'] = fig['data'][6:] + fig['data'][:6]\n    fig.update_xaxes(showline=True,linewidth=2,linecolor='white',hoverformat='.2f')\n    fig.update_yaxes(showline=True,linewidth=2,linecolor='white',hoverformat='.2f')\n    #attributes controlling the play button\n    fig.layout.updatemenus[0].buttons[0].args[1][\"transition\"][\"duration\"] = 1500\n    fig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 2200\n    fig.layout.updatemenus[0].buttons[0].args[1][\"transition\"][\"easing\"] = 'cubic-in-out'\n    fig.layout.updatemenus[0].pad.r = 20\n    fig.layout.updatemenus[0].pad.t = 50\n    #attributes controlling the slider\n    fig.layout.sliders[0].pad.t = 30\n    fig.layout.sliders[0].pad.r = 35\n    #display figure without the floating menu\n    fig.show(config={'displayModeBar':False})","305bae70":"col_dict = {\n    'hale_percent':'hale_percent',\n    'Life expectancy at birth (years)':'life_exp',\n    'Healthy life expectancy (HALE) at birth (years)':'hale'\n}\nyears = [2000,2010,2019]\nhale, hale_vectors = country_graphing_data(complete_df,col_dict,years)","54680f41":"#dataframe for life expectancy by region scatterplot\nhale_region = (pd\n    .read_csv('..\/input\/who-worldhealth-statistics-2020-complete\/HALeWHOregionLifeExpectancyAtBirth.csv')\n    .query('Dim1==\"Both sexes\" and Period in (2000,2010,2019)')\n    .rename(columns={\n        'Location':'region',\n        'Hale Expectency':'hale',\n        'Life expectany':'life_exp',\n        'Unnamed: 6':'hale_percent',\n        'Period':'year'\n    })\n    .replace({'region':{\n        'Eastern Mediterranean':'East Mediterranean',\n        'Western Pacific':'West Pacific',\n        'South-East Asia':'SE Asia'\n    }})\n    [['region','year','hale','life_exp','hale_percent']]\n    .sort_values(['region','year'])\n)\n#dateframe for life expectancy by region movement paths\nhale_region_vectors = (\n    hale_region.pivot(\n        index=['region'], \n        columns='year', \n        values=['life_exp','hale_percent','hale'])\n    .reset_index()\n    .sort_values(['region'])\n)\n#map regions to colours\nregion_colors = {hale_region_vectors['region'][i]:pio.templates['plotly_dark'].layout.colorway[i] for i in range(6)}","2f160de1":"labels= {\n    'life_exp': 'Life Expectancy (years)',\n    'hale_percent': '% of healthy years in life expectancy',\n    'region': 'Region',\n    'year': 'Year'\n}\ntitle = 'National changes in life expectancy and % of healthy years'\nmovement_graph(\n    hale, hale_vectors, 'life_exp', 'hale_percent',\n    years, 'country', labels, title\n)","2779f98b":"labels= {\n    'life_exp': 'Life Expectancy (years)',\n    'hale_percent': '% of healthy years in life expectancy',\n    'region': 'Region',\n    'year': 'Year'\n}\ntitle = 'Regional changes in life expectancy and % of healthy years'\nyears = [2000,2010,2019]\nmovement_graph(\n    hale_region,hale_region_vectors,'life_exp',\n    'hale_percent', years,\n    'region', labels, title\n)","28eef26f":"hale_changes = hale_vectors[[\n    ('country',''),('region',''),\n    ('life_exp',2000),('life_exp',2010),('life_exp',2019),\n    ('hale',2000),('hale',2010),('hale',2019)\n]]\nhale_changes.columns = [\n    'country','region', \n    'le_2000','le_2010','le_2019',\n    'hale_2000','hale_2010','hale_2019']\nhale_changes['le_change'] = hale_changes['le_2019'] - hale_changes['le_2000']\nhale_changes['hale_change'] = hale_changes['hale_2019'] - hale_changes['hale_2000']","defed10f":"#fit an exponential curve to the data\ndef exp_func(x, a, b, c, d):\n    return a * np.exp(-b * (x - c)) + d\n\n#add the exp_func line of best fit to the graph\ndef add_exp_func_line(x, y, name, new_axis=False, init_vals=[30, 0, 100, 1]):\n    y = y.replace([np.inf,-np.inf], np.nan).dropna()\n    x = x.iloc[y.index]\n    popt, pcov = curve_fit(exp_func, x, y, p0=init_vals)\n    y_pred = exp_func(x, *popt)\n    y_plot = exp_func(x_plot, *popt)    \n    fig.add_trace(go.Scatter(x=x_plot, y=y_plot,line_shape='spline',name=name), secondary_y=new_axis)","0bc85bdd":"fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\nx = hale_changes['le_2000']\nx_plot = np.linspace(hale_changes['le_2000'].min(),hale_changes['le_2000'].max(),100)\n\nadd_exp_func_line(x,hale_changes['hale_2000']\/hale_changes['le_2000'],'% of years healthy in 2000')\nadd_exp_func_line(x,hale_changes['hale_change']\/hale_changes['le_change'],'Change in HALE\/Change in Life Exp')\nadd_exp_func_line(x,hale_changes['le_change'],'Change in Life Exp', True)\n\nfig.update_layout(\n    template='plotly_dark',\n    title='Trendlines based on Life Expectancy and HALE Values from 2000 to 2019',\n    legend={\n        'orientation':\"h\",\n        'yanchor':'bottom','y':1.02,\n        'xanchor':'left', 'x':0.01,\n        },\n        margin={'l':40,'r':20}\n)\nfig.update_xaxes(showline=True,showgrid=False, linewidth=2, linecolor='white', title='Life Expectancy in 2000',hoverformat='.3g')\nfig.update_yaxes(showline=True,showgrid=False, linewidth=2, linecolor='white', title='% of healthy years in life expectancy', secondary_y=False,hoverformat='.3g')\nfig.update_yaxes(showline=True,showgrid=False, linewidth=2, linecolor='white',title='Life Expectancy Increase', secondary_y=True, hoverformat='.3g')\nfig.show(config={'displayModeBar':False})","593380a9":"short_names = {\n    'Medical doctors (per 10,000)':'doctors',\n    'Nursing and midwifery personnel (per 10,000)':'nursing',\n    'Births attended by skilled health personnel (%)':'birth_attended',\n    'Maternal mortality ratio (per 100 000 live births)':'maternal_mort',\n    'Neonatal mortality rate (per 1000 live births)':'neonatal_mort',\n    'Under-five mortality rate (probability of dying by age 5 per 1000 live births)':'u5_mort',\n}\nyears = [1999,2005,2011,2016]\npersonnel_birth_mort, personnel_birth_mort_vectors = country_graphing_data(complete_df, short_names, years)","170c5836":"fig = px.scatter_matrix(\n    personnel_birth_mort.query('year==2016'), \n    dimensions=personnel_birth_mort.columns[5:],\n    template='plotly_dark')\nfig.update_layout(height=800)\nfig.show()","981aaca7":"#dataframe for country level doctors and neonatal mortality scatterplot\ndocs_mort = personnel_birth_mort[['country','region','year','flag','population','doctors','neonatal_mort']]\ndocs_mort['log_doctors'] = np.log(docs_mort['doctors'])\ndocs_mort['log_neonatal_mort'] = np.log(docs_mort['neonatal_mort'])\n#dateframe for country level doctors and neonatal mortality movement paths\ndocs_mort_vectors = (\n    docs_mort.pivot(\n        index=['country','region'], \n        columns='year', \n        values=['doctors','log_doctors','neonatal_mort','log_neonatal_mort','population'])\n    .sort_values(['region','country'])\n    .reset_index()\n)\n\nlabels= {\n    'doctors': 'Doctors per 10,000 Persons',\n    'neonatal_mort': 'Neonatal Mortality per 100,000 Live Births',\n    'region': 'Region',\n    'year': 'Year'\n}\ntitle = 'National changes in doctors per person and neonatal mortality rates'\nmovement_graph(\n    docs_mort, docs_mort_vectors, 'doctors', 'neonatal_mort',\n    [1999,2005,2011,2016], 'country', labels, title\n)","4569946f":"labels= {\n    'log_doctors': 'log(Doctors per 100,000 Persons)',\n    'log_neonatal_mort': 'log(Neonatal Mortality per 100,000 Live Births)',\n    'region': 'Region',\n    'year': 'Year'\n}\ntitle = 'National changes in doctors per person and neonatal mortality rates'\nmovement_graph(\n    docs_mort, docs_mort_vectors, 'log_doctors', 'log_neonatal_mort',\n    [1999,2005,2011,2016], 'country', labels, title\n)","be8a748e":"docs_mort_region, docs_mort_region_vectors = group_data_by_region(docs_mort, 'doctors', 'neonatal_mort')\n\nlabels= {\n    'doctors': 'Doctors per 100,000 Persons',\n    'neonatal_mort': 'Neonatal Mortality per 100,000 Live Births',\n    'region': 'Region',\n    'year': 'Year'\n}\ntitle = 'Regional changes in doctors per person and neonatal mortality rates'\nmovement_graph(\n    docs_mort_region, docs_mort_region_vectors, 'doctors', 'neonatal_mort',\n    years, 'region', labels, title\n)","50ad2849":"col_dict = {\n    'Population using at least basic drinking-water services (%)':'drinking_water',\n    'Population using at least basic sanitation services (%)':'sanitation',\n}\nyears = [2000,2006,2012,2017]\nair_wash, air_wash_vectors = country_graphing_data(complete_df, col_dict, years)\n\nlabels= {\n    'drinking_water': 'Population using at least basic drinking-water services (%)',\n    'sanitation': 'Population using at least basic sanitation services (%)',\n    'region': 'Region',\n    'year': 'Year'\n}\ntitle = 'National changes in percentage of people with access to basic drinking water and sanitation services'\nmovement_graph(\n    air_wash, air_wash_vectors, 'drinking_water', 'sanitation',\n    years, 'country', labels, title\n)","d15328bc":"air_wash_region, air_wash_region_vectors = group_data_by_region(air_wash, 'drinking_water', 'sanitation')\n\nlabels= {\n    'drinking_water': 'Population using at least basic drinking-water services (%)',\n    'sanitation': 'Population using at least basic sanitation services (%)',\n    'region': 'Region',\n    'year': 'Year'\n}\ntitle = 'Regional changes in percentage of people with access to basic drinking water and sanitation services'\nmovement_graph(\n    air_wash_region, air_wash_region_vectors, 'drinking_water', 'sanitation',\n    years, 'region', labels, title\n)","0b553c20":"col_dict = {\n        'Total (recorded+unrecorded) alcohol per capita (15+) consumption':'alcohol',\n        'Age-standardized prevalence of current tobacco smoking among persons aged 15 years and older':'tobacco',\n    }\nyears = [2000,2006,2012,2017]\nsubstances, substances_vectors = country_graphing_data(complete_df, col_dict, years)\n\nlabels= {\n    'alcohol': 'Alcohol consumption per capita ages 15+',\n    'tobacco': 'Tobacco use rate ages 15+ (age-standardised rate)',\n    'region': 'Region',\n    'year': 'Year'\n}\ntitle = 'National changes in alcohol and tobacco usage'\nmovement_graph(\n    substances, substances_vectors, 'alcohol', 'tobacco',\n    years, 'country', labels, title\n)","4f743e05":"substances_region, substances_region_vectors = group_data_by_region(substances, 'alcohol', 'tobacco')\n\nlabels= {\n    'alcohol': 'Alcohol consumption per capita ages 15+',\n    'tobacco': 'Tobacco use rate ages 15+ (age-standardised rate)',\n    'region': 'Region',\n    'year': 'Year'\n}\ntitle = 'Regional changes in alcohol and tobacco usage'\nmovement_graph(\n    substances_region, substances_region_vectors, 'alcohol', 'tobacco',\n    years, 'region', labels, title\n)","77fbe03e":"complete_df","07a0e84b":"col_dict = {\n        'Crude suicide rates (per 100 000 population)':'tb',\n        'Probability (%) of dying between age 30 and exact age 70 from any of cardiovascular disease, cancer, diabetes, or chronic respiratory disease':'malaria',\n    }\nyears = [2000,2005,2010,2015]\nsubstances, substances_vectors = country_graphing_data(complete_df, col_dict, years)\n\nlabels= {\n    'tb': 'tb consumption per capita ages 15+',\n    'malaria': 'mal use rate ages 15+ (age-standardised rate)',\n    'region': 'Region',\n    'year': 'Year'\n}\ntitle = 'National changes in tb and mal usage'\nmovement_graph(\n    substances, substances_vectors, 'malaria', 'tb',\n    years, 'country', labels, title\n)","6eceb188":"substances_region, substances_region_vectors = group_data_by_region(substances, 'tb', 'malaria')\n\nlabels= {\n    'tb': 'Alcohol consumption per capita ages 15+',\n    'malaria': 'Tobacco use rate ages 15+ (age-standardised rate)',\n    'region': 'Region',\n    'year': 'Year'\n}\ntitle = 'Regional changes in alcohol and tobacco usage'\nmovement_graph(\n    substances_region, substances_region_vectors, 'malaria', 'tb',\n    years, 'region', labels, title\n)","09504f2b":"<div style=\"font-size:15px; font-family:verdana\">\n\nNote: Missing values in the segments that follow were imputed using linear interpolation combined with padding and backfilling to create the most complete graphs possible.\n\n<\/div>","f47e7eca":"<div style=\"font-size:15px; font-family:verdana\">\n\nBack and forth movement for some countries but overall a clear trend towards moderately increasing numbers of doctors per capita and a substantial reduction in neonatal mortality.\n    \n<\/div>","eb3f0e3f":"<h1 style=\"font-family:verdana;\"> <center>Medical Personnel<\/center> <\/h1>","1a63286d":"<h1 style=\"font-family:verdana;\"> <center>Drinking Water and Sanitation Services<\/center> <\/h1>\n\n<div style=\"font-size:15px; font-family:verdana\">\n\nFairly chaotic movement by a lot of countries but with a general trend towards the top right that becomes very apparent in the region level chart.\n    \n<\/div>","988f8ad2":"<div style=\"font-size:15px; font-family:verdana\">\n\nUsing regional data makes the general movement patterns more clear.\n    \n<\/div>","7e9cfbef":"<h1 style=\"font-family:verdana;\"> <center>Setup<\/center> <\/h1>\n","d2a768b9":"<div style=\"font-size:15px; font-family:verdana\">\n    \nWe replace the appropriate attribute with our own colour scheme.\n    \n<\/div>","0661884b":"<div style=\"font-size:15px; font-family:verdana\">\n    \nWe will be using the plotly_dark template throughout this notebook. <br><br>\n\nIf you are not on Windows, the country graphs will be displaying flags to identify each datapoint. Windows 10 does not support country flag emojis, so on Windows these characters will display as alpha-2 country codes. We want a colour palette that white text is more legible against than the plotly_dark default, so we define our own. <br><br>\n\nPlotly figures and templates are trees of attributes. If you want to change a behaviour and even googling isn't yielding a solution, you can look through this structure for an attribute which might control this behaviour. <br><br>\n\nA portion of the figure structure is shown below.\n<\/div>","f96b428f":"<div style=\"font-size:15px; font-family:verdana\">\n\nLife expectancies universally increased between 2000 and 2019. Africa saw the largest increases but this could be part of the general pattern that a lower life expectancy in 2000 was associated with a larger increase in life expectancy between 2000 and 2019. <br><br>\n\nMoving vertically downwards on the graph means that a lower proportion of life will be lived at full health. Between 2000 and 2010 movement was primarily horizontal, but between 2010 and 2019 a distinct downward tilt is introduced to the majority of the paths. This downward movement is particularly pronounced at higher life expectancies.\n    \n<\/div>","fb569a90":"<div style=\"font-size:15px; font-family:verdana\">\n\nExponential relationships between medical personnel and early life\/maternal mortality. Getting those first 15 doctors\/50 nursing personnel per 10,000 is associated with hugely decreased rates of maternal and early life mortality. Greatly diminished returns beyond this point but still a positive relationship.\n    \n<\/div>","580a2b19":"<h1 style=\"font-family:verdana;\"> <center>Custom Plotly Charts to Visualise <br>Changes in WHO Indicators from 1999-2019<\/center> <\/h1>\n\n<div style=\"font-size:15px; font-family:verdana\">\n    \nThis dataset contains data on a number of indicators from the World Health Organisation. Thanks to <a href=\"https:\/\/www.kaggle.com\/utkarshxy\">Zeus<\/a> for making the information available in this form. A full description of the dataset contents is available <a href=\"https:\/\/www.kaggle.com\/utkarshxy\/who-worldhealth-statistics-2020-complete\">here<\/a>. <br><br>\n\nThe aim of this notebook is to give an example of what can be done with Plotly if you're happy to play around with the underlying structure. In this case we create a chart that can be used to visualise time series data for two variables. In doing so we'll reveal some trends in world health.<br><br>\n\nAll code cells and explanations of what we're doing with Plotly are currently visible -\n    \n<p style=\"font-size:18px\">To streamline the notebook by hiding all code cells and markdown cells explaining code, click the button below! <\/p><br> \n\nPlease spare an upvote if you like or learn something useful from this kernel \ud83d\ude04\n<\/div>","5545720a":"<h1 style=\"font-family:verdana;\"> <center>Tobacco and Alcohol Consumption<\/center> <\/h1>\n\n<div style=\"font-size:15px; font-family:verdana\">\n\nAlcohol usage has remained fairly constant aside from a notable decline among European countries. Tobacco usage has almost universally declined.    \n<\/div>","9025c571":"<div style=\"font-size:15px; font-family:verdana\">\n\nWe will be making multiple graphs of the same type, so we define a function that will save time in the future. <br><br>\n\nMost attributes have self-explanatory names. <br><br>\n\nfig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] sets the time between movements when the play button is pressed. If anyone knows of a way to set the wait time before the initial movement to a separate value please let me know! \n    \n<\/div>","12ef95dc":"<div style=\"font-size:15px; font-family:verdana\">\n\nTo get a more spread out view here is the same graph using the log of both variables.\n    \n<\/div>","7446a112":"<div style=\"font-size:15px; font-family:verdana\">\n    \nEach indicator variable is stored in a separate csv, we combine these csv's into one dataframe. There will be a lot of null values, but it will be easier to slice and query this dataframe than to work with so many separate objects.\n    \n<\/div>","144f1fa9":"# <h1 style=\"font-family:verdana;\"> <center>Life Expectancy<\/center> <\/h1>\n\n<div style=\"font-size:15px; font-family:verdana\">\n    \nLife expectancy at birth for a given year is the number of years a person born in that year is expected to live. <br><br>\n\nHealth-adjusted life expectancy, HALE, is a measure that accounts for quality of life. The value of years are weighted based on the expected distribution of health states they will be lived in. A year in full health is worth 1 year, a year in a state of less than full health is worth less than 1 year. The weighting given to a health state is based on how severely it limits one's ability to perform their usual activities. <br><br>\n\nThe following graphs show both HALE and life expectancy. Life expectancy is on the x-axis and HALE\/life expectancy, % of healthy years in life expectancy, is on the y-axis.\n<\/div>","70409957":"<div style=\"font-size:15px; font-family:verdana\">\n\nWhen text is being used to mark points, 'Aa' covers the coloured circles in the legend. This behaviour seems unavoidable without removing text but the piece of code below is a workaround that will hide this text.\n    \n<\/div>","98dfcaa5":"<div style=\"font-size:15px; font-family:verdana\">\n\nLet's look at the trends we've observed based on the life expectancy countries had in 2000.\n\n<p><div style=\"color:#073AC5\">&#9632;<\/div>Life expectancy in 2000 had little relation to healthy year % in 2000<\/p>\n\n<p><div style=\"color:#AE3295\">&#9632;<\/div>As we thought when looking at the graph showing country movement, a higher starting life expectancy is associated with a lower ratio of HALE change to life expectancy change. This indicates that later years added to life expectancy are more likely to be lived in a more limiting state of health. The overall '% years healthy' value will be decreasing in the life expectancy range where the green line lies beneath the blue line.<\/p>\n\n<p><div style=\"color:#00A34C\">&#9632;<\/div>Countries that started with lower life expectancies saw substantially greater increases in life expectancy.<\/p>\n\n<\/div>"}}