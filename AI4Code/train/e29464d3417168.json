{"cell_type":{"1c74a506":"code","5b8e6efb":"code","0481a428":"code","7508a48b":"code","a5b3da4b":"code","634bdbcd":"code","13dd75c8":"code","009385fa":"code","6d882e95":"code","1e985562":"code","c5e0393c":"code","db6857f6":"code","cee35611":"code","a9c65d0a":"code","3a012b43":"code","2a582c90":"code","63b4684a":"code","2b4427b3":"code","6ea42053":"code","2dd90e02":"code","b804f41f":"code","f1964f76":"code","ec72ae80":"code","5c94047a":"code","818eae19":"code","ca0f4b0a":"code","c1b4b3a4":"code","5eddd8f6":"code","3a7c931d":"markdown","bfdfc7d5":"markdown","41aad390":"markdown"},"source":{"1c74a506":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport gc\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport gc\nfrom lightgbm.sklearn import LGBMClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score,accuracy_score\nfrom sklearn.model_selection import KFold,StratifiedKFold\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import RobustScaler,PolynomialFeatures,MinMaxScaler,Binarizer\nfrom sklearn.decomposition import PCA\nimport warnings\n%matplotlib inline\nwarnings.filterwarnings('ignore')\ngc.enable()\n# Any results you write to the current directory are saved as output.","5b8e6efb":"#Dataset view\npath1= \"..\/input\/\"\ndata_files=list(os.listdir(path1))\ndf_files=pd.DataFrame(data_files,columns=['File_Name'])\ndf_files['Size_in_MB']=df_files.File_Name.apply(lambda x:round(os.stat(path1+x).st_size\/(1024*1024),2))\ndf_files","0481a428":"#All functions\n\n#FUNCTION FOR PROVIDING FEATURE SUMMARY\ndef feature_summary(df_fa):\n    print('DataFrame shape')\n    print('rows:',df_fa.shape[0])\n    print('cols:',df_fa.shape[1])\n    col_list=['Null','Unique_Count','Data_type','Max\/Min','Mean','Std','Skewness','Sample_values']\n    df=pd.DataFrame(index=df_fa.columns,columns=col_list)\n    df['Null']=list([len(df_fa[col][df_fa[col].isnull()]) for i,col in enumerate(df_fa.columns)])\n    #df['%_Null']=list([len(df_fa[col][df_fa[col].isnull()])\/df_fa.shape[0]*100 for i,col in enumerate(df_fa.columns)])\n    df['Unique_Count']=list([len(df_fa[col].unique()) for i,col in enumerate(df_fa.columns)])\n    df['Data_type']=list([df_fa[col].dtype for i,col in enumerate(df_fa.columns)])\n    for i,col in enumerate(df_fa.columns):\n        if 'float' in str(df_fa[col].dtype) or 'int' in str(df_fa[col].dtype):\n            df.at[col,'Max\/Min']=str(round(df_fa[col].max(),2))+'\/'+str(round(df_fa[col].min(),2))\n            df.at[col,'Mean']=df_fa[col].mean()\n            df.at[col,'Std']=df_fa[col].std()\n            df.at[col,'Skewness']=df_fa[col].skew()\n        df.at[col,'Sample_values']=list(df_fa[col].unique())\n           \n    return(df.fillna('-'))\n\ndef drop_corr_col(df_corr):\n    upper = df_corr.where(np.triu(np.ones(df_corr.shape),\n                          k=1).astype(np.bool))\n    # Find index of feature columns with correlation greater than 0.999\n    to_drop = [column for column in upper.columns if any(upper[column] > 0.999)]\n    return(to_drop)\n\ndef cnt_unique(df):\n    return(len(df.unique()))","7508a48b":"%%time\n#Reading POS CASH balance data\npos_cash=pd.read_csv(path1+'POS_CASH_balance.csv')\nprint('POS_CASH_balance set reading complete...')","a5b3da4b":"pos_cash_fs=feature_summary(pos_cash)","634bdbcd":"pos_cash_fs","13dd75c8":"pos_cash.sort_values(['SK_ID_CURR','SK_ID_PREV']).head(30)","009385fa":"pos_cash['MONTHS_BALANCE']=pos_cash['MONTHS_BALANCE'].abs()","6d882e95":"pos_cash['CALC_PERC_REMAINING_INSTAL']=pos_cash['CNT_INSTALMENT_FUTURE']\/pos_cash['CNT_INSTALMENT']\npos_cash['CALC_CNT_REMAINING_INSTAL']=pos_cash['CNT_INSTALMENT']-pos_cash['CNT_INSTALMENT_FUTURE']\npos_cash['CALC_DAYS_WITHOUT_TOLERANCE']=pos_cash['SK_DPD']-pos_cash['SK_DPD_DEF']","1e985562":"pos_cash['NAME_CONTRACT_STATUS']=pos_cash['NAME_CONTRACT_STATUS'].apply(lambda x: str(x).replace(\" \",\"_\")) \ndummy=pd.get_dummies(pos_cash['NAME_CONTRACT_STATUS'],prefix='DUM_NAME_CONTRACT_STATUS')","c5e0393c":"dummy.head()","db6857f6":"pos_cash_f=pd.concat([pos_cash.drop(['NAME_CONTRACT_STATUS'],axis=1),dummy],axis=1)","cee35611":"pos_cash_f.head()","a9c65d0a":"#DEFINING AGGREGATION RULES AND CREATING LIST OF NEW FEATURES\npos_cash_cols=[x for x in list(pos_cash_f.columns) if x not in ['SK_ID_CURR']]\npos_cash_agg={}\npos_cash_name=['SK_ID_CURR','SK_ID_PREV']\nfor col in pos_cash_cols:\n    if 'SK_ID_PREV'==col:\n        pos_cash_agg[col]=['count']\n        pos_cash_name.append(col+'_'+'count')\n    elif 'MONTHS_BALANCE'==col:\n        pos_cash_agg[col]=['max','min','count']\n        pos_cash_name.append(col+'_'+'max')\n        pos_cash_name.append(col+'_'+'min')\n        pos_cash_name.append(col+'_'+'count')\n    elif 'DUM_' in col:\n        pos_cash_agg[col]=['sum','mean','max','min']\n        pos_cash_name.append(col+'_'+'sum')\n        pos_cash_name.append(col+'_'+'mean')\n        pos_cash_name.append(col+'_'+'max')\n        pos_cash_name.append(col+'_'+'min')\n    elif 'CNT_' in col:\n        pos_cash_agg[col]=['max','min','sum','count']\n        pos_cash_name.append(col+'_'+'max')\n        pos_cash_name.append(col+'_'+'min')\n        pos_cash_name.append(col+'_'+'sum')\n        pos_cash_name.append(col+'_'+'count')\n    else:\n        pos_cash_agg[col]=['sum','mean']\n        pos_cash_name.append(col+'_'+'sum')\n        pos_cash_name.append(col+'_'+'mean')","3a012b43":"pos_cash_f.shape","2a582c90":"%%time\n#AGGREGATING DATA ON SK_ID_CURR,SK_ID_PREV USING RULES CREATED IN PREVIOUS STEP\npos_cash_ff=pos_cash_f.groupby(['SK_ID_CURR','SK_ID_PREV']).aggregate(pos_cash_agg)\npos_cash_ff.reset_index(inplace=True)\npos_cash_ff.columns=pos_cash_name","63b4684a":"#DEFINING RULES FOR SECOND AGGREGATION ON SK_ID_CURR\npos_cash_cols=[x for x in list(pos_cash_ff.columns) if x not in ['SK_ID_CURR','SK_ID_PREV']]\npos_cash_agg={}\npos_cash_name=['SK_ID_CURR']\nfor col in pos_cash_cols:\n    if '_sum'==col:\n        pos_cash_agg[col]=['sum']\n        pos_cash_name.append(col)\n    elif '_mean' in col:\n        pos_cash_agg[col]=['mean']\n        pos_cash_name.append(col)\n    elif '_max' in col:\n        pos_cash_agg[col]=['max']\n        pos_cash_name.append(col)\n    elif '_min' in col:\n        pos_cash_agg[col]=['min']\n        pos_cash_name.append(col)\n    elif '_count' in col:\n        pos_cash_agg[col]=['sum']\n        pos_cash_name.append(col)\n    else:\n        pos_cash_agg[col]=['sum']\n        pos_cash_name.append(col)","2b4427b3":"%%time\n#AGGREGATING DATA ON SK_ID_CURR,SK_ID_PREV USING RULES CREATED IN PREVIOUS STEP\npos_cash_fg=pos_cash_ff.groupby(['SK_ID_CURR']).aggregate(pos_cash_agg)\npos_cash_fg.reset_index(inplace=True)\npos_cash_fg.columns=pos_cash_name","6ea42053":"pos_cash_fg.head()","2dd90e02":"pos_cash_fg.shape","b804f41f":"del pos_cash,pos_cash_f,pos_cash_ff\ngc.collect()","f1964f76":"train=pd.read_csv(path1+'application_train.csv',usecols=['SK_ID_CURR','TARGET'])","ec72ae80":"df_final=train.join(pos_cash_fg.set_index('SK_ID_CURR'),on='SK_ID_CURR',lsuffix='_AP', rsuffix='_POS')","5c94047a":"df_final.shape","818eae19":"df_pos=df_final.drop(['SK_ID_CURR','TARGET'],axis=1)","ca0f4b0a":"%%time\ntrain_X,test_X,train_y,test_y=train_test_split(df_pos,train['TARGET'],random_state=200)\nmodel =LGBMClassifier(learning_rate=0.05,n_estimators=200,n_jobs=-1,reg_alpha=0.1,min_split_gain=.1,verbose=-1)\nmodel.fit(train_X,train_y)\nscore2=roc_auc_score(test_y,model.predict_proba(test_X)[:,1])\nprint(score2)","c1b4b3a4":"%%time\n#FEATURE EXCLUSION\nscore=0\nscore1=0\nscore2=0\ndrop_list=[]\ncol_list=list(df_pos.columns)\n\n\nwhile True:\n    score1=0\n    score2=0\n    for i,col in enumerate(col_list):\n        col_list.remove(col)\n        train_X,test_X,train_y,test_y=train_test_split(df_pos[col_list],train['TARGET'],random_state=200)\n        model =LGBMClassifier(learning_rate=0.05,n_estimators=200,n_jobs=-1,reg_alpha=0.1,min_split_gain=.1,verbose=-1)\n        model.fit(train_X,train_y)\n        score2=roc_auc_score(test_y,model.predict_proba(test_X)[:,1])\n        col_list.extend([col])\n#        dummy_1.at[i,'score']=score2\n        if score1<score2:\n            score1=score2\n            col1=col\n#        print('dropped col',col,':',score2)\n    if score<score1:\n        score=score1\n        print('dropped col',col1,':',score)\n        drop_list.extend([col1])\n        col_list.remove(col1)\n    else:\n        print('Best score achieved')\n        break\nprint(drop_list)\nprint('best score:',score)","5eddd8f6":"# %%time\n# #FORWARD FEATURE SELCTION \n# score=0\n# score1=0\n# score2=0\n# select_list=[]\n# col_list=list(df_pos.columns)  \n# k=0\n\n\n# while True:\n#     score1=0\n#     score2=0\n#     temp_list=select_list\n#     for i,col in enumerate(col_list):\n#         if k==0:\n#             train_X,test_X,train_y,test_y=train_test_split(df_pos[col],train['TARGET'],random_state=200)\n#             model =LGBMClassifier(learning_rate=0.05,n_estimators=200,n_jobs=-1,reg_alpha=0.1,min_split_gain=.1,verbose=-1)\n#             model.fit(np.array(train_X).reshape(-1,1),train_y)\n#             score2=roc_auc_score(test_y,model.predict_proba(np.array(test_X).reshape(-1,1))[:,1])\n#         else:\n#             temp_list.extend([col])\n#             train_X,test_X,train_y,test_y=train_test_split(df_pos[temp_list],train['TARGET'],random_state=200)\n#             model =LGBMClassifier(learning_rate=0.05,n_estimators=200,n_jobs=-1,reg_alpha=0.1,min_split_gain=.1,verbose=-1)\n#             model.fit(train_X,train_y)\n#             score2=roc_auc_score(test_y,model.predict_proba(test_X)[:,1])\n#             temp_list.remove(col)\n#         if score1<=score2:\n#             score1=score2\n#             col1=col\n# #        print('dropped col',col,':',score2)\n#     k=k+1\n#     if score<=score1:\n#         score=score1\n#         print('select col',col1,':',score)\n#         select_list.extend([col1])\n#         col_list.remove(col1)\n#     else:\n#         print('Best score achieved')\n#         break\n    \n# print(select_list)\n# print('best score:',score)","3a7c931d":"<img src=\"https:\/\/storage.googleapis.com\/kaggle-media\/competitions\/home-credit\/home_credit.png\" alt=\"Count of Operation\" height=\"800\" width=\"800\"><\/img>","bfdfc7d5":"* select col MONTHS_BALANCE_max : 0.5586004188463992\n* select col SK_DPD_DEF_mean : 0.5767441127822774\n* select col CNT_INSTALMENT_FUTURE_max : 0.587664251274978\n* select col MONTHS_BALANCE_min : 0.5987828728472335\n* select col CALC_PERC_REMAINING_INSTAL_sum : 0.6017536677014977\n* select col CALC_CNT_REMAINING_INSTAL_max : 0.6032922207850415\n* select col DUM_NAME_CONTRACT_STATUS_Returned_to_the_store_sum : 0.6034497206321445\n* select col CALC_DAYS_WITHOUT_TOLERANCE_mean : 0.6041772545912447\n* select col CALC_PERC_REMAINING_INSTAL_mean : 0.6047685824580172\n* select col DUM_NAME_CONTRACT_STATUS_Returned_to_the_store_mean : 0.6047816722637606\n* select col CNT_INSTALMENT_FUTURE_count : 0.6051233673114507\n* select col DUM_NAME_CONTRACT_STATUS_Active_max : 0.6051609776825202\n* select col DUM_NAME_CONTRACT_STATUS_Demand_mean : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_XNA_min : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_XNA_max : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_XNA_mean : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_XNA_sum : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_Returned_to_the_store_min : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_Returned_to_the_store_max : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_Demand_min : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_Demand_max : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_Completed_min : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_Canceled_min : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_Canceled_max : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_Canceled_mean : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_Canceled_sum : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_Approved_min : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_Amortized_debt_min : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_Amortized_debt_max : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_Amortized_debt_mean : 0.6053183463120796\n* select col DUM_NAME_CONTRACT_STATUS_Amortized_debt_sum : 0.6053183463120796\n* Best score achieved\n* ['MONTHS_BALANCE_max', 'SK_DPD_DEF_mean', 'CNT_INSTALMENT_FUTURE_max', 'MONTHS_BALANCE_min', 'CALC_PERC_REMAINING_INSTAL_sum', 'CALC_CNT_REMAINING_INSTAL_max', 'DUM_NAME_CONTRACT_STATUS_Returned_to_the_store_sum', 'CALC_DAYS_WITHOUT_TOLERANCE_mean', 'CALC_PERC_REMAINING_INSTAL_mean', 'DUM_NAME_CONTRACT_STATUS_Returned_to_the_store_mean', 'CNT_INSTALMENT_FUTURE_count', 'DUM_NAME_CONTRACT_STATUS_Active_max', 'DUM_NAME_CONTRACT_STATUS_Demand_mean', 'DUM_NAME_CONTRACT_STATUS_XNA_min', 'DUM_NAME_CONTRACT_STATUS_XNA_max', 'DUM_NAME_CONTRACT_STATUS_XNA_mean', 'DUM_NAME_CONTRACT_STATUS_XNA_sum', 'DUM_NAME_CONTRACT_STATUS_Returned_to_the_store_min', 'DUM_NAME_CONTRACT_STATUS_Returned_to_the_store_max', 'DUM_NAME_CONTRACT_STATUS_Demand_min', 'DUM_NAME_CONTRACT_STATUS_Demand_max', 'DUM_NAME_CONTRACT_STATUS_Completed_min', 'DUM_NAME_CONTRACT_STATUS_Canceled_min', 'DUM_NAME_CONTRACT_STATUS_Canceled_max', 'DUM_NAME_CONTRACT_STATUS_Canceled_mean', 'DUM_NAME_CONTRACT_STATUS_Canceled_sum', 'DUM_NAME_CONTRACT_STATUS_Approved_min', 'DUM_NAME_CONTRACT_STATUS_Amortized_debt_min', 'DUM_NAME_CONTRACT_STATUS_Amortized_debt_max', 'DUM_NAME_CONTRACT_STATUS_Amortized_debt_mean', 'DUM_NAME_CONTRACT_STATUS_Amortized_debt_sum']\n* best score: 0.6053183463120796\n* CPU times: user 9h 59min 47s, sys: 2min 52s, total: 10h 2min 39s\n* Wall time: 2h 33min 46s","41aad390":"* Base value 0.6031624375062186"}}