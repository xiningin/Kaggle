{"cell_type":{"182beaab":"code","209450ee":"code","b0882de5":"code","adc2da2b":"code","65975221":"code","c3418574":"code","2f97d396":"code","2a776820":"code","a3df50a2":"code","60970ced":"code","f730a190":"code","6943a7c6":"code","c79019de":"code","bef98e67":"code","0771c04d":"code","58b9b4d5":"code","7498daaa":"code","4bcffc3d":"code","954f8842":"code","5b6ecfea":"code","1251a63f":"code","2b133fd2":"code","5d6385dc":"code","c2563d0f":"code","657d6fa1":"code","57adf592":"code","e6c849d2":"code","de3650bb":"code","f74182fe":"markdown","ae1829ef":"markdown","e26f6aee":"markdown"},"source":{"182beaab":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport sklearn.utils\nimport sklearn\nimport matplotlib.pyplot as plt\nimport warnings\n\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import *\nfrom sklearn.model_selection import *\nfrom sklearn.metrics import *\n\nwarnings.filterwarnings('ignore')","209450ee":"train_data = pd.read_csv(\"..\/input\/tabular-playground-series-nov-2021\/train.csv\")\ntrain_data.head()","b0882de5":"test_data = pd.read_csv(\"..\/input\/tabular-playground-series-nov-2021\/test.csv\") ","adc2da2b":"train_data.describe()","65975221":"train_data.info()","c3418574":"train_data.isnull().sum().sort_values(ascending = False)","2f97d396":"test_data.isnull().sum().sort_values(ascending = False)","2a776820":"train_data[\"target\"].value_counts(normalize = True)*100","a3df50a2":"test_correlation = train_data[0:200000].corr()\nplt.figure(figsize=(24,24))\nsns.heatmap(test_correlation, cmap='Reds')","60970ced":"# cols = ['f'+str(i) for i in range(100)]\n\ni = 1\nplt.figure()\nfig, ax = plt.subplots(10, 5,figsize=(24, 28))\nfor feature in cols[:50]:\n    plt.subplot(10, 5,i)\n    sns.histplot(train_data[feature],color=\"red\", kde=True,bins=100, label=feature)\n    plt.xlabel(feature, fontsize=9); plt.legend()\n    i += 1\nplt.show()","f730a190":"i = 1\nplt.figure()\nfig, ax = plt.subplots(10, 5,figsize=(24, 28))\nfor feature in cols[50:100]:\n    plt.subplot(10, 5,i)\n    sns.histplot(train_data[feature],color=\"blue\", kde=True,bins=100, label=feature)\n    plt.xlabel(feature, fontsize=9); plt.legend()\n    i += 1\nplt.show()","6943a7c6":"train_target = pd.DataFrame(train_data[\"target\"], columns = ['target'])\ntrain_target.head()","c79019de":"train_data = train_data.drop(['target'],axis=1)","bef98e67":"cols = ['f'+str(i) for i in range(100)]","0771c04d":"SC = StandardScaler()\ntrain_data[cols] = SC.fit_transform(train_data[cols])\ntest_data[cols] = SC.fit_transform(test_data[cols])","58b9b4d5":"X_train , X_test , y_train , y_test = train_test_split(train_data[cols],train_target, test_size = 0.25, random_state = 0,shuffle=True)","7498daaa":"# parameters = [{'penalty': ['l2'],\n#                'solver': ['liblinear'],\n#                'max_iter': [100,200,300,500,600,800,900],\n#                'multi_class': ['auto', 'ovr']},\n              \n#               {'penalty': ['elasticnet'],\n#                'solver': ['saga'],\n#                'l1_ratio':[1.0,0.0,0.25,0.50],\n#                'max_iter': [100,200,300,500,600,800,900],\n#                'multi_class': ['auto', 'ovr', 'multinomial']},\n              \n#              {'penalty': ['l2', 'none'],\n#                'solver': ['newton-cg',],\n#                'max_iter': [100,200,300,500,600,800,900],\n#                'multi_class': ['auto', 'ovr', 'multinomial']},\n              \n#              {'penalty': ['l2','none'],\n#                'solver': ['lbfgs'],\n#                'max_iter': [100,200,300,500,600,800,900],\n#                'multi_class': ['auto', 'ovr', 'multinomial']},\n             \n#              {'penalty': ['l2','none'],\n#                'solver': ['sag'],\n#                'max_iter': [100,200,300,500,600,800,900],\n#                'multi_class': ['auto', 'ovr', 'multinomial']}\n#              ]","4bcffc3d":"log_reg = LogisticRegression(random_state=0)","954f8842":"# grid_search_model = GridSearchCV(estimator = log_reg,\n#                            param_grid = parameters,\n#                            scoring = 'accuracy',\n#                            cv = 5,\n#                            n_jobs = -1)","5b6ecfea":"# grid_search_model.fit(X_train, y_train.values.ravel())","1251a63f":"# best_accuracy = grid_search_model.best_score_\n# print(\"Best Accuracy: {:.2f} %\".format(best_accuracy*100))","2b133fd2":"print(grid_search_model.best_params_)","5d6385dc":"test_data[cols]","c2563d0f":"ids = test_data['id']","657d6fa1":"Result = grid_search_model.predict_proba(test_data[cols])[:,1]","57adf592":"Result = pd.DataFrame(Result, columns=['target'])","e6c849d2":"Result = pd.concat([ids,Result],axis=1)","de3650bb":"Result.to_csv(\"Result_4.csv\",index=False)","f74182fe":"# EDA","ae1829ef":"# Data Prep","e26f6aee":" Coming Back Soon with better results :)\n if you find this notebook usefull dont forget to upvote it \n Good Luck "}}