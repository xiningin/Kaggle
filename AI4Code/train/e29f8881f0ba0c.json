{"cell_type":{"5a375dc3":"code","f84333a0":"code","f20e30eb":"code","37def9b5":"code","5e8cbda7":"code","22d7767e":"code","f8f4e1fc":"code","1513f63d":"code","df386711":"code","9356513a":"code","88fb881b":"code","a22f6046":"code","08e428b0":"code","11501e83":"code","ddbe9c43":"code","5fbf9fdb":"markdown","09e980d6":"markdown"},"source":{"5a375dc3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nfrom sklearn import tree, ensemble, metrics, linear_model, preprocessing, model_selection, feature_selection\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import cluster, preprocessing, linear_model, tree, model_selection, feature_selection\nfrom sklearn import base, ensemble, decomposition, metrics, pipeline, datasets, impute\nfrom skopt import gp_minimize, space, gbrt_minimize, dummy_minimize, forest_minimize\nfrom functools import partial\nimport os\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cb\nfrom sklearn import ensemble, preprocessing, tree, model_selection, feature_selection, pipeline, metrics, svm\nfrom imblearn import under_sampling, over_sampling, combine\nfrom imblearn import pipeline as imb_pipeline\nfrom imblearn import ensemble as imb_ensemble\nfrom sklearn.model_selection import StratifiedKFold\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f84333a0":"# Create class which performs Label Encoding - if required\nclass categorical_encoder:\n    def __init__(self, columns, kind = 'label', fill = True):\n        self.kind = kind\n        self.columns = columns\n        self.fill = fill\n        \n    def fit(self, X):\n        self.dict = {}\n        self.fill_value = {}\n        \n        for col in self.columns:\n            label = preprocessing.LabelEncoder().fit(X[col])\n            self.dict[col] = label\n            \n            # To fill\n            if self.fill:\n                self.fill_value[col] = X[col].mode()[0]\n                X[col] = X[col].fillna(self.fill_value[col])\n                \n        print('Label Encoding Done for {} columns'.format(len(self.columns)))\n        return self\n    def transform(self, X):\n        for col in self.columns:\n            if self.fill:\n                X[col] = X[col].fillna(self.fill_value[col])\n                \n            X.loc[:, col] = self.dict[col].transform(X[col])\n        print('Transformation Done')\n        return X\n\ndef missing(df):\n    print(df.isna().sum().sort_values(ascending = False)*100\/df.shape[0])","f20e30eb":"train = pd.read_csv(r'\/kaggle\/input\/janatahack-healthcare-analytics-part-2\/train.csv')\ntest = pd.read_csv(r'\/kaggle\/input\/janatahack-healthcare-analytics-part-2\/test.csv')","37def9b5":"train.head(2)","5e8cbda7":"train['Type of Admission'].value_counts()","22d7767e":"def preprocess_data(data):\n    ### Create New Features\n    # For Age\n    age_dict = {'0-10': 5,\n               '11-20': 15,\n               '21-30': 25,\n               '31-40': 35,\n               '41-50': 45,\n               '51-60': 55,\n               '61-70': 65,\n               '71-80': 75,\n               '81-90': 85,\n               '91-100': 95}\n    data['Age'] = data['Age'].replace(age_dict)\n    \n    # Severity of Illness\n    sev_dict = {'Minor': 0,\n               'Moderate': 1,\n               'Extreme': 2}\n    data['Severity of Illness'] = data['Severity of Illness'].replace(sev_dict)\n    \n    # Type of Admission\n    ad_dict = {'Trauma': 0,\n              'Emergency': 1,\n              'Urgent': 2}\n    data['Type of Admission'] = data['Type of Admission'].replace(ad_dict)\n    return data","f8f4e1fc":"'''cat_text = ['Hospital_type_code', 'Hospital_region_code', 'Department', 'Ward_Type', 'Ward_Facility_Code',\n           'Type of Admission', 'Severity of Illness', 'Age']'''\ncat_text = ['Hospital_type_code', 'Hospital_region_code', 'Department', 'Ward_Type', 'Ward_Facility_Code']\n# Ideas - Age is ordinal - encode it as such","1513f63d":"# Indicators\ntrain['which'] = 1\ntest['which'] = 0\n\n# Merge\ndata = pd.concat([train, test], axis = 0, ignore_index = True)\n\n# Operations\ndata = data.fillna(data.median())\ndata = preprocess_data(data)\nencoder = categorical_encoder(columns = cat_text, fill = False).fit(data)\ndata = encoder.transform(data)\n\n# Split Back\ntrain = data.loc[data['which'] == 1, :].drop('which', axis = 1)\ntest = data.loc[data['which'] == 0, :].drop('which', axis = 1)","df386711":"train.columns","9356513a":"X_cols = ['case_id', 'Hospital_code', 'Hospital_type_code', 'City_Code_Hospital',\n       'Hospital_region_code', 'Available Extra Rooms in Hospital',\n       'Department', 'Ward_Type', 'Ward_Facility_Code', 'Bed Grade',\n       'patientid', 'City_Code_Patient', 'Type of Admission',\n       'Severity of Illness', 'Visitors with Patient', 'Age',\n       'Admission_Deposit']\nX_cols = ['Hospital_code', 'Hospital_type_code', 'City_Code_Hospital',\n       'Hospital_region_code', 'Available Extra Rooms in Hospital',\n       'Department', 'Ward_Type', 'Ward_Facility_Code', 'Bed Grade',\n       'patientid', 'City_Code_Patient', 'Type of Admission',\n       'Severity of Illness', 'Visitors with Patient', 'Age',\n       'Admission_Deposit']\n\n\n\nX_train = train[X_cols]\ny_train = train['Stay']\n\nX_test = test.drop('Stay', axis = 1)[X_cols]","88fb881b":"#model = ensemble.RandomForestClassifier(n_estimators = 550, max_depth = 15, n_jobs = -1, max_features = .7)\nmodel = lgb.LGBMClassifier(n_estimators = 1000, max_depth = 6, learning_rate = .1)\nmodel.fit(X_train, y_train)","a22f6046":"sub = pd.DataFrame()\nsub['case_id'] = test['case_id']\nsub['Stay'] = model.predict(X_test)\nsub.to_csv('SSUB.csv', index = None)","08e428b0":"import pickle\nimport time\nfrom hyperopt import fmin, tpe, hp, STATUS_OK, Trials\n\ndef objective(x):\n    #print(x)\n    hyperparams = {'n_estimators': int(x['n_estimators']), 'max_depth': int(x['max_depth']),\n                   'learning_rate': x['learning_rate'],'max_features': x['max_features'], \n                   'min_data_in_leaf': int(x['min_data_in_leaf']), 'class_weight': x['class_weight']}\n    # split Data\n    kf = model_selection.KFold(5)\n    accuracy = []\n    for train_index, test_index in kf.split(X_train, y_train):\n        xtrain, xtest = X_train.values[train_index, :], X_train.values[test_index, :]\n        ytrain, ytest = y_train.values[train_index], y_train.values[test_index]\n        \n        model = lgb.LGBMClassifier(**hyperparams).fit(xtrain, ytrain)\n        \n        accuracy.append(metrics.accuracy_score(ytest, model.predict(xtest)))\n        \n    return -np.mean(accuracy)\n\nspace = {'n_estimators': hp.quniform('n_estimators', 50, 1000, 10),\n        'max_depth': hp.quniform('max_depth', 2, 10, 1),\n        'learning_rate': hp.uniform('learning_rate', .01, .2),\n        'max_features': hp.uniform('max_features', .1, .99),\n        'min_data_in_leaf': hp.quniform('min_data_in_leaf', 1, 50, 1),\n        'class_weight': hp.choice('class_weight', ['balanced', None])}\n\ntrials = Trials()\nresults = fmin(objective,\n    space=space,\n    algo=tpe.suggest,\n    max_evals=10,\n    trials=trials)\n\nprint(results)","11501e83":"hyperparams = {'n_estimators': int(results['n_estimators']), 'max_depth': int(results['max_depth']),\n                   'learning_rate': results['learning_rate'],'max_features': results['max_features'], \n                   'min_data_in_leaf': int(results['min_data_in_leaf']), 'class_weight': None}\n\nmodel = lgb.LGBMClassifier(**hyperparams).fit(X_train, y_train)","ddbe9c43":"sub = pd.DataFrame()\nsub['case_id'] = test['case_id']\nsub['Stay'] = model.predict(X_test)\nsub.to_csv('SSUB.csv', index = None)","5fbf9fdb":"# Hyperparameter Optimization Using Hyperopt","09e980d6":"# Contents:\n* **Simple Pipeline with Categorical Variable Handling, Model training**\n* **Tune Hyperparameters using Hyperopt**\n"}}