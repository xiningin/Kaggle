{"cell_type":{"edfe960b":"code","fd8059a8":"code","536780d9":"code","afaa9f97":"code","42a6c5ea":"code","82066d7a":"code","d0a9c6ed":"code","b1cce9ea":"code","5bf9a8d8":"code","7d7c6e26":"code","1b5621eb":"code","008de862":"code","bff0a160":"code","01be0c6a":"code","93b5270b":"code","e0e46307":"code","36c2ce09":"code","3b87fe21":"code","7151d0a9":"code","08d5b3c4":"code","46496e87":"code","ba50d4bf":"code","24c3911a":"code","2547a4de":"code","cc26cc5a":"code","933daaec":"code","00944df6":"code","db48ab13":"code","5871f480":"code","2c2779f3":"code","e48aac57":"code","185be173":"code","4b0e9cb3":"code","50187aa2":"code","284ce07e":"code","da8fca7f":"code","7b7c7de0":"code","6644c0a3":"code","242b0060":"code","b9214199":"code","7842e020":"code","9121eab9":"code","c19a3aea":"code","2855cdce":"code","d26cfc26":"code","5daa8fac":"code","83ef1ed5":"code","56decb3a":"code","0bdb1ddb":"code","5ac9a8f3":"code","f4619272":"code","3b8d9ff1":"code","f06becda":"code","cd3fa41d":"code","22cfb192":"code","17855c35":"code","b6bed330":"code","7dde4580":"code","bcda1f95":"code","57b12013":"code","42454ef2":"code","86042b6e":"code","ae90d09a":"code","0f6d9939":"code","2395e79c":"code","e45f2723":"code","e8e4cf8a":"code","4c935874":"code","f75619aa":"code","dc847acc":"code","b771d888":"code","4f30a021":"code","1821715d":"markdown","6768ddd6":"markdown","96b73e55":"markdown","1fe60c3f":"markdown","df76546b":"markdown","65e0b46a":"markdown","4512edb3":"markdown","5dd621e3":"markdown","07cf1189":"markdown","c4da43ec":"markdown","cb7c12ff":"markdown","49206ec4":"markdown","c2cb8260":"markdown","df0eadfb":"markdown","17476844":"markdown","2648f98c":"markdown","6b03cf1b":"markdown","c9cbe014":"markdown","03319387":"markdown","4d96baee":"markdown","118dece8":"markdown","e285f10b":"markdown","bd1261f5":"markdown","c4bab86c":"markdown","7ed67b7c":"markdown","69d3a547":"markdown","d1bb5541":"markdown","907b02f1":"markdown","5e07a3a2":"markdown","03c32708":"markdown","14d2318a":"markdown","3fd9b018":"markdown","f3364e51":"markdown","f221b98d":"markdown","382687b5":"markdown","3447fac1":"markdown","6efebe6b":"markdown","1fe67db3":"markdown","b002a8a5":"markdown","0cfad69e":"markdown","7f1397e3":"markdown","c51d4887":"markdown","ecf4de04":"markdown","30bff10a":"markdown","1aab6a57":"markdown","7587d537":"markdown","7bad133d":"markdown","97ef708b":"markdown","dc954a0b":"markdown","28dd5a24":"markdown","fde2f88f":"markdown","d7d3ac54":"markdown","05ee1344":"markdown","6316df38":"markdown","2230d4ef":"markdown","d8d71a6d":"markdown","778b6c9a":"markdown","7acbe76c":"markdown","001e5b3f":"markdown","2587f9d2":"markdown","43d9d048":"markdown","140707c9":"markdown","ea367dee":"markdown","289d4cbb":"markdown","7287973a":"markdown","49defb53":"markdown","b71d4214":"markdown","a251e804":"markdown","a70dc458":"markdown","5d2cab10":"markdown","58491b49":"markdown","31633d6c":"markdown","1b6e5972":"markdown","4fb734b8":"markdown","7f304519":"markdown","07e370d5":"markdown"},"source":{"edfe960b":"%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\nwarnings.filterwarnings('ignore', category=DeprecationWarning)\n\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\nimport seaborn as sns\n\nimport pylab as plot\nparams = { \n    'axes.labelsize': \"large\",\n    'xtick.labelsize': 'x-large',\n    'legend.fontsize': 20,\n    'figure.dpi': 150,\n    'figure.figsize': [25, 7]\n}\nplot.rcParams.update(params)","fd8059a8":"df = pd.read_csv('..\/input\/titanic\/train.csv')","536780d9":"print(df.shape)","afaa9f97":"df.head()","42a6c5ea":"df.describe()","82066d7a":"df['Age'] = df['Age'].fillna(df['Age'].median())","d0a9c6ed":"df.describe()","b1cce9ea":"df['Died'] = 1 - df['Survived']","5bf9a8d8":"df.groupby('Sex').agg('sum')[['Survived', 'Died']].plot(kind='bar', figsize=(15, 7),stacked=True);","7d7c6e26":"df.groupby('Sex').agg('mean')[['Survived', 'Died']].plot(kind='bar', figsize=(15, 7),stacked=True);","1b5621eb":"fig = plt.figure(figsize=(15, 7))\nsns.violinplot(x='Sex', y='Age', \n               hue='Survived', data=df, \n               split=True\n              );","008de862":"figure = plt.figure(figsize=(15, 7))\nplt.hist([df[df['Survived'] == 1]['Fare'], df[df['Survived'] == 0]['Fare']], \n         stacked=True,\n         bins = 50, label = ['Survived','Dead'])\nplt.xlabel('Fare')\nplt.ylabel('Number of passengers')\nplt.legend();","bff0a160":"plt.figure(figsize=(15, 7))\nax = plt.subplot()\n\nax.scatter(df[df['Survived'] == 1]['Age'], df[df['Survived'] == 1]['Fare'], \n            s=df[df['Survived'] == 1]['Fare'])\nax.scatter(df[df['Survived'] == 0]['Age'], df[df['Survived'] == 0]['Fare'], \n            s=df[df['Survived'] == 0]['Fare']);","01be0c6a":"ax = plt.subplot()\nax.set_ylabel('Average fare')\ndf.groupby('Pclass').mean()['Fare'].plot(kind='bar', figsize=(15, 7), ax = ax);","93b5270b":"fig = plt.figure(figsize=(15, 7))\nsns.violinplot(x='Embarked', y='Fare', hue='Survived', data=df, split=True);","e0e46307":"def status(feature):\n    print ('Processing', feature, ': ok')","36c2ce09":"def get_combined_data():\n    # reading train data\n    train = pd.read_csv('..\/input\/titanic\/train.csv')\n    \n    # reading test data\n    test = pd.read_csv('..\/input\/titanic\/test.csv')\n\n    # extracting and then removing the targets from the training data \n    targets = train.Survived\n    train.drop(['Survived'], 1, inplace=True)\n    \n\n    # merging train data and test data for future feature engineering\n    # we'll also remove the PassengerID since this is not an informative feature\n    combined = train.append(test)\n    combined.reset_index(inplace=True)\n    combined.drop(['index', 'PassengerId'], inplace=True, axis=1)\n    \n    return combined","3b87fe21":"combined = get_combined_data()","7151d0a9":"print(combined.shape)","08d5b3c4":"combined.head().T","46496e87":"titles = set()\nfor name in df['Name']:\n    titles.add(name.split(',')[1].split('.')[0].strip())","ba50d4bf":"print(titles)","24c3911a":"Title_Dictionary = {\n    \"Capt\": \"Officer\",\n    \"Col\": \"Officer\",\n    \"Major\": \"Officer\",\n    \"Jonkheer\": \"Royalty\",\n    \"Don\": \"Royalty\",\n    \"Sir\" : \"Royalty\",\n    \"Dr\": \"Officer\",\n    \"Rev\": \"Officer\",\n    \"the Countess\":\"Royalty\",\n    \"Mme\": \"Mrs\",\n    \"Mlle\": \"Miss\",\n    \"Ms\": \"Mrs\",\n    \"Mr\" : \"Mr\",\n    \"Mrs\" : \"Mrs\",\n    \"Miss\" : \"Miss\",\n    \"Master\" : \"Master\",\n    \"Lady\" : \"Royalty\"\n}\n\ndef get_titles():\n    # we extract the title from each name\n    combined['Title'] = combined['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())\n    \n    # a map of more aggregated title\n    # we map each title\n    combined['Title'] = combined.Title.map(Title_Dictionary)\n    status('Title')\n    return combined","2547a4de":"combined = get_titles()","cc26cc5a":"combined.head(10).T","933daaec":"combined[combined['Title'].isnull()]","00944df6":"print(combined.iloc[:891].Age.isnull().sum())","db48ab13":"print(combined.iloc[891:].Age.isnull().sum())","5871f480":"grouped_train = combined.iloc[:891].groupby(['Sex','Pclass','Title'])\ngrouped_median_train = grouped_train.median()\ngrouped_median_train = grouped_median_train.reset_index()[['Sex', 'Pclass', 'Title', 'Age']]","2c2779f3":"grouped_median_train.head()","e48aac57":"def fill_age(row):\n    condition = (\n        (grouped_median_train['Sex'] == row['Sex']) & \n        (grouped_median_train['Title'] == row['Title']) & \n        (grouped_median_train['Pclass'] == row['Pclass'])\n    ) \n    return grouped_median_train[condition]['Age'].values[0]\n\n\ndef process_age():\n    global combined\n    # a function that fills the missing values of the Age variable\n    combined['Age'] = combined.apply(lambda row: fill_age(row) if np.isnan(row['Age']) else row['Age'], axis=1)\n    status('age')\n    return combined","185be173":"combined = process_age()","4b0e9cb3":"def process_names():\n    global combined\n    # we clean the Name variable\n    combined.drop('Name', axis=1, inplace=True)\n    \n    # encoding in dummy variable\n    titles_dummies = pd.get_dummies(combined['Title'], prefix='Title')\n    combined = pd.concat([combined, titles_dummies], axis=1)\n    \n    # removing the title variable\n    combined.drop('Title', axis=1, inplace=True)\n    \n    status('names')\n    return combined","50187aa2":"combined = process_names()","284ce07e":"combined.head(10).T","da8fca7f":"def process_fares():\n    global combined\n    # there's one missing fare value - replacing it with the mean.\n    combined.Fare.fillna(combined.iloc[:891].Fare.mean(), inplace=True)\n    status('fare')\n    return combined","7b7c7de0":"combined = process_fares()","6644c0a3":"def process_embarked():\n    global combined\n    # two missing embarked values - filling them with the most frequent one in the train  set(S)\n    combined.Embarked.fillna('S', inplace=True)\n    # dummy encoding \n    embarked_dummies = pd.get_dummies(combined['Embarked'], prefix='Embarked')\n    combined = pd.concat([combined, embarked_dummies], axis=1)\n    combined.drop('Embarked', axis=1, inplace=True)\n    status('embarked')\n    return combined","242b0060":"combined = process_embarked()","b9214199":"combined.head(10).T","7842e020":"train_cabin, test_cabin = set(), set()\n\nfor c in combined.iloc[:891]['Cabin']:\n    try:\n        train_cabin.add(c[0])\n    except:\n        train_cabin.add('U')\n        \nfor c in combined.iloc[891:]['Cabin']:\n    try:\n        test_cabin.add(c[0])\n    except:\n        test_cabin.add('U')","9121eab9":"print(train_cabin)","c19a3aea":"print(test_cabin)","2855cdce":"def process_cabin():\n    global combined    \n    # replacing missing cabins with U (for Uknown)\n    combined.Cabin.fillna('U', inplace=True)\n    \n    # mapping each Cabin value with the cabin letter\n    combined['Cabin'] = combined['Cabin'].map(lambda c: c[0])\n    \n    # dummy encoding ...\n    cabin_dummies = pd.get_dummies(combined['Cabin'], prefix='Cabin')    \n    combined = pd.concat([combined, cabin_dummies], axis=1)\n\n    combined.drop('Cabin', axis=1, inplace=True)\n    status('cabin')\n    return combined","d26cfc26":"combined = process_cabin()","5daa8fac":"combined.head()","83ef1ed5":"def process_sex():\n    global combined\n    # mapping string values to numerical one \n    combined['Sex'] = combined['Sex'].map({'male':1, 'female':0})\n    status('Sex')\n    return combined","56decb3a":"combined = process_sex()","0bdb1ddb":"def process_pclass():\n    \n    global combined\n    # encoding into 3 categories:\n    pclass_dummies = pd.get_dummies(combined['Pclass'], prefix=\"Pclass\")\n    \n    # adding dummy variable\n    combined = pd.concat([combined, pclass_dummies],axis=1)\n    \n    # removing \"Pclass\"\n    combined.drop('Pclass',axis=1,inplace=True)\n    \n    status('Pclass')\n    return combined","5ac9a8f3":"combined = process_pclass()","f4619272":"def cleanTicket(ticket):\n    ticket = ticket.replace('.', '')\n    ticket = ticket.replace('\/', '')\n    ticket = ticket.split()\n    ticket = map(lambda t : t.strip(), ticket)\n    ticket = list(filter(lambda t : not t.isdigit(), ticket))\n    if len(ticket) > 0:\n        return ticket[0]\n    else: \n        return 'XXX'","3b8d9ff1":"tickets = set()\nfor t in combined['Ticket']:\n    tickets.add(cleanTicket(t))","f06becda":"print(len(tickets))","cd3fa41d":"def process_ticket():\n    \n    global combined\n    \n    # a function that extracts each prefix of the ticket, returns 'XXX' if no prefix (i.e the ticket is a digit)\n    def cleanTicket(ticket):\n        ticket = ticket.replace('.','')\n        ticket = ticket.replace('\/','')\n        ticket = ticket.split()\n        ticket = map(lambda t : t.strip(), ticket)\n        ticket = list(filter(lambda t : not t.isdigit(), ticket))\n        if len(ticket) > 0:\n            return ticket[0]\n        else: \n            return 'XXX'\n    \n\n    # Extracting dummy variables from tickets:\n\n    combined['Ticket'] = combined['Ticket'].map(cleanTicket)\n    tickets_dummies = pd.get_dummies(combined['Ticket'], prefix='Ticket')\n    combined = pd.concat([combined, tickets_dummies], axis=1)\n    combined.drop('Ticket', inplace=True, axis=1)\n\n    status('Ticket')\n    return combined","22cfb192":"combined = process_ticket()","17855c35":"def process_family():\n    \n    global combined\n    # introducing a new feature : the size of families (including the passenger)\n    combined['FamilySize'] = combined['Parch'] + combined['SibSp'] + 1\n    \n    # introducing other features based on the family size\n    combined['Singleton'] = combined['FamilySize'].map(lambda s: 1 if s == 1 else 0)\n    combined['SmallFamily'] = combined['FamilySize'].map(lambda s: 1 if 2 <= s <= 4 else 0)\n    combined['LargeFamily'] = combined['FamilySize'].map(lambda s: 1 if 5 <= s else 0)\n    \n    status('family')\n    return combined","b6bed330":"combined = process_family()","7dde4580":"print(combined.shape)","bcda1f95":"combined.head()","57b12013":"from sklearn.pipeline import make_pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble.gradient_boosting import GradientBoostingClassifier\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV","42454ef2":"def compute_score(clf, X, y, scoring='accuracy'):\n    xval = cross_val_score(clf, X, y, cv = 5, scoring=scoring)\n    return np.mean(xval)","86042b6e":"def recover_train_test_target():\n    global combined\n    \n    targets = pd.read_csv('..\/input\/titanic\/train.csv', usecols=['Survived'])['Survived'].values\n    train = combined.iloc[:891]\n    test = combined.iloc[891:]\n    \n    return train, test, targets","ae90d09a":"train, test, targets = recover_train_test_target()","0f6d9939":"clf = RandomForestClassifier(n_estimators=50, max_features='sqrt')\nclf = clf.fit(train, targets)","2395e79c":"features = pd.DataFrame()\nfeatures['feature'] = train.columns\nfeatures['importance'] = clf.feature_importances_\nfeatures.sort_values(by=['importance'], ascending=True, inplace=True)\nfeatures.set_index('feature', inplace=True)","e45f2723":"features.plot(kind='barh', figsize=(25, 25))","e8e4cf8a":"model = SelectFromModel(clf, prefit=True)\ntrain_reduced = model.transform(train)\nprint(train_reduced.shape)","4c935874":"test_reduced = model.transform(test)\nprint(test_reduced.shape)","f75619aa":"logreg = LogisticRegression()\nlogreg_cv = LogisticRegressionCV()\nrf = RandomForestClassifier()\ngboost = GradientBoostingClassifier()\n\nmodels = [logreg, logreg_cv, rf, gboost]","dc847acc":"for model in models:\n    print('Cross-validation of : {0}'.format(model.__class__))\n    score = compute_score(clf=model, X=train_reduced, y=targets, scoring='accuracy')\n    print('CV score = {0}'.format(score))\n    print('****')","b771d888":"# turn run_gs to True if you want to run the gridsearch again.\nrun_gs = False\n\nif run_gs:\n    parameter_grid = {\n                 'max_depth' : [4, 6, 8],\n                 'n_estimators': [50, 10],\n                 'max_features': ['sqrt', 'auto', 'log2'],\n                 'min_samples_split': [2, 3, 10],\n                 'min_samples_leaf': [1, 3, 10],\n                 'bootstrap': [True, False],\n                 }\n    forest = RandomForestClassifier()\n    cross_validation = StratifiedKFold(n_splits=5)\n\n    grid_search = GridSearchCV(forest,\n                               scoring='accuracy',\n                               param_grid=parameter_grid,\n                               cv=cross_validation,\n                               verbose=1\n                              )\n\n    grid_search.fit(train, targets)\n    model = grid_search\n    parameters = grid_search.best_params_\n\n    print('Best score: {}'.format(grid_search.best_score_))\n    print('Best parameters: {}'.format(grid_search.best_params_))\n    \nelse: \n    parameters = {'bootstrap': False, 'min_samples_leaf': 3, 'n_estimators': 50, \n                  'min_samples_split': 10, 'max_features': 'sqrt', 'max_depth': 6}\n    \n    model = RandomForestClassifier(**parameters)\n    model.fit(train, targets)","4f30a021":"output = model.predict(test).astype(int)\ndf_output = pd.DataFrame()\naux = pd.read_csv('..\/input\/titanic\/test.csv')\ndf_output['PassengerId'] = aux['PassengerId']\ndf_output['Survived'] = output\ndf_output[['PassengerId','Survived']].to_csv('submission.csv', index=False)","1821715d":"But first, let's define a print function that asserts whether or not a feature has been processed. ","6768ddd6":"## Import libraries.","96b73e55":"The Survived column is the ** target variable**. If Suvival = 1 the passenger survived, otherwise he's dead. The is the variable we're going to predict.\n\nThe other variables describe the passengers. They are the **features**.\n\n- PassengerId: and id given to each traveler on the boat\n- Pclass: the passenger class. It has three possible values: 1,2,3 (first, second and third class)\n- The Name of the passeger\n- The Sex\n- The Age\n- SibSp: number of siblings and spouses traveling with the passenger \n- Parch: number of parents and children traveling with the passenger\n- The ticket number\n- The ticket Fare\n- The cabin number \n- The embarkation. This describe three possible areas of the Titanic from which the people embark. Three possible values S,C,Q","1fe60c3f":"Let's start by importing the useful libraries.","df76546b":"Perfect. Now we have an additional column called <b>Title<\/b> that contains the information.","65e0b46a":"# II - Feature engineering","4512edb3":"Let's now see how the embarkation site affects the survival.","5dd621e3":"This function drops the Name column since we won't be using it anymore because we created a Title column.\n\nThen we encode the title values using a dummy encoding.\n","07cf1189":"This functions replaces the two missing values of Embarked with the most frequent Embarked value.","c4da43ec":"Perfect.\n\nLet's now make some charts.\n\nLet's visualize survival based on the gender.","cb7c12ff":"It seems that the embarkation C have a wider range of fare tickets and therefore the passengers who pay the highest prices are those who survive.\n\nWe also see this happening in embarkation S and less in embarkation Q.\n\nLet's now stop with data exploration and switch to the next part.","49206ec4":"As you can see : \n- there is no longer a name feature. \n- new variables (Title_X) appeared. These features are binary. \n    - For example, If Title_Mr = 1, the corresponding Title is Mr.","c2cb8260":"We will be using a Random Forest model. It may not be the best model for this task but we'll show how to tune. This work can be applied to different models.\n\nRandom Forest are quite handy. They do however come with some parameters to tweak in order to get an optimal model for the prediction task.\n\nWe'll use the full train set.","df0eadfb":"# III - Modeling","17476844":"![energy](.\/images\/article_1\/1.png)","2648f98c":"We have:\n\n- 891 rows\n- 12 columns","6b03cf1b":"There is indeed a NaN value in the line 1305. In fact the corresponding name is Oliva y Ocana, **Dona**. Fermina.\n\nThis title was not encoutered in the train dataset.","c9cbe014":"Now that the model is built by scanning several combinations of the hyperparameters, we can generate an output file to submit on Kaggle.","03319387":"It looks like male passengers are more likely to succumb.\n\nLet's plot the same graph but with ratio instead.","4d96baee":"Let's check if the titles have been filled correctly.","118dece8":"Look at the median age column and see how this value can be different based on the Sex, Pclass and Title put together.\n\nFor example: \n\n- If the passenger is female, from Pclass 1, and from royalty the median age is 40.5.\n- If the passenger is male, from Pclass 3, with a Mr title, the median age is 26.\n\nLet's create a function that fills in the missing age in <b>combined<\/b> based on these different attributes.","e285f10b":"Number of missing ages in train set","bd1261f5":"### Extracting the passenger titles\n\nWhen looking at the passenger names one could wonder how to process them to extract a useful information.\n\nIf you look closely at these first examples: \n\n- Braund, <b> Mr.<\/b> Owen Harris\t\n- Heikkinen, <b>Miss.<\/b> Laina\n- Oliva y Ocana, <b>Dona.<\/b> Fermina\n- Peter, <b>Master.<\/b> Michael J\n\nYou will notice that each name has a title in it ! This can be a simple Miss. or Mrs. but it can be sometimes something more sophisticated like Master, Sir or Dona. In that case, we might introduce an additional information about the social status by simply parsing the name and extracting the title and converting to a binary variable.\n\nLet's see how we'll do that in the function below.","c4bab86c":"Number of missing ages in test set","7ed67b7c":"This function replaces NaN values with U (for <i>Unknow<\/i>). It then maps each Cabin value to the first letter.\nThen it encodes the cabin values using dummy encoding again.","69d3a547":"Let's now focus on the Fare ticket of each passenger and see how it could impact the survival. ","d1bb5541":"Recovering the train set and the test set from the combined dataset is an easy task.","907b02f1":"## Feature selection\n\nWe've come up to more than 30 features so far. This number is quite large. \n\nWhen feature engineering is done, we usually tend to decrease the dimensionality by selecting the \"right\" number of features that capture the essential.\n\nIn fact, feature selection comes with many benefits:\n\n- It decreases redundancy among the data\n- It speeds up the training process\n- It reduces overfitting","5e07a3a2":"Passengers with cheaper ticket fares are more likely to die. \nPut differently, passengers with more expensive tickets, and therefore a more important social status, seem to be rescued first.","03c32708":"### Processing Family","14d2318a":"This function introduces 4 new features: \n\n- FamilySize : the total number of relatives including the passenger (him\/her)self.\n- Sigleton : a boolean variable that describes families of size = 1\n- SmallFamily : a boolean variable that describes families of 2 <= size <= 4\n- LargeFamily : a boolean variable that describes families of 5 < size","3fd9b018":"The Sex variable seems to be a discriminative feature. Women are more likely to survive.","f3364e51":"![energy](.\/images\/article_1\/2.png)","f221b98d":"The size of the circles is proportional to the ticket fare.\n\nOn the x-axis, we have the ages and the y-axis, we consider the ticket fare.\n\nWe can observe different clusters:\n\n1. Large green dots between x=20 and x=45: adults with the largest ticket fares\n2. Small red dots between x=10 and x=45, adults from lower classes on the boat\n3. Small greed dots between x=0 and x=7: these are the children that were saved","382687b5":"### Processing the ages\n\nWe have seen in the first part that the Age variable was missing 177 values. This is a large number ( ~\u00a013% of the dataset). Simply replacing them with the mean or the median age might not be the best solution since the age may differ by groups and categories of passengers. \n\nTo understand why, let's group our dataset by sex, Title and passenger class and for each subset compute the median age.\n\nTo avoid data leakage from the test set, we fill in missing ages in the train using the train set and we fill in ages in the test set using values calculated from the train set as well.","3447fac1":"Pandas allows you to a have a high-level simple statistical description of the numerical features.\nThis can be done using the describe method.","6efebe6b":"Let's have a look at the importance of each feature.","1fe67db3":"### Processing Embarked","b002a8a5":"We end up with a total of 67 features. ","0cfad69e":"As you may notice, there is a great importance linked to Title_Mr, Age, Fare, and Sex. \n\nThere is also an important correlation with the Passenger_Id.\n\nLet's now transform our train set and test set in a more compact datasets. ","7f1397e3":"Let's imputed the missing fare value by the average fare computed on the train set","c51d4887":"To evaluate our model we'll be using a 5-fold cross validation with the accuracy since it's the metric that the competition uses in the leaderboard.\n\nTo do that, we'll define a small scoring function. ","ecf4de04":"We don't have any cabin letter in the test set that is not present in the train set.","30bff10a":"Let's first see how the different ticket prefixes we have in our dataset","1aab6a57":"These violin plots confirm that one old code of conduct that sailors and captains follow in case of threatening situations: <b>\"Women and children first !\"<\/b>.","7587d537":"Let's have a look at the shape :","7bad133d":"The count variable shows that 177 values are missing in the Age column.\n\nOne solution is to fill in the null values with the median age. We could also impute with the mean age but the median is more robust to outliers.","97ef708b":"In the previous part, we flirted with the data and spotted some interesting correlations.\n\nIn this part, we'll see how to process and transform these variables in such a way the data becomes manageable by a machine learning algorithm.\n\nWe'll also create, or \"engineer\" additional features that will be useful in building the model.\n\nWe'll see along the way how to process text variables like the passenger names and integrate this information in our model.\n\nWe will break our code in separate functions for more clarity.","dc954a0b":"This part includes creating new variables based on the size of the family (the size is by the way, another variable we create).\n\nThis creation of new variables is done under a realistic assumption: Large families are grouped together, hence they are more likely to get rescued than people traveling alone.","28dd5a24":"This dataframe will help us impute missing age values based on different criteria.","fde2f88f":"Tree-based estimators can be used to compute feature importances, which in turn can be used to discard irrelevant features.","d7d3ac54":"### Processing Ticket","05ee1344":"### Processing Fare","6316df38":"train and test sets are combined.\n\nYou may notice that the total number of rows (1309) is the exact summation of the number of rows in the train set and the test set.","2230d4ef":"In this part, we use our knowledge of the passengers based on the features we created and then build a statistical model. You can think of this model as a box that crunches the information of any new passenger and decides whether or not he survives.\n\n\nWe'll be using Random Forests.Now we have to:\n\n1. Break the combined dataset in train set and test set.\n2. Use the train set to build a predictive model.\n3. Evaluate the model using the train set.\n4. Test the model using the test set and generate and output file for the submission.\n\nKeep in mind that we'll have to reiterate on 2. and 3. until an acceptable evaluation score is achieved.","d8d71a6d":"# I -  Exploratory data analysis\n\nWe'll be doing four things. \n\n- Data extraction : we'll load the dataset and have a first look at it. \n- Cleaning : we'll fill in missing values.\n- Plotting : we'll create some interesting charts that'll (hopefully) spot correlations and hidden insights out of the data.\n- Assumptions : we'll formulate hypotheses from the charts.","778b6c9a":"This function simply replaces one missing Fare value by the mean.","7acbe76c":"This function maps the string values male and female to 1 and 0 respectively. ","001e5b3f":"This function encodes the values of Pclass (1,2,3) using a dummy encoding.","2587f9d2":"We're down to a lot less features.","43d9d048":"### Processing Sex","140707c9":"As a matter of fact, the ticket fare correlates with the class as we see it in the chart below. ","ea367dee":"### Processing Cabin","289d4cbb":"### Let's try different base models","7287973a":"### Hyperparameters tuning","49defb53":"Perfect. The missing ages have been replaced. \n\nHowever, we notice a missing value in Fare, two missing values in Embarked and a lot of missing values in Cabin. We'll come back to these variables later.\n\nLet's now process the names.","b71d4214":"Ok this is nice. Let's now combine the age, the fare and the survival on a single chart.","a251e804":"This function parses the names and extract the titles. Then, it maps the titles to categories of titles. \nWe selected : \n\n- Officer\n- Royalty \n- Mr\n- Mrs\n- Miss\n- Master\n\nLet's run it !","a70dc458":"Ok no missing values now.","5d2cab10":"Let's now correlate the survival with the age variable.","58491b49":"Let's first see what the different titles are in the train set ","31633d6c":"Two datasets are available: a training set and a test set.\nWe'll be using the training set to build our predictive model and the testing set to score it and generate an output file to submit on the Kaggle evaluation system.\n\nWe'll see how this procedure is done at the end of this post.\n\nNow let's start by loading the training set.","1b6e5972":"Let's check the result.","4fb734b8":"As we saw in the chart above and validate by the following:\n\n- Women survive more than men, as depicted by the larger female green histogram \n\nNow, we see that:\n- The age conditions the survival for male passengers:\n    - Younger male tend to survive\n    - A large number of passengers between 20 and 40 succumb\n    \n- The age doesn't seem to have a direct impact on the female survival","7f304519":"### Processing Pclass","07e370d5":"###  Loading the data\n\nOne trick when starting a machine learning problem is to append the training set to the test set together.\n\nWe'll engineer new features using the train set to prevent information leakage. Then we'll add these variables to the test set.\n\nLet's load the train and test sets and append them together."}}