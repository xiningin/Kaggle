{"cell_type":{"83e84762":"code","0b6e5bb3":"code","9a9dd0d9":"code","976a90a3":"code","c1270e47":"code","99730e4a":"code","32373fb7":"code","027f787e":"code","43a50d72":"markdown","5d5219e9":"markdown","6a2f6abb":"markdown","37d84f0e":"markdown","4b709d26":"markdown","74a82e74":"markdown","77810785":"markdown","4c45972b":"markdown","3e49b875":"markdown"},"source":{"83e84762":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b6e5bb3":"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib import animation\nfrom IPython.display import HTML\nimport matplotlib.cm as cm  # color map","9a9dd0d9":"# \u521d\u671f\u4f4d\u7f6e\u3067\u306e\u8ff7\u8def\u306e\u69d8\u5b50\n\n# \u56f3\u3092\u63cf\u304f\u5927\u304d\u3055\u3068\u3001\u56f3\u306e\u5909\u6570\u540d\u3092\u5ba3\u8a00\nfig = plt.figure(figsize=(5, 5))\nax = plt.gca()\n\n# \u8d64\u3044\u58c1\u3092\u63cf\u304f\nplt.plot([1, 1], [0, 1], color='red', linewidth=2)\nplt.plot([1, 2], [2, 2], color='red', linewidth=2)\nplt.plot([2, 2], [2, 1], color='red', linewidth=2)\nplt.plot([2, 3], [1, 1], color='red', linewidth=2)\n\n# \u72b6\u614b\u3092\u793a\u3059\u6587\u5b57S0\uff5eS8\u3092\u63cf\u304f\nplt.text(0.5, 2.5, 'S0', size=14, ha='center')\nplt.text(1.5, 2.5, 'S1', size=14, ha='center')\nplt.text(2.5, 2.5, 'S2', size=14, ha='center')\nplt.text(0.5, 1.5, 'S3', size=14, ha='center')\nplt.text(1.5, 1.5, 'S4', size=14, ha='center')\nplt.text(2.5, 1.5, 'S5', size=14, ha='center')\nplt.text(0.5, 0.5, 'S6', size=14, ha='center')\nplt.text(1.5, 0.5, 'S7', size=14, ha='center')\nplt.text(2.5, 0.5, 'S8', size=14, ha='center')\nplt.text(0.5, 2.3, 'START', ha='center')\nplt.text(2.5, 0.3, 'GOAL', ha='center')\n\n# \u63cf\u753b\u7bc4\u56f2\u306e\u8a2d\u5b9a\u3068\u76ee\u76db\u308a\u3092\u6d88\u3059\u8a2d\u5b9a\nax.set_xlim(0, 3)\nax.set_ylim(0, 3)\nplt.tick_params(axis='both', which='both', bottom='off', top='off',\n                labelbottom='off', right='off', left='off', labelleft='off')\n\n# \u73fe\u5728\u5730S0\u306b\u7dd1\u4e38\u3092\u63cf\u753b\u3059\u308b\nline, = ax.plot([0.5], [2.5], marker=\"o\", color='g', markersize=60)","976a90a3":"# \u521d\u671f\u306e\u65b9\u7b56\u3092\u6c7a\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bftheta_0\u3092\u8a2d\u5b9a\n\n# \u884c\u306f\u72b6\u614b0\uff5e7\u3001\u5217\u306f\u79fb\u52d5\u65b9\u5411\u3067\u2191\u3001\u2192\u3001\u2193\u3001\u2190\u3092\u8868\u3059\ntheta_0 = np.array([[np.nan, 1, 1, np.nan],  # s0\n                    [np.nan, 1, np.nan, 1],  # s1\n                    [np.nan, np.nan, 1, 1],  # s2\n                    [1, 1, 1, np.nan],  # s3\n                    [np.nan, np.nan, 1, 1],  # s4\n                    [1, np.nan, np.nan, np.nan],  # s5\n                    [1, np.nan, np.nan, np.nan],  # s6\n                    [1, 1, np.nan, np.nan],  # s7\u3001\u203bs8\u306f\u30b4\u30fc\u30eb\u306a\u306e\u3067\u3001\u65b9\u7b56\u306f\u306a\u3057\n                    ])\n\n# \u65b9\u7b56\u30d1\u30e9\u30e1\u30fc\u30bftheta_0\u3092\u30e9\u30f3\u30c0\u30e0\u65b9\u7b56pi\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u306e\u5b9a\u7fa9\ndef simple_convert_into_pi_from_theta(theta):\n    '''\u5358\u7d14\u306b\u5272\u5408\u3092\u8a08\u7b97\u3059\u308b'''\n\n    [m, n] = theta.shape  # theta\u306e\u884c\u5217\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\n    pi = np.zeros((m, n))\n    for i in range(0, m):\n        pi[i, :] = theta[i, :] \/ np.nansum(theta[i, :])  # \u5272\u5408\u306e\u8a08\u7b97\n\n    pi = np.nan_to_num(pi)  # nan\u30920\u306b\u5909\u63db\n\n    return pi\n\n# \u30e9\u30f3\u30c0\u30e0\u884c\u52d5\u65b9\u7b56pi_0\u3092\u6c42\u3081\u308b\npi_0 = simple_convert_into_pi_from_theta(theta_0)","c1270e47":"# \u521d\u671f\u306e\u884c\u52d5\u4fa1\u5024\u95a2\u6570Q\u3092\u8a2d\u5b9a\n[a, b] = theta_0.shape  # \u884c\u3068\u5217\u306e\u6570\u3092a, b\u306b\u683c\u7d0d\nQ = np.random.rand(a, b) * theta_0 * 0.1\n# *theta0\u3092\u3059\u308b\u3053\u3068\u3067\u8981\u7d20\u3054\u3068\u306b\u639b\u3051\u7b97\u3092\u3057\u3001Q\u306e\u58c1\u65b9\u5411\u306e\u5024\u304cnan\u306b\u306a\u308b","99730e4a":"# \u03b5-greedy\u6cd5\u3092\u5b9f\u88c5\ndef get_action(s, Q, epsilon, pi_0):\n    direction = [\"up\", \"right\", \"down\", \"left\"]\n\n    # \u884c\u52d5\u3092\u6c7a\u3081\u308b\n    if np.random.rand() < epsilon:\n        # \u03b5\u306e\u78ba\u7387\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u52d5\u304f\n        next_direction = np.random.choice(direction, p=pi_0[s, :])\n    else:\n        # Q\u306e\u6700\u5927\u5024\u306e\u884c\u52d5\u3092\u63a1\u7528\u3059\u308b\n        next_direction = direction[np.nanargmax(Q[s, :])]\n\n    # \u884c\u52d5\u3092index\u306b\n    if next_direction == \"up\":\n        action = 0\n    elif next_direction == \"right\":\n        action = 1\n    elif next_direction == \"down\":\n        action = 2\n    elif next_direction == \"left\":\n        action = 3\n\n    return action\n\n\ndef get_s_next(s, a, Q, epsilon, pi_0):\n    direction = [\"up\", \"right\", \"down\", \"left\"]\n    next_direction = direction[a]  # \u884c\u52d5a\u306e\u65b9\u5411\n\n    # \u884c\u52d5\u304b\u3089\u6b21\u306e\u72b6\u614b\u3092\u6c7a\u3081\u308b\n    if next_direction == \"up\":\n        s_next = s - 3  # \u4e0a\u306b\u79fb\u52d5\u3059\u308b\u3068\u304d\u306f\u72b6\u614b\u306e\u6570\u5b57\u304c3\u5c0f\u3055\u304f\u306a\u308b\n    elif next_direction == \"right\":\n        s_next = s + 1  # \u53f3\u306b\u79fb\u52d5\u3059\u308b\u3068\u304d\u306f\u72b6\u614b\u306e\u6570\u5b57\u304c1\u5927\u304d\u304f\u306a\u308b\n    elif next_direction == \"down\":\n        s_next = s + 3  # \u4e0b\u306b\u79fb\u52d5\u3059\u308b\u3068\u304d\u306f\u72b6\u614b\u306e\u6570\u5b57\u304c3\u5927\u304d\u304f\u306a\u308b\n    elif next_direction == \"left\":\n        s_next = s - 1  # \u5de6\u306b\u79fb\u52d5\u3059\u308b\u3068\u304d\u306f\u72b6\u614b\u306e\u6570\u5b57\u304c1\u5c0f\u3055\u304f\u306a\u308b\n\n    return s_next\n\n\n# Q\u5b66\u7fd2\u306b\u3088\u308b\u884c\u52d5\u4fa1\u5024\u95a2\u6570Q\u306e\u66f4\u65b0\ndef Q_learning(s, a, r, s_next, Q, eta, gamma):\n\n    if s_next == 8:  # \u30b4\u30fc\u30eb\u3057\u305f\u5834\u5408\n        ## \u30b4\u30fc\u30eb\u3057\u3066\u3044\u308b\u306e\u3067\u3001r=1\u3068\u8003\u3048\u308b\u3068\u3001\u30b4\u30fc\u30eb1\u624b\u524d\u306eQ[s,a]\u30921\u306b\u8fd1\u3065\u3051\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3002\n        Q[s, a] = Q[s, a] + eta * (r - Q[s, a])\n\n    else:\n        ## \u30b4\u30fc\u30eb\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001r=0\u3068\u8003\u3048\u308b\u3068\u3001Q[s_next,:]\u3068Q[s,a]\u3092\u8fd1\u3065\u3051\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3002\n        ## \u30b4\u30fc\u30eb2\u624b\u524d\u3092\u8003\u3048\u308b\u3068\u3001\u30b4\u30fc\u30eb1\u624b\u524d\u306eQ\u306b\u8fd1\u3065\u3051\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3002\n        Q[s, a] = Q[s, a] + eta * (r + gamma * np.nanmax(Q[s_next,: ]) - Q[s, a])\n\n    return Q\n\n\n# Q\u5b66\u7fd2\u3067\u8ff7\u8def\u3092\u89e3\u304f\u95a2\u6570\u306e\u5b9a\u7fa9\u3001\u72b6\u614b\u3068\u884c\u52d5\u306e\u5c65\u6b74\u304a\u3088\u3073\u66f4\u65b0\u3057\u305fQ\u3092\u51fa\u529b\ndef goal_maze_ret_s_a_Q(Q, epsilon, eta, gamma, pi):\n    s = 0  # \u30b9\u30bf\u30fc\u30c8\u5730\u70b9\n    a = a_next = get_action(s, Q, epsilon, pi)  # \u521d\u671f\u306e\u884c\u52d5\n    s_a_history = [[0, np.nan]]  # \u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u79fb\u52d5\u3092\u8a18\u9332\u3059\u308b\u30ea\u30b9\u30c8\n\n    while (1):  # \u30b4\u30fc\u30eb\u3059\u308b\u307e\u3067\u30eb\u30fc\u30d7\n        a = a_next  # \u884c\u52d5\u66f4\u65b0\n\n        s_a_history[-1][1] = a\n        # \u73fe\u5728\u306e\u72b6\u614b\uff08\u3064\u307e\u308a\u4e00\u756a\u6700\u5f8c\u306a\u306e\u3067index=-1\uff09\u306b\u884c\u52d5\u3092\u4ee3\u5165\n\n        s_next = get_s_next(s, a, Q, epsilon, pi)\n        # \u6b21\u306e\u72b6\u614b\u3092\u683c\u7d0d\n\n        s_a_history.append([s_next, np.nan])\n        # \u6b21\u306e\u72b6\u614b\u3092\u4ee3\u5165\u3002\u884c\u52d5\u306f\u307e\u3060\u5206\u304b\u3089\u306a\u3044\u306e\u3067nan\u306b\u3057\u3066\u304a\u304f\n\n        # \u5831\u916c\u3092\u4e0e\u3048,\u3000\u6b21\u306e\u884c\u52d5\u3092\u6c42\u3081\u307e\u3059\n        if s_next == 8:\n            \n            ##===============================================================\n            ##===================      \u3053\u3053\u304c\u91cd\u8981      ========================\n            r = 1  # \u30b4\u30fc\u30eb\u306b\u305f\u3069\u308a\u7740\u3044\u305f\u306a\u3089\u5831\u916c\u3092\u4e0e\u3048\u308b\n            ##===============================================================\n            \n            a_next = np.nan\n        else:\n            r = 0\n            a_next = get_action(s_next, Q, epsilon, pi)\n            # \u6b21\u306e\u884c\u52d5a_next\u3092\u6c42\u3081\u307e\u3059\u3002\n\n        # \u4fa1\u5024\u95a2\u6570\u3092\u66f4\u65b0\n        Q = Q_learning(s, a, r, s_next, Q, eta, gamma)\n\n        # \u7d42\u4e86\u5224\u5b9a\n        if s_next == 8:  # \u30b4\u30fc\u30eb\u5730\u70b9\u306a\u3089\u7d42\u4e86\n            break\n        else:\n            s = s_next\n\n    return [s_a_history, Q]","32373fb7":"# Q\u5b66\u7fd2\u3067\u8ff7\u8def\u3092\u89e3\u304f\n\neta = 0.1  # \u5b66\u7fd2\u7387\ngamma = 0.9  # \u6642\u9593\u5272\u5f15\u7387\nepsilon = 0.5  # \u03b5-greedy\u6cd5\u306e\u521d\u671f\u5024\nv = np.nanmax(Q, axis=1)  # \u72b6\u614b\u3054\u3068\u306b\u4fa1\u5024\u306e\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\nis_continue = True\nepisode = 1\n\nV = []  # \u30a8\u30d4\u30bd\u30fc\u30c9\u3054\u3068\u306e\u72b6\u614b\u4fa1\u5024\u3092\u683c\u7d0d\u3059\u308b\nV.append(np.nanmax(Q, axis=1))  # \u72b6\u614b\u3054\u3068\u306b\u884c\u52d5\u4fa1\u5024\u306e\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\n\nwhile is_continue:  # is_continue\u304cFalse\u306b\u306a\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\n    print(\"\u30a8\u30d4\u30bd\u30fc\u30c9:\" + str(episode))\n\n    # \u03b5-greedy\u306e\u5024\u3092\u5c11\u3057\u305a\u3064\u5c0f\u3055\u304f\u3059\u308b\n    epsilon = epsilon \/ 2\n\n    # Q\u5b66\u7fd2\u3067\u8ff7\u8def\u3092\u89e3\u304d\u3001\u79fb\u52d5\u3057\u305f\u5c65\u6b74\u3068\u66f4\u65b0\u3057\u305fQ\u3092\u6c42\u3081\u308b\n    [s_a_history, Q] = goal_maze_ret_s_a_Q(Q, epsilon, eta, gamma, pi_0)\n\n    # \u72b6\u614b\u4fa1\u5024\u306e\u5909\u5316\n    new_v = np.nanmax(Q, axis=1)  # \u72b6\u614b\u3054\u3068\u306b\u884c\u52d5\u4fa1\u5024\u306e\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\n    print(np.sum(np.abs(new_v - v)))  # \u72b6\u614b\u4fa1\u5024\u95a2\u6570\u306e\u5909\u5316\u3092\u51fa\u529b\n    v = new_v\n    V.append(v)  # \u3053\u306e\u30a8\u30d4\u30bd\u30fc\u30c9\u7d42\u4e86\u6642\u306e\u72b6\u614b\u4fa1\u5024\u95a2\u6570\u3092\u8ffd\u52a0\n\n    print(\"\u8ff7\u8def\u3092\u89e3\u304f\u306e\u306b\u304b\u304b\u3063\u305f\u30b9\u30c6\u30c3\u30d7\u6570\u306f\" + str(len(s_a_history) - 1) + \"\u3067\u3059\")\n\n    # 100\u30a8\u30d4\u30bd\u30fc\u30c9\u7e70\u308a\u8fd4\u3059\n    episode = episode + 1\n    if episode > 100:\n        break","027f787e":"def init():\n    # \u80cc\u666f\u753b\u50cf\u306e\u521d\u671f\u5316\n    line.set_data([], [])\n    return (line,)\n\n\ndef animate(i):\n    # \u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306e\u63cf\u753b\u5185\u5bb9\n    # \u5404\u30de\u30b9\u306b\u72b6\u614b\u4fa1\u5024\u306e\u5927\u304d\u3055\u306b\u57fa\u3065\u304f\u8272\u4ed8\u304d\u306e\u56db\u89d2\u3092\u63cf\u753b\n    line, = ax.plot([0.5], [2.5], marker=\"s\",\n                    color=cm.jet(V[i][0]), markersize=85)  # S0\n    line, = ax.plot([1.5], [2.5], marker=\"s\",\n                    color=cm.jet(V[i][1]), markersize=85)  # S1\n    line, = ax.plot([2.5], [2.5], marker=\"s\",\n                    color=cm.jet(V[i][2]), markersize=85)  # S2\n    line, = ax.plot([0.5], [1.5], marker=\"s\",\n                    color=cm.jet(V[i][3]), markersize=85)  # S3\n    line, = ax.plot([1.5], [1.5], marker=\"s\",\n                    color=cm.jet(V[i][4]), markersize=85)  # S4\n    line, = ax.plot([2.5], [1.5], marker=\"s\",\n                    color=cm.jet(V[i][5]), markersize=85)  # S5\n    line, = ax.plot([0.5], [0.5], marker=\"s\",\n                    color=cm.jet(V[i][6]), markersize=85)  # S6\n    line, = ax.plot([1.5], [0.5], marker=\"s\",\n                    color=cm.jet(V[i][7]), markersize=85)  # S7\n    line, = ax.plot([2.5], [0.5], marker=\"s\",\n                    color=cm.jet(1.0), markersize=85)  # S8\n    return (line,)\n\n\n#\u3000\u521d\u671f\u5316\u95a2\u6570\u3068\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306e\u63cf\u753b\u95a2\u6570\u3092\u7528\u3044\u3066\u52d5\u753b\u3092\u4f5c\u6210\nanim = animation.FuncAnimation(\n    fig, animate, init_func=init, frames=len(V), interval=200, repeat=False)\n\nHTML(anim.to_jshtml())","43a50d72":"## Q-Learning\n\n\u53c2\u8003URL<br>\nhttps:\/\/qiita.com\/youichiro\/items\/416e0dd95881ed9f17ac\n\nQ = \u884c\u52d5\u4fa1\u5024\u95a2\u6570\n\n\u6b21\u306ecode\u306b\u3042\u308b\u3088\u3046\u306b\u3001\u30b4\u30fc\u30eb\u306f1\u3001\u3064\u307e\u308a\u78ba\u7387100%\u3092\u4e0e\u3048\u3066\u3044\u308b\u3002\n\n            ##===============================================================\n            ##===================      \u3053\u3053\u304c\u91cd\u8981      ========================\n            r = 1  # \u30b4\u30fc\u30eb\u306b\u305f\u3069\u308a\u7740\u3044\u305f\u306a\u3089\u5831\u916c\u3092\u4e0e\u3048\u308b\n            ##===============================================================\n\n\u30b4\u30fc\u30eb\u306e1\u3064\u624b\u524d\u306e\u72b6\u614b\u3092\u8003\u3048\u308b\u3068\u3001\n\u30b4\u30fc\u30eb\u3078\u5411\u304b\u3046\u884c\u52d5\u4fa1\u5024\u306f100%\u3001\u81ea\u7136\u306b\u4ed6\u306e\u884c\u52d5\u306f\u6392\u9664\u3055\u308c\u308b\u3068\u3044\u3046\u4e8b\u3002\n\u30b4\u30fc\u30eb\uff12\u3064\u624b\u524d\u306e\u72b6\u614b\u3092\u8003\u3048\u308b\u3068\u30011\u3064\u624b\u524d\u306e\u72b6\u614b\u306b\u79fb\u308c\u3070\uff11\uff10\uff10\uff05\u306b\u306a\u308b\u304b\u3089\u3001\u4ed6\u306e\u884c\u52d5\u306f\u6392\u9664\u3055\u308c\u308b\u3002\n\u3068\u3044\u3046\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3057\u3066\u3044\u304f\u3002\n\u884c\u52d5\u4fa1\u5024\u95a2\u6570\u306f\u3001goal\u304b\u3089\u9006\u7b97\u3059\u308b\u3068\u304d\u306b\u3001\u4e00\u5b9a\u306e\u5272\u5408\u3067\u4fa1\u5024\u3092\u6e1b\u3089\u3059(\u672a\u6765\u306e\u5831\u916c\u304c1\u306a\u306e\u3067\u3001\u4eca\u306f0.98\u3068\u3044\u3063\u305f\u5177\u5408)\u306e\u3067\u3001\u5b9f\u969b\u306f100%\u3088\u308a\u5c11\u3057\u305a\u3064\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u3042\u305f\u308a\u306f\u3001\n\n    if s_next == 8:  # \u30b4\u30fc\u30eb\u3057\u305f\u5834\u5408\n        Q[s, a] = Q[s, a] + eta * (r - Q[s, a])\n    else:\n        Q[s, a] = Q[s, a] + eta * (r + gamma * np.nanmax(Q[s_next,: ]) - Q[s, a])\n\u3067\u8a08\u7b97\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n","5d5219e9":"##\u3000\u53ef\u8996\u5316","6a2f6abb":"## Q-Learning\u5b9f\u884c","37d84f0e":"### \u521d\u671f\u8a2d\u5b9a","4b709d26":"\u5927\u672c\u306f\u3053\u3061\u3089\u3002\nhttps:\/\/github.com\/YutaroOgawa\/Deep-Reinforcement-Learning-Book\/tree\/master\/program\n\n\u5f37\u5316\u5b66\u7fd2\u306e\u30b3\u30fc\u30c9\u3001\u3060\u3044\u305f\u3044\u3001Brain\/Agent\/Anvironment\u3068Class\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u306e\u30b3\u30fc\u30c9\u306f\u5225\u308c\u3066\u307e\u305b\u3093\u304c\u3001\u5225\u308c\u305f\u3082\u306e\u3092\u8abf\u3079\u3066\u8f09\u305b\u307e\u3059\u3002\n\n\n![\u5f37\u5316\u5b66\u7fd2](https:\/\/i1.wp.com\/www.tcom242242.net\/wp-content\/uploads\/2019\/10\/ql.gif?resize=1089%2C514&ssl=1)","74a82e74":"## \u5909\u6570\u306e\u8aac\u660e\n\n\u65b9\u7b56\u53cd\u5fa9\u6cd5<br>\n\u65b9\u7b56\u306b\u5f93\u3063\u3066\u884c\u52d5\u3057\u3066\u30b4\u30fc\u30eb\u306b\u305f\u3069\u308a\u7740\u3044\u305f\u3068\u304d\u3001\u65e9\u304f\u30b4\u30fc\u30eb\u3067\u304d\u305f\u30b1\u30fc\u30b9\u3067\u5b9f\u884c\u3057\u305f\u884c\u52d5(action)\u306f\u91cd\u8981\u3060\u3068\u8003\u3048\u3001<br>\n\u305d\u306e\u884c\u52d5\u3092\u591a\u304f\u53d6\u308a\u5165\u308c\u308b\u3088\u3046\u306b\u65b9\u7b56\u3092\u66f4\u65b0\u3059\u308b\u65b9\u6cd5\u3002<>br\n\n\u4fa1\u5024\u53cd\u5fa9\u6cd5<br>\n\u30b4\u30fc\u30eb\u304b\u3089\u9006\u7b97\u3057\u3066\u3001\u30b4\u30fc\u30eb\u306e\u4e00\u3064\u624b\u524d\u30012\u3064\u624b\u524d\u306e\u4f4d\u7f6e\uff08\u72b6\u614b\uff09\u3078\u3068\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u3092\u9806\u3005\u306b\u8a98\u5c0e\u3057\u3066\u304f\u65b9\u6cd5\u3002<br>\n\u3053\u3053\u306e\u30b3\u30fc\u30c9\u306f\u4fa1\u5024\u53cd\u5fa9\u6cd5\u3002\n    \n\ns:<br>\n\u72b6\u614b\u306e\u3053\u3068\u3002\u8ff7\u8def\u3060\u3068\u5834\u6240\u3002\u30ab\u30fc\u30c8\u30dd\u30fc\u30eb\u3060\u3068\u3001\u68d2\u306e\u50be\u304d\u3084\u6a2a\u306e\u4f4d\u7f6e\u306a\u3069\u3002<br>\n\na:<br>\n\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u3053\u3068\u3002\n\npi:<br>\n\u65b9\u7b56\u306e\u3053\u3068\u3002Policy\u306e\u30ae\u30ea\u30b7\u30e3\u6587\u5b57\u306e\u03c0\u03b8(s,a)\u3002<br>\n\u72b6\u614bs\u306e\u3068\u304d\u306b\u884c\u52d5a\u3092\u63a1\u7528\u3059\u308b\u78ba\u7387\u306f\u03b8\u3067\u6c7a\u307e\u308b\u65b9\u7b56\u03c0\u306b\u5f93\u3046\u3068\u3044\u3046\u3053\u3068\u3002<br>\n\n\u03b8\uff1a<br>\n\u78ba\u7387\u3078\u3068\u5909\u63db\u3055\u308c\u308b\u5024\u3002\u306a\u3093\u306e\u3053\u3063\u3061\u3083\u3044\u3060\u304c\u3001\u5272\u5408\u306b\u3059\u308b\u524d\u306e\u5024\u3084\u3001softmax\u3059\u308b\u524d\u306e\u5024\u306e\u3053\u3068\u3002<br>\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u5834\u5408\u306f\u3001\u7d20\u5b50\u9593\u306e\u7d50\u5408\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u5fdc\u3002<br>\n\n\n\n","77810785":"## \u8ff7\u8def\u306e\u8a2d\u5b9a\u3000:: \u5171\u901a","4c45972b":"### \u95a2\u6570\u306e\u5b9f\u88c5\n\n[\u03b5-greedy\u6cd5](https:\/\/qiita.com\/youichiro\/items\/416e0dd95881ed9f17ac#%CE%B5-%E3%82%B0%E3%83%AA%E3%83%BC%E3%83%87%E3%82%A3%E6%B3%95)<br>\n\n\u4e0e\u3048\u3089\u308c\u305f\u78ba\u7acb\u306e\u4e2d\u304b\u3089\u6700\u5927\u306e\u3082\u306e\u3092\u5e38\u306b\u9078\u3076\u306e\u3067\u306f\u306a\u304f\u3001\u305f\u307e\u306b\u30e9\u30f3\u30c0\u30e0\u306b\u52d5\u304f\u3088\u3001\u3063\u3066\u3053\u3068\u3067\u3059\u3002\nNN\u306b\u3082\u3001\u3053\u306e\u8981\u7d20\u304c\u5165\u3063\u3066\u3044\u305f\u3068\u601d\u3044\u307e\u3059\u3002","3e49b875":"## \u521d\u671f\u72b6\u614b\u306e\u8a2d\u5b9a :: \u5171\u901a"}}