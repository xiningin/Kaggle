{"cell_type":{"6ffcc2e3":"code","81c89da0":"code","3e2d4a22":"code","b30da358":"code","2d0bdf0e":"code","3af6c28d":"code","9226929d":"code","bb98cc18":"code","7b3c509f":"code","0dea5864":"code","203ea894":"code","300b2f44":"code","a1356474":"code","b22fe6f3":"code","dcbb8fc1":"code","3f8b5957":"code","b1cd260f":"code","15bb46d4":"code","c69a3a01":"code","5e315326":"markdown","ee80a143":"markdown","943187e1":"markdown","e7a08995":"markdown","876f7bd2":"markdown","992d3754":"markdown","f808bcac":"markdown","3d76c5fc":"markdown","40e583a0":"markdown","eb14dae5":"markdown","908737c1":"markdown","efb56627":"markdown","c879737f":"markdown"},"source":{"6ffcc2e3":"# data science basics\nimport numpy as np\nimport pandas as pd\n\n# decision tree\nfrom sklearn import tree\nimport graphviz \nimport lightgbm as lgb\n\n# scores\nfrom sklearn.metrics import log_loss\nfrom sklearn.metrics import f1_score\n\n# utils\nfrom collections import Counter\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom tqdm.notebook import tqdm\nimport os\nos.listdir(\"..\/input\/ykc-cup-2nd\/\")\n\n# visualize\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\nfrom matplotlib import pyplot\nfrom matplotlib.ticker import ScalarFormatter\nsns.set_context(\"talk\")\nstyle.use('seaborn-colorblind') # \u3053\u306e\u30c6\u30fc\u30de\u597d\u304d","81c89da0":"def read_data(): # \u95a2\u6570\u5316\u3059\u308b\u3068\u65e9\u3044\u3089\u3057\u3044\n    train = pd.read_csv(\"..\/input\/ykc-cup-2nd\/train.csv\")\n    test = pd.read_csv(\"..\/input\/ykc-cup-2nd\/test.csv\")\n    sub = pd.read_csv(\"..\/input\/ykc-cup-2nd\/sample_submission.csv\")\n    return train, test, sub\ntrain, test, sub = read_data()","3e2d4a22":"print(train.shape)\ntrain.head()","b30da358":"print(test.shape)\ntest.head()","2d0bdf0e":"print(sub.shape)\nsub.head()","3af6c28d":"features = ['order_rate', 'order_dow_mode', 'order_hour_of_day_mode'] #\u3000\u6570\u5024\u7279\u5fb4\u91cf\u306e\u307f\uff01\ntarget = 'department_id'","9226929d":"# target\u306e\u30ab\u30a6\u30f3\u30c8\nfig, ax = plt.subplots(1, 1, figsize=(12, 5))\nsns.countplot(train[target], ax=ax)","bb98cc18":"fig = plt.figure()\nfor f in features:\n    sns.violinplot(x=target, y=f, data=train)\n    plt.show()","7b3c509f":"clf = tree.DecisionTreeClassifier(max_depth=3, random_state=42)\nclf.fit(train[features], train[target])","0dea5864":"dot_data = tree.export_graphviz(clf, out_file=None, \n    feature_names=features,  \n    class_names=train[target].astype(str),  \n    filled=True, rounded=True)  \ngraph = graphviz.Source(dot_data)  \ngraph ","203ea894":"# Feature importance\nfi_df = pd.DataFrame()\nfi_df['features'] = features\nfi_df['importance'] = clf.feature_importances_\nsns.barplot(x=\"importance\", y=\"features\", data=fi_df)","300b2f44":"import shap\nshap_values = shap.TreeExplainer(clf).shap_values(train[features], check_additivity=False)\nshap.summary_plot(shap_values, train[features], plot_type=\"bar\")","a1356474":"n_split = 7 # cross validation\u306efold\u6570 ... \u30c7\u30fc\u30bf\u6570\u304c\u5c11\u306a\u3044\u306e\u3067\u3001split\u3092\u5897\u3084\u3057\u3066fold\u3042\u305f\u308a\u306e\u30c7\u30fc\u30bf\u6570\u3092\u3075\u3084\u3059\nseed = 1220 # \u50d5\u306e\u8a95\u751f\u65e5\u3067\u3059","b22fe6f3":"## cross validation\nparams = {\n        'n_estimators': 2000,\n        'objective': 'multiclass', # multiclass\u554f\u984c\u3060\u305c\n        'boosting_type': 'rf', # random forest\n        'num_leaves': 128,\n        'min_data_in_leaf': 72,\n        'max_depth': -1, # \u7279\u5fb4\u91cf3\u3064\u3057\u304b\u306a\u3044\u306e\u3067\u3001\u6df1\u304f\u3057\u3066interaction\u3092\u671f\u5f85\n        'learning_rate': 0.05,\n        'subsample': 0.76,\n        'subsample_freq': 1,\n        'feature_fraction': 1,\n        'lambda_l1': 1,\n        'lambda_l2': 1,\n        'seed': seed, \n        'early_stopping_rounds': 100,\n        'num_boost_round': 2000\n        } \nparams[\"metric\"] = \"multi_logloss\"\nparams[\"num_class\"] = len(np.unique(train[target].values))\nparams[\"class_weight\"] = 'balanced' # \u30a2\u30f3\u30d0\u30e9\u30f3\u30b9\u30c7\u30fc\u30bf\u306a\u306e\u3067\n\n# fitting\npreds_test = []\nscores = []\nkfold = StratifiedKFold(n_splits=n_split, shuffle = True, random_state=seed) # \u30a2\u30f3\u30d0\u30e9\u30f3\u30b9\u306a\u306e\u3067\u3001\u5c64\u5316\u62bd\u51fa\u306e\u65b9\u304c\u826f\u3055\u305d\u3046\u3058\u3083\u306d\nfor i_fold, (train_idx, valid_idx) in enumerate(kfold.split(train, train[target])):\n    print(f\"--------fold {i_fold}-------\")\n    \n    ## train data\n    x_tr = train.loc[train_idx, features]\n    y_tr = train.loc[train_idx, target]\n\n    ## valid data\n    x_va = train.loc[valid_idx, features]\n    y_va = train.loc[valid_idx, target]\n\n    ## train LGBM model\n    model = lgb.LGBMClassifier(**params)\n    model.fit(x_tr, y_tr, eval_set=[(x_va, y_va)],\n            verbose=100)\n    \n    ## predict on valid\n    pred_val = model.predict_proba(x_va)\n    \n    ## evaluate\n    score = {\n        \"logloss\"  : log_loss(y_va, pred_val),\n        \"f1_micro\" : f1_score(y_va, np.argmax(pred_val, axis = 1), average = \"micro\")}\n    print(score)\n    scores.append(score)\n    \n    ## predict on test\n    pred_test = model.predict_proba(test[features])\n    preds_test.append(pred_test)","dcbb8fc1":"score_df = pd.DataFrame(scores)\nscore_df","3f8b5957":"score_df.mean()","b1cd260f":"## cv\u306e\u5404fold\u3067\u8a08\u7b97\u3057\u305f\u4e88\u6e2c\u5024\u306e\u5e73\u5747\u3092\u6700\u7d42\u7684\u306a\u4e88\u6e2c\u5024\u306b\npred_test_final = np.array(preds_test).mean(axis = 0)\npred_test_final = np.argmax(pred_test_final, axis = 1)","15bb46d4":"sub[\"department_id\"] = pred_test_final\nsub.to_csv(\"submission.csv\", index = False)\nsub.head()","c69a3a01":"sns.countplot(x=\"department_id\", data=sub)","5e315326":"\u3042\u307e\u308a\u6570\u5024\u7279\u5fb4\u91cf\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u95a2\u4fc2\u3057\u3066\u306a\u3044\u306a\uff08\u4e0d\u7a4f\u306a\u96f0\u56f2\u6c17\uff09...","ee80a143":"# Submission","943187e1":"\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306a\u3093\u3082\u308f\u304b\u3089\u3093\u306e\u3067\u3001NLP\uff08\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\uff09\u306a\u3057\u3067\u3069\u3053\u307e\u3067\u884c\u3051\u308b\u304b\u3084\u3063\u3066\u307f\u308b...\u3002","e7a08995":"\u6c7a\u5b9a\u6728\u66f8\u3044\u305f\u3051\u3069\u3088\u304f\u308f\u304b\u3089\u3093\u3002\u3002\u3002\n\nFeature importance\u3092\u51fa\u3057\u3066\u307f\u308b","876f7bd2":"order_dow_mode\u304c\u4e00\u4f4d\u306b\u306a\u308a\u307e\u3057\u305f\u306d\u3002\u305d\u3046\u306a\u3093\u3067\u3059\u3088\u3001sklearn\u306efeature importance\u306fsplit-base\u306a\u306e\u3067\u3001\u3042\u307e\u308a\u53c2\u8003\u306b\u306a\u3089\u306a\u3044\u3093\u3067\u3059\u3088\u3002\n\n\u3069\u306e\u7279\u5fb4\u91cf\u3082\u5024\u306b\u3088\u3063\u3066\u3001\u3042\u308b\u7a0b\u5ea6class\u3068\u95a2\u9023\u3057\u3066\u308b\u3053\u3068\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\u3051\u3069\u3001order_dow_mode\u304c\u4e00\u756a\u5e45\u304c\u3042\u3063\u3066\u4e88\u6e2c\u306b\u52b9\u3044\u3066\u307e\u3059\u306d","992d3754":"# Decision Tree\n\u5206\u6790\u696d\u52d9\u3067\u3082\u5272\u3068\u4f7f\u3046\u3084\u3064\u3002\u6c7a\u5b9a\u6728\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\u3002","f808bcac":"# Read data ","3d76c5fc":"# Model Fitting\nRandom forest\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046","40e583a0":"\uff19\u5168\u7136\u306a\u3044\u3058\u3083\u3093^^","eb14dae5":"order_rate\u304c\u5927\u4e8b\u306a\u3093\u3067\u3059\u306d\uff1f\u305f\u304f\u3055\u3093\u8cb7\u308f\u308c\u308b\u3082\u306e\u306f\u7279\u5b9a\u306e\u5834\u6240\u306b\u3042\u3063\u305f\u308a\u3059\u308b\u306e\u304b\u306a...\n\u6c7a\u5b9a\u6728\u7cfb\u3067importance type='gain'\u3067\u306a\u3044\u3068\u304d\uff08sklearn\u306e\u306f\u3060\u3044\u305f\u3044\u305d\u3046\uff09\u3001importance\u306f\u6728\u3092\u5207\u3063\u305f\u56de\u6570\uff08split-base\uff09\u3067\u6c7a\u307e\u308a\u3001\u6c34\u6e96\u6570\u304c\u591a\u3044\u7279\u5fb4\u91cf\u3092\u904e\u5927\u8a55\u4fa1\u3059\u308b\u50be\u5411\u306b\u3042\u308b\u306e\u3067\u3001\u3042\u307e\u308a\u53c2\u8003\u306b\u306a\u3089\u306a\u3044\u3002\n\n\u500b\u5225\u306e\u30c7\u30fc\u30bf\u3092\u3069\u306e\u304f\u3089\u3044\u4e88\u6e2c\u306b\u52b9\u3044\u305f\u304b\u3068\u3044\u3046\u672c\u6765\u306eimportance\u306e\u6587\u8108\u3067\u898b\u308b\u305f\u3081\u306b\u3001shap\u3092\u4f7f\u3044\u307e\u3059\u308b","908737c1":"NLP\u9811\u5f35\u308d\u30fc\ud83d\ude02","efb56627":"...NLP\u7279\u5fb4\u91cf\u5fc5\u8981\u3067\u3059\u306d\u30fc...\u263a\ufe0f","c879737f":"# EDA (Exploratory Data Analysis)"}}