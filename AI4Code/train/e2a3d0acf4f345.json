{"cell_type":{"4206ce70":"code","b3d9a77d":"code","f1b5593e":"code","13d03b2a":"code","df153a7f":"code","a4790347":"code","56ac4957":"code","eba0a425":"code","b3fcc56d":"code","21677e10":"code","1fcf7464":"code","ad8cf766":"code","01475ffb":"code","a42b53b3":"code","c5913e56":"code","323b41cf":"code","5fa4c5b8":"code","f8d29f2e":"code","9b6cd344":"code","3cce3b93":"code","043c9999":"code","a538056f":"code","ffdc37fe":"code","36926c32":"code","be57096e":"code","2d4611aa":"code","e6c2ac54":"code","48ba5d9f":"code","da1534da":"code","e6438c1e":"markdown","caf8f60f":"markdown","1b765e3d":"markdown","37271068":"markdown","c6fe20ac":"markdown","de6835cc":"markdown","19c74b1a":"markdown","1872b716":"markdown","d583b875":"markdown","1d2eadba":"markdown","428b205e":"markdown","74ddf113":"markdown","2c3b0d3f":"markdown","db2a3d27":"markdown","3604d353":"markdown","3dfeb83c":"markdown","ba6cb684":"markdown","5b494e34":"markdown","7c53ecb0":"markdown","1fe4b057":"markdown","124ec734":"markdown","77b157e0":"markdown","8f0e6fb7":"markdown","490dacaa":"markdown","574a5988":"markdown","d6eaa6d8":"markdown","771863db":"markdown","84204656":"markdown","dbbc9031":"markdown"},"source":{"4206ce70":"!pip install solt","b3d9a77d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# ignoring warnings\nimport warnings\nwarnings.simplefilter(\"ignore\")\nimport os, cv2, json\nfrom PIL import Image\nimport solt\nimport solt.transforms as slt\nimport random\n","f1b5593e":"WORK_DIR = '..\/input\/cassava-leaf-disease-classification'\nos.listdir(WORK_DIR)","13d03b2a":"print('Train images: %d' %len(os.listdir(\n    os.path.join(WORK_DIR, \"train_images\"))))","df153a7f":"with open(os.path.join(WORK_DIR, \"label_num_to_disease_map.json\")) as file:\n    print(json.dumps(json.loads(file.read()), indent=4))","a4790347":"train_labels = pd.read_csv(os.path.join(WORK_DIR, \"train.csv\"))\ntrain_labels.head()","56ac4957":"sns.countplot(train_labels['label'])","eba0a425":"sample=train_labels[train_labels['label']==0]\nx=sample['image_id'].head(4).values\nplt.figure(figsize=(18,8))\nfor i,n in enumerate(x):\n    plt.subplot(1,4,i+1)\n    im=Image.open('..\/input\/cassava-leaf-disease-classification\/train_images\/'+n)\n    plt.imshow(im)\n    plt.axis(\"off\")\nplt.show()","b3fcc56d":"sample=train_labels[train_labels['label']==1]\nx=sample['image_id'].head(4).values\nplt.figure(figsize=(18,8))\nfor i,n in enumerate(x):\n    plt.subplot(1,4,i+1)\n    im=Image.open('..\/input\/cassava-leaf-disease-classification\/train_images\/'+n)\n    plt.imshow(im)\n    plt.axis(\"off\")\nplt.show()","21677e10":"sample=train_labels[train_labels['label']==2]\nx=sample['image_id'].head(4).values\nplt.figure(figsize=(18,8))\nfor i,n in enumerate(x):\n    plt.subplot(1,4,i+1)\n    im=Image.open('..\/input\/cassava-leaf-disease-classification\/train_images\/'+n)\n    plt.imshow(im)\n    plt.axis(\"off\")\nplt.show()","1fcf7464":"sample=train_labels[train_labels['label']==3]\nx=sample['image_id'].head(4).values\nplt.figure(figsize=(18,8))\nfor i,n in enumerate(x):\n    plt.subplot(1,4,i+1)\n    im=Image.open('..\/input\/cassava-leaf-disease-classification\/train_images\/'+n)\n    plt.imshow(im)\n    plt.axis(\"off\")\nplt.show()","ad8cf766":"sample=train_labels[train_labels['label']==4]\nx=sample['image_id'].head(4).values\nplt.figure(figsize=(18,8))\nfor i,n in enumerate(x):\n    plt.subplot(1,4,i+1)\n    im=Image.open('..\/input\/cassava-leaf-disease-classification\/train_images\/'+n)\n    plt.imshow(im)\n    plt.axis(\"off\")\nplt.show()","01475ffb":"# Since we have low data on label 0 let's start with it :)\nsample=train_labels[train_labels['label']==0]\nx=sample['image_id'].head(2).values\nimg=Image.open('..\/input\/cassava-leaf-disease-classification\/train_images\/'+x[1])\nplt.imshow(img)\nplt.axis(\"off\")\nplt.show()","a42b53b3":"stream = solt.Stream([\n    slt.Flip(axis=1, p=0.5)  \n    ])\n\nfig = plt.figure(figsize=(16,16))\nn_augs = 4\n\n\nrandom.seed(42)\nfor i in range(n_augs):\n    img=np.array(img)\n    img_aug = stream({'image': img}, return_torch=False, ).data[0].squeeze()\n\n    ax = fig.add_subplot(1,n_augs,i+1)\n    if i == 0:\n        ax.imshow(img)\n    else:\n        ax.imshow(img_aug)\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nplt.show()","c5913e56":"stream = solt.Stream([\n    slt.Flip(axis=1, p=0.5)  ,\n    slt.Rotate(angle_range=(-90, 90), p=1, padding='r')\n    ])\n\nfig = plt.figure(figsize=(16,16))\nn_augs = 4\n\n\nrandom.seed(42)\nfor i in range(n_augs):\n    img=np.array(img)\n    img_aug = stream({'image': img}, return_torch=False, ).data[0].squeeze()\n\n    ax = fig.add_subplot(1,n_augs,i+1)\n    if i == 0:\n        ax.imshow(img)\n    else:\n        ax.imshow(img_aug)\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nplt.show()","323b41cf":"stream = solt.Stream([\n    slt.Flip(axis=1, p=0.5)  ,\n    slt.Rotate(angle_range=(-90, 90), p=1, padding='r'),\n    slt.Shear(range_x=0.3, range_y=0.8, p=0.5, padding='r')\n    ])\n\nfig = plt.figure(figsize=(16,16))\nn_augs = 4\n\n\nrandom.seed(42)\nfor i in range(n_augs):\n    img=np.array(img)\n    img_aug = stream({'image': img}, return_torch=False, ).data[0].squeeze()\n\n    ax = fig.add_subplot(1,n_augs,i+1)\n    if i == 0:\n        ax.imshow(img)\n    else:\n        ax.imshow(img_aug)\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nplt.show()","5fa4c5b8":"stream = solt.Stream([\n    slt.Flip(axis=1, p=0.5)  ,\n    slt.Rotate(angle_range=(-90, 90), p=1, padding='r'),\n    slt.Shear(range_x=0.3, range_y=0.8, p=0.5, padding='r'),\n    slt.Scale(range_x=(0.8, 1.3), padding='r', range_y=(0.8, 1.3), same=False, p=0.5)\n    ])\n\nfig = plt.figure(figsize=(16,16))\nn_augs = 4\n\n\nrandom.seed(42)\nfor i in range(n_augs):\n    img=np.array(img)\n    img_aug = stream({'image': img}, return_torch=False, ).data[0].squeeze()\n\n    ax = fig.add_subplot(1,n_augs,i+1)\n    if i == 0:\n        ax.imshow(img)\n    else:\n        ax.imshow(img_aug)\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nplt.show()","f8d29f2e":"h,w,c=img.shape","9b6cd344":"\nstream = solt.Stream([\n    slt.Flip(axis=1, p=0.5)  ,\n    slt.Rotate(angle_range=(-90, 90), p=1, padding='r'),\n    slt.Shear(range_x=0.3, range_y=0.8, p=0.5, padding='r'),\n    slt.Scale(range_x=(0.8, 1.3), padding='r', range_y=(0.8, 1.3), same=False, p=0.5),\n    slt.Pad((h,w),'r'),\n    slt.Crop((w,w),'r')\n    ])\n\nfig = plt.figure(figsize=(16,16))\nn_augs = 4\n\n\nrandom.seed(42)\nfor i in range(n_augs):\n    img=np.array(img)\n    img_aug = stream({'image': img}, return_torch=False, ).data[0].squeeze()\n\n    ax = fig.add_subplot(1,n_augs,i+1)\n    if i == 0:\n        ax.imshow(img)\n    else:\n        ax.imshow(img_aug)\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nplt.show()","3cce3b93":"\nstream = solt.Stream([\n    slt.Flip(axis=1, p=0.5)  ,\n    slt.Rotate(angle_range=(-90, 90), p=1, padding='r'),\n    slt.Shear(range_x=0.3, range_y=0.8, p=0.5, padding='r'),\n    slt.Scale(range_x=(0.8, 1.3), padding='r', range_y=(0.8, 1.3), same=False, p=0.5),\n    slt.Pad((h,w),'r'),\n    slt.Crop((w,w),'r'),\n    slt.HSV((0, 10), (0, 10), (0, 10))\n    ])\n\nfig = plt.figure(figsize=(16,16))\nn_augs = 4\n\n\nrandom.seed(42)\nfor i in range(n_augs):\n    img=np.array(img)\n    img_aug = stream({'image': img}, return_torch=False, ).data[0].squeeze()\n\n    ax = fig.add_subplot(1,n_augs,i+1)\n    if i == 0:\n        ax.imshow(img)\n    else:\n        ax.imshow(img_aug)\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nplt.show()","043c9999":"\nstream = solt.Stream([\n    slt.Flip(axis=1, p=0.5)  ,\n    slt.Rotate(angle_range=(-90, 90), p=1, padding='r'),\n    slt.Shear(range_x=0.3, range_y=0.8, p=0.5, padding='r'),\n    slt.Scale(range_x=(0.8, 1.3), padding='r', range_y=(0.8, 1.3), same=False, p=0.5),\n    slt.Pad((h,w),'r'),\n    slt.Crop((w,w),'r'),\n    slt.HSV((0, 10), (0, 10), (0, 10)),\n    slt.Blur(k_size=7, blur_type='m')\n    ])\n\nfig = plt.figure(figsize=(16,16))\nn_augs = 4\n\n\nrandom.seed(42)\nfor i in range(n_augs):\n    img=np.array(img)\n    img_aug = stream({'image': img}, return_torch=False, ).data[0].squeeze()\n\n    ax = fig.add_subplot(1,n_augs,i+1)\n    if i == 0:\n        ax.imshow(img)\n    else:\n        ax.imshow(img_aug)\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nplt.show()","a538056f":"\nstream = solt.Stream([\n    slt.Flip(axis=1, p=0.5)  ,\n    slt.Rotate(angle_range=(-90, 90), p=1, padding='r'),\n    slt.Shear(range_x=0.3, range_y=0.8, p=0.5, padding='r'),\n    slt.Scale(range_x=(0.8, 1.3), padding='r', range_y=(0.8, 1.3), same=False, p=0.5),\n    slt.Pad((h,w),'r'),\n    slt.Crop((w,w),'r'),\n    slt.HSV((0, 10), (0, 10), (0, 10)),\n    slt.Blur(k_size=7, blur_type='m'),\n    slt.CutOut(40, p=1),\n    slt.CutOut(50, p=1),\n    slt.CutOut(60, p=1),\n    slt.CutOut(70, p=1),\n\n    ])\n\nfig = plt.figure(figsize=(16,16))\nn_augs = 4\n\n\nrandom.seed(42)\nfor i in range(n_augs):\n    img=np.array(img)\n    img_aug = stream({'image': img}, return_torch=False, ).data[0].squeeze()\n\n    ax = fig.add_subplot(1,n_augs,i+1)\n    if i == 0:\n        ax.imshow(img)\n    else:\n        ax.imshow(img_aug)\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nplt.show()","ffdc37fe":"\nstream = solt.Stream([\n    slt.Flip(axis=1, p=0.5)  ,\n    slt.Rotate(angle_range=(-90, 90), p=1, padding='r'),\n    slt.Shear(range_x=0.3, range_y=0.8, p=0.5, padding='r'),\n    slt.Scale(range_x=(0.8, 1.3), padding='r', range_y=(0.8, 1.3), same=False, p=0.5),\n    slt.Pad((h,w),'r'),\n    slt.Crop((w,w),'r'),\n    slt.HSV((0, 10), (0, 10), (0, 10)),\n    slt.Blur(k_size=7, blur_type='m'),\n    solt.SelectiveStream([\n        slt.CutOut(40, p=1),\n        slt.CutOut(80,p=4),\n        slt.Crop((w,w),'r'),\n        slt.Scale(range_x=(0.8, 1.3), padding='r', range_y=(0.8, 1.3), same=False, p=0.5),\n        solt.Stream(),\n        solt.Stream(),\n    ], n=3)    ])\n\nfig = plt.figure(figsize=(16,16))\nn_augs = 4\n\n\nrandom.seed(42)\nfor i in range(n_augs):\n    img=np.array(img)\n    img_aug = stream({'image': img}, return_torch=False, ).data[0].squeeze()\n\n    ax = fig.add_subplot(1,n_augs,i+1)\n    if i == 0:\n        ax.imshow(img)\n    else:\n        ax.imshow(img_aug)\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nplt.show()","36926c32":"sample=train_labels[train_labels['label']==0]\nx=sample['image_id'].head(4).values\nims=[]\nplt.figure(figsize=(18,8))\nfor i,n in enumerate(x):\n    plt.subplot(1,4,i+1)\n    im=Image.open('..\/input\/cassava-leaf-disease-classification\/train_images\/'+n)    \n    ims.append(np.array(im, dtype=np.uint8))\n    plt.imshow(im)\n    plt.axis(\"off\")\nplt.show()\ntt=tuple(ims)\ndc = solt.DataContainer(tt, 'IIII')\n","be57096e":"# Creating The Stream\nstream = solt.Stream([\n    slt.Flip(axis=1, p=0.5)  ,\n    slt.Rotate(angle_range=(-90, 90), p=1, padding='r'),\n    slt.Shear(range_x=0.3, range_y=0.8, p=0.5, padding='r'),\n    slt.Scale(range_x=(0.8, 1.3), padding='r', range_y=(0.8, 1.3), same=False, p=0.5),\n    slt.Pad((h,w),'r'),\n    slt.Crop((w,w),'r'),\n    slt.HSV((0, 10), (0, 10), (0, 10)),\n    slt.Blur(k_size=7, blur_type='m'),\n    solt.SelectiveStream([\n        slt.CutOut(40, p=1),\n        slt.CutOut(80,p=4),\n        slt.Crop((w,w),'r'),\n        slt.Scale(range_x=(0.8, 1.3), padding='r', range_y=(0.8, 1.3), same=False, p=0.5),\n        solt.Stream(),\n        solt.Stream(),\n    ], n=3)    ])\ndc_res = stream(dc, return_torch=False)\nimg_res= dc_res.data\n# Getting the format of the data\ndc_res.data_format","2d4611aa":"fig, ax = plt.subplots(2, 4, figsize=(16, 8))\nfor i in range(2):\n    for j in range(4):\n        if i==0:\n            \n            ax[i, j].set_title('Original image')\n            ax[i, j].imshow(tt[j].squeeze())\n\n        else:\n            ax[i, j].set_title('Transformed image')\n            ax[i, j].imshow(img_res[j].squeeze())\n        ax[i, j].set_axis_off()\n\n\nplt.axis(\"off\")\nplt.show()\n","e6c2ac54":"\nx=os.listdir('..\/input\/cat-and-dog\/training_set\/training_set\/dogs')\nx=x[1:5]\nims=[]\nplt.figure(figsize=(18,8))\nfor i,n in enumerate(x):\n    plt.subplot(1,4,i+1)\n    im=Image.open('..\/input\/cat-and-dog\/training_set\/training_set\/dogs\/'+n)    \n    im=im.resize((128,128))\n    ims.append(np.array(im, dtype=np.uint8))\n    plt.imshow(im)\n    plt.axis(\"off\")\nplt.show()\ntt=tuple(ims)\ndc = solt.DataContainer(tt, 'IIII')\n","48ba5d9f":"# Creating The Stream\nstream = solt.Stream([\n    slt.Flip(axis=1, p=0.5)  ,\n    slt.Rotate(angle_range=(-90, 90), p=1, padding='r'),\n    slt.Shear(range_x=0.3, range_y=0.8, p=0.5, padding='r'),\n    slt.Scale(range_x=(0.8, 1.3), padding='r', range_y=(0.8, 1.3), same=False, p=0.5),\n    slt.Pad((128,128),'r'),\n    slt.Crop((128,128),'r'),\n    slt.HSV((0, 10), (0, 10), (0, 10)),\n    slt.Blur(k_size=7, blur_type='m'),\n    solt.SelectiveStream([\n        slt.CutOut(40, p=1),\n        slt.Scale(range_x=(0.8, 1.3), padding='r', range_y=(0.8, 1.3), same=False, p=0.5),\n        solt.Stream(),\n        solt.Stream(),\n    ], n=3)    ])\ndc_res = stream(dc, return_torch=False)\nimg_res= dc_res.data\n# Getting the format of the data\ndc_res.data_format","da1534da":"fig, ax = plt.subplots(2, 4, figsize=(16, 8))\nfor i in range(2):\n    for j in range(4):\n        if i==0:\n            \n            ax[i, j].set_title('Original image')\n            ax[i, j].imshow(tt[j].squeeze())\n\n        else:\n            ax[i, j].set_title('Transformed image')\n            ax[i, j].imshow(img_res[j].squeeze())\n        ax[i, j].set_axis_off()\n\n\nplt.axis(\"off\")\nplt.show()\n","e6438c1e":"# Examples Of Label 4","caf8f60f":"# HSV ( hue, saturation ,value )\nIn color image processing, there are various models one of which is the hue, saturation, value (HSV) model. Using this model, an object with a certain color can be detected and to reduce the influence of light intensity from the outside.","1b765e3d":"# Image Augmentation On Cats And Dogs :P","37271068":"# Label Distribution In The Csv File","c6fe20ac":"# Image Augmentation Using SOLT","de6835cc":"# Making DataContainer ( To Contain Images)","19c74b1a":"# Scaling\nScaling is used to change the visual appearance of an image, to alter the quantity of information stored in a scene representation, or as a low-level preprocessor in multi-stage image processing chain which operates on features of a particular scale","1872b716":"# Rotate ( To rotate the image ) ","d583b875":"# Cool Right :)\n# Drop a vote if you liked it :)","1d2eadba":"# Examples Of Label 3","428b205e":"# Cropping The Image\nCropping is the removal of unwanted outer areas from a photographic or illustrated image","74ddf113":"# Blur\nBlurring is an example of applying a low-pass filter to an image. In computer vision, the term \u201clow-pass filter\u201d applies to removing noise from an image while leaving the majority of the image intact. A blur is a very common operation we need to perform before other tasks such as edge detection.","2c3b0d3f":"![](https:\/\/github.com\/MIPT-Oulu\/solt\/raw\/master\/doc\/source\/_static\/logo.png)","db2a3d27":"# Shear \nShear tool is used to shift one part of an image, a layer, a selection or a path to a direction and the other part to the opposite direction","3604d353":"# Importing The Packages","3dfeb83c":"# Data Augmentation Using SOLT","ba6cb684":"### Data augmentation libarary for Deep Learning, which supports images, segmentation masks, labels and keypoints.\n### Features:\n* Support of Images, masks and keypoints for all the transforms (including multiple items at the time)\n* Fast and PyTorch-integrated\n* Convenient and flexible serialization API\n* Excellent documentation\n* Easy to extend\n* 100% Code coverage","5b494e34":"# Simple Stream to Flip the images","7c53ecb0":"# Cutout\nCutting out a specific part of the image :)","1fe4b057":"You can see the cropping in image1 :)","124ec734":"# Analysing The Data","77b157e0":"# Examples Of Label 2","8f0e6fb7":"# Importing The DataFrame","490dacaa":"# SelectiveStreaming\nStream that uniformly selects n out of k given transforms.","574a5988":"# Examples Of Label 1","d6eaa6d8":"![](https:\/\/i.pinimg.com\/originals\/e2\/d7\/c7\/e2d7c71b09ae9041c310cb6b2e2918da.gif)","771863db":"# Examples Of Label 0","84204656":"## You can see the implementation of SOLT with keras in : https:\/\/www.kaggle.com\/accountstatus\/solt-augmentation-and-keras-model :)","dbbc9031":"You can see shear effect in the 4th image :)"}}