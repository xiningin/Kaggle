{"cell_type":{"54511161":"code","2e28abd4":"code","d8be79aa":"code","a5244af5":"code","f0aa41bd":"code","a85ff4a3":"code","ec2fdb51":"code","1a5531ce":"code","588ccdc3":"code","f2ed6513":"code","bb0dbca7":"code","574322fd":"code","8a70dc6d":"code","11dab55a":"code","08edc61c":"code","70379423":"code","e0051f82":"code","b53de7b2":"code","2b9698b1":"code","77cc3a99":"code","766d114f":"code","4ad0f5c5":"code","4b53ee46":"code","81f6730d":"code","230b23f3":"code","2f5f801d":"code","622f3183":"code","8f349a8f":"code","6f93e23b":"code","f7d51450":"code","4d99dd3d":"code","b47e0602":"code","79e08b65":"code","bc6125ab":"code","ce3ae2e1":"code","06b9d2f1":"code","e4144061":"code","2bb1b5cc":"code","5fbd071e":"code","f8d8bb0d":"code","0d9deabf":"code","869ed352":"code","bfde9f23":"markdown","efdbb24e":"markdown","8cd50455":"markdown","06e795cd":"markdown","a9661dcb":"markdown","c3c7acdf":"markdown","02124636":"markdown","bc2a6277":"markdown","bbca5759":"markdown","6ba7f321":"markdown","db8e0348":"markdown","29c6b5df":"markdown","92bc7b7e":"markdown","5f99900f":"markdown","4bab7b4a":"markdown","f28375e5":"markdown","88c30b7d":"markdown","f5680f19":"markdown","aab8fca0":"markdown","7598a98d":"markdown","fdb7e6d0":"markdown"},"source":{"54511161":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n%matplotlib inline","2e28abd4":"# i will work with both files at the same time in order to transform\n# the data at once. in the ML part i'll splite the data in:\n# Train, validation file and test\n\ntrain_df =  pd.read_csv(\"..\/input\/train.csv\", parse_dates=['DateTime'])\ntest_df =  pd.read_csv('..\/input\/test.csv', parse_dates=['DateTime'])\ntest_df['OutcomeType'] = ''\n\ntrain_df = train_df.drop(['AnimalID','OutcomeSubtype'] , axis=1)\ntest_df = test_df.drop('ID', axis=1)\n\nfull_data = pd.concat([train_df, test_df], axis=0)\nfull_data.info()\ndel train_df , test_df","d8be79aa":"#check population of cat and dog balance\nbal_population = full_data.groupby('AnimalType')['DateTime'].count()\nbal_population.plot.bar()","a5244af5":"# Check Missing Data:\ndef num_missing(x):\n    \n    return sum(x.isnull())\n\n#Applying per column:\n\nprint ('Missing data per column\\n', full_data.apply(num_missing, axis=0)) #axis=0 defines that function is to be applied on each column)\n\n#Applying per row:\n# \"'if are there rows with a lot of missing data they should be pulled out of the calculation (althogu in this case the most important columns haven't empty data )'\"\n\n# print ('Missing data per row',df_shelter.apply(num_missing, axis=1).sort_values(ascending=False)) #axis=1 defines that function is to be applied on each row)","f0aa41bd":"#clean empty rows (rows without Datatime, AnimalType and Age aren't usefull)\nmask = ~full_data['DateTime'].isna() & ~full_data['AnimalType'].isna()& ~full_data['AgeuponOutcome'].isna()\n#full_data.loc[mask == False]\n# print(full_data.shape)\nfull_data = full_data.loc[mask, :]\n# print(full_data.shape)","a85ff4a3":"# #another way to check rows with empty values \n# def count_missing(vec):\n#     \"\"\"counts the number of missing values in a vector\n#     \"\"\"\n#     null_vec = pd.isnull(vec) # vector of True\/False\n#     null_count = np.sum(null_vec) # True has a value of 1\n#     return null_count\n\n# df_shelter.apply(count_missing, axis=1).value_counts()","ec2fdb51":"#step 1\nfull_data['AgeuponOutcome'].unique() # how do i sorted values here?.sort()","1a5531ce":"# step 2 & 3\n# Calculating the total animal's age:\nfull_data['AgeuponOutcome_Time']= full_data['AgeuponOutcome'].str.split(' ').str.get(1) #split the data \nfull_data['AgeuponOutcome_Time']=full_data['AgeuponOutcome_Time'].replace( ['year', 'years', 'week', 'weeks', 'month','months', 'days','day'], \n                                                                [365, 365, 7, 7,30.5, 30.5, 1,1]) #replace by the total days \n#fill the empty values in order to be able to do math calculations\nfull_data['AgeuponOutcome_Time'] = full_data['AgeuponOutcome_Time'].fillna(0).astype(float)\n\n#transform the age data to numbers that we can manipulate with math tecniques\nfull_data['AgeuponOutcome_Age']= full_data['AgeuponOutcome'].str.split(' ').str.get(0).fillna(0).astype(float)\n\n#calculate the age in days \nfull_data['AgeuponOutcome_InDays']= full_data['AgeuponOutcome_Age']* full_data['AgeuponOutcome_Time']\n\n#calculate the age in years\nfull_data['AgeuponOutcome_InYears']= full_data['AgeuponOutcome_InDays']\/365\n\n","588ccdc3":"#split the gender of  the animal \ndef General_gender(x):\n    if x == 'Female':\n        return 'Female'\n    elif x == 'Male':\n        return 'Male'\n    else:\n        return 'unknow'\n    \nfull_data['Gender']= full_data['SexuponOutcome'].str.split(' ').str.get(1) #separate general gender\nfull_data['Gender'] = full_data.Gender.apply(General_gender) \n\n# data.loc[data.Gender == 'unknow'].count()\n# data.loc[data.Gender.isnull()].count()\n","f2ed6513":"from numpy import where  #why do i need to import \"where \"again?\n\nAges = full_data.groupby(['AnimalType','AgeuponOutcome_InYears'])['AgeuponOutcome_InYears'].count().reset_index(name='Qty')\na_min, a_max = 0, 3000\ny_min, y_max = 0, 20\nAges.plot('Qty', 'AgeuponOutcome_InYears', kind='scatter',\n          xlim=[a_min, a_max], ylim=[y_min, y_max],\n          c=where(full_data.AnimalType =='Dog', 'blue', 'green'),legend = True, \n          label = 'Dog' , s=50)","bb0dbca7":"def CategoryAge(x):\n    if x <= 1.5:\n        return 'NewBorn'\n    elif 1.5 < x <= 3 :\n        return 'Adolescence'\n    elif 3 < x <= 7 :\n        return 'Adulthood '\n    else:\n        return 'Senior'\n    \nfull_data['AgeCategory'] = full_data.AgeuponOutcome_InYears.apply(CategoryAge)\nsns.factorplot(x=\"AnimalType\", hue=\"AgeCategory\", data=full_data, kind=\"count\",\n                    size=4, aspect=.7)\n","574322fd":"#Drill down into each Animaltype and current OutcomeType\n\ndogs = full_data.loc[(full_data['AnimalType']=='Dog' )]\ncats = full_data.loc[(full_data['AnimalType']=='Cat')]","8a70dc6d":"#Check the segmentation of the cases based on all dog's data, \n#AgeCategory and OutcomeType\n\nsns.factorplot(x=\"OutcomeType\", hue=\"AgeCategory\", data=dogs, kind=\"count\",\n                    size=10, aspect=.7)\n","11dab55a":"#Check the segmentation of the cases based on all cat's data, \n#AgeCategory and OutcomeType\n\nsns.factorplot(x=\"OutcomeType\", hue=\"AgeCategory\", data=cats, kind=\"count\",\n                    size=10, aspect=.7)","08edc61c":"full_data['Day_ofWeek'] = full_data['DateTime'].dt.weekday_name\n \ndef WeekEnd(x):\n    if x in ('Saturday', 'Sunday'):\n        return 'Weekend'\n    else:\n        return 'NoWeekend'\n    \nfull_data['WeekEnd'] = full_data.Day_ofWeek.apply(WeekEnd)\n","70379423":"sns.factorplot(x=\"AgeCategory\", hue=\"WeekEnd\", data=full_data, kind=\"count\",\n                    size=10, aspect=.7)","e0051f82":"from pandas.tseries.holiday import USFederalHolidayCalendar as calendar\ncal = calendar()\ndr = full_data.DateTime\nholidays = cal.holidays(start=dr.min(), end=dr.max())\nfull_data['Holiday'] = full_data['DateTime'].isin(holidays)\n","b53de7b2":"# Check status\nfull_data.groupby(['Holiday'])['DateTime'].count()","2b9698b1":"sns.factorplot(x=\"AnimalType\", hue=\"Gender\", data=full_data, kind=\"count\",\n                    size=5, aspect=.7)","77cc3a99":"full_data['Name_missing'] = full_data['Name'].isna()\nfull_data.groupby(['AnimalType'])['Name_missing'].count()\nfull_data = full_data[full_data['Name_missing']==True]\n# sns.factorplot(x=\"OutcomeType\", hue=\"AnimalType\", data=name_missing, kind=\"count\",\n#                     size=4, aspect=4)","766d114f":"#color\n           \nfull_data['Color1'] = full_data.Color.str.split('\/').str.get(1)  \nfull_data['Color2'] =full_data.Color.str.split('\/').str.get(2)  \nfull_data['unicolor'] = full_data.Color1.apply(lambda x: 1 if x else 0) \n\n# full_data['unicolor'].isna()      ","4ad0f5c5":"#checking if the breed is mix or not\ndef get_mix(x):\n    x = str(x)\n    if x.find('Mix') >= 0: return 'mix'\n    return 'not'\nfull_data['Mix'] = full_data.Breed.apply(get_mix)\n","4b53ee46":"# full_data.columns","81f6730d":"from sklearn.model_selection import train_test_split\n\n#splite the files test and train again\n\nX_test_general =  full_data[full_data['OutcomeType']==''] \nX_train_general = full_data[full_data['OutcomeType']!='']\n\n#create the Target for train\nX_train = X_train_general.drop('OutcomeType', axis = 1)\nX_Target = X_test_general.drop('OutcomeType', axis = 1)\ny_train = X_train_general.OutcomeType\n\n#create file for the frist cheking\nX_train, X_test, y_train, y_test = train_test_split(X_train,y_train,train_size=0.7, random_state=451816)\n\n","230b23f3":"# Choose relevant features for start the prediction \n\nX_train = X_train[['AnimalType','SexuponOutcome',\n                      'AgeuponOutcome_InYears', 'Gender',\n                      'AgeCategory','Day_ofWeek','WeekEnd',\n                      'Holiday','Name_missing','unicolor']]\nX_test = X_test[['AnimalType','SexuponOutcome',\n                      'AgeuponOutcome_InYears', 'Gender',\n                      'AgeCategory','Day_ofWeek','WeekEnd',\n                      'Holiday','Name_missing','unicolor']]\n\nX_train_dm= pd.get_dummies(X_train)\nX_test_dm= pd.get_dummies(X_test)\n\n# X_train.head(2)\n# X_test.head(2)\n# X_train_dm.head(2)\n# y_train.head(2)","2f5f801d":"from sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\n\n#fit the model (X_train_dm,y_train )\nshelter_dt = DecisionTreeClassifier(max_depth=5).fit(X_train_dm, y_train)\n# Assess the model\ncm = confusion_matrix(y_true=y_train,\n                      y_pred=shelter_dt.predict(X_train_dm))\npd.DataFrame(cm,\n             index=shelter_dt.classes_,\n             columns=shelter_dt.classes_)","622f3183":"#Accuracy\nprint('Accuracy Validation', accuracy_score(y_true=y_train,\n                      y_pred=shelter_dt.predict(X_train_dm)))","8f349a8f":"#improve the accuraccy by max_dep\nshelter_dt_3 = DecisionTreeClassifier(max_depth=3).fit(X_train_dm, y_train)\nshelter_dt_5 = DecisionTreeClassifier(max_depth=5).fit(X_train_dm, y_train)\nshelter_dt_20 = DecisionTreeClassifier(max_depth=20).fit(X_train_dm, y_train)\nacc_3 = accuracy_score(y_true=y_train,\n                      y_pred=shelter_dt_3.predict(X_train_dm))\nacc_4 = accuracy_score(y_true=y_train,\n                      y_pred=shelter_dt.predict(X_train_dm))\nacc_5 = accuracy_score(y_true=y_train,\n                      y_pred=shelter_dt_5.predict(X_train_dm))\nacc_20 = accuracy_score(y_true=y_train,\n                      y_pred=shelter_dt_20.predict(X_train_dm))\nMax_dep_t = ['max_dep3', 'max_dep4','max_dep5', 'max_dep20']\nMax_dep_r = [acc_3, acc_4, acc_5, acc_20]\nbest_accurracy = dict(zip(Max_dep_t,Max_dep_r))\nbest_accurracy","6f93e23b":"#fit the model (X_train_dm,y_train )\n# shelter_dt = DecisionTreeClassifier(max_depth=5).fit(X_train_dm, y_train)\n# Assess the model\ncm = confusion_matrix(y_true=y_train,\n                      y_pred=shelter_dt_20.predict(X_train_dm))\npd.DataFrame(cm,\n             index=shelter_dt_20.classes_,\n             columns=shelter_dt_20.classes_)","f7d51450":"#validating the model with the validation file from train\nclf = DecisionTreeClassifier(max_depth=20)\n\nclf.fit(X_train_dm, y_train)\nprint(clf.score(X_train_dm, y_train))\nprint(clf.score(X_test_dm, y_test))\n","4d99dd3d":"# DateTime (during the day)\ninterval = pd.to_datetime(full_data['DateTime'])-pd.to_datetime('2013-01-01')\nfull_data.loc[:, 'DateTime_day'] = interval \/np.timedelta64(1, 'D')\ninterval = ((interval\/np.timedelta64(1, 'D'))%1*24)\ninterval[(interval>=0) & (interval)<6] = 0 #'midnight'\ninterval[(interval>=6) & (interval<12)] = 1 #'morning'\ninterval[(interval>=12) & (interval<18)] = 2 #'afternoon'\ninterval[(interval>=18) & (interval<22)] = 3 #'evening'\ninterval[(interval>=22) & (interval<24)] =0 # 'midnight'\nfull_data.loc[:, 'DateTime_intday'] = interval","b47e0602":"# SexuponOutcome - increace the feature definition\nfull_data.loc[:,['SexuponOutcome']] = full_data['SexuponOutcome'].fillna(full_data['SexuponOutcome'].mode()[0])\nfull_data['Sex'] = full_data['SexuponOutcome'].map({'Intact Female':0,'Spayed Female':0,'Intact Male':1,'Neutered Male':1,'Unknown':2})\nfull_data['IsIntact'] = full_data['SexuponOutcome'].map({'Intact Female':0,'Intact Male':0, 'Neutered Male':1,'Spayed Female':1,'Unknown':2})\nfull_data[['SexuponOutcome','Sex','IsIntact']].head()","79e08b65":"#splite the files test and train again\n\nX_test_general_1 =  full_data[full_data['OutcomeType']==''] \nX_train_general_1 = full_data[full_data['OutcomeType']!='']\n\n#create the Target for train\nX_train_1 = X_train_general_1.drop('OutcomeType', axis = 1)\nX_Target_1 = X_test_general_1.drop('OutcomeType', axis = 1)\ny_train_1 = X_train_general_1.OutcomeType\n\n\n#create file for the frist cheking\nX_train_1, X_test_1, y_train_1, y_test_1 = train_test_split(X_train_1,y_train_1,train_size=0.7, random_state=451816)\n","bc6125ab":"# Choose relevant features for start the prediction \n\nX_train_1 = X_train_1[['DateTime_intday','AnimalType',\n                       'SexuponOutcome','Sex','IsIntact',\n                      'AgeuponOutcome_InYears', 'Gender',\n                      'AgeCategory','Day_ofWeek','WeekEnd',\n                      'Holiday','Name_missing','unicolor']]\nX_test_1 = X_test_1[['DateTime_intday','AnimalType',\n                       'SexuponOutcome','Sex','IsIntact',\n                      'AgeuponOutcome_InYears', 'Gender',\n                      'AgeCategory','Day_ofWeek','WeekEnd',\n                      'Holiday','Name_missing','unicolor']]\n\nX_train_dm_1= pd.get_dummies(X_train_1)\nX_test_dm_1= pd.get_dummies(X_test_1)\n\n# X_train.head(2)\n# X_test.head(2)\n# X_train_dm.head(2)\n# y_train.head(2)","ce3ae2e1":"#fit the model (X_train_dm,y_train )\nshelter_dt_1 = DecisionTreeClassifier(max_depth=5).fit(X_train_dm_1, y_train_1)\n# Assess the model\ncm = confusion_matrix(y_true=y_train_1,\n                      y_pred=shelter_dt_1.predict(X_train_dm_1))\n#Accuracy\nprint('Accuracy with more features',accuracy_score(y_true=y_train,\n                      y_pred=shelter_dt_1.predict(X_train_dm_1)))\n","06b9d2f1":"# Try to keep improving the data\nfrom sklearn.preprocessing import StandardScaler, MaxAbsScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.decomposition import PCA\nfrom sklearn.ensemble import RandomForestClassifier\n\nsteps = [ ('scale', StandardScaler()), ('reduce_dim', PCA(2)), ('clf', RandomForestClassifier()) ]\npipe = Pipeline(steps)\n\npipe.fit(X_train_dm_1, y_train_1)\ntrain_pred = pipe.predict(X_train_dm_1)\nprint('Accuracy with Pipeline Steps', accuracy_score(train_pred, y_train_1))\n","e4144061":"#Validating the model :\n\n# pipe.fit(X_train_dm_1, y_train_1)\ntrain_pred = pipe.predict(X_test_dm_1)\naccuracy_score(train_pred, y_test_1)\n\n","2bb1b5cc":"# classifiers \n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\n\nclf1 = LogisticRegression()\nclf2 = RandomForestClassifier()\nclf3 = SVC()\n\nclassifiers = [('LR', clf1), ('DT', clf2), ('SVM', clf3)]\n\nresults = y_train_1.to_frame()\nfor clf_name, clf in classifiers:\n    clf.fit(X_train_dm_1, y_train_1)\n    results[clf_name] = clf.predict(X_train_dm_1)\n    print(\"{:3} classifier:\\n \\\n        \\ttrain accuracy: {:.2f}\\n \\\n        \\ttest accuracy: {:.2f}\"\\\n        .format(clf_name, \n                clf.score(X_train_dm_1, y_train_1), \n                clf.score(X_test_dm_1, y_test_1)))\n\n  ","5fbd071e":"#checking for overfit\nfrom sklearn.model_selection import cross_val_score\n\nfor n in range (1,5):\n    pipe.set_params(reduce_dim__n_components = n)\n    scores = cross_val_score(pipe,X_train_dm_1, y_train_1,cv=5)\n    print(f'{n} components')\n    print(f'mean: {scores.mean()}')\n    print(f'std: {scores.std()}\\n')","f8d8bb0d":"#upload resoults\n# X_Target_1.head(2)\n\nX_target_1_upload = X_Target_1[['DateTime_intday','AnimalType',\n                       'SexuponOutcome','Sex','IsIntact',\n                      'AgeuponOutcome_InYears', 'Gender',\n                      'AgeCategory','Day_ofWeek','WeekEnd',\n                      'Holiday','Name_missing','unicolor']]\n","0d9deabf":"# Target prediction \nX_target_1_upload = pd.get_dummies(X_target_1_upload)\nprobability = pipe.predict_proba(X_target_1_upload)\n\n#file preparation\ncolumns = pipe.classes_\nresults = pd.DataFrame(data = X_target_1_upload, columns = columns )\n#each result has their corresponding probabilistic value\nresults[\"Adoption\"] = probability[:,0]\nresults[\"Died\"] = probability[:,1]\nresults[\"Euthanasia\"] = probability[:,2]\nresults[\"Return_to_owner\"] = probability[:,3]\nresults[\"Transfer\"] = probability[:,4]\nresults.head(2)","869ed352":"results.to_csv(\"submition.csv\", index= True, index_label='ID')","bfde9f23":"## Shelter Animal Outcomes ##\n\n* Get the data\n* Apply **pre-processing** steps if necessary\n    * data-related (e.g. filtering,  scaling, imputing, encoding, etc.)\n    * model-related (e.g. scoring, dimensionality reduction, feature extraction, etc.)\n* Data Analizis and Visualization \n* Choose a **model**\n    * Apply the **_fit()_** method to \"create\" the model\n    * Apply the **_predict()_** and\/or **_transform()_** methods to \"use\" the model\n    * Apply the **_score()_** method to \"estimate\" the result\n","efdbb24e":"***Seasonality - *** stablish a rule for those animals that are beeing returned . \n\n**Are the season a parameter to take into account?**","8cd50455":"In order to be able to study more deep the data, \nI will create groups of ages based on the following links:\nfor cat category :\nhttps:\/\/www.google.co.il\/search?q=stages+of+age+dogs&source=lnms&tbm=isch&sa=X&ved=0ahUKEwiA3IuE0NXbAhWHK8AKHXbNDf0Q_AUICigB&biw=1366&bih=635#imgrc=eQu8yLrz9XWLRM:\nfor dog's category : \nhttps:\/\/www.google.co.il\/search?q=stages+of+age+dogs&source=lnms&tbm=isch&sa=X&ved=0ahUKEwiA3IuE0NXbAhWHK8AKHXbNDf0Q_AUICigB&biw=1366&bih=635#imgrc=womRL2LDYl5SOM:'''\nMore or less they have the same stages :","06e795cd":"*** Get the data ***","a9661dcb":"Dogs vs cats -- Segmentation Age's ","c3c7acdf":"***Analizis by gender***","02124636":"***Conclusion: ***  no conclusion from the last two analizis ","bc2a6277":"*** Data analizis***","bbca5759":"***Adding features to the analizis in order to obtein better prediction for the animal type***","6ba7f321":"# Conclussion : \n\nRandomForestClassifier will give us the best accuracy in order to predic what will be the OutcomeType:\n    \n            train accuracy: 0.85\n         \ttest accuracy: 0.77","db8e0348":"***Spliting the color and finding more metrics ***","29c6b5df":"***Conclusion:*** Most of the pet's are going outthe shelters during non holidays period","92bc7b7e":"*** Preprocess the data ***","5f99900f":"**Conclusion:** \nAnimal are outcoming dirug the week and not during the weekends.  ","4bab7b4a":"*** Data preparation ***","f28375e5":"## Machine Lerning\n***Decision Tree (Outcome)***\nStart Point","88c30b7d":"Conclusions: \n\n* The most common age for those animals in the shelters are during their first two years of live. \n\n* More dogs are outcoming to shelters due to 'return_to_owner' than cats, and it happend the most during the 'Adolescence' period, although that aren't a big differentces between the rest of the age's categories.","f5680f19":"* Data Standartization \n    * Age ","aab8fca0":"*** Dates and Time Analizis***","7598a98d":"The scattered distribution of animals in ages does not tell us much, except that in both cases the most common age of and specific outcome reason in the shelters is around the first two years of life.","fdb7e6d0":"***Fit the model***"}}