{"cell_type":{"dc2a712e":"code","7bb3633e":"code","87e48250":"code","61da0d49":"code","5fc854ab":"code","3a9b985a":"code","cbfb5826":"code","abc3e49b":"code","2f965a63":"code","237b8238":"code","32a8fbbd":"code","ec93416e":"code","58f1aaa0":"code","5f509325":"code","1f1ee1b2":"code","6824c12b":"code","36ee9a57":"code","56113a68":"code","48a28a6e":"code","c68e40b7":"code","bf35d8e9":"code","850c7ae0":"code","efae4e3d":"code","73d34089":"code","32b3afd0":"code","353ad914":"code","7b84b388":"code","cbb0d39a":"code","89a06f3d":"code","eaa97521":"code","c59c3ee5":"code","a20cbf4e":"code","92264b3f":"code","3c3d9642":"code","d92dec88":"code","d7539a74":"markdown","769f23ec":"markdown","f63874a4":"markdown","d21579bf":"markdown"},"source":{"dc2a712e":"!pip install pretrainedmodels","7bb3633e":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\nimport os\nfrom fastai.vision import *\nfrom fastai.utils import mem\nfrom fastai.callbacks import ReduceLROnPlateauCallback, SaveModelCallback\nfrom sklearn.metrics import f1_score\nfrom fastai.vision.learner import model_meta\nimport pretrainedmodels\nprint('Make sure cuda is installed:', torch.cuda.is_available())\nprint('Make sure cudnn is enabled:', torch.backends.cudnn.enabled)\nmem.gpu_mem_get()","87e48250":"#!kaggle competitions download -c iwildcam-2019-fgvc6","61da0d49":"train = pd.read_csv('..\/input\/train.csv')\ntrain = train[['file_name', 'category_id']]\ntrain.head()","5fc854ab":"test = pd.read_csv('..\/input\/test.csv')\ntest = test[['file_name']]","3a9b985a":"PATH = '..\/input\/'","cbfb5826":"datatest = ImageList.from_df(test, path=PATH, cols=0, folder='test_images')","abc3e49b":"def get_data(bs, size):\n    return (ImageList.from_df(train, path=PATH, cols=0, folder='train_images')\n     .split_by_rand_pct(0.2, seed=47)\n     .label_from_df(cols=1)\n     .transform(get_transforms(xtra_tfms=[pad(mode='reflection')]), size=size)\n     .add_test(datatest)\n     .databunch(bs=bs)) ","2f965a63":"data = get_data(128, 32)\n#stats = data.batch_stats()\ndata.normalize(imagenet_stats)","237b8238":"data.show_batch()","32a8fbbd":"class FocalLoss(nn.Module):\n    def __init__(self, alpha=1., gamma=1.):\n        super().__init__()\n        self.alpha = alpha\n        self.gamma = gamma\n\n    def forward(self, inputs, targets, **kwargs):\n        CE_loss = nn.CrossEntropyLoss(reduction='none')(inputs, targets)\n        pt = torch.exp(-CE_loss)\n        F_loss = self.alpha * ((1-pt)**self.gamma) * CE_loss\n        return F_loss.mean()\n\nloss_func = FocalLoss(gamma=1.)","ec93416e":"def senet154(pretrained=False):\n    pretrained = 'imagenet' if pretrained else None\n    model = pretrainedmodels.senet154(pretrained=pretrained)\n    return model","58f1aaa0":"_se_resnet_meta = {'cut': -3, 'split': lambda m: (m[0][3], m[1]) }\nmodel_meta[senet154] = _se_resnet_meta","5f509325":"learn = create_cnn(data, senet154,  ps=0.5, wd=1e-1, loss_func=loss_func, metrics=[FBeta()], pretrained=True).to_fp16().mixup()","1f1ee1b2":"lr = 4.79E-02","6824c12b":"RLR = ReduceLROnPlateauCallback(learn, monitor='f_beta',patience = 2)\nSAVEML = SaveModelCallback(learn, every='improvement', monitor='f_beta', name='best')","36ee9a57":"#learn.fit_one_cycle(5, lr, callbacks = [RLR, SAVEML])","56113a68":"learn.recorder.plot_losses() ","48a28a6e":"learn.save('se-1')","c68e40b7":"learn.load('best')","bf35d8e9":"learn.unfreeze()","850c7ae0":"#learn.fit_one_cycle(5, slice(1e-5,1e-3), callbacks = [RLR, SAVEML])","efae4e3d":"learn.load('best')","73d34089":"learn.save('se-2')","32b3afd0":"learn.recorder.plot_losses() ","353ad914":"pred, y = learn.get_preds()\n#pred, y = learn.TTA()","7b84b388":"f1_score = f1_score(y, np.argmax(pred.numpy(), 1), average='macro')  \nf1_score","cbb0d39a":"#learn = learn.to_fp32()","89a06f3d":"#pred_t, _ = learn.TTA(ds_type=DatasetType.Test)","eaa97521":"#import os\n#test_ids = [os.path.basename(f)[:-4] for f in learn.data.test_ds.items]\n#subm = pd.read_csv('sample_submission.csv')\n#orig_ids = list(subm['Id'])","c59c3ee5":"#pred_t2 = np.argmax(pred_t.numpy(), 1)","a20cbf4e":"def create_submission(orig_ids, test_ids, preds):\n    preds_dict = dict((k, v) for k, v in zip(test_ids, preds))\n    pred_cor = [preds_dict[id] for id in orig_ids]\n    df = pd.DataFrame({'id':orig_ids,'Predicted':pred_cor})\n    df.to_csv(f'submission_{f1_score}.csv', header=True, index=False)\n    return df","92264b3f":"#sub = create_submission(orig_ids, test_ids, pred_t2)","3c3d9642":"#sub.tail()","d92dec88":"#! kaggle competitions submit -c iwildcam-2019-fgvc6 -f submission_0.5804866967400385.csv -m densenet","d7539a74":"# Validation","769f23ec":"learn.recorder.plot(suggestion=True)","f63874a4":"# Inference\nhttps:\/\/www.kaggle.com\/iafoss\/pretrained-resnet34-with-rgby-0-460-public-lb","d21579bf":"learn.lr_find()"}}