{"cell_type":{"44353e89":"code","d47c8b32":"code","78767021":"code","6fb53653":"code","4ba9a1f1":"code","b58b1c5b":"code","a4f54b10":"code","6fb9ea88":"code","04391ba2":"code","ea82564b":"code","42488672":"code","27a6c4a4":"code","fdccf796":"code","2e9b414c":"code","380a5a22":"code","f7a962e7":"code","cd28eeb7":"code","29248dc6":"code","7eae2cc2":"code","aca6ada4":"code","c933a7af":"code","029a5968":"code","d2122ad3":"code","6a9a7361":"code","6c8becc8":"code","d9b7a9ab":"code","b602dd6e":"code","9a7ebea5":"code","2e99f0c6":"code","7c3a607b":"code","dd192b0d":"code","3c93fa03":"code","2c2f84a6":"code","9ff1f3eb":"code","1f6ecc88":"code","6807fe5a":"code","4679bbf4":"code","dd918f07":"code","36108667":"code","c17dcabe":"code","960bdea3":"code","97f9fc46":"code","589e2597":"markdown","9a62c95a":"markdown","98cf7380":"markdown","da036e9f":"markdown","c3b5c331":"markdown","a51c4013":"markdown","c30cff4a":"markdown","19414259":"markdown"},"source":{"44353e89":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\ndf = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndf.head()","d47c8b32":"df.info()","78767021":"df.describe()","6fb53653":"df['DEATH_EVENT'].unique()","4ba9a1f1":"df.isnull().sum()","b58b1c5b":"yes = df[df['DEATH_EVENT'] == 1]['DEATH_EVENT']\nno = df[df['DEATH_EVENT'] == 0]['DEATH_EVENT']\n\nprint(len(no))\nprint(len(yes))","a4f54b10":"plt.figure(figsize=(16,10))\nsns.heatmap(df.corr(method='pearson'), annot=True)","6fb9ea88":"sns.distplot(x=df['age'])","04391ba2":"sns.kdeplot(\n   data=df, x=\"creatinine_phosphokinase\", hue=\"DEATH_EVENT\",\n   fill=True, common_norm=False, palette=\"crest\",\n   alpha=.5, linewidth=0,\n)","ea82564b":"sns.kdeplot(\n   data=df, x=\"platelets\", hue=\"DEATH_EVENT\",\n   fill=True, common_norm=False, palette=\"crest\",\n   alpha=.5, linewidth=0,\n)","42488672":"sns.kdeplot(\n   data=df, x=\"serum_creatinine\", hue=\"DEATH_EVENT\",\n   fill=True, common_norm=False, palette=\"crest\",\n   alpha=.5, linewidth=0,\n)","27a6c4a4":"sns.kdeplot(\n   data=df, x=\"serum_sodium\", hue=\"DEATH_EVENT\",\n   fill=True, common_norm=False, palette=\"crest\",\n   alpha=.5, linewidth=0,\n)","fdccf796":"sns.kdeplot(\n   data=df, x=\"time\", hue=\"DEATH_EVENT\",\n   fill=True, common_norm=False, palette=\"crest\",\n   alpha=.5, linewidth=0,\n)","2e9b414c":"age_yes = df[df['DEATH_EVENT'] == 1].age\nage = df.age\n\nplt.figure(figsize=(8,6))\nplt.xlabel('Age')\nplt.ylabel('Death Event')\nplt.hist([age_yes, age], label=['Death Event', 'Total per age'])\nplt.legend()","380a5a22":"plat = df[df['DEATH_EVENT'] == 1].platelets\n\nplt.figure(figsize=(8,6))\nplt.xlabel('Platelets')\nplt.ylabel('Death Event')\nplt.hist(plat, label=['Death Event'])\nplt.legend()","f7a962e7":"sns.countplot(df['anaemia'])","cd28eeb7":"sns.countplot(df['diabetes'])","29248dc6":"from scipy.stats import skew\nprint(skew(df['age']))\nprint(skew(df['serum_sodium']))\nprint(skew(df['serum_creatinine']))\nprint(skew(df['platelets']))\nprint(skew(df['time'])) \nprint(skew(df['creatinine_phosphokinase'])) \nprint(skew(df['ejection_fraction'])) ","7eae2cc2":"sns.catplot(x='diabetes', y=\"age\", hue = 'DEATH_EVENT', kind=\"box\", data=df)","aca6ada4":"sns.catplot(x='high_blood_pressure', y=\"serum_sodium\",hue = 'DEATH_EVENT', kind=\"box\", data=df)","c933a7af":"sns.lineplot(data= df, x='creatinine_phosphokinase',y='platelets', color='goldenrod')","029a5968":"sns.lineplot(data= df, x='creatinine_phosphokinase',y='serum_creatinine', color='goldenrod')","d2122ad3":"c = ['age', 'creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_creatinine', 'serum_sodium', 'time']\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ndf[c] = scaler.fit_transform(df[c]) ","6a9a7361":"df.head()","6c8becc8":"X = df.drop('DEATH_EVENT', axis='columns')\ny = df['DEATH_EVENT']\n\nfrom imblearn.over_sampling import SMOTE\nsmote = SMOTE(sampling_strategy='minority')\nX_sm, y_sm = smote.fit_resample(X,y)\n\nfrom sklearn.model_selection import train_test_split\nX_tain, X_test, y_train, y_test = train_test_split(X_sm,y_sm)","d9b7a9ab":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(X_tain, y_train)","b602dd6e":"lr_pred = lr.predict(X_test)\nlr_pred","9a7ebea5":"lr.score(X_test, y_test)","2e99f0c6":"from sklearn.metrics import classification_report as cr\nprint(cr(y_test, lr_pred))","7c3a607b":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\nrfc.fit(X_tain, y_train)","dd192b0d":"rfc_predict = rfc.predict(X_test)\nrfc_predict","3c93fa03":"rfc.score(X_test, y_test)","2c2f84a6":"import xgboost as xgb\nmodel = xgb.XGBClassifier()\nmodel.fit(X_tain,y_train)\ny_pred1 = model.predict(X_test)","9ff1f3eb":"model.score(X_test, y_test)","1f6ecc88":"from sklearn.neighbors import KNeighborsClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nimport lightgbm\nfrom sklearn.tree import DecisionTreeClassifier","6807fe5a":"dt_clf = DecisionTreeClassifier(max_leaf_nodes=3, random_state=0, criterion='entropy')\ndt_clf.fit(X_tain, y_train)\ndt_pred = dt_clf.predict(X_test)\n","4679bbf4":"dt_clf.score(X_test, y_test)","dd918f07":"from sklearn.metrics import precision_score\nlgb_clf = lightgbm.LGBMClassifier(max_depth=2, random_state=4)\nlgb_clf.fit(X_tain,y_train)\n","36108667":"lgb_clf.score(X_test, y_test)","c17dcabe":"import tensorflow as tf\nfrom tensorflow import keras\n\nann = keras.Sequential([keras.layers.Dense(12, input_shape=(12,), activation='relu'),\n                        keras.layers.Dense(12, activation='relu'),\n                        keras.layers.Dense(1, activation='sigmoid')])\nann.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nann.fit(X_tain, y_train, epochs=100)","960bdea3":"pred = ann.predict(X_test)\n\nann_pred = []\nfor i in pred:\n  if i > 0.5:\n    ann_pred.append(1)\n  else:\n    ann_pred.append(0)","97f9fc46":"print(cr(y_test, ann_pred))","589e2597":"# Decision Tree Classifier Build","9a62c95a":"# XGBClassifier build","98cf7380":"# Data Visualization","da036e9f":"# Import Libraray","c3b5c331":"# Data Preprocessiong","a51c4013":"# Artificial Neural Network Build","c30cff4a":"# Data Analysis","19414259":"# Model Buildin Logistic Regression"}}