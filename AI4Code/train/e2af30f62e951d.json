{"cell_type":{"388ea2e8":"code","5769d35f":"code","8e088e75":"code","cf76e35b":"code","02cf87d3":"code","c4651e92":"code","f44d884d":"code","3f151ca8":"code","45e0b1d3":"code","0fdd68c2":"code","89886ae4":"code","bfec5dc6":"code","e5be777d":"code","a0f5387d":"code","1f13e00d":"code","76d24012":"code","b77a08c0":"code","20df47ab":"code","aa859ba8":"code","ac98b702":"code","df243a4d":"code","c7e0c053":"code","57e7b748":"code","3b22f72f":"code","accd2ef5":"code","cbe70c76":"code","ab7d51ac":"code","21e9e2a0":"code","2a94cd1f":"code","67920f08":"code","fb413ced":"code","7f85e927":"code","a2b8b9f8":"code","522ac5f8":"code","02fe0622":"code","c3b5b5bc":"code","43b1705f":"code","63d7b7d8":"code","0a15fc7d":"code","b45a7a86":"code","2fed907b":"code","06ef1d31":"code","8fd86d1c":"code","8033675b":"markdown","b5dc14ae":"markdown","85482ac2":"markdown","0ce5894a":"markdown","37b4d665":"markdown","22de023c":"markdown","602fa31c":"markdown","dd804ac3":"markdown","37c09470":"markdown","2338fd04":"markdown","0c3f7893":"markdown","966ac3bc":"markdown","ed543c0b":"markdown","e7fee19e":"markdown","6d75614c":"markdown","adf5bd82":"markdown","75814512":"markdown","a0ecd82a":"markdown"},"source":{"388ea2e8":"## Image augmentation\n#!pip install imgaug\n\n## ONLY used for dice metric and IOU metric computation, models are made from scratch\n#!pip install -U segmentation-models\n\n## Required to save models in HDF5 format\n#!pip install pyyaml h5py\n\n## Install nibabel\n#!pip install nibabel\n\n## Install scikit-learn library\n#!pip install sklearn\n\n## Install tensorflow and keras\n#!pip uninstall tensorflow==2.2.0\n#!pip install keras\n#!pip install keras-segmentation","5769d35f":"import pandas as pd\nimport numpy as np\nimport scipy\nimport matplotlib.pyplot as plt\nimport seaborn\nimport cv2 as cv\nimport nibabel as nib\nimport pickle\nimport imgaug as ia\nimport imgaug.augmenters as iaa\nimport tqdm\nimport gc\nimport warnings\nimport tensorflow as tf\nfrom keras import backend as K\nfrom keras import losses, metrics\nfrom keras import optimizers\nfrom keras import callbacks\nfrom keras.models import Model\nfrom keras.layers import Input, BatchNormalization, Activation, Dense, Dropout\nfrom keras.layers import concatenate, Conv2D, MaxPooling2D, Conv2DTranspose\nfrom keras.layers import Multiply\nfrom sklearn.model_selection import train_test_split\nimport keras_segmentation as ks\n\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nprint(\"Version: \", tf.version.VERSION)\nprint(\"GPU is\", \"available\" if tf.config.experimental.list_physical_devices(\"GPU\") else \"not available\")","8e088e75":"metadata = pd.read_csv('..\/input\/covid19-ct-scans\/metadata.csv')\n# metadata.replace('..\/input\/covid19-ct-scans\/', '', regex=True, inplace=True)\nprint(metadata.shape)\nmetadata.head()","cf76e35b":"# img_size is the preferred image size to which the image is to be resized\nimg_size = 512","02cf87d3":"clahe = cv.createCLAHE(clipLimit=3.0)\n\ndef clahe_enhancer(img, clahe, axes):\n    '''Contract Limited Adaptive Histogram Equalizer'''\n    img = np.uint8(img*255)  \n    clahe_img = clahe.apply(img)\n\n    if len(axes) > 0 :    \n        axes[0].imshow(img, cmap='bone')\n        axes[0].set_title(\"Original CT scan\")\n        axes[0].set_xticks([]); axes[0].set_yticks([])\n\n        axes[1].imshow(clahe_img, cmap='bone')\n        axes[1].set_title(\"CLAHE Enhanced CT scan\")\n        axes[1].set_xticks([]); axes[1].set_yticks([])\n\n        if len(axes) > 2 :\n            axes[2].hist(img.flatten(), alpha=0.4, label='Original CT scan')\n            axes[2].hist(clahe_img.flatten(), alpha=0.4, label=\"CLAHE Enhanced CT scan\")\n            plt.legend()\n        \n    return(clahe_img)","c4651e92":"cts = nib.load(metadata.loc[0, 'ct_scan'])\nslices = cts.shape[2]\nprint('Number of slices: ', slices)\n    \narr = cts.get_fdata()\narr = np.rot90(np.array(arr))\narr = arr[:,:,range(80,200,20)]\narr = np.reshape(np.rollaxis(arr, 2),(arr.shape[2],arr.shape[0],arr.shape[1], 1))\n\nfig, axes = plt.subplots(3, 6, figsize=(21,10))    \n\nfor ii in range(arr.shape[0]):\n    img = cv.resize(arr[ii], dsize=(img_size, img_size), interpolation=cv.INTER_AREA)\n    xmax, xmin = img.max(), img.min()\n    img = (img - xmin)\/(xmax - xmin)\n    clahe_img = clahe_enhancer(img, clahe, list(axes[:, ii]))","f44d884d":"def get_contours(img):\n    img = np.uint8(img*255)\n    \n    kernel = np.ones((3,3),np.float32)\/9\n    img = cv.filter2D(img, -1, kernel)\n    \n    ret, thresh = cv.threshold(img, 50, 255, cv.THRESH_BINARY)\n    contours, hierarchy = cv.findContours(thresh, 2, 1)\n    #Areas = [cv.contourArea(cc) for cc in contours]; print(Areas)\n    \n    # filter contours that are too large or small\n    size = get_size(img)\n    contours = [cc for cc in contours if contourOK(cc, size)]\n    return contours\n\ndef get_size(img):\n    ih, iw = img.shape\n    return iw * ih\n\ndef contourOK(cc, size):\n    x, y, w, h = cv.boundingRect(cc)\n    if ((w < 50 and h > 150) or (w > 150 and h < 50)) : \n        return False # too narrow or wide is bad\n    area = cv.contourArea(cc)\n    return area < (size * 0.5) and area > 200\n\ndef find_boundaries(img, contours):\n    # margin is the minimum distance from the edges of the image, as a fraction\n    ih, iw = img.shape\n    minx = iw\n    miny = ih\n    maxx = 0\n    maxy = 0\n\n    for cc in contours:\n        x, y, w, h = cv.boundingRect(cc)\n        if x < minx: minx = x\n        if y < miny: miny = y\n        if x + w > maxx: maxx = x + w\n        if y + h > maxy: maxy = y + h\n\n    return (minx, miny, maxx, maxy)\n\ndef crop_(img, boundaries):\n    minx, miny, maxx, maxy = boundaries\n    return img[miny:maxy, minx:maxx]\n    \ndef crop_img(img, axes) :\n    contours = get_contours(img)\n    #plt.figure() # uncomment to troubleshoot\n    #canvas = np.zeros_like(img)\n    #cv.drawContours(canvas , contours, -1, (255, 255, 0), 1)\n    #plt.imshow(canvas)\n    bounds = find_boundaries(img, contours)\n    cropped_img = crop_(img, bounds)\n\n    if len(axes) > 0 :\n        axes[0].imshow(img, cmap='bone')\n        axes[0].set_title(\"Original CT scan\")\n        axes[0].set_xticks([]); axes[0].set_yticks([])\n        \n        axes[1].imshow(cropped_img, cmap='bone')\n        axes[1].set_title(\"Cropped CT scan\")\n        axes[1].set_xticks([]); axes[1].set_yticks([])\n        \n    return cropped_img, bounds","3f151ca8":"cts = nib.load(metadata.loc[0, 'ct_scan'])\nslices = cts.shape[2]\nprint('Number of slices: ', slices)\n    \narr = cts.get_fdata()\narr = np.rot90(np.array(arr))\narr = arr[:,:,range(80,200,20)]\narr = np.reshape(np.rollaxis(arr, 2),(arr.shape[2],arr.shape[0],arr.shape[1], 1))\n\nfig, axes = plt.subplots(3, 6, figsize=(18,9))    \n\nfor ii in range(arr.shape[0]):\n    img = cv.resize(arr[ii], dsize=(img_size, img_size), interpolation=cv.INTER_AREA)\n    xmax, xmin = img.max(), img.min()\n    img = (img - xmin)\/(xmax - xmin)\n    _, bounds = crop_img(img, [])\n    axes[0,ii].imshow(img, cmap='bone')\n    axes[0,ii].set_title('Original CT')\n    axes[0,ii].set_xticks([]); axes[0,ii].set_yticks([])\n    \n    clahe_img = clahe_enhancer(img, clahe, [])\n    axes[1,ii].imshow(clahe_img, cmap='bone')\n    axes[1,ii].set_title('Enhanced CT')\n    axes[1,ii].set_xticks([]); axes[1,ii].set_yticks([])\n    \n    cropped_img = crop_(clahe_img, bounds)\n    axes[2,ii].imshow(cropped_img, cmap='bone')\n    axes[2,ii].set_title('Enhanced & cropped')\n    axes[2,ii].set_xticks([]); axes[2,ii].set_yticks([])\n","45e0b1d3":"cts = nib.load(metadata.loc[0, 'ct_scan'])\nlungs = nib.load(metadata.loc[0, 'lung_mask'])\ninfec = nib.load(metadata.loc[0, 'infection_mask'])\nslices = cts.shape[2]\n    \narr_cts = cts.get_fdata()\narr_lungs = lungs.get_fdata()\narr_infec = infec.get_fdata()\n\narr_cts = np.rot90(np.array(arr_cts))\narr_lungs = np.rot90(np.array(arr_lungs))\narr_infec = np.rot90(np.array(arr_infec))\n\narr_cts = arr_cts[:, :, range(80,200,20)]\narr_lungs = arr_lungs[:, :, range(80,200,20)]\narr_infec = arr_infec[:, :, range(80,200,20)]\n\narr_cts = np.reshape(np.rollaxis(arr_cts, 2), \n                     (arr_cts.shape[2],arr_cts.shape[0],arr_cts.shape[1], 1))\narr_lungs = np.reshape(np.rollaxis(arr_lungs, 2), \n                     (arr_lungs.shape[2],arr_lungs.shape[0],arr_lungs.shape[1], 1))\narr_infec = np.reshape(np.rollaxis(arr_infec, 2), \n                     (arr_infec.shape[2],arr_infec.shape[0],arr_infec.shape[1], 1))\n\nfig, axes = plt.subplots(3, 6, figsize=(18,6))    \n\nfor ii in range(arr_cts.shape[0]):\n    img_ct = cv.resize(arr_cts[ii], dsize=(img_size, img_size), interpolation=cv.INTER_AREA)\n    img_lungs = cv.resize(arr_lungs[ii], dsize=(img_size, img_size), interpolation=cv.INTER_AREA)\n    img_infec = cv.resize(arr_infec[ii], dsize=(img_size, img_size), interpolation=cv.INTER_AREA)\n\n    xmax, xmin = img_lungs.max(), img_lungs.min()\n    img_lungs = (img_lungs - xmin)\/(xmax - xmin)\n    cropped_lungs, bounds = crop_img(img_lungs, [])\n    \n    xmax, xmin = img_ct.max(), img_ct.min()\n    img_ct = (img_ct - xmin)\/(xmax - xmin)\n    clahe_ct = clahe_enhancer(img_ct, clahe, [])\n    cropped_ct = crop_(clahe_ct, bounds)\n    cropped_infec = crop_(img_infec, bounds)\n    \n    axes[0,ii].imshow(cropped_ct, cmap='bone')\n    axes[0,ii].set_title(\"CT scan\")\n    axes[0,ii].set_xticks([]); axes[0,ii].set_yticks([])\n    \n    axes[1,ii].imshow(cropped_lungs, cmap='Greens')\n    axes[1,ii].set_title(\"Lungs mask\")\n    axes[1,ii].set_xticks([]); axes[1,ii].set_yticks([])\n\n    axes[2,ii].imshow(cropped_infec, cmap='Reds')\n    axes[2,ii].set_title(\"Infection mask\")\n    axes[2,ii].set_xticks([]); axes[2,ii].set_yticks([])","0fdd68c2":"cts_all = []\nlungs_all = []\ninfects_all = []\nmax_w, max_h = 0, 0 #max width and height\n\nfor fnum in tqdm.tqdm(range(20)) : #range(metadata.shape[0])) :\n    cts = nib.load(metadata.loc[fnum, 'ct_scan'])\n    lungs = nib.load(metadata.loc[fnum, 'lung_mask'])\n    infec = nib.load(metadata.loc[fnum, 'infection_mask'])\n    \n    slices = cts.shape[2]\n\n    arr_cts = cts.get_fdata()\n    arr_lungs = lungs.get_fdata()\n    arr_infec = infec.get_fdata()\n\n    arr_cts = np.rot90(np.array(arr_cts))\n    arr_lungs = np.rot90(np.array(arr_lungs))\n    arr_infec = np.rot90(np.array(arr_infec))\n\n    arr_cts = arr_cts[:, :, round(slices*0.2):round(slices*0.8)]\n    arr_lungs = arr_lungs[:, :, round(slices*0.2):round(slices*0.8)]\n    arr_infec = arr_infec[:, :, round(slices*0.2):round(slices*0.8)]\n\n    arr_cts = np.reshape(np.rollaxis(arr_cts, 2), \n                     (arr_cts.shape[2],arr_cts.shape[0],arr_cts.shape[1], 1))\n    arr_lungs = np.reshape(np.rollaxis(arr_lungs, 2), \n                     (arr_lungs.shape[2],arr_lungs.shape[0],arr_lungs.shape[1], 1))\n    arr_infec = np.reshape(np.rollaxis(arr_infec, 2), \n                     (arr_infec.shape[2],arr_infec.shape[0],arr_infec.shape[1], 1))\n    \n    for ii in range(arr_cts.shape[0]):\n        img_lungs = cv.resize(arr_lungs[ii], dsize=(img_size, img_size), \n                              interpolation=cv.INTER_AREA)\n        xmax, xmin = img_lungs.max(), img_lungs.min()\n        img_lungs = (img_lungs - xmin)\/(xmax - xmin)\n        cropped_lungs, bounds = crop_img(img_lungs, [])\n        lungs_all.append(cropped_lungs)\n        \n        h, w = cropped_img.shape\n        max_h, max_w = max(max_h, h), max(max_w, w)\n\n        img_ct = cv.resize(arr_cts[ii], dsize=(img_size, img_size), \n                           interpolation=cv.INTER_AREA)\n        xmax, xmin = img_ct.max(), img_ct.min()\n        img_ct = (img_ct - xmin)\/(xmax - xmin)\n        clahe_ct = clahe_enhancer(img_ct, clahe, [])\n        cropped_ct = crop_(clahe_ct, bounds)\n        cts_all.append(cropped_ct)\n\n        img_infec = cv.resize(arr_infec[ii], dsize=(img_size, img_size), \n                              interpolation=cv.INTER_AREA)\n        cropped_infec = crop_(img_infec, bounds)\n        infects_all.append(cropped_infec)","89886ae4":"print(len(cts_all))","bfec5dc6":"num_pix = 100\ndel_lst = []\nfor ii in tqdm.tqdm(range(len(cts_all))) :\n    try :\n        cts_all[ii] = cv.resize(cts_all[ii], dsize=(num_pix, num_pix), interpolation=cv.INTER_AREA)\n        cts_all[ii] = np.reshape(cts_all[ii], (num_pix, num_pix, 1))\n\n        lungs_all[ii] = cv.resize(lungs_all[ii], dsize=(num_pix, num_pix), interpolation=cv.INTER_AREA)\n        lungs_all[ii] = np.reshape(lungs_all[ii], (num_pix, num_pix, 1))\n\n        infects_all[ii] = cv.resize(infects_all[ii], dsize=(num_pix, num_pix), interpolation=cv.INTER_AREA)\n        infects_all[ii] = np.reshape(infects_all[ii], (num_pix, num_pix, 1))\n    except :\n        del_lst.append(ii)\n        \nfor idx in del_lst[::-1] :\n    del cts_all[idx]\n    del lungs_all[idx]\n    del infects_all[idx]","e5be777d":"fig, axes = plt.subplots(1, 3, figsize=(9,3))\n\naxes[0].imshow(cts_all[250][:, :, 0])\naxes[0].set_title(\"Enhanced & Cropped CT\")\n\naxes[1].imshow(lungs_all[250][:, :, 0], cmap='Greens')\naxes[1].set_title(\"Lungs\")\n\naxes[2].imshow(infects_all[250][:, :, 0], cmap='Reds')\naxes[2].set_title(\"Infection\");","a0f5387d":"with open('preprocessed_cts.cp', 'wb') as myfile:\n    pickle.dump({'cts_all': cts_all, 'lungs_all': lungs_all, 'infects_all': infects_all}, myfile)","1f13e00d":"infect_bool = np.ones((1, len(infects_all)))\nfor ii in range(len(infects_all)):\n    if np.unique(infects_all[ii]).size == 1:\n        infect_bool[0, ii] = 0\n        \nprint(\"Number of CTs with no infection: %d\" %(len(infects_all)-infect_bool.sum()))\n\n#for index in sorted(no_masks, reverse = True):  \n#    del infections[index]  \n#    del cts[index]","76d24012":"ia.seed(1)\n\nseq = iaa.Sequential([\n    iaa.Fliplr(0.5), # horizontal flips\n    iaa.Flipud(0.5), # vertical flips\n    \n    # Apply affine transformations to each image.\n    # Scale\/zoom them, translate\/move them, rotate them and shear them.\n    iaa.Affine(\n        scale={\"x\": (0.8, 1.2), \"y\": (0.8, 1.2)}, # scale images\n        translate_percent={\"x\": (-0.2, 0.2), \"y\": (-0.2, 0.2)},\n        rotate=(-15, 15),\n        shear=(-15, 15)\n    )\n], random_order=True) # apply augmenters in random order","b77a08c0":"num_augs = round(len(cts_all)\/2.)\nrand_idx = np.random.randint(0, len(cts_all), size=num_augs)\n\nsample_cts = [cts_all[ii] for ii in rand_idx]\nsample_lungs = [lungs_all[ii] for ii in rand_idx]\nsample_infects = [infects_all[ii] for ii in rand_idx]","20df47ab":"seq_det = seq.to_deterministic()\ncts_aug = seq_det.augment_images(sample_cts)\nlungs_aug = seq_det.augment_images(sample_lungs)\ninfects_aug = seq_det.augment_images(sample_infects)","aa859ba8":"fig, axes = plt.subplots(3, 5, figsize=(15,9))\n\nfor ii in range(5) :\n    axes[0, ii].imshow(cts_aug[ii*10+50][:, :, 0])\n    axes[0, ii].set_title(\"Enhanced & Cropped CT\")\n\n    axes[1, ii].imshow(lungs_aug[ii*10+50][:, :, 0], cmap='Greens')\n    axes[1, ii].set_title(\"Lungs\")\n\n    axes[2, ii].imshow(infects_aug[ii*10+50][:, :, 0], cmap='Reds')\n    axes[2, ii].set_title(\"Infection\");","ac98b702":"cts_all = tf.convert_to_tensor(cts_all)\ncts_aug = tf.convert_to_tensor(cts_aug)\nlungs_all = tf.convert_to_tensor(lungs_all)\nlungs_aug = tf.convert_to_tensor(lungs_aug)\ninfects_all = tf.convert_to_tensor(infects_all)\ninfects_aug = tf.convert_to_tensor(infects_aug)\n\ncts = tf.concat([cts_all, cts_aug], axis=0)\nlungs = tf.concat([lungs_all, lungs_aug], axis=0)\ninfects = tf.concat([infects_all, infects_aug], axis=0)","df243a4d":"indices = tf.range(start=0, limit=cts.shape[0], dtype=tf.int32)\nshuffled_indices = tf.random.shuffle(indices)\n                       \ncts = tf.gather(cts, shuffled_indices)\nlungs = tf.gather(lungs, shuffled_indices)\ninfects = tf.gather(infects, shuffled_indices)\n\nprint(cts.shape, lungs.shape, infects.shape)","c7e0c053":"with open('augmented_cts.cp', 'wb') as myfile:\n    pickle.dump({'cts': cts, 'lungs': lungs, 'infects': infects}, myfile)","57e7b748":"def plot_cts_infects(ct, infect, axes) :\n\n    axes[0].imshow(ct[:,:,0], cmap='bone')\n    axes[0].set_title('CT image')\n\n    axes[1].imshow(ct[:,:,0], cmap='bone')\n    axes[1].imshow(infect[:,:,0], alpha=0.5, cmap='nipy_spectral')\n    axes[1].set_title('Infection')","3b22f72f":"fig, axes = plt.subplots(2, 5, figsize=(15,6))\n\nfor ii, idx in enumerate(range(150, 350, 40)) :\n    plot_cts_infects(cts[idx], infects[idx], list(axes[:,ii]))","accd2ef5":"## see https:\/\/github.com\/keras-team\/keras\/issues\/9395\n\ndef dice_coeff(y_true, y_pred, smooth=1):\n    intersection = K.sum(y_true * y_pred, axis=[1,2,3])\n    union = K.sum(y_true, axis=[1,2,3]) + K.sum(y_pred, axis=[1,2,3])\n    dice = K.mean((2. * intersection + smooth)\/(union + smooth), axis=0)\n    return dice\n\ndef dice_loss(y_true, y_pred):\n    loss = 1 - dice_coeff(y_true, y_pred)\n    return loss\n\ndef bce_dice_loss(y_true, y_pred): #Binary Cross-Entropy\n    loss = 0.5*losses.binary_crossentropy(y_true, y_pred) + 0.5*dice_loss(y_true, y_pred)\n    return loss\n\ndef tversky_loss(y_true, y_pred):\n    alpha, beta  = 0.5, 0.5\n    \n    ones = K.ones(K.shape(y_true))\n    p0 = y_pred\n    p1 = ones-y_pred\n    g0 = y_true\n    g1 = ones-y_true\n    \n    num = K.sum(p0*g0, (0,1,2))\n    den = num + alpha*K.sum(p0*g1,(0,1,2)) + beta*K.sum(p1*g0,(0,1,2))\n    \n    T = K.sum(num\/den) \n    \n    Ncl = K.cast(K.shape(y_true)[-1], 'float32')\n    return Ncl-T\n\ndef weighted_bce_loss(y_true, y_pred, weight):\n    epsilon = 1e-7\n    y_pred = K.clip(y_pred, epsilon, 1. - epsilon)\n    logit_y_pred = K.log(y_pred \/ (1. - y_pred))\n    loss = weight * (logit_y_pred * (1. - y_true) + \n                     K.log(1. + K.exp(-K.abs(logit_y_pred))) + \n                     K.maximum(-logit_y_pred, 0.))\n    return K.sum(loss) \/ K.sum(weight)\n\ndef weighted_dice_loss(y_true, y_pred, weight):\n    smooth = 1.\n    w, m1, m2 = weight, y_true, y_pred\n    intersection = (m1*m2)\n    score = (2.*K.sum(w*intersection) + smooth) \/ (K.sum(w*m1) + K.sum(w*m2) + smooth)\n    loss = 1. - K.sum(score)\n    return loss\n\ndef weighted_bce_dice_loss(y_true, y_pred):\n    y_true = K.cast(y_true, 'float32')\n    y_pred = K.cast(y_pred, 'float32')\n    averaged_mask = K.pool2d(y_true, pool_size=(50, 50), strides=(1, 1), \n                             padding='same', pool_mode='avg')\n    weight = K.ones_like(averaged_mask)\n    w0 = K.sum(weight)\n    weight = 5. * K.exp(-5.*K.abs(averaged_mask - 0.5))\n    w1 = K.sum(weight)\n    weight *= (w0 \/ w1)\n    loss = 0.5*weighted_bce_loss(y_true, y_pred, weight) + 0.5*dice_loss(y_true, y_pred)\n    return loss","cbe70c76":"# define custom learning rate schedule\nclass CosineAnnealingLearningRateSchedule(callbacks.Callback):\n    # constructor\n    def __init__(self, n_epochs, n_cycles, lrate_max, verbose=0):\n        self.epochs = n_epochs\n        self.cycles = n_cycles\n        self.lr_max = lrate_max\n        self.lrates = list()\n \n    # calculate learning rate for an epoch\n    def cosine_annealing(self, epoch, n_epochs, n_cycles, lrate_max):\n        epochs_per_cycle = np.floor(n_epochs\/n_cycles)\n        cos_inner = (np.pi * (epoch % epochs_per_cycle)) \/ (epochs_per_cycle)\n        return lrate_max\/2 * (np.cos(cos_inner) + 1)\n \n    # calculate and set learning rate at the start of the epoch\n    def on_epoch_begin(self, epoch, logs=None):\n        # calculate learning rate\n        lr = self.cosine_annealing(epoch, self.epochs, self.cycles, self.lr_max)\n        # set learning rate\n        K.set_value(self.model.optimizer.lr, lr)\n        # log value\n        self.lrates.append(lr)","ab7d51ac":"# define learning rate callback\nn_epochs = 200\nlrmax = 0.002\nn_cycles = n_epochs \/ 25\nlr_cb = CosineAnnealingLearningRateSchedule(n_epochs, n_cycles, lrmax)","21e9e2a0":"def cts_block_1 (x_in, conv2Dfilters, maxpool2Dsize=(2,2)) :\n    x = Conv2D(conv2Dfilters, (3,3), activation='relu', padding='same', \n               kernel_initializer=\"he_normal\") (x_in)\n    x = Conv2D(conv2Dfilters, (3, 3), activation='relu', padding='same', \n               kernel_initializer=\"he_normal\") (x)\n    x_inter = BatchNormalization() (x)\n    x = MaxPooling2D(maxpool2Dsize) (x_inter) \n    x = Dropout(0.25)(x) \n    \n    return x, x_inter\n\ndef cts_block_2 (x_in, conv2Dfilters) :\n    x = BatchNormalization() (x_in)\n    x = Conv2D(conv2Dfilters, (3, 3), activation='relu', padding='same', \n               kernel_initializer=\"he_normal\") (x)\n    x = Conv2D(conv2Dfilters, (3, 3), activation='relu', padding='same', \n               kernel_initializer=\"he_normal\") (x) \n    \n    return x","2a94cd1f":"def cts_model (input_shape) :\n    \n    x_input = Input(input_shape)\n    \n    ##################################  LUNG SEGMENTATION  ######################\n    x, x1 = cts_block_1 (x_input, 32, maxpool2Dsize=(2,2)) #x: 50x50\n    x, x2 = cts_block_1 (x, 64, maxpool2Dsize=(2,2)) #x: 25x25\n    x, _ = cts_block_1 (x, 128, maxpool2Dsize=(1,1)) #x: 25x25\n    x, _ = cts_block_1 (x, 256, maxpool2Dsize=(1,1)) #x: 25x25\n\n    x = cts_block_2 (x, 256) #x: 25x25\n    \n    x = Conv2DTranspose(128, (2, 2), strides=(2,2), padding='same') (x) #x: 50x50\n    x = cts_block_2 (x, 128) #x: 50x50\n\n    x = Conv2DTranspose(64, (2, 2), padding='same') (x) #x: 50x50\n    x = concatenate([x, x2]) #x: 50x50\n    x = cts_block_2 (x, 64) #x: 50x50\n\n    x = Conv2DTranspose(32, (2, 2), strides=(2,2), padding='same') (x) #x: 100x100\n    x = concatenate([x, x1], axis=3) #x: 100x100\n    x = cts_block_2 (x, 32) #x: 100x100\n\n    lung_seg = Conv2D(1, (1, 1), activation='sigmoid', name='lung_output') (x) #x: 100x100\n\n    ##################################  INFECTION SEGMENTATION  ######################\n    x, x1 = cts_block_1 (lung_seg, 32, maxpool2Dsize=(2,2)) #x: 50x50\n    x, x2 = cts_block_1 (x, 64, maxpool2Dsize=(2,2)) #x: 25x25\n    x, _ = cts_block_1 (x, 128, maxpool2Dsize=(1,1)) #x: 25x25\n    x, _ = cts_block_1 (x, 256, maxpool2Dsize=(1,1)) #x: 25x25\n    \n    x = cts_block_2 (x, 256) #x: 25x25\n    \n    x = Conv2DTranspose(128, (2, 2), strides=(2,2), padding='same') (x) #x: 50x50\n    x = cts_block_2 (x, 128) #x: 50x50\n\n    x = Conv2DTranspose(64, (2, 2), padding='same') (x) #x: 50x50\n    x = concatenate([x, x2]) #x: 50x50\n    x = cts_block_2 (x, 64) #x: 50x50\n\n    x = Conv2DTranspose(32, (2, 2), strides=(2,2), padding='same') (x) #x: 100x100\n    x = concatenate([x, x1], axis=3) #x: 100x100\n    x = cts_block_2 (x, 32) #x: 100x100\n\n    infect_seg = Conv2D(1, (1, 1), activation='sigmoid', name='infect_output') (x) # identifying infections\n\n    model = Model(inputs=x_input, outputs=[lung_seg, infect_seg], name='cts_model')\n    \n    return model","67920f08":"ctsModel = cts_model(cts.shape[1:])\nctsModel.summary()","fb413ced":"train_size = int(0.8*cts.shape[0])\ntest_size = int(0.1*cts.shape[0])\n\nX_train, yl_train, yi_train = (cts[:train_size]\/255, \n                               lungs[:train_size], \n                               infects[:train_size])\n\nX_valid, yl_valid, yi_valid = (cts[train_size:train_size+test_size]\/255, \n                               lungs[train_size:train_size+test_size],\n                               infects[train_size:train_size+test_size])\n\nX_test, yl_test, yi_test = (cts[train_size+test_size:]\/255, \n                            lungs[train_size+test_size:],\n                            infects[train_size+test_size:])\n\nprint(X_train.shape, yl_train.shape, yi_train.shape)\nprint(X_test.shape, yl_test.shape, yi_test.shape)","7f85e927":"batch_size = 128\nepochs = n_epochs\n\ncheckpoint_fpath = \"ctsmodel-lungs-infect-seg.hdf5\"\ncts_checkpoint_cb = callbacks.ModelCheckpoint(checkpoint_fpath, \n                                              monitor='val_infect_output_dice_coeff', \n                                              save_best_only=True, \n                                              mode='max', \n                                              verbose=1,\n                                              save_weights_only=True)","a2b8b9f8":"optim = optimizers.Adam(lr=1e-3, beta_1=0.9, beta_2=0.99)\n\nloss_dict = {'lung_output': bce_dice_loss, 'infect_output': bce_dice_loss}\nloss_weight_dict = {'lung_output': 1.0, 'infect_output': 1.0}\n\nctsModel.compile(optimizer=optim, loss=loss_dict, loss_weights=loss_weight_dict, metrics=[dice_coeff])\n\nctsRes = ctsModel.fit(x=X_train, \n                      y={'lung_output': yl_train, 'infect_output': yi_train}, \n                      batch_size=batch_size, \n                      epochs=epochs,\n                      verbose=1,\n                      validation_data=(X_valid, \n                                       {'lung_output': yl_valid, 'infect_output': yi_valid}),\n                      callbacks = [cts_checkpoint_cb, lr_cb])\n","522ac5f8":"ctsModel_json = ctsModel.to_json()\nwith open('ctsModel-lungs-infects.json', 'w') as myfile:\n     myfile.write(ctsModel_json)","02fe0622":"plt.style.use('ggplot')\n\nfig, axes = plt.subplots(1, 2, figsize=(11,5))\n\naxes[0].plot(ctsRes.history['lung_output_dice_coeff'], color='b', label='train-lung')\naxes[0].plot(ctsRes.history['infect_output_dice_coeff'], color='c', label='train-infect')\naxes[0].plot(ctsRes.history['val_lung_output_dice_coeff'], color='r', label='valid-lung')\naxes[0].plot(ctsRes.history['val_infect_output_dice_coeff'], color='m', label='valid-infect')\naxes[0].set_ylabel('Dice coefficient')\naxes[0].set_xlabel('epoch')\naxes[0].legend()\naxes[0].set_ylim([0.5, 0.85])\n\naxes[1].plot(ctsRes.history['lung_output_loss'], color='b', label='train-lung')\naxes[1].plot(ctsRes.history['infect_output_loss'], color='c', label='train-infect')\naxes[1].plot(ctsRes.history['val_lung_output_loss'], color='r', label='valid-lung')\naxes[1].plot(ctsRes.history['val_infect_output_loss'], color='m', label='valid-infect')\naxes[1].set_ylabel('loss')\naxes[1].set_xlabel('epoch')\naxes[1].set_ylim([0,1])\naxes[1].legend();","c3b5b5bc":"test_result = ctsModel.evaluate(x=X_test, \n                                y={'lung_output': yl_test, 'infect_output': yi_test},\n                                batch_size=batch_size)\n\nprint('Test data:\\n\\t Lung: %.4f loss, %.4f dice coeff\\n\\t Infection: %.4f loss, %.4f dice coeff' \n      %(test_result[1], test_result[3], test_result[2], test_result[4]))","43b1705f":" gc.collect()","63d7b7d8":"checkpoint_fpath = \"ctsmodel-lungs-infect-seg-2.hdf5\"\ncts_checkpoint_cb = callbacks.ModelCheckpoint(checkpoint_fpath, \n                                              monitor='val_infect_output_dice_coeff', \n                                              save_best_only=True, \n                                              mode='max', \n                                              verbose=1,\n                                              save_weights_only=True)\n\n\nctsModel = cts_model(cts.shape[1:])\n\noptim = optimizers.Adam(lr=5e-4, beta_1=0.9, beta_2=0.99)\n\nctsModel.compile(optimizer=optim, loss=loss_dict, loss_weights=loss_weight_dict, metrics=[dice_coeff])\n\nctsModel.load_weights('ctsmodel-lungs-infect-seg.hdf5')\n\nctsRes = ctsModel.fit(x=X_train, \n                      y={'lung_output': yl_train, 'infect_output': yi_train},\n                      batch_size=batch_size, \n                      epochs=epochs,\n                      validation_data=(X_valid, \n                                       {'lung_output': yl_valid, \n                                        'infect_output': yi_valid}),\n                      callbacks = [cts_checkpoint_cb])","0a15fc7d":"plt.style.use('ggplot')\n\nfig, axes = plt.subplots(1, 2, figsize=(11,5))\n\naxes[0].plot(ctsRes.history['lung_output_dice_coeff'], color='b', label='train-lung')\naxes[0].plot(ctsRes.history['infect_output_dice_coeff'], color='c', label='train-infect')\naxes[0].plot(ctsRes.history['val_lung_output_dice_coeff'], color='r', label='valid-lung')\naxes[0].plot(ctsRes.history['val_infect_output_dice_coeff'], color='m', label='valid-infect')\naxes[0].set_ylabel('Dice coefficient')\naxes[0].set_xlabel('epoch')\naxes[0].legend()\naxes[0].set_ylim([0.5, 1])\n\naxes[1].plot(ctsRes.history['lung_output_loss'], color='b', label='train-lung')\naxes[1].plot(ctsRes.history['infect_output_loss'], color='c', label='train-infect')\naxes[1].plot(ctsRes.history['val_lung_output_loss'], color='r', label='valid-lung')\naxes[1].plot(ctsRes.history['val_infect_output_loss'], color='m', label='valid-infect')\naxes[1].set_ylabel('loss')\naxes[1].set_xlabel('epoch')\naxes[1].set_ylim([0,1])\naxes[1].legend();","b45a7a86":"test_result = ctsModel.evaluate(x=X_test, \n                                y={'lung_output': yl_test, 'infect_output': yi_test},\n                                batch_size=batch_size)\n\nprint('Test data:\\n\\t Lung: %.4f loss, %.4f dice coeff\\n\\t Infection: %.4f loss, %.4f dice coeff' \n      %(test_result[1], test_result[3], test_result[2], test_result[4]))","2fed907b":"# model.compile(optimizer=Adam(lr = 0.0005), loss=bce_dice_loss, metrics=[sm.metrics.IOUScore(threshold=0.55)])","06ef1d31":"yl_pred, yi_pred = ctsModel.predict(X_test)\nprint(yl_pred.shape, yi_pred.shape)","8fd86d1c":"def compare_actual_and_predicted(img_num):\n\n    fig = plt.figure(figsize=(12,7))\n\n    plt.subplot(2,3,1)\n    plt.imshow(tf.reshape(X_test[img_num], [num_pix, num_pix]))\n    plt.title('CT image')\n\n    plt.subplot(2,3,2)\n    plt.imshow(tf.reshape(yl_test[img_num], [num_pix, num_pix]), cmap='bone')\n    plt.title('lung mask')\n\n    plt.subplot(2,3,3)\n    plt.imshow(tf.reshape(yi_test[img_num], [num_pix, num_pix]), cmap='bone')\n    plt.title('infection mask')\n\n    plt.subplot(2,3,5)\n    plt.imshow(tf.reshape(yl_pred[img_num], [num_pix, num_pix]), cmap='bone')\n    plt.title('predicted lung mask')\n\n    plt.subplot(2,3,6)\n    plt.imshow(tf.reshape(yi_pred[img_num], [num_pix, num_pix]), cmap='bone')\n    plt.title('predicted infection mask')\n    \n\ncompare_actual_and_predicted(43)","8033675b":"* See the following fully processed sample","b5dc14ae":"## Dump the preprocessed data","85482ac2":"* All the hyperparameters are put in place after repeating trial and error for a fixed number of epochs.","0ce5894a":"* Notice how the infection can be distinguised clearly after enhancement.\n\n* Saving the numpy arrays to later reuse the same preprocessing for other models rather than doing it again.\n\n## Data augmentation pipeline","37b4d665":"## Pool augmented data and convert it","22de023c":"## Training","602fa31c":"## Resize and reshape","dd804ac3":"## keras model with one input (CTs) and two segmented output (lungs & infections)","37c09470":"## 1. Load metada","2338fd04":"### Run this if you want to train the network more","0c3f7893":"## Evaluate network performance","966ac3bc":"## Callback (model checkpointing with the highest validation dice coefficient)","ed543c0b":"* Just overlaying infection masks over the corresponding CT scans","e7fee19e":"## Save augmented data","6d75614c":"## Load all the data","adf5bd82":"## Split data into train and validation sets","75814512":"## Cosine Annealing Learning Rate\n\nAn effective snapshot ensemble requires training a neural network with an aggressive learning rate schedule.\n\nThe cosine annealing schedule is an example of an aggressive learning rate schedule where learning rate starts high and is dropped relatively rapidly to a minimum value near zero before being increased again to the maximum.\n\nWe can implement the schedule as described in the 2017 paper \u201cSnapshot Ensembles: Train 1, get M for free.\u201d The equation requires the total training epochs, maximum learning rate, and number of cycles as arguments as well as the current epoch number. The function then returns the learning rate for the given epoch.\n\nSee https:\/\/machinelearningmastery.com\/snapshot-ensemble-deep-learning-neural-network\/","a0ecd82a":"## Model building blocks"}}