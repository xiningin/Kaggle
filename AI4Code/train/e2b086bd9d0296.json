{"cell_type":{"5c2c7e59":"code","8c9b20bb":"code","e1e1c1a6":"code","c9012a91":"code","a69e6981":"code","04f7c04a":"code","9dc8b8d1":"code","ae7f8a52":"code","59c2111f":"code","03e057d0":"code","1c5de3cb":"code","23615ec8":"code","3663bc27":"code","ead50bb2":"code","a8bbceb6":"code","54b3523e":"code","2697796b":"code","6a6a6d1e":"code","9eca36c1":"code","a662e86b":"code","75f59907":"code","7496304b":"code","2c60d7be":"code","105e31d1":"code","cba267fc":"code","a24f824a":"code","50f6300b":"markdown","b3d4b8ae":"markdown","f657341e":"markdown","bbcba48c":"markdown","d7e4db48":"markdown","911d737e":"markdown","8101df06":"markdown","a595215a":"markdown","76f14765":"markdown","f0fe02c5":"markdown","cdfb9376":"markdown","4de4f87e":"markdown","81cc5ed9":"markdown"},"source":{"5c2c7e59":"import os\nGPU_id = 0\nos.environ['CUDA_VISIBLE_DEVICES'] = str(GPU_id)","8c9b20bb":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom fastai.vision import *\nfrom fastai.train import Learner\nfrom fastai.callbacks import SaveModelCallback\nfrom fastai.metrics import accuracy as fastai_accuracy\nfrom fastai.callbacks import SaveModelCallback\nimport torch.nn.functional as F\nimport torch\n\nimport pandas as pd\nimport numpy as np\nimport time","e1e1c1a6":"class MyImageList(ImageList):\n    @classmethod\n    def from_df(cls, df:DataFrame, cols:IntsOrStrs=0, **kwargs)->'ItemList':        \n        res = super().from_df(df, path='.\/', cols=cols, **kwargs)  \n        if 'label' in df.columns:\n            res.items = df.drop('label',axis=1).values\n        else:\n            res.items = df.values\n        res.c,res.sizes = 1,{}\n        return res\n        \n    def get(self, i):\n        res = torch.tensor(self.items[i].reshape([28,28])).float().unsqueeze(0)\n        self.sizes[i] = res.size\n        return Image(res)   ","c9012a91":"path = Path('..\/input\/digit-recognizer')\npath.ls()","a69e6981":"train = pd.read_csv(path\/'train.csv')\ntest = pd.read_csv(path\/'test.csv')","04f7c04a":"il = MyImageList.from_df(train)\nil","9dc8b8d1":"il[0].show(cmap='gray')","ae7f8a52":"sd = il.split_by_rand_pct(0.2)\nsd","59c2111f":"ll = sd.label_from_df(cols='label')\nll","03e057d0":"tfms = ([*rand_pad(padding=3, size=28, mode='zeros')], [])","1c5de3cb":"ll = ll.transform(tfms)","23615ec8":"%%time\nbs = 128\ndata = ll.databunch(bs=bs).normalize()\ndata.add_test(MyImageList.from_df(test))","3663bc27":"def _plot(i,j,ax): data.train_ds[0][0].show(ax,cmap='gray')\nplot_multi(_plot, 3, 3, figsize=(8,8))","ead50bb2":"xb,yb = data.one_batch()\nprint(xb.shape,yb.shape)\ndata.show_batch(rows=3, figsize=(10,8), cmap='gray')","a8bbceb6":"class ResBlock(nn.Module):\n    def __init__(self, nf):\n        super().__init__()\n        self.conv1 = conv_layer(nf,nf)\n        self.conv2 = conv_layer(nf,nf)\n        \n    def forward(self, x): return x + self.conv2(self.conv1(x))\n    \ndef conv2(ni,nf): return conv_layer(ni,nf,stride=2)    \ndef conv_and_res(ni,nf): return nn.Sequential(conv2(ni, nf), res_block(nf))","54b3523e":"model = torch.nn.Sequential(\n    conv_and_res(1, 8),\n    conv_and_res(8, 16),\n    conv_and_res(16, 32),\n    conv_and_res(32, 16),\n    conv2(16, 10),\n    Flatten()\n)","2697796b":"%%time\nlearn = Learner(data, model, loss_func = nn.CrossEntropyLoss(), metrics=accuracy)\nlearn.model_dir = '\/kaggle\/working\/models'","6a6a6d1e":"learn.lr_find()","9eca36c1":"learn.recorder.plot()","a662e86b":"learn.fit_one_cycle(10,max_lr=slice(0.05),callbacks=[\n            SaveModelCallback(learn, every='improvement', monitor='accuracy'),\n            ])","75f59907":"%%time\nyp,yr = learn.get_preds()\nyp = yp.numpy()\nyr = yr.numpy()","7496304b":"def cross_entropy(y,yp):\n    # y is the ground truch\n    # yp is the prediction\n    yp[yp>0.99999] = 0.99999\n    yp[yp<1e-5] = 1e-5\n    return np.mean(-np.log(yp[range(yp.shape[0]),y.astype(int)]))\n\ndef accuracy(y,yp):\n    return (y==np.argmax(yp,axis=1)).mean()\n\ndef softmax(score):\n    score = np.asarray(score, dtype=float)\n    score = np.exp(score-np.max(score))\n    score = score\/(np.sum(score, axis=1).reshape([score.shape[0],1]))#[:,np.newaxis]\n    return score","2c60d7be":"%%time\nacc = accuracy(yr,yp)\nce = cross_entropy(yr,yp)\nprint('Valid ACC: %.4f Cross Entropy:%4f'%(acc,ce))","105e31d1":"%%time\nyps,_ = learn.get_preds(DatasetType.Test)\nyps = yps.numpy()","cba267fc":"sub = pd.DataFrame()\nsub['ImageId'] = np.arange(yps.shape[0])+1\nsub['Label'] = np.argmax(yps,axis=1)\nsub.head()","a24f824a":"from datetime import datetime\nclock = \"{}\".format(datetime.now()).replace(' ','-').replace(':','-').split('.')[0]\nout = 'fastai_%s_acc_%.4f_ce_%.4f.csv'%(clock,acc,ce)\nprint(out)\nsub.to_csv(out,index=False)","50f6300b":"### Create an ImageList instance","b3d4b8ae":"### Apply transformations","f657341e":"### Create item lists for train and valid","bbcba48c":"### find a proper learning rate","d7e4db48":"### Create a Path instance","911d737e":"### Create a databunch instance","8101df06":"### Show random transformations of the same image","a595215a":"### Customize imagelist","76f14765":"### Create a label list","f0fe02c5":"### training","cdfb9376":"### Predict and evaluate","4de4f87e":"### show a batch of images with labels","81cc5ed9":"### Create a CNN learner"}}