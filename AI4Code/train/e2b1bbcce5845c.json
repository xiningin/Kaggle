{"cell_type":{"19373099":"code","99fcb60a":"code","df099211":"code","6c683c55":"code","f91e9adc":"code","5ed8c9a6":"code","d8272699":"code","2525e1c6":"code","4224c313":"code","fb145ff0":"code","0e2e09ee":"code","92b25b1b":"code","afb5ddae":"code","5a04e1bd":"code","d212f70f":"code","cc83a00b":"code","b4d5c3c2":"code","32aa2a3e":"code","4e399245":"code","342865a9":"markdown","eab36d56":"markdown","bf5ba2c8":"markdown","ac1109c2":"markdown","d47d6ba4":"markdown","2f7a48f3":"markdown","924e2dd6":"markdown","695a87ed":"markdown","e31f02b8":"markdown","f00a0508":"markdown","d002a23f":"markdown","d9348e0c":"markdown","eefb7de8":"markdown","41b1b8b0":"markdown"},"source":{"19373099":"import os\nimport sys\nimport random\n\nimport pandas as pd\nimport numpy as np\n\n%matplotlib inline\n\nimport cv2\nfrom tqdm import tqdm_notebook, tnrange\nfrom itertools import chain\nfrom skimage.io import imread, imshow, concatenate_images\nfrom skimage.transform import resize\nfrom skimage.morphology import label\n\nfrom keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\n\nimport gc\ngc.collect()","99fcb60a":"# Set some parameters\nim_width = 101\nim_height = 101\nim_chan = 1\nbasicpath = '..\/input\/'\npath_train = basicpath + 'train\/'\npath_test = basicpath + 'test\/'\n\npath_train_images = path_train + 'images\/'\npath_train_masks = path_train + 'masks\/'\npath_test_images = path_test + 'images\/'","df099211":"img_size_ori = 101\nimg_size_target = 128","6c683c55":"# Loading of training\/testing ids and depths\n\ntrain_df = pd.read_csv(basicpath+\"train.csv\", index_col=\"id\", usecols=[0])\ndepths_df = pd.read_csv(basicpath+\"depths.csv\", index_col=\"id\")\ntrain_df = train_df.join(depths_df)\ntest_df = depths_df[~depths_df.index.isin(train_df.index)]\n\nlen(train_df)","f91e9adc":"train_df[\"images\"] = [np.array(load_img(path_train_images+\"{}.png\".format(idx), grayscale=True)) \/ 255 for idx in tqdm_notebook(train_df.index)]","5ed8c9a6":"train_df[\"masks\"] = [np.array(load_img(path_train_masks+\"{}.png\".format(idx), grayscale=True)) \/ 255 for idx in tqdm_notebook(train_df.index)]","d8272699":"import cv2\nfrom IPython.display import display, Image\ndef cvshow(image, format='.png', rate=255 ):\n    decoded_bytes = cv2.imencode(format, image*rate)[1].tobytes()\n    display(Image(data=decoded_bytes))\n    return","2525e1c6":"img_size_ori = 101\nimg_size_target = 128\n\ndef upsample(img):\n    if img_size_ori == img_size_target:\n        return img\n    return np.pad(img, [(img_size_target-img_size_ori)\/\/2,(img_size_target-img_size_ori)-(img_size_target-img_size_ori)\/\/2], 'constant', constant_values=(0,0))\n    \ndef downsample(img):\n    if img_size_ori == img_size_target:\n        return img\n    return img[(img_size_target-img_size_ori)\/\/2:img_size_ori+(img_size_target-img_size_ori)\/\/2, (img_size_target-img_size_ori)\/\/2:img_size_ori+(img_size_target-img_size_ori)\/\/2]","4224c313":"orig_img = np.squeeze(np.array(train_df.images.tolist()).reshape(-1, 101, 101, 1)[100, :, :, :])\ncvshow(orig_img)\nedge_mag_img = np.squeeze(np.array(train_df.images.map(upsample).tolist()).reshape(-1, img_size_target, img_size_target, 1)[100, :, :, :])\ncvshow(edge_mag_img)\ncvshow(downsample(edge_mag_img))","fb145ff0":"img_size_ori = 101\nimg_size_target = 128\n\ndef upsample(img):\n    if img_size_ori == img_size_target:\n        return img\n    return np.pad(img, [(img_size_target-img_size_ori)\/\/2,(img_size_target-img_size_ori)-(img_size_target-img_size_ori)\/\/2], 'edge')\n    \ndef downsample(img):\n    if img_size_ori == img_size_target:\n        return img\n    return img[(img_size_target-img_size_ori)\/\/2:img_size_ori+(img_size_target-img_size_ori)\/\/2, (img_size_target-img_size_ori)\/\/2:img_size_ori+(img_size_target-img_size_ori)\/\/2]","0e2e09ee":"orig_img = np.squeeze(np.array(train_df.images.tolist()).reshape(-1, 101, 101, 1)[100, :, :, :])\ncvshow(orig_img)\nedge_mag_img = np.squeeze(np.array(train_df.images.map(upsample).tolist()).reshape(-1, img_size_target, img_size_target, 1)[100, :, :, :])\ncvshow(edge_mag_img)\ncvshow(downsample(edge_mag_img))","92b25b1b":"img_size_ori = 101\nimg_size_target = 128\n\ndef upsample(img):\n    if img_size_ori == img_size_target:\n        return img\n    return np.pad(img, [(img_size_target-img_size_ori)\/\/2,(img_size_target-img_size_ori)-(img_size_target-img_size_ori)\/\/2], 'reflect')\n    \ndef downsample(img):\n    if img_size_ori == img_size_target:\n        return img\n    return img[(img_size_target-img_size_ori)\/\/2:img_size_ori+(img_size_target-img_size_ori)\/\/2, (img_size_target-img_size_ori)\/\/2:img_size_ori+(img_size_target-img_size_ori)\/\/2]","afb5ddae":"orig_img = np.squeeze(np.array(train_df.images.tolist()).reshape(-1, 101, 101, 1)[100, :, :, :])\ncvshow(orig_img)\nedge_mag_img = np.squeeze(np.array(train_df.images.map(upsample).tolist()).reshape(-1, img_size_target, img_size_target, 1)[100, :, :, :])\ncvshow(edge_mag_img)\ncvshow(downsample(edge_mag_img))","5a04e1bd":"img_size_ori = 101\nimg_size_target = 128\n\ndef upsample(img):\n    if img_size_ori == img_size_target:\n        return img\n    return resize(img, (img_size_target, img_size_target), cval = 0, mode='constant', preserve_range=True)\n    \ndef downsample(img):\n    if img_size_ori == img_size_target:\n        return img\n    return resize(img, (img_size_ori, img_size_ori), mode='constant', preserve_range=True)","d212f70f":"orig_img = np.squeeze(np.array(train_df.images.tolist()).reshape(-1, 101, 101, 1)[100, :, :, :])\ncvshow(orig_img)\nedge_mag_img = np.squeeze(np.array(train_df.images.map(upsample).tolist()).reshape(-1, img_size_target, 128, 1)[100, :, :, :])\ncvshow(edge_mag_img)\ncvshow(downsample(edge_mag_img))","cc83a00b":"img_size_ori = 101\nimg_size_target = 128\n\ndef upsample(img):\n    if img_size_ori == img_size_target:\n        return img\n    return resize(img, (img_size_target, img_size_target), mode='edge', preserve_range=True)\n    \ndef downsample(img):\n    if img_size_ori == img_size_target:\n        return img\n    return resize(img, (img_size_ori, img_size_ori), mode='edge', preserve_range=True)","b4d5c3c2":"orig_img = np.squeeze(np.array(train_df.images.tolist()).reshape(-1, 101, 101, 1)[100, :, :, :])\ncvshow(orig_img)\nedge_mag_img = np.squeeze(np.array(train_df.images.map(upsample).tolist()).reshape(-1, 128, 128, 1)[100, :, :, :])\ncvshow(edge_mag_img)\ncvshow(downsample(edge_mag_img))","32aa2a3e":"img_size_ori = 101\nimg_size_target = 200\n\ndef upsample(img):\n    if img_size_ori == img_size_target:\n        return img\n    return resize(img, (img_size_target, img_size_target), order=0, mode='reflect', preserve_range=True)\n    \ndef downsample(img):\n    if img_size_ori == img_size_target:\n        return img\n    return resize(img, (img_size_ori, img_size_ori), order=0, mode='reflect', preserve_range=True)","4e399245":"orig_img = np.squeeze(np.array(train_df.images.tolist()).reshape(-1, 101, 101, 1)[100, :, :, :])\ncvshow(orig_img)\nedge_mag_img = np.squeeze(np.array(train_df.images.map(upsample).tolist()).reshape(-1, img_size_target, img_size_target, 1)[100, :, :, :])\ncvshow(edge_mag_img)\ncvshow(downsample(edge_mag_img))","342865a9":"### refrect","eab36d56":"## A. Numpy.pad","bf5ba2c8":"### constant","ac1109c2":"Upsample\/downsample functions based on Sckit-image work weird for me. (don't know how to use mode='edge', 'constant')\n\nFollowings are numpy-based upsample\/downsample functions which are compatible with those in other common kernels.\n\n1. Preparation\n1. Result\n    1. Numpy.pad\n    1. Sckit-image","d47d6ba4":"### constant","2f7a48f3":"## Define a showing image function","924e2dd6":"### edge","695a87ed":"## Load images","e31f02b8":"# 2. Results","f00a0508":"### reflect","d002a23f":"\n### edge","d9348e0c":"# 1. Preparation","eefb7de8":"## Import libraries","41b1b8b0":"# B. sckit-image"}}