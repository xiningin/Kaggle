{"cell_type":{"b97fb5b6":"code","2ca70789":"code","db99dc80":"code","8427dc72":"code","b12f794a":"code","f5c0bf9c":"code","48558ff6":"code","11bb3c7a":"code","81bf5a86":"code","f29cca54":"code","dc844b00":"code","def29202":"code","da824e68":"code","6e2e4283":"code","5cb1030c":"code","3c7d27eb":"code","e1fc89f9":"code","9c879350":"markdown"},"source":{"b97fb5b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2ca70789":"!pip install autoviml","db99dc80":"import numpy as np\nimport pandas as pd","8427dc72":"dataset = pd.read_csv('..\/input\/trip-advisor-hotel-reviews\/tripadvisor_hotel_reviews.csv')\ndataset","b12f794a":"review = dataset['Review']\nrating = dataset['Rating']","f5c0bf9c":"review.head()","48558ff6":"reviews_df = pd.DataFrame(np.hstack((review[:, None], rating[:, None])), columns=['reviews','rating'])\nreviews_df.head(5)","11bb3c7a":"convert_dict = {'reviews': str,\n                'rating': int}\n#Setting up a dictionary in order to ensure our variables into particular data type","81bf5a86":"reviews_df = reviews_df.astype(convert_dict)\nreviews_df","f29cca54":"reviews_df['target'] = reviews_df[\"rating\"].apply(lambda x: 1 if x>=4 else 0)\nreviews_df\n#Creating a seperate target variable in-order to segregate our ratings into Binary classification!","dc844b00":"reviews_df.shape","def29202":"reviews_df.info()","da824e68":"from sklearn.model_selection import train_test_split\ntrain, test = train_test_split(reviews_df, test_size=0.24)\n#Splitting our data into training and testing data","6e2e4283":"from autoviml.Auto_NLP import Auto_NLP","5cb1030c":"nlp_column = 'reviews'\ntarget = 'target'\ntrain_nlp, test_nlp, nlp_transformer, preds = Auto_NLP(\n    nlp_column, train, test, target, score_type = 'balanced_accuracy',\n    modeltype = 'classification', top_num_features = 100, verbose = 2, build_model = True\n)","3c7d27eb":"nlp_transformer","e1fc89f9":"nlp_transformer.predict(test[nlp_column])","9c879350":"# We will use the Auto-ViML Library to explore the Auto-NLP!"}}