{"cell_type":{"a182a5fa":"code","0393b958":"code","b89efe20":"code","bee6a114":"code","eadf72f0":"code","1c2be050":"code","70c39c90":"code","0b2d66b4":"code","196cd461":"code","d2350ac1":"code","64d31695":"code","a6c5a19f":"code","aa84dbb0":"code","a81e8f47":"code","ad2d029a":"code","3e7e7052":"code","10de71c8":"code","2fb7ffd9":"code","96808c39":"code","5e76b099":"code","661f2690":"code","970fd283":"code","947b0d24":"code","2f56c056":"code","2fd0fd42":"code","33907b5c":"code","07a55690":"code","9a077ccf":"markdown","323fea94":"markdown","a32a96af":"markdown","1df9dd27":"markdown","9932297e":"markdown","9ba9aa75":"markdown","36d70da7":"markdown","e58109d5":"markdown","0aa5feb4":"markdown","71b9aec2":"markdown","e5febcb0":"markdown","222307b1":"markdown","e1ef8549":"markdown","25d650b1":"markdown","3c8adc57":"markdown"},"source":{"a182a5fa":"%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","0393b958":"import os\nimport numpy as np\nimport pandas as pd\nimport PIL\nimport shutil\n\nimport skimage.io as io\nimport skimage.feature\nfrom skimage import color\nfrom skimage import segmentation\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom zipfile import ZipFile\nfrom tqdm.notebook import tqdm","b89efe20":"plt.rc('font', size=15)\nplt.rc('axes', titlesize=18)  \nplt.rc('xtick', labelsize=10)  \nplt.rc('ytick', labelsize=10)","bee6a114":"class Config: \n    \"\"\"\n    \"\"\"\n    DATA_PATH = '..\/input\/plant-pathology-2021-fgvc8'\n    ZIP_ARCHIVE = 'downscaled_images'\n    ZIP_ARCHIVE_SEGMENTED = 'segmented_images'\n    SCALE_FACTOR = 0.2\n    REMOVE_FOLDERS = False\n    RANDOM_STATE = 2021\n    MAX_IMAGES_PROCESSED = 200\n    \n    folders = dict({\n        'data': DATA_PATH,\n        'train': os.path.join(DATA_PATH, 'train_images'),\n        'test': os.path.join(DATA_PATH, 'test_images'),\n        'downscaled': os.path.join('.\/', 'downscaled_images'),\n        'segmented': os.path.join('.\/', 'segmented_images'),\n    })","eadf72f0":"import shutil\n\nif Config.REMOVE_FOLDERS:\n    if os.path.exists(Config.folders['downscaled']):\n        shutil.rmtree(Config.folders['downscaled'])\n\n    if os.path.exists(Config.folders['segmented']):\n        shutil.rmtree(Config.folders['segmented'])","1c2be050":"if not os.path.exists(Config.folders['downscaled']):\n    os.mkdir(Config.folders['downscaled'])\n    \nif not os.path.exists(Config.folders['segmented']):\n    os.mkdir(Config.folders['segmented'])","70c39c90":"def read_image_labels(data_path=Config.folders['data']):\n    \"\"\"\n    \"\"\"\n    fname = os.path.join(data_path, 'train.csv')\n    df = pd.read_csv(fname).set_index('image')\n    \n    return df\n\nimg_labels = read_image_labels()\nimg_labels.head()","0b2d66b4":"n_downscaled = len(os.listdir(Config.folders['downscaled']))\nn_segmented= len(os.listdir(Config.folders['segmented']))\n\nprint(f'images           : {img_labels.shape[0]}')\nprint(f'downscaled images: {n_downscaled}')\nprint(f'segmented images : {n_segmented}')","196cd461":"def get_label_info(img_labels):\n    \"\"\"\n    \"\"\"\n    df = img_labels.reset_index().groupby(by='labels').count().reset_index()\n    df.columns = ['disease', 'count']\n    \n    df['%'] = np.round((df['count'] \/ img_labels.shape[0]), 2) * 100\n    df = df.set_index('disease').sort_values(by='count', ascending=False)\n\n    return df\n\nget_label_info(img_labels)","d2350ac1":"def plot_label_counts(img_labels):\n    fig, ax = plt.subplots(figsize=(15, 8))\n    sns.set_style(\"whitegrid\")\n    palette = sns.color_palette(\"Blues_r\", 12)\n\n    sns.countplot(\n        x='labels', \n        palette=palette,\n        data=img_labels,\n        order=img_labels['labels'].value_counts().index,\n    );\n\n    plt.ylabel(\"# of observations\", size=20);\n    plt.xlabel(\"Class names\", size=20)\n\n    plt.xticks(rotation=45)\n    \n    fig.tight_layout()\n    plt.show()\n    \n    \nplot_label_counts(img_labels)    ","64d31695":"def create_downscaled_images(\n    img_labels,\n    folder=Config.folders['downscaled'],\n    zip_archive=Config.ZIP_ARCHIVE, \n) -> None:\n    \"\"\"\n    \"\"\"\n    if not os.path.exists(folder):\n        return\n    \n    already_processed  = pd.Series(os.listdir(folder))\n    labels = img_labels.loc[~img_labels.index.isin(already_processed)]\n    \n    if len(labels.index) == 0:\n        print('No images found to downscale.')\n        return\n\n    labels = labels.head(Config.MAX_IMAGES_PROCESSED)\n    progress = tqdm(enumerate(labels.index), total=labels.shape[0])\n\n    for idx, image_id in progress:\n        fname =  os.path.join(Config.folders['train'], image_id)\n        img = PIL.Image.open(fname)\n\n        scale_factor = Config.SCALE_FACTOR\n        img = img.resize([int(scale_factor * s) for s in img.size])\n\n        fname =  os.path.join(folder, image_id)\n        img.save(fname)\n        \n    \n    # create archive\n    print(f'Make zip file {zip_archive}.zip')\n    shutil.make_archive(\n        zip_archive, \n        'zip', \n        folder\n    )          ","a6c5a19f":"create_downscaled_images(img_labels)","aa84dbb0":"def create_segmented_images(\n    img_labels,\n    source_folder=Config.folders['downscaled'],\n    target_folder=Config.folders['segmented'],\n    zip_archive=Config.ZIP_ARCHIVE_SEGMENTED\n) -> None:\n    \"\"\"Segments image using k-means clustering\n    \"\"\"\n    if not os.path.exists(source_folder):\n        return\n    \n    if not os.path.exists(target_folder):\n        return\n\n    already_processed  = pd.Series(os.listdir(target_folder))\n    labels = img_labels.loc[~img_labels.index.isin(already_processed)]\n    \n    if len(labels.index) == 0:\n        print('No images found for segmentation.')\n        return\n    \n    labels = labels.head(Config.MAX_IMAGES_PROCESSED)\n    progress = tqdm(enumerate(labels.index), total=labels.shape[0])\n    \n    for idx, image_id in progress:\n        fname =  os.path.join(source_folder, image_id)\n        img = io.imread(fname)\n        \n        segmentes = segmentation.slic(\n            img, \n            n_segments=1200, \n            compactness=10, \n            sigma=1, \n            start_label=1\n        )\n        \n        seg_img = color.label2rgb(segmentes, img, kind='avg')\n        \n        fname = os.path.join(target_folder, image_id)\n        io.imsave(fname, seg_img)\n        \n    # create archive\n    print(f'Make zip file {zip_archive}.zip')\n    shutil.make_archive(\n        zip_archive, \n        'zip', \n        target_folder\n    )","a81e8f47":"create_segmented_images(img_labels)","ad2d029a":"def get_already_processed(\n    img_labels: pd.DataFrame\n) -> pd.DataFrame:\n    \"\"\"\n    \"\"\"\n    idx_downscaled = pd.Index(os.listdir(Config.folders['downscaled']))\n    idx_segmented = pd.Index(os.listdir(Config.folders['segmented']))\n\n    already_processed = idx_downscaled.intersection(idx_segmented)\n    labels = img_labels.loc[img_labels.index.isin(already_processed)]\n\n    return labels\n\nimage_labels = get_already_processed(img_labels)","3e7e7052":"def filter_by(img_labels:pd.DataFrame, kind:str=None) -> pd.DataFrame:\n    if kind is None:\n        return img_labels\n    \n    return image_labels[image_labels['labels'] == kind]","10de71c8":"def get_image(image_id, kind='downscaled') -> None:\n    \"\"\"Loads an image from file\n    \"\"\"\n    if kind == 'archive':\n        zip_file = f'{Config.ZIP_ARCHIVE}.zip' \n        with ZipFile(zip_file, 'r') as archive:\n             with archive.open(image_id) as file:\n                return np.array(PIL.Image.open(file))\n\n    fname = os.path.join(Config.folders[kind], image_id)\n    return np.array(PIL.Image.open(fname))","2fb7ffd9":"def visualize_images(image_ids, labels, nrows=1, ncols=4, kind='downscaled') -> None:\n    \"\"\"\n    \"\"\"\n    if labels.shape[0] == 0:\n        return\n    \n    fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(20, 8))\n    for image_id, label, ax in zip(image_ids, labels, axes.flatten()):\n        image = get_image(image_id, kind=kind)\n        io.imshow(image, ax=ax)\n        \n        ax.set_title(f\"Class: {label}\", fontsize=12)\n        ax.get_xaxis().set_visible(False)\n        ax.get_yaxis().set_visible(False)\n        \n    plt.show()","96808c39":"visualize_images(image_labels.index, image_labels.labels, nrows=2, ncols=4)","5e76b099":"visualize_images(image_labels.index, image_labels.labels, nrows=2, ncols=4, kind='segmented')","661f2690":"# healthy\nimages = filter_by(image_labels, kind='healthy')\n\nvisualize_images(images.index, images.labels)\nvisualize_images(images.index, images.labels, kind='segmented')","970fd283":"# scab\nimages = filter_by(image_labels, kind='scab')\n\nvisualize_images(images.index, images.labels)\nvisualize_images(images.index, images.labels, kind='segmented')","947b0d24":"# rust\nimages = filter_by(image_labels, kind='rust')\n\nvisualize_images(images.index, images.labels)\nvisualize_images(images.index, images.labels, kind='segmented')","2f56c056":"# frog_eye_leaf_spot\nimages = filter_by(image_labels, kind='frog_eye_leaf_spot')\n\nvisualize_images(images.index, images.labels)\nvisualize_images(images.index, images.labels, kind='segmented')","2fd0fd42":"# powdery_mildew \nimages = filter_by(image_labels, kind='powdery_mildew')\n\nvisualize_images(images.index, images.labels)\nvisualize_images(images.index, images.labels, kind='segmented')","33907b5c":"# complex\nimages = filter_by(image_labels, kind='complex')\n\nvisualize_images(images.index, images.labels)\nvisualize_images(images.index, images.labels, kind='segmented')","07a55690":"image_id = image_labels.iloc[0].name\nimg = get_image(image_id, kind='archive')\n\nio.imshow(img);","9a077ccf":"## Read image from archive file","323fea94":"## Imports","a32a96af":"## Load images labels","1df9dd27":"## Images","9932297e":"## Create downscaled images","9ba9aa75":"### Pucciniales `rust`\nhttps:\/\/www.wikiwand.com\/en\/Rust_(fungus)","36d70da7":"## Create segmented images","e58109d5":"### `complex`","0aa5feb4":"## Images by classes ","71b9aec2":"### Botryosphaeria obtusa `frog_eye_leaf_spot`\nhttps:\/\/www.wikiwand.com\/en\/Botryosphaeria_obtusa","e5febcb0":"## Summary\n\n* The training data consists of a total of 18632 images of apple tree leaves affected by one or more plant diseases (viruses, fungal infections, bacteria, etc.).  \n\n* The images are labeled by the corresponding plant disease.\n\n* There are 12 different classes of plant diseases.\n\n* However, five of these classes represent a grouping of plant diseases. Therefore, there are only six actual classes of plant diseases.\n\n* The leaves without a plant disease is labeled with `healty`.\n\n* The most common plant disease in the dataset is apple scab `scab` with  about 26%.\n\n* About 25% of the data show leaves without plant diseases `healty`.\n\n* 1555 records are assigned to more than one plant disease.\n\n\n","222307b1":"### Podosphaera leucotricha `powdery_mildew`\nhttps:\/\/www.wikiwand.com\/en\/Podosphaera_leucotricha","e1ef8549":"### Venturia inaequalis `scab`\nhttps:\/\/www.wikiwand.com\/en\/Apple_scab","25d650b1":"# Plant2021 - Preprocessing\n\nIn this notebook, we downscale the image data for the Plant Pathology 2021 competition. In this way, we obtain image files that are smaller than the original data by a factor of 0.2. The downscaled images are saved in a zip file. In addition, the image files are transformed into segmented images by a k-mean cluster processing. Since it takes a fairly long time to process all the image files, we limited ourselves to 200 images being processed in this notebook.\n\nThe preprocessed images are also available as a kaggle data set.\n\n* Plant2021 - Downscaled Images Dataset\n* [Plant2021 - Segmented Images Dataset](www.kaggle.com\/dataset\/9cdcc447902d2a313a2c8a3837029baf103fd82287e888b3190ddf1c7a2cfd09)\n \n","3c8adc57":"Thank you for reading. If you find this notebook useful, don't forget to upvote."}}