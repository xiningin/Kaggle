{"cell_type":{"bd04cad1":"code","ac16a4ea":"code","cea2ff3d":"code","9bd2f430":"code","381c974b":"code","4682ff74":"code","139823a8":"code","1f97e88d":"markdown","62fc6947":"markdown","ab77bafe":"markdown","c34d502f":"markdown"},"source":{"bd04cad1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nfrom matplotlib.path import Path\nimport matplotlib.collections as mcoll\nimport matplotlib.path as mpath","ac16a4ea":"cities  = pd.read_csv('..\/input\/cities.csv')\ncities.head()","cea2ff3d":"# Greedy algorithm without prime numbers\ndef greedy_whp(verbose=True, k_iter=10000):\n    ID = cities.CityId.values\n    coord = cities[['X', 'Y']].values\n    pos = coord[0]\n    path = [0]\n    \n    ID = np.delete(ID, 0)\n    coord = np.delete(coord, 0, axis=0)\n    \n    it = 0\n    \n    while len(path) != cities.shape[0]:\n        # Compute the distance matrix\n        dist_matrix = np.linalg.norm(coord - pos, axis=1)\n        \n        # Find the nearest city\n        i_min = dist_matrix.argmin()\n        \n        path.append(ID[i_min])\n        pos = coord[i_min]\n        \n        # Delete it\n        coord = np.delete(coord, i_min, axis=0)\n        ID = np.delete(ID, i_min)\n        \n        it += 1\n        \n        if verbose and it%k_iter == 0:\n            print('{} iterations, {} remaining cities.'.format(it, len(ID)))\n    \n    # Don't forget to add the north pole at the end!\n    path.append(0)\n    \n    return path","9bd2f430":"%time path_greedy_whp = greedy_whp(verbose=True)","381c974b":"# Draw colored path with diagram\n# Base on: \n# https:\/\/stackoverflow.com\/questions\/8500700\/how-to-plot-a-gradient-color-line-in-matplotlib\/25941474#25941474\n# https:\/\/matplotlib.org\/1.2.1\/examples\/pylab_examples\/multicolored_line.html\ndef drawColoredPath(x, y, z=None, cmap=plt.get_cmap('jet'), norm=plt.Normalize(0.0, 1.0),\n        linewidth=3, alpha=1.0):\n    \"\"\"\n    http:\/\/nbviewer.ipython.org\/github\/dpsanders\/matplotlib-examples\/blob\/master\/colorline.ipynb\n    http:\/\/matplotlib.org\/examples\/pylab_examples\/multicolored_line.html\n    Plot a colored line with coordinates x and y\n    Optionally specify colors in the array z\n    Optionally specify a colormap, a norm function and a line width\n    \"\"\"\n    # Default colors equally spaced on [0,1]:\n    if z is None:\n        z = np.linspace(0.0, 1.0, len(x))\n\n    # Special case if a single number:\n    if not hasattr(z, \"__iter__\"):  # to check for numerical input -- this is a hack\n        z = np.array([z])\n\n    z = np.asarray(z)\n\n    segments = make_segments(x, y)\n    lc = mcoll.LineCollection(segments, array=z, cmap=cmap, norm=norm,\n                              linewidth=linewidth, alpha=alpha)\n\n    # draw path\n    fig, ax = plt.subplots(nrows=1, figsize=(20,15))\n    ax.add_collection(lc)\n    plt.xlim(x.min(), x.max())\n    plt.ylim(y.min(), y.max())\n    north_pole = cities[cities.CityId==0]\n    plt.scatter(north_pole.X, north_pole.Y, marker='*', c='red', s=1000)    \n    \n    # draw diagram color - index of step\/city\n    fig, ax = plt.subplots(nrows=1, figsize=(15,0.5))\n    norm = mpl.colors.Normalize(vmin=0, vmax=len(x))\n    cbar = mpl.colorbar.ColorbarBase(ax, cmap=cmap,\n                                    norm=norm,\n                                    orientation='horizontal')\n    ax.set_xlabel('Colors and steps mapping')\n    ax.xaxis.set_label_position('top')\n    \n    return lc\n\n\ndef make_segments(x, y):\n    \"\"\"\n    Create list of line segments from x and y coordinates, in the correct format\n    for LineCollection: an array of the form numlines x (points per line) x 2 (x\n    and y) array\n    \"\"\"\n\n    points = np.array([x, y]).T.reshape(-1, 1, 2)\n    segments = np.concatenate([points[:-1], points[1:]], axis=1)\n    return segments\n\n# Draw colored path, details:\n# https:\/\/stackoverflow.com\/questions\/8500700\/how-to-plot-a-gradient-color-line-in-matplotlib\/25941474#25941474\n# https:\/\/matplotlib.org\/1.2.1\/examples\/pylab_examples\/multicolored_line.html\ndef plot_colored_path(path):\n    coords = cities[['X', 'Y']].values\n    ordered_coords = coords[np.array(path)]\n    codes = [Path.MOVETO] * len(ordered_coords)\n    path = Path(ordered_coords, codes)\n\n    x, y = ordered_coords[:, 0], ordered_coords[:, 1]\n    z = np.linspace(0, 1, len(x))\n    drawColoredPath(x, y, z, cmap=plt.get_cmap('jet'), \n                    linewidth=1)\n    ","4682ff74":"show_path = path_greedy_whp[0:100] # print only first 100 steps\nplot_colored_path(show_path)","139823a8":"show_path = path_greedy_whp\nplot_colored_path(show_path) ","1f97e88d":"Generate path with Greedy algorithm without prime numbers, stolen from [here](https:\/\/www.kaggle.com\/heisenbad\/visualization-and-naive-algorithms)","62fc6947":"Draw colored path, all steps:","ab77bafe":"Draw colored path, first 100 steps:","c34d502f":"Lets add gradient color to line of path, for visual analyze how algorithm build the path."}}