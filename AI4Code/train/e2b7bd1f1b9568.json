{"cell_type":{"ad05e4d4":"code","c998bf16":"code","807eacd1":"code","93f86185":"code","8faa3b5b":"code","f363e376":"code","79342719":"code","bc2fc48c":"code","aa293ebe":"code","eb4eec59":"code","17c08901":"code","07ba1e15":"code","d28d24ed":"code","fb413097":"code","90351a3f":"code","bdc10bc9":"code","ce376eac":"code","d73b5c4f":"code","feb13324":"code","fcb1e2d7":"code","26cf7efe":"code","702d7ba6":"code","7385ba8e":"code","ba52ba47":"code","c94bdaf3":"code","7833005e":"code","2da11e08":"code","c00713d2":"code","cde1f370":"code","a5c11087":"markdown","d67d3c02":"markdown","efe9ec14":"markdown","fccae6fd":"markdown","ce481d0f":"markdown","79f98b3a":"markdown","b4f3bcd9":"markdown","c2ac48fe":"markdown","aa205df4":"markdown","5d333f36":"markdown","9bab0627":"markdown","7386f159":"markdown","75a368ab":"markdown","53f29f80":"markdown","dc710a7d":"markdown","187c46c2":"markdown","91fd7596":"markdown","5c55327c":"markdown","165ba06d":"markdown","72815816":"markdown","e8d42361":"markdown","108edf4a":"markdown","d8be4759":"markdown","8b21b4a1":"markdown","cec37c93":"markdown","890f1964":"markdown","d423132f":"markdown","17b67fd5":"markdown","b1f9bb87":"markdown","a6fcb3ad":"markdown","5cfde7c3":"markdown","dd8cb5cd":"markdown","e8c6a6d9":"markdown","1c6c2a62":"markdown","2d2e76cc":"markdown","3376cc6e":"markdown","5494f2ab":"markdown"},"source":{"ad05e4d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c998bf16":"# modules we'll use\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# read in all our data\ncardiodf = pd.read_csv(\"\/kaggle\/input\/cardiogoodfitness\/CardioGoodFitness.csv\")","807eacd1":"#first check out of the data\ncardiodf.head(5)","93f86185":"# how many total missing values do we have?\n#totale values in our dataset\ntotal_cells = np.product(cardiodf.shape)\n#description of  missing values in each column\nmissing_values_count = cardiodf.isnull().sum()\nprint(missing_values_count.sort_values(ascending=False))\n#totale missing values in our dataset\ntotal_missing = missing_values_count.sum()\n\n# percent of data that is missing\npercent_missing = (total_missing\/total_cells) * 100\nprint('% of data that is missing :',percent_missing)","8faa3b5b":"cardiodf.describe(include='all')","f363e376":"sns.countplot(x='Product', hue = 'Gender', data = cardiodf)\n","79342719":"sns.distplot(cardiodf['Age'])","bc2fc48c":"cardiodf.hist(by='Gender',column = 'Age')","aa293ebe":"sns.boxenplot(x='Gender',y='Age',data=cardiodf)","eb4eec59":"sns.scatterplot(x='Age', y='Income',data=cardiodf, hue = 'Product')\nplt.show()","17c08901":"plt.figure();\nsns.pointplot(data=cardiodf, x='Education', y='Income');","07ba1e15":"#create boxplot of education per product\nfig = plt.figure();\nsns.boxplot(data=cardiodf, x='Product', y='Education');\nplt.xlabel('Product');\nplt.ylabel('Education');\nplt.title('Education per Product', fontsize=12);","d28d24ed":"#create boxplot of education per product\nfig = plt.figure();\nsns.boxplot(data=cardiodf, x='Product', y='Fitness');\nplt.xlabel('Product');\nplt.ylabel('Fitness');\nplt.title('Education per Product', fontsize=12);","fb413097":"#create counts of data for plotting Product categorical variables\nproducts = np.unique(cardiodf['Product'], return_counts=True)\nprint('products = {}\\n'.format(products))\n","90351a3f":"#function to display percent alongside count\ndef spec(x):\n    return '{:.1f}%\\n({:.0f})'.format(x, np.sum(products[1])*x\/100);\n\n#create pie chart of products sold\nfig = plt.figure(figsize=[5,5]);\npatches, texts, autotexts = plt.pie(list(products[1]),labels=list(products[0]), autopct=spec, shadow=True, startangle=90);\n\nplt.title('Total Products Sold', fontsize=16, fontweight='bold');","bdc10bc9":"#create counts of data for plotting MaritalStatus categorical variables\nmaritals = np.unique(cardiodf['MaritalStatus'], return_counts=True)\nprint('MaritalStatus = {}\\n'.format(maritals))","ce376eac":"#create barplot of MaritalStatus and products sold\nfig = plt.figure();\nsns.barplot(x=list(maritals[0]), y=list(maritals[1]));\nplt.xlabel('maritals',  fontweight='bold');\nplt.ylabel('Counts',  fontweight='bold');\nplt.title('effects of Maritual Statues on products purshased');","d73b5c4f":"uniques_MaritalStatus = cardiodf['MaritalStatus'].unique()\nuniques_Gender = cardiodf['Gender'].unique()\nuniques_Product = cardiodf['Product'].unique()\nuniques_MaritalStatus.sort()\nuniques_Gender.sort()\nuniques_Product.sort()\nprint('unique entries in MaritalStatus Column :',uniques_MaritalStatus)\nprint('unique entries in Gender Column :',uniques_Gender)\nprint('unique entries in Product Column :',uniques_Product)","feb13324":"# All categorical columns\nobject_cols = [col for col in cardiodf.columns if cardiodf[col].dtype == \"object\"]\n\n# Columns that can be safely ordinal encoded\ngood_label_cols = [col for col in object_cols if \n                   set(cardiodf[col]).issubset(set(cardiodf[col]))]\nprint('Categorical columns that will be ordinal encoded:', good_label_cols)","fcb1e2d7":"'''from sklearn.preprocessing import OrdinalEncoder\nordinal_encoder = OrdinalEncoder()\n\n# Apply ordinal encoder \ncardiodf[good_label_cols] = ordinal_encoder.fit_transform(cardiodf[good_label_cols])\ncardiodf.head(5)'''","26cf7efe":"product_dict={'TM195': 1,'TM498': 2,'TM798':3}\ngenre_dict={'Female':2, 'Male':1}\nmarital_dict={'Partnered':2, 'Single':1}\n\ncardiodf['Product'] = cardiodf.Product.map(product_dict)\ncardiodf['Gender'] = cardiodf.Gender.map(genre_dict)\ncardiodf['MaritalStatus'] = cardiodf.MaritalStatus.map(marital_dict)\ncardiodf.head(5)\n\n\n","702d7ba6":"from sklearn.feature_selection import mutual_info_regression\n\n# Utility functions from Tutorial (Feature Engineering @Kaggle_learn)\ndef make_mi_scores(X, y):\n    X = X.copy()\n    for colname in X.select_dtypes([\"object\", \"category\"]):\n        X[colname], _ = X[colname].factorize()\n    # All discrete features should now have integer dtypes\n    discrete_features = [pd.api.types.is_integer_dtype(t) for t in X.dtypes]\n    mi_scores = mutual_info_regression(X, y, discrete_features=discrete_features, random_state=0)\n    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n    mi_scores = mi_scores.sort_values(ascending=False)\n    return mi_scores\n\n\ndef plot_mi_scores(scores):\n    scores = scores.sort_values(ascending=True)\n    width = np.arange(len(scores))\n    ticks = list(scores.index)\n    plt.barh(width, scores)\n    plt.yticks(width, ticks)\n    plt.title(\"Mutual Information Scores\")","7385ba8e":"# Set Matplotlib defaults\nplt.style.use(\"seaborn-whitegrid\")\nplt.rc(\"figure\", autolayout=True)\nplt.rc(\n    \"axes\",\n    labelweight=\"bold\",\n    labelsize=\"large\",\n    titleweight=\"bold\",\n    titlesize=14,\n    titlepad=10,\n)\n\nfeatures = ['Fitness','Usage']\nsns.relplot(\n    x=\"value\", y=\"Product\", col=\"variable\", data=cardiodf.melt(id_vars=\"Product\", value_vars=features), facet_kws=dict(sharex=False),\n);","ba52ba47":"X = cardiodf.copy()\ny = X.pop('Miles')\n\nmi_scores = make_mi_scores(X, y)\n\nprint(mi_scores.head(8))\n# print(mi_scores.tail(8))  # uncomment to see bottom 20\n\nplt.figure(dpi=100, figsize=(8, 5))\nplot_mi_scores(mi_scores.head(8))\n# plot_mi_scores(mi_scores.tail(8))  # uncomment to see bottom 20","c94bdaf3":"sns.catplot(x=\"Fitness\", y=\"Miles\", data=cardiodf, kind=\"boxen\");","7833005e":"sns.catplot(x=\"Usage\", y=\"Miles\", data=cardiodf, kind=\"boxen\");","2da11e08":"y = cardiodf['Miles']","c00713d2":"# list of features below\nX= cardiodf[['Fitness','Usage']]","cde1f370":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nfrom statistics import mean\n#define\nmodel = LinearRegression()\n#Split ( default recommended testing data size is 20% of the totale Data)\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)\n#Fit \nmodel.fit(X_train,y_train)\n#Predict\nprint('equation mean coeff =',mean(model.coef_))\nprint('equation Intercept =',model.intercept_)\nprint('finale miles predicted equation:')\nprint('Miles =',\"{:.2f}\".format(mean(model.coef_)),'x Fitness + ',\"{:.2f}\".format(mean(model.coef_)),'x Usage + ',\"{:.2f}\".format(model.intercept_))\n","a5c11087":"# Feature Engineering\n","d67d3c02":"# Preparing Data for Prediction","efe9ec14":"***Choosing \"Features\"***","fccae6fd":"# How many missing data points do we have?\n\nWhat percentage of the values in the dataset are missing?","ce481d0f":"# Data Description","79f98b3a":"It looks like we dont have inconsistent data entries too , which is greate!.\n\nSo let's Ordinal Encoding the 3 columns!.\n\nAs a reminder : `Ordinal encoding` assigns each unique value to a different integer, as an example, in the `Gender Column` the ordinal Encoding will assign `1 -> Male and 2 -> Female`.\nSame thing with `MaritalStatus & Product`.\n\nNote: The values won't be the one that you provided, since internally the `fit` method use `numpy.unique` which gives result sorted in `alphabetic order` and NOT BY order of appearance.(Special thanks to **abcdaire [answer](https:\/\/stackoverflow.com\/questions\/56502864\/using-ordinalencoder-to-transform-categorical-values) in stackoverflow**)\n\nSo... instead of using OrdinalEncoder , I'm going to use `map` function to transform all the object values to `integer` values ( i will also leave the OrdinalEncoder code version in a comment if you are interrested in ) simply because we dont have much values to transfer.!\n\n","b4f3bcd9":"***Counting Gender per Product***","c2ac48fe":"***Map_Version***","aa205df4":"it appears that ***more educated costumers*** tend to buy the ***TM789*** ","5d333f36":"***what is the most dominating Gender using CardioGoodFitness Products ( specifing the protduct and the marital statues) ?***\n\nFrom the description above , it appears that `Male` users using `Product TM195` that are most likely to be in a `Relationship aka Partnered` are the most dominating users in the dataSet !","9bab0627":"As expected, Pepole with high fitness lvls tends to walk more miles  ","7386f159":"the TM798 is most likely to be used by users with heigh lvl fitness rates!","75a368ab":"The steps to building and using a model are:  \n**Define**: What type of model will it be? A decision tree? Some other type of model? Some other parameters of the model type are specified too.  \n**Fit**: Capture patterns from provided data. This is the heart of modeling.  \n**Predict**: Just what it sounds like  \n**Evaluate**: Determine how accurate the model's predictions are.","53f29f80":"**Building Our Model**","dc710a7d":"# Prediction","187c46c2":"as expected to be ! ***partened users*** are ***more likely*** to be motivated ***to buy fitness products*** then Single users !","91fd7596":"# Answering a data-driven question","5c55327c":"**OrdinalEncoder_Version**","165ba06d":"***Age Density***","72815816":"Let's Start the Action!","e8d42361":"***MI Scores, why MI and not Correlation?***\n\n`Mutual Information (aka MI score)` : it measures a relationship between two quantities. \nThe advantage of mutual information is that `it can detect any kind of relationship`, \nwhile `correlation only detects linear relationships.`\n\n\nThe (MI) between 2 quantities is a measure of `one quantity reduces uncertainty about the other.`\n\nWhen MI is 0 : the quantities are independent ( ex: a feature and a target have 0 MI ==> dot use that feature in prediction)\n\n`Please Note:` A feature is only useful when its relationship with the target is one your model can learn. \nJust because a feature has a high MI score doesn't mean your model will be able to do anything \nYou may need to transform the feature first to expose the association.  \nAlso ..., Feature must be continous feature :  \nFloat dtype is not discrete. ==> convert it  \nCategoricals (object or categorial dtype) ==> label encoding","108edf4a":"***Selecting The Prediction Target***","d8be4759":"***How do income and age affect the custumer's choice of products?***\n(Inspired by **Vahideh Dashti [Kaggle Master](https:\/\/www.kaggle.com\/vahidehdashti)**)","8b21b4a1":"# 2) Viz & interpetation\n","cec37c93":"\nNow let's start by encoding  `MaritalStatus` and `gender` to get ride of the `Object-type` values in our DataSet and to prepare it for prediction, but before that let's find out if all of our values in both `MaritalStatus` and `gender` `columns` have only two unique values\n","890f1964":"***How does Education affect user's Income?***","d423132f":"***Dominating age per gender***","17b67fd5":"Excatly the same as the Fitness lvls!, the more you use the product the more you walk more :)","b1f9bb87":"***Any relationship between products and Education lvls ?***","a6fcb3ad":"The Data set looking good so far , it has `0% missing values` , so the next step is find relationships between features to maybe find hidden insghits.","5cfde7c3":"Do the scores seem reasonable? Do the high scoring features represent things i'd think most people would value in fitness Product?  \nwell... the Fitness and Usage seems pretty obvious for me, because i think if someone is focusing on doing his daily steps the `Fitness` feature should have high MI score.  \nAlso, the `Product` if someone has more money, he should be pretty confortable investing it in his health on better equipement no?  \nBut i also expected the Income lvl and education lvls should have more MI scores, this is why i m going to investigate them more in the next step!","dd8cb5cd":"# First thoughts\n***Average Age of users ?***\n\narround 29 Years Old (mean =~28.79 )\n\n***min Age of users ?***\n\n18 Years Old (min = 18.0)\n\n***max Age of users ?***\n\n50 Years Old (max= 50.0)\n\n\n\n\n","e8c6a6d9":"***relationship between products and fitness-lvls ?***","1c6c2a62":"which type of ML should we use ?: Supervised Learning (A simple Linear reg)    \nwhy?  \nBecause we use regression when there is a continuous range of outputs. ex:  House size (input), output - price  \nAlso..., Classification - output is this or that (well defined and discrete)","2d2e76cc":"***Marital Statues and Product purshase?***","3376cc6e":"as Expected to be :)","5494f2ab":"***Best Sold Product ?***\n(Inspired by **JordanRich [Data Scientist and Business Analytics Professional](https:\/\/www.kaggle.com\/jordanrich\/cardiogoodfitness-analysis-of-demographics#Context:)**)"}}