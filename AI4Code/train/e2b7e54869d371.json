{"cell_type":{"a20a2b7a":"code","3cc27f21":"code","4096fc17":"code","b317f327":"code","a99425ce":"code","27f3ce72":"code","cd5ba717":"code","8da7abff":"code","6cd4a777":"code","2b2c38a0":"code","788b7dfe":"code","a0ab159a":"code","755c0604":"code","cc6eec45":"code","392e91f1":"code","fe924fd4":"code","dff006c9":"code","253a7249":"code","38a321e3":"code","e74091f4":"code","3145eee6":"code","394bd183":"code","cccc2e4b":"code","7a7e5c21":"code","23fcb76e":"code","91a21b31":"markdown","4977157f":"markdown","076ba4e8":"markdown","da57f0ac":"markdown","0f0d2407":"markdown","86a62164":"markdown","9bf6685a":"markdown","03effbc6":"markdown","7d04827f":"markdown","3bd7c230":"markdown","a48db327":"markdown","d34cd664":"markdown","d4c6f750":"markdown","8f6ee275":"markdown","7322c0ac":"markdown","91eedc78":"markdown","b5b12416":"markdown","54e1a070":"markdown","a186fec5":"markdown","4faadd99":"markdown","b5afd931":"markdown"},"source":{"a20a2b7a":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 100)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom itertools import product\nfrom sklearn.preprocessing import LabelEncoder\nimport datetime\nimport re\n\nimport xgboost as xgb\n# from sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import mean_squared_error\n\nimport time\nimport gc\nimport pickle\n\n# \u63cf\u753b\u30b5\u30a4\u30ba\nplt.rcParams[\"figure.figsize\"] = (20 ,10)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3cc27f21":"#\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\nitems = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\nshops = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\ncats = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\ntrain = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ntest  = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')","4096fc17":"# \u5916\u308c\u5024\u306e\u51e6\u7406\u3068\u53ef\u8996\u5316\n\nts = time.time()\n\nplt.figure(figsize=(10,4))\nplt.xlim(-100, 3000)\nflierprops = dict(marker='o', markerfacecolor='purple', markersize=6,\n                  linestyle='none', markeredgecolor='black')\nsns.boxplot(x=train.item_cnt_day, flierprops=flierprops)\nplt.figure(figsize=(10,4))\nplt.xlim(train.item_price.min(), train.item_price.max()*1.1)\nsns.boxplot(x=train.item_price, flierprops=flierprops)\nplt.show()\n\n# exclude outliers\ntrain = train[(train.item_price < 300000 )& (train.item_cnt_day < 1000)]\ntrain = train[train.item_price > 0].reset_index(drop = True)\n# \u8fd4\u54c1\u51e6\u7406\u3055\u308c\u305f\u3082\u306e(\u5024\u304c\u30de\u30a4\u30ca\u30b9)\u306f\u3001\u58f2\u4e0a0\u3068\u3057\u3066\u6271\u3046\n# train.loc[train.item_cnt_day < 1, \"item_cnt_day\"] = 0\n\n# print run time\nprint(f\"outlier fix run time: {time.time()-ts}\")","b317f327":"#shops df\u306e\u524d\u51e6\u7406\nts = time.time()\n\n# shop_name\u306e\u91cd\u8907\u3092\u4fee\u6b63\n# \u042f\u043a\u0443\u0442\u0441\u043a \u041e\u0440\u0434\u0436\u043e\u043d\u0438\u043a\u0438\u0434\u0437\u0435, 56\ntrain.loc[train.shop_id == 0, 'shop_id'] = 57\ntest.loc[test.shop_id == 0, 'shop_id'] = 57\n# \u042f\u043a\u0443\u0442\u0441\u043a \u0422\u0426 \"\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439\"\ntrain.loc[train.shop_id == 1, 'shop_id'] = 58\ntest.loc[test.shop_id == 1, 'shop_id'] = 58\n# \u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0443\u043b. \u0427\u043a\u0430\u043b\u043e\u0432\u0430 39\u043c\u00b2\ntrain.loc[train.shop_id == 10, 'shop_id'] = 11\ntest.loc[test.shop_id == 10, 'shop_id'] = 11\n\n# city_name\u3092shop_category_name\u304b\u3089\u4f5c\u6210\nshops.loc[shops.shop_name == '\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"',\"shop_name\" ] = '\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"'\nshops[\"city_name\"] = shops.shop_name.str.split(\" \").map( lambda x: x[0] )\nshops[\"shop_category_name\"] = shops.shop_name.str.split(\" \").map( lambda x: x[1] )\nshops.loc[shops.city_name == \"!\u042f\u043a\u0443\u0442\u0441\u043a\", \"city_name\"] = \"\u042f\u043a\u0443\u0442\u0441\u043a\"\n\n\n\n# label-encording\nshops[\"shop_category_id\"] = LabelEncoder().fit_transform(shops.shop_category_name)\nshops[\"city_id\"] = LabelEncoder().fit_transform( shops.city_name )\ndisplay(shops.head())\nshops = shops[[\"shop_id\", \"shop_category_id\", \"city_id\"]]\ndisplay(shops.head())\n\n# print run time\nprint(f\"run time: {time.time()-ts}\")","a99425ce":"# cats-df\u306e\u524d\u51e6\u7406\nts = time.time()\n\n# type_name\u3092cats-df\u3078\u8ffd\u52a0\ncats[\"type_name\"] = cats.item_category_name.apply( lambda x: x.split(\" \")[0] ).astype(str)\ncats.loc[ (cats.type_name == \"\u0418\u0433\u0440\u043e\u0432\u044b\u0435\")| (cats.type_name == \"\u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b\"), \"type_name\" ] = \"\u0418\u0433\u0440\u044b\"\n\n\n\n#label-encording\ncats[\"type_id\"] = LabelEncoder().fit_transform(cats.type_name)\ncats[\"split\"] = cats.item_category_name.apply(lambda x: x.split(\"-\"))\ncats[\"subtype\"] = cats.split.apply(lambda x: x[1].strip() if len(x) > 1 else x[0].strip())\ncats[\"subtype_id\"] = LabelEncoder().fit_transform(cats.subtype)\ndisplay(cats.head())\ncats = cats[[\"item_category_id\", \"subtype_id\", \"type_id\"]]\ndisplay(cats.head())\n\n# print run time\nprint(f\"run time: {time.time()-ts}\")","27f3ce72":"# \u30e9\u30b0\u3068\u308b\u969b\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u6210\u3059\u308b\nts = time.time()\n# \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u30e6\u30cb\u30fc\u30af\u306a\u7d44\u307f\u5408\u308f\u305b\u3060\u3051\u53d6\u308a\u51fa\u3059\n# \u30e9\u30b0\u3092\u3068\u308b\u969b\u306f,\u6b20\u640d\u5024\u304c\u767a\u751f\u3059\u308b\u306e\u3067\u3001\u305d\u308c\u30920\u3067\u57cb\u3081\u308b\u4e88\u5b9a\n\ncols  = [\"date_block_num\", \"shop_id\", \"item_id\"]\n\n##################################################\n\"\"\"\n# \u8a13\u7df4\u30c7\u30fc\u30bf\u5185\u5168\u4f53\u306e\u30e6\u30cb\u30fc\u30af\u306a\u7d44\u307f\u5408\u308f\u305b\nmatrix = train.groupby(cols,as_index=False)\\\n                        .item_cnt_day.sum()\\\n                        .rename(columns={'item_cnt_day':'item_cnt_month'})\n\n\"\"\"\n# \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u6708\u3054\u3068\u306e\u30e6\u30cb\u30fc\u30af\u306e\u7d44\u307f\u5408\u308f\u305b\nmatrix = []\nfor i in range(34):\n    sales = train[train.date_block_num == i]\n    matrix.append( np.array(list( product( [i], sales.shop_id.unique(), sales.item_id.unique() ) ), dtype = np.int16) )\nmatrix = pd.DataFrame( np.vstack(matrix), columns = cols )\n\n\"\"\"\n# \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u30e6\u30cb\u30fc\u30af\u306a\u7d44\u307f\u5408\u308f\u305b\nmatrix = []\nmatrix.append(np.array(list(product(train.date_block_num.unique(), train.shop_id.unique(), train.item_id.unique())), dtype = np.int16))\nmatrix = pd.DataFrame( np.vstack(matrix), columns = cols)\n\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30e6\u30cb\u30fc\u30af\u306e\u7d44\u307f\u5408\u308f\u305b\nmatrix= pd.DataFrame()\nfor i in range(34):\n    mid = test[['shop_id','item_id']]\n    mid['date_block_num'] = i\n    matrix = pd.concat([matirx,mid],axis=0)\n\"\"\"\n\n################################################\n# item_cnt_month\u3092\u30de\u30fc\u30b8\u3059\u308b\ngroup = train.groupby( [\"date_block_num\", \"shop_id\", \"item_id\"] ).agg( {\"item_cnt_day\": [\"sum\"]} )\ngroup.columns = [\"item_cnt_month\"]\ngroup.reset_index(inplace = True)\nmatrix = pd.merge(matrix, group, on = cols, how = \"left\" )\nmatrix[\"item_cnt_month\"] = matrix[\"item_cnt_month\"].astype(np.float16)\n\n\n\n# test\u30c7\u30fc\u30bf\u3092matrix\u306b\u304f\u3063\u3064\u3051\u308b\u6e96\u5099\ntest[\"date_block_num\"] = 34\n\n# test\u3092matrix\u306e\u4e0b\u306b\u304f\u3063\u3064\u3051\u308b\nmatrix = pd.concat([matrix, test.drop([\"ID\"],axis = 1)],\\\n                   ignore_index=True, sort=False, keys=cols)\n\n# \u4f5c\u6210\u3057\u305fmatrix\u3092\u78ba\u8a8d\ndisplay(matrix.head())\nprint(matrix.isna().sum())\nprint(matrix.info())\n\n# print run time\nprint(f\"run time: {time.time()-ts}\")","cd5ba717":"# \u8a13\u7df4\u30c7\u30fc\u30bf\u3078\u3053\u308c\u307e\u3067\u306b\u4f5c\u6210\u3057\u305f\u7279\u5fb4\u91cf\u3092\u3059\u3079\u3066merge\u3059\u308bts = time.time()\nts = time.time()\n\n# \u8a13\u7df4\u30c7\u30fc\u30bf\u3078\u3059\u3079\u3066\u30de\u30fc\u30b8\u3059\u308b\nmatrix = pd.merge( matrix, shops, on = [\"shop_id\"], how = \"left\" )\nmatrix = pd.merge(matrix, items, on = [\"item_id\"], how = \"left\")\nmatrix = pd.merge( matrix, cats, on = [\"item_category_id\"], how = \"left\" )\n# \u5e74\u6708\u8ffd\u52a0\nmatrix[\"month\"] = (matrix[\"date_block_num\"]%12)+1\nmatrix[\"year\"] = (matrix[\"date_block_num\"]\/\/12)+2013\n# \u5546\u54c1\u5e97\u8217\u5225, \u5546\u54c1\u5225\u3067\u521d\u3081\u3066\u58f2\u308c\u305f\u6708\u3068\u73fe\u5728\u6708\u306e\u5dee\u3092\u5909\u6570\u3068\u3057\u3066\u52a0\u3048\u308b\n# \u58f2\u308a\u51fa\u3055\u308c\u3066\u304b\u3089\u3069\u308c\u3060\u3051\u7d4c\u3066\u3044\u308b\u304b\u304c\u308f\u304b\u308b\n# matrix[\"item_shop_first_sale\"] = matrix[\"date_block_num\"]\\\n# - matrix.groupby([\"item_id\",\"shop_id\"])[\"date_block_num\"].transform('min')\n# matrix[\"item_first_sale\"] = matrix[\"date_block_num\"]\\\n# - matrix.groupby([\"item_id\"])[\"date_block_num\"].transform('min')\n\n# \u30c7\u30fc\u30bf\u578b\u3092\u6700\u9069\u306a\u3082\u306e\u3078\u5909\u66f4\nmatrix[\"item_id\"] = matrix[\"item_id\"].astype(np.int16)\nmatrix[\"shop_id\"] = matrix[\"shop_id\"].astype(np.int8)\nmatrix[\"date_block_num\"] = matrix[\"date_block_num\"].astype(np.int8)\nmatrix[\"item_cnt_month\"] = matrix[\"item_cnt_month\"].astype(np.float16)\nmatrix[\"city_id\"] = matrix[\"city_id\"].astype(np.int8)\nmatrix[\"shop_category_id\"] = matrix[\"shop_category_id\"].astype(np.int8)\nmatrix[\"item_category_id\"] = matrix[\"item_category_id\"].astype(np.int8)\nmatrix[\"type_id\"] = matrix[\"type_id\"].astype(np.int8)\nmatrix[\"subtype_id\"] = matrix[\"subtype_id\"].astype(np.int8)\n\nmatrix[\"month\"] = matrix[\"month\"].astype(np.int8)\nmatrix[\"year\"] = matrix[\"year\"].astype(np.int16)\n# matrix[\"item_shop_first_sale\"] = matrix[\"item_shop_first_sale\"].astype(np.int8)\n# matrix[\"item_first_sale\"] = matrix[\"item_first_sale\"].astype(np.int16)\n\n\n\n# merge\u3057\u305fmatrix\u3092\u78ba\u8a8d\ndisplay(matrix.head())\nprint(matrix.isna().sum())\nprint(matrix.info())\n\n# print run time\nprint(f\"run time: {time.time()-ts}\")","8da7abff":"# \u30e9\u30b0\u7279\u5fb4\u91cf\u4f5c\u6210\nts = time.time()\n\n# \u30e9\u30b0\u4f5c\u6210\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\ndef lag_feature( df,lags, cols ):\n    for col in cols:\n        print(col)\n        tmp = df[[\"date_block_num\", \"shop_id\",\"item_id\",col ]]\n        for i in lags:\n            print(i)\n            shifted = tmp.copy()\n            shifted.columns = [\"date_block_num\", \"shop_id\", \"item_id\", col + \"_lag_\"+str(i)]\n            shifted.date_block_num = shifted.date_block_num + i\n            df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left')\n    return df\n\n# \u30e9\u30b0\u7279\u5fb4\u91cf\u4f5c\u6210\nmatrix = lag_feature( matrix, [1,2,3], [\"item_cnt_month\"] )\n# \u30e9\u30b0\u3092\u4f5c\u3063\u305f\u5206\u3060\u3051\u524a\u9664\nmatrix = matrix[matrix[\"date_block_num\"] >= 3]\n\n# \u6b20\u640d\u5024\u57cb\u3081\nmatrix.fillna( 0, inplace = True)\n\n# merge\u3057\u305fmatrix\u3092\u78ba\u8a8d\ndisplay(matrix.head())\nprint(matrix.isna().sum())\nprint(matrix.info())\n\n# print run time\nprint(f\"run time: {time.time()-ts}\")","6cd4a777":"matrix.columns","2b2c38a0":"#matrix = matrix[['date_block_num', 'item_cnt_month', 'item_cnt_month_lag_1',\\\n                 #'item_cnt_month_lag_2', 'item_cnt_month_lag_3']]\n\nmatrix.head().T","788b7dfe":"matrix = matrix.drop(\"item_name\", axis=1)\nmatrix","a0ab159a":"df_corr = matrix.corr()\nfig, ax = plt.subplots(figsize=(12, 9)) \nsns.heatmap(df_corr, square=True, vmax=1, vmin=-1, center=0)","755c0604":"# \u5b66\u7fd2\u306e\u305f\u3081\u306e\u30e2\u30c7\u30eb\u306e\u6e96\u5099\nts = time.time()\n\n# gc\u3067\u30e1\u30e2\u30ea\u89e3\u653e\ndata = matrix.copy()\n# del matrix\ngc.collect()\n\n# \u30c7\u30fc\u30bf\u5206\u5272\ntrain_X = data[data.date_block_num < 33].drop(['item_cnt_month'], axis=1)\ntrain_y = data[data.date_block_num < 33]['item_cnt_month']\nval_X = data[data.date_block_num == 33].drop(['item_cnt_month'], axis=1)\nval_y = data[data.date_block_num == 33]['item_cnt_month']\ntest_X = data[data.date_block_num == 34].drop(['item_cnt_month'], axis=1)\n\n#gc\u3067\u30c7\u30fc\u30bf\u89e3\u653e\ndel data\ngc.collect()\n\n# \u30af\u30ea\u30c3\u30d7\ntrain_y = train_y.clip(0, 20)\nval_y = val_y.clip(0, 20)\n\n# print run time\nprint(f\"run time: {time.time()-ts}\")","cc6eec45":"from optuna.integration import lightgbm as lgb\nfrom lightgbm import plot_importance\n\n\nts = time.time()\n\ndtrain = lgb.Dataset(train_X, label=train_y)\neval_data = lgb.Dataset(val_X, label=val_y)\n\nparam = {\n        'objective': 'regression',\n        'metric': 'rmse',\n        'verbosity': -1,\n        'boosting_type': 'gbdt',\n    }\n\nbest = lgb.train(param, \n                 dtrain,\n                 valid_sets=eval_data,\n                 early_stopping_rounds=50)\n\ntime.time() - ts","392e91f1":"ts = time.time()\nimport lightgbm as lgb\n\ndtrain = lgb.Dataset(train_X, label=train_y)\neval_data = lgb.Dataset(val_X, label=val_y)\n\nparam = {'objective': 'regression', 'metric': 'rmse', \\\n         'verbosity': -1, 'boosting_type': 'gbdt',\\\n         'feature_pre_filter': False, 'lambda_l1': 3.389173441244444e-07,\\\n         'lambda_l2': 3.821912829254147e-07, 'num_leaves': 68, \\\n         'feature_fraction': 0.4, 'bagging_fraction': 1.0,\\\n         'bagging_freq': 0, 'min_child_samples': 20, \\\n         'num_iterations': 1000, 'early_stopping_round': 50}\n\nbest = lgb.train(param, \n                 dtrain,\n                 valid_sets=eval_data,\n                 early_stopping_rounds=50)\n\nprint(best.best_score)\ntime.time() - ts","fe924fd4":"print(best.params)\nprint(best.best_iteration)\nprint(best.best_score)","dff006c9":"pred_y = best.predict(val_X)\n\nmse = mean_squared_error(val_y, pred_y)\nrmse = np.sqrt(mse)\nprint(f\"\u691c\u8a3c\u30c7\u30fc\u30bf\u306eRMSE:{rmse}\\n\")\n\nplt.figure(figsize=(8,8))\nplt.xlim(0,20)\nplt.ylim(0,20)\nplt.xlabel(\"val_y\")\nplt.ylabel(\"pred_y\")\n\nplt.scatter(val_y, pred_y, alpha = 0.5, s=0.5)\nplt.plot(np.linspace(0, 20, 100), np.linspace(0, 20, 100), \"red\")\n\nplt.show()","253a7249":"# \u30e2\u30c7\u30eb\u5b66\u7fd2\nts = time.time()\n\ndtrain = xgb.DMatrix(train_X, train_y)\ndvalid = xgb.DMatrix(val_X, val_y)\n\nparams = {\n    \"objective\" : \"reg:squarederror\",\n    \"eval_metric\" : \"rmse\"\n}\n\nresults_dict = {}\n\nmodel = xgb.train(\n    params = params,\n    dtrain = dtrain,\n    evals = [(dtrain, \"train\"), (dvalid, \"valid\")],\n    num_boost_round = 1000,\n    early_stopping_rounds = 20,\n    evals_result = results_dict\n)\n\n# print run time\nprint(f\"run time: {time.time()-ts}\")","38a321e3":"test_y = model.predict(xgb.DMatrix(test_X)).clip(0, 20)\n\nsubmission = pd.DataFrame({\n    \"ID\": test.index, \n    \"item_cnt_month\": test_y\n})\n# \u63d0\u51fa\u306e\u969b\u3001\u6b20\u640d\u5024\u3067\u30a8\u30e9\u30fc\u304c\u51fa\u306a\u3044\u304b\u78ba\u8a8d\nprint(submission.isna().sum())\n\nsubmission.to_csv('xgb_submission.csv', index=False)","e74091f4":"# \u8a13\u7df4\u30c7\u30fc\u30bf\u306eRMSE\ntrain_pred_y = model.predict(xgb.DMatrix(train_X))\n\nmse = mean_squared_error(train_y, train_pred_y)\nrmse = np.sqrt(mse)\nprint(f\"\u8a13\u7df4\u30c7\u30fc\u30bf\u306eRMSE:{rmse}\\n\")\n\nplt.figure(figsize=(8,8))\nplt.xlim(0,20)\nplt.ylim(0,20)\nplt.xlabel(\"train_y\")\nplt.ylabel(\"train_pred_y\")\n\nplt.scatter(train_y, train_pred_y, alpha = 0.5, s=0.5)\nplt.plot(np.linspace(0, 20, 100), np.linspace(0, 20, 100), \"red\")\n\nplt.show()","3145eee6":"pred_y = model.predict(xgb.DMatrix(val_X))# .round()\n\nmse = mean_squared_error(val_y, pred_y)\nrmse = np.sqrt(mse)\nprint(f\"\u691c\u8a3c\u30c7\u30fc\u30bf\u306eRMSE:{rmse}\\n\")\n\nplt.figure(figsize=(8,8))\nplt.xlim(0,20)\nplt.ylim(0,20)\nplt.xlabel(\"val_y\")\nplt.ylabel(\"pred_y\")\n\nplt.scatter(val_y, pred_y, alpha = 0.5, s=0.5)\nplt.plot(np.linspace(0, 20, 100), np.linspace(0, 20, 100), \"red\")\n\nplt.show()","394bd183":"plt.plot(results_dict[\"train\"][\"rmse\"], color = \"red\", label = \"train\")\nplt.plot(results_dict[\"valid\"][\"rmse\"], color = \"blue\", label = \"valid\")\nplt.legend()\nplt.show()","cccc2e4b":"xgb.plot_importance(model)\nplt.show()","7a7e5c21":"xgb.plot_importance(model, importance_type = \"gain\")\nplt.show()","23fcb76e":"fig = plt.figure(figsize=(100,100))\nax = plt.subplot()\nxgb.plot_tree(model, num_trees=2, ax=ax, rankdir='LR')\n# fig.savefig(\"img.png\")\nplt.show()","91a21b31":"### \u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3059\u308b","4977157f":"#### \u91cd\u8981\u5ea6(\u5206\u5c90\u5bc4\u4e0e\u6570)","076ba4e8":"## \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","da57f0ac":"#### \u6c7a\u5b9a\u6728","0f0d2407":"### \u8a13\u7df4\u30c7\u30fc\u30bf\u3078\u3053\u308c\u307e\u3067\u306b\u4f5c\u6210\u3057\u305f\u7279\u5fb4\u91cf\u3092\u3059\u3079\u3066merge\u3059\u308b","86a62164":"### \u7d50\u679c\u306e\u53ef\u8996\u5316  \n#### \u8a13\u7df4\u30c7\u30fc\u30bf\u306eRMSE","9bf6685a":"### \u4f7f\u3046\u7279\u5fb4\u91cf\u3092\u9078\u5b9a","03effbc6":"### \u63d0\u51fa","7d04827f":"### XGBoost","3bd7c230":"## \u4e88\u6e2c\n### \u30e2\u30c7\u30ea\u30f3\u30b0","a48db327":"### items-df","d34cd664":"#### \u91cd\u8981\u5ea6(\u5bc4\u4e0e\u5ea6)","d4c6f750":"#### \u691c\u8a3c\u30c7\u30fc\u30bf\u306eRMSE","8f6ee275":"# Predict Future Sales \u65e5\u672c\u8a9e  \n\n## \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","7322c0ac":"## \u30c7\u30fc\u30bf\u306e\u6574\u7406  \n\n### shops df","91eedc78":"## \u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u308b\n### \u7d44\u307f\u5408\u308f\u305b\u4f5c\u6210  \n> \u7d44\u307f\u5408\u308f\u305b\u30d1\u30bf\u30fc\u30f3\u3092\u8907\u6570\u7528\u610f\u3057\u305f","b5b12416":"#### \u5b66\u7fd2\u66f2\u7dda","54e1a070":"## \u5916\u308c\u5024\u9664\u5916","a186fec5":"### cats-df","4faadd99":"### \u5b66\u7fd2","b5afd931":"#### lightGBM"}}