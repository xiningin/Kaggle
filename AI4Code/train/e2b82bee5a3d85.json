{"cell_type":{"b6105f12":"code","68944598":"code","4f8644d3":"code","e2207272":"code","482f9fc2":"code","15a47773":"code","365bce21":"code","0377d7f7":"code","6bdd8581":"code","df68b1f3":"code","ae8d597e":"code","197d43ba":"code","558c32c6":"code","f8c02bbb":"code","b8244b36":"code","4a240d25":"code","65ac5205":"code","2935385d":"code","f5829318":"code","d8b58d01":"code","cca459d6":"code","ccc47b68":"code","d0f09585":"code","7a58f930":"code","ca5483b5":"code","f1762361":"code","b5db0dfd":"code","0bf43e89":"code","4a54f6b8":"code","bb7b7572":"code","8873739b":"code","5d9e5b32":"code","d684bd0e":"code","324aefc9":"code","3a2e6227":"code","a2e2fbbb":"code","308a4e66":"code","9915cd01":"code","9fba1ce0":"markdown","f53fca3b":"markdown","478839bd":"markdown","33dec772":"markdown","5d238853":"markdown","bd8fae24":"markdown","fb7b3c75":"markdown","23dd8640":"markdown","7344ea24":"markdown","cc8ee6f9":"markdown","52d6e4e5":"markdown","0ac3ccb7":"markdown","54196d0d":"markdown","31fba1e2":"markdown","4eaf642c":"markdown","39ff15b4":"markdown","1485a0d2":"markdown","e9f72bbf":"markdown","08865f27":"markdown","3cfaaa96":"markdown","feb762e8":"markdown","b2106c66":"markdown","540d97f7":"markdown","f748bfdf":"markdown","7ca7ecd4":"markdown","1e9666f7":"markdown","7d57430a":"markdown","60103db1":"markdown","1d583ab8":"markdown"},"source":{"b6105f12":"#Importing librairies\n\nimport pandas as pd \nimport numpy as np\n\n# Scikit-learn library: For SVM\nfrom sklearn import preprocessing\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import svm\n\nimport itertools\n\n# Matplotlib library to plot the charts\nimport matplotlib.pyplot as plt\nimport matplotlib.mlab as mlab\n\n# Library for the statistic data vizualisation\nimport seaborn\n\n%matplotlib inline\n\n","68944598":"data = pd.read_csv('..\/input\/creditcard.csv') # Reading the file .csv\ndf = pd.DataFrame(data) # Converting data to Panda DataFrame","4f8644d3":"df = pd.DataFrame(data) # Converting data to Panda DataFrame","e2207272":"df.describe() # Description of statistic features (Sum, Average, Variance, minimum, 1st quartile, 2nd quartile, 3rd Quartile and Maximum)","482f9fc2":"df_fraud = df[df['Class'] == 1] # Recovery of fraud data\nplt.figure(figsize=(15,10))\nplt.scatter(df_fraud['Time'], df_fraud['Amount']) # Display fraud amounts according to their time\nplt.title('Scratter plot amount fraud')\nplt.xlabel('Time')\nplt.ylabel('Amount')\nplt.xlim([0,175000])\nplt.ylim([0,2500])\nplt.show()","15a47773":"nb_big_fraud = df_fraud[df_fraud['Amount'] > 1000].shape[0] # Recovery of frauds over 1000\nprint('There are only '+ str(nb_big_fraud) + ' frauds where the amount was bigger than 1000 over ' + str(df_fraud.shape[0]) + ' frauds')","365bce21":"number_fraud = len(data[data.Class == 1])\nnumber_no_fraud = len(data[data.Class == 0])\nprint('There are only '+ str(number_fraud) + ' frauds in the original dataset, even though there are ' + str(number_no_fraud) +' no frauds in the dataset.')","0377d7f7":"print(\"The accuracy of the classifier then would be : \"+ str((284315-492)\/284315)+ \" which is the number of good classification over the number of tuple to classify\")","6bdd8581":"df_corr = df.corr() # Calculation of the correlation coefficients in pairs, with the default method:\n                    # Pearson, Standard Correlation Coefficient","df68b1f3":"plt.figure(figsize=(15,10))\nseaborn.heatmap(df_corr, cmap=\"YlGnBu\") # Displaying the Heatmap\nseaborn.set(font_scale=2,style='white')\n\nplt.title('Heatmap correlation')\nplt.show()","ae8d597e":"rank = df_corr['Class'] # Retrieving the correlation coefficients per feature in relation to the feature class\ndf_rank = pd.DataFrame(rank) \ndf_rank = np.abs(df_rank).sort_values(by='Class',ascending=False) # Ranking the absolute values of the coefficients\n                                                                  # in descending order\ndf_rank.dropna(inplace=True) # Removing Missing Data (not a number)","197d43ba":"# We seperate ours data in two groups : a train dataset and a test dataset\n\n# First we build our train dataset\ndf_train_all = df[0:150000] # We cut in two the original dataset\ndf_train_1 = df_train_all[df_train_all['Class'] == 1] # We seperate the data which are the frauds and the no frauds\ndf_train_0 = df_train_all[df_train_all['Class'] == 0]\nprint('In this dataset, we have ' + str(len(df_train_1)) +\" frauds so we need to take a similar number of non-fraud\")\n\ndf_sample=df_train_0.sample(300)\ndf_train = df_train_1.append(df_sample) # We gather the frauds with the no frauds. \ndf_train = df_train.sample(frac=1) # Then we mix our dataset","558c32c6":"X_train = df_train.drop(['Time', 'Class'],axis=1) # We drop the features Time (useless), and the Class (label)\ny_train = df_train['Class'] # We create our label\nX_train = np.asarray(X_train)\ny_train = np.asarray(y_train)","f8c02bbb":"############################## with all the test dataset to see if the model learn correctly ##################\ndf_test_all = df[150000:]\n\nX_test_all = df_test_all.drop(['Time', 'Class'],axis=1)\ny_test_all = df_test_all['Class']\nX_test_all = np.asarray(X_test_all)\ny_test_all = np.asarray(y_test_all)","b8244b36":"X_train_rank = df_train[df_rank.index[1:11]] # We take the first ten ranked features\nX_train_rank = np.asarray(X_train_rank)","4a240d25":"############################## with all the test dataset to see if the model learn correctly ##################\nX_test_all_rank = df_test_all[df_rank.index[1:11]]\nX_test_all_rank = np.asarray(X_test_all_rank)\ny_test_all = np.asarray(y_test_all)","65ac5205":"class_names=np.array(['0','1']) # Binary label, Class = 1 (fraud) and Class = 0 (no fraud)","2935385d":"# Function to plot the confusion Matrix\ndef plot_confusion_matrix(cm, classes,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = 'd' \n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","f5829318":"classifier = svm.SVC(kernel='linear') # We set a SVM classifier, the default SVM Classifier (Kernel = Radial Basis Function)","d8b58d01":"classifier.fit(X_train, y_train) # Then we train our model, with our balanced data train.","cca459d6":"prediction_SVM_all = classifier.predict(X_test_all) #And finally, we predict our data test.","ccc47b68":"cm = confusion_matrix(y_test_all, prediction_SVM_all)\nplot_confusion_matrix(cm,class_names)","d0f09585":"print('Our criterion give a result of ' \n      + str( ( (cm[0][0]+cm[1][1]) \/ (sum(cm[0]) + sum(cm[1])) + 4 * cm[1][1]\/(cm[1][0]+cm[1][1])) \/ 5))","7a58f930":"print('We have detected ' + str(cm[1][1]) + ' frauds \/ ' + str(cm[1][1]+cm[1][0]) + ' total frauds.')\nprint('\\nSo, the probability to detect a fraud is ' + str(cm[1][1]\/(cm[1][1]+cm[1][0])))\nprint(\"the accuracy is : \"+str((cm[0][0]+cm[1][1]) \/ (sum(cm[0]) + sum(cm[1]))))","ca5483b5":"classifier.fit(X_train_rank, y_train) # Then we train our model, with our balanced data train.\nprediction_SVM = classifier.predict(X_test_all_rank) #And finally, we predict our data test.","f1762361":"cm = confusion_matrix(y_test_all, prediction_SVM)\nplot_confusion_matrix(cm,class_names)","b5db0dfd":"print('Our criterion give a result of ' \n      + str( ( (cm[0][0]+cm[1][1]) \/ (sum(cm[0]) + sum(cm[1])) + 4 * cm[1][1]\/(cm[1][0]+cm[1][1])) \/ 5))","0bf43e89":"print('We have detected ' + str(cm[1][1]) + ' frauds \/ ' + str(cm[1][1]+cm[1][0]) + ' total frauds.')\nprint('\\nSo, the probability to detect a fraud is ' + str(cm[1][1]\/(cm[1][1]+cm[1][0])))\nprint(\"the accuracy is : \"+str((cm[0][0]+cm[1][1]) \/ (sum(cm[0]) + sum(cm[1]))))","4a54f6b8":"classifier_b = svm.SVC(kernel='linear',class_weight={0:0.60, 1:0.40})","bb7b7572":"classifier_b.fit(X_train, y_train) # Then we train our model, with our balanced data train.","8873739b":"prediction_SVM_b_all = classifier_b.predict(X_test_all) #We predict all the data set.","5d9e5b32":"cm = confusion_matrix(y_test_all, prediction_SVM_b_all)\nplot_confusion_matrix(cm,class_names)","d684bd0e":"print('Our criterion give a result of ' \n      + str( ( (cm[0][0]+cm[1][1]) \/ (sum(cm[0]) + sum(cm[1])) + 4 * cm[1][1]\/(cm[1][0]+cm[1][1])) \/ 5))","324aefc9":"print('We have detected ' + str(cm[1][1]) + ' frauds \/ ' + str(cm[1][1]+cm[1][0]) + ' total frauds.')\nprint('\\nSo, the probability to detect a fraud is ' + str(cm[1][1]\/(cm[1][1]+cm[1][0])))\nprint(\"the accuracy is : \"+str((cm[0][0]+cm[1][1]) \/ (sum(cm[0]) + sum(cm[1]))))","3a2e6227":"classifier_b.fit(X_train_rank, y_train) # Then we train our model, with our balanced data train.\nprediction_SVM = classifier_b.predict(X_test_all_rank) #And finally, we predict our data test.","a2e2fbbb":"cm = confusion_matrix(y_test_all, prediction_SVM)\nplot_confusion_matrix(cm,class_names)","308a4e66":"print('Our criterion give a result of ' \n      + str( ( (cm[0][0]+cm[1][1]) \/ (sum(cm[0]) + sum(cm[1])) + 4 * cm[1][1]\/(cm[1][0]+cm[1][1])) \/ 5))","9915cd01":"print('We have detected ' + str(cm[1][1]) + ' frauds \/ ' + str(cm[1][1]+cm[1][0]) + ' total frauds.')\nprint('\\nSo, the probability to detect a fraud is ' + str(cm[1][1]\/(cm[1][1]+cm[1][0])))\nprint(\"the accuracy is : \"+str((cm[0][0]+cm[1][1]) \/ (sum(cm[0]) + sum(cm[1]))))","9fba1ce0":"# Testing the model","f53fca3b":"# Confusion Matrix","478839bd":"**Unbalanced data**","33dec772":"That is why  using the accuracy as only classification criterion could be considered unthoughtful. \nDuring the remaining part of this study our criterion will consider precision on the real fraud 4 times more important than the general accuracy.\nEven though the final tested result is accuracy.","5d238853":"However as we haven't infinite time nor the patience, we are going to run the classifier with the undersampled training data (for those using the undersampling principle if results are really bad just rerun the training dataset definition)","bd8fae24":"There is a need to compute the fit method again, as the dimension of the tuples to predict went from 29 to 10 because of the dimension reduction","fb7b3c75":"# Correlation of features","23dd8640":"# Data Selection","7344ea24":"Then we define training and testing set after applying a dimension reduction to illustrate the fact that nothing will be gained because a PCA was previously computed","cc8ee6f9":"# Model Selection","52d6e4e5":"# Data recuperation","0ac3ccb7":"So now, we'll use a SVM model classifier, with the scikit-learn library.","54196d0d":" # Models Rank","31fba1e2":"# Data Visualization","4eaf642c":"We can see that the study using the reduced data is far from unrelevant, which means that the last step of the previously computed PCA could have been done in a more efficient way. Indeed one of the main question we have with the PCA once we calculated the principals components direction, is how many of this component are we gonna keep. This means that some of the 30 dimensions are do not discriminate classes that much.","39ff15b4":"One way to do oversampling is to replicate the under-represented class tuples until we attain a correct proportion between the class","1485a0d2":"What can generally be done on a massive dataset is a dimension reduction.\nBy picking th emost important dimensions, there is a possiblity of explaining most of the problem, thus gaining\na considerable amount of time while preventing the accuracy to drop too much.","e9f72bbf":" # Models Rank","08865f27":"This dataset is unbalanced which means using the data as it is might result in unwanted behaviour from a supervised classifier.\nTo make it easy to understand if a classifier were to train with this data set trying to achieve the best accuracy possible it would most likely label every transaction as a non-fraud","3cfaaa96":"To answer this problem we could use the oversampling principle or the undersampling principle\nThe undersampling principle should be used only if we can be sure that the selected few tuples (in this case non-fraud) are representative of the whole non-fraud transactions of the dataset.","feb762e8":"As we can notice, most of the features are not correlated with each other. This corroborates the fact that a PCA was previously performed on the data.","b2106c66":"UNDERSAMPLING","540d97f7":"We notive, first of all, the time doesn't impact the frequency of frauds. Moreover, the majority of frauds are small amounts.","f748bfdf":"In this previously used SVM model, the weigh of each class was the same, which means that missing a fraud is as bad as misjudging a non-fraud. The objective, for a bank, is to maximize the number of detected frauds! Even if it means considering more non-fraud tuple as fraudulent operation. So, we need to minimize the False positives : the number of no detected frauds.\n\nIndeed, by modifying the class_weight parameter, we can chose which class to give more importance during the training phase. In this case, the class_1 which describes the fraudulent operations will be considered more important than the class_0 (non-fraud operation). However, in this case we will give more importance to the class_0 due to the large number of misclassed non-fraud operation. Of course the goal is to lose as little effective fraud as possible in the process.\n","7ca7ecd4":"# Testing the model","1e9666f7":"However in this case given the fact that a PCA was previously performed, if the dimension reduction is effective then the PCA wasn't computed in the most effective way. Another way to put it is that no dimension reduction should be computed on a dataset on which a PCA was computed correctly.","7d57430a":"In this case we are gonna try to minimize the number of errors in our prediction results. Errors are on the anti-diagonal of the confusion matrix.  But we can infer that being wrong about an actual fraud is far worse than being wrong about a non-fraud transaction. ","60103db1":"# Re-balanced class weigh :","1d583ab8":"OVERSAMPLING"}}