{"cell_type":{"47ba50be":"code","7c146090":"code","0fb64d3c":"code","6adb8b59":"code","2698cf27":"code","f4e3e069":"code","49a75dda":"code","6c055e69":"code","98b566eb":"code","e646db46":"code","3195b2c9":"code","37f06147":"code","85374caf":"code","395cbbe2":"code","be8f39ad":"code","cc31ecd9":"code","be01169e":"code","2e31e591":"code","0bc5f0b3":"code","27a01223":"code","bca58a55":"code","2dbe966c":"code","b8277941":"code","5769bab9":"code","7c503bf8":"code","97ed0900":"code","f1a82ae6":"code","94cd10fd":"code","c238449f":"code","8b882360":"code","e0912b3a":"code","d15cdec2":"code","b09da9e6":"code","f304da89":"code","b575b2e2":"code","b7f92a8e":"code","83932631":"code","c9905751":"code","c88e512a":"code","9f6e2273":"code","27a733f4":"code","1a3a2bc5":"code","c86830d2":"code","a1977ba9":"code","a528324d":"code","4831a5d6":"code","b8fd1681":"code","2305a650":"code","7f259117":"code","74e1a520":"code","19345e4e":"code","3632db31":"code","cf67d95a":"code","0dd0a9ca":"code","0be6fd95":"code","b7736c92":"code","bf2c62e6":"code","9557dbf7":"code","b1891d3d":"code","faa0ffde":"code","0d4ffa91":"code","2ac614fd":"code","c037f687":"code","bad64b4a":"code","60ddfc85":"code","5a132e14":"code","b18ecb01":"code","431b5469":"code","d13cdc4d":"code","d8645710":"code","7e30535c":"code","8b46074f":"markdown","c64ddede":"markdown","7d48bff4":"markdown","6bac5bcc":"markdown","3635c653":"markdown","aa392faa":"markdown","80e05034":"markdown","c6017b3c":"markdown","04c21767":"markdown","cbd33e34":"markdown","e7eef665":"markdown","1a4d8277":"markdown","e72d9162":"markdown","5105ba23":"markdown","fc9e5904":"markdown","d05d4e15":"markdown","fb711d15":"markdown","c5e0052c":"markdown","fa92c696":"markdown","e63535f7":"markdown","8f7cfc88":"markdown","a7cd0593":"markdown"},"source":{"47ba50be":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","7c146090":"#Import Ames House Dataset\ndf= pd.read_csv('..\/input\/house-price-prediction-dataset\/Housing_Price_Data.csv')","0fb64d3c":"df.head()","6adb8b59":"#Our objective is to predict the SalePrice based on several Features, \n# Correlation overview:\ndf.corr()['SalePrice'].sort_values()","2698cf27":"sns.scatterplot(data=df, x='Overall Qual', y='SalePrice')\nplt.axhline(y=200000,color='r')","f4e3e069":"df[(df['Overall Qual']>8) &(df['SalePrice']<200000)][['SalePrice', 'Overall Qual']]","49a75dda":"sns.scatterplot(x='Gr Liv Area', y='SalePrice', data=df)\nplt.axhline(y=200000, color='r')\nplt.axvline(x=4000, color='r')","6c055e69":"df[(df['Gr Liv Area']>4000) & (df['SalePrice']<400000)][['SalePrice', 'Gr Liv Area']]","98b566eb":"#Remove the outliers:\nindex_drop=df[(df['Gr Liv Area']>4000) & (df['SalePrice']<400000)].index\ndf=df.drop(index_drop, axis=0)","e646db46":"sns.scatterplot(x='Gr Liv Area', y='SalePrice', data=df)\nplt.axhline(y=200000, color='r')\nplt.axvline(x=4000, color='r')","3195b2c9":"sns.scatterplot(x='Overall Qual', y='SalePrice', data=df)\nplt.axhline(y=200000,color='r')","37f06147":"sns.boxplot(x='Overall Qual', y='SalePrice', data=df)","85374caf":"df.head()","395cbbe2":"#open the documentation about the data set. (this file is in a txt format)\n\nwith open('..\/input\/advance-house-price-predicitons\/data description.txt', 'r') as f:\n    print(f.read())","be8f39ad":"df.info()","cc31ecd9":"#Removing the PID (We already have an index, so we don't need PID unique identifier. \n#becuase it doesn't have any information and can't help our learning models)\n\ndf= df.drop('PID', axis=1)","be01169e":"df.isnull()","2e31e591":"#How many missing data is there in each features?\ndf.isnull().sum()","0bc5f0b3":"#The percent of missing data in any feature:\n100*(df.isnull().sum()\/len(df))","27a01223":"#Make a Function to calculate the percent of missing data in each columns (feature) and then sort it\ndef missing_percent(df):\n    nan_percent= 100*(df.isnull().sum()\/len(df))\n    nan_percent= nan_percent[nan_percent>0].sort_values()\n    return nan_percent","bca58a55":"nan_percent= missing_percent(df)","2dbe966c":"nan_percent","b8277941":"#plot the feature with missing indicating the percent of missing data\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)","5769bab9":"#every Feature with missing data must be checked!\n#We choose a threshold of 1%. It means, if there is less than 1% of a feature are missing,\n#then we will consider just dropping that rows\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)\n\n#Set 1% threshold:\nplt.ylim(0,1)","7c503bf8":"nan_percent[nan_percent<1]","97ed0900":"nan_percent[nan_percent<1].index","f1a82ae6":"100\/len(df)\n#It shows that, Feature with just one missing rows has this percent value of missing data","94cd10fd":"df[df['Electrical'].isnull()]","c238449f":"df[df['Garage Area'].isnull()]","8b882360":"df= df.dropna(axis=0, subset=['Electrical', 'Garage Area'])","e0912b3a":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)\nplt.ylim(0,1)","d15cdec2":"#Features related to Basement:","b09da9e6":"df[df['Total Bsmt SF'].isnull()]","f304da89":"df[df['Bsmt Half Bath'].isnull()]","b575b2e2":"df[df['Bsmt Full Bath'].isnull()]","b7f92a8e":"#After checking the data documentation,\n#it shows that missing value (two rows) in Basement Features are because of there is no basement in these rows\n#Decision: Filling in data based on column: numerical basement & string descriptive:\n\n#Numerical Columns fill with 0:\nbsmt_num_cols= ['BsmtFin SF 1', 'BsmtFin SF 2', 'Bsmt Unf SF','Total Bsmt SF' ,'Bsmt Full Bath', 'Bsmt Half Bath']\ndf[bsmt_num_cols]=df[bsmt_num_cols].fillna(0)\n\n#String Columns fill with None:\nbsmt_str_cols= ['Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin Type 2']\ndf[bsmt_str_cols]= df[bsmt_str_cols].fillna('None')","83932631":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)\nplt.ylim(0,1)","c9905751":"df[\"Mas Vnr Type\"]= df[\"Mas Vnr Type\"].fillna(\"None\")\ndf[\"Mas Vnr Area\"]= df[\"Mas Vnr Area\"].fillna(0)","c88e512a":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)\n","9f6e2273":"df[['Garage Type', 'Garage Yr Blt', 'Garage Finish', 'Garage Qual', 'Garage Cond']]","27a733f4":"#Filling the missing Value:\nGar_str_cols= ['Garage Type', 'Garage Finish', 'Garage Qual', 'Garage Cond']\ndf[Gar_str_cols]=df[Gar_str_cols].fillna('None')\n\ndf['Garage Yr Blt']=df['Garage Yr Blt'].fillna(0)","1a3a2bc5":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)\n","c86830d2":"nan_percent.index","a1977ba9":"df[['Lot Frontage', 'Fireplace Qu', 'Fence', 'Alley', 'Misc Feature',\n       'Pool QC']]","a528324d":"df= df.drop(['Fence', 'Alley', 'Misc Feature','Pool QC'], axis=1)","4831a5d6":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)","b8fd1681":"#Filling in Fireplace Quality based on dataset documentation:\ndf['Fireplace Qu']= df['Fireplace Qu'].fillna('None')","2305a650":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)","7f259117":"df['Neighborhood'].unique()","74e1a520":"plt.figure(figsize=(8,12))\nsns.boxplot(data=df, x='Lot Frontage', y='Neighborhood')","19345e4e":"#Impute missing data based on other columns:\n\ndf.groupby('Neighborhood')['Lot Frontage']","3632db31":"df.groupby('Neighborhood')['Lot Frontage'].mean()","cf67d95a":"df.groupby('Neighborhood')['Lot Frontage'].transform(lambda val: val.fillna(val.mean()))","0dd0a9ca":"df['Lot Frontage']=df.groupby('Neighborhood')['Lot Frontage'].transform(lambda val: val.fillna(val.mean()))","0be6fd95":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)","b7736c92":"df['Lot Frontage']= df['Lot Frontage'].fillna(0)","bf2c62e6":"nan_percent= missing_percent(df)\n","9557dbf7":"nan_percent","b1891d3d":"df['MS SubClass']","faa0ffde":"df.info()","0d4ffa91":"df['MS SubClass'].unique()","2ac614fd":"#Convert to String:\ndf['MS SubClass']= df['MS SubClass'].apply(str)","c037f687":"\ndf.info()\n#or: df['MS SubClass'].dtype","bad64b4a":"df.select_dtypes(include='object')","60ddfc85":"df_num= df.select_dtypes(exclude='object')\ndf_obj= df.select_dtypes(include='object')","5a132e14":"df_num.info()","b18ecb01":"df_obj.info()","431b5469":"# Converting:\ndf_obj= pd.get_dummies(df_obj, drop_first=True)","d13cdc4d":"df_obj.shape","d8645710":"Final_df= pd.concat([df_num, df_obj], axis=1)","7e30535c":"Final_df.head()","8b46074f":"#### Now, the Dataset is Ready for any Machine Learing Model & Analysis","c64ddede":"**If only a few rows are missing some values, then it might just be a good idea to drop those rows.** \n\n**What does this cost you in terms of performace? It essentialy removes potential training\/testing data, but if its only a few rows, its unlikely to change performance.**\n\n\n**Sometimes it is a good idea to remove a feature entirely if it has too many null values. However, you should carefully consider why it has so many null values, in certain situations null could just be used as a separate category.** \n\n(Take for example a feature column for the number of cars that can fit into a garage. Perhaps if there is no garage then there is a null value, instead of a zero. It probably makes more sense to quickly fill the null values in this case with a zero instead of a null. Only you can decide based off your domain expertise and knowledge of the data set!)","7d48bff4":"### Garage Columns:\n**Based on the dataset documentation, NaN in Garage Columns seems to indicate no garage.**\n\n**Decision: Fill with 'None' or 0**","6bac5bcc":"## 2-Dealing with Missing Data","3635c653":"### A- How Much Data is Missing?","aa392faa":"### Fill\/Keep\/Drop?","80e05034":"**Definition:**\n\n**In Statistics, an outlier is a data point that differs significantly from other observations (Grubbs, 1969; Maddala, 1992).**\n\n**An outlier may be due to variability in the measurement or it may indicate experimental error, the latter are sometimes excluded from the data set (Grubbs, 1969).**\n\n**Anoutlier can couse serious problem in statistical analysis.**\n\n* [Wikipedia Article](http:\/\/en.wikipedia.org\/wiki\/Outlier)\n","c6017b3c":"#### A- Numerical Columns to Categorical\nWe need to be careful when it comes to encoding categorical as numbers. We want to make sure that the numerical relationship makes sense for model. For example, the encoding MSSubClass is essentially just a code per class","04c21767":"## 3-Dealing with Categorical Data","cbd33e34":"### C-Working based on Columns Missing Data","e7eef665":"**In statistics, missing data, or missing values, occur when no data value is stored for the variable in an observation. missing data are a common occurrence and can have a significant effect on the conclusions that can be drawn from the data.**\n\n[Wikipedia Article](http:\/\/en.wikipedia.org\/wiki\/Missing_data)\n","1a4d8277":"**We don't have any Missing Data**","e72d9162":"### Filling the missing values:","5105ba23":"### Dropping Rows:","fc9e5904":"### B- Creating Dummy Variables","d05d4e15":"# Data Preparation","fb711d15":"### D- Imputation of Missing Data","c5e0052c":"**Mas Vnr Features:**\n\nBased on the Dataset Document File, missing values for 'Mas Vnr Type' and 'Mas Vnr Area' means the house doesn't have any mansonry veneer. so, we decide to fill the missing value as below: ","fa92c696":"### B- Working base on Rows Missing Data","e63535f7":"### 1- Dealing with Outliers","8f7cfc88":"**Columns: Lot Frontage**\n\n**We assume that the Lot Frontage is related to what a Neighborhood a house is in**","a7cd0593":"**Remove the Columns with more than 80% missing values**"}}