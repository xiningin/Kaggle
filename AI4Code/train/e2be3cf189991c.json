{"cell_type":{"067a72b8":"code","93f147da":"code","9fc5f1c5":"code","9ce35731":"code","16870982":"code","fe4b5bda":"code","5d00d8e3":"code","79115c02":"code","b42c7eb8":"code","f5a0bc0b":"code","f58f89ab":"code","037d2ea6":"code","a789748b":"code","99a3f8df":"code","b0a54489":"code","53dcdea6":"code","eecc12ae":"code","8965cc72":"code","90338ccd":"markdown","2d9785dc":"markdown","4f186d11":"markdown","7d18b6d0":"markdown","907a7e30":"markdown","646b6a7c":"markdown","dab35d57":"markdown"},"source":{"067a72b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport matplotlib.pyplot as plt\nimport seaborn as sns","93f147da":"data_day = pd.read_csv('..\/input\/air-quality-data-in-india\/city_day.csv')\ndata_hour = pd.read_csv('..\/input\/air-quality-data-in-india\/city_hour.csv')\ndata_station_day = pd.read_csv('..\/input\/air-quality-data-in-india\/station_day.csv')\ndata_station_hour = pd.read_csv('..\/input\/air-quality-data-in-india\/station_hour.csv')\ndata_station = pd.read_csv('..\/input\/air-quality-data-in-india\/stations.csv')","9fc5f1c5":"print(\"--------------------Dataset for Air Quality in India------------------------\")\nprint(\"\\n\")\nprint(\"\\t\\t---------Data of City Day---------\")\nprint(\"\\n\")\nprint(data_day.head())\nprint(\"\\n\")\nprint(\"\\t\\t---------Data of City Hour---------\")\nprint(\"\\n\")\nprint(data_hour.head())\nprint(\"\\n\")\nprint(\"\\t\\t---------Data of Station day---------\")\nprint(\"\\n\")\nprint(data_station_day.head())\nprint(\"\\n\")\nprint(\"\\t\\t---------Data of Station Hour---------\")\nprint(\"\\n\")\nprint(data_station_hour.head())\nprint(\"\\n\")\nprint(\"\\t\\t---------Data of Stations---------\")\nprint(\"\\n\")\nprint(data_station.head())\nprint(\"\\n\")\nprint(\"--------------------End of Dataset for Air Quality in India------------------------\")","9ce35731":"print(\"--------------------Information of Dataset for Air Quality in India------------------------\")\nprint(\"\\n\")\nprint(\"\\t\\t---------Info of City Day Data---------\")\nprint(\"\\n\")\nprint(data_day.info())\nprint(\"\\n\")\nprint(\"\\t\\t---------Info of City Hour Data---------\")\nprint(\"\\n\")\nprint(data_hour.info())\nprint(\"\\n\")\nprint(\"\\t\\t---------Info of Station day Data---------\")\nprint(\"\\n\")\nprint(data_station_day.info())\nprint(\"\\n\")\nprint(\"\\t\\t---------Info of Station Hour Data---------\")\nprint(\"\\n\")\nprint(data_station_hour.info())\nprint(\"\\n\")\nprint(\"\\t\\t---------Info of Stations Data---------\")\nprint(\"\\n\")\nprint(data_station.info())\nprint(\"\\n\")\nprint(\"--------------------End of Dataset for Air Quality in India------------------------\")","16870982":"from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')","fe4b5bda":"data_day[\"PM2.5\"] = imp.fit_transform(data_day[['PM2.5']])\ndata_day[\"PM10\"] = imp.fit_transform(data_day[['PM10']])\ndata_day[\"NO\"] = imp.fit_transform(data_day[['NO']])\ndata_day[\"NO2\"] = imp.fit_transform(data_day[['NO2']])\ndata_day[\"NOx\"] = imp.fit_transform(data_day[['NOx']])\ndata_day[\"NH3\"] = imp.fit_transform(data_day[['NH3']])\ndata_day[\"CO\"] = imp.fit_transform(data_day[['CO']])\ndata_day[\"SO2\"] = imp.fit_transform(data_day[['SO2']])\ndata_day[\"O3\"] = imp.fit_transform(data_day[['O3']])\ndata_day[\"Benzene\"] = imp.fit_transform(data_day[['Benzene']])\ndata_day[\"Toluene\"] = imp.fit_transform(data_day[['Toluene']])\ndata_day[\"Xylene\"] = imp.fit_transform(data_day[['Xylene']])\ndata_day[\"AQI\"] = imp.fit_transform(data_day[['AQI']])\nprint(\"-------------------Dealing with NaN values in City Day Dataset successfully completed--------------------\")\ndata_hour[\"PM2.5\"] = imp.fit_transform(data_hour[['PM2.5']])\ndata_hour[\"PM10\"] = imp.fit_transform(data_hour[['PM10']])\ndata_hour[\"NO\"] = imp.fit_transform(data_hour[['NO']])\ndata_hour[\"NO2\"] = imp.fit_transform(data_hour[['NO2']])\ndata_hour[\"NOx\"] = imp.fit_transform(data_hour[['NOx']])\ndata_hour[\"NH3\"] = imp.fit_transform(data_hour[['NH3']])\ndata_hour[\"CO\"] = imp.fit_transform(data_hour[['CO']])\ndata_hour[\"SO2\"] = imp.fit_transform(data_hour[['SO2']])\ndata_hour[\"O3\"] = imp.fit_transform(data_hour[['O3']])\ndata_hour[\"Benzene\"] = imp.fit_transform(data_hour[['Benzene']])\ndata_hour[\"Toluene\"] = imp.fit_transform(data_hour[['Toluene']])\ndata_hour[\"Xylene\"] = imp.fit_transform(data_hour[['Xylene']])\ndata_hour[\"AQI\"] = imp.fit_transform(data_hour[['AQI']])\nprint(\"-------------------Dealing with NaN values in City Hour Dataset successfully completed--------------------\")\ndata_station_day[\"PM2.5\"] = imp.fit_transform(data_station_day[['PM2.5']])\ndata_station_day[\"PM10\"] = imp.fit_transform(data_station_day[['PM10']])\ndata_station_day[\"NO\"] = imp.fit_transform(data_station_day[['NO']])\ndata_station_day[\"NO2\"] = imp.fit_transform(data_station_day[['NO2']])\ndata_station_day[\"NOx\"] = imp.fit_transform(data_station_day[['NOx']])\ndata_station_day[\"NH3\"] = imp.fit_transform(data_station_day[['NH3']])\ndata_station_day[\"CO\"] = imp.fit_transform(data_station_day[['CO']])\ndata_station_day[\"SO2\"] = imp.fit_transform(data_station_day[['SO2']])\ndata_station_day[\"O3\"] = imp.fit_transform(data_station_day[['O3']])\ndata_station_day[\"Benzene\"] = imp.fit_transform(data_station_day[['Benzene']])\ndata_station_day[\"Toluene\"] = imp.fit_transform(data_station_day[['Toluene']])\ndata_station_day[\"Xylene\"] = imp.fit_transform(data_station_day[['Xylene']])\ndata_station_day[\"AQI\"] = imp.fit_transform(data_station_day[['AQI']])\nprint(\"-------------------Dealing with NaN values in Station Day Dataset successfully completed--------------------\")\ndata_station_hour[\"PM2.5\"] = imp.fit_transform(data_station_hour[['PM2.5']])\ndata_station_hour[\"PM10\"] = imp.fit_transform(data_station_hour[['PM10']])\ndata_station_hour[\"NO\"] = imp.fit_transform(data_station_hour[['NO']])\ndata_station_hour[\"NO2\"] = imp.fit_transform(data_station_hour[['NO2']])\ndata_station_hour[\"NOx\"] = imp.fit_transform(data_station_hour[['NOx']])\ndata_station_hour[\"NH3\"] = imp.fit_transform(data_station_hour[['NH3']])\ndata_station_hour[\"CO\"] = imp.fit_transform(data_station_hour[['CO']])\ndata_station_hour[\"SO2\"] = imp.fit_transform(data_station_hour[['SO2']])\ndata_station_hour[\"O3\"] = imp.fit_transform(data_station_hour[['O3']])\ndata_station_hour[\"Benzene\"] = imp.fit_transform(data_station_hour[['Benzene']])\ndata_station_hour[\"Toluene\"] = imp.fit_transform(data_station_hour[['Toluene']])\ndata_station_hour[\"Xylene\"] = imp.fit_transform(data_station_hour[['Xylene']])\ndata_station_hour[\"AQI\"] = imp.fit_transform(data_station_hour[['AQI']])\nprint(\"-------------------Dealing with NaN values in Station Hour Dataset successfully completed--------------------\")","5d00d8e3":"data_day.isnull().sum()","79115c02":"data_hour.isnull().sum()","b42c7eb8":"data_station_day.isnull().sum()","f5a0bc0b":"data_station_hour.isnull().sum()","f58f89ab":"data_day.hist(figsize=(16, 10))\nplt.show()","037d2ea6":"data_hour.hist(figsize=(16, 10))\nplt.show()","a789748b":"data_station_day.hist(figsize=(16, 10))\nplt.show()","99a3f8df":"data_station_hour.hist(figsize=(16, 10))\nplt.show()","b0a54489":"print(\"----------------Unique Values in AQI Buckets in all columns-------------------\")\nprint(\"\\n\")\nprint(\"\\t\\t------City Day Values------\")\nprint(\"\\n\")\nprint(data_day['AQI_Bucket'].unique())\nprint(\"\\n\")\nprint(\"\\t\\t------City Hour Values------\")\nprint(\"\\n\")\nprint(data_hour['AQI_Bucket'].unique())\nprint(\"\\n\")\nprint(\"\\t\\t------Station Day Values------\")\nprint(\"\\n\")\nprint(data_station_day['AQI_Bucket'].unique())\nprint(\"\\n\")\nprint(\"\\t\\t------Station Hour Values------\")\nprint(\"\\n\")\nprint(data_station_hour['AQI_Bucket'].unique())\nprint(\"\\n\")","53dcdea6":"data_station.City.unique()","eecc12ae":"import plotly.graph_objects as go\nimport plotly.express as px","8965cc72":"fig = px.scatter(data_day, x=data_day[\"City\"], y=data_day[\"AQI_Bucket\"], \n                 color=\"NO\",\n                 size='NO', \n                 hover_data=['PM2.5','PM10','NO','NO2','NOx','NH3','CO','SO2','O3','Benzene','Toluene','Xylene','AQI'], \n                 title = \"Air Index in city day\")\nfig.show()","90338ccd":"Hope you like this tutorial very much and don't forget to upvote this notebook.","2d9785dc":"Importing all the dataset we have.","4f186d11":"In this notebook, I analyze the dataset which has four parts.\nFirst we have to some analyzation because there is a lot of missing values in the data","7d18b6d0":"Replace missing values with the mean by Imputer.","907a7e30":"# Air Quality in India | Analyzation and Visualization","646b6a7c":"Till then **Enjoy Machine Learning**","dab35d57":"Importing Libraries :\n* Numpy\n* Pandas\n* Matplotlib\n* Seaborn\n* Plotly"}}