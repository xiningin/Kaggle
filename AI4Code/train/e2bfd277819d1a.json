{"cell_type":{"d67eafff":"code","664583c2":"code","ae4dfd2c":"code","ba0f9d08":"code","0f52a8e5":"code","6da53eda":"code","9bd9b08a":"code","5bbddc90":"code","020387b5":"code","c7c80d98":"code","6a3f33e7":"code","d54dee63":"code","c70926f3":"code","d2eb1162":"code","bbdb2ae1":"code","72f69f54":"code","e8a9b710":"code","27f487b4":"code","6576a553":"markdown"},"source":{"d67eafff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","664583c2":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom sklearn import datasets\nfrom sklearn import manifold\n%matplotlib inline","ae4dfd2c":"data = datasets.fetch_openml('mnist_784',version=1,return_X_y=True)\npixel_values,targets= data\ntargets= targets.astype(int)","ba0f9d08":"single_image= pixel_values[1,:].reshape(28,28)\nplt.imshow(single_image,cmap='gray')","0f52a8e5":"tsne = manifold.TSNE(n_components=2,random_state=42)\ntransformed_data = tsne.fit_transform(pixel_values[:3000,:])","6da53eda":"tsne_df = pd.DataFrame(np.column_stack((transformed_data,targets[:3000])),columns=[\"x\",\"y\",\"targets\"])\ntsne_df.loc[:,\"targets\"]= tsne_df.targets.astype(int)","9bd9b08a":"tsne_df.head(10)","5bbddc90":"grid= sns.FacetGrid(tsne_df,hue=\"targets\",size=8)\ngrid.map(plt.scatter,\"x\",\"y\").add_legend()","020387b5":"import tensorflow as tf # Import tensorflow library\nimport matplotlib.pyplot as plt # Import matplotlib librar\nmnist = tf.keras.datasets.mnist # Object of the MNIST dataset\n(x_train, y_train),(x_test, y_test) = mnist.load_data() # Load data","c7c80d98":"plt.imshow(x_train[0], cmap=\"gray\") # Import the image\nplt.show() # Plot the image","6a3f33e7":"# Normalize the train dataset\nx_train = tf.keras.utils.normalize(x_train, axis=1)\n# Normalize the test dataset\nx_test = tf.keras.utils.normalize(x_test, axis=1)","d54dee63":"#Build the model object\nmodel = tf.keras.models.Sequential()\n# Add the Flatten Layer\nmodel.add(tf.keras.layers.Flatten())\n# Build the input and the hidden layers\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\n# Build the output layer\nmodel.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))","c70926f3":"# Compile the model\nmodel.compile(optimizer=\"adam\", loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])","d2eb1162":"model.fit(x=x_train, y=y_train, epochs=55) # Start training process","bbdb2ae1":"# Evaluate the model performance\ntest_loss, test_acc = model.evaluate(x=x_test, y=y_test)\n# Print out the model accuracy \nprint('\\nTest accuracy:', test_acc)","72f69f54":"predictions = model.predict([x_test]) # Make prediction","e8a9b710":"print(np.argmax(predictions[1000]))","27f487b4":"plt.imshow(x_test[1000], cmap=\"gray\") # Import the image\nplt.show() # Show the image","6576a553":"# FOR MNIST AND APPLYING t-SNE"}}