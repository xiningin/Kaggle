{"cell_type":{"62ec3ca9":"code","551aa7ca":"code","48f68a4a":"code","82eccb04":"code","e8ecfb41":"code","4608dcf1":"code","d58383e4":"code","70cac8fe":"code","d4bb7b91":"code","d936977f":"code","9d9f5c2f":"code","27763110":"code","90868d42":"code","f17c1d8b":"code","129ec878":"code","14a7e49f":"code","661c1ee4":"code","7b03df03":"code","642c977e":"markdown","aef5df5d":"markdown","fd95640b":"markdown","76bfdde0":"markdown","efa34af9":"markdown","459611d4":"markdown","2c23b1e3":"markdown","744ec670":"markdown","6be8421b":"markdown","2b4b2176":"markdown","96368ef7":"markdown","776248f7":"markdown","349181a4":"markdown","b55b31ab":"markdown","53052ffb":"markdown","6bb10a1a":"markdown","80dffa2e":"markdown"},"source":{"62ec3ca9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\n\n# magic word for producing visualizations in notebook\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'","551aa7ca":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","48f68a4a":"train.drop(['Name'], axis=1, inplace=True)\ntrain.drop(['Cabin'], axis=1, inplace=True) # too many null values\ntrain.drop(['Ticket'], axis=1, inplace=True) # drop for now\n\ntest.drop(['Name'], axis=1, inplace=True)\ntest.drop(['Cabin'], axis=1, inplace=True) # too many null values\ntest.drop(['Ticket'], axis=1, inplace=True) # drop for now","82eccb04":"train = train[train['Embarked'].notna()]\ntrain = train[train['Fare'] < 300]","e8ecfb41":"train_clean = train.dropna(thresh=train.shape[1]-1)\nprint(str(train.shape[0]-train_clean.shape[0])+' rows deleted in train')\ntrain = train_clean","4608dcf1":"ids = train.pop(['PassengerId'], axis=1, inplace=True)\n\nids_test = test.pop(['PassengerId'], axis=1, inplace=True)","d58383e4":"labels = train.pop(['Survived'], axis=1, inplace=True)","70cac8fe":"train['Sex'] = pd.factorize(train['Sex'])[0]\ntrain['Embarked'] = pd.factorize(train['Embarked'])[0]\n\ntest['Sex'] = pd.factorize(test['Sex'])[0]\ntest['Embarked'] = pd.factorize(test['Embarked'])[0]","d4bb7b91":"imp_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\n\nimp_mean.fit(train[['Age']])\ntrain['Age'] = imp_mean.transform(train[['Age']]).ravel()\n\nimp_mean.fit(train[['Fare']])\n\n\n\ntest['Age'] = imp_mean.transform(test[['Age']]).ravel()\ntest['Fare'] = imp_mean.transform(test[['Fare']]).ravel()","d936977f":"dummy_columns = ['Sex', 'Pclass', 'Embarked']\nfor column in dummy_columns:\n    just_dummies = pd.get_dummies(train[column])\n    train = pd.concat([train, just_dummies], axis=1)      \n    train = train.drop([column], axis=1)\n\nfor column in dummy_columns:\n    just_dummies = pd.get_dummies(test[column])\n    test = pd.concat([test, just_dummies], axis=1)      \n    test = test.drop([column], axis=1)","9d9f5c2f":"scalerStd = StandardScaler()\nscalerStd.fit(train)\nscalerStd.transform(train)","27763110":"train, X_test, labels, y_test = train_test_split(train, labels, test_size=0.25, random_state=42)","90868d42":"clf = RandomForestClassifier(max_depth=25,\n                             random_state=42,\n                             min_samples_leaf=5,\n                             n_estimators=25\n                            )\n\nclf.fit(train, labels)","f17c1d8b":"scores = cross_val_score(clf, train, labels, cv=5)\nscores.mean()","129ec878":"scores = clf.predict(test)","14a7e49f":"len(scores)","661c1ee4":"result = pd.DataFrame()\nresult['PassengerId'] = ids_test\nresult['Survived'] = scores","7b03df03":"result.to_csv('Titanic-results.csv', index=False, header=True)","642c977e":"### Use standard scaler","aef5df5d":"### Make dummies","fd95640b":"### Drop some columns for now, as they don't bring too much value","76bfdde0":"### Load Data","efa34af9":"### Create classifier (Random Forest) and fit","459611d4":"### Create Dataframe for submission","2c23b1e3":"### 5-Fold Cross-Validation","744ec670":"# Feature Engineering + RandomForest","6be8421b":"### Get labels","2b4b2176":"### Fill missing values with mean for 'Age' and 'Fare'","96368ef7":"### Remove Rows with more than one missing value","776248f7":"### Factorize 'Sex' and 'Embarked' (from string to int)","349181a4":"### Predict for validation set","b55b31ab":"### Keep Passenger Id for later but remove from training and test data","53052ffb":"### Remove NaN in 'Embarked' and outliers in 'Fare'","6bb10a1a":"### Export as csv","80dffa2e":"### Split dataset (train\/test)"}}