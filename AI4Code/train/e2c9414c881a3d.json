{"cell_type":{"ffd35d20":"code","7b082011":"code","cc152420":"code","b22cad09":"code","f2a5d9ee":"code","5d0bc207":"code","84cdff94":"code","5009d1d7":"markdown","96a04ad2":"markdown","5799cd57":"markdown"},"source":{"ffd35d20":"# Installing external packages\n!pip install python-whois-extended -q\n!pip install pip install pyquery -q","7b082011":"# Import Modules\nimport whois\nfrom datetime import datetime, timezone\nimport math\nimport pandas as pd\nimport numpy as np\nfrom pyquery import PyQuery\nfrom requests import get","cc152420":"# Custom Class to Extract Features from URL\n\nclass UrlFeatureExtract(object):\n    def __init__(self, url):\n        self.url = url\n        self.domain = url.split('\/\/')[-1].split('\/')[0]\n        self.today = datetime.now().replace(tzinfo=None)\n\n        try:\n            self.whois = whois.query(self.domain).__dict__\n        except:\n            self.whois = None\n\n        try:\n            self.response = get(self.url)\n            self.pq = PyQuery(self.response.text)\n        except:\n            self.response = None\n            self.pq = None\n\n    ## URL string Features\n    def entropy(self):\n        string = self.url.strip()\n        prob = [float(string.count(c)) \/ len(string) for c in dict.fromkeys(list(string))]\n        entropy = sum([(p * math.log(p) \/ math.log(2.0)) for p in prob])\n        return entropy\n\n    def ip(self):\n        string = self.url\n        flag = False\n        if (\".\" in string):\n            elements_array = string.strip().split(\".\")\n            if(len(elements_array) == 4):\n                for i in elements_array:\n                    if (i.isnumeric() and int(i)>=0 and int(i)<=255):\n                        flag=True\n                    else:\n                        flag=False\n                        break\n        if flag:\n            return 1 \n        else:\n            return 0\n\n    def numDigits(self):\n        digits = [i for i in self.url if i.isdigit()]\n        return len(digits)\n\n    def urlLength(self):\n        return len(self.url)\n\n    def numParameters(self):\n        params = self.url.split('&')\n        return len(params) - 1\n\n    def numFragments(self):\n        fragments = self.url.split('#')\n        return len(fragments) - 1\n\n    def numSubDomains(self):\n        subdomains = self.url.split('http')[-1].split('\/\/')[-1].split('\/')\n        return len(subdomains)-1\n\n    def domainExtension(self):\n        ext = self.url.split('.')[-1].split('\/')[0]\n        return ext\n\n    ## URL domain features\n    def hasHttp(self):\n        return 'http:' in self.url\n\n    def hasHttps(self):\n        return 'https:' in self.url\n\n    def daysSinceRegistration(self):\n        if self.whois and self.whois['creation_date']:\n            diff = self.today - self.whois['creation_date'].replace(tzinfo=None)\n            diff = str(diff).split(' days')[0]\n            return diff\n        else:\n            return 0\n\n    def daysSinceExpiration(self):\n        if self.whois and self.whois['expiration_date']:\n            diff = self.whois['expiration_date'].replace(tzinfo=None) - self.today\n            diff = str(diff).split(' days')[0]\n            return diff\n        else:\n            return 0\n    \n     ## URL Page Features\n    def bodyLength(self):\n        if self.pq is not None:\n            return len(self.pq('html').text()) if self.urlIsLive else 0\n        else:\n            return 0\n\n    def numTitles(self):\n        if self.pq is not None:\n            titles = ['h{}'.format(i) for i in range(7)]\n            titles = [self.pq(i).items() for i in titles]\n            return len([item for s in titles for item in s])\n        else:\n            return 0\n\n    def numImages(self):\n        if self.pq is not None:\n            return len([i for i in self.pq('img').items()])\n        else:\n            return 0\n\n    def numLinks(self):\n        if self.pq is not None:\n            return len([i for i in self.pq('a').items()])\n        else:\n            return 0\n\n    def scriptLength(self):\n        if self.pq is not None:\n            return len(self.pq('script').text())\n        else:\n            return 0\n\n    def specialCharacters(self):\n        if self.pq is not None:\n            bodyText = self.pq('html').text()\n            schars = [i for i in bodyText if not i.isdigit() and not i.isalpha()]\n            return len(schars)\n        else:\n            return 0\n\n    def scriptToSpecialCharsRatio(self):\n        v = self.specialCharacters()\n        if self.pq is not None and v!=0:\n            sscr = self.scriptLength()\/v\n        else:\n            sscr = 0\n        return sscr\n\n    def scriptTobodyRatio(self):\n        v = self.bodyLength()\n        if self.pq is not None and v!=0:\n            sbr = self.scriptLength()\/v\n        else:\n            sbr = 0\n        return sbr\n\n    def bodyToSpecialCharRatio(self):\n        v = self.bodyLength()\n        if self.pq is not None and v!=0:\n            bscr = self.specialCharacters()\/v\n        else:\n            bscr = 0\n        return bscr\n\n    def urlIsLive(self):\n        return self.response == 200\n\n    def run(self):\n        data = {}\n        data['entropy'] = self.entropy()\n        data['numDigits'] = self.numDigits()\n        data['urlLength'] = self.urlLength()\n        data['numParams'] = self.numParameters()\n        data['numFragments'] = self.numFragments()\n        data['domainExtn'] = self.domainExtension()\n        data['num_%20'] = self.url.count(\"%20\")\n        data['num_@'] = self.url.count(\"@\")\n        data['has_ip'] = self.ip()\n        data['hasHttp'] = self.hasHttp()\n        data['hasHttps'] = self.hasHttps()\n        data['urlIsLive'] = self.urlIsLive()\n        data['daysSinceReg'] = self.daysSinceRegistration()\n        data['daysSinceExp'] = self.daysSinceExpiration()\n        data['bodyLength'] = self.bodyLength()\n        data['numTitles'] = self.numTitles()\n        data['numImages'] = self.numImages()\n        data['numLinks'] = self.numLinks()\n        data['scriptLength'] = self.scriptLength()\n        data['specialChars'] = self.specialCharacters()\n        data['scriptToSplChrRatio'] = self.scriptToSpecialCharsRatio()\n        data['scriptToBodyRatio'] = self.scriptTobodyRatio()\n        data['bodyToSpecialChrRatio'] = self.bodyToSpecialCharRatio()\n\n    \n        return data","b22cad09":"# Load CSV\ncsv_path = '..\/input\/spam-url-prediction\/url_spam_classification.csv'\n\n# Load into DataFrame\ndf_raw = pd.read_csv(csv_path, header=None, usecols=[0])\ndf_raw.drop([0], inplace=True)","f2a5d9ee":"# Random Sampling\nrnd_state = np.random.randint(1000)\ndf = df_raw.sample(n=100, random_state=rnd_state,ignore_index=True)\ndf.head()","5d0bc207":"# Extract Columns & Create Blank DataFrame (Feature Extraction)\ncols = UrlFeatureExtract(\"\").run().keys()\ndf_feat = pd.DataFrame(columns = cols)\n\n# Extract Features\nt = []\n\ndf_flat = df.to_numpy().flatten()\nfor i in df_flat:\n  temp = UrlFeatureExtract(i).run()\n  t.append(temp)\n\n    \ndf_feat=df_feat.append(t)\ndf_feat = df_feat.join(df[0])","84cdff94":"df_feat.rename(columns={0:'urls'}, inplace=True)\ndf_feat.head()","5009d1d7":"# Feature Engineering\n\nUsing the whois package we can extract features such as Days Since Registration and Expiration. PyQuery can be used to extract features from the webpage itself, which include but not limited to the number of links, number of titles, number of images, etc.\n\n### Feature Groups:\n\n- URL String Characteristics\n  - URL Entropy (entropy of URL)\n  - numDigits (total number of digits in URL string)\n  - URL Length (total number of chars in URL string)\n  - numParameters (total number of query parameters in URL)\n  - numFragments (total number of fragments in URL)\n  - domainExtension (domain extension)\n  - num_%20 (number of '%20' in URL)\n  - num_@ (number of '@' in URL)\n  - has_ip (occurence of IP in URL)\n\n- URL Domain Features\n  - hasHTTP (website domain has http)\n  - hasHTTPS (website domain has https)\n  - urlisLive (page is online)\n  - daysSinceRegistration (number of days from since domain was registetered)\n  - daysSinceExpired (number of days since domain expired)\n- URL Page Features\n  - bodyLength (total chars in URL HTML page)\n  - numTitles (total titles in URL HTML page)\n  - numImages (total images in URL HTML page)\n  - scriptLength (total chars in embedded script in URL HTML page)\n  - specialCharacters (total special chars in URL HTML page)\n  - scriptToSpecialCharacterRatio (ratio of total length of embedded scripts to special chars in URL HTML page)\n  - scriptToBodyRatio (ratio of length of embedded scripts to total chars in URL HTML page)\n","96a04ad2":"## Data Load & Random Sampling\n\n**Note**: A new dataframe is going to be created with random sample of 100 rows to quickly show the feature extraction process.","5799cd57":"Now, this dataframe can be used to train model for spam prediction."}}