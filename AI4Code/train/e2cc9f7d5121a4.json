{"cell_type":{"cb123429":"code","eb493e26":"code","1cd6748f":"code","10c8c80c":"code","381e8d66":"code","bafbf8f2":"code","71543a2f":"code","c384013b":"code","642fd31c":"code","d06c1b6d":"code","dce82f91":"code","df2751fd":"code","dc681f40":"code","4ce66007":"code","4176254f":"code","7fddd25f":"code","9c5b8873":"code","3e0802f8":"code","617271ea":"code","881878cd":"code","98756b83":"code","a51bf128":"code","7cf44b54":"code","753f43c4":"code","faf56208":"code","53549f86":"code","513a19af":"code","861ca2cd":"code","ac0943c6":"code","7e4bcbd0":"code","a2e9812a":"code","d1a1701f":"code","14e9207a":"code","98f346e1":"code","54860ad0":"code","3373761c":"code","1539a8f3":"code","97d0746d":"code","903aaa9e":"code","dcbbd34a":"code","a3f11f10":"code","cc91221f":"code","82d8beea":"code","6b526ad1":"code","cdf5c416":"code","cbac8b4a":"code","2cb7ffbb":"code","bf394605":"code","6909289a":"code","020407ba":"code","10e1b337":"code","0dade1e1":"code","366fdca5":"code","c46d8980":"markdown","b29ef67b":"markdown","427753d3":"markdown","aae0c8af":"markdown","04d0db3b":"markdown","9a8e52fe":"markdown","86d13e2f":"markdown","dbb2a452":"markdown","71c2f312":"markdown","c7239555":"markdown","a1f14d09":"markdown","0cbc1d70":"markdown","15f88a24":"markdown","a37824cf":"markdown","903a92ca":"markdown","98efe009":"markdown","927523d8":"markdown","c6d63db1":"markdown","aaee8def":"markdown","3ef2f4ca":"markdown","ed86982f":"markdown","a620364b":"markdown","7818fc8c":"markdown","2385c091":"markdown","31c4bd77":"markdown","7af53346":"markdown","7bf586eb":"markdown","01a83bb8":"markdown","b05e2bf2":"markdown","ea5d74fa":"markdown","51d0b707":"markdown","26395c58":"markdown","27a19afa":"markdown","e5e842b2":"markdown","431fb488":"markdown","a476f372":"markdown"},"source":{"cb123429":"# student: Bohdan Bilyi\n\n###TARGET\n# In this dataset, price prediction based on some features.\n \n","eb493e26":"import pandas as pd\nimport numpy as np\nimport pylab as py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\n%matplotlib inline\n","1cd6748f":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","10c8c80c":"pwd","381e8d66":"df=pd.read_csv(\"..\/input\/wine-reviews\/winemag-data-130k-v2.csv\")\ndf=df.iloc[:,1:]\ndf.head()","bafbf8f2":"df.info()","71543a2f":"df.describe().T","c384013b":"df1 = df.drop(['description', 'designation',\"province\",  \"region_1\", 'region_2', 'taster_name', 'taster_twitter_handle'], axis=\"columns\")\n\ndf1.head()","642fd31c":"df1.shape","d06c1b6d":"df1.isnull().sum()","dce82f91":"sns.pairplot(df1, height=5)\nsns.set(style=\"ticks\", color_codes=True)\n#help(sns.pairplot)\n","df2751fd":"num_data=pd.DataFrame(df1.dtypes[df1.dtypes!=\"object\"]).index","dc681f40":"count = 0\nfig, ax =plt.subplots(nrows=1,ncols=2, figsize=(15,5))\nsns.boxplot(df1[num_data[0]],ax=ax[0])\nsns.boxplot(df1[num_data[1]],ax=ax[1]);\n","4ce66007":"corr = df1.corr()\nplt.figure(figsize=(10,5))\nsns.heatmap(corr, annot=True);","4176254f":"yearSearch = []    \nfor value in df1['title']:\n    regexresult = re.search(r'19\\d{2}|20\\d{2}', value)\n    if regexresult:\n        yearSearch.append(regexresult.group())\n    else: yearSearch.append(None)\n\ndf1['year'] = yearSearch\n\n#Tell me which ones don't have a year listed\nprint(\"We extracted %d years from the wine titles and %d did not have a year.\" %(len(df1[df1['year'].notna()]), len(df1[df1['year'].isna()].index)))\n\ndf1\n","7fddd25f":"df1['year']=df1.year.fillna(\"Unknown\")\ndf2 = df1.drop(['title'], axis=\"columns\")\n\ndf2.head()","9c5b8873":"df2.year = df2.year.apply(lambda x: x.strip())\nyear_stats = df2.groupby(\"year\")[\"year\"].agg(\"count\").sort_values(ascending=False)\nyear_stats\n","3e0802f8":"len(year_stats[year_stats <=5])","617271ea":"year_stats_less_than_5 = year_stats[year_stats <=5]\nprint(year_stats_less_than_5)","881878cd":"df2.year = df2.year.apply(lambda x :\"other_year\" if x in year_stats_less_than_5 else x)\nlen(df2.year.unique())","98756b83":"df2.isnull().sum()","a51bf128":"df2.country.fillna(df2[\"country\"].mode()[0],inplace=True)","7cf44b54":"df2.country = df2.country.apply(lambda x: x.strip())\n\ncountry_stats = df2.groupby(\"country\")[\"country\"].agg(\"count\").sort_values(ascending=False)\n\nprint(country_stats)\n\nlen(df2.country.unique())","753f43c4":"#n_missing_variety\ndf2 = df2.dropna(subset=[\"variety\"])","faf56208":"#variety_stats\ndf2.variety = df2.variety.apply(lambda x: x.strip())\n\nvariety_stats = df2.groupby(\"variety\")[\"variety\"].agg(\"count\").sort_values(ascending=False)\n\nprint(variety_stats)\n\nlen(df2.variety.unique())","53549f86":"variety_stats_less_than_10 = variety_stats[variety_stats <=10]\nprint(variety_stats_less_than_10)\n","513a19af":"df2.variety = df2.variety.apply(lambda x :\"other_variety\" if x in variety_stats_less_than_10 else x)\nlen(df2.variety.unique())","861ca2cd":"# winery_stats\ndf2.winery = df2.winery.apply(lambda x: x.strip())\n\nwinery_stats = df2.groupby(\"winery\")[\"winery\"].agg(\"count\").sort_values(ascending=False)\n\nprint(winery_stats )\n\nlen(df2.winery.unique())","ac0943c6":"winery_stats_less_than_10 = winery_stats[winery_stats <=10]\nprint(winery_stats_less_than_10)","7e4bcbd0":"df2.winery = df2.winery.apply(lambda x :\"other_winery\" if x in winery_stats_less_than_10 else x)\nlen(df2.winery.unique())","a2e9812a":"df3=df2.copy()","d1a1701f":"n_missing_prices = df3.price.isnull().sum()\nn_missing_prices","14e9207a":"df3.describe()","98f346e1":"from sklearn.impute import KNNImputer\nknn_imputer=KNNImputer()\ndf3.price=knn_imputer.fit_transform(df3[[\"price\"]])","54860ad0":"data_final= df3.copy()\ndata_final.head(10)\n","3373761c":"feature_cols = [\"country\", \"points\", \"variety\",\"winery\", \"year\"]\n\ny = data_final.price # Target variable","1539a8f3":"dummy = data_final[feature_cols] \n\nX_dummy = pd.get_dummies(dummy, prefix=\"\", prefix_sep=\"\", drop_first=True)\n\nX_dummy.head()","97d0746d":"from sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel\n","903aaa9e":"ls = Lasso(alpha=0.01).fit(X_dummy, y)\nmodel = SelectFromModel(ls, prefit=True)","dcbbd34a":"X_lasso =[column for column in X_dummy.columns if column not in X_dummy.columns[model.get_support()]]","a3f11f10":"print(len(X_lasso))","cc91221f":"#for feature in X_lasso:\n    #print(feature)","82d8beea":"X =X_dummy.drop(X_lasso, axis=1)\nX.shape","6b526ad1":"#X.corr()\n#f,ax=plt.subplots(figsize= (20,20))\n#sns.heatmap(X.corr(), annot= True, linewidth= 0.5, fmt= '.3f',ax= ax)\n#sns.heatmap(X.corr(), annot= True, vmin=0.5, linewidth= 0.5, fmt= '.3f',ax= ax) # to depict highly correlated variables\n#plt.show()","cdf5c416":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)","cbac8b4a":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train,y_train)\nval_predictions = lr.predict(X_test)\n\nlr_mae = mean_absolute_error(val_predictions, y_test)\nR_squ = lr.score(X_test,y_test)\n\n\nprint(\"R2 for LinearRegression Model: {:.2f}\".format(R_squ))\nprint(\"Validation MAE for LinearRegression Model: {:.1f}\".format(lr_mae))\n","2cb7ffbb":"from sklearn.ensemble import RandomForestRegressor\n\n# Define the model\nrf_model = RandomForestRegressor(random_state = 1)\n# fit model\nrf_model.fit(X_train, y_train)\nval_predictions = rf_model.predict(X_test)\n# Calculating the mean absolute error of Random Forest model on the validation data\nrf_val_mae = mean_absolute_error(val_predictions, y_test)\n# Calculating the R square\nR_squ = rf_model.score(X_test,y_test)\n\nprint(\"Validation MAE for Random Forest Model: {:.1f}\".format(rf_val_mae))\n","bf394605":"from numpy import median\nmedian(y)","6909289a":"import statsmodels.api as sm\nX_train_Sm= sm.add_constant(X_train)\nls=sm.OLS(y_train,X_train_Sm).fit()\nprint(ls.summary())","020407ba":"data_final.head(3)","10e1b337":"def predict_price(country, variety, year, points):    \n    loc_index = np.where(X_dummy.columns==country)[0][0]\n\n    x = np.zeros(len(X.columns))\n    x[0] = points\n    \n    if loc_index >= 0:\n        x[loc_index] = 1\n    \n    veriety_index = np.where(X.columns==variety)[0][0]\n    if veriety_index >= 0:\n        x[veriety_index] = 1\n    \n    year_index = np.where(X.columns==year)[0][0]\n    if year_index >= 0:\n        x[year_index] = 1\n    \n           \n    return rf_model.predict([x])[0]\n","0dade1e1":"predict_price(\"Italy\",\"Sangiovese\",\"2015\", 78)","366fdca5":"X.columns","c46d8980":"## Replacing missing value of price using the K-Nearest Neighbors Algorithm\n\n### The KNN algorithm assumes that similar things exist in close proximity. \n### In other words, similar things are near to each other.","b29ef67b":"* ### preprocessing the \"winery\" variable","427753d3":"# Data Cleaning: Handle NAn values and Dimensionality Reduction","aae0c8af":"# Summary output","04d0db3b":"# Drop features that are not required to build the model","9a8e52fe":"### applying dimensionality reduction technique to reduce number of years","86d13e2f":"* ### preprocessing the \"variety\" variable","dbb2a452":"## Predicted price of wine ","71c2f312":"# Data Science Regression Project: Predicting Wine Price ","c7239555":"### Removing the features from final date","a1f14d09":"# Selecting features using Lasso regularisation,using SelectFromModel\n#The Lasso is a linear model that estimates sparse coefficients. It is useful in some contexts due to its tendency to prefer solutions with fewer non-zero coefficients, effectively reducing the number of features upon which the given solution is dependent.","0cbc1d70":"### Predicted price = 13.52 if alpha(LassoModel)=0.1 and Predicted price = 21.75 if alpha =0.01, for the same features.","15f88a24":"## RandomForestRegressor","a37824cf":"## Get description of data - statistical summary\n","903a92ca":"## Get summary of data","98efe009":"# Import libraries","927523d8":"#  Correlation\nVariables do not interact strongly with each other. \nThe correlation coefficients = 0.42, correlation is moderate.","c6d63db1":"### Number of features which coefficient was shrank to zero","aaee8def":"# Building the models","3ef2f4ca":"## LinearRegression","ed86982f":"## Correlation between independent variables","a620364b":"# OUTLIER ANALYSIS\nAs we can see below, that there are outliers in the respective columns.\nMoreover the target variable \"price\" is non-normal distributed. ","7818fc8c":"## Conclusion\n### According to the LinearRegression Model: \n- Validation MAE for LinearRegression Model = 15.6 if alpha(LassoModel)=0.1\n  and MAE = 14.9 if alpha =0.01\n\n- R square = 0.19 if alpha = 0.1 And R^2 = 0.28 if alpha = 0.01 \n  \n  (It can be referred that only 28 % of the changeability of the dependent output attribute \n  can be explained by the model while the remaining 72 % of the variability is still unaccounted for)\n  \n### According to the RandomForestRegressor Model: \n- Validation MAE for RandomForestRegressor Model = 13.8 if alpha(LassoModel)=0.1\n   and MAE = 13.6 if alpha =0.01\n   \nR^2 = ESS\/TSS = 1 - RSS\/TSS. This is\u00a0only true in a linear context.\u00a0The equality TSS = RSS + ESS holds true only in linear regression with intercept. Thus we can not use those definitions for random forests interchangeably.","2385c091":"### Looks at the title of the wine and extracts the vintages out of there.\n### Creates a new column for the Vintages\n### Read title and find vintage","31c4bd77":"# Using One Hot Encoding For \"object\" variables","7af53346":"# Load and Check Data","7bf586eb":"## Get number of NaN values","01a83bb8":"# Test the RandomForestRegressor model for few properties","b05e2bf2":"# Preprocessing data","ea5d74fa":"* ### preprocessing the \"country\" variable ","51d0b707":"## Dimensionality Reduction\n### Any \"year\" having less than 5 data points should be tagged as \"other_year\". It will help us with having fewer dummy columns.","26395c58":"# Price missing values","27a19afa":"### Replace Null values with \"Unknown\" for the column \"year\"\n### and dropping the column \"title\"","e5e842b2":"# Model accuracy\n\n### MAE obtained with a model can be verified against a baseline (a frequently used baseline is median value assignment) for examining an accuracy of the model.\n### If the model's MAE is significantly below median of the target variable, it concludes that the model is pretty good.\n\n### Median value of target variable = 28.0 \n","431fb488":"# The processed data","a476f372":"### Identifying the removed features"}}