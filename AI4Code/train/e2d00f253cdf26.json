{"cell_type":{"67aadb73":"code","151fbde2":"code","12990049":"code","7af1c2ae":"code","035a3c6d":"code","656b58d0":"code","4821b62a":"code","a264560d":"code","e50f3aad":"code","d364113c":"code","bb1776bb":"code","de9268ed":"code","4b74d51d":"code","8c2d8291":"code","5e98a0ae":"code","8f8f9b05":"code","98c3266c":"code","9c5826f2":"code","5b7f8ad4":"code","465308de":"code","7ef7f184":"code","50e1b00f":"code","bce44951":"code","d5ab0aa4":"code","ed6f650f":"code","6384cdb3":"code","873c2a1d":"code","766019b3":"code","d6f63598":"code","42157e3f":"code","5ac73220":"code","52305d95":"markdown","376b08d2":"markdown","e7d0806d":"markdown","35524175":"markdown","8b8f9d2e":"markdown"},"source":{"67aadb73":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.ensemble import RandomForestClassifier # a Binary classification Algorithm to predict\nfrom sklearn.metrics import accuracy_score  #to check the accuracy of the model we are creating\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","151fbde2":"#Reading the train data to variable train_x\ntrain_x = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain_x.head()","12990049":"train_x.columns # check the list of columns in the data","7af1c2ae":"train_x.shape #check the size of the data","035a3c6d":"train_x.describe() #check the stat of our dataframe","656b58d0":"train_x.info()  #To check the type of data in each column","4821b62a":"train_x['Age'].fillna(train_x.Age.mean(),inplace=True) # replacing  the null values in 'Age' column with the mean\/median of Age.","a264560d":"train_x[\"Sex\"]=train_x[\"Sex\"].map({\"male\":0,\"female\":1}) #Converting the catagorical (string\/object) features into numerical\n#this code can be used to replace below forloop code to duplicate male and female into 0 & 1","e50f3aad":"#converting all the object values in train.sex into int(o or 1)\ny=1\ncol_name ='Sex'\nlist1=[(train_x[col_name][0])]\ndict1={(train_x[col_name][0]):y}\n\nfor i in (train_x[col_name][0:(len(train_x))]):\n    if i in dict1:        \n        continue\n    else:\n        y=y+1\n        dict1[i] = y;\n             \n#print(dict1) \nfor j in (train_x['Sex'][0:(len(train_x))]):\n    list1.append(j)\n\nfor k in range(0,(len(train_x)),1):\n    train_x.Sex = train_x.Sex.replace((list1[k]),dict1[(list1[k])])\n\n","d364113c":"\"\"\"\nCheck the type of train_x again.\nwe can observe that Age has no null values now\nSex is converted from 'object' to 'int'\n\"\"\"\ntrain_x.info()","bb1776bb":"\"\"\"\nNext step is create the target value(Survived) by the command pop.\nIt will remove the value from current dataframe(train_x) and assign \nit to the new datafram-y\n\"\"\"\ny = train_x.pop(\"Survived\")","de9268ed":"y.head(5) #PS. if we give  y.head() command on the same cell of y=train_x.pop(\"Survived\") it will give error","4b74d51d":"train_x.head()","8c2d8291":"#nv = numberic values in the df\nnv=train_x.select_dtypes(include=['integer','float']).columns  #select the columns with int and float only and assign it to 'nv'\n\nnv","5e98a0ae":"X=train_x[nv] #declare the 'Features ' by assign the columns in 'nv' to a variable X\n","8f8f9b05":"X.head() ","98c3266c":"model=RandomForestClassifier(n_estimators=100) #creating a model \nmodel.fit(X,y) #fitting the model to our 'Feature(X)' and 'Predicted Target(y)'","9c5826f2":"test=pd.read_csv(\"..\/input\/titanic\/test.csv\") #loading the test data to a dataframe 'test'\ntest.head()","5b7f8ad4":"test[nv].head() # List 'nv' is already assigned in train_x data prepreation","465308de":"test.shape ","7ef7f184":"test.info()# check the data type in each column of test data , similar to the way we checked on train_x","50e1b00f":"test[\"Age\"].fillna(test.Age.mean(),inplace=True) #filling all the null values in 'Age' with mean of 'Age'","bce44951":"test[\"Fare\"].fillna(test.Fare.mean(),inplace=True)","d5ab0aa4":"# converting all the object values in sex into int. \ny=1\ncol_name ='Sex'\nlist1=[(test[col_name][0])]\ndict1={(test[col_name][0]):y}\n\nfor i in (test[col_name][0:(len(test))]):\n    if i in dict1:        \n        continue\n    else:\n        y=y+1\n        dict1[i] = y;\n             \n#print(dict1) \n\nfor j in (test['Sex'][0:(len(test))]):\n    list1.append(j)\n\nfor k in range(0,(len(test)),1):\n    test.Sex = test.Sex.replace((list1[k]),dict1[(list1[k])])","ed6f650f":"test.info()","6384cdb3":"x=test[nv] #creating test 'Feature list'\n#note that nv is already assigned during the train_x data manupulation,","873c2a1d":"x.info() #checking the Data type in test Features,x","766019b3":"y_pred=model.predict(x)","d6f63598":"y_pred","42157e3f":"submission=pd.DataFrame({\"PassengerId\" : test['PassengerId'],\"Survived\" :y_pred})\nsubmission.to_csv(\"titanic-pred.csv\",index=False)","5ac73220":"submission.head()","52305d95":"## Test Data Preperation","376b08d2":"Few first signt observations - 'Age' and 'Fare' has few null values. First -we have to convert the null values in Age into int\n\nHere the name, Sex,Ticket, cabin and embarked are objects. Among the above we can catagorise the Sex into two numerical values,(Male=0, Female=1)\n\nThese operations follows below lines\n\nfilling the null values in 'Age' and 'Fare' with the mean of Age","e7d0806d":"Few first signt observations - Age has few null values. First -we have to convert the null values in Age into int\n\nHere the name, Sex,Ticket, cabin and embarked are objects. Among the above we can catagorise the Sex into two numerical values,(Male=0, Female=1)\n\nThese operations follows below lines\n\n","35524175":"This is a note for Ultimate beginers so to get familiarize with the Titanic Problem , so no Plots or EDA , FE techniques used.\n\nTitanic prediction  is a binary classification problem(a person survived or not , only two class of prediction).\nSo we can select any  Classifier algorithms to predict a set of specified labels \u2013 For example -The simplest example is in Titanic problem a person survived or not, (0 or 1)Or an email is spam or not spam(o or 1).\n\nA Regressor is used to predict continious numierical real valued outputs which vary and outputs predicted are not a fixed set. For example  predict the price of properties in a specific region,we have n number of possible outputs.","8b8f9d2e":"This notebook is a reference to understand the basic Titanic_Disaster Issues, not target to achieve high prediction value.\nOnly the numerical columns considered as Feature for easy understanding.\nAvoided Plots."}}