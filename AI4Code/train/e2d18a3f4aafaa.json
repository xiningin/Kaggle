{"cell_type":{"0ff2ebaf":"code","3eaa8320":"code","c9bc0206":"code","96a9745e":"code","59a6b643":"code","b6cb55ce":"code","10bac65f":"code","09d0f533":"code","c96d624d":"code","4019e0fe":"code","5962e1b8":"code","fb698c59":"code","67582e35":"code","67618a9d":"code","56def47c":"code","2694366c":"code","78039b4d":"code","d0e13f25":"code","42ba5b4e":"code","4ae8552d":"code","3268b14b":"code","bdfc393f":"code","bbe6fbc9":"code","3946d6aa":"code","4cd0f99e":"code","893acaea":"code","0905992d":"code","fd661fd3":"code","77223655":"code","83a6b5bb":"code","345c950a":"code","02c9cef9":"code","aa7f886a":"code","2304e451":"code","b7c9abb9":"code","659b50dd":"code","3ba8f7db":"code","e578ae13":"code","143ec2c9":"code","d8399ddc":"code","40c28f43":"code","2ce353bb":"code","d0a113bb":"code","8a22ca08":"code","a8e747de":"code","d0e98dda":"code","a80d74a5":"code","f90ba2db":"code","cffe5e41":"code","0250d6d0":"code","95234e34":"code","b7030f27":"code","4438bfbf":"code","beee2c6d":"code","7097dc62":"code","14fa2803":"code","20242c23":"code","85514426":"code","5e5226dc":"code","114e3206":"code","e8891fe9":"code","896fabd6":"code","bb48e52f":"code","1b608fd0":"code","c799bc29":"code","1e0a049d":"code","0c57cfec":"code","a351d29d":"code","e42ffc23":"code","30c8f40c":"code","86290789":"code","d315e11a":"code","db5ea8da":"code","5a8c94dd":"code","704dd1b0":"code","df30ef25":"code","cdb469af":"code","59aa03f4":"code","7aa1e398":"code","d532744f":"markdown","359074c6":"markdown","0f24f103":"markdown","b4d18946":"markdown","369bc1ac":"markdown","0e375153":"markdown","69475a19":"markdown","d7537a85":"markdown","17f1a57b":"markdown","c20ba6fa":"markdown","7575bebb":"markdown","cb9c9ae0":"markdown","81981dbe":"markdown","977fe3ad":"markdown","4e221ceb":"markdown","57787b6e":"markdown","6227e21d":"markdown","9f5f8f44":"markdown","218fe340":"markdown","191b64ce":"markdown","3c79544a":"markdown","a427c73d":"markdown","555a7570":"markdown","84f16a09":"markdown","b5a73ca0":"markdown","bd2c4450":"markdown","56d8f0a3":"markdown","04ae750e":"markdown","8c471447":"markdown","9eb7e7ba":"markdown","290ed1fd":"markdown","17515994":"markdown","80ca9f5d":"markdown","88382402":"markdown","dfcf187f":"markdown","6525fe06":"markdown","27840d05":"markdown","4ff559d3":"markdown","80f3e937":"markdown","1bbd0736":"markdown"},"source":{"0ff2ebaf":"# linear algebra\nimport numpy as np \n\n# data processing\nimport pandas as pd \n\n# data visualization\nimport seaborn as sns\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\n\n# Algorithms\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.metrics import accuracy_score","3eaa8320":"!ls","c9bc0206":"# getting the data\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')","96a9745e":"train_df.head()","59a6b643":"train_df.info()","b6cb55ce":"train_df.describe()","10bac65f":"# missing values in Age`","09d0f533":"sns.heatmap(train_df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","c96d624d":"missing = train_df.isnull().sum().sort_values(ascending=False)","4019e0fe":"total = train_df.isnull().sum() \/ train_df.isnull().count() * 100\nfinal = round(total,1).sort_values(ascending=False)\nmissing_data = pd.concat([missing, final], axis=1, keys=['Total', '%'],sort=True).head(5)\nmissing_data","5962e1b8":"train_df.columns.values","fb698c59":"sns.set_style('whitegrid')","67582e35":"sns.countplot('Survived',data=train_df,hue='Sex',palette='RdBu_r')","67618a9d":"sns.countplot('Sex',data=train_df)","56def47c":"train_df.groupby(by='Sex',as_index=False)['Survived'].mean()","2694366c":"sns.barplot(x='Pclass',y='Survived',data=train_df)","78039b4d":"sns.countplot(x='Survived',hue='Pclass',data=train_df)","d0e13f25":"train_df.groupby('Pclass',as_index=False)['Survived'].mean().sort_values(by='Survived',ascending=False)","42ba5b4e":"#Comparing the Embarked feature against Survived\nsns.barplot(x='Embarked',y='Survived',data=train_df)\ntrain_df[['Embarked','Survived']].groupby('Embarked',as_index=False).mean().sort_values(by='Survived'\n                                                                                        ,ascending=False)","4ae8552d":"FacetGrid = sns.FacetGrid(train_df, row='Embarked', size=4.5, aspect=1.6)\nFacetGrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette=None,  order=None, hue_order=None )\nFacetGrid.add_legend()","3268b14b":"sns.barplot(x='Parch',y='Survived',data=train_df)","bdfc393f":"sns.barplot(x='SibSp',y='Survived',data=train_df)","bbe6fbc9":"train_df.Age.hist(bins=20)\nplt.xlabel('Age')\nplt.ylabel('Count')","3946d6aa":"sns.lmplot(x='Age',y='Survived',data=train_df,palette='Set1')","4cd0f99e":"sns.lmplot(x='Age',y='Survived',data=train_df,palette='Set1',hue='Sex')","893acaea":"sns.distplot(train_df['Age'].dropna())","0905992d":"#Checking for outliers in Age data\nsns.boxplot(x='Sex',y='Age',data=train_df)\n\n#getting the median age according to Sex\ntrain_df.groupby('Sex',as_index=False)['Age'].median()","fd661fd3":"sns.countplot(x='Sex',data=train_df)","77223655":"sns.countplot(x='Survived',hue='Sex',data=train_df)","83a6b5bb":"train_df.describe(include='O')\n","345c950a":"women = train_df[train_df['Sex']=='female']\nmen = train_df[train_df['Sex']=='male']\nfig,axes = plt.subplots(nrows=1,ncols=2,figsize=(10,4))\nax = sns.distplot(women[women['Survived'] == 1].Age.dropna(),label='Survived',bins=20,ax=axes[0],kde=False)\nax = sns.distplot(women[women['Survived'] == 0].Age.dropna(),label='Not Survived',bins=40,ax=axes[0],kde=False)\nax.set_title('Female')\nax.legend()\nax = sns.distplot(men[men['Survived'] == 1].Age.dropna(),label='Survived',bins=20,ax=axes[1],kde=False)\nax = sns.distplot(men[men['Survived'] == 0].Age.dropna(),label='Not Survived',bins=40,ax=axes[1],kde=False)\nax.set_title('Male')\nax.legend()","02c9cef9":"g = sns.FacetGrid(data=train_df,col='Survived',row='Pclass')\ng.map(plt.hist,'Age',alpha=.5, bins=20)\ng.add_legend()","aa7f886a":"train_df.Embarked.value_counts()","2304e451":"sns.barplot(x='Embarked',y='Survived',data=train_df)","b7c9abb9":"sns.countplot('SibSp',data=train_df)","659b50dd":"train_df['Fare'].hist(bins=40,figsize=(10,4))","3ba8f7db":"import cufflinks as cf","e578ae13":"cf.go_offline()\ntrain_df['Fare'].iplot(kind='hist',bins=40)","143ec2c9":"plt.figure(figsize=(10,4))\nsns.boxplot(x='Pclass',y='Age',data=train_df)","d8399ddc":"train_df.Embarked.describe()","40c28f43":"train_df = train_df.drop(['PassengerId'],axis=1)","2ce353bb":"train_df.columns","d0a113bb":"test_passenger_id = pd.DataFrame(test_df.PassengerId)\ntest_passenger_id.head()","8a22ca08":"test_df=test_df.drop(['PassengerId'],axis=1)","a8e747de":"train_df = train_df.drop(['Cabin'], axis=1)\ntest_df = test_df.drop(['Cabin'], axis=1)","d0e98dda":"train_df.Age.median()","a80d74a5":"train_df.Age.fillna(train_df.Age.median(),inplace=True)","f90ba2db":"train_df.Age.isnull().sum()","cffe5e41":"test_df.Age.fillna(test_df.Age.median(),inplace=True)","0250d6d0":"data = [train_df, test_df] # turning into list and adding 'relatives' column to dataframe\nfor dataset in data:\n    dataset['relatives'] = dataset['SibSp'] + dataset['Parch']\n    dataset[\"IsAlone\"] = np.where(dataset[\"relatives\"] > 0, 0,1)\ntrain_df['IsAlone'].value_counts()    ","95234e34":"#dropping the Name,SibSP and Parch columns\nfor dataset in data:\n    dataset.drop(['SibSp','Parch'],axis=1,inplace=True)","b7030f27":"train_df.info()","4438bfbf":"sns.heatmap(train_df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","beee2c6d":"top_value = 'S'\ndata = [train_df,test_df]\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].fillna(top_value)","7097dc62":"train_df.info()","14fa2803":"### Fare\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['Fare'] = dataset['Fare'].fillna(0)\n    dataset['Fare'] = dataset['Fare'].astype(int)","20242c23":"data = [train_df,test_df]\ntitles = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\nfor dataset in data:\n    # extract titles\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.',expand=False)\n    # replace titles with a more common title or as Rare\n    dataset['Title'] = dataset['Title'].replace(['Lady','Countess','Capt', 'Col','Don', 'Dr','Major', 'Rev', 'Sir',\n                                                 'Jonkheer', 'Dona'], 'Rare')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    # convert titles into numbers\n    dataset['Title'] = dataset['Title'].map(titles)\n    # filling NaN with 0, to get safe\n    dataset['Title'] = dataset['Title'].fillna(0)\ntrain_df = train_df.drop(['Name'], axis=1)\ntest_df = test_df.drop(['Name'], axis=1)","85514426":"sns.barplot(x='Title',y='Survived',data=train_df,)","5e5226dc":"gender = {'male':0,'female':1}\ndata = [train_df, test_df]\nfor dataset in data:\n    dataset['Sex'] = dataset['Sex'].map(gender)","114e3206":"train_df = train_df.drop(['Ticket'], axis=1)\ntest_df = test_df.drop(['Ticket'], axis=1)","e8891fe9":"train_df['Embarked'].value_counts()","896fabd6":"ports = {'S':0,'C':1,'Q':77}\ndata = [train_df, test_df]\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].map(ports)","bb48e52f":"## Converting Age from float to integer\ntrain_df['Age'] = train_df['Age'].astype(int)","1b608fd0":"train_df['AgeGroup'] = pd.qcut(train_df.Age,6,labels=False)\ntest_df['AgeGroup'] = pd.qcut(test_df.Age,6,labels=False)","c799bc29":"train_df['Fare'] = pd.qcut(train_df.Fare,5,labels=False)\ntest_df['Fare'] = pd.qcut(test_df.Fare,5,labels=False)","1e0a049d":"train_df.head(5)","0c57cfec":"#Splitting out training data into X: features and y: target\nX = train_df.drop(\"Survived\", axis=1)\ny = train_df[\"Survived\"]","a351d29d":"#splitting our training data again in train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,random_state=123)","e42ffc23":"logreg = LogisticRegression()\nlogreg.fit(X_train,y_train)\ny_pred = logreg.predict(X_test)\nacc_logreg = round(accuracy_score(y_pred,y_test)*100,2)","30c8f40c":"cv_scores = cross_val_score(logreg,X,y,cv=5)\nnp.mean(cv_scores)*100","86290789":"rf = RandomForestClassifier(n_estimators=100)\nrf.fit(X_train,y_train)","d315e11a":"accu_rf = rf.score(X_train,y_train)\naccu_rf = round(accu_rf*100,2)\naccu_rf","db5ea8da":"# Displaying the important features\nimp_features = pd.DataFrame({'feature':X_train.columns,'importance':np.round(rf.feature_importances_,3)})\nimp_features = imp_features.sort_values('importance',ascending=False).set_index('feature')\nimp_features.head(10)","5a8c94dd":"imp_features.plot.bar()","704dd1b0":"dt = DecisionTreeClassifier()\ndt.fit(X_train,y_train)\naccu_dt = dt.score(X_train,y_train)\naccu_dt = round(accu_dt*100,2)\naccu_dt","df30ef25":"knn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train,y_train)\naccu_knn = knn.score(X_train,y_train)\naccu_knn = round(accu_knn*100,2)\naccu_knn","cdb469af":"nb = GaussianNB()\nnb.fit(X_train,y_train)\naccu_nb = nb.score(X_train,y_train)\naccu_nb = round(accu_nb*100,2)\naccu_nb","59aa03f4":"results = pd.DataFrame({\n    'Model':['Linear Reg.','Random Forest','Decision Trees','K-Nearest Neighbours','Naive Bayes'],\n    'Accuracy':[acc_logreg,accu_rf,accu_dt,accu_knn,accu_nb]\n})\nresults.sort_values(by='Accuracy',ascending=False)","7aa1e398":"y_final = rf.predict(test_df)\nsubmission = pd.DataFrame({\n    'PassengerId': test_passenger_id['PassengerId'],\n    'Survived': y_final\n})\nsubmission.head()\nsubmission.to_csv('titanic_rf.csv', index=False)","d532744f":"### Dropping ticket ","359074c6":"Most of the purchase price are between 0 and 50. It makes sense on the cheaper fares when comparing to the third class passengers","0f24f103":"### Data Pre-processing","b4d18946":"### Embark data","369bc1ac":"### Building Models\n\n#### 1. Logistic Regression","0e375153":"Looks like passengers who had either 1, 2 or 3 had a higher possibility of surviving than the ones had none. However having more than 3 made the possibility even lesser.","69475a19":"Age and Fare columns have continuous data and there might be fluctuations that do not reflect patterns in the data, which might be noise. Categorizing every age into a group. ","d7537a85":"Let's check the heat map again","17f1a57b":"No missing values, we have treated all","c20ba6fa":"`Fare` is a float and we have to deal with 4 categorical features: `Name, Sex, Ticket` and `Embarked`","7575bebb":"#### Age","cb9c9ae0":"## EDA - Visual Data Analysis","81981dbe":"It seems that having a spouse or 1 sibling had a positive effect on Survival as compared to being alone. Though the chances of survival go down with the number of siblings after 1.","977fe3ad":"#### Dropping Cabin:","4e221ceb":"From the above graph , when we seperate by class, the wealthier passengers in the first class and second tend to be more older than the third class. This makes sense, becuase it takes time to save your money and create wealth","57787b6e":"### Sex:","6227e21d":"### 3. Decision Tree","9f5f8f44":"#### 2. Random Forest\n    ","218fe340":"* There are 891 passengers in the training set\n* The survival rate was 38%\n* Most of the passengers belonged to class 3\n* The maximum Fare paid for a ticket was 512 however the fare prices varied a lot as we can see from the standard deviation of 49","191b64ce":"The above graph tells, most of the people were single","3c79544a":"### Embarked:","a427c73d":"Females between `Age` of 15 and 40 had high chances of survival. Also we can notice that females infants\/toddlers also had a higher chance of survival. This may be because females have given preference while embarking. \n\nWhile Males between `Age` of 20 and 35 had higher chances of survival. This is almost same as women","555a7570":"It is obvious to assume that younger individuals were more likely to survive, however we should test our assumption before we proceed.","84f16a09":"Looks like people who did not survive is mostly from the **third** class and people did survive mainly from the higher class","b5a73ca0":"Passenger in `Pclass` 3 have lower chances of survival.Clearly Class had an effect on survival of each passenger with the percentages of survival being 62.96%, 47.28%, 24.23% for Pclass 1, 2 and 3 respectively. Thus, belonging to Pclass = 1 had a huge advantage.","bd2c4450":"### Converting Features:","56d8f0a3":"It seems that the passengers that embarked from port Cherbourg had a higher rate of Survival at 55%. This could be either due to their Sex or socio-economic class.","04ae750e":"We have 687 records missing in `Cabin` category, which is almost 77% of the data. Looks like we can drop those","8c471447":"Age plays has importance in Randomn Forest algorithm. **Is Alone** can be dropped it seems","9eb7e7ba":"#### 4. KNN","290ed1fd":"People who travelled in first class had higher chances of survival ( they were housed in upper decks of the ship ). ","17515994":"The above plot shows the survival chance of women is higher, followed by infants\/kids","80ca9f5d":"The number of males on board were clearly more than the female.","88382402":"Interestingly, age has an opposite effect on the survival in men and women. The chances of survival increase as the age of women increases.\n\nTakeaway: Age feature can have a different effect on the outcome depending on the sex of the passenger. Perhaps we can use this information in feature engineering","dfcf187f":"## Missing data - Cabin","6525fe06":"The Embarked feature has only 2 missing values, which can easily be filled. It will be much more tricky, to deal with the \u2018Age\u2019 feature, which has 177 missing values. The \u2018Cabin\u2019 feature needs further investigation, but it looks like that we might want to drop it from the dataset, since 77 % of it are missing","27840d05":"Embarked seems to be correlated with survival, depending on the gender.\n\nWomen on port Q and on port S have a higher chance of survival. The inverse is true, if they are at port C. Men have a high survival probability if they are on port C, but a low probability if they are on port Q or S","4ff559d3":"#### 5. Gaussian NB","80f3e937":"If we look at the above heat map, every yellow dash is a true point, TRUE equals NULL.We are missing\n\n* Age Info\n* Lot of Cabin info\n\nWe need to fill with some reasonable imputation of values\n","1bbd0736":"### EDA"}}