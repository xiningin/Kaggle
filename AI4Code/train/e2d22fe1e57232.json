{"cell_type":{"a291c209":"code","133961a5":"code","87755ea3":"code","9d5ed9c3":"code","b3d6e61e":"code","098ef68a":"code","78664ff1":"code","2a68ee04":"code","7e704659":"code","0bc9a82c":"code","86baf5b0":"code","991e2e45":"code","2f3144f8":"code","4519d6ef":"code","9d14305e":"code","cb4267f4":"code","93f7c2e2":"code","b9799ca2":"code","3c6b3c95":"code","74c6eb05":"code","8a168788":"markdown","be498e8e":"markdown","408bdf33":"markdown","2bc377f6":"markdown","68192357":"markdown","c6a99a55":"markdown","a1796c03":"markdown","3dedf169":"markdown","ed39d52f":"markdown","04d13b89":"markdown","ba67f006":"markdown","8e0a2522":"markdown","456dbd03":"markdown","ecafa31d":"markdown","7d0a643a":"markdown","5b8f8209":"markdown"},"source":{"a291c209":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport statsmodels.api as sm\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import preprocessing\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","133961a5":"pd.set_option(\"display.max_columns\",None)","87755ea3":"df_train=pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/train.csv\")\ndf_train.head()","9d5ed9c3":"df_sample=pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/sample_submission.csv\")\ndf_sample.head()","b3d6e61e":"df_test=pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/test.csv\")\ndf_test.head()","098ef68a":"print(\"Rows and Columns\",df_train.shape)","78664ff1":"df_train.describe()","2a68ee04":"df_train.info()","7e704659":"print(\"Count of Unique values in target column\",len(df_train[\"target\"].unique()))\nprint(\"Unique values in target column\",df_train[\"target\"].unique())","0bc9a82c":"lb = preprocessing.LabelEncoder()\ndf_train[\"target\"] = lb.fit_transform(df_train[\"target\"])\nprint(df_train[\"target\"].unique())","86baf5b0":"plt.subplot(1,2,1)\nplt.subplots_adjust(left=0,right=2,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"Target\")\nplt.boxplot(df_train[\"target\"])\n\nplt.subplot(1,2,2)\nplt.title(\"Target\")\nplt.hist(df_train[\"target\"])","991e2e45":"tar=df_train[\"target\"].unique()\nplt.subplot(1,2,1)\nplt.subplots_adjust(left=0,right=2,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"Target\")\nlabels=['Class_6','Class_2','Class_8','Class_3','Class_1','Class_5','Class_7','Class_9','Class_4']\nplt.pie(tar,labels=labels)\n\nplt.subplot(1,2,2)\nplt.title(\"Target\")\nsb.distplot(df_train[\"target\"])","2f3144f8":"X_train=df_train[['feature_0', 'feature_1', 'feature_2', 'feature_3', 'feature_4',\n       'feature_5', 'feature_6', 'feature_7', 'feature_8', 'feature_9',\n       'feature_10', 'feature_11', 'feature_12', 'feature_13', 'feature_14',\n       'feature_15', 'feature_16', 'feature_17', 'feature_18', 'feature_19',\n       'feature_20', 'feature_21', 'feature_22', 'feature_23', 'feature_24',\n       'feature_25', 'feature_26', 'feature_27', 'feature_28', 'feature_29',\n       'feature_30', 'feature_31', 'feature_32', 'feature_33', 'feature_34',\n       'feature_35', 'feature_36', 'feature_37', 'feature_38', 'feature_39',\n       'feature_40', 'feature_41', 'feature_42', 'feature_43', 'feature_44',\n       'feature_45', 'feature_46', 'feature_47', 'feature_48', 'feature_49',\n       'feature_50', 'feature_51', 'feature_52', 'feature_53', 'feature_54',\n       'feature_55', 'feature_56', 'feature_57', 'feature_58', 'feature_59',\n       'feature_60', 'feature_61', 'feature_62', 'feature_63', 'feature_64',\n       'feature_65', 'feature_66', 'feature_67', 'feature_68', 'feature_69',\n       'feature_70', 'feature_71', 'feature_72', 'feature_73', 'feature_74',]]\ny_train=df_train['target']\n","4519d6ef":"X_test=df_test[['feature_0', 'feature_1', 'feature_2', 'feature_3', 'feature_4',\n       'feature_5', 'feature_6', 'feature_7', 'feature_8', 'feature_9',\n       'feature_10', 'feature_11', 'feature_12', 'feature_13', 'feature_14',\n       'feature_15', 'feature_16', 'feature_17', 'feature_18', 'feature_19',\n       'feature_20', 'feature_21', 'feature_22', 'feature_23', 'feature_24',\n       'feature_25', 'feature_26', 'feature_27', 'feature_28', 'feature_29',\n       'feature_30', 'feature_31', 'feature_32', 'feature_33', 'feature_34',\n       'feature_35', 'feature_36', 'feature_37', 'feature_38', 'feature_39',\n       'feature_40', 'feature_41', 'feature_42', 'feature_43', 'feature_44',\n       'feature_45', 'feature_46', 'feature_47', 'feature_48', 'feature_49',\n       'feature_50', 'feature_51', 'feature_52', 'feature_53', 'feature_54',\n       'feature_55', 'feature_56', 'feature_57', 'feature_58', 'feature_59',\n       'feature_60', 'feature_61', 'feature_62', 'feature_63', 'feature_64',\n       'feature_65', 'feature_66', 'feature_67', 'feature_68', 'feature_69',\n       'feature_70', 'feature_71', 'feature_72', 'feature_73', 'feature_74']]","9d14305e":"scaler=StandardScaler()\nX_train=scaler.fit_transform(X_train)\nX_test=scaler.fit_transform(X_test)","cb4267f4":"model_ex=ExtraTreesClassifier().fit(X_train,y_train)\ntarget_test=model_ex.predict_proba(X_test)","93f7c2e2":"target_test","b9799ca2":"target_test=pd.DataFrame(target_test,columns=['Class_1','Class_2','Class_3','Class_4','Class_5','Class_6','Class_7','Class_8','Class_9'])\ntarget_test['id']=df_sample['id']\nid= target_test.pop('id')\ntarget_test.insert(0,'id',id)","3c6b3c95":"target_test.head()","74c6eb05":"target_test.to_csv(\"Submission_f.csv\",index=False)\ntarget_test.head()","8a168788":"## Test Data","be498e8e":"## Applying StandardScaler","408bdf33":"## Info about traning data\n- No null values present","2bc377f6":"## Looking for unique values in Target column","68192357":"- **Pie chart**\n- **Density plot**","c6a99a55":"## Applying Extra Trees Classifier","a1796c03":"## Reading Sample data","3dedf169":"## Visulization\n- **Boxplot**\n- **Histogram**","ed39d52f":"## Reading Test","04d13b89":"## Reading Traning Data","ba67f006":"## Traning data","8e0a2522":"## Statistical values of Traning data","456dbd03":"## Shape of the traning Data","ecafa31d":"## Label Encoder\n- Replacing ['Class_6' 'Class_2' 'Class_8' 'Class_3' 'Class_1' 'Class_5' 'Class_7'\n 'Class_9' 'Class_4' ] to [5 1 7 2 0 4 6 8 3].","7d0a643a":"### Prediction Data","5b8f8209":"### Submission CSV"}}