{"cell_type":{"bb8e17e5":"code","4395a4fa":"code","87803a4d":"code","53bc1e61":"code","23297e53":"code","08555136":"code","f34652a8":"code","ded2e324":"code","84df946e":"code","05d21499":"code","869246e0":"code","dec242f6":"code","fc3e9c29":"code","cb0e2ab8":"code","1430bb90":"code","e5a6630b":"code","a371242c":"code","4dd01d20":"code","29bed529":"code","8185203d":"code","591c3348":"code","78bda67d":"markdown","1ed1dac0":"markdown","da650d5f":"markdown","395ddd34":"markdown","01244fae":"markdown","f3d18930":"markdown","6a9975fa":"markdown","1795cef1":"markdown","694abbea":"markdown","585299dd":"markdown","589e0793":"markdown","cd6b9965":"markdown","49b29f15":"markdown","80edd793":"markdown","f6354649":"markdown","704463da":"markdown"},"source":{"bb8e17e5":"import pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\nimport seaborn as sns\nfrom sklearn import preprocessing","4395a4fa":"terror = pd.read_csv(\"..\/input\/gtd\/globalterrorismdb_0718dist.csv\",encoding='ISO-8859-1')\nterror.rename(columns={'iyear':'Year','imonth':'Month','iday':'Day','country':'Country_Code','country_txt':'Country_Name','region':'Region_Code','region_txt':'Region_Name','city':'City','attacktype1':'AttackType_Code','attacktype1_txt':'AttackType_Name','targtype1':'Targtype_Code','targtype1_txt':'Targtype_Name','gname':'Group_Name','weaptype1':'Weaptype1_Code','weaptype1_txt':'Weaptype1_Name','nkill':'Killed','nwound':'Wounded'},inplace=True)\n\nterror=terror[['Year','Month','Day','Country_Code','Country_Name','Region_Code','Region_Name','City','AttackType_Code','AttackType_Name','Targtype_Code','Targtype_Name','Group_Name','Weaptype1_Code','Weaptype1_Name','Killed','Wounded']]\n\nterror.head(10)","87803a4d":"terror.describe()","53bc1e61":"def replace(i,key):\n    search = terror['Country_Code'][i]\n    country = terror[terror.Country_Code == search]\n    if country[key].count() == 1:\n        return terror['Country_Name'][i]\n\n    temp = dict(country.groupby([key]).size())\n    del temp['Unknown']\n    maxtemp = max(zip(temp.values(), temp.keys()))[1]        \n    return maxtemp\n    \ncreate = ['City','AttackType_Name','Targtype_Name']\n\nfor j in create:\n    for i in range(len(terror[j])):\n        if terror[j][i] == 'Unknown':\n            terror[j][i] = replace(i,j)\n            \n","23297e53":"def replace1(i,key):\n    search = terror['Region_Code'][i]\n    country = terror[terror.Region_Code == search]\n\n    temp = dict(country.groupby([key]).size())\n    del temp['Unknown']\n    maxtemp = max(zip(temp.values(), temp.keys()))[1]        \n    return maxtemp\n\ncreate = ['Group_Name','Weaptype1_Name']\nfor j in create:\n    for i in range(len(terror[j])):\n        if terror[j][i] == 'Unknown':\n            terror[j][i] = replace1(i,j)","08555136":"plt.subplots(figsize=(15,6))\nsns.countplot('Year',data=terror,palette='RdYlGn_r',edgecolor=sns.color_palette('dark',7))\nplt.xticks(rotation=90)\nplt.title('Number Of Terrorist Activities Each Year')\nplt.show()","f34652a8":"plt.subplots(figsize=(15,6))\nsns.countplot('AttackType_Name',data=terror,palette='inferno',order=terror['AttackType_Name'].value_counts().index)\nplt.xticks(rotation=90)\nplt.title('Attacking Methods by Terrorists')\nplt.show()","ded2e324":"plt.subplots(figsize=(15,6))\nsns.countplot(terror['Targtype_Name'],palette='inferno',order=terror['Targtype_Name'].value_counts().index)\nplt.xticks(rotation=90)\nplt.title('Main Targets')\nplt.show()","84df946e":"terror_region=pd.crosstab(terror.Year,terror.Region_Name)\nterror_region.plot(color=sns.color_palette('Set2',12))\nfig=plt.gcf()\nfig.set_size_inches(18,6)\nplt.show()","05d21499":"pd.crosstab(terror.Region_Name,terror.AttackType_Name).plot.barh(stacked=True,width=1,color=sns.color_palette('RdYlGn',9))\nfig=plt.gcf()\nfig.set_size_inches(12,8)\nplt.show()","869246e0":"coun_terror=terror['Country_Name'].value_counts()[:15].to_frame()\ncoun_terror.columns=['Attacks']\ncoun_kill=terror.groupby('Country_Name')['Killed'].sum().to_frame()\ncoun_terror.merge(coun_kill,left_index=True,right_index=True,how='left').plot.bar(width=0.9)\nfig=plt.gcf()\nfig.set_size_inches(18,6)\nplt.show()","dec242f6":"top_groups10=terror[terror['Group_Name'].isin(terror['Group_Name'].value_counts()[1:11].index)]\npd.crosstab(top_groups10.Year,top_groups10.Group_Name).plot(color=sns.color_palette('Paired',10))\nfig=plt.gcf()\nfig.set_size_inches(18,6)\nplt.show()","fc3e9c29":"#country = input(\"Enter Country Name: \")\n#country = country.capitalize()\n\ncountry = 'Mexico'\nmonths = dict(terror[terror.Country_Name == country].groupby(['Month']).size())\nmonths = dict(sorted(months.items(), key = lambda kv:(kv[1], kv[0]), reverse=True))\ntot = sum(list(months.values()))\nprint(\"Entered Country: \",country)\nfor i in months:\n    print(i,' {:.2f} %'.format((months[i]\/tot)*100))","cb0e2ab8":"label_encoder = preprocessing.LabelEncoder()\n\nterror['Group_Name']= label_encoder.fit_transform(terror['Group_Name'])\nterror['Wounded']= label_encoder.fit_transform(terror['Wounded'])\nterror['Killed']= label_encoder.fit_transform(terror['Killed'])","1430bb90":"def call_knn(X,y):\n    \n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 41)\n    ss = StandardScaler()\n    X_train = ss.fit_transform(X_train)\n    X_test = ss.transform(X_test)\n    graph = {}\n    for i in range(1,31):\n    \n        classifier = KNeighborsClassifier(n_neighbors = i)\n        classifier.fit(X_train, y_train)\n        y_pred = classifier.predict(X_test)\n        ac = accuracy_score(y_test,y_pred)\n        graph[i] = ac*100\n    \n    plt.plot(list(graph.keys()), list(graph.values()),color='blue', marker='o')\n    plt.title('Key Value Graph')\n    plt.xlabel('Key Values')\n    plt.ylabel('Accuracy (%)')\n    plt.show()\n\n    max_key = max(graph, key=graph.get)\n    print(\"We got Maximum Accuracy of\",graph[max_key],'% at k = ',max_key)","e5a6630b":"def call_random(X,y,e):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 41)\n\n\n    ss = StandardScaler()\n\n    X_train = ss.fit_transform(X_train)\n    X_test = ss.transform(X_test)\n    \n    classifier= RandomForestClassifier(n_estimators= e)  \n    classifier.fit(X_train, y_train)  \n    y_pred = classifier.predict(X_test)\n    ac = accuracy_score(y_test,y_pred)\n    print(\"We got Accuracy of\",ac*100,'%')\n    ","a371242c":"X = terror.iloc[:,[3,8,10]].values\ny = terror.iloc[:, 13].values\n\ncall_knn(X,y)","4dd01d20":"X = terror.iloc[:,[0,3,8,10,12,13]].values\ny = terror.iloc[:, 15].values\n\ncall_knn(X,y)","29bed529":"X = terror.iloc[:,[0,3,8,10,13]].values\ny = terror.iloc[:, 12].values\n\ncall_random(X,y,10)","8185203d":"X = terror.iloc[:,[0,3,8,10,12,13]].values\ny = terror.iloc[:, 16].values\n\ncall_knn(X,y)","591c3348":"X = terror.iloc[:,[0,3,10,12,13]].values\ny = terror.iloc[:, 8].values\n\ncall_random(X,y,20)","78bda67d":"Implemented KNN Algorithm with graph of accuracy vs k value from 1 to 30","1ed1dac0":"will predict the weopen type will be used in attack based on specific input data.","da650d5f":"Used to convert classes into numeric form","395ddd34":"# **Importing Necessary Libraries**","01244fae":"will predict the attack type terrorist will used based on specific input data.","f3d18930":"The above code will replace unknown Cities, Attack Types and Target Types to the most frequent Cities, Attack Types and Target Types in that specific Country.","6a9975fa":"# **Importing Dataset**","1795cef1":"Implemented Random Forest Algorithm with given estimators","694abbea":"The above code will replace unknown Group Names and Weapon Types to the most frequent Group Names and Weapon Types in that specific Region.","585299dd":"will predict the organisation behind the attack based on specific input data.","589e0793":"# **Data Preprocessing**","cd6b9965":"Will predict loss of life based on input data.","49b29f15":"It will print terrorism risk in percentage for every months for specific input country.","80edd793":"# **Objectives**","f6354649":"will predict number of wounded peoples based on input data.","704463da":"# **Data visualization**"}}