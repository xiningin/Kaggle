{"cell_type":{"47e583b6":"code","447abec4":"code","a1958431":"code","9350bbdd":"code","8da208cf":"code","fc302dc2":"code","cf69c1c6":"code","e37c1488":"code","dc8835b1":"code","db39d2b0":"code","f740f5b8":"code","570a6236":"code","d5dd2fc7":"code","2e0169f3":"code","113a4629":"code","4b94a35d":"code","1b0ad916":"code","cb6ec00e":"code","981d32e2":"code","f6e7a5d2":"code","9dcbdc19":"code","ed8ab60b":"code","21ad811b":"code","a626d348":"code","ea26e6c9":"code","9affce2d":"code","36c25513":"code","b33ab816":"code","7eae9d95":"code","b5b16f83":"code","1a82e64a":"code","58c11d65":"code","0023398b":"code","bccf61d9":"code","262ee977":"code","888b2fe8":"code","0999ec11":"code","f36896df":"code","b4b9e7a4":"code","2f008872":"code","c1b78eb1":"code","bb4622cb":"code","d1c7ee70":"code","3e125633":"code","59da6578":"code","49517acf":"code","2ffb2ba8":"code","ef791217":"code","1bc2b270":"code","8f035082":"code","b42f84af":"code","9eaa4922":"code","ede161d9":"code","65f4a78a":"code","4ee18736":"code","85edf2d5":"code","2ebc550d":"code","a61f245a":"code","b0cc5ce2":"code","bdbe20f6":"code","80d83863":"code","93f2c344":"code","cf54d8e5":"code","52be94e2":"markdown","9630aff8":"markdown","343e84a5":"markdown","75bbaae1":"markdown","9f7f549e":"markdown","cc2e4750":"markdown","25d82c1e":"markdown","d274bb5e":"markdown","ff9660ab":"markdown","64e5decd":"markdown","dd670e85":"markdown","a0898c18":"markdown","4ce0f075":"markdown"},"source":{"47e583b6":"import datetime\nimport pylab \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport seaborn as sns","447abec4":"currency_close = pd.read_csv('..\/input\/currency_close.csv', index_col = \"Date\")","a1958431":"currency_close.head()","9350bbdd":"currency_close.info()","8da208cf":"currency_close.columns","fc302dc2":"currency_close = currency_close.rename(columns={'AUDUSD=X' : \"AUD\", 'CADUSD=X' : \"CAD\", 'EUR=X' : \"EUR\",\n                                                'GBPUSD=X' : \"GBP\", 'JPY=X' : \"JPY\",'NZDUSD=X' : \"NZD\",\n                                                'RUB=X' : \"RUB\", 'USDCHF=X' : \"CHF\"})","cf69c1c6":"(currency_close\/currency_close.iloc[0]*100).plot(figsize=(15, 10))","e37c1488":"currency_close['2016-01-04':].head()","dc8835b1":"currency_close.loc['2016-01-06', :]=None\ncurrency_close = currency_close.dropna()","db39d2b0":"(currency_close\/currency_close.iloc[0]*100).plot(figsize=(15, 10))","f740f5b8":"cur_returns = np.log(currency_close \/ currency_close.shift(1))","570a6236":"cur_returns.head()","d5dd2fc7":"cur_returns['RUB_S'] = cur_returns['RUB'].shift(-1)\ncur_returns = cur_returns.dropna()\ncur_returns.head()","2e0169f3":"cur_returns = cur_returns.drop('RUB', axis=1)\ncur_returns.head()\ncur_returns.head()","113a4629":"cur_returns.describe()","4b94a35d":"cur_returns.hist(color='k', alpha=0.5, bins=50, figsize = (20,10))\nplt.show()","1b0ad916":"cols = cur_returns.columns\nsns_plot = sns.pairplot(cur_returns[cols])\n#sns_plot.savefig('pairplot.png')","cb6ec00e":"cur_returns_rus = np.log(currency_close \/ currency_close.shift(1))\n\ncorr_matrix = cur_returns_rus.corr()\nsns.heatmap(corr_matrix)","981d32e2":"corr_matrix","f6e7a5d2":"res = stats.probplot(cur_returns.AUD, plot=plt)","9dcbdc19":"res = stats.probplot(cur_returns.CAD, plot=plt)","ed8ab60b":"res = stats.probplot(cur_returns.EUR, plot=plt)","21ad811b":"res = stats.probplot(cur_returns.GBP, plot=plt)","a626d348":"res = stats.probplot(cur_returns.JPY, plot=plt)","ea26e6c9":"res = stats.probplot(cur_returns.NZD, plot=plt)","9affce2d":"res = stats.probplot(cur_returns.CHF, plot=plt)","36c25513":"res = stats.probplot(cur_returns.RUB_S, plot=plt)","b33ab816":"for cur in cur_returns.columns:\n    print(stats.shapiro(cur_returns[cur]))","7eae9d95":"from sklearn.model_selection import train_test_split","b5b16f83":"X = cur_returns.iloc[:, :-1]\ny = cur_returns.iloc[:, -1:]","1a82e64a":"fig, ax = plt.subplots(figsize=(15, 5))\nsns.distplot(y, bins=100, kde=False, color='darkviolet', hist_kws=dict(edgecolor=\"k\", linewidth=2))\nplt.title(\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0446\u0435\u043d\u044b \u0432 \u0434\u0435\u043d\u044c \u0443 \u0440\u0443\u0431\u043b\u044f\")\nplt.xlabel(\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435\")\nplt.ylabel(\"\u0427\u0430\u0441\u0442\u043e\u0442\u0430\")\nplt.show()","58c11d65":"from sklearn.linear_model import LinearRegression, Lasso, LassoCV, \\\n                                Ridge, RidgeCV\nfrom sklearn.metrics import mean_squared_error","0023398b":"X_df, y = cur_returns.drop('RUB_S', axis=1), cur_returns['RUB_S']","bccf61d9":"def rmse(y, p):\n    return np.sqrt(mean_squared_error(y, p))","262ee977":"def beatiful_coef(coefs, feature_names=X_df.columns):\n    return pd.DataFrame(coefs, index=feature_names,\n                       columns=['coef']).sort_values('coef',\n                                                  ascending=False)","888b2fe8":"train_share = 0.7\n\ntrain_part_len = int(train_share * cur_returns.shape[0])\n\nX_train  = X_df.values[:train_part_len, :]\nX_valid = X_df.values[train_part_len:, :]\ny_train  = y.values[:train_part_len]\ny_valid = y.values[train_part_len:]","0999ec11":"ols = LinearRegression(normalize=True)","f36896df":"ols.fit(X_train, y_train)","b4b9e7a4":"y_ols_pred = ols.predict(X_valid)","2f008872":"rmse(y_valid, y_ols_pred)","c1b78eb1":"beatiful_coef(ols.coef_)","bb4622cb":"ridge = Ridge(random_state=17, normalize=True)","d1c7ee70":"ridge.fit(X_train, y_train)","3e125633":"beatiful_coef(ridge.coef_)","59da6578":"ridge_valid_pred = ridge.predict(X_valid)","49517acf":"rmse(y_valid, ridge_valid_pred)","2ffb2ba8":"alphas = np.logspace(-4, 4, 100)","ef791217":"ridge_cv = RidgeCV(alphas=alphas,\n                   cv=5, normalize=True).fit(X_train, y_train)","1bc2b270":"ridge_cv.alpha_","8f035082":"best_ridge_valid_pred = ridge_cv.predict(X_valid)","b42f84af":"rmse(y_valid, best_ridge_valid_pred)","9eaa4922":"lasso = LassoCV(alphas=alphas, cv=5, normalize=True).fit(X_train, y_train)","ede161d9":"lasso.alpha_","65f4a78a":"best_lasso_valid_pred = lasso.predict(X_valid)","4ee18736":"rmse(y_valid, best_lasso_valid_pred)","85edf2d5":"beatiful_coef(lasso.coef_)","2ebc550d":"from sklearn.ensemble import RandomForestRegressor","a61f245a":"beatiful_coef(ridge_cv.coef_)","b0cc5ce2":"forest = RandomForestRegressor(n_estimators=100, random_state=17)","bdbe20f6":"forest.fit(X_train, y_train)","80d83863":"forest_valid_pred = forest.predict(X_valid)","93f2c344":"rmse(y_valid, forest_valid_pred)","cf54d8e5":"beatiful_coef(forest.feature_importances_)","52be94e2":"**Visual analysis shows that RUB had a significant attack. Need to his find and to remove**","9630aff8":"# LinearRegression","343e84a5":"**Very simple kernels about Forex and RUB. If you like it, give me a votes, please**","75bbaae1":"### 1. Load data","9f7f549e":"### Data preparation","cc2e4750":"**I'll look further at the correlation. First, let's look at everything, including the ruble. Then on the shifted ruble. This will be seen at the expense of hitman**","25d82c1e":"\u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0432\u044b\u043f\u0430\u0434 \u0441\u043b\u0443\u0447\u0438\u043b\u0441\u044f 6 \u044f\u043d\u0432\u0430\u0440\u044f 2016 \u0433\u043e\u0434\u0430. \u041f\u043e\u043f\u044b\u0442\u0430\u044e\u0441\u044c \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043e\u043f\u044f\u0442\u044c \u0437\u0430 \u0441\u0447\u0435\u0442 \u0433\u0440\u0430\u0444\u0438\u043a\u0430","d274bb5e":"### Primary analysis","ff9660ab":"# Training and test samples","64e5decd":"# RandomForestRegressor","dd670e85":"**Using Regression and RandomForestRegressor features in the above models turned out to by highly ineffective.**","a0898c18":"**Got what I was waiting for from qq-plot. None of the distribution is not even close to normal. You can't tell that from the charts, though.**","4ce0f075":"**rename the columns**"}}