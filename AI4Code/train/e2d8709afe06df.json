{"cell_type":{"e6e14ee1":"code","47859695":"code","33e2ae1f":"code","13e85509":"code","af613d03":"code","25a7bcbf":"code","04b2bb6c":"code","364f44b9":"code","0df3f72e":"code","78b3ad3e":"code","19900217":"code","7591b37c":"code","3cc313bc":"code","99e38b90":"code","9a273e58":"markdown"},"source":{"e6e14ee1":"#Boston House Prediction , using LinearRegression\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport numpy as np \nimport sklearn\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.datasets import load_boston\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n\n#https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.datasets.load_boston.html#sklearn.datasets.load_boston -->link from sk learn dataset ","47859695":"boston=load_boston()\nprint(boston)","33e2ae1f":"boston.keys()","13e85509":"print(boston.data.shape)","af613d03":"bos=pd.DataFrame(boston.data)\nprint(bos.head(2))","25a7bcbf":"print(boston.feature_names)\nbos.columns=boston.feature_names","04b2bb6c":"#CRIM -per capita crime rate by town\n#ZN- proportion of residential land zoned for lots over 25,000 sq.ft.\n#INDUS -proportion of non-retail business acres per town\n#CHAS -Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\n#NOX -nitric oxides concentration (parts per 10 million)\n#RM -average number of rooms per dwelling\n#AGE- proportion of owner-occupied units built prior to 1940\n#DIS -weighted distances to five Boston employment centres\n#RAD -index of accessibility to radial highways\n#TAX- full-value property-tax rate per 10,000usd\n#PTRATIO -pupil-teacher ratio by town\n#B -1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\n#LSTAT -% lower status of the population","364f44b9":"bos['PRICE']=boston.target\nprint(bos.shape) #Because linear regression work on basis of line equation (Y=mX+c), so we must have X and Y. ","0df3f72e":"Y=bos['PRICE']\nX=bos.drop('PRICE',axis=1)\nprint(X.head())\nprint(Y.head())","78b3ad3e":"X_train,X_test,Y_train,Y_test=sklearn.model_selection.train_test_split(X,Y,test_size=0.3,random_state=5)","19900217":"#Use of linear regression( Train the Machine ) \/ Creating Model\nlm=LinearRegression()\nlm.fit(X_train,Y_train)\nY_train_pred=lm.predict(X_train)\nY_test_pred=lm.predict(X_test)","7591b37c":"#Evaluation of model \ndf=pd.DataFrame(Y_test_pred,Y_test)\nprint(df.head())","3cc313bc":"#Mean Square error evaluation\nmse=mean_squared_error(Y_test,Y_test_pred) #means squred evalution\nprint(mse)","99e38b90":"#Visualization of True price and Predicted price \n\nplt.scatter(Y_train,Y_train_pred,color='y',marker='o',label='Training Data')\nplt.scatter(Y_test,Y_test_pred,color='g',marker='+',label='Test Data')\nplt.xlabel('true values')\nplt.ylabel('predicted values')\nplt.legend(loc='upper left')\nplt.plot()\nplt.show()\n","9a273e58":"Note:- Here \"test_size\" represent how much data you want for testing, rest is used for training (training data){ here that means i want to use 30 % data to train the machine }\n\n\"Random_State= any number\"-Random_state is basically used for  reproducing same set of train  and test data points ,every time when you  make a split.If you do not use random_state in train_test_split every time you make the split you might  get different set of train and test data point. This will not help you debugging your model.\n\nUse of linear regression( Train the Machine ) \/ Creating Model"}}