{"cell_type":{"645cbd67":"code","61675b66":"code","2e234d3b":"code","f1c0341c":"code","a3aadabb":"code","5ea3891e":"code","b59ca0b7":"code","8dc07769":"code","4e1eec11":"code","95ee0674":"code","f34f9489":"code","3855fe79":"code","c2856d40":"code","0a9e2c5c":"code","46e561b6":"code","ca6d5cbb":"code","abb91bdf":"code","ed1d7c48":"code","f33181df":"code","8d9c0264":"code","e92486f3":"code","16fdd197":"code","4a17c58c":"code","eef98a7d":"code","d47e2cab":"code","91249c29":"code","9b1729f3":"code","e1802c8c":"code","0af739cf":"markdown","97808d0c":"markdown"},"source":{"645cbd67":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","61675b66":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","2e234d3b":"train.head()","f1c0341c":"test.head()","a3aadabb":"train_y=train['Survived'].values","5ea3891e":"#visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","b59ca0b7":"#columns to be removed as they do no affect the performance and are assumed to be random\n#passengerID,Ticket,Cabin(As it has many null values)\n#cleaning the data\ntrain_x = train.copy()\ntrain_x=train_x.drop(columns=['Survived'])\ndata_clean = [train_x,test]\nprint(train.info())\ntrain.sample(10)#pick 10 random samples","8dc07769":"#DATA cleaning\nprint(train_x.isnull().sum())\nprint('\/'*12)\nprint(test.isnull().sum())","4e1eec11":"train_x.describe(include=\"all\")","95ee0674":"#Age has many missing values both in the test and train set \nfor dataset in data_clean:\n    #fix the value in that place\n    dataset[\"Age\"].fillna(dataset[\"Age\"].median(),inplace=True)\n    #we will add mode to the embarked \n    dataset['Embarked'].fillna(dataset['Embarked'].mode()[0], inplace = True)\n    #we will do similar with fare\n    dataset['Fare'].fillna(dataset['Fare'].median(), inplace = True)\n\n#train_x.reset_index(drop=True)\n#we have to reset our index as passengerid is the index\nto_drop = ['PassengerId','Cabin', 'Ticket']\ntrain_x.drop(to_drop, axis=1, inplace = True)\n#inplace helps do this change in the original copy \n#by default it is false\n","f34f9489":"print(train_x.isnull().sum())\nprint('-'*10)\nprint(test.isnull().sum())","3855fe79":"train_x.head()","c2856d40":"for dataset in data_clean:\n    dataset['FamilySize']=dataset['SibSp']+dataset['Parch']+1\n    dataset['IsAlone']=1\n    #dataset['FareBin'] = pd.qcut(dataset['Fare'], 4,duplicates=\"drop\")\n    #dataset['AgeBin'] = pd.qcut(dataset['Age'].astype(int),5,duplicates=\"drop\")","0a9e2c5c":"train_x.head()","46e561b6":"train_x = train_x.drop(columns=['Name'])","ca6d5cbb":"train_x.head()","abb91bdf":"#encoding the some other info\ndef gencov(a):\n    if(a=='male'):\n        return 1\n    else:\n        return 0\ndef embcov(a):\n    if(a=='C'):\n        return 1\n    elif(a=='S'):\n        return 2\n    else:\n        return 3\n\n    \n\"\"\"\nfor dataset in data_clean:\n    dataset['Sex'] = dataset['Sex'].apply(lambda x:1 if x==\"male\" else 0)\n    dataset['Embarked'] = dataset['Embarked'].apply(lambda x:1 if x==\"C\" else(2 if x==\"S\" else 0))\n\"\"\" ","ed1d7c48":"pid = test['PassengerId'].values\ntest=test.drop(columns=['Name','Ticket','Cabin','PassengerId'])\ntest.head()","f33181df":"#applying the encoding\ntest.info()","8d9c0264":"train_x['Sex'] = train_x['Sex'].map(gencov)\ntrain_x['Embarked'] = train_x['Embarked'].map(embcov)","e92486f3":"test['Sex'] = test['Sex'].map(gencov)\ntest['Embarked'] = test['Embarked'].map(embcov)","16fdd197":"train_x.head()","4a17c58c":"test.head()","eef98a7d":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import svm","d47e2cab":"lr = LogisticRegression()\nlr.fit(train_x,train_y)\nclf = svm.SVC(kernel='rbf', C=1)\nclf.fit(train_x,train_y)\nscores = cross_val_score(lr, train_x, train_y, cv=5)\nscores2 = cross_val_score(clf,train_x,train_y,cv=5)","91249c29":"print(scores)\nprint(scores2)","9b1729f3":"\"\"\"\nclf = svm.SVC(kernel='poly', C=1)\nscores = cross_val_score(clf, train_x, train_y, cv=5)\nprint(scores)\n\"\"\"","e1802c8c":"test_Y =lr.predict(test)\ntest = pd.DataFrame( { 'PassengerId': pid , 'Survived': test_Y } )\ntest.shape\ntest.head()\ntest.to_csv( 'titanic_pred.csv' , index = False )","0af739cf":"Doing the feature engg and data prediction","97808d0c":"Doing prediction by modeling "}}