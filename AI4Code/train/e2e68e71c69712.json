{"cell_type":{"38616f1d":"code","ce2114bf":"code","deba42b9":"code","8d3e17d4":"code","70aace18":"code","f3d10772":"code","fab54221":"markdown","cd78ee5e":"markdown","9ad65d69":"markdown","d7680116":"markdown"},"source":{"38616f1d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom keras.models import Model, load_model\nfrom keras.layers import Conv2D, Input, Dense, Flatten\nfrom keras.optimizers import SGD\nfrom keras.wrappers.scikit_learn import KerasClassifier\n\ndef warn(*args, **kwargs): pass ; import warnings; warnings.warn = warn\nfrom sklearn.model_selection import cross_val_score, train_test_split, GridSearchCV, StratifiedKFold\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\n\n# Any results you write to the current directory are saved as output.","ce2114bf":"data = pd.read_csv(\"..\/input\/train.csv\")\n\n## Transform problem to binary classificaton [<=5 et >5]\ndata['label'] = data['label'].apply(lambda x: 0 if x<=5 else 1)\n    \nX = data.drop('label', axis = 1).values\ny = data['label']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Every image is stored as a row in the dataframe\ntrain_images = X_train.reshape((-1, 28, 28, 1))\ntest_images = X_test.reshape((-1, 28, 28, 1))\n\n# Showing the 10th image in the training data\nplt.imshow(train_images[10,:,:,0]);","deba42b9":"def build_model(NbFilters = 16):\n    inputLayer = Input((28,28,1), name=\"InputLayer\")\n    conv1 = Conv2D(filters=NbFilters, kernel_size=(3,3),\n                   strides=(1,1), padding=\"valid\", name=\"ConvolutionalLayer1\")(inputLayer)\n    conv2 = Conv2D(filters=2*NbFilters, kernel_size=(3,3),\n                   strides=(1,1), name=\"ConvolutionalLayer2\")(conv1)\n    conv2 = Flatten()(conv2)\n    output = Dense(1, activation='sigmoid', name=\"OutputLayer\")(conv2)\n    \n    model = Model(inputLayer, output)\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n    return model\nbuild_model().summary()","8d3e17d4":"m = build_model()\nm.fit(train_images, y_train, batch_size=96, epochs=3, verbose = 1)\n\nm.save(\"trainedModel.h5\")\nm_ = load_model(\"trainedModel.h5\")\n\ny_pred = m_.predict(test_images).reshape((1,-1))[0].astype(int)\nprint(\"Accuracy = {}\".format(accuracy_score(y_test, y_pred)))\nprint(classification_report(y_test, y_pred))","70aace18":"estimator = KerasClassifier(build_fn=build_model, batch_size=64, epochs=5, verbose = 1)\nKfold = StratifiedKFold(n_splits=5, shuffle=True, random_state=100)\nresults = cross_val_score(estimator, train_images, y_train, cv=Kfold, n_jobs=1)\nprint(\"Results: {} ({}%)\".format(round(results.mean()*100,2), round(results.std()*100, 2)))","f3d10772":"estimator = KerasClassifier(build_fn=build_model, verbose = 0)\n\ntuned_parameters = { 'batch_size': [96], 'epochs': [2, 3] }\nscores = ['accuracy','precision', 'recall']\n\nfor score in scores:\n    print(\"=\"*39, \"\\n# Tuning hyper-parameters for {}:\\n\".format(score), \"=\"*39)\n\n  # clf = GridSearchCV(estimator, tuned_parameters, cv=5, scoring='%s_macro' % score)\n    clf = GridSearchCV(estimator, tuned_parameters, cv=5, scoring=score)\n    clf.fit(train_images, y_train)\n\n    print(\"\\n# Best parameters set found on development set: \", clf.best_params_)\n    print(\"# Grid scores on development set:\")\n    means = clf.cv_results_['mean_test_score']\n    stds = clf.cv_results_['std_test_score']\n    for mean, std, params in zip(means, stds, clf.cv_results_['params']):\n        print(\"\\t\\t\\t\\t %0.3f (+\/-%0.03f) for %r\" % (mean, std * 2, params))\n    print()\n\n    print(\"# Detailed classification report: \")\n    # The model is trained on the full development set. & The scores are computed on the full evaluation set.\n    y_true, y_pred = y_test, clf.predict(test_images)\n    print(\"Accuracy = {}\".format(accuracy_score(y_true, y_pred)))\n    print(classification_report(y_true, y_pred), \"\\n\")","fab54221":"## GirdSearch with CrossValidation","cd78ee5e":"## Reading and processing Data","9ad65d69":"## Evaluate model with cross validation","d7680116":"## Make predictions"}}