{"cell_type":{"a7ebcc7e":"code","fa67d08e":"code","6bcceeef":"code","50a9d0b4":"code","31ce0ddb":"code","44974806":"code","78207901":"code","688248ca":"code","13b4633c":"code","c5ab6b1d":"code","6d47c35b":"code","a0bf570a":"code","dccbe44d":"code","6a1e9de0":"code","6147f5dc":"code","f765ce08":"markdown"},"source":{"a7ebcc7e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa67d08e":"import pandas as pd\ndf=pd.read_csv('\/kaggle\/input\/fetal-health-classification\/fetal_health.csv')","6bcceeef":"df.head(5)","50a9d0b4":"np.unique(df.fetal_health)","31ce0ddb":"X=df.drop(['fetal_health'],axis=1)\n","44974806":"y=df.fetal_health","78207901":"from sklearn.preprocessing import MinMaxScaler\nX_scaler=MinMaxScaler().fit_transform(X)\ndf_scaler=pd.DataFrame(X_scaler,columns=X.columns)\ndf_scaler","688248ca":"from sklearn.model_selection import KFold\n\nkf = KFold(n_splits=4)\nkf.get_n_splits(df_scaler)","13b4633c":"from sklearn.tree import DecisionTreeClassifier\nclf=DecisionTreeClassifier()","c5ab6b1d":"df_scaler.iloc[0:10,:]","6d47c35b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nlogit=LogisticRegression()\ncross_val_score(logit, df_scaler, y, scoring=\"accuracy\")","a0bf570a":"sum_accuracy_score=0\n\nfrom sklearn.metrics import accuracy_score\nfor train_index, test_index in kf.split(X):\n    X_train=df_scaler.iloc[train_index,:]\n    y_train=y[train_index]\n    X_test=df_scaler.iloc[test_index,:]\n    y_test=y[test_index]\n    \n    clf.fit(X_train,y_train)\n    y_pred=clf.predict(X_test)\n    \n    print(accuracy_score(y_test,y_pred))\n    \n    sum_accuracy_score+=accuracy_score(y_test,y_pred)\n    \n    \n    \n    \n    \n    ","dccbe44d":"print('accuracy_score',sum_accuracy_score\/4)","6a1e9de0":"from sklearn import tree\ntext_representation = tree.export_text(clf)\nprint(text_representation)","6147f5dc":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(clf, \n                   feature_names=df_scaler.columns,  \n                   filled=True)","f765ce08":"#Iloc seleciona linhas e colunas"}}