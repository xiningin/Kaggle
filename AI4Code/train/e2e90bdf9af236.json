{"cell_type":{"963081b0":"code","d8571390":"code","acb344c9":"code","0a296e29":"code","3992c3a4":"code","35bfab83":"code","bfdbc803":"code","99f67ed8":"code","05747435":"code","2b6c38bc":"code","82008b3e":"code","eb169385":"code","a1926aa2":"markdown","13864e18":"markdown","9db60711":"markdown","292b394e":"markdown","7fa866c1":"markdown","a3d44c01":"markdown"},"source":{"963081b0":"import os, sys\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport skimage.io\nfrom skimage.transform import resize\nfrom imgaug import augmenters as iaa\nfrom tqdm import tqdm\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d8571390":"path_to_train = '..\/input\/train\/'\ndata = pd.read_csv('..\/input\/train.csv')\n\ntrain_dataset_info = []\nfor name, labels in zip(data['Id'], data['Target'].str.split(' ')):\n    train_dataset_info.append({\n        'path':os.path.join(path_to_train, name),\n        'labels':np.array([int(label) for label in labels])})\ntrain_dataset_info = np.array(train_dataset_info)","acb344c9":"class data_generator:\n    \n    def create_train(dataset_info, batch_size, shape, augument=True):\n        assert shape[2] == 3\n        while True:\n            random_indexes = np.random.choice(len(dataset_info), batch_size)\n            batch_images = np.empty((batch_size, shape[0], shape[1], shape[2]))\n            batch_labels = np.zeros((batch_size, 28))\n            for i, idx in enumerate(random_indexes):\n                image = data_generator.load_image(\n                    dataset_info[idx]['path'], shape)   \n                if augument:\n                    image = data_generator.augment(image)\n                batch_images[i] = image\n                batch_labels[i][dataset_info[idx]['labels']] = 1\n            yield batch_images, batch_labels\n            \n    \n    def load_image(path, shape):\n        image_red_ch = skimage.io.imread(path+'_red.png')\n        image_yellow_ch = skimage.io.imread(path+'_yellow.png')\n        image_green_ch = skimage.io.imread(path+'_green.png')\n        image_blue_ch = skimage.io.imread(path+'_blue.png')\n\n        image_red_ch += (image_yellow_ch\/2).astype(np.uint8) \n        image_green_ch += (image_yellow_ch\/2).astype(np.uint8)\n\n        image = np.stack((\n            image_red_ch, \n            image_green_ch, \n            image_blue_ch), -1)\n        image = resize(image, (shape[0], shape[1]), mode='reflect')\n        return image\n                \n            \n    def augment(image):\n        augment_img = iaa.Sequential([\n            iaa.OneOf([\n                iaa.Affine(rotate=0),\n                iaa.Affine(rotate=90),\n                iaa.Affine(rotate=180),\n                iaa.Affine(rotate=270),\n                iaa.Fliplr(0.5),\n                iaa.Flipud(0.5),\n            ])], random_order=True)\n        \n        image_aug = augment_img.augment_image(image)\n        return image_aug","0a296e29":"# create train datagen\ntrain_datagen = data_generator.create_train(\n    train_dataset_info, 5, (299,299,3), augument=True)","3992c3a4":"images, labels = next(train_datagen)\n\nfig, ax = plt.subplots(1,5,figsize=(25,5))\nfor i in range(5):\n    ax[i].imshow(images[i])\nprint('min: {0}, max: {1}'.format(images.min(), images.max()))","35bfab83":"from keras.layers import Input\nfrom keras.layers.merge import concatenate\nfrom keras.layers import Dense, Dropout, Flatten, Activation, Conv2D\nfrom keras.layers.convolutional import MaxPooling2D, AveragePooling2D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.models import Model\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras.applications.inception_resnet_v2 import InceptionResNetV2\nfrom keras.applications.inception_v3 import InceptionV3\nfrom keras.callbacks import ModelCheckpoint\nfrom keras import metrics\nfrom keras.optimizers import Adam \nfrom keras import backend as K\nimport keras\n\n\ndef conv_block(x, nb_filter, nb_row, nb_col, padding = \"same\", strides = (1, 1), use_bias = False):\n    '''Defining a Convolution block that will be used throughout the network.'''\n    \n    x = Conv2D(nb_filter, (nb_row, nb_col), strides = strides, padding = padding, use_bias = use_bias)(x)\n    x = BatchNormalization(axis = -1, momentum = 0.9997, scale = False)(x)\n    x = Activation(\"relu\")(x)\n    \n    return x\n\ndef stem(input):\n    '''The stem of the pure Inception-v4 and Inception-ResNet-v2 networks. This is input part of those networks.'''\n    \n    # Input shape is 299 * 299 * 3 (Tensorflow dimension ordering)\n    x = conv_block(input, 32, 3, 3, strides = (2, 2), padding = \"same\") # 149 * 149 * 32\n    x = conv_block(x, 32, 3, 3, padding = \"same\") # 147 * 147 * 32\n    x = conv_block(x, 64, 3, 3) # 147 * 147 * 64\n\n    x1 = MaxPooling2D((3, 3), strides = (2, 2), padding = \"same\")(x)\n    x2 = conv_block(x, 96, 3, 3, strides = (2, 2), padding = \"same\")\n\n    x = concatenate([x1, x2], axis = -1) # 73 * 73 * 160\n\n    x1 = conv_block(x, 64, 1, 1)\n    x1 = conv_block(x1, 96, 3, 3, padding = \"same\")\n\n    x2 = conv_block(x, 64, 1, 1)\n    x2 = conv_block(x2, 64, 1, 7)\n    x2 = conv_block(x2, 64, 7, 1)\n    x2 = conv_block(x2, 96, 3, 3, padding = \"same\")\n\n    x = concatenate([x1, x2], axis = -1) # 71 * 71 * 192\n\n    x1 = conv_block(x, 192, 3, 3, strides = (2, 2), padding = \"same\")\n    \n    x2 = MaxPooling2D((3, 3), strides = (2, 2), padding = \"same\")(x)\n\n    x = concatenate([x1, x2], axis = -1) # 35 * 35 * 384\n    \n    return x\n\ndef inception_A(input):\n    '''Architecture of Inception_A block which is a 35 * 35 grid module.'''\n    \n    a1 = AveragePooling2D((3, 3), strides = (1, 1), padding = \"same\")(input)\n    a1 = conv_block(a1, 96, 1, 1)\n    \n    a2 = conv_block(input, 96, 1, 1)\n    \n    a3 = conv_block(input, 64, 1, 1)\n    a3 = conv_block(a3, 96, 3, 3)\n    \n    a4 = conv_block(input, 64, 1, 1)\n    a4 = conv_block(a4, 96, 3, 3)\n    a4 = conv_block(a4, 96, 3, 3)\n    \n    merged = concatenate([a1, a2, a3, a4], axis = -1)\n    \n    return merged\n\ndef inception_B(input):\n    '''Architecture of Inception_B block which is a 17 * 17 grid module.'''\n    \n    b1 = AveragePooling2D((3, 3), strides = (1, 1), padding = \"same\")(input)\n    b1 = conv_block(b1, 128, 1, 1)\n    \n    b2 = conv_block(input, 384, 1, 1)\n    \n    b3 = conv_block(input, 192, 1, 1)\n    b3 = conv_block(b3, 224, 1, 7)\n    b3 = conv_block(b3, 256, 7, 1)\n    \n    b4 = conv_block(input, 192, 1, 1)\n    b4 = conv_block(b4, 192, 7, 1)\n    b4 = conv_block(b4, 224, 1, 7)\n    b4 = conv_block(b4, 224, 7, 1)\n    b4 = conv_block(b4, 256, 1, 7)\n    \n    merged = concatenate([b1, b2, b3, b4], axis = -1)\n    \n    return merged\n\ndef inception_C(input):\n    '''Architecture of Inception_C block which is a 8 * 8 grid module.'''\n    \n    c1 = AveragePooling2D((3, 3), strides = (1, 1), padding = \"same\")(input)\n    c1 = conv_block(c1, 256, 1, 1)\n    \n    c2 = conv_block(input, 256, 1, 1)\n\n    c3 = conv_block(input, 384, 1, 1)\n    c31 = conv_block(c2, 256, 1, 3)\n    c32 = conv_block(c2, 256, 3, 1)\n    c3 = concatenate([c31, c32], axis = -1)\n\n    c4 = conv_block(input, 384, 1, 1)\n    c4 = conv_block(c3, 448, 3, 1)\n    c4 = conv_block(c3, 512, 1, 3)\n    c41 = conv_block(c3, 256, 1, 3)\n    c42 = conv_block(c3, 256, 3, 1)\n    c4 = concatenate([c41, c42], axis = -1)\n  \n    merged = concatenate([c1, c2, c3, c4], axis = -1)\n    \n    return merged\n\ndef reduction_A(input, k = 192, l = 224, m = 256, n = 384):\n    '''Architecture of a 35 * 35 to 17 * 17 Reduction_A block.'''\n\n    ra1 = MaxPooling2D((3, 3), strides = (2, 2), padding = \"same\")(input)\n    \n    ra2 = conv_block(input, n, 3, 3, strides = (2, 2), padding = \"same\")\n\n    ra3 = conv_block(input, k, 1, 1)\n    ra3 = conv_block(ra3, l, 3, 3)\n    ra3 = conv_block(ra3, m, 3, 3, strides = (2, 2), padding = \"same\")\n\n    merged = concatenate([ra1, ra2, ra3], axis = -1)\n    \n    return merged\n\ndef reduction_B(input):\n    '''Architecture of a 17 * 17 to 8 * 8 Reduction_B block.'''\n    \n    rb1 = MaxPooling2D((3, 3), strides = (2, 2), padding = \"same\")(input)\n    \n    rb2 = conv_block(input, 192, 1, 1)\n    rb2 = conv_block(rb2, 192, 3, 3, strides = (2, 2), padding = \"same\")\n    \n    rb3 = conv_block(input, 256, 1, 1)\n    rb3 = conv_block(rb3, 256, 1, 7)\n    rb3 = conv_block(rb3, 320, 7, 1)\n    rb3 = conv_block(rb3, 320, 3, 3, strides = (2, 2), padding = \"same\")\n    \n    merged = concatenate([rb1, rb2, rb3], axis = -1)\n    \n    return merged\n\ndef inception_v4(nb_classes = 1001, load_weights = True):\n    '''Creates the Inception_v4 network.'''\n    \n    init = Input((299, 299, 3)) # Channels last, as using Tensorflow backend with Tensorflow image dimension ordering\n    \n    # Input shape is 299 * 299 * 3\n    x = stem(init) # Output: 35 * 35 * 384\n    \n    # 4 x Inception A\n    for i in range(4):\n        x = inception_A(x)\n        # Output: 35 * 35 * 384\n        \n    # Reduction A\n    x = reduction_A(x, k = 192, l = 224, m = 256, n = 384) # Output: 17 * 17 * 1024\n\n    # 7 x Inception B\n    for i in range(7):\n        x = inception_B(x)\n        # Output: 17 * 17 * 1024\n        \n    # Reduction B\n    x = reduction_B(x) # Output: 8 * 8 * 1536\n\n    # 3 x Inception C\n    for i in range(3):\n        x = inception_C(x) \n        # Output: 8 * 8 * 1536\n        \n    # Average Pooling\n    x = AveragePooling2D((8, 8))(x) # Output: 1536\n\n    # Dropout\n    x = Dropout(0.2)(x) # Keep dropout 0.2 as mentioned in the paper\n    x = Flatten()(x) # Output: 1536\n\n    # Output layer\n    output = Dense(units = nb_classes, activation = \"softmax\")(x) # Output: 1000\n\n    model = Model(init, output, name = \"Inception-v4\")   \n        \n    return model","bfdbc803":"# keras.backend.clear_session()\nmodel=inception_v4(nb_classes = 28, load_weights = True)\n#model = create_model(input_shape=(299,299,3), n_out=28)\nmodel.compile(loss='binary_crossentropy', optimizer=Adam(1e-04),metrics=['acc'])\nmodel.summary()","99f67ed8":"epochs = 100; batch_size = 16\ncheckpointer = ModelCheckpoint(\n    '..\/working\/InceptionV4.h5', \n    verbose=2, \n    save_best_only=True)\n\n# split and suffle data \nnp.random.seed(2018)\nindexes = np.arange(train_dataset_info.shape[0])\nnp.random.shuffle(indexes)\ntrain_indexes = indexes[:27500]\nvalid_indexes = indexes[27500:]\n\n# create train and valid datagens\ntrain_generator = data_generator.create_train(\n    train_dataset_info[train_indexes], batch_size, (299,299,3), augument=True)\nvalidation_generator = data_generator.create_train(\n    train_dataset_info[valid_indexes], 100, (299,299,3), augument=False)\n\n# train model\nhistory = model.fit_generator(\n    train_generator,\n    steps_per_epoch=100,\n    validation_data=next(validation_generator),\n    epochs=epochs, \n    verbose=1,\n    callbacks=[checkpointer])","05747435":"fig, ax = plt.subplots(1, 2, figsize=(15,5))\nax[0].set_title('loss')\nax[0].plot(history.epoch, history.history[\"loss\"], label=\"Train loss\")\nax[0].plot(history.epoch, history.history[\"val_loss\"], label=\"Validation loss\")\nax[1].set_title('acc')\nax[1].plot(history.epoch, history.history[\"acc\"], label=\"Train acc\")\nax[1].plot(history.epoch, history.history[\"val_acc\"], label=\"Validation acc\")\nax[0].legend()\nax[1].legend()","2b6c38bc":"submit = pd.read_csv('..\/input\/sample_submission.csv')","82008b3e":"%%time\npredicted = []\nfor name in tqdm(submit['Id']):\n    path = os.path.join('..\/input\/test\/', name)\n    image = data_generator.load_image(path, (299,299,3))\n    score_predict = model.predict(image[np.newaxis])[0]\n    label_predict = np.arange(28)[score_predict>=0.5]\n    str_predict_label = ' '.join(str(l) for l in label_predict)\n    predicted.append(str_predict_label)","eb169385":"submit['Predicted'] = predicted\nsubmit.to_csv('submission.csv', index=False)","a1926aa2":"### Train model","13864e18":"### Create datagenerator","9db60711":"### Load dataset info","292b394e":"### Create submit","7fa866c1":"\n### Show data","a3d44c01":"### Create model"}}