{"cell_type":{"ada13b31":"code","d65a11ee":"code","8a7adbae":"code","3f7cad80":"code","8b5b4d9e":"code","11df10af":"code","b71e6817":"code","35ef8a2f":"code","f4d33274":"code","b83b8ab2":"code","1ce49896":"code","c478f128":"code","419ad98c":"code","78e88eda":"code","95dc40be":"markdown","e4f60552":"markdown","896e42af":"markdown","df4f0d85":"markdown","02e973d6":"markdown","e9804d25":"markdown","a29cb011":"markdown","12f51bac":"markdown","b133196e":"markdown","d091c2f6":"markdown"},"source":{"ada13b31":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\n\ndata = pd.read_csv('..\/input\/paysim1\/PS_20174392719_1491204439457_log.csv')\n\ndata.head()","d65a11ee":"#checking for null values\ndata.isnull().values.any()\ncount_type = data.type.value_counts()\ncount_type","8a7adbae":"# Finding the number of rows of the dataset \nr_len = len(data.index)\n\n# count the number of rows with value 1 in isFlaggedFraud vs isFraud\ncount_fraud = data['isFraud'].value_counts()\ncount_detection = data['isFlaggedFraud'].value_counts()\n\n\n#Visualisation\nlabels = ['isFraud','isFlaggedFraud']\nplt.bar([1],count_fraud[1], width = 0.4)\nplt.bar([2],count_detection[1],width = 0.4)\nplt.ylabel('Count')\nplt.title('Fraudulent transactions count')\nplt.xticks([1,2], labels)\nplt.show()\n    ","3f7cad80":"#checking fradulent transaction for each type of payments\n\ncount_payment = data.loc[(data.isFraud == 1) & (data.type == 'PAYMENT')]\n\ncount_transfer = data.loc[(data.isFraud == 1) & (data.type == 'TRANSFER')]\n\ncount_cashout = data.loc[(data.isFraud == 1) & (data.type == 'CASH_OUT')]\n\ncount_debit = data.loc[(data.isFraud == 1) & (data.type == 'DEBIT')]\n\ncount_cashin = data.loc[(data.isFraud == 1) & (data.type == 'CASH_IN')]","8b5b4d9e":"#Visualisation of all types of payments for number of frauds\n\nlabels = ['PAYMENT','TRANSFER','CASH_OUT','DEBIT','CASH_IN']\nplt.bar([1,2,3,4,5],[len(count_payment),len(count_transfer), len(count_cashout), len(count_debit), len(count_cashin)])\nplt.ylabel('Count of fraudulent transactions')\nplt.title('Count of fraudlent transacitons for each type of payment')\nplt.xticks([1,2,3,4,5], labels)\nplt.show()\n","11df10af":"count_fraud = data.loc[(data['isFraud'] == 1) ]\ncount_fraud.head()","b71e6817":"\ncount_nameOrig = count_fraud['nameOrig'].value_counts()\ncount_nameOrig.sort_values(ascending = False)\ncount_nameOrig.head()","35ef8a2f":"count_nameDest = count_fraud['nameDest'].value_counts()\ncount_nameDest.sort_values(ascending = False)\ncount_nameDest.head()","f4d33274":"X = data.loc[(data['type'] == 'TRANSFER') | (data['type'] == 'CASH_OUT')]\n\nY = X['isFraud']\n# Also we can drop the isFlaggedFraud coulmn as it has no siginificant impact on the dataset as observerd above.\n# Also the names of the accounts can also be dropped as they are also irrelevant in this case.\nX = X.drop(['nameOrig', 'isFlaggedFraud', 'nameDest', 'isFraud'], axis = 1)\n\nX.head()","b83b8ab2":"Y.head()","1ce49896":"from sklearn.preprocessing import LabelEncoder\nonc =  LabelEncoder()\nX['type'] = onc.fit_transform(X['type'])","c478f128":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(  X, Y, test_size=0.33, random_state=42)","419ad98c":" from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\nrfc.fit(X_train, Y_train)\npredictions = rfc.predict(X_test)\n","78e88eda":"from sklearn.metrics import accuracy_score\naccuracy_score(Y_test,predictions)\n","95dc40be":"### Data Cleaning","e4f60552":"Checking for mutiple customer transactions to find the fradulent ones","896e42af":"Thus we can see the score for this model is 0.9992 which is quite accurate for the test set that we created. ","df4f0d85":"### Importing the dataset","02e973d6":"Now we have to convert the above data into train, test and cross validation sets.","e9804d25":"As we can see only transfer and cashout type of payments are mostly responsible for the fraudlent transactions","a29cb011":"Checking the despostied ones for repeated fradulent transactions ","12f51bac":"As we can see from the above analysis the fraudulent transactions only occur in the TRANSFER and CASH_OUT side of the dataset. So we can assume that none of the other transactions contribute to the transaction fraud.","b133196e":"### A bit of data visulalisation and analysis","d091c2f6":"From the above observations we can see that there are some repeat offenders in the depositor side "}}