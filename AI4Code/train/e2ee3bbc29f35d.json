{"cell_type":{"abcef6e3":"code","df56c35e":"code","ceae5991":"code","d8f65a35":"code","24051aeb":"code","6c8ea0b9":"code","c4d62ce8":"code","1a5a37bd":"code","d263587b":"code","ac7ac68b":"code","2669e9f3":"code","4f0b8315":"code","b2e24b1c":"code","3f0afc83":"markdown","e2d02f7c":"markdown"},"source":{"abcef6e3":"import numpy as np\nimport pandas as pd\nfrom datetime import datetime\nimport matplotlib\nimport math\nfrom matplotlib import pyplot as plt\nimport lightgbm\nfrom lightgbm import *\nimport catboost\n\nfrom sklearn.ensemble import *\nfrom sklearn.model_selection import *\nfrom sklearn.linear_model import *\nfrom sklearn.svm import *\nfrom sklearn.metrics import *\nfrom sklearn.preprocessing import *\n\nrmse = lambda x, y: math.sqrt(mean_squared_error(x, y))\n\nimport os","df56c35e":"def process_date(x, start_time=[]):\n    x = x.copy()\n    dates = [datetime.strptime(date, '%Y-%m-%d') for date in x['date']]\n    SECONDS_IN_DAY = 24 * 60 * 60\n    if not start_time:\n        start_time.append(min(dates).timestamp() \/ SECONDS_IN_DAY)\n    start_time = start_time[0]\n    x['timestamp'] = [x.timestamp() \/ SECONDS_IN_DAY - start_time for x in dates]\n    x['year'] = [x.year for x in dates]\n    x['month'] = [x.month for x in dates]\n    x['day'] = [x.day for x in dates]\n    x['weekday'] = [x.weekday() for x in dates]\n    x.drop('date', axis=1, inplace=True)\n    return x","ceae5991":"def process(x, y=None, *, debug=True):\n    x = process_date(x)\n    x.drop(['id', 'year', 'day', 'weekday', 'timestamp'], axis=1, inplace=True)\n    \n    #mask = x['renovation_year'] == 0\n    #x.loc[mask, 'renovation_year'] = x['build_year'][mask]\n    \n    # OneHotEncoding of Month\n    data = np.zeros((x.shape[0], 12), dtype=np.int)\n    data[range(x.shape[0]), x['month'] - 1] = 1\n    x = x.join(pd.DataFrame(data, index=x.index), rsuffix=\"month\")\n    x.drop('month', axis=1, inplace=True)\n    \n    if y is not None:\n        # Removing outliers\n        y = y.copy()\n        mask = y['price'] > 4000\n        print(f\"Deleted {mask.sum()} elements\") if debug else None\n        x.drop(y.index[mask], inplace=True)\n        y.drop(y.index[mask], inplace=True)\n        y = np.array(y).reshape(y.shape[0])\n        return x, y\n    return x","d8f65a35":"def cross_val(model, x_train, y_train, test_percs=[0.3, 0.25, 0.2, 0.15, 0.1, 0.05], *, debug=True):\n    sum_rmse = 0\n    for test_perc in test_percs:\n        test_size = round(x_train.shape[0] * test_perc)\n        cur_x_train, cur_x_test = x_train[:-test_size], x_train[-test_size:]\n        cur_y_train, cur_y_test = y_train[:-test_size], y_train[-test_size:]\n        \n        cur_x_train, cur_y_train = process(cur_x_train, cur_y_train, debug=False)\n        cur_x_test = process(cur_x_test)\n        \n        model.fit(cur_x_train, cur_y_train, eval_set=(cur_x_test, cur_y_test))\n        cur_y_pred = model.predict(cur_x_test)\n        cur_rmse = rmse(cur_y_test, cur_y_pred)\n        \n        print(f\"Test%: {test_perc} RMSE: {cur_rmse}\") if debug else None\n        sum_rmse += cur_rmse\n    return sum_rmse \/ len(test_percs)","24051aeb":"def super_cross_val(model, x_train, y_train, percs=[i \/ 10 for i in range(5, 11)], *, debug=True):\n    sum_rmse = 0\n    for perc in percs:\n        full_size = round(x_train.shape[0] * perc)\n        mean_rmse = cross_val(model, x_train.iloc[:full_size], y_train.iloc[:full_size])\n        print(f\"Current%: {perc} Size: {full_size} RMSE: {mean_rmse}\") if debug else None\n        sum_rmse += mean_rmse\n    return sum_rmse \/ len(percs)","6c8ea0b9":"x_train = pd.read_csv('..\/input\/train_data.csv', index_col='index')\ny_train = pd.read_csv('..\/input\/train_target.csv', index_col='index')","c4d62ce8":"model_class = catboost.CatBoostRegressor\nkwargs = {\n    'learning_rate': 3e-2,\n    'n_estimators': 5000,\n    'max_depth': 10\n}","1a5a37bd":"# In the name of LGBMRegressor(learning_rate=1e-2, n_estimators=2000)\nmodel = model_class(**kwargs)\n#cross_val(model, x_train, y_train)","d263587b":"x_train = pd.read_csv('..\/input\/train_data.csv', index_col='index')\ny_train = pd.read_csv('..\/input\/train_target.csv', index_col='index')\nx_test = pd.read_csv('..\/input\/test_data.csv', index_col='index')\nidx = x_test.index.values","ac7ac68b":"x_train, y_train = process(x_train, y_train)\nx_test = process(x_test)","2669e9f3":"model = model_class(**kwargs).fit(x_train, y_train)","4f0b8315":"y_pred = model.predict(x_test)","b2e24b1c":"my_submission = pd.DataFrame({'index': idx, 'price': y_pred})\nmy_submission.to_csv(f'.\/{model.__class__.__name__}{learning_rate}_{n_estimators}_NoOutliers_OHCMonth.csv', index=False)","3f0afc83":"# Master","e2d02f7c":"# Test"}}