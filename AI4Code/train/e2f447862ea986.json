{"cell_type":{"176d71ee":"code","d38c5d61":"code","f6326183":"code","cca3748e":"code","fa021d49":"code","c359f31b":"code","733da782":"code","d38b0c4a":"code","52223cfe":"code","6934d2ae":"code","cf8f7e71":"code","74decc93":"code","5d586bbd":"code","66acb915":"code","9f8999a1":"code","4df56045":"code","a1460fc4":"code","68af59f2":"code","c5756f8f":"code","53c73017":"code","8e69182a":"code","4338c98e":"code","3d609e0b":"code","3fdf56e6":"code","c1083aab":"code","61aa516a":"code","e577fb30":"code","39439489":"code","5885a846":"code","82b48e41":"code","7c80a895":"code","41cbddb4":"code","140d0857":"markdown","987101c3":"markdown","8cccd0df":"markdown","1b0bb52d":"markdown"},"source":{"176d71ee":"import numpy as np\nimport pandas as pd\nimport seaborn as sns","d38c5d61":"data = pd.read_csv('..\/input\/titanic\/train.csv')","f6326183":"data.shape","cca3748e":"data = pd.concat([data,pd.read_csv('..\/input\/titanic\/test.csv')],axis=0)","fa021d49":"data.describe()","c359f31b":"median_age = np.nanmedian(data['Age'])","733da782":"data['Age'].fillna(median_age,inplace=True)","d38b0c4a":"data.describe()","52223cfe":"data.head()","6934d2ae":"pd.pivot_table(data=data,values=['Survived','PassengerId'],index='Sex',aggfunc={'Survived':'sum','PassengerId':'count'})","cf8f7e71":"data['isfemale'] = data['Sex'].apply(lambda x: 1 if x.lower()=='female' else 0)","74decc93":"data.drop('Sex',inplace=True,axis=1)","5d586bbd":"data = pd.concat([data,pd.get_dummies(data['Embarked'],drop_first=True)],axis=1)","66acb915":"data.head()","9f8999a1":"features = ['Pclass','Age','SibSp','Parch','Fare','Q','S']","4df56045":"X_train = data[features][0:891]\ny_train = data['Survived'][0:891]","a1460fc4":"import statsmodels.api as sm\nmodel = sm.GLM(data['Survived'][0:891],sm.add_constant(data[features][0:891]),family=sm.families.Binomial())\nresult = model.fit()\nresult.summary()","68af59f2":"features.pop(5)","c5756f8f":"model = sm.GLM(data['Survived'][0:891],sm.add_constant(data[features][0:891]),family=sm.families.Binomial())\nresult = model.fit()\nresult.summary()","53c73017":"features.pop(4)","8e69182a":"model = sm.GLM(data['Survived'][0:891],sm.add_constant(data[features][0:891]),family=sm.families.Binomial())\nresult = model.fit()\nresult.summary()","4338c98e":"yhat = result.predict(sm.add_constant(data[features][0:891]))","3d609e0b":"from sklearn.metrics import confusion_matrix,accuracy_score,roc_auc_score,roc_curve\nthresholds = np.linspace(start=0.1,stop=1,endpoint=True,num=19)","3fdf56e6":"ypredicts = pd.DataFrame()\nfor threshold in thresholds:\n    ypredicts[f'{threshold}'] = np.vectorize(lambda x:1 if x>=threshold else 0)(yhat)\n    cm = confusion_matrix(data['Survived'][0:891],ypredicts[f'{threshold}'])\n    print(f'For threshold: {threshold}\\n CM is \\n:{cm}')\nroc_auc_score(data['Survived'][0:891],yhat)\n","c1083aab":"tpr,fpr,thresholds = roc_curve(data['Survived'][0:891],yhat)","61aa516a":"gmeans = np.sqrt(tpr*(1-fpr))","e577fb30":"ix = np.argmax(gmeans)","39439489":"thresholds[ix]","5885a846":"threshold_final = 0.375","82b48e41":"ytest_hat = result.predict(sm.add_constant(data[features][891:]))","7c80a895":"ytest_predict = np.vectorize(lambda x:1 if x>=threshold_final else 0)(ytest_hat)","41cbddb4":"output = data['PassengerId'][891:]\noutput = pd.concat([output,pd.Series(ytest_predict)],axis=1)\noutput.columns=['PassengerId','Survived']\noutput.to_csv('submission.csv',index=False)","140d0857":"Age is missing some values. Need to impute these as age can be an important factor. Will be replaced with median ","987101c3":"Now all are significant","8cccd0df":"There will be 891 rows for building the model","1b0bb52d":"Selected 0.55 based on above Confusion matrices as threshold"}}