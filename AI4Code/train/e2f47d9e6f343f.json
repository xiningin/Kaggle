{"cell_type":{"2848a490":"code","d480797e":"code","5d9ae30d":"code","e886e1a4":"code","68e2f42e":"code","b7c202a1":"code","efc1a4e8":"code","7a886fcc":"code","68485dd2":"code","48635c94":"code","5cc6142a":"code","095478a9":"code","12caff4d":"code","ce5355a6":"code","8f507b08":"code","e26ce2df":"code","a1dbf387":"code","2ca1b429":"code","25255a52":"code","53286d3b":"code","c6ca0640":"code","488a114c":"code","f7c3d474":"code","a18447c3":"code","bb22b25e":"code","7ba5cd35":"code","0a26ebab":"code","b0c00df7":"code","beddb84b":"code","b6a0fe34":"code","695ba21b":"code","7fb3c74f":"markdown","0be9a2a4":"markdown","fc8a3b5c":"markdown","c64afd01":"markdown","0b22696f":"markdown","b8091076":"markdown","9c5b94e0":"markdown","c2544d99":"markdown"},"source":{"2848a490":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d480797e":"pip install fuzzy_c_means ","5d9ae30d":"import numpy as np \nimport pandas as pd\nimport matplotlib .pyplot as plt \n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom fcmeans import FCM\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OrdinalEncoder","e886e1a4":"data = pd.read_csv('..\/input\/unsupervised-learning-on-country-data\/Country-data.csv')\n","68e2f42e":"data.shape","b7c202a1":"data.head()","efc1a4e8":"data.describe()","7a886fcc":"data.info()","68485dd2":"columns = data.columns\ncolumns","48635c94":"#oe=OrdinalEncoder()\n##convert train_data\n#for col in data:\n #   data[col]=oe.fit_transform(np.asarray(data[col].astype('str')).reshape(-1,1))","5cc6142a":"\n#print(data.shape)\n#data.head()","095478a9":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(data['country'])\nle.transform(data['country'])\ndata['country'] = le.transform(data['country'])","12caff4d":"print(data.shape)\ndata.head()","ce5355a6":"plt.figure(figsize=(12,5))\nplt.title(\"Child Mortality: Death of children \")\nax = sns.histplot(data[\"child_mort\"])","8f507b08":"plt.figure(figsize=(12,5))\nplt.title(\"Exports: Exports of goods and services per capita.\")\nax = sns.histplot(data[\"exports\"])","e26ce2df":"plt.figure(figsize=(12,5))\nplt.title(\"Imports: Imports of goods and services per capita. \")\nax = sns.histplot(data[\"imports\"])","a1dbf387":"plt.figure(figsize=(12,5))\nplt.title(\"Health: Total health spending per capita.\")\nax = sns.histplot(data[\"health\"])","2ca1b429":"plt.figure(figsize=(12,5))\nplt.title(\"Income: Net income per person\")\nax = sns.histplot(data[\"income\"])","25255a52":"plt.figure(figsize=(12,5))\nplt.title(\"Inflation: The measurement of the annual growth rate \")\nax = sns.histplot(data[\"inflation\"])","53286d3b":"plt.figure(figsize=(12,5))\nplt.title(\"Life expectancy: The average number of years a new born child would live if the current mortality patterns are to remain the same\")\nax = sns.histplot(data[\"life_expec\"])","c6ca0640":"plt.figure(figsize=(15,10))\nsns.heatmap(data.corr( ),annot=True)","488a114c":"scalarModel = StandardScaler()\ndata = scalarModel.fit_transform(data)","f7c3d474":"data","a18447c3":"\ndata = pd.DataFrame(data , columns = columns )\ndata","bb22b25e":"data = data.values\ndata","7ba5cd35":"fcmModel = FCM(n_clusters = 2)\nfcmModel.fit(data)\ncenter = fcmModel.centers\ncenter","0a26ebab":"#Calculating Prediction\npred = fcmModel.predict(data)\nprint('Predicted Value for fcmModel is : ' , pred)\npred.shape","b0c00df7":"data = pd.DataFrame(data , columns = columns )\ndata","beddb84b":"# add the cluster column to the dataframe \ndata['cluster'] = pred\ndata.head()","b6a0fe34":"data = data.values\ndata","695ba21b":"# Visualising the clusters\nplt.scatter(data[pred == 0, 0], data[pred == 0, 1], s = 10, c = 'r')\nplt.scatter(data[pred == 1, 0], data[pred == 1, 1], s = 10, c = 'b' )\n#plt.scatter(data[pred == 2, 0], data[pred == 2, 1], s = 10, c = 'g' )\nplt.scatter(center[:, 0], center[:, 1], s = 300, c = 'black',marker = '+')\nplt.title('Clusters of customers')\nplt.xlabel('X_label ')\nplt.ylabel('y_label ')\nplt.legend()\nplt.show()\n","7fb3c74f":"# ****Convert data from string and numbers","0be9a2a4":"# ****Data Distribution","fc8a3b5c":"# ****Correlation","c64afd01":"# ****import library ","0b22696f":"# ****Draw the data and Cluster ","b8091076":"# ****Read Data","9c5b94e0":"# ****Scaling Data","c2544d99":"# ****Apply Fuzzy C Means Algorithm"}}