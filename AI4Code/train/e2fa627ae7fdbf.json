{"cell_type":{"038e6d0b":"code","e2c161c2":"code","cf022d67":"code","f3f1172c":"code","a6d82ffe":"code","bf597492":"code","cd903815":"code","cf0f20a5":"code","412fca0a":"code","3b5622d9":"code","e542df17":"code","1c6b1140":"code","d1a907d6":"code","73138b3a":"code","48f8b007":"code","7f026627":"code","6e970a33":"code","de305e11":"code","54c86fd8":"code","5c2c16c1":"code","5e2e4750":"code","6f7f5991":"code","86063ca1":"code","9d04062c":"code","5bdcb3bb":"code","a330015d":"code","c7cb4a82":"markdown","651fa9a8":"markdown","492980e1":"markdown","8ef8b42c":"markdown","8ac38f8f":"markdown","9b1ef37b":"markdown","2acf2260":"markdown","9419ae68":"markdown","931a3f47":"markdown","fb4c32a5":"markdown","ff7baf65":"markdown"},"source":{"038e6d0b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import metrics","e2c161c2":"diabetes_dataset = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\") # loading the diabetes dataset to a pandas DataFrame","cf022d67":"diabetes_dataset.head() # printing the first 5 rows of the dataset","f3f1172c":"diabetes_dataset.shape # number of rows and Columns in this dataset","a6d82ffe":"diabetes_dataset.describe() # getting the statistical measures of the data","bf597492":"diabetes_dataset['Outcome'].value_counts()","cd903815":"diabetes_dataset.groupby('Outcome').mean()","cf0f20a5":"sns.pairplot(diabetes_dataset)","412fca0a":"# Separating labels \nX = diabetes_dataset.drop(columns = 'Outcome', axis=1)\nY = diabetes_dataset['Outcome']","3b5622d9":"print(X)","e542df17":"print(Y)","1c6b1140":"scaler = StandardScaler()","d1a907d6":"scaler.fit(X)","73138b3a":"standardized_data = scaler.transform(X)","48f8b007":"print(standardized_data)","7f026627":"X = standardized_data\nY = diabetes_dataset['Outcome']","6e970a33":"print(X)\nprint(Y)","de305e11":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.3, stratify=Y, random_state=42)","54c86fd8":"print(X.shape, X_train.shape, X_test.shape)","5c2c16c1":"classifier = svm.SVC(kernel='linear')","5e2e4750":"classifier.fit(X_train, Y_train) #training the support vector Machine Classifier","6f7f5991":"# accuracy score on the training data\nX_train_prediction = classifier.predict(X_train)\ntraining_data_accuracy = accuracy_score(X_train_prediction, Y_train)","86063ca1":"print('Accuracy score of the training data : ', training_data_accuracy)","9d04062c":"# accuracy score on the test data\nX_test_prediction = classifier.predict(X_test)\ntest_data_accuracy = accuracy_score(X_test_prediction, Y_test)","5bdcb3bb":"print('Accuracy score of the test data : ', test_data_accuracy)","a330015d":"input_data = (7,154,87,29,175,33.6,0.183,22)\n\ninput_data_as_numpy_array = np.asarray(input_data) # changing the input_data to numpy array\n\ninput_data_reshaped = input_data_as_numpy_array.reshape(1,-1) # reshape the array \n\nstd_data = scaler.transform(input_data_reshaped) # standardize the input data\nprint(std_data)\n\nprediction = classifier.predict(std_data)\nprint(prediction)\n\nif (prediction[0] == 0):\n  print('The person is not diabetic')\nelse:\n  print('\\nThe person is diabetic')","c7cb4a82":"Accuracy Score","651fa9a8":"EDA\n\nPIMA Diabetes Dataset: https:\/\/www.kaggle.com\/uciml\/pima-indians-diabetes-database","492980e1":"Model Evaluation","8ef8b42c":"Training the Model","8ac38f8f":"Making a Predictive System","9b1ef37b":"Aim: To predict if the person is diabetic or not, using various different features in our model","2acf2260":"Code written by Dhrumil Vadodaria!!\n\nConnect with me on LinkedIn for future discussions on ML: https:\/\/www.linkedin.com\/in\/dhrumil-v-814932128\/\n\nPlease provide citation if you use the code!","9419ae68":"Data Standardization","931a3f47":"Train Test Split","fb4c32a5":"0 --> Non-Diabetic\n\n1 --> Diabetic","ff7baf65":"Importing dependencies and libraries"}}