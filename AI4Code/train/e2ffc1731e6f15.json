{"cell_type":{"c7429979":"code","a308e689":"code","a10bc19d":"code","3d9dbd45":"code","f21e5b1e":"code","a8c9bc4c":"code","acb52d94":"code","14d7256e":"markdown","fc5dd30a":"markdown"},"source":{"c7429979":"!pip install textstat\n!pip install syllables\n\n# Import python packages\nimport os, sys\nimport pandas as pd,numpy as np\nimport re\nimport spacy\nfrom os import walk\nimport shutil\nfrom shutil import copytree, ignore_patterns\nfrom spacy import displacy\nfrom collections import Counter\nimport en_core_web_sm\nnlp = en_core_web_sm.load()\nimport xml.etree.cElementTree as ET\nfrom collections import OrderedDict\nimport json\nfrom __future__ import unicode_literals, print_function\nimport plac\nimport random\nfrom pathlib import Path\nfrom spacy.util import minibatch, compounding\nfrom spacy.matcher import Matcher\n#from word2number import w2n\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nfrom datetime import date\nimport calendar\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom itertools import takewhile, tee\nimport itertools\nimport nltk, string\nfrom nltk.tokenize import word_tokenize\nfrom nltk.tag import pos_tag\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.tokenize import RegexpTokenizer\nfrom nltk.corpus import stopwords\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.cluster.util import cosine_distance\nimport networkx as nx\nfrom PIL import Image,ImageFilter\nimport textstat\nfrom textstat.textstat import textstatistics, easy_word_set, legacy_round \nimport syllables\nfrom IPython.display import display, HTML, Javascript\n\nbulletin_dir = \"..\/input\/cityofla\/CityofLA\/Job Bulletins\"\nadditional_data_dir = '..\/input\/cityofla\/CityofLA\/Additional data'\nSTOP_WORDS = stopwords.words('english')\n\n%matplotlib inline","a308e689":"feminine_coded_words = [\n    \"agree\",\n    \"affectionate\",\n    \"child\",\n    \"cheer\",\n    \"collab\",\n    \"commit\",\n    \"communal\",\n    \"compassion\",\n    \"connect\",\n    \"considerate\",\n    \"cooperat\",\n    \"co-operat\",\n    \"depend\",\n    \"emotiona\",\n    \"empath\",\n    \"feel\",\n    \"flatterable\",\n    \"gentle\",\n    \"honest\",\n    \"interpersonal\",\n    \"interdependen\",\n    \"interpersona\",\n    \"inter-personal\",\n    \"inter-dependen\",\n    \"inter-persona\",\n    \"kind\",\n    \"kinship\",\n    \"loyal\",\n    \"modesty\",\n    \"nag\",\n    \"nurtur\",\n    \"pleasant\",\n    \"polite\",\n    \"quiet\",\n    \"respon\",\n    \"sensitiv\",\n    \"submissive\",\n    \"support\",\n    \"sympath\",\n    \"tender\",\n    \"together\",\n    \"trust\",\n    \"understand\",\n    \"warm\",\n    \"whin\",\n    \"enthusias\",\n    \"inclusive\",\n    \"yield\",\n    \"share\",\n    \"sharin\"\n]\n\nmasculine_coded_words = [\n    \"active\",\n    \"adventurous\",\n    \"aggress\",\n    \"ambitio\",\n    \"analy\",\n    \"assert\",\n    \"athlet\",\n    \"autonom\",\n    \"battle\",\n    \"boast\",\n    \"challeng\",\n    \"champion\",\n    \"compet\",\n    \"confident\",\n    \"courag\",\n    \"decid\",\n    \"decision\",\n    \"decisive\",\n    \"defend\",\n    \"determin\",\n    \"domina\",\n    \"dominant\",\n    \"driven\",\n    \"fearless\",\n    \"fight\",\n    \"force\",\n    \"greedy\",\n    \"head-strong\",\n    \"headstrong\",\n    \"hierarch\",\n    \"hostil\",\n    \"impulsive\",\n    \"independen\",\n    \"individual\",\n    \"intellect\",\n    \"lead\",\n    \"logic\",\n    \"objective\",\n    \"opinion\",\n    \"outspoken\",\n    \"persist\",\n    \"principle\",\n    \"reckless\",\n    \"self-confiden\",\n    \"self-relian\",\n    \"self-sufficien\",\n    \"selfconfiden\",\n    \"selfrelian\",\n    \"selfsufficien\",\n    \"stubborn\",\n    \"superior\",\n    \"unreasonab\"\n]\n\nhyphenated_coded_words = [\n    \"co-operat\",\n    \"inter-personal\",\n    \"inter-dependen\",\n    \"inter-persona\",\n    \"self-confiden\",\n    \"self-relian\",\n    \"self-sufficien\"\n]","a10bc19d":"def clean_up_word_list(ad_text):\n    cleaner_text = ''.join([i if ord(i) < 128 else ' '\n        for i in ad_text])\n    cleaner_text = re.sub(\"[\\\\s]\", \" \", cleaner_text, 0, 0)\n    cleaned_word_list = re.sub(u\"[\\.\\t\\,\u201c\u201d\u2018\u2019<>\\*\\?\\!\\\"\\[\\]\\@\\':;\\(\\)\\.\/&]\",\n        \" \", cleaner_text, 0, 0).split(\" \")\n    word_list = [word.lower() for word in cleaned_word_list if word != \"\"]\n    return de_hyphen_non_coded_words(word_list)\n\ndef de_hyphen_non_coded_words(word_list):\n    for word in word_list:\n        if word.find(\"-\"):\n            is_coded_word = False\n            for coded_word in hyphenated_coded_words:\n                if word.startswith(coded_word):\n                    is_coded_word = True\n            if not is_coded_word:\n                word_index = word_list.index(word)\n                word_list.remove(word)\n                split_words = word.split(\"-\")\n                word_list = (word_list[:word_index] + split_words +\n                    word_list[word_index:])\n    return word_list\n\ndef assess_coding(row):\n    coding = ''\n    coding_score = row[\"feminine_ad_word_count\"] - row[\"masculine_ad_word_count\"]\n    if coding_score == 0:\n        if row[\"feminine_ad_word_count\"]>0:\n            coding = \"neutral\"\n        else:\n            coding = \"empty\"\n    elif coding_score > 3:\n        coding = \"strongly feminine\"\n    elif coding_score > 0:\n        coding = \"feminine\"\n    elif coding_score < -3:\n        coding = \"strongly masculine\"\n    else:\n        coding = \"masculine\"\n    return coding\n\ndef assess_coding_txt(fem_word_count, masc_word_count):\n    coding = ''\n    coding_score = fem_word_count - masc_word_count\n    if coding_score == 0:\n        if fem_word_count>0:\n            coding = \"neutral\"\n        else:\n            coding = \"empty\"\n    elif coding_score > 3:\n        coding = \"strongly feminine\"\n    elif coding_score > 0:\n        coding = \"feminine\"\n    elif coding_score < -3:\n        coding = \"strongly masculine\"\n    else:\n        coding = \"masculine\"\n    return coding\n\ndef find_and_count_coded_words(advert_word_list, gendered_word_list):\n    gender_coded_words = [word for word in advert_word_list\n        for coded_word in gendered_word_list\n        if word.startswith(coded_word)]\n    return (\",\").join(gender_coded_words), len(gender_coded_words)\n\ndef assessBias(txt):\n    words = clean_up_word_list(txt)\n    txt_masc_coded_words, masc_word_count = find_and_count_coded_words(words, masculine_coded_words)\n    txt_fem_coded_words, fem_word_count = find_and_count_coded_words(words, feminine_coded_words)\n    coding = assess_coding_txt(fem_word_count, masc_word_count)\n#     print('List of masculine words found:')\n#     print(txt_masc_coded_words)\n#     print('\\nList of feminine words found:')\n#     print(txt_fem_coded_words)\n    return coding, txt_masc_coded_words, txt_fem_coded_words\n\ndef getWordsFrame(words):\n    words = pd.Series(words.split(','))\n    words = words.value_counts()\n    df = pd.DataFrame({'words':words.index, 'count':words.values})\n    df.index = np.arange(1,len(df)+1)\n    return df\n\ndef getResult(filename, bulletin_dir):\n    CONTENT = ''\n    jobs_list = []\n    for file_name in os.listdir(bulletin_dir):\n        if file_name == filename:\n            with open(os.path.join(bulletin_dir,file_name), encoding = \"ISO-8859-1\") as f:\n                CONTENT = f.read()\n            break\n    \n    bias_code, masc_words, fem_words = assessBias(CONTENT)\n    df_masc_words = getWordsFrame(masc_words)\n    df_fem_words = getWordsFrame(fem_words)  \n\n    dfScores = pd.DataFrame([\"flesch_reading_ease\",\"flesch_kincaid_grade\",\n                            \"smog_index\",\"coleman_liau_index\",\"automated_readability_index\",\n                            \"dale_chall_readability_score\",\"gunning_fog\"], columns = ['Label'])\n    dfScores['Values'] = [\n        textstat.flesch_reading_ease(CONTENT),\n        textstat.flesch_kincaid_grade(CONTENT),\n        textstat.smog_index(CONTENT),\n        textstat.coleman_liau_index(CONTENT),\n        textstat.automated_readability_index(CONTENT),\n        textstat.dale_chall_readability_score(CONTENT),\n        textstat.gunning_fog(CONTENT)\n    ]\n    dfScores.index = np.arange(1,len(dfScores)+1)\n    if CONTENT!='':\n        result = {\n            \"file_name\": filename,\n            \"bias_code\": bias_code,\n            \"df_masc_words\": df_masc_words,\n            \"df_fem_words\": df_fem_words,\n            \"dfScores\": dfScores\n        }\n    else:\n        result = {\"FNF\": \"File not found in the directory.\"}\n    return result\n\ndef viewOutput(response):\n    if 'FNF' not in response.keys():\n        display(HTML(\"<center><h1><b>File : \" + response[\"file_name\"] + \"<\/b><\/h1><\/center>\"))\n        display(HTML(\"Content of the file is found to be : <b>\"+response[\"bias_code\"].title()+\"<\/b> coded.\"))\n        display(HTML(\"<b>List of masculine words in the file:<\/b>\"))\n        display(response[\"df_masc_words\"])\n        display(HTML(\"<b>List of feminine words in the file:<\/b>\"))\n        display(response[\"df_fem_words\"])\n        display(response[\"dfScores\"])\n    else:\n        display(HTML(response[\"FNF\"]))","3d9dbd45":"response = getResult('AIRPORT ENGINEER 7256 070618.txt', bulletin_dir)\nviewOutput(response)","f21e5b1e":"response = getResult('AIRPORT MANAGER 7260 120216.txt', bulletin_dir)\nviewOutput(response)","a8c9bc4c":"response = getResult('Incorrect File Name', bulletin_dir)\nviewOutput(response)","acb52d94":"response = getResult('BOILERMAKER SUPERVISOR 3737 101714.txt', bulletin_dir)\nviewOutput(response)","14d7256e":"# Data Science for Good: City of Los Angeles\n\n[Main Kernel](https:\/\/www.kaggle.com\/tyagit3\/dsfg-cityofla-analysis-and-solution)\n\n## Application (Measure Biasedness & Readability)\n\n### Features:\n1. Provided a filename from the bulletin's folder, biasedness and different readability scores will be displayed.\n\n\n### Readability\n\n1. **Readability** is the ease with which a reader can understand a written text. In natural language, the readability of text depends on its content (the complexity of its vocabulary and syntax) and its presentation (such as typographic aspects like font size, line height, and line length). Researchers have used various factors to measure readability, such as\n<pre>\nSpeed of perception\nPerceptibility at a distance\nPerceptibility in peripheral vision\nVisibility\nReflex blink technique\nRate of work (reading speed)\nEye movements\nFatigue in reading\n<\/pre>\n\n2. **Popular readability formulas**\n<pre>\nThe Flesch formulas\nThe Dale\u2013Chall formula\nThe Gunning fog formula\nMcLaughlin's SMOG formula\n<\/pre>\n\n3. **Using readability formulas**\n<pre>\nExcerpt from Wiki:\nWhile experts agree that the formulas are highly accurate for grading the readability of existing texts, they are not so useful for creating or modifying them. The two variables used in most formulas, a sentence and a vocabulary, are the ones most directly related to reading difficulty, but they are not the only ones.\nWriting experts have warned that an attempt to simplify the text only by changing the length of the words and sentences may result in text that is more difficult to read. All the variables are tightly related. If one is changed, the others must also be adjusted, including approach, voice, person, tone, typography, design, and organization.\nWriting for a class of readers other than one's own is very difficult. It takes training, method, and practice. Among those who are good at this are writers of novels and children's books. The writing experts all advise that, besides using a formula, observe all the norms of good writing, which are essential for writing readable texts. Writers should study the texts used by their audience and their reading habits. This means that for a 5th-grade audience, the writer should study and learn good quality 5th-grade materials.\n<\/pre>\n\n4. **How to interpret raw scores**\n<br>\n<img src='https:\/\/i.imgur.com\/SzBUK21.png'>\n<img src='https:\/\/i.imgur.com\/eEB3YcE.png'>\n\n[Reference](https:\/\/en.wikipedia.org\/wiki\/Readability)","fc5dd30a":"## Example executions:"}}