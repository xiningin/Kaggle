{"cell_type":{"ab1fa051":"code","4f19c6c0":"code","046828ae":"code","08365474":"code","a6ddbb21":"markdown","858e693e":"markdown","0a0ad322":"markdown","56a92d22":"markdown"},"source":{"ab1fa051":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os, sys\nfrom IPython.display import display\nfrom IPython.display import Image as _Imgdis\nfrom PIL import Image\nimport numpy as np\nfrom time import time\nfrom time import sleep\nfrom subprocess import check_output\nfrom scipy import ndimage\nfrom keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\n\nprint(os.listdir(\"..\/input\/rsna-bone-age\"))\nprint(check_output([\"ls\", \"..\/input\/rsna-bone-age\"]).decode(\"utf8\"))","4f19c6c0":"folder = \"..\/input\/rsna-bone-age\/boneage-training-dataset\/boneage-training-dataset\"\nfolder_test = \"..\/input\/rsna-bone-age\/boneage-test-dataset\/boneage-test-dataset\"\n\nonlyfiles = [f for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))]\nonlyfiles_test = [f for f in os.listdir(folder_test) if os.path.isfile(os.path.join(folder_test, f))]\n \nprint(\"Se recomp\u00edlaron {0} imagenes del folder de training set\".format(len(onlyfiles)))\nprint(\"Imagen de ejemplo: \")\n\nprint(onlyfiles[45])\ndisplay(_Imgdis(filename=folder + \"\/\" + onlyfiles[45], width=240, height=320))\n    \n","046828ae":"train_files = []\ntest_files = []\n\nfor _file in onlyfiles:\n    train_files.append(_file)\nprint(\"Hay %d en el array de training\" % len(train_files))\nimg_df = pd.DataFrame(data = train_files, index=None, columns = None)\ncsv_df = pd.read_csv(\"..\/input\/rsna-bone-age\/boneage-training-dataset.csv\")\ndf_train = pd.concat([img_df,csv_df],axis = 1)\ndf_train = df_train.rename(index=str, columns={0: \"file\"})\n\nfor _file in onlyfiles_test:\n    test_files.append(_file)\nprint(\"Hay %d en el array de test\" % len(test_files))\nimg_df_test = pd.DataFrame(data = test_files, index=None, columns = None)\ncsv_df_test = pd.read_csv(\"..\/input\/rsna-bone-age\/boneage-test-dataset.csv\")\ndf_test = pd.concat([img_df_test,csv_df_test],axis = 1)\ndf_test = df_test.rename(index=str, columns={0: \"file\"})\n\n#print (df_test)","08365474":"from keras.models import Sequential\nfrom keras.layers import Convolution2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.preprocessing.image import ImageDataGenerator\n\nmodel = Sequential()\n\nmodel.add(Convolution2D(filters = 32, \n                        kernel_size = (3, 3),\n                        input_shape = (240, 320, 3),\n                        activation = 'relu'))\n\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\n\nmodel.add(Convolution2D(32, 3, 3, activation = 'relu'))\n\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(units = 128, activation = 'relu'))\n\nmodel.add(Dense(units = 1, activation = 'sigmoid'))\n\nmodel.compile(optimizer = 'adam' ,\n              loss = 'binary_crossentropy', \n              metrics = ['accuracy'])\n\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.1, \n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\nfolder = \"..\/input\/rsna-bone-age\/boneage-training-dataset\"\nfolder_test = \"..\/input\/rsna-bone-age\/boneage-test-dataset\"\ntraining_set = train_datagen.flow_from_directory(folder,\n                                                 target_size = (240, 320),\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical')\n\ntest_set = test_datagen.flow_from_directory(folder_test,\n                                            target_size = (240, 320),\n                                            batch_size = 32,\n                                            class_mode = 'categorical')\n\nmodel.fit_generator(training_set,\n                    steps_per_epoch = 100,\n                    epochs = 15,\n                    validation_data = test_set,\n                    validation_steps = 20)","a6ddbb21":"Analisis exploratorio y limpieza de datos (breve)\n---","858e693e":"Dependencias\n---","0a0ad322":"Integrantes:\n* Ra\u00fal Monzon 17014\n* David Valenzuela 171001\n* Marcos Gutierrez\n* Fernando Hengstenberg 17699\n\n\n# <center> Redes Neuronales Convolucionales (CNN) <\/center>","56a92d22":"Guardamos todas las imagenes en un Dataframe y lo juntamos con su csv respectivo"}}