{"cell_type":{"0e58e581":"code","a1e5d869":"code","1cd22b53":"code","ebf709aa":"code","d9ffb9c6":"code","e3afb0b0":"code","2d282c43":"code","d227299f":"code","f8f3b19b":"code","ab75d7ff":"code","77c9d375":"code","d0f5c0ca":"code","b7824a8e":"code","39408c93":"code","5bd97a95":"code","7ce06397":"code","2481cd85":"code","1ff4da28":"code","89de3239":"code","e47cd5ae":"code","48efbc61":"code","df9de550":"code","5515266a":"markdown","8777dacf":"markdown","9905e751":"markdown","4e404e92":"markdown","d012ebeb":"markdown","7c6645f6":"markdown"},"source":{"0e58e581":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\ntraining = pd.read_csv('..\/input\/train.csv')\ntesting = pd.read_csv('..\/input\/test.csv')\n","a1e5d869":"\n\n# dataframe.size \nsize = training.size \nprint(\"*** size = \",size)  \n# dataframe.shape \nshape = training.shape \nprint(\"**** shape =\",shape)  \n# dataframe.ndim \ndimension = training.ndim \n\nprint(\"**** Dimension\",dimension)\nprint(\"---  Description -----\")\ntraining.describe(include='all')\nprint(\"*** Column names :\", list(training.columns)) \nprint(\"----- 5 samples -----\")\ntraining.sample(5)\nlist(training.columns) \ntraining['YrSold'].value_counts().plot.bar(title=\"Year Sold\")","1cd22b53":"training.dtypes","ebf709aa":"\n\nprint(training.isnull().sum())\n","d9ffb9c6":"categorical_features = {'Id', 'MSSubClass', 'MSZoning','Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2', 'BsmtFinSF2', 'Heating', 'HeatingQC', 'CentralAir', \n                         'Electrical', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual', 'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageCars','GarageQual', 'GarageCond', 'PavedDrive', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC', 'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType', 'SaleCondition'}\nfor feature in categorical_features:\n    training[feature] = training[feature].astype(\"category\")\n    \n#training.dtypes\ntraining.get_dtype_counts()","e3afb0b0":"training['TotRmsAbvGrd'].value_counts().plot.bar(title=\"Total Room Count\")","2d282c43":"training['BedroomAbvGr'].value_counts().plot.bar(title=\"Total Bedroom Count\")","d227299f":"plt.figure(figsize=(25, 10))\ntraining['YearBuilt'].value_counts().plot.bar(title=\"Year built\")","f8f3b19b":"import pylab \nprint(\"*** SalePrice :\")\nplt.hist(training.SalePrice,bins='auto')\nprint(\"*** Log(SalePrice)\")\nplt.hist(np.log(training.SalePrice),bins=200)\nprint(\"Pylab\")\npylab.hist(training.SalePrice, bins='auto')","ab75d7ff":"plt.scatter(training.YrSold,training.SalePrice)","77c9d375":"plt.boxplot(training.TotRmsAbvGrd)","d0f5c0ca":"import  seaborn as sb\nplt.figure(figsize=(20, 8))\nsb.distplot(training['SalePrice'], color='g', bins=30, hist_kws={'alpha': 0.4});","b7824a8e":"plt.figure(figsize=(20, 8))\nsb.distplot(np.log(training['SalePrice']), color='g', bins=60, hist_kws={'alpha': 0.4});","39408c93":"print(\"Sale Price Distribution\",training['SalePrice'].describe())","5bd97a95":"plt.figure(figsize=(20, 8))\nsb.distplot(training['GrLivArea'], color='b', bins=60, hist_kws={'alpha': 0.4});","7ce06397":"training_num = training.select_dtypes(include = ['float64', 'int64'])\ntraining_num.hist(figsize=(16, 20), bins=50, xlabelsize=8, ylabelsize=8); # ; avoid having the matplotlib verbose informations","2481cd85":"from scipy.stats import skew\nfrom scipy.stats import kurtosis\nimport matplotlib.pyplot as plt\n\n#plt.style.use('ggplot')\n\n#np.var(training_num)\n\n#plt.hist(training_num, bins=60)\n\n","1ff4da28":"training_num.hist(bins=50,figsize=(20,15))\nplt.show()","89de3239":"print(\"*** mean :  \\n\", np.mean(training_num))\nprint(\"*** var  :  \\n\", np.var(training_num))\nprint(\"*** skew :  \\n\",skew(training_num))\nprint(\"*** kurt :  \\n\",kurtosis(training_num))","e47cd5ae":"training_num.plot.hist(alpha=0.5, bins=15, grid=True, legend=None)  # Pandas helper function to plot a hist. Uses matplotlib under the hood.\nplt.xlabel(\"Feature value\")\nplt.title(\"Histogram\")\nplt.show()","48efbc61":"# Second attemp to balance distribution using log\ntraining_sqrt = training_num.apply(np.sqrt)   # pd.DataFrame.apply accepts a function to apply to each column of the data\ntraining_sqrt.plot.hist(alpha=0.5, bins=15, grid=True, legend=None)\nplt.xlabel(\"Feature value\")\nplt.title(\"Histogram of Square Root\")\nplt.show()","df9de550":"from pandas import scatter_matrix\nsns.set()\nfeature = ['SalePrice','GrLivArea']\nscatter_matrix(training_num[feature],figsize=(15,8))","5515266a":"*** Assigning categorial variables ","8777dacf":"***  checking the datatypes of each feature","9905e751":"Checking missing values.\nnon-value is a valid data","4e404e92":"Distribution of the data is usually represented with a histogram","d012ebeb":" graph show skewedness .","7c6645f6":"For data analysis, Sale Price is normalised by taking log of Sale Price, we should have a more evenly distributed graph."}}