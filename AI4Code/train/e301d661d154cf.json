{"cell_type":{"6ab52eb8":"code","8798a023":"code","ddbf2cd4":"code","32e1586e":"code","c1d31d10":"code","f497e448":"code","ae0c7ca4":"code","2bd9a36b":"code","e9f0b726":"code","4eaccd83":"code","063196e7":"code","6068fe05":"code","1e1e0f0c":"code","c949712c":"code","fb9ac854":"code","0c3ea6c8":"code","15652826":"code","8135b996":"code","3a91e3c8":"code","35a98e48":"code","2e02860b":"code","805b87cd":"code","03e108a5":"code","317f233b":"code","83fa8060":"code","f04377ca":"code","b11582eb":"code","76603d0d":"code","225941c3":"code","b251d0ea":"code","166844e4":"code","a4017371":"code","16e50ed9":"code","eed834e4":"code","716383d5":"code","4cfb0571":"code","f7c262b8":"code","cee8cec1":"code","45d7a5d9":"code","f7e05779":"code","1208db9b":"code","6fddbebd":"code","34fbe7cc":"code","a2728f42":"code","f9f50ffd":"code","d0934cda":"code","ab9dfa52":"code","a658e7f5":"code","a41fa9f8":"code","955e08d8":"code","1bf5c5f4":"code","5453c599":"code","1fd334d1":"code","4a817d63":"code","849275a7":"code","5f079577":"code","88cea31c":"code","2968bbd9":"code","3d2d195e":"code","7f555c5d":"code","b023f3bb":"code","02bacc02":"code","5152191e":"code","7e5d8258":"code","043be4d7":"code","d5505a02":"code","935c54f6":"code","23418a07":"code","646de505":"markdown","51fa0d1f":"markdown","a07545fb":"markdown","3e919aa0":"markdown","8ec29c7e":"markdown","82d36be7":"markdown","91353310":"markdown","e6fdeb22":"markdown","a4e7efd8":"markdown","addfd853":"markdown","d83f7f59":"markdown","511dc4a4":"markdown","3cbdc592":"markdown","00d156b1":"markdown","98bd221b":"markdown"},"source":{"6ab52eb8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8798a023":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","ddbf2cd4":"train_data = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Training.csv\")\nMatch_2020 = pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv')\nMatch_2008_19 = pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv')\nsquad_2020 = pd.read_csv('\/kaggle\/input\/ipl-2020-player-performance\/IPL 2020 Squads.csv',encoding=\"latin1\")","32e1586e":"train_data.head()","c1d31d10":"Match_2020.head()","f497e448":"Match_2008_19.head()","ae0c7ca4":"Match_2008_19.shape","2bd9a36b":"Match_2008_19.info()","e9f0b726":"Match_2008_19.describe()","4eaccd83":"Match_2008_19['match_id'].max()","063196e7":"len(Match_2008_19['season'].unique())","6068fe05":"Match_2008_19.iloc[Match_2008_19['win_by_runs'].idxmax()]","1e1e0f0c":"Match_2008_19.iloc[Match_2008_19['win_by_runs'].idxmax()]['winner']","c949712c":"Match_2008_19.iloc[Match_2008_19['win_by_wickets'].idxmax()]['winner']","fb9ac854":"Match_2008_19.iloc[Match_2008_19[Match_2008_19['win_by_runs'].ge(1)].win_by_runs.idxmin()]['winner']","0c3ea6c8":"Match_2008_19.iloc[Match_2008_19[Match_2008_19['win_by_wickets'].ge(1)].win_by_wickets.idxmin()]","15652826":"sns.countplot(x='season', data=Match_2008_19)\nplt.show()","8135b996":"data = Match_2008_19.winner.value_counts()\nsns.barplot(y = data.index, x = data, orient='h')","3a91e3c8":"top_players = Match_2008_19.player_of_match.value_counts()[:10]\n#sns.barplot(x=\"day\", y=\"total_bill\", data=tips)\nfig, ax = plt.subplots()\nax.set_ylim([0,20])\nax.set_ylabel(\"Count\")\nax.set_title(\"Top player of the match Winners\")\n#top_players.plot.bar()\nsns.barplot(x = top_players, y = top_players.index , orient='h'); #palette=\"Blues\");\nplt.show()","35a98e48":"ss = Match_2008_19['toss_winner'] == Match_2008_19['winner']\nss.groupby(ss).size()","2e02860b":"sns.countplot(Match_2008_19['toss_winner'] == Match_2008_19['winner'])\nsns.countplot(ss)","805b87cd":"train_data.columns","03e108a5":"train_data[[\"match_id\",\"Player_name\"]] = train_data.Id.str.split(\"_\",expand=True)\ntrain_data[\"match_id\"].astype(\"int64\")\ntrain_data.drop(['Id'],axis=1,inplace=True)","317f233b":"train_data = train_data.reindex(columns=['match_id', 'Player_name', 'Runs', 'Boundaries', 'Six', 'Fifty', 'Hundred', 'Duck', \n                         'Batting_Points', 'Wickets', '4W_Haul', '5W_Haul', 'Maidens','Bowling_Points', \n                         'Total Points'])","83fa8060":"train_data.head()","f04377ca":"Match_2008_19.columns","b11582eb":"Match_2008_19.head()","76603d0d":"Match_2008_19.drop(columns=['player_of_match', 'venue', 'city', 'umpire1', 'umpire2', 'umpire3', 'date', 'toss_winner', 'toss_decision', \"dl_applied\", \"win_by_runs\", \"win_by_wickets\"],\n             axis=1,inplace=True)\nMatch_2008_19.head()","225941c3":"train_data[\"match_id\"] = train_data[\"match_id\"].astype(int)","b251d0ea":"train_data.info()","166844e4":"# merge two dataset on the match_id column.\nmerge_data = pd.merge(left=train_data, right=Match_2008_19, left_on=\"match_id\", right_on=\"match_id\")","a4017371":"merge_data.isnull().sum()","16e50ed9":"merge_data.shape","eed834e4":"merge_data.dropna(how=\"any\",axis=0,inplace=True)","716383d5":"merge_data.shape","4cfb0571":"# Correlation heatmap\n# Finding correlation between independent and dependent variable.\nplt.figure(figsize =(14, 14))\nsns.heatmap(merge_data.corr(), annot=True, cmap= \"YlGnBu\")\nplt.show()","f7c262b8":"merge_data.drop(columns=['Runs','Boundaries','Wickets'],axis=1,inplace=True)","cee8cec1":"# Finding correlation between independent and dependent variable.\nplt.figure(figsize =(14, 14))\nsns.heatmap(merge_data.corr(), annot=True, cmap= \"YlGnBu\")\nplt.show","45d7a5d9":"merge_data[\"result\"].value_counts()","f7e05779":"result_ = merge_data.groupby([\"result\"])[\"match_id\"].nunique()\nresult_","1208db9b":"merge_data.drop(columns=[\"Player_name\",\"team1\",\"team2\",\"winner\"],axis=1,inplace=True)","6fddbebd":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\nmerge_data[\"result\"] = encoder.fit_transform(merge_data[\"result\"])","34fbe7cc":"iqr = np.percentile(merge_data[\"Bowling_Points\"],97)\nf = merge_data[\"Bowling_Points\"] > iqr\nmerge_data.loc[f,:] = iqr","a2728f42":"iqr = np.percentile(merge_data[\"Batting_Points\"],91)\nf = merge_data[\"Batting_Points\"] > iqr\nmerge_data.loc[f,:] = iqr","f9f50ffd":"# Top 10 most score run players\ntrain_data.sort_values(\"Runs\", ascending=False)[[\"match_id\",\"Runs\"]].head(10)","d0934cda":"X = merge_data[['Six', 'Fifty', 'Hundred', 'Duck', 'Batting_Points','4W_Haul', '5W_Haul', 'Maidens', 'Bowling_Points',\n            'season', 'result']]\ny = merge_data[\"Total Points\"]","ab9dfa52":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,train_size=0.8,test_size=0.2,random_state=0)","a658e7f5":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","a41fa9f8":"from sklearn.linear_model import Lasso\n\nl_model = Lasso()\nl_model.fit(X_train,y_train)\nl_model_prediction = l_model.predict(X_test)\nprint(\"mean_absolute_error:\",mean_absolute_error(y_test,l_model_prediction))\nprint(\"mean_squared_error:\",mean_squared_error(y_test,l_model_prediction))\nprint(\"r2_score:\",r2_score(y_test,l_model_prediction))","955e08d8":"from sklearn.ensemble import RandomForestRegressor\n\nrfr_model = RandomForestRegressor()\nrfr_model.fit(X_train,y_train)\nrfr_model_prediction = rfr_model.predict(X_test)\nprint(\"mean_absolute_error:\",mean_absolute_error(y_test,rfr_model_prediction))\nprint(\"mean_squared_error:\",mean_squared_error(y_test,rfr_model_prediction))\nprint(\"r2_score:\",r2_score(y_test,rfr_model_prediction))","1bf5c5f4":"X['result'].unique()","5453c599":"top_player = train_data.nlargest(10, ['Runs'])\n\nfig_dims=(20,5)\n\nplt.subplots(figsize=fig_dims)\nplt.bar(top_player['match_id'], top_player['Runs'], color='Green')","1fd334d1":"# Top 10 most six players\nmerge_data.sort_values(\"Six\", ascending=False)[[\"match_id\",\"Six\"]].head(10)","4a817d63":"top_player = train_data.nlargest(10, ['Six'])\n\nfig_dims=(20,5)\n\nplt.subplots(figsize=fig_dims)\nplt.bar(top_player['match_id'], top_player['Six'], color='Yellow')","849275a7":"# Top 10 most Wickets players\ntrain_data.sort_values(\"Wickets\", ascending=False)[[\"match_id\",\"Wickets\"]].head(10)","5f079577":"top_player = train_data.nlargest(10, ['Wickets'])\n\nfig_dims=(20,5)\n\nplt.subplots(figsize=fig_dims)\nplt.bar(top_player['match_id'], top_player['Wickets'], color='Red')","88cea31c":"#Top 10 players with the highest points Value.\ntrain_data.sort_values(\"Total Points\", ascending=False)[[\"match_id\",\"Total Points\"]].head(10)","2968bbd9":"top_player = train_data.nlargest(10, ['Total Points'])\n\nfig_dims=(20,5)\n\nplt.subplots(figsize=fig_dims)\nplt.bar(top_player['match_id'], top_player['Total Points'], color='Skyblue')","3d2d195e":"# Looking at number of matches played by each player\nMatch_play = train_data.Player_name.value_counts()\nMatch_play","7f555c5d":"data = train_data[['match_id','Player_name','Total Points']]\ndata = data.groupby(['match_id','Player_name']).sum().reset_index()\ndata","b023f3bb":"sample_data = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/sample_submission.csv\")\nsample_data[['match_id', 'Player_name']] = sample_data['Id'].str.split(\"_\", expand = True,)\nsample_data","02bacc02":"sample_data['Player_name'].isnull().values.sum()","5152191e":"players = sample_data['Player_name'].unique().tolist()\ndf2 = data[data['Player_name'].isin(players)]\ndf2","7e5d8258":"df['match_id'] = sample_data['match_id']\ndf['Player_name'] = sample_data['Player_name']\ndf['Total Points'] = data[\"Total Points\"]\ndf['Id'] = df['match_id']+'_'+df['Player_name']\ndf","043be4d7":"df.isnull().values.sum()","d5505a02":"dt=pd.DataFrame()\ndt['Id'] = df['Id']\ndt['Total Points'] = df['Total Points'] \ndt","935c54f6":"dt.to_csv('score.csv', index=False)","23418a07":"from IPython.display import FileLink\nFileLink('score.csv')","646de505":"# 1) How many matches we\u2019ve got in the dataset?","51fa0d1f":"# 7) The most successful IPL Team","a07545fb":"Looks like, Toss winning actually helps in Match winning \u2014 or to be statistically right, we could say there\u2019s a correlation between Toss Winning and Match Winning and so we can assume that it helps.","3e919aa0":"# 6) Which Team had won by minimum wickets?","8ec29c7e":"# 2) How many seasons we\u2019ve got in the dataset?","82d36be7":"Runs, Boundaries, Batting_Points are highly correlated with each other. so,here i will drop 2 column Rund and Boundaries. same for the Wicket and Bowling_points.","91353310":"# 3) Which Team had won by maximum runs?","e6fdeb22":"# 8) Top player of the match Winners","a4e7efd8":"# 5) Which Team had won by (closest margin) minimum runs?","addfd853":"# 4) Which Team had won by maximum wicket?","d83f7f59":"**Part1 :  Exploratory Data Analysis(EDA)**","511dc4a4":"# 9) Has Toss-winning helped in Match-winning?","3cbdc592":"The Indian Premier League is a professional Twenty20 cricket league in India usually contested between March and May of every year by eight teams representing eight different cities or states in India. The league was founded by the Board of Control for Cricket in India in 2007","00d156b1":"Batting_points,Bowling_Points have some outliars.","98bd221b":"# **Model Training**"}}