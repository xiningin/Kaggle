{"cell_type":{"ba1f9daa":"code","76bbc27d":"code","10a6651c":"code","93c53c2d":"code","375f0ea1":"code","fcd7dcc3":"code","bbce3610":"code","526e1c8f":"code","a6939ac8":"code","0100553e":"code","d5e06354":"code","63d4b126":"code","583a1413":"code","2a5a8877":"code","eb408177":"code","335921eb":"code","6af63fe6":"code","512cc455":"code","014574df":"code","4a885c97":"markdown"},"source":{"ba1f9daa":"import matplotlib.pyplot as plt\nimport numpy as np\n\nimport torch\nimport torchvision\nfrom  torchvision.datasets import ImageFolder \nimport torchvision.transforms as transforms\nfrom torch.utils.data import DataLoader\nimport torch.nn as nn\nimport torch.optim as optim\nfrom copy import deepcopy","76bbc27d":"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nprint(device)","10a6651c":"transform = transforms.Compose([\n      transforms.ToTensor(),\n      transforms.Normalize((0.5,0.5,0.5), (0.5, 0.5, 0.5)),\n])\n\ntrain_set = ImageFolder('..\/input\/sports-classification\/train', transform = transform)\ntest_set = ImageFolder('..\/input\/sports-classification\/test', transform = transform)\nvalid_set = ImageFolder('..\/input\/sports-classification\/valid', transform = transform)","93c53c2d":"print(len(train_set), len(test_set), len(valid_set))","375f0ea1":"batch_size = 16\nnum_classes = 73","fcd7dcc3":"trainloader = DataLoader(train_set, batch_size = batch_size, shuffle =  True)\nvalloader = DataLoader(valid_set, batch_size = batch_size, shuffle = True)\ntestloader = DataLoader(test_set, batch_size = batch_size, shuffle = False)","bbce3610":"dataiter = iter(trainloader)\nimages, labels = dataiter.next()\n\nprint(images.shape)\n\nprint(images[1].shape)\nprint(labels[1].item())","526e1c8f":"def imshow(img, title):\n    npimg = img.numpy() \/ 2 + 0.5\n    plt.figure(figsize=(batch_size, 1))\n    plt.axis('off')\n    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n    plt.title(title)\n    plt.show()","a6939ac8":"def show_batch_images(dataloader):\n    images, labels = next(iter(dataloader))\n    img = torchvision.utils.make_grid(images)\n    imshow(img, title=[str(x.item()) for x in labels])","0100553e":"for i in range(5):\n    show_batch_images(trainloader)","d5e06354":"!pip3 install torch==1.2.0+cu92 torchvision==0.4.0+cu92 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html","63d4b126":"from torchvision import models","583a1413":"!pip install efficientnet_pytorch","2a5a8877":"from efficientnet_pytorch import EfficientNet\nmodel = EfficientNet.from_pretrained('efficientnet-b6')","eb408177":"def evaluation(dataloader, model):\n    total, correct = 0, 0\n    for data in dataloader:\n        inputs, labels = data\n        inputs, labels = inputs.to(device), labels.to(device)\n        outputs = model(inputs)\n        _, pred = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (pred == labels).sum().item()\n    return 100 * correct \/ total","335921eb":"iterations = []\naccuracies = []\nlosses = []\n\ntrainloader = DataLoader(train_set, batch_size = batch_size, shuffle =  True)\nvalloader = DataLoader(valid_set, batch_size = batch_size, shuffle = True)\ntestloader = DataLoader(test_set, batch_size = batch_size, shuffle = True)\n\nfor param in model.parameters():\n    param.required_grad = False\n\nin_features = model._fc.in_features\nmodel._fc = nn.Linear(in_features, num_classes)\n\nmodel = model.to(device)\nloss_fn = nn.CrossEntropyLoss()\nopt = optim.Adam(model.parameters(), lr = 0.0001)\n\nloss_epoch_arr = []\nmax_epochs = 4\n\nmin_loss = 1000000\n\nn_iters = np.ceil(10436\/batch_size) * max_epochs\niters = 0\n\nfor epoch in range(max_epochs):\n\n    for i, data in enumerate(trainloader, 0):\n        iters += 1\n        inputs, labels = data\n        inputs, labels = inputs.to(device), labels.to(device)\n\n        opt.zero_grad()\n\n        outputs = model(inputs)\n        loss = loss_fn(outputs, labels)\n        loss.backward()\n        opt.step()\n        \n        if iters % 100 == 0:\n            curAccuracy =  evaluation(valloader, model)\n            curLoss = loss.item()\n            iterations.append(iters)\n            accuracies.append(curAccuracy)\n            losses.append(curLoss)\n            print('Iteration: %d\/%d, Loss: %0.2f, Validation acc: %0.2f'%(iters, n_iters, curLoss, curAccuracy))\n        \n        del inputs, labels, outputs\n        torch.cuda.empty_cache()\n    loss_epoch_arr.append(loss.item())\n    print('Epoch: %d\/%d ended. Validation acc: %0.2f, Train acc: %0.2f' % (\n      epoch+1, max_epochs, \n      evaluation(valloader, model), \n      evaluation(trainloader, model)))\n    \nprint('\\n\\nTest Accuarcy on final model: %0.4f' % evaluation(testloader, model))","6af63fe6":"print('\\n\\nTest Accuarcy on final model: %0.4f' % evaluation(testloader, model))","512cc455":"plt.plot(iterations,losses)\nplt.xlabel('Iteration number')\nplt.ylabel('Loss')\nplt.title('Loss graph')\nplt.show()","014574df":"plt.plot(iterations,accuracies)\nplt.xlabel('Iteration number')\nplt.ylabel('Accuracy')\nplt.title('Accuracy graph')\nplt.show()","4a885c97":"### **AUTHOR - SRILEKHA SOMANCHI**\n### **MODEL - EfficientNet-B6** "}}