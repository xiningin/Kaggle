{"cell_type":{"0bc6b612":"code","a24ed919":"code","59411c32":"code","f1b18302":"code","14518598":"code","cdd9e417":"code","5ced636f":"code","654bb088":"code","05e90d83":"code","161a30e2":"code","38991acd":"code","9da195e9":"code","1d317eca":"code","41d21345":"code","33215b62":"code","6a36eae5":"code","a24c6872":"code","c51333c3":"code","7fe04c6b":"code","3f2ceea6":"code","e9a5a863":"code","3a437a1b":"code","d41dcbca":"code","42ac8b24":"code","e4d862b5":"code","c16024cc":"code","5d4574cd":"code","3a9c4902":"code","ff22da89":"code","53babfea":"code","3cb2efdb":"code","504f2f5e":"code","322f1130":"code","b4824958":"code","c65207b0":"code","7eecdf20":"code","72ee0b3b":"code","183cb145":"code","0886780b":"code","182a4d3f":"code","9d819b01":"code","e8026c3a":"code","80e77aee":"code","6c4d2276":"code","7141bca8":"markdown","a47cc105":"markdown","2531aaff":"markdown","fe1a094a":"markdown","a9eee52e":"markdown","c392fa90":"markdown","54219d03":"markdown","8474b635":"markdown","e78c4f55":"markdown","dc0d277c":"markdown","62f2647f":"markdown","32c66621":"markdown","50c18758":"markdown","81a260c5":"markdown","4ae07492":"markdown","cf2171ca":"markdown"},"source":{"0bc6b612":"import pandas as pd\nfrom sklearn import datasets","a24ed919":"df = pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')","59411c32":"df","f1b18302":"df.drop(df.columns[-1],axis=1,inplace=True)","14518598":"df.drop(df.columns[0],axis=1,inplace=True)","cdd9e417":"df","5ced636f":"df.describe()","654bb088":"df.info()","05e90d83":"df['diagnosis'].unique()","161a30e2":"set([1 if x =='M' else 0 for x in df['diagnosis']])","38991acd":"df['diagnosis'] = [1 if x =='M' else 0 for x in df['diagnosis']]","9da195e9":"df.info()","1d317eca":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\n%matplotlib inline\nwarnings.filterwarnings(action='ignore')","41d21345":"df.groupby('diagnosis').mean()","33215b62":"fig = plt.figure(figsize=(12,4))\nsns.heatmap(df.groupby('diagnosis').mean(), cmap='Blues')","6a36eae5":"from sklearn.preprocessing import MinMaxScaler","a24c6872":"df.columns[0]","c51333c3":"scaler = MinMaxScaler()\ntemp_y = df.iloc[:,0]\ntemp_X = df.iloc[:,1:]\nscaled_temp_X = scaler.fit_transform(temp_X)\n\nscaled_y = pd.DataFrame(temp_y, columns=[df.columns[0]])\nscaled_X = pd.DataFrame(scaled_temp_X, columns=df.columns[1:])","7fe04c6b":"scaled_df = pd.concat([scaled_X, scaled_y], axis=1)","3f2ceea6":"scaled_df","e9a5a863":"scaled_df.describe()","3a437a1b":"fig = plt.figure(figsize=(12,4))\nsns.heatmap(scaled_df.groupby('diagnosis').mean(), cmap='Blues');","d41dcbca":"from sklearn.preprocessing import StandardScaler","42ac8b24":"StScaler = StandardScaler()\ntemp_X = df.iloc[:,1:]\ntemp_y = df.iloc[:,0]\nStScaled_temp_X = StScaler.fit_transform(temp_X)\n\nStScaled_X = pd.DataFrame(StScaled_temp_X, columns=temp_X.columns)\ntemp_y = pd.DataFrame(temp_y, columns=[df.columns[0]])\nStScaled_df = pd.concat([StScaled_X, temp_y], axis=1)","e4d862b5":"StScaled_df","c16024cc":"StScaled_df.groupby('diagnosis').mean()","5d4574cd":"fig = plt.figure(figsize=(12,4))\nsns.heatmap(StScaled_df.groupby('diagnosis').mean(), cmap='Blues');","3a9c4902":"from sklearn.model_selection import train_test_split","ff22da89":"X = df.iloc[:,1:]\ny = df.iloc[:,0]","53babfea":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=24)","3cb2efdb":"from sklearn.linear_model import LogisticRegression","504f2f5e":"lr = LogisticRegression()\nlr.fit(X_train, y_train)\nprint('Train Score : {}'.format(lr.score(X_train, y_train)))\nprint('Test Score : {}'.format(lr.score(X_test, y_test)))","322f1130":"from sklearn.linear_model import SGDClassifier\n\nparams = []\ntrain_score_li = []\ntest_score_li = []\nbest_test_score = 0.1 # temp\nbest_param = 0\n\nfor i in range(100,10000,500):\n    sgdc = SGDClassifier(max_iter=i)\n    sgdc.fit(X_train, y_train)\n    \n    train_score = sgdc.score(X_train, y_train)\n    test_score = sgdc.score(X_test, y_test)\n    print('max iter = {}'.format(i))\n    print('Train Score : {}'.format(train_score))\n    print('Test Score : {}'.format(test_score))\n    print('-----')\n    params.append(i)\n    train_score_li.append(train_score)\n    test_score_li.append(test_score)\n    \n    if best_test_score < test_score:\n        best_test_score = test_score\n        best_param = i","b4824958":"plt.plot(params, train_score_li, '--r', label='Train Score')\nplt.plot(params, test_score_li, label='Test Score')\nplt.legend(loc='best')\nplt.show()","c65207b0":"print('Best Score(Test Set) : {}'.format(best_test_score))\nprint('Best parameter(max_iter) : {}'.format(best_param))","7eecdf20":"MMScaler = MinMaxScaler()\nMMScaled_X_train = MMScaler.fit_transform(X_train)\nMMScaled_X_test = MMScaler.transform(X_test)\n\nlr.fit(MMScaled_X_train, y_train)\nprint('Train Score : {}'.format(lr.score(MMScaled_X_train, y_train)))\nprint('Test Score : {}'.format(lr.score(MMScaled_X_test, y_test)))","72ee0b3b":"params_with_MMS = []\nMMScaled_train_score_li = []\nMMScaled_test_score_li = []\nbest_test_score_with_MMS = 0.1 # temp\nbest_param_with_MMS = 0\n\nfor i in range(100,10000,500):\n    sgdc = SGDClassifier(max_iter=i)\n    sgdc.fit(MMScaled_X_train, y_train)\n    \n    MMScaled_train_score = sgdc.score(MMScaled_X_train, y_train)\n    MMScaled_test_score = sgdc.score(MMScaled_X_test, y_test)\n    print('max iter = {}'.format(i))\n    print('Train Score : {}'.format(MMScaled_train_score))\n    print('Test Score : {}'.format(MMScaled_test_score))\n    print('-----')\n    params_with_MMS.append(i)\n    MMScaled_train_score_li.append(MMScaled_train_score)\n    MMScaled_test_score_li.append(MMScaled_test_score)\n    \n    if best_test_score_with_MMS < MMScaled_test_score:\n        best_test_score_with_MMS = MMScaled_test_score\n        best_param_with_MMS = i","183cb145":"plt.plot(params_with_MMS, MMScaled_train_score_li, '--r', label='Train Score')\nplt.plot(params_with_MMS, MMScaled_test_score_li, label='Test Score')\nplt.legend(loc='best')\nplt.show()","0886780b":"print('Best Score(Test Set) : {}'.format(best_test_score_with_MMS))\nprint('Best parameter(max_iter) : {}'.format(best_param_with_MMS))","182a4d3f":"StScaler = StandardScaler()\nStScaled_X_train = StScaler.fit_transform(X_train)\nStScaled_X_test = StScaler.transform(X_test)","9d819b01":"lr = LogisticRegression()\nlr.fit(StScaled_X_train, y_train)\nprint('Train Score : {}'.format(lr.score(StScaled_X_train, y_train)))\nprint('Test Score : {}'.format(lr.score(StScaled_X_test, y_test)))","e8026c3a":"params_with_StS = []\nStScaled_train_score_li = []\nStScaled_test_score_li = []\nbest_test_score_with_StS = 0.1 # temp\nbest_param_with_StS = 0\n\nfor i in range(100,10000,500):\n    sgdc = SGDClassifier(max_iter=i)\n    sgdc.fit(StScaled_X_train, y_train)\n    \n    StScaled_train_score = sgdc.score(StScaled_X_train, y_train)\n    StScaled_test_score = sgdc.score(StScaled_X_test, y_test)\n    print('max iter = {}'.format(i))\n    print('Train Score : {}'.format(StScaled_train_score))\n    print('Test Score : {}'.format(StScaled_test_score))\n    print('-----')\n    params_with_StS.append(i)\n    StScaled_train_score_li.append(StScaled_train_score)\n    StScaled_test_score_li.append(StScaled_test_score)\n    \n    if best_test_score_with_StS < StScaled_test_score:\n        best_test_score_with_StS = StScaled_test_score\n        best_param_with_StS = i","80e77aee":"plt.plot(params_with_StS, StScaled_train_score_li, '--r', label='Train Score')\nplt.plot(params_with_StS, StScaled_test_score_li, label='Test Score')\nplt.legend(loc='best')\nplt.show()","6c4d2276":"print('Best Score(Test Set) : {}'.format(best_test_score_with_StS))\nprint('Best parameter(max_iter) : {}'.format(best_param_with_StS))","7141bca8":"```\nStep 1. Data Load & EDA & Preprocessing\nStep 2. Visualization\n     2-a. Correlation Heatmap - raw data\n     2-b. Correlation Heatmap - MinMaxScaled data\n     2-c. Correlation Heatmap - StandardScaled data\nStep 3. Modeling & Prediction\n     3-a. Logistic Regression - raw data\n     3-b. SGDClassifier       - raw data\n     3-c. Logistic Regression - MinMaxScaled data\n     3-d. SGDClassifier       - MinMaxScaled data\n     3-e. Logistic Regression - StandardScaled data\n     3-f. SGDClassifier       - StandardScaled data\nStep 4. Conclusion\n```","a47cc105":"### 3-b. SGDClassifier - raw data","2531aaff":"### 3-d. SGDClassifier - MinMaxScaled data","fe1a094a":"### 2-a. Correlation Heatmap - Raw Data","a9eee52e":"### 3-c. Logistic Regression - MinMaxScaled data","c392fa90":"### 3-e. Logistic Regression - StandardScaled data","54219d03":"# Breast Cancer Prediction - 3 types(Basic, MinMaxScaled, StandardScaled) of comparison","8474b635":"### 3-a. Logistic Regression - raw data","e78c4f55":"---\n## Step 2. Visualization","dc0d277c":"---\n## Step 1. Date Load & EDA","62f2647f":"1. Logistic Regression\n    - with Basic(Raw) Data\n        Train Score : 0.94\n        Test Score : 0.93\n    - with MinMaxScaled Data\n        Train Score : 0.97\n        Test Score : 0.98\n    - with StandardScaled Data\n        Train Score : 0.98\n        Test Score : 0.95\n\n\n\n2. SGDClassifier\n    - with Basic(Raw) Data\n        Best Score(Test Set) : 0.93\n        Best parameter(max_iter) : 7600\n    - with MinMaxScaled Data\n        Best Score(Test Set) : 0.97\n        Best parameter(max_iter) : 600\n    - with StandardScaled Data\n        Best Score(Test Set) : 0.97\n        Best parameter(max_iter) : 6600","32c66621":"### 2-b. Correlation Heatmap - MinMaxScaled Data","50c18758":"### 3-f. XGDClassifier - StandardScaled data","81a260c5":"---\n## Step 3. Modeling & Prediction","4ae07492":"---\n### Step 4. Conclusion","cf2171ca":"### 2-c. Correlation Heatmap - StandardScaled Data"}}