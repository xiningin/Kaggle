{"cell_type":{"818a7a7f":"code","132fd331":"code","092effe1":"code","3c792ae3":"code","c90c22ad":"code","c1167d03":"code","1dbceaf8":"code","ab6ac723":"code","69032214":"code","697f1f7e":"code","8f21f00b":"code","48f293af":"code","8a17ec95":"code","e7fba73d":"code","0d2f3859":"code","89ec0717":"code","4c994caa":"code","30e7f1fd":"code","26e19639":"code","ada29527":"code","0a900ebe":"code","a05b8d3c":"code","22a2477a":"code","aca01ae0":"code","c0dad776":"code","b671aafd":"code","d361e511":"code","cd1ae2cc":"code","2be3e0af":"code","c030d524":"code","0506b406":"code","c49a530f":"markdown","c9759873":"markdown","324a68de":"markdown","84df22bd":"markdown","0ba8de6b":"markdown","6b5813ae":"markdown","d7692a0c":"markdown","520785de":"markdown","5981f92d":"markdown","2e39e6d3":"markdown","334ed13c":"markdown","c7bc6099":"markdown","c26956e8":"markdown","6af1b1ba":"markdown","a2a34fa7":"markdown","581aed25":"markdown","bacfdf25":"markdown","0696312c":"markdown","1829bf30":"markdown","9f0d89bb":"markdown","78caeb51":"markdown","5dc4f4cb":"markdown","74582b17":"markdown","cc12a7ea":"markdown","51334538":"markdown","ac89d4ba":"markdown","e332d625":"markdown","3c524cbd":"markdown","fec3b11f":"markdown","989d6519":"markdown","b8ad3ceb":"markdown","94e0774f":"markdown","5ff2ccf3":"markdown","470cdd09":"markdown","5ec54479":"markdown","a03c3d5c":"markdown"},"source":{"818a7a7f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","132fd331":"data = pd.read_csv('..\/input\/StudentsPerformance.csv')","092effe1":"series = data['math score']        # data['math score'] => series\nprint(type(series))\ndataFrame = data[['math score']]   # data[['math score']] => data frame\nprint(type(dataFrame))","3c792ae3":"data.info()","c90c22ad":"data.describe()","c1167d03":"data.corr()","1dbceaf8":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt='.1f', ax=ax)\nplt.show()","ab6ac723":"data.head()","69032214":"data.columns","697f1f7e":"data.rename(columns={'gender': 'Gender', 'race\/ethnicity': 'Ethnicity', 'parental level of education': 'ParentalLevelOfEducation', 'lunch': 'Lunch', 'test preparation course': 'TestPreparationCourse', 'math score': 'MathScore', 'reading score': 'ReadingScore', 'writing score': 'WritingScore'}, inplace=True)","8f21f00b":"data.columns","48f293af":"dfMale = data[data.Gender == \"male\"] # DataFrame for male\nprint('Male List Top 10')\nprint(dfMale.head(10))\nprint('')\ndfFemale = data[data.Gender == \"female\"] # DataFrame for female\nprint('Female List Top 10')\nprint(dfFemale.head(10))","8a17ec95":"# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndfMale.MathScore.plot(kind='line', color='b', label='Math Score (Male)', linewidth=1, alpha=0.5, grid=True, linestyle=':')\ndfFemale.MathScore.plot(color='r', label='Math Score (Female)', linewidth=1, alpha=0.5, grid=True, linestyle='-.')\nplt.legend(loc='lower center')\nplt.xlabel('Number of Students')\nplt.ylabel('Math Scores')\nplt.title('Example of Line Plot (Math Score: Male vs Female)')\nplt.show()","e7fba73d":"# x = Writing Score, y = Reading Score\ndfMale.plot(kind='scatter', x='WritingScore', y='ReadingScore',alpha=0.5, color='red')\nplt.xlabel('Writing Score')              # label = name of label\nplt.ylabel('Reading Score')\nplt.title('Example of Scatter Plot (Writing vs Reading For Male)')\nplt.show()","0d2f3859":"# bins = number of bar in figure\ndata.MathScore.plot(kind='hist', bins=100, figsize=(12,12))\nplt.xlabel(\"Math Score\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Example of Histogram (Math Score)\")\nplt.show()","89ec0717":"data.MathScore.plot(kind = 'hist',bins = 50)\nplt.clf()\n# We cannot see plot due to clf()","4c994caa":"dict = {'Turkey': 'Ankara', 'Spain': 'Barcelona', 'Italy': 'Rome', 'France': 'Paris', 'United Kingdom': 'London', 'United State': 'Washington DC'}","30e7f1fd":"print(\"dict['Italy']: \", dict['Italy'])","26e19639":"dict[\"Spain\"] = \"Madrid\"       # update existing entry\nprint(dict)\ndict[\"Germany\"] = \"Berlin\"     # add new entry\nprint(dict)","ada29527":"print('France' in dict)        # check include or not","0a900ebe":"del dict[\"Germany\"]        # remove entry with key 'Germany'\nprint(dict)\ndict.clear()               # remove all entries in dict\nprint(dict)\n\n# In order to run all code you need to take comment this line\n# del dict          # delete entire dict     \n# print(dict)       # it gives error because dict is deleted","a05b8d3c":"print(dict.keys())","22a2477a":"print(dict.values())","aca01ae0":"print(3>2)\nprint(3!=2)","c0dad776":"print(True and False)\nprint(True or False)\ndata.head()","b671aafd":"#data = pd.read_csv('..\/input\/StudentsPerformance.csv')","d361e511":"# There are only 26 students who have higher writing score than 95\nflt1 = data['WritingScore'] > 95\ndata[flt1]\nprint('Filtered data count: ', len(data[flt1]))","cd1ae2cc":"# There are only 28 students who have higher writing score than 90 and higher reading score than 95\nflt2 = np.logical_and(data['WritingScore']>90, data['ReadingScore']>95)\ndata[flt2]\nprint('Filtered data count: ', len(data[flt2]))","2be3e0af":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\nflt3 = (data['WritingScore']>90) & (data['ReadingScore']>95)\ndata[flt3]\nprint('Filtered data count: ', len(data[flt3]))","c030d524":"# Stay in loop if condition( i is not equal 5) is true\ni = 0\nwhile i != 5 :\n    print('i is: ',i)\n    i +=1 \nprint(i,' is equal to 5')","0506b406":"# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in data[['ReadingScore']][0:5].iterrows():\n    print(index,\" : \",value)","c49a530f":"<a id=\"4\"><\/a> <br>\n### pandas.DataFrame.describe\n\n**DataFrame.describe(*percentiles=None, include=None, exclude=None*)**\n<p>Generates descriptive statistics that summarize the central tendency, dispersion and shape of a dataset\u2019s distribution, excluding NaN values.<br>\nAnalyzes both numeric and object series, as well as DataFrame column sets of mixed data types.<p\/>","c9759873":"<a id=\"12\"><\/a> <br>\n### Histogram","324a68de":"<a id=\"29\"><\/a><br>\n### For Loop\n<p>A **_for_** loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).<\/p>\n<p>With the **_for_** loop we can execute a set of statements once for each item in a list, tuple, set etc.<\/p>","84df22bd":"<a id=\"8\"><\/a> <br>\n### pandas.DataFrame.rename\n**DataFrame.rename(*mapper=None, index=None, columns=None, axis=None, copy=True, inplace=False, level=None*)**\n<p>Alter axes labels.<br>\nFunction \/ dict values must be unique (1-to-1). Labels not contained in a dict \/ Series will be left as-is. Extra labels listed don\u2019t throw an error.<\/p>","0ba8de6b":"<a id=\"25\"><\/a><br>\n### Filtering Pandas With logical_and","6b5813ae":"**Parameters:**<br>\n**percentiles**: *list-like of numbers, optional*<br>\nThe percentiles to include in the output. All should fall between 0 and 1. The default is [.25, .5, .75], which returns the 25th, 50th, and 75th percentiles.<br> \n**include**: *\u2018all\u2019, list-like of dtypes or None (default), optional*<br>\nA white list of data types to include in the result. Ignored for Series.<br>\n**exclude**: *list-like of dtypes or None (default), optional*<br>\nA black list of data types to omit from the result. Ignored for Series.<br>","d7692a0c":"<a id=\"26\"><\/a><br>\n### Filtering Pandas With & Operator","520785de":"<a id=\"6\"><\/a> <br>\n### pandas.DataFrame.head\n**DataFrame.head(n=5)**\n\n<p>Return the first n rows.<br>\nThis function returns the first n rows for the object based on position. It is useful for quickly testing if your object has the right type of data in it.<\/p>","5981f92d":"<a id=\"23\"><\/a><br>\n### Boolean Operators","2e39e6d3":"<a id=\"9\"><\/a> <br>\n# 2. Matplotlib\n<p>Matplotlib is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms.<br>\nMatplotlib can be used in Python scripts, the Python and IPython shells, the Jupyter notebook, web application servers, and four graphical user interface toolkits.<br>\nMatplotlib tries to make easy things easy and hard things possible. You can generate plots, histograms, power spectra, bar charts, errorcharts, scatterplots, etc., with just a few lines of code.<\/p>","334ed13c":"**Parameters:**<br>\n**n**: *int, default 5*<br>\nNumber of rows to select.","c7bc6099":"<a id=\"14\"><\/a><br>\n# 3. Dictionaries\n<p>Each key is separated from its value by a colon (:), the items are separated by commas, and the whole thing is enclosed in curly braces. An empty dictionary without any items is written with just two curly braces, like this: {}.<\/p>\n<p>Keys are unique within a dictionary while values may not be. The values of a dictionary can be of any type, but the keys must be of an immutable data type such as strings, numbers, or tuples.<\/p>","c26956e8":"<a id=\"22\"><\/a><br>\n### Comparison Operators","6af1b1ba":"<a id=\"11\"><\/a> <br>\n### Scatter Plot","a2a34fa7":"<a id=\"10\"><\/a> <br>\n### Line Plot","581aed25":"<a id=\"18\"><\/a><br>\n### Delete Dictionary Elements\n<p>You can either remove individual dictionary elements or clear the entire contents of a dictionary. You can also delete entire dictionary in a single operation.<\/p>","bacfdf25":"**Parameters:**<br>\n**mapper, index, columns**: *dict-like or function, optional*<br>\ndict-like or functions transformations to apply to that axis' values. Use either mapper and axis to specify the axis to target with mapper or index and columns.<br>\n**axis**: *int or str, optional*<br>\nAxis to target with *mapper*. Can be either the axis name ('index', 'columns') or number (0, 1). The default is 'index'.<br>\n**copy**: *boolean, default True*<br>\nAlso copy underlying data.<br>\n**inplace**: *boolean, default False*<br>\nWhether to return a new DataFrame. If True then value of copy is ignored.<br>\n**level**: *int or level name, default None*<br>\nIn case of a MultiIndex, only rename labels in the specified level.","0696312c":"**Parameters:**<br>\n**method**: *{\u2018pearson\u2019, \u2018kendall\u2019, \u2018spearman\u2019}*\n    * pearson: standard correlation coefficient\n    * kendall: Kendall Tau correlation coefficient\n    * spearman: Spearman rank correlation\n **min_periods**: *int, optional*<br>\n Minimum number of observations required per pair of columns to have a valid result. Currently only available for pearson and spearman correlation.","1829bf30":"1. [Pandas](#1)\n    1. [Read_CSV]( #2)\n    1. [Info](#3)\n    1. [Describe](#4)\n    1. [Corr](#5)\n    1. [Head](#6)\n    1. [Columns](#7)\n    1. [Rename](#8)\n1. [Matplotlib](#9)\n    1. [Line Plot](#10)\n    1. [Scatter Plot](#11)\n    1. [Histogram](#12)\n    1. [clf](#13)\n1. [Dictionaries](#14)\n    1. [Accessing Values in Dictionary](#15)\n    1. [Updating Dictionary](#16)\n    1. [Check Element in Dictionary](#17)\n    1. [Delete Dictionary Elements](#18)\n    1. [Keys](#19)\n    1. [Values](#20)\n1. [Logic, Control Flow and Filtering](#21)\n    1. [Comparison Operators](#22)\n    1. [Boolean Operators](#23)\n    1. [Filtering Pandas Data Frame](#24)\n    1. [Filtering Pandas With logical_and](#25)\n    1. [Filtering Pandas With & Operator](#26)\n1. [Loop Data Structures](#27)\n    1. [While](#28)\n    1. [For](#29)\n1. [References](#30)","9f0d89bb":"<a id=\"7\"><\/a> <br>\n### pandas.DataFrame.columns\n**DataFrame.columns**\n<p>The column labels of the DataFrame.<\/p>","78caeb51":"<a id=\"1\"><\/a> <br>\n# 1. Pandas\n<p> **pandas** is a Python package providing fast, flexible, and expressive data structures designed to make working with \u201crelational\u201d or \u201clabeled\u201d data both easy and intuitive.<\/p>","5dc4f4cb":"<a id=\"15\"><\/a><br>\n### Accessing Values in Dictionary\n<p>To access dictionary elements, you can use the familiar square brackets along with the key to obtain it value.<\/p>","74582b17":"<a id=\"21\"><\/a><br>\n# 4. Logic, Control Flow and Filtering\n<p>Comparison operator:  ==, <, >, <=<br>\nBoolean operators: and, or ,not<br>\nFiltering pandas<\/p>","cc12a7ea":"<a id=\"13\"><\/a> <br>\n### matplotlib.pyplot.clf\n<p>Clear the current figure.<\/p>","51334538":"<a id=\"5\"><\/a> <br>\n### pandas.DataFrame.corr\n**DataFrame.corr(*method='pearson', min_periods=1*)**\n<p>Compute pairwise correlation of columns, excluding NA\/null values.<\/p>","ac89d4ba":"<a id=\"2\"><\/a> <br>\n### pandas.read_csv\n**pandas.read_csv(*filepath_or_buffer, sep=', ', delimiter=None, header='infer', names=None, index_col=None, usecols=None, squeeze=False, prefix=None, mangle_dupe_cols=True, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skipinitialspace=False, skiprows=None, nrows=None, na_values=None, keep_default_na=True, na_filter=True, verbose=False, skip_blank_lines=True, parse_dates=False, infer_datetime_format=False, keep_date_col=False, date_parser=None, dayfirst=False, iterator=False, chunksize=None, compression='infer', thousands=None, decimal=b'.', lineterminator=None, quotechar='\"', quoting=0, escapechar=None, comment=None, encoding=None, dialect=None, tupleize_cols=None, error_bad_lines=True, warn_bad_lines=True, skipfooter=0, doublequote=True, delim_whitespace=False, low_memory=True, memory_map=False, float_precision=None*)**\n<p>Read CSV (comma-separated) file into DataFrame<br>\nAlso supports optionally iterating or breaking of the file into chunks.<\/p>","e332d625":"<a id=\"19\"><\/a><br>\n### Keys\n<p>The method **keys()** returns a list of all the available keys in the dictionary.<\/p>","3c524cbd":"**Parameters:**<br>\n**verbose**: *bool, optional*<br>\nWhether to print the full summary.<br>\n**buf**: *writable buffer, defaults to sys.stdout*<br>\nWhere to send the output. By default, the output is printed to sys.stdout. Pass a writable buffer if you need to further process the output.<br>\n**max_cols**: *int, optional*<br>\nWhen to switch from the verbose to the truncated output. If the DataFrame has more than max_cols columns, the truncated output is used.<br>\n**memory_usage**: *bool, str, optional*<br>\nSpecifies whether total memory usage of the DataFrame elements (including index) should be displayed.<br>\n**null_counts**: *bool, optional*<br>\nWhether to show the non-null counts.","fec3b11f":"<a id=\"20\"><\/a><br>\n### Values\n<p>The method **values()** returns a list of all the values available in a given dictionary.<\/p>","989d6519":"<a id=\"28\"><\/a><br>\n### While Loop\n<p>With the **_while_** loop we can execute a set of statements as long as a condition is true.<\/p>","b8ad3ceb":"<a id=\"3\"><\/a> <br>\n### pandas.DataFrame.info\n**DataFrame.info(*verbose=None, buf=None, max_cols=None, memory_usage=None, null_counts=None*)**\n<p>Print a concise summary of a DataFrame.<\/p>","94e0774f":"<a id=\"17\"><\/a><br>\n### Check Element in Dictionary\n<p>You can use the *in* operator to check if a key exists in a dictionary.<\/p>","5ff2ccf3":"<a id=\"27\"><\/a><br>\n# 5. Loop Data Structures\n<p>We will learn most basic while and for loops<\/p>","470cdd09":"<a id=\"24\"><\/a><br>\n### Filtering Pandas Data Frame","5ec54479":"<a id=\"16\"><\/a><br>\n### Updating Dictionary\n<p>You can update a dictionary by adding a new entry or a key-value pair, modifying an existing entry, or deleting an existing entry<\/p>","a03c3d5c":"<a id=\"30\"><\/a><br>\n# 6. References\n\n[Data Science Tutorial for Beginners](https:\/\/www.kaggle.com\/kanncaa1\/data-sciencetutorial-for-beginners)<br>\n[pandas](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/index.html)<br>\n[matplotlib](https:\/\/matplotlib.org\/index.html)<br>\n[w3schools](https:\/\/www.w3schools.com\/python\/default.asp)<br>\n"}}