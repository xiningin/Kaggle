{"cell_type":{"2832ab54":"code","ed008d09":"code","0baa271a":"code","fcd39f65":"code","1d7c23ca":"code","21fed1cd":"code","235400e0":"code","749d168a":"code","deb06e7f":"code","205fc855":"code","d74f8265":"code","9a7604d4":"code","61e436d4":"code","c2e22e0e":"code","576d04ec":"code","ff8564eb":"code","2b1af5dd":"code","47b6933e":"code","ebed6116":"code","11b38618":"code","f994f0b1":"code","e5b2ccca":"code","4ba9c960":"code","7b25a1fe":"code","15e86f3f":"code","05beddfa":"code","fa68dd50":"code","402b6862":"code","4ed9cb3c":"code","58ef037c":"code","fa4a6aa0":"code","67dfe4cd":"code","2c5d6c2e":"code","5c6b7486":"code","ba42bff8":"code","c42d561d":"code","73d78512":"code","5b23c7cc":"code","2a10703f":"code","a1742072":"code","e716f2ba":"code","94067d76":"code","19a5c292":"code","30e97ace":"markdown"},"source":{"2832ab54":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nimport plotly.offline as py\nfrom datetime import date, timedelta\nfrom sklearn.cluster import KMeans\nfrom fbprophet import Prophet","ed008d09":"dataset=pd.read_csv(\"..\/input\/corona-virus-report\/covid_19_clean_complete.csv\")\n","0baa271a":"dataset.shape\n","fcd39f65":"dataset.describe()\n","1d7c23ca":"daily = dataset.sort_values(['Date','Country\/Region','Province\/State'])\nlatest = dataset[dataset.Date == daily.Date.max()]\nlatest.head()","21fed1cd":"data=latest.rename(columns={ \"Country\/Region\": \"country\", \"Province\/State\": \"state\",\"Confirmed\":\"confirm\",\"Deaths\": \"death\",\"Recovered\":\"recover\"})\ndata.head()","235400e0":"dgc=data.groupby(\"country\")[['confirm', 'death', 'recover']].sum().reset_index()\n\ndgc.head()","749d168a":"import folium\nworldmap = folium.Map(location=[32.4279,53.6880 ], zoom_start=4,tiles='Stamen Toner')\n\nfor Lat, Long, state in zip(data['Lat'], data['Long'],data['state']):\n    folium.CircleMarker([Lat, Long],\n                        radius=5,\n                        color='red',\n                      popup =('State: ' + str(state) + '<br>'),\n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(worldmap)\nworldmap","deb06e7f":"fig = px.bar(dgc[['country', 'confirm']].sort_values('confirm', ascending=False), \n             y=\"confirm\", x=\"country\", color='country', \n             log_y=True, template='ggplot2', title='Confirmed Cases')\nfig.show()","205fc855":"fig = px.bar(dgc[['country', 'recover']].sort_values('recover', ascending=False), \n             y=\"recover\", x=\"country\", color='country', \n             log_y=True, template='ggplot2', title='Recovered Cases')\nfig.show()","d74f8265":"fig = px.bar(dgc[['country', 'death']].sort_values('death', ascending=False), \n             y=\"death\", x=\"country\", color='country', \n             log_y=True, template='ggplot2', title='Death')\nfig.show()","9a7604d4":"bd_data = dataset[dataset['Country\/Region']=='Bangladesh']\nbdata = bd_data.tail(22)\nbdata.tail()","61e436d4":"plt.figure(figsize=(23,10))\nplt.bar(bdata.Date, bdata.Confirmed,label=\"Confirm\")\nplt.xlabel('Date')\nplt.ylabel(\"Count\")\nplt.legend(frameon=True, fontsize=12)\nplt.title(\"Confirmation\",fontsize=50)\nplt.show()\n\nplt.figure(figsize=(23,10))\nplt.bar(bdata.Date, bdata.Recovered,label=\"Recovery\")\nplt.xlabel('Date')\nplt.ylabel(\"Count\")\nplt.legend(frameon=True, fontsize=12)\nplt.title(\"Recoverey\",fontsize=50)\nplt.show()\n\n\nplt.figure(figsize=(23,10))\nplt.bar(bdata.Date, bdata.Deaths,label=\"Death\")\nplt.xlabel('Date')\nplt.ylabel(\"Count\")\nplt.legend(frameon=True, fontsize=12)\nplt.title(\"Death\",fontsize=50)\nplt.show()","c2e22e0e":"plt.figure(figsize=(23,10))\nplt.bar(bdata.Date, bdata.Confirmed,label=\"Confirm\")\nplt.bar(bdata.Date, bdata.Recovered,label=\"Recovery\")\nplt.bar(bdata.Date, bdata.Deaths,label=\"Death\")\nplt.xlabel('Date')\nplt.ylabel(\"Count\")\nplt.legend(frameon=True, fontsize=12)\nplt.title(\"Confirmation vs Recoverey vs Death\",fontsize=50)\nplt.show()\n\nf, ax = plt.subplots(figsize=(23,10))\nax=sns.scatterplot(x=\"Date\", y=\"Confirmed\", data=bdata,\n             color=\"black\",label = \"Confirm\")\nax=sns.scatterplot(x=\"Date\", y=\"Recovered\", data=bdata,\n             color=\"red\",label = \"Recovery\")\nax=sns.scatterplot(x=\"Date\", y=\"Deaths\", data=bdata,\n             color=\"blue\",label = \"Death\")\nplt.plot(bdata.Date,bdata.Confirmed,zorder=1,color=\"black\")\nplt.plot(bdata.Date,bdata.Recovered,zorder=1,color=\"red\")\nplt.plot(bdata.Date,bdata.Deaths,zorder=1,color=\"blue\")","576d04ec":"bdata['Confirmed_new'] = bdata['Confirmed']-bdata['Confirmed'].shift(1)\nbdata['Recovered_new'] = bdata['Recovered']-bdata['Recovered'].shift(1)\nbdata['Deaths_new'] = bdata['Deaths']-bdata['Deaths'].shift(1)","ff8564eb":"bdata = bdata.fillna(0)\n","2b1af5dd":"plt.figure(figsize=(23,10))\nplt.bar(bdata.Date, bdata.Confirmed_new,label=\"Confirm Cases\")\nplt.xlabel('Date')\nplt.ylabel(\"Count\")\nplt.legend(frameon=True, fontsize=12)\nplt.title('Confirmed Cases',fontsize = 35)\nplt.show()\n\n\nplt.figure(figsize=(23,10))\nplt.bar(bdata.Date, bdata.Recovered_new,label=\"Recovered Cases\")\nplt.xlabel('Date')\nplt.ylabel(\"Count\")\nplt.legend(frameon=True, fontsize=12)\nplt.title('Recovered Cases',fontsize = 35)\nplt.show()\n\nplt.figure(figsize=(23,10))\nplt.bar(bdata.Date, bdata.Deaths_new,label=\"Deaths\")\nplt.xlabel('Date')\nplt.ylabel(\"Count\")\nplt.legend(frameon=True, fontsize=12)\nplt.title('Deaths',fontsize = 35)\nplt.show()","47b6933e":"bdata.head()\n","ebed6116":"f, ax = plt.subplots(figsize=(23,10))\nax=sns.scatterplot(x=\"Date\", y=\"Confirmed_new\", data=bdata,\n             color=\"black\",label = \"Confirm\")\nax=sns.scatterplot(x=\"Date\", y=\"Recovered_new\", data=bdata,\n             color=\"red\",label = \"Recovery\")\nax=sns.scatterplot(x=\"Date\", y=\"Deaths_new\", data=bdata,\n             color=\"blue\",label = \"Death\")\nplt.plot(bdata.Date,bdata.Confirmed_new,zorder=1,color=\"black\")\nplt.plot(bdata.Date,bdata.Recovered_new,zorder=1,color=\"red\")\nplt.plot(bdata.Date,bdata.Deaths_new,zorder=1,color=\"blue\")","11b38618":"dgd=data.groupby(\"Date\")[['confirm', 'death', 'recover']].sum().reset_index()\n\ndgd.head()","f994f0b1":"r_cm = float(dgd.recover\/dgd.confirm)\nd_cm = float(dgd.death\/dgd.confirm)","e5b2ccca":"print(\"The percentage of recovery after confirmation is \"+ str(r_cm*100) )\nprint(\"The percentage of death after confirmation is \"+ str(d_cm*100) )","4ba9c960":"global_data = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")","7b25a1fe":"# This functions smooths data, thanks to Dan Pearson. We will use it to smooth the data for growth factor.\ndef smoother(inputdata,w,imax):\n    data = 1.0*inputdata\n    data = data.replace(np.nan,1)\n    data = data.replace(np.inf,1)\n    #print(data)\n    smoothed = 1.0*data\n    normalization = 1\n    for i in range(-imax,imax+1):\n        if i==0:\n            continue\n        smoothed += (w**abs(i))*data.shift(i,axis=0)\n        normalization += w**abs(i)\n    smoothed \/= normalization\n    return smoothed\n\ndef growth_factor(confirmed):\n    confirmed_iminus1 = confirmed.shift(1, axis=0)\n    confirmed_iminus2 = confirmed.shift(2, axis=0)\n    return (confirmed-confirmed_iminus1)\/(confirmed_iminus1-confirmed_iminus2)\n\ndef growth_ratio(confirmed):\n    confirmed_iminus1 = confirmed.shift(1, axis=0)\n    return (confirmed\/confirmed_iminus1)\n\n# This is a function which plots (for in input country) the active, confirmed, and recovered cases, deaths, and the growth factor.\ndef plot_country_active_confirmed_recovered(country):\n    \n    # Plots Active, Confirmed, and Recovered Cases. Also plots deaths.\n    country_data = global_data[global_data['Country\/Region']==country]\n    table = country_data.drop(['SNo','Province\/State', 'Last Update'], axis=1)\n    table['ActiveCases'] = table['Confirmed'] - table['Recovered'] - table['Deaths']\n    table2 = pd.pivot_table(table, values=['ActiveCases','Confirmed', 'Recovered','Deaths'], index=['ObservationDate'], aggfunc=np.sum)\n    table3 = table2.drop(['Deaths'], axis=1)\n   \n    # Growth Factor\n    w = 0.5\n    table2['GrowthFactor'] = growth_factor(table2['Confirmed'])\n    table2['GrowthFactor'] = smoother(table2['GrowthFactor'],w,5)\n\n    # 2nd Derivative\n    table2['2nd_Derivative'] = np.gradient(np.gradient(table2['Confirmed'])) #2nd derivative\n    table2['2nd_Derivative'] = smoother(table2['2nd_Derivative'],w,7)\n\n\n    #Plot confirmed[i]\/confirmed[i-1], this is called the growth ratio\n    table2['GrowthRatio'] = growth_ratio(table2['Confirmed'])\n    table2['GrowthRatio'] = smoother(table2['GrowthRatio'],w,5)\n    \n    #Plot the growth rate, we will define this as k in the logistic function presented at the beginning of this notebook.\n    table2['GrowthRate']=np.gradient(np.log(table2['Confirmed']))\n    table2['GrowthRate'] = smoother(table2['GrowthRate'],0.5,3)\n    \n    # horizontal line at growth rate 1.0 for reference\n    x_coordinates = [1, 100]\n    y_coordinates = [1, 1]\n    #plots\n    table2['Deaths'].plot(title='Deaths')\n    plt.show()\n    table3.plot() \n    plt.show()\n    table2['GrowthFactor'].plot(title='Growth Factor')\n    plt.plot(x_coordinates, y_coordinates) \n    plt.show()\n    table2['2nd_Derivative'].plot(title='2nd_Derivative')\n    plt.show()\n    table2['GrowthRatio'].plot(title='Growth Ratio')\n    plt.plot(x_coordinates, y_coordinates)\n    plt.show()\n    table2['GrowthRate'].plot(title='Growth Rate')\n    plt.show()\n\n    return ","15e86f3f":"plot_country_active_confirmed_recovered('Bangladesh')\n","05beddfa":"prophet=bd_data.iloc[: , [4,5 ]].copy() \nprophet.head()\nprophet.columns = ['ds','y']\nprophet.head()","fa68dd50":"m=Prophet()\nm.fit(prophet)\nfuture=m.make_future_dataframe(periods=15)\nforecast=m.predict(future)\nforecast","402b6862":"cnfrm = forecast.loc[:,['ds','trend']]\ncnfrm = cnfrm[cnfrm['trend']>0]\ncnfrm=cnfrm.tail(15)\ncnfrm.columns = ['Date','Confirm']\ncnfrm.head()","4ed9cb3c":"figure = plot_plotly(m, forecast)\npy.iplot(figure) \n\nfigure = m.plot(forecast,xlabel='Date',ylabel='Confirmed Count')","58ef037c":"figure=m.plot_components(forecast)\n","fa4a6aa0":"prophet_rec=bd_data.iloc[: , [4,7 ]].copy() \nprophet_rec.head()\nprophet_rec.columns = ['ds','y']\nprophet_rec.head()","67dfe4cd":"m1=Prophet()\nm1.fit(prophet_rec)\nfuture_rec=m1.make_future_dataframe(periods=15)\nforecast_rec=m1.predict(future_rec)\nforecast_rec","2c5d6c2e":"rec = forecast_rec.loc[:,['ds','trend']]\nrec = rec[rec['trend']>0]\nrec=rec.tail(15)\nrec.columns = ['Date','Recovery']\nrec.head()","5c6b7486":"figure_rec = plot_plotly(m1, forecast_rec)\npy.iplot(figure_rec) \n\nfigure_rec = m1.plot(forecast_rec,xlabel='Date',ylabel='Recovery Count')","ba42bff8":"figure_rec=m1.plot_components(forecast_rec)\n","c42d561d":"prophet_dth=bd_data.iloc[: , [4,6 ]].copy() \nprophet_dth.head()\nprophet_dth.columns = ['ds','y']\nprophet_dth.head()","73d78512":"m2=Prophet()\nm2.fit(prophet_dth)\nfuture_dth=m2.make_future_dataframe(periods=15)\nforecast_dth=m2.predict(future_dth)\nforecast_dth","5b23c7cc":"dth = forecast_dth.loc[:,['ds','trend']]\ndth = dth[dth['trend']>0]\ndth=dth.tail(15)\ndth.columns = ['Date','Death']\ndth.head()","2a10703f":"figure_dth = plot_plotly(m2, forecast_dth)\npy.iplot(figure_dth) \n\nfigure_dth = m2.plot(forecast_dth,xlabel='Date',ylabel='Death Count')","a1742072":"figure_dth=m2.plot_components(forecast_dth)\n","e716f2ba":"prediction = cnfrm\nprediction['Recover'] = rec.Recovery\nprediction['Death'] = dth.Death\nprediction.head()","94067d76":"pr_pps = float(prediction.Recover.sum()\/prediction.Confirm.sum())\npd_pps = float(prediction.Death.sum()\/prediction.Confirm.sum())","19a5c292":"print(\"The percentage of Predicted recovery after confirmation is \"+ str(pr_pps*100) )\nprint(\"The percentage of Predicted Death after confirmation is \"+ str(pd_pps*100) )","30e97ace":">Author: Kazi Amit Hasan\n\n**This notebook represents the analysis of the novel coronavirus in Bangladesh.\n\n**Please follow ther rules of government and stay safe. **\n\nThe documentatiosns will be added soon. Feel free to give me with feedbacks.\n\nPlease upvote if you like it."}}