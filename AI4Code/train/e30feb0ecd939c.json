{"cell_type":{"c31bbf00":"code","f4306e80":"code","9c614067":"code","a176393c":"code","67cd2510":"code","41f9a45f":"code","8ccdac21":"code","5fbe93de":"code","ed7b5928":"code","02674909":"code","674ece86":"code","b2583ddf":"code","f1480579":"code","11bb66b2":"code","c92f3e52":"code","5edb83d1":"code","ac5263be":"code","36f0fb61":"code","ad31af59":"code","27fdb059":"code","127ae78f":"code","c3c358f5":"code","eb92d0cb":"code","02bc9094":"code","6e709158":"code","447e59e0":"code","41b4a49a":"code","fa1e664b":"code","e7629952":"code","4b817df4":"code","07ad4e3d":"markdown","4dc78af4":"markdown","1d5b316e":"markdown","0954a211":"markdown","f74fa10d":"markdown","f8ee8884":"markdown","cf1d348e":"markdown","2cf7193b":"markdown","198429be":"markdown","0ae5320f":"markdown","0efafbb7":"markdown","cf96888d":"markdown"},"source":{"c31bbf00":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f4306e80":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_data.head()","9c614067":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data.head()","a176393c":"train_data.nunique()","67cd2510":"train_data.corr()","41f9a45f":"train_data.drop(['Name','Ticket','PassengerId','Cabin'], axis=1, inplace=True)\ntrain_data.head()","8ccdac21":"%matplotlib inline\nimport matplotlib.pyplot as plt","5fbe93de":"plt.scatter(train_data['Survived'], train_data['Fare'])","ed7b5928":"train_data.drop(['Fare'], axis=1, inplace=True)\ntrain_data.head()","02674909":"train_data[train_data.isnull().any(axis=1)]","674ece86":"train_data['Age'].isnull().value_counts()\ntrain_data['Age'].fillna(train_data['Age'].mean(), inplace=True)","b2583ddf":"train_data[train_data.isnull().any(axis=1)]","f1480579":"train_data['Embarked'].value_counts()\n\n# S has most no. of value so Let's put it\n\ntrain_data['Embarked'].fillna('S', inplace=True)","11bb66b2":"train_data[train_data.isnull().any(axis=1)]","c92f3e52":"import seaborn as sns\n\nsns.catplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", kind=\"bar\", data=train_data)","5edb83d1":"sns.catplot(x=\"Sex\", y=\"Survived\", hue=\"Embarked\", kind=\"bar\", data=train_data)","ac5263be":"sns.lineplot(train_data['Age'], train_data['Survived'])","36f0fb61":"sns.catplot(x=\"Sex\", y=\"Survived\", hue=\"SibSp\", kind=\"bar\", data=train_data)","ad31af59":"sns.catplot(x=\"Sex\", y=\"Survived\", hue=\"Parch\", kind=\"bar\", data=train_data)","27fdb059":"train_data = pd.get_dummies(train_data, columns=['Embarked','Pclass','Sex'])","127ae78f":"train_data.head()","c3c358f5":"test_data.drop(['Name','Ticket','PassengerId','Cabin', 'Fare'], axis=1, inplace=True)","eb92d0cb":"test_data['Age'].fillna(test_data['Age'].mean(), inplace=True)\ntest_data['Embarked'].fillna('S', inplace=True)\ntest_data.head()","02bc9094":"test_data = pd.get_dummies(test_data, columns=['Embarked','Pclass','Sex'])\ntest_data.head()","6e709158":"train = train_data.drop(['Survived'], axis=1)\ntarget = train_data['Survived']","447e59e0":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(train,target,test_size=.33,random_state=42,shuffle=True)","41b4a49a":"from sklearn import metrics   \nfrom sklearn import svm  \n\n\nmodel=svm.SVC(kernel='rbf',C=1,gamma=0.1)\nmodel.fit(x_train,y_train)\npred=model.predict(x_test)\nprint('Accuracy for rbf SVM is ',metrics.accuracy_score(pred,y_test))","fa1e664b":"final_prediction = model.predict(test_data)","e7629952":"csv = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ncsv.head()","4b817df4":"my_submission = pd.DataFrame({'PassengerId': csv.PassengerId, 'Survived': final_prediction})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission.csv', index=False)","07ad4e3d":"### Let's handle Categorical Columns... Embarked, Pclass, Sex","4dc78af4":"1. Female has more chance to survive than Male\n2. Embarked C has high chance to survive (for both gender)","1d5b316e":"* SibSp < 3 has high chance to survive","0954a211":"Split Train and Test data","f74fa10d":"### Looks like Age has many missing values... Let's impute them","f8ee8884":"1. People Age<15 have high prop. to survive\n2. People Age between 15 to 50 have average prob. (50%) to survive\n3. People Age between 55 to 60 have average prob. (50%) to survive\n4. People Age between 65 to 70 have no chance to survive","cf1d348e":"# Let's change Test Data the way we changed Train Data","2cf7193b":"### Let's handle Embarked also","198429be":"1. Female has more chance to survive than Male\n2. Female in class 1 or 2 has high (90%) chance to survive\n3. Male in class 1 more chance to survive than in any other class","0ae5320f":"* Parch < 4 has high chance to Survive","0efafbb7":"# Let's Apply Machine Learning","cf96888d":"### Let's drop unnecessary columns... Name, Ticket, PassengerId, Cabin"}}