{"cell_type":{"6bed483b":"code","b67c15f9":"code","e3f3ef4a":"code","7bb12664":"markdown","6c7bc850":"markdown"},"source":{"6bed483b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b67c15f9":"#numpy data load example\n#Skiprows = 1 to \nDATA = np.loadtxt(\"..\/input\/robot-kinematics-dataset\/robot_inverse_kinematics_dataset.csv\", skiprows=1, delimiter=',')\nprint(DATA.shape)","e3f3ef4a":"#outputs are joint angles, we will split them separately\nq_1 = DATA[:, 0]\nq_2 = DATA[:, 1]\nq_3 = DATA[:, 2]\nq_4 = DATA[:, 3]\nq_5 = DATA[:, 4]\nq_6 = DATA[:, 5]\n\nprint(\"q1 shape: \", q_1.shape)\nprint(\"q2 shape: \", q_2.shape)\nprint(\"q3 shape: \", q_3.shape)\nprint(\"q4 shape: \", q_4.shape)\nprint(\"q5 shape: \", q_5.shape)\nprint(\"q6 shape: \", q_6.shape)\n\n#inputs\n\nx_ = DATA[:, 6]\ny_ = DATA[:, 7]\nz_ = DATA[:, 8]\n\nprint(\"x shape: \", x_.shape)\nprint(\"y shape: \", y_.shape)\nprint(\"z shape: \", z_.shape)\n\n#Of course, it might be necessary to have a shape (X, 1), which the data can be reshaped to\nprint(\"\\n\\n\\nReshaped Data\\n\")\nq_1 = q_1.reshape(-1,1)\nq_2 = q_2.reshape(-1,1)\nq_3 = q_3.reshape(-1,1)\nq_4 = q_4.reshape(-1,1)\nq_5 = q_5.reshape(-1,1)\nq_6 = q_6.reshape(-1,1)\nx_ = x_.reshape(-1,1)\ny_ = y_.reshape(-1,1)\nz_ = z_.reshape(-1,1)\nprint(\"q1 reshaped: \", q_1.shape)\nprint(\"q2 reshaped: \", q_2.shape)\nprint(\"q3 reshaped: \", q_3.shape)\nprint(\"q4 reshaped: \", q_4.shape)\nprint(\"q5 reshaped: \", q_5.shape)\nprint(\"q6 reshaped: \", q_6.shape)\nprint(\"x reshaped: \", x_.shape)\nprint(\"y reshaped: \", y_.shape)\nprint(\"z reshaped: \", z_.shape)","7bb12664":"# Robot Inverse Kinematics Dataset Loading Example","6c7bc850":"## Numpy data load example"}}