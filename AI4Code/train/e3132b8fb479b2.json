{"cell_type":{"7f46eb32":"code","c200ecf7":"code","1b75246d":"code","7ebd0894":"code","8bb742e6":"code","67ab0ebe":"code","7ee68597":"code","f7760d64":"code","cb0635e3":"code","006f30b5":"code","3f0866c2":"code","21434284":"code","f8004f0e":"code","88493eca":"code","b919f9e6":"code","36a65c5b":"code","83b80fc7":"code","70467ecc":"code","3294f3a2":"code","442118d3":"code","e1274894":"code","74a35242":"code","bf3d3ce6":"code","d376fd16":"code","b731a8cd":"code","29562c83":"code","fe2dd128":"code","1df43a77":"markdown","9abf69a6":"markdown","bd360ca9":"markdown","a9f56796":"markdown","de5e3fdd":"markdown","7c1413c8":"markdown","8af0ccc0":"markdown","338e5a50":"markdown","f544de86":"markdown","2a5011fb":"markdown","025af137":"markdown","b6c8350b":"markdown","1060bc40":"markdown","4a76117a":"markdown","368413e1":"markdown","5624d156":"markdown","0d87207c":"markdown","8d478217":"markdown","195a1445":"markdown","75608e91":"markdown","ac0bb894":"markdown","5822cb9d":"markdown","f92334cf":"markdown","bbd3a2a3":"markdown","34c45a89":"markdown"},"source":{"7f46eb32":"import os\nimport json\nfrom pprint import pprint\nfrom copy import deepcopy\n\nimport numpy as np\nimport pandas as pd\nfrom tqdm.notebook import tqdm","c200ecf7":"def format_name(author):\n    middle_name = \" \".join(author['middle'])\n    \n    if author['middle']:\n        return \" \".join([author['first'], middle_name, author['last']])\n    else:\n        return \" \".join([author['first'], author['last']])\n\n\ndef format_affiliation(affiliation):\n    text = []\n    location = affiliation.get('location')\n    if location:\n        text.extend(list(affiliation['location'].values()))\n    \n    institution = affiliation.get('institution')\n    if institution:\n        text = [institution] + text\n    return \", \".join(text)\n\ndef format_authors(authors, with_affiliation=False):\n    name_ls = []\n    \n    for author in authors:\n        name = format_name(author)\n        if with_affiliation:\n            affiliation = format_affiliation(author['affiliation'])\n            if affiliation:\n                name_ls.append(f\"{name} ({affiliation})\")\n            else:\n                name_ls.append(name)\n        else:\n            name_ls.append(name)\n    \n    return \", \".join(name_ls)\n\ndef format_body(body_text):\n    texts = [(di['section'], di['text']) for di in body_text]\n    texts_di = {di['section']: \"\" for di in body_text}\n    \n    for section, text in texts:\n        texts_di[section] += text\n\n    body = \"\"\n\n    for section, text in texts_di.items():\n        body += section\n        body += \"\\n\\n\"\n        body += text\n        body += \"\\n\\n\"\n    \n    return body\n\ndef format_bib(bibs):\n    if type(bibs) == dict:\n        bibs = list(bibs.values())\n    bibs = deepcopy(bibs)\n    formatted = []\n    \n    for bib in bibs:\n        bib['authors'] = format_authors(\n            bib['authors'], \n            with_affiliation=False\n        )\n        formatted_ls = [str(bib[k]) for k in ['title', 'authors', 'venue', 'year']]\n        formatted.append(\", \".join(formatted_ls))\n\n    return \"; \".join(formatted)","1b75246d":"def load_files(dirname):\n    filenames = os.listdir(dirname)\n    raw_files = []\n\n    for filename in tqdm(filenames):\n        filename = dirname + filename\n        file = json.load(open(filename, 'rb'))\n        raw_files.append(file)\n    \n    return raw_files\n\ndef generate_clean_df(all_files):\n    cleaned_files = []\n    \n    for file in tqdm(all_files):\n        features = [\n            file['paper_id'],\n            file['metadata']['title'],\n            format_authors(file['metadata']['authors']),\n            format_authors(file['metadata']['authors'], \n                           with_affiliation=True),\n            format_body(file['abstract']),\n            format_body(file['body_text']),\n            format_bib(file['bib_entries']),\n            file['metadata']['authors'],\n            file['bib_entries']\n        ]\n\n        cleaned_files.append(features)\n\n    col_names = ['paper_id', 'title', 'authors',\n                 'affiliations', 'abstract', 'text', \n                 'bibliography','raw_authors','raw_bibliography']\n\n    clean_df = pd.DataFrame(cleaned_files, columns=col_names)\n    clean_df.head()\n    \n    return clean_df","7ebd0894":"biorxiv_dir = '\/kaggle\/input\/CORD-19-research-challenge\/biorxiv_medrxiv\/biorxiv_medrxiv\/pdf_json\/'\nfilenames = os.listdir(biorxiv_dir)\nprint(\"Number of articles retrieved from biorxiv:\", len(filenames))","8bb742e6":"all_files = []\n\nfor filename in filenames:\n    filename = biorxiv_dir + filename\n    file = json.load(open(filename, 'rb'))\n    all_files.append(file)","67ab0ebe":"file = all_files[0]\nprint(\"Dictionary keys:\", file.keys())","7ee68597":"pprint(file['abstract'])","f7760d64":"print(\"body_text type:\", type(file['body_text']))\nprint(\"body_text length:\", len(file['body_text']))\nprint(\"body_text keys:\", file['body_text'][0].keys())","cb0635e3":"print(\"body_text content:\")\npprint(file['body_text'][:2], depth=3)","006f30b5":"texts = [(di['section'], di['text']) for di in file['body_text']]\ntexts_di = {di['section']: \"\" for di in file['body_text']}\nfor section, text in texts:\n    texts_di[section] += text\n\npprint(list(texts_di.keys()))","3f0866c2":"body = \"\"\n\nfor section, text in texts_di.items():\n    body += section\n    body += \"\\n\\n\"\n    body += text\n    body += \"\\n\\n\"\n\nprint(body[:3000])","21434284":"print(format_body(file['body_text'])[:3000])","f8004f0e":"print(all_files[0]['metadata'].keys())","88493eca":"print(all_files[0]['metadata']['title'])","b919f9e6":"authors = all_files[0]['metadata']['authors']\npprint(authors[:3])","36a65c5b":"for author in authors:\n    print(\"Name:\", format_name(author))\n    print(\"Affiliation:\", format_affiliation(author['affiliation']))\n    print()","83b80fc7":"pprint(all_files[4]['metadata'], depth=4)","70467ecc":"authors = all_files[4]['metadata']['authors']\nprint(\"Formatting without affiliation:\")\nprint(format_authors(authors, with_affiliation=False))\nprint(\"\\nFormatting with affiliation:\")\nprint(format_authors(authors, with_affiliation=True))","3294f3a2":"bibs = list(file['bib_entries'].values())\npprint(bibs[:2], depth=4)","442118d3":"format_authors(bibs[1]['authors'], with_affiliation=False)","e1274894":"bib_formatted = format_bib(bibs[:5])\nprint(bib_formatted)","74a35242":"cleaned_files = []\n\nfor file in tqdm(all_files):\n    features = [\n        file['paper_id'],\n        file['metadata']['title'],\n        format_authors(file['metadata']['authors']),\n        format_authors(file['metadata']['authors'], \n                       with_affiliation=True),\n        format_body(file['abstract']),\n        format_body(file['body_text']),\n        format_bib(file['bib_entries']),\n        file['metadata']['authors'],\n        file['bib_entries']\n    ]\n    \n    cleaned_files.append(features)","bf3d3ce6":"col_names = [\n    'paper_id', \n    'title', \n    'authors',\n    'affiliations', \n    'abstract', \n    'text', \n    'bibliography',\n    'raw_authors',\n    'raw_bibliography'\n]\n\nclean_df = pd.DataFrame(cleaned_files, columns=col_names)\nclean_df.head()","d376fd16":"clean_df.to_csv('biorxiv_clean.csv', index=False)","b731a8cd":"pmc_dir = '\/kaggle\/input\/CORD-19-research-challenge\/custom_license\/custom_license\/pdf_json\/'\npmc_files = load_files(pmc_dir)\npmc_df = generate_clean_df(pmc_files)\npmc_df.to_csv('clean_pmc.csv', index=False)\npmc_df.head()","29562c83":"comm_dir = '\/kaggle\/input\/CORD-19-research-challenge\/comm_use_subset\/comm_use_subset\/pdf_json\/'\ncomm_files = load_files(comm_dir)\ncomm_df = generate_clean_df(comm_files)\ncomm_df.to_csv('clean_comm_use.csv', index=False)\ncomm_df.head()","fe2dd128":"noncomm_dir = '\/kaggle\/input\/CORD-19-research-challenge\/noncomm_use_subset\/noncomm_use_subset\/pdf_json\/'\nnoncomm_files = load_files(noncomm_dir)\nnoncomm_df = generate_clean_df(noncomm_files)\nnoncomm_df.to_csv('clean_noncomm_use.csv', index=False)\nnoncomm_df.head()","1df43a77":"The abstract dictionary is fairly simple:","9abf69a6":"The following function let you format the bibliography all at once. It only extracts the title, authors, venue, year, and separate each entry of the bibliography with a `;`.","bd360ca9":"## Helper Functions","a9f56796":"Let's take a look at the bibliography section. ","de5e3fdd":"Unhide the cell below to find the definition of the following functions:\n* `format_name(author)`\n* `format_affiliation(affiliation)`\n* `format_authors(authors, with_affiliation=False)`\n* `format_body(body_text)`\n* `format_bib(bibs)`","7c1413c8":"## Biorxiv: body text","8af0ccc0":"You can reused the `format_authors` function here:","338e5a50":"Let's first probe what the `body_text` dictionary looks like:","f544de86":"Unhide the cell below to find the definition of the following functions:\n* `load_files(dirname)`\n* `generate_clean_df(all_files)`","2a5011fb":"## Biorxiv: Metadata","025af137":"Let's take a look at each of the correspond values:","b6c8350b":"The function below lets you display the body text in one line (unhide to see exactly the same as above):","1060bc40":"We take a look at the first part of the `body_text` content. As you will notice, the body text is separated into a list of small subsections, each containing a `section` and a `text` key. Since multiple subsection can have the same section, we need to first group each subsection before concatenating everything.","4a76117a":"## Generate CSV: Custom (PMC), Commercial, Non-commercial licenses","368413e1":"## Biorxiv: Abstract","5624d156":"The `format_name` and `format_affiliation` functions:","0d87207c":"## Biorxiv: bibliography","8d478217":"Let's see what the grouped section titles are for the example above:","195a1445":"Let's first see what keys are contained in the `metadata` dictionary:","75608e91":"Now, let's take as an example a slightly longer list of authors:","ac0bb894":"The following example shows what the final result looks like, after we format each section title with its content:","5822cb9d":"Here, I provide the function `format_authors` that let you format a list of authors to get a final string, with the optional argument of showing the affiliation:","f92334cf":"## About this notebook\n\nIn this notebook, I quickly explore the `biorxiv` subset of the papers. Since it is stored in JSON format, the structure is likely too complex to directly perform analysis. Thus, I not only explore the structure of those files, but I also provide the following helper functions for you to easily format inner dictionaries from each file:\n* `format_name(author)`\n* `format_affiliation(affiliation)`\n* `format_authors(authors, with_affiliation=False)`\n* `format_body(body_text)`\n* `format_bib(bibs)`\n\nFeel free to reuse those functions for your own purpose! If you do, please leave a link to this notebook.\n\nThroughout the EDA, I show you how to use each of those files. At the end, I show you how to generate a clean version of the `biorxiv` as well as all the other datasets, which you can directly use by choosing this notebook as a data source (\"File\" -> \"Add or upload data\" -> \"Kernel Output File\" tab -> search the name of this notebook).\n\n### Update Log\n\n* V9: First release.\n* V10: Updated paths to include the [14k new papers](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge\/discussion\/137474).","bbd3a2a3":"## Biorxiv: Exploration\n\nLet's first take a quick glance at the `biorxiv` subset of the data. We will also use this opportunity to load all of the json files into a list of **nested** dictionaries (each `dict` is an article).","34c45a89":"## Biorxiv: Generate CSV\n\nIn this section, I show you how to manually generate the CSV files. As you can see, it's now super simple because of the `format_` helper functions. In the next sections, I show you have to generate them in 3 lines using the `load_files` and `generate_clean_dr` helper functions."}}