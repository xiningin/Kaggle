{"cell_type":{"fb99f1e9":"code","988dd9e7":"code","1c430e4b":"code","b78fd825":"code","f42ad760":"code","e432672a":"code","ed3b6a70":"markdown"},"source":{"fb99f1e9":"#import\nimport pandas as pd","988dd9e7":"#load dataset\nuser_data = pd.read_csv(\"..\/input\/customer-predictive-analytics\/ratings.csv\")\nuser_data.head(10)","1c430e4b":"#building the affinity score\n\n#list of unique items\nitemsList = list(set(user_data[\"ItemId\"].tolist()))\n\n#user counts\nuserCount = len(set(user_data[\"ItemId\"].tolist()))\n\n#empty dataframe for affinity scores for items\nitemAffinity = pd.DataFrame(columns = (\"item1\", \"item2\", \"score\"))\nrowCount = 0\nprint(itemAffinity)","b78fd825":"#for each item in the list, compare with other items\nfor index1 in range(len(itemsList)):\n    #list of users who bought item1\n    item1_users = user_data[user_data.ItemId == \\\n                               itemsList[index1]][\"userId\"].tolist()\n    print(\"Users who bought item 1\", item1_users)\n    \n    #item2 - items that are not item1 or those that are not analyzed already\n    for index2 in range(index1, len(itemsList)):\n        if index1 == index2:\n            continue\n            \n        #list of users who bought item2\n        item2_users = user_data[user_data.ItemId == \\\n                            itemsList[index2]][\"userId\"].tolist()\n        print(\"Users who bought item 2\", item2_users)\n        \n        #score = common list of users divided by the total users\n        commonUsers = len(set(item1_users).intersection(set(item2_users)))\n        score = commonUsers \/ userCount\n\n        #add a score for item1, item2\n        itemAffinity.loc[rowCount] = [itemsList[index1], itemsList[index2], \\\n                                      score]\n        rowCount += 1\n        \n        #add a score for item2, item1\n        #the same score would apply irrespective of the sequence.\n        itemAffinity.loc[rowCount] = [itemsList[index2], itemsList[index1], \\\n                                      score]\n        rowCount +=1","f42ad760":"#display result\nitemAffinity.head(10)","e432672a":"#recommending items\nsearchItem = 5001\nrecommendList = itemAffinity[itemAffinity.item1 == searchItem] \\\n                [[\"item2\",\"score\"]].sort_values(\"score\", ascending=[0])\n        \nprint(\"Recommendations for item 5001:\\n\", recommendList)","ed3b6a70":"# Recommending Items to Users\n\nIn this case, collaborative filtering is used (using the list of which users bought which items and build an affinity score between items). When a customers buys an item, this affinity score is used to recommend other items to the customer "}}