{"cell_type":{"2602088b":"code","b55534a7":"code","ef7f4bdd":"code","6dbe1158":"code","4b2bc40f":"code","d6d85f2b":"code","9756c64a":"code","3b84d521":"code","4cee845a":"code","28345f81":"code","1a86ddaa":"code","4c54c4e1":"code","e93fc78a":"code","4b529cb4":"code","fd3f38a7":"code","4432a90f":"code","954eb05c":"code","8db66b1c":"code","5ff257c0":"code","5830611b":"code","2dce3cb8":"code","04ef1721":"code","ed941f8d":"code","56ce4c59":"code","58ed2e75":"code","ca8d00f6":"markdown","999120db":"markdown","34fe30bc":"markdown","6cc77581":"markdown","0316fa37":"markdown","4a19ad58":"markdown","265fb1d0":"markdown","55bf8445":"markdown"},"source":{"2602088b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt, matplotlib.image as mpimg\nfrom scipy.sparse import lil_matrix\nfrom sklearn import svm\nfrom sklearn.decomposition import PCA\nimport sklearn.discriminant_analysis","b55534a7":"data = pd.read_csv(\"..\/input\/train.csv\")\ndata.shape","ef7f4bdd":"i = 6\nimage = np.array(data.iloc[i,1:])\nimage = image.reshape([28, 28])\nplt.imshow(image, cmap='gray')\nplt.title(data.iloc[i,0])","6dbe1158":"train_n = 5000\ntrain_labels = np.array(data.iloc[:train_n,0])\ntrain = lil_matrix(np.array(data.iloc[:train_n, 1:]), dtype = 'int32')\ntrain_labels.shape, train.shape","4b2bc40f":"test_n = 10000\ntest_labels = np.array(data.iloc[train_n : train_n + test_n, 0])\ntest = lil_matrix(np.array(data.iloc[train_n : train_n + test_n, 1:]), dtype = 'int32')\ntest_labels.shape, test.shape","d6d85f2b":"clf = svm.SVC(gamma='scale')\nclf.fit(train, train_labels)","9756c64a":"clf.score(test, test_labels)","3b84d521":"data_simple = (np.array(data)[:,1:] >= 120).astype(int)\ndata_simple.shape","4cee845a":"i = 3\nimage = data_simple[i,:]\nimage = image.reshape([28, 28])\nplt.imshow(image, cmap='gray')\nplt.title(data.iloc[i,0])","28345f81":"train_n = 32000\ntrain_labels = np.array(data.iloc[:train_n,0])\ntrain = data_simple[:train_n]\ntrain_labels.shape, train.shape","1a86ddaa":"test_n = 10000\ntest_labels = np.array(data.iloc[train_n : train_n + test_n, 0])\ntest = data_simple[train_n : train_n + test_n]\ntest_labels.shape, test.shape","4c54c4e1":"clf2 = svm.SVC(gamma='scale')\nclf2.fit(train, train_labels)","e93fc78a":"clf2.score(test, test_labels)","4b529cb4":"pca = PCA(0.65)\npca.fit(train)\npca.n_components_","fd3f38a7":"train_pca = pca.transform(train)\ntest_pca = pca.transform(test)\ntrain_pca.shape, test_pca.shape","4432a90f":"clf3 = svm.SVC(gamma='scale')\nclf3.fit(train_pca, train_labels)","954eb05c":"clf3.score(test_pca, test_labels)","8db66b1c":"train = data_simple\ntrain_labels = np.array(data.iloc[:,0])\ntest = (pd.read_csv('..\/input\/test.csv') >= 120).astype(int)\ntrain.shape, train_labels.shape, test.shape","5ff257c0":"pca = PCA(0.65)\npca.fit(train)\npca.n_components_","5830611b":"train_pca = pca.transform(train)\ntest_pca = pca.transform(test)\ntrain_pca.shape, test_pca.shape","2dce3cb8":"clf4 = svm.SVC(gamma='scale')\nclf4.fit(train_pca, train_labels)","04ef1721":"pred = clf4.predict(test_pca)\npred.shape","ed941f8d":"r = np.array([range(1,28001), pred], dtype = int).transpose()\nr = pd.DataFrame(r)\nr.columns = [\"ImageId\", \"Label\"]\nr","56ce4c59":"r.to_csv(\"submit.csv\", index = False)","58ed2e75":"help(r.to_csv)","ca8d00f6":"Seeing the images:","999120db":"With pca at 95% we obtain a score of 93.66%!!!\n\nAt 90% confidence it goes up to 94.09%\n\nAt 80% confidence it goes up to 94.99%!!!\n\nAt 60% confidence we get a score of 95.41%!!!!!\n\nIt starts going down after that...\n\nWith 65% confidence and with the 32000 entries on the training set the accuracy goes up to **97.86%**","34fe30bc":"# First Attempt","6cc77581":"The first score was 15.3%","0316fa37":"# Now let's convert the pixels to binary","4a19ad58":"# Time to prepare a submission","265fb1d0":"With a pixel treshold of 120 the score jumped to 92.28%!!!\n\nWith threshold in 0 the score is 92.26%\n\nWith threshold in 200 it decreases to 90%","55bf8445":"# Now let's try by applying pca previously"}}