{"cell_type":{"859ad0f2":"code","201a7edb":"code","21836e98":"code","a6cc5656":"code","91c49a18":"code","8797d1f8":"markdown","3f0b1e0c":"markdown","3daf3be8":"markdown","a1e8ad63":"markdown"},"source":{"859ad0f2":"import os\nimport numpy as np\nimport pandas as pd\nimport pydicom\n\nfrom skimage.measure import label,regionprops\nfrom skimage.segmentation import clear_border\nimport matplotlib.pyplot as plt","201a7edb":"! pip install git+https:\/\/github.com\/SoufianeDataFan\/lungmask","21836e98":"d = pydicom.dcmread('..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00007637202177411956430\/19.dcm')\nimg = d.pixel_array\nfig = plt.figure(figsize=(12, 12))\nplt.imshow(img)","a6cc5656":"from lungmask import mask\nimport SimpleITK as sitk\n\ndef get_mask(filename, plot_mask=False, return_val=False): \n    # Let's an example of a CT scan\n    input_image = sitk.ReadImage(filename)\n    mask_out = mask.apply(input_image)[0]  #default model is U-net(R231)\n    if plot_mask: \n        fig = plt.figure(figsize=(12, 12))\n        plt.imshow(mask_out)\n    if return_val:\n        return mask_out","91c49a18":"img_mask = get_mask('..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00007637202177411956430\/19.dcm',\n                    plot_mask=True,\n                    return_val=True)\n","8797d1f8":"I made this kernel for generating masks using deep learning. I was inspired by the discussion in this thread: https:\/\/www.kaggle.com\/c\/osic-pulmonary-fibrosis-progression\/discussion\/166123\n\nUsing a pre-trained model, we can get a lung mask pretty easily. Let's check this out: ","3f0b1e0c":"### **Original Lung CT-Scan**","3daf3be8":"### **Mask using U-net(R231) Lung CT-Scan**","a1e8ad63":"As mentioned in the discussion forum, lung mask and segmentation seems like the first step. You can use a morphological approach or deep learning to generate ct-scans masks. \n\nIf you want to use a morphological approach, please refer to [this kernel ](https:\/\/www.kaggle.com\/miklgr500\/unsupervise-lung-detection) by [@miklgr500](https:\/\/www.kaggle.com\/miklgr500)\n\nThis DL-based approach uses PyTorch and GPU for faster computation. Otherwise, it will force it on the CPU. "}}