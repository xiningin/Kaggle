{"cell_type":{"856b7b57":"code","b2347a38":"code","547def59":"code","194024df":"code","ed2413ff":"code","ddb34974":"code","f76cd843":"code","3f0277b0":"code","334c8993":"code","6db03548":"code","bf61faf5":"code","ae6b0a75":"code","473efa8a":"code","481aa469":"code","9e85f3d0":"code","21e4e8a9":"code","959c694a":"code","c3623609":"code","6b6216ca":"code","28f1dd8e":"code","41e6e7e1":"code","3748545a":"code","7f83fadd":"code","15047939":"code","232452d9":"code","99fdbf62":"code","b45cb241":"code","56226947":"code","711d1635":"code","e7f264cc":"code","6e880709":"code","0f3ca712":"code","85f141b1":"code","77bbd051":"code","e1cd038f":"code","38a162b9":"code","dfb20e72":"code","cff2cc67":"code","16d3478c":"code","a29a5b0e":"code","c1a94fe2":"code","1cae8201":"code","e690b5fd":"code","af8cb8df":"code","85e08474":"code","a30f1059":"code","f88e039d":"code","2351c133":"code","ff6c3281":"code","05aa81c9":"code","f5dd01c2":"code","475bf62b":"code","6e2d4bc5":"markdown","7976e346":"markdown","c3bdf78f":"markdown","c7452c34":"markdown","874bbe88":"markdown","0606cf4d":"markdown","c2ca5b97":"markdown","6460564a":"markdown","8efab413":"markdown","e82a34ea":"markdown","e46f2ed3":"markdown","0ca0e943":"markdown","535e2df1":"markdown","38e25578":"markdown","bc946e90":"markdown","4a91d880":"markdown","344c9706":"markdown","54caca6b":"markdown","1ef177f1":"markdown","959c67e8":"markdown"},"source":{"856b7b57":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2347a38":"# import the necessary libraries\nimport numpy as np \nimport pandas as pd \nimport os\n\n# Visualisation libraries\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\nimport pycountry\nfrom plotly.subplots import make_subplots\n\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode, iplot \nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\n!pip install chart_studio\nimport chart_studio.plotly as py\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\n#py.init_notebook_mode(connected=True)\n# color pallette\ncnf, dth, rec, act,wth,sth = '#393e46', '#ff2e63', '#21bf73', '#fe9801','#456fe3','#78ffee' \n#Geographical Plotting\nimport folium\nfrom folium import Choropleth, Circle, Marker\nfrom folium import plugins\nfrom folium.plugins import HeatMap, MarkerCluster\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters() \n\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\n#Racing Bar Chart\n!pip install bar_chart_race\nimport bar_chart_race as bcr\nfrom IPython.display import display_html\n# Increase the default plot size and set the color scheme\nplt.rcParams['figure.figsize'] = 8, 5\nplt.style.use(\"fivethirtyeight\")# for pretty graphs\n\n\n# Disable warnings \nimport warnings\nwarnings.filterwarnings('ignore')","547def59":"path='\/kaggle\/input\/air-quality-data-in-india\/'\nstation_hour=pd.read_csv(path+'station_hour.csv')\nstation_day=pd.read_csv(path+'station_day.csv')\nstations=pd.read_csv(path+'stations.csv')\ncity_day=pd.read_csv(path+'city_day.csv')\ncity_hour=pd.read_csv(path+'city_hour.csv')\ncity=pd.read_csv('\/kaggle\/input\/indian-cities-database\/Indian Cities Database.csv')","194024df":"display(\"City In India\")\ndisplay(city.head())\ndisplay(city.shape)","ed2413ff":"display(\"City Day in india\")\ndisplay(city_day.head())\ndisplay(city_day.shape)","ddb34974":"display(city_day.info())","f76cd843":"#determined ht emissing data\ndef Missing (X):\n    total = X.isnull().sum().sort_values(ascending = False)\n    percent = round(X.isnull().sum().sort_values(ascending = False)\/len(X)*100, 2)\n    missing = pd.concat([total, percent], axis = 1,keys= ['Total', 'Percent'])\n    return(missing) \n#plots number of dataframes side by side\ndef SideSide(*args):\n    html_str=''\n    for df in args:\n        html_str+=df.to_html()\n    display_html(html_str.replace('table','table style=\"display:inline\"'),raw = True)\n","3f0277b0":"# Fill empty values with NaN\ncity_day = city_day.fillna(np.nan)\n#finds missing values\nmissing_city_day = Missing(city_day)\nprint('CITY DAY DATA')\nSideSide(missing_city_day)\nprint('\\n\\n  MISSING  DATA ')\ncmap = sns.diverging_palette( 220 , 10 , as_cmap = True )\nplt.figure(figsize = (20,8));\nsns.heatmap(city_day.isnull(), yticklabels = False, cbar = False, cmap = cmap)","334c8993":"cities=city_day['City'].value_counts()\nprint('total number of cities in the dataset:',len(cities))\nprint(cities.index)\n","6db03548":"# Convert string to datetime 64\ncity_day['Date']=pd.to_datetime(city_day['Date'])\n","bf61faf5":"print(f\"The available data is between {city_day['Date'].min()} and {city_day['Date'].max()}\")","ae6b0a75":"# combining the PM2.5 and PM10 into one column \ncity_day['Particulate_Matter']=city_day['PM2.5']+city_day['PM10']","473efa8a":"# Combining the Benezene ,Toulene and Xylene levels into one column\ncity_day['poisionus']=city_day['Benzene']+city_day['Toluene']+city_day['Xylene']\ncity_day.drop(['Benzene','Toluene','Xylene'],axis=1)","481aa469":"city_day['AQI_Bucket'].value_counts()","9e85f3d0":"sns.countplot(city_day['AQI_Bucket'])","21e4e8a9":"primary_pollutants=['PM2.5','PM10','NO2','NOx','CO','SO2']\nsecondary_pollutants=['poisionus','O3']","959c694a":"city_day.set_index('Date',inplace=True)\naxes = city_day[primary_pollutants].plot(marker='.', alpha=0.5, linestyle='None', figsize=(16, 20), subplots=True)\nfor ax in axes:\n    \n    ax.set_xlabel('Years')\n    ax.set_ylabel('ug \/ m3')","c3623609":"temp=city_day.groupby('Date')['PM2.5','PM10','NO2','NOx','CO','SO2'].sum().reset_index()\ntemp=temp.melt(id_vars=\"Date\",value_vars=['PM2.5','PM10','NO2','NOx','CO','SO2'],var_name='Pollutants',value_name='Count')\ntemp.head()\nfig=px.area(temp,x='Date',y='Count',color='Pollutants',height=600,title='Primary Pollutant over time',color_discrete_sequence=[cnf, dth, rec, act,wth,sth])\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","6b6216ca":"temp=city_day.groupby('Date')['poisionus','O3'].sum().reset_index()\ntemp=temp.melt(id_vars=\"Date\",value_vars=['poisionus','O3'],var_name='Pollutants',value_name='Count')\ntemp.head()\nfig=px.area(temp,x='Date',y='Count',color='Pollutants',height=600,title='Secondary Pollutant over time',color_discrete_sequence=[cnf, dth])\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","28f1dd8e":"def trend_plot(dataframe,value):\n    \n    # Prepare data\n    df['year'] = [d.year for d in df.Date]\n    df['month'] = [d.strftime('%b') for d in df.Date]\n    years = df['year'].unique()\n\n    # Draw Plot\n    fig, axes = plt.subplots(1, 2, figsize=(14,6), dpi= 80)\n    sns.boxplot(x='year', y=value, data=df, ax=axes[0])\n    sns.pointplot(x='month', y=value, data=df.loc[~df.year.isin([2015, 2020]), :])\n\n    # Set Title\n    axes[0].set_title('Year-wise Box Plot \\n(The Trend)', fontsize=18); \n    axes[1].set_title('Month-wise Plot \\n(The Seasonality)', fontsize=18)\n    plt.show()","41e6e7e1":"city_day.reset_index(inplace=True)\ndf = city_day.copy()\nvalue='NO2'\ntrend_plot(df,value)","3748545a":"city_day.reset_index(inplace=True)\ndf = city_day.copy()\nvalue='PM10'\ntrend_plot(df,value)","7f83fadd":"city_day.reset_index(inplace=True)\ndf = city_day.copy()\nvalue='poisionus'\ntrend_plot(df,value)","15047939":"def max_polluted_city(pollutant):\n    x1 = city_day[[pollutant,'City']].groupby([\"City\"]).mean().sort_values(by=pollutant,ascending=False).reset_index()\n    x1[pollutant] = round(x1[pollutant],2)\n    return x1[:10].style.background_gradient(cmap='OrRd')","232452d9":"#source: https:\/\/stackoverflow.com\/questions\/38783027\/jupyter-notebook-display-two-pandas-tables-side-by-side\nfrom IPython.display import display_html\ndef display_side_by_side(*args):\n    html_str=''\n    for df in args:\n        html_str+=df.render()\n    display_html(html_str.replace('table','table style=\"display:inline\"'),raw=True)","99fdbf62":"pm2_5 = max_polluted_city('PM2.5')\npm10 = max_polluted_city('PM10')\nno2 = max_polluted_city('NO2')\nso2 = max_polluted_city('SO2')\nco = max_polluted_city('CO')\nposinious = max_polluted_city('poisionus')\n\n\ndisplay_side_by_side(pm2_5,pm10,no2,so2,co,posinious)","b45cb241":"full_grouped=city_day.groupby(['Date','City',])['PM2.5','PM10','NO2','NOx','CO','SO2','poisionus','O3','AQI'].sum().reset_index()\n","56226947":"day_wise=full_grouped.groupby('Date')['NO2','AQI'].sum().reset_index()\nday_wise['No.of city']=full_grouped[full_grouped['NO2']!=0].groupby('Date')['City'].unique().apply(len).values\nday_wise['No.of City']=full_grouped[full_grouped['AQI']!=0].groupby('Date')['City'].unique().apply(len).values\nfig_c=px.line(day_wise,x=\"Date\",y=\"NO2\",color_discrete_sequence=[act])\nfig_d=px.line(day_wise,x=\"Date\",y=\"AQI\",color_discrete_sequence=[dth])\nfig=make_subplots(rows=1,cols=2,shared_xaxes=False,horizontal_spacing=0.1,subplot_titles=('NO2 Present in Air','AQI'))\nfig.add_trace(fig_c['data'][0],row=1,col=1)\nfig.add_trace(fig_d['data'][0],row=1,col=2)\nfig.update_layout(height=460)\nfig.show()\n","711d1635":"City_wise=full_grouped[full_grouped['Date']==max(full_grouped['Date'])].reset_index(drop=True).drop('Date',axis=1)\n#group by City\nCity_wise=City_wise.groupby('City')['NO2','AQI'].sum().reset_index()","e7f264cc":"fig=px.scatter(City_wise.sort_values('AQI',ascending=False).iloc[:15,:],x=\"AQI\",y='NO2',color='City',size='AQI',height=700,text='City',log_x=True,log_y=True,title=\"NO2 Vs AQI (Scale is in log10)\")\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","6e880709":"City_wise=full_grouped[full_grouped['Date']==max(full_grouped['Date'])].reset_index(drop=True).drop('Date',axis=1)\n#group by City\nCity_wise=City_wise.groupby('City')['AQI','poisionus'].sum().reset_index()","0f3ca712":"fig=px.scatter(City_wise.sort_values('AQI',ascending=False).iloc[:15,:],x=\"AQI\",y='poisionus',color='City',size='AQI',height=700,text='City',log_x=True,log_y=True,title=\"Poisionus Vs AQI (Scale is in log10)\")\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","85f141b1":"cities = ['Ahmedabad','Delhi','Bengaluru','Mumbai','Hyderabad','Chennai']\n\nfiltered_city_day = city_day[city_day['Date'] >= '2019-01-01']\nAQI = filtered_city_day[filtered_city_day.City.isin(cities)][['Date','City','AQI','AQI_Bucket']]\nAQI.head()","77bbd051":"fig=px.line(full_grouped,x='Date',y='AQI',color='City',height=600,title='AQI',color_discrete_sequence=px.colors.cyclical.mygbm)\nfig.show()\n","e1cd038f":"full_latest=city_day[city_day['Date']==max(city_day['Date'])]\nfig=px.treemap(full_latest.sort_values(by='AQI',ascending=False).reset_index(drop=True),path=[\"City\"],values='AQI',height=700,title=\"AOI of City\",color_discrete_sequence=px.colors.qualitative.Dark2)\nfig.data[0].textinfo='label+text+value'\nfig.show()\n\n\n","38a162b9":"AQI_pivot = AQI.pivot(index='Date', columns='City', values='AQI')\nAQI_pivot.fillna(method='bfill',inplace=True)\n#Source code for racing barchart: https:\/\/github.com\/dexplo\/bar_chart_race\nAQI_2020 = AQI_pivot[AQI_pivot.index > '2019-12-31']\nbcr_html = bcr.bar_chart_race(df=AQI_2020, filename=None, period_length=300,orientation='v',figsize=(8, 6),bar_label_size=7,tick_label_size=7,title='AQI levels in 2020')\ndisplay_html(bcr_html)\n","dfb20e72":"AQI_beforeLockdown = AQI_pivot['2020-01-01':'2020-03-25']\nAQI_afterLockdown = AQI_pivot['2020-03-26':'2020-05-01']","cff2cc67":"print(AQI_beforeLockdown.mean())\nprint(AQI_afterLockdown.mean())","16d3478c":"# Helper functions\n\n#source: http:\/\/nicolasfauchereau.github.io\/climatecode\/posts\/drawing-a-gauge-with-matplotlib\/\nfrom matplotlib.patches import Circle, Wedge, Rectangle\n\ndef degree_range(n): \n    start = np.linspace(0,180,n+1, endpoint=True)[0:-1]\n    end = np.linspace(0,180,n+1, endpoint=True)[1::]\n    mid_points = start + ((end-start)\/2.)\n    return np.c_[start, end], mid_points\n\ndef rot_text(ang): \n    rotation = np.degrees(np.radians(ang) * np.pi \/ np.pi - np.radians(90))\n    return rotation","a29a5b0e":"#source: http:\/\/nicolasfauchereau.github.io\/climatecode\/posts\/drawing-a-gauge-with-matplotlib\/\nfrom matplotlib.patches import Circle, Wedge, Rectangle\ndef gauge(labels=['GOOD','SATISFACTORY','MODERATE','POOR','VERY POOR','EXTREME'], \\\n          colors='jet_r', arrow=1, title='', fname=False): \n    \n    \"\"\"\n    some sanity checks first\n    \n\n\"\"\"\n    \n    N = len(labels)\n    \n    if arrow > N: \n        raise Exception(\"\\n\\nThe category ({}) is greated than \\\n        the length\\nof the labels ({})\".format(arrow, N))\n \n    \n    \"\"\"\n    if colors is a string, we assume it's a matplotlib colormap\n    and we discretize in N discrete colors \n    \"\"\"\n    \n    if isinstance(colors, str):\n        cmap = cm.get_cmap(colors, N)\n        cmap = cmap(np.arange(N))\n        colors = cmap[::-1,:].tolist()\n    if isinstance(colors, list): \n        if len(colors) == N:\n            colors = colors[::-1]\n        else: \n            raise Exception(\"\\n\\nnumber of colors {} not equal \\\n            to number of categories{}\\n\".format(len(colors), N))\n\n    \"\"\"\n    begins the plotting\n    \"\"\"\n    \n    fig, ax = plt.subplots()\n\n    ang_range, mid_points = degree_range(N)\n\n    labels = labels[::-1]\n    \n    \"\"\"\n    plots the sectors and the arcs\n    \"\"\"\n    patches = []\n    for ang, c in zip(ang_range, colors): \n        # sectors\n        patches.append(Wedge((0.,0.), .4, *ang, facecolor='w', lw=2))\n        # arcs\n        patches.append(Wedge((0.,0.), .4, *ang, width=0.10, facecolor=c, lw=2, alpha=0.5))\n    \n    [ax.add_patch(p) for p in patches]\n\n    \n    \"\"\"\n    set the labels (e.g. 'LOW','MEDIUM',...)\n    \"\"\"\n\n    for mid, lab in zip(mid_points, labels): \n\n        ax.text(0.35 * np.cos(np.radians(mid)), 0.35 * np.sin(np.radians(mid)), lab, \\\n            horizontalalignment='center', verticalalignment='center', fontsize=14, \\\n            fontweight='bold', rotation = rot_text(mid))\n\n    \"\"\"\n    set the bottom banner and the title\n    \"\"\"\n    r = Rectangle((-0.4,-0.1),0.8,0.1, facecolor='w', lw=2)\n    ax.add_patch(r)\n    \n    ax.text(0, -0.05, title, horizontalalignment='center', \\\n         verticalalignment='center', fontsize=22, fontweight='bold')\n\n    \"\"\"\n    plots the arrow now\n    \"\"\"\n    \n    pos = mid_points[abs(arrow - N)]\n    \n    ax.arrow(0, 0, 0.225 * np.cos(np.radians(pos)), 0.225 * np.sin(np.radians(pos)), \\\n                 width=0.04, head_width=0.09, head_length=0.1, fc='k', ec='k')\n    \n    ax.add_patch(Circle((0, 0), radius=0.02, facecolor='k'))\n    ax.add_patch(Circle((0, 0), radius=0.01, facecolor='w', zorder=11))\n\n    \"\"\"\n    removes frame and ticks, and makes axis equal and tight\n    \"\"\"\n    \n    ax.set_frame_on(False)\n    ax.axes.set_xticks([])\n    ax.axes.set_yticks([])\n    ax.axis('equal')\n    plt.tight_layout()\n    if fname:\n        fig.savefig(fname, dpi=200)\n","c1a94fe2":"display(\"Ahmedabad's AQI levels\")\n\ngauge(labels=['Good','Satisfactory','Moderate','Poor','Very Poor','Extreme'], \n      colors=['#007A00','#90EE90','#ffff00','#FF9900','#ff0000','#CC0000'], arrow=5, title='Ahmedabad AQI before Lockdown') \n\ngauge(labels=['Good','Satisfactory','Moderate','Poor','Very Poor','Extreme'], \n      colors=['#007A00','#90EE90','#ffff00','#FF9900','#ff0000','#CC0000'], arrow=3, title='Ahmedabad AQI After Lockdown') ","1cae8201":"display(\"Delhi's AQI levels\")\n\ngauge(labels=['Good','Satisfactory','Moderate','Poor','Very Poor','Extreme'], \n      colors=['#007A00','#90EE90','#ffff00','#FF9900','#ff0000','#CC0000'], arrow=5, title='Delhi AQI before Lockdown') \n\ngauge(labels=['Good','Satisfactory','Moderate','Poor','Very Poor','Extreme'], \n      colors=['#007A00','#90EE90','#ffff00','#FF9900','#ff0000','#CC0000'], arrow=3, title='Delhi AQI After Lockdown') ","e690b5fd":"display(\"Patna's AQI levels\")\n\ngauge(labels=['Good','Satisfactory','Moderate','Poor','Very Poor','Extreme'], \n      colors=['#007A00','#90EE90','#ffff00','#FF9900','#ff0000','#CC0000'], arrow=5, title='Patna AQI before Lockdown') \n\ngauge(labels=['Good','Satisfactory','Moderate','Poor','Very Poor','Extreme'], \n      colors=['#007A00','#90EE90','#ffff00','#FF9900','#ff0000','#CC0000'], arrow=3, title='Patna AQI After Lockdown') ","af8cb8df":"display(\"Chennai's AQI levels\")\n\ngauge(labels=['Good','Satisfactory','Moderate','Poor','Very Poor','Extreme'], \n      colors=['#007A00','#90EE90','#ffff00','#FF9900','#ff0000','#CC0000'], arrow=5, title='Chennai AQI before Lockdown') \n\ngauge(labels=['Good','Satisfactory','Moderate','Poor','Very Poor','Extreme'], \n      colors=['#007A00','#90EE90','#ffff00','#FF9900','#ff0000','#CC0000'], arrow=3, title='Chennai AQI After Lockdown') ","85e08474":"#city_day.set_index('Date',inplace=True)\nstart_date1='2018-01-01'\nend_date1='2018-05-01'\n\nmask1 = (city_day['Date'] >= start_date1) & (city_day['Date']  <= end_date1)\npollutants_filtered_2018= city_day.loc[mask1]\npollutants_filtered_2018.fillna(method='bfill',inplace=True)\npollutants_filtered_2018.set_index('Date',inplace=True);\n\nstart_date2 = '2019-01-01'\nend_date2 = '2019-05-01'\n\nmask2 = (city_day['Date'] >= start_date2) & (city_day['Date']  <= end_date2)\npollutants_filtered_2019 = city_day.loc[mask2]\npollutants_filtered_2019.fillna(method='bfill',inplace=True)\npollutants_filtered_2019.set_index('Date',inplace=True);\n\nstart_date3 = '2020-01-01'\nend_date3 = '2020-05-01'\n\nmask3 = (city_day['Date'] >= start_date3) & (city_day['Date']  <= end_date3)\npollutants_filtered_2020 = city_day.loc[mask3]\npollutants_filtered_2020.fillna(method='bfill',inplace=True)\npollutants_filtered_2020.set_index('Date',inplace=True);\n\n\ndf1 = pollutants_filtered_2018[pollutants_filtered_2018.City.isin(cities)][['City','NO2','SO2','PM2.5','CO']]\ndf2 = pollutants_filtered_2019[pollutants_filtered_2019.City.isin(cities)][['City','NO2','SO2','PM2.5','CO']]\ndf3 = pollutants_filtered_2020[pollutants_filtered_2020.City.isin(cities)][['City','NO2','SO2','PM2.5','CO']]\n","a30f1059":"def pollution_comparison(city):\n    \"\"\"\n    Function to plot graph comparing pollutin levels between (Jan-May)2019 and (Jan-May)2020\n    \n    \"\"\"\n    \n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=df1.index, y=df1[df1['City']==city]['NO2'],\n                    line=dict(dash='solid',color='green'),name='NO2'))\n    fig.add_trace(go.Scatter(x=df1.index, y=df1[df1['City']==city]['SO2'],\n                    line=dict(dash='dot',color='red'),name='SO2'))\n    fig.add_trace(go.Scatter(x=df1.index, y=df1[df1['City']==city]['PM2.5'],\n                    line=dict(dash='dashdot',color='dodgerblue'),name='Particulate_Matter'))\n    fig.add_trace(go.Scatter(x=df1.index, y=df1[df1['City']==city]['CO'],\n                    line=dict(dash='longdashdot'),mode='lines',name='CO'))\n    fig.update_layout(title_text=city+' 2018 ',plot_bgcolor='white')\n    fig.update_xaxes(rangeslider_visible=True,zeroline=True,zerolinewidth=1, zerolinecolor='Black')\n    fig.show()\n\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=df2.index, y=df2[df2['City']==city]['NO2'],\n                    line=dict(dash='solid',color='green'),name='NO2'))\n    fig.add_trace(go.Scatter(x=df2.index, y=df2[df2['City']==city]['SO2'],\n                    line=dict(dash='dot',color='red'),name='SO2'))\n    fig.add_trace(go.Scatter(x=df2.index, y=df2[df2['City']==city]['PM2.5'],\n                    line=dict(dash='dashdot',color='dodgerblue'),name='Particulate_Matter'))\n    fig.add_trace(go.Scatter(x=df2.index, y=df2[df2['City']==city]['CO'],\n                    line=dict(dash='longdashdot'),mode='lines',name='CO'))\n    fig.update_layout(title_text=city+' 2019 ',plot_bgcolor='white')\n    fig.update_xaxes(rangeslider_visible=True,zeroline=True,zerolinewidth=1, zerolinecolor='Black')\n    fig.show()\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=df3.index, y=df3[df3['City']==city]['NO2'],\n                    line=dict(dash='solid',color='green'),name='NO2'))\n    fig.add_trace(go.Scatter(x=df3.index, y=df3[df3['City']==city]['SO2'],\n                    line=dict(dash='dot',color='red'),name='SO2'))\n    fig.add_trace(go.Scatter(x=df3.index, y=df3[df3['City']==city]['PM2.5'],\n                    line=dict(dash='dashdot',color='dodgerblue'),name='Particulate_Matter'))\n    fig.add_trace(go.Scatter(x=df3.index, y=df3[df3['City']==city]['CO'],\n                    line=dict(dash='longdashdot'),mode='lines',name='CO'))\n    fig.update_layout(title_text=city+' 2020 ',plot_bgcolor='white')\n    fig.update_xaxes(rangeslider_visible=True,zeroline=True,zerolinewidth=1, zerolinecolor='Black')\n    fig.show()","f88e039d":"pollution_comparison('Ahmedabad')","2351c133":"pollution_comparison('Delhi')","ff6c3281":"pollution_comparison('Chennai')","05aa81c9":"pollution_comparison('Bengaluru')","f5dd01c2":"df11 = pollutants_filtered_2019[['City','AQI']]\ndf22 = pollutants_filtered_2020[['City','AQI']]\n\ndf_2019_coord = df11.groupby('City')['AQI'].mean().to_frame().reset_index()\ndf_2020_coord = df22.groupby('City')['AQI'].mean().to_frame().reset_index()\n\ndf_2019_AQI = pd.merge(df_2019_coord,city,on='City')\ndf_2019_AQI['AQI'] = df_2019_AQI['AQI'].round(0)\ndf_2020_AQI = pd.merge(df_2020_coord,city,on='City')\ndf_2020_AQI['AQI'] = df_2020_AQI['AQI'].round(0)","475bf62b":"m = plugins.DualMap(location=(22.9734, 78.6569), tiles=None, zoom_start=5)\n\nfolium.TileLayer('Stamen Toner').add_to(m)\nfolium.TileLayer('cartodbpositron').add_to(m)\n\n\nfg_1 = folium.FeatureGroup(name='2019').add_to(m.m1)\nfg_2 = folium.FeatureGroup(name='2020').add_to(m.m2)\n\n\n\nfor lat, lon, value, name in zip(df_2019_AQI['Lat'], df_2019_AQI['Long'], df_2019_AQI['AQI'], df_2019_AQI['City']):\n    folium.CircleMarker([lat, lon],\n                        radius=10,\n                        icon=folium.Icon(color='red'),\n                        popup = ('<strong>City<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>AQI(Average)<\/strong>: ' + str(value) + '<br>'),\n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(fg_1)\n\n\n\n\n\nfor lat, lon, value, name in zip(df_2020_AQI['Lat'], df_2020_AQI['Long'], df_2020_AQI['AQI'], df_2020_AQI['City']):\n    folium.CircleMarker([lat, lon],\n                        radius=10,\n                        icon=folium.Icon(color='orange'),\n                        popup = ('<strong>City<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>AQI(Average)<\/strong>: ' + str(value) + '<br>'),\n                        fill_color='orange',\n                        fill_opacity=0.7 ).add_to(fg_2)\n\n\nfolium.LayerControl(collapsed=False).add_to(m)\n\nm\n","6e2d4bc5":"# An analysis of the COVID-19's effect on the pollution level in India","7976e346":"![https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQABDfTfhEK4PF7oICXtEKzvq6nyxMdw1nyNw&usqp=CAU](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQABDfTfhEK4PF7oICXtEKzvq6nyxMdw1nyNw&usqp=CAU)","c3bdf78f":"*** Primary Pollutants:** A primary pollutant is an air pollutant emitted directly from a source. \nExample: Carbon Monoxide, Carbon Dioxide, Sulphur Dioxide , Most hydrocarbons and Most suspended particles.\n\n* **Secondary Pollutant:** A secondary pollutant is not directly emitted as such, but forms when other pollutanrs react in the atmosphere.","c7452c34":"# Import Libraries\n","874bbe88":"# AQI in 2020\n\nLet plot a racing car chart to see overall AQI in 2020 .Please refer to [https:\/\/github.com\/dexplo\/bar_chart_race](https:\/\/github.com\/dexplo\/bar_chart_race)for the code","0606cf4d":"# Cities in the dataset\n","c2ca5b97":"# Geographical Analysis Using Dual Maps","6460564a":"# **AQI before and after lockdown**","8efab413":"**Types of Air pollutants**\n\nFirst try and understand the various types of air pollutants in the datasets. \n![data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxASEhUSExIVFhUXFxkZGBcXGBgXGBgYGhcdFxgXFxoYHSggGholHRUVITEhJSorLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGy0lHyUtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKQBMgMBEQACEQEDEQH\/xAAbAAABBQEBAAAAAAAAAAAAAAAAAQIDBAUGB\/\/EAEIQAAIBAgMFBQUGBAQGAwEAAAECAwARBBIhBRMxQVEGImFxkRQygaGxI0JScsHRFRYzYkOS4fBTY4KTotKy4vFU\/8QAGwEBAAMBAQEBAAAAAAAAAAAAAAECBAMFBgf\/xAA2EQACAgEBBQYFAgcBAAMAAAAAAQIRAwQFEiExQRMiMlFhkRQVcYGhQlIGIzOx0eHwwVOS8f\/aAAwDAQACEQMRAD8AW1fXWfBhalgLVAC1AFqkBagC1AFqgBagC1AFqkBaoAWoQFqEhagC1SAtUALVJAWqAFqEhagC1AFqALUAWoAtQBagJ8LgpJDaNGY+AJqk8sIeJ0dMeDJk8Ks04uymMb\/Ct5so\/Ws8tfgXU1R2ZqZfpGzdl8YtrxE3NtCD62PCi12F9SXszUp+E0ouws5FzJGD01Pzrg9qY0+EWaI7FytcZIrP2NxYbKApH4swt89flXRbRw1ZzeyNRvVw+pO3YfEBSc6E\/hF\/qdKotp475M6fJsqV7yHR9hZyNZIx6moe1MfSLJWxcj\/Uh57By8pk9DUfNIftZPyTJ+9exVxHYrFr7uR\/JrH510jtLE+do4z2RnXKmY+N2XPF\/UiZR1I09RpWrHnx5PDJGLLpsuLxxaKlq6nAxZvePmfrWGXNnu4n3F9Ebtq2niUFqCgtQUFqCiSKB20VWbyF\/pXHNqcWFXkko\/VnXFp8uXwRbFmw0ie8jL+YEfWq4dZgz\/0pqX0ZbLpc2LjOLX2IrVoOFBagoLUFBagoLUFBagoLUA+KB2NlVm\/KCfpUOSXNkqEpeFN\/RWT\/AMLxH\/Am\/wC2\/wC1U7fF+5e6Onw+X9kv\/qyGWB195WX8wI+tXjOMuTspLHOPNNfYjtU2VSvkW8PsrESe5DIR1ym3qa5S1GOPOSO8NLmn4Yv2L8fZTGH\/AArebKP1ri9fgXU0rZepfT8kv8nY38Kf5\/8ASq\/McHm\/Yt8p1Pkvcik7J40f4V\/JlNWWvwPqVlsvUr9P5M3FbPmi\/qRuvmDb14V3hmhPwtMyZNPkx+KLRXtXQ5BagoLUFBago0uz2HhedVmYBD1NgTyW\/jWfVTnDG3Dma9DixzzKOTkepQRKgyooUDgFAA+VfONuTuXM+vjGMVUVwGYxmEblWCkI1mIuAbGxI5gcbVBJx8faSaNNGEjZlVpTJFJhwd2W7sg3IuStiGIIuLA3tQF09o5dbmCM58hRyS0S3\/rSEMLxHlYD31140BEe1GJy7zcKVtbIA+dicO8wZD+EmMAC17OOehAqz9qpohIweKbv3XKLRsiwwlkiYye9mdtBnJN+7oaA0n27iQqvuUIklmhjAz3EiytHEz\/2MEdiRw0te9AdNQBQDXAIINrc78PjUptciHVceR5Fj8hlcoAFztltwtfSvqMVqC3udHxWbdeSTjytnNze83mfrWKfiZ62PwL6HQZa3njUGWgoMtBQsceZgOpA9TauWabhjlNc0m\/Y6YoKWSMX1aO\/wmFSNcqgAeHPxNfi+s1WXVZHPJJs\/Q8OGGGO7FUPliVhZgCOh1rlizTwzU8baa8i04RmqkrRwu08II5WQcAdPKv2DZOslqtJDLPnyf2Pg9o6eODUShHlzK2WvSMVBloKDLQUGWgoMtAdBsfsnLMokZgiHUXFyR1sCLAjnWDPr4Y24pWz0tNsvJlipydL+5rRbbkheVRCDDFIIgI4zGQS0SJ9ozZHJMpuABbLXiTk5O2z6THjjjW7FUW5e0rqXBhLFC+YBlGVUMakC\/vNeXwGh4VUuRYvtHGcqS4fNeTdSKO\/kJm3Cse7bIW5krwNgSLVaMnF3F0VlCM1UlZDszE4Vdyy4TI2IWN4rlWJDFc3XKUVg5A5XtwrrPUZZqpSZwhpMMHcYos7a29NBiGQJmijijlcCNy2VnlEhzhgi5ViuFIu2oriaSDHdpphIsYjVGBs4Y5+L4bKVZSPuYhr6cR04gWsR2ib7IRRZi5iJDMBZZGkXj1G6PrQDE7VgybtYSzFlCHNZHVhKQ2ZlGn2DaqGGosTRAj\/AJiMsUjnDFoSIiupJCywrKTIFDFQuc6gG2nK5Exk4u0VlFSVNFfH9jo3jEmGY3KhgpIZWBF7K366ivSw7RknWTkeTqNkwcbx8GcYUI0IsRxFeunas+fcadMMtSRRY2dhd7KkZOUMwBPQVzy5NyDkuiOuHH2mSMPNnpmB2Nh4QAka3H3iAWPmx1r57JqMmTjJ\/wCD6vDpMOFd2P36l6uJpFFAcxhu0khfKYS4aSWNMilbOkjKFLyEI2ZY3e6nTLbiRQCxdqbksU+yuRw79t3AwB71r5p2B8ALeIFlu0ozuN22RFlzOWRe9HKYiNW4EjT8woBkXauNlVhDLYmzXCrk+39m1DMCe\/0HDXwoBuB26s3srS4cq8gzIWKZVYgp3GzasQx0Gtjw1oDoqAKAQigPMe00Ma4lxGABpcDgG5gfX419Do5SeFOR8ntCEI6iShy\/9OKn95vM\/WuU13mbsfgX0R0uWt1njBlpYDLQABVZJNNPqSm000dVgNuRsAHOVvka\/NtqfwvqMWRy0y3ovj6r0PsNFtjFkglle7L+5Ji9twoNDmPQcPXlWfRfwzrM8l2kd2PV\/wCjrn2vp8S4O35HK4mUuxc8Sa\/TNNghp8UcUOSVHx2bLLNkeSXNkeWu5yDLQBlpYDLQAFqLFHpvZ+SYwrvYwhAAGupAGhI5Hwr53UqCyPcdn1mjlkeJb6ovHDoQRkWxOYiwsWBBDHqbgG\/gK4Gsa2GiGZmRNbljlGoNib6a+6PQdKgGKcRG4jlbApmkYbjNuyxZry3fT7M2UuTrw66VINHZqRy5JN3kaHPGE0yoQQrZbacF0PRuVzQGjuVuTlFyACbC5AvYE8x3jp4mgMbFxQwtHDDhY2Zg7hQERVVSmZibGxLbuwA1IHSgKYmw5LA4JBE0qxyORH\/VLAjMo94CR8ua\/vG4FtagG3h9m4dSWWGNWvckIoN9db2495v8x61ICTY+Fb3oIj3QuqL7q+6vDgOQoCzLIqKSSFVR8ABUpXwREmoq2eUbTnEkskiiwZiQPCvpMMXCCi+h8dmmsmSUlybK2WutnIdGhJAXjcWtxvfS3jeobSXHkSk7Vcz0jZEGJijvNLnsL5bC4sOGbma+e1E8cn3I0fVaTFmhH+bK\/t\/6Z\/8AOmGMe8QNIMsDMEysy79ioBF+K5SSPDS\/Cs5sLg2+GBMUTyWEjMAVFljkaK4JOpYo5UcwNbUBcGEgliUZFaN\/tALWF2OfMOhJYm\/iaAysRPhBMcLuI\/cFwSiXRlCkohILqFjUG3DKAL2oBuzkwk27U4QIskbyREgd9GZWckA3ViXR7HXW\/EGwGhi8NhsPDI+5XLGrOVUC5ysZtL\/ez3a5560Bnwz4I53w8Ucm4sxZWVUXMGckEmwtYnwzctaAli7UxFnGUqETeMGZRIF3QlzbonMVsbXHO\/nQGhgNoGRijRNG2RXAJVrqxIGq\/eBXUeI40BeIoDzTtFs\/czEXLBrsCePHUH\/fOvoNJl7TH9OB8rr9P2WV+T4nGYiE5m4cT9apJcWa8c1uL6HSZa1nlUGWgoMtBQZaCgy0FBloKDLQUGWgoMtBQZaCgy0FHY9jdiCwxDi5+4DyH4vOvJ12pbfZx+57ezdGl\/Nl9jrwK809kzRtyCzm75UzhnyPkujFXUMBqwYEWHE8L0BYweNjmzBQwKmzK6srC4uLhhwIPH9jQFNOz8QUIHlyrbdjOfsst7bv4EjW+htw0oC\/gcGkS5Eva5YkkkszHMzEniSSTQFKPtFhSCRJoplB7rixiZVkFiL3u62\/FmFr0A1khxRzBpY5IrrcZo5FDgEqQw1VgFPA6qLajQB38CiD5xn94PkLsUMgXKHIJ1bQeBIzWza1FAq7M2hBhh7NI4EqZCwVXy\/by5UyaWtnYCw924vprUg0MJtiGV8ilrkMVJVlVwpsxRiLMASOHW\/DWgLMyhgVIBB0IOtE2naIaTVM867S7KWCbKvusMyjp1Hr9a97SZ3lhb5o+Y12mWHJUeTMnLWox0OiYqwYcQQR5g3FRJJqmTFuLTXQ7HCdrYmXLMpUkWJXUHS3mK8nJs+Sfcdnu4tqwarIqL2z8BhZFRo8xVBCqkkjSAlo+PGxJv1rDODg6Z6ePJHJHejyFh7NYdEEcZkjUCRe49rpI5kZCTfu5mNrWKg2BFULhssxCVijrlkW0aLfhA2RzqBaxdVtrwGttAAzHHDSTCOSWQ2kjO7sTDvVs8YL5bK\/unLmF9Lg31AWXs+gjKozEiMxR52uIkJByp3Twyrq2Y90C9AXtoxx+zukzfZmMq51GhXKbcTc38TrQFFsHh8XnYPIDmTONUIKAlA6SLw7+axGuh5UBYn2JHIRvXkkUXIRyCtyhjZtFB1Vm0vbvE2oCviuz91ISeUP3BnYhjkS5WPQDu3NyfeJAuSNKA08dK6oSiZ25C9vnVoJN03wKZHJRbirfkeb7UkleQtKCH6EWsOVh0r6HDGEYVDkfK6meWeRyy8zm8QvebzP1rhJ95mvGu4vob2WtVnn0GWligy0sUGWligy0FBloKDLQUGWligy0sUGWgoAtLFHq2DjCoqjgFA+VfNydts+wgkopImqpY56fsyHeRy6rnzf04wjFiysrSHMRIUKLa6jxvegJfYZkkEmYu8jpvGQKirHGDZcjsSQczX1J7xPICgNu9ALQHNSdk0LZt6w7ki2AFszTLMsn5lKAeIAvwoDW2fgmRnkkcPI+UEhcihVByqq3J+8x1J1Y8rCgL9AYW0+zaTS73eMrCWCTQDhC2Yob8Vawv0IB5UAz+DSRquVzIIUZYIwFRhmAUZnJsxVRlBsuhN7mxoCfae1GwsCSPG8llG8IKBh3RdmGaxufwk1Sc1BbzL44b8t1HBbb2\/7TLnyOFAAW9r24668b3rppduaTFDdld\/Qx63YeszZN5VXTiUlnB+63y\/etS\/iHReb9jE\/4e1q6L3Hq\/8Aa3pXSO3dFL9X4ZylsLWR\/SvclwzRl1DkqtxmNjoOddJbW0263GXErDY+pc0pR4fVHZHtNhY4zu2DZR3VHdvblqK8eWpg+82fRLA4qqosYDtRh5Cq3Ks1rAjjfhYi4quLUwy+EtPBKHFldOz+4tLFdpFScdwKrOZpVk4toMuW2t67nAmGxpGtmkvGZI52UpaTeplawYNlCl4w1rHmL2tYDR2UZDGDKGDXbRsuYC+gJTQ6W1oBdqYITRNHfLcqQbXsyMHU25jMo050BQbCYlWzh80kkkecoqrGsaaFbOxbgWN9Tc+AoDaoBL0AtAZe3dlJNGdO+BdTz8vI1o0+d4penUzarTRzwp8+h5JiF77fmP1r05PizyILur6G9lrTZgoMtLFBlpYoMtLFBlpYoMtLFBlpYoMtLFBlpYoMtLFBlpYo9G2FjhLCp5gWYdCK8HPjeObTPp9NmWXGmhO0cDyYTERxgl2hkVQDlJYoQADcWNyNbiuJoOdi2XjoZXJkldGEKs6EFwib8ARq5Iz64fO1u9mcjkABFi4dpyLlcy3ywM26yJkKPC0iroc7G0x0I5rYixIGrt7CYlnjkgMgKYeaxBQZpCYjGjhhbXK17W4HUUBAZ8azyqGYxxTCMtGF3jKxMhZcwtdA0MfwlPG1gINnYXHpCoJmUKIVyjdF8p1lYaG7jTnwvYXtQEwbHgEuJywj+zCboA6N\/WNjaX3TZdLhbfeoCpLhNpSwTo5k\/pSiMDdKZGLuEzXuQchW2o5XoCyx2jm7plKZvsswjzE5kv7Tpon9S2WxtfnloBsqbSCMc0tyqNYCMnNnlzIpUdwFdzrZvrQGziNhYfEBXnizPlFwzFsptqBY5b35gCqyhGXNF45JR5M5jtR2ahiIkjjAU6Ea2B5EXPOtei0+mfclCN\/Q8zaObUx78ZuuvEwjhk\/CvoK9NaXAuUI+yPIeqzv9cvd\/5FECjgo9BXRYsa5RXsUebK+cn7stYDBO7gRr3hr5a8fWqZHihHvVRfCs2SdQbv6mg20MQ0jRSwRmP2hImYK2XdnKrKbNrLmcEcrHhpr4UlG3R9RGUqV8y5hu0ccaXjwgVckcndIyJDIsjK8hjQlSNyQQFIBZe9a5EKKXJByb5mjFteY4TETlI1aP2nJqWUiF5FQsNCP6YuAeuoqSCjhO0M8sm4+zSQSLE5KsQj7lpXABYZs2UFP7WvrQGps3bIaO8n9QNIuVFJ3m7kaPPGtybNkLAXOnW16ANu7bGGiEmQuSGbJ3lfKq52IARtQLXzWAvqRQFObtSFaxiNmLrGc47zJNHD3hbuAtOmuugbThcCVNpYlsM8iohlWZ0Cg3XKs5jOUsUzMEBtcrcgcL0BUXbczBwrxqYonkcyRslyrshjIEndy5O8wJHfUjoQNSXEtKI93fMGjaQKyho1IzZXBOtxpbxvyoB2N2qqxM9mXiAHUqSR0DakHrXTDjeSSRyzZlig5P\/meS4pTnb8x+terKk2ePDjFM6HLWmzDQuWlihMtLFBlpYoXLSxQmWligy0sULlpYoTLSxQZaWKFy0sUW9m46SBsyHzB4GuOXFHIqZ2wZ5YZXE7PZO1lnGisDzvwv4GvJzYXjdM97T51mjaRk9pcVjQ8y4drBcMDfKp3bNvTvhf3iu6Ay63LiuJ3Ip+00ymQARFlDd1jlZMuW0khYhcr5iVHd+6L6kqBe7P7XeaRw0iZd3G6JkyPYjVveN1zA9R0JoDM\/nB1R2YR3XfDQ93eJHvEjV1Zg7NY\/hb+0GgJpO1Dh5FYwpZ0UM3eRFY2zOwf3tPcYIfMa0BVk7Y4gE\/YJ3Yi+UsFL2gaXPGCwcpdctgh5m+lqAft7tBiY1mizRxyIJMsmVu+RHFIqRqW9\/wC2PEn+nw1OUB6dq5i7qyRxqJChZ2X7L7QoGlUPmKsBcEhNWXiDegN3sziHkw0TyNmZlJLWtfvHUDpagNSgMftUR7Ow6lf\/AJCtOk\/qox67+hL7f3OFy17NngUGWlijreyWQRmxGe5v1tyrytbvOfoe3s7dWKlzs2skfCy8c3Ae9ybz0GvhWOmegQnZeHsQYIrFsxG7Sxb8RFve8eNQCVcLGM9kQZyS\/dHfJFiX072mmtAJNgonDBo0YNbMCqkNbhmBGtuV6Ao7QEUBSYggIMiouUKoPQAX4W0vbQaXAq+PHLI6ic8uWOKO9LkMbaGCnAEgjYDUCRQbaakZhbheuktNkj0OcNXhlyl7kj4rBEWJhIIYWIUizG7DhwJAv1tUdhk\/ayficP7l7gcRgcm7+x3f4LLk43921uOtR2GX9rHxOH9y9ypPj8AAq7uNghugEYIU9VuLD4V0jpcr6HOWtwx639DNbbCo0jQx5WktcsSRcFjfLfic5rvDQ\/uZmntJLwR9zLxWIeRszm5+Q8hyrfCEYKoo8zLlnle9JnL4rNnb8x+tZ5XbNkK3UdPlrSYqDLQUGWligy0sUGWgoMtLFBloKDLQUGWgoMtLFBloKLGAwhkkVBzOvlzPpXPLk3ItnTDi7Saijoptv4eEFY+8V0sutvC\/C99K+dyamKnUnxPqMeDhS5I2cBMzorMmRiNVuDY9LjjXVMo1TonY28qkgx8Z2hjRhlUyJkWQurLlCNJuwRrdtddOQ66ECtF2rRnWNYnZmdFWxGVg6SurhmsCtoH1FxwtegIMP2iMgi3kAzNcooIPeEojVsxNgNSeF9D4AgOk7VGN3R4ZGZWayxqXYIqRFr5b5mzTaW6eoGvsvagmaRMpQxmxVtGtmZQxXiAchIPAjhzoC+TQFLayTFPsZBG1+ahgR0tfTzqJXXAmNXxOWix200nGa7qqklfs1VuWjZeV720NZcT1F1NJ\/Q0TWLduPAr7b7RGaymN0UeRBPmK9XBPse9kjK\/pyPH1S7fu45KvrzM0YlOvqDWqO0NO+G+jDLQaiP6GPR1PAg+RBrTHLGSuLszyxTi6kmh+WrlKJIJXQ3UkHwqkoRkqaLwnKDuLo0o9v4gc1PmP2rO9HiNa2hm9B47RT9F9Kj4LH5st8wyeSIpNu4g\/eA8lH61ZaTEjnLXZnydfYo4id3N3Yt513hCMPCjPPJPJ4nZDlq5zolgwjvfKpNtT4edUnkjDxMvDFObqKsbLCymzCxqYzUlaInjlCW7JcRmWrFaDLQUGWgo57Fe+35j9a4N8TZHwo6fLXSzNQZaWKDLSxQZaWKDLSxQZaWKDLSxQZaWKDLSxQZaCgIpYojjxjKwMXvDnyF+Zrzcuq7e8WFX5vovv1Z6WHT\/D1lzcPJdX9uiNHZ8eGDpLIZWlBJYnUMSBa46Ai4rgtmyjxu35mv5pB9KN1u0UQ4Kx+Vdo6OfWji9fj6WZXavajsESMoUk0Pfszf22toOFyeo8a8zVqcaguDbPT00sclv3wRPsvC4QJFLME3iRqoDFWyWbNoBezBuY6CtWPDkSSpnHJnxN2pIhmxsCH7CCNSCCGyAWIDAEeQdgPzHrWzHo3zmYMuvS4Y192RYXGwi4kw0RBJLWRRclg5NuF8wDeYvVp6NfpZSGvf617GtHLs9gAY4xY3AKDQ2Cnl0VR\/0jpWd6bIuhqjq8T6lbZ3aHBjOY4sjljnUKAxsT3iRoRck3v96uWGHaycFzXM65sscUFN8nyJ5TDjlyuMpU3U31BtxFTqNO4qmxpdUpu17GCcJi4JCxZmRAtgZSFfjewJ94WHdPwrBhwZoPuvf9DbkzYa73dJNo9ot6MhVk071xx8LjlW\/TZsUJfzu7L15e55mrWTJGsPej1rmU1sdQQR4V7SkmuB4ri06Y1oFPECuWTDjyKpxT+peGXJDwSaIJdmo3UfP61gy7I00+Scfozdj2rqY82n9UVX2XIPce3kWX6XrO9m6rH\/Rzv6M0raWnn\/Vwr7EZXFJzJ+Ab6a1zlPa2Hopr8\/8Ah1UNl5+riyM7XkU2dF+OZD6EGufzzNj\/AK2Fr3X9zoth4Mv9HMiZNsjnG3wIP6itEP4g0z8Sa+xxyfw9qF4WmTx7VhPFiv5lI\/StuPamkmrU19+BgnsrVw\/Q39CzDiY3911byINbIZoT8LT+5kngyQ8UWvsWosM7e6rN5AmplOMebKxxyl4UdDsrCtCkiyOq5hcG+q6EEm+nSvN1OWOSSo9jR4J4ouyhhMCpgVpjfKO7lNtPG9Vx55Y+Ro1Gmx5mmyhOkY0BseOp9K749VNySZjy7PhHG5K7RBlrfZ5NBlpYozJtnqWJudST86rR3UnRs5aWc6DLSxQZaWKDLSxQZaWKDLSxQZaCgy0sUGWliiriMYiG3Fug5eZ4CsWr2hh0y774+S5mzS6DNqH3Vw83yK8SvMc3BeX\/ANQeP5j8KwY4ajXd\/L3YeXX\/AGb5zwaJbuPvT8+iL8UCqLAf76mvYxY4Yo7sFSPIyTlklvTdsflrpZzoMtLFGFhpt9icw1Vb26WXS\/xY3+FeFizfE6914YI93Lh+F0CT5zN3LXu2eFQZaWKDLSxQZaCjMx2DYNvFJyhgxUaHxsfnavLz6RQzfEx+6XU9PBqXPD8NL7NmlG1wGU8eBFekpRkrXFM85xcHXJjjc8STUqlyIdvmxjxA8RVckIZFuzVr1LQnKDuLoqvgSNUJHgDb\/Q\/GvKns2ePjpsjj6Pij0Y6+GRVqIKXquD\/2R+0SJ74uPQ\/sflXH5pqNNw1WPh+6PI7fLcOo46bJx8nzJsPjo355T0bQ\/sa9LT7QwZ13JfZ8GYNRoM+B9+P36FrLWyzJQZaWKEaMHiL+dQ6fMlWuRVk2VCfuAfl7v0rFl2fpcnigjZi2hqcXhmylPsAEdyRh+YBh8rGvPybA078Da\/J6WLb+ojwmk\/wQ7O2HJHMrMqSDgDrmU20ZQRpfhprrXfQ6CWlk95pr2ZTaG0o6yCUU4vy6M9E2Pg5Y1KvlAJvoSW+OlhV9RkjOVoppccscaaGYnZkEivmzWzAnXmpB9NK4dDYm0Z2IxCySCMC6niL6W5+lQkX5GGcOolIDhgD8+V\/hWvSxTlbMW0JyWOl1LWWvRs8Sgy0sUZszLmP2ltTpdevlUWdkuBr5arZSgy0sUGWligy0sUGWligy0sUGWliiPEzJGuZ2AH+9B1NUyZY44703SOmPDPJLdgrZgY3bDucqAqDwtq7eXT6+VfP6ja+TNLstMvv1PodNsfHhj2upf26FzZ2xzo0v\/b4j\/qP3j4cPOtWh2Wsb7TM96X9jJrdqOa7PD3Ymvlr2rPFoVYydAL+VQ5VzJUW+RKMI1gSLA9dP9a5PPBdTvHS5ZdBuM2RNJGywsmZtA17gAnvH0v8AG1cp6iMotLgdseknGabSZS2X2Unw8r3sUKqEa+oGpfNYWFjltWXR4cOm3nF8zXrcufVbkZLka\/sCWFnJ6nKQo9a0\/F8eRmegqN7xTkisbXB8RwrUpWrMMoU6G5amytBlpYoClBRmxMYXyH3CdD0v+l9PnXm48nw2XspeF+H09D0Z4\/icfarxLn6+ppZa9KzzqDLSxQZaWKEaMEWIuOhqJJSVNFk2naZmY7Y+b3Db+08PgeXzrxdXsTHke9ie6\/wezpNs5MS3ci3l+TLaSfDkAllHK\/eQ+A5eljXmvNtDQvv8Y+6\/0emsOg1y7vCXszV2Pj5Jr\/YtlBIMgtlBHIg6jz1r3dDrnqIb0o19zw9doI6eW7GV\/Y08tehZ5tDcy3tcXBta44nUClk7o61LIoULQFnFbQkaNYhJkPAm12ZegvwNZMmnuVo9DBq1GNSV0XA6DDacV94C5OvC551lyY3F0bsOZZFZz04kZQB3C\/Agfd5k9BTHBzdHXLlWOLkxdn4BYltcsSdWbif9K9LHjUFwPEz555ncuXkWstXsz0GWlijkcbIN4\/5269T4Vzb4mlR4HS7dxEkcJaLLnLxquYXXvyKmtvzUlJpcCkIpumZcPaW4BCBgZCpALBkXeCIEjKRcMSDcrwNU7U6diTYXbjbtWkRQxF+61wRvVi5gWN34eHjUrJw4kPFx4BJt8qEYxaOeTksFMgjzGyZRqeBYU7T0Cxepp7NlLxK7Wub35feI\/Srb9RtlNy5VFFn19K4vV4vM0LQ5vIZIGKnLYNyLagHqQDXKWvguR2js3I3xo5zE7HxDyLeXOSDmcpZE1Fgve1Php515mo0U9XJNSv8Asj09PrMejTTgr6eb\/wBG1s3ZSQjTvOeLnifIch4fWvV0mixaaNQXHqzx9ZrMmqlc3w8i7lrXZkoMtQ3XEKNl7Z77vNqMzD\/KPPmfCsWZynxrgb9NuwdNgcYQRkXvdT3if2qkcTavod56mMXurj9C42PKe\/73NUA+GYmojilLkTLNjjz4MqYraLvexsD93T610WmlfE5S1cK4LiUmYniT61tSS5HnuUnzY3LU2VoMtLFBlpYoMtLFFfG4XeKRz4j9j4HhWbVYFnxuPXp9TRpszw5FLp1+hX2ZP\/hte4Gl+YGhB\/uXhWbZ+rc08WTxR4ex31umUWskPCzQy16VmCgy0sUGWligy0sUI0YIsRcHiDR0+YXB2iTs9s2KOZit1DrYrmOUkcLA8DrWPLihjg9xczfhzzyTSm7oJ4wGIGoBt6V00+RyjT6HPV4owkmupzeI2HN7Q00eTvTKzAki6pCFQmw94OG+DnXQCuji960cYzW7TIcLsTEBkZ7nKxIG9a65o1UnjqA63y3OhqqjLr\/3Au5x5L+3qWcPs7FMVMhsAB3RK2pEQUE5bXBcE\/G\/hVkpdSjcen\/cQ2PsvEK4aQ6AkgZi1rxqrWvfTMDzNRGMlzE5Ra4GniccE0XvHmA1vn1q05Wjtg0s5ceSEl2sZJGZg2U2y3y90dLLx51wxJ42bNTp5ZIKuhPBMr+6fhwI+BrQppnl5MM8bqSJctWspQZaWKOVxkKbx+6Peb61wlPiaox4I69oweIv5+GorqcKImwcZIJRSQSQSouCdSRpx0qKRPET2GK992l7lr5R7x4nhxNhr4UpDiEuGiut0Uke73QSOuUWv6VSc4wVyL48U8jqI8XGgUDwNyf8ifqa83PkllfDkexpsMcS4+ItxhBoWBboP2F6z7hq3yVoRb96hxJUyliISNV9ORq+PNPFy5HLNp8eZceYiai9ezjyKcd5Hg5cTxycWOy1eznRS2lJly6kDXgbcCOPhxrPnm1VGnT41JStdBcK5aR9dByvfmRoOXCmKdzkTnx7sI8OJJFjRvWiGYMFBJtoQbcDe\/MVZtSnusooThBTT5nPY2SdTMEaVmtKQwE3csbqpiIyNpoGU3PGx1NOKuhwfFhjNo4omRY8+UIxD7l73Xdm6i1iGDPYXJNuAtRyfQKEUTy47EqxygkZjlvG53hugC\/8sWLG50\/ymrb0iNyLGSbQxgGqt3guUiJrIS8gIbibWRORN2GliLRvSChFj02nihCcRIlgixM0W7YMc0SNIFzG+YM7ALa91sdanfdWR2cb3TdwivkXeWz2Ga3DNbUDwq6bric2lfAly1NkUGWlijL2rhCPtE0N7k9Dawb9D4GvH2hheN\/E4+a5nqaLKprsMnJ8vqXsJMsihh5EdDzFejp9RHPjU4mDPglim4MkYgaEgV2s57rHWpZFEUk8a3zOotxuwFqjfj5l1ik+SM3GbfgQ2W7n+21vU\/pTfvkacehyS58CCPtNH96Nx4ix\/aquUqqjo9nzjxTNtdoJLHHJmFmuAT3ScvEWPMWrnh7raZTU451FtcUOWx4a+VaLMW6wIA46VFjdMvGbcgTQHOei2I+J4elRveRqxaLJPjyRjYrbjvpooPIfS\/8A+VHM9DHoscOPMp+20o17ovttKG6KmOIIINiDe96hxspPEpqpGlF2mNrNGC3UGynzHEVNyPPls7jwfAlwvaZCbSJl6Ed4fHS4qHOSXIpPZ81y4mFjdqx7x\/tF95uvXyrhvPqWjhkkuBsYvbNmKwmwU6sSWuRyUE2tpYmvnNHqNRHvym\/pZ6cNnxyRuSo6PBYpZUDr8fA8xX0+PNGcN5HiZdPPHk3GuI18ag5+nH0\/e1csmqUfCd8WhlLjN0Lv3b3UIHpf8zcSPAWrJeTK7qzbeHAquiSOFuZH5V0X0HH43rtHSzfiZnlrYrwx9yPGbRjgtmYLfgAACfHwHiajMsGCNztlMeTUZn3Bfb78Q1v+n96wQ2rpFK1CX4\/yTPHnmt1yEXFD8LD0\/Q1d7X0jfgfsv8lVgzJUpfkDieg+dR88xLgoP8EfByfFyGHFN+Ef5j+1Ue3V0h+SVovUxcRjJZgDlUCxsL8b2sPlWztc2RW69DTj08YJkmFlkUs34r8CoN81+YI51xyfFJLs5JPqWnhhOr6EWGmb2l\/e1FuIvoAeIsOVc5LV9nSl3vMt2MHGq4GquJObKcwNrjXobdfGsGoya3Ak5ZHx9SnYY\/JEgkPU+t\/rWeO0tVH9bIenxvoO37dR8RWmG2tSudP7f4OT0eNjvafAVqjt5\/qh+Tm9EujB5lIsVBGmhsdQbg+oBrr89xvnB\/gr8E11FOJ8Kq9vR6QfuStE\/MBifCqfPn\/8f5\/0T8EvP8Ce0+Aqj27k6QXuy3wUfNjTOT0rnPbeeSrdj+f8lo6SCd2zAnV4nsJHVDxItcjhxI0I+lYtPrcuFvc6nqSxQ1MLauSJH2DC\/eaSRjpqWViRy1K1o+b6jyXt\/szp7qpIX+X4v+JL\/mX\/ANafN8\/lH2\/2L9BV7P4fnmJ6lv2tVZbW1T5NL6JE77Jf4LhrWyf+TfvXF7Q1L477G+xU2Nhh\/h38yx\/WktfqXzmxvMlmwmGCFGRAjEaE5Rm4Ajxpj12oi21JhN9DNxWwsNGpbeSRKOjXGpsBYgk3JAtzJrRj2rqrrg\/sQ5eZQbZCt3VxAuQTlkVlaymxJDEHQ25VrW2MiVvGn9GWU4roINigGzYiMd3N3QWJW9rgX4VL2zk\/Tj9Czyl7+XYOcz6cbFBbz7ulZntnVPkkvsU7RgezmH4b6The2aM6dfd+dQtsapcXXs\/8jtGRP2aX7s5+IB+GhFdo7bzLxRRPasrSdm5xwaNviw\/Q\/WtENuwfig\/sW7RdRidnsQTrkHjmJ+gq0tt4q7sWS8iNCDsun35XJ\/tso+YJrBPbWd+FJfkp2jMHGbGhEjjv+83+I3Wusdo52k+Hsim9I09qbJbMXjOhN2UDW\/VfPnXm4c26t2Rp0+p3Vuy5EMUNiNHYj81umtrA\/GtnxEYqlI1SyYXzZdinZeKuo8mFqLULpIopYXwTJI8cPxsP+s\/vXVZZrkw9Pil0RMdqkD+o3r\/u9dHqcqXM5\/AYU73UYs28L5QXkuPeIJPkSeAHwrhkz3xkztjlhxKlSNLZftKZVIsnMMwJA\/ttf0NYMvZvjHmZc8sMuMeZsb2s9GWxDNShZQwwLAWckkC\/eJ5edfSw0+BxXdTLJosR4U6AacrVrquAsym2hICwsgAdlF730Nr8f93o6XMtcUNixTBzJdMx5Wa3C3W9UebGucl7kOca5lhtqyEg9zQEWCtzt4+FZNVDFnik5pV9ClxJI9rNdQQtyQNLj415ubR44Qcozv0DaNPe156QsN7ShYb2lCw3tKFhvamhYb2lCw3tRQsr46PeLbmNQfGlHTFleOakZ2ydolTu24fdJ5H8J\/Si4mvV4VXaw5M2d7U0YLDe1FCypidowo4WUvwuAt9epJB5dPGt2jjh4yyex3w4cmV1AYNsYPpN6v8A+1bd7R\/tRo+X6jyIMdtDBSpkIkB+4xzd176G5NTH4WT3YqrIlo8+OLk0LisQ8kZVtxra4Zri4N+R8OI4Gx5Vzhs3ddqZk3JPoU02ZI6hs65ski3YGTKGYEBGZiSBlI1PBtLcKxymoScWuTXLrRyoWLYWUe8lyJBfISVzybwZSWvpcjxvy4VV51fLy\/AJI9ijOCWUgMDbJ79pDJeS57za2v59dIefhS\/7hXAFf+Xm7g3osiMo7hBs0DQ20axF3za34W041b4hceHP19bFF5MABOjKAsaoDlFgpkF1VgBwIVnv1uvSufadxp87\/H\/V+STV3tcaJsN7UULDe0oWcrjInMj6j3m+vnWyPhRzd2bW\/rPRNhv6ULDf0oWMYqeKg\/AUoneEVUHBVHkBUu3zG8OkxNhekYbzSRBH7YQ+U2Gl+PjoPGu+fTPDSZLtOibfVnoiw31KFjHKnioPwqVa5DgCMBaxYAcszW+tdfiM3LefuQIoQEkKLk3JsL361zlKUubJJN9VaFhv6ULDf0oWLvqULE39KFhvqULF31KFib+lCw39KFhv6ULDfUoWZO04hmzW0bj4Hkfj9ahp8z09DmTvFLk+Rb2fjrjIxu4GviL8R15XqefEyanC8U66dC3v6UZ7KWOw+8YNcaAjW\/Mg308qlOlRq0urlp22lzIf4cPxfL\/Wptm35xP9q9xk+yVZcue1\/C\/PzqVJp2Vntacl4URfwJP+IfQVPaO7o5fM8tVSNmF8qhegA9BXNqzA2OM1KIsjjxlyRY3HEdOlaIaSc470OIVskE9cZQlF1JUA31VoWG+pQsN9ShYb6lCzk8bijvH1+831NboQW6iLNvf1korYb+lCw31KFhvqULDf0oWG+pQsjDW4HTodR8L8K2YdbkgqfFepdZGuBGZ1vYrlPgSAfEEfSvRxfD6hcIqzrDcmBlP3XI8+8P3qs9nYny4EvCujJExWmtvhwrDl0GSHGPFHKWOUR4xFYqOdi7+lCw31KFhvqULIsVi8iM\/HKpa3C9gTb5VaMbkkLKEO3gWsUbgtgNSXJIKAG3DKdb8jXV4KXP8A\/BYp28veOVsoFw1tL7vPZuYOhHDlTsHwV\/8AWLHfx1BYNoSxFhbgGyg62Ppenw7fIWaO\/rhQsj9sXhmF\/MVdYpvkmTxEbHKLEmwPAm4BtxseFOyn5DiJHtGNjZZFJ6BheoeOS5oiybf1WhYjyAgg8DSiVJrijNlzAix7y6g9fA+fOqpbr9D3YuOrwU+a\/uX4MYGF\/UdDzFXo8OScW4sk31RRWw31KFhvqULEOJHUUoWRnHp+NfUVdY5PkiRj7SQdT5An\/SukdLllyiSlJ8kQx4jvmQ6d0KB4Xvc+Nevo9K8UW5dTvjxtcWX4YZnAIU+Z7o+dV1WfTOO7NkzcWuJYTCS\/eK+d68Gc4J93ijMxww55soqnaryACNRxYnyqry+SFoC8Y5H1qrnIq5I5nFRQl2OvvHmetepBy3UTaLO+rPRSxd9ShYb6lCw31KFhvqULDfUoWIZ6ULKWJxoYgLrY3J5cxYH416Wh089\/fa4GjDBt2J7XevV3TXQoxlTuihParHTQ8+h+Fcc2mhl8S4+ZSWNSJ02iOeh9RXk5dDlg+CtehllhmvUc20EH3h9a5LS5n+llOzk+gn8QXx9KutFmf6SyxT8hsmNQgqQSCCCOoOh51eOhzXdfknsJlefExHVla+gBB71we6Fym97k8OtdI6HMuq\/77E9hL0JodmyuQBg5Bm0VZGEWbukXCOwN8t9bXteuGb+THenP8P8AvRVY2+CaNvDdj8UzAskUQ43Ezk6m5BCL3teRNq82W0cKXBt\/Zf8AfgutPNl7F7GkVt3DE0oHvy5kUhuISNWIA04sc3HTwvp9Xp1Uszr0S4l+xot4aLERgKuANh\/zIr\/Ek6mvXW3NGlSv2I7KRDh8NiA5f2QN\/UDoXj7rs6utjqD3ePjXDHtbTRySk3zRZ45VwHbR2VNKvdwUSPcWcOlxY68F1uLjXrUz2zo5RqiOzkVZOzWJfPZRCdN3ZldDpqJFsMnmnpWGeu0tprivyOxT6FH+XdpAEskWnNZRb\/yUWrRHV6CXKyexhypmDLijc34oSCAQQeB0I0IOhBrfPR4p47x8zZpqwT\/uJg5JZHG7UsXNssd8xHLQc6nBoY\/qI1UoZHvNGjHs\/EtMMPu5VlNu62YWX8Z\/tHWtC0mHyMvZ40rLPaLYUmECmSSNwxsLOxbxIU\/dHXxq0dPi\/ahCMJdDEOIA0ter9hj\/AGr2OnZw8hoxK9B6Vfs4RV1Q3YroaeB2fiJNcuQdX7unlxrFm2hgxcLt+hWU4xNSPY0QHfkZj4aD9687JtfI+EVRyefyLCRwJ7sa+Z1PzrFPV5p85HKWZsdLtDxrO1fM5OZUfHUorvEL400orvFV8YamirmRtifGrbpVyMebENmPmfrXpwj3Ud41RJJtGNeLr63PpVY4Zy5JkqMnyRC22YuRJ8gf1rvHQ5n0OiwZH0Im24OSN8SB9L11WzZ9Wi600urGjbDHgF+ddVsxdZF\/hl5kb7Uk\/EB5D9711WzsS52y600ERtj5OOdvkP0rotFhXQlYIeQntZbiSbdST8q6wwY4conRY4rkhfaf9iupcPafGoA8YnlUkDxPQDTLxoKGiWhJIkuvGooD1koRRe2FtCKGdZZUzpbKdLsmtxInO4trbW1edtPS5c+H+TJqS48OvoKOh2z2vw6mNcGw3sjhGlaN\/sk5taQan6a8a8bR7L1Wae7rW91dL5\/llJbq8CLe1dpzbOmhz432qCQjeBguaME2zqU5XN7dAfOter2Jp54m8Ud2S5V1K48kr4mhh+1OCQvfFwkM5YESLqCByvflXz09maqSS3HwVcjQpok\/nLAf\/wBMf+dar8n1b\/Q\/ZjfiQx9scEM1501a4sw6D56V1eyNW6qL5BSRHju3WESORkcO4UlEB95uQ05Xq2HY2qlNKapXxfoRKargirC+KfDHF\/xIia+kWVd3xGm76W18ud9a+n+VaRR7Pc+\/Uy78rI07d4SXDhZ0lDOtpI0UkdDle4BB48eB1rwZbB1cMreJqlybNSycORzk2KwU8odFfCIABIZCXMigd0Romaz8rkjlpX0WgwanEms00\/oikpTlLeNhu3KwoI8Dho8OL3YsA5bS2tra873Nb3GyixXxkY8nafHTzCQSNvMm7vGtu7e5GnUm9RJwgrkyd2MVxLLbKxs7B55bacXbMwHQAaCvPy7UwQ4R4so80YqkXI9gYdfeZ2PnlHyrzp7WyvwpI4y1LLmHSCL+mig9bXPqdaw5NTlyeKTOMszYkmP8b1wRzcytJjj1qxzcyu+K8alIhzImxBqaK7xEcRUqJG8RtiKsoFd4haerqBG8RGer7hWzKmxRzHXmevWvShBbqO65GcJz0HLlXtJs9dTdAsxtyp1DmxRIfCpY32O3pFuFVtkdqxGmPhUontGRjEHwqw32KsxAvpeoJ32P9obXhRsb7JBMbctKqN9jTOegpY7Riri28KEPIwfFNflUjtGCYpvChO+x\/tTeFBvsf7a2nCg32I2KbwohvsbJimOmnpSuJEsjGti20vr53P61LJbpD1xLeFQ+Q32DYpvCoG+w9oOnCpJ32J7S1QhvsX2yTKVzHL+G5t6VaiN4aMQfCo6jfYoxDaedGTvM6XDxxIL7lGOmr5j8s1vlXkajLkulJ\/j\/AAcJTlZbXbciiyJGo6KpH61glp1PjKTf3ODbboY+3JbXsvof3qvweP1K7pXk2vKT93nyP71b4TH6kbiIX2rJ\/b6H96fB4\/Ur2aYxtov4f7+NW+Dx+oeKJXfaknRfQ\/vVlo8fqUeKKIW2rJfgvof3rotFj9Su4hRtN+i+h6edR8Hj9S3YxGHab9F9D+9WWkh6kPFEBj300Xj0\/wBafCw9QsURDjWsdBU\/Cw9SOyiJ7Y3QVD08Ux2USpI1yTYcTW2OGNIt2aP\/2Q==](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxASEhUSExIVFhUXFxkZGBcXGBgXGBgYGhcdFxgXFxoYHSggGholHRUVITEhJSorLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGy0lHyUtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKQBMgMBEQACEQEDEQH\/xAAbAAABBQEBAAAAAAAAAAAAAAAAAQIDBAUGB\/\/EAEIQAAIBAgMFBQUGBAQGAwEAAAECAwARBBIhBRMxQVEGImFxkRQygaGxI0JScsHRFRYzYkOS4fBTY4KTotKy4vFU\/8QAGwEBAAMBAQEBAAAAAAAAAAAAAAECBAMFBgf\/xAA2EQACAgEBBQYFAgcBAAMAAAAAAQIRAwQFEiExQRMiMlFhkRQVcYGhQlIGIzOx0eHwwVOS8f\/aAAwDAQACEQMRAD8AW1fXWfBhalgLVAC1AFqkBagC1AFqgBagC1AFqkBaoAWoQFqEhagC1SAtUALVJAWqAFqEhagC1AFqALUAWoAtQBagJ8LgpJDaNGY+AJqk8sIeJ0dMeDJk8Ks04uymMb\/Ct5so\/Ws8tfgXU1R2ZqZfpGzdl8YtrxE3NtCD62PCi12F9SXszUp+E0ouws5FzJGD01Pzrg9qY0+EWaI7FytcZIrP2NxYbKApH4swt89flXRbRw1ZzeyNRvVw+pO3YfEBSc6E\/hF\/qdKotp475M6fJsqV7yHR9hZyNZIx6moe1MfSLJWxcj\/Uh57By8pk9DUfNIftZPyTJ+9exVxHYrFr7uR\/JrH510jtLE+do4z2RnXKmY+N2XPF\/UiZR1I09RpWrHnx5PDJGLLpsuLxxaKlq6nAxZvePmfrWGXNnu4n3F9Ebtq2niUFqCgtQUFqCiSKB20VWbyF\/pXHNqcWFXkko\/VnXFp8uXwRbFmw0ie8jL+YEfWq4dZgz\/0pqX0ZbLpc2LjOLX2IrVoOFBagoLUFBagoLUFBagoLUA+KB2NlVm\/KCfpUOSXNkqEpeFN\/RWT\/AMLxH\/Am\/wC2\/wC1U7fF+5e6Onw+X9kv\/qyGWB195WX8wI+tXjOMuTspLHOPNNfYjtU2VSvkW8PsrESe5DIR1ym3qa5S1GOPOSO8NLmn4Yv2L8fZTGH\/AArebKP1ri9fgXU0rZepfT8kv8nY38Kf5\/8ASq\/McHm\/Yt8p1Pkvcik7J40f4V\/JlNWWvwPqVlsvUr9P5M3FbPmi\/qRuvmDb14V3hmhPwtMyZNPkx+KLRXtXQ5BagoLUFBago0uz2HhedVmYBD1NgTyW\/jWfVTnDG3Dma9DixzzKOTkepQRKgyooUDgFAA+VfONuTuXM+vjGMVUVwGYxmEblWCkI1mIuAbGxI5gcbVBJx8faSaNNGEjZlVpTJFJhwd2W7sg3IuStiGIIuLA3tQF09o5dbmCM58hRyS0S3\/rSEMLxHlYD31140BEe1GJy7zcKVtbIA+dicO8wZD+EmMAC17OOehAqz9qpohIweKbv3XKLRsiwwlkiYye9mdtBnJN+7oaA0n27iQqvuUIklmhjAz3EiytHEz\/2MEdiRw0te9AdNQBQDXAIINrc78PjUptciHVceR5Fj8hlcoAFztltwtfSvqMVqC3udHxWbdeSTjytnNze83mfrWKfiZ62PwL6HQZa3njUGWgoMtBQsceZgOpA9TauWabhjlNc0m\/Y6YoKWSMX1aO\/wmFSNcqgAeHPxNfi+s1WXVZHPJJs\/Q8OGGGO7FUPliVhZgCOh1rlizTwzU8baa8i04RmqkrRwu08II5WQcAdPKv2DZOslqtJDLPnyf2Pg9o6eODUShHlzK2WvSMVBloKDLQUGWgoMtAdBsfsnLMokZgiHUXFyR1sCLAjnWDPr4Y24pWz0tNsvJlipydL+5rRbbkheVRCDDFIIgI4zGQS0SJ9ozZHJMpuABbLXiTk5O2z6THjjjW7FUW5e0rqXBhLFC+YBlGVUMakC\/vNeXwGh4VUuRYvtHGcqS4fNeTdSKO\/kJm3Cse7bIW5krwNgSLVaMnF3F0VlCM1UlZDszE4Vdyy4TI2IWN4rlWJDFc3XKUVg5A5XtwrrPUZZqpSZwhpMMHcYos7a29NBiGQJmijijlcCNy2VnlEhzhgi5ViuFIu2oriaSDHdpphIsYjVGBs4Y5+L4bKVZSPuYhr6cR04gWsR2ib7IRRZi5iJDMBZZGkXj1G6PrQDE7VgybtYSzFlCHNZHVhKQ2ZlGn2DaqGGosTRAj\/AJiMsUjnDFoSIiupJCywrKTIFDFQuc6gG2nK5Exk4u0VlFSVNFfH9jo3jEmGY3KhgpIZWBF7K366ivSw7RknWTkeTqNkwcbx8GcYUI0IsRxFeunas+fcadMMtSRRY2dhd7KkZOUMwBPQVzy5NyDkuiOuHH2mSMPNnpmB2Nh4QAka3H3iAWPmx1r57JqMmTjJ\/wCD6vDpMOFd2P36l6uJpFFAcxhu0khfKYS4aSWNMilbOkjKFLyEI2ZY3e6nTLbiRQCxdqbksU+yuRw79t3AwB71r5p2B8ALeIFlu0ozuN22RFlzOWRe9HKYiNW4EjT8woBkXauNlVhDLYmzXCrk+39m1DMCe\/0HDXwoBuB26s3srS4cq8gzIWKZVYgp3GzasQx0Gtjw1oDoqAKAQigPMe00Ma4lxGABpcDgG5gfX419Do5SeFOR8ntCEI6iShy\/9OKn95vM\/WuU13mbsfgX0R0uWt1njBlpYDLQABVZJNNPqSm000dVgNuRsAHOVvka\/NtqfwvqMWRy0y3ovj6r0PsNFtjFkglle7L+5Ji9twoNDmPQcPXlWfRfwzrM8l2kd2PV\/wCjrn2vp8S4O35HK4mUuxc8Sa\/TNNghp8UcUOSVHx2bLLNkeSXNkeWu5yDLQBlpYDLQAFqLFHpvZ+SYwrvYwhAAGupAGhI5Hwr53UqCyPcdn1mjlkeJb6ovHDoQRkWxOYiwsWBBDHqbgG\/gK4Gsa2GiGZmRNbljlGoNib6a+6PQdKgGKcRG4jlbApmkYbjNuyxZry3fT7M2UuTrw66VINHZqRy5JN3kaHPGE0yoQQrZbacF0PRuVzQGjuVuTlFyACbC5AvYE8x3jp4mgMbFxQwtHDDhY2Zg7hQERVVSmZibGxLbuwA1IHSgKYmw5LA4JBE0qxyORH\/VLAjMo94CR8ua\/vG4FtagG3h9m4dSWWGNWvckIoN9db2495v8x61ICTY+Fb3oIj3QuqL7q+6vDgOQoCzLIqKSSFVR8ABUpXwREmoq2eUbTnEkskiiwZiQPCvpMMXCCi+h8dmmsmSUlybK2WutnIdGhJAXjcWtxvfS3jeobSXHkSk7Vcz0jZEGJijvNLnsL5bC4sOGbma+e1E8cn3I0fVaTFmhH+bK\/t\/6Z\/8AOmGMe8QNIMsDMEysy79ioBF+K5SSPDS\/Cs5sLg2+GBMUTyWEjMAVFljkaK4JOpYo5UcwNbUBcGEgliUZFaN\/tALWF2OfMOhJYm\/iaAysRPhBMcLuI\/cFwSiXRlCkohILqFjUG3DKAL2oBuzkwk27U4QIskbyREgd9GZWckA3ViXR7HXW\/EGwGhi8NhsPDI+5XLGrOVUC5ysZtL\/ez3a5560Bnwz4I53w8Ucm4sxZWVUXMGckEmwtYnwzctaAli7UxFnGUqETeMGZRIF3QlzbonMVsbXHO\/nQGhgNoGRijRNG2RXAJVrqxIGq\/eBXUeI40BeIoDzTtFs\/czEXLBrsCePHUH\/fOvoNJl7TH9OB8rr9P2WV+T4nGYiE5m4cT9apJcWa8c1uL6HSZa1nlUGWgoMtBQZaCgy0FBloKDLQUGWgoMtBQZaCgy0FHY9jdiCwxDi5+4DyH4vOvJ12pbfZx+57ezdGl\/Nl9jrwK809kzRtyCzm75UzhnyPkujFXUMBqwYEWHE8L0BYweNjmzBQwKmzK6srC4uLhhwIPH9jQFNOz8QUIHlyrbdjOfsst7bv4EjW+htw0oC\/gcGkS5Eva5YkkkszHMzEniSSTQFKPtFhSCRJoplB7rixiZVkFiL3u62\/FmFr0A1khxRzBpY5IrrcZo5FDgEqQw1VgFPA6qLajQB38CiD5xn94PkLsUMgXKHIJ1bQeBIzWza1FAq7M2hBhh7NI4EqZCwVXy\/by5UyaWtnYCw924vprUg0MJtiGV8ilrkMVJVlVwpsxRiLMASOHW\/DWgLMyhgVIBB0IOtE2naIaTVM867S7KWCbKvusMyjp1Hr9a97SZ3lhb5o+Y12mWHJUeTMnLWox0OiYqwYcQQR5g3FRJJqmTFuLTXQ7HCdrYmXLMpUkWJXUHS3mK8nJs+Sfcdnu4tqwarIqL2z8BhZFRo8xVBCqkkjSAlo+PGxJv1rDODg6Z6ePJHJHejyFh7NYdEEcZkjUCRe49rpI5kZCTfu5mNrWKg2BFULhssxCVijrlkW0aLfhA2RzqBaxdVtrwGttAAzHHDSTCOSWQ2kjO7sTDvVs8YL5bK\/unLmF9Lg31AWXs+gjKozEiMxR52uIkJByp3Twyrq2Y90C9AXtoxx+zukzfZmMq51GhXKbcTc38TrQFFsHh8XnYPIDmTONUIKAlA6SLw7+axGuh5UBYn2JHIRvXkkUXIRyCtyhjZtFB1Vm0vbvE2oCviuz91ISeUP3BnYhjkS5WPQDu3NyfeJAuSNKA08dK6oSiZ25C9vnVoJN03wKZHJRbirfkeb7UkleQtKCH6EWsOVh0r6HDGEYVDkfK6meWeRyy8zm8QvebzP1rhJ95mvGu4vob2WtVnn0GWligy0sUGWligy0FBloKDLQUGWligy0sUGWgoAtLFHq2DjCoqjgFA+VfNydts+wgkopImqpY56fsyHeRy6rnzf04wjFiysrSHMRIUKLa6jxvegJfYZkkEmYu8jpvGQKirHGDZcjsSQczX1J7xPICgNu9ALQHNSdk0LZt6w7ki2AFszTLMsn5lKAeIAvwoDW2fgmRnkkcPI+UEhcihVByqq3J+8x1J1Y8rCgL9AYW0+zaTS73eMrCWCTQDhC2Yob8Vawv0IB5UAz+DSRquVzIIUZYIwFRhmAUZnJsxVRlBsuhN7mxoCfae1GwsCSPG8llG8IKBh3RdmGaxufwk1Sc1BbzL44b8t1HBbb2\/7TLnyOFAAW9r24668b3rppduaTFDdld\/Qx63YeszZN5VXTiUlnB+63y\/etS\/iHReb9jE\/4e1q6L3Hq\/8Aa3pXSO3dFL9X4ZylsLWR\/SvclwzRl1DkqtxmNjoOddJbW0263GXErDY+pc0pR4fVHZHtNhY4zu2DZR3VHdvblqK8eWpg+82fRLA4qqosYDtRh5Cq3Ks1rAjjfhYi4quLUwy+EtPBKHFldOz+4tLFdpFScdwKrOZpVk4toMuW2t67nAmGxpGtmkvGZI52UpaTeplawYNlCl4w1rHmL2tYDR2UZDGDKGDXbRsuYC+gJTQ6W1oBdqYITRNHfLcqQbXsyMHU25jMo050BQbCYlWzh80kkkecoqrGsaaFbOxbgWN9Tc+AoDaoBL0AtAZe3dlJNGdO+BdTz8vI1o0+d4penUzarTRzwp8+h5JiF77fmP1r05PizyILur6G9lrTZgoMtLFBlpYoMtLFBlpYoMtLFBlpYoMtLFBlpYoMtLFBlpYo9G2FjhLCp5gWYdCK8HPjeObTPp9NmWXGmhO0cDyYTERxgl2hkVQDlJYoQADcWNyNbiuJoOdi2XjoZXJkldGEKs6EFwib8ARq5Iz64fO1u9mcjkABFi4dpyLlcy3ywM26yJkKPC0iroc7G0x0I5rYixIGrt7CYlnjkgMgKYeaxBQZpCYjGjhhbXK17W4HUUBAZ8azyqGYxxTCMtGF3jKxMhZcwtdA0MfwlPG1gINnYXHpCoJmUKIVyjdF8p1lYaG7jTnwvYXtQEwbHgEuJywj+zCboA6N\/WNjaX3TZdLhbfeoCpLhNpSwTo5k\/pSiMDdKZGLuEzXuQchW2o5XoCyx2jm7plKZvsswjzE5kv7Tpon9S2WxtfnloBsqbSCMc0tyqNYCMnNnlzIpUdwFdzrZvrQGziNhYfEBXnizPlFwzFsptqBY5b35gCqyhGXNF45JR5M5jtR2ahiIkjjAU6Ea2B5EXPOtei0+mfclCN\/Q8zaObUx78ZuuvEwjhk\/CvoK9NaXAuUI+yPIeqzv9cvd\/5FECjgo9BXRYsa5RXsUebK+cn7stYDBO7gRr3hr5a8fWqZHihHvVRfCs2SdQbv6mg20MQ0jRSwRmP2hImYK2XdnKrKbNrLmcEcrHhpr4UlG3R9RGUqV8y5hu0ccaXjwgVckcndIyJDIsjK8hjQlSNyQQFIBZe9a5EKKXJByb5mjFteY4TETlI1aP2nJqWUiF5FQsNCP6YuAeuoqSCjhO0M8sm4+zSQSLE5KsQj7lpXABYZs2UFP7WvrQGps3bIaO8n9QNIuVFJ3m7kaPPGtybNkLAXOnW16ANu7bGGiEmQuSGbJ3lfKq52IARtQLXzWAvqRQFObtSFaxiNmLrGc47zJNHD3hbuAtOmuugbThcCVNpYlsM8iohlWZ0Cg3XKs5jOUsUzMEBtcrcgcL0BUXbczBwrxqYonkcyRslyrshjIEndy5O8wJHfUjoQNSXEtKI93fMGjaQKyho1IzZXBOtxpbxvyoB2N2qqxM9mXiAHUqSR0DakHrXTDjeSSRyzZlig5P\/meS4pTnb8x+terKk2ePDjFM6HLWmzDQuWlihMtLFBlpYoXLSxQmWligy0sULlpYoTLSxQZaWKFy0sUW9m46SBsyHzB4GuOXFHIqZ2wZ5YZXE7PZO1lnGisDzvwv4GvJzYXjdM97T51mjaRk9pcVjQ8y4drBcMDfKp3bNvTvhf3iu6Ay63LiuJ3Ip+00ymQARFlDd1jlZMuW0khYhcr5iVHd+6L6kqBe7P7XeaRw0iZd3G6JkyPYjVveN1zA9R0JoDM\/nB1R2YR3XfDQ93eJHvEjV1Zg7NY\/hb+0GgJpO1Dh5FYwpZ0UM3eRFY2zOwf3tPcYIfMa0BVk7Y4gE\/YJ3Yi+UsFL2gaXPGCwcpdctgh5m+lqAft7tBiY1mizRxyIJMsmVu+RHFIqRqW9\/wC2PEn+nw1OUB6dq5i7qyRxqJChZ2X7L7QoGlUPmKsBcEhNWXiDegN3sziHkw0TyNmZlJLWtfvHUDpagNSgMftUR7Ow6lf\/AJCtOk\/qox67+hL7f3OFy17NngUGWlijreyWQRmxGe5v1tyrytbvOfoe3s7dWKlzs2skfCy8c3Ae9ybz0GvhWOmegQnZeHsQYIrFsxG7Sxb8RFve8eNQCVcLGM9kQZyS\/dHfJFiX072mmtAJNgonDBo0YNbMCqkNbhmBGtuV6Ao7QEUBSYggIMiouUKoPQAX4W0vbQaXAq+PHLI6ic8uWOKO9LkMbaGCnAEgjYDUCRQbaakZhbheuktNkj0OcNXhlyl7kj4rBEWJhIIYWIUizG7DhwJAv1tUdhk\/ayficP7l7gcRgcm7+x3f4LLk43921uOtR2GX9rHxOH9y9ypPj8AAq7uNghugEYIU9VuLD4V0jpcr6HOWtwx639DNbbCo0jQx5WktcsSRcFjfLfic5rvDQ\/uZmntJLwR9zLxWIeRszm5+Q8hyrfCEYKoo8zLlnle9JnL4rNnb8x+tZ5XbNkK3UdPlrSYqDLQUGWligy0sUGWgoMtLFBloKDLQUGWgoMtLFBloKLGAwhkkVBzOvlzPpXPLk3ItnTDi7Saijoptv4eEFY+8V0sutvC\/C99K+dyamKnUnxPqMeDhS5I2cBMzorMmRiNVuDY9LjjXVMo1TonY28qkgx8Z2hjRhlUyJkWQurLlCNJuwRrdtddOQ66ECtF2rRnWNYnZmdFWxGVg6SurhmsCtoH1FxwtegIMP2iMgi3kAzNcooIPeEojVsxNgNSeF9D4AgOk7VGN3R4ZGZWayxqXYIqRFr5b5mzTaW6eoGvsvagmaRMpQxmxVtGtmZQxXiAchIPAjhzoC+TQFLayTFPsZBG1+ahgR0tfTzqJXXAmNXxOWix200nGa7qqklfs1VuWjZeV720NZcT1F1NJ\/Q0TWLduPAr7b7RGaymN0UeRBPmK9XBPse9kjK\/pyPH1S7fu45KvrzM0YlOvqDWqO0NO+G+jDLQaiP6GPR1PAg+RBrTHLGSuLszyxTi6kmh+WrlKJIJXQ3UkHwqkoRkqaLwnKDuLo0o9v4gc1PmP2rO9HiNa2hm9B47RT9F9Kj4LH5st8wyeSIpNu4g\/eA8lH61ZaTEjnLXZnydfYo4id3N3Yt513hCMPCjPPJPJ4nZDlq5zolgwjvfKpNtT4edUnkjDxMvDFObqKsbLCymzCxqYzUlaInjlCW7JcRmWrFaDLQUGWgo57Fe+35j9a4N8TZHwo6fLXSzNQZaWKDLSxQZaWKDLSxQZaWKDLSxQZaWKDLSxQZaCgIpYojjxjKwMXvDnyF+Zrzcuq7e8WFX5vovv1Z6WHT\/D1lzcPJdX9uiNHZ8eGDpLIZWlBJYnUMSBa46Ai4rgtmyjxu35mv5pB9KN1u0UQ4Kx+Vdo6OfWji9fj6WZXavajsESMoUk0Pfszf22toOFyeo8a8zVqcaguDbPT00sclv3wRPsvC4QJFLME3iRqoDFWyWbNoBezBuY6CtWPDkSSpnHJnxN2pIhmxsCH7CCNSCCGyAWIDAEeQdgPzHrWzHo3zmYMuvS4Y192RYXGwi4kw0RBJLWRRclg5NuF8wDeYvVp6NfpZSGvf617GtHLs9gAY4xY3AKDQ2Cnl0VR\/0jpWd6bIuhqjq8T6lbZ3aHBjOY4sjljnUKAxsT3iRoRck3v96uWGHaycFzXM65sscUFN8nyJ5TDjlyuMpU3U31BtxFTqNO4qmxpdUpu17GCcJi4JCxZmRAtgZSFfjewJ94WHdPwrBhwZoPuvf9DbkzYa73dJNo9ot6MhVk071xx8LjlW\/TZsUJfzu7L15e55mrWTJGsPej1rmU1sdQQR4V7SkmuB4ri06Y1oFPECuWTDjyKpxT+peGXJDwSaIJdmo3UfP61gy7I00+Scfozdj2rqY82n9UVX2XIPce3kWX6XrO9m6rH\/Rzv6M0raWnn\/Vwr7EZXFJzJ+Ab6a1zlPa2Hopr8\/8Ah1UNl5+riyM7XkU2dF+OZD6EGufzzNj\/AK2Fr3X9zoth4Mv9HMiZNsjnG3wIP6itEP4g0z8Sa+xxyfw9qF4WmTx7VhPFiv5lI\/StuPamkmrU19+BgnsrVw\/Q39CzDiY3911byINbIZoT8LT+5kngyQ8UWvsWosM7e6rN5AmplOMebKxxyl4UdDsrCtCkiyOq5hcG+q6EEm+nSvN1OWOSSo9jR4J4ouyhhMCpgVpjfKO7lNtPG9Vx55Y+Ro1Gmx5mmyhOkY0BseOp9K749VNySZjy7PhHG5K7RBlrfZ5NBlpYozJtnqWJudST86rR3UnRs5aWc6DLSxQZaWKDLSxQZaWKDLSxQZaCgy0sUGWliiriMYiG3Fug5eZ4CsWr2hh0y774+S5mzS6DNqH3Vw83yK8SvMc3BeX\/ANQeP5j8KwY4ajXd\/L3YeXX\/AGb5zwaJbuPvT8+iL8UCqLAf76mvYxY4Yo7sFSPIyTlklvTdsflrpZzoMtLFGFhpt9icw1Vb26WXS\/xY3+FeFizfE6914YI93Lh+F0CT5zN3LXu2eFQZaWKDLSxQZaCjMx2DYNvFJyhgxUaHxsfnavLz6RQzfEx+6XU9PBqXPD8NL7NmlG1wGU8eBFekpRkrXFM85xcHXJjjc8STUqlyIdvmxjxA8RVckIZFuzVr1LQnKDuLoqvgSNUJHgDb\/Q\/GvKns2ePjpsjj6Pij0Y6+GRVqIKXquD\/2R+0SJ74uPQ\/sflXH5pqNNw1WPh+6PI7fLcOo46bJx8nzJsPjo355T0bQ\/sa9LT7QwZ13JfZ8GYNRoM+B9+P36FrLWyzJQZaWKEaMHiL+dQ6fMlWuRVk2VCfuAfl7v0rFl2fpcnigjZi2hqcXhmylPsAEdyRh+YBh8rGvPybA078Da\/J6WLb+ojwmk\/wQ7O2HJHMrMqSDgDrmU20ZQRpfhprrXfQ6CWlk95pr2ZTaG0o6yCUU4vy6M9E2Pg5Y1KvlAJvoSW+OlhV9RkjOVoppccscaaGYnZkEivmzWzAnXmpB9NK4dDYm0Z2IxCySCMC6niL6W5+lQkX5GGcOolIDhgD8+V\/hWvSxTlbMW0JyWOl1LWWvRs8Sgy0sUZszLmP2ltTpdevlUWdkuBr5arZSgy0sUGWligy0sUGWligy0sUGWliiPEzJGuZ2AH+9B1NUyZY44703SOmPDPJLdgrZgY3bDucqAqDwtq7eXT6+VfP6ja+TNLstMvv1PodNsfHhj2upf26FzZ2xzo0v\/b4j\/qP3j4cPOtWh2Wsb7TM96X9jJrdqOa7PD3Ymvlr2rPFoVYydAL+VQ5VzJUW+RKMI1gSLA9dP9a5PPBdTvHS5ZdBuM2RNJGywsmZtA17gAnvH0v8AG1cp6iMotLgdseknGabSZS2X2Unw8r3sUKqEa+oGpfNYWFjltWXR4cOm3nF8zXrcufVbkZLka\/sCWFnJ6nKQo9a0\/F8eRmegqN7xTkisbXB8RwrUpWrMMoU6G5amytBlpYoClBRmxMYXyH3CdD0v+l9PnXm48nw2XspeF+H09D0Z4\/icfarxLn6+ppZa9KzzqDLSxQZaWKEaMEWIuOhqJJSVNFk2naZmY7Y+b3Db+08PgeXzrxdXsTHke9ie6\/wezpNs5MS3ci3l+TLaSfDkAllHK\/eQ+A5eljXmvNtDQvv8Y+6\/0emsOg1y7vCXszV2Pj5Jr\/YtlBIMgtlBHIg6jz1r3dDrnqIb0o19zw9doI6eW7GV\/Y08tehZ5tDcy3tcXBta44nUClk7o61LIoULQFnFbQkaNYhJkPAm12ZegvwNZMmnuVo9DBq1GNSV0XA6DDacV94C5OvC551lyY3F0bsOZZFZz04kZQB3C\/Agfd5k9BTHBzdHXLlWOLkxdn4BYltcsSdWbif9K9LHjUFwPEz555ncuXkWstXsz0GWlijkcbIN4\/5269T4Vzb4mlR4HS7dxEkcJaLLnLxquYXXvyKmtvzUlJpcCkIpumZcPaW4BCBgZCpALBkXeCIEjKRcMSDcrwNU7U6diTYXbjbtWkRQxF+61wRvVi5gWN34eHjUrJw4kPFx4BJt8qEYxaOeTksFMgjzGyZRqeBYU7T0Cxepp7NlLxK7Wub35feI\/Srb9RtlNy5VFFn19K4vV4vM0LQ5vIZIGKnLYNyLagHqQDXKWvguR2js3I3xo5zE7HxDyLeXOSDmcpZE1Fgve1Php515mo0U9XJNSv8Asj09PrMejTTgr6eb\/wBG1s3ZSQjTvOeLnifIch4fWvV0mixaaNQXHqzx9ZrMmqlc3w8i7lrXZkoMtQ3XEKNl7Z77vNqMzD\/KPPmfCsWZynxrgb9NuwdNgcYQRkXvdT3if2qkcTavod56mMXurj9C42PKe\/73NUA+GYmojilLkTLNjjz4MqYraLvexsD93T610WmlfE5S1cK4LiUmYniT61tSS5HnuUnzY3LU2VoMtLFBlpYoMtLFFfG4XeKRz4j9j4HhWbVYFnxuPXp9TRpszw5FLp1+hX2ZP\/hte4Gl+YGhB\/uXhWbZ+rc08WTxR4ex31umUWskPCzQy16VmCgy0sUGWligy0sUI0YIsRcHiDR0+YXB2iTs9s2KOZit1DrYrmOUkcLA8DrWPLihjg9xczfhzzyTSm7oJ4wGIGoBt6V00+RyjT6HPV4owkmupzeI2HN7Q00eTvTKzAki6pCFQmw94OG+DnXQCuji960cYzW7TIcLsTEBkZ7nKxIG9a65o1UnjqA63y3OhqqjLr\/3Au5x5L+3qWcPs7FMVMhsAB3RK2pEQUE5bXBcE\/G\/hVkpdSjcen\/cQ2PsvEK4aQ6AkgZi1rxqrWvfTMDzNRGMlzE5Ra4GniccE0XvHmA1vn1q05Wjtg0s5ceSEl2sZJGZg2U2y3y90dLLx51wxJ42bNTp5ZIKuhPBMr+6fhwI+BrQppnl5MM8bqSJctWspQZaWKOVxkKbx+6Peb61wlPiaox4I69oweIv5+GorqcKImwcZIJRSQSQSouCdSRpx0qKRPET2GK992l7lr5R7x4nhxNhr4UpDiEuGiut0Uke73QSOuUWv6VSc4wVyL48U8jqI8XGgUDwNyf8ifqa83PkllfDkexpsMcS4+ItxhBoWBboP2F6z7hq3yVoRb96hxJUyliISNV9ORq+PNPFy5HLNp8eZceYiai9ezjyKcd5Hg5cTxycWOy1eznRS2lJly6kDXgbcCOPhxrPnm1VGnT41JStdBcK5aR9dByvfmRoOXCmKdzkTnx7sI8OJJFjRvWiGYMFBJtoQbcDe\/MVZtSnusooThBTT5nPY2SdTMEaVmtKQwE3csbqpiIyNpoGU3PGx1NOKuhwfFhjNo4omRY8+UIxD7l73Xdm6i1iGDPYXJNuAtRyfQKEUTy47EqxygkZjlvG53hugC\/8sWLG50\/ymrb0iNyLGSbQxgGqt3guUiJrIS8gIbibWRORN2GliLRvSChFj02nihCcRIlgixM0W7YMc0SNIFzG+YM7ALa91sdanfdWR2cb3TdwivkXeWz2Ga3DNbUDwq6bric2lfAly1NkUGWlijL2rhCPtE0N7k9Dawb9D4GvH2hheN\/E4+a5nqaLKprsMnJ8vqXsJMsihh5EdDzFejp9RHPjU4mDPglim4MkYgaEgV2s57rHWpZFEUk8a3zOotxuwFqjfj5l1ik+SM3GbfgQ2W7n+21vU\/pTfvkacehyS58CCPtNH96Nx4ix\/aquUqqjo9nzjxTNtdoJLHHJmFmuAT3ScvEWPMWrnh7raZTU451FtcUOWx4a+VaLMW6wIA46VFjdMvGbcgTQHOei2I+J4elRveRqxaLJPjyRjYrbjvpooPIfS\/8A+VHM9DHoscOPMp+20o17ovttKG6KmOIIINiDe96hxspPEpqpGlF2mNrNGC3UGynzHEVNyPPls7jwfAlwvaZCbSJl6Ed4fHS4qHOSXIpPZ81y4mFjdqx7x\/tF95uvXyrhvPqWjhkkuBsYvbNmKwmwU6sSWuRyUE2tpYmvnNHqNRHvym\/pZ6cNnxyRuSo6PBYpZUDr8fA8xX0+PNGcN5HiZdPPHk3GuI18ag5+nH0\/e1csmqUfCd8WhlLjN0Lv3b3UIHpf8zcSPAWrJeTK7qzbeHAquiSOFuZH5V0X0HH43rtHSzfiZnlrYrwx9yPGbRjgtmYLfgAACfHwHiajMsGCNztlMeTUZn3Bfb78Q1v+n96wQ2rpFK1CX4\/yTPHnmt1yEXFD8LD0\/Q1d7X0jfgfsv8lVgzJUpfkDieg+dR88xLgoP8EfByfFyGHFN+Ef5j+1Ue3V0h+SVovUxcRjJZgDlUCxsL8b2sPlWztc2RW69DTj08YJkmFlkUs34r8CoN81+YI51xyfFJLs5JPqWnhhOr6EWGmb2l\/e1FuIvoAeIsOVc5LV9nSl3vMt2MHGq4GquJObKcwNrjXobdfGsGoya3Ak5ZHx9SnYY\/JEgkPU+t\/rWeO0tVH9bIenxvoO37dR8RWmG2tSudP7f4OT0eNjvafAVqjt5\/qh+Tm9EujB5lIsVBGmhsdQbg+oBrr89xvnB\/gr8E11FOJ8Kq9vR6QfuStE\/MBifCqfPn\/8f5\/0T8EvP8Ce0+Aqj27k6QXuy3wUfNjTOT0rnPbeeSrdj+f8lo6SCd2zAnV4nsJHVDxItcjhxI0I+lYtPrcuFvc6nqSxQ1MLauSJH2DC\/eaSRjpqWViRy1K1o+b6jyXt\/szp7qpIX+X4v+JL\/mX\/ANafN8\/lH2\/2L9BV7P4fnmJ6lv2tVZbW1T5NL6JE77Jf4LhrWyf+TfvXF7Q1L477G+xU2Nhh\/h38yx\/WktfqXzmxvMlmwmGCFGRAjEaE5Rm4Ajxpj12oi21JhN9DNxWwsNGpbeSRKOjXGpsBYgk3JAtzJrRj2rqrrg\/sQ5eZQbZCt3VxAuQTlkVlaymxJDEHQ25VrW2MiVvGn9GWU4roINigGzYiMd3N3QWJW9rgX4VL2zk\/Tj9Czyl7+XYOcz6cbFBbz7ulZntnVPkkvsU7RgezmH4b6The2aM6dfd+dQtsapcXXs\/8jtGRP2aX7s5+IB+GhFdo7bzLxRRPasrSdm5xwaNviw\/Q\/WtENuwfig\/sW7RdRidnsQTrkHjmJ+gq0tt4q7sWS8iNCDsun35XJ\/tso+YJrBPbWd+FJfkp2jMHGbGhEjjv+83+I3Wusdo52k+Hsim9I09qbJbMXjOhN2UDW\/VfPnXm4c26t2Rp0+p3Vuy5EMUNiNHYj81umtrA\/GtnxEYqlI1SyYXzZdinZeKuo8mFqLULpIopYXwTJI8cPxsP+s\/vXVZZrkw9Pil0RMdqkD+o3r\/u9dHqcqXM5\/AYU73UYs28L5QXkuPeIJPkSeAHwrhkz3xkztjlhxKlSNLZftKZVIsnMMwJA\/ttf0NYMvZvjHmZc8sMuMeZsb2s9GWxDNShZQwwLAWckkC\/eJ5edfSw0+BxXdTLJosR4U6AacrVrquAsym2hICwsgAdlF730Nr8f93o6XMtcUNixTBzJdMx5Wa3C3W9UebGucl7kOca5lhtqyEg9zQEWCtzt4+FZNVDFnik5pV9ClxJI9rNdQQtyQNLj415ubR44Qcozv0DaNPe156QsN7ShYb2lCw3tKFhvamhYb2lCw3tRQsr46PeLbmNQfGlHTFleOakZ2ydolTu24fdJ5H8J\/Si4mvV4VXaw5M2d7U0YLDe1FCypidowo4WUvwuAt9epJB5dPGt2jjh4yyex3w4cmV1AYNsYPpN6v8A+1bd7R\/tRo+X6jyIMdtDBSpkIkB+4xzd176G5NTH4WT3YqrIlo8+OLk0LisQ8kZVtxra4Zri4N+R8OI4Gx5Vzhs3ddqZk3JPoU02ZI6hs65ski3YGTKGYEBGZiSBlI1PBtLcKxymoScWuTXLrRyoWLYWUe8lyJBfISVzybwZSWvpcjxvy4VV51fLy\/AJI9ijOCWUgMDbJ79pDJeS57za2v59dIefhS\/7hXAFf+Xm7g3osiMo7hBs0DQ20axF3za34W041b4hceHP19bFF5MABOjKAsaoDlFgpkF1VgBwIVnv1uvSufadxp87\/H\/V+STV3tcaJsN7UULDe0oWcrjInMj6j3m+vnWyPhRzd2bW\/rPRNhv6ULDf0oWMYqeKg\/AUoneEVUHBVHkBUu3zG8OkxNhekYbzSRBH7YQ+U2Gl+PjoPGu+fTPDSZLtOibfVnoiw31KFjHKnioPwqVa5DgCMBaxYAcszW+tdfiM3LefuQIoQEkKLk3JsL361zlKUubJJN9VaFhv6ULDf0oWLvqULE39KFhvqULF31KFib+lCw39KFhv6ULDfUoWZO04hmzW0bj4Hkfj9ahp8z09DmTvFLk+Rb2fjrjIxu4GviL8R15XqefEyanC8U66dC3v6UZ7KWOw+8YNcaAjW\/Mg308qlOlRq0urlp22lzIf4cPxfL\/Wptm35xP9q9xk+yVZcue1\/C\/PzqVJp2Vntacl4URfwJP+IfQVPaO7o5fM8tVSNmF8qhegA9BXNqzA2OM1KIsjjxlyRY3HEdOlaIaSc470OIVskE9cZQlF1JUA31VoWG+pQsN9ShYb6lCzk8bijvH1+831NboQW6iLNvf1korYb+lCw31KFhvqULDf0oWG+pQsjDW4HTodR8L8K2YdbkgqfFepdZGuBGZ1vYrlPgSAfEEfSvRxfD6hcIqzrDcmBlP3XI8+8P3qs9nYny4EvCujJExWmtvhwrDl0GSHGPFHKWOUR4xFYqOdi7+lCw31KFhvqULIsVi8iM\/HKpa3C9gTb5VaMbkkLKEO3gWsUbgtgNSXJIKAG3DKdb8jXV4KXP8A\/BYp28veOVsoFw1tL7vPZuYOhHDlTsHwV\/8AWLHfx1BYNoSxFhbgGyg62Ppenw7fIWaO\/rhQsj9sXhmF\/MVdYpvkmTxEbHKLEmwPAm4BtxseFOyn5DiJHtGNjZZFJ6BheoeOS5oiybf1WhYjyAgg8DSiVJrijNlzAix7y6g9fA+fOqpbr9D3YuOrwU+a\/uX4MYGF\/UdDzFXo8OScW4sk31RRWw31KFhvqULEOJHUUoWRnHp+NfUVdY5PkiRj7SQdT5An\/SukdLllyiSlJ8kQx4jvmQ6d0KB4Xvc+Nevo9K8UW5dTvjxtcWX4YZnAIU+Z7o+dV1WfTOO7NkzcWuJYTCS\/eK+d68Gc4J93ijMxww55soqnaryACNRxYnyqry+SFoC8Y5H1qrnIq5I5nFRQl2OvvHmetepBy3UTaLO+rPRSxd9ShYb6lCw31KFhvqULDfUoWIZ6ULKWJxoYgLrY3J5cxYH416Wh089\/fa4GjDBt2J7XevV3TXQoxlTuihParHTQ8+h+Fcc2mhl8S4+ZSWNSJ02iOeh9RXk5dDlg+CtehllhmvUc20EH3h9a5LS5n+llOzk+gn8QXx9KutFmf6SyxT8hsmNQgqQSCCCOoOh51eOhzXdfknsJlefExHVla+gBB71we6Fym97k8OtdI6HMuq\/77E9hL0JodmyuQBg5Bm0VZGEWbukXCOwN8t9bXteuGb+THenP8P8AvRVY2+CaNvDdj8UzAskUQ43Ezk6m5BCL3teRNq82W0cKXBt\/Zf8AfgutPNl7F7GkVt3DE0oHvy5kUhuISNWIA04sc3HTwvp9Xp1Uszr0S4l+xot4aLERgKuANh\/zIr\/Ek6mvXW3NGlSv2I7KRDh8NiA5f2QN\/UDoXj7rs6utjqD3ePjXDHtbTRySk3zRZ45VwHbR2VNKvdwUSPcWcOlxY68F1uLjXrUz2zo5RqiOzkVZOzWJfPZRCdN3ZldDpqJFsMnmnpWGeu0tprivyOxT6FH+XdpAEskWnNZRb\/yUWrRHV6CXKyexhypmDLijc34oSCAQQeB0I0IOhBrfPR4p47x8zZpqwT\/uJg5JZHG7UsXNssd8xHLQc6nBoY\/qI1UoZHvNGjHs\/EtMMPu5VlNu62YWX8Z\/tHWtC0mHyMvZ40rLPaLYUmECmSSNwxsLOxbxIU\/dHXxq0dPi\/ahCMJdDEOIA0ter9hj\/AGr2OnZw8hoxK9B6Vfs4RV1Q3YroaeB2fiJNcuQdX7unlxrFm2hgxcLt+hWU4xNSPY0QHfkZj4aD9687JtfI+EVRyefyLCRwJ7sa+Z1PzrFPV5p85HKWZsdLtDxrO1fM5OZUfHUorvEL400orvFV8YamirmRtifGrbpVyMebENmPmfrXpwj3Ud41RJJtGNeLr63PpVY4Zy5JkqMnyRC22YuRJ8gf1rvHQ5n0OiwZH0Im24OSN8SB9L11WzZ9Wi600urGjbDHgF+ddVsxdZF\/hl5kb7Uk\/EB5D9711WzsS52y600ERtj5OOdvkP0rotFhXQlYIeQntZbiSbdST8q6wwY4conRY4rkhfaf9iupcPafGoA8YnlUkDxPQDTLxoKGiWhJIkuvGooD1koRRe2FtCKGdZZUzpbKdLsmtxInO4trbW1edtPS5c+H+TJqS48OvoKOh2z2vw6mNcGw3sjhGlaN\/sk5taQan6a8a8bR7L1Wae7rW91dL5\/llJbq8CLe1dpzbOmhz432qCQjeBguaME2zqU5XN7dAfOter2Jp54m8Ud2S5V1K48kr4mhh+1OCQvfFwkM5YESLqCByvflXz09maqSS3HwVcjQpok\/nLAf\/wBMf+dar8n1b\/Q\/ZjfiQx9scEM1501a4sw6D56V1eyNW6qL5BSRHju3WESORkcO4UlEB95uQ05Xq2HY2qlNKapXxfoRKargirC+KfDHF\/xIia+kWVd3xGm76W18ud9a+n+VaRR7Pc+\/Uy78rI07d4SXDhZ0lDOtpI0UkdDle4BB48eB1rwZbB1cMreJqlybNSycORzk2KwU8odFfCIABIZCXMigd0Romaz8rkjlpX0WgwanEms00\/oikpTlLeNhu3KwoI8Dho8OL3YsA5bS2tra873Nb3GyixXxkY8nafHTzCQSNvMm7vGtu7e5GnUm9RJwgrkyd2MVxLLbKxs7B55bacXbMwHQAaCvPy7UwQ4R4so80YqkXI9gYdfeZ2PnlHyrzp7WyvwpI4y1LLmHSCL+mig9bXPqdaw5NTlyeKTOMszYkmP8b1wRzcytJjj1qxzcyu+K8alIhzImxBqaK7xEcRUqJG8RtiKsoFd4haerqBG8RGer7hWzKmxRzHXmevWvShBbqO65GcJz0HLlXtJs9dTdAsxtyp1DmxRIfCpY32O3pFuFVtkdqxGmPhUontGRjEHwqw32KsxAvpeoJ32P9obXhRsb7JBMbctKqN9jTOegpY7Riri28KEPIwfFNflUjtGCYpvChO+x\/tTeFBvsf7a2nCg32I2KbwohvsbJimOmnpSuJEsjGti20vr53P61LJbpD1xLeFQ+Q32DYpvCoG+w9oOnCpJ32J7S1QhvsX2yTKVzHL+G5t6VaiN4aMQfCo6jfYoxDaedGTvM6XDxxIL7lGOmr5j8s1vlXkajLkulJ\/j\/AAcJTlZbXbciiyJGo6KpH61glp1PjKTf3ODbboY+3JbXsvof3qvweP1K7pXk2vKT93nyP71b4TH6kbiIX2rJ\/b6H96fB4\/Ur2aYxtov4f7+NW+Dx+oeKJXfaknRfQ\/vVlo8fqUeKKIW2rJfgvof3rotFj9Su4hRtN+i+h6edR8Hj9S3YxGHab9F9D+9WWkh6kPFEBj300Xj0\/wBafCw9QsURDjWsdBU\/Cw9SOyiJ7Y3QVD08Ux2USpI1yTYcTW2OGNIt2aP\/2Q==)","e82a34ea":"A nationwide lockdown imposed areoss India on 24 March to stop the spread of coronavirus. Especially among the country 300 million poor.Yet in Delhi, the world's most polluted city, it has also resulted in some of the freshest air the captial has seen in deades.","e46f2ed3":"1. # Analysis at City level- daily data\n \nWe have daily and hourly city data as well as daily and hourly Satation data. Station refers to the continuous pollution monitoring stations operated and maintained by the Central Pollution Control Board(CPCB) and the State Pollution Control Boards.Let's begin by analyzing the various cities dialy data to get a big picture. We shall begin by importing the dataset and the necessary libraries for the analysis","0ca0e943":"# Convert to Date Time format\n\nLet's convert the Date column into Date Time format with the help of datetime library","535e2df1":"![data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxIQEBASEBAVFhUVFRUVFRUVFRUVFRUQFRUWFhcVFRUYHSggGBolGxcWITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OFxAQGC0lHyIvLS0tLS0tKy0tLS8rLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKgBKwMBIgACEQEDEQH\/xAAbAAABBQEBAAAAAAAAAAAAAAABAAIDBAUGB\/\/EAEcQAAEDAgMEBwMIBgkFAQAAAAEAAhEDIQQSMQUiQVEGEzJhcYGRcqGxFCMzUrLB0fAkQkOSosIVNGJjZHOC4eJTk6PS8Rb\/xAAYAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP\/EACQRAQEAAgEEAQQDAAAAAAAAAAABAhEDEiExQTIEIlGBcaHw\/9oADAMBAAIRAxEAPwDTCcEwJ4UDwpAownhA8JwTQnBA4IpqMoHIpqKByITUVAUUEkBRQSQFJCUx1QIJCUlSxDKb25a0FkgkOiJFxr3q5g6dCIY5rfBzY9FrH6mcd6bP2X6a8k6pf0SKe+kRxBHMKNe3HOZTcrx5Y3G6sFFBFaQkkkUQEkUgEUISTkEASRSQNhJOQRDUkUkDSr7KQdeRqRoDoSPuVFX45tE\/nuXPP03h7c0E8KMJ4Xjes8KRqjCeEDwnBMCKB6KYnIHBFNRlQORTUUDkkEUEJrFLrzyUJN0pQPc+UEJSQZfScfoz\/Fv2guMZUe07rsvAQSuy6Tf1Z\/i37QXHn19eKzk64eErMXWbpVd5OIW7gulbmU2MNHMWgAuNS7o49lc6TGnkk4QJlXDK4+DPGZ+XTO6Z\/wCH\/wDJ\/wAFvbD2gcRRFQtyyXCJmwNrrzl67vof\/VW+074r0cXJcstWvPzceOOPaNtFAIr0vKKUJIougSRSQBJFBEJBFJA1KEUkDSp2YiBGUcefEyoUkslWWxjBOCYE4LwPYkCeCownBBICiCmAogqB4KMpkpyB4KKYCjKB4KMpgKMoHqL5QORTnOgSqhKB0pAoApSgcimylKKzukYJw7og7zdbDtDuXJdW7kPU93cuq6Su\/R3QWi7LvMDtDiAfguRDmkNaKtLwzO+OVSxvG9hxNAkWIGnDkQmVaoA3j6fnRSVHD\/q0rd57v7Kjq0Q6QalOwntO059lTTW0bqzPrC\/L\/Zdn0T2lQZhWh1Vrd51nOExK4ZmCY4\/TUv3ncePZU9Gm1stBEDiJg34W0W8cum7jGeMzmnqmFxLKjc1N4cJiRcTyUy5\/oZUb1BYCMwcXEcgYg+5dAvZjluSvHljq2CigktIKSSSISSSSBIIoIaJBFBUJJJJEYQT2lRhPC8D2JAnBRgpwUDwUZTAUZQPBTgVGCnAop8pyYCiCgfKMpkoygFSoIIlV5TsQ28qJBIko0UQ9JMSRWd0mj5M6biW\/aC4vK0ukN0vfxXX9KXvbhnGm4tdmZcEgxmE3B5LjOvxUx11T\/uVJ0n6yzXTDwnNNpGnLS17KV7Znw911Tp4jEyZrVDrpUfwPigMZigD88+bftX\/+yjR9KgAZiJP4qwKcEKmMTiSL1nyDb5x\/f\/a\/N0flmJj6V9wZ+cf69pDTtOgzIfXnkz+ZdcvLdljFufloF4zQDlc8RrdxBsPFemYWmWMY0uLiAAXEklxAuSTzXq4Mt46eTnx1ltMigEV3cRSQSQFJBJAUEigqCgkkgSCSSDBCcFAa7RxCrnGngvA9S+aoBaCbumO+BJUgK5HbO0qvXU8od83vW0JOv8NvMrqqVQOAI4qiWUQUwFGVA+U4FRynAop4KcCowUZRUgRlMBTpQKpoVXU1TQqvKBySbKMoCkhKTWl2iIz+kEfJ3zwLT7xyXMhjSZ4+05dljNk\/KGGn1hZMHM0AkQZ4rntpdHcTQGaRiGC5LW5arQOIaJzeRlS4W943hnJ2qh1EXDf4yoWYcEGW3k8T8U+hVBAOoIlp5hPocfErm6q76DRbL6SfvT6dNpGmnObeUp2eHGePFBrrzwVHS9CKYz1yPqsHHm7n4Lq1y\/Qky7EeDPi9dQV7OH4R4eb50gigiurmKSCKBJISkqhJJIIEklKEoCggSoy9BxYKeCoWlSArxPUqYx+Vx3C6W2IjW44nvC0qbiI7lnbQfHVHk+fRjypcJic27O8GtcfF0\/h71DXtvYWrmbrfippWRRrFpstHD1C5slFicFOBUcogoqSUQUwFGUEgKIKjlGUDqhsVXlSVdFAED5RlMRQOF1abZU2CSFalBYwx3h5q2qOFO8PP4K8u\/F4cOTy4XpTs4UaxcwQyqC+BoKrSM\/k7M0xzzLDcQWRMSY966fpvgy51N7nnqyC3JNg8Gcw8QSD7IXFPoZcoBNn6WjUrz8k+6vVxW3GL4wzb38\/yEm0Wg2uYMC8TdRii6+8fz5J72OHEe78FzdNOr6DftvCn\/OuqK4voDmDqgJMdW06CCZt6X9V2ZK9nD8Hi5vnRSQCUrq5Cigq9Oo7rXtJGUNYWwDmBJeDJmD2eSbFlJBBxjVUNq1gwS4wOfAePId6dKBuqmBpxTaBYBzrCIjM62miC3KSEoSgRXmHSnGYpuMrinVAaCIGUWGVvevTXmASVyW1+ifyis+qMS9gfByhjSBugakTwlZylq49lIFPBUQcngryvQpbYqiKbfrOPuEe+QFn7Or9XXEmzt09x4e+PVaW0BLqOn0nET+qU6ns9k5nDMe8WnnCz7amtXbRBV\/AvERN+XcFmgqxhq2U3CrLVlEFRtdIlOBRpICgyoDpzI8wmyqeyqeVrte1x5xdEaMoymSjKKVV1lACpKuihCB8pZkEEEtI3U8qtRN1PKAVca2gOseJDTyJ1tw8VrUsQ2oMzOyfGPI8QsHaFGpUpltJrHOtAqCWkA3kSLws\/ozXqsr1KRp5XQC9mWmGtAdGYPbBdZwi3mdVcLZlv0XGZY69r3TQ\/N0vaPwXCvcDktfMeB5ldx03+ip+0fguAcGtcwWkzy0upzfNrh+DRFaIBHpPLjKfmJtB9Cq7KIItCPUumAfh9y5OzpOgzvnHj+7HPg4fiuvK4ToWwMqOe8wG0ydSIlzQTaxEEnuhddh9qUqhgPE2iTGadC3nqvVw2TF4+efcvJJsptOqHTBBgxYyu7gklQM+lf7FP7VRVdu7QGHw9SryAA9txDW+8hOwWIFRxqN0dSpOHg41CPioq9K53pvjatKgzqRLnVGiYBjLL9CRN2jit8lcv0r2tho6qo55e17DDIkF27qbWD5jwUyuoTy6TB1i+nTeRBc1riORcAY96bgjuDxd9orF2d0kpuqNomm5nYawkh2bMDGngPVbGAPzY8X\/bcrMpfAsyhKSC0K21TGHrn+7f9kqLEYjK4jlHwVjHgGlVE6tc3\/UQRHj3Li+kW2msxNRodpl+w1YyujW0TSpA5VwU8OXlehFjnb9D\/M\/lKvSs3Gu36Ht\/cVfaUEinw9OXAKShRBbBF9fJXGgBBIFVoF2arB\/aC3dkZKsAqDCdqt\/mfyMRVyVDhn6jvef4yE574BKp4JxLyeG+PPrCVFaQKZWqEZY4uAPgiCm1HWHiFQ+qbKIFOqmyjBQPQlNlKUEtI3UxKr0jdSlyC1ge2PA\/BJtP9Oc7lh2j1qu\/BQ0cQGPaSCQSG2vGYhoJ7pIU7D+mvH+HZ6dY9duPw5Z9qzumx+bpe0fguGNJpNPSb29V2\/Tf6Kl7R+C4ulByfj4rjzfJ6eCfZFpjDyUosNPu8ymtqW196qbWxWRhaJl1hEi54T\/uOK47dMrqbU6e2Hsc5rI3hBF4gXgjUjQcr8lVG1XZh1d8xm0xMNBmXWgRxGl+Qw+recxyExzbbUD7oVnCYsgNzMGTPeC4FxIEjMe\/KeWi6dE08lu3ZY7alR\/VMBALA2T1kElzi4cgYIP5ut3ohtEmo9lSmWOfBywDpobabpb+dPPMAKjs466HC0OkbsCS06yIEDu8Z6XohVaz50EOJkAuzbrs3ETIO61SZ3ju7fwdO5p3O36YdQqtdMBjn2iZpEPiSCBpyKqYvHU8FHWOOUU6LG2lzsvWCeAGi5rpRtx\/VGmxzpDHZ3ZwMwLXAiMtrEHv7tVn9IMcMY+m\/PkgAAG4fYFwtoLmJC9M5Jl4c+mxp0umzjVLngNo5oAiSY4Z9OV\/hquS23tc16zqkwHOYTl0ADm28QqWJxDAKmVvacS2\/wBGyd1pi2hPx5Q1tIFpcXNBJZYWgFwvANvL3LNv5JO7Vwu0Gtq03OZIDxNyQcpk8gB4Qu66ObWFVzmZnghz3gw67CXPIk2MZhpPlx81q4UtDixxOW8hvCQDDp0Gvquj2JS6t5qnU0pFgDMXAIEmzeJtNtVi8kwnVFk29Dq7SFMDrIk8JDSfDMY9\/ArCxvSOq57vk8dWBEubfvcPUd1lijaFXEHNVdAsN9sNAOjbaD0lOoVGlz3VTlyENZkc0Nd3zlIBtE8POV5uf6zLVxxjePGnp1WFzGOzvhxMlxDQSN4iOJgemnLz\/pTULcXWDTYFvL6jZ58V3FYwHDrcpI0YXGQTcvzau5C2kTovPNumcRVvN49AAuP0ktztt9N5PQQU4FMZTJmBopqVMi5FoXuZUsafnKHtn4LUpt4yszFN+cw3tO9AFssjkgmpvMju\/wBlZZUkqix3eOKe2u36w9QitCVXwrt6r7f8jEBi2fWHvTcG4E1DNi+R+60fEKKt1OyfAqLAdj\/U\/wC25OebHwKxX4+oyrRpsyw91SZufpHeghB0IcmYgSInUwqGK2m2mC4kEAxa5JmIF0\/+kqTsu+Ad03MWInj4qi7VNgow5Vqu06WnWs\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\/N\/skj\/2Q==](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxIQEBASEBAVFhUVFRUVFRUVFRUVFRUQFRUWFhcVFRUYHSggGBolGxcWITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OFxAQGC0lHyIvLS0tLS0tKy0tLS8rLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKgBKwMBIgACEQEDEQH\/xAAbAAABBQEBAAAAAAAAAAAAAAABAAIDBAUGB\/\/EAEcQAAEDAgMEBwMIBgkFAQAAAAEAAhEDIQQSMQUiQVEGEzJhcYGRcqGxFCMzUrLB0fAkQkOSosIVNGJjZHOC4eJTk6PS8Rb\/xAAYAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP\/EACQRAQEAAgEEAQQDAAAAAAAAAAABAhEDEiExQTIEIlGBcaHw\/9oADAMBAAIRAxEAPwDTCcEwJ4UDwpAownhA8JwTQnBA4IpqMoHIpqKByITUVAUUEkBRQSQFJCUx1QIJCUlSxDKb25a0FkgkOiJFxr3q5g6dCIY5rfBzY9FrH6mcd6bP2X6a8k6pf0SKe+kRxBHMKNe3HOZTcrx5Y3G6sFFBFaQkkkUQEkUgEUISTkEASRSQNhJOQRDUkUkDSr7KQdeRqRoDoSPuVFX45tE\/nuXPP03h7c0E8KMJ4Xjes8KRqjCeEDwnBMCKB6KYnIHBFNRlQORTUUDkkEUEJrFLrzyUJN0pQPc+UEJSQZfScfoz\/Fv2guMZUe07rsvAQSuy6Tf1Z\/i37QXHn19eKzk64eErMXWbpVd5OIW7gulbmU2MNHMWgAuNS7o49lc6TGnkk4QJlXDK4+DPGZ+XTO6Z\/wCH\/wDJ\/wAFvbD2gcRRFQtyyXCJmwNrrzl67vof\/VW+074r0cXJcstWvPzceOOPaNtFAIr0vKKUJIougSRSQBJFBEJBFJA1KEUkDSp2YiBGUcefEyoUkslWWxjBOCYE4LwPYkCeCownBBICiCmAogqB4KMpkpyB4KKYCjKB4KMpgKMoHqL5QORTnOgSqhKB0pAoApSgcimylKKzukYJw7og7zdbDtDuXJdW7kPU93cuq6Su\/R3QWi7LvMDtDiAfguRDmkNaKtLwzO+OVSxvG9hxNAkWIGnDkQmVaoA3j6fnRSVHD\/q0rd57v7Kjq0Q6QalOwntO059lTTW0bqzPrC\/L\/Zdn0T2lQZhWh1Vrd51nOExK4ZmCY4\/TUv3ncePZU9Gm1stBEDiJg34W0W8cum7jGeMzmnqmFxLKjc1N4cJiRcTyUy5\/oZUb1BYCMwcXEcgYg+5dAvZjluSvHljq2CigktIKSSSISSSSBIIoIaJBFBUJJJJEYQT2lRhPC8D2JAnBRgpwUDwUZTAUZQPBTgVGCnAop8pyYCiCgfKMpkoygFSoIIlV5TsQ28qJBIko0UQ9JMSRWd0mj5M6biW\/aC4vK0ukN0vfxXX9KXvbhnGm4tdmZcEgxmE3B5LjOvxUx11T\/uVJ0n6yzXTDwnNNpGnLS17KV7Znw911Tp4jEyZrVDrpUfwPigMZigD88+bftX\/+yjR9KgAZiJP4qwKcEKmMTiSL1nyDb5x\/f\/a\/N0flmJj6V9wZ+cf69pDTtOgzIfXnkz+ZdcvLdljFufloF4zQDlc8RrdxBsPFemYWmWMY0uLiAAXEklxAuSTzXq4Mt46eTnx1ltMigEV3cRSQSQFJBJAUEigqCgkkgSCSSDBCcFAa7RxCrnGngvA9S+aoBaCbumO+BJUgK5HbO0qvXU8od83vW0JOv8NvMrqqVQOAI4qiWUQUwFGVA+U4FRynAop4KcCowUZRUgRlMBTpQKpoVXU1TQqvKBySbKMoCkhKTWl2iIz+kEfJ3zwLT7xyXMhjSZ4+05dljNk\/KGGn1hZMHM0AkQZ4rntpdHcTQGaRiGC5LW5arQOIaJzeRlS4W943hnJ2qh1EXDf4yoWYcEGW3k8T8U+hVBAOoIlp5hPocfErm6q76DRbL6SfvT6dNpGmnObeUp2eHGePFBrrzwVHS9CKYz1yPqsHHm7n4Lq1y\/Qky7EeDPi9dQV7OH4R4eb50gigiurmKSCKBJISkqhJJIIEklKEoCggSoy9BxYKeCoWlSArxPUqYx+Vx3C6W2IjW44nvC0qbiI7lnbQfHVHk+fRjypcJic27O8GtcfF0\/h71DXtvYWrmbrfippWRRrFpstHD1C5slFicFOBUcogoqSUQUwFGUEgKIKjlGUDqhsVXlSVdFAED5RlMRQOF1abZU2CSFalBYwx3h5q2qOFO8PP4K8u\/F4cOTy4XpTs4UaxcwQyqC+BoKrSM\/k7M0xzzLDcQWRMSY966fpvgy51N7nnqyC3JNg8Gcw8QSD7IXFPoZcoBNn6WjUrz8k+6vVxW3GL4wzb38\/yEm0Wg2uYMC8TdRii6+8fz5J72OHEe78FzdNOr6DftvCn\/OuqK4voDmDqgJMdW06CCZt6X9V2ZK9nD8Hi5vnRSQCUrq5Cigq9Oo7rXtJGUNYWwDmBJeDJmD2eSbFlJBBxjVUNq1gwS4wOfAePId6dKBuqmBpxTaBYBzrCIjM62miC3KSEoSgRXmHSnGYpuMrinVAaCIGUWGVvevTXmASVyW1+ifyis+qMS9gfByhjSBugakTwlZylq49lIFPBUQcngryvQpbYqiKbfrOPuEe+QFn7Or9XXEmzt09x4e+PVaW0BLqOn0nET+qU6ns9k5nDMe8WnnCz7amtXbRBV\/AvERN+XcFmgqxhq2U3CrLVlEFRtdIlOBRpICgyoDpzI8wmyqeyqeVrte1x5xdEaMoymSjKKVV1lACpKuihCB8pZkEEEtI3U8qtRN1PKAVca2gOseJDTyJ1tw8VrUsQ2oMzOyfGPI8QsHaFGpUpltJrHOtAqCWkA3kSLws\/ozXqsr1KRp5XQC9mWmGtAdGYPbBdZwi3mdVcLZlv0XGZY69r3TQ\/N0vaPwXCvcDktfMeB5ldx03+ip+0fguAcGtcwWkzy0upzfNrh+DRFaIBHpPLjKfmJtB9Cq7KIItCPUumAfh9y5OzpOgzvnHj+7HPg4fiuvK4ToWwMqOe8wG0ydSIlzQTaxEEnuhddh9qUqhgPE2iTGadC3nqvVw2TF4+efcvJJsptOqHTBBgxYyu7gklQM+lf7FP7VRVdu7QGHw9SryAA9txDW+8hOwWIFRxqN0dSpOHg41CPioq9K53pvjatKgzqRLnVGiYBjLL9CRN2jit8lcv0r2tho6qo55e17DDIkF27qbWD5jwUyuoTy6TB1i+nTeRBc1riORcAY96bgjuDxd9orF2d0kpuqNomm5nYawkh2bMDGngPVbGAPzY8X\/bcrMpfAsyhKSC0K21TGHrn+7f9kqLEYjK4jlHwVjHgGlVE6tc3\/UQRHj3Li+kW2msxNRodpl+w1YyujW0TSpA5VwU8OXlehFjnb9D\/M\/lKvSs3Gu36Ht\/cVfaUEinw9OXAKShRBbBF9fJXGgBBIFVoF2arB\/aC3dkZKsAqDCdqt\/mfyMRVyVDhn6jvef4yE574BKp4JxLyeG+PPrCVFaQKZWqEZY4uAPgiCm1HWHiFQ+qbKIFOqmyjBQPQlNlKUEtI3UxKr0jdSlyC1ge2PA\/BJtP9Oc7lh2j1qu\/BQ0cQGPaSCQSG2vGYhoJ7pIU7D+mvH+HZ6dY9duPw5Z9qzumx+bpe0fguGNJpNPSb29V2\/Tf6Kl7R+C4ulByfj4rjzfJ6eCfZFpjDyUosNPu8ymtqW196qbWxWRhaJl1hEi54T\/uOK47dMrqbU6e2Hsc5rI3hBF4gXgjUjQcr8lVG1XZh1d8xm0xMNBmXWgRxGl+Qw+recxyExzbbUD7oVnCYsgNzMGTPeC4FxIEjMe\/KeWi6dE08lu3ZY7alR\/VMBALA2T1kElzi4cgYIP5ut3ohtEmo9lSmWOfBywDpobabpb+dPPMAKjs466HC0OkbsCS06yIEDu8Z6XohVaz50EOJkAuzbrs3ETIO61SZ3ju7fwdO5p3O36YdQqtdMBjn2iZpEPiSCBpyKqYvHU8FHWOOUU6LG2lzsvWCeAGi5rpRtx\/VGmxzpDHZ3ZwMwLXAiMtrEHv7tVn9IMcMY+m\/PkgAAG4fYFwtoLmJC9M5Jl4c+mxp0umzjVLngNo5oAiSY4Z9OV\/hquS23tc16zqkwHOYTl0ADm28QqWJxDAKmVvacS2\/wBGyd1pi2hPx5Q1tIFpcXNBJZYWgFwvANvL3LNv5JO7Vwu0Gtq03OZIDxNyQcpk8gB4Qu66ObWFVzmZnghz3gw67CXPIk2MZhpPlx81q4UtDixxOW8hvCQDDp0Gvquj2JS6t5qnU0pFgDMXAIEmzeJtNtVi8kwnVFk29Dq7SFMDrIk8JDSfDMY9\/ArCxvSOq57vk8dWBEubfvcPUd1lijaFXEHNVdAsN9sNAOjbaD0lOoVGlz3VTlyENZkc0Nd3zlIBtE8POV5uf6zLVxxjePGnp1WFzGOzvhxMlxDQSN4iOJgemnLz\/pTULcXWDTYFvL6jZ58V3FYwHDrcpI0YXGQTcvzau5C2kTovPNumcRVvN49AAuP0ktztt9N5PQQU4FMZTJmBopqVMi5FoXuZUsafnKHtn4LUpt4yszFN+cw3tO9AFssjkgmpvMju\/wBlZZUkqix3eOKe2u36w9QitCVXwrt6r7f8jEBi2fWHvTcG4E1DNi+R+60fEKKt1OyfAqLAdj\/U\/wC25OebHwKxX4+oyrRpsyw91SZufpHeghB0IcmYgSInUwqGK2m2mC4kEAxa5JmIF0\/+kqTsu+Ad03MWInj4qi7VNgow5Vqu06WnWs\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\/N\/skj\/2Q==) The air around india Gate in Delhi ,before and after Lockdown Source:[https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSPvBnwCJVPGWqSDer_LzlyS0C8gYI5XEimxA&usqp=CAU](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSPvBnwCJVPGWqSDer_LzlyS0C8gYI5XEimxA&usqp=CAU)\n","38e25578":"**Please upvote!! stay tuned for further Analysis**","bc946e90":"# Features Description \n\n1. **PM2.5**: It refers to particles that have diameter less than 2.5 micrometers(more than 100 times thinner than human air) and remain suspended for longer. These particles are formed as a result of burning fuel and chemical reactions that take place in the atmosphere.\n\n\n2.**PM10**: PM10 are the particles with a diameter of 10 micrometers and they are also called fine particles. An environmental expert says that PM10 is also known as respirable particulate mattter.Particulate matter is a complex mixture of soot,smoke,metals,nitrates,sulphates,dust water and rubber etc\n\n\n\n**3. NO**: Nitric oxide is not considered to be hazardous to health at typical ambient concentrations, but nitrogen dioxide can be. ... NOx gases react to form smong and acid rain as well as being central to the formation of fine particles(PM) and ground level ozone.\n\n\n\n**4.NO2**: Nitrogen dioxide is part of a group of gaseous air pollutants produced as a result of road traffic and other fossil fuel combustion processes. Its presence in air pollutants.\n\n\n\n**4.NH3**: Gaseous ammonia (NH3) is the most abundant alkaline gas in the atmosphere. NH3 plays a significant role int he formation of atmospheric particulate matter,visibility degradation and atmospheric deposition of nitrogen to sensitive ecosystem.\n\n\n\n**4.CO**: It is produced in the incomplete combustion of carbon-containing fuels such as gasoline,natural gas,oil,coal and wood.\n\n\n\n**5.SO2**: It is formed when fuel containing sulphur such as coal and oil, is burned,creating air pollution. It affect the environment when they react with substances in the atmosphere to form acid rain.\n\n\n\n**6.O3**: It is harmful to air quality outside of the ozone layer.Ground level ozone is a colorless and highly irritating gas that forms just above the earth's surface.\n\n\n\n**7.Benzene**:The benzene in indoor comes from product that contain benzene such as glues,paints , furniture wax , and detergents.The air around hazardous waste sites or gas stations can contain higher level of benzene than in other areas.\n\n\n\n**8.Toluene**: Motor vehicle and industrial emmissions are the major sources of pollutants .\n\n\n**9.Xylene**: Motor vechicle emissions are the predominant source of xylene in the urban air environment. Evaporation from petroleum fuel storage facilities and service stations.\n\n\n\n**10.AQI**: The air quality index is an index for reporting air quality on a daily basis. It is a measure of how air pollution affects one's health with in short time period. The purpose of the AQI is to help kow how the local air quality impacts their health.\n\n\n\n**11. AQI_Bucket:** it is variable of AQI.","4a91d880":"# Comparison Between pollution levels in 2020,2019 VS 2018","344c9706":"# Analysing the Complete City Level Daily Data\n\nLet's now analyse the work with the data to see what patterns and insights ","54caca6b":"**Visulising yearly data**","1ef177f1":"# Objective\n\nHere we have access to a large amount of granular data to relating to the concentration of major air polluntants in india and it will be interseting to see if the claim of reduced air pollution is being actually backed by data","959c67e8":"# AQI for some of the major cities of India"}}