{"cell_type":{"1d991918":"code","2aa64278":"code","39cc3f4b":"code","e8f92c9b":"code","f0249d32":"code","b7fb305c":"code","c06e8210":"code","84eb430b":"code","a97b1b99":"code","9fc44f11":"code","bb049a4b":"code","beeeb95b":"markdown","dafa4414":"markdown","6939d2d2":"markdown","3bf82d67":"markdown","70ca0d89":"markdown","e96ff6bb":"markdown","0b682e32":"markdown","1e25c691":"markdown","01e5d20e":"markdown"},"source":{"1d991918":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import LabelEncoder \nimport seaborn as sbn\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2aa64278":"df = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")","39cc3f4b":"missing_values_cols = [col for col in df.columns if df[col].isnull().any()]\nmissing_values_cols","e8f92c9b":"categorical_cols = [col for col in df.columns if df[col].dtype == 'object']\nlabel_encoder = LabelEncoder()\nlabelled_df = df.copy()\nfor col in categorical_cols:\n    labelled_df[col] = label_encoder.fit_transform(df[col])\nlabelled_df.head()","f0249d32":"correlation=labelled_df.corr()\nplt.figure(figsize=(15,15))\nsbn.heatmap(correlation,annot=True,cmap=plt.cm.Blues)","b7fb305c":"labelled_df.drop('veil-type', axis=1, inplace=True)","c06e8210":"y = labelled_df.iloc[:, 0]\nX = labelled_df.iloc[:, 1:22]","84eb430b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","a97b1b99":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\nsvm = SVC()\nparameters = [{'kernel': ['rbf'], 'C': [1, 10, 100], 'gamma': [1e-3, 1e-4, 1e-5]},\n              {'kernel': ['poly'], 'C': [1, 10, 100], 'degree': (2, 3, 4)}\n             ]\nclf = GridSearchCV(svm, parameters, cv=5, scoring=\"accuracy\")\nclf.fit(X_train, y_train)\nprint(clf.best_params_)\n","9fc44f11":"svc=SVC(kernel='poly', C=10, degree=3)\nsvc.fit(X_train,y_train)\nsvc.score(X_test,y_test)","bb049a4b":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import plot_confusion_matrix\n\ny_test_hat = svc.predict(X_test)\nprint(classification_report(y_test, y_test_hat))\nprint(plot_confusion_matrix(svc, X_test, y_test, cmap=plt.cm.Blues,\n                            display_labels=['Poison', 'No poison']))\n","beeeb95b":"Applying the best parameters in our model","dafa4414":"# Importing dataset","6939d2d2":"# Checking for missing values","3bf82d67":"# Dependent and Independent variables","70ca0d89":"# Label Encoding to categorical columns","e96ff6bb":"As viel-type is not related to any of the columns, removing it","0b682e32":"# Applying GridSearchCV to find the best hyperparameters for doing polynomial classification","1e25c691":"# Splitting training and testing dataset**","01e5d20e":"# 100% accuracy? Really?"}}