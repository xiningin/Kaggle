{"cell_type":{"350122aa":"code","b326ad1b":"code","039b120a":"code","972d0049":"code","45abfc2c":"code","f98e49eb":"code","04b6a68a":"code","fccab9b2":"code","89089367":"code","9c47d696":"code","a2bfb91e":"code","a256ae21":"code","9f8c0b5e":"code","294717eb":"code","115279db":"code","86051e89":"code","9caef734":"code","c5626d0b":"code","54e4b4e4":"code","02e8a2ae":"code","34748fb4":"code","94a8c29f":"code","89b5c862":"code","d754757b":"code","5f1fd283":"code","ad1f060d":"code","0e78f401":"code","8a43bcc6":"code","19f7926e":"code","91a982cd":"code","2f4f6f0b":"code","320d91e1":"code","c9eca283":"code","dea76b1d":"code","fe77aaeb":"code","6babd5a3":"code","d7cdfdd2":"code","fea36fc9":"code","087573f2":"code","befa1de8":"code","01f2ffcf":"code","ec87994f":"code","a300038d":"code","fbe88d83":"code","847f3744":"code","0af1c796":"code","0bd47fbf":"code","5a4f6f18":"code","5d125a12":"code","40d625ca":"code","ed7556de":"code","e8fed6f2":"code","32c3635f":"code","af3cbf09":"code","bec79493":"code","4ca26340":"code","2f874e19":"code","6af2e2f7":"code","cb367022":"code","cb43cff1":"code","daa91036":"code","5e7fe209":"code","1c777f2a":"code","40c363b3":"code","fd5ca850":"code","06f5c85c":"code","e1023a6f":"code","55406f0f":"code","8d064cb5":"code","0d09a6f2":"code","88b00cde":"code","85cec2ee":"code","22303b93":"code","3a0fed01":"code","cfcd0649":"code","e0ea5520":"code","1f9a43e9":"code","e5c0f1ec":"code","131bc1c9":"code","53f87a99":"code","de986368":"code","9f5f1996":"code","ed74cc8d":"code","d6d05609":"code","4a93c8c5":"code","7ad3d364":"markdown","5b429a7e":"markdown","0aa32dab":"markdown"},"source":{"350122aa":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n","b326ad1b":"nf = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\nratings = pd.read_csv('..\/input\/netflix-titles-imdb-ratings\/IMDB_results_jan-28-2020.csv')","039b120a":"nf.head()","972d0049":"ratings.head()","45abfc2c":"nf.info()","f98e49eb":"nf.columns","04b6a68a":"len(nf.columns)","fccab9b2":"nf.shape","89089367":"ratings.shape","9c47d696":"# which columns are numerical?\nnf.describe().columns","a2bfb91e":"nf.describe()","a256ae21":"#NaN\nnf.isnull().sum()","9f8c0b5e":"#\n### Checking TV shows vs Movies. Visualisations\n# 1- of all time\n# 2- by year","294717eb":"movies = nf[nf['type'] == 'Movie']\nshows = nf[nf['type'] == 'TV Show']","115279db":"len(movies)","86051e89":"len(shows)","9caef734":"# histograms\nplt.hist(nf['type'])","c5626d0b":"# bar with value counts\nnf.type.value_counts().plot.bar()","54e4b4e4":"# TV shows were released more recently than movies\nnf.groupby(by =['type']).mean()","02e8a2ae":"# create a bar plot for years 2020 & 2021 showing TV vs movies","34748fb4":"#filtering by year 2021\nyear = (nf[nf.release_year == 2021])","94a8c29f":"year","89b5c862":"year.type.value_counts().plot.bar()","d754757b":"year.type.unique()","5f1fd283":"sns.barplot(year.type.unique(), year.type.value_counts())","ad1f060d":"#filtering by year 2020\nyear2 = (nf[nf.release_year == 2020])","0e78f401":"year2","8a43bcc6":"sns.barplot(year2.type.unique(), year2.type.value_counts())","19f7926e":"# both years\n(nf[(nf.release_year == 2021) | (nf.release_year == 2020)]).type.value_counts().plot.bar()","91a982cd":"# create a bar plot for years 2016 -2021 showing TV vs movies, hue?","2f4f6f0b":"years = nf[nf.release_year.isin([2016,2018,2019,2020,2021])]","320d91e1":"years","c9eca283":"sns.barplot(x = years.type.unique(), y = years.type.value_counts())","dea76b1d":"#\n### cleaning the rating data set to merge\n","fe77aaeb":"ratings","6babd5a3":"len(ratings[ratings.IMDB_title_name == 'Not Found'])","d7cdfdd2":"# dropping 'Not Found' titles rows","fea36fc9":"ratings.drop(ratings[ratings.IMDB_title_name == \"Not Found\"].index, inplace = True)","087573f2":"ratings.reset_index(drop = True, inplace= True)","befa1de8":"ratings","01f2ffcf":"#Exploring rating column","ec87994f":"(ratings.IMDB_rating == 'Not Found').value_counts()","a300038d":"# adding a column of ratings of floats, keeping the unrated titles \nratings['rating'] =  [float(i.split()[0]) if len(i.split()) >2 else i for i in ratings['IMDB_rating']]","fbe88d83":"ratings ","847f3744":"# Exploring the unrated titles on www.IMDB.com to see why \"not found\" \nratings[ratings.rating == 'Not Found']","0af1c796":"# So the 'not found' in this case are just unrated movies\/shows.\nratings['rating'] = ratings['rating'].replace('Not Found', 'Unrated')","0bd47fbf":"ratings[ratings['rating'] == 'Unrated']","5a4f6f18":"# dropping titles with IMDB_titleID as name of actors. like the above name at row 65","5d125a12":"ratings1 =  ratings[~ratings.IMDB_titleID.str.contains(\"name\")]","40d625ca":"ratings1","ed7556de":"ratings1.reset_index(drop = True, inplace= True)","e8fed6f2":"ratings1","32c3635f":"# Discovered duplicates\nratings1[ratings1.IMDB_title_name.isin([' Little Baby Bum: Nursery Rhyme Friends (2016) (TV Series) '])]","af3cbf09":"ratings1.iloc[4815,2]","bec79493":"ratings1.drop_duplicates(keep='first', inplace=True)","4ca26340":"# stripping the titles at ()","2f874e19":"ratings1['title'] = [(i.split(' (')[0]).strip() for i in ratings1.IMDB_title_name]","6af2e2f7":"ratings1\n","cb367022":"ratings1.title[10]","cb43cff1":"# both sets have same titles now","daa91036":"nf[nf.title == 'Friends']","5e7fe209":"ratings1[ratings1.title == 'Friends']","1c777f2a":"nf[nf.title == 'Friends'].title.values  == ratings1[ratings1.title == 'Friends'].title.values","40c363b3":"# Checking for NaNs","fd5ca850":"nf.title.isnull().sum()","06f5c85c":"ratings1.title.isnull().sum()","e1023a6f":"len(nf.title)","55406f0f":"# rename rating in ratings1 to user_rating","8d064cb5":"ratings1.rename(columns = {'rating' : 'user_rating' }, inplace = True)","0d09a6f2":"# Adding ratings to Netflix dataset, NaN if not available from IMDB.","88b00cde":"merged = nf.merge(ratings1, on = 'title' , how = 'left')","85cec2ee":"merged","22303b93":"m = merged.copy()","3a0fed01":"m['user_rating'].isnull().sum()","cfcd0649":"#dropping titles with NaN?  \nm.dropna(subset = ['user_rating'], inplace = True)","e0ea5520":"m.user_rating.unique()","1f9a43e9":"# masking the unrated movies\n\nm_masked = m.loc[m['user_rating'] != 'Unrated']","e5c0f1ec":"m_masked.sort_values(by = ['user_rating'], ascending = False)","131bc1c9":"# Selecting a subset of columns\nm_info = m_masked[['type','title', 'country', 'date_added', 'release_year', 'rating', 'user_rating']]\nm_info","53f87a99":"m_info.sort_values(by = ['user_rating'], ascending = False)","de986368":"# the US has the most movies \/ shows\nm_info.country.value_counts() ","9f5f1996":"# Top 5 US movies\nUS_movies = m_info[(m_info.country == 'United States') & (m_info.type == 'Movie') ]","ed74cc8d":"US_movies.sort_values(by = 'user_rating', ascending = False).head(5)","d6d05609":"# Top 5 US TV Shows\nUS_shows = m_info[(m_info.country == 'United States') & (m_info.type == 'TV Show') ]","4a93c8c5":"US_shows.sort_values(by = 'user_rating', ascending = False).head(5)","7ad3d364":"Top 5 US Shows ","5b429a7e":"#\n### What are the top 5 rated movies and TV Shows in the US of all time?","0aa32dab":"Top 5 US Movies"}}