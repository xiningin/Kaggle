{"cell_type":{"182bffcb":"code","b9768bce":"code","6c840624":"code","0b5f550f":"code","f185781c":"code","09d4fc37":"code","9c6e9a6d":"code","f3ad9b7c":"code","eff548db":"code","eb28fce2":"code","debc54fe":"code","0b6d698b":"code","6ad0e1bc":"code","15276a86":"code","15cd2fd3":"code","9cf0ce1f":"code","7d4769e8":"markdown","4ee50316":"markdown","b0fb5b44":"markdown","4e97a0ef":"markdown","a2012bc8":"markdown","ff707105":"markdown","d0619b90":"markdown","f91f648c":"markdown"},"source":{"182bffcb":"import os\nimport csv\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.svm import SVC\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import RFECV\n\nfrom xgboost import XGBClassifier","b9768bce":"train_data = pd.read_csv('..\/input\/titanic\/train.csv', index_col=0)\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv', index_col=0)\ntrain_data.info()\ndisplay(pd.DataFrame({'% of NANs': round(train_data.isna().sum() * 100 \/ len(train_data))}))","6c840624":"train_data.describe(percentiles=[0.25, 0.5, 0.75, 0.95])","0b5f550f":"# Survived column values\r\nprint(\"Value counts for `Survived` column\")\r\ndisplay(train_data.Survived.value_counts())","f185781c":"print('Gender value percentage:\\n')\r\ndisplay(train_data.Sex.value_counts() \/ len(train_data))\r\n\r\nprint(\"Survival percentage for each gender:\\n\")\r\n\r\nwomen = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\r\nrate_women = sum(women)\/len(women)\r\n\r\nprint(\"% of women who survived:\", rate_women)\r\n\r\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\r\nrate_men = sum(men)\/len(men)\r\n\r\nprint(\"% of men who survived:\", rate_men)","09d4fc37":"sns.scatterplot(x='Fare', y='Age', data=train_data, hue='Survived')","9c6e9a6d":"sns.displot(data=train_data, x='Age', hue='Survived')","f3ad9b7c":"visualize_age = train_data[['Age', 'Survived', 'Ticket']].copy()\r\nvisualize_age['Age_Category'] = pd.cut(\r\n    x=visualize_age.Age, \r\n    bins=[0, 2, 4, 9, 15, 21, 44, 60, 80], \r\n    labels=['Infant', 'Toddler', 'Child', 'Teenager', 'Adult', 'Mid-Age', 'Middle Senior', 'Old-Age'], \r\n    include_lowest=True)\r\n\r\nsns.set(rc={'figure.figsize':(10, 6)})\r\nsns.countplot(x='Age_Category', data=visualize_age, hue='Survived')","eff548db":"age_survival_perc = pd.pivot_table(columns=['Survived'], index='Age_Category', values='Ticket', aggfunc='count', data=visualize_age)\r\nage_survival_perc = age_survival_perc.div(age_survival_perc.sum(axis=1), axis=0)\r\nage_survival_perc.columns = ['Died', 'Survival_%']\r\nsns.barplot(x='Age_Category', y='Survival_%', data=age_survival_perc.reset_index())\r\nplt.show()","eb28fce2":"plt.rc('xtick', labelsize=14) \r\nplt.rc('ytick', labelsize=14)\r\n\r\nsns.barplot(x='Pclass', y='Survived', data=train_data)","debc54fe":"class_survival_perc = pd.pivot_table(columns=['Survived'], index='Pclass', values='Ticket', aggfunc='count', data=train_data)\r\nclass_survival_perc = class_survival_perc.div(class_survival_perc.sum(axis=1), axis=0)\r\nclass_survival_perc.columns = ['Died', 'Survival_%']\r\nsns.barplot(x='Pclass', y='Survival_%', data=class_survival_perc.reset_index())","0b6d698b":"fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(15, 6))\r\nsns.countplot(x='Parch', data=train_data, hue='Survived', ax=axs[0])\r\nsns.countplot(x='SibSp', data=train_data, hue='Survived', ax=axs[1])","6ad0e1bc":"# def prepare_data(data):\r\n#     data.drop(columns=['Name', 'Cabin', 'Ticket'], inplace=True)\r\n#     data['Age'] = data['Age'].fillna(data['Age'].mean())\r\n#     data['Embarked'] = data['Embarked'].fillna(data['Embarked'].mode()[0])\r\n\r\n#     data['family_size'] = data['SibSp'] + data['Parch']\r\n#     data.loc[data['family_size'] > 0, 'is_alone'] = 0\r\n#     data.loc[data['family_size'] == 0, 'is_alone'] = 1\r\n#     data = data.drop('family_size', axis=1)\r\n\r\n#     data['Age_Category'] = pd.cut(\r\n#     x=data.Age, \r\n#     bins=[0, 2, 4, 9, 15, 21, 44, 60, 80], \r\n#     labels=['Infant', 'Toddler', 'Child', 'Teenager', 'Adult', 'Mid-Age', 'Middle Senior', 'Old-Age'], \r\n#     include_lowest=True)\r\n\r\n#     data['family_size'] = data[['SibSp', 'Parch']].sum(axis=1)\r\n#     data['isalone'] = 0\r\n#     data.loc[(data['family_size'] == 0), 'isalone'] = 1\r\n#     data = data.drop('family_size', axis=1)","15276a86":"# prepare_data(train_data)\r\n# prepare_data(test_data)\r\n\r\n\r\n# def encode_data(train, test):\r\n#     categorical_cols = list(train.select_dtypes(exclude=np.number).columns)\r\n#     encoder = LabelEncoder()#.fit_transform(train_data[categorical_cols])\r\n#     for label in categorical_cols:\r\n#         train[label] = encoder.fit_transform(train[label]) \r\n#         test[label] = encoder.transform(test[label])\r\n\r\n# encode_data(train_data, test_data)","15cd2fd3":"# xgboost = XGBClassifier(\r\n#     random_state = 1, \r\n#     n_estimators = 1000, \r\n#     learning_rate = .1,\r\n#     verbosity = 0, \r\n#     use_label_encoder = False,\r\n#     objective = 'binary:logistic',\r\n#     max_depth = 3)\r\n\r\n# features = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\r\n# X = train_data.drop('Survived', axis=1)\r\n# y = train_data.Survived\r\n\r\n# scores = cross_val_score(xgboost, X, y, cv=10, scoring='accuracy')\r\n# print(np.mean(scores))\r\n\r\n# xgboost.fit(X, y)\r\n\r\n# test_data['Survived'] = xgboost.predict(test_data)\r\n# test_data['Survived'].reset_index().to_csv('submission.csv', index=False)","9cf0ce1f":"param_test1 = {\n    'n_estimators': [100,200,500,750,1000],\n    'max_depth': [3,5,7,9],\n    'min_child_weight': [1,3,5],\n    'gamma':[i\/10.0 for i in range(0,5)],\n    'subsample':[i\/10.0 for i in range(6,10)],\n    'colsample_bytree':[i\/10.0 for i in range(6,10)],\n    'reg_alpha':[0, 0.001, 0.005, 0.01, 0.05, 0.1, 1],\n    'learning_rate': [0.01, 0.02, 0.05, 0.1]\n}\n\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=2)\nmodel.fit(X, y)\n\ntest_data['Survived'] = model.predict(X_test)\ntest_data['Survived'].reset_index().to_csv('\/kaggle\/working\/submission.csv', index=False)","7d4769e8":"# Visual Analysis","4ee50316":"The majority of passengers who paid more suvived","b0fb5b44":"# Descriptive Analysis","4e97a0ef":"In terms of Gender, the dataset seems to be reasonably balanced. \r\n\r\nSurvivability for Women was higher than for men","a2012bc8":"Passenger class 1 had the largest Survival percentage, and Passenger class 3 had the lowest. ","ff707105":"Midle Aged passengers were the most common.\r\n\r\nAges under adults have highest survival percentages","d0619b90":"## Parch (N_Parents \/ N_Children) - SibSp(Siblings \/ Spouses)\r\nMost survivors were travelling alone ","f91f648c":"# Load Dataset"}}