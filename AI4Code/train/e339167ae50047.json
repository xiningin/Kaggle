{"cell_type":{"c015344d":"code","64f812f1":"code","dd6c98ee":"code","121ec224":"code","afeb5a58":"code","b4e4bdc7":"code","5c9576af":"code","754f8e6a":"code","0b42fec6":"code","797da16e":"code","9ee14ea6":"code","c3996a51":"code","9c1c754a":"code","21f291f9":"code","6e6c0220":"code","92cfa964":"code","132f99a3":"code","aead5033":"code","3264a094":"code","518ea2f4":"code","972a2bd5":"code","27ab2592":"code","3c652c97":"code","eb321469":"code","0b346cae":"code","720362fe":"code","dc4034e0":"code","e3c4367d":"code","0682da09":"code","6b480349":"code","5d60fbd1":"code","8edbabd7":"markdown","667b8f2a":"markdown","4ba221fe":"markdown","1ff163b6":"markdown","17591834":"markdown","1e894f42":"markdown","c3a9c2d4":"markdown","559e6317":"markdown","fc41b1fd":"markdown"},"source":{"c015344d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n\n%matplotlib inline\nsns.set(style='white', context='notebook', palette='deep')\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","64f812f1":"# importing training and testing dataset\n\ntrain = pd.read_csv(\"..\/input\/Kannada-MNIST\/train.csv\")\ntest = pd.read_csv(\"..\/input\/Kannada-MNIST\/test.csv\")","dd6c98ee":"# training dataset\ntrain.head()","121ec224":"# test dataset\ntest.head()","afeb5a58":"# train.isna().sum().sum()\n# test.isna().sum().sum()","b4e4bdc7":"# train.info()\n# train.describe()\ntrain.shape","5c9576af":"# test.info()\n# test.describe()\ntest.shape","754f8e6a":"# Store training features in X_train and training targets in Y_train\n\nX = train.drop([\"label\"], axis=1)\ny = train['label']","0b42fec6":"print(X.shape)\nprint(y.shape)","797da16e":"# sns.countplot(y)","9ee14ea6":"X_reshape = X.to_numpy().reshape(-1,28,28)\nX_reshape.shape","c3996a51":"plt.figure(figsize=[10,5])\nplt.subplot(111)\nplt.imshow(X_reshape[0])\nplt.title(y[0])\nplt.show()","9c1c754a":"X_reshape = X.to_numpy().reshape(-1,28,28,1)\nX_reshape.shape","21f291f9":"y_enc = to_categorical(y)","6e6c0220":"print(X.shape)\nprint(y.shape)\nprint(X_reshape.shape)\nprint(y_enc.shape)","92cfa964":"X_train, X_test, y_train, y_test = train_test_split(X_reshape, y_enc, test_size = 0.1)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","132f99a3":"X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size = 0.5)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_valid.shape)\nprint(y_valid.shape)","aead5033":"model = Sequential()\n\nmodel.add(Conv2D(32, (5,5), padding = 'Same', activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(32, (5,5), padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D((2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3,3), padding = 'Same', activation ='relu'))\nmodel.add(Conv2D(64, (3,3), padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D((2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","3264a094":"model.compile(optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0), \n              loss = \"categorical_crossentropy\", \n              metrics = [\"accuracy\"])","518ea2f4":"datagen = ImageDataGenerator(featurewise_center=False,  # set input mean to 0 over the dataset\n                             samplewise_center=False,  # set each sample mean to 0\n                             featurewise_std_normalization=False,  # divide inputs by std of the dataset\n                             samplewise_std_normalization=False,  # divide each input by its std\n                             zca_whitening=False,  # apply ZCA whitening\n                             rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n                             zoom_range = 0.1, # Randomly zoom image \n                             width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n                             height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n                             horizontal_flip=False,  # randomly flip images\n                             vertical_flip=False)  # randomly flip images","972a2bd5":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","27ab2592":"epochs = 10\nbatch_size = 86","3c652c97":"history = model.fit_generator(datagen.flow(X_train, y_train, batch_size = batch_size),\n                              epochs = epochs, \n                              validation_data = (X_valid, y_valid),\n                              verbose = 2, \n                              steps_per_epoch = X_train.shape[0] \/\/ batch_size, \n                              callbacks = [learning_rate_reduction])","eb321469":"# Plot the loss and accuracy curves for training and validation \n\nfig, ax = plt.subplots(1, 2, figsize=(12, 4))\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","0b346cae":"print(model.summary())","720362fe":"id = test['id']\ntest_data = test.drop('id', axis=1)\ntest_data = test_data.to_numpy().reshape(-1, 28, 28, 1)","dc4034e0":"results = model.predict(test_data)\nresults = np.argmax(results,axis = 1) # select the index with the maximum probability","e3c4367d":"sim = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/sample_submission.csv')\nprint(sim.head())","0682da09":"id = np.arange(0, results.shape[0])","6b480349":"save = pd.DataFrame({'id':id,\n                     'label':results})\nprint(save.head())","5d60fbd1":"save.to_csv('submission.csv', index=False)","8edbabd7":"## Checking Datasets","667b8f2a":"## Compile Model","4ba221fe":"## Importing Datasets","1ff163b6":"## Reshape Features","17591834":"## Train - Valid Split","1e894f42":"## Importing Libraries","c3a9c2d4":"## Train - Test split","559e6317":"## One Hot Encode Target","fc41b1fd":"## Model Creation"}}