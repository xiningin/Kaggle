{"cell_type":{"84cd6411":"code","701e5fca":"code","5cc8d79e":"code","c9cc63af":"code","ed55260c":"code","aa5e8f8b":"code","f3b2ab85":"code","4a5b82a4":"code","19cc44d3":"code","a79a50d2":"code","fd78e65b":"code","0b4c2a74":"code","6d9b1593":"code","f820913a":"code","a3d43c29":"code","14fea54c":"code","96efd160":"markdown","50b62117":"markdown","6b4bec38":"markdown","b0491251":"markdown","64ed7931":"markdown","41156ecc":"markdown","64675264":"markdown","4b542994":"markdown","e95abd16":"markdown","921b1a5a":"markdown","36279d22":"markdown","cab46f5d":"markdown","65155937":"markdown","066beb25":"markdown","c67c9f9b":"markdown","573ecc90":"markdown","318476b4":"markdown"},"source":{"84cd6411":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nimport warnings\nimport matplotlib as mpl\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nwarnings.filterwarnings(\"ignore\")\n","701e5fca":"%matplotlib inline","5cc8d79e":"%%time\ntrain_data = pd.read_feather('..\/input\/ubiquant-trainfeather-32-bit\/train32.feather')","c9cc63af":"font = {'family' : 'normal',\n        'size'   : 15}\nmpl.rc('font', **font)","ed55260c":"# target is 0 only 1736 times out of 3141410\nsum(train_data['target'] == 0)","aa5e8f8b":"# convert target to binary\ntrain_data['binary_target'] = train_data['target'] > 0","f3b2ab85":"fig, ax = plt.subplots(figsize=(20,7))\nsns.countplot(y = train_data['binary_target'], ax=ax)\nax.set_title(\"Positive Target vs Negative Target\", fontsize = 20)\nax.ticklabel_format(style='plain', axis='x')\nax.set_xlabel(\"Count\", fontsize = 20)\nax.set_ylabel(\"Target Positive > 0\", fontsize = 20);","4a5b82a4":"round(train_data['binary_target'].value_counts()*100\/train_data.shape[0])","19cc44d3":"print(f\"Number of unique investment IDs: {len(train_data.investment_id.unique())}\")","a79a50d2":"fig, axs = plt.subplots(nrows=4, ncols = 1, figsize=(15,15))\nfor i in range(0,4):\n    inv_id = train_data.investment_id.value_counts().index[i]\n    train_data.loc[train_data.investment_id==inv_id, ].plot(x= 'time_id',\n                                                          y = 'target',\n                                                          ax=axs[i])\n    axs[i].set_title(f\"Investment_ID_{inv_id}\", fontsize= 20)\n    axs[i].set_ylabel(\"target\", fontsize= 20)\n    axs[i].set_xlabel(\"time_id\", fontsize= 20)\nplt.tight_layout()","fd78e65b":"tgt1 = train_data.loc[train_data.investment_id == train_data.investment_id.value_counts().index[0], 'target']\ntgt2 = train_data.loc[train_data.investment_id == train_data.investment_id.value_counts().index[1], 'target']\ntgt3 = train_data.loc[train_data.investment_id == train_data.investment_id.value_counts().index[2], 'target']\ntgt4= train_data.loc[train_data.investment_id == train_data.investment_id.value_counts().index[3], 'target']\n\nfig, ax = plt.subplots(figsize=(10,10))\n\nsns.heatmap(np.corrcoef(np.vstack([tgt1[0:1209], tgt2, tgt3, tgt4])), \n            cbar_kws={\"orientation\": \"horizontal\"},\n            cmap = \"flare\",\n            annot=True,\n            linewidths=2,\n            linecolor='yellow');","0b4c2a74":"fig, axs = plt.subplots(nrows=4, ncols = 1, figsize=(15,15))\nfor i in range(0,4):\n    inv_id = train_data.investment_id.value_counts().index[i]\n    sns.distplot(train_data.loc[train_data.investment_id==inv_id, 'target'], ax=axs[i])\n    axs[i].set_title(f\"Investment_ID_{inv_id}\", fontsize= 20)\n    axs[i].set_ylabel(\"target\", fontsize= 20)\n    axs[i].set_xlabel(\"time_id\", fontsize= 20)\nplt.tight_layout()","6d9b1593":"train_data['target'] = train_data['target'].astype('float')","f820913a":"fig, ax = plt.subplots(figsize=(15, 15), nrows=2, ncols = 2)\naxis_list = [ax[0,0], ax[1,0], ax[0,1], ax[1,1]]\n\nfor i in range(0,4):\n    inv_id = train_data.investment_id.value_counts().index[i]\n    df = train_data.loc[train_data.investment_id==inv_id, ['target', 'time_id']].set_index('time_id')    \n    plot_acf(df, lags = 12, title = f\"Auto Correlation Investment ID : {inv_id}\", ax = axis_list[i])\nplt.tight_layout()","a3d43c29":"def total_returns(retrun_per):\n    global initial_investment\n    initial_investment += initial_investment * (retrun_per\/100)\n    return(np.trunc(initial_investment))","14fea54c":"fig, ax = plt.subplots(figsize=(15, 15), nrows=8, ncols = 2)\naxis_list = [ax[0,0], ax[0,1], ax[1,0], ax[1,1],\n            ax[2,0], ax[2,1], ax[3,0], ax[3,1],\n            ax[4,0], ax[4,1], ax[5,0], ax[5,1],\n            ax[6,0], ax[6,1], ax[7,0], ax[7,1]]\n\nfor i in range(0,16):\n    returns = []\n    inv_id = train_data.investment_id.value_counts().index[i]\n    df = train_data.loc[train_data.investment_id==inv_id, ['target', 'time_id']].set_index('time_id')\n    initial_investment = 100000\n    returns = df['target'].apply(lambda x: total_returns(x))\n    sns.lineplot(x = df.index, y = returns, ax=axis_list[i])\nplt.tight_layout()","96efd160":"# **Assuming targtes are the returns from market, check what proportion are positive vs negative vs 0**","50b62117":"### Insights\n    * Assuming the returns calculation is correct, only 5\/16 of the investments are giving appreciation of initial investment","6b4bec38":"Using @slawekbiel Feather dataset: https:\/\/www.kaggle.com\/slawekbiel\/ubiquant-trainfeather-32-bit","b0491251":"# how are the targets for these 4 investments correlated","64ed7931":"### Insights\n\n* Target is rarely 0, which makes sense, because, you will either get positive or negative returns\n* Target is negative for 56% Investment-TimeIDs and positive for 44% of cases","41156ecc":"number of unique values per time ids:","64675264":"# **Plot 4 investment targets over time**","4b542994":"### Insights\n    * Returns\/target is volative ranging from -4 to 4","e95abd16":"**take 4 investments, that have maximum number of time_ids**","921b1a5a":"### Insights\n    * No auto correlation is observed, except for lag 1 (about 0.2)","36279d22":"# Check auto correlation of targets","cab46f5d":"# Check distribution of targets","65155937":"# how is the investment value of 100K doing over time period","066beb25":"**returns are calculated as amount += amount* target\/100**","c67c9f9b":"### Insights\n    * nothing specific","573ecc90":"## WIP, work in progress","318476b4":"### Insights\n    * Returns\/target for these 4 investment IDs is positively correlated, with a maximum correlation of 0.33"}}