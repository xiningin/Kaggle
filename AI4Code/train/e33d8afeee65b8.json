{"cell_type":{"43e8b768":"code","6a1d973c":"code","4a36c3f4":"code","9d440f0e":"code","960ce4d5":"code","da865c18":"code","fe420b5b":"code","03cf4a5a":"code","1a4b0207":"code","5214cc03":"code","5f9b763d":"markdown"},"source":{"43e8b768":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport pandas as pa\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\ntraindata = pa.read_csv('..\/input\/titanic\/train.csv')\ntestdata = pa.read_csv('..\/input\/titanic\/test.csv')\n# Any results you write to the current directory are saved as output.","6a1d973c":"testdata['Fare'].describe()","4a36c3f4":"testdata['Age'].describe()","9d440f0e":"combineData = [traindata , testdata]","960ce4d5":"#cleaning data\nfor datainT in combineData:\n    datainT['Title']=  datainT.Name.str.extract(' ([A-Za-z]+)\\.' , expand=False)\n    datainT['Title'] = datainT['Title'].replace(['Capt', 'Col', 'Countess', 'Don','Dr','Jonkheer','Dona','Lady','Major','Rev','Sir'], 'Rare')\n    datainT['Title'] = datainT['Title'].replace(['Mlle', 'Ms'], 'Miss')\n    datainT['Title'] = datainT['Title'].replace('Mme', 'Mrs')\n    datainT['Title']=  datainT['Title'].map({\"Mr\":1, \"Master\":2,\"Miss\":3,\"Mrs\":4, \"Rare\":5}).astype(int)\n    datainT['Sex']= datainT['Sex'].map({\"male\":1,\"female\":2}).astype(int)\n    datainT['Embarked']= datainT['Embarked'].map({\"S\":1,\"C\":2})\n    embmostfreqValue = datainT.Embarked.dropna().mode()[0]\n    datainT['Embarked']= datainT['Embarked'].fillna(embmostfreqValue)\n    datainT['Embarked'] = datainT['Embarked'].astype(int)\n    ages_toguess=np.zeros((3,2))\n    for i in range(1,4):\n        for j in range(1,3):\n            ageguessTemp=datainT[(datainT['Sex']==j)&(datainT['Pclass']==i)]['Age'].dropna().mean()\n            datainT.loc[(datainT.Age.isnull()) & (datainT.Sex==j) & (datainT.Pclass==i),'Age'] = int(ageguessTemp)\n    datainT['Age'] = pa.cut(datainT['Age'], bins=[0,12,20,40,120], labels=[1,2,3,4]).astype(int)\n    datainT['isAlone'] = 0\n    datainT.loc[(datainT.Parch >0) | (datainT.SibSp>0), 'isAlone']=1\n    datainT[\"Fare\"].fillna(datainT[\"Fare\"].median(), inplace=True)\n    datainT[\"Fare\"] = datainT[\"Fare\"].astype(int)\n    datainT['Fare'] = pa.cut(datainT['Fare'], bins=[0,7.91,14.45,31,120], labels=[1,2,3,4]).astype(int)","da865c18":"#deleting files\nfor datainT in combineData:\n    del datainT['Name']\n    del datainT['Ticket']\n    del datainT['Cabin']\n    del datainT['SibSp']\n    del datainT['Parch']\n\n#     del datainT['Fare']\ndel traindata['PassengerId']","fe420b5b":"#checking in traindata %age of surviver\npeopleSurvied = traindata[traindata['Survived']==1]['Survived'].count()\npeopleNotSurvied = traindata[traindata['Survived']==0]['Survived'].count()\ntotalPeople = traindata['Survived'].count()\n\nsurvivedPeoplePer = (peopleSurvied\/ totalPeople) *100\nsurvivedNotPeoplePer = (peopleNotSurvied\/ totalPeople) *100\n\nprint(survivedPeoplePer , survivedNotPeoplePer)","03cf4a5a":"#spliting data \nX_train = traindata.drop('Survived', axis=1)\nX_test = testdata.drop(\"PassengerId\", axis=1).copy()\nY_train = traindata['Survived']","1a4b0207":"#running randam forest \nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_Pred = random_forest.predict(X_test)\nrandom_forest.score(X_train,Y_train)","5214cc03":"submission = pa.DataFrame({\n    \"PassengerId\" : testdata['PassengerId'],\n    \"Survived\" : Y_Pred\n})\nsubmission.to_csv('titanic.csv', index=False)","5f9b763d":"> **Values for fare and Age to diecide bins values to cut****"}}