{"cell_type":{"d8585219":"code","636cc6d8":"code","22851799":"code","2510b66d":"code","c67a5b08":"code","3fb669f7":"code","d47a0790":"code","eb195749":"code","c83f6e74":"code","c6eaa575":"code","0d0e411f":"code","7e759f2c":"code","9f90513f":"code","c9b3e9a8":"code","9d93f231":"code","1796e6a9":"code","928fb013":"code","45d818cb":"code","66868fb3":"code","a417e05e":"code","fab9807f":"code","98a13071":"code","e1258de2":"code","46b49a10":"code","63dd36d4":"code","f9cee8b0":"code","87c3b87f":"markdown","7fd49a41":"markdown","b8cd6db6":"markdown","9842bee7":"markdown","1371a1f3":"markdown","4cee9640":"markdown","657c1a7e":"markdown","645d5d7c":"markdown","82a8ea52":"markdown","2d6fb0e5":"markdown","ea8bec06":"markdown","94f323f7":"markdown","470d8168":"markdown","4ead652f":"markdown"},"source":{"d8585219":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","636cc6d8":"df = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')\ndf.shape","22851799":"df.describe()","2510b66d":"df.head(3)","c67a5b08":"df.drop('Unnamed: 32',axis=1,inplace=True)\ndf.drop('id', axis=1 , inplace =True)","3fb669f7":"df.info()","d47a0790":"import plotly.express as px\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nsns.set_style('darkgrid')\nmatplotlib.rcParams['font.size']=14\nmatplotlib.rcParams['figure.figsize'] = (10,6)\nmatplotlib.rcParams['figure.facecolor']='#00000000'","eb195749":"px.histogram(df,x='diagnosis',color='diagnosis',\n            title='Malignant vs. Benign')\n","c83f6e74":"plt.figure(figsize = (20, 15))\nplotnumber = 1\n\nfor c in df.iloc[:,1:-1]:\n    if plotnumber <= 30:\n        ax = plt.subplot(5, 6, plotnumber)\n        sns.distplot(df[c])\n        plt.xlabel(c)\n        \n    plotnumber += 1\n\nplt.tight_layout(pad=0.4 , w_pad=0.5, h_pad=5.0)\nplt.show()","c6eaa575":"plt.figure(figsize=(25,30))\nsns.heatmap(df.corr(), annot=True);","0d0e411f":"g = sns.jointplot(x=\"radius_mean\" ,y=\"radius_worst\",data=df,\n                 kind=\"scatter\",hue=\"diagnosis\",palette=dict(B='blue',M='magenta'),\n                  xlim=(5,40), ylim=(5, 40),\n                 height=7)","7e759f2c":"g = sns.jointplot(x=\"area_mean\", y=\"perimeter_mean\", data=df,\n                  kind=\"reg\", truncate=False,\n                 color=\"red\", height=7)","9f90513f":"g = sns.jointplot(x=\"area_se\", y=\"radius_se\", data=df,\n                  kind=\"reg\", truncate=False,\n                 color=\"magenta\", height=7)","c9b3e9a8":"g = sns.lmplot(x=\"concave points_mean\", y=\"concavity_mean\",  hue=\"diagnosis\", palette=\"Set1\",\n               data=df, height=8)","9d93f231":"ax = sns.swarmplot(x=\"diagnosis\", y=\"area_mean\", data=df,palette=\"rocket\")","1796e6a9":"ax = sns.swarmplot(x=\"diagnosis\", y=\"radius_mean\", data=df,palette=\"viridis\")","928fb013":"X=df.iloc[:,1:-1].values\ny=df['diagnosis']\n","45d818cb":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train , y_test = train_test_split(X,y,test_size=0.25,random_state=30)","66868fb3":"print('X_train.shape :', X_train.shape)\nprint('X_test.shape :', X_test.shape)\nprint('y_train.shape :', y_train.shape)\nprint('y_test.shape :', y_test.shape)","a417e05e":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(df.iloc[:,1:-1].values)\n","fab9807f":"X_test = scaler.transform(X_test)\nX_train = scaler.transform(X_train)","98a13071":"\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\n","e1258de2":"def predict_and_plot(inputs,targets,model,name=''):\n    model.fit(X_train,y_train)\n    preds=model.predict(inputs)\n    accuracy = accuracy_score(targets,preds)\n    print(model)\n    print(\"Accuracy : {:.2f}%\".format(accuracy * 100))\n    cf = confusion_matrix(targets,preds,normalize='true')\n    plt.figure()\n    sns.heatmap(cf,annot=True)\n    plt.xlabel('Prediction')\n    plt.ylabel('Target')\n    plt.title('Confusion Matrix with {} '.format(name))\n    \n    return preds\n    ","46b49a10":"from sklearn.linear_model import LogisticRegression\nlin_model = predict_and_plot(X_test,y_test,LogisticRegression(),'LinearRegression')","63dd36d4":"from sklearn.neighbors import KNeighborsClassifier\nkn_class = predict_and_plot(X_test,y_test,KNeighborsClassifier(), 'KNeighborsClassifier')","f9cee8b0":"from sklearn.naive_bayes import GaussianNB\ngauss = predict_and_plot(X_test,y_test,GaussianNB(), 'GaussianNB')","87c3b87f":"### The correlation and relationship of the columns continues as follows;\n#### Radius_mean\n* radius_mean with primeter_mean\n* radius_mean with concave points_mean\n* radius_mean with radius_worst\n* radius_mean with radius_worst\n* radius_mean with area_worst\n\n#### Texture_mean\n* texture_mean with texture_worst\n\n#### Perimeter_mean\n* perimeter_mean with area_mean\n* perimeter_mean with radius_worst\n* perimeter_mean with perimater_worst\n* perimeter_mean with area_worst\n\n#### Area_mean\n* area_mean with radius_mean\n* area_mean with perimeter_mean \n* area_mean with radius_worst\n* area_mean with perimeter_worst\n* area_mean with area_worst\n\n#### Concave points_mean\n* concave points_mean with concavity_mean\n* concave points_mean with concave point_worst\n\n#### Radius_se\n* radius_se with perimeter_se\n* radius_se with area_se\n\n##### Radius_worst , Primeter_worst, Area worst, Concanvity_worst ......\n\nSo , Let's examine the columns that realtion to between them","7fd49a41":"The accuracy with LinearRegression model higher than other models","b8cd6db6":"Let's load the dataset","9842bee7":"* The `id` column cannot be used for classification.\n* Since `Unnamed:32` consists of Nan values, it will not benefit our model.\n* The target value is `diagnosis`\n\nLet's start with drop `Unnamed:32` and `id` drop ","1371a1f3":"Let's visuliaze the target value(`diagnosis`)","4cee9640":"#### Making Predictions ,Evaluating and Scaling the Model \nAfter comparing the relationships of our columns. Let's scale our data and look at the predictive value.\n\nLet's split the numeric columns","657c1a7e":"Mission:\nPredicting whether a tumor is \"benign\" (noncancerous) or \"malignant\" (cancerous) using information like its radius, texture etc.\n\nAttribute Information:\n\n  *Diagnosis (M = malignant, B = benign)*\n3-32)\n\nTen real-valued features are computed for each cell nucleus:\n\n1.  radius (mean of distances from center to points on the perimeter)\n2.  texture (standard deviation of gray-scale values)\n3.  perimeter\n4.  area\n5.  smoothness (local variation in radius lengths)\n6.  compactness (perimeter^2 \/ area - 1.0)\n7.  concavity (severity of concave portions of the contour)\n8.  concave points (number of concave portions of the contour)\n9.  symmetry\n10.  fractal dimension (\"coastline approximation\" - 1)\n\nThe mean, standard error and \"worst\" or largest (mean of the three\nlargest values) of these features were computed for each image,\nresulting in 30 features. For instance, field 3 is Mean Radius, field\n13 is Radius SE, field 23 is Worst Radius.\n\nAll feature values are recoded with four significant digits.\n\nMissing attribute values: none\n\nClass distribution: 357 benign, 212 malignant","645d5d7c":"The dataset contains over 569 rows and 33 columns","82a8ea52":"Some of the prominent columns with outliers\n`radius_se` ,`are_se` , `concavity_se`,\n`area_worst`,\n`perimeter_worst`\n\nLet's visualize correlactions between columns","2d6fb0e5":"Let's examine dtype and non-nulls","ea8bec06":"#### Exploratory Data Analysis and Visualization\n\nBefore training a machine learning model, its always a good idea to explore the distributions of various columns and see how they are related to the target column.","94f323f7":"Malignant : 212 , Benign : 357 \n\nWell,to better understand our data, let's compare our target value with other columns and\nthen let's look at the correlation values\n","470d8168":" The data has been scaled  \n Let's code a function to train, test models and plot `confusion matrix`","4ead652f":" Awesome! data values numeric all values ready"}}