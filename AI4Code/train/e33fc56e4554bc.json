{"cell_type":{"6aa6671b":"code","254eae6b":"code","43cbaae3":"code","867982f3":"code","939ec057":"code","68269115":"code","a0f27251":"code","5ee28df9":"code","1c32f46d":"code","b3b70cb7":"code","97e86ba8":"code","d9525a44":"code","7debed6c":"code","6f7f7360":"code","81678d0a":"code","d8efca16":"code","57b1f96e":"code","89e019bd":"code","e2d6ae25":"code","d79be6d9":"code","68177cf3":"code","b48ce48e":"code","64afdbbe":"code","96fbca69":"code","6951771d":"code","506740f5":"code","e983e837":"code","ce4a8756":"code","e8ed402c":"markdown","337ad97e":"markdown","55bd486b":"markdown","579638e9":"markdown","b5759ee7":"markdown"},"source":{"6aa6671b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","254eae6b":"# get training data\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","43cbaae3":"# get test data\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","867982f3":"# Describe training data\ntrain_data.describe()","939ec057":"# Describe test data\ntest_data.describe()","68269115":"# Look null values for train data\ntrain_data.isnull().sum()","a0f27251":"# Look null values for test data\ntest_data.isnull().sum()","5ee28df9":"test_data[test_data[\"Fare\"].isnull()]","1c32f46d":"test_data.loc[152,'Fare'] = 20.2125","b3b70cb7":"test_data.loc[152]","97e86ba8":"test_data.isnull().sum()","d9525a44":"def find_titles(df):\n    titles=set()\n    for name in df:\n        if name.find('.'):\n            title = name.split('.')[0].split()[-1]\n            titles.add(title)\n    return titles","7debed6c":"titles = find_titles(train_data[\"Name\"]).union(find_titles(test_data[\"Name\"]))","6f7f7360":"titles","81678d0a":"my_titles_dict = {\"Mr\": ['Capt', 'Col', 'Don', 'Jonkheer', 'Major', 'Mr', 'Rev', 'Sir'],\n                 \"Mrs\": ['Countess', 'Dona', 'Lady', 'Mme', 'Mrs'],\n                 \"Miss\": ['Miss', 'Mlle','Ms'],\n                 \"Master\": ['Master'],\n                 \"Other\": ['Dr']}","d8efca16":"def set_titles(df):\n    if \"Title\" in df.columns:\n        print(\"Title column already exists\")\n    else:\n        pd.DataFrame.insert(df, len(df.columns),\"Title\",\"\",False)\n    \n    for i in range(len(df)):\n        name=df.loc[i,'Name']\n        if name.find('.'):\n            title = name.split('.')[0].split()[-1]\n            for key in my_titles_dict:\n                if title in my_titles_dict[key]:\n                    if key == \"Other\":\n                        if df.loc[i,'Sex']=='female':\n                            df.loc[i, 'Title'] = 'Mrs'\n                        else:\n                            df.loc[i, 'Title'] = 'Mr'\n                    else:        \n                        df.loc[i, 'Title'] = key            \n        i+=1\n    return df","57b1f96e":"train_data=set_titles(train_data)\ntest_data=set_titles(test_data)","89e019bd":"test_data.tail(5)","e2d6ae25":"train_master=train_data[['Master' in x for x in train_data['Title']]][train_data[\"Age\"].notnull()]\ntest_master=test_data[['Master' in x for x in test_data['Title']]][test_data[\"Age\"].notnull()]\ntrain_mr=train_data[['Mr' in x for x in train_data['Title']]][train_data[\"Age\"].notnull()]\ntest_mr=test_data[['Mr' in x for x in test_data['Title']]][test_data[\"Age\"].notnull()]\ntrain_mrs=train_data[['Mrs' in x for x in train_data['Title']]][train_data[\"Age\"].notnull()]\ntest_mrs=test_data[['Mrs' in x for x in test_data['Title']]][test_data[\"Age\"].notnull()]\ntrain_miss=train_data[['Miss' in x for x in train_data['Title']]][train_data[\"Age\"].notnull()]\ntest_miss=test_data[['Miss' in x for x in test_data['Title']]][test_data[\"Age\"].notnull()]","d79be6d9":"train_master_mean = train_master[\"Age\"].mean()\ntest_master_mean = test_master[\"Age\"].mean()\ntrain_mr_mean = train_mr[\"Age\"].mean()\ntest_mr_mean = test_mr[\"Age\"].mean()\ntrain_mrs_mean = train_mrs[\"Age\"].mean()\ntest_mrs_mean = test_mrs[\"Age\"].mean()\ntrain_miss_mean = train_miss[\"Age\"].mean()\ntest_miss_mean = test_miss[\"Age\"].mean()","68177cf3":"print(train_master_mean)\nprint(test_master_mean)\nprint(train_mr_mean)\nprint(test_mr_mean)\nprint(train_mrs_mean)\nprint(test_mrs_mean)\nprint(train_miss_mean)\nprint(test_miss_mean)","b48ce48e":"train_mean_values_dict = {\"Mr\": 33.62,\n                 \"Mrs\": 35.99,\n                 \"Miss\": 21.84,\n                 \"Master\":4.57}\ntest_mean_values_dict = {\"Mr\": 33.98,\n                 \"Mrs\": 38.90,\n                 \"Miss\": 21.77,\n                 \"Master\":7.40}","64afdbbe":"def impute_to_age (df1, df2):\n    for i in range(len(df1)):\n        title=df1.loc[i,'Title']\n        age=df1.at[i,'Age'].astype(float)\n        if np.isnan(age):\n            df1.loc[i,'Age']=train_mean_values_dict.get(title)\n        i+=1\n    for j in range(len(df2)):\n        title=df2.at[j,'Title']\n        age=df2.at[j,'Age'].astype(float)\n        if np.isnan(age):\n            df2.loc[j,'Age']=test_mean_values_dict.get(title)\n        j+=1","96fbca69":"impute_to_age(train_data, test_data)","6951771d":"train_data.isnull().sum()","506740f5":"test_data.isnull().sum()","e983e837":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Fare\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\nX.drop(['Sex_male'], axis=1, inplace=True)\nX_test.drop(['Sex_male'], axis=1, inplace=True)\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=7, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","ce4a8756":"X_test","e8ed402c":"Set the titles","337ad97e":"Please check this [notebook](https:\/\/www.kaggle.com\/erkanhatipoglu\/getting-started-with-titanic) for why we use '20.2125'!","55bd486b":"Get the data...","579638e9":"Let' search for null values...","b5759ee7":"Find the titles from the names column"}}