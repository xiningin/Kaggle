{"cell_type":{"7a6f24ae":"code","b46c2d7a":"code","b96e3a00":"code","46def576":"code","04d6cd8f":"code","3070ba28":"code","7488bcf6":"code","3ab04f27":"code","8064b29a":"code","016b2952":"code","d3a44359":"code","1bedc7e9":"code","402d3fa5":"code","87cd8842":"code","346f993e":"code","04547ad2":"code","061c34e3":"code","04b08b3c":"code","260c1422":"code","fa5943db":"code","78903990":"markdown","521de50f":"markdown","646d9716":"markdown","3e35044c":"markdown","6e74151e":"markdown","4285e3c7":"markdown","a427596d":"markdown","49443525":"markdown","36fb37ac":"markdown","f30e96b7":"markdown","d0488d55":"markdown","78dc0a3a":"markdown","af2bfa74":"markdown","b4e593a8":"markdown","c888ac50":"markdown","e9134aee":"markdown","bae6089c":"markdown","9d74dffb":"markdown","f2768308":"markdown","6fba8cab":"markdown","6de10c9a":"markdown","66b9e107":"markdown","bf3af4b2":"markdown","ff844864":"markdown","4553cddb":"markdown","b5d8a189":"markdown","e38091d6":"markdown","76cd41ab":"markdown","6d3fc5de":"markdown"},"source":{"7a6f24ae":"# Suppress matplotlib user warnings\n# Necessary for newer version of matplotlib\nimport warnings\nwarnings.filterwarnings(\"ignore\", category = UserWarning, module = \"matplotlib\")\n\n# Display inline matplotlib plots with IPython\nfrom IPython import get_ipython\nget_ipython().run_line_magic('matplotlib', 'inline')\n\nimport matplotlib.pyplot as pl\nimport matplotlib.patches as mpatches\nimport numpy as np\nimport pandas as pd\nfrom time import time\nfrom sklearn.metrics import f1_score, accuracy_score\n\n\ndef distribution(data, transformed = False):\n    \"\"\"\n    Visualization code for displaying skewed distributions of features\n    \"\"\"\n    \n    # Create figure\n    fig = pl.figure(figsize = (11,5));\n\n    # Skewed feature plotting\n    for i, feature in enumerate(['capital-gain','capital-loss']):\n        ax = fig.add_subplot(1, 2, i+1)\n        ax.hist(data[feature], bins = 25, color = '#00A0A0')\n        ax.set_title(\"'%s' Feature Distribution\"%(feature), fontsize = 14)\n        ax.set_xlabel(\"Value\")\n        ax.set_ylabel(\"Number of Records\")\n        ax.set_ylim((0, 2000))\n        ax.set_yticks([0, 500, 1000, 1500, 2000])\n        ax.set_yticklabels([0, 500, 1000, 1500, \">2000\"])\n\n    # Plot aesthetics\n    if transformed:\n        fig.suptitle(\"Log-transformed Distributions of Continuous Census Data Features\", \\\n            fontsize = 16, y = 1.03)\n    else:\n        fig.suptitle(\"Skewed Distributions of Continuous Census Data Features\", \\\n            fontsize = 16, y = 1.03)\n\n    fig.tight_layout()\n    fig.show()\n\n\ndef evaluate(results, accuracy, f1):\n    \"\"\"\n    Visualization code to display results of various learners.\n    \n    inputs:\n      - learners: a list of supervised learners\n      - stats: a list of dictionaries of the statistic results from 'train_predict()'\n      - accuracy: The score for the naive predictor\n      - f1: The score for the naive predictor\n    \"\"\"\n  \n    # Create figure\n    fig, ax = pl.subplots(2, 3, figsize = (11,7))\n\n    # Constants\n    bar_width = 0.3\n    colors = ['#A00000','#00A0A0','#00A000']\n    \n    # Super loop to plot four panels of data\n    for k, learner in enumerate(results.keys()):\n        for j, metric in enumerate(['train_time', 'acc_train', 'f_train', 'pred_time', 'acc_test', 'f_test']):\n            for i in np.arange(3):\n                \n                # Creative plot code\n                ax[j\/\/3, j%3].bar(i+k*bar_width, results[learner][i][metric], width = bar_width, color = colors[k])\n                ax[j\/\/3, j%3].set_xticks([0.45, 1.45, 2.45])\n                ax[j\/\/3, j%3].set_xticklabels([\"1%\", \"10%\", \"100%\"])\n                ax[j\/\/3, j%3].set_xlabel(\"Training Set Size\")\n                ax[j\/\/3, j%3].set_xlim((-0.1, 3.0))\n    \n    # Add unique y-labels\n    ax[0, 0].set_ylabel(\"Time (in seconds)\")\n    ax[0, 1].set_ylabel(\"Accuracy Score\")\n    ax[0, 2].set_ylabel(\"F-score\")\n    ax[1, 0].set_ylabel(\"Time (in seconds)\")\n    ax[1, 1].set_ylabel(\"Accuracy Score\")\n    ax[1, 2].set_ylabel(\"F-score\")\n    \n    # Add titles\n    ax[0, 0].set_title(\"Model Training\")\n    ax[0, 1].set_title(\"Accuracy Score on Training Subset\")\n    ax[0, 2].set_title(\"F-score on Training Subset\")\n    ax[1, 0].set_title(\"Model Predicting\")\n    ax[1, 1].set_title(\"Accuracy Score on Testing Set\")\n    ax[1, 2].set_title(\"F-score on Testing Set\")\n    \n    # Add horizontal lines for naive predictors\n    ax[0, 1].axhline(y = accuracy, xmin = -0.1, xmax = 3.0, linewidth = 1, color = 'k', linestyle = 'dashed')\n    ax[1, 1].axhline(y = accuracy, xmin = -0.1, xmax = 3.0, linewidth = 1, color = 'k', linestyle = 'dashed')\n    ax[0, 2].axhline(y = f1, xmin = -0.1, xmax = 3.0, linewidth = 1, color = 'k', linestyle = 'dashed')\n    ax[1, 2].axhline(y = f1, xmin = -0.1, xmax = 3.0, linewidth = 1, color = 'k', linestyle = 'dashed')\n    \n    # Set y-limits for score panels\n    ax[0, 1].set_ylim((0, 1))\n    ax[0, 2].set_ylim((0, 1))\n    ax[1, 1].set_ylim((0, 1))\n    ax[1, 2].set_ylim((0, 1))\n\n    # Create patches for the legend\n    patches = []\n    for i, learner in enumerate(results.keys()):\n        patches.append(mpatches.Patch(color = colors[i], label = learner))\n    pl.legend(handles = patches, bbox_to_anchor = (-.80, 2.53), \\\n               loc = 'upper center', borderaxespad = 0., ncol = 3, fontsize = 'x-large')\n    \n    # Aesthetics\n    pl.suptitle(\"Performance Metrics for Three Supervised Learning Models\", fontsize = 16, y = 1.10)\n    pl.tight_layout()\n    pl.show()\n    \n\ndef feature_plot(importances, X_train, y_train):\n    \n    # Display the five most important features\n    indices = np.argsort(importances)[::-1]\n    columns = X_train.columns.values[indices[:5]]\n    values = importances[indices][:5]\n\n    # Creat the plot\n    fig = pl.figure(figsize = (9,5))\n    pl.title(\"Normalized Weights for First Five Most Predictive Features\", fontsize = 16)\n    pl.bar(np.arange(5), values, width = 0.6, align=\"center\", color = '#00A000', \\\n          label = \"Feature Weight\")\n    pl.bar(np.arange(5) - 0.3, np.cumsum(values), width = 0.2, align = \"center\", color = '#00A0A0', \\\n          label = \"Cumulative Feature Weight\")\n    pl.xticks(np.arange(5), columns)\n    pl.xlim((-0.5, 4.5))\n    pl.ylabel(\"Weight\", fontsize = 12)\n    pl.xlabel(\"Feature\", fontsize = 12)\n    \n    pl.legend(loc = 'upper center')\n    pl.tight_layout()\n    pl.show()  \n","b46c2d7a":"# Import libraries necessary for this project\nimport numpy as np\nimport pandas as pd\nfrom time import time\nfrom IPython.display import display # Allows the use of display() for DataFrames\n\n\n# Pretty display for notebooks\n%matplotlib inline\n\n# Load the Census dataset\ndata = pd.read_csv(\"\/kaggle\/input\/census.csv\")\n\n# Success - Display the first record\ndisplay(data.head())","b96e3a00":"data['income'].unique()","46def576":"# Total number of records\nn_records = data.shape[0]\n\n# Number of records where individual's income is more than $50,000\nn_greater_50k = data[data.income == '>50K'].shape[0]\n\n# Number of records where individual's income is at most $50,000\nn_at_most_50k = data[data.income == '<=50K'].shape[0]\n\n# Percentage of individuals whose income is more than $50,000\ngreater_percent = data[data.income == '>50K'].shape[0]\/data.shape[0]\n\n# Print the results\nprint(\"Total number of records: {}\".format(n_records))\nprint(\"Individuals making more than $50,000: {}\".format(n_greater_50k))\nprint(\"Individuals making at most $50,000: {}\".format(n_at_most_50k))\nprint(\"Percentage of individuals making more than $50,000: {}%\".format(greater_percent))","04d6cd8f":"# Split the data into features and target label\nincome_raw = data['income']\nfeatures_raw = data.drop('income', axis = 1)\n\n# Visualize skewed continuous features of original data\ndistribution(data)","3070ba28":"# Log-transform the skewed features\nskewed = ['capital-gain', 'capital-loss']\nfeatures_log_transformed = pd.DataFrame(data = features_raw)\nfeatures_log_transformed[skewed] = features_raw[skewed].apply(lambda x: np.log(x + 1))\n\n# Visualize the new log distributions\ndistribution(features_log_transformed, transformed = True)","7488bcf6":"# Import sklearn.preprocessing.StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Initialize a scaler, then apply it to the features\nscaler = MinMaxScaler() # default=(0, 1)\nnumerical = ['age', 'education-num', 'capital-gain', 'capital-loss', 'hours-per-week']\n\nfeatures_log_minmax_transform = pd.DataFrame(data = features_log_transformed)\nfeatures_log_minmax_transform[numerical] = scaler.fit_transform(features_log_transformed[numerical])\n\n# Show an example of a record with scaling applied\ndisplay(features_log_minmax_transform.head(n = 5))","3ab04f27":"# One-hot encode the 'features_log_minmax_transform' data using pandas.get_dummies()\nfeatures_final = pd.get_dummies(features_log_minmax_transform)\n\n# Encode the 'income_raw' data to numerical values\nincome = income_raw.apply(lambda x: 1 if x=='>50K' else 0)\n\n# Print the number of features after one-hot encoding\nencoded = list(features_final.columns)\nprint(\"{} total features after one-hot encoding.\".format(len(encoded)))\n","8064b29a":"# Import train_test_split\nfrom sklearn.model_selection import train_test_split\n\n# Split the 'features' and 'income' data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(features_final, \n                                                    income, \n                                                    test_size = 0.2, \n                                                    random_state = 0)\n\n# Show the results of the split\nprint(\"Training set has {} samples.\".format(X_train.shape[0]))\nprint(\"Testing set has {} samples.\".format(X_test.shape[0]))","016b2952":"TP = np.sum(income) # Counting the ones as this is the naive case. Note that 'income' is the 'income_raw' data \n# encoded to numerical values done in the data preprocessing step.\nFP = income.count() - TP # Specific to the naive case\n\nTN = 0 # No predicted negatives in the naive case\nFN = 0 # No predicted negatives in the naive case\n\n# Calculate accuracy, precision and recall\n\naccuracy = TP\/income.count()\nrecall = TP\/(TP+FN)\nprecision = TP\/(TP+FP)\n\n# Calculate F-score for beta = 0.5 and correct values for precision and recall.\nbeta = 0.5\nfscore = (1+beta**2)*(precision*recall)\/((beta**2)*precision + recall)\n\n# Print the results \nprint(\"Naive Predictor: [Accuracy score: {:.4f}, F-score: {:.4f}]\".format(accuracy, fscore))","d3a44359":"# Import two metrics from sklearn - fbeta_score and accuracy_score\nfrom sklearn.metrics import fbeta_score , accuracy_score\n\ndef train_predict(learner, sample_size, X_train, y_train, X_test, y_test): \n    '''\n    inputs:\n       - learner: the learning algorithm to be trained and predicted on\n       - sample_size: the size of samples (number) to be drawn from training set\n       - X_train: features training set\n       - y_train: income training set\n       - X_test: features testing set\n       - y_test: income testing set\n    '''\n    \n    results = {}\n    \n    # Fit the learner to the training data using slicing with 'sample_size' using .fit(training_features[:], training_labels[:])\n    start = time() # Get start time\n    learner = learner.fit(X_train[:sample_size],y_train[:sample_size])\n    end = time() # Get end time\n    \n    # Calculate the training time\n    results['train_time'] = end - start\n        \n    #  Get the predictions on the test set(X_test),\n    #       then get predictions on the first 300 training samples(X_train) using .predict()\n    start = time() # Get start time\n    predictions_test = learner.predict(X_test)\n    predictions_train = learner.predict(X_train[:300])\n    end = time() # Get end time\n    \n    # Calculate the total prediction time\n    results['pred_time'] = end - start\n            \n    # Compute accuracy on the first 300 training samples which is y_train[:300]\n    results['acc_train'] = accuracy_score(y_train[:300],predictions_train)\n        \n    # Compute accuracy on test set using accuracy_score()\n    results['acc_test'] = accuracy_score(y_test,predictions_test)\n    \n    # Compute F-score on the the first 300 training samples using fbeta_score()\n    results['f_train'] = fbeta_score(y_train[:300],predictions_train,beta=0.5)\n        \n    # Compute F-score on the test set which is y_test\n    results['f_test'] = fbeta_score(y_test,predictions_test,beta=0.5)\n       \n    # Success\n    print(\"{} trained on {} samples.\".format(learner.__class__.__name__, sample_size))\n        \n    # Return the results\n    return results","1bedc7e9":"# Import the three supervised learning models from sklearn\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\n\n# TODO: Initialize the three models\nclf_A = GaussianNB()\nclf_B = DecisionTreeClassifier(random_state = 1)\nclf_C = AdaBoostClassifier(random_state =1)\n\n# Calculate the number of samples for 1%, 10%, and 100% of the training data\nsamples_100 = int(len(y_train))\nsamples_10 = int(len(y_train)*0.1)\nsamples_1 = int(len(y_train)*0.01)\n\n# Collect results on the learners\nresults = {}\nfor clf in [clf_A, clf_B, clf_C]:\n    clf_name = clf.__class__.__name__\n    results[clf_name] = {}\n    for i, samples in enumerate([samples_1, samples_10, samples_100]):\n        results[clf_name][i] = train_predict(clf, samples, X_train, y_train, X_test, y_test)\n\n# Run metrics visualization for the three supervised learning models chosen\nevaluate(results, accuracy, fscore)","402d3fa5":"results","87cd8842":"for i in results.items():\n    print(i[0])\n    display(pd.DataFrame(i[1]).rename(columns={0:'1% training',1:'10% training',2:'100% training'}))","346f993e":"# import warnings filter\nfrom warnings import simplefilter\n# ignore all future warnings\nsimplefilter(action='ignore', category=FutureWarning)\n\n# Import 'GridSearchCV', 'make_scorer', and any other necessary libraries\nfrom sklearn.model_selection import GridSearchCV \nfrom sklearn.metrics import make_scorer,fbeta_score\n\n# Initialize the classifier\nclf = AdaBoostClassifier(random_state = 1)\n\n# Create the parameters list you wish to tune, using a dictionary if needed.\nparameters = {'n_estimators':[50,75,100,150], 'learning_rate':[0.01,0.1,1,2,5]}\n\n# Make an fbeta_score scoring object using make_scorer()\nscorer = make_scorer(fbeta_score,beta=0.5)\n\n# Perform grid search on the classifier using 'scorer' as the scoring method using GridSearchCV()\ngrid_obj = GridSearchCV(clf,parameters,scoring=scorer)\n\n# Fit the grid search object to the training data and find the optimal parameters using fit()\ngrid_fit = grid_obj.fit(X_train,y_train)\n\n# Get the estimator\nbest_clf = grid_fit.best_estimator_\n\n# Make predictions using the unoptimized and model\npredictions = (clf.fit(X_train, y_train)).predict(X_test)\nbest_predictions = best_clf.predict(X_test)\n\n# Report the before-and-afterscores\nprint(\"Unoptimized model\\n------\")\nprint(\"Accuracy score on testing data: {:.4f}\".format(accuracy_score(y_test, predictions)))\nprint(\"F-score on testing data: {:.4f}\".format(fbeta_score(y_test, predictions, beta = 0.5)))\nprint(\"\\nOptimized Model\\n------\")\nprint(\"Final accuracy score on the testing data: {:.4f}\".format(accuracy_score(y_test, best_predictions)))\nprint(\"Final F-score on the testing data: {:.4f}\".format(fbeta_score(y_test, best_predictions, beta = 0.5)))","04547ad2":"import matplotlib.pyplot as plt\nimport seaborn as sns\ndata['income'] = data['income'].apply(lambda x: 1 if x=='>50K' else 0)","061c34e3":"data1 = data[['age','education-num','capital-gain','capital-loss','hours-per-week','income']]\nsns.pairplot(data, hue=\"income\", diag_kind='hist')","04b08b3c":"sns.heatmap(data.corr(),annot=True,cmap='YlGnBu')","260c1422":"# Import a supervised learning model that has 'feature_importances_'\nmodel = AdaBoostClassifier()\n\n# Train the supervised model on the training set using .fit(X_train, y_train)\nmodel = model.fit(X_train,y_train)\n\n# Extract the feature importances using .feature_importances_ \nimportances = model.feature_importances_\n\n# Plot\nfeature_plot(importances, X_train, y_train)","fa5943db":"# Import functionality for cloning a model\nfrom sklearn.base import clone\n\n# Reduce the feature space\nX_train_reduced = X_train[X_train.columns.values[(np.argsort(importances)[::-1])[:5]]]\nX_test_reduced = X_test[X_test.columns.values[(np.argsort(importances)[::-1])[:5]]]\n\n# Train on the \"best\" model found from grid search earlier\nclf = (clone(best_clf)).fit(X_train_reduced, y_train)\n\n# Make new predictions\nreduced_predictions = clf.predict(X_test_reduced)\n\n# Report scores from the final model using both versions of data\nprint(\"Final Model trained on full data\\n------\")\nprint(\"Accuracy on testing data: {:.4f}\".format(accuracy_score(y_test, best_predictions)))\nprint(\"F-score on testing data: {:.4f}\".format(fbeta_score(y_test, best_predictions, beta = 0.5)))\nprint(\"\\nFinal Model trained on reduced data\\n------\")\nprint(\"Accuracy on testing data: {:.4f}\".format(accuracy_score(y_test, reduced_predictions)))\nprint(\"F-score on testing data: {:.4f}\".format(fbeta_score(y_test, reduced_predictions, beta = 0.5)))","78903990":"----\n## Preparing the Data\nBefore data can be used as input for machine learning algorithms, it often must be cleaned, formatted, and restructured \u2014 this is typically known as **preprocessing**. Fortunately, for this dataset, there are no invalid or missing entries we must deal with, however, there are some qualities about certain features that must be adjusted. This preprocessing can help tremendously with the outcome and predictive power of nearly all learning algorithms.","521de50f":"----\n## Exploring the Data\nLet's load necessary Python libraries and load the census data. Note that the last column from this dataset, `'income'`, will be our target label (whether an individual makes more than, or at most, $50,000 annually). All other columns are features about each individual in the census database.","646d9716":"### Creating a Training and Predicting Pipeline\nTo properly evaluate the performance of each model you've chosen, it's important that you create a training and predicting pipeline that allows you to quickly and effectively train models using various sizes of training data and perform predictions on the testing data. ","3e35044c":"## Final Model Evaluation\n\n|     Metric     | Unoptimized Model | Optimized Model |\n| :------------: | :---------------: | :-------------: | \n| Accuracy Score |    0.8576         |   0.8630        |\n| F-score        |    0.7246         |   0.7356       |\n\n---\n\nThe optimized model's accuracy and F-score on the testing data is 0.8645 and 0.7375 respectively, which is slightly better than the unoptimized model. However, the scores of the optimized model are significantly better compared to the naive predictor benchmarks.","6e74151e":"## Feature Relevance Observation","4285e3c7":"##  Supervised Learning Models\n**The following are some of the supervised learning models that are currently available in** [`scikit-learn`](http:\/\/scikit-learn.org\/stable\/supervised_learning.html) **that we may choose from:**\n- Gaussian Naive Bayes (GaussianNB)\n- Decision Trees\n- Ensemble Methods (Bagging, AdaBoost, Random Forest, Gradient Boosting)\n- K-Nearest Neighbors (KNeighbors)\n- Stochastic Gradient Descent Classifier (SGDC)\n- Support Vector Machines (SVM)\n- Logistic Regression\n\n---","a427596d":"## Initial Model Evaluation","49443525":"----\n## Evaluating Model Performance\nIn this section, we will investigate four different algorithms, and determine which is best at modeling the data. Three of these algorithms will be supervised learners of our choice, and the fourth algorithm is known as a *naive predictor*.","36fb37ac":"## Extracting Feature Importance\nChoose a `scikit-learn` supervised learning algorithm that has a `feature_importance_` attribute availble for it. This attribute is a function that ranks the importance of each feature when making predictions based on the chosen algorithm.","f30e96b7":"For highly-skewed feature distributions such as `'capital-gain'` and `'capital-loss'`, it is common practice to apply a <a href=\"https:\/\/en.wikipedia.org\/wiki\/Data_transformation_(statistics)\">logarithmic transformation<\/a> on the data so that the very large and very small values do not negatively affect the performance of a learning algorithm. Using a logarithmic transformation significantly reduces the range of values caused by outliers. Care must be taken when applying this transformation however: The logarithm of `0` is undefined, so we must translate the values by a small amount above `0` to apply the the logarithm successfully.\n","d0488d55":"# Finding Donors for Charity ML","78dc0a3a":"----\n## Data Exploration\n","af2bfa74":"## Visualisation Functions to be used\n\nThese are the visualisation functions which will be used for any visualisations in this notebook.","b4e593a8":"In my views AdaboostClassifier is the best model. It is because:\n- Adaboost has highest training and predicting time but that doesn't matter since its producing very good results\n- Adaboost has highest accuracy on the testing set for all the three subsets of training data\n- decision trees also have quite good accuracy but it is clear from the graphs and above statistics that decision tree is tending to overfit the data, as its producing high accuracy on training data while less relative accuracy on testing data\n- we can notice that adaboost classifier trained on entire training data gives an accuracy of 85% on training data and 85% on testing data which indicates it being a highly balanced model.\n- We can even notice that accuracy for decision tree on training subsets are 100%, 97% and 97% but testing accuracies are relatively low.\n- Even when comparing F_score, decision tree has quite good f_score almost close to 1 on training set but has very less score 0.6 on the testing data indicating overfitting of data\n- Whereas the adaboost classifier has almost similar f_score on both training and testing data (0.72)\n","c888ac50":"### **Featureset Exploration**\n\n* **age**: continuous. \n* **workclass**: Private, Self-emp-not-inc, Self-emp-inc, Federal-gov, Local-gov, State-gov, Without-pay, Never-worked. \n* **education**: Bachelors, Some-college, 11th, HS-grad, Prof-school, Assoc-acdm, Assoc-voc, 9th, 7th-8th, 12th, Masters, 1st-4th, 10th, Doctorate, 5th-6th, Preschool. \n* **education-num**: continuous. \n* **marital-status**: Married-civ-spouse, Divorced, Never-married, Separated, Widowed, Married-spouse-absent, Married-AF-spouse. \n* **occupation**: Tech-support, Craft-repair, Other-service, Sales, Exec-managerial, Prof-specialty, Handlers-cleaners, Machine-op-inspct, Adm-clerical, Farming-fishing, Transport-moving, Priv-house-serv, Protective-serv, Armed-Forces. \n* **relationship**: Wife, Own-child, Husband, Not-in-family, Other-relative, Unmarried. \n* **race**: Black, White, Asian-Pac-Islander, Amer-Indian-Eskimo, Other. \n* **sex**: Female, Male. \n* **capital-gain**: continuous. \n* **capital-loss**: continuous. \n* **hours-per-week**: continuous. \n* **native-country**: United-States, Cambodia, England, Puerto-Rico, Canada, Germany, Outlying-US(Guam-USVI-etc), India, Japan, Greece, South, China, Cuba, Iran, Honduras, Philippines, Italy, Poland, Jamaica, Vietnam, Mexico, Portugal, Ireland, France, Dominican-Republic, Laos, Ecuador, Taiwan, Haiti, Columbia, Hungary, Guatemala, Nicaragua, Scotland, Thailand, Yugoslavia, El-Salvador, Trinadad&Tobago, Peru, Hong, Holand-Netherlands.","e9134aee":"## Naive Predictor Performace\n* If we chose a model that always predicted an individual made more than $50,000, what would  that model's accuracy and F-score be on this dataset? \n\nThe purpose of generating a naive predictor is simply to show what a base model without any intelligence would look like. In the real world, ideally your base model would be either the results of a previous model or could be based on a research paper upon which you are looking to improve. When there is no benchmark model set, getting a result better than random choice is a place you could start from.\n\n* When we have a model that always predicts '1' (i.e. the individual makes more than 50k) then our model will have no True Negatives(TN) or False Negatives(FN) as we are not making any negative('0' value) predictions. Therefore our Accuracy in this case becomes the same as our Precision(True Positives\/(True Positives + False Positives)) as every prediction that we have made with value '1' that should have '0' becomes a False Positive; therefore our denominator in this case is the total number of records we have in total. \n* Our Recall score(True Positives\/(True Positives + False Negatives)) in this setting becomes 1 as we have no False Negatives.","bae6089c":"## Describing the Model in Layman's Terms\n\nBoosting : It is a ensembling technique which combines many weak learners to create a super learner (strong learner)\n\nweak learners: classifiers that produce prediction that is slightly better than random guessing. Random guessing is equivalent to 50%, like flipping a coin.\n\nAdaboost (Adaptive Boosting): the first practical boosting algorithm, is a powerful classifier that works well on both basic and more complex problems. AdaBoost works by creating a highly accurate classifier by combining many relatively weak and inaccurate classifiers. AdaBoost therefore acts as a meta algorithm, which allows you to use it as a wrapper for other classifiers. AdaBoost is adaptive in the sense that subsequent classifiers added at each round of boosting are tweaked in favor of those instances misclassified by previous classifiers.\n\nSimply put, the idea is to set weights to both classifiers and data points (samples) in a way that forces classifiers to concentrate on observations that are difficult to correctly classify. This process is done sequentially in that the two weights are adjusted at each step as iterations of the algorithm proceed. This is why Adaboost is referred to as a sequential ensemble method\u200a\u2014\u200aensemble referring to a type of learning that combines several models to improve the final predictive performance.\n\n<a href='https:\/\/towardsdatascience.com\/adaboost-for-dummies-breaking-down-the-math-and-its-equations-into-simple-terms-87f439757dcf'>Reference<\/a>","9d74dffb":"## Model Tuning\n\nLet's Fine tune the chosen model. Use grid search (`GridSearchCV`) with at least one important parameter tuned with at least 3 different values. You will need to use the entire training set for this. ","f2768308":"----\n## Feature Importance\n\nAn important task when performing supervised learning on a dataset like the census data we study here is determining which features provide the most predictive power. By focusing on the relationship between only a few crucial features and the target label we simplify our understanding of the phenomenon, which is most always a useful thing to do. In the case of this project, that means we wish to identify a small number of features that most strongly predict whether an individual makes at most or more than \\$50,000.\n","6fba8cab":"## Effects of Feature Selection\n\nThe final model trained on reduced data has an accuracy score lower by 3% and a F-score lower by 5% compared to the one trained on full data. I would say that the dip in accuracy score isn't much of a bother but the dip in F-score seems significant.\n\nIf a lot of training points were to be processed and training time was a factor, I would consider the reduced data as my training set. Having said that, if F-score was a lot more important than the accuracy score, I would definitely take a closer look before making any decision.","6de10c9a":"### Normalizing Numerical Features\n\nIn addition to performing transformations on features that are highly skewed, it is often good practice to perform some type of scaling on numerical features. Applying a scaling to the data does not change the shape of each feature's distribution (such as `'capital-gain'` or `'capital-loss'` above); however, normalization ensures that each feature is treated equally when applying supervised learners. Note that once scaling is applied, observing the data in its raw form will no longer have the same original meaning, as exampled below.\n\nWe will use [`sklearn.preprocessing.MinMaxScaler`](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.MinMaxScaler.html) for this.","66b9e107":"### Feature Selection\nHow does a model perform if we only use a subset of all the available features in the data? With less features required to train, the expectation is that training and prediction time is much lower \u2014 at the cost of performance metrics. From the visualization above, we see that the top five most important features contribute more than half of the importance of **all** features present in the data. This hints that we can attempt to *reduce the feature space* and simplify the information required for the model to learn. The code cell below will use the same optimized model you found earlier, and train it on the same training set *with only the top five important features*. ","bf3af4b2":"----\n## Data Preprocessing\n","ff844864":"\nFrom the table in **Exploring the Data** above, we can see there are several features for each record that are non-numeric. Typically, learning algorithms expect input to be numeric, which requires that non-numeric features (called *categorical variables*) be converted. One popular way to convert categorical variables is by using the **one-hot encoding** scheme. One-hot encoding creates a _\"dummy\"_ variable for each possible category of each non-numeric feature. For example, assume `someFeature` has three possible entries: `A`, `B`, or `C`. We then encode this feature into `someFeature_A`, `someFeature_B` and `someFeature_C`.\n\n|  - | someFeature |    -          | someFeature_A | someFeature_B | someFeature_C |\n| :-: | :-: |           -                 | :-: | :-: | :-: |\n| 0 |  B  | - | 0 | 1 | 0 |\n| 1 |  C  | ----> one-hot encode ----> | 0 | 0 | 1 |\n| 2 |  A  | - | 1 | 0 | 0 |\n\nAdditionally, as with the non-numeric features, we need to convert the non-numeric target label, `'income'` to numerical values for the learning algorithm to work. Since there are only two possible categories for this label (\"<=50K\" and \">50K\"), we can avoid using one-hot encoding and simply encode these two categories as `0` and `1`, respectively. ","4553cddb":"## Shuffle and Split Data\n\nNow all _categorical variables_ have been converted into numerical features, and all numerical features have been normalized. As always, we will now split the data (both features and their labels) into training and test sets. 80% of the data will be used for training and 20% for testing.\n","b5d8a189":"### Transforming Skewed Continuous Features\nA dataset may sometimes contain at least one feature whose values tend to lie near a single number, but will also have a non-trivial number of vastly larger or smaller values than that single number.  Algorithms can be sensitive to such distributions of values and can underperform if the range is not properly normalized. With the census dataset two features fit this description: '`capital-gain'` and `'capital-loss'`. \n","e38091d6":"## Model Selection\n\n### *Gaussian Naive Bayes (GaussianNB)*\n\n- **Real-world application:** Document\/Text Classification - Determining whether a given document\/text corresponds to one or more categories. <a href='https:\/\/www.quora.com\/In-what-real-world-applications-is-Naive-Bayes-classifier-used'>Reference<\/a>\n\n\n- **Strengths:**\n    - Simple and easy to implement\n    - Mostly outperforms more complex models when the data set isn\u2019t large enough\n    - Can handle many features\n\n\n- **Weaknesses:**\n    - It works well on small datasets. For most of the practical applications it hardly fits.\n    - High bias\n    - No regularization or hyperparmeters tuning involved here to adjust bias\n\n\n- **Reasons for choosing:**\n    - Our problem has a lot of features (total of 103). GaussianNB handles many features pretty well.\n    \n---\n### *Decision Trees*\n\n- **Real-world application:** A common challenge for businesses today is to deliver quick and precise resolutions to their customers. Simultaneously, they have to ensure easy understanding of knowledge and processes for their support representatives for efficient resolution delivery. **Decision trees for customer service** play an important role to overcome challenges of knowledge findability. By providing decision trees to their support representatives, and integrating them with websites & self-care apps, companies can largely enhance their customer service level. <a href='http:\/\/www.kochartech.com\/blog\/2017\/08\/03\/decision-trees-important-customer-service\/?utm_medium=qa&utm_source=quora.com&utm_term=decision_trees_24'>Reference<\/a>\n\n\n- **Strengths:**\n    - Can handle both numerical and categorical data\n    - Require relatively little effort from users for data preparation\n    - Easy to understand and simple to interpret\n\n\n- **Weaknesses:**\n    - Prone to overfitting data\n    - High variance and unstable\n    - Can create biased trees if some classes dominate\n\n\n- **Reasons for choosing:**\n    - Our problem has both numerical and categorical data which decision trees can handle pretty well\n    - Interpretation of decision trees being easy, this will help us to understand better\n\n---\n### *Adaboost (Ensemble method)*\n\n- **Real-world application:** Used for face detection. e.g. detects pedestrians using patterns of motion and appearance. <a href='https:\/\/en.wikipedia.org\/wiki\/Boosting_(machine_learning)'>Reference<\/a>\n\n\n- **Strengths:**\n    - Unlike other powerful classifiers, such as SVM, AdaBoost can achieve similar classification results with much less tweaking of parameters or settings\n    - Highly accurate\n\n\n- **Weaknesses:**\n    - Can be sensitive to noisy data and outliers\n    - Need to be careful that the training data is of a high-quality <a href='https:\/\/machinelearningmastery.com\/boosting-and-adaboost-for-machine-learning\/'>Reference<\/a>\n\n\n- **Reasons for choosing:**\n    - For its high level of accuracy\n    - Neatness of our problem dataset makes this ensemble method an effective choice","76cd41ab":"## Getting Started\n\nIn this notebook, we will employ several supervised algorithms of your choice to accurately model individuals' income using data collected from the 1994 U.S. Census. we will then choose the best candidate algorithm from preliminary results and further optimize this algorithm to best model the data. Our goal with this implementation is to construct a model that accurately predicts whether an individual makes more than $50,000. This sort of task can arise in a non-profit setting, where organizations survive on donations.  Understanding an individual's income can help a non-profit better understand how large of a donation to request, or whether or not they should reach out to begin with.  While it can be difficult to determine an individual's general income bracket directly from public sources, we can (as we will see) infer this value from other publically available features. \n\nThe dataset for this project originates from the [UCI Machine Learning Repository](https:\/\/archive.ics.uci.edu\/ml\/datasets\/Census+Income). The datset was donated by Ron Kohavi and Barry Becker, after being published in the article _\"Scaling Up the Accuracy of Naive-Bayes Classifiers: A Decision-Tree Hybrid\"_. You can find the article by Ron Kohavi [online](https:\/\/www.aaai.org\/Papers\/KDD\/1996\/KDD96-033.pdf). The data we investigate here consists of small changes to the original dataset, such as removing the `'fnlwgt'` feature and records with missing or ill-formatted entries.","6d3fc5de":"----\n## Improving Results - Choosing the best model\nIn this final section, let's choose from the three supervised learning models the *best* model to use on the data. We will then perform a grid search optimization for the model over the entire training set (`X_train` and `y_train`) by tuning at least one parameter to improve upon the untuned model's F-score. "}}