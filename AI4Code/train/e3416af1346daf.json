{"cell_type":{"59a4b367":"code","670574ee":"code","070d80af":"code","a20efd50":"code","5708eea7":"code","f773aa2e":"code","8c7cd004":"markdown","fae043fb":"markdown","697783a0":"markdown","962583a7":"markdown","6cf52262":"markdown","087f2191":"markdown","614c104f":"markdown","4639c88d":"markdown","e5822fca":"markdown","8ff542be":"markdown"},"source":{"59a4b367":"import numpy as np \nimport pandas as pd\nimport os\nimport glob\nimport datetime\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True) \n\nsns.set(style='darkgrid')\nsns.set(palette=\"Set2\")","670574ee":"for data_file in glob.glob('\/kaggle\/input\/meme-cryptocurrency-historical-data\/Meme Coin\/*'):\n    df_name = 'df_meme_' + os.path.basename(data_file).split('.')[0]\n    globals()[df_name] = pd.read_csv(data_file)\n    globals()[df_name]['Date'] = pd.to_datetime(globals()[df_name]['Date'], format='%d-%m-%Y')","070d80af":"for data_file in glob.glob('\/kaggle\/input\/meme-cryptocurrency-historical-data\/*'):\n    df_name = 'df_' + os.path.basename(data_file).split('.')[0]\n    try:\n        globals()[df_name] = pd.read_csv(data_file)\n        globals()[df_name]['Date'] = pd.to_datetime(globals()[df_name]['Date'], format='%d-%m-%Y')\n    except:\n        continue","a20efd50":"def plot_timeseries_data(df, name):\n    year = datetime.date.today().year\n    month = datetime.date.today().month\n    day = datetime.date.today().day\n    initial_range = [str(year-1) + '-' + str(month) + '-' + str(day),  str(year) + '-' + str(month) + '-' + str(day+1)]\n    \n    if (df['Date'].min().year < 2020):\n        temp = max(df['Date'].min(), datetime.datetime.strptime(initial_range[0],'%Y-%m-%d'))\n        initial_range[0] = str(temp.year) + '-' + str(temp.month) + '-' + str(temp.day)\n\n        fig1 = px.line(df.sort_values(by='Date'), x='Date', y=['High', 'Low'], )\n        fig2 = px.line(df.sort_values(by='Date'), x='Date', y='Volume')\n\n        fig1.update_layout(title = {'text' : \"High-Low of \"+str(name), \n                                    'y':0.95,\n                                    'x':0.5,\n                                    'xanchor': 'center',\n                                    'yanchor': 'top',\n                                    'font' : {'color' : 'Red'}})\n        fig2.update_layout(title = {'text' : \"Volume of \"+str(name), \n                                    'y':0.95,\n                                    'x':0.5,\n                                    'xanchor': 'center',\n                                    'yanchor': 'top',\n                                    'font' : {'color' : 'Red'}})\n\n        fig1.update_xaxes(rangeslider_visible=True)\n        fig2.update_xaxes(rangeslider_visible=True)\n\n    #     fig1.update_xaxes(rangeslider_visible=True,\n    #                         rangeselector=dict(\n    #                         buttons=list([\n    #                             dict(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n    #                             dict(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),\n    #                             dict(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n    #                             dict(step=\"all\")])))\n    #     fig2.update_xaxes(rangeslider_visible=True,\n    #                         rangeselector=dict(\n    #                         buttons=list([\n    #                             dict(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n    #                             dict(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),\n    #                             dict(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n    #                             dict(step=\"all\")])))\n\n        fig1['layout']['xaxis'].update(range=initial_range)\n        fig2['layout']['xaxis'].update(range=initial_range)\n        plotly.offline.iplot(fig1)\n        plotly.offline.iplot(fig2)\n    else:\n        return","5708eea7":"for var in set(globals()):\n    if (('df_' in var) and ('meme_' not in var) and (var != 'df_name')):\n        plot_timeseries_data(globals()[var], var.split('.csv')[0].split('df_')[-1])","f773aa2e":"for var in set(globals()):\n    if (('df_' in var) and ('meme_' in var)):\n        plot_timeseries_data(globals()[var], var.split('.csv')[0].split('df_meme_')[-1])","8c7cd004":"# **EDA \ud83d\udcca**","fae043fb":"# **Task to be Accomplished \ud83c\udfaf**\n\n* Perform EDA on the the different cryptocurrency\n* Perform comparative analysis between meme cryptocurrencies with famous cryptocurrencies\n* Consider only those cryptocurrencies which are found before 2021","697783a0":"## **Famous Crypto-Currencies**","962583a7":"# **Feel free to <span style=\"color:red\">UPVOTE <\/span> and provide <span style=\"color:blue\">FEEDBACK <\/span> \ud83c\udf89**","6cf52262":"## **The columns in each file are -**\n\n1. Date\n1. Open\n1. High\n1. Low\n1. Close\n1. Volume\n1. Market Cap","087f2191":"# **Load the Data \ud83d\udcdd**","614c104f":"## **Meme Crypto-Currencies**","4639c88d":"# **Import Libraries \ud83d\udcda**","e5822fca":"## **Famous Crypto-Currencies**","8ff542be":"## **Meme Crypto-Currencies**"}}