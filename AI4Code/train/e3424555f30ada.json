{"cell_type":{"ef6bba7d":"code","11b55499":"code","cdc75944":"code","c089a2f4":"code","0b0f832b":"code","fe0633b9":"code","5eee43e6":"code","c521d4e4":"code","e0415fb0":"code","15ce24ca":"code","2dc54ed5":"code","392188ec":"code","1cf4f3e7":"code","6693ddb5":"code","50bd00fd":"code","7ff0ae96":"code","46057f92":"code","ae08eac6":"code","31e07b37":"code","ca1f765b":"code","f0ac721b":"code","ff596fad":"code","369026d6":"markdown","bd453d72":"markdown","21f6e3e8":"markdown","a0ca5d8c":"markdown"},"source":{"ef6bba7d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import OneHotEncoder\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.metrics import accuracy_score\nimport tensorflow as tf","11b55499":"data = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\ndata.head()","cdc75944":"data.info()","c089a2f4":"data.isna().sum()","0b0f832b":"sns.countplot(x=\"target\", data=data, palette=\"bwr\")\nplt.xlabel(\"Sex (0 = No disease, 1= Have disease)\")\nplt.show()","fe0633b9":"sns.countplot(x=\"sex\", data=data, palette=\"bwr\")\nplt.xlabel(\"Sex (0 = female, 1= male)\")\nplt.show()","5eee43e6":"sns.displot(x=\"age\", data=data)\nplt.show()","c521d4e4":"g = sns.catplot(x=\"age\", hue=\"target\", kind=\"count\", data=data)\ng.fig.set_figwidth(20)\ng.fig.set_figheight(6)\nplt.title('Heart Disease Frequency for Ages')","e0415fb0":"sns.catplot(x=\"sex\", hue=\"target\", kind=\"count\", data=data, legend=False,  palette=sns.color_palette(['#1CA53B','#AA1111']))\nplt.title('Heart Disease Frequency for Sex')\nplt.xlabel('Sex (0 = Female, 1 = Male)')\nplt.legend([\"Haven't Disease\", \"Have Disease\"])","15ce24ca":"sns.catplot(x=\"slope\", col = 'sex', hue=\"target\", kind=\"count\", data=data, legend=False,  palette=sns.color_palette(['#FFC300','#581845']))\nplt.legend([\"Haven't Disease\", \"Have Disease\"])","2dc54ed5":"sns.catplot(x=\"fbs\", hue=\"target\", kind=\"count\", data=data, legend=False,  palette=sns.color_palette(['#1CA53B','#AA1111']))\nplt.legend([\"Haven't Disease\", \"Have Disease\"])","392188ec":"sns.catplot(x=\"fbs\", col ='sex', hue=\"target\", kind=\"count\", data=data, legend=False,  palette=sns.color_palette(['#FFC300','#581845']))\nplt.legend([\"Haven't Disease\", \"Have Disease\"])","1cf4f3e7":"sns.catplot(x=\"cp\", hue=\"target\", kind=\"count\", data=data, legend=False,  palette=sns.color_palette(['#1CA53B','#AA1111']))\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.xlabel('Chest Pain Type')\nplt.title('Heart Disease Frequency According To Chest Pain Type')","6693ddb5":"sns.catplot(x=\"cp\", col ='sex', hue=\"target\", kind=\"count\", data=data, legend=False,  palette=sns.color_palette(['#FFC300','#581845']))\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.xlabel('Chest Pain Type')","50bd00fd":"features_to_encode = [\"cp\", \"thal\", \"slope\"]\nres = data\nfor feature in features_to_encode:\n    dummies = pd.get_dummies(data[feature], prefix = feature)\n    res = pd.concat([res, dummies], axis=1)\n    res = res.drop([feature], axis=1)","7ff0ae96":"X = data.iloc[:,:-1]\ny = data.iloc[:,-1]","46057f92":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=0)","ae08eac6":"LL = LogisticRegression(solver='liblinear',max_iter = 1000, random_state = 31)\nLL.fit(X_train,y_train)\nY_pred_lr = LL.predict(X_test) \ny_pred_lr = np.around(Y_pred_lr)\nscore_lr = round(accuracy_score(Y_pred_lr,y_test)*100,2)\nscore_lr","31e07b37":"lr = LogisticRegression(solver='liblinear')\nlr.fit(X_train, y_train)\ny_pred = lr.predict(X_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(lr.score(X_test, y_test) *100))\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(lr.score(X_train, y_train) *100))","ca1f765b":"svm = SVC()\nsvm.fit(X_train, y_train)\ny_pred = svm.predict(X_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(svm.score(X_test, y_test) *100))","f0ac721b":"dt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)\ny_pred = dt.predict(X_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(dt.score(X_test, y_test) *100))","ff596fad":"rf = RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(rf.score(X_test, y_test) *100))","369026d6":"##","bd453d72":"### Data contains; \n\nage - age in years.\n\nsex - (1 = male; 0 = female).\n\ncp - chest pain type. \n\ntrestbps - resting blood pressure (in mm Hg on admission to the hospital). \n\nchol - serum cholestoral in mg\/dl.\n\nfbs - (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false).\n\nrestecg - resting electrocardiographic results.\n\nthalach - maximum heart rate achieved.\n\nexang - exercise induced angina (1 = yes; 0 = no).\n\noldpeak - ST depression induced by exercise relative to rest.\n\nslope - the slope of the peak exercise ST segment.\n\nca - number of major vessels (0-3) colored by flourosopy. \n\nthal - 3 = normal; 6 = fixed defect; 7 = reversable defect. \n\ntarget - have disease or not (1=yes, 0=no).","21f6e3e8":"## EDA","a0ca5d8c":"## Read Data"}}