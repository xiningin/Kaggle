{"cell_type":{"0c02d7f8":"code","ddc962ed":"code","199ea3c7":"code","8ce30d82":"code","437a2e7b":"code","f5d3deda":"code","a3f03be3":"code","2181e725":"code","094511df":"code","e04d7f99":"code","b5393724":"code","11eed54c":"code","74b5a318":"code","ae292869":"code","b5f25e2a":"code","ce965cb5":"code","2ddb3e89":"code","4a40c587":"code","328a4cc0":"code","ce8a2319":"code","0b9fa4b2":"code","ba6eae75":"code","c72676f2":"code","a0575802":"code","9facb530":"code","1cf194f0":"code","ccdb2f7b":"code","0659b3aa":"code","41d6a016":"code","4acd7167":"code","7d8dbe34":"code","2c73db6f":"code","ee77095b":"code","b3932599":"code","105f10ac":"code","79c65540":"code","017858b0":"code","afb7b148":"code","bd05216a":"code","c3d93f8e":"code","3da0c1ea":"code","67f09492":"code","db9c8cf3":"code","264fd0ff":"code","dd0ed8b1":"code","1f7bf213":"code","7758e16c":"code","af99e373":"code","2945ee2c":"code","b40080ee":"code","62a60e31":"code","37bd21dd":"code","d20b9560":"code","88909689":"code","749182be":"code","2886b06e":"code","b9b42577":"code","570428c9":"code","c0eeac69":"code","66b455ef":"code","a845156a":"code","0048eb68":"code","3767f695":"code","db64b3db":"code","966e83f2":"code","be1b3b13":"code","d8c8a6e4":"code","0061a2b4":"code","1c27a474":"code","bc23eb4f":"code","e9120811":"code","dfc2e412":"code","a2d4a32e":"code","47f4b299":"code","61c081ea":"code","724d0ecb":"markdown"},"source":{"0c02d7f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ddc962ed":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neural_network import MLPClassifier","199ea3c7":"data = pd.read_csv('..\/input\/train.csv')\ndata_test = pd.read_csv('..\/input\/test.csv')","8ce30d82":"ID = data_test.PassengerId","437a2e7b":"print(\"\u0412 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439\",data.shape[0],\"\u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432, \u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439\" ,data_test.shape[0])\nprint(\"\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\", data.shape[1],\"\u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439\")","f5d3deda":"data.tail(10)","a3f03be3":"data_test.info()","2181e725":"data.info()","094511df":"    y_train = data.Survived","e04d7f99":"data.info()","b5393724":"print(\"Nan'\u044b \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0432\u0443\u044e\u0442 \u0432:\")\nfor x in data:\n    if data[x].isnull().sum() > 0:\n        print(x)","11eed54c":"data.isnull().sum()","74b5a318":"data.describe()","ae292869":"print(\"\u0410 \u0443 \u043d\u0430\u0441 \", int(data.Survived.value_counts(normalize=True)[1] * 100),'% \u0432\u044b\u0436\u0438\u043b\u043e',sep = \"\")\n#\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c value_counts, \u0442.\u043a \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\nprint(\"\u0421 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044f\u043c\u0438 \u0438\u043b\u0438 \u0434\u0435\u0442\u044c\u043c\u0438 \", int(data.Parch[data.Parch > 0].count()\/data.Parch.count() * 100),'%',sep = \"\")\nprint(\"\u0421 \u0431\u0440\u0430\u0442\u044c\u044f\u043c\u0438 \u0438\u043b\u0438 \u0441\u0435\u0441\u0442\u0440\u0430\u043c\u0438 \",  int(data.SibSp[data.SibSp > 0].count()\/data.SibSp.count() * 100),'%',sep = \"\")\nprint(\"\u041f\u0435\u043d\u0441\u0438\u043e\u043d\u0435\u0440\u043e\u0432 \", int(data.Age[data.Age > 65].count()\/data.Age.count() * 100),'%',sep = \"\")\n#count \u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u0442 Nan!","b5f25e2a":"data.describe(percentiles=[.23])","ce965cb5":"print(\"\u041f\u043e \u043f\u043e\u043b\u0443 \",data.Sex.describe(include=all), sep='\\n')\nprint(\"\u041f\u043e \u0438\u043c\u0435\u043d\u0438\", data.Name.describe(include=all),sep='\\n')\nprint(\"\u041f\u043e \u0431\u0438\u043b\u0435\u0442\u0443\", data.Ticket.describe(include=all),sep='\\n')\n","2ddb3e89":"print(\"\u0412\u0441\u0435\u0433\u043e \u043f\u043e\u0440\u0442\u043e\u0432 \u0431\u044b\u043b\u043e\", data.Embarked.describe()[1])","4a40c587":"print(\"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u043f\u043e \u043f\u043e\u043b\u0443\")\ndata.groupby('Sex').Survived.mean()","328a4cc0":"print(\"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0443 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430\")\ndata.groupby('Pclass').Survived.mean()","ce8a2319":"data.groupby(data.Age[data.Age<18]).Survived.mean()","0b9fa4b2":"data.drop([\"Cabin\"],axis=1, inplace=True)\ndata_test.drop([\"Cabin\"],axis=1, inplace=True)\ndata.drop([\"Ticket\"],axis=1, inplace=True)\ndata_test.drop([\"Ticket\"],axis=1, inplace=True)\ndata.drop([\"PassengerId\"],axis=1, inplace=True)\ndata_test.drop([\"PassengerId\"],axis=1, inplace=True)","ba6eae75":"import seaborn as sns\nimport matplotlib.pyplot as plt","c72676f2":"sns.catplot(x = 'Age',col= 'Survived',kind = 'count', data = data)","a0575802":"grid = sns.FacetGrid(data, row='Embarked', size=2.2, aspect=1.6)\ngrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\ngrid.add_legend()","9facb530":"data.Name.head()","1cf194f0":"data[\"Status\"] = data.Name.str.extract(r', (.*)\\.', expand=False)\ndata_test[\"Status\"] = data_test.Name.str.extract(r', (.*)\\.', expand=False)","ccdb2f7b":"data.Status.unique()","0659b3aa":"data.Status.replace('Mlle', 'Miss', inplace= True)\ndata.Status.replace('Ms', 'Miss', inplace= True)\ndata.Status.replace('Mme', 'Mrs', inplace= True)\ndata.Status.replace('Mrs. Martin (Elizabeth L', 'Mrs', inplace= True)\ndata.Status.unique() #Mrs. Martin (Elizabeth L \u043e\u0442\u043a\u0443\u0434\u0430 \u0442\u043e \u0432\u044b\u043b\u0435\u0437\u043b\u0430\n#\u043d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u043e inplace!!!\ndata_test.Status.replace('Mlle', 'Miss', inplace= True)\ndata_test.Status.replace('Ms', 'Miss', inplace= True)\ndata_test.Status.replace('Mme', 'Mrs', inplace= True)\ndata_test.Status.replace('Mrs. Martin (Elizabeth L', 'Mrs', inplace= True)\ndata_test.Status.unique()","41d6a016":"data.groupby('Status').Survived.count()","4acd7167":"data.groupby('Status').Survived.count()\nfor x in data.Status:\n    if data[data.Status == x].Survived.count() < 10:\n        data.Status.replace(x, 'OTHER', inplace= True)\ndata.groupby('Status').Survived.count()\n","7d8dbe34":"data.drop([\"Name\"],axis=1, inplace=True)\ndata_test.drop([\"Name\"],axis=1, inplace=True)\ndata.groupby('Status').Survived.mean()","2c73db6f":"data.Embarked.mode()","ee77095b":"data.Embarked.fillna('S', inplace=True)\ndata_test.Embarked.fillna('S', inplace=True)","b3932599":"data.Age[data.Age.notnull()]","105f10ac":"from sklearn.preprocessing import OneHotEncoder","79c65540":"data = pd.get_dummies(data)\ndata_test = pd.get_dummies(data_test)","017858b0":"data.info()","afb7b148":"\ncorrmat = data.corr()\nplt.subplots(figsize=(11, 8))\nsns.heatmap(corrmat, vmax=.8, square=True);","bd05216a":"from sklearn.linear_model import LinearRegression","c3d93f8e":"testforfilna = data.drop(['Age', 'Survived'], axis= 1)","3da0c1ea":"testforfilna[data.Age.isnull()]","67f09492":"from sklearn import preprocessing","db9c8cf3":"testforfilna =preprocessing.scale(testforfilna)","264fd0ff":"data['Age'].fillna(data['Age'].mean(), inplace=True)\ndata_test['Age'].fillna(data_test['Age'].mean(), inplace=True)","dd0ed8b1":"\ndata['AgeGroup'] = pd.cut(data.Age, [0, 18, 30, 50, 99],\n                        labels=['\u0414\u0435\u0442\u0438', '\u041c\u043e\u043b\u043e\u0434\u044b\u0435', '\u0417\u0440\u0435\u043b\u044b\u0435', '\u0421\u0442\u0430\u0440\u0438\u043a\u0438'])\ndata_test['AgeGroup'] = pd.cut(data_test.Age, [0, 18, 30, 50, 99],\n                        labels=['\u0414\u0435\u0442\u0438', '\u041c\u043e\u043b\u043e\u0434\u044b\u0435', '\u0417\u0440\u0435\u043b\u044b\u0435', '\u0421\u0442\u0430\u0440\u0438\u043a\u0438'])","1f7bf213":"data[\"FamSize\"] = data.SibSp +data.Parch\ndata['Alone'] = data.FamSize == 0 \ndata.Alone\ndata_test[\"FamSize\"] = data_test.SibSp +data_test.Parch\ndata_test['Alone'] = data_test.FamSize == 0 ","7758e16c":"g = sns.FacetGrid(data, col='Survived')\ng.map(plt.hist, 'FamSize', bins=20)","af99e373":"# \u0442\u0432\u043e\u0439 \u043a\u043e\u0434 \u0437\u0434\u0435\u0441\u044c","2945ee2c":"data.drop(\"AgeGroup\", axis = 1, inplace =True)\ndata_test.drop(\"AgeGroup\", axis = 1, inplace =True)","b40080ee":"data_test.Fare.fillna(data_test['Fare'].mean()\n                      , inplace=True)","62a60e31":"data.isna().sum()","37bd21dd":"data_test.isna().sum()","d20b9560":"lr = LogisticRegression(C=2)\nlr.fit(data.drop('Survived', axis=1), data.Survived)\nkf = KFold(n_splits=10,shuffle=True,random_state=42)\nscores = cross_val_score(lr,data.drop(['Survived'], axis=1), data.Survived, cv = kf )\nscores.mean()\n","88909689":"data.info()","749182be":"data_test.drop(['Status_Col', 'Status_Dona', 'Status_Dr'], axis= 1, inplace=True)","2886b06e":"KNN = KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n           metric_params=None, n_jobs=None, n_neighbors=7, p=2,\n           weights='uniform')\nKNN.fit(data.drop('Survived', axis=1), data.Survived)\nscoresKNN = cross_val_score(KNN,data.drop(['Survived'], axis=1), data.Survived, cv = kf )\nscoresKNN.mean()\n","b9b42577":"tr = DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=5,\n             max_leaf_nodes=None,\n            min_impurity_decrease=0.0, min_impurity_split=None,\n            min_samples_leaf=1, min_samples_split=2,\n            min_weight_fraction_leaf=0.0, presort=False, random_state=None,\n            splitter='best')\ntr.fit(data.drop('Survived', axis=1), data.Survived)\nscorestr = cross_val_score(tr,data.drop(['Survived'], axis=1), data.Survived, cv = kf )\nscorestr.mean()","570428c9":"rf = RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n            max_depth=5, max_features='auto', max_leaf_nodes=None,\n            min_impurity_decrease=0.0, min_impurity_split=None,\n            min_samples_leaf=1, min_samples_split=2,\n            min_weight_fraction_leaf=0.0, n_estimators=20, n_jobs=None,\n            oob_score=False, random_state=None, verbose=0,\n            warm_start=False)\nrf.fit(data.drop('Survived', axis=1), data.Survived)\nscoresrf = cross_val_score(rf,data.drop(['Survived'], axis=1), data.Survived, cv = kf )\nscoresrf.mean()","c0eeac69":"gr = GradientBoostingClassifier(learning_rate=0.1, n_estimators=250,max_depth=10)\ngr.fit(data.drop('Survived', axis=1), data.Survived)\nscores_gr = cross_val_score(tr,data.drop(['Survived'], axis=1), data.Survived, cv = kf )\nscores_gr.mean()","66b455ef":"mlpc = MLPClassifier(max_iter=5000)\nmlpc.fit(data.drop('Survived', axis=1), data.Survived)\nscores_mlpc = cross_val_score(mlpc,data.drop(['Survived'], axis=1), data.Survived, cv = kf )\nscores_mlpc.mean()","a845156a":"data.drop(['Status_OTHER'], inplace=True, axis=1)\ndata_test.drop(['Status_Rev'], inplace=True, axis=1)","0048eb68":"from xgboost import XGBClassifier\nXGBC = XGBClassifier(n_estimators=1000, learning_rate=0.05, max_depth=3)\nXGBC.fit(data.drop('Survived', axis=1), data.Survived);\nXGBC_scores = cross_val_score(XGBC,data.drop(['Survived'], axis=1), data.Survived, cv = kf );\nXGBC_scores.mean()","3767f695":"preds = XGBC.predict(data_test)\nsubmission = pd.DataFrame({\n        \"PassengerId\": ID,\n        \"Survived\": preds\n    })\nsubmission.to_csv('titanic.csv', index=False)","db64b3db":"from sklearn.model_selection import GridSearchCV","966e83f2":"from lightgbm import LGBMClassifier\nlgbm = LGBMClassifier(n_estimators=1000, random_state=5)\nlgbm.fit(data.drop('Survived', axis=1), data.Survived)\nscores_lgbm = cross_val_score(lgbm,data.drop(['Survived'], axis=1), data.Survived, cv = kf )\nscores_lgbm.mean()","be1b3b13":"params = {'n_estimators': list(range(1,100)),}\ngs = GridSearchCV(RandomForestClassifier(), params, cv=5)\ngs.fit(data.drop('Survived', axis=1), data.Survived)\n","d8c8a6e4":"gs.best_params_","0061a2b4":"from sklearn.ensemble import VotingClassifier\nVC = VotingClassifier([ ('lr', rf), ('tr', lr), ('lgbm', XGBC)]);\nVC.fit(data.drop('Survived', axis=1), data.Survived);\nscores_VC = cross_val_score(VC,data.drop(['Survived'], axis=1), data.Survived, cv = kf );\nscores_VC.mean()","1c27a474":"from sklearn.svm import SVC\nsvc = SVC()\nsvc.fit(data.drop('Survived', axis=1), data.Survived);\nsvc_scores = cross_val_score(svc,data.drop(['Survived'], axis=1), data.Survived, cv = kf );\nsvc_scores.mean()","bc23eb4f":"from sklearn.linear_model import Lasso","e9120811":"data.shape","dfc2e412":"ls = LogisticRegression(C=0.000002)\nls.fit(data.drop('Survived', axis=1), data.Survived)\nls.coef_","a2d4a32e":"ls.coef_==0","47f4b299":"data.columns","61c081ea":"ls.coef_\nprint((ls.coef_ != 0).sum())\ndata.drop('Survived', axis=1).columns[ls.coef_!=0]","724d0ecb":"**\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0441 \u0433\u0440\u0438\u0434\u0441\u0435\u0440\u0447, \u0441 \u043a\u0444-\u043c\u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0438 \u0435\u0449\u0451 \u0441 \u043a\u0443\u0447\u0435\u0439 \u0448\u0442\u0443\u043a!!**"}}