{"cell_type":{"7afbb5de":"code","54a945df":"code","d8d7fb35":"code","1156f4b5":"code","85e3dd5e":"code","f0dc4994":"code","71abb623":"code","1563521a":"code","69738fd1":"code","e72653a2":"code","4e18bf52":"code","e16bcaac":"code","5bb69a23":"code","e8acf38f":"code","1a4f068a":"code","4e5aa529":"code","9edb818b":"code","2ef8b89f":"code","775745eb":"code","e4b13ab2":"code","fba7a3e9":"code","f1b724d2":"code","606d8f08":"code","74afdcf8":"code","37b8a7aa":"code","6ea8ea61":"code","5cb21482":"code","c41517ff":"code","de96fe09":"code","2ec4515c":"code","ee0d1d71":"code","36cbdf29":"code","7802aae7":"code","c63cb965":"code","3deaf4e1":"code","5821f447":"code","010b04ac":"code","9549f60e":"code","6dd08168":"code","1a660029":"code","fe04d223":"code","edfd73ca":"code","b2f969b5":"code","6d3ebe83":"code","747abc99":"code","730d5b92":"code","186f4902":"code","14012bf4":"code","5341b0f3":"code","78216ccd":"code","da4d84f1":"code","11b369de":"code","83677d0c":"code","08c22498":"code","55f7170f":"code","70daf64a":"code","bd67dc13":"code","166a27a8":"code","07dadd38":"code","f130ea82":"code","559ba0ca":"code","e8a3c587":"code","0f91a348":"code","6da7ab84":"code","80086f28":"code","4cee85de":"code","29ce9573":"code","c4ba9508":"code","5f6af051":"code","362d08c1":"code","2a342022":"code","194e81ce":"code","b5f4b0b4":"code","ba0ae7a5":"code","0bbedfec":"code","31b3c9a9":"code","cbc91467":"code","ad7a6ac4":"code","9557ae52":"code","231c09e1":"code","b0c8df5b":"code","52f384a2":"code","eae2b8b0":"code","d4cc90b7":"code","20da1f13":"code","eb408c33":"code","db58c3ec":"code","bc9cff75":"code","98cdfda7":"code","57a46cd9":"code","081c483d":"code","d7080103":"code","072afc48":"code","9f353c2f":"code","4381095a":"code","0dd25f09":"code","6545f2bd":"code","fa384e5c":"code","e56f9440":"code","2dfbb902":"code","53b51d94":"code","db36af9e":"code","15a25f8b":"code","8cfe9c32":"code","e3005ccb":"code","ee06717e":"code","398cf3e6":"code","01b4206a":"code","d7fa3853":"code","9c9dc3fa":"code","67820451":"code","ec39f1bc":"code","cef291fe":"code","d3373f55":"code","40d49594":"code","ed011d7f":"code","ad61b43c":"code","d01a69cf":"code","c9a6e101":"code","9e5ccf1a":"code","e0d89243":"code","8d3728f7":"code","c5426baf":"code","367a805f":"code","c53497d2":"code","54edd602":"code","e8d23bce":"code","d25e1d3e":"code","2eccd970":"code","ab7cd4af":"code","48f630ab":"code","75b908f9":"code","375b5e7f":"code","92417ed7":"code","227c5003":"code","95056f14":"code","bb34fa6e":"code","5f23c121":"code","4ea96647":"code","7e532b64":"markdown","27f13334":"markdown","6cf19871":"markdown","9f9848de":"markdown","c6a214c9":"markdown","bf16d3e4":"markdown","44ea37fc":"markdown","b28606f8":"markdown","2ace45b5":"markdown"},"source":{"7afbb5de":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","54a945df":"# Import Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","d8d7fb35":"# Train Data\npd.set_option(\"max_columns\",None)\ntrain = pd.read_csv('\/kaggle\/input\/train.csv')","1156f4b5":"# Test Data\npd.set_option(\"max_columns\",None)\ntest = pd.read_csv('\/kaggle\/input\/test.csv')","85e3dd5e":"test.head()\nX_test_Id = test.Id","f0dc4994":"# Data Description\ndescription = open('\/kaggle\/input\/data_description.txt',\"r\")\nprint(description.read())","71abb623":"print(train.shape)\nprint(test.shape)","1563521a":"train.head()","69738fd1":"test.head()","e72653a2":"y = train['SalePrice']\ntrain.drop('SalePrice',axis = 1, inplace = True)","4e18bf52":"# Combining training and test dataset to deal with missing values\ndata = pd.concat([train,test],axis = 0)","e16bcaac":"# Shape after combining\ndata.shape","5bb69a23":"missing = data.isnull().sum()\/len(data)*100","e8acf38f":"missing_percent = pd.DataFrame(missing, columns = ['Percent'])\nmissing_percent = missing_percent.reset_index()\nmissing_percent.columns = ['Feature','Percent']","1a4f068a":"missing_percent","4e5aa529":" # Filtering columns with more than 50 percent data missing\nmore_than_50 = missing_percent[missing_percent['Percent'] >= 50]","9edb818b":"# Dropping all such features\ncol = more_than_50['Feature']\ndata.drop(list(col),axis = 1,inplace = True)","2ef8b89f":"data.shape","775745eb":"# Updating the missing percentage dataset\nmissing = data.isnull().sum()\/len(data)*100\nmissing_percent = pd.DataFrame(missing, columns = ['Percent'])\nmissing_percent = missing_percent.reset_index()\nmissing_percent.columns = ['Feature','Percent']","e4b13ab2":"missing_percent","fba7a3e9":"more_than_10 = missing_percent[missing_percent['Percent'] >= 10]","f1b724d2":"more_than_10","606d8f08":"data.drop(['FireplaceQu'],axis = 1, inplace = True)","74afdcf8":"data['LotFrontage'] = data['LotFrontage'].fillna(data['LotFrontage'].mean())","37b8a7aa":"# Updating the missing percentage dataset\nmissing = data.isnull().sum()\/len(data)*100\nmissing_percent = pd.DataFrame(missing, columns = ['Percent'])\nmissing_percent = missing_percent.reset_index()\nmissing_percent.columns = ['Feature','Percent']","6ea8ea61":"more_than_5 = missing_percent[missing_percent['Percent'] >= 5]","5cb21482":"more_than_5","c41517ff":"data['GarageType'].value_counts()","de96fe09":"data['GarageFinish'].value_counts()","2ec4515c":"data['GarageQual'].value_counts()","ee0d1d71":"data['GarageCond'].value_counts()","36cbdf29":"# Dropping the highly imbalance features\ndata.drop(['GarageQual','GarageCond'],1,inplace = True)","7802aae7":"# Dropping year columns\ndata.drop(['GarageYrBlt'],axis = 1, inplace = True)","c63cb965":"# Imputing with mode for the following columns\ndata['GarageType'].fillna(value = 'Attchd',inplace = True)\ndata['GarageFinish'].fillna(value = 'Unf',inplace = True)","3deaf4e1":"# Updating the missing percentage dataset\nmissing = data.isnull().sum()\/len(data)*100\nmissing_percent = pd.DataFrame(missing, columns = ['Percent'])\nmissing_percent = missing_percent.reset_index()\nmissing_percent.columns = ['Feature','Percent']","5821f447":"less_than_5 = missing_percent[(missing_percent['Percent'] < 5) & (missing_percent['Percent'] > 0)]","010b04ac":"less_than_5","9549f60e":"# Dropping imbalaced features\nvar = ['MSZoning','Utilities','Exterior2nd','BsmtCond','BsmtFinType2','Electrical','Functional','SaleType','Street']\ndata.drop(var,axis = 1, inplace = True)","6dd08168":"data['Exterior1st'].value_counts()","1a660029":"var = ['CemntBd','BrkFace','WdShing','AsbShng','Stucco','BrkComm','CBlock','Stone','AsphShn','ImStucc']\ndata['Exterior1st'].replace(to_replace= var, value = 'Exterior1st_others',inplace = True)","fe04d223":"data['MasVnrArea'].fillna(value = data['MasVnrArea'].mean(),axis = 0,inplace = True)\ndata['MasVnrType'].fillna(value = 'None',axis = 0,inplace = True)\ndata['BsmtQual'].fillna(value = 'TA',axis = 0, inplace = True)\ndata['BsmtExposure'].fillna(value = 'No',inplace = True)\ndata['BsmtFinType1'].fillna(value = 'Unf',inplace = True)\ndata['BsmtFinSF1'].fillna(value = data['BsmtFinSF1'].mean(),inplace = True)\ndata['BsmtFinSF2'].fillna(value = data['BsmtFinSF2'].mean(),inplace = True)\ndata['BsmtUnfSF'].fillna(value = data['BsmtUnfSF'].mean(),inplace = True)\ndata['TotalBsmtSF'].fillna(value = data['TotalBsmtSF'].mean(),inplace = True)\ndata['BsmtFullBath'].fillna(value = data['BsmtFullBath'].mean(),inplace = True)\ndata['BsmtHalfBath'].fillna(value = data['BsmtHalfBath'].mean(),inplace = True)\ndata['KitchenQual'].fillna(value = 'TA',inplace = True)\ndata['GarageCars'].fillna(value = data['GarageCars'].median(),inplace = True)\ndata['GarageArea'].fillna(value = data['GarageArea'].mean(),inplace = True)\ndata['Exterior1st'].fillna(value = 'VinylSd', inplace = True)","edfd73ca":"# Updating the missing percentage dataset\nmissing = data.isnull().sum()\/len(data)*100\nmissing_percent = pd.DataFrame(missing, columns = ['Percent'])\nmissing_percent = missing_percent.reset_index()\nmissing_percent.columns = ['Feature','Percent']","b2f969b5":"# Now there is no missing value in the data\ndata.isnull().sum().any()","6d3ebe83":"#data['BsmtFinSF1'] + data['BsmtFinSF2'] = data['TotalBsmtSF']","747abc99":"data['TotalBsmt'] = data['BsmtFinSF1'] + data['BsmtFinSF2'] \n\n# Dropping the deriving feature\nvar = ['BsmtFinSF1','BsmtFinSF2','TotalBsmtSF']\ndata.drop(var,axis=1,inplace=True)","730d5b92":"data.columns","186f4902":"num_col = [col for col in data.columns\n          if data[col].dtype in ['int64','float64']]","14012bf4":"cat_col = [col for col in data.columns\n          if data[col].dtype in ['object']]","5341b0f3":"print(num_col)","78216ccd":"# Dropping the Id column\nId  = data['Id']\ndata.drop('Id',axis = 1,inplace = True)","da4d84f1":"print(cat_col)","11b369de":"data['Years_old'] = 2020 - data['YearBuilt']\n#Dropping YearBuilt\ndata.drop('YearBuilt',axis = 1,inplace = True)","83677d0c":"data.shape","08c22498":"print(num_col)","55f7170f":"num_col = [col for col in data.columns\n          if data[col].dtype in ['int64','float64']]\ncat_col = [col for col in data.columns\n          if data[col].dtype in ['object']]","70daf64a":"print(cat_col)","bd67dc13":"# Dropping Imbalanced columns\ndata.drop('LotShape',axis=1,inplace=True)\ndata.drop('LandContour',axis=1,inplace=True)\ndata.drop('LotConfig',axis=1,inplace=True)\ndata.drop('LandSlope',axis=1,inplace=True)\ndata.drop('Condition1',axis=1,inplace=True)\ndata.drop('Condition2',axis=1,inplace=True)\ndata.drop('BldgType',axis=1,inplace=True)\ndata.drop('RoofStyle',axis=1,inplace=True)\ndata.drop('RoofMatl',axis=1,inplace=True)\ndata.drop('ExterCond',axis=1,inplace = True)\ndata.drop('Foundation',axis=1,inplace=True)\ndata.drop('Heating',axis=1,inplace=True)\ndata.drop('CentralAir',axis=1,inplace=True)\ndata.drop('GarageType',axis=1,inplace=True)\ndata.drop('GarageFinish',axis=1,inplace=True)\ndata.drop('PavedDrive',axis=1,inplace=True)\ndata.drop('SaleCondition',axis=1,inplace=True)","166a27a8":"# Coverting the digits into categories\ndata['MSSubClass'].replace(20,'1-STORY 1946 & NEWER ALL STYLES',inplace = True)\ndata['MSSubClass'].replace(30,'1-STORY 1945 & OLDER',inplace = True)\ndata['MSSubClass'].replace(40,'1-STORY W\/FINISHED ATTIC ALL AGES',inplace = True)\ndata['MSSubClass'].replace(45,'1-1\/2 STORY - UNFINISHED ALL AGES',inplace = True)\ndata['MSSubClass'].replace(50,'1-1\/2 STORY FINISHED ALL AGES',inplace = True)\ndata['MSSubClass'].replace(60,'2-STORY 1946 & NEWER',inplace = True)\ndata['MSSubClass'].replace(70,'2-STORY 1945 & OLDER',inplace = True)\ndata['MSSubClass'].replace(75,'2-1\/2 STORY ALL AGES',inplace = True)\ndata['MSSubClass'].replace(80,'SPLIT OR MULTI-LEVEL',inplace = True)\ndata['MSSubClass'].replace(85,'SPLIT FOYER',inplace = True)\ndata['MSSubClass'].replace(90,'DUPLEX - ALL STYLES AND AGES',inplace = True)\ndata['MSSubClass'].replace(120,'1-STORY PUD (Planned Unit Development) - 1946 & NEWER',inplace = True)\ndata['MSSubClass'].replace(150,'1-1\/2 STORY PUD - ALL AGES',inplace = True)\ndata['MSSubClass'].replace(160,'2-STORY PUD - 1946 & NEWER',inplace = True)\ndata['MSSubClass'].replace(180,'PUD - MULTILEVEL - INCL SPLIT LEV\/FOYER',inplace = True)\ndata['MSSubClass'].replace(190,'2 FAMILY CONVERSION - ALL STYLES AND AGES',inplace = True)","07dadd38":"data.MSSubClass.value_counts()","f130ea82":"var = ['SPLIT FOYER','2-1\/2 STORY ALL AGES','1-1\/2 STORY - UNFINISHED ALL AGES','PUD - MULTILEVEL - INCL SPLIT LEV\/FOYER',\n      '1-STORY W\/FINISHED ATTIC ALL AGES','1-1\/2 STORY PUD - ALL AGES']\ndata['MSSubClass'].replace(var,'2 FAMILY CONVERSION - ALL STYLES AND AGES',inplace = True)\n       ","559ba0ca":"data.MSSubClass.value_counts()","e8a3c587":"# Coverting 'OverallQual' column from numerical to categorical\ndata['OverallQual'].replace(10,'Very Excellent',inplace = True)\ndata['OverallQual'].replace(9,'Excellent',inplace = True)\ndata['OverallQual'].replace(8,'Very Good',inplace = True)\ndata['OverallQual'].replace(7,'Good',inplace = True)\ndata['OverallQual'].replace(6,'Above Average',inplace = True)\ndata['OverallQual'].replace(5,'Average',inplace = True)\ndata['OverallQual'].replace(4,'Below Average',inplace = True)\ndata['OverallQual'].replace(3,'Fair',inplace = True)\ndata['OverallQual'].replace(2,'Poor',inplace = True)\ndata['OverallQual'].replace(1,'Very Poor',inplace = True)","0f91a348":"# Changing 'OverallCond' from numerical to categorical\ndata['OverallCond'].replace(10,'Very Excellent',inplace = True)\ndata['OverallCond'].replace(9,'Excellent',inplace = True)\ndata['OverallCond'].replace(8,'Very Good',inplace = True)\ndata['OverallCond'].replace(7,'Good',inplace = True)\ndata['OverallCond'].replace(6,'Above Average',inplace = True)\ndata['OverallCond'].replace(5,'Average',inplace = True)\ndata['OverallCond'].replace(4,'Below Average',inplace = True)\ndata['OverallCond'].replace(3,'Fair',inplace = True)\ndata['OverallCond'].replace(2,'Poor',inplace = True)\ndata['OverallCond'].replace(1,'Very Poor',inplace = True)","6da7ab84":"print(num_col)","80086f28":"sns.distplot(y)","4cee85de":"y_dataframe = pd.DataFrame(y)\nprint(\"Skewness of 'SalePrice' is {}\".format(y_dataframe.skew()))\nprint(\"Kurtosis of 'SalePrice' is {}\".format(y_dataframe.kurt()))","29ce9573":"# Barplot betwwen \"OverallQual\" and SalePrice\nsns.barplot(x = train['OverallQual'], y = y)","c4ba9508":"# Barplot betwwen \"OverallQual\" and SalePrice\nsns.barplot(x = train['OverallCond'], y = y)","5f6af051":"#correlation matrix\ncorrmat = data[num_col].corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","362d08c1":"# We can see that Garage area and Garage cars are highly correlated so we can drop one of them\ndata.drop('GarageArea', axis = 1, inplace = True)","2a342022":"# TotRmsabvgrd and GrLivArea have high correlation\ndata.drop('TotRmsAbvGrd',axis=1,inplace=True)","194e81ce":"train = data.iloc[:1460,:]\ntest = data.iloc[1460:,:]","b5f4b0b4":"train.shape","ba0ae7a5":"train = pd.concat([train,y], axis = 1)","0bbedfec":"train.isnull().any()","31b3c9a9":"#correlation matrix\ncorrmat = train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","cbc91467":"# We can see there is a linear relationship between SaleProce and GrLivArea\nsns.scatterplot(x = train['GrLivArea'], y = train['SalePrice'])","ad7a6ac4":"# We can see that as the Garage space increases the price also increases\nsns.scatterplot(x = train['GarageCars'], y = train['SalePrice'])","9557ae52":"sns.boxplot(train['GrLivArea'])","231c09e1":"train.drop(train[train['GrLivArea'] > 4000].index, axis = 0, inplace = True)","b0c8df5b":"sns.boxplot(train['GrLivArea'])","52f384a2":"sns.boxplot(train['GarageCars'])","eae2b8b0":"train.drop(train[train['GarageCars'] > 3].index, axis = 0, inplace = True)","d4cc90b7":"sns.boxplot(train['GarageCars'])","20da1f13":"num_col = [col for col in train.columns\n          if train[col].dtype in ['int64','float64']]\ncat_col = [col for col in train.columns\n          if train[col].dtype in ['object']]","eb408c33":"print(num_col)","db58c3ec":"sns.boxplot(train['LotFrontage'])","bc9cff75":"sns.scatterplot(x = train['LotFrontage'], y = train['SalePrice'])","98cdfda7":"# Dropping the outliers\ntrain.drop(train[train['LotFrontage'] > 250].index, axis = 0, inplace = True)","57a46cd9":"sns.scatterplot(x = train['PoolArea'], y = train['SalePrice'])","081c483d":"# Dropping the Pool area as most of the rows have 0.0 area\ntrain.drop('PoolArea',axis=1, inplace = True)\ntest.drop('PoolArea',axis = 1, inplace=True)","d7080103":"sns.boxplot(train['1stFlrSF'])","072afc48":"# No major outliers\nsns.scatterplot(x = train['1stFlrSF'], y = train['SalePrice'])","9f353c2f":"# No major outliers\nsns.scatterplot(x = train['2ndFlrSF'], y = train['SalePrice'])","4381095a":"# No major outliers\nsns.scatterplot(x = train['TotalBsmt'], y = train['SalePrice'])","0dd25f09":"# People having more than 6 above graded bedrooms are rare\nsns.scatterplot(x = train['BedroomAbvGr'], y = train['SalePrice'])","6545f2bd":"# There are few outliers in the data\nsns.boxplot(data['BedroomAbvGr'])","fa384e5c":"# Dropping the outliers\ntrain.drop(train[train['BedroomAbvGr'] > 5].index, axis = 0, inplace = True)","e56f9440":"sns.scatterplot(x = train['ScreenPorch'], y = train['SalePrice'])","2dfbb902":"train['ScreenPorch'].value_counts()","53b51d94":"# We can observe that most of the people do not have screen porch therefore we will drop this feature\ntrain.drop('ScreenPorch',axis=1, inplace = True)\ntest.drop('ScreenPorch',axis = 1, inplace=True)","db36af9e":"train.isnull().sum()","15a25f8b":"print(train.shape)\nprint(test.shape)","8cfe9c32":"num_col = [col for col in train.columns\n          if train[col].dtype in ['int64','float64']]\ncat_col = [col for col in train.columns\n          if train[col].dtype in ['object']]","e3005ccb":"print(num_col)","ee06717e":"print(cat_col)","398cf3e6":"train['MSSubClass'].isnull().sum()","01b4206a":"print(cat_col)","d7fa3853":"train.isnull().sum().any()","9c9dc3fa":"ms_subclass = pd.get_dummies(train['MSSubClass'],drop_first=True)\nneighbor = pd.get_dummies(train['Neighborhood'],prefix = 'neighbor', drop_first=True)\nhouse_style = pd.get_dummies(train['HouseStyle'],prefix='HStyle',drop_first=True)\noverall_qual = pd.get_dummies(train['OverallQual'],prefix='OverallQual',drop_first=True)\noverall_cond = pd.get_dummies(train['OverallCond'],prefix='OverallCond',drop_first=True)\nexterior = pd.get_dummies(train['Exterior1st'],prefix='Exterior',drop_first=True)\nmasvnrtype = pd.get_dummies(train['MasVnrType'],prefix='MasVnrType',drop_first=True)\nexterqual = pd.get_dummies(train['ExterQual'],prefix = 'ExteriorQual',drop_first=True)\nbsmtqual = pd.get_dummies(train['BsmtQual'],prefix='bsmtqual',drop_first=True)\nbsmtexp = pd.get_dummies(train['BsmtExposure'],prefix='bsmtexp',drop_first=True)\nbsmtfintype1 = pd.get_dummies(train['BsmtFinType1'],prefix = 'bsmtfintype1',drop_first=True)\nheatingqc = pd.get_dummies(train['HeatingQC'],prefix='heatingqc',drop_first=True)\nkitchenqual = pd.get_dummies(train['KitchenQual'],prefix = 'kitchenqual',drop_first=True)","67820451":"kitchenqual.shape","ec39f1bc":"ms_subclass_t = pd.get_dummies(test['MSSubClass'],drop_first=True)\nneighbor_t = pd.get_dummies(test['Neighborhood'],prefix = 'neighbor', drop_first=True)\nhouse_style_t = pd.get_dummies(test['HouseStyle'],prefix='HStyle',drop_first=True)\noverall_qual_t = pd.get_dummies(test['OverallQual'],prefix='OverallQual',drop_first=True)\noverall_cond_t = pd.get_dummies(test['OverallCond'],prefix='OverallCond',drop_first=True)\nexterior_t = pd.get_dummies(test['Exterior1st'],prefix='Exterior',drop_first=True)\nmasvnrtype_t = pd.get_dummies(test['MasVnrType'],prefix='MasVnrType',drop_first=True)\nexterqual_t = pd.get_dummies(test['ExterQual'],prefix = 'ExteriorQual',drop_first=True)\nbsmtqual_t = pd.get_dummies(test['BsmtQual'],prefix='bsmtqual',drop_first=True)\nbsmtexp_t = pd.get_dummies(test['BsmtExposure'],prefix='bsmtexp',drop_first=True)\nbsmtfintype1_t = pd.get_dummies(test['BsmtFinType1'],prefix = 'bsmtfintype1',drop_first=True)\nheatingqc_t = pd.get_dummies(test['HeatingQC'],prefix='heatingqc',drop_first=True)\nkitchenqual_t = pd.get_dummies(test['KitchenQual'],prefix = 'kitchenqual',drop_first=True)","cef291fe":"num_col = [col for col in train.columns\n          if train[col].dtype in ['int64','float64']]\ncat_col = [col for col in train.columns\n          if train[col].dtype in ['object']]","d3373f55":"print(cat_col)","40d49594":"ms_subclass.shape","ed011d7f":"train.shape","ad61b43c":"new_train = pd.concat([train,ms_subclass,neighbor,house_style,overall_qual,overall_cond,\n                  exterior,masvnrtype,exterqual,bsmtqual,bsmtexp,bsmtfintype1,heatingqc,\n                  kitchenqual],axis = 0)","d01a69cf":"train.isnull().sum()\/len(train)","c9a6e101":"test = pd.concat([test,ms_subclass_t,neighbor_t,house_style_t,overall_qual_t,overall_cond_t,\n                  exterior_t,masvnrtype_t,exterqual_t,bsmtqual_t,bsmtexp_t,bsmtfintype1_t,heatingqc_t,\n                  kitchenqual_t],axis = 1)","9e5ccf1a":"var = ['MSSubClass', 'Neighborhood', 'HouseStyle', 'OverallQual', 'OverallCond',\n       'Exterior1st', 'MasVnrType', 'ExterQual',\n       'BsmtQual', 'BsmtExposure', 'BsmtFinType1', 'HeatingQC', 'KitchenQual']\ntrain.drop(var,axis = 1,inplace=True)\ntest.drop(var,axis=1,inplace=True)","e0d89243":"train.isnull().sum().any()","8d3728f7":"train.head()","c5426baf":"test.shape","367a805f":"num_col = [col for col in train.columns\n          if train[col].dtype in ['int64','float64']]\ncat_col = [col for col in train.columns\n          if train[col].dtype in ['object']]","c53497d2":"num_col = [col for col in test.columns\n          if test[col].dtype in ['int64','float64']]\ncat_col = [col for col in test.columns\n          if test[col].dtype in ['object']]","54edd602":"from sklearn.preprocessing import StandardScaler","e8d23bce":"scaler = StandardScaler()\ntrain[num_col] = scaler.fit_transform(train[num_col])","d25e1d3e":"test[num_col] = scaler.transform(test[num_col])","2eccd970":"train.head()","ab7cd4af":"y_train = train['SalePrice']","48f630ab":"X_train = train.drop('SalePrice',axis=1)","75b908f9":"X_test = test","375b5e7f":"from sklearn.linear_model import LinearRegression\nfrom sklearn.feature_selection import RFE\n# Running RFE with the output number of the variable equal to 35\nlm = LinearRegression()\nlm.fit(X_train, y_train)\n\nrfe = RFE(lm, 35)             # running RFE\nrfe = rfe.fit(X_train, y_train)","92417ed7":"# List of 35 columns selected by RFE\nlist(zip(X_train.columns,rfe.support_,rfe.ranking_))","227c5003":"# Columns selected by RFE\ncol = X_train.columns[rfe.support_]\ncol","95056f14":"from sklearn.ensemble import RandomForestRegressor\nrnd_reg = RandomForestRegressor(n_estimators=500,max_leaf_nodes=16,n_jobs=-1)","bb34fa6e":"rnd_reg.fit(X_train[col],y_train)","5f23c121":"y_pred = rnd_reg.predict(X_test[col])","4ea96647":"output1 = pd.DataFrame({'Id': X_test_Id,'SalePrice':y_pred})\n\noutput1.to_csv('submission.csv',index = False)","7e532b64":"# EDA","27f13334":"# Scaling the data","6cf19871":"## Deriving new features","9f9848de":"## Data Preparation","c6a214c9":"#### We can see that as the OverallQual increases the Price also increases which is not exactly in OverallCond","bf16d3e4":"# Modeling","44ea37fc":"# Dummy variables","b28606f8":"### Handling missing values","2ace45b5":"# Outlier Detection"}}