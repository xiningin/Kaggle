{"cell_type":{"8fcf8ce0":"code","8a769cb0":"code","cd763680":"code","fedd8bb9":"code","bf6497c5":"code","665b652c":"markdown"},"source":{"8fcf8ce0":"import numpy as np","8a769cb0":"def is_rising(l:list) -> bool:\n    for i in range(len(l)-1):\n        if not l[i] <= l[i+1]:\n            return False\n    return True\n        \ndef min_columns(s:str) -> int:\n    l = s.split(' ')\n    a = np.array([[]])\n    for i in range(len(l)):\n        l[i] = list(l[i])\n    \n    # transpose now\n    a = np.array(l).T\n    m, n = a.shape[0], a.shape[1]\n    \n    keep_index = []\n    \n    for i in range(m):\n        if is_rising(a[i]):\n            keep_index.append(i)\n    if len(keep_index) == 0:\n        return 'Have to remove all columns'\n                \n    return m-len(keep_index), keep_index, a[keep_index,:].T        \n    ","cd763680":"min_columns('abcdef')","fedd8bb9":"min_columns('zyx wvu tsr')","bf6497c5":"s= 'cba daf ghi'\nmin_columns(s)","665b652c":"This problem was asked by Google.\n\nYou are given an N by M 2D matrix of lowercase letters. Determine the minimum number of columns that can be removed to ensure that each row is ordered from top to bottom lexicographically. That is, the letter at each column is lexicographically later as you go down each row. It does not matter whether each row itself is ordered lexicographically.\n\nFor example, given the following table:\n\ncba\ndaf\nghi\n\nThis is not ordered because of the a in the center. We can remove the second column to make it ordered:\n\nca\ndf\ngi\n\nSo your function should return 1, since we only needed to remove 1 column.\n\nAs another example, given the following table:\n\nabcdef\n\nYour function should return 0, since the rows are already ordered (there's only one row).\n\nAs another example, given the following table:\n\nzyx\nwvu\ntsr\n\nYour function should return 3, since we would need to remove all the columns to order it."}}