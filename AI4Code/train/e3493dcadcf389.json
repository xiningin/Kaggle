{"cell_type":{"f1bf85a4":"code","f83acd06":"code","883f9ca1":"code","14797f0c":"code","23033f82":"code","9ff23be3":"code","6d1b79af":"code","2ada52e1":"code","620db6ab":"code","d1ab00a6":"code","06fd390c":"code","22f7dd07":"code","dd245c09":"code","9e637fdc":"code","96eacbdc":"code","6d075419":"markdown","0bc0dd4e":"markdown","0ac23e90":"markdown"},"source":{"f1bf85a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f83acd06":"import matplotlib.pyplot as plt\nimport seaborn as sns","883f9ca1":"df_stores = pd.read_csv('\/kaggle\/input\/retaildataset\/stores data-set.csv')\ndf_stores.head()","14797f0c":"df_features = pd.read_csv('\/kaggle\/input\/retaildataset\/Features data set.csv')\ndf_features.head()","23033f82":"df_sales = pd.read_csv('\/kaggle\/input\/retaildataset\/sales data-set.csv')\ndf_sales.head()","9ff23be3":"df_stores_features = df_stores.merge(right = df_features, on = 'Store')\n\ndf_merge = df_stores_features.merge(right = df_sales, on = ['Store', 'Date', 'IsHoliday'])\ndf_merge.sample(10)","6d1b79af":"df_merge.info()","2ada52e1":"df_merge.describe()","620db6ab":"df_merge['Date'] = pd.to_datetime(df_merge['Date'])","d1ab00a6":"df_temp = df_merge.copy(deep=True)\ndf_temp['MarkDown'] = df_temp['MarkDown1'] + df_temp['MarkDown2'] +df_temp['MarkDown3'] +df_temp['MarkDown4'] + df_temp['MarkDown5']\ndf_temp.drop(['MarkDown1', 'MarkDown2', 'MarkDown3', 'MarkDown4', 'MarkDown5'], inplace = True, axis = 1)\nfig, ax = plt.subplots(figsize=(20,12))\nsns.heatmap(df_temp.corr(),annot=True)\n# df_temp.head","06fd390c":"df_merge[['Date', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment', \n    'MarkDown1', 'MarkDown2', 'MarkDown3', 'MarkDown4', 'MarkDown5']].plot(x='Date', subplots=True, figsize=(20,15))\nplt.show()","22f7dd07":"df_temp = df_merge.groupby('Date').sum()['Weekly_Sales'].reset_index()\nfig, ax = plt.subplots(figsize=(20,12))\nax.plot('Date', 'Weekly_Sales', data=df_temp)","dd245c09":"df_merge.Date.apply(lambda x: x.month)","9e637fdc":"df_temp = df_merge.groupby(df_merge.Date.apply(lambda x: x.month)).sum()['Weekly_Sales'].reset_index()\nplt.figure(figsize=(10, 5))\nsns.barplot(x=df_temp.Date,y=df_temp.Weekly_Sales)\nplt.title(\"Month wise Sales\")\nplt.xlabel(\"Month\")\nplt.ylabel(\"Sales\")","96eacbdc":"df_temp = df_merge.groupby('Type').sum()['Weekly_Sales'].reset_index()\nfig, ax = plt.subplots(figsize=(20,12))\nax.bar('Type', 'Weekly_Sales', data=df_temp)","6d075419":"#### Converting date column into datetime","0bc0dd4e":"### Cumulative Weekly Sales Plot","0ac23e90":"### Performance Based on Stores"}}