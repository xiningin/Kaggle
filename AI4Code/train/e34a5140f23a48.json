{"cell_type":{"733e9a44":"code","f9c09eeb":"code","669d10b8":"code","fde90391":"code","6f545189":"code","3632afeb":"code","315735e4":"code","c0798705":"code","36fecf26":"code","23b46d9e":"code","23bc5da7":"code","2ee16f9b":"code","26ce4acd":"code","944b7200":"code","b5f322ac":"code","79a5b930":"code","97690013":"code","2e1b9682":"code","8785db7c":"code","cececf2e":"code","fb1b3283":"code","09551e5e":"markdown","3d264644":"markdown","393b3c4c":"markdown","425a07ad":"markdown","dd37bb1a":"markdown","3a9a27f5":"markdown","63cc8008":"markdown"},"source":{"733e9a44":"import os\nimport warnings\nfrom pathlib import Path\nimport tsfresh\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\nfrom sklearn.feature_selection import mutual_info_classif\nfrom tsfresh.utilities.dataframe_functions import impute\nfrom tsfresh import extract_features, extract_relevant_features\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.model_selection import ShuffleSplit\nimport random\nfrom xgboost import XGBClassifier\nwarnings.simplefilter(action='ignore', category=FutureWarning)","f9c09eeb":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","669d10b8":"data = pd.concat([train, test], sort=False)","fde90391":"data['Sex'].replace(['male','female'], [0, 1], inplace=True)\ndata['Embarked'].fillna(('S'), inplace=True)\ndata['Embarked'] = data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\ndata['Fare'].fillna(np.mean(data['Fare']), inplace=True)\ndata['fare_value']=data['Fare']\/50\nage_avg = data['Age'].mean()\nage_std = data['Age'].std()\ndata['Age'].fillna(np.random.randint(age_avg - age_std, age_avg + age_std), inplace=True)\ndata['age_value']=data['Age']\/50\ndata['family'] = (data['SibSp'] + data['Parch'])\/5 \ndata['isAlone'] = 0\ndata.loc[data['family'] > 0, 'isAlone'] = 1\ndelete_columns = ['Name','PassengerId','SibSp','Parch','Ticket','Cabin','Age','Fare']\ndata.drop(delete_columns, axis=1, inplace=True)\ndata","6f545189":"data['index2']=data.index\ndata","3632afeb":"df=data","315735e4":"df_features = extract_features(df.iloc[:,1:], column_id='index2', column_sort='index2', n_jobs=os.cpu_count())\nprint(df_features.shape)\ndf_features","c0798705":"df.head().T","36fecf26":"df_features.head().T","23b46d9e":"df_features=df_features.dropna(how='any', axis=1)","23bc5da7":"print(df.shape)\nprint(df_features.shape)","2ee16f9b":"_ = impute(df_features)","26ce4acd":"data2=df_features","944b7200":"trainX = pd.concat([data[:len(train)],data2[:len(train)]],axis=1)\ntestX = pd.concat([data[len(train):],data2[len(train):]],axis=1)\ntrainY = data['Survived']","b5f322ac":"print(trainX.shape)","79a5b930":"X = np.array(trainX)\ny = np.array(trainY)","97690013":"clf = XGBClassifier(max_depth=4, n_estimators=1000, learning_rate=0.01)","2e1b9682":"ss = ShuffleSplit(n_splits=5,train_size=0.8,test_size =0.2,random_state=0) \n\nfor train_index, test_index in ss.split(X): \n    X_train, X_test = X[train_index], X[test_index]\n    Y_train, Y_test = y[train_index], y[test_index]\n    clf.fit(X_train, Y_train) \n    print(clf.score(X_test, Y_test))","8785db7c":"PRED=clf.predict(testX)\nprint(PRED[0:10])","cececf2e":"submit=pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmit['Survived']=PRED.astype(int)\nsubmit","fb1b3283":"submit.to_csv('submission.csv',index=False)\nsubmit['Survived'].value_counts()","09551e5e":"# Original Data","3d264644":"# Titanic XGBoost with TSFresh\nhttps:\/\/www.kaggle.com\/stpeteishii\/titanic-xgboost-with-tsfresh","393b3c4c":"# Model","425a07ad":"# TSFresh","dd37bb1a":"# Predict","3a9a27f5":"# Feature Engineering Tools\nhttps:\/\/neptune.ai\/blog\/feature-engineering-tools","63cc8008":"### In this dataset, feature engineering by TSFresh does not improve the score. This notebook is just to know how to use TSFresh to process the original data. "}}