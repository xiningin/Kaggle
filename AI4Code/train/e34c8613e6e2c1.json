{"cell_type":{"a3388c4a":"code","79eb7489":"code","c73837f8":"code","1860891c":"code","f9582916":"code","a77aca89":"code","ae8e640a":"code","acf549d2":"code","d80e5a82":"code","6658cd28":"code","5fdb62f8":"code","62d03cce":"code","e6c78452":"code","c610ca6d":"code","aac4e171":"code","2a958587":"code","2b423ca2":"code","6a922cf9":"code","9d3ded20":"code","c0aeec13":"code","a6916279":"code","60dbaf87":"code","81728b39":"code","68f2b68f":"code","500092b4":"code","4a6d6515":"code","a17a6304":"code","80d96a31":"code","1300933a":"code","3e015c99":"code","96fb57c1":"code","a2b4b8f7":"markdown","5a4e41e8":"markdown","b5b3c0e2":"markdown","71107fb1":"markdown","a88276d3":"markdown"},"source":{"a3388c4a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","79eb7489":"# \/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv\n# \/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv\n# \/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv\n# \/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\nshops = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\nitems = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\nitem_categories = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\nsales_train = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')","c73837f8":"sales_train['month'] = pd.to_datetime(sales_train['date']).dt.month\nsales_train['year'] = pd.to_datetime(sales_train['date']).dt.year\nsales_train.head()\n","1860891c":"# !pip3 --no-cache-dir install seaborn\nimport seaborn as sns\nsns.set_style(\"darkgrid\")","f9582916":"month_year_group = sales_train.groupby(['month','year']).agg({'item_cnt_day':'sum'}).reset_index()\nsns.lineplot(x=\"month\", y=\"item_cnt_day\",style = \"year\",\n             data=month_year_group,markers=True, dashes=False)","a77aca89":"month_year_group = sales_train.groupby(['month','year']).agg({'item_price':'mean'}).reset_index()\nsns.lineplot(x=\"month\", y=\"item_price\",style = \"year\",\n             data=month_year_group,markers=True, dashes=False)","ae8e640a":"sales_train['total_sale'] = sales_train['item_cnt_day']*sales_train['item_price']\ntotal_sale_group = sales_train.groupby(['month','year'])['total_sale'].sum().reset_index()\n# total_sale_group.head()\nsns.lineplot(x=\"month\", y=\"total_sale\",style=\"year\",\n             data=total_sale_group,markers=True, dashes=True)","acf549d2":"#checking distribution for outliers in item_cnt_day and item_price\nsns.boxplot(x=sales_train['item_price'])\n","d80e5a82":"sns.boxplot(x=sales_train['item_cnt_day'])","6658cd28":"print(\"Shape before removing less then 0 or greater then 45000 item prices\",sales_train.shape)\nsales_train = sales_train[(sales_train.item_price > 0) & (sales_train.item_price < 45000)]\nprint(\"Shape after removing less then 0 or greater then 45000 item prices\",sales_train.shape)","5fdb62f8":"print(\"Shape before removing less then 0 or greater then 800 item_cnt_day\",sales_train.shape)\nsales_train = sales_train[(sales_train.item_cnt_day > 0) & (sales_train.item_cnt_day < 800)]\nprint(\"Shape after removing less then 0 or greater then 800 item_cnt_day\",sales_train.shape)","62d03cce":"#removing shops which are not in test set\nprint(\"Shape before removing shops and items which are not in test set\",sales_train.shape)\nsales_train = sales_train[sales_train.shop_id.isin(test_data.shop_id.unique())]\nsales_train = sales_train[sales_train.item_id.isin(test_data.item_id.unique())]\nprint(\"Shape after removing shops and items which are not in test set\",sales_train.shape)","e6c78452":"sns.boxplot(x=sales_train['item_price'])","c610ca6d":"sns.boxplot(x=sales_train['item_cnt_day'])","aac4e171":"month_year_group = sales_train.groupby(['month','year']).agg({'item_cnt_day':'sum'}).reset_index()\nsns.lineplot(x=\"month\", y=\"item_cnt_day\",style = \"year\",\n             data=month_year_group,markers=True, dashes=False)","2a958587":"month_year_group = sales_train.groupby(['month','year']).agg({'item_price':'mean'}).reset_index()\nsns.lineplot(x=\"month\", y=\"item_price\",style = \"year\",\n             data=month_year_group,markers=True, dashes=False)","2b423ca2":"sales_train['total_sale'] = sales_train['item_cnt_day']*sales_train['item_price']\ntotal_sale_group = sales_train.groupby(['month','year'])['total_sale'].sum().reset_index()\n# total_sale_group.head()\nsns.lineplot(x=\"month\", y=\"total_sale\",style=\"year\",\n             data=total_sale_group,markers=True, dashes=True)","6a922cf9":"sales_train_monthly = sales_train.groupby(['date_block_num','item_id','shop_id']).agg({'item_cnt_day':'sum'}).reset_index()","9d3ded20":"pivoted_train_data = sales_train_monthly.pivot(index=['shop_id','item_id'], columns='date_block_num', values='item_cnt_day').fillna(0).reset_index()","c0aeec13":"pivoted_train_data.shape","a6916279":"test_dataset = pd.merge(pivoted_train_data,test_data,left_on = ['shop_id','item_id'],right_on = ['shop_id','item_id'],how = 'right').fillna(0)","60dbaf87":"test_dataset.shape","81728b39":"test_data.shape","68f2b68f":"test_dataset.drop(['shop_id','item_id','ID'],inplace = True, axis = 1)","500092b4":"#why are we expanding it ?\nX_train = np.expand_dims(test_dataset.values[:,:-1],axis = 2)\ny_train = test_dataset.values[:,-1:]\n\nX_test = np.expand_dims(test_dataset.values[:,1:],axis = 2)\n\n \nprint(X_train.shape,y_train.shape,X_test.shape)","4a6d6515":"# print(X_train.shape,y_train.shape,X_test.shape)","a17a6304":"from keras.models import Sequential\nfrom keras.layers import Dense,Dropout,LSTM\n\nmodel = Sequential()\nmodel.add(LSTM(64,input_shape=(X_train.shape[1],X_train.shape[2])))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1))\n\nmodel.summary()","80d96a31":"model.compile(loss='mse',optimizer='adam',metrics = ['mean_squared_error'])","1300933a":"model.fit(X_train,y_train,batch_size = 32,epochs = 10)","3e015c99":"submit_data = model.predict(X_test)\nsubmission = pd.DataFrame({'id':test_data['ID'],'item_cnt_month':submit_data.ravel()})\nsubmission.clip(0,20)\nsubmission.head()","96fb57c1":"submission.to_csv('test_sub.csv',index = False)","a2b4b8f7":"**Understanding Outliers**\n1. Plotting Boxplot for item_price to understand if some prices are overly priced.\n1. Plotting Boxplot for item_cnt_day to understand if some items were sold in bulk.","5a4e41e8":"**Data Cleaning**","b5b3c0e2":"**Data Understanding after removing outliers**","71107fb1":"**Training the Model**","a88276d3":"# Data Understanding \n* Adding Month and Year to the dataset to understand how the items sales are moving over months in different yeats\n* Plotting sum of item_cnt_day in a month for different years\n* Plotting mean of item_prices in a month for different years\n* Plotting total sales in a month for different years"}}