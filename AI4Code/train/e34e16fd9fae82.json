{"cell_type":{"d985f38f":"code","974a9c80":"code","675ddeb1":"code","f128503f":"code","d53fae8a":"code","80f3c954":"code","10c33991":"code","61f8a423":"code","b817f5db":"code","c009881c":"code","b66454d1":"code","ee7fee0d":"code","10d0f8a5":"code","b7075150":"code","61a33d5a":"code","1af97778":"code","9368759a":"code","a9e97560":"code","e1ca38d1":"code","b7f74aed":"code","e4877322":"code","760f98f6":"code","5b4737c0":"code","d6c063f0":"code","77c68d1b":"code","4c186579":"code","fc81b2a9":"code","66c5e0ff":"code","c48bb425":"code","43c6bda1":"code","5a42d489":"code","2b9843fc":"code","04d043e9":"code","e81555fa":"code","53e945aa":"code","73274c83":"code","c11d87eb":"code","13acb1d9":"code","d73c403e":"code","eb6d22f1":"code","ff03dc08":"code","b93833bf":"code","c09f7d4b":"code","56ef74fa":"code","35118168":"code","23321826":"code","6da74e83":"code","8eae8880":"code","016529cf":"code","14b5b90c":"code","b31723d2":"code","706c9879":"code","b80676cd":"code","d8988584":"code","a7559f2e":"code","6fe81802":"code","a4c720ce":"code","5e619f3c":"code","9050034b":"code","30677176":"code","2a36c2f7":"code","a20c1172":"code","63af6ac5":"code","21d5e811":"code","eb2768b4":"code","4d2888bf":"code","698cf1c7":"code","fcd266d3":"markdown","314b2a99":"markdown"},"source":{"d985f38f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","974a9c80":"df = pd.read_csv(r'\/kaggle\/input\/mushroom-classification\/mushrooms.csv')","675ddeb1":"df.head()","f128503f":"df.info()","d53fae8a":"df.shape","80f3c954":"df['cap-shape'].value_counts()","10c33991":"mapping = {'x':'x','f':'f','k':'others','b':'others','s':'others','c':'others'}\ndf['cap-shape'].replace(mapping,inplace=True)","61f8a423":"df['cap-shape'].value_counts()","b817f5db":"df['cap-surface'].value_counts()","c009881c":"df.drop(df.loc[df['cap-surface']=='g'].index, inplace=True)","b66454d1":"df['cap-surface'].value_counts()","ee7fee0d":"df['cap-color'].value_counts()","10d0f8a5":"mapping = {'n':'n','g':'g','e':'e','y':'y','w':'w','b':'others','u':'others','p':'others','c':'others','r':'others'}\ndf['cap-color'].replace(mapping,inplace=True)","b7075150":"df['cap-color'].value_counts()","61a33d5a":"df['bruises'].value_counts()","1af97778":"df['odor'].value_counts()","9368759a":"mapping = {'n':'n','f':'f','y':'others','s':'others','a':'others','l':'others','p':'others','c':'others','m':'others'}\ndf['odor'].replace(mapping,inplace=True)","a9e97560":"df['odor'].value_counts()","e1ca38d1":"df['gill-spacing'].value_counts()","b7f74aed":"df['gill-size'].value_counts()","e4877322":"df['gill-color'].value_counts()","760f98f6":"mapping = {'b':'b','p':'p','w':'w','n':'n','g':'g','h':'h','u':'others','k':'others','e':'others','y':'others','o':'others','r':'others'}\ndf['gill-color'].replace(mapping,inplace=True)","5b4737c0":"df['gill-color'].value_counts()","d6c063f0":"df['stalk-shape'].value_counts()","77c68d1b":"df['stalk-root'].value_counts()","4c186579":"mapping = {'b':'b','?':'?','e':'e','c':'others','r':'others'}\ndf['stalk-root'].replace(mapping,inplace=True)","fc81b2a9":"df['stalk-root'].value_counts()","66c5e0ff":"df['stalk-surface-above-ring'].value_counts()","c48bb425":"df.drop(df.loc[df['stalk-surface-above-ring']=='y'].index, inplace=True)","43c6bda1":"df['stalk-surface-above-ring'].value_counts()","5a42d489":"df['stalk-surface-below-ring'].value_counts()","2b9843fc":"mapping = {'s':'s','k':'k','f':'others','y':'others'}\ndf['stalk-surface-below-ring'].replace(mapping,inplace=True)","04d043e9":"df['stalk-color-above-ring'].value_counts()","e81555fa":"mapping = {'w':'w','p':'p','g':'g','n':'others','b':'others','o':'others','e':'others','c':'others'}\ndf['stalk-color-above-ring'].replace(mapping,inplace=True)","53e945aa":"df['stalk-color-above-ring'].value_counts()","73274c83":"df['stalk-color-below-ring'].value_counts()","c11d87eb":"mapping = {'w':'w','p':'p','g':'g','n':'others','b':'others','o':'others','e':'others','c':'others','y':'others'}\ndf['stalk-color-below-ring'].replace(mapping,inplace=True)","13acb1d9":"df['stalk-color-below-ring'].value_counts()","d73c403e":"df['veil-type'].value_counts()","eb6d22f1":"df.drop('veil-type',axis=1,inplace=True)","ff03dc08":"df['veil-color'].value_counts()","b93833bf":"mapping = {'w':'w','n':'others','o':'others'}\ndf['veil-color'].replace(mapping,inplace=True)","c09f7d4b":"df['ring-number'].value_counts()","56ef74fa":"mapping = {'o':'o','t':'others','n':'others'}\ndf['ring-number'].replace(mapping,inplace=True)","35118168":"df['ring-type'].value_counts()","23321826":"mapping = {'p':'p','e':'e','l':'l','f':'l','n':'l'}\ndf['ring-type'].replace(mapping,inplace=True)","6da74e83":"df['spore-print-color'].value_counts()","8eae8880":"mapping = {'w':'w','n':'n','k':'k','h':'h','r':'others','u':'others','y':'others','b':'others','o':'others'}\ndf['spore-print-color'].replace(mapping,inplace=True)","016529cf":"df['spore-print-color'].value_counts()","14b5b90c":"df['population'].value_counts()","b31723d2":"mapping = {'v':'v','y':'y','s':'s','n':'others','a':'others','c':'others'}\ndf['population'].replace(mapping,inplace=True)","706c9879":"df['habitat'].value_counts()","b80676cd":"mapping = {'d':'d','g':'g','p':'p','l':'l','u':'others','m':'others','w':'others'}\ndf['habitat'].replace(mapping,inplace=True)","d8988584":"df.columns","a7559f2e":"y = df['class']\nX = df.drop('class',axis=1)","6fe81802":"final_features = pd.get_dummies(X).reset_index(drop=True)\nprint('Features size:', final_features.shape)\nfinal_features.head()","a4c720ce":"from sklearn.model_selection import train_test_split\ntrain_x,test_x,train_y,test_y=train_test_split(final_features,y,test_size=0.3,random_state=600)","5e619f3c":"from xgboost import XGBClassifier\nmodel = XGBClassifier()\nmodel.fit(train_x, train_y)","9050034b":"model.score(train_x,train_y)","30677176":"model.score(test_x,test_y)","2a36c2f7":"y_pred = model.predict(test_x)","a20c1172":"from sklearn.metrics import accuracy_score\naccuracy = accuracy_score(test_y,y_pred)\naccuracy","63af6ac5":"from sklearn.metrics import confusion_matrix\nconf_mat = confusion_matrix(test_y,y_pred)\nconf_mat","21d5e811":"true_positive = conf_mat[0][0]\nfalse_positive = conf_mat[0][1]\nfalse_negative = conf_mat[1][0]\ntrue_negative = conf_mat[1][1]","eb2768b4":"Precision = true_positive\/(true_positive+false_positive)\nPrecision","4d2888bf":"Recall = true_positive\/(true_positive+false_negative)\nRecall","698cf1c7":"F1_Score = 2*(Recall * Precision) \/ (Recall + Precision)\nF1_Score","fcd266d3":"# Have obtained 100% accuracy using XGBoost ","314b2a99":"# XGBoost Classifier"}}