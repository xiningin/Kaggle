{"cell_type":{"ed44ce99":"code","e825a985":"code","7b39cecf":"code","8144f5f1":"code","8ca260ad":"code","2ce203a7":"code","9493a3ba":"code","0d84cca9":"code","fb75c24c":"code","4cc09348":"code","02b96b6d":"code","36135cef":"code","ec0615f4":"code","22f6f725":"code","4ea33971":"code","06eb05aa":"code","6f5c8ea6":"code","0a2eb6ba":"code","41d61e2b":"code","2d6df9c1":"code","1b1d28eb":"code","2a74796c":"code","8cec7ec7":"code","4de2055b":"markdown","d67b446d":"markdown","ef265b91":"markdown","53dcbfbc":"markdown","c0d864d9":"markdown","eaa31090":"markdown","e779f78d":"markdown","9fa96ab2":"markdown","d29f783b":"markdown","1011076c":"markdown","26cb9328":"markdown","82205d6e":"markdown","a3106670":"markdown","ca77f3ac":"markdown","040e7af4":"markdown","1899695e":"markdown"},"source":{"ed44ce99":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e825a985":"df = pd.read_csv('\/kaggle\/input\/covid19-tweets\/covid19_tweets.csv')\ndf.head()","7b39cecf":"df.shape","8144f5f1":"df.isnull().sum()","8ca260ad":"df.dropna(inplace=True)\ndf.head()","2ce203a7":"df.shape","9493a3ba":"df.isnull().sum()","0d84cca9":"#No of unique tweet locations in the dataset.\nlen(df['user_location'].value_counts())","fb75c24c":"tweetRegions = df['user_location'].value_counts().reset_index()\ntweetRegions.sort_values(by='user_location',ascending=False,inplace=True)\ntweetRegions.rename(columns = {'index':'Location', 'user_location':'Count'}, inplace = True)","4cc09348":"#Top 10 Locations with hightest no of tweets\ntweetRegions = tweetRegions[:10]\ntweetRegions","02b96b6d":"fig,ax = plt.subplots(1,1, figsize=(18,8))\nsns.set(style=\"whitegrid\")\nsns.barplot(x=tweetRegions.Location,y=tweetRegions.Count,palette='Blues_r')\nplt.title(\"Tweets vs Location\",fontsize=15)\nplt.xticks(fontsize=12)","36135cef":"dates = df.copy()\ndates['date'] = pd.to_datetime(dates['date'])\ndates['day'] = dates['date'].dt.date\nday_count = dates['day'].value_counts().reset_index()\nday_count.rename(columns = {'index':'Date', 'day':'Count'}, inplace = True)\nday_count.sort_values(by='Date',ascending=True, inplace=True)\nday_count","ec0615f4":"fig,ax = plt.subplots(1,1, figsize=(20,10))\nsns.set(style=\"whitegrid\")\nsns.lineplot(x=day_count.Date,y=day_count.Count,color='orange',marker='o')\nplt.title(\"No. of Tweets By Date\",fontsize=15)\nplt.xticks(rotation=45, fontsize=12)","22f6f725":"day_names={\n    0:'Monday',\n    1:'Tueday',\n    2:'Wednesday',\n    3:'Thursday',\n    4:'Friday',\n    5:'Saturday',\n    6:'Sunday'\n}\ndays = df.copy()\ndays['date'] = pd.to_datetime(days['date'])\ndays['day'] = days['date'].dt.dayofweek\nday_weeks = days['day'].value_counts().reset_index()\nday_weeks.rename(columns = {'index':'Day', 'day':'Count'}, inplace = True)\nday_weeks.sort_values(by='Day',inplace=True)\nday_weeks['Day'] = day_weeks['Day'].apply(lambda d:day_names[d])\nday_weeks['Percent'] = (day_weeks['Count']\/sum(day_weeks['Count'])*100)\nday_weeks","4ea33971":"fig,ax = plt.subplots(1,1, figsize=(10,10))\nsns.set(style=\"whitegrid\")\nsns.barplot(x=day_weeks.Day,y=day_weeks.Percent,palette='nipy_spectral',alpha=0.8)\nplt.title(\"Tweets Vs Day of the Week\",fontsize=15)\nplt.xlabel('Day of the Week')\nplt.ylabel('% of tweets')\nplt.xticks(fontsize=12)","06eb05aa":"#Top 10 HASHTAGS\n\ndef makeList(x):\n    x = str(x)\n    x = x.replace('[', '')\n    x = x.replace(']', '')\n    x = x.split(',')\n    return x\n\ndf_tags = df.copy()\ndf_tags['hashes'] = df_tags['hashtags'].apply(lambda x:makeList(x))\ndf_tags = df_tags.explode('hashes')\ndf_tags['hashes'] = df_tags['hashes'].str.lower()\ndf_tags['hashes'] = df_tags['hashes'].str.replace(\" \",\"\")\ndf_tags['hashes'] = df_tags['hashes'].str.replace(\"'\",\"\")\ntags = df_tags['hashes'].value_counts().reset_index()\ntags = tags[0:10]\ntags.rename(columns = {'index':'HashTag', 'hashes':'Count'}, inplace = True)\ntags","6f5c8ea6":"fig,ax = plt.subplots(1,1, figsize=(10,10))\nsns.set(style=\"whitegrid\")\nsns.barplot(x=tags.HashTag,y=tags.Count,palette='OrRd_r')\nplt.title(\"Top 10 Hashtags with frequency\",fontsize=15)\nplt.xticks(rotation=45,fontsize=12)","0a2eb6ba":"#Sources with atleast 100 tweets\n\nsources = df['source'].value_counts().reset_index()\nsources.rename(columns = {'index':'Source', 'source':'Count'}, inplace = True)\nsources = sources[sources['Count']>=100]\nsources","41d61e2b":"fig,ax = plt.subplots(1,1, figsize=(30,10))\nsns.set(style=\"whitegrid\")\nsns.barplot(x=sources.Source,y=sources.Count,palette='Greens_r')\nplt.title(\"Tweets vs Source\",fontsize=15)\nplt.xticks(rotation=45,fontsize=12)","2d6df9c1":"retweet = df['is_retweet'].value_counts().reset_index()\nretweet.rename(columns={'index':'Retweeted','is_retweet':'count'},inplace=True)\nretweet","1b1d28eb":"#Date of the 1st tweet in dataset\nuser = df.copy()\nuser['user_created'] = pd.to_datetime(user['user_created'])\nuser['date'] = pd.to_datetime(user['date'])\nuser.sort_values(by='date',inplace=True)\nuser['date'].iloc[0:1]","2a74796c":"before = user[user['user_created'] < '2020-07-24']\nafter = user[user['user_created'] >= '2020-07-24']\nlen1 = before.shape[0]\nlen2 = after.shape[0]\nbef_perc = len1\/(len1+len2)\naft_perc = len2\/(len1+len2)\ndata = [['Before COVID-19',bef_perc],['After COVID-19',aft_perc]]\naccounts = pd.DataFrame(data, columns = ['Tag', 'Percent'])\naccounts","8cec7ec7":"fig,ax = plt.subplots(1,1, figsize=(5,10))\nsns.set(style=\"whitegrid\")\nsns.barplot(x=accounts.Tag,y=accounts.Percent,palette='prism',alpha=0.7)\nplt.title(\"Tweets vs Source\",fontsize=15)\nplt.xticks(fontsize=12)","4de2055b":"# EDA TASK 3 - Tweet Count on Day of the Week","d67b446d":"# EDA Task 1 - Tweets vs Location","ef265b91":"**I hope you liked this Notebook. Pls let me know in the comments if there are any additional tasks I can accomplish or ways in which I can improve my current EDA.\nThanks in Advanced!**","53dcbfbc":"**Therefore all the given tweets were not retweeted**","c0d864d9":"**Therefore the 1st date is 24th July 2020. Now we will find accounts created before and after this date**","eaa31090":"# EDA TASK 2 - Distribution of tweets by Date","e779f78d":"We have to remove the null values as we cannot impute or fill coloumns with string values!","9fa96ab2":"# EDA TASK 6 - No. of ReTweets","d29f783b":"# EDA TASK 5 - Tweet Distribution over Source of Tweet","1011076c":"# **Taking input data and removing Null values[](http:\/\/)**","26cb9328":"# EDA Tasks performed in this notebook: \n* Distribution of Tweets by Geographical Location\n* Distribution of Tweets by date\n* Distribution of Tweets by day of the week\n* Top Hastags used in the tweets\n* Distribution of Tweets by source of Tweet\n* No of retweeted tweets\n* Tweets with accounts created before and after COVID-19","82205d6e":"# THANK YOU!","a3106670":"![](http:\/\/images.unsplash.com\/photo-1592499879835-3a1691ab26be?ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80)","ca77f3ac":"# EDA TASK 4 - Top #HashTags","040e7af4":"**In this notebook ,we perform different Exploratory Data Analysis tasks to understand the dataset better. The tasks are accompanied by graphical representations for easy understanding. If you like this notebook, please give it a UpVote, CHEERS :)**","1899695e":"# EDA TASK 7 - Accounts created before and after the First Tweet in Dataset"}}