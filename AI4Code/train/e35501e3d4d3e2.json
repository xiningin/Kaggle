{"cell_type":{"5b3afa51":"code","8823bce3":"code","1d3f7be5":"code","38e65836":"code","c9fa4c66":"code","fb518d8a":"code","c60d3d47":"markdown","5f079d26":"markdown","ff17e466":"markdown","c57b6b35":"markdown","7ebf15f1":"markdown","cab4ad2a":"markdown"},"source":{"5b3afa51":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport pylab as pl\n\n#from scipy.stats import norm\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# reading calendar.csv...\n#df_calendar = pd.read_csv('\/kaggle\/input\/airbnb-nyc\/calendar.csv')\n#df_calendar = df_calendar.head(1000)\n#df_calendar['price'] = df_calendar['price'].str.slice(start=1)\n#df_calendar['price'] = df_calendar['price'].str.replace(',', '')\n#df_calendar['price'] = pd.to_numeric(df_calendar['price'], errors='ignore')\n#df_calendar['adjusted_price'] = df_calendar['adjusted_price'].str.slice(start=1)\n#df_calendar['adjusted_price'] = pd.to_numeric(df_calendar['adjusted_price'], errors='ignore')\n#print(df_calendar.describe())\n\n# reading reviews.csv...\n#df_reviews  = pd.read_csv('\/kaggle\/input\/airbnb-nyc\/reviews.csv')\n#print(df_reviews.describe())\n\n#df = pd.merge(df_listings, df_calendar, left_on='id', right_on='listing_id', how='left')\n#print(df.describe())\n\n# reading listings.csv...\ndf_listings = pd.read_csv('\/kaggle\/input\/airbnb-nyc\/listings.csv')\n#print(df_listings.describe())\n\n# tratando dados...\n# 1. pre\u00e7o\ndf_listings['price'] = df_listings['price'].str.slice(start=1) # remove o $ inicial\ndf_listings['price'] = df_listings['price'].str.replace(',', '') # remove o separador de milhar\ndf_listings['price'] = pd.to_numeric(df_listings['price'], errors='ignore')\n\n# 2. trocando 't' e 'f' (true \/ false) por 1 e 0\nfor s in ['host_is_superhost','host_has_profile_pic','host_identity_verified',\n          'has_availability','instant_bookable']:\n    df_listings[s] = df_listings[s].map(dict(t=1, f=0))\n\n\nh = df_listings['price'].sort_values()\nfit = stats.norm.pdf(h, np.mean(h), np.std(h))  #this is a fitting indeed\npl.plot(h,fit,'-o')\n#pl.hist(h,normed=True)      #use this to draw histogram of your data\n\nprint(\"M\u00e9dia: %.2f\" % np.mean(h))\nprint(\"Desvio Padr\u00e3o: %.2f\" % np.std(h))\nprint(\"Moda: %.2f\" % stats.mode(h).mode[0]) # moda: valor mais frequente em uma lista\nprint(\"Mediana: %.2f\" % np.median(h)) # mediana: valor central em uma lista\npl.show()                   \n","8823bce3":"#print(df_listings.shape)\ndf_filtered = df_listings.loc[df_listings['price']!=0]\n#print(df_filtered.shape)\ndf_filtered = df_filtered.loc[df_listings['price']<3000]\n#print(df_filtered.shape)\n\nh = df_filtered['price'].sort_values()\nfit = stats.norm.pdf(h, np.mean(h), np.std(h))  #this is a fitting indeed\npl.plot(h,fit,'-o')\n#pl.hist(h,normed=True)      #use this to draw histogram of your data\nprint(\"M\u00e9dia: %.2f\" % np.mean(h))\nprint(\"Desvio Padr\u00e3o: %.2f\" % np.std(h))\nprint(\"Moda: %.2f\" % stats.mode(h).mode[0]) # moda: valor mais frequente em uma lista\nprint(\"Mediana: %.2f\" % np.median(h)) # mediana: valor central em uma lista\npl.show()                  ","1d3f7be5":"data = df_filtered['price']\n\nfig = plt.figure(figsize =(7, 5))\n\nplt.boxplot(data) # Creating plot\n\nplt.show() # show plot","38e65836":"df_bronx     = df_filtered.loc[df_filtered['neighbourhood_group_cleansed']=='Bronx']\ndf_brooklyn  = df_filtered.loc[df_filtered['neighbourhood_group_cleansed']=='Brooklyn']\ndf_manhattan = df_filtered.loc[df_filtered['neighbourhood_group_cleansed']=='Manhattan']\ndf_queens    = df_filtered.loc[df_filtered['neighbourhood_group_cleansed']=='Queens']\ndf_staten    = df_filtered.loc[df_filtered['neighbourhood_group_cleansed']=='Staten Island']\n\ndata = [df_bronx['price'], df_brooklyn['price'], df_manhattan['price'], \n        df_queens['price'], df_staten['price']]\n \nfig = plt.figure(figsize =(7, 5))\nax = fig.add_axes([0, 0, 1, 1]) # Creating axes instance\nbp = ax.boxplot(data) # Creating plot\nplt.show() # show plot\n\nfor s in ['Bronx', 'Brooklyn', 'Manhattan','Queens','Staten Island']:    \n    h = df_filtered.loc[df_filtered['neighbourhood_group_cleansed']==s]['price']\n    print(\"\\n*** %s ***\" %s)\n    print(\"M\u00e9dia: %.2f\" % np.mean(h))\n    print(\"Desvio Padr\u00e3o: %.2f\" % np.std(h))\n    print(\"Moda: %.2f\" % stats.mode(h).mode[0]) # moda: valor mais frequente em uma lista\n    print(\"Mediana: %.2f\" % np.median(h)) # mediana: valor central em uma lista\n","c9fa4c66":"plt.matshow(df_filtered.corr())\nplt.show()\n","fb518d8a":"data = df_filtered[['price','host_is_superhost','accommodates',\n                    'number_of_reviews','review_scores_rating']]\n\nplt.matshow(data.corr())\nplt.show()\n\ndata = data.rename(columns = {'price': '0-price',\n                              'host_is_superhost': '1-superh',\n                              'accommodates': '2-acomm.', \n                              'number_of_reviews': '3-numrev',\n                              'review_scores_rating': '4-rating'}, inplace = False)\nprint(data.corr())","c60d3d47":"**Trabalho de Ci\u00eancia de Dados - Petrobras**\n\nAssunto: An\u00e1lise Explorat\u00f3ria de Dados. Analisando as bases de dados do Airbnb, cidade de Nova York.\n\nInicialmente, analisarei a base 'listings' apenas, dado que n\u00e3o tenho muita experi\u00eancia e ela possui informa\u00e7\u00f5es suficientes para uma an\u00e1lise inicial (cheguei a fazer um merge\/join dessa base com a de 'calendar', mas o resultado ficou muito grande\/pesado).\n\nPrimeira an\u00e1lise: pre\u00e7o. Tracei uma normal da lista de pre\u00e7os e o resultado segue abaixo.","5f079d26":"**A base 'listings' tem** ao todo 36724 registros. O trecho a seguir permite eliminar os pre\u00e7os com valor nulo (zero) e outliers. Os outliers s\u00e3o os pre\u00e7os maiores de 3000 (julgamento meu, que carece de justificativa cient\u00edfica).\n\nS\u00e3o 38 registros com valor zero e 44 maiores que 3000.\n\n","ff17e466":"**Categorizando por bairros...** Bronx(1), Brooklyn(2), Manhattan(3), Queens(4) e Staten Island(5). \nNota-se que os alugu\u00e9is mais caros est\u00e3o em Manhattan e o mais baixos nos bairros de Bronx e Queens.","c57b6b35":"**Criando um boxplot para** enxergar os quartis... Nota-se que os valores se concentram na faixa entre 0 e 400 (primeiro e terceiro quartis) e que h\u00e1 uma dispers\u00e3o grande de valores a partir desse ponto.","7ebf15f1":"**Trabalhando com correla\u00e7\u00e3o...** Primeramente, correlaciono todas as vari\u00e1veis do dataframe listings, sem tratamento. A fun\u00e7\u00e3o corr() ignora as vari\u00e1veis n\u00e3o-num\u00e9ricas. A figura apresenta alguns setores mais claros, o que sugere haver correla\u00e7\u00f5es.","cab4ad2a":"**Para uma an\u00e1lise mais localizada,** seleciono um conjunto menor de vari\u00e1veis. \n\nA figura demonstra, por exemplo, uma correla\u00e7\u00e3o entre as vari\u00e1veis 0 e 2 - pre\u00e7o (price) e o n\u00famero de pessoas que o im\u00f3vel pode acomodar (accommodates) - o que parece fazer sentido... \n\nNota-se tamb\u00e9m correla\u00e7\u00e3o entre as vari\u00e1veis 1 e 3 (host_is_superhost e number_of_reviews) indicando que um n\u00famero alto de avalia\u00e7\u00f5es pode ser importante para o propriet\u00e1rio se tornar um superhost (n\u00e3o conhe\u00e7o bem as regras do Airbnb mas acho que um propriet\u00e1rio s\u00f3 se torna superhost se tiver muitas avalia\u00e7\u00f5es (e boas)). "}}