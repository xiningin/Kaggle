{"cell_type":{"c2fb426a":"code","1737f508":"code","7efcae37":"code","f33f2915":"code","7994437d":"code","de61f055":"code","9d6363ba":"code","1f75e378":"code","8ddd37b2":"code","94e9da3b":"code","482c5b4d":"code","396db0d3":"code","0f0923c4":"code","dc907c06":"code","a0fc3ff4":"code","71b17717":"code","ea4ff848":"code","95321dad":"code","26349689":"code","8aeb0f23":"code","90a2f096":"code","0232f2e5":"code","7c1fd5a5":"code","9d8e14ae":"code","a46739a8":"code","3c0c59ea":"code","5516695c":"code","fd9de5e8":"code","9c3c2868":"code","e96ca2b3":"code","91623b51":"code","c541851d":"code","e776ca57":"code","34b1f27f":"code","2b8d0b17":"code","e0e6472a":"code","255abb34":"code","7d8cecae":"code","949327e5":"code","6152139b":"code","0d116e60":"code","9a111b32":"code","51adb1c8":"code","2bcc8eaa":"code","c277e522":"code","14b668e8":"code","336d943e":"code","ebce1c34":"code","66c3771b":"markdown","19687536":"markdown","513c71d0":"markdown","342f2cda":"markdown","8e12ef4d":"markdown","7d9e5849":"markdown","a25e1d1e":"markdown","21982ea8":"markdown","52b8a50c":"markdown","286c5723":"markdown","ece870e6":"markdown","f507822e":"markdown","8e81a505":"markdown"},"source":{"c2fb426a":"from collections import Counter\nimport os\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport pandas as pd\nfrom PIL import Image\nimport plotly.express as px\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\npd.set_option('mode.chained_assignment',  None)\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1737f508":"netflix_logo = np.array(Image.open(\"\/kaggle\/input\/images\/netflix_PNG9.png\"))","7efcae37":"df = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\ndf_movie = df[df['type'] == 'Movie']\ndf_tv = df[df['type'] == 'TV Show']","f33f2915":"df","7994437d":"df_movie2 = df_movie.copy()\ntmp = pd.DataFrame(df_movie['listed_in'].str.split(',').explode().str.strip())\ntmp = tmp.merge(df_movie.drop('listed_in', axis=1), how='left', left_index=True, right_index=True)\ntmp = tmp.groupby(['listed_in', 'release_year']).count().reset_index()\nfig = px.line(tmp, x='release_year', y='show_id', color='listed_in', markers=False, title='\uc601\ud654 \uc7a5\ub974 line \uadf8\ub798\ud504')\nfig.update_layout(\n    title=\"\uc5f0\ub3c4\ubcc4 \uc601\ud654 \uc7a5\ub974 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Genre\",\n)\nfig.show()","de61f055":"df_movie2 = df_movie.copy()\ntmp = pd.DataFrame(df_movie['listed_in'].str.split(',').explode().str.strip())\ntmp = tmp.merge(df_movie.drop('listed_in', axis=1), how='left', left_index=True, right_index=True)\ntmp = tmp.groupby(['listed_in', 'release_year']).count().reset_index()\ntmp = tmp[tmp['release_year'] > 2000]\nfig = px.line(tmp, x='release_year', y='show_id', color='listed_in', markers=False, title='2000\ub144 \uc774\ud6c4 \uac1c\ubd09\ud55c \uc601\ud654 \uc7a5\ub974 line \uadf8\ub798\ud504')\nfig.update_layout(\n    title=\"2000\ub144 \uc774\ud6c4 \uc5f0\ub3c4\ubcc4 \uc601\ud654 \uc7a5\ub974 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Genre\",\n)\nfig.update_yaxes(title='\uc601\ud654 \uc7a5\ub974')\nfig.update_xaxes(title='\uac1c\ubd09 \uc5f0\ub3c4')\nfig.show()","9d6363ba":"df_movie2 = df_movie.copy()\ntmp = pd.DataFrame(df_movie['listed_in'].str.split(',').explode().str.strip())\ntmp = tmp.merge(df_movie.drop('listed_in', axis=1), how='left', left_index=True, right_index=True)\ntmp = tmp.groupby(['listed_in', 'release_year']).count().reset_index()\nfig = px.bar(tmp, x=\"release_year\", y=\"show_id\", color=\"listed_in\")\nfig.update_layout(\n    title=\"\uc5f0\ub3c4\ubcc4 \uc601\ud654 \uc7a5\ub974 \ub204\uc801 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Genre\",\n)\nfig.show()","1f75e378":"df_movie2 = df_movie.copy()\ntmp = pd.DataFrame(df_movie['listed_in'].str.split(',').explode().str.strip())\ntmp = tmp.merge(df_movie.drop('listed_in', axis=1), how='left', left_index=True, right_index=True)\ntmp = tmp.groupby(['listed_in', 'release_year']).count().reset_index()\nfig = px.area(tmp, x=\"release_year\", y=\"show_id\", color=\"listed_in\")\nfig.update_layout(\n    title=\"\uc5f0\ub3c4\ubcc4 \uc601\ud654 \uc7a5\ub974 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Genre\",\n)\nfig.show()","8ddd37b2":"df_movie2 = df_movie.copy()\ntmp = pd.DataFrame(df_movie['listed_in'].str.split(',').explode().str.strip())\ntmp = tmp.merge(df_movie.drop('listed_in', axis=1), how='left', left_index=True, right_index=True)\ntmp = tmp.groupby(['listed_in', 'release_year']).count().groupby(level=0).cumsum().reset_index()\nfig = px.bar(tmp, x=\"release_year\", y=\"show_id\", color=\"listed_in\")\nfig.update_layout(\n    title=\"\uc5f0\ub3c4\ubcc4 \uc7a5\ub974\ubcc4 \uc601\ud654 \uc7a5\ub974 \ucd1d \ub204\uc801 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Genre\",\n)\nfig.show()","94e9da3b":"df_movie2 = df_movie.copy()\ntmp = pd.DataFrame(df_movie['listed_in'].str.split(',').explode().str.strip())\ntmp = tmp.merge(df_movie.drop('listed_in', axis=1), how='left', left_index=True, right_index=True)\ntmp = tmp.groupby(['listed_in', 'release_year']).count().groupby(level=0).cumsum().reset_index()\nfig = px.area(tmp, x=\"release_year\", y=\"show_id\", color=\"listed_in\", line_group=\"listed_in\")\nfig.update_layout(\n    title=\"\uc5f0\ub3c4\ubcc4 \uc7a5\ub974\ubcc4 \uc601\ud654 \uc7a5\ub974 \ucd1d \ub204\uc801 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Genre\",\n)\nfig.show()","482c5b4d":"df_movie2 = df_movie.copy()\ntmp = pd.DataFrame(df_movie['listed_in'].str.split(',').explode().str.strip())\ntmp = tmp.merge(df_movie.drop('listed_in', axis=1), how='left', left_index=True, right_index=True)\ntmp = tmp.groupby(['listed_in', 'release_year']).count().groupby(level=0).cumsum().reset_index()\nfig = px.line(tmp, x='release_year', y='show_id', color='listed_in', markers=False)\nfig.update_layout(\n    title=\"\uc7a5\ub974\ubcc4 \uc601\ud654 \uc7a5\ub974 \ub204\uc801 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Genre\",\n)\nfig.show()","396db0d3":"df_tv2 = df_tv.copy()\ntmp = pd.DataFrame(df_tv2['listed_in'].str.split(',').explode().str.strip())\ntmp = tmp.merge(df_tv2.drop('listed_in', axis=1), how='left', left_index=True, right_index=True)\ntmp = tmp.groupby(['listed_in', 'release_year']).count().reset_index()\nfig = px.line(tmp, x='release_year', y='show_id', color='listed_in', markers=False)\nfig.update_layout(\n    title=\"\uc5f0\ub3c4\ubcc4 TV Show \uc7a5\ub974 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Genre\",\n)\nfig.show()","0f0923c4":"df_tv2 = df_tv.copy()\ntmp = pd.DataFrame(df_tv2['listed_in'].str.split(',').explode().str.strip())\ntmp = tmp.merge(df_tv2.drop('listed_in', axis=1), how='left', left_index=True, right_index=True)\ntmp = tmp.groupby(['listed_in', 'release_year']).count().reset_index()\ntmp = tmp[tmp['release_year'] > 2000]\nfig = px.line(tmp, x='release_year', y='show_id', color='listed_in', markers=False)\nfig.update_layout(\n    title=\"2000\ub144 \uc774\ud6c4 \uc5f0\ub3c4\ubcc4 TV Show \uc7a5\ub974 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Genre\",\n)\nfig.show()","dc907c06":"df_tv2 = df_tv.copy()\ntmp = pd.DataFrame(df_tv2['listed_in'].str.split(',').explode().str.strip())\ntmp = tmp.merge(df_tv2.drop('listed_in', axis=1), how='left', left_index=True, right_index=True)\ntmp = tmp.groupby(['listed_in', 'release_year']).count().reset_index()\nfig = px.bar(tmp, x=\"release_year\", y=\"show_id\", color=\"listed_in\")\nfig.update_layout(\n    title=\"\uc5f0\ub3c4\ubcc4 TV Show \uc7a5\ub974 \ub204\uc801 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Genre\",\n)\nfig.show()","a0fc3ff4":"df_tv2 = df_tv.copy()\ntmp = pd.DataFrame(df_tv2['listed_in'].str.split(',').explode().str.strip())\ntmp = tmp.merge(df_tv2.drop('listed_in', axis=1), how='left', left_index=True, right_index=True)\ntmp = tmp.groupby(['listed_in', 'release_year']).count().reset_index()\nfig = px.area(tmp, x=\"release_year\", y=\"show_id\", color=\"listed_in\")\nfig.update_layout(\n    title=\"\uc5f0\ub3c4\ubcc4 TV Show \uc7a5\ub974 \ub204\uc801 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Genre\",\n)\nfig.show()","71b17717":"df_tv2 = df_tv.copy()\ntmp = pd.DataFrame(df_tv2['listed_in'].str.split(',').explode().str.strip())\ntmp = tmp.merge(df_tv2.drop('listed_in', axis=1), how='left', left_index=True, right_index=True)\ntmp = tmp.groupby(['listed_in', 'release_year']).count().groupby(level=0).cumsum().reset_index()\nfig = px.bar(tmp, x=\"release_year\", y=\"show_id\", color=\"listed_in\")\nfig.update_layout(\n    title=\"\uc5f0\ub3c4\ubcc4 \uc7a5\ub974\ubcc4 TV Show \uc7a5\ub974 \ucd1d \ub204\uc801 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Genre\",\n)\nfig.show()","ea4ff848":"df_tv2 = df_tv.copy()\ntmp = pd.DataFrame(df_tv2['listed_in'].str.split(',').explode().str.strip())\ntmp = tmp.merge(df_tv2.drop('listed_in', axis=1), how='left', left_index=True, right_index=True)\ntmp = tmp.groupby(['listed_in', 'release_year']).count().groupby(level=0).cumsum().reset_index()\nfig = px.area(tmp, x=\"release_year\", y=\"show_id\", color=\"listed_in\", line_group=\"listed_in\")\nfig.update_layout(\n    title=\"\uc5f0\ub3c4\ubcc4 \uc7a5\ub974\ubcc4 TV Show \uc7a5\ub974 \ucd1d \ub204\uc801 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Genre\",\n)\nfig.show()","95321dad":"df_tv2 = df_tv.copy()\ntmp = pd.DataFrame(df_tv2['listed_in'].str.split(',').explode().str.strip())\ntmp = tmp.merge(df_tv2.drop('listed_in', axis=1), how='left', left_index=True, right_index=True)\ntmp = tmp.groupby(['listed_in', 'release_year']).count().groupby(level=0).cumsum().reset_index()\nfig = px.line(tmp, x='release_year', y='show_id', color='listed_in', markers=False)\nfig.update_layout(\n    title=\"\uc7a5\ub974\ubcc4 TV Show \uc7a5\ub974 \ub204\uc801 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Genre\",\n)\nfig.show()","26349689":"df_movie2 = df_movie.copy()\ndf_movie2 = df_movie2.groupby(['rating', 'release_year']).count().reset_index()\ndf_movie2 = df_movie2.drop([0, 1, 2])\nfig = px.line(df_movie2, x='release_year', y='show_id', color='rating', markers=False)\nfig.update_layout(\n    title=\"\uc601\ud654 \uc5f0\ub3c4\ubcc4 \uc5f0\ub839\ub4f1\uae09 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Rating\",\n)\nfig.show()","8aeb0f23":"df_movie2 = df_movie.copy()\ndf_movie2 = df_movie2.groupby(['rating', 'release_year']).count().reset_index()\ndf_movie2 = df_movie2.drop([0, 1, 2])\nfig = px.bar(df_movie2, x=\"release_year\", y=\"show_id\", color=\"rating\")\nfig.update_layout(\n    title=\"\uc601\ud654 \uc5f0\ub3c4\ubcc4 \uc5f0\ub839\ub4f1\uae09 \ub204\uc801 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Rating\",\n)\nfig.show()","90a2f096":"df_movie2 = df_movie.copy()\ndf_movie2 = df_movie2.groupby(['rating', 'release_year']).count().reset_index()\ndf_movie2 = df_movie2.drop([0, 1, 2])\nfig = px.area(df_movie2, x=\"release_year\", y=\"show_id\", color=\"rating\")\nfig.update_layout(\n    title=\"\uc5f0\ub3c4\ubcc4 \uc5f0\ub839\ub4f1\uae09 \ub204\uc801 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Rating\",\n)\nfig.show()","0232f2e5":"df_movie2 = df_movie.copy()\ndf_movie2 = df_movie2.groupby(['rating', 'release_year']).count().groupby(level=0).cumsum().reset_index()\ndf_movie2 = df_movie2.drop([0, 1, 2])\nfig = px.bar(df_movie2, x=\"release_year\", y=\"show_id\", color=\"rating\")\nfig.update_layout(\n    title=\"\uc601\ud654 \uc5f0\ub3c4\ubcc4 \uc5f0\ub839\ub4f1\uae09 \ub204\uc801 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Rating\",\n)\nfig.show()","7c1fd5a5":"df_movie2 = df_movie.copy()\ndf_movie2 = df_movie2.groupby(['rating', 'release_year']).count().groupby(level=0).cumsum().reset_index()\ndf_movie2 = df_movie2.drop([0, 1, 2])\nfig = px.area(df_movie2, x=\"release_year\", y=\"show_id\", color=\"rating\")\nfig.update_layout(\n    title=\"\uc601\ud654 \uc5f0\ub3c4\ubcc4 \uc5f0\ub839\ub4f1\uae09 \ub204\uc801 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Rating\",\n)\nfig.show()","9d8e14ae":"df_movie2 = df_movie.copy()\ndf_movie2 = df_movie2.groupby(['rating', 'release_year']).count().groupby(level=0).cumsum().reset_index()\ndf_movie2 = df_movie2.drop([0, 1, 2])\nfig = px.line(df_movie2, x=\"release_year\", y=\"show_id\", color=\"rating\")\nfig.update_layout(\n    title=\"\uc5f0\ub3c4\ubcc4 \uc5f0\ub839\ub4f1\uae09 \ub204\uc801 \ubd84\ud3ec\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Genre\",\n)\nfig.show()","a46739a8":"df_tv2 = df_tv.copy()\ndf_tv2 = df_tv2.groupby(['rating', 'release_year']).count().reset_index()\nfig = px.line(df_tv2, x='release_year', y='show_id', color='rating', markers=False)\nfig.update_layout(\n    title=\"\uc5f0\ub3c4\ubcc4 TV Show \ub4f1\uae09 \uadf8\ub798\ud504\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Rating\",\n)\nfig.show()","3c0c59ea":"df_tv2 = df_tv.copy()\ndf_tv2 = df_tv2.groupby(['rating', 'release_year']).count().reset_index()\nfig = px.bar(df_tv2, x='release_year', y='show_id', color='rating')\nfig.update_layout(\n    title=\"\uc5f0\ub3c4\ubcc4 TV Show \ub4f1\uae09 \ub204\uc801 \uadf8\ub798\ud504\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Rating\",\n)\nfig.show()","5516695c":"df_tv2 = df_tv.copy()\ndf_tv2 = df_tv2.groupby(['rating', 'release_year']).count().reset_index()\nfig = px.area(df_tv2, x='release_year', y='show_id', color='rating')\nfig.update_layout(\n    title=\"\uc5f0\ub3c4\ubcc4 TV Show \ub4f1\uae09 \ub204\uc801 \uadf8\ub798\ud504\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Rating\",\n)\nfig.show()","fd9de5e8":"df_tv2 = df_tv.copy()\ndf_tv2 = df_tv2.groupby(['rating', 'release_year']).count().groupby(level=0).cumsum().reset_index()\nfig = px.bar(df_tv2, x='release_year', y='show_id', color='rating')\nfig.update_layout(\n    title=\"\uc5f0\ub3c4\ubcc4 \uc7a5\ub974\ubcc4 TV Show \uc5f0\ub839 \ub4f1\uae09 \ub204\uc801 \uadf8\ub798\ud504\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Rating\",\n)\nfig.show()","9c3c2868":"df_tv2 = df_tv.copy()\ndf_tv2 = df_tv2.groupby(['rating', 'release_year']).count().groupby(level=0).cumsum().reset_index()\nfig = px.area(df_tv2, x='release_year', y='show_id', color='rating')\nfig.update_layout(\n    title=\"\uc5f0\ub3c4\ubcc4 \uc7a5\ub974\ubcc4 TV Show \uc5f0\ub839 \ub4f1\uae09 \ub204\uc801 \uadf8\ub798\ud504\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Rating\",\n)\nfig.show()","e96ca2b3":"df_tv2 = df_tv.copy()\ndf_tv2 = df_tv2.groupby(['rating', 'release_year']).count().groupby(level=0).cumsum().reset_index()\nfig = px.line(df_tv2, x='release_year', y='show_id', color='rating')\nfig.update_layout(\n    title=\"\uc7a5\ub974\ubcc4 TV Show \uc5f0\ub839 \ub4f1\uae09 \uadf8\ub798\ud504\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Counts\",\n    legend_title=\"Rating\",\n)\nfig.show()","91623b51":"# \uacb0\uce21\uce58 \ucc98\ub9ac\n# duration \uac12\uc774 rating \uac12\uc5d0 \uc800\uc7a5\ub418\uc5b4 \uc788\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc74c\ndf_movie[df_movie['duration'].isna()]","c541851d":"df_movie.loc[5541, 'duration'] = '74 min'\ndf_movie.loc[5794, 'duration'] = '84 min'\ndf_movie.loc[5813, 'duration'] = '66 min'","e776ca57":"movie_time = pd.DataFrame(df_movie['duration'].str.replace(' min', '').astype(int))","34b1f27f":"fig = px.histogram(movie_time, x=\"duration\", title='\uc601\ud654\uc2dc\uac04 \ud788\uc2a4\ud1a0\uadf8\ub7a8')\nfig.update_layout(\n    title=\"\uc601\ud654\uc2dc\uac04 \ud788\uc2a4\ud1a0\uadf8\ub7a8\",\n    xaxis_title=\"Duration\",\n    yaxis_title=\"Counts\",\n)\nfig.show()","2b8d0b17":"time_interval = pd.DataFrame(pd.cut(movie_time['duration'], [0,30,60,90,120,150,180,210,max(movie_time['duration'])]).value_counts()).rename(columns={'duration':'counts'}).sort_index().reset_index()\ntime_interval['index'] = time_interval['index'].astype(str)\nlabel = []\nfor idx in time_interval['index']:\n    idx = idx.replace('(', '').replace(']', '').split(', ')\n    label.append(f'{idx[0]}\ubd84 ~ {idx[1]}\ubd84')\ntime_interval['index'] = label\nfig = px.pie(time_interval, values='counts', names='index', title='\uc601\ud654\uc2dc\uac04 Pie \uadf8\ub798\ud504')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","e0e6472a":"time_interval = pd.DataFrame(pd.cut(movie_time['duration'], [0,60,90,120,max(movie_time['duration'])]).value_counts()).rename(columns={'duration':'counts'}).sort_index().reset_index()\ntime_interval['index'] = time_interval['index'].astype(str)\nlabel = []\nfor idx in time_interval['index']:\n    idx = idx.replace('(', '').replace(']', '').split(', ')\n    label.append(f'{idx[0]}\ubd84 ~ {idx[1]}\ubd84')\ntime_interval['index'] = label\nfig = px.pie(time_interval, values='counts', names='index', title='\uc601\ud654\uc2dc\uac04 Pie \uadf8\ub798\ud504')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","255abb34":"movie_genre = pd.DataFrame(df_movie['listed_in'].str.split(',').explode().str.strip())\nfig = px.pie(movie_genre['listed_in'].value_counts().reset_index(), values='listed_in', names='index', title='\uc601\ud654 \uc7a5\ub974 \ubd84\ud3ec Pie \uadf8\ub798\ud504')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","7d8cecae":"tv_genre = pd.DataFrame(df_tv['listed_in'].str.split(',').explode().str.strip())\nfig = px.pie(tv_genre['listed_in'].value_counts().reset_index(), values='listed_in', names='index', title='TV Show \uc7a5\ub974 \ubd84\ud3ec Pie \uadf8\ub798\ud504')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","949327e5":"df = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\ndf_movie = df[df['type'] == 'Movie']\ndf_tv = df[df['type'] == 'TV Show']","6152139b":"movie_genre = pd.DataFrame(df_movie['listed_in'].str.split(',').explode().str.strip())\nmovie_genre_description = movie_genre.merge(df['description'], how='left', left_index=True, right_index=True)\nmovie_genre_description.head()","0d116e60":"movie_words = pd.DataFrame(movie_genre_description['description'].str.replace(\"'\", \" \").str.lower().str.strip().str.split().explode())\nmovie_words = movie_genre.merge(movie_words['description'], how='left', left_index=True, right_index=True)\nmovie_words = movie_words['description'].value_counts()\nstop_words = list(STOPWORDS) + ['s', '\u2013', '\u2014']\nfor sw in stop_words:\n    if sw in movie_words.index:\n        movie_words = movie_words.drop(sw)\n\nmovie_words = pd.DataFrame(movie_words)\nmovie_words = movie_words[movie_words['description'] > 500]\nmovie_words = movie_words.reset_index().rename(columns = {'index' : 'word'})\nfig = px.bar(movie_words, x=movie_words['word'], y=movie_words['description'], title='\uc601\ud654 \uc18c\uac1c\uc5d0 \ub4f1\uc7a5\ud558\ub294 \uc0c1\uc704 \ub2e8\uc5b4 bar \uadf8\ub798\ud504')\nfig.update_yaxes(title='counts')\nfig.show()\n\n","9a111b32":"# \ucd94\uac00 \uace0\ub824\uc0ac\ud56d: https:\/\/stackoverflow.com\/questions\/47143461\/python-wordcloud-color-by-term-frequency\n# \ub9ce\uc744\uc218\ub85d \uc9c4\ud558\uac8c \uace0\ub824\n\n# https:\/\/www.w3schools.com\/colors\/colors_picker.asp\ndef color_func(word, font_size, position,orientation,random_state=None, **kwargs):\n    return(\"hsl({:d},{:d}%, {:d}%)\".format(np.random.randint(0,1),np.random.randint(100,101),np.random.randint(35,70)))","51adb1c8":"for genre in sorted(list(movie_genre['listed_in'].unique())):\n    plt.figure(figsize=(10,10))\n    words = ' '.join(movie_genre_description[movie_genre_description['listed_in'] == genre]['description'].str.replace(\"'\", \" \").str.lower().to_list())\n    stop_words = STOPWORDS.update([chr(w) for w in range(ord('a'), ord('z')+1)] + ['find', 'must', 'take', 'one', 'two'])\n    wc = WordCloud(mode='RGB', background_color='rgb(0, 0, 0)', width=480, height=480, stopwords=stop_words, color_func=color_func, mask=netflix_logo)\n    wc.generate(str(words))\n    image = Image.fromarray(wc.to_array())\n    plt.figtext(.5, .9, f'Movie: {genre} wordcloud', fontsize=20, ha='center') # x,y \uc88c\ud45c\ube44\uc728(0~1)\n    plt.axis('off')\n    plt.imshow(image)\n    plt.savefig(f'Movie - {genre}.png', dpi=300)\n    \n    ","2bcc8eaa":"tv_genre = pd.DataFrame(df_tv['listed_in'].str.split(',').explode().str.strip())\ntv_genre_description = tv_genre.merge(df['description'], how='left', left_index=True, right_index=True)\ntv_genre_description.head()","c277e522":"tv_words = pd.DataFrame(tv_genre_description['description'].str.replace(\"'\", \" \").str.lower().str.strip().str.split().explode())\ntv_words = tv_genre.merge(tv_words['description'], how='left', left_index=True, right_index=True)\ntv_words = tv_words['description'].value_counts()\nstop_words = list(STOPWORDS) + ['s', '\u2013', '\u2014']\nfor stop_w in stop_words:\n    if stop_w in tv_words.index:\n        tv_words = tv_words.drop(stop_w)\n\ntv_words = pd.DataFrame(tv_words)\ntv_words = tv_words[tv_words['description'] > 500]\ntv_words = tv_words.reset_index().rename(columns = {'index' : 'word'})\nfig = px.bar(tv_words, x=tv_words['word'], y=tv_words['description'])\nfig.show()","14b668e8":"for genre in sorted(list(tv_genre['listed_in'].unique()))[:10]:\n    plt.figure(figsize=(10,10))\n    words = ' '.join(tv_genre_description[tv_genre_description['listed_in'] == genre]['description'].str.replace(\"'\", \" \").str.lower().to_list())\n    stop_words = STOPWORDS.update([chr(w) for w in range(ord('a'), ord('z')+1)] + ['find', 'must', 'take', 'one', 'two', 'three'])\n    wc = WordCloud(mode='RGB', background_color='rgb(0, 0, 0)', width=480, height=480, stopwords=stop_words, color_func=color_func, mask=netflix_logo)\n    wc.generate(str(words))\n    image = Image.fromarray(wc.to_array())\n    plt.figtext(0.5, .9, f'TV Show: {genre} wordcloud', fontsize=20, ha='center') # x,y \uc88c\ud45c\ube44\uc728(0~1)\n    plt.axis('off')\n    plt.imshow(image)\n    plt.savefig(f'TV Show - {genre}.png', dpi=300)\n    ","336d943e":"for genre in sorted(list(tv_genre['listed_in'].unique()))[10:]:\n    plt.figure(figsize=(10,10))\n    words = ' '.join(tv_genre_description[tv_genre_description['listed_in'] == genre]['description'].str.replace(\"'\", \" \").str.lower().to_list())\n    stop_words = STOPWORDS.update([chr(w) for w in range(ord('a'), ord('z')+1)] + ['find', 'must', 'take', 'one', 'two', 'three'])\n    wc = WordCloud(mode='RGB', background_color='rgb(0, 0, 0)', width=480, height=480, stopwords=stop_words, color_func=color_func, mask=netflix_logo)\n    wc.generate(str(words))\n    image = Image.fromarray(wc.to_array())\n    plt.figtext(0.5, .9, f'TV Show: {genre} wordcloud', fontsize=20, ha='center') # x,y \uc88c\ud45c\ube44\uc728(0~1)\n    plt.axis('off')\n    plt.imshow(image)\n    plt.savefig(f'TV Show - {genre}.png', dpi=300)\n    ","ebce1c34":"import os\nimport zipfile\n \nzip_file = zipfile.ZipFile('wordcloud-images.zip', 'w')\n \nfor folder, subfolders, files in os.walk('.\/'):\n    for file in files:\n        if file.endswith('.png'):\n            zip_file.write(os.path.join(folder, file), os.path.relpath(os.path.join(folder,file), '.\/'), compress_type = zipfile.ZIP_DEFLATED) \nzip_file.close()","66c3771b":"# \uc601\ud654\uc640 TV show\ubcc4 \uc7a5\ub974 \ubd84\ud3ec \ucd94\ucd9c","19687536":"# TV show \ub204\uc801 \uadf8\ub798\ud504","513c71d0":"# \uc601\ud654 \uc5f0\ub839\ub4f1\uae09 \ub204\uc801 \uadf8\ub798\ud504","342f2cda":"## tv \uc7a5\ub974\ubcc4 \uc6cc\ub4dc\ud074\ub77c\uc6b0\ub4dc","8e12ef4d":"## \uc601\ud654 \uc7a5\ub974\ubcc4 \uc6cc\ub4dc\ud074\ub77c\uc6b0\ub4dc","7d9e5849":"# TV Show \uc5f0\ub839\ub4f1\uae09 \uadf8\ub798\ud504","a25e1d1e":"## \uc6cc\ub4dc\ud074\ub77c\uc6b0\ub4dc","21982ea8":"# TV show \uadf8\ub798\ud504","52b8a50c":"# TV Show \uc5f0\ub839\ub4f1\uae09 \ub204\uc801 \uadf8\ub798\ud504","286c5723":"## \uc601\ud654 \ub7ec\ub2dd\ud0c0\uc784 \ud788\uc2a4\ud1a0\uadf8\ub7a8 & \ud30c\uc774\ucc28\ud2b8","ece870e6":"# \uc601\ud654 \uc7a5\ub974\ubcc4 \uadf8\ub798\ud504","f507822e":"# \uc601\ud654 \uc5f0\ub839\ub4f1\uae09 \uadf8\ub798\ud504","8e81a505":"# \uc601\ud654 \uc7a5\ub974\ubcc4 \ub204\uc801 \uadf8\ub798\ud504"}}