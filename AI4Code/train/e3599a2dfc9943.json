{"cell_type":{"284f1dae":"code","9caaea64":"code","aca1c732":"code","b6a96cd7":"code","d46a66b1":"code","cdccb398":"code","e4127c38":"code","e96eedda":"code","1d3b5156":"code","9f3c3295":"code","2e195d28":"code","9d1cc825":"code","1de238c3":"code","29d0072f":"code","1f5fa229":"code","69e75da2":"markdown","2880400e":"markdown","73944404":"markdown","a05ad568":"markdown","07462654":"markdown","27ab4765":"markdown"},"source":{"284f1dae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import LabelEncoder\nfrom matplotlib import pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost\nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import roc_auc_score\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9caaea64":"path = '..\/input\/cat-in-the-dat\/'\ntrain = pd.read_csv(path+'train.csv')\ntest = pd.read_csv(path+'test.csv')\nsubmission = pd.read_csv(path+'sample_submission.csv')","aca1c732":"train.head()","b6a96cd7":"train.describe()","d46a66b1":"target_var = train['target']\ntrain.drop(['id', 'target'], axis=1, inplace=True)\ntest.drop(['id'], axis=1, inplace=True)","cdccb398":"encoder = LabelEncoder()\ncategorical_features = train.columns.tolist()\nfor each in categorical_features:\n    train[each] = encoder.fit_transform(train[each])\n    \ntest_cat_features = test.columns.tolist()\nfor col in test_cat_features:\n    test[col] = encoder.fit_transform(test[col])","e4127c38":"# feature scaling\nscaler = StandardScaler()\ntrain = scaler.fit_transform(train)\ntest = scaler.transform(test)","e96eedda":"xgb_clf = xgboost.XGBClassifier(n_estimators=500, \n                            n_jobs=-1, \n                            subsample=0.7,\n                            max_depth=7,\n                            reg_alpha=0.2,\n                            reg_lambda=1, \n                            random_state=1, \n                            learning_rate=0.1,\n                            metric = 'auc',\n                            tree_method= 'gpu_hist', \n                            objective=\"binary:logistic\",\n                            verbose=100,\n                            early_stopping_rounds=200)","1d3b5156":"X = train\ny = target_var\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.25, random_state=1)","9f3c3295":"roc_scorer = make_scorer(roc_auc_score)","2e195d28":"xgb_clf.fit(X_train, y_train)\npredictions = xgb_clf.predict_proba(X_val)[:,1]","9d1cc825":"pipeline_rf = Pipeline([\n    ('model', RandomForestClassifier(max_depth=11, n_jobs=-1, random_state=1))\n])\nparam_grid_rf = {'model__n_estimators': [75, 100, 150, 200, 250, 300]\n                 }\n\ngrid_rf = GridSearchCV(estimator=pipeline_rf, param_grid=param_grid_rf,\n                       scoring=roc_scorer, n_jobs=-1,\n                       cv=3, verbose=1, return_train_score=False)\n\ngrid_rf.fit(X_train, y_train)","1de238c3":"# xgboost evaluation\nscore = roc_auc_score(y_val,predictions)\nprint(score)","29d0072f":"# randomforest evaluation\npreds = grid_rf.predict_proba(X_val)[:,1]\nroc = roc_auc_score(y_val, preds)\nprint(roc)","1f5fa229":"submission['target'] = xgb_clf.predict_proba(test)[:,1]\nsubmission.to_csv('submission.csv', index=False)","69e75da2":"## label_encoding categorical features","2880400e":"## Data loading and analysis","73944404":"## feature importances","a05ad568":"# Exploring the LabelEncoder method","07462654":"## Modelling and training","27ab4765":"## Generating submission file"}}