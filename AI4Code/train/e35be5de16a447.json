{"cell_type":{"7c3b2a9e":"code","184025ea":"code","bad66a98":"code","633bf25f":"code","088fd97d":"code","8c8157bc":"code","53a58d9a":"code","b27c84e7":"code","62240c38":"code","08a9a043":"code","e8fb3deb":"code","1f282916":"code","64d8e8be":"code","c507ebac":"code","716cf8f9":"code","f59fcc32":"code","b27c86c1":"code","88b0b30c":"code","c92cfe10":"code","bbd767fa":"code","22af9837":"code","1de575eb":"code","c8b28841":"code","6bf70849":"code","fd1e14d4":"code","079fce27":"code","5ef0fd8d":"code","33a63d80":"code","eb29c9c8":"code","b3797c8a":"code","94c2c10f":"code","d5af05bd":"code","4c742913":"code","8c2fb96a":"code","fa9b65ce":"code","e8671a7a":"code","d88a6f82":"code","b9700dfe":"code","2df0251b":"code","da485d5c":"code","c7cc1f11":"code","58b1c359":"code","1e6afbcf":"code","c44454a8":"code","0c680efb":"code","e397fc7f":"code","ccaa31dc":"code","b5d32af2":"code","b5720c4b":"code","d77178df":"code","0f26435d":"code","d929c065":"code","7ec06b4c":"code","182ed20e":"code","b3692818":"code","645172e2":"code","249ad140":"markdown","11d472fb":"markdown","6d88025d":"markdown"},"source":{"7c3b2a9e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","184025ea":"%matplotlib inline\n","bad66a98":"from IPython.display import Image \npil_img = Image(filename='\/kaggle\/input\/asl-rgb-depth-fingerspelling-spelling-it-out\/dataset5\/C\/s\/color_18_0100.png')\n\ndisplay(pil_img)","633bf25f":"\/kaggle\/input\/asl-rgb-depth-fingerspelling-spelling-it-out\/dataset5\/C\/a\/color_0_0002.png","088fd97d":"# from PIL import Image  \n  \n# # Opens a image in RGB mode  \n# im = Image.open('\/kaggle\/input\/asl-rgb-depth-fingerspelling-spelling-it-out\/dataset5\/B\/t\/color_19_0014.png')  \n  \n# # Size of the image in pixels (size of orginal image)  \n# # (This is not mandatory)  \n# newsize = (300, 300) \n# im1 = im1.resize(newsize) \n# # Shows the image in image viewer  \n# im1.show()  ","8c8157bc":"# import cv2\n# im1 =cv2.imread('\/kaggle\/input\/asl-rgb-depth-fingerspelling-spelling-it-out\/dataset5\/C\/a\/color_0_0002.png',0)\n# im2 = cv2.resize(im1,(64,64))\n# cv2.imwrite('test1.png',im2)\n# pil_img = Image(filename='test1.png')\n\n# display(pil_img)","53a58d9a":"#TO_DO\n#1 prepare the X_train , X_test \n\nimport os\n\npath, dirs, files = next(os.walk(\"\/kaggle\/input\/asl-rgb-depth-fingerspelling-spelling-it-out\/dataset5\/A\/b\"))\nfile_count = len(files)\n\nfile_count","b27c84e7":"for filename in glob.glob(os.path.join(directory_a, '*.png')):\n    im1 =cv2.imread(filename,0)\n    print(im1.shape)","62240c38":"from skimage.feature import hog\ndef giveMeFeatures(image):\n    res = hog(image, orientations=8, pixels_per_cell=(16,16),cells_per_block=(4, 4),block_norm= 'L2')\n#     =  hog(img, orientations=9, pixels_per_cell=(6, 6),cells_per_block=(2, 2),block_norm='L1', visualize=False,transform_sqrt=False,feature_vector=True)\n    return res\n\n\n    \n","08a9a043":"import glob\nimport cv2\ndirectory_a = '\/kaggle\/input\/asl-rgb-depth-fingerspelling-spelling-it-out\/dataset5\/A\/a'\ndirectory_b = '\/kaggle\/input\/asl-rgb-depth-fingerspelling-spelling-it-out\/dataset5\/A\/b'\n\nX = []\ny = []\n\nfor filename in glob.glob(os.path.join(directory_a, '*.png')):\n    im1 =cv2.imread(filename,0)\n    im1 = cv2.resize(im1,(64,64))\n    features = giveMeFeatures(im1)\n    X.append(features)\n    y.append(0)\n\nfor filename in glob.glob(os.path.join(directory_b, '*.png')):\n    im1 =cv2.imread(filename,0)\n    im1 = cv2.resize(im1,(64,64))\n    features = giveMeFeatures(im1)\n    X.append(features)\n    y.append(1)\n    \nX = np.array(np.float32(X))\ny = np.array(np.float32(y))\n\n\nrand = np.random.RandomState(321)\nshuffle = rand.permutation(len(X))\nX = X[shuffle]\ny = y[shuffle]\n    \n    \n","e8fb3deb":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)","1f282916":"#With Hyper Parameters Tuning\n#2-3,SVM\n#importing modules\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import svm\n#making the instance\nmodel=svm.SVC()\n#Hyper Parameters Set\nparams = {'C': [2,3,4,5,6,7,8,9,10,11,12], \n          'kernel': ['rbf']}\n#Making models with hyper parameters sets\nmodel1 = GridSearchCV(model, param_grid=params, n_jobs=-1)\n#Learning\nmodel1.fit(X_train,y_train)\n#The best hyper parameters set\nprint(\"Best Hyper Parameters:\\n\",model1.best_params_)\n#Prediction\nprediction=model1.predict(X_test)\n","64d8e8be":"from sklearn.metrics import classification_report,accuracy_score\nclassification_report(y_test, prediction)","c507ebac":"print(\"Accuracy: \"+str(accuracy_score(y_test, prediction)))\n# model1.score(X_test,y_test)","716cf8f9":"def testModel(path):\n    im1 =cv2.imread(path,0)\n    im1 = cv2.resize(im1,(64,64))\n    features=[]\n    features.append(giveMeFeatures(im1))\n    features = np.array(np.float32(features))    \n    res =model1.predict(features)\n    if(res[0]==0):\n        return 'fist'\n    else:\n        return 'palm'\n        \n    return \n    ","f59fcc32":"testModel('\/kaggle\/input\/testdata2\/palm2.jpg')","b27c86c1":"testModel('\/kaggle\/input\/testdata2\/palm1.jpg')","88b0b30c":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt \nimport cv2 as cv\n\nfrom keras.layers import Conv2D, Input, LeakyReLU, Dense, Activation, Flatten, Dropout, MaxPool2D\nfrom keras import models\nfrom keras.optimizers import Adam,RMSprop \nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nimport pickle\n\n%matplotlib inline","c92cfe10":"model = models.Sequential()","bbd767fa":"# # Block 1\n# model.add(Conv2D(32,3, padding  =\"same\",input_shape=(28,28,1)))\n# model.add(LeakyReLU())\n# model.add(Conv2D(32,3, padding  =\"same\"))\n# model.add(LeakyReLU())\n# model.add(MaxPool2D(pool_size=(2,2)))\n# model.add(Dropout(0.25))\n\n# # Block 2\n# model.add(Conv2D(64,3, padding  =\"same\"))\n# model.add(LeakyReLU())\n# model.add(Conv2D(64,3, padding  =\"same\"))\n# model.add(LeakyReLU())\n# model.add(MaxPool2D(pool_size=(2,2)))\n# model.add(Dropout(0.25))\n\n# model.add(Flatten())\n\n# model.add(Dense(256,activation='relu'))\n# model.add(Dense(32,activation='relu'))\n# model.add(Dense(2,activation=\"sigmoid\"))","22af9837":"model.add(Conv2D(75 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu' , input_shape = (28,28,1)))\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(50 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(25 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Flatten())\nmodel.add(Dense(units = 512 , activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units = 2 , activation = 'softmax'))\nmodel.compile(optimizer = 'adam' , loss = 'categorical_crossentropy' , metrics = ['accuracy'])\nmodel.summary()","1de575eb":"initial_lr = 0.001\nloss = \"sparse_categorical_crossentropy\"\nmodel.compile(Adam(lr=initial_lr), loss=loss ,metrics=['accuracy'])\nmodel.summary()","c8b28841":"import glob\nimport cv2\ndirectory_a = '\/kaggle\/input\/asl-rgb-depth-fingerspelling-spelling-it-out\/dataset5\/A\/a'\ndirectory_b = '\/kaggle\/input\/asl-rgb-depth-fingerspelling-spelling-it-out\/dataset5\/A\/b'\ndirectory_5 = '\/kaggle\/input\/sign-language-for-numbers\/Sign Language for Numbers\/5'\ndirectory_s = '\/kaggle\/input\/asl-rgb-depth-fingerspelling-spelling-it-out\/dataset5\/A\/s'\n\nADirectories = []\nBDirectories = []\n\nADirectories.append(directory_a)\nADirectories.append(directory_s)\nBDirectories.append(directory_b)\nBDirectories.append(directory_5)\n\n\nX = []\ny = []\ntypes = ['*.png', '*.jpg']\ncountA=0\ncountB=0\nfor typ in types:\n    for directory in ADirectories:\n        for filename in glob.glob(os.path.join(directory, typ)):\n            im1 =cv2.imread(filename,0)\n            im1 = cv2.resize(im1,(28,28))\n            X.append(im1)\n            y.append([1,0])\n            countA+=1\n    for directory in BDirectories:\n        for filename in glob.glob(os.path.join(directory, typ)):\n            im1 =cv2.imread(filename,0)\n            im1 = cv2.resize(im1,(28,28))\n            X.append(im1)\n            y.append([0,1])\n            countB+=1\nprint('A: ', countA)\nprint('B: ', countB)\n","6bf70849":"X = np.asarray(X)\ny = np.asarray(y)","fd1e14d4":"X=X\/255","079fce27":"y.shape","5ef0fd8d":"# y = y.reshape(4527,1)\nX = X.reshape(4527, 28, 28,1)","33a63d80":"y[2].shape","eb29c9c8":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)","b3797c8a":"from sklearn.preprocessing import LabelBinarizer\nlabel_binarizer = LabelBinarizer()\ny_train = label_binarizer.fit_transform(y_train)\ny_test = label_binarizer.fit_transform(y_test)","94c2c10f":"# With data augmentation to prevent overfitting\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","d5af05bd":"epochs = 20\nbatch_size = 256\n# history_1 = model.fit(X_train,y_train,batch_size=batch_size,epochs=epochs,validation_data=[X_test,y_test])\nhistory_1 = model.fit(datagen.flow(X_train,y_train, batch_size = 128) ,epochs = 20 , validation_data = (X_test, y_test))","4c742913":"# Diffining Figure\nf = plt.figure(figsize=(20,7))\n\n#Adding Subplot 1 (For Accuracy)\nf.add_subplot(121)\n\nplt.plot(history_1.epoch,history_1.history['accuracy'],label = \"accuracy\") # Accuracy curve for training set\nplt.plot(history_1.epoch,history_1.history['val_accuracy'],label = \"val_accuracy\") # Accuracy curve for validation set\n\nplt.title(\"Accuracy Curve\",fontsize=18)\nplt.xlabel(\"Epochs\",fontsize=15)\nplt.ylabel(\"Accuracy\",fontsize=15)\nplt.grid(alpha=0.3)\nplt.legend()\n\n#Adding Subplot 1 (For Loss)\nf.add_subplot(122)\n\nplt.plot(history_1.epoch,history_1.history['loss'],label=\"loss\") # Loss curve for training set\nplt.plot(history_1.epoch,history_1.history['val_loss'],label=\"val_loss\") # Loss curve for validation set\n\nplt.title(\"Loss Curve\",fontsize=18)\nplt.xlabel(\"Epochs\",fontsize=15)\nplt.ylabel(\"Loss\",fontsize=15)\nplt.grid(alpha=0.3)\nplt.legend()\n\nplt.show()","8c2fb96a":"def testCNNModel(path,model):\n    im1 =cv2.imread(path,0)\n    im1 = cv2.resize(im1,(28,28))\n    t = []\n    t.append(im1.reshape(28,28))\n    t = np.asarray(t)\n    t = t.reshape(1,28,28,1)\n    res =model.predict(t)\n    return res\n        \n    return ","fa9b65ce":"testCNNModel('\/kaggle\/input\/testdata2\/fist1.jpg',model)","e8671a7a":"label_binarizer.transform(np.asarray([0]))","d88a6f82":"import glob\nimport cv2\ndirectory_5 = '\/kaggle\/input\/sign-language-for-numbers\/Sign Language for Numbers\/5'\ndirectory_2 = '\/kaggle\/input\/sign-language-for-numbers\/Sign Language for Numbers\/2'\ndirectory_unk = '\/kaggle\/input\/sign-language-for-numbers\/Sign Language for Numbers\/unknown'\n\n\n\n\nX = []\ny = []\ntypes = ['*.png', '*.jpg']\nfor typ in types:\n        for filename in glob.glob(os.path.join(directory_2, typ)):\n            im1 =cv2.imread(filename,0)\n            im1 = cv2.resize(im1,(64,64))\n            X.append(im1)\n            y.append(0)\n        for filename in glob.glob(os.path.join(directory_5, typ)):\n            im1 =cv2.imread(filename,0)\n            im1 = cv2.resize(im1,(64,64))\n            X.append(im1)\n            y.append(1)\n        for filename in glob.glob(os.path.join(directory_unk, typ)):\n            im1 =cv2.imread(filename,0)\n            im1 = cv2.resize(im1,(64,64))\n            X.append(im1)\n            y.append(2)\n            \n\n","b9700dfe":"X = np.asarray(X)\ny = np.asarray(y)\n\n\n","2df0251b":"X = X.reshape(-1,64,64,1)\nX.shape","da485d5c":"IMG_SIZE=64\nimport tensorflow as tf\nfrom tensorflow.keras.datasets import cifar10\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import TensorBoard\nimport time\n\nimport pickle\n\nNAME = \"Numbers-CNN-Model-{}\".format(str(time.ctime())) # Model Name\n\n\nX = X\/255.0\n\nmodel = Sequential()\n\nmodel.add(Conv2D(16, (2,2), input_shape=X.shape[1:], activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\nmodel.add(Conv2D(32, (3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(3, 3), strides=(3, 3), padding='same'))\nmodel.add(Conv2D(64, (5,5), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(5, 5), strides=(5, 5), padding='same'))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(3, activation='softmax')) # size must be equal to number of classes i.e. 11\n\ntensorboard = TensorBoard(log_dir=\"\/kaggle\/working\/logs\/{}\".format(NAME))\n\nmodel.compile(loss='sparse_categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\nmodel.fit(X, y, batch_size=32, epochs=10, validation_split=0.2, callbacks=[tensorboard])","c7cc1f11":"def testCNNModel(path,model):\n    im1 =cv2.imread(path,0)\n    im1 = cv2.resize(im1,(64,64))\n    t = []\n    t.append(im1.reshape(64,64))\n    t = np.asarray(t)\n    t = t.reshape(1,64,64,1)\n    res =model.predict(t)\n    return res\n        \n    return ","58b1c359":"testCNNModel('\/kaggle\/input\/testdata2\/two14.jpg',model)","1e6afbcf":"import glob\nimport cv2\ndirectory_1 = '\/kaggle\/input\/3shapesdataset\/resized\/1'\ndirectory_2 = '\/kaggle\/input\/3shapesdataset\/resized\/2'\ndirectory_3 = '\/kaggle\/input\/3shapesdataset\/resized\/3'\n#directory_unk = '\/kaggle\/input\/sign-language-for-numbers\/Sign Language for Numbers\/unknown'\n\n\n\n\nX = []\ny = []\ntypes = ['*.png', '*.jpg']\nfor typ in types:\n        for filename in glob.glob(os.path.join(directory_1, typ)):\n            im1 =cv2.imread(filename,0)\n            im1 = cv2.resize(im1,(64,64))\n            X.append(im1)\n            y.append(0)\n        for filename in glob.glob(os.path.join(directory_2, typ)):\n            im1 =cv2.imread(filename,0)\n            im1 = cv2.resize(im1,(64,64))\n            X.append(im1)\n            y.append(1)\n        for filename in glob.glob(os.path.join(directory_3, typ)):\n            im1 =cv2.imread(filename,0)\n            im1 = cv2.resize(im1,(64,64))\n            X.append(im1)\n            y.append(2)\n#         for filename in glob.glob(os.path.join(directory_unk, typ)):\n#             im1 =cv2.imread(filename,0)\n#             im1 = cv2.resize(im1,(64,64))\n#             X.append(im1)\n#             y.append(3)\n            \n            \n\n","c44454a8":"X = np.asarray(X)\ny = np.asarray(y)\n\n\n","0c680efb":"X.shape","e397fc7f":"X = X.reshape(-1,64,64,1)\nX.shape","ccaa31dc":"IMG_SIZE=64\nimport tensorflow as tf\nfrom tensorflow.keras.datasets import cifar10\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import TensorBoard\nimport time\n\nimport pickle\n\nNAME = \"Numbers-CNN-Model-{}\".format(str(time.ctime())) # Model Name\n\n\nX = X\/255.0\n\nmodel = Sequential()\n\nmodel.add(Conv2D(16, (2,2), input_shape=X.shape[1:], activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\nmodel.add(Conv2D(32, (3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(3, 3), strides=(3, 3), padding='same'))\nmodel.add(Conv2D(64, (5,5), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(5, 5), strides=(5, 5), padding='same'))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(3, activation='softmax')) # size must be equal to number of classes i.e. 11\n\ntensorboard = TensorBoard(log_dir=\"\/kaggle\/working\/logs\/{}\".format(NAME))\n\nmodel.compile(loss='sparse_categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\nmodel.fit(X, y, batch_size=32, epochs=10, validation_split=0.2, callbacks=[tensorboard])","b5d32af2":"def testCNNModel(path,model):\n    im1 =cv2.imread(path,0)\n    im1 = cv2.resize(im1,(64,64))\n    t = []\n    t.append(im1.reshape(64,64))\n    t = np.asarray(t)\n    t = t.reshape(1,64,64,1)\n    res =model.predict(t)\n    return res\n        \n    return ","b5720c4b":"testCNNModel('\/kaggle\/input\/testdata2\/fist5.jpg',model)","d77178df":"print('asd')\n","0f26435d":"import glob\nimport cv2\ndirectory_1 = '\/kaggle\/input\/3shapesdatasetunk\/All Data\/1'\ndirectory_2 = '\/kaggle\/input\/3shapesdatasetunk\/All Data\/2'\ndirectory_3 = '\/kaggle\/input\/3shapesdatasetunk\/All Data\/3'\n# directory_4 = '\/kaggle\/input\/sign-language-for-numbers\/Sign Language for Numbers\/4'\n# directory_5 = '\/kaggle\/input\/sign-language-for-numbers\/Sign Language for Numbers\/5'\ndirectory_unk = '\/kaggle\/input\/3shapesdatasetunk\/All Data\/unknown'\n#directory_unk = '\/kaggle\/input\/sign-language-for-numbers\/Sign Language for Numbers\/unknown'\n\n\n\n\nX = []\ny = []\ntypes = ['*.png', '*.jpg']\nfor typ in types:\n        for filename in glob.glob(os.path.join(directory_1, typ)):\n            im1 =cv2.imread(filename,0)\n            im1 = cv2.resize(im1,(64,64))\n            X.append(im1)\n            y.append(0)\n        print('finished')\n        for filename in glob.glob(os.path.join(directory_2, typ)):\n            im1 =cv2.imread(filename,0)\n            im1 = cv2.resize(im1,(64,64))\n            X.append(im1)\n            y.append(1)\n        print('finished')\n        for filename in glob.glob(os.path.join(directory_3, typ)):\n            im1 =cv2.imread(filename,0)\n            im1 = cv2.resize(im1,(64,64))\n            X.append(im1)\n            y.append(2)\n        print('finished')\n        for filename in glob.glob(os.path.join(directory_unk, typ)):\n            im1 =cv2.imread(filename,0)\n            im1 = cv2.resize(im1,(64,64))\n            X.append(im1)\n            y.append(3)\n        print('finished')\n            \n            \n\n","d929c065":"X = np.asarray(X)\ny = np.asarray(y)\n\n\n","7ec06b4c":"X = X.reshape(-1,64,64,1)\nX.shape","182ed20e":"IMG_SIZE=64\nimport tensorflow as tf\nfrom tensorflow.keras.datasets import cifar10\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import TensorBoard\nimport time\n\nimport pickle\n\nNAME = \"Numbers-CNN-Model-{}\".format(str(time.ctime())) # Model Name\n\n\nX = X\/255.0\n\nmodel = Sequential()\n\nmodel.add(Conv2D(16, (2,2), input_shape=X.shape[1:], activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\nmodel.add(Conv2D(32, (3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(3, 3), strides=(3, 3), padding='same'))\nmodel.add(Conv2D(64, (5,5), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(5, 5), strides=(5, 5), padding='same'))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(4, activation='softmax')) # size must be equal to number of classes i.e. 11\n\ntensorboard = TensorBoard(log_dir=\"\/kaggle\/working\/logs\/{}\".format(NAME))\n\nmodel.compile(loss='sparse_categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\nmodel.fit(X, y, batch_size=32, epochs=10, validation_split=0.2, callbacks=[tensorboard])","b3692818":"def testCNNModel(path,model):\n    im1 =cv2.imread(path,0)\n    im1 = cv2.resize(im1,(64,64))\n    t = []\n    t.append(im1.reshape(64,64))\n    t = np.asarray(t)\n    t = t.reshape(1,64,64,1)\n    res =model.predict(t)\n    return res\n        \n    return ","645172e2":"testCNNModel('\/kaggle\/input\/testdata2\/two4.jpg',model)","249ad140":"# # # Third model with our data (FULL)","11d472fb":"# # # Third model with our data","6d88025d":"# Third model "}}