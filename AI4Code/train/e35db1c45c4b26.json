{"cell_type":{"a328a605":"code","945c60c5":"code","1bb5c3c2":"code","2979bcf6":"code","47b13cb4":"code","ac8f6b0e":"code","d138d386":"code","88edecb8":"code","288501b4":"code","87230265":"code","e37e33f1":"code","8f3485a1":"code","9cf7da8f":"code","b038a23e":"code","0c8ea229":"code","9ea3d517":"code","418da2b6":"code","dfa8632e":"code","608b20ef":"code","d2d92b01":"code","e0623668":"code","2c1b7ae8":"code","71ee9418":"code","aa46b95b":"code","fe0e38fe":"code","0c0e087d":"code","d68c56dc":"code","483bbb47":"code","2a1d2937":"code","f2550b6d":"code","8c7f49f9":"code","b5b2a0ea":"code","9eeed313":"code","b1f65d60":"code","3b424030":"code","106c3588":"code","af2259cb":"code","bb5fda61":"code","cbf8b44e":"code","5ee3675d":"code","53e4ca69":"code","c77a2bf4":"code","d8bc8edd":"code","7eab77f4":"code","07e8e029":"markdown","a6e00229":"markdown","987cb2f8":"markdown"},"source":{"a328a605":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math","945c60c5":"df = pd.read_csv('..\/input\/predict-sales-championship\/train.csv')\ntest = pd.read_csv('..\/input\/predict-sales-championship\/test.csv')","1bb5c3c2":"sub = pd.read_csv('..\/input\/predict-sales-championship\/submission.csv')","2979bcf6":"df.head()","47b13cb4":"df.Item_Type.value_counts()","ac8f6b0e":"df.info()","d138d386":"plt.figure(figsize=(12,10))\nsns.pairplot(df,kind='scatter',hue='Outlet_Size')","88edecb8":"plt.figure(figsize=(12,10))\nsns.pairplot(df,kind='scatter',hue='Outlet_Location_Type')","288501b4":"plt.figure(figsize=(10,10))\nsns.boxplot(y=df.Item_W,hue=df.Outlet_Location_Type)","87230265":"sns.countplot(x=df.Item_Type)","e37e33f1":"sns.histplot(x=df.Item_MRP)","8f3485a1":"sns.histplot(x=df.Item_W)","9cf7da8f":"df['MRP_Fraction'] = df.Item_MRP.apply(lambda x: math.modf(x)[0])","b038a23e":"def clusteryears(x):\n    if x <= 1997: \n        return 0 \n    else: \n        return 1","0c8ea229":"df['cluster_years'] = df.Outlet_Year.apply(lambda x: clusteryears(x))","9ea3d517":"df['Item_W_log_transform'] = np.log1p(df['Item_W'])","418da2b6":"crosstable = pd.crosstab(df['Outlet_Size'],df['Outlet_Location_Type'])\ncrosstable","dfa8632e":"df['Outlet_Size']=df['Outlet_Size'].astype('category')\ndf['Outlet_Location_Type'] = df['Outlet_Location_Type'].astype('category')","608b20ef":"df['Outlet_Size']=df['Outlet_Size'].cat.codes\ndf['Outlet_Location_Type']=df['Outlet_Location_Type'].cat.codes","d2d92b01":"df.Outlet_Year.unique()","e0623668":"df1 = df[['Item_W_log_transform', 'Item_Type', 'Item_MRP','Outlet_ID',\n       'Outlet_Year', 'Outlet_Size', 'Outlet_Location_Type','MRP_Fraction','cluster_years', 'Sales']]","2c1b7ae8":"dummies = pd.get_dummies(df['Item_Type'])","71ee9418":"df2 = pd.concat([df1,dummies],axis='columns')","aa46b95b":"df2.drop(['Item_Type'],axis=1,inplace=True)","fe0e38fe":"dummies_outlet_id = pd.get_dummies(df['Outlet_ID'])","0c0e087d":"df3 = pd.concat([df2,dummies_outlet_id],axis='columns')\ndf3.drop(['Outlet_ID'],axis=1,inplace=True)","d68c56dc":"df3.head()","483bbb47":"df3 = df3[['Item_W_log_transform', 'Item_MRP', 'Outlet_Year', 'Outlet_Size',\n       'Outlet_Location_Type','MRP_Fraction','cluster_years','Baking Goods', 'Breads', 'Breakfast',\n       'Canned', 'Dairy', 'Frozen Foods', 'Fruits and Vegetables',\n       'Hard Drinks', 'Health and Hygiene', 'Household', 'Meat', 'Others',\n       'Seafood', 'Snack Foods', 'Soft Drinks', 'Starchy Foods','OUT013',\n       'OUT018', 'OUT035', 'OUT046', 'OUT049','Sales']]","2a1d2937":"from sklearn.preprocessing import MinMaxScaler\nscalar = MinMaxScaler()\ndf3[['Item_W_log_transform','Item_MRP','MRP_Fraction']] = scalar.fit_transform(df3[['Item_W_log_transform','Item_MRP','MRP_Fraction']].values)","f2550b6d":"X = df3.iloc[:,:-1]\ny = df3['Sales'].values","8c7f49f9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test=train_test_split(X.values, y, test_size=0.2,random_state=42,shuffle=True)","b5b2a0ea":"from sklearn.metrics import mean_squared_error\nfrom sklearn import svm, tree, linear_model, neighbors, naive_bayes, ensemble, discriminant_analysis, gaussian_process\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor","9eeed313":"X_train.shape","b1f65d60":"model = XGBRegressor(objective='reg:squarederror',n_estimators=170,max_depth=3,booster='gbtree',min_child_weight=2)\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)","3b424030":"import math\nmath.sqrt(mean_squared_error(y_test,preds))","106c3588":"test.head()","af2259cb":"test['MRP_Fraction'] = test.Item_MRP.apply(lambda x: math.modf(x)[0])\ntest['cluster_years'] = test.Outlet_Year.apply(lambda x: clusteryears(x))\ntest['Item_W_log_transform'] = np.log1p(test['Item_W'])","bb5fda61":"test['Outlet_Size']=test['Outlet_Size'].astype('category')\ntest['Outlet_Location_Type'] = test['Outlet_Location_Type'].astype('category')\ntest['Outlet_Size']=test['Outlet_Size'].cat.codes\ntest['Outlet_Location_Type']=test['Outlet_Location_Type'].cat.codes","cbf8b44e":"dummies = pd.get_dummies(test['Item_Type'])\ntest = pd.concat([test,dummies],axis='columns')\ntest.drop(['Item_Type'],axis=1,inplace=True)","5ee3675d":"dummies_outlet_id = pd.get_dummies(test['Outlet_ID'])\ntest = pd.concat([test,dummies_outlet_id],axis='columns')\ntest.drop(['Outlet_ID'],axis=1,inplace=True)","53e4ca69":"test=test[['Item_W_log_transform', 'Item_MRP', 'Outlet_Year', 'Outlet_Size',\n       'Outlet_Location_Type','MRP_Fraction','cluster_years','Baking Goods', 'Breads', 'Breakfast',\n       'Canned', 'Dairy', 'Frozen Foods', 'Fruits and Vegetables',\n       'Hard Drinks', 'Health and Hygiene', 'Household', 'Meat', 'Others',\n       'Seafood', 'Snack Foods', 'Soft Drinks', 'Starchy Foods','OUT013',\n       'OUT018', 'OUT035', 'OUT046', 'OUT049']]","c77a2bf4":"test[['Item_W_log_transform','Item_MRP','MRP_Fraction']] = scalar.fit_transform(test[['Item_W_log_transform','Item_MRP','MRP_Fraction']].values)","d8bc8edd":"y_pred = model.predict(test.values)","7eab77f4":"submit = pd.DataFrame(y_pred,columns=['Sales'])\nsubmit","07e8e029":"# **Test Data**","a6e00229":"# **Feature Engineering**","987cb2f8":"# **Metadata**\n\n* Item_ID: Item Identification Number\n* Item_W: Item Weight\n* Item_Type: Item\n* Item_MRP: MRP of the Product\n* Outlet_ID: Outlet ID\n* Outlet_Year: Outlet Establishment year\n* Outlet_Size: Size of the outlet\n* Outlet_Type: Type of the outlet\n* Sales: Total sales from the outlet"}}