{"cell_type":{"5a1f7c77":"code","bbe10b28":"code","9ea69ace":"code","dd07f5fe":"code","82103f94":"code","fe8bdae0":"code","10536735":"code","e547c505":"code","5500d54a":"code","bdcccdc6":"code","2701db39":"code","ce759b46":"code","ac7f7da7":"code","23e03667":"code","050d9e9f":"code","867ed706":"code","8515c684":"code","1182e370":"code","6ea1ad58":"code","006100c7":"code","eb8d46c3":"code","f9d18bfe":"code","e9e5f05f":"code","5f66b2ce":"code","4c7322d0":"code","a6367d7d":"code","2fcdd29c":"code","dc888463":"code","0aaf43ab":"code","dc737b08":"code","b198d3e7":"code","2ba3be5c":"code","160f7372":"code","392a9a1f":"code","42f349b3":"code","d58403d5":"code","df79cc68":"code","8614be0f":"code","9819abb1":"code","4fc8f2d5":"code","046452f0":"code","289248af":"code","88a3a178":"code","c4ca5e53":"code","bae372ee":"code","a623bab6":"code","d14fdce5":"code","b28b33c0":"code","98209ec9":"code","eb760741":"code","7f3dc480":"code","f6dcfe51":"code","186a2e46":"code","e9d570f4":"code","75917e13":"code","d42de548":"code","3a409a2a":"code","ff8b6123":"code","f5cc62e0":"code","52e10a8b":"code","31a3139b":"code","50a1fa45":"code","2087801a":"code","2b4427d9":"code","a1e621b1":"markdown","d15bd6ad":"markdown","8ccdf385":"markdown","acb7c489":"markdown","62e631d0":"markdown","4f12ef41":"markdown","1787777b":"markdown","ff0632fe":"markdown","a6ced91c":"markdown","43fc8a4d":"markdown","736ea72a":"markdown","500e978a":"markdown","6180f2e5":"markdown"},"source":{"5a1f7c77":"%matplotlib inline\n%reload_ext autoreload\n%autoreload 2","bbe10b28":"!wget http:\/\/pjreddie.com\/media\/files\/cifar.tgz","9ea69ace":"!tar -xzf cifar.tgz","dd07f5fe":"%%bash\ncd cifar\nmkdir train_\nmkdir test_\npwd","82103f94":"%%bash\ncd cifar\npwd\ncd train_\nmkdir airplane automobile bird cat deer dog frog horse ship truck\ncd ..\npwd\nfunction copytrain { for arg in $@; do cp $(find train -name '*'$arg'.png') train_\/$arg\/; done; };\ncopytrain $(ls train_ | grep -o \"[a-z]*\")","fe8bdae0":"%%bash\ncd cifar\ncd test_\nmkdir airplane automobile bird cat deer dog frog horse ship truck\ncd ..\nfunction copytest { for arg in $@; do cp $(find test -name '*'$arg'.png') test_\/$arg\/; done; };\ncopytest $(ls test_ | grep -o \"[a-z]*\")","10536735":"%%bash\ncd cifar\nrm -rf train\nrm -rf test\nmv train_ train\nmv test_ test","e547c505":"from fastai.conv_learner import *\nPATH = \"\/kaggle\/working\/cifar\/\"\nos.makedirs(PATH,exist_ok=True)\n\n!ls {PATH}\n\nif not os.path.exists(f\"{PATH}\/train\/bird\"):\n   raise Exception(\"expecting class subdirs under 'train\/' and 'test\/'\")\n!ls {PATH}\/train","5500d54a":"classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\nstats = (np.array([ 0.4914 ,  0.48216,  0.44653]), np.array([ 0.24703,  0.24349,  0.26159]))","bdcccdc6":"def get_data(sz,bs):\n    tfms = tfms_from_stats(stats, sz, aug_tfms=[RandomFlip()], pad=sz\/\/8)\n    return ImageClassifierData.from_paths(PATH, val_name='test', tfms=tfms, bs=bs)","2701db39":"bs=256","ce759b46":"data = get_data(32,4)","ac7f7da7":"x,y=next(iter(data.trn_dl))","23e03667":"plt.imshow(data.trn_ds.denorm(x)[0]);","050d9e9f":"plt.imshow(data.trn_ds.denorm(x)[1]);","867ed706":"data = get_data(32,bs)","8515c684":"lr=1e-2","1182e370":"class SimpleNet(nn.Module):\n    def __init__(self, layers):\n        super().__init__()\n        self.layers = nn.ModuleList([\n            nn.Linear(layers[i], layers[i + 1]) for i in range(len(layers) - 1)])\n        \n    def forward(self, x):\n        x = x.view(x.size(0), -1)\n        for l in self.layers:\n            l_x = l(x)\n            x = F.relu(l_x)\n        return F.log_softmax(l_x, dim=-1)","6ea1ad58":"learn = ConvLearner.from_model_data(SimpleNet([32*32*3, 40,10]), data)","006100c7":"learn, [o.numel() for o in learn.model.parameters()]","eb8d46c3":"learn.summary()","f9d18bfe":"learn.lr_find()","e9e5f05f":"learn.sched.plot()","5f66b2ce":"%time learn.fit(lr, 2)","4c7322d0":"%time learn.fit(lr, 2, cycle_len=1)","a6367d7d":"class ConvNet(nn.Module):\n    def __init__(self, layers, c):\n        super().__init__()\n        self.layers = nn.ModuleList([\n            nn.Conv2d(layers[i], layers[i + 1], kernel_size=3, stride=2)\n            for i in range(len(layers) - 1)])\n        self.pool = nn.AdaptiveMaxPool2d(1)\n        self.out = nn.Linear(layers[-1], c)\n        \n    def forward(self, x):\n        for l in self.layers: x = F.relu(l(x))\n        x = self.pool(x)\n        x = x.view(x.size(0), -1)\n        return F.log_softmax(self.out(x), dim=-1)","2fcdd29c":"learn = ConvLearner.from_model_data(ConvNet([3, 20, 40, 80], 10), data)","dc888463":"learn.summary()","0aaf43ab":"learn.lr_find(end_lr=100)","dc737b08":"learn.sched.plot()","b198d3e7":"%time learn.fit(1e-1, 2)","2ba3be5c":"%time learn.fit(1e-1, 4, cycle_len=1)","160f7372":"class ConvLayer(nn.Module):\n    def __init__(self, ni, nf):\n        super().__init__()\n        self.conv = nn.Conv2d(ni, nf, kernel_size=3, stride=2, padding=1)\n        \n    def forward(self, x): return F.relu(self.conv(x))","392a9a1f":"class ConvNet2(nn.Module):\n    def __init__(self, layers, c):\n        super().__init__()\n        self.layers = nn.ModuleList([ConvLayer(layers[i], layers[i + 1])\n            for i in range(len(layers) - 1)])\n        self.out = nn.Linear(layers[-1], c)\n        \n    def forward(self, x):\n        for l in self.layers: x = l(x)\n        x = F.adaptive_max_pool2d(x, 1)\n        x = x.view(x.size(0), -1)\n        return F.log_softmax(self.out(x), dim=-1)","42f349b3":"learn = ConvLearner.from_model_data(ConvNet2([3, 20, 40, 80], 10), data)","d58403d5":"learn.summary()","df79cc68":"%time learn.fit(1e-1, 2)","8614be0f":"%time learn.fit(1e-1, 2, cycle_len=1)","9819abb1":"class BnLayer(nn.Module):\n    def __init__(self, ni, nf, stride=2, kernel_size=3):\n        super().__init__()\n        self.conv = nn.Conv2d(ni, nf, kernel_size=kernel_size, stride=stride,\n                              bias=False, padding=1)\n        self.a = nn.Parameter(torch.zeros(nf,1,1))\n        self.m = nn.Parameter(torch.ones(nf,1,1))\n        \n    def forward(self, x):\n        x = F.relu(self.conv(x))\n        x_chan = x.transpose(0,1).contiguous().view(x.size(1), -1)\n        if self.training:\n            self.means = x_chan.mean(1)[:,None,None]\n            self.stds  = x_chan.std (1)[:,None,None]\n        return (x-self.means) \/ self.stds *self.m + self.a","4fc8f2d5":"class ConvBnNet(nn.Module):\n    def __init__(self, layers, c):\n        super().__init__()\n        self.conv1 = nn.Conv2d(3, 10, kernel_size=5, stride=1, padding=2)\n        self.layers = nn.ModuleList([BnLayer(layers[i], layers[i + 1])\n            for i in range(len(layers) - 1)])\n        self.out = nn.Linear(layers[-1], c)\n        \n    def forward(self, x):\n        x = self.conv1(x)\n        for l in self.layers: x = l(x)\n        x = F.adaptive_max_pool2d(x, 1)\n        x = x.view(x.size(0), -1)\n        return F.log_softmax(self.out(x), dim=-1)","046452f0":"learn = ConvLearner.from_model_data(ConvBnNet([10, 20, 40, 80, 160], 10), data)","289248af":"learn.summary()","88a3a178":"%time learn.fit(3e-2, 2)","c4ca5e53":"%time learn.fit(1e-1, 4, cycle_len=1)","bae372ee":"class ConvBnNet2(nn.Module):\n    def __init__(self, layers, c):\n        super().__init__()\n        self.conv1 = nn.Conv2d(3, 10, kernel_size=5, stride=1, padding=2)\n        self.layers = nn.ModuleList([BnLayer(layers[i], layers[i+1])\n            for i in range(len(layers) - 1)])\n        self.layers2 = nn.ModuleList([BnLayer(layers[i+1], layers[i + 1], 1)\n            for i in range(len(layers) - 1)])\n        self.out = nn.Linear(layers[-1], c)\n        \n    def forward(self, x):\n        x = self.conv1(x)\n        for l,l2 in zip(self.layers, self.layers2):\n            x = l(x)\n            x = l2(x)\n        x = F.adaptive_max_pool2d(x, 1)\n        x = x.view(x.size(0), -1)\n        return F.log_softmax(self.out(x), dim=-1)","a623bab6":"learn = ConvLearner.from_model_data(ConvBnNet2([10, 20, 40, 80, 160], 10), data)","d14fdce5":"%time learn.fit(1e-2, 2)","b28b33c0":"%time learn.fit(1e-2, 2, cycle_len=1)","98209ec9":"class ResnetLayer(BnLayer):\n    def forward(self, x): return x + super().forward(x)","eb760741":"class Resnet(nn.Module):\n    def __init__(self, layers, c):\n        super().__init__()\n        self.conv1 = nn.Conv2d(3, 10, kernel_size=5, stride=1, padding=2)\n        self.layers = nn.ModuleList([BnLayer(layers[i], layers[i+1])\n            for i in range(len(layers) - 1)])\n        self.layers2 = nn.ModuleList([ResnetLayer(layers[i+1], layers[i + 1], 1)\n            for i in range(len(layers) - 1)])\n        self.layers3 = nn.ModuleList([ResnetLayer(layers[i+1], layers[i + 1], 1)\n            for i in range(len(layers) - 1)])\n        self.out = nn.Linear(layers[-1], c)\n        \n    def forward(self, x):\n        x = self.conv1(x)\n        for l,l2,l3 in zip(self.layers, self.layers2, self.layers3):\n            x = l3(l2(l(x)))\n        x = F.adaptive_max_pool2d(x, 1)\n        x = x.view(x.size(0), -1)\n        return F.log_softmax(self.out(x), dim=-1)","7f3dc480":"learn = ConvLearner.from_model_data(Resnet([10, 20, 40, 80, 160], 10), data)","f6dcfe51":"wd=1e-5","186a2e46":"%time learn.fit(1e-2, 2, wds=wd)","e9d570f4":"%time learn.fit(1e-2, 3, cycle_len=1, cycle_mult=2, wds=wd)","75917e13":"%time learn.fit(1e-2, 8, cycle_len=4, wds=wd)","d42de548":"class Resnet2(nn.Module):\n    def __init__(self, layers, c, p=0.5):\n        super().__init__()\n        self.conv1 = BnLayer(3, 16, stride=1, kernel_size=7)\n        self.layers = nn.ModuleList([BnLayer(layers[i], layers[i+1])\n            for i in range(len(layers) - 1)])\n        self.layers2 = nn.ModuleList([ResnetLayer(layers[i+1], layers[i + 1], 1)\n            for i in range(len(layers) - 1)])\n        self.layers3 = nn.ModuleList([ResnetLayer(layers[i+1], layers[i + 1], 1)\n            for i in range(len(layers) - 1)])\n        self.out = nn.Linear(layers[-1], c)\n        self.drop = nn.Dropout(p)\n        \n    def forward(self, x):\n        x = self.conv1(x)\n        for l,l2,l3 in zip(self.layers, self.layers2, self.layers3):\n            x = l3(l2(l(x)))\n        x = F.adaptive_max_pool2d(x, 1)\n        x = x.view(x.size(0), -1)\n        x = self.drop(x)\n        return F.log_softmax(self.out(x), dim=-1)","3a409a2a":"learn = ConvLearner.from_model_data(Resnet2([16, 32, 64, 128, 256], 10, 0.2), data)","ff8b6123":"wd=1e-6","f5cc62e0":"%time learn.fit(1e-2, 2, wds=wd)","52e10a8b":"%time learn.fit(1e-2, 3, cycle_len=1, cycle_mult=2, wds=wd)","31a3139b":"# %time learn.fit(1e-2, 8, cycle_len=4, wds=wd)","50a1fa45":"learn.save('tmp3')","2087801a":"log_preds,y = learn.TTA()\npreds = np.mean(np.exp(log_preds),0)","2b4427d9":"metrics.log_loss(y,preds), accuracy_np(preds,y)","a1e621b1":"## CIFAR 10","d15bd6ad":"## Deep BatchNorm","8ccdf385":"## BatchNorm","acb7c489":"Bash script from fast.ai forums: http:\/\/forums.fast.ai\/t\/not-a-directory-error-in-cifar10-exercise\/13401\/6","62e631d0":"You can get the data via:\n\n    wget http:\/\/pjreddie.com\/media\/files\/cifar.tgz    \n**Important:** Before proceeding, the student must reorganize the downloaded dataset files to match the expected directory structure, so that there is a dedicated folder for each class under 'test' and 'train', e.g.:\n\n```\n* test\/airplane\/airplane-1001.png\n* test\/bird\/bird-1043.png\n\n* train\/bird\/bird-10018.png\n* train\/automobile\/automobile-10000.png\n```\n\nThe filename of the image doesn't have to include its class.","4f12ef41":"### End","1787777b":"## Fully connected model","ff0632fe":"From [this notebook](https:\/\/github.com\/KeremTurgutlu\/deeplearning\/blob\/master\/Exploring%20Optimizers.ipynb) by our student Kerem Turgutlu:","a6ced91c":"## Resnet 2","43fc8a4d":"### Look at data","736ea72a":"## Refactored","500e978a":"## Resnet","6180f2e5":"## CNN"}}