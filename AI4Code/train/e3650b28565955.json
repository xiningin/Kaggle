{"cell_type":{"35084c3c":"code","e25eb856":"code","9bade677":"code","9e832af2":"code","4a7aeb1b":"code","69061407":"code","5fd28ddc":"code","966eb43e":"code","30d86e61":"code","5fa95946":"code","5857dbbd":"code","998775bd":"markdown","79f9b947":"markdown","e720b950":"markdown","08ad5a9c":"markdown","e554e962":"markdown","03fe1a91":"markdown","05d3dabb":"markdown","6f293a24":"markdown","ff5b9fb0":"markdown","c2e9f304":"markdown","5da25811":"markdown"},"source":{"35084c3c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # for graphics\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e25eb856":"data=pd.read_csv(\"\/kaggle\/input\/voicegender\/voice.csv\")","9bade677":"data.label=[0 if each == \"male\" else 1 for each in data.label] # male -> 0 , female -> 1\ny=data.label.values\nx_data=data.drop([\"label\"],axis=1)","9e832af2":"#Normalization\nx = (x_data-np.min(x_data))\/(np.max(x_data)+np.max(x_data))","4a7aeb1b":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=42)\n\nx_train = x_train.T\ny_train = y_train.T\nx_test = x_test.T\ny_test = y_test.T\n\nprint(\"x_train: \",x_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)","69061407":"def intialize_weight_and_bias(dimension):\n     b = 0.0\n     w = np.full((dimension,1),0.01)\n     return w,b\ndef sigmoid(z):\n     y_head=1\/(1+np.exp(-z))\n     return y_head","5fd28ddc":"def forward_backward_propagation(w,b,x_train,y_train):\n     # Forward Progoagation\n        \n     z = np.dot(w.T,x_train)+b\n     y_head = sigmoid(z)\n     loss = - y_train * np.log(y_head) - ( 1 - y_train ) * np.log( 1-y_head )\n     cost = (np.sum(loss))\/x_train.shape[1]\n        \n     # Backward Propagation\n     derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n     derivative_bias = np.sum( y_head - y_train ) \/ x_train.shape[1]\n     gradients = {\"derivative_weights\":derivative_weight,\"derivative_bias\":derivative_bias}\n     return cost,gradients","966eb43e":"def update(w,b,x_train,y_train,learning_rate,number_of_iterarion):\n     cost_list = []\n     cost_list2 = []\n     index=[]\n     for i in range(number_of_iterarion):\n          cost, gradients=forward_backward_propagation(w,b,x_train,y_train)\n          cost_list.append(cost)\n          w = w - learning_rate*gradients[\"derivative_weights\"]\n          b = b - learning_rate*gradients[\"derivative_bias\"]\n          if i % 10 == 0:\n               cost_list2.append(cost)\n               index.append(i)\n               print(\"cost after iteration %i: %f\"%(i, cost))\n     parameters = {\"weight\": w,\"bias\": b}\n     plt.plot(index,cost_list2)\n     plt.xticks(index,rotation='vertical')\n     plt.xlabel(\"number of iteration\")\n     plt.ylabel(\"cost\")\n     plt.show()\n     return parameters, gradients, cost_list","30d86e61":"def predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","5fa95946":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate, num_iteration):\n     dimension = x_train.shape[0]\n     w,b = intialize_weight_and_bias(dimension)\n     parameters, gradients, cost_list = update(w,b,x_train,y_train,learning_rate,num_iteration)\n     y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n     print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iteration = 50) ","5857dbbd":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nprint(\"test accuracy {}\".format(lr.score(x_test.T,y_test.T)))\n","998775bd":"Instead of using the code we write sklearn library we can find what we want values.","79f9b947":"We are making predictions using data that we have learned in x_test","e720b950":"Our data type all float 34. But \"label data\" is not. It is changing.We will make woman 1 and man 0. Then we transfer this data to Y and label data will drop from x_data. ","08ad5a9c":"**INTRODUCTION**\n\n* I will explain how to make Logistic Regression for binary labeled data\n* We will use the pandas, numpy and matplotlib libraries.But I'm gonna show you how to do it with the sklearn library.\n\n\n\n\n\n","e554e962":"We are learning data by forward and backward propagation.","03fe1a91":"We are defining Weights and bias . Firs value of bias is zero.Weights value will be determined by x_train status. Sigmoid Function is y_head = 1\/(1 + exp(-z))\n","05d3dabb":"We find our test accuracy by use logistic regression","6f293a24":"We find lost value and cost value by make forward progpagation.We take derivative for improve data","ff5b9fb0":"We will scale all values from 0 to 1.","c2e9f304":"**CONCLUSION**\nIf you have any suggestion, question or comment, I will be happy to hear it.","5da25811":"We are splitting our data for training. We are using sklearn library here. We take the transpose to match the matrices of the training data"}}