{"cell_type":{"08685b7f":"code","b5fe73ff":"code","dc61e5bd":"code","5bf29bee":"code","c92872fb":"code","ecce4518":"code","038c058c":"code","67848083":"code","6066e650":"code","c6991965":"code","6f8acb53":"code","39444a34":"code","2efa9c2a":"code","1d3b6647":"code","0af13566":"code","bc217cc3":"code","e4cbc23e":"code","a10a5046":"code","2035812e":"code","6266af07":"code","fee70b80":"code","add70514":"code","2ed77e79":"code","19682544":"code","c6b3e9bf":"code","329e536f":"code","8d4ad7d3":"code","f5831df0":"code","341c65f5":"code","44cd8617":"code","1f3f78d6":"code","4ffbe856":"code","fcc7395a":"code","8fc27465":"code","7929e91b":"code","50029ffa":"code","9ab82c37":"markdown","9f86754a":"markdown","fa8d9cce":"markdown","b341a9ba":"markdown","3f17f587":"markdown","89b0fe1a":"markdown","5f32279e":"markdown","13cfe25e":"markdown","7cb22e47":"markdown","18e0893e":"markdown","e892a2bb":"markdown","d4cc5343":"markdown","3b0c59ae":"markdown"},"source":{"08685b7f":"# load libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport seaborn as sns","b5fe73ff":"# read csv data files in dataframes\ncalendar = pd.read_csv('..\/input\/boston\/calendar.csv')\nlistings = pd.read_csv(\"..\/input\/boston\/listings.csv\")\nreviews = pd.read_csv(\"..\/input\/boston\/reviews.csv\")","dc61e5bd":"calendar.head()","5bf29bee":"calendar.available.value_counts()","c92872fb":"# check percentages of missing values in each column\ncalendar.isnull().mean()","ecce4518":"# check first five rows in listings\nlistings.head()","038c058c":"# view column names \nlistings.columns","67848083":"# check statistics of numerical columns \nlistings.describe() ","6066e650":"# check top 5 rows of reviews \nreviews.head()","c6991965":"# check missing values \nreviews.isnull().mean()","6f8acb53":"# check date range\nprint(\"The earliest date in the data set is {}; the latest date is {}\"\n      .format(reviews.date.min(),reviews.date.max()))","39444a34":"# convert date from string to datetime object\n\ncalendar[\"date\"] = pd.to_datetime(calendar[\"date\"])\ncalendar.date.describe()","2efa9c2a":"# calendar is coded as f and t string objects\ncalendar.available.value_counts()","1d3b6647":"# convert f to 0 (not available), and t to 1 (available)\ncalendar[\"available\"]=calendar[\"available\"].apply(lambda x:1 if x==\"t\" else 0)\ncalendar.available.value_counts()","0af13566":"# compute availability (percentage of units available) of to each day\n# store in calendar_daily dataframe\n#calendar_daily = calendar.groupby(\"date\")[\"available\"].mean().reset_index()\n\ncalendar_daily = calendar.groupby(\"date\")[\"available\"].agg([\"sum\",\"mean\"]).reset_index()\n\ncalendar_daily.rename(columns={\"sum\":\"available_count\",\"mean\":\"availability\"},inplace=True)                                         \n\ncalendar_daily.head()","bc217cc3":"# view overall trend of availability by day\nsns.set_style(\"darkgrid\")\nplt.figure(figsize=(12,4))\n\nax=sns.lineplot(x=calendar_daily.date,y=calendar_daily.availability)\nax.set(xlabel=\"Date\",ylabel=\"Availability\", title=\"How does availability change by day?\")\n\n# set y tick values to % \ny_tickvalue=['{:,.0f}'.format(x*100) + '%' for x in ax.get_yticks()]\nax.set_yticklabels(y_tickvalue)\n\n# set x tick increments \nmonths = mdates.MonthLocator()\nax.xaxis.set_major_locator(months)\n\nplt.savefig(\"availability_trend_daily.png\")","e4cbc23e":"# check trend of available unit counts \n\n# view overall trend of availability by day\nsns.set_style(\"darkgrid\")\nplt.figure(figsize=(16,6))\n\nax=sns.lineplot(x=calendar_daily.date,y=calendar_daily.available_count)\nax.set(xlabel=\"Date\",ylabel=\"Total Available Units\", title=\"How does total available count change by day?\")\n\n# set x tick increments \nmonths = mdates.MonthLocator()\nax.xaxis.set_major_locator(months)\n\nplt.savefig(\"available_counts_trend_daily.png\")\n","a10a5046":"# explore trend throughout the week\ncalendar[\"day_of_week\"] = calendar[\"date\"].dt.dayofweek\ncalendar_weekly = calendar.groupby(\"day_of_week\")[\"available\"].agg([\"sum\",\"mean\"]).reset_index()\ncalendar_weekly.rename(columns={\"sum\":\"available_count\",\"mean\":\"availability\"},inplace=True)\ncalendar_weekly","2035812e":"plt.figure(figsize=(10,8))\nsns.set_style(\"darkgrid\")\nax=sns.lineplot(x=calendar_weekly.day_of_week,y=calendar_weekly.availability)\nax.set(xlabel=\"Day of Week\",ylabel=\"Availability\", title=\"How does availability change throughout the week?\")\nax.set_xticks([0,1,2,3,4,5,6])\nax.set_xticklabels([\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"])\n\n# set y tick values to % \ny_tickvalue=['{:,.1f}'.format(x*100) + '%' for x in ax.get_yticks()]\nax.set_yticklabels(y_tickvalue)\nplt.savefig(\"availability_weekly.png\")","6266af07":"# Check total available units\nplt.figure(figsize=(10,8))\nsns.set_style(\"darkgrid\")\nax=sns.lineplot(x=calendar_weekly.day_of_week,y=calendar_weekly.available_count)\nax.set(xlabel=\"Day of Week\",ylabel=\"Total Available Listings\", title=\"Total Avaiable Units throughout the Week\")\nax.set_xticks([0,1,2,3,4,5,6])\nax.set_xticklabels([\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"])\n\n\nplt.savefig(\"available_count_weekly.png\")","fee70b80":"# listing price is coded as a string\nlistings.price.head()","add70514":"# convert listing price from string to numeric\nlistings[\"price\"]=listings[\"price\"].replace('\\$|\\,','',regex=True).astype(float)\nlistings[\"price\"].describe()","2ed77e79":"# check neighbourhood_cleansed\nlistings.neighbourhood_cleansed.value_counts()","19682544":"neighbourhood_list=listings[\"neighbourhood_cleansed\"].dropna().unique()\nsorted_neighbourhood=sorted(neighbourhood_list)\nsorted_neighbourhood","c6b3e9bf":"# check room_type variable\nlistings.room_type.value_counts()","329e536f":"# create clustered bar plot for average price by Neighbourhood and room type\n\ng=sns.FacetGrid(listings,row=\"room_type\",hue=\"room_type\",height=5,aspect=2,margin_titles=True)\ng.map(sns.barplot,\"price\",\"neighbourhood_cleansed\",ci=None,order=sorted_neighbourhood).fig.subplots_adjust(wspace=.05, hspace=.15)\ng.add_legend(title=\"Room Type\")\ng.set(xlabel=\"Price\",ylabel=\"Neighbourhood\",title=\"Average Nightly Rental Rate by Neighbourhood and Room Type\")\nplt.savefig(\"average_price_by_neighbourhood_room_type.png\",bbox_inches='tight')","8d4ad7d3":"# check number of rows and columns\nlistings.shape","f5831df0":"listings.bedrooms.value_counts()","341c65f5":"listings.bathrooms.value_counts()","44cd8617":"listings.beds.value_counts()","1f3f78d6":"listings.review_scores_rating.describe()","4ffbe856":"# select feature variables, and drop rows with one or more NAs \n\nlistings_rm_nan = listings.dropna(how=\"any\",subset=[\"neighbourhood_cleansed\",\"bedrooms\",\"bathrooms\",\n                                                   \"room_type\",\"review_scores_rating\",\"beds\"],axis=0)\ny=listings_rm_nan[\"price\"]\n\n# create dummy codes for categorical values \nX_categorical = listings_rm_nan[[\"room_type\",\"neighbourhood_cleansed\"]]\nX_categorical_dummy_coded = pd.get_dummies(X_categorical)\n\n# check how many rows left after removing nans, check the number of columns \nX_categorical_dummy_coded.shape","fcc7395a":"X_num = listings_rm_nan[[\"bedrooms\",\"bathrooms\",\"review_scores_rating\",\"beds\"]]\n\n#concatenate columns of numerical and categorical features \nX=pd.concat([X_num,X_categorical_dummy_coded],axis=1)\n\n# check to make sure X and y have equal number of rows\nX.shape[0]==y.shape[0]","8fc27465":"# split X, y to test and train \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)\n\n\nlinear_model = LinearRegression(normalize=True)\nlinear_model.fit(X_train,y_train)\nlinear_model.score(X_test,y_test)\ny_test_predicted = linear_model.predict(X_test)","7929e91b":"# plot y_test_predict and y_test\nplt.figure(figsize=(6,6))\nax=sns.scatterplot(y_test,y_test_predicted)\nsns.lineplot(x=y_test,y=y_test,ax=ax,color=\"r\",alpha=0.5, label=\"100% Perfect Fit\")\nax.set(xlabel=\"Actual Rate\",ylabel=\"Predicted Rate\", title=\"Predicted Rate v.s. Actual Rate\")\nplt.savefig(\"predicted_rate_vs_actual_rate.png\",bbox_inches='tight')","50029ffa":"import statsmodels.api as sm\nresults=sm.OLS(y_train,X_train).fit() #ordinary least squares \nresults.summary()","9ab82c37":"## Rental rate by neighbourhood and by room type","9f86754a":"## Reviews","fa8d9cce":"# Load Data and Libraries","b341a9ba":"`available` is coded as `f` (false) and `t` (true) ","3f17f587":"# Explore Data","89b0fe1a":"## Availability trend","5f32279e":"# Analysis","13cfe25e":"## Predicting Rental Rate","7cb22e47":"About half the prices are missing so we'll only focus on availability trend using this data. ","18e0893e":"### Trend by Day","e892a2bb":"## Listings","d4cc5343":"### Trend by Week","3b0c59ae":"## Calendar"}}