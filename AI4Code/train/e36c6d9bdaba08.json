{"cell_type":{"20977120":"code","8415b033":"code","bf555bc8":"code","2d61a126":"code","d5dce81e":"code","546d83b2":"code","da0fee2b":"code","feb7fef7":"code","5ce39798":"code","0bbe8186":"code","3697ec64":"code","97dc74a1":"code","c1fd65f4":"code","5b371473":"code","6c15cc33":"code","e199fa3d":"markdown","f79632d0":"markdown","01a5bede":"markdown"},"source":{"20977120":"import numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)\n    \nfrom pathlib import Path\n\n","8415b033":"data_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\n\ntraining_tasks = sorted(os.listdir(training_path))\nevaluation_tasks = sorted(os.listdir(evaluation_path))\ntest_tasks = sorted(os.listdir(test_path))\nprint(len(training_tasks), len(evaluation_tasks), len(test_tasks))","bf555bc8":"cmap = colors.ListedColormap(\n    ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n# 0:black, 1:blue, 2:red, 3:greed, 4:yellow,\n# 5:gray, 6:magenta, 7:orange, 8:sky, 9:brown\nplt.figure(figsize=(5, 2), dpi=200)\nplt.imshow([list(range(10))], cmap=cmap, norm=norm)\nplt.xticks(list(range(10)))\nplt.yticks([])\nplt.show()\n\ndef plot_task(task):\n    n = len(task[\"train\"]) + len(task[\"test\"])\n    fig, axs = plt.subplots(2, n, figsize=(4*n,8), dpi=50)\n    plt.subplots_adjust(wspace=0, hspace=0)\n    fig_num = 0\n    for i, t in enumerate(task[\"train\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Train-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Train-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    for i, t in enumerate(task[\"test\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Test-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Test-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    \n    plt.tight_layout()\n    plt.show()\n    \n","2d61a126":"def get_data(task_filename):\n    with open(task_filename, 'r') as f:\n        task = json.load(f)\n    return task\n\nnum2color = [\"black\", \"blue\", \"red\", \"green\", \"yellow\", \"gray\", \"magenta\", \"orange\", \"sky\", \"brown\"]\ncolor2num = {c: n for n, c in enumerate(num2color)}","d5dce81e":"def check(task, pred_func):\n    n = len(task[\"train\"]) + len(task[\"test\"])\n    fig, axs = plt.subplots(3, n, figsize=(4*n,12), dpi=50)\n    plt.subplots_adjust(wspace=0.3, hspace=0.3)\n    fig_num = 0\n    for i, t in enumerate(task[\"train\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        t_pred = pred_func(t_in)\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Train-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Train-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        axs[2][fig_num].imshow(t_pred, cmap=cmap, norm=norm)\n        axs[2][fig_num].set_title(f'Train-{i} pred')\n        axs[2][fig_num].set_yticks(list(range(t_pred.shape[0])))\n        axs[2][fig_num].set_xticks(list(range(t_pred.shape[1])))\n        fig_num += 1\n    for i, t in enumerate(task[\"test\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        t_pred = pred_func(t_in)\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Test-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Test-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        axs[2][fig_num].imshow(t_pred, cmap=cmap, norm=norm)\n        axs[2][fig_num].set_title(f'Test-{i} pred')\n        axs[2][fig_num].set_yticks(list(range(t_pred.shape[0])))\n        axs[2][fig_num].set_xticks(list(range(t_pred.shape[1])))\n        fig_num += 1","546d83b2":"def task_train020(x):\n\n    H, W = x.shape\n    bese_color = x[0, 0]\n    row_count = 1\n    column_count = 1\n    for yy in range(H):\n        if x[yy, 0] != bese_color:\n            row_count += 1\n    for xx in range(W):\n        if x[0, xx] != bese_color:\n            column_count += 1\n    y = bese_color * np.ones((row_count, column_count))\n    return y\n\ntask = get_data(str(training_path \/ training_tasks[20]))\ncheck(task, task_train020)\n# plot_task(task)","da0fee2b":"def task_train021(x):\n    \n    H, W = x.shape\n    y = np.zeros((3, 3))\n    \n    def search_around(yy, xx):\n        for dy in [-1, 0, 1]:\n            for dx in [-1, 0, 1]:\n                if (0 <= yy + dy < H) and (0 <= xx + dx < W) and x[yy + dy, xx + dx] != color2num['black']:\n                    y[dy + 1, dx + 1] = x[yy + dy, xx + dx] \n                    \n    for yy in range(H):\n        for xx in range(W):\n            if x[yy, xx] == color2num['gray']:\n                search_around(yy, xx)\n    \n    return y\n\ntask = get_data(str(training_path \/ training_tasks[21]))\ncheck(task, task_train021)\n# plot_task(task)","feb7fef7":"# I have not yet wrote down the rule of task Train022 .\nplot_task(get_data(str(training_path \/ training_tasks[22])))","5ce39798":"def task_train023(x):\n    \n    red_pos = []\n    green_pos = []\n    blue_pos = []\n    \n    H, W = x.shape\n    y = x.copy()\n\n    for yy in range(H):\n        for xx in range(W):\n            if x[yy, xx] == color2num['red']:\n                red_pos.append([yy, xx])\n            elif x[yy, xx] == color2num['green']:\n                green_pos.append([yy, xx])\n            elif x[yy, xx] == color2num['blue']:\n                blue_pos.append([yy, xx])\n    \n    for r_pos in red_pos:\n        for yy in range(H):\n            y[yy, r_pos[1]] = color2num['red']\n    for g_pos in green_pos:\n        for xx in range(W):\n            y[g_pos[0], xx] = color2num['green']\n    for b_pos in blue_pos:\n        for xx in range(W):\n            y[b_pos[0], xx] = color2num['blue']            \n    \n    return y\n\ntask = get_data(str(training_path \/ training_tasks[23]))\ncheck(task, task_train023)\n# plot_task(task)","0bbe8186":"def task_train024(x):\n\n    if np.sum(np.sum(x, axis=1) == 0) == 0:\n        is_vertical = True\n    else:\n        is_vertical = False\n        x = x.T\n        \n    H, W = x.shape\n    y = x.copy()\n    \n    lines = {}\n    for xx in range(W):\n        if (np.unique(x[:, xx]).shape[0] == 1) and np.sum(np.unique(x[:, xx])) != 0:\n            lines[x[0, xx]] = xx\n                \n    for yy in range(H):\n        for xx in range(W): \n            if xx in lines.values():\n                continue\n            if y[yy, xx] in lines.keys():\n                if xx < lines[y[yy, xx]]:\n                    xx_new = lines[y[yy, xx]]-1\n                else:\n                    xx_new = lines[y[yy, xx]]+1\n                if xx != xx_new:\n                    y[yy, xx_new] = y[yy, xx]\n                    y[yy, xx] = color2num['black']\n            else:\n                y[yy, xx] = color2num['black']\n    if not is_vertical:\n        y = y.T        \n        \n    return y\n\ntask = get_data(str(training_path \/ training_tasks[24]))\ncheck(task, task_train024)\n# plot_task(task)","3697ec64":"def task_train025(x):\n    \n    y = np.zeros((5, 3))\n    \n    x1 = x[:, :3]\n    x2 = x[:, 4:]\n\n    H, W = y.shape\n    for yy in range(H):\n        for xx in range(W):\n            if x1[yy, xx] == 0 and x2[yy, xx] == 0:\n                y[yy, xx] = color2num['sky']\n\n    return y\n\ntask = get_data(str(training_path \/ training_tasks[25]))\ncheck(task, task_train025)\n# plot_task(task)","97dc74a1":"def task_train026(x):\n    \n    H, W = x.shape\n    y = x.copy()\n    \n    x_min = np.min(np.where(0 < np.sum(y, axis=1)))\n    x_max = np.max(np.where(0 < np.sum(y, axis=1))) + 1\n    y_max = np.max(np.where(0 < np.sum(y, axis=0))) + 1\n    y_min = y_max - (x_max - x_min)\n    \n    y[x_min:x_max, y_min:y_max] = np.rot90(y[x_min:x_max, y_min:y_max], 1)\n    y[np.where(y-x==1)] = color2num['red'] \n    y[np.where(y-x==-1)] = color2num['blue']\n    \n    return y\n\ntask = get_data(str(training_path \/ training_tasks[26]))\ncheck(task, task_train026)\n# plot_task(task)","c1fd65f4":"def task_train027(x):\n    \n    H, W = x.shape\n    y = x.copy()\n    \n    for yy in range(H):\n        for xx in range(W):\n            if x[yy, xx] != 0:\n                color = x[yy, xx]\n                y[yy, :] = color\n                \n                if yy < H\/\/2:\n                    y[0, :] = color\n                    y[:H\/\/2, 0] = color\n                    y[:H\/\/2, -1] = color\n                    cnt = 1\n                else:\n                    y[-1, :] = color\n                    y[H\/\/2:, 0] = color\n                    y[H\/\/2:, -1] = color\n\n    return y\n\ntask = get_data(str(training_path \/ training_tasks[27]))\ncheck(task, task_train027)\n# plot_task(task)","5b371473":"def task_train028(x):\n    \n    y = x.copy()\n    for color in color2num.values():\n        z = x.copy()\n        z[np.where(z != color)] = color2num['black']\n        \n        if np.where(z==color)[0].shape[0] == 0:\n            continue\n        \n        h_min = np.min(np.where(z==color)[0])\n        h_max = np.max(np.where(z==color)[0])\n        w_min = np.min(np.where(z==color)[1])\n        w_max = np.max(np.where(z==color)[1])\n        \n        if np.unique(x[h_min, w_min:w_max+1]).shape[0] != 1:\n            continue\n        if np.unique(x[h_max, w_min:w_max+1]).shape[0] != 1:\n            continue\n        if np.unique(x[h_min:h_max+1, w_min]).shape[0] != 1:\n            continue    \n        if np.unique(x[h_min:h_max+1, w_max]).shape[0] != 1:\n            continue\n        \n        y = x[h_min+1:h_max, w_min+1:w_max]\n        \n        \n\n    \n    return y\n\ntask = get_data(str(training_path \/ training_tasks[28]))\ncheck(task, task_train028)\n# plot_task(task)","6c15cc33":"def task_train029(x):\n    \n    blue_h_ = np.where(x==color2num['blue'])[0]\n    blue_h_min, blue_h_max = np.min(blue_h_), np.max(blue_h_)\n    \n    blue_ = x.copy()\n    blue_[np.where(blue_ != color2num['blue'])] = color2num['black']\n    red_ = x.copy()\n    red_[np.where(red_ != color2num['red'])] = color2num['black']\n    yellow_ = x.copy()\n    yellow_[np.where(yellow_ != color2num['yellow'])] = color2num['black']\n    \n    def shift(x):\n        x_ = x.copy()\n        x_[0, :] = x[-1, :]\n        x_[1:, :] = x[:-1, :]\n        return x_\n    \n    def check_pos(x):\n        h_ = np.where(x!=color2num['black'])[0]\n        h_min, h_max = np.min(h_), np.max(h_)\n        if h_min == blue_h_min and h_max == blue_h_max:\n            return True\n        else:\n            return False\n        \n    while not check_pos(red_):\n        red_ = shift(red_)\n    while not check_pos(yellow_):\n        yellow_ = shift(yellow_)\n    \n    y = blue_ + red_ + yellow_\n\n    return y\n\ntask = get_data(str(training_path \/ training_tasks[29]))\ncheck(task, task_train029)\n# plot_task(task)","e199fa3d":"forked from: \nhttps:\/\/www.kaggle.com\/nagiss\/manual-coding-for-the-first-10-tasks\n\nref.   https:\/\/www.kaggle.com\/c\/abstraction-and-reasoning-challenge\/discussion\/130360\n","f79632d0":"##### This notebook is very inspired by [this great notebook](https:\/\/www.kaggle.com\/nagiss\/manual-coding-for-the-first-10-tasks) !!! ","01a5bede":"## codes below are my job  \nPlease let me know in the comments if you find any bad points in my implementations."}}