{"cell_type":{"3c084f9a":"code","ee577283":"code","ee275ba9":"code","3eb026dd":"code","c4857665":"code","80b625db":"code","600d8b4a":"code","787b920c":"code","b97746b5":"code","6aab0f18":"code","f49a0225":"code","fef61883":"code","299124bf":"code","3d83c4f5":"code","35ea232d":"code","1945fd2f":"code","016437c3":"code","087bf298":"code","bd3d7e7a":"code","e33cb8fd":"code","b123e4a6":"code","0586e76c":"code","f6973d36":"code","11027d3c":"code","6dbf8ccb":"code","dcf42895":"code","76c0468c":"code","71fe3209":"code","69ae392a":"code","f1b6a6ec":"code","36c3f1d5":"code","8de250b1":"code","91fbc904":"code","4e33a47b":"code","84e2163d":"code","d1648c0d":"code","0724dabf":"code","7278eba4":"code","22daa097":"code","5e1f653a":"code","cc29db2c":"code","2de217b3":"code","032505a8":"code","1be9a04c":"code","4fe9f127":"code","7a800c80":"code","b0380c46":"code","dc53f684":"code","82ca6889":"code","2decc872":"code","fe812d0c":"code","d778b151":"code","2f51f0b9":"code","e7c0be66":"code","6359292b":"code","2922bb5f":"code","ef735a23":"code","83561cd1":"code","d106b030":"code","5078f424":"code","2c058733":"code","854b8dd7":"code","d6d87db1":"code","55531d3c":"code","92157229":"code","40c600a5":"code","8996baab":"code","379c1e0b":"code","14ecca8d":"code","2f93b383":"code","88de2c01":"code","6343994e":"code","6a6bb5e3":"code","5a639d61":"code","7ec8070f":"code","f9b92709":"code","990411a1":"code","3ce7851d":"code","1fa61a11":"code","3b276364":"code","227f2f4d":"markdown","a32bf502":"markdown","e2e9545d":"markdown","2500c71b":"markdown","f6b17f73":"markdown","43d6cb7b":"markdown","89c34cc9":"markdown","0245f38a":"markdown","6c70d999":"markdown","305deee7":"markdown","6f68dc56":"markdown","99ca6c2b":"markdown","1be939ce":"markdown","3f4de957":"markdown","08365c58":"markdown","00c70c85":"markdown","a3efb9df":"markdown","bebb2ffb":"markdown","de36e6bd":"markdown","e4c2d225":"markdown","439d3747":"markdown","99a9a71c":"markdown","0367a705":"markdown","0f5fe282":"markdown","3e58030f":"markdown","509b7528":"markdown","56251a28":"markdown","107deba9":"markdown","5edc8331":"markdown","8be4b7cd":"markdown","4dbf9e50":"markdown","1515b0c4":"markdown","edb81a6c":"markdown","28927cef":"markdown","0f6682a0":"markdown","678f512c":"markdown","117bebf7":"markdown","62589e42":"markdown","4568b6e1":"markdown","270b2adb":"markdown","06d41f49":"markdown","9c805b9d":"markdown","121b39f5":"markdown","0a3c9c63":"markdown","c9900c03":"markdown","64e84176":"markdown","0c15ece4":"markdown","64ec2151":"markdown","91bb8114":"markdown","5424247c":"markdown","8b19efd3":"markdown","86c6bd03":"markdown","be1549ea":"markdown","23f2cf3e":"markdown","d4b31803":"markdown","bce75d70":"markdown","469c6b43":"markdown","49a559fc":"markdown","c3e6a22a":"markdown","71a076c5":"markdown","aecd5bf2":"markdown","a1cfa7c0":"markdown","12ecf4fe":"markdown","f1b71901":"markdown","e6d0f31c":"markdown","3fde1847":"markdown","e9e4de80":"markdown","8bd5deb5":"markdown","b70cfd83":"markdown","daad0071":"markdown"},"source":{"3c084f9a":"#IMPORTING LIBRARIES\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline","ee577283":"train=pd.read_csv('train.csv')\ntest=pd.read_csv('test.csv')","ee275ba9":"train.head()","3eb026dd":"test.head()","c4857665":"train.shape","80b625db":"test.shape","600d8b4a":"train.info()","787b920c":"test.info()","b97746b5":"train.isnull().sum().sort_values(ascending=False)","6aab0f18":"test.isnull().sum().sort_values(ascending=False)","f49a0225":"# Proposed themes: darkgrid, whitegrid, dark, white, and ticks\n#sns.set_style(\"whitegrid\")\n#sns.boxplot(data=data)\n#plt.title(\"whitegrid\")\n","fef61883":"def bar_chart(feature):\n    survived=train[train['Survived']==1][feature].value_counts()\n    dead=train[train['Survived']==0][feature].value_counts()\n    df=pd.DataFrame([survived,dead])\n    df.index=['survived','dead']\n    df.plot(kind='bar',stacked=True,figsize=(10,5))","299124bf":"bar_chart('Sex')","3d83c4f5":"bar_chart('Pclass')","35ea232d":"bar_chart('SibSp')","1945fd2f":"bar_chart('Parch')","016437c3":"bar_chart('Embarked')","087bf298":"train.head(3)","bd3d7e7a":"from scipy.misc import imread\nfrom pylab import imshow, show\n\nimshow(imread('titanic-pic.jpg'))\nshow()","e33cb8fd":"alldata=[train,test] #combining the train and test dataset\nfor dataset in alldata:\n    dataset['Title']=dataset['Name'].str.extract('([A-Za-z]+)\\.',expand=False)","b123e4a6":"train.Title.value_counts()","0586e76c":"test.Title.value_counts()","f6973d36":"title_mapping={'Mr':0,'Mrs':1,'Miss':2,'Master':3,\n               'Dr':3,'Rev':3,'Col':3,'Major':3,'Mlle':3,'Countess':3,'Ms':3,'Lady':3,'Jonkheer':3,\n               'Don':3,'Mme':3,'Capt':3,'Sir':3,'Dona':3,} \nfor dataset in alldata:\n    dataset['Title']=dataset['Title'].map(title_mapping)\n                                                                                                                 ","11027d3c":"train.head(3)","6dbf8ccb":"test.head(3)","dcf42895":"bar_chart('Title')","76c0468c":"train.drop('Name',axis=1, inplace=True)\ntest.drop('Name', axis=1,inplace=True)","71fe3209":"train.head(2)","69ae392a":"test.head(2)","f1b6a6ec":"sex_mapping={'male':0,'female':1}\nfor dataset in alldata:\n    dataset['Sex']=dataset['Sex'].map(sex_mapping)","36c3f1d5":"train.head(2)","8de250b1":"bar_chart('Sex')","91fbc904":"train[train.Age.isnull()].shape","4e33a47b":"train.Age.fillna(train.groupby('Title')['Age'].transform('median'),inplace=True)\ntest.Age.fillna(test.groupby('Title')['Age'].transform('median'),inplace=True)","84e2163d":"train.isnull().sum().sort_values(ascending=False)","d1648c0d":"test.isnull().sum().sort_values(ascending=False)","0724dabf":"facet=sns.FacetGrid(train,hue='Survived',aspect=4)\nfacet.map(sns.kdeplot,'Age',shade=True)\nfacet.set(xlim=(0,train['Age'].max()))\nfacet.add_legend()\nplt.show()","7278eba4":"facet=sns.FacetGrid(train,hue='Survived',aspect=4)\nfacet.map(sns.kdeplot,'Age',shade=True)\nfacet.set(xlim=(0,train['Age'].max()))\nfacet.add_legend()\nplt.xlim(0,20)","22daa097":"facet=sns.FacetGrid(train,hue='Survived',aspect=4)\nfacet.map(sns.kdeplot,'Age',shade=True)\nfacet.set(xlim=(0,train['Age'].max()))\nfacet.add_legend()\nplt.xlim(20,35)","5e1f653a":"facet=sns.FacetGrid(train,hue='Survived',aspect=4)\nfacet.map(sns.kdeplot,'Age',shade=True)\nfacet.set(xlim=(0,train['Age'].max()))\nfacet.add_legend()\nplt.xlim(35,40)","cc29db2c":"facet=sns.FacetGrid(train,hue='Survived',aspect=4)\nfacet.map(sns.kdeplot,'Age',shade=True)\nfacet.set(xlim=(0,train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40,60)","2de217b3":"facet=sns.FacetGrid(train,hue='Survived',aspect=4)\nfacet.map(sns.kdeplot,'Age',shade=True)\nfacet.set(xlim=(0,train['Age'].max()))\nfacet.add_legend()\nplt.xlim(60)","032505a8":"for dataset in alldata:\n    dataset.loc[ dataset['Age']<= 15, 'Age']=0,\n    dataset.loc[(dataset['Age']>15) & (dataset['Age']<=35),'Age']=1,\n    dataset.loc[(dataset['Age']>35) & (dataset['Age']<=45),'Age']=2,\n    dataset.loc[(dataset['Age']>45) & (dataset['Age']<=60),'Age']=3,\n    dataset.loc[ dataset['Age']>60, 'Age']=4","1be9a04c":"train.head()","4fe9f127":"test.head()","7a800c80":"bar_chart('Age')","b0380c46":"#checking the majority of embarkation from various classes\nPclass1=train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2=train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3=train[train['Pclass']==3]['Embarked'].value_counts()\ndf=pd.DataFrame([Pclass1,Pclass2,Pclass3])\ndf.index=['1st class','2nd class','3rd class']\ndf.plot(kind='bar',stacked=True,figsize=(10,5))","dc53f684":"for dataset in alldata:\n    dataset['Embarked']=dataset['Embarked'].fillna('S')","82ca6889":"train.isnull().sum().sort_values(ascending=False)","2decc872":"embarked_mapping={'S':0,'C':1,'Q':2}\nfor dataset in alldata:\n    dataset[\"Embarked\"]=dataset['Embarked'].map(embarked_mapping)","fe812d0c":"train.head()","d778b151":"train['Fare'].fillna(train.groupby('Pclass')['Fare'].transform('median'),inplace=True)\ntest['Fare'].fillna(test.groupby('Pclass')['Fare'].transform('median'),inplace=True)","2f51f0b9":"train.isnull().sum().sort_values(ascending=False)","e7c0be66":"test.isnull().sum().sort_values(ascending=False)","6359292b":"facet=sns.FacetGrid(train,hue='Survived',aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade=True)\nfacet.set(xlim=(0,train.Fare.max()))\nfacet.add_legend()\nplt.show()","2922bb5f":"facet=sns.FacetGrid(train,hue='Survived',aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade=True)\nfacet.set(xlim=(0,train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0,20)","ef735a23":"facet=sns.FacetGrid(train,hue='Survived',aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade=True)\nfacet.set(xlim=(0,train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(20,40)","83561cd1":"for dataset in alldata:\n    dataset.loc[ dataset['Fare']<= 15, 'Fare']=0,\n    dataset.loc[(dataset['Fare']>15) & (dataset['Fare']<=30),'Fare']=1,\n    dataset.loc[(dataset['Fare']>30) & (dataset['Fare']<=100),'Fare']=2,\n    dataset.loc[(dataset['Fare']>100),'Fare']=3","d106b030":"train.head()","5078f424":"train.Cabin.value_counts()","2c058733":"for dataset in alldata:\n    dataset['Cabin']=dataset['Cabin'].str[:1]","854b8dd7":"#checking the majority of cabin from various classes\nPclass1=train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2=train[train['Pclass']==2]['Cabin'].value_counts()\nPclass3=train[train['Pclass']==3]['Cabin'].value_counts()\ndf=pd.DataFrame([Pclass1,Pclass2,Pclass3])\ndf.index=['1st class','2nd class','3rd class']\ndf.plot(kind='bar',stacked=True,figsize=(10,5))","d6d87db1":"cabin_mapping={'A':0,'B':0.4,'C':0.8,'D':1.2,'E':1.6,'F':2.0,'G':2.4,'T':2.8}\nfor dataset in alldata:\n    dataset['Cabin']=dataset['Cabin'].map(cabin_mapping)\ntrain.head()","55531d3c":"#fill the missing cabin values with median cabin value of each Pclass\ntrain['Cabin'].fillna(train.groupby('Pclass')['Cabin'].transform('median'),inplace=True)\ntest['Cabin'].fillna(train.groupby('Pclass')['Cabin'].transform('median'),inplace=True)\ntrain.head()","92157229":"train['Family_size']=train['SibSp']+train['Parch']+1\ntest['Family_size']=test['SibSp']+test['Parch']+1\ntrain.head()","40c600a5":"facet=sns.FacetGrid(train,hue='Survived',aspect=4)\nfacet.map(sns.kdeplot,'Family_size',shade=True)\nfacet.set(xlim=(0,train['Family_size'].max()))\nfacet.add_legend()","8996baab":"#changing continous family size variable into categorical values, we use mapping\nfamily_mapping={1:0,2:0.4,3:0.8,4:1.2,5:1.6,6:2.0,7:2.4,8:2.8,9:3.2,10:3.6,11:4.0}\nfor dataset in alldata:\n    dataset['Family_size']=dataset['Family_size'].map(family_mapping)\ntrain.head()","379c1e0b":"#dropping Ticket, SibSp and Parch columns\nfeatures_drop=['SibSp','Parch','Ticket']\ntrain=train.drop(features_drop,axis=1)\ntest=test.drop(features_drop,axis=1)\ntrain=train.drop(['PassengerId'],axis=1)\ntrain.head(2)","14ecca8d":"test.head()","2f93b383":"train_data=train.drop('Survived',axis=1)\ntarget=train['Survived']","88de2c01":"train_data.shape","6343994e":"target.shape","6a6bb5e3":"#importing classifier modules\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","5a639d61":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold=KFold(n_splits=10,shuffle=True,random_state=0)","7ec8070f":"clf=KNeighborsClassifier(n_neighbors=13)\nscoring= 'accuracy'\nscore=cross_val_score(clf,train_data,target,cv=k_fold,n_jobs=1,scoring=scoring)\nprint(score)\n","f9b92709":"round(np.mean(score)*100,2)","990411a1":"clf=KNeighborsClassifier(n_neighbors=13)\nclf.fit(train_data,target)\ntest_data=test.drop('PassengerId',axis=1).copy()\nprediction=clf.predict(test_data)","3ce7851d":"submission=pd.DataFrame({\n    'PassengerId':test['PassengerId'],\n    'Survived':prediction\n})\nsubmission.to_csv('submission.csv',index=False)","1fa61a11":"submission=pd.read_csv('gender_submission.csv')","3b276364":"submission.head()","227f2f4d":"<h2>\n<font color=\"blue\">\n3.0 Exploratory data analysis(EDA)\n<\/font>\n<\/h2>\n\n","a32bf502":"<h3>\n<font color=\"blue\">\nViewing missing values in train and test datasets\n<\/font>\n<\/h3>\n\n","e2e9545d":"<h2>\n<font color=\"blue\">\n1.0 Defining the problemm statement\n<\/font>\n<\/h2>\n\n","2500c71b":"<h3>\n<font color=\"blue\">\n4.1 How the titanic sank\n<\/font>\n<\/h3>\n\n","f6b17f73":"<h3>\n<font color=\"blue\">\nFilling the missing values for embarked\n<\/font>\n<\/h3>\n","43d6cb7b":"<h4>\n<font color=\"blue\">\nConvert fare into categorical through binning\n<\/font>\n<\/h4>\n","89c34cc9":"this shows that 177 rows have missing values for age","0245f38a":"<h2>\n<font color=\"blue\">\nPredict survival on the Titanic\n<\/font>\n<\/h2>\n\n","6c70d999":"1. Pclass\n2. Sex\n3. SibSp\n3. Parch\n4. Embarked \n5. Cabin","305deee7":"The name is not so much informative. However we can extract the title from the name; mrs,mr or miss. they can be informative. the title indicates wether the passenger is a man, woman married or not married. From data analysis we so that more females survived than males, therefore the title is a little informative.","6f68dc56":"1. Survived: 0=No, 1=Yes\n2. Pclass: Ticket class 1=1st, 2=2nd,3=3rd\n3. SibSp: # of siblings\/spouses aboard the titanic\n4. Parch: # of Parents\/children aboard the titanic\n5. Ticket: ticket number\n6. Cabin: cabin number\n7. Embarked: Port of embarkation C=Cherbourg, Q=Queenstown, S=Southampton","99ca6c2b":"<h3>\n<font color=\"blue\">\n4.6 Fare\n<\/font>\n<\/h3>\n","1be939ce":"<h3>\n<font color=\"blue\">\n4.4 Age\n<\/font>\n<\/h3>","3f4de957":"1. Titanic: Machine Learning from Disaster\n2. Kaggle - Titanic Solution [3\/3] - Classifier, Cross Validation\n3. Kaggle - Titanic Solution [2\/3] - Feature Engineering\n4. https:\/\/www.kaggle.com\/masumrumi\/a-statistical-analysis-ml-workflow-of-titanic#Part-5:-Feature-Engineering","08365c58":"from the plot we can see that:\n1. until 16yrs old, there are high chances to survive\n2. 16-35yrs had high chances to die\n3. 35-40yrs had high chances to die\n4. 45-60yrs had high chances to survive\n5. 60yrs and above had high chances to die","00c70c85":"<h4>\n<font color=\"blue\">\nDrop name and title\n<\/font>\n<\/h4>","a3efb9df":"This summary shows that there are some missing fields in the Age, Cabin and Embarked column","bebb2ffb":"<h4>\n<font color=\"blue\">\nSummary info about the dataset\n<\/font>\n<\/h4>\n\n","de36e6bd":"Feature engineering involves creation of new features and transformation of some existing features for machine learning algorithms","e4c2d225":"We can see that test data lacks 'Survived' column which is the target variable","439d3747":"<h2>\n<font color=\"blue\">\n6.0 Testing\n<\/font>\n<\/h2>","99a9a71c":"The chart confirms 3rd class more likely died and 1st class more likely survived","0367a705":"Check missing values on age","0f5fe282":"The chart shows that passengers withouth parents or children more likely died and \npassengers with parents or children more likely survived ","3e58030f":"<h3>\n<font color=\"blue\">\n4.2 Name\n<\/font>\n<\/h3>","509b7528":"The chart confirms that passengers without siblings or spouse more likely died and passengers with siblings or spouse more likely survived","56251a28":"<h3>\n<font color=\"blue\">\nData dictionary\n<\/font>\n<\/h3>\n\n","107deba9":"1. The chart shows that passengers aboarded from C slighlty more likely survived.\n2. The chart shows that passengers aboarded from Q more likely died.\n3. The chart shows that passengers aboarded from S more likely died.","5edc8331":"<h4>\n<font color=\"blue\">\nBar charts for categorical features\n<\/font>\n<\/h4>\n\n","8be4b7cd":"<h1>\n<font color=\"red\">\nreferences\n<\/font>\n<\/h1>","4dbf9e50":"majority of embarkation from all classes was from S. i will therefore fill the missing values with S","1515b0c4":"We should transform embarked feature from string to categorical","edb81a6c":"some features are not informative, so we are going to drop some of them","28927cef":"Embarked: Where did the passengers aboard the titanic, the cities they came from. Embarked is informative because the city this ppl lived can point the Pclas they took. For example ppl from rich cities will take 1st class and vise versa.\nThe column embarked has some missing values.","0f6682a0":"<h3>\n<font color=\"blue\">\nload train test dataset using pandas\n<\/font>\n<\/h3>\n\n","678f512c":"The chart confirms women more likely survived than men","117bebf7":"Age, Fare and cabin have missing fields in the test dataset","62589e42":"From the bars more female survived than males.","4568b6e1":"<h3>\n<font color=\"blue\">\nimporting classifier modules\n<\/font>\n<\/h3>","270b2adb":"<h4>\n<font color=\"blue\">\nmapping embarked\n<\/font>\n<\/h4>","06d41f49":"It first hit the iceberg from its head and started going down to the water therefore 3rd class passengers had more chances to die than the 2nd class and the 1st class. therefore Pclass and the cabin are more informative.","9c805b9d":"<h1>\n<font color=\"blue\">\nTITANIC:MACHINE LEARNING FROM DISASTER\n<\/font>\n<\/h1>\n\n","121b39f5":"<h2>\n<font color=\"blue\">\n5.0 Modelling\n<\/font>\n<\/h2>","0a3c9c63":"<h3>\n<font color=\"blue\">\nTitle mapping using only mr.:0, mrs.:1 miss:2 and others:3\n<\/font>\n<\/h3>","c9900c03":"<h4>\n<font color=\"blue\">\nfilling missing values\n<\/font>\n<\/h4>","64e84176":"from the barchart it is evident that 1st class had cabin A,B,C,D & E","0c15ece4":"I will fill the missing fare values with median fare for each class because fare is closely related to the class","64ec2151":"<h5>\n<font color=\"blue\">\nfill missing age values with median age for each title\n<\/font>\n<\/h5>","91bb8114":"All the missing values on age have been imputed with median title ages","5424247c":"<h3>\n<font color=\"blue\">\n4.7 Cabin\n<\/font>\n<\/h3>\n","8b19efd3":"<h3>\n<font color=\"blue\">\nVisualizations\n<\/font>\n<\/h3>\n\n","86c6bd03":"Mapping sex; male:0,female:1","be1549ea":"passengers with cheap ticket died more while majority with expensive ticket survived","23f2cf3e":"First we need to combine the two dataset using concat","d4b31803":"From the barchart mr had high chances of dying ","bce75d70":"<h3>\n<font color=\"blue\">\nCross validation\n<\/font>\n<\/h3>","469c6b43":"<h4>\n<font color=\"blue\">\nDropping unneccesary features\n<\/font>\n<\/h4>","49a559fc":" <h3>\n<font color=\"blue\">\n4.3 Sex\n<\/font>\n<\/h3>","c3e6a22a":"<h2>\n<font color=\"blue\">\n2.0 Collecting the Data\n<\/font>\n<\/h2>\n\n","71a076c5":"<h3>\n<font color=\"blue\">\n4.8 Family size\n<\/font>\n<\/h3>","aecd5bf2":"1. Define the problem statement\n2. Collecting the data\n3. EDA\n4. Feature Engineering\n5. Feature selection\n6. Modelling\n7. Testing\n","a1cfa7c0":"we need to create another feature, called family size: we get the family size by adding every passenger\nto the Parch and Sibsp","12ecf4fe":"Binning converts continous data into categorical\n1. child=0\n2. young=1\n3. adult=2\n4. mid_age=3\n5. senior=4","f1b71901":"<h3>\n<font color=\"blue\">\nPrinting 1st five rows of the data\n<\/font>\n<\/h3>\n\n","e6d0f31c":"1. more than 50% of 1st class are from S embark\n2. more than 50% of 2nd class are from S embark\n3. more than 50% of 3rd class are from S embark","3fde1847":"<h3>\n<font color=\"blue\">\nBinning Age\n<\/font>\n<\/h3>","e9e4de80":"Cabin is a room in the ship, it is informative; third class cabin had high chances to die while 1st class cabin had high chances to survive","8bd5deb5":"<h3>\n<font color=\"blue\">\n4.5 Embarked\n<\/font>\n<\/h3>","b70cfd83":"<h2>\n<font color=\"blue\">\n4.0 Feature Engineering\n<\/font>\n<\/h2>\n\n","daad0071":"Analyse people who are likely to survive. Use tools of machine learning to predict which passengers survived the tragedy"}}