{"cell_type":{"ad419598":"code","c3031985":"code","3abf436c":"code","5fff029f":"code","af78f5b2":"code","3a98b137":"code","9d63d568":"code","4bef1cb5":"code","0701ff4b":"code","6d1c3535":"code","5547879c":"code","b3192b0f":"code","49c3f00b":"markdown","8e9e3f67":"markdown","12d748ba":"markdown","52e970b7":"markdown","f22bb1ef":"markdown","3d784e91":"markdown","cef46a24":"markdown","886e8e7c":"markdown","e284a7bd":"markdown"},"source":{"ad419598":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom IPython.display import display\nimport matplotlib.pyplot as plt\nimport plotly\nimport plotly.graph_objs as go\nimport cv2\nimport random\nimport os\n%matplotlib inline\n\n# Init plotly for offline plotting\nplotly.offline.init_notebook_mode(connected=True)\n\nprint('Pandas version:', pd.__version__)\nprint('Numpy version:', np.__version__)\nprint('OpenCV version:', cv2.__version__)\nprint('Plotly version:', plotly.__version__)\nprint(os.listdir(\"..\/input\"))","c3031985":"# Load training data that maps business ID to labels\ntrain = pd.read_csv('..\/input\/train.csv')\ndisplay(train.head())\nprint('Shape of train data:', train.shape)\nprint('Number of unique businesses:', train.shape[0])","3abf436c":"# Load training data that maps photos to business ID\ntrain_photo_to_id = pd.read_csv('..\/input\/train_photo_to_biz_ids.csv')\ndisplay(train_photo_to_id.head())\nprint('Shape of train_photo_to_id:', train_photo_to_id.shape)\nprint('Number of images in training set:', train_photo_to_id.shape[0])","5fff029f":"train_dir = '..\/input\/train_photos'\ntrain_imgs = os.listdir(train_dir)\n\ntest_dir = '..\/input\/test_photos'\ntest_imgs = os.listdir(test_dir)\n\nprint('Number of training images:', len(train_imgs))\nprint('Number of testing images:', len(test_imgs))","af78f5b2":"# Business id to labels dataframe\nprint('Total number of missing labels:', train['labels'].isnull().sum())\ndisplay(train[train['labels'].isnull()])","3a98b137":"# Randomly sample 8 images\nimgs_samples = random.sample(train_imgs, 8)\n\n# Plot random sample of 8 images\nplt.figure(figsize=(15, 10))\nfor i in range(len(imgs_samples)):\n    # OpenCV2 reads images in BGR format\n    img = cv2.imread(os.path.join(train_dir, imgs_samples[i]))\n    # Switch color channels to RGB to make compatible with matplotlib imshow func\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    # Grab image's business ID and labels\n    business = train_photo_to_id.loc[train_photo_to_id['photo_id'] == int(imgs_samples[i][:-4]), 'business_id']\n    labels = train.loc[train['business_id'] == business.values[0], 'labels']\n    # Annotate each image with image ID, business ID, and labels\n    title = \"Image ID: \" + imgs_samples[i] + ' Business: ' + str(business.values[0]) + '\\nLabels: ' + ''.join(labels.values)\n    # Plot the image\n    plt.subplot(2, 4, i+1)\n    plt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)\n    plt.imshow(img)\n    plt.axis('off')\n    plt.title(title)\nplt.show()","9d63d568":"def load_img_shapes(path_to_img):\n    \"\"\" Return only the shape of an image (width, height, channels) \"\"\"\n    return cv2.imread(path_to_img).shape","4bef1cb5":"# Initialize arrays to hold image sizes\ntrain_shapes = []\ntest_shapes = []\n# Load in training\/testing image sizes\nfor i in range(len(train_imgs)):\n    img_path = os.path.join(train_dir, train_imgs[i])\n    train_shapes.append(load_img_shapes(img_path))\nfor i in range(len(test_imgs)):\n    img_path = os.path.join(test_dir, test_imgs[i])\n    test_shapes.append(load_img_shapes(img_path))\n\n# Store training image sizes in dataframe\ndf_train = pd.DataFrame({'Shapes': train_shapes})\ntrain_counts = df_train['Shapes'].value_counts()\n# Store testing image sizes in dataframe\ndf_test = pd.DataFrame({'Shapes': test_shapes})\ntest_counts = df_test['Shapes'].value_counts()\n\nprint(\"Training Image Shapes: First 100\")\nfor i in range(100):\n    print(\"Shape %s counts: %d\" % (train_counts.index[i], train_counts.values[i]))\nprint(\"*\"*50)\nprint(\"Testing Image Shapes: First 100\")\nfor i in range(100):\n    print(\"Shape %s counts: %d\" % (test_counts.index[i], test_counts.values[i]))","0701ff4b":"# Create barplot for image sizes distribution (training set)\nx_train = train_counts.index[:100]\nx_train = [str(x) for x in x_train]\ny_train = train_counts.values[:100]\n\n# Only plot first 100 value counts\nx_test = test_counts.index[:100]\nx_test = [str(x) for x in x_test]\ny_test = test_counts.values[:100]\n\n# Create traces\ntraining_trace = go.Bar(x=x_train,\n                        y=y_train,\n                        marker=dict(\n                            color='rgb(158,202,225)',\n                            line=dict(\n                                color='rgb(8,48,107)',\n                                width=1.5),\n                        ),\n                        opacity=0.6,\n                        name='training'\n                       )\ntesting_trace = go.Bar(x=x_test,\n                       y=y_test,\n                       marker=dict(\n                           color='rgb(58,102,245)',\n                           line=dict(\n                               color='rgb(8,48,107)',\n                               width=1.5),\n                       ),\n                       opacity=0.6,\n                       name='testing'\n                      )\n# Create layout\nlayout = go.Layout(font = dict(family = \"Overpass\"),\n                   title = 'Image size distributions (Top is training set, bottom is testing set)',\n#                    xaxis = dict(tickangle=-45, title = \"Image shapes\"),\n#                    xaxis2 = dict(tickangle=-45, title = \"Image shapes\"),\n                  )\n\nfig = plotly.tools.make_subplots(rows=2, cols=1,\n                                 vertical_spacing=0.4\n                                )\nfig.append_trace(training_trace, 1, 1)\nfig.append_trace(testing_trace, 2, 1)\nfig['layout'].update(font = dict(family = \"Overpass\"),\n                     title='Image size distributions (Top is training set, bottom is testing set)',\n                     xaxis = dict(tickangle=-45, title = \"Image shapes\"),\n                     xaxis2 = dict(tickangle=-45, title = \"Image shapes\")\n                    )\nplotly.offline.iplot(fig, validate=False, show_link=False)","6d1c3535":"# Count all labels in training set\nall_labels = ' '.join(list(train['labels'].fillna('nan').values)).split()\nfrom collections import Counter\nlabel_counts = Counter(all_labels)","5547879c":"for key in label_counts:\n    print('Label {0} appears {1} times in training dataset'.format(key, label_counts[key]))","b3192b0f":"# train_photo_to_id.groupby(\"photo_id\")\nprint('Number of duplicate photo IDs:', len(train_photo_to_id[train_photo_to_id['photo_id'].duplicated()]))\nprint('Number of duplicate business IDS:', len(train[train['business_id'].duplicated()]))","49c3f00b":"# Data Loading\n---\nLoad the data. The csv files that map image IDs to business IDs and business IDs to labels","8e9e3f67":"## List of Labels\n\n0: good_for_lunch\n\n1: good_for_dinner\n\n2: takes_reservations\n\n3: outdoor_seating\n\n4: restaurant_is_expensive\n\n5: has_alcohol\n\n6: has_table_service\n\n7: ambience_is_classy\n\n8: good_for_kids","12d748ba":"Most common image shape is (357, 500, 3) and all images have 3 color channels (RGB). There are a lot of images with different shapes so there will definitely be a lot of resizing. Probably to have a shape of (357, 500, 3) since that is the most common shape for both training and testing sets.","52e970b7":"## Missing Values","f22bb1ef":"# Visualize some Images\n---\nTake some random images and visualize them with their lables","3d784e91":"# Plot Image Size Distribution\n---\nPlot the distribution of image sizes for training and testing datasets. This is useful because if there are images with different pixel shapes then we have to resize them before feeding into a machine learning model.","cef46a24":"# Data Exploration for Yelp Image Classification Challenge\n---\nExploring the image data and labels, visualizing random samples of images, and plotting image shape distributions.","886e8e7c":"# Duplicate Values in Dataset\n---\nFind duplicate values in our training dataset if any.","e284a7bd":"# Distribution of Classes\n---\nEach image can have multiple classes assigned to it. Here we will look at the number of times each class occurs over the entire training set."}}