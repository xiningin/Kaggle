{"cell_type":{"93c727b5":"code","4cdea33f":"code","e837bbde":"code","43f898d4":"code","80eca0ce":"code","8bcb0cbc":"code","65207109":"code","2d442547":"code","8ec657c2":"code","63cc5f3e":"code","96d6070b":"code","8d98173d":"code","12cb5840":"code","aa03b2e0":"code","171a2847":"code","a8156f0c":"code","b0ff52f2":"code","fdb9b841":"code","5289ae8b":"code","61a95d99":"code","4de3e6bb":"code","cc99a23c":"code","d2440fd6":"code","e3275acf":"code","f32cc030":"code","de5960e7":"code","1fc2ee2b":"code","2faf4345":"code","b568190b":"code","3a99525c":"code","ff2a95b6":"code","2bce91d8":"code","ddd3d06f":"code","6b75bec4":"code","9493aa61":"code","d6c66480":"code","eec129db":"code","eabd384b":"code","4f8bbe19":"code","530c52df":"code","1461946e":"markdown","6c08dcda":"markdown","8f7b27cd":"markdown","a88e2d92":"markdown","19010b68":"markdown"},"source":{"93c727b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","4cdea33f":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","e837bbde":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","43f898d4":"train.info()","80eca0ce":"test.info()","8bcb0cbc":"all = pd.concat([train, test], sort = False)\nall.info()","65207109":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","2d442547":"all.info()","8ec657c2":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","63cc5f3e":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","96d6070b":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","8d98173d":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","12cb5840":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","aa03b2e0":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","171a2847":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","a8156f0c":"all.info()","b0ff52f2":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","fdb9b841":"all.info()","5289ae8b":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","61a95d99":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","4de3e6bb":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","cc99a23c":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","d2440fd6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","e3275acf":"from sklearn.ensemble import RandomForestClassifier","f32cc030":"RF_Model = RandomForestClassifier()","de5960e7":"#from sklearn.model_selection import GridSearchCV","1fc2ee2b":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","2faf4345":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","b568190b":"#RF_grid_model = RF_grid.fit(X_train, y_train)","3a99525c":"#RF_grid_model.best_estimator_","ff2a95b6":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","2bce91d8":"RF_Model.fit(X_train, y_train)","ddd3d06f":"predictions = RF_Model.predict(X_test)\npredictions","6b75bec4":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","9493aa61":"all_test.head()","d6c66480":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","eec129db":"t_pred = RF_Model.predict(TestForPred).astype(int)","eabd384b":"PassengerId = all_test['PassengerId']","4f8bbe19":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","530c52df":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","1461946e":"****Check Accuracy","6c08dcda":"****Extra Features:","8f7b27cd":"****Final Predictions","a88e2d92":"****Train\/Test Split","19010b68":"### Build Random Forest"}}