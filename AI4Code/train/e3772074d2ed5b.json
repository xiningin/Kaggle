{"cell_type":{"c64cf72b":"code","27d7e396":"code","811645b4":"code","8d1d541b":"code","28284a19":"code","f9752307":"code","60238584":"code","1b6df9ad":"code","c4fd17e4":"code","d2b1b4cb":"code","93a44b54":"code","f146d5a5":"code","16998bc7":"code","020bc391":"code","121e313f":"code","b402fd85":"code","2e3038f5":"markdown","e847356c":"markdown","2bd80986":"markdown","ef135a6a":"markdown","28b99e55":"markdown","d6517df0":"markdown","4d03a30d":"markdown","3ef28df4":"markdown","11ee2a12":"markdown","e2909290":"markdown","cae4a7aa":"markdown","fc30c004":"markdown","9a8014ed":"markdown","d0a3ad0e":"markdown","bca3ebe8":"markdown","25d32a32":"markdown"},"source":{"c64cf72b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","27d7e396":"import pandas as pd\nimport numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.cluster import DBSCAN\nimport collections\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn import metrics\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import silhouette_score\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sns","811645b4":"data= pd.read_csv(\"\/kaggle\/input\/ccdata\/CC GENERAL.csv\")\nprint(data.shape)\ndata.head()","8d1d541b":"x=data.iloc[:,1:]\nx.head()","28284a19":"missing = x.isnull().sum()\nprint(missing)","f9752307":"x['MINIMUM_PAYMENTS'].fillna((x['MINIMUM_PAYMENTS'].mean()), inplace=True)\nx['CREDIT_LIMIT'].fillna((x['CREDIT_LIMIT'].mean()), inplace=True)\nprint(missing)","60238584":"z_score = np.abs(stats.zscore(x))\nprint(z_score)","1b6df9ad":"data_without_outlier = pd.DataFrame(x[(z_score < 3).all(axis=1)], columns = x.columns)","c4fd17e4":"data_without_outlier.shape","d2b1b4cb":"scaler = StandardScaler()\nX = scaler.fit_transform(data_without_outlier)","93a44b54":"pca = PCA(n_components = 2) \nX_principal = pca.fit_transform(X) \nX_principal = pd.DataFrame(X_principal) \nX_principal.columns = ['P1', 'P2'] \n","f146d5a5":"#optimal no. of clusters\nn_clusters=20\ncost=[]\nfor i in range(1,n_clusters):\n    kmean= KMeans(i)\n    kmean.fit(X_principal)\n    cost.append(kmean.inertia_)  \n   \nplt.plot(cost, 'bx-')","16998bc7":"silhouette_scores = [] \nfor n_cluster in range(2, 8):\n    silhouette_scores.append(   \n        silhouette_score(X_principal, KMeans(n_clusters = n_cluster).fit_predict(X_principal))) \n    \nk = [2, 3, 4, 5, 6,7] \nplt.bar(k, silhouette_scores) \nplt.xlabel('Number of clusters', fontsize = 10) \nplt.ylabel('Silhouette Score', fontsize = 10) \nplt.show()    ","020bc391":"db_default = KMeans(n_clusters=3, init='k-means++').fit(X_principal) \nlabels = db_default.labels_  ","121e313f":"colours = {} \ncolours[0] = 'r'\ncolours[1] = 'y'\ncolours[2] = 'g'\n# Building the colour vector for each data point \ncvec = [colours[label] for label in labels] \n  \n# For the construction of the legend of the plot \n#r = plt.scatter(X_principal['P1'], X_principal['P2'], color ='r'); \n#y = plt.scatter(X_principal['P1'], X_principal['P2'], color ='y'); \n#g = plt.scatter(X_principal['P1'], X_principal['P2'], color ='g');  \n# Plotting P1 on the X-Axis and P2 on the Y-Axis  \n# according to the colour vector defined \nplt.figure(figsize =(9, 9))  \nplt.scatter(X_principal['P1'], X_principal['P2'], c = cvec) \n  \n# Building the legend \nplt.legend((r, y, g), ('Label 0','Label 1','Label 2')) \n  \nplt.show() ","b402fd85":"clusters=pd.concat([x, pd.DataFrame({'cluster':labels})], axis=1)\nclusters.head()\n\nfor cols in data_without_outlier:\n    g = sns.FacetGrid(clusters, col = 'cluster')\n    g.map(plt.hist, cols)","2e3038f5":"**Dealing with outliers**","e847356c":"**Applying K-Means with no. of clusters as 3 because it has maximum silhoutte score**","2bd80986":"**Cluster analysis**\n* Cluster 0 : Customers with more usage of credit card and makes more frequent purchases of product.\n* Cluster 1 : Customers with least usage of credit card.\n* Cluster 2 : Customers with moderate usage of credit card.","ef135a6a":"Standardization for feature scaling\n","28b99e55":"**Handling missing values**","d6517df0":"**Shape of data without outliers**","4d03a30d":"**Data after removing outliers**","3ef28df4":"**Importing data**\n","11ee2a12":"**Applying principal component analysis (PCA) for dimensionality reduction **","e2909290":"**Identifying Null Values**","cae4a7aa":"**Comparing silhoutte scores for different no. of clusters **","fc30c004":"**Importing all necessary libraries**\n","9a8014ed":"**Finding optimal number of clusters for K-MEANS**","d0a3ad0e":"**Visualization of clusters**","bca3ebe8":"visualizing each feature in each cluster","25d32a32":"**Customer ID is to be removed**\n(Customer ID is not required for clustering)"}}