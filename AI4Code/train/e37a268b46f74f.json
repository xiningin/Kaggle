{"cell_type":{"639f2383":"code","9c320dc9":"code","93ece4ce":"code","4d3cd51f":"code","a492b50f":"code","b892a470":"code","03444535":"code","87aac8e4":"code","ed59a6cf":"code","22504f2c":"code","725574ca":"code","770a836a":"code","54ecdb92":"code","876d9d7a":"code","f8be768d":"code","10d364dc":"code","bc292ccb":"markdown","fc5c613a":"markdown"},"source":{"639f2383":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nfrom sklearn import model_selection, preprocessing, metrics\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport shap\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom sklearn import preprocessing\nimport xgboost as xgb\nimport gc\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n## Memory Reducer\n# :df pandas dataframe to reduce size             # type: pd.DataFrame()\n# :verbose                                        # type: bool\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","9c320dc9":"train = pd.read_pickle('..\/input\/ieee-fe-with-some-eda\/train_df.pkl')\ntest = pd.read_pickle('..\/input\/ieee-fe-with-some-eda\/test_df.pkl')\nremove_features = pd.read_pickle('..\/input\/ieee-fe-with-some-eda\/remove_features.pkl')\nremove_features = list(remove_features['features_to_remove'].values)\nprint(remove_features)\n########################### Final features list\nfeatures = [col for col in test.columns if col not in remove_features]\ntrain = train[features]\ntest = test[features]\ntrain = reduce_mem_usage(train)\ntest = reduce_mem_usage(test)","93ece4ce":"train.shape\n","4d3cd51f":"test.shape","a492b50f":"train['target'] = 0\ntest['target'] = 1","b892a470":"train_test = pd.concat([train, test], axis =0)\n\ntarget = train_test['target'].values","03444535":"del train, test","87aac8e4":"gc.collect()","ed59a6cf":"train, test = model_selection.train_test_split(train_test, test_size=0.33, random_state=42, shuffle=True)","22504f2c":"del train_test\ngc.collect()","725574ca":"train_y = train['target'].values\ntest_y = test['target'].values\ndel train['target'], test['target']\ngc.collect()","770a836a":"train = lgb.Dataset(train, label=train_y)\ntest = lgb.Dataset(test, label=test_y)\n","54ecdb92":"param = {'num_leaves': 50,\n         'min_data_in_leaf': 30, \n         'objective':'binary',\n         'max_depth': 5,\n         'learning_rate': 0.2,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 44,\n         \"metric\": 'auc',\n         \"verbosity\": -1}","876d9d7a":"num_round = 100\nclf = lgb.train(param, train, num_round, valid_sets = [train, test], verbose_eval=50, early_stopping_rounds = 50)","f8be768d":"feature_imp = pd.DataFrame(sorted(zip(clf.feature_importance(),features)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 300))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False).head(500))\nplt.title('LightGBM Features')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-01.png')","10d364dc":"feature_imp.sort_values(by=\"Value\", ascending=False).head(500)","bc292ccb":"# Results:\n\n1. The AUC for the model to predict train\/test split is above 0.99\n2. The following plot shows which features might be dangerous.","fc5c613a":"# Credits:\n1. [IEEE - FE with some EDA](https:\/\/www.kaggle.com\/kyakovlev\/ieee-fe-with-some-eda), by [Konstantin Yakovlev](https:\/\/www.kaggle.com\/kyakovlev)\n2. [Adversarial IEEE](https:\/\/www.kaggle.com\/tunguz\/adversarial-ieee), by [Bojan Tunguz](https:\/\/www.kaggle.com\/tunguz)\n\n# Objective:\nI would like to see how stable the current public kernels are. That's why I pulled the features by [Konstantin Yakovlev](https:\/\/www.kaggle.com\/kyakovlev) and put them to [Bojan Tunguz](https:\/\/www.kaggle.com\/tunguz)'s Adversarial Validation script. "}}