{"cell_type":{"27d85c66":"code","bce354f1":"code","f3a84271":"code","3184e547":"code","809905ee":"code","95520b90":"code","805c6a62":"code","aedf253d":"code","69d1dd2b":"code","4dc67246":"code","02db4f60":"code","f1493379":"code","ec02ceaf":"code","9a2acf34":"markdown"},"source":{"27d85c66":"%%writefile score.c\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define NF 5000\nint cost[NF][101];\nint fs[NF];\n\nint cf[NF][10];\n\nint loaded=0;\n\nvoid read_fam() {\n  FILE *f;\n  char s[1000];\n  int d[101],fid,n;\n  int *c;\n\n  f=fopen(\"..\/input\/santa-workshop-tour-2019\/family_data.csv\",\"r\");\n  if (fgets(s,1000,f)==NULL)\n    exit(-1);\n\n  for(int i=0;i<5000;i++) {\n    c = &cf[i][0];\n    if (fscanf(f,\"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\",\n               &fid,&c[0],&c[1],&c[2],&c[3],&c[4],&c[5],&c[6],&c[7],&c[8],&c[9],&fs[i])!=12)\n      exit(-1);\n\n    \/\/    printf(\"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\\n\",\n    \/\/fid,c[0],c[1],c[2],c[3],c[4],c[5],c[6],c[7],c[8],c[9],fs[i]);\n    n = fs[i];\n\n    for(int j=1;j<=100;j++) {\n      if (j==c[0]) cost[i][j]=0;\n      else if (j==c[1]) cost[i][j]=50;\n      else if (j==c[2]) cost[i][j]=50 + 9 * n;\n      else if (j==c[3]) cost[i][j]=100 + 9 * n;\n      else if (j==c[4]) cost[i][j]=200 + 9 * n;\n      else if (j==c[5]) cost[i][j]=200 + 18 * n;\n      else if (j==c[6]) cost[i][j]=300 + 18 * n;\n      else if (j==c[7]) cost[i][j]=300 + 36 * n;\n      else if (j==c[8]) cost[i][j]=400 + 36 * n;\n      else if (j==c[9]) cost[i][j]=500 + 36 * n + 199 * n;\n      else cost[i][j]=500 + 36 * n + 398 * n;\n    }\n  }\n\n}\n\nfloat max_cost=1000000000;\n\nint day_occ[102];\n\nstatic inline int day_occ_ok(int d) {\n  return !(d <125 || d>300);\n}\n\nfloat score(int *pred) {\n  float r=0;\n    \n  if (!loaded) {\n      read_fam();\n      loaded = 1;\n  }\n\n  \/\/ validate day occupancy\n  memset(day_occ,0,101*sizeof(int));\n  for(int i=0;i<NF;i++)\n    day_occ[pred[i]]+=fs[i];\n  for(int i=1;i<101;i++)\n    if (!day_occ_ok(day_occ[i])) {\n      \/\/printf(\"inv occ %d %d\\n\",i,day_occ[i]);\n      return max_cost;\n    }\n\n  for(int i=0;i<NF;) {\n    r+=cost[i][pred[i]]+cost[i+1][pred[i+1]]+cost[i+2][pred[i+2]]+cost[i+3][pred[i+3]]+\n      cost[i+4][pred[i+4]]+cost[i+5][pred[i+5]]+cost[i+6][pred[i+6]]+cost[i+7][pred[i+7]]+\n      cost[i+8][pred[i+8]]+cost[i+9][pred[i+9]];\n    i+=10;\n    r+=cost[i][pred[i]]+cost[i+1][pred[i+1]]+cost[i+2][pred[i+2]]+cost[i+3][pred[i+3]]+\n      cost[i+4][pred[i+4]]+cost[i+5][pred[i+5]]+cost[i+6][pred[i+6]]+cost[i+7][pred[i+7]]+\n      cost[i+8][pred[i+8]]+cost[i+9][pred[i+9]];\n    i+=10;\n    r+=cost[i][pred[i]]+cost[i+1][pred[i+1]]+cost[i+2][pred[i+2]]+cost[i+3][pred[i+3]]+\n      cost[i+4][pred[i+4]]+cost[i+5][pred[i+5]]+cost[i+6][pred[i+6]]+cost[i+7][pred[i+7]]+\n      cost[i+8][pred[i+8]]+cost[i+9][pred[i+9]];\n    i+=10;\n    r+=cost[i][pred[i]]+cost[i+1][pred[i+1]]+cost[i+2][pred[i+2]]+cost[i+3][pred[i+3]]+\n      cost[i+4][pred[i+4]]+cost[i+5][pred[i+5]]+cost[i+6][pred[i+6]]+cost[i+7][pred[i+7]]+\n      cost[i+8][pred[i+8]]+cost[i+9][pred[i+9]];\n    i+=10;\n    r+=cost[i][pred[i]]+cost[i+1][pred[i+1]]+cost[i+2][pred[i+2]]+cost[i+3][pred[i+3]]+\n      cost[i+4][pred[i+4]]+cost[i+5][pred[i+5]]+cost[i+6][pred[i+6]]+cost[i+7][pred[i+7]]+\n      cost[i+8][pred[i+8]]+cost[i+9][pred[i+9]];\n    i+=10;\n\n  }\n    \n  day_occ[101]=day_occ[100];\n\n  for (int d=1;d<=100;d++)\n    r += (day_occ[d]-125.0)\/400.0 * pow(day_occ[d] , 0.5 + fabs(day_occ[d]-day_occ[d+1]) \/ 50 );\n\n  return r;\n}  ","bce354f1":"!gcc -O5 -shared -Wl,-soname,score     -o score.so     -fPIC score.c\n!ls -l score.so","f3a84271":"# Let's import the score function in python\nimport ctypes\nfrom numpy.ctypeslib import ndpointer\n\nlib = ctypes.CDLL('.\/score.so')\nscore = lib.score\n# Define the types of the output and arguments of this function.\nscore.restype = ctypes.c_float\nscore.argtypes = [ndpointer(ctypes.c_int)]\n","3184e547":"# From now on, below is pure basic python with greedy approach\n\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm_notebook as tqdm\n\nsub = pd.read_csv('..\/input\/genetic-algorithm-basics\/submission.csv')\npred = np.int32(sub.assigned_day.values)\nscore(pred)","809905ee":"# fast enough ? ;-) \n%timeit score(pred)","95520b90":"fam = pd.read_csv(\"..\/input\/santa-workshop-tour-2019\/family_data.csv\")\n# preferred day per familly\npref = fam.values[:,1:-1]\nn_people = fam.n_people.values\nfam_size_order = np.argsort(n_people)#[::-1]\n","805c6a62":"# First try to assign preferred days to each family, repeat 20 times\n\nbest_score = score(pred)\n\nfor t in tqdm(range(20)):\n    print(t,best_score,'     ',end='\\r')\n    for i in fam_size_order:\n        for j in range(10):\n            di = pred[i]\n            pred[i] = pref[i,j]\n            cur_score = score(pred)\n            if cur_score < best_score:\n                best_score = cur_score\n            else:\n                pred[i] = di\n","aedf253d":"# Then try to trade days between families by pair\n\ndef opt():\n    best_score = score(pred)\n    for i in tqdm(range(5000)):\n        if (i%10==0):\n            print(i,best_score,'     ',end='\\r')\n        for j in fam_size_order:\n            di = pred[i]\n            pred[i] = pred[j]\n            pred[j] = di\n            cur_score = score(pred)\n            if cur_score < best_score:\n                best_score = cur_score\n            else: # revert\n                pred[j] = pred[i]\n                pred[i] = di\n            \nopt()\nopt()\n            ","69d1dd2b":"sub.assigned_day = pred\n_score = score(pred)\n\nsub.to_csv(f'submission_{_score}.csv',index=False)","4dc67246":"!ls -l","02db4f60":"# Try again to assign preferred days to each family, repeat 20 times\n\nbest_score = score(pred)\n\nfor t in tqdm(range(20)):\n    print(t,best_score,'     ',end='\\r')\n    for i in fam_size_order:\n        for j in range(10):\n            di = pred[i]\n            pred[i] = pref[i,j]\n            cur_score = score(pred)\n            if cur_score < best_score:\n                best_score = cur_score\n            else:\n                pred[i] = di\n","f1493379":"import random\nfrom numba import jit\n# random.shuffle(fam_size_order)\n# Now try to trade days between three families\n\n# @jit(nopython=False)\ndef opt():\n    best_score = score(pred)\n    for i in tqdm(range(5000)):\n        if (i%10==0):\n            print(i,best_score,'     ',end='\\r')\n        for j in fam_size_order:\n            #random.shuffle(fam_size_order)\n            y = random.randint(0, 4999)# for y in fam_size_order:\n            di = pred[i]\n            pred[i] = pred[j]\n            pred[j] = pred[y]\n            pred[y] = di\n            cur_score = score(pred)\n            if cur_score < best_score:\n                best_score = cur_score\n            else: # revert\n                pred[y] = pred[j]\n                pred[j] = pred[i]\n                pred[i] = di\n\nopt()","ec02ceaf":"sub.assigned_day = pred\n_score = score(pred)\n\nsub.to_csv(f'submission_{_score}.csv',index=False)","9a2acf34":"* Credit for fast scoring and the dual shuffle goes to https:\/\/www.kaggle.com\/sekrier\/fast-scoring-using-c-52-usec\n* Credit for the starting values goes to https:\/\/www.kaggle.com\/isaienkov\/genetic-algorithm-basics\n* For ealier versions: Credit for the starting values goes to https:\/\/www.kaggle.com\/jazivxt\/using-a-baseline\n"}}