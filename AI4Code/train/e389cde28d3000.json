{"cell_type":{"c88350d0":"code","71cb8c6a":"code","6d5b0bdd":"code","7bff91cd":"code","2bc79a58":"code","336a0cea":"code","0aaf46cc":"code","b6cf48b8":"code","637090b6":"code","9ebb3c1b":"code","8769f61e":"code","b6e4bd2b":"code","90e84af0":"code","58bdbc20":"markdown","b41cd779":"markdown","1cd46abe":"markdown","0a84debf":"markdown","87ec5eee":"markdown","05809293":"markdown","92e14378":"markdown"},"source":{"c88350d0":"import pandas as pd\nimport os\nfilepath = '..\/input\/'+os.listdir('..\/input')[0]+\"\/anv.csv\"\ndf_original = pd.read_csv(filepath)\n\nresposta = [['aeronave_operador_categoria','Qualitativa Nominal'],['aeronave_tipo_veiculo','Qualitativa Nominal'],['aeronave_motor_tipo','Qualitativa Nominal'],['aeronave_motor_quantidade','Qualitativa Nominal'],['aeronave_ano_fabricacao','Quantitativa Discreta'],['aeronave_pais_fabricante','Qualitativa Nominal'],['aeronave_nivel_dano','Qualitativa Ordinal'],['total_fatalidades','Quantitativa Discreta']]\n\nresposta = pd.DataFrame(resposta, columns=[\"Variavel\", \"Classifica\u00e7\u00e3o\"])\nresposta","71cb8c6a":"specific_columns = ['aeronave_operador_categoria','aeronave_tipo_veiculo','aeronave_motor_tipo','aeronave_motor_quantidade','aeronave_pais_fabricante','aeronave_nivel_dano']\n\nfreq_dfs = {}\n\nfor column in specific_columns:\n    print(\"Tabela de frequ\u00eancia para a vari\u00e1vel \"+column)\n    freq_dfs[column] = df_original[column].value_counts().to_frame().reset_index(inplace=False).rename(columns = {''+column:'qtde'}).rename(columns = {'index':column})\n    display(freq_dfs[column].style.hide_index())\n    print(\"____\")","6d5b0bdd":"arr = ['aeronave_operador_categoria', 'aeronave_tipo_veiculo', 'aeronave_motor_tipo', 'aeronave_motor_quantidade', 'aeronave_ano_fabricacao', 'aeronave_pais_fabricante', 'aeronave_nivel_dano', 'total_fatalidades']\n\nvarname = 'aeronave_operador_categoria'\ndf = freq_dfs[varname]\nimport matplotlib.pyplot as plt\nfig=plt.figure(figsize=(16,8))\nplt.bar(df[varname], df['qtde'],   label = varname, color = 'salmon')\nplt.xticks(rotation='vertical')\nplt.ylabel(\"Quantidade\")\nplt.xlabel(varname)\nplt.title(\"Categoria do operador da aeronave vs Quantidade de ocorr\u00eancias\")\n\nfor i in range(len(df['qtde'])):\n    plt.annotate(df['qtde'][i],xy=(i,11+df['qtde'][i]), horizontalalignment=\"center\", weight='bold')\n\nplt.legend()\n\nplt.show()","7bff91cd":"def plot_horizontal_bar(df,subplot_index,title):\n    df = df.sort_values('qtde',ascending=1)\n    \n    ax = plt.subplot(1,2,subplot_index)\n    \n    if subplot_index==1:\n        plt.ylabel(varname)\n        color = ['powderblue']+['yellowgreen' for i in range(len(df)-1)]\n    else:\n        color = 'powderblue'\n    \n    ax.barh(df[varname], df['qtde'],   label = varname, color = color)\n    plt.xticks(rotation='vertical')\n\n    \n    plt.xlabel(\"Quantidade\")\n    ax.set_title(title)\n    plt.legend()\n    for i in range(len(df['qtde'])):\n        ax.annotate(\n            df['qtde'].values[i],\n            xy=(df['qtde'].values[i],i),\n            horizontalalignment=\"center\",\n            verticalalignment=\"center\",\n            weight='bold',\n            bbox=dict(facecolor='white', edgecolor='none', pad=2),\n            xytext=(40,0),textcoords='offset pixels',arrowprops=dict(facecolor='black', shrink=0.05, width = 0.8,headwidth=5)\n        )\n\nvarname = 'aeronave_tipo_veiculo'\ndf = freq_dfs['aeronave_tipo_veiculo']\n\ndf_principais = df[(df[varname]==\"AVI\u00c3O\")|(df[varname]==\"HELIC\u00d3PTERO\")|(df[varname]==\"ULTRALEVE\")]\ndf_outros = df[(df[varname]!=\"AVI\u00c3O\")&(df[varname]!=\"HELIC\u00d3PTERO\")&(df[varname]!=\"ULTRALEVE\")]\ntotal_outros = df_outros['qtde'].sum()\nnew_row = {}\nnew_row[varname] = 'OUTROS'\nnew_row['qtde'] = total_outros\ndf_principais = df_principais.append(new_row, ignore_index=True)\n\nfig=plt.figure(figsize=(20,10))\nfig.suptitle(\"Tipo da aeronave vs Quantidade de ocorr\u00eancias\")\nplot_horizontal_bar(df_principais,1,\"Principais tipos\")\nplot_horizontal_bar(df_outros,2,\"Breakdown de outros\")\n\nplt.show()","2bc79a58":"def print_polar(df,subplot_index,title=None):\n    # Compute pie slices\n    N = len(df)\n\n    theta_step = 2 * np.pi \/ 8\n    theta = [np.pi\/8 + theta_step*i for i in range(N)]\n\n    radii = df['qtde'].values\n    width = np.pi\/4\n\n    colors = plt.cm.plasma(radii \/ 5000.)\n    \n    ax = plt.subplot(1,2,subplot_index, projection='polar')\n    ax.set_title(title)\n    ax.bar(theta, radii, width=width, bottom=1, color=colors, alpha=0.5)\n    ax.set_rlabel_position(0)\n    plt.yticks(fontsize=11,weight=\"bold\")\n    i = 0\n    for row in df.itertuples():\n        ax.annotate(getattr(row,varname)+\", \"+str(row.qtde),\n                    xy=(theta[i], df['qtde'].max()),  # theta, radius\n                    horizontalalignment='center',\n                    verticalalignment='bottom',\n                    weight='bold',\n                    bbox=dict(facecolor='white', edgecolor='none', pad=2),\n                    )\n        i=i+1\n        \nimport numpy as np\nvarname = 'aeronave_motor_tipo'\n\ndf = freq_dfs[varname]\n\n## total do \"Outros\"\ndf_outros = df[(df[varname]!=\"PIST\u00c3O\") & (df[varname]!=\"JATO\")]\ntotal_outros = df_outros['qtde'].sum()\n\n## fazendo dos motores principais:\ndf_resumo = df[(df[varname]==\"PIST\u00c3O\") | (df[varname]==\"JATO\")]\nnew_row = {}\nnew_row[varname] = \"OUTROS\"\nnew_row['qtde'] = total_outros\ndf_resumo = df_resumo.append(new_row,ignore_index=True)\n\n\nfig=plt.figure(figsize=(16,8))\nfig.suptitle(\"Tipo de motor vs n\u00famero de ocorr\u00eancias\", fontsize = 16)\nprint_polar(df_resumo,1,\"Principais tipos\")\nprint_polar(df_outros,2,\"Breakdown do Outros\")\n\n\nplt.show()","336a0cea":"def plot_horizontal_bar(df,subplot_index,title):\n    df = df.sort_values('qtde',ascending=1)\n    \n    ax = plt.subplot(1,2,subplot_index)\n    \n    if subplot_index==1:\n        plt.ylabel(varname)\n        color = ['powderblue']+['yellowgreen' for i in range(len(df)-1)]\n    else:\n        color = 'powderblue'\n        \n    \n    ax.barh(df[varname], df['qtde'],   label = varname, color = color)\n    plt.xticks(rotation='vertical')\n\n    \n    plt.xlabel(\"Quantidade\")\n    ax.set_title(title)\n    plt.legend()\n    for i in range(len(df['qtde'])):\n        ax.annotate(\n            df['qtde'].values[i],\n            xy=(df['qtde'].values[i],i),\n            horizontalalignment=\"center\",\n            verticalalignment=\"center\",\n            weight='bold',\n            bbox=dict(facecolor='white', edgecolor='none', pad=2),\n            xytext=(40,0),textcoords='offset pixels',arrowprops=dict(facecolor='black', shrink=0.05, width = 0.8,headwidth=5)\n        )\n\nvarname = 'aeronave_motor_quantidade'\ndf = freq_dfs[varname]\n\ndf_principais = df[(df[varname]==\"MONOMOTOR\")|(df[varname]==\"BIMOTOR\")]\ndf_outros = df[(df[varname]!=\"MONOMOTOR\")&(df[varname]!=\"BIMOTOR\")]\ntotal_outros = df_outros['qtde'].sum()\nnew_row = {}\nnew_row[varname] = 'OUTROS'\nnew_row['qtde'] = total_outros\ndf_principais = df_principais.append(new_row, ignore_index=True)\n\nfig=plt.figure(figsize=(20,8))\nfig.suptitle(\"Quantidade de motores da aeronave vs Quantidade de ocorr\u00eancias\")\nplot_horizontal_bar(df_principais,1,\"Principais tipos\")\nplot_horizontal_bar(df_outros,2,\"Breakdown de outros\")\n\nplt.show()","0aaf46cc":"arr = ['aeronave_operador_categoria', 'aeronave_tipo_veiculo', 'aeronave_motor_tipo', 'aeronave_motor_quantidade', 'aeronave_ano_fabricacao', 'aeronave_pais_fabricante', 'aeronave_nivel_dano', 'total_fatalidades']\n\nvarname = 'aeronave_ano_fabricacao'\ndf = df_original[varname].value_counts().to_frame().reset_index(inplace=False).rename(columns = {''+varname:'qtde'}).rename(columns = {'index':varname})\ndf = df[df[varname]>0]\ndf = df.sort_values(varname,ascending=0)\n\n\nfig=plt.figure(figsize=(16,8))\nplt.plot(df[varname], df['qtde'],   label = varname, color = 'salmon')\nplt.xticks(rotation='vertical')\nplt.ylabel(\"Quantidade\")\nplt.xlabel(varname)\nplt.title(\"Ano de fabrica\u00e7\u00e3o da aeronave vs Quantidade de ocorr\u00eancias\")\nplt.legend()\nplt.show()\n\nfig=plt.figure(figsize=(16,8))\nplt.hist(df_original[df_original[varname]>0][varname],   label = varname, color = 'lightgray',edgecolor=\"black\")\nplt.xticks(rotation='vertical')\nplt.ylabel(\"Quantidade\")\nplt.xlabel(varname)\nplt.title(\"Ano de fabrica\u00e7\u00e3o da aeronave vs Quantidade de ocorr\u00eancias\")\nplt.legend()\n#for i in range(len(df['qtde'])):\n#    plt.annotate(df['qtde'][i],xy=(i,11+df['qtde'][i]), horizontalalignment=\"center\", weight='bold')\nplt.grid()\nplt.show()\n","b6cf48b8":"import geopandas\n\ncountries_df = freq_dfs['aeronave_pais_fabricante']\ncountries_df['iso'] = countries_df['aeronave_pais_fabricante']\ncountries_df['iso'].replace({\"ESTADOS UNIDOS\":\"USA\",\"BRASIL\":\"BRA\",\"FRAN\u00c7A\":\"FRA\",\"N\u00c3O IDENTIFICADO\":\"ND\",\"ARGENTINA\":\"ARG\",\"HOLANDA\":\"NLD\",\"CANAD\u00c1\":\"CAN\",\"IT\u00c1LIA\":\"ITA\",\"JAP\u00c3O\":\"JPN\",\"AUSTRIA\":\"AUT\",\"REP\u00daBLICA TCHECA\":\"CZE\",\"ALEMANHA\":\"DEU\",\"SUI\u00c7A\":\"CHE\",\"INGLATERRA\":\"GBR\",\"POL\u00d4NIA\":\"POL\",\"UCR\u00c2NIA\":\"UKR\"},inplace=True)\n\nworld = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))\n\n\n## adicionando dados de aeronaves fabricadas\nworld['aeronaves_fabricadas'] = [0 for i in range(len(world))]\ndef func(x):\n    if not countries_df[countries_df['iso'] == x['iso_a3']].empty:\n\n        x['aeronaves_fabricadas'] = countries_df[countries_df['iso'] == x['iso_a3']].values[0][1]\n    return x\nworld = world.apply(func,axis=1 )\n\n## criando coluna de coordenadas xy para anota\u00e7\u00f5es no mapa\nworld['coords'] = world.apply(lambda x : x['geometry'].representative_point().coords[0],axis=1)\n\n## criando plots b\u00e1sicos do mapa mundi\nbase = world.plot(figsize=(32, 16), vmin=1, color ='gray', edgecolor=\"black\")\nworld_filtered = world[world['aeronaves_fabricadas']!=0]\nworld_filtered.plot(ax=base,figsize=(32, 16), vmin=1, column = 'aeronaves_fabricadas', cmap='OrRd',edgecolor=\"black\", legend = True)\nplt.title(\"N\u00famero de aeronaves fabricadas por pa\u00eds, dentro do registro de acidentes a\u00e9reos\", fontsize=18)\n\neurope_total = 0\nfor row in world_filtered.itertuples():\n    if not row.continent == \"Europe\":\n        plt.annotate(s=row.name+\", \"+str(row.aeronaves_fabricadas),xy=row.coords,weight='bold', fontsize=18,xytext=(100,5),textcoords='offset pixels',arrowprops=dict(facecolor='black', shrink=0.05), bbox=dict(facecolor='white', edgecolor='none', pad=2),)\n    else:\n        europe_total += row.aeronaves_fabricadas\nplt.annotate(s=\"Europe, \"+str(europe_total),xy=world[world['iso_a3']==\"FRA\"]['coords'].values[0],weight='bold', fontsize=18,xytext=(100,15),textcoords='offset pixels',arrowprops=dict(facecolor='black', shrink=0.05), bbox=dict(facecolor='white', edgecolor='none', pad=2),)\n    \n## criando plot zoom na europa\n\n## limpando territ\u00f3rio franc\u00eas\nworld.loc[world['iso_a3']==\"FRA\",'geometry'] = world[world['iso_a3']==\"FRA\"]['geometry'].values[0][2]\n## limpando territ\u00f3rio noruegu\u00eas\nworld.loc[world['iso_a3']==\"NOR\",'geometry'] = world[world['iso_a3']==\"NOR\"]['geometry'].values[0][0]\n\neurope = world[(world['continent']==\"Europe\") & (world['name']!=\"Russia\")]\neurope_base = europe.plot(figsize=(32, 16), vmin=1, color ='white', edgecolor=\"black\")\neurope_filtered = europe[europe['aeronaves_fabricadas']!=0]\neurope_filtered.plot(ax=europe_base,figsize=(32, 16), vmin=1, column = 'aeronaves_fabricadas',cmap='OrRd', edgecolor=\"black\", legend = True)\nplt.title(\"N\u00famero de aeronaves fabricadas por pa\u00eds na Europa, dentro do registro de acidentes a\u00e9reos\", fontsize=18)\n\nfor row in europe_filtered.itertuples():\n    plt.annotate(s=row.name+\", \"+str(row.aeronaves_fabricadas),xy=row.coords,weight='bold', fontsize=14, bbox=dict(facecolor='white', edgecolor='none', pad=2),)\nplt.show()\n","637090b6":"def print_polar(df,subplot_index,title=None):\n    # Compute pie slices\n    N = len(df)\n\n    theta_step = 2 * np.pi \/ 8\n    theta = [np.pi\/8 + theta_step*i for i in range(N)]\n\n    radii = df['qtde'].values\n    width = np.pi\/4\n\n    colors = plt.cm.plasma(radii \/ 5000.)\n    \n    ax = plt.subplot(1,1,subplot_index, projection='polar')\n    ax.set_title(title)\n    ax.bar(theta, radii, width=width, bottom=1, color=colors, alpha=0.5)\n    ax.set_rlabel_position(0)\n    plt.yticks(fontsize=10,weight=\"bold\")\n    i = 0\n    for row in df.itertuples():\n        ax.annotate(getattr(row,varname)+\", \"+str(row.qtde),\n                    xy=(theta[i], df['qtde'].max()),  # theta, radius\n                    horizontalalignment='center',\n                    verticalalignment='bottom',\n                    weight='bold',\n                    bbox=dict(facecolor='white', edgecolor='none', pad=2),\n                    )\n        i=i+1\n        \nimport numpy as np\nvarname = 'aeronave_nivel_dano'\n\ndf = freq_dfs[varname]\ndf.loc[df[varname]==\"NENHUM\",varname]=\"0.NENHUM\"\ndf.loc[df[varname]==\"LEVE\",varname]=\"1.LEVE\"\ndf.loc[df[varname]==\"SUBSTANCIAL\",varname]=\"2.SUBSTANCIAL\"\ndf.loc[df[varname]==\"DESTRU\u00cdDA\",varname]=\"3.DESTRUIDA\"\ndf = df.sort_values(varname, ascending = True)\n\nfig=plt.figure(figsize=(20,8))\nfig.suptitle(\"N\u00edvel de dano na aeronave vs n\u00famero de ocorr\u00eancias\", fontsize = 16)\nprint_polar(df,1,\"Principais tipos\")\n\nplt.show()","9ebb3c1b":"varname = 'total_fatalidades'\n\nfig=plt.figure(figsize=(16,8))\nbins = [0,1,2,3,4,5,10,20,df_original[varname].max()]\nplt.hist(df_original[varname],bins,   label = varname, color = 'lightgray',edgecolor=\"black\")\nplt.xticks(rotation='vertical')\nplt.ylabel(\"Quantidade\")\nplt.xlabel(varname)\nplt.title(\"Total de fatalidades vs Quantidade de ocorr\u00eancias\")\nplt.legend()\nfor i in range(len(bins)):\n    \n    if i == 0:\n        y = df_original[df_original[varname]==bins[i]][varname]\n    else:\n        y = df_original[(df_original[varname]>bins[i-1]) & (df_original[varname]<=bins[i])][varname]\n    y=y.count()\n    plt.annotate(y,xy=(bins[i],y), horizontalalignment=\"right\", weight='bold',xytext=(40,20), textcoords=\"offset pixels\",arrowprops=dict(facecolor='black', shrink=0.05, width = 0.8,headwidth=5))\n\nplt.xticks([i for i in range(df_original[varname].max()+1)])\nplt.grid()\nplt.show()\n","8769f61e":"import os\nprint(os.listdir('..\/input'))\nprint(os.listdir('..\/input\/'+os.listdir('..\/input')[0]))","b6e4bd2b":"import pandas as pd\ndf = pd.read_csv('..\/input\/dataviz-facens-20182-aula-1-exerccio-2\/anv.csv', delimiter=',')\ndf.head(3)","90e84af0":"df.groupby(['aeronave_pmd_categoria']).size().plot.bar(title=\"Categorias de Aeronaves\")","58bdbc20":"<div align=\"center\">\n <img src=\"https:\/\/raw.githubusercontent.com\/matheusmota\/dataviz2018\/master\/resources\/images\/logo_facens_pos.png\" width=\"150px\">\n <h1> Especializa\u00e7\u00e3o em Ci\u00eancia de Dados - FACENS<\/h1>\n <h2> Visualiza\u00e7\u00e3o de Dados<\/h2>\n<\/div>\n<br><br>\n\n# Exerc\u00edcio 1 - Vari\u00e1veis\n(valendo nota)\n\n* **Data de entrega:** Verifique o prazo na p\u00e1gina da disciplina\n* **Professor:**  Matheus Mota\n* **Aluno:** Victor Hugo Yuuki Mathias\n* **RA:** 202088","b41cd779":"### Item C - Representa\u00e7\u00e3o Gr\u00e1fica\nPara cada uma das vari\u00e1veis, produza um ou mais gr\u00e1ficos, usando matplotlib ou Pandas plot, que descreva seu comportamento \/ caracter\u00edstica. Lembre-se que o(s) gr\u00e1fico(s) precisa(m) ser compat\u00edvel(eis) com a classifica\u00e7\u00e3o da vari\u00e1vel. ","1cd46abe":"### vari\u00e1vel aeronave_operador_categoria, gr\u00e1fico de barra","0a84debf":"# Dicas\n\n- Exemplo de acesso aos CSVs dispon\u00edveis no dataset\n> df = pd.read_csv('..\/input\/...\/anv.csv', delimiter=',')","87ec5eee":"## Quest\u00e3o \u00danica\n**Enunciado:**  Este notebook est\u00e1 associado ao *Kaggle Dataset* chamado \"Exerc\u00edcio 1\". Este *Kaggle Dataset* possui dois arquivos em formato CSV (anv.csv e BR_eleitorado_2016_municipio ). Escolha um dos datasets dispon\u00edveis e j\u00e1 conhecidos, a seu crit\u00e9rio. Uma vez definido o csv, escolha no m\u00ednimo 7 e no m\u00e1ximo 12 vari\u00e1veis (colunas) que voc\u00ea avalia como sendo relevantes. Para cada uma das suas vari\u00e1veis escolhidas, forne\u00e7a:\n\n\n### Item A - Classifica\u00e7\u00e3o das vari\u00e1veis\n\nClassifique todas as vari\u00e1veis escolhidas, e construa um dataframe com sua resposta.\nExemplo:","05809293":"### Item B - Tabela de frequ\u00eancia\n\nConstrua uma tabela de frequ\u00eancia para cada uma das **vari\u00e1veis qualitativas** que voc\u00ea escolheu (caso n\u00e3o tenha escolhido nenhuma, deixe esta quest\u00e3o em branco). Uma dica: a fun\u00e7\u00e3o *value_counts()* do Pandas pode ser muito \u00fatil. =)\n","92e14378":"### vari\u00e1vel aeronave_tipo_veiculo, gr\u00e1fico de barra"}}