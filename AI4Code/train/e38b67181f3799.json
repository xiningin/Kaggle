{"cell_type":{"dbfbd3c5":"code","44b256de":"code","3fc93100":"code","85ddc137":"code","ba5cd43f":"code","9ea9f8c4":"code","3132f29c":"code","c1d8c055":"code","8fcedf00":"code","6ec865cd":"code","f7f36f73":"code","4ea47eac":"code","14f6a50f":"code","b6190ea8":"code","50640a7e":"code","4eae3fb5":"code","894513ee":"code","599d8a5c":"code","31f21daf":"code","15e2fe6a":"code","0206c15a":"code","3a29ffa8":"code","5f66903a":"code","77b29782":"code","490a02cb":"code","c5b24ca3":"code","93454818":"markdown","eaa59d85":"markdown","3257f327":"markdown","65f35cca":"markdown","11ea0749":"markdown","20ff0aa6":"markdown","79de8ed5":"markdown","2dc73339":"markdown","af806424":"markdown","277a3a77":"markdown","4b36fe89":"markdown","47d6d74a":"markdown","40487cb5":"markdown"},"source":{"dbfbd3c5":"import numpy as np\nimport pandas as pd\nimport os\nimport datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly as py\nfrom plotly.offline import iplot\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport cufflinks as cf\n%matplotlib inline\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","44b256de":"py.offline.init_notebook_mode(connected=True)\ncf.go_offline()","3fc93100":"filePath = r\"\/kaggle\/input\/us-police-shootings\/shootings.csv\"\n\ndataFrame = pd.read_csv(filePath)","85ddc137":"dataFrame['date'] = pd.to_datetime(dataFrame['date'])\n#dataFrame['Year'] = pd.to_datetime(dataFrame['date']).dt.year.astype('category')\n#dataFrame['Month'] = dataFrame['date'].dt.strftime('%B')\n#dataFrame['month_num']=dataFrame['date'].dt.strftime('%m')\n#dataFrame['Day of Week'] = dataFrame['date'].dt.strftime('%A')\n#dataFrame['Date of Month'] = dataFrame['date'].dt.strftime('%d')\n","ba5cd43f":"# shooting - race relation.\n# Using Seaborn\nplt.figure(figsize=(10,7))\nsns.countplot(x=\"race\", data=dataFrame)\nplt.show()","9ea9f8c4":"# shooting - gender relation\n# Using Plotly - iplot\ndataFrame.gender.value_counts().iplot(kind='bar', xTitle = 'Gender', yTitle = 'Number of Victims', title = 'Death Toll\/Gender')","3132f29c":"fig = go.Figure(\n        data=[\n            go.Pie(\n                labels = dataFrame.signs_of_mental_illness.value_counts().index,\n                values = dataFrame.signs_of_mental_illness.value_counts(),\n                hole = 0.5,\n                textinfo = 'label + percent')])\n\nfig.update_layout(\n    title_text = 'Victim Mentally ill?',\n    title_x = 0.5)\n\nfig.show()","c1d8c055":"fig = go.Figure(\n        data=[\n            go.Pie(\n                labels = dataFrame.flee.value_counts().index,\n                values = dataFrame.flee.value_counts(),\n                hole = 0.5,\n                textinfo = 'label + percent')])\n\nfig.update_layout(\n    title_text = 'Victim Flee?',\n    title_x = 0.5)\n\nfig.show()","8fcedf00":"# Shooting - Threat level relation\ntrace = go.Bar(\n            x = dataFrame.threat_level.value_counts().index,\n            y = dataFrame.threat_level.value_counts(),\n            marker = dict(color = \"aquamarine\",\n                          ))\n\nlayout = go.Layout(\n            title = \"Shooting-Threat level relation\",\n            title_font_size = 30,\n            plot_bgcolor = \"blanchedalmond\",\n            xaxis = dict(\n                title = \"Threat level\",\n                title_font_size = 20),\n            yaxis = dict(\n                title = \"Number of Victims\",\n                title_font_size = 20))\n\nfig = go.Figure(data=[trace], layout = layout)\nfig.show()","6ec865cd":"dataFrame.state.value_counts().iplot(kind='bar', xTitle = 'States', yTitle = 'Number of Victims', title = 'Victims in each State')","f7f36f73":"plt.figure(figsize=(20,15))\nstatePlot = sns.countplot(y='arms_category', data=dataFrame, order = dataFrame['arms_category'].value_counts().index)","4ea47eac":"daily_df = dataFrame.date.groupby(dataFrame.date.dt.to_period('d')).agg('count').to_frame(name = 'Count')\ndaily_df.index = daily_df.index.to_timestamp()","14f6a50f":"plt.figure(figsize = (25,10))\nplt.plot(daily_df.Count, marker = '.', linestyle=\"\")\nplt.xlabel('Date')\nplt.ylabel('Death Count')\nplt.title('Death Count per day')\nplt.show()","b6190ea8":"daily_df.Count.iplot(kind='hist', xTitle = 'Daily Death count', yTitle = 'Frequency', title='Death frequency distribution')","50640a7e":"monthly_df = dataFrame['date'].groupby(dataFrame.date.dt.to_period('M')).agg('count').to_frame(name=\"Count\")\nmonthly_df.index = monthly_df.index.to_timestamp()","4eae3fb5":"trace = go.Scatter(\n        x = monthly_df.index,\n        y = monthly_df.Count,\n        name = \"Victim count\",\n        line = dict(color = \"#7F7F7F\"))\n\nlayout = go.Layout(\n            title = \"Monthly Death Count : Jan, 2015 - June, 2020\",\n            title_font_size = 30,\n            xaxis = dict(\n                title = \"Year\",\n                title_font_size = 20),\n            yaxis = dict(\n                title = \"Number of Victim\",\n                title_font_size = 20))\nfig = go.Figure(data = [trace], layout = layout)\nfig.show()","894513ee":"monthly_df.iplot(xTitle = 'Year', yTitle = 'Number of Victims', title='Monthly Death Count : Jan, 2015 - June, 2020')","599d8a5c":"monthly_df.Count.iplot(kind='box', yTitle='Number of Victims', title = 'Death frequency distribution')","31f21daf":"groups = monthly_df.groupby(pd.Grouper(freq = 'A'))","15e2fe6a":"keys = groups.groups.keys()\ni=1\nyear = ['2015', '2016', '2017', '2018', '2019', '2020'] \nmonths = ['Jan', 'Feb', 'March', 'April', 'May', 'June', 'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nfig = go.Figure()\n\nfor key in keys:\n    fig.add_trace(\n        go.Bar(\n            x = months[:groups.get_group(key).index.size],\n            y = groups.get_group(key).Count.values))\n\nfig.data[0].visible = True\nsteps = []\nfor i in range(len(fig.data)):\n    step = dict(\n            method = \"update\",\n            args = [{\"visible\" : [False]*len(fig.data)},\n                   {\"title\" : \"Death count in \" + year[i]}],\n            name = year[i],\n            label = year[i],\n            visible = True)\n    step[\"args\"][0][\"visible\"][i] = True\n    steps.append(step)\n    \nsliders = [dict(\n    active=0,\n    currentvalue={\"prefix\": \"Year: \"},\n    pad={\"t\": 10},\n    steps=steps\n)]\n\nfig.update_layout(sliders = sliders)\n\nfig.show()","0206c15a":"keys = groups.groups.keys()\ni=1\nyear = ['2015', '2016', '2017', '2018', '2019', '2020'] \nmonths = ['Jan', 'Feb', 'March', 'April', 'May', 'June', 'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nfig = make_subplots(rows=6, x_title = \"Months\", y_title = 'Death Count')\nfor key in keys:\n    fig.add_bar(x=months[:groups.get_group(key).index.size], y=groups.get_group(key).Count.values, row=i, col=1, name=year[i-1],showlegend = True)\n    i = i+1\n    \nfig.update_layout(height=2000)\nfig.show()","3a29ffa8":"keys = groups.groups.keys()\ni=1\nyear = ['2015', '2016', '2017', '2018', '2019', '2020'] \nmonths = ['Jan', 'Feb', 'March', 'April', 'May', 'June', 'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\ncolor = ['b', 'g', 'r', 'c', 'm', 'y']\n\nplt.figure(figsize= (15,20))\nfor key in keys:\n    plt.subplot(6,1,i)\n    plt.xlabel(year[i-1], fontsize = 16)\n    plt.ylabel('Death Count', fontsize = 16)\n    plt.bar(months[:groups.get_group(key).index.size], groups.get_group(key).Count.values, color = color[i-1], alpha =0.7)\n    i = i+1\n    \nplt.tight_layout()\nplt.show()\n","5f66903a":"month_df = dataFrame['date'].groupby([dataFrame.date.dt.strftime('%B')]).agg('count').to_frame(name=\"Count\")\norder = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\nmonth_df.loc[order].iplot(xTitle = 'Month', yTitle='Number of Victims', title='Victims\/Month from 2015 to 2020')","77b29782":"year_df = dataFrame['date'].groupby([dataFrame.date.dt.strftime('%Y')]).agg('count').to_frame(name=\"Count\")\nyear_df.iplot(xTitle = 'Year', yTitle='Number of Victims', title='Victims\/Year from 2015 to 2020')","490a02cb":"day_df = dataFrame['date'].groupby([dataFrame.date.dt.strftime('%A')]).agg('count').to_frame(name=\"Count\")\norder = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nday_df.loc[order].iplot(xTitle = 'Day of Week', yTitle='Number of Victims', title='Victims\/Day from 2015 to 2020')","c5b24ca3":"#from sklearn.preprocessing import LabelEncoder\n\n#label_encoder = LabelEncoder()\n\n#dataFrame['Gender'] = label_encoder.fit_transform(dataFrame['gender'])\n#dataFrame['Gender'] = dataFrame['Gender'].astype('category')\n# Male = 1, Female = 0\n\n#dataFrame['Mental_Health'] = label_encoder.fit_transform(dataFrame['signs_of_mental_illness'])\n#dataFrame['Mental_Health'] = dataFrame['Mental_Health'].astype('category')\n# True = 1, False = 0\n\n#dataFrame['Body_Camera'] = label_encoder.fit_transform(dataFrame['body_camera'])\n#dataFrame['Body_Camera'] = dataFrame['Body_Camera'].astype('category')\n# True = 1, False =0\n\n#dataFrame['Armed'] = dataFrame['arms_category'].replace(to_replace = 'Unarmed', value=0)\n#dataFrame['Armed'] = dataFrame['Armed'].mask(dataFrame['Armed'] != 0, 1)\n#dataFrame['Armed'] = dataFrame['Armed'].astype('category')\n# Armed = 1, Unarmed = 0\n\n#dataFrame['Fleeing'] = dataFrame['flee'].replace(to_replace = 'Not fleeing', value=0)\n#dataFrame['Fleeing'] = dataFrame['Fleeing'].mask(dataFrame['Fleeing'] != 0, 1)\n#dataFrame['Fleeing'] = dataFrame['Fleeing'].astype('category')\n# Fleeing = 1, Not Fleeing = 0\n\n#dataFrame['Threat'] = dataFrame['threat_level'].replace(to_replace = 'attack', value=1)\n#dataFrame['Threat'] = dataFrame['Threat'].mask(dataFrame['Threat'] != 1, 0)\n#dataFrame['Threat'] = dataFrame['Threat'].astype('category')\n# Attack = 1, Other = 0\n\n#race = pd.get_dummies(dataFrame['race'])\n#dataFrame = pd.concat([dataFrame, race], axis = 1)\n#dataFrame.drop(['id', 'name', 'manner_of_death', 'armed', 'race', 'gender', 'city', 'signs_of_mental_illness', 'threat_level', 'flee', 'body_camera', 'arms_category', 'Other'], axis = 1, inplace = True)\n#dataFrame[['Asian', 'Black', 'Hispanic', 'Native', 'White']] = dataFrame[['Asian', 'Black', 'Hispanic', 'Native', 'White']].astype('category')","93454818":"### Feature Generation","eaa59d85":"## 3. Mental Health - Shooting relation","3257f327":"## 4. Fleeing?","65f35cca":"## Most death recorded months","11ea0749":"## Most death recorded year","20ff0aa6":"## 1. Most affected race","79de8ed5":"## Monthly Report","2dc73339":"## 2. Gender proportion","af806424":"## Most death recorded day","277a3a77":"# Graphical Analysis","4b36fe89":"# Data & Libraries","47d6d74a":"## Time Series Analysis\n### Daily Report : Jan, 2015 - June, 2020","40487cb5":"### Monthly Report every year"}}