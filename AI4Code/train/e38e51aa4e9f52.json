{"cell_type":{"b3aef21e":"code","931aafe0":"code","2096a8a5":"code","3a7c2b11":"code","11179b5e":"code","86bd4830":"code","b192c382":"code","9c3f3f27":"code","aa7cbb67":"markdown","2da1f214":"markdown","7a9bf409":"markdown","e1218164":"markdown"},"source":{"b3aef21e":"import numpy as np\nimport pandas as pd\nimport plotly.express as px","931aafe0":"class MRP(object):\n    def __init__(self,demand,Q,lt,pastdue,SRf=False,SRq=None,SRt=None):\n        self.demand = demand\n        self.period = len(self.demand)\n        self.periods = np.arange(self.period)\n        self.Q = Q\n        self.lt = lt\n        self.pastdue = pastdue\n        self.SRf = SRf\n        self.SRq = SRq\n        self.SRt = SRt\n        self.GR = self.demand\n        self.SR = np.zeros(self.period)\n        self.NR= np.zeros(self.period)\n        self.POH = np.zeros(self.period)\n        self.PORec = np.zeros(self.period)\n        self.POR = np.zeros(self.period)\n        self.POH[0] =  self.pastdue\n        if self.SRf == True:\n            self.SR[self.SRt] = self.SRq\n    def main(self,name):\n        for t in range(1,self.period):\n            self.NR[t] = self.GR[t] - self.SR[t] - self.POH[t-1] \n            if self.NR[t]<0:\n                self.NR[t] = 0\n            self.PORec[t] = self.NR[t]\n            self.POH[t] = self.SR[t] + self.PORec[t] + self.POH[t-1] - self.GR[t]\n            if self.POH[t] < 0:\n                self.POH[t] = 0\n            self.POR[t-self.lt] = self.PORec[t]\n            if self.POR[t-self.lt] > 0 and self.POR[t-self.lt] < self.Q:\n                gecici = self.POR[t-lt]\n                self.POR[t-self.lt] = self.Q\n                self.POH[t-self.lt+1] = self.Q - gecici\n        dict_df = {\n            \"Periods\":self.periods,\n            \"Gross Reqmts.\":self.GR,\n            \"Sched. Receipts\":self.SR,\n            \"Proj. On Hand\":self.POH,\n            \"Net Reqmts.\":self.NR,\n            \"Planned Receipts\":self.PORec,\n            \"Planned Order Release\":self.POR\n        }\n        df = pd.DataFrame(dict_df)\n        \n        data = pd.DataFrame()\n        data[\"Periods\"] = list(df[\"Periods\"])*6\n        dummy= []\n        label = np.array(df.columns)\n        label = np.delete(label, 0)\n        for i in range(len(label)):\n            for j in range(len(df.Periods)):\n                dummy.append(label[i])\n        data[\"Label\"]=pd.Series(dummy)\n        value = []\n        for i in range(1,len(df.columns)):\n            value.append(df.iloc[:,i])\n        value = np.array(value).flatten()\n        data[\"Quantitiy\"] = value\n        \n        fig = px.bar(data,x='Periods',y='Quantitiy',color=\"Label\",\n                     title=\"Material Requirements Planning For {}\".format(name))\n        fig.show()\n    \n            \n        return df.T","2096a8a5":"KotYelek = MRP(demand=np.array([0,21310,0,10658,34100,0,0,25570]),\n             Q=1,\n             lt=1,\n             pastdue=21310,\n             SRf=False,\n             SRq=None,\n             SRt=None)\nKotYelek.main(\"Kot Yelek\")","3a7c2b11":"AnaGovde = MRP(demand=np.array([0,0,0,10658,34100,0,0,25570]),\n             Q=1,\n             lt=1,\n             pastdue=0,\n             SRf=False,\n             SRq=None,\n             SRt=None)\nAnaGovde.main(\"Ana G\u00f6vde\")","11179b5e":"Yaka = MRP(demand=np.array([0,0,0,10658,34100,0,0,25570]),\n             Q=2000,\n             lt=5,\n             pastdue=0,\n             SRf=True,\n             SRq=49234,\n             SRt=2)\nYaka.main(\"Yaka\")","86bd4830":"Dugme = MRP(demand=np.array([0,0,0,10658,34100,0,0,25570])*3,\n             Q=20000,\n             lt=1,\n             pastdue=10658,\n             SRf=False,\n             SRq=None,\n             SRt=None)\nDugme.main(\"D\u00fc\u011fme\")","b192c382":"Arka = MRP(demand=np.array([0,0,0,10658,34100,0,0,25570]),\n             Q=5000,\n             lt=2,\n             pastdue=0,\n             SRf=True,\n             SRq=44758,\n             SRt=1)\nArka.main(\"Arka\")","9c3f3f27":"On = MRP(demand=np.array([0,0,0,10658,34100,0,0,25570]),\n             Q=1000,\n             lt=2,\n             pastdue=53710,\n             SRf=False,\n             SRq=None,\n             SRt=None)\nOn.main(\"\u00d6n\")","aa7cbb67":"1. MRP Matrisi olu\u015fturulacak \u00fcr\u00fcn MRP s\u0131n\u0131f\u0131na \u00f6rneklenir.(Parametre s\u0131ras\u0131:demand,Q,lt,pastdue,SRf,SRq,SRt)\n1. S\u0131n\u0131ftan name parametresi girilerek main() fonksiyonu \u00e7a\u011fr\u0131l\u0131r.\n1. Main fonksiyonu bir Data Frame d\u00f6nd\u00fcr\u00fcr ve MRP ye ait Bar grafi\u011fini ekrana basar.","2da1f214":"# MRP LOT FOR LOT","7a9bf409":"**MRP S\u0131n\u0131f\u0131na ait parametreler:**\n\n    demand = Talepler(Liste halinde)\n    \n    Q = \u00dcretim Parti B\u00fcy\u00fckl\u00fc\u011f\u00fc\n    \n    lt = \u00d6n S\u00fcre\n    \n    Pastdue = Stokta Bulunan\n    \n    SRf = Teslim al\u0131nacak Sipari\u015f Varm\u0131?(Boolean)\n    \n    SRq = E\u011fer SRf=True ise Miktar\u0131 Ne Kadar?\n    \n    SRt = E\u011fer SRf=True ise Hangi Periyotta?","e1218164":"# Nas\u0131l \u00c7al\u0131\u015f\u0131r"}}