{"cell_type":{"6decfc49":"code","11fbf0c7":"code","5a55caa9":"code","0838bd98":"code","e9af9d8b":"code","f07a7da6":"code","5ff16881":"code","c8bf8d4c":"code","37616c6f":"code","ab793ab2":"code","70827b89":"code","eafaf22a":"code","0061a970":"code","4534387c":"code","107bf6ba":"code","d40e0382":"code","3c3c4c09":"code","b7aef0fa":"code","faf16680":"code","a3497a5e":"code","a5bab0cc":"code","855a5872":"markdown","5aa1ef41":"markdown","da56c1ca":"markdown","2e327b71":"markdown","f244d54c":"markdown","9e993824":"markdown"},"source":{"6decfc49":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","11fbf0c7":"df = pd.read_csv('..\/input\/students-performance-in-exams\/StudentsPerformance.csv')","5a55caa9":"df.info()","0838bd98":"df.describe()","e9af9d8b":"df.sample(7)","f07a7da6":"cols = list(df.columns)\nnew_cols = []\nfor col in cols:\n    new_cols.append(col.strip().replace('  ', ' ').replace(' ', '_').lower())\ndf.columns = new_cols","5ff16881":"df.head()","c8bf8d4c":"df['average_score'] = df[['math_score', 'reading_score', 'writing_score']].mean(axis=1)","37616c6f":"pd.options.display.float_format = \"{:,.2f}\".format\n#Formating the average_score float values ","ab793ab2":"df.head()","70827b89":"def Grade(AverageScore):\n    if (AverageScore >= 80):return 'A'\n    if (AverageScore >= 70):return 'B'\n    if (AverageScore >= 60):return 'C'\n    if (AverageScore >= 50):return 'D'\n    if (AverageScore < 50):return 'F'\n    \ndf[\"letter_grade\"] = df.apply(lambda x : Grade(x[\"average_score\"]), axis=1)\n\n","eafaf22a":"df.head()","0061a970":"# pip install plotly==3.10.0\n#!pip install chart-studio","4534387c":"# plotly\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport matplotlib.pyplot as plt\nfrom plotly.offline import iplot\n\n# matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns","107bf6ba":"df_race = df['race\/ethnicity'].value_counts()[:5]\nlabel = df_race.index\nsize = df_race.values\n\ncolors = ['skyblue', '#FEBFB3', '#96D38C', '#D0F9B1', 'gold', 'orange']\ntrace = go.Pie(labels=label, values=size, marker=dict(colors=colors),hole = .2)\n\ndata = [trace]\nlayout = go.Layout(\n    title='Race Distribution'\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","d40e0382":"df_edu = df.parental_level_of_education.value_counts()[:10]\n\ntrace = go.Bar(\n    x=df_edu.index,\n    y=df_edu.values,\n    marker=dict(\n        color = df_edu.values,\n        colorscale='electric',\n        showscale=True\n    )\n)\n\ndata = [trace]\nlayout = go.Layout(\n    title='Parental level of education distribution', \n    yaxis = dict(title = '# of Students')\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","3c3c4c09":"def PieChart(column, title, limit):\n    male = df[df['gender'] == 'male']\n    female = df[df['gender'] == 'female']\n    count_male = male[column].value_counts()[:limit].reset_index()\n    count_female = female[column].value_counts()[:limit].reset_index()\n    color = ['red',  'navy',  'cyan', 'lightgrey','orange']\n    \n    trace1 = go.Pie(labels=count_male['index'], \n                    values=count_male[column], \n                    name= \"male\", \n                    hole= .5, \n                    domain= {'x': [0, .50]},\n                   marker=dict(colors=color))\n\n    trace2 = go.Pie(labels=count_female['index'], \n                    values=count_female[column], \n                    name=\"female\", \n                    hole= .5,  \n                    domain= {'x': [.44, 1]})\n\n    layout = dict(title= title, font=dict(size=15), legend=dict(orientation=\"h\"),\n                  annotations = [\n                      dict(\n                          x=.23, y=.5,\n                          text='Male', \n                          showarrow=False,\n                          font=dict(size=20)\n                      ),\n                      dict(\n                          x=.75, y=.5,\n                          text='Female', \n                          showarrow=False,\n                          font=dict(size=20)\n                      )\n        ])\n\n    fig = dict(data=[trace1, trace2], layout=layout)\n    iplot(fig)\n","b7aef0fa":"PieChart('letter_grade', \"Letter Grade (Male vs Female)\", 6)","faf16680":"g = sns.catplot(\n    data=df, kind=\"bar\",\n    x=\"race\/ethnicity\", y=\"average_score\", hue=\"gender\",\n    ci=\"sd\", palette=\"dark\", alpha=.6, height=6\n)\ng.despine(left=True)\ng.set_axis_labels(\"\", \"Average Score\")\ng.legend.set_title(\"\")","a3497a5e":"sns.heatmap(df.corr() ,annot=True)","a5bab0cc":"sns.jointplot(data=df, x=\"writing_score\", y=\"math_score\", kind=\"hex\")","855a5872":"**In all ethnic groups female students have the higher scores**","5aa1ef41":"> Grade function taken from below source and modified \n<a href=https:\/\/www.kaggle.com\/bhartiprasad17\/student-academic-performance-analysis>Source<\/a>","da56c1ca":"# It's a work in progress. \n\n\n# I will try to add more valuable information and get some insight about the dataset later on\n\n\n# For now please comment if you liked it or have a suggestion. Thank you in advance. HAPPY CODING EVERYONE","2e327b71":"# Thank you for visiting my kernel\n\n\n# If you enjoyed my work, please consider upvoting\n\n","f244d54c":"**As if we compare all the 5 letters:**\n* Female students have more A\n* Female students have more B\n* Male students have more C\n* Male students have more D\n* Male students have more F\n\n**It looks like female students are more successful than their male pairs**\n","9e993824":"![36639690_s.jpg](attachment:36639690_s.jpg)"}}