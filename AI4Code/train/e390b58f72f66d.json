{"cell_type":{"223c8506":"code","b975f1c8":"code","71cc1951":"code","df142dfe":"code","c01293c5":"code","c41374ee":"code","d9daece2":"code","3e9956f0":"code","ab4f4629":"code","fbc40472":"code","fdc02bd1":"code","50969d27":"code","69b33333":"code","01d716e7":"code","29250b40":"code","73e53426":"code","82cb0e59":"code","391b9ec4":"code","d8bbbb48":"code","ff2d8890":"code","fca942e1":"markdown","5da3b60f":"markdown","7788af1c":"markdown","9ae00d0d":"markdown","18aa4e3b":"markdown","cf3f1256":"markdown","2b5d8ca4":"markdown","4df3b13d":"markdown","6c74ca13":"markdown","07192d44":"markdown"},"source":{"223c8506":"import gc\nimport os\nfrom pathlib import Path\nimport random\nimport sys\n\nfrom tqdm.notebook import tqdm\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom IPython.core.display import display, HTML\n\n# --- plotly ---\nfrom plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\n\n# --- models ---\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cb\n\n# --- setup ---\npd.set_option('max_columns', 50)\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom itertools import cycle, islice\nimport seaborn as sb\nimport matplotlib.dates as dates\nimport datetime as dt\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\n#from plotly import tools, subplots\n#import plotly.figure_factory as ff\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n","b975f1c8":"train_data = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv\")#index_col=0\ndisplay(train_data.head())\ntest_data = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv\")#index_col=0\ndisplay(test_data.head())","71cc1951":"sum_df = pd.pivot_table(train_data, values=['ConfirmedCases','Fatalities'], index=['Date'],aggfunc=np.sum)\ndisplay(sum_df.max())","df142dfe":"train_data['NewConfirmedCases'] = train_data['ConfirmedCases'] - train_data['ConfirmedCases'].shift(1)\ntrain_data['NewConfirmedCases'] = train_data['NewConfirmedCases'].fillna(0.0)\ntrain_data['NewFatalities']     = train_data['Fatalities'] - train_data['Fatalities'].shift(1)\ntrain_data['NewFatalities']     = train_data['NewFatalities'].fillna(0.0)#.astype(int)\ntrain_data['MortalityRate']     = train_data['Fatalities'] \/ train_data['ConfirmedCases']\ntrain_data['MortalityRate']     = train_data['MortalityRate'].fillna(0.0)\ntrain_data['GrowthRate']        = train_data['NewConfirmedCases']\/train_data['NewConfirmedCases'].shift(1)\ntrain_data['GrowthRate']        = train_data['GrowthRate'].replace([-np.inf, np.inf],  0.0)\ntrain_data['GrowthRate']        = train_data['GrowthRate'].fillna(0.0) \ndisplay(train_data.head())","c01293c5":"def getColumnInfo(df):\n    n_province =  df['Province_State'].nunique()\n    n_country  =  df['Country_Region'].nunique()\n    n_days     =  df['Date'].nunique()\n    start_date =  df['Date'].unique()[0]\n    end_date   =  df['Date'].unique()[-1]\n    return n_province, n_country, n_days, start_date, end_date\n\nn_train = train_data.shape[0]\nn_test = test_data.shape[0]\n\nn_prov_train, n_count_train, n_train_days, start_date_train, end_date_train = getColumnInfo(train_data)\nn_prov_test,  n_count_test,  n_test_days,  start_date_test,  end_date_test  = getColumnInfo(test_data)\n\nprint ('<==Train data==> \\n # of Province_State: '+str(n_prov_train),', # of Country_Region:'+str(n_count_train), \n       ', Time Period: '+str(start_date_train)+' to '+str(end_date_train), '==> days:',str(n_train_days))\nprint(\"\\n Countries with Province\/State information:  \", train_data[train_data['Province_State'].isna()==False]['Country_Region'].unique())\nprint ('\\n <==Test  data==> \\n # of Province_State: '+str(n_prov_test),', # of Country_Region:'+str(n_count_test),\n       ', Time Period: '+start_date_test+' to '+end_date_test, '==> days:',n_test_days)\n\ndf_test = test_data.loc[test_data.Date > '2020-04-03']\noverlap_days = n_test_days - df_test.Date.nunique()\nprint('\\n overlap days with training data: ', overlap_days, ', total days: ', n_train_days+n_test_days-overlap_days)","c41374ee":"prob_confirm_check_train = train_data.ConfirmedCases.value_counts(normalize=True)\nprob_fatal_check_train = train_data.Fatalities.value_counts(normalize=True)\n\nn_confirm_train = train_data.ConfirmedCases.value_counts()[1:].sum()\nn_fatal_train = train_data.Fatalities.value_counts()[1:].sum()\n\nprint('Percentage of confirmed case records = {0:<2.0f}\/{1:<2.0f} = {2:<2.1f}%'.format(n_confirm_train, n_train, prob_confirm_check_train[1:].sum()*100))\nprint('Percentage of fatality records = {0:<2.0f}\/{1:<2.0f} = {2:<2.1f}%'.format(n_fatal_train, n_train, prob_fatal_check_train[1:].sum()*100))","d9daece2":"#train_data_by_country = train_data.groupby(['Country_Region'],as_index=True).agg({'ConfirmedCases': 'max', 'Fatalities': 'max'})\n#train_data_by_country_confirm = train_data_by_country.sort_values(by=[\"ConfirmedCases\"], ascending=False)\ntrain_data_by_country = train_data.groupby(['Date','Country_Region'],as_index=False).agg({'ConfirmedCases': 'sum', 'Fatalities': 'sum',\n                                                                                         'GrowthRate':'mean' })\nmax_train_date = train_data['Date'].max()\ntrain_data_by_country_confirm = train_data_by_country.query('(Date == @max_train_date) & (ConfirmedCases > 100)').sort_values('ConfirmedCases', ascending=False)\ntrain_data_by_country_confirm.set_index('Country_Region', inplace=True)\ndisplay(train_data_by_country_confirm.head())\n\nfrom itertools import cycle, islice\ndiscrete_col = list(islice(cycle(['blue', 'r', 'g', 'k', 'b', 'c', 'm']), None, len(train_data_by_country_confirm.head(30))))\nplt.rcParams.update({'font.size': 22})\ntrain_data_by_country_confirm.head(20).plot(figsize=(20,15), kind='barh', color=discrete_col)\nplt.legend([\"Confirmed Cases\", \"Fatalities\"]);\nplt.xlabel(\"Covid-19 Affected\")\nplt.title(\"First 30 Countries with Highest Confirmed Cases\")\nylocs, ylabs = plt.yticks()\nfor i, v in enumerate(train_data_by_country_confirm.head(20)[\"ConfirmedCases\"][:]):\n    plt.text(v+0.01, ylocs[i]-0.25, str(int(v)), fontsize=12)\nfor i, v in enumerate(train_data_by_country_confirm.head(20)[\"Fatalities\"][:]):\n    if v > 0: #disply for only >300 fatalities\n        plt.text(v+0.01,ylocs[i]+0.1,str(int(v)),fontsize=12)    ","3e9956f0":"def reformat_time(reformat, ax):\n    ax.xaxis.set_major_locator(dates.WeekdayLocator())\n    ax.xaxis.set_major_formatter(dates.DateFormatter('%b %d'))    \n    if reformat: #reformat again if you wish\n        date_list = train_data_by_date.reset_index()[\"Date\"].tolist()\n        x_ticks = [dt.datetime.strftime(t,'%Y-%m-%d') for t in date_list]\n        x_ticks = [tick for i,tick in enumerate(x_ticks) if i%8==0 ]# split labels into same number of ticks as by pandas\n        ax.set_xticklabels(x_ticks, rotation=90)\n    # cosmetics\n    ax.yaxis.grid(linestyle='dotted')\n    ax.spines['right'].set_color('none')\n    ax.spines['top'].set_color('none')\n    ax.spines['left'].set_color('none')\n    ax.spines['bottom'].set_color('none')\n\ntrain_data['Date'] = pd.to_datetime(train_data['Date'])\ntrain_data_by_date = train_data.groupby(['Date'],as_index=True).agg({'ConfirmedCases': 'sum','Fatalities': 'sum', \n                                                                     'NewConfirmedCases':'sum', 'NewFatalities':'sum', 'MortalityRate':'mean'})\nnum0 = train_data_by_date._get_numeric_data() \nnum0[num0 < 0.0] = 0.0\n#display(train_data_by_date.head())\n\n## ======= Sort by countries with fatalities > 500 ========\n\ntrain_data_by_country_max = train_data.groupby(['Country_Region'],as_index=True).agg({'ConfirmedCases': 'max', 'Fatalities': 'max'})\ntrain_data_by_country_fatal = train_data_by_country_max[train_data_by_country_max['Fatalities']>500]\ntrain_data_by_country_fatal = train_data_by_country_fatal.sort_values(by=['Fatalities'],ascending=False).reset_index()\ndisplay(train_data_by_country_fatal.head(20))\n\ndf_merge_by_country = pd.merge(train_data,train_data_by_country_fatal['Country_Region'],on=['Country_Region'],how='inner')\ndf_max_fatality_country = df_merge_by_country.groupby(['Date','Country_Region'],as_index=False).agg({'ConfirmedCases': 'sum',\n                                                                                                     'Fatalities': 'sum',\n                                                                                                     'NewConfirmedCases':'sum',\n                                                                                                     'NewFatalities':'sum',\n                                                                                                     'MortalityRate':'mean'})\n\nnum1 = df_max_fatality_country._get_numeric_data() \nnum1[num1 < 0.0] = 0.0\ndf_max_fatality_country.set_index('Date',inplace=True)\n#display(df_max_fatality_country.head(20))\n\ncountries = train_data_by_country_fatal['Country_Region'].unique()\n\nplt.rcParams.update({'font.size': 16})\n\nfig,(ax0,ax1) = plt.subplots(1,2,figsize=(15, 8))\nfig,(ax2,ax3) = plt.subplots(1,2,figsize=(15, 8))#,sharey=True)\n\ntrain_data_by_date.ConfirmedCases.plot(ax=ax0, x_compat=True, title='Confirmed Cases Globally', legend='Confirmed Cases',\n                                       color=discrete_col)#, logy=True)\nreformat_time(0,ax0)\ntrain_data_by_date.NewConfirmedCases.plot(ax=ax0, x_compat=True, linestyle='dotted', legend='New Confirmed Cases',\n                                          color=discrete_col)#, logy=True)\nreformat_time(0,ax0)\n\ntrain_data_by_date.Fatalities.plot(ax=ax2, x_compat=True, title='Fatalities Globally', legend='Fatalities', color='r')\nreformat_time(0,ax2)\ntrain_data_by_date.NewFatalities.plot(ax=ax2, x_compat=True, linestyle='dotted', legend='Daily Deaths',color='r')#tell pandas not to use its own datetime format\nreformat_time(0,ax2)\n\nfor country in countries:\n    match = df_max_fatality_country.Country_Region==country\n    df_fatality_by_country = df_max_fatality_country[match] \n    df_fatality_by_country.ConfirmedCases.plot(ax=ax1, x_compat=True, title='Cumulative Confirmed Cases Nationally')\n    reformat_time(0,ax1)\n    df_fatality_by_country.Fatalities.plot(ax=ax3, x_compat=True, title='Cumulative Fatalities Nationally')\n    reformat_time(0,ax3)\n    \nax1.legend(countries)\nax3.legend(countries)\n","ab4f4629":"fig = plt.figure()\nfig,(ax4,ax5) = plt.subplots(1,2,figsize=(20, 8))\n#train_data_by_date.loc[(train_data_by_date.ConfirmedCases > 200)]#useless, its already summed.\ntrain_data_by_date.MortalityRate.plot(ax=ax4, x_compat=True, legend='Mortality Rate',color='g')#tell pandas not to use its own datetime format\nreformat_time(0,ax4)\nfor num, country in enumerate(countries):\n    match = df_max_fatality_country.Country_Region==country \n    df_fatality_by_country = df_max_fatality_country[match] \n    df_fatality_by_country.MortalityRate.plot(ax=ax5, x_compat=True, title='Average Mortality Rate By Country')    \n    reformat_time(0,ax5)\n\nax5.legend(countries, loc='center left',bbox_to_anchor=(1.0, 0.5))","fbc40472":"train_data_by_max_date = train_data_by_country.query('(Date == @max_train_date) & (ConfirmedCases > 100)')\ntrain_data_by_max_date.loc[:, 'MortalityRate'] = train_data_by_max_date.loc[:,'Fatalities']\/train_data_by_max_date.loc[:,'ConfirmedCases']\ntrain_data_by_mortality = train_data_by_max_date.sort_values('MortalityRate', ascending=False)\ntrain_data_by_mortality.set_index('Country_Region', inplace=True)\ndisplay(train_data_by_mortality.head())\n\n#palette = plt.get_cmap('gist_rainbow')\npalette = plt.get_cmap('OrRd_r')\nrainbow_col = [palette(1.*i\/20.0) for i in range(20)]\n\ntrain_data_by_mortality.MortalityRate.head(20).plot(figsize=(15,10), kind='barh', color=rainbow_col)\nplt.xlabel(\"Mortality Rate\")\nplt.title(\"Highest Mortality Rate Countries\")\nylocs, ylabs = plt.yticks()\n","fdc02bd1":"world_df = train_data_by_country.query('Date == @max_train_date')\nworld_df.loc[:,'Date']           = world_df.loc[:,'Date'].apply(str)\nworld_df.loc[:,'Confirmed_log']  = round(np.log10(world_df.loc[:,'ConfirmedCases'] + 1), 3)\nworld_df.loc[:,'Fatalities_log'] = np.log10(world_df.loc[:,'Fatalities'] + 1)\nworld_df.loc[:,'MortalityRate']  = round(world_df.loc[:, 'Fatalities'] \/ world_df.loc[:,'ConfirmedCases'], 3)\nworld_df.loc[:,'AveGrowthFactor']  = round(world_df.loc[:,'GrowthRate'], 3)\nworld_df.drop(['GrowthRate'], axis=1) #drop as this is actually the average over all the 74 days\ndisplay(world_df.head())\n\nfig1 = px.choropleth(world_df, locations=\"Country_Region\", \n                    locationmode=\"country names\",  \n                    color=\"Confirmed_log\",                     \n                    hover_name=\"Country_Region\",\n                    hover_data=['ConfirmedCases', 'Fatalities', 'MortalityRate', 'AveGrowthFactor'],\n                    range_color=[world_df['Confirmed_log'].min(), world_df['Confirmed_log'].max()], \n                    color_continuous_scale = px.colors.sequential.Plasma,\n                    title='COVID-19: Confirmed Cases')\nfig1.show()\n\nfig2 = px.scatter_geo(world_df, locations=\"Country_Region\", \n                     locationmode=\"country names\", \n                     color=\"ConfirmedCases\", size='ConfirmedCases', \n                     hover_name=\"Country_Region\", \n                     hover_data=['ConfirmedCases', 'Fatalities', 'MortalityRate', 'AveGrowthFactor'],\n                     range_color= [world_df['Confirmed_log'].min(), world_df['ConfirmedCases'].max()], \n                     projection=\"natural earth\", \n                     animation_frame=\"Date\",\n                     color_continuous_scale=\"portland\",\n                     title='COVID-19: Spread Over Time')\nfig2.update(layout_coloraxis_showscale=False)\nfig2.show()\n","50969d27":"#world_population = pd.read_csv(\"\/kaggle\/input\/population-by-country-2020\/population_by_country_2020.csv\")\n#display(world_population.head()) #for next round","69b33333":"from sklearn.linear_model import Ridge\nfrom sklearn.preprocessing import PolynomialFeatures \nfrom sklearn.pipeline import make_pipeline\nfrom tqdm import tqdm\n\nplt.rcParams.update({'font.size': 12})\nfig,(ax0,ax1) = plt.subplots(1,2,figsize=(20, 8))\ncountries_europe = ['Italy', 'France', 'Spain', 'Germany', 'United Kingdom']\n\n# Take the 1st day as 2020-02-23\ndf = train_data.loc[train_data.Date >= '2020-02-23']\nn_days_europe = df.Date.nunique()\nrainbow_col= plt.cm.jet(np.linspace(0,1,len(countries)))\n\nfor country, c in tqdm(zip(countries,rainbow_col)): \n    df_country_train = df_max_fatality_country[df_max_fatality_country['Country_Region']==country] \n    df_country_test = test_data[test_data['Country_Region']==country]  \n    df_country_train = df_country_train.reset_index()[df_country_train.reset_index().Date > '2020-02-22']\n    n_days_sans_China = df.Date.nunique() - df_country_train.Date.nunique() \n    \n    x_train = np.arange(1, n_days_europe+1).reshape((-1,1))\n    x_test  = (np.arange(1,n_days_europe+n_test_days+1-overlap_days)).reshape((-1,1)) \n    y_train_f = df_country_train['Fatalities']\n    #print (x_train, y_train_f)\n    model_f = make_pipeline(PolynomialFeatures(degree=3), Ridge(fit_intercept=False)) \n    model_f = model_f.fit(x_train, y_train_f)\n    y_predict_f = model_f.predict(x_test) \n    #print (x_test[-n_test_days:], y_predict_f[-n_test_days:])\n    y_train_c = df_country_train['ConfirmedCases'] \n    model_c = make_pipeline(PolynomialFeatures(degree=3), Ridge(fit_intercept=False)) \n    model_c = model_c.fit(x_train, y_train_c)\n    y_predict_c = model_c.predict(x_test)\n    \n    extend_days_test = [i+len(x_test) for i in range(n_days_sans_China)]\n    x_test      = np.append(x_test, extend_days_test) \n    y_predict_c = np.pad(y_predict_c, (n_days_sans_China, 0), 'constant')\n    y_predict_f = np.pad(y_predict_f, (n_days_sans_China, 0), 'constant')\n    \n    ax0.plot(x_test[-n_test_days:], y_predict_c[-n_test_days:],linewidth=2, label='predict_'+country, color=c)\n    ax0.plot(x_train, y_train_c, linewidth=2, color=c, linestyle='dotted', label='train_'+country)\n    ax0.set_title(\"Prediction vs Training for Confirmed Cases\")\n    ax0.set_xlabel(\"Number of days\")\n    ax0.set_ylabel(\"Confirmed Cases\")\n    #ax0.legend(loc='center left',bbox_to_anchor=(1.0, 0.5))\n    #ax0.set_yscale('log')\n    \n    ax1.plot(x_test[-(n_test_days):], y_predict_f[-(n_test_days):],linewidth=2, label='predict_'+country, color=c)\n    ax1.plot(x_train, y_train_f, linewidth=2, color=c, linestyle='dotted', label='train_'+country)\n    ax1.set_title(\"Prediction vs Training for Fatalities\")\n    ax1.set_xlabel(\"Number of days\")\n    ax1.set_ylabel(\"Fatalities\")\n    ax1.legend(loc='center left',bbox_to_anchor=(1.0, 0.5))\n    #ax1.set_yscale('log')","01d716e7":"%%time\ndatadir = Path('\/kaggle\/input\/covid19-global-forecasting-week-4')\n\n# Read in the data CSV files\ntrain = pd.read_csv(datadir\/'train.csv')\ntest = pd.read_csv(datadir\/'test.csv')\nsubmission = pd.read_csv(datadir\/'submission.csv')","29250b40":"train.rename({'Country_Region': 'country', 'Province_State': 'province', 'Id': 'id', 'Date': 'date', 'ConfirmedCases': 'confirmed', 'Fatalities': 'fatalities'}, axis=1, inplace=True)\ntest.rename({'Country_Region': 'country', 'Province_State': 'province', 'Id': 'id', 'Date': 'date', 'ConfirmedCases': 'confirmed', 'Fatalities': 'fatalities'}, axis=1, inplace=True)\ntrain['country_province'] = train['country'].fillna('') + '\/' + train['province'].fillna('')\ntest['country_province'] = test['country'].fillna('') + '\/' + test['province'].fillna('')\n","73e53426":"ww_df = train.groupby('date')[['confirmed', 'fatalities']].sum().reset_index()\nww_df['new_case'] = ww_df['confirmed'] - ww_df['confirmed'].shift(1)\nww_df.tail()","82cb0e59":"ww_melt_df = pd.melt(ww_df, id_vars=['date'], value_vars=['confirmed', 'fatalities', 'new_case'])\nww_melt_df","391b9ec4":"fig = px.line(ww_melt_df, x=\"value\", y=\"date\", color='variable', \n              title=\"Worldwide Confirmed\/Death Cases \")\nfig.show()","d8bbbb48":"fig = px.line(ww_melt_df, x=\"date\", y=\"value\", color='variable',\n              title=\"Worldwide Confirmed\/Death Cases Over Time (Log scale)\",\n             log_y=True)\nfig.show()","ff2d8890":"ww_df['mortality'] = ww_df['fatalities'] \/ ww_df['confirmed']\n\nfig = px.line(ww_df, x=\"date\", y=\"mortality\", \n              title=\"Worldwide Mortality Rate \")\nfig.show()","fca942e1":"# <a id='dat'>MAXIMUM CASES BY DATE<\/a>","5da3b60f":"# <a id='du'>DATA UNDERSTANDING<\/a>","7788af1c":"# COVID-19 ANALYSIS\n![COVID19](https:\/\/media.npr.org\/assets\/img\/2020\/02\/13\/novel-coronavirus-sars-cov-2_49531042907_o_wide-84d07829a895935bcec15c4711ee4fd31e1f89e2.jpg?s=1400)\n I am using past three months data in this project to predict the Confirmed Cases and Fatalities for the month of April. \n## <a id='main'>Table of Contents<\/a>\n- [Data Understanding](#du)\n- [Maximum Cases Countrywise](#mx)\n- [Maximum Cases By Date](#dat)\n- [Confirmed Cases By Population](#cp)\n- [Worldwide](#wt)\n  ","9ae00d0d":"# <a id='mx'>MAXIMUM CASES COUNTRYWISE<\/a>\n[Go back to the main page](#main)","18aa4e3b":"*There are peaks in average mortality rate trend due to China, Iran, UK and Netherlands, which drops down in about 15 days. The rise in Iran reached its maximum on Feb 18, however this is the same time when the outbreak started in Iran. Here, one should be cautioned as these numbers truely depends on the number of confirmed cases, which itself depends on how many tests were performed during that time. The average mortality rate in Italy and Spain is still rising to 12%. Lets look at the mortality rate by the end of the training data date, which is April, 11th, 2020.*","cf3f1256":"Moreover, when we are checking the growth in log-scale below figure, we can see that the speed of confirmed cases growth rate slightly increases when compared with the beginning of March and end of March.\nIn spite of the Lockdown policy the number is still increasing rapidly.","2b5d8ca4":"# <a id='wt'>WORLDWIDE<\/a>","4df3b13d":"When we see the confirmed cases in world wide, it is looking like exponential growth curve. The number is increasing very rapidly especially recently. the number almost doubled in last 1 week...\n\n","6c74ca13":"# <a id='cp'>CONFIRMED CASES BY POPULATION<\/a>","07192d44":"1.**Confirmed Cases:** It can be seen that a raise in maximum number of new cases appears in week of Feb 11-18, after which China reached its saturation point. Then a new sudden rise appears after March 24th, when the total new cases world wide crosses the total affectees in China alone.\n\n2.**Dealth:** As can be seen, since March 11th, the death toll rises steeply due to extreme rise in European countires, specially Italy, Spain, France and UK, and as well as now in US. The average mortality rate in these countries below can explain the peaks in the global mortality rate."}}