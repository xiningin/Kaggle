{"cell_type":{"176cb5cc":"code","259fe871":"code","57389081":"code","fc4abfe9":"code","d13af5be":"code","86c41366":"code","02d3c569":"code","2de2a774":"code","5b301e41":"code","0a831a95":"code","f996942e":"code","2904ecad":"code","63b59d95":"code","28ba799c":"code","12365372":"code","776c4f1b":"code","7c1d7a64":"markdown","6f5a0eb8":"markdown","bdc9d807":"markdown","e98b878b":"markdown","8b3b411a":"markdown","dc08f9e0":"markdown","e4d62c2a":"markdown","64c614c6":"markdown","144ef5d1":"markdown","7ad3c040":"markdown","d636123e":"markdown","89a3e49c":"markdown","93d92298":"markdown"},"source":{"176cb5cc":"! mkdir ..\/data\n! mkdir ..\/data\/train\n! mkdir ..\/data\/validation\n! cp -r ..\/input\/training\/training\/* ..\/data\/train\/\n! cp -r ..\/input\/validation\/validation\/* ..\/data\/validation\/","259fe871":"from fastai import *\nfrom fastai.vision import *\nfrom pathlib import Path","57389081":"data = ImageDataBunch.from_folder(path=Path('..\/data').resolve(), train='train', valid='validation', dl_tfms=get_transforms(), num_workers=0, bs=64, size=224).normalize(imagenet_stats)","fc4abfe9":"# import pandas as pd\n\n# labels_df = pd.read_csv('..\/input\/monkey_labels.txt', delimiter=' *, *', engine='python')\n# labels = dict(zip(labels_df['Label'].tolist(), labels_df['Common Name'].tolist()))","d13af5be":"# data = ImageImageList.from_folder(path=Path('..\/data').resolve()).split_by_folder(train='train', valid='validation').label_from_func(func=lambda x: labels[str(x.parts[-2])]).transform(get_transforms(), size=224).databunch(num_workers=0, bs=64).normalize(imagenet_stats)","86c41366":"data.show_batch(rows=3, figsize=(5,5))","02d3c569":"learn_34 = create_cnn(data, models.resnet34, metrics=[accuracy, error_rate])\nlearn_34.fit_one_cycle(3)","2de2a774":"interp_34 = ClassificationInterpretation.from_learner(learn_34)\ninterp_34.plot_top_losses(9, figsize=(15,11))","5b301e41":"interp_34.plot_confusion_matrix()","0a831a95":"learn_34.lr_find()\nlearn_34.recorder.plot()","f996942e":"learn_34.fit_one_cycle(1, slice(2e-4, 9e-2))","2904ecad":"learn_50 = create_cnn(data, models.resnet50, metrics=[accuracy, error_rate])\nlearn_50.fit_one_cycle(3)","63b59d95":"interp_50 = ClassificationInterpretation.from_learner(learn_50)\ninterp_50.plot_confusion_matrix()","28ba799c":"interp_50.plot_top_losses(4, figsize=(15,11))","12365372":"learn_50.lr_find()\nlearn_50.recorder.plot()","776c4f1b":"learn_50.fit_one_cycle(2, slice(8e-06, 1.2e-06))","7c1d7a64":"Creating a plot to check the predictions","6f5a0eb8":"Looks like we are able to get close 100% accuracy. Just 1 mistake by the model. For a model trained in under 10 minutes, an accuracy of this level is astounding. With a little more tweaks, we should be able to get 100% accuracy.\n\nEDIT: I was able to get 100% by running the kernel over and over a couple of times. I guess the randomness helps boost this accuracy. But since Kaggle runs the kernel again when making the commit, the results will be slightly different.","bdc9d807":"We can see that the classifier misclassifies to 3 images from the validation set. We can also observe that the model has learnt that the face of the monkey is the most important feature to classify the breed.","e98b878b":"Let us check out the confusion matrix to see where the wrong classifications are happening","8b3b411a":"Just one image is being predicted wrong. And we can see the probability of this prediction is very low compared to the others.","dc08f9e0":"Import statements","e4d62c2a":"Visualizing some of the data loaded","64c614c6":"Copying the data from zip file to a different location. Mainly because the input directory given by Kaggle is a read-only folder.","144ef5d1":"Loading the data","7ad3c040":"The learning rate between 2e-4 and 9e-2 has the longest slope of decreasing loss. Using that range to train the network further","d636123e":"Using Learning Rate finder to find the LR sweet spot to improve the model","89a3e49c":"Creating a ResNet34 based CNN classifier and fitting for 3 cycles","93d92298":"The validation loss and the accuracy has saturated for the model based on ResNet34. Trying a larger model."}}