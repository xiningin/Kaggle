{"cell_type":{"4dca70c3":"code","6577f975":"code","8da8353b":"code","4d6c518c":"code","42ce30ef":"code","b77d1f25":"code","1f62e514":"code","c734d541":"code","70a41fda":"code","c995b708":"code","e8b83073":"markdown","edf1bf6b":"markdown","16a24fa3":"markdown","f71e230c":"markdown","0306282d":"markdown","b1864064":"markdown"},"source":{"4dca70c3":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PowerTransformer\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.cluster import KMeans\n\nimport optuna.integration.lightgbm as lgb_opt\nimport lightgbm as lgb\nfrom catboost import Pool, CatBoostClassifier\nimport optuna\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')","6577f975":"# Load data\ntrain = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/test.csv')\nprint('Train size:', train.shape)\nprint('Test size:', test.shape)\n\nprint('Train data info: ')\ndisplay(train.head())\ntrain.info()","8da8353b":"train['target'].value_counts()","4d6c518c":"# Standardization\n\ncont_feat = [f'cont{i}' for i in range(0, 11)]\ncat_feat = [f'cat{i}' for i in range(0, 19)]\noriginal_feat = cat_feat+cont_feat\n\nscaler = StandardScaler()\nscaler.fit(train[cont_feat])\ntrain[cont_feat] = scaler.transform(train[cont_feat])\ntest[cont_feat] = scaler.transform(test[cont_feat])\n\n# concat data\ntrain_size=train.shape[0]\ndata=pd.concat([train, test], axis=0)","42ce30ef":"# Label encoding\nfor c in data.columns:\n    if data[c].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(data[c])\n        data[c] = lbl.transform(data[c].values)\n        cat_feat.append(c)\n\ndisplay(data.head())","b77d1f25":"y_train = train['target'].copy()\n\nuse_features=original_feat\ndata=data[use_features]\n\nX_train=data[:train_size]\nX_test=data[train_size: ]\nX_train.head()","1f62e514":"def run_cb(params):\n    y_preds = []\n    oof_train = np.zeros((len(X_train),))\n    models=[]\n    \n    for fold_id, (train_index, valid_index) in enumerate(cv.split(X_train, y_train)):\n        print(f'Fold {fold_id+1}')\n        X_tr = X_train.loc[train_index, :]\n        X_val = X_train.loc[valid_index, :]\n        y_tr = y_train.loc[train_index]\n        y_val = y_train.loc[valid_index]\n\n        model = CatBoostClassifier(**params)\n\n        model.fit(X = X_tr, y = y_tr, eval_set = (X_val, y_val), \n                  plot = False, \n                  early_stopping_rounds=10)\n\n        oof_train[valid_index] = model.predict_proba(X_val)[:, 1]\n        y_pred = model.predict_proba(X_test)[:, 1]\n\n        y_preds.append(y_pred)\n        \n        models.append(model)\n    \n    return oof_train, sum(y_preds) \/ len(y_preds), models","c734d541":"%%time\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n\nparams = {'iterations': 10000,\n          'depth': 4, \n          'learning_rate': 0.05, \n          'loss_function': 'Logloss', \n          'eval_metric': 'AUC', \n          'boosting_type': 'Plain',\n          'random_state': 1, \n          'use_best_model': True, \n          'cat_features': cat_feat, \n          'verbose': 100}\n\noof, y_preds, cb_models = run_cb(params)\nprint(f'CV = {roc_auc_score(y_train, oof)}')","70a41fda":"print(f'CV = {roc_auc_score(y_train, oof)}')","c995b708":"sub = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/sample_submission.csv')\nsub['target'] = y_preds\nsub.to_csv('submission.csv', index=False)\nsub.head()","e8b83073":"### Splitting data","edf1bf6b":"### Future work\n- Try new features\n- Hyperparameter tuning","16a24fa3":"### Modeling","f71e230c":"### Feature Engineering","0306282d":"### CV","b1864064":"A very simple notebook as a baseline"}}