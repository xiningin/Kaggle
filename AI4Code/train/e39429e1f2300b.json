{"cell_type":{"af83ad91":"code","bc9249b9":"code","0899de4b":"code","4c8f96f0":"code","e6a877a7":"code","62b13f14":"code","0402db7b":"code","99cbdebc":"code","b5ac9a46":"code","b448eb23":"code","da04f8b7":"code","279ce1ad":"code","a0473384":"code","c14e25af":"code","c955bd25":"code","137913e3":"code","806f110e":"code","5ba9f06e":"code","3884dd94":"code","b1fb0522":"code","d57a4fef":"code","600c86ea":"markdown","0f4f919c":"markdown","ffaf6bee":"markdown","f4025215":"markdown","694dc8ae":"markdown","85b6b151":"markdown","de811e7e":"markdown","263943c1":"markdown","825f061c":"markdown","21e4acca":"markdown","e01dc721":"markdown","1c08cef2":"markdown"},"source":{"af83ad91":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom keras import callbacks\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom numpy import array","bc9249b9":"data = pd.read_csv(\"..\/input\/stock-market\/Stock_data.csv\")\ndata.head()","0899de4b":"temp = data.reset_index()['Close']\nplt.plot(temp)","4c8f96f0":"data.head()","e6a877a7":"temp.shape","62b13f14":"scaler = MinMaxScaler(feature_range=(0,1))\ntemp = scaler.fit_transform(np.array(temp).reshape(-1,1))","0402db7b":"temp.shape","99cbdebc":"# Doing train test split (70-30) sequencially \ndata = data.sort_values(by=\"Date\")\nntrain = int(len(temp)*0.7)\ntrain, test = temp[0:ntrain,:], temp[ntrain:len(temp),:1]\n\n# Convert array of values to dataset matrix\ndef dataset(df,time_step=1):\n    dx,dy = [],[]\n    for i in range(len(df)-time_step-1):\n        dx.append(df[i:(i+time_step),0])\n        dy.append(df[i+time_step,0])\n    return np.array(dx),np.array(dy)","b5ac9a46":"# Reshaping the Dataset in 3 parts\ntime_step = 50\nx_train, y_train = dataset(train,time_step)\nx_test, y_test = dataset(test,time_step)\n\n# Checking the Shape\nprint(x_train.shape,x_test.shape)\nprint(y_train.shape,y_test.shape)","b448eb23":"# Reshaping the data to numpy array as per requirement for LSTM\nx_train = x_train.reshape(x_train.shape[0],x_train.shape[1],1)\nx_test = x_test.reshape(x_test.shape[0],x_test.shape[1],1)\n\n# Checking the Shape\nprint(x_train.shape,x_test.shape)\nprint(y_train.shape,y_test.shape)","da04f8b7":"model = Sequential()\nmodel.add(LSTM(64,return_sequences = True,input_shape = (50,1)))\nmodel.add(LSTM(32))\nmodel.add(Dense(16,activation='relu'))\nmodel.add(Dense(1))","279ce1ad":"model.summary()\nmodel.compile(loss='mse',optimizer='adam')","a0473384":"earlystopping = callbacks.EarlyStopping(monitor =\"val_loss\",mode =\"min\",patience = 3,restore_best_weights = True)\nmodel.fit(x_train,y_train,validation_data=(x_test,y_test),epochs = 15,batch_size = 32,verbose=1,callbacks =[earlystopping])","c14e25af":"yp_train = model.predict(x_train)\nyp_test = model.predict(x_test)","c955bd25":"yp_train = scaler.inverse_transform(yp_train)\nyp_test = scaler.inverse_transform(yp_test)","137913e3":"print(x_train.shape,x_test.shape)\nprint(y_train.shape,y_test.shape)\nprint(yp_train.shape,yp_test.shape)","806f110e":"# MAE\nprint(\"MAE for Train Data: {}\".format(mean_absolute_error(y_train,yp_train)))\nprint(\"MAE for Test Data: {}\\n\".format(mean_absolute_error(y_test,yp_test)))\n\n# MSE\nprint(\"MSE for Train Data: {}\".format(mean_squared_error(y_train,yp_train)))\nprint(\"MSE for Test Data: {}\\n\".format(mean_squared_error(y_test,yp_test)))","5ba9f06e":"# Shifting train predictions for plotting\nlook_back=50\nyp_train_plot = np.empty_like(temp)\nyp_train_plot[:,:] = np.nan\nyp_train_plot[look_back:len(yp_train)+look_back,:] = yp_train\n\n# Shifting test predictions for plotting\nyp_test_plot = np.empty_like(temp)\nyp_test_plot[:, :] = np.nan\nyp_test_plot[len(yp_train)+(look_back*2)+1:len(temp)-1,:] = yp_test\n\n# Plotting predictions\nplt.plot(scaler.inverse_transform(temp))\nplt.plot(yp_train_plot)\nplt.plot(yp_test_plot)\nplt.show()","3884dd94":"x_input = test[(len(test)-50):].reshape(1,-1) # We take last 50 days data from test data for our future prediction \ntemp_input = list(x_input)\ntemp_input = temp_input[0].tolist() # Test data","b1fb0522":"# Predictions for next 30 days\n\nlstm_op = []\nn_steps = 50\ni = 0\nwhile(i < 30):\n    if(len(temp_input)>50):\n        x_input=np.array(temp_input[1:])\n        \n        #print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        \n        yp = model.predict(x_input, verbose=0)\n        print(\"{} day output {}\".format(i,yp))\n        \n        temp_input.extend(yp[0].tolist())\n        temp_input=temp_input[1:]\n        lstm_op.extend(yp.tolist())\n        i=i+1\n    else:\n        x_input = x_input.reshape((1,n_steps,1))\n        yp = model.predict(x_input,verbose=0)\n        \n        temp_input.extend(yp[0].tolist())\n        lstm_op.extend(yp.tolist())\n        i=i+1","d57a4fef":"day_new = np.arange(1,51)\nday_pred=np.arange(51,51+30)\n\nplt.plot(day_new,scaler.inverse_transform(temp[len(temp)-50:]))\nplt.plot(day_pred,scaler.inverse_transform(lstm_op))","600c86ea":"> **Orange Line: Train Data**\n>\n> **Green Line: Test Data**","0f4f919c":"## Train Test Split","ffaf6bee":"## Predicting & Forecasting for next 30 Days","f4025215":"## Evaluating the Model using metrics","694dc8ae":"## Applying LSTM Model","85b6b151":"## Conclusion\n> #### Used Stacked LSTM for Stock Market Prediction & Done Forecasting for next 30 days.","de811e7e":"## Data Transformation using Min-Max-Scaler","263943c1":"## Prediction on Test Data","825f061c":"## Loading Libraries & Importing Dataset","21e4acca":"## Plotting the Predicted Output","e01dc721":"## **Aim:** Stock Market Prediction & Forecasting using Stacked LSTM\n\n<br>\n\n> #### **By:** Siddharth Kulkarni\n> #### **Technique used:** Deep Learning: Stacked Long Short Term Memory (LSTM)\n> #### **Language used:** Python\n> #### **Dataset:** https:\/\/raw.githubusercontent.com\/mwitiderrick\/stockprice\/master\/NSE-TATAGLOBAL.csv (Stock)","1c08cef2":"## Inverse Transformation "}}