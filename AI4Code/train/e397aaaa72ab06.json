{"cell_type":{"0ceab6c7":"code","d4c91103":"code","442ae4a4":"code","9058b3e7":"code","9c2b3cda":"code","9a483a00":"code","fe3c6077":"code","29491497":"code","40663374":"code","f78cf372":"code","eeaa6ac8":"code","400a0b5b":"code","821a2986":"code","c1d3bea8":"code","68c6a2a3":"code","9c9268f4":"code","0ac425c8":"code","1d0bb9e1":"code","f39c5ad2":"code","52e6f2ff":"code","10696586":"code","1714b80f":"code","3fc8956f":"code","70303915":"code","1d827daf":"code","2a3a5665":"code","a5942a7c":"code","0392f00e":"code","d0721319":"code","8f5f09e7":"code","e7ff01e6":"code","f97aabd3":"code","edc448b7":"markdown","ea6ebceb":"markdown","d12c4507":"markdown","aedf9ee5":"markdown","3915fb87":"markdown","4599278b":"markdown","7c4a892b":"markdown","b96e8838":"markdown","8efc18d5":"markdown","7ed5d3de":"markdown"},"source":{"0ceab6c7":"%%HTML\n<style type=\"text\/css\">\n    table.dataframe td, table.dataframe th {\n        border-style: solid;\n    }\n<\/style>","d4c91103":"import warnings\nwarnings.simplefilter(\"ignore\")\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nimport time\nimport pandas as pd\nimport numpy as np\nimport lightgbm as lgb\nimport tracemalloc\nimport warnings\nwarnings.filterwarnings('ignore')\nimport statsmodels.api as sm\n\nfrom sklearn.metrics import make_scorer, accuracy_score\nfrom sklearn import model_selection\nfrom sklearn.model_selection import train_test_split\n# from sklearn.ensemble import RandomForestClassifier\n# from sklearn.linear_model import LogisticRegression\n# from sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix\n# from sklearn.metrics import accuracy_score\n# from sklearn.metrics import classification_report\n# from sklearn.metrics import accuracy_score\n# from sklearn.linear_model import LogisticRegression\n# from sklearn.tree import DecisionTreeClassifier\n# from sklearn.neighbors import KNeighborsClassifier\n# from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n# from sklearn.naive_bayes import GaussianNB\n# from sklearn.svm import SVC\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold, TimeSeriesSplit\nfrom sklearn.metrics import roc_auc_score\n\n\nimport category_encoders as ce\n\nimport lightgbm as lgb\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score, roc_auc_score, precision_recall_fscore_support, f1_score, confusion_matrix\n\nfrom pandas_summary import DataFrameSummary\nfrom sklearn.metrics import classification_report\n%matplotlib inline\nsns.set_style(\"whitegrid\")\n\npd.set_option('display.max_columns', None)  # or 1000\npd.set_option('display.max_rows', None)  # or 1000\npd.set_option('display.max_colwidth', -1)  # or 199\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","442ae4a4":"train_df = pd.read_csv ( \"..\/input\/widsdatathon2021\/TrainingWiDS2021.csv\")\ntest_df = pd.read_csv(\"..\/input\/widsdatathon2021\/UnlabeledWiDS2021.csv\")\ndata_dict = pd.read_csv ( \"..\/input\/widsdatathon2021\/DataDictionaryWiDS2021.csv\")","9058b3e7":"# Training and Test datasets dimensions\nprint (\"Training dataset: \",train_df.shape)\nprint (\"Testing dataset: \",test_df.shape)","9c2b3cda":"# DataFrame Summary by pandas,  the summary package (extension of pandas.describe method) \ndfs = DataFrameSummary(train_df)\ndfs.summary()","9a483a00":"# Display Data Dictionary\ndata_dict.head()","fe3c6077":"train_df.head()","29491497":"test_df.head()","40663374":"test_df.dtypes\n","f78cf372":"# Drop non-patient attributes (Hospital related)\ntrain_df = train_df.drop(columns=['Unnamed: 0', 'encounter_id', 'hospital_id', 'elective_surgery', 'hospital_admit_source', 'icu_admit_source', 'icu_id', 'icu_stay_type', 'icu_type', 'readmission_status'])\n","eeaa6ac8":"train_df.shape","400a0b5b":"train_df.dtypes","821a2986":"# Check for missing values\ntrain_df.isna().sum().head(10)","c1d3bea8":"train_df.isna().mean().round(4)*100","68c6a2a3":"# remove features with more than 70% missing values\nthreshold =0.7\n\n#Dropping columns with missing value rate higher than threshold\ntrain_df = train_df[train_df.columns[train_df.isna().mean().round(4) < threshold]]\n\n#Filling missing values with medians of the columns\ntrain_df = train_df.fillna(train_df.median())\n\ntrain_df.head()","9c9268f4":"train_df.shape","0ac425c8":"categorical_features=[]\nfor c in train_df.columns:\n    col_type = train_df[c].dtype\n    if col_type == 'object' or col_type.name == 'category':\n        train_df[c] = train_df[c].astype('category')\n        categorical_features.append(c)\nprint(categorical_features)","1d0bb9e1":"# Categorical Feature Encoding\ndisplay(train_df[categorical_features].head().style.set_caption(\"Object columns before One Hot Encoding\"))\n\n#Apply OH Encoding\nohe = ce.OneHotEncoder(handle_unknown='value', use_cat_names=True)\nOH_cols_train = pd.DataFrame(ohe.fit_transform(train_df[categorical_features]))\nOH_cols_train.index = train_df.index\n\nOH_cols_test = pd.DataFrame(ohe.transform(test_df[categorical_features]))\nOH_cols_test.index = test_df.index\n\n# Drop original categorical columns and replace with OH encoded columns\ntrain_df.drop(categorical_features, axis=1, inplace=True)\ntrain_df = pd.concat([train_df, OH_cols_train], axis=1)\n\ntest_df.drop(categorical_features, axis=1, inplace=True)\ntest_df = pd.concat([test_df, OH_cols_test], axis=1)\n\ndisplay(OH_cols_train.head().style.set_caption(\"Object columns after One Hot Encoding\"))","f39c5ad2":"train_df.head()","52e6f2ff":"train_df.describe()","10696586":"# Target distribution analysis\nfig, ax =plt.subplots(1,2)\n\n\nplt.style.use('fivethirtyeight')\nplt.figure(figsize=(3,4))\nsns.set_context(\"paper\", font_scale=1.2)                                                  \nsns.countplot('diabetes_mellitus',data=train_df, ax=ax[0])\ntrain_df['diabetes_mellitus'].value_counts().plot.pie(explode=[0,0.2],autopct='%1.2f%%',ax=ax[1])\nfig.show()","1714b80f":"sns.displot(data = train_df, kind = 'hist', x = 'age', hue = 'diabetes_mellitus', multiple = 'stack',bins=25,height = 4, aspect = 1.7)","3fc8956f":"# Number of feature from Training dataset\nfeatures=train_df.columns.to_list()\nprint ('Number of features ', len(features))","70303915":"# remove target variable from training data\nfeatures_remove=['diabetes_mellitus']\nfor f in features_remove:\n    features.remove(f)","1d827daf":"target = 'diabetes_mellitus'\n\n# Prepare training and test data\nX, y = train_df[features], train_df[target]\nX_test = test_df[features]\n\n","2a3a5665":"model_params = {\n    \"objective\": \"binary\",\n    \"metric\":\"auc\",\n    \"seed\": 42,\n    \"num_iterations\": 500, \n    \"learning_rate\": 0.05, \n    \"max_depth\": 8,\n    \"num_leaves\" : 32, \n    \"is_unbalace\" : True, \n    \"min_data_in_leaf\": 200,\n    \"lambda_l1\" : 1,\n    \"lambda_l2\": 0.1,\n    \"bagging_fraction\" : 0.7,\n    \"feature_fraction\" : 0.8, \n    \"min_split_gain\" : 0.5, \n    \"subsample_for_bin\" : 200\n}\n\nSEED = 42\nN_SPLITS = 5\n\n# Initialize variables\ny_oof_pred = np.zeros(len(X))\ny_test_pred = np.zeros(len(X_test))\n\nkf = StratifiedKFold(n_splits=N_SPLITS, shuffle=True, random_state=SEED)\nfor fold, (train_idx, val_idx) in enumerate(kf.split(X, y)):\n    print(f\"Fold {fold + 1}:\")\n\n    # Prepare training and validation data\n    X_train = X.iloc[train_idx].reset_index(drop=True)\n    X_val = X.iloc[val_idx].reset_index(drop=True)\n\n    y_train = y.iloc[train_idx].reset_index(drop=True)\n    y_val = y.iloc[val_idx].reset_index(drop=True)  \n\n    train_data = lgb.Dataset(X_train, label=y_train)\n    val_data = lgb.Dataset(X_val, label=y_val)\n\n    # Define model\n    model = lgb.train(params=model_params,\n                      train_set=train_data,\n                      valid_sets=[train_data, val_data],\n                      verbose_eval=50,\n                     )\n\n    # Predict out of fold validation set and calculate evaluation metric\n    y_val_pred = model.predict(X_val)\n    print(f\"ROC AUC: {roc_auc_score(y_val, y_val_pred)}\")\n    y_oof_pred[val_idx] = y_val_pred\n    \n    # Make predictions\n    y_test_pred += model.predict(X_test)\n\n# Calculate evaluation metric for out of fold validation set\ny_test_pred = y_test_pred \/ N_SPLITS","a5942a7c":"feature_imp = pd.DataFrame(sorted(zip(model.feature_importance(importance_type=\"gain\"),X.columns)), columns=['Value','Feature'])\n\n#display(feature_imp.sort_values('Value', ascending=False).tail(50))\n\n\n#display(feature_imp.sort_values('Value', ascending=False).head(50))\nfig, ax = plt.subplots(1,2, figsize=(16, 12))\nfeature_imp.sort_values('Value', ascending=True).tail(20).set_index('Feature').plot.barh(ax=ax[0])\nax[0].set_title('Top 20 Most Important Features')\nfeature_imp.sort_values('Value', ascending=True).head(20).set_index('Feature').plot.barh(ax=ax[1])\nax[1].set_title('Bottom 20 Least Important Features')\nplt.tight_layout()\nplt.show()\n","0392f00e":"test_df.head()","d0721319":"def Kaggle_submission(file_name,model,test_data,ids_list):\n    if TARGET in test_data.columns:\n        test_data.drop([TARGET],axis=1,inplace=True)\n    #test_pred=model.predict(test_data[features])[:,1]\n    test_pred=model.predict(test_data[features])\n    print (test_pred[1:2])\n\n    submit=pd.DataFrame()\n    submit['encounter_id'] = ids_list\n    submit['diabetes_mellitus'] = test_pred\n    submit.to_csv(file_name,index=False)\n    return submit","8f5f09e7":"TARGET=\"diabetes_mellitus\"\nsubmit=Kaggle_submission(\"LGBM_baseline_v1.csv\",model,test_df,test_df['encounter_id'].tolist())","e7ff01e6":"submit.head(20)","f97aabd3":"#!kaggle competitions submit -c widsdatathon2021 -f LGBM_baseline.csv -m \"inital model\"","edc448b7":"> ### Load datasets","ea6ebceb":"### Model evaluation","d12c4507":"### Exploratory Data Analysis (EDA)","aedf9ee5":"### Import library","3915fb87":"### Initial Setup","4599278b":"### Preprocessing","7c4a892b":"### identify categorical data","b96e8838":"### Test Submission","8efc18d5":"**One Hot Encoding**\n\nOne Hot Encode categorical columns.","7ed5d3de":"### change table format"}}