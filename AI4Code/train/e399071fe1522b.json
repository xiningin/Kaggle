{"cell_type":{"4b952c04":"code","59deb82a":"code","1a668573":"code","95a0db8a":"code","1220a5b3":"code","cf8d8268":"code","f9811091":"code","43e4c2d8":"code","7ed22498":"code","f7d0bd31":"code","9dca1f3d":"code","b8535d3a":"code","aafbf0b5":"code","bf192520":"code","e988d1fa":"code","8da8db57":"code","814c47f0":"code","47e6d083":"code","2232dd71":"code","e128b92c":"code","b1c4c0be":"code","32993cbc":"code","65849300":"code","68cf9185":"code","f55706e6":"code","f24aae3c":"code","4464d970":"code","1c018e91":"code","01cf5875":"code","8010e52e":"code","1fea3c57":"code","839901a9":"code","1ddaf13a":"code","c68c5d34":"code","d87c11f8":"code","dcb43957":"markdown","d21ee744":"markdown","3804b0d2":"markdown","3a4170cd":"markdown","5f183de4":"markdown","45ccf3ef":"markdown","92bb2539":"markdown","e50ed629":"markdown","dfa78410":"markdown","bc1e23eb":"markdown","d5cdefd0":"markdown","edbe2e61":"markdown","e148f016":"markdown","663572c8":"markdown","5bc959ef":"markdown","fa157c5f":"markdown","90ae3c31":"markdown","1516a6be":"markdown","7f2ac824":"markdown","fa21f0be":"markdown","52351330":"markdown","0216d422":"markdown","31f52dde":"markdown","d6d69439":"markdown"},"source":{"4b952c04":"import numpy as np\nimport pandas as pd\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nimport json\nimport random\n\nfrom sklearn.metrics import confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix\n\nfrom keras.utils import to_categorical, Sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.applications import ResNet50","59deb82a":"path = '\/kaggle\/input\/cassava-leaf-disease-classification\/'\nos.listdir(path)","1a668573":"def plot_bar(data, name):\n    data_label = data[name].value_counts().sort_index()\n    dict_train = dict(zip(data_label.keys(), ((data_label.sort_index())).tolist()))\n    names = list(dict_train.keys())\n    values = list(dict_train.values())\n    plt.bar(names, values)\n    plt.grid()\n    plt.show()\n    \ndef plot_examples(label=0):\n    fig, axs = plt.subplots(1, 5, figsize=(25, 12))\n    fig.subplots_adjust(hspace = .2, wspace=.2)\n    axs = axs.ravel()\n    for i in range(5):\n        idx = train_data[train_data['label']==label].index[i]\n        img = cv2.imread(path+'train_images\/'+train_data.loc[idx, 'image_id'])\n        axs[i].imshow(img)\n        axs[i].set_title(label_data[str(train_data.loc[idx, 'label'])])\n        axs[i].set_xticklabels([])\n        axs[i].set_yticklabels([])","95a0db8a":"train_data = pd.read_csv(path+'train.csv')\nsamp_subm = pd.read_csv(path+'sample_submission.csv')","1220a5b3":"with open(path+'label_num_to_disease_map.json') as json_file:\n    label_data = json.load(json_file)","cf8d8268":"print('number of train data:', len(train_data))\nprint('number of train images:', len(os.listdir(path+'train_images\/')))\nprint('number of test images:', len(os.listdir(path+'test_images\/')))","f9811091":"label_data","43e4c2d8":"len(train_data[train_data['label']==3])\/len(train_data.index)","7ed22498":"plot_bar(train_data, 'label')","f7d0bd31":"plot_examples(label=4)","9dca1f3d":"plot_examples(label=0)","b8535d3a":"plot_examples(label=1)","aafbf0b5":"plot_examples(label=2)","bf192520":"plot_examples(label=3)","e988d1fa":"ids_label_3 = list(train_data[train_data['label']==3].index)\nids_label_3_subset = random.sample(ids_label_3, 10500)\ntrain_data.drop(train_data.index[ids_label_3_subset], inplace=True)\ntrain_data.index = range(len(train_data.index))","8da8db57":"plot_bar(train_data, 'label')","814c47f0":"batch_size = 64\nimg_size = 256\nimg_channel = 3","47e6d083":"y_train = to_categorical(train_data['label'])","2232dd71":"class_weight = dict(zip(range(0, 5), (train_data['label'].value_counts().sort_index()\/len(train_data))))","e128b92c":"class_weight","b1c4c0be":"class DataGenerator(Sequence):\n    def __init__(self, path, list_IDs, labels, batch_size, img_size, img_channel):\n        self.path = path\n        self.list_IDs = list_IDs\n        self.labels = labels\n        self.batch_size = batch_size\n        self.img_size = img_size\n        self.img_channel = img_channel\n        self.indexes = np.arange(len(self.list_IDs))\n        \n    def __len__(self):\n        len_ = int(len(self.list_IDs)\/self.batch_size)\n        if len_*self.batch_size < len(self.list_IDs):\n            len_ += 1\n        return len_\n    \n    \n    def __getitem__(self, index):\n        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n        list_IDs_temp = [self.list_IDs[k] for k in indexes]\n        X, y = self.__data_generation(list_IDs_temp)\n        return X, y\n\n    \n    def __data_generation(self, list_IDs_temp):\n        X = np.zeros((self.batch_size, self.img_size, self.img_size, self.img_channel))\n        y = np.zeros((self.batch_size, 5), dtype=int)\n        for i, ID in enumerate(list_IDs_temp):\n            data_file = cv2.imread(self.path+ID)\n            img = cv2.resize(data_file, (self.img_size, self.img_size))\n            X[i, ] = img\/255.\n            y[i, ] = self.labels[i]\n        return X, y","32993cbc":"weights='..\/input\/models\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'","65849300":"conv_base = ResNet50(include_top=False,\n                     weights=weights,\n                     input_shape=(img_size, img_size, img_channel))\nconv_base.trainable = True","68cf9185":"model = Sequential()\nmodel.add(conv_base)\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.1))\nmodel.add(Dense(5, activation='softmax'))","f55706e6":"model.compile(optimizer=Adam(lr=0.001), loss='categorical_crossentropy', metrics=['accuracy'])","f24aae3c":"model.summary()","4464d970":"epochs = 10","1c018e91":"train_generator = DataGenerator(path+'train_images\/', train_data['image_id'], y_train, batch_size, img_size, img_channel)","01cf5875":"history = model.fit_generator(generator=train_generator,\n                              epochs = epochs)","8010e52e":"test_generator = DataGenerator(path+'test_images\/', samp_subm['image_id'], samp_subm['label'], len(samp_subm), img_size, img_channel)","1fea3c57":"predict = model.predict_generator(test_generator, verbose=1)","839901a9":"samp_subm['label'] = predict.argmax(axis=1)[0:len(samp_subm)]","1ddaf13a":"samp_subm.to_csv('submission.csv', index=False)","c68c5d34":"pred = model.predict_generator(train_generator, verbose=1)","d87c11f8":"conf_mat = confusion_matrix(y_train.argmax(axis=1)[0:len(train_data)], pred.argmax(axis=1)[0:len(train_data)])\nfig, ax = plot_confusion_matrix(conf_mat=conf_mat,\n                                show_normed=False,\n                                show_absolute=True,\n                                figsize=(8, 8))\nfig.show()","dcb43957":"# Prepare Data","d21ee744":"To overcome the drawback of class imbalance we reduce randomly about 10,500 images of class 3.","3804b0d2":"## Image Data Generator","3a4170cd":"# Predict Test Data","5f183de4":"# Intro\nWelcome to the [Cassava Leaf Disease Classification](https:\/\/www.kaggle.com\/c\/cassava-leaf-disease-classification) competition.\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/13836\/logos\/header.png)\n\nThere are 5 classifications (click for further informations):\n* 0: [Cassava Bacterial Blight (CBB)](https:\/\/en.wikipedia.org\/wiki\/Bacterial_blight_of_cassava)\n* 1: [Cassava Brown Streak Disease (CBSD)](https:\/\/en.wikipedia.org\/wiki\/Cassava_brown_streak_virus_disease)\n* 2: [Cassava Green Mottle (CGM)](https:\/\/en.wikipedia.org\/wiki\/Cassava_green_mottle_virus)\n* 3: [Cassava Mosaic Disease (CMD)](https:\/\/en.wikipedia.org\/wiki\/Cassava_mosaic_virus)\n* 4: Healthy\"\n\nWe will give a simple starter notebook based on a CNN.\n\n<span style=\"color: royalblue;\">Please vote the notebook up if it helps you. Thank you. <\/span>","45ccf3ef":"## Cassava Bacterial Blight (CBB)","92bb2539":"# Some Examples","e50ed629":"# Functions\nWe define some helper functions for visualizations.","dfa78410":"# EDA","bc1e23eb":"## Train Labels And Class Weights","d5cdefd0":"## Cassava Brown Streak Disease (CBSD)","edbe2e61":"Distribution of the labels. As we can see there is a class imbalance in terms of class 3. The proportion of class 3 is about 61%.","e148f016":"# Export Data","663572c8":"# Parameters","5bc959ef":"## Cassava Mosaic Disease (CMD)","fa157c5f":"# Load Data","90ae3c31":"# Path","1516a6be":"## Healthy","7f2ac824":"## Cassava Green Mottle (CGM)","fa21f0be":"# Define Model","52351330":"# Libraries\nWe load some standard libraries and packages of sklearn and keras.","0216d422":"# Analyse Wrong Predictions\nWe analyse the predictions on the train set.","31f52dde":"# Train Model","d6d69439":"There are serveral techniques to overcome this drawback of class imbalance:\n1. Remove instances from the majority class 3.\n2. Data augmentation to use to add extra samples from the minority classes. In our context of images, this is generally achieved by adding distortion to the data by performing translation, rotation, varying the scale as well as by adding different types of noise such as Gaussian or Poisson.\n3. Additional use if the dropout and regularization methods.\n\nIn the section **Prepare Data** we want to start with reduction on images for class 3."}}