{"cell_type":{"021fee9e":"code","d196f2c0":"code","f073d29c":"code","a375b661":"code","c12c933e":"code","c6f128cc":"code","b69fc232":"code","095270fa":"code","2b2a4f62":"code","617da3ef":"code","e42cf085":"code","b4556830":"code","0cafe739":"markdown","53eecf7d":"markdown","a275a3c7":"markdown","5aa8cc50":"markdown","2bb0a181":"markdown","dd0d96bb":"markdown","d73c43a3":"markdown","23c735a7":"markdown"},"source":{"021fee9e":"import numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Dropout, BatchNormalization\nfrom keras import backend as k\nfrom keras.datasets import mnist\nfrom keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array","d196f2c0":"(x_train, y_train),(x_test, y_test) = mnist.load_data()\n\nclasses_names = ['0','1','2','3','4','5','6','7','8','9']\n\nplt.figure(figsize=(10,10))\nfor i in range(25):\n  plt.subplot(5,5,i+1)\n  plt.xticks([])\n  plt.yticks([])\n  plt.grid(False)\n  plt.imshow(x_train[i],cmap=plt.cm.binary)\n  plt.xlabel(classes_names[y_train[i]])\nplt.show()  ","f073d29c":"Img_Size = 28\nx_train = x_train.reshape(x_train.shape[0],Img_Size,Img_Size,1)\nx_test = x_test.reshape(x_test.shape[0],Img_Size,Img_Size,1)\n\nx_train = x_train\/255.0\nx_test = x_test\/255.0\n\nx_train.shape, x_test.shape","a375b661":"import tensorflow as tf\nnum_classes = 10\ny_train = tf.keras.utils.to_categorical(y_train,num_classes)\ny_test = tf.keras.utils.to_categorical(y_test,num_classes)","c12c933e":"model = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=(5,5), activation=\"relu\", input_shape=(28,28,1)))\nmodel.add(Conv2D(filters=64, kernel_size=(5,5), activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(units=100, activation=\"relu\"))\nmodel.add(Dense(units=num_classes, activation=\"softmax\"))\nmodel.summary()","c6f128cc":"opt = keras.optimizers.Adam(learning_rate = 0.001)\n\nmodel.compile(optimizer=opt, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","b69fc232":"train_datagen = ImageDataGenerator(\n                                   rotation_range=10, \n                                   zoom_range = 0.10,  \n                                   width_shift_range=0.1, \n                                   height_shift_range=0.1)","095270fa":"model.fit(train_datagen.flow(x_train, y_train, batch_size=32), epochs=15, batch_size=32, verbose=1, validation_data=(x_test,y_test))","2b2a4f62":"results = model.evaluate(x_test, y_test)\nprint(\"test loss, test acc:\", results)","617da3ef":"model.save(\"model.h5\")","e42cf085":"Xmodel = keras.models.load_model(\".\/model.h5\")\nresults = Xmodel.evaluate(x_test, y_test)\nprint(\"test loss, test acc:\", results)","b4556830":"def load_image(filename):\n  img = load_img(filename, target_size=(28,28), color_mode = \"grayscale\")\n  img = img_to_array(img)\n  img = img.reshape(1,28,28,1)\n  img = img\/255.0\n  return img\n\ndef run_example():\n  img = load_image(\"..\/input\/imagepredict\/sample_image-300x298.webp\")\n  results = np.argmax(Xmodel.predict(img))\n  print(results)\n\n\nrun_example()\n","0cafe739":"## Importing Libraries\n","53eecf7d":"## Fitting Model","a275a3c7":"## Making Predictions","5aa8cc50":"## Evaluating Model","2bb0a181":"## Building Model","dd0d96bb":"## Saving and Loading Model","d73c43a3":"## Model Compilation","23c735a7":"## Loading and preprocessing Dataset"}}