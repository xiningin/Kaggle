{"cell_type":{"5890e1c9":"code","cf40881c":"code","3ad67672":"code","78ce37f5":"code","8553b527":"code","86ee41ba":"code","532cf39e":"code","dc9ff953":"code","4e5fe741":"code","c8f38d5a":"code","a3135c2b":"code","0ccfb1d8":"code","641d6599":"code","600ad26a":"code","b8ad73cc":"code","576266c0":"code","08a93da4":"code","87fd4871":"code","86352009":"code","05eccd01":"code","48310a18":"code","469fc43f":"code","0ce9941f":"code","031059d2":"code","129aae0a":"code","1a89a500":"code","db901866":"code","59d28327":"code","54c311d5":"code","3280e8d0":"code","efea5a83":"code","e0685422":"code","88ef4328":"code","99bc753a":"code","5f08c426":"code","4663b1ac":"code","0bab3a88":"code","e4d5a0d2":"code","a1eeb867":"code","11571945":"code","35c06e8e":"markdown","8b118834":"markdown","7a1d394b":"markdown","5deeaa41":"markdown","e0216fbd":"markdown","50863a67":"markdown","12d3af43":"markdown","7d32b71c":"markdown","0a6cbc70":"markdown","10e2529c":"markdown","fb910120":"markdown","3d0a1f44":"markdown","ddd36e2b":"markdown","d4232c73":"markdown","eb9de7b7":"markdown","cc52a424":"markdown","50f60ff2":"markdown","480be868":"markdown","22798e3f":"markdown","3899422c":"markdown","ce728cf8":"markdown","ee87da21":"markdown","00975360":"markdown","3c07dd1d":"markdown","44064fd0":"markdown","36e9cb68":"markdown","cd8de660":"markdown","b5b6e5ae":"markdown","2fa5c3f9":"markdown","8dc9ae82":"markdown","2eca5dbd":"markdown","2a16e77d":"markdown","c67e5cf6":"markdown","f5b68bf0":"markdown","b94b8358":"markdown","24a78759":"markdown","7a2ab025":"markdown","338b82bf":"markdown","5f8a297f":"markdown"},"source":{"5890e1c9":"import numpy as np\nimport pandas as pd \nimport os\nimport math\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.impute import SimpleImputer","cf40881c":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\").set_index('PassengerId')\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\").set_index('PassengerId')\n\ny = train['Survived']\ntrain = train.drop('Survived',axis=1)\n\ndisplay(train.head())\ndisplay(test.head())\n","3ad67672":"X = pd.concat([train,test])\nX.head()","78ce37f5":"X.dtypes","8553b527":"X.describe()","86ee41ba":"#Pclass is actually categorical\nX['Pclass'] = X['Pclass'].astype(object)\n\nnum_col = X.select_dtypes(include=['float64','int64']).columns\ncat_col = X.select_dtypes(include=['object']).columns","532cf39e":"sns.pairplot(X[num_col],corner=True)","dc9ff953":"plt.figure(figsize=(8,6))\ncorrelation = X[num_col].corr()\nsns.heatmap(correlation, mask = correlation <0.4, cmap='Blues')","4e5fe741":"X[num_col].isnull().sum()","c8f38d5a":"sns.distplot(X.Age).set_title(\"Age Before Imputing\")","a3135c2b":"imputer = SimpleImputer(strategy='median')\nimputed = imputer.fit_transform(X[['Age']])\n\nsns.distplot(imputed).set_title(\"Age After Median Imputing\")","0ccfb1d8":"def replace_with_random(a):\n    \"\"\"\n    a: Value or NaN to be replaced\n    \n    Cannot set a random state as it would generate the same value each time this function\n    is called. This is unlikely to be the derired behaviour\n    \"\"\"    \n    \n    from random import randint\n        \n    if pd.isnull(a):\n        return randint(20,55)\n    else:\n        return a","641d6599":"randimpute = X['Age'].apply(lambda a: replace_with_random(a))\n\nsns.distplot(randimpute).set_title(\"Age After Random Imputing\")","600ad26a":"# For now I will use my random approach for Age\nX['Age'] = randimpute","b8ad73cc":"imputer = SimpleImputer(strategy='median')\nX['Fare'] = imputer.fit_transform(X[['Fare']])","576266c0":"X[num_col].isnull().sum()","08a93da4":"X.describe()","87fd4871":"cat_col = X.select_dtypes(include=['object']).columns\nX[cat_col]","86352009":"X[cat_col].isnull().sum()","05eccd01":"# Do something about cabin feature, at least extract deck where possible\nplt.figure(figsize=(8,6))\nX['Deck'] = X['Cabin'].str[0]\nsns.countplot(x='Deck',data=X,palette=\"husl\")","48310a18":"temp_data = pd.merge(X['Deck'],y,on='PassengerId')\ntemp_data = temp_data.groupby('Deck').sum()\nsns.barplot(x=temp_data.index,y=temp_data['Survived'],palette='husl')","469fc43f":"X = X.drop(['Cabin','Deck'],axis=1)","0ce9941f":"cat_col = X.select_dtypes(include=['object']).columns\nX[cat_col].isnull().sum()","031059d2":"X['Fare'] = X['Fare'][X['Fare']<400]","129aae0a":"X['FamilySize'] = X['SibSp'] + X['Parch']\nX = X.drop(['SibSp','Parch'],axis=1)\n\nnum_col = X.select_dtypes(include=['float64','int64']).columns","1a89a500":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\n\n# Preprocessing for numerical data\nnumerical_transformer = Pipeline(steps=[\n    ('imputer',SimpleImputer(strategy='constant')),\n    ('scaler',StandardScaler())\n    ])\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n    ])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, num_col),\n        ('cat', categorical_transformer, cat_col)\n    ])","db901866":"# IMPORTANT: Now data is pre-processed, put it back into train and test sets and then split X and y.\ntest = X.loc[test.index]\nX = X.loc[train.index]\ny = y.loc[train.index]\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,train_size=0.75,random_state=81)","59d28327":"# Import models\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegressionCV\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom xgboost import XGBClassifier","54c311d5":"#Train RF model model, I did a Grid Search CV on this, and it yielded the following setup of parameters:\nRandomForest = RandomForestClassifier(n_estimators=500,\n                                      min_samples_split=5,\n                                      min_samples_leaf=1,\n                                      random_state=81)\n\nRF_pipeline = Pipeline(steps=[('preprocessor', preprocessor),('model', RandomForest)])\n\nRF_pipeline.fit(X_train, y_train)\n\ny_pred = RF_pipeline.predict(X_test)\n\nRF_accuracy = accuracy_score(y_test,y_pred)\n\nprint(\"Accuracy:\",RF_accuracy)","3280e8d0":"# from sklearn.model_selection import GridSearchCV\n# from sklearn.metrics import make_scorer\n\n# parameters = {'model__n_estimators':[100,500,750,1000],\n#               'model__min_samples_split':[2,5,10],\n#               'model__min_samples_leaf':[1,2,5,10],\n#               'model__max_depth':[1,3,5,10,20]}\n\n# scorer = make_scorer(accuracy_score,greater_is_better=True)\n\n# grid = GridSearchCV(RF_pipeline,parameters,scoring=scorer)\n\n# grid.fit(X_train,y_train)\n\n# y_pred = grid.predict(X_test)\n\n# accuracy = accuracy_score(y_test,y_pred)\n\n# final_params = grid.best_params_\n\n# print(\"Accuracy:\",accuracy)\n# print(final_params)","efea5a83":"XGB = XGBClassifier(eta=0.0001,max_depth = 12, gamma = 3,random_state=81)\n\nXGB_pipe = Pipeline(steps=[('preprocessor', preprocessor),('model', XGB)])\n\nXGB_pipe.fit(X_train, y_train)\n\ny_pred = XGB_pipe.predict(X_test)\n\nXGB_accuracy = accuracy_score(y_test,y_pred)\n\nprint(\"Accuracy:\",XGB_accuracy)","e0685422":"\"\"\"\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import make_scorer\n\nparameters = {'model__eta':[0.0001,0.0005,0.001,0.01],\n              'model__max_depth':[8,10,12,15],\n              'model__gamma':[1,2,3,4,5]}\n\nscorer = make_scorer(accuracy_score,greater_is_better=True)\n\ngrid = GridSearchCV(XGB_pipe,parameters,scoring=scorer)\n\ngrid.fit(X_train,y_train)\n\ny_pred = grid.predict(X_test)\n\naccuracy = accuracy_score(y_test,y_pred)\n\nfinal_params = grid.best_params_\n\nprint(\"Accuracy:\",accuracy)\nprint(final_params)\n\"\"\"","88ef4328":"Perceptron = Perceptron()\n\nPerc_pipeline = Pipeline(steps=[('preprocessor',preprocessor),('model',Perceptron)])\n\nPerc_pipeline.fit(X_train,y_train)\n\ny_pred = Perc_pipeline.predict(X_test)\n\nPerceptron_accuracy = accuracy_score(y_test,y_pred)\n\nprint(\"Accuracy:\",Perceptron_accuracy)","99bc753a":"LogRegCV = LogisticRegressionCV(cv=5)\n\nLR_pipeline = Pipeline(steps=[('preprocessor',preprocessor),('model',LogRegCV)])\n\nLR_pipeline.fit(X_train,y_train)\n\ny_pred = LR_pipeline.predict(X_test)\n\nLogReg_accuracy = accuracy_score(y_test,y_pred)\n\nprint(\"Accuracy:\",LogReg_accuracy)","5f08c426":"ADA = AdaBoostClassifier()\n\nADA_pipeline = Pipeline(steps=[('preprocessor',preprocessor),('model',ADA)])\n\nADA_pipeline.fit(X_train,y_train)\n\ny_pred = ADA_pipeline.predict(X_test)\n\nADA_accuracy = accuracy_score(y_test,y_pred)\n\nprint(\"Accuracy:\",ADA_accuracy)","4663b1ac":"%%time\n\nfrom sklearn.ensemble import StackingClassifier\n\nestimators = [('RF',RF_pipeline),\n              ('Perceptron',Perc_pipeline),\n              ('ADA',ADA_pipeline),\n              ('LogReg',LR_pipeline),\n              ('XGB',XGB_pipe)]\n\nstack = StackingClassifier(estimators=estimators)\nstack.fit(X_train,y_train)\ny_pred = stack.predict(X_test)\nstack_accuracy = accuracy_score(y_test,y_pred)\nprint(\"Accruacy:\",stack_accuracy)","0bab3a88":"%%time\n\nfrom sklearn.ensemble import VotingClassifier\n\nestimators = [('RF',RF_pipeline),\n              ('Perceptron',Perc_pipeline),\n              ('ADA',ADA_pipeline),\n              ('LogReg',LR_pipeline),\n              ('XGB',XGB_pipe)]\n\nvote = VotingClassifier(estimators=estimators)\nvote.fit(X_train,y_train)\ny_pred = vote.predict(X_test)\nvote_accuracy = accuracy_score(y_test,y_pred)\nprint(\"Accruacy:\",vote_accuracy)","e4d5a0d2":"results = pd.DataFrame({'Model':['Random Forest','Perceptron','Logistic Regression','ADA Boost','XGBoost','Stacked Model','Vote Model'],\n                        'Accuracy':[RF_accuracy, Perceptron_accuracy,LogReg_accuracy,ADA_accuracy,XGB_accuracy,stack_accuracy,vote_accuracy]}).set_index('Model')","a1eeb867":"results.sort_values('Accuracy',ascending=False)","11571945":"test_pred = RF_pipeline.predict(test)\n\nsubmission = pd.DataFrame(test_pred,index=test.index,columns=['Survived'])\n\nsubmission.to_csv(\".\/submission.csv\")","35c06e8e":"* # MY APPROACH TO A LEADING SCORE\n\nHi, thanks for reading. Please **UPVOTE** if you enjoy this. Outlined below I set out the following procedure for predicting the survivability of passengers from the famous Titanic sinking. My approach for building a prediction model is as follows:\n\n1. Load the data\n2. Explore the data\n3. Modify the data\n    3.1 Impute\n    3.2 Remove outliers\n    3.3 Scale\n    3.4 Drop where too many missing values\n4. Create new features\n5. Build an Sklearn Pipeline\n6. Train and Test several models\n7. Generate submission file\n    ","8b118834":"## Imputation for categorical columns","7a1d394b":"### Ada Boost","5deeaa41":"That's a lot of missing data for cabin, lets explore deck from it:","e0216fbd":"## View the Seaborn Pairplot for Numerical Data","50863a67":"### Stacking for all models\nThis combines all the models, to see if the combined models can predict better. Logistic Regression is used to choose the overall result from amongst the underlying models.","12d3af43":"## Imputation for Numerical Columns\n","7d32b71c":"Convert Pclass to categorical, as it is made up of class either 1,2 or 3.","0a6cbc70":"Split the data back into train and test datasets and split for modelling purposes.","10e2529c":"## Feature Engineering","fb910120":"And this is the direibution of ages we will use.","3d0a1f44":"So on the limited data we have, clearly being in the upper decks improves survival. It would be nice to include this, but 1,014 values is just too many to impute. For now I will drop Deck\/Cabin\n\nAn idea would be to try to infer Deck from ticket, as there seems to be some information in there that might help.","ddd36e2b":"So the RF model performs best. It is possible that running a GridSearchCV on ADA Boost and Perceptron may lead to better results and ultimately the Stack may improve by extension.","d4232c73":"### Age","eb9de7b7":"### Logistic Regression","cc52a424":"## Load the data","50f60ff2":"That should be it for missing data in numerical columns","480be868":"Now let's see the median imputed results...","22798e3f":"This isn't great, as our model may end up thinking that being 28 is super important in determining chance of survival, which it probably wasn't. As such, I have created a random imputer in the range 20,55 to retain the distribution. This is a somewhat arbitrary choice and a more scientific method would be preferred but for our purposes here, this should be fine:","3899422c":"### Random Forest","ce728cf8":"### ... beautiful!","ee87da21":"## View the data","00975360":"From this, I would make the following points:\n* Most of the data is positively skewed\n* There are a couple of outliers in Fare\n* There are no glaringly obvious strong correlations here","3c07dd1d":"Here we prepare the pipeline. See sklearn for further imformation","44064fd0":"## Generate Submission","36e9cb68":"What does survival look like by Deck?","cd8de660":"## Pipline","b5b6e5ae":"In order to deal with the above missing values, we explore a few approaches. The most troublesome at the moment is the missing values in age. Simply imputing the median has a huge effect on the distribution, see charts below:","2fa5c3f9":"![UPVOTE](https:\/\/i.imgur.com\/RVyQY7r.png)","8dc9ae82":"There is only one value to impute in Fare, using a median seems sensible","2eca5dbd":"As discussed above, there are no correlations between our features here, so there is no **multicolinearity**. What does this mean? In essense a model with features that share some form of relationship won't improve our model. It's probable that it won't negatively effect are model but it's far more likely to result in an overfitted and biased model. Leaving any variables in that have multicolinearity will make your fit appear to be good but when you come to submit the model, you will find poor results. ","2a16e77d":"In order to simplify our features, let's create a family variable that combines Parch and SibSp. It would be preferalble to have 1 dimension with only 60% zeros over 2 dimensions with at least 70% zeros. This is OK to do because, the data Parent\/Child and Sibling\/Spouse is of the same kind: they are counts of people.","c67e5cf6":"### XGBoost","f5b68bf0":"There are still two missing values for \"Embarked\", but we will let pipline handle the missing embarked value, see below for embedded iumputation using Sklearn's pipeline functions. There are only 2, so \"most common\" method should be OK.","b94b8358":"## Import basic packages","24a78759":"## Remove outliers\nBack to the numerical data. Let's clean up those outliers from before. Pipline imputation will take care of any missing values","7a2ab025":"### Fare","338b82bf":"### Perceptron","5f8a297f":"Thank you for reading. Please **UPVOTE** if you have enjoyed and leave a comment to indicate any suggestions for improvement, either to my approach or code. \n\nThanks again\n\n**Jon**"}}