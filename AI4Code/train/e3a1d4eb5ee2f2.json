{"cell_type":{"f8a3c780":"code","fb83ab48":"code","5bfe3573":"code","038f5276":"code","1122bb15":"code","cc63dfb9":"code","cd5efed3":"code","d802b095":"code","4ff188ab":"code","c84ea4fe":"code","ce4eadd7":"code","53c264b7":"code","d6e13cab":"code","72c07ba0":"code","a7801c74":"code","ad130e53":"code","86032ce6":"code","877466b1":"code","7a007632":"code","198d811e":"code","4a25c53f":"code","6991cbbb":"code","d1c5b256":"code","92996e0f":"code","265e2b56":"code","30bf2aa5":"code","50f7b39f":"code","30d28fa7":"code","fec7d6f8":"code","08e5177b":"code","411b2aaa":"code","b1df3179":"code","0a7ed108":"code","03c59436":"code","8ba4567c":"code","116ee782":"code","fda2d546":"code","9b6c93ff":"code","ddff3262":"code","0e4db879":"code","511cd286":"code","a4aa4b5f":"code","6c32c575":"code","63a81ba4":"code","e9ed0a16":"code","098f952a":"code","7d423ce4":"code","afecf22f":"code","46b4aa91":"code","8c95047e":"markdown","0bac146c":"markdown","ea21f2a3":"markdown","7220c243":"markdown","f553813e":"markdown","bbcd1b16":"markdown","07b095bc":"markdown","b526ad7e":"markdown","7be4e999":"markdown","0fbce2d6":"markdown","d9e5860e":"markdown","0dda7717":"markdown","7cedd00e":"markdown","04edbffe":"markdown","fabcab19":"markdown","62abd052":"markdown","402c138e":"markdown","ea3522e6":"markdown","a10834e6":"markdown"},"source":{"f8a3c780":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fb83ab48":"# Importing libs\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans, AffinityPropagation\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport plotly as py\nimport plotly.graph_objs as go\nimport os\npy.offline.init_notebook_mode(connected = True)\n#print(os.listdir(\"..\/input\"))","5bfe3573":"# Quick overview of the data\n\ndf = pd.read_csv('\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\nprint(df.head(3))\nprint('----------')\nprint('Shape: ',df.shape)\nprint('----------')\nprint(df.dtypes)\nprint('----------')\nprint(df.describe())\nprint('---------- ')\nprint(df.isnull().sum())","038f5276":"# Some quick feature engineering for plotting\n\n# Age bin \/ range\nbins = [18, 22, 50, 70]\nlabels = ['Young', 'Adult', 'Senior']\ndf['Age Range'] = pd.cut(df['Age'], bins=bins, labels=labels, right=False)\n\n\n# Age banding\ndef age_band(num):\n    for i in range(1, 100):\n        if num < 10*i :  return f'{(i-1) * 10} ~ {i*10}'\n\ndf['age_band'] = df['Age'].apply(age_band)\n","1122bb15":"# For viz: Ratio of Males & Females\n\nx=df.groupby(['Gender'])['Gender'].count()\ny=len(df)\nr=((x\/y)).round(2)\n\nmf_ratio = pd.DataFrame(r).T\n","cc63dfb9":"fig, ax = plt.subplots(1,1,figsize=(6.5, 2.5))\n\nax.barh(mf_ratio.index, mf_ratio['Male'], \n        color='#244747', alpha=0.7, label='Male')\nax.barh(mf_ratio.index, mf_ratio['Female'], left=mf_ratio['Male'], \n        color='#91b8bd', alpha=0.7, label='Female')\n\nax.set_xlim(0, 1)\nax.set_xticks([])\nax.set_yticks([])\n\n# male percentage\nfor i in mf_ratio.index:\n    ax.annotate(f\"{int(mf_ratio['Male'][i]*100)}%\", \n                   xy=(mf_ratio['Male'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=60, fontweight='light', fontfamily='serif',\n                   color='white')\n\n    ax.annotate(\"Male\", \n                   xy=(mf_ratio['Male'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=12, fontweight='light', fontfamily='serif',\n                   color='white')\n    \n    \nfor i in mf_ratio.index:\n    ax.annotate(f\"{int(mf_ratio['Female'][i]*100)}%\", \n                   xy=(mf_ratio['Male'][i]+mf_ratio['Female'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=60, fontweight='light', fontfamily='serif',\n                   color='#244747')\n    ax.annotate(\"Female\", \n                   xy=(mf_ratio['Male'][i]+mf_ratio['Female'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=12, fontweight='light', fontfamily='serif',\n                   color='#244747')\n\n\n# Title & Subtitle\nfig.text(0.125,1.03,'Male & Female distribution', fontfamily='serif',fontsize=15, fontweight='bold')\nfig.text(0.125,0.92,'We see a fairly even split, but with slightly more females.',fontfamily='serif',fontsize=12)  \n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n    \n\n\n#ax.legend(loc='lower center', ncol=3, bbox_to_anchor=(0.5, -0.06))\n\n# Removing legend due to labelled plot\nax.legend().set_visible(False)\nplt.show()","cd5efed3":"fig = plt.figure(figsize=(12, 8))\ngs = fig.add_gridspec(3,1)\ngs.update(hspace= -0.55)\n\naxes = list()\ncolors = [\"#004c70\", \"#990000\",'#990000']\n\nfor idx, cls, c in zip(range(4), df['Age Range'].unique(), colors):\n    axes.append(fig.add_subplot(gs[idx, 0]))\n    \n    # you can also draw density plot with matplotlib + scipy.\n    sns.kdeplot(x='Spending Score (1-100)', data=df[df['Age Range']==cls], \n                fill=True, ax=axes[idx], cut=3, bw_method=0.25, \n                lw=1.4, edgecolor='lightgray',multiple=\"stack\", palette=['#91b8bd','#244747'], alpha=0.7,hue='Gender') \n    \n    \n    \n               \n    axes[idx].set_ylim(0, 0.04)\n    axes[idx].set_xlim(0, 100)\n    \n    axes[idx].set_yticks([])\n    if idx != 2 : axes[idx].set_xticks([])\n    axes[idx].set_ylabel('')\n    axes[idx].set_xlabel('')\n    \n    spines = [\"top\",\"right\",\"left\",\"bottom\"]\n    for s in spines:\n        axes[idx].spines[s].set_visible(False)\n        \n    axes[idx].patch.set_alpha(0)\n    axes[idx].text(-0.2,0.001,f'{cls} ',fontweight=\"light\", fontfamily='serif', fontsize=11,ha=\"right\")\n    if idx != 4 : axes[idx].get_legend().remove() \n    \n\nfig.text(0.13,0.8,\"Spending score distribution by gender and age range\", fontweight=\"bold\", fontfamily='serif', fontsize=15)\nfig.text(0.13,0.77,'Interestingly, Seniors have no higher spending scores than 60.',fontfamily='serif',fontsize=12)\n\nfig.text(0.776,0.77,\"Male\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#244247')\nfig.text(0.825,0.77,\"|\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='black')\nfig.text(0.835,0.77,\"Female\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#91b8bd')\n\nplt.show()   ","d802b095":"# Some quick feature engineering, just in case\n\ndf['Gender 1\/0'] = df['Gender'].apply(lambda x: 1 if x == 'Male' else 0)\n","4ff188ab":"def age_band(num):\n    for i in range(1, 100):\n        if num < 10*i :  return f'{(i-1) * 10} ~ {i*10}'\n\ndf['age_band'] = df['Age'].apply(age_band)\n\n","c84ea4fe":"mf = df.groupby('Gender')['age_band'].value_counts().unstack().sort_index().fillna(0).astype(int)\n\n\nfemale = mf.loc['Female']\nmale = -mf.loc['Male']\n\nfig, ax = plt.subplots(1,1, figsize=(10, 6))\nax.bar(male.index, male, width=0.5, color='#244247', alpha=0.8, label='Male')\nax.bar(female.index, female, width=0.5, color='#91b8bd', alpha=0.8, label='Female')\nax.set_ylim(-35, 50)\n\n# Annotations\nfor i in female.index:\n    ax.annotate(f\"{female[i]}\", \n                   xy=(i, female[i] + 3),\n                   va = 'center', ha='center',fontweight='light', fontfamily='serif',\n                   color='#4a4a4a')   \n\nfor i in male.index:\n    ax.annotate(f\"{-male[i]}\", \n                   xy=(i, male[i] - 3),\n                   va = 'center', ha='center',fontweight='light', fontfamily='serif',\n                   color='#4a4a4a')\n    \nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n\nax.set_xticklabels(mf.columns, fontfamily='serif')\nax.set_yticks([])    \n\nax.legend().set_visible(False)\nfig.text(0.16, 0.9, 'Age \/ Gender Distribution', fontsize=15, fontweight='bold', fontfamily='serif')\n\nfig.text(0.755,0.9,\"Male\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#244247')\nfig.text(0.815,0.9,\"|\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='black')\nfig.text(0.825,0.9,\"Female\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#91b8bd')\n\nplt.show()","ce4eadd7":"# Order for plotting categorical vars\n\nab_order = ['10 ~ 20', '20 ~ 30', '30 ~ 40','40 ~ 50','50 ~ 60' ,'60 ~ 70', '70 ~ 80']\n\ndata = df['age_band'].value_counts()[ab_order]\n\n\ncolor_map = ['#d4dddd' for _ in range(9)]\ncolor_map[2] = color_map[1] = '#244747' \n\nfig, ax = plt.subplots(1,1, figsize=(9, 6))\nax.bar(data.index, data, width=0.5, \n       edgecolor='darkgray',\n       linewidth=0.6,color=color_map)\n\n\n#annotations\nfor i in data.index:\n    ax.annotate(f\"{data[i]}\", \n                   xy=(i, data[i] + 3), #i like to change this to roughly 5% of the highest cat\n                   va = 'center', ha='center',fontweight='light', fontfamily='serif')\n\nfor s in ['top', 'left', 'right']:\n    ax.spines[s].set_visible(False)\n    \n\n\nax.set_xticklabels(data.index, fontfamily='serif', rotation=0)\n\n# Title and sub-title\n\nfig.text(0.09, 1, 'Distribution by age band', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.09, 0.95, 'The two most numerous age bands have been highlighted.', fontsize=12, fontweight='light', fontfamily='serif')\n\nfig.text(1.185, 1.01, 'Insight', fontsize=15, fontweight='bold', fontfamily='serif')\n\nfig.text(1.185, 0.715, '''\nThe two most frequent age bands are 20-30 \nand 30-40. In the early stages of our \nexploratory analysis, we can already start\nto think about who our most important customers\nare and, importantly, how we might tailor our\nmarketing activities or promotional offers based\non customer segments.\n'''\n         , fontsize=12, fontweight='light', fontfamily='serif')\n\nax.grid(axis='y', linestyle='-', alpha=0.4)   \n\ngrid_y_ticks = np.arange(0, 75, 10) # y ticks, min, max, then step\nax.set_yticks(grid_y_ticks)\nax.set_axisbelow(True)\n\n#Axis labels\n\nplt.xlabel(\"Age banding\", fontsize=12, fontweight='light', fontfamily='serif',loc='left',y=-1.5)\n\n    \n# thicken the bottom line if you want to\nplt.axhline(y = 0, color = 'black', linewidth = 1.3, alpha = .7)\n\nimport matplotlib.lines as lines\nl1 = lines.Line2D([1.05, 1.05], [0, 1.05], transform=fig.transFigure, figure=fig,color='black',lw=0.2)\nfig.lines.extend([l1])\n\n\n\nplt.show()","53c264b7":"import matplotlib.gridspec as gridspec\n\ngs = gridspec.GridSpec(1, 3)\n\nfig = plt.figure(figsize=(15, 3))\n\n\nfig.text(0.09, 1.09, 'Numeric variable distribution', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.09, 1, 'Our data appears to be relatively normal, therefore we will not transform it.', fontsize=12, fontweight='light', fontfamily='serif')\n\n\nax1 = fig.add_subplot(gs[0, 0]) # row 0, col 0\nax1 = sns.distplot(df[\"Age\"],color='#244747',hist_kws=dict(edgecolor=\"white\", linewidth=1,alpha=0.8))\n\nax2 = fig.add_subplot(gs[0, 1]) # row 0, col 1\nax2 = sns.distplot(df[\"Spending Score (1-100)\"],color='#244747',hist_kws=dict(edgecolor=\"white\", linewidth=1,alpha=0.8))\n\nax3 = fig.add_subplot(gs[0, 2]) # row 1, span all columns\nax3 = sns.distplot(df[\"Annual Income (k$)\"],color='#244747',hist_kws=dict(edgecolor=\"white\", linewidth=1,alpha=0.8))\n\nsns.despine()\n\nplt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=0.3, hspace=None) # useful for adjusting space between subplots\n","d6e13cab":"import matplotlib.gridspec as gridspec\n\n# Create 2x2 sub plots\ngs = gridspec.GridSpec(1, 3)\n\nfig = plt.figure(figsize=(15, 3))\n\n# Title and sub-title\n\nfig.text(0.105, 1.09, 'How our numeric variables relate to eachother', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.105, 1, 'We observe some interesting relationships betwen variables.', fontsize=12, fontweight='light', fontfamily='serif')\n\n# Grid spec layout\n\nax1 = fig.add_subplot(gs[0, 0]) # row 0, col 0\nax1 = sns.regplot(x = 'Age' , y = 'Annual Income (k$)' , data = df,color='#244747')\n\nax2 = fig.add_subplot(gs[0, 1]) # row 0, col 1\nax2 = sns.regplot(x = 'Age' , y = 'Spending Score (1-100)' , data = df,color='#244747')\n\nax3 = fig.add_subplot(gs[0, 2]) # row 1, span all columns\nax3 = sns.regplot(x = 'Annual Income (k$)' , y = 'Spending Score (1-100)' , data = df,color='#244747')\n\nsns.despine()\n\nplt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=0.3, hspace=None) # useful for adjusting space between subplots","72c07ba0":"fig = plt.figure(figsize=(16, 6))\n\n# Title and sub-title\n\nfig.text(0.105, .98, 'How our numeric variables relate to eachother', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.105, .93, 'Alternate plotting method using a loop.', fontsize=12, fontweight='light', fontfamily='serif')\n\n\nn = 0 \n\n\nfor x in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n    for y in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n        if x==y: continue\n\n        n += 1\n        plt.subplot(2 , 3 , n)\n        plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n        sns.regplot(x = x , y = y , data = df,color='#244747')\n        sns.despine()\n        plt.ylabel(y.split()[0]+' '+y.split()[1] if len(y.split()) > 1 else y )\n\n\nplt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None) # useful for adjusting space between subplot\n\nplt.show()\n","a7801c74":"\nfig, ax = plt.subplots(figsize=(10,4))\n\n# Title & Subtitle\nfig.text(0.097,1,'Annual income and spending score', fontfamily='serif',fontsize=15, fontweight='bold')\nfig.text(0.097,0.93,'There do seem to be some naturally occuring clusters here.',fontfamily='serif',fontsize=12)\n\n# Ax spines\nax.spines['top'].set_visible(False)\nax.spines['bottom'].set_visible(True)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n\nax.spines['bottom'].set_color('lightgray')\n\n# Grid\nax.set_axisbelow(True)\nax.yaxis.grid(color='lightgray', linestyle='-')\n\n# Plot\n\nplt.scatter(x = 'Annual Income (k$)' , y = 'Spending Score (1-100)' , data = df ,color='#244747',s = 25 , alpha = 0.8 )\n\n\n# Tick control\nplt.yticks(fontsize=10, fontfamily='serif',fontweight='light')\n#ax.yaxis.set_ticks(np.arange(0,140,10))\n\nplt.xticks(fontsize=10, fontfamily='serif',fontweight='light',rotation=90)\n\n\n# Label control\nax.set_ylabel('Annual Income (k$)',fontfamily='serif',fontsize=12)\nax.set_xlabel('Age',fontfamily='serif',fontsize=12)\n\nax.set_ylim(0, 100)\nplt.axhline(y = 0, color = 'black', linewidth = 1.3, alpha = .7)\n\nplt.show()","ad130e53":"#Selecting columns for clusterisation with k-means\nselected_cols = [\"Spending Score (1-100)\", \"Annual Income (k$)\", \"Age\"]\ncluster_data = df.loc[:,selected_cols]","86032ce6":"scaler = StandardScaler()\ncluster_scaled = scaler.fit_transform(cluster_data)","877466b1":"fig, ax = plt.subplots(figsize=(15,7))\n\nclusters_range = [2,3,4,5,6,7,8,9,10,11,12,13,14]\ninertias =[]\n\nfor c in clusters_range:\n    kmeans = KMeans(n_clusters=c, random_state=0).fit(cluster_scaled)\n    inertias.append(kmeans.inertia_)\n\nplt.plot(clusters_range,inertias, '-' , color='#244747',alpha = 0.8,linewidth=8)\nplt.plot(clusters_range,inertias, 'o',linewidth=20,color='#d4dddd')    \n\n\n\n##\nplt.xlabel('Number of Clusters',fontsize=12) , plt.ylabel('Inertia',fontsize=12)\nax.xaxis.set_ticks(np.arange(0,11,1))\n\n# Title & Subtitle\nfig.text(0.12,0.96,'Age, annual income and spending score', fontfamily='serif',fontsize=15, fontweight='bold')\nfig.text(0.12,0.92,'We want to select a point where inertia is low, and the number of clusters is not overwhelming for the business.',fontfamily='serif',fontsize=12)\n\n\nax.annotate(\" We'll select 6 clusters\", \n            xy=(4.5, 100), fontsize=12,\n            va = 'center', ha='center',\n            color='#4a4a4a',\n            bbox=dict(boxstyle='round', pad=0.4, facecolor='#efe8d1', linewidth=0))\n\n\n\n# Ax spines\nax.spines['top'].set_visible(False)\nax.spines['bottom'].set_visible(True)\nax.spines['left'].set_visible(True)\nax.spines['right'].set_visible(False)\n\nax.spines['left'].set_color('lightgray')\nax.spines['bottom'].set_color('lightgray')\n\n# Grid\nax.set_axisbelow(True)# Ax spines\nax.spines['top'].set_visible(False)\nax.spines['bottom'].set_visible(True)\nax.spines['left'].set_visible(True)\nax.spines['right'].set_visible(False)\n\nax.spines['left'].set_color('lightgray')\nax.spines['bottom'].set_color('lightgray')\nax.yaxis.grid(color='lightgray', linestyle='-')\nplt.show()","7a007632":"from sklearn.metrics import silhouette_samples, silhouette_score","198d811e":"# Running various cluster numbers with various random seeds\n\nclusters_range = range(2,15)\nrandom_range = range(0,20)\nresults =[]\nfor c in clusters_range:\n    for r in random_range:\n        clusterer = KMeans(n_clusters=c, random_state=r)\n        cluster_labels = clusterer.fit_predict(cluster_scaled)\n        silhouette_avg = silhouette_score(cluster_scaled, cluster_labels)\n        #print(\"For N_clusters =\", c,\" and seed =\", r,  \"\\nThe average silhouette_score is :\", silhouette_avg)\n        results.append([c,r,silhouette_avg])\n\n","4a25c53f":"# Turn results in to a pivot table\n\nresult = pd.DataFrame(results, columns=[\"Number of clusters\",\"Random seed\",\"Silhouette_score\"])\npivot_km = pd.pivot_table(result, index=\"Number of clusters\", columns=\"Random seed\",values=\"Silhouette_score\")\n","6991cbbb":"# Turn that pivot in to a nice visual\n\nfig = plt.figure(figsize=(16, 6))\n\n# Title and sub-title\n\nfig.text(0.035, 1.05, 'Cluster selection: Silhouette score', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.035, 1.001, 'Selecting 6 clusters gives us a high silhouette score that is insensitive to seed.', fontsize=12, fontweight='light', fontfamily='serif')\n\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\nsns.heatmap(pivot_km, annot=True, linewidths=2.5, fmt='.3f', cmap=cmap,cbar=False)\n\nplt.tight_layout()","d1c5b256":"# Six looks to be a good number of clusters. We will also assign these clusters to a df\nkmeans_sel = KMeans(n_clusters=6, random_state=1).fit(cluster_scaled)\nlabels = pd.DataFrame(kmeans_sel.labels_)\nclustered_data = cluster_data.assign(Cluster=labels)","92996e0f":"import matplotlib.cm as cm\n\nclusterer = KMeans(n_clusters=6, random_state=1)\ncluster_labels = clusterer.fit_predict(cluster_scaled)\nsilhouette_avg = silhouette_score(cluster_scaled, cluster_labels)\nprint(\"For n_clusters =\", 6,\" and seed =\", r,  \"\\nThe average silhouette_score is :\", silhouette_avg)\n\n# Compute the silhouette scores for each sample\nsample_silhouette_values = silhouette_samples(cluster_scaled, cluster_labels)\n\nfig, ax1 = plt.subplots(figsize=(10,6))\n\ny_lower = 10\nfor i in range(6):\n    # Aggregate the silhouette scores for samples belonging to\n    # cluster i, and sort them\n    ith_cluster_silhouette_values = sample_silhouette_values[cluster_labels == i]\n    ith_cluster_silhouette_values.sort()\n\n    size_cluster_i = ith_cluster_silhouette_values.shape[0]\n    y_upper = y_lower + size_cluster_i\n    \n    color = cm.nipy_spectral(float(i) \/ 6)\n    ax1.fill_betweenx(np.arange(y_lower, y_upper),0, ith_cluster_silhouette_values, facecolor='#244747', edgecolor=\"black\",linewidth=1, alpha=0.8)\n    \n    # Label the silhouette plots with their cluster numbers at the middle\n    ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n    \n    # Compute the new y_lower for next plot\n    y_lower = y_upper + 10  # 10 for the 0 samples\n    \n    \nfig.text(0.198, .99, 'Clustering: Silhouette scores', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.198,.93, 'For silhouette scores, we want each cluster to look roughly the same - we acheive that here.', fontsize=12, fontweight='light', fontfamily='serif')\n    \n\nax1.get_yaxis().set_ticks([])\n#ax1.set_title(\"Silhouette plot for various clusters\",loc='left')\nax1.set_xlabel(\"Silhouette Coefficient Values\")\nax1.set_ylabel(\"Cluster label\")\n# The vertical line for average silhouette score of all the values\nax1.axvline(x=silhouette_avg, color=\"lightgray\", linestyle=\"--\")\nax1.set_xticks([0, 0.2, 0.4, 0.6, 0.8])\nax1.spines['right'].set_visible(False)\nax1.spines['top'].set_visible(False)\nax1.spines['left'].set_visible(False)\n\nplt.show()","265e2b56":"clustered_data","30bf2aa5":"grouped_km = clustered_data.groupby(['Cluster']).mean().round(1)\ngrouped_km2 = clustered_data.groupby(['Cluster']).mean().round(1).reset_index()\ngrouped_km2['Cluster'] = grouped_km2['Cluster'].map(str)\ngrouped_km2","50f7b39f":"fig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111, projection='3d')\nax.scatter(grouped_km2[\"Spending Score (1-100)\"], grouped_km2[\"Annual Income (k$)\"], grouped_km2[\"Age\"],color=['#2a333f','#939da6','#0f4c81','#be3e35','#70090a','#244747'],alpha=0.5,s=500)\n\n# add annotations one by one with a loop\nfor line in range(0,grouped_km.shape[0]):\n     ax.text(grouped_km2['Spending Score (1-100)'][line], grouped_km2['Annual Income (k$)'][line],grouped_km2['Age'][line], s=('Cluster \\n'+grouped_km2['Cluster'][line]), horizontalalignment='center', fontsize=12, fontweight='light', fontfamily='serif')\n        \nax.set_xlabel(\"Spending Score (1-100)\")\nax.set_ylabel(\"Annual Income (k$)\")\nax.set_zlabel(\"Age\")\n\nfig.text(0.15, .77, '3D Plot: Clusters Visualized', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.15, .745, 'Here we can observe the general space that each cluster occupies by their means.', fontsize=12, fontweight='light', fontfamily='serif')\n\nfig.text(1.172, 0.77, 'Insight', fontsize=15, fontweight='bold', fontfamily='serif')\n\nfig.text(1.172, 0.347, '''\nWe observe a clear distinction between clusters. \n\nAs a business, we might want to rename our clusters\nso that they have a clear & obvious meaning; right now\nthe cluster labels mean nothing. \n\nLet's change that:\n\nCluster 0 - Low spending score, low income, moderate age - Least Valuable\n\nCluster 1 - Low spending score, high income, moderate age - Targets\n\nCluster 2 - Moderate spending score, moderate income, young age - Valuable\n\nCluster 3 - Moderate spending score, moderate income, high age - Less Valuable\n\nCluster 4 - High spending score, high income, young age - Most Valuable\n\nCluster 5 - High spending score, low income, young age - Very Valuable.\n'''\n         , fontsize=12, fontweight='light', fontfamily='serif')\n\nimport matplotlib.lines as lines\nl1 = lines.Line2D([1, 1], [0, 1], transform=fig.transFigure, figure=fig,color='black',lw=0.2)\nfig.lines.extend([l1])\n","30d28fa7":"\ncluster_only = clustered_data[['Cluster']]","fec7d6f8":"merge = pd.merge(df, cluster_only, left_index=True, right_index=True)\nmerge","08e5177b":"# Giving our clusters meaningful names\n\nmerge['Cluster_Label'] = merge['Cluster'].apply(lambda x: 'Least Valuable' if x == 0 else \n                                               'Targets' if x == 1 else\n                                               'Valuable' if x == 2 else\n                                               'Less Valuable' if x == 3 else\n                                               'Most Valuable' if x == 4 else 'Very Valuable')\n\n\n\n\n# New column for radar plots a bit later on \n\nmerge['Sex (100=Male)'] = merge['Gender'].apply(lambda x: 100 if x == 'Male' else 0)\n","411b2aaa":"merge['Cluster'] = merge['Cluster'].map(str)\n# Order for plotting categorical vars\nCluster_ord = ['0','1','2','3','4','5']\nclus_label_order = ['Targets','Most Valuable','Very Valuable','Valuable','Less Valuable','Least Valuable']","b1df3179":"clus_ord = merge['Cluster_Label'].value_counts().index\n\nclu_data = merge['Cluster_Label'].value_counts()[clus_label_order]\n##\n\ndata_cg = merge.groupby('Cluster_Label')['Gender'].value_counts().unstack().loc[clus_label_order]\ndata_cg['sum'] = data_cg.sum(axis=1)\n\n##\ndata_cg_ratio = (data_cg.T \/ data_cg['sum']).T[['Male', 'Female']][::-1]\n","0a7ed108":"fig, ax = plt.subplots(1,1,figsize=(12, 6),)\n\nax.barh(data_cg_ratio.index, data_cg_ratio['Male'], \n        color='#244247', alpha=0.7, label='Male')\nax.barh(data_cg_ratio.index, data_cg_ratio['Female'], left=data_cg_ratio['Male'], \n        color='#91b8bd', alpha=0.7, label='Female')\n\n\nax.set_xlim(0, 1)\nax.set_xticks([])\nax.set_yticklabels((data_cg_ratio.index), fontfamily='serif', fontsize=11)\n\n\n# male percentage\nfor i in data_cg_ratio.index:\n    ax.annotate(f\"{data_cg_ratio['Male'][i]*100:.3}%\", \n                   xy=(data_cg_ratio['Male'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=12, fontweight='light', fontfamily='serif',\n                   color='white')\n\nfor i in data_cg_ratio.index:\n    ax.annotate(f\"{data_cg_ratio['Female'][i]*100:.3}%\", \n                   xy=(data_cg_ratio['Male'][i]+data_cg_ratio['Female'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=12, fontweight='light', fontfamily='serif',\n                   color='#244247')\n    \n\nfig.text(0.129, 0.98, 'Gender distribution by cluster', fontsize=15, fontweight='bold', fontfamily='serif')   \nfig.text(0.129, 0.9, \n         '''\nWe see that females dominate most of our categories; except our Target cluster.\nHow might we encourage more male customers?''' , fontsize=12,fontfamily='serif')   \n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n    \nax.legend().set_visible(False)\n\nfig.text(0.77,0.98,\"Male\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#244247')\nfig.text(0.819,0.98,\"|\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='black')\nfig.text(0.827,0.98,\"Female\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#91b8bd')\nplt.show()","03c59436":"fig, ax = plt.subplots(1,1,figsize=(12, 6),)\n\nax.barh(data_cg_ratio.index, data_cg_ratio['Male'], \n        color='gray', alpha=0.1, label='Male')\nax.barh(data_cg_ratio.index, data_cg_ratio['Female'], left=data_cg_ratio['Male'], \n        color='lightgray', alpha=0.1, label='Female')\n\nax.barh(5, data_cg_ratio['Male']['Targets'], \n        color='#244747', alpha=0.7, label='Male')\n\n\nax.set_xlim(0, 1)\nax.set_xticks([])\nax.set_yticklabels((data_cg_ratio.index), fontfamily='serif', fontsize=11)\n\n\n# male percentage\nfor i in data_cg_ratio.index:\n    ax.annotate(f\"{data_cg_ratio['Male'][i]*100:.3}%\", \n                   xy=(data_cg_ratio['Male'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=12, fontweight='light', fontfamily='serif',\n                   color='gray')\n    \nax.annotate(f\"{data_cg_ratio['Male']['Targets']*100:.3}%\", \n                   xy=(data_cg_ratio['Male']['Targets']\/2, 'Targets'),\n                   va = 'center', ha='center',fontsize=15, fontweight='light', fontfamily='serif',\n                   color='white')  \n\n\nfor i in data_cg_ratio.index:\n    ax.annotate(f\"{data_cg_ratio['Female'][i]*100:.3}%\", \n                   xy=(data_cg_ratio['Male'][i]+data_cg_ratio['Female'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=12, fontweight='light', fontfamily='serif',\n                   color='gray')\n    \n\nfig.text(0.129, 0.98, 'Gender distribution by cluster: Key observation', fontsize=15, fontweight='bold', fontfamily='serif')   \nfig.text(0.129, 0.9, \n         '''\nHighlighted is the Targets cluster. These customers have a high income, \nmoderate age but low spending score, and they are mostly men. ''' , fontsize=12,fontfamily='serif')   \n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n    \nax.legend().set_visible(False)\n\nfig.text(0.77,0.98,\"Male\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#244247')\nfig.text(0.819,0.98,\"|\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='black')\nfig.text(0.827,0.98,\"Female\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#91b8bd')\nplt.show()","8ba4567c":"import matplotlib.gridspec as gridspec\n\n# Create 2x2 sub plots\ngs = gridspec.GridSpec(1, 3)\n\nfig = plt.figure(figsize=(16, 3))\n\n# Title and sub-title\n\nfig.text(0.099, 1.09, 'How do our clusters differ?', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.099, 1, 'We observe some interesting differences & similarities between clusters.', fontsize=12, fontweight='light', fontfamily='serif')\n\n# Grid spec layout\n\nax1 = fig.add_subplot(gs[0, 0]) # row 0, col 0\nax1 = sns.boxplot(x='Cluster_Label',y='Annual Income (k$)',hue='Gender',data=merge,order=['Targets','Most Valuable','Very Valuable','Valuable','Less Valuable','Least Valuable'],palette=['#244247','#91b8bd'],boxprops=dict(alpha=.9))\nax1.legend_.remove() \nax1.set_xlabel('')\n\nax2 = fig.add_subplot(gs[0, 1]) # row 0, col 1\nax2 = sns.boxplot(x='Cluster_Label',y='Age',hue='Gender',data=merge,order=['Targets','Most Valuable','Very Valuable','Valuable','Less Valuable','Least Valuable'],palette=['#244247','#91b8bd'],boxprops=dict(alpha=.9))\nax2.legend_.remove() \nax2.set_xlabel('')\n\nax3 = fig.add_subplot(gs[0, 2]) # row 1, span all columns\nax3 = sns.boxplot(x='Cluster_Label',y='Spending Score (1-100)',hue='Gender',data=merge,order=['Targets','Most Valuable','Very Valuable','Valuable','Less Valuable','Least Valuable'],palette=['#244247','#91b8bd'],boxprops=dict(alpha=.9))\nax3.legend_.remove() \nax3.set_xlabel('')\n\nsns.despine(right=True)\nsns.despine(offset=10, trim=True)\n\nax.legend().set_visible(False)\nfor tick in ax1.get_xticklabels():\n    tick.set_rotation(90)\nfor tick in ax2.get_xticklabels():\n    tick.set_rotation(90)\nfor tick in ax3.get_xticklabels():\n    tick.set_rotation(90)\n\n\n\nfig.text(0.79,1,\"Male\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#244247')\nfig.text(0.828,1,\"|\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='black')\nfig.text(0.835,1,\"Female\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#91b8bd')\n\n\nplt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=0.5, hspace=None) # useful for adjusting space between subplots","116ee782":"# Radar Plots\nclustered_data = merge\nclustered_data","fda2d546":"\n\nclus0 = clustered_data[clustered_data['Cluster_Label'] == 'Least Valuable']\nclus1 = clustered_data[clustered_data['Cluster_Label'] == 'Targets']\nclus2 = clustered_data[clustered_data['Cluster_Label'] == 'Valuable']\nclus3 = clustered_data[clustered_data['Cluster_Label'] == 'Less Valuable']\nclus4 = clustered_data[clustered_data['Cluster_Label'] == 'Most Valuable']\nclus5 = clustered_data[clustered_data['Cluster_Label'] == 'Very Valuable']\n\nlabels=np.array(['Age', 'Annual Income (k$)', 'Spending Score (1-100)','Sex (100=Male)'])\nstats0=clus0.loc[:,labels].mean()\nstats1=clus1.loc[:,labels].mean()\nstats2=clus2.loc[:,labels].mean()\nstats3=clus3.loc[:,labels].mean()\nstats4=clus4.loc[:,labels].mean()\nstats5=clus5.loc[:,labels].mean()\n\n\nangles=np.linspace(0, 2*np.pi, len(labels), endpoint=False)\n\n# close the plot\nstats0=np.concatenate((stats0,[stats0[0]]))\nstats1=np.concatenate((stats1,[stats1[0]]))\nstats2=np.concatenate((stats2,[stats2[0]]))\nstats3=np.concatenate((stats3,[stats3[0]]))\nstats4=np.concatenate((stats4,[stats4[0]]))\nstats5=np.concatenate((stats5,[stats5[0]]))\n\n\n\nangles=np.concatenate((angles,[angles[0]]))","9b6c93ff":"# Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom math import pi\nfig, ax = plt.subplots(1, 1, figsize=(7,7))\n\nax = plt.subplot(111, polar=True)\n\n\n\nax.plot(angles, stats2, 'o-', linewidth=2, color='#ff0000', label=\"Cluster 2: Valuable\")\nax.fill(angles, stats2, color='#ff0000',alpha=0.25)\n\nax.plot(angles, stats3, 'o-', linewidth=2,color='#112e51',label=\"Cluster 3: Less Valuable\")\nax.fill(angles, stats3, color='#112e51',alpha=0.25)\n\nax.set_theta_offset(pi \/ 2)\nax.set_theta_direction(-1)\n\nax.set_thetagrids((angles * 180\/np.pi)[0:4],labels) # Chnage this to match label count\n\n\nfig.text(0, 1.05, \"Clusters 'Valuable' & 'Less Valuable' compared\", fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0,1.01, 'These clusters are similar, so a closer look at how they differ was necessary.', fontsize=12, fontweight='light', fontfamily='serif')\nfig.text(0,0.975, 'We see that the area of significant difference is on Age.', fontsize=12, fontweight='light', fontfamily='serif')\n\nfig.text(1.24, 1.05, 'Insight', fontsize=15, fontweight='bold', fontfamily='serif')\n\nfig.text(1.24, 0.655, '''\nAs we noted above, \nclusters 2 & 3 look very similar \nin some of their features, namely\nspending score, annual income, and\ngender split.\n\nHowever, the two clusters differ \nsignificantly in average age. \nThis could impact marketing\/promotional\noffers in an important way;\nthink how you might advertise differently\nto 25 year olds vs 55 year olds.\n'''\n         , fontsize=12, fontweight='light', fontfamily='serif')\n\nimport matplotlib.lines as lines\nl1 = lines.Line2D([1.1, 1.1], [0, 1.1], transform=fig.transFigure, figure=fig,color='black',lw=0.2)\nfig.lines.extend([l1])\n\nfig.text(1,0.045,\"Valuable\", fontweight=\"bold\", fontfamily='serif', ha='right',fontsize=15, color='#ff0000')\nfig.text(1,0.01,\"Less Valuable\", fontweight=\"bold\", fontfamily='serif',ha='right', fontsize=15, color='#112e51')\n\nax.grid(True)","ddff3262":"df = clustered_data[['Cluster_Label','Age','Annual Income (k$)','Spending Score (1-100)','Sex (100=Male)']]\n\ndf = df.groupby('Cluster_Label')['Cluster_Label','Age','Annual Income (k$)','Spending Score (1-100)','Sex (100=Male)'].mean().reset_index()\n","0e4db879":"# Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom math import pi\n \n# Set data\ndf \n \n# ------- PART 1: Define a function that do a plot for one line of the dataset!\n \ndef make_spider( row, title, color):\n \n    # number of variable\n    categories=list(df)[1:]\n    N = len(categories)\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    # Initialise the spider plot\n    ax = plt.subplot(3,3,row+1, polar=True)\n\n    # If you want the first axis to be on top:\n    ax.set_theta_offset(pi \/ 2)\n    ax.set_theta_direction(-1)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='black',fontfamily='serif',fontweight='light', size=8)\n    #ax.set_xticks([]) # turn labels off if you want - can look quite nice\n\n    # Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.yticks([10,20,30,40,50,75,100], [\"10\",\"20\",\"30\",\"40\",\"50\",\"75\",\"100\"], color=\"grey\", size=4)\n    plt.ylim(0,100)\n\n    # Ind1\n    values=df.loc[row].drop('Cluster_Label').values.flatten().tolist()\n    values += values[:1]\n    ax.plot(angles, values, color=color, linewidth=2, linestyle='solid')\n    ax.fill(angles, values, color=color, alpha=0.4)\n\n    # Add a title\n    plt.title(title, size=10, fontfamily='serif',fontweight='bold', y=1.2)\n    plt.tight_layout()\n","511cd286":"\nmy_dpi=96\n\nplt.figure(figsize=(1000\/my_dpi, 1000\/my_dpi), dpi=my_dpi)\n \n# Create a color palette:\nmy_palette = plt.cm.get_cmap(\"crest\", len(df.index))\n \n# Loop to plot\nfor row in range(0, len(df.index)):\n    make_spider( row=row, title='Cluster: '+df['Cluster_Label'][row], color='#244747') #change this to my_palette if you want colour to vary by cluster\n    ","a4aa4b5f":"fig, ax = plt.subplots(1, 1, figsize=(7,7))\n\nax = plt.subplot(111, polar=True)\n\n\n\nax.plot(angles, stats0, 'o-', linewidth=2, color='#244747', label=\"Cluster 0\")\nax.fill(angles, stats0, color='#244747',alpha=0.25)\n\nax.plot(angles, stats4, 'o-', linewidth=2,color='#7A3832',label=\"Cluster 4\")\nax.fill(angles, stats4, color='#7A3832',alpha=0.25)\n\nax.set_theta_offset(pi \/ 2)\nax.set_theta_direction(-1)\n\nax.set_thetagrids((angles * 180\/np.pi)[0:4],labels)\n\n\nfig.text(0, 1.03, \"Clusters 'Least Valuable' & 'Most Valuable' compared\", fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0,0.99, 'These clusters look wildly different. Think how customers in these respective clusters', fontsize=12, fontweight='light', fontfamily='serif')\nfig.text(0,0.955, 'might be targeted differently. That is the power of clustering.', fontsize=12, fontweight='light', fontfamily='serif')\n\n\nfig.text(1.24, 1.03, 'Insight', fontsize=15, fontweight='bold', fontfamily='serif')\n\nfig.text(1.24, 0.574, '''\nWe observe clear and significant\ndifferences in the averge customer\nattributes between cluster 0 and 4.\n\nLeast Valuable is characterised by a\nyoung average age, low annual incomes\nand a low spending score, whereas\nMost Valuable scores highly in annual income\nand spending score.\n\nWe might target cluster 4 with more\nhigh-end products and, due to their\nspending score, work hard to keep \ntheir custom.\n'''\n         , fontsize=12, fontweight='light', fontfamily='serif')\n\nimport matplotlib.lines as lines\nl1 = lines.Line2D([1.1, 1.1], [0, 1.1], transform=fig.transFigure, figure=fig,color='black',lw=0.2)\nfig.lines.extend([l1])\n\n\n# Add legend\n#plt.legend(loc='upper right',frameon=False, bbox_to_anchor=(1.15, 0.1))\nfig.text(1,0.045,\"Most Valuable\", fontweight=\"bold\", fontfamily='serif', ha='right',fontsize=15, color='#7A3832')\nfig.text(1,0.01,\"Least Valuable\", fontweight=\"bold\", fontfamily='serif',ha='right', fontsize=15, color='#244747')\n\n\nax.grid(True)","6c32c575":"df_hm = df.set_index('Cluster_Label')\ndf_hm = df_hm.reindex(['Targets',\n 'Most Valuable',\n 'Very Valuable',\n 'Valuable',\n 'Less Valuable',\n 'Least Valuable'])\n","63a81ba4":"fig, ax = plt.subplots(1, 1, figsize=(7, 7))\n\n\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\nsns.heatmap(df_hm.T, \n            square=True,\n            linewidth=3, \n            vmax=80, vmin=1, \n            cmap=cmap, \n            cbar=False, \n            ax=ax,annot=True)\n\nax.spines['top'].set_visible(True)\n\nfig.text(0.97, 0.96, 'Cluster vizualisation', fontweight='bold', fontfamily='serif', fontsize=15, ha='right')    \n\nfig.text(0.97, 0.955, '''\nThis is a nice plot that helps us see the differences  in average values between clusters.\nIf a customer falls within a given cluster, as a business, we should tailor\nour approach based on the given cluster.\n''', \n         fontweight='light', fontfamily='serif', fontsize=12, va='top', ha='right') \n\nimport matplotlib.lines as lines\nl1 = lines.Line2D([1.1, 1.1], [0, 1.1], transform=fig.transFigure, figure=fig,color='black',lw=0.2)\nfig.lines.extend([l1])\n\nplt.xlabel(\"Clusters\", fontsize=12, fontweight='light', fontfamily='serif')\n\n\n\nplt.tight_layout()\nplt.show()","e9ed0a16":"data = merge[['Gender','age_band','Cluster_Label']]\n\n\n# Adding a single female to the age range 70-80 for the purposes of this visualization, not reccomended in the real world!\n\ndata.loc[-1] = ['Female', '70 ~ 80', 'Less Valuable']  # adding a row\ndata.index = data.index + 1  # shifting index\ndata = data.sort_index()  # sorting by index\ndata['count']=1","098f952a":"age_range_order = ['10 ~ 20', '20 ~ 30', '30 ~ 40','40 ~ 50','50 ~ 60','60 ~ 70','70 ~ 80'] #q15\n\n  \nclus_label_order = ['Targets',\n 'Most Valuable',\n 'Very Valuable',\n 'Valuable',\n 'Less Valuable',\n 'Least Valuable'] \n \ndata['count'] = 1\n\n\ndata_ca = pd.pivot_table(data, values='count', index=['Cluster_Label'], columns=['age_band'], aggfunc=np.sum).fillna(0).astype(int).loc[clus_label_order, age_range_order].stack()\ndata_ca_man = pd.pivot_table(data[data['Gender']=='Male'], values='count', index=['Cluster_Label'], columns=['age_band'], aggfunc=np.sum).fillna(0).astype(int).loc[clus_label_order, age_range_order].stack()\ndata_ca_woman = pd.pivot_table(data[data['Gender']=='Female'], values='count', index=['Cluster_Label'], columns=['age_band'], aggfunc=np.sum).fillna(0).astype(int).loc[clus_label_order, age_range_order].stack()\n","7d423ce4":"# https:\/\/stackoverflow.com\/questions\/56337732\/how-to-plot-scatter-pie-chart-using-matplotlib\ndef drawPieMarker(xs, ys, ratios, sizes, colors, ax):\n    markers = []\n    previous = 0\n    # calculate the points of the pie pieces\n    for color, ratio in zip(colors, ratios):\n        this = 2 * np.pi * ratio + previous\n        x  = [0] + np.cos(np.linspace(previous, this, 30)).tolist() + [0]\n        y  = [0] + np.sin(np.linspace(previous, this, 30)).tolist() + [0]\n        xy = np.column_stack([x, y])\n        previous = this\n        markers.append({'marker':xy, 's':np.abs(xy).max()**2*np.array(sizes), 'facecolor':color})\n\n    # scatter each of the pie pieces to create pies\n    for marker in markers:\n        ax.scatter(xs, ys, **marker, alpha=0.9)\n\n\n","afecf22f":"fig = plt.figure(figsize=(9, 9))\n\ngs = fig.add_gridspec(5, 5)\n\n# Pie charts\n\nax_plot = fig.add_subplot(gs[1:4, 0:4]) \nfor cl_idx in clus_label_order[::-1]:\n    for age_idx in age_range_order:\n        man = data_ca_man[cl_idx][age_idx]\n        woman = data_ca_woman[cl_idx][age_idx]\n        tot = data_ca[cl_idx][age_idx]\n        drawPieMarker([age_idx],[cl_idx], [man\/(man+woman), woman\/(man+woman)] ,[tot*75], ['#244247', '#91b8bd'], ax=ax_plot)\n\nax_plot.grid(linewidth=0.1)        \n\n\n\n # Top\nax_pos = fig.add_subplot(gs[0, :4], sharex=ax_plot) \ndata_age_woman = data[data['Gender']=='Female']['age_band'].value_counts()[age_range_order]\nax_pos.bar(data_age_woman.index, data_age_woman, width=0.45, alpha=0.9, color='#91b8bd')\n\ndata_age_man = data[data['Gender']=='Male']['age_band'].value_counts()[age_range_order]\nax_pos.bar(data_age_man.index, data_age_man, bottom=data_age_woman , width=0.45, alpha=0.9, color='#244247')\n\nplt.setp(ax_pos.get_xticklabels(), visible=False)\n\n\n# Side \nax_exp = fig.add_subplot(gs[1:4, 4], sharey=ax_plot) \n\ndata_cl_woman = data[data['Gender']=='Female']['Cluster_Label'].value_counts()[clus_label_order]\nax_exp.barh(data_cl_woman.index[::-1], data_cl_woman[::-1], height=0.55, alpha=0.9, color='#91b8bd')\n\ndata_cl_man = data[data['Gender']=='Male']['Cluster_Label'].value_counts()[clus_label_order]\nax_exp.barh(data_cl_man.index[::-1], data_cl_man[::-1], left= data_cl_woman[::-1],height=0.55, alpha=0.9, color='#244247')\n\nplt.setp(ax_exp.get_yticklabels(), visible=False)\n\n\n# Spines\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax_plot.spines[s].set_visible(False)\n    ax_pos.spines[s].set_visible(False)\n    ax_exp.spines[s].set_visible(False)\nax.set_axisbelow(True)    \n\nfig.text(0.9, 1.05, 'Gender, cluster, and age banding', fontweight='bold', fontfamily='serif', fontsize=15, ha='right') \nfig.text(0.9, 1.023, 'Stacked Bar Chart & Categorical Bubble Pie Chart', fontweight='light', fontfamily='serif', fontsize=12, ha='right')\n\nfig.text(0.73,0.992,\"Male\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#244247')\nfig.text(0.798,0.992,\"|\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='black')\nfig.text(0.81,0.992,\"Female\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#91b8bd')\n\nplt.tight_layout()\nplt.show()","46b4aa91":"\nfig = plt.figure(figsize=(9, 9))\n\ngs = fig.add_gridspec(5, 5)\n\nfig.text(0.8, 0.85, 'Matrix plot of cluster & age banding', fontweight='bold', fontfamily='serif', fontsize=15, ha='right') \nfig.text(0.8, 0.82, 'We notice demographics that are not represented well in certain clusters.', fontweight='light', fontfamily='serif', fontsize=12, ha='right')\n\n\n\n# Pie charts  \/ Matrix plot\n\nax_plot = fig.add_subplot(gs[1:4, 0:4]) \nfor cl_idx in clus_label_order[::-1]:\n    for age_idx in age_range_order:\n        \n        tot = data_ca[cl_idx][age_idx]\n        ax_plot.scatter(age_idx, cl_idx, s=tot*50, color='#244747')    \n\nax_plot.grid(linewidth=0.1)        \nax_plot.set_xticklabels(age_range_order,fontfamily='serif', fontsize=11, rotation=90)\nplt.yticks(fontsize=11)\n\n\n# Spines\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax_plot.spines[s].set_visible(False)\n    ax_pos.spines[s].set_visible(False)\n    ax_exp.spines[s].set_visible(False)\n    \n#sns.despine(offset=20, trim=True)\nax.set_axisbelow(True)   \n\nplt.tight_layout()","8c95047e":"# There's an interesting plot that I would like to zoom in on\n\n","0bac146c":"# Other ways to view our clusters","ea21f2a3":"Our most prominent age range is between 30 and 40 for both males and females. \n\nThough, we have significant numbers from 20 through to 50.","7220c243":"# Conceptually showing clusters","f553813e":"# Thanks for reading!\n\nI'll welcome all comments, I know there are probably much more efficient ways to do things, but that's the beauty of coding - we can always improve!\n\nAs I said above, this is my first notebook and was really inspired to give it a go due to a stunning few notebooks from Subin An with respect to data visualisation. I learned a lot. Check him out.\n\nNext steps would be using vizualisations to make reccomendations for the business. Maybe in another notebook...","bbcd1b16":"We can give our clusters meanigful names which will help business leaders to understand their importance.\n\nWhat has more impact: 'We need to advertise to Cluster X' or 'We need to advertise to our High Value Cluster'\n\nThis is how we need to communicate our clusters","07b095bc":"# Other ways to visualize differences...\n\nClusters 2 & 3 (Valuable and Less Valuable) look similar in some respects, let's focus on those two for a moment","b526ad7e":"So we have a fairly even split. \n\nDoes the split vary by age?\n\nAll this information will be important for interpreting our clusters later on.\n\nAlways ask then question \"so what?\" - If we have, for example, more females as customers, how might we advertise differently?","7be4e999":"# Exploring our Clusters","0fbce2d6":"# Insight\n\nlet's focus on an important part of the plot.\n\nOur 'Targets' group, that is, high income customers but low spending scores, are primarily male. How could we exploit this?","d9e5860e":"# No we have our clusters, we can explore how the average customer varies within each of them","0dda7717":"The data isn't too extreme so I won't transform it. \n\n\n# Let's now look at how our numeric variables are related to each other\n\nstatistical plots can help us to spot relationships between variables in our datset.\n\nIn this case, we even spot potential clusters...","7cedd00e":"\n# Data Visualization & Customer Segmentation using K-Means\n\n\n# Context\n\nWe have been tasked with identifying customer segments and delivering insight about our data in general, and about these clusters.\n\nThis is a real-world technique that can have a direct effect on how businesses behave towards their customers.\n\n\n\n# A note on visualization\n\nI like to spend a long time creating my visuals, with customization of most elements. \n\nI do this :\n\n1) because I enjoy it, and \n\n2) because every visual should be appealing to the eye. It's an oft overlooked tool of many data scientists & analysts that does them a dis-service. Every idea & model needs to be sold, and aesthetic visuals are integral to that aim.\n\nWith that said, a big part of this workbook is spent on visualizing our results - so please do read on to check that out.\n\n\n# References\n\nThis is **my first Kaggle notebook**, and I learned a lot whilst making it.\n\n**Many of the visuals were originally created by Subin An**, please check out his profile for more Data Visualisation:\n\nhttps:\/\/www.kaggle.com\/subinium\n\n**Another great resource** is:\n\nhttps:\/\/www.python-graph-gallery.com\/\n","04edbffe":"# Let's compare and contrast the most & least valuable clusters\n\nwhat do we observe?","fabcab19":"# Let's visualize\n\nWhat is the general make-up of our customer base?","62abd052":"# Preparing to cluster: What about the distribution of our data?","402c138e":"# Silhouette score concepts:\n\n* Silhouette score for a set of sample data points is used to measure how dense and well-separated the clusters are.\n* Silhouette score takes into consideration the intra-cluster distance between the sample and other data points within the same cluster (a) and inter-cluster distance between the sample and the next nearest cluster (b).\n* The silhouette score falls within the range [-1, 1].\n* The silhouette score of 1 means that the clusters are very dense and nicely separated. The score of 0 means that clusters are overlapping. The score of less than 0 means that data belonging to clusters may be wrong\/incorrect.\n* The silhouette plots can be used to select the most optimal value of the K (no. of cluster) in K-means clustering.\n* The aspects to look out for in Silhouette plots are cluster scores below the average silhouette score, wide fluctuations in the size of the clusters, and also the thickness of the silhouette plot.","ea3522e6":"# Okay, now let's formally cluster","a10834e6":"Okay, so we notice several prominent areas in our dataset.\n\nWe can explore age a bit deeper..."}}