{"cell_type":{"1512d4ed":"code","fd7631e0":"code","b4ec1a92":"code","75ec3bc1":"code","26f3b12c":"code","b8ac34fb":"code","1bd73318":"code","58d575ba":"code","9e848bd1":"code","e2b4fdb7":"code","fb7c68de":"code","23c3ea3f":"code","0e998f11":"code","390b2eb9":"code","39446004":"code","a7b427ef":"code","4328ae0c":"code","cccb04c1":"code","7ac8c223":"code","e9a4ec5c":"code","428f3f5c":"code","5a8c9738":"code","7d78a8a1":"code","30661fab":"code","007010aa":"code","6dc79887":"code","09a04d78":"markdown","4042899d":"markdown","7dc6c0d5":"markdown","304d007c":"markdown","18c90dd5":"markdown","ff6675ef":"markdown","32589e6e":"markdown"},"source":{"1512d4ed":"import numpy as np\nimport pandas as pd","fd7631e0":"data = pd.read_csv(\"..\/input\/health-insurance-cross-sell-prediction\/train.csv\").dropna()\ntestData = pd.read_csv(\"..\/input\/health-insurance-cross-sell-prediction\/test.csv\")","b4ec1a92":"predictionParameter = list(set(data.columns)-set(testData.columns))[0]\nprint( predictionParameter )","75ec3bc1":"data.head()","26f3b12c":"testData.head()","b8ac34fb":"testData.info()","1bd73318":"genders = list(data[\"Gender\"].unique())\nVAs = list(data[\"Vehicle_Age\"].unique())\nVDs = list(data[\"Vehicle_Damage\"].unique())","58d575ba":"for gender in genders:\n    testData[\"Gender\"][ testData[\"Gender\"]==gender ] = genders.index(gender)\nfor VA in VAs:\n    testData[\"Vehicle_Age\"][ testData[\"Vehicle_Age\"]==VA ] = VAs.index(VA)\nfor VD in VDs:\n    testData[\"Vehicle_Damage\"][ testData[\"Vehicle_Damage\"]==VD ] = VDs.index(VD)\n\nfor gender in genders:\n    data[\"Gender\"][ data[\"Gender\"]==gender ] = genders.index(gender)\nfor VA in VAs:\n    data[\"Vehicle_Age\"][ data[\"Vehicle_Age\"]==VA ] = VAs.index(VA)\nfor VD in VDs:\n    data[\"Vehicle_Damage\"][ data[\"Vehicle_Damage\"]==VD ] = VDs.index(VD)","9e848bd1":"data.head()","e2b4fdb7":"testData.head()","fb7c68de":"data.astype(\"float\")\ntestData.astype(\"float\")","23c3ea3f":"X = data.drop(\"Response\", axis=1)\ny = data[\"Response\"]","0e998f11":"XMeans = X.mean()\nXSTDs = X.std()","390b2eb9":"testDataMeans = testData.mean()\ntestDataSTDs = testData.std()","39446004":"X = (X-XMeans)\/XSTDs\nX.head()","a7b427ef":"testData = (testData-testDataMeans)\/testDataSTDs\ntestData.head()","4328ae0c":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import tree\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split","cccb04c1":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)","7ac8c223":"logRegModel = LogisticRegression().fit(X_train, y_train)","e9a4ec5c":"print(\"Accuracy\")\nprint( metrics.accuracy_score(y_test, logRegModel.predict(X_test)) )","428f3f5c":"print(\"ROC AUC\")\nprint( metrics.roc_auc_score(y_test, logRegModel.predict(X_test)) )","5a8c9738":"treeModel = tree.DecisionTreeClassifier().fit(X_train, y_train)","7d78a8a1":"print(\"Accuracy\")\nprint( metrics.accuracy_score(y_test, treeModel.predict(X_test)) )","30661fab":"print(\"ROC AUC\")\nprint( metrics.roc_auc_score(y_test, treeModel.predict(X_test)) )","007010aa":"prediction = pd.DataFrame(index=range(len(testData)))\n\nprediction[\"id\"] = pd.read_csv(\"..\/input\/health-insurance-cross-sell-prediction\/test.csv\")[\"id\"]\nprediction[\"Response\"] = treeModel.predict(testData)\nprediction.head()","6dc79887":"prediction.to_csv(\"prediction.csv\")","09a04d78":"# Part 2\nModel selection\n\nData is processed. Let's build some prediction models to solve a task. We will build and compare logistic regression model and precision tree model.","4042899d":"# Part 0\nFirstly let's read data and do some manipulations before work.","7dc6c0d5":"At the beginning let's split training data on test and train data.","304d007c":"# Part 1\nBefore building a prediction model let's preprocess all data.","18c90dd5":"Now let's build decision tree.","ff6675ef":"Firstly, let's build and test logistic regression model.","32589e6e":"# Part 3\nPrediction"}}