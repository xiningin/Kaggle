{"cell_type":{"fa9a51e5":"code","1d9e812c":"code","3e8767d2":"code","d20a7c1d":"code","318d9abf":"code","9163c2a3":"code","0a6ef7bb":"code","c0c5887a":"code","e6d16d69":"code","4d54daa8":"code","e6664120":"code","43221aed":"code","6dba4a73":"code","eebdc4ec":"code","24eefd16":"code","99534986":"code","fc2ebfd1":"code","7e447ef2":"code","73f681ec":"code","422653ae":"code","47712583":"code","e5ca520f":"code","f22096c4":"code","3ad594cc":"code","11f104c9":"markdown","3d39a032":"markdown","7c78b0e3":"markdown","2a7e4edd":"markdown","ccfd5c71":"markdown","09cab631":"markdown","e1e33b5f":"markdown","6190579a":"markdown","b16df0b4":"markdown"},"source":{"fa9a51e5":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\n# Importing the Keras libraries and packages\nfrom keras.preprocessing.image import ImageDataGenerator\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop\nfrom keras.utils import to_categorical\nfrom keras.utils.vis_utils import model_to_dot\nfrom keras.utils.vis_utils import plot_model\n# specifically for cnn\nfrom keras.applications.inception_v3 import InceptionV3, preprocess_input\nfrom keras.layers import Dropout, Flatten,Activation\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization,GlobalAveragePooling2D\nfrom keras.callbacks import ModelCheckpoint,EarlyStopping,TensorBoard,CSVLogger,ReduceLROnPlateau,LearningRateScheduler","1d9e812c":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/test.csv\")","3e8767d2":"train_df['diagnosis'].unique()","d20a7c1d":"train_df[\"id_code\"]=train_df[\"id_code\"].apply(lambda x:x+\".png\")\ntrain_df['diagnosis'] = train_df['diagnosis'].astype(str)\ntest_df[\"id_code\"]=test_df[\"id_code\"].apply(lambda x:x+\".png\")","318d9abf":"train_df['diagnosis'].value_counts().plot(kind='bar')","9163c2a3":"nb_classes = 5\nlbls = list(map(str, range(nb_classes)))\nbatch_size = 32\nimg_size = 150\nnb_epochs = 10","0a6ef7bb":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   validation_split=0.3\n                                  )","c0c5887a":"training_set = train_datagen.flow_from_dataframe(\n    dataframe=train_df,\n    directory=\"..\/input\/train_images\",\n    x_col=\"id_code\",\n    y_col=\"diagnosis\",\n    batch_size=batch_size,\n    shuffle=True,\n    class_mode=\"categorical\",\n    classes=lbls,\n    target_size=(img_size,img_size),\n    subset='training')\n\ntest_set = train_datagen.flow_from_dataframe(\n    dataframe=train_df,\n    directory=\"..\/input\/train_images\",\n    x_col=\"id_code\",\n    y_col=\"diagnosis\",\n    batch_size=batch_size,\n    shuffle=True,\n    class_mode=\"categorical\",\n    classes=lbls,\n    target_size=(img_size,img_size),\n    subset='validation'\n)","e6d16d69":"classifier = Sequential()","4d54daa8":"classifier.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu', \n                      input_shape = (img_size,img_size,3)))\nclassifier.add(MaxPooling2D(pool_size=(2,2)))","e6664120":"classifier.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nclassifier.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n \n\nclassifier.add(Conv2D(filters =96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nclassifier.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nclassifier.add(Conv2D(filters = 96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nclassifier.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n","43221aed":"classifier.add(Flatten())","6dba4a73":"classifier.add(Dense(units = 512, activation = 'relu'))\nclassifier.add(Dense(units = 5, activation = 'softmax'))","eebdc4ec":"classifier.compile(optimizer = Adam(lr=0.001),loss='categorical_crossentropy', metrics = ['accuracy'])","24eefd16":"classifier.fit_generator(training_set,\n                         steps_per_epoch = 10,\n                         epochs = nb_epochs,\n                         validation_data = test_set,\n                         validation_steps = 10)","99534986":"history = classifier.fit_generator(training_set,\n                         steps_per_epoch = 10,\n                         epochs = nb_epochs,\n                         validation_data = test_set,\n                         validation_steps = 10)","fc2ebfd1":"# list all data in history\nprint(history.history.keys())\n# summarize history for accuracy\nplt.plot(history.history['acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.show()","7e447ef2":"classifier.summary()","73f681ec":"import cv2\nimport matplotlib.pyplot as plt\ntest_image = cv2.imread('..\/input\/test_images\/3d4d693f7983.png', cv2.IMREAD_COLOR)\ntest_image = cv2.resize(test_image, (150,150))\n\n\nplt.imshow(test_image)","422653ae":"test_ids = test_df['id_code']","47712583":"test_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_datagen.flow_from_dataframe(  \n        dataframe=test_df,\n        directory = \"..\/input\/test_images\",    \n        x_col=\"id_code\",\n        target_size = (img_size,img_size),\n        batch_size = 1,\n        shuffle = False,\n        class_mode = None\n        )","e5ca520f":"test_generator.reset()\npredict=classifier.predict_generator(test_generator, steps = len(test_generator.filenames))","f22096c4":"filenames=test_generator.filenames\nresults=pd.DataFrame({\"id_code\":filenames,\n                      \"diagnosis\":np.argmax(predict,axis=1)})\nresults['id_code'] = results['id_code'].map(lambda x: str(x)[:-4])\nresults.to_csv(\"submission.csv\",index=False)","3ad594cc":"results.head()","11f104c9":"### Making the Predictions","3d39a032":"**Preparing the Trainig and Validation sets**","7c78b0e3":"### Fitting the Model","2a7e4edd":"Some very useful Links for Learning CNN\n1. [Stanford's CS231n](http:\/\/cs231n.github.io\/convolutional-networks\/)\n2. [UFLDL Tutorial](http:\/\/ufldl.stanford.edu\/tutorial\/supervised\/FeatureExtractionUsingConvolution\/)\n3. [Simple Cat Vs Dog Project](https:\/\/github.com\/DipeshPoudel\/Deep-Learning-A-Z)","ccfd5c71":"\n\n**Step 2 - Flattening**\nA fully connetced Feed Forward Neural Network is created\n","09cab631":"**Step 3 - Compiling the CNN **","e1e33b5f":"\n\n**Step 1 - Convolution and Max Pooling\n**","6190579a":"\n\n## Part 1 CNN\n","b16df0b4":"In deep learning, a convolutional neural network (CNN, or ConvNet) is a class of deep neural networks, most commonly applied to analyzing visual imagery. "}}