{"cell_type":{"dee1a19f":"code","95d3fb63":"code","a2952a0d":"code","92d32384":"code","7b5b905c":"code","f679bf5d":"code","29fe98ec":"code","39ea6291":"code","4d223311":"code","34d4ce31":"code","b4d7bebf":"code","d1b837d6":"code","df79900f":"code","e130f673":"code","ecd0bb95":"code","e66a19f2":"code","e362c39c":"code","c65125a7":"code","5cecf8c1":"code","28b0e9c1":"code","1144f0b7":"code","62ae56b3":"code","beb2f310":"code","05c0ed15":"code","22408135":"code","b5d981b0":"markdown","c75bd07f":"markdown","9153c496":"markdown","539196a8":"markdown","2838638b":"markdown","fee150bf":"markdown","f5f9afb5":"markdown","e6618185":"markdown","44be9161":"markdown","07fc8a35":"markdown","763d180a":"markdown","5983d0b5":"markdown","dfa3eafc":"markdown","44ff2a8d":"markdown","dfc5ee59":"markdown","88004ba3":"markdown","bc52c4cf":"markdown","16835c54":"markdown","f4d6635b":"markdown","7335ec6a":"markdown","71543c3a":"markdown","16dfcebb":"markdown","6d9383ae":"markdown","8b804620":"markdown","fb3686a1":"markdown","1565e3aa":"markdown","8f158acd":"markdown","9fb07f38":"markdown"},"source":{"dee1a19f":"\n# installlation required\n!pip install openpyxl # for excel file\n\n# libraries\nimport datetime as dt\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport squarify  # treemap visualization\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","95d3fb63":"df_2010_2011 = pd.read_excel(\"..\/input\/online-retail-ii-data-set-from-ml-repository\/online_retail_II.xlsx\", sheet_name = \"Year 2010-2011\")\n\n#online_retail = pd.read_csv(\"\/kaggle\/input\/online-retail-ii-data-set-from-ml-repository\/Year 2010-2011.csv\", sep=\";\")\ndf = df_2010_2011.copy()\ndf.head()","a2952a0d":"def check_df(dataframe):\n    print(\"################ Shape ####################\")\n    print(dataframe.shape)\n    print(\"############### Columns ###################\")\n    print(dataframe.columns)\n    print(\"############### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"############### Head ######################\")\n    print(dataframe.head())\n    print(\"############### Tail ######################\")\n    print(dataframe.tail())\n    print(\"############### Describe ###################\")\n    print(dataframe.describe().T)\n\ncheck_df(df)","92d32384":"def outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n\nreplace_with_thresholds(df, \"Quantity\")\nreplace_with_thresholds(df, \"Price\")","7b5b905c":"# NA values\ndf.isnull().sum()","f679bf5d":"df.dropna(inplace=True)\ndf.isnull().sum()","29fe98ec":"# We exclude canceled and returned orders from the data set.\ndf = df[~df[\"Invoice\"].str.contains(\"C\", na=False)]\ndf.shape","39ea6291":"cat_cols = [col for col in df.columns if df[col].dtypes ==\"O\"]\ncat_but_car = [col for col in df.columns if df[col].nunique() > 100 and df[col].dtypes == \"O\"]\ncat_cols = [col for col in cat_cols if col not in cat_but_car]\ncat_cols","4d223311":"def cat_summary(dataframe, col_name, plot=False):\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                        \"Ratio\": 100 * dataframe[col_name].value_counts() \/ len(dataframe)}))\n    print(\"##########################################\")\n    if plot:\n        fig_dims = (15, 5)\n        fig, ax = plt.subplots(figsize=fig_dims)\n        sns.countplot(x=dataframe[col_name], data=dataframe)\n        plt.xticks(rotation = 45, ha = 'right')\n        plt.show()\n\ncat_summary(df, \"Country\", plot=True)","34d4ce31":"num_cols = [col for col in df.columns if df[col].dtypes != 'O' and col not in \"Customer ID\"]\nnum_cols","b4d7bebf":"def num_summary(dataframe, numerical_col, plot=False):\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[numerical_col].describe(quantiles).T)\n\n    if plot:\n        dataframe[numerical_col].hist(bins=20)\n        plt.xlabel(numerical_col)\n        plt.title(numerical_col)\n        plt.show()\n\nfor col in num_cols:\n    num_summary(df, col, plot=True)\n","d1b837d6":"# number of unique products\ndf[\"StockCode\"].nunique()","df79900f":"df_product = df.groupby(\"Description\").agg({\"Quantity\":\"count\"})\ndf_product.reset_index(inplace=True)\ndf_product","e130f673":"# top 10 selling products\ntop_pr= df_product.sort_values(by=\"Quantity\",ascending=False).head(10)\n\nsns.barplot(x=\"Description\", y=\"Quantity\",data=top_pr)\nplt.xticks(rotation=90)\nplt.show()","ecd0bb95":"# total price per invoice\ndf[\"TotalPrice\"] = df[\"Price\"] * df[\"Quantity\"]","e66a19f2":"# Determining the analysis date for the recency account\ndf[\"InvoiceDate\"] = pd.to_datetime(df[\"InvoiceDate\"])\ndf[\"InvoiceDate\"].max()\ntoday_date = dt.datetime(2011, 12, 11)","e362c39c":"# generating rfm metrics\nrfm = df.groupby(\"Customer ID\").agg({\"InvoiceDate\": lambda Inv\u0131iceDate: (today_date- Inv\u0131iceDate.max()).days,\n                                    \"Invoice\": lambda Invoice: Invoice.nunique(),\n                                    \"TotalPrice\": lambda TotalPrice: TotalPrice.sum()})\n\nrfm.columns = [\"recency\",\"frequency\",\"monetary\"]\nrfm.describe().T","c65125a7":"# total money can't be 0. So, if there is any, we remove them.\n\nrfm = rfm[rfm[\"monetary\"] > 0]\nrfm.describe().T","5cecf8c1":"# recency_score\nrfm[\"recency_score\"] = pd.qcut(rfm['recency'], 5, labels=[5, 4, 3, 2, 1])\n# frequency_score\nrfm[\"frequency_score\"] = pd.qcut(rfm[\"frequency\"].rank(method=\"first\"), 5, labels=[1, 2, 3, 4, 5])\n# monetary_score\nrfm[\"monetary_score\"] = pd.qcut(rfm[\"monetary\"], 5, labels=[1, 2, 3, 4, 5])\n\n# RFM Score\nrfm[\"RFM_SCORE\"] = (rfm[\"recency_score\"].astype(str) + rfm[\"frequency_score\"].astype(str))\nrfm.head(10)","28b0e9c1":"seg_map = {\n    r'[1-2][1-2]': 'hibernating',\n    r'[1-2][3-4]': 'at_Risk',\n    r'[1-2]5': 'cant_loose',\n    r'3[1-2]': 'about_to_sleep',\n    r'33': 'need_attention',\n    r'[3-4][4-5]': 'loyal_customers',\n    r'41': 'promising',\n    r'51': 'new_customers',\n    r'[4-5][2-3]': 'potential_loyalists',\n    r'5[4-5]': 'champions'\n}\nrfm['segment'] = rfm['RFM_SCORE'].replace(seg_map, regex=True)\nrfm.sort_values(by = \"RFM_SCORE\", ascending = False)","1144f0b7":"rfm[[\"segment\", \"recency\", \"frequency\", \"monetary\"]].groupby(\"segment\").agg([\"mean\", \"count\"])","62ae56b3":"sgm= rfm[\"segment\"].value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x=sgm.index,y=sgm.values)\nplt.xticks(rotation=45)\nplt.title('Customer Segments',color = 'blue',fontsize=15)\nplt.show()","beb2f310":"df_treemap = rfm.groupby('segment').agg('count').reset_index()","05c0ed15":"df_treemap.head()","22408135":"fig, ax = plt.subplots(1, figsize = (10,10))\n\nsquarify.plot(sizes=df_treemap['RFM_SCORE'], \n              label=df_treemap['segment'], \n              alpha=.8,\n              color=['tab:red', 'tab:purple', 'tab:brown', 'tab:pink', 'tab:gray']\n             )\nplt.axis('off')\n#plt.savefig('treemap_deneme.png')\nplt.show()\n","b5d981b0":"Given labels to RFM scores","c75bd07f":"<a id = \"13\"><\/a><br>\n# Preparation of RFM Metrics","9153c496":"<a id = \"2\"><\/a><br>\n# Problem\nAn e-commerce company wants to segment its customers and determine marketing strategies according to these segments. For example, it is desired to organize different campaigns for new customers and different campaigns in order to retain customers that are very profitable for the company.","539196a8":"The dataset has only \"Country\" variable.","2838638b":"How many sales for a specific product?","fee150bf":"Let's look at the data first.","f5f9afb5":"<a id = \"16\"><\/a><br>\n# Visualization of RFM Segments","e6618185":"<a id = \"17\"><\/a><br>\n# References\n* https:\/\/github.com\/mvahit\n* https:\/\/www.veribilimiokulu.com\/\n* https:\/\/www.linkedin.com\/in\/vahitkeskin\/\n* https:\/\/www.kaggle.com\/haticeebraralc\/crm-analytics\n* https:\/\/github.com\/hebraralici\n* https:\/\/en.wikipedia.org\/wiki\/Customer_lifetime_value\n* https:\/\/en.wikipedia.org\/wiki\/RFM_(market_research)","44be9161":"<a id = \"15\"><\/a><br>\n# Segmenting Customers Based on RFM Scores","07fc8a35":"Let's remove null values in the dataframe","763d180a":"<a id = \"5\"><\/a><br>\n# Libraries","5983d0b5":"\nAs we can see above, approximately United Kingdom Ratio is %90.02.  Therefore, we only analyze the UK in our study.","dfa3eafc":"<a id = \"11\"><\/a><br>\n## Numerical Variable Analysis","44ff2a8d":"In comprehension structure below, we indicate that fetch other than \"Customer ID\". ","dfc5ee59":"<a id = \"12\"><\/a><br>\n# Customer Segmentation With RFM","88004ba3":"<a id = \"7\"><\/a><br>\n## Data Pre-processing","bc52c4cf":"We exclude canceled and returned orders from the data set.","16835c54":"# Introduction\nHow often do you use the RFM analysis in your marketing? The RFM analysis is a great tool for marketers to figure out which customers are most valuable and how they should be marketed to. It's also a great way to find new prospects that might not have been found otherwise. Here we'll explain into each of the four groups: Retention, Frequency, Monetary Value and Referral and explain what they mean and why you want them as customers!\n\n<font color = 'blue'>\nContent: \n\n1. [Customer Segmentation With RFM](#1)\n1. [Business Problem](#2)\n    * [Dataset Story](#3)\n    * [Variables](#4)\n1. [Libraries](5)\n1. [Load and Check Data](#6)\n    * [Data Preprocessing](#7)\n    * [Outlier Observations](#8)\n1. [Exploratory Data Analysis](#9)\n    * [Categorical Variables](#10)\n    * [Numerical Variables](#11)\n1. [Customer Segmentation With RFM](#12)\n    * [Preparation of RFM Metrics](#13)\n    * [Generating RFM Scores](#14)\n    * [Segmenting Customers Based on RFM Scores](#15)\n    * [Visualization of RFM Segments](#16)\n1. [References](#17)\n\n","f4d6635b":"* **recency**: the difference between today and the customer's last purchase date, in days.\n* **frequency**: customer's shopping frequency.\n* **monetary**: total money paid by the customer.","7335ec6a":"<a id = \"3\"><\/a><br>\n## Dataset Story\n* The dataset includes sales between 01\/12\/2009 - 09\/12\/2011.\n* The product catalog of this company includes souvenirs.\n* The vast majority of the company's customers are corporate customers.","71543c3a":"<a id = \"14\"><\/a><br>\n# Generating RFM Scores","16dfcebb":"<a id = \"8\"><\/a><br>\n# Outlier Observations","6d9383ae":"Let's group RFM mean and frequency values according to segments","8b804620":"<a id = \"6\"><\/a><br>\n# Load and Check Data","fb3686a1":"<a id = \"1\"><\/a><br>\n# Customer Segmentation With RFM\n## WHAT IS RFM?\n\nThe RFM method is a tool for assessing consumer value. It's frequently utilized in database marketing and direct marketing, as well as retail and professional services.\n\nRFM stands for the three dimensions:\n\n* **Recency:** How recently did the customer purchase?\n* **Frequency:** How often do they purchase?\n* **Monetary Value:** How much do they spend?","1565e3aa":"<a id = \"10\"><\/a><br>\n## Categorical Variable Analysis","8f158acd":"<a id = \"9\"><\/a><br>\n# Exploratory Data Analysis","9fb07f38":"<a id = \"4\"><\/a><br>\n## Variables\n* **InvoiceNo:** Invoice number. The unique number of each transaction, namely the invoice. Aborted operation if it starts with C.\n* **StockCode:** Product code. Unique number for each product.\n* **Description**: Product name\n* **Quantity**: Number of products. It expresses how many of the products on the invoices have been sold.\n* **InvoiceDate**: Invoice date and time.\n* **UnitPrice**: Product price (in GBP)\n* **CustomerID:** Unique customer number\n* **Country:** The country where the customer lives."}}