{"cell_type":{"8380c50a":"code","c6e418e0":"code","9610a371":"code","7964742a":"code","7f149464":"code","7ba136f9":"code","892e3c9c":"code","f80ab97b":"code","a904b6a1":"code","6b688d58":"code","f22f9ddb":"code","b22c4576":"code","2e8209dd":"code","27302d8a":"code","5d86d5b8":"code","0d4aad3f":"code","ab4ae135":"code","7abdac68":"code","c937f40e":"code","084351bf":"code","0ca55b37":"code","587fecdb":"code","44425a06":"code","23c2e306":"code","ca25b3cf":"code","e79262ea":"code","582495fe":"markdown","b5253d00":"markdown","83b4d16d":"markdown","fd0c1e10":"markdown","ed86b5c8":"markdown","860d690a":"markdown","f1cf0e2d":"markdown","3ec11507":"markdown","09e4399a":"markdown","1ba56f8b":"markdown","477774f0":"markdown","b35f852d":"markdown","e9756842":"markdown","a3a873c2":"markdown","6166f643":"markdown","5a5c8a24":"markdown","741dec55":"markdown","302b4c27":"markdown","3bdf826e":"markdown","b361a548":"markdown","96a96107":"markdown","a097e85a":"markdown","2dcb719e":"markdown","1b68e807":"markdown","f740f3ff":"markdown","ebc2e1fd":"markdown","ced6a9b4":"markdown","26da9339":"markdown","0c46e4bb":"markdown"},"source":{"8380c50a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom collections import Counter\n%matplotlib inline\nfrom subprocess import check_output\nimport plotly.express as px\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport matplotlib.pyplot as plt # visualization library\nfrom plotly.offline import init_notebook_mode, plot, iplot\nimport plotly as py\ninit_notebook_mode(connected=True) \nimport plotly.graph_objs as go # plotly graphical object\nimport warnings            \nwarnings.filterwarnings(\"ignore\")\nimport seaborn as sns\nimport statsmodels.api as sm\nfrom os import path\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator","c6e418e0":"#data upload\nbalata = pd.ExcelFile(\"\/kaggle\/input\/brakediscdata\/Balata.xlsx\").parse('Sheet1')\n","9610a371":"print(balata.dtypes)\nprint(balata.describe())","7964742a":"balata.columns = [each.split()[0]+\"_\"+each.split()[1] if(len(each.split())>1) else each for each in balata.columns]\nbalata[\"Replaced_Quantity\"] = 1\nprint(balata.dtypes)","7f149464":"#Column Frequency Count\nprint(balata[\"Model1\"].value_counts(dropna =False))  #model kodu baz\u0131nda k\u0131r\u0131l\u0131m\nprint(balata[\"Dealer_Name\"].value_counts(dropna =False))  #bayi baz\u0131nda k\u0131r\u0131l\u0131m\nprint(balata[\"OFP\"].value_counts(dropna =False))  #bayi baz\u0131nda k\u0131r\u0131l\u0131m #par\u00e7ano baz\u0131nda k\u0131r\u0131l\u0131m","7ba136f9":"df1 = balata[[\"Model1\",\"Mileage\"]]\ndf1[\"index\"] = np.arange(1,len(df1)+1)\ndf1 = df1.set_index('index')\ndf1 = pd.pivot_table(df1, values='Mileage',index='index',columns='Model1')\n\ntrace0 = go.Box(\n    y=df1.NDE180L,\n    name = 'NDE180L',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=df1.NRE180L,\n    name = 'NRE180L',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ntrace2 = go.Box(\n    y=df1.ZRE181L,\n    name = 'ZRE181L',\n    marker = dict(\n        color = 'rgb(10, 10, 10)',\n    )\n)\ntrace3 = go.Box(\n    y=df1.ZRE210L,\n    name = 'ZRE210L',\n    marker = dict(\n        color = 'rgb(10, 10, 10)',\n    )\n)\ntrace4 = go.Box(\n    y=df1.ZWE211L,\n    name = 'ZWE211L',\n    marker = dict(\n        color = 'rgb(10, 10, 10)',\n    )\n)\ntrace5 = go.Box(\n    y=balata.Mileage,\n    name = 'Total Mileage',\n    marker = dict(\n        color = 'rgb(70, 70, 70)',\n    )\n)\ndata = [trace0, trace1, trace2, trace3,trace4,trace5]\niplot(data)","892e3c9c":"df2 = balata[[\"Model\",\"Mileage\"]]\n\ndf2[\"index\"] = np.arange(1,len(df2)+1)\ndf2 = df2.set_index('index')\ndf2 = pd.pivot_table(df2, values='Mileage',index='index',columns='Model')\ndf2=df2.rename(columns = {'AURIS TOURING SPORTS':'AURIS_TOURING'})\ndf2=df2.rename(columns = {'COROLLA S\/D':'COROLLA_SEDAN'})\n\ntrace1 = go.Box(\n    y=df2.AURIS,\n    name = 'AURIS',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace2 = go.Box(\n    y=df2.AURIS_TOURING,\n    name = 'AURIS_TOURING',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ntrace3 = go.Box(\n    y=df2.COROLLA_SEDAN,\n    name = 'COROLLA_SEDAN',\n    marker = dict(\n        color = 'rgb(10, 10, 10)',\n    )\n)\ntrace4 = go.Box(\n    y=balata.Mileage,\n    name = 'COROLLA S\/D HYBRID',\n    marker = dict(\n        color = 'rgb(70, 70, 70)',\n    )\n)\ntrace5 = go.Box(\n    y=balata.Mileage,\n    name = 'Total Mileage',\n    marker = dict(\n        color = 'rgb(70, 70, 70)',\n    )\n)\ndata = [trace1, trace2, trace3, trace4,trace5]\niplot(data)","f80ab97b":"df = balata[[\"Model\",\"Model1\",\"OFP\",\"Mileage\"]]\n\nsns.set(font_scale = 1.5)\nsns.set_style(\"white\")\nsns.catplot(x='Model', y='Mileage',\n                  hue=\"Model1\",\n                data=df, kind=\"box\",\n            height=6, aspect=3.3);\n\nsns.set(font_scale = 1.5)\nsns.set_style(\"white\")\nsns.catplot(x='Model', y='Mileage',\n                  hue=\"OFP\",\n                data=df, kind=\"box\",\n            height=6, aspect=5.3);","a904b6a1":"f,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(balata[[\"Dealer_Code\",\"Mileage\",\"OFP\",\"T1_Code\",\"T2_Code\"]].corr(), annot=True, linewidths=.15, fmt= '.1f',ax=ax)\nplt.show()","6b688d58":"# prepare data\ndf3 = balata[[\"Dealer_Code\",\"Replaced_Quantity\",\"Dealer_Name\"]].groupby([\"Dealer_Name\"], as_index = False).sum().sort_values(by=\"Replaced_Quantity\",ascending = False)\ndf3[\"index\"] = np.arange(1,len(df3)+1)\ndf3 = df3.set_index('index')\n\nx = df3.Dealer_Name\ny = df3.Replaced_Quantity\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(histfunc=\"sum\", y=y, x=x, name=\"sum\"))\n\nfig.show()","f22f9ddb":"#Workorder Date Y\u0131l vs Ay K\u0131r\u0131l\u0131m\u0131\nWorkorder_TimeSeries_m = balata.set_index(\"WorkOrder_Date\")\nWorkorder_TimeSeries_m = Workorder_TimeSeries_m.Replaced_Quantity.resample(\"M\").sum()\nWorkorder_TimeSeries_m.plot()\n\nWorkorder_TimeSeries_y = balata.set_index(\"WorkOrder_Date\")\nWorkorder_TimeSeries_y = Workorder_TimeSeries_y.Replaced_Quantity.resample(\"A\").sum()\nWorkorder_TimeSeries_y.plot()\n\n\n","b22c4576":"#Production Date Y\u0131l vs Ay K\u0131r\u0131l\u0131m\u0131\nProduction_TimeSeries_m = balata.set_index(\"Production_Date\")\nProduction_TimeSeries_m = Production_TimeSeries_m.Replaced_Quantity.resample(\"M\").sum()\nProduction_TimeSeries_m.plot()\n\nProduction_TimeSeries_y = balata.set_index(\"Production_Date\")\nProduction_TimeSeries_y = Production_TimeSeries_y.Replaced_Quantity.resample(\"A\").sum()\nProduction_TimeSeries_y.plot()","2e8209dd":"#Delivery Date Y\u0131l vs Ay K\u0131r\u0131l\u0131m\u0131\nDelivery_TimeSeries_m = balata.set_index(\"Delivery_Date\")\nDelivery_TimeSeries_m = Delivery_TimeSeries_m.Replaced_Quantity.resample(\"M\").sum()\nDelivery_TimeSeries_m.plot()\n\nDelivery_TimeSeries_y = balata.set_index(\"Delivery_Date\")\nDelivery_TimeSeries_y = Delivery_TimeSeries_y.Replaced_Quantity.resample(\"A\").sum()\nDelivery_TimeSeries_y.plot()","27302d8a":"speech_analytics = pd.ExcelFile(\"\/kaggle\/input\/voc-vs-dealer-inspection-text\/VOCvsDealer Inspection.xlsx\").parse('Sheet1')","5d86d5b8":"df4 = speech_analytics[[\"VOC\"]].apply(lambda x: x.astype(str).str.lower())\n\ntext1 = \" \".join(review for review in df4.VOC)\nprint (\"There are {} words in the combination of all review.\".format(len(text1)))\n\n# Create stopword list:\nstopwords = set(STOPWORDS)\nstopwords.update([\"geliyor\",\"geli\",\"yor\",\"seyi\",\"hali\",\"nde\",\"islik\",\"gi\",\"derken\"])\n\n# Generate a word cloud image\nwordcloud = WordCloud(stopwords=stopwords, background_color=\"white\").generate(text1)\n\n# Display the generated image:\n# the matplotlib way:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","0d4aad3f":"df5 = speech_analytics[[\"Dealer_Inspection\"]].apply(lambda x: x.astype(str).str.lower())\n\ntext2 = \" \".join(review for review in df5.Dealer_Inspection)\nprint (\"There are {} words in the combination of all review.\".format(len(text2)))\n\n# Create stopword list:\nstopwords = set(STOPWORDS)\nstopwords.update([\"geliyor\",\"geli\",\"yor\",\"seyi\",\"hali\",\"nde\",\"islik\",\"gi\",\"derken\"])\n\n# Generate a word cloud image\nwordcloud = WordCloud(stopwords=stopwords, background_color=\"white\").generate(text2)\n\n# Display the generated image:\n# the matplotlib way:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","ab4ae135":"y = balata.set_index(\"WorkOrder_Date\")\ny = y.Replaced_Quantity.resample(\"W\").sum()\n\ny.plot(figsize=(19, 4))\nplt.show()","7abdac68":"from pylab import rcParams\nrcParams['figure.figsize'] = 18, 8\ndecomposition = sm.tsa.seasonal_decompose(y, model='additive')\nfig = decomposition.plot()\nplt.show()","c937f40e":"!pip install pmdarima\nimport pmdarima as pm\n\n# Seasonal - fit stepwise auto-ARIMA\nsmodel = pm.auto_arima(y, start_p=1, start_q=1,\n                         test='adf',\n                         max_p=3, max_q=3, m=12,\n                         start_P=0, seasonal=True,\n                         d=None, D=1, trace=True,\n                         error_action='ignore',  \n                         suppress_warnings=True, \n                         stepwise=True)\n\nsmodel.summary()","084351bf":"mod = sm.tsa.statespace.SARIMAX(y,\n                                order=(1, 0, 2),\n                                seasonal_order=(0, 1, 1, 12),\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\nresults = mod.fit()\nprint(results.summary().tables[1])","0ca55b37":"results.plot_diagnostics(figsize=(18, 8))\nplt.show()","587fecdb":"pred = results.get_prediction(start=pd.to_datetime('2019-02-03'), dynamic=False)\npred_ci = pred.conf_int()\nax = y['2013':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 4))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\nax.set_xlabel('Date')\nax.set_ylabel('Retail_sold')\nplt.legend()\nplt.show()","44425a06":"y_forecasted = pred.predicted_mean\ny_truth = y['2018-06-01':]\nmse = ((y_forecasted - y_truth) ** 2).mean()\nprint('The Mean Squared Error is {}'.format(round(mse, 2)))\nprint('The Root Mean Squared Error is {}'.format(round(np.sqrt(mse), 2)))","23c2e306":"pred_uc = results.get_forecast(steps=48)\npred_ci = pred_uc.conf_int()\nax = y.plot(label='observed', figsize=(14, 4))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Date')\nax.set_ylabel('Replaced_Quantity')\nplt.legend()\nplt.show()","ca25b3cf":"pred_ci.head(48)","e79262ea":"forecast = pred_uc.predicted_mean\nforecast.head(48)","582495fe":"The Mean Squared Error is 76.02\nThe Root Mean Squared Error is 8.72\nObs: In both MSE and RMSE, values closer to zero are better. They are a measure of accuracy.","b5253d00":"<a id = \"3\"><\/a><br>\n# Visualization","83b4d16d":"Here we forecast the sales for the next 48weeks (1year). This parameter can me modified in the line \u201cpred_uc = results.get_forecast(steps=12)\u201d of the code.","fd0c1e10":"<a id = \"4\"><\/a><br>\n# Model Code vs Mileage Box Plot\n","ed86b5c8":"<a id = \"20\"><\/a><br>\n# Forecasting in the next 48weeks","860d690a":"<a id = \"6\"><\/a><br>\n# Model Code \/ Model Name \/ OFP vs Mileage BoxPlot\n","f1cf0e2d":"<a id = \"9\"><\/a><br>\n# Work Order Date vs Quantity of Replaced Parts","3ec11507":"<a id = \"18\"><\/a><br>\n# Finding Best SARIMA Model","09e4399a":"<a id = \"10\"><\/a><br>\n# Production Date vs Quantity of Replaced Parts","1ba56f8b":"<a id = \"15\"><\/a><br>\n# Forecasting with SARIMA model\n\nThe problem with plain ARIMA model is it does not support seasonality.\n\nBecause our time series have defined seasonality, we will have to go for SARIMA which uses seasonal differencing.\n\nSARIMA is used for non-stationary series, that is, where the data do not fluctuate around the same mean, variance and co-variance. This model can identify trend and seasonality, which makes it so important. The SARIMA consists of other forecasting models:\n    AR: Auto regressive model (can be a simple, multiple or non-linear regression)\n    MA: Moving averages model. The moving average models can use weighting factors, where the observations are weighted by a trim factor (for the oldest data in the series) and with a higher weight for the most recent observations.\n    The composition of AR and MA together carry the ARMA model, but this model is used only for stationary series (mean, variance constant over time).\n\nIf the series has a tendency, it will be necessary to use the ARIMA model.\nARIMA is used for non-stationary series. In this model, a differentiation step I (d) is used to eliminate non-stationarity.\nThe integrated element \u201cI\u201d for differentiation allows the method to support time series with trend. But still this model does not identify seasonality.\nFinally, we arrive at the SARIMA model, which has a seasonal correlation and can identify the seasonality of the time series.","477774f0":"In the \u201cmod = sm.tsa.statespace.SARIMAX\u201d command we need to set up the chosen combination.","b35f852d":"<a id = \"19\"><\/a><br>\n# Predicting Evaluation","e9756842":"<a id = \"17\"><\/a><br>\n# Building SARIMA model","a3a873c2":"<a id = \"2\"><\/a><br>\n# Basic Data Analysis","6166f643":"<a id = \"5\"><\/a><br>\n# Model Name vs Mileage BoxPlot\n","5a5c8a24":"Let\u2019s use SARIMA. The models notation is SARIMA(p, d, q).(P,D,Q)m. These three parameters account for seasonality, trend, and noise in data. We need to finf what the best model is for our dataset.","741dec55":"This step consists in comparing the true values with the forecast predictions. Our forecasts fit with the true values very well. The command \u201cpred = results.get_prediction(start=pd.to_datetime(\u20182019-02-03\u2019)\u201d determines the period which you would forecast in comparing with the true data.","302b4c27":"According Peterson, T. (2014) the AIC (Akaike information criterion) is an estimator of the relative quality of statistical models for a given set of data. Given a collection of models for the data, AIC estimates the quality of each model, relative to each of the other models. The low AIC value the better. Our output suggests that SARIMAX(1, 0, 2)x(0, 1, [1], 12) with AIC value of 2676.452 is the best combination, so we should consider this to be optimal option.","3bdf826e":"<a id = \"14\"><\/a><br>\n# Dealer Inspections (what the dealer technician found out?)","b361a548":"<a id = \"12\"><\/a><br>\n# Speech Analysis","96a96107":"In the table above we can visualize the lower and upper values which the model indicate as boundaries for the forecasting.","a097e85a":"<a id = \"7\"><\/a><br>\n# Correlation","2dcb719e":"<a id = \"11\"><\/a><br>\n# Delivery Date vs Quantity of Replaced Parts","1b68e807":"<a id = \"1\"><\/a><br>\n# Load and Check Data","f740f3ff":"<a id = \"8\"><\/a><br>\n# Part Replacement Quantities by Dealers","ebc2e1fd":"# Introduction\nWe will be analysing brake pad replacements for the previous Corolla models (2013-2019) and the current model (2019-) in Turkey.\n\nWe will examine how brake pad replacements will continue in the next 24 months? When will the problem\/replacements will stop? \n\n<font color = 'blue'>\nContent: \n\n1. [Load and Check Data](#1)\n1. [Basic Data Analysis](#2)\n1. [Visualization](#3)\n    * [# Model Code vs Mileage BoxPlot](#4)\n    * [# Model Name vs Mileage BoxPlot](#5)\n    * [# Model Code \/ Model Name \/ OFP vs Mileage BoxPlot](#6)\n    * [Correlation](#7)\n    * [Part Replacement Quantities by Dealers](#8)\n    * [Work Order Date vs Quantity of Replaced Parts](#9)\n    * [Production Date vs Quantity of Replaced Parts](#10)\n    * [Delivery Date vs Quantity of Replaced Parts](#11)\n1. [Speech Analysis](#12)\n    * [VOC (how the customers complaint their issues?)](#13)\n    * [Dealer Inspections (what the dealer technician found out?)](#14)\n1. [Forecasting with SARIMA model ](#15)\n    * [Defining Seasonality](#16)\n    * [Building SARIMA model](#17)\n    * [Finding Best SARIMA model](#18)\n    * [Predicting Evaluation](#19)\n    * [Forecasting in the next 48weeks](#20)\n    \n    \n    \n    \n # Data Feature Explanation:\n  \n Model1 : Model code for specific model\n \n Model: Name of the vehicle model\n \n Production Date: Production date of the vehicle\n \n Delivery Date: Delivery date of the vehicle\n \n Dealer Code: Dealer code in where the part was replaced\n \n Dealer Name: Dealer name in where the part was replaced\n \n WorkOrder Date: WorkOrder date of the vehicle\n \n Mileage: Mileage which the part was replaced\n \n OFP: Part number\n \n OFP Name: Name of the replaced part\n \n T1 Code: Root cause code1\n \n T2 Code:Root cause code2\n \n Replaced_Quantity: Quantity of Replaced Parts","ced6a9b4":"<a id = \"16\"><\/a><br>\n# Defining Seasonality & Trend & Resid\n\nSeasonality can be seen easily looking as the graphic below. Especially in summer periods, there is a significiant increase\n","26da9339":"With the diagnostic above we can visualize important information as the distribution and the Auto correlation function ACF (correlogram). Values upward the \u201c0\u201d has some correlation over the time series data. Values near to \u201c1\u201d demonstrates strongest correlation.","0c46e4bb":"<a id = \"13\"><\/a><br>\n# VOC (how the customers complaint their issues?)"}}