{"cell_type":{"31f81da7":"code","d6031888":"code","8a9f4b9b":"code","fe8bc25a":"code","59f767a1":"code","2ec0ccd0":"code","13d495c1":"code","2b2a0f5f":"code","a01b5f77":"code","98cea31e":"code","6c539ad9":"code","e759a6b2":"code","f1b6ed42":"code","01224e6c":"code","0095b33a":"code","aac2a41e":"code","efc0ff5c":"code","25fab7ed":"code","d8857d81":"code","eef606b1":"code","c31114df":"code","19fbc649":"code","64a67995":"code","5eaf6a56":"code","5542d5cd":"code","688c8d06":"code","1bd62878":"code","0d22a868":"code","c80172ec":"code","339953e5":"markdown","7fe1f2bb":"markdown","12fc364e":"markdown","bba236d9":"markdown","695ef150":"markdown"},"source":{"31f81da7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d6031888":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","8a9f4b9b":"df=pd.read_csv(\"..\/input\/heart-failure-prediction\/heart.csv\")\ndf.head()","fe8bc25a":"df.isnull().sum()","59f767a1":"sns.histplot(df[\"RestingBP\"])","2ec0ccd0":"df.describe()","13d495c1":"df.drop(index = 449, axis = 0,inplace=True)","2b2a0f5f":"df = df.reset_index()","a01b5f77":"df.drop(\"index\",inplace = True,axis = 1)","98cea31e":"df[\"ExerciseAngina\"].replace(\"N\",0,inplace=True)\ndf[\"ExerciseAngina\"].replace(\"Y\",1,inplace=True)","6c539ad9":"df.replace(\"M\",0,inplace = True)\ndf.replace(\"F\",1,inplace = True)","e759a6b2":"df_with_dummies = pd.get_dummies(df,drop_first=True)","f1b6ed42":"df_with_dummies.columns","01224e6c":"col = ['HeartDisease','Age', 'Sex', 'RestingBP', 'Cholesterol', 'FastingBS', 'MaxHR',\n       'ExerciseAngina', 'Oldpeak', 'ChestPainType_ATA',\n       'ChestPainType_NAP', 'ChestPainType_TA', 'RestingECG_Normal',\n       'RestingECG_ST', 'ST_Slope_Flat', 'ST_Slope_Up']\ndata = df_with_dummies[col]","0095b33a":"data","aac2a41e":"targets = data[\"HeartDisease\"]\ninputs = data.drop(\"HeartDisease\",axis = 1)","efc0ff5c":"from sklearn.preprocessing import StandardScaler","25fab7ed":"scaler = StandardScaler()\nscaler.fit(inputs)\nscaled_inputs = scaler.transform(inputs)","d8857d81":"from sklearn.model_selection import train_test_split","eef606b1":"x_train, x_test, y_train, y_test = train_test_split(scaled_inputs,targets,random_state = 42)","c31114df":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import PolynomialFeatures","19fbc649":"log_reg = LogisticRegression()","64a67995":"log_reg.fit(x_train,y_train)","5eaf6a56":"log_reg.score(x_test,y_test)","5542d5cd":"y_hat = log_reg.predict(x_test)","688c8d06":"final_result=pd.DataFrame({'Actual': y_test, 'Predicted': y_hat})\nfinal_result","1bd62878":"coefs = pd.DataFrame(data = log_reg.coef_,columns = data.drop(\"HeartDisease\",axis = 1).columns)","0d22a868":"coefs","c80172ec":"print(f\"Acuraccy: %{round(log_reg.score(x_test,y_test),2)*100}\")","339953e5":"## Scaling","7fe1f2bb":"## Feature Selection","12fc364e":"## Explore and Clean the Data","bba236d9":"## Split the Data","695ef150":"## Regression"}}