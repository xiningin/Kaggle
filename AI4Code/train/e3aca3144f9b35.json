{"cell_type":{"c5ff6501":"code","d2936b1f":"code","bc6677a4":"code","f30d5813":"markdown"},"source":{"c5ff6501":"import glob\nimport imageio\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom IPython.display import display, Image\n","d2936b1f":"# Read the data\ntest_df = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv', parse_dates=['date'])\nnames = glob.glob('..\/input\/tps-submissions-january-2022\/*.csv')\nnames.sort(reverse=True) # list of file names from worst to best prediction\nbest_df = pd.read_csv(names[-1]) # best prediction which is marked with crosses in every frame\n\n# Prepare the colormap: movie starts blue and ends pink\ncm = plt.cm.get_cmap('cool', len(names))\n","bc6677a4":"def create_movie(quarter, bottom, top, tx, ty):\n    \"\"\"Create an animated GIF which displays the predictions of a selected quarter year\n    \n    Parameters:\n    -----------\n    quarter : quarter of 2019 (1, 2, 3 or 4)\n    bottom, top : lower and upper limits of the predictions\n                  (which must be the same in every frame of the movie)\n    tx, ty : coordinates of the text and the progress bar\n    \"\"\"\n    for i, name in enumerate(names):\n        df = pd.read_csv(name)\n        selection = ((test_df.country == 'Norway') &\n                     (test_df.store == 'KaggleRama') &\n                     (test_df['product'] == 'Kaggle Hat') &\n                     ((test_df.date.dt.month-1) \/\/ 3 == quarter-1)) \n        plt.figure(figsize=(12, 5))\n        plt.gca().set_facecolor('k') # background\n        plt.scatter(best_df[selection].row_id, best_df[selection].num_sold,\n                    s=40, marker='+', color=cm((len(names)-1) \/ len(names)))\n        plt.scatter(df[selection].row_id, df[selection].num_sold,\n                    s=25, color=cm(i \/ len(names))) # predictions\n        plt.plot([tx+180, tx+180 + i * 10], [ty+15, ty+15],\n                 lw=3, color=cm(i \/ len(names))) # progress bar\n        plt.ylim(bottom, top)\n        ticks = test_df.groupby(test_df.date.dt.month).first().iloc[quarter*3-3:quarter*3+1]\n        plt.xticks(ticks=ticks.row_id,\n                   labels=ticks.date.dt.strftime('%b %Y'))\n        plt.text(tx, ty,\n                 f\"{i:2d}: {int(name[name.index('2022\/')+5:name.index('2022\/')+11])\/100000:.5f}\",\n                 color='w')\n        plt.title(f\"Q{quarter} predictions\")\n        plt.savefig(f\"frame_q{quarter}_{i:02d}.png\")\n        if False and i < 2: plt.show() # show the first few frames\n        plt.close()\n\n    images = []\n    for filename in sorted(glob.glob(f'frame_q{quarter}_*.png')):\n        images.append(imageio.imread(filename))\n    imageio.mimsave(f'movie_q{quarter}.gif', images, duration=0.3)\n    display(Image(f'movie_q{quarter}.gif'))\n\ncreate_movie(1, bottom=900, top=1700, tx=26600, ty=1550)\ncreate_movie(2, bottom=800, top=2000, tx=28000, ty=950)\ncreate_movie(3, bottom=650, top=1300, tx=29600, ty=700)\ncreate_movie(4, bottom=550, top=3000, tx=31250, ty=2700)\n","f30d5813":"# Visualization of progress in the January TPS competition (aka \"Overfitting movie\")\n\nThis notebook shows how to create a movie (animated GIF) from the 62 public predictions.\n\nThe movie visualizes how the predictions converge better and better to an optimum. As symbols of progress, the movie\n- displays a growing progress bar\n- displays the prediction number and the decreasing lb SMAPE of the predictions numerically\n- continuously changes color from blue to pink\n\nThe movie wouldn't have been possible without @[jbomitchell](https:\/\/www.kaggle.com\/jbomitchell)'s [dataset](https:\/\/www.kaggle.com\/jbomitchell\/tps-submissions-january-2022).\n"}}