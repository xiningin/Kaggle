{"cell_type":{"cfa6de07":"code","0e5e7397":"code","98e06a9c":"code","6ccdc245":"code","7287041d":"code","34615b7c":"code","1118dc44":"code","c4c4fdb3":"code","74085ddd":"code","4e7c2024":"code","a518252b":"code","c51ae996":"code","ec19c955":"code","2cc7dc70":"markdown","43edc6eb":"markdown","338a8bf5":"markdown","0580f2a1":"markdown","545cc777":"markdown","26cc5235":"markdown","49b00852":"markdown","6cee20e6":"markdown","6e3a0257":"markdown"},"source":{"cfa6de07":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e5e7397":"df=pd.read_csv(\"\/kaggle\/input\/stock-sentiment-analysis\/Stock_Dataa.csv\", encoding = 'unicode_escape')\ndf.head()","98e06a9c":"df=df.dropna()","6ccdc245":"train=df[df[\"Date\"]<\"20150101\"]\ntest=df[df[\"Date\"]>\"20141231\"]","7287041d":"# Removing punctuations\n#here we picked the headlines\/independent features\ndata=train.iloc[:,2:27]\ndata.replace(\"[^a-zA-Z]\",\" \",regex=True, inplace=True)\n\n# Renaming column names for ease of access\nlist1= [i for i in range(25)]\nnew_Index=[str(i) for i in list1]\ndata.columns= new_Index\ndata.head(5)","34615b7c":"#Converting the headlines to lower case\nfor index in new_Index:\n    data[index]=data[index].str.lower()\ndata.head()","1118dc44":"#Joined the sentence with respect to rows (i.e. for row-1, all the 25 headlines are concatenated)\nheadlines=[]\nfor i in range(0,len(data.index)):\n    headlines.append(' '.join(str(x) for x in data.iloc[i,0:25]))","c4c4fdb3":"headlines[0]","74085ddd":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.ensemble import RandomForestClassifier","4e7c2024":"countvector=CountVectorizer(ngram_range=(2,2))\ntraindataset=countvector.fit_transform(headlines)","a518252b":"classifier=RandomForestClassifier(n_estimators=200,criterion='entropy')\nclassifier.fit(traindataset,train['Label'])","c51ae996":"test_transform= []\nfor row in range(0,len(test.index)):\n    test_transform.append(' '.join(str(x) for x in test.iloc[row,2:27]))\ntest_dataset = countvector.transform(test_transform)\npredictions = classifier.predict(test_dataset)","ec19c955":"from sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nmatrix=confusion_matrix(test['Label'],predictions)\nprint(matrix)\nscore=accuracy_score(test['Label'],predictions)\nprint(score)\nreport=classification_report(test['Label'],predictions)\nprint(report)","2cc7dc70":"In this Dataset we have 2 unique values for Label column:\n        \n\n* 0 - it means the stock price remained same or decreased on that particular day.\n\n* 1 - it means the stock price increased on that particular day.","43edc6eb":"# Building the Model","338a8bf5":"# Training the Model","0580f2a1":"# Import Dataset","545cc777":"# Data Preprocessing","26cc5235":"# Predict for the Test Dataset","49b00852":"I got an accuracy of 87%, which is quite decent.","6cee20e6":"# Creating Bag of Words","6e3a0257":"# Checking Accuracy and Performance"}}