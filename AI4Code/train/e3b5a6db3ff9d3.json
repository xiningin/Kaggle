{"cell_type":{"2c852781":"code","59fb83d1":"code","b2d4316b":"code","ef6d46d4":"code","68e83a37":"code","2f8fc7fb":"code","01c1e908":"code","4ac79882":"code","9db36164":"code","11c3bdc7":"code","f9f79e8c":"markdown","d4f45493":"markdown","ba72080a":"markdown","1b5d7b7b":"markdown","d5fbd7d1":"markdown","9aba352f":"markdown","51552493":"markdown","c3005241":"markdown","5d3941c0":"markdown","7332e0ac":"markdown","a04fe72e":"markdown"},"source":{"2c852781":"# These modules are used to perform Flask web server\nfrom flask import Flask, jsonify, request,render_template\n#this module is used to interact with mysql database\nimport mysql.connector\n#This module contains database access information","59fb83d1":"#Configuration file containing DB access credentials\nusername=\"root\"\npassword=\"password\"\ndatabase_name=\"backend_dev_db_pr\"\n#Required parameters\nreq_l_par=((\"node_id\",\"language\"))\n#Optional parameters\nopt_l_par=((\"page_num\",\"page_size\",\"search_keyword\"))","b2d4316b":"def input_acq():\n    input_par=dict()\n    #Required paremeters (see req_l_par global tuple)\n    input_par[req_l_par[0]]=request.args.get(req_l_par[0])\n    input_par[req_l_par[1]]=request.args.get(req_l_par[1])\n   #Optional paremeters (see opt_l_par global tuple)\n    input_par[opt_l_par[2]]=request.args.get(opt_l_par[2])\n    input_par[opt_l_par[0]]=request.args.get(opt_l_par[0])\n    input_par[opt_l_par[1]]=request.args.get(opt_l_par[1])\n    return input_par ","ef6d46d4":"def set_input(in_p_dict):\n    \n    for i in in_p_dict:\n        if(in_p_dict[i] is None):\n            if(i in req_l_par):\n                return \"Missing mandatory params\",in_p_dict\n            else:\n                if(i is opt_l_par[0]):\n                    in_p_dict[i]=0\n                elif(i is opt_l_par[1]):\n                    in_p_dict[i]=100\n                elif(i is opt_l_par[2]):\n                    in_p_dict[i]=None\n\n    \n    return False, in_p_dict      ","68e83a37":"def db_query(mycursor,str_query):\n    mycursor.execute(str_query)\n    query_res=mycursor.fetchall()\n    if (len(query_res)==0):\n        return True,query_res\n    else:\n        return False,query_res","2f8fc7fb":"def conn_to_db(in_ps_dict):\n    mydb = mysql.connector.connect(\n    host=\"localhost\",\n    user=username,\n    passwd=password,\n    database=database_name\n    )\n    mycursor = mydb.cursor()\n    \n    #This query acquires Left and Right node information basing on idNode\n    str_query=\"SELECT iLeft,iRight FROM node_tree  WHERE idNode = \" + \"\\'\"+str(in_ps_dict['node_id'])+\"\\'\"\n   \n    error_q,search_results=db_query(mycursor,str_query)\n    \n    if(error_q is False):\n        i_n_left=search_results[0][0]\n        i_n_right=search_results[0][1]\n        \n        if(in_ps_dict['search_keyword'] is not None):    \n            #This query restricts the results to \"all children nodes under  node_id \n            #whose  nodeName is in the given  language\"\n            str_query=\"SELECT t.idNode,iLeft,iRight,nodeName,language FROM node_tree as t INNER JOIN node_tree_names as tn ON t.idNode=tn.idNode WHERE iLeft > \"+\"\\'\"+str(i_n_left)+\"\\'\"+\" AND iRight < \"+\"\\'\"+str(i_n_right)+\"\\'\"+\" AND language = \"+\"\\'\"+str(in_ps_dict['language'])+\"\\'\"\n            error_q,search_results=db_query(mycursor,str_query)\n            #This function filters only results which contains  search_keyword (case insensitive)\n            search_results=search_keyw(in_ps_dict['search_keyword'],search_results)\n            if(error_q is True):\n                return \"No children node found\",None\n        else:  \n            #This query restricts the results to  node_id \n            #whose  nodeName is in the given  language\" -- No keyword input parameter\n            str_query=\"SELECT t.idNode,iLeft,iRight,nodeName,language FROM node_tree as t INNER JOIN node_tree_names as tn ON t.idNode=tn.idNode WHERE t.idNode = \"+\"\\'\"+str(in_ps_dict['node_id'])+\"\\'\"+\" AND language = \"+\"\\'\"+str(in_ps_dict['language'])+\"\\'\"\n            error_q,search_results=db_query(mycursor,str_query)\n            if(error_q is True):\n                return \"Missing mandatory params\",None\n        \n         \n        mydb.close()\n       \n        \n        return False,search_results\n        \n        \n    else:\n        return \"Invalid node id\",None","01c1e908":"def search_keyw(s_key,s_res):\n    filt_res=list()\n   \n    for i in s_res:\n        if (s_key in i[3].lower()):\n            filt_res.append(i)\n\n    \n    return tuple(filt_res)","4ac79882":"def pag_func(p_size,p_num,mylist):\n    if(p_size!=0):\n        if(p_size>len(mylist)):\n            p_size=len(mylist)\n\n        p_num_max=round(len(mylist)\/p_size)-1\n        if(p_num>(p_num_max)):\n           p_num=p_num_max\n        print(p_size)    \n        print(p_num)\n        l=[mylist[i:i+p_size] for i in range(0, len(mylist), p_size)]\n        print (l)\n    \n        return l[p_num]\n    else:\n        return []    ","9db36164":"# It creates a Flask app \napp = Flask(__name__) \n  \n@app.errorhandler(404) \ndef page_not_found(e):\n    p_not_f=\"Please provide information to route localhost  e.g: http:\/\/127.0.0.1:5000\/?node_id=5&language=italian&search_keyword=r&page_num=2&page_size=3\"\n    return jsonify({'Error':p_not_f})\n\n@app.route('\/') \ndef home(): \n    \n    if(request.method == 'GET'): \n        in_p_dict=input_acq()\n        \n        error_p_in,in_ps_dict=set_input(in_p_dict)\n        \n        #if not found any error in input parameters\n        if(error_p_in is False):\n            \n            res_dict=list()\n            \n            error_q,search_results=conn_to_db(in_ps_dict)\n            #if query gives asome results\n            if(error_q is False):\n                for x in search_results:\n                    #create a dict basing on results collected from query collecting:  unique ID of the child node,\n                    # node name translated in the requested language and  number of child nodes of this node\n                    res_dict.append({\"node_id\": x[0],\"name\": x[3],\"children_count\": round((x[2]-x[1]-1)\/2)})\n                    \n                 \n                #return data collected in a json format\n                return jsonify({'nodes':pag_func(int(in_ps_dict[\"page_size\"]),int(in_ps_dict[\"page_num\"]),res_dict) }) \n              \n            else:\n                #error handling\n                return jsonify({'Error':error_q}) \n                \n        else:\n            #error handling\n            return jsonify({'Error':error_p_in}) ","11c3bdc7":"if __name__ == '__main__': \n  \n    app.run(debug = True) ","f9f79e8c":"Hereafter is created the Flask App and web page route handling","d4f45493":"This function manages pagination of output dictionary provided in Json format","ba72080a":"This function set default input parameters, if optional and not provided, or give error if required and not provided    ","1b5d7b7b":"This function acquires input parameters from URL e.g  http:\/\/127.0.0.1:5000\/?node_id=3&language=english","d5fbd7d1":"# <center>Restful Web API Interacting  Database<\/center>\n## <center>By Using Flask and Mysql<\/center>\n#### <center> 27 November 2019 <\/center> \n#####  <center> A.P. <\/center> \n\n\n\n# Introduction \nWith this exercise I tried to implement a Restful web API. It uses Flask and interact with a Mysql Tree-Lyke Structure Nested Set Model.\nDatabase is related to an organizational chart of an  enterprise, in order to represent hierarchies and roles inside a company.\nThe frontend application fetches organizational chart nodes and display them as a tree of folders. \nThe script is be called via HTTP ( method GET ) through the Flask web server. \n\nInput parameters:\n\n1- node_id (integer, required) : the unique ID.\n2- language (enum, required) : language identifier.\n3- search_keyword (string, optional) : a search term used to filter results. \n4- page_num (integer, optional) : the 0-based identifier of the page to retrieve. If not\nprovided, defaults to \u201c0\u201d.\n5- page_size (integer, optional) : the size of the page to retrieve, ranging from 0 to 1000. If\nnot provided, defaults to \u201c100\u201d.\n\nOutput Parameters:\n1- nodes (array, required) : 0 or more nodes matching the given conditions. Each node\ncontains:\n2- node_id (integer, required) : the unique ID of the child node.\n3- name (string, required) : the node name translated in the requested language.\n4- children_count (integer, required) : the number of child nodes of this node.\n5- error (string, optional) : If there was an error, return the generated message.","9aba352f":"The Main function","51552493":"This function perform  queries to mysql database","c3005241":"**Function definition**","5d3941c0":"> This function connect to db mysql to retrieve data requested","7332e0ac":"This function in in charge to search keyword if search_keyword parameter is provided    ","a04fe72e":"**Global Variable definition**"}}