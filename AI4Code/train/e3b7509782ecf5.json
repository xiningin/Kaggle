{"cell_type":{"2f6ff9dc":"code","d55a1664":"code","1be2dbd1":"code","620b6604":"code","675b7118":"code","f409e7cb":"code","8627db22":"code","93d28633":"code","2d68fc32":"code","82351636":"code","d14baac9":"code","cffb9a18":"code","0cf0f208":"code","197ff92f":"code","ccc5e670":"code","88b5b47d":"code","288461a0":"code","0203ce77":"code","7187453f":"code","3afd4a51":"code","5902e739":"code","5cc250b7":"code","43188652":"code","a7faaae2":"code","65abd85a":"code","df131249":"code","4b8f4cd2":"code","9e1ced1a":"code","50d208af":"code","7e323ea0":"code","6a8c1551":"code","0530c090":"code","9e36c74e":"code","22614f89":"code","a9e94847":"code","b8e9c1f5":"code","064cb583":"code","2db8c4d4":"code","37d5b36d":"code","6fa5c7e0":"code","8d49b472":"code","e7c357dc":"code","5630ad1a":"code","ee7b654e":"code","e0bcf512":"code","9bcb2be5":"code","30b8a98d":"code","ea946f87":"code","5c302acd":"code","581c0007":"code","3750abc4":"code","a3f1bb5c":"code","ce212a3a":"code","be2769f5":"code","dea1dcd6":"code","ac2f67be":"code","c5dcaabe":"code","ede68023":"code","b2f927a0":"code","2b59f371":"code","9c0dd41a":"code","2b17ff0e":"code","446b75b6":"code","012cc607":"code","974a25c2":"code","8d4ee64a":"code","3edfb5c3":"code","cfd472dc":"code","21f7a44f":"code","3038dc86":"code","9414ceef":"code","3638f728":"code","45e7dd32":"code","3209fd8b":"code","4f430414":"code","d9b5e90c":"code","d1ff50bc":"code","5e31932f":"code","b2cc7e06":"code","5faaa35c":"code","5ea39a79":"code","43def850":"code","6df2c6a7":"markdown","68b37f2b":"markdown","e8d65e57":"markdown","01071500":"markdown","69ec4906":"markdown","4270c742":"markdown","74f22a2e":"markdown"},"source":{"2f6ff9dc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","d55a1664":"pip install openpyxl","1be2dbd1":"pd.set_option('display.max_columns',None)\nimport warnings\nwarnings.filterwarnings('ignore')","620b6604":"df = pd.read_excel('..\/input\/flight-fare-prediction-mh\/Data_Train.xlsx')","675b7118":"df.head()","f409e7cb":"df.shape","8627db22":"df.info()","93d28633":"df.describe()","2d68fc32":"## We can drop this row as it contain 2 NAN values\n\ndf[df.isnull().any(axis=1)]  ","82351636":"df.dropna(inplace=True)","d14baac9":"df.shape","cffb9a18":"df.columns","0cf0f208":"for i in ['Airline', 'Source','Destination','Total_Stops','Additional_Info']:\n    print('Total:',len(df[i].unique()),'\\n')\n    print(df[i].unique())","197ff92f":"df['Airline'].value_counts().plot.bar(figsize=(10,10))","ccc5e670":"df['Source'].value_counts().plot.bar(figsize=(10,10))","88b5b47d":"df['Destination'].value_counts().plot.bar(figsize=(10,10))","288461a0":"df[df['Total_Stops'] == '4 stops']","0203ce77":"df.head()","7187453f":"type(df.Date_of_Journey)","3afd4a51":"df.Date_of_Journey = pd.to_datetime(df.Date_of_Journey)","5902e739":"df.Date_of_Journey.dtype","5cc250b7":"df.info()","43188652":"df['Year'] = df.Date_of_Journey.dt.year\ndf['Month'] = df.Date_of_Journey.dt.month","a7faaae2":"df.head()","65abd85a":"df.Year.unique()","df131249":"df.Year.value_counts().plot.barh(figsize=(10,10))","4b8f4cd2":"df.Month.value_counts(ascending=True).plot.barh(figsize=(10,8))","9e1ced1a":"df.Month.value_counts()","50d208af":"df['date'] = df.Date_of_Journey.dt.day","7e323ea0":"df.date","6a8c1551":"df.date.value_counts().plot.bar(figsize=(10,8))","0530c090":"import datetime\ndf['Week']  = df.Date_of_Journey.dt.dayofweek","9e36c74e":"df.Week","22614f89":"weekday = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\n\ndf.Week = df.Week.map(weekday)","a9e94847":"df.Week","b8e9c1f5":"df.Week.value_counts().plot.bar(figsize= (10,8))","064cb583":"df['Dep_Time'] = pd.to_datetime(df['Dep_Time'])\ndf['Dep_hr'] = df.Dep_Time.dt.hour\ndf['Dep_min'] = df.Dep_Time.dt.hour","2db8c4d4":"df['Arrival_Time'] = pd.to_datetime(df['Arrival_Time'])\ndf['Arr_hr'] = df.Arrival_Time.dt.hour\ndf['Arr_min'] = df.Arrival_Time.dt.hour","37d5b36d":"df.head()","6fa5c7e0":"duration = list(df['Duration'])\n\nfor i in range(len(duration)):\n    if(len(duration[i].split()) !=2):\n        if('h' in duration[i]):\n            duration[i] = duration[i].strip()+' 0m'\n        else:\n            duration[i] = '0h '+ duration[i]\n\nduration_hr = []\nduration_min = []\n\nfor i in range(len(duration)):\n    duration_hr.append(int(duration[i].split(sep='h')[0]))\n    duration_min.append(int(duration[i].split(sep='m')[0].split()[-1]))","8d49b472":"df['Dur_hr'] = duration_hr\ndf['Dur_min'] = duration_min","e7c357dc":"df.head()","5630ad1a":"#### Deleting Date_of_Journey, Dep_Time, Arrivl_Time, and Duration\ndf.drop(['Date_of_Journey', 'Dep_Time', 'Arrival_Time', 'Duration'],axis=1,inplace=True)","ee7b654e":"df.head()","e0bcf512":"df['Day_Night'] = np.where(df['Arr_hr']>19,'Night_flight','Day_flight')","9bcb2be5":"df.head()","30b8a98d":"### Removing the duplicated features\ndf = df.drop_duplicates()","ea946f87":"df.shape","5c302acd":"df.shape","581c0007":"### dropping Jet Airways as its not working now\n\ndf.drop(df[df['Airline'] == 'Jet Airways'].index,inplace=True)","3750abc4":"df.shape","a3f1bb5c":"fig, ax = plt.subplots(figsize=(10,10))\nplt.xticks(rotation=90)\n\nsns.boxplot(x='Airline',y='Price',ax=ax,data= df.sort_values('Price',ascending=False))","ce212a3a":"airline = df[['Airline']]\nairline = pd.get_dummies(airline,drop_first=True)\nairline","be2769f5":"source = df[['Source']]\nsource = pd.get_dummies(source,drop_first=True)\nsource","dea1dcd6":"destination = df[['Destination']]\ndestination = pd.get_dummies(destination,drop_first=True)\ndestination","ac2f67be":"DN = df[['Day_Night']]\nDN = pd.get_dummies(DN,drop_first=True)\nDN","c5dcaabe":"#### Route and Total stops are almost same they are giving the same data\n#### so we can drop Route\ndf.drop('Route',axis=1,inplace=True)","ede68023":"df.Additional_Info.value_counts(normalize=True)","b2f927a0":"##### Additional Info has more than 93% of the values as NO- Info \n##### so we can drop this also\ndf.drop('Additional_Info',axis=1,inplace=True)","2b59f371":"df.Total_Stops.value_counts(normalize=True)","9c0dd41a":"### As price increase when the stops are more(According to the dataset) so Ordinal encoding is required\nstops = {'non-stop':0,'1 stop':1,'2 stops':2,'3 stops':3,'4 stops':4}\ndf['Total_Stops'] = df.Total_Stops.map(stops)","2b17ff0e":"df.head()","446b75b6":"df = pd.concat([df,airline,source,destination,DN],axis=1)","012cc607":"df.head()","974a25c2":"#### Now we can drop the unwanted columns\n\ndf.drop(['Airline','Source','Destination','Day_Night','Year'],axis=1,inplace=True)","8d4ee64a":"weekday = {'Mon':0,'Tue':1,'Wed':2,'Thu':3,'Fri':4,'Sat':5,'Sun':6}\n\ndf.Week = df.Week.map(weekday)","3edfb5c3":"df.head()","cfd472dc":"df.shape","21f7a44f":"X = df.drop(['Price'],axis=1)\ny = df['Price']","3038dc86":"X.head()","9414ceef":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3,random_state=123)","3638f728":"from sklearn.feature_selection import VarianceThreshold,SelectKBest,mutual_info_classif\nv = VarianceThreshold(threshold=0.001)\nv.fit(X_train)\nv.get_support()","45e7dd32":"X_train_v = v.transform(X_train)\nX_test_v = v.transform(X_test)","3209fd8b":"X_train_v.shape,X_test_v.shape","4f430414":"X_train_v = pd.DataFrame(X_train_v)\nX_test_v = pd.DataFrame(X_test_v)","d9b5e90c":"X_train_v.head()","d1ff50bc":"mi = mutual_info_classif(X_train_v,y_train)\nmi = pd.Series(mi)\nmi.index = X_train_v.columns","5e31932f":"### As most of the features are in use then we dont need to drop now\n\nmi.sort_values().plot.bar(figsize=(10,8))  ","b2cc7e06":"plt.figure(figsize=(18,18))\nsns.heatmap(X_train_v.corr(),annot=True)","5faaa35c":"sel = SelectKBest(mutual_info_classif,k=20).fit(X_train_v,y_train)\nX_train_mi = sel.transform(X_train_v)\nX_test_mi = sel.transform(X_test_v)","5ea39a79":"X_train_mi.shape,X_test_mi.shape","43def850":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\nimport pickle\n\nrf = RandomForestRegressor(random_state=123)\nrf.fit(X_train_mi,y_train)\ny_pred = rf.predict(X_test_mi)\nprint('R2 Score: ', r2_score(y_pred,y_test))\nprint('Mean absolute Score: ', mean_absolute_error(y_pred,y_test))\nprint('Mean Square Score: ', mean_squared_error(y_pred,y_test))\nprint('R2 Score: ', np.sqrt(mean_squared_error(y_pred,y_test)))\nsns.distplot(y_test-y_pred)\n#     with open('flight_pd.pkl','wb') as f:\n#         pickle.dump(rf,f)\n    ","6df2c6a7":"# Analysis\n- Price is the only Numerical column\n- Total 11 columns \n- There are 2 NAN values, and they are in same row (Air India) , they are Route and Total stops\n- There are total 12 Airlines: ['IndiGo' 'Air India' 'Jet Airways' 'SpiceJet' 'Multiple carriers' 'GoAir'\n 'Vistara' 'Air Asia' 'Vistara Premium economy' 'Jet Airways Business'\n 'Multiple carriers Premium economy' 'Trujet']\n - There are total 5 Sources: ['Banglore' 'Kolkata' 'Delhi' 'Chennai' 'Mumbai']\n - Total 6 Destination: ['New Delhi' 'Banglore' 'Cochin' 'Kolkata' 'Delhi' 'Hyderabad']\n - 5 types of stops: ['non-stop' '2 stops' '1 stop' '3 stops' '4 stops']\n - Total 10 additional information\n- this data is of year 2019\n- April has the least no of flights\n- June has the most no of flights","68b37f2b":"## Feature Selection","e8d65e57":"## Feature Engineering","01071500":"df.isnull().sum()","69ec4906":"# Question\/Answer\n- Which is the most and least used fight?\n- **Jet Airways is the most used**\n- **Trujet is the least used**\n- Which State has more and less number of flights?   \n- **Most of the fligts are from Delhi and least form Chennai**\n- **Most of the destination is Chennai and least Kolkata**\n- How many Non Stop flights are there?\n- **5625**\n- How many 1 Stop flights are there?\n- **3491**\n- How many 2 Stop flights are there?\n- **1520**\n- How many 3 Stop flights are there?\n- **45**\n- How many 4 Stop flights are there?\n- Only one flight with 4 stops( Air India)\n- Which days have the most and least booking?\n- **6th and 4th of every month respectively**\n- Which day of week has more no of flights?\n- **Thursday has more no of flights and Monday the least**","4270c742":"## Model Creation","74f22a2e":"#### Uniques Categorical Variables"}}