{"cell_type":{"91354993":"code","ca6e4152":"code","18407aed":"code","1d4b8508":"code","4a03dd48":"code","05593238":"code","26a0b309":"code","51cf17de":"code","ad3522cc":"code","3a26caf4":"code","72eed39e":"code","79c8761c":"code","91525314":"code","6569bb22":"code","d2c5b5c6":"code","9d48dbce":"code","d0062e88":"code","779ca769":"code","30d32668":"code","86b7a761":"code","cbc71a90":"code","39f67cba":"code","62f10c0f":"code","8885d1ad":"code","bb34140c":"code","2edd5eef":"code","8c68d9ea":"code","77209a9a":"code","c0440874":"code","cd52ad61":"code","04855788":"code","1ea8f0ac":"code","0f9d808d":"code","bb554460":"code","a3d091e2":"code","ab80ace2":"code","37a610c3":"code","d4df0563":"code","63b275b4":"code","f92f4875":"code","80d78fe9":"code","a8c954e0":"code","829f5c7b":"code","ec29f5ff":"code","42ff4211":"code","4663fb70":"code","b1ae4adb":"code","da4fe701":"code","014274b2":"code","899a218b":"code","2c3ef344":"code","44a1ba7e":"code","dfb6b294":"code","aa854765":"code","e3299a2c":"code","7ad8d7b6":"code","f18d4d61":"code","2adf67c4":"code","7d8e891b":"code","e1806282":"code","c29d8af7":"code","a4041586":"code","998cff0a":"code","56e29108":"code","14794946":"code","896d57dd":"code","7f35193c":"code","0d21e6c3":"code","56f03220":"code","48f4e1a7":"code","75db6aae":"code","7b845a27":"code","f42ad5f5":"code","9dd73357":"code","aa5fc603":"code","75cbb4c3":"code","80798947":"code","3d924462":"code","7eb130d6":"code","de1406cc":"code","a22479ac":"code","1228f294":"code","c55c3876":"code","612d1219":"code","0bcf9924":"code","ec4521a3":"code","a46aeed2":"code","e40fbeee":"code","41ed096c":"code","fbdd4615":"code","1b7b1527":"code","cb148c30":"code","96639d80":"code","7c6f334f":"code","f363acd5":"code","12305e31":"code","999b37ec":"code","72be3b47":"code","ae1623c1":"code","9a7bc0b5":"code","1e81399e":"code","49e33cae":"code","8def069d":"code","84ae2dc6":"code","cf01af3a":"code","7ebfc49b":"code","60605afb":"code","17d3db97":"code","fd68ca0a":"code","70f2cc4e":"code","2cd804b3":"code","4bda49ab":"code","f918543e":"code","7a0baa85":"code","a4add22a":"code","0518606b":"code","967342aa":"code","b3506671":"code","8e6a9eee":"code","f7ce2f2a":"markdown","dc0ba47a":"markdown","e11bd763":"markdown","619f31a8":"markdown","4be943bc":"markdown","95d1139e":"markdown","ba41e352":"markdown","fe12b089":"markdown","93262a1e":"markdown","32e9c5f5":"markdown","77012a3e":"markdown","a3fba50a":"markdown","e0b35af3":"markdown","c89808d8":"markdown","6563f1d3":"markdown","976d9e4a":"markdown","baded3d4":"markdown","b5e66fed":"markdown","079867e0":"markdown","06562de9":"markdown","0af05af3":"markdown","f7655b6f":"markdown","3f811343":"markdown","8e52d5de":"markdown","2050c116":"markdown","a44338c0":"markdown","d406a477":"markdown","5f8ded68":"markdown","be8899df":"markdown","6db9ca48":"markdown","9ef07b02":"markdown","0ea63446":"markdown","7bbe0491":"markdown","3b45cb9b":"markdown","88c8a6ce":"markdown","2b2b8d66":"markdown","8ce33869":"markdown","100b225c":"markdown","441cf2b1":"markdown","f3a6cf35":"markdown","76426a7c":"markdown","4c1f1ed8":"markdown","16d7d2ff":"markdown","ceccb6b1":"markdown","eb2c7a2c":"markdown"},"source":{"91354993":"!pip install -q hvplot","ca6e4152":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom scipy import stats \nimport matplotlib.pyplot as plt\nimport hvplot.pandas\n\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom sklearn.metrics import (\n    accuracy_score, confusion_matrix, classification_report, \n    roc_auc_score, roc_curve, auc,\n    plot_confusion_matrix, plot_roc_curve\n)\n\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import Dense, Dropout, BatchNormalization \nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.metrics import AUC\n\npd.set_option('display.float', '{:.2f}'.format)\npd.set_option('display.max_columns', 50)\npd.set_option('display.max_rows', 50)","18407aed":"data = pd.read_csv(\"\/kaggle\/input\/lending-club-dataset\/lending_club_loan_two.csv\")\ndata.head()","1d4b8508":"data.describe()","4a03dd48":"data.info()","05593238":"data['loan_status'].value_counts().hvplot.bar(\n    title=\"Loan Status Counts\", xlabel='Loan Status', ylabel='Count', \n    width=500, height=350\n)","26a0b309":"plt.figure(figsize=(12, 8))\nsns.heatmap(data.corr(), annot=True, cmap='viridis')","51cf17de":"installment = data.hvplot.hist(\n    y='installment', by='loan_status', subplots=False, \n    width=350, height=400, bins=50, alpha=0.4, \n    title=\"Installment by Loan Status\", \n    xlabel='Installment', ylabel='Counts', legend='top'\n)\n\nloan_amnt = data.hvplot.hist(\n    y='loan_amnt', by='loan_status', subplots=False, \n    width=350, height=400, bins=30, alpha=0.4, \n    title=\"Loan Amount by Loan Status\", \n    xlabel='Loan Amount', ylabel='Counts', legend='top'\n)\n\ninstallment + loan_amnt","ad3522cc":"loan_amnt_box = data.hvplot.box(\n    y='loan_amnt', subplots=True, by='loan_status', width=300, height=350, \n    title=\"Loan Status by Loan Amount \", xlabel='Loan Status', ylabel='Loan Amount'\n)\n\ninstallment_box = data.hvplot.box(\n    y='installment', subplots=True, by='loan_status', width=300, height=350, \n    title=\"Loan Status by Installment\", xlabel='Loan Status', ylabel='Installment'\n)\n\nloan_amnt_box + installment_box","3a26caf4":"data.groupby(by='loan_status')['loan_amnt'].describe()","72eed39e":"print(f\"GRADE unique: {data.grade.unique()}\")\nprint(f\"SUB_GRADE unique: {data.sub_grade.unique()}\")","79c8761c":"# fully_paid = data.loc[data['loan_status']=='Fully Paid', 'grade'].value_counts().hvplot.bar() \n# charged_off = data.loc[data['loan_status']=='Charged Off', 'grade'].value_counts().hvplot.bar() \n\n# grades = (fully_paid * charged_off).opts(\n#     title=\"Loan Status by Grade\", xlabel='Grades', ylabel='Count',\n#     width=500, height=450, legend_cols=2, legend_position='top_right'\n# )\n\n# fully_paid = data.loc[data['loan_status']=='Fully Paid', 'sub_grade'].value_counts().hvplot.bar() \n# charged_off = data.loc[data['loan_status']=='Charged Off', 'sub_grade'].value_counts().hvplot.bar() \n\n# sub_grades = (fully_paid * charged_off).opts(\n#     title=\"Loan Status by Grade\", xlabel='Grades', ylabel='Count',\n#     width=500, height=450, legend_cols=2, legend_position='top_right', \n#     shared_axes=False\n# )\n\n# grades + sub_grades","91525314":"fully_paid = data.loc[data['loan_status']=='Fully Paid', 'grade'].value_counts().hvplot.bar() \ncharged_off = data.loc[data['loan_status']=='Charged Off', 'grade'].value_counts().hvplot.bar() \n\n(fully_paid * charged_off).opts(\n    title=\"Loan Status by Grade\", xlabel='Grades', ylabel='Count',\n    width=500, height=450, legend_cols=2, legend_position='top_right', xrotation=90\n)","6569bb22":"fully_paid = data.loc[data['loan_status']=='Fully Paid', 'sub_grade'].value_counts().hvplot.bar() \ncharged_off = data.loc[data['loan_status']=='Charged Off', 'sub_grade'].value_counts().hvplot.bar() \n\n(fully_paid * charged_off).opts(\n    title=\"Loan Status by Grade\", xlabel='Grades', ylabel='Count',\n    width=500, height=400, legend_cols=2, legend_position='top_right', xrotation=90\n)","d2c5b5c6":"# data.hvplot.bar()","9d48dbce":"plt.figure(figsize=(15, 10))\n\nplt.subplot(2, 2, 1)\ngrade = sorted(data.grade.unique().tolist())\nsns.countplot(x='grade', data=data, hue='loan_status', order=grade)\n\nplt.subplot(2, 2, 2)\nsub_grade = sorted(data.sub_grade.unique().tolist())\ng = sns.countplot(x='sub_grade', data=data, hue='loan_status', order=sub_grade)\ng.set_xticklabels(g.get_xticklabels(), rotation=90);","d0062e88":"df = data[(data.grade == 'F') | (data.grade == 'G')]\n\nplt.figure(figsize=(15, 10))\n\nplt.subplot(2, 2, 1)\ngrade = sorted(df.grade.unique().tolist())\nsns.countplot(x='grade', data=df, hue='loan_status', order=grade)\n\nplt.subplot(2, 2, 2)\nsub_grade = sorted(df.sub_grade.unique().tolist())\nsns.countplot(x='sub_grade', data=df, hue='loan_status', order=sub_grade)","779ca769":"data['home_ownership'].value_counts()","30d32668":"fully_paid = data.loc[data['loan_status']=='Fully Paid', 'home_ownership'].value_counts().hvplot.bar() \ncharged_off = data.loc[data['loan_status']=='Charged Off', 'home_ownership'].value_counts().hvplot.bar()\n\nhome_ownership_count = (fully_paid * charged_off).opts(\n    title=\"Loan Status by Grade\", xlabel='Home Ownership', ylabel='Count',\n    width=350, height=350, legend_cols=2, legend_position='top_right'\n).opts(xrotation=90)\n\nhome_ownership = data.home_ownership.value_counts().hvplot.bar(\n    title=\"Loan Status by Grade\", xlabel='Home Ownership', ylabel='Count', \n    width=350, height=350, legend='top'\n).opts(xrotation=90)\n\n(home_ownership_count + home_ownership)","86b7a761":"data.loc[(data.home_ownership == 'ANY') | (data.home_ownership == 'NONE'), 'home_ownership'] = 'OTHER'  \ndata.home_ownership.value_counts()","cbc71a90":"plt.figure(figsize=(15, 20))\n\nplt.subplot(4, 2, 1)\nsns.countplot(x='term', data=data, hue='loan_status')\n\nplt.subplot(4, 2, 2)\nsns.countplot(x='home_ownership', data=data, hue='loan_status')\n\nplt.subplot(4, 2, 3)\nsns.countplot(x='verification_status', data=data, hue='loan_status')\n\nplt.subplot(4, 2, 4)\ng = sns.countplot(x='purpose', data=data, hue='loan_status')\ng.set_xticklabels(g.get_xticklabels(), rotation=90);","39f67cba":"data.loc[data['home_ownership']=='OTHER', 'loan_status'].value_counts()","62f10c0f":"int_rate = data.hvplot.hist(\n    y='int_rate', by='loan_status', alpha=0.3, width=350, height=400,\n    title=\"Loan Status by Interest Rate\", xlabel='Interest Rate', ylabel='Loans Counts', \n    legend='top'\n)\n\nannual_inc = data.hvplot.hist(\n    y='annual_inc', by='loan_status', bins=50, alpha=0.3, width=350, height=400,\n    title=\"Loan Status by Annual Income\", xlabel='Annual Income', ylabel='Loans Counts', \n    legend='top'\n).opts(xrotation=45)\n\nint_rate + annual_inc","8885d1ad":"data[data.annual_inc <= 250000].hvplot.hist(\n    y='annual_inc', by='loan_status', bins=50, alpha=0.3, width=500, height=400,\n    title=\"Loan Status by Annual Income (<= 250000\/Year)\", \n    xlabel='Annual Income', ylabel='Loans Counts', legend='top'\n).opts(xrotation=45)","bb34140c":"print((data[data.annual_inc >= 250000].shape[0] \/ data.shape[0]) * 100)\nprint((data[data.annual_inc >= 1000000].shape[0] \/ data.shape[0]) * 100)","2edd5eef":"data.loc[data.annual_inc >= 1000000, 'loan_status'].value_counts()","8c68d9ea":"data.loc[data.annual_inc >= 250000, 'loan_status'].value_counts()","77209a9a":"print(data.emp_title.isna().sum())\nprint(data.emp_title.nunique())","c0440874":"data['emp_title'].value_counts()[:20]","cd52ad61":"plt.figure(figsize=(15, 12))\n\nplt.subplot(2, 2, 1)\norder = ['< 1 year', '1 year', '2 years', '3 years', '4 years', '5 years', \n          '6 years', '7 years', '8 years', '9 years', '10+ years',]\ng = sns.countplot(x='emp_length', data=data, hue='loan_status', order=order)\ng.set_xticklabels(g.get_xticklabels(), rotation=90);\n\nplt.subplot(2, 2, 2)\nplt.barh(data.emp_title.value_counts()[:30].index, data.emp_title.value_counts()[:30])\nplt.title(\"The most 30 jobs title afforded a loan\")\nplt.tight_layout()","04855788":"# data.hvplot.line(x='issue_d', y='loan_status')","1ea8f0ac":"data['earliest_cr_line'].value_counts()","0f9d808d":"data['issue_d'] = pd.to_datetime(data['issue_d'])\ndata['earliest_cr_line'] = pd.to_datetime(data['earliest_cr_line'])","bb554460":"fully_paid = data.loc[data['loan_status']=='Fully Paid', 'issue_d'].hvplot.hist(bins=35) \ncharged_off = data.loc[data['loan_status']=='Charged Off', 'issue_d'].hvplot.hist(bins=35)\n\n# fully_paid * charged_off\nloan_issue_date = (fully_paid * charged_off).opts(\n    title=\"Loan Status by Loan Issue Date\", xlabel='Loan Issue Date', ylabel='Count',\n    width=350, height=350, legend_cols=2, legend_position='top_right'\n).opts(xrotation=45)\n\nfully_paid = data.loc[data['loan_status']=='Fully Paid', 'earliest_cr_line'].hvplot.hist(bins=35) \ncharged_off = data.loc[data['loan_status']=='Charged Off', 'earliest_cr_line'].hvplot.hist(bins=35)\n\nearliest_cr_line = (fully_paid * charged_off).opts(\n    title=\"Loan Status by earliest_cr_line\", xlabel='earliest_cr_line', ylabel='Count',\n    width=350, height=350, legend_cols=2, legend_position='top_right'\n).opts(xrotation=45)\n\nloan_issue_date + earliest_cr_line","a3d091e2":"data.title.isna().sum()","ab80ace2":"data['title'] = data.title.str.lower()","37a610c3":"data.title.value_counts()[:10]","d4df0563":"data.dti.value_counts()","63b275b4":"dti = data.hvplot.hist(\n    y='dti', bins=50, width=350, height=350, \n    title=\"dti Distribution\", xlabel='dti', ylabel='Count'\n)\n\nsub_dti = data[data['dti']<=50].hvplot.hist(\n    y='dti', bins=50, width=350, height=350, \n    title=\"dti (<=30) Distribution\", xlabel='dti', ylabel='Count', shared_axes=False\n)\n\ndti + sub_dti","f92f4875":"print(data[data['dti']>=40].shape)","80d78fe9":"data.loc[data['dti']>=50, 'loan_status'].value_counts()","a8c954e0":"dti = data[data['dti']<=50].hvplot.hist(\n    y='dti', by='loan_status', bins=50, width=300, height=350, \n    title=\"dti (<=30) Distribution\", xlabel='dti', ylabel='Count', \n    alpha=0.3, legend='top'\n)\n\ntitle=\"Loan Status by The number of open credit lines\"\n\nopen_acc = data.hvplot.hist(\n    y='open_acc', by='loan_status', bins=50, width=300, height=350, \n    title=title, xlabel='The number of open credit lines', ylabel='Count', \n    alpha=0.4, legend='top'\n)\n\ntitle=\"Loan Status by The total number of credit lines\"\n\ntotal_acc = data.hvplot.hist(\n    y='total_acc', by='loan_status', bins=50, width=300, height=350, \n    title=title, xlabel='The total number of credit lines', ylabel='Count', \n    alpha=0.4, legend='top'\n)\n\ndti + open_acc + total_acc","829f5c7b":"print(data.shape)\nprint(data[data.open_acc > 40].shape)","ec29f5ff":"print(data.shape)\nprint(data[data.total_acc > 80].shape)","42ff4211":"print(data.shape)\nprint(data[data.revol_util > 120].shape)","4663fb70":"title=\"Loan Status by Revolving line utilization rate\"\n\nrevol_util = data.hvplot.hist(\n    y='revol_util', by='loan_status', bins=50, width=350, height=400, \n    title=title, xlabel='Revolving line utilization rate', ylabel='Count', \n    alpha=0.4, legend='top'\n)\n\ntitle=\"Loan Status by Revolving line utilization rate (<120)\"\n\nsub_revol_util = data[data.revol_util < 120].hvplot.hist(\n    y='revol_util', by='loan_status', bins=50, width=350, height=400, \n    title=title, xlabel='Revolving line utilization rate', ylabel='Count', \n    shared_axes=False, alpha=0.4, legend='top'\n)\n\nrevol_util + sub_revol_util","b1ae4adb":"data[data.revol_util > 200]","da4fe701":"print(data.shape)\nprint(data[data.revol_bal > 250000].shape)","014274b2":"title = \"Loan Status by Total credit revolving balance\"\n\nrevol_bal = data.hvplot.hist(\n    y='revol_bal', by='loan_status', bins=50, width=350, height=400, \n    title=title, xlabel='Total credit revolving balance', ylabel='Count', \n    alpha=0.4, legend='top'\n)\n\ntitle = \"Loan Status by Total credit revolving balance (<250000)\"\n\nsub_revol_bal = data[data['revol_bal']<=250000].hvplot.hist(\n    y='revol_bal', by='loan_status', bins=50, width=350, height=400, \n    title=title, xlabel='Total credit revolving balance', ylabel='Count', \n    alpha=0.4, legend='top', shared_axes=False\n).opts(xrotation=45)\n\nrevol_bal + sub_revol_bal","899a218b":"data.loc[data.revol_bal > 250000, 'loan_status'].value_counts()","2c3ef344":"xlabel = 'Number of derogatory public records'\ntitle = \"Loan Status by Number of derogatory public records\"\n\nfully_paid = data.loc[data['loan_status']=='Fully Paid', 'pub_rec'].value_counts().hvplot.bar() \ncharged_off = data.loc[data['loan_status']=='Charged Off', 'pub_rec'].value_counts().hvplot.bar()\n\n(fully_paid * charged_off).opts(\n    title=title, xlabel=xlabel, ylabel='Count',\n    width=400, height=400, legend_cols=2, legend_position='top_right'\n)","44a1ba7e":"xlabel = \"The initial listing status of the loan\"\ntitle = \"Loan Status by The initial listing status of the loan\"\n\nfully_paid = data.loc[data['loan_status']=='Fully Paid', 'initial_list_status'].value_counts().hvplot.bar() \ncharged_off = data.loc[data['loan_status']=='Charged Off', 'initial_list_status'].value_counts().hvplot.bar()\n\n(fully_paid * charged_off).opts(\n    title=title, xlabel=xlabel, ylabel='Count',\n    width=400, height=400, legend_cols=2, legend_position='top_right'\n)","dfb6b294":"fully_paid = data.loc[data['loan_status']=='Fully Paid', 'application_type'].value_counts().hvplot.bar() \ncharged_off = data.loc[data['loan_status']=='Charged Off', 'application_type'].value_counts().hvplot.bar()\n\n(fully_paid * charged_off).opts(\n    title=\"Loan Status by Application Type\", xlabel=\"Application Type\", ylabel='Count',\n    width=400, height=400, legend_cols=2, legend_position='top_right'\n)","aa854765":"xlabel = \"Number of public record bankruptcies\"\ntitle = \"Loan Status by The Number of public record bankruptcies\"\n\nfully_paid = data.loc[data['loan_status']=='Fully Paid', 'pub_rec_bankruptcies'].value_counts().hvplot.bar() \ncharged_off = data.loc[data['loan_status']=='Charged Off', 'pub_rec_bankruptcies'].value_counts().hvplot.bar()\n\n(fully_paid * charged_off).opts(\n    title=title, xlabel=xlabel, ylabel='Count',\n    width=400, height=400, legend_cols=2, legend_position='top_right'\n)","e3299a2c":"def pub_rec(number):\n    if number == 0.0:\n        return 0\n    else:\n        return 1\n    \ndef mort_acc(number):\n    if number == 0.0:\n        return 0\n    elif number >= 1.0:\n        return 1\n    else:\n        return number\n    \ndef pub_rec_bankruptcies(number):\n    if number == 0.0:\n        return 0\n    elif number >= 1.0:\n        return 1\n    else:\n        return number","7ad8d7b6":"data['pub_rec'] = data.pub_rec.apply(pub_rec)\ndata['mort_acc'] = data.mort_acc.apply(mort_acc)\ndata['pub_rec_bankruptcies'] = data.pub_rec_bankruptcies.apply(pub_rec_bankruptcies)","f18d4d61":"plt.figure(figsize=(12, 30))\n\nplt.subplot(6, 2, 1)\nsns.countplot(x='pub_rec', data=data, hue='loan_status')\n\nplt.subplot(6, 2, 2)\nsns.countplot(x='initial_list_status', data=data, hue='loan_status')\n\nplt.subplot(6, 2, 3)\nsns.countplot(x='application_type', data=data, hue='loan_status')\n\nplt.subplot(6, 2, 4)\nsns.countplot(x='mort_acc', data=data, hue='loan_status')\n\nplt.subplot(6, 2, 5)\nsns.countplot(x='pub_rec_bankruptcies', data=data, hue='loan_status')","2adf67c4":"data['loan_status'] = data.loan_status.map({'Fully Paid':1, 'Charged Off':0})","7d8e891b":"data.corr()['loan_status'].drop('loan_status').sort_values().hvplot.barh(\n    width=600, height=400, \n    title=\"Correlation between Loan status and Numeric Features\", \n    ylabel='Correlation', xlabel='Numerical Features', \n)","e1806282":"## We need to remove outliers found in the analysis","c29d8af7":"# The length of the data\nprint(f\"The Length of the data: {data.shape}\")","a4041586":"# Missing values\nfor column in data.columns:\n    if data[column].isna().sum() != 0:\n        missing = data[column].isna().sum()\n        portion = (missing \/ data.shape[0]) * 100\n        print(f\"'{column}': number of missing values '{missing}' ==> '{portion:.3f}%'\")","998cff0a":"data.emp_title.nunique()","56e29108":"data.drop('emp_title', axis=1, inplace=True)","14794946":"data.emp_length.unique()","896d57dd":"for year in data.emp_length.unique():\n    print(f\"{year} years in this position:\")\n    print(f\"{data[data.emp_length == year].loan_status.value_counts(normalize=True)}\")\n    print('==========================================')","7f35193c":"data.drop('emp_length', axis=1, inplace=True)","0d21e6c3":"data.title.value_counts().head()","56f03220":"data.purpose.value_counts().head()","48f4e1a7":"data.drop('title', axis=1, inplace=True)","75db6aae":"data.mort_acc.value_counts()","7b845a27":"data.mort_acc.isna().sum()","f42ad5f5":"data.corr()['mort_acc'].drop('mort_acc').sort_values().hvplot.barh()","9dd73357":"total_acc_avg = data.groupby(by='total_acc').mean().mort_acc","aa5fc603":"def fill_mort_acc(total_acc, mort_acc):\n    if np.isnan(mort_acc):\n        return total_acc_avg[total_acc].round()\n    else:\n        return mort_acc","75cbb4c3":"data['mort_acc'] = data.apply(lambda x: fill_mort_acc(x['total_acc'], x['mort_acc']), axis=1)","80798947":"for column in data.columns:\n    if data[column].isna().sum() != 0:\n        missing = data[column].isna().sum()\n        portion = (missing \/ data.shape[0]) * 100\n        print(f\"'{column}': number of missing values '{missing}' ==> '{portion:.3f}%'\")","3d924462":"data.dropna(inplace=True)","7eb130d6":"data.shape","de1406cc":"print([column for column in data.columns if data[column].dtype == object])","a22479ac":"data.term.unique()","1228f294":"term_values = {' 36 months': 36, ' 60 months': 60}\ndata['term'] = data.term.map(term_values)","c55c3876":"data.term.unique()","612d1219":"data.drop('grade', axis=1, inplace=True)","0bcf9924":"dummies = ['sub_grade', 'verification_status', 'purpose', 'initial_list_status', \n           'application_type', 'home_ownership']\ndata = pd.get_dummies(data, columns=dummies, drop_first=True)","ec4521a3":"data.address.head()","a46aeed2":"data['zip_code'] = data.address.apply(lambda x: x[-5:])","e40fbeee":"data.zip_code.value_counts()","41ed096c":"data = pd.get_dummies(data, columns=['zip_code'], drop_first=True)","fbdd4615":"data.drop('address', axis=1, inplace=True)","1b7b1527":"data.drop('issue_d', axis=1, inplace=True)","cb148c30":"data['earliest_cr_line'] = data.earliest_cr_line.dt.year","96639d80":"data.earliest_cr_line.nunique()","7c6f334f":"data.earliest_cr_line.value_counts()","f363acd5":"# data.drop('earliest_cr_line', axis=1, inplace=True)","12305e31":"# print(f\"Data shape: {data.shape}\")\n\n# # Remove duplicate Features\n# data = data.T.drop_duplicates()\n# data = data.T\n\n# # Remove Duplicate Rows\n# data.drop_duplicates(inplace=True)\n\n# print(f\"Data shape: {data.shape}\")","999b37ec":"w_p = data.loan_status.value_counts()[0] \/ data.shape[0]\nw_n = data.loan_status.value_counts()[1] \/ data.shape[0]\n\nprint(f\"Weight of positive values {w_p}\")\nprint(f\"Weight of negative values {w_n}\")","72be3b47":"train, test = train_test_split(data, test_size=0.33, random_state=42)\n\nprint(train.shape)\nprint(test.shape)","ae1623c1":"print(train[train['dti'] <= 50].shape)\nprint(train.shape)","9a7bc0b5":"print(train.shape)\ntrain = train[train['annual_inc'] <= 250000]\ntrain = train[train['dti'] <= 50]\ntrain = train[train['open_acc'] <= 40]\ntrain = train[train['total_acc'] <= 80]\ntrain = train[train['revol_util'] <= 120]\ntrain = train[train['revol_bal'] <= 250000]\nprint(train.shape)","1e81399e":"X_train, y_train = train.drop('loan_status', axis=1), train.loan_status\nX_test, y_test = test.drop('loan_status', axis=1), test.loan_status","49e33cae":"X_train.dtypes","8def069d":"scaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","84ae2dc6":"def print_score(true, pred, train=True):\n    if train:\n        clf_report = pd.DataFrame(classification_report(true, pred, output_dict=True))\n        print(\"Train Result:\\n================================================\")\n        print(f\"Accuracy Score: {accuracy_score(true, pred) * 100:.2f}%\")\n        print(\"_______________________________________________\")\n        print(f\"CLASSIFICATION REPORT:\\n{clf_report}\")\n        print(\"_______________________________________________\")\n        print(f\"Confusion Matrix: \\n {confusion_matrix(true, pred)}\\n\")\n        \n    elif train==False:\n        clf_report = pd.DataFrame(classification_report(true, pred, output_dict=True))\n        print(\"Test Result:\\n================================================\")        \n        print(f\"Accuracy Score: {accuracy_score(true, pred) * 100:.2f}%\")\n        print(\"_______________________________________________\")\n        print(f\"CLASSIFICATION REPORT:\\n{clf_report}\")\n        print(\"_______________________________________________\")\n        print(f\"Confusion Matrix: \\n {confusion_matrix(true, pred)}\\n\")","cf01af3a":"X_train = np.array(X_train).astype(np.float32)\nX_test = np.array(X_test).astype(np.float32)\ny_train = np.array(y_train).astype(np.float32)\ny_test = np.array(y_test).astype(np.float32)","7ebfc49b":"def evaluate_nn(true, pred, train=True):\n    if train:\n        clf_report = pd.DataFrame(classification_report(true, pred, output_dict=True))\n        print(\"Train Result:\\n================================================\")\n        print(f\"Accuracy Score: {accuracy_score(true, pred) * 100:.2f}%\")\n        print(\"_______________________________________________\")\n        print(f\"CLASSIFICATION REPORT:\\n{clf_report}\")\n        print(\"_______________________________________________\")\n        print(f\"Confusion Matrix: \\n {confusion_matrix(true, pred)}\\n\")\n        \n    elif train==False:\n        clf_report = pd.DataFrame(classification_report(true, pred, output_dict=True))\n        print(\"Test Result:\\n================================================\")        \n        print(f\"Accuracy Score: {accuracy_score(true, pred) * 100:.2f}%\")\n        print(\"_______________________________________________\")\n        print(f\"CLASSIFICATION REPORT:\\n{clf_report}\")\n        print(\"_______________________________________________\")\n        print(f\"Confusion Matrix: \\n {confusion_matrix(true, pred)}\\n\")\n        \ndef plot_learning_evolution(r):\n    plt.figure(figsize=(12, 8))\n    \n    plt.subplot(2, 2, 1)\n    plt.plot(r.history['loss'], label='Loss')\n    plt.plot(r.history['val_loss'], label='val_Loss')\n    plt.title('Loss evolution during trainig')\n    plt.legend()\n\n    plt.subplot(2, 2, 2)\n    plt.plot(r.history['AUC'], label='AUC')\n    plt.plot(r.history['val_AUC'], label='val_AUC')\n    plt.title('AUC score evolution during trainig')\n    plt.legend();\n\ndef nn_model(num_columns, num_labels, hidden_units, dropout_rates, learning_rate):\n    inp = tf.keras.layers.Input(shape=(num_columns, ))\n    x = BatchNormalization()(inp)\n    x = Dropout(dropout_rates[0])(x)\n    for i in range(len(hidden_units)):\n        x = Dense(hidden_units[i], activation='relu')(x)\n        x = BatchNormalization()(x)\n        x = Dropout(dropout_rates[i + 1])(x)\n    x = Dense(num_labels, activation='sigmoid')(x)\n  \n    model = Model(inputs=inp, outputs=x)\n    model.compile(optimizer=Adam(learning_rate), loss='binary_crossentropy', metrics=[AUC(name='AUC')])\n    return model","60605afb":"num_columns = X_train.shape[1]\nnum_labels = 1\nhidden_units = [150, 150, 150]\ndropout_rates = [0.1, 0, 0.1, 0]\nlearning_rate = 1e-3\n\n\nmodel = nn_model(\n    num_columns=num_columns, \n    num_labels=num_labels,\n    hidden_units=hidden_units,\n    dropout_rates=dropout_rates,\n    learning_rate=learning_rate\n)\nr = model.fit(\n    X_train, y_train,\n    validation_data=(X_test, y_test),\n    epochs=20,\n    batch_size=32\n)","17d3db97":"plot_learning_evolution(r)","fd68ca0a":"y_train_pred = model.predict(X_train)\nevaluate_nn(y_train, y_train_pred.round(), train=True)","70f2cc4e":"y_test_pred = model.predict(X_test)\nevaluate_nn(y_test, y_test_pred.round(), train=False)","2cd804b3":"scores_dict = {\n    'ANNs': {\n        'Train': roc_auc_score(y_train, model.predict(X_train)),\n        'Test': roc_auc_score(y_test, model.predict(X_test)),\n    },\n}","4bda49ab":"# param_grid = dict(\n#     n_estimators=stats.randint(10, 500),\n#     max_depth=stats.randint(1, 10),\n#     learning_rate=stats.uniform(0, 1)\n# )\n\nxgb_clf = XGBClassifier(use_label_encoder=False)\n# xgb_cv = RandomizedSearchCV(\n#     xgb_clf, param_grid, cv=3, n_iter=60, \n#     scoring='roc_auc', n_jobs=-1, verbose=1\n# )\n# xgb_cv.fit(X_train, y_train)\n\n# best_params = xgb_cv.best_params_\n# best_params['tree_method'] = 'gpu_hist'\n# # best_params = {'n_estimators': 50, 'tree_method': 'gpu_hist'}\n# print(f\"Best Parameters: {best_params}\")\n\n# xgb_clf = XGBClassifier(**best_params)\nxgb_clf.fit(X_train, y_train)\n\ny_train_pred = xgb_clf.predict(X_train)\ny_test_pred = xgb_clf.predict(X_test)\n\nprint_score(y_train, y_train_pred, train=True)\nprint_score(y_test, y_test_pred, train=False)","f918543e":"disp = plot_confusion_matrix(\n    xgb_clf, X_test, y_test, \n    cmap='Blues', values_format='d', \n    display_labels=['Default', 'Fully-Paid']\n)\n\ndisp = plot_roc_curve(xgb_clf, X_test, y_test)","7a0baa85":"scores_dict['XGBoost'] = {\n        'Train': roc_auc_score(y_train, xgb_clf.predict(X_train)),\n        'Test': roc_auc_score(y_test, xgb_clf.predict(X_test)),\n    }","a4add22a":"# param_grid = dict(\n#     n_estimators=stats.randint(100, 1500),\n#     max_depth=stats.randint(10, 100),\n#     min_samples_split=stats.randint(1, 10),\n#     min_samples_leaf=stats.randint(1, 10),\n# )\n\nrf_clf = RandomForestClassifier(n_estimators=100)\n# rf_cv = RandomizedSearchCV(\n#     rf_clf, param_grid, cv=3, n_iter=60, \n#     scoring='roc_auc', n_jobs=-1, verbose=1\n# )\n# rf_cv.fit(X_train, y_train)\n# best_params = rf_cv.best_params_\n# print(f\"Best Parameters: {best_params}\")\n# rf_clf = RandomForestClassifier(**best_params)\nrf_clf.fit(X_train, y_train)\n\ny_train_pred = rf_clf.predict(X_train)\ny_test_pred = rf_clf.predict(X_test)\n\nprint_score(y_train, y_train_pred, train=True)\nprint_score(y_test, y_test_pred, train=False)","0518606b":"disp = plot_confusion_matrix(rf_clf, X_test, y_test, \n                             cmap='Blues', values_format='d', \n                             display_labels=['Default', 'Fully-Paid'])\n\ndisp = plot_roc_curve(xgb_clf, X_test, y_test)\nplot_roc_curve(rf_clf, X_test, y_test, ax=disp.ax_)","967342aa":"scores_dict['Random Forest'] = {\n        'Train': roc_auc_score(y_train, rf_clf.predict(X_train)),\n        'Test': roc_auc_score(y_test, rf_clf.predict(X_test)),\n    }","b3506671":"ml_models = {\n    'Random Forest': rf_clf, \n    'XGBoost': xgb_clf, \n    'ANNs': model\n}\n\nfor model in ml_models:\n    print(f\"{model.upper():{30}} roc_auc_score: {roc_auc_score(y_test, ml_models[model].predict(X_test)):.3f}\")","8e6a9eee":"scores_df = pd.DataFrame(scores_dict)\nscores_df.hvplot.barh(\n    width=500, height=400, \n    title=\"ROC Scores of ML Models\", xlabel=\"ROC Scores\", \n    alpha=0.4, legend='top'\n)","f7ce2f2a":"## \ud83d\udd2a Train Test Split","dc0ba47a":"It looks like `F` and `G` subgrades don't get paid back that often. Isloate those and recreate the countplot just for those subgrades.","e11bd763":"### `revol_util` & `pub_rec_bankruptcies`\nThese two features have missing data points, but they account for less than 0.5% of the total data. So we are going to remove the rows that are missing those values in those columns with dropna().","619f31a8":"### \ud83d\udccc Notice\n> We noticed almost perfect correlation between \"`loan_amnt`\" the \"`installment`\" feature. We'll explore this features further. Print out their descriptions and perform a scatterplot between them. \n\n> - Does this relationship make sense to you? \n> - Do we think there is duplicate information here?","4be943bc":"# \ud83d\udd04 Data PreProcessing\n\n**Section Goals:** \n> - Remove or fill any missing data. \n> - Remove unnecessary or repetitive features. \n> - Convert categorical string features to dummy variables.","95d1139e":"### `title`","ba41e352":"# \ud83e\udd16 Models Building","fe12b089":"### `grade` & `sub_grade`\n\nWe know that `grade` is just a sub feature of `sub_grade`, So we are goinig to drop it.","93262a1e":"### `issue_d` \n\nThis would be data leakage, we wouldn't know beforehand whether or not a loan would be issued when using our model, so in theory we wouldn't have an issue_date, drop this feature.","32e9c5f5":"# Outliers Detection and Removing","77012a3e":"- It seems that loans with high intersest rate are more likely to be unpaid.\n- Only 75 (less then) borrowers have an annual income more than 1 million, and 4077","a3fba50a":"### `earliest_cr_line`\nThis appears to be a historical time stamp feature. Extract the year from this feature using a `.apply()` function, then convert it to a numeric feature.","e0b35af3":"## \ud83d\udd16 Check for duplicates columns & features","c89808d8":"# \u2714\ufe0f Artificial Neural Networks (ANNs)","6563f1d3":"## \u2714\ufe0f `emp_title` & `emp_length`\n\n> - `emp_title`: The job title supplied by the Borrower when applying for the loan.\n> - `emp_length`: Employment length in years. Possible values are between 0 and 10 where 0 means less than one year and 10 means ten or more years.","976d9e4a":"- It seems that the smaller the `dti` the more likely that the loan will not be paid.\n- Only `217` borrower have more than `40` open credit lines.\n- Only `266` borrower have more than `80` credit line in the borrower credit file.","baded3d4":"## \u2714\ufe0f `issue_d`, `earliest_cr_line`\n\n> - `issue_d`: The month which the loan was funded\n> - `earliest_cr_line`: The month the borrower's earliest reported credit line was opened","b5e66fed":"# \ud83d\udd0d Exploratory Data Analysis\n\n> **OVERALL GOAL:** \n> - Get an understanding for which variables are important, view summary statistics, and visualize the data","079867e0":"### `emp_title`","06562de9":"## \ud83d\udcc8 How numeric features correlate with the target variable?","0af05af3":"****\n## Conclusion:\n\nWe notice that, there are broadly three types of features: \n- 1. Features related to the applicant (demographic variables such as occupation, employment details etc.), \n- 2. Features related to loan characteristics (amount of loan, interest rate, purpose of loan etc.) \n****","f7655b6f":"# \u2714\ufe0f Random Forest Classifier","3f811343":"## \u2714\ufe0f `dti`, `open_acc`, `revol_bal`, `revol_util`, & `total_acc`\n\n> - `dti`: A ratio calculated using the borrower\u2019s total monthly debt payments on the total debt obligations, excluding mortgage and the requested LC loan, divided by the borrower\u2019s self-reported monthly income.\n> - `open_acc`: The number of open credit lines in the borrower's credit file.\n> - `revol_bal`: Total credit revolving balance\n> - `revol_util`: Revolving line utilization rate, or the amount of credit the borrower is using relative to all available revolving credit.\n> - `total_acc`: The total number of credit lines currently in the borrower's credit file","8e52d5de":"# \ud83d\udcca Comparing Models Prerformance","2050c116":"## \ud83d\udccf Normalizing the data","a44338c0":"### `address`\nWe are going to feature engineer a zip code column from the address in the data set. Create a column called 'zip_code' that extracts the zip code from the address column.","d406a477":"## \u2714\ufe0f `int_rate` & `annual_inc`\n\n> - `int_rate`: Interest Rate on the loan\n> - `annual_inc`: The self-reported annual income provided by the borrower during registration","5f8ded68":"## \u2714\ufe0f `loan_amnt` & `installment`\n\n> - `installment`: The monthly payment owed by the borrower if the loan originates.\n> - `loan_amnt`: The listed amount of the loan applied for by the borrower. If at some point in time, the credit department reduces the loan amount, then it will be reflected in this value.","be8899df":"## \ud83e\uddee Categorical Variables and Dummy Variables","6db9ca48":"## \u2714\ufe0f `grade` & `sub_grade`\n\n> - `grade`: LC assigned loan grade\n> - `sub_grade`: LC assigned loan subgrade\n\nLet's explore the Grade and SubGrade columns that LendingClub attributes to the loans. \n\nWhat are the unique possible `grade` & `sub_grade`?","9ef07b02":"# Removing Outliers","0ea63446":"## \u2714\ufe0f `pub_rec`, `initial_list_status`, `application_type`, `mort_acc`, & `pub_rec_bankruptcies`\n\n> - `pub_rec`: Number of derogatory public records\n> - `initial_list_status`: The initial listing status of the loan. Possible values are \u2013 W, F\n> - `application_type`: Indicates whether the loan is an individual application or a joint application with two co-borrowers\n> - `mort_acc`: Number of mortgage accounts\n> - `pub_rec_bankruptcies`: Number of public record bankruptcies","7bbe0491":"Looks like the total_acc feature correlates with the mort_acc , this makes sense! Let's try this fillna() approach. We will group the dataframe by the total_acc and calculate the mean value for the mort_acc per total_acc entry. To get the result below:","3b45cb9b":"# \u2714\ufe0f XGBoost Classifier","88c8a6ce":"The title column is simply a string subcategory\/description of the purpose column. So we are going to drop the title column.","2b2b8d66":"## \u2714\ufe0f `title`\n\n> - `title`: The loan title provided by the borrower","8ce33869":"`title` will be removed because we have the `purpose` column with is generated from it.","100b225c":"## \u2714\ufe0f `loan_status`\n\n> Current status of the loan","441cf2b1":"Realistically there are too many unique job titles to try to convert this to a dummy variable feature. Let's remove that emp_title column.","f3a6cf35":"### `mort_acc`\n\nThere are many ways we could deal with this missing data. We could attempt to build a simple model to fill it in, such as a linear model, we could just fill it in based on the mean of the other columns, or you could even bin the columns into categories and then set NaN as its own category. There is no 100% correct approach! \n\nLet's review the other columsn to see which most highly correlates to mort_acc","76426a7c":"## \u2714\ufe0f `term`, `home_ownership`, `verification_status` & `purpose`\n\n> - `term`: The number of payments on the loan. Values are in months and can be either 36 or 60.\n> - `home_ownership`: The home ownership status provided by the borrower during registration or obtained from the credit report. Our values are: RENT, OWN, MORTGAGE, OTHER\n> - `verification_status`: Indicates if income was verified by LC, not verified, or if the income source was verified\n> - `purpose`: A category provided by the borrower for the loan request.","4c1f1ed8":"Charge off rates are extremely similar across all employment lengths. So we are going to drop the `emp_length` column.","16d7d2ff":"### `term`","ceccb6b1":"### `emp_length`","eb2c7a2c":"# \ud83c\udfe6 Loan Analysis Problem Statement\n\n# \ud83d\udcd1 Introduction\n\n> `LendingClub` is a US peer-to-peer lending company, headquartered in San Francisco, California. It was the first peer-to-peer lender to register its offerings as securities with the Securities and Exchange Commission (SEC), and to offer loan trading on a secondary market. `LendingClub` is the world's largest peer-to-peer lending platform.\n\n> Solving this case study will give us an idea about how real business problems are solved using EDA and Machine Learning. In this case study, we will also develop a basic understanding of risk analytics in banking and financial services and understand how data is used to minimise the risk of losing money while lending to customers.\n\n# \ud83d\udcdd Business Understanding\n\n> You work for the `LendingClub` company which specialises in lending various types of loans to urban customers. When the company receives a loan application, the company has to make a decision for loan approval based on the applicant\u2019s profile. Two types of risks are associated with the bank\u2019s decision:\n\n> - If the applicant is likely to repay the loan, then not approving the loan results in a loss of business to the company\n> - If the applicant is not likely to repay the loan, i.e. he\/she is likely to default, then approving the loan may lead to a financial loss for the company\n\n> The data given contains the information about past loan applicants and whether they \u2018defaulted\u2019 or not. The aim is to identify patterns which indicate if a person is likely to default, which may be used for takin actions such as denying the loan, reducing the amount of loan, lending (to risky applicants) at a higher interest rate, etc.\n\n> When a person applies for a loan, there are two types of decisions that could be taken by the company:\n> 1. `Loan accepted`: If the company approves the loan, there are 3 possible scenarios described below:\n    - `Fully paid`: Applicant has fully paid the loan (the principal and the interest rate)\n    - `Current`: Applicant is in the process of paying the instalments, i.e. the tenure of the loan is not yet completed. These candidates are not labelled as 'defaulted'.\n    - `Charged-off`: Applicant has not paid the instalments in due time for a long period of time, i.e. he\/she has defaulted on the loan\n> 2. `Loan rejected`: The company had rejected the loan (because the candidate does not meet their requirements etc.). Since the loan was rejected, there is no transactional history of those applicants with the company and so this data is not available with the company (and thus in this dataset)\n\n# \ud83c\udfaf Business Objectives\n> - `LendingClub` is the largest online loan marketplace, facilitating personal loans, business loans, and financing of medical procedures. Borrowers can easily access lower interest rate loans through a fast online interface. \n> - Like most other lending companies, lending loans to \u2018`risky`\u2019 applicants is the largest source of financial loss (called `credit loss`). The credit loss is the amount of money lost by the lender when the borrower refuses to pay or runs away with the money owed. In other words, borrowers who defaultcause the largest amount of loss to the lenders. In this case, the customers labelled as '`charged-off`' are the '`defaulters`'. \n> - If one is able to identify these risky loan applicants, then such loans can be reduced thereby cutting down the amount of credit loss. Identification of such applicants using EDA and machine learning is the aim of this case study. \n> - In other words, the company wants to understand the driving factors (or driver variables) behind loan default, i.e. the variables which are strong indicators of default. The company can utilise this knowledge for its portfolio and risk assessment. \n> - To develop your understanding of the domain, you are advised to independently research a little about risk analytics (understanding the types of variables and their significance should be enough).\n\n# \ud83d\udcbe Data Description\n\n----\n-----\nHere is the information on this particular data set:\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th><\/th>\n      <th>LoanStatNew<\/th>\n      <th>Description<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <th>0<\/th>\n      <td>loan_amnt<\/td>\n      <td>The listed amount of the loan applied for by the borrower. If at some point in time, the credit department reduces the loan amount, then it will be reflected in this value.<\/td>\n    <\/tr>\n    <tr>\n      <th>1<\/th>\n      <td>term<\/td>\n      <td>The number of payments on the loan. Values are in months and can be either 36 or 60.<\/td>\n    <\/tr>\n    <tr>\n      <th>2<\/th>\n      <td>int_rate<\/td>\n      <td>Interest Rate on the loan<\/td>\n    <\/tr>\n    <tr>\n      <th>3<\/th>\n      <td>installment<\/td>\n      <td>The monthly payment owed by the borrower if the loan originates.<\/td>\n    <\/tr>\n    <tr>\n      <th>4<\/th>\n      <td>grade<\/td>\n      <td>LC assigned loan grade<\/td>\n    <\/tr>\n    <tr>\n      <th>5<\/th>\n      <td>sub_grade<\/td>\n      <td>LC assigned loan subgrade<\/td>\n    <\/tr>\n    <tr>\n      <th>6<\/th>\n      <td>emp_title<\/td>\n      <td>The job title supplied by the Borrower when applying for the loan.*<\/td>\n    <\/tr>\n    <tr>\n      <th>7<\/th>\n      <td>emp_length<\/td>\n      <td>Employment length in years. Possible values are between 0 and 10 where 0 means less than one year and 10 means ten or more years.<\/td>\n    <\/tr>\n    <tr>\n      <th>8<\/th>\n      <td>home_ownership<\/td>\n      <td>The home ownership status provided by the borrower during registration\u00a0or obtained from the credit report.\u00a0Our values are: RENT, OWN, MORTGAGE, OTHER<\/td>\n    <\/tr>\n    <tr>\n      <th>9<\/th>\n      <td>annual_inc<\/td>\n      <td>The self-reported annual income provided by the borrower during registration.<\/td>\n    <\/tr>\n    <tr>\n      <th>10<\/th>\n      <td>verification_status<\/td>\n      <td>Indicates if income was verified by LC, not verified, or if the income source was verified<\/td>\n    <\/tr>\n    <tr>\n      <th>11<\/th>\n      <td>issue_d<\/td>\n      <td>The month which the loan was funded<\/td>\n    <\/tr>\n    <tr>\n      <th>12<\/th>\n      <td>loan_status<\/td>\n      <td>Current status of the loan<\/td>\n    <\/tr>\n    <tr>\n      <th>13<\/th>\n      <td>purpose<\/td>\n      <td>A category provided by the borrower for the loan request.<\/td>\n    <\/tr>\n    <tr>\n      <th>14<\/th>\n      <td>title<\/td>\n      <td>The loan title provided by the borrower<\/td>\n    <\/tr>\n    <tr>\n      <th>15<\/th>\n      <td>zip_code<\/td>\n      <td>The first 3 numbers of the zip code provided by the borrower in the loan application.<\/td>\n    <\/tr>\n    <tr>\n      <th>16<\/th>\n      <td>addr_state<\/td>\n      <td>The state provided by the borrower in the loan application<\/td>\n    <\/tr>\n    <tr>\n      <th>17<\/th>\n      <td>dti<\/td>\n      <td>A ratio calculated using the borrower\u2019s total monthly debt payments on the total debt obligations, excluding mortgage and the requested LC loan, divided by the borrower\u2019s self-reported monthly income.<\/td>\n    <\/tr>\n    <tr>\n      <th>18<\/th>\n      <td>earliest_cr_line<\/td>\n      <td>The month the borrower's earliest reported credit line was opened<\/td>\n    <\/tr>\n    <tr>\n      <th>19<\/th>\n      <td>open_acc<\/td>\n      <td>The number of open credit lines in the borrower's credit file.<\/td>\n    <\/tr>\n    <tr>\n      <th>20<\/th>\n      <td>pub_rec<\/td>\n      <td>Number of derogatory public records<\/td>\n    <\/tr>\n    <tr>\n      <th>21<\/th>\n      <td>revol_bal<\/td>\n      <td>Total credit revolving balance<\/td>\n    <\/tr>\n    <tr>\n      <th>22<\/th>\n      <td>revol_util<\/td>\n      <td>Revolving line utilization rate, or the amount of credit the borrower is using relative to all available revolving credit.<\/td>\n    <\/tr>\n    <tr>\n      <th>23<\/th>\n      <td>total_acc<\/td>\n      <td>The total number of credit lines currently in the borrower's credit file<\/td>\n    <\/tr>\n    <tr>\n      <th>24<\/th>\n      <td>initial_list_status<\/td>\n      <td>The initial listing status of the loan. Possible values are \u2013 W, F<\/td>\n    <\/tr>\n    <tr>\n      <th>25<\/th>\n      <td>application_type<\/td>\n      <td>Indicates whether the loan is an individual application or a joint application with two co-borrowers<\/td>\n    <\/tr>\n    <tr>\n      <th>26<\/th>\n      <td>mort_acc<\/td>\n      <td>Number of mortgage accounts.<\/td>\n    <\/tr>\n    <tr>\n      <th>27<\/th>\n      <td>pub_rec_bankruptcies<\/td>\n      <td>Number of public record bankruptcies<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n\n---\n----"}}