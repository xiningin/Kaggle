{"cell_type":{"ef082bc6":"code","195fdd23":"code","7663cb6b":"code","5eca445f":"code","b0931a7b":"code","183940ba":"code","30737a72":"code","aeff2575":"code","8c5be296":"code","ad499be4":"code","ea3a5694":"code","12640d4d":"code","f769d103":"code","8aa9eee4":"code","251515a6":"code","09cbbc94":"code","7b34220d":"code","1ac98e33":"code","09b48f8d":"code","ba17a6d1":"code","dc422869":"code","e668d7c0":"code","a907f331":"code","0ead6741":"code","8abea780":"code","2e4b3a42":"code","e7d8cead":"code","18317ddf":"code","70bf007e":"code","e8b1f02f":"code","a9b004e5":"code","7880099e":"code","c9a08d2d":"code","3c318d97":"code","e5de3532":"code","7a952c2b":"code","a7a5437f":"code","37321a29":"code","55a1ee3e":"code","cd44668f":"markdown","5faf5d76":"markdown","434dd190":"markdown","c8b8c642":"markdown","2c59e633":"markdown","5645d093":"markdown","52686580":"markdown","4686c9d7":"markdown","f710cef6":"markdown","5611910f":"markdown","15cb5b21":"markdown","574643e9":"markdown","f7714881":"markdown","8993d1cc":"markdown","c67f8738":"markdown","a525c3d7":"markdown","5ecb868e":"markdown","f2478ffb":"markdown"},"source":{"ef082bc6":"import math\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport datetime\nimport time\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","195fdd23":"dataset = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\")","7663cb6b":"dataset.head(5)","5eca445f":"dataset.tail(5)","b0931a7b":"dataset.info()","183940ba":"dataset.isna().sum()","30737a72":"dataset.describe()","aeff2575":"data = pd.DataFrame({'degree Celsuis': dataset['deg_C'],\n                    'Relative Humidity': dataset['relative_humidity'],\n                    'Absolute Humidity': dataset['absolute_humidity'],\n                    'Sensor 1': dataset['sensor_1'],\n                    'Sensor 2': dataset['sensor_2'],\n                    'Sensor 3': dataset['sensor_3'],\n                    'Sensor 4': dataset['sensor_4'],\n                    'Sensor 5': dataset['sensor_5'],  \n                       })","8c5be296":"target = dataset[['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]","ad499be4":"def histplot(data):\n    print(data.hist(grid=True,orientation='vertical',color='skyblue', edgecolor='red', linewidth=1, bins=30, figsize=(20,12.5)));\n    print('\\n')\n    \nhistplot(data)","ea3a5694":"print(target.hist(grid=True,orientation='vertical',color='skyblue', edgecolor='red', linewidth=1, bins=30, figsize=(20,12.5)));\nprint('\\n')","12640d4d":"scaler = MinMaxScaler()\nscaled_data =pd.DataFrame(scaler.fit_transform(data),columns=data.columns, index=data.index)","f769d103":"scaled_data.boxplot(figsize=(20,7.5),grid=True, rot=0, fontsize=15, patch_artist=True, color='skyblue');","8aa9eee4":"g = sns.PairGrid(scaled_data, diag_sharey=False, corner=True)\ng.map_lower(sns.scatterplot, color='skyblue')\ng.map_diag(sns.kdeplot, color='red')","251515a6":"plt.figure(figsize=(15,8))\nplt.grid(True)\ndataset['date_time'] = pd.to_datetime(dataset['date_time'], errors='ignore')\nsns.scatterplot(x = dataset['date_time'], y = target['target_carbon_monoxide'], alpha=0.5, color='skyblue')\nplt.title(\"Carbon Monoxide (CO) distribution over time\", size=15)","09cbbc94":"plt.figure(figsize=(15,8))\nplt.grid(True)\ndataset['date_time'] = pd.to_datetime(dataset['date_time'], errors='ignore')\nsns.scatterplot(x = dataset['date_time'], y = target['target_benzene'], alpha=0.5, color='skyblue')\nplt.title(\"Benzene (BZ) distribution over time\", size=15)","7b34220d":"plt.figure(figsize=(15,8))\nplt.grid(True)\ndataset['date_time'] = pd.to_datetime(dataset['date_time'], errors='ignore')\nsns.scatterplot(x = dataset['date_time'], y = target['target_nitrogen_oxides'], alpha=0.5, color='skyblue')\nplt.title(\"Nitrogen Oxide (NOx) distribution over time\", size=15)","1ac98e33":"plt.figure(figsize=(15,8))\nplt.grid(True)\nsns.lineplot(x=data['degree Celsuis'], y=target['target_carbon_monoxide'], color='skyblue')\nplt.title(\"Trend of Carbon Monoxide(CO) over Temperature\", size=15)","09b48f8d":"plt.figure(figsize=(15,8))\nplt.grid(True)\nsns.lineplot(x = data['degree Celsuis'], y= target['target_benzene'], color='skyblue')\nplt.title(\"Trend of Benzene(BZ) over Temperature\", size=15)","ba17a6d1":"plt.figure(figsize=(15,8))\nplt.grid(True)\nsns.lineplot(x = data['degree Celsuis'], y= target['target_nitrogen_oxides'], color='skyblue')\nplt.title(\"Trend of Nitrogen Oxide(NOx) over Temperature\", size=15)","dc422869":"plt.figure(figsize = (12, 8))\ncorr_train = dataset.corr()\nsns.heatmap(corr_train, annot = True, cmap=\"Blues\");","e668d7c0":"dataset.drop(columns = 'sensor_3', inplace = True)","a907f331":"test.drop(columns = 'sensor_3', inplace = True)","0ead6741":"dataset['date_time'] = pd.to_datetime(dataset['date_time'], errors='coerce')\n\ndataset['month'] = dataset['date_time'].dt.month\ndataset['is_winter'] = dataset['month'].isin([1, 2, 12]).astype('int')\ndataset['is_spring'] = dataset['month'].isin([3, 4, 5]).astype('int') \ndataset['is_summer'] = dataset['month'].isin([6, 7, 8]).astype('int')\ndataset['is_autumn'] = dataset['month'].isin([9, 10, 11]).astype('int')\n\ndataset['hour'] = dataset['date_time'].dt.hour\ndataset['hr'] = dataset.date_time.dt.hour*60+dataset.date_time.dt.minute\n\ndataset['working_hours'] = dataset['hour'].isin(np.arange(8, 21, 1)).astype('int')\ndataset['dayofweek'] = dataset['date_time'].dt.dayofweek\ndataset['is_weekend'] = (dataset['date_time'].dt.dayofweek >= 5).astype('int')\ndataset.drop(columns = 'hour', inplace = True)\n\ndataset['dew_point'] = dataset['deg_C'].apply(lambda x: (17.27 * x) \/ (237.7 + x)) +  dataset['absolute_humidity'].apply(lambda x: math.log (x) )\ndataset['partial_pressure'] = (dataset['deg_C'].apply(lambda x: (237.7 + x) * 286.8) * dataset['absolute_humidity']) \/ 100000\ndataset['saturated_wvd'] = (dataset['absolute_humidity'] * 100) \/ dataset['relative_humidity']","8abea780":"dataset.drop(columns = 'date_time', inplace = True)","2e4b3a42":"test['date_time'] = pd.to_datetime(test['date_time'], errors='coerce')\n\ntest['month'] = test['date_time'].dt.month\ntest['is_winter'] = test['month'].isin([1, 2, 12]).astype('int')\ntest['is_spring'] = test['month'].isin([3, 4, 5]).astype('int')\ntest['is_summer'] = test['month'].isin([6, 7, 8]).astype('int')\ntest['is_autumn'] = test['month'].isin([9, 10, 11]).astype('int')\n\ntest['hour'] = test['date_time'].dt.hour\ntest['hr'] = test.date_time.dt.hour*60+test.date_time.dt.minute\n\ntest['working_hours'] = test['hour'].isin(np.arange(8, 21, 1)).astype('int')\ntest['dayofweek'] = test['date_time'].dt.dayofweek\ntest['is_weekend'] = (test['date_time'].dt.dayofweek >= 5).astype('int')\ntest.drop(columns = 'hour', inplace = True)\n\ntest['dew_point'] = test['deg_C'].apply(lambda x: (17.27 * x) \/ (237.7 + x)) +  test['absolute_humidity'].apply(lambda x: math.log (x) )\ntest['partial_pressure'] = (test['deg_C'].apply(lambda x: (237.7 + x) * 286.8) * test['absolute_humidity']) \/ 100000\ntest['saturated_wvd'] = (test['absolute_humidity'] * 100) \/ test['relative_humidity']","e7d8cead":"test.drop(columns = 'date_time', inplace = True)","18317ddf":"import h2o\nfrom h2o.automl import H2OAutoML","70bf007e":"h2o.init()\n\nh2o_train = h2o.H2OFrame(dataset)\nh2o_test = h2o.H2OFrame(test)","e8b1f02f":"#for Carbon Monoxide (CO) :\nfeatures = [x for x in h2o_train.columns if x not in ['date_time', 'target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]\n\naml_carbon_monoxide = H2OAutoML(\n    max_runtime_secs=180,\n    stopping_metric='RMSLE',\n    sort_metric='RMSLE'\n)\n\naml_carbon_monoxide.train(x=features, y='target_carbon_monoxide', training_frame=h2o_train)","a9b004e5":"#Leaderboard for Carbon Monoxide (CO) :\naml_carbon_monoxide.leaderboard","7880099e":"#for Benzene (BZ) :\nfeatures = [x for x in h2o_train.columns if x not in ['date_time', 'target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]\n\naml_benzene = H2OAutoML(\n    max_runtime_secs=180,\n    stopping_metric='RMSLE',\n    sort_metric='RMSLE'\n)\n\naml_benzene.train(x=features, y='target_benzene', training_frame=h2o_train)","c9a08d2d":"#Leaderboard for Benzene (BZ) :\naml_benzene.leaderboard","3c318d97":"#for Nitrogen Oxide (NOx) :\nfeatures = [x for x in h2o_train.columns if x not in ['date_time', 'target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]\n\naml_nitrogen_oxide = H2OAutoML(\n    max_runtime_secs=180,\n    stopping_metric='RMSLE',\n    sort_metric='RMSLE'\n)\n\naml_nitrogen_oxide.train(x=features, y='target_nitrogen_oxides', training_frame=h2o_train)","e5de3532":"#Leaderboard for Nitrogen Oxide (NOx) :\naml_nitrogen_oxide.leaderboard","7a952c2b":"prediction_1 = aml_carbon_monoxide.predict(h2o_test)\nprediction_2 = aml_benzene.predict(h2o_test)\nprediction_3 = aml_nitrogen_oxide.predict(h2o_test)","a7a5437f":"prediction_1.set_names(['target_carbon_monoxide'])\nprediction_2.set_names(['target_benzene'])\nprediction_3.set_names(['target_nitrogen_oxides']);","37321a29":"pred_1_data = h2o.as_list(prediction_1)\npred_2_data = h2o.as_list(prediction_2)\npred_3_data = h2o.as_list(prediction_3)","55a1ee3e":"submission = pd.concat([pd.DataFrame(sample_submission['date_time']),pred_1_data, pred_2_data, pred_3_data], axis = 1)\nsubmission.to_csv('sample_submission.csv', index = False)","cd44668f":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nTabular Playground Series - Jul 2021\n<\/h1>\n<\/div>\n\n# Introduction\nIn the following notebook, We are predicting the values of air pollution measurements over time, based on basic weather information (temperature and humidity) and the input values of 5 sensors.\n\nThe three target values to predict are: target_carbon_monoxide, target_benzene, and target_nitrogen_oxides.\n\n## Dataset \nthe data is available at [this link](https:\/\/www.kaggle.com\/c\/tabular-playground-series-jul-2021\/data) and it contains these files :-\n*  train.csv - the training data, including the weather data, sensor data, and values for the 3 targets\n*  test.csv - the same format as train.csv, but without the target value; your task is to predict the value for each of these targets.\n* sample_submission.csv - a sample submission file in the correct format.\n","5faf5d76":"**for Data :**","434dd190":"### Detecting the Outliers :","c8b8c642":"### Summary :\n             1) Data Types as expected\n             2) No missing values","2c59e633":"## Exploratory Data Analysis (EDA)","5645d093":"**Importing crucial libraries**","52686580":"### Understanding Correlations :","4686c9d7":"**Target Trend over Temperature :**","f710cef6":"### Distribution Analysis :","5611910f":"**for target :**","15cb5b21":"### Feature Engineering","574643e9":"**Target Distribution over Time :**","f7714881":"### Summary :\nAs you could observe, 'sensor_3' provides different values from the other sensors with an insignificant correlation to any\nof the target values","8993d1cc":"### Prediction :","c67f8738":"**Deeper Insight into Distribution of the Data :**","a525c3d7":"**Loading the Datasets**","5ecb868e":"<center><img src=\"https:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/_images\/h2o-automl-logo.jpg\", width=\"200\", height=\"200\"><\/center>\n<h3><center>H2O AutoML Modelling<\/center><\/h3>","f2478ffb":"### References :\n\nH2O AutoML : https:\/\/www.h2o.ai\/products\/h2o-automl\/"}}