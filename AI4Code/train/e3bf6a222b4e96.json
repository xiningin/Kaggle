{"cell_type":{"07a01557":"code","8daed5cd":"code","6f1ea308":"code","0afa16c5":"code","88d6d325":"code","4424c593":"code","e18166e1":"code","1782b0fc":"code","febd3a7e":"code","359e171a":"code","ea287d9d":"code","46fc76cb":"code","8426b9a2":"code","0485a5da":"code","bc2e6c81":"code","cec16a32":"code","9da3960c":"code","274d42be":"code","265a7074":"markdown","0c6f20bd":"markdown","04117393":"markdown","0689fe3b":"markdown","97dbf8ac":"markdown","bdedd747":"markdown","00a5e01e":"markdown","041d070a":"markdown","0069b944":"markdown","f9c36a64":"markdown","de7fdbc8":"markdown","8dc6f945":"markdown"},"source":{"07a01557":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8daed5cd":"import pandas as pd\nimport numpy as np\nimport math\nimport operator\ndf = pd.read_csv(\"..\/input\/Iris.csv\")\nprint(df.head()) \ndf.shape\nfrom collections import Counter\n","6f1ea308":"from sklearn.model_selection import train_test_split\nx=df[[\"SepalLengthCm\"]]\ny=df[\"Species\"]\nx_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.33)\nlen(y_train)\n","0afa16c5":"def predict(x_train, y_train, x_test, k):\n    # create list for distances and targets\n    distances = []\n    targets = []\n    \n    for i in range(len(x_train)):\n        # first we compute the euclidean distance\n        distance = np.sqrt(np.sum(np.square(x_test - x_train.values[i, :])))\n        # add it to list of distances\n        distances.append([distance, i])\n\n\t# sort the list\n    distances = sorted(distances)\n# make a list of the k neighbors' targets\n    for i in range(k):\n        index = distances[i][1]\n        targets.append(y_train.values[index])\n\n# return most common target\n    return Counter(targets).most_common(1)[0][0]      \n        ","88d6d325":"def train(x_train,y_train):\n    return\ndef kNearestNeighbor(x_train, y_train, x_test, predictions, k):\n\t# train on the input data\n\ttrain(x_train, y_train)\n\n\t# loop over all observations\n\tfor i in range(len(x_test)):\n\t\tpredictions.append(predict(x_train, y_train, x_test.values[i, :], k))","4424c593":"predictions =[]\n\nfrom sklearn.metrics import accuracy_score\nkNearestNeighbor(x_train, y_train, x_test, predictions, 9)\n\n# transform the list into an array\npredictions = np.asarray(predictions)\n\n# evaluating accuracy\naccuracy = accuracy_score(y_test, predictions)\nfor i in range(len(x_test)):\n    print(\"Flower with sepal length\",x_test.iloc[i],\":\")\n    print(\"belongs to the kingdom\",predictions[i])\n\n\n\n","e18166e1":"print(\"accuracy score is :\",accuracy*100,\"%\")\n","1782b0fc":"from sklearn import neighbors\nfrom sklearn.metrics import mean_squared_error \nfrom math import sqrt\nimport matplotlib.pyplot as plt\n%matplotlib inline","febd3a7e":"from sklearn.model_selection import train_test_split\nx=df[[\"SepalLengthCm\"]]\ny=df[\"PetalLengthCm\"]\nx_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.33)\nlen(y_train)","359e171a":"rmse_values = [] #to store rmse values for different k\nfor k in range(20):\n    k = k+1\n    model = neighbors.KNeighborsRegressor(n_neighbors = k)\n\n    model.fit(x_train, y_train)  #fit the model\n    pred=model.predict(x_test) #make prediction on test set\n    error = sqrt(mean_squared_error(y_test,pred)) #calculate rmse\n    rmse_values.append(error) #store rmse values\n    print('RMSE value for k= ' , k , 'is:', error)\n","ea287d9d":"min(rmse_values)","46fc76cb":"import matplotlib.pyplot as plt\nplt.xlabel('Value of K')\nplt.ylabel('RMSE')\nplt.plot(range(20),rmse_values)\nplt.show()","8426b9a2":"predict=model.predict(x_test)","0485a5da":"len(predict)","bc2e6c81":"for i in range(len(predict)):\n    print(\"For sepal length:\",x_test.values[i])\n    print(\"The coressponding petal length in centimeters is:\",predict[i])","cec16a32":"import seaborn as sns\nplt.scatter(x_test,predict)\nplt.xlabel(\"Sepal Length\")\nplt.ylabel(\"Petal Length\")","9da3960c":"K=[]\nfor x in range(1,21):\n    j=1\/x\n    K.append(j)","274d42be":"plt.plot(rmse_values,K)\nplt.xlabel(\"1\/K\")\nplt.ylabel(\"RMSE Values\")","265a7074":"## Importing the model for training and testing splitting","0c6f20bd":"## Predicting the Petal length from Sepal Length","04117393":"# Predictions","0689fe3b":"# Developing KNN from scratch","97dbf8ac":"# Minimum value of RMSE is 0.7899 corresponding to K=11\n# Also, it is verified that both the KNN models that is KNN from scratch and KNN from inbuilt model,predicts the same value of K=11","bdedd747":"# Plot between RMSE and K","00a5e01e":"# Checking for the accuracy score of our model","041d070a":"# A plot between RMSE and 1\/K","0069b944":"## Important libraries are loaded along with the Iris Species dataset","f9c36a64":"# Here, the value of K=9, we obtained from the graph between error and K values","de7fdbc8":"## Now, we will predict the species using the x_test data","8dc6f945":"# It is clear that the min value of RMSE is coressponding to approx 10."}}