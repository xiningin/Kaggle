{"cell_type":{"23104897":"code","d0a7498a":"code","85c6e1b7":"code","bd64b2bd":"code","f753fd62":"code","09191b7f":"code","76d2ce93":"code","5e83b9d2":"code","8faa1cbc":"code","0388bac5":"code","fbd38844":"code","15396a66":"markdown","d1832be5":"markdown","5fbe5716":"markdown","f6a915c8":"markdown","75c898b1":"markdown","94cf16ff":"markdown","5f953e6a":"markdown","694319e7":"markdown","277c2613":"markdown","92144745":"markdown","7b2c62b6":"markdown","3b66b1ec":"markdown","c2050a69":"markdown"},"source":{"23104897":"#Precisamos fazer o download do ambiente de Connect X:\n# Vamos precisar de um kaggle-enviroments customizado para a avalia\u00e7\u00e3o.\n!pip install git+https:\/\/github.com\/matheusgmaia\/kaggle-environments\n    ","d0a7498a":"#Criar ambiente\nfrom kaggle_environments import evaluate, make, utils\n\nenv = make(\"connectx\", debug=True)\nenv.render()","85c6e1b7":"# Exemplo de agente. Esse agente escolhe de maneira aleat\u00f3ria uma coluna que n\u00e3o esteja completa\nimport random\ndef my_agent(obs, cfg): #recebe o estado atual do jogo e a configura\u00e7\u00e3o do jogo\n    coluna = random.choice([c for c in range(cfg.columns) if obs.board[c] == 0])\n    return coluna","bd64b2bd":"env.reset()\nenv.run([my_agent, \"random\"]) #Agente definido em my_agent versus angente rand\u00f4mico.\nenv.render(mode=\"ipython\", width=500, height=450)","f753fd62":"# Play as first position against random agent.\ntrainer = env.train([None, \"random\"])\n\nobservation = trainer.reset()\n\nwhile not env.done:\n    my_action = my_agent(observation, env.configuration)\n    print(\"A\u00e7\u00e3o do seu agente: Coluna\", my_action+1)\n    observation, reward, done, info = trainer.step(my_action)\n    env.render(mode=\"ipython\", width=100, height=90, header=False, controls=False)\nenv.render()","09191b7f":"# \"None\" represents which agent you'll manually play as (first or second player).\nenv.play([None, my_agent], width=500, height=450) #Altere \"rules\" por my_agent para jogar contra o seu agente","76d2ce93":"#Sua vez\ndef my_agent(obs, cfg):\n    #print(obs)\n    #print(cfg)\n    return 0","5e83b9d2":"def mean_win_draw(rewards):\n    return sum( 1 for r in rewards if (r[0] == 1 or r[0] == 0.)) \/ len(rewards)\n\n# Run multiple episodes to estimate its performance.\nvs_random = mean_win_draw(evaluate(\"connectx\", [my_agent, \"random\"], num_episodes=10))\nprint(\"My Agent vs Random Agent:\", vs_random)\n\nvs_negamax = mean_win_draw(evaluate(\"connectx\", [my_agent, \"negamax\"], num_episodes=10))\nprint(\"My Agent vs Negamax Agent:\", vs_negamax)\n\nvs_rules = mean_win_draw(evaluate(\"connectx\", [my_agent, \"rules\"], num_episodes=10))\nprint(\"My Agent vs Rule Agent:\", vs_rules)\n\nvs_greedy = mean_win_draw(evaluate(\"connectx\", [my_agent, \"greedy\"], num_episodes=10))\nprint(\"My Agent vs Greedy Agent:\", vs_greedy)","8faa1cbc":"import csv\n\nseu_nome = \"SEU_NOME\"\n\nrows = [['Id', 'Predicted'],['random',vs_random],[ 'negamax', vs_negamax],[ 'rules', vs_rules],[ 'greedy', vs_greedy]]\nf = open(seu_nome+'-ConnectX.csv', 'w')\nwith f:\n    writer = csv.writer(f)\n    for row in rows:\n        writer.writerow(row)","0388bac5":"import inspect\nimport os\n\ndef write_agent_to_file(function, file):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(inspect.getsource(function))\n        print(function, \"written to\", file)\n\nwrite_agent_to_file(my_agent, \"submission.py\")","fbd38844":"# Note: Stdout replacement is a temporary workaround.\nimport sys\nout = sys.stdout\nsubmission = utils.read_file(\"\/kaggle\/working\/submission.py\")\nagent = utils.get_last_callable(submission)\nsys.stdout = out\n\nenv = make(\"connectx\", debug=True)\nenv.run([agent, agent])\nprint(\"Success!\" if env.state[0].status == env.state[1].status == \"DONE\" else \"Failed...\")","15396a66":"# Validar Submiss\u00e3o para Connect-X Original\nPlay your submission against itself.  This is the first episode the competition will run to weed out erroneous agents.\n\nWhy validate? This roughly verifies that your submission is fully encapsulated and can be run remotely.","d1832be5":"# Submiss\u00e3o para O Connect-X Virtus Up","5fbe5716":"# Debug\/Train o seu Agent.\n\nAqui \u00e9 poss\u00edvel ver como o seu agente funciona a cada etapa.","f6a915c8":"# Avalie o seu Agente\n\nA submiss\u00e3o na competi\u00e7\u00e3o do kaggle ser\u00e1 o resultado do seu agente contra 4 agentes previamente definidos.\nPode utilizar ","75c898b1":"# Setup do Notebook\n\n## IMPORTATE: Habilite a internet no painel lateral. Settings\/Internet\/On","94cf16ff":"# Testar o seu Agente\n\nEste trecho simula o comportamento do agente contra um agente rand\u00f4mico.","5f953e6a":"# Sua vez\n\n* Redefina o seu agente com as t\u00e9cnicas de IA cl\u00e1ssicas aprendidas durante o curso. \n* \u00c9 fundamental entender bem como funciona o jogo e como interagir com ele.\n* Utilize as fun\u00e7\u00f5es de teste e avalia\u00e7\u00e3o para te ajudar. \n* Consulte Tutoriais e discurss\u00f5es (N\u00e3o copie c\u00f3digo).","694319e7":"# Submiss\u00e3o para Connect-X Original\n\n1. Commit this kernel.\n2. View the commited version.\n3. Go to \"Data\" section and find submission.py file.\n4. Click \"Submit to Competition\"\n5. Go to [My Submissions](https:\/\/kaggle.com\/c\/connectx\/submissions) to view your score and episodes being played.","277c2613":"# Jogue voc\u00ea mesmo\nClick on any column to place a checker there (\"manually select action\").\n\nVoc\u00ea pode jogar contra o seu agente ou contra qualquer um dos 4 agentes j\u00e1 definidos (random, negamax, rules, greedy).","92144745":"1. Em Data\/output voc\u00ea pode baixar o .csv com o seu resultado atual. Isso est\u00e1 acess\u00edvel no painel lateral ou ap\u00f3s realizar um commit no kernel. \n2. Submeta o csv na p\u00e1gina da competi\u00e7\u00e3o.\n\nNo fim da competi\u00e7\u00e3o os monitores v\u00e3o fazer um campeonato com todos os agentes.","7b2c62b6":"# Exemplo de Agente\n\nTo create the submission, an agent function should be fully encapsulated (no external dependencies).  \n\nWhen your agent is being evaluated against others, it will not have access to the Kaggle docker image.  Only the following can be imported: Python Standard Library Modules, gym, numpy, scipy, pytorch (1.3.1, cpu only), and more may be added later.\n\n\/\/\/\/\n\n\nPara a submiss\u00e3o funcionar o agente deve funcionar de maneira encapsulada (sem depend\u00eancias externas).\n\n(Competi\u00e7\u00e3o Oficial) Quando o seu seu agente for avaliado em rela\u00e7\u00e3o a outros agentes n\u00e3o teremos acesso \u00e1 sua imagem docker do Kaggle. S\u00f3 as seguintes bibliotecas podem ser importadas: Python Standard Library Modules, gym, numpy, scipy, pytorch (1.3.1, cpu only), e outras podem ser adicionadas no futuro.\n\n(Competi\u00e7\u00e3o Virtus Up) Pode utilizar bibliotecas diferentes.","3b66b1ec":"# Notebook template para a competi\u00e7\u00e3o Connect X do Virtus-UP.\n\nNessa competi\u00e7\u00e3o vamos criar agentes inteligentes para o jogo connect X. Vamos utilizar o mesmo ambiente utilizado na competi\u00e7\u00e3o https:\/\/www.kaggle.com\/c\/connectx\/, essa competi\u00e7\u00e3o ainda est\u00e1 em andamento.\n\nPara a nossa competi\u00e7\u00e3o n\u00e3o vamos permitir apenas t\u00e9cnicas da IA cl\u00e1ssica.\n\nLeia com aten\u00e7\u00e3o os textos. Qualquer d\u00favida crie uma discurs\u00e3o na p\u00e1gina da competi\u00e7\u00e3o ou mande mensagem para os monitores.","c2050a69":"# Submiss\u00e3o Connect-X Original\n\nComo gerar um arquivo .py do seu agente.\n\nVamos pedir o arquivo do notebook (.ipynb) ou o arquivo python (.py) em um formul\u00e1rio.\n\nCaso queira competir na competi\u00e7\u00e3o  original.\n\n\n"}}