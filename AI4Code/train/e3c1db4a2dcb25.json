{"cell_type":{"e80391e3":"code","845404dd":"code","4894190d":"code","bd25ba53":"code","55ef2db0":"code","7cdbf32b":"code","d72ac091":"code","d347622e":"code","24fc4ac8":"code","f636cafd":"code","5893d276":"code","bf6c1bf1":"code","870001fc":"code","ada46616":"code","0f9c6948":"code","640b7472":"code","87418abb":"code","90aaccf2":"code","1db08d4c":"code","5a73ff1c":"code","3fd481a4":"code","e444a658":"markdown"},"source":{"e80391e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","845404dd":"#importing the necessary libraries\nfrom sklearn import datasets\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","4894190d":"#loading the iris database\nIris = datasets.load_iris()","bd25ba53":"Iris.data","55ef2db0":"Iris.target","7cdbf32b":"#dividing the data into training and testing\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(Iris.data, Iris.target, test_size=0.3)","d72ac091":"X_train.shape, Y_train.shape","d347622e":"Y_train.shape, Y_test.shape","24fc4ac8":"from sklearn.neighbors import KNeighborsClassifier\n#specifying the k parameter (n_neighbors = 3)\nknn = KNeighborsClassifier(n_neighbors=3)","f636cafd":"#Training the algorithm\nknn.fit(X_train, Y_train)","5893d276":"#predicting the data\nresult = knn.predict(X_test)\nresult","bf6c1bf1":"#validation metrics\nfrom sklearn import metrics\nprint(metrics.classification_report(Y_test, result))","870001fc":"#confusion matrix\npd.crosstab(Y_test, result, rownames=['real value'], colnames=['predicted value'],margins=True)","ada46616":"#using cross validation\nscore = cross_val_score(knn, X_test,result,cv=10)\nscore","0f9c6948":"score.mean()","640b7472":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler","87418abb":"#!pip install category_encoders","90aaccf2":"#using Pipeline\npip_1 = Pipeline([\n    ('scaler', StandardScaler()),\n    ('knn', KNeighborsClassifier())\n])","1db08d4c":"#training the data\npip_1.fit(X_train, Y_train)","5a73ff1c":"#predicting the data\npredict = pip_1.predict(X_test)\npredict","3fd481a4":"#checking the accuracy of the result\npip_1.score(X_test, Y_test)","e444a658":"**Using Pipeline to analyze data**"}}