{"cell_type":{"565174c7":"code","16ab4133":"code","df0523a5":"code","97e996e0":"code","1c1e9e17":"code","efd9fd84":"code","6be65462":"code","f249571f":"code","1eae5412":"code","fd1d3f0b":"code","16787163":"code","2e347f26":"code","ea15631c":"code","82b68439":"markdown","aac6bc55":"markdown","ff45bc5a":"markdown","bbd717e4":"markdown","6f7c1739":"markdown","b55532ae":"markdown"},"source":{"565174c7":"!pip install orbit-ml","16ab4133":"%matplotlib inline\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport orbit\nfrom orbit.models import LGT, DLT\nfrom orbit.diagnostics.backtest import BackTester, TimeSeriesSplitter\nfrom orbit.diagnostics.plot import plot_bt_predictions\nfrom orbit.diagnostics.metrics import smape, wmape\nfrom orbit.utils.dataset import load_iclaims\n\n\nimport warnings\nwarnings.filterwarnings('ignore')","df0523a5":"data = load_iclaims()\ndata.dtypes","97e996e0":"# configs\nmin_train_len = 380 # minimal length of window length\nforecast_len = 20 # length forecast window\nincremental_len = 20 # step length for moving forward","1c1e9e17":"ex_splitter = TimeSeriesSplitter(df=data,\n                                 min_train_len=min_train_len,\n                                 incremental_len=incremental_len,\n                                 forecast_len=forecast_len,\n                                 window_type='expanding',\n                                 date_col='week')","efd9fd84":"print(ex_splitter)","6be65462":"# configs\nmin_train_len = 380 # in case of rolling window, this specify the length of window length\nforecast_len = 20 # length forecast window\nincremental_len = 20 # step length for moving forward","f249571f":"roll_splitter = TimeSeriesSplitter(data,\n                                   min_train_len=min_train_len,\n                                   incremental_len=incremental_len,\n                                   forecast_len=forecast_len,\n                                   window_type='rolling', date_col='week')","1eae5412":"print(roll_splitter)","fd1d3f0b":"# instantiate a model\ndlt = DLT(\n    date_col='week',\n    response_col='claims',\n    regressor_col=['trend.unemploy', 'trend.filling', 'trend.job'],\n    seasonality=52,\n    estimator='stan-map',\n)\n\n# configs\nmin_train_len = 100\nforecast_len = 20\nincremental_len = 100\nwindow_type = 'expanding'\n\nbt = BackTester(\n    model=dlt,\n    df=data,\n    min_train_len=min_train_len,\n    incremental_len=incremental_len,\n    forecast_len=forecast_len,\n    window_type=window_type,\n)","16787163":"# bt.fit_predict()","2e347f26":"# predicted_df = bt.get_predicted_df()\n# predicted_df.head()","ea15631c":"# plot_bt_predictions(predicted_df, metrics=smape, ncol=2, include_vline=True);","82b68439":"## Data\nTo illustrate the usage of KTR, consider the daily series of electricity demand in Turkey from the 2000 - 2008.","aac6bc55":"## Create a BackTester","ff45bc5a":"## Backtest fit and predict","bbd717e4":"## Final","6f7c1739":"## Rolling window","b55532ae":"## References\n- https:\/\/orbit-ml.readthedocs.io\/\n\n\nNg, Wang and Dai (2021) Bayesian Time Varying Coefficient Model with Applications to Marketing Mix Modeling, arXiv preprint arXiv:2106.03322\n\nHastie, Trevor and Tibshirani, Robert. (1990), Generalized Additive Models, New York: Chapman and Hall.\n\nWood, S. N. (2006), Generalized Additive Models: an introduction with R, Boca Raton: Chapman & Hall\/CRC\n\nHarvey, C. A. (1989). Forecasting, Structural Time Series and the Kalman Filter, Cambridge University Press.\n\nDurbin, J., Koopman, S. J.. (2001). Time Series Analysis by State Space Methods, Oxford Statistical Science Series"}}