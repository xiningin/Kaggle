{"cell_type":{"cc82d7d5":"code","9e0e8b15":"code","5f344a02":"code","8af197ed":"code","56a3205b":"code","ba7b489e":"code","2137e134":"code","77a89e2b":"code","9539cc87":"code","58137f57":"code","df552554":"code","2464c2b6":"code","db149100":"code","7c85539c":"code","adf5e42b":"code","b0b00196":"code","dda32f47":"code","f67e70ee":"code","7e9f93a2":"code","1b18c75e":"code","b2d57caf":"code","940ad975":"markdown","1063ee54":"markdown","4a134399":"markdown","4d44c68e":"markdown","2e04f9c4":"markdown","a228a4e5":"markdown","e448b797":"markdown","e8b0c179":"markdown","bd2d06fd":"markdown","5aa1efb2":"markdown","edbad279":"markdown","7bea642c":"markdown","19cddb12":"markdown"},"source":{"cc82d7d5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd\n# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as dt\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e0e8b15":"data=pd.read_csv(\"\/kaggle\/input\/covid19-in-india\/covid_19_india.csv\")\ndata.head()","5f344a02":"data['Date']=pd.to_datetime(data['Date'],dayfirst=True)","8af197ed":"data['Month_Num']=pd.DatetimeIndex(data['Date']).month","56a3205b":"data['Month']=0\n\ndata.loc[data['Month_Num']==1,'Month']='Jan'\ndata.loc[data['Month_Num']==2,'Month']='Feb'\ndata.loc[data['Month_Num']==3,'Month']='Mar'\ndata.loc[data['Month_Num']==4,'Month']='April'\ndata.loc[data['Month_Num']==5,'Month']='May'","ba7b489e":"data.isnull().sum()","2137e134":"data['State\/UnionTerritory'].value_counts()","77a89e2b":"import re\ndata=data.replace(to_replace='\\#',value='', regex=True)\ndata['State\/UnionTerritory'].value_counts()","9539cc87":"data_dict=data['State\/UnionTerritory'].value_counts().to_dict()\ndata_dict","58137f57":"dict={}\nfor i in data_dict:\n    data_loc=data[data['State\/UnionTerritory'].str.contains(i)]\n    #li.append(data_loc[\"Confirmed\"].max())\n    dict.update({i:data_loc[\"Confirmed\"].max()})\n    \ndict","df552554":"dict_keys=dict.keys()\nprint(dict_keys,'\\n')\n\ndict_values=dict.values()\nprint(dict_values)","2464c2b6":"plt.figure(figsize=(20,7))\nax=plt.bar(dict_keys,dict_values)\nplt.xticks(rotation=90)\nplt.title('Confirmed cases statewise',fontsize=30)\nplt.xlabel('States',fontsize=30)\nplt.ylabel('Number of Cases',fontsize=30)","db149100":"#Displaying deaths\ndict={}\nfor i in data_dict:\n    data_loc=data[data['State\/UnionTerritory'].str.contains(i)]\n    #li.append(data_loc[\"Confirmed\"].max())\n    dict.update({i:data_loc[\"Deaths\"].max()})\n    \ndict_keys=dict.keys()\nprint(dict_keys)\n\ndict_values=dict.values()\nprint(dict_values)\n\nplt.figure(figsize=(20,7))\nax=plt.bar(dict_keys,dict_values)\nplt.xticks(rotation=90)\n\nplt.title('Death cases statewise',fontsize=30)\nplt.xlabel('States',fontsize=30)\nplt.ylabel('Number of Deaths',fontsize=30)","7c85539c":"fig = plt.figure(figsize=(10,10))\nconf_per_state = data.groupby('State\/UnionTerritory')['Confirmed'].max().sort_values(ascending=False)\n#explode = conf_per_country\nconf_per_state.plot(kind=\"pie\",title='Percentage of confirmed cases per country',autopct='%1.1f%%', shadow= True)\n","adf5e42b":"data1=data.groupby('State\/UnionTerritory')['Confirmed','Cured','Deaths'].max().sort_values('Confirmed',ascending=False)\ndata1=data1.reset_index()\ndata1","b0b00196":"f, ax = plt.subplots(figsize=(10, 10))\n\nbar1=sns.barplot(x=\"Confirmed\",y=\"State\/UnionTerritory\",data=data1,\n            label=\"Confirmed\", color=\"b\")\n\n\nbar2=sns.barplot(x=\"Cured\", y=\"State\/UnionTerritory\", data=data1,\n            label=\"Cured\", color=\"g\")\n\n\nbar3=sns.barplot(x=\"Deaths\", y=\"State\/UnionTerritory\", data=data1,\n            label=\"Deaths\", color=\"r\")\n\nax.legend(loc=4, ncol = 1)\nplt.show()","dda32f47":"\ndata1[\"Recovery Rate\"]=data1['Cured']\/data1[\"Confirmed\"]\ndata1['Death Rate']=data1['Deaths']\/data1['Confirmed']","f67e70ee":"data1","7e9f93a2":"\nprint('Recovery Rate=',data1['Recovery Rate'].mean()*100,\"%\")\nprint('Death Rate=',data1['Death Rate'].mean()*100,\"%\")","1b18c75e":"f,ax= plt.subplots(figsize=(15,10))\n#fig, ax = plt.subplots(6, 6,figsize=(15,5))\n#for i in range(6):\n\n#for j in range(6):\n#for i in dict:\ndata_state=data[data['State\/UnionTerritory'].str.contains('Rajasthan')]\ndata_state[\"Recovery Rate\"]=data_state['Cured']\/data_state[\"Confirmed\"]\ndata_state['Death Rate']=data_state['Deaths']\/data_state['Confirmed']\n   \nplt.plot(data_state['Date'],data_state['Recovery Rate'], marker='o',label=\"Recovery Rate\")\nplt.plot(data_state['Date'],data_state['Death Rate'], marker='*',label=\"Death Rate\")\nplt.ylabel('Rate',fontsize=20)\nplt.xlabel('Date',fontsize=20)\nplt.xticks(rotation=90)\nplt.title('Recovery and Death Rate graph of state Rajasthan',fontsize=20)\nax.legend(loc='upper left',fontsize=20)\n\n#data_state.tail()","b2d57caf":"f,ax= plt.subplots(figsize=(15,10))\n#fig, ax = plt.subplots(6, 6,figsize=(15,5))\n#for i in range(6):\n\n#for j in range(6):\n#for i in dict:\n#data_state=data[data['State\/UnionTerritory'].str.contains('Rajasthan')]\n#data_state[\"Recovery Rate\"]=data_state['Cured']\/data_state[\"Confirmed\"]\n#data_state['Death Rate']=data_state['Deaths']\/data_state['Confirmed']\n   \nplt.plot(data_state['Date'],data_state['Confirmed'], marker='o',label=\"Confirmed\")\nplt.plot(data_state['Date'],data_state['Deaths'], marker='*',label=\"Deaths\")\nplt.plot(data_state['Date'],data_state['Cured'], marker='v',label=\"Cured\")\n\nplt.ylabel('Rate',fontsize=30)\nplt.xlabel('Date',fontsize=30)\nplt.xticks(rotation=90)\nplt.title('Confirmed,Deaths and Cured  graph of state Rajasthan',fontsize=20)\nax.legend(loc='upper left',fontsize=20)","940ad975":"***If you like it, please do upvote it! It will engourage me to contribute more!***","1063ee54":"**Visualising total number of Confirmed, Death and Cured cases of each state **","4a134399":"**Pie chart for confirmed cases in each state**","4d44c68e":"**Average Recovery and Death rate of India, i.e. average of all the states\n**","2e04f9c4":"**Converting the date time and extracting month from date to use it in future**","a228a4e5":"**Checking if there is any missing or null values**","e448b797":"**Confirmed,Deaths and Cured  graph of state Rajasthan**","e8b0c179":"**Visualising Confirmed cases of each state**","bd2d06fd":"**Visualising Deaths of each state**","5aa1efb2":"**Overall Death and Recovery rate of all states with total numbers of Confirmed,Curedand Death cases.\n**","edbad279":"**Cleaning of dataset, as you can see in Nagaland# and Jharkand# **","7bea642c":"**Recovery and Death Rate graph of state Rajasthan**","19cddb12":"**Extracting the total number of cases from each state, taking maximum because the dataset is cumulative**"}}