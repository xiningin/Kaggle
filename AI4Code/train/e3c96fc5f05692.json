{"cell_type":{"b5642553":"code","2bdfbc6e":"code","9d78a9bb":"code","a9cd0548":"code","5a445d81":"code","f5c5ff28":"markdown"},"source":{"b5642553":"# Libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport cv2","2bdfbc6e":"images_gray = np.load('..\/input\/l\/gray_scale.npy')\nimages_lab = np.load('..\/input\/ab\/ab\/ab1.npy')","9d78a9bb":"# gray_scale.npy contains 25k gray scale images and ab1.npy and ab2.npy contains 10k and ab3.npy contains 5k each of ab components\n# of LAB color space images.\n# So instead of running the code on every 25k images let's just test it on any\n# 1 of the images\n\nimage_gray = images_gray[0]\nimage_lab = images_lab[0]","a9cd0548":"# Recreating RGB image using the L and AB from the dataset\n\n# Initializing with zeros ( or any random number)\nimg = np.zeros((224, 224, 3))\nimg[:, :, 0] = image_gray\nimg[:, :, 1:] = image_lab\n\n# Changing the data type of the img array to 'uint8'\n# Refer the above markdown for it.\nimg = img.astype('uint8')","5a445d81":"# Now if you check img values you'd see that the first dimension \n# doesn't have values between 0-1. infact it ranges till 255\nimg_ = cv2.cvtColor(img, cv2.COLOR_LAB2RGB)\n\n\nprint('Gray scale image')\nplt.imshow(image_gray)\nplt.show()\n\nprint('Recreated image')\nplt.imshow(img_)\nplt.show()","f5c5ff28":"<html>\n    <head>\n<h4>Check this <a href = \"https:\/\/github.com\/llSourcell\/Object_Detection_demo_LIVE\/issues\/6#issuecomment-428078042\">Common error<\/a> generated in OpenCV. skimage doesn't show such errors, but output is not generated as expected, so solving the error is the only solution, not package.<\/h4>\n    <\/head>   \n<\/html>    "}}