{"cell_type":{"125e4c2c":"code","fc214e57":"code","1a25b8ab":"code","bd1df272":"code","64fd8e3d":"code","c4207a3e":"code","d225bb1d":"code","a6d3068b":"code","bc615905":"code","00a1ebf2":"code","83c40d19":"markdown","7e9b4f20":"markdown"},"source":{"125e4c2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc214e57":"import pandas as pd\nimport numpy as np\nimport multiprocessing\nimport warnings\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nimport gc\nfrom time import time\nimport datetime\nfrom tqdm import tqdm_notebook\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.metrics import log_loss\nwarnings.simplefilter('ignore')\nsns.set()\n%matplotlib inline","1a25b8ab":"%%time\nfiles = ['..\/input\/lish-moa\/test_features.csv', \n         '..\/input\/lish-moa\/train_targets_scored.csv',\n         '..\/input\/lish-moa\/train_features.csv',\n         '..\/input\/lish-moa\/train_targets_nonscored.csv',\n         '..\/input\/lish-moa\/sample_submission.csv']\n\ndef load_data(file):\n    return pd.read_csv(file)\n\nwith multiprocessing.Pool() as pool:\n    test, train_target, train, train_nonscored, sub = pool.map(load_data, files)","bd1df272":"print('Number of records:',len(train_target))\ntargets = [col for col in train_target.columns if col != 'sig_id']\nprint('Number of unique labels:', len(targets))\nfeatures = [col for col in train.columns if col != 'sig_id']\nprint('Number of features:', len(features))","64fd8e3d":"for feature in ['cp_type', 'cp_dose']:\n    le = LabelEncoder()\n    le.fit(list(train[feature].astype(str).values) + list(test[feature].astype(str).values))\n    train[feature] = le.transform(list(train[feature].astype(str).values))\n    test[feature] = le.transform(list(test[feature].astype(str).values))\n","c4207a3e":"X = train[features]","d225bb1d":"params = {'num_leaves': 491,\n          'min_child_weight': 0.03,\n          'feature_fraction': 0.3,\n          'bagging_fraction': 0.4,\n          'min_data_in_leaf': 106,\n          'objective': 'binary',\n          'max_depth': -1,\n          'learning_rate': 0.01,\n          \"boosting_type\": \"gbdt\",\n          \"bagging_seed\": 11,\n          \"metric\": 'binary_logloss',\n          \"verbosity\": 0,\n          'reg_alpha': 0.4,\n          'reg_lambda': 0.6,\n          'random_state': 47\n         }","a6d3068b":"accumulative_loss = 0\nskf = StratifiedKFold(n_splits=3, random_state=47, shuffle=True)\n\n# 206 different models. One for each label\nfor model, target in enumerate(targets, 1):\n    y = train_target[target]\n    start_time = time()\n    preds = np.zeros(test.shape[0])\n    oof = np.zeros(X.shape[0])\n\n    for trn_idx, test_idx in skf.split(X, y):\n        trn_data = lgb.Dataset(X.iloc[trn_idx], label=y.iloc[trn_idx])\n        val_data = lgb.Dataset(X.iloc[test_idx], label=y.iloc[test_idx])\n        clf = lgb.train(params, trn_data, 10000, valid_sets = [trn_data, val_data], verbose_eval=0, early_stopping_rounds=5)\n        oof[test_idx] = clf.predict(X.iloc[test_idx])\n        preds += clf.predict(test[features]) \/ skf.n_splits\n\n    sub[target] = preds\n    loss = log_loss(y, oof)\n    accumulative_loss += loss\n    print('[{}] Model: {} logloss: {:.3f}'.format(str(datetime.timedelta(seconds=time() - start_time))[:7], model, loss))\n\n    del preds, oof, start_time, y, loss\n    gc.collect();","bc615905":"print('Overall mean loss: {:.3f}'.format(accumulative_loss \/ 206))","00a1ebf2":"sub.to_csv('submission.csv', index=False)","83c40d19":"### We know the current gradient boosting models don't support well the multiclass classification problems, so we will fit one model for each of the target level and see how is the performance.","7e9b4f20":"### As we can see, The above solution gave some good results with loss ~0.02 but it's quite slow and the models  are not connetected as well, we will try to use Deep learning Algos to solve this problems so that it's fast and conected among themselves."}}