{"cell_type":{"5c2fbf38":"code","29b5dd63":"code","edf23b4e":"code","7e2848b3":"code","0b148503":"code","e82f3524":"code","a0795798":"code","492f6057":"code","1e2503dd":"code","e839f615":"code","f6c83463":"code","7813b04a":"code","fa9799ae":"code","53ba5f64":"code","613edfbb":"code","a1884df0":"code","c43b917b":"code","b46c4a0e":"code","dbf21549":"code","63266b2e":"code","4325a0c8":"code","075c028f":"code","74939ebe":"code","3e6324a0":"code","4ee3d254":"code","1dd214fc":"code","8977dfa8":"code","18f9809e":"code","970dac61":"markdown","29abb7fb":"markdown","29ad20cf":"markdown","2920a3e2":"markdown","3ebb3d7d":"markdown","4275b78c":"markdown","6144c85d":"markdown","562173f3":"markdown"},"source":{"5c2fbf38":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","29b5dd63":"churn_data = pd.read_csv(\"\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv\")\nchurn_data.head()","edf23b4e":"churn_data.describe()","7e2848b3":"import matplotlib.pyplot as plt\n%matplotlib inline","0b148503":"churn_data.hist(bins=50,figsize=(20,15))","e82f3524":"#There are two string cols Geography and gender. Both are having less cardinality and also they are not in any range to set label encoding.\n#Hence going for one hot\n\nfeature_cols = ['CreditScore','Geography','Gender','Age','Tenure','Balance','NumOfProducts','HasCrCard','IsActiveMember','EstimatedSalary','Exited']\n\nchurn_data1 = churn_data[feature_cols]\n\nfrom sklearn.preprocessing import OneHotEncoder\ns1 = (churn_data1.dtypes == 'object')\nobject_cols1 = list(s1[s1].index)\nprint(object_cols1)\n\none_hot = OneHotEncoder(handle_unknown='ignore', sparse=False)\n\nchurn_OH = pd.DataFrame(one_hot.fit_transform(churn_data1[object_cols1]))\n\nchurn_OH.index = churn_data1.index\n\n\nnum_churn_OH = churn_data1.drop(object_cols1,axis=1)\n\nOH_churn_data = pd.concat([num_churn_OH,churn_OH],axis=1)\n\nOH_churn_data.head()","a0795798":"from sklearn.model_selection import StratifiedShuffleSplit\nsplit = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\nfor train_index, test_index in split.split(OH_churn_data,OH_churn_data['NumOfProducts']):\n    strat_train_set = OH_churn_data.loc[train_index]\n    strat_test_set = OH_churn_data.loc[test_index]","492f6057":"corr_matrix = churn_data.corr()\ncorr_matrix['Exited'].sort_values(ascending=True)","1e2503dd":"from pandas.plotting import scatter_matrix\nattributes = ['Exited','IsActiveMember','HasCrCard','NumOfProducts','CreditScore','Tenure','EstimatedSalary']\nscatter_matrix(churn_data[attributes],figsize=(12,8))","e839f615":"y_strat_train = strat_train_set.Exited\nstrat_train_set.drop(['Exited'],axis=1,inplace=True)\n","f6c83463":"strat_train_set.head()","7813b04a":"y_strat_test = strat_test_set.Exited\nstrat_test_set.drop(['Exited'],axis=1,inplace=True)\nstrat_test_set.head()","fa9799ae":"import lightgbm as lgb\nclf = lgb.LGBMClassifier(n_estimators=100,learning_rate=0.05,max_depth=7,num_leaves=15)\nclf.fit(strat_train_set, y_strat_train)","53ba5f64":"y_pred=clf.predict(strat_test_set)","613edfbb":"from sklearn.metrics import accuracy_score\naccuracy=accuracy_score(y_pred, y_strat_test)\nprint('LightGBM Model accuracy score: {0:0.4f}'.format(accuracy_score(y_strat_test, y_pred)))","a1884df0":"#Confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncmlg = confusion_matrix(y_strat_test,y_pred)\n#Accuracy\nfrom sklearn.metrics import accuracy_score\naccuracylg=accuracy_score(y_pred,y_strat_test)","c43b917b":"print(cmlg)\nprint(accuracylg)\nprint(\"accuracy_classfier = \", (cmlg[0][0] \n                                + cmlg[1][1])*100\/2000,\"%\")","b46c4a0e":"from xgboost import XGBRegressor\nmy_model = XGBRegressor(n_estimators=50, learning_rate=0.05, max_depth=5)\nmy_model.fit(strat_train_set, y_strat_train)","dbf21549":"prediction1 = my_model.predict(strat_test_set)\ny_strat_test\nlen(y_strat_test)","63266b2e":"from sklearn import metrics\n\nscore = metrics.roc_auc_score(y_strat_test, prediction1)\n\nprint(f\"Test AUC score: {score}\")\n\n","4325a0c8":"prediction_c = prediction1\nfor i in range(0,len(prediction_c)):\n    if prediction_c[i]>=.5:       # setting threshold to .5\n       prediction_c[i]=1\n    else:  \n       prediction_c[i]=0\n\nprediction_c","075c028f":"#Confusion matrix\n\ncm = confusion_matrix(y_strat_test,prediction_c)\n#Accuracy\n\naccuracy=accuracy_score(prediction_c,y_strat_test)","74939ebe":"print(cm)\nprint(accuracy)\nprint(\"accuracy = \", (cm[0][0] + cm[1][1])*100\/2000,\"%\")","3e6324a0":"from xgboost import XGBClassifier\nmy_model1 = XGBClassifier(n_estimators=50, learning_rate=0.05, max_depth=5)\nmy_model1.fit(strat_train_set,y_strat_train)\n","4ee3d254":"pred_class = my_model1.predict(strat_test_set)\npred_class","1dd214fc":"score = metrics.roc_auc_score(y_strat_test, pred_class)\n\nprint(f\"Test AUC score: {score}\")","8977dfa8":"cm1 = confusion_matrix(y_strat_test,pred_class)\n#Accuracy\n\naccuracy1=accuracy_score(pred_class,y_strat_test)","18f9809e":"print(cm1)\nprint(accuracy1)\nprint(\"accuracy_classfier = \", (cm1[0][0] \n                                + cm1[1][1])*100\/2000,\"%\")","970dac61":"# LightGBM","29abb7fb":"# One Hot Encoding","29ad20cf":"Get the target column for train data","2920a3e2":"Get the target column for test data","3ebb3d7d":"Split train and test and stratify based on NumOfProducts so that the data will be evenly split","4275b78c":"**#Train test variables ** --> \nstrat_train_set  --> train data set with features only\ny_strat_train --> target column for train dataset\nstrat_test_set --> test dataset with features only\ny_strat_test --> target column for test dataset","6144c85d":"# Looking for correlation","562173f3":"# #XGBOOST****"}}