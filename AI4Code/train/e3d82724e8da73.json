{"cell_type":{"0fb2e7b5":"code","36353661":"code","f8f1c03b":"code","b9831156":"code","8dfcda1f":"code","55f38e8e":"code","f64c787f":"code","66845379":"code","5be0294e":"code","d68b64a3":"code","d1bc4215":"code","e1e4da99":"code","13e12e8d":"code","f81b6c4b":"code","5e5b7200":"code","602b7c99":"code","4dc2d0c7":"code","36a10104":"code","14b8410a":"code","e9d361a9":"code","9b7183a5":"code","b8bcadf2":"code","54946db2":"code","66f0d982":"code","13b791a1":"code","4fbad026":"code","e7d38669":"code","bc673e34":"code","44a577e8":"code","86603c3a":"code","52b4d26a":"markdown","db114204":"markdown","053f3d95":"markdown"},"source":{"0fb2e7b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","36353661":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = (12, 4)","f8f1c03b":"def human_format(num, pos):\n    num = float('{:.3g}'.format(num))\n    magnitude = 0\n    while abs(num) >= 1000:\n        magnitude += 1\n        num \/= 1000.0\n    return 'R${}{}'.format('{:f}'.format(num).rstrip('0').rstrip('.'), ['', 'K', 'M', 'B', 'T'][magnitude])","b9831156":"candidatos = pd.read_csv(\"\/kaggle\/input\/brazil-elections-2020\/candidatos\/consulta_cand_2020\/consulta_cand_2020_BRASIL.csv\", sep=\";\", engine=\"python\")","8dfcda1f":"candidatos.shape","55f38e8e":"candidatos.columns","f64c787f":"candidatos[\"SQ_CANDIDATO\"].nunique()","66845379":"candidatos.head()","5be0294e":"assets = pd.read_csv(\"\/kaggle\/input\/brazil-elections-2020\/candidatos\/bem_candidato_2020\/bem_candidato_2020_BRASIL.csv\", sep=\";\", engine=\"python\")","d68b64a3":"assets.shape","d1bc4215":"assets.head()","e1e4da99":"assets[\"SQ_CANDIDATO\"].nunique()","13e12e8d":"candidatos = candidatos[[\"SQ_CANDIDATO\", \"NM_URNA_CANDIDATO\", \"SG_PARTIDO\"]]","f81b6c4b":"assets_by_party = assets.merge(candidatos, on=\"SQ_CANDIDATO\")","5e5b7200":"assets_by_party[\"VR_BEM_CANDIDATO\"] = assets_by_party[\"VR_BEM_CANDIDATO\"].apply(lambda x: x.split(\",\")[0]).astype(float)","602b7c99":"assets_by_party = assets_by_party.groupby(\"SQ_CANDIDATO\").agg({\"SG_PARTIDO\": \"first\", \"VR_BEM_CANDIDATO\": \"sum\", \"SG_UF\": \"first\", \"NM_URNA_CANDIDATO\": \"first\"})","4dc2d0c7":"assets_by_party.sort_values(by=\"VR_BEM_CANDIDATO\", ascending=False)[:15]","36a10104":"assets[assets[\"SQ_CANDIDATO\"] == 190001019131]","14b8410a":"agg = assets_by_party.groupby(\"SG_PARTIDO\")[\"VR_BEM_CANDIDATO\"].median()","e9d361a9":"order = agg.sort_values(ascending=False).index.values\nagg.sort_values(ascending=False)","9b7183a5":"fig, ax = plt.subplots(figsize=(25, 14))\nsns.barplot(data=assets_by_party, x=\"SG_PARTIDO\", y=\"VR_BEM_CANDIDATO\", color=\"blue\")\nax.yaxis.set_major_formatter(ticker.FuncFormatter(human_format))","b8bcadf2":"fig, ax = plt.subplots(figsize=(25, 14))\nsns.barplot(data=assets_by_party, x=\"SG_PARTIDO\", y=\"VR_BEM_CANDIDATO\", estimator=np.median, color=\"#c9a8fa\", order=order)\nax.yaxis.set_major_formatter(ticker.FuncFormatter(human_format))\nplt.title(\"Mediana dos bens declarados por partido para candidatos das elei\u00e7\u00f5es 2020\", fontsize=32, pad=16)\nplt.xlabel(\"Partido\")\nplt.ylabel(\"Valor dos bens declarados\")","54946db2":"order = assets_by_party[assets_by_party[\"SG_UF\"] == \"SP\"].groupby(\"SG_PARTIDO\")[\"VR_BEM_CANDIDATO\"].median().sort_values(ascending=False).index.values[:24]\n\nfig, ax = plt.subplots(figsize=(25, 14))\nsns.barplot(data=assets_by_party[assets_by_party[\"SG_UF\"] == \"SP\"], x=\"SG_PARTIDO\", y=\"VR_BEM_CANDIDATO\", estimator=np.median, color=\"#c9a8fa\", order=order)\nplt.title(\"Mediana dos bens declarados por partido para candidatos das elei\u00e7\u00f5es 2020 em SP\", fontsize=32, pad=16)\nax.yaxis.set_major_formatter(ticker.FuncFormatter(human_format))\nplt.xlabel(\"Partido\")\nplt.ylabel(\"Valor dos bens declarados\")","66f0d982":"average_wo_outliers = assets_by_party.groupby(\"SG_PARTIDO\")[\"VR_BEM_CANDIDATO\"].apply(lambda x: np.mean(x[x < np.quantile(x, 0.98)]))","13b791a1":"average_wo_outliers.sort_values(ascending=False)","4fbad026":"outliers = assets_by_party.groupby(\"SG_PARTIDO\", as_index=False)[\"VR_BEM_CANDIDATO\"].apply(lambda x: np.quantile(x, 0.995)).rename(columns={\"VR_BEM_CANDIDATO\": \"upper_limit\"})","e7d38669":"assets_by_party = assets_by_party.merge(outliers, on=\"SG_PARTIDO\")\nassets_by_party = assets_by_party[assets_by_party[\"VR_BEM_CANDIDATO\"] < assets_by_party[\"upper_limit\"]]","bc673e34":"fig, ax = plt.subplots(figsize=(25, 14))\nsns.boxplot(data=assets_by_party, y=\"VR_BEM_CANDIDATO\", x=\"SG_PARTIDO\",\n            order=[\"PSDB\", \"PT\", \"PSTU\", \"NOVO\"], color=\"#c9a8fa\",\n            whis=1.92)\nax.yaxis.set_major_formatter(ticker.FuncFormatter(human_format))\nplt.ylim([0, 3000000])\nplt.title(\"Distribui\u00e7\u00e3o dos bens declarados por partido para candidatos das elei\u00e7\u00f5es 2020\", fontsize=32, pad=16)\nplt.xlabel(\"Partido\")\nplt.ylabel(\"Valor dos bens declarados\")\nplt.show()","44a577e8":"fig, ax = plt.subplots(figsize=(25, 14))\nsns.violinplot(data=assets_by_party, y=\"VR_BEM_CANDIDATO\", x=\"SG_PARTIDO\",\n               order=[\"PSDB\", \"PT\", \"PSTU\", \"NOVO\"], color=\"#c9a8fa\",\n               cut=True)\nplt.ylim([-1500000, 5000000])\nax.yaxis.set_major_formatter(ticker.FuncFormatter(human_format))\nplt.title(\"Distribui\u00e7\u00e3o dos bens declarados por partido para candidatos das elei\u00e7\u00f5es 2020\", fontsize=32, pad=16)\nplt.xlabel(\"Partido\")\nplt.ylabel(\"Valor dos bens declarados\")","86603c3a":"from matplotlib.ticker import PercentFormatter\n\nparties_to_plot = [\"NOVO\", \"PT\", \"PSDB\", \"PSTU\"]\ncolor_dict = {\"NOVO\": \"orange\",\n              \"PT\": \"red\",\n              \"PSDB\": \"blue\",\n              \"PSTU\": \"green\"}\n\nmax_value = 2000000\nn_bins = 70\nbins = np.linspace(0, max_value, n_bins)\n\nfig, ax = plt.subplots(len(parties_to_plot), 1, sharex=True,\n                       figsize=(20, 14))\n\nfor i, party in enumerate(parties_to_plot):\n    data = assets_by_party[assets_by_party[\"SG_PARTIDO\"] == party][\"VR_BEM_CANDIDATO\"]\n    ax[i].hist(data,\n                range = (0, max_value),\n                color=color_dict[party],\n                #label=party,\n                weights=np.ones(len(data)) \/ len(data),\n                alpha=.75,\n                bins=bins)\n    ax[i].xaxis.set_major_formatter(ticker.FuncFormatter(human_format))    \n    ax[i].yaxis.set_major_formatter(PercentFormatter(1))\n    ax[i].set_title(party)\n\nfig.suptitle(\"Distribui\u00e7\u00e3o do valor dos bens declarados dos candidatos de {} nas elei\u00e7\u00f5es 2020\".format(\", \".join(parties_to_plot)), \n          fontsize=28)\n\n#plt.xlim([-0, 2000000])\nplt.show()","52b4d26a":"That's probably an error.","db114204":"### Exclude outliers","053f3d95":"## Candidates with high patrimony"}}