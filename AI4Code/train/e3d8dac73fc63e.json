{"cell_type":{"fe4df035":"code","f0bce6a7":"code","c1ee7158":"code","38cdb10a":"code","7278ae9e":"code","b9d9d95c":"code","96f06a38":"code","265ef6d4":"markdown","3a0387e8":"markdown","73eaa6b1":"markdown","48c3484b":"markdown","83ab8d55":"markdown"},"source":{"fe4df035":"from tensorflow.keras import losses, models, optimizers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import (Dense, Dropout, Activation, Flatten) \nfrom tensorflow.keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.datasets import load_boston \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import ElasticNet, Lasso, Ridge\nfrom matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom geopy import distance\n\ndata = pd.read_csv(\"..\/input\/new-york-city-taxi-fare-prediction\/train.csv\", sep=',', nrows=7000, parse_dates=[\"pickup_datetime\"])\nis_null = pd.isnull(data).sum()\nprint(is_null)","f0bce6a7":"data = data.dropna(how = 'any', axis = 'rows')\nprint('New size: %d' % len(data))\n\npd.set_option('display.expand_frame_repr', False) \nprint(data.head())\nprint(data.corr())\n\nprint((data.pickup_latitude>90).sum())\nprint((data.pickup_latitude<-90).sum())\nprint((data.pickup_longitude>90).sum())\nprint((data.pickup_longitude<-90).sum())\n\nprint((data.dropoff_latitude>90).sum())\nprint((data.dropoff_latitude<-90).sum())\nprint((data.dropoff_longitude>90).sum())\nprint((data.dropoff_longitude<-90).sum())\n\ndata_n = data.drop(data[(data.pickup_latitude>90) | (data.pickup_latitude<-90) \n| (data.pickup_longitude>90) | (data.pickup_longitude<-90) | (data.dropoff_latitude>90) \n| (data.dropoff_latitude<-90) | (data.dropoff_longitude>90) | (data.dropoff_longitude<-90) \n].index)\n\n# Clearing from zero values\ndata_n = data_n[(data_n.pickup_latitude != 0)]\ndata_n = data_n[(data_n.pickup_longitude != 0)]\ndata_n = data_n[(data_n.dropoff_longitude != 0)]\ndata_n = data_n[(data_n.dropoff_latitude != 0)]\n# Clearing from values where the landing and planting coordinates coincide\ndata_n = data_n[(data_n.dropoff_latitude != data_n.pickup_latitude) & (data_n.dropoff_longitude != data_n.pickup_longitude) ]\ndata_n = data_n.reset_index(drop=True)\n\nprint('New size: %d' % len(data_n))","c1ee7158":"distance_miles = []\n#Calculate the distance between the landing point and the drop-off point\nfor i in range(len(data_n.pickup_latitude)):\n  distance_miles.append(distance.distance((data_n.pickup_latitude[i], data_n.pickup_longitude[i]), (data_n.dropoff_latitude[i], data_n.dropoff_longitude[i])).km)\n\n#Add to the current data\ndata_n['distance_miles'] = distance_miles \nprint(data_n.head())\n\nis_null1 = pd.isnull(data_n.distance_miles).sum()\nprint(is_null1)","38cdb10a":"fig=plt.figure(figsize=(11, 8))\nax1=fig.add_subplot(1,1,1)\nax1.scatter(data_n.distance_miles,data_n.fare_amount,  color='g', alpha=0.2)\nax1.set_title('The graph of distance-related charges')\nax1.set_xlabel(\"Distance\")\nax1.set_ylabel(\"Payment\")\n\nfig3=plt.figure(figsize=(11, 8))\nax5=fig3.add_subplot(1,1,1)\nax5.scatter(data_n.passenger_count, data_n.fare_amount, color='green')\nax5.set_title('The graph of payment depending on the number of passengers')\nax5.set_xlabel('Number of passengers')\nax5.set_ylabel('Payment')\n\ndata_n['year'] = data_n.pickup_datetime.apply(lambda t: t.year)\ndata_n['weekday'] = data_n.pickup_datetime.apply(lambda t: t.weekday())\ndata_n['hour'] = data_n.pickup_datetime.apply(lambda t: t.hour)\n\nfig2=plt.figure(figsize=(11, 8))\nax5=fig2.add_subplot(1,1,1)\nax5.scatter(data_n.weekday, data_n.fare_amount, color='green')\nax5.set_title('The graph of payment depending on the day of the week')\nax5.set_xlabel('Day of the week')\nax5.set_ylabel('Payment')\n\n\nfig2=plt.figure(figsize=(11, 8))\nax5=fig2.add_subplot(1,1,1)\nax5.scatter(data_n.hour, data_n.fare_amount, color='green')\nax5.set_title('The graph of payment depending on the call time')\nax5.set_xlabel('Call time')\nax5.set_ylabel('Payment')","7278ae9e":"lr = LinearRegression()\nx = data_n.distance_miles\ny = data_n.fare_amount\n\nx = np.transpose(np.atleast_2d(x))\nlr.fit(x,y)\ny_pred = lr.predict(x)\nmse_lin_rm = mean_squared_error(y, y_pred)\nrmse_lin_rm = np.sqrt(mse_lin_rm)\nr2_lin_rm = r2_score(y, y_pred) \n\nkf = KFold(n_splits=5, random_state=None, shuffle=False)\nmse_lin_rm_kf = []\nr2_lin_rm_kf = []  \nfor train_index, test_index in kf.split(x):\n    lr.fit(x[train_index],y[train_index])\n    mse_lin_rm_kf.append(mean_squared_error(y[test_index], lr.predict(x[test_index])))\n    r2_lin_rm_kf.append(r2_score(y[test_index], lr.predict(x[test_index])))\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (np.mean(mse_lin_rm_kf), np.std(mse_lin_rm_kf) * 2))\nprint(\"Mean R^2: %0.2f\" % (np.mean(r2_lin_rm_kf)))\n\nfig=plt.figure(figsize=(11, 8))\nax5=fig.add_subplot(1,1,1)\n\nax5.scatter(data_n.distance_miles,data_n.fare_amount, color='g', alpha=0.2, norm=0.3)\nax5.plot(x,y_pred)\n\nax5.set_title('Pairwise linear regression by least squares method ')\nax5.set_xlabel('Distance ')\nax5.set_ylabel('Payment $USD')","b9d9d95c":"fig1=plt.figure(figsize=(11, 8))\nax5=fig1.add_subplot(1,1,1)\nidx = (data_n.distance_miles < 15) & (data_n.fare_amount < 100)\nax5.scatter(data_n[idx].distance_miles, data_n[idx].fare_amount, alpha=0.2, color='g')\nax5.set_title('Linear regression when filtering distance < 15 miles, payments < $100')\nax5.set_xlabel('Distance ')\nax5.set_ylabel('Payment')","96f06a38":"x_mul = data_n[['passenger_count','distance_miles']]\ny = data_n.fare_amount\n\nX_train, X_test, y_train, y_test = train_test_split(x_mul, y, test_size=0.4, random_state=0)    \n\nlr_mul = LinearRegression()\nlr_mul.fit(x_mul,y)\np = lr_mul.predict(x_mul)\nmse_lin_mul = mean_squared_error(y, p)\nfig=plt.figure(figsize=(11, 8))\nmulreg=fig.add_subplot(1,1,1)\nmulreg.scatter(p, y, color='g', alpha=0.1)\nmulreg.set_title('Multiple linear regression')","265ef6d4":"3. \u0412\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0439\u0442\u0435 \u043f\u0440\u0438\u043a\u043b\u0430\u0434 1 \u0434\u043b\u044f \u043f\u043e\u0431\u0443\u0434\u043e\u0432\u0438 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0456\u0439\u043d\u043e\u0457 \u0437\u0430\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0456 \u043d\u0430 \u043e\u0431\u0440\u0430\u043d\u043e\u043c\u0443 \u0432 \u043f. 1 \u043d\u0430\u0431\u043e\u0440\u0456 \u0434\u0430\u043d\u0438\u0445:\n* \u043f\u0430\u0440\u043d\u043e\u0457 \u043b\u0456\u043d\u0456\u0439\u043d\u043e\u0457 \u0440\u0435\u0433\u0440\u0435\u0441\u0456\u0457 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u043d\u0430\u0439\u043c\u0435\u043d\u0448\u0438\u0445 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0456\u0432;\n* \u043c\u043d\u043e\u0436\u0438\u043d\u043d\u043e\u0457 \u043b\u0456\u043d\u0456\u0439\u043d\u043e\u0457 \u0440\u0435\u0433\u0440\u0435\u0441\u0456\u0457 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u043d\u0430\u0439\u043c\u0435\u043d\u0448\u0438\u0445 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0456\u0432;\n* \u043f\u0430\u0440\u043d\u043e\u0457 \u0430\u0431\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u043d\u043e\u0457 \u043b\u0456\u043d\u0456\u0439\u043d\u043e\u0457 \u0440\u0435\u0433\u0440\u0435\u0441\u0456\u0457 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 Lasso, Ridge \u0442\u0430 ElasticNet;\n* \u043f\u0430\u0440\u043d\u043e\u0457 \u0430\u0431\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u043d\u043e\u0457 \u043b\u0456\u043d\u0456\u0439\u043d\u043e\u0457 \u0440\u0435\u0433\u0440\u0435\u0441\u0456\u0457 \u0437\u0430\u0441\u043e\u0431\u0430\u043c\u0438 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0438\u0445 \u043c\u0435\u0440\u0435\u0436.","3a0387e8":"1. \u041e\u0431\u0435\u0440\u0456\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u0434\u0430\u043b\u044c\u0448\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0456\u0437\u0443 \u043e\u0434\u0438\u043d \u0437 \u043d\u0430\u0432\u0435\u0434\u0435\u043d\u0438\u0445 \u043d\u0430\u0431\u043e\u0440\u0456\u0432 \u0434\u0430\u043d\u0438\u0445:\n\nhttps:\/\/www.kaggle.com\/c\/new-york-city-taxi-fare-prediction <-- \u041e\u0431\u0440\u0430\u0432 \u0446\u0435\n\nhttps:\/\/www.kaggle.com\/c\/nyc-taxi-trip-duration\n","73eaa6b1":"4. \u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0456\u0437\u0443\u0439\u0442\u0435 \u0442\u043e\u0447\u043d\u0456\u0441\u0442\u044c \u043f\u043e\u0431\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.","48c3484b":"**\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0456 \u0437\u0430\u043f\u0438\u0442\u0430\u043d\u043d\u044f**\n1. \u041d\u0430\u0437\u0432\u0456\u0442\u044c \u043c\u0435\u0442\u0443 \u0440\u0435\u0433\u0440\u0435\u0441\u0456\u0439\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0456\u0437\u0443.\n2. \u041e\u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u0439\u0442\u0435 \u0432\u0438\u0434\u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0456\u0439\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0456\u0437\u0443.\n3. \u0423 \u0447\u043e\u043c\u0443 \u0432\u0456\u0434\u043c\u0456\u043d\u043d\u0456\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0456\u0432 Lasso, Ridge \u0442\u0430 ElasticNet \u0432\u0456\u0434 \u043a\u043b\u0430\u0441\u0456\u0432 LassoCV, RidgeCV \u0442\u0430 ElasticNetCV \u0431\u0456\u0431\u043b\u0456\u043e\u0442\u0435\u043a\u0438 sklearn?\n\n**\u0412\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0456**\n1. \u0440\u043e\u0437\u0434\u0456\u043b \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u043e\u0457 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438, \u043f\u0440\u0438\u0441\u0432\u044f\u0447\u0435\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u0434\u0430\u043c \u0430\u043d\u0430\u043b\u0456\u0437\u0443 \u0437\u0430\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0456 \u043e\u0434\u043d\u0456\u0454\u0457 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0438 \u0432\u0456\u0434 \u0456\u043d\u0448\u043e\u0457. \u041d\u0430 \u0432\u0456\u0434\u043c\u0456\u043d\u0443 \u0432\u0456\u0434 \u043a\u043e\u0440\u0435\u043b\u044f\u0446\u0456\u0439\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0456\u0437\u0443 \u043d\u0435 \u0437'\u044f\u0441\u043e\u0432\u0443\u0454 \u0447\u0438 \u0456\u0441\u0442\u043e\u0442\u043d\u0438\u0439 \u0437\u0432'\u044f\u0437\u043e\u043a, \u0430 \u0437\u0430\u0439\u043c\u0430\u0454\u0442\u044c\u0441\u044f \u043f\u043e\u0448\u0443\u043a\u043e\u043c \u043c\u043e\u0434\u0435\u043b\u0456 \u0446\u044c\u043e\u0433\u043e \u0437\u0432'\u044f\u0437\u043a\u0443, \u0432\u0438\u0440\u0430\u0436\u0435\u043d\u043e\u0457 \u0443 \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0440\u0435\u0433\u0440\u0435\u0441\u0456\u0457.\n2. \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f, \u043a\u043e\u0433\u0434\u0430 \u043d\u0430\u0445\u043e\u0434\u044f\u0442 \u043b\u0438\u043d\u0435\u0439\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f, \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c, \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u043c.\n3. \n\n    * \u0422\u043e\u0447\u043d\u0456\u0441\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0443: \u041e\u0446\u0456\u043d\u043a\u0438 \u043b\u0456\u043d\u0456\u0439\u043d\u043e\u0457 \u0440\u0435\u0433\u0440\u0435\u0441\u0456\u0457, \u044f\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u043c\u0430\u044e\u0442\u044c \u043d\u0438\u0437\u044c\u043a\u0443 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u0443 \u043f\u043e\u043c\u0438\u043b\u043a\u0443 \u0442\u0430 \u0432\u0438\u0441\u043e\u043a\u0443 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0456\u044e. \u0417\u043d\u0438\u0436\u0435\u043d\u043d\u044f \u0441\u043a\u043b\u0430\u0434\u043d\u043e\u0441\u0442\u0456 \u043c\u043e\u0434\u0435\u043b\u0456 (\u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0456\u0432, \u044f\u043a\u0456 \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u043e \u043e\u0446\u0456\u043d\u0438\u0442\u0438) \u043f\u0440\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u044c \u0434\u043e \u0437\u043c\u0435\u043d\u0448\u0435\u043d\u043d\u044f \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0456\u0457 \u0437\u0430 \u0440\u0430\u0445\u0443\u043d\u043e\u043a \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u0431\u0456\u043b\u044c\u0448\u043e\u0433\u043e \u0443\u0441\u0443\u043d\u0435\u043d\u043d\u044f. \u042f\u043a\u0431\u0438 \u043c\u0438 \u043c\u043e\u0433\u043b\u0438 \u0437\u043d\u0430\u0439\u0442\u0438 \u043c\u0456\u0441\u0446\u0435, \u0434\u0435 \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u0430 \u043f\u043e\u043c\u0438\u043b\u043a\u0430, \u0442\u043e\u0431\u0442\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0430, \u0449\u043e \u0432\u0438\u043d\u0438\u043a\u0430\u0454 \u0447\u0435\u0440\u0435\u0437 \u0443\u0441\u0443\u043d\u0435\u043d\u043d\u044f \u043f\u043b\u044e\u0441 \u043f\u043e\u043c\u0438\u043b\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0456\u044e, \u043c\u0456\u043d\u0456\u043c\u0456\u0437\u043e\u0432\u0430\u043d\u0430, \u043c\u0438 \u043c\u043e\u0433\u043b\u0438 \u0431 \u043f\u043e\u043b\u0456\u043f\u0448\u0438\u0442\u0438 \u043f\u0435\u0440\u0435\u0434\u0431\u0430\u0447\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456.\n    * \u0406\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u043e\u0432\u0430\u043d\u0456\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0456 \u0417 \u0434\u0443\u0436\u0435 \u0432\u0435\u043b\u0438\u043a\u043e\u044e \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044e \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u043e\u0440\u043e\u0432 \u043b\u044e\u0434\u0438\u043d\u0456 \u0432\u0430\u0436\u043a\u043e \u0437\u0440\u043e\u0437\u0443\u043c\u0456\u0442\u0438 \u0432\u0441\u0456 \u0432\u0456\u0434\u043d\u043e\u0441\u0438\u043d\u0438 \u043c\u0456\u0436 \u0437\u043c\u0456\u043d\u043d\u0438\u043c\u0438. \u0423 \u0434\u0435\u044f\u043a\u0438\u0445 \u0432\u0438\u043f\u0430\u0434\u043a\u0430\u0445 \u043c\u0438 \u0445\u043e\u0442\u0456\u043b\u0438 \u0431 \u0432\u0438\u0437\u043d\u0430\u0447\u0438\u0442\u0438 \u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0435 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0437\u043c\u0456\u043d\u043d\u0438\u0445 \u0456\u0437 \u043d\u0430\u0439\u0441\u0438\u043b\u044c\u043d\u0456\u0448\u0438\u043c \u0432\u043f\u043b\u0438\u0432\u043e\u043c, \u0442\u0430\u043a\u0438\u043c \u0447\u0438\u043d\u043e\u043c \u0436\u0435\u0440\u0442\u0432\u0443\u044e\u0447\u0438 \u0434\u0435\u044f\u043a\u0438\u043c\u0438 \u0434\u0435\u0442\u0430\u043b\u044f\u043c\u0438, \u0449\u043e\u0431 \u043e\u0442\u0440\u0438\u043c\u0430\u0442\u0438 \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u0443 \u043a\u0430\u0440\u0442\u0438\u043d\u0443.","83ab8d55":"2. \u0412\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0439\u0442\u0435 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0438 \u0442\u0430 \u0440\u043e\u0437\u0432\u2019\u044f\u0437\u0430\u043d\u043d\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0438\u0445 \u0440\u043e\u0431\u0456\u0442 1\u20133 \u0434\u043b\u044f \u043f\u043e\u043f\u0435\u0440\u0435\u0434\u043d\u044c\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0456\u0437\u0443 \u0442\u0430 \u0432\u0456\u0437\u0443\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u0434\u0430\u043d\u0438\u0445."}}