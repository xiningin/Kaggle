{"cell_type":{"627ff758":"code","0f588c60":"code","cee5d3c6":"code","44135c88":"code","da28223d":"code","fe19da2f":"code","83b04971":"code","b4f3b8c9":"code","70e38d6c":"code","283b0257":"markdown","e790d388":"markdown","b1864471":"markdown","e77ce9a5":"markdown","05a8c052":"markdown","49be77d2":"markdown","491c5592":"markdown","b57decaf":"markdown","ad2486e2":"markdown","2c5739c1":"markdown","c45ba833":"markdown"},"source":{"627ff758":"import numpy as np \nimport pandas as pd\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.pipeline import FeatureUnion\nfrom sklearn.base import BaseEstimator, TransformerMixin","0f588c60":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\nX_train, y_train = train_data.loc[:, train_data.columns != 'Survived'], train_data['Survived']\n\nX_train","cee5d3c6":"pd.DataFrame(X_train.isnull().sum(), columns=['Missing values'])","44135c88":"X_train.Age.mean()","da28223d":"# Mean age by Sex and Pclass\ntrain_data.groupby(['Pclass', 'Sex'])['Age'].agg([len, 'mean'])","fe19da2f":"class AgeImputer(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        super().__init__()\n        self.age_means_ = {}\n\n    def fit(self, X, y=None):\n        self.age_means_ = X.groupby(['Pclass', 'Sex']).Age.mean()\n\n        return self\n\n    def transform(self, X, y=None):\n        X_ = X.copy()\n        for key, value in self.age_means_.items():\n            X_.loc[((np.isnan(X_[\"Age\"])) & (X.Pclass == key[0]) & (X_.Sex == key[1])), 'Age'] = value\n\n        return X_","83b04971":"numerical_cols = ['Pclass', 'Fare']\ncategorial_cols = ['Sex', 'Embarked']\n\nmodel = GradientBoostingClassifier()\n\nnumerical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer())\n])\n\ncategorial_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder())\n])\n\nage_transformer = Pipeline(steps=[\n    ('imputer', AgeImputer())\n])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('numerical', numerical_transformer, numerical_cols),\n        ('categorial', categorial_transformer, categorial_cols)\n    ])\n\npipeline = Pipeline(steps=[\n    ('Age Imputer', age_transformer),\n    ('preprocess', preprocessor),\n    ('model', model)\n])","b4f3b8c9":"params = { \n           'model__n_estimators': [300],\n           'model__max_depth': [1, 2, 3],\n           'model__random_state': [42],\n         }\n\ngrid_search = GridSearchCV(pipeline, params, cv=10, scoring='accuracy')\ngrid_search.fit(X_train, y_train)\n\nprint('Best accuracy score: {}'.format(grid_search.best_score_))\n\nprint('Best params: {}'.format(grid_search.best_params_))","70e38d6c":"predictions = grid_search.predict(test_data)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\n\nprint(\"Your submission was successfully saved!\")","283b0257":"We can see that there are a lot of missing values in Age feature, so let's see how we can replace that missing values! \n\nFirst, let's see what's average age","e790d388":"# Predicting the results \ud83c\udf50","b1864471":"# Loading data \ud83c\udf49","e77ce9a5":"But passengers are not the same, for example people from 1 Pclass has a different age from people from 2 Pclass, and males has a different average age with males!","05a8c052":"# Searching for the best params \ud83e\udd51","49be77d2":"# Requirements \ud83c\udf4f","491c5592":"It's much better to impute missing data by such accurate grouping rather that relying in average age among all passengers!","b57decaf":"# Creating pipeline \ud83c\udf53\n\nHere we will be One Hot Encoding categorial values such as Sex and Embarked.  \nFor Pclass and Fare we will apply Simple Imputer from sklearn.","ad2486e2":"# Class for imputing age \ud83c\udf52","2c5739c1":"# Convenient training gradient boosting model using Sklearn pipeline","c45ba833":"# Analytics \ud83c\udf47\nLet's see how many missing values we have for training data."}}