{"cell_type":{"3398f15c":"code","365ec681":"code","484a4673":"code","856aebaf":"code","df2027b1":"code","24d2487a":"code","6944d022":"code","ffadaba1":"code","085172c2":"code","1aa63299":"code","66bb52d6":"code","36e1d45f":"code","810f4e3e":"code","27bea699":"code","84e6bf53":"code","53b33fa8":"code","e42fd479":"code","500b250b":"code","15e821fc":"markdown","7b0ea2ca":"markdown","06d15432":"markdown","4fc0389e":"markdown","c5c2c266":"markdown","7aa8c917":"markdown","17d92ded":"markdown","b0f35c4d":"markdown","eb8c4e06":"markdown","baa4ffaf":"markdown","fdff69ef":"markdown","7ff3b25e":"markdown","7730977c":"markdown","3d3b631d":"markdown","33bac71e":"markdown"},"source":{"3398f15c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\nos.listdir(\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/\")","365ec681":"from tensorflow.keras.layers import Input, Flatten, Dense, Conv2D, Lambda, MaxPooling2D\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications.vgg19 import VGG19\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\nfrom tensorflow.keras.models import Sequential\nimport numpy as np\nfrom glob import glob\nimport matplotlib.pyplot as plt\nimport cv2","484a4673":"IMG_SIZE = 64\ncategory = ['Uninfected', 'Parasitized']\ndef get_train_data(direct):\n    data = []\n    for labels in category:\n        path = os.path.join(direct, labels)\n        class_num = category.index(labels)\n        for img in os.listdir(path):\n            try:\n                img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_COLOR)\n                new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))\n                data.append([new_array, class_num])\n            except Exception as e:\n                print(e)\n    return np.array(data)","856aebaf":"new_data = get_train_data(\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/\")","df2027b1":"X = []\ny = []\nfor feature, label in new_data:\n    X.append(feature)\n    y.append(label)\n    \nfrom keras.utils import np_utils\ny = np_utils.to_categorical(y, num_classes = 2)\n\nX = np.array(X)\ny = np.array(y)\n\nX = X.reshape(-1, 64, 64, 3)","24d2487a":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","6944d022":"from keras.preprocessing.image import ImageDataGenerator\n\ntrain_generator = ImageDataGenerator(rescale = 1\/255,\n                                     zoom_range = 0.3,\n                                     horizontal_flip = True,\n                                     rotation_range = 30)\n\ntest_generator = ImageDataGenerator(rescale = 1\/255)\n\ntrain_generator = train_generator.flow(np.array(X_train),\n                                       y_train,\n                                       batch_size = 64,\n                                       shuffle = False)\n\ntest_generator = test_generator.flow(np.array(X_test),\n                                     y_test,\n                                     batch_size = 64,\n                                     shuffle = False)","ffadaba1":"vg19 = VGG19(input_shape=[IMG_SIZE, IMG_SIZE] + [3], weights=\"imagenet\", include_top=False)\n\nfor layer in vg19.layers:\n    layer.trainable = False\n\nx = Flatten()(vg19.output)\nprediction = Dense(len(category), activation=\"softmax\")(x)\nmodel = Model(inputs=vg19.input, outputs=prediction)\n\n\nmodel.compile(loss=\"categorical_crossentropy\", metrics=[\"accuracy\"], optimizer=\"adam\")","085172c2":"history = model.fit_generator(train_generator,\n                                   steps_per_epoch = len(X_train)\/64,\n                                   epochs = 50,\n                                   shuffle = False,\n                                   validation_data=test_generator, validation_steps=len(test_generator))","1aa63299":"model.evaluate_generator(test_generator)","66bb52d6":"import matplotlib.pyplot as plt\naccuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(accuracy))\n\nplt.plot(epochs, accuracy, \"b\", label=\"trainning accuracy\")\nplt.plot(epochs, val_accuracy, \"r\", label=\"validation accuracy\")\nplt.legend()\nplt.show()\n\nplt.plot(epochs, loss, \"b\", label=\"trainning loss\")\nplt.plot(epochs, val_loss, \"r\", label=\"validation loss\")\nplt.legend()\nplt.show()","36e1d45f":"y_pred = model.predict(test_generator)\ny_pred","810f4e3e":"y_pred = np.argmax(y_pred, axis=1)\ny_pred","27bea699":"model.save(\"new.model\")","84e6bf53":"import tensorflow as tf\ncategory = ['Uninfected', 'Parasitized']\ndef prepare(filepath):\n    img_array = cv2.imread(filepath, cv2.IMREAD_COLOR)\n    img_array = img_array \/ 255\n    new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))\n    return new_array.reshape(-1, IMG_SIZE, IMG_SIZE, 3)\n\nmodel = tf.keras.models.load_model(\"new.model\")","53b33fa8":"prediction = model.predict([prepare(\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/Uninfected\/C100P61ThinF_IMG_20150918_144104_cell_25.png\")])\n\nif np.argmax(prediction) == 1:\n    print(\"Infected\")\nelse:\n    print(\"Uninfected\")\n","e42fd479":"prediction = model.predict([prepare(\"..\/input\/prediction-images\/Malaria-Parasite-Detection-Using-an-SVM-output-5-0 (2).png\")])\n\nif np.argmax(prediction) == 1:\n    print(\"Infected\")\nelse:\n    print(\"Uninfected\")\n","500b250b":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\nprint(classification_report(np.argmax(y_test, axis=1), y_pred, target_names=category))","15e821fc":"# Visualization","7b0ea2ca":"# Uninfected cell","06d15432":"# Infected cell","4fc0389e":"# Resize image, convert RGB images to array","c5c2c266":"# Malaria is a disease caused by a parasite. The parasite is transmitted to humans through the bites of infected mosquitoes. People who have malaria usually feel very sick, with a high fever and shaking chills. Each year, approximately 210 million people are infected with malaria, and about 440,000 people die from the disease. Most of the people who die from the disease are young children in Africa.\n\n# While the disease is uncommon in temperate climates, malaria is still common in tropical and subtropical countries. World health officials are trying to reduce the incidence of malaria by distributing bed nets to help protect people from mosquito bites as they sleep. Scientists around the world are working to develop a vaccine to prevent malaria.\n\n# If you're traveling to locations where malaria is common, take steps to prevent mosquito bites by wearing protective clothing, using insect repellants and sleeping under treated mosquito nets. Depending on the area you are visiting and your individual risk factors for infection, you may also want to take preventive medicine before, during and after your trip. Many malaria parasites are now resistant to the most common drugs used to treat the disease.\n\n\n![nopparit-696x392.jpg](attachment:nopparit-696x392.jpg)","7aa8c917":"# Import all necessary module","17d92ded":"# classification report","b0f35c4d":"# train, test, split","eb8c4e06":"# Use VGG19 transfer learning:\n\n# Transfer learning generally refers to a process where a model trained on one problem is used in some way on a second related problem. \n\n# A range of high-performing models have been developed for image classification and demonstrated on the annual ImageNet Large Scale Visual Recognition Challenge, or ILSVRC.\n\n# In deep learning, transfer learning is a technique whereby a neural network model is first trained on a problem similar to the problem that is being solved. One or more layers from the trained model are then used in a new model trained on the problem of interest.\n\n# Models for Transfer Learning\n\n## There are perhaps a dozen or more top-performing models for image recognition that can be downloaded and used as the basis for image recognition and related computer vision tasks.\n\n## Perhaps three of the more popular models are as follows:\n\n*     VGG (e.g. VGG16 or VGG19).\n*     GoogLeNet (e.g. InceptionV3).\n*     Residual Network (e.g. ResNet50).\n\n## These models are both widely used for transfer learning both because of their performance, but also because they were examples that introduced specific architectural innovations, namely consistent and repeating structures (VGG), inception modules (GoogLeNet), and residual modules (ResNet).\n\n![vgg-ispravljeno-.png](attachment:vgg-ispravljeno-.png)","baa4ffaf":"# Path link","fdff69ef":"# append feature and label. Convert label to categorical, reshape the image with 3 channel( R, G, B )","7ff3b25e":"# evalute test_generator","7730977c":"# Data augmentation\n\n## Data augmentation is a strategy that enables practitioners to significantly increase the diversity of data available for training models, without actually collecting new data. Data augmentation techniques such as cropping, padding, and horizontal flipping are commonly used to train large neural networks.\n\n","3d3b631d":"# save model","33bac71e":"# fit generators"}}