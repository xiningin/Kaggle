{"cell_type":{"34b1ce82":"code","e8056f99":"code","aa77150e":"code","4df29d05":"code","b78162e1":"code","92ad0ed3":"code","6da9600e":"code","c4a4569a":"code","d06ed0eb":"code","9d302ab9":"code","1f05ee43":"code","0c4a9d49":"code","04d292d7":"code","3027145d":"code","be821073":"code","3c9d9ddb":"code","e605b2fe":"code","427cb27b":"code","7b3cd029":"code","34717a6b":"code","d49a1b67":"code","c67fc868":"code","777f6bc7":"code","0b3d52c4":"code","b14e2d33":"code","99100087":"code","43eafb29":"code","20d35a9d":"code","4500737e":"code","38c5e071":"markdown","24fff48d":"markdown","61117701":"markdown","ca76b671":"markdown","c18129b4":"markdown","bca19b17":"markdown","97cbbff5":"markdown","cab25b40":"markdown","d6c57d2f":"markdown","199c0832":"markdown","2d9dcdf3":"markdown","b5fd6141":"markdown","786e15a6":"markdown","2cb7f449":"markdown","0c490c7f":"markdown","a5addf97":"markdown","3863208f":"markdown","5757465b":"markdown"},"source":{"34b1ce82":"# Uncomment and run the commands below if imports fail\n# !conda install numpy pandas pytorch torchvision cpuonly -c pytorch -y\n# !pip install matplotlib --upgrade --quiet","e8056f99":"import os\nimport torch\nimport torchvision\nimport tarfile\nimport torch.nn as nn\nimport numpy as np\nimport torch.nn.functional as F\nfrom torchvision.datasets.utils import download_url\nfrom torchvision.datasets import ImageFolder\nfrom torch.utils.data import DataLoader\nimport torchvision.transforms as tt\nfrom torch.utils.data import random_split\nfrom torchvision.utils import make_grid\nimport matplotlib.pyplot as plt\n%matplotlib inline","aa77150e":"project_name='05b-cifar10-resnet'","4df29d05":"# Dowload the dataset\ndataset_url = \"http:\/\/files.fast.ai\/data\/cifar10.tgz\"\ndownload_url(dataset_url, '.')\n\n# Extract from archive\nwith tarfile.open('.\/cifar10.tgz', 'r:gz') as tar:\n    tar.extractall(path='.\/data')\n    \n# Look into the data directory\ndata_dir = '.\/data\/cifar10'\nprint(os.listdir(data_dir))\nclasses = os.listdir(data_dir + \"\/train\")\nprint(classes)","b78162e1":"# Data transforms (normalization & data augmentation)\nstats = ((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010))\ntrain_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'), \n                         tt.RandomHorizontalFlip(), \n                         tt.ToTensor(), \n                         tt.Normalize(*stats,inplace=True)])\nvalid_tfms = tt.Compose([tt.ToTensor(), tt.Normalize(*stats)])","92ad0ed3":"# PyTorch datasets\ntrain_ds = ImageFolder(data_dir+'\/train', train_tfms)\nvalid_ds = ImageFolder(data_dir+'\/test', valid_tfms)","6da9600e":"batch_size = 400","c4a4569a":"# PyTorch data loaders\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=3, pin_memory=True)\nvalid_dl = DataLoader(valid_ds, batch_size*2, num_workers=3, pin_memory=True)","d06ed0eb":"def show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(12, 12))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images[:64], nrow=8).permute(1, 2, 0))\n        break","9d302ab9":"show_batch(train_dl)","1f05ee43":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","0c4a9d49":"device = get_default_device()\ndevice","04d292d7":"train_dl = DeviceDataLoader(train_dl, device)\nvalid_dl = DeviceDataLoader(valid_dl, device)","3027145d":"class SimpleResidualBlock(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(in_channels=3, out_channels=3, kernel_size=3, stride=1, padding=1)\n        self.relu1 = nn.ReLU()\n        self.conv2 = nn.Conv2d(in_channels=3, out_channels=3, kernel_size=3, stride=1, padding=1)\n        self.relu2 = nn.ReLU()\n        \n    def forward(self, x):\n        out = self.conv1(x)\n        out = self.relu1(out)\n        out = self.conv2(out)\n        return self.relu2(out) + x # ReLU can be applied before or after adding the input","be821073":"simple_resnet = to_device(SimpleResidualBlock(), device)\n\nfor images, labels in train_dl:\n    out = simple_resnet(images)\n    print(out.shape)\n    break\n    \ndel simple_resnet, images, labels\ntorch.cuda.empty_cache()","3c9d9ddb":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], last_lr: {:.5f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_acc']))","e605b2fe":"def conv_block(in_channels, out_channels, pool=False):\n    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1), \n              nn.BatchNorm2d(out_channels), \n              nn.ReLU(inplace=True)]\n    if pool: layers.append(nn.MaxPool2d(2))\n    return nn.Sequential(*layers)\n\nclass ResNet9(ImageClassificationBase):\n    def __init__(self, in_channels, num_classes):\n        super().__init__()\n        \n        self.conv1 = conv_block(in_channels, 64)\n        self.conv2 = conv_block(64, 128, pool=True)\n        self.res1 = nn.Sequential(conv_block(128, 128), conv_block(128, 128))\n        \n        self.conv3 = conv_block(128, 256, pool=True)\n        self.conv4 = conv_block(256, 512, pool=True)\n        self.res2 = nn.Sequential(conv_block(512, 512), conv_block(512, 512))\n        \n        self.classifier = nn.Sequential(nn.MaxPool2d(4), \n                                        nn.Flatten(), \n                                        nn.Linear(512, num_classes))\n        \n    def forward(self, xb):\n        out = self.conv1(xb)\n        out = self.conv2(out)\n        out = self.res1(out) + out\n        out = self.conv3(out)\n        out = self.conv4(out)\n        out = self.res2(out) + out\n        out = self.classifier(out)\n        return out","427cb27b":"model = to_device(ResNet9(3, 10), device)\nmodel","7b3cd029":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","34717a6b":"history = [evaluate(model, valid_dl)]\nhistory","d49a1b67":"epochs = 8\nmax_lr = 0.01\ngrad_clip = 0.1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","c67fc868":"%%time\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, valid_dl, \n                             grad_clip=grad_clip, \n                             weight_decay=weight_decay, \n                             opt_func=opt_func)","777f6bc7":"train_time='4:07'","0b3d52c4":"def plot_accuracies(history):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');","b14e2d33":"plot_accuracies(history)","99100087":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');","43eafb29":"plot_losses(history)","20d35a9d":"def plot_lrs(history):\n    lrs = np.concatenate([x.get('lrs', []) for x in history])\n    plt.plot(lrs)\n    plt.xlabel('Batch no.')\n    plt.ylabel('Learning rate')\n    plt.title('Learning Rate vs. Batch no.');","4500737e":"plot_lrs(history)","38c5e071":"## Preparing the Data\n\nLet's begin by downloading the dataset and creating PyTorch datasets to load the data, just as we did in the previous tutorial.","24fff48d":"Let's take a look at some sample images from the training dataloader.","61117701":"## Training the model\n\nBefore we train the model, we're going to make a bunch of small but important improvements to our `fit` function:\n\n* **Learning rate scheduling**: Instead of using a fixed learning rate, we will use a learning rate scheduler, which will change the learning rate after every batch of training. There are many strategies for varying the learning rate during training, and the one we'll use is called the **\"One Cycle Learning Rate Policy\"**, which involves starting with a low learning rate, gradually increasing it batch-by-batch to a high learning rate for about 30% of epochs, then gradually decreasing it to a very low value for the remaining epochs. Learn more: https:\/\/sgugger.github.io\/the-1cycle-policy.html\n\n* **Weight decay**: We also use weight decay, which is yet another regularization technique which prevents the weights from becoming too large by adding an additional term to the loss function.Learn more: https:\/\/towardsdatascience.com\/this-thing-called-weight-decay-a7cd4bcfccab\n\n* **Gradient clipping**: Apart from the layer weights and outputs, it also helpful to limit the values of gradients to a small range to prevent undesirable changes in parameters due to large gradient values. This simple yet effective technique is called gradient clipping. Learn more: https:\/\/towardsdatascience.com\/what-is-gradient-clipping-b8e815cdfb48\n\n\nLet's define a `fit_one_cycle` function to incorporate these changes. We'll also record the learning rate used for each batch.","ca76b671":"Based on where you're running this notebook, your default device could be a CPU (`torch.device('cpu')`) or a GPU (`torch.device('cuda')`)","c18129b4":"Next, we can create data loaders for retrieving images in batches. We'll use a relatively large batch size of 500 to utlize a larger portion of the GPU RAM. You can try reducing the batch size & restarting the kernel if you face an \"out of memory\" error.","bca19b17":"We can also plot the training and validation losses to study the trend.","97cbbff5":"# Classifying CIFAR10 images using a ResNet and Regularization techniques in PyTorch\n\n### Training an image classifier from scratch to over 90% accuracy in less than 5 minutes on a single GPU\n\n#### This is part of the code I learnt at \"PyTorch: Zero to GANs\" from Jovial.ml. Link https:\/\/jovian.ml\/aakashns\/05b-cifar10-resnet\n\nThis post is the sixth in a series of tutorials on building deep learning models with PyTorch, an open source neural networks library. Check out the full series:\n\n1. [PyTorch Basics: Tensors & Gradients](https:\/\/jovian.ml\/aakashns\/01-pytorch-basics)\n2. [Linear Regression & Gradient Descent](https:\/\/jovian.ml\/aakashns\/02-linear-regression)\n3. [Image Classfication using Logistic Regression](https:\/\/jovian.ml\/aakashns\/03-logistic-regression) \n4. [Training Deep Neural Networks on a GPU](https:\/\/jovian.ml\/aakashns\/04-feedforward-nn)\n5. [Image Classification using Convolutional Neural Networks](https:\/\/jovian.ml\/aakashns\/05-cifar10-cnn)\n6. [Data Augmentation, Regularization and ResNets](https:\/\/jovian.ml\/aakashns\/05b-cifar10-resnet)\n7. [Generating Images using Generative Adverserial Networks](https:\/\/jovian.ml\/aakashns\/06-mnist-gan)\n\n\nThis notebook is an extension to the tutorial [Image Classification using CNNs in PyTorch](https:\/\/jovian.ml\/aakashns\/05-cifar10-cnn), where we trained a deep convolutional neural network to classify images from the CIFAR10 dataset with around 75% accuracy. Here are some images from the dataset:\n\n![cifar10](https:\/\/miro.medium.com\/max\/709\/1*LyV7_xga4jUHdx4_jHk1PQ.png)\n\n\nIn this tutorial, we'll use the following techniques to achieve over 90% accuracy in less than 5 minutes:\n\n- Data normalization\n- Data augmentation\n- Residual connections\n- Batch normalization\n- Learning rate scheduling\n- Weight Decay\n- Gradient clipping\n- Adam optimizer","cab25b40":"We're now ready to train our model. Instead of SGD (stochastic gradient descent), we'll use the Adam optimizer which uses techniques like momentum and adaptive learning rates for faster training. You can learn more about optimizers here: https:\/\/ruder.io\/optimizing-gradient-descent\/index.html","d6c57d2f":"This seeming small change produces a drastic improvement in the performance of the model. Also, after each convolutional layer, we'll add a batch normalization layer, which normalizes the outputs of the previous layer. \n\nGo through the following blog posts to learn more:\n\n* Why and how residual blocks work: https:\/\/towardsdatascience.com\/residual-blocks-building-blocks-of-resnet-fd90ca15d6ec\n* Batch normalization and dropout explained: https:\/\/towardsdatascience.com\/batch-normalization-and-dropout-in-neural-networks-explained-with-pytorch-47d7a8459bcd\n\nWe will use the ResNet9 architecture, as described in [this blog series](https:\/\/www.myrtle.ai\/2018\/09\/24\/how_to_train_your_resnet\/) :\n\n![resnet-9](https:\/\/github.com\/lambdal\/cifar10-fast\/raw\/master\/net.svg?sanitize=true)","199c0832":"The colors seem out of place because of the normalization. Note that normalization is also applied during inference. If you look closely, you can see the cropping and reflection padding in some of the images. Horizontal flip is a bit difficult to detect from visual inspection.\n\n## Using a GPU\n\nTo seamlessly use a GPU, if one is available, we define a couple of helper functions (`get_default_device` & `to_device`) and a helper class `DeviceDataLoader` to move our model & data to the GPU as required. These are described in more detail in a [previous tutorial](https:\/\/jovian.ml\/aakashns\/04-feedforward-nn#C21).","2d9dcdf3":"Our model trained to over **90% accuracy in just 5 minutes**! Try playing around with the data augmentations, network architecture & hyperparameters to achive the following results:\n\n1. 94% accuracy in under 10 minutes (easy)\n2. 90% accuracy in under 2.5 minutes (intermediate)\n3. 94% accuracy in under 5 minutes (hard)\n\n\nLet's plot the valdation set accuracies to study how the model improves over time.","b5fd6141":"We can now wrap our training and validation data loaders using `DeviceDataLoader` for automatically transferring batches of data to the GPU (if available).","786e15a6":"## System Setup\n\nThis notebook is hosted on [Jovian.ml](https:\/\/www.jovian.ml), a platform for sharing data science projects. If you want to follow along and run the code as you read, you can choose the \"Run on Kaggle\" option from the \"Run\" dropdown above. Remember select \"GPU\" as the accelerator and turn on internet from the sidebar within the Kaggle notebook.\n\nOtherwise, to run the code on your machine, you can clone the notebook, install the required dependencies using [conda](https:\/\/conda.io), and start Jupyter by running the following commands:\n\n```\npip install jovian --upgrade               # Install the jovian library \njovian clone aakashns\/05b-cifar10-resnet   # Download notebook & dependencies\ncd 05b-cifar10-resnet                      # Enter the created directory \nconda create -n 05b-cifar10-resnet         # Create virtual env\nconda activate 05b-cifar10-resnet          # Activate virtual env\nconda install jupyter                      # Install Jupyter\njupyter notebook                           # Start Jupyter\n```\n\nFor a more detailed explanation of the above steps, check out the System setup section in the [first notebook](https:\/\/jovian.ml\/aakashns\/01-pytorch-basics). Before you start executing the code below, you may want to clear the cell outputs by selecting \"Kernel > Restart and Clear Output\" from the Jupyter notebook menu bar, to avoid confusion.\n\nWe begin by importing the required modules & libraries.","2cb7f449":"It's clear from the trend that our model isn't overfitting to the training data just yet. Finally, let's visualize how the learning rate changed over time, batch-by-batch over all the epochs.","0c490c7f":"## Model with Residual Blocks and Batch Normalization\n\nOne of the key changes to our CNN model this time is the addition of the resudial block, which adds the original input back to the output feature map obtained by passing the input through one or more convolutional layers.\n\n![](https:\/\/miro.medium.com\/max\/1140\/1*D0F3UitQ2l5Q0Ak-tjEdJg.png)\n\nHere is a very simply Residual block:","a5addf97":"## Summary and Further Reading\n\nHere's a summary of the different techniques used in this tutorial to improve our model performance and reduce the training time:\n\n\n* **Data normalization**: We normalized the image tensors by subtracting the mean and dividing by the standard deviation of pixels across each channel. Normalizing the data prevents the pixel values from any one channel from disproportionately affecting the losses and gradients. [Learn more](https:\/\/medium.com\/@ml_kid\/what-is-transform-and-transform-normalize-lesson-4-neural-networks-in-pytorch-ca97842336bd)\n\n* **Data augmentation**: We applied random transformations while loading images from the training dataset. Specifically, we will pad each image by 4 pixels, and then take a random crop of size 32 x 32 pixels, and then flip the image horizontally with a 50% probability. [Learn more](https:\/\/www.analyticsvidhya.com\/blog\/2019\/12\/image-augmentation-deep-learning-pytorch\/)\n\n* **Residual connections**: One of the key changes to our CNN model was the addition of the resudial block, which adds the original input back to the output feature map obtained by passing the input through one or more convolutional layers. We used the ResNet9 architecture [Learn more](https:\/\/towardsdatascience.com\/residual-blocks-building-blocks-of-resnet-fd90ca15d6ec).\n\n* **Batch normalization**: After each convolutional layer, we added a batch normalization layer, which normalizes the outputs of the previous layer. This is somewhat similar to data normalization, except it's applied to the outputs of a layer, and the mean and standard deviation are learned parameters. [Learn more](https:\/\/towardsdatascience.com\/batch-normalization-and-dropout-in-neural-networks-explained-with-pytorch-47d7a8459bcd)\n\n* **Learning rate scheduling**: Instead of using a fixed learning rate, we will use a learning rate scheduler, which will change the learning rate after every batch of training. There are [many strategies](https:\/\/pytorch.org\/docs\/stable\/optim.html#how-to-adjust-learning-rate) for varying the learning rate during training, and we used the \"One Cycle Learning Rate Policy\". [Learn more](https:\/\/sgugger.github.io\/the-1cycle-policy.html)\n\n* **Weight Decay**: We added weight decay to the optimizer, yet another regularization technique which prevents the weights from becoming too large by adding an additional term to the loss function. [Learn more](https:\/\/towardsdatascience.com\/this-thing-called-weight-decay-a7cd4bcfccab)\n\n* **Gradient clipping**: We also added gradient clippint, which helps limit the values of gradients to a small range to prevent undesirable changes in model parameters due to large gradient values during training.  [Learn more.](https:\/\/towardsdatascience.com\/what-is-gradient-clipping-b8e815cdfb48#63e0)\n\n* **Adam optimizer**: Instead of SGD (stochastic gradient descent), we used the Adam optimizer which uses techniques like momentum and adaptive learning rates for faster training. There are many other optimizers to choose froma and experiment with. [Learn more.](https:\/\/ruder.io\/optimizing-gradient-descent\/index.html)\n\n\nAs an exercise, you should try applying each technique independently and see how much each one affects the performance and training time. As you try different experiments, you will start to cultivate the intuition for picking the right architectures, data augmentation & regularization techniques.\n","3863208f":"There are a few important changes we'll make while creating the PyTorch datasets:\n\n1. **Use test set for validation**: Instead of setting aside a fraction (e.g. 10%) of the data from the training set for validation, we'll simply use the test set as our validation set. This just gives a little more data to train with. In general, once you have picked the best model architecture & hypeparameters using a fixed validation set, it is a good idea to retrain the same model on the entire dataset just to give it a small final boost in performance.\n2. **Channel-wise data normalization**: We will normalize the image tensors by subtracting the mean and dividing by the standard deviation across each channel. As a result, the mean of the data across each channel is 0, and standard deviation is 1. Normalizing the data prevents the values from any one channel from disproportionately affecting the losses and gradients while training, simply by having a higher or wider range of values that others.\n3. **Randomized data augmentations**: We will apply randomly chosen transformations while loading images from the training dataset. Specifically, we will pad each image by 4 pixels, and then take a random crop of size 32 x 32 pixels, and then flip the image horizontally with a 50% probability. Since the transformation will be applied randomly and dynamically each time a particular image is loaded, the model sees slightly different images in each epoch of training, which allows it generalize better.\n\n![data-augmentation](https:\/\/imgaug.readthedocs.io\/en\/latest\/_images\/cropandpad_percent.jpg)","5757465b":"As expected, the learning rate starts at a low value, and gradually increases for 30% of the iterations to a maximum value of `0.01`, and then gradually decreases to a very small value."}}