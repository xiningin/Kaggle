{"cell_type":{"0534d9be":"code","61f61d93":"code","ea51fece":"code","e19fa46c":"code","b4adc280":"code","a17ef8d5":"code","9853979f":"code","ad4f80e6":"code","70b49869":"code","4e7473e0":"code","eab77af0":"code","13e06b4d":"code","1a0237ce":"code","16e7ca1e":"code","6974787b":"code","ce0ea8a4":"code","08237146":"code","ba82202b":"code","2953cae5":"code","f4752933":"code","1663dfe8":"code","56b63852":"code","3cab69cc":"code","9d64a811":"code","ce13dbd5":"code","cc3272fe":"code","7052a8f1":"code","465ca16a":"code","9f948175":"code","b9e1e035":"code","62c35e3d":"code","ccfca693":"code","03a09bb6":"code","4f5a1d65":"code","816a41ae":"code","7a66532a":"code","855b2da3":"code","3933c6e9":"code","aaaa3428":"code","178dcb97":"code","933b3cf0":"code","a4a71034":"code","3057ee7d":"code","d05507f2":"code","c654624c":"code","b3ed0788":"code","eaae673b":"code","08be090b":"code","821b9090":"code","1d428135":"code","ad8df8d8":"code","a47f83b3":"code","774a0a83":"code","569f605f":"code","3da36e2e":"code","d160c3ae":"code","8136e910":"code","63f917aa":"code","a2c4b577":"code","88aa93ba":"code","a1f3b714":"code","0efdb50d":"code","f484973f":"code","33133a1e":"code","ef4b5e0a":"code","80884c95":"code","adccd8f8":"code","a0817a76":"code","b4335de1":"code","16d747f5":"code","e9eee136":"code","f68c0202":"code","581f48fd":"code","5b0d51f1":"code","e81c48d7":"code","18704f9b":"code","ef243d42":"code","35d3dd75":"code","c8dd6f2a":"code","c25db687":"code","92f5c1da":"code","8c126882":"code","51c949cc":"code","e39a4a79":"code","ddf86aa1":"markdown","c86dae8a":"markdown","9b79287d":"markdown","e756c491":"markdown","2df7e8f0":"markdown","b9a953b7":"markdown","a07a9468":"markdown","eca8c411":"markdown","5af05817":"markdown","bd869f5b":"markdown","9a0bbce0":"markdown","e4d88d83":"markdown","61444b49":"markdown","8dbbf1ab":"markdown","b8f836f8":"markdown","14df66da":"markdown","fee81c8a":"markdown","958a5cbe":"markdown","0d1f46cc":"markdown","ec0bf938":"markdown","632e6358":"markdown","3dd65617":"markdown"},"source":{"0534d9be":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn import preprocessing \nfrom category_encoders import *\nfrom sklearn.preprocessing import LabelEncoder\n%matplotlib inline\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import datasets, linear_model, metrics\nfrom sklearn.metrics import  confusion_matrix\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix","61f61d93":"df = pd.read_csv(\"..\/input\/lung-cancer\/survey lung cancer.csv\")\ndf","ea51fece":"\n# Exploratory Data Analysis\ndef libraries():\n    global pd,np\n    import pandas as pd\n    import numpy as np\ndef load():\n    global df\n    df=pd.read_csv('..\/input\/lung-cancer\/survey lung cancer.csv')\n    \ndef top_rows(value):\n    print('\\033[1m'+ 'displaying the', value, 'rows from top'+'\\033[0m')\n    a=df.head(value)\n    print(a,'\\n')\n    \ndef bottom_rows(value):\n    print('\\033[1m'+'displaying the', value, 'rows from bottom'+'\\033[0m')\n    b=df.tail(value)\n    print(b,'\\n')\n    \ndef rows_columns():\n    print('\\033[1m'+'Shape of the Data set'+'\\033[0m')\n    c=df.shape\n    print(c,'\\n')\n    \ndef col_names():\n    print('\\033[1m'+'Column Names in the Data set'+'\\033[0m')\n    d=df.columns\n    print(d,'\\n')\n    \ndef information():\n    print('\\033[1m'+'Quick Overview of DataSet(info)'+'\\033[0m')\n    e = df.info()\n    print(e,'\\n')\n\ndef sizee():\n    print('\\033[1m'+'No.of Elements in the DataSet'+'\\033[0m')\n    f = df.size\n    print(f,'\\n')\n\ndef ndimension():\n    print('\\033[1m'+'Dimensions in your dataframe'+'\\033[0m')\n    g = df.ndim\n    print(g,'\\n')\n    \ndef stats_summary():\n    print('\\033[1m'+'Staistical Summary of DataSet'+'\\033[0m')\n    h = df.describe()\n    print(h,'\\n')\n    \ndef null_values():\n    print('\\033[1m'+'Number of Missing values in each column'+'\\033[0m')\n    i = df.isnull().sum()\n    print(i,'\\n')\n    \ndef n_unique():\n    print('\\033[1m'+'Number of unique elements'+'\\033[0m')\n    j = df.nunique()\n    print(j,'\\n')\n    \ndef memory_use():\n    print('\\033[1m'+'Memory used by all colomns in bytes'+'\\033[0m')\n    k = df.memory_usage()\n    print(k,'\\n')\n    \ndef is_na(value):\n    print('\\033[1m'+'Dataframe filled with boolean values with true indicating missing values'+'\\033[0m')\n    l = df.isna().head(value)\n    print(l,'\\n')\n    \ndef duplicate():\n    print('\\033[1m'+'Boolean Series denoting duplicate rows'+'\\033[0m')\n    m = df.duplicated().sum()\n    print(m,'\\n')\n    \ndef valuecounts():\n    print('\\033[1m'+'Series containing count of unique values'+'\\033[0m')\n    n = df.value_counts()\n    print(n,'\\n')\n\ndef datatypes():\n    print('\\033[1m'+'Datatype of each column'+'\\033[0m')\n    o = df.dtypes\n    print(o,'\\n')\n    \ndef correlation():\n    print('\\033[1m'+'Correalation between all columns in DataFrame'+'\\033[0m')\n    p = df.corr()\n    print(p,'\\n')\n    \ndef nonnull_count():\n    print('\\033[1m'+'Count of non-null values'+'\\033[0m')\n    q = df.count()\n    print(q,'\\n')\n    \ndef eda():\n    load()\n    value= 5 \n    datatypes()\n    top_rows(value)\n    bottom_rows(value)\n    rows_columns()\n    col_names()\n    information()\n    sizee()\n    ndimension()\n    stats_summary()\n    null_values()\n    n_unique()\n    memory_use()\n    is_na(value)\n    nonnull_count()\n    duplicate()\n    valuecounts()\n    correlation()\n    \n    \n    \n        \ndef stats_u(data,col):\n    if data[col].dtype == \"float64\":\n        print(col,\"has Quantitative data\")\n        mean_value=data[col].mean()\n        print('mean of',col,'column',mean_value)\n        max_value = data[col].max()\n        print('Maximum value of',col,'column',max_value)\n        min_value = data[col].min()\n        print('Minimum value of',col,'column',min_value)\n        median_value = data[col].median(skipna = True)\n        print('median of',col,'column',median_value)\n        std_value = data[col].std()\n        print('standard deviation of',col,'column',std_value)\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        print('quartile 1 of',col,'column is',q1)\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        print('quartile 2 of',col,'column is',q2)\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        print('quartile 3 of',col,'column is',q3)\n        q4 = data[col].quantile(1,interpolation='nearest')\n        print('quartile 4 of',col,'column is',q4)\n        IQR = q3 -q1\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        print('Lower Limit Point:',LLP)\n        print('Upper Limit Point:',ULP)\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers\")\n        else:\n            print(\"There are outliers\")\n            print(data[data[col]<LLP][col])\n            print(data[data[col]>ULP][col])\n            \n    elif data[col].dtype == \"int64\":\n        print(col,\"has Quantitative data\")\n        mean_value=data[col].mean()\n        print('mean of',col,'column',mean_value)\n        median_value = data[col].median(skipna = True)\n        print('median of',col,'column',median_value)\n        std_value = data[col].std()\n        print('standard deviation of',col,'column',std_value)\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        print('quartile 1 of',col,'column is',q1)\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        print('quartile 2 of',col,'column is',q2)\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        print('quartile 3 of',col,'column is',q3)\n        q4 = data[col].quantile(1,interpolation='nearest')\n        print('quartile 4 of',col,'column is',q4)\n        IQR = q3 -q1\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        print('Lower Limit Point:',LLP)\n        print('Upper Limit Point:',ULP)\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers\")\n        else:\n            print(\"There are outliers\")\n            print(\"Outliers are:\")\n            print(data[data[col]<LLP][col])\n            print(data[data[col]>ULP][col])\n    else:\n        print(col,'has Qualitative Data')\n        z = df[col].mode()\n        print('mode of',col,'column:\\n',z)\n        print('Count of mode is:\\n',df[col].value_counts())\n        print('Unique strings in',col,'are',data[col].nunique())\n        if(data[col].nunique() == 1):\n            print(col,'has same string')\n        elif(data[col].nunique() == 2):\n            print(col,'has binary strings')\n        else:\n            print(col,'has multi stings')\n\n\nlibraries()\neda()\n\nprint(\"----------------------------------------------------------------------------------------------------------------------\")\nprint('\\033[1m'+'Summary Of DataSet'+'\\033[0m')\nprint('\\033[1m'+'DataTypes in the DataSet:\\n'+'\\033[0m',df.dtypes)\nprint('\\033[1m'+'Columns in DataSet:'+'\\033[0m',df.columns)\nprint('\\033[1m'+'Shape of DataSet:'+'\\033[0m',df.shape)\nprint('\\033[1m'+'Size of DataSet:'+'\\033[0m',df.size)\nprint('\\033[1m'+'Dimension of DataSet:'+'\\033[0m',df.ndim)\nprint('\\033[1m'+'Total Memory used in DataSet:'+'\\033[0m',df.memory_usage().sum())\nprint('\\033[1m'+'Total Number of missing values in DataSet:'+'\\033[0m',df.isnull().sum().sum())\nprint('\\033[1m'+'Total Number of Unique values in DataSet:'+'\\033[0m',df.nunique().sum())\nprint('\\033[1m'+'Total Number of non null values in DataSet:'+'\\033[0m',df.count().sum())\nprint('\\033[1m'+'Total Number of duplicate rows in DataSet:'+'\\033[0m',df.duplicated().sum())\nprint(\"----------------------------------------------------------------------------------------------------------------------\")\nprint('\\033[1m'+'Summary Of Each Colomn'+'\\033[0m')\nprint(\"\\n\")\ncols=df.columns\ncols\nfor i in cols:\n    print('\\033[1m'+i+'\\033[0m')\n    stats_u(df,i)\n    print(\"\\n\")\n            ","e19fa46c":"df.head()","b4adc280":"df.tail()","a17ef8d5":"df.dtypes","9853979f":"df.columns","ad4f80e6":"df.shape","70b49869":"df.size","4e7473e0":"df.info()","eab77af0":"df.describe()","13e06b4d":"df.isnull().sum()","1a0237ce":"df.skew()","16e7ca1e":"df.corr()","6974787b":"! pip install Autoviz","ce0ea8a4":"! pip install xlrd","08237146":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\ndf_av = AV.AutoViz(\"..\/input\/lung-cancer\/survey lung cancer.csv\")","ba82202b":"df.rename(columns = {'GENDER' : 'GENDER', 'AGE' : 'AGE', 'SMOKING' : 'SMOKING', 'YELLOW_FINGERS' : 'YELLOW_FINGERS', 'ANXIETY' : 'ANXIETY',\n       'PEER_PRESSURE' : 'PEER_PRESSURE', 'CHRONIC DISEASE' : 'CHRONIC DISEASE', 'FATIGUE ' : 'FATIGUE', 'ALLERGY ' : 'ALLERGY', 'WHEEZING' : 'WHEEZING',\n       'ALCOHOL CONSUMING' : 'ALCOHOL CONSUMING', 'COUGHING' : 'COUGHING', 'SHORTNESS OF BREATH' : 'SHORTNESS OF BREATH',\n       'SWALLOWING DIFFICULTY' : 'SWALLOWING DIFFICULTY', 'CHEST PAIN' : 'CHEST PAIN', 'LUNG_CANCER': 'LUNG_CANCER'}, inplace = True)","2953cae5":"plt.figure(figsize=(16,9))\nax = sns.heatmap(df.corr(),annot = True,cmap = 'viridis')\nplt.show()","f4752933":"df['GENDER'].value_counts()\n# balanced column","1663dfe8":"sns.countplot(x = 'GENDER',data = df)\nplt.show()","56b63852":"df['SMOKING'].value_counts()\n# balanced column\n# number of smoking persons > number of non smoking persons","3cab69cc":"sns.countplot(x = 'SMOKING',data = df)\nplt.show()","9d64a811":"df['YELLOW_FINGERS'].value_counts()\n# balanced column\n# people with yellow fingers > people with not yellow fingers","ce13dbd5":"sns.countplot(x = 'YELLOW_FINGERS', data = df)\nplt.show()","cc3272fe":"df['ANXIETY'].value_counts()\n# alomost equal with favouring anxiety = TRUE only one person difference ","7052a8f1":"sns.countplot(x = 'ANXIETY', data = df)\nplt.show()","465ca16a":"df['PEER_PRESSURE'].value_counts()\n# alomost equal with favouring peer pressure = TRUE only one person difference ","9f948175":"sns.countplot(x = 'PEER_PRESSURE',data = df)\nplt.show()","b9e1e035":"df['CHRONIC DISEASE'].value_counts()\n# alomost equal with favouring peer pressure = TRUE only one person difference ","62c35e3d":"sns.countplot(x = 'CHRONIC DISEASE',data = df)\nplt.show()","ccfca693":"df['FATIGUE'].value_counts()\n# people with Fatigue are more","03a09bb6":"sns.countplot(x = 'FATIGUE',data = df)\nplt.show()","4f5a1d65":"df['ALLERGY'].value_counts()\n# people with allergy are more","816a41ae":"sns.countplot(x = 'ALLERGY',data = df)\nplt.show()","7a66532a":"df['WHEEZING'].value_counts()\n# people with wheezing are more","855b2da3":"sns.countplot(x = 'WHEEZING',data = df)\nplt.show()","3933c6e9":"df['ALCOHOL CONSUMING'].value_counts()\n# people with alocohol consuming are more","aaaa3428":"sns.countplot(x = 'ALCOHOL CONSUMING',data = df)\nplt.show()","178dcb97":"df['COUGHING'].value_counts()\n# people with cough are more","933b3cf0":"sns.countplot(x = 'COUGHING',data = df)\nplt.show()","a4a71034":"df['SHORTNESS OF BREATH'].value_counts()\n# people with shoetness of breath are more","3057ee7d":"sns.countplot(x = 'SHORTNESS OF BREATH',data = df)\nplt.show()","d05507f2":"df['SWALLOWING DIFFICULTY'].value_counts()\n# people with swallowing difficulty are more","c654624c":"sns.countplot(x = 'SWALLOWING DIFFICULTY',data = df)\nplt.show()","b3ed0788":"df['CHEST PAIN'].value_counts()\n# people with chest pain are more","eaae673b":"sns.countplot(x = 'CHEST PAIN',data = df)\nplt.show()","08be090b":"df['LUNG_CANCER'].value_counts()\n# people with lung cancer are more","821b9090":"sns.countplot(x = 'LUNG_CANCER',data = df)\nplt.show()","1d428135":"df","ad8df8d8":"obj = ['GENDER','SMOKING', 'YELLOW_FINGERS', 'ANXIETY',\n       'PEER_PRESSURE', 'CHRONIC DISEASE', 'FATIGUE', 'ALLERGY', 'WHEEZING',\n       'ALCOHOL CONSUMING', 'COUGHING', 'SHORTNESS OF BREATH',\n       'SWALLOWING DIFFICULTY', 'CHEST PAIN', 'LUNG_CANCER']","a47f83b3":"# Age has no corelation or anything varying with all other columns\nfor i in obj:\n    data=df.copy()\n    data.groupby(i)['AGE'].mean().plot.bar()\n    plt.xlabel(i)\n    plt.ylabel('AGE')\n    plt.title(i)\n    plt.show()","774a0a83":"# I found no relations\nfor i in range(len(obj)):\n    for j in range(1):\n        x = obj[i]\n        if obj[j] != x:\n            sns.barplot(x= x,y='AGE',hue=obj[j],data=df)\n            plt.legend(bbox_to_anchor=(1.1, 1.05))\n            plt.show()","569f605f":"df=pd.get_dummies(data=df,columns=['LUNG_CANCER'],drop_first=True)\ndf","3da36e2e":"df1 = df.groupby('AGE').agg({ 'GENDER' : 'count', 'SMOKING' : 'sum', 'YELLOW_FINGERS' : 'sum', 'ANXIETY' : 'sum',\n       'PEER_PRESSURE' : 'sum', 'CHRONIC DISEASE' : 'sum', 'FATIGUE' : 'sum', 'ALLERGY' : 'sum', 'WHEEZING' : 'sum',\n       'ALCOHOL CONSUMING' : 'sum', 'COUGHING' : 'sum', 'SHORTNESS OF BREATH' : 'sum',\n       'SWALLOWING DIFFICULTY' : 'sum', 'CHEST PAIN' : 'sum', 'LUNG_CANCER_YES' : 'sum'})\ndf1","d160c3ae":"df2 = df.groupby('GENDER').agg({ 'AGE' : 'count', 'SMOKING' : 'sum', 'YELLOW_FINGERS' : 'sum', 'ANXIETY' : 'sum',\n       'PEER_PRESSURE' : 'sum', 'CHRONIC DISEASE' : 'sum', 'FATIGUE' : 'sum', 'ALLERGY' : 'sum', 'WHEEZING' : 'sum',\n       'ALCOHOL CONSUMING' : 'sum', 'COUGHING' : 'sum', 'SHORTNESS OF BREATH' : 'sum',\n       'SWALLOWING DIFFICULTY' : 'sum', 'CHEST PAIN' : 'sum', 'LUNG_CANCER_YES' : 'sum'})\ndf2","8136e910":"px.bar(data_frame=df2, barmode='group',\n       title = \"<b>Gender wise Analyzing<\/b>\",template=\"plotly_dark\")","63f917aa":"df=pd.get_dummies(data=df,columns=['GENDER'],drop_first=True)\ndf","a2c4b577":"df3 = df.groupby('SMOKING').agg({ 'GENDER_M' : 'sum','AGE' : 'count', 'SMOKING' : 'sum', 'YELLOW_FINGERS' : 'sum', 'ANXIETY' : 'sum',\n       'PEER_PRESSURE' : 'sum', 'CHRONIC DISEASE' : 'sum', 'FATIGUE' : 'sum', 'ALLERGY' : 'sum', 'WHEEZING' : 'sum',\n       'ALCOHOL CONSUMING' : 'sum', 'COUGHING' : 'sum', 'SHORTNESS OF BREATH' : 'sum',\n       'SWALLOWING DIFFICULTY' : 'sum', 'CHEST PAIN' : 'sum', 'LUNG_CANCER_YES' : 'sum'})\ndf3\n# 1 = NO\n# 2 = YES","88aa93ba":"px.bar(data_frame=df3, barmode='group',\n       title = \"<b>smoking wise Analyzing<\/b>\",template=\"plotly_dark\")","a1f3b714":"df4 = df.groupby('YELLOW_FINGERS').agg({ 'GENDER_M' : 'sum','AGE' : 'count', 'SMOKING' : 'sum', 'YELLOW_FINGERS' : 'sum', 'ANXIETY' : 'sum',\n       'PEER_PRESSURE' : 'sum', 'CHRONIC DISEASE' : 'sum', 'FATIGUE' : 'sum', 'ALLERGY' : 'sum', 'WHEEZING' : 'sum',\n       'ALCOHOL CONSUMING' : 'sum', 'COUGHING' : 'sum', 'SHORTNESS OF BREATH' : 'sum',\n       'SWALLOWING DIFFICULTY' : 'sum', 'CHEST PAIN' : 'sum', 'LUNG_CANCER_YES' : 'sum'})\ndf4\n# 1 = NO\n# 2 = YES","0efdb50d":"px.bar(data_frame=df4, barmode='group',\n       title = \"<b>yelow fingers wise Analyzing<\/b>\",template=\"plotly_dark\")","f484973f":"df5 = df.groupby('ANXIETY').agg({ 'GENDER_M' : 'sum','AGE' : 'count', 'SMOKING' : 'sum', 'YELLOW_FINGERS' : 'sum', 'ANXIETY' : 'sum',\n       'PEER_PRESSURE' : 'sum', 'CHRONIC DISEASE' : 'sum', 'FATIGUE' : 'sum', 'ALLERGY' : 'sum', 'WHEEZING' : 'sum',\n       'ALCOHOL CONSUMING' : 'sum', 'COUGHING' : 'sum', 'SHORTNESS OF BREATH' : 'sum',\n       'SWALLOWING DIFFICULTY' : 'sum', 'CHEST PAIN' : 'sum', 'LUNG_CANCER_YES' : 'sum'})\ndf5\n# 1 = NO\n# 2 = YES","33133a1e":"px.bar(data_frame=df5, barmode='group',\n       title = \"<b>Anxietyr wise Analyzing<\/b>\",template=\"plotly_dark\")","ef4b5e0a":"''' Plot a Shifted Correlation Matrix '''\n# Diagonal correlation is always unity & less relevant, shifted variant shows only relevant cases\ndef corrMat(df,id=False):\n    \n    corr_mat = df.corr().round(2)\n    f, ax = plt.subplots(figsize=(12,7))\n    mask = np.triu(np.ones_like(corr_mat, dtype=bool))\n    mask = mask[1:,:-1]\n    corr = corr_mat.iloc[1:,:-1].copy()\n    sns.heatmap(corr,mask=mask,vmin=-0.3,vmax=0.3,center=0, \n                cmap='RdPu_r',square=False,lw=2,annot=True,cbar=False)\n#     bottom, top = ax.get_ylim() \n#     ax.set_ylim(bottom + 0.5, top - 0.5) \n    ax.set_title('Shifted Linear Correlation Matrix')\n    \ncorrMat(df)","80884c95":"'''Plot Correlation to Target Variable only'''\ndef corrMat2(df,target='LUNG_CANCER_YES',figsize=(9,0.5),ret_id=False):\n    \n    corr_mat = df.corr().round(2);shape = corr_mat.shape[0]\n    corr_mat = corr_mat.transpose()\n    corr = corr_mat.loc[:, df.columns == target].transpose().copy()\n    if(ret_id is False):\n        f, ax = plt.subplots(figsize=figsize)\n        sns.heatmap(corr,vmin=-0.3,vmax=0.3,center=0, \n                     cmap='RdPu_r',square=False,lw=2,annot=True,cbar=False)\n        plt.title(f'Feature Correlation to {target}')\n    \n    if(ret_id):\n        return corr\ncorrMat2(df)","adccd8f8":"scaler = StandardScaler()\nscaler.fit(df.drop('LUNG_CANCER_YES',axis = 1))","a0817a76":"scaled_features = scaler.transform(df.drop('LUNG_CANCER_YES',axis = 1))\ndf_feat = pd.DataFrame(scaled_features,columns = ['AGE', 'SMOKING', 'YELLOW_FINGERS', 'ANXIETY', 'PEER_PRESSURE',\n       'CHRONIC DISEASE', 'FATIGUE', 'ALLERGY', 'WHEEZING',\n       'ALCOHOL CONSUMING', 'COUGHING', 'SHORTNESS OF BREATH',\n       'SWALLOWING DIFFICULTY', 'CHEST PAIN',  'GENDER_M'])\ndf_feat.head()","b4335de1":"X = df_feat\ny = df['LUNG_CANCER_YES']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","16d747f5":"knn = KNeighborsClassifier(n_neighbors = 4)\nknn.fit(X_train,y_train)","e9eee136":"pred = knn.predict(X_test)\npred","f68c0202":"print(confusion_matrix(y_test,pred))","581f48fd":"print(classification_report(y_test,pred))","5b0d51f1":"error_rate= []\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors = i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","e81c48d7":"plt.figure(figsize = (10,6))\nplt.plot(range(1,40),error_rate,color = 'blue',linestyle = '--',marker = 'o',markerfacecolor='red',markersize = 10)\nplt.title('Error Rate vs K')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","18704f9b":"print(metrics.accuracy_score(y_test, pred))","ef243d42":"forest= RandomForestClassifier(n_estimators =40, random_state = 0)\nforest.fit(X_train,y_train)  \ny_pred = forest.predict(X_test)\nforest.score(X_test,y_test)","35d3dd75":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","c8dd6f2a":"pred = logmodel.predict(X_test)","c25db687":"print(classification_report(y_test,pred))\nprint(confusion_matrix(y_test,pred))","92f5c1da":"logmodel.score(X_test,y_test)","8c126882":"#Cat boost\nfrom catboost import CatBoostClassifier\n\ncat = CatBoostClassifier(iterations = 30, learning_rate = 0.1)\ncat.fit(X_train, y_train)\n\ny_pred = cat.predict(X_test)","51c949cc":"cat_train_acc = accuracy_score(y_train, cat.predict(X_train))\ncat_test_acc = accuracy_score(y_test, y_pred)\n\nprint(f\"Training Accuracy of Cat Boost Classifier Model is {cat_train_acc}\")\nprint(f\"Test Accuracy of Cat Boost Classifier Model is {cat_test_acc}\")","e39a4a79":"from xgboost import XGBClassifier\n\nxgb = XGBClassifier(booster = 'gblinear', learning_rate = 1, n_estimators = 10)\nxgb.fit(X_train, y_train)\n\ny_pred = xgb.predict(X_test)\n\nxgb_train_acc = accuracy_score(y_train, xgb.predict(X_train))\nxgb_test_acc = accuracy_score(y_test, y_pred)\n\nprint(f\"Training Accuracy of XGB Model is {xgb_train_acc}\")\nprint(f\"Test Accuracy of XGB Model is {xgb_test_acc}\")","ddf86aa1":"# Data visualization","c86dae8a":"# Exploratory Data Analysis","9b79287d":"# Prediction of lung cancer using randomforest","e756c491":"# Exploratory Data Analysis using userdefined function","2df7e8f0":"## Renaming columns because there are spaces after some column names","b9a953b7":"## from this we can say that\n## males are morethan females, mean age of males is 0.4 than females\n## males smoke morethan females\n## yellow fingers are more for females\n## anxiety is also more for females(only one difference)\n## peer presure is also more for females\n## chronic disease is also for for females\n## fatigue is more for males\n## allergy is more for males\n## wheezing is more for males\n## males consume for alocohol than females\n## males cough for than femlaes\n## shortness of breath is more for males\n## swallowing diffculty is more for females\n## chest pain is more for females\n## Most of the males having lung cancer","a07a9468":"# Encoding","eca8c411":"## analysing age  with other columns","5af05817":"# Prediction using XGB Classifier","bd869f5b":"## mostly females have yellow fingers so any person with yellow fingers have high probability of getting lung cancer","9a0bbce0":"# Data visualization using Autoviz","e4d88d83":"## UPVOTE IF U LIKE","61444b49":"## smoking people have high problems and people who smoke got cancer more","8dbbf1ab":"# Loading DataSet","b8f836f8":"## mostly males are less anxiety\n## people with less anxiety are less smoking, having less yellow_fingers,less peer pressure less swallowing dificulity and less chance to get cancer","14df66da":"# Prediction of lung cancer using logistic regression","fee81c8a":"# Feature Selection","958a5cbe":"# Importing Libraries","0d1f46cc":"# Prediction using CAT BOOST","ec0bf938":"# Feature Scaling","632e6358":"# (IMPORTANT)Analysis using groupby","3dd65617":"# Prediction using KNN"}}