{"cell_type":{"271604b5":"code","7365e47e":"code","e25cbe2c":"code","160b904f":"code","ee1cf3f4":"code","c3432e31":"code","dd1a47b1":"code","e8f5d1fe":"code","46ab61bd":"code","31a72611":"code","1569e171":"code","64209d3f":"code","b2673be0":"code","9acd0573":"code","98192d03":"code","1257f722":"code","d5351df1":"code","bdcfbbc7":"code","0197c8e2":"code","0aa77454":"code","e0a1790b":"code","b41e38b8":"code","ace296af":"code","9c041acc":"code","50af852c":"code","cffbc094":"code","93c848f4":"code","cb3775c1":"code","5f3df0be":"code","a6540f4c":"code","759c57a2":"code","7b737985":"code","c13d96ef":"code","a50cb957":"code","9d03f39a":"code","411264b3":"code","9a9cbfe2":"code","7a422e8c":"code","1b27b37f":"code","5fd5d596":"code","23f69aa2":"markdown","8cc289db":"markdown","21611f20":"markdown","f0e12950":"markdown","a9bd6255":"markdown","e341048d":"markdown","adbba631":"markdown","5c68123e":"markdown","c0a75f39":"markdown","ff85686e":"markdown","38bf59d6":"markdown","9166ead7":"markdown","7891f703":"markdown","de895121":"markdown","48a9bcff":"markdown","be509697":"markdown","f05a04a5":"markdown","92e52e33":"markdown","79ea91ac":"markdown","ee8fab97":"markdown","d6ff6fab":"markdown","ddc65c65":"markdown","08d6f60e":"markdown","ba926a82":"markdown","2570d095":"markdown","9a9db8e1":"markdown","cd8c89e9":"markdown","5c5ed061":"markdown","9632d1f0":"markdown","397e69f8":"markdown","6508f7a5":"markdown","9bb5c385":"markdown","d892265d":"markdown","5dc98d9c":"markdown","0da4940c":"markdown","8429fd94":"markdown","ee327a04":"markdown","ecdef10b":"markdown","79e59c4c":"markdown","11ffa638":"markdown","a09755b7":"markdown"},"source":{"271604b5":"import numpy as np\nimport pandas as pd\n# we don't like warnings\n# you can comment the following 2 lines if you'd like to\nimport warnings\nwarnings.filterwarnings('ignore')","7365e47e":"df = pd.read_csv('..\/input\/telecom_churn.csv')\ndf.head()","e25cbe2c":"print(df.shape)","160b904f":"print(df.columns)","ee1cf3f4":"print(df.info())","c3432e31":"df['Churn'] = df['Churn'].astype('int64')","dd1a47b1":"df.describe()","e8f5d1fe":"df.describe(include=['object', 'bool'])","46ab61bd":"df['Churn'].value_counts()","31a72611":"df['Churn'].value_counts(normalize=True)","1569e171":"df['Area code'].value_counts(normalize=True)","64209d3f":"df.sort_values(by='Total day charge', ascending=False).head()","b2673be0":"df.sort_values(by=['Churn', 'Total day charge'],\n        ascending=[True, False]).head()","9acd0573":"df['Churn'].mean()","98192d03":"df[df['Churn'] == 1].mean()","1257f722":"df[df['Churn'] == 1]['Total day minutes'].mean()","d5351df1":"df[(df['Churn'] == 0) & (df['International plan'] == 'No')]['Total intl minutes'].max()","bdcfbbc7":"df.loc[0:5, 'State':'Area code']","0197c8e2":"df.iloc[0:5, 0:3]","0aa77454":"df[-1:]","e0a1790b":"df.apply(np.max) ","b41e38b8":"df[df['State'].apply(lambda state: state[0] == 'W')].head()","ace296af":"d = {'No' : False, 'Yes' : True}\ndf['International plan'] = df['International plan'].map(d)\ndf.head()","9c041acc":"df = df.replace({'Voice mail plan': d})\ndf.head()","50af852c":"columns_to_show = ['Total day minutes', 'Total eve minutes', \n                   'Total night minutes']\n\ndf.groupby(['Churn'])[columns_to_show].describe(percentiles=[])","cffbc094":"columns_to_show = ['Total day minutes', 'Total eve minutes', \n                   'Total night minutes']\n\ndf.groupby(['Churn'])[columns_to_show].agg([np.mean, np.std, np.min, \n                                            np.max])","93c848f4":"pd.crosstab(df['Churn'], df['International plan'])","cb3775c1":"pd.crosstab(df['Churn'], df['Voice mail plan'], normalize=True)","5f3df0be":"df.pivot_table(['Total day calls', 'Total eve calls', 'Total night calls'],\n               ['Area code'], aggfunc='mean')","a6540f4c":"total_calls = df['Total day calls'] + df['Total eve calls'] + \\\n              df['Total night calls'] + df['Total intl calls']\ndf.insert(loc=len(df.columns), column='Total calls', value=total_calls) \n# loc parameter is the number of columns after which to insert the Series object\n# we set it to len(df.columns) to paste it at the very end of the dataframe\n# ---\n# loc - \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u043e\u043b\u0431\u0446\u0430, \u043f\u043e\u0441\u043b\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0439 Series\n# \u043c\u044b \u0443\u043a\u0430\u0437\u0430\u043b\u0438 len(df.columns), \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u0432 \u0441\u0430\u043c\u043e\u043c \u043a\u043e\u043d\u0446\u0435\ndf.head()","759c57a2":"df['Total charge'] = df['Total day charge'] + df['Total eve charge'] + \\\n                     df['Total night charge'] + df['Total intl charge']\ndf.head()","7b737985":"# get rid of just created columns\n# ---\n# \u0438\u0437\u0431\u0430\u0432\u043b\u044f\u0435\u043c\u0441\u044f \u043e\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\ndf.drop(['Total charge', 'Total calls'], axis=1, inplace=True) \n# and here\u2019s how you can delete rows\n# ---\n# \u0430 \u0432\u043e\u0442 \u0442\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u0447\u043a\u0438\ndf.drop([1, 2]).head() ","c13d96ef":"pd.crosstab(df['Churn'], df['International plan'], margins=True)","a50cb957":"# some imports to set up plotting \nimport matplotlib.pyplot as plt\n# pip install seaborn \nimport seaborn as sns","9d03f39a":"sns.countplot(x='International plan', hue='Churn', data=df);","411264b3":"pd.crosstab(df['Churn'], df['Customer service calls'], margins=True)","9a9cbfe2":"sns.countplot(x='Customer service calls', hue='Churn', data=df);","7a422e8c":"df['Many_service_calls'] = (df['Customer service calls'] > 3).astype('int')\n\npd.crosstab(df['Many_service_calls'], df['Churn'], margins=True)","1b27b37f":"sns.countplot(x='Many_service_calls', hue='Churn', data=df);","5fd5d596":"pd.crosstab(df['Many_service_calls'] & df['International plan'] , df['Churn'])","23f69aa2":"\n### DataFrame transformations\n\nLike many other things in Pandas, adding columns to a DataFrame is doable in many ways.\n\nFor example, if we want to calculate the total number of calls for all users, let\u2019s create the `total_calls` Series and paste it into the DataFrame:\n\n---\n\n### \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u043e\u0432\n\n\u041a\u0430\u043a \u0438 \u043c\u043d\u043e\u0433\u043e\u0435 \u0434\u0440\u0443\u0433\u043e\u0435 \u0432 Pandas, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 DataFrame \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u043c\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0432\u043e\u043d\u043a\u043e\u0432 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0431\u044a\u0435\u043a\u0442 `total_calls` \u0442\u0438\u043f\u0430 Series \u0438 \u0432\u0441\u0442\u0430\u0432\u0438\u043c \u0435\u0433\u043e \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c:","8cc289db":"From the output, we can see that the table contains 3333 rows and 20 columns.\n\nNow let\u2019s try printing out column names using `columns`:\n\n---\n\n\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 3333 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 20 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432. \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f `\u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432`:","21611f20":"\n### Indexing and retrieving data\n\nA DataFrame can be indexed in a few different ways. \n\nTo get a single column, you can use a `DataFrame['Name']` construction. Let's use this to answer a question about that column alone: **what is the proportion of churned users in our dataframe?**\n\n---\n\n### \u0418\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f \u0438 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n\nDataFrame \u043c\u043e\u0436\u043d\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e-\u0440\u0430\u0437\u043d\u043e\u043c\u0443. \u0412 \u0441\u0432\u044f\u0437\u0438 \u0441 \u044d\u0442\u0438\u043c \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u0438 \u0438 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043d\u0443\u0436\u043d\u044b\u0445 \u043d\u0430\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432.\n\n\u0414\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e \u0432\u0438\u0434\u0430 `DataFrame['Name']`. \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u044d\u0442\u0438\u043c \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441: **\u043a\u0430\u043a\u043e\u0432\u0430 \u0434\u043e\u043b\u044f \u043b\u044e\u0434\u0435\u0439 \u043d\u0435\u043b\u043e\u044f\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043d\u0430\u0448\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0435**?\n","f0e12950":"We can also sort by multiple columns:\n\n---\n\n\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u0438 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432:","a9bd6255":"For categorical (type `object`) and boolean (type `bool`) features we can use the `value_counts` method. Let\u2019s have a look at the distribution of `Churn`:\n\n---\n\n\u0414\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 (\u0442\u0438\u043f `object`) \u0438 \u0431\u0443\u043b\u0435\u0432\u044b\u0445 (\u0442\u0438\u043f `bool`) \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c `value_counts`. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043d\u0430\u0448\u0435\u0439 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u2014 `Churn`:","e341048d":"## 1. Demonstration of main Pandas methods\nWell... There are dozens of cool tutorials on Pandas and visual data analysis. If you are already familiar with these topics, you can wait for the 3rd article in the series, where we get into machine learning.  \n\n**[Pandas](http:\/\/pandas.pydata.org)** is a Python library that provides extensive means for data analysis. Data scientists often work with data stored in table formats like `.csv`, `.tsv`, or `.xlsx`. Pandas makes it very convenient to load, process, and analyze such tabular data using SQL-like queries. In conjunction with `Matplotlib` and `Seaborn`, `Pandas` provides a wide range of opportunities for visual analysis of tabular data.\n\nThe main data structures in `Pandas` are implemented with **Series** and **DataFrame** classes. The former is a one-dimensional indexed array of some fixed data type. The latter is a two-dimensional data structure - a table - where each column contains data of the same type. You can see it as a dictionary of `Series` instances. `DataFrames` are great for representing real data: rows correspond to instances (examples, observations, etc.), and columns correspond to features of these instances.\n\n---\n\n## 1. \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 Pandas\n\n**[Pandas](http:\/\/pandas.pydata.org)** \u2014 \u044d\u0442\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 Python, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u0448\u0438\u0440\u043e\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u0414\u0430\u043d\u043d\u044b\u0435, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0434\u0430\u0442\u0430\u0441\u0430\u0435\u043d\u0442\u0438\u0441\u0442\u044b, \u0447\u0430\u0441\u0442\u043e \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u0444\u043e\u0440\u043c\u0435 \u0442\u0430\u0431\u043b\u0438\u0447\u0435\u043a \u2014 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0430\u0445 `.csv`, `.tsv` \u0438\u043b\u0438 `.xlsx`. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Pandas \u0442\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0447\u0435\u043d\u044c \u0443\u0434\u043e\u0431\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c, \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e SQL-\u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0410 \u0432 \u0441\u0432\u044f\u0437\u043a\u0435 \u0441 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u043c\u0438 `Matplotlib` \u0438 `Seaborn`, `Pandas` \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0448\u0438\u0440\u043e\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0442\u0430\u0431\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u043c\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 `Pandas` \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043a\u043b\u0430\u0441\u0441\u044b **Series** \u0438 **DataFrame**. \u041f\u0435\u0440\u0432\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430. \u0412\u0442\u043e\u0440\u043e\u0439 \u2013 \u044d\u0442\u043e \u0434\u0432\u0443\u0445\u043c\u0435\u0440\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u0441\u043e\u0431\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0443, \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430. \u041c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0435\u0451 \u043a\u0430\u043a \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0442\u0438\u043f\u0430 `Series`. \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 `DataFrame` \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445: \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\u044b\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c.","adbba631":"\n### Grouping\n\nIn general, grouping data in Pandas works as follows:\n\n---\n\n### \u0413\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0412 \u043e\u0431\u0449\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Pandas \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:","5c68123e":"\n1. First, the `groupby` method divides the `grouping_columns` by their values. They become a new index in the resulting dataframe.\n2. Then, columns of interest are selected (`columns_to_show`). If `columns_to_show` is not included, all non groupby clauses will be included.\n3. Finally, one or several functions are applied to the obtained groups per selected columns.\n\nHere is an example where we group the data according to the values of the `Churn` variable and display statistics of three columns in each group:\n\n---\n\n1. \u041a \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0443 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 `groupby`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e `grouping_columns` \u2013 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u0438\u043b\u0438 \u043d\u0430\u0431\u043e\u0440\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\n2. \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0443\u0436\u043d\u044b\u0435 \u043d\u0430\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b (`columns_to_show`).\n3. \u041a \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u043c \u0433\u0440\u0443\u043f\u043f\u0430\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0439.\n\n\u0413\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 `Churn` \u0438 \u0432\u044b\u0432\u043e\u0434 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a \u043f\u043e \u0442\u0440\u0451\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435.","c0a75f39":"\n### Sorting\n\nA DataFrame can be sorted by the value of one of the variables (i.e columns). For example, we can sort by *Total day charge* (use `ascending=False` to sort in descending order):\n\n---\n\n### \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430\n\nDataFrame \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u043a\u0430\u043a\u043e\u0433\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \u0412 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e *Total day charge* (`ascending=False` \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e):\n","ff85686e":"Let\u2019s do the same thing, but slightly differently by passing a list of functions to `agg()`:\n\n---\n\n\u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u043d\u043e \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e-\u0434\u0440\u0443\u0433\u043e\u043c\u0443, \u043f\u0435\u0440\u0435\u0434\u0430\u0432 \u0432 `agg` \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439:","38bf59d6":"The `map` method can be used to **replace values in a column** by passing a dictionary of the form `{old_value: new_value}` as its argument:\n\n---\n\n\u041c\u0435\u0442\u043e\u0434 `map` \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f **\u0437\u0430\u043c\u0435\u043d\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435**, \u043f\u0435\u0440\u0435\u0434\u0430\u0432 \u0435\u043c\u0443 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0432\u0438\u0434\u0430 `{old_value: new_value}`:","9166ead7":"We can see that most of the users are loyal and do not use additional services (International Plan\/Voice mail).\n\nThis will resemble **pivot tables** to those familiar with Excel. And, of course, pivot tables are implemented in Pandas: the `pivot_table` method takes the following parameters:\n\n* `values` \u2013 a list of variables to calculate statistics for,\n* `index` \u2013 a list of variables to group data by,\n* `aggfunc` \u2013 what statistics we need to calculate for groups, ex. sum, mean, maximum, minimum or something else.\n\nLet\u2019s take a look at the average number of day, evening, and night calls by area code:\n\n---\n\n\u041c\u044b \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043b\u043e\u044f\u043b\u044c\u043d\u044b \u0438 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0443\u0441\u043b\u0443\u0433\u0430\u043c\u0438 (\u043c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u043e\u0433\u043e \u0440\u043e\u0443\u043c\u0438\u043d\u0433\u0430 \/ \u0433\u043e\u043b\u043e\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u0447\u0442\u044b).\n\n\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 Excel \u043d\u0430\u0432\u0435\u0440\u043d\u044f\u043a\u0430 \u0432\u0441\u043f\u043e\u043c\u043d\u044f\u0442 \u043e \u0442\u0430\u043a\u043e\u0439 \u0444\u0438\u0447\u0435, \u043a\u0430\u043a **\u0441\u0432\u043e\u0434\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b** (pivot tables). \u0412 Pandas \u0437\u0430 \u0441\u0432\u043e\u0434\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 `pivot_table`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432:\n\n* `values` \u2013 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438,\n* `index` \u2013 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435,\n* `aggfunc` \u2014 \u0442\u043e, \u0447\u0442\u043e \u043d\u0430\u043c, \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0430\u043c \u2014 \u0441\u0443\u043c\u043c\u0443, \u0441\u0440\u0435\u0434\u043d\u0435\u0435, \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c, \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0438\u043b\u0438 \u0447\u0442\u043e-\u0442\u043e \u0435\u0449\u0451.\n\n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u043d\u0435\u0432\u043d\u044b\u0445, \u0432\u0435\u0447\u0435\u0440\u043d\u0438\u0445 \u0438 \u043d\u043e\u0447\u043d\u044b\u0445 \u0437\u0432\u043e\u043d\u043a\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 Area code:","7891f703":"Therefore, predicting that a customer is not loyal (*Churn*=1) in the case when the number of calls to the service center is greater than 3 and the *International Plan* is added (and predicting *Churn*=0 otherwise), we might expect an accuracy of 85.8% (we are mistaken only 464 + 9 times). This number, 85.8%, that we got through this very simple reasoning serves as a good starting point (*baseline*) for the further machine learning models that we will build. \n\nAs we move on in this course, recall that, before the advent of machine learning, the data analysis process looked something like this. Let's recap what we've covered:\n    \n- The share of loyal clients in the sample is 85.5%. The most naive model that always predicts a \"loyal customer\" on such data will guess right in about 85.5% of all cases. That is, the proportion of correct answers (*accuracy*) of subsequent models should be no less than this number, and will hopefully be significantly higher;\n- With the help of a simple forecast that can be expressed by the following formula: \"International plan = True & Customer Service calls > 3 => Churn = 1, else Churn = 0\", we can expect a guessing rate of 85.8%, which is just above 85.5%. Subsequently, we'll talk about decision trees and figure out how to find such rules **automatically** based only on the input data;\n- We got these two baselines without applying machine learning, and they\u2019ll serve as the starting point for our subsequent models. If it turns out that with enormous effort, we increase the share of correct answers by 0.5% per se, then possibly we are doing something wrong, and it suffices to confine ourselves to a simple model with two conditions;\n- Before training complex models, it is recommended to manipulate the data a bit, make some plots, and check simple assumptions. Moreover, in business applications of machine learning, they usually start with simple solutions and then experiment with more complex ones.\n\n\n## 3. Demo assignment\nTo practice with Pandas and EDA, you can complete [this assignment](https:\/\/www.kaggle.com\/kashnitsky\/a1-demo-pandas-and-uci-adult-dataset) where you'll be analyzing socio-demographic data. \n\n## 4. Useful resources\n\n* The same notebook as an interactive web-based [Kaggle Kernel](https:\/\/www.kaggle.com\/kashnitsky\/topic-1-exploratory-data-analysis-with-pandas)\n* [\"Merging DataFrames with pandas\"](https:\/\/nbviewer.jupyter.org\/github\/Yorko\/mlcourse.ai\/blob\/master\/jupyter_english\/tutorials\/merging_dataframes_tutorial_max_palko.ipynb) - a tutorial by Max Plako within mlcourse.ai (full list of tutorials is [here](https:\/\/mlcourse.ai\/tutorials))\n* [\"Handle different dataset with dask and trying a little dask ML\"](https:\/\/nbviewer.jupyter.org\/github\/Yorko\/mlcourse.ai\/blob\/master\/jupyter_english\/tutorials\/dask_objects_and_little_dask_ml_tutorial_iknyazeva.ipynb) - a tutorial by Irina Knyazeva within mlcourse.ai\n* Main course [site](https:\/\/mlcourse.ai), [course repo](https:\/\/github.com\/Yorko\/mlcourse.ai), and YouTube [channel](https:\/\/www.youtube.com\/watch?v=QKTuw4PNOsU&list=PLVlY_7IJCMJeRfZ68eVfEcu-UcN9BbwiX)\n* Official Pandas [documentation](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/index.html)\n* Course materials as a [Kaggle Dataset](https:\/\/www.kaggle.com\/kashnitsky\/mlcourse)\n* Medium [\"story\"](https:\/\/medium.com\/open-machine-learning-course\/open-machine-learning-course-topic-1-exploratory-data-analysis-with-pandas-de57880f1a68) based on this notebook\n* If you read Russian: an [article](https:\/\/habrahabr.ru\/company\/ods\/blog\/322626\/) on Habr.com with ~ the same material. And a [lecture](https:\/\/youtu.be\/dEFxoyJhm3Y) on YouTube\n* [10 minutes to pandas](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/10min.html)\n* [Pandas cheatsheet PDF](https:\/\/github.com\/pandas-dev\/pandas\/blob\/master\/doc\/cheatsheet\/Pandas_Cheat_Sheet.pdf)\n* GitHub repos: [Pandas exercises](https:\/\/github.com\/guipsamora\/pandas_exercises\/) and [\"Effective Pandas\"](https:\/\/github.com\/TomAugspurger\/effective-pandas)\n* [scipy-lectures.org](http:\/\/www.scipy-lectures.org\/index.html) \u2014 tutorials on pandas, numpy, matplotlib and scikit-learn\n\n---\n\n\u0417\u043d\u0430\u0447\u0438\u0442, \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u044f \u043e\u0442\u0442\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u043a\u043e\u0433\u0434\u0430 \u0447\u0438\u0441\u043b\u043e \u0437\u0432\u043e\u043d\u043a\u043e\u0432 \u0432 \u0441\u0435\u0440\u0432\u0438\u0441\u043d\u044b\u0439 \u0446\u0435\u043d\u0442\u0440 \u0431\u043e\u043b\u044c\u0448\u0435 3 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0440\u043e\u0443\u043c\u0438\u043d\u0433 (\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u044f \u043b\u043e\u044f\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u2013 \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435), \u043c\u043e\u0436\u043d\u043e \u043e\u0436\u0438\u0434\u0430\u0442\u044c \u043e\u043a\u043e\u043b\u043e 85.8% \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u0439 (\u043e\u0448\u0438\u0431\u0430\u0435\u043c\u0441\u044f \u0432\u0441\u0435\u0433\u043e 464 + 9 \u0440\u0430\u0437). \u042d\u0442\u0438 85.8%, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0440\u0430\u0441\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0439 \u2013 \u044d\u0442\u043e \u043d\u0435\u043f\u043b\u043e\u0445\u0430\u044f *\u043e\u0442\u043f\u0440\u0430\u0432\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430* (*baseline*) \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0441\u0442\u0440\u043e\u0438\u0442\u044c.\n\n\u0412 \u0446\u0435\u043b\u043e\u043c \u0434\u043e \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u043b \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0442\u0430\u043a. \u041f\u0440\u043e\u0440\u0435\u0437\u044e\u043c\u0438\u0440\u0443\u0435\u043c:\n\n- \u0414\u043e\u043b\u044f \u043b\u043e\u044f\u043b\u044c\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u2013 85.5%. \u0421\u0430\u043c\u0430\u044f \u043d\u0430\u0438\u0432\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c, \u043e\u0442\u0432\u0435\u0442 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \"\u043a\u043b\u0438\u0435\u043d\u0442 \u0432\u0441\u0435\u0433\u0434\u0430 \u043b\u043e\u044f\u043b\u0435\u043d\" \u043d\u0430 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0443\u0434\u0435\u0442 \u0443\u0433\u0430\u0434\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0432 85.5% \u0441\u043b\u0443\u0447\u0430\u0435\u0432. \u0422\u043e \u0435\u0441\u0442\u044c \u0434\u043e\u043b\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 (*accuracy*) \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043d\u0435 \u043c\u0435\u043d\u044c\u0448\u0435, \u0430 \u043b\u0443\u0447\u0448\u0435, \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u0448\u0435 \u044d\u0442\u043e\u0439 \u0446\u0438\u0444\u0440\u044b;\n- \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u0441\u043b\u043e\u0432\u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0440\u0430\u0437\u0438\u0442\u044c \u0442\u0430\u043a\u043e\u0439 \u0444\u043e\u0440\u043c\u0443\u043b\u043e\u0439: \"International plan = True & Customer Service calls > 3 => Churn = 1, else Churn = 0\", \u043c\u043e\u0436\u043d\u043e \u043e\u0436\u0438\u0434\u0430\u0442\u044c \u0434\u043e\u043b\u044e \u0443\u0433\u0430\u0434\u044b\u0432\u0430\u043d\u0438\u0439 85.8%, \u0447\u0442\u043e \u0435\u0449\u0435 \u0447\u0443\u0442\u044c \u0432\u044b\u0448\u0435 85.5%. \u0412\u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0438 \u043c\u044b \u043f\u043e\u0433\u043e\u0432\u043e\u0440\u0438\u043c \u043e \u0434\u0435\u0440\u0435\u0432\u044c\u044f\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0438 \u0440\u0430\u0437\u0431\u0435\u0440\u0435\u043c\u0441\u044f, \u043a\u0430\u043a \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445;\n- \u042d\u0442\u0438 \u0434\u0432\u0430 \u0431\u0435\u0439\u0437\u043b\u0430\u0439\u043d\u0430 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0431\u0435\u0437 \u0432\u0441\u044f\u043a\u043e\u0433\u043e \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u0438 \u043e\u043d\u0438 \u0441\u043b\u0443\u0436\u0430\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043d\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0439 \u0434\u043b\u044f \u043d\u0430\u0448\u0438\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439. \u0415\u0441\u043b\u0438 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043c\u044b \u0433\u0440\u043e\u043c\u0430\u0434\u043d\u044b\u043c\u0438 \u0443\u0441\u0438\u043b\u0438\u044f\u043c\u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u0434\u043e\u043b\u044e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0432\u0441\u0435\u0433\u043e, \u0441\u043a\u0430\u0436\u0435\u043c, \u043d\u0430 0.5%, \u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043c\u044b \u0447\u0442\u043e-\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u043c \u043d\u0435 \u0442\u0430\u043a, \u0438 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u044c\u044e \u0438\u0437 \u0434\u0432\u0443\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439;\n- \u041f\u0435\u0440\u0435\u0434 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\u043c \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u043a\u0440\u0443\u0442\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e, \u0432 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442 \u0438\u043c\u0435\u043d\u043d\u043e \u0441 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439, \u0430 \u043f\u043e\u0442\u043e\u043c \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u044e\u0442 \u0441 \u0438\u0445 \u0443\u0441\u043b\u043e\u0436\u043d\u0435\u043d\u0438\u044f\u043c\u0438.\n\n\n## 3. \u0414\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u21161\n\n\u0414\u043b\u044f \u0440\u0430\u0437\u043c\u0438\u043d\u043a\u0438\/\u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0435\u043c\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Pandas. \u041d\u0430\u0434\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0439 \u043a\u043e\u0434 \u0432 [Jupyter-\u0437\u0430\u0433\u043e\u0442\u043e\u0432\u043a\u0435](http:\/\/nbviewer.jupyter.org\/github\/Yorko\/mlcourse.ai\/blob\/master\/jupyter_russian\/assignments_demo\/assignment01_adult_pandas.ipynb) \u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u044b \u0432 [\u0432\u0435\u0431-\u0444\u043e\u0440\u043c\u0435](https:\/\/docs.google.com\/forms\/d\/1xAzU-5N6oEeR4UG8G44V6XL-Kbr4WYcPBG45Kijge2Y\/) (\u0442\u0430\u043c \u0436\u0435 \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435).\n\n## 4. \u041e\u0431\u0437\u043e\u0440 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432\n\n* \u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u044d\u0442\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0438 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2013 [Medium story](https:\/\/medium.com\/open-machine-learning-course\/open-machine-learning-course-topic-1-exploratory-data-analysis-with-pandas-de57880f1a68)\n* [\u0412\u0438\u0434\u0435\u043e\u0437\u0430\u043f\u0438\u0441\u044c](https:\/\/youtu.be\/dEFxoyJhm3Y) \u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e \u043c\u043e\u0442\u0438\u0432\u0430\u043c \u044d\u0442\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0438\n* \u0412 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u043a\u043e\u043d\u0435\u0447\u043d\u043e \u0436\u0435, [\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Pandas](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/index.html). \u0412 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u043a\u043e\u0440\u043e\u0442\u043a\u043e\u0435 \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435 [10 minutes to pandas](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/10min.html)\n* \u0420\u0443\u0441\u0441\u043a\u0438\u0439 [\u043f\u0435\u0440\u0435\u0432\u043e\u0434](https:\/\/drive.google.com\/file\/d\/1EqUUrS81tAHwt_vghs9Hibksa5_GHecI\/view) \u043a\u043d\u0438\u0433\u0438 \"Learning pandas\" + [\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439](https:\/\/github.com\/npats2007\/Learning_Pandas_russian_translation)\n* [PDF-\u0448\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 \u043f\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435](https:\/\/github.com\/pandas-dev\/pandas\/blob\/master\/doc\/cheatsheet\/Pandas_Cheat_Sheet.pdf)\n* \u041f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0430 \u0414\u044c\u044f\u043a\u043e\u043d\u043e\u0432\u0430 [\u00ab\u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e \u0441 Pandas\u00bb](https:\/\/alexanderdyakonov.wordpress.com\/2015\/11\/06\/\u0437\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e-\u0441-pandas-\u0441\u043b\u0430\u0439\u0434\u044b\/)\n* [\u0421\u0435\u0440\u0438\u044f](https:\/\/tomaugspurger.github.io\/modern-1-intro.html) \u043f\u043e\u0441\u0442\u043e\u0432 \"Modern Pandas\" (\u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435)\n* \u041d\u0430 \u0433\u0438\u0442\u0445\u0430\u0431\u0435 \u0435\u0441\u0442\u044c [\u043f\u043e\u0434\u0431\u043e\u0440\u043a\u0430 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0439](https:\/\/github.com\/guipsamora\/pandas_exercises\/) \u043f\u043e Pandas \u0438 [\u0435\u0449\u0435 \u043e\u0434\u0438\u043d](https:\/\/github.com\/TomAugspurger\/effective-pandas) \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 (\u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435) \"Effective Pandas\"\n* [scipy-lectures.org](http:\/\/www.scipy-lectures.org\/index.html) \u2014 \u0443\u0447\u0435\u0431\u043d\u0438\u043a \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 pandas, numpy, matplotlib \u0438 scikit-learn\n* [Pandas From The Ground Up](https:\/\/www.youtube.com\/watch?v=5JnMutdy6Fw) \u2013 \u0432\u0438\u0434\u0435\u043e \u0441 PyCon 2015","de895121":"\nThe `describe` method shows basic statistical characteristics of each numerical feature (`int64` and `float64` types): number of non-missing values, mean, standard deviation, range, median, 0.25 and 0.75 quartiles.\n\n---\n\n\u041c\u0435\u0442\u043e\u0434 `describe` \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 (\u0442\u0438\u043f\u044b `int64` \u0438 `float64`): \u0447\u0438\u0441\u043b\u043e \u043d\u0435\u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0441\u0440\u0435\u0434\u043d\u0435\u0435, \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435, \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d, \u043c\u0435\u0434\u0438\u0430\u043d\u0443, 0.25 \u0438 0.75 \u043a\u0432\u0430\u0440\u0442\u0438\u043b\u0438.","48a9bcff":"# <center> Topic 1. Exploratory data analysis with Pandas\n\n<img align=\"center\" src=\"https:\/\/habrastorage.org\/files\/10c\/15f\/f3d\/10c15ff3dcb14abdbabdac53fed6d825.jpg\"  width=50% \/>\n\n### Article outline\n1. [Demonstration of main Pandas methods](#1.-Demonstration-of-main-Pandas-methods)\n2. [First attempt at predicting telecom churn](#2.-First-attempt-at-predicting-telecom-churn)\n3. [Demo assignment](#3.-Demo-assignment)\n4. [\u0420\u0435\u0441\u0443\u0440\u0441\u044b](#4-Useful-resources)\n\n---\n\n# <center> \u0422\u0435\u043c\u0430 1. \u041f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 Pandas\n\n### \u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\n1. [\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 Pandas](#1.-\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f-\u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445-\u043c\u0435\u0442\u043e\u0434\u043e\u0432-Pandas)\n2. [\u041f\u0435\u0440\u0432\u044b\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442\u0442\u043e\u043a\u0430](#2.-\u041f\u0435\u0440\u0432\u044b\u0435-\u043f\u043e\u043f\u044b\u0442\u043a\u0438-\u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f-\u043e\u0442\u0442\u043e\u043a\u0430)\n3. [\u0414\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u21161](#3.-\u0414\u043e\u043c\u0430\u0448\u043d\u0435\u0435-\u0437\u0430\u0434\u0430\u043d\u0438\u0435-\u21161)\n4. [\u041e\u0431\u0437\u043e\u0440 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432](#4.-\u041e\u0431\u0437\u043e\u0440-\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445-\u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432)","be509697":"\n```python\ndf.groupby(by=grouping_columns)[columns_to_show].function()\n```","f05a04a5":"The same thing can be done with the `replace` method:\n\n---\n\n\u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0443\u044e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 `replace`:","92e52e33":"\nWe see that, with *International Plan*, the churn rate is much higher, which is an interesting observation! Perhaps large and poorly controlled expenses with international calls are very conflict-prone and lead to dissatisfaction among the telecom operator's customers.\n\nNext, let\u2019s look at another important feature \u2013 *Customer service calls*. Let\u2019s also make a summary table and a picture.\n\n---\n\n\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043a\u043e\u0433\u0434\u0430 \u0440\u043e\u0443\u043c\u0438\u043d\u0433 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d, \u0434\u043e\u043b\u044f \u043e\u0442\u0442\u043e\u043a\u0430 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0432\u044b\u0448\u0435 \u2013 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435! \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0438 \u043f\u043b\u043e\u0445\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c\u044b\u0435 \u0442\u0440\u0430\u0442\u044b \u0432 \u0440\u043e\u0443\u043c\u0438\u043d\u0433\u0435 \u043e\u0447\u0435\u043d\u044c \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0433\u0435\u043d\u043d\u044b \u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u044f\u0442 \u043a \u043d\u0435\u0434\u043e\u0432\u043e\u043b\u044c\u0441\u0442\u0432\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0442\u0435\u043b\u0435\u043a\u043e\u043c-\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043a \u0438\u0445 \u043e\u0442\u0442\u043e\u043a\u0443.\n\n\u0414\u0430\u043b\u0435\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0432\u0430\u0436\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u2013 *\"\u0427\u0438\u0441\u043b\u043e \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0439 \u0432 \u0441\u0435\u0440\u0432\u0438\u0441\u043d\u044b\u0439 \u0446\u0435\u043d\u0442\u0440\"* (Customer service calls). \u0422\u0430\u043a\u0436\u0435 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0441\u0432\u043e\u0434\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0438 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0443.","79ea91ac":"Let\u2019s have a look at data dimensionality, feature names, and feature types.\n\n---\n\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0437\u043c\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0438\u0445 \u0442\u0438\u043f\u044b.","ee8fab97":"\nWe\u2019ll demonstrate the main methods in action by analyzing a [dataset](https:\/\/bigml.com\/user\/francisco\/gallery\/dataset\/5163ad540c0b5e5b22000383) on the churn rate of telecom operator clients. Let\u2019s read the data (using `read_csv`), and take a look at the first 5 lines using the `head` method:\n\n---\n\n\u0411\u0443\u0434\u0435\u043c \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0432 \u0434\u0435\u043b\u0435, \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044f [\u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445](https:\/\/bigml.com\/user\/francisco\/gallery\/dataset\/5163ad540c0b5e5b22000383) \u043f\u043e \u043e\u0442\u0442\u043e\u043a\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0442\u0435\u043b\u0435\u043a\u043e\u043c-\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (\u0441\u043a\u0430\u0447\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e, \u043e\u043d \u0435\u0441\u0442\u044c \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438). \u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 (\u043c\u0435\u0442\u043e\u0434 `read_csv`) \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0435 5 \u0441\u0442\u0440\u043e\u043a \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 `head`:","d6ff6fab":"\n14.5% is actually quite bad for a company; such a churn rate can make the company go bankrupt.\n\n**Boolean indexing** with one column is also very convenient. The syntax is `df[P(df['Name'])]`, where `P` is some logical condition that is checked for each element of the `Name` column. The result of such indexing is the DataFrame consisting only of rows that satisfy the `P` condition on the `Name` column. \n\nLet\u2019s use it to answer the question:\n\n**What are average values of numerical features for churned users?**\n\n---\n\n14,5% \u2014 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u043b\u043e\u0445\u043e\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0441 \u0442\u0430\u043a\u0438\u043c \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u043c \u043e\u0442\u0442\u043e\u043a\u0430 \u043c\u043e\u0436\u043d\u043e \u0438 \u0440\u0430\u0437\u043e\u0440\u0438\u0442\u044c\u0441\u044f.\n\n\u041e\u0447\u0435\u043d\u044c \u0443\u0434\u043e\u0431\u043d\u043e\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f **\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f** DataFrame \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u0443. \u0412\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043e\u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: `df[P(df['Name'])]`, \u0433\u0434\u0435 `P` \u2014 \u044d\u0442\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 `Name`. \u0418\u0442\u043e\u0433\u043e\u043c \u0442\u0430\u043a\u043e\u0439 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f DataFrame, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u0441\u0442\u0440\u043e\u043a, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044e `P` \u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0443 `Name`.\n\n\u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u044d\u0442\u0438\u043c \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441: **\u043a\u0430\u043a\u043e\u0432\u044b \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u0438 \u043d\u0435\u043b\u043e\u044f\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439?**","ddc65c65":"2850 users out of 3333 are *loyal*; their `Churn` value is `0`. To calculate fractions, pass `normalize=True` to the `value_counts` function.\n\n---\n\n2850 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438\u0437 3333 \u2014 *\u043b\u043e\u044f\u043b\u044c\u043d\u044b\u0435*, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 `Churn` \u0443 \u043d\u0438\u0445 \u2014 `0`.\n\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 `Churn`. \u0423\u043a\u0430\u0436\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 `normalize=True`, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0435 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u043e\u0442\u044b, \u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435.\n","08d6f60e":"---\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 `Area code`. \u0423\u043a\u0430\u0436\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 `normalize=True`, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0435 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u043e\u0442\u044b, \u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435.","ba926a82":"\n### Applying Functions to Cells, Columns and Rows\n\n**To apply functions to each column, use `apply()`:**\n\n---\n\n### \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043a \u044f\u0447\u0435\u0439\u043a\u0430\u043c, \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c \u0438 \u0441\u0442\u0440\u043e\u043a\u0430\u043c\n\n**\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u0443: `apply`**","2570d095":"**How much time (on average) do churned users spend on the phone during daytime?**\n\n---\n\n\u0421\u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0435 \u0434\u0432\u0430 \u0432\u0438\u0434\u0430 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u0438, \u043e\u0442\u0432\u0435\u0442\u0438\u043c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441: **\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0434\u043d\u044f \u0440\u0430\u0437\u0433\u043e\u0432\u0430\u0440\u0438\u0432\u0430\u044e\u0442 \u043f\u043e \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0443 \u043d\u0435\u043b\u043e\u044f\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438?**","9a9db8e1":"\nLet\u2019s construct another contingency table that relates *Churn* with both *International plan* and freshly created *Many_service_calls*.\n\n---\n\n\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043d\u044b\u0435 \u0432\u044b\u0448\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0441\u0432\u043e\u0434\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0447\u043a\u0443 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438 \u043e\u0442\u0442\u043e\u043a\u0430.","cd8c89e9":"<center>\n<img src=\"https:\/\/habrastorage.org\/files\/fd4\/502\/43d\/fd450243dd604b81b9713213a247aa20.jpg\">\n    \n## [mlcourse.ai](https:\/\/mlcourse.ai) \u2013 Open Machine Learning Course \n\nAuthor: [Yury Kashnitskiy](https:\/\/yorko.github.io). Translated and edited by [Christina Butsko](https:\/\/www.linkedin.com\/in\/christinabutsko\/), [Yuanyuan Pao](https:\/\/www.linkedin.com\/in\/yuanyuanpao\/), [Anastasia Manokhina](https:\/\/www.linkedin.com\/in\/anastasiamanokhina), Sergey Isaev and [Artem Trunov](https:\/\/www.linkedin.com\/in\/datamove\/). This material is subject to the terms and conditions of the [Creative Commons CC BY-NC-SA 4.0](https:\/\/creativecommons.org\/licenses\/by-nc-sa\/4.0\/) license. Free use is permitted for any non-commercial purpose.","5c5ed061":"`bool`, `int64`, `float64` and `object` are the data types of our features. We see that one feature is logical (`bool`), 3 features are of type `object`, and 16 features are numeric. With this same method, we can easily see if there are any missing values. Here, there are none because each column contains 3333 observations, the same number of rows we saw before with `shape`.\n\nWe can **change the column type** with the `astype` method. Let\u2019s apply this method to the `Churn` feature to convert it into `int64`:\n\n---\n\n`bool`, `int64`, `float64` \u0438 `object` \u2014 \u044d\u0442\u043e \u0442\u0438\u043f\u044b \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e 1 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u2014 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 (`bool`), 3 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0438\u043c\u0435\u044e\u0442 \u0442\u0438\u043f `object` \u0438 16 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u2014 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435. \u0422\u0430\u043a\u0436\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 info \u0443\u0434\u043e\u0431\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0438\u0445 \u043d\u0435\u0442, \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u043f\u043e 3333 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f.\n\n**\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0442\u0438\u043f \u043a\u043e\u043b\u043e\u043d\u043a\u0438** \u043c\u043e\u0436\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 `astype`. \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 `Churn` \u0438 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0451\u043c \u0435\u0433\u043e \u0432 `int64`:","9632d1f0":"We can use the `info()` method to output some general information about the dataframe: \n\n---\n\n\u0427\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043e\u0431\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u043e \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0443 \u0438 \u0432\u0441\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c `info`:","397e69f8":"## 2. First attempt at predicting telecom churn\n\n\nLet's see how churn rate is related to the *International plan* feature. We\u2019ll do this using a `crosstab` contingency table and also through visual analysis with `Seaborn` (however, visual analysis will be covered more thoroughly in the next article).\n\n---\n\n## 2. \u041f\u0435\u0440\u0432\u044b\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442\u0442\u043e\u043a\u0430\n\n\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043e\u0442\u0442\u043e\u043a \u0441\u0432\u044f\u0437\u0430\u043d \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c *\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u043e\u0433\u043e \u0440\u043e\u0443\u043c\u0438\u043d\u0433\u0430\"* (International plan). \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u044d\u0442\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0432\u043e\u0434\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0447\u043a\u0438 `crosstab`, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0443\u0442\u0435\u043c \u0438\u043b\u043b\u044e\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441 `Seaborn` (\u043a\u0430\u043a \u0438\u043c\u0435\u043d\u043d\u043e \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u0438\u0445 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u2013 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0430\u0442\u044c\u0438).","6508f7a5":"\nDataFrames can be indexed by column name (label) or row name (index) or by the serial number of a row. The `loc` method is used for **indexing by name**, while `iloc()` is used for **indexing by number**.\n\nIn the first case below, we say *\"give us the values of the rows with index from 0 to 5 (inclusive) and columns labeled from State to Area code (inclusive)\"*. In the second case, we say *\"give us the values of the first five rows in the first three columns\"* (as in a typical Python slice: the maximal value is not included).\n\n---\n\n\u0414\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u044b \u043c\u043e\u0436\u043d\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0438\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438, \u0442\u0430\u043a \u0438 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440\u0443. \u0414\u043b\u044f \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u0438 **\u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e** \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 `loc`, **\u043f\u043e \u043d\u043e\u043c\u0435\u0440\u0443** \u2014 `iloc`.\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u044b \u0433\u043e\u0432\u043e\u0440\u0438\u043c \u00ab*\u043f\u0435\u0440\u0435\u0434\u0430\u0439 \u043d\u0430\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f id \u0441\u0442\u0440\u043e\u043a \u043e\u0442 0 \u0434\u043e 5 \u0438 \u0434\u043b\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043e\u0442 State \u0434\u043e Area code*\u00bb, \u0430 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u2014 \u00ab*\u043f\u0435\u0440\u0435\u0434\u0430\u0439 \u043d\u0430\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0432\u044b\u0445 \u043f\u044f\u0442\u0438 \u0441\u0442\u0440\u043e\u043a \u0432 \u043f\u0435\u0440\u0432\u044b\u0445 \u0442\u0440\u0451\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445*\u00bb.\n\n*\u0425\u043e\u0437\u044f\u0439\u043a\u0435 \u043d\u0430 \u0437\u0430\u043c\u0435\u0442\u043a\u0443*: \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u043c slice object \u0432 `iloc`, \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441\u043b\u0430\u0439\u0441\u0438\u0442\u0441\u044f \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043e. \u041e\u0434\u043d\u0430\u043a\u043e \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 `loc` \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0438 \u043d\u0430\u0447\u0430\u043b\u043e, \u0438 \u043a\u043e\u043d\u0435\u0446 \u0441\u043b\u0430\u0439\u0441\u0430","9bb5c385":"To delete columns or rows, use the `drop` method, passing the required indexes and the `axis` parameter (`1` if you delete columns, and nothing or `0` if you delete rows). The `inplace` argument tells whether to change the original DataFrame. With `inplace=False`, the `drop` method doesn't change the existing DataFrame and returns a new one with dropped rows or columns. With `inplace=True`, it alters the DataFrame.\n\n---\n\n\u0427\u0442\u043e\u0431\u044b \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0438\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c `drop`, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u043d\u0443\u0436\u043d\u044b\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 `axis` (`1`, \u0435\u0441\u043b\u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u0442\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b, \u0438 \u043d\u0438\u0447\u0435\u0433\u043e \u0438\u043b\u0438 `0`, \u0435\u0441\u043b\u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438):","d892265d":"The `apply` method can also be used to apply a function to each row. To do this, specify `axis=1`. Lambda functions are very convenient in such scenarios. For example, if we need to select all states starting with W, we can do it like this:\n\n---\n\n\u041c\u0435\u0442\u043e\u0434 `apply` \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c `axis=1`.","5dc98d9c":"In order to see statistics on non-numerical features, one has to explicitly indicate data types of interest in the `include` parameter.\n\n---\n\n\u0427\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u043e \u043d\u0435\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c, \u043d\u0443\u0436\u043d\u043e \u044f\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0449\u0438\u0435 \u043d\u0430\u0441 \u0442\u0438\u043f\u044b \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 `include`.","0da4940c":"\n**What is the maximum length of international calls among loyal users (`Churn == 0`) who do not have an international plan?**\n\n---\n\n**\u041a\u0430\u043a\u043e\u0432\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 \u043c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u044b\u0445 \u0437\u0432\u043e\u043d\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u0438 \u043b\u043e\u044f\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 (`Churn == 0`), \u043d\u0435 \u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u0443\u0441\u043b\u0443\u0433\u043e\u0439 \u043c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u043e\u0433\u043e \u0440\u043e\u0443\u043c\u0438\u043d\u0433\u0430 (`'International plan' == 'No'`)?**\n\n","8429fd94":"If we need the first or the last line of the data frame, we can use the `df[:1]` or `df[-1:]` construct:\n\n---\n\n\u0415\u0441\u043b\u0438 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u0430 \u043f\u0435\u0440\u0432\u0430\u044f \u0438\u043b\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u0447\u043a\u0430 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430, \u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439 `df[:1]` \u0438\u043b\u0438 `df[-1:]`:","ee327a04":"It is possible to add a column more easily without creating an intermediate Series instance:\n\n---\n\n\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0438\u0437 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u043c\u043e\u0436\u043d\u043e \u0438 \u043f\u0440\u043e\u0449\u0435, \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u044f \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0445 Series:","ecdef10b":"\n### Summary tables\n\nSuppose we want to see how the observations in our sample are distributed in the context of two variables - `Churn` and `International plan`. To do so, we can build a **contingency table** using the `crosstab` method:\n\n---\n\n### \u0421\u0432\u043e\u0434\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n\n\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u043a\u0430\u043a \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0432 \u043d\u0430\u0448\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u0434\u0432\u0443\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u2014 `Churn` \u0438 `International plan`. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441\u043e\u043f\u0440\u044f\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0432\u0448\u0438\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c `crosstab`:","79e59c4c":"Although it's not so obvious from the summary table, it's easy to see from the above plot that the churn rate increases sharply from 4 customer service calls and above.\n\nNow let's add a binary feature to our DataFrame \u2013 `Customer service calls > 3`. And once again, let's see how it relates to churn. \n\n---\n\n\u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c, \u043f\u043e \u0441\u0432\u043e\u0434\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0447\u043a\u0435 \u044d\u0442\u043e \u043d\u0435 \u0442\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u0432\u0438\u0434\u043d\u043e (\u0438\u043b\u0438 \u0441\u043a\u0443\u0447\u043d\u043e \u043f\u043e\u043b\u0437\u0430\u0442\u044c \u0432\u0437\u0433\u043b\u044f\u0434\u043e\u043c \u043f\u043e \u0441\u0442\u0440\u043e\u0447\u043a\u0430\u043c \u0441 \u0446\u0438\u0444\u0440\u0430\u043c\u0438), \u0430 \u0432\u043e\u0442 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430 \u043a\u0440\u0430\u0441\u043d\u043e\u0440\u0435\u0447\u0438\u0432\u043e \u0441\u0432\u0438\u0434\u0435\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0443\u0435\u0442 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0434\u043e\u043b\u044f \u043e\u0442\u0442\u043e\u043a\u0430 \u0441\u0438\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u0435\u0442 \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 4 \u0437\u0432\u043e\u043d\u043a\u043e\u0432 \u0432 \u0441\u0435\u0440\u0432\u0438\u0441\u043d\u044b\u0439 \u0446\u0435\u043d\u0442\u0440.\n\n\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0442\u0435\u043f\u0435\u0440\u044c \u0432 \u043d\u0430\u0448 DataFrame \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u2014 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f `Customer service calls > 3`. \u0418 \u0435\u0449\u0435 \u0440\u0430\u0437 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043e\u043d \u0441\u0432\u044f\u0437\u0430\u043d \u0441 \u043e\u0442\u0442\u043e\u043a\u043e\u043c.","11ffa638":"<details>\n<summary>About printing DataFrames in Jupyter notebooks<\/summary>\n<p>\nIn Jupyter notebooks, Pandas DataFrames are printed as these pretty tables seen above while `print(df.head())` is less nicely formatted.\nBy default, Pandas displays 20 columns and 60 rows, so, if your DataFrame is bigger, use the `set_option` function as shown in the example below:\n\n```python\npd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 100)\n```\n<\/p>\n<\/details>\n\nRecall that each row corresponds to one client, an **instance**, and columns are **features** of this instance.\n\n---\n\n<details>\n<summary>\u041f\u0440\u043e \u0432\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u0432 \u0442\u0435\u0442\u0440\u0430\u0434\u043a\u0435 Jupyter<\/summary>\n<p>\n\u0412 Jupyter-\u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0430\u0445 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u044b Pandas \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0432\u043e\u0442 \u0442\u0430\u043a\u0438\u0445 \u043a\u0440\u0430\u0441\u0438\u0432\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0447\u0435\u043a, \u0438 `print(df.head())` \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0445\u0443\u0436\u0435.\n\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e Pandas \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0432\u0441\u0435\u0433\u043e 20 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0438 60 \u0441\u0442\u0440\u043e\u043a, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0435\u0441\u043b\u0438 \u0432\u0430\u0448 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0431\u043e\u043b\u044c\u0448\u0435, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 `set_option`:\n\n```python\npd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 100)\n```\n<\/p>\n<\/details>\n\n\u041a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u2013 \u044d\u0442\u043e **\u043e\u0431\u044a\u0435\u043a\u0442** \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f.\n\u0421\u0442\u043e\u043b\u0431\u0446\u044b \u2013 **\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438** \u043e\u0431\u044a\u0435\u043a\u0442\u0430.","a09755b7":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n| \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 | \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 | \u0422\u0438\u043f |\n|---|---|---|\n| State | \u0411\u0443\u043a\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u0448\u0442\u0430\u0442\u0430 | \u043d\u043e\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 |\n| Account length | \u041a\u0430\u043a \u0434\u043e\u043b\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0435\u0439 | \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 |\n| Area code | \u041f\u0440\u0435\u0444\u0438\u043a\u0441 \u043d\u043e\u043c\u0435\u0440\u0430 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 | \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 |\n| International plan | \u041c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u044b\u0439 \u0440\u043e\u0443\u043c\u0438\u043d\u0433 (\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\/\u043d\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d) | \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 |\n| Voice mail plan | \u0413\u043e\u043b\u043e\u0441\u043e\u0432\u0430\u044f \u043f\u043e\u0447\u0442\u0430 (\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0430\/\u043d\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0430) | \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 |\n| Number vmail messages | \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u043b\u043e\u0441\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 | \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 |\n| Total day minutes | \u041e\u0431\u0449\u0430\u044f \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u043e\u0432 \u0434\u043d\u0435\u043c | \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 |\n| Total day calls | \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0432\u043e\u043d\u043a\u043e\u0432 \u0434\u043d\u0435\u043c | \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 |\n| Total day charge | \u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0437\u0430 \u0443\u0441\u043b\u0443\u0433\u0438 \u0434\u043d\u0435\u043c | \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 |\n| Total eve minutes | \u041e\u0431\u0449\u0430\u044f \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u043e\u0432 \u0432\u0435\u0447\u0435\u0440\u043e\u043c | \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 |\n| Total eve calls | \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0432\u043e\u043d\u043a\u043e\u0432 \u0432\u0435\u0447\u0435\u0440\u043e\u043c | \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 |\n| Total eve charge | \u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0437\u0430 \u0443\u0441\u043b\u0443\u0433\u0438 \u0432\u0435\u0447\u0435\u0440\u043e\u043c | \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 |\n| Total night minutes | \u041e\u0431\u0449\u0430\u044f \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u043e\u0432 \u043d\u043e\u0447\u044c\u044e | \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 |\n| Total night calls | \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0432\u043e\u043d\u043a\u043e\u0432 \u043d\u043e\u0447\u044c\u044e | \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 |\n| Total night charge | \u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0437\u0430 \u0443\u0441\u043b\u0443\u0433\u0438 \u043d\u043e\u0447\u044c\u044e | \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 |\n| Total intl minutes | \u041e\u0431\u0449\u0430\u044f \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u044b\u0445 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u043e\u0432 | \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 |\n| Total intl calls | \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u044b\u0445 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u043e\u0432 | \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 |\n| Total intl charge | \u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0437\u0430 \u043c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u044b\u0435 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u044b | \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 |\n| Customer service calls | \u0427\u0438\u0441\u043b\u043e \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0439 \u0432 \u0441\u0435\u0440\u0432\u0438\u0441\u043d\u044b\u0439 \u0446\u0435\u043d\u0442\u0440 | \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 |\n\n\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f: **Churn** \u2013 \u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0442\u0442\u043e\u043a\u0430, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a (1 \u2013 \u043f\u043e\u0442\u0435\u0440\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0442\u043e \u0435\u0441\u0442\u044c \u043e\u0442\u0442\u043e\u043a). \u041f\u043e\u0442\u043e\u043c \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438, \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0438 \u043d\u0430\u0437\u0432\u0430\u043b\u0438 \u0435\u0433\u043e \u0446\u0435\u043b\u0435\u0432\u044b\u043c."}}