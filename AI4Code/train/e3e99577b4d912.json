{"cell_type":{"ef807a28":"code","d54a9abd":"code","f5efd77e":"code","5f78c3bd":"code","d5afa2d5":"code","9d3b4797":"code","dc095804":"code","b71a8991":"code","3111be12":"code","bf79be16":"code","80ccaa5d":"code","61f5200c":"code","fc7595fc":"code","c9d9f838":"code","eb6d9940":"code","6c056364":"code","0d02311c":"code","b1d2064d":"markdown","0a70b1c7":"markdown","12d17169":"markdown"},"source":{"ef807a28":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d54a9abd":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split, KFold\nfrom xgboost import XGBClassifier","f5efd77e":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv')\ntrain.head()","5f78c3bd":"test.head()","d5afa2d5":"train.isnull().sum()","9d3b4797":"test.isnull().sum()","dc095804":"df_copy = train.copy()\ndf_copy = pd.get_dummies(df_copy, columns=['Embarked'])\ndf_copy.head(10)","b71a8991":"def fill_na_values(df):\n    \n    df['Age'].fillna(df['Age'].mean(), inplace=True)\n    df['Fare'].fillna(df['Fare'].median(), inplace=True)\n    \n    df['hasCabin'] = df['Cabin'].apply(lambda x: 1 if type(x) == str else 0)\n    df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})\n    df = pd.get_dummies(df, columns=['Embarked'])\n    print(df.isnull().sum())\n    print(df.head())\n    \n    return df\n","3111be12":"train = fill_na_values(train)\ntest = fill_na_values(test)","bf79be16":"train.head()","80ccaa5d":"features = [col for col in train.columns if col not in ['Survived', 'PassengerId', 'Name', 'Ticket', 'Cabin']]\nfeatures","61f5200c":"plt.figure(figsize=(8, 6))\nsns.countplot(x='Survived', data=train)","fc7595fc":"plt.figure(figsize=(8, 6))\nsns.countplot(x='Sex', data=train)\nplt.xticks([0,1],['Male', 'Female'])","c9d9f838":"plt.figure(figsize=(8,8))\nsns.heatmap(data=train[['Survived', 'Sex']].corr(), annot=True, alpha=0.6)","eb6d9940":"# feature correlations\nplt.figure(figsize=(18, 14))\nsns.heatmap(train[features + ['Survived']].corr(), annot=True, alpha=0.8)","6c056364":"plt.figure(figsize=(8,6))\nsns.countplot(x='hasCabin', data=train)","0d02311c":"fig, axes = plt.subplots(1,3, sharey=True, figsize=(16,8))\n\nsns.countplot(ax=axes[0], x='Embarked_C', data=train)\n\nsns.countplot(ax=axes[1], x='Embarked_Q', data=train)\naxes[1].set_ylabel('')\naxes[1].spines['left'].set_visible(False)\n\nsns.countplot(ax=axes[2], x='Embarked_S', data=train)\naxes[2].set_ylabel('')\n\nplt.suptitle('Embarked')\nsns.despine(top=True, right=True)","b1d2064d":"## Import and Examine Data","0a70b1c7":"## Preprocessing Data","12d17169":"## Data Analysis"}}