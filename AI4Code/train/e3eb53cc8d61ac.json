{"cell_type":{"5af509a6":"code","eb6e0147":"code","778153b3":"code","a6f9bac7":"code","ea112e89":"code","2aed2960":"code","866f54b6":"code","c78a5e1a":"code","2000ee78":"code","a2ba1559":"code","774edd65":"code","4b169ef4":"code","91e81cf5":"code","627e4677":"code","ea529d42":"markdown","d6243bdd":"markdown"},"source":{"5af509a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eb6e0147":"import tensorflow as tf\nfrom tensorflow.keras.layers import Input, Lambda, Dense, Flatten\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications.xception import Xception\nfrom tensorflow.keras.applications.vgg19 import VGG19\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img\nfrom keras.optimizers import RMSprop\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.models import load_model\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom glob import glob","778153b3":"IMAGE_SIZE = [224, 224]\n\ntrain_path = '..\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/train'\nvalid_path = '..\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/valid'","a6f9bac7":"vgg19 = VGG19(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)","ea112e89":"for layer in vgg19.layers:\n    layer.trainable = False\nfolders = glob('..\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/train\/*')","2aed2960":"x = Flatten()(vgg19.output)","866f54b6":"prediction = Dense(len(folders), activation='softmax')(x)\n\n# create a model object\nmodel = Model(inputs=vgg19.input, outputs=prediction)","c78a5e1a":"#Using RMSProp - optimizer , LR - 0.001\n\noptimizer = RMSprop(0.001) \n\nmodel.compile(\n  loss = 'categorical_crossentropy',\n  optimizer = optimizer,\n  metrics = ['accuracy']\n)\n\n\n\n#DATA  AUGMENTATION\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n","2000ee78":"# Target size should be same as training_se\ntraining_set = train_datagen.flow_from_directory('..\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/train',\n                                                 target_size = (224, 224),\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical')\n\ntest_set = test_datagen.flow_from_directory('..\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/valid',\n                                            target_size = (224, 224),\n                                            batch_size = 32,\n                                            class_mode = 'categorical')","a2ba1559":"es = EarlyStopping(patience=20, restore_best_weights=True)\n\nr = model.fit_generator(\n  training_set,\n  validation_data=test_set,\n  epochs=30,\n  steps_per_epoch=len(training_set),\n  validation_steps=len(test_set),\n  callbacks=es\n) ","774edd65":"valid_loss, valid_acc = model.evaluate_generator(test_set, steps=len(test_set))\nprint(f\"Final validation accuracy: {valid_acc*100:.2f}%\")\n\n","4b169ef4":"# plot the loss\nplt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n\n# plot the accuracy\nplt.plot(r.history['accuracy'], label='train acc')\nplt.plot(r.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('Acc-Val_acc')","91e81cf5":"model.save('model_VGG19.h5')\nprint(\"Model saved successfully...\")\n\n","627e4677":"y_pred = model.predict(test_set)\ny_pred = np.argmax(y_pred, axis=1)\ny_pred","ea529d42":"# THIS MODEL IS INSPIRED BY KRISH NAIK\n\nIN THIS MODEL WE WILL :\n* DEFINE FOLDER\n* LOAD MODEL\n* DATA AUGMENT\n* FIT MODEL\n* PLOT GRAPH\n* PREDICT","d6243bdd":"# PLEASE LIKE , COMMENT AND CRITICIZE"}}