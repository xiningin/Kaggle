{"cell_type":{"6ce937d0":"code","c8b109dd":"code","33da7465":"markdown","4deaa409":"markdown"},"source":{"6ce937d0":"# PACKAGES\n# ------------------------------------------------------\nimport numpy as np \nimport pandas as pd \nimport os\nimport gc\npd.set_option('display.max_columns', None)\npd.options.display.float_format = '{:.2f}'.format\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# IMPORT\n# ------------------------------------------------------\n\ntrain = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/train.csv\")\ntest = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/test.csv\")\ntrain[\"date\"] = pd.to_datetime(train.date)\ntest[\"date\"] = pd.to_datetime(test.date)\nholidays = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/holidays_events.csv\")\nholidays[\"date\"] = pd.to_datetime(holidays.date)\nstores = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/stores.csv\")\n\n\n# holidays[holidays.type == \"Holiday\"]\n# holidays[(holidays.type == \"Holiday\") & (holidays.transferred == True)]\n\n# Transferred Holidays\n# ------------------------------------------------------\n\ntr1 = holidays[(holidays.type == \"Holiday\") & (holidays.transferred == True)].drop(\"transferred\", axis = 1).reset_index(drop = True)\ntr2 = holidays[(holidays.type == \"Transfer\")].drop(\"transferred\", axis = 1).reset_index(drop = True)\ntr = pd.concat([tr1,tr2], axis = 1)\ntr = tr.iloc[:, [5,1,2,3,4]]\n\nholidays = holidays[(holidays.transferred == False) & (holidays.type != \"Transfer\")].drop(\"transferred\", axis = 1)\nholidays = holidays.append(tr).reset_index(drop = True)\n\n\n# Additional Holidays\n# ------------------------------------------------------\nholidays[\"description\"] = holidays[\"description\"].str.replace(\"-\", \"\").str.replace(\"+\", \"\").str.replace('\\d+', '')\nholidays[\"type\"] = np.where(holidays[\"type\"] == \"Additional\", \"Holiday\", holidays[\"type\"])\n\n# Bridge Holidays\n# ------------------------------------------------------\nholidays[\"description\"] = holidays[\"description\"].str.replace(\"Puente \", \"\")\nholidays[\"type\"] = np.where(holidays[\"type\"] == \"Bridge\", \"Holiday\", holidays[\"type\"])\n\n \n# Work Day Holidays, that is meant to payback the Bridge.\n# ------------------------------------------------------\nwork_day = holidays[holidays.type == \"Work Day\"]  \nholidays = holidays[holidays.type != \"Work Day\"]  \n\n\n# Split\n# ------------------------------------------------------\n\n# Events are national\nevents = holidays[holidays.type == \"Event\"].drop([\"type\", \"locale\", \"locale_name\"], axis = 1).rename({\"description\":\"events\"}, axis = 1)\n\nholidays = holidays[holidays.type != \"Event\"].drop(\"type\", axis = 1)\nregional = holidays[holidays.locale == \"Regional\"].rename({\"locale_name\":\"state\", \"description\":\"holiday_regional\"}, axis = 1).drop(\"locale\", axis = 1).drop_duplicates()\nnational = holidays[holidays.locale == \"National\"].rename({\"description\":\"holiday_national\"}, axis = 1).drop([\"locale\", \"locale_name\"], axis = 1).drop_duplicates()\nlocal = holidays[holidays.locale == \"Local\"].rename({\"description\":\"holiday_local\", \"locale_name\":\"city\"}, axis = 1).drop(\"locale\", axis = 1).drop_duplicates()\n\n# TRAIN TEST\n# ------------------------------------------------------\nd = pd.merge(train.append(test), stores)\nd[\"store_nbr\"] = d[\"store_nbr\"].astype(\"int8\")\n\n\n# MERGE\n# ------------------------------------------------------\n# National Holidays & Events\n#d = pd.merge(d, events, how = \"left\")\nd = pd.merge(d, national, how = \"left\")\n# Regional\nd = pd.merge(d, regional, how = \"left\", on = [\"date\", \"state\"])\n# Local\nd = pd.merge(d, local, how = \"left\", on = [\"date\", \"city\"])\n\n# Work Day: It will be removed when real work day colum created\nd = pd.merge(d,  work_day[[\"date\", \"type\"]].rename({\"type\":\"IsWorkDay\"}, axis = 1),how = \"left\")\n\n# EVENTS\nevents[\"events\"] =np.where(events.events.str.contains(\"futbol\"), \"Futbol\", events.events)\n\n#ONE HOT ENCODER\n# ------------------------------------------------------\ndef one_hot_encoder(df, nan_as_category=True):\n    original_columns = list(df.columns)\n    categorical_columns = df.select_dtypes([\"category\", \"object\"]).columns.tolist()\n    # categorical_columns = [col for col in df.columns if df[col].dtype == 'object']\n    df = pd.get_dummies(df, columns=categorical_columns, dummy_na=nan_as_category)\n    new_columns = [c for c in df.columns if c not in original_columns]\n    df.columns = df.columns.str.replace(\" \", \"_\")\n    return df, df.columns.tolist()\n\nevents, events_cat = one_hot_encoder(events, nan_as_category=False)\nevents[\"events_Dia_de_la_Madre\"] = np.where(events.date == \"2016-05-08\", 1,events[\"events_Dia_de_la_Madre\"])\nevents = events.drop(239)\n\nd = pd.merge(d, events, how = \"left\")\nd[events_cat] = d[events_cat].fillna(0)\n\n\n# New features\n# ------------------------------------------------------\nd[\"holiday_national_binary\"] = np.where(d.holiday_national.notnull(), 1, 0)\nd[\"holiday_local_binary\"] = np.where(d.holiday_local.notnull(), 1, 0)\nd[\"holiday_regional_binary\"] = np.where(d.holiday_regional.notnull(), 1, 0)\n\n# \nd[\"national_independence\"] = np.where(d.holiday_national.isin(['Batalla de Pichincha',  'Independencia de Cuenca', 'Independencia de Guayaquil', 'Independencia de Guayaquil', 'Primer Grito de Independencia']), 1, 0)\nd[\"local_cantonizacio\"] = np.where(d.holiday_local.str.contains(\"Cantonizacio\"), 1, 0)\nd[\"local_fundacion\"] = np.where(d.holiday_local.str.contains(\"Fundacion\"), 1, 0)\nd[\"local_independencia\"] = np.where(d.holiday_local.str.contains(\"Independencia\"), 1, 0)\n\n\nholidays, holidays_cat = one_hot_encoder(d[[\"holiday_national\",\"holiday_regional\",\"holiday_local\"]], nan_as_category=False)\nd = pd.concat([d.drop([\"holiday_national\",\"holiday_regional\",\"holiday_local\"], axis = 1),holidays], axis = 1)\n\nhe_cols = d.columns[d.columns.str.startswith(\"events\")].tolist() + d.columns[d.columns.str.startswith(\"holiday\")].tolist() + d.columns[d.columns.str.startswith(\"national\")].tolist()+ d.columns[d.columns.str.startswith(\"local\")].tolist()\nd[he_cols] = d[he_cols].astype(\"int8\")\n\nd[[\"family\", \"city\", \"state\", \"type\"]] = d[[\"family\", \"city\", \"state\", \"type\"]].astype(\"category\")\n\ndel holidays, holidays_cat, work_day, local, regional, national, events, events_cat, tr, tr1, tr2, he_cols, train, test, stores\ngc.collect()\n\n\n# Time Related Features\n# ------------------------------------------------------\ndef create_date_features(df):\n    df['month'] = df.date.dt.month.astype(\"int8\")\n    df['day_of_month'] = df.date.dt.day.astype(\"int8\")\n    df['day_of_year'] = df.date.dt.dayofyear.astype(\"int16\")\n    df['week_of_month'] = (df.date.apply(lambda d: (d.day-1) \/\/ 7 + 1)).astype(\"int8\")\n    df['week_of_year'] = (df.date.dt.weekofyear).astype(\"int8\")\n    df['day_of_week'] = (df.date.dt.dayofweek + 1).astype(\"int8\")\n    df['year'] = df.date.dt.year.astype(\"int32\")\n    df[\"is_wknd\"] = (df.date.dt.weekday \/\/ 4).astype(\"int8\")\n    df[\"quarter\"] = df.date.dt.quarter.astype(\"int8\")\n    df['is_month_start'] = df.date.dt.is_month_start.astype(\"int8\")\n    df['is_month_end'] = df.date.dt.is_month_end.astype(\"int8\")\n    df['is_quarter_start'] = df.date.dt.is_quarter_start.astype(\"int8\")\n    df['is_quarter_end'] = df.date.dt.is_quarter_end.astype(\"int8\")\n    df['is_year_start'] = df.date.dt.is_year_start.astype(\"int8\")\n    df['is_year_end'] = df.date.dt.is_year_end.astype(\"int8\")\n    # 0: Winter - 1: Spring - 2: Summer - 3: Fall\n    df[\"season\"] = np.where(df.month.isin([12,1,2]), 0, 1)\n    df[\"season\"] = np.where(df.month.isin([6,7,8]), 2, df[\"season\"])\n    df[\"season\"] = pd.Series(np.where(df.month.isin([9, 10, 11]), 3, df[\"season\"])).astype(\"int8\")\n    return df\nd = create_date_features(d)\n\n\n# Workday column\n# ------------------------------------------------------\nd[\"workday\"] = np.where((d.holiday_national_binary == 1) | (d.holiday_local_binary==1) | (d.holiday_regional_binary==1) | (d['day_of_week'].isin([6,7])), 0, 1)\nd[\"workday\"] = pd.Series(np.where(d.IsWorkDay.notnull(), 1, d[\"workday\"])).astype(\"int8\")\nd.drop(\"IsWorkDay\", axis = 1, inplace = True)\n\n# Write csv\n# ------------------------------------------------------\nd.to_csv(\"storesales_holidays_events.csv\", index = None)\n\n# FINAL DATA\n# ------------------------------------------------------\nd.head(5)","c8b109dd":"d.info()","33da7465":"## Don't forget giving an upvote :) Thanks!","4deaa409":"![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/29781\/logos\/header.png?t=2021-09-22-19-59-35)"}}