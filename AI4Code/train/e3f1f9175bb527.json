{"cell_type":{"c256d71e":"code","6e8c0828":"code","58233a7a":"code","1baa92c8":"code","3abdb155":"code","beaccae5":"code","29c433f3":"code","663685c1":"code","1152393e":"code","f613e6dc":"code","3c4831bd":"code","b3c0102a":"code","420b02b9":"markdown","07de66b4":"markdown","a6e6316a":"markdown","e94bb547":"markdown","4621f80b":"markdown","69c96c48":"markdown","478ee229":"markdown","02f5adcc":"markdown"},"source":{"c256d71e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, BatchNormalization\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","6e8c0828":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","58233a7a":"print(train.shape)\nprint(test.shape)","1baa92c8":"y_train = train['label']\nx_train = train.drop('label',axis=1)\nprint(y_train.shape)\nprint(x_train.shape)","3abdb155":"# PIXELS ARE FORMED INTO SET OF IMAGES OF SIZE 28*28*1\n\nx_train = np.array(x_train).reshape(42000,28,28,1)\ny_train = np.array(y_train)\nx_test = np.array(test).reshape(28000,28,28,1)","beaccae5":"x_train = x_train\/255\nx_test = x_test\/255\nprint(x_train.shape)\nprint(x_test.shape)","29c433f3":"model = Sequential()\nmodel.add(Conv2D(16, kernel_size=4, input_shape=[28,28,1], activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32, kernel_size=4, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(2))\nmodel.add(Conv2D(64, kernel_size=4, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.1))\nmodel.add(Conv2D(128, kernel_size=4, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Flatten())\nmodel.add(Dense(3200, activation='tanh'))\nmodel.add(BatchNormalization())\nmodel.add(Dense(10, activation='softmax'))","663685c1":"model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])","1152393e":"model.fit(x = x_train,y = y_train,epochs = 10)","f613e6dc":"pred = model.predict_classes(x_test)","3c4831bd":"demo = x_test[10]\nplt.imshow(demo.reshape(28,28))","b3c0102a":"pred[10]","420b02b9":"## **GOT PREDICTIONS (98.87 ACCURACY) !!!**","07de66b4":"## **SEQUENTIAL MODEL OF CNN USING KERAS**","a6e6316a":"## **SHAPE CHECKING AND FORMING TRAIN AND TEST SET**","e94bb547":"## **IMPORTING LIBRARIES**","4621f80b":"## **READING DATA**","69c96c48":"## **COMPILE AND FIT TO TEST DATA**","478ee229":"## **RESHAPING AND NORMALIZING TRAIN AND TEST SET**","02f5adcc":"## **VISUALIZATION AND DEMO TESTING**"}}